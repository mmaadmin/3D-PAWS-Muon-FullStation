
/Users/rjbubon/Documents/Particle/3D-PAWS-Muon-FullStation/target/6.3.3/msom/3D-PAWS-Muon-FullStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085e4000  085e4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085e4018  085e4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  085e40a4  085e40a4  000040a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .dynalib      00000008  023e4ff8  085e40b0  00004ff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .psram_text   0001aff4  023e5000  085e40b8  00005000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  5 .data_alt     00000000  023ffff4  023ffff4  00030000  2**0
                  CONTENTS
  6 .bss_alt      00000000  023ffff4  023ffff4  00030000  2**0
                  CONTENTS
  7 .data         0000014c  1006a138  085ff0ac  0002a138  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00010d74  1006a288  1006a288  0003a288  2**3
                  ALLOC
  9 .secure_ram_text 00000000  1007d000  1007d000  00030000  2**0
                  CONTENTS
 10 .backup       00000004  1007b400  085ff1f8  0002b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .module_info_suffix_align 00000dbc  085ff1fc  085ff1fc  0002f1fc  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0002ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0002fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   00492f7a  00000000  00000000  00030000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00046430  00000000  00000000  004c2f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    000af4e9  00000000  00000000  005093aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00006c08  00000000  00000000  005b8893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0001ae20  00000000  00000000  005bf49b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000c2437  00000000  00000000  005da2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   001018f8  00000000  00000000  0069c6f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0016904f  00000000  00000000  0079dfea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000150e8  00000000  00000000  0090703c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085e4018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85e4018:	4813      	ldr	r0, [pc, #76]	; (85e4068 <module_user_pre_init+0x50>)
 85e401a:	4914      	ldr	r1, [pc, #80]	; (85e406c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85e401c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85e401e:	4288      	cmp	r0, r1
 85e4020:	d005      	beq.n	85e402e <module_user_pre_init+0x16>
 85e4022:	4a13      	ldr	r2, [pc, #76]	; (85e4070 <module_user_pre_init+0x58>)
 85e4024:	4282      	cmp	r2, r0
 85e4026:	d002      	beq.n	85e402e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85e4028:	4b12      	ldr	r3, [pc, #72]	; (85e4074 <module_user_pre_init+0x5c>)
 85e402a:	1a12      	subs	r2, r2, r0
 85e402c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85e402e:	4812      	ldr	r0, [pc, #72]	; (85e4078 <module_user_pre_init+0x60>)
 85e4030:	4a12      	ldr	r2, [pc, #72]	; (85e407c <module_user_pre_init+0x64>)
 85e4032:	2100      	movs	r1, #0
 85e4034:	4b12      	ldr	r3, [pc, #72]	; (85e4080 <module_user_pre_init+0x68>)
 85e4036:	1a12      	subs	r2, r2, r0
 85e4038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85e403a:	4812      	ldr	r0, [pc, #72]	; (85e4084 <module_user_pre_init+0x6c>)
 85e403c:	4912      	ldr	r1, [pc, #72]	; (85e4088 <module_user_pre_init+0x70>)
 85e403e:	4288      	cmp	r0, r1
 85e4040:	d005      	beq.n	85e404e <module_user_pre_init+0x36>
 85e4042:	4a12      	ldr	r2, [pc, #72]	; (85e408c <module_user_pre_init+0x74>)
 85e4044:	4282      	cmp	r2, r0
 85e4046:	d002      	beq.n	85e404e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85e4048:	4b0a      	ldr	r3, [pc, #40]	; (85e4074 <module_user_pre_init+0x5c>)
 85e404a:	1a12      	subs	r2, r2, r0
 85e404c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85e404e:	4810      	ldr	r0, [pc, #64]	; (85e4090 <module_user_pre_init+0x78>)
 85e4050:	4910      	ldr	r1, [pc, #64]	; (85e4094 <module_user_pre_init+0x7c>)
 85e4052:	4288      	cmp	r0, r1
 85e4054:	d005      	beq.n	85e4062 <module_user_pre_init+0x4a>
 85e4056:	4a10      	ldr	r2, [pc, #64]	; (85e4098 <module_user_pre_init+0x80>)
 85e4058:	4282      	cmp	r2, r0
 85e405a:	d002      	beq.n	85e4062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85e405c:	4b05      	ldr	r3, [pc, #20]	; (85e4074 <module_user_pre_init+0x5c>)
 85e405e:	1a12      	subs	r2, r2, r0
 85e4060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85e4062:	4801      	ldr	r0, [pc, #4]	; (85e4068 <module_user_pre_init+0x50>)
 85e4064:	bd08      	pop	{r3, pc}
 85e4066:	bf00      	nop
 85e4068:	1006a138 	.word	0x1006a138
 85e406c:	085ff0ac 	.word	0x085ff0ac
 85e4070:	1006a284 	.word	0x1006a284
 85e4074:	10110d2d 	.word	0x10110d2d
 85e4078:	1006a288 	.word	0x1006a288
 85e407c:	1007affc 	.word	0x1007affc
 85e4080:	10110ea1 	.word	0x10110ea1
 85e4084:	023e4ff8 	.word	0x023e4ff8
 85e4088:	085e40b0 	.word	0x085e40b0
 85e408c:	023e5000 	.word	0x023e5000
 85e4090:	023e5000 	.word	0x023e5000
 85e4094:	085e40b8 	.word	0x085e40b8
 85e4098:	023ffff4 	.word	0x023ffff4

085e409c <dynalib_preinit>:
 85e409c:	085e4019 00000000                       .@^.....

Disassembly of section .psram_text:

023e5000 <__aeabi_drsub>:
 23e5000:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23e5004:	e002      	b.n	23e500c <__adddf3>
 23e5006:	bf00      	nop

023e5008 <__aeabi_dsub>:
 23e5008:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023e500c <__adddf3>:
 23e500c:	b530      	push	{r4, r5, lr}
 23e500e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23e5012:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23e5016:	ea94 0f05 	teq	r4, r5
 23e501a:	bf08      	it	eq
 23e501c:	ea90 0f02 	teqeq	r0, r2
 23e5020:	bf1f      	itttt	ne
 23e5022:	ea54 0c00 	orrsne.w	ip, r4, r0
 23e5026:	ea55 0c02 	orrsne.w	ip, r5, r2
 23e502a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23e502e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23e5032:	f000 80e2 	beq.w	23e51fa <__adddf3+0x1ee>
 23e5036:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23e503a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23e503e:	bfb8      	it	lt
 23e5040:	426d      	neglt	r5, r5
 23e5042:	dd0c      	ble.n	23e505e <__adddf3+0x52>
 23e5044:	442c      	add	r4, r5
 23e5046:	ea80 0202 	eor.w	r2, r0, r2
 23e504a:	ea81 0303 	eor.w	r3, r1, r3
 23e504e:	ea82 0000 	eor.w	r0, r2, r0
 23e5052:	ea83 0101 	eor.w	r1, r3, r1
 23e5056:	ea80 0202 	eor.w	r2, r0, r2
 23e505a:	ea81 0303 	eor.w	r3, r1, r3
 23e505e:	2d36      	cmp	r5, #54	; 0x36
 23e5060:	bf88      	it	hi
 23e5062:	bd30      	pophi	{r4, r5, pc}
 23e5064:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23e5068:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23e506c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23e5070:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23e5074:	d002      	beq.n	23e507c <__adddf3+0x70>
 23e5076:	4240      	negs	r0, r0
 23e5078:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e507c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23e5080:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23e5084:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23e5088:	d002      	beq.n	23e5090 <__adddf3+0x84>
 23e508a:	4252      	negs	r2, r2
 23e508c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e5090:	ea94 0f05 	teq	r4, r5
 23e5094:	f000 80a7 	beq.w	23e51e6 <__adddf3+0x1da>
 23e5098:	f1a4 0401 	sub.w	r4, r4, #1
 23e509c:	f1d5 0e20 	rsbs	lr, r5, #32
 23e50a0:	db0d      	blt.n	23e50be <__adddf3+0xb2>
 23e50a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 23e50a6:	fa22 f205 	lsr.w	r2, r2, r5
 23e50aa:	1880      	adds	r0, r0, r2
 23e50ac:	f141 0100 	adc.w	r1, r1, #0
 23e50b0:	fa03 f20e 	lsl.w	r2, r3, lr
 23e50b4:	1880      	adds	r0, r0, r2
 23e50b6:	fa43 f305 	asr.w	r3, r3, r5
 23e50ba:	4159      	adcs	r1, r3
 23e50bc:	e00e      	b.n	23e50dc <__adddf3+0xd0>
 23e50be:	f1a5 0520 	sub.w	r5, r5, #32
 23e50c2:	f10e 0e20 	add.w	lr, lr, #32
 23e50c6:	2a01      	cmp	r2, #1
 23e50c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 23e50cc:	bf28      	it	cs
 23e50ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 23e50d2:	fa43 f305 	asr.w	r3, r3, r5
 23e50d6:	18c0      	adds	r0, r0, r3
 23e50d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23e50dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23e50e0:	d507      	bpl.n	23e50f2 <__adddf3+0xe6>
 23e50e2:	f04f 0e00 	mov.w	lr, #0
 23e50e6:	f1dc 0c00 	rsbs	ip, ip, #0
 23e50ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 23e50ee:	eb6e 0101 	sbc.w	r1, lr, r1
 23e50f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23e50f6:	d31b      	bcc.n	23e5130 <__adddf3+0x124>
 23e50f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23e50fc:	d30c      	bcc.n	23e5118 <__adddf3+0x10c>
 23e50fe:	0849      	lsrs	r1, r1, #1
 23e5100:	ea5f 0030 	movs.w	r0, r0, rrx
 23e5104:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23e5108:	f104 0401 	add.w	r4, r4, #1
 23e510c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23e5110:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23e5114:	f080 809a 	bcs.w	23e524c <__adddf3+0x240>
 23e5118:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23e511c:	bf08      	it	eq
 23e511e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23e5122:	f150 0000 	adcs.w	r0, r0, #0
 23e5126:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23e512a:	ea41 0105 	orr.w	r1, r1, r5
 23e512e:	bd30      	pop	{r4, r5, pc}
 23e5130:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23e5134:	4140      	adcs	r0, r0
 23e5136:	eb41 0101 	adc.w	r1, r1, r1
 23e513a:	3c01      	subs	r4, #1
 23e513c:	bf28      	it	cs
 23e513e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23e5142:	d2e9      	bcs.n	23e5118 <__adddf3+0x10c>
 23e5144:	f091 0f00 	teq	r1, #0
 23e5148:	bf04      	itt	eq
 23e514a:	4601      	moveq	r1, r0
 23e514c:	2000      	moveq	r0, #0
 23e514e:	fab1 f381 	clz	r3, r1
 23e5152:	bf08      	it	eq
 23e5154:	3320      	addeq	r3, #32
 23e5156:	f1a3 030b 	sub.w	r3, r3, #11
 23e515a:	f1b3 0220 	subs.w	r2, r3, #32
 23e515e:	da0c      	bge.n	23e517a <__adddf3+0x16e>
 23e5160:	320c      	adds	r2, #12
 23e5162:	dd08      	ble.n	23e5176 <__adddf3+0x16a>
 23e5164:	f102 0c14 	add.w	ip, r2, #20
 23e5168:	f1c2 020c 	rsb	r2, r2, #12
 23e516c:	fa01 f00c 	lsl.w	r0, r1, ip
 23e5170:	fa21 f102 	lsr.w	r1, r1, r2
 23e5174:	e00c      	b.n	23e5190 <__adddf3+0x184>
 23e5176:	f102 0214 	add.w	r2, r2, #20
 23e517a:	bfd8      	it	le
 23e517c:	f1c2 0c20 	rsble	ip, r2, #32
 23e5180:	fa01 f102 	lsl.w	r1, r1, r2
 23e5184:	fa20 fc0c 	lsr.w	ip, r0, ip
 23e5188:	bfdc      	itt	le
 23e518a:	ea41 010c 	orrle.w	r1, r1, ip
 23e518e:	4090      	lslle	r0, r2
 23e5190:	1ae4      	subs	r4, r4, r3
 23e5192:	bfa2      	ittt	ge
 23e5194:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23e5198:	4329      	orrge	r1, r5
 23e519a:	bd30      	popge	{r4, r5, pc}
 23e519c:	ea6f 0404 	mvn.w	r4, r4
 23e51a0:	3c1f      	subs	r4, #31
 23e51a2:	da1c      	bge.n	23e51de <__adddf3+0x1d2>
 23e51a4:	340c      	adds	r4, #12
 23e51a6:	dc0e      	bgt.n	23e51c6 <__adddf3+0x1ba>
 23e51a8:	f104 0414 	add.w	r4, r4, #20
 23e51ac:	f1c4 0220 	rsb	r2, r4, #32
 23e51b0:	fa20 f004 	lsr.w	r0, r0, r4
 23e51b4:	fa01 f302 	lsl.w	r3, r1, r2
 23e51b8:	ea40 0003 	orr.w	r0, r0, r3
 23e51bc:	fa21 f304 	lsr.w	r3, r1, r4
 23e51c0:	ea45 0103 	orr.w	r1, r5, r3
 23e51c4:	bd30      	pop	{r4, r5, pc}
 23e51c6:	f1c4 040c 	rsb	r4, r4, #12
 23e51ca:	f1c4 0220 	rsb	r2, r4, #32
 23e51ce:	fa20 f002 	lsr.w	r0, r0, r2
 23e51d2:	fa01 f304 	lsl.w	r3, r1, r4
 23e51d6:	ea40 0003 	orr.w	r0, r0, r3
 23e51da:	4629      	mov	r1, r5
 23e51dc:	bd30      	pop	{r4, r5, pc}
 23e51de:	fa21 f004 	lsr.w	r0, r1, r4
 23e51e2:	4629      	mov	r1, r5
 23e51e4:	bd30      	pop	{r4, r5, pc}
 23e51e6:	f094 0f00 	teq	r4, #0
 23e51ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23e51ee:	bf06      	itte	eq
 23e51f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23e51f4:	3401      	addeq	r4, #1
 23e51f6:	3d01      	subne	r5, #1
 23e51f8:	e74e      	b.n	23e5098 <__adddf3+0x8c>
 23e51fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23e51fe:	bf18      	it	ne
 23e5200:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23e5204:	d029      	beq.n	23e525a <__adddf3+0x24e>
 23e5206:	ea94 0f05 	teq	r4, r5
 23e520a:	bf08      	it	eq
 23e520c:	ea90 0f02 	teqeq	r0, r2
 23e5210:	d005      	beq.n	23e521e <__adddf3+0x212>
 23e5212:	ea54 0c00 	orrs.w	ip, r4, r0
 23e5216:	bf04      	itt	eq
 23e5218:	4619      	moveq	r1, r3
 23e521a:	4610      	moveq	r0, r2
 23e521c:	bd30      	pop	{r4, r5, pc}
 23e521e:	ea91 0f03 	teq	r1, r3
 23e5222:	bf1e      	ittt	ne
 23e5224:	2100      	movne	r1, #0
 23e5226:	2000      	movne	r0, #0
 23e5228:	bd30      	popne	{r4, r5, pc}
 23e522a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23e522e:	d105      	bne.n	23e523c <__adddf3+0x230>
 23e5230:	0040      	lsls	r0, r0, #1
 23e5232:	4149      	adcs	r1, r1
 23e5234:	bf28      	it	cs
 23e5236:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23e523a:	bd30      	pop	{r4, r5, pc}
 23e523c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23e5240:	bf3c      	itt	cc
 23e5242:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23e5246:	bd30      	popcc	{r4, r5, pc}
 23e5248:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23e524c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23e5250:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23e5254:	f04f 0000 	mov.w	r0, #0
 23e5258:	bd30      	pop	{r4, r5, pc}
 23e525a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23e525e:	bf1a      	itte	ne
 23e5260:	4619      	movne	r1, r3
 23e5262:	4610      	movne	r0, r2
 23e5264:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23e5268:	bf1c      	itt	ne
 23e526a:	460b      	movne	r3, r1
 23e526c:	4602      	movne	r2, r0
 23e526e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23e5272:	bf06      	itte	eq
 23e5274:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23e5278:	ea91 0f03 	teqeq	r1, r3
 23e527c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23e5280:	bd30      	pop	{r4, r5, pc}
 23e5282:	bf00      	nop

023e5284 <__aeabi_ui2d>:
 23e5284:	f090 0f00 	teq	r0, #0
 23e5288:	bf04      	itt	eq
 23e528a:	2100      	moveq	r1, #0
 23e528c:	4770      	bxeq	lr
 23e528e:	b530      	push	{r4, r5, lr}
 23e5290:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23e5294:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23e5298:	f04f 0500 	mov.w	r5, #0
 23e529c:	f04f 0100 	mov.w	r1, #0
 23e52a0:	e750      	b.n	23e5144 <__adddf3+0x138>
 23e52a2:	bf00      	nop

023e52a4 <__aeabi_i2d>:
 23e52a4:	f090 0f00 	teq	r0, #0
 23e52a8:	bf04      	itt	eq
 23e52aa:	2100      	moveq	r1, #0
 23e52ac:	4770      	bxeq	lr
 23e52ae:	b530      	push	{r4, r5, lr}
 23e52b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23e52b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23e52b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23e52bc:	bf48      	it	mi
 23e52be:	4240      	negmi	r0, r0
 23e52c0:	f04f 0100 	mov.w	r1, #0
 23e52c4:	e73e      	b.n	23e5144 <__adddf3+0x138>
 23e52c6:	bf00      	nop

023e52c8 <__aeabi_f2d>:
 23e52c8:	0042      	lsls	r2, r0, #1
 23e52ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23e52ce:	ea4f 0131 	mov.w	r1, r1, rrx
 23e52d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23e52d6:	bf1f      	itttt	ne
 23e52d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23e52dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23e52e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23e52e4:	4770      	bxne	lr
 23e52e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23e52ea:	bf08      	it	eq
 23e52ec:	4770      	bxeq	lr
 23e52ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23e52f2:	bf04      	itt	eq
 23e52f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23e52f8:	4770      	bxeq	lr
 23e52fa:	b530      	push	{r4, r5, lr}
 23e52fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 23e5300:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23e5304:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23e5308:	e71c      	b.n	23e5144 <__adddf3+0x138>
 23e530a:	bf00      	nop

023e530c <__aeabi_ul2d>:
 23e530c:	ea50 0201 	orrs.w	r2, r0, r1
 23e5310:	bf08      	it	eq
 23e5312:	4770      	bxeq	lr
 23e5314:	b530      	push	{r4, r5, lr}
 23e5316:	f04f 0500 	mov.w	r5, #0
 23e531a:	e00a      	b.n	23e5332 <__aeabi_l2d+0x16>

023e531c <__aeabi_l2d>:
 23e531c:	ea50 0201 	orrs.w	r2, r0, r1
 23e5320:	bf08      	it	eq
 23e5322:	4770      	bxeq	lr
 23e5324:	b530      	push	{r4, r5, lr}
 23e5326:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23e532a:	d502      	bpl.n	23e5332 <__aeabi_l2d+0x16>
 23e532c:	4240      	negs	r0, r0
 23e532e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e5332:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23e5336:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23e533a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23e533e:	f43f aed8 	beq.w	23e50f2 <__adddf3+0xe6>
 23e5342:	f04f 0203 	mov.w	r2, #3
 23e5346:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23e534a:	bf18      	it	ne
 23e534c:	3203      	addne	r2, #3
 23e534e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23e5352:	bf18      	it	ne
 23e5354:	3203      	addne	r2, #3
 23e5356:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23e535a:	f1c2 0320 	rsb	r3, r2, #32
 23e535e:	fa00 fc03 	lsl.w	ip, r0, r3
 23e5362:	fa20 f002 	lsr.w	r0, r0, r2
 23e5366:	fa01 fe03 	lsl.w	lr, r1, r3
 23e536a:	ea40 000e 	orr.w	r0, r0, lr
 23e536e:	fa21 f102 	lsr.w	r1, r1, r2
 23e5372:	4414      	add	r4, r2
 23e5374:	e6bd      	b.n	23e50f2 <__adddf3+0xe6>
 23e5376:	bf00      	nop

023e5378 <__aeabi_dmul>:
 23e5378:	b570      	push	{r4, r5, r6, lr}
 23e537a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23e537e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23e5382:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23e5386:	bf1d      	ittte	ne
 23e5388:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23e538c:	ea94 0f0c 	teqne	r4, ip
 23e5390:	ea95 0f0c 	teqne	r5, ip
 23e5394:	f000 f8de 	bleq	23e5554 <__aeabi_dmul+0x1dc>
 23e5398:	442c      	add	r4, r5
 23e539a:	ea81 0603 	eor.w	r6, r1, r3
 23e539e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23e53a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23e53a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23e53aa:	bf18      	it	ne
 23e53ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23e53b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23e53b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23e53b8:	d038      	beq.n	23e542c <__aeabi_dmul+0xb4>
 23e53ba:	fba0 ce02 	umull	ip, lr, r0, r2
 23e53be:	f04f 0500 	mov.w	r5, #0
 23e53c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 23e53c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23e53ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 23e53ce:	f04f 0600 	mov.w	r6, #0
 23e53d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 23e53d6:	f09c 0f00 	teq	ip, #0
 23e53da:	bf18      	it	ne
 23e53dc:	f04e 0e01 	orrne.w	lr, lr, #1
 23e53e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23e53e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23e53e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23e53ec:	d204      	bcs.n	23e53f8 <__aeabi_dmul+0x80>
 23e53ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23e53f2:	416d      	adcs	r5, r5
 23e53f4:	eb46 0606 	adc.w	r6, r6, r6
 23e53f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23e53fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23e5400:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23e5404:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23e5408:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23e540c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23e5410:	bf88      	it	hi
 23e5412:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23e5416:	d81e      	bhi.n	23e5456 <__aeabi_dmul+0xde>
 23e5418:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23e541c:	bf08      	it	eq
 23e541e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23e5422:	f150 0000 	adcs.w	r0, r0, #0
 23e5426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23e542a:	bd70      	pop	{r4, r5, r6, pc}
 23e542c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23e5430:	ea46 0101 	orr.w	r1, r6, r1
 23e5434:	ea40 0002 	orr.w	r0, r0, r2
 23e5438:	ea81 0103 	eor.w	r1, r1, r3
 23e543c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23e5440:	bfc2      	ittt	gt
 23e5442:	ebd4 050c 	rsbsgt	r5, r4, ip
 23e5446:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23e544a:	bd70      	popgt	{r4, r5, r6, pc}
 23e544c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23e5450:	f04f 0e00 	mov.w	lr, #0
 23e5454:	3c01      	subs	r4, #1
 23e5456:	f300 80ab 	bgt.w	23e55b0 <__aeabi_dmul+0x238>
 23e545a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23e545e:	bfde      	ittt	le
 23e5460:	2000      	movle	r0, #0
 23e5462:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23e5466:	bd70      	pople	{r4, r5, r6, pc}
 23e5468:	f1c4 0400 	rsb	r4, r4, #0
 23e546c:	3c20      	subs	r4, #32
 23e546e:	da35      	bge.n	23e54dc <__aeabi_dmul+0x164>
 23e5470:	340c      	adds	r4, #12
 23e5472:	dc1b      	bgt.n	23e54ac <__aeabi_dmul+0x134>
 23e5474:	f104 0414 	add.w	r4, r4, #20
 23e5478:	f1c4 0520 	rsb	r5, r4, #32
 23e547c:	fa00 f305 	lsl.w	r3, r0, r5
 23e5480:	fa20 f004 	lsr.w	r0, r0, r4
 23e5484:	fa01 f205 	lsl.w	r2, r1, r5
 23e5488:	ea40 0002 	orr.w	r0, r0, r2
 23e548c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23e5490:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23e5494:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23e5498:	fa21 f604 	lsr.w	r6, r1, r4
 23e549c:	eb42 0106 	adc.w	r1, r2, r6
 23e54a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23e54a4:	bf08      	it	eq
 23e54a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23e54aa:	bd70      	pop	{r4, r5, r6, pc}
 23e54ac:	f1c4 040c 	rsb	r4, r4, #12
 23e54b0:	f1c4 0520 	rsb	r5, r4, #32
 23e54b4:	fa00 f304 	lsl.w	r3, r0, r4
 23e54b8:	fa20 f005 	lsr.w	r0, r0, r5
 23e54bc:	fa01 f204 	lsl.w	r2, r1, r4
 23e54c0:	ea40 0002 	orr.w	r0, r0, r2
 23e54c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23e54c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23e54cc:	f141 0100 	adc.w	r1, r1, #0
 23e54d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23e54d4:	bf08      	it	eq
 23e54d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23e54da:	bd70      	pop	{r4, r5, r6, pc}
 23e54dc:	f1c4 0520 	rsb	r5, r4, #32
 23e54e0:	fa00 f205 	lsl.w	r2, r0, r5
 23e54e4:	ea4e 0e02 	orr.w	lr, lr, r2
 23e54e8:	fa20 f304 	lsr.w	r3, r0, r4
 23e54ec:	fa01 f205 	lsl.w	r2, r1, r5
 23e54f0:	ea43 0302 	orr.w	r3, r3, r2
 23e54f4:	fa21 f004 	lsr.w	r0, r1, r4
 23e54f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23e54fc:	fa21 f204 	lsr.w	r2, r1, r4
 23e5500:	ea20 0002 	bic.w	r0, r0, r2
 23e5504:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23e5508:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23e550c:	bf08      	it	eq
 23e550e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23e5512:	bd70      	pop	{r4, r5, r6, pc}
 23e5514:	f094 0f00 	teq	r4, #0
 23e5518:	d10f      	bne.n	23e553a <__aeabi_dmul+0x1c2>
 23e551a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23e551e:	0040      	lsls	r0, r0, #1
 23e5520:	eb41 0101 	adc.w	r1, r1, r1
 23e5524:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23e5528:	bf08      	it	eq
 23e552a:	3c01      	subeq	r4, #1
 23e552c:	d0f7      	beq.n	23e551e <__aeabi_dmul+0x1a6>
 23e552e:	ea41 0106 	orr.w	r1, r1, r6
 23e5532:	f095 0f00 	teq	r5, #0
 23e5536:	bf18      	it	ne
 23e5538:	4770      	bxne	lr
 23e553a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23e553e:	0052      	lsls	r2, r2, #1
 23e5540:	eb43 0303 	adc.w	r3, r3, r3
 23e5544:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23e5548:	bf08      	it	eq
 23e554a:	3d01      	subeq	r5, #1
 23e554c:	d0f7      	beq.n	23e553e <__aeabi_dmul+0x1c6>
 23e554e:	ea43 0306 	orr.w	r3, r3, r6
 23e5552:	4770      	bx	lr
 23e5554:	ea94 0f0c 	teq	r4, ip
 23e5558:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23e555c:	bf18      	it	ne
 23e555e:	ea95 0f0c 	teqne	r5, ip
 23e5562:	d00c      	beq.n	23e557e <__aeabi_dmul+0x206>
 23e5564:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23e5568:	bf18      	it	ne
 23e556a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23e556e:	d1d1      	bne.n	23e5514 <__aeabi_dmul+0x19c>
 23e5570:	ea81 0103 	eor.w	r1, r1, r3
 23e5574:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23e5578:	f04f 0000 	mov.w	r0, #0
 23e557c:	bd70      	pop	{r4, r5, r6, pc}
 23e557e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23e5582:	bf06      	itte	eq
 23e5584:	4610      	moveq	r0, r2
 23e5586:	4619      	moveq	r1, r3
 23e5588:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23e558c:	d019      	beq.n	23e55c2 <__aeabi_dmul+0x24a>
 23e558e:	ea94 0f0c 	teq	r4, ip
 23e5592:	d102      	bne.n	23e559a <__aeabi_dmul+0x222>
 23e5594:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23e5598:	d113      	bne.n	23e55c2 <__aeabi_dmul+0x24a>
 23e559a:	ea95 0f0c 	teq	r5, ip
 23e559e:	d105      	bne.n	23e55ac <__aeabi_dmul+0x234>
 23e55a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23e55a4:	bf1c      	itt	ne
 23e55a6:	4610      	movne	r0, r2
 23e55a8:	4619      	movne	r1, r3
 23e55aa:	d10a      	bne.n	23e55c2 <__aeabi_dmul+0x24a>
 23e55ac:	ea81 0103 	eor.w	r1, r1, r3
 23e55b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23e55b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23e55b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23e55bc:	f04f 0000 	mov.w	r0, #0
 23e55c0:	bd70      	pop	{r4, r5, r6, pc}
 23e55c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23e55c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23e55ca:	bd70      	pop	{r4, r5, r6, pc}

023e55cc <__aeabi_ddiv>:
 23e55cc:	b570      	push	{r4, r5, r6, lr}
 23e55ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23e55d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23e55d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23e55da:	bf1d      	ittte	ne
 23e55dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23e55e0:	ea94 0f0c 	teqne	r4, ip
 23e55e4:	ea95 0f0c 	teqne	r5, ip
 23e55e8:	f000 f8a7 	bleq	23e573a <__aeabi_ddiv+0x16e>
 23e55ec:	eba4 0405 	sub.w	r4, r4, r5
 23e55f0:	ea81 0e03 	eor.w	lr, r1, r3
 23e55f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23e55f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23e55fc:	f000 8088 	beq.w	23e5710 <__aeabi_ddiv+0x144>
 23e5600:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23e5604:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23e5608:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23e560c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23e5610:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23e5614:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23e5618:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23e561c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23e5620:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23e5624:	429d      	cmp	r5, r3
 23e5626:	bf08      	it	eq
 23e5628:	4296      	cmpeq	r6, r2
 23e562a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23e562e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23e5632:	d202      	bcs.n	23e563a <__aeabi_ddiv+0x6e>
 23e5634:	085b      	lsrs	r3, r3, #1
 23e5636:	ea4f 0232 	mov.w	r2, r2, rrx
 23e563a:	1ab6      	subs	r6, r6, r2
 23e563c:	eb65 0503 	sbc.w	r5, r5, r3
 23e5640:	085b      	lsrs	r3, r3, #1
 23e5642:	ea4f 0232 	mov.w	r2, r2, rrx
 23e5646:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23e564a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23e564e:	ebb6 0e02 	subs.w	lr, r6, r2
 23e5652:	eb75 0e03 	sbcs.w	lr, r5, r3
 23e5656:	bf22      	ittt	cs
 23e5658:	1ab6      	subcs	r6, r6, r2
 23e565a:	4675      	movcs	r5, lr
 23e565c:	ea40 000c 	orrcs.w	r0, r0, ip
 23e5660:	085b      	lsrs	r3, r3, #1
 23e5662:	ea4f 0232 	mov.w	r2, r2, rrx
 23e5666:	ebb6 0e02 	subs.w	lr, r6, r2
 23e566a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23e566e:	bf22      	ittt	cs
 23e5670:	1ab6      	subcs	r6, r6, r2
 23e5672:	4675      	movcs	r5, lr
 23e5674:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23e5678:	085b      	lsrs	r3, r3, #1
 23e567a:	ea4f 0232 	mov.w	r2, r2, rrx
 23e567e:	ebb6 0e02 	subs.w	lr, r6, r2
 23e5682:	eb75 0e03 	sbcs.w	lr, r5, r3
 23e5686:	bf22      	ittt	cs
 23e5688:	1ab6      	subcs	r6, r6, r2
 23e568a:	4675      	movcs	r5, lr
 23e568c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23e5690:	085b      	lsrs	r3, r3, #1
 23e5692:	ea4f 0232 	mov.w	r2, r2, rrx
 23e5696:	ebb6 0e02 	subs.w	lr, r6, r2
 23e569a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23e569e:	bf22      	ittt	cs
 23e56a0:	1ab6      	subcs	r6, r6, r2
 23e56a2:	4675      	movcs	r5, lr
 23e56a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23e56a8:	ea55 0e06 	orrs.w	lr, r5, r6
 23e56ac:	d018      	beq.n	23e56e0 <__aeabi_ddiv+0x114>
 23e56ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23e56b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23e56b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23e56ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23e56be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23e56c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23e56c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23e56ca:	d1c0      	bne.n	23e564e <__aeabi_ddiv+0x82>
 23e56cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23e56d0:	d10b      	bne.n	23e56ea <__aeabi_ddiv+0x11e>
 23e56d2:	ea41 0100 	orr.w	r1, r1, r0
 23e56d6:	f04f 0000 	mov.w	r0, #0
 23e56da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23e56de:	e7b6      	b.n	23e564e <__aeabi_ddiv+0x82>
 23e56e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23e56e4:	bf04      	itt	eq
 23e56e6:	4301      	orreq	r1, r0
 23e56e8:	2000      	moveq	r0, #0
 23e56ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23e56ee:	bf88      	it	hi
 23e56f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23e56f4:	f63f aeaf 	bhi.w	23e5456 <__aeabi_dmul+0xde>
 23e56f8:	ebb5 0c03 	subs.w	ip, r5, r3
 23e56fc:	bf04      	itt	eq
 23e56fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 23e5702:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23e5706:	f150 0000 	adcs.w	r0, r0, #0
 23e570a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23e570e:	bd70      	pop	{r4, r5, r6, pc}
 23e5710:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23e5714:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23e5718:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23e571c:	bfc2      	ittt	gt
 23e571e:	ebd4 050c 	rsbsgt	r5, r4, ip
 23e5722:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23e5726:	bd70      	popgt	{r4, r5, r6, pc}
 23e5728:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23e572c:	f04f 0e00 	mov.w	lr, #0
 23e5730:	3c01      	subs	r4, #1
 23e5732:	e690      	b.n	23e5456 <__aeabi_dmul+0xde>
 23e5734:	ea45 0e06 	orr.w	lr, r5, r6
 23e5738:	e68d      	b.n	23e5456 <__aeabi_dmul+0xde>
 23e573a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23e573e:	ea94 0f0c 	teq	r4, ip
 23e5742:	bf08      	it	eq
 23e5744:	ea95 0f0c 	teqeq	r5, ip
 23e5748:	f43f af3b 	beq.w	23e55c2 <__aeabi_dmul+0x24a>
 23e574c:	ea94 0f0c 	teq	r4, ip
 23e5750:	d10a      	bne.n	23e5768 <__aeabi_ddiv+0x19c>
 23e5752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23e5756:	f47f af34 	bne.w	23e55c2 <__aeabi_dmul+0x24a>
 23e575a:	ea95 0f0c 	teq	r5, ip
 23e575e:	f47f af25 	bne.w	23e55ac <__aeabi_dmul+0x234>
 23e5762:	4610      	mov	r0, r2
 23e5764:	4619      	mov	r1, r3
 23e5766:	e72c      	b.n	23e55c2 <__aeabi_dmul+0x24a>
 23e5768:	ea95 0f0c 	teq	r5, ip
 23e576c:	d106      	bne.n	23e577c <__aeabi_ddiv+0x1b0>
 23e576e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23e5772:	f43f aefd 	beq.w	23e5570 <__aeabi_dmul+0x1f8>
 23e5776:	4610      	mov	r0, r2
 23e5778:	4619      	mov	r1, r3
 23e577a:	e722      	b.n	23e55c2 <__aeabi_dmul+0x24a>
 23e577c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23e5780:	bf18      	it	ne
 23e5782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23e5786:	f47f aec5 	bne.w	23e5514 <__aeabi_dmul+0x19c>
 23e578a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23e578e:	f47f af0d 	bne.w	23e55ac <__aeabi_dmul+0x234>
 23e5792:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23e5796:	f47f aeeb 	bne.w	23e5570 <__aeabi_dmul+0x1f8>
 23e579a:	e712      	b.n	23e55c2 <__aeabi_dmul+0x24a>

023e579c <__gedf2>:
 23e579c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23e57a0:	e006      	b.n	23e57b0 <__cmpdf2+0x4>
 23e57a2:	bf00      	nop

023e57a4 <__ledf2>:
 23e57a4:	f04f 0c01 	mov.w	ip, #1
 23e57a8:	e002      	b.n	23e57b0 <__cmpdf2+0x4>
 23e57aa:	bf00      	nop

023e57ac <__cmpdf2>:
 23e57ac:	f04f 0c01 	mov.w	ip, #1
 23e57b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 23e57b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23e57b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e57bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23e57c0:	bf18      	it	ne
 23e57c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23e57c6:	d01b      	beq.n	23e5800 <__cmpdf2+0x54>
 23e57c8:	b001      	add	sp, #4
 23e57ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23e57ce:	bf0c      	ite	eq
 23e57d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23e57d4:	ea91 0f03 	teqne	r1, r3
 23e57d8:	bf02      	ittt	eq
 23e57da:	ea90 0f02 	teqeq	r0, r2
 23e57de:	2000      	moveq	r0, #0
 23e57e0:	4770      	bxeq	lr
 23e57e2:	f110 0f00 	cmn.w	r0, #0
 23e57e6:	ea91 0f03 	teq	r1, r3
 23e57ea:	bf58      	it	pl
 23e57ec:	4299      	cmppl	r1, r3
 23e57ee:	bf08      	it	eq
 23e57f0:	4290      	cmpeq	r0, r2
 23e57f2:	bf2c      	ite	cs
 23e57f4:	17d8      	asrcs	r0, r3, #31
 23e57f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23e57fa:	f040 0001 	orr.w	r0, r0, #1
 23e57fe:	4770      	bx	lr
 23e5800:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23e5804:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e5808:	d102      	bne.n	23e5810 <__cmpdf2+0x64>
 23e580a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23e580e:	d107      	bne.n	23e5820 <__cmpdf2+0x74>
 23e5810:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23e5814:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e5818:	d1d6      	bne.n	23e57c8 <__cmpdf2+0x1c>
 23e581a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23e581e:	d0d3      	beq.n	23e57c8 <__cmpdf2+0x1c>
 23e5820:	f85d 0b04 	ldr.w	r0, [sp], #4
 23e5824:	4770      	bx	lr
 23e5826:	bf00      	nop

023e5828 <__aeabi_cdrcmple>:
 23e5828:	4684      	mov	ip, r0
 23e582a:	4610      	mov	r0, r2
 23e582c:	4662      	mov	r2, ip
 23e582e:	468c      	mov	ip, r1
 23e5830:	4619      	mov	r1, r3
 23e5832:	4663      	mov	r3, ip
 23e5834:	e000      	b.n	23e5838 <__aeabi_cdcmpeq>
 23e5836:	bf00      	nop

023e5838 <__aeabi_cdcmpeq>:
 23e5838:	b501      	push	{r0, lr}
 23e583a:	f7ff ffb7 	bl	23e57ac <__cmpdf2>
 23e583e:	2800      	cmp	r0, #0
 23e5840:	bf48      	it	mi
 23e5842:	f110 0f00 	cmnmi.w	r0, #0
 23e5846:	bd01      	pop	{r0, pc}

023e5848 <__aeabi_dcmpeq>:
 23e5848:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e584c:	f7ff fff4 	bl	23e5838 <__aeabi_cdcmpeq>
 23e5850:	bf0c      	ite	eq
 23e5852:	2001      	moveq	r0, #1
 23e5854:	2000      	movne	r0, #0
 23e5856:	f85d fb08 	ldr.w	pc, [sp], #8
 23e585a:	bf00      	nop

023e585c <__aeabi_dcmplt>:
 23e585c:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e5860:	f7ff ffea 	bl	23e5838 <__aeabi_cdcmpeq>
 23e5864:	bf34      	ite	cc
 23e5866:	2001      	movcc	r0, #1
 23e5868:	2000      	movcs	r0, #0
 23e586a:	f85d fb08 	ldr.w	pc, [sp], #8
 23e586e:	bf00      	nop

023e5870 <__aeabi_dcmple>:
 23e5870:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e5874:	f7ff ffe0 	bl	23e5838 <__aeabi_cdcmpeq>
 23e5878:	bf94      	ite	ls
 23e587a:	2001      	movls	r0, #1
 23e587c:	2000      	movhi	r0, #0
 23e587e:	f85d fb08 	ldr.w	pc, [sp], #8
 23e5882:	bf00      	nop

023e5884 <__aeabi_dcmpge>:
 23e5884:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e5888:	f7ff ffce 	bl	23e5828 <__aeabi_cdrcmple>
 23e588c:	bf94      	ite	ls
 23e588e:	2001      	movls	r0, #1
 23e5890:	2000      	movhi	r0, #0
 23e5892:	f85d fb08 	ldr.w	pc, [sp], #8
 23e5896:	bf00      	nop

023e5898 <__aeabi_dcmpgt>:
 23e5898:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e589c:	f7ff ffc4 	bl	23e5828 <__aeabi_cdrcmple>
 23e58a0:	bf34      	ite	cc
 23e58a2:	2001      	movcc	r0, #1
 23e58a4:	2000      	movcs	r0, #0
 23e58a6:	f85d fb08 	ldr.w	pc, [sp], #8
 23e58aa:	bf00      	nop

023e58ac <__aeabi_dcmpun>:
 23e58ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23e58b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e58b4:	d102      	bne.n	23e58bc <__aeabi_dcmpun+0x10>
 23e58b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23e58ba:	d10a      	bne.n	23e58d2 <__aeabi_dcmpun+0x26>
 23e58bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23e58c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e58c4:	d102      	bne.n	23e58cc <__aeabi_dcmpun+0x20>
 23e58c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23e58ca:	d102      	bne.n	23e58d2 <__aeabi_dcmpun+0x26>
 23e58cc:	f04f 0000 	mov.w	r0, #0
 23e58d0:	4770      	bx	lr
 23e58d2:	f04f 0001 	mov.w	r0, #1
 23e58d6:	4770      	bx	lr

023e58d8 <__aeabi_d2iz>:
 23e58d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23e58dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23e58e0:	d215      	bcs.n	23e590e <__aeabi_d2iz+0x36>
 23e58e2:	d511      	bpl.n	23e5908 <__aeabi_d2iz+0x30>
 23e58e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23e58e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23e58ec:	d912      	bls.n	23e5914 <__aeabi_d2iz+0x3c>
 23e58ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23e58f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23e58f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23e58fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23e58fe:	fa23 f002 	lsr.w	r0, r3, r2
 23e5902:	bf18      	it	ne
 23e5904:	4240      	negne	r0, r0
 23e5906:	4770      	bx	lr
 23e5908:	f04f 0000 	mov.w	r0, #0
 23e590c:	4770      	bx	lr
 23e590e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23e5912:	d105      	bne.n	23e5920 <__aeabi_d2iz+0x48>
 23e5914:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 23e5918:	bf08      	it	eq
 23e591a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 23e591e:	4770      	bx	lr
 23e5920:	f04f 0000 	mov.w	r0, #0
 23e5924:	4770      	bx	lr
 23e5926:	bf00      	nop

023e5928 <__aeabi_d2uiz>:
 23e5928:	004a      	lsls	r2, r1, #1
 23e592a:	d211      	bcs.n	23e5950 <__aeabi_d2uiz+0x28>
 23e592c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23e5930:	d211      	bcs.n	23e5956 <__aeabi_d2uiz+0x2e>
 23e5932:	d50d      	bpl.n	23e5950 <__aeabi_d2uiz+0x28>
 23e5934:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23e5938:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23e593c:	d40e      	bmi.n	23e595c <__aeabi_d2uiz+0x34>
 23e593e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23e5942:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23e5946:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23e594a:	fa23 f002 	lsr.w	r0, r3, r2
 23e594e:	4770      	bx	lr
 23e5950:	f04f 0000 	mov.w	r0, #0
 23e5954:	4770      	bx	lr
 23e5956:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23e595a:	d102      	bne.n	23e5962 <__aeabi_d2uiz+0x3a>
 23e595c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e5960:	4770      	bx	lr
 23e5962:	f04f 0000 	mov.w	r0, #0
 23e5966:	4770      	bx	lr

023e5968 <__aeabi_d2f>:
 23e5968:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23e596c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23e5970:	bf24      	itt	cs
 23e5972:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23e5976:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23e597a:	d90d      	bls.n	23e5998 <__aeabi_d2f+0x30>
 23e597c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23e5980:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23e5984:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23e5988:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23e598c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23e5990:	bf08      	it	eq
 23e5992:	f020 0001 	biceq.w	r0, r0, #1
 23e5996:	4770      	bx	lr
 23e5998:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23e599c:	d121      	bne.n	23e59e2 <__aeabi_d2f+0x7a>
 23e599e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23e59a2:	bfbc      	itt	lt
 23e59a4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23e59a8:	4770      	bxlt	lr
 23e59aa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23e59ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23e59b2:	f1c2 0218 	rsb	r2, r2, #24
 23e59b6:	f1c2 0c20 	rsb	ip, r2, #32
 23e59ba:	fa10 f30c 	lsls.w	r3, r0, ip
 23e59be:	fa20 f002 	lsr.w	r0, r0, r2
 23e59c2:	bf18      	it	ne
 23e59c4:	f040 0001 	orrne.w	r0, r0, #1
 23e59c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23e59cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23e59d0:	fa03 fc0c 	lsl.w	ip, r3, ip
 23e59d4:	ea40 000c 	orr.w	r0, r0, ip
 23e59d8:	fa23 f302 	lsr.w	r3, r3, r2
 23e59dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23e59e0:	e7cc      	b.n	23e597c <__aeabi_d2f+0x14>
 23e59e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23e59e6:	d107      	bne.n	23e59f8 <__aeabi_d2f+0x90>
 23e59e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23e59ec:	bf1e      	ittt	ne
 23e59ee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23e59f2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23e59f6:	4770      	bxne	lr
 23e59f8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23e59fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23e5a00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23e5a04:	4770      	bx	lr
 23e5a06:	bf00      	nop

023e5a08 <__aeabi_frsub>:
 23e5a08:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 23e5a0c:	e002      	b.n	23e5a14 <__addsf3>
 23e5a0e:	bf00      	nop

023e5a10 <__aeabi_fsub>:
 23e5a10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

023e5a14 <__addsf3>:
 23e5a14:	0042      	lsls	r2, r0, #1
 23e5a16:	bf1f      	itttt	ne
 23e5a18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 23e5a1c:	ea92 0f03 	teqne	r2, r3
 23e5a20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 23e5a24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 23e5a28:	d06a      	beq.n	23e5b00 <__addsf3+0xec>
 23e5a2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 23e5a2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 23e5a32:	bfc1      	itttt	gt
 23e5a34:	18d2      	addgt	r2, r2, r3
 23e5a36:	4041      	eorgt	r1, r0
 23e5a38:	4048      	eorgt	r0, r1
 23e5a3a:	4041      	eorgt	r1, r0
 23e5a3c:	bfb8      	it	lt
 23e5a3e:	425b      	neglt	r3, r3
 23e5a40:	2b19      	cmp	r3, #25
 23e5a42:	bf88      	it	hi
 23e5a44:	4770      	bxhi	lr
 23e5a46:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 23e5a4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23e5a4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 23e5a52:	bf18      	it	ne
 23e5a54:	4240      	negne	r0, r0
 23e5a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23e5a5a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 23e5a5e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 23e5a62:	bf18      	it	ne
 23e5a64:	4249      	negne	r1, r1
 23e5a66:	ea92 0f03 	teq	r2, r3
 23e5a6a:	d03f      	beq.n	23e5aec <__addsf3+0xd8>
 23e5a6c:	f1a2 0201 	sub.w	r2, r2, #1
 23e5a70:	fa41 fc03 	asr.w	ip, r1, r3
 23e5a74:	eb10 000c 	adds.w	r0, r0, ip
 23e5a78:	f1c3 0320 	rsb	r3, r3, #32
 23e5a7c:	fa01 f103 	lsl.w	r1, r1, r3
 23e5a80:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 23e5a84:	d502      	bpl.n	23e5a8c <__addsf3+0x78>
 23e5a86:	4249      	negs	r1, r1
 23e5a88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 23e5a8c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 23e5a90:	d313      	bcc.n	23e5aba <__addsf3+0xa6>
 23e5a92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 23e5a96:	d306      	bcc.n	23e5aa6 <__addsf3+0x92>
 23e5a98:	0840      	lsrs	r0, r0, #1
 23e5a9a:	ea4f 0131 	mov.w	r1, r1, rrx
 23e5a9e:	f102 0201 	add.w	r2, r2, #1
 23e5aa2:	2afe      	cmp	r2, #254	; 0xfe
 23e5aa4:	d251      	bcs.n	23e5b4a <__addsf3+0x136>
 23e5aa6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 23e5aaa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 23e5aae:	bf08      	it	eq
 23e5ab0:	f020 0001 	biceq.w	r0, r0, #1
 23e5ab4:	ea40 0003 	orr.w	r0, r0, r3
 23e5ab8:	4770      	bx	lr
 23e5aba:	0049      	lsls	r1, r1, #1
 23e5abc:	eb40 0000 	adc.w	r0, r0, r0
 23e5ac0:	3a01      	subs	r2, #1
 23e5ac2:	bf28      	it	cs
 23e5ac4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 23e5ac8:	d2ed      	bcs.n	23e5aa6 <__addsf3+0x92>
 23e5aca:	fab0 fc80 	clz	ip, r0
 23e5ace:	f1ac 0c08 	sub.w	ip, ip, #8
 23e5ad2:	ebb2 020c 	subs.w	r2, r2, ip
 23e5ad6:	fa00 f00c 	lsl.w	r0, r0, ip
 23e5ada:	bfaa      	itet	ge
 23e5adc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 23e5ae0:	4252      	neglt	r2, r2
 23e5ae2:	4318      	orrge	r0, r3
 23e5ae4:	bfbc      	itt	lt
 23e5ae6:	40d0      	lsrlt	r0, r2
 23e5ae8:	4318      	orrlt	r0, r3
 23e5aea:	4770      	bx	lr
 23e5aec:	f092 0f00 	teq	r2, #0
 23e5af0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 23e5af4:	bf06      	itte	eq
 23e5af6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 23e5afa:	3201      	addeq	r2, #1
 23e5afc:	3b01      	subne	r3, #1
 23e5afe:	e7b5      	b.n	23e5a6c <__addsf3+0x58>
 23e5b00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 23e5b04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 23e5b08:	bf18      	it	ne
 23e5b0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 23e5b0e:	d021      	beq.n	23e5b54 <__addsf3+0x140>
 23e5b10:	ea92 0f03 	teq	r2, r3
 23e5b14:	d004      	beq.n	23e5b20 <__addsf3+0x10c>
 23e5b16:	f092 0f00 	teq	r2, #0
 23e5b1a:	bf08      	it	eq
 23e5b1c:	4608      	moveq	r0, r1
 23e5b1e:	4770      	bx	lr
 23e5b20:	ea90 0f01 	teq	r0, r1
 23e5b24:	bf1c      	itt	ne
 23e5b26:	2000      	movne	r0, #0
 23e5b28:	4770      	bxne	lr
 23e5b2a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 23e5b2e:	d104      	bne.n	23e5b3a <__addsf3+0x126>
 23e5b30:	0040      	lsls	r0, r0, #1
 23e5b32:	bf28      	it	cs
 23e5b34:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 23e5b38:	4770      	bx	lr
 23e5b3a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 23e5b3e:	bf3c      	itt	cc
 23e5b40:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 23e5b44:	4770      	bxcc	lr
 23e5b46:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 23e5b4a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 23e5b4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23e5b52:	4770      	bx	lr
 23e5b54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 23e5b58:	bf16      	itet	ne
 23e5b5a:	4608      	movne	r0, r1
 23e5b5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 23e5b60:	4601      	movne	r1, r0
 23e5b62:	0242      	lsls	r2, r0, #9
 23e5b64:	bf06      	itte	eq
 23e5b66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 23e5b6a:	ea90 0f01 	teqeq	r0, r1
 23e5b6e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 23e5b72:	4770      	bx	lr

023e5b74 <__aeabi_ui2f>:
 23e5b74:	f04f 0300 	mov.w	r3, #0
 23e5b78:	e004      	b.n	23e5b84 <__aeabi_i2f+0x8>
 23e5b7a:	bf00      	nop

023e5b7c <__aeabi_i2f>:
 23e5b7c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 23e5b80:	bf48      	it	mi
 23e5b82:	4240      	negmi	r0, r0
 23e5b84:	ea5f 0c00 	movs.w	ip, r0
 23e5b88:	bf08      	it	eq
 23e5b8a:	4770      	bxeq	lr
 23e5b8c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 23e5b90:	4601      	mov	r1, r0
 23e5b92:	f04f 0000 	mov.w	r0, #0
 23e5b96:	e01c      	b.n	23e5bd2 <__aeabi_l2f+0x2a>

023e5b98 <__aeabi_ul2f>:
 23e5b98:	ea50 0201 	orrs.w	r2, r0, r1
 23e5b9c:	bf08      	it	eq
 23e5b9e:	4770      	bxeq	lr
 23e5ba0:	f04f 0300 	mov.w	r3, #0
 23e5ba4:	e00a      	b.n	23e5bbc <__aeabi_l2f+0x14>
 23e5ba6:	bf00      	nop

023e5ba8 <__aeabi_l2f>:
 23e5ba8:	ea50 0201 	orrs.w	r2, r0, r1
 23e5bac:	bf08      	it	eq
 23e5bae:	4770      	bxeq	lr
 23e5bb0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 23e5bb4:	d502      	bpl.n	23e5bbc <__aeabi_l2f+0x14>
 23e5bb6:	4240      	negs	r0, r0
 23e5bb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e5bbc:	ea5f 0c01 	movs.w	ip, r1
 23e5bc0:	bf02      	ittt	eq
 23e5bc2:	4684      	moveq	ip, r0
 23e5bc4:	4601      	moveq	r1, r0
 23e5bc6:	2000      	moveq	r0, #0
 23e5bc8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 23e5bcc:	bf08      	it	eq
 23e5bce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 23e5bd2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 23e5bd6:	fabc f28c 	clz	r2, ip
 23e5bda:	3a08      	subs	r2, #8
 23e5bdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 23e5be0:	db10      	blt.n	23e5c04 <__aeabi_l2f+0x5c>
 23e5be2:	fa01 fc02 	lsl.w	ip, r1, r2
 23e5be6:	4463      	add	r3, ip
 23e5be8:	fa00 fc02 	lsl.w	ip, r0, r2
 23e5bec:	f1c2 0220 	rsb	r2, r2, #32
 23e5bf0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23e5bf4:	fa20 f202 	lsr.w	r2, r0, r2
 23e5bf8:	eb43 0002 	adc.w	r0, r3, r2
 23e5bfc:	bf08      	it	eq
 23e5bfe:	f020 0001 	biceq.w	r0, r0, #1
 23e5c02:	4770      	bx	lr
 23e5c04:	f102 0220 	add.w	r2, r2, #32
 23e5c08:	fa01 fc02 	lsl.w	ip, r1, r2
 23e5c0c:	f1c2 0220 	rsb	r2, r2, #32
 23e5c10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 23e5c14:	fa21 f202 	lsr.w	r2, r1, r2
 23e5c18:	eb43 0002 	adc.w	r0, r3, r2
 23e5c1c:	bf08      	it	eq
 23e5c1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 23e5c22:	4770      	bx	lr

023e5c24 <__aeabi_ldivmod>:
 23e5c24:	b97b      	cbnz	r3, 23e5c46 <__aeabi_ldivmod+0x22>
 23e5c26:	b972      	cbnz	r2, 23e5c46 <__aeabi_ldivmod+0x22>
 23e5c28:	2900      	cmp	r1, #0
 23e5c2a:	bfbe      	ittt	lt
 23e5c2c:	2000      	movlt	r0, #0
 23e5c2e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 23e5c32:	e006      	blt.n	23e5c42 <__aeabi_ldivmod+0x1e>
 23e5c34:	bf08      	it	eq
 23e5c36:	2800      	cmpeq	r0, #0
 23e5c38:	bf1c      	itt	ne
 23e5c3a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 23e5c3e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23e5c42:	f000 b9cd 	b.w	23e5fe0 <__aeabi_idiv0>
 23e5c46:	f1ad 0c08 	sub.w	ip, sp, #8
 23e5c4a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 23e5c4e:	2900      	cmp	r1, #0
 23e5c50:	db09      	blt.n	23e5c66 <__aeabi_ldivmod+0x42>
 23e5c52:	2b00      	cmp	r3, #0
 23e5c54:	db1a      	blt.n	23e5c8c <__aeabi_ldivmod+0x68>
 23e5c56:	f000 f84d 	bl	23e5cf4 <__udivmoddi4>
 23e5c5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 23e5c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23e5c62:	b004      	add	sp, #16
 23e5c64:	4770      	bx	lr
 23e5c66:	4240      	negs	r0, r0
 23e5c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e5c6c:	2b00      	cmp	r3, #0
 23e5c6e:	db1b      	blt.n	23e5ca8 <__aeabi_ldivmod+0x84>
 23e5c70:	f000 f840 	bl	23e5cf4 <__udivmoddi4>
 23e5c74:	f8dd e004 	ldr.w	lr, [sp, #4]
 23e5c78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23e5c7c:	b004      	add	sp, #16
 23e5c7e:	4240      	negs	r0, r0
 23e5c80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e5c84:	4252      	negs	r2, r2
 23e5c86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e5c8a:	4770      	bx	lr
 23e5c8c:	4252      	negs	r2, r2
 23e5c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e5c92:	f000 f82f 	bl	23e5cf4 <__udivmoddi4>
 23e5c96:	f8dd e004 	ldr.w	lr, [sp, #4]
 23e5c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23e5c9e:	b004      	add	sp, #16
 23e5ca0:	4240      	negs	r0, r0
 23e5ca2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e5ca6:	4770      	bx	lr
 23e5ca8:	4252      	negs	r2, r2
 23e5caa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e5cae:	f000 f821 	bl	23e5cf4 <__udivmoddi4>
 23e5cb2:	f8dd e004 	ldr.w	lr, [sp, #4]
 23e5cb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23e5cba:	b004      	add	sp, #16
 23e5cbc:	4252      	negs	r2, r2
 23e5cbe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e5cc2:	4770      	bx	lr

023e5cc4 <__aeabi_uldivmod>:
 23e5cc4:	b953      	cbnz	r3, 23e5cdc <__aeabi_uldivmod+0x18>
 23e5cc6:	b94a      	cbnz	r2, 23e5cdc <__aeabi_uldivmod+0x18>
 23e5cc8:	2900      	cmp	r1, #0
 23e5cca:	bf08      	it	eq
 23e5ccc:	2800      	cmpeq	r0, #0
 23e5cce:	bf1c      	itt	ne
 23e5cd0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 23e5cd4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23e5cd8:	f000 b982 	b.w	23e5fe0 <__aeabi_idiv0>
 23e5cdc:	f1ad 0c08 	sub.w	ip, sp, #8
 23e5ce0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 23e5ce4:	f000 f806 	bl	23e5cf4 <__udivmoddi4>
 23e5ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 23e5cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23e5cf0:	b004      	add	sp, #16
 23e5cf2:	4770      	bx	lr

023e5cf4 <__udivmoddi4>:
 23e5cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23e5cf8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 23e5cfa:	4604      	mov	r4, r0
 23e5cfc:	460f      	mov	r7, r1
 23e5cfe:	2b00      	cmp	r3, #0
 23e5d00:	d148      	bne.n	23e5d94 <__udivmoddi4+0xa0>
 23e5d02:	428a      	cmp	r2, r1
 23e5d04:	4694      	mov	ip, r2
 23e5d06:	d961      	bls.n	23e5dcc <__udivmoddi4+0xd8>
 23e5d08:	fab2 f382 	clz	r3, r2
 23e5d0c:	b143      	cbz	r3, 23e5d20 <__udivmoddi4+0x2c>
 23e5d0e:	f1c3 0120 	rsb	r1, r3, #32
 23e5d12:	409f      	lsls	r7, r3
 23e5d14:	fa02 fc03 	lsl.w	ip, r2, r3
 23e5d18:	409c      	lsls	r4, r3
 23e5d1a:	fa20 f101 	lsr.w	r1, r0, r1
 23e5d1e:	430f      	orrs	r7, r1
 23e5d20:	ea4f 411c 	mov.w	r1, ip, lsr #16
 23e5d24:	fa1f fe8c 	uxth.w	lr, ip
 23e5d28:	0c22      	lsrs	r2, r4, #16
 23e5d2a:	fbb7 f6f1 	udiv	r6, r7, r1
 23e5d2e:	fb01 7716 	mls	r7, r1, r6, r7
 23e5d32:	fb06 f00e 	mul.w	r0, r6, lr
 23e5d36:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 23e5d3a:	4290      	cmp	r0, r2
 23e5d3c:	d908      	bls.n	23e5d50 <__udivmoddi4+0x5c>
 23e5d3e:	eb1c 0202 	adds.w	r2, ip, r2
 23e5d42:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 23e5d46:	d202      	bcs.n	23e5d4e <__udivmoddi4+0x5a>
 23e5d48:	4290      	cmp	r0, r2
 23e5d4a:	f200 8137 	bhi.w	23e5fbc <__udivmoddi4+0x2c8>
 23e5d4e:	463e      	mov	r6, r7
 23e5d50:	1a12      	subs	r2, r2, r0
 23e5d52:	b2a4      	uxth	r4, r4
 23e5d54:	fbb2 f0f1 	udiv	r0, r2, r1
 23e5d58:	fb01 2210 	mls	r2, r1, r0, r2
 23e5d5c:	fb00 fe0e 	mul.w	lr, r0, lr
 23e5d60:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 23e5d64:	45a6      	cmp	lr, r4
 23e5d66:	d908      	bls.n	23e5d7a <__udivmoddi4+0x86>
 23e5d68:	eb1c 0404 	adds.w	r4, ip, r4
 23e5d6c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 23e5d70:	d202      	bcs.n	23e5d78 <__udivmoddi4+0x84>
 23e5d72:	45a6      	cmp	lr, r4
 23e5d74:	f200 811c 	bhi.w	23e5fb0 <__udivmoddi4+0x2bc>
 23e5d78:	4610      	mov	r0, r2
 23e5d7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 23e5d7e:	eba4 040e 	sub.w	r4, r4, lr
 23e5d82:	2600      	movs	r6, #0
 23e5d84:	b11d      	cbz	r5, 23e5d8e <__udivmoddi4+0x9a>
 23e5d86:	40dc      	lsrs	r4, r3
 23e5d88:	2300      	movs	r3, #0
 23e5d8a:	e9c5 4300 	strd	r4, r3, [r5]
 23e5d8e:	4631      	mov	r1, r6
 23e5d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23e5d94:	428b      	cmp	r3, r1
 23e5d96:	d909      	bls.n	23e5dac <__udivmoddi4+0xb8>
 23e5d98:	2d00      	cmp	r5, #0
 23e5d9a:	f000 80fd 	beq.w	23e5f98 <__udivmoddi4+0x2a4>
 23e5d9e:	2600      	movs	r6, #0
 23e5da0:	e9c5 0100 	strd	r0, r1, [r5]
 23e5da4:	4630      	mov	r0, r6
 23e5da6:	4631      	mov	r1, r6
 23e5da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23e5dac:	fab3 f683 	clz	r6, r3
 23e5db0:	2e00      	cmp	r6, #0
 23e5db2:	d14b      	bne.n	23e5e4c <__udivmoddi4+0x158>
 23e5db4:	428b      	cmp	r3, r1
 23e5db6:	f0c0 80f2 	bcc.w	23e5f9e <__udivmoddi4+0x2aa>
 23e5dba:	4282      	cmp	r2, r0
 23e5dbc:	f240 80ef 	bls.w	23e5f9e <__udivmoddi4+0x2aa>
 23e5dc0:	4630      	mov	r0, r6
 23e5dc2:	2d00      	cmp	r5, #0
 23e5dc4:	d0e3      	beq.n	23e5d8e <__udivmoddi4+0x9a>
 23e5dc6:	e9c5 4700 	strd	r4, r7, [r5]
 23e5dca:	e7e0      	b.n	23e5d8e <__udivmoddi4+0x9a>
 23e5dcc:	b902      	cbnz	r2, 23e5dd0 <__udivmoddi4+0xdc>
 23e5dce:	deff      	udf	#255	; 0xff
 23e5dd0:	fab2 f382 	clz	r3, r2
 23e5dd4:	2b00      	cmp	r3, #0
 23e5dd6:	f040 809d 	bne.w	23e5f14 <__udivmoddi4+0x220>
 23e5dda:	1a89      	subs	r1, r1, r2
 23e5ddc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 23e5de0:	b297      	uxth	r7, r2
 23e5de2:	2601      	movs	r6, #1
 23e5de4:	0c20      	lsrs	r0, r4, #16
 23e5de6:	fbb1 f2fe 	udiv	r2, r1, lr
 23e5dea:	fb0e 1112 	mls	r1, lr, r2, r1
 23e5dee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23e5df2:	fb07 f002 	mul.w	r0, r7, r2
 23e5df6:	4288      	cmp	r0, r1
 23e5df8:	d90f      	bls.n	23e5e1a <__udivmoddi4+0x126>
 23e5dfa:	eb1c 0101 	adds.w	r1, ip, r1
 23e5dfe:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 23e5e02:	bf2c      	ite	cs
 23e5e04:	f04f 0901 	movcs.w	r9, #1
 23e5e08:	f04f 0900 	movcc.w	r9, #0
 23e5e0c:	4288      	cmp	r0, r1
 23e5e0e:	d903      	bls.n	23e5e18 <__udivmoddi4+0x124>
 23e5e10:	f1b9 0f00 	cmp.w	r9, #0
 23e5e14:	f000 80cf 	beq.w	23e5fb6 <__udivmoddi4+0x2c2>
 23e5e18:	4642      	mov	r2, r8
 23e5e1a:	1a09      	subs	r1, r1, r0
 23e5e1c:	b2a4      	uxth	r4, r4
 23e5e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 23e5e22:	fb0e 1110 	mls	r1, lr, r0, r1
 23e5e26:	fb00 f707 	mul.w	r7, r0, r7
 23e5e2a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 23e5e2e:	42a7      	cmp	r7, r4
 23e5e30:	d908      	bls.n	23e5e44 <__udivmoddi4+0x150>
 23e5e32:	eb1c 0404 	adds.w	r4, ip, r4
 23e5e36:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 23e5e3a:	d202      	bcs.n	23e5e42 <__udivmoddi4+0x14e>
 23e5e3c:	42a7      	cmp	r7, r4
 23e5e3e:	f200 80b4 	bhi.w	23e5faa <__udivmoddi4+0x2b6>
 23e5e42:	4608      	mov	r0, r1
 23e5e44:	1be4      	subs	r4, r4, r7
 23e5e46:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 23e5e4a:	e79b      	b.n	23e5d84 <__udivmoddi4+0x90>
 23e5e4c:	f1c6 0720 	rsb	r7, r6, #32
 23e5e50:	40b3      	lsls	r3, r6
 23e5e52:	fa01 f406 	lsl.w	r4, r1, r6
 23e5e56:	fa22 fc07 	lsr.w	ip, r2, r7
 23e5e5a:	40f9      	lsrs	r1, r7
 23e5e5c:	40b2      	lsls	r2, r6
 23e5e5e:	ea4c 0c03 	orr.w	ip, ip, r3
 23e5e62:	fa20 f307 	lsr.w	r3, r0, r7
 23e5e66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 23e5e6a:	431c      	orrs	r4, r3
 23e5e6c:	fa1f fe8c 	uxth.w	lr, ip
 23e5e70:	fa00 f306 	lsl.w	r3, r0, r6
 23e5e74:	0c20      	lsrs	r0, r4, #16
 23e5e76:	fbb1 f8f9 	udiv	r8, r1, r9
 23e5e7a:	fb09 1118 	mls	r1, r9, r8, r1
 23e5e7e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23e5e82:	fb08 f00e 	mul.w	r0, r8, lr
 23e5e86:	4288      	cmp	r0, r1
 23e5e88:	d90f      	bls.n	23e5eaa <__udivmoddi4+0x1b6>
 23e5e8a:	eb1c 0101 	adds.w	r1, ip, r1
 23e5e8e:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 23e5e92:	bf2c      	ite	cs
 23e5e94:	f04f 0b01 	movcs.w	fp, #1
 23e5e98:	f04f 0b00 	movcc.w	fp, #0
 23e5e9c:	4288      	cmp	r0, r1
 23e5e9e:	d903      	bls.n	23e5ea8 <__udivmoddi4+0x1b4>
 23e5ea0:	f1bb 0f00 	cmp.w	fp, #0
 23e5ea4:	f000 808d 	beq.w	23e5fc2 <__udivmoddi4+0x2ce>
 23e5ea8:	46d0      	mov	r8, sl
 23e5eaa:	1a09      	subs	r1, r1, r0
 23e5eac:	b2a4      	uxth	r4, r4
 23e5eae:	fbb1 f0f9 	udiv	r0, r1, r9
 23e5eb2:	fb09 1110 	mls	r1, r9, r0, r1
 23e5eb6:	fb00 fe0e 	mul.w	lr, r0, lr
 23e5eba:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 23e5ebe:	458e      	cmp	lr, r1
 23e5ec0:	d907      	bls.n	23e5ed2 <__udivmoddi4+0x1de>
 23e5ec2:	eb1c 0101 	adds.w	r1, ip, r1
 23e5ec6:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 23e5eca:	d201      	bcs.n	23e5ed0 <__udivmoddi4+0x1dc>
 23e5ecc:	458e      	cmp	lr, r1
 23e5ece:	d87f      	bhi.n	23e5fd0 <__udivmoddi4+0x2dc>
 23e5ed0:	4620      	mov	r0, r4
 23e5ed2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 23e5ed6:	eba1 010e 	sub.w	r1, r1, lr
 23e5eda:	fba0 9802 	umull	r9, r8, r0, r2
 23e5ede:	4541      	cmp	r1, r8
 23e5ee0:	464c      	mov	r4, r9
 23e5ee2:	46c6      	mov	lr, r8
 23e5ee4:	d302      	bcc.n	23e5eec <__udivmoddi4+0x1f8>
 23e5ee6:	d106      	bne.n	23e5ef6 <__udivmoddi4+0x202>
 23e5ee8:	454b      	cmp	r3, r9
 23e5eea:	d204      	bcs.n	23e5ef6 <__udivmoddi4+0x202>
 23e5eec:	3801      	subs	r0, #1
 23e5eee:	ebb9 0402 	subs.w	r4, r9, r2
 23e5ef2:	eb68 0e0c 	sbc.w	lr, r8, ip
 23e5ef6:	2d00      	cmp	r5, #0
 23e5ef8:	d070      	beq.n	23e5fdc <__udivmoddi4+0x2e8>
 23e5efa:	1b1a      	subs	r2, r3, r4
 23e5efc:	eb61 010e 	sbc.w	r1, r1, lr
 23e5f00:	fa22 f306 	lsr.w	r3, r2, r6
 23e5f04:	fa01 f707 	lsl.w	r7, r1, r7
 23e5f08:	40f1      	lsrs	r1, r6
 23e5f0a:	2600      	movs	r6, #0
 23e5f0c:	431f      	orrs	r7, r3
 23e5f0e:	e9c5 7100 	strd	r7, r1, [r5]
 23e5f12:	e73c      	b.n	23e5d8e <__udivmoddi4+0x9a>
 23e5f14:	fa02 fc03 	lsl.w	ip, r2, r3
 23e5f18:	f1c3 0020 	rsb	r0, r3, #32
 23e5f1c:	fa01 f203 	lsl.w	r2, r1, r3
 23e5f20:	fa21 f600 	lsr.w	r6, r1, r0
 23e5f24:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 23e5f28:	fa24 f100 	lsr.w	r1, r4, r0
 23e5f2c:	fa1f f78c 	uxth.w	r7, ip
 23e5f30:	409c      	lsls	r4, r3
 23e5f32:	4311      	orrs	r1, r2
 23e5f34:	fbb6 f0fe 	udiv	r0, r6, lr
 23e5f38:	0c0a      	lsrs	r2, r1, #16
 23e5f3a:	fb0e 6610 	mls	r6, lr, r0, r6
 23e5f3e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 23e5f42:	fb00 f607 	mul.w	r6, r0, r7
 23e5f46:	4296      	cmp	r6, r2
 23e5f48:	d90e      	bls.n	23e5f68 <__udivmoddi4+0x274>
 23e5f4a:	eb1c 0202 	adds.w	r2, ip, r2
 23e5f4e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 23e5f52:	bf2c      	ite	cs
 23e5f54:	f04f 0901 	movcs.w	r9, #1
 23e5f58:	f04f 0900 	movcc.w	r9, #0
 23e5f5c:	4296      	cmp	r6, r2
 23e5f5e:	d902      	bls.n	23e5f66 <__udivmoddi4+0x272>
 23e5f60:	f1b9 0f00 	cmp.w	r9, #0
 23e5f64:	d031      	beq.n	23e5fca <__udivmoddi4+0x2d6>
 23e5f66:	4640      	mov	r0, r8
 23e5f68:	1b92      	subs	r2, r2, r6
 23e5f6a:	b289      	uxth	r1, r1
 23e5f6c:	fbb2 f6fe 	udiv	r6, r2, lr
 23e5f70:	fb0e 2216 	mls	r2, lr, r6, r2
 23e5f74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 23e5f78:	fb06 f207 	mul.w	r2, r6, r7
 23e5f7c:	428a      	cmp	r2, r1
 23e5f7e:	d907      	bls.n	23e5f90 <__udivmoddi4+0x29c>
 23e5f80:	eb1c 0101 	adds.w	r1, ip, r1
 23e5f84:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 23e5f88:	d201      	bcs.n	23e5f8e <__udivmoddi4+0x29a>
 23e5f8a:	428a      	cmp	r2, r1
 23e5f8c:	d823      	bhi.n	23e5fd6 <__udivmoddi4+0x2e2>
 23e5f8e:	4646      	mov	r6, r8
 23e5f90:	1a89      	subs	r1, r1, r2
 23e5f92:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 23e5f96:	e725      	b.n	23e5de4 <__udivmoddi4+0xf0>
 23e5f98:	462e      	mov	r6, r5
 23e5f9a:	4628      	mov	r0, r5
 23e5f9c:	e6f7      	b.n	23e5d8e <__udivmoddi4+0x9a>
 23e5f9e:	1a84      	subs	r4, r0, r2
 23e5fa0:	eb61 0303 	sbc.w	r3, r1, r3
 23e5fa4:	2001      	movs	r0, #1
 23e5fa6:	461f      	mov	r7, r3
 23e5fa8:	e70b      	b.n	23e5dc2 <__udivmoddi4+0xce>
 23e5faa:	4464      	add	r4, ip
 23e5fac:	3802      	subs	r0, #2
 23e5fae:	e749      	b.n	23e5e44 <__udivmoddi4+0x150>
 23e5fb0:	4464      	add	r4, ip
 23e5fb2:	3802      	subs	r0, #2
 23e5fb4:	e6e1      	b.n	23e5d7a <__udivmoddi4+0x86>
 23e5fb6:	3a02      	subs	r2, #2
 23e5fb8:	4461      	add	r1, ip
 23e5fba:	e72e      	b.n	23e5e1a <__udivmoddi4+0x126>
 23e5fbc:	3e02      	subs	r6, #2
 23e5fbe:	4462      	add	r2, ip
 23e5fc0:	e6c6      	b.n	23e5d50 <__udivmoddi4+0x5c>
 23e5fc2:	f1a8 0802 	sub.w	r8, r8, #2
 23e5fc6:	4461      	add	r1, ip
 23e5fc8:	e76f      	b.n	23e5eaa <__udivmoddi4+0x1b6>
 23e5fca:	3802      	subs	r0, #2
 23e5fcc:	4462      	add	r2, ip
 23e5fce:	e7cb      	b.n	23e5f68 <__udivmoddi4+0x274>
 23e5fd0:	3802      	subs	r0, #2
 23e5fd2:	4461      	add	r1, ip
 23e5fd4:	e77d      	b.n	23e5ed2 <__udivmoddi4+0x1de>
 23e5fd6:	3e02      	subs	r6, #2
 23e5fd8:	4461      	add	r1, ip
 23e5fda:	e7d9      	b.n	23e5f90 <__udivmoddi4+0x29c>
 23e5fdc:	462e      	mov	r6, r5
 23e5fde:	e6d6      	b.n	23e5d8e <__udivmoddi4+0x9a>

023e5fe0 <__aeabi_idiv0>:
 23e5fe0:	4770      	bx	lr
 23e5fe2:	bf00      	nop

023e5fe4 <strcmp>:
 23e5fe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 23e5fe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 23e5fec:	2a01      	cmp	r2, #1
 23e5fee:	bf28      	it	cs
 23e5ff0:	429a      	cmpcs	r2, r3
 23e5ff2:	d0f7      	beq.n	23e5fe4 <strcmp>
 23e5ff4:	1ad0      	subs	r0, r2, r3
 23e5ff6:	4770      	bx	lr

023e5ff8 <strlen>:
 23e5ff8:	4603      	mov	r3, r0
 23e5ffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 23e5ffe:	2a00      	cmp	r2, #0
 23e6000:	d1fb      	bne.n	23e5ffa <strlen+0x2>
 23e6002:	1a18      	subs	r0, r3, r0
 23e6004:	3801      	subs	r0, #1
 23e6006:	4770      	bx	lr

023e6008 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23e6008:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23e600a:	f014 f847 	bl	23fa09c <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23e600e:	2500      	movs	r5, #0
 23e6010:	4e05      	ldr	r6, [pc, #20]	; (23e6028 <module_user_init+0x20>)
 23e6012:	4c06      	ldr	r4, [pc, #24]	; (23e602c <module_user_init+0x24>)
 23e6014:	1ba4      	subs	r4, r4, r6
 23e6016:	08a4      	lsrs	r4, r4, #2
 23e6018:	42ac      	cmp	r4, r5
 23e601a:	d100      	bne.n	23e601e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23e601c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23e601e:	f856 3b04 	ldr.w	r3, [r6], #4
 23e6022:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23e6024:	3501      	adds	r5, #1
 23e6026:	e7f7      	b.n	23e6018 <module_user_init+0x10>
 23e6028:	023fffbc 	.word	0x023fffbc
 23e602c:	023ffff4 	.word	0x023ffff4

023e6030 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23e6030:	f008 be42 	b.w	23eecb8 <setup>

023e6034 <module_user_loop>:
}

void module_user_loop() {
 23e6034:	b508      	push	{r3, lr}
    loop();
 23e6036:	f008 fd2b 	bl	23eea90 <loop>
    _post_loop();
}
 23e603a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23e603e:	f013 bfe5 	b.w	23fa00c <_post_loop>

023e6042 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23e6042:	f012 b87b 	b.w	23f813c <malloc>

023e6046 <_Znaj>:
 23e6046:	f012 b879 	b.w	23f813c <malloc>

023e604a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23e604a:	f012 b885 	b.w	23f8158 <free>
	...

023e6050 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23e6050:	4674      	mov	r4, lr
void __cxa_pure_virtual() {
 23e6052:	b500      	push	{lr}
 23e6054:	b08d      	sub	sp, #52	; 0x34
  PANIC(PureVirtualCall,"Call on pure virtual");
 23e6056:	222c      	movs	r2, #44	; 0x2c
 23e6058:	2100      	movs	r1, #0
 23e605a:	a801      	add	r0, sp, #4
 23e605c:	f016 fed7 	bl	23fce0e <memset>
 23e6060:	4b05      	ldr	r3, [pc, #20]	; (23e6078 <__cxa_pure_virtual+0x28>)
 23e6062:	9404      	str	r4, [sp, #16]
 23e6064:	9301      	str	r3, [sp, #4]
 23e6066:	4b05      	ldr	r3, [pc, #20]	; (23e607c <__cxa_pure_virtual+0x2c>)
 23e6068:	9302      	str	r3, [sp, #8]
}

__attribute__((always_inline)) static inline uint32_t __get_PC(void) { 
    uint32_t result; 

    asm volatile ("mov %0, pc\n" : "=r" (result) ); 
 23e606a:	467b      	mov	r3, pc
 23e606c:	2100      	movs	r1, #0
 23e606e:	a801      	add	r0, sp, #4
 23e6070:	9303      	str	r3, [sp, #12]
 23e6072:	f011 fe33 	bl	23f7cdc <panic_ext>
  while (1);
 23e6076:	e7fe      	b.n	23e6076 <__cxa_pure_virtual+0x26>
 23e6078:	000c002c 	.word	0x000c002c
 23e607c:	023fd26c 	.word	0x023fd26c

023e6080 <__register_exitproc>:
int __cxa_atexit(void (*f)(void *), void *p, void *d) {
    return 0;
}

void __register_exitproc(int type, void (*fn)(void), void* arg, void* d) {
}
 23e6080:	4770      	bx	lr

023e6082 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 23e6082:	b158      	cbz	r0, 23e609c <null_ptr_check+0x1a>
 23e6084:	68c3      	ldr	r3, [r0, #12]
 23e6086:	b14b      	cbz	r3, 23e609c <null_ptr_check+0x1a>
 23e6088:	6903      	ldr	r3, [r0, #16]
 23e608a:	b13b      	cbz	r3, 23e609c <null_ptr_check+0x1a>
 23e608c:	6943      	ldr	r3, [r0, #20]
 23e608e:	b12b      	cbz	r3, 23e609c <null_ptr_check+0x1a>
 23e6090:	6840      	ldr	r0, [r0, #4]
 23e6092:	fab0 f080 	clz	r0, r0
 23e6096:	0940      	lsrs	r0, r0, #5
 23e6098:	4240      	negs	r0, r0
 23e609a:	4770      	bx	lr
        (dev->intf_ptr == NULL))
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 23e609c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        /* Device structure is fine */
        rslt = BMP3_OK;
    }

    return rslt;
}
 23e60a0:	4770      	bx	lr

023e60a2 <compensate_data>:
{
 23e60a2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23e60a6:	4682      	mov	sl, r0
 23e60a8:	ed2d 8b06 	vpush	{d8-d10}
 23e60ac:	4688      	mov	r8, r1
 23e60ae:	461c      	mov	r4, r3
    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 23e60b0:	4615      	mov	r5, r2
 23e60b2:	2a00      	cmp	r2, #0
 23e60b4:	f000 80dd 	beq.w	23e6272 <compensate_data+0x1d0>
        if (sensor_comp & (BMP3_PRESS | BMP3_TEMP))
 23e60b8:	f010 0f03 	tst.w	r0, #3
 23e60bc:	d022      	beq.n	23e6104 <compensate_data+0x62>
    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 23e60be:	6848      	ldr	r0, [r1, #4]
 23e60c0:	f7ff f8e0 	bl	23e5284 <__aeabi_ui2d>
 23e60c4:	e9d4 2300 	ldrd	r2, r3, [r4]
 23e60c8:	f7fe ff9e 	bl	23e5008 <__aeabi_dsub>
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 23e60cc:	4602      	mov	r2, r0
 23e60ce:	460b      	mov	r3, r1
    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 23e60d0:	4606      	mov	r6, r0
 23e60d2:	460f      	mov	r7, r1
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 23e60d4:	f7ff f950 	bl	23e5378 <__aeabi_dmul>
 23e60d8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 23e60dc:	f7ff f94c 	bl	23e5378 <__aeabi_dmul>
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 23e60e0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 23e60e4:	ec41 0b18 	vmov	d8, r0, r1
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 23e60e8:	4630      	mov	r0, r6
 23e60ea:	4639      	mov	r1, r7
 23e60ec:	f7ff f944 	bl	23e5378 <__aeabi_dmul>
 23e60f0:	4602      	mov	r2, r0
 23e60f2:	460b      	mov	r3, r1
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 23e60f4:	ec51 0b18 	vmov	r0, r1, d8
 23e60f8:	f7fe ff88 	bl	23e500c <__adddf3>
 23e60fc:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 23e6100:	e9c5 0100 	strd	r0, r1, [r5]
        if (sensor_comp & BMP3_PRESS)
 23e6104:	f01a 0001 	ands.w	r0, sl, #1
 23e6108:	f000 80af 	beq.w	23e626a <compensate_data+0x1c8>
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 23e610c:	e9d4 ab1c 	ldrd	sl, fp, [r4, #112]	; 0x70
        pow_output = (float) base * pow_output;
 23e6110:	4659      	mov	r1, fp
 23e6112:	4650      	mov	r0, sl
 23e6114:	f7ff fc28 	bl	23e5968 <__aeabi_d2f>
 23e6118:	ee08 0a10 	vmov	s16, r0
 23e611c:	ee68 8a08 	vmul.f32	s17, s16, s16
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e6120:	ee18 0a90 	vmov	r0, s17
 23e6124:	f7ff f8d0 	bl	23e52c8 <__aeabi_f2d>
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e6128:	ee68 7a28 	vmul.f32	s15, s16, s17
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e612c:	ec41 0b19 	vmov	d9, r0, r1
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e6130:	ee17 0a90 	vmov	r0, s15
 23e6134:	f7ff f8c8 	bl	23e52c8 <__aeabi_f2d>
 23e6138:	ec41 0b1a 	vmov	d10, r0, r1
    partial_out2 = uncomp_data->pressure *
 23e613c:	f8d8 0000 	ldr.w	r0, [r8]
 23e6140:	f7ff f8a0 	bl	23e5284 <__aeabi_ui2d>
 23e6144:	4689      	mov	r9, r1
 23e6146:	4680      	mov	r8, r0
        pow_output = (float) base * pow_output;
 23e6148:	f7ff fc0e 	bl	23e5968 <__aeabi_d2f>
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 23e614c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
        pow_output = (float) base * pow_output;
 23e6150:	ee08 0a10 	vmov	s16, r0
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 23e6154:	4659      	mov	r1, fp
 23e6156:	4650      	mov	r0, sl
 23e6158:	f7ff f90e 	bl	23e5378 <__aeabi_dmul>
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 23e615c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 23e6160:	f7fe ff54 	bl	23e500c <__adddf3>
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e6164:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 23e6168:	4606      	mov	r6, r0
 23e616a:	460f      	mov	r7, r1
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e616c:	ec51 0b19 	vmov	r0, r1, d9
 23e6170:	f7ff f902 	bl	23e5378 <__aeabi_dmul>
 23e6174:	4602      	mov	r2, r0
 23e6176:	460b      	mov	r3, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 23e6178:	4630      	mov	r0, r6
 23e617a:	4639      	mov	r1, r7
 23e617c:	f7fe ff46 	bl	23e500c <__adddf3>
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e6180:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 23e6184:	4606      	mov	r6, r0
 23e6186:	460f      	mov	r7, r1
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e6188:	ec51 0b1a 	vmov	r0, r1, d10
 23e618c:	f7ff f8f4 	bl	23e5378 <__aeabi_dmul>
 23e6190:	4602      	mov	r2, r0
 23e6192:	460b      	mov	r3, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 23e6194:	4630      	mov	r0, r6
 23e6196:	4639      	mov	r1, r7
 23e6198:	f7fe ff38 	bl	23e500c <__adddf3>
    partial_out2 = uncomp_data->pressure *
 23e619c:	4642      	mov	r2, r8
 23e619e:	464b      	mov	r3, r9
 23e61a0:	f7ff f8ea 	bl	23e5378 <__aeabi_dmul>
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 23e61a4:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
    partial_out2 = uncomp_data->pressure *
 23e61a8:	4606      	mov	r6, r0
 23e61aa:	460f      	mov	r7, r1
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 23e61ac:	4650      	mov	r0, sl
 23e61ae:	4659      	mov	r1, fp
 23e61b0:	f7ff f8e2 	bl	23e5378 <__aeabi_dmul>
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 23e61b4:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 23e61b8:	f7fe ff28 	bl	23e500c <__adddf3>
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e61bc:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 23e61c0:	4680      	mov	r8, r0
 23e61c2:	4689      	mov	r9, r1
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e61c4:	ec51 0b19 	vmov	r0, r1, d9
 23e61c8:	f7ff f8d6 	bl	23e5378 <__aeabi_dmul>
 23e61cc:	4602      	mov	r2, r0
 23e61ce:	460b      	mov	r3, r1
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 23e61d0:	4640      	mov	r0, r8
 23e61d2:	4649      	mov	r1, r9
 23e61d4:	f7fe ff1a 	bl	23e500c <__adddf3>
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e61d8:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 23e61dc:	4680      	mov	r8, r0
 23e61de:	4689      	mov	r9, r1
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e61e0:	ec51 0b1a 	vmov	r0, r1, d10
 23e61e4:	f7ff f8c8 	bl	23e5378 <__aeabi_dmul>
 23e61e8:	4602      	mov	r2, r0
 23e61ea:	460b      	mov	r3, r1
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 23e61ec:	4640      	mov	r0, r8
 23e61ee:	4649      	mov	r1, r9
 23e61f0:	f7fe ff0c 	bl	23e500c <__adddf3>
 23e61f4:	4602      	mov	r2, r0
 23e61f6:	460b      	mov	r3, r1
    comp_press = partial_out1 + partial_out2 + partial_data4;
 23e61f8:	4630      	mov	r0, r6
 23e61fa:	4639      	mov	r1, r7
 23e61fc:	f7fe ff06 	bl	23e500c <__adddf3>
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 23e6200:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    comp_press = partial_out1 + partial_out2 + partial_data4;
 23e6204:	4606      	mov	r6, r0
 23e6206:	460f      	mov	r7, r1
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 23e6208:	4650      	mov	r0, sl
 23e620a:	4659      	mov	r1, fp
 23e620c:	f7ff f8b4 	bl	23e5378 <__aeabi_dmul>
 23e6210:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
 23e6214:	f7fe fefa 	bl	23e500c <__adddf3>
        pow_output = (float) base * pow_output;
 23e6218:	ee68 8a08 	vmul.f32	s17, s16, s16
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 23e621c:	4680      	mov	r8, r0
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 23e621e:	ee18 0a90 	vmov	r0, s17
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 23e6222:	4689      	mov	r9, r1
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 23e6224:	f7ff f850 	bl	23e52c8 <__aeabi_f2d>
 23e6228:	4602      	mov	r2, r0
 23e622a:	460b      	mov	r3, r1
    partial_data3 = partial_data1 * partial_data2;
 23e622c:	4640      	mov	r0, r8
 23e622e:	4649      	mov	r1, r9
 23e6230:	f7ff f8a2 	bl	23e5378 <__aeabi_dmul>
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 23e6234:	ee68 7a28 	vmul.f32	s15, s16, s17
    partial_data3 = partial_data1 * partial_data2;
 23e6238:	4680      	mov	r8, r0
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 23e623a:	ee17 0a90 	vmov	r0, s15
    partial_data3 = partial_data1 * partial_data2;
 23e623e:	4689      	mov	r9, r1
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 23e6240:	f7ff f842 	bl	23e52c8 <__aeabi_f2d>
 23e6244:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
 23e6248:	f7ff f896 	bl	23e5378 <__aeabi_dmul>
 23e624c:	4602      	mov	r2, r0
 23e624e:	460b      	mov	r3, r1
 23e6250:	4640      	mov	r0, r8
 23e6252:	4649      	mov	r1, r9
 23e6254:	f7fe feda 	bl	23e500c <__adddf3>
 23e6258:	4602      	mov	r2, r0
 23e625a:	460b      	mov	r3, r1
    comp_press = partial_out1 + partial_out2 + partial_data4;
 23e625c:	4630      	mov	r0, r6
 23e625e:	4639      	mov	r1, r7
 23e6260:	f7fe fed4 	bl	23e500c <__adddf3>
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 23e6264:	e9c5 0102 	strd	r0, r1, [r5, #8]
    int8_t rslt = BMP3_OK;
 23e6268:	2000      	movs	r0, #0
}
 23e626a:	ecbd 8b06 	vpop	{d8-d10}
 23e626e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rslt = BMP3_E_NULL_PTR;
 23e6272:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e6276:	e7f8      	b.n	23e626a <compensate_data+0x1c8>

023e6278 <validate_osr_and_odr_settings>:
{
 23e6278:	b510      	push	{r4, lr}
 23e627a:	4604      	mov	r4, r0
 23e627c:	b092      	sub	sp, #72	; 0x48
    uint32_t odr[18] = {
 23e627e:	2248      	movs	r2, #72	; 0x48
 23e6280:	4668      	mov	r0, sp
 23e6282:	4920      	ldr	r1, [pc, #128]	; (23e6304 <validate_osr_and_odr_settings+0x8c>)
 23e6284:	f016 fdb6 	bl	23fcdf4 <memcpy>
    if (dev->settings.press_en)
 23e6288:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 23e628c:	b173      	cbz	r3, 23e62ac <validate_osr_and_odr_settings+0x34>
    float pow_output = 1;
 23e628e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 23e6292:	f894 30b3 	ldrb.w	r3, [r4, #179]	; 0xb3
    while (power != 0)
 23e6296:	bb5b      	cbnz	r3, 23e62f0 <validate_osr_and_odr_settings+0x78>
    press_meas_t = (BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 23e6298:	eddf 6a1b 	vldr	s13, [pc, #108]	; 23e6308 <validate_osr_and_odr_settings+0x90>
 23e629c:	eddf 7a1b 	vldr	s15, [pc, #108]	; 23e630c <validate_osr_and_odr_settings+0x94>
 23e62a0:	eee7 7a26 	vfma.f32	s15, s14, s13
 23e62a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23e62a8:	ee17 3a90 	vmov	r3, s15
    if (dev->settings.temp_en)
 23e62ac:	f894 20b2 	ldrb.w	r2, [r4, #178]	; 0xb2
 23e62b0:	b17a      	cbz	r2, 23e62d2 <validate_osr_and_odr_settings+0x5a>
    float pow_output = 1;
 23e62b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 23e62b6:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
    while (power != 0)
 23e62ba:	b9f2      	cbnz	r2, 23e62fa <validate_osr_and_odr_settings+0x82>
    temp_meas_t = (BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 23e62bc:	eddf 6a12 	vldr	s13, [pc, #72]	; 23e6308 <validate_osr_and_odr_settings+0x90>
 23e62c0:	eddf 7a13 	vldr	s15, [pc, #76]	; 23e6310 <validate_osr_and_odr_settings+0x98>
 23e62c4:	eee7 7a26 	vfma.f32	s15, s14, s13
 23e62c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
        meas_t_p += calculate_temp_meas_time(dev);
 23e62cc:	ee17 2a90 	vmov	r2, s15
 23e62d0:	4413      	add	r3, r2
    rslt = verify_meas_time_and_odr_duration(meas_t, odr[dev->settings.odr_filter.odr]);
 23e62d2:	f894 20b6 	ldrb.w	r2, [r4, #182]	; 0xb6
 23e62d6:	a912      	add	r1, sp, #72	; 0x48
 23e62d8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    if (meas_t < odr_duration)
 23e62dc:	f852 2c48 	ldr.w	r2, [r2, #-72]
    meas_t += meas_t_p;
 23e62e0:	33ea      	adds	r3, #234	; 0xea
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 23e62e2:	429a      	cmp	r2, r3
}
 23e62e4:	bf94      	ite	ls
 23e62e6:	f06f 0002 	mvnls.w	r0, #2
 23e62ea:	2000      	movhi	r0, #0
 23e62ec:	b012      	add	sp, #72	; 0x48
 23e62ee:	bd10      	pop	{r4, pc}
        power--;
 23e62f0:	3b01      	subs	r3, #1
        pow_output = (float) base * pow_output;
 23e62f2:	ee37 7a07 	vadd.f32	s14, s14, s14
        power--;
 23e62f6:	b2db      	uxtb	r3, r3
 23e62f8:	e7cd      	b.n	23e6296 <validate_osr_and_odr_settings+0x1e>
 23e62fa:	3a01      	subs	r2, #1
        pow_output = (float) base * pow_output;
 23e62fc:	ee37 7a07 	vadd.f32	s14, s14, s14
        power--;
 23e6300:	b2d2      	uxtb	r2, r2
 23e6302:	e7da      	b.n	23e62ba <validate_osr_and_odr_settings+0x42>
 23e6304:	023fd100 	.word	0x023fd100
 23e6308:	44fa0000 	.word	0x44fa0000
 23e630c:	43c40000 	.word	0x43c40000
 23e6310:	439c8000 	.word	0x439c8000

023e6314 <bmp3_get_regs>:
{
 23e6314:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23e6318:	4606      	mov	r6, r0
 23e631a:	af00      	add	r7, sp, #0
    rslt = null_ptr_check(dev);
 23e631c:	4618      	mov	r0, r3
{
 23e631e:	461c      	mov	r4, r3
    rslt = null_ptr_check(dev);
 23e6320:	f7ff feaf 	bl	23e6082 <null_ptr_check>
{
 23e6324:	4688      	mov	r8, r1
 23e6326:	4691      	mov	r9, r2
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 23e6328:	4605      	mov	r5, r0
 23e632a:	bb88      	cbnz	r0, 23e6390 <bmp3_get_regs+0x7c>
 23e632c:	b381      	cbz	r1, 23e6390 <bmp3_get_regs+0x7c>
        uint32_t temp_len = len + dev->dummy_byte;
 23e632e:	7aa0      	ldrb	r0, [r4, #10]
        if (dev->intf != BMP3_I2C_INTF)
 23e6330:	f894 c008 	ldrb.w	ip, [r4, #8]
        uint32_t temp_len = len + dev->dummy_byte;
 23e6334:	4410      	add	r0, r2
        uint8_t temp_buff[len + dev->dummy_byte];
 23e6336:	1dc3      	adds	r3, r0, #7
 23e6338:	f023 0307 	bic.w	r3, r3, #7
    {
 23e633c:	46ea      	mov	sl, sp
        uint8_t temp_buff[len + dev->dummy_byte];
 23e633e:	ebad 0d03 	sub.w	sp, sp, r3
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 23e6342:	68e3      	ldr	r3, [r4, #12]
        if (dev->intf != BMP3_I2C_INTF)
 23e6344:	f1bc 0f01 	cmp.w	ip, #1
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 23e6348:	469e      	mov	lr, r3
        uint8_t temp_buff[len + dev->dummy_byte];
 23e634a:	46eb      	mov	fp, sp
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 23e634c:	6863      	ldr	r3, [r4, #4]
        if (dev->intf != BMP3_I2C_INTF)
 23e634e:	d01a      	beq.n	23e6386 <bmp3_get_regs+0x72>
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 23e6350:	4602      	mov	r2, r0
 23e6352:	4669      	mov	r1, sp
 23e6354:	f046 0080 	orr.w	r0, r6, #128	; 0x80
 23e6358:	4676      	mov	r6, lr
 23e635a:	47b0      	blx	r6
 23e635c:	7260      	strb	r0, [r4, #9]
            for (idx = 0; idx < len; idx++)
 23e635e:	454d      	cmp	r5, r9
 23e6360:	d109      	bne.n	23e6376 <bmp3_get_regs+0x62>
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 23e6362:	f994 0009 	ldrsb.w	r0, [r4, #9]
 23e6366:	46d5      	mov	sp, sl
            rslt = BMP3_E_COMM_FAIL;
 23e6368:	2800      	cmp	r0, #0
 23e636a:	bf18      	it	ne
 23e636c:	f06f 0006 	mvnne.w	r0, #6
}
 23e6370:	46bd      	mov	sp, r7
 23e6372:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 23e6376:	7aa3      	ldrb	r3, [r4, #10]
 23e6378:	eb0b 0205 	add.w	r2, fp, r5
 23e637c:	5cd3      	ldrb	r3, [r2, r3]
 23e637e:	f808 3005 	strb.w	r3, [r8, r5]
            for (idx = 0; idx < len; idx++)
 23e6382:	3501      	adds	r5, #1
 23e6384:	e7eb      	b.n	23e635e <bmp3_get_regs+0x4a>
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 23e6386:	4630      	mov	r0, r6
 23e6388:	4675      	mov	r5, lr
 23e638a:	47a8      	blx	r5
 23e638c:	7260      	strb	r0, [r4, #9]
 23e638e:	e7e8      	b.n	23e6362 <bmp3_get_regs+0x4e>
        rslt = BMP3_E_NULL_PTR;
 23e6390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e6394:	e7ec      	b.n	23e6370 <bmp3_get_regs+0x5c>

023e6396 <bmp3_set_regs>:
{
 23e6396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23e639a:	461c      	mov	r4, r3
    uint8_t temp_buff[len * 2];
 23e639c:	ea4f 0842 	mov.w	r8, r2, lsl #1
 23e63a0:	f108 0307 	add.w	r3, r8, #7
 23e63a4:	f023 0307 	bic.w	r3, r3, #7
{
 23e63a8:	af00      	add	r7, sp, #0
 23e63aa:	4606      	mov	r6, r0
    uint8_t temp_buff[len * 2];
 23e63ac:	ebad 0d03 	sub.w	sp, sp, r3
    rslt = null_ptr_check(dev);
 23e63b0:	4620      	mov	r0, r4
{
 23e63b2:	460d      	mov	r5, r1
    uint8_t temp_buff[len * 2];
 23e63b4:	4669      	mov	r1, sp
    rslt = null_ptr_check(dev);
 23e63b6:	f7ff fe64 	bl	23e6082 <null_ptr_check>
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 23e63ba:	bb70      	cbnz	r0, 23e641a <bmp3_set_regs+0x84>
 23e63bc:	b36e      	cbz	r6, 23e641a <bmp3_set_regs+0x84>
 23e63be:	b365      	cbz	r5, 23e641a <bmp3_set_regs+0x84>
        if (len != 0)
 23e63c0:	b372      	cbz	r2, 23e6420 <bmp3_set_regs+0x8a>
            temp_buff[0] = reg_data[0];
 23e63c2:	782b      	ldrb	r3, [r5, #0]
 23e63c4:	f88d 3000 	strb.w	r3, [sp]
            if (dev->intf == BMP3_SPI_INTF)
 23e63c8:	7a23      	ldrb	r3, [r4, #8]
 23e63ca:	b303      	cbz	r3, 23e640e <bmp3_set_regs+0x78>
            if (len > 1)
 23e63cc:	2a01      	cmp	r2, #1
 23e63ce:	d00c      	beq.n	23e63ea <bmp3_set_regs+0x54>
    for (index = 1; index < len; index++)
 23e63d0:	2301      	movs	r3, #1
        temp_buff[(index * 2) - 1] = reg_addr[index];
 23e63d2:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 23e63d6:	5cf0      	ldrb	r0, [r6, r3]
 23e63d8:	f80c 0013 	strb.w	r0, [ip, r3, lsl #1]
        temp_buff[index * 2] = reg_data[index];
 23e63dc:	5ce8      	ldrb	r0, [r5, r3]
 23e63de:	f801 0013 	strb.w	r0, [r1, r3, lsl #1]
    for (index = 1; index < len; index++)
 23e63e2:	3301      	adds	r3, #1
 23e63e4:	429a      	cmp	r2, r3
 23e63e6:	d8f6      	bhi.n	23e63d6 <bmp3_set_regs+0x40>
                temp_len = len * 2;
 23e63e8:	4642      	mov	r2, r8
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 23e63ea:	6925      	ldr	r5, [r4, #16]
 23e63ec:	6863      	ldr	r3, [r4, #4]
 23e63ee:	7830      	ldrb	r0, [r6, #0]
 23e63f0:	47a8      	blx	r5
                rslt = BMP3_E_COMM_FAIL;
 23e63f2:	2800      	cmp	r0, #0
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 23e63f4:	7260      	strb	r0, [r4, #9]
                rslt = BMP3_E_COMM_FAIL;
 23e63f6:	bf18      	it	ne
 23e63f8:	f06f 0006 	mvnne.w	r0, #6
}
 23e63fc:	46bd      	mov	sp, r7
 23e63fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 23e6402:	f816 c000 	ldrb.w	ip, [r6, r0]
 23e6406:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
 23e640a:	f806 c000 	strb.w	ip, [r6, r0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 23e640e:	b2d8      	uxtb	r0, r3
 23e6410:	4282      	cmp	r2, r0
 23e6412:	f103 0301 	add.w	r3, r3, #1
 23e6416:	d8f4      	bhi.n	23e6402 <bmp3_set_regs+0x6c>
 23e6418:	e7d8      	b.n	23e63cc <bmp3_set_regs+0x36>
        rslt = BMP3_E_NULL_PTR;
 23e641a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e641e:	e7ed      	b.n	23e63fc <bmp3_set_regs+0x66>
            rslt = BMP3_E_INVALID_LEN;
 23e6420:	f06f 0005 	mvn.w	r0, #5
 23e6424:	e7ea      	b.n	23e63fc <bmp3_set_regs+0x66>

023e6426 <write_power_mode>:
{
 23e6426:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23e6428:	4603      	mov	r3, r0
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e642a:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 23e642c:	2201      	movs	r2, #1
 23e642e:	f10d 010f 	add.w	r1, sp, #15
    uint8_t op_mode = dev->settings.op_mode;
 23e6432:	f893 40b0 	ldrb.w	r4, [r3, #176]	; 0xb0
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 23e6436:	9301      	str	r3, [sp, #4]
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e6438:	f88d 000e 	strb.w	r0, [sp, #14]
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 23e643c:	f7ff ff6a 	bl	23e6314 <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e6440:	9b01      	ldr	r3, [sp, #4]
 23e6442:	b980      	cbnz	r0, 23e6466 <write_power_mode+0x40>
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 23e6444:	f89d 200f 	ldrb.w	r2, [sp, #15]
 23e6448:	0124      	lsls	r4, r4, #4
 23e644a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 23e644e:	f004 0430 	and.w	r4, r4, #48	; 0x30
 23e6452:	4322      	orrs	r2, r4
 23e6454:	f88d 200f 	strb.w	r2, [sp, #15]
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 23e6458:	f10d 010f 	add.w	r1, sp, #15
 23e645c:	2201      	movs	r2, #1
 23e645e:	f10d 000e 	add.w	r0, sp, #14
 23e6462:	f7ff ff98 	bl	23e6396 <bmp3_set_regs>
}
 23e6466:	b004      	add	sp, #16
 23e6468:	bd10      	pop	{r4, pc}
	...

023e646c <bmp3_set_sensor_settings>:
{
 23e646c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23e646e:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
 23e6470:	4608      	mov	r0, r1
{
 23e6472:	460d      	mov	r5, r1
    rslt = null_ptr_check(dev);
 23e6474:	f7ff fe05 	bl	23e6082 <null_ptr_check>
    if (rslt == BMP3_OK)
 23e6478:	2800      	cmp	r0, #0
 23e647a:	f040 811e 	bne.w	23e66ba <bmp3_set_sensor_settings+0x24e>
    if (sub_settings & desired_settings)
 23e647e:	f014 0f06 	tst.w	r4, #6
 23e6482:	d029      	beq.n	23e64d8 <bmp3_set_sensor_settings+0x6c>
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e6484:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e6486:	460b      	mov	r3, r1
 23e6488:	2201      	movs	r2, #1
 23e648a:	a901      	add	r1, sp, #4
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e648c:	f88d 0000 	strb.w	r0, [sp]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e6490:	f7ff ff40 	bl	23e6314 <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e6494:	bb00      	cbnz	r0, 23e64d8 <bmp3_set_sensor_settings+0x6c>
        if (desired_settings & BMP3_SEL_PRESS_EN)
 23e6496:	07a7      	lsls	r7, r4, #30
 23e6498:	d50a      	bpl.n	23e64b0 <bmp3_set_sensor_settings+0x44>
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, dev->settings.press_en);
 23e649a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23e649e:	f895 20b1 	ldrb.w	r2, [r5, #177]	; 0xb1
 23e64a2:	f023 0301 	bic.w	r3, r3, #1
 23e64a6:	f002 0201 	and.w	r2, r2, #1
 23e64aa:	4313      	orrs	r3, r2
 23e64ac:	f88d 3004 	strb.w	r3, [sp, #4]
        if (desired_settings & BMP3_SEL_TEMP_EN)
 23e64b0:	0766      	lsls	r6, r4, #29
 23e64b2:	d50b      	bpl.n	23e64cc <bmp3_set_sensor_settings+0x60>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, dev->settings.temp_en);
 23e64b4:	f895 30b2 	ldrb.w	r3, [r5, #178]	; 0xb2
 23e64b8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 23e64bc:	005b      	lsls	r3, r3, #1
 23e64be:	f003 0302 	and.w	r3, r3, #2
 23e64c2:	f022 0202 	bic.w	r2, r2, #2
 23e64c6:	4313      	orrs	r3, r2
 23e64c8:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 23e64cc:	462b      	mov	r3, r5
 23e64ce:	2201      	movs	r2, #1
 23e64d0:	4668      	mov	r0, sp
 23e64d2:	a901      	add	r1, sp, #4
 23e64d4:	f7ff ff5f 	bl	23e6396 <bmp3_set_regs>
    if (sub_settings & desired_settings)
 23e64d8:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 23e64dc:	d072      	beq.n	23e65c4 <bmp3_set_sensor_settings+0x158>
        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings) && (!rslt))
 23e64de:	2800      	cmp	r0, #0
 23e64e0:	d170      	bne.n	23e65c4 <bmp3_set_sensor_settings+0x158>
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 23e64e2:	2204      	movs	r2, #4
    uint8_t reg_addr[3] = { 0 };
 23e64e4:	4b77      	ldr	r3, [pc, #476]	; (23e66c4 <bmp3_set_sensor_settings+0x258>)
 23e64e6:	f88d 0002 	strb.w	r0, [sp, #2]
 23e64ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 23e64ee:	201c      	movs	r0, #28
    uint8_t reg_addr[3] = { 0 };
 23e64f0:	f8ad 3000 	strh.w	r3, [sp]
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 23e64f4:	eb0d 0102 	add.w	r1, sp, r2
 23e64f8:	462b      	mov	r3, r5
 23e64fa:	f7ff ff0b 	bl	23e6314 <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e64fe:	2800      	cmp	r0, #0
 23e6500:	d160      	bne.n	23e65c4 <bmp3_set_sensor_settings+0x158>
    if (sub_settings & desired_settings)
 23e6502:	f014 0f30 	tst.w	r4, #48	; 0x30
 23e6506:	f000 80da 	beq.w	23e66be <bmp3_set_sensor_settings+0x252>
        if (settings & BMP3_SEL_PRESS_OS)
 23e650a:	06e0      	lsls	r0, r4, #27
 23e650c:	f895 20b4 	ldrb.w	r2, [r5, #180]	; 0xb4
 23e6510:	d50a      	bpl.n	23e6528 <bmp3_set_sensor_settings+0xbc>
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 23e6512:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23e6516:	f895 10b3 	ldrb.w	r1, [r5, #179]	; 0xb3
 23e651a:	f023 0307 	bic.w	r3, r3, #7
 23e651e:	f001 0107 	and.w	r1, r1, #7
 23e6522:	430b      	orrs	r3, r1
 23e6524:	f88d 3004 	strb.w	r3, [sp, #4]
        if (settings & BMP3_SEL_TEMP_OS)
 23e6528:	06a1      	lsls	r1, r4, #26
 23e652a:	d509      	bpl.n	23e6540 <bmp3_set_sensor_settings+0xd4>
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 23e652c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23e6530:	00d2      	lsls	r2, r2, #3
 23e6532:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 23e6536:	f002 0238 	and.w	r2, r2, #56	; 0x38
 23e653a:	4313      	orrs	r3, r2
 23e653c:	f88d 3004 	strb.w	r3, [sp, #4]
        addr[*len] = BMP3_REG_OSR;
 23e6540:	231c      	movs	r3, #28
}
 23e6542:	2601      	movs	r6, #1
        addr[*len] = BMP3_REG_OSR;
 23e6544:	f88d 3000 	strb.w	r3, [sp]
    if (sub_settings & desired_settings)
 23e6548:	0622      	lsls	r2, r4, #24
 23e654a:	d518      	bpl.n	23e657e <bmp3_set_sensor_settings+0x112>
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 23e654c:	f895 30b6 	ldrb.w	r3, [r5, #182]	; 0xb6
 23e6550:	2b11      	cmp	r3, #17
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 23e6552:	bf84      	itt	hi
 23e6554:	2311      	movhi	r3, #17
 23e6556:	f885 30b6 	strbhi.w	r3, [r5, #182]	; 0xb6
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 23e655a:	ab02      	add	r3, sp, #8
 23e655c:	1999      	adds	r1, r3, r6
 23e655e:	f895 20b6 	ldrb.w	r2, [r5, #182]	; 0xb6
 23e6562:	f89d 3005 	ldrb.w	r3, [sp, #5]
 23e6566:	f002 021f 	and.w	r2, r2, #31
 23e656a:	f023 031f 	bic.w	r3, r3, #31
 23e656e:	4313      	orrs	r3, r2
 23e6570:	f801 3c04 	strb.w	r3, [r1, #-4]
    addr[*len] = BMP3_REG_ODR;
 23e6574:	231d      	movs	r3, #29
    (*len)++;
 23e6576:	3601      	adds	r6, #1
    addr[*len] = BMP3_REG_ODR;
 23e6578:	f801 3c08 	strb.w	r3, [r1, #-8]
    (*len)++;
 23e657c:	b2f6      	uxtb	r6, r6
    if (sub_settings & desired_settings)
 23e657e:	0663      	lsls	r3, r4, #25
 23e6580:	d512      	bpl.n	23e65a8 <bmp3_set_sensor_settings+0x13c>
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 23e6582:	ab02      	add	r3, sp, #8
 23e6584:	1999      	adds	r1, r3, r6
 23e6586:	f895 30b5 	ldrb.w	r3, [r5, #181]	; 0xb5
 23e658a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 23e658e:	005b      	lsls	r3, r3, #1
 23e6590:	f003 030e 	and.w	r3, r3, #14
 23e6594:	f022 020e 	bic.w	r2, r2, #14
 23e6598:	4313      	orrs	r3, r2
 23e659a:	f801 3c04 	strb.w	r3, [r1, #-4]
    addr[*len] = BMP3_REG_CONFIG;
 23e659e:	231f      	movs	r3, #31
    (*len)++;
 23e65a0:	3601      	adds	r6, #1
    addr[*len] = BMP3_REG_CONFIG;
 23e65a2:	f801 3c08 	strb.w	r3, [r1, #-8]
    (*len)++;
 23e65a6:	b2f6      	uxtb	r6, r6
        if (dev->settings.op_mode == BMP3_MODE_NORMAL)
 23e65a8:	f895 30b0 	ldrb.w	r3, [r5, #176]	; 0xb0
 23e65ac:	2b03      	cmp	r3, #3
 23e65ae:	d103      	bne.n	23e65b8 <bmp3_set_sensor_settings+0x14c>
            rslt = validate_osr_and_odr_settings(dev);
 23e65b0:	4628      	mov	r0, r5
 23e65b2:	f7ff fe61 	bl	23e6278 <validate_osr_and_odr_settings>
        if (rslt == BMP3_OK)
 23e65b6:	b928      	cbnz	r0, 23e65c4 <bmp3_set_sensor_settings+0x158>
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 23e65b8:	462b      	mov	r3, r5
 23e65ba:	4632      	mov	r2, r6
 23e65bc:	4668      	mov	r0, sp
 23e65be:	a901      	add	r1, sp, #4
 23e65c0:	f7ff fee9 	bl	23e6396 <bmp3_set_regs>
    if (sub_settings & desired_settings)
 23e65c4:	f414 6fe1 	tst.w	r4, #1800	; 0x708
 23e65c8:	d048      	beq.n	23e665c <bmp3_set_sensor_settings+0x1f0>
        if (are_settings_changed(BMP3_INT_CTRL, desired_settings) && (!rslt))
 23e65ca:	2800      	cmp	r0, #0
 23e65cc:	d146      	bne.n	23e665c <bmp3_set_sensor_settings+0x1f0>
    reg_addr = BMP3_REG_INT_CTRL;
 23e65ce:	2019      	movs	r0, #25
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e65d0:	462b      	mov	r3, r5
 23e65d2:	2201      	movs	r2, #1
 23e65d4:	4669      	mov	r1, sp
    reg_addr = BMP3_REG_INT_CTRL;
 23e65d6:	f88d 0004 	strb.w	r0, [sp, #4]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e65da:	f7ff fe9b 	bl	23e6314 <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e65de:	2800      	cmp	r0, #0
 23e65e0:	d13c      	bne.n	23e665c <bmp3_set_sensor_settings+0x1f0>
        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 23e65e2:	05e7      	lsls	r7, r4, #23
        int_settings = dev->settings.int_settings;
 23e65e4:	f895 00b8 	ldrb.w	r0, [r5, #184]	; 0xb8
 23e65e8:	f895 10b9 	ldrb.w	r1, [r5, #185]	; 0xb9
 23e65ec:	f895 20ba 	ldrb.w	r2, [r5, #186]	; 0xba
        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 23e65f0:	d50a      	bpl.n	23e6608 <bmp3_set_sensor_settings+0x19c>
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 23e65f2:	f89d 3000 	ldrb.w	r3, [sp]
 23e65f6:	f895 60b7 	ldrb.w	r6, [r5, #183]	; 0xb7
 23e65fa:	f023 0301 	bic.w	r3, r3, #1
 23e65fe:	f006 0601 	and.w	r6, r6, #1
 23e6602:	4333      	orrs	r3, r6
 23e6604:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_LEVEL)
 23e6608:	05a6      	lsls	r6, r4, #22
 23e660a:	d509      	bpl.n	23e6620 <bmp3_set_sensor_settings+0x1b4>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 23e660c:	f89d 3000 	ldrb.w	r3, [sp]
 23e6610:	0040      	lsls	r0, r0, #1
 23e6612:	f023 0302 	bic.w	r3, r3, #2
 23e6616:	f000 0002 	and.w	r0, r0, #2
 23e661a:	4303      	orrs	r3, r0
 23e661c:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_LATCH)
 23e6620:	0560      	lsls	r0, r4, #21
 23e6622:	d509      	bpl.n	23e6638 <bmp3_set_sensor_settings+0x1cc>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 23e6624:	f89d 3000 	ldrb.w	r3, [sp]
 23e6628:	0089      	lsls	r1, r1, #2
 23e662a:	f023 0304 	bic.w	r3, r3, #4
 23e662e:	f001 0104 	and.w	r1, r1, #4
 23e6632:	430b      	orrs	r3, r1
 23e6634:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_DRDY_EN)
 23e6638:	0721      	lsls	r1, r4, #28
 23e663a:	d509      	bpl.n	23e6650 <bmp3_set_sensor_settings+0x1e4>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 23e663c:	f89d 3000 	ldrb.w	r3, [sp]
 23e6640:	0192      	lsls	r2, r2, #6
 23e6642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 23e6646:	f002 0240 	and.w	r2, r2, #64	; 0x40
 23e664a:	4313      	orrs	r3, r2
 23e664c:	f88d 3000 	strb.w	r3, [sp]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 23e6650:	462b      	mov	r3, r5
 23e6652:	2201      	movs	r2, #1
 23e6654:	4669      	mov	r1, sp
 23e6656:	a801      	add	r0, sp, #4
 23e6658:	f7ff fe9d 	bl	23e6396 <bmp3_set_regs>
    if (sub_settings & desired_settings)
 23e665c:	f414 5fc0 	tst.w	r4, #6144	; 0x1800
 23e6660:	d02b      	beq.n	23e66ba <bmp3_set_sensor_settings+0x24e>
        if (are_settings_changed(BMP3_ADV_SETT, desired_settings) && (!rslt))
 23e6662:	bb50      	cbnz	r0, 23e66ba <bmp3_set_sensor_settings+0x24e>
    reg_addr = BMP3_REG_IF_CONF;
 23e6664:	201a      	movs	r0, #26
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e6666:	462b      	mov	r3, r5
 23e6668:	2201      	movs	r2, #1
 23e666a:	a901      	add	r1, sp, #4
    struct bmp3_adv_settings adv_settings = dev->settings.adv_settings;
 23e666c:	f895 70bb 	ldrb.w	r7, [r5, #187]	; 0xbb
 23e6670:	f895 60bc 	ldrb.w	r6, [r5, #188]	; 0xbc
    reg_addr = BMP3_REG_IF_CONF;
 23e6674:	f88d 0000 	strb.w	r0, [sp]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e6678:	f7ff fe4c 	bl	23e6314 <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e667c:	b9e8      	cbnz	r0, 23e66ba <bmp3_set_sensor_settings+0x24e>
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 23e667e:	0522      	lsls	r2, r4, #20
 23e6680:	d509      	bpl.n	23e6696 <bmp3_set_sensor_settings+0x22a>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 23e6682:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23e6686:	007f      	lsls	r7, r7, #1
 23e6688:	f023 0302 	bic.w	r3, r3, #2
 23e668c:	f007 0702 	and.w	r7, r7, #2
 23e6690:	433b      	orrs	r3, r7
 23e6692:	f88d 3004 	strb.w	r3, [sp, #4]
        if (desired_settings & BMP3_SEL_I2C_WDT)
 23e6696:	04e3      	lsls	r3, r4, #19
 23e6698:	d509      	bpl.n	23e66ae <bmp3_set_sensor_settings+0x242>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 23e669a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23e669e:	00b6      	lsls	r6, r6, #2
 23e66a0:	f023 0304 	bic.w	r3, r3, #4
 23e66a4:	f006 0604 	and.w	r6, r6, #4
 23e66a8:	4333      	orrs	r3, r6
 23e66aa:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 23e66ae:	462b      	mov	r3, r5
 23e66b0:	2201      	movs	r2, #1
 23e66b2:	4668      	mov	r0, sp
 23e66b4:	a901      	add	r1, sp, #4
 23e66b6:	f7ff fe6e 	bl	23e6396 <bmp3_set_regs>
}
 23e66ba:	b003      	add	sp, #12
 23e66bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t len = 0;
 23e66be:	4606      	mov	r6, r0
 23e66c0:	e742      	b.n	23e6548 <bmp3_set_sensor_settings+0xdc>
 23e66c2:	bf00      	nop
 23e66c4:	023fd100 	.word	0x023fd100

023e66c8 <bmp3_soft_reset>:
    uint8_t reg_addr = BMP3_REG_CMD;
 23e66c8:	237e      	movs	r3, #126	; 0x7e
{
 23e66ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t reg_addr = BMP3_REG_CMD;
 23e66cc:	f88d 3004 	strb.w	r3, [sp, #4]
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 23e66d0:	23b6      	movs	r3, #182	; 0xb6
{
 23e66d2:	4605      	mov	r5, r0
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 23e66d4:	f88d 3005 	strb.w	r3, [sp, #5]
    rslt = null_ptr_check(dev);
 23e66d8:	f7ff fcd3 	bl	23e6082 <null_ptr_check>
    if (rslt == BMP3_OK)
 23e66dc:	4604      	mov	r4, r0
 23e66de:	b960      	cbnz	r0, 23e66fa <bmp3_soft_reset+0x32>
        rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 23e66e0:	462b      	mov	r3, r5
 23e66e2:	2201      	movs	r2, #1
 23e66e4:	2003      	movs	r0, #3
 23e66e6:	f10d 0106 	add.w	r1, sp, #6
 23e66ea:	f7ff fe13 	bl	23e6314 <bmp3_get_regs>
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 23e66ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 23e66f2:	06db      	lsls	r3, r3, #27
 23e66f4:	d404      	bmi.n	23e6700 <bmp3_soft_reset+0x38>
            rslt = BMP3_E_CMD_EXEC_FAILED;
 23e66f6:	f06f 0403 	mvn.w	r4, #3
}
 23e66fa:	4620      	mov	r0, r4
 23e66fc:	b003      	add	sp, #12
 23e66fe:	bd30      	pop	{r4, r5, pc}
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 23e6700:	2800      	cmp	r0, #0
 23e6702:	d1f8      	bne.n	23e66f6 <bmp3_soft_reset+0x2e>
            rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 23e6704:	462b      	mov	r3, r5
 23e6706:	2201      	movs	r2, #1
 23e6708:	f10d 0105 	add.w	r1, sp, #5
 23e670c:	a801      	add	r0, sp, #4
 23e670e:	f7ff fe42 	bl	23e6396 <bmp3_set_regs>
            if (rslt == BMP3_OK)
 23e6712:	4604      	mov	r4, r0
 23e6714:	2800      	cmp	r0, #0
 23e6716:	d1f0      	bne.n	23e66fa <bmp3_soft_reset+0x32>
                dev->delay_us(2000, dev->intf_ptr);
 23e6718:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23e671c:	696b      	ldr	r3, [r5, #20]
 23e671e:	6869      	ldr	r1, [r5, #4]
 23e6720:	4798      	blx	r3
                rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 23e6722:	462b      	mov	r3, r5
 23e6724:	2201      	movs	r2, #1
 23e6726:	2002      	movs	r0, #2
 23e6728:	f10d 0107 	add.w	r1, sp, #7
 23e672c:	f7ff fdf2 	bl	23e6314 <bmp3_get_regs>
                if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 23e6730:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23e6734:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 23e6738:	4318      	orrs	r0, r3
 23e673a:	b2c0      	uxtb	r0, r0
 23e673c:	2800      	cmp	r0, #0
 23e673e:	d0dc      	beq.n	23e66fa <bmp3_soft_reset+0x32>
 23e6740:	e7d9      	b.n	23e66f6 <bmp3_soft_reset+0x2e>
	...

023e6744 <bmp3_init>:
    uint8_t chip_id = 0;
 23e6744:	2300      	movs	r3, #0
{
 23e6746:	b530      	push	{r4, r5, lr}
 23e6748:	b089      	sub	sp, #36	; 0x24
 23e674a:	4604      	mov	r4, r0
    uint8_t chip_id = 0;
 23e674c:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_ptr_check(dev);
 23e6750:	f7ff fc97 	bl	23e6082 <null_ptr_check>
    if (rslt == BMP3_OK)
 23e6754:	4605      	mov	r5, r0
 23e6756:	2800      	cmp	r0, #0
 23e6758:	f040 80d8 	bne.w	23e690c <bmp3_init+0x1c8>
        if (dev->intf != BMP3_I2C_INTF)
 23e675c:	7a23      	ldrb	r3, [r4, #8]
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 23e675e:	2201      	movs	r2, #1
        if (dev->intf != BMP3_I2C_INTF)
 23e6760:	3b01      	subs	r3, #1
 23e6762:	bf18      	it	ne
 23e6764:	2301      	movne	r3, #1
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 23e6766:	f10d 0107 	add.w	r1, sp, #7
        if (dev->intf != BMP3_I2C_INTF)
 23e676a:	72a3      	strb	r3, [r4, #10]
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 23e676c:	4623      	mov	r3, r4
 23e676e:	f7ff fdd1 	bl	23e6314 <bmp3_get_regs>
        if (rslt == BMP3_OK)
 23e6772:	4605      	mov	r5, r0
 23e6774:	2800      	cmp	r0, #0
 23e6776:	f040 80c9 	bne.w	23e690c <bmp3_init+0x1c8>
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 23e677a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23e677e:	2b50      	cmp	r3, #80	; 0x50
 23e6780:	d002      	beq.n	23e6788 <bmp3_init+0x44>
 23e6782:	2b60      	cmp	r3, #96	; 0x60
 23e6784:	f040 80c5 	bne.w	23e6912 <bmp3_init+0x1ce>
                rslt = bmp3_soft_reset(dev);
 23e6788:	4620      	mov	r0, r4
                dev->chip_id = chip_id;
 23e678a:	7023      	strb	r3, [r4, #0]
                rslt = bmp3_soft_reset(dev);
 23e678c:	f7ff ff9c 	bl	23e66c8 <bmp3_soft_reset>
                if (rslt == BMP3_OK)
 23e6790:	4605      	mov	r5, r0
 23e6792:	2800      	cmp	r0, #0
 23e6794:	f040 80ba 	bne.w	23e690c <bmp3_init+0x1c8>
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 23e6798:	4601      	mov	r1, r0
 23e679a:	2211      	movs	r2, #17
 23e679c:	9002      	str	r0, [sp, #8]
 23e679e:	a803      	add	r0, sp, #12
 23e67a0:	f016 fb35 	bl	23fce0e <memset>
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 23e67a4:	4623      	mov	r3, r4
 23e67a6:	2215      	movs	r2, #21
 23e67a8:	a902      	add	r1, sp, #8
 23e67aa:	2031      	movs	r0, #49	; 0x31
 23e67ac:	f7ff fdb2 	bl	23e6314 <bmp3_get_regs>
 23e67b0:	4605      	mov	r5, r0
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 23e67b2:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 23e67b6:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 23e67ba:	f7fe fd63 	bl	23e5284 <__aeabi_ui2d>
 23e67be:	2200      	movs	r2, #0
 23e67c0:	4b55      	ldr	r3, [pc, #340]	; (23e6918 <bmp3_init+0x1d4>)
 23e67c2:	f7fe fdd9 	bl	23e5378 <__aeabi_dmul>
 23e67c6:	e9c4 0106 	strd	r0, r1, [r4, #24]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 23e67ca:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 23e67ce:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 23e67d2:	f7fe fd57 	bl	23e5284 <__aeabi_ui2d>
 23e67d6:	2200      	movs	r2, #0
 23e67d8:	4b50      	ldr	r3, [pc, #320]	; (23e691c <bmp3_init+0x1d8>)
 23e67da:	f7fe fdcd 	bl	23e5378 <__aeabi_dmul>
 23e67de:	e9c4 0108 	strd	r0, r1, [r4, #32]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 23e67e2:	f99d 000c 	ldrsb.w	r0, [sp, #12]
 23e67e6:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 23e67ea:	f7fe fd5b 	bl	23e52a4 <__aeabi_i2d>
 23e67ee:	2200      	movs	r2, #0
 23e67f0:	4b4b      	ldr	r3, [pc, #300]	; (23e6920 <bmp3_init+0x1dc>)
 23e67f2:	f7fe fdc1 	bl	23e5378 <__aeabi_dmul>
 23e67f6:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 23e67fa:	f9bd 000d 	ldrsh.w	r0, [sp, #13]
 23e67fe:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 23e6802:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 23e6806:	f7fe fd4d 	bl	23e52a4 <__aeabi_i2d>
 23e680a:	2200      	movs	r2, #0
 23e680c:	4b45      	ldr	r3, [pc, #276]	; (23e6924 <bmp3_init+0x1e0>)
 23e680e:	f7fe fdb3 	bl	23e5378 <__aeabi_dmul>
 23e6812:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 23e6816:	f9bd 000f 	ldrsh.w	r0, [sp, #15]
 23e681a:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 23e681e:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 23e6822:	f7fe fd3f 	bl	23e52a4 <__aeabi_i2d>
 23e6826:	2200      	movs	r2, #0
 23e6828:	4b3f      	ldr	r3, [pc, #252]	; (23e6928 <bmp3_init+0x1e4>)
 23e682a:	f7fe fda5 	bl	23e5378 <__aeabi_dmul>
 23e682e:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 23e6832:	f99d 0011 	ldrsb.w	r0, [sp, #17]
 23e6836:	f884 009a 	strb.w	r0, [r4, #154]	; 0x9a
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 23e683a:	f7fe fd33 	bl	23e52a4 <__aeabi_i2d>
 23e683e:	2200      	movs	r2, #0
 23e6840:	4b3a      	ldr	r3, [pc, #232]	; (23e692c <bmp3_init+0x1e8>)
 23e6842:	f7fe fd99 	bl	23e5378 <__aeabi_dmul>
 23e6846:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 23e684a:	f99d 0012 	ldrsb.w	r0, [sp, #18]
 23e684e:	f884 009b 	strb.w	r0, [r4, #155]	; 0x9b
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 23e6852:	f7fe fd27 	bl	23e52a4 <__aeabi_i2d>
 23e6856:	2200      	movs	r2, #0
 23e6858:	4b35      	ldr	r3, [pc, #212]	; (23e6930 <bmp3_init+0x1ec>)
 23e685a:	f7fe fd8d 	bl	23e5378 <__aeabi_dmul>
 23e685e:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 23e6862:	f8bd 0013 	ldrh.w	r0, [sp, #19]
 23e6866:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 23e686a:	f7fe fd0b 	bl	23e5284 <__aeabi_ui2d>
 23e686e:	2200      	movs	r2, #0
 23e6870:	4b30      	ldr	r3, [pc, #192]	; (23e6934 <bmp3_init+0x1f0>)
 23e6872:	f7fe fd81 	bl	23e5378 <__aeabi_dmul>
 23e6876:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 23e687a:	f8bd 0015 	ldrh.w	r0, [sp, #21]
 23e687e:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 23e6882:	f7fe fcff 	bl	23e5284 <__aeabi_ui2d>
 23e6886:	2200      	movs	r2, #0
 23e6888:	4b2b      	ldr	r3, [pc, #172]	; (23e6938 <bmp3_init+0x1f4>)
 23e688a:	f7fe fd75 	bl	23e5378 <__aeabi_dmul>
 23e688e:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 23e6892:	f99d 0017 	ldrsb.w	r0, [sp, #23]
 23e6896:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 23e689a:	f7fe fd03 	bl	23e52a4 <__aeabi_i2d>
 23e689e:	2200      	movs	r2, #0
 23e68a0:	4b26      	ldr	r3, [pc, #152]	; (23e693c <bmp3_init+0x1f8>)
 23e68a2:	f7fe fd69 	bl	23e5378 <__aeabi_dmul>
 23e68a6:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 23e68aa:	f99d 0018 	ldrsb.w	r0, [sp, #24]
 23e68ae:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 23e68b2:	f7fe fcf7 	bl	23e52a4 <__aeabi_i2d>
 23e68b6:	2200      	movs	r2, #0
 23e68b8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 23e68bc:	f7fe fd5c 	bl	23e5378 <__aeabi_dmul>
 23e68c0:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 23e68c4:	f9bd 0019 	ldrsh.w	r0, [sp, #25]
 23e68c8:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 23e68cc:	f7fe fcea 	bl	23e52a4 <__aeabi_i2d>
 23e68d0:	2200      	movs	r2, #0
 23e68d2:	4b13      	ldr	r3, [pc, #76]	; (23e6920 <bmp3_init+0x1dc>)
 23e68d4:	f7fe fd50 	bl	23e5378 <__aeabi_dmul>
 23e68d8:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 23e68dc:	f99d 001b 	ldrsb.w	r0, [sp, #27]
 23e68e0:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 23e68e4:	f7fe fcde 	bl	23e52a4 <__aeabi_i2d>
 23e68e8:	2200      	movs	r2, #0
 23e68ea:	4b0d      	ldr	r3, [pc, #52]	; (23e6920 <bmp3_init+0x1dc>)
 23e68ec:	f7fe fd44 	bl	23e5378 <__aeabi_dmul>
 23e68f0:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 23e68f4:	f99d 001c 	ldrsb.w	r0, [sp, #28]
 23e68f8:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 23e68fc:	f7fe fcd2 	bl	23e52a4 <__aeabi_i2d>
 23e6900:	2200      	movs	r2, #0
 23e6902:	4b0f      	ldr	r3, [pc, #60]	; (23e6940 <bmp3_init+0x1fc>)
 23e6904:	f7fe fd38 	bl	23e5378 <__aeabi_dmul>
 23e6908:	e9c4 0120 	strd	r0, r1, [r4, #128]	; 0x80
}
 23e690c:	4628      	mov	r0, r5
 23e690e:	b009      	add	sp, #36	; 0x24
 23e6910:	bd30      	pop	{r4, r5, pc}
                rslt = BMP3_E_DEV_NOT_FOUND;
 23e6912:	f06f 0501 	mvn.w	r5, #1
 23e6916:	e7f9      	b.n	23e690c <bmp3_init+0x1c8>
 23e6918:	40700000 	.word	0x40700000
 23e691c:	3e100000 	.word	0x3e100000
 23e6920:	3cf00000 	.word	0x3cf00000
 23e6924:	3eb00000 	.word	0x3eb00000
 23e6928:	3e200000 	.word	0x3e200000
 23e692c:	3df00000 	.word	0x3df00000
 23e6930:	3da00000 	.word	0x3da00000
 23e6934:	40200000 	.word	0x40200000
 23e6938:	3f900000 	.word	0x3f900000
 23e693c:	3f700000 	.word	0x3f700000
 23e6940:	3be00000 	.word	0x3be00000

023e6944 <bmp3_get_op_mode>:
{
 23e6944:	b513      	push	{r0, r1, r4, lr}
 23e6946:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
 23e6948:	4608      	mov	r0, r1
 23e694a:	9101      	str	r1, [sp, #4]
 23e694c:	f7ff fb99 	bl	23e6082 <null_ptr_check>
    if ((rslt == BMP3_OK) && (op_mode != NULL))
 23e6950:	b960      	cbnz	r0, 23e696c <bmp3_get_op_mode+0x28>
 23e6952:	b15c      	cbz	r4, 23e696c <bmp3_get_op_mode+0x28>
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 23e6954:	460b      	mov	r3, r1
 23e6956:	2201      	movs	r2, #1
 23e6958:	4621      	mov	r1, r4
 23e695a:	201b      	movs	r0, #27
 23e695c:	f7ff fcda 	bl	23e6314 <bmp3_get_regs>
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 23e6960:	7823      	ldrb	r3, [r4, #0]
 23e6962:	f3c3 1301 	ubfx	r3, r3, #4, #2
 23e6966:	7023      	strb	r3, [r4, #0]
}
 23e6968:	b002      	add	sp, #8
 23e696a:	bd10      	pop	{r4, pc}
        rslt = BMP3_E_NULL_PTR;
 23e696c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e6970:	e7fa      	b.n	23e6968 <bmp3_get_op_mode+0x24>

023e6972 <bmp3_set_op_mode>:
{
 23e6972:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23e6974:	4605      	mov	r5, r0
    rslt = null_ptr_check(dev);
 23e6976:	f7ff fb84 	bl	23e6082 <null_ptr_check>
    if (rslt == BMP3_OK)
 23e697a:	4604      	mov	r4, r0
 23e697c:	2800      	cmp	r0, #0
 23e697e:	d163      	bne.n	23e6a48 <bmp3_set_op_mode+0xd6>
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 23e6980:	4629      	mov	r1, r5
 23e6982:	f10d 0002 	add.w	r0, sp, #2
        uint8_t curr_mode = dev->settings.op_mode;
 23e6986:	f895 60b0 	ldrb.w	r6, [r5, #176]	; 0xb0
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 23e698a:	f7ff ffdb 	bl	23e6944 <bmp3_get_op_mode>
        if (last_set_mode != BMP3_MODE_SLEEP)
 23e698e:	f89d 3002 	ldrb.w	r3, [sp, #2]
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 23e6992:	4604      	mov	r4, r0
        if (last_set_mode != BMP3_MODE_SLEEP)
 23e6994:	b1e3      	cbz	r3, 23e69d0 <bmp3_set_op_mode+0x5e>
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e6996:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 23e6998:	462b      	mov	r3, r5
 23e699a:	2201      	movs	r2, #1
 23e699c:	a901      	add	r1, sp, #4
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e699e:	f88d 0003 	strb.w	r0, [sp, #3]
    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 23e69a2:	f7ff fcb7 	bl	23e6314 <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e69a6:	4604      	mov	r4, r0
 23e69a8:	b968      	cbnz	r0, 23e69c6 <bmp3_set_op_mode+0x54>
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 23e69aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 23e69ae:	2201      	movs	r2, #1
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 23e69b0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 23e69b4:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 23e69b8:	a901      	add	r1, sp, #4
 23e69ba:	462b      	mov	r3, r5
 23e69bc:	f10d 0003 	add.w	r0, sp, #3
 23e69c0:	f7ff fce9 	bl	23e6396 <bmp3_set_regs>
 23e69c4:	4604      	mov	r4, r0
            dev->delay_us(5000, dev->intf_ptr);
 23e69c6:	f241 3088 	movw	r0, #5000	; 0x1388
 23e69ca:	696b      	ldr	r3, [r5, #20]
 23e69cc:	6869      	ldr	r1, [r5, #4]
 23e69ce:	4798      	blx	r3
        if (rslt == BMP3_OK)
 23e69d0:	bbd4      	cbnz	r4, 23e6a48 <bmp3_set_op_mode+0xd6>
            if (curr_mode == BMP3_MODE_NORMAL)
 23e69d2:	2e03      	cmp	r6, #3
 23e69d4:	d13b      	bne.n	23e6a4e <bmp3_set_op_mode+0xdc>
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 23e69d6:	2204      	movs	r2, #4
 23e69d8:	462b      	mov	r3, r5
 23e69da:	eb0d 0102 	add.w	r1, sp, r2
 23e69de:	201c      	movs	r0, #28
 23e69e0:	f7ff fc98 	bl	23e6314 <bmp3_get_regs>
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 23e69e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if (rslt == BMP3_OK)
 23e69e8:	4604      	mov	r4, r0
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 23e69ea:	f003 0207 	and.w	r2, r3, #7
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 23e69ee:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 23e69f2:	f885 30b4 	strb.w	r3, [r5, #180]	; 0xb4
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 23e69f6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 23e69fa:	f885 20b3 	strb.w	r2, [r5, #179]	; 0xb3
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 23e69fe:	f003 031f 	and.w	r3, r3, #31
 23e6a02:	f885 30b6 	strb.w	r3, [r5, #182]	; 0xb6
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 23e6a06:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23e6a0a:	f3c3 0342 	ubfx	r3, r3, #1, #3
 23e6a0e:	f885 30b5 	strb.w	r3, [r5, #181]	; 0xb5
    if (rslt == BMP3_OK)
 23e6a12:	b9c8      	cbnz	r0, 23e6a48 <bmp3_set_op_mode+0xd6>
        rslt = validate_osr_and_odr_settings(dev);
 23e6a14:	4628      	mov	r0, r5
 23e6a16:	f7ff fc2f 	bl	23e6278 <validate_osr_and_odr_settings>
    if (rslt == BMP3_OK)
 23e6a1a:	4604      	mov	r4, r0
 23e6a1c:	b9a0      	cbnz	r0, 23e6a48 <bmp3_set_op_mode+0xd6>
        rslt = write_power_mode(dev);
 23e6a1e:	4628      	mov	r0, r5
 23e6a20:	f7ff fd01 	bl	23e6426 <write_power_mode>
        if (rslt == BMP3_OK)
 23e6a24:	4604      	mov	r4, r0
 23e6a26:	b978      	cbnz	r0, 23e6a48 <bmp3_set_op_mode+0xd6>
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 23e6a28:	462b      	mov	r3, r5
 23e6a2a:	2201      	movs	r2, #1
 23e6a2c:	2002      	movs	r0, #2
 23e6a2e:	a901      	add	r1, sp, #4
 23e6a30:	f7ff fc70 	bl	23e6314 <bmp3_get_regs>
            if (rslt == BMP3_OK)
 23e6a34:	4604      	mov	r4, r0
 23e6a36:	b938      	cbnz	r0, 23e6a48 <bmp3_set_op_mode+0xd6>
                if (conf_err_status & BMP3_ERR_CONF)
 23e6a38:	f89d 3004 	ldrb.w	r3, [sp, #4]
                    rslt = BMP3_E_CONFIGURATION_ERR;
 23e6a3c:	f013 0f04 	tst.w	r3, #4
 23e6a40:	bf0c      	ite	eq
 23e6a42:	4604      	moveq	r4, r0
 23e6a44:	f06f 0404 	mvnne.w	r4, #4
}
 23e6a48:	4620      	mov	r0, r4
 23e6a4a:	b002      	add	sp, #8
 23e6a4c:	bd70      	pop	{r4, r5, r6, pc}
            else if (curr_mode == BMP3_MODE_FORCED)
 23e6a4e:	2e01      	cmp	r6, #1
 23e6a50:	d1fa      	bne.n	23e6a48 <bmp3_set_op_mode+0xd6>
                rslt = write_power_mode(dev);
 23e6a52:	4628      	mov	r0, r5
 23e6a54:	f7ff fce7 	bl	23e6426 <write_power_mode>
 23e6a58:	4604      	mov	r4, r0
    return rslt;
 23e6a5a:	e7f5      	b.n	23e6a48 <bmp3_set_op_mode+0xd6>

023e6a5c <bmp3_get_sensor_data>:
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 23e6a5c:	2300      	movs	r3, #0
{
 23e6a5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 23e6a60:	4606      	mov	r6, r0
 23e6a62:	b085      	sub	sp, #20
    rslt = null_ptr_check(dev);
 23e6a64:	4610      	mov	r0, r2
{
 23e6a66:	460d      	mov	r5, r1
 23e6a68:	4617      	mov	r7, r2
    struct bmp3_uncomp_data uncomp_data = { 0 };
 23e6a6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 23e6a6e:	9300      	str	r3, [sp, #0]
 23e6a70:	f8ad 3004 	strh.w	r3, [sp, #4]
    rslt = null_ptr_check(dev);
 23e6a74:	f7ff fb05 	bl	23e6082 <null_ptr_check>
    if ((rslt == BMP3_OK) && (comp_data != NULL))
 23e6a78:	bb30      	cbnz	r0, 23e6ac8 <bmp3_get_sensor_data+0x6c>
 23e6a7a:	b329      	cbz	r1, 23e6ac8 <bmp3_get_sensor_data+0x6c>
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 23e6a7c:	4613      	mov	r3, r2
 23e6a7e:	4669      	mov	r1, sp
 23e6a80:	2206      	movs	r2, #6
 23e6a82:	2004      	movs	r0, #4
 23e6a84:	f7ff fc46 	bl	23e6314 <bmp3_get_regs>
        if (rslt == BMP3_OK)
 23e6a88:	b9e0      	cbnz	r0, 23e6ac4 <bmp3_get_sensor_data+0x68>
    data_msb = (uint32_t)reg_data[2] << 16;
 23e6a8a:	f89d 3002 	ldrb.w	r3, [sp, #2]
    data_lsb = (uint32_t)reg_data[1] << 8;
 23e6a8e:	f89d 2001 	ldrb.w	r2, [sp, #1]
    data_msb = (uint32_t)reg_data[2] << 16;
 23e6a92:	041b      	lsls	r3, r3, #16
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 23e6a94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    data_xlsb = (uint32_t)reg_data[0];
 23e6a98:	f89d 2000 	ldrb.w	r2, [sp]
    data_msb = (uint32_t)reg_data[5] << 16;
 23e6a9c:	f89d 4005 	ldrb.w	r4, [sp, #5]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 23e6aa0:	4313      	orrs	r3, r2
 23e6aa2:	9302      	str	r3, [sp, #8]
    data_lsb = (uint32_t)reg_data[4] << 8;
 23e6aa4:	f89d 3004 	ldrb.w	r3, [sp, #4]
    data_msb = (uint32_t)reg_data[5] << 16;
 23e6aa8:	0424      	lsls	r4, r4, #16
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 23e6aaa:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    data_xlsb = (uint32_t)reg_data[3];
 23e6aae:	f89d 3003 	ldrb.w	r3, [sp, #3]
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 23e6ab2:	462a      	mov	r2, r5
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 23e6ab4:	431c      	orrs	r4, r3
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 23e6ab6:	4630      	mov	r0, r6
 23e6ab8:	f107 0318 	add.w	r3, r7, #24
 23e6abc:	a902      	add	r1, sp, #8
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 23e6abe:	9403      	str	r4, [sp, #12]
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 23e6ac0:	f7ff faef 	bl	23e60a2 <compensate_data>
}
 23e6ac4:	b005      	add	sp, #20
 23e6ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rslt = BMP3_E_NULL_PTR;
 23e6ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e6acc:	e7fa      	b.n	23e6ac4 <bmp3_get_sensor_data+0x68>

023e6ace <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
 23e6ace:	4770      	bx	lr

023e6ad0 <_Z28anemometer_interrupt_handlerv>:
 * ======================================================================================================================
 */
#define ANEMOMETER_IRQ_PIN  A2
void anemometer_interrupt_handler()
{
  anemometer_interrupt_count++;
 23e6ad0:	4a02      	ldr	r2, [pc, #8]	; (23e6adc <_Z28anemometer_interrupt_handlerv+0xc>)
 23e6ad2:	6813      	ldr	r3, [r2, #0]
 23e6ad4:	3301      	adds	r3, #1
 23e6ad6:	6013      	str	r3, [r2, #0]
}
 23e6ad8:	4770      	bx	lr
 23e6ada:	bf00      	nop
 23e6adc:	1006a950 	.word	0x1006a950

023e6ae0 <_ZN6FsFileD1Ev>:
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23e6ae0:	4770      	bx	lr

023e6ae2 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
 23e6ae2:	b510      	push	{r4, lr}
 23e6ae4:	4604      	mov	r4, r0
  }
 23e6ae6:	2110      	movs	r1, #16
 23e6ae8:	f7ff faaf 	bl	23e604a <_ZdlPvj>
 23e6aec:	4620      	mov	r0, r4
 23e6aee:	bd10      	pop	{r4, pc}

023e6af0 <_ZN6FsFileD0Ev>:
 23e6af0:	b510      	push	{r4, lr}
 23e6af2:	4604      	mov	r4, r0
 23e6af4:	2150      	movs	r1, #80	; 0x50
 23e6af6:	f7ff faa8 	bl	23e604a <_ZdlPvj>
 23e6afa:	4620      	mov	r0, r4
 23e6afc:	bd10      	pop	{r4, pc}

023e6afe <_ZN10StreamFileI10FsBaseFileyE5flushEv>:
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
 23e6afe:	6c83      	ldr	r3, [r0, #72]	; 0x48
 23e6b00:	b113      	cbz	r3, 23e6b08 <_ZN10StreamFileI10FsBaseFileyE5flushEv+0xa>
 23e6b02:	4618      	mov	r0, r3
 23e6b04:	f00d bcb8 	b.w	23f4478 <_ZN7FatFile4syncEv>
 23e6b08:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 23e6b0a:	b108      	cbz	r0, 23e6b10 <_ZN10StreamFileI10FsBaseFileyE5flushEv+0x12>
 23e6b0c:	f00f bd08 	b.w	23f6520 <_ZN9ExFatFile4syncEv>
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() override { return BaseFile::available(); }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() override { BaseFile::sync(); }
 23e6b10:	4770      	bx	lr
	...

023e6b14 <_Z13callback_imsiiPKciPc>:
 * 
 * COMMAND: AT+CIMI   Note: Each line returned is a call to this callback function
 * SEE https://docs.particle.io/reference/device-os/api/cellular/command/
 * ======================================================================================================================
 */
int callback_imsi(int type, const char* buf, int len, char* cimi) {
 23e6b14:	b510      	push	{r4, lr}
 23e6b16:	4604      	mov	r4, r0
 23e6b18:	461a      	mov	r2, r3
 23e6b1a:	4608      	mov	r0, r1
  // sprintf (msgbuf, "AT+CIMI:%X [%s]", type, buf); Output (msgbuf);     

  if ((type == TYPE_UNKNOWN) && cimi) {
 23e6b1c:	b934      	cbnz	r4, 23e6b2c <_Z13callback_imsiiPKciPc+0x18>
 23e6b1e:	b113      	cbz	r3, 23e6b26 <_Z13callback_imsiiPKciPc+0x12>
    if (sscanf(buf, "\r\n%[^\r]\r\n", cimi) == 1)
 23e6b20:	4906      	ldr	r1, [pc, #24]	; (23e6b3c <_Z13callback_imsiiPKciPc+0x28>)
 23e6b22:	f011 fb43 	bl	23f81ac <sscanf>
  }

  if (type == TYPE_OK) {
    return (RESP_OK);
  }
  return (WAIT);
 23e6b26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e6b2a:	e006      	b.n	23e6b3a <_Z13callback_imsiiPKciPc+0x26>
    return (RESP_OK);
 23e6b2c:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
 23e6b30:	bf14      	ite	ne
 23e6b32:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23e6b36:	f06f 0001 	mvneq.w	r0, #1
}
 23e6b3a:	bd10      	pop	{r4, pc}
 23e6b3c:	023fd2fb 	.word	0x023fd2fb

023e6b40 <_ZN10StreamFileI10FsBaseFileyE4peekEv>:
    return m_fFile ? m_fFile->peek() : m_xFile ? m_xFile->peek() : -1;
 23e6b40:	6c83      	ldr	r3, [r0, #72]	; 0x48
 23e6b42:	b113      	cbz	r3, 23e6b4a <_ZN10StreamFileI10FsBaseFileyE4peekEv+0xa>
 23e6b44:	4618      	mov	r0, r3
 23e6b46:	f00d bbae 	b.w	23f42a6 <_ZN7FatFile4peekEv>
 23e6b4a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 23e6b4c:	b108      	cbz	r0, 23e6b52 <_ZN10StreamFileI10FsBaseFileyE4peekEv+0x12>
 23e6b4e:	f00f b92f 	b.w	23f5db0 <_ZN9ExFatFile4peekEv>

  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() override { return BaseFile::peek(); }
 23e6b52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e6b56:	4770      	bx	lr

023e6b58 <_ZN5spark10JSONWriter5valueEPKc.isra.0>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23e6b58:	b513      	push	{r0, r1, r4, lr}
 23e6b5a:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23e6b5c:	4608      	mov	r0, r1
 23e6b5e:	9101      	str	r1, [sp, #4]
 23e6b60:	f7ff fa4a 	bl	23e5ff8 <strlen>
 23e6b64:	4602      	mov	r2, r0
 23e6b66:	4620      	mov	r0, r4
 23e6b68:	9901      	ldr	r1, [sp, #4]
}
 23e6b6a:	b002      	add	sp, #8
 23e6b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23e6b70:	f012 bbf4 	b.w	23f935c <_ZN5spark10JSONWriter5valueEPKcj>

023e6b74 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 23e6b74:	6803      	ldr	r3, [r0, #0]
 23e6b76:	b2c9      	uxtb	r1, r1
 23e6b78:	689b      	ldr	r3, [r3, #8]
 23e6b7a:	4718      	bx	r3

023e6b7c <_ZN5Print6printfEPKcz>:

    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 23e6b7c:	b40e      	push	{r1, r2, r3}
 23e6b7e:	b503      	push	{r0, r1, lr}
 23e6b80:	ab03      	add	r3, sp, #12
 23e6b82:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 23e6b86:	2100      	movs	r1, #0
        va_start(args, format);
 23e6b88:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 23e6b8a:	f012 fdcf 	bl	23f972c <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 23e6b8e:	b002      	add	sp, #8
 23e6b90:	f85d eb04 	ldr.w	lr, [sp], #4
 23e6b94:	b003      	add	sp, #12
 23e6b96:	4770      	bx	lr

023e6b98 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 23e6b98:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23e6b9a:	4604      	mov	r4, r0
  {
    if (default_ && clock_ == 0)
 23e6b9c:	7922      	ldrb	r2, [r4, #4]
  virtual size_t printTo(Print& p) const
 23e6b9e:	4608      	mov	r0, r1
    if (default_ && clock_ == 0)
 23e6ba0:	68a3      	ldr	r3, [r4, #8]
 23e6ba2:	b132      	cbz	r2, 23e6bb2 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
 23e6ba4:	b9a3      	cbnz	r3, 23e6bd0 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
 23e6ba6:	490b      	ldr	r1, [pc, #44]	; (23e6bd4 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
 23e6ba8:	b002      	add	sp, #8
 23e6baa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
 23e6bae:	f012 bd7e 	b.w	23f96ae <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 23e6bb2:	4a09      	ldr	r2, [pc, #36]	; (23e6bd8 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
 23e6bb4:	7b26      	ldrb	r6, [r4, #12]
 23e6bb6:	4d09      	ldr	r5, [pc, #36]	; (23e6bdc <_ZNK8particle11SPISettings7printToER5Print+0x44>)
 23e6bb8:	4909      	ldr	r1, [pc, #36]	; (23e6be0 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
 23e6bba:	7b64      	ldrb	r4, [r4, #13]
 23e6bbc:	2e01      	cmp	r6, #1
 23e6bbe:	bf18      	it	ne
 23e6bc0:	4629      	movne	r1, r5
 23e6bc2:	e9cd 1400 	strd	r1, r4, [sp]
 23e6bc6:	4907      	ldr	r1, [pc, #28]	; (23e6be4 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
 23e6bc8:	f7ff ffd8 	bl	23e6b7c <_ZN5Print6printfEPKcz>
  }
 23e6bcc:	b002      	add	sp, #8
 23e6bce:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 23e6bd0:	4a05      	ldr	r2, [pc, #20]	; (23e6be8 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
 23e6bd2:	e7ef      	b.n	23e6bb4 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
 23e6bd4:	023fd316 	.word	0x023fd316
 23e6bd8:	023fea19 	.word	0x023fea19
 23e6bdc:	023fd312 	.word	0x023fd312
 23e6be0:	023fd30e 	.word	0x023fd30e
 23e6be4:	023fd32c 	.word	0x023fd32c
 23e6be8:	023fd305 	.word	0x023fd305

023e6bec <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 23e6bec:	2000      	movs	r0, #0
 23e6bee:	f010 bd3b 	b.w	23f7668 <hal_timer_millis>
	...

023e6bf4 <_Z28raingauge1_interrupt_handlerv>:
 *  raingauge1_interrupt_handler() - This function is called whenever a magnet/interrupt is detected by the arduino
 * ======================================================================================================================
 */
#define RAINGAUGE1_IRQ_PIN A3
void raingauge1_interrupt_handler()
{
 23e6bf4:	b510      	push	{r4, lr}
  if ((System.millis() - raingauge1_interrupt_ltime) > 500) { // Count tip if a half second has gone by since last interrupt
 23e6bf6:	f7ff fff9 	bl	23e6bec <_ZN11SystemClass6millisEv>
 23e6bfa:	4c0e      	ldr	r4, [pc, #56]	; (23e6c34 <_Z28raingauge1_interrupt_handlerv+0x40>)
 23e6bfc:	e9d4 3200 	ldrd	r3, r2, [r4]
 23e6c00:	1ac0      	subs	r0, r0, r3
 23e6c02:	f240 13f5 	movw	r3, #501	; 0x1f5
 23e6c06:	eb61 0102 	sbc.w	r1, r1, r2
 23e6c0a:	4298      	cmp	r0, r3
 23e6c0c:	f171 0300 	sbcs.w	r3, r1, #0
 23e6c10:	d30f      	bcc.n	23e6c32 <_Z28raingauge1_interrupt_handlerv+0x3e>
    raingauge1_interrupt_ltime = System.millis();
 23e6c12:	f7ff ffeb 	bl	23e6bec <_ZN11SystemClass6millisEv>
    raingauge1_interrupt_count++;
 23e6c16:	4a08      	ldr	r2, [pc, #32]	; (23e6c38 <_Z28raingauge1_interrupt_handlerv+0x44>)
    raingauge1_interrupt_ltime = System.millis();
 23e6c18:	e9c4 0100 	strd	r0, r1, [r4]
    raingauge1_interrupt_count++;
 23e6c1c:	6813      	ldr	r3, [r2, #0]
    digitalWrite(LED_PIN, HIGH);
 23e6c1e:	2101      	movs	r1, #1
    raingauge1_interrupt_count++;
 23e6c20:	3301      	adds	r3, #1
 23e6c22:	6013      	str	r3, [r2, #0]
    digitalWrite(LED_PIN, HIGH);
 23e6c24:	4b05      	ldr	r3, [pc, #20]	; (23e6c3c <_Z28raingauge1_interrupt_handlerv+0x48>)
 23e6c26:	8818      	ldrh	r0, [r3, #0]
 23e6c28:	f013 fae3 	bl	23fa1f2 <digitalWrite>
    TurnLedOff = true;
 23e6c2c:	2201      	movs	r2, #1
 23e6c2e:	4b04      	ldr	r3, [pc, #16]	; (23e6c40 <_Z28raingauge1_interrupt_handlerv+0x4c>)
 23e6c30:	701a      	strb	r2, [r3, #0]
  }   
}
 23e6c32:	bd10      	pop	{r4, pc}
 23e6c34:	1007aa60 	.word	0x1007aa60
 23e6c38:	1007aa5c 	.word	0x1007aa5c
 23e6c3c:	1006a144 	.word	0x1006a144
 23e6c40:	1006a81b 	.word	0x1006a81b

023e6c44 <_Z28raingauge2_interrupt_handlerv>:
 *  raingauge2_interrupt_handler() - This function is called whenever a magnet/interrupt is detected by the arduino
 * ======================================================================================================================
 */
#define RAINGAUGE2_IRQ_PIN   A4
void raingauge2_interrupt_handler()
{
 23e6c44:	b510      	push	{r4, lr}
  if ((System.millis() - raingauge2_interrupt_ltime) > 500) { // Count tip if a half second has gone by since last interrupt
 23e6c46:	f7ff ffd1 	bl	23e6bec <_ZN11SystemClass6millisEv>
 23e6c4a:	4c0e      	ldr	r4, [pc, #56]	; (23e6c84 <_Z28raingauge2_interrupt_handlerv+0x40>)
 23e6c4c:	e9d4 3200 	ldrd	r3, r2, [r4]
 23e6c50:	1ac0      	subs	r0, r0, r3
 23e6c52:	f240 13f5 	movw	r3, #501	; 0x1f5
 23e6c56:	eb61 0102 	sbc.w	r1, r1, r2
 23e6c5a:	4298      	cmp	r0, r3
 23e6c5c:	f171 0300 	sbcs.w	r3, r1, #0
 23e6c60:	d30f      	bcc.n	23e6c82 <_Z28raingauge2_interrupt_handlerv+0x3e>
    raingauge2_interrupt_ltime = System.millis();
 23e6c62:	f7ff ffc3 	bl	23e6bec <_ZN11SystemClass6millisEv>
    raingauge2_interrupt_count++;
 23e6c66:	4a08      	ldr	r2, [pc, #32]	; (23e6c88 <_Z28raingauge2_interrupt_handlerv+0x44>)
    raingauge2_interrupt_ltime = System.millis();
 23e6c68:	e9c4 0100 	strd	r0, r1, [r4]
    raingauge2_interrupt_count++;
 23e6c6c:	6813      	ldr	r3, [r2, #0]
    digitalWrite(LED_PIN, HIGH);
 23e6c6e:	2101      	movs	r1, #1
    raingauge2_interrupt_count++;
 23e6c70:	3301      	adds	r3, #1
 23e6c72:	6013      	str	r3, [r2, #0]
    digitalWrite(LED_PIN, HIGH);
 23e6c74:	4b05      	ldr	r3, [pc, #20]	; (23e6c8c <_Z28raingauge2_interrupt_handlerv+0x48>)
 23e6c76:	8818      	ldrh	r0, [r3, #0]
 23e6c78:	f013 fabb 	bl	23fa1f2 <digitalWrite>
    TurnLedOff = true;
 23e6c7c:	2201      	movs	r2, #1
 23e6c7e:	4b04      	ldr	r3, [pc, #16]	; (23e6c90 <_Z28raingauge2_interrupt_handlerv+0x4c>)
 23e6c80:	701a      	strb	r2, [r3, #0]
  }   
}
 23e6c82:	bd10      	pop	{r4, pc}
 23e6c84:	1007aa78 	.word	0x1007aa78
 23e6c88:	1007aa70 	.word	0x1007aa70
 23e6c8c:	1006a144 	.word	0x1006a144
 23e6c90:	1006a81b 	.word	0x1006a81b

023e6c94 <_ZN5spark10JSONWriter4nameEPKc>:
inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
 23e6c94:	b513      	push	{r0, r1, r4, lr}
 23e6c96:	4604      	mov	r4, r0
    return this->name(name, strlen(name));
 23e6c98:	4608      	mov	r0, r1
 23e6c9a:	9101      	str	r1, [sp, #4]
 23e6c9c:	f7ff f9ac 	bl	23e5ff8 <strlen>
 23e6ca0:	4602      	mov	r2, r0
 23e6ca2:	4620      	mov	r0, r4
 23e6ca4:	9901      	ldr	r1, [sp, #4]
}
 23e6ca6:	b002      	add	sp, #8
 23e6ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->name(name, strlen(name));
 23e6cac:	f012 bb46 	b.w	23f933c <_ZN5spark10JSONWriter4nameEPKcj>

023e6cb0 <_ZN8FsVolume6existsEPKc>:
   *
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
 23e6cb0:	b500      	push	{lr}
 23e6cb2:	460a      	mov	r2, r1
    return m_fVol   ? m_fVol->exists(path)
 23e6cb4:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
  bool exists(const char* path) {
 23e6cb8:	b08f      	sub	sp, #60	; 0x3c
    return m_fVol   ? m_fVol->exists(path)
 23e6cba:	b149      	cbz	r1, 23e6cd0 <_ZN8FsVolume6existsEPKc+0x20>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
 23e6cbc:	2300      	movs	r3, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
 23e6cbe:	4668      	mov	r0, sp
 23e6cc0:	9300      	str	r3, [sp, #0]
 23e6cc2:	f00d fc6e 	bl	23f45a2 <_ZN7FatFile4openEP9FatVolumePKci>
           : m_xVol ? m_xVol->exists(path)
                    : false;
  }
 23e6cc6:	f000 0001 	and.w	r0, r0, #1
 23e6cca:	b00f      	add	sp, #60	; 0x3c
 23e6ccc:	f85d fb04 	ldr.w	pc, [sp], #4
           : m_xVol ? m_xVol->exists(path)
 23e6cd0:	f8d0 0484 	ldr.w	r0, [r0, #1156]	; 0x484
 23e6cd4:	2800      	cmp	r0, #0
 23e6cd6:	d0f6      	beq.n	23e6cc6 <_ZN8FsVolume6existsEPKc+0x16>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
 23e6cd8:	460b      	mov	r3, r1
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
 23e6cda:	910c      	str	r1, [sp, #48]	; 0x30
 23e6cdc:	4601      	mov	r1, r0
 23e6cde:	4668      	mov	r0, sp
 23e6ce0:	f00f faee 	bl	23f62c0 <_ZN9ExFatFile4openEP11ExFatVolumePKci>
 23e6ce4:	e7ef      	b.n	23e6cc6 <_ZN8FsVolume6existsEPKc+0x16>

023e6ce6 <_ZN8FsVolume6removeEPKc>:
   *
   * \param[in] path A path with a valid 8.3 DOS name for the file.
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
 23e6ce6:	b500      	push	{lr}
 23e6ce8:	460a      	mov	r2, r1
    return m_fVol   ? m_fVol->remove(path)
 23e6cea:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
  bool remove(const char* path) {
 23e6cee:	b08f      	sub	sp, #60	; 0x3c
    return m_fVol   ? m_fVol->remove(path)
 23e6cf0:	b171      	cbz	r1, 23e6d10 <_ZN8FsVolume6removeEPKc+0x2a>
 23e6cf2:	2300      	movs	r3, #0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
 23e6cf4:	4668      	mov	r0, sp
 23e6cf6:	9300      	str	r3, [sp, #0]
 23e6cf8:	2301      	movs	r3, #1
 23e6cfa:	f00d fc52 	bl	23f45a2 <_ZN7FatFile4openEP9FatVolumePKci>
 23e6cfe:	b110      	cbz	r0, 23e6d06 <_ZN8FsVolume6removeEPKc+0x20>
 23e6d00:	4668      	mov	r0, sp
 23e6d02:	f00e f9cb 	bl	23f509c <_ZN7FatFile6removeEv>
           : m_xVol ? m_xVol->remove(path)
                    : false;
  }
 23e6d06:	f000 0001 	and.w	r0, r0, #1
 23e6d0a:	b00f      	add	sp, #60	; 0x3c
 23e6d0c:	f85d fb04 	ldr.w	pc, [sp], #4
           : m_xVol ? m_xVol->remove(path)
 23e6d10:	f8d0 0484 	ldr.w	r0, [r0, #1156]	; 0x484
 23e6d14:	2800      	cmp	r0, #0
 23e6d16:	d0f6      	beq.n	23e6d06 <_ZN8FsVolume6removeEPKc+0x20>
 23e6d18:	910c      	str	r1, [sp, #48]	; 0x30
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
 23e6d1a:	2301      	movs	r3, #1
 23e6d1c:	4601      	mov	r1, r0
 23e6d1e:	4668      	mov	r0, sp
 23e6d20:	f00f face 	bl	23f62c0 <_ZN9ExFatFile4openEP11ExFatVolumePKci>
 23e6d24:	2800      	cmp	r0, #0
 23e6d26:	d0ee      	beq.n	23e6d06 <_ZN8FsVolume6removeEPKc+0x20>
 23e6d28:	4668      	mov	r0, sp
 23e6d2a:	f00f fb43 	bl	23f63b4 <_ZN9ExFatFile6removeEv>
 23e6d2e:	e7ea      	b.n	23e6d06 <_ZN8FsVolume6removeEPKc+0x20>

023e6d30 <_ZNK10FsBaseFile9availableEv>:
  int available() const {
 23e6d30:	b510      	push	{r4, lr}
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
 23e6d32:	6b83      	ldr	r3, [r0, #56]	; 0x38
 23e6d34:	b15b      	cbz	r3, 23e6d4e <_ZNK10FsBaseFile9availableEv+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
 23e6d36:	7818      	ldrb	r0, [r3, #0]
 23e6d38:	f010 0008 	ands.w	r0, r0, #8
 23e6d3c:	bf1e      	ittt	ne
 23e6d3e:	69d8      	ldrne	r0, [r3, #28]
 23e6d40:	695b      	ldrne	r3, [r3, #20]
 23e6d42:	1ac0      	subne	r0, r0, r3
    return n > INT_MAX ? INT_MAX : n;
 23e6d44:	2800      	cmp	r0, #0
 23e6d46:	bfb8      	it	lt
 23e6d48:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
  }
 23e6d4c:	bd10      	pop	{r4, pc}
 23e6d4e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
 23e6d50:	2800      	cmp	r0, #0
 23e6d52:	d0fb      	beq.n	23e6d4c <_ZNK10FsBaseFile9availableEv+0x1c>
    return n > INT_MAX ? INT_MAX : n;
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
 23e6d54:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 23e6d58:	f013 0308 	ands.w	r3, r3, #8
 23e6d5c:	d00e      	beq.n	23e6d7c <_ZNK10FsBaseFile9availableEv+0x4c>
 23e6d5e:	e9d0 1304 	ldrd	r1, r3, [r0, #16]
 23e6d62:	e9d0 2400 	ldrd	r2, r4, [r0]
 23e6d66:	1a88      	subs	r0, r1, r2
 23e6d68:	eb63 0304 	sbc.w	r3, r3, r4
    return n > INT_MAX ? INT_MAX : n;
 23e6d6c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 23e6d70:	f173 0300 	sbcs.w	r3, r3, #0
 23e6d74:	bf28      	it	cs
 23e6d76:	f06f 4000 	mvncs.w	r0, #2147483648	; 0x80000000
 23e6d7a:	e7e7      	b.n	23e6d4c <_ZNK10FsBaseFile9availableEv+0x1c>
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
 23e6d7c:	4618      	mov	r0, r3
 23e6d7e:	e7f5      	b.n	23e6d6c <_ZNK10FsBaseFile9availableEv+0x3c>

023e6d80 <_ZN10StreamFileI10FsBaseFileyE9availableEv>:
  int available() override { return BaseFile::available(); }
 23e6d80:	b508      	push	{r3, lr}
 23e6d82:	3010      	adds	r0, #16
 23e6d84:	f7ff ffd4 	bl	23e6d30 <_ZNK10FsBaseFile9availableEv>
 23e6d88:	bd08      	pop	{r3, pc}

023e6d8a <_ZNK10FsBaseFile8fileSizeEv>:
    return m_fFile ? m_fFile->fileSize() : m_xFile ? m_xFile->fileSize() : 0;
 23e6d8a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 23e6d8c:	b113      	cbz	r3, 23e6d94 <_ZNK10FsBaseFile8fileSizeEv+0xa>
 23e6d8e:	69d8      	ldr	r0, [r3, #28]
 23e6d90:	2100      	movs	r1, #0
 23e6d92:	4770      	bx	lr
 23e6d94:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 23e6d96:	b113      	cbz	r3, 23e6d9e <_ZNK10FsBaseFile8fileSizeEv+0x14>
   * If no data is read, fgets() returns zero for EOF or -1 if an error
   * occurred.
   */
  int fgets(char* str, int num, const char* delim = nullptr);
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const { return m_validLength; }
 23e6d98:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 23e6d9c:	4770      	bx	lr
 23e6d9e:	4618      	mov	r0, r3
 23e6da0:	e7f6      	b.n	23e6d90 <_ZNK10FsBaseFile8fileSizeEv+0x6>

023e6da2 <_ZNK10FsBaseFile6isOpenEv>:
  bool isOpen() const { return m_fFile || m_xFile; }
 23e6da2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 23e6da4:	b923      	cbnz	r3, 23e6db0 <_ZNK10FsBaseFile6isOpenEv+0xe>
 23e6da6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 23e6da8:	3800      	subs	r0, #0
 23e6daa:	bf18      	it	ne
 23e6dac:	2001      	movne	r0, #1
 23e6dae:	4770      	bx	lr
 23e6db0:	2001      	movs	r0, #1
 23e6db2:	4770      	bx	lr

023e6db4 <_ZN10FsBaseFile4readEv>:
  int read() {
 23e6db4:	b507      	push	{r0, r1, r2, lr}
    return m_fFile   ? m_fFile->read(buf, count)
 23e6db6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 23e6db8:	b153      	cbz	r3, 23e6dd0 <_ZN10FsBaseFile4readEv+0x1c>
 23e6dba:	2201      	movs	r2, #1
 23e6dbc:	4618      	mov	r0, r3
 23e6dbe:	f10d 0107 	add.w	r1, sp, #7
 23e6dc2:	f00d f9ad 	bl	23f4120 <_ZN7FatFile4readEPvj>
    return read(&b, 1) == 1 ? b : -1;
 23e6dc6:	2801      	cmp	r0, #1
 23e6dc8:	d104      	bne.n	23e6dd4 <_ZN10FsBaseFile4readEv+0x20>
 23e6dca:	f89d 0007 	ldrb.w	r0, [sp, #7]
 23e6dce:	e003      	b.n	23e6dd8 <_ZN10FsBaseFile4readEv+0x24>
 23e6dd0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
           : m_xFile ? m_xFile->read(buf, count)
 23e6dd2:	b920      	cbnz	r0, 23e6dde <_ZN10FsBaseFile4readEv+0x2a>
    return read(&b, 1) == 1 ? b : -1;
 23e6dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
 23e6dd8:	b003      	add	sp, #12
 23e6dda:	f85d fb04 	ldr.w	pc, [sp], #4
           : m_xFile ? m_xFile->read(buf, count)
 23e6dde:	2201      	movs	r2, #1
 23e6de0:	f10d 0107 	add.w	r1, sp, #7
 23e6de4:	f00e ff1e 	bl	23f5c24 <_ZN9ExFatFile4readEPvj>
 23e6de8:	e7ed      	b.n	23e6dc6 <_ZN10FsBaseFile4readEv+0x12>

023e6dea <_ZN10StreamFileI10FsBaseFileyE4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() override { return BaseFile::read(); }
 23e6dea:	b508      	push	{r3, lr}
 23e6dec:	3010      	adds	r0, #16
 23e6dee:	f7ff ffe1 	bl	23e6db4 <_ZN10FsBaseFile4readEv>
 23e6df2:	bd08      	pop	{r3, pc}

023e6df4 <_ZN10FsBaseFile5writeEPKvj>:
    return m_fFile   ? m_fFile->write(buf, count)
 23e6df4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 23e6df6:	b113      	cbz	r3, 23e6dfe <_ZN10FsBaseFile5writeEPKvj+0xa>
 23e6df8:	4618      	mov	r0, r3
 23e6dfa:	f00d bd5d 	b.w	23f48b8 <_ZN7FatFile5writeEPKvj>
 23e6dfe:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
           : m_xFile ? m_xFile->write(buf, count)
 23e6e00:	b108      	cbz	r0, 23e6e06 <_ZN10FsBaseFile5writeEPKvj+0x12>
 23e6e02:	f00f bd3d 	b.w	23f6880 <_ZN9ExFatFile5writeEPKvj>
  }
 23e6e06:	4770      	bx	lr

023e6e08 <_ZN10StreamFileI10FsBaseFileyE5writeEPKhj>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) override {
 23e6e08:	b508      	push	{r3, lr}
    return BaseFile::write(buffer, size);
 23e6e0a:	3010      	adds	r0, #16
 23e6e0c:	f7ff fff2 	bl	23e6df4 <_ZN10FsBaseFile5writeEPKvj>
  }
 23e6e10:	bd08      	pop	{r3, pc}

023e6e12 <_ZN10StreamFileI10FsBaseFileyE5writeEh>:
  size_t write(uint8_t b) override { return BaseFile::write(b); }
 23e6e12:	b507      	push	{r0, r1, r2, lr}
  size_t write(uint8_t b) { return write(&b, 1); }
 23e6e14:	2201      	movs	r2, #1
 23e6e16:	f88d 1007 	strb.w	r1, [sp, #7]
 23e6e1a:	3010      	adds	r0, #16
 23e6e1c:	f10d 0107 	add.w	r1, sp, #7
 23e6e20:	f7ff ffe8 	bl	23e6df4 <_ZN10FsBaseFile5writeEPKvj>
 23e6e24:	b003      	add	sp, #12
 23e6e26:	f85d fb04 	ldr.w	pc, [sp], #4

023e6e2a <_Z16I2C_Device_Existh>:
 * 
 *  The i2c_scanner uses the return value of the Write.endTransmisstion to see 
 *  if a device did acknowledge to the address.
 *=======================================================================================================================
 */
bool I2C_Device_Exist(byte address) {
 23e6e2a:	b507      	push	{r0, r1, r2, lr}
 23e6e2c:	9001      	str	r0, [sp, #4]
  byte error;

  Wire.begin();                     // Connect to I2C as Master (no addess is passed to signal being a slave)
 23e6e2e:	f013 fa53 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e6e32:	f012 f817 	bl	23f8e64 <_ZN7TwoWire5beginEv>

  Wire.beginTransmission(address);  // Begin a transmission to the I2C slave device with the given address. 
 23e6e36:	f013 fa4f 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e6e3a:	9901      	ldr	r1, [sp, #4]
 23e6e3c:	f012 f83c 	bl	23f8eb8 <_ZN7TwoWire17beginTransmissionEh>
                                    // Subsequently, queue bytes for transmission with the write() function 
                                    // and transmit them by calling endTransmission(). 

  error = Wire.endTransmission();   // Ends a transmission to a slave device that was begun by beginTransmission() 
 23e6e40:	f013 fa4a 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e6e44:	f012 f843 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>
  else {
    // sprintf (msgbuf, "I2CERR: %d", error);
    // Output (msgbuf);
    return (false);
  }
}
 23e6e48:	fab0 f080 	clz	r0, r0
 23e6e4c:	0940      	lsrs	r0, r0, #5
 23e6e4e:	b003      	add	sp, #12
 23e6e50:	f85d fb04 	ldr.w	pc, [sp], #4

023e6e54 <_Z5Blinkii>:
 * ======================================================================================================================
 * Blink() - Count, delay between, delay at end
 * ======================================================================================================================
 */
void Blink(int count, int between)
{
 23e6e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23e6e56:	4606      	mov	r6, r0
 23e6e58:	460c      	mov	r4, r1
  int c;

  for (c=0; c<count; c++) {
 23e6e5a:	2500      	movs	r5, #0
    digitalWrite(LED_PIN, HIGH);
 23e6e5c:	4f09      	ldr	r7, [pc, #36]	; (23e6e84 <_Z5Blinkii+0x30>)
  for (c=0; c<count; c++) {
 23e6e5e:	42b5      	cmp	r5, r6
 23e6e60:	da0f      	bge.n	23e6e82 <_Z5Blinkii+0x2e>
    digitalWrite(LED_PIN, HIGH);
 23e6e62:	2101      	movs	r1, #1
 23e6e64:	8838      	ldrh	r0, [r7, #0]
 23e6e66:	f013 f9c4 	bl	23fa1f2 <digitalWrite>
    delay(between);
 23e6e6a:	4620      	mov	r0, r4
 23e6e6c:	f011 fa2a 	bl	23f82c4 <delay>
    digitalWrite(LED_PIN, LOW);
 23e6e70:	2100      	movs	r1, #0
 23e6e72:	8838      	ldrh	r0, [r7, #0]
 23e6e74:	f013 f9bd 	bl	23fa1f2 <digitalWrite>
    delay(between);
 23e6e78:	4620      	mov	r0, r4
 23e6e7a:	f011 fa23 	bl	23f82c4 <delay>
  for (c=0; c<count; c++) {
 23e6e7e:	3501      	adds	r5, #1
 23e6e80:	e7ed      	b.n	23e6e5e <_Z5Blinkii+0xa>
  }
}
 23e6e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23e6e84:	1006a144 	.word	0x1006a144

023e6e88 <_Z6mysortPjj>:
/*
 * ======================================================================================================================
 * mysort()
 * ======================================================================================================================
 */
void mysort(unsigned int a[], unsigned int n) { 
 23e6e88:	b530      	push	{r4, r5, lr}
  unsigned int i, j;

  for(i = 0;i < n-1;i++) {
 23e6e8a:	3901      	subs	r1, #1
 23e6e8c:	b169      	cbz	r1, 23e6eaa <_Z6mysortPjj+0x22>
 23e6e8e:	4603      	mov	r3, r0
    for(j = 0;j < n-i-1;j++) {
 23e6e90:	2200      	movs	r2, #0
      if(a[j] > a[j+1])
 23e6e92:	681c      	ldr	r4, [r3, #0]
 23e6e94:	685d      	ldr	r5, [r3, #4]
 23e6e96:	3201      	adds	r2, #1
 23e6e98:	42ac      	cmp	r4, r5
 23e6e9a:	d901      	bls.n	23e6ea0 <_Z6mysortPjj+0x18>
  *q=t;
 23e6e9c:	e9c3 5400 	strd	r5, r4, [r3]
    for(j = 0;j < n-i-1;j++) {
 23e6ea0:	428a      	cmp	r2, r1
 23e6ea2:	f103 0304 	add.w	r3, r3, #4
 23e6ea6:	d3f4      	bcc.n	23e6e92 <_Z6mysortPjj+0xa>
 23e6ea8:	e7ef      	b.n	23e6e8a <_Z6mysortPjj+0x2>
        myswap(&a[j],&a[j+1]);
    }
  }
}
 23e6eaa:	bd30      	pop	{r4, r5, pc}

023e6eac <_Z13JPO_ClearBitsv>:
 * ======================================================================================================================
 * JPO_ClearBits() - Clear System Status Bits related to initialization
 * ======================================================================================================================
 */
void JPO_ClearBits() {
  if (JustPoweredOn) {
 23e6eac:	4b08      	ldr	r3, [pc, #32]	; (23e6ed0 <_Z13JPO_ClearBitsv+0x24>)
 23e6eae:	781a      	ldrb	r2, [r3, #0]
 23e6eb0:	b162      	cbz	r2, 23e6ecc <_Z13JPO_ClearBitsv+0x20>
    JustPoweredOn = false;
 23e6eb2:	2200      	movs	r2, #0
 23e6eb4:	701a      	strb	r2, [r3, #0]
    SystemStatusBits &= ~SSB_BLX;     // Turn Off BLUX30 Not Found Bit
    SystemStatusBits &= ~SSB_LPS_1;   // Turn Off LPS35HW Not Found Bit
    SystemStatusBits &= ~SSB_LPS_2;   // Turn Off LPS35HW Not Found Bit
    SystemStatusBits &= ~SSB_TLW;     // Turn Off Tinovi Leaf Wetness Not Found Bit
    SystemStatusBits &= ~SSB_TSM;     // Turn Off Tinovi Soil Moisture Not Found Bit
    SystemStatusBits &= ~SSB_TMSM;    // Turn Off Tinovi MultiLevel Soil Moisture Not Found Bit
 23e6eb6:	4a07      	ldr	r2, [pc, #28]	; (23e6ed4 <_Z13JPO_ClearBitsv+0x28>)
 23e6eb8:	6813      	ldr	r3, [r2, #0]
 23e6eba:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 23e6ebe:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 23e6ec2:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
 23e6ec6:	f023 0309 	bic.w	r3, r3, #9
 23e6eca:	6013      	str	r3, [r2, #0]
  }
}
 23e6ecc:	4770      	bx	lr
 23e6ece:	bf00      	nop
 23e6ed0:	1006a142 	.word	0x1006a142
 23e6ed4:	1006a1cc 	.word	0x1006a1cc

023e6ed8 <_Z9OLED_spinv>:
/*
 * ======================================================================================================================
 * OLED_spin() 
 * ======================================================================================================================
 */
void OLED_spin() {
 23e6ed8:	b570      	push	{r4, r5, r6, lr}
  static int spin=0;
    
  if (DisplayEnabled) {
 23e6eda:	4b24      	ldr	r3, [pc, #144]	; (23e6f6c <_Z9OLED_spinv+0x94>)
 23e6edc:	781b      	ldrb	r3, [r3, #0]
 23e6ede:	2b00      	cmp	r3, #0
 23e6ee0:	d038      	beq.n	23e6f54 <_Z9OLED_spinv+0x7c>
    if (OLED32) {
 23e6ee2:	4e23      	ldr	r6, [pc, #140]	; (23e6f70 <_Z9OLED_spinv+0x98>)
 23e6ee4:	4d23      	ldr	r5, [pc, #140]	; (23e6f74 <_Z9OLED_spinv+0x9c>)
 23e6ee6:	6833      	ldr	r3, [r6, #0]
 23e6ee8:	2b3c      	cmp	r3, #60	; 0x3c
 23e6eea:	f04f 0301 	mov.w	r3, #1
 23e6eee:	d112      	bne.n	23e6f16 <_Z9OLED_spinv+0x3e>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
 23e6ef0:	4c21      	ldr	r4, [pc, #132]	; (23e6f78 <_Z9OLED_spinv+0xa0>)
    @param   c   16-bit 5-6-5 Color to draw text with
    @param   bg  16-bit 5-6-5 Color to draw background/fill with
  */
  /**********************************************************************/
  void setTextColor(uint16_t c, uint16_t bg) {
    textcolor = c;
 23e6ef2:	e9c4 5304 	strd	r5, r3, [r4, #16]
      display64.setTextColor(WHITE, BLACK); // Draw 'inverse' text
      display64.setCursor(120,24);
      display64.print(" ");
      display64.setCursor(120,24);
      display64.setCursor(120,56);
      display64.print(" ");
 23e6ef6:	4620      	mov	r0, r4
 23e6ef8:	4920      	ldr	r1, [pc, #128]	; (23e6f7c <_Z9OLED_spinv+0xa4>)
 23e6efa:	f012 fbd8 	bl	23f96ae <_ZN5Print5printEPKc>
    cursor_x = x;
 23e6efe:	6125      	str	r5, [r4, #16]
      display64.setCursor(120,56);       
    } 
    switch (spin++) {
 23e6f00:	4c1f      	ldr	r4, [pc, #124]	; (23e6f80 <_Z9OLED_spinv+0xa8>)
 23e6f02:	6822      	ldr	r2, [r4, #0]
 23e6f04:	1c53      	adds	r3, r2, #1
 23e6f06:	6023      	str	r3, [r4, #0]
 23e6f08:	4b1e      	ldr	r3, [pc, #120]	; (23e6f84 <_Z9OLED_spinv+0xac>)
 23e6f0a:	2a03      	cmp	r2, #3
 23e6f0c:	d80f      	bhi.n	23e6f2e <_Z9OLED_spinv+0x56>
 23e6f0e:	e8df f002 	tbb	[pc, r2]
 23e6f12:	220c      	.short	0x220c
 23e6f14:	2624      	.short	0x2624
 23e6f16:	4c1c      	ldr	r4, [pc, #112]	; (23e6f88 <_Z9OLED_spinv+0xb0>)
      display64.print(" ");
 23e6f18:	4918      	ldr	r1, [pc, #96]	; (23e6f7c <_Z9OLED_spinv+0xa4>)
    textcolor = c;
 23e6f1a:	e9c4 5304 	strd	r5, r3, [r4, #16]
    cursor_x = x;
 23e6f1e:	4d1b      	ldr	r5, [pc, #108]	; (23e6f8c <_Z9OLED_spinv+0xb4>)
 23e6f20:	4620      	mov	r0, r4
 23e6f22:	f012 fbc4 	bl	23f96ae <_ZN5Print5printEPKc>
 23e6f26:	6125      	str	r5, [r4, #16]
 23e6f28:	e7e5      	b.n	23e6ef6 <_Z9OLED_spinv+0x1e>
      case 0 : msgp = (char *) "|"; break;
 23e6f2a:	4a19      	ldr	r2, [pc, #100]	; (23e6f90 <_Z9OLED_spinv+0xb8>)
      case 1 : msgp = (char *) "/"; break;
      case 2 : msgp = (char *) "-"; break;
      case 3 : msgp = (char *) "\\"; break;
 23e6f2c:	601a      	str	r2, [r3, #0]
    }
    if (OLED32) {
      display32.print(msgp);
 23e6f2e:	6819      	ldr	r1, [r3, #0]
    if (OLED32) {
 23e6f30:	6833      	ldr	r3, [r6, #0]
 23e6f32:	2b3c      	cmp	r3, #60	; 0x3c
 23e6f34:	d115      	bne.n	23e6f62 <_Z9OLED_spinv+0x8a>
      display32.print(msgp);
 23e6f36:	4810      	ldr	r0, [pc, #64]	; (23e6f78 <_Z9OLED_spinv+0xa0>)
 23e6f38:	f012 fbb9 	bl	23f96ae <_ZN5Print5printEPKc>
      display32.display();
 23e6f3c:	480e      	ldr	r0, [pc, #56]	; (23e6f78 <_Z9OLED_spinv+0xa0>)
    }
    else {
      display64.print(msgp);
      display64.display();
 23e6f3e:	f00b fe29 	bl	23f2b94 <_ZN16Adafruit_SSD13067displayEv>
    }
    spin %= 4;
 23e6f42:	6823      	ldr	r3, [r4, #0]
 23e6f44:	425a      	negs	r2, r3
 23e6f46:	f002 0203 	and.w	r2, r2, #3
 23e6f4a:	f003 0303 	and.w	r3, r3, #3
 23e6f4e:	bf58      	it	pl
 23e6f50:	4253      	negpl	r3, r2
 23e6f52:	6023      	str	r3, [r4, #0]
  }
}
 23e6f54:	bd70      	pop	{r4, r5, r6, pc}
      case 1 : msgp = (char *) "/"; break;
 23e6f56:	4a0f      	ldr	r2, [pc, #60]	; (23e6f94 <_Z9OLED_spinv+0xbc>)
 23e6f58:	e7e8      	b.n	23e6f2c <_Z9OLED_spinv+0x54>
      case 2 : msgp = (char *) "-"; break;
 23e6f5a:	4a0f      	ldr	r2, [pc, #60]	; (23e6f98 <_Z9OLED_spinv+0xc0>)
 23e6f5c:	e7e6      	b.n	23e6f2c <_Z9OLED_spinv+0x54>
      case 3 : msgp = (char *) "\\"; break;
 23e6f5e:	4a0f      	ldr	r2, [pc, #60]	; (23e6f9c <_Z9OLED_spinv+0xc4>)
 23e6f60:	e7e4      	b.n	23e6f2c <_Z9OLED_spinv+0x54>
      display64.print(msgp);
 23e6f62:	4809      	ldr	r0, [pc, #36]	; (23e6f88 <_Z9OLED_spinv+0xb0>)
 23e6f64:	f012 fba3 	bl	23f96ae <_ZN5Print5printEPKc>
      display64.display();
 23e6f68:	4807      	ldr	r0, [pc, #28]	; (23e6f88 <_Z9OLED_spinv+0xb0>)
 23e6f6a:	e7e8      	b.n	23e6f3e <_Z9OLED_spinv+0x66>
 23e6f6c:	1006a141 	.word	0x1006a141
 23e6f70:	1007aa20 	.word	0x1007aa20
 23e6f74:	00180078 	.word	0x00180078
 23e6f78:	1006ad8c 	.word	0x1006ad8c
 23e6f7c:	023fdbfc 	.word	0x023fdbfc
 23e6f80:	1006a820 	.word	0x1006a820
 23e6f84:	1006f540 	.word	0x1006f540
 23e6f88:	1006ae00 	.word	0x1006ae00
 23e6f8c:	00380078 	.word	0x00380078
 23e6f90:	023fd349 	.word	0x023fd349
 23e6f94:	023fd34b 	.word	0x023fd34b
 23e6f98:	023fd34d 	.word	0x023fd34d
 23e6f9c:	023fd34f 	.word	0x023fd34f

023e6fa0 <_Z11OLED_updatev>:
/*
 * ======================================================================================================================
 * OLED_update() -- Output oled in memory map to display
 * ======================================================================================================================
 */
void OLED_update() {  
 23e6fa0:	b538      	push	{r3, r4, r5, lr}
  if (DisplayEnabled) {
 23e6fa2:	4b32      	ldr	r3, [pc, #200]	; (23e706c <_Z11OLED_updatev+0xcc>)
 23e6fa4:	781b      	ldrb	r3, [r3, #0]
 23e6fa6:	2b00      	cmp	r3, #0
 23e6fa8:	d05f      	beq.n	23e706a <_Z11OLED_updatev+0xca>
    if (OLED32) {
 23e6faa:	4b31      	ldr	r3, [pc, #196]	; (23e7070 <_Z11OLED_updatev+0xd0>)
 23e6fac:	2500      	movs	r5, #0
 23e6fae:	681b      	ldr	r3, [r3, #0]
 23e6fb0:	2b3c      	cmp	r3, #60	; 0x3c
 23e6fb2:	d122      	bne.n	23e6ffa <_Z11OLED_updatev+0x5a>
      display32.clearDisplay();
 23e6fb4:	4c2f      	ldr	r4, [pc, #188]	; (23e7074 <_Z11OLED_updatev+0xd4>)
 23e6fb6:	4620      	mov	r0, r4
 23e6fb8:	f00b fb21 	bl	23f25fe <_ZN16Adafruit_SSD130612clearDisplayEv>
      display32.setCursor(0,0);             // Start at top-left corner
      display32.print(oled_lines [0]);
 23e6fbc:	492e      	ldr	r1, [pc, #184]	; (23e7078 <_Z11OLED_updatev+0xd8>)
 23e6fbe:	4620      	mov	r0, r4
 23e6fc0:	6125      	str	r5, [r4, #16]
 23e6fc2:	f012 fb74 	bl	23f96ae <_ZN5Print5printEPKc>
 23e6fc6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
      display32.setCursor(0,8);
      display32.print(oled_lines [1]);
 23e6fca:	492c      	ldr	r1, [pc, #176]	; (23e707c <_Z11OLED_updatev+0xdc>)
 23e6fcc:	6123      	str	r3, [r4, #16]
 23e6fce:	4620      	mov	r0, r4
 23e6fd0:	f012 fb6d 	bl	23f96ae <_ZN5Print5printEPKc>
 23e6fd4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
      display32.setCursor(0,16);
      display32.print(oled_lines [2]);
 23e6fd8:	4929      	ldr	r1, [pc, #164]	; (23e7080 <_Z11OLED_updatev+0xe0>)
 23e6fda:	6123      	str	r3, [r4, #16]
 23e6fdc:	4620      	mov	r0, r4
 23e6fde:	f012 fb66 	bl	23f96ae <_ZN5Print5printEPKc>
 23e6fe2:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
      display32.setCursor(0,24);  
      display32.print(oled_lines [3]);
 23e6fe6:	4927      	ldr	r1, [pc, #156]	; (23e7084 <_Z11OLED_updatev+0xe4>)
 23e6fe8:	6123      	str	r3, [r4, #16]
      display64.setCursor(0,40);  
      display64.print(oled_lines [5]);
      display64.setCursor(0,48);  
      display64.print(oled_lines [6]);
      display64.setCursor(0,56);  
      display64.print(oled_lines [7]);
 23e6fea:	4620      	mov	r0, r4
 23e6fec:	f012 fb5f 	bl	23f96ae <_ZN5Print5printEPKc>
      display64.display();
 23e6ff0:	4620      	mov	r0, r4
     
    }
  }
}
 23e6ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      display64.display();
 23e6ff6:	f00b bdcd 	b.w	23f2b94 <_ZN16Adafruit_SSD13067displayEv>
      display64.clearDisplay();
 23e6ffa:	4c23      	ldr	r4, [pc, #140]	; (23e7088 <_Z11OLED_updatev+0xe8>)
 23e6ffc:	4620      	mov	r0, r4
 23e6ffe:	f00b fafe 	bl	23f25fe <_ZN16Adafruit_SSD130612clearDisplayEv>
      display64.print(oled_lines [0]);
 23e7002:	491d      	ldr	r1, [pc, #116]	; (23e7078 <_Z11OLED_updatev+0xd8>)
 23e7004:	4620      	mov	r0, r4
 23e7006:	6125      	str	r5, [r4, #16]
 23e7008:	f012 fb51 	bl	23f96ae <_ZN5Print5printEPKc>
 23e700c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
      display64.print(oled_lines [1]);
 23e7010:	491a      	ldr	r1, [pc, #104]	; (23e707c <_Z11OLED_updatev+0xdc>)
 23e7012:	6123      	str	r3, [r4, #16]
 23e7014:	4620      	mov	r0, r4
 23e7016:	f012 fb4a 	bl	23f96ae <_ZN5Print5printEPKc>
 23e701a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
      display64.print(oled_lines [2]);
 23e701e:	4918      	ldr	r1, [pc, #96]	; (23e7080 <_Z11OLED_updatev+0xe0>)
 23e7020:	6123      	str	r3, [r4, #16]
 23e7022:	4620      	mov	r0, r4
 23e7024:	f012 fb43 	bl	23f96ae <_ZN5Print5printEPKc>
 23e7028:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
      display64.print(oled_lines [3]);
 23e702c:	4915      	ldr	r1, [pc, #84]	; (23e7084 <_Z11OLED_updatev+0xe4>)
 23e702e:	6123      	str	r3, [r4, #16]
 23e7030:	4620      	mov	r0, r4
 23e7032:	f012 fb3c 	bl	23f96ae <_ZN5Print5printEPKc>
 23e7036:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
      display64.print(oled_lines [4]);
 23e703a:	4914      	ldr	r1, [pc, #80]	; (23e708c <_Z11OLED_updatev+0xec>)
 23e703c:	6123      	str	r3, [r4, #16]
 23e703e:	4620      	mov	r0, r4
 23e7040:	f012 fb35 	bl	23f96ae <_ZN5Print5printEPKc>
 23e7044:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
      display64.print(oled_lines [5]);
 23e7048:	4911      	ldr	r1, [pc, #68]	; (23e7090 <_Z11OLED_updatev+0xf0>)
 23e704a:	6123      	str	r3, [r4, #16]
 23e704c:	4620      	mov	r0, r4
 23e704e:	f012 fb2e 	bl	23f96ae <_ZN5Print5printEPKc>
 23e7052:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
      display64.print(oled_lines [6]);
 23e7056:	490f      	ldr	r1, [pc, #60]	; (23e7094 <_Z11OLED_updatev+0xf4>)
 23e7058:	6123      	str	r3, [r4, #16]
 23e705a:	4620      	mov	r0, r4
 23e705c:	f012 fb27 	bl	23f96ae <_ZN5Print5printEPKc>
 23e7060:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
      display64.print(oled_lines [7]);
 23e7064:	490c      	ldr	r1, [pc, #48]	; (23e7098 <_Z11OLED_updatev+0xf8>)
 23e7066:	6123      	str	r3, [r4, #16]
 23e7068:	e7bf      	b.n	23e6fea <_Z11OLED_updatev+0x4a>
}
 23e706a:	bd38      	pop	{r3, r4, r5, pc}
 23e706c:	1006a141 	.word	0x1006a141
 23e7070:	1007aa20 	.word	0x1007aa20
 23e7074:	1006ad8c 	.word	0x1006ad8c
 23e7078:	1007a968 	.word	0x1007a968
 23e707c:	1007a97f 	.word	0x1007a97f
 23e7080:	1007a996 	.word	0x1007a996
 23e7084:	1007a9ad 	.word	0x1007a9ad
 23e7088:	1006ae00 	.word	0x1006ae00
 23e708c:	1007a9c4 	.word	0x1007a9c4
 23e7090:	1007a9db 	.word	0x1007a9db
 23e7094:	1007a9f2 	.word	0x1007a9f2
 23e7098:	1007aa09 	.word	0x1007aa09

023e709c <_Z10OLED_writePKc>:
/*
 * ======================================================================================================================
 * OLED_write() 
 * ======================================================================================================================
 */
void OLED_write(const char *str) {
 23e709c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int c, len, bottom_line = 3;
  
  if (DisplayEnabled) {
 23e709e:	4b36      	ldr	r3, [pc, #216]	; (23e7178 <_Z10OLED_writePKc+0xdc>)
void OLED_write(const char *str) {
 23e70a0:	4604      	mov	r4, r0
  if (DisplayEnabled) {
 23e70a2:	781b      	ldrb	r3, [r3, #0]
 23e70a4:	2b00      	cmp	r3, #0
 23e70a6:	d066      	beq.n	23e7176 <_Z10OLED_writePKc+0xda>
    // move lines up
    for (c=0; c<=21; c++) {
      oled_lines [0][c] = oled_lines [1][c];
      oled_lines [1][c] = oled_lines [2][c];
      oled_lines [2][c] = oled_lines [3][c];
      if (OLED64) {
 23e70a8:	4b34      	ldr	r3, [pc, #208]	; (23e717c <_Z10OLED_writePKc+0xe0>)
 23e70aa:	6819      	ldr	r1, [r3, #0]
      oled_lines [0][c] = oled_lines [1][c];
 23e70ac:	4b34      	ldr	r3, [pc, #208]	; (23e7180 <_Z10OLED_writePKc+0xe4>)
 23e70ae:	f1a3 0217 	sub.w	r2, r3, #23
 23e70b2:	4615      	mov	r5, r2
 23e70b4:	f103 0014 	add.w	r0, r3, #20
 23e70b8:	f853 6b04 	ldr.w	r6, [r3], #4
 23e70bc:	4283      	cmp	r3, r0
 23e70be:	f842 6b04 	str.w	r6, [r2], #4
 23e70c2:	d1f9      	bne.n	23e70b8 <_Z10OLED_writePKc+0x1c>
 23e70c4:	881b      	ldrh	r3, [r3, #0]
 23e70c6:	8013      	strh	r3, [r2, #0]
      oled_lines [1][c] = oled_lines [2][c];
 23e70c8:	4b2e      	ldr	r3, [pc, #184]	; (23e7184 <_Z10OLED_writePKc+0xe8>)
 23e70ca:	f1a3 0217 	sub.w	r2, r3, #23
 23e70ce:	f103 0014 	add.w	r0, r3, #20
 23e70d2:	f853 6b04 	ldr.w	r6, [r3], #4
 23e70d6:	4283      	cmp	r3, r0
 23e70d8:	f842 6b04 	str.w	r6, [r2], #4
 23e70dc:	d1f9      	bne.n	23e70d2 <_Z10OLED_writePKc+0x36>
 23e70de:	881b      	ldrh	r3, [r3, #0]
 23e70e0:	8013      	strh	r3, [r2, #0]
      oled_lines [2][c] = oled_lines [3][c];
 23e70e2:	4b29      	ldr	r3, [pc, #164]	; (23e7188 <_Z10OLED_writePKc+0xec>)
 23e70e4:	f1a3 0217 	sub.w	r2, r3, #23
 23e70e8:	f103 0014 	add.w	r0, r3, #20
 23e70ec:	f853 6b04 	ldr.w	r6, [r3], #4
 23e70f0:	4283      	cmp	r3, r0
 23e70f2:	f842 6b04 	str.w	r6, [r2], #4
 23e70f6:	d1f9      	bne.n	23e70ec <_Z10OLED_writePKc+0x50>
 23e70f8:	881b      	ldrh	r3, [r3, #0]
  int c, len, bottom_line = 3;
 23e70fa:	2603      	movs	r6, #3
      oled_lines [2][c] = oled_lines [3][c];
 23e70fc:	8013      	strh	r3, [r2, #0]
    for (c=0; c<=21; c++) {
 23e70fe:	2200      	movs	r2, #0
 23e7100:	4b22      	ldr	r3, [pc, #136]	; (23e718c <_Z10OLED_writePKc+0xf0>)
      if (OLED64) {
 23e7102:	293d      	cmp	r1, #61	; 0x3d
 23e7104:	d110      	bne.n	23e7128 <_Z10OLED_writePKc+0x8c>
        oled_lines [3][c] = oled_lines [4][c];
        oled_lines [4][c] = oled_lines [5][c];
        oled_lines [5][c] = oled_lines [6][c];  
        oled_lines [6][c] = oled_lines [7][c];  
        bottom_line = 7;          
 23e7106:	2607      	movs	r6, #7
        oled_lines [3][c] = oled_lines [4][c];
 23e7108:	f893 005c 	ldrb.w	r0, [r3, #92]	; 0x5c
 23e710c:	f883 0045 	strb.w	r0, [r3, #69]	; 0x45
        oled_lines [4][c] = oled_lines [5][c];
 23e7110:	f893 0073 	ldrb.w	r0, [r3, #115]	; 0x73
 23e7114:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
        oled_lines [5][c] = oled_lines [6][c];  
 23e7118:	f893 008a 	ldrb.w	r0, [r3, #138]	; 0x8a
 23e711c:	f883 0073 	strb.w	r0, [r3, #115]	; 0x73
        oled_lines [6][c] = oled_lines [7][c];  
 23e7120:	f893 00a1 	ldrb.w	r0, [r3, #161]	; 0xa1
 23e7124:	f883 008a 	strb.w	r0, [r3, #138]	; 0x8a
    for (c=0; c<=21; c++) {
 23e7128:	3201      	adds	r2, #1
 23e712a:	2a16      	cmp	r2, #22
 23e712c:	f103 0301 	add.w	r3, r3, #1
 23e7130:	d1e7      	bne.n	23e7102 <_Z10OLED_writePKc+0x66>
      }
    }

    // check length on new output line string
    len = strlen (str);
 23e7132:	4620      	mov	r0, r4
 23e7134:	f7fe ff60 	bl	23e5ff8 <strlen>
    if (len>21) {
 23e7138:	2217      	movs	r2, #23
 23e713a:	2815      	cmp	r0, #21
 23e713c:	bfa8      	it	ge
 23e713e:	2015      	movge	r0, #21
      len = 21;
    }
    for (c=0; c<=len; c++) {
 23e7140:	4372      	muls	r2, r6
 23e7142:	1e63      	subs	r3, r4, #1
 23e7144:	18a9      	adds	r1, r5, r2
 23e7146:	4404      	add	r4, r0
      oled_lines [bottom_line][c] = *(str+c);
 23e7148:	f813 7f01 	ldrb.w	r7, [r3, #1]!
    for (c=0; c<=len; c++) {
 23e714c:	42a3      	cmp	r3, r4
      oled_lines [bottom_line][c] = *(str+c);
 23e714e:	f801 7b01 	strb.w	r7, [r1], #1
    for (c=0; c<=len; c++) {
 23e7152:	d1f9      	bne.n	23e7148 <_Z10OLED_writePKc+0xac>
 23e7154:	1c43      	adds	r3, r0, #1
    }

    // Adding Padding
    for (;c<=21; c++) {
      oled_lines [bottom_line][c] = ' ';
 23e7156:	4413      	add	r3, r2
 23e7158:	2120      	movs	r1, #32
 23e715a:	f1c0 0215 	rsb	r2, r0, #21
 23e715e:	18e8      	adds	r0, r5, r3
 23e7160:	f015 fe55 	bl	23fce0e <memset>
    }
    oled_lines [bottom_line][22] = (char) NULL;
 23e7164:	2317      	movs	r3, #23
 23e7166:	2200      	movs	r2, #0
 23e7168:	fb03 5306 	mla	r3, r3, r6, r5
 23e716c:	759a      	strb	r2, [r3, #22]
    
    OLED_update();
  }
}
 23e716e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    OLED_update();
 23e7172:	f7ff bf15 	b.w	23e6fa0 <_Z11OLED_updatev>
}
 23e7176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23e7178:	1006a141 	.word	0x1006a141
 23e717c:	1007aa20 	.word	0x1007aa20
 23e7180:	1007a97f 	.word	0x1007a97f
 23e7184:	1007a996 	.word	0x1007a996
 23e7188:	1007a9ad 	.word	0x1007a9ad
 23e718c:	1007a968 	.word	0x1007a968

023e7190 <_Z12Serial_writePKc>:
/*
 * ======================================================================================================================
 * Serial_write() 
 * ======================================================================================================================
 */
void Serial_write(const char *str) {
 23e7190:	b507      	push	{r0, r1, r2, lr}
  if (SerialConsoleEnabled) {
 23e7192:	4b07      	ldr	r3, [pc, #28]	; (23e71b0 <_Z12Serial_writePKc+0x20>)
 23e7194:	781b      	ldrb	r3, [r3, #0]
 23e7196:	b143      	cbz	r3, 23e71aa <_Z12Serial_writePKc+0x1a>
 23e7198:	9001      	str	r0, [sp, #4]
    Serial.println(str);
 23e719a:	f012 fead 	bl	23f9ef8 <_Z16_fetch_usbserialv>
 23e719e:	9901      	ldr	r1, [sp, #4]
  }
}
 23e71a0:	b003      	add	sp, #12
 23e71a2:	f85d eb04 	ldr.w	lr, [sp], #4
    Serial.println(str);
 23e71a6:	f012 ba99 	b.w	23f96dc <_ZN5Print7printlnEPKc>
}
 23e71aa:	b003      	add	sp, #12
 23e71ac:	f85d fb04 	ldr.w	pc, [sp], #4
 23e71b0:	1006a80b 	.word	0x1006a80b

023e71b4 <_Z14Serial_writelnPKc>:
/*
 * ======================================================================================================================
 * Serial_writeln() 
 * ======================================================================================================================
 */
void Serial_writeln(const char *str) {
 23e71b4:	b507      	push	{r0, r1, r2, lr}
  if (SerialConsoleEnabled) {
 23e71b6:	4b0a      	ldr	r3, [pc, #40]	; (23e71e0 <_Z14Serial_writelnPKc+0x2c>)
 23e71b8:	781b      	ldrb	r3, [r3, #0]
 23e71ba:	b16b      	cbz	r3, 23e71d8 <_Z14Serial_writelnPKc+0x24>
 23e71bc:	9001      	str	r0, [sp, #4]
    Serial.println(str);
 23e71be:	f012 fe9b 	bl	23f9ef8 <_Z16_fetch_usbserialv>
 23e71c2:	9901      	ldr	r1, [sp, #4]
 23e71c4:	f012 fa8a 	bl	23f96dc <_ZN5Print7printlnEPKc>
    Serial.flush();
 23e71c8:	f012 fe96 	bl	23f9ef8 <_Z16_fetch_usbserialv>
 23e71cc:	6803      	ldr	r3, [r0, #0]
 23e71ce:	69db      	ldr	r3, [r3, #28]
  }
}
 23e71d0:	b003      	add	sp, #12
 23e71d2:	f85d eb04 	ldr.w	lr, [sp], #4
    Serial.flush();
 23e71d6:	4718      	bx	r3
}
 23e71d8:	b003      	add	sp, #12
 23e71da:	f85d fb04 	ldr.w	pc, [sp], #4
 23e71de:	bf00      	nop
 23e71e0:	1006a80b 	.word	0x1006a80b

023e71e4 <_Z6OutputPKc>:
/*
 * ======================================================================================================================
 * Output()
 * ======================================================================================================================
 */
void Output(const char *str) {
 23e71e4:	b510      	push	{r4, lr}
 23e71e6:	4604      	mov	r4, r0
  OLED_write(str);
 23e71e8:	f7ff ff58 	bl	23e709c <_Z10OLED_writePKc>
  Serial_write(str);
 23e71ec:	4620      	mov	r0, r4
}
 23e71ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial_write(str);
 23e71f2:	f7ff bfcd 	b.w	23e7190 <_Z12Serial_writePKc>
	...

023e71f8 <_Z15OLED_initializev>:
/*
 * ======================================================================================================================
 * OLED_initialize() -- Initialize oled if enabled
 * ======================================================================================================================
 */
void OLED_initialize() {
 23e71f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (DisplayEnabled) {
 23e71fa:	4d30      	ldr	r5, [pc, #192]	; (23e72bc <_Z15OLED_initializev+0xc4>)
 23e71fc:	782b      	ldrb	r3, [r5, #0]
 23e71fe:	2b00      	cmp	r3, #0
 23e7200:	d059      	beq.n	23e72b6 <_Z15OLED_initializev+0xbe>
    if (I2C_Device_Exist (OLED32_I2C_ADDRESS)) {
 23e7202:	203c      	movs	r0, #60	; 0x3c
 23e7204:	f7ff fe11 	bl	23e6e2a <_Z16I2C_Device_Existh>
 23e7208:	4604      	mov	r4, r0
 23e720a:	b318      	cbz	r0, 23e7254 <_Z15OLED_initializev+0x5c>
      oled_type = OLED32_I2C_ADDRESS;
 23e720c:	223c      	movs	r2, #60	; 0x3c
      display32.begin(SSD1306_SWITCHCAPVCC, OLED32_I2C_ADDRESS);
 23e720e:	2501      	movs	r5, #1
 23e7210:	4c2b      	ldr	r4, [pc, #172]	; (23e72c0 <_Z15OLED_initializev+0xc8>)
      oled_type = OLED32_I2C_ADDRESS;
 23e7212:	4b2c      	ldr	r3, [pc, #176]	; (23e72c4 <_Z15OLED_initializev+0xcc>)
      display32.begin(SSD1306_SWITCHCAPVCC, OLED32_I2C_ADDRESS);
 23e7214:	2102      	movs	r1, #2
      oled_type = OLED32_I2C_ADDRESS;
 23e7216:	601a      	str	r2, [r3, #0]
      display32.begin(SSD1306_SWITCHCAPVCC, OLED32_I2C_ADDRESS);
 23e7218:	4620      	mov	r0, r4
 23e721a:	462b      	mov	r3, r5
 23e721c:	9500      	str	r5, [sp, #0]
 23e721e:	f00b f9fd 	bl	23f261c <_ZN16Adafruit_SSD13065beginEhhbb>
      display32.clearDisplay();
 23e7222:	4620      	mov	r0, r4
 23e7224:	f00b f9eb 	bl	23f25fe <_ZN16Adafruit_SSD130612clearDisplayEv>
      display32.setTextSize(1); // Draw 2X-scale text
 23e7228:	4620      	mov	r0, r4
 23e722a:	4629      	mov	r1, r5
 23e722c:	f00a fa19 	bl	23f1662 <_ZN12Adafruit_GFX11setTextSizeEh>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23e7230:	2300      	movs	r3, #0
 23e7232:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 23e7236:	e9c4 3204 	strd	r3, r2, [r4, #16]
      display32.setTextColor(WHITE);
      display32.setCursor(0, 0);
      for (int r=0; r<4; r++) {
        oled_lines[r][0]=0;
 23e723a:	4a23      	ldr	r2, [pc, #140]	; (23e72c8 <_Z15OLED_initializev+0xd0>)
      }
      OLED_write("OLED32:OK");
 23e723c:	4823      	ldr	r0, [pc, #140]	; (23e72cc <_Z15OLED_initializev+0xd4>)
        oled_lines[r][0]=0;
 23e723e:	7013      	strb	r3, [r2, #0]
 23e7240:	75d3      	strb	r3, [r2, #23]
 23e7242:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
 23e7246:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
    else {
      DisplayEnabled = false;
      SystemStatusBits |= SSB_OLED; // Turn on Bit
    }
  }
}
 23e724a:	b002      	add	sp, #8
 23e724c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      OLED_write("OLED64:OK");
 23e7250:	f7ff bf24 	b.w	23e709c <_Z10OLED_writePKc>
    else if (I2C_Device_Exist (OLED64_I2C_ADDRESS)) {
 23e7254:	203d      	movs	r0, #61	; 0x3d
 23e7256:	f7ff fde8 	bl	23e6e2a <_Z16I2C_Device_Existh>
 23e725a:	b330      	cbz	r0, 23e72aa <_Z15OLED_initializev+0xb2>
      oled_type = OLED64_I2C_ADDRESS;
 23e725c:	223d      	movs	r2, #61	; 0x3d
      display64.begin(SSD1306_SWITCHCAPVCC, OLED64_I2C_ADDRESS);
 23e725e:	2601      	movs	r6, #1
 23e7260:	4d1b      	ldr	r5, [pc, #108]	; (23e72d0 <_Z15OLED_initializev+0xd8>)
      oled_type = OLED64_I2C_ADDRESS;
 23e7262:	4b18      	ldr	r3, [pc, #96]	; (23e72c4 <_Z15OLED_initializev+0xcc>)
      display64.begin(SSD1306_SWITCHCAPVCC, OLED64_I2C_ADDRESS);
 23e7264:	2102      	movs	r1, #2
      oled_type = OLED64_I2C_ADDRESS;
 23e7266:	601a      	str	r2, [r3, #0]
      display64.begin(SSD1306_SWITCHCAPVCC, OLED64_I2C_ADDRESS);
 23e7268:	4628      	mov	r0, r5
 23e726a:	4633      	mov	r3, r6
 23e726c:	9600      	str	r6, [sp, #0]
 23e726e:	f00b f9d5 	bl	23f261c <_ZN16Adafruit_SSD13065beginEhhbb>
      display64.clearDisplay();
 23e7272:	4628      	mov	r0, r5
 23e7274:	f00b f9c3 	bl	23f25fe <_ZN16Adafruit_SSD130612clearDisplayEv>
      display64.setTextSize(1); // Draw 2X-scale text
 23e7278:	4628      	mov	r0, r5
 23e727a:	4631      	mov	r1, r6
 23e727c:	f00a f9f1 	bl	23f1662 <_ZN12Adafruit_GFX11setTextSizeEh>
 23e7280:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 23e7284:	616b      	str	r3, [r5, #20]
        oled_lines[r][0]=0;
 23e7286:	4b10      	ldr	r3, [pc, #64]	; (23e72c8 <_Z15OLED_initializev+0xd0>)
      OLED_write("OLED64:OK");
 23e7288:	4812      	ldr	r0, [pc, #72]	; (23e72d4 <_Z15OLED_initializev+0xdc>)
    cursor_x = x;
 23e728a:	612c      	str	r4, [r5, #16]
        oled_lines[r][0]=0;
 23e728c:	701c      	strb	r4, [r3, #0]
 23e728e:	75dc      	strb	r4, [r3, #23]
 23e7290:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
 23e7294:	f883 4045 	strb.w	r4, [r3, #69]	; 0x45
 23e7298:	f883 405c 	strb.w	r4, [r3, #92]	; 0x5c
 23e729c:	f883 4073 	strb.w	r4, [r3, #115]	; 0x73
 23e72a0:	f883 408a 	strb.w	r4, [r3, #138]	; 0x8a
 23e72a4:	f883 40a1 	strb.w	r4, [r3, #161]	; 0xa1
      OLED_write("OLED64:OK");
 23e72a8:	e7cf      	b.n	23e724a <_Z15OLED_initializev+0x52>
      SystemStatusBits |= SSB_OLED; // Turn on Bit
 23e72aa:	4a0b      	ldr	r2, [pc, #44]	; (23e72d8 <_Z15OLED_initializev+0xe0>)
      DisplayEnabled = false;
 23e72ac:	7028      	strb	r0, [r5, #0]
      SystemStatusBits |= SSB_OLED; // Turn on Bit
 23e72ae:	6813      	ldr	r3, [r2, #0]
 23e72b0:	f043 0308 	orr.w	r3, r3, #8
 23e72b4:	6013      	str	r3, [r2, #0]
}
 23e72b6:	b002      	add	sp, #8
 23e72b8:	bd70      	pop	{r4, r5, r6, pc}
 23e72ba:	bf00      	nop
 23e72bc:	1006a141 	.word	0x1006a141
 23e72c0:	1006ad8c 	.word	0x1006ad8c
 23e72c4:	1007aa20 	.word	0x1007aa20
 23e72c8:	1007a968 	.word	0x1007a968
 23e72cc:	023fd351 	.word	0x023fd351
 23e72d0:	1006ae00 	.word	0x1006ae00
 23e72d4:	023fd35b 	.word	0x023fd35b
 23e72d8:	1006a1cc 	.word	0x1006a1cc

023e72dc <_Z13stc_timestampv>:
/* 
 *=======================================================================================================================
 * stc_timestamp() - Read from System Time Clock and set timestamp string
 *=======================================================================================================================
 */
void stc_timestamp() {
 23e72dc:	b570      	push	{r4, r5, r6, lr}
 23e72de:	b086      	sub	sp, #24

  // ISO_8601 Time Format
  sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
 23e72e0:	f012 fd3c 	bl	23f9d5c <_ZN9TimeClass4yearEv>
 23e72e4:	9005      	str	r0, [sp, #20]
 23e72e6:	f012 fd31 	bl	23f9d4c <_ZN9TimeClass5monthEv>
 23e72ea:	9004      	str	r0, [sp, #16]
 23e72ec:	f012 fd22 	bl	23f9d34 <_ZN9TimeClass3dayEv>
 23e72f0:	4604      	mov	r4, r0
 23e72f2:	f012 fcfb 	bl	23f9cec <_ZN9TimeClass4hourEv>
 23e72f6:	4605      	mov	r5, r0
 23e72f8:	f012 fd04 	bl	23f9d04 <_ZN9TimeClass6minuteEv>
 23e72fc:	4606      	mov	r6, r0
 23e72fe:	f012 fd0d 	bl	23f9d1c <_ZN9TimeClass6secondEv>
 23e7302:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 23e7306:	e9cd 6002 	strd	r6, r0, [sp, #8]
 23e730a:	e9cd 4500 	strd	r4, r5, [sp]
 23e730e:	4903      	ldr	r1, [pc, #12]	; (23e731c <_Z13stc_timestampv+0x40>)
 23e7310:	4803      	ldr	r0, [pc, #12]	; (23e7320 <_Z13stc_timestampv+0x44>)
 23e7312:	f010 ff3d 	bl	23f8190 <sprintf>
    Time.year(), Time.month(), Time.day(),
    Time.hour(), Time.minute(), Time.second());
}
 23e7316:	b006      	add	sp, #24
 23e7318:	bd70      	pop	{r4, r5, r6, pc}
 23e731a:	bf00      	nop
 23e731c:	023fd365 	.word	0x023fd365
 23e7320:	1007abe4 	.word	0x1007abe4

023e7324 <_Z13rtc_timestampv>:
/* 
 *=======================================================================================================================
 * rtc_timestamp() - Read from RTC and set timestamp string
 *=======================================================================================================================
 */
void rtc_timestamp() {
 23e7324:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  now = rtc.now(); //get the current date-time
 23e7326:	490e      	ldr	r1, [pc, #56]	; (23e7360 <_Z13rtc_timestampv+0x3c>)
 23e7328:	a804      	add	r0, sp, #16
 23e732a:	f00c fdd8 	bl	23f3ede <_ZN11RTC_PCF85233nowEv>
 23e732e:	4b0d      	ldr	r3, [pc, #52]	; (23e7364 <_Z13rtc_timestampv+0x40>)
 23e7330:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 23e7334:	9804      	ldr	r0, [sp, #16]
 23e7336:	809a      	strh	r2, [r3, #4]

  // ISO_8601 Time Format
  sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
 23e7338:	7959      	ldrb	r1, [r3, #5]
  now = rtc.now(); //get the current date-time
 23e733a:	6018      	str	r0, [r3, #0]

  /*!
      @brief  Return the year.
      @return Year (range: 2000--2099).
  */
  uint16_t year() const { return 2000U + yOff; }
 23e733c:	781a      	ldrb	r2, [r3, #0]
  sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
 23e733e:	9103      	str	r1, [sp, #12]
 23e7340:	7919      	ldrb	r1, [r3, #4]
 23e7342:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 23e7346:	9102      	str	r1, [sp, #8]
 23e7348:	78d9      	ldrb	r1, [r3, #3]
 23e734a:	4807      	ldr	r0, [pc, #28]	; (23e7368 <_Z13rtc_timestampv+0x44>)
 23e734c:	9101      	str	r1, [sp, #4]
 23e734e:	7899      	ldrb	r1, [r3, #2]
 23e7350:	9100      	str	r1, [sp, #0]
 23e7352:	785b      	ldrb	r3, [r3, #1]
 23e7354:	4905      	ldr	r1, [pc, #20]	; (23e736c <_Z13rtc_timestampv+0x48>)
 23e7356:	f010 ff1b 	bl	23f8190 <sprintf>
    now.year(), now.month(), now.day(),
    now.hour(), now.minute(), now.second());
}
 23e735a:	b007      	add	sp, #28
 23e735c:	f85d fb04 	ldr.w	pc, [sp], #4
 23e7360:	1007abb4 	.word	0x1007abb4
 23e7364:	1006f544 	.word	0x1006f544
 23e7368:	1007abe4 	.word	0x1007abe4
 23e736c:	023fd365 	.word	0x023fd365

023e7370 <_Z14rtc_initializev>:
/* 
 *=======================================================================================================================
 * rtc_initialize()
 *=======================================================================================================================
 */
void rtc_initialize() {
 23e7370:	b537      	push	{r0, r1, r2, r4, r5, lr}

  if (!rtc.begin()) { // Always returns true
 23e7372:	f012 ffb1 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e7376:	4601      	mov	r1, r0
 23e7378:	4825      	ldr	r0, [pc, #148]	; (23e7410 <_Z14rtc_initializev+0xa0>)
 23e737a:	f00c fd2f 	bl	23f3ddc <_ZN11RTC_PCF85235beginEP7TwoWire>
 23e737e:	b948      	cbnz	r0, 23e7394 <_Z14rtc_initializev+0x24>
     Output("ERR:RTC NOT FOUND");
 23e7380:	4824      	ldr	r0, [pc, #144]	; (23e7414 <_Z14rtc_initializev+0xa4>)
 23e7382:	f7ff ff2f 	bl	23e71e4 <_Z6OutputPKc>
     SystemStatusBits |= SSB_RTC; // Turn on Bit
 23e7386:	4a24      	ldr	r2, [pc, #144]	; (23e7418 <_Z14rtc_initializev+0xa8>)
 23e7388:	6813      	ldr	r3, [r2, #0]
 23e738a:	f043 0304 	orr.w	r3, r3, #4
 23e738e:	6013      	str	r3, [r2, #0]
  }
  else {
    Output ("NEED GSM TIME->RTC");
    delay (5000); // Give the user some time to see this problem.
  }
}
 23e7390:	b003      	add	sp, #12
 23e7392:	bd30      	pop	{r4, r5, pc}
  if (!I2C_Device_Exist(PCF8523_ADDRESS)) {
 23e7394:	2068      	movs	r0, #104	; 0x68
 23e7396:	f7ff fd48 	bl	23e6e2a <_Z16I2C_Device_Existh>
 23e739a:	b970      	cbnz	r0, 23e73ba <_Z14rtc_initializev+0x4a>
    Output("ERR:RTC-I2C NOTFOUND");
 23e739c:	481f      	ldr	r0, [pc, #124]	; (23e741c <_Z14rtc_initializev+0xac>)
 23e739e:	f7ff ff21 	bl	23e71e4 <_Z6OutputPKc>
    SystemStatusBits |= SSB_RTC; // Turn on Bit
 23e73a2:	4a1d      	ldr	r2, [pc, #116]	; (23e7418 <_Z14rtc_initializev+0xa8>)
 23e73a4:	6813      	ldr	r3, [r2, #0]
 23e73a6:	f043 0304 	orr.w	r3, r3, #4
 23e73aa:	6013      	str	r3, [r2, #0]
    delay (5000); // Give the user some time to see this problem.
 23e73ac:	f241 3088 	movw	r0, #5000	; 0x1388
}
 23e73b0:	b003      	add	sp, #12
 23e73b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    delay (5000); // Give the user some time to see this problem.
 23e73b6:	f010 bf85 	b.w	23f82c4 <delay>
  RTC_exists = true; // We have a clock hardware connected
 23e73ba:	2501      	movs	r5, #1
 23e73bc:	4b18      	ldr	r3, [pc, #96]	; (23e7420 <_Z14rtc_initializev+0xb0>)
 23e73be:	4c19      	ldr	r4, [pc, #100]	; (23e7424 <_Z14rtc_initializev+0xb4>)
 23e73c0:	701d      	strb	r5, [r3, #0]
  rtc_timestamp();
 23e73c2:	f7ff ffaf 	bl	23e7324 <_Z13rtc_timestampv>
  sprintf (msgbuf, "%s*", timestamp);
 23e73c6:	4a18      	ldr	r2, [pc, #96]	; (23e7428 <_Z14rtc_initializev+0xb8>)
 23e73c8:	4918      	ldr	r1, [pc, #96]	; (23e742c <_Z14rtc_initializev+0xbc>)
 23e73ca:	4819      	ldr	r0, [pc, #100]	; (23e7430 <_Z14rtc_initializev+0xc0>)
 23e73cc:	f010 fee0 	bl	23f8190 <sprintf>
  Output (msgbuf);
 23e73d0:	4817      	ldr	r0, [pc, #92]	; (23e7430 <_Z14rtc_initializev+0xc0>)
 23e73d2:	f7ff ff07 	bl	23e71e4 <_Z6OutputPKc>
 23e73d6:	7823      	ldrb	r3, [r4, #0]
  if ((now.year() >= 2023) && (now.year() <= 2031)) {
 23e73d8:	3b17      	subs	r3, #23
 23e73da:	2b08      	cmp	r3, #8
 23e73dc:	d814      	bhi.n	23e7408 <_Z14rtc_initializev+0x98>
    Output("RTC:VALID");
 23e73de:	4815      	ldr	r0, [pc, #84]	; (23e7434 <_Z14rtc_initializev+0xc4>)
 23e73e0:	f7ff ff00 	bl	23e71e4 <_Z6OutputPKc>
    now = rtc.now();
 23e73e4:	490a      	ldr	r1, [pc, #40]	; (23e7410 <_Z14rtc_initializev+0xa0>)
 23e73e6:	4668      	mov	r0, sp
 23e73e8:	f00c fd79 	bl	23f3ede <_ZN11RTC_PCF85233nowEv>
 23e73ec:	9800      	ldr	r0, [sp, #0]
 23e73ee:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 23e73f2:	6020      	str	r0, [r4, #0]
    Time.setTime(now.unixtime()); // If RTC valid, we set STC.
 23e73f4:	4620      	mov	r0, r4
    now = rtc.now();
 23e73f6:	80a3      	strh	r3, [r4, #4]
    Time.setTime(now.unixtime()); // If RTC valid, we set STC.
 23e73f8:	f00c fcd8 	bl	23f3dac <_ZNK8DateTime8unixtimeEv>
 23e73fc:	2100      	movs	r1, #0
 23e73fe:	f012 fc35 	bl	23f9c6c <_ZN9TimeClass7setTimeEx>
    RTC_valid = true;
 23e7402:	4b0d      	ldr	r3, [pc, #52]	; (23e7438 <_Z14rtc_initializev+0xc8>)
 23e7404:	701d      	strb	r5, [r3, #0]
 23e7406:	e7c3      	b.n	23e7390 <_Z14rtc_initializev+0x20>
    Output ("NEED GSM TIME->RTC");
 23e7408:	480c      	ldr	r0, [pc, #48]	; (23e743c <_Z14rtc_initializev+0xcc>)
 23e740a:	f7ff feeb 	bl	23e71e4 <_Z6OutputPKc>
 23e740e:	e7cd      	b.n	23e73ac <_Z14rtc_initializev+0x3c>
 23e7410:	1007abb4 	.word	0x1007abb4
 23e7414:	023fd381 	.word	0x023fd381
 23e7418:	1006a1cc 	.word	0x1006a1cc
 23e741c:	023fd393 	.word	0x023fd393
 23e7420:	1006a305 	.word	0x1006a305
 23e7424:	1006f544 	.word	0x1006f544
 23e7428:	1007abe4 	.word	0x1007abe4
 23e742c:	023fd3a8 	.word	0x023fd3a8
 23e7430:	1006f140 	.word	0x1006f140
 23e7434:	023fd3ac 	.word	0x023fd3ac
 23e7438:	1006a306 	.word	0x1006a306
 23e743c:	023fd3b6 	.word	0x023fd3b6

023e7440 <_Z15RTC_UpdateCheckv>:
/*
 * ======================================================================================================================
 * RTC_UpdateCheck() - Check if we need to Set or Update the RTC clock from the Cell Network   
 * ======================================================================================================================
 */
void RTC_UpdateCheck() {
 23e7440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (RTC_exists && Particle.connected()) { 
 23e7444:	4b4f      	ldr	r3, [pc, #316]	; (23e7584 <_Z15RTC_UpdateCheckv+0x144>)
void RTC_UpdateCheck() {
 23e7446:	b087      	sub	sp, #28
  if (RTC_exists && Particle.connected()) { 
 23e7448:	781b      	ldrb	r3, [r3, #0]
 23e744a:	b36b      	cbz	r3, 23e74a8 <_Z15RTC_UpdateCheckv+0x68>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23e744c:	f010 fd42 	bl	23f7ed4 <spark_cloud_flag_connected>
 23e7450:	b350      	cbz	r0, 23e74a8 <_Z15RTC_UpdateCheckv+0x68>
    // Wer have a RTC and We have connected to the Cell network at some point
    if (!RTC_valid) {
 23e7452:	4f4d      	ldr	r7, [pc, #308]	; (23e7588 <_Z15RTC_UpdateCheckv+0x148>)
 23e7454:	783b      	ldrb	r3, [r7, #0]
 23e7456:	bb53      	cbnz	r3, 23e74ae <_Z15RTC_UpdateCheckv+0x6e>
      // Set Uninitialized RTC from STC. Which has been set from the Cloud
      rtc.adjust(DateTime(Time.year(), Time.month(), Time.day(), Time.hour(), Time.minute(), Time.second() ));
 23e7458:	f012 fc80 	bl	23f9d5c <_ZN9TimeClass4yearEv>
 23e745c:	4606      	mov	r6, r0
 23e745e:	f012 fc75 	bl	23f9d4c <_ZN9TimeClass5monthEv>
 23e7462:	4680      	mov	r8, r0
 23e7464:	f012 fc66 	bl	23f9d34 <_ZN9TimeClass3dayEv>
 23e7468:	4681      	mov	r9, r0
 23e746a:	f012 fc3f 	bl	23f9cec <_ZN9TimeClass4hourEv>
 23e746e:	4604      	mov	r4, r0
 23e7470:	f012 fc48 	bl	23f9d04 <_ZN9TimeClass6minuteEv>
 23e7474:	4605      	mov	r5, r0
 23e7476:	f012 fc51 	bl	23f9d1c <_ZN9TimeClass6secondEv>
 23e747a:	b2ed      	uxtb	r5, r5
 23e747c:	b2c0      	uxtb	r0, r0
 23e747e:	b2e4      	uxtb	r4, r4
 23e7480:	fa5f f389 	uxtb.w	r3, r9
 23e7484:	fa5f f288 	uxtb.w	r2, r8
 23e7488:	9002      	str	r0, [sp, #8]
 23e748a:	b2b1      	uxth	r1, r6
 23e748c:	9501      	str	r5, [sp, #4]
 23e748e:	9400      	str	r4, [sp, #0]
 23e7490:	a804      	add	r0, sp, #16
 23e7492:	f00c fc77 	bl	23f3d84 <_ZN8DateTimeC1Ethhhhh>
 23e7496:	483d      	ldr	r0, [pc, #244]	; (23e758c <_Z15RTC_UpdateCheckv+0x14c>)
 23e7498:	a904      	add	r1, sp, #16
 23e749a:	f00c fcb0 	bl	23f3dfe <_ZN11RTC_PCF85236adjustERK8DateTime>
      Output("RTC: Set");
 23e749e:	483c      	ldr	r0, [pc, #240]	; (23e7590 <_Z15RTC_UpdateCheckv+0x150>)
 23e74a0:	f7ff fea0 	bl	23e71e4 <_Z6OutputPKc>
      RTC_valid = true;
 23e74a4:	2301      	movs	r3, #1
 23e74a6:	703b      	strb	r3, [r7, #0]
      sprintf (msgbuf, "%s*", timestamp);
      Output (msgbuf);
      LastTimeUpdate = System.millis();
    }
  }
 23e74a8:	b007      	add	sp, #28
 23e74aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (LastTimeUpdate == 0){
 23e74ae:	4c39      	ldr	r4, [pc, #228]	; (23e7594 <_Z15RTC_UpdateCheckv+0x154>)
 23e74b0:	e9d4 2300 	ldrd	r2, r3, [r4]
 23e74b4:	4313      	orrs	r3, r2
 23e74b6:	d134      	bne.n	23e7522 <_Z15RTC_UpdateCheckv+0xe2>
      rtc.adjust(DateTime(Time.year(), Time.month(), Time.day(), Time.hour(), Time.minute(), Time.second() ));
 23e74b8:	f012 fc50 	bl	23f9d5c <_ZN9TimeClass4yearEv>
 23e74bc:	4607      	mov	r7, r0
 23e74be:	f012 fc45 	bl	23f9d4c <_ZN9TimeClass5monthEv>
 23e74c2:	4680      	mov	r8, r0
 23e74c4:	f012 fc36 	bl	23f9d34 <_ZN9TimeClass3dayEv>
 23e74c8:	4681      	mov	r9, r0
 23e74ca:	f012 fc0f 	bl	23f9cec <_ZN9TimeClass4hourEv>
 23e74ce:	4605      	mov	r5, r0
 23e74d0:	f012 fc18 	bl	23f9d04 <_ZN9TimeClass6minuteEv>
 23e74d4:	4606      	mov	r6, r0
 23e74d6:	f012 fc21 	bl	23f9d1c <_ZN9TimeClass6secondEv>
 23e74da:	b2f6      	uxtb	r6, r6
 23e74dc:	b2c0      	uxtb	r0, r0
 23e74de:	b2ed      	uxtb	r5, r5
 23e74e0:	9002      	str	r0, [sp, #8]
 23e74e2:	fa5f f389 	uxtb.w	r3, r9
 23e74e6:	fa5f f288 	uxtb.w	r2, r8
 23e74ea:	b2b9      	uxth	r1, r7
 23e74ec:	9601      	str	r6, [sp, #4]
 23e74ee:	9500      	str	r5, [sp, #0]
 23e74f0:	a804      	add	r0, sp, #16
 23e74f2:	f00c fc47 	bl	23f3d84 <_ZN8DateTimeC1Ethhhhh>
 23e74f6:	4825      	ldr	r0, [pc, #148]	; (23e758c <_Z15RTC_UpdateCheckv+0x14c>)
 23e74f8:	a904      	add	r1, sp, #16
 23e74fa:	f00c fc80 	bl	23f3dfe <_ZN11RTC_PCF85236adjustERK8DateTime>
      Output("RTC: 1ST SYNC");
 23e74fe:	4826      	ldr	r0, [pc, #152]	; (23e7598 <_Z15RTC_UpdateCheckv+0x158>)
      Output("RTC: 2HR SYNC");
 23e7500:	f7ff fe70 	bl	23e71e4 <_Z6OutputPKc>
      rtc_timestamp();
 23e7504:	f7ff ff0e 	bl	23e7324 <_Z13rtc_timestampv>
      sprintf (msgbuf, "%s*", timestamp);
 23e7508:	4a24      	ldr	r2, [pc, #144]	; (23e759c <_Z15RTC_UpdateCheckv+0x15c>)
 23e750a:	4925      	ldr	r1, [pc, #148]	; (23e75a0 <_Z15RTC_UpdateCheckv+0x160>)
 23e750c:	4825      	ldr	r0, [pc, #148]	; (23e75a4 <_Z15RTC_UpdateCheckv+0x164>)
 23e750e:	f010 fe3f 	bl	23f8190 <sprintf>
      Output (msgbuf);
 23e7512:	4824      	ldr	r0, [pc, #144]	; (23e75a4 <_Z15RTC_UpdateCheckv+0x164>)
 23e7514:	f7ff fe66 	bl	23e71e4 <_Z6OutputPKc>
      LastTimeUpdate = System.millis();
 23e7518:	f7ff fb68 	bl	23e6bec <_ZN11SystemClass6millisEv>
 23e751c:	e9c4 0100 	strd	r0, r1, [r4]
 23e7520:	e7c2      	b.n	23e74a8 <_Z15RTC_UpdateCheckv+0x68>
    else if ((System.millis() - LastTimeUpdate) >= 2*3600*1000) {  // It's been 2 hours since last RTC update
 23e7522:	f7ff fb63 	bl	23e6bec <_ZN11SystemClass6millisEv>
 23e7526:	e9d4 3200 	ldrd	r3, r2, [r4]
 23e752a:	1ac0      	subs	r0, r0, r3
 23e752c:	4b1e      	ldr	r3, [pc, #120]	; (23e75a8 <_Z15RTC_UpdateCheckv+0x168>)
 23e752e:	eb61 0102 	sbc.w	r1, r1, r2
 23e7532:	4298      	cmp	r0, r3
 23e7534:	f171 0300 	sbcs.w	r3, r1, #0
 23e7538:	d3b6      	bcc.n	23e74a8 <_Z15RTC_UpdateCheckv+0x68>
      rtc.adjust(DateTime(Time.year(), Time.month(), Time.day(), Time.hour(), Time.minute(), Time.second() ));
 23e753a:	f012 fc0f 	bl	23f9d5c <_ZN9TimeClass4yearEv>
 23e753e:	4607      	mov	r7, r0
 23e7540:	f012 fc04 	bl	23f9d4c <_ZN9TimeClass5monthEv>
 23e7544:	4680      	mov	r8, r0
 23e7546:	f012 fbf5 	bl	23f9d34 <_ZN9TimeClass3dayEv>
 23e754a:	4681      	mov	r9, r0
 23e754c:	f012 fbce 	bl	23f9cec <_ZN9TimeClass4hourEv>
 23e7550:	4605      	mov	r5, r0
 23e7552:	f012 fbd7 	bl	23f9d04 <_ZN9TimeClass6minuteEv>
 23e7556:	4606      	mov	r6, r0
 23e7558:	f012 fbe0 	bl	23f9d1c <_ZN9TimeClass6secondEv>
 23e755c:	b2f6      	uxtb	r6, r6
 23e755e:	b2c0      	uxtb	r0, r0
 23e7560:	b2ed      	uxtb	r5, r5
 23e7562:	9002      	str	r0, [sp, #8]
 23e7564:	fa5f f389 	uxtb.w	r3, r9
 23e7568:	fa5f f288 	uxtb.w	r2, r8
 23e756c:	b2b9      	uxth	r1, r7
 23e756e:	9601      	str	r6, [sp, #4]
 23e7570:	9500      	str	r5, [sp, #0]
 23e7572:	a804      	add	r0, sp, #16
 23e7574:	f00c fc06 	bl	23f3d84 <_ZN8DateTimeC1Ethhhhh>
 23e7578:	4804      	ldr	r0, [pc, #16]	; (23e758c <_Z15RTC_UpdateCheckv+0x14c>)
 23e757a:	a904      	add	r1, sp, #16
 23e757c:	f00c fc3f 	bl	23f3dfe <_ZN11RTC_PCF85236adjustERK8DateTime>
      Output("RTC: 2HR SYNC");
 23e7580:	480a      	ldr	r0, [pc, #40]	; (23e75ac <_Z15RTC_UpdateCheckv+0x16c>)
 23e7582:	e7bd      	b.n	23e7500 <_Z15RTC_UpdateCheckv+0xc0>
 23e7584:	1006a305 	.word	0x1006a305
 23e7588:	1006a306 	.word	0x1006a306
 23e758c:	1007abb4 	.word	0x1007abb4
 23e7590:	023fd3c9 	.word	0x023fd3c9
 23e7594:	1006a2f0 	.word	0x1006a2f0
 23e7598:	023fd3d2 	.word	0x023fd3d2
 23e759c:	1007abe4 	.word	0x1007abe4
 23e75a0:	023fd3a8 	.word	0x023fd3a8
 23e75a4:	1006f140 	.word	0x1006f140
 23e75a8:	006ddd00 	.word	0x006ddd00
 23e75ac:	023fd3e0 	.word	0x023fd3e0

023e75b0 <_Z19lora_relay_msg_freeP18LORA_MSG_RELAY_STR>:
 *=======================================================================================================================
 * lora_relay_msg_free()
 *=======================================================================================================================
 */
void lora_relay_msg_free(LORA_MSG_RELAY_STR *m) {
  m->need2log = false;
 23e75b0:	2100      	movs	r1, #0
  m->message_type = 0;
  memset (m->message, 0, LORA_RELAY_MSG_LENGTH);
 23e75b2:	f44f 7280 	mov.w	r2, #256	; 0x100
  m->need2log = false;
 23e75b6:	7001      	strb	r1, [r0, #0]
  m->message_type = 0;
 23e75b8:	6041      	str	r1, [r0, #4]
  memset (m->message, 0, LORA_RELAY_MSG_LENGTH);
 23e75ba:	3008      	adds	r0, #8
 23e75bc:	f015 bc27 	b.w	23fce0e <memset>

023e75c0 <_Z19lora_relay_need2logv>:
 *=======================================================================================================================
 * lora_relay_need2log() - Return true if we have a relay that needs to be logged
 *=======================================================================================================================
 */
bool lora_relay_need2log() {
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e75c0:	2300      	movs	r3, #0
    if (lora_msg_relay[i].need2log) {
 23e75c2:	f44f 7284 	mov.w	r2, #264	; 0x108
 23e75c6:	4904      	ldr	r1, [pc, #16]	; (23e75d8 <_Z19lora_relay_need2logv+0x18>)
 23e75c8:	fb02 f003 	mul.w	r0, r2, r3
 23e75cc:	5c40      	ldrb	r0, [r0, r1]
 23e75ce:	b910      	cbnz	r0, 23e75d6 <_Z19lora_relay_need2logv+0x16>
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e75d0:	3301      	adds	r3, #1
 23e75d2:	2b40      	cmp	r3, #64	; 0x40
 23e75d4:	d1f8      	bne.n	23e75c8 <_Z19lora_relay_need2logv+0x8>
      return (true);
    }
  }
  return(false);
}
 23e75d6:	4770      	bx	lr
 23e75d8:	1006aed8 	.word	0x1006aed8

023e75dc <_Z19lora_relay_notinusev>:
 *=======================================================================================================================
 * lora_relay_notinuse() - return first open spot or -1 if full
 *=======================================================================================================================
 */
int lora_relay_notinuse() {
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e75dc:	2000      	movs	r0, #0
    if (!lora_msg_relay[i].need2log) {
 23e75de:	f44f 7384 	mov.w	r3, #264	; 0x108
 23e75e2:	4a05      	ldr	r2, [pc, #20]	; (23e75f8 <_Z19lora_relay_notinusev+0x1c>)
 23e75e4:	fb03 f100 	mul.w	r1, r3, r0
 23e75e8:	5c89      	ldrb	r1, [r1, r2]
 23e75ea:	b121      	cbz	r1, 23e75f6 <_Z19lora_relay_notinusev+0x1a>
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e75ec:	3001      	adds	r0, #1
 23e75ee:	2840      	cmp	r0, #64	; 0x40
 23e75f0:	d1f8      	bne.n	23e75e4 <_Z19lora_relay_notinusev+0x8>
      return (i);
    }
  }
  return(-1);
 23e75f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23e75f6:	4770      	bx	lr
 23e75f8:	1006aed8 	.word	0x1006aed8

023e75fc <_Z23lora_relay_need2log_idxv>:
 *=======================================================================================================================
 * lora_relay_need2log_idx() - return first need2log spot or -1 if none
 *=======================================================================================================================
 */
int lora_relay_need2log_idx() {
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e75fc:	2000      	movs	r0, #0
    if (lora_msg_relay[i].need2log) {
 23e75fe:	f44f 7384 	mov.w	r3, #264	; 0x108
 23e7602:	4a05      	ldr	r2, [pc, #20]	; (23e7618 <_Z23lora_relay_need2log_idxv+0x1c>)
 23e7604:	fb03 f100 	mul.w	r1, r3, r0
 23e7608:	5c89      	ldrb	r1, [r1, r2]
 23e760a:	b921      	cbnz	r1, 23e7616 <_Z23lora_relay_need2log_idxv+0x1a>
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e760c:	3001      	adds	r0, #1
 23e760e:	2840      	cmp	r0, #64	; 0x40
 23e7610:	d1f8      	bne.n	23e7604 <_Z23lora_relay_need2log_idxv+0x8>
      return (i);
    }
  }
  return(-1);
 23e7612:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23e7616:	4770      	bx	lr
 23e7618:	1006aed8 	.word	0x1006aed8

023e761c <_Z22lora_device_initializev>:
/* 
 *=======================================================================================================================
 * lora_device_initialize()
 *=======================================================================================================================
 */
void lora_device_initialize() {
 23e761c:	b538      	push	{r3, r4, r5, lr}
  if (LORA_exists) {
 23e761e:	4b07      	ldr	r3, [pc, #28]	; (23e763c <_Z22lora_device_initializev+0x20>)
 23e7620:	781b      	ldrb	r3, [r3, #0]
 23e7622:	b14b      	cbz	r3, 23e7638 <_Z22lora_device_initializev+0x1c>
    // Init LoRa Relay Message structure
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e7624:	2400      	movs	r4, #0
 23e7626:	4d06      	ldr	r5, [pc, #24]	; (23e7640 <_Z22lora_device_initializev+0x24>)
      lora_relay_msg_free(&lora_msg_relay[i]);
 23e7628:	4628      	mov	r0, r5
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e762a:	3401      	adds	r4, #1
      lora_relay_msg_free(&lora_msg_relay[i]);
 23e762c:	f7ff ffc0 	bl	23e75b0 <_Z19lora_relay_msg_freeP18LORA_MSG_RELAY_STR>
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e7630:	2c40      	cmp	r4, #64	; 0x40
 23e7632:	f505 7584 	add.w	r5, r5, #264	; 0x108
 23e7636:	d1f7      	bne.n	23e7628 <_Z22lora_device_initializev+0xc>
    }
  }
}
 23e7638:	bd38      	pop	{r3, r4, r5, pc}
 23e763a:	bf00      	nop
 23e763c:	1006a2e9 	.word	0x1006a2e9
 23e7640:	1006aed8 	.word	0x1006aed8

023e7644 <_Z16lora_cf_validatev>:
/* 
 *=======================================================================================================================
 * lora_cf_validate() - Validate LoRa variables from CONFIG.TXT
 *=======================================================================================================================
 */
bool lora_cf_validate() {
 23e7644:	b570      	push	{r4, r5, r6, lr}
  if (cf_aes_pkey == NULL) {
 23e7646:	4b2a      	ldr	r3, [pc, #168]	; (23e76f0 <_Z16lora_cf_validatev+0xac>)
 23e7648:	681d      	ldr	r5, [r3, #0]
 23e764a:	b925      	cbnz	r5, 23e7656 <_Z16lora_cf_validatev+0x12>
    Output ("AES PKEY !SET");
 23e764c:	4829      	ldr	r0, [pc, #164]	; (23e76f4 <_Z16lora_cf_validatev+0xb0>)
    return (false);
  }
  else if (strlen (cf_aes_pkey) != 16) {
    Output ("AES PKEY !16 Bytes");
 23e764e:	f7ff fdc9 	bl	23e71e4 <_Z6OutputPKc>
    return (false);    
 23e7652:	2000      	movs	r0, #0
    sprintf(msgbuf, "AES_MYIV[%u]", AES_MYIV); Output (msgbuf);

    Output ("LORA CFV OK");
    return (true);
  }
}
 23e7654:	bd70      	pop	{r4, r5, r6, pc}
  else if (strlen (cf_aes_pkey) != 16) {
 23e7656:	4628      	mov	r0, r5
 23e7658:	f7fe fcce 	bl	23e5ff8 <strlen>
 23e765c:	2810      	cmp	r0, #16
 23e765e:	d001      	beq.n	23e7664 <_Z16lora_cf_validatev+0x20>
    Output ("AES PKEY !16 Bytes");
 23e7660:	4825      	ldr	r0, [pc, #148]	; (23e76f8 <_Z16lora_cf_validatev+0xb4>)
 23e7662:	e7f4      	b.n	23e764e <_Z16lora_cf_validatev+0xa>
  else if (cf_aes_myiv == 0) {
 23e7664:	4e25      	ldr	r6, [pc, #148]	; (23e76fc <_Z16lora_cf_validatev+0xb8>)
 23e7666:	6834      	ldr	r4, [r6, #0]
 23e7668:	b90c      	cbnz	r4, 23e766e <_Z16lora_cf_validatev+0x2a>
    Output ("AES MYIV !SET");
 23e766a:	4825      	ldr	r0, [pc, #148]	; (23e7700 <_Z16lora_cf_validatev+0xbc>)
 23e766c:	e7ef      	b.n	23e764e <_Z16lora_cf_validatev+0xa>
  else if ((cf_lora_txpower<5) || (cf_lora_txpower>23)) {
 23e766e:	4b25      	ldr	r3, [pc, #148]	; (23e7704 <_Z16lora_cf_validatev+0xc0>)
 23e7670:	681b      	ldr	r3, [r3, #0]
 23e7672:	3b05      	subs	r3, #5
 23e7674:	2b12      	cmp	r3, #18
 23e7676:	d901      	bls.n	23e767c <_Z16lora_cf_validatev+0x38>
    Output ("LORA PWR ERR");
 23e7678:	4823      	ldr	r0, [pc, #140]	; (23e7708 <_Z16lora_cf_validatev+0xc4>)
 23e767a:	e7e8      	b.n	23e764e <_Z16lora_cf_validatev+0xa>
  else if ((cf_lora_freq!=915) && (cf_lora_freq!=866) && (cf_lora_freq!=433)) {
 23e767c:	f240 3293 	movw	r2, #915	; 0x393
 23e7680:	4b22      	ldr	r3, [pc, #136]	; (23e770c <_Z16lora_cf_validatev+0xc8>)
 23e7682:	681b      	ldr	r3, [r3, #0]
 23e7684:	4293      	cmp	r3, r2
 23e7686:	d009      	beq.n	23e769c <_Z16lora_cf_validatev+0x58>
 23e7688:	f240 3262 	movw	r2, #866	; 0x362
 23e768c:	4293      	cmp	r3, r2
 23e768e:	d005      	beq.n	23e769c <_Z16lora_cf_validatev+0x58>
 23e7690:	f240 12b1 	movw	r2, #433	; 0x1b1
 23e7694:	4293      	cmp	r3, r2
 23e7696:	d001      	beq.n	23e769c <_Z16lora_cf_validatev+0x58>
    Output ("LORA FREQ ERR");
 23e7698:	481d      	ldr	r0, [pc, #116]	; (23e7710 <_Z16lora_cf_validatev+0xcc>)
 23e769a:	e7d8      	b.n	23e764e <_Z16lora_cf_validatev+0xa>
  else if ((cf_lora_unitid<0) || (cf_lora_unitid>254)) {
 23e769c:	4b1d      	ldr	r3, [pc, #116]	; (23e7714 <_Z16lora_cf_validatev+0xd0>)
 23e769e:	681b      	ldr	r3, [r3, #0]
 23e76a0:	2bfe      	cmp	r3, #254	; 0xfe
 23e76a2:	d901      	bls.n	23e76a8 <_Z16lora_cf_validatev+0x64>
    Output ("LORA ADDR ERR");
 23e76a4:	481c      	ldr	r0, [pc, #112]	; (23e7718 <_Z16lora_cf_validatev+0xd4>)
 23e76a6:	e7d2      	b.n	23e764e <_Z16lora_cf_validatev+0xa>
    memcpy ((char *)AES_KEY, cf_aes_pkey, 16);
 23e76a8:	462b      	mov	r3, r5
 23e76aa:	4a1c      	ldr	r2, [pc, #112]	; (23e771c <_Z16lora_cf_validatev+0xd8>)
 23e76ac:	f105 0110 	add.w	r1, r5, #16
 23e76b0:	f853 0b04 	ldr.w	r0, [r3], #4
 23e76b4:	428b      	cmp	r3, r1
 23e76b6:	f842 0b04 	str.w	r0, [r2], #4
 23e76ba:	d1f9      	bne.n	23e76b0 <_Z16lora_cf_validatev+0x6c>
    sprintf(msgbuf, "AES_KEY[%s]", cf_aes_pkey); Output (msgbuf);
 23e76bc:	462a      	mov	r2, r5
 23e76be:	4918      	ldr	r1, [pc, #96]	; (23e7720 <_Z16lora_cf_validatev+0xdc>)
 23e76c0:	4818      	ldr	r0, [pc, #96]	; (23e7724 <_Z16lora_cf_validatev+0xe0>)
 23e76c2:	f010 fd65 	bl	23f8190 <sprintf>
 23e76c6:	4817      	ldr	r0, [pc, #92]	; (23e7724 <_Z16lora_cf_validatev+0xe0>)
 23e76c8:	f7ff fd8c 	bl	23e71e4 <_Z6OutputPKc>
    AES_MYIV=cf_aes_myiv;
 23e76cc:	6832      	ldr	r2, [r6, #0]
 23e76ce:	4916      	ldr	r1, [pc, #88]	; (23e7728 <_Z16lora_cf_validatev+0xe4>)
 23e76d0:	17d3      	asrs	r3, r2, #31
 23e76d2:	e9c1 2300 	strd	r2, r3, [r1]
    sprintf(msgbuf, "AES_MYIV[%u]", AES_MYIV); Output (msgbuf);
 23e76d6:	4813      	ldr	r0, [pc, #76]	; (23e7724 <_Z16lora_cf_validatev+0xe0>)
 23e76d8:	4914      	ldr	r1, [pc, #80]	; (23e772c <_Z16lora_cf_validatev+0xe8>)
 23e76da:	f010 fd59 	bl	23f8190 <sprintf>
 23e76de:	4811      	ldr	r0, [pc, #68]	; (23e7724 <_Z16lora_cf_validatev+0xe0>)
 23e76e0:	f7ff fd80 	bl	23e71e4 <_Z6OutputPKc>
    Output ("LORA CFV OK");
 23e76e4:	4812      	ldr	r0, [pc, #72]	; (23e7730 <_Z16lora_cf_validatev+0xec>)
 23e76e6:	f7ff fd7d 	bl	23e71e4 <_Z6OutputPKc>
    return (true);
 23e76ea:	2001      	movs	r0, #1
 23e76ec:	e7b2      	b.n	23e7654 <_Z16lora_cf_validatev+0x10>
 23e76ee:	bf00      	nop
 23e76f0:	1006ac94 	.word	0x1006ac94
 23e76f4:	023fd3ee 	.word	0x023fd3ee
 23e76f8:	023fd3fc 	.word	0x023fd3fc
 23e76fc:	1006ac90 	.word	0x1006ac90
 23e7700:	023fd40f 	.word	0x023fd40f
 23e7704:	1006a1e8 	.word	0x1006a1e8
 23e7708:	023fd41d 	.word	0x023fd41d
 23e770c:	1006a1e4 	.word	0x1006a1e4
 23e7710:	023fd42a 	.word	0x023fd42a
 23e7714:	1006a1ec 	.word	0x1006a1ec
 23e7718:	023fd438 	.word	0x023fd438
 23e771c:	1006a29c 	.word	0x1006a29c
 23e7720:	023fd446 	.word	0x023fd446
 23e7724:	1006f140 	.word	0x1006f140
 23e7728:	1006a2b0 	.word	0x1006a2b0
 23e772c:	023fd452 	.word	0x023fd452
 23e7730:	023fd45f 	.word	0x023fd45f

023e7734 <_Z16get_Bosch_ChipIDh>:
 *   Chip ID BME280 = 0x60 temp, pressure, humidity - I2C ADDRESS 0x77  (SD0 to GND = 0x76)  Register 0xE0 = Reset
 *   Chip ID BMP388 = 0x50 temp, pressure           - I2C ADDRESS 0x77  (SD0 to GND = 0x76)
 *   Chip ID BMP390 = 0x60 temp, pressure           - I2C ADDRESS 0x77  (SD0 to GND = 0x76)
 *=======================================================================================================================
 */
byte get_Bosch_ChipID (byte address) {
 23e7734:	b570      	push	{r4, r5, r6, lr}
 23e7736:	4605      	mov	r5, r0
  byte chip_id = 0;
  byte error;

  Output ("get_Bosch_ChipID()");
 23e7738:	4848      	ldr	r0, [pc, #288]	; (23e785c <_Z16get_Bosch_ChipIDh+0x128>)
 23e773a:	f7ff fd53 	bl	23e71e4 <_Z6OutputPKc>

  // Important! Need to check the 0x00 register first. Doing a 0x0D (not chip id loaction) on a bmp388 
  // will return a value that could match one of the IDs 

  // Check Register 0x00
  sprintf (msgbuf, "  I2C:%02X Reg:%02X", address, 0x00);
 23e773e:	462a      	mov	r2, r5
 23e7740:	2300      	movs	r3, #0
 23e7742:	4947      	ldr	r1, [pc, #284]	; (23e7860 <_Z16get_Bosch_ChipIDh+0x12c>)
 23e7744:	4847      	ldr	r0, [pc, #284]	; (23e7864 <_Z16get_Bosch_ChipIDh+0x130>)
 23e7746:	f010 fd23 	bl	23f8190 <sprintf>
  Output (msgbuf);
 23e774a:	4846      	ldr	r0, [pc, #280]	; (23e7864 <_Z16get_Bosch_ChipIDh+0x130>)
 23e774c:	f7ff fd4a 	bl	23e71e4 <_Z6OutputPKc>
  Wire.begin();
 23e7750:	f012 fdc2 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e7754:	f011 fb86 	bl	23f8e64 <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(address);
 23e7758:	f012 fdbe 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e775c:	4629      	mov	r1, r5
 23e775e:	f011 fbab 	bl	23f8eb8 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(0x00);  // BM3 CHIPID REGISTER
 23e7762:	f012 fdb9 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e7766:	2100      	movs	r1, #0
 23e7768:	f7ff fa04 	bl	23e6b74 <_ZN7TwoWire5writeEi.isra.0>
  error = Wire.endTransmission();
 23e776c:	f012 fdb4 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e7770:	f011 fbad 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>
    //  0:success
    //  1:data too long to fit in transmit buffer
    //  2:received NACK on transmit of address
    //  3:received NACK on transmit of data
    //  4:other error 
  if (error) {
 23e7774:	4602      	mov	r2, r0
 23e7776:	b370      	cbz	r0, 23e77d6 <_Z16get_Bosch_ChipIDh+0xa2>
    sprintf (msgbuf, "  ERR_ET:%d", error);
 23e7778:	493b      	ldr	r1, [pc, #236]	; (23e7868 <_Z16get_Bosch_ChipIDh+0x134>)
      sprintf (msgbuf, "  CHIPID:%02X BME/390", chip_id);
      Output (msgbuf);
      return (chip_id); // Found a Sensor!   
    }
    else {
      sprintf (msgbuf, "  CHIPID:%02X InValid", chip_id);
 23e777a:	483a      	ldr	r0, [pc, #232]	; (23e7864 <_Z16get_Bosch_ChipIDh+0x130>)
 23e777c:	f010 fd08 	bl	23f8190 <sprintf>
      Output (msgbuf);      
    }
  }
  else {
    sprintf (msgbuf, "  ERR_RF:0");
    Output (msgbuf);
 23e7780:	4838      	ldr	r0, [pc, #224]	; (23e7864 <_Z16get_Bosch_ChipIDh+0x130>)
 23e7782:	f7ff fd2f 	bl	23e71e4 <_Z6OutputPKc>
  }

  // Check Register 0xD0
  chip_id = 0;
  sprintf (msgbuf, "  I2C:%02X Reg:%02X", address, 0xD0);
 23e7786:	23d0      	movs	r3, #208	; 0xd0
 23e7788:	462a      	mov	r2, r5
 23e778a:	4935      	ldr	r1, [pc, #212]	; (23e7860 <_Z16get_Bosch_ChipIDh+0x12c>)
 23e778c:	4835      	ldr	r0, [pc, #212]	; (23e7864 <_Z16get_Bosch_ChipIDh+0x130>)
 23e778e:	f010 fcff 	bl	23f8190 <sprintf>
  Output (msgbuf);
 23e7792:	4834      	ldr	r0, [pc, #208]	; (23e7864 <_Z16get_Bosch_ChipIDh+0x130>)
 23e7794:	f7ff fd26 	bl	23e71e4 <_Z6OutputPKc>
  Wire.begin();
 23e7798:	f012 fd9e 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e779c:	f011 fb62 	bl	23f8e64 <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(address);
 23e77a0:	f012 fd9a 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e77a4:	4629      	mov	r1, r5
 23e77a6:	f011 fb87 	bl	23f8eb8 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(0xD0);  // BM2 CHIPID REGISTER
 23e77aa:	f012 fd95 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e77ae:	21d0      	movs	r1, #208	; 0xd0
 23e77b0:	f7ff f9e0 	bl	23e6b74 <_ZN7TwoWire5writeEi.isra.0>
  error = Wire.endTransmission();
 23e77b4:	f012 fd90 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e77b8:	f011 fb89 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>
    //  0:success
    //  1:data too long to fit in transmit buffer
    //  2:received NACK on transmit of address
    //  3:received NACK on transmit of data
    //  4:other error 
  if (error) {
 23e77bc:	2800      	cmp	r0, #0
 23e77be:	d031      	beq.n	23e7824 <_Z16get_Bosch_ChipIDh+0xf0>
    sprintf (msgbuf, "  ERR_ET:%d", error);
 23e77c0:	4602      	mov	r2, r0
 23e77c2:	4929      	ldr	r1, [pc, #164]	; (23e7868 <_Z16get_Bosch_ChipIDh+0x134>)
 23e77c4:	4827      	ldr	r0, [pc, #156]	; (23e7864 <_Z16get_Bosch_ChipIDh+0x130>)
 23e77c6:	f010 fce3 	bl	23f8190 <sprintf>
    Output (msgbuf);
 23e77ca:	4826      	ldr	r0, [pc, #152]	; (23e7864 <_Z16get_Bosch_ChipIDh+0x130>)
 23e77cc:	f7ff fd0a 	bl	23e71e4 <_Z6OutputPKc>
  }
  else {
    sprintf (msgbuf, "  ERR_RF:0");
    Output (msgbuf);
  }
  return(0);
 23e77d0:	2400      	movs	r4, #0
}
 23e77d2:	4620      	mov	r0, r4
 23e77d4:	bd70      	pop	{r4, r5, r6, pc}
  else if (Wire.requestFrom(address, 1)) {  // Returns the number of bytes returned from the slave device 
 23e77d6:	f012 fd7f 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e77da:	2201      	movs	r2, #1
 23e77dc:	4629      	mov	r1, r5
 23e77de:	f011 fb68 	bl	23f8eb2 <_ZN7TwoWire11requestFromEhj>
 23e77e2:	b1d0      	cbz	r0, 23e781a <_Z16get_Bosch_ChipIDh+0xe6>
    chip_id = Wire.read();
 23e77e4:	f012 fd78 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e77e8:	6803      	ldr	r3, [r0, #0]
 23e77ea:	695b      	ldr	r3, [r3, #20]
 23e77ec:	4798      	blx	r3
 23e77ee:	b2c4      	uxtb	r4, r0
    if (chip_id == BMP280_CHIP_ID) { // 0x58
 23e77f0:	2c58      	cmp	r4, #88	; 0x58
      sprintf (msgbuf, "  CHIPID:%02X BMP280", chip_id);
 23e77f2:	4622      	mov	r2, r4
    if (chip_id == BMP280_CHIP_ID) { // 0x58
 23e77f4:	d101      	bne.n	23e77fa <_Z16get_Bosch_ChipIDh+0xc6>
      sprintf (msgbuf, "  CHIPID:%02X BMP280", chip_id);
 23e77f6:	491d      	ldr	r1, [pc, #116]	; (23e786c <_Z16get_Bosch_ChipIDh+0x138>)
 23e77f8:	e002      	b.n	23e7800 <_Z16get_Bosch_ChipIDh+0xcc>
    else if (chip_id == BMP388_CHIP_ID) {  // 0x50
 23e77fa:	2c50      	cmp	r4, #80	; 0x50
 23e77fc:	d107      	bne.n	23e780e <_Z16get_Bosch_ChipIDh+0xda>
      sprintf (msgbuf, "  CHIPID:%02X BMP388", chip_id);
 23e77fe:	491c      	ldr	r1, [pc, #112]	; (23e7870 <_Z16get_Bosch_ChipIDh+0x13c>)
 23e7800:	4818      	ldr	r0, [pc, #96]	; (23e7864 <_Z16get_Bosch_ChipIDh+0x130>)
 23e7802:	f010 fcc5 	bl	23f8190 <sprintf>
    Output (msgbuf);
 23e7806:	4817      	ldr	r0, [pc, #92]	; (23e7864 <_Z16get_Bosch_ChipIDh+0x130>)
 23e7808:	f7ff fcec 	bl	23e71e4 <_Z6OutputPKc>
 23e780c:	e7e1      	b.n	23e77d2 <_Z16get_Bosch_ChipIDh+0x9e>
    else if (chip_id == BME280_BMP390_CHIP_ID) {  // 0x60
 23e780e:	2c60      	cmp	r4, #96	; 0x60
 23e7810:	d101      	bne.n	23e7816 <_Z16get_Bosch_ChipIDh+0xe2>
      sprintf (msgbuf, "  CHIPID:%02X BME/390", chip_id);
 23e7812:	4918      	ldr	r1, [pc, #96]	; (23e7874 <_Z16get_Bosch_ChipIDh+0x140>)
 23e7814:	e7f4      	b.n	23e7800 <_Z16get_Bosch_ChipIDh+0xcc>
      sprintf (msgbuf, "  CHIPID:%02X InValid", chip_id);
 23e7816:	4918      	ldr	r1, [pc, #96]	; (23e7878 <_Z16get_Bosch_ChipIDh+0x144>)
 23e7818:	e7af      	b.n	23e777a <_Z16get_Bosch_ChipIDh+0x46>
    sprintf (msgbuf, "  ERR_RF:0");
 23e781a:	4918      	ldr	r1, [pc, #96]	; (23e787c <_Z16get_Bosch_ChipIDh+0x148>)
 23e781c:	4811      	ldr	r0, [pc, #68]	; (23e7864 <_Z16get_Bosch_ChipIDh+0x130>)
 23e781e:	f015 fb6b 	bl	23fcef8 <strcpy>
 23e7822:	e7ad      	b.n	23e7780 <_Z16get_Bosch_ChipIDh+0x4c>
  else if (Wire.requestFrom(address, 1)) {  // Returns the number of bytes returned from the slave device 
 23e7824:	f012 fd58 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e7828:	2201      	movs	r2, #1
 23e782a:	4629      	mov	r1, r5
 23e782c:	f011 fb41 	bl	23f8eb2 <_ZN7TwoWire11requestFromEhj>
 23e7830:	4604      	mov	r4, r0
 23e7832:	b170      	cbz	r0, 23e7852 <_Z16get_Bosch_ChipIDh+0x11e>
    chip_id = Wire.read(); 
 23e7834:	f012 fd50 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e7838:	6803      	ldr	r3, [r0, #0]
 23e783a:	695b      	ldr	r3, [r3, #20]
 23e783c:	4798      	blx	r3
 23e783e:	b2c4      	uxtb	r4, r0
    if (chip_id == BMP280_CHIP_ID) { // 0x58
 23e7840:	2c58      	cmp	r4, #88	; 0x58
      sprintf (msgbuf, "  CHIPID:%02X BMP280", chip_id);
 23e7842:	4622      	mov	r2, r4
    if (chip_id == BMP280_CHIP_ID) { // 0x58
 23e7844:	d0d7      	beq.n	23e77f6 <_Z16get_Bosch_ChipIDh+0xc2>
    else if (chip_id == BMP388_CHIP_ID) {  // 0x50
 23e7846:	2c50      	cmp	r4, #80	; 0x50
 23e7848:	d0d9      	beq.n	23e77fe <_Z16get_Bosch_ChipIDh+0xca>
    else if (chip_id == BME280_BMP390_CHIP_ID) {  // 0x60
 23e784a:	2c60      	cmp	r4, #96	; 0x60
 23e784c:	d0e1      	beq.n	23e7812 <_Z16get_Bosch_ChipIDh+0xde>
      sprintf (msgbuf, "  CHIPID:%02X InValid", chip_id);
 23e784e:	490a      	ldr	r1, [pc, #40]	; (23e7878 <_Z16get_Bosch_ChipIDh+0x144>)
 23e7850:	e7b8      	b.n	23e77c4 <_Z16get_Bosch_ChipIDh+0x90>
    sprintf (msgbuf, "  ERR_RF:0");
 23e7852:	490a      	ldr	r1, [pc, #40]	; (23e787c <_Z16get_Bosch_ChipIDh+0x148>)
 23e7854:	4803      	ldr	r0, [pc, #12]	; (23e7864 <_Z16get_Bosch_ChipIDh+0x130>)
 23e7856:	f015 fb4f 	bl	23fcef8 <strcpy>
 23e785a:	e7d4      	b.n	23e7806 <_Z16get_Bosch_ChipIDh+0xd2>
 23e785c:	023fd46b 	.word	0x023fd46b
 23e7860:	023fd47e 	.word	0x023fd47e
 23e7864:	1006f140 	.word	0x1006f140
 23e7868:	023fd492 	.word	0x023fd492
 23e786c:	023fd49e 	.word	0x023fd49e
 23e7870:	023fd4b3 	.word	0x023fd4b3
 23e7874:	023fd4c8 	.word	0x023fd4c8
 23e7878:	023fd4de 	.word	0x023fd4de
 23e787c:	023fd4f4 	.word	0x023fd4f4

023e7880 <_Z14bmx_initializev>:
/* 
 *=======================================================================================================================
 * bmx_initialize() - Bosch sensor initialize
 *=======================================================================================================================
 */
void bmx_initialize() {
 23e7880:	b538      	push	{r3, r4, r5, lr}
  Output("BMX:INIT");
 23e7882:	486e      	ldr	r0, [pc, #440]	; (23e7a3c <_Z14bmx_initializev+0x1bc>)
 23e7884:	f7ff fcae 	bl	23e71e4 <_Z6OutputPKc>
  
  // 1st Bosch Sensor - Need to see which (BMP, BME, BM3) is plugged in
  BMX_1_chip_id = get_Bosch_ChipID(BMX_ADDRESS_1);
 23e7888:	2077      	movs	r0, #119	; 0x77
 23e788a:	f7ff ff53 	bl	23e7734 <_Z16get_Bosch_ChipIDh>
 23e788e:	4b6c      	ldr	r3, [pc, #432]	; (23e7a40 <_Z14bmx_initializev+0x1c0>)

  switch (BMX_1_chip_id) {
 23e7890:	2858      	cmp	r0, #88	; 0x58
  BMX_1_chip_id = get_Bosch_ChipID(BMX_ADDRESS_1);
 23e7892:	4602      	mov	r2, r0
 23e7894:	4c6b      	ldr	r4, [pc, #428]	; (23e7a44 <_Z14bmx_initializev+0x1c4>)
 23e7896:	7018      	strb	r0, [r3, #0]
  switch (BMX_1_chip_id) {
 23e7898:	d011      	beq.n	23e78be <_Z14bmx_initializev+0x3e>
 23e789a:	2860      	cmp	r0, #96	; 0x60
 23e789c:	d046      	beq.n	23e792c <_Z14bmx_initializev+0xac>
 23e789e:	2850      	cmp	r0, #80	; 0x50
 23e78a0:	d176      	bne.n	23e7990 <_Z14bmx_initializev+0x110>
        float p = bme1.readPressure();
      }
    break;

    case BMP388_CHIP_ID :
      if (!bm31.begin_I2C(BMX_ADDRESS_1)) { 
 23e78a2:	f012 fd19 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e78a6:	2177      	movs	r1, #119	; 0x77
 23e78a8:	4602      	mov	r2, r0
 23e78aa:	4867      	ldr	r0, [pc, #412]	; (23e7a48 <_Z14bmx_initializev+0x1c8>)
 23e78ac:	f008 ff96 	bl	23f07dc <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e78b0:	4b66      	ldr	r3, [pc, #408]	; (23e7a4c <_Z14bmx_initializev+0x1cc>)
 23e78b2:	2800      	cmp	r0, #0
 23e78b4:	d165      	bne.n	23e7982 <_Z14bmx_initializev+0x102>
        msgp = (char *) "BM31 ERR";
 23e78b6:	4a66      	ldr	r2, [pc, #408]	; (23e7a50 <_Z14bmx_initializev+0x1d0>)
        BMX_1_exists = false;
 23e78b8:	7018      	strb	r0, [r3, #0]
        msgp = (char *) "BM31 ERR";
 23e78ba:	6022      	str	r2, [r4, #0]
        BMX_1_exists = false;
 23e78bc:	e008      	b.n	23e78d0 <_Z14bmx_initializev+0x50>
      if (!bmp1.begin(BMX_ADDRESS_1)) { 
 23e78be:	2177      	movs	r1, #119	; 0x77
 23e78c0:	4864      	ldr	r0, [pc, #400]	; (23e7a54 <_Z14bmx_initializev+0x1d4>)
 23e78c2:	f008 fd89 	bl	23f03d8 <_ZN15Adafruit_BMP2805beginEhh>
 23e78c6:	4a61      	ldr	r2, [pc, #388]	; (23e7a4c <_Z14bmx_initializev+0x1cc>)
 23e78c8:	b940      	cbnz	r0, 23e78dc <_Z14bmx_initializev+0x5c>
        msgp = (char *) "BMP1 ERR";
 23e78ca:	4b63      	ldr	r3, [pc, #396]	; (23e7a58 <_Z14bmx_initializev+0x1d8>)
        BMX_1_exists = false;
 23e78cc:	7010      	strb	r0, [r2, #0]
        msgp = (char *) "BMP1 ERR";
 23e78ce:	6023      	str	r3, [r4, #0]
        SystemStatusBits |= SSB_BMX_1;  // Turn On Bit          
 23e78d0:	4a62      	ldr	r2, [pc, #392]	; (23e7a5c <_Z14bmx_initializev+0x1dc>)
 23e78d2:	6813      	ldr	r3, [r2, #0]
 23e78d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 23e78d8:	6013      	str	r3, [r2, #0]
 23e78da:	e008      	b.n	23e78ee <_Z14bmx_initializev+0x6e>
        BMX_1_exists = true;
 23e78dc:	2301      	movs	r3, #1
 23e78de:	7013      	strb	r3, [r2, #0]
        BMX_1_type = BMX_TYPE_BMP280;
 23e78e0:	4a5f      	ldr	r2, [pc, #380]	; (23e7a60 <_Z14bmx_initializev+0x1e0>)
        float p = bmp1.readPressure();
 23e78e2:	485c      	ldr	r0, [pc, #368]	; (23e7a54 <_Z14bmx_initializev+0x1d4>)
        BMX_1_type = BMX_TYPE_BMP280;
 23e78e4:	7013      	strb	r3, [r2, #0]
        msgp = (char *) "BMP1 OK";
 23e78e6:	4b5f      	ldr	r3, [pc, #380]	; (23e7a64 <_Z14bmx_initializev+0x1e4>)
 23e78e8:	6023      	str	r3, [r4, #0]
        float p = bmp1.readPressure();
 23e78ea:	f008 fdff 	bl	23f04ec <_ZN15Adafruit_BMP28012readPressureEv>

    default:
      msgp = (char *) "BMX_1 NF";
    break;
  }
  Output (msgp);
 23e78ee:	6820      	ldr	r0, [r4, #0]
 23e78f0:	f7ff fc78 	bl	23e71e4 <_Z6OutputPKc>

  // 2nd Bosch Sensor - Need to see which (BMP, BME, BM3) is plugged in
  BMX_2_chip_id = get_Bosch_ChipID(BMX_ADDRESS_2);
 23e78f4:	2076      	movs	r0, #118	; 0x76
 23e78f6:	f7ff ff1d 	bl	23e7734 <_Z16get_Bosch_ChipIDh>
 23e78fa:	4b5b      	ldr	r3, [pc, #364]	; (23e7a68 <_Z14bmx_initializev+0x1e8>)
  switch (BMX_2_chip_id) {
 23e78fc:	2858      	cmp	r0, #88	; 0x58
  BMX_2_chip_id = get_Bosch_ChipID(BMX_ADDRESS_2);
 23e78fe:	4602      	mov	r2, r0
 23e7900:	7018      	strb	r0, [r3, #0]
  switch (BMX_2_chip_id) {
 23e7902:	d048      	beq.n	23e7996 <_Z14bmx_initializev+0x116>
 23e7904:	2860      	cmp	r0, #96	; 0x60
 23e7906:	d063      	beq.n	23e79d0 <_Z14bmx_initializev+0x150>
 23e7908:	2850      	cmp	r0, #80	; 0x50
 23e790a:	f040 8093 	bne.w	23e7a34 <_Z14bmx_initializev+0x1b4>
        float p = bme2.readPressure();
      }
    break;

    case BMP388_CHIP_ID :
      if (!bm32.begin_I2C(BMX_ADDRESS_2)) { 
 23e790e:	f012 fce3 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e7912:	2176      	movs	r1, #118	; 0x76
 23e7914:	4602      	mov	r2, r0
 23e7916:	4855      	ldr	r0, [pc, #340]	; (23e7a6c <_Z14bmx_initializev+0x1ec>)
 23e7918:	f008 ff60 	bl	23f07dc <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e791c:	4b54      	ldr	r3, [pc, #336]	; (23e7a70 <_Z14bmx_initializev+0x1f0>)
 23e791e:	2800      	cmp	r0, #0
 23e7920:	f040 8081 	bne.w	23e7a26 <_Z14bmx_initializev+0x1a6>
        msgp = (char *) "BM32 ERR";
 23e7924:	4a53      	ldr	r2, [pc, #332]	; (23e7a74 <_Z14bmx_initializev+0x1f4>)
        BMX_2_exists = false;
 23e7926:	7018      	strb	r0, [r3, #0]
        msgp = (char *) "BM32 ERR";
 23e7928:	6022      	str	r2, [r4, #0]
        BMX_2_exists = false;
 23e792a:	e03d      	b.n	23e79a8 <_Z14bmx_initializev+0x128>
      if (!bme1.begin(BMX_ADDRESS_1)) { 
 23e792c:	f012 fcd4 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e7930:	2177      	movs	r1, #119	; 0x77
 23e7932:	4602      	mov	r2, r0
 23e7934:	4850      	ldr	r0, [pc, #320]	; (23e7a78 <_Z14bmx_initializev+0x1f8>)
 23e7936:	f008 f95a 	bl	23efbee <_ZN15Adafruit_BME2805beginEhP7TwoWire>
 23e793a:	4d44      	ldr	r5, [pc, #272]	; (23e7a4c <_Z14bmx_initializev+0x1cc>)
 23e793c:	b9b0      	cbnz	r0, 23e796c <_Z14bmx_initializev+0xec>
        if (!bm31.begin_I2C(BMX_ADDRESS_1)) {  // Perhaps it is a BMP390
 23e793e:	f012 fccb 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e7942:	2177      	movs	r1, #119	; 0x77
 23e7944:	4602      	mov	r2, r0
 23e7946:	4840      	ldr	r0, [pc, #256]	; (23e7a48 <_Z14bmx_initializev+0x1c8>)
 23e7948:	f008 ff48 	bl	23f07dc <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e794c:	b918      	cbnz	r0, 23e7956 <_Z14bmx_initializev+0xd6>
          msgp = (char *) "BMX1 ERR";
 23e794e:	4b4b      	ldr	r3, [pc, #300]	; (23e7a7c <_Z14bmx_initializev+0x1fc>)
          BMX_1_exists = false;
 23e7950:	7028      	strb	r0, [r5, #0]
          msgp = (char *) "BMX1 ERR";
 23e7952:	6023      	str	r3, [r4, #0]
          SystemStatusBits |= SSB_BMX_1;  // Turn On Bit          
 23e7954:	e7bc      	b.n	23e78d0 <_Z14bmx_initializev+0x50>
          BMX_1_exists = true;
 23e7956:	2301      	movs	r3, #1
          BMX_1_type = BMX_TYPE_BMP390;
 23e7958:	2204      	movs	r2, #4
          BMX_1_exists = true;
 23e795a:	702b      	strb	r3, [r5, #0]
          BMX_1_type = BMX_TYPE_BMP390;
 23e795c:	4b40      	ldr	r3, [pc, #256]	; (23e7a60 <_Z14bmx_initializev+0x1e0>)
 23e795e:	701a      	strb	r2, [r3, #0]
          msgp = (char *) "BMP390_1 OK"; 
 23e7960:	4b47      	ldr	r3, [pc, #284]	; (23e7a80 <_Z14bmx_initializev+0x200>)
        float p = bm31.readPressure();
 23e7962:	4839      	ldr	r0, [pc, #228]	; (23e7a48 <_Z14bmx_initializev+0x1c8>)
        msgp = (char *) "BM31 OK";
 23e7964:	6023      	str	r3, [r4, #0]
        float p = bm31.readPressure();
 23e7966:	f008 ffcc 	bl	23f0902 <_ZN15Adafruit_BMP3XX12readPressureEv>
 23e796a:	e7c0      	b.n	23e78ee <_Z14bmx_initializev+0x6e>
        BMX_1_exists = true;
 23e796c:	2301      	movs	r3, #1
        BMX_1_type = BMX_TYPE_BME280;
 23e796e:	2202      	movs	r2, #2
        BMX_1_exists = true;
 23e7970:	702b      	strb	r3, [r5, #0]
        BMX_1_type = BMX_TYPE_BME280;
 23e7972:	4b3b      	ldr	r3, [pc, #236]	; (23e7a60 <_Z14bmx_initializev+0x1e0>)
        float p = bme1.readPressure();
 23e7974:	4840      	ldr	r0, [pc, #256]	; (23e7a78 <_Z14bmx_initializev+0x1f8>)
        BMX_1_type = BMX_TYPE_BME280;
 23e7976:	701a      	strb	r2, [r3, #0]
        msgp = (char *) "BME280_1 OK";
 23e7978:	4b42      	ldr	r3, [pc, #264]	; (23e7a84 <_Z14bmx_initializev+0x204>)
 23e797a:	6023      	str	r3, [r4, #0]
        float p = bme1.readPressure();
 23e797c:	f008 f96e 	bl	23efc5c <_ZN15Adafruit_BME28012readPressureEv>
 23e7980:	e7b5      	b.n	23e78ee <_Z14bmx_initializev+0x6e>
        BMX_1_exists = true;
 23e7982:	2201      	movs	r2, #1
 23e7984:	701a      	strb	r2, [r3, #0]
        BMX_1_type = BMX_TYPE_BMP388;
 23e7986:	2203      	movs	r2, #3
 23e7988:	4b35      	ldr	r3, [pc, #212]	; (23e7a60 <_Z14bmx_initializev+0x1e0>)
 23e798a:	701a      	strb	r2, [r3, #0]
        msgp = (char *) "BM31 OK";
 23e798c:	4b3e      	ldr	r3, [pc, #248]	; (23e7a88 <_Z14bmx_initializev+0x208>)
 23e798e:	e7e8      	b.n	23e7962 <_Z14bmx_initializev+0xe2>
      msgp = (char *) "BMX_1 NF";
 23e7990:	4b3e      	ldr	r3, [pc, #248]	; (23e7a8c <_Z14bmx_initializev+0x20c>)
 23e7992:	6023      	str	r3, [r4, #0]
    break;
 23e7994:	e7ab      	b.n	23e78ee <_Z14bmx_initializev+0x6e>
      if (!bmp2.begin(BMX_ADDRESS_2)) { 
 23e7996:	2176      	movs	r1, #118	; 0x76
 23e7998:	483d      	ldr	r0, [pc, #244]	; (23e7a90 <_Z14bmx_initializev+0x210>)
 23e799a:	f008 fd1d 	bl	23f03d8 <_ZN15Adafruit_BMP2805beginEhh>
 23e799e:	4a34      	ldr	r2, [pc, #208]	; (23e7a70 <_Z14bmx_initializev+0x1f0>)
 23e79a0:	b940      	cbnz	r0, 23e79b4 <_Z14bmx_initializev+0x134>
        msgp = (char *) "BMP2 ERR";
 23e79a2:	4b3c      	ldr	r3, [pc, #240]	; (23e7a94 <_Z14bmx_initializev+0x214>)
        BMX_2_exists = false;
 23e79a4:	7010      	strb	r0, [r2, #0]
        msgp = (char *) "BMP2 ERR";
 23e79a6:	6023      	str	r3, [r4, #0]
        SystemStatusBits |= SSB_BMX_2;  // Turn On Bit          
 23e79a8:	4a2c      	ldr	r2, [pc, #176]	; (23e7a5c <_Z14bmx_initializev+0x1dc>)
 23e79aa:	6813      	ldr	r3, [r2, #0]
 23e79ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 23e79b0:	6013      	str	r3, [r2, #0]
 23e79b2:	e008      	b.n	23e79c6 <_Z14bmx_initializev+0x146>
        BMX_2_exists = true;
 23e79b4:	2301      	movs	r3, #1
 23e79b6:	7013      	strb	r3, [r2, #0]
        BMX_2_type = BMX_TYPE_BMP280;
 23e79b8:	4a37      	ldr	r2, [pc, #220]	; (23e7a98 <_Z14bmx_initializev+0x218>)
        float p = bmp2.readPressure();
 23e79ba:	4835      	ldr	r0, [pc, #212]	; (23e7a90 <_Z14bmx_initializev+0x210>)
        BMX_2_type = BMX_TYPE_BMP280;
 23e79bc:	7013      	strb	r3, [r2, #0]
        msgp = (char *) "BMP2 OK";
 23e79be:	4b37      	ldr	r3, [pc, #220]	; (23e7a9c <_Z14bmx_initializev+0x21c>)
 23e79c0:	6023      	str	r3, [r4, #0]
        float p = bmp2.readPressure();
 23e79c2:	f008 fd93 	bl	23f04ec <_ZN15Adafruit_BMP28012readPressureEv>

    default:
      msgp = (char *) "BMX_2 NF";
    break;
  }
  Output (msgp);
 23e79c6:	6820      	ldr	r0, [r4, #0]
}
 23e79c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
 23e79cc:	f7ff bc0a 	b.w	23e71e4 <_Z6OutputPKc>
      if (!bme2.begin(BMX_ADDRESS_2)) { 
 23e79d0:	f012 fc82 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e79d4:	2176      	movs	r1, #118	; 0x76
 23e79d6:	4602      	mov	r2, r0
 23e79d8:	4831      	ldr	r0, [pc, #196]	; (23e7aa0 <_Z14bmx_initializev+0x220>)
 23e79da:	f008 f908 	bl	23efbee <_ZN15Adafruit_BME2805beginEhP7TwoWire>
 23e79de:	4d24      	ldr	r5, [pc, #144]	; (23e7a70 <_Z14bmx_initializev+0x1f0>)
 23e79e0:	b9b0      	cbnz	r0, 23e7a10 <_Z14bmx_initializev+0x190>
        if (!bm32.begin_I2C(BMX_ADDRESS_2)) {  // Perhaps it is a BMP390
 23e79e2:	f012 fc79 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e79e6:	2176      	movs	r1, #118	; 0x76
 23e79e8:	4602      	mov	r2, r0
 23e79ea:	4820      	ldr	r0, [pc, #128]	; (23e7a6c <_Z14bmx_initializev+0x1ec>)
 23e79ec:	f008 fef6 	bl	23f07dc <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e79f0:	b918      	cbnz	r0, 23e79fa <_Z14bmx_initializev+0x17a>
          msgp = (char *) "BMX2 ERR";
 23e79f2:	4b2c      	ldr	r3, [pc, #176]	; (23e7aa4 <_Z14bmx_initializev+0x224>)
          BMX_2_exists = false;
 23e79f4:	7028      	strb	r0, [r5, #0]
          msgp = (char *) "BMX2 ERR";
 23e79f6:	6023      	str	r3, [r4, #0]
          SystemStatusBits |= SSB_BMX_2;  // Turn On Bit          
 23e79f8:	e7d6      	b.n	23e79a8 <_Z14bmx_initializev+0x128>
          BMX_2_exists = true;
 23e79fa:	2301      	movs	r3, #1
          BMX_2_type = BMX_TYPE_BMP390;
 23e79fc:	2204      	movs	r2, #4
          BMX_2_exists = true;
 23e79fe:	702b      	strb	r3, [r5, #0]
          BMX_2_type = BMX_TYPE_BMP390;
 23e7a00:	4b25      	ldr	r3, [pc, #148]	; (23e7a98 <_Z14bmx_initializev+0x218>)
 23e7a02:	701a      	strb	r2, [r3, #0]
          msgp = (char *) "BMP390_2 OK"; 
 23e7a04:	4b28      	ldr	r3, [pc, #160]	; (23e7aa8 <_Z14bmx_initializev+0x228>)
        float p = bm32.readPressure();
 23e7a06:	4819      	ldr	r0, [pc, #100]	; (23e7a6c <_Z14bmx_initializev+0x1ec>)
        msgp = (char *) "BM32 OK";
 23e7a08:	6023      	str	r3, [r4, #0]
        float p = bm32.readPressure();
 23e7a0a:	f008 ff7a 	bl	23f0902 <_ZN15Adafruit_BMP3XX12readPressureEv>
 23e7a0e:	e7da      	b.n	23e79c6 <_Z14bmx_initializev+0x146>
        BMX_2_exists = true;
 23e7a10:	2301      	movs	r3, #1
        BMX_2_type = BMX_TYPE_BME280;
 23e7a12:	2202      	movs	r2, #2
        BMX_2_exists = true;
 23e7a14:	702b      	strb	r3, [r5, #0]
        BMX_2_type = BMX_TYPE_BME280;
 23e7a16:	4b20      	ldr	r3, [pc, #128]	; (23e7a98 <_Z14bmx_initializev+0x218>)
        float p = bme2.readPressure();
 23e7a18:	4821      	ldr	r0, [pc, #132]	; (23e7aa0 <_Z14bmx_initializev+0x220>)
        BMX_2_type = BMX_TYPE_BME280;
 23e7a1a:	701a      	strb	r2, [r3, #0]
        msgp = (char *) "BME280_2 OK";
 23e7a1c:	4b23      	ldr	r3, [pc, #140]	; (23e7aac <_Z14bmx_initializev+0x22c>)
 23e7a1e:	6023      	str	r3, [r4, #0]
        float p = bme2.readPressure();
 23e7a20:	f008 f91c 	bl	23efc5c <_ZN15Adafruit_BME28012readPressureEv>
 23e7a24:	e7cf      	b.n	23e79c6 <_Z14bmx_initializev+0x146>
        BMX_2_exists = true;
 23e7a26:	2201      	movs	r2, #1
 23e7a28:	701a      	strb	r2, [r3, #0]
        BMX_2_type = BMX_TYPE_BMP388;
 23e7a2a:	2203      	movs	r2, #3
 23e7a2c:	4b1a      	ldr	r3, [pc, #104]	; (23e7a98 <_Z14bmx_initializev+0x218>)
 23e7a2e:	701a      	strb	r2, [r3, #0]
        msgp = (char *) "BM32 OK";
 23e7a30:	4b1f      	ldr	r3, [pc, #124]	; (23e7ab0 <_Z14bmx_initializev+0x230>)
 23e7a32:	e7e8      	b.n	23e7a06 <_Z14bmx_initializev+0x186>
      msgp = (char *) "BMX_2 NF";
 23e7a34:	4b1f      	ldr	r3, [pc, #124]	; (23e7ab4 <_Z14bmx_initializev+0x234>)
 23e7a36:	6023      	str	r3, [r4, #0]
    break;
 23e7a38:	e7c5      	b.n	23e79c6 <_Z14bmx_initializev+0x146>
 23e7a3a:	bf00      	nop
 23e7a3c:	023fd4ff 	.word	0x023fd4ff
 23e7a40:	1006a2b9 	.word	0x1006a2b9
 23e7a44:	1006f540 	.word	0x1006f540
 23e7a48:	1006a960 	.word	0x1006a960
 23e7a4c:	1006a2ba 	.word	0x1006a2ba
 23e7a50:	023fd53a 	.word	0x023fd53a
 23e7a54:	1006ac10 	.word	0x1006ac10
 23e7a58:	023fd508 	.word	0x023fd508
 23e7a5c:	1006a1cc 	.word	0x1006a1cc
 23e7a60:	1006a2bb 	.word	0x1006a2bb
 23e7a64:	023fd511 	.word	0x023fd511
 23e7a68:	1006a2bc 	.word	0x1006a2bc
 23e7a6c:	1006aa60 	.word	0x1006aa60
 23e7a70:	1006a2bd 	.word	0x1006a2bd
 23e7a74:	023fd586 	.word	0x023fd586
 23e7a78:	1006ab60 	.word	0x1006ab60
 23e7a7c:	023fd519 	.word	0x023fd519
 23e7a80:	023fd522 	.word	0x023fd522
 23e7a84:	023fd52e 	.word	0x023fd52e
 23e7a88:	023fd543 	.word	0x023fd543
 23e7a8c:	023fd54b 	.word	0x023fd54b
 23e7a90:	1006ac50 	.word	0x1006ac50
 23e7a94:	023fd554 	.word	0x023fd554
 23e7a98:	1006a2be 	.word	0x1006a2be
 23e7a9c:	023fd55d 	.word	0x023fd55d
 23e7aa0:	1006abb8 	.word	0x1006abb8
 23e7aa4:	023fd565 	.word	0x023fd565
 23e7aa8:	023fd56e 	.word	0x023fd56e
 23e7aac:	023fd57a 	.word	0x023fd57a
 23e7ab0:	023fd58f 	.word	0x023fd58f
 23e7ab4:	023fd597 	.word	0x023fd597

023e7ab8 <_Z17htu21d_initializev>:
/* 
 *=======================================================================================================================
 * htu21d_initialize() - HTU21D sensor initialize
 *=======================================================================================================================
 */
void htu21d_initialize() {
 23e7ab8:	b508      	push	{r3, lr}
  Output("HTU21D:INIT");
 23e7aba:	480f      	ldr	r0, [pc, #60]	; (23e7af8 <_Z17htu21d_initializev+0x40>)
 23e7abc:	f7ff fb92 	bl	23e71e4 <_Z6OutputPKc>
  
  // HTU21DF Humidity & Temp Sensor (I2C ADDRESS = 0x40)
  if (!htu.begin()) {
 23e7ac0:	f012 fc0a 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e7ac4:	4601      	mov	r1, r0
 23e7ac6:	480d      	ldr	r0, [pc, #52]	; (23e7afc <_Z17htu21d_initializev+0x44>)
 23e7ac8:	f009 fef8 	bl	23f18bc <_ZN16Adafruit_HTU21DF5beginEP7TwoWire>
 23e7acc:	4b0c      	ldr	r3, [pc, #48]	; (23e7b00 <_Z17htu21d_initializev+0x48>)
 23e7ace:	4a0d      	ldr	r2, [pc, #52]	; (23e7b04 <_Z17htu21d_initializev+0x4c>)
 23e7ad0:	b960      	cbnz	r0, 23e7aec <_Z17htu21d_initializev+0x34>
    msgp = (char *) "HTU NF";
 23e7ad2:	490d      	ldr	r1, [pc, #52]	; (23e7b08 <_Z17htu21d_initializev+0x50>)
    HTU21DF_exists = false;
 23e7ad4:	7010      	strb	r0, [r2, #0]
    msgp = (char *) "HTU NF";
 23e7ad6:	6019      	str	r1, [r3, #0]
    SystemStatusBits |= SSB_HTU21DF;  // Turn On Bit
 23e7ad8:	490c      	ldr	r1, [pc, #48]	; (23e7b0c <_Z17htu21d_initializev+0x54>)
 23e7ada:	680a      	ldr	r2, [r1, #0]
 23e7adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 23e7ae0:	600a      	str	r2, [r1, #0]
  }
  else {
    HTU21DF_exists = true;
    msgp = (char *) "HTU OK";
  }
  Output (msgp);
 23e7ae2:	6818      	ldr	r0, [r3, #0]
}
 23e7ae4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
 23e7ae8:	f7ff bb7c 	b.w	23e71e4 <_Z6OutputPKc>
    HTU21DF_exists = true;
 23e7aec:	2101      	movs	r1, #1
 23e7aee:	7011      	strb	r1, [r2, #0]
    msgp = (char *) "HTU OK";
 23e7af0:	4a07      	ldr	r2, [pc, #28]	; (23e7b10 <_Z17htu21d_initializev+0x58>)
 23e7af2:	601a      	str	r2, [r3, #0]
 23e7af4:	e7f5      	b.n	23e7ae2 <_Z17htu21d_initializev+0x2a>
 23e7af6:	bf00      	nop
 23e7af8:	023fd5a0 	.word	0x023fd5a0
 23e7afc:	1006aea8 	.word	0x1006aea8
 23e7b00:	1006f540 	.word	0x1006f540
 23e7b04:	1006a2e8 	.word	0x1006a2e8
 23e7b08:	023fd5ac 	.word	0x023fd5ac
 23e7b0c:	1006a1cc 	.word	0x1006a1cc
 23e7b10:	023fd5b3 	.word	0x023fd5b3

023e7b14 <_Z18mcp9808_initializev>:
/* 
 *=======================================================================================================================
 * mcp9808_initialize() - MCP9808 sensor initialize
 *=======================================================================================================================
 */
void mcp9808_initialize() {
 23e7b14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Output("MCP9808:INIT");
 23e7b16:	4844      	ldr	r0, [pc, #272]	; (23e7c28 <_Z18mcp9808_initializev+0x114>)
 23e7b18:	f7ff fb64 	bl	23e71e4 <_Z6OutputPKc>
  
  // 1st MCP9808 Precision I2C Temperature Sensor (I2C ADDRESS = 0x18)
  mcp1 = Adafruit_MCP9808();
 23e7b1c:	a801      	add	r0, sp, #4
 23e7b1e:	f00a f8ab 	bl	23f1c78 <_ZN16Adafruit_MCP9808C1Ev>

/** @brief Common sensor interface to unify various sensors.
 * Intentionally modeled after sensors.h in the Android API:
 * https://github.com/android/platform_hardware_libhardware/blob/master/include/hardware/sensors.h
 */
class Adafruit_Sensor {
 23e7b22:	4842      	ldr	r0, [pc, #264]	; (23e7c2c <_Z18mcp9808_initializev+0x118>)
 23e7b24:	f89d 3008 	ldrb.w	r3, [sp, #8]
  if (!mcp1.begin(MCP_ADDRESS_1)) {
 23e7b28:	2118      	movs	r1, #24
 23e7b2a:	7103      	strb	r3, [r0, #4]

/*!
 *    @brief  Class that stores state and functions for interacting with
 *            MCP9808 Temp Sensor
 */
class Adafruit_MCP9808 : public Adafruit_Sensor {
 23e7b2c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 23e7b30:	4c3f      	ldr	r4, [pc, #252]	; (23e7c30 <_Z18mcp9808_initializev+0x11c>)
 23e7b32:	80c3      	strh	r3, [r0, #6]
 23e7b34:	9b03      	ldr	r3, [sp, #12]
 23e7b36:	6083      	str	r3, [r0, #8]
 23e7b38:	f00a f903 	bl	23f1d42 <_ZN16Adafruit_MCP98085beginEh>
 23e7b3c:	4b3d      	ldr	r3, [pc, #244]	; (23e7c34 <_Z18mcp9808_initializev+0x120>)
 23e7b3e:	2800      	cmp	r0, #0
 23e7b40:	d15e      	bne.n	23e7c00 <_Z18mcp9808_initializev+0xec>
    msgp = (char *) "MCP1 NF";
 23e7b42:	4a3d      	ldr	r2, [pc, #244]	; (23e7c38 <_Z18mcp9808_initializev+0x124>)
    MCP_1_exists = false;
 23e7b44:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "MCP1 NF";
 23e7b46:	6022      	str	r2, [r4, #0]
    SystemStatusBits |= SSB_MCP_1;  // Turn On Bit
 23e7b48:	4a3c      	ldr	r2, [pc, #240]	; (23e7c3c <_Z18mcp9808_initializev+0x128>)
 23e7b4a:	6813      	ldr	r3, [r2, #0]
 23e7b4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 23e7b50:	6013      	str	r3, [r2, #0]
  }
  else {
    MCP_1_exists = true;
    msgp = (char *) "MCP1 OK";
  }
  Output (msgp);
 23e7b52:	6820      	ldr	r0, [r4, #0]
 23e7b54:	f7ff fb46 	bl	23e71e4 <_Z6OutputPKc>

  // 2nd MCP9808 Precision I2C Temperature Sensor (I2C ADDRESS = 0x19)
  mcp2 = Adafruit_MCP9808();
 23e7b58:	a801      	add	r0, sp, #4
 23e7b5a:	f00a f88d 	bl	23f1c78 <_ZN16Adafruit_MCP9808C1Ev>
 23e7b5e:	4838      	ldr	r0, [pc, #224]	; (23e7c40 <_Z18mcp9808_initializev+0x12c>)
 23e7b60:	f89d 3008 	ldrb.w	r3, [sp, #8]
  if (!mcp2.begin(MCP_ADDRESS_2)) {
 23e7b64:	2119      	movs	r1, #25
 23e7b66:	7103      	strb	r3, [r0, #4]
 23e7b68:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 23e7b6c:	80c3      	strh	r3, [r0, #6]
 23e7b6e:	9b03      	ldr	r3, [sp, #12]
 23e7b70:	6083      	str	r3, [r0, #8]
 23e7b72:	f00a f8e6 	bl	23f1d42 <_ZN16Adafruit_MCP98085beginEh>
 23e7b76:	4b33      	ldr	r3, [pc, #204]	; (23e7c44 <_Z18mcp9808_initializev+0x130>)
 23e7b78:	2800      	cmp	r0, #0
 23e7b7a:	d146      	bne.n	23e7c0a <_Z18mcp9808_initializev+0xf6>
    msgp = (char *) "MCP2 NF";
 23e7b7c:	4a32      	ldr	r2, [pc, #200]	; (23e7c48 <_Z18mcp9808_initializev+0x134>)
    MCP_2_exists = false;
 23e7b7e:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "MCP2 NF";
 23e7b80:	6022      	str	r2, [r4, #0]
    SystemStatusBits |= SSB_MCP_2;  // Turn On Bit
 23e7b82:	4a2e      	ldr	r2, [pc, #184]	; (23e7c3c <_Z18mcp9808_initializev+0x128>)
 23e7b84:	6813      	ldr	r3, [r2, #0]
 23e7b86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 23e7b8a:	6013      	str	r3, [r2, #0]
  }
  else {
    MCP_2_exists = true;
    msgp = (char *) "MCP2 OK";
  }
  Output (msgp);
 23e7b8c:	6820      	ldr	r0, [r4, #0]
 23e7b8e:	f7ff fb29 	bl	23e71e4 <_Z6OutputPKc>

  // 3rd MCP9808 Precision I2C Temperature Sensor (I2C ADDRESS = 0x20)
  mcp3 = Adafruit_MCP9808();
 23e7b92:	a801      	add	r0, sp, #4
 23e7b94:	f00a f870 	bl	23f1c78 <_ZN16Adafruit_MCP9808C1Ev>
 23e7b98:	482c      	ldr	r0, [pc, #176]	; (23e7c4c <_Z18mcp9808_initializev+0x138>)
 23e7b9a:	f89d 3008 	ldrb.w	r3, [sp, #8]
  if (!mcp3.begin(MCP_ADDRESS_3)) {
 23e7b9e:	211a      	movs	r1, #26
 23e7ba0:	7103      	strb	r3, [r0, #4]
 23e7ba2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 23e7ba6:	80c3      	strh	r3, [r0, #6]
 23e7ba8:	9b03      	ldr	r3, [sp, #12]
 23e7baa:	6083      	str	r3, [r0, #8]
 23e7bac:	f00a f8c9 	bl	23f1d42 <_ZN16Adafruit_MCP98085beginEh>
 23e7bb0:	4b27      	ldr	r3, [pc, #156]	; (23e7c50 <_Z18mcp9808_initializev+0x13c>)
 23e7bb2:	2800      	cmp	r0, #0
 23e7bb4:	d12e      	bne.n	23e7c14 <_Z18mcp9808_initializev+0x100>
    msgp = (char *) "MCP3 NF";
 23e7bb6:	4a27      	ldr	r2, [pc, #156]	; (23e7c54 <_Z18mcp9808_initializev+0x140>)
    MCP_3_exists = false;
 23e7bb8:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "MCP3 NF";
 23e7bba:	6022      	str	r2, [r4, #0]
    SystemStatusBits |= SSB_MCP_3;  // Turn On Bit
 23e7bbc:	4a1f      	ldr	r2, [pc, #124]	; (23e7c3c <_Z18mcp9808_initializev+0x128>)
 23e7bbe:	6813      	ldr	r3, [r2, #0]
 23e7bc0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 23e7bc4:	6013      	str	r3, [r2, #0]
  }
  else {
    MCP_3_exists = true;
    msgp = (char *) "MCP3 OK";
  }
  Output (msgp);
 23e7bc6:	6820      	ldr	r0, [r4, #0]
 23e7bc8:	f7ff fb0c 	bl	23e71e4 <_Z6OutputPKc>

  // 4rd MCP9808 Precision I2C Temperature Sensor (I2C ADDRESS = 0x21)
  mcp4 = Adafruit_MCP9808();
 23e7bcc:	a801      	add	r0, sp, #4
 23e7bce:	f00a f853 	bl	23f1c78 <_ZN16Adafruit_MCP9808C1Ev>
 23e7bd2:	4821      	ldr	r0, [pc, #132]	; (23e7c58 <_Z18mcp9808_initializev+0x144>)
 23e7bd4:	f89d 3008 	ldrb.w	r3, [sp, #8]
  if (!mcp4.begin(MCP_ADDRESS_4)) {
 23e7bd8:	211b      	movs	r1, #27
 23e7bda:	7103      	strb	r3, [r0, #4]
 23e7bdc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 23e7be0:	80c3      	strh	r3, [r0, #6]
 23e7be2:	9b03      	ldr	r3, [sp, #12]
 23e7be4:	6083      	str	r3, [r0, #8]
 23e7be6:	f00a f8ac 	bl	23f1d42 <_ZN16Adafruit_MCP98085beginEh>
 23e7bea:	4b1c      	ldr	r3, [pc, #112]	; (23e7c5c <_Z18mcp9808_initializev+0x148>)
 23e7bec:	b9b8      	cbnz	r0, 23e7c1e <_Z18mcp9808_initializev+0x10a>
    msgp = (char *) "MCP4 NF";
 23e7bee:	4a1c      	ldr	r2, [pc, #112]	; (23e7c60 <_Z18mcp9808_initializev+0x14c>)
    MCP_4_exists = false;
 23e7bf0:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "MCP4 NF";
 23e7bf2:	6022      	str	r2, [r4, #0]
  }
  else {
    MCP_4_exists = true;
    msgp = (char *) "MCP4 OK";
  }
  Output (msgp);
 23e7bf4:	6820      	ldr	r0, [r4, #0]
}
 23e7bf6:	b004      	add	sp, #16
 23e7bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Output (msgp);
 23e7bfc:	f7ff baf2 	b.w	23e71e4 <_Z6OutputPKc>
    MCP_1_exists = true;
 23e7c00:	2201      	movs	r2, #1
 23e7c02:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "MCP1 OK";
 23e7c04:	4b17      	ldr	r3, [pc, #92]	; (23e7c64 <_Z18mcp9808_initializev+0x150>)
 23e7c06:	6023      	str	r3, [r4, #0]
 23e7c08:	e7a3      	b.n	23e7b52 <_Z18mcp9808_initializev+0x3e>
    MCP_2_exists = true;
 23e7c0a:	2201      	movs	r2, #1
 23e7c0c:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "MCP2 OK";
 23e7c0e:	4b16      	ldr	r3, [pc, #88]	; (23e7c68 <_Z18mcp9808_initializev+0x154>)
 23e7c10:	6023      	str	r3, [r4, #0]
 23e7c12:	e7bb      	b.n	23e7b8c <_Z18mcp9808_initializev+0x78>
    MCP_3_exists = true;
 23e7c14:	2201      	movs	r2, #1
 23e7c16:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "MCP3 OK";
 23e7c18:	4b14      	ldr	r3, [pc, #80]	; (23e7c6c <_Z18mcp9808_initializev+0x158>)
 23e7c1a:	6023      	str	r3, [r4, #0]
 23e7c1c:	e7d3      	b.n	23e7bc6 <_Z18mcp9808_initializev+0xb2>
    MCP_4_exists = true;
 23e7c1e:	2201      	movs	r2, #1
 23e7c20:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "MCP4 OK";
 23e7c22:	4b13      	ldr	r3, [pc, #76]	; (23e7c70 <_Z18mcp9808_initializev+0x15c>)
 23e7c24:	6023      	str	r3, [r4, #0]
 23e7c26:	e7e5      	b.n	23e7bf4 <_Z18mcp9808_initializev+0xe0>
 23e7c28:	023fd5ba 	.word	0x023fd5ba
 23e7c2c:	1006f110 	.word	0x1006f110
 23e7c30:	1006f540 	.word	0x1006f540
 23e7c34:	1006a300 	.word	0x1006a300
 23e7c38:	023fd5c7 	.word	0x023fd5c7
 23e7c3c:	1006a1cc 	.word	0x1006a1cc
 23e7c40:	1006f11c 	.word	0x1006f11c
 23e7c44:	1006a301 	.word	0x1006a301
 23e7c48:	023fd5d7 	.word	0x023fd5d7
 23e7c4c:	1006f128 	.word	0x1006f128
 23e7c50:	1006a302 	.word	0x1006a302
 23e7c54:	023fd5e7 	.word	0x023fd5e7
 23e7c58:	1006f134 	.word	0x1006f134
 23e7c5c:	1006a303 	.word	0x1006a303
 23e7c60:	023fd5f7 	.word	0x023fd5f7
 23e7c64:	023fd5cf 	.word	0x023fd5cf
 23e7c68:	023fd5df 	.word	0x023fd5df
 23e7c6c:	023fd5ef 	.word	0x023fd5ef
 23e7c70:	023fd5ff 	.word	0x023fd5ff

023e7c74 <_Z14sht_initializev>:
/* 
 *=======================================================================================================================
 * sht_initialize() - SHT31 sensor initialize
 *=======================================================================================================================
 */
void sht_initialize() {
 23e7c74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  Output("SHT:INIT");
 23e7c76:	4828      	ldr	r0, [pc, #160]	; (23e7d18 <_Z14sht_initializev+0xa4>)
 23e7c78:	f7ff fab4 	bl	23e71e4 <_Z6OutputPKc>
  
  // 1st SHT31 I2C Temperature/Humidity Sensor (I2C ADDRESS = 0x44)
  sht1 = Adafruit_SHT31();
 23e7c7c:	466c      	mov	r4, sp
 23e7c7e:	f012 fb2b 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e7c82:	4d26      	ldr	r5, [pc, #152]	; (23e7d1c <_Z14sht_initializev+0xa8>)
 23e7c84:	4601      	mov	r1, r0
 23e7c86:	4620      	mov	r0, r4
 23e7c88:	f00a f94a 	bl	23f1f20 <_ZN14Adafruit_SHT31C1EP7TwoWire>
 23e7c8c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 23e7c90:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 23e7c94:	4620      	mov	r0, r4
 23e7c96:	f00a f94d 	bl	23f1f34 <_ZN14Adafruit_SHT31D1Ev>
  if (!sht1.begin(SHT_ADDRESS_1)) {
 23e7c9a:	4628      	mov	r0, r5
 23e7c9c:	2144      	movs	r1, #68	; 0x44
 23e7c9e:	f00a f980 	bl	23f1fa2 <_ZN14Adafruit_SHT315beginEh>
 23e7ca2:	4d1f      	ldr	r5, [pc, #124]	; (23e7d20 <_Z14sht_initializev+0xac>)
 23e7ca4:	4b1f      	ldr	r3, [pc, #124]	; (23e7d24 <_Z14sht_initializev+0xb0>)
 23e7ca6:	bb60      	cbnz	r0, 23e7d02 <_Z14sht_initializev+0x8e>
    msgp = (char *) "SHT1 NF";
 23e7ca8:	4a1f      	ldr	r2, [pc, #124]	; (23e7d28 <_Z14sht_initializev+0xb4>)
    SHT_1_exists = false;
 23e7caa:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "SHT1 NF";
 23e7cac:	602a      	str	r2, [r5, #0]
    SystemStatusBits |= SSB_SHT_1;  // Turn On Bit
 23e7cae:	4a1f      	ldr	r2, [pc, #124]	; (23e7d2c <_Z14sht_initializev+0xb8>)
 23e7cb0:	6813      	ldr	r3, [r2, #0]
 23e7cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 23e7cb6:	6013      	str	r3, [r2, #0]
  }
  else {
    SHT_1_exists = true;
    msgp = (char *) "SHT1 OK";
  }
  Output (msgp);
 23e7cb8:	6828      	ldr	r0, [r5, #0]
 23e7cba:	f7ff fa93 	bl	23e71e4 <_Z6OutputPKc>

  // 2nd SHT31 I2C Temperature/Humidity Sensor (I2C ADDRESS = 0x45)
  sht2 = Adafruit_SHT31();
 23e7cbe:	f012 fb0b 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e7cc2:	4e1b      	ldr	r6, [pc, #108]	; (23e7d30 <_Z14sht_initializev+0xbc>)
 23e7cc4:	4601      	mov	r1, r0
 23e7cc6:	4620      	mov	r0, r4
 23e7cc8:	f00a f92a 	bl	23f1f20 <_ZN14Adafruit_SHT31C1EP7TwoWire>
 23e7ccc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 23e7cd0:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 23e7cd4:	4620      	mov	r0, r4
 23e7cd6:	f00a f92d 	bl	23f1f34 <_ZN14Adafruit_SHT31D1Ev>
  if (!sht2.begin(SHT_ADDRESS_2)) {
 23e7cda:	2145      	movs	r1, #69	; 0x45
 23e7cdc:	4630      	mov	r0, r6
 23e7cde:	f00a f960 	bl	23f1fa2 <_ZN14Adafruit_SHT315beginEh>
 23e7ce2:	4b14      	ldr	r3, [pc, #80]	; (23e7d34 <_Z14sht_initializev+0xc0>)
 23e7ce4:	b990      	cbnz	r0, 23e7d0c <_Z14sht_initializev+0x98>
    msgp = (char *) "SHT2 NF";
 23e7ce6:	4a14      	ldr	r2, [pc, #80]	; (23e7d38 <_Z14sht_initializev+0xc4>)
    SHT_2_exists = false;
 23e7ce8:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "SHT2 NF";
 23e7cea:	602a      	str	r2, [r5, #0]
    SystemStatusBits |= SSB_SHT_2;  // Turn On Bit
 23e7cec:	4a0f      	ldr	r2, [pc, #60]	; (23e7d2c <_Z14sht_initializev+0xb8>)
 23e7cee:	6813      	ldr	r3, [r2, #0]
 23e7cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 23e7cf4:	6013      	str	r3, [r2, #0]
  }
  else {
    SHT_2_exists = true;
    msgp = (char *) "SHT2 OK";
  }
  Output (msgp);
 23e7cf6:	6828      	ldr	r0, [r5, #0]
}
 23e7cf8:	b004      	add	sp, #16
 23e7cfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Output (msgp);
 23e7cfe:	f7ff ba71 	b.w	23e71e4 <_Z6OutputPKc>
    SHT_1_exists = true;
 23e7d02:	2201      	movs	r2, #1
 23e7d04:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "SHT1 OK";
 23e7d06:	4b0d      	ldr	r3, [pc, #52]	; (23e7d3c <_Z14sht_initializev+0xc8>)
 23e7d08:	602b      	str	r3, [r5, #0]
 23e7d0a:	e7d5      	b.n	23e7cb8 <_Z14sht_initializev+0x44>
    SHT_2_exists = true;
 23e7d0c:	2201      	movs	r2, #1
 23e7d0e:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "SHT2 OK";
 23e7d10:	4b0b      	ldr	r3, [pc, #44]	; (23e7d40 <_Z14sht_initializev+0xcc>)
 23e7d12:	602b      	str	r3, [r5, #0]
 23e7d14:	e7ef      	b.n	23e7cf6 <_Z14sht_initializev+0x82>
 23e7d16:	bf00      	nop
 23e7d18:	023fd607 	.word	0x023fd607
 23e7d1c:	1007abb8 	.word	0x1007abb8
 23e7d20:	1006f540 	.word	0x1006f540
 23e7d24:	1006a808 	.word	0x1006a808
 23e7d28:	023fd610 	.word	0x023fd610
 23e7d2c:	1006a1cc 	.word	0x1006a1cc
 23e7d30:	1007abc8 	.word	0x1007abc8
 23e7d34:	1006a809 	.word	0x1006a809
 23e7d38:	023fd620 	.word	0x023fd620
 23e7d3c:	023fd618 	.word	0x023fd618
 23e7d40:	023fd628 	.word	0x023fd628

023e7d44 <_Z15hih8_initializev>:
/* 
 *=======================================================================================================================
 * hih8_initialize() - HIH8000 sensor initialize
 *=======================================================================================================================
 */
void hih8_initialize() {
 23e7d44:	b508      	push	{r3, lr}
  Output("HIH8:INIT");
 23e7d46:	480d      	ldr	r0, [pc, #52]	; (23e7d7c <_Z15hih8_initializev+0x38>)
 23e7d48:	f7ff fa4c 	bl	23e71e4 <_Z6OutputPKc>

  if (I2C_Device_Exist(HIH8000_ADDRESS)) {
 23e7d4c:	2027      	movs	r0, #39	; 0x27
 23e7d4e:	f7ff f86c 	bl	23e6e2a <_Z16I2C_Device_Existh>
 23e7d52:	4a0b      	ldr	r2, [pc, #44]	; (23e7d80 <_Z15hih8_initializev+0x3c>)
 23e7d54:	4b0b      	ldr	r3, [pc, #44]	; (23e7d84 <_Z15hih8_initializev+0x40>)
 23e7d56:	b140      	cbz	r0, 23e7d6a <_Z15hih8_initializev+0x26>
    HIH8_exists = true;
 23e7d58:	2101      	movs	r1, #1
 23e7d5a:	7011      	strb	r1, [r2, #0]
    msgp = (char *) "HIH8 OK";
 23e7d5c:	4a0a      	ldr	r2, [pc, #40]	; (23e7d88 <_Z15hih8_initializev+0x44>)
 23e7d5e:	601a      	str	r2, [r3, #0]
  else {
    msgp = (char *) "HIH8 NF";
    HIH8_exists = false;
    SystemStatusBits |= SSB_HIH8;  // Turn On Bit
  }
  Output (msgp);
 23e7d60:	6818      	ldr	r0, [r3, #0]
}
 23e7d62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
 23e7d66:	f7ff ba3d 	b.w	23e71e4 <_Z6OutputPKc>
    msgp = (char *) "HIH8 NF";
 23e7d6a:	4908      	ldr	r1, [pc, #32]	; (23e7d8c <_Z15hih8_initializev+0x48>)
    HIH8_exists = false;
 23e7d6c:	7010      	strb	r0, [r2, #0]
    msgp = (char *) "HIH8 NF";
 23e7d6e:	6019      	str	r1, [r3, #0]
    SystemStatusBits |= SSB_HIH8;  // Turn On Bit
 23e7d70:	4907      	ldr	r1, [pc, #28]	; (23e7d90 <_Z15hih8_initializev+0x4c>)
 23e7d72:	680a      	ldr	r2, [r1, #0]
 23e7d74:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 23e7d78:	600a      	str	r2, [r1, #0]
 23e7d7a:	e7f1      	b.n	23e7d60 <_Z15hih8_initializev+0x1c>
 23e7d7c:	023fd630 	.word	0x023fd630
 23e7d80:	1006a2e6 	.word	0x1006a2e6
 23e7d84:	1006f540 	.word	0x1006f540
 23e7d88:	023fd63a 	.word	0x023fd63a
 23e7d8c:	023fd642 	.word	0x023fd642
 23e7d90:	1006a1cc 	.word	0x1006a1cc
 23e7d94:	00000000 	.word	0x00000000

023e7d98 <_Z17hih8_getTempHumidPfS_>:
 *=======================================================================================================================
 * hih8_getTempHumid() - Get Temp and Humidity
 *   Call example:  status = hih8_getTempHumid(&t, &h);
 *=======================================================================================================================
 */
bool hih8_getTempHumid(float *t, float *h) {
 23e7d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (HIH8_exists) {
 23e7d9c:	4b54      	ldr	r3, [pc, #336]	; (23e7ef0 <_Z17hih8_getTempHumidPfS_+0x158>)
bool hih8_getTempHumid(float *t, float *h) {
 23e7d9e:	4604      	mov	r4, r0
  if (HIH8_exists) {
 23e7da0:	f893 8000 	ldrb.w	r8, [r3]
bool hih8_getTempHumid(float *t, float *h) {
 23e7da4:	460d      	mov	r5, r1
  if (HIH8_exists) {
 23e7da6:	f1b8 0f00 	cmp.w	r8, #0
 23e7daa:	f000 8086 	beq.w	23e7eba <_Z17hih8_getTempHumidPfS_+0x122>
    uint16_t humidityBuffer    = 0;
    uint16_t temperatureBuffer = 0;
  
    Wire.begin();
 23e7dae:	f012 fa93 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e7db2:	f011 f857 	bl	23f8e64 <_ZN7TwoWire5beginEv>
    Wire.beginTransmission(HIH8000_ADDRESS);
 23e7db6:	f012 fa8f 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e7dba:	2127      	movs	r1, #39	; 0x27
 23e7dbc:	f011 f880 	bl	23f8ec0 <_ZN7TwoWire17beginTransmissionEi>

    Wire.write(0x00); // set the register location for read request
 23e7dc0:	f012 fa8a 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e7dc4:	2100      	movs	r1, #0
 23e7dc6:	f7fe fed5 	bl	23e6b74 <_ZN7TwoWire5writeEi.isra.0>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 23e7dca:	20c8      	movs	r0, #200	; 0xc8
 23e7dcc:	f00f fbea 	bl	23f75a4 <HAL_Delay_Microseconds>

    delayMicroseconds(200); // give some time for sensor to process request

    if (Wire.requestFrom(HIH8000_ADDRESS, 4) == 4) {
 23e7dd0:	f012 fa82 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e7dd4:	2204      	movs	r2, #4
 23e7dd6:	2127      	movs	r1, #39	; 0x27
 23e7dd8:	f011 f86b 	bl	23f8eb2 <_ZN7TwoWire11requestFromEhj>
 23e7ddc:	2804      	cmp	r0, #4
 23e7dde:	d175      	bne.n	23e7ecc <_Z17hih8_getTempHumidPfS_+0x134>

      // Get raw humidity data
      humidityBuffer = Wire.read();
 23e7de0:	f012 fa7a 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e7de4:	6803      	ldr	r3, [r0, #0]
 23e7de6:	695b      	ldr	r3, [r3, #20]
 23e7de8:	4798      	blx	r3
 23e7dea:	b287      	uxth	r7, r0
      humidityBuffer <<= 8;
      humidityBuffer |= Wire.read();
 23e7dec:	f012 fa74 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e7df0:	6803      	ldr	r3, [r0, #0]
 23e7df2:	695b      	ldr	r3, [r3, #20]
 23e7df4:	4798      	blx	r3
 23e7df6:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
 23e7dfa:	b287      	uxth	r7, r0
      humidityBuffer &= 0x3FFF;   // 14bit value, get rid of the upper 2 status bits

      // Get raw temperature data
      temperatureBuffer = Wire.read();
 23e7dfc:	f012 fa6c 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e7e00:	6803      	ldr	r3, [r0, #0]
 23e7e02:	695b      	ldr	r3, [r3, #20]
 23e7e04:	4798      	blx	r3
 23e7e06:	b286      	uxth	r6, r0
      temperatureBuffer <<= 8;
      temperatureBuffer |= Wire.read();
 23e7e08:	f012 fa66 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e7e0c:	6803      	ldr	r3, [r0, #0]
 23e7e0e:	695b      	ldr	r3, [r3, #20]
 23e7e10:	4798      	blx	r3
 23e7e12:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 23e7e16:	b286      	uxth	r6, r0
      temperatureBuffer >>= 2;  // Remove the last two "Do Not Care" bits (shift left is same as divide by 4)

      Wire.endTransmission();
 23e7e18:	f012 fa5e 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e7e1c:	f011 f857 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>

      *h = humidityBuffer * 6.10e-3;
 23e7e20:	f3c7 000d 	ubfx	r0, r7, #0, #14
 23e7e24:	f7fd fa3e 	bl	23e52a4 <__aeabi_i2d>
 23e7e28:	a32d      	add	r3, pc, #180	; (adr r3, 23e7ee0 <_Z17hih8_getTempHumidPfS_+0x148>)
 23e7e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e7e2e:	f7fd faa3 	bl	23e5378 <__aeabi_dmul>
 23e7e32:	f7fd fd99 	bl	23e5968 <__aeabi_d2f>
 23e7e36:	6028      	str	r0, [r5, #0]
      *t = temperatureBuffer * 1.007e-2 - 40.0;
 23e7e38:	08b0      	lsrs	r0, r6, #2
 23e7e3a:	f7fd fa33 	bl	23e52a4 <__aeabi_i2d>
 23e7e3e:	a32a      	add	r3, pc, #168	; (adr r3, 23e7ee8 <_Z17hih8_getTempHumidPfS_+0x150>)
 23e7e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e7e44:	f7fd fa98 	bl	23e5378 <__aeabi_dmul>
 23e7e48:	2200      	movs	r2, #0
 23e7e4a:	4b2a      	ldr	r3, [pc, #168]	; (23e7ef4 <_Z17hih8_getTempHumidPfS_+0x15c>)
 23e7e4c:	f7fd f8dc 	bl	23e5008 <__aeabi_dsub>
 23e7e50:	f7fd fd8a 	bl	23e5968 <__aeabi_d2f>
 23e7e54:	6020      	str	r0, [r4, #0]

      // QC Check
      *h = (isnan(*h) || (*h < QC_MIN_RH) || (*h >QC_MAX_RH)) ? QC_ERR_RH : *h;
 23e7e56:	edd5 7a00 	vldr	s15, [r5]
 23e7e5a:	eef4 7a67 	vcmp.f32	s15, s15
 23e7e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e7e62:	d62d      	bvs.n	23e7ec0 <_Z17hih8_getTempHumidPfS_+0x128>
 23e7e64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23e7e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e7e6c:	d428      	bmi.n	23e7ec0 <_Z17hih8_getTempHumidPfS_+0x128>
 23e7e6e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 23e7ef8 <_Z17hih8_getTempHumidPfS_+0x160>
 23e7e72:	eef4 7a47 	vcmp.f32	s15, s14
 23e7e76:	ed9f 7a21 	vldr	s14, [pc, #132]	; 23e7efc <_Z17hih8_getTempHumidPfS_+0x164>
 23e7e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e7e7e:	fe77 7a27 	vselgt.f32	s15, s14, s15
 23e7e82:	edc5 7a00 	vstr	s15, [r5]
      *t = (isnan(*t) || (*t < QC_MIN_T)  || (*t >QC_MAX_T))  ? QC_ERR_T  : *t;
 23e7e86:	edd4 7a00 	vldr	s15, [r4]
 23e7e8a:	eef4 7a67 	vcmp.f32	s15, s15
 23e7e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e7e92:	d618      	bvs.n	23e7ec6 <_Z17hih8_getTempHumidPfS_+0x12e>
 23e7e94:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 23e7f00 <_Z17hih8_getTempHumidPfS_+0x168>
 23e7e98:	eef4 7ac7 	vcmpe.f32	s15, s14
 23e7e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e7ea0:	d411      	bmi.n	23e7ec6 <_Z17hih8_getTempHumidPfS_+0x12e>
 23e7ea2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 23e7f04 <_Z17hih8_getTempHumidPfS_+0x16c>
 23e7ea6:	eef4 7a47 	vcmp.f32	s15, s14
 23e7eaa:	ed9f 7a14 	vldr	s14, [pc, #80]	; 23e7efc <_Z17hih8_getTempHumidPfS_+0x164>
 23e7eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e7eb2:	fe77 7a27 	vselgt.f32	s15, s14, s15
 23e7eb6:	edc4 7a00 	vstr	s15, [r4]
    }
  }
  else {
    return (false);
  }
}
 23e7eba:	4640      	mov	r0, r8
 23e7ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *h = (isnan(*h) || (*h < QC_MIN_RH) || (*h >QC_MAX_RH)) ? QC_ERR_RH : *h;
 23e7ec0:	eddf 7a0e 	vldr	s15, [pc, #56]	; 23e7efc <_Z17hih8_getTempHumidPfS_+0x164>
 23e7ec4:	e7dd      	b.n	23e7e82 <_Z17hih8_getTempHumidPfS_+0xea>
      *t = (isnan(*t) || (*t < QC_MIN_T)  || (*t >QC_MAX_T))  ? QC_ERR_T  : *t;
 23e7ec6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 23e7efc <_Z17hih8_getTempHumidPfS_+0x164>
 23e7eca:	e7f4      	b.n	23e7eb6 <_Z17hih8_getTempHumidPfS_+0x11e>
      Wire.endTransmission();
 23e7ecc:	f012 fa04 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e7ed0:	f010 fffd 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>
      return(false);
 23e7ed4:	f04f 0800 	mov.w	r8, #0
 23e7ed8:	e7ef      	b.n	23e7eba <_Z17hih8_getTempHumidPfS_+0x122>
 23e7eda:	bf00      	nop
 23e7edc:	f3af 8000 	nop.w
 23e7ee0:	4816f007 	.word	0x4816f007
 23e7ee4:	3f78fc50 	.word	0x3f78fc50
 23e7ee8:	855da273 	.word	0x855da273
 23e7eec:	3f849f94 	.word	0x3f849f94
 23e7ef0:	1006a2e6 	.word	0x1006a2e6
 23e7ef4:	40440000 	.word	0x40440000
 23e7ef8:	42c80000 	.word	0x42c80000
 23e7efc:	c479f99a 	.word	0xc479f99a
 23e7f00:	c2200000 	.word	0xc2200000
 23e7f04:	42700000 	.word	0x42700000

023e7f08 <_Z14wbt_initializev>:
/* 
 *=======================================================================================================================
 * wbt_initialize() - Wet Bulb Temperature
 *=======================================================================================================================
 */
void wbt_initialize() {
 23e7f08:	b508      	push	{r3, lr}
  Output("WBT:INIT");
 23e7f0a:	4809      	ldr	r0, [pc, #36]	; (23e7f30 <_Z14wbt_initializev+0x28>)
 23e7f0c:	f7ff f96a 	bl	23e71e4 <_Z6OutputPKc>
  if (MCP_1_exists && SHT_1_exists) {
 23e7f10:	4b08      	ldr	r3, [pc, #32]	; (23e7f34 <_Z14wbt_initializev+0x2c>)
 23e7f12:	781b      	ldrb	r3, [r3, #0]
 23e7f14:	b153      	cbz	r3, 23e7f2c <_Z14wbt_initializev+0x24>
 23e7f16:	4b08      	ldr	r3, [pc, #32]	; (23e7f38 <_Z14wbt_initializev+0x30>)
 23e7f18:	781b      	ldrb	r3, [r3, #0]
 23e7f1a:	b13b      	cbz	r3, 23e7f2c <_Z14wbt_initializev+0x24>
    WBT_exists = true;
 23e7f1c:	2201      	movs	r2, #1
 23e7f1e:	4b07      	ldr	r3, [pc, #28]	; (23e7f3c <_Z14wbt_initializev+0x34>)
    Output ("WBT:OK");
 23e7f20:	4807      	ldr	r0, [pc, #28]	; (23e7f40 <_Z14wbt_initializev+0x38>)
    WBT_exists = true;
 23e7f22:	701a      	strb	r2, [r3, #0]
  }
  else {
    Output ("WBT:NF");
  }
}
 23e7f24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Output ("WBT:NF");
 23e7f28:	f7ff b95c 	b.w	23e71e4 <_Z6OutputPKc>
 23e7f2c:	4805      	ldr	r0, [pc, #20]	; (23e7f44 <_Z14wbt_initializev+0x3c>)
 23e7f2e:	e7f9      	b.n	23e7f24 <_Z14wbt_initializev+0x1c>
 23e7f30:	023fd64a 	.word	0x023fd64a
 23e7f34:	1006a300 	.word	0x1006a300
 23e7f38:	1006a808 	.word	0x1006a808
 23e7f3c:	1006a81e 	.word	0x1006a81e
 23e7f40:	023fd653 	.word	0x023fd653
 23e7f44:	023fd65a 	.word	0x023fd65a

023e7f48 <_Z13wbt_calculatedd>:
 *     In Arduino code, square brackets are not used for mathematical operations. Instead, parentheses ( ).
 * sqrt(x) computes the square root of x, which is x to the 1/2.
 * pow(RH, 1.5) calculates RH to the 3/2, which is the relative humidity raised to the power of 1.5.
 *=======================================================================================================================
 */
double wbt_calculate(double T, double RH) {
 23e7f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((T == -999.9) || (RH == -999.9)) {
 23e7f4c:	a354      	add	r3, pc, #336	; (adr r3, 23e80a0 <_Z13wbt_calculatedd+0x158>)
 23e7f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
double wbt_calculate(double T, double RH) {
 23e7f52:	ec57 6b10 	vmov	r6, r7, d0
 23e7f56:	b085      	sub	sp, #20
  if ((T == -999.9) || (RH == -999.9)) {
 23e7f58:	ee10 0a10 	vmov	r0, s0
 23e7f5c:	4639      	mov	r1, r7
double wbt_calculate(double T, double RH) {
 23e7f5e:	ec55 4b11 	vmov	r4, r5, d1
  if ((T == -999.9) || (RH == -999.9)) {
 23e7f62:	f7fd fc71 	bl	23e5848 <__aeabi_dcmpeq>
 23e7f66:	2800      	cmp	r0, #0
 23e7f68:	f040 808b 	bne.w	23e8082 <_Z13wbt_calculatedd+0x13a>
 23e7f6c:	a34c      	add	r3, pc, #304	; (adr r3, 23e80a0 <_Z13wbt_calculatedd+0x158>)
 23e7f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e7f72:	4620      	mov	r0, r4
 23e7f74:	4629      	mov	r1, r5
 23e7f76:	f7fd fc67 	bl	23e5848 <__aeabi_dcmpeq>
 23e7f7a:	2800      	cmp	r0, #0
 23e7f7c:	f040 8081 	bne.w	23e8082 <_Z13wbt_calculatedd+0x13a>
  }

  // Output("WBT:CALC");

  // Equation components
  double term1 = T * atan(0.151977 * sqrt(RH + 8.313659));
 23e7f80:	a34b      	add	r3, pc, #300	; (adr r3, 23e80b0 <_Z13wbt_calculatedd+0x168>)
 23e7f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e7f86:	4620      	mov	r0, r4
 23e7f88:	4629      	mov	r1, r5
 23e7f8a:	f7fd f83f 	bl	23e500c <__adddf3>
 23e7f8e:	ec41 0b10 	vmov	d0, r0, r1
 23e7f92:	f012 fe23 	bl	23fabdc <sqrt>
 23e7f96:	a348      	add	r3, pc, #288	; (adr r3, 23e80b8 <_Z13wbt_calculatedd+0x170>)
 23e7f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e7f9c:	ec51 0b10 	vmov	r0, r1, d0
 23e7fa0:	f7fd f9ea 	bl	23e5378 <__aeabi_dmul>
 23e7fa4:	ec41 0b10 	vmov	d0, r0, r1
 23e7fa8:	f012 fa52 	bl	23fa450 <atan>
  double term2 = atan(T + RH);
 23e7fac:	4622      	mov	r2, r4
 23e7fae:	462b      	mov	r3, r5
 23e7fb0:	4630      	mov	r0, r6
 23e7fb2:	4639      	mov	r1, r7
  double term1 = T * atan(0.151977 * sqrt(RH + 8.313659));
 23e7fb4:	ec59 8b10 	vmov	r8, r9, d0
  double term2 = atan(T + RH);
 23e7fb8:	f7fd f828 	bl	23e500c <__adddf3>
 23e7fbc:	ec41 0b10 	vmov	d0, r0, r1
 23e7fc0:	f012 fa46 	bl	23fa450 <atan>
  double term3 = atan(RH - 1.676311);
 23e7fc4:	a33e      	add	r3, pc, #248	; (adr r3, 23e80c0 <_Z13wbt_calculatedd+0x178>)
 23e7fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e7fca:	4620      	mov	r0, r4
 23e7fcc:	4629      	mov	r1, r5
  double term2 = atan(T + RH);
 23e7fce:	ec5b ab10 	vmov	sl, fp, d0
  double term3 = atan(RH - 1.676311);
 23e7fd2:	f7fd f819 	bl	23e5008 <__aeabi_dsub>
 23e7fd6:	ec41 0b10 	vmov	d0, r0, r1
 23e7fda:	f012 fa39 	bl	23fa450 <atan>
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
 23e7fde:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 23e8098 <_Z13wbt_calculatedd+0x150>
  double term3 = atan(RH - 1.676311);
 23e7fe2:	ed8d 0b00 	vstr	d0, [sp]
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
 23e7fe6:	ec45 4b10 	vmov	d0, r4, r5
 23e7fea:	f012 fd25 	bl	23faa38 <pow>
 23e7fee:	a336      	add	r3, pc, #216	; (adr r3, 23e80c8 <_Z13wbt_calculatedd+0x180>)
 23e7ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e7ff4:	4620      	mov	r0, r4
 23e7ff6:	4629      	mov	r1, r5
 23e7ff8:	ed8d 0b02 	vstr	d0, [sp, #8]
 23e7ffc:	f7fd f9bc 	bl	23e5378 <__aeabi_dmul>
 23e8000:	ec41 0b10 	vmov	d0, r0, r1
 23e8004:	f012 fa24 	bl	23fa450 <atan>
  double term1 = T * atan(0.151977 * sqrt(RH + 8.313659));
 23e8008:	4642      	mov	r2, r8
 23e800a:	464b      	mov	r3, r9
 23e800c:	4630      	mov	r0, r6
 23e800e:	4639      	mov	r1, r7
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
 23e8010:	ec55 4b10 	vmov	r4, r5, d0
  double term1 = T * atan(0.151977 * sqrt(RH + 8.313659));
 23e8014:	f7fd f9b0 	bl	23e5378 <__aeabi_dmul>
  double constant = 4.686035;

  // Wet bulb temperature calculation
  double Tw = term1 + term2 - term3 + term4 - constant;
 23e8018:	4652      	mov	r2, sl
 23e801a:	465b      	mov	r3, fp
 23e801c:	f7fc fff6 	bl	23e500c <__adddf3>
 23e8020:	e9dd 2300 	ldrd	r2, r3, [sp]
 23e8024:	f7fc fff0 	bl	23e5008 <__aeabi_dsub>
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
 23e8028:	a329      	add	r3, pc, #164	; (adr r3, 23e80d0 <_Z13wbt_calculatedd+0x188>)
 23e802a:	e9d3 2300 	ldrd	r2, r3, [r3]
  double Tw = term1 + term2 - term3 + term4 - constant;
 23e802e:	4606      	mov	r6, r0
 23e8030:	460f      	mov	r7, r1
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
 23e8032:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 23e8036:	f7fd f99f 	bl	23e5378 <__aeabi_dmul>
 23e803a:	4622      	mov	r2, r4
 23e803c:	462b      	mov	r3, r5
 23e803e:	f7fd f99b 	bl	23e5378 <__aeabi_dmul>
 23e8042:	4602      	mov	r2, r0
 23e8044:	460b      	mov	r3, r1
  double Tw = term1 + term2 - term3 + term4 - constant;
 23e8046:	4630      	mov	r0, r6
 23e8048:	4639      	mov	r1, r7
 23e804a:	f7fc ffdf 	bl	23e500c <__adddf3>
 23e804e:	a322      	add	r3, pc, #136	; (adr r3, 23e80d8 <_Z13wbt_calculatedd+0x190>)
 23e8050:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e8054:	f7fc ffd8 	bl	23e5008 <__aeabi_dsub>

  Tw = (isnan(Tw) || (Tw < QC_MIN_T)  || (Tw >QC_MAX_T))  ? QC_ERR_T  : Tw;
 23e8058:	4602      	mov	r2, r0
 23e805a:	460b      	mov	r3, r1
  double Tw = term1 + term2 - term3 + term4 - constant;
 23e805c:	4604      	mov	r4, r0
 23e805e:	460d      	mov	r5, r1
  Tw = (isnan(Tw) || (Tw < QC_MIN_T)  || (Tw >QC_MAX_T))  ? QC_ERR_T  : Tw;
 23e8060:	f7fd fc24 	bl	23e58ac <__aeabi_dcmpun>
 23e8064:	b968      	cbnz	r0, 23e8082 <_Z13wbt_calculatedd+0x13a>
 23e8066:	2200      	movs	r2, #0
 23e8068:	4620      	mov	r0, r4
 23e806a:	4629      	mov	r1, r5
 23e806c:	4b0e      	ldr	r3, [pc, #56]	; (23e80a8 <_Z13wbt_calculatedd+0x160>)
 23e806e:	f7fd fbf5 	bl	23e585c <__aeabi_dcmplt>
 23e8072:	b930      	cbnz	r0, 23e8082 <_Z13wbt_calculatedd+0x13a>
 23e8074:	2200      	movs	r2, #0
 23e8076:	4620      	mov	r0, r4
 23e8078:	4629      	mov	r1, r5
 23e807a:	4b0c      	ldr	r3, [pc, #48]	; (23e80ac <_Z13wbt_calculatedd+0x164>)
 23e807c:	f7fd fc0c 	bl	23e5898 <__aeabi_dcmpgt>
 23e8080:	b110      	cbz	r0, 23e8088 <_Z13wbt_calculatedd+0x140>
 23e8082:	a507      	add	r5, pc, #28	; (adr r5, 23e80a0 <_Z13wbt_calculatedd+0x158>)
 23e8084:	e9d5 4500 	ldrd	r4, r5, [r5]
  return (Tw);
}
 23e8088:	ec45 4b10 	vmov	d0, r4, r5
 23e808c:	b005      	add	sp, #20
 23e808e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23e8092:	bf00      	nop
 23e8094:	f3af 8000 	nop.w
 23e8098:	00000000 	.word	0x00000000
 23e809c:	3ff80000 	.word	0x3ff80000
 23e80a0:	33333333 	.word	0x33333333
 23e80a4:	c08f3f33 	.word	0xc08f3f33
 23e80a8:	c0440000 	.word	0xc0440000
 23e80ac:	404e0000 	.word	0x404e0000
 23e80b0:	e996312f 	.word	0xe996312f
 23e80b4:	4020a097 	.word	0x4020a097
 23e80b8:	7a5f41af 	.word	0x7a5f41af
 23e80bc:	3fc373fb 	.word	0x3fc373fb
 23e80c0:	7baecd08 	.word	0x7baecd08
 23e80c4:	3ffad22b 	.word	0x3ffad22b
 23e80c8:	de050375 	.word	0xde050375
 23e80cc:	3f97a7c9 	.word	0x3f97a7c9
 23e80d0:	1f40b801 	.word	0x1f40b801
 23e80d4:	3f700cb8 	.word	0x3f700cb8
 23e80d8:	f583a53c 	.word	0xf583a53c
 23e80dc:	4012be7f 	.word	0x4012be7f

023e80e0 <_Z13hi_initializev>:
/* 
 *=======================================================================================================================
 * hi_initialize() - Heat Index Temperature
 *=======================================================================================================================
 */
void hi_initialize() {
 23e80e0:	b508      	push	{r3, lr}
  Output("HI:INIT");
 23e80e2:	4808      	ldr	r0, [pc, #32]	; (23e8104 <_Z13hi_initializev+0x24>)
 23e80e4:	f7ff f87e 	bl	23e71e4 <_Z6OutputPKc>
  if (SHT_1_exists) {
 23e80e8:	4b07      	ldr	r3, [pc, #28]	; (23e8108 <_Z13hi_initializev+0x28>)
 23e80ea:	781b      	ldrb	r3, [r3, #0]
 23e80ec:	b13b      	cbz	r3, 23e80fe <_Z13hi_initializev+0x1e>
    HI_exists = true;
 23e80ee:	2201      	movs	r2, #1
 23e80f0:	4b06      	ldr	r3, [pc, #24]	; (23e810c <_Z13hi_initializev+0x2c>)
    Output ("HI:OK");
 23e80f2:	4807      	ldr	r0, [pc, #28]	; (23e8110 <_Z13hi_initializev+0x30>)
    HI_exists = true;
 23e80f4:	701a      	strb	r2, [r3, #0]
  }
  else {
    Output ("HI:NF");
  }
}
 23e80f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Output ("HI:NF");
 23e80fa:	f7ff b873 	b.w	23e71e4 <_Z6OutputPKc>
 23e80fe:	4805      	ldr	r0, [pc, #20]	; (23e8114 <_Z13hi_initializev+0x34>)
 23e8100:	e7f9      	b.n	23e80f6 <_Z13hi_initializev+0x16>
 23e8102:	bf00      	nop
 23e8104:	023fd661 	.word	0x023fd661
 23e8108:	1006a808 	.word	0x1006a808
 23e810c:	1006a2e7 	.word	0x1006a2e7
 23e8110:	023fd669 	.word	0x023fd669
 23e8114:	023fd66f 	.word	0x023fd66f

023e8118 <_Z12hi_calculateff>:
 * warrant a heat index value below about 80 degrees F. In those cases, a simpler formula 
 * is applied to calculate values consistent with Steadman's results:
 * HI = 0.5 * {T + 61.0 + [(T-68.0)*1.2] + (RH*0.094)} 
 *=======================================================================================================================
 */
float hi_calculate(float T, float RH) {
 23e8118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23e811c:	ee10 0a10 	vmov	r0, s0
 23e8120:	ed2d 8b04 	vpush	{d8-d9}
 23e8124:	eef0 8a60 	vmov.f32	s17, s1
  float HI;
  float HI_f;

  if ((T == -999.9) || (RH == -999.9)) {
 23e8128:	f7fd f8ce 	bl	23e52c8 <__aeabi_f2d>
 23e812c:	a3c1      	add	r3, pc, #772	; (adr r3, 23e8434 <_Z12hi_calculateff+0x31c>)
 23e812e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e8132:	4604      	mov	r4, r0
 23e8134:	460d      	mov	r5, r1
 23e8136:	f7fd fb87 	bl	23e5848 <__aeabi_dcmpeq>
 23e813a:	2800      	cmp	r0, #0
 23e813c:	f040 80fa 	bne.w	23e8334 <_Z12hi_calculateff+0x21c>
 23e8140:	ee18 0a90 	vmov	r0, s17
 23e8144:	f7fd f8c0 	bl	23e52c8 <__aeabi_f2d>
 23e8148:	a3ba      	add	r3, pc, #744	; (adr r3, 23e8434 <_Z12hi_calculateff+0x31c>)
 23e814a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e814e:	4680      	mov	r8, r0
 23e8150:	4689      	mov	r9, r1
 23e8152:	f7fd fb79 	bl	23e5848 <__aeabi_dcmpeq>
 23e8156:	2800      	cmp	r0, #0
 23e8158:	f040 80ec 	bne.w	23e8334 <_Z12hi_calculateff+0x21c>
    return (-999.9);
  }

  // Convert temperature from Celsius to Fahrenheit
  float T_f = T * 9.0 / 5.0 + 32.0;
 23e815c:	2200      	movs	r2, #0
 23e815e:	4620      	mov	r0, r4
 23e8160:	4629      	mov	r1, r5
 23e8162:	4b9d      	ldr	r3, [pc, #628]	; (23e83d8 <_Z12hi_calculateff+0x2c0>)
 23e8164:	f7fd f908 	bl	23e5378 <__aeabi_dmul>
 23e8168:	2200      	movs	r2, #0
 23e816a:	4b9c      	ldr	r3, [pc, #624]	; (23e83dc <_Z12hi_calculateff+0x2c4>)
 23e816c:	f7fd fa2e 	bl	23e55cc <__aeabi_ddiv>
 23e8170:	2200      	movs	r2, #0
 23e8172:	4b9b      	ldr	r3, [pc, #620]	; (23e83e0 <_Z12hi_calculateff+0x2c8>)
 23e8174:	f7fc ff4a 	bl	23e500c <__adddf3>
 23e8178:	f7fd fbf6 	bl	23e5968 <__aeabi_d2f>
 23e817c:	ee09 0a10 	vmov	s18, r0

  // Steadman's equation
  HI_f = 0.5 * (T_f + 61.0 + ((T_f - 68.0)*1.2) + (RH * 0.094));
 23e8180:	f7fd f8a2 	bl	23e52c8 <__aeabi_f2d>
 23e8184:	2200      	movs	r2, #0
 23e8186:	4b97      	ldr	r3, [pc, #604]	; (23e83e4 <_Z12hi_calculateff+0x2cc>)
 23e8188:	4604      	mov	r4, r0
 23e818a:	460d      	mov	r5, r1
 23e818c:	f7fc ff3c 	bl	23e5008 <__aeabi_dsub>
 23e8190:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 23e8194:	4b94      	ldr	r3, [pc, #592]	; (23e83e8 <_Z12hi_calculateff+0x2d0>)
 23e8196:	f7fd f8ef 	bl	23e5378 <__aeabi_dmul>
 23e819a:	2200      	movs	r2, #0
 23e819c:	4606      	mov	r6, r0
 23e819e:	460f      	mov	r7, r1
 23e81a0:	4b92      	ldr	r3, [pc, #584]	; (23e83ec <_Z12hi_calculateff+0x2d4>)
 23e81a2:	4620      	mov	r0, r4
 23e81a4:	4629      	mov	r1, r5
 23e81a6:	f7fc ff31 	bl	23e500c <__adddf3>
 23e81aa:	4602      	mov	r2, r0
 23e81ac:	460b      	mov	r3, r1
 23e81ae:	4630      	mov	r0, r6
 23e81b0:	4639      	mov	r1, r7
 23e81b2:	f7fc ff2b 	bl	23e500c <__adddf3>
 23e81b6:	a382      	add	r3, pc, #520	; (adr r3, 23e83c0 <_Z12hi_calculateff+0x2a8>)
 23e81b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e81bc:	4606      	mov	r6, r0
 23e81be:	460f      	mov	r7, r1
 23e81c0:	4640      	mov	r0, r8
 23e81c2:	4649      	mov	r1, r9
 23e81c4:	f7fd f8d8 	bl	23e5378 <__aeabi_dmul>
 23e81c8:	4602      	mov	r2, r0
 23e81ca:	460b      	mov	r3, r1
 23e81cc:	4630      	mov	r0, r6
 23e81ce:	4639      	mov	r1, r7
 23e81d0:	f7fc ff1c 	bl	23e500c <__adddf3>
 23e81d4:	2200      	movs	r2, #0
 23e81d6:	4b86      	ldr	r3, [pc, #536]	; (23e83f0 <_Z12hi_calculateff+0x2d8>)
 23e81d8:	f7fd f8ce 	bl	23e5378 <__aeabi_dmul>
 23e81dc:	f7fd fbc4 	bl	23e5968 <__aeabi_d2f>

  // Compute the average of the simple HI with the actual temperature [deg F]
  HI_f = (HI_f + T_f) / 2;
 23e81e0:	ee07 0a90 	vmov	s15, r0
 23e81e4:	ee37 8a89 	vadd.f32	s16, s15, s18
 23e81e8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5

  if (HI_f >= 80.0) { 
 23e81ec:	ed9f 7a81 	vldr	s14, [pc, #516]	; 23e83f4 <_Z12hi_calculateff+0x2dc>
  HI_f = (HI_f + T_f) / 2;
 23e81f0:	ee28 8a27 	vmul.f32	s16, s16, s15
  if (HI_f >= 80.0) { 
 23e81f4:	eeb4 8ac7 	vcmpe.f32	s16, s14
 23e81f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e81fc:	db75      	blt.n	23e82ea <_Z12hi_calculateff+0x1d2>
    float c7 = 0.00122874;
    float c8 = 0.00085282;
    float c9 = -0.00000199;
    
    // Heat Index calculation
    HI_f = c1 + (c2 * T_f) + (c3 * RH) + (c4 * T_f * RH) +
 23e81fe:	eddf 7a7e 	vldr	s15, [pc, #504]	; 23e83f8 <_Z12hi_calculateff+0x2e0>
 23e8202:	ed9f 8a7e 	vldr	s16, [pc, #504]	; 23e83fc <_Z12hi_calculateff+0x2e4>
 23e8206:	eea9 8a27 	vfma.f32	s16, s18, s15
 23e820a:	eddf 7a7d 	vldr	s15, [pc, #500]	; 23e8400 <_Z12hi_calculateff+0x2e8>
 23e820e:	eea8 8aa7 	vfma.f32	s16, s17, s15
 23e8212:	eddf 7a7c 	vldr	s15, [pc, #496]	; 23e8404 <_Z12hi_calculateff+0x2ec>
 23e8216:	ee69 7a27 	vmul.f32	s15, s18, s15
 23e821a:	eea7 8aa8 	vfma.f32	s16, s15, s17
                (c5 * T_f * T_f) + (c6 * RH * RH) + 
 23e821e:	eddf 7a7a 	vldr	s15, [pc, #488]	; 23e8408 <_Z12hi_calculateff+0x2f0>
 23e8222:	ee69 7a27 	vmul.f32	s15, s18, s15
    HI_f = c1 + (c2 * T_f) + (c3 * RH) + (c4 * T_f * RH) +
 23e8226:	eea7 8a89 	vfma.f32	s16, s15, s18
                (c5 * T_f * T_f) + (c6 * RH * RH) + 
 23e822a:	eddf 7a78 	vldr	s15, [pc, #480]	; 23e840c <_Z12hi_calculateff+0x2f4>
 23e822e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 23e8232:	eea7 8aa8 	vfma.f32	s16, s15, s17
                (c7 * T_f * T_f * RH) + (c8 * T_f * RH * RH) +
 23e8236:	eddf 7a76 	vldr	s15, [pc, #472]	; 23e8410 <_Z12hi_calculateff+0x2f8>
 23e823a:	ee69 7a27 	vmul.f32	s15, s18, s15
 23e823e:	ee67 7a89 	vmul.f32	s15, s15, s18
                (c5 * T_f * T_f) + (c6 * RH * RH) + 
 23e8242:	eea7 8aa8 	vfma.f32	s16, s15, s17
                (c7 * T_f * T_f * RH) + (c8 * T_f * RH * RH) +
 23e8246:	eddf 7a73 	vldr	s15, [pc, #460]	; 23e8414 <_Z12hi_calculateff+0x2fc>
 23e824a:	ee69 7a27 	vmul.f32	s15, s18, s15
 23e824e:	ee67 7aa8 	vmul.f32	s15, s15, s17
 23e8252:	eea7 8aa8 	vfma.f32	s16, s15, s17
                (c9 * T_f * T_f * RH * RH);
 23e8256:	eddf 7a70 	vldr	s15, [pc, #448]	; 23e8418 <_Z12hi_calculateff+0x300>

    if ((RH < 13.0) && ((T_f > 80.0) && (T_f < 112.0)) ) {
 23e825a:	eef2 9a0a 	vmov.f32	s19, #42	; 0x41500000  13.0
                (c9 * T_f * T_f * RH * RH);
 23e825e:	ee69 7a27 	vmul.f32	s15, s18, s15
    if ((RH < 13.0) && ((T_f > 80.0) && (T_f < 112.0)) ) {
 23e8262:	eef4 8ae9 	vcmpe.f32	s17, s19
                (c9 * T_f * T_f * RH * RH);
 23e8266:	ee67 7a89 	vmul.f32	s15, s15, s18
    if ((RH < 13.0) && ((T_f > 80.0) && (T_f < 112.0)) ) {
 23e826a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                (c9 * T_f * T_f * RH * RH);
 23e826e:	ee67 7aa8 	vmul.f32	s15, s15, s17
    HI_f = c1 + (c2 * T_f) + (c3 * RH) + (c4 * T_f * RH) +
 23e8272:	eea7 8aa8 	vfma.f32	s16, s15, s17
    if ((RH < 13.0) && ((T_f > 80.0) && (T_f < 112.0)) ) {
 23e8276:	d563      	bpl.n	23e8340 <_Z12hi_calculateff+0x228>
 23e8278:	eeb4 9ac7 	vcmpe.f32	s18, s14
 23e827c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e8280:	dd5e      	ble.n	23e8340 <_Z12hi_calculateff+0x228>
 23e8282:	eddf 7a66 	vldr	s15, [pc, #408]	; 23e841c <_Z12hi_calculateff+0x304>
 23e8286:	eeb4 9ae7 	vcmpe.f32	s18, s15
 23e828a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e828e:	f140 8090 	bpl.w	23e83b2 <_Z12hi_calculateff+0x29a>
      // If the RH is less than 13% and the temperature is between 80 and 112 degrees F, 
      // then the following adjustment is subtracted from HI: 
      // ADJUSTMENT = [(13-RH)/4]*SQRT{[17-ABS(T-95.)]/17}

      float Adjustment = ( (13 - RH) / 4 ) * sqrt( (17 - abs(T_f - 95.0) ) / 17 );
 23e8292:	a34d      	add	r3, pc, #308	; (adr r3, 23e83c8 <_Z12hi_calculateff+0x2b0>)
 23e8294:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e8298:	4620      	mov	r0, r4
 23e829a:	4629      	mov	r1, r5
 23e829c:	f7fc feb4 	bl	23e5008 <__aeabi_dsub>
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 23e82a0:	4602      	mov	r2, r0
 23e82a2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23e82a6:	2000      	movs	r0, #0
 23e82a8:	495d      	ldr	r1, [pc, #372]	; (23e8420 <_Z12hi_calculateff+0x308>)
 23e82aa:	f7fc fead 	bl	23e5008 <__aeabi_dsub>
 23e82ae:	2200      	movs	r2, #0
 23e82b0:	4b5b      	ldr	r3, [pc, #364]	; (23e8420 <_Z12hi_calculateff+0x308>)
 23e82b2:	f7fd f98b 	bl	23e55cc <__aeabi_ddiv>
 23e82b6:	ec41 0b10 	vmov	d0, r0, r1
 23e82ba:	f012 fc8f 	bl	23fabdc <sqrt>
 23e82be:	ee79 8ae8 	vsub.f32	s17, s19, s17
 23e82c2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 23e82c6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 23e82ca:	ec55 4b10 	vmov	r4, r5, d0
 23e82ce:	ee17 0a90 	vmov	r0, s15
 23e82d2:	f7fc fff9 	bl	23e52c8 <__aeabi_f2d>
 23e82d6:	4622      	mov	r2, r4
 23e82d8:	462b      	mov	r3, r5
 23e82da:	f7fd f84d 	bl	23e5378 <__aeabi_dmul>
 23e82de:	f7fd fb43 	bl	23e5968 <__aeabi_d2f>

      HI_f = HI_f - Adjustment;
 23e82e2:	ee07 0a90 	vmov	s15, r0
 23e82e6:	ee38 8a67 	vsub.f32	s16, s16, s15
      HI_f = HI_f + Adjustment;
    }
  }

  // Convert Heat Index from Fahrenheit to Celsius
  HI = (HI_f - 32.0) * 5.0 / 9.0;
 23e82ea:	ee18 0a10 	vmov	r0, s16
 23e82ee:	f7fc ffeb 	bl	23e52c8 <__aeabi_f2d>
 23e82f2:	2200      	movs	r2, #0
 23e82f4:	4b3a      	ldr	r3, [pc, #232]	; (23e83e0 <_Z12hi_calculateff+0x2c8>)
 23e82f6:	f7fc fe87 	bl	23e5008 <__aeabi_dsub>
 23e82fa:	2200      	movs	r2, #0
 23e82fc:	4b37      	ldr	r3, [pc, #220]	; (23e83dc <_Z12hi_calculateff+0x2c4>)
 23e82fe:	f7fd f83b 	bl	23e5378 <__aeabi_dmul>
 23e8302:	2200      	movs	r2, #0
 23e8304:	4b34      	ldr	r3, [pc, #208]	; (23e83d8 <_Z12hi_calculateff+0x2c0>)
 23e8306:	f7fd f961 	bl	23e55cc <__aeabi_ddiv>
 23e830a:	f7fd fb2d 	bl	23e5968 <__aeabi_d2f>
 23e830e:	ee00 0a10 	vmov	s0, r0

  // Quality Control Check
  HI = (isnan(HI) || (HI < QC_MIN_HI)  || (HI >QC_MAX_HI))  ? QC_ERR_HI  : HI;
 23e8312:	eeb4 0a40 	vcmp.f32	s0, s0
 23e8316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e831a:	d60b      	bvs.n	23e8334 <_Z12hi_calculateff+0x21c>
 23e831c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23e8320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e8324:	d406      	bmi.n	23e8334 <_Z12hi_calculateff+0x21c>
 23e8326:	eddf 7a3f 	vldr	s15, [pc, #252]	; 23e8424 <_Z12hi_calculateff+0x30c>
 23e832a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23e832e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e8332:	dd01      	ble.n	23e8338 <_Z12hi_calculateff+0x220>
 23e8334:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 23e8428 <_Z12hi_calculateff+0x310>

  return (HI);
}
 23e8338:	ecbd 8b04 	vpop	{d8-d9}
 23e833c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if ((RH > 85.0) && ((T_f > 80.0) && (T_f < 87.0)) ) {
 23e8340:	eddf 7a3a 	vldr	s15, [pc, #232]	; 23e842c <_Z12hi_calculateff+0x314>
 23e8344:	eef4 8ae7 	vcmpe.f32	s17, s15
 23e8348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e834c:	ddcd      	ble.n	23e82ea <_Z12hi_calculateff+0x1d2>
 23e834e:	eeb4 9ac7 	vcmpe.f32	s18, s14
 23e8352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e8356:	ddc8      	ble.n	23e82ea <_Z12hi_calculateff+0x1d2>
 23e8358:	eddf 7a35 	vldr	s15, [pc, #212]	; 23e8430 <_Z12hi_calculateff+0x318>
 23e835c:	eeb4 9ae7 	vcmpe.f32	s18, s15
 23e8360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e8364:	d5c1      	bpl.n	23e82ea <_Z12hi_calculateff+0x1d2>
      float Adjustment = ( (RH - 85) / 10 ) * ( (87.0 - T_f) / 5 );
 23e8366:	eddf 0a31 	vldr	s1, [pc, #196]	; 23e842c <_Z12hi_calculateff+0x314>
 23e836a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 23e836e:	ee78 8ae0 	vsub.f32	s17, s17, s1
 23e8372:	eec8 7aa7 	vdiv.f32	s15, s17, s15
 23e8376:	ee17 0a90 	vmov	r0, s15
 23e837a:	f7fc ffa5 	bl	23e52c8 <__aeabi_f2d>
 23e837e:	4622      	mov	r2, r4
 23e8380:	4606      	mov	r6, r0
 23e8382:	460f      	mov	r7, r1
 23e8384:	a112      	add	r1, pc, #72	; (adr r1, 23e83d0 <_Z12hi_calculateff+0x2b8>)
 23e8386:	e9d1 0100 	ldrd	r0, r1, [r1]
 23e838a:	462b      	mov	r3, r5
 23e838c:	f7fc fe3c 	bl	23e5008 <__aeabi_dsub>
 23e8390:	2200      	movs	r2, #0
 23e8392:	4b12      	ldr	r3, [pc, #72]	; (23e83dc <_Z12hi_calculateff+0x2c4>)
 23e8394:	f7fd f91a 	bl	23e55cc <__aeabi_ddiv>
 23e8398:	4602      	mov	r2, r0
 23e839a:	460b      	mov	r3, r1
 23e839c:	4630      	mov	r0, r6
 23e839e:	4639      	mov	r1, r7
 23e83a0:	f7fc ffea 	bl	23e5378 <__aeabi_dmul>
 23e83a4:	f7fd fae0 	bl	23e5968 <__aeabi_d2f>
      HI_f = HI_f + Adjustment;
 23e83a8:	ee07 0a90 	vmov	s15, r0
 23e83ac:	ee38 8a27 	vadd.f32	s16, s16, s15
 23e83b0:	e79b      	b.n	23e82ea <_Z12hi_calculateff+0x1d2>
    else if ((RH > 85.0) && ((T_f > 80.0) && (T_f < 87.0)) ) {
 23e83b2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 23e842c <_Z12hi_calculateff+0x314>
 23e83b6:	eef4 8ae7 	vcmpe.f32	s17, s15
 23e83ba:	e7ca      	b.n	23e8352 <_Z12hi_calculateff+0x23a>
 23e83bc:	f3af 8000 	nop.w
 23e83c0:	4dd2f1aa 	.word	0x4dd2f1aa
 23e83c4:	3fb81062 	.word	0x3fb81062
 23e83c8:	00000000 	.word	0x00000000
 23e83cc:	4057c000 	.word	0x4057c000
 23e83d0:	00000000 	.word	0x00000000
 23e83d4:	4055c000 	.word	0x4055c000
 23e83d8:	40220000 	.word	0x40220000
 23e83dc:	40140000 	.word	0x40140000
 23e83e0:	40400000 	.word	0x40400000
 23e83e4:	40510000 	.word	0x40510000
 23e83e8:	3ff33333 	.word	0x3ff33333
 23e83ec:	404e8000 	.word	0x404e8000
 23e83f0:	3fe00000 	.word	0x3fe00000
 23e83f4:	42a00000 	.word	0x42a00000
 23e83f8:	40032311 	.word	0x40032311
 23e83fc:	c2298419 	.word	0xc2298419
 23e8400:	41224b16 	.word	0x41224b16
 23e8404:	be662648 	.word	0xbe662648
 23e8408:	bbe00fe0 	.word	0xbbe00fe0
 23e840c:	bd6087f8 	.word	0xbd6087f8
 23e8410:	3aa10dac 	.word	0x3aa10dac
 23e8414:	3a5f8fc8 	.word	0x3a5f8fc8
 23e8418:	b6058bf1 	.word	0xb6058bf1
 23e841c:	42e00000 	.word	0x42e00000
 23e8420:	40310000 	.word	0x40310000
 23e8424:	42700000 	.word	0x42700000
 23e8428:	c479f99a 	.word	0xc479f99a
 23e842c:	42aa0000 	.word	0x42aa0000
 23e8430:	42ae0000 	.word	0x42ae0000
 23e8434:	33333333 	.word	0x33333333
 23e8438:	c08f3f33 	.word	0xc08f3f33

023e843c <_Z15wbgt_initializev>:
/* 
 *=======================================================================================================================
 * wbgt_initialize() - Wet Bulb Globe Temperature
 *=======================================================================================================================
 */
void wbgt_initialize() {
 23e843c:	b508      	push	{r3, lr}
  Output("WBGT:INIT");
 23e843e:	480c      	ldr	r0, [pc, #48]	; (23e8470 <_Z15wbgt_initializev+0x34>)
 23e8440:	f7fe fed0 	bl	23e71e4 <_Z6OutputPKc>
  if (MCP_1_exists && SHT_1_exists) {
 23e8444:	4b0b      	ldr	r3, [pc, #44]	; (23e8474 <_Z15wbgt_initializev+0x38>)
 23e8446:	781b      	ldrb	r3, [r3, #0]
 23e8448:	b17b      	cbz	r3, 23e846a <_Z15wbgt_initializev+0x2e>
 23e844a:	4b0b      	ldr	r3, [pc, #44]	; (23e8478 <_Z15wbgt_initializev+0x3c>)
 23e844c:	781b      	ldrb	r3, [r3, #0]
 23e844e:	b163      	cbz	r3, 23e846a <_Z15wbgt_initializev+0x2e>
    WBGT_exists = true;
 23e8450:	2201      	movs	r2, #1
 23e8452:	4b0a      	ldr	r3, [pc, #40]	; (23e847c <_Z15wbgt_initializev+0x40>)
 23e8454:	701a      	strb	r2, [r3, #0]
    if (MCP_3_exists) {
 23e8456:	4b0a      	ldr	r3, [pc, #40]	; (23e8480 <_Z15wbgt_initializev+0x44>)
 23e8458:	781b      	ldrb	r3, [r3, #0]
 23e845a:	b123      	cbz	r3, 23e8466 <_Z15wbgt_initializev+0x2a>
      Output ("WBGT:OK w/Globe");
 23e845c:	4809      	ldr	r0, [pc, #36]	; (23e8484 <_Z15wbgt_initializev+0x48>)
    }
  }
  else {
    Output ("WBGT:NF");
  }
}
 23e845e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Output ("WBGT:NF");
 23e8462:	f7fe bebf 	b.w	23e71e4 <_Z6OutputPKc>
      Output ("WBGT:OK wo/Globe");
 23e8466:	4808      	ldr	r0, [pc, #32]	; (23e8488 <_Z15wbgt_initializev+0x4c>)
 23e8468:	e7f9      	b.n	23e845e <_Z15wbgt_initializev+0x22>
    Output ("WBGT:NF");
 23e846a:	4808      	ldr	r0, [pc, #32]	; (23e848c <_Z15wbgt_initializev+0x50>)
 23e846c:	e7f7      	b.n	23e845e <_Z15wbgt_initializev+0x22>
 23e846e:	bf00      	nop
 23e8470:	023fd675 	.word	0x023fd675
 23e8474:	1006a300 	.word	0x1006a300
 23e8478:	1006a808 	.word	0x1006a808
 23e847c:	1006a81d 	.word	0x1006a81d
 23e8480:	1006a302 	.word	0x1006a302
 23e8484:	023fd67f 	.word	0x023fd67f
 23e8488:	023fd68f 	.word	0x023fd68f
 23e848c:	023fd6a0 	.word	0x023fd6a0

023e8490 <_Z13wbgt_using_hid>:
/* 
 *=======================================================================================================================
 * wbgt_using_hi() - Compute Web Bulb Globe Temperature using Heat Index
 *=======================================================================================================================
 */
double wbgt_using_hi(double HIc) {
 23e8490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  if (HIc == -999.9) {
 23e8492:	a32f      	add	r3, pc, #188	; (adr r3, 23e8550 <_Z13wbgt_using_hid+0xc0>)
 23e8494:	e9d3 2300 	ldrd	r2, r3, [r3]
double wbgt_using_hi(double HIc) {
 23e8498:	ec55 4b10 	vmov	r4, r5, d0
  if (HIc == -999.9) {
 23e849c:	ee10 0a10 	vmov	r0, s0
 23e84a0:	4629      	mov	r1, r5
 23e84a2:	f7fd f9d1 	bl	23e5848 <__aeabi_dcmpeq>
 23e84a6:	2800      	cmp	r0, #0
 23e84a8:	d140      	bne.n	23e852c <_Z13wbgt_using_hid+0x9c>
    return (-999.9);
  }

  double HIf = HIc * 9.0 / 5.0 + 32.0;
 23e84aa:	2200      	movs	r2, #0
 23e84ac:	4620      	mov	r0, r4
 23e84ae:	4629      	mov	r1, r5
 23e84b0:	4b29      	ldr	r3, [pc, #164]	; (23e8558 <_Z13wbgt_using_hid+0xc8>)
 23e84b2:	f7fc ff61 	bl	23e5378 <__aeabi_dmul>
 23e84b6:	2200      	movs	r2, #0
 23e84b8:	4b28      	ldr	r3, [pc, #160]	; (23e855c <_Z13wbgt_using_hid+0xcc>)
 23e84ba:	f7fd f887 	bl	23e55cc <__aeabi_ddiv>
 23e84be:	2200      	movs	r2, #0
 23e84c0:	4b27      	ldr	r3, [pc, #156]	; (23e8560 <_Z13wbgt_using_hid+0xd0>)
 23e84c2:	f7fc fda3 	bl	23e500c <__adddf3>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 23e84c6:	4602      	mov	r2, r0
 23e84c8:	460b      	mov	r3, r1
 23e84ca:	4604      	mov	r4, r0
 23e84cc:	460d      	mov	r5, r1
 23e84ce:	f7fc ff53 	bl	23e5378 <__aeabi_dmul>

  // Below produces Wet Bulb Globe Temperature in Celsius
  double TWc = -0.0034 * pow(HIf, 2) + 0.96 * HIf - 34;
 23e84d2:	a31b      	add	r3, pc, #108	; (adr r3, 23e8540 <_Z13wbgt_using_hid+0xb0>)
 23e84d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e84d8:	f7fc ff4e 	bl	23e5378 <__aeabi_dmul>
 23e84dc:	a31a      	add	r3, pc, #104	; (adr r3, 23e8548 <_Z13wbgt_using_hid+0xb8>)
 23e84de:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e84e2:	4606      	mov	r6, r0
 23e84e4:	460f      	mov	r7, r1
 23e84e6:	4620      	mov	r0, r4
 23e84e8:	4629      	mov	r1, r5
 23e84ea:	f7fc ff45 	bl	23e5378 <__aeabi_dmul>
 23e84ee:	4602      	mov	r2, r0
 23e84f0:	460b      	mov	r3, r1
 23e84f2:	4630      	mov	r0, r6
 23e84f4:	4639      	mov	r1, r7
 23e84f6:	f7fc fd89 	bl	23e500c <__adddf3>
 23e84fa:	2200      	movs	r2, #0
 23e84fc:	4b19      	ldr	r3, [pc, #100]	; (23e8564 <_Z13wbgt_using_hid+0xd4>)
 23e84fe:	f7fc fd83 	bl	23e5008 <__aeabi_dsub>

  TWc = (isnan(TWc) || (TWc < QC_MIN_T)  || (TWc >QC_MAX_T))  ? QC_ERR_T  : TWc;
 23e8502:	4602      	mov	r2, r0
 23e8504:	460b      	mov	r3, r1
  double TWc = -0.0034 * pow(HIf, 2) + 0.96 * HIf - 34;
 23e8506:	4604      	mov	r4, r0
 23e8508:	460d      	mov	r5, r1
  TWc = (isnan(TWc) || (TWc < QC_MIN_T)  || (TWc >QC_MAX_T))  ? QC_ERR_T  : TWc;
 23e850a:	f7fd f9cf 	bl	23e58ac <__aeabi_dcmpun>
 23e850e:	b980      	cbnz	r0, 23e8532 <_Z13wbgt_using_hid+0xa2>
 23e8510:	2200      	movs	r2, #0
 23e8512:	4620      	mov	r0, r4
 23e8514:	4629      	mov	r1, r5
 23e8516:	4b14      	ldr	r3, [pc, #80]	; (23e8568 <_Z13wbgt_using_hid+0xd8>)
 23e8518:	f7fd f9a0 	bl	23e585c <__aeabi_dcmplt>
 23e851c:	b948      	cbnz	r0, 23e8532 <_Z13wbgt_using_hid+0xa2>
 23e851e:	2200      	movs	r2, #0
 23e8520:	4620      	mov	r0, r4
 23e8522:	4629      	mov	r1, r5
 23e8524:	4b11      	ldr	r3, [pc, #68]	; (23e856c <_Z13wbgt_using_hid+0xdc>)
 23e8526:	f7fd f9b7 	bl	23e5898 <__aeabi_dcmpgt>
 23e852a:	b910      	cbnz	r0, 23e8532 <_Z13wbgt_using_hid+0xa2>
  return (TWc);
}
 23e852c:	ec45 4b10 	vmov	d0, r4, r5
 23e8530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TWc = (isnan(TWc) || (TWc < QC_MIN_T)  || (TWc >QC_MAX_T))  ? QC_ERR_T  : TWc;
 23e8532:	a507      	add	r5, pc, #28	; (adr r5, 23e8550 <_Z13wbgt_using_hid+0xc0>)
 23e8534:	e9d5 4500 	ldrd	r4, r5, [r5]
 23e8538:	e7f8      	b.n	23e852c <_Z13wbgt_using_hid+0x9c>
 23e853a:	bf00      	nop
 23e853c:	f3af 8000 	nop.w
 23e8540:	19ce075f 	.word	0x19ce075f
 23e8544:	bf6bda51 	.word	0xbf6bda51
 23e8548:	eb851eb8 	.word	0xeb851eb8
 23e854c:	3feeb851 	.word	0x3feeb851
 23e8550:	33333333 	.word	0x33333333
 23e8554:	c08f3f33 	.word	0xc08f3f33
 23e8558:	40220000 	.word	0x40220000
 23e855c:	40140000 	.word	0x40140000
 23e8560:	40400000 	.word	0x40400000
 23e8564:	40410000 	.word	0x40410000
 23e8568:	c0440000 	.word	0xc0440000
 23e856c:	404e0000 	.word	0x404e0000

023e8570 <_Z14wbgt_using_wbtddd>:
/* 
 *=======================================================================================================================
 * wbgt_using_wbt() - Compute Web Bulb Globe Temperature using web bulb temperature
 *=======================================================================================================================
 */
double wbgt_using_wbt(double Ta, double Tg, double Tw) {
 23e8570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  // Ta = mcp1 temp
  // Tg = mcp3 temp
  // Tw = wbt_calculate(Ta, RH)

  double wbgt = (0.7 * Tw) + (0.2 * Tg) + (0.1 * Ta);  // This will be Celsius
 23e8574:	a326      	add	r3, pc, #152	; (adr r3, 23e8610 <_Z14wbgt_using_wbtddd+0xa0>)
 23e8576:	e9d3 2300 	ldrd	r2, r3, [r3]
double wbgt_using_wbt(double Ta, double Tg, double Tw) {
 23e857a:	ec51 0b12 	vmov	r0, r1, d2
 23e857e:	ec57 6b10 	vmov	r6, r7, d0
 23e8582:	ec59 8b11 	vmov	r8, r9, d1
  double wbgt = (0.7 * Tw) + (0.2 * Tg) + (0.1 * Ta);  // This will be Celsius
 23e8586:	f7fc fef7 	bl	23e5378 <__aeabi_dmul>
 23e858a:	a323      	add	r3, pc, #140	; (adr r3, 23e8618 <_Z14wbgt_using_wbtddd+0xa8>)
 23e858c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e8590:	4604      	mov	r4, r0
 23e8592:	460d      	mov	r5, r1
 23e8594:	4640      	mov	r0, r8
 23e8596:	4649      	mov	r1, r9
 23e8598:	f7fc feee 	bl	23e5378 <__aeabi_dmul>
 23e859c:	4602      	mov	r2, r0
 23e859e:	460b      	mov	r3, r1
 23e85a0:	4620      	mov	r0, r4
 23e85a2:	4629      	mov	r1, r5
 23e85a4:	f7fc fd32 	bl	23e500c <__adddf3>
 23e85a8:	a31d      	add	r3, pc, #116	; (adr r3, 23e8620 <_Z14wbgt_using_wbtddd+0xb0>)
 23e85aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e85ae:	4604      	mov	r4, r0
 23e85b0:	460d      	mov	r5, r1
 23e85b2:	4630      	mov	r0, r6
 23e85b4:	4639      	mov	r1, r7
 23e85b6:	f7fc fedf 	bl	23e5378 <__aeabi_dmul>
 23e85ba:	4602      	mov	r2, r0
 23e85bc:	460b      	mov	r3, r1
 23e85be:	4620      	mov	r0, r4
 23e85c0:	4629      	mov	r1, r5
 23e85c2:	f7fc fd23 	bl	23e500c <__adddf3>

  wbgt = (isnan(wbgt) || (wbgt < QC_MIN_T)  || (wbgt >QC_MAX_T))  ? QC_ERR_T  : wbgt;
 23e85c6:	4602      	mov	r2, r0
 23e85c8:	460b      	mov	r3, r1
  double wbgt = (0.7 * Tw) + (0.2 * Tg) + (0.1 * Ta);  // This will be Celsius
 23e85ca:	4604      	mov	r4, r0
 23e85cc:	460d      	mov	r5, r1
  wbgt = (isnan(wbgt) || (wbgt < QC_MIN_T)  || (wbgt >QC_MAX_T))  ? QC_ERR_T  : wbgt;
 23e85ce:	f7fd f96d 	bl	23e58ac <__aeabi_dcmpun>
 23e85d2:	b988      	cbnz	r0, 23e85f8 <_Z14wbgt_using_wbtddd+0x88>
 23e85d4:	2200      	movs	r2, #0
 23e85d6:	4620      	mov	r0, r4
 23e85d8:	4629      	mov	r1, r5
 23e85da:	4b0b      	ldr	r3, [pc, #44]	; (23e8608 <_Z14wbgt_using_wbtddd+0x98>)
 23e85dc:	f7fd f93e 	bl	23e585c <__aeabi_dcmplt>
 23e85e0:	b950      	cbnz	r0, 23e85f8 <_Z14wbgt_using_wbtddd+0x88>
 23e85e2:	2200      	movs	r2, #0
 23e85e4:	4620      	mov	r0, r4
 23e85e6:	4629      	mov	r1, r5
 23e85e8:	4b08      	ldr	r3, [pc, #32]	; (23e860c <_Z14wbgt_using_wbtddd+0x9c>)
 23e85ea:	f7fd f955 	bl	23e5898 <__aeabi_dcmpgt>
 23e85ee:	b918      	cbnz	r0, 23e85f8 <_Z14wbgt_using_wbtddd+0x88>

  return (wbgt);
}
 23e85f0:	ec45 4b10 	vmov	d0, r4, r5
 23e85f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  wbgt = (isnan(wbgt) || (wbgt < QC_MIN_T)  || (wbgt >QC_MAX_T))  ? QC_ERR_T  : wbgt;
 23e85f8:	a501      	add	r5, pc, #4	; (adr r5, 23e8600 <_Z14wbgt_using_wbtddd+0x90>)
 23e85fa:	e9d5 4500 	ldrd	r4, r5, [r5]
  return (wbgt);
 23e85fe:	e7f7      	b.n	23e85f0 <_Z14wbgt_using_wbtddd+0x80>
 23e8600:	33333333 	.word	0x33333333
 23e8604:	c08f3f33 	.word	0xc08f3f33
 23e8608:	c0440000 	.word	0xc0440000
 23e860c:	404e0000 	.word	0x404e0000
 23e8610:	66666666 	.word	0x66666666
 23e8614:	3fe66666 	.word	0x3fe66666
 23e8618:	9999999a 	.word	0x9999999a
 23e861c:	3fc99999 	.word	0x3fc99999
 23e8620:	9999999a 	.word	0x9999999a
 23e8624:	3fb99999 	.word	0x3fb99999

023e8628 <_Z17si1145_initializev>:
/* 
 *=======================================================================================================================
 * si1145_initialize() - SI1145 sensor initialize
 *=======================================================================================================================
 */
void si1145_initialize() {
 23e8628:	b570      	push	{r4, r5, r6, lr}
  Output("SI1145:INIT");
 23e862a:	484b      	ldr	r0, [pc, #300]	; (23e8758 <_Z17si1145_initializev+0x130>)
void si1145_initialize() {
 23e862c:	ed2d 8b02 	vpush	{d8}
  Output("SI1145:INIT");
 23e8630:	f7fe fdd8 	bl	23e71e4 <_Z6OutputPKc>
  
  // SSB_SI1145 UV index & IR & Visible Sensor (I2C ADDRESS = 0x60)
  if (! uv.begin(&Wire)) {
 23e8634:	f011 fe50 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e8638:	4601      	mov	r1, r0
 23e863a:	4848      	ldr	r0, [pc, #288]	; (23e875c <_Z17si1145_initializev+0x134>)
 23e863c:	f009 fe68 	bl	23f2310 <_ZN15Adafruit_SI11455beginEP7TwoWire>
 23e8640:	4d47      	ldr	r5, [pc, #284]	; (23e8760 <_Z17si1145_initializev+0x138>)
 23e8642:	4604      	mov	r4, r0
 23e8644:	b958      	cbnz	r0, 23e865e <_Z17si1145_initializev+0x36>
    Output ("SI:NF");
 23e8646:	4847      	ldr	r0, [pc, #284]	; (23e8764 <_Z17si1145_initializev+0x13c>)
 23e8648:	f7fe fdcc 	bl	23e71e4 <_Z6OutputPKc>
    SI1145_exists = false;
    SystemStatusBits |= SSB_SI1145;  // Turn On Bit
 23e864c:	4a46      	ldr	r2, [pc, #280]	; (23e8768 <_Z17si1145_initializev+0x140>)
    SI1145_exists = false;
 23e864e:	702c      	strb	r4, [r5, #0]
    SystemStatusBits |= SSB_SI1145;  // Turn On Bit
 23e8650:	6813      	ldr	r3, [r2, #0]
 23e8652:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 23e8656:	6013      	str	r3, [r2, #0]
    sprintf (msgbuf, "SI:IR[%d.%02d]", (int)si_last_ir, (int)(si_last_ir*100.0)%100); 
    Output (msgbuf);
    sprintf (msgbuf, "SI:UV[%d.%02d]", (int)si_last_uv, (int)(si_last_uv*100.0)%100); 
    Output (msgbuf);
  }
}
 23e8658:	ecbd 8b02 	vpop	{d8}
 23e865c:	bd70      	pop	{r4, r5, r6, pc}
    SI1145_exists = true;
 23e865e:	2301      	movs	r3, #1
    Output ("SI:OK");
 23e8660:	4842      	ldr	r0, [pc, #264]	; (23e876c <_Z17si1145_initializev+0x144>)
    SI1145_exists = true;
 23e8662:	702b      	strb	r3, [r5, #0]
    Output ("SI:OK");
 23e8664:	f7fe fdbe 	bl	23e71e4 <_Z6OutputPKc>
    si_last_vis = uv.readVisible();
 23e8668:	483c      	ldr	r0, [pc, #240]	; (23e875c <_Z17si1145_initializev+0x134>)
 23e866a:	f009 fd6a 	bl	23f2142 <_ZN15Adafruit_SI114511readVisibleEv>
 23e866e:	ee07 0a90 	vmov	s15, r0
 23e8672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23e8676:	4c3e      	ldr	r4, [pc, #248]	; (23e8770 <_Z17si1145_initializev+0x148>)
    si_last_ir = uv.readIR();
 23e8678:	4838      	ldr	r0, [pc, #224]	; (23e875c <_Z17si1145_initializev+0x134>)
    si_last_vis = uv.readVisible();
 23e867a:	edc4 7a00 	vstr	s15, [r4]
    si_last_ir = uv.readIR();
 23e867e:	f009 fd63 	bl	23f2148 <_ZN15Adafruit_SI11456readIREv>
 23e8682:	ee07 0a90 	vmov	s15, r0
 23e8686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23e868a:	4e3a      	ldr	r6, [pc, #232]	; (23e8774 <_Z17si1145_initializev+0x14c>)
    si_last_uv = uv.readUV()/100.0;
 23e868c:	4833      	ldr	r0, [pc, #204]	; (23e875c <_Z17si1145_initializev+0x134>)
    si_last_ir = uv.readIR();
 23e868e:	edc6 7a00 	vstr	s15, [r6]
    si_last_uv = uv.readUV()/100.0;
 23e8692:	f009 fd53 	bl	23f213c <_ZN15Adafruit_SI11456readUVEv>
 23e8696:	f7fc fe05 	bl	23e52a4 <__aeabi_i2d>
 23e869a:	2200      	movs	r2, #0
 23e869c:	4b36      	ldr	r3, [pc, #216]	; (23e8778 <_Z17si1145_initializev+0x150>)
 23e869e:	f7fc ff95 	bl	23e55cc <__aeabi_ddiv>
 23e86a2:	f7fd f961 	bl	23e5968 <__aeabi_d2f>
    sprintf (msgbuf, "SI:VI[%d.%02d]", (int)si_last_vis, (int)(si_last_vis*100.0)%100); 
 23e86a6:	ed94 8a00 	vldr	s16, [r4]
    si_last_uv = uv.readUV()/100.0;
 23e86aa:	4d34      	ldr	r5, [pc, #208]	; (23e877c <_Z17si1145_initializev+0x154>)
    sprintf (msgbuf, "SI:VI[%d.%02d]", (int)si_last_vis, (int)(si_last_vis*100.0)%100); 
 23e86ac:	2464      	movs	r4, #100	; 0x64
    si_last_uv = uv.readUV()/100.0;
 23e86ae:	6028      	str	r0, [r5, #0]
    sprintf (msgbuf, "SI:VI[%d.%02d]", (int)si_last_vis, (int)(si_last_vis*100.0)%100); 
 23e86b0:	ee18 0a10 	vmov	r0, s16
 23e86b4:	f7fc fe08 	bl	23e52c8 <__aeabi_f2d>
 23e86b8:	2200      	movs	r2, #0
 23e86ba:	4b2f      	ldr	r3, [pc, #188]	; (23e8778 <_Z17si1145_initializev+0x150>)
 23e86bc:	f7fc fe5c 	bl	23e5378 <__aeabi_dmul>
 23e86c0:	f7fd f90a 	bl	23e58d8 <__aeabi_d2iz>
 23e86c4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 23e86c8:	fb90 f3f4 	sdiv	r3, r0, r4
 23e86cc:	ee17 2a90 	vmov	r2, s15
 23e86d0:	fb03 0314 	mls	r3, r3, r4, r0
 23e86d4:	492a      	ldr	r1, [pc, #168]	; (23e8780 <_Z17si1145_initializev+0x158>)
 23e86d6:	482b      	ldr	r0, [pc, #172]	; (23e8784 <_Z17si1145_initializev+0x15c>)
 23e86d8:	f00f fd5a 	bl	23f8190 <sprintf>
    Output (msgbuf);
 23e86dc:	4829      	ldr	r0, [pc, #164]	; (23e8784 <_Z17si1145_initializev+0x15c>)
 23e86de:	f7fe fd81 	bl	23e71e4 <_Z6OutputPKc>
    sprintf (msgbuf, "SI:IR[%d.%02d]", (int)si_last_ir, (int)(si_last_ir*100.0)%100); 
 23e86e2:	ed96 8a00 	vldr	s16, [r6]
 23e86e6:	ee18 0a10 	vmov	r0, s16
 23e86ea:	f7fc fded 	bl	23e52c8 <__aeabi_f2d>
 23e86ee:	2200      	movs	r2, #0
 23e86f0:	4b21      	ldr	r3, [pc, #132]	; (23e8778 <_Z17si1145_initializev+0x150>)
 23e86f2:	f7fc fe41 	bl	23e5378 <__aeabi_dmul>
 23e86f6:	f7fd f8ef 	bl	23e58d8 <__aeabi_d2iz>
 23e86fa:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 23e86fe:	fb90 f3f4 	sdiv	r3, r0, r4
 23e8702:	ee17 2a90 	vmov	r2, s15
 23e8706:	fb03 0314 	mls	r3, r3, r4, r0
 23e870a:	491f      	ldr	r1, [pc, #124]	; (23e8788 <_Z17si1145_initializev+0x160>)
 23e870c:	481d      	ldr	r0, [pc, #116]	; (23e8784 <_Z17si1145_initializev+0x15c>)
 23e870e:	f00f fd3f 	bl	23f8190 <sprintf>
    Output (msgbuf);
 23e8712:	481c      	ldr	r0, [pc, #112]	; (23e8784 <_Z17si1145_initializev+0x15c>)
 23e8714:	f7fe fd66 	bl	23e71e4 <_Z6OutputPKc>
    sprintf (msgbuf, "SI:UV[%d.%02d]", (int)si_last_uv, (int)(si_last_uv*100.0)%100); 
 23e8718:	ed95 8a00 	vldr	s16, [r5]
 23e871c:	ee18 0a10 	vmov	r0, s16
 23e8720:	f7fc fdd2 	bl	23e52c8 <__aeabi_f2d>
 23e8724:	2200      	movs	r2, #0
 23e8726:	4b14      	ldr	r3, [pc, #80]	; (23e8778 <_Z17si1145_initializev+0x150>)
 23e8728:	f7fc fe26 	bl	23e5378 <__aeabi_dmul>
 23e872c:	f7fd f8d4 	bl	23e58d8 <__aeabi_d2iz>
 23e8730:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 23e8734:	fb90 f3f4 	sdiv	r3, r0, r4
 23e8738:	ee17 2a90 	vmov	r2, s15
 23e873c:	fb03 0314 	mls	r3, r3, r4, r0
 23e8740:	4912      	ldr	r1, [pc, #72]	; (23e878c <_Z17si1145_initializev+0x164>)
 23e8742:	4810      	ldr	r0, [pc, #64]	; (23e8784 <_Z17si1145_initializev+0x15c>)
 23e8744:	f00f fd24 	bl	23f8190 <sprintf>
}
 23e8748:	ecbd 8b02 	vpop	{d8}
 23e874c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Output (msgbuf);
 23e8750:	480c      	ldr	r0, [pc, #48]	; (23e8784 <_Z17si1145_initializev+0x15c>)
 23e8752:	f7fe bd47 	b.w	23e71e4 <_Z6OutputPKc>
 23e8756:	bf00      	nop
 23e8758:	023fd6a8 	.word	0x023fd6a8
 23e875c:	1007ac1c 	.word	0x1007ac1c
 23e8760:	1006a80a 	.word	0x1006a80a
 23e8764:	023fea1c 	.word	0x023fea1c
 23e8768:	1006a1cc 	.word	0x1006a1cc
 23e876c:	023fd6b4 	.word	0x023fd6b4
 23e8770:	1007abe0 	.word	0x1007abe0
 23e8774:	1007abd8 	.word	0x1007abd8
 23e8778:	40590000 	.word	0x40590000
 23e877c:	1007abdc 	.word	0x1007abdc
 23e8780:	023fd6ba 	.word	0x023fd6ba
 23e8784:	1006f140 	.word	0x1006f140
 23e8788:	023fd6c9 	.word	0x023fd6c9
 23e878c:	023fd6d8 	.word	0x023fd6d8

023e8790 <_Z14vlx_initializev>:
 * 400  lx Sunrise or sunset on a clear day
 * 1000 lx Overcast day; typical TV studio lighting
 * 
 *=======================================================================================================================
 */
void vlx_initialize() {
 23e8790:	b508      	push	{r3, lr}
  Output("VLX:INIT");
 23e8792:	480f      	ldr	r0, [pc, #60]	; (23e87d0 <_Z14vlx_initializev+0x40>)
 23e8794:	f7fe fd26 	bl	23e71e4 <_Z6OutputPKc>

  if (veml.begin()) {
 23e8798:	f011 fd9e 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e879c:	4601      	mov	r1, r0
 23e879e:	480d      	ldr	r0, [pc, #52]	; (23e87d4 <_Z14vlx_initializev+0x44>)
 23e87a0:	f00a faff 	bl	23f2da2 <_ZN17Adafruit_VEML77005beginEP7TwoWire>
 23e87a4:	4a0c      	ldr	r2, [pc, #48]	; (23e87d8 <_Z14vlx_initializev+0x48>)
 23e87a6:	4b0d      	ldr	r3, [pc, #52]	; (23e87dc <_Z14vlx_initializev+0x4c>)
 23e87a8:	b140      	cbz	r0, 23e87bc <_Z14vlx_initializev+0x2c>
    VEML7700_exists = true;
 23e87aa:	2101      	movs	r1, #1
 23e87ac:	7011      	strb	r1, [r2, #0]
    msgp = (char *) "VLX OK";
 23e87ae:	4a0c      	ldr	r2, [pc, #48]	; (23e87e0 <_Z14vlx_initializev+0x50>)
 23e87b0:	601a      	str	r2, [r3, #0]
  else {
    msgp = (char *) "VLX NF";
    VEML7700_exists = false;
    SystemStatusBits |= SSB_VLX;  // Turn On Bit
  }
  Output (msgp);
 23e87b2:	6818      	ldr	r0, [r3, #0]
}
 23e87b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
 23e87b8:	f7fe bd14 	b.w	23e71e4 <_Z6OutputPKc>
    msgp = (char *) "VLX NF";
 23e87bc:	4909      	ldr	r1, [pc, #36]	; (23e87e4 <_Z14vlx_initializev+0x54>)
    VEML7700_exists = false;
 23e87be:	7010      	strb	r0, [r2, #0]
    msgp = (char *) "VLX NF";
 23e87c0:	6019      	str	r1, [r3, #0]
    SystemStatusBits |= SSB_VLX;  // Turn On Bit
 23e87c2:	4909      	ldr	r1, [pc, #36]	; (23e87e8 <_Z14vlx_initializev+0x58>)
 23e87c4:	680a      	ldr	r2, [r1, #0]
 23e87c6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 23e87ca:	600a      	str	r2, [r1, #0]
 23e87cc:	e7f1      	b.n	23e87b2 <_Z14vlx_initializev+0x22>
 23e87ce:	bf00      	nop
 23e87d0:	023fd6e7 	.word	0x023fd6e7
 23e87d4:	1007ac24 	.word	0x1007ac24
 23e87d8:	1006a81c 	.word	0x1006a81c
 23e87dc:	1006f540 	.word	0x1006f540
 23e87e0:	023fd6f0 	.word	0x023fd6f0
 23e87e4:	023fd6f7 	.word	0x023fd6f7
 23e87e8:	1006a1cc 	.word	0x1006a1cc

023e87ec <_Z14blx_initializev>:
/* 
 *=======================================================================================================================
 * blx_initialize() - DFRobot_B_LUX_V30B sensor
 *=======================================================================================================================
 */
void blx_initialize() {
 23e87ec:	b508      	push	{r3, lr}
  Output("BLX:INIT");
 23e87ee:	480d      	ldr	r0, [pc, #52]	; (23e8824 <_Z14blx_initializev+0x38>)
 23e87f0:	f7fe fcf8 	bl	23e71e4 <_Z6OutputPKc>

  if (I2C_Device_Exist(BLX_ADDRESS)) {
 23e87f4:	204a      	movs	r0, #74	; 0x4a
 23e87f6:	f7fe fb18 	bl	23e6e2a <_Z16I2C_Device_Existh>
 23e87fa:	4a0b      	ldr	r2, [pc, #44]	; (23e8828 <_Z14blx_initializev+0x3c>)
 23e87fc:	4b0b      	ldr	r3, [pc, #44]	; (23e882c <_Z14blx_initializev+0x40>)
 23e87fe:	b140      	cbz	r0, 23e8812 <_Z14blx_initializev+0x26>
    BLX_exists = true;
 23e8800:	2101      	movs	r1, #1
 23e8802:	7011      	strb	r1, [r2, #0]
    msgp = (char *) "BLX:OK";
 23e8804:	4a0a      	ldr	r2, [pc, #40]	; (23e8830 <_Z14blx_initializev+0x44>)
 23e8806:	601a      	str	r2, [r3, #0]
  else {
    BLX_exists = false;
    msgp = (char *) "BLX:NF";
    SystemStatusBits |= SSB_BLX;  // Turn On Bit
  }
  Output (msgp);
 23e8808:	6818      	ldr	r0, [r3, #0]
}
 23e880a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
 23e880e:	f7fe bce9 	b.w	23e71e4 <_Z6OutputPKc>
    SystemStatusBits |= SSB_BLX;  // Turn On Bit
 23e8812:	4908      	ldr	r1, [pc, #32]	; (23e8834 <_Z14blx_initializev+0x48>)
    BLX_exists = false;
 23e8814:	7010      	strb	r0, [r2, #0]
    msgp = (char *) "BLX:NF";
 23e8816:	4a08      	ldr	r2, [pc, #32]	; (23e8838 <_Z14blx_initializev+0x4c>)
 23e8818:	601a      	str	r2, [r3, #0]
    SystemStatusBits |= SSB_BLX;  // Turn On Bit
 23e881a:	680a      	ldr	r2, [r1, #0]
 23e881c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 23e8820:	600a      	str	r2, [r1, #0]
 23e8822:	e7f1      	b.n	23e8808 <_Z14blx_initializev+0x1c>
 23e8824:	023fd6fe 	.word	0x023fd6fe
 23e8828:	1006a2b8 	.word	0x1006a2b8
 23e882c:	1006f540 	.word	0x1006f540
 23e8830:	023fd707 	.word	0x023fd707
 23e8834:	1006a1cc 	.word	0x1006a1cc
 23e8838:	023fd70e 	.word	0x023fd70e
 23e883c:	00000000 	.word	0x00000000

023e8840 <_Z15blx_takereadingv>:
/* 
 *=======================================================================================================================
 * blx_takereading() - DFRobot_B_LUX_V30B sensor reading
 *=======================================================================================================================
 */
float blx_takereading() {
 23e8840:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t raw;
  uint8_t data[4]; // Array to hold the 4 bytes of data
  const unsigned long timeout = 1000; // Timeout in milliseconds
  unsigned long startTime;

  Wire.beginTransmission(BLX_ADDRESS);
 23e8842:	f011 fd49 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e8846:	214a      	movs	r1, #74	; 0x4a
 23e8848:	f010 fb3a 	bl	23f8ec0 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x00); // Point to the data register address
 23e884c:	f011 fd44 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e8850:	2100      	movs	r1, #0
 23e8852:	f7fe f98f 	bl	23e6b74 <_ZN7TwoWire5writeEi.isra.0>
  Wire.endTransmission(false); // false tells the I2C master to not release the bus between the write and read operations
 23e8856:	f011 fd3f 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e885a:	2100      	movs	r1, #0
 23e885c:	f010 fb33 	bl	23f8ec6 <_ZN7TwoWire15endTransmissionEh>

  // Request 4 bytes from the device
  Wire.requestFrom(BLX_ADDRESS, 4);
 23e8860:	f011 fd3a 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e8864:	2204      	movs	r2, #4
 23e8866:	214a      	movs	r1, #74	; 0x4a
 23e8868:	f010 fb23 	bl	23f8eb2 <_ZN7TwoWire11requestFromEhj>
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23e886c:	f00e fea8 	bl	23f75c0 <HAL_Timer_Get_Milli_Seconds>
 23e8870:	4604      	mov	r4, r0

  startTime = millis(); // Record the start time
  while (Wire.available() < 4) { // Wait for all bytes to be received
 23e8872:	f011 fd31 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e8876:	6803      	ldr	r3, [r0, #0]
 23e8878:	691b      	ldr	r3, [r3, #16]
 23e887a:	4798      	blx	r3
 23e887c:	2803      	cmp	r0, #3
 23e887e:	dc09      	bgt.n	23e8894 <_Z15blx_takereadingv+0x54>
 23e8880:	f00e fe9e 	bl	23f75c0 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - startTime > timeout) { // Check if timeout has been reached
 23e8884:	1b00      	subs	r0, r0, r4
 23e8886:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 23e888a:	d826      	bhi.n	23e88da <_Z15blx_takereadingv+0x9a>
      return -1; // Return error code if timeout occurs
    }
    delay(1); // Short delay to prevent busy-waiting
 23e888c:	2001      	movs	r0, #1
 23e888e:	f00f fd19 	bl	23f82c4 <delay>
  while (Wire.available() < 4) { // Wait for all bytes to be received
 23e8892:	e7ee      	b.n	23e8872 <_Z15blx_takereadingv+0x32>
  }

  for (int i = 0; i < 4; i++) {
 23e8894:	2400      	movs	r4, #0
 23e8896:	ad01      	add	r5, sp, #4
    data[i] = Wire.read(); // Read each byte into the array
 23e8898:	f011 fd1e 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e889c:	6803      	ldr	r3, [r0, #0]
  for (int i = 0; i < 4; i++) {
 23e889e:	3401      	adds	r4, #1
    data[i] = Wire.read(); // Read each byte into the array
 23e88a0:	695b      	ldr	r3, [r3, #20]
 23e88a2:	4798      	blx	r3
  for (int i = 0; i < 4; i++) {
 23e88a4:	2c04      	cmp	r4, #4
    data[i] = Wire.read(); // Read each byte into the array
 23e88a6:	f805 0b01 	strb.w	r0, [r5], #1
  for (int i = 0; i < 4; i++) {
 23e88aa:	d1f5      	bne.n	23e8898 <_Z15blx_takereadingv+0x58>
  raw = data[3];
  raw = (raw<<8)|data[2];
  raw = (raw<<8)|data[1];
  raw = (raw<<8)|data[0];

  lux = ((float)raw*1.4) / 1000;  // Is 1.4 scaling multiplier based on the sensor's internal calibration ?
 23e88ac:	eddd 7a01 	vldr	s15, [sp, #4]
 23e88b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23e88b4:	ee17 0a90 	vmov	r0, s15
 23e88b8:	f7fc fd06 	bl	23e52c8 <__aeabi_f2d>
 23e88bc:	a309      	add	r3, pc, #36	; (adr r3, 23e88e4 <_Z15blx_takereadingv+0xa4>)
 23e88be:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e88c2:	f7fc fd59 	bl	23e5378 <__aeabi_dmul>
 23e88c6:	2200      	movs	r2, #0
 23e88c8:	4b05      	ldr	r3, [pc, #20]	; (23e88e0 <_Z15blx_takereadingv+0xa0>)
 23e88ca:	f7fc fe7f 	bl	23e55cc <__aeabi_ddiv>
 23e88ce:	f7fd f84b 	bl	23e5968 <__aeabi_d2f>
 23e88d2:	ee00 0a10 	vmov	s0, r0
                                    // Is divide by 1000 converting from millilux ?

  // sprintf (msgbuf, "BLUX30 LUX %f RAW %lu\n", lux, raw);
  // Output (msgbuf);
  return(lux);
}
 23e88d6:	b003      	add	sp, #12
 23e88d8:	bd30      	pop	{r4, r5, pc}
      return -1; // Return error code if timeout occurs
 23e88da:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 23e88de:	e7fa      	b.n	23e88d6 <_Z15blx_takereadingv+0x96>
 23e88e0:	408f4000 	.word	0x408f4000
 23e88e4:	66666666 	.word	0x66666666
 23e88e8:	3ff66666 	.word	0x3ff66666

023e88ec <_Z13pm25aqi_clearv>:
 *=======================================================================================================================
 * pm25aqi_clear() - clear observation
 *=======================================================================================================================
 */
void pm25aqi_clear() {
  pm25aqi_obs.max_s10 = 0;
 23e88ec:	2200      	movs	r2, #0
 23e88ee:	4b04      	ldr	r3, [pc, #16]	; (23e8900 <_Z13pm25aqi_clearv+0x14>)
 23e88f0:	801a      	strh	r2, [r3, #0]
  pm25aqi_obs.max_s25 = 0;
 23e88f2:	805a      	strh	r2, [r3, #2]
  pm25aqi_obs.max_s100 = 0;
 23e88f4:	809a      	strh	r2, [r3, #4]
  pm25aqi_obs.max_e10 = 0;
 23e88f6:	80da      	strh	r2, [r3, #6]
  pm25aqi_obs.max_e25 = 0;
 23e88f8:	811a      	strh	r2, [r3, #8]
  pm25aqi_obs.max_e100 = 0;
 23e88fa:	815a      	strh	r2, [r3, #10]
}
 23e88fc:	4770      	bx	lr
 23e88fe:	bf00      	nop
 23e8900:	1007aa24 	.word	0x1007aa24

023e8904 <_Z18pm25aqi_initializev>:
/* 
 *=======================================================================================================================
 * pm25aqi_initialize() - air quality sensor
 *=======================================================================================================================
 */
void pm25aqi_initialize() {
 23e8904:	b538      	push	{r3, r4, r5, lr}
  Output("PM25AQI:INIT");
 23e8906:	4817      	ldr	r0, [pc, #92]	; (23e8964 <_Z18pm25aqi_initializev+0x60>)
 23e8908:	f7fe fc6c 	bl	23e71e4 <_Z6OutputPKc>
  Wire.beginTransmission(PM25AQI_ADDRESS);
 23e890c:	f011 fce4 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e8910:	2112      	movs	r1, #18
 23e8912:	f010 fad5 	bl	23f8ec0 <_ZN7TwoWire17beginTransmissionEi>
  if (Wire.endTransmission()) {
 23e8916:	f011 fcdf 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e891a:	f010 fad8 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>
 23e891e:	4c12      	ldr	r4, [pc, #72]	; (23e8968 <_Z18pm25aqi_initializev+0x64>)
 23e8920:	4d12      	ldr	r5, [pc, #72]	; (23e896c <_Z18pm25aqi_initializev+0x68>)
 23e8922:	b168      	cbz	r0, 23e8940 <_Z18pm25aqi_initializev+0x3c>
    msgp = (char *) "PM:NF";
 23e8924:	4b12      	ldr	r3, [pc, #72]	; (23e8970 <_Z18pm25aqi_initializev+0x6c>)
    PM25AQI_exists = false;
    SystemStatusBits |= SSB_PM25AQI;  // Turn On Bit
 23e8926:	4a13      	ldr	r2, [pc, #76]	; (23e8974 <_Z18pm25aqi_initializev+0x70>)
    msgp = (char *) "PM:NF";
 23e8928:	6023      	str	r3, [r4, #0]
    PM25AQI_exists = false;
 23e892a:	2300      	movs	r3, #0
 23e892c:	702b      	strb	r3, [r5, #0]
    SystemStatusBits |= SSB_PM25AQI;  // Turn On Bit
 23e892e:	6813      	ldr	r3, [r2, #0]
 23e8930:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 23e8934:	6013      	str	r3, [r2, #0]
      msgp = (char *) "PM:OK";
      PM25AQI_exists = true;
      pm25aqi_clear();
    }
  }
  Output (msgp);
 23e8936:	6820      	ldr	r0, [r4, #0]
}
 23e8938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
 23e893c:	f7fe bc52 	b.w	23e71e4 <_Z6OutputPKc>
    if (! pmaq.begin_I2C()) {      // connect to the sensor over I2C
 23e8940:	f011 fcca 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e8944:	4601      	mov	r1, r0
 23e8946:	480c      	ldr	r0, [pc, #48]	; (23e8978 <_Z18pm25aqi_initializev+0x74>)
 23e8948:	f009 fa41 	bl	23f1dce <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>
 23e894c:	b918      	cbnz	r0, 23e8956 <_Z18pm25aqi_initializev+0x52>
      msgp = (char *) "PM:Begin NF";
 23e894e:	4b0b      	ldr	r3, [pc, #44]	; (23e897c <_Z18pm25aqi_initializev+0x78>)
      PM25AQI_exists = false;
 23e8950:	7028      	strb	r0, [r5, #0]
      msgp = (char *) "PM:Begin NF";
 23e8952:	6023      	str	r3, [r4, #0]
      PM25AQI_exists = false;
 23e8954:	e7ef      	b.n	23e8936 <_Z18pm25aqi_initializev+0x32>
      msgp = (char *) "PM:OK";
 23e8956:	4b0a      	ldr	r3, [pc, #40]	; (23e8980 <_Z18pm25aqi_initializev+0x7c>)
 23e8958:	6023      	str	r3, [r4, #0]
      PM25AQI_exists = true;
 23e895a:	2301      	movs	r3, #1
 23e895c:	702b      	strb	r3, [r5, #0]
      pm25aqi_clear();
 23e895e:	f7ff ffc5 	bl	23e88ec <_Z13pm25aqi_clearv>
 23e8962:	e7e8      	b.n	23e8936 <_Z18pm25aqi_initializev+0x32>
 23e8964:	023fd715 	.word	0x023fd715
 23e8968:	1006f540 	.word	0x1006f540
 23e896c:	1006a304 	.word	0x1006a304
 23e8970:	023fd722 	.word	0x023fd722
 23e8974:	1006a1cc 	.word	0x1006a1cc
 23e8978:	1007aa30 	.word	0x1007aa30
 23e897c:	023fd728 	.word	0x023fd728
 23e8980:	023fd734 	.word	0x023fd734

023e8984 <_Z19pm25aqi_TakeReadingv>:
/* 
 *=======================================================================================================================
 * pm25aqi_TakeReading() - take air quality reading - keep the larger value
 *=======================================================================================================================
 */
void pm25aqi_TakeReading() {
 23e8984:	b510      	push	{r4, lr}
  if (PM25AQI_exists) {
 23e8986:	4c1d      	ldr	r4, [pc, #116]	; (23e89fc <_Z19pm25aqi_TakeReadingv+0x78>)
void pm25aqi_TakeReading() {
 23e8988:	b088      	sub	sp, #32
  if (PM25AQI_exists) {
 23e898a:	7823      	ldrb	r3, [r4, #0]
 23e898c:	b34b      	cbz	r3, 23e89e2 <_Z19pm25aqi_TakeReadingv+0x5e>
    PM25_AQI_Data aqid;

    if (pmaq.read(&aqid)) {
 23e898e:	4669      	mov	r1, sp
 23e8990:	481b      	ldr	r0, [pc, #108]	; (23e8a00 <_Z19pm25aqi_TakeReadingv+0x7c>)
 23e8992:	f009 fa32 	bl	23f1dfa <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata>
 23e8996:	b330      	cbz	r0, 23e89e6 <_Z19pm25aqi_TakeReadingv+0x62>
      if (aqid.pm10_standard  > pm25aqi_obs.max_s10)  { pm25aqi_obs.max_s10  = aqid.pm10_standard;  }
 23e8998:	4b1a      	ldr	r3, [pc, #104]	; (23e8a04 <_Z19pm25aqi_TakeReadingv+0x80>)
 23e899a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 23e899e:	8819      	ldrh	r1, [r3, #0]
 23e89a0:	4291      	cmp	r1, r2
 23e89a2:	bf38      	it	cc
 23e89a4:	801a      	strhcc	r2, [r3, #0]
      if (aqid.pm25_standard  > pm25aqi_obs.max_s25)  { pm25aqi_obs.max_s25  = aqid.pm25_standard;  }
 23e89a6:	8859      	ldrh	r1, [r3, #2]
 23e89a8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 23e89ac:	4291      	cmp	r1, r2
 23e89ae:	bf38      	it	cc
 23e89b0:	805a      	strhcc	r2, [r3, #2]
      if (aqid.pm100_standard > pm25aqi_obs.max_s100) { pm25aqi_obs.max_s100 = aqid.pm100_standard; }
 23e89b2:	8899      	ldrh	r1, [r3, #4]
 23e89b4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 23e89b8:	4291      	cmp	r1, r2
 23e89ba:	bf38      	it	cc
 23e89bc:	809a      	strhcc	r2, [r3, #4]

      if (aqid.pm10_env  > pm25aqi_obs.max_e10)  { pm25aqi_obs.max_e10  = aqid.pm10_env;  }
 23e89be:	88d9      	ldrh	r1, [r3, #6]
 23e89c0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 23e89c4:	4291      	cmp	r1, r2
 23e89c6:	bf38      	it	cc
 23e89c8:	80da      	strhcc	r2, [r3, #6]
      if (aqid.pm25_env  > pm25aqi_obs.max_e25)  { pm25aqi_obs.max_e25  = aqid.pm25_env;  }
 23e89ca:	8919      	ldrh	r1, [r3, #8]
 23e89cc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 23e89d0:	4291      	cmp	r1, r2
 23e89d2:	bf38      	it	cc
 23e89d4:	811a      	strhcc	r2, [r3, #8]
      if (aqid.pm100_env > pm25aqi_obs.max_e100) { pm25aqi_obs.max_e100 = aqid.pm100_env; }
 23e89d6:	8959      	ldrh	r1, [r3, #10]
 23e89d8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 23e89dc:	4291      	cmp	r1, r2
 23e89de:	d200      	bcs.n	23e89e2 <_Z19pm25aqi_TakeReadingv+0x5e>
 23e89e0:	815a      	strh	r2, [r3, #10]
      SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
      PM25AQI_exists = false;
      Output ("PM OFFLINE");
    }
  }
}
 23e89e2:	b008      	add	sp, #32
 23e89e4:	bd10      	pop	{r4, pc}
      SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
 23e89e6:	4a08      	ldr	r2, [pc, #32]	; (23e8a08 <_Z19pm25aqi_TakeReadingv+0x84>)
      PM25AQI_exists = false;
 23e89e8:	7020      	strb	r0, [r4, #0]
      SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
 23e89ea:	6813      	ldr	r3, [r2, #0]
      Output ("PM OFFLINE");
 23e89ec:	4807      	ldr	r0, [pc, #28]	; (23e8a0c <_Z19pm25aqi_TakeReadingv+0x88>)
      SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
 23e89ee:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 23e89f2:	6013      	str	r3, [r2, #0]
      Output ("PM OFFLINE");
 23e89f4:	f7fe fbf6 	bl	23e71e4 <_Z6OutputPKc>
}
 23e89f8:	e7f3      	b.n	23e89e2 <_Z19pm25aqi_TakeReadingv+0x5e>
 23e89fa:	bf00      	nop
 23e89fc:	1006a304 	.word	0x1006a304
 23e8a00:	1007aa30 	.word	0x1007aa30
 23e8a04:	1007aa24 	.word	0x1007aa24
 23e8a08:	1006a1cc 	.word	0x1006a1cc
 23e8a0c:	023fd73a 	.word	0x023fd73a

023e8a10 <_Z14hdc_initializev>:
/* 
 *=======================================================================================================================
 * hdc_initialize() - HDC3002c sensor initialize
 *=======================================================================================================================
 */
void hdc_initialize() {
 23e8a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 23e8a12:	b085      	sub	sp, #20
  Output("HDC:INIT");
  
  // 1st HDC I2C Temperature/Humidity Sensor (I2C ADDRESS = 0x44)
  hdc1 = Adafruit_HDC302x();
 23e8a14:	4e2b      	ldr	r6, [pc, #172]	; (23e8ac4 <_Z14hdc_initializev+0xb4>)
  Output("HDC:INIT");
 23e8a16:	482c      	ldr	r0, [pc, #176]	; (23e8ac8 <_Z14hdc_initializev+0xb8>)
  hdc1 = Adafruit_HDC302x();
 23e8a18:	ac02      	add	r4, sp, #8
  Output("HDC:INIT");
 23e8a1a:	f7fe fbe3 	bl	23e71e4 <_Z6OutputPKc>
  hdc1 = Adafruit_HDC302x();
 23e8a1e:	4620      	mov	r0, r4
 23e8a20:	f008 fe25 	bl	23f166e <_ZN16Adafruit_HDC302xC1Ev>
 23e8a24:	e894 0003 	ldmia.w	r4, {r0, r1}
 23e8a28:	80b1      	strh	r1, [r6, #4]
 23e8a2a:	6030      	str	r0, [r6, #0]
  if (!hdc1.begin(HDC_ADDRESS_1, &Wire)) {
 23e8a2c:	f011 fc54 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e8a30:	2146      	movs	r1, #70	; 0x46
 23e8a32:	4602      	mov	r2, r0
 23e8a34:	4630      	mov	r0, r6
 23e8a36:	f008 feeb 	bl	23f1810 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire>
 23e8a3a:	4d24      	ldr	r5, [pc, #144]	; (23e8acc <_Z14hdc_initializev+0xbc>)
 23e8a3c:	4f24      	ldr	r7, [pc, #144]	; (23e8ad0 <_Z14hdc_initializev+0xc0>)
 23e8a3e:	bb48      	cbnz	r0, 23e8a94 <_Z14hdc_initializev+0x84>
    msgp = (char *) "HDC1 NF";
 23e8a40:	4b24      	ldr	r3, [pc, #144]	; (23e8ad4 <_Z14hdc_initializev+0xc4>)
    HDC_1_exists = false;
    SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
 23e8a42:	4a25      	ldr	r2, [pc, #148]	; (23e8ad8 <_Z14hdc_initializev+0xc8>)
    msgp = (char *) "HDC1 NF";
 23e8a44:	602b      	str	r3, [r5, #0]
    SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
 23e8a46:	6813      	ldr	r3, [r2, #0]
    HDC_1_exists = false;
 23e8a48:	7038      	strb	r0, [r7, #0]
    SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
 23e8a4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23e8a4e:	6013      	str	r3, [r2, #0]
    msgp = (char *) "HDC1 OK";
  }
  Output (msgp);

  // 2nd HDC I2C Temperature/Humidity Sensor (I2C ADDRESS = 0x45)
  hdc2 = Adafruit_HDC302x();
 23e8a50:	4e22      	ldr	r6, [pc, #136]	; (23e8adc <_Z14hdc_initializev+0xcc>)
  Output (msgp);
 23e8a52:	6828      	ldr	r0, [r5, #0]
 23e8a54:	f7fe fbc6 	bl	23e71e4 <_Z6OutputPKc>
  hdc2 = Adafruit_HDC302x();
 23e8a58:	4620      	mov	r0, r4
 23e8a5a:	f008 fe08 	bl	23f166e <_ZN16Adafruit_HDC302xC1Ev>
 23e8a5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 23e8a62:	80b1      	strh	r1, [r6, #4]
 23e8a64:	6030      	str	r0, [r6, #0]
  if (!hdc2.begin(HDC_ADDRESS_2, &Wire)) {
 23e8a66:	f011 fc37 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e8a6a:	2147      	movs	r1, #71	; 0x47
 23e8a6c:	4602      	mov	r2, r0
 23e8a6e:	4630      	mov	r0, r6
 23e8a70:	f008 fece 	bl	23f1810 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire>
 23e8a74:	4f1a      	ldr	r7, [pc, #104]	; (23e8ae0 <_Z14hdc_initializev+0xd0>)
 23e8a76:	b9c8      	cbnz	r0, 23e8aac <_Z14hdc_initializev+0x9c>
    msgp = (char *) "HDC2 NF";
 23e8a78:	4b1a      	ldr	r3, [pc, #104]	; (23e8ae4 <_Z14hdc_initializev+0xd4>)
    HDC_2_exists = false;
    SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
 23e8a7a:	4a17      	ldr	r2, [pc, #92]	; (23e8ad8 <_Z14hdc_initializev+0xc8>)
    msgp = (char *) "HDC2 NF";
 23e8a7c:	602b      	str	r3, [r5, #0]
    SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
 23e8a7e:	6813      	ldr	r3, [r2, #0]
    HDC_2_exists = false;
 23e8a80:	7038      	strb	r0, [r7, #0]
    SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
 23e8a82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 23e8a86:	6013      	str	r3, [r2, #0]
    double t,h;
    hdc2.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0);
    HDC_2_exists = true;
    msgp = (char *) "HDC2 OK";
  }
  Output (msgp);
 23e8a88:	6828      	ldr	r0, [r5, #0]
}
 23e8a8a:	b005      	add	sp, #20
 23e8a8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  Output (msgp);
 23e8a90:	f7fe bba8 	b.w	23e71e4 <_Z6OutputPKc>
    hdc1.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0);
 23e8a94:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 23e8a98:	4622      	mov	r2, r4
 23e8a9a:	4669      	mov	r1, sp
 23e8a9c:	4630      	mov	r0, r6
 23e8a9e:	f008 fe87 	bl	23f17b0 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>
    HDC_1_exists = true;
 23e8aa2:	2301      	movs	r3, #1
 23e8aa4:	703b      	strb	r3, [r7, #0]
    msgp = (char *) "HDC1 OK";
 23e8aa6:	4b10      	ldr	r3, [pc, #64]	; (23e8ae8 <_Z14hdc_initializev+0xd8>)
 23e8aa8:	602b      	str	r3, [r5, #0]
 23e8aaa:	e7d1      	b.n	23e8a50 <_Z14hdc_initializev+0x40>
    hdc2.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0);
 23e8aac:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 23e8ab0:	4622      	mov	r2, r4
 23e8ab2:	4669      	mov	r1, sp
 23e8ab4:	4630      	mov	r0, r6
 23e8ab6:	f008 fe7b 	bl	23f17b0 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>
    HDC_2_exists = true;
 23e8aba:	2301      	movs	r3, #1
 23e8abc:	703b      	strb	r3, [r7, #0]
    msgp = (char *) "HDC2 OK";
 23e8abe:	4b0b      	ldr	r3, [pc, #44]	; (23e8aec <_Z14hdc_initializev+0xdc>)
 23e8ac0:	602b      	str	r3, [r5, #0]
 23e8ac2:	e7e1      	b.n	23e8a88 <_Z14hdc_initializev+0x78>
 23e8ac4:	1006ae98 	.word	0x1006ae98
 23e8ac8:	023fd745 	.word	0x023fd745
 23e8acc:	1006f540 	.word	0x1006f540
 23e8ad0:	1006a2e4 	.word	0x1006a2e4
 23e8ad4:	023fd74e 	.word	0x023fd74e
 23e8ad8:	1006a1cc 	.word	0x1006a1cc
 23e8adc:	1006aea0 	.word	0x1006aea0
 23e8ae0:	1006a2e5 	.word	0x1006a2e5
 23e8ae4:	023fd75e 	.word	0x023fd75e
 23e8ae8:	023fd756 	.word	0x023fd756
 23e8aec:	023fd766 	.word	0x023fd766

023e8af0 <_Z14lps_initializev>:
/* 
 *=======================================================================================================================
 * lps_initialize() - LPS35HW Pressure and Temperature initialize
 *=======================================================================================================================
 */
void lps_initialize() {
 23e8af0:	b570      	push	{r4, r5, r6, lr}
  Output("LPS:INIT");
 23e8af2:	4831      	ldr	r0, [pc, #196]	; (23e8bb8 <_Z14lps_initializev+0xc8>)
void lps_initialize() {
 23e8af4:	b088      	sub	sp, #32
  
  // 1st LPS I2C Pressure/Temperature Sensor (I2C ADDRESS = 0x5D)
  lps1 = Adafruit_LPS35HW();
 23e8af6:	4c31      	ldr	r4, [pc, #196]	; (23e8bbc <_Z14lps_initializev+0xcc>)
  Output("LPS:INIT");
 23e8af8:	f7fe fb74 	bl	23e71e4 <_Z6OutputPKc>
  lps1 = Adafruit_LPS35HW();
 23e8afc:	ad01      	add	r5, sp, #4
 23e8afe:	a801      	add	r0, sp, #4
 23e8b00:	f008 ff86 	bl	23f1a10 <_ZN16Adafruit_LPS35HWC1Ev>
 23e8b04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23e8b06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23e8b08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 23e8b0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  if (!lps1.begin_I2C(LPS_ADDRESS_1, &Wire)) {
 23e8b10:	f011 fbe2 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e8b14:	215d      	movs	r1, #93	; 0x5d
 23e8b16:	4602      	mov	r2, r0
 23e8b18:	f1a4 0010 	sub.w	r0, r4, #16
 23e8b1c:	f009 f865 	bl	23f1bea <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire>
 23e8b20:	4e27      	ldr	r6, [pc, #156]	; (23e8bc0 <_Z14lps_initializev+0xd0>)
 23e8b22:	4d28      	ldr	r5, [pc, #160]	; (23e8bc4 <_Z14lps_initializev+0xd4>)
 23e8b24:	2800      	cmp	r0, #0
 23e8b26:	d12d      	bne.n	23e8b84 <_Z14lps_initializev+0x94>
    msgp = (char *) "LPS1 NF";
 23e8b28:	4b27      	ldr	r3, [pc, #156]	; (23e8bc8 <_Z14lps_initializev+0xd8>)
    LPS_1_exists = false;
    SystemStatusBits |= SSB_LPS_1;  // Turn On Bit
 23e8b2a:	4a28      	ldr	r2, [pc, #160]	; (23e8bcc <_Z14lps_initializev+0xdc>)
    msgp = (char *) "LPS1 NF";
 23e8b2c:	6033      	str	r3, [r6, #0]
    SystemStatusBits |= SSB_LPS_1;  // Turn On Bit
 23e8b2e:	6813      	ldr	r3, [r2, #0]
    LPS_1_exists = false;
 23e8b30:	7028      	strb	r0, [r5, #0]
    SystemStatusBits |= SSB_LPS_1;  // Turn On Bit
 23e8b32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 23e8b36:	6013      	str	r3, [r2, #0]
    t = lps1.readTemperature();
    p = lps1.readPressure();
    LPS_1_exists = true;
    msgp = (char *) "LPS1 OK";
  }
  Output (msgp);
 23e8b38:	6830      	ldr	r0, [r6, #0]

  // 2nd LPS I2C Pressure/Temperature Sensor (I2C ADDRESS = 0x5C)
  lps2 = Adafruit_LPS35HW();
 23e8b3a:	4d25      	ldr	r5, [pc, #148]	; (23e8bd0 <_Z14lps_initializev+0xe0>)
  Output (msgp);
 23e8b3c:	f7fe fb52 	bl	23e71e4 <_Z6OutputPKc>
  lps2 = Adafruit_LPS35HW();
 23e8b40:	ac01      	add	r4, sp, #4
 23e8b42:	a801      	add	r0, sp, #4
 23e8b44:	f008 ff64 	bl	23f1a10 <_ZN16Adafruit_LPS35HWC1Ev>
 23e8b48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23e8b4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23e8b4c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 23e8b50:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (!lps2.begin_I2C(LPS_ADDRESS_2, &Wire)) {
 23e8b54:	f011 fbc0 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e8b58:	215c      	movs	r1, #92	; 0x5c
 23e8b5a:	4602      	mov	r2, r0
 23e8b5c:	f1a5 0010 	sub.w	r0, r5, #16
 23e8b60:	f009 f843 	bl	23f1bea <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire>
 23e8b64:	4c1b      	ldr	r4, [pc, #108]	; (23e8bd4 <_Z14lps_initializev+0xe4>)
 23e8b66:	b9d0      	cbnz	r0, 23e8b9e <_Z14lps_initializev+0xae>
    msgp = (char *) "LPS2 NF";
 23e8b68:	4b1b      	ldr	r3, [pc, #108]	; (23e8bd8 <_Z14lps_initializev+0xe8>)
    LPS_2_exists = false;
    SystemStatusBits |= SSB_LPS_2;  // Turn On Bit
 23e8b6a:	4a18      	ldr	r2, [pc, #96]	; (23e8bcc <_Z14lps_initializev+0xdc>)
    msgp = (char *) "LPS2 NF";
 23e8b6c:	6033      	str	r3, [r6, #0]
    SystemStatusBits |= SSB_LPS_2;  // Turn On Bit
 23e8b6e:	6813      	ldr	r3, [r2, #0]
    LPS_2_exists = false;
 23e8b70:	7020      	strb	r0, [r4, #0]
    SystemStatusBits |= SSB_LPS_2;  // Turn On Bit
 23e8b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 23e8b76:	6013      	str	r3, [r2, #0]
    t = lps2.readTemperature();
    p = lps2.readPressure();
    LPS_2_exists = true;
    msgp = (char *) "LPS2 OK";
  }
  Output (msgp);
 23e8b78:	6830      	ldr	r0, [r6, #0]
}
 23e8b7a:	b008      	add	sp, #32
 23e8b7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Output (msgp);
 23e8b80:	f7fe bb30 	b.w	23e71e4 <_Z6OutputPKc>
    t = lps1.readTemperature();
 23e8b84:	f1a4 0010 	sub.w	r0, r4, #16
 23e8b88:	f008 ff5a 	bl	23f1a40 <_ZN16Adafruit_LPS35HW15readTemperatureEv>
    p = lps1.readPressure();
 23e8b8c:	f1a4 0010 	sub.w	r0, r4, #16
 23e8b90:	f008 ff78 	bl	23f1a84 <_ZN16Adafruit_LPS35HW12readPressureEv>
    LPS_1_exists = true;
 23e8b94:	2301      	movs	r3, #1
 23e8b96:	702b      	strb	r3, [r5, #0]
    msgp = (char *) "LPS1 OK";
 23e8b98:	4b10      	ldr	r3, [pc, #64]	; (23e8bdc <_Z14lps_initializev+0xec>)
 23e8b9a:	6033      	str	r3, [r6, #0]
 23e8b9c:	e7cc      	b.n	23e8b38 <_Z14lps_initializev+0x48>
    t = lps2.readTemperature();
 23e8b9e:	f1a5 0010 	sub.w	r0, r5, #16
 23e8ba2:	f008 ff4d 	bl	23f1a40 <_ZN16Adafruit_LPS35HW15readTemperatureEv>
    p = lps2.readPressure();
 23e8ba6:	f1a5 0010 	sub.w	r0, r5, #16
 23e8baa:	f008 ff6b 	bl	23f1a84 <_ZN16Adafruit_LPS35HW12readPressureEv>
    LPS_2_exists = true;
 23e8bae:	2301      	movs	r3, #1
 23e8bb0:	7023      	strb	r3, [r4, #0]
    msgp = (char *) "LPS2 OK";
 23e8bb2:	4b0b      	ldr	r3, [pc, #44]	; (23e8be0 <_Z14lps_initializev+0xf0>)
 23e8bb4:	6033      	str	r3, [r6, #0]
 23e8bb6:	e7df      	b.n	23e8b78 <_Z14lps_initializev+0x88>
 23e8bb8:	023fd76e 	.word	0x023fd76e
 23e8bbc:	1006f0d8 	.word	0x1006f0d8
 23e8bc0:	1006f540 	.word	0x1006f540
 23e8bc4:	1006a2ea 	.word	0x1006a2ea
 23e8bc8:	023fd777 	.word	0x023fd777
 23e8bcc:	1006a1cc 	.word	0x1006a1cc
 23e8bd0:	1006f0f4 	.word	0x1006f0f4
 23e8bd4:	1006a2eb 	.word	0x1006a2eb
 23e8bd8:	023fd787 	.word	0x023fd787
 23e8bdc:	023fd77f 	.word	0x023fd77f
 23e8be0:	023fd78f 	.word	0x023fd78f

023e8be4 <_Z14tlw_initializev>:
/* 
 *=======================================================================================================================
 * tlw_initialize() -  Tinovi Leaf Wetness initialize
 *=======================================================================================================================
 */
void tlw_initialize() {
 23e8be4:	b538      	push	{r3, r4, r5, lr}
  Output("TLW:INIT");
 23e8be6:	480f      	ldr	r0, [pc, #60]	; (23e8c24 <_Z14tlw_initializev+0x40>)
 23e8be8:	f7fe fafc 	bl	23e71e4 <_Z6OutputPKc>
  
  // Tinovi Leaf Wetness initialize (I2C ADDRESS = 0x61)
  if (!I2C_Device_Exist(TLW_ADDRESS)) { 
 23e8bec:	2061      	movs	r0, #97	; 0x61
 23e8bee:	f7fe f91c 	bl	23e6e2a <_Z16I2C_Device_Existh>
 23e8bf2:	4c0d      	ldr	r4, [pc, #52]	; (23e8c28 <_Z14tlw_initializev+0x44>)
 23e8bf4:	4d0d      	ldr	r5, [pc, #52]	; (23e8c2c <_Z14tlw_initializev+0x48>)
 23e8bf6:	b938      	cbnz	r0, 23e8c08 <_Z14tlw_initializev+0x24>
    msgp = (char *) "TLW NF";
 23e8bf8:	4b0d      	ldr	r3, [pc, #52]	; (23e8c30 <_Z14tlw_initializev+0x4c>)
    TLW_exists = false;
 23e8bfa:	7028      	strb	r0, [r5, #0]
    msgp = (char *) "TLW NF";
 23e8bfc:	6023      	str	r3, [r4, #0]
    tlw.init(TLW_ADDRESS);
    msgp = (char *) "TLW OK";
    TLW_exists = true;
    SystemStatusBits |= SSB_TLW;  // Turn On Bit
  }
  Output (msgp);
 23e8bfe:	6820      	ldr	r0, [r4, #0]
}
 23e8c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
 23e8c04:	f7fe baee 	b.w	23e71e4 <_Z6OutputPKc>
    tlw.init(TLW_ADDRESS);
 23e8c08:	2161      	movs	r1, #97	; 0x61
 23e8c0a:	480a      	ldr	r0, [pc, #40]	; (23e8c34 <_Z14tlw_initializev+0x50>)
 23e8c0c:	f00a fae4 	bl	23f31d8 <_ZN8LeafSens4initEh>
    msgp = (char *) "TLW OK";
 23e8c10:	4b09      	ldr	r3, [pc, #36]	; (23e8c38 <_Z14tlw_initializev+0x54>)
    SystemStatusBits |= SSB_TLW;  // Turn On Bit
 23e8c12:	4a0a      	ldr	r2, [pc, #40]	; (23e8c3c <_Z14tlw_initializev+0x58>)
    msgp = (char *) "TLW OK";
 23e8c14:	6023      	str	r3, [r4, #0]
    TLW_exists = true;
 23e8c16:	2301      	movs	r3, #1
 23e8c18:	702b      	strb	r3, [r5, #0]
    SystemStatusBits |= SSB_TLW;  // Turn On Bit
 23e8c1a:	6813      	ldr	r3, [r2, #0]
 23e8c1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 23e8c20:	6013      	str	r3, [r2, #0]
 23e8c22:	e7ec      	b.n	23e8bfe <_Z14tlw_initializev+0x1a>
 23e8c24:	023fd797 	.word	0x023fd797
 23e8c28:	1006f540 	.word	0x1006f540
 23e8c2c:	1006a818 	.word	0x1006a818
 23e8c30:	023fd7a0 	.word	0x023fd7a0
 23e8c34:	1007ac04 	.word	0x1007ac04
 23e8c38:	023fd7a7 	.word	0x023fd7a7
 23e8c3c:	1006a1cc 	.word	0x1006a1cc

023e8c40 <_Z14tsm_initializev>:
/* 
 *=======================================================================================================================
 * tsm_initialize() -  Tinovi Soil Moisture initialize
 *=======================================================================================================================
 */
void tsm_initialize() {
 23e8c40:	b538      	push	{r3, r4, r5, lr}
  Output("TSM:INIT");
 23e8c42:	480f      	ldr	r0, [pc, #60]	; (23e8c80 <_Z14tsm_initializev+0x40>)
 23e8c44:	f7fe face 	bl	23e71e4 <_Z6OutputPKc>
  
  // Tinovi Soil Moisture initialize (I2C ADDRESS = 0x63)
  if (!I2C_Device_Exist(TSM_ADDRESS)) { 
 23e8c48:	2063      	movs	r0, #99	; 0x63
 23e8c4a:	f7fe f8ee 	bl	23e6e2a <_Z16I2C_Device_Existh>
 23e8c4e:	4c0d      	ldr	r4, [pc, #52]	; (23e8c84 <_Z14tsm_initializev+0x44>)
 23e8c50:	4d0d      	ldr	r5, [pc, #52]	; (23e8c88 <_Z14tsm_initializev+0x48>)
 23e8c52:	b938      	cbnz	r0, 23e8c64 <_Z14tsm_initializev+0x24>
    msgp = (char *) "TSM NF";
 23e8c54:	4b0d      	ldr	r3, [pc, #52]	; (23e8c8c <_Z14tsm_initializev+0x4c>)
    TSM_exists = false;
 23e8c56:	7028      	strb	r0, [r5, #0]
    msgp = (char *) "TSM NF";
 23e8c58:	6023      	str	r3, [r4, #0]
    tsm.init(TSM_ADDRESS);
    msgp = (char *) "TSM OK";
    TSM_exists = true;
    SystemStatusBits |= SSB_TSM;  // Turn On Bit
  }
  Output (msgp);
 23e8c5a:	6820      	ldr	r0, [r4, #0]
}
 23e8c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
 23e8c60:	f7fe bac0 	b.w	23e71e4 <_Z6OutputPKc>
    tsm.init(TSM_ADDRESS);
 23e8c64:	2163      	movs	r1, #99	; 0x63
 23e8c66:	480a      	ldr	r0, [pc, #40]	; (23e8c90 <_Z14tsm_initializev+0x50>)
 23e8c68:	f00c fd97 	bl	23f579a <_ZN5SVCS34initEi>
    msgp = (char *) "TSM OK";
 23e8c6c:	4b09      	ldr	r3, [pc, #36]	; (23e8c94 <_Z14tsm_initializev+0x54>)
    SystemStatusBits |= SSB_TSM;  // Turn On Bit
 23e8c6e:	4a0a      	ldr	r2, [pc, #40]	; (23e8c98 <_Z14tsm_initializev+0x58>)
    msgp = (char *) "TSM OK";
 23e8c70:	6023      	str	r3, [r4, #0]
    TSM_exists = true;
 23e8c72:	2301      	movs	r3, #1
 23e8c74:	702b      	strb	r3, [r5, #0]
    SystemStatusBits |= SSB_TSM;  // Turn On Bit
 23e8c76:	6813      	ldr	r3, [r2, #0]
 23e8c78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 23e8c7c:	6013      	str	r3, [r2, #0]
 23e8c7e:	e7ec      	b.n	23e8c5a <_Z14tsm_initializev+0x1a>
 23e8c80:	023fd7ae 	.word	0x023fd7ae
 23e8c84:	1006f540 	.word	0x1006f540
 23e8c88:	1006a81a 	.word	0x1006a81a
 23e8c8c:	023fd7b7 	.word	0x023fd7b7
 23e8c90:	1007ac14 	.word	0x1007ac14
 23e8c94:	023fd7be 	.word	0x023fd7be
 23e8c98:	1006a1cc 	.word	0x1006a1cc

023e8c9c <_Z15tmsm_initializev>:
/* 
 *=======================================================================================================================
 * tmsm_initialize() -  Tinovi MultiLevel Soil Moisture initialize
 *=======================================================================================================================
 */
void tmsm_initialize() {
 23e8c9c:	b538      	push	{r3, r4, r5, lr}
  Output("TMSM:INIT");
 23e8c9e:	480f      	ldr	r0, [pc, #60]	; (23e8cdc <_Z15tmsm_initializev+0x40>)
 23e8ca0:	f7fe faa0 	bl	23e71e4 <_Z6OutputPKc>
  
  // Tinovi MultiLevel Soil Moisture initialize (I2C ADDRESS = 0x65)
  if (!I2C_Device_Exist(TMSM_ADDRESS)) { 
 23e8ca4:	2065      	movs	r0, #101	; 0x65
 23e8ca6:	f7fe f8c0 	bl	23e6e2a <_Z16I2C_Device_Existh>
 23e8caa:	4c0d      	ldr	r4, [pc, #52]	; (23e8ce0 <_Z15tmsm_initializev+0x44>)
 23e8cac:	4d0d      	ldr	r5, [pc, #52]	; (23e8ce4 <_Z15tmsm_initializev+0x48>)
 23e8cae:	b938      	cbnz	r0, 23e8cc0 <_Z15tmsm_initializev+0x24>
    msgp = (char *) "TMSM NF";
 23e8cb0:	4b0d      	ldr	r3, [pc, #52]	; (23e8ce8 <_Z15tmsm_initializev+0x4c>)
    TMSM_exists = false;
 23e8cb2:	7028      	strb	r0, [r5, #0]
    msgp = (char *) "TMSM NF";
 23e8cb4:	6023      	str	r3, [r4, #0]
    tmsm.init(TMSM_ADDRESS);
    msgp = (char *) "TMSM OK";
    TMSM_exists = true;
    SystemStatusBits |= SSB_TMSM;  // Turn On Bit
  }
  Output (msgp);
 23e8cb6:	6820      	ldr	r0, [r4, #0]
}
 23e8cb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
 23e8cbc:	f7fe ba92 	b.w	23e71e4 <_Z6OutputPKc>
    tmsm.init(TMSM_ADDRESS);
 23e8cc0:	2165      	movs	r1, #101	; 0x65
 23e8cc2:	480a      	ldr	r0, [pc, #40]	; (23e8cec <_Z15tmsm_initializev+0x50>)
 23e8cc4:	f00c fe2f 	bl	23f5926 <_ZN7SVMULTI4initEi>
    msgp = (char *) "TMSM OK";
 23e8cc8:	4b09      	ldr	r3, [pc, #36]	; (23e8cf0 <_Z15tmsm_initializev+0x54>)
    SystemStatusBits |= SSB_TMSM;  // Turn On Bit
 23e8cca:	4a0a      	ldr	r2, [pc, #40]	; (23e8cf4 <_Z15tmsm_initializev+0x58>)
    msgp = (char *) "TMSM OK";
 23e8ccc:	6023      	str	r3, [r4, #0]
    TMSM_exists = true;
 23e8cce:	2301      	movs	r3, #1
 23e8cd0:	702b      	strb	r3, [r5, #0]
    SystemStatusBits |= SSB_TMSM;  // Turn On Bit
 23e8cd2:	6813      	ldr	r3, [r2, #0]
 23e8cd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 23e8cd8:	6013      	str	r3, [r2, #0]
 23e8cda:	e7ec      	b.n	23e8cb6 <_Z15tmsm_initializev+0x1a>
 23e8cdc:	023fd7c5 	.word	0x023fd7c5
 23e8ce0:	1006f540 	.word	0x1006f540
 23e8ce4:	1006a819 	.word	0x1006a819
 23e8ce8:	023fd7cf 	.word	0x023fd7cf
 23e8cec:	1007ac0c 	.word	0x1007ac0c
 23e8cf0:	023fd7d7 	.word	0x023fd7d7
 23e8cf4:	1006a1cc 	.word	0x1006a1cc

023e8cf8 <_Z17as5600_initializev>:
/* 
 *=======================================================================================================================
 * as5600_initialize() - wind direction sensor
 *=======================================================================================================================
 */
void as5600_initialize() {
 23e8cf8:	b508      	push	{r3, lr}
  Output("AS5600:INIT");
 23e8cfa:	4810      	ldr	r0, [pc, #64]	; (23e8d3c <_Z17as5600_initializev+0x44>)
 23e8cfc:	f7fe fa72 	bl	23e71e4 <_Z6OutputPKc>
  Wire.beginTransmission(AS5600_ADR);
 23e8d00:	f011 faea 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e8d04:	4b0e      	ldr	r3, [pc, #56]	; (23e8d40 <_Z17as5600_initializev+0x48>)
 23e8d06:	6819      	ldr	r1, [r3, #0]
 23e8d08:	f010 f8da 	bl	23f8ec0 <_ZN7TwoWire17beginTransmissionEi>
  if (Wire.endTransmission()) {
 23e8d0c:	f011 fae4 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e8d10:	f010 f8dd 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>
 23e8d14:	4b0b      	ldr	r3, [pc, #44]	; (23e8d44 <_Z17as5600_initializev+0x4c>)
 23e8d16:	b170      	cbz	r0, 23e8d36 <_Z17as5600_initializev+0x3e>
    msgp = (char *) "WD:NF";
    AS5600_exists = false;
 23e8d18:	2100      	movs	r1, #0
    msgp = (char *) "WD:NF";
 23e8d1a:	4a0b      	ldr	r2, [pc, #44]	; (23e8d48 <_Z17as5600_initializev+0x50>)
 23e8d1c:	601a      	str	r2, [r3, #0]
    AS5600_exists = false;
 23e8d1e:	4a0b      	ldr	r2, [pc, #44]	; (23e8d4c <_Z17as5600_initializev+0x54>)
 23e8d20:	7011      	strb	r1, [r2, #0]
    SystemStatusBits |= SSB_AS5600;  // Turn On Bit
 23e8d22:	490b      	ldr	r1, [pc, #44]	; (23e8d50 <_Z17as5600_initializev+0x58>)
 23e8d24:	680a      	ldr	r2, [r1, #0]
 23e8d26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 23e8d2a:	600a      	str	r2, [r1, #0]
  }
  else {
    msgp = (char *) "WD:OK";
  }
  Output (msgp);
 23e8d2c:	6818      	ldr	r0, [r3, #0]
}
 23e8d2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
 23e8d32:	f7fe ba57 	b.w	23e71e4 <_Z6OutputPKc>
    msgp = (char *) "WD:OK";
 23e8d36:	4a07      	ldr	r2, [pc, #28]	; (23e8d54 <_Z17as5600_initializev+0x5c>)
 23e8d38:	601a      	str	r2, [r3, #0]
 23e8d3a:	e7f7      	b.n	23e8d2c <_Z17as5600_initializev+0x34>
 23e8d3c:	023fd7df 	.word	0x023fd7df
 23e8d40:	1006a13c 	.word	0x1006a13c
 23e8d44:	1006f540 	.word	0x1006f540
 23e8d48:	023fd7eb 	.word	0x023fd7eb
 23e8d4c:	1006a140 	.word	0x1006a140
 23e8d50:	1006a1cc 	.word	0x1006a1cc
 23e8d54:	023fd7f1 	.word	0x023fd7f1

023e8d58 <_Z13A4_Initializev>:
/* 
 *=======================================================================================================================
 * A4_Initialize()
 *=======================================================================================================================
 */
void A4_Initialize() {
 23e8d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
  Output ("A4:INIT");
 23e8d5a:	482b      	ldr	r0, [pc, #172]	; (23e8e08 <_Z13A4_Initializev+0xb0>)
 23e8d5c:	f7fe fa42 	bl	23e71e4 <_Z6OutputPKc>
  if (SD_exists) {
 23e8d60:	4b2a      	ldr	r3, [pc, #168]	; (23e8e0c <_Z13A4_Initializev+0xb4>)
 23e8d62:	781b      	ldrb	r3, [r3, #0]
 23e8d64:	2b00      	cmp	r3, #0
 23e8d66:	d04c      	beq.n	23e8e02 <_Z13A4_Initializev+0xaa>
    if (SD.exists(SD_A4_DIST_FILE)) {
 23e8d68:	4929      	ldr	r1, [pc, #164]	; (23e8e10 <_Z13A4_Initializev+0xb8>)
 23e8d6a:	482a      	ldr	r0, [pc, #168]	; (23e8e14 <_Z13A4_Initializev+0xbc>)
 23e8d6c:	f7fd ffa0 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23e8d70:	4604      	mov	r4, r0
 23e8d72:	b1b8      	cbz	r0, 23e8da4 <_Z13A4_Initializev+0x4c>
      Output ("A4=DIST");
 23e8d74:	4828      	ldr	r0, [pc, #160]	; (23e8e18 <_Z13A4_Initializev+0xc0>)
 23e8d76:	f7fe fa35 	bl	23e71e4 <_Z6OutputPKc>
      A4_State = A4_STATE_DISTANCE;
 23e8d7a:	2201      	movs	r2, #1
 23e8d7c:	4b27      	ldr	r3, [pc, #156]	; (23e8e1c <_Z13A4_Initializev+0xc4>)
      if (SD.exists(SD_5M_DIST_FILE)) {
 23e8d7e:	4928      	ldr	r1, [pc, #160]	; (23e8e20 <_Z13A4_Initializev+0xc8>)
 23e8d80:	4824      	ldr	r0, [pc, #144]	; (23e8e14 <_Z13A4_Initializev+0xbc>)
      A4_State = A4_STATE_DISTANCE;
 23e8d82:	601a      	str	r2, [r3, #0]
      if (SD.exists(SD_5M_DIST_FILE)) {
 23e8d84:	f7fd ff94 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23e8d88:	4b26      	ldr	r3, [pc, #152]	; (23e8e24 <_Z13A4_Initializev+0xcc>)
 23e8d8a:	b138      	cbz	r0, 23e8d9c <_Z13A4_Initializev+0x44>
        dg_adjustment = 1.25;
 23e8d8c:	4a26      	ldr	r2, [pc, #152]	; (23e8e28 <_Z13A4_Initializev+0xd0>)
        Output ("DIST=5M");
 23e8d8e:	4827      	ldr	r0, [pc, #156]	; (23e8e2c <_Z13A4_Initializev+0xd4>)
        dg_adjustment = 1.25;
 23e8d90:	601a      	str	r2, [r3, #0]
    }
  }
  else {
    Output ("A4=NULL,SD NF");
  }
}
 23e8d92:	b003      	add	sp, #12
 23e8d94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    Output ("A4=NULL,SD NF");
 23e8d98:	f7fe ba24 	b.w	23e71e4 <_Z6OutputPKc>
        dg_adjustment = 2.5;
 23e8d9c:	4a24      	ldr	r2, [pc, #144]	; (23e8e30 <_Z13A4_Initializev+0xd8>)
        Output ("DIST=10M");
 23e8d9e:	4825      	ldr	r0, [pc, #148]	; (23e8e34 <_Z13A4_Initializev+0xdc>)
        dg_adjustment = 2.5;
 23e8da0:	601a      	str	r2, [r3, #0]
        Output ("DIST=10M");
 23e8da2:	e7f6      	b.n	23e8d92 <_Z13A4_Initializev+0x3a>
    else if (SD.exists(SD_A4_RAIN_FILE)) {
 23e8da4:	4924      	ldr	r1, [pc, #144]	; (23e8e38 <_Z13A4_Initializev+0xe0>)
 23e8da6:	481b      	ldr	r0, [pc, #108]	; (23e8e14 <_Z13A4_Initializev+0xbc>)
 23e8da8:	f7fd ff82 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23e8dac:	b1d8      	cbz	r0, 23e8de6 <_Z13A4_Initializev+0x8e>
      A4_State = A4_STATE_RAIN;
 23e8dae:	2502      	movs	r5, #2
      Output ("A4=RAIN");
 23e8db0:	4822      	ldr	r0, [pc, #136]	; (23e8e3c <_Z13A4_Initializev+0xe4>)
 23e8db2:	f7fe fa17 	bl	23e71e4 <_Z6OutputPKc>
      A4_State = A4_STATE_RAIN;
 23e8db6:	4b19      	ldr	r3, [pc, #100]	; (23e8e1c <_Z13A4_Initializev+0xc4>)
 23e8db8:	601d      	str	r5, [r3, #0]
      raingauge2_interrupt_count = 0;
 23e8dba:	4b21      	ldr	r3, [pc, #132]	; (23e8e40 <_Z13A4_Initializev+0xe8>)
 23e8dbc:	601c      	str	r4, [r3, #0]
      raingauge2_interrupt_stime = System.millis();
 23e8dbe:	f7fd ff15 	bl	23e6bec <_ZN11SystemClass6millisEv>
 23e8dc2:	4b20      	ldr	r3, [pc, #128]	; (23e8e44 <_Z13A4_Initializev+0xec>)
      attachInterrupt(RAINGAUGE2_IRQ_PIN, raingauge2_interrupt_handler, FALLING);
 23e8dc4:	462a      	mov	r2, r5
      raingauge2_interrupt_stime = System.millis();
 23e8dc6:	e9c3 0100 	strd	r0, r1, [r3]
      raingauge2_interrupt_ltime = 0;  // used to debounce the tip
 23e8dca:	2000      	movs	r0, #0
 23e8dcc:	2100      	movs	r1, #0
 23e8dce:	4b1e      	ldr	r3, [pc, #120]	; (23e8e48 <_Z13A4_Initializev+0xf0>)
 23e8dd0:	e9c3 0100 	strd	r0, r1, [r3]
      attachInterrupt(RAINGAUGE2_IRQ_PIN, raingauge2_interrupt_handler, FALLING);
 23e8dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23e8dd8:	200f      	movs	r0, #15
 23e8dda:	491c      	ldr	r1, [pc, #112]	; (23e8e4c <_Z13A4_Initializev+0xf4>)
 23e8ddc:	9400      	str	r4, [sp, #0]
 23e8dde:	f010 f8bd 	bl	23f8f5c <_Z15attachInterrupttPFvvE13InterruptModeah>
}
 23e8de2:	b003      	add	sp, #12
 23e8de4:	bd30      	pop	{r4, r5, pc}
    else if (SD.exists(SD_A4_RAW_FILE)) {
 23e8de6:	491a      	ldr	r1, [pc, #104]	; (23e8e50 <_Z13A4_Initializev+0xf8>)
 23e8de8:	480a      	ldr	r0, [pc, #40]	; (23e8e14 <_Z13A4_Initializev+0xbc>)
 23e8dea:	f7fd ff61 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23e8dee:	b130      	cbz	r0, 23e8dfe <_Z13A4_Initializev+0xa6>
      Output ("A4=RAW");
 23e8df0:	4818      	ldr	r0, [pc, #96]	; (23e8e54 <_Z13A4_Initializev+0xfc>)
 23e8df2:	f7fe f9f7 	bl	23e71e4 <_Z6OutputPKc>
      A4_State = A4_STATE_RAW;
 23e8df6:	2203      	movs	r2, #3
 23e8df8:	4b08      	ldr	r3, [pc, #32]	; (23e8e1c <_Z13A4_Initializev+0xc4>)
 23e8dfa:	601a      	str	r2, [r3, #0]
 23e8dfc:	e7f1      	b.n	23e8de2 <_Z13A4_Initializev+0x8a>
      Output ("A4=NULL");
 23e8dfe:	4816      	ldr	r0, [pc, #88]	; (23e8e58 <_Z13A4_Initializev+0x100>)
 23e8e00:	e7c7      	b.n	23e8d92 <_Z13A4_Initializev+0x3a>
    Output ("A4=NULL,SD NF");
 23e8e02:	4816      	ldr	r0, [pc, #88]	; (23e8e5c <_Z13A4_Initializev+0x104>)
 23e8e04:	e7c5      	b.n	23e8d92 <_Z13A4_Initializev+0x3a>
 23e8e06:	bf00      	nop
 23e8e08:	023fd7f7 	.word	0x023fd7f7
 23e8e0c:	1006a7b4 	.word	0x1006a7b4
 23e8e10:	1006a157 	.word	0x1006a157
 23e8e14:	1006a308 	.word	0x1006a308
 23e8e18:	023fd7ff 	.word	0x023fd7ff
 23e8e1c:	1006a294 	.word	0x1006a294
 23e8e20:	1006a14c 	.word	0x1006a14c
 23e8e24:	1006a1f4 	.word	0x1006a1f4
 23e8e28:	3fa00000 	.word	0x3fa00000
 23e8e2c:	023fd807 	.word	0x023fd807
 23e8e30:	40200000 	.word	0x40200000
 23e8e34:	023fd80f 	.word	0x023fd80f
 23e8e38:	1006a162 	.word	0x1006a162
 23e8e3c:	023fd818 	.word	0x023fd818
 23e8e40:	1007aa70 	.word	0x1007aa70
 23e8e44:	1007aa80 	.word	0x1007aa80
 23e8e48:	1007aa78 	.word	0x1007aa78
 23e8e4c:	023e6c45 	.word	0x023e6c45
 23e8e50:	1006a16d 	.word	0x1006a16d
 23e8e54:	023fd820 	.word	0x023fd820
 23e8e58:	023fd827 	.word	0x023fd827
 23e8e5c:	023fd82f 	.word	0x023fd82f

023e8e60 <_Z13A5_Initializev>:
/* 
 *=======================================================================================================================
 * A5_Initialize()
 *=======================================================================================================================
 */
void A5_Initialize() {
 23e8e60:	b508      	push	{r3, lr}
  Output ("A5:INIT");
 23e8e62:	480c      	ldr	r0, [pc, #48]	; (23e8e94 <_Z13A5_Initializev+0x34>)
 23e8e64:	f7fe f9be 	bl	23e71e4 <_Z6OutputPKc>
  if (SD_exists) {
 23e8e68:	4b0b      	ldr	r3, [pc, #44]	; (23e8e98 <_Z13A5_Initializev+0x38>)
 23e8e6a:	781b      	ldrb	r3, [r3, #0]
 23e8e6c:	b183      	cbz	r3, 23e8e90 <_Z13A5_Initializev+0x30>
    if (SD.exists(SD_A5_RAW_FILE)) {
 23e8e6e:	490b      	ldr	r1, [pc, #44]	; (23e8e9c <_Z13A5_Initializev+0x3c>)
 23e8e70:	480b      	ldr	r0, [pc, #44]	; (23e8ea0 <_Z13A5_Initializev+0x40>)
 23e8e72:	f7fd ff1d 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23e8e76:	b130      	cbz	r0, 23e8e86 <_Z13A5_Initializev+0x26>
      Output ("A5=RAW");
 23e8e78:	480a      	ldr	r0, [pc, #40]	; (23e8ea4 <_Z13A5_Initializev+0x44>)
 23e8e7a:	f7fe f9b3 	bl	23e71e4 <_Z6OutputPKc>
      A5_State = A5_STATE_RAW;
 23e8e7e:	2201      	movs	r2, #1
 23e8e80:	4b09      	ldr	r3, [pc, #36]	; (23e8ea8 <_Z13A5_Initializev+0x48>)
 23e8e82:	601a      	str	r2, [r3, #0]
    }
  }
  else {
    Output ("A5=NULL,SD NF");
  }
}
 23e8e84:	bd08      	pop	{r3, pc}
      Output ("A5=NULL");
 23e8e86:	4809      	ldr	r0, [pc, #36]	; (23e8eac <_Z13A5_Initializev+0x4c>)
}
 23e8e88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Output ("A5=NULL,SD NF");
 23e8e8c:	f7fe b9aa 	b.w	23e71e4 <_Z6OutputPKc>
 23e8e90:	4807      	ldr	r0, [pc, #28]	; (23e8eb0 <_Z13A5_Initializev+0x50>)
 23e8e92:	e7f9      	b.n	23e8e88 <_Z13A5_Initializev+0x28>
 23e8e94:	023fd83d 	.word	0x023fd83d
 23e8e98:	1006a7b4 	.word	0x1006a7b4
 23e8e9c:	1006a177 	.word	0x1006a177
 23e8ea0:	1006a308 	.word	0x1006a308
 23e8ea4:	023fd845 	.word	0x023fd845
 23e8ea8:	1006a298 	.word	0x1006a298
 23e8eac:	023fd84c 	.word	0x023fd84c
 23e8eb0:	023fd854 	.word	0x023fd854

023e8eb4 <_Z11Pin_ReadAvgi>:
/* 
 *=======================================================================================================================
 * Pin_ReadAvg()
 *=======================================================================================================================
 */
float Pin_ReadAvg(int pin) {
 23e8eb4:	b570      	push	{r4, r5, r6, lr}
 23e8eb6:	2505      	movs	r5, #5
  int numReadings = 5;
  int totalValue = 0;
 23e8eb8:	2400      	movs	r4, #0
  for (int i = 0; i < numReadings; i++) {
    totalValue += analogRead(pin);
 23e8eba:	b286      	uxth	r6, r0
 23e8ebc:	4630      	mov	r0, r6
 23e8ebe:	f011 f9c4 	bl	23fa24a <analogRead>
 23e8ec2:	4404      	add	r4, r0
    delay(10);  // Short delay between readings
 23e8ec4:	200a      	movs	r0, #10
 23e8ec6:	f00f f9fd 	bl	23f82c4 <delay>
  for (int i = 0; i < numReadings; i++) {
 23e8eca:	3d01      	subs	r5, #1
 23e8ecc:	d1f6      	bne.n	23e8ebc <_Z11Pin_ReadAvgi+0x8>
  }
  return(totalValue / numReadings);
 23e8ece:	2305      	movs	r3, #5
 23e8ed0:	fb94 f3f3 	sdiv	r3, r4, r3
 23e8ed4:	ee00 3a10 	vmov	s0, r3
}
 23e8ed8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 23e8edc:	bd70      	pop	{r4, r5, r6, pc}
	...

023e8ee0 <_Z25DistanceGauge_TakeReadingv>:
/*
 * ======================================================================================================================
 * DistanceGauge_TakeReading() - measure every second             
 * ======================================================================================================================
 */
void DistanceGauge_TakeReading() {
 23e8ee0:	b508      	push	{r3, lr}
  dg_buckets[dg_bucket] = (int) analogRead(DISTANCE_GAUGE_PIN) * dg_adjustment;
 23e8ee2:	200f      	movs	r0, #15
 23e8ee4:	f011 f9b1 	bl	23fa24a <analogRead>
 23e8ee8:	ee07 0a90 	vmov	s15, r0
 23e8eec:	490b      	ldr	r1, [pc, #44]	; (23e8f1c <_Z25DistanceGauge_TakeReadingv+0x3c>)
 23e8eee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23e8ef2:	ed91 7a00 	vldr	s14, [r1]
 23e8ef6:	ee67 7a87 	vmul.f32	s15, s15, s14
 23e8efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23e8efe:	ee17 0a90 	vmov	r0, s15
 23e8f02:	4a07      	ldr	r2, [pc, #28]	; (23e8f20 <_Z25DistanceGauge_TakeReadingv+0x40>)
 23e8f04:	4907      	ldr	r1, [pc, #28]	; (23e8f24 <_Z25DistanceGauge_TakeReadingv+0x44>)
 23e8f06:	6813      	ldr	r3, [r2, #0]
 23e8f08:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  dg_bucket = (++dg_bucket) % DG_BUCKETS; // Advance bucket index for next reading
 23e8f0c:	213c      	movs	r1, #60	; 0x3c
 23e8f0e:	3301      	adds	r3, #1
 23e8f10:	fbb3 f0f1 	udiv	r0, r3, r1
 23e8f14:	fb01 3310 	mls	r3, r1, r0, r3
 23e8f18:	6013      	str	r3, [r2, #0]
}
 23e8f1a:	bd08      	pop	{r3, pc}
 23e8f1c:	1006a1f4 	.word	0x1006a1f4
 23e8f20:	1006ac98 	.word	0x1006ac98
 23e8f24:	1006ac9c 	.word	0x1006ac9c

023e8f28 <_Z20DistanceGauge_Medianv>:
 *=======================================================================================================================
 */
float DistanceGauge_Median() {
  int i;
  
  mysort(dg_buckets, DG_BUCKETS);
 23e8f28:	4804      	ldr	r0, [pc, #16]	; (23e8f3c <_Z20DistanceGauge_Medianv+0x14>)
 23e8f2a:	213c      	movs	r1, #60	; 0x3c
float DistanceGauge_Median() {
 23e8f2c:	b508      	push	{r3, lr}
  mysort(dg_buckets, DG_BUCKETS);
 23e8f2e:	f7fd ffab 	bl	23e6e88 <_Z6mysortPjj>
  i = (DG_BUCKETS+1) / 2 - 1; // -1 as array indexing in C starts from 0
  
  return (dg_buckets[i]); 
 23e8f32:	ed90 0a1d 	vldr	s0, [r0, #116]	; 0x74
}
 23e8f36:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 23e8f3a:	bd08      	pop	{r3, pc}
 23e8f3c:	1006ac9c 	.word	0x1006ac9c

023e8f40 <_Z16Wind_SampleSpeedv>:
 * Optipolar Hall Effect Sensor SS451A - Anemometer
 * speed  = (( (signals/2) * (2 * pi * radius) ) / time) * calibration_factor
 * speed in m/s =  (   ( (interrupts/2) * (2 * 3.14156 * 0.079) )  / (time_period in ms / 1000)  )  * 2.64
 *=======================================================================================================================
 */
float Wind_SampleSpeed() {
 23e8f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23e8f44:	ed2d 8b02 	vpush	{d8}
  uint64_t delta_ms;
  float wind_speed;
  
  delta_ms = System.millis()-anemometer_interrupt_stime;
 23e8f48:	f7fd fe50 	bl	23e6bec <_ZN11SystemClass6millisEv>

  if (anemometer_interrupt_count) {
 23e8f4c:	4f2c      	ldr	r7, [pc, #176]	; (23e9000 <_Z16Wind_SampleSpeedv+0xc0>)
  delta_ms = System.millis()-anemometer_interrupt_stime;
 23e8f4e:	4604      	mov	r4, r0
  if (anemometer_interrupt_count) {
 23e8f50:	683b      	ldr	r3, [r7, #0]
  delta_ms = System.millis()-anemometer_interrupt_stime;
 23e8f52:	460d      	mov	r5, r1
  if (anemometer_interrupt_count) {
 23e8f54:	4e2b      	ldr	r6, [pc, #172]	; (23e9004 <_Z16Wind_SampleSpeedv+0xc4>)
 23e8f56:	2b00      	cmp	r3, #0
 23e8f58:	d048      	beq.n	23e8fec <_Z16Wind_SampleSpeedv+0xac>
    // wind_speed = (  ( (anemometer_interrupt_count/2) * (2 * 3.14156 * ws_radius) )  / 
    //  (float)( (float)delta_ms / 1000)  )  * ws_calibration;

    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
 23e8f5a:	6838      	ldr	r0, [r7, #0]
 23e8f5c:	f7fc f992 	bl	23e5284 <__aeabi_ui2d>
 23e8f60:	a325      	add	r3, pc, #148	; (adr r3, 23e8ff8 <_Z16Wind_SampleSpeedv+0xb8>)
 23e8f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e8f66:	f7fc fa07 	bl	23e5378 <__aeabi_dmul>
 23e8f6a:	4b27      	ldr	r3, [pc, #156]	; (23e9008 <_Z16Wind_SampleSpeedv+0xc8>)
 23e8f6c:	4680      	mov	r8, r0
 23e8f6e:	6818      	ldr	r0, [r3, #0]
 23e8f70:	4689      	mov	r9, r1
 23e8f72:	f7fc f9a9 	bl	23e52c8 <__aeabi_f2d>
 23e8f76:	4602      	mov	r2, r0
 23e8f78:	460b      	mov	r3, r1
 23e8f7a:	4640      	mov	r0, r8
 23e8f7c:	4649      	mov	r1, r9
 23e8f7e:	f7fc f9fb 	bl	23e5378 <__aeabi_dmul>
 23e8f82:	4680      	mov	r8, r0
 23e8f84:	4689      	mov	r9, r1
  delta_ms = System.millis()-anemometer_interrupt_stime;
 23e8f86:	e9d6 0100 	ldrd	r0, r1, [r6]
 23e8f8a:	1a20      	subs	r0, r4, r0
 23e8f8c:	eb65 0101 	sbc.w	r1, r5, r1
        (float)( (float)delta_ms / 1000) )  * ws_calibration;
 23e8f90:	f7fc fe02 	bl	23e5b98 <__aeabi_ul2f>
 23e8f94:	eddf 7a1d 	vldr	s15, [pc, #116]	; 23e900c <_Z16Wind_SampleSpeedv+0xcc>
 23e8f98:	ee07 0a10 	vmov	s14, r0
 23e8f9c:	eec7 7a27 	vdiv.f32	s15, s14, s15
 23e8fa0:	ee17 0a90 	vmov	r0, s15
 23e8fa4:	f7fc f990 	bl	23e52c8 <__aeabi_f2d>
 23e8fa8:	4602      	mov	r2, r0
 23e8faa:	460b      	mov	r3, r1
    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
 23e8fac:	4640      	mov	r0, r8
 23e8fae:	4649      	mov	r1, r9
 23e8fb0:	f7fc fb0c 	bl	23e55cc <__aeabi_ddiv>
        (float)( (float)delta_ms / 1000) )  * ws_calibration;
 23e8fb4:	4b16      	ldr	r3, [pc, #88]	; (23e9010 <_Z16Wind_SampleSpeedv+0xd0>)
    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
 23e8fb6:	4604      	mov	r4, r0
        (float)( (float)delta_ms / 1000) )  * ws_calibration;
 23e8fb8:	6818      	ldr	r0, [r3, #0]
    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
 23e8fba:	460d      	mov	r5, r1
        (float)( (float)delta_ms / 1000) )  * ws_calibration;
 23e8fbc:	f7fc f984 	bl	23e52c8 <__aeabi_f2d>
 23e8fc0:	4602      	mov	r2, r0
 23e8fc2:	460b      	mov	r3, r1
 23e8fc4:	4620      	mov	r0, r4
 23e8fc6:	4629      	mov	r1, r5
 23e8fc8:	f7fc f9d6 	bl	23e5378 <__aeabi_dmul>
    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
 23e8fcc:	f7fc fccc 	bl	23e5968 <__aeabi_d2f>
 23e8fd0:	ee08 0a10 	vmov	s16, r0
  }
  else {
    wind_speed = 0.0;
  }

  anemometer_interrupt_count = 0;
 23e8fd4:	2300      	movs	r3, #0
 23e8fd6:	603b      	str	r3, [r7, #0]
  anemometer_interrupt_stime = System.millis();
 23e8fd8:	f7fd fe08 	bl	23e6bec <_ZN11SystemClass6millisEv>
  
  return (wind_speed);
} 
 23e8fdc:	eeb0 0a48 	vmov.f32	s0, s16
 23e8fe0:	ecbd 8b02 	vpop	{d8}
  anemometer_interrupt_stime = System.millis();
 23e8fe4:	e9c6 0100 	strd	r0, r1, [r6]
} 
 23e8fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    wind_speed = 0.0;
 23e8fec:	ed9f 8a09 	vldr	s16, [pc, #36]	; 23e9014 <_Z16Wind_SampleSpeedv+0xd4>
 23e8ff0:	e7f0      	b.n	23e8fd4 <_Z16Wind_SampleSpeedv+0x94>
 23e8ff2:	bf00      	nop
 23e8ff4:	f3af 8000 	nop.w
 23e8ff8:	35935fc4 	.word	0x35935fc4
 23e8ffc:	400921ea 	.word	0x400921ea
 23e9000:	1006a950 	.word	0x1006a950
 23e9004:	1006a958 	.word	0x1006a958
 23e9008:	1006a210 	.word	0x1006a210
 23e900c:	447a0000 	.word	0x447a0000
 23e9010:	1006a20c 	.word	0x1006a20c
 23e9014:	00000000 	.word	0x00000000

023e9018 <_Z20Wind_SampleDirectionv>:
/* 
 *=======================================================================================================================
 * Wind_SampleDirection() -- Talk i2c to the AS5600 sensor and get direction
 *=======================================================================================================================
 */
int Wind_SampleDirection() {
 23e9018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int degree;
  
  // Read Raw Angle Low Byte
  Wire.beginTransmission(AS5600_ADR);
 23e901a:	4d39      	ldr	r5, [pc, #228]	; (23e9100 <_Z20Wind_SampleDirectionv+0xe8>)
 23e901c:	f011 f95c 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e9020:	6829      	ldr	r1, [r5, #0]
 23e9022:	f00f ff4d 	bl	23f8ec0 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(AS5600_raw_ang_lo);
 23e9026:	f011 f957 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e902a:	210d      	movs	r1, #13
 23e902c:	f7fd fda2 	bl	23e6b74 <_ZN7TwoWire5writeEi.isra.0>
  if (Wire.endTransmission()) {
 23e9030:	f011 f952 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e9034:	f00f ff4b 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>
 23e9038:	4c32      	ldr	r4, [pc, #200]	; (23e9104 <_Z20Wind_SampleDirectionv+0xec>)
 23e903a:	b178      	cbz	r0, 23e905c <_Z20Wind_SampleDirectionv+0x44>
    if (AS5600_exists) {
 23e903c:	4b32      	ldr	r3, [pc, #200]	; (23e9108 <_Z20Wind_SampleDirectionv+0xf0>)
 23e903e:	781b      	ldrb	r3, [r3, #0]
 23e9040:	b113      	cbz	r3, 23e9048 <_Z20Wind_SampleDirectionv+0x30>
      Output ("WD Offline_L");
 23e9042:	4832      	ldr	r0, [pc, #200]	; (23e910c <_Z20Wind_SampleDirectionv+0xf4>)
 23e9044:	f7fe f8ce 	bl	23e71e4 <_Z6OutputPKc>
    }
    AS5600_exists = false;
 23e9048:	2200      	movs	r2, #0
 23e904a:	4b2f      	ldr	r3, [pc, #188]	; (23e9108 <_Z20Wind_SampleDirectionv+0xf0>)
 23e904c:	701a      	strb	r2, [r3, #0]
      else {
        return (-1);
      }
    }
  }
  SystemStatusBits |= SSB_AS5600;  // Turn On Bit
 23e904e:	6823      	ldr	r3, [r4, #0]
  return (-1); // Not the best value to return 
 23e9050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  SystemStatusBits |= SSB_AS5600;  // Turn On Bit
 23e9054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 23e9058:	6023      	str	r3, [r4, #0]
  return (-1); // Not the best value to return 
 23e905a:	e04c      	b.n	23e90f6 <_Z20Wind_SampleDirectionv+0xde>
  else if (Wire.requestFrom(AS5600_ADR, 1)) {
 23e905c:	f011 f93c 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e9060:	2201      	movs	r2, #1
 23e9062:	7829      	ldrb	r1, [r5, #0]
 23e9064:	f00f ff25 	bl	23f8eb2 <_ZN7TwoWire11requestFromEhj>
 23e9068:	2800      	cmp	r0, #0
 23e906a:	d0f0      	beq.n	23e904e <_Z20Wind_SampleDirectionv+0x36>
    int AS5600_lo_raw = Wire.read();
 23e906c:	f011 f934 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e9070:	6803      	ldr	r3, [r0, #0]
 23e9072:	695b      	ldr	r3, [r3, #20]
 23e9074:	4798      	blx	r3
 23e9076:	4606      	mov	r6, r0
    Wire.beginTransmission(AS5600_ADR);
 23e9078:	f011 f92e 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e907c:	6829      	ldr	r1, [r5, #0]
 23e907e:	f00f ff1f 	bl	23f8ec0 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(AS5600_raw_ang_hi);
 23e9082:	f011 f929 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e9086:	210c      	movs	r1, #12
 23e9088:	f7fd fd74 	bl	23e6b74 <_ZN7TwoWire5writeEi.isra.0>
    if (Wire.endTransmission()) {
 23e908c:	f011 f924 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e9090:	f00f ff1d 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>
 23e9094:	b128      	cbz	r0, 23e90a2 <_Z20Wind_SampleDirectionv+0x8a>
      if (AS5600_exists) {
 23e9096:	4b1c      	ldr	r3, [pc, #112]	; (23e9108 <_Z20Wind_SampleDirectionv+0xf0>)
 23e9098:	781b      	ldrb	r3, [r3, #0]
 23e909a:	2b00      	cmp	r3, #0
 23e909c:	d0d4      	beq.n	23e9048 <_Z20Wind_SampleDirectionv+0x30>
        Output ("WD Offline_H");
 23e909e:	481c      	ldr	r0, [pc, #112]	; (23e9110 <_Z20Wind_SampleDirectionv+0xf8>)
 23e90a0:	e7d0      	b.n	23e9044 <_Z20Wind_SampleDirectionv+0x2c>
    else if (Wire.requestFrom(AS5600_ADR, 1)) {
 23e90a2:	f011 f919 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e90a6:	2201      	movs	r2, #1
 23e90a8:	7829      	ldrb	r1, [r5, #0]
 23e90aa:	f00f ff02 	bl	23f8eb2 <_ZN7TwoWire11requestFromEhj>
 23e90ae:	2800      	cmp	r0, #0
 23e90b0:	d0cd      	beq.n	23e904e <_Z20Wind_SampleDirectionv+0x36>
      word AS5600_hi_raw = Wire.read();
 23e90b2:	f011 f911 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e90b6:	6803      	ldr	r3, [r0, #0]
      if (!AS5600_exists) {
 23e90b8:	4f13      	ldr	r7, [pc, #76]	; (23e9108 <_Z20Wind_SampleDirectionv+0xf0>)
      word AS5600_hi_raw = Wire.read();
 23e90ba:	695b      	ldr	r3, [r3, #20]
 23e90bc:	4798      	blx	r3
      if (!AS5600_exists) {
 23e90be:	783b      	ldrb	r3, [r7, #0]
      word AS5600_hi_raw = Wire.read();
 23e90c0:	4605      	mov	r5, r0
      if (!AS5600_exists) {
 23e90c2:	b913      	cbnz	r3, 23e90ca <_Z20Wind_SampleDirectionv+0xb2>
        Output ("WD Online");
 23e90c4:	4813      	ldr	r0, [pc, #76]	; (23e9114 <_Z20Wind_SampleDirectionv+0xfc>)
 23e90c6:	f7fe f88d 	bl	23e71e4 <_Z6OutputPKc>
      AS5600_exists = true;           // We made it 
 23e90ca:	2301      	movs	r3, #1
 23e90cc:	703b      	strb	r3, [r7, #0]
      SystemStatusBits &= ~SSB_AS5600; // Turn Off Bit
 23e90ce:	6823      	ldr	r3, [r4, #0]
      degree = (int) AS5600_hi_raw * 0.0879;
 23e90d0:	ea46 2005 	orr.w	r0, r6, r5, lsl #8
      SystemStatusBits &= ~SSB_AS5600; // Turn Off Bit
 23e90d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 23e90d8:	6023      	str	r3, [r4, #0]
      degree = (int) AS5600_hi_raw * 0.0879;
 23e90da:	f7fc f8e3 	bl	23e52a4 <__aeabi_i2d>
 23e90de:	a306      	add	r3, pc, #24	; (adr r3, 23e90f8 <_Z20Wind_SampleDirectionv+0xe0>)
 23e90e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e90e4:	f7fc f948 	bl	23e5378 <__aeabi_dmul>
 23e90e8:	f7fc fbf6 	bl	23e58d8 <__aeabi_d2iz>
        return (-1);
 23e90ec:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
 23e90f0:	bf88      	it	hi
 23e90f2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
 23e90f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23e90f8:	495182aa 	.word	0x495182aa
 23e90fc:	3fb6809d 	.word	0x3fb6809d
 23e9100:	1006a13c 	.word	0x1006a13c
 23e9104:	1006a1cc 	.word	0x1006a1cc
 23e9108:	1006a140 	.word	0x1006a140
 23e910c:	023fd862 	.word	0x023fd862
 23e9110:	023fd86f 	.word	0x023fd86f
 23e9114:	023fd87c 	.word	0x023fd87c

023e9118 <_Z20Wind_DirectionVectorv>:
/* 
 *=======================================================================================================================
 * Wind_DirectionVector()
 *=======================================================================================================================
 */
int Wind_DirectionVector() {
 23e9118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    // Flag we have wind speed
    if (s > 0) {
      ws_zero = false;  
    }
    r = (d * 71) / 4068.0;
 23e911c:	f20f 1910 	addw	r9, pc, #272	; 0x110
 23e9120:	e9d9 8900 	ldrd	r8, r9, [r9]
int Wind_DirectionVector() {
 23e9124:	ed2d 8b08 	vpush	{d8-d11}
  double EW_vector_sum = 0.0;
 23e9128:	ed9f 8b3f 	vldr	d8, [pc, #252]	; 23e9228 <_Z20Wind_DirectionVectorv+0x110>
  bool ws_zero = true;
 23e912c:	2501      	movs	r5, #1
  for (i=0; i<WIND_READINGS; i++) {
 23e912e:	f04f 0a00 	mov.w	sl, #0
  double NS_vector_sum = 0.0;
 23e9132:	eeb0 9a48 	vmov.f32	s18, s16
 23e9136:	eef0 9a68 	vmov.f32	s19, s17
    r = (d * 71) / 4068.0;
 23e913a:	f04f 0b47 	mov.w	fp, #71	; 0x47
 23e913e:	4c40      	ldr	r4, [pc, #256]	; (23e9240 <_Z20Wind_DirectionVectorv+0x128>)
int Wind_DirectionVector() {
 23e9140:	b083      	sub	sp, #12
    d = wind.bucket[i].direction;
 23e9142:	6820      	ldr	r0, [r4, #0]
    if (d == -1) {
 23e9144:	1c43      	adds	r3, r0, #1
 23e9146:	d068      	beq.n	23e921a <_Z20Wind_DirectionVectorv+0x102>
    s = wind.bucket[i].speed;
 23e9148:	ed94 ba01 	vldr	s22, [r4, #4]
      ws_zero = false;  
 23e914c:	eeb5 ba40 	vcmp.f32	s22, #0.0
 23e9150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    r = (d * 71) / 4068.0;
 23e9154:	fb0b f000 	mul.w	r0, fp, r0
      ws_zero = false;  
 23e9158:	bfc8      	it	gt
 23e915a:	2500      	movgt	r5, #0
    r = (d * 71) / 4068.0;
 23e915c:	f7fc f8a2 	bl	23e52a4 <__aeabi_i2d>
 23e9160:	4642      	mov	r2, r8
 23e9162:	464b      	mov	r3, r9
 23e9164:	f7fc fa32 	bl	23e55cc <__aeabi_ddiv>
    
    // North South Direction 
    NS_vector_sum += cos(r) * s;
 23e9168:	ec41 0b10 	vmov	d0, r0, r1
    r = (d * 71) / 4068.0;
 23e916c:	ec41 0b1a 	vmov	d10, r0, r1
    NS_vector_sum += cos(r) * s;
 23e9170:	f011 fb16 	bl	23fa7a0 <cos>
 23e9174:	ee1b 0a10 	vmov	r0, s22
 23e9178:	ed8d 0b00 	vstr	d0, [sp]
 23e917c:	f7fc f8a4 	bl	23e52c8 <__aeabi_f2d>
 23e9180:	4602      	mov	r2, r0
 23e9182:	460b      	mov	r3, r1
 23e9184:	4606      	mov	r6, r0
 23e9186:	460f      	mov	r7, r1
 23e9188:	e9dd 0100 	ldrd	r0, r1, [sp]
 23e918c:	f7fc f8f4 	bl	23e5378 <__aeabi_dmul>
 23e9190:	4602      	mov	r2, r0
 23e9192:	460b      	mov	r3, r1
 23e9194:	ec51 0b19 	vmov	r0, r1, d9
 23e9198:	f7fb ff38 	bl	23e500c <__adddf3>
    EW_vector_sum += sin(r) * s;
 23e919c:	eeb0 0a4a 	vmov.f32	s0, s20
 23e91a0:	eef0 0a6a 	vmov.f32	s1, s21
    NS_vector_sum += cos(r) * s;
 23e91a4:	ec41 0b19 	vmov	d9, r0, r1
    EW_vector_sum += sin(r) * s;
 23e91a8:	f011 fbee 	bl	23fa988 <sin>
 23e91ac:	4630      	mov	r0, r6
 23e91ae:	ec53 2b10 	vmov	r2, r3, d0
 23e91b2:	4639      	mov	r1, r7
 23e91b4:	f7fc f8e0 	bl	23e5378 <__aeabi_dmul>
 23e91b8:	4602      	mov	r2, r0
 23e91ba:	460b      	mov	r3, r1
 23e91bc:	ec51 0b18 	vmov	r0, r1, d8
 23e91c0:	f7fb ff24 	bl	23e500c <__adddf3>
  for (i=0; i<WIND_READINGS; i++) {
 23e91c4:	f10a 0a01 	add.w	sl, sl, #1
 23e91c8:	f1ba 0f3c 	cmp.w	sl, #60	; 0x3c
    EW_vector_sum += sin(r) * s;
 23e91cc:	ec41 0b18 	vmov	d8, r0, r1
  for (i=0; i<WIND_READINGS; i++) {
 23e91d0:	f104 0408 	add.w	r4, r4, #8
 23e91d4:	d1b5      	bne.n	23e9142 <_Z20Wind_DirectionVectorv+0x2a>
  }
  rtod = (atan2(EW_vector_sum, NS_vector_sum)*4068.0)/71.0;
 23e91d6:	eeb0 1a49 	vmov.f32	s2, s18
 23e91da:	eef0 1a69 	vmov.f32	s3, s19
 23e91de:	ec41 0b10 	vmov	d0, r0, r1
 23e91e2:	f011 fc25 	bl	23faa30 <atan2>
 23e91e6:	a312      	add	r3, pc, #72	; (adr r3, 23e9230 <_Z20Wind_DirectionVectorv+0x118>)
 23e91e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e91ec:	ec51 0b10 	vmov	r0, r1, d0
 23e91f0:	f7fc f8c2 	bl	23e5378 <__aeabi_dmul>
 23e91f4:	a310      	add	r3, pc, #64	; (adr r3, 23e9238 <_Z20Wind_DirectionVectorv+0x120>)
 23e91f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e91fa:	f7fc f9e7 	bl	23e55cc <__aeabi_ddiv>
 23e91fe:	f7fc fb6b 	bl	23e58d8 <__aeabi_d2iz>
  if (rtod<0) {
 23e9202:	2800      	cmp	r0, #0
    rtod = 360 + rtod;
 23e9204:	bfb8      	it	lt
 23e9206:	f500 70b4 	addlt.w	r0, r0, #360	; 0x168
  }

  // If all the winds speeds are 0 then we return current wind direction or 0 on failure of that.
  if (ws_zero) {
 23e920a:	b135      	cbz	r5, 23e921a <_Z20Wind_DirectionVectorv+0x102>
    return (Wind_SampleDirection()); // Can return -1
  }
  else {
    return (rtod);
  }
}
 23e920c:	b003      	add	sp, #12
 23e920e:	ecbd 8b08 	vpop	{d8-d11}
 23e9212:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (Wind_SampleDirection()); // Can return -1
 23e9216:	f7ff beff 	b.w	23e9018 <_Z20Wind_SampleDirectionv>
}
 23e921a:	b003      	add	sp, #12
 23e921c:	ecbd 8b08 	vpop	{d8-d11}
 23e9220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23e9224:	f3af 8000 	nop.w
	...
 23e9234:	40afc800 	.word	0x40afc800
 23e9238:	00000000 	.word	0x00000000
 23e923c:	4051c000 	.word	0x4051c000
 23e9240:	1007ac70 	.word	0x1007ac70

023e9244 <_Z17Wind_SpeedAveragev>:
 * Wind_SpeedAverage()
 *=======================================================================================================================
 */
float Wind_SpeedAverage() {
  float wind_speed = 0.0;
  for (int i=0; i<WIND_READINGS; i++) {
 23e9244:	2300      	movs	r3, #0
  float wind_speed = 0.0;
 23e9246:	eddf 7a08 	vldr	s15, [pc, #32]	; 23e9268 <_Z17Wind_SpeedAveragev+0x24>
 23e924a:	4a08      	ldr	r2, [pc, #32]	; (23e926c <_Z17Wind_SpeedAveragev+0x28>)
    // sum wind speeds for later average
    wind_speed += wind.bucket[i].speed;
 23e924c:	ed92 7a01 	vldr	s14, [r2, #4]
  for (int i=0; i<WIND_READINGS; i++) {
 23e9250:	3301      	adds	r3, #1
 23e9252:	2b3c      	cmp	r3, #60	; 0x3c
    wind_speed += wind.bucket[i].speed;
 23e9254:	ee77 7a87 	vadd.f32	s15, s15, s14
  for (int i=0; i<WIND_READINGS; i++) {
 23e9258:	f102 0208 	add.w	r2, r2, #8
 23e925c:	d1f6      	bne.n	23e924c <_Z17Wind_SpeedAveragev+0x8>
  }
  return( wind_speed / (float) WIND_READINGS);
}
 23e925e:	ed9f 0a04 	vldr	s0, [pc, #16]	; 23e9270 <_Z17Wind_SpeedAveragev+0x2c>
 23e9262:	ee87 0a80 	vdiv.f32	s0, s15, s0
 23e9266:	4770      	bx	lr
 23e9268:	00000000 	.word	0x00000000
 23e926c:	1007ac70 	.word	0x1007ac70
 23e9270:	42700000 	.word	0x42700000
 23e9274:	00000000 	.word	0x00000000

023e9278 <_Z15Wind_GustUpdatev>:
 *     Sum this reading with next 2.
 *     If greater than last, update last 
 * 
 *=======================================================================================================================
 */
void Wind_GustUpdate() {
 23e9278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23e927c:	ed2d 8b08 	vpush	{d8-d11}
  int bucket = wind.bucket_idx; // Start at next bucket to fill (aka oldest reading)
 23e9280:	4963      	ldr	r1, [pc, #396]	; (23e9410 <_Z15Wind_GustUpdatev+0x198>)
 23e9282:	253a      	movs	r5, #58	; 0x3a
 23e9284:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
  float ws_sum = 0.0;
 23e9288:	ed9f 7a62 	vldr	s14, [pc, #392]	; 23e9414 <_Z15Wind_GustUpdatev+0x19c>
  int ws_bucket = bucket;
 23e928c:	461c      	mov	r4, r3
  float sum;

  for (int i=0; i<(WIND_READINGS-2); i++) {  // subtract 2 because we are looking ahead at the next 2 buckets
    // sum wind speeds 
    sum = wind.bucket[bucket].speed +
          wind.bucket[(bucket+1) % WIND_READINGS].speed +
 23e928e:	203c      	movs	r0, #60	; 0x3c
void Wind_GustUpdate() {
 23e9290:	b083      	sub	sp, #12
    sum = wind.bucket[bucket].speed +
 23e9292:	461e      	mov	r6, r3
 23e9294:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
          wind.bucket[(bucket+1) % WIND_READINGS].speed +
 23e9298:	3301      	adds	r3, #1
    sum = wind.bucket[bucket].speed +
 23e929a:	edd2 7a01 	vldr	s15, [r2, #4]
          wind.bucket[(bucket+1) % WIND_READINGS].speed +
 23e929e:	fb93 f2f0 	sdiv	r2, r3, r0
 23e92a2:	fb00 3312 	mls	r3, r0, r2, r3
          wind.bucket[(bucket+2) % WIND_READINGS].speed;
 23e92a6:	1cb2      	adds	r2, r6, #2
 23e92a8:	fb92 f7f0 	sdiv	r7, r2, r0
 23e92ac:	fb00 2217 	mls	r2, r0, r7, r2
          wind.bucket[(bucket+1) % WIND_READINGS].speed +
 23e92b0:	eb01 07c3 	add.w	r7, r1, r3, lsl #3
    sum = wind.bucket[bucket].speed +
 23e92b4:	edd7 6a01 	vldr	s13, [r7, #4]
          wind.bucket[(bucket+2) % WIND_READINGS].speed;
 23e92b8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    sum = wind.bucket[bucket].speed +
 23e92bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 23e92c0:	edd2 6a01 	vldr	s13, [r2, #4]
 23e92c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
    if (sum >= ws_sum) {
 23e92c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 23e92cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e92d0:	bfa4      	itt	ge
 23e92d2:	4634      	movge	r4, r6
      ws_sum = sum;
 23e92d4:	eeb0 7a67 	vmovge.f32	s14, s15
  for (int i=0; i<(WIND_READINGS-2); i++) {  // subtract 2 because we are looking ahead at the next 2 buckets
 23e92d8:	3d01      	subs	r5, #1
 23e92da:	d1da      	bne.n	23e9292 <_Z15Wind_GustUpdatev+0x1a>
      ws_bucket = bucket;
    }
    bucket = (++bucket) % WIND_READINGS;
  }
  wind.gust = ws_sum/3;
 23e92dc:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
  
  // Determine Gust Direction 
  double NS_vector_sum = 0.0;
  double EW_vector_sum = 0.0;
 23e92e0:	ed9f 8b45 	vldr	d8, [pc, #276]	; 23e93f8 <_Z15Wind_GustUpdatev+0x180>
  wind.gust = ws_sum/3;
 23e92e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 23e92e8:	f04f 0803 	mov.w	r8, #3
 23e92ec:	edc1 7a79 	vstr	s15, [r1, #484]	; 0x1e4
  double r;
  float s;
  int d, i, rtod;
  bool ws_zero = true;
 23e92f0:	2501      	movs	r5, #1
  double NS_vector_sum = 0.0;
 23e92f2:	eeb0 9a48 	vmov.f32	s18, s16
 23e92f6:	eef0 9a68 	vmov.f32	s19, s17

    // Flag we have wind speed
    if (s > 0) {
      ws_zero = false;  
    }
    r = (d * 71) / 4068.0;
 23e92fa:	f04f 0b47 	mov.w	fp, #71	; 0x47
    
    // North South Direction 
    NS_vector_sum += cos(r) * s;
    EW_vector_sum += sin(r) * s;

    bucket = (++bucket) % WIND_READINGS;
 23e92fe:	f04f 093c 	mov.w	r9, #60	; 0x3c
    d = wind.bucket[bucket].direction;
 23e9302:	f8df a10c 	ldr.w	sl, [pc, #268]	; 23e9410 <_Z15Wind_GustUpdatev+0x198>
 23e9306:	f85a 0034 	ldr.w	r0, [sl, r4, lsl #3]
    if (d == -1) {
 23e930a:	1c43      	adds	r3, r0, #1
 23e930c:	d072      	beq.n	23e93f4 <_Z15Wind_GustUpdatev+0x17c>
    s = wind.bucket[bucket].speed;
 23e930e:	eb0a 03c4 	add.w	r3, sl, r4, lsl #3
 23e9312:	ed93 ba01 	vldr	s22, [r3, #4]
      ws_zero = false;  
 23e9316:	eeb5 ba40 	vcmp.f32	s22, #0.0
 23e931a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    r = (d * 71) / 4068.0;
 23e931e:	fb0b f000 	mul.w	r0, fp, r0
      ws_zero = false;  
 23e9322:	bfc8      	it	gt
 23e9324:	2500      	movgt	r5, #0
    r = (d * 71) / 4068.0;
 23e9326:	f7fb ffbd 	bl	23e52a4 <__aeabi_i2d>
 23e932a:	a335      	add	r3, pc, #212	; (adr r3, 23e9400 <_Z15Wind_GustUpdatev+0x188>)
 23e932c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e9330:	f7fc f94c 	bl	23e55cc <__aeabi_ddiv>
    NS_vector_sum += cos(r) * s;
 23e9334:	ec41 0b10 	vmov	d0, r0, r1
    r = (d * 71) / 4068.0;
 23e9338:	ec41 0b1a 	vmov	d10, r0, r1
    NS_vector_sum += cos(r) * s;
 23e933c:	f011 fa30 	bl	23fa7a0 <cos>
 23e9340:	ee1b 0a10 	vmov	r0, s22
 23e9344:	ed8d 0b00 	vstr	d0, [sp]
 23e9348:	f7fb ffbe 	bl	23e52c8 <__aeabi_f2d>
 23e934c:	4602      	mov	r2, r0
 23e934e:	460b      	mov	r3, r1
 23e9350:	4606      	mov	r6, r0
 23e9352:	460f      	mov	r7, r1
 23e9354:	e9dd 0100 	ldrd	r0, r1, [sp]
 23e9358:	f7fc f80e 	bl	23e5378 <__aeabi_dmul>
 23e935c:	4602      	mov	r2, r0
 23e935e:	460b      	mov	r3, r1
 23e9360:	ec51 0b19 	vmov	r0, r1, d9
 23e9364:	f7fb fe52 	bl	23e500c <__adddf3>
    EW_vector_sum += sin(r) * s;
 23e9368:	eeb0 0a4a 	vmov.f32	s0, s20
 23e936c:	eef0 0a6a 	vmov.f32	s1, s21
    NS_vector_sum += cos(r) * s;
 23e9370:	ec41 0b19 	vmov	d9, r0, r1
    EW_vector_sum += sin(r) * s;
 23e9374:	f011 fb08 	bl	23fa988 <sin>
 23e9378:	4630      	mov	r0, r6
 23e937a:	ec53 2b10 	vmov	r2, r3, d0
 23e937e:	4639      	mov	r1, r7
 23e9380:	f7fb fffa 	bl	23e5378 <__aeabi_dmul>
    bucket = (++bucket) % WIND_READINGS;
 23e9384:	3401      	adds	r4, #1
    EW_vector_sum += sin(r) * s;
 23e9386:	460b      	mov	r3, r1
 23e9388:	4602      	mov	r2, r0
 23e938a:	ec51 0b18 	vmov	r0, r1, d8
 23e938e:	f7fb fe3d 	bl	23e500c <__adddf3>
    bucket = (++bucket) % WIND_READINGS;
 23e9392:	fb94 f3f9 	sdiv	r3, r4, r9
  for (i=0; i<3; i++) {
 23e9396:	f1b8 0801 	subs.w	r8, r8, #1
    EW_vector_sum += sin(r) * s;
 23e939a:	ec41 0b18 	vmov	d8, r0, r1
    bucket = (++bucket) % WIND_READINGS;
 23e939e:	fb09 4413 	mls	r4, r9, r3, r4
  for (i=0; i<3; i++) {
 23e93a2:	d1b0      	bne.n	23e9306 <_Z15Wind_GustUpdatev+0x8e>
  }

  rtod = (atan2(EW_vector_sum, NS_vector_sum)*4068.0)/71.0;
 23e93a4:	eeb0 1a49 	vmov.f32	s2, s18
 23e93a8:	eef0 1a69 	vmov.f32	s3, s19
 23e93ac:	eeb0 0a48 	vmov.f32	s0, s16
 23e93b0:	eef0 0a68 	vmov.f32	s1, s17
 23e93b4:	f011 fb3c 	bl	23faa30 <atan2>
 23e93b8:	a311      	add	r3, pc, #68	; (adr r3, 23e9400 <_Z15Wind_GustUpdatev+0x188>)
 23e93ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e93be:	ec51 0b10 	vmov	r0, r1, d0
 23e93c2:	f7fb ffd9 	bl	23e5378 <__aeabi_dmul>
 23e93c6:	a310      	add	r3, pc, #64	; (adr r3, 23e9408 <_Z15Wind_GustUpdatev+0x190>)
 23e93c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e93cc:	f7fc f8fe 	bl	23e55cc <__aeabi_ddiv>
 23e93d0:	f7fc fa82 	bl	23e58d8 <__aeabi_d2iz>
  if (rtod<0) {
 23e93d4:	2800      	cmp	r0, #0
    rtod = 360 + rtod;
 23e93d6:	bfb8      	it	lt
 23e93d8:	f500 70b4 	addlt.w	r0, r0, #360	; 0x168
  }

  // If all the winds speeds are 0 or we have a -1 direction then set -1 for direction.
  if (ws_zero) {
    wind.gust_direction = -1;
 23e93dc:	2d00      	cmp	r5, #0
 23e93de:	bf18      	it	ne
 23e93e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23e93e4:	4b0a      	ldr	r3, [pc, #40]	; (23e9410 <_Z15Wind_GustUpdatev+0x198>)
 23e93e6:	f8c3 01e8 	str.w	r0, [r3, #488]	; 0x1e8
  }
  else {
    wind.gust_direction = rtod;
  }
}
 23e93ea:	b003      	add	sp, #12
 23e93ec:	ecbd 8b08 	vpop	{d8-d11}
 23e93f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ws_zero = true;
 23e93f4:	2501      	movs	r5, #1
 23e93f6:	e7d5      	b.n	23e93a4 <_Z15Wind_GustUpdatev+0x12c>
	...
 23e9404:	40afc800 	.word	0x40afc800
 23e9408:	00000000 	.word	0x00000000
 23e940c:	4051c000 	.word	0x4051c000
 23e9410:	1007ac70 	.word	0x1007ac70
 23e9414:	00000000 	.word	0x00000000

023e9418 <_Z16Wind_TakeReadingv>:
/*
 * ======================================================================================================================
 * Wind_TakeReading() - Wind direction and speed, measure every second             
 * ======================================================================================================================
 */
void Wind_TakeReading() {
 23e9418:	b538      	push	{r3, r4, r5, lr}
  wind.bucket[wind.bucket_idx].direction = (int) Wind_SampleDirection();
 23e941a:	4c0d      	ldr	r4, [pc, #52]	; (23e9450 <_Z16Wind_TakeReadingv+0x38>)
 23e941c:	f8d4 51e0 	ldr.w	r5, [r4, #480]	; 0x1e0
 23e9420:	f7ff fdfa 	bl	23e9018 <_Z20Wind_SampleDirectionv>
 23e9424:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
  wind.bucket[wind.bucket_idx].speed = Wind_SampleSpeed();
 23e9428:	f8d4 51e0 	ldr.w	r5, [r4, #480]	; 0x1e0
 23e942c:	f7ff fd88 	bl	23e8f40 <_Z16Wind_SampleSpeedv>
  wind.bucket_idx = (++wind.bucket_idx) % WIND_READINGS; // Advance bucket index for next reading
 23e9430:	223c      	movs	r2, #60	; 0x3c
 23e9432:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
  wind.bucket[wind.bucket_idx].speed = Wind_SampleSpeed();
 23e9436:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
  wind.bucket_idx = (++wind.bucket_idx) % WIND_READINGS; // Advance bucket index for next reading
 23e943a:	3301      	adds	r3, #1
 23e943c:	fb93 f1f2 	sdiv	r1, r3, r2
  wind.bucket[wind.bucket_idx].speed = Wind_SampleSpeed();
 23e9440:	ed85 0a01 	vstr	s0, [r5, #4]
  wind.bucket_idx = (++wind.bucket_idx) % WIND_READINGS; // Advance bucket index for next reading
 23e9444:	fb02 3311 	mls	r3, r2, r1, r3
 23e9448:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
}
 23e944c:	bd38      	pop	{r3, r4, r5, pc}
 23e944e:	bf00      	nop
 23e9450:	1007ac70 	.word	0x1007ac70

023e9454 <_Z17I2C_Check_Sensorsv>:
/*
 * ======================================================================================================================
 * I2C_Check_Sensors() - See if each I2C sensor responds on the bus and take action accordingly             
 * ======================================================================================================================
 */
void I2C_Check_Sensors() {
 23e9454:	b570      	push	{r4, r5, r6, lr}

  // BMX_1 Barometric Pressure 
  if (I2C_Device_Exist (BMX_ADDRESS_1)) {
 23e9456:	2077      	movs	r0, #119	; 0x77
 23e9458:	f7fd fce7 	bl	23e6e2a <_Z16I2C_Device_Existh>
 23e945c:	4ca7      	ldr	r4, [pc, #668]	; (23e96fc <_Z17I2C_Check_Sensorsv+0x2a8>)
    // Sensor online but our state had it offline
    if (BMX_1_exists == false) {
 23e945e:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (BMX_ADDRESS_1)) {
 23e9460:	2800      	cmp	r0, #0
 23e9462:	f000 80ef 	beq.w	23e9644 <_Z17I2C_Check_Sensorsv+0x1f0>
    if (BMX_1_exists == false) {
 23e9466:	b99b      	cbnz	r3, 23e9490 <_Z17I2C_Check_Sensorsv+0x3c>
      if (BMX_1_chip_id == BMP280_CHIP_ID) {
 23e9468:	4ba5      	ldr	r3, [pc, #660]	; (23e9700 <_Z17I2C_Check_Sensorsv+0x2ac>)
 23e946a:	781a      	ldrb	r2, [r3, #0]
 23e946c:	2a58      	cmp	r2, #88	; 0x58
 23e946e:	f040 80b1 	bne.w	23e95d4 <_Z17I2C_Check_Sensorsv+0x180>
        if (bmp1.begin(BMX_ADDRESS_1)) { 
 23e9472:	2177      	movs	r1, #119	; 0x77
 23e9474:	48a3      	ldr	r0, [pc, #652]	; (23e9704 <_Z17I2C_Check_Sensorsv+0x2b0>)
 23e9476:	f006 ffaf 	bl	23f03d8 <_ZN15Adafruit_BMP2805beginEhh>
 23e947a:	b148      	cbz	r0, 23e9490 <_Z17I2C_Check_Sensorsv+0x3c>
          BMX_1_exists = true;
 23e947c:	2301      	movs	r3, #1
          Output ("BMP1 ONLINE");
 23e947e:	48a2      	ldr	r0, [pc, #648]	; (23e9708 <_Z17I2C_Check_Sensorsv+0x2b4>)
          BMX_1_exists = true;
 23e9480:	7023      	strb	r3, [r4, #0]
        }        
      }
      else {
        if (bm31.begin_I2C(BMX_ADDRESS_1)) { 
          BMX_1_exists = true;
          Output ("BM31 ONLINE");
 23e9482:	f7fd feaf 	bl	23e71e4 <_Z6OutputPKc>
          SystemStatusBits &= ~SSB_BMX_1; // Turn Off Bit
 23e9486:	4aa1      	ldr	r2, [pc, #644]	; (23e970c <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e9488:	6813      	ldr	r3, [r2, #0]
 23e948a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  else {
    // Sensor offline but our state has it online
    if (BMX_1_exists == true) {
      BMX_1_exists = false;
      Output ("BMX1 OFFLINE");
      SystemStatusBits |= SSB_BMX_1;  // Turn On Bit 
 23e948e:	6013      	str	r3, [r2, #0]
    }    
  }

  // BMX_2 Barometric Pressure 
  if (I2C_Device_Exist (BMX_ADDRESS_2)) {
 23e9490:	2076      	movs	r0, #118	; 0x76
 23e9492:	f7fd fcca 	bl	23e6e2a <_Z16I2C_Device_Existh>
 23e9496:	4d9e      	ldr	r5, [pc, #632]	; (23e9710 <_Z17I2C_Check_Sensorsv+0x2bc>)
    // Sensor online but our state had it offline
    if (BMX_2_exists == false) {
 23e9498:	782b      	ldrb	r3, [r5, #0]
  if (I2C_Device_Exist (BMX_ADDRESS_2)) {
 23e949a:	2800      	cmp	r0, #0
 23e949c:	f000 8116 	beq.w	23e96cc <_Z17I2C_Check_Sensorsv+0x278>
    if (BMX_2_exists == false) {
 23e94a0:	b99b      	cbnz	r3, 23e94ca <_Z17I2C_Check_Sensorsv+0x76>
      if (BMX_2_chip_id == BMP280_CHIP_ID) {
 23e94a2:	4b9c      	ldr	r3, [pc, #624]	; (23e9714 <_Z17I2C_Check_Sensorsv+0x2c0>)
 23e94a4:	781a      	ldrb	r2, [r3, #0]
 23e94a6:	2a58      	cmp	r2, #88	; 0x58
 23e94a8:	f040 80d8 	bne.w	23e965c <_Z17I2C_Check_Sensorsv+0x208>
        if (bmp2.begin(BMX_ADDRESS_2)) { 
 23e94ac:	2176      	movs	r1, #118	; 0x76
 23e94ae:	489a      	ldr	r0, [pc, #616]	; (23e9718 <_Z17I2C_Check_Sensorsv+0x2c4>)
 23e94b0:	f006 ff92 	bl	23f03d8 <_ZN15Adafruit_BMP2805beginEhh>
 23e94b4:	b148      	cbz	r0, 23e94ca <_Z17I2C_Check_Sensorsv+0x76>
          BMX_2_exists = true;
 23e94b6:	2301      	movs	r3, #1
          Output ("BMP2 ONLINE");
 23e94b8:	4898      	ldr	r0, [pc, #608]	; (23e971c <_Z17I2C_Check_Sensorsv+0x2c8>)
          BMX_2_exists = true;
 23e94ba:	702b      	strb	r3, [r5, #0]
        }        
      }
      else {
         if (bm32.begin_I2C(BMX_ADDRESS_2)) { 
          BMX_2_exists = true;
          Output ("BM32 ONLINE");
 23e94bc:	f7fd fe92 	bl	23e71e4 <_Z6OutputPKc>
          SystemStatusBits &= ~SSB_BMX_2; // Turn Off Bit
 23e94c0:	4a92      	ldr	r2, [pc, #584]	; (23e970c <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e94c2:	6813      	ldr	r3, [r2, #0]
 23e94c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  else {
    // Sensor offline but we our state has it online
    if (BMX_2_exists == true) {
      BMX_2_exists = false;
      Output ("BMX2 OFFLINE");
      SystemStatusBits |= SSB_BMX_2;  // Turn On Bit 
 23e94c8:	6013      	str	r3, [r2, #0]
    }    
  }

  // HTU21DF Humidity & Temp Sensor
  if (I2C_Device_Exist (HTU21DF_I2CADDR)) {
 23e94ca:	2040      	movs	r0, #64	; 0x40
 23e94cc:	f7fd fcad 	bl	23e6e2a <_Z16I2C_Device_Existh>
 23e94d0:	4c93      	ldr	r4, [pc, #588]	; (23e9720 <_Z17I2C_Check_Sensorsv+0x2cc>)
    // Sensor online but our state had it offline
    if (HTU21DF_exists == false) {
 23e94d2:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (HTU21DF_I2CADDR)) {
 23e94d4:	2800      	cmp	r0, #0
 23e94d6:	f000 8105 	beq.w	23e96e4 <_Z17I2C_Check_Sensorsv+0x290>
    if (HTU21DF_exists == false) {
 23e94da:	b983      	cbnz	r3, 23e94fe <_Z17I2C_Check_Sensorsv+0xaa>
      // See if we can bring sensor online
      if (htu.begin()) {
 23e94dc:	f010 fefc 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e94e0:	4601      	mov	r1, r0
 23e94e2:	4890      	ldr	r0, [pc, #576]	; (23e9724 <_Z17I2C_Check_Sensorsv+0x2d0>)
 23e94e4:	f008 f9ea 	bl	23f18bc <_ZN16Adafruit_HTU21DF5beginEP7TwoWire>
 23e94e8:	b148      	cbz	r0, 23e94fe <_Z17I2C_Check_Sensorsv+0xaa>
        HTU21DF_exists = true;
 23e94ea:	2301      	movs	r3, #1
        Output ("HTU ONLINE");
 23e94ec:	488e      	ldr	r0, [pc, #568]	; (23e9728 <_Z17I2C_Check_Sensorsv+0x2d4>)
        HTU21DF_exists = true;
 23e94ee:	7023      	strb	r3, [r4, #0]
        Output ("HTU ONLINE");
 23e94f0:	f7fd fe78 	bl	23e71e4 <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_HTU21DF; // Turn Off Bit
 23e94f4:	4a85      	ldr	r2, [pc, #532]	; (23e970c <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e94f6:	6813      	ldr	r3, [r2, #0]
 23e94f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  else {
    // Sensor offline but we our state has it online
    if (HTU21DF_exists == true) {
      HTU21DF_exists = false;
      Output ("HTU OFFLINE");
      SystemStatusBits |= SSB_HTU21DF;  // Turn On Bit
 23e94fc:	6013      	str	r3, [r2, #0]
    }   
  }
#endif

  // SI1145 UV index & IR & Visible Sensor
  if (I2C_Device_Exist (SI1145_ADDR)) {
 23e94fe:	2060      	movs	r0, #96	; 0x60
 23e9500:	f7fd fc93 	bl	23e6e2a <_Z16I2C_Device_Existh>
 23e9504:	4c89      	ldr	r4, [pc, #548]	; (23e972c <_Z17I2C_Check_Sensorsv+0x2d8>)
    // Sensor online but our state had it offline
    if (SI1145_exists == false) {
 23e9506:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (SI1145_ADDR)) {
 23e9508:	2800      	cmp	r0, #0
 23e950a:	f000 8141 	beq.w	23e9790 <_Z17I2C_Check_Sensorsv+0x33c>
    if (SI1145_exists == false) {
 23e950e:	b98b      	cbnz	r3, 23e9534 <_Z17I2C_Check_Sensorsv+0xe0>
      // See if we can bring sensore online
      if (uv.begin()) {
 23e9510:	f010 fee2 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e9514:	2160      	movs	r1, #96	; 0x60
 23e9516:	4602      	mov	r2, r0
 23e9518:	4885      	ldr	r0, [pc, #532]	; (23e9730 <_Z17I2C_Check_Sensorsv+0x2dc>)
 23e951a:	f008 fe77 	bl	23f220c <_ZN15Adafruit_SI11455beginEhP7TwoWire>
 23e951e:	b148      	cbz	r0, 23e9534 <_Z17I2C_Check_Sensorsv+0xe0>
        SI1145_exists = true;
 23e9520:	2301      	movs	r3, #1
        Output ("SI ONLINE");
 23e9522:	4884      	ldr	r0, [pc, #528]	; (23e9734 <_Z17I2C_Check_Sensorsv+0x2e0>)
        SI1145_exists = true;
 23e9524:	7023      	strb	r3, [r4, #0]
        Output ("SI ONLINE");
 23e9526:	f7fd fe5d 	bl	23e71e4 <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_SI1145; // Turn Off Bit
 23e952a:	4a78      	ldr	r2, [pc, #480]	; (23e970c <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e952c:	6813      	ldr	r3, [r2, #0]
 23e952e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  else {
    // Sensor offline but we our state has it online
    if (SI1145_exists == true) {
      SI1145_exists = false;
      Output ("SI OFFLINE");
      SystemStatusBits |= SSB_SI1145;  // Turn On Bit
 23e9532:	6013      	str	r3, [r2, #0]
    }   
  }

  // AS5600 Wind Direction
  if (I2C_Device_Exist (AS5600_ADR)) {
 23e9534:	4b80      	ldr	r3, [pc, #512]	; (23e9738 <_Z17I2C_Check_Sensorsv+0x2e4>)
 23e9536:	7818      	ldrb	r0, [r3, #0]
 23e9538:	f7fd fc77 	bl	23e6e2a <_Z16I2C_Device_Existh>
 23e953c:	4b7f      	ldr	r3, [pc, #508]	; (23e973c <_Z17I2C_Check_Sensorsv+0x2e8>)
    // Sensor online but our state had it offline
    if (AS5600_exists == false) {
 23e953e:	781a      	ldrb	r2, [r3, #0]
  if (I2C_Device_Exist (AS5600_ADR)) {
 23e9540:	2800      	cmp	r0, #0
 23e9542:	f000 8131 	beq.w	23e97a8 <_Z17I2C_Check_Sensorsv+0x354>
    if (AS5600_exists == false) {
 23e9546:	b94a      	cbnz	r2, 23e955c <_Z17I2C_Check_Sensorsv+0x108>
      AS5600_exists = true;
 23e9548:	2201      	movs	r2, #1
      Output ("WD ONLINE");
 23e954a:	487d      	ldr	r0, [pc, #500]	; (23e9740 <_Z17I2C_Check_Sensorsv+0x2ec>)
      AS5600_exists = true;
 23e954c:	701a      	strb	r2, [r3, #0]
      Output ("WD ONLINE");
 23e954e:	f7fd fe49 	bl	23e71e4 <_Z6OutputPKc>
      SystemStatusBits &= ~SSB_AS5600; // Turn Off Bit
 23e9552:	4a6e      	ldr	r2, [pc, #440]	; (23e970c <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e9554:	6813      	ldr	r3, [r2, #0]
 23e9556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  else {
    // Sensor offline but we our state has it online
    if (AS5600_exists == true) {
      AS5600_exists = false;
      Output ("WD OFFLINE");
      SystemStatusBits |= SSB_AS5600;  // Turn On Bit
 23e955a:	6013      	str	r3, [r2, #0]
    }   
  }

  // VEML7700 Lux 
  if (I2C_Device_Exist (VEML7700_ADDRESS)) {
 23e955c:	2010      	movs	r0, #16
 23e955e:	f7fd fc64 	bl	23e6e2a <_Z16I2C_Device_Existh>
 23e9562:	4c78      	ldr	r4, [pc, #480]	; (23e9744 <_Z17I2C_Check_Sensorsv+0x2f0>)
    // Sensor online but our state had it offline
    if (VEML7700_exists == false) {
 23e9564:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (VEML7700_ADDRESS)) {
 23e9566:	2800      	cmp	r0, #0
 23e9568:	f000 812a 	beq.w	23e97c0 <_Z17I2C_Check_Sensorsv+0x36c>
    if (VEML7700_exists == false) {
 23e956c:	b983      	cbnz	r3, 23e9590 <_Z17I2C_Check_Sensorsv+0x13c>
      // See if we can bring sensor online
      if (veml.begin()) {
 23e956e:	f010 feb3 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e9572:	4601      	mov	r1, r0
 23e9574:	4874      	ldr	r0, [pc, #464]	; (23e9748 <_Z17I2C_Check_Sensorsv+0x2f4>)
 23e9576:	f009 fc14 	bl	23f2da2 <_ZN17Adafruit_VEML77005beginEP7TwoWire>
 23e957a:	b148      	cbz	r0, 23e9590 <_Z17I2C_Check_Sensorsv+0x13c>
        VEML7700_exists = true;
 23e957c:	2301      	movs	r3, #1
        Output ("VLX ONLINE");
 23e957e:	4873      	ldr	r0, [pc, #460]	; (23e974c <_Z17I2C_Check_Sensorsv+0x2f8>)
        VEML7700_exists = true;
 23e9580:	7023      	strb	r3, [r4, #0]
        Output ("VLX ONLINE");
 23e9582:	f7fd fe2f 	bl	23e71e4 <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_VLX; // Turn Off Bit
 23e9586:	4a61      	ldr	r2, [pc, #388]	; (23e970c <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e9588:	6813      	ldr	r3, [r2, #0]
 23e958a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
  else {
    // Sensor offline but we our state has it online
    if (VEML7700_exists == true) {
      VEML7700_exists = false;
      Output ("VLX OFFLINE");
      SystemStatusBits |= SSB_VLX;  // Turn On Bit
 23e958e:	6013      	str	r3, [r2, #0]
    }   
  }

  // PM25AQI
  if (I2C_Device_Exist (PM25AQI_ADDRESS)) {
 23e9590:	2012      	movs	r0, #18
 23e9592:	f7fd fc4a 	bl	23e6e2a <_Z16I2C_Device_Existh>
 23e9596:	4c6e      	ldr	r4, [pc, #440]	; (23e9750 <_Z17I2C_Check_Sensorsv+0x2fc>)
    // Sensor online but our state had it offline
    if (PM25AQI_exists == false) {
 23e9598:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (PM25AQI_ADDRESS)) {
 23e959a:	2800      	cmp	r0, #0
 23e959c:	f000 811c 	beq.w	23e97d8 <_Z17I2C_Check_Sensorsv+0x384>
    if (PM25AQI_exists == false) {
 23e95a0:	2b00      	cmp	r3, #0
 23e95a2:	f040 8123 	bne.w	23e97ec <_Z17I2C_Check_Sensorsv+0x398>
      // See if we can bring sensor online
      if (pmaq.begin_I2C()) {
 23e95a6:	f010 fe97 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e95aa:	4601      	mov	r1, r0
 23e95ac:	4869      	ldr	r0, [pc, #420]	; (23e9754 <_Z17I2C_Check_Sensorsv+0x300>)
 23e95ae:	f008 fc0e 	bl	23f1dce <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>
 23e95b2:	2800      	cmp	r0, #0
 23e95b4:	f000 811a 	beq.w	23e97ec <_Z17I2C_Check_Sensorsv+0x398>
        PM25AQI_exists = true;
 23e95b8:	2301      	movs	r3, #1
        Output ("PM ONLINE");
 23e95ba:	4867      	ldr	r0, [pc, #412]	; (23e9758 <_Z17I2C_Check_Sensorsv+0x304>)
        PM25AQI_exists = true;
 23e95bc:	7023      	strb	r3, [r4, #0]
        Output ("PM ONLINE");
 23e95be:	f7fd fe11 	bl	23e71e4 <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
 23e95c2:	4a52      	ldr	r2, [pc, #328]	; (23e970c <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e95c4:	6813      	ldr	r3, [r2, #0]
 23e95c6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 23e95ca:	6013      	str	r3, [r2, #0]
      PM25AQI_exists = false;
      Output ("PM OFFLINE");
      SystemStatusBits |= SSB_PM25AQI;  // Turn On Bit
    }   
  }
}
 23e95cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pm25aqi_clear();
 23e95d0:	f7ff b98c 	b.w	23e88ec <_Z13pm25aqi_clearv>
      else if (BMX_1_chip_id == BME280_BMP390_CHIP_ID) {
 23e95d4:	2a60      	cmp	r2, #96	; 0x60
 23e95d6:	d127      	bne.n	23e9628 <_Z17I2C_Check_Sensorsv+0x1d4>
        if (BMX_1_type == BMX_TYPE_BME280) {
 23e95d8:	4d60      	ldr	r5, [pc, #384]	; (23e975c <_Z17I2C_Check_Sensorsv+0x308>)
 23e95da:	782b      	ldrb	r3, [r5, #0]
 23e95dc:	2b02      	cmp	r3, #2
 23e95de:	d111      	bne.n	23e9604 <_Z17I2C_Check_Sensorsv+0x1b0>
          if (bme1.begin(BMX_ADDRESS_1)) { 
 23e95e0:	f010 fe7a 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e95e4:	2177      	movs	r1, #119	; 0x77
 23e95e6:	4602      	mov	r2, r0
 23e95e8:	485d      	ldr	r0, [pc, #372]	; (23e9760 <_Z17I2C_Check_Sensorsv+0x30c>)
 23e95ea:	f006 fb00 	bl	23efbee <_ZN15Adafruit_BME2805beginEhP7TwoWire>
 23e95ee:	b148      	cbz	r0, 23e9604 <_Z17I2C_Check_Sensorsv+0x1b0>
            BMX_1_exists = true;
 23e95f0:	2301      	movs	r3, #1
            Output ("BME1 ONLINE");
 23e95f2:	485c      	ldr	r0, [pc, #368]	; (23e9764 <_Z17I2C_Check_Sensorsv+0x310>)
            BMX_1_exists = true;
 23e95f4:	7023      	strb	r3, [r4, #0]
            Output ("BME1 ONLINE");
 23e95f6:	f7fd fdf5 	bl	23e71e4 <_Z6OutputPKc>
            SystemStatusBits &= ~SSB_BMX_1; // Turn Off Bit
 23e95fa:	4a44      	ldr	r2, [pc, #272]	; (23e970c <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e95fc:	6813      	ldr	r3, [r2, #0]
 23e95fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 23e9602:	6013      	str	r3, [r2, #0]
        if (BMX_1_type == BMX_TYPE_BMP390) {
 23e9604:	782b      	ldrb	r3, [r5, #0]
 23e9606:	2b04      	cmp	r3, #4
 23e9608:	f47f af42 	bne.w	23e9490 <_Z17I2C_Check_Sensorsv+0x3c>
          if (bm31.begin_I2C(BMX_ADDRESS_1)) {
 23e960c:	f010 fe64 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e9610:	2177      	movs	r1, #119	; 0x77
 23e9612:	4602      	mov	r2, r0
 23e9614:	4854      	ldr	r0, [pc, #336]	; (23e9768 <_Z17I2C_Check_Sensorsv+0x314>)
 23e9616:	f007 f8e1 	bl	23f07dc <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e961a:	2800      	cmp	r0, #0
 23e961c:	f43f af38 	beq.w	23e9490 <_Z17I2C_Check_Sensorsv+0x3c>
            BMX_1_exists = true;
 23e9620:	2301      	movs	r3, #1
            Output ("BMP390_1 ONLINE");
 23e9622:	4852      	ldr	r0, [pc, #328]	; (23e976c <_Z17I2C_Check_Sensorsv+0x318>)
            BMX_1_exists = true;
 23e9624:	7023      	strb	r3, [r4, #0]
            Output ("BMP390_1 ONLINE");
 23e9626:	e72c      	b.n	23e9482 <_Z17I2C_Check_Sensorsv+0x2e>
        if (bm31.begin_I2C(BMX_ADDRESS_1)) { 
 23e9628:	f010 fe56 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e962c:	2177      	movs	r1, #119	; 0x77
 23e962e:	4602      	mov	r2, r0
 23e9630:	484d      	ldr	r0, [pc, #308]	; (23e9768 <_Z17I2C_Check_Sensorsv+0x314>)
 23e9632:	f007 f8d3 	bl	23f07dc <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e9636:	2800      	cmp	r0, #0
 23e9638:	f43f af2a 	beq.w	23e9490 <_Z17I2C_Check_Sensorsv+0x3c>
          BMX_1_exists = true;
 23e963c:	2301      	movs	r3, #1
          Output ("BM31 ONLINE");
 23e963e:	484c      	ldr	r0, [pc, #304]	; (23e9770 <_Z17I2C_Check_Sensorsv+0x31c>)
          BMX_1_exists = true;
 23e9640:	7023      	strb	r3, [r4, #0]
          Output ("BM31 ONLINE");
 23e9642:	e71e      	b.n	23e9482 <_Z17I2C_Check_Sensorsv+0x2e>
    if (BMX_1_exists == true) {
 23e9644:	2b00      	cmp	r3, #0
 23e9646:	f43f af23 	beq.w	23e9490 <_Z17I2C_Check_Sensorsv+0x3c>
      BMX_1_exists = false;
 23e964a:	7020      	strb	r0, [r4, #0]
      Output ("BMX1 OFFLINE");
 23e964c:	4849      	ldr	r0, [pc, #292]	; (23e9774 <_Z17I2C_Check_Sensorsv+0x320>)
 23e964e:	f7fd fdc9 	bl	23e71e4 <_Z6OutputPKc>
      SystemStatusBits |= SSB_BMX_1;  // Turn On Bit 
 23e9652:	4a2e      	ldr	r2, [pc, #184]	; (23e970c <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e9654:	6813      	ldr	r3, [r2, #0]
 23e9656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 23e965a:	e718      	b.n	23e948e <_Z17I2C_Check_Sensorsv+0x3a>
      else if (BMX_2_chip_id == BME280_BMP390_CHIP_ID) {
 23e965c:	2a60      	cmp	r2, #96	; 0x60
 23e965e:	d127      	bne.n	23e96b0 <_Z17I2C_Check_Sensorsv+0x25c>
        if (BMX_2_type == BMX_TYPE_BME280) {
 23e9660:	4e45      	ldr	r6, [pc, #276]	; (23e9778 <_Z17I2C_Check_Sensorsv+0x324>)
 23e9662:	7833      	ldrb	r3, [r6, #0]
 23e9664:	2b02      	cmp	r3, #2
 23e9666:	d111      	bne.n	23e968c <_Z17I2C_Check_Sensorsv+0x238>
          if (bme1.begin(BMX_ADDRESS_2)) { 
 23e9668:	f010 fe36 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e966c:	2176      	movs	r1, #118	; 0x76
 23e966e:	4602      	mov	r2, r0
 23e9670:	483b      	ldr	r0, [pc, #236]	; (23e9760 <_Z17I2C_Check_Sensorsv+0x30c>)
 23e9672:	f006 fabc 	bl	23efbee <_ZN15Adafruit_BME2805beginEhP7TwoWire>
 23e9676:	b148      	cbz	r0, 23e968c <_Z17I2C_Check_Sensorsv+0x238>
            BMX_2_exists = true;
 23e9678:	2301      	movs	r3, #1
            Output ("BME2 ONLINE");
 23e967a:	4840      	ldr	r0, [pc, #256]	; (23e977c <_Z17I2C_Check_Sensorsv+0x328>)
            BMX_2_exists = true;
 23e967c:	702b      	strb	r3, [r5, #0]
            Output ("BME2 ONLINE");
 23e967e:	f7fd fdb1 	bl	23e71e4 <_Z6OutputPKc>
            SystemStatusBits &= ~SSB_BMX_2; // Turn Off Bit
 23e9682:	4a22      	ldr	r2, [pc, #136]	; (23e970c <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e9684:	6813      	ldr	r3, [r2, #0]
 23e9686:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 23e968a:	6013      	str	r3, [r2, #0]
        if (BMX_2_type == BMX_TYPE_BMP390) {
 23e968c:	7833      	ldrb	r3, [r6, #0]
 23e968e:	2b04      	cmp	r3, #4
 23e9690:	f47f af1b 	bne.w	23e94ca <_Z17I2C_Check_Sensorsv+0x76>
          if (bm31.begin_I2C(BMX_ADDRESS_2)) {
 23e9694:	f010 fe20 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e9698:	2176      	movs	r1, #118	; 0x76
 23e969a:	4602      	mov	r2, r0
 23e969c:	4832      	ldr	r0, [pc, #200]	; (23e9768 <_Z17I2C_Check_Sensorsv+0x314>)
 23e969e:	f007 f89d 	bl	23f07dc <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e96a2:	2800      	cmp	r0, #0
 23e96a4:	f43f af11 	beq.w	23e94ca <_Z17I2C_Check_Sensorsv+0x76>
            BMX_1_exists = true;
 23e96a8:	2301      	movs	r3, #1
            Output ("BMP390_1 ONLINE");
 23e96aa:	4830      	ldr	r0, [pc, #192]	; (23e976c <_Z17I2C_Check_Sensorsv+0x318>)
            BMX_1_exists = true;
 23e96ac:	7023      	strb	r3, [r4, #0]
            Output ("BMP390_1 ONLINE");
 23e96ae:	e705      	b.n	23e94bc <_Z17I2C_Check_Sensorsv+0x68>
         if (bm32.begin_I2C(BMX_ADDRESS_2)) { 
 23e96b0:	f010 fe12 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23e96b4:	2176      	movs	r1, #118	; 0x76
 23e96b6:	4602      	mov	r2, r0
 23e96b8:	4831      	ldr	r0, [pc, #196]	; (23e9780 <_Z17I2C_Check_Sensorsv+0x32c>)
 23e96ba:	f007 f88f 	bl	23f07dc <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e96be:	2800      	cmp	r0, #0
 23e96c0:	f43f af03 	beq.w	23e94ca <_Z17I2C_Check_Sensorsv+0x76>
          BMX_2_exists = true;
 23e96c4:	2301      	movs	r3, #1
          Output ("BM32 ONLINE");
 23e96c6:	482f      	ldr	r0, [pc, #188]	; (23e9784 <_Z17I2C_Check_Sensorsv+0x330>)
          BMX_2_exists = true;
 23e96c8:	702b      	strb	r3, [r5, #0]
          Output ("BM32 ONLINE");
 23e96ca:	e6f7      	b.n	23e94bc <_Z17I2C_Check_Sensorsv+0x68>
    if (BMX_2_exists == true) {
 23e96cc:	2b00      	cmp	r3, #0
 23e96ce:	f43f aefc 	beq.w	23e94ca <_Z17I2C_Check_Sensorsv+0x76>
      BMX_2_exists = false;
 23e96d2:	7028      	strb	r0, [r5, #0]
      Output ("BMX2 OFFLINE");
 23e96d4:	482c      	ldr	r0, [pc, #176]	; (23e9788 <_Z17I2C_Check_Sensorsv+0x334>)
 23e96d6:	f7fd fd85 	bl	23e71e4 <_Z6OutputPKc>
      SystemStatusBits |= SSB_BMX_2;  // Turn On Bit 
 23e96da:	4a0c      	ldr	r2, [pc, #48]	; (23e970c <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e96dc:	6813      	ldr	r3, [r2, #0]
 23e96de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 23e96e2:	e6f1      	b.n	23e94c8 <_Z17I2C_Check_Sensorsv+0x74>
    if (HTU21DF_exists == true) {
 23e96e4:	2b00      	cmp	r3, #0
 23e96e6:	f43f af0a 	beq.w	23e94fe <_Z17I2C_Check_Sensorsv+0xaa>
      HTU21DF_exists = false;
 23e96ea:	7020      	strb	r0, [r4, #0]
      Output ("HTU OFFLINE");
 23e96ec:	4827      	ldr	r0, [pc, #156]	; (23e978c <_Z17I2C_Check_Sensorsv+0x338>)
 23e96ee:	f7fd fd79 	bl	23e71e4 <_Z6OutputPKc>
      SystemStatusBits |= SSB_HTU21DF;  // Turn On Bit
 23e96f2:	4a06      	ldr	r2, [pc, #24]	; (23e970c <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e96f4:	6813      	ldr	r3, [r2, #0]
 23e96f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 23e96fa:	e6ff      	b.n	23e94fc <_Z17I2C_Check_Sensorsv+0xa8>
 23e96fc:	1006a2ba 	.word	0x1006a2ba
 23e9700:	1006a2b9 	.word	0x1006a2b9
 23e9704:	1006ac10 	.word	0x1006ac10
 23e9708:	023fd886 	.word	0x023fd886
 23e970c:	1006a1cc 	.word	0x1006a1cc
 23e9710:	1006a2bd 	.word	0x1006a2bd
 23e9714:	1006a2bc 	.word	0x1006a2bc
 23e9718:	1006ac50 	.word	0x1006ac50
 23e971c:	023fd8c7 	.word	0x023fd8c7
 23e9720:	1006a2e8 	.word	0x1006a2e8
 23e9724:	1006aea8 	.word	0x1006aea8
 23e9728:	023fd8f8 	.word	0x023fd8f8
 23e972c:	1006a80a 	.word	0x1006a80a
 23e9730:	1007ac1c 	.word	0x1007ac1c
 23e9734:	023fd90f 	.word	0x023fd90f
 23e9738:	1006a13c 	.word	0x1006a13c
 23e973c:	1006a140 	.word	0x1006a140
 23e9740:	023fd924 	.word	0x023fd924
 23e9744:	1006a81c 	.word	0x1006a81c
 23e9748:	1007ac24 	.word	0x1007ac24
 23e974c:	023fd939 	.word	0x023fd939
 23e9750:	1006a304 	.word	0x1006a304
 23e9754:	1007aa30 	.word	0x1007aa30
 23e9758:	023fd950 	.word	0x023fd950
 23e975c:	1006a2bb 	.word	0x1006a2bb
 23e9760:	1006ab60 	.word	0x1006ab60
 23e9764:	023fd892 	.word	0x023fd892
 23e9768:	1006a960 	.word	0x1006a960
 23e976c:	023fd89e 	.word	0x023fd89e
 23e9770:	023fd8ae 	.word	0x023fd8ae
 23e9774:	023fd8ba 	.word	0x023fd8ba
 23e9778:	1006a2be 	.word	0x1006a2be
 23e977c:	023fd8d3 	.word	0x023fd8d3
 23e9780:	1006aa60 	.word	0x1006aa60
 23e9784:	023fd8df 	.word	0x023fd8df
 23e9788:	023fd8eb 	.word	0x023fd8eb
 23e978c:	023fd903 	.word	0x023fd903
    if (SI1145_exists == true) {
 23e9790:	2b00      	cmp	r3, #0
 23e9792:	f43f aecf 	beq.w	23e9534 <_Z17I2C_Check_Sensorsv+0xe0>
      SI1145_exists = false;
 23e9796:	7020      	strb	r0, [r4, #0]
      Output ("SI OFFLINE");
 23e9798:	4815      	ldr	r0, [pc, #84]	; (23e97f0 <_Z17I2C_Check_Sensorsv+0x39c>)
 23e979a:	f7fd fd23 	bl	23e71e4 <_Z6OutputPKc>
      SystemStatusBits |= SSB_SI1145;  // Turn On Bit
 23e979e:	4a15      	ldr	r2, [pc, #84]	; (23e97f4 <_Z17I2C_Check_Sensorsv+0x3a0>)
 23e97a0:	6813      	ldr	r3, [r2, #0]
 23e97a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 23e97a6:	e6c4      	b.n	23e9532 <_Z17I2C_Check_Sensorsv+0xde>
    if (AS5600_exists == true) {
 23e97a8:	2a00      	cmp	r2, #0
 23e97aa:	f43f aed7 	beq.w	23e955c <_Z17I2C_Check_Sensorsv+0x108>
      AS5600_exists = false;
 23e97ae:	7018      	strb	r0, [r3, #0]
      Output ("WD OFFLINE");
 23e97b0:	4811      	ldr	r0, [pc, #68]	; (23e97f8 <_Z17I2C_Check_Sensorsv+0x3a4>)
 23e97b2:	f7fd fd17 	bl	23e71e4 <_Z6OutputPKc>
      SystemStatusBits |= SSB_AS5600;  // Turn On Bit
 23e97b6:	4a0f      	ldr	r2, [pc, #60]	; (23e97f4 <_Z17I2C_Check_Sensorsv+0x3a0>)
 23e97b8:	6813      	ldr	r3, [r2, #0]
 23e97ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 23e97be:	e6cc      	b.n	23e955a <_Z17I2C_Check_Sensorsv+0x106>
    if (VEML7700_exists == true) {
 23e97c0:	2b00      	cmp	r3, #0
 23e97c2:	f43f aee5 	beq.w	23e9590 <_Z17I2C_Check_Sensorsv+0x13c>
      VEML7700_exists = false;
 23e97c6:	7020      	strb	r0, [r4, #0]
      Output ("VLX OFFLINE");
 23e97c8:	480c      	ldr	r0, [pc, #48]	; (23e97fc <_Z17I2C_Check_Sensorsv+0x3a8>)
 23e97ca:	f7fd fd0b 	bl	23e71e4 <_Z6OutputPKc>
      SystemStatusBits |= SSB_VLX;  // Turn On Bit
 23e97ce:	4a09      	ldr	r2, [pc, #36]	; (23e97f4 <_Z17I2C_Check_Sensorsv+0x3a0>)
 23e97d0:	6813      	ldr	r3, [r2, #0]
 23e97d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 23e97d6:	e6da      	b.n	23e958e <_Z17I2C_Check_Sensorsv+0x13a>
    if (PM25AQI_exists == true) {
 23e97d8:	b143      	cbz	r3, 23e97ec <_Z17I2C_Check_Sensorsv+0x398>
      PM25AQI_exists = false;
 23e97da:	7020      	strb	r0, [r4, #0]
      Output ("PM OFFLINE");
 23e97dc:	4808      	ldr	r0, [pc, #32]	; (23e9800 <_Z17I2C_Check_Sensorsv+0x3ac>)
 23e97de:	f7fd fd01 	bl	23e71e4 <_Z6OutputPKc>
      SystemStatusBits |= SSB_PM25AQI;  // Turn On Bit
 23e97e2:	4a04      	ldr	r2, [pc, #16]	; (23e97f4 <_Z17I2C_Check_Sensorsv+0x3a0>)
 23e97e4:	6813      	ldr	r3, [r2, #0]
 23e97e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 23e97ea:	6013      	str	r3, [r2, #0]
}
 23e97ec:	bd70      	pop	{r4, r5, r6, pc}
 23e97ee:	bf00      	nop
 23e97f0:	023fd919 	.word	0x023fd919
 23e97f4:	1006a1cc 	.word	0x1006a1cc
 23e97f8:	023fd92e 	.word	0x023fd92e
 23e97fc:	023fd944 	.word	0x023fd944
 23e9800:	023fd73a 	.word	0x023fd73a

023e9804 <_Z22EEPROM_ChecksumComputev>:
 *=======================================================================================================================
 */
unsigned long EEPROM_ChecksumCompute() {
  unsigned long checksum=0;

  checksum += (unsigned long) eeprom.rgt1;
 23e9804:	4910      	ldr	r1, [pc, #64]	; (23e9848 <_Z22EEPROM_ChecksumComputev+0x44>)
 23e9806:	edd1 7a00 	vldr	s15, [r1]
 23e980a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23e980e:	ee17 0a90 	vmov	r0, s15
  checksum += (unsigned long) eeprom.rgp1;
 23e9812:	edd1 7a01 	vldr	s15, [r1, #4]
 23e9816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23e981a:	ee17 2a90 	vmov	r2, s15
  checksum += (unsigned long) eeprom.rgt2;
 23e981e:	edd1 7a02 	vldr	s15, [r1, #8]
 23e9822:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  checksum += (unsigned long) eeprom.rgp1;
 23e9826:	4410      	add	r0, r2
 23e9828:	694a      	ldr	r2, [r1, #20]
 23e982a:	4402      	add	r2, r0
  checksum += (unsigned long) eeprom.rgt2;
 23e982c:	ee17 0a90 	vmov	r0, s15
  checksum += (unsigned long) eeprom.rgp2;
 23e9830:	edd1 7a03 	vldr	s15, [r1, #12]
 23e9834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23e9838:	ee17 3a90 	vmov	r3, s15
 23e983c:	4410      	add	r0, r2
 23e983e:	4403      	add	r3, r0
  checksum += (unsigned long) eeprom.rgts;
  checksum += (unsigned long) eeprom.n2sfp;
 23e9840:	6908      	ldr	r0, [r1, #16]
  return (checksum);
}
 23e9842:	4418      	add	r0, r3
 23e9844:	4770      	bx	lr
 23e9846:	bf00      	nop
 23e9848:	1006ae74 	.word	0x1006ae74

023e984c <_Z21EEPROM_ChecksumUpdatev>:
/* 
 *=======================================================================================================================
 * EEPROM_ChecksumUpdate()
 *=======================================================================================================================
 */
void EEPROM_ChecksumUpdate() {
 23e984c:	b508      	push	{r3, lr}
  eeprom.checksum = EEPROM_ChecksumCompute();
 23e984e:	f7ff ffd9 	bl	23e9804 <_Z22EEPROM_ChecksumComputev>
 23e9852:	4b01      	ldr	r3, [pc, #4]	; (23e9858 <_Z21EEPROM_ChecksumUpdatev+0xc>)
 23e9854:	6198      	str	r0, [r3, #24]
}
 23e9856:	bd08      	pop	{r3, pc}
 23e9858:	1006ae74 	.word	0x1006ae74

023e985c <_Z12EEPROM_Resetl.part.0>:
 *                  Requires system clock to be valid
 *=======================================================================================================================
 */
void EEPROM_Reset(time32_t current_time) {
  if (Time.isValid()) {
    eeprom.rgt1 = 0.0;
 23e985c:	2300      	movs	r3, #0
void EEPROM_Reset(time32_t current_time) {
 23e985e:	b510      	push	{r4, lr}
    eeprom.rgt1 = 0.0;
 23e9860:	4c09      	ldr	r4, [pc, #36]	; (23e9888 <_Z12EEPROM_Resetl.part.0+0x2c>)
 23e9862:	6023      	str	r3, [r4, #0]
    eeprom.rgp1 = 0.0;
 23e9864:	6063      	str	r3, [r4, #4]
    eeprom.rgt2 = 0.0;
 23e9866:	60a3      	str	r3, [r4, #8]
    eeprom.rgp2 = 0.0;
 23e9868:	60e3      	str	r3, [r4, #12]
    eeprom.rgts = current_time;
    eeprom.n2sfp = 0;
 23e986a:	2300      	movs	r3, #0
    eeprom.rgts = current_time;
 23e986c:	6120      	str	r0, [r4, #16]
    eeprom.n2sfp = 0;
 23e986e:	6163      	str	r3, [r4, #20]
    EEPROM_ChecksumUpdate();
 23e9870:	f7ff ffec 	bl	23e984c <_Z21EEPROM_ChecksumUpdatev>
    EEPROM.put(eeprom_address, eeprom);
 23e9874:	f010 fcfc 	bl	23fa270 <_Z21__fetch_global_EEPROMv>
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        static_assert(!std::is_base_of_v<String, T>, "String class cannot be used with EEPROM, use char[] array");
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 23e9878:	4b04      	ldr	r3, [pc, #16]	; (23e988c <_Z12EEPROM_Resetl.part.0+0x30>)
 23e987a:	4621      	mov	r1, r4
  }
  else {
    Output("EEPROM RESET ERROR");
  }
}
 23e987c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23e9880:	221c      	movs	r2, #28
 23e9882:	6818      	ldr	r0, [r3, #0]
 23e9884:	f00d bed4 	b.w	23f7630 <HAL_EEPROM_Put>
 23e9888:	1006ae74 	.word	0x1006ae74
 23e988c:	1006ae90 	.word	0x1006ae90

023e9890 <_Z20EEPROM_ChecksumValidv>:
bool EEPROM_ChecksumValid() {
 23e9890:	b508      	push	{r3, lr}
  unsigned long checksum = EEPROM_ChecksumCompute();
 23e9892:	f7ff ffb7 	bl	23e9804 <_Z22EEPROM_ChecksumComputev>
  if (checksum == eeprom.checksum) {
 23e9896:	4b03      	ldr	r3, [pc, #12]	; (23e98a4 <_Z20EEPROM_ChecksumValidv+0x14>)
 23e9898:	699b      	ldr	r3, [r3, #24]
}
 23e989a:	1a1b      	subs	r3, r3, r0
 23e989c:	4258      	negs	r0, r3
 23e989e:	4158      	adcs	r0, r3
 23e98a0:	bd08      	pop	{r3, pc}
 23e98a2:	bf00      	nop
 23e98a4:	1006ae74 	.word	0x1006ae74

023e98a8 <_Z22EEPROM_ClearRainTotalsl>:
 *=======================================================================================================================
 * EEPROM_ClearRainTotals() - Reset to default values
 *                           Requires system clock to be valid
 *=======================================================================================================================
 */
void EEPROM_ClearRainTotals(time32_t current_time) {
 23e98a8:	b510      	push	{r4, lr}
 23e98aa:	4604      	mov	r4, r0
  if (Time.isValid()) {
 23e98ac:	f010 f9f1 	bl	23f9c92 <_ZN9TimeClass7isValidEv>
 23e98b0:	b120      	cbz	r0, 23e98bc <_Z22EEPROM_ClearRainTotalsl+0x14>
 23e98b2:	4620      	mov	r0, r4
    EEPROM.put(eeprom_address, eeprom);
  }
  else {
    Output("EEPROM CLEAR ERROR");
  }
}
 23e98b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23e98b8:	f7ff bfd0 	b.w	23e985c <_Z12EEPROM_Resetl.part.0>
    Output("EEPROM CLEAR ERROR");
 23e98bc:	4802      	ldr	r0, [pc, #8]	; (23e98c8 <_Z22EEPROM_ClearRainTotalsl+0x20>)
}
 23e98be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Output("EEPROM CLEAR ERROR");
 23e98c2:	f7fd bc8f 	b.w	23e71e4 <_Z6OutputPKc>
 23e98c6:	bf00      	nop
 23e98c8:	023fd95a 	.word	0x023fd95a

023e98cc <_Z23EEPROM_ClearRain2Totalsv>:
 * EEPROM_ClearRain2Totals() - Reset Rain 2 Totals
 *                             Requires system clock to be valid
 *=======================================================================================================================
 */
void EEPROM_ClearRain2Totals() {
  eeprom.rgt2 = 0.0;
 23e98cc:	2300      	movs	r3, #0
void EEPROM_ClearRain2Totals() {
 23e98ce:	b510      	push	{r4, lr}
  eeprom.rgt2 = 0.0;
 23e98d0:	4c07      	ldr	r4, [pc, #28]	; (23e98f0 <_Z23EEPROM_ClearRain2Totalsv+0x24>)
 23e98d2:	60a3      	str	r3, [r4, #8]
  eeprom.rgp2 = 0.0;
 23e98d4:	60e3      	str	r3, [r4, #12]
  EEPROM_ChecksumUpdate();
 23e98d6:	f7ff ffb9 	bl	23e984c <_Z21EEPROM_ChecksumUpdatev>
  EEPROM.put(eeprom_address, eeprom);
 23e98da:	f010 fcc9 	bl	23fa270 <_Z21__fetch_global_EEPROMv>
 23e98de:	4b05      	ldr	r3, [pc, #20]	; (23e98f4 <_Z23EEPROM_ClearRain2Totalsv+0x28>)
 23e98e0:	4621      	mov	r1, r4
}
 23e98e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23e98e6:	221c      	movs	r2, #28
 23e98e8:	6818      	ldr	r0, [r3, #0]
 23e98ea:	f00d bea1 	b.w	23f7630 <HAL_EEPROM_Put>
 23e98ee:	bf00      	nop
 23e98f0:	1006ae74 	.word	0x1006ae74
 23e98f4:	1006ae90 	.word	0x1006ae90

023e98f8 <_Z17EEPROM_Initializev>:
 *=======================================================================================================================
 * EEPROM_Initialize() - Check status of EEPROM information and determine status
 *                       Requires system clock to be valid
 *=======================================================================================================================
 */
void EEPROM_Initialize() {
 23e98f8:	b570      	push	{r4, r5, r6, lr}
  if (Time.isValid()) {
 23e98fa:	f010 f9ca 	bl	23f9c92 <_ZN9TimeClass7isValidEv>
 23e98fe:	2800      	cmp	r0, #0
 23e9900:	d062      	beq.n	23e99c8 <_Z17EEPROM_Initializev+0xd0>
    time32_t current_time = Time.now();
 23e9902:	f010 f9e3 	bl	23f9ccc <_ZN9TimeClass3nowEv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 23e9906:	4c33      	ldr	r4, [pc, #204]	; (23e99d4 <_Z17EEPROM_Initializev+0xdc>)

    EEPROM.get(eeprom_address, eeprom);
 23e9908:	4e33      	ldr	r6, [pc, #204]	; (23e99d8 <_Z17EEPROM_Initializev+0xe0>)
    time32_t current_time = Time.now();
 23e990a:	4605      	mov	r5, r0
    EEPROM.get(eeprom_address, eeprom);
 23e990c:	f010 fcb0 	bl	23fa270 <_Z21__fetch_global_EEPROMv>
 23e9910:	221c      	movs	r2, #28
 23e9912:	4621      	mov	r1, r4
 23e9914:	6830      	ldr	r0, [r6, #0]
 23e9916:	f00d fe7d 	bl	23f7614 <HAL_EEPROM_Get>

    if (!EEPROM_ChecksumValid()) {
 23e991a:	f7ff ffb9 	bl	23e9890 <_Z20EEPROM_ChecksumValidv>
 23e991e:	b918      	cbnz	r0, 23e9928 <_Z17EEPROM_Initializev+0x30>
          EEPROM.put(eeprom_address, eeprom);
        }
        else {
          // if current time is before 6am and RT time before 6am 2 days ago - EEPROM has no valid data - clear EEPROM
          Output("T<6, RT<6 && RT<=6-2d - Clear");  
          EEPROM_ClearRainTotals(current_time);
 23e9920:	4628      	mov	r0, r5
 23e9922:	f7ff ffc1 	bl	23e98a8 <_Z22EEPROM_ClearRainTotalsl>
 23e9926:	e02b      	b.n	23e9980 <_Z17EEPROM_Initializev+0x88>
      time32_t seconds_today        = current_time % 86400;
 23e9928:	4a2c      	ldr	r2, [pc, #176]	; (23e99dc <_Z17EEPROM_Initializev+0xe4>)
 23e992a:	fb95 f3f2 	sdiv	r3, r5, r2
 23e992e:	fb02 5313 	mls	r3, r2, r3, r5
      time32_t seconds_at_0000      = current_time - seconds_today;
 23e9932:	1aeb      	subs	r3, r5, r3
      time32_t seconds_at_0600      = seconds_at_0000 + 21600;
 23e9934:	f503 40a8 	add.w	r0, r3, #21504	; 0x5400
 23e9938:	3060      	adds	r0, #96	; 0x60
      time32_t seconds_yesterday_at_0600 = seconds_at_0600 - 86400;
 23e993a:	f5a3 417d 	sub.w	r1, r3, #64768	; 0xfd00
      if ((current_time > seconds_at_0600) && (eeprom.rgts > seconds_at_0600)) {
 23e993e:	4285      	cmp	r5, r0
 23e9940:	6922      	ldr	r2, [r4, #16]
      time32_t seconds_yesterday_at_0600 = seconds_at_0600 - 86400;
 23e9942:	f1a1 0120 	sub.w	r1, r1, #32
      if ((current_time > seconds_at_0600) && (eeprom.rgts > seconds_at_0600)) {
 23e9946:	dd1f      	ble.n	23e9988 <_Z17EEPROM_Initializev+0x90>
 23e9948:	4290      	cmp	r0, r2
 23e994a:	da03      	bge.n	23e9954 <_Z17EEPROM_Initializev+0x5c>
        Output("T>6, RT>6 - OK");
 23e994c:	4824      	ldr	r0, [pc, #144]	; (23e99e0 <_Z17EEPROM_Initializev+0xe8>)
          Output("T<6, RT<6 & RT>6 Yesterday - OK");
 23e994e:	f7fd fc49 	bl	23e71e4 <_Z6OutputPKc>
 23e9952:	e00b      	b.n	23e996c <_Z17EEPROM_Initializev+0x74>
      else if ((current_time > seconds_at_0600) && (eeprom.rgts <= seconds_at_0600) && (eeprom.rgts > seconds_yesterday_at_0600)){
 23e9954:	4291      	cmp	r1, r2
 23e9956:	da1b      	bge.n	23e9990 <_Z17EEPROM_Initializev+0x98>
          Output("T>6, RT<=6 &&  RT>6Y- Move");  
 23e9958:	4822      	ldr	r0, [pc, #136]	; (23e99e4 <_Z17EEPROM_Initializev+0xec>)
 23e995a:	f7fd fc43 	bl	23e71e4 <_Z6OutputPKc>
          eeprom.rgp1 = eeprom.rgt1;
 23e995e:	6823      	ldr	r3, [r4, #0]
          eeprom.rgp2 = eeprom.rgt2;
 23e9960:	68a2      	ldr	r2, [r4, #8]
          eeprom.rgp1 = eeprom.rgt1;
 23e9962:	6063      	str	r3, [r4, #4]
          eeprom.rgt1 = 0.0;
 23e9964:	2300      	movs	r3, #0
          eeprom.rgp2 = eeprom.rgt2;
 23e9966:	60e2      	str	r2, [r4, #12]
          eeprom.rgt1 = 0.0;
 23e9968:	6023      	str	r3, [r4, #0]
          eeprom.rgt2 = 0.0;
 23e996a:	60a3      	str	r3, [r4, #8]
          eeprom.rgts = current_time;
 23e996c:	6125      	str	r5, [r4, #16]
          EEPROM_ChecksumUpdate();
 23e996e:	f7ff ff6d 	bl	23e984c <_Z21EEPROM_ChecksumUpdatev>
          EEPROM.put(eeprom_address, eeprom);          
 23e9972:	f010 fc7d 	bl	23fa270 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 23e9976:	221c      	movs	r2, #28
 23e9978:	4621      	mov	r1, r4
 23e997a:	6830      	ldr	r0, [r6, #0]
 23e997c:	f00d fe58 	bl	23f7630 <HAL_EEPROM_Put>
        }
      }
    }
    eeprom_valid = true;
 23e9980:	2201      	movs	r2, #1
 23e9982:	4b19      	ldr	r3, [pc, #100]	; (23e99e8 <_Z17EEPROM_Initializev+0xf0>)
 23e9984:	701a      	strb	r2, [r3, #0]
  }
  else {
    Output("EEPROM INIT ERROR");
  }
}
 23e9986:	bd70      	pop	{r4, r5, r6, pc}
        if (eeprom.rgts > seconds_yesterday_at_0600) {
 23e9988:	4291      	cmp	r1, r2
 23e998a:	da01      	bge.n	23e9990 <_Z17EEPROM_Initializev+0x98>
          Output("T<6, RT<6 & RT>6 Yesterday - OK");
 23e998c:	4817      	ldr	r0, [pc, #92]	; (23e99ec <_Z17EEPROM_Initializev+0xf4>)
 23e998e:	e7de      	b.n	23e994e <_Z17EEPROM_Initializev+0x56>
        else if (eeprom.rgts > (seconds_yesterday_at_0600 - 84600)) { 
 23e9990:	f5a3 3311 	sub.w	r3, r3, #148480	; 0x24400
 23e9994:	f2a3 3397 	subw	r3, r3, #919	; 0x397
 23e9998:	429a      	cmp	r2, r3
 23e999a:	db11      	blt.n	23e99c0 <_Z17EEPROM_Initializev+0xc8>
          Output("T<6, RT<6 && RT>6-2d - Move");  
 23e999c:	4814      	ldr	r0, [pc, #80]	; (23e99f0 <_Z17EEPROM_Initializev+0xf8>)
 23e999e:	f7fd fc21 	bl	23e71e4 <_Z6OutputPKc>
          eeprom.rgp1 = eeprom.rgt1;
 23e99a2:	6823      	ldr	r3, [r4, #0]
          eeprom.rgp2 = eeprom.rgt2;
 23e99a4:	68a2      	ldr	r2, [r4, #8]
          eeprom.rgp1 = eeprom.rgt1;
 23e99a6:	6063      	str	r3, [r4, #4]
          eeprom.rgt1 = 0.0;
 23e99a8:	2300      	movs	r3, #0
          eeprom.rgp2 = eeprom.rgt2;
 23e99aa:	60e2      	str	r2, [r4, #12]
          eeprom.rgt1 = 0.0;
 23e99ac:	6023      	str	r3, [r4, #0]
          eeprom.rgt2 = 0.0;
 23e99ae:	60a3      	str	r3, [r4, #8]
          eeprom.rgts = current_time;
 23e99b0:	6125      	str	r5, [r4, #16]
          EEPROM_ChecksumUpdate();
 23e99b2:	f7ff ff4b 	bl	23e984c <_Z21EEPROM_ChecksumUpdatev>
          EEPROM.put(eeprom_address, eeprom);
 23e99b6:	f010 fc5b 	bl	23fa270 <_Z21__fetch_global_EEPROMv>
 23e99ba:	221c      	movs	r2, #28
 23e99bc:	4905      	ldr	r1, [pc, #20]	; (23e99d4 <_Z17EEPROM_Initializev+0xdc>)
 23e99be:	e7dc      	b.n	23e997a <_Z17EEPROM_Initializev+0x82>
          Output("T<6, RT<6 && RT<=6-2d - Clear");  
 23e99c0:	480c      	ldr	r0, [pc, #48]	; (23e99f4 <_Z17EEPROM_Initializev+0xfc>)
 23e99c2:	f7fd fc0f 	bl	23e71e4 <_Z6OutputPKc>
 23e99c6:	e7ab      	b.n	23e9920 <_Z17EEPROM_Initializev+0x28>
    Output("EEPROM INIT ERROR");
 23e99c8:	480b      	ldr	r0, [pc, #44]	; (23e99f8 <_Z17EEPROM_Initializev+0x100>)
}
 23e99ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Output("EEPROM INIT ERROR");
 23e99ce:	f7fd bc09 	b.w	23e71e4 <_Z6OutputPKc>
 23e99d2:	bf00      	nop
 23e99d4:	1006ae74 	.word	0x1006ae74
 23e99d8:	1006ae90 	.word	0x1006ae90
 23e99dc:	00015180 	.word	0x00015180
 23e99e0:	023fd96d 	.word	0x023fd96d
 23e99e4:	023fd97c 	.word	0x023fd97c
 23e99e8:	1006ae94 	.word	0x1006ae94
 23e99ec:	023fd997 	.word	0x023fd997
 23e99f0:	023fd9b7 	.word	0x023fd9b7
 23e99f4:	023fd9d3 	.word	0x023fd9d3
 23e99f8:	023fd9f1 	.word	0x023fd9f1

023e99fc <_Z23EEPROM_UpdateRainTotalsff>:
/* 
 *=======================================================================================================================
 * EEPROM_UpdateRainTotals() - 
 *=======================================================================================================================
 */
void EEPROM_UpdateRainTotals(float rgt1, float rgt2) {
 23e99fc:	b510      	push	{r4, lr}
 23e99fe:	ed2d 8b02 	vpush	{d8}
  if (eeprom_valid) {
 23e9a02:	4b2f      	ldr	r3, [pc, #188]	; (23e9ac0 <_Z23EEPROM_UpdateRainTotalsff+0xc4>)
void EEPROM_UpdateRainTotals(float rgt1, float rgt2) {
 23e9a04:	eeb0 8a40 	vmov.f32	s16, s0
  if (eeprom_valid) {
 23e9a08:	781b      	ldrb	r3, [r3, #0]
void EEPROM_UpdateRainTotals(float rgt1, float rgt2) {
 23e9a0a:	eef0 8a60 	vmov.f32	s17, s1
  if (eeprom_valid) {
 23e9a0e:	2b00      	cmp	r3, #0
 23e9a10:	d053      	beq.n	23e9aba <_Z23EEPROM_UpdateRainTotalsff+0xbe>
    time32_t current_time     = Time.now();
 23e9a12:	f010 f95b 	bl	23f9ccc <_ZN9TimeClass3nowEv>
    time32_t seconds_at_0600  = current_time - (current_time % 86400) + 21600; // time - seconds so far today + seconds to 0600
 23e9a16:	4b2b      	ldr	r3, [pc, #172]	; (23e9ac4 <_Z23EEPROM_UpdateRainTotalsff+0xc8>)
 23e9a18:	492b      	ldr	r1, [pc, #172]	; (23e9ac8 <_Z23EEPROM_UpdateRainTotalsff+0xcc>)
 23e9a1a:	fb90 f2f3 	sdiv	r2, r0, r3
 23e9a1e:	fb03 0212 	mls	r2, r3, r2, r0
 23e9a22:	1a82      	subs	r2, r0, r2
 23e9a24:	f502 42a8 	add.w	r2, r2, #21504	; 0x5400
 23e9a28:	3260      	adds	r2, #96	; 0x60

    if ((current_time > seconds_at_0600) && (eeprom.rgts <= seconds_at_0600)) {
 23e9a2a:	4290      	cmp	r0, r2
 23e9a2c:	4b27      	ldr	r3, [pc, #156]	; (23e9acc <_Z23EEPROM_UpdateRainTotalsff+0xd0>)
 23e9a2e:	dd28      	ble.n	23e9a82 <_Z23EEPROM_UpdateRainTotalsff+0x86>
 23e9a30:	691c      	ldr	r4, [r3, #16]
 23e9a32:	42a2      	cmp	r2, r4
 23e9a34:	db25      	blt.n	23e9a82 <_Z23EEPROM_UpdateRainTotalsff+0x86>
      // if rgts is before 0600 then we need to move today's totals to prior day
      eeprom.rgp1 = eeprom.rgt1;
 23e9a36:	681a      	ldr	r2, [r3, #0]
      eeprom.rgt1 = 0;

      if (A4_State == A4_STATE_RAIN) {
 23e9a38:	680c      	ldr	r4, [r1, #0]
      eeprom.rgp1 = eeprom.rgt1;
 23e9a3a:	605a      	str	r2, [r3, #4]
      eeprom.rgt1 = 0;
 23e9a3c:	2200      	movs	r2, #0
      if (A4_State == A4_STATE_RAIN) {
 23e9a3e:	2c02      	cmp	r4, #2
      eeprom.rgt1 = 0;
 23e9a40:	601a      	str	r2, [r3, #0]
      if (A4_State == A4_STATE_RAIN) {
 23e9a42:	d134      	bne.n	23e9aae <_Z23EEPROM_UpdateRainTotalsff+0xb2>
        eeprom.rgt2 = 0;
      }
    }

    // Only add valid rain to the total
    if (rgt1>0) {
 23e9a44:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 23e9a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        eeprom.rgp2 = eeprom.rgt2;
 23e9a4c:	689c      	ldr	r4, [r3, #8]
        eeprom.rgt2 = 0;
 23e9a4e:	609a      	str	r2, [r3, #8]
        eeprom.rgp2 = eeprom.rgt2;
 23e9a50:	60dc      	str	r4, [r3, #12]
    if (rgt1>0) {
 23e9a52:	dc1b      	bgt.n	23e9a8c <_Z23EEPROM_UpdateRainTotalsff+0x90>
      eeprom.rgt1 += rgt1;
    }
    if ((A4_State == A4_STATE_RAIN) && (rgt2>0)) {
 23e9a54:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 23e9a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9a5c:	dc20      	bgt.n	23e9aa0 <_Z23EEPROM_UpdateRainTotalsff+0xa4>
      eeprom.rgt2 += rgt2;
    }

    eeprom.rgts = current_time;
 23e9a5e:	6118      	str	r0, [r3, #16]
    EEPROM_ChecksumUpdate();
 23e9a60:	f7ff fef4 	bl	23e984c <_Z21EEPROM_ChecksumUpdatev>
    EEPROM.put(eeprom_address, eeprom);
 23e9a64:	f010 fc04 	bl	23fa270 <_Z21__fetch_global_EEPROMv>
 23e9a68:	4b19      	ldr	r3, [pc, #100]	; (23e9ad0 <_Z23EEPROM_UpdateRainTotalsff+0xd4>)
 23e9a6a:	221c      	movs	r2, #28
 23e9a6c:	6818      	ldr	r0, [r3, #0]
 23e9a6e:	4917      	ldr	r1, [pc, #92]	; (23e9acc <_Z23EEPROM_UpdateRainTotalsff+0xd0>)
 23e9a70:	f00d fdde 	bl	23f7630 <HAL_EEPROM_Put>
    Output("EEPROM RT UPDATED");
  }
}
 23e9a74:	ecbd 8b02 	vpop	{d8}
 23e9a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Output("EEPROM RT UPDATED");
 23e9a7c:	4815      	ldr	r0, [pc, #84]	; (23e9ad4 <_Z23EEPROM_UpdateRainTotalsff+0xd8>)
 23e9a7e:	f7fd bbb1 	b.w	23e71e4 <_Z6OutputPKc>
    if (rgt1>0) {
 23e9a82:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 23e9a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9a8a:	dd05      	ble.n	23e9a98 <_Z23EEPROM_UpdateRainTotalsff+0x9c>
      eeprom.rgt1 += rgt1;
 23e9a8c:	ed93 0a00 	vldr	s0, [r3]
 23e9a90:	ee30 8a08 	vadd.f32	s16, s0, s16
 23e9a94:	ed83 8a00 	vstr	s16, [r3]
    if ((A4_State == A4_STATE_RAIN) && (rgt2>0)) {
 23e9a98:	680a      	ldr	r2, [r1, #0]
 23e9a9a:	2a02      	cmp	r2, #2
 23e9a9c:	d1df      	bne.n	23e9a5e <_Z23EEPROM_UpdateRainTotalsff+0x62>
 23e9a9e:	e7d9      	b.n	23e9a54 <_Z23EEPROM_UpdateRainTotalsff+0x58>
      eeprom.rgt2 += rgt2;
 23e9aa0:	edd3 0a02 	vldr	s1, [r3, #8]
 23e9aa4:	ee70 8aa8 	vadd.f32	s17, s1, s17
 23e9aa8:	edc3 8a02 	vstr	s17, [r3, #8]
 23e9aac:	e7d7      	b.n	23e9a5e <_Z23EEPROM_UpdateRainTotalsff+0x62>
    if (rgt1>0) {
 23e9aae:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 23e9ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9ab6:	dce9      	bgt.n	23e9a8c <_Z23EEPROM_UpdateRainTotalsff+0x90>
 23e9ab8:	e7d1      	b.n	23e9a5e <_Z23EEPROM_UpdateRainTotalsff+0x62>
}
 23e9aba:	ecbd 8b02 	vpop	{d8}
 23e9abe:	bd10      	pop	{r4, pc}
 23e9ac0:	1006ae94 	.word	0x1006ae94
 23e9ac4:	00015180 	.word	0x00015180
 23e9ac8:	1006a294 	.word	0x1006a294
 23e9acc:	1006ae74 	.word	0x1006ae74
 23e9ad0:	1006ae90 	.word	0x1006ae90
 23e9ad4:	023fda03 	.word	0x023fda03

023e9ad8 <_Z25EEPROM_SaveUnreportedRainv>:
/* 
 *=======================================================================================================================
 * EEPROM_SaveUnreportedRain() - 
 *=======================================================================================================================
 */
void EEPROM_SaveUnreportedRain() {
 23e9ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23e9ada:	ed2d 8b02 	vpush	{d8}
  if (raingauge1_interrupt_count || ((A4_State == A4_STATE_RAIN) && raingauge2_interrupt_count)) {
 23e9ade:	4b4e      	ldr	r3, [pc, #312]	; (23e9c18 <_Z25EEPROM_SaveUnreportedRainv+0x140>)
 23e9ae0:	4f4e      	ldr	r7, [pc, #312]	; (23e9c1c <_Z25EEPROM_SaveUnreportedRainv+0x144>)
 23e9ae2:	681a      	ldr	r2, [r3, #0]
 23e9ae4:	b942      	cbnz	r2, 23e9af8 <_Z25EEPROM_SaveUnreportedRainv+0x20>
 23e9ae6:	683a      	ldr	r2, [r7, #0]
 23e9ae8:	2a02      	cmp	r2, #2
 23e9aea:	f040 808e 	bne.w	23e9c0a <_Z25EEPROM_SaveUnreportedRainv+0x132>
 23e9aee:	4a4c      	ldr	r2, [pc, #304]	; (23e9c20 <_Z25EEPROM_SaveUnreportedRainv+0x148>)
 23e9af0:	6812      	ldr	r2, [r2, #0]
 23e9af2:	2a00      	cmp	r2, #0
 23e9af4:	f000 8089 	beq.w	23e9c0a <_Z25EEPROM_SaveUnreportedRainv+0x132>
    unsigned long rgds;     // rain gauge delta seconds, seconds since last rain gauge observation logged
    unsigned long rg2ds = 0;     // rain gauge delta seconds, seconds since last rain gauge observation logged
    float rain2 = 0.0;

    float rain = raingauge1_interrupt_count * 0.2;
 23e9af8:	6818      	ldr	r0, [r3, #0]
 23e9afa:	f7fb fbc3 	bl	23e5284 <__aeabi_ui2d>
 23e9afe:	a344      	add	r3, pc, #272	; (adr r3, 23e9c10 <_Z25EEPROM_SaveUnreportedRainv+0x138>)
 23e9b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e9b04:	f7fb fc38 	bl	23e5378 <__aeabi_dmul>
 23e9b08:	f7fb ff2e 	bl	23e5968 <__aeabi_d2f>
 23e9b0c:	ee08 0a90 	vmov	s17, r0
    rgds = (System.millis()-raingauge1_interrupt_stime)/1000;  // seconds since last rain gauge observation logged
 23e9b10:	f7fd f86c 	bl	23e6bec <_ZN11SystemClass6millisEv>
 23e9b14:	4a43      	ldr	r2, [pc, #268]	; (23e9c24 <_Z25EEPROM_SaveUnreportedRainv+0x14c>)
 23e9b16:	e9d2 3400 	ldrd	r3, r4, [r2]
 23e9b1a:	1ac0      	subs	r0, r0, r3
 23e9b1c:	eb61 0104 	sbc.w	r1, r1, r4
 23e9b20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23e9b24:	2300      	movs	r3, #0
 23e9b26:	f7fc f8cd 	bl	23e5cc4 <__aeabi_uldivmod>
    rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
 23e9b2a:	eef4 8a68 	vcmp.f32	s17, s17
 23e9b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    rgds = (System.millis()-raingauge1_interrupt_stime)/1000;  // seconds since last rain gauge observation logged
 23e9b32:	4606      	mov	r6, r0
    rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
 23e9b34:	d660      	bvs.n	23e9bf8 <_Z25EEPROM_SaveUnreportedRainv+0x120>
 23e9b36:	ee18 0a90 	vmov	r0, s17
 23e9b3a:	f7fb fbc5 	bl	23e52c8 <__aeabi_f2d>
 23e9b3e:	4604      	mov	r4, r0
 23e9b40:	203c      	movs	r0, #60	; 0x3c
 23e9b42:	fbb6 f0f0 	udiv	r0, r6, r0
 23e9b46:	460d      	mov	r5, r1
 23e9b48:	f7fb fb9c 	bl	23e5284 <__aeabi_ui2d>
 23e9b4c:	2200      	movs	r2, #0
 23e9b4e:	4b36      	ldr	r3, [pc, #216]	; (23e9c28 <_Z25EEPROM_SaveUnreportedRainv+0x150>)
 23e9b50:	f7fb fc12 	bl	23e5378 <__aeabi_dmul>
 23e9b54:	4602      	mov	r2, r0
 23e9b56:	460b      	mov	r3, r1
 23e9b58:	4620      	mov	r0, r4
 23e9b5a:	4629      	mov	r1, r5
 23e9b5c:	f7fb fe9c 	bl	23e5898 <__aeabi_dcmpgt>
 23e9b60:	eddf 7a32 	vldr	s15, [pc, #200]	; 23e9c2c <_Z25EEPROM_SaveUnreportedRainv+0x154>
 23e9b64:	2800      	cmp	r0, #0
 23e9b66:	fe48 8aa7 	vseleq.f32	s17, s17, s15
    
    if (A4_State == A4_STATE_RAIN) {
 23e9b6a:	683b      	ldr	r3, [r7, #0]
 23e9b6c:	2b02      	cmp	r3, #2
 23e9b6e:	d146      	bne.n	23e9bfe <_Z25EEPROM_SaveUnreportedRainv+0x126>
      rain2 = raingauge2_interrupt_count * 0.2;
 23e9b70:	4b2b      	ldr	r3, [pc, #172]	; (23e9c20 <_Z25EEPROM_SaveUnreportedRainv+0x148>)
 23e9b72:	6818      	ldr	r0, [r3, #0]
 23e9b74:	f7fb fb86 	bl	23e5284 <__aeabi_ui2d>
 23e9b78:	a325      	add	r3, pc, #148	; (adr r3, 23e9c10 <_Z25EEPROM_SaveUnreportedRainv+0x138>)
 23e9b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e9b7e:	f7fb fbfb 	bl	23e5378 <__aeabi_dmul>
 23e9b82:	f7fb fef1 	bl	23e5968 <__aeabi_d2f>
 23e9b86:	ee08 0a10 	vmov	s16, r0
      rg2ds = (System.millis()-raingauge2_interrupt_stime)/1000;  // seconds since last rain gauge observation logged
 23e9b8a:	f7fd f82f 	bl	23e6bec <_ZN11SystemClass6millisEv>
 23e9b8e:	4a28      	ldr	r2, [pc, #160]	; (23e9c30 <_Z25EEPROM_SaveUnreportedRainv+0x158>)
 23e9b90:	e9d2 3400 	ldrd	r3, r4, [r2]
 23e9b94:	1ac0      	subs	r0, r0, r3
 23e9b96:	eb61 0104 	sbc.w	r1, r1, r4
 23e9b9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23e9b9e:	2300      	movs	r3, #0
 23e9ba0:	f7fc f890 	bl	23e5cc4 <__aeabi_uldivmod>
      rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
 23e9ba4:	eeb4 8a48 	vcmp.f32	s16, s16
 23e9ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      rg2ds = (System.millis()-raingauge2_interrupt_stime)/1000;  // seconds since last rain gauge observation logged
 23e9bac:	4606      	mov	r6, r0
      rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
 23e9bae:	d629      	bvs.n	23e9c04 <_Z25EEPROM_SaveUnreportedRainv+0x12c>
 23e9bb0:	ee18 0a10 	vmov	r0, s16
 23e9bb4:	f7fb fb88 	bl	23e52c8 <__aeabi_f2d>
 23e9bb8:	4604      	mov	r4, r0
 23e9bba:	203c      	movs	r0, #60	; 0x3c
 23e9bbc:	fbb6 f0f0 	udiv	r0, r6, r0
 23e9bc0:	460d      	mov	r5, r1
 23e9bc2:	f7fb fb5f 	bl	23e5284 <__aeabi_ui2d>
 23e9bc6:	2200      	movs	r2, #0
 23e9bc8:	4b17      	ldr	r3, [pc, #92]	; (23e9c28 <_Z25EEPROM_SaveUnreportedRainv+0x150>)
 23e9bca:	f7fb fbd5 	bl	23e5378 <__aeabi_dmul>
 23e9bce:	4602      	mov	r2, r0
 23e9bd0:	460b      	mov	r3, r1
 23e9bd2:	4620      	mov	r0, r4
 23e9bd4:	4629      	mov	r1, r5
 23e9bd6:	f7fb fe5f 	bl	23e5898 <__aeabi_dcmpgt>
 23e9bda:	eddf 7a14 	vldr	s15, [pc, #80]	; 23e9c2c <_Z25EEPROM_SaveUnreportedRainv+0x154>
 23e9bde:	2800      	cmp	r0, #0
 23e9be0:	fe08 8a27 	vseleq.f32	s16, s16, s15
    }

    EEPROM_UpdateRainTotals(rain, rain2);
 23e9be4:	eef0 0a48 	vmov.f32	s1, s16
 23e9be8:	eeb0 0a68 	vmov.f32	s0, s17
  }
}
 23e9bec:	ecbd 8b02 	vpop	{d8}
 23e9bf0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    EEPROM_UpdateRainTotals(rain, rain2);
 23e9bf4:	f7ff bf02 	b.w	23e99fc <_Z23EEPROM_UpdateRainTotalsff>
    rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
 23e9bf8:	eddf 8a0c 	vldr	s17, [pc, #48]	; 23e9c2c <_Z25EEPROM_SaveUnreportedRainv+0x154>
 23e9bfc:	e7b5      	b.n	23e9b6a <_Z25EEPROM_SaveUnreportedRainv+0x92>
    float rain2 = 0.0;
 23e9bfe:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 23e9c34 <_Z25EEPROM_SaveUnreportedRainv+0x15c>
 23e9c02:	e7ef      	b.n	23e9be4 <_Z25EEPROM_SaveUnreportedRainv+0x10c>
      rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
 23e9c04:	ed9f 8a09 	vldr	s16, [pc, #36]	; 23e9c2c <_Z25EEPROM_SaveUnreportedRainv+0x154>
 23e9c08:	e7ec      	b.n	23e9be4 <_Z25EEPROM_SaveUnreportedRainv+0x10c>
}
 23e9c0a:	ecbd 8b02 	vpop	{d8}
 23e9c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23e9c10:	9999999a 	.word	0x9999999a
 23e9c14:	3fc99999 	.word	0x3fc99999
 23e9c18:	1007aa5c 	.word	0x1007aa5c
 23e9c1c:	1006a294 	.word	0x1006a294
 23e9c20:	1007aa70 	.word	0x1007aa70
 23e9c24:	1007aa68 	.word	0x1007aa68
 23e9c28:	403e0000 	.word	0x403e0000
 23e9c2c:	c479f99a 	.word	0xc479f99a
 23e9c30:	1007aa80 	.word	0x1007aa80
 23e9c34:	00000000 	.word	0x00000000

023e9c38 <_Z13EEPROM_Updatev>:
/* 
 *=======================================================================================================================
 * EEPROM_Update() - Check status of EEPROM information and determine status
 *=======================================================================================================================
 */
void EEPROM_Update() {
 23e9c38:	b510      	push	{r4, lr}
  if (eeprom_valid && Time.isValid()) {
 23e9c3a:	4b0d      	ldr	r3, [pc, #52]	; (23e9c70 <_Z13EEPROM_Updatev+0x38>)
 23e9c3c:	781b      	ldrb	r3, [r3, #0]
 23e9c3e:	b1ab      	cbz	r3, 23e9c6c <_Z13EEPROM_Updatev+0x34>
 23e9c40:	f010 f827 	bl	23f9c92 <_ZN9TimeClass7isValidEv>
 23e9c44:	b190      	cbz	r0, 23e9c6c <_Z13EEPROM_Updatev+0x34>
    eeprom.rgts = Time.now();
 23e9c46:	f010 f841 	bl	23f9ccc <_ZN9TimeClass3nowEv>
 23e9c4a:	4c0a      	ldr	r4, [pc, #40]	; (23e9c74 <_Z13EEPROM_Updatev+0x3c>)
 23e9c4c:	6120      	str	r0, [r4, #16]
    EEPROM_ChecksumUpdate();
 23e9c4e:	f7ff fdfd 	bl	23e984c <_Z21EEPROM_ChecksumUpdatev>
    EEPROM.put(eeprom_address, eeprom);
 23e9c52:	f010 fb0d 	bl	23fa270 <_Z21__fetch_global_EEPROMv>
 23e9c56:	4b08      	ldr	r3, [pc, #32]	; (23e9c78 <_Z13EEPROM_Updatev+0x40>)
 23e9c58:	4621      	mov	r1, r4
 23e9c5a:	6818      	ldr	r0, [r3, #0]
 23e9c5c:	221c      	movs	r2, #28
 23e9c5e:	f00d fce7 	bl	23f7630 <HAL_EEPROM_Put>
    Output("EEPROM UPDATED");
  }
}
 23e9c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Output("EEPROM UPDATED");
 23e9c66:	4805      	ldr	r0, [pc, #20]	; (23e9c7c <_Z13EEPROM_Updatev+0x44>)
 23e9c68:	f7fd babc 	b.w	23e71e4 <_Z6OutputPKc>
}
 23e9c6c:	bd10      	pop	{r4, pc}
 23e9c6e:	bf00      	nop
 23e9c70:	1006ae94 	.word	0x1006ae94
 23e9c74:	1006ae74 	.word	0x1006ae74
 23e9c78:	1006ae90 	.word	0x1006ae90
 23e9c7c:	023fda15 	.word	0x023fda15

023e9c80 <_Z11EEPROM_Dumpv>:
/* 
 *=======================================================================================================================
 * EEPROM_Dump() - 
 *=======================================================================================================================
 */
void EEPROM_Dump() {
 23e9c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23e9c82:	ed2d 8b02 	vpush	{d8}
  size_t EEPROM_length = EEPROM.length();
 23e9c86:	f010 faf3 	bl	23fa270 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }
 23e9c8a:	f00d fcb5 	bl	23f75f8 <HAL_EEPROM_Length>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 23e9c8e:	4d4e      	ldr	r5, [pc, #312]	; (23e9dc8 <_Z11EEPROM_Dumpv+0x148>)
    uint16_t length()                    { return HAL_EEPROM_Length(); }
 23e9c90:	4604      	mov	r4, r0

  EEPROM.get(eeprom_address, eeprom);
 23e9c92:	f010 faed 	bl	23fa270 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 23e9c96:	4b4d      	ldr	r3, [pc, #308]	; (23e9dcc <_Z11EEPROM_Dumpv+0x14c>)
 23e9c98:	4629      	mov	r1, r5
 23e9c9a:	6818      	ldr	r0, [r3, #0]
 23e9c9c:	221c      	movs	r2, #28
 23e9c9e:	f00d fcb9 	bl	23f7614 <HAL_EEPROM_Get>

  unsigned long checksum = EEPROM_ChecksumCompute();
 23e9ca2:	f7ff fdaf 	bl	23e9804 <_Z22EEPROM_ChecksumComputev>

  Output("EEPROM DUMP");

  sprintf (msgbuf, " LEN:%d", EEPROM_length);
 23e9ca6:	4e4a      	ldr	r6, [pc, #296]	; (23e9dd0 <_Z11EEPROM_Dumpv+0x150>)
  unsigned long checksum = EEPROM_ChecksumCompute();
 23e9ca8:	4607      	mov	r7, r0
  Output("EEPROM DUMP");
 23e9caa:	484a      	ldr	r0, [pc, #296]	; (23e9dd4 <_Z11EEPROM_Dumpv+0x154>)
 23e9cac:	f7fd fa9a 	bl	23e71e4 <_Z6OutputPKc>
  sprintf (msgbuf, " LEN:%d", EEPROM_length);
 23e9cb0:	b2a2      	uxth	r2, r4
 23e9cb2:	4949      	ldr	r1, [pc, #292]	; (23e9dd8 <_Z11EEPROM_Dumpv+0x158>)
 23e9cb4:	4630      	mov	r0, r6
 23e9cb6:	f00e fa6b 	bl	23f8190 <sprintf>
  Output(msgbuf);
 23e9cba:	4630      	mov	r0, r6
 23e9cbc:	f7fd fa92 	bl	23e71e4 <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " RT1:%d.%02d", 
    (int)eeprom.rgt1, (int)(eeprom.rgt1*100)%100); 
 23e9cc0:	ed9f 8a46 	vldr	s16, [pc, #280]	; 23e9ddc <_Z11EEPROM_Dumpv+0x15c>
 23e9cc4:	ed95 7a00 	vldr	s14, [r5]
 23e9cc8:	ee67 7a08 	vmul.f32	s15, s14, s16
 23e9ccc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  sprintf (Buffer32Bytes, " RT1:%d.%02d", 
 23e9cd0:	2664      	movs	r6, #100	; 0x64
    (int)eeprom.rgt1, (int)(eeprom.rgt1*100)%100); 
 23e9cd2:	ee17 3a90 	vmov	r3, s15
  sprintf (Buffer32Bytes, " RT1:%d.%02d", 
 23e9cd6:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 23e9cda:	fb93 f2f6 	sdiv	r2, r3, r6
 23e9cde:	4c40      	ldr	r4, [pc, #256]	; (23e9de0 <_Z11EEPROM_Dumpv+0x160>)
 23e9ce0:	fb06 3312 	mls	r3, r6, r2, r3
 23e9ce4:	493f      	ldr	r1, [pc, #252]	; (23e9de4 <_Z11EEPROM_Dumpv+0x164>)
 23e9ce6:	ee17 2a90 	vmov	r2, s15
 23e9cea:	4620      	mov	r0, r4
 23e9cec:	f00e fa50 	bl	23f8190 <sprintf>
  Output (Buffer32Bytes);
 23e9cf0:	4620      	mov	r0, r4
 23e9cf2:	f7fd fa77 	bl	23e71e4 <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " RP1:%d.%02d", 
  (int)eeprom.rgp1, (int)(eeprom.rgp1*100)%100); 
 23e9cf6:	ed95 7a01 	vldr	s14, [r5, #4]
 23e9cfa:	ee67 7a08 	vmul.f32	s15, s14, s16
 23e9cfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23e9d02:	ee17 3a90 	vmov	r3, s15
  sprintf (Buffer32Bytes, " RP1:%d.%02d", 
 23e9d06:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 23e9d0a:	fb93 f2f6 	sdiv	r2, r3, r6
 23e9d0e:	4936      	ldr	r1, [pc, #216]	; (23e9de8 <_Z11EEPROM_Dumpv+0x168>)
 23e9d10:	fb06 3312 	mls	r3, r6, r2, r3
 23e9d14:	4620      	mov	r0, r4
 23e9d16:	ee17 2a90 	vmov	r2, s15
 23e9d1a:	f00e fa39 	bl	23f8190 <sprintf>
  Output (Buffer32Bytes);
 23e9d1e:	4620      	mov	r0, r4
 23e9d20:	f7fd fa60 	bl	23e71e4 <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " RT2:%d.%02d", 
    (int)eeprom.rgt2, (int)(eeprom.rgt2*100)%100); 
 23e9d24:	ed95 7a02 	vldr	s14, [r5, #8]
 23e9d28:	ee67 7a08 	vmul.f32	s15, s14, s16
 23e9d2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23e9d30:	ee17 3a90 	vmov	r3, s15
  sprintf (Buffer32Bytes, " RT2:%d.%02d", 
 23e9d34:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 23e9d38:	fb93 f2f6 	sdiv	r2, r3, r6
 23e9d3c:	492b      	ldr	r1, [pc, #172]	; (23e9dec <_Z11EEPROM_Dumpv+0x16c>)
 23e9d3e:	fb06 3312 	mls	r3, r6, r2, r3
 23e9d42:	4620      	mov	r0, r4
 23e9d44:	ee17 2a90 	vmov	r2, s15
 23e9d48:	f00e fa22 	bl	23f8190 <sprintf>
  Output (Buffer32Bytes);
 23e9d4c:	4620      	mov	r0, r4
 23e9d4e:	f7fd fa49 	bl	23e71e4 <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " RP2:%d.%02d", 
  (int)eeprom.rgp2, (int)(eeprom.rgp2*100)%100); 
 23e9d52:	edd5 7a03 	vldr	s15, [r5, #12]
 23e9d56:	ee27 8a88 	vmul.f32	s16, s15, s16
 23e9d5a:	eebd 7ac8 	vcvt.s32.f32	s14, s16
 23e9d5e:	ee17 3a10 	vmov	r3, s14
  sprintf (Buffer32Bytes, " RP2:%d.%02d", 
 23e9d62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23e9d66:	fb93 f2f6 	sdiv	r2, r3, r6
 23e9d6a:	4921      	ldr	r1, [pc, #132]	; (23e9df0 <_Z11EEPROM_Dumpv+0x170>)
 23e9d6c:	fb06 3312 	mls	r3, r6, r2, r3
 23e9d70:	4620      	mov	r0, r4
 23e9d72:	ee17 2a90 	vmov	r2, s15
 23e9d76:	f00e fa0b 	bl	23f8190 <sprintf>
  Output (Buffer32Bytes);
 23e9d7a:	4620      	mov	r0, r4
 23e9d7c:	f7fd fa32 	bl	23e71e4 <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " RGTS:%lu", eeprom.rgts);
 23e9d80:	692a      	ldr	r2, [r5, #16]
 23e9d82:	491c      	ldr	r1, [pc, #112]	; (23e9df4 <_Z11EEPROM_Dumpv+0x174>)
 23e9d84:	4620      	mov	r0, r4
 23e9d86:	f00e fa03 	bl	23f8190 <sprintf>
  Output (Buffer32Bytes);
 23e9d8a:	4620      	mov	r0, r4
 23e9d8c:	f7fd fa2a 	bl	23e71e4 <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " N2SFP:%lu", eeprom.n2sfp);
 23e9d90:	696a      	ldr	r2, [r5, #20]
 23e9d92:	4919      	ldr	r1, [pc, #100]	; (23e9df8 <_Z11EEPROM_Dumpv+0x178>)
 23e9d94:	4620      	mov	r0, r4
 23e9d96:	f00e f9fb 	bl	23f8190 <sprintf>
  Output (Buffer32Bytes);
 23e9d9a:	4620      	mov	r0, r4
 23e9d9c:	f7fd fa22 	bl	23e71e4 <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " CS:%lu", eeprom.checksum);
 23e9da0:	69aa      	ldr	r2, [r5, #24]
 23e9da2:	4916      	ldr	r1, [pc, #88]	; (23e9dfc <_Z11EEPROM_Dumpv+0x17c>)
 23e9da4:	4620      	mov	r0, r4
 23e9da6:	f00e f9f3 	bl	23f8190 <sprintf>
  Output (Buffer32Bytes);
 23e9daa:	4620      	mov	r0, r4
 23e9dac:	f7fd fa1a 	bl	23e71e4 <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " CSC:%lu", checksum);
 23e9db0:	463a      	mov	r2, r7
 23e9db2:	4620      	mov	r0, r4
 23e9db4:	4912      	ldr	r1, [pc, #72]	; (23e9e00 <_Z11EEPROM_Dumpv+0x180>)
 23e9db6:	f00e f9eb 	bl	23f8190 <sprintf>
  Output (Buffer32Bytes);
}
 23e9dba:	ecbd 8b02 	vpop	{d8}
  Output (Buffer32Bytes);
 23e9dbe:	4620      	mov	r0, r4
}
 23e9dc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  Output (Buffer32Bytes);
 23e9dc4:	f7fd ba0e 	b.w	23e71e4 <_Z6OutputPKc>
 23e9dc8:	1006ae74 	.word	0x1006ae74
 23e9dcc:	1006ae90 	.word	0x1006ae90
 23e9dd0:	1006f140 	.word	0x1006f140
 23e9dd4:	023fda24 	.word	0x023fda24
 23e9dd8:	023fda30 	.word	0x023fda30
 23e9ddc:	42c80000 	.word	0x42c80000
 23e9de0:	1006a2bf 	.word	0x1006a2bf
 23e9de4:	023fda38 	.word	0x023fda38
 23e9de8:	023fda45 	.word	0x023fda45
 23e9dec:	023fda52 	.word	0x023fda52
 23e9df0:	023fda5f 	.word	0x023fda5f
 23e9df4:	023fda6c 	.word	0x023fda6c
 23e9df8:	023fda76 	.word	0x023fda76
 23e9dfc:	023fda81 	.word	0x023fda81
 23e9e00:	023fda89 	.word	0x023fda89

023e9e04 <_Z13SD_initializev>:
/* 
 *=======================================================================================================================
 * SD_initialize()
 *=======================================================================================================================
 */
void SD_initialize() {
 23e9e04:	b570      	push	{r4, r5, r6, lr}

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23e9e06:	4c41      	ldr	r4, [pc, #260]	; (23e9f0c <_Z13SD_initializev+0x108>)
 23e9e08:	b092      	sub	sp, #72	; 0x48
 23e9e0a:	e8d4 1f8f 	ldab	r1, [r4]
 23e9e0e:	f011 0101 	ands.w	r1, r1, #1
 23e9e12:	d10b      	bne.n	23e9e2c <_Z13SD_initializev+0x28>
 23e9e14:	4620      	mov	r0, r4
 23e9e16:	9103      	str	r1, [sp, #12]
 23e9e18:	f00e fa38 	bl	23f828c <__cxa_guard_acquire>
 23e9e1c:	9903      	ldr	r1, [sp, #12]
 23e9e1e:	b128      	cbz	r0, 23e9e2c <_Z13SD_initializev+0x28>
 23e9e20:	483b      	ldr	r0, [pc, #236]	; (23e9f10 <_Z13SD_initializev+0x10c>)
 23e9e22:	f00f fcd5 	bl	23f97d0 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23e9e26:	4620      	mov	r0, r4
 23e9e28:	f00e fa3e 	bl	23f82a8 <__cxa_guard_release>
  /** Initialize SD card in SPI mode.
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
 23e9e2c:	2305      	movs	r3, #5
 23e9e2e:	f8ad 3010 	strh.w	r3, [sp, #16]
 23e9e32:	4b38      	ldr	r3, [pc, #224]	; (23e9f14 <_Z13SD_initializev+0x110>)
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer or nullptr if failure.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
 23e9e34:	4c38      	ldr	r4, [pc, #224]	; (23e9f18 <_Z13SD_initializev+0x114>)
 23e9e36:	9305      	str	r3, [sp, #20]
 23e9e38:	4b35      	ldr	r3, [pc, #212]	; (23e9f10 <_Z13SD_initializev+0x10c>)
 23e9e3a:	f204 468c 	addw	r6, r4, #1164	; 0x48c
 23e9e3e:	9306      	str	r3, [sp, #24]
 23e9e40:	ad04      	add	r5, sp, #16
 23e9e42:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 23e9e46:	4630      	mov	r0, r6
 23e9e48:	f00b faa8 	bl	23f539c <_ZN9SdSpiCard5beginE11SdSpiConfig>
    m_card = m_cardFactory.newCard(spiConfig);
    return m_card && !m_card->errorCode();
 23e9e4c:	f894 34a7 	ldrb.w	r3, [r4, #1191]	; 0x4a7
    m_card = m_cardFactory.newCard(spiConfig);
 23e9e50:	f8c4 6488 	str.w	r6, [r4, #1160]	; 0x488
    return m_card && !m_card->errorCode();
 23e9e54:	bb63      	cbnz	r3, 23e9eb0 <_Z13SD_initializev+0xac>
  /** Initialize file system after call to cardBegin.
   *
   * \return true for success or false for failure.
   */
  bool volumeBegin() {
    return Vol::begin(m_card) || Vol::begin(m_card, true, 0);
 23e9e56:	9300      	str	r3, [sp, #0]
 23e9e58:	2301      	movs	r3, #1
 23e9e5a:	4631      	mov	r1, r6
 23e9e5c:	461a      	mov	r2, r3
 23e9e5e:	4620      	mov	r0, r4
 23e9e60:	f00d fa2c 	bl	23f72bc <_ZN8FsVolume5beginEP9SdSpiCardbhm>
 23e9e64:	4603      	mov	r3, r0
 23e9e66:	b938      	cbnz	r0, 23e9e78 <_Z13SD_initializev+0x74>
 23e9e68:	9000      	str	r0, [sp, #0]
 23e9e6a:	2201      	movs	r2, #1
 23e9e6c:	4620      	mov	r0, r4
 23e9e6e:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
 23e9e72:	f00d fa23 	bl	23f72bc <_ZN8FsVolume5beginEP9SdSpiCardbhm>
 23e9e76:	b1d8      	cbz	r0, 23e9eb0 <_Z13SD_initializev+0xac>
    Output ("SD:NF");
    SystemStatusBits |= SSB_SD;
    delay (5000);
  }
  else {
    if (!SD.exists(SD_obsdir)) {
 23e9e78:	4928      	ldr	r1, [pc, #160]	; (23e9f1c <_Z13SD_initializev+0x118>)
 23e9e7a:	4827      	ldr	r0, [pc, #156]	; (23e9f18 <_Z13SD_initializev+0x114>)
 23e9e7c:	f7fc ff18 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23e9e80:	2800      	cmp	r0, #0
 23e9e82:	d13d      	bne.n	23e9f00 <_Z13SD_initializev+0xfc>
    return m_fVol   ? m_fVol->mkdir(path, pFlag)
 23e9e84:	f8d4 1480 	ldr.w	r1, [r4, #1152]	; 0x480
 23e9e88:	b309      	cbz	r1, 23e9ece <_Z13SD_initializev+0xca>
  FatFile() {}
 23e9e8a:	9004      	str	r0, [sp, #16]
    return sub.mkdir(vwd(), path, pFlag);
 23e9e8c:	2301      	movs	r3, #1
 23e9e8e:	4628      	mov	r0, r5
 23e9e90:	4a22      	ldr	r2, [pc, #136]	; (23e9f1c <_Z13SD_initializev+0x118>)
 23e9e92:	f201 4144 	addw	r1, r1, #1092	; 0x444
 23e9e96:	f00a fc03 	bl	23f46a0 <_ZN7FatFile5mkdirEPS_PKcb>
      if (SD.mkdir(SD_obsdir)) {
 23e9e9a:	b320      	cbz	r0, 23e9ee6 <_Z13SD_initializev+0xe2>
        Output ("SD:MKDIR OBS OK");
 23e9e9c:	4820      	ldr	r0, [pc, #128]	; (23e9f20 <_Z13SD_initializev+0x11c>)
 23e9e9e:	f7fd f9a1 	bl	23e71e4 <_Z6OutputPKc>
        Output ("SD:Online");
 23e9ea2:	4820      	ldr	r0, [pc, #128]	; (23e9f24 <_Z13SD_initializev+0x120>)
        SystemStatusBits |= SSB_SD;  // Turn On Bit     
      } 
    }
    else {
      Output ("SD:Online");
      Output ("SD:OBS DIR Exists");
 23e9ea4:	f7fd f99e 	bl	23e71e4 <_Z6OutputPKc>
      SD_exists = true;
 23e9ea8:	2201      	movs	r2, #1
 23e9eaa:	4b1f      	ldr	r3, [pc, #124]	; (23e9f28 <_Z13SD_initializev+0x124>)
 23e9eac:	701a      	strb	r2, [r3, #0]
    }
  }
}
 23e9eae:	e025      	b.n	23e9efc <_Z13SD_initializev+0xf8>
    Output ("SD:NF");
 23e9eb0:	481e      	ldr	r0, [pc, #120]	; (23e9f2c <_Z13SD_initializev+0x128>)
 23e9eb2:	f7fd f997 	bl	23e71e4 <_Z6OutputPKc>
    delay (5000);
 23e9eb6:	f241 3088 	movw	r0, #5000	; 0x1388
    SystemStatusBits |= SSB_SD;
 23e9eba:	4a1d      	ldr	r2, [pc, #116]	; (23e9f30 <_Z13SD_initializev+0x12c>)
 23e9ebc:	6813      	ldr	r3, [r2, #0]
 23e9ebe:	f043 0302 	orr.w	r3, r3, #2
 23e9ec2:	6013      	str	r3, [r2, #0]
}
 23e9ec4:	b012      	add	sp, #72	; 0x48
 23e9ec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    delay (5000);
 23e9eca:	f00e b9fb 	b.w	23f82c4 <delay>
           : m_xVol ? m_xVol->mkdir(path, pFlag)
 23e9ece:	f8d4 0484 	ldr.w	r0, [r4, #1156]	; 0x484
 23e9ed2:	b140      	cbz	r0, 23e9ee6 <_Z13SD_initializev+0xe2>
  ExFatFile() {}
 23e9ed4:	9110      	str	r1, [sp, #64]	; 0x40
    return sub.mkdir(vwd(), path, pFlag);
 23e9ed6:	2301      	movs	r3, #1
 23e9ed8:	f500 6189 	add.w	r1, r0, #1096	; 0x448
 23e9edc:	4a0f      	ldr	r2, [pc, #60]	; (23e9f1c <_Z13SD_initializev+0x118>)
 23e9ede:	4628      	mov	r0, r5
 23e9ee0:	f00c fbbd 	bl	23f665e <_ZN9ExFatFile5mkdirEPS_PKcb>
 23e9ee4:	e7d9      	b.n	23e9e9a <_Z13SD_initializev+0x96>
        Output ("SD:MKDIR OBS ERR");
 23e9ee6:	4813      	ldr	r0, [pc, #76]	; (23e9f34 <_Z13SD_initializev+0x130>)
 23e9ee8:	f7fd f97c 	bl	23e71e4 <_Z6OutputPKc>
        Output ("SD:Offline");
 23e9eec:	4812      	ldr	r0, [pc, #72]	; (23e9f38 <_Z13SD_initializev+0x134>)
 23e9eee:	f7fd f979 	bl	23e71e4 <_Z6OutputPKc>
        SystemStatusBits |= SSB_SD;  // Turn On Bit     
 23e9ef2:	4a0f      	ldr	r2, [pc, #60]	; (23e9f30 <_Z13SD_initializev+0x12c>)
 23e9ef4:	6813      	ldr	r3, [r2, #0]
 23e9ef6:	f043 0302 	orr.w	r3, r3, #2
 23e9efa:	6013      	str	r3, [r2, #0]
}
 23e9efc:	b012      	add	sp, #72	; 0x48
 23e9efe:	bd70      	pop	{r4, r5, r6, pc}
      Output ("SD:Online");
 23e9f00:	4808      	ldr	r0, [pc, #32]	; (23e9f24 <_Z13SD_initializev+0x120>)
 23e9f02:	f7fd f96f 	bl	23e71e4 <_Z6OutputPKc>
      Output ("SD:OBS DIR Exists");
 23e9f06:	480d      	ldr	r0, [pc, #52]	; (23e9f3c <_Z13SD_initializev+0x138>)
 23e9f08:	e7cc      	b.n	23e9ea4 <_Z13SD_initializev+0xa0>
 23e9f0a:	bf00      	nop
 23e9f0c:	1006a288 	.word	0x1006a288
 23e9f10:	1006a28c 	.word	0x1006a28c
 23e9f14:	00989680 	.word	0x00989680
 23e9f18:	1006a308 	.word	0x1006a308
 23e9f1c:	1006a1b0 	.word	0x1006a1b0
 23e9f20:	023fda98 	.word	0x023fda98
 23e9f24:	023fdaa8 	.word	0x023fdaa8
 23e9f28:	1006a7b4 	.word	0x1006a7b4
 23e9f2c:	023fda92 	.word	0x023fda92
 23e9f30:	1006a1cc 	.word	0x1006a1cc
 23e9f34:	023fdab2 	.word	0x023fdab2
 23e9f38:	023fdac3 	.word	0x023fdac3
 23e9f3c:	023fdace 	.word	0x023fdace

023e9f40 <_Z17SD_LogObservationPc>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23e9f40:	2300      	movs	r3, #0
 23e9f42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
/* 
 *=======================================================================================================================
 * SD_LogObservation()
 *=======================================================================================================================
 */
void SD_LogObservation(char *observations) {
 23e9f46:	b530      	push	{r4, r5, lr}
 23e9f48:	b0b3      	sub	sp, #204	; 0xcc
 23e9f4a:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
  FsBaseFile() = default;  // cppcheck-suppress uninitMemberVar
 23e9f4e:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23e9f52:	4b23      	ldr	r3, [pc, #140]	; (23e9fe0 <_Z17SD_LogObservationPc+0xa0>)
 23e9f54:	4605      	mov	r5, r0
 23e9f56:	930a      	str	r3, [sp, #40]	; 0x28
  char SD_logfile[24];
  File fp;

  if (!SD_exists) {
 23e9f58:	4b22      	ldr	r3, [pc, #136]	; (23e9fe4 <_Z17SD_LogObservationPc+0xa4>)
 23e9f5a:	781b      	ldrb	r3, [r3, #0]
 23e9f5c:	2b00      	cmp	r3, #0
 23e9f5e:	d034      	beq.n	23e9fca <_Z17SD_LogObservationPc+0x8a>
    return;
  }

  if (!Time.isValid()) {
 23e9f60:	f00f fe97 	bl	23f9c92 <_ZN9TimeClass7isValidEv>
 23e9f64:	2800      	cmp	r0, #0
 23e9f66:	d030      	beq.n	23e9fca <_Z17SD_LogObservationPc+0x8a>
    return;
  }
  
  sprintf (SD_logfile, "%s/%4d%02d%02d.log", SD_obsdir, Time.year(), Time.month(), Time.day());
 23e9f68:	f00f fef8 	bl	23f9d5c <_ZN9TimeClass4yearEv>
 23e9f6c:	9003      	str	r0, [sp, #12]
 23e9f6e:	f00f feed 	bl	23f9d4c <_ZN9TimeClass5monthEv>
 23e9f72:	4604      	mov	r4, r0
 23e9f74:	f00f fede 	bl	23f9d34 <_ZN9TimeClass3dayEv>
 23e9f78:	9b03      	ldr	r3, [sp, #12]
 23e9f7a:	e9cd 4000 	strd	r4, r0, [sp]
 23e9f7e:	4a1a      	ldr	r2, [pc, #104]	; (23e9fe8 <_Z17SD_LogObservationPc+0xa8>)
 23e9f80:	491a      	ldr	r1, [pc, #104]	; (23e9fec <_Z17SD_LogObservationPc+0xac>)
 23e9f82:	a804      	add	r0, sp, #16
 23e9f84:	f00e f904 	bl	23f8190 <sprintf>
  
  fp = SD.open(SD_logfile, FILE_WRITE); 
 23e9f88:	aa04      	add	r2, sp, #16
 23e9f8a:	f244 2302 	movw	r3, #16898	; 0x4202
 23e9f8e:	4918      	ldr	r1, [pc, #96]	; (23e9ff0 <_Z17SD_LogObservationPc+0xb0>)
 23e9f90:	a81e      	add	r0, sp, #120	; 0x78
 23e9f92:	f00d fa13 	bl	23f73bc <_ZN8FsVolume4openEPKci>
class Print
 23e9f96:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    move(&from);
 23e9f98:	a922      	add	r1, sp, #136	; 0x88
 23e9f9a:	930b      	str	r3, [sp, #44]	; 0x2c
class Stream : public Print
 23e9f9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 23e9f9e:	a80e      	add	r0, sp, #56	; 0x38
 23e9fa0:	930c      	str	r3, [sp, #48]	; 0x30
 23e9fa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 23e9fa4:	4c13      	ldr	r4, [pc, #76]	; (23e9ff4 <_Z17SD_LogObservationPc+0xb4>)
 23e9fa6:	930d      	str	r3, [sp, #52]	; 0x34
 23e9fa8:	f00d f925 	bl	23f71f6 <_ZN10FsBaseFile4moveEPS_>
  operator bool() const { return isOpen(); }
 23e9fac:	a80e      	add	r0, sp, #56	; 0x38
 23e9fae:	f7fc fef8 	bl	23e6da2 <_ZNK10FsBaseFile6isOpenEv>
  if (fp) {
 23e9fb2:	b160      	cbz	r0, 23e9fce <_Z17SD_LogObservationPc+0x8e>
    fp.println(observations);
 23e9fb4:	4629      	mov	r1, r5
 23e9fb6:	a80a      	add	r0, sp, #40	; 0x28
 23e9fb8:	f00f fb90 	bl	23f96dc <_ZN5Print7printlnEPKc>
    fp.close();
 23e9fbc:	a80e      	add	r0, sp, #56	; 0x38
 23e9fbe:	f00d f924 	bl	23f720a <_ZN10FsBaseFile5closeEv>
    SystemStatusBits &= ~SSB_SD;  // Turn Off Bit
 23e9fc2:	6823      	ldr	r3, [r4, #0]
 23e9fc4:	f023 0302 	bic.w	r3, r3, #2
 23e9fc8:	6023      	str	r3, [r4, #0]
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
    Output ("SD:Open(Log)ERR");
    // At thins point we could set SD_exists to false and/or set a status bit to report it
    // sd_initialize();  // Reports SD NOT Found. Library bug with SD
  }
}
 23e9fca:	b033      	add	sp, #204	; 0xcc
 23e9fcc:	bd30      	pop	{r4, r5, pc}
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23e9fce:	6823      	ldr	r3, [r4, #0]
    Output ("SD:Open(Log)ERR");
 23e9fd0:	4809      	ldr	r0, [pc, #36]	; (23e9ff8 <_Z17SD_LogObservationPc+0xb8>)
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23e9fd2:	f043 0302 	orr.w	r3, r3, #2
 23e9fd6:	6023      	str	r3, [r4, #0]
    Output ("SD:Open(Log)ERR");
 23e9fd8:	f7fd f904 	bl	23e71e4 <_Z6OutputPKc>
    virtual ~Print() {}
 23e9fdc:	e7f5      	b.n	23e9fca <_Z17SD_LogObservationPc+0x8a>
 23e9fde:	bf00      	nop
 23e9fe0:	023fea48 	.word	0x023fea48
 23e9fe4:	1006a7b4 	.word	0x1006a7b4
 23e9fe8:	1006a1b0 	.word	0x1006a1b0
 23e9fec:	023fdae0 	.word	0x023fdae0
 23e9ff0:	1006a308 	.word	0x1006a308
 23e9ff4:	1006a1cc 	.word	0x1006a1cc
 23e9ff8:	023fdaf3 	.word	0x023fdaf3

023e9ffc <_Z13SD_N2S_Deletev>:
/* 
 *=======================================================================================================================
 * SD_N2S_Delete()
 *=======================================================================================================================
 */
bool SD_N2S_Delete() {
 23e9ffc:	b538      	push	{r3, r4, r5, lr}
  bool result;

  if (SD_exists && SD.exists(SD_n2s_file)) {
 23e9ffe:	4b17      	ldr	r3, [pc, #92]	; (23ea05c <_Z13SD_N2S_Deletev+0x60>)
 23ea000:	4c17      	ldr	r4, [pc, #92]	; (23ea060 <_Z13SD_N2S_Deletev+0x64>)
 23ea002:	781b      	ldrb	r3, [r3, #0]
 23ea004:	b193      	cbz	r3, 23ea02c <_Z13SD_N2S_Deletev+0x30>
 23ea006:	4917      	ldr	r1, [pc, #92]	; (23ea064 <_Z13SD_N2S_Deletev+0x68>)
 23ea008:	4817      	ldr	r0, [pc, #92]	; (23ea068 <_Z13SD_N2S_Deletev+0x6c>)
 23ea00a:	f7fc fe51 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23ea00e:	b168      	cbz	r0, 23ea02c <_Z13SD_N2S_Deletev+0x30>
    if (SD.remove (SD_n2s_file)) {
 23ea010:	4914      	ldr	r1, [pc, #80]	; (23ea064 <_Z13SD_N2S_Deletev+0x68>)
 23ea012:	4815      	ldr	r0, [pc, #84]	; (23ea068 <_Z13SD_N2S_Deletev+0x6c>)
 23ea014:	f7fc fe67 	bl	23e6ce6 <_ZN8FsVolume6removeEPKc>
 23ea018:	4605      	mov	r5, r0
 23ea01a:	b9b0      	cbnz	r0, 23ea04a <_Z13SD_N2S_Deletev+0x4e>
      SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
      Output ("N2S->DEL:OK");
      result = true;
    }
    else {
      Output ("N2S->DEL:ERR");
 23ea01c:	4813      	ldr	r0, [pc, #76]	; (23ea06c <_Z13SD_N2S_Deletev+0x70>)
 23ea01e:	f7fd f8e1 	bl	23e71e4 <_Z6OutputPKc>
      SystemStatusBits |= SSB_SD; // Turn On Bit
 23ea022:	6823      	ldr	r3, [r4, #0]
 23ea024:	f043 0302 	orr.w	r3, r3, #2
 23ea028:	6023      	str	r3, [r4, #0]
      result = false;
 23ea02a:	e007      	b.n	23ea03c <_Z13SD_N2S_Deletev+0x40>
    }
  }
  else {
    SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23ea02c:	6823      	ldr	r3, [r4, #0]
    Output ("N2S->DEL:NF");
 23ea02e:	4810      	ldr	r0, [pc, #64]	; (23ea070 <_Z13SD_N2S_Deletev+0x74>)
    SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23ea030:	f023 0310 	bic.w	r3, r3, #16
 23ea034:	6023      	str	r3, [r4, #0]
    result = true;
 23ea036:	2501      	movs	r5, #1
    Output ("N2S->DEL:NF");
 23ea038:	f7fd f8d4 	bl	23e71e4 <_Z6OutputPKc>
  }
  eeprom.n2sfp = 0;
 23ea03c:	2200      	movs	r2, #0
 23ea03e:	4b0d      	ldr	r3, [pc, #52]	; (23ea074 <_Z13SD_N2S_Deletev+0x78>)
 23ea040:	615a      	str	r2, [r3, #20]
  EEPROM_Update();
 23ea042:	f7ff fdf9 	bl	23e9c38 <_Z13EEPROM_Updatev>
  return (result);
}
 23ea046:	4628      	mov	r0, r5
 23ea048:	bd38      	pop	{r3, r4, r5, pc}
      SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23ea04a:	6823      	ldr	r3, [r4, #0]
      Output ("N2S->DEL:OK");
 23ea04c:	480a      	ldr	r0, [pc, #40]	; (23ea078 <_Z13SD_N2S_Deletev+0x7c>)
      SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23ea04e:	f023 0310 	bic.w	r3, r3, #16
 23ea052:	6023      	str	r3, [r4, #0]
      Output ("N2S->DEL:OK");
 23ea054:	f7fd f8c6 	bl	23e71e4 <_Z6OutputPKc>
      result = true;
 23ea058:	e7f0      	b.n	23ea03c <_Z13SD_N2S_Deletev+0x40>
 23ea05a:	bf00      	nop
 23ea05c:	1006a7b4 	.word	0x1006a7b4
 23ea060:	1006a1cc 	.word	0x1006a1cc
 23ea064:	1006a19f 	.word	0x1006a19f
 23ea068:	1006a308 	.word	0x1006a308
 23ea06c:	023fdb1b 	.word	0x023fdb1b
 23ea070:	023fdb03 	.word	0x023fdb03
 23ea074:	1006ae74 	.word	0x1006ae74
 23ea078:	023fdb0f 	.word	0x023fdb0f

023ea07c <_Z17SD_NeedToSend_AddPc>:
/* 
 *=======================================================================================================================
 * SD_NeedToSend_Add()
 *=======================================================================================================================
 */
void SD_NeedToSend_Add(char *observation) {
 23ea07c:	b530      	push	{r4, r5, lr}
    Stream() {_timeout=1000;}
 23ea07e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ea082:	2500      	movs	r5, #0
 23ea084:	b0a9      	sub	sp, #164	; 0xa4
 23ea086:	e9cd 5301 	strd	r5, r3, [sp, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23ea08a:	4b26      	ldr	r3, [pc, #152]	; (23ea124 <_Z17SD_NeedToSend_AddPc+0xa8>)
 23ea08c:	4604      	mov	r4, r0
 23ea08e:	9300      	str	r3, [sp, #0]
  File fp;

  if (!SD_exists) {
 23ea090:	4b25      	ldr	r3, [pc, #148]	; (23ea128 <_Z17SD_NeedToSend_AddPc+0xac>)
  FsBaseFile() = default;  // cppcheck-suppress uninitMemberVar
 23ea092:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
 23ea096:	781b      	ldrb	r3, [r3, #0]
 23ea098:	b34b      	cbz	r3, 23ea0ee <_Z17SD_NeedToSend_AddPc+0x72>
    return;
  }
  
  fp = SD.open(SD_n2s_file, FILE_WRITE); // Open the file for reading and writing, starting at the end of the file.
 23ea09a:	f244 2302 	movw	r3, #16898	; 0x4202
 23ea09e:	4a23      	ldr	r2, [pc, #140]	; (23ea12c <_Z17SD_NeedToSend_AddPc+0xb0>)
 23ea0a0:	4923      	ldr	r1, [pc, #140]	; (23ea130 <_Z17SD_NeedToSend_AddPc+0xb4>)
 23ea0a2:	a814      	add	r0, sp, #80	; 0x50
 23ea0a4:	f00d f98a 	bl	23f73bc <_ZN8FsVolume4openEPKci>
class Print
 23ea0a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    move(&from);
 23ea0aa:	a804      	add	r0, sp, #16
 23ea0ac:	9301      	str	r3, [sp, #4]
class Stream : public Print
 23ea0ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 23ea0b0:	a918      	add	r1, sp, #96	; 0x60
 23ea0b2:	9302      	str	r3, [sp, #8]
 23ea0b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23ea0b6:	9303      	str	r3, [sp, #12]
 23ea0b8:	f00d f89d 	bl	23f71f6 <_ZN10FsBaseFile4moveEPS_>
  operator bool() const { return isOpen(); }
 23ea0bc:	a804      	add	r0, sp, #16
 23ea0be:	f7fc fe70 	bl	23e6da2 <_ZNK10FsBaseFile6isOpenEv>
                                         // It will be created if it doesn't already exist.
  if (fp) {  
 23ea0c2:	b340      	cbz	r0, 23ea116 <_Z17SD_NeedToSend_AddPc+0x9a>
  PosType size() { return BaseFile::fileSize(); }
 23ea0c4:	a804      	add	r0, sp, #16
 23ea0c6:	f7fc fe60 	bl	23e6d8a <_ZNK10FsBaseFile8fileSizeEv>
    if (fp.size() > SD_n2s_max_filesz) {
 23ea0ca:	4b1a      	ldr	r3, [pc, #104]	; (23ea134 <_Z17SD_NeedToSend_AddPc+0xb8>)
 23ea0cc:	681b      	ldr	r3, [r3, #0]
 23ea0ce:	4283      	cmp	r3, r0
 23ea0d0:	eb75 0301 	sbcs.w	r3, r5, r1
 23ea0d4:	d20d      	bcs.n	23ea0f2 <_Z17SD_NeedToSend_AddPc+0x76>
      fp.close();
 23ea0d6:	a804      	add	r0, sp, #16
 23ea0d8:	f00d f897 	bl	23f720a <_ZN10FsBaseFile5closeEv>
      Output ("N2S:Full");
 23ea0dc:	4816      	ldr	r0, [pc, #88]	; (23ea138 <_Z17SD_NeedToSend_AddPc+0xbc>)
 23ea0de:	f7fd f881 	bl	23e71e4 <_Z6OutputPKc>
      if (SD_N2S_Delete()) {
 23ea0e2:	f7ff ff8b 	bl	23e9ffc <_Z13SD_N2S_Deletev>
 23ea0e6:	b110      	cbz	r0, 23ea0ee <_Z17SD_NeedToSend_AddPc+0x72>
        // Only call ourself again if we truely deleted the file. Otherwise infinate loop.
        SD_NeedToSend_Add(observation); // Now go and log the data
 23ea0e8:	4620      	mov	r0, r4
 23ea0ea:	f7ff ffc7 	bl	23ea07c <_Z17SD_NeedToSend_AddPc>
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
    Output ("N2S:Open Error");
    // At thins point we could set SD_exists to false and/or set a status bit to report it
    // sd_initialize();  // Reports SD NOT Found. Library bug with SD
  }
}
 23ea0ee:	b029      	add	sp, #164	; 0xa4
 23ea0f0:	bd30      	pop	{r4, r5, pc}
      fp.println(observation); //Print data, followed by a carriage return and newline, to the File
 23ea0f2:	4621      	mov	r1, r4
 23ea0f4:	4668      	mov	r0, sp
 23ea0f6:	f00f faf1 	bl	23f96dc <_ZN5Print7printlnEPKc>
      fp.close();
 23ea0fa:	a804      	add	r0, sp, #16
 23ea0fc:	f00d f885 	bl	23f720a <_ZN10FsBaseFile5closeEv>
      SystemStatusBits |= SSB_N2S; // Turn on Bit that says there are entries in the N2S File
 23ea100:	4a0e      	ldr	r2, [pc, #56]	; (23ea13c <_Z17SD_NeedToSend_AddPc+0xc0>)
      Output ("N2S:OBS Added");
 23ea102:	480f      	ldr	r0, [pc, #60]	; (23ea140 <_Z17SD_NeedToSend_AddPc+0xc4>)
      SystemStatusBits &= ~SSB_SD;  // Turn Off Bit
 23ea104:	6813      	ldr	r3, [r2, #0]
 23ea106:	f023 0302 	bic.w	r3, r3, #2
      SystemStatusBits |= SSB_N2S; // Turn on Bit that says there are entries in the N2S File
 23ea10a:	f043 0310 	orr.w	r3, r3, #16
 23ea10e:	6013      	str	r3, [r2, #0]
    Output ("N2S:Open Error");
 23ea110:	f7fd f868 	bl	23e71e4 <_Z6OutputPKc>
 23ea114:	e7eb      	b.n	23ea0ee <_Z17SD_NeedToSend_AddPc+0x72>
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23ea116:	4a09      	ldr	r2, [pc, #36]	; (23ea13c <_Z17SD_NeedToSend_AddPc+0xc0>)
    Output ("N2S:Open Error");
 23ea118:	480a      	ldr	r0, [pc, #40]	; (23ea144 <_Z17SD_NeedToSend_AddPc+0xc8>)
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23ea11a:	6813      	ldr	r3, [r2, #0]
 23ea11c:	f043 0302 	orr.w	r3, r3, #2
 23ea120:	6013      	str	r3, [r2, #0]
    Output ("N2S:Open Error");
 23ea122:	e7f5      	b.n	23ea110 <_Z17SD_NeedToSend_AddPc+0x94>
 23ea124:	023fea48 	.word	0x023fea48
 23ea128:	1006a7b4 	.word	0x1006a7b4
 23ea12c:	1006a19f 	.word	0x1006a19f
 23ea130:	1006a308 	.word	0x1006a308
 23ea134:	1006a1ac 	.word	0x1006a1ac
 23ea138:	023fdb28 	.word	0x023fdb28
 23ea13c:	1006a1cc 	.word	0x1006a1cc
 23ea140:	023fdb31 	.word	0x023fdb31
 23ea144:	023fdb3f 	.word	0x023fdb3f

023ea148 <_Z16lora_msgs_to_n2sv>:
void lora_msgs_to_n2s() {
 23ea148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (LORA_exists) {
 23ea14c:	4b14      	ldr	r3, [pc, #80]	; (23ea1a0 <_Z16lora_msgs_to_n2sv+0x58>)
 23ea14e:	781b      	ldrb	r3, [r3, #0]
 23ea150:	b31b      	cbz	r3, 23ea19a <_Z16lora_msgs_to_n2sv+0x52>
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23ea152:	2500      	movs	r5, #0
 23ea154:	4c13      	ldr	r4, [pc, #76]	; (23ea1a4 <_Z16lora_msgs_to_n2sv+0x5c>)
        sprintf (msgbuf, "%s,%s", m->message, relay_msgtypes[m->message_type]);
 23ea156:	4f14      	ldr	r7, [pc, #80]	; (23ea1a8 <_Z16lora_msgs_to_n2sv+0x60>)
 23ea158:	f8df 805c 	ldr.w	r8, [pc, #92]	; 23ea1b8 <_Z16lora_msgs_to_n2sv+0x70>
 23ea15c:	4e13      	ldr	r6, [pc, #76]	; (23ea1ac <_Z16lora_msgs_to_n2sv+0x64>)
      if (m->need2log) {
 23ea15e:	7823      	ldrb	r3, [r4, #0]
 23ea160:	b1b3      	cbz	r3, 23ea190 <_Z16lora_msgs_to_n2sv+0x48>
        sprintf (msgbuf, "%s,%s", m->message, relay_msgtypes[m->message_type]);
 23ea162:	6863      	ldr	r3, [r4, #4]
 23ea164:	4641      	mov	r1, r8
 23ea166:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 23ea16a:	f104 0208 	add.w	r2, r4, #8
 23ea16e:	4630      	mov	r0, r6
 23ea170:	f00e f80e 	bl	23f8190 <sprintf>
        SD_NeedToSend_Add(msgbuf); // Save to N2F File
 23ea174:	4630      	mov	r0, r6
 23ea176:	f7ff ff81 	bl	23ea07c <_Z17SD_NeedToSend_AddPc>
        lora_relay_msg_free(m);
 23ea17a:	4620      	mov	r0, r4
 23ea17c:	f7fd fa18 	bl	23e75b0 <_Z19lora_relay_msg_freeP18LORA_MSG_RELAY_STR>
        sprintf (Buffer32Bytes, "LoRaMsg[%d]->N2S", i);
 23ea180:	462a      	mov	r2, r5
 23ea182:	490b      	ldr	r1, [pc, #44]	; (23ea1b0 <_Z16lora_msgs_to_n2sv+0x68>)
 23ea184:	480b      	ldr	r0, [pc, #44]	; (23ea1b4 <_Z16lora_msgs_to_n2sv+0x6c>)
 23ea186:	f00e f803 	bl	23f8190 <sprintf>
        Output (Buffer32Bytes);
 23ea18a:	480a      	ldr	r0, [pc, #40]	; (23ea1b4 <_Z16lora_msgs_to_n2sv+0x6c>)
 23ea18c:	f7fd f82a 	bl	23e71e4 <_Z6OutputPKc>
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23ea190:	3501      	adds	r5, #1
 23ea192:	2d40      	cmp	r5, #64	; 0x40
 23ea194:	f504 7484 	add.w	r4, r4, #264	; 0x108
 23ea198:	d1e1      	bne.n	23ea15e <_Z16lora_msgs_to_n2sv+0x16>
}
 23ea19a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23ea19e:	bf00      	nop
 23ea1a0:	1006a2e9 	.word	0x1006a2e9
 23ea1a4:	1006aed8 	.word	0x1006aed8
 23ea1a8:	1006a200 	.word	0x1006a200
 23ea1ac:	1006f140 	.word	0x1006f140
 23ea1b0:	023fdb54 	.word	0x023fdb54
 23ea1b4:	1006a2bf 	.word	0x1006a2bf
 23ea1b8:	023fdb4e 	.word	0x023fdb4e

023ea1bc <_Z14lora_relay_msgPc>:
 *   INT,   Station ID
 *   INT,   Message Counter
 *   OBS    JSON Observation
 *=======================================================================================================================
 */
void lora_relay_msg(char *obs) {
 23ea1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  int unit_id = 0;
  unsigned int message_counter = 0;
  char *message;
  char *p;

  if ((obs[0] == 'I') && (obs[1] == 'F')) {
 23ea1be:	7802      	ldrb	r2, [r0, #0]
 23ea1c0:	7843      	ldrb	r3, [r0, #1]
 23ea1c2:	2a49      	cmp	r2, #73	; 0x49
void lora_relay_msg(char *obs) {
 23ea1c4:	b087      	sub	sp, #28
  if ((obs[0] == 'I') && (obs[1] == 'F')) {
 23ea1c6:	d133      	bne.n	23ea230 <_Z14lora_relay_msgPc+0x74>
 23ea1c8:	2b46      	cmp	r3, #70	; 0x46
 23ea1ca:	d135      	bne.n	23ea238 <_Z14lora_relay_msgPc+0x7c>
    message_type = 1;
 23ea1cc:	2501      	movs	r5, #1
    Output (Buffer32Bytes);
    return;
  }

  p = &obs[2]; // Start after message type 
  unit_id = atoi (strtok_r(p, ",", &p));
 23ea1ce:	492c      	ldr	r1, [pc, #176]	; (23ea280 <_Z14lora_relay_msgPc+0xc4>)
 23ea1d0:	aa05      	add	r2, sp, #20
  p = &obs[2]; // Start after message type 
 23ea1d2:	3002      	adds	r0, #2
 23ea1d4:	9005      	str	r0, [sp, #20]
  unit_id = atoi (strtok_r(p, ",", &p));
 23ea1d6:	f012 ff03 	bl	23fcfe0 <strtok_r>
 23ea1da:	f012 fdef 	bl	23fcdbc <atoi>
  message_counter = atoi (strtok_r(p, ",", &p));
 23ea1de:	4928      	ldr	r1, [pc, #160]	; (23ea280 <_Z14lora_relay_msgPc+0xc4>)
 23ea1e0:	aa05      	add	r2, sp, #20
  unit_id = atoi (strtok_r(p, ",", &p));
 23ea1e2:	9003      	str	r0, [sp, #12]
  message_counter = atoi (strtok_r(p, ",", &p));
 23ea1e4:	9805      	ldr	r0, [sp, #20]
 23ea1e6:	f012 fefb 	bl	23fcfe0 <strtok_r>
 23ea1ea:	f012 fde7 	bl	23fcdbc <atoi>
  message = p;

  sprintf (Buffer32Bytes, "Relay %s ID:%d CNT:%d", relay_msgtypes[message_type], unit_id, message_counter);
 23ea1ee:	4e25      	ldr	r6, [pc, #148]	; (23ea284 <_Z14lora_relay_msgPc+0xc8>)
 23ea1f0:	9b03      	ldr	r3, [sp, #12]
 23ea1f2:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 23ea1f6:	4924      	ldr	r1, [pc, #144]	; (23ea288 <_Z14lora_relay_msgPc+0xcc>)
 23ea1f8:	9000      	str	r0, [sp, #0]
 23ea1fa:	4824      	ldr	r0, [pc, #144]	; (23ea28c <_Z14lora_relay_msgPc+0xd0>)
  message = p;
 23ea1fc:	9f05      	ldr	r7, [sp, #20]
  sprintf (Buffer32Bytes, "Relay %s ID:%d CNT:%d", relay_msgtypes[message_type], unit_id, message_counter);
 23ea1fe:	f00d ffc7 	bl	23f8190 <sprintf>
  Output (Buffer32Bytes);
 23ea202:	4822      	ldr	r0, [pc, #136]	; (23ea28c <_Z14lora_relay_msgPc+0xd0>)
 23ea204:	f7fc ffee 	bl	23e71e4 <_Z6OutputPKc>
  // Output (message);

  // Locate storage index
  int idx = lora_relay_notinuse();
 23ea208:	f7fd f9e8 	bl	23e75dc <_Z19lora_relay_notinusev>

  if (idx == -1) {
 23ea20c:	1c42      	adds	r2, r0, #1
  int idx = lora_relay_notinuse();
 23ea20e:	4604      	mov	r4, r0
  if (idx == -1) {
 23ea210:	d11e      	bne.n	23ea250 <_Z14lora_relay_msgPc+0x94>
    Output ("LORA Relay NoSpace");
 23ea212:	481f      	ldr	r0, [pc, #124]	; (23ea290 <_Z14lora_relay_msgPc+0xd4>)
 23ea214:	f7fc ffe6 	bl	23e71e4 <_Z6OutputPKc>

    // Dump all LoRA messages to N2S
    lora_msgs_to_n2s();  // No Space - Dump all LoRA messages to N2S, then save new message
 23ea218:	f7ff ff96 	bl	23ea148 <_Z16lora_msgs_to_n2sv>

    idx = lora_relay_notinuse(); // This better not be -1 after freeing
 23ea21c:	f7fd f9de 	bl	23e75dc <_Z19lora_relay_notinusev>
    if (idx == -1) {
 23ea220:	1c43      	adds	r3, r0, #1
    idx = lora_relay_notinuse(); // This better not be -1 after freeing
 23ea222:	4604      	mov	r4, r0
    if (idx == -1) {
 23ea224:	d114      	bne.n	23ea250 <_Z14lora_relay_msgPc+0x94>
      Output ("LORA Relay MsgLost");
 23ea226:	481b      	ldr	r0, [pc, #108]	; (23ea294 <_Z14lora_relay_msgPc+0xd8>)
  m = &lora_msg_relay[idx]; // Lets work with a pointer and not the index
  m->need2log = true;
  m->message_type = message_type;
  strncpy (m->message, message, LORA_RELAY_MSG_LENGTH-1); // minus 1 so last byte in array will always be null
  sprintf (Buffer32Bytes, "LORA Relay %s -> Queued:%d", relay_msgtypes[message_type], idx);
  Output (Buffer32Bytes);
 23ea228:	f7fc ffdc 	bl	23e71e4 <_Z6OutputPKc>
}
 23ea22c:	b007      	add	sp, #28
 23ea22e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((obs[0] == 'L') && (obs[1] == 'R')) {
 23ea230:	2a4c      	cmp	r2, #76	; 0x4c
 23ea232:	d101      	bne.n	23ea238 <_Z14lora_relay_msgPc+0x7c>
 23ea234:	2b52      	cmp	r3, #82	; 0x52
 23ea236:	d009      	beq.n	23ea24c <_Z14lora_relay_msgPc+0x90>
    sprintf (Buffer32Bytes, "LORA Relay %c%c Unkn", obs[0], obs[1]);
 23ea238:	4917      	ldr	r1, [pc, #92]	; (23ea298 <_Z14lora_relay_msgPc+0xdc>)
 23ea23a:	4814      	ldr	r0, [pc, #80]	; (23ea28c <_Z14lora_relay_msgPc+0xd0>)
 23ea23c:	f00d ffa8 	bl	23f8190 <sprintf>
    Output (Buffer32Bytes);
 23ea240:	4812      	ldr	r0, [pc, #72]	; (23ea28c <_Z14lora_relay_msgPc+0xd0>)
}
 23ea242:	b007      	add	sp, #28
 23ea244:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    Output (Buffer32Bytes);
 23ea248:	f7fc bfcc 	b.w	23e71e4 <_Z6OutputPKc>
    message_type = 2; 
 23ea24c:	2502      	movs	r5, #2
 23ea24e:	e7be      	b.n	23ea1ce <_Z14lora_relay_msgPc+0x12>
  m->need2log = true;
 23ea250:	f44f 7384 	mov.w	r3, #264	; 0x108
 23ea254:	2101      	movs	r1, #1
 23ea256:	4363      	muls	r3, r4
 23ea258:	4810      	ldr	r0, [pc, #64]	; (23ea29c <_Z14lora_relay_msgPc+0xe0>)
 23ea25a:	18c2      	adds	r2, r0, r3
 23ea25c:	54c1      	strb	r1, [r0, r3]
  strncpy (m->message, message, LORA_RELAY_MSG_LENGTH-1); // minus 1 so last byte in array will always be null
 23ea25e:	3308      	adds	r3, #8
 23ea260:	4639      	mov	r1, r7
  m->message_type = message_type;
 23ea262:	6055      	str	r5, [r2, #4]
  strncpy (m->message, message, LORA_RELAY_MSG_LENGTH-1); // minus 1 so last byte in array will always be null
 23ea264:	4418      	add	r0, r3
 23ea266:	22ff      	movs	r2, #255	; 0xff
 23ea268:	f012 fe7f 	bl	23fcf6a <strncpy>
  sprintf (Buffer32Bytes, "LORA Relay %s -> Queued:%d", relay_msgtypes[message_type], idx);
 23ea26c:	4623      	mov	r3, r4
 23ea26e:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 23ea272:	490b      	ldr	r1, [pc, #44]	; (23ea2a0 <_Z14lora_relay_msgPc+0xe4>)
 23ea274:	4805      	ldr	r0, [pc, #20]	; (23ea28c <_Z14lora_relay_msgPc+0xd0>)
 23ea276:	f00d ff8b 	bl	23f8190 <sprintf>
  Output (Buffer32Bytes);
 23ea27a:	4804      	ldr	r0, [pc, #16]	; (23ea28c <_Z14lora_relay_msgPc+0xd0>)
 23ea27c:	e7d4      	b.n	23ea228 <_Z14lora_relay_msgPc+0x6c>
 23ea27e:	bf00      	nop
 23ea280:	023fdb7a 	.word	0x023fdb7a
 23ea284:	1006a200 	.word	0x1006a200
 23ea288:	023fdb7c 	.word	0x023fdb7c
 23ea28c:	1006a2bf 	.word	0x1006a2bf
 23ea290:	023fdb92 	.word	0x023fdb92
 23ea294:	023fdba5 	.word	0x023fdba5
 23ea298:	023fdb65 	.word	0x023fdb65
 23ea29c:	1006aed8 	.word	0x1006aed8
 23ea2a0:	023fdbb8 	.word	0x023fdbb8

023ea2a4 <_Z10SD_findKeyPK19__FlashStringHelperPc>:
 *  myInt_1=2
 *  myFloat_1=0.74
 * =======================================================================================================================
 */

int SD_findKey(const __FlashStringHelper * key, char * value) {
 23ea2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ea2a8:	4607      	mov	r7, r0
 23ea2aa:	b0ac      	sub	sp, #176	; 0xb0
  
  // Disable LoRA SPI0 Chip Select
  pinMode(LORA_SS, OUTPUT);
 23ea2ac:	2003      	movs	r0, #3
int SD_findKey(const __FlashStringHelper * key, char * value) {
 23ea2ae:	460e      	mov	r6, r1
  pinMode(LORA_SS, OUTPUT);
 23ea2b0:	2101      	movs	r1, #1
 23ea2b2:	f00f ff8d 	bl	23fa1d0 <pinMode>
  digitalWrite(LORA_SS, HIGH);
 23ea2b6:	2101      	movs	r1, #1
 23ea2b8:	2003      	movs	r0, #3
 23ea2ba:	f00f ff9a 	bl	23fa1f2 <digitalWrite>
  
  File configFile = SD.open(CF_NAME);
 23ea2be:	2300      	movs	r3, #0
 23ea2c0:	4a29      	ldr	r2, [pc, #164]	; (23ea368 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xc4>)
 23ea2c2:	492a      	ldr	r1, [pc, #168]	; (23ea36c <_Z10SD_findKeyPK19__FlashStringHelperPc+0xc8>)
 23ea2c4:	a818      	add	r0, sp, #96	; 0x60
 23ea2c6:	f00d f879 	bl	23f73bc <_ZN8FsVolume4openEPKci>
 23ea2ca:	a81c      	add	r0, sp, #112	; 0x70
 23ea2cc:	f7fc fd69 	bl	23e6da2 <_ZNK10FsBaseFile6isOpenEv>

  if (!configFile) {
 23ea2d0:	4604      	mov	r4, r0
 23ea2d2:	2800      	cmp	r0, #0
 23ea2d4:	d035      	beq.n	23ea342 <_Z10SD_findKeyPK19__FlashStringHelperPc+0x9e>
 23ea2d6:	466b      	mov	r3, sp
    return(0);
  }

  char key_string[KEY_MAX_LENGTH];
  char SD_buffer[KEY_MAX_LENGTH + VALUE_MAX_LENGTH + 1]; // 1 is = character
  int key_length = 0;
 23ea2d8:	2500      	movs	r5, #0
 23ea2da:	4698      	mov	r8, r3
  // Flash string to string
  PGM_P keyPoiter;
  keyPoiter = reinterpret_cast<PGM_P>(key);
  byte ch;
  do {
    ch = pgm_read_byte(keyPoiter++);
 23ea2dc:	5d7a      	ldrb	r2, [r7, r5]
    if (ch != 0)
 23ea2de:	2a00      	cmp	r2, #0
 23ea2e0:	d13d      	bne.n	23ea35e <_Z10SD_findKeyPK19__FlashStringHelperPc+0xba>
    // WINDOWS uses CFLF = \r\n
    int buffer_length = configFile.readBytesUntil('\n', SD_buffer, LINE_MAX_LENGTH);
    if (SD_buffer[buffer_length - 1] == '\r')
      buffer_length--; // trim the \r

    if (buffer_length > (key_length + 1)) { // 1 is = character
 23ea2e2:	1c6f      	adds	r7, r5, #1
  int available() override { return BaseFile::available(); }
 23ea2e4:	a81c      	add	r0, sp, #112	; 0x70
 23ea2e6:	f7fc fd23 	bl	23e6d30 <_ZNK10FsBaseFile9availableEv>
  while (configFile.available()) {
 23ea2ea:	4604      	mov	r4, r0
 23ea2ec:	b328      	cbz	r0, 23ea33a <_Z10SD_findKeyPK19__FlashStringHelperPc+0x96>
    int buffer_length = configFile.readBytesUntil('\n', SD_buffer, LINE_MAX_LENGTH);
 23ea2ee:	233f      	movs	r3, #63	; 0x3f
 23ea2f0:	aa08      	add	r2, sp, #32
 23ea2f2:	210a      	movs	r1, #10
 23ea2f4:	a818      	add	r0, sp, #96	; 0x60
 23ea2f6:	f00f fb7c 	bl	23f99f2 <_ZN6Stream14readBytesUntilEcPcj>
 23ea2fa:	4604      	mov	r4, r0
    if (SD_buffer[buffer_length - 1] == '\r')
 23ea2fc:	1e43      	subs	r3, r0, #1
 23ea2fe:	aa2c      	add	r2, sp, #176	; 0xb0
 23ea300:	441a      	add	r2, r3
 23ea302:	f812 2c90 	ldrb.w	r2, [r2, #-144]
      buffer_length--; // trim the \r
 23ea306:	2a0d      	cmp	r2, #13
 23ea308:	bf08      	it	eq
 23ea30a:	461c      	moveq	r4, r3
    if (buffer_length > (key_length + 1)) { // 1 is = character
 23ea30c:	42a7      	cmp	r7, r4
 23ea30e:	dae9      	bge.n	23ea2e4 <_Z10SD_findKeyPK19__FlashStringHelperPc+0x40>
      if (memcmp(SD_buffer, key_string, key_length) == 0) { // equal
 23ea310:	462a      	mov	r2, r5
 23ea312:	4641      	mov	r1, r8
 23ea314:	a808      	add	r0, sp, #32
 23ea316:	f012 fd5d 	bl	23fcdd4 <memcmp>
 23ea31a:	2800      	cmp	r0, #0
 23ea31c:	d1e2      	bne.n	23ea2e4 <_Z10SD_findKeyPK19__FlashStringHelperPc+0x40>
        if (SD_buffer[key_length] == '=') {
 23ea31e:	ab2c      	add	r3, sp, #176	; 0xb0
 23ea320:	442b      	add	r3, r5
 23ea322:	f813 3c90 	ldrb.w	r3, [r3, #-144]
 23ea326:	2b3d      	cmp	r3, #61	; 0x3d
 23ea328:	d1dc      	bne.n	23ea2e4 <_Z10SD_findKeyPK19__FlashStringHelperPc+0x40>
          value_length = buffer_length - key_length - 1;
 23ea32a:	1b64      	subs	r4, r4, r5
 23ea32c:	3c01      	subs	r4, #1
          memcpy(value, SD_buffer + key_length + 1, value_length);
 23ea32e:	ab08      	add	r3, sp, #32
 23ea330:	4622      	mov	r2, r4
 23ea332:	4630      	mov	r0, r6
 23ea334:	19d9      	adds	r1, r3, r7
 23ea336:	f012 fd5d 	bl	23fcdf4 <memcpy>
        }
      }
    }
  }

  configFile.close();  // close the file
 23ea33a:	a81c      	add	r0, sp, #112	; 0x70
 23ea33c:	f00c ff65 	bl	23f720a <_ZN10FsBaseFile5closeEv>
  return value_length;
 23ea340:	e009      	b.n	23ea356 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xb2>
    Serial.print(F("SD Card: error on opening file "));
 23ea342:	f00f fdd9 	bl	23f9ef8 <_Z16_fetch_usbserialv>
 23ea346:	490a      	ldr	r1, [pc, #40]	; (23ea370 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xcc>)
 23ea348:	f00f f9b8 	bl	23f96bc <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println(CF_NAME);
 23ea34c:	f00f fdd4 	bl	23f9ef8 <_Z16_fetch_usbserialv>
 23ea350:	4905      	ldr	r1, [pc, #20]	; (23ea368 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xc4>)
 23ea352:	f00f f9c3 	bl	23f96dc <_ZN5Print7printlnEPKc>
}
 23ea356:	4620      	mov	r0, r4
 23ea358:	b02c      	add	sp, #176	; 0xb0
 23ea35a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      key_string[key_length++] = ch;
 23ea35e:	3501      	adds	r5, #1
 23ea360:	f803 2b01 	strb.w	r2, [r3], #1
  } while (ch != 0);
 23ea364:	e7ba      	b.n	23ea2dc <_Z10SD_findKeyPK19__FlashStringHelperPc+0x38>
 23ea366:	bf00      	nop
 23ea368:	023fdbd3 	.word	0x023fdbd3
 23ea36c:	1006a308 	.word	0x1006a308
 23ea370:	023fdbde 	.word	0x023fdbde

023ea374 <_Z16HELPER_ascii2IntPci>:

int HELPER_ascii2Int(char *ascii, int length) {
  int sign = 1;
  int number = 0;

  for (int i = 0; i < length; i++) {
 23ea374:	2300      	movs	r3, #0
int HELPER_ascii2Int(char *ascii, int length) {
 23ea376:	b5f0      	push	{r4, r5, r6, r7, lr}
  int number = 0;
 23ea378:	461c      	mov	r4, r3
  int sign = 1;
 23ea37a:	2501      	movs	r5, #1
    char c = *(ascii + i);
    if (i == 0 && c == '-')
      sign = -1;
    else {
      if (c >= '0' && c <= '9')
        number = number * 10 + (c - '0');
 23ea37c:	260a      	movs	r6, #10
  for (int i = 0; i < length; i++) {
 23ea37e:	428b      	cmp	r3, r1
 23ea380:	da0e      	bge.n	23ea3a0 <_Z16HELPER_ascii2IntPci+0x2c>
    char c = *(ascii + i);
 23ea382:	5cc2      	ldrb	r2, [r0, r3]
    if (i == 0 && c == '-')
 23ea384:	b90b      	cbnz	r3, 23ea38a <_Z16HELPER_ascii2IntPci+0x16>
 23ea386:	2a2d      	cmp	r2, #45	; 0x2d
 23ea388:	d007      	beq.n	23ea39a <_Z16HELPER_ascii2IntPci+0x26>
      if (c >= '0' && c <= '9')
 23ea38a:	3a30      	subs	r2, #48	; 0x30
 23ea38c:	b2d7      	uxtb	r7, r2
 23ea38e:	2f09      	cmp	r7, #9
 23ea390:	d801      	bhi.n	23ea396 <_Z16HELPER_ascii2IntPci+0x22>
        number = number * 10 + (c - '0');
 23ea392:	fb06 2404 	mla	r4, r6, r4, r2
  for (int i = 0; i < length; i++) {
 23ea396:	3301      	adds	r3, #1
 23ea398:	e7f1      	b.n	23ea37e <_Z16HELPER_ascii2IntPci+0xa>
      sign = -1;
 23ea39a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 23ea39e:	e7fa      	b.n	23ea396 <_Z16HELPER_ascii2IntPci+0x22>
    }
  }

  return number * sign;
}
 23ea3a0:	fb04 f005 	mul.w	r0, r4, r5
 23ea3a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

023ea3a6 <_Z20HELPER_ascii2CharStrPci>:
    str += String(c);
  }
  return str;
}

char* HELPER_ascii2CharStr(char *ascii, int length) {
 23ea3a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23ea3a8:	4606      	mov	r6, r0
  char *str;
  str = (char *) malloc (length+1);
 23ea3aa:	1c48      	adds	r0, r1, #1
char* HELPER_ascii2CharStr(char *ascii, int length) {
 23ea3ac:	460c      	mov	r4, r1
  str = (char *) malloc (length+1);
 23ea3ae:	f00d fec5 	bl	23f813c <malloc>
  str[0] = 0;
 23ea3b2:	2100      	movs	r1, #0
  str = (char *) malloc (length+1);
 23ea3b4:	4605      	mov	r5, r0
  for (int i = 0; i < length; i++) {
    char c = *(ascii + i);
    str[i] = c;
    str[i+1] = 0;
 23ea3b6:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
  str[0] = 0;
 23ea3ba:	f800 1b01 	strb.w	r1, [r0], #1
    str[i+1] = 0;
 23ea3be:	9201      	str	r2, [sp, #4]
 23ea3c0:	f012 fd25 	bl	23fce0e <memset>
    str[i] = c;
 23ea3c4:	4631      	mov	r1, r6
 23ea3c6:	4628      	mov	r0, r5
 23ea3c8:	9a01      	ldr	r2, [sp, #4]
 23ea3ca:	f012 fd13 	bl	23fcdf4 <memcpy>
  }
  return str;
}
 23ea3ce:	4628      	mov	r0, r5
 23ea3d0:	b002      	add	sp, #8
 23ea3d2:	bd70      	pop	{r4, r5, r6, pc}

023ea3d4 <_Z10SD_findIntPK19__FlashStringHelper>:
  char value_string[VALUE_MAX_LENGTH];
  int value_length = SD_findKey(key, value_string);
  return value_length > 0;
}

int SD_findInt(const __FlashStringHelper * key) {
 23ea3d4:	b500      	push	{lr}
 23ea3d6:	b089      	sub	sp, #36	; 0x24
  char value_string[VALUE_MAX_LENGTH];
  int value_length = SD_findKey(key, value_string);
 23ea3d8:	4669      	mov	r1, sp
 23ea3da:	f7ff ff63 	bl	23ea2a4 <_Z10SD_findKeyPK19__FlashStringHelperPc>
 23ea3de:	4601      	mov	r1, r0
  return HELPER_ascii2Int(value_string, value_length);
 23ea3e0:	4668      	mov	r0, sp
 23ea3e2:	f7ff ffc7 	bl	23ea374 <_Z16HELPER_ascii2IntPci>
}
 23ea3e6:	b009      	add	sp, #36	; 0x24
 23ea3e8:	f85d fb04 	ldr.w	pc, [sp], #4

023ea3ec <_Z14SD_findCharStrPK19__FlashStringHelper>:
  char value_string[VALUE_MAX_LENGTH];
  int value_length = SD_findKey(key, value_string);
  return HELPER_ascii2String(value_string, value_length);
}

char* SD_findCharStr(const __FlashStringHelper * key) {
 23ea3ec:	b500      	push	{lr}
 23ea3ee:	b089      	sub	sp, #36	; 0x24
  char value_string[VALUE_MAX_LENGTH];
  int value_length = SD_findKey(key, value_string);
 23ea3f0:	4669      	mov	r1, sp
 23ea3f2:	f7ff ff57 	bl	23ea2a4 <_Z10SD_findKeyPK19__FlashStringHelperPc>
 23ea3f6:	4601      	mov	r1, r0
  return HELPER_ascii2CharStr(value_string, value_length);
 23ea3f8:	4668      	mov	r0, sp
 23ea3fa:	f7ff ffd4 	bl	23ea3a6 <_Z20HELPER_ascii2CharStrPci>
}
 23ea3fe:	b009      	add	sp, #36	; 0x24
 23ea400:	f85d fb04 	ldr.w	pc, [sp], #4

023ea404 <_Z17SD_ReadConfigFilev>:
/* 
 * =======================================================================================================================
 * SD_ReadConfigFile()
 * =======================================================================================================================
 */
void SD_ReadConfigFile() {
 23ea404:	b510      	push	{r4, lr}
  cf_aes_pkey     = SD_findCharStr(F("aes_pkey"));
 23ea406:	4822      	ldr	r0, [pc, #136]	; (23ea490 <_Z17SD_ReadConfigFilev+0x8c>)
 23ea408:	f7ff fff0 	bl	23ea3ec <_Z14SD_findCharStrPK19__FlashStringHelper>
  sprintf(msgbuf, "CF:aes_pkey=[%s]", cf_aes_pkey); Output (msgbuf);
 23ea40c:	4c21      	ldr	r4, [pc, #132]	; (23ea494 <_Z17SD_ReadConfigFilev+0x90>)
  cf_aes_pkey     = SD_findCharStr(F("aes_pkey"));
 23ea40e:	4b22      	ldr	r3, [pc, #136]	; (23ea498 <_Z17SD_ReadConfigFilev+0x94>)
 23ea410:	4602      	mov	r2, r0
 23ea412:	6018      	str	r0, [r3, #0]
  sprintf(msgbuf, "CF:aes_pkey=[%s]", cf_aes_pkey); Output (msgbuf);
 23ea414:	4921      	ldr	r1, [pc, #132]	; (23ea49c <_Z17SD_ReadConfigFilev+0x98>)
 23ea416:	4620      	mov	r0, r4
 23ea418:	f00d feba 	bl	23f8190 <sprintf>
 23ea41c:	4620      	mov	r0, r4
 23ea41e:	f7fc fee1 	bl	23e71e4 <_Z6OutputPKc>

  cf_aes_myiv     = SD_findLong(F("aes_myiv"));
 23ea422:	481f      	ldr	r0, [pc, #124]	; (23ea4a0 <_Z17SD_ReadConfigFilev+0x9c>)
 23ea424:	f7ff ffd6 	bl	23ea3d4 <_Z10SD_findIntPK19__FlashStringHelper>
 23ea428:	4b1e      	ldr	r3, [pc, #120]	; (23ea4a4 <_Z17SD_ReadConfigFilev+0xa0>)
 23ea42a:	4602      	mov	r2, r0
 23ea42c:	6018      	str	r0, [r3, #0]
  sprintf(msgbuf, "CF:aes_myiv=[%lu]", cf_aes_myiv);   Output (msgbuf);
 23ea42e:	491e      	ldr	r1, [pc, #120]	; (23ea4a8 <_Z17SD_ReadConfigFilev+0xa4>)
 23ea430:	4620      	mov	r0, r4
 23ea432:	f00d fead 	bl	23f8190 <sprintf>
 23ea436:	4620      	mov	r0, r4
 23ea438:	f7fc fed4 	bl	23e71e4 <_Z6OutputPKc>

  cf_lora_unitid  = SD_findInt(F("lora_unitid"));
 23ea43c:	481b      	ldr	r0, [pc, #108]	; (23ea4ac <_Z17SD_ReadConfigFilev+0xa8>)
 23ea43e:	f7ff ffc9 	bl	23ea3d4 <_Z10SD_findIntPK19__FlashStringHelper>
 23ea442:	4b1b      	ldr	r3, [pc, #108]	; (23ea4b0 <_Z17SD_ReadConfigFilev+0xac>)
 23ea444:	4602      	mov	r2, r0
 23ea446:	6018      	str	r0, [r3, #0]
  sprintf(msgbuf, "CF:lora_unitid=[%d]", cf_lora_unitid); Output (msgbuf);
 23ea448:	491a      	ldr	r1, [pc, #104]	; (23ea4b4 <_Z17SD_ReadConfigFilev+0xb0>)
 23ea44a:	4620      	mov	r0, r4
 23ea44c:	f00d fea0 	bl	23f8190 <sprintf>
 23ea450:	4620      	mov	r0, r4
 23ea452:	f7fc fec7 	bl	23e71e4 <_Z6OutputPKc>

  cf_lora_txpower = SD_findInt(F("lora_txpower"));
 23ea456:	4818      	ldr	r0, [pc, #96]	; (23ea4b8 <_Z17SD_ReadConfigFilev+0xb4>)
 23ea458:	f7ff ffbc 	bl	23ea3d4 <_Z10SD_findIntPK19__FlashStringHelper>
 23ea45c:	4b17      	ldr	r3, [pc, #92]	; (23ea4bc <_Z17SD_ReadConfigFilev+0xb8>)
 23ea45e:	4602      	mov	r2, r0
 23ea460:	6018      	str	r0, [r3, #0]
  sprintf(msgbuf, "CF:lora_txpower=[%d]", cf_lora_txpower); Output (msgbuf);
 23ea462:	4917      	ldr	r1, [pc, #92]	; (23ea4c0 <_Z17SD_ReadConfigFilev+0xbc>)
 23ea464:	4620      	mov	r0, r4
 23ea466:	f00d fe93 	bl	23f8190 <sprintf>
 23ea46a:	4620      	mov	r0, r4
 23ea46c:	f7fc feba 	bl	23e71e4 <_Z6OutputPKc>

  cf_lora_freq   = SD_findInt(F("lora_freq"));
 23ea470:	4814      	ldr	r0, [pc, #80]	; (23ea4c4 <_Z17SD_ReadConfigFilev+0xc0>)
 23ea472:	f7ff ffaf 	bl	23ea3d4 <_Z10SD_findIntPK19__FlashStringHelper>
 23ea476:	4b14      	ldr	r3, [pc, #80]	; (23ea4c8 <_Z17SD_ReadConfigFilev+0xc4>)
 23ea478:	4602      	mov	r2, r0
 23ea47a:	6018      	str	r0, [r3, #0]
  sprintf(msgbuf, "CF:lora_freq=[%d]", cf_lora_freq); Output (msgbuf);
 23ea47c:	4913      	ldr	r1, [pc, #76]	; (23ea4cc <_Z17SD_ReadConfigFilev+0xc8>)
 23ea47e:	4620      	mov	r0, r4
 23ea480:	f00d fe86 	bl	23f8190 <sprintf>
 23ea484:	4620      	mov	r0, r4
 23ea486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sprintf(msgbuf, "CF:lora_freq=[%d]", cf_lora_freq); Output (msgbuf);
 23ea48a:	f7fc beab 	b.w	23e71e4 <_Z6OutputPKc>
 23ea48e:	bf00      	nop
 23ea490:	023fdbfe 	.word	0x023fdbfe
 23ea494:	1006f140 	.word	0x1006f140
 23ea498:	1006ac94 	.word	0x1006ac94
 23ea49c:	023fdc07 	.word	0x023fdc07
 23ea4a0:	023fdc18 	.word	0x023fdc18
 23ea4a4:	1006ac90 	.word	0x1006ac90
 23ea4a8:	023fdc21 	.word	0x023fdc21
 23ea4ac:	023fdc33 	.word	0x023fdc33
 23ea4b0:	1006a1ec 	.word	0x1006a1ec
 23ea4b4:	023fdc3f 	.word	0x023fdc3f
 23ea4b8:	023fdc53 	.word	0x023fdc53
 23ea4bc:	1006a1e8 	.word	0x1006a1e8
 23ea4c0:	023fdc60 	.word	0x023fdc60
 23ea4c4:	023fdc75 	.word	0x023fdc75
 23ea4c8:	1006a1e4 	.word	0x1006a1e4
 23ea4cc:	023fdc7f 	.word	0x023fdc7f

023ea4d0 <_Z9OBS_Cleari>:
 * ======================================================================================================================
 * OBS_Clear() - Set OBS to not in use
 * ======================================================================================================================
 */
void OBS_Clear(int i) {
  obs[i].inuse =false;
 23ea4d0:	f640 2398 	movw	r3, #2712	; 0xa98
 23ea4d4:	4358      	muls	r0, r3
 23ea4d6:	2300      	movs	r3, #0
 23ea4d8:	4a05      	ldr	r2, [pc, #20]	; (23ea4f0 <_Z9OBS_Cleari+0x20>)
 23ea4da:	5413      	strb	r3, [r2, r0]
  for (int s=0; s<MAX_SENSORS; s++) {
 23ea4dc:	4410      	add	r0, r2
    obs[i].sensor[s].inuse = false;
 23ea4de:	461a      	mov	r2, r3
  for (int s=0; s<MAX_SENSORS; s++) {
 23ea4e0:	3301      	adds	r3, #1
 23ea4e2:	2b60      	cmp	r3, #96	; 0x60
    obs[i].sensor[s].inuse = false;
 23ea4e4:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  for (int s=0; s<MAX_SENSORS; s++) {
 23ea4e8:	f100 001c 	add.w	r0, r0, #28
 23ea4ec:	d1f8      	bne.n	23ea4e0 <_Z9OBS_Cleari+0x10>
  }
}
 23ea4ee:	4770      	bx	lr
 23ea4f0:	1006f550 	.word	0x1006f550

023ea4f4 <_Z11OBS_N2S_Addi>:
/*
 * ======================================================================================================================
 * OBS_N2S_Add() - Save OBS to N2S file
 * ======================================================================================================================
 */
void OBS_N2S_Add(int i) {
 23ea4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (obs[i].inuse) {     // Sanity check
 23ea4f8:	f640 2598 	movw	r5, #2712	; 0xa98
 23ea4fc:	4345      	muls	r5, r0
 23ea4fe:	f8df 9198 	ldr.w	r9, [pc, #408]	; 23ea698 <_Z11OBS_N2S_Addi+0x1a4>
void OBS_N2S_Add(int i) {
 23ea502:	4607      	mov	r7, r0
  if (obs[i].inuse) {     // Sanity check
 23ea504:	f819 3005 	ldrb.w	r3, [r9, r5]
void OBS_N2S_Add(int i) {
 23ea508:	b097      	sub	sp, #92	; 0x5c
  if (obs[i].inuse) {     // Sanity check
 23ea50a:	eb09 0405 	add.w	r4, r9, r5
 23ea50e:	2b00      	cmp	r3, #0
 23ea510:	f000 809a 	beq.w	23ea648 <_Z11OBS_N2S_Addi+0x154>
    char ts[32];
    
    memset(msgbuf, 0, sizeof(msgbuf));
 23ea514:	f8df 8170 	ldr.w	r8, [pc, #368]	; 23ea688 <_Z11OBS_N2S_Addi+0x194>
 23ea518:	f44f 6280 	mov.w	r2, #1024	; 0x400
 23ea51c:	2100      	movs	r1, #0
 23ea51e:	4640      	mov	r0, r8
 23ea520:	f012 fc75 	bl	23fce0e <memset>

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
 23ea524:	4b53      	ldr	r3, [pc, #332]	; (23ea674 <_Z11OBS_N2S_Addi+0x180>)
        state_(BEGIN) {
 23ea526:	2600      	movs	r6, #0
        n_(0) {
 23ea528:	9309      	str	r3, [sp, #36]	; 0x24
 23ea52a:	f240 33ff 	movw	r3, #1023	; 0x3ff

    JSONBufferWriter writer(msgbuf, sizeof(msgbuf)-1);
    writer.beginObject();
 23ea52e:	a809      	add	r0, sp, #36	; 0x24
 23ea530:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
        state_(BEGIN) {
 23ea534:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
        n_(0) {
 23ea538:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 23ea53c:	f00e fe05 	bl	23f914a <_ZN5spark10JSONWriter11beginObjectEv>

    sprintf (ts, "%d-%02d-%02dT%02d:%02d:%02d",
 23ea540:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23ea544:	f00f fb8a 	bl	23f9c5c <_ZN9TimeClass4yearEx>
 23ea548:	9007      	str	r0, [sp, #28]
 23ea54a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23ea54e:	f00f fb7b 	bl	23f9c48 <_ZN9TimeClass5monthEx>
 23ea552:	9006      	str	r0, [sp, #24]
 23ea554:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23ea558:	f00f fb6e 	bl	23f9c38 <_ZN9TimeClass3dayEx>
 23ea55c:	9005      	str	r0, [sp, #20]
 23ea55e:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23ea562:	f00f fb51 	bl	23f9c08 <_ZN9TimeClass4hourEx>
 23ea566:	4682      	mov	sl, r0
 23ea568:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23ea56c:	f00f fb54 	bl	23f9c18 <_ZN9TimeClass6minuteEx>
 23ea570:	4683      	mov	fp, r0
 23ea572:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23ea576:	f00f fb57 	bl	23f9c28 <_ZN9TimeClass6secondEx>
 23ea57a:	9b05      	ldr	r3, [sp, #20]
 23ea57c:	e9cd b002 	strd	fp, r0, [sp, #8]
 23ea580:	493d      	ldr	r1, [pc, #244]	; (23ea678 <_Z11OBS_N2S_Addi+0x184>)
 23ea582:	f8cd a004 	str.w	sl, [sp, #4]
 23ea586:	9300      	str	r3, [sp, #0]
 23ea588:	a80e      	add	r0, sp, #56	; 0x38
 23ea58a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 23ea58e:	f00d fdff 	bl	23f8190 <sprintf>
      Time.year(obs[i].ts), Time.month(obs[i].ts), Time.day(obs[i].ts),
      Time.hour(obs[i].ts), Time.minute(obs[i].ts), Time.second(obs[i].ts));

    writer.name("at").value(ts);
 23ea592:	493a      	ldr	r1, [pc, #232]	; (23ea67c <_Z11OBS_N2S_Addi+0x188>)
 23ea594:	a809      	add	r0, sp, #36	; 0x24
 23ea596:	f7fc fb7d 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ea59a:	a90e      	add	r1, sp, #56	; 0x38
 23ea59c:	f7fc fadc 	bl	23e6b58 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    writer.name("css").value(obs[i].css, 4);
 23ea5a0:	4937      	ldr	r1, [pc, #220]	; (23ea680 <_Z11OBS_N2S_Addi+0x18c>)
 23ea5a2:	a809      	add	r0, sp, #36	; 0x24
 23ea5a4:	f7fc fb76 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ea5a8:	4682      	mov	sl, r0
 23ea5aa:	6920      	ldr	r0, [r4, #16]
 23ea5ac:	f7fa fe8c 	bl	23e52c8 <__aeabi_f2d>
 23ea5b0:	ec41 0b10 	vmov	d0, r0, r1
 23ea5b4:	2104      	movs	r1, #4
 23ea5b6:	4650      	mov	r0, sl
 23ea5b8:	f00e fe1e 	bl	23f91f8 <_ZN5spark10JSONWriter5valueEdi>

    // Modify System Status and Set From Need to Send file bit
    obs[i].hth |= SSB_FROM_N2S; // Turn On Bit
 23ea5bc:	6963      	ldr	r3, [r4, #20]
    writer.name("hth").value((int) obs[i].hth);
 23ea5be:	4931      	ldr	r1, [pc, #196]	; (23ea684 <_Z11OBS_N2S_Addi+0x190>)
    obs[i].hth |= SSB_FROM_N2S; // Turn On Bit
 23ea5c0:	f043 0320 	orr.w	r3, r3, #32
 23ea5c4:	6163      	str	r3, [r4, #20]
    writer.name("hth").value((int) obs[i].hth);
 23ea5c6:	a809      	add	r0, sp, #36	; 0x24
 23ea5c8:	f7fc fb64 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ea5cc:	6961      	ldr	r1, [r4, #20]
 23ea5ce:	f00e fdc9 	bl	23f9164 <_ZN5spark10JSONWriter5valueEi>

    for (int s=0; s<MAX_SENSORS; s++) {
 23ea5d2:	3518      	adds	r5, #24
            break;
          case U_OBS :
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
            break;
          default : // Should never happen
            Output ("WhyAmIHere?");
 23ea5d4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 23ea69c <_Z11OBS_N2S_Addi+0x1a8>
 23ea5d8:	44a9      	add	r9, r5
      if (obs[i].sensor[s].inuse) {
 23ea5da:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 23ea5de:	b1a3      	cbz	r3, 23ea60a <_Z11OBS_N2S_Addi+0x116>
        switch (obs[i].sensor[s].type) {
 23ea5e0:	6a23      	ldr	r3, [r4, #32]
 23ea5e2:	2b01      	cmp	r3, #1
 23ea5e4:	d033      	beq.n	23ea64e <_Z11OBS_N2S_Addi+0x15a>
 23ea5e6:	2b02      	cmp	r3, #2
 23ea5e8:	d039      	beq.n	23ea65e <_Z11OBS_N2S_Addi+0x16a>
 23ea5ea:	2b00      	cmp	r3, #0
 23ea5ec:	d13d      	bne.n	23ea66a <_Z11OBS_N2S_Addi+0x176>
            writer.name(obs[i].sensor[s].id).value(obs[i].sensor[s].f_obs, 1);
 23ea5ee:	4649      	mov	r1, r9
 23ea5f0:	a809      	add	r0, sp, #36	; 0x24
 23ea5f2:	f7fc fb4f 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ea5f6:	4605      	mov	r5, r0
 23ea5f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23ea5fa:	f7fa fe65 	bl	23e52c8 <__aeabi_f2d>
 23ea5fe:	ec41 0b10 	vmov	d0, r0, r1
 23ea602:	2101      	movs	r1, #1
 23ea604:	4628      	mov	r0, r5
 23ea606:	f00e fdf7 	bl	23f91f8 <_ZN5spark10JSONWriter5valueEdi>
    for (int s=0; s<MAX_SENSORS; s++) {
 23ea60a:	3601      	adds	r6, #1
 23ea60c:	2e60      	cmp	r6, #96	; 0x60
 23ea60e:	f104 041c 	add.w	r4, r4, #28
 23ea612:	f109 091c 	add.w	r9, r9, #28
 23ea616:	d1e0      	bne.n	23ea5da <_Z11OBS_N2S_Addi+0xe6>
            break;
        }
      }
    }
    writer.endObject();
 23ea618:	a809      	add	r0, sp, #36	; 0x24
 23ea61a:	f00e fd80 	bl	23f911e <_ZN5spark10JSONWriter9endObjectEv>

    sprintf (msgbuf+strlen(msgbuf), ",FS");  // Add Particle Event Type after JSON structure
 23ea61e:	481a      	ldr	r0, [pc, #104]	; (23ea688 <_Z11OBS_N2S_Addi+0x194>)
 23ea620:	f7fb fcea 	bl	23e5ff8 <strlen>
 23ea624:	4919      	ldr	r1, [pc, #100]	; (23ea68c <_Z11OBS_N2S_Addi+0x198>)
 23ea626:	4440      	add	r0, r8
 23ea628:	f012 fc66 	bl	23fcef8 <strcpy>
    SD_NeedToSend_Add(msgbuf); // Save to N2F File
 23ea62c:	4816      	ldr	r0, [pc, #88]	; (23ea688 <_Z11OBS_N2S_Addi+0x194>)
 23ea62e:	f7ff fd25 	bl	23ea07c <_Z17SD_NeedToSend_AddPc>
    sprintf (Buffer32Bytes, "OBS->%d Add N2S", i);
 23ea632:	463a      	mov	r2, r7
 23ea634:	4916      	ldr	r1, [pc, #88]	; (23ea690 <_Z11OBS_N2S_Addi+0x19c>)
 23ea636:	4817      	ldr	r0, [pc, #92]	; (23ea694 <_Z11OBS_N2S_Addi+0x1a0>)
 23ea638:	f00d fdaa 	bl	23f8190 <sprintf>
    Output(Buffer32Bytes);
 23ea63c:	4815      	ldr	r0, [pc, #84]	; (23ea694 <_Z11OBS_N2S_Addi+0x1a0>)
 23ea63e:	f7fc fdd1 	bl	23e71e4 <_Z6OutputPKc>
    Serial_write (msgbuf);
 23ea642:	4811      	ldr	r0, [pc, #68]	; (23ea688 <_Z11OBS_N2S_Addi+0x194>)
 23ea644:	f7fc fda4 	bl	23e7190 <_Z12Serial_writePKc>
  }
}
 23ea648:	b017      	add	sp, #92	; 0x5c
 23ea64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            writer.name(obs[i].sensor[s].id).value(obs[i].sensor[s].i_obs);
 23ea64e:	4649      	mov	r1, r9
 23ea650:	a809      	add	r0, sp, #36	; 0x24
 23ea652:	f7fc fb1f 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ea656:	6aa1      	ldr	r1, [r4, #40]	; 0x28
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
 23ea658:	f00e fd84 	bl	23f9164 <_ZN5spark10JSONWriter5valueEi>
            break;
 23ea65c:	e7d5      	b.n	23ea60a <_Z11OBS_N2S_Addi+0x116>
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
 23ea65e:	4649      	mov	r1, r9
 23ea660:	a809      	add	r0, sp, #36	; 0x24
 23ea662:	f7fc fb17 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ea666:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 23ea668:	e7f6      	b.n	23ea658 <_Z11OBS_N2S_Addi+0x164>
            Output ("WhyAmIHere?");
 23ea66a:	4650      	mov	r0, sl
 23ea66c:	f7fc fdba 	bl	23e71e4 <_Z6OutputPKc>
            break;
 23ea670:	e7cb      	b.n	23ea60a <_Z11OBS_N2S_Addi+0x116>
 23ea672:	bf00      	nop
 23ea674:	023ffaac 	.word	0x023ffaac
 23ea678:	023fd365 	.word	0x023fd365
 23ea67c:	023fdc91 	.word	0x023fdc91
 23ea680:	023fdc94 	.word	0x023fdc94
 23ea684:	023fdc98 	.word	0x023fdc98
 23ea688:	1006f140 	.word	0x1006f140
 23ea68c:	023fdca8 	.word	0x023fdca8
 23ea690:	023fdcac 	.word	0x023fdcac
 23ea694:	1006a2bf 	.word	0x1006a2bf
 23ea698:	1006f550 	.word	0x1006f550
 23ea69c:	023fdc9c 	.word	0x023fdc9c

023ea6a0 <_Z17OBS_FS_Build_JSONi>:
/*
 * ======================================================================================================================
 * OBS_FS_Build_JSON() - Create JSON observation in msgbuf
 * ======================================================================================================================
 */
bool OBS_FS_Build_JSON(int i) {
 23ea6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (obs[i].inuse) {     // Sanity check
 23ea6a4:	f640 2498 	movw	r4, #2712	; 0xa98
 23ea6a8:	4344      	muls	r4, r0
 23ea6aa:	f8df 814c 	ldr.w	r8, [pc, #332]	; 23ea7f8 <_Z17OBS_FS_Build_JSONi+0x158>
bool OBS_FS_Build_JSON(int i) {
 23ea6ae:	b095      	sub	sp, #84	; 0x54
  if (obs[i].inuse) {     // Sanity check
 23ea6b0:	f818 7004 	ldrb.w	r7, [r8, r4]
 23ea6b4:	eb08 0504 	add.w	r5, r8, r4
 23ea6b8:	2f00      	cmp	r7, #0
 23ea6ba:	d07b      	beq.n	23ea7b4 <_Z17OBS_FS_Build_JSONi+0x114>
    char ts[32];
    
    memset(msgbuf, 0, sizeof(msgbuf));
 23ea6bc:	4b48      	ldr	r3, [pc, #288]	; (23ea7e0 <_Z17OBS_FS_Build_JSONi+0x140>)
 23ea6be:	2100      	movs	r1, #0
 23ea6c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 23ea6c4:	4618      	mov	r0, r3
 23ea6c6:	f012 fba2 	bl	23fce0e <memset>
        state_(BEGIN) {
 23ea6ca:	2600      	movs	r6, #0
        n_(0) {
 23ea6cc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 23ea6d0:	4a44      	ldr	r2, [pc, #272]	; (23ea7e4 <_Z17OBS_FS_Build_JSONi+0x144>)
 23ea6d2:	9009      	str	r0, [sp, #36]	; 0x24

    JSONBufferWriter writer(msgbuf, sizeof(msgbuf)-1);
    writer.beginObject();
 23ea6d4:	a807      	add	r0, sp, #28
 23ea6d6:	e9cd 360a 	strd	r3, r6, [sp, #40]	; 0x28
 23ea6da:	9207      	str	r2, [sp, #28]
        state_(BEGIN) {
 23ea6dc:	f88d 6020 	strb.w	r6, [sp, #32]
 23ea6e0:	f00e fd33 	bl	23f914a <_ZN5spark10JSONWriter11beginObjectEv>

    sprintf (ts, "%d-%02d-%02dT%02d:%02d:%02d",
 23ea6e4:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23ea6e8:	f00f fab8 	bl	23f9c5c <_ZN9TimeClass4yearEx>
 23ea6ec:	9005      	str	r0, [sp, #20]
 23ea6ee:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23ea6f2:	f00f faa9 	bl	23f9c48 <_ZN9TimeClass5monthEx>
 23ea6f6:	9004      	str	r0, [sp, #16]
 23ea6f8:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23ea6fc:	f00f fa9c 	bl	23f9c38 <_ZN9TimeClass3dayEx>
 23ea700:	4681      	mov	r9, r0
 23ea702:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23ea706:	f00f fa7f 	bl	23f9c08 <_ZN9TimeClass4hourEx>
 23ea70a:	4682      	mov	sl, r0
 23ea70c:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23ea710:	f00f fa82 	bl	23f9c18 <_ZN9TimeClass6minuteEx>
 23ea714:	4683      	mov	fp, r0
 23ea716:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23ea71a:	f00f fa85 	bl	23f9c28 <_ZN9TimeClass6secondEx>
 23ea71e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 23ea722:	e9cd b002 	strd	fp, r0, [sp, #8]
 23ea726:	e9cd 9a00 	strd	r9, sl, [sp]
 23ea72a:	492f      	ldr	r1, [pc, #188]	; (23ea7e8 <_Z17OBS_FS_Build_JSONi+0x148>)
 23ea72c:	a80c      	add	r0, sp, #48	; 0x30
 23ea72e:	f00d fd2f 	bl	23f8190 <sprintf>
      Time.year(obs[i].ts), Time.month(obs[i].ts), Time.day(obs[i].ts),
      Time.hour(obs[i].ts), Time.minute(obs[i].ts), Time.second(obs[i].ts));

    writer.name("at").value(ts);
 23ea732:	492e      	ldr	r1, [pc, #184]	; (23ea7ec <_Z17OBS_FS_Build_JSONi+0x14c>)
 23ea734:	a807      	add	r0, sp, #28
 23ea736:	f7fc faad 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ea73a:	a90c      	add	r1, sp, #48	; 0x30
 23ea73c:	f7fc fa0c 	bl	23e6b58 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    writer.name("css").value(obs[i].css, 4);
 23ea740:	492b      	ldr	r1, [pc, #172]	; (23ea7f0 <_Z17OBS_FS_Build_JSONi+0x150>)
 23ea742:	a807      	add	r0, sp, #28
 23ea744:	f7fc faa6 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ea748:	4681      	mov	r9, r0
 23ea74a:	6928      	ldr	r0, [r5, #16]
 23ea74c:	f7fa fdbc 	bl	23e52c8 <__aeabi_f2d>
 23ea750:	ec41 0b10 	vmov	d0, r0, r1
 23ea754:	2104      	movs	r1, #4
 23ea756:	4648      	mov	r0, r9
 23ea758:	f00e fd4e 	bl	23f91f8 <_ZN5spark10JSONWriter5valueEdi>
    writer.name("hth").value((int) obs[i].hth);
 23ea75c:	4925      	ldr	r1, [pc, #148]	; (23ea7f4 <_Z17OBS_FS_Build_JSONi+0x154>)
 23ea75e:	a807      	add	r0, sp, #28
 23ea760:	f7fc fa98 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ea764:	6969      	ldr	r1, [r5, #20]
 23ea766:	f00e fcfd 	bl	23f9164 <_ZN5spark10JSONWriter5valueEi>

    for (int s=0; s<MAX_SENSORS; s++) {
 23ea76a:	3418      	adds	r4, #24
            break;
          case U_OBS :
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
            break;
          default : // Should never happen
            Output ("WhyAmIHere?");
 23ea76c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 23ea7fc <_Z17OBS_FS_Build_JSONi+0x15c>
 23ea770:	4444      	add	r4, r8
      if (obs[i].sensor[s].inuse) {
 23ea772:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 23ea776:	b19b      	cbz	r3, 23ea7a0 <_Z17OBS_FS_Build_JSONi+0x100>
        switch (obs[i].sensor[s].type) {
 23ea778:	6a2b      	ldr	r3, [r5, #32]
 23ea77a:	2b01      	cmp	r3, #1
 23ea77c:	d01e      	beq.n	23ea7bc <_Z17OBS_FS_Build_JSONi+0x11c>
 23ea77e:	2b02      	cmp	r3, #2
 23ea780:	d024      	beq.n	23ea7cc <_Z17OBS_FS_Build_JSONi+0x12c>
 23ea782:	bb4b      	cbnz	r3, 23ea7d8 <_Z17OBS_FS_Build_JSONi+0x138>
            writer.name(obs[i].sensor[s].id).value(obs[i].sensor[s].f_obs, 1);
 23ea784:	4621      	mov	r1, r4
 23ea786:	a807      	add	r0, sp, #28
 23ea788:	f7fc fa84 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ea78c:	4680      	mov	r8, r0
 23ea78e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 23ea790:	f7fa fd9a 	bl	23e52c8 <__aeabi_f2d>
 23ea794:	ec41 0b10 	vmov	d0, r0, r1
 23ea798:	2101      	movs	r1, #1
 23ea79a:	4640      	mov	r0, r8
 23ea79c:	f00e fd2c 	bl	23f91f8 <_ZN5spark10JSONWriter5valueEdi>
    for (int s=0; s<MAX_SENSORS; s++) {
 23ea7a0:	3601      	adds	r6, #1
 23ea7a2:	2e60      	cmp	r6, #96	; 0x60
 23ea7a4:	f105 051c 	add.w	r5, r5, #28
 23ea7a8:	f104 041c 	add.w	r4, r4, #28
 23ea7ac:	d1e1      	bne.n	23ea772 <_Z17OBS_FS_Build_JSONi+0xd2>
            break;
        }
      }
    }
    writer.endObject();
 23ea7ae:	a807      	add	r0, sp, #28
 23ea7b0:	f00e fcb5 	bl	23f911e <_ZN5spark10JSONWriter9endObjectEv>
    return (true);
  }
  else {
    return (false);
  }
}
 23ea7b4:	4638      	mov	r0, r7
 23ea7b6:	b015      	add	sp, #84	; 0x54
 23ea7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            writer.name(obs[i].sensor[s].id).value(obs[i].sensor[s].i_obs);
 23ea7bc:	4621      	mov	r1, r4
 23ea7be:	a807      	add	r0, sp, #28
 23ea7c0:	f7fc fa68 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ea7c4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
 23ea7c6:	f00e fccd 	bl	23f9164 <_ZN5spark10JSONWriter5valueEi>
            break;
 23ea7ca:	e7e9      	b.n	23ea7a0 <_Z17OBS_FS_Build_JSONi+0x100>
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
 23ea7cc:	4621      	mov	r1, r4
 23ea7ce:	a807      	add	r0, sp, #28
 23ea7d0:	f7fc fa60 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ea7d4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 23ea7d6:	e7f6      	b.n	23ea7c6 <_Z17OBS_FS_Build_JSONi+0x126>
            Output ("WhyAmIHere?");
 23ea7d8:	4648      	mov	r0, r9
 23ea7da:	f7fc fd03 	bl	23e71e4 <_Z6OutputPKc>
            break;
 23ea7de:	e7df      	b.n	23ea7a0 <_Z17OBS_FS_Build_JSONi+0x100>
 23ea7e0:	1006f140 	.word	0x1006f140
 23ea7e4:	023ffaac 	.word	0x023ffaac
 23ea7e8:	023fd365 	.word	0x023fd365
 23ea7ec:	023fdc91 	.word	0x023fdc91
 23ea7f0:	023fdc94 	.word	0x023fdc94
 23ea7f4:	023fdc98 	.word	0x023fdc98
 23ea7f8:	1006f550 	.word	0x1006f550
 23ea7fc:	023fdc9c 	.word	0x023fdc9c

023ea800 <_Z20OBS_Relay_Build_JSONv>:
 */
int OBS_Relay_Build_JSON() {
  LORA_MSG_RELAY_STR *m;
  int relay_type = 0;

  memset(msgbuf, 0, sizeof(msgbuf));
 23ea800:	f44f 6280 	mov.w	r2, #1024	; 0x400
 23ea804:	2100      	movs	r1, #0
int OBS_Relay_Build_JSON() {
 23ea806:	b538      	push	{r3, r4, r5, lr}
  memset(msgbuf, 0, sizeof(msgbuf));
 23ea808:	480c      	ldr	r0, [pc, #48]	; (23ea83c <_Z20OBS_Relay_Build_JSONv+0x3c>)
 23ea80a:	f012 fb00 	bl	23fce0e <memset>
  JSONBufferWriter writer(msgbuf, sizeof(msgbuf)-1);

  // Locate message we need to log
  int i = lora_relay_need2log_idx();
 23ea80e:	f7fc fef5 	bl	23e75fc <_Z23lora_relay_need2log_idxv>
  if (i >= 0) {
 23ea812:	2800      	cmp	r0, #0
 23ea814:	db10      	blt.n	23ea838 <_Z20OBS_Relay_Build_JSONv+0x38>
    m = &lora_msg_relay[i];
 23ea816:	f44f 7484 	mov.w	r4, #264	; 0x108
 23ea81a:	4344      	muls	r4, r0
    strncpy (msgbuf, m->message, LORA_RELAY_MSG_LENGTH-1); // minus 1 so last byte in array will always be null
 23ea81c:	4d08      	ldr	r5, [pc, #32]	; (23ea840 <_Z20OBS_Relay_Build_JSONv+0x40>)
 23ea81e:	f104 0108 	add.w	r1, r4, #8
 23ea822:	22ff      	movs	r2, #255	; 0xff
 23ea824:	4805      	ldr	r0, [pc, #20]	; (23ea83c <_Z20OBS_Relay_Build_JSONv+0x3c>)
 23ea826:	4429      	add	r1, r5
 23ea828:	f012 fb9f 	bl	23fcf6a <strncpy>
    relay_type = m->message_type;
 23ea82c:	1928      	adds	r0, r5, r4
 23ea82e:	6844      	ldr	r4, [r0, #4]
    lora_relay_msg_free(m);
 23ea830:	f7fc febe 	bl	23e75b0 <_Z19lora_relay_msg_freeP18LORA_MSG_RELAY_STR>
  }
  return (relay_type);
}
 23ea834:	4620      	mov	r0, r4
 23ea836:	bd38      	pop	{r3, r4, r5, pc}
  int relay_type = 0;
 23ea838:	2400      	movs	r4, #0
  return (relay_type);
 23ea83a:	e7fb      	b.n	23ea834 <_Z20OBS_Relay_Build_JSONv+0x34>
 23ea83c:	1006f140 	.word	0x1006f140
 23ea840:	1006aed8 	.word	0x1006aed8

023ea844 <_Z7OBS_Logi>:
/*
 * ======================================================================================================================
 * OBS_Log() - Save OBS to Log file
 * ======================================================================================================================
 */
void OBS_Log(int i) {
 23ea844:	b507      	push	{r0, r1, r2, lr}
 23ea846:	9001      	str	r0, [sp, #4]
  if (OBS_FS_Build_JSON(i)) {
 23ea848:	f7ff ff2a 	bl	23ea6a0 <_Z17OBS_FS_Build_JSONi>
 23ea84c:	9a01      	ldr	r2, [sp, #4]
 23ea84e:	b178      	cbz	r0, 23ea870 <_Z7OBS_Logi+0x2c>
    sprintf (Buffer32Bytes, "OBS[%d]->SD", i);
 23ea850:	4909      	ldr	r1, [pc, #36]	; (23ea878 <_Z7OBS_Logi+0x34>)
 23ea852:	480a      	ldr	r0, [pc, #40]	; (23ea87c <_Z7OBS_Logi+0x38>)
 23ea854:	f00d fc9c 	bl	23f8190 <sprintf>
    Output(Buffer32Bytes);
 23ea858:	4808      	ldr	r0, [pc, #32]	; (23ea87c <_Z7OBS_Logi+0x38>)
 23ea85a:	f7fc fcc3 	bl	23e71e4 <_Z6OutputPKc>
    Serial_write (msgbuf);
 23ea85e:	4808      	ldr	r0, [pc, #32]	; (23ea880 <_Z7OBS_Logi+0x3c>)
 23ea860:	f7fc fc96 	bl	23e7190 <_Z12Serial_writePKc>

    SD_LogObservation(msgbuf);
 23ea864:	4806      	ldr	r0, [pc, #24]	; (23ea880 <_Z7OBS_Logi+0x3c>)
  }
}
 23ea866:	b003      	add	sp, #12
 23ea868:	f85d eb04 	ldr.w	lr, [sp], #4
    SD_LogObservation(msgbuf);
 23ea86c:	f7ff bb68 	b.w	23e9f40 <_Z17SD_LogObservationPc>
}
 23ea870:	b003      	add	sp, #12
 23ea872:	f85d fb04 	ldr.w	pc, [sp], #4
 23ea876:	bf00      	nop
 23ea878:	023fdcbc 	.word	0x023fdcbc
 23ea87c:	1006a2bf 	.word	0x1006a2bf
 23ea880:	1006f140 	.word	0x1006f140

023ea884 <_Z15OBS_N2S_SaveAllv>:
/*
 * ======================================================================================================================
 * OBS_N2S_SaveAll() - Save All N Observations to Need2Send File
 * ======================================================================================================================
 */
void OBS_N2S_SaveAll() {
 23ea884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int relay_type;

  // Save All Station Observations to N2S file
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
 23ea886:	2400      	movs	r4, #0
    OBS_N2S_Add (i);
 23ea888:	4620      	mov	r0, r4
 23ea88a:	f7ff fe33 	bl	23ea4f4 <_Z11OBS_N2S_Addi>
    OBS_Clear(i);
 23ea88e:	4620      	mov	r0, r4
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
 23ea890:	3401      	adds	r4, #1
    OBS_Clear(i);
 23ea892:	f7ff fe1d 	bl	23ea4d0 <_Z9OBS_Cleari>
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
 23ea896:	2c11      	cmp	r4, #17
 23ea898:	d1f6      	bne.n	23ea888 <_Z15OBS_N2S_SaveAllv+0x4>
  }

  // Save All Rain and Soil LoRa Observations to N2S file
  while (lora_relay_need2log()) {
   relay_type = OBS_Relay_Build_JSON(); // This removed msg from relay structure and places it in msgbuf
    sprintf (msgbuf+strlen(msgbuf), ", %s", relay_msgtypes[relay_type]);  // Add Particle Event Type after JSON structure
 23ea89a:	4d0e      	ldr	r5, [pc, #56]	; (23ea8d4 <_Z15OBS_N2S_SaveAllv+0x50>)
 23ea89c:	4f0e      	ldr	r7, [pc, #56]	; (23ea8d8 <_Z15OBS_N2S_SaveAllv+0x54>)
 23ea89e:	4e0f      	ldr	r6, [pc, #60]	; (23ea8dc <_Z15OBS_N2S_SaveAllv+0x58>)
  while (lora_relay_need2log()) {
 23ea8a0:	f7fc fe8e 	bl	23e75c0 <_Z19lora_relay_need2logv>
 23ea8a4:	b1a8      	cbz	r0, 23ea8d2 <_Z15OBS_N2S_SaveAllv+0x4e>
   relay_type = OBS_Relay_Build_JSON(); // This removed msg from relay structure and places it in msgbuf
 23ea8a6:	f7ff ffab 	bl	23ea800 <_Z20OBS_Relay_Build_JSONv>
 23ea8aa:	4604      	mov	r4, r0
    sprintf (msgbuf+strlen(msgbuf), ", %s", relay_msgtypes[relay_type]);  // Add Particle Event Type after JSON structure
 23ea8ac:	4809      	ldr	r0, [pc, #36]	; (23ea8d4 <_Z15OBS_N2S_SaveAllv+0x50>)
 23ea8ae:	f7fb fba3 	bl	23e5ff8 <strlen>
 23ea8b2:	4631      	mov	r1, r6
 23ea8b4:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
 23ea8b8:	4428      	add	r0, r5
 23ea8ba:	f00d fc69 	bl	23f8190 <sprintf>
    SD_NeedToSend_Add(msgbuf); // Save to N2F File
 23ea8be:	4805      	ldr	r0, [pc, #20]	; (23ea8d4 <_Z15OBS_N2S_SaveAllv+0x50>)
 23ea8c0:	f7ff fbdc 	bl	23ea07c <_Z17SD_NeedToSend_AddPc>
    Output("LR->N2S");
 23ea8c4:	4806      	ldr	r0, [pc, #24]	; (23ea8e0 <_Z15OBS_N2S_SaveAllv+0x5c>)
 23ea8c6:	f7fc fc8d 	bl	23e71e4 <_Z6OutputPKc>
    Serial_write (msgbuf); 
 23ea8ca:	4802      	ldr	r0, [pc, #8]	; (23ea8d4 <_Z15OBS_N2S_SaveAllv+0x50>)
 23ea8cc:	f7fc fc60 	bl	23e7190 <_Z12Serial_writePKc>
  while (lora_relay_need2log()) {
 23ea8d0:	e7e6      	b.n	23ea8a0 <_Z15OBS_N2S_SaveAllv+0x1c>
  }
}
 23ea8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23ea8d4:	1006f140 	.word	0x1006f140
 23ea8d8:	1006a200 	.word	0x1006a200
 23ea8dc:	023fdcc8 	.word	0x023fdcc8
 23ea8e0:	023fdccd 	.word	0x023fdccd

023ea8e4 <_Z8OBS_Lastv>:
 * OBS_Last() - Find Last OBS and return index or -1 if empty
 * ======================================================================================================================
 */
int OBS_Last() {
  // Scan OBS for free spot
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23ea8e4:	2000      	movs	r0, #0
    if (obs[i].inuse == false) {
 23ea8e6:	f640 2398 	movw	r3, #2712	; 0xa98
 23ea8ea:	4a06      	ldr	r2, [pc, #24]	; (23ea904 <_Z8OBS_Lastv+0x20>)
 23ea8ec:	fb03 f100 	mul.w	r1, r3, r0
 23ea8f0:	5c89      	ldrb	r1, [r1, r2]
 23ea8f2:	b909      	cbnz	r1, 23ea8f8 <_Z8OBS_Lastv+0x14>
      if (i == 0) {
        return (-1);
      }
      else {
        return (i-1);
 23ea8f4:	3801      	subs	r0, #1
 23ea8f6:	4770      	bx	lr
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23ea8f8:	3001      	adds	r0, #1
 23ea8fa:	2811      	cmp	r0, #17
 23ea8fc:	d1f6      	bne.n	23ea8ec <_Z8OBS_Lastv+0x8>
      }
    }
  }
  // Arrary full, Never found an empty, return last in Array
  return (MAX_ONE_MINUTE_OBS-1);
 23ea8fe:	2010      	movs	r0, #16
}
 23ea900:	4770      	bx	lr
 23ea902:	bf00      	nop
 23ea904:	1006f550 	.word	0x1006f550

023ea908 <_Z8OBS_Fullv>:
 * OBS_Full() - Return true if there are open spots
 * ======================================================================================================================
 */
bool OBS_Full() {
  // Scan OBS for free spot
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23ea908:	2300      	movs	r3, #0
    if (obs[i].inuse == false) {
 23ea90a:	f640 2298 	movw	r2, #2712	; 0xa98
 23ea90e:	4904      	ldr	r1, [pc, #16]	; (23ea920 <_Z8OBS_Fullv+0x18>)
 23ea910:	fb02 f003 	mul.w	r0, r2, r3
 23ea914:	5c40      	ldrb	r0, [r0, r1]
 23ea916:	b110      	cbz	r0, 23ea91e <_Z8OBS_Fullv+0x16>
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23ea918:	3301      	adds	r3, #1
 23ea91a:	2b11      	cmp	r3, #17
 23ea91c:	d1f8      	bne.n	23ea910 <_Z8OBS_Fullv+0x8>
      return (false);
    }
  }
  return (true);
}
 23ea91e:	4770      	bx	lr
 23ea920:	1006f550 	.word	0x1006f550

023ea924 <_Z8OBS_Openv>:
/*
 * ======================================================================================================================
 * OBS_Open() - Find a free OBS and return index
 * ======================================================================================================================
 */
int OBS_Open() {
 23ea924:	b508      	push	{r3, lr}
  // Scan OBS for free spot
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23ea926:	2000      	movs	r0, #0
    if (obs[i].inuse == false) {
 23ea928:	f640 2398 	movw	r3, #2712	; 0xa98
 23ea92c:	4a07      	ldr	r2, [pc, #28]	; (23ea94c <_Z8OBS_Openv+0x28>)
 23ea92e:	fb03 f100 	mul.w	r1, r3, r0
 23ea932:	5c89      	ldrb	r1, [r1, r2]
 23ea934:	b141      	cbz	r1, 23ea948 <_Z8OBS_Openv+0x24>
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23ea936:	3001      	adds	r0, #1
 23ea938:	2811      	cmp	r0, #17
 23ea93a:	d1f8      	bne.n	23ea92e <_Z8OBS_Openv+0xa>
      return (i);
    }
  }

  // All Observations are inuse
  Output ("OBS[ALL]->N2S");
 23ea93c:	4804      	ldr	r0, [pc, #16]	; (23ea950 <_Z8OBS_Openv+0x2c>)
 23ea93e:	f7fc fc51 	bl	23e71e4 <_Z6OutputPKc>

  // Save All N Observations to Need2Send File
  OBS_N2S_SaveAll();
 23ea942:	f7ff ff9f 	bl	23ea884 <_Z15OBS_N2S_SaveAllv>
 23ea946:	2000      	movs	r0, #0

  // All OBS are Clear so return the first OBS 
  return (0);
}
 23ea948:	bd08      	pop	{r3, pc}
 23ea94a:	bf00      	nop
 23ea94c:	1006f550 	.word	0x1006f550
 23ea950:	023fdcd5 	.word	0x023fdcd5

023ea954 <_Z10GetPinNametPc>:
void GetPinName(pin_t pin, char *pinname) {
 23ea954:	b530      	push	{r4, r5, lr}
 23ea956:	b0bd      	sub	sp, #244	; 0xf4
 23ea958:	4605      	mov	r5, r0
 23ea95a:	460c      	mov	r4, r1
  const PinMap pinTable[] = {
 23ea95c:	22f0      	movs	r2, #240	; 0xf0
 23ea95e:	4668      	mov	r0, sp
 23ea960:	490b      	ldr	r1, [pc, #44]	; (23ea990 <_Z10GetPinNametPc+0x3c>)
 23ea962:	f012 fa47 	bl	23fcdf4 <memcpy>
  for (size_t i = 0; i < sizeof(pinTable) / sizeof(pinTable[0]); ++i) {
 23ea966:	2300      	movs	r3, #0
      if (pin == pinTable[i].pin) {
 23ea968:	f83d 2033 	ldrh.w	r2, [sp, r3, lsl #3]
 23ea96c:	42aa      	cmp	r2, r5
 23ea96e:	d10a      	bne.n	23ea986 <_Z10GetPinNametPc+0x32>
          strcpy(pinname, pinTable[i].name);
 23ea970:	aa3c      	add	r2, sp, #240	; 0xf0
 23ea972:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 23ea976:	f853 1cec 	ldr.w	r1, [r3, #-236]
  strcpy(pinname, "NF");
 23ea97a:	4620      	mov	r0, r4
}
 23ea97c:	b03d      	add	sp, #244	; 0xf4
 23ea97e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  strcpy(pinname, "NF");
 23ea982:	f012 bab9 	b.w	23fcef8 <strcpy>
  for (size_t i = 0; i < sizeof(pinTable) / sizeof(pinTable[0]); ++i) {
 23ea986:	3301      	adds	r3, #1
 23ea988:	2b1e      	cmp	r3, #30
 23ea98a:	d1ed      	bne.n	23ea968 <_Z10GetPinNametPc+0x14>
  strcpy(pinname, "NF");
 23ea98c:	4901      	ldr	r1, [pc, #4]	; (23ea994 <_Z10GetPinNametPc+0x40>)
 23ea98e:	e7f4      	b.n	23ea97a <_Z10GetPinNametPc+0x26>
 23ea990:	023fd14c 	.word	0x023fd14c
 23ea994:	023fd753 	.word	0x023fd753

023ea998 <_Z11DeviceResetv>:
void DeviceReset() {
 23ea998:	b508      	push	{r3, lr}
  digitalWrite(REBOOT_PIN, HIGH);
 23ea99a:	2101      	movs	r1, #1
 23ea99c:	2013      	movs	r0, #19
 23ea99e:	f00f fc28 	bl	23fa1f2 <digitalWrite>
  delay(5000);
 23ea9a2:	f241 3088 	movw	r0, #5000	; 0x1388
 23ea9a6:	f00d fc8d 	bl	23f82c4 <delay>
  digitalWrite(REBOOT_PIN, LOW);
 23ea9aa:	2100      	movs	r1, #0
 23ea9ac:	2013      	movs	r0, #19
 23ea9ae:	f00f fc20 	bl	23fa1f2 <digitalWrite>
  delay(2000); 
 23ea9b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23ea9b6:	f00d fc85 	bl	23f82c4 <delay>
}
 23ea9ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  System.reset();
 23ea9be:	f00f b8b9 	b.w	23f9b34 <_ZN11SystemClass5resetEv>
	...

023ea9c4 <_Z17Function_DoAction6String>:
int Function_DoAction(String s) {
 23ea9c4:	b530      	push	{r4, r5, lr}
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
 23ea9c6:	6805      	ldr	r5, [r0, #0]
  if (strcmp (s,"REBOOT") == 0) {  // Reboot - We loose untransmitted observations. But they are save to SD.
 23ea9c8:	498c      	ldr	r1, [pc, #560]	; (23eabfc <_Z17Function_DoAction6String+0x238>)
 23ea9ca:	4628      	mov	r0, r5
int Function_DoAction(String s) {
 23ea9cc:	b095      	sub	sp, #84	; 0x54
  if (strcmp (s,"REBOOT") == 0) {  // Reboot - We loose untransmitted observations. But they are save to SD.
 23ea9ce:	f7fb fb09 	bl	23e5fe4 <strcmp>
 23ea9d2:	4604      	mov	r4, r0
 23ea9d4:	b968      	cbnz	r0, 23ea9f2 <_Z17Function_DoAction6String+0x2e>
    Output("DoAction:REBOOT");     // Do a SEND before a REBOOT to address the abive issue.
 23ea9d6:	488a      	ldr	r0, [pc, #552]	; (23eac00 <_Z17Function_DoAction6String+0x23c>)
 23ea9d8:	f7fc fc04 	bl	23e71e4 <_Z6OutputPKc>
    EEPROM_SaveUnreportedRain();
 23ea9dc:	f7ff f87c 	bl	23e9ad8 <_Z25EEPROM_SaveUnreportedRainv>
    delay(1000);
 23ea9e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23ea9e4:	f00d fc6e 	bl	23f82c4 <delay>
    DeviceReset();
 23ea9e8:	f7ff ffd6 	bl	23ea998 <_Z11DeviceResetv>
}
 23ea9ec:	4620      	mov	r0, r4
 23ea9ee:	b015      	add	sp, #84	; 0x54
 23ea9f0:	bd30      	pop	{r4, r5, pc}
  else if (strcmp (s,"INFO") == 0) {  // Send System Information
 23ea9f2:	4628      	mov	r0, r5
 23ea9f4:	4983      	ldr	r1, [pc, #524]	; (23eac04 <_Z17Function_DoAction6String+0x240>)
 23ea9f6:	f7fb faf5 	bl	23e5fe4 <strcmp>
 23ea9fa:	4604      	mov	r4, r0
 23ea9fc:	b930      	cbnz	r0, 23eaa0c <_Z17Function_DoAction6String+0x48>
    Output("DoAction:INFO");
 23ea9fe:	4882      	ldr	r0, [pc, #520]	; (23eac08 <_Z17Function_DoAction6String+0x244>)
 23eaa00:	f7fc fbf0 	bl	23e71e4 <_Z6OutputPKc>
    SendSystemInformation=true;
 23eaa04:	2201      	movs	r2, #1
 23eaa06:	4b81      	ldr	r3, [pc, #516]	; (23eac0c <_Z17Function_DoAction6String+0x248>)
 23eaa08:	701a      	strb	r2, [r3, #0]
    return(0);  
 23eaa0a:	e7ef      	b.n	23ea9ec <_Z17Function_DoAction6String+0x28>
  else if (strcmp (s,"SEND") == 0) {  // Send OBS Now
 23eaa0c:	4628      	mov	r0, r5
 23eaa0e:	4980      	ldr	r1, [pc, #512]	; (23eac10 <_Z17Function_DoAction6String+0x24c>)
 23eaa10:	f7fb fae8 	bl	23e5fe4 <strcmp>
 23eaa14:	4604      	mov	r4, r0
 23eaa16:	b940      	cbnz	r0, 23eaa2a <_Z17Function_DoAction6String+0x66>
    Output("DoAction:SEND");
 23eaa18:	487e      	ldr	r0, [pc, #504]	; (23eac14 <_Z17Function_DoAction6String+0x250>)
 23eaa1a:	f7fc fbe3 	bl	23e71e4 <_Z6OutputPKc>
    LastTransmitTime=0;
 23eaa1e:	2000      	movs	r0, #0
 23eaa20:	2100      	movs	r1, #0
 23eaa22:	4b7d      	ldr	r3, [pc, #500]	; (23eac18 <_Z17Function_DoAction6String+0x254>)
 23eaa24:	e9c3 0100 	strd	r0, r1, [r3]
    return(0);  
 23eaa28:	e7e0      	b.n	23ea9ec <_Z17Function_DoAction6String+0x28>
  else if (strcmp (s,"CRT") == 0) { // Clear Rain Totals
 23eaa2a:	4628      	mov	r0, r5
 23eaa2c:	497b      	ldr	r1, [pc, #492]	; (23eac1c <_Z17Function_DoAction6String+0x258>)
 23eaa2e:	f7fb fad9 	bl	23e5fe4 <strcmp>
 23eaa32:	4604      	mov	r4, r0
 23eaa34:	b948      	cbnz	r0, 23eaa4a <_Z17Function_DoAction6String+0x86>
    time32_t current_time = Time.now();
 23eaa36:	f00f f949 	bl	23f9ccc <_ZN9TimeClass3nowEv>
 23eaa3a:	4605      	mov	r5, r0
    Output("DoAction:CRT");
 23eaa3c:	4878      	ldr	r0, [pc, #480]	; (23eac20 <_Z17Function_DoAction6String+0x25c>)
 23eaa3e:	f7fc fbd1 	bl	23e71e4 <_Z6OutputPKc>
    EEPROM_ClearRainTotals(current_time);
 23eaa42:	4628      	mov	r0, r5
 23eaa44:	f7fe ff30 	bl	23e98a8 <_Z22EEPROM_ClearRainTotalsl>
    return(0);
 23eaa48:	e7d0      	b.n	23ea9ec <_Z17Function_DoAction6String+0x28>
  else if (strcmp (s,"A4DIST") == 0) { // Set A4 State File to Distance
 23eaa4a:	4628      	mov	r0, r5
 23eaa4c:	4975      	ldr	r1, [pc, #468]	; (23eac24 <_Z17Function_DoAction6String+0x260>)
 23eaa4e:	f7fb fac9 	bl	23e5fe4 <strcmp>
 23eaa52:	4604      	mov	r4, r0
 23eaa54:	2800      	cmp	r0, #0
 23eaa56:	d158      	bne.n	23eab0a <_Z17Function_DoAction6String+0x146>
    Output("DoAction:A4DIST");
 23eaa58:	4873      	ldr	r0, [pc, #460]	; (23eac28 <_Z17Function_DoAction6String+0x264>)
 23eaa5a:	f7fc fbc3 	bl	23e71e4 <_Z6OutputPKc>
    if (SD_exists) {
 23eaa5e:	4b73      	ldr	r3, [pc, #460]	; (23eac2c <_Z17Function_DoAction6String+0x268>)
 23eaa60:	781b      	ldrb	r3, [r3, #0]
 23eaa62:	2b00      	cmp	r3, #0
 23eaa64:	d04b      	beq.n	23eaafe <_Z17Function_DoAction6String+0x13a>
      if (SD.exists(SD_A4_RAIN_FILE)) {
 23eaa66:	4972      	ldr	r1, [pc, #456]	; (23eac30 <_Z17Function_DoAction6String+0x26c>)
 23eaa68:	4872      	ldr	r0, [pc, #456]	; (23eac34 <_Z17Function_DoAction6String+0x270>)
 23eaa6a:	f7fc f921 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eaa6e:	b148      	cbz	r0, 23eaa84 <_Z17Function_DoAction6String+0xc0>
        EEPROM_ClearRain2Totals();
 23eaa70:	f7fe ff2c 	bl	23e98cc <_Z23EEPROM_ClearRain2Totalsv>
        if (SD.remove (SD_A4_RAIN_FILE)) {
 23eaa74:	496e      	ldr	r1, [pc, #440]	; (23eac30 <_Z17Function_DoAction6String+0x26c>)
 23eaa76:	486f      	ldr	r0, [pc, #444]	; (23eac34 <_Z17Function_DoAction6String+0x270>)
 23eaa78:	f7fc f935 	bl	23e6ce6 <_ZN8FsVolume6removeEPKc>
 23eaa7c:	b1d8      	cbz	r0, 23eaab6 <_Z17Function_DoAction6String+0xf2>
          Output ("A4=DIST, DEL RAIN:OK");
 23eaa7e:	486e      	ldr	r0, [pc, #440]	; (23eac38 <_Z17Function_DoAction6String+0x274>)
 23eaa80:	f7fc fbb0 	bl	23e71e4 <_Z6OutputPKc>
      if (SD.exists(SD_A4_DIST_FILE)) {
 23eaa84:	496d      	ldr	r1, [pc, #436]	; (23eac3c <_Z17Function_DoAction6String+0x278>)
 23eaa86:	486b      	ldr	r0, [pc, #428]	; (23eac34 <_Z17Function_DoAction6String+0x270>)
 23eaa88:	f7fc f912 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eaa8c:	b1c8      	cbz	r0, 23eaac2 <_Z17Function_DoAction6String+0xfe>
        Output ("A4=DIST, ALREADY EXISTS");    
 23eaa8e:	486c      	ldr	r0, [pc, #432]	; (23eac40 <_Z17Function_DoAction6String+0x27c>)
          Output ("A4=DIST, SET");
 23eaa90:	f7fc fba8 	bl	23e71e4 <_Z6OutputPKc>
      dg_adjustment = 2.5;
 23eaa94:	4b6b      	ldr	r3, [pc, #428]	; (23eac44 <_Z17Function_DoAction6String+0x280>)
 23eaa96:	4a6c      	ldr	r2, [pc, #432]	; (23eac48 <_Z17Function_DoAction6String+0x284>)
      if (SD.exists(SD_5M_DIST_FILE)) {
 23eaa98:	496c      	ldr	r1, [pc, #432]	; (23eac4c <_Z17Function_DoAction6String+0x288>)
 23eaa9a:	4866      	ldr	r0, [pc, #408]	; (23eac34 <_Z17Function_DoAction6String+0x270>)
      dg_adjustment = 2.5;
 23eaa9c:	601a      	str	r2, [r3, #0]
      if (SD.exists(SD_5M_DIST_FILE)) {
 23eaa9e:	f7fc f907 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eaaa2:	b350      	cbz	r0, 23eaafa <_Z17Function_DoAction6String+0x136>
        if (SD.remove (SD_5M_DIST_FILE)) {
 23eaaa4:	4969      	ldr	r1, [pc, #420]	; (23eac4c <_Z17Function_DoAction6String+0x288>)
 23eaaa6:	4863      	ldr	r0, [pc, #396]	; (23eac34 <_Z17Function_DoAction6String+0x270>)
 23eaaa8:	f7fc f91d 	bl	23e6ce6 <_ZN8FsVolume6removeEPKc>
 23eaaac:	b1f8      	cbz	r0, 23eaaee <_Z17Function_DoAction6String+0x12a>
          Output ("A4=DIST, DEL 5M:OK, 10M SET");
 23eaaae:	4868      	ldr	r0, [pc, #416]	; (23eac50 <_Z17Function_DoAction6String+0x28c>)
        Output ("TXI15M SET"); 
 23eaab0:	f7fc fb98 	bl	23e71e4 <_Z6OutputPKc>
 23eaab4:	e79a      	b.n	23ea9ec <_Z17Function_DoAction6String+0x28>
          Output ("A4=DIST, DEL RAIN:ERR");
 23eaab6:	4867      	ldr	r0, [pc, #412]	; (23eac54 <_Z17Function_DoAction6String+0x290>)
          Output ("A4=RAIN, DEL DIST:ERR");
 23eaab8:	f7fc fb94 	bl	23e71e4 <_Z6OutputPKc>
          return(-2);
 23eaabc:	f06f 0401 	mvn.w	r4, #1
 23eaac0:	e794      	b.n	23ea9ec <_Z17Function_DoAction6String+0x28>
        File fp = SD.open(SD_A4_DIST_FILE, FILE_WRITE);
 23eaac2:	4668      	mov	r0, sp
 23eaac4:	f244 2302 	movw	r3, #16898	; 0x4202
 23eaac8:	4a5c      	ldr	r2, [pc, #368]	; (23eac3c <_Z17Function_DoAction6String+0x278>)
 23eaaca:	495a      	ldr	r1, [pc, #360]	; (23eac34 <_Z17Function_DoAction6String+0x270>)
 23eaacc:	f00c fc76 	bl	23f73bc <_ZN8FsVolume4openEPKci>
 23eaad0:	a804      	add	r0, sp, #16
 23eaad2:	f7fc f966 	bl	23e6da2 <_ZNK10FsBaseFile6isOpenEv>
        if (fp) {
 23eaad6:	b120      	cbz	r0, 23eaae2 <_Z17Function_DoAction6String+0x11e>
          fp.close();
 23eaad8:	a804      	add	r0, sp, #16
 23eaada:	f00c fb96 	bl	23f720a <_ZN10FsBaseFile5closeEv>
          Output ("A4=DIST, SET");
 23eaade:	485e      	ldr	r0, [pc, #376]	; (23eac58 <_Z17Function_DoAction6String+0x294>)
 23eaae0:	e7d6      	b.n	23eaa90 <_Z17Function_DoAction6String+0xcc>
          Output ("A4=DIST, OPEN ERR");
 23eaae2:	485e      	ldr	r0, [pc, #376]	; (23eac5c <_Z17Function_DoAction6String+0x298>)
          Output ("A4=RAIN, OPEN ERR");
 23eaae4:	f7fc fb7e 	bl	23e71e4 <_Z6OutputPKc>
          return(-3);
 23eaae8:	f06f 0402 	mvn.w	r4, #2
 23eaaec:	e77e      	b.n	23ea9ec <_Z17Function_DoAction6String+0x28>
          Output ("A4=DIST, DEL 5M:ERR");
 23eaaee:	485c      	ldr	r0, [pc, #368]	; (23eac60 <_Z17Function_DoAction6String+0x29c>)
          Output ("A4=RAIN, DEL 5M:ERR");
 23eaaf0:	f7fc fb78 	bl	23e71e4 <_Z6OutputPKc>
          return(-4);
 23eaaf4:	f06f 0403 	mvn.w	r4, #3
 23eaaf8:	e778      	b.n	23ea9ec <_Z17Function_DoAction6String+0x28>
        Output ("A4=DIST, 10M");
 23eaafa:	485a      	ldr	r0, [pc, #360]	; (23eac64 <_Z17Function_DoAction6String+0x2a0>)
 23eaafc:	e7d8      	b.n	23eaab0 <_Z17Function_DoAction6String+0xec>
      Output("A4=DIST, SD NF"); 
 23eaafe:	485a      	ldr	r0, [pc, #360]	; (23eac68 <_Z17Function_DoAction6String+0x2a4>)
    Output("DoAction:UKN"); 
 23eab00:	f7fc fb70 	bl	23e71e4 <_Z6OutputPKc>
    return(-1);
 23eab04:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 23eab08:	e770      	b.n	23ea9ec <_Z17Function_DoAction6String+0x28>
  else if (strcmp (s,"A4RAIN") == 0) { // Set A4 State File to Rain
 23eab0a:	4628      	mov	r0, r5
 23eab0c:	4957      	ldr	r1, [pc, #348]	; (23eac6c <_Z17Function_DoAction6String+0x2a8>)
 23eab0e:	f7fb fa69 	bl	23e5fe4 <strcmp>
 23eab12:	4604      	mov	r4, r0
 23eab14:	2800      	cmp	r0, #0
 23eab16:	d141      	bne.n	23eab9c <_Z17Function_DoAction6String+0x1d8>
    Output("DoAction:A4RAIN");
 23eab18:	4855      	ldr	r0, [pc, #340]	; (23eac70 <_Z17Function_DoAction6String+0x2ac>)
 23eab1a:	f7fc fb63 	bl	23e71e4 <_Z6OutputPKc>
    if (SD_exists) {
 23eab1e:	4b43      	ldr	r3, [pc, #268]	; (23eac2c <_Z17Function_DoAction6String+0x268>)
 23eab20:	781b      	ldrb	r3, [r3, #0]
 23eab22:	2b00      	cmp	r3, #0
 23eab24:	d038      	beq.n	23eab98 <_Z17Function_DoAction6String+0x1d4>
      if (SD.exists(SD_A4_DIST_FILE)) {
 23eab26:	4945      	ldr	r1, [pc, #276]	; (23eac3c <_Z17Function_DoAction6String+0x278>)
 23eab28:	4842      	ldr	r0, [pc, #264]	; (23eac34 <_Z17Function_DoAction6String+0x270>)
 23eab2a:	f7fc f8c1 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eab2e:	b138      	cbz	r0, 23eab40 <_Z17Function_DoAction6String+0x17c>
        if (SD.remove (SD_A4_DIST_FILE)) {
 23eab30:	4942      	ldr	r1, [pc, #264]	; (23eac3c <_Z17Function_DoAction6String+0x278>)
 23eab32:	4840      	ldr	r0, [pc, #256]	; (23eac34 <_Z17Function_DoAction6String+0x270>)
 23eab34:	f7fc f8d7 	bl	23e6ce6 <_ZN8FsVolume6removeEPKc>
 23eab38:	b1b0      	cbz	r0, 23eab68 <_Z17Function_DoAction6String+0x1a4>
          Output ("A4=RAIN, DEL DIST:OK");
 23eab3a:	484e      	ldr	r0, [pc, #312]	; (23eac74 <_Z17Function_DoAction6String+0x2b0>)
 23eab3c:	f7fc fb52 	bl	23e71e4 <_Z6OutputPKc>
      if (SD.exists(SD_5M_DIST_FILE)) {
 23eab40:	4942      	ldr	r1, [pc, #264]	; (23eac4c <_Z17Function_DoAction6String+0x288>)
 23eab42:	483c      	ldr	r0, [pc, #240]	; (23eac34 <_Z17Function_DoAction6String+0x270>)
 23eab44:	f7fc f8b4 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eab48:	b138      	cbz	r0, 23eab5a <_Z17Function_DoAction6String+0x196>
        if (SD.remove (SD_5M_DIST_FILE)) {
 23eab4a:	4940      	ldr	r1, [pc, #256]	; (23eac4c <_Z17Function_DoAction6String+0x288>)
 23eab4c:	4839      	ldr	r0, [pc, #228]	; (23eac34 <_Z17Function_DoAction6String+0x270>)
 23eab4e:	f7fc f8ca 	bl	23e6ce6 <_ZN8FsVolume6removeEPKc>
 23eab52:	b158      	cbz	r0, 23eab6c <_Z17Function_DoAction6String+0x1a8>
          Output ("A4=RAIN, DEL 5M:OK");
 23eab54:	4848      	ldr	r0, [pc, #288]	; (23eac78 <_Z17Function_DoAction6String+0x2b4>)
 23eab56:	f7fc fb45 	bl	23e71e4 <_Z6OutputPKc>
      if (SD.exists(SD_A4_RAIN_FILE)) {
 23eab5a:	4935      	ldr	r1, [pc, #212]	; (23eac30 <_Z17Function_DoAction6String+0x26c>)
 23eab5c:	4835      	ldr	r0, [pc, #212]	; (23eac34 <_Z17Function_DoAction6String+0x270>)
 23eab5e:	f7fc f8a7 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eab62:	b128      	cbz	r0, 23eab70 <_Z17Function_DoAction6String+0x1ac>
        Output ("A4=RAIN, ALREADY EXISTS");      
 23eab64:	4845      	ldr	r0, [pc, #276]	; (23eac7c <_Z17Function_DoAction6String+0x2b8>)
 23eab66:	e7a3      	b.n	23eaab0 <_Z17Function_DoAction6String+0xec>
          Output ("A4=RAIN, DEL DIST:ERR");
 23eab68:	4845      	ldr	r0, [pc, #276]	; (23eac80 <_Z17Function_DoAction6String+0x2bc>)
 23eab6a:	e7a5      	b.n	23eaab8 <_Z17Function_DoAction6String+0xf4>
          Output ("A4=RAIN, DEL 5M:ERR");
 23eab6c:	4845      	ldr	r0, [pc, #276]	; (23eac84 <_Z17Function_DoAction6String+0x2c0>)
 23eab6e:	e7bf      	b.n	23eaaf0 <_Z17Function_DoAction6String+0x12c>
        EEPROM_ClearRain2Totals(); // Just a good thing to do.
 23eab70:	f7fe feac 	bl	23e98cc <_Z23EEPROM_ClearRain2Totalsv>
        File fp = SD.open(SD_A4_RAIN_FILE, FILE_WRITE);
 23eab74:	4668      	mov	r0, sp
 23eab76:	f244 2302 	movw	r3, #16898	; 0x4202
 23eab7a:	4a2d      	ldr	r2, [pc, #180]	; (23eac30 <_Z17Function_DoAction6String+0x26c>)
 23eab7c:	492d      	ldr	r1, [pc, #180]	; (23eac34 <_Z17Function_DoAction6String+0x270>)
 23eab7e:	f00c fc1d 	bl	23f73bc <_ZN8FsVolume4openEPKci>
 23eab82:	a804      	add	r0, sp, #16
 23eab84:	f7fc f90d 	bl	23e6da2 <_ZNK10FsBaseFile6isOpenEv>
        if (fp) {
 23eab88:	b120      	cbz	r0, 23eab94 <_Z17Function_DoAction6String+0x1d0>
          fp.close();
 23eab8a:	a804      	add	r0, sp, #16
 23eab8c:	f00c fb3d 	bl	23f720a <_ZN10FsBaseFile5closeEv>
          Output ("A4=RAIN, SET");
 23eab90:	483d      	ldr	r0, [pc, #244]	; (23eac88 <_Z17Function_DoAction6String+0x2c4>)
 23eab92:	e78d      	b.n	23eaab0 <_Z17Function_DoAction6String+0xec>
          Output ("A4=RAIN, OPEN ERR");
 23eab94:	483d      	ldr	r0, [pc, #244]	; (23eac8c <_Z17Function_DoAction6String+0x2c8>)
 23eab96:	e7a5      	b.n	23eaae4 <_Z17Function_DoAction6String+0x120>
      Output("A4=RAIN, SD NF"); 
 23eab98:	483d      	ldr	r0, [pc, #244]	; (23eac90 <_Z17Function_DoAction6String+0x2cc>)
 23eab9a:	e7b1      	b.n	23eab00 <_Z17Function_DoAction6String+0x13c>
  else if (strcmp (s,"5MDIST") == 0) { // Set 5M Distance Sensor State File
 23eab9c:	4628      	mov	r0, r5
 23eab9e:	493d      	ldr	r1, [pc, #244]	; (23eac94 <_Z17Function_DoAction6String+0x2d0>)
 23eaba0:	f7fb fa20 	bl	23e5fe4 <strcmp>
 23eaba4:	4604      	mov	r4, r0
 23eaba6:	2800      	cmp	r0, #0
 23eaba8:	f040 8082 	bne.w	23eacb0 <_Z17Function_DoAction6String+0x2ec>
    Output("DoAction:5MDIST");
 23eabac:	483a      	ldr	r0, [pc, #232]	; (23eac98 <_Z17Function_DoAction6String+0x2d4>)
 23eabae:	f7fc fb19 	bl	23e71e4 <_Z6OutputPKc>
    if (SD_exists) {
 23eabb2:	4b1e      	ldr	r3, [pc, #120]	; (23eac2c <_Z17Function_DoAction6String+0x268>)
 23eabb4:	781b      	ldrb	r3, [r3, #0]
 23eabb6:	b1fb      	cbz	r3, 23eabf8 <_Z17Function_DoAction6String+0x234>
      if (SD.exists(SD_5M_DIST_FILE)) {
 23eabb8:	4924      	ldr	r1, [pc, #144]	; (23eac4c <_Z17Function_DoAction6String+0x288>)
 23eabba:	481e      	ldr	r0, [pc, #120]	; (23eac34 <_Z17Function_DoAction6String+0x270>)
 23eabbc:	f7fc f878 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eabc0:	b108      	cbz	r0, 23eabc6 <_Z17Function_DoAction6String+0x202>
        Output ("5MDIST, ALREADY EXISTS");      
 23eabc2:	4836      	ldr	r0, [pc, #216]	; (23eac9c <_Z17Function_DoAction6String+0x2d8>)
 23eabc4:	e774      	b.n	23eaab0 <_Z17Function_DoAction6String+0xec>
        File fp = SD.open(SD_5M_DIST_FILE, FILE_WRITE);
 23eabc6:	4668      	mov	r0, sp
 23eabc8:	f244 2302 	movw	r3, #16898	; 0x4202
 23eabcc:	4a1f      	ldr	r2, [pc, #124]	; (23eac4c <_Z17Function_DoAction6String+0x288>)
 23eabce:	4919      	ldr	r1, [pc, #100]	; (23eac34 <_Z17Function_DoAction6String+0x270>)
 23eabd0:	f00c fbf4 	bl	23f73bc <_ZN8FsVolume4openEPKci>
 23eabd4:	a804      	add	r0, sp, #16
 23eabd6:	f7fc f8e4 	bl	23e6da2 <_ZNK10FsBaseFile6isOpenEv>
        if (fp) {
 23eabda:	b138      	cbz	r0, 23eabec <_Z17Function_DoAction6String+0x228>
          fp.close();
 23eabdc:	a804      	add	r0, sp, #16
 23eabde:	f00c fb14 	bl	23f720a <_ZN10FsBaseFile5closeEv>
          dg_adjustment = 1.25;
 23eabe2:	4b18      	ldr	r3, [pc, #96]	; (23eac44 <_Z17Function_DoAction6String+0x280>)
 23eabe4:	4a2e      	ldr	r2, [pc, #184]	; (23eaca0 <_Z17Function_DoAction6String+0x2dc>)
          Output ("5MDIST SET");
 23eabe6:	482f      	ldr	r0, [pc, #188]	; (23eaca4 <_Z17Function_DoAction6String+0x2e0>)
          dg_adjustment = 1.25;
 23eabe8:	601a      	str	r2, [r3, #0]
          Output ("5MDIST SET");
 23eabea:	e761      	b.n	23eaab0 <_Z17Function_DoAction6String+0xec>
          Output ("5MDIST OPEN ERR");
 23eabec:	482e      	ldr	r0, [pc, #184]	; (23eaca8 <_Z17Function_DoAction6String+0x2e4>)
          Output ("A4=RAW, OPEN ERR");
 23eabee:	f7fc faf9 	bl	23e71e4 <_Z6OutputPKc>
          return(-5);
 23eabf2:	f06f 0404 	mvn.w	r4, #4
 23eabf6:	e6f9      	b.n	23ea9ec <_Z17Function_DoAction6String+0x28>
      Output("5MDIST, SD NF"); 
 23eabf8:	482c      	ldr	r0, [pc, #176]	; (23eacac <_Z17Function_DoAction6String+0x2e8>)
 23eabfa:	e781      	b.n	23eab00 <_Z17Function_DoAction6String+0x13c>
 23eabfc:	023fdcec 	.word	0x023fdcec
 23eac00:	023fdce3 	.word	0x023fdce3
 23eac04:	023fdcfc 	.word	0x023fdcfc
 23eac08:	023fdcf3 	.word	0x023fdcf3
 23eac0c:	1006a1c8 	.word	0x1006a1c8
 23eac10:	023fdd0a 	.word	0x023fdd0a
 23eac14:	023fdd01 	.word	0x023fdd01
 23eac18:	1006a2f8 	.word	0x1006a2f8
 23eac1c:	023fdd18 	.word	0x023fdd18
 23eac20:	023fdd0f 	.word	0x023fdd0f
 23eac24:	023fdd25 	.word	0x023fdd25
 23eac28:	023fdd1c 	.word	0x023fdd1c
 23eac2c:	1006a7b4 	.word	0x1006a7b4
 23eac30:	1006a162 	.word	0x1006a162
 23eac34:	1006a308 	.word	0x1006a308
 23eac38:	023fdd2c 	.word	0x023fdd2c
 23eac3c:	1006a157 	.word	0x1006a157
 23eac40:	023fdd57 	.word	0x023fdd57
 23eac44:	1006a1f4 	.word	0x1006a1f4
 23eac48:	40200000 	.word	0x40200000
 23eac4c:	1006a14c 	.word	0x1006a14c
 23eac50:	023fdd8e 	.word	0x023fdd8e
 23eac54:	023fdd41 	.word	0x023fdd41
 23eac58:	023fdd6f 	.word	0x023fdd6f
 23eac5c:	023fdd7c 	.word	0x023fdd7c
 23eac60:	023fddaa 	.word	0x023fddaa
 23eac64:	023fddbe 	.word	0x023fddbe
 23eac68:	023fddcb 	.word	0x023fddcb
 23eac6c:	023fdde3 	.word	0x023fdde3
 23eac70:	023fddda 	.word	0x023fddda
 23eac74:	023fddea 	.word	0x023fddea
 23eac78:	023fde15 	.word	0x023fde15
 23eac7c:	023fde3c 	.word	0x023fde3c
 23eac80:	023fddff 	.word	0x023fddff
 23eac84:	023fde28 	.word	0x023fde28
 23eac88:	023fde54 	.word	0x023fde54
 23eac8c:	023fde61 	.word	0x023fde61
 23eac90:	023fde73 	.word	0x023fde73
 23eac94:	023fde8b 	.word	0x023fde8b
 23eac98:	023fde82 	.word	0x023fde82
 23eac9c:	023fde92 	.word	0x023fde92
 23eaca0:	3fa00000 	.word	0x3fa00000
 23eaca4:	023fdea9 	.word	0x023fdea9
 23eaca8:	023fdeb4 	.word	0x023fdeb4
 23eacac:	023fdec4 	.word	0x023fdec4
  else if (strcmp (s,"A4RAW") == 0) { // Set A4 State File to Raw
 23eacb0:	4628      	mov	r0, r5
 23eacb2:	4989      	ldr	r1, [pc, #548]	; (23eaed8 <_Z17Function_DoAction6String+0x514>)
 23eacb4:	f7fb f996 	bl	23e5fe4 <strcmp>
 23eacb8:	4604      	mov	r4, r0
 23eacba:	2800      	cmp	r0, #0
 23eacbc:	d153      	bne.n	23ead66 <_Z17Function_DoAction6String+0x3a2>
    Output("DoAction:A4RAW");
 23eacbe:	4887      	ldr	r0, [pc, #540]	; (23eaedc <_Z17Function_DoAction6String+0x518>)
 23eacc0:	f7fc fa90 	bl	23e71e4 <_Z6OutputPKc>
    if (SD_exists) {
 23eacc4:	4b86      	ldr	r3, [pc, #536]	; (23eaee0 <_Z17Function_DoAction6String+0x51c>)
 23eacc6:	781b      	ldrb	r3, [r3, #0]
 23eacc8:	2b00      	cmp	r3, #0
 23eacca:	d04a      	beq.n	23ead62 <_Z17Function_DoAction6String+0x39e>
      if (SD.exists(SD_A4_RAIN_FILE)) {
 23eaccc:	4985      	ldr	r1, [pc, #532]	; (23eaee4 <_Z17Function_DoAction6String+0x520>)
 23eacce:	4886      	ldr	r0, [pc, #536]	; (23eaee8 <_Z17Function_DoAction6String+0x524>)
 23eacd0:	f7fb ffee 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eacd4:	b158      	cbz	r0, 23eacee <_Z17Function_DoAction6String+0x32a>
        EEPROM_ClearRain2Totals();
 23eacd6:	f7fe fdf9 	bl	23e98cc <_Z23EEPROM_ClearRain2Totalsv>
        if (SD.remove (SD_A4_RAIN_FILE)) {
 23eacda:	4982      	ldr	r1, [pc, #520]	; (23eaee4 <_Z17Function_DoAction6String+0x520>)
 23eacdc:	4882      	ldr	r0, [pc, #520]	; (23eaee8 <_Z17Function_DoAction6String+0x524>)
 23eacde:	f7fc f802 	bl	23e6ce6 <_ZN8FsVolume6removeEPKc>
 23eace2:	2800      	cmp	r0, #0
 23eace4:	f43f aee7 	beq.w	23eaab6 <_Z17Function_DoAction6String+0xf2>
          Output ("A4=DIST, DEL RAIN:OK");
 23eace8:	4880      	ldr	r0, [pc, #512]	; (23eaeec <_Z17Function_DoAction6String+0x528>)
 23eacea:	f7fc fa7b 	bl	23e71e4 <_Z6OutputPKc>
      if (SD.exists(SD_A4_DIST_FILE)) {
 23eacee:	4980      	ldr	r1, [pc, #512]	; (23eaef0 <_Z17Function_DoAction6String+0x52c>)
 23eacf0:	487d      	ldr	r0, [pc, #500]	; (23eaee8 <_Z17Function_DoAction6String+0x524>)
 23eacf2:	f7fb ffdd 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eacf6:	b138      	cbz	r0, 23ead08 <_Z17Function_DoAction6String+0x344>
        if (SD.remove (SD_A4_DIST_FILE)) {
 23eacf8:	497d      	ldr	r1, [pc, #500]	; (23eaef0 <_Z17Function_DoAction6String+0x52c>)
 23eacfa:	487b      	ldr	r0, [pc, #492]	; (23eaee8 <_Z17Function_DoAction6String+0x524>)
 23eacfc:	f7fb fff3 	bl	23e6ce6 <_ZN8FsVolume6removeEPKc>
 23ead00:	b1d8      	cbz	r0, 23ead3a <_Z17Function_DoAction6String+0x376>
          Output ("A4=DIST, DEL DIST:OK");
 23ead02:	487c      	ldr	r0, [pc, #496]	; (23eaef4 <_Z17Function_DoAction6String+0x530>)
 23ead04:	f7fc fa6e 	bl	23e71e4 <_Z6OutputPKc>
      dg_adjustment = 2.5;
 23ead08:	4b7b      	ldr	r3, [pc, #492]	; (23eaef8 <_Z17Function_DoAction6String+0x534>)
 23ead0a:	4a7c      	ldr	r2, [pc, #496]	; (23eaefc <_Z17Function_DoAction6String+0x538>)
      if (SD.exists(SD_5M_DIST_FILE)) {
 23ead0c:	497c      	ldr	r1, [pc, #496]	; (23eaf00 <_Z17Function_DoAction6String+0x53c>)
 23ead0e:	4876      	ldr	r0, [pc, #472]	; (23eaee8 <_Z17Function_DoAction6String+0x524>)
      dg_adjustment = 2.5;
 23ead10:	601a      	str	r2, [r3, #0]
      if (SD.exists(SD_5M_DIST_FILE)) {
 23ead12:	f7fb ffcd 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23ead16:	b148      	cbz	r0, 23ead2c <_Z17Function_DoAction6String+0x368>
        if (SD.remove (SD_5M_DIST_FILE)) {
 23ead18:	4979      	ldr	r1, [pc, #484]	; (23eaf00 <_Z17Function_DoAction6String+0x53c>)
 23ead1a:	4873      	ldr	r0, [pc, #460]	; (23eaee8 <_Z17Function_DoAction6String+0x524>)
 23ead1c:	f7fb ffe3 	bl	23e6ce6 <_ZN8FsVolume6removeEPKc>
 23ead20:	2800      	cmp	r0, #0
 23ead22:	f43f aee4 	beq.w	23eaaee <_Z17Function_DoAction6String+0x12a>
          Output ("A4=DIST, DEL 5M:OK");
 23ead26:	4877      	ldr	r0, [pc, #476]	; (23eaf04 <_Z17Function_DoAction6String+0x540>)
 23ead28:	f7fc fa5c 	bl	23e71e4 <_Z6OutputPKc>
      if (SD.exists(SD_A4_RAW_FILE)) {
 23ead2c:	4976      	ldr	r1, [pc, #472]	; (23eaf08 <_Z17Function_DoAction6String+0x544>)
 23ead2e:	486e      	ldr	r0, [pc, #440]	; (23eaee8 <_Z17Function_DoAction6String+0x524>)
 23ead30:	f7fb ffbe 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23ead34:	b118      	cbz	r0, 23ead3e <_Z17Function_DoAction6String+0x37a>
        Output ("A4=RAW, ALREADY EXISTS");    
 23ead36:	4875      	ldr	r0, [pc, #468]	; (23eaf0c <_Z17Function_DoAction6String+0x548>)
 23ead38:	e6ba      	b.n	23eaab0 <_Z17Function_DoAction6String+0xec>
          Output ("A4=DIST, DEL DIST:ERR");
 23ead3a:	4875      	ldr	r0, [pc, #468]	; (23eaf10 <_Z17Function_DoAction6String+0x54c>)
 23ead3c:	e6d2      	b.n	23eaae4 <_Z17Function_DoAction6String+0x120>
        File fp = SD.open(SD_A4_RAW_FILE, FILE_WRITE);
 23ead3e:	4668      	mov	r0, sp
 23ead40:	f244 2302 	movw	r3, #16898	; 0x4202
 23ead44:	4a70      	ldr	r2, [pc, #448]	; (23eaf08 <_Z17Function_DoAction6String+0x544>)
 23ead46:	4968      	ldr	r1, [pc, #416]	; (23eaee8 <_Z17Function_DoAction6String+0x524>)
 23ead48:	f00c fb38 	bl	23f73bc <_ZN8FsVolume4openEPKci>
 23ead4c:	a804      	add	r0, sp, #16
 23ead4e:	f7fc f828 	bl	23e6da2 <_ZNK10FsBaseFile6isOpenEv>
        if (fp) {
 23ead52:	b120      	cbz	r0, 23ead5e <_Z17Function_DoAction6String+0x39a>
          fp.close();
 23ead54:	a804      	add	r0, sp, #16
 23ead56:	f00c fa58 	bl	23f720a <_ZN10FsBaseFile5closeEv>
          Output ("A4=RAW, SET");
 23ead5a:	486e      	ldr	r0, [pc, #440]	; (23eaf14 <_Z17Function_DoAction6String+0x550>)
 23ead5c:	e6a8      	b.n	23eaab0 <_Z17Function_DoAction6String+0xec>
          Output ("A4=RAW, OPEN ERR");
 23ead5e:	486e      	ldr	r0, [pc, #440]	; (23eaf18 <_Z17Function_DoAction6String+0x554>)
 23ead60:	e745      	b.n	23eabee <_Z17Function_DoAction6String+0x22a>
      Output("A4=RAW, SD NF"); 
 23ead62:	486e      	ldr	r0, [pc, #440]	; (23eaf1c <_Z17Function_DoAction6String+0x558>)
 23ead64:	e6cc      	b.n	23eab00 <_Z17Function_DoAction6String+0x13c>
  else if (strcmp (s,"A4CLR") == 0) { // Clear A4 State Files
 23ead66:	4628      	mov	r0, r5
 23ead68:	496d      	ldr	r1, [pc, #436]	; (23eaf20 <_Z17Function_DoAction6String+0x55c>)
 23ead6a:	f7fb f93b 	bl	23e5fe4 <strcmp>
 23ead6e:	4604      	mov	r4, r0
 23ead70:	2800      	cmp	r0, #0
 23ead72:	d166      	bne.n	23eae42 <_Z17Function_DoAction6String+0x47e>
    Output("DoAction:A4CLR");
 23ead74:	486b      	ldr	r0, [pc, #428]	; (23eaf24 <_Z17Function_DoAction6String+0x560>)
 23ead76:	f7fc fa35 	bl	23e71e4 <_Z6OutputPKc>
    if (SD_exists) {
 23ead7a:	4b59      	ldr	r3, [pc, #356]	; (23eaee0 <_Z17Function_DoAction6String+0x51c>)
 23ead7c:	781b      	ldrb	r3, [r3, #0]
 23ead7e:	2b00      	cmp	r3, #0
 23ead80:	d05d      	beq.n	23eae3e <_Z17Function_DoAction6String+0x47a>
      if (SD.exists(SD_A4_DIST_FILE)) {
 23ead82:	495b      	ldr	r1, [pc, #364]	; (23eaef0 <_Z17Function_DoAction6String+0x52c>)
 23ead84:	4858      	ldr	r0, [pc, #352]	; (23eaee8 <_Z17Function_DoAction6String+0x524>)
 23ead86:	f7fb ff93 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23ead8a:	b308      	cbz	r0, 23eadd0 <_Z17Function_DoAction6String+0x40c>
        if (SD.remove (SD_A4_DIST_FILE)) {
 23ead8c:	4958      	ldr	r1, [pc, #352]	; (23eaef0 <_Z17Function_DoAction6String+0x52c>)
 23ead8e:	4856      	ldr	r0, [pc, #344]	; (23eaee8 <_Z17Function_DoAction6String+0x524>)
 23ead90:	f7fb ffa9 	bl	23e6ce6 <_ZN8FsVolume6removeEPKc>
 23ead94:	b130      	cbz	r0, 23eada4 <_Z17Function_DoAction6String+0x3e0>
          A4_State = A4_STATE_NULL;
 23ead96:	2200      	movs	r2, #0
 23ead98:	4b63      	ldr	r3, [pc, #396]	; (23eaf28 <_Z17Function_DoAction6String+0x564>)
          Output ("A4=CLR, DEL DIST:OK");
 23ead9a:	4864      	ldr	r0, [pc, #400]	; (23eaf2c <_Z17Function_DoAction6String+0x568>)
          A4_State = A4_STATE_NULL;
 23ead9c:	601a      	str	r2, [r3, #0]
        Output ("A4=CLR, DEL RAIN:NF");
 23ead9e:	f7fc fa21 	bl	23e71e4 <_Z6OutputPKc>
 23eada2:	e004      	b.n	23eadae <_Z17Function_DoAction6String+0x3ea>
          Output ("A4=CLR, DEL DIST:ERR");
 23eada4:	4862      	ldr	r0, [pc, #392]	; (23eaf30 <_Z17Function_DoAction6String+0x56c>)
 23eada6:	f7fc fa1d 	bl	23e71e4 <_Z6OutputPKc>
          state=-2;
 23eadaa:	f06f 0401 	mvn.w	r4, #1
      if (SD.exists(SD_A4_RAIN_FILE)) {
 23eadae:	494d      	ldr	r1, [pc, #308]	; (23eaee4 <_Z17Function_DoAction6String+0x520>)
 23eadb0:	484d      	ldr	r0, [pc, #308]	; (23eaee8 <_Z17Function_DoAction6String+0x524>)
 23eadb2:	f7fb ff7d 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eadb6:	b310      	cbz	r0, 23eadfe <_Z17Function_DoAction6String+0x43a>
        if (SD.remove (SD_A4_RAIN_FILE)) {
 23eadb8:	494a      	ldr	r1, [pc, #296]	; (23eaee4 <_Z17Function_DoAction6String+0x520>)
 23eadba:	484b      	ldr	r0, [pc, #300]	; (23eaee8 <_Z17Function_DoAction6String+0x524>)
 23eadbc:	f7fb ff93 	bl	23e6ce6 <_ZN8FsVolume6removeEPKc>
 23eadc0:	b140      	cbz	r0, 23eadd4 <_Z17Function_DoAction6String+0x410>
          A4_State = A4_STATE_NULL;      // We still need a reboot to get rid of ISR
 23eadc2:	2200      	movs	r2, #0
 23eadc4:	4b58      	ldr	r3, [pc, #352]	; (23eaf28 <_Z17Function_DoAction6String+0x564>)
          Output ("A4=CLR, DEL RAIN:OK");
 23eadc6:	485b      	ldr	r0, [pc, #364]	; (23eaf34 <_Z17Function_DoAction6String+0x570>)
          A4_State = A4_STATE_NULL;      // We still need a reboot to get rid of ISR
 23eadc8:	601a      	str	r2, [r3, #0]
        Output ("A4=CLR, DEL RAIN:NF");
 23eadca:	f7fc fa0b 	bl	23e71e4 <_Z6OutputPKc>
 23eadce:	e005      	b.n	23eaddc <_Z17Function_DoAction6String+0x418>
        Output ("A4=CLR, DEL RAIN:NF");
 23eadd0:	4859      	ldr	r0, [pc, #356]	; (23eaf38 <_Z17Function_DoAction6String+0x574>)
 23eadd2:	e7e4      	b.n	23ead9e <_Z17Function_DoAction6String+0x3da>
          Output ("A4=CLR, DEL RAIN:ERR");
 23eadd4:	4859      	ldr	r0, [pc, #356]	; (23eaf3c <_Z17Function_DoAction6String+0x578>)
 23eadd6:	f7fc fa05 	bl	23e71e4 <_Z6OutputPKc>
          state+=-3; // returns a -3 if also failed removing DIST file
 23eadda:	3c03      	subs	r4, #3
      if (SD.exists(SD_A4_RAW_FILE)) {
 23eaddc:	494a      	ldr	r1, [pc, #296]	; (23eaf08 <_Z17Function_DoAction6String+0x544>)
 23eadde:	4842      	ldr	r0, [pc, #264]	; (23eaee8 <_Z17Function_DoAction6String+0x524>)
 23eade0:	f7fb ff66 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eade4:	b320      	cbz	r0, 23eae30 <_Z17Function_DoAction6String+0x46c>
        if (SD.remove (SD_A4_RAW_FILE)) {
 23eade6:	4948      	ldr	r1, [pc, #288]	; (23eaf08 <_Z17Function_DoAction6String+0x544>)
 23eade8:	483f      	ldr	r0, [pc, #252]	; (23eaee8 <_Z17Function_DoAction6String+0x524>)
 23eadea:	f7fb ff7c 	bl	23e6ce6 <_ZN8FsVolume6removeEPKc>
 23eadee:	b140      	cbz	r0, 23eae02 <_Z17Function_DoAction6String+0x43e>
          A4_State = A4_STATE_NULL;
 23eadf0:	2200      	movs	r2, #0
 23eadf2:	4b4d      	ldr	r3, [pc, #308]	; (23eaf28 <_Z17Function_DoAction6String+0x564>)
          Output ("A4=CLR, DEL RAW:OK");
 23eadf4:	4852      	ldr	r0, [pc, #328]	; (23eaf40 <_Z17Function_DoAction6String+0x57c>)
          A4_State = A4_STATE_NULL;
 23eadf6:	601a      	str	r2, [r3, #0]
        Output ("A4=CLR, DEL RAIN:NF");
 23eadf8:	f7fc f9f4 	bl	23e71e4 <_Z6OutputPKc>
 23eadfc:	e005      	b.n	23eae0a <_Z17Function_DoAction6String+0x446>
        Output ("A4=CLR, DEL RAIN:NF");
 23eadfe:	484e      	ldr	r0, [pc, #312]	; (23eaf38 <_Z17Function_DoAction6String+0x574>)
 23eae00:	e7e3      	b.n	23eadca <_Z17Function_DoAction6String+0x406>
          Output ("A4=CLR, DEL RAW:ERR");
 23eae02:	4850      	ldr	r0, [pc, #320]	; (23eaf44 <_Z17Function_DoAction6String+0x580>)
 23eae04:	f7fc f9ee 	bl	23e71e4 <_Z6OutputPKc>
          state+=-4; // returns a -4 if also failed removing RAW file
 23eae08:	3c04      	subs	r4, #4
      if (SD.exists(SD_5M_DIST_FILE)) {
 23eae0a:	493d      	ldr	r1, [pc, #244]	; (23eaf00 <_Z17Function_DoAction6String+0x53c>)
 23eae0c:	4836      	ldr	r0, [pc, #216]	; (23eaee8 <_Z17Function_DoAction6String+0x524>)
 23eae0e:	f7fb ff4f 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eae12:	2800      	cmp	r0, #0
 23eae14:	f43f adea 	beq.w	23ea9ec <_Z17Function_DoAction6String+0x28>
        if (SD.remove (SD_5M_DIST_FILE)) {
 23eae18:	4939      	ldr	r1, [pc, #228]	; (23eaf00 <_Z17Function_DoAction6String+0x53c>)
 23eae1a:	4833      	ldr	r0, [pc, #204]	; (23eaee8 <_Z17Function_DoAction6String+0x524>)
 23eae1c:	f7fb ff63 	bl	23e6ce6 <_ZN8FsVolume6removeEPKc>
 23eae20:	b140      	cbz	r0, 23eae34 <_Z17Function_DoAction6String+0x470>
          Output ("A4=CLR, DEL 5M:OK");
 23eae22:	4849      	ldr	r0, [pc, #292]	; (23eaf48 <_Z17Function_DoAction6String+0x584>)
 23eae24:	f7fc f9de 	bl	23e71e4 <_Z6OutputPKc>
          dg_adjustment = 2.5;
 23eae28:	4b33      	ldr	r3, [pc, #204]	; (23eaef8 <_Z17Function_DoAction6String+0x534>)
 23eae2a:	4a34      	ldr	r2, [pc, #208]	; (23eaefc <_Z17Function_DoAction6String+0x538>)
 23eae2c:	601a      	str	r2, [r3, #0]
 23eae2e:	e5dd      	b.n	23ea9ec <_Z17Function_DoAction6String+0x28>
        Output ("A4=CLR, DEL RAIN:NF");
 23eae30:	4841      	ldr	r0, [pc, #260]	; (23eaf38 <_Z17Function_DoAction6String+0x574>)
 23eae32:	e7e1      	b.n	23eadf8 <_Z17Function_DoAction6String+0x434>
          Output ("A4=CLR, DEL 5M:ERR");
 23eae34:	4845      	ldr	r0, [pc, #276]	; (23eaf4c <_Z17Function_DoAction6String+0x588>)
 23eae36:	f7fc f9d5 	bl	23e71e4 <_Z6OutputPKc>
          state+=-5;
 23eae3a:	3c05      	subs	r4, #5
 23eae3c:	e5d6      	b.n	23ea9ec <_Z17Function_DoAction6String+0x28>
      Output("A4=CLR, SD NF"); 
 23eae3e:	4844      	ldr	r0, [pc, #272]	; (23eaf50 <_Z17Function_DoAction6String+0x58c>)
 23eae40:	e65e      	b.n	23eab00 <_Z17Function_DoAction6String+0x13c>
  else if (strcmp (s,"A5RAW") == 0) { // Set A5 State File to Raw
 23eae42:	4628      	mov	r0, r5
 23eae44:	4943      	ldr	r1, [pc, #268]	; (23eaf54 <_Z17Function_DoAction6String+0x590>)
 23eae46:	f7fb f8cd 	bl	23e5fe4 <strcmp>
 23eae4a:	4604      	mov	r4, r0
 23eae4c:	bb18      	cbnz	r0, 23eae96 <_Z17Function_DoAction6String+0x4d2>
    Output("DoAction:A5RAW");
 23eae4e:	4842      	ldr	r0, [pc, #264]	; (23eaf58 <_Z17Function_DoAction6String+0x594>)
 23eae50:	f7fc f9c8 	bl	23e71e4 <_Z6OutputPKc>
    if (SD_exists) {
 23eae54:	4b22      	ldr	r3, [pc, #136]	; (23eaee0 <_Z17Function_DoAction6String+0x51c>)
 23eae56:	781b      	ldrb	r3, [r3, #0]
 23eae58:	b1db      	cbz	r3, 23eae92 <_Z17Function_DoAction6String+0x4ce>
      if (SD.exists(SD_A5_RAW_FILE)) {
 23eae5a:	4940      	ldr	r1, [pc, #256]	; (23eaf5c <_Z17Function_DoAction6String+0x598>)
 23eae5c:	4822      	ldr	r0, [pc, #136]	; (23eaee8 <_Z17Function_DoAction6String+0x524>)
 23eae5e:	f7fb ff27 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eae62:	b108      	cbz	r0, 23eae68 <_Z17Function_DoAction6String+0x4a4>
        Output ("A5=RAW, ALREADY EXISTS");    
 23eae64:	483e      	ldr	r0, [pc, #248]	; (23eaf60 <_Z17Function_DoAction6String+0x59c>)
 23eae66:	e623      	b.n	23eaab0 <_Z17Function_DoAction6String+0xec>
        File fp = SD.open(SD_A5_RAW_FILE, FILE_WRITE);
 23eae68:	4668      	mov	r0, sp
 23eae6a:	f244 2302 	movw	r3, #16898	; 0x4202
 23eae6e:	4a3b      	ldr	r2, [pc, #236]	; (23eaf5c <_Z17Function_DoAction6String+0x598>)
 23eae70:	491d      	ldr	r1, [pc, #116]	; (23eaee8 <_Z17Function_DoAction6String+0x524>)
 23eae72:	f00c faa3 	bl	23f73bc <_ZN8FsVolume4openEPKci>
 23eae76:	a804      	add	r0, sp, #16
 23eae78:	f7fb ff93 	bl	23e6da2 <_ZNK10FsBaseFile6isOpenEv>
        if (fp) {
 23eae7c:	b138      	cbz	r0, 23eae8e <_Z17Function_DoAction6String+0x4ca>
          fp.close();
 23eae7e:	a804      	add	r0, sp, #16
 23eae80:	f00c f9c3 	bl	23f720a <_ZN10FsBaseFile5closeEv>
          A5_State = A5_STATE_RAW;
 23eae84:	2201      	movs	r2, #1
 23eae86:	4b37      	ldr	r3, [pc, #220]	; (23eaf64 <_Z17Function_DoAction6String+0x5a0>)
          Output ("A5=RAW, SET");
 23eae88:	4837      	ldr	r0, [pc, #220]	; (23eaf68 <_Z17Function_DoAction6String+0x5a4>)
          A5_State = A5_STATE_RAW;
 23eae8a:	601a      	str	r2, [r3, #0]
          Output ("A5=RAW, SET");
 23eae8c:	e610      	b.n	23eaab0 <_Z17Function_DoAction6String+0xec>
          Output ("A5=RAW, OPEN ERR");
 23eae8e:	4837      	ldr	r0, [pc, #220]	; (23eaf6c <_Z17Function_DoAction6String+0x5a8>)
 23eae90:	e612      	b.n	23eaab8 <_Z17Function_DoAction6String+0xf4>
      Output("A5=RAW, SD NF"); 
 23eae92:	4837      	ldr	r0, [pc, #220]	; (23eaf70 <_Z17Function_DoAction6String+0x5ac>)
 23eae94:	e634      	b.n	23eab00 <_Z17Function_DoAction6String+0x13c>
  else if (strcmp (s,"A5CLR") == 0) { // Clear A5 State Files
 23eae96:	4628      	mov	r0, r5
 23eae98:	4936      	ldr	r1, [pc, #216]	; (23eaf74 <_Z17Function_DoAction6String+0x5b0>)
 23eae9a:	f7fb f8a3 	bl	23e5fe4 <strcmp>
 23eae9e:	4604      	mov	r4, r0
 23eaea0:	2800      	cmp	r0, #0
 23eaea2:	d173      	bne.n	23eaf8c <_Z17Function_DoAction6String+0x5c8>
    Output("DoAction:A5CLR");
 23eaea4:	4834      	ldr	r0, [pc, #208]	; (23eaf78 <_Z17Function_DoAction6String+0x5b4>)
 23eaea6:	f7fc f99d 	bl	23e71e4 <_Z6OutputPKc>
    if (SD_exists) {
 23eaeaa:	4b0d      	ldr	r3, [pc, #52]	; (23eaee0 <_Z17Function_DoAction6String+0x51c>)
 23eaeac:	781b      	ldrb	r3, [r3, #0]
 23eaeae:	b18b      	cbz	r3, 23eaed4 <_Z17Function_DoAction6String+0x510>
      if (SD.exists(SD_A5_RAW_FILE)) {
 23eaeb0:	492a      	ldr	r1, [pc, #168]	; (23eaf5c <_Z17Function_DoAction6String+0x598>)
 23eaeb2:	480d      	ldr	r0, [pc, #52]	; (23eaee8 <_Z17Function_DoAction6String+0x524>)
 23eaeb4:	f7fb fefc 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eaeb8:	b150      	cbz	r0, 23eaed0 <_Z17Function_DoAction6String+0x50c>
        if (SD.remove (SD_A4_RAW_FILE)) {
 23eaeba:	4913      	ldr	r1, [pc, #76]	; (23eaf08 <_Z17Function_DoAction6String+0x544>)
 23eaebc:	480a      	ldr	r0, [pc, #40]	; (23eaee8 <_Z17Function_DoAction6String+0x524>)
 23eaebe:	f7fb ff12 	bl	23e6ce6 <_ZN8FsVolume6removeEPKc>
 23eaec2:	b118      	cbz	r0, 23eaecc <_Z17Function_DoAction6String+0x508>
          A5_State = A5_STATE_NULL;
 23eaec4:	4b27      	ldr	r3, [pc, #156]	; (23eaf64 <_Z17Function_DoAction6String+0x5a0>)
          Output ("A5=CLR, DEL RAW:OK");
 23eaec6:	482d      	ldr	r0, [pc, #180]	; (23eaf7c <_Z17Function_DoAction6String+0x5b8>)
          A5_State = A5_STATE_NULL;
 23eaec8:	601c      	str	r4, [r3, #0]
          Output ("A5=CLR, DEL RAW:OK");
 23eaeca:	e5f1      	b.n	23eaab0 <_Z17Function_DoAction6String+0xec>
          Output ("A5=CLR, DEL RAW:ERR");
 23eaecc:	482c      	ldr	r0, [pc, #176]	; (23eaf80 <_Z17Function_DoAction6String+0x5bc>)
 23eaece:	e5f3      	b.n	23eaab8 <_Z17Function_DoAction6String+0xf4>
        Output ("A5=CLR, DEL A5RAW:NF");
 23eaed0:	482c      	ldr	r0, [pc, #176]	; (23eaf84 <_Z17Function_DoAction6String+0x5c0>)
 23eaed2:	e5ed      	b.n	23eaab0 <_Z17Function_DoAction6String+0xec>
      Output("A5=CLR, SD NF"); 
 23eaed4:	482c      	ldr	r0, [pc, #176]	; (23eaf88 <_Z17Function_DoAction6String+0x5c4>)
 23eaed6:	e613      	b.n	23eab00 <_Z17Function_DoAction6String+0x13c>
 23eaed8:	023fdedb 	.word	0x023fdedb
 23eaedc:	023fded2 	.word	0x023fded2
 23eaee0:	1006a7b4 	.word	0x1006a7b4
 23eaee4:	1006a162 	.word	0x1006a162
 23eaee8:	1006a308 	.word	0x1006a308
 23eaeec:	023fdd2c 	.word	0x023fdd2c
 23eaef0:	1006a157 	.word	0x1006a157
 23eaef4:	023fdee1 	.word	0x023fdee1
 23eaef8:	1006a1f4 	.word	0x1006a1f4
 23eaefc:	40200000 	.word	0x40200000
 23eaf00:	1006a14c 	.word	0x1006a14c
 23eaf04:	023fdf0c 	.word	0x023fdf0c
 23eaf08:	1006a16d 	.word	0x1006a16d
 23eaf0c:	023fdf1f 	.word	0x023fdf1f
 23eaf10:	023fdef6 	.word	0x023fdef6
 23eaf14:	023fdf36 	.word	0x023fdf36
 23eaf18:	023fdf42 	.word	0x023fdf42
 23eaf1c:	023fdf53 	.word	0x023fdf53
 23eaf20:	023fdf6a 	.word	0x023fdf6a
 23eaf24:	023fdf61 	.word	0x023fdf61
 23eaf28:	1006a294 	.word	0x1006a294
 23eaf2c:	023fdf70 	.word	0x023fdf70
 23eaf30:	023fdf84 	.word	0x023fdf84
 23eaf34:	023fdfad 	.word	0x023fdfad
 23eaf38:	023fdf99 	.word	0x023fdf99
 23eaf3c:	023fdfc1 	.word	0x023fdfc1
 23eaf40:	023fdfd6 	.word	0x023fdfd6
 23eaf44:	023fdfe9 	.word	0x023fdfe9
 23eaf48:	023fdffd 	.word	0x023fdffd
 23eaf4c:	023fe00f 	.word	0x023fe00f
 23eaf50:	023fe022 	.word	0x023fe022
 23eaf54:	023fe039 	.word	0x023fe039
 23eaf58:	023fe030 	.word	0x023fe030
 23eaf5c:	1006a177 	.word	0x1006a177
 23eaf60:	023fe03f 	.word	0x023fe03f
 23eaf64:	1006a298 	.word	0x1006a298
 23eaf68:	023fe056 	.word	0x023fe056
 23eaf6c:	023fe062 	.word	0x023fe062
 23eaf70:	023fe073 	.word	0x023fe073
 23eaf74:	023fe08a 	.word	0x023fe08a
 23eaf78:	023fe081 	.word	0x023fe081
 23eaf7c:	023fe090 	.word	0x023fe090
 23eaf80:	023fe0a3 	.word	0x023fe0a3
 23eaf84:	023fe0b7 	.word	0x023fe0b7
 23eaf88:	023fe0cc 	.word	0x023fe0cc
  else if (strcmp (s,"TXI5M") == 0) { // SetTransmit Interval to 5 Minutes
 23eaf8c:	4628      	mov	r0, r5
 23eaf8e:	4966      	ldr	r1, [pc, #408]	; (23eb128 <_Z17Function_DoAction6String+0x764>)
 23eaf90:	f7fb f828 	bl	23e5fe4 <strcmp>
 23eaf94:	4604      	mov	r4, r0
 23eaf96:	2800      	cmp	r0, #0
 23eaf98:	d13d      	bne.n	23eb016 <_Z17Function_DoAction6String+0x652>
    Output("DoAction:TXI5M");
 23eaf9a:	4864      	ldr	r0, [pc, #400]	; (23eb12c <_Z17Function_DoAction6String+0x768>)
 23eaf9c:	f7fc f922 	bl	23e71e4 <_Z6OutputPKc>
    if (SD_exists) {
 23eafa0:	4b63      	ldr	r3, [pc, #396]	; (23eb130 <_Z17Function_DoAction6String+0x76c>)
 23eafa2:	781b      	ldrb	r3, [r3, #0]
 23eafa4:	2b00      	cmp	r3, #0
 23eafa6:	d034      	beq.n	23eb012 <_Z17Function_DoAction6String+0x64e>
      if (SD.exists(SD_TX5M_FILE)) {
 23eafa8:	4962      	ldr	r1, [pc, #392]	; (23eb134 <_Z17Function_DoAction6String+0x770>)
 23eafaa:	4863      	ldr	r0, [pc, #396]	; (23eb138 <_Z17Function_DoAction6String+0x774>)
 23eafac:	f7fb fe80 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eafb0:	b170      	cbz	r0, 23eafd0 <_Z17Function_DoAction6String+0x60c>
        Output ("TXI5M, ALREADY SET"); 
 23eafb2:	4862      	ldr	r0, [pc, #392]	; (23eb13c <_Z17Function_DoAction6String+0x778>)
 23eafb4:	f7fc f916 	bl	23e71e4 <_Z6OutputPKc>
        obs_tx_interval = 5;     
 23eafb8:	2005      	movs	r0, #5
 23eafba:	2100      	movs	r1, #0
 23eafbc:	4b60      	ldr	r3, [pc, #384]	; (23eb140 <_Z17Function_DoAction6String+0x77c>)
 23eafbe:	e9c3 0100 	strd	r0, r1, [r3]
      if (SD.exists(SD_TX10M_FILE)) {
 23eafc2:	4960      	ldr	r1, [pc, #384]	; (23eb144 <_Z17Function_DoAction6String+0x780>)
 23eafc4:	485c      	ldr	r0, [pc, #368]	; (23eb138 <_Z17Function_DoAction6String+0x774>)
 23eafc6:	f7fb fe73 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eafca:	b9d0      	cbnz	r0, 23eb002 <_Z17Function_DoAction6String+0x63e>
    return(0);
 23eafcc:	2400      	movs	r4, #0
 23eafce:	e50d      	b.n	23ea9ec <_Z17Function_DoAction6String+0x28>
        File fp = SD.open(SD_TX5M_FILE, FILE_WRITE);
 23eafd0:	4668      	mov	r0, sp
 23eafd2:	f244 2302 	movw	r3, #16898	; 0x4202
 23eafd6:	4a57      	ldr	r2, [pc, #348]	; (23eb134 <_Z17Function_DoAction6String+0x770>)
 23eafd8:	4957      	ldr	r1, [pc, #348]	; (23eb138 <_Z17Function_DoAction6String+0x774>)
 23eafda:	f00c f9ef 	bl	23f73bc <_ZN8FsVolume4openEPKci>
 23eafde:	a804      	add	r0, sp, #16
 23eafe0:	f7fb fedf 	bl	23e6da2 <_ZNK10FsBaseFile6isOpenEv>
        if (fp) {
 23eafe4:	b158      	cbz	r0, 23eaffe <_Z17Function_DoAction6String+0x63a>
          fp.close();
 23eafe6:	a804      	add	r0, sp, #16
 23eafe8:	f00c f90f 	bl	23f720a <_ZN10FsBaseFile5closeEv>
          obs_tx_interval = 5;
 23eafec:	2005      	movs	r0, #5
 23eafee:	2100      	movs	r1, #0
 23eaff0:	4b53      	ldr	r3, [pc, #332]	; (23eb140 <_Z17Function_DoAction6String+0x77c>)
 23eaff2:	e9c3 0100 	strd	r0, r1, [r3]
          Output ("TXI5M SET");
 23eaff6:	4854      	ldr	r0, [pc, #336]	; (23eb148 <_Z17Function_DoAction6String+0x784>)
 23eaff8:	f7fc f8f4 	bl	23e71e4 <_Z6OutputPKc>
    virtual ~Print() {}
 23eaffc:	e7e1      	b.n	23eafc2 <_Z17Function_DoAction6String+0x5fe>
          Output ("TXI5M OPEN ERR");
 23eaffe:	4853      	ldr	r0, [pc, #332]	; (23eb14c <_Z17Function_DoAction6String+0x788>)
 23eb000:	e55a      	b.n	23eaab8 <_Z17Function_DoAction6String+0xf4>
        if (SD.remove (SD_TX10M_FILE)) {
 23eb002:	4950      	ldr	r1, [pc, #320]	; (23eb144 <_Z17Function_DoAction6String+0x780>)
 23eb004:	484c      	ldr	r0, [pc, #304]	; (23eb138 <_Z17Function_DoAction6String+0x774>)
 23eb006:	f7fb fe6e 	bl	23e6ce6 <_ZN8FsVolume6removeEPKc>
 23eb00a:	2800      	cmp	r0, #0
 23eb00c:	d0de      	beq.n	23eafcc <_Z17Function_DoAction6String+0x608>
          Output ("TXI5M: Removed TX10M File");
 23eb00e:	4850      	ldr	r0, [pc, #320]	; (23eb150 <_Z17Function_DoAction6String+0x78c>)
 23eb010:	e54e      	b.n	23eaab0 <_Z17Function_DoAction6String+0xec>
      Output("TXI5M, SD NF"); 
 23eb012:	4850      	ldr	r0, [pc, #320]	; (23eb154 <_Z17Function_DoAction6String+0x790>)
 23eb014:	e574      	b.n	23eab00 <_Z17Function_DoAction6String+0x13c>
  else if (strcmp (s,"TXI10M") == 0) { // SetTransmit Interval to 10 Minutes
 23eb016:	4628      	mov	r0, r5
 23eb018:	494f      	ldr	r1, [pc, #316]	; (23eb158 <_Z17Function_DoAction6String+0x794>)
 23eb01a:	f7fa ffe3 	bl	23e5fe4 <strcmp>
 23eb01e:	4604      	mov	r4, r0
 23eb020:	2800      	cmp	r0, #0
 23eb022:	d13c      	bne.n	23eb09e <_Z17Function_DoAction6String+0x6da>
    Output("DoAction:TXI10M");
 23eb024:	484d      	ldr	r0, [pc, #308]	; (23eb15c <_Z17Function_DoAction6String+0x798>)
 23eb026:	f7fc f8dd 	bl	23e71e4 <_Z6OutputPKc>
    if (SD_exists) {
 23eb02a:	4b41      	ldr	r3, [pc, #260]	; (23eb130 <_Z17Function_DoAction6String+0x76c>)
 23eb02c:	781b      	ldrb	r3, [r3, #0]
 23eb02e:	2b00      	cmp	r3, #0
 23eb030:	d033      	beq.n	23eb09a <_Z17Function_DoAction6String+0x6d6>
      if (SD.exists(SD_TX10M_FILE)) {
 23eb032:	4944      	ldr	r1, [pc, #272]	; (23eb144 <_Z17Function_DoAction6String+0x780>)
 23eb034:	4840      	ldr	r0, [pc, #256]	; (23eb138 <_Z17Function_DoAction6String+0x774>)
 23eb036:	f7fb fe3b 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eb03a:	b1a8      	cbz	r0, 23eb068 <_Z17Function_DoAction6String+0x6a4>
        Output ("TXI10M, ALREADY SET"); 
 23eb03c:	4848      	ldr	r0, [pc, #288]	; (23eb160 <_Z17Function_DoAction6String+0x79c>)
 23eb03e:	f7fc f8d1 	bl	23e71e4 <_Z6OutputPKc>
        obs_tx_interval = 10;     
 23eb042:	200a      	movs	r0, #10
 23eb044:	2100      	movs	r1, #0
 23eb046:	4b3e      	ldr	r3, [pc, #248]	; (23eb140 <_Z17Function_DoAction6String+0x77c>)
 23eb048:	e9c3 0100 	strd	r0, r1, [r3]
      if (SD.exists(SD_TX5M_FILE)) {
 23eb04c:	4939      	ldr	r1, [pc, #228]	; (23eb134 <_Z17Function_DoAction6String+0x770>)
 23eb04e:	483a      	ldr	r0, [pc, #232]	; (23eb138 <_Z17Function_DoAction6String+0x774>)
 23eb050:	f7fb fe2e 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eb054:	2800      	cmp	r0, #0
 23eb056:	d0b9      	beq.n	23eafcc <_Z17Function_DoAction6String+0x608>
        if (SD.remove (SD_TX5M_FILE)) {
 23eb058:	4936      	ldr	r1, [pc, #216]	; (23eb134 <_Z17Function_DoAction6String+0x770>)
 23eb05a:	4837      	ldr	r0, [pc, #220]	; (23eb138 <_Z17Function_DoAction6String+0x774>)
 23eb05c:	f7fb fe43 	bl	23e6ce6 <_ZN8FsVolume6removeEPKc>
 23eb060:	2800      	cmp	r0, #0
 23eb062:	d0b3      	beq.n	23eafcc <_Z17Function_DoAction6String+0x608>
          Output ("TXI5M: Removed TX5M File");
 23eb064:	483f      	ldr	r0, [pc, #252]	; (23eb164 <_Z17Function_DoAction6String+0x7a0>)
 23eb066:	e523      	b.n	23eaab0 <_Z17Function_DoAction6String+0xec>
        File fp = SD.open(SD_TX10M_FILE, FILE_WRITE);
 23eb068:	4668      	mov	r0, sp
 23eb06a:	f244 2302 	movw	r3, #16898	; 0x4202
 23eb06e:	4a35      	ldr	r2, [pc, #212]	; (23eb144 <_Z17Function_DoAction6String+0x780>)
 23eb070:	4931      	ldr	r1, [pc, #196]	; (23eb138 <_Z17Function_DoAction6String+0x774>)
 23eb072:	f00c f9a3 	bl	23f73bc <_ZN8FsVolume4openEPKci>
 23eb076:	a804      	add	r0, sp, #16
 23eb078:	f7fb fe93 	bl	23e6da2 <_ZNK10FsBaseFile6isOpenEv>
        if (fp) {
 23eb07c:	b158      	cbz	r0, 23eb096 <_Z17Function_DoAction6String+0x6d2>
          fp.close();
 23eb07e:	a804      	add	r0, sp, #16
 23eb080:	f00c f8c3 	bl	23f720a <_ZN10FsBaseFile5closeEv>
          obs_tx_interval = 10;
 23eb084:	200a      	movs	r0, #10
 23eb086:	2100      	movs	r1, #0
 23eb088:	4b2d      	ldr	r3, [pc, #180]	; (23eb140 <_Z17Function_DoAction6String+0x77c>)
 23eb08a:	e9c3 0100 	strd	r0, r1, [r3]
          Output ("TXI10M SET");
 23eb08e:	4836      	ldr	r0, [pc, #216]	; (23eb168 <_Z17Function_DoAction6String+0x7a4>)
 23eb090:	f7fc f8a8 	bl	23e71e4 <_Z6OutputPKc>
 23eb094:	e7da      	b.n	23eb04c <_Z17Function_DoAction6String+0x688>
          Output ("TXI10M OPEN ERR");
 23eb096:	4835      	ldr	r0, [pc, #212]	; (23eb16c <_Z17Function_DoAction6String+0x7a8>)
 23eb098:	e50e      	b.n	23eaab8 <_Z17Function_DoAction6String+0xf4>
      Output("TXI10M, SD NF"); 
 23eb09a:	4835      	ldr	r0, [pc, #212]	; (23eb170 <_Z17Function_DoAction6String+0x7ac>)
 23eb09c:	e530      	b.n	23eab00 <_Z17Function_DoAction6String+0x13c>
  else if (strcmp (s,"TXI15M") == 0) { // SetTransmit Interval to 15 Minutes
 23eb09e:	4628      	mov	r0, r5
 23eb0a0:	4934      	ldr	r1, [pc, #208]	; (23eb174 <_Z17Function_DoAction6String+0x7b0>)
 23eb0a2:	f7fa ff9f 	bl	23e5fe4 <strcmp>
 23eb0a6:	4604      	mov	r4, r0
 23eb0a8:	2800      	cmp	r0, #0
 23eb0aa:	d13b      	bne.n	23eb124 <_Z17Function_DoAction6String+0x760>
    Output("DoAction:TXI15M");
 23eb0ac:	4832      	ldr	r0, [pc, #200]	; (23eb178 <_Z17Function_DoAction6String+0x7b4>)
 23eb0ae:	f7fc f899 	bl	23e71e4 <_Z6OutputPKc>
    if (SD_exists) {
 23eb0b2:	4b1f      	ldr	r3, [pc, #124]	; (23eb130 <_Z17Function_DoAction6String+0x76c>)
 23eb0b4:	781b      	ldrb	r3, [r3, #0]
 23eb0b6:	2b00      	cmp	r3, #0
 23eb0b8:	d032      	beq.n	23eb120 <_Z17Function_DoAction6String+0x75c>
      if (!SD.exists(SD_TX5M_FILE) && !SD.exists(SD_TX10M_FILE)) {
 23eb0ba:	491e      	ldr	r1, [pc, #120]	; (23eb134 <_Z17Function_DoAction6String+0x770>)
 23eb0bc:	481e      	ldr	r0, [pc, #120]	; (23eb138 <_Z17Function_DoAction6String+0x774>)
 23eb0be:	f7fb fdf7 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eb0c2:	4d1f      	ldr	r5, [pc, #124]	; (23eb140 <_Z17Function_DoAction6String+0x77c>)
 23eb0c4:	b960      	cbnz	r0, 23eb0e0 <_Z17Function_DoAction6String+0x71c>
 23eb0c6:	491f      	ldr	r1, [pc, #124]	; (23eb144 <_Z17Function_DoAction6String+0x780>)
 23eb0c8:	481b      	ldr	r0, [pc, #108]	; (23eb138 <_Z17Function_DoAction6String+0x774>)
 23eb0ca:	f7fb fdf1 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eb0ce:	b938      	cbnz	r0, 23eb0e0 <_Z17Function_DoAction6String+0x71c>
        Output ("TXI15M, ALREADY SET"); 
 23eb0d0:	482a      	ldr	r0, [pc, #168]	; (23eb17c <_Z17Function_DoAction6String+0x7b8>)
 23eb0d2:	f7fc f887 	bl	23e71e4 <_Z6OutputPKc>
        obs_tx_interval = 15;     
 23eb0d6:	220f      	movs	r2, #15
 23eb0d8:	2300      	movs	r3, #0
 23eb0da:	e9c5 2300 	strd	r2, r3, [r5]
 23eb0de:	e485      	b.n	23ea9ec <_Z17Function_DoAction6String+0x28>
        if (SD.exists(SD_TX5M_FILE)) {
 23eb0e0:	4914      	ldr	r1, [pc, #80]	; (23eb134 <_Z17Function_DoAction6String+0x770>)
 23eb0e2:	4815      	ldr	r0, [pc, #84]	; (23eb138 <_Z17Function_DoAction6String+0x774>)
 23eb0e4:	f7fb fde4 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eb0e8:	b138      	cbz	r0, 23eb0fa <_Z17Function_DoAction6String+0x736>
          if (SD.remove (SD_TX5M_FILE)) {
 23eb0ea:	4912      	ldr	r1, [pc, #72]	; (23eb134 <_Z17Function_DoAction6String+0x770>)
 23eb0ec:	4812      	ldr	r0, [pc, #72]	; (23eb138 <_Z17Function_DoAction6String+0x774>)
 23eb0ee:	f7fb fdfa 	bl	23e6ce6 <_ZN8FsVolume6removeEPKc>
 23eb0f2:	b110      	cbz	r0, 23eb0fa <_Z17Function_DoAction6String+0x736>
            Output ("TXI15M: Removed TX5M File");
 23eb0f4:	4822      	ldr	r0, [pc, #136]	; (23eb180 <_Z17Function_DoAction6String+0x7bc>)
 23eb0f6:	f7fc f875 	bl	23e71e4 <_Z6OutputPKc>
        if (SD.exists(SD_TX10M_FILE)) {
 23eb0fa:	4912      	ldr	r1, [pc, #72]	; (23eb144 <_Z17Function_DoAction6String+0x780>)
 23eb0fc:	480e      	ldr	r0, [pc, #56]	; (23eb138 <_Z17Function_DoAction6String+0x774>)
 23eb0fe:	f7fb fdd7 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eb102:	b138      	cbz	r0, 23eb114 <_Z17Function_DoAction6String+0x750>
          if (SD.remove (SD_TX10M_FILE)) {
 23eb104:	490f      	ldr	r1, [pc, #60]	; (23eb144 <_Z17Function_DoAction6String+0x780>)
 23eb106:	480c      	ldr	r0, [pc, #48]	; (23eb138 <_Z17Function_DoAction6String+0x774>)
 23eb108:	f7fb fded 	bl	23e6ce6 <_ZN8FsVolume6removeEPKc>
 23eb10c:	b110      	cbz	r0, 23eb114 <_Z17Function_DoAction6String+0x750>
            Output ("TXI15M: Removed TX10M File");
 23eb10e:	481d      	ldr	r0, [pc, #116]	; (23eb184 <_Z17Function_DoAction6String+0x7c0>)
 23eb110:	f7fc f868 	bl	23e71e4 <_Z6OutputPKc>
        obs_tx_interval = 15;
 23eb114:	220f      	movs	r2, #15
 23eb116:	2300      	movs	r3, #0
        Output ("TXI15M SET"); 
 23eb118:	481b      	ldr	r0, [pc, #108]	; (23eb188 <_Z17Function_DoAction6String+0x7c4>)
        obs_tx_interval = 15;
 23eb11a:	e9c5 2300 	strd	r2, r3, [r5]
        Output ("TXI15M SET"); 
 23eb11e:	e4c7      	b.n	23eaab0 <_Z17Function_DoAction6String+0xec>
      Output("TXI15M, SD NF"); 
 23eb120:	481a      	ldr	r0, [pc, #104]	; (23eb18c <_Z17Function_DoAction6String+0x7c8>)
 23eb122:	e4ed      	b.n	23eab00 <_Z17Function_DoAction6String+0x13c>
    Output("DoAction:UKN"); 
 23eb124:	481a      	ldr	r0, [pc, #104]	; (23eb190 <_Z17Function_DoAction6String+0x7cc>)
 23eb126:	e4eb      	b.n	23eab00 <_Z17Function_DoAction6String+0x13c>
 23eb128:	023fe0e3 	.word	0x023fe0e3
 23eb12c:	023fe0da 	.word	0x023fe0da
 23eb130:	1006a7b4 	.word	0x1006a7b4
 23eb134:	1006a195 	.word	0x1006a195
 23eb138:	1006a308 	.word	0x1006a308
 23eb13c:	023fe0e9 	.word	0x023fe0e9
 23eb140:	1006a1f8 	.word	0x1006a1f8
 23eb144:	1006a18a 	.word	0x1006a18a
 23eb148:	023fe0fc 	.word	0x023fe0fc
 23eb14c:	023fe106 	.word	0x023fe106
 23eb150:	023fe115 	.word	0x023fe115
 23eb154:	023fe12f 	.word	0x023fe12f
 23eb158:	023fe145 	.word	0x023fe145
 23eb15c:	023fe13c 	.word	0x023fe13c
 23eb160:	023fe14c 	.word	0x023fe14c
 23eb164:	023fe17b 	.word	0x023fe17b
 23eb168:	023fe160 	.word	0x023fe160
 23eb16c:	023fe16b 	.word	0x023fe16b
 23eb170:	023fe194 	.word	0x023fe194
 23eb174:	023fe1ab 	.word	0x023fe1ab
 23eb178:	023fe1a2 	.word	0x023fe1a2
 23eb17c:	023fe1b2 	.word	0x023fe1b2
 23eb180:	023fe1c6 	.word	0x023fe1c6
 23eb184:	023fe1e0 	.word	0x023fe1e0
 23eb188:	023fe1fb 	.word	0x023fe1fb
 23eb18c:	023fe206 	.word	0x023fe206
 23eb190:	023fe214 	.word	0x023fe214

023eb194 <_Z14SimChangeCheckv>:
void SimChangeCheck() {
 23eb194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    Stream() {_timeout=1000;}
 23eb198:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23eb19c:	2400      	movs	r4, #0
 23eb19e:	b0b6      	sub	sp, #216	; 0xd8
 23eb1a0:	e9cd 4303 	strd	r4, r3, [sp, #12]
        return cellular_set_active_sim(sim, nullptr);
    }

    SimType getActiveSim() const {
        int sim = 0;
        const int r = cellular_get_active_sim(&sim, nullptr);
 23eb1a4:	ae16      	add	r6, sp, #88	; 0x58
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23eb1a6:	4ba6      	ldr	r3, [pc, #664]	; (23eb440 <_Z14SimChangeCheckv+0x2ac>)
 23eb1a8:	4621      	mov	r1, r4
 23eb1aa:	4630      	mov	r0, r6
  FsBaseFile() = default;  // cppcheck-suppress uninitMemberVar
 23eb1ac:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23eb1b0:	9302      	str	r3, [sp, #8]
        int sim = 0;
 23eb1b2:	9416      	str	r4, [sp, #88]	; 0x58
        const int r = cellular_get_active_sim(&sim, nullptr);
 23eb1b4:	f00c f9b0 	bl	23f7518 <cellular_get_active_sim>
        if (r < 0) {
 23eb1b8:	42a0      	cmp	r0, r4
 23eb1ba:	da06      	bge.n	23eb1ca <_Z14SimChangeCheckv+0x36>
            return INVALID_SIM;
 23eb1bc:	4622      	mov	r2, r4
    sprintf (msgbuf, "SIM:Unknown[%d]", simType);
 23eb1be:	49a1      	ldr	r1, [pc, #644]	; (23eb444 <_Z14SimChangeCheckv+0x2b0>)
 23eb1c0:	48a1      	ldr	r0, [pc, #644]	; (23eb448 <_Z14SimChangeCheckv+0x2b4>)
 23eb1c2:	f00c ffe5 	bl	23f8190 <sprintf>
    Output (msgbuf);
 23eb1c6:	48a0      	ldr	r0, [pc, #640]	; (23eb448 <_Z14SimChangeCheckv+0x2b4>)
 23eb1c8:	e004      	b.n	23eb1d4 <_Z14SimChangeCheckv+0x40>
        }
        return (SimType)sim;
 23eb1ca:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
  if (simType == 1) {
 23eb1ce:	2a01      	cmp	r2, #1
 23eb1d0:	d13f      	bne.n	23eb252 <_Z14SimChangeCheckv+0xbe>
    Output ("SIM:Internal");
 23eb1d2:	489e      	ldr	r0, [pc, #632]	; (23eb44c <_Z14SimChangeCheckv+0x2b8>)
    Output (msgbuf);
 23eb1d4:	f7fc f806 	bl	23e71e4 <_Z6OutputPKc>
  if (SD_exists) {
 23eb1d8:	4b9d      	ldr	r3, [pc, #628]	; (23eb450 <_Z14SimChangeCheckv+0x2bc>)
 23eb1da:	781b      	ldrb	r3, [r3, #0]
 23eb1dc:	2b00      	cmp	r3, #0
 23eb1de:	f000 81a1 	beq.w	23eb524 <_Z14SimChangeCheckv+0x390>
    if (SD.exists(SD_sim_file)) {
 23eb1e2:	499c      	ldr	r1, [pc, #624]	; (23eb454 <_Z14SimChangeCheckv+0x2c0>)
 23eb1e4:	489c      	ldr	r0, [pc, #624]	; (23eb458 <_Z14SimChangeCheckv+0x2c4>)
 23eb1e6:	f7fb fd63 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eb1ea:	2800      	cmp	r0, #0
 23eb1ec:	f000 819d 	beq.w	23eb52a <_Z14SimChangeCheckv+0x396>
      fp = SD.open(SD_sim_file, FILE_READ); // Open the file for reading, starting at the beginning of the file.
 23eb1f0:	4a98      	ldr	r2, [pc, #608]	; (23eb454 <_Z14SimChangeCheckv+0x2c0>)
 23eb1f2:	2300      	movs	r3, #0
 23eb1f4:	4630      	mov	r0, r6
 23eb1f6:	4998      	ldr	r1, [pc, #608]	; (23eb458 <_Z14SimChangeCheckv+0x2c4>)
 23eb1f8:	f00c f8e0 	bl	23f73bc <_ZN8FsVolume4openEPKci>
class Print
 23eb1fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    move(&from);
 23eb1fe:	a91a      	add	r1, sp, #104	; 0x68
 23eb200:	9303      	str	r3, [sp, #12]
class Stream : public Print
 23eb202:	9b18      	ldr	r3, [sp, #96]	; 0x60
 23eb204:	a806      	add	r0, sp, #24
 23eb206:	9304      	str	r3, [sp, #16]
 23eb208:	9b19      	ldr	r3, [sp, #100]	; 0x64
 23eb20a:	9305      	str	r3, [sp, #20]
 23eb20c:	f00b fff3 	bl	23f71f6 <_ZN10FsBaseFile4moveEPS_>
  operator bool() const { return isOpen(); }
 23eb210:	a806      	add	r0, sp, #24
 23eb212:	f7fb fdc6 	bl	23e6da2 <_ZNK10FsBaseFile6isOpenEv>
      if (fp) {
 23eb216:	4604      	mov	r4, r0
 23eb218:	2800      	cmp	r0, #0
 23eb21a:	f000 8180 	beq.w	23eb51e <_Z14SimChangeCheckv+0x38a>
  PosType size() { return BaseFile::fileSize(); }
 23eb21e:	a806      	add	r0, sp, #24
 23eb220:	f7fb fdb3 	bl	23e6d8a <_ZNK10FsBaseFile8fileSizeEv>
        if (fp.size()<=7 || fp.size()>127) {
 23eb224:	3808      	subs	r0, #8
 23eb226:	f161 0100 	sbc.w	r1, r1, #0
 23eb22a:	2878      	cmp	r0, #120	; 0x78
 23eb22c:	f171 0300 	sbcs.w	r3, r1, #0
 23eb230:	d313      	bcc.n	23eb25a <_Z14SimChangeCheckv+0xc6>
          fp.close();
 23eb232:	a806      	add	r0, sp, #24
 23eb234:	f00b ffe9 	bl	23f720a <_ZN10FsBaseFile5closeEv>
          Output ("SIMF:Invalid SZ");
 23eb238:	4888      	ldr	r0, [pc, #544]	; (23eb45c <_Z14SimChangeCheckv+0x2c8>)
 23eb23a:	f7fb ffd3 	bl	23e71e4 <_Z6OutputPKc>
          if (SD.remove (SD_sim_file)) {
 23eb23e:	4985      	ldr	r1, [pc, #532]	; (23eb454 <_Z14SimChangeCheckv+0x2c0>)
 23eb240:	4885      	ldr	r0, [pc, #532]	; (23eb458 <_Z14SimChangeCheckv+0x2c4>)
 23eb242:	f7fb fd50 	bl	23e6ce6 <_ZN8FsVolume6removeEPKc>
 23eb246:	4604      	mov	r4, r0
 23eb248:	b9f0      	cbnz	r0, 23eb288 <_Z14SimChangeCheckv+0xf4>
            Output ("SIMF->Del:Err");
 23eb24a:	4885      	ldr	r0, [pc, #532]	; (23eb460 <_Z14SimChangeCheckv+0x2cc>)
              Output(msgbuf);
 23eb24c:	f7fb ffca 	bl	23e71e4 <_Z6OutputPKc>
              changed = true;
 23eb250:	e041      	b.n	23eb2d6 <_Z14SimChangeCheckv+0x142>
  } else if (simType == 2) {
 23eb252:	2a02      	cmp	r2, #2
 23eb254:	d1b3      	bne.n	23eb1be <_Z14SimChangeCheckv+0x2a>
    Output ("SIM:External");
 23eb256:	4883      	ldr	r0, [pc, #524]	; (23eb464 <_Z14SimChangeCheckv+0x2d0>)
 23eb258:	e7bc      	b.n	23eb1d4 <_Z14SimChangeCheckv+0x40>
          Output ("SIMF:Open");
 23eb25a:	4883      	ldr	r0, [pc, #524]	; (23eb468 <_Z14SimChangeCheckv+0x2d4>)
 23eb25c:	f7fb ffc2 	bl	23e71e4 <_Z6OutputPKc>
 23eb260:	4637      	mov	r7, r6
  int i=0;
 23eb262:	2500      	movs	r5, #0
  int available() override { return BaseFile::available(); }
 23eb264:	a806      	add	r0, sp, #24
 23eb266:	f7fb fd63 	bl	23e6d30 <_ZNK10FsBaseFile9availableEv>
          while (fp.available() && (i < 127 )) {
 23eb26a:	b190      	cbz	r0, 23eb292 <_Z14SimChangeCheckv+0xfe>
 23eb26c:	2d7f      	cmp	r5, #127	; 0x7f
 23eb26e:	d010      	beq.n	23eb292 <_Z14SimChangeCheckv+0xfe>
  int read() override { return BaseFile::read(); }
 23eb270:	a806      	add	r0, sp, #24
 23eb272:	f7fb fd9f 	bl	23e6db4 <_ZN10FsBaseFile4readEv>
            ch = fp.read();
 23eb276:	b2c0      	uxtb	r0, r0
            if ((ch == 0x0A) || (ch == 0x0D) ) {  // newline or linefeed
 23eb278:	280a      	cmp	r0, #10
 23eb27a:	d00a      	beq.n	23eb292 <_Z14SimChangeCheckv+0xfe>
 23eb27c:	280d      	cmp	r0, #13
 23eb27e:	d008      	beq.n	23eb292 <_Z14SimChangeCheckv+0xfe>
              buf[i++] = ch;
 23eb280:	3501      	adds	r5, #1
 23eb282:	f807 0b01 	strb.w	r0, [r7], #1
          while (fp.available() && (i < 127 )) {
 23eb286:	e7ed      	b.n	23eb264 <_Z14SimChangeCheckv+0xd0>
            Output ("SIMF->Del:OK");
 23eb288:	4878      	ldr	r0, [pc, #480]	; (23eb46c <_Z14SimChangeCheckv+0x2d8>)
            Output(msgbuf);
 23eb28a:	f7fb ffab 	bl	23e71e4 <_Z6OutputPKc>
  bool changed = false;
 23eb28e:	2400      	movs	r4, #0
 23eb290:	e021      	b.n	23eb2d6 <_Z14SimChangeCheckv+0x142>
          buf[i] = (char) NULL;
 23eb292:	ab36      	add	r3, sp, #216	; 0xd8
 23eb294:	441d      	add	r5, r3
 23eb296:	2300      	movs	r3, #0
          id = strtok_r(p, " ", &p);
 23eb298:	4630      	mov	r0, r6
          buf[i] = (char) NULL;
 23eb29a:	f805 3c80 	strb.w	r3, [r5, #-128]
          id = strtok_r(p, " ", &p);
 23eb29e:	4974      	ldr	r1, [pc, #464]	; (23eb470 <_Z14SimChangeCheckv+0x2dc>)
 23eb2a0:	aa01      	add	r2, sp, #4
          p = &buf[0];
 23eb2a2:	9601      	str	r6, [sp, #4]
          id = strtok_r(p, " ", &p);
 23eb2a4:	f011 fe9c 	bl	23fcfe0 <strtok_r>
          if (id != NULL) {
 23eb2a8:	4605      	mov	r5, r0
 23eb2aa:	b138      	cbz	r0, 23eb2bc <_Z14SimChangeCheckv+0x128>
            sprintf (msgbuf, "SIMF:ID[%s]", id);
 23eb2ac:	4602      	mov	r2, r0
 23eb2ae:	4971      	ldr	r1, [pc, #452]	; (23eb474 <_Z14SimChangeCheckv+0x2e0>)
 23eb2b0:	4865      	ldr	r0, [pc, #404]	; (23eb448 <_Z14SimChangeCheckv+0x2b4>)
 23eb2b2:	f00c ff6d 	bl	23f8190 <sprintf>
            Output(msgbuf);
 23eb2b6:	4864      	ldr	r0, [pc, #400]	; (23eb448 <_Z14SimChangeCheckv+0x2b4>)
 23eb2b8:	f7fb ff94 	bl	23e71e4 <_Z6OutputPKc>
          if (strcmp (id,"INTERNAL") == 0) {
 23eb2bc:	4628      	mov	r0, r5
 23eb2be:	496e      	ldr	r1, [pc, #440]	; (23eb478 <_Z14SimChangeCheckv+0x2e4>)
 23eb2c0:	f7fa fe90 	bl	23e5fe4 <strcmp>
 23eb2c4:	4606      	mov	r6, r0
 23eb2c6:	b9f8      	cbnz	r0, 23eb308 <_Z14SimChangeCheckv+0x174>
        return cellular_set_active_sim(sim, nullptr);
 23eb2c8:	4601      	mov	r1, r0
 23eb2ca:	2001      	movs	r0, #1
 23eb2cc:	f00c f916 	bl	23f74fc <cellular_set_active_sim>
        cellular_credentials_clear(nullptr);
 23eb2d0:	4630      	mov	r0, r6
 23eb2d2:	f00c f92f 	bl	23f7534 <cellular_credentials_clear>
        if (SD.exists(SD_simold_file)) {
 23eb2d6:	4969      	ldr	r1, [pc, #420]	; (23eb47c <_Z14SimChangeCheckv+0x2e8>)
 23eb2d8:	485f      	ldr	r0, [pc, #380]	; (23eb458 <_Z14SimChangeCheckv+0x2c4>)
 23eb2da:	f7fb fce9 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eb2de:	b138      	cbz	r0, 23eb2f0 <_Z14SimChangeCheckv+0x15c>
          if (SD.remove (SD_simold_file)) {
 23eb2e0:	4966      	ldr	r1, [pc, #408]	; (23eb47c <_Z14SimChangeCheckv+0x2e8>)
 23eb2e2:	485d      	ldr	r0, [pc, #372]	; (23eb458 <_Z14SimChangeCheckv+0x2c4>)
 23eb2e4:	f7fb fcff 	bl	23e6ce6 <_ZN8FsVolume6removeEPKc>
 23eb2e8:	b110      	cbz	r0, 23eb2f0 <_Z14SimChangeCheckv+0x15c>
            Output ("SIMF:DEL SIMOLD");
 23eb2ea:	4865      	ldr	r0, [pc, #404]	; (23eb480 <_Z14SimChangeCheckv+0x2ec>)
 23eb2ec:	f7fb ff7a 	bl	23e71e4 <_Z6OutputPKc>
    return m_fFile   ? m_fFile->rename(newPath)
 23eb2f0:	9814      	ldr	r0, [sp, #80]	; 0x50
 23eb2f2:	2800      	cmp	r0, #0
 23eb2f4:	f000 80ef 	beq.w	23eb4d6 <_Z14SimChangeCheckv+0x342>
 23eb2f8:	4960      	ldr	r1, [pc, #384]	; (23eb47c <_Z14SimChangeCheckv+0x2e8>)
 23eb2fa:	f009 fad7 	bl	23f48ac <_ZN7FatFile6renameEPKc>
        if (!fp.rename(SD_simold_file)) {
 23eb2fe:	2800      	cmp	r0, #0
 23eb300:	f000 80eb 	beq.w	23eb4da <_Z14SimChangeCheckv+0x346>
          Output ("SIMF:RENAME OK");
 23eb304:	485f      	ldr	r0, [pc, #380]	; (23eb484 <_Z14SimChangeCheckv+0x2f0>)
 23eb306:	e0e9      	b.n	23eb4dc <_Z14SimChangeCheckv+0x348>
          else if (strcmp (id,"APN") == 0) {
 23eb308:	4628      	mov	r0, r5
 23eb30a:	495f      	ldr	r1, [pc, #380]	; (23eb488 <_Z14SimChangeCheckv+0x2f4>)
 23eb30c:	f7fa fe6a 	bl	23e5fe4 <strcmp>
 23eb310:	4606      	mov	r6, r0
 23eb312:	b9f8      	cbnz	r0, 23eb354 <_Z14SimChangeCheckv+0x1c0>
            apn = strtok_r(p, " ", &p);
 23eb314:	4956      	ldr	r1, [pc, #344]	; (23eb470 <_Z14SimChangeCheckv+0x2dc>)
 23eb316:	9801      	ldr	r0, [sp, #4]
 23eb318:	aa01      	add	r2, sp, #4
 23eb31a:	f011 fe61 	bl	23fcfe0 <strtok_r>
            if (apn == NULL) {
 23eb31e:	4605      	mov	r5, r0
 23eb320:	b908      	cbnz	r0, 23eb326 <_Z14SimChangeCheckv+0x192>
              Output("SIMF:APN=Null Err");
 23eb322:	485a      	ldr	r0, [pc, #360]	; (23eb48c <_Z14SimChangeCheckv+0x2f8>)
 23eb324:	e7b1      	b.n	23eb28a <_Z14SimChangeCheckv+0xf6>
        return cellular_set_active_sim(sim, nullptr);
 23eb326:	4631      	mov	r1, r6
 23eb328:	2002      	movs	r0, #2
 23eb32a:	f00c f8e7 	bl	23f74fc <cellular_set_active_sim>
              Output("SIM:Set External-APN");
 23eb32e:	4858      	ldr	r0, [pc, #352]	; (23eb490 <_Z14SimChangeCheckv+0x2fc>)
 23eb330:	f7fb ff58 	bl	23e71e4 <_Z6OutputPKc>
        cellular_credentials_set(apn, username, password, nullptr);
 23eb334:	4a57      	ldr	r2, [pc, #348]	; (23eb494 <_Z14SimChangeCheckv+0x300>)
 23eb336:	4633      	mov	r3, r6
 23eb338:	4611      	mov	r1, r2
 23eb33a:	4628      	mov	r0, r5
 23eb33c:	f00c f8b4 	bl	23f74a8 <cellular_credentials_set>
              Output("SIM:Set Credentials");
 23eb340:	4855      	ldr	r0, [pc, #340]	; (23eb498 <_Z14SimChangeCheckv+0x304>)
 23eb342:	f7fb ff4f 	bl	23e71e4 <_Z6OutputPKc>
              sprintf (msgbuf, " APN[%s]", apn);
 23eb346:	462a      	mov	r2, r5
 23eb348:	4954      	ldr	r1, [pc, #336]	; (23eb49c <_Z14SimChangeCheckv+0x308>)
              sprintf (msgbuf, "  PW[%s]", pw);
 23eb34a:	483f      	ldr	r0, [pc, #252]	; (23eb448 <_Z14SimChangeCheckv+0x2b4>)
 23eb34c:	f00c ff20 	bl	23f8190 <sprintf>
              Output(msgbuf);
 23eb350:	483d      	ldr	r0, [pc, #244]	; (23eb448 <_Z14SimChangeCheckv+0x2b4>)
 23eb352:	e77b      	b.n	23eb24c <_Z14SimChangeCheckv+0xb8>
          else if (strcmp (id," UP") == 0) {
 23eb354:	4628      	mov	r0, r5
 23eb356:	4952      	ldr	r1, [pc, #328]	; (23eb4a0 <_Z14SimChangeCheckv+0x30c>)
 23eb358:	f7fa fe44 	bl	23e5fe4 <strcmp>
 23eb35c:	4607      	mov	r7, r0
 23eb35e:	bb60      	cbnz	r0, 23eb3ba <_Z14SimChangeCheckv+0x226>
            un  = strtok_r(p, " ", &p);
 23eb360:	4943      	ldr	r1, [pc, #268]	; (23eb470 <_Z14SimChangeCheckv+0x2dc>)
 23eb362:	aa01      	add	r2, sp, #4
 23eb364:	9801      	ldr	r0, [sp, #4]
 23eb366:	f011 fe3b 	bl	23fcfe0 <strtok_r>
            pw  = strtok_r(p, " ", &p);
 23eb36a:	4941      	ldr	r1, [pc, #260]	; (23eb470 <_Z14SimChangeCheckv+0x2dc>)
            un  = strtok_r(p, " ", &p);
 23eb36c:	4606      	mov	r6, r0
            pw  = strtok_r(p, " ", &p);
 23eb36e:	aa01      	add	r2, sp, #4
 23eb370:	9801      	ldr	r0, [sp, #4]
 23eb372:	f011 fe35 	bl	23fcfe0 <strtok_r>
 23eb376:	4605      	mov	r5, r0
            if (un == NULL) {
 23eb378:	b90e      	cbnz	r6, 23eb37e <_Z14SimChangeCheckv+0x1ea>
              Output("SIMF:Username=Null Err");
 23eb37a:	484a      	ldr	r0, [pc, #296]	; (23eb4a4 <_Z14SimChangeCheckv+0x310>)
 23eb37c:	e785      	b.n	23eb28a <_Z14SimChangeCheckv+0xf6>
            else if (pw == NULL) {
 23eb37e:	b908      	cbnz	r0, 23eb384 <_Z14SimChangeCheckv+0x1f0>
              Output("SIMF:Passwd=Null Err");
 23eb380:	4849      	ldr	r0, [pc, #292]	; (23eb4a8 <_Z14SimChangeCheckv+0x314>)
 23eb382:	e782      	b.n	23eb28a <_Z14SimChangeCheckv+0xf6>
        return cellular_set_active_sim(sim, nullptr);
 23eb384:	4639      	mov	r1, r7
 23eb386:	2002      	movs	r0, #2
 23eb388:	f00c f8b8 	bl	23f74fc <cellular_set_active_sim>
              Output("SIM:Set External-UP");
 23eb38c:	4847      	ldr	r0, [pc, #284]	; (23eb4ac <_Z14SimChangeCheckv+0x318>)
 23eb38e:	f7fb ff29 	bl	23e71e4 <_Z6OutputPKc>
        cellular_credentials_set(apn, username, password, nullptr);
 23eb392:	463b      	mov	r3, r7
 23eb394:	462a      	mov	r2, r5
 23eb396:	4631      	mov	r1, r6
 23eb398:	483e      	ldr	r0, [pc, #248]	; (23eb494 <_Z14SimChangeCheckv+0x300>)
 23eb39a:	f00c f885 	bl	23f74a8 <cellular_credentials_set>
              Output("SIM:Set Credentials");
 23eb39e:	483e      	ldr	r0, [pc, #248]	; (23eb498 <_Z14SimChangeCheckv+0x304>)
 23eb3a0:	f7fb ff20 	bl	23e71e4 <_Z6OutputPKc>
              sprintf (msgbuf, " UN[%s]", un);
 23eb3a4:	4632      	mov	r2, r6
 23eb3a6:	4942      	ldr	r1, [pc, #264]	; (23eb4b0 <_Z14SimChangeCheckv+0x31c>)
 23eb3a8:	4827      	ldr	r0, [pc, #156]	; (23eb448 <_Z14SimChangeCheckv+0x2b4>)
 23eb3aa:	f00c fef1 	bl	23f8190 <sprintf>
              Output(msgbuf);
 23eb3ae:	4826      	ldr	r0, [pc, #152]	; (23eb448 <_Z14SimChangeCheckv+0x2b4>)
 23eb3b0:	f7fb ff18 	bl	23e71e4 <_Z6OutputPKc>
              sprintf (msgbuf, " PW[%s]", pw);
 23eb3b4:	462a      	mov	r2, r5
 23eb3b6:	493f      	ldr	r1, [pc, #252]	; (23eb4b4 <_Z14SimChangeCheckv+0x320>)
 23eb3b8:	e7c7      	b.n	23eb34a <_Z14SimChangeCheckv+0x1b6>
          else if (strcmp (id,"AUP") == 0) {
 23eb3ba:	4628      	mov	r0, r5
 23eb3bc:	493e      	ldr	r1, [pc, #248]	; (23eb4b8 <_Z14SimChangeCheckv+0x324>)
 23eb3be:	f7fa fe11 	bl	23e5fe4 <strcmp>
 23eb3c2:	4680      	mov	r8, r0
 23eb3c4:	2800      	cmp	r0, #0
 23eb3c6:	d17f      	bne.n	23eb4c8 <_Z14SimChangeCheckv+0x334>
            apn = strtok_r(p, " ", &p);
 23eb3c8:	4929      	ldr	r1, [pc, #164]	; (23eb470 <_Z14SimChangeCheckv+0x2dc>)
 23eb3ca:	aa01      	add	r2, sp, #4
 23eb3cc:	9801      	ldr	r0, [sp, #4]
 23eb3ce:	f011 fe07 	bl	23fcfe0 <strtok_r>
            un  = strtok_r(p, " ", &p);
 23eb3d2:	4927      	ldr	r1, [pc, #156]	; (23eb470 <_Z14SimChangeCheckv+0x2dc>)
 23eb3d4:	aa01      	add	r2, sp, #4
            apn = strtok_r(p, " ", &p);
 23eb3d6:	4607      	mov	r7, r0
            un  = strtok_r(p, " ", &p);
 23eb3d8:	9801      	ldr	r0, [sp, #4]
 23eb3da:	f011 fe01 	bl	23fcfe0 <strtok_r>
            pw  = strtok_r(p, " ", &p);
 23eb3de:	4924      	ldr	r1, [pc, #144]	; (23eb470 <_Z14SimChangeCheckv+0x2dc>)
            un  = strtok_r(p, " ", &p);
 23eb3e0:	4606      	mov	r6, r0
            pw  = strtok_r(p, " ", &p);
 23eb3e2:	aa01      	add	r2, sp, #4
 23eb3e4:	9801      	ldr	r0, [sp, #4]
 23eb3e6:	f011 fdfb 	bl	23fcfe0 <strtok_r>
 23eb3ea:	4605      	mov	r5, r0
            if (apn == NULL) {
 23eb3ec:	2f00      	cmp	r7, #0
 23eb3ee:	d098      	beq.n	23eb322 <_Z14SimChangeCheckv+0x18e>
            else if (un == NULL) {
 23eb3f0:	2e00      	cmp	r6, #0
 23eb3f2:	d0c2      	beq.n	23eb37a <_Z14SimChangeCheckv+0x1e6>
            else if (pw == NULL) {
 23eb3f4:	2800      	cmp	r0, #0
 23eb3f6:	d0c3      	beq.n	23eb380 <_Z14SimChangeCheckv+0x1ec>
        return cellular_set_active_sim(sim, nullptr);
 23eb3f8:	4641      	mov	r1, r8
 23eb3fa:	2002      	movs	r0, #2
 23eb3fc:	f00c f87e 	bl	23f74fc <cellular_set_active_sim>
              Output("SIM:Set External-AUP");
 23eb400:	482e      	ldr	r0, [pc, #184]	; (23eb4bc <_Z14SimChangeCheckv+0x328>)
 23eb402:	f7fb feef 	bl	23e71e4 <_Z6OutputPKc>
        cellular_credentials_set(apn, username, password, nullptr);
 23eb406:	4643      	mov	r3, r8
 23eb408:	462a      	mov	r2, r5
 23eb40a:	4631      	mov	r1, r6
 23eb40c:	4638      	mov	r0, r7
 23eb40e:	f00c f84b 	bl	23f74a8 <cellular_credentials_set>
              Output("SIM:Set Credentials");
 23eb412:	4821      	ldr	r0, [pc, #132]	; (23eb498 <_Z14SimChangeCheckv+0x304>)
 23eb414:	f7fb fee6 	bl	23e71e4 <_Z6OutputPKc>
              sprintf (msgbuf, " APN[%s]", apn);
 23eb418:	463a      	mov	r2, r7
 23eb41a:	4920      	ldr	r1, [pc, #128]	; (23eb49c <_Z14SimChangeCheckv+0x308>)
 23eb41c:	480a      	ldr	r0, [pc, #40]	; (23eb448 <_Z14SimChangeCheckv+0x2b4>)
 23eb41e:	f00c feb7 	bl	23f8190 <sprintf>
              Output(msgbuf);
 23eb422:	4809      	ldr	r0, [pc, #36]	; (23eb448 <_Z14SimChangeCheckv+0x2b4>)
 23eb424:	f7fb fede 	bl	23e71e4 <_Z6OutputPKc>
              sprintf (msgbuf, "  UN[%s]", un);
 23eb428:	4632      	mov	r2, r6
 23eb42a:	4925      	ldr	r1, [pc, #148]	; (23eb4c0 <_Z14SimChangeCheckv+0x32c>)
 23eb42c:	4806      	ldr	r0, [pc, #24]	; (23eb448 <_Z14SimChangeCheckv+0x2b4>)
 23eb42e:	f00c feaf 	bl	23f8190 <sprintf>
              Output(msgbuf);
 23eb432:	4805      	ldr	r0, [pc, #20]	; (23eb448 <_Z14SimChangeCheckv+0x2b4>)
 23eb434:	f7fb fed6 	bl	23e71e4 <_Z6OutputPKc>
              sprintf (msgbuf, "  PW[%s]", pw);
 23eb438:	462a      	mov	r2, r5
 23eb43a:	4922      	ldr	r1, [pc, #136]	; (23eb4c4 <_Z14SimChangeCheckv+0x330>)
 23eb43c:	e785      	b.n	23eb34a <_Z14SimChangeCheckv+0x1b6>
 23eb43e:	bf00      	nop
 23eb440:	023fea48 	.word	0x023fea48
 23eb444:	023fe23b 	.word	0x023fe23b
 23eb448:	1006f140 	.word	0x1006f140
 23eb44c:	023fe221 	.word	0x023fe221
 23eb450:	1006a7b4 	.word	0x1006a7b4
 23eb454:	1006a1b5 	.word	0x1006a1b5
 23eb458:	1006a308 	.word	0x1006a308
 23eb45c:	023fe24b 	.word	0x023fe24b
 23eb460:	023fe272 	.word	0x023fe272
 23eb464:	023fe22e 	.word	0x023fe22e
 23eb468:	023fe25b 	.word	0x023fe25b
 23eb46c:	023fe265 	.word	0x023fe265
 23eb470:	023fdbfc 	.word	0x023fdbfc
 23eb474:	023fe280 	.word	0x023fe280
 23eb478:	023fe28c 	.word	0x023fe28c
 23eb47c:	1006a1bd 	.word	0x1006a1bd
 23eb480:	023fe354 	.word	0x023fe354
 23eb484:	023fe376 	.word	0x023fe376
 23eb488:	023fe2b8 	.word	0x023fe2b8
 23eb48c:	023fe295 	.word	0x023fe295
 23eb490:	023fe2a7 	.word	0x023fe2a7
 23eb494:	023fea19 	.word	0x023fea19
 23eb498:	023fe2bc 	.word	0x023fe2bc
 23eb49c:	023fe2d0 	.word	0x023fe2d0
 23eb4a0:	023fe2d9 	.word	0x023fe2d9
 23eb4a4:	023fe2dd 	.word	0x023fe2dd
 23eb4a8:	023fe2f4 	.word	0x023fe2f4
 23eb4ac:	023fe309 	.word	0x023fe309
 23eb4b0:	023fe333 	.word	0x023fe333
 23eb4b4:	023fe33c 	.word	0x023fe33c
 23eb4b8:	023fe32e 	.word	0x023fe32e
 23eb4bc:	023fe31d 	.word	0x023fe31d
 23eb4c0:	023fe332 	.word	0x023fe332
 23eb4c4:	023fe33b 	.word	0x023fe33b
            sprintf (msgbuf, "SIMF:ID[%s] Err", id);
 23eb4c8:	462a      	mov	r2, r5
 23eb4ca:	4919      	ldr	r1, [pc, #100]	; (23eb530 <_Z14SimChangeCheckv+0x39c>)
 23eb4cc:	4819      	ldr	r0, [pc, #100]	; (23eb534 <_Z14SimChangeCheckv+0x3a0>)
 23eb4ce:	f00c fe5f 	bl	23f8190 <sprintf>
            Output(msgbuf);
 23eb4d2:	4818      	ldr	r0, [pc, #96]	; (23eb534 <_Z14SimChangeCheckv+0x3a0>)
 23eb4d4:	e6d9      	b.n	23eb28a <_Z14SimChangeCheckv+0xf6>
           : m_xFile ? m_xFile->rename(newPath)
 23eb4d6:	9815      	ldr	r0, [sp, #84]	; 0x54
 23eb4d8:	b9a8      	cbnz	r0, 23eb506 <_Z14SimChangeCheckv+0x372>
          Output ("SIMF:RENAME ERROR");
 23eb4da:	4817      	ldr	r0, [pc, #92]	; (23eb538 <_Z14SimChangeCheckv+0x3a4>)
          Output ("SIMF:RENAME OK");
 23eb4dc:	f7fb fe82 	bl	23e71e4 <_Z6OutputPKc>
        fp.close();
 23eb4e0:	a806      	add	r0, sp, #24
 23eb4e2:	f00b fe92 	bl	23f720a <_ZN10FsBaseFile5closeEv>
        if (changed) {
 23eb4e6:	b194      	cbz	r4, 23eb50e <_Z14SimChangeCheckv+0x37a>
          Output ("==============");
 23eb4e8:	4814      	ldr	r0, [pc, #80]	; (23eb53c <_Z14SimChangeCheckv+0x3a8>)
 23eb4ea:	f7fb fe7b 	bl	23e71e4 <_Z6OutputPKc>
          Output ("!!! REBOOT !!!");
 23eb4ee:	4814      	ldr	r0, [pc, #80]	; (23eb540 <_Z14SimChangeCheckv+0x3ac>)
 23eb4f0:	f7fb fe78 	bl	23e71e4 <_Z6OutputPKc>
          Output ("==============");
 23eb4f4:	4811      	ldr	r0, [pc, #68]	; (23eb53c <_Z14SimChangeCheckv+0x3a8>)
          Output ("=====================");
 23eb4f6:	f7fb fe75 	bl	23e71e4 <_Z6OutputPKc>
          Blink(1, 750);
 23eb4fa:	f240 21ee 	movw	r1, #750	; 0x2ee
 23eb4fe:	2001      	movs	r0, #1
 23eb500:	f7fb fca8 	bl	23e6e54 <_Z5Blinkii>
        while(true) { // wait for Host to open serial port
 23eb504:	e7f9      	b.n	23eb4fa <_Z14SimChangeCheckv+0x366>
 23eb506:	490f      	ldr	r1, [pc, #60]	; (23eb544 <_Z14SimChangeCheckv+0x3b0>)
 23eb508:	f00b f94e 	bl	23f67a8 <_ZN9ExFatFile6renameEPKc>
 23eb50c:	e6f7      	b.n	23eb2fe <_Z14SimChangeCheckv+0x16a>
          Output ("=====================");
 23eb50e:	480e      	ldr	r0, [pc, #56]	; (23eb548 <_Z14SimChangeCheckv+0x3b4>)
 23eb510:	f7fb fe68 	bl	23e71e4 <_Z6OutputPKc>
          Output ("!!! SET SIM ERROR !!!");
 23eb514:	480d      	ldr	r0, [pc, #52]	; (23eb54c <_Z14SimChangeCheckv+0x3b8>)
 23eb516:	f7fb fe65 	bl	23e71e4 <_Z6OutputPKc>
          Output ("=====================");
 23eb51a:	480b      	ldr	r0, [pc, #44]	; (23eb548 <_Z14SimChangeCheckv+0x3b4>)
 23eb51c:	e7eb      	b.n	23eb4f6 <_Z14SimChangeCheckv+0x362>
        Output ("SIMF:OPEN ERROR");
 23eb51e:	480c      	ldr	r0, [pc, #48]	; (23eb550 <_Z14SimChangeCheckv+0x3bc>)
      Output ("SIM:NO UPDATE FILE");
 23eb520:	f7fb fe60 	bl	23e71e4 <_Z6OutputPKc>
}
 23eb524:	b036      	add	sp, #216	; 0xd8
 23eb526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Output ("SIM:NO UPDATE FILE");
 23eb52a:	480a      	ldr	r0, [pc, #40]	; (23eb554 <_Z14SimChangeCheckv+0x3c0>)
 23eb52c:	e7f8      	b.n	23eb520 <_Z14SimChangeCheckv+0x38c>
 23eb52e:	bf00      	nop
 23eb530:	023fe344 	.word	0x023fe344
 23eb534:	1006f140 	.word	0x1006f140
 23eb538:	023fe364 	.word	0x023fe364
 23eb53c:	023fe39b 	.word	0x023fe39b
 23eb540:	023fe385 	.word	0x023fe385
 23eb544:	1006a1bd 	.word	0x1006a1bd
 23eb548:	023fe394 	.word	0x023fe394
 23eb54c:	023fe3aa 	.word	0x023fe3aa
 23eb550:	023fe3c0 	.word	0x023fe3c0
 23eb554:	023fe3d0 	.word	0x023fe3d0

023eb558 <_Z14TXI_Initializev>:
/* 
 *=======================================================================================================================
 * TXI_Initialize() - Transmit Interval 5, 10 or 15 minutes
 *=======================================================================================================================
 */
void TXI_Initialize() {
 23eb558:	b510      	push	{r4, lr}
  Output ("TXI:INIT");
 23eb55a:	4822      	ldr	r0, [pc, #136]	; (23eb5e4 <_Z14TXI_Initializev+0x8c>)
 23eb55c:	f7fb fe42 	bl	23e71e4 <_Z6OutputPKc>
  if (SD_exists) {
 23eb560:	4b21      	ldr	r3, [pc, #132]	; (23eb5e8 <_Z14TXI_Initializev+0x90>)
 23eb562:	4c22      	ldr	r4, [pc, #136]	; (23eb5ec <_Z14TXI_Initializev+0x94>)
 23eb564:	781b      	ldrb	r3, [r3, #0]
 23eb566:	b1c3      	cbz	r3, 23eb59a <_Z14TXI_Initializev+0x42>
    if (SD.exists(SD_TX5M_FILE)) {
 23eb568:	4921      	ldr	r1, [pc, #132]	; (23eb5f0 <_Z14TXI_Initializev+0x98>)
 23eb56a:	4822      	ldr	r0, [pc, #136]	; (23eb5f4 <_Z14TXI_Initializev+0x9c>)
 23eb56c:	f7fb fba0 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eb570:	b1e8      	cbz	r0, 23eb5ae <_Z14TXI_Initializev+0x56>
      Output ("TXI5M Found");
 23eb572:	4821      	ldr	r0, [pc, #132]	; (23eb5f8 <_Z14TXI_Initializev+0xa0>)
 23eb574:	f7fb fe36 	bl	23e71e4 <_Z6OutputPKc>
      obs_tx_interval = 5;
 23eb578:	2205      	movs	r2, #5
 23eb57a:	2300      	movs	r3, #0
      if (SD.exists(SD_TX10M_FILE)) {
 23eb57c:	491f      	ldr	r1, [pc, #124]	; (23eb5fc <_Z14TXI_Initializev+0xa4>)
 23eb57e:	481d      	ldr	r0, [pc, #116]	; (23eb5f4 <_Z14TXI_Initializev+0x9c>)
      obs_tx_interval = 5;
 23eb580:	e9c4 2300 	strd	r2, r3, [r4]
      if (SD.exists(SD_TX10M_FILE)) {
 23eb584:	f7fb fb94 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eb588:	b138      	cbz	r0, 23eb59a <_Z14TXI_Initializev+0x42>
        if (SD.remove (SD_TX10M_FILE)) {
 23eb58a:	491c      	ldr	r1, [pc, #112]	; (23eb5fc <_Z14TXI_Initializev+0xa4>)
 23eb58c:	4819      	ldr	r0, [pc, #100]	; (23eb5f4 <_Z14TXI_Initializev+0x9c>)
 23eb58e:	f7fb fbaa 	bl	23e6ce6 <_ZN8FsVolume6removeEPKc>
 23eb592:	b110      	cbz	r0, 23eb59a <_Z14TXI_Initializev+0x42>
          Output ("TXI:RM 10M");
 23eb594:	481a      	ldr	r0, [pc, #104]	; (23eb600 <_Z14TXI_Initializev+0xa8>)
    else if (SD.exists(SD_TX10M_FILE)) {
      Output ("TXI10M Found");
      obs_tx_interval = 10;
      if (SD.exists(SD_TX5M_FILE)) {
        if (SD.remove (SD_TX5M_FILE)) {
          Output ("TXI:RM 5M");
 23eb596:	f7fb fe25 	bl	23e71e4 <_Z6OutputPKc>
        }
      }
    }
  }
  sprintf (msgbuf, "TXI=%dM", (int) obs_tx_interval);
 23eb59a:	6822      	ldr	r2, [r4, #0]
 23eb59c:	4919      	ldr	r1, [pc, #100]	; (23eb604 <_Z14TXI_Initializev+0xac>)
 23eb59e:	481a      	ldr	r0, [pc, #104]	; (23eb608 <_Z14TXI_Initializev+0xb0>)
 23eb5a0:	f00c fdf6 	bl	23f8190 <sprintf>
  Output(msgbuf);  
 23eb5a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Output(msgbuf);  
 23eb5a8:	4817      	ldr	r0, [pc, #92]	; (23eb608 <_Z14TXI_Initializev+0xb0>)
 23eb5aa:	f7fb be1b 	b.w	23e71e4 <_Z6OutputPKc>
    else if (SD.exists(SD_TX10M_FILE)) {
 23eb5ae:	4913      	ldr	r1, [pc, #76]	; (23eb5fc <_Z14TXI_Initializev+0xa4>)
 23eb5b0:	4810      	ldr	r0, [pc, #64]	; (23eb5f4 <_Z14TXI_Initializev+0x9c>)
 23eb5b2:	f7fb fb7d 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eb5b6:	2800      	cmp	r0, #0
 23eb5b8:	d0ef      	beq.n	23eb59a <_Z14TXI_Initializev+0x42>
      Output ("TXI10M Found");
 23eb5ba:	4814      	ldr	r0, [pc, #80]	; (23eb60c <_Z14TXI_Initializev+0xb4>)
 23eb5bc:	f7fb fe12 	bl	23e71e4 <_Z6OutputPKc>
      obs_tx_interval = 10;
 23eb5c0:	220a      	movs	r2, #10
 23eb5c2:	2300      	movs	r3, #0
      if (SD.exists(SD_TX5M_FILE)) {
 23eb5c4:	490a      	ldr	r1, [pc, #40]	; (23eb5f0 <_Z14TXI_Initializev+0x98>)
 23eb5c6:	480b      	ldr	r0, [pc, #44]	; (23eb5f4 <_Z14TXI_Initializev+0x9c>)
      obs_tx_interval = 10;
 23eb5c8:	e9c4 2300 	strd	r2, r3, [r4]
      if (SD.exists(SD_TX5M_FILE)) {
 23eb5cc:	f7fb fb70 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eb5d0:	2800      	cmp	r0, #0
 23eb5d2:	d0e2      	beq.n	23eb59a <_Z14TXI_Initializev+0x42>
        if (SD.remove (SD_TX5M_FILE)) {
 23eb5d4:	4906      	ldr	r1, [pc, #24]	; (23eb5f0 <_Z14TXI_Initializev+0x98>)
 23eb5d6:	4807      	ldr	r0, [pc, #28]	; (23eb5f4 <_Z14TXI_Initializev+0x9c>)
 23eb5d8:	f7fb fb85 	bl	23e6ce6 <_ZN8FsVolume6removeEPKc>
 23eb5dc:	2800      	cmp	r0, #0
 23eb5de:	d0dc      	beq.n	23eb59a <_Z14TXI_Initializev+0x42>
          Output ("TXI:RM 5M");
 23eb5e0:	480b      	ldr	r0, [pc, #44]	; (23eb610 <_Z14TXI_Initializev+0xb8>)
 23eb5e2:	e7d8      	b.n	23eb596 <_Z14TXI_Initializev+0x3e>
 23eb5e4:	023fe3e3 	.word	0x023fe3e3
 23eb5e8:	1006a7b4 	.word	0x1006a7b4
 23eb5ec:	1006a1f8 	.word	0x1006a1f8
 23eb5f0:	1006a195 	.word	0x1006a195
 23eb5f4:	1006a308 	.word	0x1006a308
 23eb5f8:	023fe3ec 	.word	0x023fe3ec
 23eb5fc:	1006a18a 	.word	0x1006a18a
 23eb600:	023fe3f8 	.word	0x023fe3f8
 23eb604:	023fe41a 	.word	0x023fe41a
 23eb608:	1006f140 	.word	0x1006f140
 23eb60c:	023fe403 	.word	0x023fe403
 23eb610:	023fe410 	.word	0x023fe410

023eb614 <_Z9HeartBeatv>:
/*
 * ======================================================================================================================
 * HeartBeat() - Burns 250 ms 
 * ======================================================================================================================
 */
void HeartBeat() {
 23eb614:	b508      	push	{r3, lr}
  digitalWrite(HEARTBEAT_PIN, HIGH);
 23eb616:	2101      	movs	r1, #1
 23eb618:	2012      	movs	r0, #18
 23eb61a:	f00e fdea 	bl	23fa1f2 <digitalWrite>
  delay(250);
 23eb61e:	20fa      	movs	r0, #250	; 0xfa
 23eb620:	f00c fe50 	bl	23f82c4 <delay>
  digitalWrite(HEARTBEAT_PIN, LOW);
}
 23eb624:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(HEARTBEAT_PIN, LOW);
 23eb628:	2100      	movs	r1, #0
 23eb62a:	2012      	movs	r0, #18
 23eb62c:	f00e bde1 	b.w	23fa1f2 <digitalWrite>

023eb630 <_Z17Serial_Initializev>:
/*
 * ======================================================================================================================
 * Serial_Initialize() -
 * ======================================================================================================================
 */
void Serial_Initialize() {
 23eb630:	b510      	push	{r4, lr}
  // serial console enable pin
  pinMode(SCE_PIN, INPUT_PULLUP);   // Internal pullup resistor biases the pin to supply voltage.
 23eb632:	4c20      	ldr	r4, [pc, #128]	; (23eb6b4 <_Z17Serial_Initializev+0x84>)
 23eb634:	2102      	movs	r1, #2
 23eb636:	8820      	ldrh	r0, [r4, #0]
 23eb638:	f00e fdca 	bl	23fa1d0 <pinMode>
                                    // If jumper set to ground, we enable serial console (low = enable)
  if (digitalRead(SCE_PIN) == LOW) {
 23eb63c:	8820      	ldrh	r0, [r4, #0]
 23eb63e:	f00e fdf1 	bl	23fa224 <digitalRead>
 23eb642:	4c1d      	ldr	r4, [pc, #116]	; (23eb6b8 <_Z17Serial_Initializev+0x88>)
 23eb644:	b908      	cbnz	r0, 23eb64a <_Z17Serial_Initializev+0x1a>
    SerialConsoleEnabled = true;
 23eb646:	2301      	movs	r3, #1
 23eb648:	7023      	strb	r3, [r4, #0]
  }

  // There are libraries that print to Serial Console so we need to initialize no mater what the jumper is set to.
  Serial.begin(9600);
 23eb64a:	f00e fc55 	bl	23f9ef8 <_Z16_fetch_usbserialv>
 23eb64e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23eb652:	f00e fc41 	bl	23f9ed8 <_ZN9USBSerial5beginEl>
  delay(1000); // prevents usb driver crash on startup, do not omit this
 23eb656:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23eb65a:	f00c fe33 	bl	23f82c4 <delay>

  if (SerialConsoleEnabled) {
 23eb65e:	7823      	ldrb	r3, [r4, #0]
 23eb660:	b33b      	cbz	r3, 23eb6b2 <_Z17Serial_Initializev+0x82>
    // Wait for serial port to be available
    if (!Serial.isConnected()) {
 23eb662:	f00e fc49 	bl	23f9ef8 <_Z16_fetch_usbserialv>
 23eb666:	f00e fc3b 	bl	23f9ee0 <_ZN9USBSerial11isConnectedEv>
 23eb66a:	b910      	cbnz	r0, 23eb672 <_Z17Serial_Initializev+0x42>
      OLED_write("Wait4 Serial Console");
 23eb66c:	4813      	ldr	r0, [pc, #76]	; (23eb6bc <_Z17Serial_Initializev+0x8c>)
 23eb66e:	f7fb fd15 	bl	23e709c <_Z10OLED_writePKc>
void Serial_Initialize() {
 23eb672:	243d      	movs	r4, #61	; 0x3d
    }
    int countdown=60; // Wait N seconds for serial connection, then move on.
    while (!Serial.isConnected() && countdown) {
 23eb674:	f00e fc40 	bl	23f9ef8 <_Z16_fetch_usbserialv>
 23eb678:	f00e fc32 	bl	23f9ee0 <_ZN9USBSerial11isConnectedEv>
 23eb67c:	b948      	cbnz	r0, 23eb692 <_Z17Serial_Initializev+0x62>
 23eb67e:	3c01      	subs	r4, #1
 23eb680:	d007      	beq.n	23eb692 <_Z17Serial_Initializev+0x62>
      HeartBeat(); // Provices 250ms delay
 23eb682:	f7ff ffc7 	bl	23eb614 <_Z9HeartBeatv>
      Blink(1, 750);
 23eb686:	f240 21ee 	movw	r1, #750	; 0x2ee
 23eb68a:	2001      	movs	r0, #1
 23eb68c:	f7fb fbe2 	bl	23e6e54 <_Z5Blinkii>
    while (!Serial.isConnected() && countdown) {
 23eb690:	e7f0      	b.n	23eb674 <_Z17Serial_Initializev+0x44>
      countdown--;
    }

    Serial_writeln(""); // Send carriage return and linefeed
 23eb692:	480b      	ldr	r0, [pc, #44]	; (23eb6c0 <_Z17Serial_Initializev+0x90>)
 23eb694:	f7fb fd8e 	bl	23e71b4 <_Z14Serial_writelnPKc>
    
    if (DisplayEnabled) {
 23eb698:	4b0a      	ldr	r3, [pc, #40]	; (23eb6c4 <_Z17Serial_Initializev+0x94>)
 23eb69a:	781b      	ldrb	r3, [r3, #0]
 23eb69c:	b13b      	cbz	r3, 23eb6ae <_Z17Serial_Initializev+0x7e>
      Serial_writeln ("OLED:Enabled");
 23eb69e:	480a      	ldr	r0, [pc, #40]	; (23eb6c8 <_Z17Serial_Initializev+0x98>)
    }
    else {
      Serial_writeln ("OLED:Disabled");
 23eb6a0:	f7fb fd88 	bl	23e71b4 <_Z14Serial_writelnPKc>
    }
    Output ("SC:Enabled");
  }
}
 23eb6a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Output ("SC:Enabled");
 23eb6a8:	4808      	ldr	r0, [pc, #32]	; (23eb6cc <_Z17Serial_Initializev+0x9c>)
 23eb6aa:	f7fb bd9b 	b.w	23e71e4 <_Z6OutputPKc>
      Serial_writeln ("OLED:Disabled");
 23eb6ae:	4808      	ldr	r0, [pc, #32]	; (23eb6d0 <_Z17Serial_Initializev+0xa0>)
 23eb6b0:	e7f6      	b.n	23eb6a0 <_Z17Serial_Initializev+0x70>
}
 23eb6b2:	bd10      	pop	{r4, pc}
 23eb6b4:	1006a148 	.word	0x1006a148
 23eb6b8:	1006a80b 	.word	0x1006a80b
 23eb6bc:	023fe422 	.word	0x023fe422
 23eb6c0:	023fea19 	.word	0x023fea19
 23eb6c4:	1006a141 	.word	0x1006a141
 23eb6c8:	023fe437 	.word	0x023fe437
 23eb6cc:	023fe452 	.word	0x023fe452
 23eb6d0:	023fe444 	.word	0x023fe444

023eb6d4 <_Z17Output_Initializev>:
/*
 * ======================================================================================================================
 * Output_Initialize() -
 * ======================================================================================================================
 */
void Output_Initialize() {
 23eb6d4:	b508      	push	{r3, lr}
  OLED_initialize();
 23eb6d6:	f7fb fd8f 	bl	23e71f8 <_Z15OLED_initializev>
  Output("SER:Init");
 23eb6da:	4805      	ldr	r0, [pc, #20]	; (23eb6f0 <_Z17Output_Initializev+0x1c>)
 23eb6dc:	f7fb fd82 	bl	23e71e4 <_Z6OutputPKc>
  Serial_Initialize();
 23eb6e0:	f7ff ffa6 	bl	23eb630 <_Z17Serial_Initializev>
  Output("SER:OK");
 23eb6e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output("SER:OK");
 23eb6e8:	4802      	ldr	r0, [pc, #8]	; (23eb6f4 <_Z17Output_Initializev+0x20>)
 23eb6ea:	f7fb bd7b 	b.w	23e71e4 <_Z6OutputPKc>
 23eb6ee:	bf00      	nop
 23eb6f0:	023fe45d 	.word	0x023fe45d
 23eb6f4:	023fe466 	.word	0x023fe466

023eb6f8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
 23eb6f8:	2200      	movs	r2, #0
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
 23eb6fa:	b570      	push	{r4, r5, r6, lr}
 23eb6fc:	b08c      	sub	sp, #48	; 0x30
 23eb6fe:	460d      	mov	r5, r1
    const int ret = diag_get_source(id, &src, nullptr);
 23eb700:	4669      	mov	r1, sp
 23eb702:	4676      	mov	r6, lr
    const diag_source* src = nullptr;
 23eb704:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
 23eb706:	f00c fadb 	bl	23f7cc0 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
 23eb70a:	b9e8      	cbnz	r0, 23eb748 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x50>
        return ret;
    }
    return get(src, val);
 23eb70c:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
 23eb70e:	b10c      	cbz	r4, 23eb714 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1c>
 23eb710:	6923      	ldr	r3, [r4, #16]
 23eb712:	b97b      	cbnz	r3, 23eb734 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>
 23eb714:	222c      	movs	r2, #44	; 0x2c
 23eb716:	2100      	movs	r1, #0
 23eb718:	a801      	add	r0, sp, #4
 23eb71a:	f011 fb78 	bl	23fce0e <memset>
 23eb71e:	4b0b      	ldr	r3, [pc, #44]	; (23eb74c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x54>)
 23eb720:	9604      	str	r6, [sp, #16]
 23eb722:	9301      	str	r3, [sp, #4]
 23eb724:	4b0a      	ldr	r3, [pc, #40]	; (23eb750 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x58>)
 23eb726:	9302      	str	r3, [sp, #8]
}

__attribute__((always_inline)) static inline uint32_t __get_PC(void) { 
    uint32_t result; 

    asm volatile ("mov %0, pc\n" : "=r" (result) ); 
 23eb728:	467b      	mov	r3, pc
 23eb72a:	2100      	movs	r1, #0
 23eb72c:	a801      	add	r0, sp, #4
 23eb72e:	9303      	str	r3, [sp, #12]
 23eb730:	f00c fad4 	bl	23f7cdc <panic_ext>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
 23eb734:	230c      	movs	r3, #12
 23eb736:	e9cd 3501 	strd	r3, r5, [sp, #4]
 23eb73a:	2304      	movs	r3, #4
 23eb73c:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
 23eb73e:	2101      	movs	r1, #1
 23eb740:	4620      	mov	r0, r4
 23eb742:	6923      	ldr	r3, [r4, #16]
 23eb744:	aa01      	add	r2, sp, #4
 23eb746:	4798      	blx	r3
}
 23eb748:	b00c      	add	sp, #48	; 0x30
 23eb74a:	bd70      	pop	{r4, r5, r6, pc}
 23eb74c:	000a002c 	.word	0x000a002c
 23eb750:	023fe46d 	.word	0x023fe46d

023eb754 <_ZNK11SystemClass13batteryChargeEv.isra.0>:
            return r;
        }
        return val;
    }

    float batteryCharge() const {
 23eb754:	b507      	push	{r0, r1, r2, lr}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
 23eb756:	2003      	movs	r0, #3
 23eb758:	a901      	add	r1, sp, #4
 23eb75a:	f7ff ffcd 	bl	23eb6f8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
 23eb75e:	b940      	cbnz	r0, 23eb772 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x1e>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
 23eb760:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 23eb764:	ee00 3a10 	vmov	s0, r3
 23eb768:	eebb 0acc 	vcvt.f32.u32	s0, s0, #8

        using SocFixedPointT = particle::FixedPointUQ<8, 8>;

        SocFixedPointT soc(static_cast<typename SocFixedPointT::type>(val));
        return soc.toFloat();
    }
 23eb76c:	b003      	add	sp, #12
 23eb76e:	f85d fb04 	ldr.w	pc, [sp], #4
            return -1.0f;
 23eb772:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 23eb776:	e7f9      	b.n	23eb76c <_ZNK11SystemClass13batteryChargeEv.isra.0+0x18>

023eb778 <_ZNK11SystemClass12batteryStateEv.isra.0>:
    int batteryState() const {
 23eb778:	b507      	push	{r0, r1, r2, lr}
 23eb77a:	2007      	movs	r0, #7
 23eb77c:	a901      	add	r1, sp, #4
 23eb77e:	f7ff ffbb 	bl	23eb6f8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
 23eb782:	2800      	cmp	r0, #0
        return val;
 23eb784:	bfa8      	it	ge
 23eb786:	9801      	ldrge	r0, [sp, #4]
    }
 23eb788:	b003      	add	sp, #12
 23eb78a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023eb790 <_Z6OBS_Dov>:
/*
 * ======================================================================================================================
 * OBS_Do() - Get Observations - Should be called once a minute
 * ======================================================================================================================
 */
void OBS_Do() {
 23eb790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23eb794:	ed2d 8b06 	vpush	{d8-d10}
 23eb798:	b099      	sub	sp, #100	; 0x64

// Output("DB:OBS_Start");


  // Safty Check for Vaild Time
  if (!Time.isValid()) {
 23eb79a:	f00e fa7a 	bl	23f9c92 <_ZN9TimeClass7isValidEv>
 23eb79e:	b948      	cbnz	r0, 23eb7b4 <_Z6OBS_Dov+0x24>
    Output ("OBS_Do: Time NV");
 23eb7a0:	4803      	ldr	r0, [pc, #12]	; (23eb7b0 <_Z6OBS_Dov+0x20>)
  // Save Observation to SD Card
  OBS_Log(oidx);

  lastOBS = System.millis();
// Output("DB:OBS_Exit");
}
 23eb7a2:	b019      	add	sp, #100	; 0x64
 23eb7a4:	ecbd 8b06 	vpop	{d8-d10}
 23eb7a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Output ("OBS_Do: Time NV");
 23eb7ac:	f7fb bd1a 	b.w	23e71e4 <_Z6OutputPKc>
 23eb7b0:	023fe48e 	.word	0x023fe48e
  Wind_GustUpdate(); // Update Gust and Gust Direction readings
 23eb7b4:	f7fd fd60 	bl	23e9278 <_Z15Wind_GustUpdatev>
  int BatteryState = System.batteryState();
 23eb7b8:	f7ff ffde 	bl	23eb778 <_ZNK11SystemClass12batteryStateEv.isra.0>
  CellularSignal sig = Cellular.RSSI();
 23eb7bc:	49de      	ldr	r1, [pc, #888]	; (23ebb38 <_Z6OBS_Dov+0x3a8>)
  int BatteryState = System.batteryState();
 23eb7be:	4681      	mov	r9, r0
  CellularSignal sig = Cellular.RSSI();
 23eb7c0:	a804      	add	r0, sp, #16
 23eb7c2:	f00c fdfb 	bl	23f83bc <_ZN5spark13CellularClass4RSSIEv>
  byte cfr = pmic.getFault(); // Get Battery Charger Failt Register
 23eb7c6:	48dd      	ldr	r0, [pc, #884]	; (23ebb3c <_Z6OBS_Dov+0x3ac>)
 23eb7c8:	f00d ff0c 	bl	23f95e4 <_ZN4PMIC8getFaultEv>
  if (BatteryState>0 && BatteryState<6) {
 23eb7cc:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 23eb7d0:	2b04      	cmp	r3, #4
  byte cfr = pmic.getFault(); // Get Battery Charger Failt Register
 23eb7d2:	4682      	mov	sl, r0
  if (BatteryState>0 && BatteryState<6) {
 23eb7d4:	f200 81f8 	bhi.w	23ebbc8 <_Z6OBS_Dov+0x438>
    BatteryPoC = System.batteryCharge();
 23eb7d8:	f7ff ffbc 	bl	23eb754 <_ZNK11SystemClass13batteryChargeEv.isra.0>
 23eb7dc:	eeb0 8a40 	vmov.f32	s16, s0
  oidx = OBS_Open();    // Get a free observation spot
 23eb7e0:	f7ff f8a0 	bl	23ea924 <_Z8OBS_Openv>
  obs[oidx].inuse = true;
 23eb7e4:	f640 2698 	movw	r6, #2712	; 0xa98
 23eb7e8:	f04f 0801 	mov.w	r8, #1
 23eb7ec:	4346      	muls	r6, r0
 23eb7ee:	4cd4      	ldr	r4, [pc, #848]	; (23ebb40 <_Z6OBS_Dov+0x3b0>)
  oidx = OBS_Open();    // Get a free observation spot
 23eb7f0:	9000      	str	r0, [sp, #0]
  obs[oidx].inuse = true;
 23eb7f2:	f804 8006 	strb.w	r8, [r4, r6]
  obs[oidx].ts = Time.now();
 23eb7f6:	f00e fa69 	bl	23f9ccc <_ZN9TimeClass3nowEv>
  obs[oidx].inuse = true;
 23eb7fa:	19a7      	adds	r7, r4, r6
  obs[oidx].ts = Time.now();
 23eb7fc:	17c3      	asrs	r3, r0, #31
 23eb7fe:	e9c7 0302 	strd	r0, r3, [r7, #8]
  obs[oidx].css = sig.getStrength();
 23eb802:	a804      	add	r0, sp, #16
 23eb804:	f00c fe38 	bl	23f8478 <_ZNK14CellularSignal11getStrengthEv>
 23eb808:	f106 0518 	add.w	r5, r6, #24
 23eb80c:	ed87 0a04 	vstr	s0, [r7, #16]
  strcpy (obs[oidx].sensor[sidx].id, "bcs");
 23eb810:	49cc      	ldr	r1, [pc, #816]	; (23ebb44 <_Z6OBS_Dov+0x3b4>)
 23eb812:	1960      	adds	r0, r4, r5
 23eb814:	f011 fb70 	bl	23fcef8 <strcpy>
  strcpy (obs[oidx].sensor[sidx].id, "bpc");
 23eb818:	f106 0034 	add.w	r0, r6, #52	; 0x34
 23eb81c:	49ca      	ldr	r1, [pc, #808]	; (23ebb48 <_Z6OBS_Dov+0x3b8>)
  obs[oidx].sensor[sidx].type = I_OBS;
 23eb81e:	f8c7 8020 	str.w	r8, [r7, #32]
  obs[oidx].sensor[sidx].i_obs = BatteryState;
 23eb822:	f8c7 9028 	str.w	r9, [r7, #40]	; 0x28
  obs[oidx].sensor[sidx++].inuse = true;
 23eb826:	f887 8030 	strb.w	r8, [r7, #48]	; 0x30
  strcpy (obs[oidx].sensor[sidx].id, "bpc");
 23eb82a:	4420      	add	r0, r4
 23eb82c:	f011 fb64 	bl	23fcef8 <strcpy>
  obs[oidx].sensor[sidx].type = F_OBS;
 23eb830:	2300      	movs	r3, #0
  strcpy (obs[oidx].sensor[sidx].id, "cfr");
 23eb832:	f106 0050 	add.w	r0, r6, #80	; 0x50
  obs[oidx].sensor[sidx].type = F_OBS;
 23eb836:	63fb      	str	r3, [r7, #60]	; 0x3c
  obs[oidx].sensor[sidx].f_obs = BatteryPoC;
 23eb838:	ed87 8a10 	vstr	s16, [r7, #64]	; 0x40
  strcpy (obs[oidx].sensor[sidx].id, "cfr");
 23eb83c:	49c3      	ldr	r1, [pc, #780]	; (23ebb4c <_Z6OBS_Dov+0x3bc>)
  obs[oidx].sensor[sidx++].inuse = true;
 23eb83e:	f887 804c 	strb.w	r8, [r7, #76]	; 0x4c
  strcpy (obs[oidx].sensor[sidx].id, "cfr");
 23eb842:	4420      	add	r0, r4
 23eb844:	f011 fb58 	bl	23fcef8 <strcpy>
  obs[oidx].sensor[sidx].i_obs = cfr;
 23eb848:	f8c7 a060 	str.w	sl, [r7, #96]	; 0x60
  obs[oidx].sensor[sidx].type = I_OBS;
 23eb84c:	f8c7 8058 	str.w	r8, [r7, #88]	; 0x58
  obs[oidx].sensor[sidx++].inuse = true;
 23eb850:	f887 8068 	strb.w	r8, [r7, #104]	; 0x68
  rgds = (System.millis()-raingauge1_interrupt_stime)/1000;
 23eb854:	f7fb f9ca 	bl	23e6bec <_ZN11SystemClass6millisEv>
 23eb858:	468c      	mov	ip, r1
 23eb85a:	4fbd      	ldr	r7, [pc, #756]	; (23ebb50 <_Z6OBS_Dov+0x3c0>)
 23eb85c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23eb860:	683b      	ldr	r3, [r7, #0]
 23eb862:	6879      	ldr	r1, [r7, #4]
 23eb864:	1ac0      	subs	r0, r0, r3
 23eb866:	eb6c 0101 	sbc.w	r1, ip, r1
 23eb86a:	2300      	movs	r3, #0
 23eb86c:	f7fa fa2a 	bl	23e5cc4 <__aeabi_uldivmod>
  rain = raingauge1_interrupt_count * 0.2;
 23eb870:	f8df b32c 	ldr.w	fp, [pc, #812]	; 23ebba0 <_Z6OBS_Dov+0x410>
  rgds = (System.millis()-raingauge1_interrupt_stime)/1000;
 23eb874:	4682      	mov	sl, r0
  rain = raingauge1_interrupt_count * 0.2;
 23eb876:	f8db 0000 	ldr.w	r0, [fp]
 23eb87a:	f7f9 fd03 	bl	23e5284 <__aeabi_ui2d>
 23eb87e:	a3ac      	add	r3, pc, #688	; (adr r3, 23ebb30 <_Z6OBS_Dov+0x3a0>)
 23eb880:	e9d3 2300 	ldrd	r2, r3, [r3]
 23eb884:	f7f9 fd78 	bl	23e5378 <__aeabi_dmul>
 23eb888:	f7fa f86e 	bl	23e5968 <__aeabi_d2f>
 23eb88c:	ee08 0a10 	vmov	s16, r0
  rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
 23eb890:	eeb4 8a48 	vcmp.f32	s16, s16
 23eb894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb898:	f180 8199 	bvs.w	23ebbce <_Z6OBS_Dov+0x43e>
 23eb89c:	f7f9 fd14 	bl	23e52c8 <__aeabi_f2d>
 23eb8a0:	4680      	mov	r8, r0
 23eb8a2:	203c      	movs	r0, #60	; 0x3c
 23eb8a4:	fbba f0f0 	udiv	r0, sl, r0
 23eb8a8:	4689      	mov	r9, r1
 23eb8aa:	f7f9 fceb 	bl	23e5284 <__aeabi_ui2d>
 23eb8ae:	2200      	movs	r2, #0
 23eb8b0:	4ba8      	ldr	r3, [pc, #672]	; (23ebb54 <_Z6OBS_Dov+0x3c4>)
 23eb8b2:	f7f9 fd61 	bl	23e5378 <__aeabi_dmul>
 23eb8b6:	4602      	mov	r2, r0
 23eb8b8:	460b      	mov	r3, r1
 23eb8ba:	4640      	mov	r0, r8
 23eb8bc:	4649      	mov	r1, r9
 23eb8be:	f7f9 ffeb 	bl	23e5898 <__aeabi_dcmpgt>
 23eb8c2:	eddf 7aa5 	vldr	s15, [pc, #660]	; 23ebb58 <_Z6OBS_Dov+0x3c8>
 23eb8c6:	2800      	cmp	r0, #0
 23eb8c8:	fe08 8a27 	vseleq.f32	s16, s16, s15
  raingauge1_interrupt_count = 0;
 23eb8cc:	2300      	movs	r3, #0
 23eb8ce:	f8cb 3000 	str.w	r3, [fp]
  raingauge1_interrupt_stime = System.millis();
 23eb8d2:	f7fb f98b 	bl	23e6bec <_ZN11SystemClass6millisEv>
 23eb8d6:	e9c7 0100 	strd	r0, r1, [r7]
  raingauge1_interrupt_ltime = 0; // used to debounce the tip
 23eb8da:	2000      	movs	r0, #0
 23eb8dc:	2100      	movs	r1, #0
 23eb8de:	4b9f      	ldr	r3, [pc, #636]	; (23ebb5c <_Z6OBS_Dov+0x3cc>)
 23eb8e0:	e9c3 0100 	strd	r0, r1, [r3]
  if (A4_State == A4_STATE_RAIN) {
 23eb8e4:	4b9e      	ldr	r3, [pc, #632]	; (23ebb60 <_Z6OBS_Dov+0x3d0>)
 23eb8e6:	681b      	ldr	r3, [r3, #0]
 23eb8e8:	2b02      	cmp	r3, #2
 23eb8ea:	f040 8176 	bne.w	23ebbda <_Z6OBS_Dov+0x44a>
    rg2ds = (System.millis()-raingauge2_interrupt_stime)/1000;
 23eb8ee:	f7fb f97d 	bl	23e6bec <_ZN11SystemClass6millisEv>
 23eb8f2:	468c      	mov	ip, r1
 23eb8f4:	4f9b      	ldr	r7, [pc, #620]	; (23ebb64 <_Z6OBS_Dov+0x3d4>)
 23eb8f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23eb8fa:	683b      	ldr	r3, [r7, #0]
 23eb8fc:	6879      	ldr	r1, [r7, #4]
 23eb8fe:	1ac0      	subs	r0, r0, r3
 23eb900:	eb6c 0101 	sbc.w	r1, ip, r1
 23eb904:	2300      	movs	r3, #0
 23eb906:	f7fa f9dd 	bl	23e5cc4 <__aeabi_uldivmod>
    rain2 = raingauge2_interrupt_count * 0.2;
 23eb90a:	f8df 9298 	ldr.w	r9, [pc, #664]	; 23ebba4 <_Z6OBS_Dov+0x414>
    rg2ds = (System.millis()-raingauge2_interrupt_stime)/1000;
 23eb90e:	4680      	mov	r8, r0
    rain2 = raingauge2_interrupt_count * 0.2;
 23eb910:	f8d9 0000 	ldr.w	r0, [r9]
 23eb914:	f7f9 fcb6 	bl	23e5284 <__aeabi_ui2d>
 23eb918:	a385      	add	r3, pc, #532	; (adr r3, 23ebb30 <_Z6OBS_Dov+0x3a0>)
 23eb91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23eb91e:	f7f9 fd2b 	bl	23e5378 <__aeabi_dmul>
 23eb922:	f7fa f821 	bl	23e5968 <__aeabi_d2f>
 23eb926:	ee09 0a10 	vmov	s18, r0
    rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
 23eb92a:	eeb4 9a49 	vcmp.f32	s18, s18
 23eb92e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb932:	f180 814f 	bvs.w	23ebbd4 <_Z6OBS_Dov+0x444>
 23eb936:	f7f9 fcc7 	bl	23e52c8 <__aeabi_f2d>
 23eb93a:	4682      	mov	sl, r0
 23eb93c:	203c      	movs	r0, #60	; 0x3c
 23eb93e:	fbb8 f0f0 	udiv	r0, r8, r0
 23eb942:	468b      	mov	fp, r1
 23eb944:	f7f9 fc9e 	bl	23e5284 <__aeabi_ui2d>
 23eb948:	2200      	movs	r2, #0
 23eb94a:	4b82      	ldr	r3, [pc, #520]	; (23ebb54 <_Z6OBS_Dov+0x3c4>)
 23eb94c:	f7f9 fd14 	bl	23e5378 <__aeabi_dmul>
 23eb950:	4602      	mov	r2, r0
 23eb952:	460b      	mov	r3, r1
 23eb954:	4650      	mov	r0, sl
 23eb956:	4659      	mov	r1, fp
 23eb958:	f7f9 ff9e 	bl	23e5898 <__aeabi_dcmpgt>
 23eb95c:	eddf 7a7e 	vldr	s15, [pc, #504]	; 23ebb58 <_Z6OBS_Dov+0x3c8>
 23eb960:	2800      	cmp	r0, #0
 23eb962:	fe09 9a27 	vseleq.f32	s18, s18, s15
    raingauge2_interrupt_count = 0;
 23eb966:	2300      	movs	r3, #0
 23eb968:	f8c9 3000 	str.w	r3, [r9]
    raingauge2_interrupt_stime = System.millis();
 23eb96c:	f7fb f93e 	bl	23e6bec <_ZN11SystemClass6millisEv>
 23eb970:	e9c7 0100 	strd	r0, r1, [r7]
    raingauge2_interrupt_ltime = 0; // used to debounce the tip
 23eb974:	2000      	movs	r0, #0
 23eb976:	2100      	movs	r1, #0
 23eb978:	4b7b      	ldr	r3, [pc, #492]	; (23ebb68 <_Z6OBS_Dov+0x3d8>)
 23eb97a:	e9c3 0100 	strd	r0, r1, [r3]
  obs[oidx].sensor[sidx].type = F_OBS;
 23eb97e:	f640 2798 	movw	r7, #2712	; 0xa98
 23eb982:	f04f 0800 	mov.w	r8, #0
  obs[oidx].sensor[sidx++].inuse = true;
 23eb986:	f04f 0901 	mov.w	r9, #1
  EEPROM_UpdateRainTotals(rain, rain2);
 23eb98a:	eeb0 0a48 	vmov.f32	s0, s16
 23eb98e:	eef0 0a49 	vmov.f32	s1, s18
 23eb992:	f7fe f833 	bl	23e99fc <_Z23EEPROM_UpdateRainTotalsff>
  strcpy (obs[oidx].sensor[sidx].id, "rg");
 23eb996:	f106 006c 	add.w	r0, r6, #108	; 0x6c
 23eb99a:	4974      	ldr	r1, [pc, #464]	; (23ebb6c <_Z6OBS_Dov+0x3dc>)
 23eb99c:	4420      	add	r0, r4
 23eb99e:	f011 faab 	bl	23fcef8 <strcpy>
  obs[oidx].sensor[sidx].type = F_OBS;
 23eb9a2:	9b00      	ldr	r3, [sp, #0]
  obs[oidx].sensor[sidx].f_obs = eeprom.rgt1;
 23eb9a4:	f8df a200 	ldr.w	sl, [pc, #512]	; 23ebba8 <_Z6OBS_Dov+0x418>
  obs[oidx].sensor[sidx].type = F_OBS;
 23eb9a8:	fb07 4703 	mla	r7, r7, r3, r4
  strcpy (obs[oidx].sensor[sidx].id, "rgt");
 23eb9ac:	f106 0088 	add.w	r0, r6, #136	; 0x88
 23eb9b0:	496f      	ldr	r1, [pc, #444]	; (23ebb70 <_Z6OBS_Dov+0x3e0>)
  obs[oidx].sensor[sidx].f_obs = rain;
 23eb9b2:	ed87 8a1e 	vstr	s16, [r7, #120]	; 0x78
  obs[oidx].sensor[sidx].type = F_OBS;
 23eb9b6:	f8c7 8074 	str.w	r8, [r7, #116]	; 0x74
  obs[oidx].sensor[sidx++].inuse = true;
 23eb9ba:	f887 9084 	strb.w	r9, [r7, #132]	; 0x84
  strcpy (obs[oidx].sensor[sidx].id, "rgt");
 23eb9be:	4420      	add	r0, r4
 23eb9c0:	f011 fa9a 	bl	23fcef8 <strcpy>
  obs[oidx].sensor[sidx].f_obs = eeprom.rgt1;
 23eb9c4:	f8da 3000 	ldr.w	r3, [sl]
  strcpy (obs[oidx].sensor[sidx].id, "rgp");
 23eb9c8:	f106 00a4 	add.w	r0, r6, #164	; 0xa4
 23eb9cc:	4969      	ldr	r1, [pc, #420]	; (23ebb74 <_Z6OBS_Dov+0x3e4>)
  obs[oidx].sensor[sidx].f_obs = eeprom.rgt1;
 23eb9ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  obs[oidx].sensor[sidx].type = F_OBS;
 23eb9d2:	f8c7 8090 	str.w	r8, [r7, #144]	; 0x90
  obs[oidx].sensor[sidx++].inuse = true;
 23eb9d6:	f887 90a0 	strb.w	r9, [r7, #160]	; 0xa0
  strcpy (obs[oidx].sensor[sidx].id, "rgp");
 23eb9da:	4420      	add	r0, r4
 23eb9dc:	f011 fa8c 	bl	23fcef8 <strcpy>
  obs[oidx].sensor[sidx].f_obs = eeprom.rgp1;
 23eb9e0:	f8da 3004 	ldr.w	r3, [sl, #4]
  strcpy (obs[oidx].sensor[sidx].id, "ws");
 23eb9e4:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
  obs[oidx].sensor[sidx].f_obs = eeprom.rgp1;
 23eb9e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  strcpy (obs[oidx].sensor[sidx].id, "ws");
 23eb9ec:	4962      	ldr	r1, [pc, #392]	; (23ebb78 <_Z6OBS_Dov+0x3e8>)
  obs[oidx].sensor[sidx].type = F_OBS;
 23eb9ee:	f8c7 80ac 	str.w	r8, [r7, #172]	; 0xac
  obs[oidx].sensor[sidx++].inuse = true;
 23eb9f2:	f887 90bc 	strb.w	r9, [r7, #188]	; 0xbc
  strcpy (obs[oidx].sensor[sidx].id, "ws");
 23eb9f6:	4420      	add	r0, r4
 23eb9f8:	f011 fa7e 	bl	23fcef8 <strcpy>
  obs[oidx].sensor[sidx].type = F_OBS;
 23eb9fc:	f8c7 80c8 	str.w	r8, [r7, #200]	; 0xc8
  ws = Wind_SpeedAverage();
 23eba00:	f7fd fc20 	bl	23e9244 <_Z17Wind_SpeedAveragev>
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23eba04:	eeb4 0a40 	vcmp.f32	s0, s0
 23eba08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eba0c:	f180 80e8 	bvs.w	23ebbe0 <_Z6OBS_Dov+0x450>
 23eba10:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23eba14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eba18:	f100 80e2 	bmi.w	23ebbe0 <_Z6OBS_Dov+0x450>
 23eba1c:	eddf 7a57 	vldr	s15, [pc, #348]	; 23ebb7c <_Z6OBS_Dov+0x3ec>
 23eba20:	eeb4 0a67 	vcmp.f32	s0, s15
 23eba24:	eddf 7a4c 	vldr	s15, [pc, #304]	; 23ebb58 <_Z6OBS_Dov+0x3c8>
 23eba28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eba2c:	fe37 0a80 	vselgt.f32	s0, s15, s0
  obs[oidx].sensor[sidx].f_obs = ws;
 23eba30:	f640 2798 	movw	r7, #2712	; 0xa98
  obs[oidx].sensor[sidx++].inuse = true;
 23eba34:	f04f 0901 	mov.w	r9, #1
  obs[oidx].sensor[sidx].f_obs = ws;
 23eba38:	9b00      	ldr	r3, [sp, #0]
  strcpy (obs[oidx].sensor[sidx].id, "wd");
 23eba3a:	f106 00dc 	add.w	r0, r6, #220	; 0xdc
  obs[oidx].sensor[sidx].f_obs = ws;
 23eba3e:	fb07 4803 	mla	r8, r7, r3, r4
  strcpy (obs[oidx].sensor[sidx].id, "wd");
 23eba42:	494f      	ldr	r1, [pc, #316]	; (23ebb80 <_Z6OBS_Dov+0x3f0>)
  obs[oidx].sensor[sidx].f_obs = ws;
 23eba44:	ed88 0a33 	vstr	s0, [r8, #204]	; 0xcc
  obs[oidx].sensor[sidx++].inuse = true;
 23eba48:	f888 90d8 	strb.w	r9, [r8, #216]	; 0xd8
  strcpy (obs[oidx].sensor[sidx].id, "wd");
 23eba4c:	4420      	add	r0, r4
 23eba4e:	f011 fa53 	bl	23fcef8 <strcpy>
  obs[oidx].sensor[sidx].type = I_OBS;
 23eba52:	f8c8 90e4 	str.w	r9, [r8, #228]	; 0xe4
  wd = Wind_DirectionVector();
 23eba56:	f7fd fb5f 	bl	23e9118 <_Z20Wind_DirectionVectorv>
  wd = (isnan(wd) || (wd < QC_MIN_WD) || (wd > QC_MAX_WD)) ? QC_ERR_WD : wd;
 23eba5a:	2800      	cmp	r0, #0
 23eba5c:	f2c0 80c3 	blt.w	23ebbe6 <_Z6OBS_Dov+0x456>
 23eba60:	4b48      	ldr	r3, [pc, #288]	; (23ebb84 <_Z6OBS_Dov+0x3f4>)
 23eba62:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
 23eba66:	bfc8      	it	gt
 23eba68:	4618      	movgt	r0, r3
  obs[oidx].sensor[sidx].i_obs = wd;
 23eba6a:	9b00      	ldr	r3, [sp, #0]
  return(wind.gust);
 23eba6c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 23ebbac <_Z6OBS_Dov+0x41c>
 23eba70:	fb07 4703 	mla	r7, r7, r3, r4
  obs[oidx].sensor[sidx++].inuse = true;
 23eba74:	2301      	movs	r3, #1
  obs[oidx].sensor[sidx].i_obs = wd;
 23eba76:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
  strcpy (obs[oidx].sensor[sidx].id, "wg");
 23eba7a:	f106 00f8 	add.w	r0, r6, #248	; 0xf8
  obs[oidx].sensor[sidx++].inuse = true;
 23eba7e:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
  strcpy (obs[oidx].sensor[sidx].id, "wg");
 23eba82:	4941      	ldr	r1, [pc, #260]	; (23ebb88 <_Z6OBS_Dov+0x3f8>)
 23eba84:	4420      	add	r0, r4
 23eba86:	f011 fa37 	bl	23fcef8 <strcpy>
 23eba8a:	edd9 7a79 	vldr	s15, [r9, #484]	; 0x1e4
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23eba8e:	eef4 7a67 	vcmp.f32	s15, s15
  obs[oidx].sensor[sidx].type = F_OBS;
 23eba92:	2300      	movs	r3, #0
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23eba94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  obs[oidx].sensor[sidx].type = F_OBS;
 23eba98:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23eba9c:	f180 80a5 	bvs.w	23ebbea <_Z6OBS_Dov+0x45a>
 23ebaa0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23ebaa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebaa8:	f100 809f 	bmi.w	23ebbea <_Z6OBS_Dov+0x45a>
 23ebaac:	ed9f 7a33 	vldr	s14, [pc, #204]	; 23ebb7c <_Z6OBS_Dov+0x3ec>
 23ebab0:	eef4 7a47 	vcmp.f32	s15, s14
 23ebab4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 23ebb58 <_Z6OBS_Dov+0x3c8>
 23ebab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebabc:	fe77 7a27 	vselgt.f32	s15, s14, s15
  obs[oidx].sensor[sidx].f_obs = ws;
 23ebac0:	f640 2798 	movw	r7, #2712	; 0xa98
  obs[oidx].sensor[sidx++].inuse = true;
 23ebac4:	f04f 0a01 	mov.w	sl, #1
  obs[oidx].sensor[sidx].f_obs = ws;
 23ebac8:	9b00      	ldr	r3, [sp, #0]
  strcpy (obs[oidx].sensor[sidx].id, "wgd");
 23ebaca:	f506 708a 	add.w	r0, r6, #276	; 0x114
  obs[oidx].sensor[sidx].f_obs = ws;
 23ebace:	fb07 4803 	mla	r8, r7, r3, r4
  strcpy (obs[oidx].sensor[sidx].id, "wgd");
 23ebad2:	492e      	ldr	r1, [pc, #184]	; (23ebb8c <_Z6OBS_Dov+0x3fc>)
  obs[oidx].sensor[sidx].f_obs = ws;
 23ebad4:	edc8 7a41 	vstr	s15, [r8, #260]	; 0x104
  obs[oidx].sensor[sidx++].inuse = true;
 23ebad8:	f888 a110 	strb.w	sl, [r8, #272]	; 0x110
  strcpy (obs[oidx].sensor[sidx].id, "wgd");
 23ebadc:	4420      	add	r0, r4
 23ebade:	f011 fa0b 	bl	23fcef8 <strcpy>
  return(wind.gust_direction);
 23ebae2:	f8d9 31e8 	ldr.w	r3, [r9, #488]	; 0x1e8
  obs[oidx].sensor[sidx].type = I_OBS;
 23ebae6:	f8c8 a11c 	str.w	sl, [r8, #284]	; 0x11c
  wd = (isnan(wd) || (wd < QC_MIN_WD) || (wd > QC_MAX_WD)) ? QC_ERR_WD : wd;
 23ebaea:	2b00      	cmp	r3, #0
 23ebaec:	f2c0 8080 	blt.w	23ebbf0 <_Z6OBS_Dov+0x460>
 23ebaf0:	4a24      	ldr	r2, [pc, #144]	; (23ebb84 <_Z6OBS_Dov+0x3f4>)
 23ebaf2:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 23ebaf6:	bfc8      	it	gt
 23ebaf8:	4613      	movgt	r3, r2
  obs[oidx].sensor[sidx].i_obs = wd;
 23ebafa:	9a00      	ldr	r2, [sp, #0]
 23ebafc:	fb07 4702 	mla	r7, r7, r2, r4
 23ebb00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  obs[oidx].sensor[sidx++].inuse = true;
 23ebb04:	2301      	movs	r3, #1
 23ebb06:	f887 312c 	strb.w	r3, [r7, #300]	; 0x12c
  if (BMX_1_exists) {
 23ebb0a:	4b21      	ldr	r3, [pc, #132]	; (23ebb90 <_Z6OBS_Dov+0x400>)
 23ebb0c:	781b      	ldrb	r3, [r3, #0]
 23ebb0e:	2b00      	cmp	r3, #0
 23ebb10:	f000 8142 	beq.w	23ebd98 <_Z6OBS_Dov+0x608>
    if (BMX_1_chip_id == BMP280_CHIP_ID) {
 23ebb14:	4b1f      	ldr	r3, [pc, #124]	; (23ebb94 <_Z6OBS_Dov+0x404>)
 23ebb16:	f8df 9098 	ldr.w	r9, [pc, #152]	; 23ebbb0 <_Z6OBS_Dov+0x420>
 23ebb1a:	781b      	ldrb	r3, [r3, #0]
 23ebb1c:	2b58      	cmp	r3, #88	; 0x58
 23ebb1e:	d169      	bne.n	23ebbf4 <_Z6OBS_Dov+0x464>
      p = bmp1.readPressure()/100.0F;       // bp1 hPa
 23ebb20:	481d      	ldr	r0, [pc, #116]	; (23ebb98 <_Z6OBS_Dov+0x408>)
 23ebb22:	f004 fce3 	bl	23f04ec <_ZN15Adafruit_BMP28012readPressureEv>
 23ebb26:	eddf 7a1d 	vldr	s15, [pc, #116]	; 23ebb9c <_Z6OBS_Dov+0x40c>
 23ebb2a:	e043      	b.n	23ebbb4 <_Z6OBS_Dov+0x424>
 23ebb2c:	f3af 8000 	nop.w
 23ebb30:	9999999a 	.word	0x9999999a
 23ebb34:	3fc99999 	.word	0x3fc99999
 23ebb38:	1007aeb8 	.word	0x1007aeb8
 23ebb3c:	1007aa58 	.word	0x1007aa58
 23ebb40:	1006f550 	.word	0x1006f550
 23ebb44:	023fe49e 	.word	0x023fe49e
 23ebb48:	023fe4a2 	.word	0x023fe4a2
 23ebb4c:	023fe4a6 	.word	0x023fe4a6
 23ebb50:	1007aa68 	.word	0x1007aa68
 23ebb54:	403e0000 	.word	0x403e0000
 23ebb58:	c479f99a 	.word	0xc479f99a
 23ebb5c:	1007aa60 	.word	0x1007aa60
 23ebb60:	1006a294 	.word	0x1006a294
 23ebb64:	1007aa80 	.word	0x1007aa80
 23ebb68:	1007aa78 	.word	0x1007aa78
 23ebb6c:	023fe4aa 	.word	0x023fe4aa
 23ebb70:	023fe4ad 	.word	0x023fe4ad
 23ebb74:	023fe4b1 	.word	0x023fe4b1
 23ebb78:	023fe4b5 	.word	0x023fe4b5
 23ebb7c:	42ce0000 	.word	0x42ce0000
 23ebb80:	023fe4b8 	.word	0x023fe4b8
 23ebb84:	fffffc19 	.word	0xfffffc19
 23ebb88:	023fe4bb 	.word	0x023fe4bb
 23ebb8c:	023fe4be 	.word	0x023fe4be
 23ebb90:	1006a2ba 	.word	0x1006a2ba
 23ebb94:	1006a2b9 	.word	0x1006a2b9
 23ebb98:	1006ac10 	.word	0x1006ac10
 23ebb9c:	42c80000 	.word	0x42c80000
 23ebba0:	1007aa5c 	.word	0x1007aa5c
 23ebba4:	1007aa70 	.word	0x1007aa70
 23ebba8:	1006ae74 	.word	0x1006ae74
 23ebbac:	1007ac70 	.word	0x1007ac70
 23ebbb0:	1006a2bb 	.word	0x1006a2bb
      t = bmp1.readTemperature();           // bt1
 23ebbb4:	487b      	ldr	r0, [pc, #492]	; (23ebda4 <_Z6OBS_Dov+0x614>)
      p = bmp1.readPressure()/100.0F;       // bp1 hPa
 23ebbb6:	eec0 9a27 	vdiv.f32	s19, s0, s15
      t = bmp1.readTemperature();           // bt1
 23ebbba:	f004 fc57 	bl	23f046c <_ZN15Adafruit_BMP28015readTemperatureEv>
      t = bm31.readTemperature();           // bt1
 23ebbbe:	eeb0 8a40 	vmov.f32	s16, s0
    float h = 0.0;
 23ebbc2:	eddf 8a79 	vldr	s17, [pc, #484]	; 23ebda8 <_Z6OBS_Dov+0x618>
 23ebbc6:	e03e      	b.n	23ebc46 <_Z6OBS_Dov+0x4b6>
  float BatteryPoC = 0.0; // Battery Percent of Charge
 23ebbc8:	ed9f 8a77 	vldr	s16, [pc, #476]	; 23ebda8 <_Z6OBS_Dov+0x618>
 23ebbcc:	e608      	b.n	23eb7e0 <_Z6OBS_Dov+0x50>
  rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
 23ebbce:	ed9f 8a77 	vldr	s16, [pc, #476]	; 23ebdac <_Z6OBS_Dov+0x61c>
 23ebbd2:	e67b      	b.n	23eb8cc <_Z6OBS_Dov+0x13c>
    rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
 23ebbd4:	ed9f 9a75 	vldr	s18, [pc, #468]	; 23ebdac <_Z6OBS_Dov+0x61c>
 23ebbd8:	e6c5      	b.n	23eb966 <_Z6OBS_Dov+0x1d6>
  float rain2 = 0.0;
 23ebbda:	ed9f 9a73 	vldr	s18, [pc, #460]	; 23ebda8 <_Z6OBS_Dov+0x618>
 23ebbde:	e6ce      	b.n	23eb97e <_Z6OBS_Dov+0x1ee>
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23ebbe0:	ed9f 0a72 	vldr	s0, [pc, #456]	; 23ebdac <_Z6OBS_Dov+0x61c>
 23ebbe4:	e724      	b.n	23eba30 <_Z6OBS_Dov+0x2a0>
  wd = (isnan(wd) || (wd < QC_MIN_WD) || (wd > QC_MAX_WD)) ? QC_ERR_WD : wd;
 23ebbe6:	4872      	ldr	r0, [pc, #456]	; (23ebdb0 <_Z6OBS_Dov+0x620>)
 23ebbe8:	e73f      	b.n	23eba6a <_Z6OBS_Dov+0x2da>
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23ebbea:	eddf 7a70 	vldr	s15, [pc, #448]	; 23ebdac <_Z6OBS_Dov+0x61c>
 23ebbee:	e767      	b.n	23ebac0 <_Z6OBS_Dov+0x330>
  wd = (isnan(wd) || (wd < QC_MIN_WD) || (wd > QC_MAX_WD)) ? QC_ERR_WD : wd;
 23ebbf0:	4b6f      	ldr	r3, [pc, #444]	; (23ebdb0 <_Z6OBS_Dov+0x620>)
 23ebbf2:	e782      	b.n	23ebafa <_Z6OBS_Dov+0x36a>
    else if (BMX_1_chip_id == BME280_BMP390_CHIP_ID) {
 23ebbf4:	2b60      	cmp	r3, #96	; 0x60
 23ebbf6:	f040 80bb 	bne.w	23ebd70 <_Z6OBS_Dov+0x5e0>
      if (BMX_1_type == BMX_TYPE_BME280) {
 23ebbfa:	f899 3000 	ldrb.w	r3, [r9]
 23ebbfe:	2b02      	cmp	r3, #2
 23ebc00:	f040 80af 	bne.w	23ebd62 <_Z6OBS_Dov+0x5d2>
        p = bme1.readPressure()/100.0F;     // bp1 hPa
 23ebc04:	486b      	ldr	r0, [pc, #428]	; (23ebdb4 <_Z6OBS_Dov+0x624>)
 23ebc06:	f004 f829 	bl	23efc5c <_ZN15Adafruit_BME28012readPressureEv>
 23ebc0a:	eddf 7a6b 	vldr	s15, [pc, #428]	; 23ebdb8 <_Z6OBS_Dov+0x628>
        t = bme1.readTemperature();         // bt1
 23ebc0e:	4869      	ldr	r0, [pc, #420]	; (23ebdb4 <_Z6OBS_Dov+0x624>)
        p = bme1.readPressure()/100.0F;     // bp1 hPa
 23ebc10:	eec0 9a27 	vdiv.f32	s19, s0, s15
        t = bme1.readTemperature();         // bt1
 23ebc14:	f003 fff0 	bl	23efbf8 <_ZN15Adafruit_BME28015readTemperatureEv>
        h = bme1.readHumidity();            // bh1 
 23ebc18:	4866      	ldr	r0, [pc, #408]	; (23ebdb4 <_Z6OBS_Dov+0x624>)
        t = bme1.readTemperature();         // bt1
 23ebc1a:	eeb0 8a40 	vmov.f32	s16, s0
        h = bme1.readHumidity();            // bh1 
 23ebc1e:	f004 f8ed 	bl	23efdfc <_ZN15Adafruit_BME28012readHumidityEv>
 23ebc22:	eef0 8a40 	vmov.f32	s17, s0
      if (BMX_1_type == BMX_TYPE_BMP390) {
 23ebc26:	f899 3000 	ldrb.w	r3, [r9]
 23ebc2a:	2b04      	cmp	r3, #4
 23ebc2c:	d10b      	bne.n	23ebc46 <_Z6OBS_Dov+0x4b6>
        p = bm31.readPressure()/100.0F;     // bp1 hPa
 23ebc2e:	4863      	ldr	r0, [pc, #396]	; (23ebdbc <_Z6OBS_Dov+0x62c>)
 23ebc30:	f004 fe67 	bl	23f0902 <_ZN15Adafruit_BMP3XX12readPressureEv>
 23ebc34:	eddf 7a60 	vldr	s15, [pc, #384]	; 23ebdb8 <_Z6OBS_Dov+0x628>
        t = bm31.readTemperature();         // bt1 
 23ebc38:	4860      	ldr	r0, [pc, #384]	; (23ebdbc <_Z6OBS_Dov+0x62c>)
        p = bm31.readPressure()/100.0F;     // bp1 hPa
 23ebc3a:	eec0 9a27 	vdiv.f32	s19, s0, s15
        t = bm31.readTemperature();         // bt1 
 23ebc3e:	f004 fe55 	bl	23f08ec <_ZN15Adafruit_BMP3XX15readTemperatureEv>
 23ebc42:	eeb0 8a40 	vmov.f32	s16, s0
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23ebc46:	eef4 9a69 	vcmp.f32	s19, s19
 23ebc4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebc4e:	f180 809a 	bvs.w	23ebd86 <_Z6OBS_Dov+0x5f6>
 23ebc52:	eddf 7a5b 	vldr	s15, [pc, #364]	; 23ebdc0 <_Z6OBS_Dov+0x630>
 23ebc56:	eef4 9ae7 	vcmpe.f32	s19, s15
 23ebc5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebc5e:	f100 8092 	bmi.w	23ebd86 <_Z6OBS_Dov+0x5f6>
 23ebc62:	eddf 7a58 	vldr	s15, [pc, #352]	; 23ebdc4 <_Z6OBS_Dov+0x634>
 23ebc66:	eef4 9a67 	vcmp.f32	s19, s15
 23ebc6a:	eddf 7a50 	vldr	s15, [pc, #320]	; 23ebdac <_Z6OBS_Dov+0x61c>
 23ebc6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebc72:	fe77 9aa9 	vselgt.f32	s19, s15, s19
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ebc76:	eeb4 8a48 	vcmp.f32	s16, s16
 23ebc7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebc7e:	f180 8085 	bvs.w	23ebd8c <_Z6OBS_Dov+0x5fc>
 23ebc82:	eddf 7a51 	vldr	s15, [pc, #324]	; 23ebdc8 <_Z6OBS_Dov+0x638>
 23ebc86:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23ebc8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebc8e:	d47d      	bmi.n	23ebd8c <_Z6OBS_Dov+0x5fc>
 23ebc90:	eddf 7a4e 	vldr	s15, [pc, #312]	; 23ebdcc <_Z6OBS_Dov+0x63c>
 23ebc94:	eeb4 8a67 	vcmp.f32	s16, s15
 23ebc98:	eddf 7a44 	vldr	s15, [pc, #272]	; 23ebdac <_Z6OBS_Dov+0x61c>
 23ebc9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebca0:	fe37 8a88 	vselgt.f32	s16, s15, s16
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ebca4:	eef4 8a68 	vcmp.f32	s17, s17
 23ebca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebcac:	d671      	bvs.n	23ebd92 <_Z6OBS_Dov+0x602>
 23ebcae:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 23ebcb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebcb6:	d46c      	bmi.n	23ebd92 <_Z6OBS_Dov+0x602>
 23ebcb8:	eddf 7a3f 	vldr	s15, [pc, #252]	; 23ebdb8 <_Z6OBS_Dov+0x628>
 23ebcbc:	eef4 8a67 	vcmp.f32	s17, s15
 23ebcc0:	eddf 7a3a 	vldr	s15, [pc, #232]	; 23ebdac <_Z6OBS_Dov+0x61c>
 23ebcc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebcc8:	fe77 8aa8 	vselgt.f32	s17, s15, s17
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebccc:	f640 2798 	movw	r7, #2712	; 0xa98
 23ebcd0:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ebcd4:	f04f 0801 	mov.w	r8, #1
    strcpy (obs[oidx].sensor[sidx].id, "bp1");
 23ebcd8:	f506 7098 	add.w	r0, r6, #304	; 0x130
 23ebcdc:	493c      	ldr	r1, [pc, #240]	; (23ebdd0 <_Z6OBS_Dov+0x640>)
 23ebcde:	4420      	add	r0, r4
 23ebce0:	f011 f90a 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebce4:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "bt1");
 23ebce6:	f506 70a6 	add.w	r0, r6, #332	; 0x14c
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebcea:	fb07 4703 	mla	r7, r7, r3, r4
    strcpy (obs[oidx].sensor[sidx].id, "bt1");
 23ebcee:	4939      	ldr	r1, [pc, #228]	; (23ebdd4 <_Z6OBS_Dov+0x644>)
    obs[oidx].sensor[sidx].f_obs = p;
 23ebcf0:	edc7 9a4f 	vstr	s19, [r7, #316]	; 0x13c
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebcf4:	f8c7 a138 	str.w	sl, [r7, #312]	; 0x138
    obs[oidx].sensor[sidx++].inuse = true;
 23ebcf8:	f887 8148 	strb.w	r8, [r7, #328]	; 0x148
    strcpy (obs[oidx].sensor[sidx].id, "bt1");
 23ebcfc:	4420      	add	r0, r4
 23ebcfe:	f011 f8fb 	bl	23fcef8 <strcpy>
    if (BMX_1_type == BMX_TYPE_BME280) {
 23ebd02:	f899 3000 	ldrb.w	r3, [r9]
    obs[oidx].sensor[sidx].f_obs = t;
 23ebd06:	ed87 8a56 	vstr	s16, [r7, #344]	; 0x158
    if (BMX_1_type == BMX_TYPE_BME280) {
 23ebd0a:	2b02      	cmp	r3, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebd0c:	f8c7 a154 	str.w	sl, [r7, #340]	; 0x154
    obs[oidx].sensor[sidx++].inuse = true;
 23ebd10:	f887 8164 	strb.w	r8, [r7, #356]	; 0x164
    if (BMX_1_type == BMX_TYPE_BME280) {
 23ebd14:	d143      	bne.n	23ebd9e <_Z6OBS_Dov+0x60e>
      strcpy (obs[oidx].sensor[sidx].id, "bh1");
 23ebd16:	f506 70b4 	add.w	r0, r6, #360	; 0x168
 23ebd1a:	492f      	ldr	r1, [pc, #188]	; (23ebdd8 <_Z6OBS_Dov+0x648>)
 23ebd1c:	4420      	add	r0, r4
 23ebd1e:	f011 f8eb 	bl	23fcef8 <strcpy>
      obs[oidx].sensor[sidx++].inuse = true;
 23ebd22:	f887 8180 	strb.w	r8, [r7, #384]	; 0x180
      obs[oidx].sensor[sidx].f_obs = h;
 23ebd26:	edc7 8a5d 	vstr	s17, [r7, #372]	; 0x174
      obs[oidx].sensor[sidx++].inuse = true;
 23ebd2a:	f04f 080d 	mov.w	r8, #13
      obs[oidx].sensor[sidx].type = F_OBS;
 23ebd2e:	f8c7 a170 	str.w	sl, [r7, #368]	; 0x170
  if (BMX_2_exists) {
 23ebd32:	4b2a      	ldr	r3, [pc, #168]	; (23ebddc <_Z6OBS_Dov+0x64c>)
 23ebd34:	781b      	ldrb	r3, [r3, #0]
 23ebd36:	2b00      	cmp	r3, #0
 23ebd38:	f000 8108 	beq.w	23ebf4c <_Z6OBS_Dov+0x7bc>
    if (BMX_2_chip_id == BMP280_CHIP_ID) {
 23ebd3c:	4b28      	ldr	r3, [pc, #160]	; (23ebde0 <_Z6OBS_Dov+0x650>)
 23ebd3e:	781b      	ldrb	r3, [r3, #0]
 23ebd40:	2b58      	cmp	r3, #88	; 0x58
 23ebd42:	d151      	bne.n	23ebde8 <_Z6OBS_Dov+0x658>
      p = bmp2.readPressure()/100.0F;       // bp2 hPa
 23ebd44:	4827      	ldr	r0, [pc, #156]	; (23ebde4 <_Z6OBS_Dov+0x654>)
 23ebd46:	f004 fbd1 	bl	23f04ec <_ZN15Adafruit_BMP28012readPressureEv>
 23ebd4a:	eddf 7a1b 	vldr	s15, [pc, #108]	; 23ebdb8 <_Z6OBS_Dov+0x628>
      t = bmp2.readTemperature();           // bt2
 23ebd4e:	4825      	ldr	r0, [pc, #148]	; (23ebde4 <_Z6OBS_Dov+0x654>)
      p = bmp2.readPressure()/100.0F;       // bp2 hPa
 23ebd50:	eec0 9a27 	vdiv.f32	s19, s0, s15
      t = bmp2.readTemperature();           // bt2
 23ebd54:	f004 fb8a 	bl	23f046c <_ZN15Adafruit_BMP28015readTemperatureEv>
      t = bm32.readTemperature();           // bt2
 23ebd58:	eeb0 8a40 	vmov.f32	s16, s0
    float h = 0.0;
 23ebd5c:	eddf 8a12 	vldr	s17, [pc, #72]	; 23ebda8 <_Z6OBS_Dov+0x618>
 23ebd60:	e06a      	b.n	23ebe38 <_Z6OBS_Dov+0x6a8>
    float h = 0.0;
 23ebd62:	eddf 8a11 	vldr	s17, [pc, #68]	; 23ebda8 <_Z6OBS_Dov+0x618>
    float t = 0.0;
 23ebd66:	eeb0 8a68 	vmov.f32	s16, s17
    float p = 0.0;
 23ebd6a:	eef0 9a68 	vmov.f32	s19, s17
 23ebd6e:	e75a      	b.n	23ebc26 <_Z6OBS_Dov+0x496>
      p = bm31.readPressure()/100.0F;       // bp1 hPa
 23ebd70:	4812      	ldr	r0, [pc, #72]	; (23ebdbc <_Z6OBS_Dov+0x62c>)
 23ebd72:	f004 fdc6 	bl	23f0902 <_ZN15Adafruit_BMP3XX12readPressureEv>
 23ebd76:	eddf 7a10 	vldr	s15, [pc, #64]	; 23ebdb8 <_Z6OBS_Dov+0x628>
      t = bm31.readTemperature();           // bt1
 23ebd7a:	4810      	ldr	r0, [pc, #64]	; (23ebdbc <_Z6OBS_Dov+0x62c>)
      p = bm31.readPressure()/100.0F;       // bp1 hPa
 23ebd7c:	eec0 9a27 	vdiv.f32	s19, s0, s15
      t = bm31.readTemperature();           // bt1
 23ebd80:	f004 fdb4 	bl	23f08ec <_ZN15Adafruit_BMP3XX15readTemperatureEv>
 23ebd84:	e71b      	b.n	23ebbbe <_Z6OBS_Dov+0x42e>
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23ebd86:	eddf 9a09 	vldr	s19, [pc, #36]	; 23ebdac <_Z6OBS_Dov+0x61c>
 23ebd8a:	e774      	b.n	23ebc76 <_Z6OBS_Dov+0x4e6>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ebd8c:	ed9f 8a07 	vldr	s16, [pc, #28]	; 23ebdac <_Z6OBS_Dov+0x61c>
 23ebd90:	e788      	b.n	23ebca4 <_Z6OBS_Dov+0x514>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ebd92:	eddf 8a06 	vldr	s17, [pc, #24]	; 23ebdac <_Z6OBS_Dov+0x61c>
 23ebd96:	e799      	b.n	23ebccc <_Z6OBS_Dov+0x53c>
  obs[oidx].sensor[sidx++].inuse = true;
 23ebd98:	f04f 080a 	mov.w	r8, #10
 23ebd9c:	e7c9      	b.n	23ebd32 <_Z6OBS_Dov+0x5a2>
    obs[oidx].sensor[sidx++].inuse = true;
 23ebd9e:	f04f 080c 	mov.w	r8, #12
 23ebda2:	e7c6      	b.n	23ebd32 <_Z6OBS_Dov+0x5a2>
 23ebda4:	1006ac10 	.word	0x1006ac10
 23ebda8:	00000000 	.word	0x00000000
 23ebdac:	c479f99a 	.word	0xc479f99a
 23ebdb0:	fffffc19 	.word	0xfffffc19
 23ebdb4:	1006ab60 	.word	0x1006ab60
 23ebdb8:	42c80000 	.word	0x42c80000
 23ebdbc:	1006a960 	.word	0x1006a960
 23ebdc0:	43960000 	.word	0x43960000
 23ebdc4:	44898000 	.word	0x44898000
 23ebdc8:	c2200000 	.word	0xc2200000
 23ebdcc:	42700000 	.word	0x42700000
 23ebdd0:	023fe4c2 	.word	0x023fe4c2
 23ebdd4:	023fe4c6 	.word	0x023fe4c6
 23ebdd8:	023fe4ca 	.word	0x023fe4ca
 23ebddc:	1006a2bd 	.word	0x1006a2bd
 23ebde0:	1006a2bc 	.word	0x1006a2bc
 23ebde4:	1006ac50 	.word	0x1006ac50
    else if (BMX_2_chip_id == BME280_BMP390_CHIP_ID) {
 23ebde8:	2b60      	cmp	r3, #96	; 0x60
 23ebdea:	f041 8306 	bne.w	23ed3fa <_Z6OBS_Dov+0x1c6a>
      if (BMX_2_type == BMX_TYPE_BME280) {
 23ebdee:	4edc      	ldr	r6, [pc, #880]	; (23ec160 <_Z6OBS_Dov+0x9d0>)
 23ebdf0:	7833      	ldrb	r3, [r6, #0]
 23ebdf2:	2b02      	cmp	r3, #2
 23ebdf4:	f041 82f9 	bne.w	23ed3ea <_Z6OBS_Dov+0x1c5a>
        p = bme2.readPressure()/100.0F;     // bp2 hPa
 23ebdf8:	48da      	ldr	r0, [pc, #872]	; (23ec164 <_Z6OBS_Dov+0x9d4>)
 23ebdfa:	f003 ff2f 	bl	23efc5c <_ZN15Adafruit_BME28012readPressureEv>
 23ebdfe:	eddf 7ada 	vldr	s15, [pc, #872]	; 23ec168 <_Z6OBS_Dov+0x9d8>
        t = bme2.readTemperature();         // bt2
 23ebe02:	48d8      	ldr	r0, [pc, #864]	; (23ec164 <_Z6OBS_Dov+0x9d4>)
        p = bme2.readPressure()/100.0F;     // bp2 hPa
 23ebe04:	eec0 9a27 	vdiv.f32	s19, s0, s15
        t = bme2.readTemperature();         // bt2
 23ebe08:	f003 fef6 	bl	23efbf8 <_ZN15Adafruit_BME28015readTemperatureEv>
        h = bme2.readHumidity();            // bh2 
 23ebe0c:	48d5      	ldr	r0, [pc, #852]	; (23ec164 <_Z6OBS_Dov+0x9d4>)
        t = bme2.readTemperature();         // bt2
 23ebe0e:	eeb0 8a40 	vmov.f32	s16, s0
        h = bme2.readHumidity();            // bh2 
 23ebe12:	f003 fff3 	bl	23efdfc <_ZN15Adafruit_BME28012readHumidityEv>
 23ebe16:	eef0 8a40 	vmov.f32	s17, s0
      if (BMX_2_type == BMX_TYPE_BMP390) {
 23ebe1a:	7833      	ldrb	r3, [r6, #0]
 23ebe1c:	2b04      	cmp	r3, #4
 23ebe1e:	d10b      	bne.n	23ebe38 <_Z6OBS_Dov+0x6a8>
        p = bm32.readPressure()/100.0F;     // bp2 hPa
 23ebe20:	48d2      	ldr	r0, [pc, #840]	; (23ec16c <_Z6OBS_Dov+0x9dc>)
 23ebe22:	f004 fd6e 	bl	23f0902 <_ZN15Adafruit_BMP3XX12readPressureEv>
 23ebe26:	eddf 7ad0 	vldr	s15, [pc, #832]	; 23ec168 <_Z6OBS_Dov+0x9d8>
        t = bm32.readTemperature();         // bt2       
 23ebe2a:	48d0      	ldr	r0, [pc, #832]	; (23ec16c <_Z6OBS_Dov+0x9dc>)
        p = bm32.readPressure()/100.0F;     // bp2 hPa
 23ebe2c:	eec0 9a27 	vdiv.f32	s19, s0, s15
        t = bm32.readTemperature();         // bt2       
 23ebe30:	f004 fd5c 	bl	23f08ec <_ZN15Adafruit_BMP3XX15readTemperatureEv>
 23ebe34:	eeb0 8a40 	vmov.f32	s16, s0
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23ebe38:	eef4 9a69 	vcmp.f32	s19, s19
 23ebe3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebe40:	f181 82e7 	bvs.w	23ed412 <_Z6OBS_Dov+0x1c82>
 23ebe44:	eddf 7aca 	vldr	s15, [pc, #808]	; 23ec170 <_Z6OBS_Dov+0x9e0>
 23ebe48:	eef4 9ae7 	vcmpe.f32	s19, s15
 23ebe4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebe50:	f101 82df 	bmi.w	23ed412 <_Z6OBS_Dov+0x1c82>
 23ebe54:	eddf 7ac7 	vldr	s15, [pc, #796]	; 23ec174 <_Z6OBS_Dov+0x9e4>
 23ebe58:	eef4 9a67 	vcmp.f32	s19, s15
 23ebe5c:	eddf 7ad6 	vldr	s15, [pc, #856]	; 23ec1b8 <_Z6OBS_Dov+0xa28>
 23ebe60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebe64:	fe77 9aa9 	vselgt.f32	s19, s15, s19
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ebe68:	eeb4 8a48 	vcmp.f32	s16, s16
 23ebe6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebe70:	f181 82d3 	bvs.w	23ed41a <_Z6OBS_Dov+0x1c8a>
 23ebe74:	eddf 7ace 	vldr	s15, [pc, #824]	; 23ec1b0 <_Z6OBS_Dov+0xa20>
 23ebe78:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23ebe7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebe80:	f101 82cb 	bmi.w	23ed41a <_Z6OBS_Dov+0x1c8a>
 23ebe84:	eddf 7acb 	vldr	s15, [pc, #812]	; 23ec1b4 <_Z6OBS_Dov+0xa24>
 23ebe88:	eeb4 8a67 	vcmp.f32	s16, s15
 23ebe8c:	eddf 7aca 	vldr	s15, [pc, #808]	; 23ec1b8 <_Z6OBS_Dov+0xa28>
 23ebe90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebe94:	fe37 8a88 	vselgt.f32	s16, s15, s16
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ebe98:	eef4 8a68 	vcmp.f32	s17, s17
 23ebe9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebea0:	f181 82bf 	bvs.w	23ed422 <_Z6OBS_Dov+0x1c92>
 23ebea4:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 23ebea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebeac:	f101 82b9 	bmi.w	23ed422 <_Z6OBS_Dov+0x1c92>
 23ebeb0:	eddf 7aad 	vldr	s15, [pc, #692]	; 23ec168 <_Z6OBS_Dov+0x9d8>
 23ebeb4:	eef4 8a67 	vcmp.f32	s17, s15
 23ebeb8:	eddf 7abf 	vldr	s15, [pc, #764]	; 23ec1b8 <_Z6OBS_Dov+0xa28>
 23ebebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebec0:	fe77 8aa8 	vselgt.f32	s17, s15, s17
    strcpy (obs[oidx].sensor[sidx].id, "bp2");
 23ebec4:	f04f 0b1c 	mov.w	fp, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebec8:	f640 2698 	movw	r6, #2712	; 0xa98
 23ebecc:	fb0b f908 	mul.w	r9, fp, r8
    strcpy (obs[oidx].sensor[sidx].id, "bp2");
 23ebed0:	eb05 0009 	add.w	r0, r5, r9
 23ebed4:	49a8      	ldr	r1, [pc, #672]	; (23ec178 <_Z6OBS_Dov+0x9e8>)
 23ebed6:	4420      	add	r0, r4
 23ebed8:	f011 f80e 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebedc:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ebede:	f04f 0a01 	mov.w	sl, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebee2:	435e      	muls	r6, r3
 23ebee4:	2300      	movs	r3, #0
 23ebee6:	eb09 0206 	add.w	r2, r9, r6
    strcpy (obs[oidx].sensor[sidx].id, "bt2");
 23ebeea:	eb09 000b 	add.w	r0, r9, fp
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebeee:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "bt2");
 23ebef0:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebef2:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = p;
 23ebef4:	edc2 9a09 	vstr	s19, [r2, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ebef8:	f882 a030 	strb.w	sl, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "bt2");
 23ebefc:	499f      	ldr	r1, [pc, #636]	; (23ec17c <_Z6OBS_Dov+0x9ec>)
 23ebefe:	4420      	add	r0, r4
 23ebf00:	f010 fffa 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebf04:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ebf06:	f108 0701 	add.w	r7, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebf0a:	fb0b 6207 	mla	r2, fp, r7, r6
 23ebf0e:	4422      	add	r2, r4
    obs[oidx].sensor[sidx].f_obs = t;
 23ebf10:	ed82 8a09 	vstr	s16, [r2, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebf14:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ebf16:	f882 a030 	strb.w	sl, [r2, #48]	; 0x30
    if (BMX_2_type == BMX_TYPE_BME280) {
 23ebf1a:	4a91      	ldr	r2, [pc, #580]	; (23ec160 <_Z6OBS_Dov+0x9d0>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ebf1c:	f108 0702 	add.w	r7, r8, #2
    if (BMX_2_type == BMX_TYPE_BME280) {
 23ebf20:	7812      	ldrb	r2, [r2, #0]
 23ebf22:	2a02      	cmp	r2, #2
 23ebf24:	f041 8281 	bne.w	23ed42a <_Z6OBS_Dov+0x1c9a>
      obs[oidx].sensor[sidx].type = F_OBS;
 23ebf28:	fb0b 6607 	mla	r6, fp, r7, r6
      strcpy (obs[oidx].sensor[sidx].id, "bh2");
 23ebf2c:	f109 0038 	add.w	r0, r9, #56	; 0x38
 23ebf30:	4428      	add	r0, r5
 23ebf32:	4993      	ldr	r1, [pc, #588]	; (23ec180 <_Z6OBS_Dov+0x9f0>)
 23ebf34:	4420      	add	r0, r4
 23ebf36:	f010 ffdf 	bl	23fcef8 <strcpy>
      obs[oidx].sensor[sidx].type = F_OBS;
 23ebf3a:	4426      	add	r6, r4
 23ebf3c:	2300      	movs	r3, #0
      obs[oidx].sensor[sidx].f_obs = h;
 23ebf3e:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
      obs[oidx].sensor[sidx].type = F_OBS;
 23ebf42:	6233      	str	r3, [r6, #32]
      obs[oidx].sensor[sidx++].inuse = true;
 23ebf44:	f108 0803 	add.w	r8, r8, #3
 23ebf48:	f886 a030 	strb.w	sl, [r6, #48]	; 0x30
  if (HTU21DF_exists) {
 23ebf4c:	4b8d      	ldr	r3, [pc, #564]	; (23ec184 <_Z6OBS_Dov+0x9f4>)
 23ebf4e:	781b      	ldrb	r3, [r3, #0]
 23ebf50:	2b00      	cmp	r3, #0
 23ebf52:	d070      	beq.n	23ec036 <_Z6OBS_Dov+0x8a6>
    strcpy (obs[oidx].sensor[sidx].id, "hh1");
 23ebf54:	261c      	movs	r6, #28
 23ebf56:	fb06 f608 	mul.w	r6, r6, r8
 23ebf5a:	19a8      	adds	r0, r5, r6
 23ebf5c:	498a      	ldr	r1, [pc, #552]	; (23ec188 <_Z6OBS_Dov+0x9f8>)
 23ebf5e:	4420      	add	r0, r4
 23ebf60:	f010 ffca 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebf64:	f640 2398 	movw	r3, #2712	; 0xa98
 23ebf68:	9a00      	ldr	r2, [sp, #0]
    h = htu.readHumidity();
 23ebf6a:	4888      	ldr	r0, [pc, #544]	; (23ec18c <_Z6OBS_Dov+0x9fc>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebf6c:	fb03 6302 	mla	r3, r3, r2, r6
 23ebf70:	2200      	movs	r2, #0
 23ebf72:	4423      	add	r3, r4
 23ebf74:	621a      	str	r2, [r3, #32]
    h = htu.readHumidity();
 23ebf76:	f005 fd0d 	bl	23f1994 <_ZN16Adafruit_HTU21DF12readHumidityEv>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ebf7a:	eeb4 0a40 	vcmp.f32	s0, s0
 23ebf7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebf82:	f181 8255 	bvs.w	23ed430 <_Z6OBS_Dov+0x1ca0>
 23ebf86:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23ebf8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebf8e:	f101 824f 	bmi.w	23ed430 <_Z6OBS_Dov+0x1ca0>
 23ebf92:	eddf 7a75 	vldr	s15, [pc, #468]	; 23ec168 <_Z6OBS_Dov+0x9d8>
 23ebf96:	eeb4 0a67 	vcmp.f32	s0, s15
 23ebf9a:	eddf 7a87 	vldr	s15, [pc, #540]	; 23ec1b8 <_Z6OBS_Dov+0xa28>
 23ebf9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebfa2:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = h;
 23ebfa6:	f640 2998 	movw	r9, #2712	; 0xa98
 23ebfaa:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx++].inuse = true;
 23ebfae:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = h;
 23ebfb0:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "ht1");
 23ebfb2:	eb06 000a 	add.w	r0, r6, sl
    obs[oidx].sensor[sidx].f_obs = h;
 23ebfb6:	fb09 f903 	mul.w	r9, r9, r3
 23ebfba:	fb0a 9308 	mla	r3, sl, r8, r9
    strcpy (obs[oidx].sensor[sidx].id, "ht1");
 23ebfbe:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = h;
 23ebfc0:	4423      	add	r3, r4
 23ebfc2:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ebfc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "ht1");
 23ebfca:	4971      	ldr	r1, [pc, #452]	; (23ec190 <_Z6OBS_Dov+0xa00>)
 23ebfcc:	4420      	add	r0, r4
 23ebfce:	f010 ff93 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebfd2:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ebfd4:	f108 0701 	add.w	r7, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebfd8:	fb0a 9907 	mla	r9, sl, r7, r9
 23ebfdc:	44a1      	add	r9, r4
    t = htu.readTemperature();
 23ebfde:	486b      	ldr	r0, [pc, #428]	; (23ec18c <_Z6OBS_Dov+0x9fc>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ebfe0:	f8c9 3020 	str.w	r3, [r9, #32]
    t = htu.readTemperature();
 23ebfe4:	f005 fc96 	bl	23f1914 <_ZN16Adafruit_HTU21DF15readTemperatureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ebfe8:	eeb4 0a40 	vcmp.f32	s0, s0
 23ebfec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebff0:	f181 8222 	bvs.w	23ed438 <_Z6OBS_Dov+0x1ca8>
 23ebff4:	eddf 7a6e 	vldr	s15, [pc, #440]	; 23ec1b0 <_Z6OBS_Dov+0xa20>
 23ebff8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ebffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec000:	f101 821a 	bmi.w	23ed438 <_Z6OBS_Dov+0x1ca8>
 23ec004:	eddf 7a6b 	vldr	s15, [pc, #428]	; 23ec1b4 <_Z6OBS_Dov+0xa24>
 23ec008:	eeb4 0a67 	vcmp.f32	s0, s15
 23ec00c:	eddf 7a6a 	vldr	s15, [pc, #424]	; 23ec1b8 <_Z6OBS_Dov+0xa28>
 23ec010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec014:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23ec018:	f640 2398 	movw	r3, #2712	; 0xa98
 23ec01c:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ec01e:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].f_obs = t;
 23ec022:	4353      	muls	r3, r2
 23ec024:	221c      	movs	r2, #28
 23ec026:	fb02 3307 	mla	r3, r2, r7, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23ec02a:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23ec02c:	4423      	add	r3, r4
 23ec02e:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ec032:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  if (SHT_1_exists) {
 23ec036:	4b57      	ldr	r3, [pc, #348]	; (23ec194 <_Z6OBS_Dov+0xa04>)
 23ec038:	781b      	ldrb	r3, [r3, #0]
 23ec03a:	2b00      	cmp	r3, #0
 23ec03c:	f001 8208 	beq.w	23ed450 <_Z6OBS_Dov+0x1cc0>
    strcpy (obs[oidx].sensor[sidx].id, "st1");
 23ec040:	261c      	movs	r6, #28
 23ec042:	fb06 f608 	mul.w	r6, r6, r8
 23ec046:	19a8      	adds	r0, r5, r6
 23ec048:	4953      	ldr	r1, [pc, #332]	; (23ec198 <_Z6OBS_Dov+0xa08>)
 23ec04a:	4420      	add	r0, r4
 23ec04c:	f010 ff54 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec050:	f640 2398 	movw	r3, #2712	; 0xa98
 23ec054:	9a00      	ldr	r2, [sp, #0]
    t = sht1.readTemperature();
 23ec056:	4851      	ldr	r0, [pc, #324]	; (23ec19c <_Z6OBS_Dov+0xa0c>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec058:	fb03 6302 	mla	r3, r3, r2, r6
 23ec05c:	2200      	movs	r2, #0
 23ec05e:	4423      	add	r3, r4
 23ec060:	621a      	str	r2, [r3, #32]
    t = sht1.readTemperature();
 23ec062:	f006 f80b 	bl	23f207c <_ZN14Adafruit_SHT3115readTemperatureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec066:	eeb4 0a40 	vcmp.f32	s0, s0
 23ec06a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec06e:	f181 81e7 	bvs.w	23ed440 <_Z6OBS_Dov+0x1cb0>
 23ec072:	eddf 7a4f 	vldr	s15, [pc, #316]	; 23ec1b0 <_Z6OBS_Dov+0xa20>
 23ec076:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ec07a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec07e:	f101 81df 	bmi.w	23ed440 <_Z6OBS_Dov+0x1cb0>
 23ec082:	eddf 7a4c 	vldr	s15, [pc, #304]	; 23ec1b4 <_Z6OBS_Dov+0xa24>
 23ec086:	eeb4 0a67 	vcmp.f32	s0, s15
 23ec08a:	eddf 7a4b 	vldr	s15, [pc, #300]	; 23ec1b8 <_Z6OBS_Dov+0xa28>
 23ec08e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec092:	fe37 8a80 	vselgt.f32	s16, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23ec096:	f640 2998 	movw	r9, #2712	; 0xa98
 23ec09a:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx++].inuse = true;
 23ec09e:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23ec0a0:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "sh1");
 23ec0a2:	eb06 000a 	add.w	r0, r6, sl
    obs[oidx].sensor[sidx].f_obs = t;
 23ec0a6:	fb09 f903 	mul.w	r9, r9, r3
 23ec0aa:	fb0a 9308 	mla	r3, sl, r8, r9
    strcpy (obs[oidx].sensor[sidx].id, "sh1");
 23ec0ae:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = t;
 23ec0b0:	4423      	add	r3, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ec0b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    obs[oidx].sensor[sidx].f_obs = t;
 23ec0b6:	ed83 8a09 	vstr	s16, [r3, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "sh1");
 23ec0ba:	4939      	ldr	r1, [pc, #228]	; (23ec1a0 <_Z6OBS_Dov+0xa10>)
 23ec0bc:	4420      	add	r0, r4
 23ec0be:	f010 ff1b 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec0c2:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ec0c4:	f108 0701 	add.w	r7, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec0c8:	fb0a 9907 	mla	r9, sl, r7, r9
 23ec0cc:	44a1      	add	r9, r4
    h = sht1.readHumidity();
 23ec0ce:	4833      	ldr	r0, [pc, #204]	; (23ec19c <_Z6OBS_Dov+0xa0c>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec0d0:	f8c9 3020 	str.w	r3, [r9, #32]
    h = sht1.readHumidity();
 23ec0d4:	f005 ffe0 	bl	23f2098 <_ZN14Adafruit_SHT3112readHumidityEv>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ec0d8:	eeb4 0a40 	vcmp.f32	s0, s0
 23ec0dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec0e0:	f181 81b2 	bvs.w	23ed448 <_Z6OBS_Dov+0x1cb8>
 23ec0e4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23ec0e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec0ec:	f101 81ac 	bmi.w	23ed448 <_Z6OBS_Dov+0x1cb8>
 23ec0f0:	eddf 7a1d 	vldr	s15, [pc, #116]	; 23ec168 <_Z6OBS_Dov+0x9d8>
 23ec0f4:	eeb4 0a67 	vcmp.f32	s0, s15
 23ec0f8:	eddf 7a2f 	vldr	s15, [pc, #188]	; 23ec1b8 <_Z6OBS_Dov+0xa28>
 23ec0fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec100:	fe77 9a80 	vselgt.f32	s19, s15, s0
    obs[oidx].sensor[sidx].f_obs = h;
 23ec104:	f640 2398 	movw	r3, #2712	; 0xa98
 23ec108:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ec10a:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].f_obs = h;
 23ec10e:	4353      	muls	r3, r2
 23ec110:	221c      	movs	r2, #28
 23ec112:	fb02 3307 	mla	r3, r2, r7, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23ec116:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = h;
 23ec118:	4423      	add	r3, r4
 23ec11a:	edc3 9a09 	vstr	s19, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ec11e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  if (SHT_2_exists) {
 23ec122:	4b20      	ldr	r3, [pc, #128]	; (23ec1a4 <_Z6OBS_Dov+0xa14>)
 23ec124:	781b      	ldrb	r3, [r3, #0]
 23ec126:	2b00      	cmp	r3, #0
 23ec128:	f000 80a0 	beq.w	23ec26c <_Z6OBS_Dov+0xadc>
    strcpy (obs[oidx].sensor[sidx].id, "st2");
 23ec12c:	261c      	movs	r6, #28
 23ec12e:	fb06 f608 	mul.w	r6, r6, r8
 23ec132:	19a8      	adds	r0, r5, r6
 23ec134:	491c      	ldr	r1, [pc, #112]	; (23ec1a8 <_Z6OBS_Dov+0xa18>)
 23ec136:	4420      	add	r0, r4
 23ec138:	f010 fede 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec13c:	f640 2398 	movw	r3, #2712	; 0xa98
 23ec140:	9a00      	ldr	r2, [sp, #0]
    t = sht2.readTemperature();
 23ec142:	481a      	ldr	r0, [pc, #104]	; (23ec1ac <_Z6OBS_Dov+0xa1c>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec144:	fb03 6302 	mla	r3, r3, r2, r6
 23ec148:	2200      	movs	r2, #0
 23ec14a:	4423      	add	r3, r4
 23ec14c:	621a      	str	r2, [r3, #32]
    t = sht2.readTemperature();
 23ec14e:	f005 ff95 	bl	23f207c <_ZN14Adafruit_SHT3115readTemperatureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec152:	eeb4 0a40 	vcmp.f32	s0, s0
 23ec156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec15a:	f181 817f 	bvs.w	23ed45c <_Z6OBS_Dov+0x1ccc>
 23ec15e:	e02d      	b.n	23ec1bc <_Z6OBS_Dov+0xa2c>
 23ec160:	1006a2be 	.word	0x1006a2be
 23ec164:	1006abb8 	.word	0x1006abb8
 23ec168:	42c80000 	.word	0x42c80000
 23ec16c:	1006aa60 	.word	0x1006aa60
 23ec170:	43960000 	.word	0x43960000
 23ec174:	44898000 	.word	0x44898000
 23ec178:	023fe4ce 	.word	0x023fe4ce
 23ec17c:	023fe4d2 	.word	0x023fe4d2
 23ec180:	023fe4d6 	.word	0x023fe4d6
 23ec184:	1006a2e8 	.word	0x1006a2e8
 23ec188:	023fe4da 	.word	0x023fe4da
 23ec18c:	1006aea8 	.word	0x1006aea8
 23ec190:	023fe4de 	.word	0x023fe4de
 23ec194:	1006a808 	.word	0x1006a808
 23ec198:	023fe4e2 	.word	0x023fe4e2
 23ec19c:	1007abb8 	.word	0x1007abb8
 23ec1a0:	023fe4e6 	.word	0x023fe4e6
 23ec1a4:	1006a809 	.word	0x1006a809
 23ec1a8:	023fe4ea 	.word	0x023fe4ea
 23ec1ac:	1007abc8 	.word	0x1007abc8
 23ec1b0:	c2200000 	.word	0xc2200000
 23ec1b4:	42700000 	.word	0x42700000
 23ec1b8:	c479f99a 	.word	0xc479f99a
 23ec1bc:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 23ec1b0 <_Z6OBS_Dov+0xa20>
 23ec1c0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ec1c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec1c8:	f101 8148 	bmi.w	23ed45c <_Z6OBS_Dov+0x1ccc>
 23ec1cc:	ed5f 7a07 	vldr	s15, [pc, #-28]	; 23ec1b4 <_Z6OBS_Dov+0xa24>
 23ec1d0:	eeb4 0a67 	vcmp.f32	s0, s15
 23ec1d4:	ed5f 7a08 	vldr	s15, [pc, #-32]	; 23ec1b8 <_Z6OBS_Dov+0xa28>
 23ec1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec1dc:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23ec1e0:	f640 2998 	movw	r9, #2712	; 0xa98
 23ec1e4:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx++].inuse = true;
 23ec1e8:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23ec1ea:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "sh2");
 23ec1ec:	eb06 000a 	add.w	r0, r6, sl
    obs[oidx].sensor[sidx].f_obs = t;
 23ec1f0:	fb09 f903 	mul.w	r9, r9, r3
 23ec1f4:	fb0a 9308 	mla	r3, sl, r8, r9
    strcpy (obs[oidx].sensor[sidx].id, "sh2");
 23ec1f8:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = t;
 23ec1fa:	4423      	add	r3, r4
 23ec1fc:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ec200:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "sh2");
 23ec204:	49ce      	ldr	r1, [pc, #824]	; (23ec540 <_Z6OBS_Dov+0xdb0>)
 23ec206:	4420      	add	r0, r4
 23ec208:	f010 fe76 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec20c:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ec20e:	f108 0701 	add.w	r7, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec212:	fb0a 9907 	mla	r9, sl, r7, r9
 23ec216:	44a1      	add	r9, r4
    h = sht2.readHumidity();
 23ec218:	48ca      	ldr	r0, [pc, #808]	; (23ec544 <_Z6OBS_Dov+0xdb4>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec21a:	f8c9 3020 	str.w	r3, [r9, #32]
    h = sht2.readHumidity();
 23ec21e:	f005 ff3b 	bl	23f2098 <_ZN14Adafruit_SHT3112readHumidityEv>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ec222:	eeb4 0a40 	vcmp.f32	s0, s0
 23ec226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec22a:	f181 811b 	bvs.w	23ed464 <_Z6OBS_Dov+0x1cd4>
 23ec22e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23ec232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec236:	f101 8115 	bmi.w	23ed464 <_Z6OBS_Dov+0x1cd4>
 23ec23a:	eddf 7ac3 	vldr	s15, [pc, #780]	; 23ec548 <_Z6OBS_Dov+0xdb8>
 23ec23e:	eeb4 0a67 	vcmp.f32	s0, s15
 23ec242:	eddf 7ac2 	vldr	s15, [pc, #776]	; 23ec54c <_Z6OBS_Dov+0xdbc>
 23ec246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec24a:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = h;
 23ec24e:	f640 2398 	movw	r3, #2712	; 0xa98
 23ec252:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ec254:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].f_obs = h;
 23ec258:	4353      	muls	r3, r2
 23ec25a:	221c      	movs	r2, #28
 23ec25c:	fb02 3307 	mla	r3, r2, r7, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23ec260:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = h;
 23ec262:	4423      	add	r3, r4
 23ec264:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ec268:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  if (HDC_1_exists) {
 23ec26c:	4bb8      	ldr	r3, [pc, #736]	; (23ec550 <_Z6OBS_Dov+0xdc0>)
 23ec26e:	f8df b324 	ldr.w	fp, [pc, #804]	; 23ec594 <_Z6OBS_Dov+0xe04>
 23ec272:	781b      	ldrb	r3, [r3, #0]
 23ec274:	2b00      	cmp	r3, #0
 23ec276:	f000 808d 	beq.w	23ec394 <_Z6OBS_Dov+0xc04>
    double t = -999.9;
 23ec27a:	f20f 2abc 	addw	sl, pc, #700	; 0x2bc
 23ec27e:	e9da 9a00 	ldrd	r9, sl, [sl]
    if (hdc1.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0)) {
 23ec282:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 23ec286:	48b3      	ldr	r0, [pc, #716]	; (23ec554 <_Z6OBS_Dov+0xdc4>)
 23ec288:	aa0c      	add	r2, sp, #48	; 0x30
 23ec28a:	a902      	add	r1, sp, #8
    double t = -999.9;
 23ec28c:	e9cd 9a02 	strd	r9, sl, [sp, #8]
    double h = -999.9;
 23ec290:	e9cd 9a0c 	strd	r9, sl, [sp, #48]	; 0x30
    if (hdc1.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0)) {
 23ec294:	f005 fa8c 	bl	23f17b0 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>
 23ec298:	2800      	cmp	r0, #0
 23ec29a:	f001 8123 	beq.w	23ed4e4 <_Z6OBS_Dov+0x1d54>
      t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec29e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 23ec2a2:	4632      	mov	r2, r6
 23ec2a4:	463b      	mov	r3, r7
 23ec2a6:	4630      	mov	r0, r6
 23ec2a8:	4639      	mov	r1, r7
 23ec2aa:	f7f9 faff 	bl	23e58ac <__aeabi_dcmpun>
 23ec2ae:	2800      	cmp	r0, #0
 23ec2b0:	f041 80dc 	bne.w	23ed46c <_Z6OBS_Dov+0x1cdc>
 23ec2b4:	2200      	movs	r2, #0
 23ec2b6:	4630      	mov	r0, r6
 23ec2b8:	4639      	mov	r1, r7
 23ec2ba:	4ba7      	ldr	r3, [pc, #668]	; (23ec558 <_Z6OBS_Dov+0xdc8>)
 23ec2bc:	f7f9 face 	bl	23e585c <__aeabi_dcmplt>
 23ec2c0:	2800      	cmp	r0, #0
 23ec2c2:	f041 80d3 	bne.w	23ed46c <_Z6OBS_Dov+0x1cdc>
 23ec2c6:	2200      	movs	r2, #0
 23ec2c8:	4630      	mov	r0, r6
 23ec2ca:	4639      	mov	r1, r7
 23ec2cc:	4ba3      	ldr	r3, [pc, #652]	; (23ec55c <_Z6OBS_Dov+0xdcc>)
 23ec2ce:	f7f9 fae3 	bl	23e5898 <__aeabi_dcmpgt>
 23ec2d2:	2800      	cmp	r0, #0
 23ec2d4:	f041 80ca 	bne.w	23ed46c <_Z6OBS_Dov+0x1cdc>
 23ec2d8:	e9cd 6702 	strd	r6, r7, [sp, #8]
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ec2dc:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 23ec2e0:	4632      	mov	r2, r6
 23ec2e2:	463b      	mov	r3, r7
 23ec2e4:	4630      	mov	r0, r6
 23ec2e6:	4639      	mov	r1, r7
 23ec2e8:	f7f9 fae0 	bl	23e58ac <__aeabi_dcmpun>
 23ec2ec:	2800      	cmp	r0, #0
 23ec2ee:	f041 80c1 	bne.w	23ed474 <_Z6OBS_Dov+0x1ce4>
 23ec2f2:	2200      	movs	r2, #0
 23ec2f4:	2300      	movs	r3, #0
 23ec2f6:	4630      	mov	r0, r6
 23ec2f8:	4639      	mov	r1, r7
 23ec2fa:	f7f9 faaf 	bl	23e585c <__aeabi_dcmplt>
 23ec2fe:	2800      	cmp	r0, #0
 23ec300:	f041 80b8 	bne.w	23ed474 <_Z6OBS_Dov+0x1ce4>
 23ec304:	2200      	movs	r2, #0
 23ec306:	4630      	mov	r0, r6
 23ec308:	4639      	mov	r1, r7
 23ec30a:	4b95      	ldr	r3, [pc, #596]	; (23ec560 <_Z6OBS_Dov+0xdd0>)
 23ec30c:	f7f9 fac4 	bl	23e5898 <__aeabi_dcmpgt>
 23ec310:	2800      	cmp	r0, #0
 23ec312:	f041 80af 	bne.w	23ed474 <_Z6OBS_Dov+0x1ce4>
      SystemStatusBits &= ~ SSB_HDC_1;  // Turn Off Bit
 23ec316:	f8db 3000 	ldr.w	r3, [fp]
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ec31a:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
      SystemStatusBits &= ~ SSB_HDC_1;  // Turn Off Bit
 23ec31e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
      SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
 23ec322:	f8cb 3000 	str.w	r3, [fp]
    strcpy (obs[oidx].sensor[sidx].id, "hdt1");
 23ec326:	231c      	movs	r3, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec328:	f640 2698 	movw	r6, #2712	; 0xa98
 23ec32c:	fb03 f708 	mul.w	r7, r3, r8
    strcpy (obs[oidx].sensor[sidx].id, "hdt1");
 23ec330:	19e8      	adds	r0, r5, r7
 23ec332:	498c      	ldr	r1, [pc, #560]	; (23ec564 <_Z6OBS_Dov+0xdd4>)
 23ec334:	4420      	add	r0, r4
 23ec336:	f010 fddf 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23ec33a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec33e:	2200      	movs	r2, #0
 23ec340:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ec342:	f04f 0a01 	mov.w	sl, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec346:	435e      	muls	r6, r3
 23ec348:	eb07 0906 	add.w	r9, r7, r6
 23ec34c:	44a1      	add	r9, r4
 23ec34e:	f8c9 2020 	str.w	r2, [r9, #32]
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23ec352:	f7f9 fb09 	bl	23e5968 <__aeabi_d2f>
 23ec356:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "hdh1");
 23ec35a:	f107 001c 	add.w	r0, r7, #28
 23ec35e:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23ec360:	f108 0301 	add.w	r3, r8, #1
    strcpy (obs[oidx].sensor[sidx].id, "hdh1");
 23ec364:	4980      	ldr	r1, [pc, #512]	; (23ec568 <_Z6OBS_Dov+0xdd8>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ec366:	f889 a030 	strb.w	sl, [r9, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "hdh1");
 23ec36a:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ec36c:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "hdh1");
 23ec36e:	f010 fdc3 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23ec372:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec376:	9b01      	ldr	r3, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23ec378:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec37c:	461a      	mov	r2, r3
 23ec37e:	231c      	movs	r3, #28
 23ec380:	fb03 6602 	mla	r6, r3, r2, r6
 23ec384:	2200      	movs	r2, #0
 23ec386:	4426      	add	r6, r4
 23ec388:	6232      	str	r2, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23ec38a:	f7f9 faed 	bl	23e5968 <__aeabi_d2f>
    obs[oidx].sensor[sidx++].inuse = true;
 23ec38e:	f886 a030 	strb.w	sl, [r6, #48]	; 0x30
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23ec392:	6270      	str	r0, [r6, #36]	; 0x24
  if (HDC_2_exists) {
 23ec394:	4b75      	ldr	r3, [pc, #468]	; (23ec56c <_Z6OBS_Dov+0xddc>)
 23ec396:	781b      	ldrb	r3, [r3, #0]
 23ec398:	2b00      	cmp	r3, #0
 23ec39a:	f000 808d 	beq.w	23ec4b8 <_Z6OBS_Dov+0xd28>
    double t = -999.9;
 23ec39e:	f20f 1a98 	addw	sl, pc, #408	; 0x198
 23ec3a2:	e9da 9a00 	ldrd	r9, sl, [sl]
    if (hdc2.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0)) {
 23ec3a6:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 23ec3aa:	4871      	ldr	r0, [pc, #452]	; (23ec570 <_Z6OBS_Dov+0xde0>)
 23ec3ac:	aa0c      	add	r2, sp, #48	; 0x30
 23ec3ae:	a902      	add	r1, sp, #8
    double t = -999.9;
 23ec3b0:	e9cd 9a02 	strd	r9, sl, [sp, #8]
    double h = -999.9;
 23ec3b4:	e9cd 9a0c 	strd	r9, sl, [sp, #48]	; 0x30
    if (hdc2.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0)) {
 23ec3b8:	f005 f9fa 	bl	23f17b0 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>
 23ec3bc:	2800      	cmp	r0, #0
 23ec3be:	f001 80a3 	beq.w	23ed508 <_Z6OBS_Dov+0x1d78>
      t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec3c2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 23ec3c6:	4632      	mov	r2, r6
 23ec3c8:	463b      	mov	r3, r7
 23ec3ca:	4630      	mov	r0, r6
 23ec3cc:	4639      	mov	r1, r7
 23ec3ce:	f7f9 fa6d 	bl	23e58ac <__aeabi_dcmpun>
 23ec3d2:	2800      	cmp	r0, #0
 23ec3d4:	f041 808f 	bne.w	23ed4f6 <_Z6OBS_Dov+0x1d66>
 23ec3d8:	2200      	movs	r2, #0
 23ec3da:	4630      	mov	r0, r6
 23ec3dc:	4639      	mov	r1, r7
 23ec3de:	4b5e      	ldr	r3, [pc, #376]	; (23ec558 <_Z6OBS_Dov+0xdc8>)
 23ec3e0:	f7f9 fa3c 	bl	23e585c <__aeabi_dcmplt>
 23ec3e4:	2800      	cmp	r0, #0
 23ec3e6:	f041 8086 	bne.w	23ed4f6 <_Z6OBS_Dov+0x1d66>
 23ec3ea:	2200      	movs	r2, #0
 23ec3ec:	4630      	mov	r0, r6
 23ec3ee:	4639      	mov	r1, r7
 23ec3f0:	4b5a      	ldr	r3, [pc, #360]	; (23ec55c <_Z6OBS_Dov+0xdcc>)
 23ec3f2:	f7f9 fa51 	bl	23e5898 <__aeabi_dcmpgt>
 23ec3f6:	2800      	cmp	r0, #0
 23ec3f8:	f041 807d 	bne.w	23ed4f6 <_Z6OBS_Dov+0x1d66>
 23ec3fc:	e9cd 6702 	strd	r6, r7, [sp, #8]
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ec400:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 23ec404:	4632      	mov	r2, r6
 23ec406:	463b      	mov	r3, r7
 23ec408:	4630      	mov	r0, r6
 23ec40a:	4639      	mov	r1, r7
 23ec40c:	f7f9 fa4e 	bl	23e58ac <__aeabi_dcmpun>
 23ec410:	2800      	cmp	r0, #0
 23ec412:	f041 8074 	bne.w	23ed4fe <_Z6OBS_Dov+0x1d6e>
 23ec416:	2200      	movs	r2, #0
 23ec418:	2300      	movs	r3, #0
 23ec41a:	4630      	mov	r0, r6
 23ec41c:	4639      	mov	r1, r7
 23ec41e:	f7f9 fa1d 	bl	23e585c <__aeabi_dcmplt>
 23ec422:	2800      	cmp	r0, #0
 23ec424:	f041 806b 	bne.w	23ed4fe <_Z6OBS_Dov+0x1d6e>
 23ec428:	2200      	movs	r2, #0
 23ec42a:	4630      	mov	r0, r6
 23ec42c:	4639      	mov	r1, r7
 23ec42e:	4b4c      	ldr	r3, [pc, #304]	; (23ec560 <_Z6OBS_Dov+0xdd0>)
 23ec430:	f7f9 fa32 	bl	23e5898 <__aeabi_dcmpgt>
 23ec434:	2800      	cmp	r0, #0
 23ec436:	f041 8062 	bne.w	23ed4fe <_Z6OBS_Dov+0x1d6e>
      SystemStatusBits &= ~ SSB_HDC_2;  // Turn Off Bit
 23ec43a:	f8db 3000 	ldr.w	r3, [fp]
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ec43e:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
      SystemStatusBits &= ~ SSB_HDC_2;  // Turn Off Bit
 23ec442:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
      SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
 23ec446:	f8cb 3000 	str.w	r3, [fp]
    strcpy (obs[oidx].sensor[sidx].id, "hdt2");
 23ec44a:	231c      	movs	r3, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec44c:	f640 2698 	movw	r6, #2712	; 0xa98
 23ec450:	fb03 f708 	mul.w	r7, r3, r8
    strcpy (obs[oidx].sensor[sidx].id, "hdt2");
 23ec454:	19e8      	adds	r0, r5, r7
 23ec456:	4947      	ldr	r1, [pc, #284]	; (23ec574 <_Z6OBS_Dov+0xde4>)
 23ec458:	4420      	add	r0, r4
 23ec45a:	f010 fd4d 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23ec45e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec462:	2200      	movs	r2, #0
 23ec464:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ec466:	f04f 0a01 	mov.w	sl, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec46a:	435e      	muls	r6, r3
 23ec46c:	eb07 0906 	add.w	r9, r7, r6
 23ec470:	44a1      	add	r9, r4
 23ec472:	f8c9 2020 	str.w	r2, [r9, #32]
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23ec476:	f7f9 fa77 	bl	23e5968 <__aeabi_d2f>
 23ec47a:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "hdh2");
 23ec47e:	f107 001c 	add.w	r0, r7, #28
 23ec482:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23ec484:	f108 0301 	add.w	r3, r8, #1
    strcpy (obs[oidx].sensor[sidx].id, "hdh2");
 23ec488:	493b      	ldr	r1, [pc, #236]	; (23ec578 <_Z6OBS_Dov+0xde8>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ec48a:	f889 a030 	strb.w	sl, [r9, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "hdh2");
 23ec48e:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ec490:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "hdh2");
 23ec492:	f010 fd31 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23ec496:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec49a:	9b01      	ldr	r3, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23ec49c:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec4a0:	461a      	mov	r2, r3
 23ec4a2:	231c      	movs	r3, #28
 23ec4a4:	fb03 6602 	mla	r6, r3, r2, r6
 23ec4a8:	2200      	movs	r2, #0
 23ec4aa:	4426      	add	r6, r4
 23ec4ac:	6232      	str	r2, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23ec4ae:	f7f9 fa5b 	bl	23e5968 <__aeabi_d2f>
    obs[oidx].sensor[sidx++].inuse = true;
 23ec4b2:	f886 a030 	strb.w	sl, [r6, #48]	; 0x30
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23ec4b6:	6270      	str	r0, [r6, #36]	; 0x24
  if (LPS_1_exists) {
 23ec4b8:	4b30      	ldr	r3, [pc, #192]	; (23ec57c <_Z6OBS_Dov+0xdec>)
 23ec4ba:	781b      	ldrb	r3, [r3, #0]
 23ec4bc:	2b00      	cmp	r3, #0
 23ec4be:	f000 809a 	beq.w	23ec5f6 <_Z6OBS_Dov+0xe66>
    float t = lps1.readTemperature();
 23ec4c2:	482f      	ldr	r0, [pc, #188]	; (23ec580 <_Z6OBS_Dov+0xdf0>)
 23ec4c4:	f005 fabc 	bl	23f1a40 <_ZN16Adafruit_LPS35HW15readTemperatureEv>
 23ec4c8:	eeb0 aa40 	vmov.f32	s20, s0
    float p = lps1.readPressure();
 23ec4cc:	482c      	ldr	r0, [pc, #176]	; (23ec580 <_Z6OBS_Dov+0xdf0>)
 23ec4ce:	f005 fad9 	bl	23f1a84 <_ZN16Adafruit_LPS35HW12readPressureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec4d2:	eeb4 aa4a 	vcmp.f32	s20, s20
 23ec4d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float p = lps1.readPressure();
 23ec4da:	eef0 8a40 	vmov.f32	s17, s0
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec4de:	f181 801c 	bvs.w	23ed51a <_Z6OBS_Dov+0x1d8a>
 23ec4e2:	eddf 7a28 	vldr	s15, [pc, #160]	; 23ec584 <_Z6OBS_Dov+0xdf4>
 23ec4e6:	eeb4 aae7 	vcmpe.f32	s20, s15
 23ec4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec4ee:	f101 8014 	bmi.w	23ed51a <_Z6OBS_Dov+0x1d8a>
 23ec4f2:	eddf 7a25 	vldr	s15, [pc, #148]	; 23ec588 <_Z6OBS_Dov+0xdf8>
 23ec4f6:	eeb4 aa67 	vcmp.f32	s20, s15
 23ec4fa:	eddf 7a14 	vldr	s15, [pc, #80]	; 23ec54c <_Z6OBS_Dov+0xdbc>
 23ec4fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec502:	fe37 aa8a 	vselgt.f32	s20, s15, s20
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23ec506:	eef4 8a68 	vcmp.f32	s17, s17
 23ec50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec50e:	f181 8008 	bvs.w	23ed522 <_Z6OBS_Dov+0x1d92>
 23ec512:	eddf 7a1e 	vldr	s15, [pc, #120]	; 23ec58c <_Z6OBS_Dov+0xdfc>
 23ec516:	eef4 8ae7 	vcmpe.f32	s17, s15
 23ec51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec51e:	f101 8000 	bmi.w	23ed522 <_Z6OBS_Dov+0x1d92>
 23ec522:	eddf 7a1b 	vldr	s15, [pc, #108]	; 23ec590 <_Z6OBS_Dov+0xe00>
 23ec526:	eef4 8a67 	vcmp.f32	s17, s15
 23ec52a:	eddf 7a08 	vldr	s15, [pc, #32]	; 23ec54c <_Z6OBS_Dov+0xdbc>
 23ec52e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec532:	fe77 8aa8 	vselgt.f32	s17, s15, s17
 23ec536:	e02f      	b.n	23ec598 <_Z6OBS_Dov+0xe08>
 23ec538:	33333333 	.word	0x33333333
 23ec53c:	c08f3f33 	.word	0xc08f3f33
 23ec540:	023fe4ee 	.word	0x023fe4ee
 23ec544:	1007abc8 	.word	0x1007abc8
 23ec548:	42c80000 	.word	0x42c80000
 23ec54c:	c479f99a 	.word	0xc479f99a
 23ec550:	1006a2e4 	.word	0x1006a2e4
 23ec554:	1006ae98 	.word	0x1006ae98
 23ec558:	c0440000 	.word	0xc0440000
 23ec55c:	404e0000 	.word	0x404e0000
 23ec560:	40590000 	.word	0x40590000
 23ec564:	023fe500 	.word	0x023fe500
 23ec568:	023fe505 	.word	0x023fe505
 23ec56c:	1006a2e5 	.word	0x1006a2e5
 23ec570:	1006aea0 	.word	0x1006aea0
 23ec574:	023fe50a 	.word	0x023fe50a
 23ec578:	023fe50f 	.word	0x023fe50f
 23ec57c:	1006a2ea 	.word	0x1006a2ea
 23ec580:	1006f0d8 	.word	0x1006f0d8
 23ec584:	c2200000 	.word	0xc2200000
 23ec588:	42700000 	.word	0x42700000
 23ec58c:	43960000 	.word	0x43960000
 23ec590:	44898000 	.word	0x44898000
 23ec594:	1006a1cc 	.word	0x1006a1cc
    strcpy (obs[oidx].sensor[sidx].id, "lpt1");
 23ec598:	231c      	movs	r3, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec59a:	f640 2698 	movw	r6, #2712	; 0xa98
 23ec59e:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ec5a2:	f04f 0901 	mov.w	r9, #1
 23ec5a6:	fb03 f708 	mul.w	r7, r3, r8
    strcpy (obs[oidx].sensor[sidx].id, "lpt1");
 23ec5aa:	19e8      	adds	r0, r5, r7
 23ec5ac:	49d7      	ldr	r1, [pc, #860]	; (23ec90c <_Z6OBS_Dov+0x117c>)
 23ec5ae:	4420      	add	r0, r4
 23ec5b0:	f010 fca2 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec5b4:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "lpp1");
 23ec5b6:	f107 001c 	add.w	r0, r7, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec5ba:	435e      	muls	r6, r3
 23ec5bc:	19b9      	adds	r1, r7, r6
 23ec5be:	4421      	add	r1, r4
    strcpy (obs[oidx].sensor[sidx].id, "lpp1");
 23ec5c0:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23ec5c2:	f108 0201 	add.w	r2, r8, #1
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23ec5c6:	ed81 aa09 	vstr	s20, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec5ca:	f8c1 a020 	str.w	sl, [r1, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ec5ce:	f881 9030 	strb.w	r9, [r1, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "lpp1");
 23ec5d2:	4420      	add	r0, r4
 23ec5d4:	49ce      	ldr	r1, [pc, #824]	; (23ec910 <_Z6OBS_Dov+0x1180>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ec5d6:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "lpp1");
 23ec5d8:	f010 fc8e 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec5dc:	231c      	movs	r3, #28
 23ec5de:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23ec5e0:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec5e4:	fb03 6602 	mla	r6, r3, r2, r6
 23ec5e8:	4426      	add	r6, r4
    obs[oidx].sensor[sidx].f_obs = (float) p;
 23ec5ea:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec5ee:	f8c6 a020 	str.w	sl, [r6, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ec5f2:	f886 9030 	strb.w	r9, [r6, #48]	; 0x30
  if (LPS_2_exists) {
 23ec5f6:	4bc7      	ldr	r3, [pc, #796]	; (23ec914 <_Z6OBS_Dov+0x1184>)
 23ec5f8:	781b      	ldrb	r3, [r3, #0]
 23ec5fa:	2b00      	cmp	r3, #0
 23ec5fc:	d068      	beq.n	23ec6d0 <_Z6OBS_Dov+0xf40>
    float t = lps2.readTemperature();
 23ec5fe:	48c6      	ldr	r0, [pc, #792]	; (23ec918 <_Z6OBS_Dov+0x1188>)
 23ec600:	f005 fa1e 	bl	23f1a40 <_ZN16Adafruit_LPS35HW15readTemperatureEv>
 23ec604:	eeb0 aa40 	vmov.f32	s20, s0
    float p = lps2.readPressure();
 23ec608:	48c3      	ldr	r0, [pc, #780]	; (23ec918 <_Z6OBS_Dov+0x1188>)
 23ec60a:	f005 fa3b 	bl	23f1a84 <_ZN16Adafruit_LPS35HW12readPressureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec60e:	eeb4 aa4a 	vcmp.f32	s20, s20
 23ec612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float p = lps2.readPressure();
 23ec616:	eef0 8a40 	vmov.f32	s17, s0
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec61a:	f180 8786 	bvs.w	23ed52a <_Z6OBS_Dov+0x1d9a>
 23ec61e:	eddf 7abf 	vldr	s15, [pc, #764]	; 23ec91c <_Z6OBS_Dov+0x118c>
 23ec622:	eeb4 aae7 	vcmpe.f32	s20, s15
 23ec626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec62a:	f100 877e 	bmi.w	23ed52a <_Z6OBS_Dov+0x1d9a>
 23ec62e:	eddf 7abc 	vldr	s15, [pc, #752]	; 23ec920 <_Z6OBS_Dov+0x1190>
 23ec632:	eeb4 aa67 	vcmp.f32	s20, s15
 23ec636:	eddf 7abb 	vldr	s15, [pc, #748]	; 23ec924 <_Z6OBS_Dov+0x1194>
 23ec63a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec63e:	fe37 aa8a 	vselgt.f32	s20, s15, s20
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23ec642:	eef4 8a68 	vcmp.f32	s17, s17
 23ec646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec64a:	f180 8772 	bvs.w	23ed532 <_Z6OBS_Dov+0x1da2>
 23ec64e:	eddf 7ab6 	vldr	s15, [pc, #728]	; 23ec928 <_Z6OBS_Dov+0x1198>
 23ec652:	eef4 8ae7 	vcmpe.f32	s17, s15
 23ec656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec65a:	f100 876a 	bmi.w	23ed532 <_Z6OBS_Dov+0x1da2>
 23ec65e:	eddf 7ab3 	vldr	s15, [pc, #716]	; 23ec92c <_Z6OBS_Dov+0x119c>
 23ec662:	eef4 8a67 	vcmp.f32	s17, s15
 23ec666:	eddf 7aaf 	vldr	s15, [pc, #700]	; 23ec924 <_Z6OBS_Dov+0x1194>
 23ec66a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec66e:	fe77 8aa8 	vselgt.f32	s17, s15, s17
    strcpy (obs[oidx].sensor[sidx].id, "lpt2");
 23ec672:	231c      	movs	r3, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec674:	f640 2698 	movw	r6, #2712	; 0xa98
 23ec678:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ec67c:	f04f 0901 	mov.w	r9, #1
 23ec680:	fb03 f708 	mul.w	r7, r3, r8
    strcpy (obs[oidx].sensor[sidx].id, "lpt2");
 23ec684:	19e8      	adds	r0, r5, r7
 23ec686:	49aa      	ldr	r1, [pc, #680]	; (23ec930 <_Z6OBS_Dov+0x11a0>)
 23ec688:	4420      	add	r0, r4
 23ec68a:	f010 fc35 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec68e:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "lpp2");
 23ec690:	f107 001c 	add.w	r0, r7, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec694:	435e      	muls	r6, r3
 23ec696:	19b9      	adds	r1, r7, r6
 23ec698:	4421      	add	r1, r4
    strcpy (obs[oidx].sensor[sidx].id, "lpp2");
 23ec69a:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23ec69c:	f108 0201 	add.w	r2, r8, #1
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23ec6a0:	ed81 aa09 	vstr	s20, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec6a4:	f8c1 a020 	str.w	sl, [r1, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ec6a8:	f881 9030 	strb.w	r9, [r1, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "lpp2");
 23ec6ac:	4420      	add	r0, r4
 23ec6ae:	49a1      	ldr	r1, [pc, #644]	; (23ec934 <_Z6OBS_Dov+0x11a4>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ec6b0:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "lpp2");
 23ec6b2:	f010 fc21 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec6b6:	231c      	movs	r3, #28
 23ec6b8:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23ec6ba:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec6be:	fb03 6602 	mla	r6, r3, r2, r6
 23ec6c2:	4426      	add	r6, r4
    obs[oidx].sensor[sidx].f_obs = (float) p;
 23ec6c4:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec6c8:	f8c6 a020 	str.w	sl, [r6, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ec6cc:	f886 9030 	strb.w	r9, [r6, #48]	; 0x30
  if (HIH8_exists) {
 23ec6d0:	4b99      	ldr	r3, [pc, #612]	; (23ec938 <_Z6OBS_Dov+0x11a8>)
 23ec6d2:	781b      	ldrb	r3, [r3, #0]
 23ec6d4:	2b00      	cmp	r3, #0
 23ec6d6:	d06b      	beq.n	23ec7b0 <_Z6OBS_Dov+0x1020>
    float t = 0.0;
 23ec6d8:	2600      	movs	r6, #0
    bool status = hih8_getTempHumid(&t, &h);
 23ec6da:	a90c      	add	r1, sp, #48	; 0x30
 23ec6dc:	a802      	add	r0, sp, #8
    float t = 0.0;
 23ec6de:	9602      	str	r6, [sp, #8]
    float h = 0.0;
 23ec6e0:	960c      	str	r6, [sp, #48]	; 0x30
    bool status = hih8_getTempHumid(&t, &h);
 23ec6e2:	f7fb fb59 	bl	23e7d98 <_Z17hih8_getTempHumidPfS_>
    if (!status) {
 23ec6e6:	b910      	cbnz	r0, 23ec6ee <_Z6OBS_Dov+0xf5e>
      t = -999.99;
 23ec6e8:	4b94      	ldr	r3, [pc, #592]	; (23ec93c <_Z6OBS_Dov+0x11ac>)
      h = 0.0;
 23ec6ea:	960c      	str	r6, [sp, #48]	; 0x30
      t = -999.99;
 23ec6ec:	9302      	str	r3, [sp, #8]
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ec6ee:	ed9d aa02 	vldr	s20, [sp, #8]
 23ec6f2:	eeb4 aa4a 	vcmp.f32	s20, s20
 23ec6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec6fa:	f180 871e 	bvs.w	23ed53a <_Z6OBS_Dov+0x1daa>
 23ec6fe:	eddf 7a87 	vldr	s15, [pc, #540]	; 23ec91c <_Z6OBS_Dov+0x118c>
 23ec702:	eeb4 aae7 	vcmpe.f32	s20, s15
 23ec706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec70a:	f100 8716 	bmi.w	23ed53a <_Z6OBS_Dov+0x1daa>
 23ec70e:	eddf 7a84 	vldr	s15, [pc, #528]	; 23ec920 <_Z6OBS_Dov+0x1190>
 23ec712:	eeb4 aa67 	vcmp.f32	s20, s15
 23ec716:	eddf 7a83 	vldr	s15, [pc, #524]	; 23ec924 <_Z6OBS_Dov+0x1194>
 23ec71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec71e:	fe37 aa8a 	vselgt.f32	s20, s15, s20
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ec722:	eddd 8a0c 	vldr	s17, [sp, #48]	; 0x30
 23ec726:	eef4 8a68 	vcmp.f32	s17, s17
 23ec72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec72e:	f180 8708 	bvs.w	23ed542 <_Z6OBS_Dov+0x1db2>
 23ec732:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 23ec736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec73a:	f100 8702 	bmi.w	23ed542 <_Z6OBS_Dov+0x1db2>
 23ec73e:	eddf 7a80 	vldr	s15, [pc, #512]	; 23ec940 <_Z6OBS_Dov+0x11b0>
 23ec742:	eef4 8a67 	vcmp.f32	s17, s15
 23ec746:	eddf 7a77 	vldr	s15, [pc, #476]	; 23ec924 <_Z6OBS_Dov+0x1194>
 23ec74a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec74e:	fe77 8aa8 	vselgt.f32	s17, s15, s17
    strcpy (obs[oidx].sensor[sidx].id, "ht2");
 23ec752:	231c      	movs	r3, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec754:	f640 2698 	movw	r6, #2712	; 0xa98
 23ec758:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ec75c:	f04f 0901 	mov.w	r9, #1
 23ec760:	fb03 f708 	mul.w	r7, r3, r8
    strcpy (obs[oidx].sensor[sidx].id, "ht2");
 23ec764:	19e8      	adds	r0, r5, r7
 23ec766:	4977      	ldr	r1, [pc, #476]	; (23ec944 <_Z6OBS_Dov+0x11b4>)
 23ec768:	4420      	add	r0, r4
 23ec76a:	f010 fbc5 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec76e:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "hh2");
 23ec770:	f107 001c 	add.w	r0, r7, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec774:	435e      	muls	r6, r3
 23ec776:	19b9      	adds	r1, r7, r6
 23ec778:	4421      	add	r1, r4
    strcpy (obs[oidx].sensor[sidx].id, "hh2");
 23ec77a:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23ec77c:	f108 0201 	add.w	r2, r8, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23ec780:	ed81 aa09 	vstr	s20, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec784:	f8c1 a020 	str.w	sl, [r1, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ec788:	f881 9030 	strb.w	r9, [r1, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "hh2");
 23ec78c:	4420      	add	r0, r4
 23ec78e:	496e      	ldr	r1, [pc, #440]	; (23ec948 <_Z6OBS_Dov+0x11b8>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ec790:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "hh2");
 23ec792:	f010 fbb1 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec796:	231c      	movs	r3, #28
 23ec798:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23ec79a:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec79e:	fb03 6602 	mla	r6, r3, r2, r6
 23ec7a2:	4426      	add	r6, r4
    obs[oidx].sensor[sidx].f_obs = h;
 23ec7a4:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec7a8:	f8c6 a020 	str.w	sl, [r6, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ec7ac:	f886 9030 	strb.w	r9, [r6, #48]	; 0x30
  if (SI1145_exists) {
 23ec7b0:	4e66      	ldr	r6, [pc, #408]	; (23ec94c <_Z6OBS_Dov+0x11bc>)
 23ec7b2:	7833      	ldrb	r3, [r6, #0]
 23ec7b4:	2b00      	cmp	r3, #0
 23ec7b6:	f000 811d 	beq.w	23ec9f4 <_Z6OBS_Dov+0x1264>
    float si_vis = uv.readVisible();
 23ec7ba:	4865      	ldr	r0, [pc, #404]	; (23ec950 <_Z6OBS_Dov+0x11c0>)
 23ec7bc:	f005 fcc1 	bl	23f2142 <_ZN15Adafruit_SI114511readVisibleEv>
 23ec7c0:	ee07 0a90 	vmov	s15, r0
    float si_ir = uv.readIR();
 23ec7c4:	4862      	ldr	r0, [pc, #392]	; (23ec950 <_Z6OBS_Dov+0x11c0>)
    float si_vis = uv.readVisible();
 23ec7c6:	eef8 aa67 	vcvt.f32.u32	s21, s15
    float si_ir = uv.readIR();
 23ec7ca:	f005 fcbd 	bl	23f2148 <_ZN15Adafruit_SI11456readIREv>
 23ec7ce:	ee07 0a90 	vmov	s15, r0
    float si_uv = uv.readUV()/100.0;
 23ec7d2:	485f      	ldr	r0, [pc, #380]	; (23ec950 <_Z6OBS_Dov+0x11c0>)
    float si_ir = uv.readIR();
 23ec7d4:	eeb8 aa67 	vcvt.f32.u32	s20, s15
    float si_uv = uv.readUV()/100.0;
 23ec7d8:	f005 fcb0 	bl	23f213c <_ZN15Adafruit_SI11456readUVEv>
 23ec7dc:	f7f8 fd62 	bl	23e52a4 <__aeabi_i2d>
 23ec7e0:	2200      	movs	r2, #0
 23ec7e2:	4b5c      	ldr	r3, [pc, #368]	; (23ec954 <_Z6OBS_Dov+0x11c4>)
 23ec7e4:	f7f8 fef2 	bl	23e55cc <__aeabi_ddiv>
 23ec7e8:	f7f9 f8be 	bl	23e5968 <__aeabi_d2f>
    if ( ((si_vis+si_ir+si_uv) == 0.0) && ((si_last_vis+si_last_ir+si_last_uv) != 0.0) ) {
 23ec7ec:	ee7a 7a8a 	vadd.f32	s15, s21, s20
    float si_uv = uv.readUV()/100.0;
 23ec7f0:	ee08 0a90 	vmov	s17, r0
    if ( ((si_vis+si_ir+si_uv) == 0.0) && ((si_last_vis+si_last_ir+si_last_uv) != 0.0) ) {
 23ec7f4:	ee77 7aa8 	vadd.f32	s15, s15, s17
 23ec7f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 23ec7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec800:	f8df a16c 	ldr.w	sl, [pc, #364]	; 23ec970 <_Z6OBS_Dov+0x11e0>
 23ec804:	f8df 916c 	ldr.w	r9, [pc, #364]	; 23ec974 <_Z6OBS_Dov+0x11e4>
 23ec808:	4f53      	ldr	r7, [pc, #332]	; (23ec958 <_Z6OBS_Dov+0x11c8>)
 23ec80a:	d141      	bne.n	23ec890 <_Z6OBS_Dov+0x1100>
 23ec80c:	ed99 7a00 	vldr	s14, [r9]
 23ec810:	edda 7a00 	vldr	s15, [sl]
 23ec814:	ee77 7a87 	vadd.f32	s15, s15, s14
 23ec818:	ed97 7a00 	vldr	s14, [r7]
 23ec81c:	ee77 7a87 	vadd.f32	s15, s15, s14
 23ec820:	eef5 7a40 	vcmp.f32	s15, #0.0
 23ec824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec828:	d032      	beq.n	23ec890 <_Z6OBS_Dov+0x1100>
      Output ("SI RESET");
 23ec82a:	484c      	ldr	r0, [pc, #304]	; (23ec95c <_Z6OBS_Dov+0x11cc>)
 23ec82c:	f7fa fcda 	bl	23e71e4 <_Z6OutputPKc>
      if (uv.begin()) {
 23ec830:	f00d fd52 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23ec834:	2160      	movs	r1, #96	; 0x60
 23ec836:	4602      	mov	r2, r0
 23ec838:	4845      	ldr	r0, [pc, #276]	; (23ec950 <_Z6OBS_Dov+0x11c0>)
 23ec83a:	f005 fce7 	bl	23f220c <_ZN15Adafruit_SI11455beginEhP7TwoWire>
 23ec83e:	2800      	cmp	r0, #0
 23ec840:	f000 8683 	beq.w	23ed54a <_Z6OBS_Dov+0x1dba>
        SI1145_exists = true;
 23ec844:	2301      	movs	r3, #1
        Output ("SI ONLINE");
 23ec846:	4846      	ldr	r0, [pc, #280]	; (23ec960 <_Z6OBS_Dov+0x11d0>)
        SI1145_exists = true;
 23ec848:	7033      	strb	r3, [r6, #0]
        Output ("SI ONLINE");
 23ec84a:	f7fa fccb 	bl	23e71e4 <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_SI1145; // Turn Off Bit
 23ec84e:	f8db 3000 	ldr.w	r3, [fp]
        si_vis = uv.readVisible();
 23ec852:	483f      	ldr	r0, [pc, #252]	; (23ec950 <_Z6OBS_Dov+0x11c0>)
        SystemStatusBits &= ~SSB_SI1145; // Turn Off Bit
 23ec854:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 23ec858:	f8cb 3000 	str.w	r3, [fp]
        si_vis = uv.readVisible();
 23ec85c:	f005 fc71 	bl	23f2142 <_ZN15Adafruit_SI114511readVisibleEv>
 23ec860:	ee07 0a90 	vmov	s15, r0
        si_ir = uv.readIR();
 23ec864:	483a      	ldr	r0, [pc, #232]	; (23ec950 <_Z6OBS_Dov+0x11c0>)
        si_vis = uv.readVisible();
 23ec866:	eef8 aa67 	vcvt.f32.u32	s21, s15
        si_ir = uv.readIR();
 23ec86a:	f005 fc6d 	bl	23f2148 <_ZN15Adafruit_SI11456readIREv>
 23ec86e:	ee07 0a90 	vmov	s15, r0
        si_uv = uv.readUV()/100.0;
 23ec872:	4837      	ldr	r0, [pc, #220]	; (23ec950 <_Z6OBS_Dov+0x11c0>)
        si_ir = uv.readIR();
 23ec874:	eeb8 aa67 	vcvt.f32.u32	s20, s15
        si_uv = uv.readUV()/100.0;
 23ec878:	f005 fc60 	bl	23f213c <_ZN15Adafruit_SI11456readUVEv>
 23ec87c:	f7f8 fd12 	bl	23e52a4 <__aeabi_i2d>
 23ec880:	2200      	movs	r2, #0
 23ec882:	4b34      	ldr	r3, [pc, #208]	; (23ec954 <_Z6OBS_Dov+0x11c4>)
 23ec884:	f7f8 fea2 	bl	23e55cc <__aeabi_ddiv>
 23ec888:	f7f9 f86e 	bl	23e5968 <__aeabi_d2f>
 23ec88c:	ee08 0a90 	vmov	s17, r0
    si_vis = (isnan(si_vis) || (si_vis < QC_MIN_VI)  || (si_vis > QC_MAX_VI)) ? QC_ERR_VI  : si_vis;
 23ec890:	eef4 aa6a 	vcmp.f32	s21, s21
 23ec894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    si_last_vis = si_vis;
 23ec898:	edca aa00 	vstr	s21, [sl]
    si_last_ir = si_ir;
 23ec89c:	ed89 aa00 	vstr	s20, [r9]
    si_last_uv = si_uv;
 23ec8a0:	edc7 8a00 	vstr	s17, [r7]
    si_vis = (isnan(si_vis) || (si_vis < QC_MIN_VI)  || (si_vis > QC_MAX_VI)) ? QC_ERR_VI  : si_vis;
 23ec8a4:	f180 865d 	bvs.w	23ed562 <_Z6OBS_Dov+0x1dd2>
 23ec8a8:	eddf 7a2e 	vldr	s15, [pc, #184]	; 23ec964 <_Z6OBS_Dov+0x11d4>
 23ec8ac:	eef4 aa67 	vcmp.f32	s21, s15
 23ec8b0:	eddf 7a1c 	vldr	s15, [pc, #112]	; 23ec924 <_Z6OBS_Dov+0x1194>
 23ec8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec8b8:	fe77 aaaa 	vselgt.f32	s21, s15, s21
    si_ir  = (isnan(si_ir)  || (si_ir  < QC_MIN_IR)  || (si_ir  > QC_MAX_IR)) ? QC_ERR_IR  : si_ir;
 23ec8bc:	eeb4 aa4a 	vcmp.f32	s20, s20
 23ec8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec8c4:	f180 8651 	bvs.w	23ed56a <_Z6OBS_Dov+0x1dda>
 23ec8c8:	eddf 7a27 	vldr	s15, [pc, #156]	; 23ec968 <_Z6OBS_Dov+0x11d8>
 23ec8cc:	eeb4 aa67 	vcmp.f32	s20, s15
 23ec8d0:	eddf 7a14 	vldr	s15, [pc, #80]	; 23ec924 <_Z6OBS_Dov+0x1194>
 23ec8d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec8d8:	fe37 aa8a 	vselgt.f32	s20, s15, s20
    si_uv  = (isnan(si_uv)  || (si_uv  < QC_MIN_UV)  || (si_uv  > QC_MAX_UV)) ? QC_ERR_UV  : si_uv;
 23ec8dc:	eef4 8a68 	vcmp.f32	s17, s17
 23ec8e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec8e4:	f180 8645 	bvs.w	23ed572 <_Z6OBS_Dov+0x1de2>
 23ec8e8:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 23ec8ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec8f0:	f100 863f 	bmi.w	23ed572 <_Z6OBS_Dov+0x1de2>
 23ec8f4:	eddf 7a1d 	vldr	s15, [pc, #116]	; 23ec96c <_Z6OBS_Dov+0x11dc>
 23ec8f8:	eef4 8a67 	vcmp.f32	s17, s15
 23ec8fc:	eddf 7a09 	vldr	s15, [pc, #36]	; 23ec924 <_Z6OBS_Dov+0x1194>
 23ec900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec904:	fe77 8aa8 	vselgt.f32	s17, s15, s17
 23ec908:	e036      	b.n	23ec978 <_Z6OBS_Dov+0x11e8>
 23ec90a:	bf00      	nop
 23ec90c:	023fe514 	.word	0x023fe514
 23ec910:	023fe519 	.word	0x023fe519
 23ec914:	1006a2eb 	.word	0x1006a2eb
 23ec918:	1006f0f4 	.word	0x1006f0f4
 23ec91c:	c2200000 	.word	0xc2200000
 23ec920:	42700000 	.word	0x42700000
 23ec924:	c479f99a 	.word	0xc479f99a
 23ec928:	43960000 	.word	0x43960000
 23ec92c:	44898000 	.word	0x44898000
 23ec930:	023fe51e 	.word	0x023fe51e
 23ec934:	023fe523 	.word	0x023fe523
 23ec938:	1006a2e6 	.word	0x1006a2e6
 23ec93c:	c479ff5c 	.word	0xc479ff5c
 23ec940:	42c80000 	.word	0x42c80000
 23ec944:	023fe528 	.word	0x023fe528
 23ec948:	023fe52c 	.word	0x023fe52c
 23ec94c:	1006a80a 	.word	0x1006a80a
 23ec950:	1007ac1c 	.word	0x1007ac1c
 23ec954:	40590000 	.word	0x40590000
 23ec958:	1007abdc 	.word	0x1007abdc
 23ec95c:	023fe530 	.word	0x023fe530
 23ec960:	023fd90f 	.word	0x023fd90f
 23ec964:	44fa0000 	.word	0x44fa0000
 23ec968:	467a0000 	.word	0x467a0000
 23ec96c:	447a0000 	.word	0x447a0000
 23ec970:	1007abe0 	.word	0x1007abe0
 23ec974:	1007abd8 	.word	0x1007abd8
    strcpy (obs[oidx].sensor[sidx].id, "sv1");
 23ec978:	f04f 0b1c 	mov.w	fp, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec97c:	f640 2698 	movw	r6, #2712	; 0xa98
 23ec980:	fb0b f708 	mul.w	r7, fp, r8
    strcpy (obs[oidx].sensor[sidx].id, "sv1");
 23ec984:	19e8      	adds	r0, r5, r7
 23ec986:	49d5      	ldr	r1, [pc, #852]	; (23eccdc <_Z6OBS_Dov+0x154c>)
 23ec988:	4420      	add	r0, r4
 23ec98a:	f010 fab5 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec98e:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ec990:	f04f 0a01 	mov.w	sl, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec994:	435e      	muls	r6, r3
 23ec996:	2300      	movs	r3, #0
 23ec998:	19ba      	adds	r2, r7, r6
    strcpy (obs[oidx].sensor[sidx].id, "si1");
 23ec99a:	eb07 000b 	add.w	r0, r7, fp
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec99e:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "si1");
 23ec9a0:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec9a2:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = si_vis;
 23ec9a4:	edc2 aa09 	vstr	s21, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "si1");
 23ec9a8:	49cd      	ldr	r1, [pc, #820]	; (23ecce0 <_Z6OBS_Dov+0x1550>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ec9aa:	f882 a030 	strb.w	sl, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "si1");
 23ec9ae:	4420      	add	r0, r4
 23ec9b0:	f010 faa2 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec9b4:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ec9b6:	f108 0901 	add.w	r9, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec9ba:	fb0b 6909 	mla	r9, fp, r9, r6
 23ec9be:	eb04 0209 	add.w	r2, r4, r9
    obs[oidx].sensor[sidx++].inuse = true;
 23ec9c2:	f108 0902 	add.w	r9, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec9c6:	fb0b 6609 	mla	r6, fp, r9, r6
    strcpy (obs[oidx].sensor[sidx].id, "su1");
 23ec9ca:	f107 0038 	add.w	r0, r7, #56	; 0x38
 23ec9ce:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec9d0:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = si_ir;
 23ec9d2:	ed82 aa09 	vstr	s20, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "su1");
 23ec9d6:	49c3      	ldr	r1, [pc, #780]	; (23ecce4 <_Z6OBS_Dov+0x1554>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ec9d8:	f882 a030 	strb.w	sl, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "su1");
 23ec9dc:	4420      	add	r0, r4
 23ec9de:	f010 fa8b 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec9e2:	4426      	add	r6, r4
 23ec9e4:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx].f_obs = si_uv;
 23ec9e6:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23ec9ea:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ec9ec:	f108 0803 	add.w	r8, r8, #3
 23ec9f0:	f886 a030 	strb.w	sl, [r6, #48]	; 0x30
  if (MCP_1_exists) {
 23ec9f4:	4bbc      	ldr	r3, [pc, #752]	; (23ecce8 <_Z6OBS_Dov+0x1558>)
 23ec9f6:	781b      	ldrb	r3, [r3, #0]
 23ec9f8:	b3c3      	cbz	r3, 23eca6c <_Z6OBS_Dov+0x12dc>
    strcpy (obs[oidx].sensor[sidx].id, "mt1");
 23ec9fa:	261c      	movs	r6, #28
 23ec9fc:	fb06 f608 	mul.w	r6, r6, r8
 23eca00:	1970      	adds	r0, r6, r5
 23eca02:	49ba      	ldr	r1, [pc, #744]	; (23eccec <_Z6OBS_Dov+0x155c>)
 23eca04:	4420      	add	r0, r4
 23eca06:	f010 fa77 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eca0a:	f640 2398 	movw	r3, #2712	; 0xa98
 23eca0e:	9a00      	ldr	r2, [sp, #0]
    t = mcp1.readTempC();
 23eca10:	48b7      	ldr	r0, [pc, #732]	; (23eccf0 <_Z6OBS_Dov+0x1560>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23eca12:	fb03 6602 	mla	r6, r3, r2, r6
 23eca16:	2300      	movs	r3, #0
 23eca18:	4426      	add	r6, r4
 23eca1a:	6233      	str	r3, [r6, #32]
    t = mcp1.readTempC();
 23eca1c:	f005 f99e 	bl	23f1d5c <_ZN16Adafruit_MCP98089readTempCEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eca20:	eeb4 0a40 	vcmp.f32	s0, s0
 23eca24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eca28:	f180 85a7 	bvs.w	23ed57a <_Z6OBS_Dov+0x1dea>
 23eca2c:	eddf 7ab1 	vldr	s15, [pc, #708]	; 23eccf4 <_Z6OBS_Dov+0x1564>
 23eca30:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23eca34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eca38:	f100 859f 	bmi.w	23ed57a <_Z6OBS_Dov+0x1dea>
 23eca3c:	eddf 7aae 	vldr	s15, [pc, #696]	; 23eccf8 <_Z6OBS_Dov+0x1568>
 23eca40:	eeb4 0a67 	vcmp.f32	s0, s15
 23eca44:	eddf 7aad 	vldr	s15, [pc, #692]	; 23eccfc <_Z6OBS_Dov+0x156c>
 23eca48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eca4c:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23eca50:	f640 2398 	movw	r3, #2712	; 0xa98
 23eca54:	9a00      	ldr	r2, [sp, #0]
 23eca56:	4353      	muls	r3, r2
 23eca58:	221c      	movs	r2, #28
 23eca5a:	fb02 3308 	mla	r3, r2, r8, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23eca5e:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23eca60:	4423      	add	r3, r4
 23eca62:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eca66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23eca6a:	4490      	add	r8, r2
  if (MCP_2_exists) {
 23eca6c:	4ba4      	ldr	r3, [pc, #656]	; (23ecd00 <_Z6OBS_Dov+0x1570>)
 23eca6e:	781b      	ldrb	r3, [r3, #0]
 23eca70:	b3c3      	cbz	r3, 23ecae4 <_Z6OBS_Dov+0x1354>
    strcpy (obs[oidx].sensor[sidx].id, "mt2");
 23eca72:	261c      	movs	r6, #28
 23eca74:	fb06 f608 	mul.w	r6, r6, r8
 23eca78:	1970      	adds	r0, r6, r5
 23eca7a:	49a2      	ldr	r1, [pc, #648]	; (23ecd04 <_Z6OBS_Dov+0x1574>)
 23eca7c:	4420      	add	r0, r4
 23eca7e:	f010 fa3b 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eca82:	f640 2398 	movw	r3, #2712	; 0xa98
 23eca86:	9a00      	ldr	r2, [sp, #0]
    t = mcp2.readTempC();
 23eca88:	489f      	ldr	r0, [pc, #636]	; (23ecd08 <_Z6OBS_Dov+0x1578>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23eca8a:	fb03 6602 	mla	r6, r3, r2, r6
 23eca8e:	2300      	movs	r3, #0
 23eca90:	4426      	add	r6, r4
 23eca92:	6233      	str	r3, [r6, #32]
    t = mcp2.readTempC();
 23eca94:	f005 f962 	bl	23f1d5c <_ZN16Adafruit_MCP98089readTempCEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eca98:	eeb4 0a40 	vcmp.f32	s0, s0
 23eca9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ecaa0:	f180 856f 	bvs.w	23ed582 <_Z6OBS_Dov+0x1df2>
 23ecaa4:	eddf 7a93 	vldr	s15, [pc, #588]	; 23eccf4 <_Z6OBS_Dov+0x1564>
 23ecaa8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ecaac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ecab0:	f100 8567 	bmi.w	23ed582 <_Z6OBS_Dov+0x1df2>
 23ecab4:	eddf 7a90 	vldr	s15, [pc, #576]	; 23eccf8 <_Z6OBS_Dov+0x1568>
 23ecab8:	eeb4 0a67 	vcmp.f32	s0, s15
 23ecabc:	eddf 7a8f 	vldr	s15, [pc, #572]	; 23eccfc <_Z6OBS_Dov+0x156c>
 23ecac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ecac4:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23ecac8:	f640 2398 	movw	r3, #2712	; 0xa98
 23ecacc:	9a00      	ldr	r2, [sp, #0]
 23ecace:	4353      	muls	r3, r2
 23ecad0:	221c      	movs	r2, #28
 23ecad2:	fb02 3308 	mla	r3, r2, r8, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23ecad6:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23ecad8:	4423      	add	r3, r4
 23ecada:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ecade:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23ecae2:	4490      	add	r8, r2
  if (MCP_3_exists) {
 23ecae4:	4b89      	ldr	r3, [pc, #548]	; (23ecd0c <_Z6OBS_Dov+0x157c>)
 23ecae6:	781b      	ldrb	r3, [r3, #0]
 23ecae8:	2b00      	cmp	r3, #0
 23ecaea:	f000 8552 	beq.w	23ed592 <_Z6OBS_Dov+0x1e02>
    strcpy (obs[oidx].sensor[sidx].id, "gt1");
 23ecaee:	261c      	movs	r6, #28
 23ecaf0:	fb06 f608 	mul.w	r6, r6, r8
 23ecaf4:	1970      	adds	r0, r6, r5
 23ecaf6:	4986      	ldr	r1, [pc, #536]	; (23ecd10 <_Z6OBS_Dov+0x1580>)
 23ecaf8:	4420      	add	r0, r4
 23ecafa:	f010 f9fd 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ecafe:	f640 2398 	movw	r3, #2712	; 0xa98
 23ecb02:	9a00      	ldr	r2, [sp, #0]
    t = mcp3.readTempC();
 23ecb04:	4883      	ldr	r0, [pc, #524]	; (23ecd14 <_Z6OBS_Dov+0x1584>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ecb06:	fb03 6602 	mla	r6, r3, r2, r6
 23ecb0a:	2300      	movs	r3, #0
 23ecb0c:	4426      	add	r6, r4
 23ecb0e:	6233      	str	r3, [r6, #32]
    t = mcp3.readTempC();
 23ecb10:	f005 f924 	bl	23f1d5c <_ZN16Adafruit_MCP98089readTempCEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ecb14:	eeb4 0a40 	vcmp.f32	s0, s0
 23ecb18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ecb1c:	f180 8535 	bvs.w	23ed58a <_Z6OBS_Dov+0x1dfa>
 23ecb20:	eddf 7a74 	vldr	s15, [pc, #464]	; 23eccf4 <_Z6OBS_Dov+0x1564>
 23ecb24:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ecb28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ecb2c:	f100 852d 	bmi.w	23ed58a <_Z6OBS_Dov+0x1dfa>
 23ecb30:	eddf 7a71 	vldr	s15, [pc, #452]	; 23eccf8 <_Z6OBS_Dov+0x1568>
 23ecb34:	eeb4 0a67 	vcmp.f32	s0, s15
 23ecb38:	eddf 7a70 	vldr	s15, [pc, #448]	; 23eccfc <_Z6OBS_Dov+0x156c>
 23ecb3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ecb40:	fe77 8a80 	vselgt.f32	s17, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23ecb44:	f640 2398 	movw	r3, #2712	; 0xa98
 23ecb48:	9a00      	ldr	r2, [sp, #0]
 23ecb4a:	4353      	muls	r3, r2
 23ecb4c:	221c      	movs	r2, #28
 23ecb4e:	fb02 3308 	mla	r3, r2, r8, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23ecb52:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23ecb54:	4423      	add	r3, r4
 23ecb56:	edc3 8a09 	vstr	s17, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ecb5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23ecb5e:	4490      	add	r8, r2
  if (MCP_4_exists) {
 23ecb60:	4b6d      	ldr	r3, [pc, #436]	; (23ecd18 <_Z6OBS_Dov+0x1588>)
 23ecb62:	781b      	ldrb	r3, [r3, #0]
 23ecb64:	b3c3      	cbz	r3, 23ecbd8 <_Z6OBS_Dov+0x1448>
    strcpy (obs[oidx].sensor[sidx].id, "gt2");
 23ecb66:	261c      	movs	r6, #28
 23ecb68:	fb06 f608 	mul.w	r6, r6, r8
 23ecb6c:	1970      	adds	r0, r6, r5
 23ecb6e:	496b      	ldr	r1, [pc, #428]	; (23ecd1c <_Z6OBS_Dov+0x158c>)
 23ecb70:	4420      	add	r0, r4
 23ecb72:	f010 f9c1 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ecb76:	f640 2398 	movw	r3, #2712	; 0xa98
 23ecb7a:	9a00      	ldr	r2, [sp, #0]
    t = mcp4.readTempC();
 23ecb7c:	4868      	ldr	r0, [pc, #416]	; (23ecd20 <_Z6OBS_Dov+0x1590>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ecb7e:	fb03 6602 	mla	r6, r3, r2, r6
 23ecb82:	2300      	movs	r3, #0
 23ecb84:	4426      	add	r6, r4
 23ecb86:	6233      	str	r3, [r6, #32]
    t = mcp4.readTempC();
 23ecb88:	f005 f8e8 	bl	23f1d5c <_ZN16Adafruit_MCP98089readTempCEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ecb8c:	eeb4 0a40 	vcmp.f32	s0, s0
 23ecb90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ecb94:	f180 8501 	bvs.w	23ed59a <_Z6OBS_Dov+0x1e0a>
 23ecb98:	eddf 7a56 	vldr	s15, [pc, #344]	; 23eccf4 <_Z6OBS_Dov+0x1564>
 23ecb9c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ecba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ecba4:	f100 84f9 	bmi.w	23ed59a <_Z6OBS_Dov+0x1e0a>
 23ecba8:	eddf 7a53 	vldr	s15, [pc, #332]	; 23eccf8 <_Z6OBS_Dov+0x1568>
 23ecbac:	eeb4 0a67 	vcmp.f32	s0, s15
 23ecbb0:	eddf 7a52 	vldr	s15, [pc, #328]	; 23eccfc <_Z6OBS_Dov+0x156c>
 23ecbb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ecbb8:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23ecbbc:	f640 2398 	movw	r3, #2712	; 0xa98
 23ecbc0:	9a00      	ldr	r2, [sp, #0]
 23ecbc2:	4353      	muls	r3, r2
 23ecbc4:	221c      	movs	r2, #28
 23ecbc6:	fb02 3308 	mla	r3, r2, r8, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23ecbca:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23ecbcc:	4423      	add	r3, r4
 23ecbce:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ecbd2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23ecbd6:	4490      	add	r8, r2
  if (VEML7700_exists) {
 23ecbd8:	4b52      	ldr	r3, [pc, #328]	; (23ecd24 <_Z6OBS_Dov+0x1594>)
 23ecbda:	781b      	ldrb	r3, [r3, #0]
 23ecbdc:	b37b      	cbz	r3, 23ecc3e <_Z6OBS_Dov+0x14ae>
    float lux = veml.readLux(VEML_LUX_AUTO);
 23ecbde:	2102      	movs	r1, #2
 23ecbe0:	4851      	ldr	r0, [pc, #324]	; (23ecd28 <_Z6OBS_Dov+0x1598>)
 23ecbe2:	f006 fabd 	bl	23f3160 <_ZN17Adafruit_VEML77007readLuxE9luxMethod>
    lux = (isnan(lux) || (lux < QC_MIN_VLX)  || (lux > QC_MAX_VLX))  ? QC_ERR_VLX  : lux;
 23ecbe6:	eeb4 0a40 	vcmp.f32	s0, s0
 23ecbea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ecbee:	f180 84d8 	bvs.w	23ed5a2 <_Z6OBS_Dov+0x1e12>
 23ecbf2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23ecbf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ecbfa:	f100 84d2 	bmi.w	23ed5a2 <_Z6OBS_Dov+0x1e12>
 23ecbfe:	eddf 7a4b 	vldr	s15, [pc, #300]	; 23ecd2c <_Z6OBS_Dov+0x159c>
 23ecc02:	eeb4 0a67 	vcmp.f32	s0, s15
 23ecc06:	eddf 7a4a 	vldr	s15, [pc, #296]	; 23ecd30 <_Z6OBS_Dov+0x15a0>
 23ecc0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ecc0e:	fe37 aa80 	vselgt.f32	s20, s15, s0
    strcpy (obs[oidx].sensor[sidx].id, "vlx");
 23ecc12:	261c      	movs	r6, #28
 23ecc14:	fb06 f608 	mul.w	r6, r6, r8
 23ecc18:	1970      	adds	r0, r6, r5
 23ecc1a:	4946      	ldr	r1, [pc, #280]	; (23ecd34 <_Z6OBS_Dov+0x15a4>)
 23ecc1c:	4420      	add	r0, r4
 23ecc1e:	f010 f96b 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ecc22:	f640 2398 	movw	r3, #2712	; 0xa98
 23ecc26:	9a00      	ldr	r2, [sp, #0]
 23ecc28:	fb03 6302 	mla	r3, r3, r2, r6
 23ecc2c:	2200      	movs	r2, #0
 23ecc2e:	4423      	add	r3, r4
 23ecc30:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ecc32:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = lux;
 23ecc34:	ed83 aa09 	vstr	s20, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ecc38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23ecc3c:	4490      	add	r8, r2
  if (BLX_exists) {
 23ecc3e:	4b3e      	ldr	r3, [pc, #248]	; (23ecd38 <_Z6OBS_Dov+0x15a8>)
 23ecc40:	781b      	ldrb	r3, [r3, #0]
 23ecc42:	b36b      	cbz	r3, 23ecca0 <_Z6OBS_Dov+0x1510>
    float lux=blx_takereading();
 23ecc44:	f7fb fdfc 	bl	23e8840 <_Z15blx_takereadingv>
    lux = (isnan(lux) || (lux < QC_MIN_BLX)  || (lux > QC_MAX_BLX))  ? QC_ERR_BLX  : lux;
 23ecc48:	eeb4 0a40 	vcmp.f32	s0, s0
 23ecc4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ecc50:	f180 84ab 	bvs.w	23ed5aa <_Z6OBS_Dov+0x1e1a>
 23ecc54:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23ecc58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ecc5c:	f100 84a5 	bmi.w	23ed5aa <_Z6OBS_Dov+0x1e1a>
 23ecc60:	eddf 7a36 	vldr	s15, [pc, #216]	; 23ecd3c <_Z6OBS_Dov+0x15ac>
 23ecc64:	eeb4 0a67 	vcmp.f32	s0, s15
 23ecc68:	eddf 7a24 	vldr	s15, [pc, #144]	; 23eccfc <_Z6OBS_Dov+0x156c>
 23ecc6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ecc70:	fe37 aa80 	vselgt.f32	s20, s15, s0
    strcpy (obs[oidx].sensor[sidx].id, "blx");
 23ecc74:	261c      	movs	r6, #28
 23ecc76:	fb06 f608 	mul.w	r6, r6, r8
 23ecc7a:	1970      	adds	r0, r6, r5
 23ecc7c:	4930      	ldr	r1, [pc, #192]	; (23ecd40 <_Z6OBS_Dov+0x15b0>)
 23ecc7e:	4420      	add	r0, r4
 23ecc80:	f010 f93a 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ecc84:	f640 2398 	movw	r3, #2712	; 0xa98
 23ecc88:	9a00      	ldr	r2, [sp, #0]
 23ecc8a:	fb03 6302 	mla	r3, r3, r2, r6
 23ecc8e:	2200      	movs	r2, #0
 23ecc90:	4423      	add	r3, r4
 23ecc92:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ecc94:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = lux;
 23ecc96:	ed83 aa09 	vstr	s20, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ecc9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23ecc9e:	4490      	add	r8, r2
  if (A4_State == A4_STATE_DISTANCE) {
 23ecca0:	4b28      	ldr	r3, [pc, #160]	; (23ecd44 <_Z6OBS_Dov+0x15b4>)
 23ecca2:	681f      	ldr	r7, [r3, #0]
 23ecca4:	2f01      	cmp	r7, #1
 23ecca6:	d151      	bne.n	23ecd4c <_Z6OBS_Dov+0x15bc>
    strcpy (obs[oidx].sensor[sidx].id, "sg"); // sg = snow or stream
 23ecca8:	261c      	movs	r6, #28
 23eccaa:	fb06 f608 	mul.w	r6, r6, r8
 23eccae:	1970      	adds	r0, r6, r5
 23eccb0:	4925      	ldr	r1, [pc, #148]	; (23ecd48 <_Z6OBS_Dov+0x15b8>)
 23eccb2:	4420      	add	r0, r4
 23eccb4:	f010 f920 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eccb8:	f640 2398 	movw	r3, #2712	; 0xa98
 23eccbc:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23eccbe:	f108 0801 	add.w	r8, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23eccc2:	fb03 6602 	mla	r6, r3, r2, r6
 23eccc6:	2300      	movs	r3, #0
 23eccc8:	4426      	add	r6, r4
 23eccca:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = DistanceGauge_Median();
 23ecccc:	f7fc f92c 	bl	23e8f28 <_Z20DistanceGauge_Medianv>
 23eccd0:	ed86 0a09 	vstr	s0, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eccd4:	f886 7030 	strb.w	r7, [r6, #48]	; 0x30
 23eccd8:	e038      	b.n	23ecd4c <_Z6OBS_Dov+0x15bc>
 23eccda:	bf00      	nop
 23eccdc:	023fe539 	.word	0x023fe539
 23ecce0:	023fe53d 	.word	0x023fe53d
 23ecce4:	023fe541 	.word	0x023fe541
 23ecce8:	1006a300 	.word	0x1006a300
 23eccec:	023fe5e0 	.word	0x023fe5e0
 23eccf0:	1006f110 	.word	0x1006f110
 23eccf4:	c2200000 	.word	0xc2200000
 23eccf8:	42700000 	.word	0x42700000
 23eccfc:	c479f99a 	.word	0xc479f99a
 23ecd00:	1006a301 	.word	0x1006a301
 23ecd04:	023fe5e7 	.word	0x023fe5e7
 23ecd08:	1006f11c 	.word	0x1006f11c
 23ecd0c:	1006a302 	.word	0x1006a302
 23ecd10:	023fe77c 	.word	0x023fe77c
 23ecd14:	1006f128 	.word	0x1006f128
 23ecd18:	1006a303 	.word	0x1006a303
 23ecd1c:	023fe787 	.word	0x023fe787
 23ecd20:	1006f134 	.word	0x1006f134
 23ecd24:	1006a81c 	.word	0x1006a81c
 23ecd28:	1007ac24 	.word	0x1007ac24
 23ecd2c:	47ea6000 	.word	0x47ea6000
 23ecd30:	c479c000 	.word	0xc479c000
 23ecd34:	023fe545 	.word	0x023fe545
 23ecd38:	1006a2b8 	.word	0x1006a2b8
 23ecd3c:	48438200 	.word	0x48438200
 23ecd40:	023fe549 	.word	0x023fe549
 23ecd44:	1006a294 	.word	0x1006a294
 23ecd48:	023fe54d 	.word	0x023fe54d
  if (A4_State == A4_STATE_RAW) {
 23ecd4c:	4bd5      	ldr	r3, [pc, #852]	; (23ed0a4 <_Z6OBS_Dov+0x1914>)
 23ecd4e:	681b      	ldr	r3, [r3, #0]
 23ecd50:	2b03      	cmp	r3, #3
 23ecd52:	f040 842e 	bne.w	23ed5b2 <_Z6OBS_Dov+0x1e22>
    strcpy (obs[oidx].sensor[sidx].id, "a4r");
 23ecd56:	261c      	movs	r6, #28
 23ecd58:	fb06 f608 	mul.w	r6, r6, r8
 23ecd5c:	1970      	adds	r0, r6, r5
 23ecd5e:	49d2      	ldr	r1, [pc, #840]	; (23ed0a8 <_Z6OBS_Dov+0x1918>)
 23ecd60:	4420      	add	r0, r4
 23ecd62:	f010 f8c9 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ecd66:	f640 2398 	movw	r3, #2712	; 0xa98
 23ecd6a:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx].f_obs = Pin_ReadAvg(A4);
 23ecd6c:	200f      	movs	r0, #15
    obs[oidx].sensor[sidx].type = F_OBS;
 23ecd6e:	fb03 6602 	mla	r6, r3, r2, r6
 23ecd72:	2300      	movs	r3, #0
 23ecd74:	4426      	add	r6, r4
 23ecd76:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = Pin_ReadAvg(A4);
 23ecd78:	f7fc f89c 	bl	23e8eb4 <_Z11Pin_ReadAvgi>
    obs[oidx].sensor[sidx++].inuse = true;
 23ecd7c:	2301      	movs	r3, #1
    obs[oidx].sensor[sidx].f_obs = Pin_ReadAvg(A4);
 23ecd7e:	ed86 0a09 	vstr	s0, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ecd82:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
 23ecd86:	4498      	add	r8, r3
  if (A5_State == A5_STATE_RAW) {
 23ecd88:	4bc8      	ldr	r3, [pc, #800]	; (23ed0ac <_Z6OBS_Dov+0x191c>)
 23ecd8a:	681f      	ldr	r7, [r3, #0]
 23ecd8c:	2f01      	cmp	r7, #1
 23ecd8e:	d118      	bne.n	23ecdc2 <_Z6OBS_Dov+0x1632>
    strcpy (obs[oidx].sensor[sidx].id, "a5r");
 23ecd90:	261c      	movs	r6, #28
 23ecd92:	fb06 f608 	mul.w	r6, r6, r8
 23ecd96:	1970      	adds	r0, r6, r5
 23ecd98:	49c5      	ldr	r1, [pc, #788]	; (23ed0b0 <_Z6OBS_Dov+0x1920>)
 23ecd9a:	4420      	add	r0, r4
 23ecd9c:	f010 f8ac 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ecda0:	f640 2398 	movw	r3, #2712	; 0xa98
 23ecda4:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx].f_obs = Pin_ReadAvg(A5);
 23ecda6:	200e      	movs	r0, #14
    obs[oidx].sensor[sidx].type = F_OBS;
 23ecda8:	fb03 6602 	mla	r6, r3, r2, r6
 23ecdac:	2300      	movs	r3, #0
 23ecdae:	4426      	add	r6, r4
 23ecdb0:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = Pin_ReadAvg(A5);
 23ecdb2:	f7fc f87f 	bl	23e8eb4 <_Z11Pin_ReadAvgi>
 23ecdb6:	ed86 0a09 	vstr	s0, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ecdba:	f886 7030 	strb.w	r7, [r6, #48]	; 0x30
 23ecdbe:	f108 0801 	add.w	r8, r8, #1
  if (PM25AQI_exists) {
 23ecdc2:	4bbc      	ldr	r3, [pc, #752]	; (23ed0b4 <_Z6OBS_Dov+0x1924>)
 23ecdc4:	781b      	ldrb	r3, [r3, #0]
 23ecdc6:	2b00      	cmp	r3, #0
 23ecdc8:	f000 8087 	beq.w	23eceda <_Z6OBS_Dov+0x174a>
    strcpy (obs[oidx].sensor[sidx].id, "pm1s10");
 23ecdcc:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx].type = I_OBS;
 23ecdd0:	f640 2698 	movw	r6, #2712	; 0xa98
 23ecdd4:	f04f 0b01 	mov.w	fp, #1
 23ecdd8:	fb0a f708 	mul.w	r7, sl, r8
    strcpy (obs[oidx].sensor[sidx].id, "pm1s10");
 23ecddc:	19e8      	adds	r0, r5, r7
 23ecdde:	49b6      	ldr	r1, [pc, #728]	; (23ed0b8 <_Z6OBS_Dov+0x1928>)
 23ecde0:	4420      	add	r0, r4
 23ecde2:	f010 f889 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23ecde6:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s10;
 23ecde8:	f8df 9320 	ldr.w	r9, [pc, #800]	; 23ed10c <_Z6OBS_Dov+0x197c>
    obs[oidx].sensor[sidx].type = I_OBS;
 23ecdec:	435e      	muls	r6, r3
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
 23ecdee:	eb07 000a 	add.w	r0, r7, sl
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s10;
 23ecdf2:	f8b9 3000 	ldrh.w	r3, [r9]
    obs[oidx].sensor[sidx].type = I_OBS;
 23ecdf6:	19ba      	adds	r2, r7, r6
 23ecdf8:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
 23ecdfa:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s10;
 23ecdfc:	6293      	str	r3, [r2, #40]	; 0x28
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
 23ecdfe:	49af      	ldr	r1, [pc, #700]	; (23ed0bc <_Z6OBS_Dov+0x192c>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ece00:	eb08 030b 	add.w	r3, r8, fp
    obs[oidx].sensor[sidx].type = I_OBS;
 23ece04:	f8c2 b020 	str.w	fp, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ece08:	f882 b030 	strb.w	fp, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
 23ece0c:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ece0e:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
 23ece10:	f010 f872 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23ece14:	9b01      	ldr	r3, [sp, #4]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s25;
 23ece16:	f8b9 2002 	ldrh.w	r2, [r9, #2]
    obs[oidx].sensor[sidx].type = I_OBS;
 23ece1a:	fb0a 6303 	mla	r3, sl, r3, r6
    strcpy (obs[oidx].sensor[sidx].id, "pm1s100");
 23ece1e:	f107 0038 	add.w	r0, r7, #56	; 0x38
    obs[oidx].sensor[sidx].type = I_OBS;
 23ece22:	4423      	add	r3, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1s100");
 23ece24:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s25;
 23ece26:	629a      	str	r2, [r3, #40]	; 0x28
    strcpy (obs[oidx].sensor[sidx].id, "pm1s100");
 23ece28:	49a5      	ldr	r1, [pc, #660]	; (23ed0c0 <_Z6OBS_Dov+0x1930>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ece2a:	f108 0202 	add.w	r2, r8, #2
    obs[oidx].sensor[sidx].type = I_OBS;
 23ece2e:	f8c3 b020 	str.w	fp, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ece32:	f883 b030 	strb.w	fp, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1s100");
 23ece36:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ece38:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1s100");
 23ece3a:	f010 f85d 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23ece3e:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s100;
 23ece40:	f8b9 3004 	ldrh.w	r3, [r9, #4]
    obs[oidx].sensor[sidx].type = I_OBS;
 23ece44:	fb0a 6202 	mla	r2, sl, r2, r6
    strcpy (obs[oidx].sensor[sidx].id, "pm1e10");
 23ece48:	f107 0054 	add.w	r0, r7, #84	; 0x54
    obs[oidx].sensor[sidx].type = I_OBS;
 23ece4c:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1e10");
 23ece4e:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s100;
 23ece50:	6293      	str	r3, [r2, #40]	; 0x28
    strcpy (obs[oidx].sensor[sidx].id, "pm1e10");
 23ece52:	499c      	ldr	r1, [pc, #624]	; (23ed0c4 <_Z6OBS_Dov+0x1934>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ece54:	f108 0303 	add.w	r3, r8, #3
    obs[oidx].sensor[sidx].type = I_OBS;
 23ece58:	f8c2 b020 	str.w	fp, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ece5c:	f882 b030 	strb.w	fp, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1e10");
 23ece60:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ece62:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1e10");
 23ece64:	f010 f848 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23ece68:	9b01      	ldr	r3, [sp, #4]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e10;
 23ece6a:	f8b9 2006 	ldrh.w	r2, [r9, #6]
    obs[oidx].sensor[sidx].type = I_OBS;
 23ece6e:	fb0a 6303 	mla	r3, sl, r3, r6
    strcpy (obs[oidx].sensor[sidx].id, "pm1e25");
 23ece72:	f107 0070 	add.w	r0, r7, #112	; 0x70
    obs[oidx].sensor[sidx].type = I_OBS;
 23ece76:	4423      	add	r3, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1e25");
 23ece78:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e10;
 23ece7a:	629a      	str	r2, [r3, #40]	; 0x28
    strcpy (obs[oidx].sensor[sidx].id, "pm1e25");
 23ece7c:	4992      	ldr	r1, [pc, #584]	; (23ed0c8 <_Z6OBS_Dov+0x1938>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ece7e:	f108 0204 	add.w	r2, r8, #4
    obs[oidx].sensor[sidx].type = I_OBS;
 23ece82:	f8c3 b020 	str.w	fp, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ece86:	f883 b030 	strb.w	fp, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1e25");
 23ece8a:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ece8c:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1e25");
 23ece8e:	f010 f833 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23ece92:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e25;
 23ece94:	f8b9 3008 	ldrh.w	r3, [r9, #8]
    obs[oidx].sensor[sidx].type = I_OBS;
 23ece98:	fb0a 6202 	mla	r2, sl, r2, r6
    strcpy (obs[oidx].sensor[sidx].id, "pm1e100");
 23ece9c:	f107 008c 	add.w	r0, r7, #140	; 0x8c
    obs[oidx].sensor[sidx].type = I_OBS;
 23ecea0:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1e100");
 23ecea2:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e25;
 23ecea4:	6293      	str	r3, [r2, #40]	; 0x28
    strcpy (obs[oidx].sensor[sidx].id, "pm1e100");
 23ecea6:	4989      	ldr	r1, [pc, #548]	; (23ed0cc <_Z6OBS_Dov+0x193c>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ecea8:	f108 0305 	add.w	r3, r8, #5
    obs[oidx].sensor[sidx].type = I_OBS;
 23eceac:	f8c2 b020 	str.w	fp, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23eceb0:	f882 b030 	strb.w	fp, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1e100");
 23eceb4:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23eceb6:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1e100");
 23eceb8:	f010 f81e 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23ecebc:	9b01      	ldr	r3, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23ecebe:	f108 0806 	add.w	r8, r8, #6
    obs[oidx].sensor[sidx].type = I_OBS;
 23ecec2:	fb0a 6603 	mla	r6, sl, r3, r6
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e100;
 23ecec6:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    obs[oidx].sensor[sidx].type = I_OBS;
 23ececa:	4426      	add	r6, r4
 23ececc:	f8c6 b020 	str.w	fp, [r6, #32]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e100;
 23eced0:	62b3      	str	r3, [r6, #40]	; 0x28
    obs[oidx].sensor[sidx++].inuse = true;
 23eced2:	f886 b030 	strb.w	fp, [r6, #48]	; 0x30
    pm25aqi_clear();
 23eced6:	f7fb fd09 	bl	23e88ec <_Z13pm25aqi_clearv>
  if (HI_exists) {
 23eceda:	4b7d      	ldr	r3, [pc, #500]	; (23ed0d0 <_Z6OBS_Dov+0x1940>)
 23ecedc:	781b      	ldrb	r3, [r3, #0]
 23ecede:	2b00      	cmp	r3, #0
 23ecee0:	f000 83b1 	beq.w	23ed646 <_Z6OBS_Dov+0x1eb6>
    strcpy (obs[oidx].sensor[sidx].id, "hi");
 23ecee4:	261c      	movs	r6, #28
    heat_index = hi_calculate(sht1_temp, sht1_humid);
 23ecee6:	eef0 0a69 	vmov.f32	s1, s19
 23eceea:	eeb0 0a48 	vmov.f32	s0, s16
 23eceee:	f7fb f913 	bl	23e8118 <_Z12hi_calculateff>
    strcpy (obs[oidx].sensor[sidx].id, "hi");
 23ecef2:	fb06 f608 	mul.w	r6, r6, r8
 23ecef6:	1970      	adds	r0, r6, r5
 23ecef8:	4976      	ldr	r1, [pc, #472]	; (23ed0d4 <_Z6OBS_Dov+0x1944>)
 23ecefa:	4420      	add	r0, r4
    heat_index = hi_calculate(sht1_temp, sht1_humid);
 23ecefc:	ee10 7a10 	vmov	r7, s0
    strcpy (obs[oidx].sensor[sidx].id, "hi");
 23ecf00:	f00f fffa 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ecf04:	f640 2398 	movw	r3, #2712	; 0xa98
 23ecf08:	9a00      	ldr	r2, [sp, #0]
 23ecf0a:	fb03 6302 	mla	r3, r3, r2, r6
 23ecf0e:	2200      	movs	r2, #0
 23ecf10:	4423      	add	r3, r4
 23ecf12:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;    
 23ecf14:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = (float) heat_index;
 23ecf16:	625f      	str	r7, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;    
 23ecf18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23ecf1c:	4490      	add	r8, r2
  if (WBT_exists) {
 23ecf1e:	4b6e      	ldr	r3, [pc, #440]	; (23ed0d8 <_Z6OBS_Dov+0x1948>)
 23ecf20:	781b      	ldrb	r3, [r3, #0]
 23ecf22:	2b00      	cmp	r3, #0
 23ecf24:	f000 8391 	beq.w	23ed64a <_Z6OBS_Dov+0x1eba>
    wetbulb_temp = wbt_calculate(sht1_temp, sht1_humid);
 23ecf28:	ee19 0a90 	vmov	r0, s19
 23ecf2c:	f7f8 f9cc 	bl	23e52c8 <__aeabi_f2d>
 23ecf30:	ec41 0b19 	vmov	d9, r0, r1
 23ecf34:	ee18 0a10 	vmov	r0, s16
 23ecf38:	f7f8 f9c6 	bl	23e52c8 <__aeabi_f2d>
 23ecf3c:	eeb0 1a49 	vmov.f32	s2, s18
 23ecf40:	eef0 1a69 	vmov.f32	s3, s19
 23ecf44:	ec41 0b10 	vmov	d0, r0, r1
 23ecf48:	f7fa fffe 	bl	23e7f48 <_Z13wbt_calculatedd>
    strcpy (obs[oidx].sensor[sidx].id, "wbt");
 23ecf4c:	261c      	movs	r6, #28
    wetbulb_temp = wbt_calculate(sht1_temp, sht1_humid);
 23ecf4e:	ec51 0b10 	vmov	r0, r1, d0
 23ecf52:	f7f8 fd09 	bl	23e5968 <__aeabi_d2f>
    strcpy (obs[oidx].sensor[sidx].id, "wbt");
 23ecf56:	fb06 f608 	mul.w	r6, r6, r8
    wetbulb_temp = wbt_calculate(sht1_temp, sht1_humid);
 23ecf5a:	4681      	mov	r9, r0
    strcpy (obs[oidx].sensor[sidx].id, "wbt");
 23ecf5c:	1970      	adds	r0, r6, r5
 23ecf5e:	4420      	add	r0, r4
 23ecf60:	495e      	ldr	r1, [pc, #376]	; (23ed0dc <_Z6OBS_Dov+0x194c>)
 23ecf62:	f00f ffc9 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ecf66:	f640 2398 	movw	r3, #2712	; 0xa98
 23ecf6a:	9a00      	ldr	r2, [sp, #0]
 23ecf6c:	fb03 6602 	mla	r6, r3, r2, r6
 23ecf70:	2300      	movs	r3, #0
 23ecf72:	4434      	add	r4, r6
 23ecf74:	6223      	str	r3, [r4, #32]
    obs[oidx].sensor[sidx++].inuse = true;  
 23ecf76:	2301      	movs	r3, #1
    obs[oidx].sensor[sidx].f_obs = (float) wetbulb_temp;
 23ecf78:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;  
 23ecf7c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 23ecf80:	4498      	add	r8, r3
  if (WBGT_exists) {
 23ecf82:	4b57      	ldr	r3, [pc, #348]	; (23ed0e0 <_Z6OBS_Dov+0x1950>)
 23ecf84:	4c57      	ldr	r4, [pc, #348]	; (23ed0e4 <_Z6OBS_Dov+0x1954>)
 23ecf86:	781b      	ldrb	r3, [r3, #0]
 23ecf88:	2b00      	cmp	r3, #0
 23ecf8a:	d039      	beq.n	23ed000 <_Z6OBS_Dov+0x1870>
    if (MCP_3_exists) {
 23ecf8c:	4b56      	ldr	r3, [pc, #344]	; (23ed0e8 <_Z6OBS_Dov+0x1958>)
 23ecf8e:	781b      	ldrb	r3, [r3, #0]
 23ecf90:	2b00      	cmp	r3, #0
 23ecf92:	f000 835d 	beq.w	23ed650 <_Z6OBS_Dov+0x1ec0>
      wbgt = wbgt_using_wbt(sht1_temp, mcp3_temp, wetbulb_temp); // TempAir, TempGlobe, TempWetBulb
 23ecf96:	4648      	mov	r0, r9
 23ecf98:	f7f8 f996 	bl	23e52c8 <__aeabi_f2d>
 23ecf9c:	ec41 0b1a 	vmov	d10, r0, r1
 23ecfa0:	ee18 0a90 	vmov	r0, s17
 23ecfa4:	f7f8 f990 	bl	23e52c8 <__aeabi_f2d>
 23ecfa8:	ec41 0b19 	vmov	d9, r0, r1
 23ecfac:	ee18 0a10 	vmov	r0, s16
 23ecfb0:	f7f8 f98a 	bl	23e52c8 <__aeabi_f2d>
 23ecfb4:	eeb0 2a4a 	vmov.f32	s4, s20
 23ecfb8:	eef0 2a6a 	vmov.f32	s5, s21
 23ecfbc:	eeb0 1a49 	vmov.f32	s2, s18
 23ecfc0:	eef0 1a69 	vmov.f32	s3, s19
 23ecfc4:	ec41 0b10 	vmov	d0, r0, r1
 23ecfc8:	f7fb fad2 	bl	23e8570 <_Z14wbgt_using_wbtddd>
    strcpy (obs[oidx].sensor[sidx].id, "wbgt");
 23ecfcc:	261c      	movs	r6, #28
      wbgt = wbgt_using_hi(heat_index);
 23ecfce:	ec51 0b10 	vmov	r0, r1, d0
 23ecfd2:	f7f8 fcc9 	bl	23e5968 <__aeabi_d2f>
    strcpy (obs[oidx].sensor[sidx].id, "wbgt");
 23ecfd6:	fb06 f608 	mul.w	r6, r6, r8
      wbgt = wbgt_using_hi(heat_index);
 23ecfda:	4607      	mov	r7, r0
    strcpy (obs[oidx].sensor[sidx].id, "wbgt");
 23ecfdc:	1970      	adds	r0, r6, r5
 23ecfde:	4943      	ldr	r1, [pc, #268]	; (23ed0ec <_Z6OBS_Dov+0x195c>)
 23ecfe0:	4420      	add	r0, r4
 23ecfe2:	f00f ff89 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ecfe6:	f640 2398 	movw	r3, #2712	; 0xa98
 23ecfea:	9a00      	ldr	r2, [sp, #0]
 23ecfec:	fb03 6302 	mla	r3, r3, r2, r6
 23ecff0:	2200      	movs	r2, #0
 23ecff2:	4423      	add	r3, r4
 23ecff4:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;    
 23ecff6:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = (float) wbgt;
 23ecff8:	625f      	str	r7, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;    
 23ecffa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23ecffe:	4490      	add	r8, r2
  if (TLW_exists) {
 23ed000:	4b3b      	ldr	r3, [pc, #236]	; (23ed0f0 <_Z6OBS_Dov+0x1960>)
 23ed002:	781b      	ldrb	r3, [r3, #0]
 23ed004:	2b00      	cmp	r3, #0
 23ed006:	f000 808c 	beq.w	23ed122 <_Z6OBS_Dov+0x1992>
    tlw.newReading();
 23ed00a:	483a      	ldr	r0, [pc, #232]	; (23ed0f4 <_Z6OBS_Dov+0x1964>)
 23ed00c:	f006 f94e 	bl	23f32ac <_ZN8LeafSens10newReadingEv>
    delay(100);
 23ed010:	2064      	movs	r0, #100	; 0x64
 23ed012:	f00b f957 	bl	23f82c4 <delay>
    float w = tlw.getWet();
 23ed016:	4837      	ldr	r0, [pc, #220]	; (23ed0f4 <_Z6OBS_Dov+0x1964>)
 23ed018:	f006 f95e 	bl	23f32d8 <_ZN8LeafSens6getWetEv>
    float t = tlw.getTemp();
 23ed01c:	4835      	ldr	r0, [pc, #212]	; (23ed0f4 <_Z6OBS_Dov+0x1964>)
    float w = tlw.getWet();
 23ed01e:	eef0 8a40 	vmov.f32	s17, s0
    float t = tlw.getTemp();
 23ed022:	f006 f96b 	bl	23f32fc <_ZN8LeafSens7getTempEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed026:	eeb4 0a40 	vcmp.f32	s0, s0
 23ed02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed02e:	f180 8317 	bvs.w	23ed660 <_Z6OBS_Dov+0x1ed0>
 23ed032:	eddf 7a31 	vldr	s15, [pc, #196]	; 23ed0f8 <_Z6OBS_Dov+0x1968>
 23ed036:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ed03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed03e:	f100 830f 	bmi.w	23ed660 <_Z6OBS_Dov+0x1ed0>
 23ed042:	eddf 7a2e 	vldr	s15, [pc, #184]	; 23ed0fc <_Z6OBS_Dov+0x196c>
 23ed046:	eeb4 0a67 	vcmp.f32	s0, s15
 23ed04a:	eddf 7a2d 	vldr	s15, [pc, #180]	; 23ed100 <_Z6OBS_Dov+0x1970>
 23ed04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed052:	fe37 8a80 	vselgt.f32	s16, s15, s0
    strcpy (obs[oidx].sensor[sidx].id, "tlww");
 23ed056:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed05a:	f640 2698 	movw	r6, #2712	; 0xa98
 23ed05e:	f04f 0900 	mov.w	r9, #0
    obs[oidx].sensor[sidx++].inuse = true; 
 23ed062:	2701      	movs	r7, #1
 23ed064:	fb0a f208 	mul.w	r2, sl, r8
    strcpy (obs[oidx].sensor[sidx].id, "tlww");
 23ed068:	18a8      	adds	r0, r5, r2
 23ed06a:	4926      	ldr	r1, [pc, #152]	; (23ed104 <_Z6OBS_Dov+0x1974>)
 23ed06c:	4420      	add	r0, r4
 23ed06e:	9201      	str	r2, [sp, #4]
 23ed070:	f00f ff42 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed074:	9b00      	ldr	r3, [sp, #0]
 23ed076:	9a01      	ldr	r2, [sp, #4]
 23ed078:	435e      	muls	r6, r3
    strcpy (obs[oidx].sensor[sidx].id, "tlwt");
 23ed07a:	eb02 000a 	add.w	r0, r2, sl
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed07e:	1993      	adds	r3, r2, r6
 23ed080:	4423      	add	r3, r4
    strcpy (obs[oidx].sensor[sidx].id, "tlwt");
 23ed082:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = (float) w;
 23ed084:	edc3 8a09 	vstr	s17, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed088:	f8c3 9020 	str.w	r9, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true; 
 23ed08c:	f108 0b01 	add.w	fp, r8, #1
 23ed090:	f883 7030 	strb.w	r7, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tlwt");
 23ed094:	491c      	ldr	r1, [pc, #112]	; (23ed108 <_Z6OBS_Dov+0x1978>)
 23ed096:	4420      	add	r0, r4
 23ed098:	f00f ff2e 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed09c:	fb0a 630b 	mla	r3, sl, fp, r6
 23ed0a0:	e036      	b.n	23ed110 <_Z6OBS_Dov+0x1980>
 23ed0a2:	bf00      	nop
 23ed0a4:	1006a294 	.word	0x1006a294
 23ed0a8:	023fe550 	.word	0x023fe550
 23ed0ac:	1006a298 	.word	0x1006a298
 23ed0b0:	023fe562 	.word	0x023fe562
 23ed0b4:	1006a304 	.word	0x1006a304
 23ed0b8:	023fe566 	.word	0x023fe566
 23ed0bc:	023fe56d 	.word	0x023fe56d
 23ed0c0:	023fe574 	.word	0x023fe574
 23ed0c4:	023fe57c 	.word	0x023fe57c
 23ed0c8:	023fe583 	.word	0x023fe583
 23ed0cc:	023fe58a 	.word	0x023fe58a
 23ed0d0:	1006a2e7 	.word	0x1006a2e7
 23ed0d4:	023fe592 	.word	0x023fe592
 23ed0d8:	1006a81e 	.word	0x1006a81e
 23ed0dc:	023fe595 	.word	0x023fe595
 23ed0e0:	1006a81d 	.word	0x1006a81d
 23ed0e4:	1006f550 	.word	0x1006f550
 23ed0e8:	1006a302 	.word	0x1006a302
 23ed0ec:	023fe599 	.word	0x023fe599
 23ed0f0:	1006a818 	.word	0x1006a818
 23ed0f4:	1007ac04 	.word	0x1007ac04
 23ed0f8:	c2200000 	.word	0xc2200000
 23ed0fc:	42700000 	.word	0x42700000
 23ed100:	c479f99a 	.word	0xc479f99a
 23ed104:	023fe59e 	.word	0x023fe59e
 23ed108:	023fe5a3 	.word	0x023fe5a3
 23ed10c:	1007aa24 	.word	0x1007aa24
 23ed110:	4423      	add	r3, r4
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23ed112:	ed83 8a09 	vstr	s16, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed116:	f8c3 9020 	str.w	r9, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ed11a:	f108 0802 	add.w	r8, r8, #2
 23ed11e:	f883 7030 	strb.w	r7, [r3, #48]	; 0x30
  if (TSM_exists) {
 23ed122:	4bd9      	ldr	r3, [pc, #868]	; (23ed488 <_Z6OBS_Dov+0x1cf8>)
 23ed124:	781b      	ldrb	r3, [r3, #0]
 23ed126:	2b00      	cmp	r3, #0
 23ed128:	d07f      	beq.n	23ed22a <_Z6OBS_Dov+0x1a9a>
    tsm.newReading();
 23ed12a:	48d8      	ldr	r0, [pc, #864]	; (23ed48c <_Z6OBS_Dov+0x1cfc>)
 23ed12c:	f008 fb99 	bl	23f5862 <_ZN5SVCS310newReadingEv>
    delay(100);
 23ed130:	2064      	movs	r0, #100	; 0x64
 23ed132:	f00b f8c7 	bl	23f82c4 <delay>
    float e25 = tsm.getE25();
 23ed136:	48d5      	ldr	r0, [pc, #852]	; (23ed48c <_Z6OBS_Dov+0x1cfc>)
 23ed138:	f008 fbaa 	bl	23f5890 <_ZN5SVCS36getE25Ev>
    float ec = tsm.getEC();
 23ed13c:	48d3      	ldr	r0, [pc, #844]	; (23ed48c <_Z6OBS_Dov+0x1cfc>)
    float e25 = tsm.getE25();
 23ed13e:	eef0 9a40 	vmov.f32	s19, s0
    float ec = tsm.getEC();
 23ed142:	f008 fbb7 	bl	23f58b4 <_ZN5SVCS35getECEv>
    float vwc = tsm.getVWC();
 23ed146:	48d1      	ldr	r0, [pc, #836]	; (23ed48c <_Z6OBS_Dov+0x1cfc>)
    float ec = tsm.getEC();
 23ed148:	eeb0 9a40 	vmov.f32	s18, s0
    float vwc = tsm.getVWC();
 23ed14c:	f008 fbd6 	bl	23f58fc <_ZN5SVCS36getVWCEv>
    float t = tsm.getTemp();
 23ed150:	48ce      	ldr	r0, [pc, #824]	; (23ed48c <_Z6OBS_Dov+0x1cfc>)
    float vwc = tsm.getVWC();
 23ed152:	eef0 8a40 	vmov.f32	s17, s0
    float t = tsm.getTemp();
 23ed156:	f008 fbbf 	bl	23f58d8 <_ZN5SVCS37getTempEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed15a:	eeb4 0a40 	vcmp.f32	s0, s0
 23ed15e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed162:	f180 8280 	bvs.w	23ed666 <_Z6OBS_Dov+0x1ed6>
 23ed166:	eddf 7aca 	vldr	s15, [pc, #808]	; 23ed490 <_Z6OBS_Dov+0x1d00>
 23ed16a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ed16e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed172:	f100 8278 	bmi.w	23ed666 <_Z6OBS_Dov+0x1ed6>
 23ed176:	eddf 7ac7 	vldr	s15, [pc, #796]	; 23ed494 <_Z6OBS_Dov+0x1d04>
 23ed17a:	eeb4 0a67 	vcmp.f32	s0, s15
 23ed17e:	eddf 7ac6 	vldr	s15, [pc, #792]	; 23ed498 <_Z6OBS_Dov+0x1d08>
 23ed182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed186:	fe37 8a80 	vselgt.f32	s16, s15, s0
    strcpy (obs[oidx].sensor[sidx].id, "tsme25");
 23ed18a:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed18e:	f640 2698 	movw	r6, #2712	; 0xa98
 23ed192:	fb0a f908 	mul.w	r9, sl, r8
    strcpy (obs[oidx].sensor[sidx].id, "tsme25");
 23ed196:	eb05 0009 	add.w	r0, r5, r9
 23ed19a:	49c0      	ldr	r1, [pc, #768]	; (23ed49c <_Z6OBS_Dov+0x1d0c>)
 23ed19c:	4420      	add	r0, r4
 23ed19e:	f00f feab 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed1a2:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ed1a4:	2701      	movs	r7, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed1a6:	435e      	muls	r6, r3
 23ed1a8:	2300      	movs	r3, #0
 23ed1aa:	eb09 0206 	add.w	r2, r9, r6
    strcpy (obs[oidx].sensor[sidx].id, "tsmec");
 23ed1ae:	eb09 000a 	add.w	r0, r9, sl
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed1b2:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "tsmec");
 23ed1b4:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed1b6:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = (float) e25;
 23ed1b8:	edc2 9a09 	vstr	s19, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "tsmec");
 23ed1bc:	49b8      	ldr	r1, [pc, #736]	; (23ed4a0 <_Z6OBS_Dov+0x1d10>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ed1be:	f882 7030 	strb.w	r7, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tsmec");
 23ed1c2:	4420      	add	r0, r4
 23ed1c4:	f00f fe98 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed1c8:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ed1ca:	f108 0b01 	add.w	fp, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed1ce:	fb0a 620b 	mla	r2, sl, fp, r6
    strcpy (obs[oidx].sensor[sidx].id, "tsmvwc");
 23ed1d2:	f109 0038 	add.w	r0, r9, #56	; 0x38
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed1d6:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "tsmvwc");
 23ed1d8:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed1da:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = (float) ec;
 23ed1dc:	ed82 9a09 	vstr	s18, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "tsmvwc");
 23ed1e0:	49b0      	ldr	r1, [pc, #704]	; (23ed4a4 <_Z6OBS_Dov+0x1d14>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ed1e2:	f882 7030 	strb.w	r7, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tsmvwc");
 23ed1e6:	4420      	add	r0, r4
 23ed1e8:	f00f fe86 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed1ec:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ed1ee:	f108 0b02 	add.w	fp, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed1f2:	fb0a 620b 	mla	r2, sl, fp, r6
    obs[oidx].sensor[sidx++].inuse = true; 
 23ed1f6:	f108 0b03 	add.w	fp, r8, #3
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed1fa:	fb0a 660b 	mla	r6, sl, fp, r6
    strcpy (obs[oidx].sensor[sidx].id, "tsmt");
 23ed1fe:	f109 0054 	add.w	r0, r9, #84	; 0x54
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed202:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "tsmt");
 23ed204:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed206:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = (float) vwc;
 23ed208:	edc2 8a09 	vstr	s17, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "tsmt");
 23ed20c:	49a6      	ldr	r1, [pc, #664]	; (23ed4a8 <_Z6OBS_Dov+0x1d18>)
    obs[oidx].sensor[sidx++].inuse = true; 
 23ed20e:	f882 7030 	strb.w	r7, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tsmt");
 23ed212:	4420      	add	r0, r4
 23ed214:	f00f fe70 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed218:	4426      	add	r6, r4
 23ed21a:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23ed21c:	ed86 8a09 	vstr	s16, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed220:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ed222:	f108 0804 	add.w	r8, r8, #4
 23ed226:	f886 7030 	strb.w	r7, [r6, #48]	; 0x30
  if (TMSM_exists) {
 23ed22a:	4ba0      	ldr	r3, [pc, #640]	; (23ed4ac <_Z6OBS_Dov+0x1d1c>)
 23ed22c:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 23ed4e0 <_Z6OBS_Dov+0x1d50>
 23ed230:	781a      	ldrb	r2, [r3, #0]
 23ed232:	2a00      	cmp	r2, #0
 23ed234:	f000 80c4 	beq.w	23ed3c0 <_Z6OBS_Dov+0x1c30>
    tmsm.newReading();
 23ed238:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed23c:	f640 2798 	movw	r7, #2712	; 0xa98
 23ed240:	fb0a f608 	mul.w	r6, sl, r8
    tmsm.newReading();
 23ed244:	489a      	ldr	r0, [pc, #616]	; (23ed4b0 <_Z6OBS_Dov+0x1d20>)
 23ed246:	f008 fba6 	bl	23f5996 <_ZN7SVMULTI10newReadingEv>
    delay(100);
 23ed24a:	2064      	movs	r0, #100	; 0x64
 23ed24c:	f00b f83a 	bl	23f82c4 <delay>
    tmsm.getData(&multi);
 23ed250:	4897      	ldr	r0, [pc, #604]	; (23ed4b0 <_Z6OBS_Dov+0x1d20>)
 23ed252:	a90c      	add	r1, sp, #48	; 0x30
 23ed254:	f008 fbdc 	bl	23f5a10 <_ZN7SVMULTI7getDataEP10soil_ret_t>
    strcpy (obs[oidx].sensor[sidx].id, "tmsms1");
 23ed258:	19a8      	adds	r0, r5, r6
 23ed25a:	4996      	ldr	r1, [pc, #600]	; (23ed4b4 <_Z6OBS_Dov+0x1d24>)
 23ed25c:	4420      	add	r0, r4
 23ed25e:	f00f fe4b 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed262:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ed264:	f04f 0b01 	mov.w	fp, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed268:	435f      	muls	r7, r3
 23ed26a:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[0];
 23ed26c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed26e:	19f1      	adds	r1, r6, r7
    strcpy (obs[oidx].sensor[sidx].id, "tmsms2");
 23ed270:	eb06 000a 	add.w	r0, r6, sl
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed274:	4421      	add	r1, r4
    strcpy (obs[oidx].sensor[sidx].id, "tmsms2");
 23ed276:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed278:	620b      	str	r3, [r1, #32]
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[0];
 23ed27a:	624a      	str	r2, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ed27c:	f881 b030 	strb.w	fp, [r1, #48]	; 0x30
 23ed280:	f108 0201 	add.w	r2, r8, #1
    strcpy (obs[oidx].sensor[sidx].id, "tmsms2");
 23ed284:	498c      	ldr	r1, [pc, #560]	; (23ed4b8 <_Z6OBS_Dov+0x1d28>)
 23ed286:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ed288:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms2");
 23ed28a:	f00f fe35 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed28e:	2300      	movs	r3, #0
 23ed290:	9a01      	ldr	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms3");
 23ed292:	f106 0038 	add.w	r0, r6, #56	; 0x38
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed296:	fb0a 7102 	mla	r1, sl, r2, r7
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[1];
 23ed29a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed29c:	4421      	add	r1, r4
    strcpy (obs[oidx].sensor[sidx].id, "tmsms3");
 23ed29e:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed2a0:	620b      	str	r3, [r1, #32]
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[1];
 23ed2a2:	624a      	str	r2, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ed2a4:	f881 b030 	strb.w	fp, [r1, #48]	; 0x30
 23ed2a8:	f108 0202 	add.w	r2, r8, #2
    strcpy (obs[oidx].sensor[sidx].id, "tmsms3");
 23ed2ac:	4983      	ldr	r1, [pc, #524]	; (23ed4bc <_Z6OBS_Dov+0x1d2c>)
 23ed2ae:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ed2b0:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms3");
 23ed2b2:	f00f fe21 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed2b6:	2300      	movs	r3, #0
 23ed2b8:	9a01      	ldr	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms4");
 23ed2ba:	f106 0054 	add.w	r0, r6, #84	; 0x54
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed2be:	fb0a 7102 	mla	r1, sl, r2, r7
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[2];
 23ed2c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed2c4:	4421      	add	r1, r4
    strcpy (obs[oidx].sensor[sidx].id, "tmsms4");
 23ed2c6:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed2c8:	620b      	str	r3, [r1, #32]
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[2];
 23ed2ca:	624a      	str	r2, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ed2cc:	f881 b030 	strb.w	fp, [r1, #48]	; 0x30
 23ed2d0:	f108 0203 	add.w	r2, r8, #3
    strcpy (obs[oidx].sensor[sidx].id, "tmsms4");
 23ed2d4:	4420      	add	r0, r4
 23ed2d6:	497a      	ldr	r1, [pc, #488]	; (23ed4c0 <_Z6OBS_Dov+0x1d30>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ed2d8:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms4");
 23ed2da:	f00f fe0d 	bl	23fcef8 <strcpy>
    t = multi.temp[0];
 23ed2de:	ed9d 8a0c 	vldr	s16, [sp, #48]	; 0x30
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed2e2:	eeb4 8a48 	vcmp.f32	s16, s16
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed2e6:	2300      	movs	r3, #0
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed2e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed2ec:	9a01      	ldr	r2, [sp, #4]
 23ed2ee:	fb0a 7702 	mla	r7, sl, r2, r7
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[3];
 23ed2f2:	9a16      	ldr	r2, [sp, #88]	; 0x58
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed2f4:	443c      	add	r4, r7
 23ed2f6:	6223      	str	r3, [r4, #32]
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[3];
 23ed2f8:	6262      	str	r2, [r4, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ed2fa:	f108 0704 	add.w	r7, r8, #4
 23ed2fe:	f884 b030 	strb.w	fp, [r4, #48]	; 0x30
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed302:	f180 81b3 	bvs.w	23ed66c <_Z6OBS_Dov+0x1edc>
 23ed306:	eddf 7a62 	vldr	s15, [pc, #392]	; 23ed490 <_Z6OBS_Dov+0x1d00>
 23ed30a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23ed30e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed312:	f100 81ab 	bmi.w	23ed66c <_Z6OBS_Dov+0x1edc>
 23ed316:	eddf 7a5f 	vldr	s15, [pc, #380]	; 23ed494 <_Z6OBS_Dov+0x1d04>
 23ed31a:	eeb4 8a67 	vcmp.f32	s16, s15
 23ed31e:	eddf 7a5e 	vldr	s15, [pc, #376]	; 23ed498 <_Z6OBS_Dov+0x1d08>
 23ed322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed326:	fe37 8a88 	vselgt.f32	s16, s15, s16
    strcpy (obs[oidx].sensor[sidx].id, "tmsmt1");
 23ed32a:	f106 0070 	add.w	r0, r6, #112	; 0x70
 23ed32e:	4428      	add	r0, r5
 23ed330:	4964      	ldr	r1, [pc, #400]	; (23ed4c4 <_Z6OBS_Dov+0x1d34>)
 23ed332:	4448      	add	r0, r9
 23ed334:	f00f fde0 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed338:	f640 2298 	movw	r2, #2712	; 0xa98
 23ed33c:	211c      	movs	r1, #28
 23ed33e:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ed340:	f108 0405 	add.w	r4, r8, #5
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed344:	435a      	muls	r2, r3
 23ed346:	fb01 2207 	mla	r2, r1, r7, r2
 23ed34a:	444a      	add	r2, r9
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23ed34c:	ed82 8a09 	vstr	s16, [r2, #36]	; 0x24
    t = multi.temp[1];
 23ed350:	ed9d 8a0d 	vldr	s16, [sp, #52]	; 0x34
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed354:	2100      	movs	r1, #0
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed356:	eeb4 8a48 	vcmp.f32	s16, s16
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed35a:	6211      	str	r1, [r2, #32]
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed35c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    obs[oidx].sensor[sidx++].inuse = true;
 23ed360:	f04f 0101 	mov.w	r1, #1
 23ed364:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed368:	f180 8183 	bvs.w	23ed672 <_Z6OBS_Dov+0x1ee2>
 23ed36c:	eddf 7a48 	vldr	s15, [pc, #288]	; 23ed490 <_Z6OBS_Dov+0x1d00>
 23ed370:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23ed374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed378:	f100 817b 	bmi.w	23ed672 <_Z6OBS_Dov+0x1ee2>
 23ed37c:	eddf 7a45 	vldr	s15, [pc, #276]	; 23ed494 <_Z6OBS_Dov+0x1d04>
 23ed380:	eeb4 8a67 	vcmp.f32	s16, s15
 23ed384:	eddf 7a44 	vldr	s15, [pc, #272]	; 23ed498 <_Z6OBS_Dov+0x1d08>
 23ed388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed38c:	fe37 8a88 	vselgt.f32	s16, s15, s16
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed390:	f640 2898 	movw	r8, #2712	; 0xa98
    strcpy (obs[oidx].sensor[sidx].id, "tmsmt2");
 23ed394:	f106 008c 	add.w	r0, r6, #140	; 0x8c
 23ed398:	4428      	add	r0, r5
 23ed39a:	494b      	ldr	r1, [pc, #300]	; (23ed4c8 <_Z6OBS_Dov+0x1d38>)
 23ed39c:	4448      	add	r0, r9
 23ed39e:	f00f fdab 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed3a2:	221c      	movs	r2, #28
 23ed3a4:	9b00      	ldr	r3, [sp, #0]
 23ed3a6:	fb08 f803 	mul.w	r8, r8, r3
 23ed3aa:	fb02 8804 	mla	r8, r2, r4, r8
 23ed3ae:	2200      	movs	r2, #0
 23ed3b0:	44c8      	add	r8, r9
 23ed3b2:	f8c8 2020 	str.w	r2, [r8, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ed3b6:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23ed3b8:	ed88 8a09 	vstr	s16, [r8, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ed3bc:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
  obs[oidx].hth = SystemStatusBits;
 23ed3c0:	f640 2298 	movw	r2, #2712	; 0xa98
 23ed3c4:	9b00      	ldr	r3, [sp, #0]
  OBS_Log(oidx);
 23ed3c6:	9800      	ldr	r0, [sp, #0]
  obs[oidx].hth = SystemStatusBits;
 23ed3c8:	fb02 9303 	mla	r3, r2, r3, r9
 23ed3cc:	4a3f      	ldr	r2, [pc, #252]	; (23ed4cc <_Z6OBS_Dov+0x1d3c>)
 23ed3ce:	6812      	ldr	r2, [r2, #0]
 23ed3d0:	615a      	str	r2, [r3, #20]
  OBS_Log(oidx);
 23ed3d2:	f7fd fa37 	bl	23ea844 <_Z7OBS_Logi>
  lastOBS = System.millis();
 23ed3d6:	f7f9 fc09 	bl	23e6bec <_ZN11SystemClass6millisEv>
 23ed3da:	4b3d      	ldr	r3, [pc, #244]	; (23ed4d0 <_Z6OBS_Dov+0x1d40>)
 23ed3dc:	e9c3 0100 	strd	r0, r1, [r3]
}
 23ed3e0:	b019      	add	sp, #100	; 0x64
 23ed3e2:	ecbd 8b06 	vpop	{d8-d10}
 23ed3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    float h = 0.0;
 23ed3ea:	eddf 8a3a 	vldr	s17, [pc, #232]	; 23ed4d4 <_Z6OBS_Dov+0x1d44>
    float t = 0.0;
 23ed3ee:	eeb0 8a68 	vmov.f32	s16, s17
    float p = 0.0;
 23ed3f2:	eef0 9a68 	vmov.f32	s19, s17
 23ed3f6:	f7fe bd10 	b.w	23ebe1a <_Z6OBS_Dov+0x68a>
      p = bm32.readPressure()/100.0F;       // bp2 hPa
 23ed3fa:	4837      	ldr	r0, [pc, #220]	; (23ed4d8 <_Z6OBS_Dov+0x1d48>)
 23ed3fc:	f003 fa81 	bl	23f0902 <_ZN15Adafruit_BMP3XX12readPressureEv>
 23ed400:	eddf 7a36 	vldr	s15, [pc, #216]	; 23ed4dc <_Z6OBS_Dov+0x1d4c>
      t = bm32.readTemperature();           // bt2
 23ed404:	4834      	ldr	r0, [pc, #208]	; (23ed4d8 <_Z6OBS_Dov+0x1d48>)
      p = bm32.readPressure()/100.0F;       // bp2 hPa
 23ed406:	eec0 9a27 	vdiv.f32	s19, s0, s15
      t = bm32.readTemperature();           // bt2
 23ed40a:	f003 fa6f 	bl	23f08ec <_ZN15Adafruit_BMP3XX15readTemperatureEv>
 23ed40e:	f7fe bca3 	b.w	23ebd58 <_Z6OBS_Dov+0x5c8>
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23ed412:	eddf 9a21 	vldr	s19, [pc, #132]	; 23ed498 <_Z6OBS_Dov+0x1d08>
 23ed416:	f7fe bd27 	b.w	23ebe68 <_Z6OBS_Dov+0x6d8>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed41a:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 23ed498 <_Z6OBS_Dov+0x1d08>
 23ed41e:	f7fe bd3b 	b.w	23ebe98 <_Z6OBS_Dov+0x708>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ed422:	eddf 8a1d 	vldr	s17, [pc, #116]	; 23ed498 <_Z6OBS_Dov+0x1d08>
 23ed426:	f7fe bd4d 	b.w	23ebec4 <_Z6OBS_Dov+0x734>
    obs[oidx].sensor[sidx++].inuse = true;
 23ed42a:	46b8      	mov	r8, r7
 23ed42c:	f7fe bd8e 	b.w	23ebf4c <_Z6OBS_Dov+0x7bc>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ed430:	ed9f 0a19 	vldr	s0, [pc, #100]	; 23ed498 <_Z6OBS_Dov+0x1d08>
 23ed434:	f7fe bdb7 	b.w	23ebfa6 <_Z6OBS_Dov+0x816>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed438:	ed9f 0a17 	vldr	s0, [pc, #92]	; 23ed498 <_Z6OBS_Dov+0x1d08>
 23ed43c:	f7fe bdec 	b.w	23ec018 <_Z6OBS_Dov+0x888>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed440:	ed9f 8a15 	vldr	s16, [pc, #84]	; 23ed498 <_Z6OBS_Dov+0x1d08>
 23ed444:	f7fe be27 	b.w	23ec096 <_Z6OBS_Dov+0x906>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ed448:	eddf 9a13 	vldr	s19, [pc, #76]	; 23ed498 <_Z6OBS_Dov+0x1d08>
 23ed44c:	f7fe be5a 	b.w	23ec104 <_Z6OBS_Dov+0x974>
  float sht1_temp = 0.0;
 23ed450:	ed9f 8a20 	vldr	s16, [pc, #128]	; 23ed4d4 <_Z6OBS_Dov+0x1d44>
  float sht1_humid = 0.0;
 23ed454:	eef0 9a48 	vmov.f32	s19, s16
 23ed458:	f7fe be63 	b.w	23ec122 <_Z6OBS_Dov+0x992>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed45c:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 23ed498 <_Z6OBS_Dov+0x1d08>
 23ed460:	f7fe bebe 	b.w	23ec1e0 <_Z6OBS_Dov+0xa50>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ed464:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 23ed498 <_Z6OBS_Dov+0x1d08>
 23ed468:	f7fe bef1 	b.w	23ec24e <_Z6OBS_Dov+0xabe>
      t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed46c:	464e      	mov	r6, r9
 23ed46e:	4657      	mov	r7, sl
 23ed470:	f7fe bf32 	b.w	23ec2d8 <_Z6OBS_Dov+0xb48>
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ed474:	a702      	add	r7, pc, #8	; (adr r7, 23ed480 <_Z6OBS_Dov+0x1cf0>)
 23ed476:	e9d7 6700 	ldrd	r6, r7, [r7]
 23ed47a:	f7fe bf4c 	b.w	23ec316 <_Z6OBS_Dov+0xb86>
 23ed47e:	bf00      	nop
 23ed480:	33333333 	.word	0x33333333
 23ed484:	c08f3f33 	.word	0xc08f3f33
 23ed488:	1006a81a 	.word	0x1006a81a
 23ed48c:	1007ac14 	.word	0x1007ac14
 23ed490:	c2200000 	.word	0xc2200000
 23ed494:	42700000 	.word	0x42700000
 23ed498:	c479f99a 	.word	0xc479f99a
 23ed49c:	023fe5a8 	.word	0x023fe5a8
 23ed4a0:	023fe5af 	.word	0x023fe5af
 23ed4a4:	023fe5b5 	.word	0x023fe5b5
 23ed4a8:	023fe5bc 	.word	0x023fe5bc
 23ed4ac:	1006a819 	.word	0x1006a819
 23ed4b0:	1007ac0c 	.word	0x1007ac0c
 23ed4b4:	023fe5c1 	.word	0x023fe5c1
 23ed4b8:	023fe5c8 	.word	0x023fe5c8
 23ed4bc:	023fe5cf 	.word	0x023fe5cf
 23ed4c0:	023fe5d6 	.word	0x023fe5d6
 23ed4c4:	023fe5dd 	.word	0x023fe5dd
 23ed4c8:	023fe5e4 	.word	0x023fe5e4
 23ed4cc:	1006a1cc 	.word	0x1006a1cc
 23ed4d0:	1006aec8 	.word	0x1006aec8
 23ed4d4:	00000000 	.word	0x00000000
 23ed4d8:	1006aa60 	.word	0x1006aa60
 23ed4dc:	42c80000 	.word	0x42c80000
 23ed4e0:	1006f550 	.word	0x1006f550
      Output ("ERR:HDC1 Read");
 23ed4e4:	4866      	ldr	r0, [pc, #408]	; (23ed680 <_Z6OBS_Dov+0x1ef0>)
 23ed4e6:	f7f9 fe7d 	bl	23e71e4 <_Z6OutputPKc>
      SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
 23ed4ea:	f8db 3000 	ldr.w	r3, [fp]
 23ed4ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23ed4f2:	f7fe bf16 	b.w	23ec322 <_Z6OBS_Dov+0xb92>
      t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed4f6:	464e      	mov	r6, r9
 23ed4f8:	4657      	mov	r7, sl
 23ed4fa:	f7fe bf7f 	b.w	23ec3fc <_Z6OBS_Dov+0xc6c>
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ed4fe:	a75e      	add	r7, pc, #376	; (adr r7, 23ed678 <_Z6OBS_Dov+0x1ee8>)
 23ed500:	e9d7 6700 	ldrd	r6, r7, [r7]
 23ed504:	f7fe bf99 	b.w	23ec43a <_Z6OBS_Dov+0xcaa>
      Output ("ERR:HDC1 Read");
 23ed508:	485d      	ldr	r0, [pc, #372]	; (23ed680 <_Z6OBS_Dov+0x1ef0>)
 23ed50a:	f7f9 fe6b 	bl	23e71e4 <_Z6OutputPKc>
      SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
 23ed50e:	f8db 3000 	ldr.w	r3, [fp]
 23ed512:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 23ed516:	f7fe bf96 	b.w	23ec446 <_Z6OBS_Dov+0xcb6>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed51a:	ed9f aa5a 	vldr	s20, [pc, #360]	; 23ed684 <_Z6OBS_Dov+0x1ef4>
 23ed51e:	f7fe bff2 	b.w	23ec506 <_Z6OBS_Dov+0xd76>
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23ed522:	eddf 8a58 	vldr	s17, [pc, #352]	; 23ed684 <_Z6OBS_Dov+0x1ef4>
 23ed526:	f7ff b837 	b.w	23ec598 <_Z6OBS_Dov+0xe08>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed52a:	ed9f aa56 	vldr	s20, [pc, #344]	; 23ed684 <_Z6OBS_Dov+0x1ef4>
 23ed52e:	f7ff b888 	b.w	23ec642 <_Z6OBS_Dov+0xeb2>
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23ed532:	eddf 8a54 	vldr	s17, [pc, #336]	; 23ed684 <_Z6OBS_Dov+0x1ef4>
 23ed536:	f7ff b89c 	b.w	23ec672 <_Z6OBS_Dov+0xee2>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed53a:	ed9f aa52 	vldr	s20, [pc, #328]	; 23ed684 <_Z6OBS_Dov+0x1ef4>
 23ed53e:	f7ff b8f0 	b.w	23ec722 <_Z6OBS_Dov+0xf92>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ed542:	eddf 8a50 	vldr	s17, [pc, #320]	; 23ed684 <_Z6OBS_Dov+0x1ef4>
 23ed546:	f7ff b904 	b.w	23ec752 <_Z6OBS_Dov+0xfc2>
        SI1145_exists = false;
 23ed54a:	7030      	strb	r0, [r6, #0]
        Output ("SI OFFLINE");
 23ed54c:	484e      	ldr	r0, [pc, #312]	; (23ed688 <_Z6OBS_Dov+0x1ef8>)
 23ed54e:	f7f9 fe49 	bl	23e71e4 <_Z6OutputPKc>
        SystemStatusBits |= SSB_SI1145;  // Turn On Bit    
 23ed552:	f8db 3000 	ldr.w	r3, [fp]
 23ed556:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 23ed55a:	f8cb 3000 	str.w	r3, [fp]
 23ed55e:	f7ff b997 	b.w	23ec890 <_Z6OBS_Dov+0x1100>
    si_vis = (isnan(si_vis) || (si_vis < QC_MIN_VI)  || (si_vis > QC_MAX_VI)) ? QC_ERR_VI  : si_vis;
 23ed562:	eddf aa48 	vldr	s21, [pc, #288]	; 23ed684 <_Z6OBS_Dov+0x1ef4>
 23ed566:	f7ff b9a9 	b.w	23ec8bc <_Z6OBS_Dov+0x112c>
    si_ir  = (isnan(si_ir)  || (si_ir  < QC_MIN_IR)  || (si_ir  > QC_MAX_IR)) ? QC_ERR_IR  : si_ir;
 23ed56a:	ed9f aa46 	vldr	s20, [pc, #280]	; 23ed684 <_Z6OBS_Dov+0x1ef4>
 23ed56e:	f7ff b9b5 	b.w	23ec8dc <_Z6OBS_Dov+0x114c>
    si_uv  = (isnan(si_uv)  || (si_uv  < QC_MIN_UV)  || (si_uv  > QC_MAX_UV)) ? QC_ERR_UV  : si_uv;
 23ed572:	eddf 8a44 	vldr	s17, [pc, #272]	; 23ed684 <_Z6OBS_Dov+0x1ef4>
 23ed576:	f7ff b9ff 	b.w	23ec978 <_Z6OBS_Dov+0x11e8>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed57a:	ed9f 0a42 	vldr	s0, [pc, #264]	; 23ed684 <_Z6OBS_Dov+0x1ef4>
 23ed57e:	f7ff ba67 	b.w	23eca50 <_Z6OBS_Dov+0x12c0>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed582:	ed9f 0a40 	vldr	s0, [pc, #256]	; 23ed684 <_Z6OBS_Dov+0x1ef4>
 23ed586:	f7ff ba9f 	b.w	23ecac8 <_Z6OBS_Dov+0x1338>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed58a:	eddf 8a3e 	vldr	s17, [pc, #248]	; 23ed684 <_Z6OBS_Dov+0x1ef4>
 23ed58e:	f7ff bad9 	b.w	23ecb44 <_Z6OBS_Dov+0x13b4>
  float mcp3_temp = 0.0;  // globe temperature
 23ed592:	eddf 8a3e 	vldr	s17, [pc, #248]	; 23ed68c <_Z6OBS_Dov+0x1efc>
 23ed596:	f7ff bae3 	b.w	23ecb60 <_Z6OBS_Dov+0x13d0>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed59a:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 23ed684 <_Z6OBS_Dov+0x1ef4>
 23ed59e:	f7ff bb0d 	b.w	23ecbbc <_Z6OBS_Dov+0x142c>
    lux = (isnan(lux) || (lux < QC_MIN_VLX)  || (lux > QC_MAX_VLX))  ? QC_ERR_VLX  : lux;
 23ed5a2:	ed9f aa3b 	vldr	s20, [pc, #236]	; 23ed690 <_Z6OBS_Dov+0x1f00>
 23ed5a6:	f7ff bb34 	b.w	23ecc12 <_Z6OBS_Dov+0x1482>
    lux = (isnan(lux) || (lux < QC_MIN_BLX)  || (lux > QC_MAX_BLX))  ? QC_ERR_BLX  : lux;
 23ed5aa:	ed9f aa36 	vldr	s20, [pc, #216]	; 23ed684 <_Z6OBS_Dov+0x1ef4>
 23ed5ae:	f7ff bb61 	b.w	23ecc74 <_Z6OBS_Dov+0x14e4>
  else if (A4_State == A4_STATE_RAIN) {
 23ed5b2:	2b02      	cmp	r3, #2
 23ed5b4:	f47f abe8 	bne.w	23ecd88 <_Z6OBS_Dov+0x15f8>
    strcpy (obs[oidx].sensor[sidx].id, "rg2");
 23ed5b8:	f04f 0b1c 	mov.w	fp, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed5bc:	f640 2698 	movw	r6, #2712	; 0xa98
 23ed5c0:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ed5c4:	f04f 0901 	mov.w	r9, #1
 23ed5c8:	fb0b f708 	mul.w	r7, fp, r8
    strcpy (obs[oidx].sensor[sidx].id, "rg2");
 23ed5cc:	19e8      	adds	r0, r5, r7
 23ed5ce:	4931      	ldr	r1, [pc, #196]	; (23ed694 <_Z6OBS_Dov+0x1f04>)
 23ed5d0:	4420      	add	r0, r4
 23ed5d2:	f00f fc91 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed5d6:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
 23ed5d8:	eb07 000b 	add.w	r0, r7, fp
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed5dc:	435e      	muls	r6, r3
 23ed5de:	19ba      	adds	r2, r7, r6
 23ed5e0:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
 23ed5e2:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23ed5e4:	f108 0301 	add.w	r3, r8, #1
    obs[oidx].sensor[sidx].f_obs = rain2;
 23ed5e8:	ed82 9a09 	vstr	s18, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
 23ed5ec:	492a      	ldr	r1, [pc, #168]	; (23ed698 <_Z6OBS_Dov+0x1f08>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed5ee:	f8c2 a020 	str.w	sl, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ed5f2:	f882 9030 	strb.w	r9, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
 23ed5f6:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ed5f8:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
 23ed5fa:	f00f fc7d 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed5fe:	9b01      	ldr	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "rgp2");
 23ed600:	f107 0038 	add.w	r0, r7, #56	; 0x38
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed604:	fb0b 6303 	mla	r3, fp, r3, r6
 23ed608:	18e1      	adds	r1, r4, r3
    obs[oidx].sensor[sidx].f_obs = eeprom.rgt2;
 23ed60a:	4b24      	ldr	r3, [pc, #144]	; (23ed69c <_Z6OBS_Dov+0x1f0c>)
    strcpy (obs[oidx].sensor[sidx].id, "rgp2");
 23ed60c:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = eeprom.rgt2;
 23ed60e:	689a      	ldr	r2, [r3, #8]
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed610:	f8c1 a020 	str.w	sl, [r1, #32]
    obs[oidx].sensor[sidx].f_obs = eeprom.rgt2;
 23ed614:	624a      	str	r2, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ed616:	f881 9030 	strb.w	r9, [r1, #48]	; 0x30
 23ed61a:	f108 0202 	add.w	r2, r8, #2
    strcpy (obs[oidx].sensor[sidx].id, "rgp2");
 23ed61e:	4920      	ldr	r1, [pc, #128]	; (23ed6a0 <_Z6OBS_Dov+0x1f10>)
 23ed620:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ed622:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "rgp2");
 23ed624:	f00f fc68 	bl	23fcef8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed628:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx].f_obs = eeprom.rgp2;
 23ed62a:	4b1c      	ldr	r3, [pc, #112]	; (23ed69c <_Z6OBS_Dov+0x1f0c>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed62c:	fb0b 6602 	mla	r6, fp, r2, r6
    obs[oidx].sensor[sidx].f_obs = eeprom.rgp2;
 23ed630:	68db      	ldr	r3, [r3, #12]
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed632:	4426      	add	r6, r4
 23ed634:	f8c6 a020 	str.w	sl, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = eeprom.rgp2;
 23ed638:	6273      	str	r3, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ed63a:	f108 0803 	add.w	r8, r8, #3
 23ed63e:	f886 9030 	strb.w	r9, [r6, #48]	; 0x30
 23ed642:	f7ff bba1 	b.w	23ecd88 <_Z6OBS_Dov+0x15f8>
  float heat_index = 0.0;
 23ed646:	2700      	movs	r7, #0
 23ed648:	e469      	b.n	23ecf1e <_Z6OBS_Dov+0x178e>
  float wetbulb_temp = 0.0;
 23ed64a:	f04f 0900 	mov.w	r9, #0
 23ed64e:	e498      	b.n	23ecf82 <_Z6OBS_Dov+0x17f2>
      wbgt = wbgt_using_hi(heat_index);
 23ed650:	4638      	mov	r0, r7
 23ed652:	f7f7 fe39 	bl	23e52c8 <__aeabi_f2d>
 23ed656:	ec41 0b10 	vmov	d0, r0, r1
 23ed65a:	f7fa ff19 	bl	23e8490 <_Z13wbgt_using_hid>
 23ed65e:	e4b5      	b.n	23ecfcc <_Z6OBS_Dov+0x183c>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed660:	ed9f 8a08 	vldr	s16, [pc, #32]	; 23ed684 <_Z6OBS_Dov+0x1ef4>
 23ed664:	e4f7      	b.n	23ed056 <_Z6OBS_Dov+0x18c6>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed666:	ed9f 8a07 	vldr	s16, [pc, #28]	; 23ed684 <_Z6OBS_Dov+0x1ef4>
 23ed66a:	e58e      	b.n	23ed18a <_Z6OBS_Dov+0x19fa>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed66c:	ed9f 8a05 	vldr	s16, [pc, #20]	; 23ed684 <_Z6OBS_Dov+0x1ef4>
 23ed670:	e65b      	b.n	23ed32a <_Z6OBS_Dov+0x1b9a>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed672:	ed9f 8a04 	vldr	s16, [pc, #16]	; 23ed684 <_Z6OBS_Dov+0x1ef4>
 23ed676:	e68b      	b.n	23ed390 <_Z6OBS_Dov+0x1c00>
 23ed678:	33333333 	.word	0x33333333
 23ed67c:	c08f3f33 	.word	0xc08f3f33
 23ed680:	023fe4f2 	.word	0x023fe4f2
 23ed684:	c479f99a 	.word	0xc479f99a
 23ed688:	023fd919 	.word	0x023fd919
 23ed68c:	00000000 	.word	0x00000000
 23ed690:	c479c000 	.word	0xc479c000
 23ed694:	023fe554 	.word	0x023fe554
 23ed698:	023fe558 	.word	0x023fe558
 23ed69c:	1006ae74 	.word	0x1006ae74
 23ed6a0:	023fe55d 	.word	0x023fe55d

023ed6a4 <_Z22Output_CellBatteryInfov>:
void Output_CellBatteryInfo() {
 23ed6a4:	b530      	push	{r4, r5, lr}
 23ed6a6:	ed2d 8b02 	vpush	{d8}
 23ed6aa:	b08d      	sub	sp, #52	; 0x34
  CellularSignal sig = Cellular.RSSI();
 23ed6ac:	491f      	ldr	r1, [pc, #124]	; (23ed72c <_Z22Output_CellBatteryInfov+0x88>)
 23ed6ae:	a804      	add	r0, sp, #16
 23ed6b0:	f00a fe84 	bl	23f83bc <_ZN5spark13CellularClass4RSSIEv>
  float SignalStrength = sig.getStrength();
 23ed6b4:	a804      	add	r0, sp, #16
 23ed6b6:	f00a fedf 	bl	23f8478 <_ZNK14CellularSignal11getStrengthEv>
 23ed6ba:	eeb0 8a40 	vmov.f32	s16, s0
  int BatteryState = System.batteryState();
 23ed6be:	f7fe f85b 	bl	23eb778 <_ZNK11SystemClass12batteryStateEv.isra.0>
  if (BatteryState>0 && BatteryState<6) {
 23ed6c2:	1e43      	subs	r3, r0, #1
 23ed6c4:	2b04      	cmp	r3, #4
  int BatteryState = System.batteryState();
 23ed6c6:	4604      	mov	r4, r0
  if (BatteryState>0 && BatteryState<6) {
 23ed6c8:	d82d      	bhi.n	23ed726 <_Z22Output_CellBatteryInfov+0x82>
    BatteryPoC = System.batteryCharge();
 23ed6ca:	f7fe f843 	bl	23eb754 <_ZNK11SystemClass13batteryChargeEv.isra.0>
    (int)SignalStrength, (int)(SignalStrength*100)%100,
 23ed6ce:	eddf 7a18 	vldr	s15, [pc, #96]	; 23ed730 <_Z22Output_CellBatteryInfov+0x8c>
 23ed6d2:	ee28 7a27 	vmul.f32	s14, s16, s15
    BatteryState, (int)BatteryPoC, (int)(BatteryPoC*100)%100);
 23ed6d6:	ee60 7a27 	vmul.f32	s15, s0, s15
 23ed6da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    (int)SignalStrength, (int)(SignalStrength*100)%100,
 23ed6de:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  sprintf (Buffer32Bytes, "CS:%d.%02d B:%d,%d.%02d", 
 23ed6e2:	2164      	movs	r1, #100	; 0x64
    BatteryState, (int)BatteryPoC, (int)(BatteryPoC*100)%100);
 23ed6e4:	ee17 2a90 	vmov	r2, s15
    (int)SignalStrength, (int)(SignalStrength*100)%100,
 23ed6e8:	ee17 3a10 	vmov	r3, s14
  sprintf (Buffer32Bytes, "CS:%d.%02d B:%d,%d.%02d", 
 23ed6ec:	fb92 f5f1 	sdiv	r5, r2, r1
 23ed6f0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 23ed6f4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 23ed6f8:	fb93 f0f1 	sdiv	r0, r3, r1
 23ed6fc:	fb01 2215 	mls	r2, r1, r5, r2
 23ed700:	fb01 3310 	mls	r3, r1, r0, r3
 23ed704:	ed8d 0a01 	vstr	s0, [sp, #4]
 23ed708:	490a      	ldr	r1, [pc, #40]	; (23ed734 <_Z22Output_CellBatteryInfov+0x90>)
 23ed70a:	9202      	str	r2, [sp, #8]
 23ed70c:	9400      	str	r4, [sp, #0]
 23ed70e:	ee17 2a90 	vmov	r2, s15
 23ed712:	4809      	ldr	r0, [pc, #36]	; (23ed738 <_Z22Output_CellBatteryInfov+0x94>)
 23ed714:	f00a fd3c 	bl	23f8190 <sprintf>
  Output(Buffer32Bytes);
 23ed718:	4807      	ldr	r0, [pc, #28]	; (23ed738 <_Z22Output_CellBatteryInfov+0x94>)
 23ed71a:	f7f9 fd63 	bl	23e71e4 <_Z6OutputPKc>
}
 23ed71e:	b00d      	add	sp, #52	; 0x34
 23ed720:	ecbd 8b02 	vpop	{d8}
 23ed724:	bd30      	pop	{r4, r5, pc}
  float BatteryPoC = 0.0;                 // Battery Percent of Charge
 23ed726:	ed9f 0a05 	vldr	s0, [pc, #20]	; 23ed73c <_Z22Output_CellBatteryInfov+0x98>
 23ed72a:	e7d0      	b.n	23ed6ce <_Z22Output_CellBatteryInfov+0x2a>
 23ed72c:	1007aeb8 	.word	0x1007aeb8
 23ed730:	42c80000 	.word	0x42c80000
 23ed734:	023fe5eb 	.word	0x023fe5eb
 23ed738:	1006a2bf 	.word	0x1006a2bf
 23ed73c:	00000000 	.word	0x00000000

023ed740 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb>:
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
 23ed740:	b570      	push	{r4, r5, r6, lr}
 23ed742:	4604      	mov	r4, r0
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 23ed744:	2000      	movs	r0, #0
    ResultT result(ResultT defaultValue = ResultT()) const {
 23ed746:	460d      	mov	r5, r1
        return (application_thread_current(nullptr) != 0);
 23ed748:	f00a fb1c 	bl	23f7d84 <application_thread_current>
 23ed74c:	1c66      	adds	r6, r4, #1
        if (ContextT::isApplicationThreadCurrent()) {
 23ed74e:	b128      	cbz	r0, 23ed75c <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x1c>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
 23ed750:	7833      	ldrb	r3, [r6, #0]
 23ed752:	b2db      	uxtb	r3, r3
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 23ed754:	b913      	cbnz	r3, 23ed75c <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x1c>
        spark_process();
 23ed756:	f00a fba1 	bl	23f7e9c <spark_process>
    }
 23ed75a:	e7f9      	b.n	23ed750 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x10>
 23ed75c:	e8d6 3f8f 	ldab	r3, [r6]
 23ed760:	b2db      	uxtb	r3, r3
        if (this->acquireDone() && this->isSucceeded()) {
 23ed762:	b90b      	cbnz	r3, 23ed768 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x28>
        return std::move(defaultValue);
 23ed764:	4628      	mov	r0, r5
    }
 23ed766:	bd70      	pop	{r4, r5, r6, pc}
        return (application_thread_current(nullptr) != 0);
 23ed768:	2000      	movs	r0, #0
 23ed76a:	f00a fb0b 	bl	23f7d84 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23ed76e:	b128      	cbz	r0, 23ed77c <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x3c>
 23ed770:	7833      	ldrb	r3, [r6, #0]
 23ed772:	b2db      	uxtb	r3, r3
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 23ed774:	b913      	cbnz	r3, 23ed77c <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x3c>
        spark_process();
 23ed776:	f00a fb91 	bl	23f7e9c <spark_process>
    }
 23ed77a:	e7f9      	b.n	23ed770 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x30>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 23ed77c:	7823      	ldrb	r3, [r4, #0]
 23ed77e:	b2db      	uxtb	r3, r3
        if (this->acquireDone() && this->isSucceeded()) {
 23ed780:	2b01      	cmp	r3, #1
 23ed782:	d1ef      	bne.n	23ed764 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x24>
            return result_;
 23ed784:	7b20      	ldrb	r0, [r4, #12]
 23ed786:	e7ee      	b.n	23ed766 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x26>

023ed788 <_GLOBAL__sub_I___appProductVersion>:
      // We need to reinitialize our wind readings before we can move on.
      Wind_Distance_Air_Initialize();
    }
#endif
  }
}
 23ed788:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23ed78c:	2208      	movs	r2, #8
 23ed78e:	4b60      	ldr	r3, [pc, #384]	; (23ed910 <_GLOBAL__sub_I___appProductVersion+0x188>)
  FsVolume() = default;  // cppcheck-suppress uninitMemberVar
 23ed790:	2400      	movs	r4, #0
 23ed792:	701a      	strb	r2, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
 23ed794:	f00c fcb4 	bl	23fa100 <spark_protocol_instance>
 23ed798:	2300      	movs	r3, #0
 23ed79a:	2101      	movs	r1, #1
 23ed79c:	461a      	mov	r2, r3
 23ed79e:	f00c fccb 	bl	23fa138 <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
 23ed7a2:	f00c fcad 	bl	23fa100 <spark_protocol_instance>
 23ed7a6:	2300      	movs	r3, #0
 23ed7a8:	2123      	movs	r1, #35	; 0x23
 23ed7aa:	461a      	mov	r2, r3
 23ed7ac:	f00c fcb6 	bl	23fa11c <spark_protocol_set_product_id>
 23ed7b0:	4b58      	ldr	r3, [pc, #352]	; (23ed914 <_GLOBAL__sub_I___appProductVersion+0x18c>)
  {
 23ed7b2:	4a59      	ldr	r2, [pc, #356]	; (23ed918 <_GLOBAL__sub_I___appProductVersion+0x190>)
 23ed7b4:	2501      	movs	r5, #1
 23ed7b6:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() { initSharedSpiCard(); }
 23ed7ba:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 23ed7be:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
    Stream() {_timeout=1000;}
 23ed7c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23ed7c6:	f8c3 4480 	str.w	r4, [r3, #1152]	; 0x480
 23ed7ca:	f8c3 4484 	str.w	r4, [r3, #1156]	; 0x484
class SdBase : public Vol {
 23ed7ce:	f8c3 4488 	str.w	r4, [r3, #1160]	; 0x488
 * \brief Optimized SPI class for access to SD and SDHC flash memory cards.
 */
class SdSpiArduinoDriver {
 public:
  /** Constructor. */
  SdSpiArduinoDriver() = default;
 23ed7d2:	f8c3 448c 	str.w	r4, [r3, #1164]	; 0x48c
 23ed7d6:	f883 5494 	strb.w	r5, [r3, #1172]	; 0x494
 23ed7da:	f8c3 4498 	str.w	r4, [r3, #1176]	; 0x498
 23ed7de:	f8a3 449c 	strh.w	r4, [r3, #1180]	; 0x49c
 23ed7e2:	f8c3 44a0 	str.w	r4, [r3, #1184]	; 0x4a0
#endif  // SPI_DRIVER_SELECT < 2
  void initSharedSpiCard() {
    m_beginCalled = false;
    m_csPin = 0;
    m_errorCode = SD_CARD_ERROR_INIT_NOT_CALLED;
    m_spiActive = false;
 23ed7e6:	f8c3 44a8 	str.w	r4, [r3, #1192]	; 0x4a8
    Print() : write_error(0) {}
 23ed7ea:	4b4c      	ldr	r3, [pc, #304]	; (23ed91c <_GLOBAL__sub_I___appProductVersion+0x194>)
PMIC pmic;
 23ed7ec:	4621      	mov	r1, r4
 23ed7ee:	609a      	str	r2, [r3, #8]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23ed7f0:	4a4b      	ldr	r2, [pc, #300]	; (23ed920 <_GLOBAL__sub_I___appProductVersion+0x198>)
  FsBaseFile() = default;  // cppcheck-suppress uninitMemberVar
 23ed7f2:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
 23ed7f6:	605c      	str	r4, [r3, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23ed7f8:	601a      	str	r2, [r3, #0]
 23ed7fa:	484a      	ldr	r0, [pc, #296]	; (23ed924 <_GLOBAL__sub_I___appProductVersion+0x19c>)
 23ed7fc:	f00b feab 	bl	23f9556 <_ZN4PMICC1Eb>
Adafruit_SSD1306 display32(SCREEN_WIDTH, 32, &Wire, OLED_RESET);
 23ed800:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 23ed804:	f00c fd68 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23ed808:	4f47      	ldr	r7, [pc, #284]	; (23ed928 <_GLOBAL__sub_I___appProductVersion+0x1a0>)
 23ed80a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 23ed9ac <_GLOBAL__sub_I___appProductVersion+0x224>
 23ed80e:	4603      	mov	r3, r0
 23ed810:	2220      	movs	r2, #32
 23ed812:	2180      	movs	r1, #128	; 0x80
 23ed814:	e9cd 7801 	strd	r7, r8, [sp, #4]
 23ed818:	9600      	str	r6, [sp, #0]
 23ed81a:	4844      	ldr	r0, [pc, #272]	; (23ed92c <_GLOBAL__sub_I___appProductVersion+0x1a4>)
 23ed81c:	f004 fdf4 	bl	23f2408 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
Adafruit_SSD1306 display64(SCREEN_WIDTH, 64, &Wire, OLED_RESET);
 23ed820:	f00c fd5a 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23ed824:	2240      	movs	r2, #64	; 0x40
 23ed826:	4603      	mov	r3, r0
 23ed828:	2180      	movs	r1, #128	; 0x80
 23ed82a:	e9cd 7801 	strd	r7, r8, [sp, #4]
 23ed82e:	9600      	str	r6, [sp, #0]
 23ed830:	483f      	ldr	r0, [pc, #252]	; (23ed930 <_GLOBAL__sub_I___appProductVersion+0x1a8>)
 23ed832:	f004 fde9 	bl	23f2408 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
DateTime now;
 23ed836:	493f      	ldr	r1, [pc, #252]	; (23ed934 <_GLOBAL__sub_I___appProductVersion+0x1ac>)
 23ed838:	483f      	ldr	r0, [pc, #252]	; (23ed938 <_GLOBAL__sub_I___appProductVersion+0x1b0>)
 23ed83a:	f006 fa59 	bl	23f3cf0 <_ZN8DateTimeC1Em>
RH_RF95 rf95(LORA_SS, LORA_IRQ_PIN, hardware_spi); // SPI1
 23ed83e:	2214      	movs	r2, #20
 23ed840:	4b3e      	ldr	r3, [pc, #248]	; (23ed93c <_GLOBAL__sub_I___appProductVersion+0x1b4>)
 23ed842:	2103      	movs	r1, #3
 23ed844:	483e      	ldr	r0, [pc, #248]	; (23ed940 <_GLOBAL__sub_I___appProductVersion+0x1b8>)
 23ed846:	f005 ffd5 	bl	23f37f4 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
AES aes;
 23ed84a:	483e      	ldr	r0, [pc, #248]	; (23ed944 <_GLOBAL__sub_I___appProductVersion+0x1bc>)
 23ed84c:	f001 fc04 	bl	23ef058 <_ZN3AESC1Ev>
Adafruit_BMP280 bmp1;
 23ed850:	f00c fd42 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23ed854:	4601      	mov	r1, r0
 23ed856:	483c      	ldr	r0, [pc, #240]	; (23ed948 <_GLOBAL__sub_I___appProductVersion+0x1c0>)
 23ed858:	f002 fb72 	bl	23eff40 <_ZN15Adafruit_BMP280C1EP7TwoWire>
Adafruit_BMP280 bmp2;
 23ed85c:	f00c fd3c 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23ed860:	4601      	mov	r1, r0
 23ed862:	483a      	ldr	r0, [pc, #232]	; (23ed94c <_GLOBAL__sub_I___appProductVersion+0x1c4>)
 23ed864:	f002 fb6c 	bl	23eff40 <_ZN15Adafruit_BMP280C1EP7TwoWire>
Adafruit_BME280 bme1;
 23ed868:	4839      	ldr	r0, [pc, #228]	; (23ed950 <_GLOBAL__sub_I___appProductVersion+0x1c8>)
 23ed86a:	f001 fedf 	bl	23ef62c <_ZN15Adafruit_BME280C1Ev>
Adafruit_BME280 bme2;
 23ed86e:	4839      	ldr	r0, [pc, #228]	; (23ed954 <_GLOBAL__sub_I___appProductVersion+0x1cc>)
 23ed870:	f001 fedc 	bl	23ef62c <_ZN15Adafruit_BME280C1Ev>
Adafruit_BMP3XX bm31;
 23ed874:	4838      	ldr	r0, [pc, #224]	; (23ed958 <_GLOBAL__sub_I___appProductVersion+0x1d0>)
 23ed876:	f002 ff4b 	bl	23f0710 <_ZN15Adafruit_BMP3XXC1Ev>
Adafruit_BMP3XX bm32;
 23ed87a:	4838      	ldr	r0, [pc, #224]	; (23ed95c <_GLOBAL__sub_I___appProductVersion+0x1d4>)
 23ed87c:	f002 ff48 	bl	23f0710 <_ZN15Adafruit_BMP3XXC1Ev>
Adafruit_HTU21DF htu = Adafruit_HTU21DF();
 23ed880:	4837      	ldr	r0, [pc, #220]	; (23ed960 <_GLOBAL__sub_I___appProductVersion+0x1d8>)
 23ed882:	f004 f801 	bl	23f1888 <_ZN16Adafruit_HTU21DFC1Ev>
Adafruit_MCP9808 mcp1;
 23ed886:	4837      	ldr	r0, [pc, #220]	; (23ed964 <_GLOBAL__sub_I___appProductVersion+0x1dc>)
 23ed888:	f004 f9f6 	bl	23f1c78 <_ZN16Adafruit_MCP9808C1Ev>
Adafruit_MCP9808 mcp2;
 23ed88c:	4836      	ldr	r0, [pc, #216]	; (23ed968 <_GLOBAL__sub_I___appProductVersion+0x1e0>)
 23ed88e:	f004 f9f3 	bl	23f1c78 <_ZN16Adafruit_MCP9808C1Ev>
Adafruit_MCP9808 mcp3;
 23ed892:	4836      	ldr	r0, [pc, #216]	; (23ed96c <_GLOBAL__sub_I___appProductVersion+0x1e4>)
 23ed894:	f004 f9f0 	bl	23f1c78 <_ZN16Adafruit_MCP9808C1Ev>
Adafruit_MCP9808 mcp4;
 23ed898:	4835      	ldr	r0, [pc, #212]	; (23ed970 <_GLOBAL__sub_I___appProductVersion+0x1e8>)
 23ed89a:	f004 f9ed 	bl	23f1c78 <_ZN16Adafruit_MCP9808C1Ev>
Adafruit_SHT31 sht1;
 23ed89e:	f00c fd1b 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23ed8a2:	4601      	mov	r1, r0
 23ed8a4:	4833      	ldr	r0, [pc, #204]	; (23ed974 <_GLOBAL__sub_I___appProductVersion+0x1ec>)
 23ed8a6:	f004 fb3b 	bl	23f1f20 <_ZN14Adafruit_SHT31C1EP7TwoWire>
Adafruit_SHT31 sht2;
 23ed8aa:	f00c fd15 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23ed8ae:	4601      	mov	r1, r0
 23ed8b0:	4831      	ldr	r0, [pc, #196]	; (23ed978 <_GLOBAL__sub_I___appProductVersion+0x1f0>)
 23ed8b2:	f004 fb35 	bl	23f1f20 <_ZN14Adafruit_SHT31C1EP7TwoWire>
Adafruit_SI1145 uv = Adafruit_SI1145();
 23ed8b6:	4831      	ldr	r0, [pc, #196]	; (23ed97c <_GLOBAL__sub_I___appProductVersion+0x1f4>)
 23ed8b8:	f004 fbfc 	bl	23f20b4 <_ZN15Adafruit_SI1145C1Ev>
Adafruit_VEML7700 veml = Adafruit_VEML7700();
 23ed8bc:	4830      	ldr	r0, [pc, #192]	; (23ed980 <_GLOBAL__sub_I___appProductVersion+0x1f8>)
 23ed8be:	f005 fa05 	bl	23f2ccc <_ZN17Adafruit_VEML7700C1Ev>
Adafruit_PM25AQI pmaq = Adafruit_PM25AQI();
 23ed8c2:	4830      	ldr	r0, [pc, #192]	; (23ed984 <_GLOBAL__sub_I___appProductVersion+0x1fc>)
 23ed8c4:	f004 fa7f 	bl	23f1dc6 <_ZN16Adafruit_PM25AQIC1Ev>
Adafruit_HDC302x hdc1;
 23ed8c8:	482f      	ldr	r0, [pc, #188]	; (23ed988 <_GLOBAL__sub_I___appProductVersion+0x200>)
 23ed8ca:	f003 fed0 	bl	23f166e <_ZN16Adafruit_HDC302xC1Ev>
Adafruit_HDC302x hdc2;
 23ed8ce:	482f      	ldr	r0, [pc, #188]	; (23ed98c <_GLOBAL__sub_I___appProductVersion+0x204>)
 23ed8d0:	f003 fecd 	bl	23f166e <_ZN16Adafruit_HDC302xC1Ev>
Adafruit_LPS35HW lps1;
 23ed8d4:	482e      	ldr	r0, [pc, #184]	; (23ed990 <_GLOBAL__sub_I___appProductVersion+0x208>)
 23ed8d6:	f004 f89b 	bl	23f1a10 <_ZN16Adafruit_LPS35HWC1Ev>
Adafruit_LPS35HW lps2;
 23ed8da:	482e      	ldr	r0, [pc, #184]	; (23ed994 <_GLOBAL__sub_I___appProductVersion+0x20c>)
 23ed8dc:	f004 f898 	bl	23f1a10 <_ZN16Adafruit_LPS35HWC1Ev>
LeafSens tlw;
 23ed8e0:	482d      	ldr	r0, [pc, #180]	; (23ed998 <_GLOBAL__sub_I___appProductVersion+0x210>)
 23ed8e2:	f005 fc76 	bl	23f31d2 <_ZN8LeafSensC1Ev>
SVCS3 tsm;
 23ed8e6:	482d      	ldr	r0, [pc, #180]	; (23ed99c <_GLOBAL__sub_I___appProductVersion+0x214>)
 23ed8e8:	f007 ff54 	bl	23f5794 <_ZN5SVCS3C1Ev>
SVMULTI tmsm;
 23ed8ec:	482c      	ldr	r0, [pc, #176]	; (23ed9a0 <_GLOBAL__sub_I___appProductVersion+0x218>)
 23ed8ee:	f008 f817 	bl	23f5920 <_ZN7SVMULTIC1Ev>
              error_(SYSTEM_ERROR_NONE) {
 23ed8f2:	4b2c      	ldr	r3, [pc, #176]	; (23ed9a4 <_GLOBAL__sub_I___appProductVersion+0x21c>)
    SleepResult() {}
 23ed8f4:	4a2c      	ldr	r2, [pc, #176]	; (23ed9a8 <_GLOBAL__sub_I___appProductVersion+0x220>)
        set_system_mode(mode);
 23ed8f6:	2002      	movs	r0, #2
              error_(SYSTEM_ERROR_NONE) {
 23ed8f8:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
 23ed8fc:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 23ed8fe:	f00a fa09 	bl	23f7d14 <set_system_mode>
SYSTEM_THREAD(ENABLED);
 23ed902:	4621      	mov	r1, r4
 23ed904:	4628      	mov	r0, r5
}
 23ed906:	b004      	add	sp, #16
 23ed908:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
SYSTEM_THREAD(ENABLED);
 23ed90c:	f00a ba1e 	b.w	23f7d4c <system_thread_set_state>
 23ed910:	1006a81f 	.word	0x1006a81f
 23ed914:	1006a308 	.word	0x1006a308
 23ed918:	023fea34 	.word	0x023fea34
 23ed91c:	1006a7b8 	.word	0x1006a7b8
 23ed920:	023fea48 	.word	0x023fea48
 23ed924:	1007aa58 	.word	0x1007aa58
 23ed928:	00061a80 	.word	0x00061a80
 23ed92c:	1006ad8c 	.word	0x1006ad8c
 23ed930:	1006ae00 	.word	0x1006ae00
 23ed934:	386d4380 	.word	0x386d4380
 23ed938:	1006f544 	.word	0x1006f544
 23ed93c:	1007ae74 	.word	0x1007ae74
 23ed940:	1007aa88 	.word	0x1007aa88
 23ed944:	1006a828 	.word	0x1006a828
 23ed948:	1006ac10 	.word	0x1006ac10
 23ed94c:	1006ac50 	.word	0x1006ac50
 23ed950:	1006ab60 	.word	0x1006ab60
 23ed954:	1006abb8 	.word	0x1006abb8
 23ed958:	1006a960 	.word	0x1006a960
 23ed95c:	1006aa60 	.word	0x1006aa60
 23ed960:	1006aea8 	.word	0x1006aea8
 23ed964:	1006f110 	.word	0x1006f110
 23ed968:	1006f11c 	.word	0x1006f11c
 23ed96c:	1006f128 	.word	0x1006f128
 23ed970:	1006f134 	.word	0x1006f134
 23ed974:	1007abb8 	.word	0x1007abb8
 23ed978:	1007abc8 	.word	0x1007abc8
 23ed97c:	1007ac1c 	.word	0x1007ac1c
 23ed980:	1007ac24 	.word	0x1007ac24
 23ed984:	1007aa30 	.word	0x1007aa30
 23ed988:	1006ae98 	.word	0x1006ae98
 23ed98c:	1006aea0 	.word	0x1006aea0
 23ed990:	1006f0d8 	.word	0x1006f0d8
 23ed994:	1006f0f4 	.word	0x1006f0f4
 23ed998:	1007ac04 	.word	0x1007ac04
 23ed99c:	1007ac14 	.word	0x1007ac14
 23ed9a0:	1007ac0c 	.word	0x1007ac0c
 23ed9a4:	1006a80c 	.word	0x1006a80c
 23ed9a8:	ffff0000 	.word	0xffff0000
 23ed9ac:	000186a0 	.word	0x000186a0

023ed9b0 <_Z15lora_initializev>:
void lora_initialize() {
 23ed9b0:	b510      	push	{r4, lr}
  if (lora_cf_validate()) {
 23ed9b2:	f7f9 fe47 	bl	23e7644 <_Z16lora_cf_validatev>
 23ed9b6:	2800      	cmp	r0, #0
 23ed9b8:	d04b      	beq.n	23eda52 <_Z15lora_initializev+0xa2>
    pinMode(LORA_RESET, OUTPUT);
 23ed9ba:	2101      	movs	r1, #1
 23ed9bc:	2015      	movs	r0, #21
 23ed9be:	f00c fc07 	bl	23fa1d0 <pinMode>
    digitalWrite(LORA_RESET, LOW);
 23ed9c2:	2100      	movs	r1, #0
 23ed9c4:	2015      	movs	r0, #21
 23ed9c6:	f00c fc14 	bl	23fa1f2 <digitalWrite>
    delay(100);
 23ed9ca:	2064      	movs	r0, #100	; 0x64
 23ed9cc:	f00a fc7a 	bl	23f82c4 <delay>
    digitalWrite(LORA_RESET, HIGH);
 23ed9d0:	2101      	movs	r1, #1
 23ed9d2:	2015      	movs	r0, #21
 23ed9d4:	f00c fc0d 	bl	23fa1f2 <digitalWrite>
    delay(100);
 23ed9d8:	2064      	movs	r0, #100	; 0x64
 23ed9da:	f00a fc73 	bl	23f82c4 <delay>
    if (rf95.init()) {
 23ed9de:	481e      	ldr	r0, [pc, #120]	; (23eda58 <_Z15lora_initializev+0xa8>)
 23ed9e0:	f006 f8ea 	bl	23f3bb8 <_ZN7RH_RF954initEv>
 23ed9e4:	b370      	cbz	r0, 23eda44 <_Z15lora_initializev+0x94>
      rf95.setTxPower(cf_lora_txpower, false);
 23ed9e6:	4b1d      	ldr	r3, [pc, #116]	; (23eda5c <_Z15lora_initializev+0xac>)
 23ed9e8:	2200      	movs	r2, #0
 23ed9ea:	f993 1000 	ldrsb.w	r1, [r3]
 23ed9ee:	481a      	ldr	r0, [pc, #104]	; (23eda58 <_Z15lora_initializev+0xa8>)
 23ed9f0:	f006 f89a 	bl	23f3b28 <_ZN7RH_RF9510setTxPowerEab>
      rf95.setFrequency(cf_lora_freq);
 23ed9f4:	4b1a      	ldr	r3, [pc, #104]	; (23eda60 <_Z15lora_initializev+0xb0>)
      rf95.setThisAddress(cf_lora_unitid);
 23ed9f6:	4c1b      	ldr	r4, [pc, #108]	; (23eda64 <_Z15lora_initializev+0xb4>)
      rf95.setFrequency(cf_lora_freq);
 23ed9f8:	ed93 0a00 	vldr	s0, [r3]
 23ed9fc:	4816      	ldr	r0, [pc, #88]	; (23eda58 <_Z15lora_initializev+0xa8>)
 23ed9fe:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 23eda02:	f005 ff2d 	bl	23f3860 <_ZN7RH_RF9512setFrequencyEf>
      rf95.setThisAddress(cf_lora_unitid);
 23eda06:	7821      	ldrb	r1, [r4, #0]
 23eda08:	4813      	ldr	r0, [pc, #76]	; (23eda58 <_Z15lora_initializev+0xa8>)
 23eda0a:	f005 fc9d 	bl	23f3348 <_ZN15RHGenericDriver14setThisAddressEh>
      rf95.setHeaderFrom(cf_lora_unitid);
 23eda0e:	7821      	ldrb	r1, [r4, #0]
 23eda10:	4811      	ldr	r0, [pc, #68]	; (23eda58 <_Z15lora_initializev+0xa8>)
 23eda12:	f005 fc9d 	bl	23f3350 <_ZN15RHGenericDriver13setHeaderFromEh>
      rf95.setPromiscuous(true);
 23eda16:	2101      	movs	r1, #1
 23eda18:	480f      	ldr	r0, [pc, #60]	; (23eda58 <_Z15lora_initializev+0xa8>)
 23eda1a:	f005 fc93 	bl	23f3344 <_ZN15RHGenericDriver14setPromiscuousEb>
      rf95.setModeRx();
 23eda1e:	480e      	ldr	r0, [pc, #56]	; (23eda58 <_Z15lora_initializev+0xa8>)
 23eda20:	f006 f814 	bl	23f3a4c <_ZN7RH_RF959setModeRxEv>
      LORA_exists=true;
 23eda24:	2201      	movs	r2, #1
 23eda26:	4b10      	ldr	r3, [pc, #64]	; (23eda68 <_Z15lora_initializev+0xb8>)
      Output ("LORA OK");
 23eda28:	4810      	ldr	r0, [pc, #64]	; (23eda6c <_Z15lora_initializev+0xbc>)
      LORA_exists=true;
 23eda2a:	701a      	strb	r2, [r3, #0]
    Output ("LORA INIT ERR");
 23eda2c:	f7f9 fbda 	bl	23e71e4 <_Z6OutputPKc>
  lora_alarm_timer = System.millis() + (LORA_RESET_NOACTIVITY * 60000);  // Minutes * 60 seconds
 23eda30:	f7f9 f8dc 	bl	23e6bec <_ZN11SystemClass6millisEv>
 23eda34:	4a0e      	ldr	r2, [pc, #56]	; (23eda70 <_Z15lora_initializev+0xc0>)
 23eda36:	4b0f      	ldr	r3, [pc, #60]	; (23eda74 <_Z15lora_initializev+0xc4>)
 23eda38:	1880      	adds	r0, r0, r2
 23eda3a:	f141 0100 	adc.w	r1, r1, #0
 23eda3e:	e9c3 0100 	strd	r0, r1, [r3]
}
 23eda42:	bd10      	pop	{r4, pc}
      SystemStatusBits |= SSB_LORA;  // Turn On Bit
 23eda44:	4a0c      	ldr	r2, [pc, #48]	; (23eda78 <_Z15lora_initializev+0xc8>)
      Output ("LORA NF");
 23eda46:	480d      	ldr	r0, [pc, #52]	; (23eda7c <_Z15lora_initializev+0xcc>)
      SystemStatusBits |= SSB_LORA;  // Turn On Bit
 23eda48:	6813      	ldr	r3, [r2, #0]
 23eda4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 23eda4e:	6013      	str	r3, [r2, #0]
      Output ("LORA NF");
 23eda50:	e7ec      	b.n	23eda2c <_Z15lora_initializev+0x7c>
    Output ("LORA INIT ERR");
 23eda52:	480b      	ldr	r0, [pc, #44]	; (23eda80 <_Z15lora_initializev+0xd0>)
 23eda54:	e7ea      	b.n	23eda2c <_Z15lora_initializev+0x7c>
 23eda56:	bf00      	nop
 23eda58:	1007aa88 	.word	0x1007aa88
 23eda5c:	1006a1e8 	.word	0x1006a1e8
 23eda60:	1006a1e4 	.word	0x1006a1e4
 23eda64:	1006a1ec 	.word	0x1006a1ec
 23eda68:	1006a2e9 	.word	0x1006a2e9
 23eda6c:	023fe603 	.word	0x023fe603
 23eda70:	001b7740 	.word	0x001b7740
 23eda74:	1006aed0 	.word	0x1006aed0
 23eda78:	1006a1cc 	.word	0x1006a1cc
 23eda7c:	023fe60b 	.word	0x023fe60b
 23eda80:	023fe613 	.word	0x023fe613

023eda84 <_Z14lora_msg_checkv.part.0>:
/* 
 *=======================================================================================================================
 * lora_msg_check()
 *=======================================================================================================================
 */
void lora_msg_check() {
 23eda84:	b570      	push	{r4, r5, r6, lr}
    if (rf95.available()) {
      byte iv [N_BLOCK];
    
      // Should be a message for us now
      uint8_t buf[RH_RF95_MAX_MESSAGE_LEN]; // 251 Bytes
      uint8_t len  = sizeof(buf);
 23eda86:	24fb      	movs	r4, #251	; 0xfb
void lora_msg_check() {
 23eda88:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
      uint8_t from = rf95.headerFrom();
 23eda8c:	483b      	ldr	r0, [pc, #236]	; (23edb7c <_Z14lora_msg_checkv.part.0+0xf8>)
      uint8_t len  = sizeof(buf);
 23eda8e:	f88d 4013 	strb.w	r4, [sp, #19]
      uint8_t from = rf95.headerFrom();
 23eda92:	f005 fc69 	bl	23f3368 <_ZN15RHGenericDriver10headerFromEv>
      uint8_t to   = rf95.headerTo();
 23eda96:	4839      	ldr	r0, [pc, #228]	; (23edb7c <_Z14lora_msg_checkv.part.0+0xf8>)
 23eda98:	f005 fc64 	bl	23f3364 <_ZN15RHGenericDriver8headerToEv>
      uint8_t id   = rf95.headerId();
 23eda9c:	4837      	ldr	r0, [pc, #220]	; (23edb7c <_Z14lora_msg_checkv.part.0+0xf8>)
 23eda9e:	f005 fc65 	bl	23f336c <_ZN15RHGenericDriver8headerIdEv>
      uint8_t flags= rf95.headerFlags();
 23edaa2:	4836      	ldr	r0, [pc, #216]	; (23edb7c <_Z14lora_msg_checkv.part.0+0xf8>)
 23edaa4:	f005 fc64 	bl	23f3370 <_ZN15RHGenericDriver11headerFlagsEv>
      int8_t  rssi = rf95.lastRssi(); 
 23edaa8:	4834      	ldr	r0, [pc, #208]	; (23edb7c <_Z14lora_msg_checkv.part.0+0xf8>)
 23edaaa:	f005 fc63 	bl	23f3374 <_ZN15RHGenericDriver8lastRssiEv>
      uint8_t byte2;
      uint8_t i;
      uint8_t msglen = 0;
      char msg[256];             // Used to hold decrypted lora messages

      memset(buf, 0, RH_RF95_MAX_MESSAGE_LEN);
 23edaae:	4622      	mov	r2, r4
 23edab0:	2100      	movs	r1, #0
 23edab2:	a809      	add	r0, sp, #36	; 0x24
      memset(msg, 0, RH_RF95_MAX_MESSAGE_LEN+1);
 23edab4:	ac48      	add	r4, sp, #288	; 0x120
      memset(buf, 0, RH_RF95_MAX_MESSAGE_LEN);
 23edab6:	f00f f9aa 	bl	23fce0e <memset>
      memset(msg, 0, RH_RF95_MAX_MESSAGE_LEN+1);
 23edaba:	22fc      	movs	r2, #252	; 0xfc
 23edabc:	2100      	movs	r1, #0
 23edabe:	4620      	mov	r0, r4
 23edac0:	f00f f9a5 	bl	23fce0e <memset>
    
      if (rf95.recv(buf, &len)) {
 23edac4:	482d      	ldr	r0, [pc, #180]	; (23edb7c <_Z14lora_msg_checkv.part.0+0xf8>)
 23edac6:	f10d 0213 	add.w	r2, sp, #19
 23edaca:	a909      	add	r1, sp, #36	; 0x24
 23edacc:	f005 fe4c 	bl	23f3768 <_ZN7RH_RF954recvEPhS0_>
 23edad0:	2800      	cmp	r0, #0
 23edad2:	d043      	beq.n	23edb5c <_Z14lora_msg_checkv.part.0+0xd8>
        // memcpy (msg, &buf[3], buf[0]);
        // Output (msg);
        // Serial_write ("LoRa Msg");
     
        aes.iv_inc();
 23edad4:	482a      	ldr	r0, [pc, #168]	; (23edb80 <_Z14lora_msg_checkv.part.0+0xfc>)
 23edad6:	f001 fd68 	bl	23ef5aa <_ZN3AES6iv_incEv>
        aes.set_IV(AES_MYIV);
 23edada:	4b2a      	ldr	r3, [pc, #168]	; (23edb84 <_Z14lora_msg_checkv.part.0+0x100>)
 23edadc:	4828      	ldr	r0, [pc, #160]	; (23edb80 <_Z14lora_msg_checkv.part.0+0xfc>)
 23edade:	e9d3 2300 	ldrd	r2, r3, [r3]
        aes.get_IV(iv);
 23edae2:	ad05      	add	r5, sp, #20
        aes.set_IV(AES_MYIV);
 23edae4:	f001 fd4d 	bl	23ef582 <_ZN3AES6set_IVEy>
        aes.get_IV(iv);
 23edae8:	4629      	mov	r1, r5
 23edaea:	4825      	ldr	r0, [pc, #148]	; (23edb80 <_Z14lora_msg_checkv.part.0+0xfc>)
 23edaec:	f001 fd75 	bl	23ef5da <_ZN3AES6get_IVEPh>
        aes.do_aes_decrypt(buf, len, (byte *) msg, AES_KEY, 128, iv);
 23edaf0:	2380      	movs	r3, #128	; 0x80
 23edaf2:	9301      	str	r3, [sp, #4]
 23edaf4:	4b24      	ldr	r3, [pc, #144]	; (23edb88 <_Z14lora_msg_checkv.part.0+0x104>)
 23edaf6:	f89d 2013 	ldrb.w	r2, [sp, #19]
 23edafa:	9300      	str	r3, [sp, #0]
 23edafc:	4820      	ldr	r0, [pc, #128]	; (23edb80 <_Z14lora_msg_checkv.part.0+0xfc>)
 23edafe:	4623      	mov	r3, r4
 23edb00:	9502      	str	r5, [sp, #8]
 23edb02:	a909      	add	r1, sp, #36	; 0x24
 23edb04:	f001 fd76 	bl	23ef5f4 <_ZN3AES14do_aes_decryptEPhiS0_S0_iS0_>
      
        if ( ( msg[3] == 'I' && msg[4] == 'F') ||
 23edb08:	78e3      	ldrb	r3, [r4, #3]
 23edb0a:	2b49      	cmp	r3, #73	; 0x49
 23edb0c:	d111      	bne.n	23edb32 <_Z14lora_msg_checkv.part.0+0xae>
 23edb0e:	7923      	ldrb	r3, [r4, #4]
 23edb10:	2b46      	cmp	r3, #70	; 0x46
             ( msg[3] == 'L' && msg[4] == 'R')) {
 23edb12:	d123      	bne.n	23edb5c <_Z14lora_msg_checkv.part.0+0xd8>

          // Get length of what follows
          msglen = msg[0];
 23edb14:	f20d 1123 	addw	r1, sp, #291	; 0x123

          // Compute Checksum
          checksum=0;
          for (i=3; i<msglen; i++) {
 23edb18:	2203      	movs	r2, #3
          checksum=0;
 23edb1a:	2300      	movs	r3, #0
 23edb1c:	4608      	mov	r0, r1
          msglen = msg[0];
 23edb1e:	7825      	ldrb	r5, [r4, #0]
          for (i=3; i<msglen; i++) {
 23edb20:	4295      	cmp	r5, r2
 23edb22:	d90b      	bls.n	23edb3c <_Z14lora_msg_checkv.part.0+0xb8>
            checksum += msg[i];
 23edb24:	f811 6b01 	ldrb.w	r6, [r1], #1
          for (i=3; i<msglen; i++) {
 23edb28:	3201      	adds	r2, #1
            checksum += msg[i];
 23edb2a:	4433      	add	r3, r6
 23edb2c:	b29b      	uxth	r3, r3
          for (i=3; i<msglen; i++) {
 23edb2e:	b2d2      	uxtb	r2, r2
 23edb30:	e7f6      	b.n	23edb20 <_Z14lora_msg_checkv.part.0+0x9c>
        if ( ( msg[3] == 'I' && msg[4] == 'F') ||
 23edb32:	2b4c      	cmp	r3, #76	; 0x4c
 23edb34:	d112      	bne.n	23edb5c <_Z14lora_msg_checkv.part.0+0xd8>
             ( msg[3] == 'L' && msg[4] == 'R')) {
 23edb36:	7923      	ldrb	r3, [r4, #4]
 23edb38:	2b52      	cmp	r3, #82	; 0x52
 23edb3a:	e7ea      	b.n	23edb12 <_Z14lora_msg_checkv.part.0+0x8e>
          }
          byte1 = checksum>>8;
          byte2 = checksum%256;

          // Validate Checksum against sent checksum
          if ((byte1 == msg[1]) && (byte2 == msg[2])) {
 23edb3c:	7862      	ldrb	r2, [r4, #1]
 23edb3e:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
 23edb42:	d117      	bne.n	23edb74 <_Z14lora_msg_checkv.part.0+0xf0>
 23edb44:	78a2      	ldrb	r2, [r4, #2]
 23edb46:	b2db      	uxtb	r3, r3
 23edb48:	429a      	cmp	r2, r3
 23edb4a:	d113      	bne.n	23edb74 <_Z14lora_msg_checkv.part.0+0xf0>
            // Make what follows a string
            msg[msglen]=0;
 23edb4c:	2300      	movs	r3, #0
 23edb4e:	5563      	strb	r3, [r4, r5]

            char *payload = (char*)(msg+3); // After length and 2 checksum bytes

            // Display LoRa Message on Serial Console           
            Serial_write (payload);
 23edb50:	f7f9 fb1e 	bl	23e7190 <_Z12Serial_writePKc>

            lora_relay_msg (payload);
 23edb54:	f20d 1023 	addw	r0, sp, #291	; 0x123
 23edb58:	f7fc fb30 	bl	23ea1bc <_Z14lora_relay_msgPc>
            Output ("LORA CS-ERR");
          }
        }
      }
      // Received LoRa Signal, Reset alarm
      lora_alarm_timer = System.millis() + (LORA_RESET_NOACTIVITY * 60000);
 23edb5c:	f7f9 f846 	bl	23e6bec <_ZN11SystemClass6millisEv>
 23edb60:	4a0a      	ldr	r2, [pc, #40]	; (23edb8c <_Z14lora_msg_checkv.part.0+0x108>)
 23edb62:	4b0b      	ldr	r3, [pc, #44]	; (23edb90 <_Z14lora_msg_checkv.part.0+0x10c>)
 23edb64:	1880      	adds	r0, r0, r2
 23edb66:	f141 0100 	adc.w	r1, r1, #0
 23edb6a:	e9c3 0100 	strd	r0, r1, [r3]
        // Need to set some system status bit here too
        lora_initialize();
      }
    }
  }
}
 23edb6e:	f50d 7d08 	add.w	sp, sp, #544	; 0x220
 23edb72:	bd70      	pop	{r4, r5, r6, pc}
            Output ("LORA CS-ERR");
 23edb74:	4807      	ldr	r0, [pc, #28]	; (23edb94 <_Z14lora_msg_checkv.part.0+0x110>)
 23edb76:	f7f9 fb35 	bl	23e71e4 <_Z6OutputPKc>
 23edb7a:	e7ef      	b.n	23edb5c <_Z14lora_msg_checkv.part.0+0xd8>
 23edb7c:	1007aa88 	.word	0x1007aa88
 23edb80:	1006a828 	.word	0x1006a828
 23edb84:	1006a2b0 	.word	0x1006a2b0
 23edb88:	1006a29c 	.word	0x1006a29c
 23edb8c:	001b7740 	.word	0x001b7740
 23edb90:	1006aed0 	.word	0x1006aed0
 23edb94:	023fe621 	.word	0x023fe621

023edb98 <_Z14lora_msg_checkv>:
void lora_msg_check() {
 23edb98:	b508      	push	{r3, lr}
  if (LORA_exists) {
 23edb9a:	4b0e      	ldr	r3, [pc, #56]	; (23edbd4 <_Z14lora_msg_checkv+0x3c>)
 23edb9c:	781b      	ldrb	r3, [r3, #0]
 23edb9e:	b1bb      	cbz	r3, 23edbd0 <_Z14lora_msg_checkv+0x38>
    if (rf95.available()) {
 23edba0:	480d      	ldr	r0, [pc, #52]	; (23edbd8 <_Z14lora_msg_checkv+0x40>)
 23edba2:	f005 ff64 	bl	23f3a6e <_ZN7RH_RF959availableEv>
 23edba6:	b118      	cbz	r0, 23edbb0 <_Z14lora_msg_checkv+0x18>
}
 23edba8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 23edbac:	f7ff bf6a 	b.w	23eda84 <_Z14lora_msg_checkv.part.0>
      if (System.millis() >= lora_alarm_timer) {
 23edbb0:	f7f9 f81c 	bl	23e6bec <_ZN11SystemClass6millisEv>
 23edbb4:	4b09      	ldr	r3, [pc, #36]	; (23edbdc <_Z14lora_msg_checkv+0x44>)
 23edbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23edbba:	4290      	cmp	r0, r2
 23edbbc:	eb71 0303 	sbcs.w	r3, r1, r3
 23edbc0:	d306      	bcc.n	23edbd0 <_Z14lora_msg_checkv+0x38>
        Output ("LORA Init");
 23edbc2:	4807      	ldr	r0, [pc, #28]	; (23edbe0 <_Z14lora_msg_checkv+0x48>)
 23edbc4:	f7f9 fb0e 	bl	23e71e4 <_Z6OutputPKc>
}
 23edbc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        lora_initialize();
 23edbcc:	f7ff bef0 	b.w	23ed9b0 <_Z15lora_initializev>
}
 23edbd0:	bd08      	pop	{r3, pc}
 23edbd2:	bf00      	nop
 23edbd4:	1006a2e9 	.word	0x1006a2e9
 23edbd8:	1007aa88 	.word	0x1007aa88
 23edbdc:	1006aed0 	.word	0x1006aed0
 23edbe0:	023fe62d 	.word	0x023fe62d

023edbe4 <_Z13lora_msg_pollv>:
/* 
 *=======================================================================================================================
 * lora_msg_poll() -- Spend 750ms looking for LoRa Messages
 *=======================================================================================================================
 */
void lora_msg_poll() {
 23edbe4:	b508      	push	{r3, lr}
  for (int i=0; i<3; i++) {
    lora_msg_check();
 23edbe6:	f7ff ffd7 	bl	23edb98 <_Z14lora_msg_checkv>
    delay (250);
 23edbea:	20fa      	movs	r0, #250	; 0xfa
 23edbec:	f00a fb6a 	bl	23f82c4 <delay>
    lora_msg_check();
 23edbf0:	f7ff ffd2 	bl	23edb98 <_Z14lora_msg_checkv>
    delay (250);
 23edbf4:	20fa      	movs	r0, #250	; 0xfa
 23edbf6:	f00a fb65 	bl	23f82c4 <delay>
    lora_msg_check();
 23edbfa:	f7ff ffcd 	bl	23edb98 <_Z14lora_msg_checkv>
  }
 23edbfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay (250);
 23edc02:	20fa      	movs	r0, #250	; 0xfa
 23edc04:	f00a bb5e 	b.w	23f82c4 <delay>

023edc08 <_Z28Wind_Distance_Air_Initializev>:
void Wind_Distance_Air_Initialize() {
 23edc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  anemometer_interrupt_count = 0;
 23edc0a:	2400      	movs	r4, #0
  Output ("WindDist Init()");
 23edc0c:	4821      	ldr	r0, [pc, #132]	; (23edc94 <_Z28Wind_Distance_Air_Initializev+0x8c>)
 23edc0e:	f7f9 fae9 	bl	23e71e4 <_Z6OutputPKc>
  anemometer_interrupt_count = 0;
 23edc12:	4b21      	ldr	r3, [pc, #132]	; (23edc98 <_Z28Wind_Distance_Air_Initializev+0x90>)
    if (A4_State == A4_STATE_DISTANCE) {
 23edc14:	4e21      	ldr	r6, [pc, #132]	; (23edc9c <_Z28Wind_Distance_Air_Initializev+0x94>)
  anemometer_interrupt_count = 0;
 23edc16:	601c      	str	r4, [r3, #0]
  anemometer_interrupt_stime = System.millis();
 23edc18:	f7f8 ffe8 	bl	23e6bec <_ZN11SystemClass6millisEv>
  wind.gust = 0.0;
 23edc1c:	2200      	movs	r2, #0
  anemometer_interrupt_stime = System.millis();
 23edc1e:	4b20      	ldr	r3, [pc, #128]	; (23edca0 <_Z28Wind_Distance_Air_Initializev+0x98>)
    if (PM25AQI_exists) {
 23edc20:	4f20      	ldr	r7, [pc, #128]	; (23edca4 <_Z28Wind_Distance_Air_Initializev+0x9c>)
  anemometer_interrupt_stime = System.millis();
 23edc22:	e9c3 0100 	strd	r0, r1, [r3]
  wind.gust = 0.0;
 23edc26:	4b20      	ldr	r3, [pc, #128]	; (23edca8 <_Z28Wind_Distance_Air_Initializev+0xa0>)
 23edc28:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
  wind.gust_direction = -1;
 23edc2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  wind.bucket_idx = 0;
 23edc30:	f8c3 41e0 	str.w	r4, [r3, #480]	; 0x1e0
 23edc34:	243c      	movs	r4, #60	; 0x3c
  wind.gust_direction = -1;
 23edc36:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
    lora_msg_poll(); // 750ms Second Delay
 23edc3a:	f7ff ffd3 	bl	23edbe4 <_Z13lora_msg_pollv>
    HeartBeat();     // Provides a 250ms delay
 23edc3e:	f7fd fce9 	bl	23eb614 <_Z9HeartBeatv>
    Wind_TakeReading();
 23edc42:	f7fb fbe9 	bl	23e9418 <_Z16Wind_TakeReadingv>
    if (A4_State == A4_STATE_DISTANCE) {
 23edc46:	6833      	ldr	r3, [r6, #0]
 23edc48:	2b01      	cmp	r3, #1
 23edc4a:	d101      	bne.n	23edc50 <_Z28Wind_Distance_Air_Initializev+0x48>
      DistanceGauge_TakeReading();
 23edc4c:	f7fb f948 	bl	23e8ee0 <_Z25DistanceGauge_TakeReadingv>
    if (PM25AQI_exists) {
 23edc50:	783b      	ldrb	r3, [r7, #0]
 23edc52:	b10b      	cbz	r3, 23edc58 <_Z28Wind_Distance_Air_Initializev+0x50>
      pm25aqi_TakeReading();
 23edc54:	f7fa fe96 	bl	23e8984 <_Z19pm25aqi_TakeReadingv>
    if (SerialConsoleEnabled) Serial.print(".");  // Provide Serial Console some feedback as we loop and wait til next observation
 23edc58:	4d14      	ldr	r5, [pc, #80]	; (23edcac <_Z28Wind_Distance_Air_Initializev+0xa4>)
 23edc5a:	782b      	ldrb	r3, [r5, #0]
 23edc5c:	b123      	cbz	r3, 23edc68 <_Z28Wind_Distance_Air_Initializev+0x60>
 23edc5e:	f00c f94b 	bl	23f9ef8 <_Z16_fetch_usbserialv>
 23edc62:	4913      	ldr	r1, [pc, #76]	; (23edcb0 <_Z28Wind_Distance_Air_Initializev+0xa8>)
 23edc64:	f00b fd23 	bl	23f96ae <_ZN5Print5printEPKc>
    OLED_spin();
 23edc68:	f7f9 f936 	bl	23e6ed8 <_Z9OLED_spinv>
  for (int i=0; i< WIND_READINGS; i++) {
 23edc6c:	3c01      	subs	r4, #1
 23edc6e:	d1e4      	bne.n	23edc3a <_Z28Wind_Distance_Air_Initializev+0x32>
  Wind_TakeReading();
 23edc70:	f7fb fbd2 	bl	23e9418 <_Z16Wind_TakeReadingv>
  if (A4_State == A4_STATE_DISTANCE) {
 23edc74:	6833      	ldr	r3, [r6, #0]
 23edc76:	2b01      	cmp	r3, #1
 23edc78:	d101      	bne.n	23edc7e <_Z28Wind_Distance_Air_Initializev+0x76>
    DistanceGauge_TakeReading();
 23edc7a:	f7fb f931 	bl	23e8ee0 <_Z25DistanceGauge_TakeReadingv>
  if (SerialConsoleEnabled) Serial.println();  // Send a newline out to cleanup after all the periods we have been logging
 23edc7e:	782b      	ldrb	r3, [r5, #0]
 23edc80:	b11b      	cbz	r3, 23edc8a <_Z28Wind_Distance_Air_Initializev+0x82>
 23edc82:	f00c f939 	bl	23f9ef8 <_Z16_fetch_usbserialv>
 23edc86:	f00b fd1d 	bl	23f96c4 <_ZN5Print7printlnEv>
  ws_refresh = false; // Set to false since we have just initialized wind speed data.
 23edc8a:	2200      	movs	r2, #0
 23edc8c:	4b09      	ldr	r3, [pc, #36]	; (23edcb4 <_Z28Wind_Distance_Air_Initializev+0xac>)
 23edc8e:	701a      	strb	r2, [r3, #0]
}
 23edc90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23edc92:	bf00      	nop
 23edc94:	023fe637 	.word	0x023fe637
 23edc98:	1006a950 	.word	0x1006a950
 23edc9c:	1006a294 	.word	0x1006a294
 23edca0:	1006a958 	.word	0x1006a958
 23edca4:	1006a304 	.word	0x1006a304
 23edca8:	1007ac70 	.word	0x1007ac70
 23edcac:	1006a80b 	.word	0x1006a80b
 23edcb0:	023fe647 	.word	0x023fe647
 23edcb4:	1007ae5c 	.word	0x1007ae5c

023edcb8 <_Z14BackGroundWorkv>:
void BackGroundWork() {
 23edcb8:	b538      	push	{r3, r4, r5, lr}
  uint64_t OneSecondFromNow = System.millis() + 1000;
 23edcba:	f7f8 ff97 	bl	23e6bec <_ZN11SystemClass6millisEv>
 23edcbe:	f510 747a 	adds.w	r4, r0, #1000	; 0x3e8
 23edcc2:	f141 0500 	adc.w	r5, r1, #0
  Wind_TakeReading();
 23edcc6:	f7fb fba7 	bl	23e9418 <_Z16Wind_TakeReadingv>
  if (A4_State == A4_STATE_DISTANCE) {
 23edcca:	4b16      	ldr	r3, [pc, #88]	; (23edd24 <_Z14BackGroundWorkv+0x6c>)
 23edccc:	681b      	ldr	r3, [r3, #0]
 23edcce:	2b01      	cmp	r3, #1
 23edcd0:	d101      	bne.n	23edcd6 <_Z14BackGroundWorkv+0x1e>
    DistanceGauge_TakeReading();
 23edcd2:	f7fb f905 	bl	23e8ee0 <_Z25DistanceGauge_TakeReadingv>
  if (PM25AQI_exists) {
 23edcd6:	4b14      	ldr	r3, [pc, #80]	; (23edd28 <_Z14BackGroundWorkv+0x70>)
 23edcd8:	781b      	ldrb	r3, [r3, #0]
 23edcda:	b10b      	cbz	r3, 23edce0 <_Z14BackGroundWorkv+0x28>
    pm25aqi_TakeReading();
 23edcdc:	f7fa fe52 	bl	23e8984 <_Z19pm25aqi_TakeReadingv>
  HeartBeat();  // Burns 250ms
 23edce0:	f7fd fc98 	bl	23eb614 <_Z9HeartBeatv>
  if (LORA_exists) {
 23edce4:	4b11      	ldr	r3, [pc, #68]	; (23edd2c <_Z14BackGroundWorkv+0x74>)
 23edce6:	781b      	ldrb	r3, [r3, #0]
 23edce8:	b10b      	cbz	r3, 23edcee <_Z14BackGroundWorkv+0x36>
    lora_msg_poll(); // Provides a 750ms delay
 23edcea:	f7ff ff7b 	bl	23edbe4 <_Z13lora_msg_pollv>
  int64_t TimeRemaining = (OneSecondFromNow - System.millis());
 23edcee:	f7f8 ff7d 	bl	23e6bec <_ZN11SystemClass6millisEv>
  if ((TimeRemaining > 0) && (TimeRemaining < 1000)) {
 23edcf2:	f240 33e7 	movw	r3, #999	; 0x3e7
  int64_t TimeRemaining = (OneSecondFromNow - System.millis());
 23edcf6:	1a20      	subs	r0, r4, r0
 23edcf8:	eb65 0101 	sbc.w	r1, r5, r1
  if ((TimeRemaining > 0) && (TimeRemaining < 1000)) {
 23edcfc:	1e42      	subs	r2, r0, #1
 23edcfe:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 23edd02:	429a      	cmp	r2, r3
 23edd04:	f171 0300 	sbcs.w	r3, r1, #0
 23edd08:	d201      	bcs.n	23edd0e <_Z14BackGroundWorkv+0x56>
    delay (TimeRemaining);
 23edd0a:	f00a fadb 	bl	23f82c4 <delay>
  if (TurnLedOff) {   // Turned on by rain gauge interrupt handler
 23edd0e:	4c08      	ldr	r4, [pc, #32]	; (23edd30 <_Z14BackGroundWorkv+0x78>)
 23edd10:	7823      	ldrb	r3, [r4, #0]
 23edd12:	b133      	cbz	r3, 23edd22 <_Z14BackGroundWorkv+0x6a>
    digitalWrite(LED_PIN, LOW);  
 23edd14:	4b07      	ldr	r3, [pc, #28]	; (23edd34 <_Z14BackGroundWorkv+0x7c>)
 23edd16:	2100      	movs	r1, #0
 23edd18:	8818      	ldrh	r0, [r3, #0]
 23edd1a:	f00c fa6a 	bl	23fa1f2 <digitalWrite>
    TurnLedOff = false;
 23edd1e:	2300      	movs	r3, #0
 23edd20:	7023      	strb	r3, [r4, #0]
}
 23edd22:	bd38      	pop	{r3, r4, r5, pc}
 23edd24:	1006a294 	.word	0x1006a294
 23edd28:	1006a304 	.word	0x1006a304
 23edd2c:	1006a2e9 	.word	0x1006a2e9
 23edd30:	1006a81b 	.word	0x1006a81b
 23edd34:	1006a144 	.word	0x1006a144

023edd38 <_Z16Particle_PublishPc>:
/*
 * ======================================================================================================================
 * Particle_Publish() - Publish to Particle what is in msgbuf
 * ======================================================================================================================
 */
bool Particle_Publish(char *EventName) {
 23edd38:	b5f0      	push	{r4, r5, r6, r7, lr}
 23edd3a:	b087      	sub	sp, #28
 23edd3c:	4604      	mov	r4, r0
 23edd3e:	f00a f8c9 	bl	23f7ed4 <spark_cloud_flag_connected>
  // Calling Particle.publish() when the cloud connection has been turned off will not publish an event. 
  // This is indicated by the return success code of false. If the cloud connection is turned on and 
  // trying to connect to the cloud unsuccessfully, Particle.publish() may block for up to 20 seconds 
  // (normal conditions) to 10 minutes (unusual conditions). Checking Particle.connected() 
  // before calling Particle.publish() can help prevent this.
  if (Particle.connected()) {
 23edd42:	4605      	mov	r5, r0
 23edd44:	2800      	cmp	r0, #0
 23edd46:	d03e      	beq.n	23eddc6 <_Z16Particle_PublishPc+0x8e>
    uint64_t start_ts = System.millis();
 23edd48:	f7f8 ff50 	bl	23e6bec <_ZN11SystemClass6millisEv>
 23edd4c:	4606      	mov	r6, r0
        return publish_event(eventName, eventData, eventData ? std::strlen(eventData) : 0, static_cast<int>(particle::ContentType::TEXT), ttl, flags1 | flags2);
 23edd4e:	4820      	ldr	r0, [pc, #128]	; (23eddd0 <_Z16Particle_PublishPc+0x98>)
 23edd50:	460f      	mov	r7, r1
 23edd52:	f7f8 f951 	bl	23e5ff8 <strlen>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 23edd56:	4a1f      	ldr	r2, [pc, #124]	; (23eddd4 <_Z16Particle_PublishPc+0x9c>)
 23edd58:	2500      	movs	r5, #0
 23edd5a:	7812      	ldrb	r2, [r2, #0]
 23edd5c:	4603      	mov	r3, r0
 23edd5e:	f88d 2008 	strb.w	r2, [sp, #8]
 23edd62:	223c      	movs	r2, #60	; 0x3c
 23edd64:	4621      	mov	r1, r4
 23edd66:	e9cd 5200 	strd	r5, r2, [sp]
 23edd6a:	a804      	add	r0, sp, #16
 23edd6c:	4a18      	ldr	r2, [pc, #96]	; (23eddd0 <_Z16Particle_PublishPc+0x98>)
 23edd6e:	f00a fe87 	bl	23f8a80 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE>
    explicit Future(ResultT result = ResultT()) :
            FutureBase<ResultT, ContextT>(std::make_shared<detail::FutureImpl<ResultT, ContextT>>(std::move(result))) {
    }

    ResultT result() const {
        return this->p_->result();
 23edd72:	4629      	mov	r1, r5
 23edd74:	9804      	ldr	r0, [sp, #16]
 23edd76:	f7ff fce3 	bl	23ed740 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 23edd7a:	9c05      	ldr	r4, [sp, #20]
 23edd7c:	4605      	mov	r5, r0
 23edd7e:	b17c      	cbz	r4, 23edda0 <_Z16Particle_PublishPc+0x68>
      if (--_M_use_count == 0)
 23edd80:	6863      	ldr	r3, [r4, #4]
 23edd82:	3b01      	subs	r3, #1
 23edd84:	6063      	str	r3, [r4, #4]
 23edd86:	b95b      	cbnz	r3, 23edda0 <_Z16Particle_PublishPc+0x68>
          _M_dispose();
 23edd88:	6823      	ldr	r3, [r4, #0]
 23edd8a:	4620      	mov	r0, r4
 23edd8c:	689b      	ldr	r3, [r3, #8]
 23edd8e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23edd90:	68a3      	ldr	r3, [r4, #8]
 23edd92:	3b01      	subs	r3, #1
 23edd94:	60a3      	str	r3, [r4, #8]
 23edd96:	b91b      	cbnz	r3, 23edda0 <_Z16Particle_PublishPc+0x68>
            _M_destroy();
 23edd98:	6823      	ldr	r3, [r4, #0]
 23edd9a:	4620      	mov	r0, r4
 23edd9c:	68db      	ldr	r3, [r3, #12]
 23edd9e:	4798      	blx	r3
    if (Particle.publish(EventName, msgbuf, WITH_ACK)) {  // PRIVATE flag is always used even when not specified
 23edda0:	b175      	cbz	r5, 23eddc0 <_Z16Particle_PublishPc+0x88>

      // A safty check, If we got hung up for N seconds or more sending, 
      // let's invalidate our wind data and force a reinit in the main loop()
      if ((System.millis() - start_ts) >= 2000) {
 23edda2:	f7f8 ff23 	bl	23e6bec <_ZN11SystemClass6millisEv>
 23edda6:	1b80      	subs	r0, r0, r6
 23edda8:	eb61 0107 	sbc.w	r1, r1, r7
 23eddac:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 23eddb0:	f171 0300 	sbcs.w	r3, r1, #0
        ws_refresh = true;
 23eddb4:	bf22      	ittt	cs
 23eddb6:	2201      	movcs	r2, #1
 23eddb8:	4b07      	ldrcs	r3, [pc, #28]	; (23eddd8 <_Z16Particle_PublishPc+0xa0>)
 23eddba:	701a      	strbcs	r2, [r3, #0]
      }
      // Currently, a device can publish at rate of about 1 event/sec, with bursts of up to 4 allowed in 1 second. 
      // Back to back burst of 4 messages will take 4 seconds to recover.
      // Our BackGroundWork() provides a delay between observations of 1 second 
      BackGroundWork();
 23eddbc:	f7ff ff7c 	bl	23edcb8 <_Z14BackGroundWorkv>
  }
  else {
    Output ("Particle:NotReady");
  }
  return(false);
}
 23eddc0:	4628      	mov	r0, r5
 23eddc2:	b007      	add	sp, #28
 23eddc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Output ("Particle:NotReady");
 23eddc6:	4805      	ldr	r0, [pc, #20]	; (23edddc <_Z16Particle_PublishPc+0xa4>)
 23eddc8:	f7f9 fa0c 	bl	23e71e4 <_Z6OutputPKc>
 23eddcc:	e7f8      	b.n	23eddc0 <_Z16Particle_PublishPc+0x88>
 23eddce:	bf00      	nop
 23eddd0:	1006f140 	.word	0x1006f140
 23eddd4:	1006a81f 	.word	0x1006a81f
 23eddd8:	1007ae5c 	.word	0x1007ae5c
 23edddc:	023fe649 	.word	0x023fe649

023edde0 <_Z14OBS_FS_Publishi>:
/*
 * ======================================================================================================================
 * OBS_FS_Publish() - obs[i].inuse for this observation must be true prior to calling
 * ======================================================================================================================
 */
bool OBS_FS_Publish(int i) {
 23edde0:	b513      	push	{r0, r1, r4, lr}
 23edde2:	9001      	str	r0, [sp, #4]
  OBS_FS_Build_JSON(i);  
 23edde4:	f7fc fc5c 	bl	23ea6a0 <_Z17OBS_FS_Build_JSONi>
  if (Particle_Publish((char *) "FS")) {
 23edde8:	480e      	ldr	r0, [pc, #56]	; (23ede24 <_Z14OBS_FS_Publishi+0x44>)
 23eddea:	f7ff ffa5 	bl	23edd38 <_Z16Particle_PublishPc>
 23eddee:	9a01      	ldr	r2, [sp, #4]
 23eddf0:	4604      	mov	r4, r0
 23eddf2:	b188      	cbz	r0, 23ede18 <_Z14OBS_FS_Publishi+0x38>
    Serial_write (msgbuf);
 23eddf4:	480c      	ldr	r0, [pc, #48]	; (23ede28 <_Z14OBS_FS_Publishi+0x48>)
 23eddf6:	f7f9 f9cb 	bl	23e7190 <_Z12Serial_writePKc>
    sprintf (Buffer32Bytes, "FS[%d]->PUB OK[%d]", i, strlen(msgbuf)+1);
 23eddfa:	480b      	ldr	r0, [pc, #44]	; (23ede28 <_Z14OBS_FS_Publishi+0x48>)
 23eddfc:	f7f8 f8fc 	bl	23e5ff8 <strlen>
 23ede00:	9a01      	ldr	r2, [sp, #4]
 23ede02:	1c43      	adds	r3, r0, #1
 23ede04:	4909      	ldr	r1, [pc, #36]	; (23ede2c <_Z14OBS_FS_Publishi+0x4c>)
 23ede06:	480a      	ldr	r0, [pc, #40]	; (23ede30 <_Z14OBS_FS_Publishi+0x50>)
 23ede08:	f00a f9c2 	bl	23f8190 <sprintf>
    Output(Buffer32Bytes);
    return(true);
  }
  else {
    sprintf (Buffer32Bytes, "FS[%d]->PUB ERR", i);
    Output(Buffer32Bytes);
 23ede0c:	4808      	ldr	r0, [pc, #32]	; (23ede30 <_Z14OBS_FS_Publishi+0x50>)
 23ede0e:	f7f9 f9e9 	bl	23e71e4 <_Z6OutputPKc>
    return(false);
  }
}
 23ede12:	4620      	mov	r0, r4
 23ede14:	b002      	add	sp, #8
 23ede16:	bd10      	pop	{r4, pc}
    sprintf (Buffer32Bytes, "FS[%d]->PUB ERR", i);
 23ede18:	4906      	ldr	r1, [pc, #24]	; (23ede34 <_Z14OBS_FS_Publishi+0x54>)
 23ede1a:	4805      	ldr	r0, [pc, #20]	; (23ede30 <_Z14OBS_FS_Publishi+0x50>)
 23ede1c:	f00a f9b8 	bl	23f8190 <sprintf>
 23ede20:	e7f4      	b.n	23ede0c <_Z14OBS_FS_Publishi+0x2c>
 23ede22:	bf00      	nop
 23ede24:	023fdca9 	.word	0x023fdca9
 23ede28:	1006f140 	.word	0x1006f140
 23ede2c:	023fe65b 	.word	0x023fe65b
 23ede30:	1006a2bf 	.word	0x1006a2bf
 23ede34:	023fe66e 	.word	0x023fe66e

023ede38 <_Z17OBS_Relay_Publishi>:
/*
 * ======================================================================================================================
 * OBS_Relay_Publish()
 * ======================================================================================================================
 */
bool OBS_Relay_Publish(int relay_type) {
 23ede38:	b570      	push	{r4, r5, r6, lr}
  if (relay_type > 0) {  // little safty check. Should not be 0
 23ede3a:	1e04      	subs	r4, r0, #0
 23ede3c:	dd16      	ble.n	23ede6c <_Z17OBS_Relay_Publishi+0x34>
    Serial_write (msgbuf);
    if (Particle_Publish((char *) relay_msgtypes[relay_type])) {
 23ede3e:	4e10      	ldr	r6, [pc, #64]	; (23ede80 <_Z17OBS_Relay_Publishi+0x48>)
    Serial_write (msgbuf);
 23ede40:	4810      	ldr	r0, [pc, #64]	; (23ede84 <_Z17OBS_Relay_Publishi+0x4c>)
 23ede42:	f7f9 f9a5 	bl	23e7190 <_Z12Serial_writePKc>
    if (Particle_Publish((char *) relay_msgtypes[relay_type])) {
 23ede46:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 23ede4a:	f7ff ff75 	bl	23edd38 <_Z16Particle_PublishPc>
      sprintf (Buffer32Bytes, "RELAY[%s]->PUB OK", relay_msgtypes[relay_type]);
 23ede4e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    if (Particle_Publish((char *) relay_msgtypes[relay_type])) {
 23ede52:	4605      	mov	r5, r0
 23ede54:	b140      	cbz	r0, 23ede68 <_Z17OBS_Relay_Publishi+0x30>
      sprintf (Buffer32Bytes, "RELAY[%s]->PUB OK", relay_msgtypes[relay_type]);
 23ede56:	490c      	ldr	r1, [pc, #48]	; (23ede88 <_Z17OBS_Relay_Publishi+0x50>)
      Output(Buffer32Bytes);
      return(true);
    }
    else {
      sprintf (Buffer32Bytes, "RELAY[%s]->PUB ERR", relay_msgtypes[relay_type]);
 23ede58:	480c      	ldr	r0, [pc, #48]	; (23ede8c <_Z17OBS_Relay_Publishi+0x54>)
 23ede5a:	f00a f999 	bl	23f8190 <sprintf>
      Output(Buffer32Bytes);       
 23ede5e:	480b      	ldr	r0, [pc, #44]	; (23ede8c <_Z17OBS_Relay_Publishi+0x54>)
 23ede60:	f7f9 f9c0 	bl	23e71e4 <_Z6OutputPKc>
  else {
    sprintf (Buffer32Bytes, "RELAY TYPE[%d] INVALID", relay_type);
    Output(Buffer32Bytes);
    return(false);
  }
}
 23ede64:	4628      	mov	r0, r5
 23ede66:	bd70      	pop	{r4, r5, r6, pc}
      sprintf (Buffer32Bytes, "RELAY[%s]->PUB ERR", relay_msgtypes[relay_type]);
 23ede68:	4909      	ldr	r1, [pc, #36]	; (23ede90 <_Z17OBS_Relay_Publishi+0x58>)
 23ede6a:	e7f5      	b.n	23ede58 <_Z17OBS_Relay_Publishi+0x20>
    sprintf (Buffer32Bytes, "RELAY TYPE[%d] INVALID", relay_type);
 23ede6c:	4622      	mov	r2, r4
 23ede6e:	4909      	ldr	r1, [pc, #36]	; (23ede94 <_Z17OBS_Relay_Publishi+0x5c>)
 23ede70:	4806      	ldr	r0, [pc, #24]	; (23ede8c <_Z17OBS_Relay_Publishi+0x54>)
 23ede72:	f00a f98d 	bl	23f8190 <sprintf>
    Output(Buffer32Bytes);
 23ede76:	4805      	ldr	r0, [pc, #20]	; (23ede8c <_Z17OBS_Relay_Publishi+0x54>)
 23ede78:	f7f9 f9b4 	bl	23e71e4 <_Z6OutputPKc>
    return(false);
 23ede7c:	2500      	movs	r5, #0
 23ede7e:	e7f1      	b.n	23ede64 <_Z17OBS_Relay_Publishi+0x2c>
 23ede80:	1006a200 	.word	0x1006a200
 23ede84:	1006f140 	.word	0x1006f140
 23ede88:	023fe67e 	.word	0x023fe67e
 23ede8c:	1006a2bf 	.word	0x1006a2bf
 23ede90:	023fe690 	.word	0x023fe690
 23ede94:	023fe6a3 	.word	0x023fe6a3

023ede98 <_Z7INFO_Dov>:
/*
 * ======================================================================================================================
 * INFO_Do() - Get and Send System Information to Particle Cloud
 * ======================================================================================================================
 */
bool INFO_Do() {
 23ede98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ede9c:	b0e4      	sub	sp, #400	; 0x190
  char buf[256];
  const char *comma = "";
  time_t ts = Time.now();
 23ede9e:	f00b ff15 	bl	23f9ccc <_ZN9TimeClass3nowEv>

  Output("INFO_DO()");

  SendSystemInformation = false;
 23edea2:	2500      	movs	r5, #0
  time_t ts = Time.now();
 23edea4:	4604      	mov	r4, r0
 23edea6:	17c6      	asrs	r6, r0, #31
  Output("INFO_DO()");
 23edea8:	48b7      	ldr	r0, [pc, #732]	; (23ee188 <_Z7INFO_Dov+0x2f0>)
 23edeaa:	f7f9 f99b 	bl	23e71e4 <_Z6OutputPKc>
  SendSystemInformation = false;
 23edeae:	4bb7      	ldr	r3, [pc, #732]	; (23ee18c <_Z7INFO_Dov+0x2f4>)

  memset(buf, 0, sizeof(buf));        // holds string of found sensors 
 23edeb0:	4629      	mov	r1, r5
 23edeb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 23edeb6:	a824      	add	r0, sp, #144	; 0x90
  SendSystemInformation = false;
 23edeb8:	701d      	strb	r5, [r3, #0]
  memset(buf, 0, sizeof(buf));        // holds string of found sensors 
 23edeba:	f00e ffa8 	bl	23fce0e <memset>
  memset(msgbuf, 0, sizeof(msgbuf));  // hold the json formatted message we are building for sending.
 23edebe:	4bb4      	ldr	r3, [pc, #720]	; (23ee190 <_Z7INFO_Dov+0x2f8>)
 23edec0:	4629      	mov	r1, r5
 23edec2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 23edec6:	4618      	mov	r0, r3
 23edec8:	f00e ffa1 	bl	23fce0e <memset>
        n_(0) {
 23edecc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 23eded0:	4ab0      	ldr	r2, [pc, #704]	; (23ee194 <_Z7INFO_Dov+0x2fc>)
 23eded2:	900d      	str	r0, [sp, #52]	; 0x34

  JSONBufferWriter writer(msgbuf, sizeof(msgbuf)-1);
  writer.beginObject();
 23eded4:	a80b      	add	r0, sp, #44	; 0x2c
 23eded6:	e9cd 350e 	strd	r3, r5, [sp, #56]	; 0x38
 23ededa:	920b      	str	r2, [sp, #44]	; 0x2c
        state_(BEGIN) {
 23ededc:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 23edee0:	f00b f933 	bl	23f914a <_ZN5spark10JSONWriter11beginObjectEv>

  writer.name("devid").value(System.deviceID());
 23edee4:	49ac      	ldr	r1, [pc, #688]	; (23ee198 <_Z7INFO_Dov+0x300>)
 23edee6:	a80b      	add	r0, sp, #44	; 0x2c
 23edee8:	f7f8 fed4 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23edeec:	4607      	mov	r7, r0
        return spark_deviceID();
 23edeee:	a810      	add	r0, sp, #64	; 0x40
 23edef0:	f009 fffe 	bl	23f7ef0 <spark_deviceID>
    return value(val.c_str(), val.length());
 23edef4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 23edef6:	9910      	ldr	r1, [sp, #64]	; 0x40
 23edef8:	4638      	mov	r0, r7
 23edefa:	f00b fa2f 	bl	23f935c <_ZN5spark10JSONWriter5valueEPKcj>
 23edefe:	a810      	add	r0, sp, #64	; 0x40
 23edf00:	f00b fd8f 	bl	23f9a22 <_ZN6StringD1Ev>
  writer.name("devos").value(System.version());
 23edf04:	49a5      	ldr	r1, [pc, #660]	; (23ee19c <_Z7INFO_Dov+0x304>)
 23edf06:	a80b      	add	r0, sp, #44	; 0x2c
 23edf08:	f7f8 fec4 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
        SystemVersionInfo info = {};
 23edf0c:	f04f 081c 	mov.w	r8, #28
 23edf10:	4607      	mov	r7, r0
 23edf12:	4642      	mov	r2, r8
 23edf14:	4629      	mov	r1, r5
 23edf16:	a810      	add	r0, sp, #64	; 0x40
 23edf18:	f00e ff79 	bl	23fce0e <memset>
        system_version_info(&info, nullptr);
 23edf1c:	4629      	mov	r1, r5
 23edf1e:	a810      	add	r0, sp, #64	; 0x40
        info.size = sizeof(SystemVersionInfo);
 23edf20:	f8ad 8040 	strh.w	r8, [sp, #64]	; 0x40
        system_version_info(&info, nullptr);
 23edf24:	f009 ff20 	bl	23f7d68 <system_version_info>
        return String(info.versionString);
 23edf28:	a912      	add	r1, sp, #72	; 0x48
 23edf2a:	eb0d 0008 	add.w	r0, sp, r8
 23edf2e:	f00b fdc3 	bl	23f9ab8 <_ZN6StringC1EPK19__FlashStringHelper>
 23edf32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23edf34:	9907      	ldr	r1, [sp, #28]
 23edf36:	4638      	mov	r0, r7
 23edf38:	f00b fa10 	bl	23f935c <_ZN5spark10JSONWriter5valueEPKcj>
 23edf3c:	eb0d 0008 	add.w	r0, sp, r8
 23edf40:	f00b fd6f 	bl	23f9a22 <_ZN6StringD1Ev>
  writer.name("freemem").value(System.freeMemory());
 23edf44:	4996      	ldr	r1, [pc, #600]	; (23ee1a0 <_Z7INFO_Dov+0x308>)
 23edf46:	a80b      	add	r0, sp, #44	; 0x2c
 23edf48:	f7f8 fea4 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23edf4c:	4607      	mov	r7, r0
 23edf4e:	f00b fdf4 	bl	23f9b3a <_ZN11SystemClass10freeMemoryEv>
 23edf52:	4601      	mov	r1, r0
 23edf54:	4638      	mov	r0, r7
 23edf56:	f00b f929 	bl	23f91ac <_ZN5spark10JSONWriter5valueEm>
  writer.name("uptime").value(System.uptime());
 23edf5a:	4992      	ldr	r1, [pc, #584]	; (23ee1a4 <_Z7INFO_Dov+0x30c>)
 23edf5c:	a80b      	add	r0, sp, #44	; 0x2c
 23edf5e:	f7f8 fe99 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23edf62:	4607      	mov	r7, r0
        return (hal_timer_millis(nullptr) / 1000);
 23edf64:	4628      	mov	r0, r5
 23edf66:	f009 fb7f 	bl	23f7668 <hal_timer_millis>
 23edf6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23edf6e:	2300      	movs	r3, #0
 23edf70:	f7f7 fea8 	bl	23e5cc4 <__aeabi_uldivmod>
 23edf74:	4601      	mov	r1, r0
 23edf76:	4638      	mov	r0, r7
 23edf78:	f00b f906 	bl	23f9188 <_ZN5spark10JSONWriter5valueEj>
#endif
#if PLATFORM_ID == PLATFORM_BORON
  writer.name("board").value("boron");
#endif

  sprintf (Buffer32Bytes, "%d-%02d-%02dT%02d:%02d:%02d",
 23edf7c:	4620      	mov	r0, r4
 23edf7e:	4631      	mov	r1, r6
 23edf80:	f00b fe6c 	bl	23f9c5c <_ZN9TimeClass4yearEx>
 23edf84:	4631      	mov	r1, r6
 23edf86:	9005      	str	r0, [sp, #20]
 23edf88:	4620      	mov	r0, r4
 23edf8a:	f00b fe5d 	bl	23f9c48 <_ZN9TimeClass5monthEx>
 23edf8e:	4631      	mov	r1, r6
 23edf90:	9004      	str	r0, [sp, #16]
 23edf92:	4620      	mov	r0, r4
 23edf94:	f00b fe50 	bl	23f9c38 <_ZN9TimeClass3dayEx>
 23edf98:	4631      	mov	r1, r6
 23edf9a:	4605      	mov	r5, r0
 23edf9c:	4620      	mov	r0, r4
 23edf9e:	f00b fe33 	bl	23f9c08 <_ZN9TimeClass4hourEx>
 23edfa2:	4631      	mov	r1, r6
 23edfa4:	4607      	mov	r7, r0
 23edfa6:	4620      	mov	r0, r4
 23edfa8:	f00b fe36 	bl	23f9c18 <_ZN9TimeClass6minuteEx>
 23edfac:	4631      	mov	r1, r6
 23edfae:	4680      	mov	r8, r0
 23edfb0:	4620      	mov	r0, r4
 23edfb2:	f00b fe39 	bl	23f9c28 <_ZN9TimeClass6secondEx>
 23edfb6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 23edfba:	e9cd 8002 	strd	r8, r0, [sp, #8]
 23edfbe:	e9cd 5700 	strd	r5, r7, [sp]
 23edfc2:	4979      	ldr	r1, [pc, #484]	; (23ee1a8 <_Z7INFO_Dov+0x310>)
 23edfc4:	4879      	ldr	r0, [pc, #484]	; (23ee1ac <_Z7INFO_Dov+0x314>)
 23edfc6:	f00a f8e3 	bl	23f8190 <sprintf>
    Time.year(ts), Time.month(ts), Time.day(ts),
    Time.hour(ts), Time.minute(ts), Time.second(ts));
  writer.name("at").value(Buffer32Bytes);
 23edfca:	4979      	ldr	r1, [pc, #484]	; (23ee1b0 <_Z7INFO_Dov+0x318>)
 23edfcc:	a80b      	add	r0, sp, #44	; 0x2c
 23edfce:	f7f8 fe61 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23edfd2:	4976      	ldr	r1, [pc, #472]	; (23ee1ac <_Z7INFO_Dov+0x314>)
 23edfd4:	f7f8 fdc0 	bl	23e6b58 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  writer.name("ver").value(VERSION_INFO);
 23edfd8:	4976      	ldr	r1, [pc, #472]	; (23ee1b4 <_Z7INFO_Dov+0x31c>)
 23edfda:	a80b      	add	r0, sp, #44	; 0x2c
 23edfdc:	f7f8 fe5a 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23edfe0:	4975      	ldr	r1, [pc, #468]	; (23ee1b8 <_Z7INFO_Dov+0x320>)
 23edfe2:	f7f8 fdb9 	bl	23e6b58 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  writer.name("hth").value((int) SystemStatusBits);
 23edfe6:	4975      	ldr	r1, [pc, #468]	; (23ee1bc <_Z7INFO_Dov+0x324>)
 23edfe8:	a80b      	add	r0, sp, #44	; 0x2c
 23edfea:	f7f8 fe53 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23edfee:	4b74      	ldr	r3, [pc, #464]	; (23ee1c0 <_Z7INFO_Dov+0x328>)

  sprintf (Buffer32Bytes,"%ds", OBSERVATION_INTERVAL/1000);
  writer.name("obsi").value(Buffer32Bytes);
  sprintf (Buffer32Bytes,"%dm", (int) obs_tx_interval);
 23edff0:	4c74      	ldr	r4, [pc, #464]	; (23ee1c4 <_Z7INFO_Dov+0x32c>)
  writer.name("hth").value((int) SystemStatusBits);
 23edff2:	6819      	ldr	r1, [r3, #0]
 23edff4:	f00b f8b6 	bl	23f9164 <_ZN5spark10JSONWriter5valueEi>
  sprintf (Buffer32Bytes,"%ds", OBSERVATION_INTERVAL/1000);
 23edff8:	223c      	movs	r2, #60	; 0x3c
 23edffa:	4973      	ldr	r1, [pc, #460]	; (23ee1c8 <_Z7INFO_Dov+0x330>)
 23edffc:	486b      	ldr	r0, [pc, #428]	; (23ee1ac <_Z7INFO_Dov+0x314>)
 23edffe:	f00a f8c7 	bl	23f8190 <sprintf>
  writer.name("obsi").value(Buffer32Bytes);
 23ee002:	4972      	ldr	r1, [pc, #456]	; (23ee1cc <_Z7INFO_Dov+0x334>)
 23ee004:	a80b      	add	r0, sp, #44	; 0x2c
 23ee006:	f7f8 fe45 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ee00a:	4968      	ldr	r1, [pc, #416]	; (23ee1ac <_Z7INFO_Dov+0x314>)
 23ee00c:	f7f8 fda4 	bl	23e6b58 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  sprintf (Buffer32Bytes,"%dm", (int) obs_tx_interval);
 23ee010:	6822      	ldr	r2, [r4, #0]
 23ee012:	496f      	ldr	r1, [pc, #444]	; (23ee1d0 <_Z7INFO_Dov+0x338>)
 23ee014:	4865      	ldr	r0, [pc, #404]	; (23ee1ac <_Z7INFO_Dov+0x314>)
 23ee016:	f00a f8bb 	bl	23f8190 <sprintf>
  writer.name("obsti").value(Buffer32Bytes);
 23ee01a:	496e      	ldr	r1, [pc, #440]	; (23ee1d4 <_Z7INFO_Dov+0x33c>)
 23ee01c:	a80b      	add	r0, sp, #44	; 0x2c
 23ee01e:	f7f8 fe39 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ee022:	4962      	ldr	r1, [pc, #392]	; (23ee1ac <_Z7INFO_Dov+0x314>)
 23ee024:	f7f8 fd98 	bl	23e6b58 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  // Time 2 Next Transmit in Seconds
  sprintf (Buffer32Bytes, "%ds", (int) ((obs_tx_interval * 60) - ((System.millis() - LastTransmitTime)/1000)));
 23ee028:	233c      	movs	r3, #60	; 0x3c
 23ee02a:	6824      	ldr	r4, [r4, #0]
 23ee02c:	435c      	muls	r4, r3
 23ee02e:	f7f8 fddd 	bl	23e6bec <_ZN11SystemClass6millisEv>
 23ee032:	4a69      	ldr	r2, [pc, #420]	; (23ee1d8 <_Z7INFO_Dov+0x340>)
 23ee034:	e9d2 3500 	ldrd	r3, r5, [r2]
 23ee038:	1ac0      	subs	r0, r0, r3
 23ee03a:	eb61 0105 	sbc.w	r1, r1, r5
 23ee03e:	2300      	movs	r3, #0
 23ee040:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23ee044:	f7f7 fe3e 	bl	23e5cc4 <__aeabi_uldivmod>
 23ee048:	495f      	ldr	r1, [pc, #380]	; (23ee1c8 <_Z7INFO_Dov+0x330>)
 23ee04a:	1a22      	subs	r2, r4, r0
 23ee04c:	4857      	ldr	r0, [pc, #348]	; (23ee1ac <_Z7INFO_Dov+0x314>)
 23ee04e:	f00a f89f 	bl	23f8190 <sprintf>
  writer.name("t2nt").value(Buffer32Bytes);
 23ee052:	4962      	ldr	r1, [pc, #392]	; (23ee1dc <_Z7INFO_Dov+0x344>)
 23ee054:	a80b      	add	r0, sp, #44	; 0x2c
 23ee056:	f7f8 fe1d 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ee05a:	4954      	ldr	r1, [pc, #336]	; (23ee1ac <_Z7INFO_Dov+0x314>)
 23ee05c:	f7f8 fd7c 	bl	23e6b58 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  // Daily Reboot Countdown Timer
  writer.name("drct").value(DailyRebootCountDownTimer);
 23ee060:	495f      	ldr	r1, [pc, #380]	; (23ee1e0 <_Z7INFO_Dov+0x348>)
 23ee062:	a80b      	add	r0, sp, #44	; 0x2c
 23ee064:	f7f8 fe16 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ee068:	4b5e      	ldr	r3, [pc, #376]	; (23ee1e4 <_Z7INFO_Dov+0x34c>)
 23ee06a:	6819      	ldr	r1, [r3, #0]
 23ee06c:	f00b f87a 	bl	23f9164 <_ZN5spark10JSONWriter5valueEi>

  // Need 2 Send File
  if (SD.exists(SD_n2s_file)) {
 23ee070:	495d      	ldr	r1, [pc, #372]	; (23ee1e8 <_Z7INFO_Dov+0x350>)
 23ee072:	485e      	ldr	r0, [pc, #376]	; (23ee1ec <_Z7INFO_Dov+0x354>)
 23ee074:	f7f8 fe1c 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23ee078:	2800      	cmp	r0, #0
 23ee07a:	f000 82f6 	beq.w	23ee66a <_Z7INFO_Dov+0x7d2>
    File fp = SD.open(SD_n2s_file, FILE_WRITE);
 23ee07e:	495b      	ldr	r1, [pc, #364]	; (23ee1ec <_Z7INFO_Dov+0x354>)
 23ee080:	f244 2302 	movw	r3, #16898	; 0x4202
 23ee084:	4a58      	ldr	r2, [pc, #352]	; (23ee1e8 <_Z7INFO_Dov+0x350>)
 23ee086:	a810      	add	r0, sp, #64	; 0x40
 23ee088:	f009 f998 	bl	23f73bc <_ZN8FsVolume4openEPKci>
  operator bool() const { return isOpen(); }
 23ee08c:	a814      	add	r0, sp, #80	; 0x50
 23ee08e:	f7f8 fe88 	bl	23e6da2 <_ZNK10FsBaseFile6isOpenEv>
    if (fp) {
      writer.name("n2s").value(fp.size());
 23ee092:	4957      	ldr	r1, [pc, #348]	; (23ee1f0 <_Z7INFO_Dov+0x358>)
    if (fp) {
 23ee094:	2800      	cmp	r0, #0
 23ee096:	f000 82e0 	beq.w	23ee65a <_Z7INFO_Dov+0x7c2>
      writer.name("n2s").value(fp.size());
 23ee09a:	a80b      	add	r0, sp, #44	; 0x2c
 23ee09c:	f7f8 fdfa 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ee0a0:	4604      	mov	r4, r0
  PosType size() { return BaseFile::fileSize(); }
 23ee0a2:	a814      	add	r0, sp, #80	; 0x50
 23ee0a4:	f7f8 fe71 	bl	23e6d8a <_ZNK10FsBaseFile8fileSizeEv>
 23ee0a8:	4602      	mov	r2, r0
 23ee0aa:	460b      	mov	r3, r1
 23ee0ac:	4620      	mov	r0, r4
 23ee0ae:	f00b f88f 	bl	23f91d0 <_ZN5spark10JSONWriter5valueEy>
      fp.close();
 23ee0b2:	a814      	add	r0, sp, #80	; 0x50
 23ee0b4:	f009 f8a9 	bl	23f720a <_ZN10FsBaseFile5closeEv>
    writer.name("actsim").value("ERR");
  }
#endif

  // How Pin A4 is Configured
  if (A4_State == A4_STATE_DISTANCE) {
 23ee0b8:	4b4e      	ldr	r3, [pc, #312]	; (23ee1f4 <_Z7INFO_Dov+0x35c>)
 23ee0ba:	681b      	ldr	r3, [r3, #0]
 23ee0bc:	2b01      	cmp	r3, #1
 23ee0be:	f040 82e0 	bne.w	23ee682 <_Z7INFO_Dov+0x7ea>
    if (dg_adjustment == 1.25) {
 23ee0c2:	4b4d      	ldr	r3, [pc, #308]	; (23ee1f8 <_Z7INFO_Dov+0x360>)
 23ee0c4:	eef7 7a04 	vmov.f32	s15, #116	; 0x3fa00000  1.250
 23ee0c8:	ed93 7a00 	vldr	s14, [r3]
 23ee0cc:	eeb4 7a67 	vcmp.f32	s14, s15
 23ee0d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      writer.name("a4").value("DIST 5M");
 23ee0d4:	4949      	ldr	r1, [pc, #292]	; (23ee1fc <_Z7INFO_Dov+0x364>)
 23ee0d6:	a80b      	add	r0, sp, #44	; 0x2c
    if (dg_adjustment == 1.25) {
 23ee0d8:	f040 82cf 	bne.w	23ee67a <_Z7INFO_Dov+0x7e2>
      writer.name("a4").value("DIST 5M");
 23ee0dc:	f7f8 fdda 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ee0e0:	4947      	ldr	r1, [pc, #284]	; (23ee200 <_Z7INFO_Dov+0x368>)
  }
  else if (A4_State == A4_STATE_RAW){
    writer.name("a4").value("RAW");
  }
  else {
    writer.name("a4").value("NS"); // Not Set
 23ee0e2:	f7f8 fd39 	bl	23e6b58 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  }

  if (A5_State == A5_STATE_RAW){
 23ee0e6:	4b47      	ldr	r3, [pc, #284]	; (23ee204 <_Z7INFO_Dov+0x36c>)
    writer.name("a5").value("RAW");
 23ee0e8:	4947      	ldr	r1, [pc, #284]	; (23ee208 <_Z7INFO_Dov+0x370>)
  if (A5_State == A5_STATE_RAW){
 23ee0ea:	681b      	ldr	r3, [r3, #0]
    writer.name("a5").value("RAW");
 23ee0ec:	a80b      	add	r0, sp, #44	; 0x2c
  if (A5_State == A5_STATE_RAW){
 23ee0ee:	2b01      	cmp	r3, #1
 23ee0f0:	f040 82d9 	bne.w	23ee6a6 <_Z7INFO_Dov+0x80e>
    writer.name("a5").value("RAW");
 23ee0f4:	f7f8 fdce 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ee0f8:	4944      	ldr	r1, [pc, #272]	; (23ee20c <_Z7INFO_Dov+0x374>)
  }
  else {
    writer.name("a5").value("NS"); // Not Set
 23ee0fa:	f7f8 fd2d 	bl	23e6b58 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  }

  // Sensors
  if (BMX_1_exists) {
 23ee0fe:	4b44      	ldr	r3, [pc, #272]	; (23ee210 <_Z7INFO_Dov+0x378>)
 23ee100:	781b      	ldrb	r3, [r3, #0]
 23ee102:	2b00      	cmp	r3, #0
 23ee104:	f000 82d3 	beq.w	23ee6ae <_Z7INFO_Dov+0x816>
    sprintf (buf+strlen(buf), "%sBMX1(%s)", comma, bmxtype[BMX_1_type]);
 23ee108:	a824      	add	r0, sp, #144	; 0x90
 23ee10a:	f7f7 ff75 	bl	23e5ff8 <strlen>
 23ee10e:	4b41      	ldr	r3, [pc, #260]	; (23ee214 <_Z7INFO_Dov+0x37c>)
 23ee110:	ac24      	add	r4, sp, #144	; 0x90
 23ee112:	781a      	ldrb	r2, [r3, #0]
 23ee114:	4b40      	ldr	r3, [pc, #256]	; (23ee218 <_Z7INFO_Dov+0x380>)
 23ee116:	4420      	add	r0, r4
 23ee118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23ee11c:	493f      	ldr	r1, [pc, #252]	; (23ee21c <_Z7INFO_Dov+0x384>)
 23ee11e:	4a40      	ldr	r2, [pc, #256]	; (23ee220 <_Z7INFO_Dov+0x388>)
 23ee120:	f00a f836 	bl	23f8190 <sprintf>
    comma=",";
 23ee124:	4c3f      	ldr	r4, [pc, #252]	; (23ee224 <_Z7INFO_Dov+0x38c>)
  }
  if (BMX_2_exists) {
 23ee126:	4b40      	ldr	r3, [pc, #256]	; (23ee228 <_Z7INFO_Dov+0x390>)
 23ee128:	781b      	ldrb	r3, [r3, #0]
 23ee12a:	b173      	cbz	r3, 23ee14a <_Z7INFO_Dov+0x2b2>
    sprintf (buf+strlen(buf), "%sBMX2(%s)", comma, bmxtype[BMX_2_type]);
 23ee12c:	a824      	add	r0, sp, #144	; 0x90
 23ee12e:	f7f7 ff63 	bl	23e5ff8 <strlen>
 23ee132:	4b3e      	ldr	r3, [pc, #248]	; (23ee22c <_Z7INFO_Dov+0x394>)
 23ee134:	493e      	ldr	r1, [pc, #248]	; (23ee230 <_Z7INFO_Dov+0x398>)
 23ee136:	781a      	ldrb	r2, [r3, #0]
 23ee138:	4b37      	ldr	r3, [pc, #220]	; (23ee218 <_Z7INFO_Dov+0x380>)
 23ee13a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23ee13e:	4622      	mov	r2, r4
 23ee140:	ac24      	add	r4, sp, #144	; 0x90
 23ee142:	4420      	add	r0, r4
 23ee144:	f00a f824 	bl	23f8190 <sprintf>
    comma=",";
 23ee148:	4c36      	ldr	r4, [pc, #216]	; (23ee224 <_Z7INFO_Dov+0x38c>)
  }
  if (MCP_1_exists) {
 23ee14a:	4b3a      	ldr	r3, [pc, #232]	; (23ee234 <_Z7INFO_Dov+0x39c>)
 23ee14c:	781b      	ldrb	r3, [r3, #0]
 23ee14e:	b14b      	cbz	r3, 23ee164 <_Z7INFO_Dov+0x2cc>
    sprintf (buf+strlen(buf), "%sMCP1", comma);
 23ee150:	a824      	add	r0, sp, #144	; 0x90
 23ee152:	f7f7 ff51 	bl	23e5ff8 <strlen>
 23ee156:	ab24      	add	r3, sp, #144	; 0x90
 23ee158:	4622      	mov	r2, r4
 23ee15a:	4937      	ldr	r1, [pc, #220]	; (23ee238 <_Z7INFO_Dov+0x3a0>)
 23ee15c:	4418      	add	r0, r3
 23ee15e:	f00a f817 	bl	23f8190 <sprintf>
    comma=",";
 23ee162:	4c30      	ldr	r4, [pc, #192]	; (23ee224 <_Z7INFO_Dov+0x38c>)
  }
  if (MCP_2_exists) {
 23ee164:	4b35      	ldr	r3, [pc, #212]	; (23ee23c <_Z7INFO_Dov+0x3a4>)
 23ee166:	781b      	ldrb	r3, [r3, #0]
 23ee168:	b14b      	cbz	r3, 23ee17e <_Z7INFO_Dov+0x2e6>
    sprintf (buf+strlen(buf), "%sMCP2", comma);
 23ee16a:	a824      	add	r0, sp, #144	; 0x90
 23ee16c:	f7f7 ff44 	bl	23e5ff8 <strlen>
 23ee170:	ab24      	add	r3, sp, #144	; 0x90
 23ee172:	4622      	mov	r2, r4
 23ee174:	4932      	ldr	r1, [pc, #200]	; (23ee240 <_Z7INFO_Dov+0x3a8>)
 23ee176:	4418      	add	r0, r3
 23ee178:	f00a f80a 	bl	23f8190 <sprintf>
    comma=",";
 23ee17c:	4c29      	ldr	r4, [pc, #164]	; (23ee224 <_Z7INFO_Dov+0x38c>)
  }
  if (MCP_3_exists) {
 23ee17e:	4d31      	ldr	r5, [pc, #196]	; (23ee244 <_Z7INFO_Dov+0x3ac>)
 23ee180:	782b      	ldrb	r3, [r5, #0]
 23ee182:	2b00      	cmp	r3, #0
 23ee184:	d06a      	beq.n	23ee25c <_Z7INFO_Dov+0x3c4>
 23ee186:	e05f      	b.n	23ee248 <_Z7INFO_Dov+0x3b0>
 23ee188:	023fe6dc 	.word	0x023fe6dc
 23ee18c:	1006a1c8 	.word	0x1006a1c8
 23ee190:	1006f140 	.word	0x1006f140
 23ee194:	023ffaac 	.word	0x023ffaac
 23ee198:	023fe6e6 	.word	0x023fe6e6
 23ee19c:	023fe6ec 	.word	0x023fe6ec
 23ee1a0:	023fe6f2 	.word	0x023fe6f2
 23ee1a4:	023fe6fa 	.word	0x023fe6fa
 23ee1a8:	023fd365 	.word	0x023fd365
 23ee1ac:	1006a2bf 	.word	0x1006a2bf
 23ee1b0:	023fdc91 	.word	0x023fdc91
 23ee1b4:	023fe701 	.word	0x023fe701
 23ee1b8:	023fe705 	.word	0x023fe705
 23ee1bc:	023fdc98 	.word	0x023fdc98
 23ee1c0:	1006a1cc 	.word	0x1006a1cc
 23ee1c4:	1006a1f8 	.word	0x1006a1f8
 23ee1c8:	023fe712 	.word	0x023fe712
 23ee1cc:	023fe716 	.word	0x023fe716
 23ee1d0:	023fe71b 	.word	0x023fe71b
 23ee1d4:	023fe71f 	.word	0x023fe71f
 23ee1d8:	1006a2f8 	.word	0x1006a2f8
 23ee1dc:	023fe725 	.word	0x023fe725
 23ee1e0:	023fe72a 	.word	0x023fe72a
 23ee1e4:	1006a2e0 	.word	0x1006a2e0
 23ee1e8:	1006a19f 	.word	0x1006a19f
 23ee1ec:	1006a308 	.word	0x1006a308
 23ee1f0:	023fe72f 	.word	0x023fe72f
 23ee1f4:	1006a294 	.word	0x1006a294
 23ee1f8:	1006a1f4 	.word	0x1006a1f4
 23ee1fc:	023fe733 	.word	0x023fe733
 23ee200:	023fe736 	.word	0x023fe736
 23ee204:	1006a298 	.word	0x1006a298
 23ee208:	023fe74e 	.word	0x023fe74e
 23ee20c:	023fdedd 	.word	0x023fdedd
 23ee210:	1006a2ba 	.word	0x1006a2ba
 23ee214:	1006a2bb 	.word	0x1006a2bb
 23ee218:	1006a1d0 	.word	0x1006a1d0
 23ee21c:	023fe751 	.word	0x023fe751
 23ee220:	023fea19 	.word	0x023fea19
 23ee224:	023fdb7a 	.word	0x023fdb7a
 23ee228:	1006a2bd 	.word	0x1006a2bd
 23ee22c:	1006a2be 	.word	0x1006a2be
 23ee230:	023fe75c 	.word	0x023fe75c
 23ee234:	1006a300 	.word	0x1006a300
 23ee238:	023fe767 	.word	0x023fe767
 23ee23c:	1006a301 	.word	0x1006a301
 23ee240:	023fe76e 	.word	0x023fe76e
 23ee244:	1006a302 	.word	0x1006a302
    sprintf (buf+strlen(buf), "%sMCP3/gt1", comma);
 23ee248:	a824      	add	r0, sp, #144	; 0x90
 23ee24a:	f7f7 fed5 	bl	23e5ff8 <strlen>
 23ee24e:	ab24      	add	r3, sp, #144	; 0x90
 23ee250:	4622      	mov	r2, r4
 23ee252:	499a      	ldr	r1, [pc, #616]	; (23ee4bc <_Z7INFO_Dov+0x624>)
 23ee254:	4418      	add	r0, r3
 23ee256:	f009 ff9b 	bl	23f8190 <sprintf>
    comma=",";
 23ee25a:	4c99      	ldr	r4, [pc, #612]	; (23ee4c0 <_Z7INFO_Dov+0x628>)
  }
  if (MCP_4_exists) {
 23ee25c:	4b99      	ldr	r3, [pc, #612]	; (23ee4c4 <_Z7INFO_Dov+0x62c>)
 23ee25e:	781b      	ldrb	r3, [r3, #0]
 23ee260:	b14b      	cbz	r3, 23ee276 <_Z7INFO_Dov+0x3de>
    sprintf (buf+strlen(buf), "%sMCP4/gt2", comma);
 23ee262:	a824      	add	r0, sp, #144	; 0x90
 23ee264:	f7f7 fec8 	bl	23e5ff8 <strlen>
 23ee268:	ab24      	add	r3, sp, #144	; 0x90
 23ee26a:	4622      	mov	r2, r4
 23ee26c:	4996      	ldr	r1, [pc, #600]	; (23ee4c8 <_Z7INFO_Dov+0x630>)
 23ee26e:	4418      	add	r0, r3
 23ee270:	f009 ff8e 	bl	23f8190 <sprintf>
    comma=",";
 23ee274:	4c92      	ldr	r4, [pc, #584]	; (23ee4c0 <_Z7INFO_Dov+0x628>)
  }
  if (SHT_1_exists) {
 23ee276:	4b95      	ldr	r3, [pc, #596]	; (23ee4cc <_Z7INFO_Dov+0x634>)
 23ee278:	781b      	ldrb	r3, [r3, #0]
 23ee27a:	b14b      	cbz	r3, 23ee290 <_Z7INFO_Dov+0x3f8>
    sprintf (buf+strlen(buf), "%sSHT1", comma);
 23ee27c:	a824      	add	r0, sp, #144	; 0x90
 23ee27e:	f7f7 febb 	bl	23e5ff8 <strlen>
 23ee282:	ab24      	add	r3, sp, #144	; 0x90
 23ee284:	4622      	mov	r2, r4
 23ee286:	4992      	ldr	r1, [pc, #584]	; (23ee4d0 <_Z7INFO_Dov+0x638>)
 23ee288:	4418      	add	r0, r3
 23ee28a:	f009 ff81 	bl	23f8190 <sprintf>
    comma=",";
 23ee28e:	4c8c      	ldr	r4, [pc, #560]	; (23ee4c0 <_Z7INFO_Dov+0x628>)
  }
  if (SHT_2_exists) {
 23ee290:	4b90      	ldr	r3, [pc, #576]	; (23ee4d4 <_Z7INFO_Dov+0x63c>)
 23ee292:	781b      	ldrb	r3, [r3, #0]
 23ee294:	b14b      	cbz	r3, 23ee2aa <_Z7INFO_Dov+0x412>
    sprintf (buf+strlen(buf), "%sSHT2", comma);
 23ee296:	a824      	add	r0, sp, #144	; 0x90
 23ee298:	f7f7 feae 	bl	23e5ff8 <strlen>
 23ee29c:	ab24      	add	r3, sp, #144	; 0x90
 23ee29e:	4622      	mov	r2, r4
 23ee2a0:	498d      	ldr	r1, [pc, #564]	; (23ee4d8 <_Z7INFO_Dov+0x640>)
 23ee2a2:	4418      	add	r0, r3
 23ee2a4:	f009 ff74 	bl	23f8190 <sprintf>
    comma=",";
 23ee2a8:	4c85      	ldr	r4, [pc, #532]	; (23ee4c0 <_Z7INFO_Dov+0x628>)
  }
  if (HDC_1_exists) {
 23ee2aa:	4b8c      	ldr	r3, [pc, #560]	; (23ee4dc <_Z7INFO_Dov+0x644>)
 23ee2ac:	781b      	ldrb	r3, [r3, #0]
 23ee2ae:	b14b      	cbz	r3, 23ee2c4 <_Z7INFO_Dov+0x42c>
    sprintf (buf+strlen(buf), "%sHDC1", comma);
 23ee2b0:	a824      	add	r0, sp, #144	; 0x90
 23ee2b2:	f7f7 fea1 	bl	23e5ff8 <strlen>
 23ee2b6:	ab24      	add	r3, sp, #144	; 0x90
 23ee2b8:	4622      	mov	r2, r4
 23ee2ba:	4989      	ldr	r1, [pc, #548]	; (23ee4e0 <_Z7INFO_Dov+0x648>)
 23ee2bc:	4418      	add	r0, r3
 23ee2be:	f009 ff67 	bl	23f8190 <sprintf>
    comma=",";
 23ee2c2:	4c7f      	ldr	r4, [pc, #508]	; (23ee4c0 <_Z7INFO_Dov+0x628>)
  }
  if (HDC_2_exists) {
 23ee2c4:	4b87      	ldr	r3, [pc, #540]	; (23ee4e4 <_Z7INFO_Dov+0x64c>)
 23ee2c6:	781b      	ldrb	r3, [r3, #0]
 23ee2c8:	b14b      	cbz	r3, 23ee2de <_Z7INFO_Dov+0x446>
    sprintf (buf+strlen(buf), "%sHDC2", comma);
 23ee2ca:	a824      	add	r0, sp, #144	; 0x90
 23ee2cc:	f7f7 fe94 	bl	23e5ff8 <strlen>
 23ee2d0:	ab24      	add	r3, sp, #144	; 0x90
 23ee2d2:	4622      	mov	r2, r4
 23ee2d4:	4984      	ldr	r1, [pc, #528]	; (23ee4e8 <_Z7INFO_Dov+0x650>)
 23ee2d6:	4418      	add	r0, r3
 23ee2d8:	f009 ff5a 	bl	23f8190 <sprintf>
    comma=",";
 23ee2dc:	4c78      	ldr	r4, [pc, #480]	; (23ee4c0 <_Z7INFO_Dov+0x628>)
  }
  if (LPS_1_exists) {
 23ee2de:	4b83      	ldr	r3, [pc, #524]	; (23ee4ec <_Z7INFO_Dov+0x654>)
 23ee2e0:	781b      	ldrb	r3, [r3, #0]
 23ee2e2:	b14b      	cbz	r3, 23ee2f8 <_Z7INFO_Dov+0x460>
    sprintf (buf+strlen(buf), "%sLPS1", comma);
 23ee2e4:	a824      	add	r0, sp, #144	; 0x90
 23ee2e6:	f7f7 fe87 	bl	23e5ff8 <strlen>
 23ee2ea:	ab24      	add	r3, sp, #144	; 0x90
 23ee2ec:	4622      	mov	r2, r4
 23ee2ee:	4980      	ldr	r1, [pc, #512]	; (23ee4f0 <_Z7INFO_Dov+0x658>)
 23ee2f0:	4418      	add	r0, r3
 23ee2f2:	f009 ff4d 	bl	23f8190 <sprintf>
    comma=",";
 23ee2f6:	4c72      	ldr	r4, [pc, #456]	; (23ee4c0 <_Z7INFO_Dov+0x628>)
  }
  if (LPS_2_exists) {
 23ee2f8:	4b7e      	ldr	r3, [pc, #504]	; (23ee4f4 <_Z7INFO_Dov+0x65c>)
 23ee2fa:	781b      	ldrb	r3, [r3, #0]
 23ee2fc:	b14b      	cbz	r3, 23ee312 <_Z7INFO_Dov+0x47a>
    sprintf (buf+strlen(buf), "%sLPS2", comma);
 23ee2fe:	a824      	add	r0, sp, #144	; 0x90
 23ee300:	f7f7 fe7a 	bl	23e5ff8 <strlen>
 23ee304:	ab24      	add	r3, sp, #144	; 0x90
 23ee306:	4622      	mov	r2, r4
 23ee308:	497b      	ldr	r1, [pc, #492]	; (23ee4f8 <_Z7INFO_Dov+0x660>)
 23ee30a:	4418      	add	r0, r3
 23ee30c:	f009 ff40 	bl	23f8190 <sprintf>
    comma=",";
 23ee310:	4c6b      	ldr	r4, [pc, #428]	; (23ee4c0 <_Z7INFO_Dov+0x628>)
  }
  if (HIH8_exists) {
 23ee312:	4b7a      	ldr	r3, [pc, #488]	; (23ee4fc <_Z7INFO_Dov+0x664>)
 23ee314:	781b      	ldrb	r3, [r3, #0]
 23ee316:	b14b      	cbz	r3, 23ee32c <_Z7INFO_Dov+0x494>
    sprintf (buf+strlen(buf), "%sHIH8", comma);
 23ee318:	a824      	add	r0, sp, #144	; 0x90
 23ee31a:	f7f7 fe6d 	bl	23e5ff8 <strlen>
 23ee31e:	ab24      	add	r3, sp, #144	; 0x90
 23ee320:	4622      	mov	r2, r4
 23ee322:	4977      	ldr	r1, [pc, #476]	; (23ee500 <_Z7INFO_Dov+0x668>)
 23ee324:	4418      	add	r0, r3
 23ee326:	f009 ff33 	bl	23f8190 <sprintf>
    comma=",";
 23ee32a:	4c65      	ldr	r4, [pc, #404]	; (23ee4c0 <_Z7INFO_Dov+0x628>)
  }
  if (SI1145_exists) {
 23ee32c:	4b75      	ldr	r3, [pc, #468]	; (23ee504 <_Z7INFO_Dov+0x66c>)
 23ee32e:	781b      	ldrb	r3, [r3, #0]
 23ee330:	b14b      	cbz	r3, 23ee346 <_Z7INFO_Dov+0x4ae>
    sprintf (buf+strlen(buf), "%sSI", comma);
 23ee332:	a824      	add	r0, sp, #144	; 0x90
 23ee334:	f7f7 fe60 	bl	23e5ff8 <strlen>
 23ee338:	ab24      	add	r3, sp, #144	; 0x90
 23ee33a:	4622      	mov	r2, r4
 23ee33c:	4972      	ldr	r1, [pc, #456]	; (23ee508 <_Z7INFO_Dov+0x670>)
 23ee33e:	4418      	add	r0, r3
 23ee340:	f009 ff26 	bl	23f8190 <sprintf>
    comma=",";
 23ee344:	4c5e      	ldr	r4, [pc, #376]	; (23ee4c0 <_Z7INFO_Dov+0x628>)
  }
  if (VEML7700_exists) {
 23ee346:	4b71      	ldr	r3, [pc, #452]	; (23ee50c <_Z7INFO_Dov+0x674>)
 23ee348:	781b      	ldrb	r3, [r3, #0]
 23ee34a:	b14b      	cbz	r3, 23ee360 <_Z7INFO_Dov+0x4c8>
    sprintf (buf+strlen(buf), "%sVEML", comma);
 23ee34c:	a824      	add	r0, sp, #144	; 0x90
 23ee34e:	f7f7 fe53 	bl	23e5ff8 <strlen>
 23ee352:	ab24      	add	r3, sp, #144	; 0x90
 23ee354:	4622      	mov	r2, r4
 23ee356:	496e      	ldr	r1, [pc, #440]	; (23ee510 <_Z7INFO_Dov+0x678>)
 23ee358:	4418      	add	r0, r3
 23ee35a:	f009 ff19 	bl	23f8190 <sprintf>
    comma=",";
 23ee35e:	4c58      	ldr	r4, [pc, #352]	; (23ee4c0 <_Z7INFO_Dov+0x628>)
  }
  if (BLX_exists) {
 23ee360:	4b6c      	ldr	r3, [pc, #432]	; (23ee514 <_Z7INFO_Dov+0x67c>)
 23ee362:	781b      	ldrb	r3, [r3, #0]
 23ee364:	b14b      	cbz	r3, 23ee37a <_Z7INFO_Dov+0x4e2>
    sprintf (buf+strlen(buf), "%sBLX", comma);
 23ee366:	a824      	add	r0, sp, #144	; 0x90
 23ee368:	f7f7 fe46 	bl	23e5ff8 <strlen>
 23ee36c:	ab24      	add	r3, sp, #144	; 0x90
 23ee36e:	4622      	mov	r2, r4
 23ee370:	4969      	ldr	r1, [pc, #420]	; (23ee518 <_Z7INFO_Dov+0x680>)
 23ee372:	4418      	add	r0, r3
 23ee374:	f009 ff0c 	bl	23f8190 <sprintf>
    comma=",";
 23ee378:	4c51      	ldr	r4, [pc, #324]	; (23ee4c0 <_Z7INFO_Dov+0x628>)
  }
  if (AS5600_exists) {
 23ee37a:	4b68      	ldr	r3, [pc, #416]	; (23ee51c <_Z7INFO_Dov+0x684>)
 23ee37c:	781b      	ldrb	r3, [r3, #0]
 23ee37e:	b14b      	cbz	r3, 23ee394 <_Z7INFO_Dov+0x4fc>
    sprintf (buf+strlen(buf), "%sAS5600", comma);
 23ee380:	a824      	add	r0, sp, #144	; 0x90
 23ee382:	f7f7 fe39 	bl	23e5ff8 <strlen>
 23ee386:	ab24      	add	r3, sp, #144	; 0x90
 23ee388:	4622      	mov	r2, r4
 23ee38a:	4965      	ldr	r1, [pc, #404]	; (23ee520 <_Z7INFO_Dov+0x688>)
 23ee38c:	4418      	add	r0, r3
 23ee38e:	f009 feff 	bl	23f8190 <sprintf>
    comma=",";
 23ee392:	4c4b      	ldr	r4, [pc, #300]	; (23ee4c0 <_Z7INFO_Dov+0x628>)
  }
  if (TLW_exists) {
 23ee394:	4b63      	ldr	r3, [pc, #396]	; (23ee524 <_Z7INFO_Dov+0x68c>)
 23ee396:	781b      	ldrb	r3, [r3, #0]
 23ee398:	b14b      	cbz	r3, 23ee3ae <_Z7INFO_Dov+0x516>
    sprintf (buf+strlen(buf), "%sTLW", comma);
 23ee39a:	a824      	add	r0, sp, #144	; 0x90
 23ee39c:	f7f7 fe2c 	bl	23e5ff8 <strlen>
 23ee3a0:	ab24      	add	r3, sp, #144	; 0x90
 23ee3a2:	4622      	mov	r2, r4
 23ee3a4:	4960      	ldr	r1, [pc, #384]	; (23ee528 <_Z7INFO_Dov+0x690>)
 23ee3a6:	4418      	add	r0, r3
 23ee3a8:	f009 fef2 	bl	23f8190 <sprintf>
    comma=",";
 23ee3ac:	4c44      	ldr	r4, [pc, #272]	; (23ee4c0 <_Z7INFO_Dov+0x628>)
  }
  if (TSM_exists) {
 23ee3ae:	4b5f      	ldr	r3, [pc, #380]	; (23ee52c <_Z7INFO_Dov+0x694>)
 23ee3b0:	781b      	ldrb	r3, [r3, #0]
 23ee3b2:	b14b      	cbz	r3, 23ee3c8 <_Z7INFO_Dov+0x530>
    sprintf (buf+strlen(buf), "%sTSM", comma);
 23ee3b4:	a824      	add	r0, sp, #144	; 0x90
 23ee3b6:	f7f7 fe1f 	bl	23e5ff8 <strlen>
 23ee3ba:	ab24      	add	r3, sp, #144	; 0x90
 23ee3bc:	4622      	mov	r2, r4
 23ee3be:	495c      	ldr	r1, [pc, #368]	; (23ee530 <_Z7INFO_Dov+0x698>)
 23ee3c0:	4418      	add	r0, r3
 23ee3c2:	f009 fee5 	bl	23f8190 <sprintf>
    comma=",";
 23ee3c6:	4c3e      	ldr	r4, [pc, #248]	; (23ee4c0 <_Z7INFO_Dov+0x628>)
  }
  if (TMSM_exists) {
 23ee3c8:	4b5a      	ldr	r3, [pc, #360]	; (23ee534 <_Z7INFO_Dov+0x69c>)
 23ee3ca:	781b      	ldrb	r3, [r3, #0]
 23ee3cc:	b14b      	cbz	r3, 23ee3e2 <_Z7INFO_Dov+0x54a>
    sprintf (buf+strlen(buf), "%sTMSM", comma);
 23ee3ce:	a824      	add	r0, sp, #144	; 0x90
 23ee3d0:	f7f7 fe12 	bl	23e5ff8 <strlen>
 23ee3d4:	ab24      	add	r3, sp, #144	; 0x90
 23ee3d6:	4622      	mov	r2, r4
 23ee3d8:	4957      	ldr	r1, [pc, #348]	; (23ee538 <_Z7INFO_Dov+0x6a0>)
 23ee3da:	4418      	add	r0, r3
 23ee3dc:	f009 fed8 	bl	23f8190 <sprintf>
    comma=",";
 23ee3e0:	4c37      	ldr	r4, [pc, #220]	; (23ee4c0 <_Z7INFO_Dov+0x628>)
  }
  if (HI_exists) {
 23ee3e2:	4b56      	ldr	r3, [pc, #344]	; (23ee53c <_Z7INFO_Dov+0x6a4>)
 23ee3e4:	781b      	ldrb	r3, [r3, #0]
 23ee3e6:	b14b      	cbz	r3, 23ee3fc <_Z7INFO_Dov+0x564>
    sprintf (buf+strlen(buf), "%sHI", comma);
 23ee3e8:	a824      	add	r0, sp, #144	; 0x90
 23ee3ea:	f7f7 fe05 	bl	23e5ff8 <strlen>
 23ee3ee:	ab24      	add	r3, sp, #144	; 0x90
 23ee3f0:	4622      	mov	r2, r4
 23ee3f2:	4953      	ldr	r1, [pc, #332]	; (23ee540 <_Z7INFO_Dov+0x6a8>)
 23ee3f4:	4418      	add	r0, r3
 23ee3f6:	f009 fecb 	bl	23f8190 <sprintf>
    comma=",";
 23ee3fa:	4c31      	ldr	r4, [pc, #196]	; (23ee4c0 <_Z7INFO_Dov+0x628>)
  }
  if (WBT_exists) {
 23ee3fc:	4b51      	ldr	r3, [pc, #324]	; (23ee544 <_Z7INFO_Dov+0x6ac>)
 23ee3fe:	781b      	ldrb	r3, [r3, #0]
 23ee400:	b14b      	cbz	r3, 23ee416 <_Z7INFO_Dov+0x57e>
    sprintf (buf+strlen(buf), "%sWBT", comma);
 23ee402:	a824      	add	r0, sp, #144	; 0x90
 23ee404:	f7f7 fdf8 	bl	23e5ff8 <strlen>
 23ee408:	ab24      	add	r3, sp, #144	; 0x90
 23ee40a:	4622      	mov	r2, r4
 23ee40c:	494e      	ldr	r1, [pc, #312]	; (23ee548 <_Z7INFO_Dov+0x6b0>)
 23ee40e:	4418      	add	r0, r3
 23ee410:	f009 febe 	bl	23f8190 <sprintf>
    comma=",";
 23ee414:	4c2a      	ldr	r4, [pc, #168]	; (23ee4c0 <_Z7INFO_Dov+0x628>)
  }
  if (WBGT_exists) {
 23ee416:	4b4d      	ldr	r3, [pc, #308]	; (23ee54c <_Z7INFO_Dov+0x6b4>)
 23ee418:	781b      	ldrb	r3, [r3, #0]
 23ee41a:	b16b      	cbz	r3, 23ee438 <_Z7INFO_Dov+0x5a0>
    if (MCP_3_exists) {
      sprintf (buf+strlen(buf), "%sWBGT W/GLOBE", comma);
 23ee41c:	a824      	add	r0, sp, #144	; 0x90
 23ee41e:	f7f7 fdeb 	bl	23e5ff8 <strlen>
 23ee422:	ab24      	add	r3, sp, #144	; 0x90
 23ee424:	4418      	add	r0, r3
    if (MCP_3_exists) {
 23ee426:	782b      	ldrb	r3, [r5, #0]
      sprintf (buf+strlen(buf), "%sWBGT W/GLOBE", comma);
 23ee428:	4622      	mov	r2, r4
    if (MCP_3_exists) {
 23ee42a:	2b00      	cmp	r3, #0
 23ee42c:	f000 8141 	beq.w	23ee6b2 <_Z7INFO_Dov+0x81a>
      sprintf (buf+strlen(buf), "%sWBGT W/GLOBE", comma);
 23ee430:	4947      	ldr	r1, [pc, #284]	; (23ee550 <_Z7INFO_Dov+0x6b8>)
    }
    else {
      sprintf (buf+strlen(buf), "%sWBGT WO/GLOBE", comma);
 23ee432:	f009 fead 	bl	23f8190 <sprintf>
    }
    comma=",";
 23ee436:	4c22      	ldr	r4, [pc, #136]	; (23ee4c0 <_Z7INFO_Dov+0x628>)
  }
  if (PM25AQI_exists) {
 23ee438:	4b46      	ldr	r3, [pc, #280]	; (23ee554 <_Z7INFO_Dov+0x6bc>)
 23ee43a:	781b      	ldrb	r3, [r3, #0]
 23ee43c:	b14b      	cbz	r3, 23ee452 <_Z7INFO_Dov+0x5ba>
    sprintf (buf+strlen(buf), "%sPM25AQ", comma);
 23ee43e:	a824      	add	r0, sp, #144	; 0x90
 23ee440:	f7f7 fdda 	bl	23e5ff8 <strlen>
 23ee444:	ab24      	add	r3, sp, #144	; 0x90
 23ee446:	4622      	mov	r2, r4
 23ee448:	4943      	ldr	r1, [pc, #268]	; (23ee558 <_Z7INFO_Dov+0x6c0>)
 23ee44a:	4418      	add	r0, r3
 23ee44c:	f009 fea0 	bl	23f8190 <sprintf>
    comma=",";
 23ee450:	4c1b      	ldr	r4, [pc, #108]	; (23ee4c0 <_Z7INFO_Dov+0x628>)
  }

  GetPinName(RAINGAUGE1_IRQ_PIN, Buffer32Bytes);
 23ee452:	4942      	ldr	r1, [pc, #264]	; (23ee55c <_Z7INFO_Dov+0x6c4>)
 23ee454:	2010      	movs	r0, #16
 23ee456:	f7fc fa7d 	bl	23ea954 <_Z10GetPinNametPc>
  sprintf (buf+strlen(buf), "%sRG(%s)", comma, Buffer32Bytes);
 23ee45a:	a824      	add	r0, sp, #144	; 0x90
 23ee45c:	f7f7 fdcc 	bl	23e5ff8 <strlen>
 23ee460:	4622      	mov	r2, r4
 23ee462:	ac24      	add	r4, sp, #144	; 0x90
 23ee464:	4b3d      	ldr	r3, [pc, #244]	; (23ee55c <_Z7INFO_Dov+0x6c4>)
 23ee466:	493e      	ldr	r1, [pc, #248]	; (23ee560 <_Z7INFO_Dov+0x6c8>)
 23ee468:	4420      	add	r0, r4
 23ee46a:	f009 fe91 	bl	23f8190 <sprintf>

  writer.name("sensors").value(buf);
 23ee46e:	493d      	ldr	r1, [pc, #244]	; (23ee564 <_Z7INFO_Dov+0x6cc>)
 23ee470:	a80b      	add	r0, sp, #44	; 0x2c
 23ee472:	f7f8 fc0f 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ee476:	4621      	mov	r1, r4
 23ee478:	f7f8 fb6e 	bl	23e6b58 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  // LoRa
  if (LORA_exists) {
 23ee47c:	4b3a      	ldr	r3, [pc, #232]	; (23ee568 <_Z7INFO_Dov+0x6d0>)
 23ee47e:	781b      	ldrb	r3, [r3, #0]
 23ee480:	2b00      	cmp	r3, #0
 23ee482:	f000 8118 	beq.w	23ee6b6 <_Z7INFO_Dov+0x81e>
    sprintf (buf, "%d,%d,%dMHz", cf_lora_unitid, cf_lora_txpower, cf_lora_freq);  
 23ee486:	4b39      	ldr	r3, [pc, #228]	; (23ee56c <_Z7INFO_Dov+0x6d4>)
 23ee488:	4a39      	ldr	r2, [pc, #228]	; (23ee570 <_Z7INFO_Dov+0x6d8>)
 23ee48a:	681b      	ldr	r3, [r3, #0]
 23ee48c:	4620      	mov	r0, r4
 23ee48e:	9300      	str	r3, [sp, #0]
 23ee490:	4b38      	ldr	r3, [pc, #224]	; (23ee574 <_Z7INFO_Dov+0x6dc>)
 23ee492:	6812      	ldr	r2, [r2, #0]
 23ee494:	681b      	ldr	r3, [r3, #0]
 23ee496:	4938      	ldr	r1, [pc, #224]	; (23ee578 <_Z7INFO_Dov+0x6e0>)
 23ee498:	f009 fe7a 	bl	23f8190 <sprintf>
  }
  else {
    sprintf (buf, "NF");
  }
  writer.name("lora").value(buf);
 23ee49c:	4937      	ldr	r1, [pc, #220]	; (23ee57c <_Z7INFO_Dov+0x6e4>)

  // Oled Display
  if (oled_type) {
 23ee49e:	4c38      	ldr	r4, [pc, #224]	; (23ee580 <_Z7INFO_Dov+0x6e8>)
  writer.name("lora").value(buf);
 23ee4a0:	a80b      	add	r0, sp, #44	; 0x2c
 23ee4a2:	f7f8 fbf7 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ee4a6:	a924      	add	r1, sp, #144	; 0x90
 23ee4a8:	f7f8 fb56 	bl	23e6b58 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  if (oled_type) {
 23ee4ac:	6823      	ldr	r3, [r4, #0]
    writer.name("oled").value(OLED32 ? "32" : "64");
 23ee4ae:	4935      	ldr	r1, [pc, #212]	; (23ee584 <_Z7INFO_Dov+0x6ec>)
 23ee4b0:	a80b      	add	r0, sp, #44	; 0x2c
  if (oled_type) {
 23ee4b2:	2b00      	cmp	r3, #0
 23ee4b4:	f000 8104 	beq.w	23ee6c0 <_Z7INFO_Dov+0x828>
 23ee4b8:	e066      	b.n	23ee588 <_Z7INFO_Dov+0x6f0>
 23ee4ba:	bf00      	nop
 23ee4bc:	023fe775 	.word	0x023fe775
 23ee4c0:	023fdb7a 	.word	0x023fdb7a
 23ee4c4:	1006a303 	.word	0x1006a303
 23ee4c8:	023fe780 	.word	0x023fe780
 23ee4cc:	1006a808 	.word	0x1006a808
 23ee4d0:	023fe78b 	.word	0x023fe78b
 23ee4d4:	1006a809 	.word	0x1006a809
 23ee4d8:	023fe792 	.word	0x023fe792
 23ee4dc:	1006a2e4 	.word	0x1006a2e4
 23ee4e0:	023fe799 	.word	0x023fe799
 23ee4e4:	1006a2e5 	.word	0x1006a2e5
 23ee4e8:	023fe7a0 	.word	0x023fe7a0
 23ee4ec:	1006a2ea 	.word	0x1006a2ea
 23ee4f0:	023fe7a7 	.word	0x023fe7a7
 23ee4f4:	1006a2eb 	.word	0x1006a2eb
 23ee4f8:	023fe7ae 	.word	0x023fe7ae
 23ee4fc:	1006a2e6 	.word	0x1006a2e6
 23ee500:	023fe7b5 	.word	0x023fe7b5
 23ee504:	1006a80a 	.word	0x1006a80a
 23ee508:	023fe7bc 	.word	0x023fe7bc
 23ee50c:	1006a81c 	.word	0x1006a81c
 23ee510:	023fe7c1 	.word	0x023fe7c1
 23ee514:	1006a2b8 	.word	0x1006a2b8
 23ee518:	023fe7c8 	.word	0x023fe7c8
 23ee51c:	1006a140 	.word	0x1006a140
 23ee520:	023fe7ce 	.word	0x023fe7ce
 23ee524:	1006a818 	.word	0x1006a818
 23ee528:	023fe7d7 	.word	0x023fe7d7
 23ee52c:	1006a81a 	.word	0x1006a81a
 23ee530:	023fe7dd 	.word	0x023fe7dd
 23ee534:	1006a819 	.word	0x1006a819
 23ee538:	023fe7e3 	.word	0x023fe7e3
 23ee53c:	1006a2e7 	.word	0x1006a2e7
 23ee540:	023fe7ea 	.word	0x023fe7ea
 23ee544:	1006a81e 	.word	0x1006a81e
 23ee548:	023fe7ef 	.word	0x023fe7ef
 23ee54c:	1006a81d 	.word	0x1006a81d
 23ee550:	023fe7f5 	.word	0x023fe7f5
 23ee554:	1006a304 	.word	0x1006a304
 23ee558:	023fe814 	.word	0x023fe814
 23ee55c:	1006a2bf 	.word	0x1006a2bf
 23ee560:	023fe81d 	.word	0x023fe81d
 23ee564:	023fe826 	.word	0x023fe826
 23ee568:	1006a2e9 	.word	0x1006a2e9
 23ee56c:	1006a1e4 	.word	0x1006a1e4
 23ee570:	1006a1ec 	.word	0x1006a1ec
 23ee574:	1006a1e8 	.word	0x1006a1e8
 23ee578:	023fe82e 	.word	0x023fe82e
 23ee57c:	023fe83a 	.word	0x023fe83a
 23ee580:	1007aa20 	.word	0x1007aa20
 23ee584:	023fe83f 	.word	0x023fe83f
    writer.name("oled").value(OLED32 ? "32" : "64");
 23ee588:	f7f8 fb84 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ee58c:	6821      	ldr	r1, [r4, #0]
 23ee58e:	4a55      	ldr	r2, [pc, #340]	; (23ee6e4 <_Z7INFO_Dov+0x84c>)
 23ee590:	4b55      	ldr	r3, [pc, #340]	; (23ee6e8 <_Z7INFO_Dov+0x850>)
 23ee592:	293c      	cmp	r1, #60	; 0x3c
 23ee594:	bf0c      	ite	eq
 23ee596:	4611      	moveq	r1, r2
 23ee598:	4619      	movne	r1, r3
  else {
    writer.name("oled").value("NF");
  }

  // Serial Console Enable
  GetPinName(SCE_PIN, Buffer32Bytes);
 23ee59a:	4d54      	ldr	r5, [pc, #336]	; (23ee6ec <_Z7INFO_Dov+0x854>)
    writer.name("oled").value("NF");
 23ee59c:	f7f8 fadc 	bl	23e6b58 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  GetPinName(SCE_PIN, Buffer32Bytes);
 23ee5a0:	4953      	ldr	r1, [pc, #332]	; (23ee6f0 <_Z7INFO_Dov+0x858>)
 23ee5a2:	8828      	ldrh	r0, [r5, #0]
 23ee5a4:	f7fc f9d6 	bl	23ea954 <_Z10GetPinNametPc>
  sprintf (buf, "scepin(%s)", Buffer32Bytes);
 23ee5a8:	4a51      	ldr	r2, [pc, #324]	; (23ee6f0 <_Z7INFO_Dov+0x858>)
 23ee5aa:	4952      	ldr	r1, [pc, #328]	; (23ee6f4 <_Z7INFO_Dov+0x85c>)
 23ee5ac:	a824      	add	r0, sp, #144	; 0x90
 23ee5ae:	f009 fdef 	bl	23f8190 <sprintf>
  writer.name(buf).value((digitalRead(SCE_PIN)) ? "DISABLED" : "ENABLED");
 23ee5b2:	a924      	add	r1, sp, #144	; 0x90
 23ee5b4:	a80b      	add	r0, sp, #44	; 0x2c
 23ee5b6:	f7f8 fb6d 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ee5ba:	4604      	mov	r4, r0
 23ee5bc:	8828      	ldrh	r0, [r5, #0]
 23ee5be:	f00b fe31 	bl	23fa224 <digitalRead>
 23ee5c2:	4a4d      	ldr	r2, [pc, #308]	; (23ee6f8 <_Z7INFO_Dov+0x860>)
 23ee5c4:	494d      	ldr	r1, [pc, #308]	; (23ee6fc <_Z7INFO_Dov+0x864>)
 23ee5c6:	2800      	cmp	r0, #0
 23ee5c8:	bf18      	it	ne
 23ee5ca:	4611      	movne	r1, r2
 23ee5cc:	4620      	mov	r0, r4
 23ee5ce:	f7f8 fac3 	bl	23e6b58 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  writer.name("sce").value((SerialConsoleEnabled) ? "TRUE" : "FALSE");
 23ee5d2:	494b      	ldr	r1, [pc, #300]	; (23ee700 <_Z7INFO_Dov+0x868>)
 23ee5d4:	a80b      	add	r0, sp, #44	; 0x2c
 23ee5d6:	f7f8 fb5d 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ee5da:	4b4a      	ldr	r3, [pc, #296]	; (23ee704 <_Z7INFO_Dov+0x86c>)
 23ee5dc:	4a4a      	ldr	r2, [pc, #296]	; (23ee708 <_Z7INFO_Dov+0x870>)
 23ee5de:	7819      	ldrb	r1, [r3, #0]
 23ee5e0:	4b4a      	ldr	r3, [pc, #296]	; (23ee70c <_Z7INFO_Dov+0x874>)
 23ee5e2:	2900      	cmp	r1, #0
 23ee5e4:	bf14      	ite	ne
 23ee5e6:	4611      	movne	r1, r2
 23ee5e8:	4619      	moveq	r1, r3
 23ee5ea:	f7f8 fab5 	bl	23e6b58 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  writer.endObject();
 23ee5ee:	a80b      	add	r0, sp, #44	; 0x2c
 23ee5f0:	f00a fd95 	bl	23f911e <_ZN5spark10JSONWriter9endObjectEv>

  // Done profiling system

  // Update INFO.TXT file
  if (SD_exists) {
 23ee5f4:	4b46      	ldr	r3, [pc, #280]	; (23ee710 <_Z7INFO_Dov+0x878>)
 23ee5f6:	781b      	ldrb	r3, [r3, #0]
 23ee5f8:	b1bb      	cbz	r3, 23ee62a <_Z7INFO_Dov+0x792>
    File fp = SD.open(SD_INFO_FILE, FILE_WRITE | O_TRUNC); 
 23ee5fa:	f244 6302 	movw	r3, #17922	; 0x4602
 23ee5fe:	4a45      	ldr	r2, [pc, #276]	; (23ee714 <_Z7INFO_Dov+0x87c>)
 23ee600:	4945      	ldr	r1, [pc, #276]	; (23ee718 <_Z7INFO_Dov+0x880>)
 23ee602:	a810      	add	r0, sp, #64	; 0x40
 23ee604:	f008 feda 	bl	23f73bc <_ZN8FsVolume4openEPKci>
 23ee608:	a814      	add	r0, sp, #80	; 0x50
 23ee60a:	f7f8 fbca 	bl	23e6da2 <_ZNK10FsBaseFile6isOpenEv>
 23ee60e:	4c43      	ldr	r4, [pc, #268]	; (23ee71c <_Z7INFO_Dov+0x884>)
    if (fp) {
 23ee610:	2800      	cmp	r0, #0
 23ee612:	d059      	beq.n	23ee6c8 <_Z7INFO_Dov+0x830>
      fp.println(msgbuf);
 23ee614:	4942      	ldr	r1, [pc, #264]	; (23ee720 <_Z7INFO_Dov+0x888>)
 23ee616:	a810      	add	r0, sp, #64	; 0x40
 23ee618:	f00b f860 	bl	23f96dc <_ZN5Print7printlnEPKc>
      fp.close();
 23ee61c:	a814      	add	r0, sp, #80	; 0x50
 23ee61e:	f008 fdf4 	bl	23f720a <_ZN10FsBaseFile5closeEv>
      SystemStatusBits &= ~SSB_SD;  // Turn Off Bit
 23ee622:	6823      	ldr	r3, [r4, #0]
 23ee624:	f023 0302 	bic.w	r3, r3, #2
 23ee628:	6023      	str	r3, [r4, #0]
      SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
      Output ("SD:Open(Info)ERR");
    }
  }

  if (Particle_Publish((char *) "INFO")) {
 23ee62a:	483e      	ldr	r0, [pc, #248]	; (23ee724 <_Z7INFO_Dov+0x88c>)
 23ee62c:	f7ff fb84 	bl	23edd38 <_Z16Particle_PublishPc>
 23ee630:	4604      	mov	r4, r0
 23ee632:	2800      	cmp	r0, #0
 23ee634:	d050      	beq.n	23ee6d8 <_Z7INFO_Dov+0x840>
    Serial_write (msgbuf);
 23ee636:	483a      	ldr	r0, [pc, #232]	; (23ee720 <_Z7INFO_Dov+0x888>)
 23ee638:	f7f8 fdaa 	bl	23e7190 <_Z12Serial_writePKc>
    sprintf (Buffer32Bytes, "INFO->PUB OK[%d]", strlen(msgbuf)+1);
 23ee63c:	4838      	ldr	r0, [pc, #224]	; (23ee720 <_Z7INFO_Dov+0x888>)
 23ee63e:	f7f7 fcdb 	bl	23e5ff8 <strlen>
 23ee642:	4939      	ldr	r1, [pc, #228]	; (23ee728 <_Z7INFO_Dov+0x890>)
 23ee644:	1c42      	adds	r2, r0, #1
 23ee646:	482a      	ldr	r0, [pc, #168]	; (23ee6f0 <_Z7INFO_Dov+0x858>)
 23ee648:	f009 fda2 	bl	23f8190 <sprintf>
    Output(Buffer32Bytes);
    return(true);
  }
  else {
    sprintf (Buffer32Bytes, "INFO->PUB ERR");
    Output(Buffer32Bytes);
 23ee64c:	4828      	ldr	r0, [pc, #160]	; (23ee6f0 <_Z7INFO_Dov+0x858>)
 23ee64e:	f7f8 fdc9 	bl	23e71e4 <_Z6OutputPKc>
    return(false);
  }
 23ee652:	4620      	mov	r0, r4
 23ee654:	b064      	add	sp, #400	; 0x190
 23ee656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      writer.name("n2s").value(-1);
 23ee65a:	a80b      	add	r0, sp, #44	; 0x2c
 23ee65c:	f7f8 fb1a 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ee660:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 23ee664:	f00a fd7e 	bl	23f9164 <_ZN5spark10JSONWriter5valueEi>
    virtual ~Print() {}
 23ee668:	e526      	b.n	23ee0b8 <_Z7INFO_Dov+0x220>
    writer.name("n2s").value("NF");
 23ee66a:	4930      	ldr	r1, [pc, #192]	; (23ee72c <_Z7INFO_Dov+0x894>)
 23ee66c:	a80b      	add	r0, sp, #44	; 0x2c
 23ee66e:	f7f8 fb11 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ee672:	492f      	ldr	r1, [pc, #188]	; (23ee730 <_Z7INFO_Dov+0x898>)
 23ee674:	f7f8 fa70 	bl	23e6b58 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
 23ee678:	e51e      	b.n	23ee0b8 <_Z7INFO_Dov+0x220>
      writer.name("a4").value("DIST 10M");
 23ee67a:	f7f8 fb0b 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ee67e:	492d      	ldr	r1, [pc, #180]	; (23ee734 <_Z7INFO_Dov+0x89c>)
 23ee680:	e52f      	b.n	23ee0e2 <_Z7INFO_Dov+0x24a>
  else if (A4_State == A4_STATE_RAIN){
 23ee682:	2b02      	cmp	r3, #2
    writer.name("a4").value("RG2");
 23ee684:	492c      	ldr	r1, [pc, #176]	; (23ee738 <_Z7INFO_Dov+0x8a0>)
 23ee686:	a80b      	add	r0, sp, #44	; 0x2c
  else if (A4_State == A4_STATE_RAIN){
 23ee688:	d103      	bne.n	23ee692 <_Z7INFO_Dov+0x7fa>
    writer.name("a4").value("RG2");
 23ee68a:	f7f8 fb03 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ee68e:	492b      	ldr	r1, [pc, #172]	; (23ee73c <_Z7INFO_Dov+0x8a4>)
 23ee690:	e527      	b.n	23ee0e2 <_Z7INFO_Dov+0x24a>
  else if (A4_State == A4_STATE_RAW){
 23ee692:	2b03      	cmp	r3, #3
 23ee694:	d103      	bne.n	23ee69e <_Z7INFO_Dov+0x806>
    writer.name("a4").value("RAW");
 23ee696:	f7f8 fafd 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ee69a:	4929      	ldr	r1, [pc, #164]	; (23ee740 <_Z7INFO_Dov+0x8a8>)
 23ee69c:	e521      	b.n	23ee0e2 <_Z7INFO_Dov+0x24a>
    writer.name("a4").value("NS"); // Not Set
 23ee69e:	f7f8 faf9 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ee6a2:	4928      	ldr	r1, [pc, #160]	; (23ee744 <_Z7INFO_Dov+0x8ac>)
 23ee6a4:	e51d      	b.n	23ee0e2 <_Z7INFO_Dov+0x24a>
    writer.name("a5").value("NS"); // Not Set
 23ee6a6:	f7f8 faf5 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ee6aa:	4926      	ldr	r1, [pc, #152]	; (23ee744 <_Z7INFO_Dov+0x8ac>)
 23ee6ac:	e525      	b.n	23ee0fa <_Z7INFO_Dov+0x262>
  const char *comma = "";
 23ee6ae:	4c26      	ldr	r4, [pc, #152]	; (23ee748 <_Z7INFO_Dov+0x8b0>)
 23ee6b0:	e539      	b.n	23ee126 <_Z7INFO_Dov+0x28e>
      sprintf (buf+strlen(buf), "%sWBGT WO/GLOBE", comma);
 23ee6b2:	4926      	ldr	r1, [pc, #152]	; (23ee74c <_Z7INFO_Dov+0x8b4>)
 23ee6b4:	e6bd      	b.n	23ee432 <_Z7INFO_Dov+0x59a>
    sprintf (buf, "NF");
 23ee6b6:	491e      	ldr	r1, [pc, #120]	; (23ee730 <_Z7INFO_Dov+0x898>)
 23ee6b8:	a824      	add	r0, sp, #144	; 0x90
 23ee6ba:	f00e fc1d 	bl	23fcef8 <strcpy>
 23ee6be:	e6ed      	b.n	23ee49c <_Z7INFO_Dov+0x604>
    writer.name("oled").value("NF");
 23ee6c0:	f7f8 fae8 	bl	23e6c94 <_ZN5spark10JSONWriter4nameEPKc>
 23ee6c4:	491a      	ldr	r1, [pc, #104]	; (23ee730 <_Z7INFO_Dov+0x898>)
 23ee6c6:	e768      	b.n	23ee59a <_Z7INFO_Dov+0x702>
      SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23ee6c8:	6823      	ldr	r3, [r4, #0]
      Output ("SD:Open(Info)ERR");
 23ee6ca:	4821      	ldr	r0, [pc, #132]	; (23ee750 <_Z7INFO_Dov+0x8b8>)
      SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23ee6cc:	f043 0302 	orr.w	r3, r3, #2
 23ee6d0:	6023      	str	r3, [r4, #0]
      Output ("SD:Open(Info)ERR");
 23ee6d2:	f7f8 fd87 	bl	23e71e4 <_Z6OutputPKc>
 23ee6d6:	e7a8      	b.n	23ee62a <_Z7INFO_Dov+0x792>
    sprintf (Buffer32Bytes, "INFO->PUB ERR");
 23ee6d8:	491e      	ldr	r1, [pc, #120]	; (23ee754 <_Z7INFO_Dov+0x8bc>)
 23ee6da:	4805      	ldr	r0, [pc, #20]	; (23ee6f0 <_Z7INFO_Dov+0x858>)
 23ee6dc:	f00e fc0c 	bl	23fcef8 <strcpy>
 23ee6e0:	e7b4      	b.n	23ee64c <_Z7INFO_Dov+0x7b4>
 23ee6e2:	bf00      	nop
 23ee6e4:	023fe6ba 	.word	0x023fe6ba
 23ee6e8:	023fe6bd 	.word	0x023fe6bd
 23ee6ec:	1006a148 	.word	0x1006a148
 23ee6f0:	1006a2bf 	.word	0x1006a2bf
 23ee6f4:	023fe844 	.word	0x023fe844
 23ee6f8:	023fe6c0 	.word	0x023fe6c0
 23ee6fc:	023fe6c9 	.word	0x023fe6c9
 23ee700:	023fe84f 	.word	0x023fe84f
 23ee704:	1006a80b 	.word	0x1006a80b
 23ee708:	023fe6d1 	.word	0x023fe6d1
 23ee70c:	023fe6d6 	.word	0x023fe6d6
 23ee710:	1006a7b4 	.word	0x1006a7b4
 23ee714:	1006a181 	.word	0x1006a181
 23ee718:	1006a308 	.word	0x1006a308
 23ee71c:	1006a1cc 	.word	0x1006a1cc
 23ee720:	1006f140 	.word	0x1006f140
 23ee724:	023fdcfc 	.word	0x023fdcfc
 23ee728:	023fe864 	.word	0x023fe864
 23ee72c:	023fe72f 	.word	0x023fe72f
 23ee730:	023fd753 	.word	0x023fd753
 23ee734:	023fe73e 	.word	0x023fe73e
 23ee738:	023fe733 	.word	0x023fe733
 23ee73c:	023fe747 	.word	0x023fe747
 23ee740:	023fdedd 	.word	0x023fdedd
 23ee744:	023fe74b 	.word	0x023fe74b
 23ee748:	023fea19 	.word	0x023fea19
 23ee74c:	023fe804 	.word	0x023fe804
 23ee750:	023fe853 	.word	0x023fe853
 23ee754:	023fe875 	.word	0x023fe875

023ee758 <_Z14SD_N2S_Publishv>:
void SD_N2S_Publish() {
 23ee758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ee75c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ee760:	2400      	movs	r4, #0
 23ee762:	b0a8      	sub	sp, #160	; 0xa0
 23ee764:	e9cd 4301 	strd	r4, r3, [sp, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23ee768:	4b7b      	ldr	r3, [pc, #492]	; (23ee958 <_Z14SD_N2S_Publishv+0x200>)
  FsBaseFile() = default;  // cppcheck-suppress uninitMemberVar
 23ee76a:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23ee76e:	9300      	str	r3, [sp, #0]
  if (SD_exists && SD.exists(SD_n2s_file)) {
 23ee770:	4b7a      	ldr	r3, [pc, #488]	; (23ee95c <_Z14SD_N2S_Publishv+0x204>)
 23ee772:	781b      	ldrb	r3, [r3, #0]
 23ee774:	b363      	cbz	r3, 23ee7d0 <_Z14SD_N2S_Publishv+0x78>
 23ee776:	497a      	ldr	r1, [pc, #488]	; (23ee960 <_Z14SD_N2S_Publishv+0x208>)
 23ee778:	487a      	ldr	r0, [pc, #488]	; (23ee964 <_Z14SD_N2S_Publishv+0x20c>)
 23ee77a:	f7f8 fa99 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23ee77e:	b338      	cbz	r0, 23ee7d0 <_Z14SD_N2S_Publishv+0x78>
    Output ("N2S:Publish");
 23ee780:	4879      	ldr	r0, [pc, #484]	; (23ee968 <_Z14SD_N2S_Publishv+0x210>)
 23ee782:	f7f8 fd2f 	bl	23e71e4 <_Z6OutputPKc>
    fp = SD.open(SD_n2s_file, FILE_READ); // Open the file for reading, starting at the beginning of the file.
 23ee786:	4623      	mov	r3, r4
 23ee788:	4a75      	ldr	r2, [pc, #468]	; (23ee960 <_Z14SD_N2S_Publishv+0x208>)
 23ee78a:	4976      	ldr	r1, [pc, #472]	; (23ee964 <_Z14SD_N2S_Publishv+0x20c>)
 23ee78c:	a814      	add	r0, sp, #80	; 0x50
 23ee78e:	f008 fe15 	bl	23f73bc <_ZN8FsVolume4openEPKci>
class Print
 23ee792:	9b15      	ldr	r3, [sp, #84]	; 0x54
    move(&from);
 23ee794:	a804      	add	r0, sp, #16
 23ee796:	9301      	str	r3, [sp, #4]
class Stream : public Print
 23ee798:	9b16      	ldr	r3, [sp, #88]	; 0x58
 23ee79a:	a918      	add	r1, sp, #96	; 0x60
 23ee79c:	9302      	str	r3, [sp, #8]
 23ee79e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23ee7a0:	9303      	str	r3, [sp, #12]
 23ee7a2:	f008 fd28 	bl	23f71f6 <_ZN10FsBaseFile4moveEPS_>
  operator bool() const { return isOpen(); }
 23ee7a6:	a804      	add	r0, sp, #16
 23ee7a8:	f7f8 fafb 	bl	23e6da2 <_ZNK10FsBaseFile6isOpenEv>
    if (fp) {
 23ee7ac:	2800      	cmp	r0, #0
 23ee7ae:	f000 80cf 	beq.w	23ee950 <_Z14SD_N2S_Publishv+0x1f8>
 23ee7b2:	a804      	add	r0, sp, #16
 23ee7b4:	f7f8 fae9 	bl	23e6d8a <_ZNK10FsBaseFile8fileSizeEv>
      if (fp.size()<=20) {
 23ee7b8:	2815      	cmp	r0, #21
 23ee7ba:	f171 0300 	sbcs.w	r3, r1, #0
 23ee7be:	d20a      	bcs.n	23ee7d6 <_Z14SD_N2S_Publishv+0x7e>
        fp.close();
 23ee7c0:	a804      	add	r0, sp, #16
 23ee7c2:	f008 fd22 	bl	23f720a <_ZN10FsBaseFile5closeEv>
        Output ("N2S:Empty");
 23ee7c6:	4869      	ldr	r0, [pc, #420]	; (23ee96c <_Z14SD_N2S_Publishv+0x214>)
 23ee7c8:	f7f8 fd0c 	bl	23e71e4 <_Z6OutputPKc>
            SD_N2S_Delete(); // Bad data in the file so delete the file           
 23ee7cc:	f7fb fc16 	bl	23e9ffc <_Z13SD_N2S_Deletev>
}
 23ee7d0:	b028      	add	sp, #160	; 0xa0
 23ee7d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (eeprom.n2sfp) {
 23ee7d6:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 23ee990 <_Z14SD_N2S_Publishv+0x238>
 23ee7da:	f8d8 2014 	ldr.w	r2, [r8, #20]
 23ee7de:	b12a      	cbz	r2, 23ee7ec <_Z14SD_N2S_Publishv+0x94>
          if (fp.size()<=eeprom.n2sfp) {
 23ee7e0:	4282      	cmp	r2, r0
 23ee7e2:	eb74 0301 	sbcs.w	r3, r4, r1
 23ee7e6:	d310      	bcc.n	23ee80a <_Z14SD_N2S_Publishv+0xb2>
            eeprom.n2sfp = 0; 
 23ee7e8:	f8c8 4014 	str.w	r4, [r8, #20]
 23ee7ec:	2400      	movs	r4, #0
 23ee7ee:	4625      	mov	r5, r4
 23ee7f0:	4f5f      	ldr	r7, [pc, #380]	; (23ee970 <_Z14SD_N2S_Publishv+0x218>)
            if ( (System.millis() - lastOBS) > OBSERVATION_INTERVAL) {
 23ee7f2:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 23ee994 <_Z14SD_N2S_Publishv+0x23c>
              Output ("N2S:OBS Needed");
 23ee7f6:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 23ee998 <_Z14SD_N2S_Publishv+0x240>
  int available() override { return BaseFile::available(); }
 23ee7fa:	a804      	add	r0, sp, #16
 23ee7fc:	f7f8 fa98 	bl	23e6d30 <_ZNK10FsBaseFile9availableEv>
        while (fp.available() && (i < MAX_MSGBUF_SIZE )) {
 23ee800:	b980      	cbnz	r0, 23ee824 <_Z14SD_N2S_Publishv+0xcc>
            fp.close();
 23ee802:	a804      	add	r0, sp, #16
 23ee804:	f008 fd01 	bl	23f720a <_ZN10FsBaseFile5closeEv>
 23ee808:	e7e0      	b.n	23ee7cc <_Z14SD_N2S_Publishv+0x74>
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet((uint32_t)pos)
 23ee80a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23ee80c:	b123      	cbz	r3, 23ee818 <_Z14SD_N2S_Publishv+0xc0>
 23ee80e:	4611      	mov	r1, r2
 23ee810:	4618      	mov	r0, r3
 23ee812:	f005 fd7a 	bl	23f430a <_ZN7FatFile7seekSetEm>
 23ee816:	e7e9      	b.n	23ee7ec <_Z14SD_N2S_Publishv+0x94>
           : m_xFile ? m_xFile->seekSet(pos)
 23ee818:	9813      	ldr	r0, [sp, #76]	; 0x4c
 23ee81a:	2800      	cmp	r0, #0
 23ee81c:	d0e6      	beq.n	23ee7ec <_Z14SD_N2S_Publishv+0x94>
 23ee81e:	f007 fadc 	bl	23f5dda <_ZN9ExFatFile7seekSetEy>
 23ee822:	e7e3      	b.n	23ee7ec <_Z14SD_N2S_Publishv+0x94>
        while (fp.available() && (i < MAX_MSGBUF_SIZE )) {
 23ee824:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 23ee828:	da66      	bge.n	23ee8f8 <_Z14SD_N2S_Publishv+0x1a0>
  int read() override { return BaseFile::read(); }
 23ee82a:	a804      	add	r0, sp, #16
 23ee82c:	f7f8 fac2 	bl	23e6db4 <_ZN10FsBaseFile4readEv>
          ch = fp.read();
 23ee830:	b2c3      	uxtb	r3, r0
          if (ch == 0x0A) {  // newline
 23ee832:	2b0a      	cmp	r3, #10
 23ee834:	d173      	bne.n	23ee91e <_Z14SD_N2S_Publishv+0x1c6>
            if (Particle_Publish(EventType)) {
 23ee836:	4630      	mov	r0, r6
 23ee838:	f7ff fa7e 	bl	23edd38 <_Z16Particle_PublishPc>
 23ee83c:	b348      	cbz	r0, 23ee892 <_Z14SD_N2S_Publishv+0x13a>
              sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
 23ee83e:	4633      	mov	r3, r6
 23ee840:	4622      	mov	r2, r4
 23ee842:	494c      	ldr	r1, [pc, #304]	; (23ee974 <_Z14SD_N2S_Publishv+0x21c>)
 23ee844:	484c      	ldr	r0, [pc, #304]	; (23ee978 <_Z14SD_N2S_Publishv+0x220>)
 23ee846:	f009 fca3 	bl	23f8190 <sprintf>
              Output (Buffer32Bytes);
 23ee84a:	484b      	ldr	r0, [pc, #300]	; (23ee978 <_Z14SD_N2S_Publishv+0x220>)
 23ee84c:	f7f8 fcca 	bl	23e71e4 <_Z6OutputPKc>
              Serial_write (msgbuf);
 23ee850:	4638      	mov	r0, r7
              sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
 23ee852:	1c65      	adds	r5, r4, #1
              Serial_write (msgbuf);
 23ee854:	f7f8 fc9c 	bl	23e7190 <_Z12Serial_writePKc>
    return m_fFile   ? m_fFile->curPosition()
 23ee858:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23ee85a:	2b00      	cmp	r3, #0
 23ee85c:	d03e      	beq.n	23ee8dc <_Z14SD_N2S_Publishv+0x184>
 23ee85e:	695b      	ldr	r3, [r3, #20]
                eeprom.n2sfp = fp.position();
 23ee860:	f8c8 3014 	str.w	r3, [r8, #20]
            if ( (System.millis() - lastOBS) > OBSERVATION_INTERVAL) {
 23ee864:	f7f8 f9c2 	bl	23e6bec <_ZN11SystemClass6millisEv>
 23ee868:	e9d9 2300 	ldrd	r2, r3, [r9]
 23ee86c:	1a80      	subs	r0, r0, r2
 23ee86e:	eb61 0103 	sbc.w	r1, r1, r3
 23ee872:	f64e 2361 	movw	r3, #60001	; 0xea61
 23ee876:	4298      	cmp	r0, r3
 23ee878:	f171 0300 	sbcs.w	r3, r1, #0
                sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
 23ee87c:	462c      	mov	r4, r5
            if ( (System.millis() - lastOBS) > OBSERVATION_INTERVAL) {
 23ee87e:	d34b      	bcc.n	23ee918 <_Z14SD_N2S_Publishv+0x1c0>
              Output ("N2S:OBS Needed");
 23ee880:	4650      	mov	r0, sl
 23ee882:	f7f8 fcaf 	bl	23e71e4 <_Z6OutputPKc>
              if (OBS_Full()) {
 23ee886:	f7fc f83f 	bl	23ea908 <_Z8OBS_Fullv>
 23ee88a:	2800      	cmp	r0, #0
 23ee88c:	d040      	beq.n	23ee910 <_Z14SD_N2S_Publishv+0x1b8>
                Output ("N2S:OBS FULL");
 23ee88e:	483b      	ldr	r0, [pc, #236]	; (23ee97c <_Z14SD_N2S_Publishv+0x224>)
 23ee890:	e030      	b.n	23ee8f4 <_Z14SD_N2S_Publishv+0x19c>
              sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:RETRY", sent, EventType);
 23ee892:	4633      	mov	r3, r6
 23ee894:	4622      	mov	r2, r4
 23ee896:	493a      	ldr	r1, [pc, #232]	; (23ee980 <_Z14SD_N2S_Publishv+0x228>)
 23ee898:	4837      	ldr	r0, [pc, #220]	; (23ee978 <_Z14SD_N2S_Publishv+0x220>)
 23ee89a:	f009 fc79 	bl	23f8190 <sprintf>
              Output (Buffer32Bytes);
 23ee89e:	4836      	ldr	r0, [pc, #216]	; (23ee978 <_Z14SD_N2S_Publishv+0x220>)
 23ee8a0:	f7f8 fca0 	bl	23e71e4 <_Z6OutputPKc>
              Serial_write (msgbuf);
 23ee8a4:	4638      	mov	r0, r7
 23ee8a6:	f7f8 fc73 	bl	23e7190 <_Z12Serial_writePKc>
                BackGroundWork(); 
 23ee8aa:	f7ff fa05 	bl	23edcb8 <_Z14BackGroundWorkv>
 23ee8ae:	f7ff fa03 	bl	23edcb8 <_Z14BackGroundWorkv>
 23ee8b2:	f7ff fa01 	bl	23edcb8 <_Z14BackGroundWorkv>
 23ee8b6:	f7ff f9ff 	bl	23edcb8 <_Z14BackGroundWorkv>
 23ee8ba:	f7ff f9fd 	bl	23edcb8 <_Z14BackGroundWorkv>
              if (Particle_Publish(EventType)) {
 23ee8be:	4630      	mov	r0, r6
 23ee8c0:	f7ff fa3a 	bl	23edd38 <_Z16Particle_PublishPc>
 23ee8c4:	b178      	cbz	r0, 23ee8e6 <_Z14SD_N2S_Publishv+0x18e>
                sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
 23ee8c6:	4633      	mov	r3, r6
 23ee8c8:	4622      	mov	r2, r4
 23ee8ca:	492a      	ldr	r1, [pc, #168]	; (23ee974 <_Z14SD_N2S_Publishv+0x21c>)
 23ee8cc:	482a      	ldr	r0, [pc, #168]	; (23ee978 <_Z14SD_N2S_Publishv+0x220>)
 23ee8ce:	f009 fc5f 	bl	23f8190 <sprintf>
                Output (Buffer32Bytes);
 23ee8d2:	4829      	ldr	r0, [pc, #164]	; (23ee978 <_Z14SD_N2S_Publishv+0x220>)
                sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
 23ee8d4:	1c65      	adds	r5, r4, #1
                Output (Buffer32Bytes);
 23ee8d6:	f7f8 fc85 	bl	23e71e4 <_Z6OutputPKc>
 23ee8da:	e7bd      	b.n	23ee858 <_Z14SD_N2S_Publishv+0x100>
 23ee8dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
           : m_xFile ? m_xFile->curPosition()
 23ee8de:	2b00      	cmp	r3, #0
 23ee8e0:	d0be      	beq.n	23ee860 <_Z14SD_N2S_Publishv+0x108>
  uint64_t curPosition() const { return m_curPosition; }
 23ee8e2:	681b      	ldr	r3, [r3, #0]
 23ee8e4:	e7bc      	b.n	23ee860 <_Z14SD_N2S_Publishv+0x108>
                sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:ERR", sent, EventType);
 23ee8e6:	4633      	mov	r3, r6
 23ee8e8:	4622      	mov	r2, r4
 23ee8ea:	4926      	ldr	r1, [pc, #152]	; (23ee984 <_Z14SD_N2S_Publishv+0x22c>)
 23ee8ec:	4822      	ldr	r0, [pc, #136]	; (23ee978 <_Z14SD_N2S_Publishv+0x220>)
 23ee8ee:	f009 fc4f 	bl	23f8190 <sprintf>
                Output (Buffer32Bytes);
 23ee8f2:	4821      	ldr	r0, [pc, #132]	; (23ee978 <_Z14SD_N2S_Publishv+0x220>)
                Output ("N2S:OBS FULL");
 23ee8f4:	f7f8 fc76 	bl	23e71e4 <_Z6OutputPKc>
  int available() override { return BaseFile::available(); }
 23ee8f8:	a804      	add	r0, sp, #16
 23ee8fa:	f7f8 fa19 	bl	23e6d30 <_ZNK10FsBaseFile9availableEv>
        if (fp.available() <= 20) {
 23ee8fe:	2814      	cmp	r0, #20
 23ee900:	f77f af7f 	ble.w	23ee802 <_Z14SD_N2S_Publishv+0xaa>
          fp.close();
 23ee904:	a804      	add	r0, sp, #16
 23ee906:	f008 fc80 	bl	23f720a <_ZN10FsBaseFile5closeEv>
          EEPROM_Update(); // Update file postion in the eeprom.
 23ee90a:	f7fb f995 	bl	23e9c38 <_Z13EEPROM_Updatev>
 23ee90e:	e75f      	b.n	23ee7d0 <_Z14SD_N2S_Publishv+0x78>
                I2C_Check_Sensors(); // Make sure Sensors are online
 23ee910:	f7fa fda0 	bl	23e9454 <_Z17I2C_Check_Sensorsv>
                OBS_Do();                  
 23ee914:	f7fc ff3c 	bl	23eb790 <_Z6OBS_Dov>
 23ee918:	2000      	movs	r0, #0
 23ee91a:	4605      	mov	r5, r0
 23ee91c:	e76d      	b.n	23ee7fa <_Z14SD_N2S_Publishv+0xa2>
          else if (ch == 0x0D) { // CR, LF follows and will trigger the line to be processed       
 23ee91e:	2b0d      	cmp	r3, #13
 23ee920:	d108      	bne.n	23ee934 <_Z14SD_N2S_Publishv+0x1dc>
            msgbuf[i] = 0; // null terminate then wait for newline to be read to process OBS
 23ee922:	2300      	movs	r3, #0
            msgbuf[i-3] = 0; // Set the comma to Null so we don't transmit to Particle what follows
 23ee924:	197a      	adds	r2, r7, r5
            EventType = &msgbuf[i-2];      
 23ee926:	1eae      	subs	r6, r5, #2
            msgbuf[i] = 0; // null terminate then wait for newline to be read to process OBS
 23ee928:	557b      	strb	r3, [r7, r5]
            msgbuf[i-3] = 0; // Set the comma to Null so we don't transmit to Particle what follows
 23ee92a:	4628      	mov	r0, r5
 23ee92c:	f802 3c03 	strb.w	r3, [r2, #-3]
            EventType = &msgbuf[i-2];      
 23ee930:	443e      	add	r6, r7
 23ee932:	e7f2      	b.n	23ee91a <_Z14SD_N2S_Publishv+0x1c2>
            msgbuf[i++] = ch;
 23ee934:	1c68      	adds	r0, r5, #1
          if (i >= MAX_MSGBUF_SIZE) {
 23ee936:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
            msgbuf[i++] = ch;
 23ee93a:	557b      	strb	r3, [r7, r5]
          if (i >= MAX_MSGBUF_SIZE) {
 23ee93c:	d1ed      	bne.n	23ee91a <_Z14SD_N2S_Publishv+0x1c2>
            sprintf (Buffer32Bytes, "N2S[%d]->BOR:ERR", sent);
 23ee93e:	4622      	mov	r2, r4
 23ee940:	4911      	ldr	r1, [pc, #68]	; (23ee988 <_Z14SD_N2S_Publishv+0x230>)
 23ee942:	480d      	ldr	r0, [pc, #52]	; (23ee978 <_Z14SD_N2S_Publishv+0x220>)
 23ee944:	f009 fc24 	bl	23f8190 <sprintf>
            Output (Buffer32Bytes);
 23ee948:	480b      	ldr	r0, [pc, #44]	; (23ee978 <_Z14SD_N2S_Publishv+0x220>)
 23ee94a:	f7f8 fc4b 	bl	23e71e4 <_Z6OutputPKc>
 23ee94e:	e758      	b.n	23ee802 <_Z14SD_N2S_Publishv+0xaa>
        Output ("N2S->OPEN:ERR");
 23ee950:	480e      	ldr	r0, [pc, #56]	; (23ee98c <_Z14SD_N2S_Publishv+0x234>)
 23ee952:	f7f8 fc47 	bl	23e71e4 <_Z6OutputPKc>
    virtual ~Print() {}
 23ee956:	e73b      	b.n	23ee7d0 <_Z14SD_N2S_Publishv+0x78>
 23ee958:	023fea48 	.word	0x023fea48
 23ee95c:	1006a7b4 	.word	0x1006a7b4
 23ee960:	1006a19f 	.word	0x1006a19f
 23ee964:	1006a308 	.word	0x1006a308
 23ee968:	023fe883 	.word	0x023fe883
 23ee96c:	023fe88f 	.word	0x023fe88f
 23ee970:	1006f140 	.word	0x1006f140
 23ee974:	023fe899 	.word	0x023fe899
 23ee978:	1006a2bf 	.word	0x1006a2bf
 23ee97c:	023fe8e2 	.word	0x023fe8e2
 23ee980:	023fe8ab 	.word	0x023fe8ab
 23ee984:	023fe8c0 	.word	0x023fe8c0
 23ee988:	023fe8ef 	.word	0x023fe8ef
 23ee98c:	023fe900 	.word	0x023fe900
 23ee990:	1006ae74 	.word	0x1006ae74
 23ee994:	1006aec8 	.word	0x1006aec8
 23ee998:	023fe8d3 	.word	0x023fe8d3

023ee99c <_Z14OBS_PublishAllv>:
 * 
 * If sending an observation takes 2 or more seconds ws_refresh is set and 
 *   the main program loop calls Wind_Distance_Air_Initialize() 
 * ======================================================================================================================
 */
void OBS_PublishAll() {
 23ee99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ee9a0:	b088      	sub	sp, #32
  bool OK2Send=true;
  int relay_type;

  // Update Cell Signal Strength On Last (Most Current) OBS Since Cell is turned to get reading
  int last = OBS_Last();
 23ee9a2:	f7fb ff9f 	bl	23ea8e4 <_Z8OBS_Lastv>
  if (last >= 0) {
 23ee9a6:	1e04      	subs	r4, r0, #0
 23ee9a8:	4f30      	ldr	r7, [pc, #192]	; (23eea6c <_Z14OBS_PublishAllv+0xd0>)
 23ee9aa:	db0c      	blt.n	23ee9c6 <_Z14OBS_PublishAllv+0x2a>
#if PLATFORM_ID == PLATFORM_ARGON
    WiFiSignal sig = WiFi.RSSI();
#else
    CellularSignal sig = Cellular.RSSI();
 23ee9ac:	4668      	mov	r0, sp
 23ee9ae:	4930      	ldr	r1, [pc, #192]	; (23eea70 <_Z14OBS_PublishAllv+0xd4>)
 23ee9b0:	f009 fd04 	bl	23f83bc <_ZN5spark13CellularClass4RSSIEv>
#endif
    obs[last].css = sig.getStrength();
 23ee9b4:	4668      	mov	r0, sp
 23ee9b6:	f009 fd5f 	bl	23f8478 <_ZNK14CellularSignal11getStrengthEv>
 23ee9ba:	f640 2098 	movw	r0, #2712	; 0xa98
 23ee9be:	fb00 7004 	mla	r0, r0, r4, r7
 23ee9c2:	ed80 0a04 	vstr	s0, [r0, #16]
void OBS_PublishAll() {
 23ee9c6:	2500      	movs	r5, #0
 23ee9c8:	2401      	movs	r4, #1
  }

  // Go through the saved 1 minute observers and send them
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
    if (obs[i].inuse) {
 23ee9ca:	f640 2898 	movw	r8, #2712	; 0xa98
 23ee9ce:	fb08 f305 	mul.w	r3, r8, r5
 23ee9d2:	5cfb      	ldrb	r3, [r7, r3]
 23ee9d4:	b15b      	cbz	r3, 23ee9ee <_Z14OBS_PublishAllv+0x52>
      if (OBS_FS_Publish(i) == false) {
 23ee9d6:	4628      	mov	r0, r5
 23ee9d8:	f7ff fa02 	bl	23edde0 <_Z14OBS_FS_Publishi>
 23ee9dc:	4606      	mov	r6, r0
 23ee9de:	b918      	cbnz	r0, 23ee9e8 <_Z14OBS_PublishAllv+0x4c>
        OBS_N2S_Add (i);
 23ee9e0:	4628      	mov	r0, r5
 23ee9e2:	f7fb fd87 	bl	23ea4f4 <_Z11OBS_N2S_Addi>
        // Don't try to send any N2S because we just added to the file
        OK2Send = false;
 23ee9e6:	4634      	mov	r4, r6
      }
      OBS_Clear(i);
 23ee9e8:	4628      	mov	r0, r5
 23ee9ea:	f7fb fd71 	bl	23ea4d0 <_Z9OBS_Cleari>
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
 23ee9ee:	3501      	adds	r5, #1
 23ee9f0:	2d11      	cmp	r5, #17
 23ee9f2:	d1ec      	bne.n	23ee9ce <_Z14OBS_PublishAllv+0x32>
    }
  }

  // Publish LoRa Relay Observations   
  if (LORA_exists) {
 23ee9f4:	4b1f      	ldr	r3, [pc, #124]	; (23eea74 <_Z14OBS_PublishAllv+0xd8>)
 23ee9f6:	781b      	ldrb	r3, [r3, #0]
 23ee9f8:	b373      	cbz	r3, 23eea58 <_Z14OBS_PublishAllv+0xbc>
      else {
        if (OK2Send && (relay_type>0)) {
         OK2Send = OBS_Relay_Publish(relay_type);  // Note a new LoRa RS msgs could be received as we are sending    
        }
        if (!OK2Send) {
          sprintf (msgbuf+strlen(msgbuf), ",%s", relay_msgtypes[relay_type]);  // Add Particle Event Type after JSON structure
 23ee9fa:	4e1f      	ldr	r6, [pc, #124]	; (23eea78 <_Z14OBS_PublishAllv+0xdc>)
 23ee9fc:	4f1f      	ldr	r7, [pc, #124]	; (23eea7c <_Z14OBS_PublishAllv+0xe0>)
 23ee9fe:	f8df 808c 	ldr.w	r8, [pc, #140]	; 23eea8c <_Z14OBS_PublishAllv+0xf0>
    while (lora_relay_need2log()) {
 23eea02:	f7f8 fddd 	bl	23e75c0 <_Z19lora_relay_need2logv>
 23eea06:	b338      	cbz	r0, 23eea58 <_Z14OBS_PublishAllv+0xbc>
      relay_type = OBS_Relay_Build_JSON(); // This removed msg from relay structure and places it in msgbuf
 23eea08:	f7fb fefa 	bl	23ea800 <_Z20OBS_Relay_Build_JSONv>
      if (relay_type<=0) {
 23eea0c:	1e05      	subs	r5, r0, #0
 23eea0e:	dc08      	bgt.n	23eea22 <_Z14OBS_PublishAllv+0x86>
        sprintf (Buffer32Bytes, "RELAY TYPE[%d] INVALID", relay_type);
 23eea10:	462a      	mov	r2, r5
 23eea12:	491b      	ldr	r1, [pc, #108]	; (23eea80 <_Z14OBS_PublishAllv+0xe4>)
 23eea14:	481b      	ldr	r0, [pc, #108]	; (23eea84 <_Z14OBS_PublishAllv+0xe8>)
 23eea16:	f009 fbbb 	bl	23f8190 <sprintf>
        Output(Buffer32Bytes);
 23eea1a:	481a      	ldr	r0, [pc, #104]	; (23eea84 <_Z14OBS_PublishAllv+0xe8>)
 23eea1c:	f7f8 fbe2 	bl	23e71e4 <_Z6OutputPKc>
 23eea20:	e7ef      	b.n	23eea02 <_Z14OBS_PublishAllv+0x66>
        if (OK2Send && (relay_type>0)) {
 23eea22:	b99c      	cbnz	r4, 23eea4c <_Z14OBS_PublishAllv+0xb0>
          sprintf (msgbuf+strlen(msgbuf), ",%s", relay_msgtypes[relay_type]);  // Add Particle Event Type after JSON structure
 23eea24:	4814      	ldr	r0, [pc, #80]	; (23eea78 <_Z14OBS_PublishAllv+0xdc>)
 23eea26:	f7f7 fae7 	bl	23e5ff8 <strlen>
 23eea2a:	4641      	mov	r1, r8
 23eea2c:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 23eea30:	4430      	add	r0, r6
 23eea32:	f009 fbad 	bl	23f8190 <sprintf>
          SD_NeedToSend_Add(msgbuf); // Save to N2F File
 23eea36:	4810      	ldr	r0, [pc, #64]	; (23eea78 <_Z14OBS_PublishAllv+0xdc>)
 23eea38:	f7fb fb20 	bl	23ea07c <_Z17SD_NeedToSend_AddPc>
          Output("RELAY->N2S");
 23eea3c:	4812      	ldr	r0, [pc, #72]	; (23eea88 <_Z14OBS_PublishAllv+0xec>)
 23eea3e:	f7f8 fbd1 	bl	23e71e4 <_Z6OutputPKc>
          Serial_write (msgbuf); 
 23eea42:	480d      	ldr	r0, [pc, #52]	; (23eea78 <_Z14OBS_PublishAllv+0xdc>)
 23eea44:	f7f8 fba4 	bl	23e7190 <_Z12Serial_writePKc>
 23eea48:	2400      	movs	r4, #0
 23eea4a:	e7da      	b.n	23eea02 <_Z14OBS_PublishAllv+0x66>
         OK2Send = OBS_Relay_Publish(relay_type);  // Note a new LoRa RS msgs could be received as we are sending    
 23eea4c:	f7ff f9f4 	bl	23ede38 <_Z17OBS_Relay_Publishi>
        if (!OK2Send) {
 23eea50:	4604      	mov	r4, r0
 23eea52:	2800      	cmp	r0, #0
 23eea54:	d1d5      	bne.n	23eea02 <_Z14OBS_PublishAllv+0x66>
 23eea56:	e7e5      	b.n	23eea24 <_Z14OBS_PublishAllv+0x88>
      }
    }
  }

  // Check if we have any N2S only if we have not added to the file while trying to send OBS
  if (OK2Send) {
 23eea58:	b124      	cbz	r4, 23eea64 <_Z14OBS_PublishAllv+0xc8>
    SD_N2S_Publish(); 
  }
}
 23eea5a:	b008      	add	sp, #32
 23eea5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    SD_N2S_Publish(); 
 23eea60:	f7ff be7a 	b.w	23ee758 <_Z14SD_N2S_Publishv>
}
 23eea64:	b008      	add	sp, #32
 23eea66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23eea6a:	bf00      	nop
 23eea6c:	1006f550 	.word	0x1006f550
 23eea70:	1007aeb8 	.word	0x1007aeb8
 23eea74:	1006a2e9 	.word	0x1006a2e9
 23eea78:	1006f140 	.word	0x1006f140
 23eea7c:	1006a200 	.word	0x1006a200
 23eea80:	023fe6a3 	.word	0x023fe6a3
 23eea84:	1006a2bf 	.word	0x1006a2bf
 23eea88:	023fe90e 	.word	0x023fe90e
 23eea8c:	023fdb50 	.word	0x023fdb50

023eea90 <loop>:
void loop() {
 23eea90:	b5f0      	push	{r4, r5, r6, r7, lr}
 23eea92:	b085      	sub	sp, #20
    if (Time.isValid()) {  
 23eea94:	f00b f8fd 	bl	23f9c92 <_ZN9TimeClass7isValidEv>
 23eea98:	2800      	cmp	r0, #0
 23eea9a:	f000 80a8 	beq.w	23eebee <loop+0x15e>
      RTC_UpdateCheck();
 23eea9e:	f7f8 fccf 	bl	23e7440 <_Z15RTC_UpdateCheckv>
      if (!eeprom_valid) {
 23eeaa2:	4b73      	ldr	r3, [pc, #460]	; (23eec70 <loop+0x1e0>)
 23eeaa4:	781b      	ldrb	r3, [r3, #0]
 23eeaa6:	b90b      	cbnz	r3, 23eeaac <loop+0x1c>
        EEPROM_Initialize();
 23eeaa8:	f7fa ff26 	bl	23e98f8 <_Z17EEPROM_Initializev>
      if ( (System.millis() - lastOBS) > OBSERVATION_INTERVAL) {  // 1 minute
 23eeaac:	f7f8 f89e 	bl	23e6bec <_ZN11SystemClass6millisEv>
 23eeab0:	4a70      	ldr	r2, [pc, #448]	; (23eec74 <loop+0x1e4>)
 23eeab2:	e9d2 3200 	ldrd	r3, r2, [r2]
 23eeab6:	1ac0      	subs	r0, r0, r3
 23eeab8:	f64e 2361 	movw	r3, #60001	; 0xea61
 23eeabc:	eb61 0102 	sbc.w	r1, r1, r2
 23eeac0:	4298      	cmp	r0, r3
 23eeac2:	f171 0300 	sbcs.w	r3, r1, #0
 23eeac6:	d303      	bcc.n	23eead0 <loop+0x40>
        I2C_Check_Sensors(); // Make sure Sensors are online
 23eeac8:	f7fa fcc4 	bl	23e9454 <_Z17I2C_Check_Sensorsv>
        OBS_Do(); 
 23eeacc:	f7fc fe60 	bl	23eb790 <_Z6OBS_Dov>
      if (SendSystemInformation && Particle.connected()) {
 23eead0:	4b69      	ldr	r3, [pc, #420]	; (23eec78 <loop+0x1e8>)
 23eead2:	781b      	ldrb	r3, [r3, #0]
 23eead4:	b123      	cbz	r3, 23eeae0 <loop+0x50>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23eead6:	f009 f9fd 	bl	23f7ed4 <spark_cloud_flag_connected>
 23eeada:	b108      	cbz	r0, 23eeae0 <loop+0x50>
        INFO_Do(); // Function sets SendSystemInformation back to false.
 23eeadc:	f7ff f9dc 	bl	23ede98 <_Z7INFO_Dov>
      if ( (LastTransmitTime == 0) || ((System.millis() - LastTransmitTime) > (obs_tx_interval * 60 * 1000)) ) {
 23eeae0:	4c66      	ldr	r4, [pc, #408]	; (23eec7c <loop+0x1ec>)
 23eeae2:	e9d4 2300 	ldrd	r2, r3, [r4]
 23eeae6:	4313      	orrs	r3, r2
 23eeae8:	d136      	bne.n	23eeb58 <loop+0xc8>
 23eeaea:	f009 f9f3 	bl	23f7ed4 <spark_cloud_flag_connected>
        if (Particle.connected()) {
 23eeaee:	2800      	cmp	r0, #0
 23eeaf0:	d046      	beq.n	23eeb80 <loop+0xf0>
          Output ("Connected");
 23eeaf2:	4863      	ldr	r0, [pc, #396]	; (23eec80 <loop+0x1f0>)
 23eeaf4:	f7f8 fb76 	bl	23e71e4 <_Z6OutputPKc>
          LastTransmitTime = System.millis();
 23eeaf8:	f7f8 f878 	bl	23e6bec <_ZN11SystemClass6millisEv>
 23eeafc:	e9c4 0100 	strd	r0, r1, [r4]
          if ((System.millis() - LastTimeUpdate) > (4*3600*1000)) {
 23eeb00:	f7f8 f874 	bl	23e6bec <_ZN11SystemClass6millisEv>
 23eeb04:	2500      	movs	r5, #0
 23eeb06:	4c5f      	ldr	r4, [pc, #380]	; (23eec84 <loop+0x1f4>)
 23eeb08:	e9d4 3200 	ldrd	r3, r2, [r4]
 23eeb0c:	1ac0      	subs	r0, r0, r3
 23eeb0e:	4b5e      	ldr	r3, [pc, #376]	; (23eec88 <loop+0x1f8>)
 23eeb10:	eb61 0102 	sbc.w	r1, r1, r2
 23eeb14:	4283      	cmp	r3, r0
 23eeb16:	eb75 0301 	sbcs.w	r3, r5, r1
 23eeb1a:	d209      	bcs.n	23eeb30 <loop+0xa0>
 23eeb1c:	f009 f9da 	bl	23f7ed4 <spark_cloud_flag_connected>
        if (!connected()) {
 23eeb20:	b110      	cbz	r0, 23eeb28 <loop+0x98>
        return spark_sync_time(NULL);
 23eeb22:	4628      	mov	r0, r5
 23eeb24:	f009 fa00 	bl	23f7f28 <spark_sync_time>
            LastTimeUpdate = System.millis();
 23eeb28:	f7f8 f860 	bl	23e6bec <_ZN11SystemClass6millisEv>
 23eeb2c:	e9c4 0100 	strd	r0, r1, [r4]
          OBS_PublishAll();
 23eeb30:	f7ff ff34 	bl	23ee99c <_Z14OBS_PublishAllv>
          if (ws_refresh) {
 23eeb34:	4b55      	ldr	r3, [pc, #340]	; (23eec8c <loop+0x1fc>)
 23eeb36:	781b      	ldrb	r3, [r3, #0]
 23eeb38:	b123      	cbz	r3, 23eeb44 <loop+0xb4>
            Output ("WS Refresh Required");
 23eeb3a:	4855      	ldr	r0, [pc, #340]	; (23eec90 <loop+0x200>)
 23eeb3c:	f7f8 fb52 	bl	23e71e4 <_Z6OutputPKc>
            Wind_Distance_Air_Initialize();
 23eeb40:	f7ff f862 	bl	23edc08 <_Z28Wind_Distance_Air_Initializev>
          stc_timestamp();
 23eeb44:	f7f8 fbca 	bl	23e72dc <_Z13stc_timestampv>
          Output(timestamp);
 23eeb48:	4852      	ldr	r0, [pc, #328]	; (23eec94 <loop+0x204>)
 23eeb4a:	f7f8 fb4b 	bl	23e71e4 <_Z6OutputPKc>
          Output_CellBatteryInfo();
 23eeb4e:	f7fe fda9 	bl	23ed6a4 <_Z22Output_CellBatteryInfov>
          JPO_ClearBits();
 23eeb52:	f7f8 f9ab 	bl	23e6eac <_Z13JPO_ClearBitsv>
 23eeb56:	e013      	b.n	23eeb80 <loop+0xf0>
      if ( (LastTransmitTime == 0) || ((System.millis() - LastTransmitTime) > (obs_tx_interval * 60 * 1000)) ) {
 23eeb58:	f7f8 f848 	bl	23e6bec <_ZN11SystemClass6millisEv>
 23eeb5c:	e9d4 3200 	ldrd	r3, r2, [r4]
 23eeb60:	f64e 2560 	movw	r5, #60000	; 0xea60
 23eeb64:	4e4c      	ldr	r6, [pc, #304]	; (23eec98 <loop+0x208>)
 23eeb66:	1ac0      	subs	r0, r0, r3
 23eeb68:	6833      	ldr	r3, [r6, #0]
 23eeb6a:	eb61 0102 	sbc.w	r1, r1, r2
 23eeb6e:	fba3 3205 	umull	r3, r2, r3, r5
 23eeb72:	6877      	ldr	r7, [r6, #4]
 23eeb74:	4283      	cmp	r3, r0
 23eeb76:	fb05 2207 	mla	r2, r5, r7, r2
 23eeb7a:	eb72 0301 	sbcs.w	r3, r2, r1
 23eeb7e:	d3b4      	bcc.n	23eeaea <loop+0x5a>
      BackGroundWork();
 23eeb80:	f7ff f89a 	bl	23edcb8 <_Z14BackGroundWorkv>
    if ((cf_reboot_countdown_timer>0) && (--DailyRebootCountDownTimer<=0)) {
 23eeb84:	4e45      	ldr	r6, [pc, #276]	; (23eec9c <loop+0x20c>)
 23eeb86:	6833      	ldr	r3, [r6, #0]
 23eeb88:	2b00      	cmp	r3, #0
 23eeb8a:	dd6e      	ble.n	23eec6a <loop+0x1da>
 23eeb8c:	4d44      	ldr	r5, [pc, #272]	; (23eeca0 <loop+0x210>)
 23eeb8e:	682b      	ldr	r3, [r5, #0]
 23eeb90:	3b01      	subs	r3, #1
 23eeb92:	2b00      	cmp	r3, #0
 23eeb94:	602b      	str	r3, [r5, #0]
 23eeb96:	dc68      	bgt.n	23eec6a <loop+0x1da>
      Output ("Daily Reboot");
 23eeb98:	4842      	ldr	r0, [pc, #264]	; (23eeca4 <loop+0x214>)
 23eeb9a:	f7f8 fb23 	bl	23e71e4 <_Z6OutputPKc>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23eeb9e:	f009 f999 	bl	23f7ed4 <spark_cloud_flag_connected>
      if (Particle.connected()) {
 23eeba2:	b108      	cbz	r0, 23eeba8 <loop+0x118>
        OBS_PublishAll();
 23eeba4:	f7ff fefa 	bl	23ee99c <_Z14OBS_PublishAllv>
      EEPROM_SaveUnreportedRain();
 23eeba8:	f7fa ff96 	bl	23e9ad8 <_Z25EEPROM_SaveUnreportedRainv>
      delay(1000);
 23eebac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23eebb0:	f009 fb88 	bl	23f82c4 <delay>
        bool clearSession, bool reconnect) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession),
        reconnect_(reconnect) {
 23eebb4:	2300      	movs	r3, #0
      Particle.disconnect();
 23eebb6:	a801      	add	r0, sp, #4
 23eebb8:	e9cd 3301 	strd	r3, r3, [sp, #4]
        bool clearSession, bool reconnect) :
 23eebbc:	f8ad 300c 	strh.w	r3, [sp, #12]
        reconnect_(reconnect) {
 23eebc0:	f88d 300e 	strb.w	r3, [sp, #14]
 23eebc4:	f009 fe39 	bl	23f883a <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        const system_tick_t start = millis();
 23eebc8:	f7f8 f810 	bl	23e6bec <_ZN11SystemClass6millisEv>
 23eebcc:	4604      	mov	r4, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23eebce:	f7f8 f80d 	bl	23e6bec <_ZN11SystemClass6millisEv>
 23eebd2:	1b00      	subs	r0, r0, r4
 23eebd4:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23eebd8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 23eebdc:	f171 0300 	sbcs.w	r3, r1, #0
 23eebe0:	d212      	bcs.n	23eec08 <loop+0x178>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23eebe2:	f009 f977 	bl	23f7ed4 <spark_cloud_flag_connected>
 23eebe6:	b178      	cbz	r0, 23eec08 <loop+0x178>
            spark_process();
 23eebe8:	f009 f958 	bl	23f7e9c <spark_process>
        while (_while() && !_condition()) {
 23eebec:	e7ef      	b.n	23eebce <loop+0x13e>
      stc_timestamp();
 23eebee:	f7f8 fb75 	bl	23e72dc <_Z13stc_timestampv>
      Output(timestamp);
 23eebf2:	4828      	ldr	r0, [pc, #160]	; (23eec94 <loop+0x204>)
 23eebf4:	f7f8 faf6 	bl	23e71e4 <_Z6OutputPKc>
      Output("ERR: No Clock");
 23eebf8:	482b      	ldr	r0, [pc, #172]	; (23eeca8 <loop+0x218>)
 23eebfa:	f7f8 faf3 	bl	23e71e4 <_Z6OutputPKc>
      delay (DELAY_NO_RTC);
 23eebfe:	f64e 2060 	movw	r0, #60000	; 0xea60
 23eec02:	f009 fb5f 	bl	23f82c4 <delay>
 23eec06:	e7bd      	b.n	23eeb84 <loop+0xf4>
    virtual bool listening();
    virtual NetworkClass& prefer(bool prefer = true);
    virtual bool isPreferred();

    operator network_interface_t() const {
        return iface_;
 23eec08:	4c28      	ldr	r4, [pc, #160]	; (23eecac <loop+0x21c>)
 23eec0a:	f009 f963 	bl	23f7ed4 <spark_cloud_flag_connected>
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23eec0e:	2200      	movs	r2, #0
 23eec10:	2102      	movs	r1, #2
 23eec12:	6860      	ldr	r0, [r4, #4]
 23eec14:	f009 f9ea 	bl	23f7fec <network_disconnect>
      delay(1000);
 23eec18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23eec1c:	f009 fb52 	bl	23f82c4 <delay>
        network_off(*this, 0, 0, NULL);
 23eec20:	2300      	movs	r3, #0
 23eec22:	6860      	ldr	r0, [r4, #4]
 23eec24:	461a      	mov	r2, r3
 23eec26:	4619      	mov	r1, r3
 23eec28:	f009 fa0a 	bl	23f8040 <network_off>
      Output("Rebooting");  
 23eec2c:	4820      	ldr	r0, [pc, #128]	; (23eecb0 <loop+0x220>)
 23eec2e:	f7f8 fad9 	bl	23e71e4 <_Z6OutputPKc>
      delay(1000);
 23eec32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23eec36:	f009 fb45 	bl	23f82c4 <delay>
      DeviceReset();
 23eec3a:	f7fb fead 	bl	23ea998 <_Z11DeviceResetv>
      Output("I'm Alive! Why?");  
 23eec3e:	481d      	ldr	r0, [pc, #116]	; (23eecb4 <loop+0x224>)
 23eec40:	f7f8 fad0 	bl	23e71e4 <_Z6OutputPKc>
        network_on(*this, 0, 0, NULL);
 23eec44:	2300      	movs	r3, #0
 23eec46:	6860      	ldr	r0, [r4, #4]
 23eec48:	461a      	mov	r2, r3
 23eec4a:	4619      	mov	r1, r3
 23eec4c:	f009 f9ea 	bl	23f8024 <network_on>
      delay(1000);
 23eec50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23eec54:	f009 fb36 	bl	23f82c4 <delay>
        spark_cloud_flag_connect();
 23eec58:	f009 f92e 	bl	23f7eb8 <spark_cloud_flag_connect>
      DailyRebootCountDownTimer = cf_reboot_countdown_timer; // Reset count incase reboot fails
 23eec5c:	6833      	ldr	r3, [r6, #0]
 23eec5e:	602b      	str	r3, [r5, #0]
}
 23eec60:	b005      	add	sp, #20
 23eec62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      Wind_Distance_Air_Initialize();
 23eec66:	f7fe bfcf 	b.w	23edc08 <_Z28Wind_Distance_Air_Initializev>
}
 23eec6a:	b005      	add	sp, #20
 23eec6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23eec6e:	bf00      	nop
 23eec70:	1006ae94 	.word	0x1006ae94
 23eec74:	1006aec8 	.word	0x1006aec8
 23eec78:	1006a1c8 	.word	0x1006a1c8
 23eec7c:	1006a2f8 	.word	0x1006a2f8
 23eec80:	023fe919 	.word	0x023fe919
 23eec84:	1006a2f0 	.word	0x1006a2f0
 23eec88:	00dbba00 	.word	0x00dbba00
 23eec8c:	1007ae5c 	.word	0x1007ae5c
 23eec90:	023fe923 	.word	0x023fe923
 23eec94:	1007abe4 	.word	0x1007abe4
 23eec98:	1006a1f8 	.word	0x1006a1f8
 23eec9c:	1006a1f0 	.word	0x1006a1f0
 23eeca0:	1006a2e0 	.word	0x1006a2e0
 23eeca4:	023fe945 	.word	0x023fe945
 23eeca8:	023fe937 	.word	0x023fe937
 23eecac:	1007aeb8 	.word	0x1007aeb8
 23eecb0:	023fe952 	.word	0x023fe952
 23eecb4:	023fe95c 	.word	0x023fe95c

023eecb8 <setup>:
void setup() {
 23eecb8:	b530      	push	{r4, r5, lr}
        hal_power_config config = {};
 23eecba:	2420      	movs	r4, #32
 23eecbc:	b093      	sub	sp, #76	; 0x4c
 23eecbe:	4622      	mov	r2, r4
 23eecc0:	2100      	movs	r1, #0
 23eecc2:	a80a      	add	r0, sp, #40	; 0x28
 23eecc4:	f00e f8a3 	bl	23fce0e <memset>
        conf_.aux_pwr_ctrl_pin = PIN_INVALID;
        conf_.int_pin = PIN_INVALID;
    }

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
 23eecc8:	ad0a      	add	r5, sp, #40	; 0x28
        system_power_management_get_config(&config, nullptr);
 23eecca:	2100      	movs	r1, #0
        config.size = sizeof(config);
 23eeccc:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
        system_power_management_get_config(&config, nullptr);
 23eecd0:	a80a      	add	r0, sp, #40	; 0x28
 23eecd2:	ac02      	add	r4, sp, #8
 23eecd4:	f009 f8c6 	bl	23f7e64 <system_power_management_get_config>
 23eecd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23eecda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23eecdc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23eece0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint8_t socBitPrecision() const {
        return conf_.soc_bits;
    }

    SystemPowerConfiguration& auxiliaryPowerControlPin(uint8_t pin, bool activeLevel = 1) {
        conf_.aux_pwr_ctrl_pin = pin;
 23eece4:	2307      	movs	r3, #7
        conf_.aux_pwr_ctrl_pin_level = activeLevel;
 23eece6:	2401      	movs	r4, #1
        conf_.aux_pwr_ctrl_pin = pin;
 23eece8:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8_t auxiliaryPowerControlActiveLevel() const {
        return conf_.aux_pwr_ctrl_pin_level;
    }
    
    SystemPowerConfiguration& interruptPin(uint8_t pin) {
        conf_.int_pin = pin;
 23eecec:	231c      	movs	r3, #28
        return system_power_management_set_config(conf.config(), nullptr);
 23eecee:	2100      	movs	r1, #0
 23eecf0:	a802      	add	r0, sp, #8
 23eecf2:	f88d 3019 	strb.w	r3, [sp, #25]
        conf_.aux_pwr_ctrl_pin_level = activeLevel;
 23eecf6:	f88d 4018 	strb.w	r4, [sp, #24]
 23eecfa:	f009 f897 	bl	23f7e2c <system_power_management_set_config>
	pmic.enableBATFET();
 23eecfe:	4888      	ldr	r0, [pc, #544]	; (23eef20 <setup+0x268>)
 23eed00:	f00a fc98 	bl	23f9634 <_ZN4PMIC12enableBATFETEv>
  Time.setFormat(TIME_FORMAT_ISO8601_FULL);
 23eed04:	4b87      	ldr	r3, [pc, #540]	; (23eef24 <setup+0x26c>)
  pinMode (REBOOT_PIN, OUTPUT);
 23eed06:	4621      	mov	r1, r4
            return format(now(), format_spec);
        }

        void setFormat(const char* format)
        {
            this->format_spec = format;
 23eed08:	681a      	ldr	r2, [r3, #0]
 23eed0a:	4b87      	ldr	r3, [pc, #540]	; (23eef28 <setup+0x270>)
 23eed0c:	2013      	movs	r0, #19
 23eed0e:	601a      	str	r2, [r3, #0]
 23eed10:	f00b fa5e 	bl	23fa1d0 <pinMode>
  pinMode (HEARTBEAT_PIN, OUTPUT);
 23eed14:	4621      	mov	r1, r4
 23eed16:	2012      	movs	r0, #18
 23eed18:	f00b fa5a 	bl	23fa1d0 <pinMode>
  pinMode (LED_PIN, OUTPUT);
 23eed1c:	4b83      	ldr	r3, [pc, #524]	; (23eef2c <setup+0x274>)
 23eed1e:	4621      	mov	r1, r4
 23eed20:	8818      	ldrh	r0, [r3, #0]
 23eed22:	f00b fa55 	bl	23fa1d0 <pinMode>
  Output_Initialize();
 23eed26:	f7fc fcd5 	bl	23eb6d4 <_Z17Output_Initializev>
  delay(2000); // Prevents usb driver crash on startup, Arduino needed this so keeping for Particle
 23eed2a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23eed2e:	f009 fac9 	bl	23f82c4 <delay>
  Serial_write(COPYRIGHT);
 23eed32:	487f      	ldr	r0, [pc, #508]	; (23eef30 <setup+0x278>)
 23eed34:	f7f8 fa2c 	bl	23e7190 <_Z12Serial_writePKc>
  Output (VERSION_INFO);
 23eed38:	487e      	ldr	r0, [pc, #504]	; (23eef34 <setup+0x27c>)
 23eed3a:	f7f8 fa53 	bl	23e71e4 <_Z6OutputPKc>
  delay(4000);
 23eed3e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 23eed42:	f009 fabf 	bl	23f82c4 <delay>
  DailyRebootCountDownTimer = cf_reboot_countdown_timer;
 23eed46:	4b7c      	ldr	r3, [pc, #496]	; (23eef38 <setup+0x280>)
  if (SD_exists && SD.exists(SD_n2s_file)) {
 23eed48:	4d7c      	ldr	r5, [pc, #496]	; (23eef3c <setup+0x284>)
  DailyRebootCountDownTimer = cf_reboot_countdown_timer;
 23eed4a:	681a      	ldr	r2, [r3, #0]
 23eed4c:	4b7c      	ldr	r3, [pc, #496]	; (23eef40 <setup+0x288>)
 23eed4e:	4c7d      	ldr	r4, [pc, #500]	; (23eef44 <setup+0x28c>)
 23eed50:	601a      	str	r2, [r3, #0]
  SD_initialize();
 23eed52:	f7fb f857 	bl	23e9e04 <_Z13SD_initializev>
  if (SD_exists && SD.exists(SD_n2s_file)) {
 23eed56:	782b      	ldrb	r3, [r5, #0]
 23eed58:	2b00      	cmp	r3, #0
 23eed5a:	f000 80c5 	beq.w	23eeee8 <setup+0x230>
 23eed5e:	497a      	ldr	r1, [pc, #488]	; (23eef48 <setup+0x290>)
 23eed60:	487a      	ldr	r0, [pc, #488]	; (23eef4c <setup+0x294>)
 23eed62:	f7f7 ffa5 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eed66:	2800      	cmp	r0, #0
 23eed68:	f000 80be 	beq.w	23eeee8 <setup+0x230>
    SystemStatusBits |= SSB_N2S; // Turn on Bit
 23eed6c:	6823      	ldr	r3, [r4, #0]
    Output("N2S:Exists");
 23eed6e:	4878      	ldr	r0, [pc, #480]	; (23eef50 <setup+0x298>)
    SystemStatusBits |= SSB_N2S; // Turn on Bit
 23eed70:	f043 0310 	orr.w	r3, r3, #16
 23eed74:	6023      	str	r3, [r4, #0]
    Output("N2S:None");
 23eed76:	f7f8 fa35 	bl	23e71e4 <_Z6OutputPKc>
  if (SD_exists && SD.exists(CF_NAME)) {
 23eed7a:	782b      	ldrb	r3, [r5, #0]
 23eed7c:	2b00      	cmp	r3, #0
 23eed7e:	f040 80b9 	bne.w	23eeef4 <setup+0x23c>
    sprintf(msgbuf, "CF:NO %s", CF_NAME); Output (msgbuf);
 23eed82:	4a74      	ldr	r2, [pc, #464]	; (23eef54 <setup+0x29c>)
 23eed84:	4974      	ldr	r1, [pc, #464]	; (23eef58 <setup+0x2a0>)
 23eed86:	4875      	ldr	r0, [pc, #468]	; (23eef5c <setup+0x2a4>)
 23eed88:	f009 fa02 	bl	23f8190 <sprintf>
 23eed8c:	4873      	ldr	r0, [pc, #460]	; (23eef5c <setup+0x2a4>)
 23eed8e:	f7f8 fa29 	bl	23e71e4 <_Z6OutputPKc>
    Output(msgbuf);
 23eed92:	4872      	ldr	r0, [pc, #456]	; (23eef5c <setup+0x2a4>)
 23eed94:	f7f8 fa26 	bl	23e71e4 <_Z6OutputPKc>
  EEPROM_Dump();
 23eed98:	f7fa ff72 	bl	23e9c80 <_Z11EEPROM_Dumpv>
  stc_timestamp();
 23eed9c:	f7f8 fa9e 	bl	23e72dc <_Z13stc_timestampv>
  sprintf (msgbuf, "%s+", timestamp);
 23eeda0:	4a6f      	ldr	r2, [pc, #444]	; (23eef60 <setup+0x2a8>)
 23eeda2:	4970      	ldr	r1, [pc, #448]	; (23eef64 <setup+0x2ac>)
 23eeda4:	486d      	ldr	r0, [pc, #436]	; (23eef5c <setup+0x2a4>)
 23eeda6:	f009 f9f3 	bl	23f8190 <sprintf>
  Output(msgbuf);
 23eedaa:	486c      	ldr	r0, [pc, #432]	; (23eef5c <setup+0x2a4>)
 23eedac:	f7f8 fa1a 	bl	23e71e4 <_Z6OutputPKc>
  rtc_initialize();
 23eedb0:	f7f8 fade 	bl	23e7370 <_Z14rtc_initializev>
  if (Time.isValid()) {
 23eedb4:	f00a ff6d 	bl	23f9c92 <_ZN9TimeClass7isValidEv>
 23eedb8:	2800      	cmp	r0, #0
 23eedba:	f000 80a5 	beq.w	23eef08 <setup+0x250>
    Output("STC: Valid");
 23eedbe:	486a      	ldr	r0, [pc, #424]	; (23eef68 <setup+0x2b0>)
  anemometer_interrupt_count = 0;
 23eedc0:	2400      	movs	r4, #0
    Output("STC: Not Valid");
 23eedc2:	f7f8 fa0f 	bl	23e71e4 <_Z6OutputPKc>
  stc_timestamp();
 23eedc6:	f7f8 fa89 	bl	23e72dc <_Z13stc_timestampv>
  sprintf (msgbuf, "%s=", timestamp);
 23eedca:	4a65      	ldr	r2, [pc, #404]	; (23eef60 <setup+0x2a8>)
 23eedcc:	4967      	ldr	r1, [pc, #412]	; (23eef6c <setup+0x2b4>)
 23eedce:	4863      	ldr	r0, [pc, #396]	; (23eef5c <setup+0x2a4>)
 23eedd0:	f009 f9de 	bl	23f8190 <sprintf>
  Output(msgbuf);
 23eedd4:	4861      	ldr	r0, [pc, #388]	; (23eef5c <setup+0x2a4>)
 23eedd6:	f7f8 fa05 	bl	23e71e4 <_Z6OutputPKc>
  SimChangeCheck();
 23eedda:	f7fc f9db 	bl	23eb194 <_Z14SimChangeCheckv>
  anemometer_interrupt_count = 0;
 23eedde:	4b64      	ldr	r3, [pc, #400]	; (23eef70 <setup+0x2b8>)
 23eede0:	601c      	str	r4, [r3, #0]
  anemometer_interrupt_stime = System.millis();
 23eede2:	f7f7 ff03 	bl	23e6bec <_ZN11SystemClass6millisEv>
 23eede6:	4b63      	ldr	r3, [pc, #396]	; (23eef74 <setup+0x2bc>)
  attachInterrupt(ANEMOMETER_IRQ_PIN, anemometer_interrupt_handler, FALLING);
 23eede8:	2202      	movs	r2, #2
  anemometer_interrupt_stime = System.millis();
 23eedea:	e9c3 0100 	strd	r0, r1, [r3]
  attachInterrupt(ANEMOMETER_IRQ_PIN, anemometer_interrupt_handler, FALLING);
 23eedee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23eedf2:	4961      	ldr	r1, [pc, #388]	; (23eef78 <setup+0x2c0>)
 23eedf4:	2011      	movs	r0, #17
 23eedf6:	9400      	str	r4, [sp, #0]
 23eedf8:	f00a f8b0 	bl	23f8f5c <_Z15attachInterrupttPFvvE13InterruptModeah>
  raingauge1_interrupt_count = 0;
 23eedfc:	4b5f      	ldr	r3, [pc, #380]	; (23eef7c <setup+0x2c4>)
 23eedfe:	601c      	str	r4, [r3, #0]
  raingauge1_interrupt_stime = System.millis();
 23eee00:	f7f7 fef4 	bl	23e6bec <_ZN11SystemClass6millisEv>
 23eee04:	4b5e      	ldr	r3, [pc, #376]	; (23eef80 <setup+0x2c8>)
  attachInterrupt(RAINGAUGE1_IRQ_PIN, raingauge1_interrupt_handler, FALLING);
 23eee06:	2202      	movs	r2, #2
  raingauge1_interrupt_stime = System.millis();
 23eee08:	e9c3 0100 	strd	r0, r1, [r3]
  raingauge1_interrupt_ltime = 0;  // used to debounce the tip
 23eee0c:	2000      	movs	r0, #0
 23eee0e:	2100      	movs	r1, #0
 23eee10:	4b5c      	ldr	r3, [pc, #368]	; (23eef84 <setup+0x2cc>)
 23eee12:	e9c3 0100 	strd	r0, r1, [r3]
  attachInterrupt(RAINGAUGE1_IRQ_PIN, raingauge1_interrupt_handler, FALLING);
 23eee16:	495c      	ldr	r1, [pc, #368]	; (23eef88 <setup+0x2d0>)
 23eee18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23eee1c:	2010      	movs	r0, #16
 23eee1e:	9400      	str	r4, [sp, #0]
 23eee20:	f00a f89c 	bl	23f8f5c <_Z15attachInterrupttPFvvE13InterruptModeah>
  TXI_Initialize();
 23eee24:	f7fc fb98 	bl	23eb558 <_Z14TXI_Initializev>
  A4_Initialize();
 23eee28:	f7f9 ff96 	bl	23e8d58 <_Z13A4_Initializev>
  A5_Initialize();
 23eee2c:	f7fa f818 	bl	23e8e60 <_Z13A5_Initializev>
  bmx_initialize();
 23eee30:	f7f8 fd26 	bl	23e7880 <_Z14bmx_initializev>
  htu21d_initialize();
 23eee34:	f7f8 fe40 	bl	23e7ab8 <_Z17htu21d_initializev>
  mcp9808_initialize();
 23eee38:	f7f8 fe6c 	bl	23e7b14 <_Z18mcp9808_initializev>
  sht_initialize();
 23eee3c:	f7f8 ff1a 	bl	23e7c74 <_Z14sht_initializev>
  hih8_initialize();
 23eee40:	f7f8 ff80 	bl	23e7d44 <_Z15hih8_initializev>
  si1145_initialize();
 23eee44:	f7f9 fbf0 	bl	23e8628 <_Z17si1145_initializev>
  vlx_initialize();
 23eee48:	f7f9 fca2 	bl	23e8790 <_Z14vlx_initializev>
  blx_initialize();
 23eee4c:	f7f9 fcce 	bl	23e87ec <_Z14blx_initializev>
  as5600_initialize();
 23eee50:	f7f9 ff52 	bl	23e8cf8 <_Z17as5600_initializev>
  pm25aqi_initialize();
 23eee54:	f7f9 fd56 	bl	23e8904 <_Z18pm25aqi_initializev>
  hdc_initialize();
 23eee58:	f7f9 fdda 	bl	23e8a10 <_Z14hdc_initializev>
  lps_initialize();
 23eee5c:	f7f9 fe48 	bl	23e8af0 <_Z14lps_initializev>
  tlw_initialize();
 23eee60:	f7f9 fec0 	bl	23e8be4 <_Z14tlw_initializev>
  tsm_initialize();
 23eee64:	f7f9 feec 	bl	23e8c40 <_Z14tsm_initializev>
  tmsm_initialize();
 23eee68:	f7f9 ff18 	bl	23e8c9c <_Z15tmsm_initializev>
  wbt_initialize();
 23eee6c:	f7f9 f84c 	bl	23e7f08 <_Z14wbt_initializev>
  hi_initialize();
 23eee70:	f7f9 f936 	bl	23e80e0 <_Z13hi_initializev>
  wbgt_initialize();
 23eee74:	f7f9 fae2 	bl	23e843c <_Z15wbgt_initializev>
  lora_initialize();
 23eee78:	f7fe fd9a 	bl	23ed9b0 <_Z15lora_initializev>
  lora_device_initialize();
 23eee7c:	f7f8 fbce 	bl	23e761c <_Z22lora_device_initializev>
  lora_msg_check();
 23eee80:	f7fe fe8a 	bl	23edb98 <_Z14lora_msg_checkv>
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
 23eee84:	2203      	movs	r2, #3
 23eee86:	f241 3388 	movw	r3, #5000	; 0x1388
 23eee8a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
        bool clearSession, bool reconnect) :
 23eee8e:	2301      	movs	r3, #1
  Particle.setDisconnectOptions(CloudDisconnectOptions().graceful(true).timeout(5s));
 23eee90:	a80a      	add	r0, sp, #40	; 0x28
 23eee92:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
        reconnect_(reconnect) {
 23eee96:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
 23eee9a:	f009 fcd9 	bl	23f8850 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>
        spark_cloud_flag_connect();
 23eee9e:	f009 f80b 	bl	23f7eb8 <spark_cloud_flag_connect>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 23eeea2:	4a3a      	ldr	r2, [pc, #232]	; (23eef8c <setup+0x2d4>)
 23eeea4:	493a      	ldr	r1, [pc, #232]	; (23eef90 <setup+0x2d8>)
 23eeea6:	483b      	ldr	r0, [pc, #236]	; (23eef94 <setup+0x2dc>)
 23eeea8:	f009 fcb6 	bl	23f8818 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  if (Particle.function("DoAction", Function_DoAction)) {
 23eeeac:	b370      	cbz	r0, 23eef0c <setup+0x254>
    Output ("DoAction:OK");
 23eeeae:	483a      	ldr	r0, [pc, #232]	; (23eef98 <setup+0x2e0>)
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 23eeeb0:	4c3a      	ldr	r4, [pc, #232]	; (23eef9c <setup+0x2e4>)
    Output ("DoAction:ERR");
 23eeeb2:	f7f8 f997 	bl	23e71e4 <_Z6OutputPKc>
  Wind_Distance_Air_Initialize(); // Will call HeartBeat()
 23eeeb6:	f7fe fea7 	bl	23edc08 <_Z28Wind_Distance_Air_Initializev>
 23eeeba:	f242 7210 	movw	r2, #10000	; 0x2710
 23eeebe:	4621      	mov	r1, r4
 23eeec0:	4b37      	ldr	r3, [pc, #220]	; (23eefa0 <setup+0x2e8>)
 23eeec2:	4838      	ldr	r0, [pc, #224]	; (23eefa4 <setup+0x2ec>)
 23eeec4:	f008 fb0c 	bl	23f74e0 <cellular_command>
  if ((RESP_OK == Cellular.command(callback_imsi, imsi, 10000, "AT+CIMI\r\n")) && (strcmp(imsi,"") != 0)) {
 23eeec8:	3002      	adds	r0, #2
 23eeeca:	d101      	bne.n	23eeed0 <setup+0x218>
 23eeecc:	7823      	ldrb	r3, [r4, #0]
 23eeece:	b9fb      	cbnz	r3, 23eef10 <setup+0x258>
    Output("IMSI:NF");
 23eeed0:	4835      	ldr	r0, [pc, #212]	; (23eefa8 <setup+0x2f0>)
    Output (msgbuf);
 23eeed2:	f7f8 f987 	bl	23e71e4 <_Z6OutputPKc>
  if (Time.isValid()) {
 23eeed6:	f00a fedc 	bl	23f9c92 <_ZN9TimeClass7isValidEv>
 23eeeda:	b118      	cbz	r0, 23eeee4 <setup+0x22c>
    EEPROM_Initialize();
 23eeedc:	f7fa fd0c 	bl	23e98f8 <_Z17EEPROM_Initializev>
    OBS_Do();   
 23eeee0:	f7fc fc56 	bl	23eb790 <_Z6OBS_Dov>
}
 23eeee4:	b013      	add	sp, #76	; 0x4c
 23eeee6:	bd30      	pop	{r4, r5, pc}
    SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23eeee8:	6823      	ldr	r3, [r4, #0]
    Output("N2S:None");
 23eeeea:	4830      	ldr	r0, [pc, #192]	; (23eefac <setup+0x2f4>)
    SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23eeeec:	f023 0310 	bic.w	r3, r3, #16
 23eeef0:	6023      	str	r3, [r4, #0]
    Output("N2S:None");
 23eeef2:	e740      	b.n	23eed76 <setup+0xbe>
  if (SD_exists && SD.exists(CF_NAME)) {
 23eeef4:	4917      	ldr	r1, [pc, #92]	; (23eef54 <setup+0x29c>)
 23eeef6:	4815      	ldr	r0, [pc, #84]	; (23eef4c <setup+0x294>)
 23eeef8:	f7f7 feda 	bl	23e6cb0 <_ZN8FsVolume6existsEPKc>
 23eeefc:	2800      	cmp	r0, #0
 23eeefe:	f43f af40 	beq.w	23eed82 <setup+0xca>
    SD_ReadConfigFile();
 23eef02:	f7fb fa7f 	bl	23ea404 <_Z17SD_ReadConfigFilev>
 23eef06:	e747      	b.n	23eed98 <setup+0xe0>
    Output("STC: Not Valid");
 23eef08:	4829      	ldr	r0, [pc, #164]	; (23eefb0 <setup+0x2f8>)
 23eef0a:	e759      	b.n	23eedc0 <setup+0x108>
    Output ("DoAction:ERR");
 23eef0c:	4829      	ldr	r0, [pc, #164]	; (23eefb4 <setup+0x2fc>)
 23eef0e:	e7cf      	b.n	23eeeb0 <setup+0x1f8>
    sprintf (msgbuf, "IMSI:%s", imsi);
 23eef10:	4622      	mov	r2, r4
 23eef12:	4929      	ldr	r1, [pc, #164]	; (23eefb8 <setup+0x300>)
 23eef14:	4811      	ldr	r0, [pc, #68]	; (23eef5c <setup+0x2a4>)
 23eef16:	f009 f93b 	bl	23f8190 <sprintf>
    Output (msgbuf);
 23eef1a:	4810      	ldr	r0, [pc, #64]	; (23eef5c <setup+0x2a4>)
 23eef1c:	e7d9      	b.n	23eeed2 <setup+0x21a>
 23eef1e:	bf00      	nop
 23eef20:	1007aa58 	.word	0x1007aa58
 23eef24:	1006a218 	.word	0x1006a218
 23eef28:	1007af3c 	.word	0x1007af3c
 23eef2c:	1006a144 	.word	0x1006a144
 23eef30:	023fe96c 	.word	0x023fe96c
 23eef34:	023fe705 	.word	0x023fe705
 23eef38:	1006a1f0 	.word	0x1006a1f0
 23eef3c:	1006a7b4 	.word	0x1006a7b4
 23eef40:	1006a2e0 	.word	0x1006a2e0
 23eef44:	1006a1cc 	.word	0x1006a1cc
 23eef48:	1006a19f 	.word	0x1006a19f
 23eef4c:	1006a308 	.word	0x1006a308
 23eef50:	023fe9af 	.word	0x023fe9af
 23eef54:	023fdbd3 	.word	0x023fdbd3
 23eef58:	023fe9c3 	.word	0x023fe9c3
 23eef5c:	1006f140 	.word	0x1006f140
 23eef60:	1007abe4 	.word	0x1007abe4
 23eef64:	023fe9cc 	.word	0x023fe9cc
 23eef68:	023fe9d0 	.word	0x023fe9d0
 23eef6c:	023fe9ea 	.word	0x023fe9ea
 23eef70:	1006a950 	.word	0x1006a950
 23eef74:	1006a958 	.word	0x1006a958
 23eef78:	023e6ad1 	.word	0x023e6ad1
 23eef7c:	1007aa5c 	.word	0x1007aa5c
 23eef80:	1007aa68 	.word	0x1007aa68
 23eef84:	1007aa60 	.word	0x1007aa60
 23eef88:	023e6bf5 	.word	0x023e6bf5
 23eef8c:	023fe9ee 	.word	0x023fe9ee
 23eef90:	023ea9c5 	.word	0x023ea9c5
 23eef94:	023f87ed 	.word	0x023f87ed
 23eef98:	023fe9f7 	.word	0x023fe9f7
 23eef9c:	1006aeb4 	.word	0x1006aeb4
 23eefa0:	023fea10 	.word	0x023fea10
 23eefa4:	023e6b15 	.word	0x023e6b15
 23eefa8:	023fea1a 	.word	0x023fea1a
 23eefac:	023fe9ba 	.word	0x023fe9ba
 23eefb0:	023fe9db 	.word	0x023fe9db
 23eefb4:	023fea03 	.word	0x023fea03
 23eefb8:	023fea22 	.word	0x023fea22

023eefbc <_ZL9xor_blockPhS_>:
  return pgm_read_byte (& s_inv [x]) ;
}


static void xor_block (byte * d, byte * s)
{
 23eefbc:	b510      	push	{r4, lr}
 23eefbe:	1d0b      	adds	r3, r1, #4
 23eefc0:	3004      	adds	r0, #4
 23eefc2:	3114      	adds	r1, #20
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
    {
      *d++ ^= *s++ ;  // some unrolling
 23eefc4:	f813 4c04 	ldrb.w	r4, [r3, #-4]
 23eefc8:	f810 2c04 	ldrb.w	r2, [r0, #-4]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23eefcc:	3304      	adds	r3, #4
      *d++ ^= *s++ ;  // some unrolling
 23eefce:	4062      	eors	r2, r4
 23eefd0:	f800 2c04 	strb.w	r2, [r0, #-4]
      *d++ ^= *s++ ;
 23eefd4:	f813 4c07 	ldrb.w	r4, [r3, #-7]
 23eefd8:	f810 2c03 	ldrb.w	r2, [r0, #-3]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23eefdc:	3004      	adds	r0, #4
      *d++ ^= *s++ ;
 23eefde:	4062      	eors	r2, r4
 23eefe0:	f800 2c07 	strb.w	r2, [r0, #-7]
      *d++ ^= *s++ ;
 23eefe4:	f813 4c06 	ldrb.w	r4, [r3, #-6]
 23eefe8:	f810 2c06 	ldrb.w	r2, [r0, #-6]
 23eefec:	4062      	eors	r2, r4
 23eefee:	f800 2c06 	strb.w	r2, [r0, #-6]
      *d++ ^= *s++ ;
 23eeff2:	f813 4c05 	ldrb.w	r4, [r3, #-5]
 23eeff6:	f810 2c05 	ldrb.w	r2, [r0, #-5]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23eeffa:	428b      	cmp	r3, r1
      *d++ ^= *s++ ;
 23eeffc:	ea82 0204 	eor.w	r2, r2, r4
 23ef000:	f800 2c05 	strb.w	r2, [r0, #-5]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23ef004:	d1de      	bne.n	23eefc4 <_ZL9xor_blockPhS_+0x8>
    }
}
 23ef006:	bd10      	pop	{r4, pc}

023ef008 <_ZL12copy_and_keyPhS_S_>:

static void copy_and_key (byte * d, byte * s, byte * k)
{
 23ef008:	b530      	push	{r4, r5, lr}
 23ef00a:	1d0b      	adds	r3, r1, #4
 23ef00c:	3204      	adds	r2, #4
 23ef00e:	3004      	adds	r0, #4
 23ef010:	3114      	adds	r1, #20
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
    {
      *d++ = *s++ ^ *k++ ;  // some unrolling
 23ef012:	f813 4c04 	ldrb.w	r4, [r3, #-4]
 23ef016:	f812 5c04 	ldrb.w	r5, [r2, #-4]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23ef01a:	3304      	adds	r3, #4
      *d++ = *s++ ^ *k++ ;  // some unrolling
 23ef01c:	406c      	eors	r4, r5
 23ef01e:	f800 4c04 	strb.w	r4, [r0, #-4]
      *d++ = *s++ ^ *k++ ;
 23ef022:	f812 5c03 	ldrb.w	r5, [r2, #-3]
 23ef026:	f813 4c07 	ldrb.w	r4, [r3, #-7]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23ef02a:	3204      	adds	r2, #4
      *d++ = *s++ ^ *k++ ;
 23ef02c:	406c      	eors	r4, r5
 23ef02e:	f800 4c03 	strb.w	r4, [r0, #-3]
      *d++ = *s++ ^ *k++ ;
 23ef032:	f813 4c06 	ldrb.w	r4, [r3, #-6]
 23ef036:	f812 5c06 	ldrb.w	r5, [r2, #-6]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23ef03a:	3004      	adds	r0, #4
      *d++ = *s++ ^ *k++ ;
 23ef03c:	406c      	eors	r4, r5
 23ef03e:	f800 4c06 	strb.w	r4, [r0, #-6]
      *d++ = *s++ ^ *k++ ;
 23ef042:	f813 4c05 	ldrb.w	r4, [r3, #-5]
 23ef046:	f812 5c05 	ldrb.w	r5, [r2, #-5]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23ef04a:	428b      	cmp	r3, r1
      *d++ = *s++ ^ *k++ ;
 23ef04c:	ea84 0405 	eor.w	r4, r4, r5
 23ef050:	f800 4c05 	strb.w	r4, [r0, #-5]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23ef054:	d1dd      	bne.n	23ef012 <_ZL12copy_and_keyPhS_S_+0xa>
    }
}
 23ef056:	bd30      	pop	{r4, r5, pc}

023ef058 <_ZN3AESC1Ev>:
    }
}

/******************************************************************************/

AES::AES(){
 23ef058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23ef05a:	4a11      	ldr	r2, [pc, #68]	; (23ef0a0 <_ZN3AESC1Ev+0x48>)
 23ef05c:	4603      	mov	r3, r0
 23ef05e:	4617      	mov	r7, r2
 23ef060:	f500 758c 	add.w	r5, r0, #280	; 0x118
 23ef064:	f102 0610 	add.w	r6, r2, #16
 23ef068:	462c      	mov	r4, r5
 23ef06a:	6810      	ldr	r0, [r2, #0]
 23ef06c:	6851      	ldr	r1, [r2, #4]
 23ef06e:	3208      	adds	r2, #8
 23ef070:	c403      	stmia	r4!, {r0, r1}
 23ef072:	42b2      	cmp	r2, r6
 23ef074:	4625      	mov	r5, r4
 23ef076:	d1f7      	bne.n	23ef068 <_ZN3AESC1Ev+0x10>
	byte ar_iv[8] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01 };
 23ef078:	466a      	mov	r2, sp
 23ef07a:	6938      	ldr	r0, [r7, #16]
 23ef07c:	6871      	ldr	r1, [r6, #4]
 23ef07e:	c203      	stmia	r2!, {r0, r1}
	memcpy(iv,ar_iv,8);
 23ef080:	466a      	mov	r2, sp
 23ef082:	ca03      	ldmia	r2!, {r0, r1}
	memcpy(iv+8,ar_iv,8);
 23ef084:	466a      	mov	r2, sp
	memcpy(iv,ar_iv,8);
 23ef086:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
 23ef08a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	memcpy(iv+8,ar_iv,8);
 23ef08e:	ca03      	ldmia	r2!, {r0, r1}
 23ef090:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	arr_pad[11] = 0x0c;
	arr_pad[12] = 0x0d;
	arr_pad[13] = 0x0e;
	arr_pad[14] = 0x0f;
	arr_pad[15] = 0x10;
}
 23ef094:	4618      	mov	r0, r3
	memcpy(iv+8,ar_iv,8);
 23ef096:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
}
 23ef09a:	b003      	add	sp, #12
 23ef09c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23ef09e:	bf00      	nop
 23ef0a0:	023fd23c 	.word	0x023fd23c

023ef0a4 <_ZN3AES12copy_n_bytesEPhS0_h>:
}

/******************************************************************************/

void AES::copy_n_bytes (byte * d, byte * s, byte nn)
{
 23ef0a4:	b570      	push	{r4, r5, r6, lr}
 23ef0a6:	4618      	mov	r0, r3
 23ef0a8:	460c      	mov	r4, r1
 23ef0aa:	4615      	mov	r5, r2
  while (nn >= 4)
 23ef0ac:	2803      	cmp	r0, #3
 23ef0ae:	f101 0104 	add.w	r1, r1, #4
 23ef0b2:	f105 0504 	add.w	r5, r5, #4
 23ef0b6:	d811      	bhi.n	23ef0dc <_ZN3AES12copy_n_bytesEPhS0_h+0x38>
 23ef0b8:	0898      	lsrs	r0, r3, #2
 23ef0ba:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
 23ef0be:	440c      	add	r4, r1
 23ef0c0:	4411      	add	r1, r2
 23ef0c2:	ebc0 1280 	rsb	r2, r0, r0, lsl #6
 23ef0c6:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 23ef0ca:	fa51 f080 	uxtab	r0, r1, r0
      *d++ = *s++ ;
      *d++ = *s++ ;
      *d++ = *s++ ;
      nn -= 4 ;
    }
  while (nn--)
 23ef0ce:	4281      	cmp	r1, r0
 23ef0d0:	d017      	beq.n	23ef102 <_ZN3AES12copy_n_bytesEPhS0_h+0x5e>
    *d++ = *s++ ;
 23ef0d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 23ef0d6:	f804 3b01 	strb.w	r3, [r4], #1
  while (nn--)
 23ef0da:	e7f8      	b.n	23ef0ce <_ZN3AES12copy_n_bytesEPhS0_h+0x2a>
      *d++ = *s++ ;  // some unrolling
 23ef0dc:	f815 6c04 	ldrb.w	r6, [r5, #-4]
      nn -= 4 ;
 23ef0e0:	3804      	subs	r0, #4
      *d++ = *s++ ;  // some unrolling
 23ef0e2:	f801 6c04 	strb.w	r6, [r1, #-4]
      *d++ = *s++ ;
 23ef0e6:	f815 6c03 	ldrb.w	r6, [r5, #-3]
      nn -= 4 ;
 23ef0ea:	b2c0      	uxtb	r0, r0
      *d++ = *s++ ;
 23ef0ec:	f801 6c03 	strb.w	r6, [r1, #-3]
      *d++ = *s++ ;
 23ef0f0:	f815 6c02 	ldrb.w	r6, [r5, #-2]
 23ef0f4:	f801 6c02 	strb.w	r6, [r1, #-2]
      *d++ = *s++ ;
 23ef0f8:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 23ef0fc:	f801 6c01 	strb.w	r6, [r1, #-1]
  while (nn >= 4)
 23ef100:	e7d4      	b.n	23ef0ac <_ZN3AES12copy_n_bytesEPhS0_h+0x8>
}
 23ef102:	bd70      	pop	{r4, r5, r6, pc}

023ef104 <_ZN3AES7set_keyEPhi>:
  switch (keylen)
 23ef104:	2a80      	cmp	r2, #128	; 0x80
{
 23ef106:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ef10a:	4604      	mov	r4, r0
 23ef10c:	4608      	mov	r0, r1
  switch (keylen)
 23ef10e:	d015      	beq.n	23ef13c <_ZN3AES7set_keyEPhi+0x38>
 23ef110:	dc0b      	bgt.n	23ef12a <_ZN3AES7set_keyEPhi+0x26>
 23ef112:	2a18      	cmp	r2, #24
 23ef114:	d068      	beq.n	23ef1e8 <_ZN3AES7set_keyEPhi+0xe4>
 23ef116:	2a20      	cmp	r2, #32
 23ef118:	d00c      	beq.n	23ef134 <_ZN3AES7set_keyEPhi+0x30>
 23ef11a:	2a10      	cmp	r2, #16
 23ef11c:	d00e      	beq.n	23ef13c <_ZN3AES7set_keyEPhi+0x38>
      round = 0;
 23ef11e:	2300      	movs	r3, #0
      return FAILURE;
 23ef120:	20ff      	movs	r0, #255	; 0xff
      round = 0;
 23ef122:	6023      	str	r3, [r4, #0]
}
 23ef124:	b003      	add	sp, #12
 23ef126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (keylen)
 23ef12a:	2ac0      	cmp	r2, #192	; 0xc0
 23ef12c:	d05c      	beq.n	23ef1e8 <_ZN3AES7set_keyEPhi+0xe4>
 23ef12e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 23ef132:	d1f4      	bne.n	23ef11e <_ZN3AES7set_keyEPhi+0x1a>
      round = 14 ;
 23ef134:	230e      	movs	r3, #14
      keylen = 32; // 14 rounds
 23ef136:	2620      	movs	r6, #32
      round = 14 ;
 23ef138:	6023      	str	r3, [r4, #0]
      break;
 23ef13a:	e002      	b.n	23ef142 <_ZN3AES7set_keyEPhi+0x3e>
      round = 10 ;
 23ef13c:	230a      	movs	r3, #10
      keylen = 16; // 10 rounds
 23ef13e:	2610      	movs	r6, #16
      round = 10 ;
 23ef140:	6023      	str	r3, [r4, #0]
  hi = (round + 1) << 4 ;
 23ef142:	4621      	mov	r1, r4
  copy_n_bytes (key_sched, key, keylen) ;
 23ef144:	b2f7      	uxtb	r7, r6
 23ef146:	4602      	mov	r2, r0
  hi = (round + 1) << 4 ;
 23ef148:	f851 5b04 	ldr.w	r5, [r1], #4
  copy_n_bytes (key_sched, key, keylen) ;
 23ef14c:	463b      	mov	r3, r7
 23ef14e:	4620      	mov	r0, r4
 23ef150:	f7ff ffa8 	bl	23ef0a4 <_ZN3AES12copy_n_bytesEPhS0_h>
 23ef154:	463a      	mov	r2, r7
 23ef156:	46bc      	mov	ip, r7
  for (byte cc = keylen, rc = 1 ; cc < hi ; cc += N_COL)
 23ef158:	2101      	movs	r1, #1
  hi = (round + 1) << 4 ;
 23ef15a:	3501      	adds	r5, #1
 23ef15c:	012d      	lsls	r5, r5, #4
  return pgm_read_byte (& s_fwd [x]) ;
 23ef15e:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 23ef21c <_ZN3AES7set_keyEPhi+0x118>
  hi = (round + 1) << 4 ;
 23ef162:	b2ed      	uxtb	r5, r5
  for (byte cc = keylen, rc = 1 ; cc < hi ; cc += N_COL)
 23ef164:	42aa      	cmp	r2, r5
 23ef166:	d256      	bcs.n	23ef216 <_ZN3AES7set_keyEPhi+0x112>
 23ef168:	58a0      	ldr	r0, [r4, r2]
      if (cc == next)
 23ef16a:	4594      	cmp	ip, r2
        t[i] = key_sched [cc-4+i] ;
 23ef16c:	9001      	str	r0, [sp, #4]
      if (cc == next)
 23ef16e:	d13f      	bne.n	23ef1f0 <_ZN3AES7set_keyEPhi+0xec>
  return pgm_read_byte (& s_fwd [x]) ;
 23ef170:	f3c0 2307 	ubfx	r3, r0, #8, #8
          t[0] = s_box (t[1]) ^ rc ;
 23ef174:	f81e 3003 	ldrb.w	r3, [lr, r3]
          rc = f2 (rc) ;
 23ef178:	f011 0f80 	tst.w	r1, #128	; 0x80
          t[0] = s_box (t[1]) ^ rc ;
 23ef17c:	ea83 0301 	eor.w	r3, r3, r1
 23ef180:	f88d 3004 	strb.w	r3, [sp, #4]
  return pgm_read_byte (& s_fwd [x]) ;
 23ef184:	f3c0 4307 	ubfx	r3, r0, #16, #8
          t[1] = s_box (t[2]) ;
 23ef188:	f81e 3003 	ldrb.w	r3, [lr, r3]
 23ef18c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 23ef190:	f88d 3005 	strb.w	r3, [sp, #5]
  return pgm_read_byte (& s_fwd [x]) ;
 23ef194:	ea4f 6310 	mov.w	r3, r0, lsr #24
          t[2] = s_box (t[3]) ;
 23ef198:	f81e 3003 	ldrb.w	r3, [lr, r3]
  return pgm_read_byte (& s_fwd [x]) ;
 23ef19c:	b2c0      	uxtb	r0, r0
          t[2] = s_box (t[3]) ;
 23ef19e:	f88d 3006 	strb.w	r3, [sp, #6]
          t[3] = s_box (ttt) ;
 23ef1a2:	f81e 3000 	ldrb.w	r3, [lr, r0]
          next += keylen ;
 23ef1a6:	44bc      	add	ip, r7
          rc = f2 (rc) ;
 23ef1a8:	bf18      	it	ne
 23ef1aa:	f081 011b 	eorne.w	r1, r1, #27
          next += keylen ;
 23ef1ae:	fa5f fc8c 	uxtb.w	ip, ip
          t[3] = s_box (ttt) ;
 23ef1b2:	f88d 3007 	strb.w	r3, [sp, #7]
          rc = f2 (rc) ;
 23ef1b6:	b2c9      	uxtb	r1, r1
      else if (keylen == 32 && (cc & 31) == 16)
 23ef1b8:	2304      	movs	r3, #4
 23ef1ba:	1bd0      	subs	r0, r2, r7
 23ef1bc:	b2c0      	uxtb	r0, r0
 23ef1be:	3004      	adds	r0, #4
 23ef1c0:	3204      	adds	r2, #4
 23ef1c2:	4420      	add	r0, r4
 23ef1c4:	f10d 0904 	add.w	r9, sp, #4
 23ef1c8:	eb04 0a02 	add.w	sl, r4, r2
        key_sched [cc + i] = key_sched [tt + i] ^ t[i] ;
 23ef1cc:	f810 8b01 	ldrb.w	r8, [r0], #1
 23ef1d0:	f819 bb01 	ldrb.w	fp, [r9], #1
      for (byte i = 0 ; i < N_COL ; i++)
 23ef1d4:	3b01      	subs	r3, #1
        key_sched [cc + i] = key_sched [tt + i] ^ t[i] ;
 23ef1d6:	ea88 080b 	eor.w	r8, r8, fp
      for (byte i = 0 ; i < N_COL ; i++)
 23ef1da:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
        key_sched [cc + i] = key_sched [tt + i] ^ t[i] ;
 23ef1de:	f80a 8b01 	strb.w	r8, [sl], #1
      for (byte i = 0 ; i < N_COL ; i++)
 23ef1e2:	d1f3      	bne.n	23ef1cc <_ZN3AES7set_keyEPhi+0xc8>
  for (byte cc = keylen, rc = 1 ; cc < hi ; cc += N_COL)
 23ef1e4:	b2d2      	uxtb	r2, r2
 23ef1e6:	e7bd      	b.n	23ef164 <_ZN3AES7set_keyEPhi+0x60>
      round = 12 ;
 23ef1e8:	230c      	movs	r3, #12
      keylen = 24; // 12 rounds
 23ef1ea:	2618      	movs	r6, #24
      round = 12 ;
 23ef1ec:	6023      	str	r3, [r4, #0]
      break;
 23ef1ee:	e7a8      	b.n	23ef142 <_ZN3AES7set_keyEPhi+0x3e>
      else if (keylen == 32 && (cc & 31) == 16)
 23ef1f0:	2e20      	cmp	r6, #32
 23ef1f2:	d1e1      	bne.n	23ef1b8 <_ZN3AES7set_keyEPhi+0xb4>
 23ef1f4:	f002 031f 	and.w	r3, r2, #31
 23ef1f8:	2b10      	cmp	r3, #16
 23ef1fa:	d1dd      	bne.n	23ef1b8 <_ZN3AES7set_keyEPhi+0xb4>
 23ef1fc:	2304      	movs	r3, #4
 23ef1fe:	a801      	add	r0, sp, #4
            t[i] = s_box (t[i]) ;
 23ef200:	f890 8000 	ldrb.w	r8, [r0]
          for (byte i = 0 ; i < 4 ; i++)
 23ef204:	3b01      	subs	r3, #1
            t[i] = s_box (t[i]) ;
 23ef206:	f81e 8008 	ldrb.w	r8, [lr, r8]
          for (byte i = 0 ; i < 4 ; i++)
 23ef20a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            t[i] = s_box (t[i]) ;
 23ef20e:	f800 8b01 	strb.w	r8, [r0], #1
          for (byte i = 0 ; i < 4 ; i++)
 23ef212:	d1f5      	bne.n	23ef200 <_ZN3AES7set_keyEPhi+0xfc>
 23ef214:	e7d0      	b.n	23ef1b8 <_ZN3AES7set_keyEPhi+0xb4>
  return SUCCESS ;
 23ef216:	2000      	movs	r0, #0
 23ef218:	e784      	b.n	23ef124 <_ZN3AES7set_keyEPhi+0x20>
 23ef21a:	bf00      	nop
 23ef21c:	023fea6c 	.word	0x023fea6c

023ef220 <_ZN3AES7decryptEPhS0_>:
}

/******************************************************************************/

byte AES::decrypt (byte plain [N_BLOCK], byte cipher [N_BLOCK])
{
 23ef220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ef224:	ee07 2a10 	vmov	s14, r2
  if (round)
 23ef228:	6802      	ldr	r2, [r0, #0]
{
 23ef22a:	4605      	mov	r5, r0
 23ef22c:	b095      	sub	sp, #84	; 0x54
  if (round)
 23ef22e:	2a00      	cmp	r2, #0
 23ef230:	f000 8179 	beq.w	23ef526 <_ZN3AES7decryptEPhS0_+0x306>
    {
      byte s1 [N_BLOCK] ;
      copy_and_key (s1, plain, (byte*) (key_sched + round * N_BLOCK)) ;
 23ef234:	1d03      	adds	r3, r0, #4
 23ef236:	ae0c      	add	r6, sp, #48	; 0x30
 23ef238:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23ef23c:	4630      	mov	r0, r6
  return pgm_read_byte (& s_inv [x]) ;
 23ef23e:	4cbb      	ldr	r4, [pc, #748]	; (23ef52c <_ZN3AES7decryptEPhS0_+0x30c>)
      copy_and_key (s1, plain, (byte*) (key_sched + round * N_BLOCK)) ;
 23ef240:	9307      	str	r3, [sp, #28]
 23ef242:	f7ff fee1 	bl	23ef008 <_ZL12copy_and_keyPhS_S_>
  return pgm_read_byte (& s_inv [x]) ;
 23ef246:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 23ef24a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
  st [0] = is_box (st[0]) ; st [4] = is_box (st [4]);
 23ef24e:	5ce3      	ldrb	r3, [r4, r3]
  st [13] = is_box (st [9]) ; st [9] = is_box (st [5]) ;
 23ef250:	5ca2      	ldrb	r2, [r4, r2]
  st [0] = is_box (st[0]) ; st [4] = is_box (st [4]);
 23ef252:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  return pgm_read_byte (& s_inv [x]) ;
 23ef256:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 23ef25a:	ee07 6a90 	vmov	s15, r6
  st [0] = is_box (st[0]) ; st [4] = is_box (st [4]);
 23ef25e:	5ce3      	ldrb	r3, [r4, r3]
 23ef260:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  return pgm_read_byte (& s_inv [x]) ;
 23ef264:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
  st [8] = is_box (st[8]) ; st [12] = is_box (st [12]);
 23ef268:	5ce3      	ldrb	r3, [r4, r3]
 23ef26a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  return pgm_read_byte (& s_inv [x]) ;
 23ef26e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
  st [8] = is_box (st[8]) ; st [12] = is_box (st [12]);
 23ef272:	5ce3      	ldrb	r3, [r4, r3]
 23ef274:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  byte tt = st[13] ;
 23ef278:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
  st [13] = is_box (st [9]) ; st [9] = is_box (st [5]) ;
 23ef27c:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
  return pgm_read_byte (& s_inv [x]) ;
 23ef280:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
  st [5]  = is_box (st [1]) ; st [1] = is_box (tt) ;
 23ef284:	5ce3      	ldrb	r3, [r4, r3]
  st [13] = is_box (st [9]) ; st [9] = is_box (st [5]) ;
 23ef286:	5ca2      	ldrb	r2, [r4, r2]
 23ef288:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  return pgm_read_byte (& s_inv [x]) ;
 23ef28c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
  st [5]  = is_box (st [1]) ; st [1] = is_box (tt) ;
 23ef290:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 23ef294:	5ca2      	ldrb	r2, [r4, r2]
  tt = st [2] ; st [2] = is_box (st [10]) ; st [10] = is_box (tt) ;
 23ef296:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
  st [5]  = is_box (st [1]) ; st [1] = is_box (tt) ;
 23ef29a:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  return pgm_read_byte (& s_inv [x]) ;
 23ef29e:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
  tt = st [2] ; st [2] = is_box (st [10]) ; st [10] = is_box (tt) ;
 23ef2a2:	5ce3      	ldrb	r3, [r4, r3]
 23ef2a4:	5ca2      	ldrb	r2, [r4, r2]
 23ef2a6:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 23ef2aa:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
  return pgm_read_byte (& s_inv [x]) ;
 23ef2ae:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
  tt = st [6] ; st [6] = is_box (st [14]) ; st [14] = is_box (tt) ;
 23ef2b2:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 23ef2b6:	5ca2      	ldrb	r2, [r4, r2]
 23ef2b8:	5ce3      	ldrb	r3, [r4, r3]
 23ef2ba:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  return pgm_read_byte (& s_inv [x]) ;
 23ef2be:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
  tt = st [6] ; st [6] = is_box (st [14]) ; st [14] = is_box (tt) ;
 23ef2c2:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
  st [3]  = is_box (st [7])  ; st [7]  = is_box (st [11]) ;
 23ef2c6:	5ca2      	ldrb	r2, [r4, r2]
  tt = st [3] ;
 23ef2c8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  st [3]  = is_box (st [7])  ; st [7]  = is_box (st [11]) ;
 23ef2cc:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
  return pgm_read_byte (& s_inv [x]) ;
 23ef2d0:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
  st [11] = is_box (st [15]) ; st [15] = is_box (tt) ;
 23ef2d4:	5ce3      	ldrb	r3, [r4, r3]
  st [3]  = is_box (st [7])  ; st [7]  = is_box (st [11]) ;
 23ef2d6:	5ca2      	ldrb	r2, [r4, r2]
 23ef2d8:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  return pgm_read_byte (& s_inv [x]) ;
 23ef2dc:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
  st [11] = is_box (st [15]) ; st [15] = is_box (tt) ;
 23ef2e0:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
      inv_shift_sub_rows (s1) ;

      for (byte r = round ; --r ; )
 23ef2e4:	682b      	ldr	r3, [r5, #0]
  st [11] = is_box (st [15]) ; st [15] = is_box (tt) ;
 23ef2e6:	5ca2      	ldrb	r2, [r4, r2]
 23ef2e8:	3b01      	subs	r3, #1
 23ef2ea:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
      for (byte r = round ; --r ; )
 23ef2ee:	b2da      	uxtb	r2, r3
 23ef2f0:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 23ef2f4:	1d2b      	adds	r3, r5, #4
 23ef2f6:	9305      	str	r3, [sp, #20]
 23ef2f8:	9b07      	ldr	r3, [sp, #28]
 23ef2fa:	9a05      	ldr	r2, [sp, #20]
 23ef2fc:	4293      	cmp	r3, r2
 23ef2fe:	f000 8107 	beq.w	23ef510 <_ZN3AES7decryptEPhS0_+0x2f0>
       {
         byte s2 [N_BLOCK] ;
         copy_and_key (s2, s1, (byte*) (key_sched + r * N_BLOCK)) ;
 23ef302:	ee17 1a90 	vmov	r1, s15
 23ef306:	a810      	add	r0, sp, #64	; 0x40
 23ef308:	f7ff fe7e 	bl	23ef008 <_ZL12copy_and_keyPhS_S_>
 23ef30c:	ab0c      	add	r3, sp, #48	; 0x30
 23ef30e:	f04f 0b00 	mov.w	fp, #0
 23ef312:	ee07 3a90 	vmov	s15, r3
 23ef316:	f10d 0940 	add.w	r9, sp, #64	; 0x40
      byte a1 = st [i] ;
 23ef31a:	f899 3000 	ldrb.w	r3, [r9]
  for (byte i = 0 ; i < N_BLOCK ; i += N_COL)
 23ef31e:	f109 0904 	add.w	r9, r9, #4
      byte a1 = st [i] ;
 23ef322:	9306      	str	r3, [sp, #24]
      byte b1 = st [i+1] ;
 23ef324:	f819 3c03 	ldrb.w	r3, [r9, #-3]
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ef328:	9906      	ldr	r1, [sp, #24]
      byte b1 = st [i+1] ;
 23ef32a:	9302      	str	r3, [sp, #8]
      byte c1 = st [i+2] ;
 23ef32c:	f819 3c02 	ldrb.w	r3, [r9, #-2]
 23ef330:	9303      	str	r3, [sp, #12]
      byte d1 = st [i+3] ;
 23ef332:	f819 3c01 	ldrb.w	r3, [r9, #-1]
 23ef336:	9304      	str	r3, [sp, #16]
      byte a2 = f2(a1), b2 = f2(b1), c2 = f2(c1), d2 = f2(d1) ;
 23ef338:	f919 3c04 	ldrsb.w	r3, [r9, #-4]
 23ef33c:	2b00      	cmp	r3, #0
 23ef33e:	9b06      	ldr	r3, [sp, #24]
 23ef340:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23ef344:	bfb8      	it	lt
 23ef346:	f083 031b 	eorlt.w	r3, r3, #27
 23ef34a:	fa5f fa83 	uxtb.w	sl, r3
 23ef34e:	9b02      	ldr	r3, [sp, #8]
 23ef350:	ea4f 024a 	mov.w	r2, sl, lsl #1
 23ef354:	f013 0f80 	tst.w	r3, #128	; 0x80
 23ef358:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23ef35c:	bf18      	it	ne
 23ef35e:	f083 031b 	eorne.w	r3, r3, #27
 23ef362:	b2db      	uxtb	r3, r3
 23ef364:	9300      	str	r3, [sp, #0]
 23ef366:	9b03      	ldr	r3, [sp, #12]
 23ef368:	f013 0f80 	tst.w	r3, #128	; 0x80
 23ef36c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23ef370:	bf18      	it	ne
 23ef372:	f083 031b 	eorne.w	r3, r3, #27
 23ef376:	b2db      	uxtb	r3, r3
 23ef378:	9301      	str	r3, [sp, #4]
 23ef37a:	9b04      	ldr	r3, [sp, #16]
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
 23ef37c:	9d01      	ldr	r5, [sp, #4]
      byte a2 = f2(a1), b2 = f2(b1), c2 = f2(c1), d2 = f2(d1) ;
 23ef37e:	f013 0f80 	tst.w	r3, #128	; 0x80
 23ef382:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23ef386:	bf18      	it	ne
 23ef388:	f083 031b 	eorne.w	r3, r3, #27
 23ef38c:	b2d8      	uxtb	r0, r3
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
 23ef38e:	9b00      	ldr	r3, [sp, #0]
 23ef390:	f01a 0f80 	tst.w	sl, #128	; 0x80
 23ef394:	bf18      	it	ne
 23ef396:	f082 021b 	eorne.w	r2, r2, #27
 23ef39a:	f013 0f80 	tst.w	r3, #128	; 0x80
 23ef39e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23ef3a2:	ea4f 0c45 	mov.w	ip, r5, lsl #1
 23ef3a6:	bf18      	it	ne
 23ef3a8:	f083 031b 	eorne.w	r3, r3, #27
 23ef3ac:	f015 0f80 	tst.w	r5, #128	; 0x80
 23ef3b0:	b2d2      	uxtb	r2, r2
 23ef3b2:	ea4f 0740 	mov.w	r7, r0, lsl #1
 23ef3b6:	bf18      	it	ne
 23ef3b8:	f08c 0c1b 	eorne.w	ip, ip, #27
 23ef3bc:	f010 0f80 	tst.w	r0, #128	; 0x80
 23ef3c0:	ea4f 0842 	mov.w	r8, r2, lsl #1
 23ef3c4:	bf18      	it	ne
 23ef3c6:	f087 071b 	eorne.w	r7, r7, #27
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ef3ca:	f012 0f80 	tst.w	r2, #128	; 0x80
 23ef3ce:	bf18      	it	ne
 23ef3d0:	f088 081b 	eorne.w	r8, r8, #27
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
 23ef3d4:	b2db      	uxtb	r3, r3
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ef3d6:	fa5f f888 	uxtb.w	r8, r8
 23ef3da:	f013 0f80 	tst.w	r3, #128	; 0x80
 23ef3de:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ef3e2:	ea81 0108 	eor.w	r1, r1, r8
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ef3e6:	bf18      	it	ne
 23ef3e8:	f08e 0e1b 	eorne.w	lr, lr, #27
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ef3ec:	9108      	str	r1, [sp, #32]
 23ef3ee:	9902      	ldr	r1, [sp, #8]
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
 23ef3f0:	fa5f fc8c 	uxtb.w	ip, ip
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ef3f4:	fa5f fe8e 	uxtb.w	lr, lr
 23ef3f8:	f01c 0f80 	tst.w	ip, #128	; 0x80
 23ef3fc:	ea4f 064c 	mov.w	r6, ip, lsl #1
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ef400:	ea81 010e 	eor.w	r1, r1, lr
 23ef404:	9109      	str	r1, [sp, #36]	; 0x24
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ef406:	bf18      	it	ne
 23ef408:	f086 061b 	eorne.w	r6, r6, #27
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ef40c:	9903      	ldr	r1, [sp, #12]
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
 23ef40e:	b2ff      	uxtb	r7, r7
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ef410:	b2f6      	uxtb	r6, r6
 23ef412:	f017 0f80 	tst.w	r7, #128	; 0x80
 23ef416:	ea4f 0547 	mov.w	r5, r7, lsl #1
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ef41a:	ea81 0106 	eor.w	r1, r1, r6
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ef41e:	bf18      	it	ne
 23ef420:	f085 051b 	eorne.w	r5, r5, #27
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ef424:	910a      	str	r1, [sp, #40]	; 0x28
 23ef426:	9904      	ldr	r1, [sp, #16]
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ef428:	b2ed      	uxtb	r5, r5
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ef42a:	4069      	eors	r1, r5
 23ef42c:	910b      	str	r1, [sp, #44]	; 0x2c
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23ef42e:	9903      	ldr	r1, [sp, #12]
      byte ac = a8 ^ a4,bc = b8 ^ b4,cc = c8 ^ c4,dc = d8 ^ d4 ;
 23ef430:	407d      	eors	r5, r7
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23ef432:	ea81 070a 	eor.w	r7, r1, sl
 23ef436:	9900      	ldr	r1, [sp, #0]
      byte ac = a8 ^ a4,bc = b8 ^ b4,cc = c8 ^ c4,dc = d8 ^ d4 ;
 23ef438:	ea82 0208 	eor.w	r2, r2, r8
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23ef43c:	404f      	eors	r7, r1
 23ef43e:	9909      	ldr	r1, [sp, #36]	; 0x24
 23ef440:	4057      	eors	r7, r2
      byte ac = a8 ^ a4,bc = b8 ^ b4,cc = c8 ^ c4,dc = d8 ^ d4 ;
 23ef442:	ea8c 0606 	eor.w	r6, ip, r6
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23ef446:	404f      	eors	r7, r1
  return pgm_read_byte (& s_inv [x]) ;
 23ef448:	990b      	ldr	r1, [sp, #44]	; 0x2c
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23ef44a:	4077      	eors	r7, r6
  return pgm_read_byte (& s_inv [x]) ;
 23ef44c:	404f      	eors	r7, r1
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23ef44e:	ee17 1a90 	vmov	r1, s15
 23ef452:	5de7      	ldrb	r7, [r4, r7]
      byte ac = a8 ^ a4,bc = b8 ^ b4,cc = c8 ^ c4,dc = d8 ^ d4 ;
 23ef454:	ea83 030e 	eor.w	r3, r3, lr
  return pgm_read_byte (& s_inv [x]) ;
 23ef458:	fa5f fe8b 	uxtb.w	lr, fp
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23ef45c:	f80b 7001 	strb.w	r7, [fp, r1]
      dt[(i+5)&15]  = is_box (a9     ^  bc^b2  ^  c9^c2  ^  dc^d1) ;
 23ef460:	f10e 0705 	add.w	r7, lr, #5
 23ef464:	a914      	add	r1, sp, #80	; 0x50
 23ef466:	f007 070f 	and.w	r7, r7, #15
 23ef46a:	440f      	add	r7, r1
 23ef46c:	9904      	ldr	r1, [sp, #16]
  for (byte i = 0 ; i < N_BLOCK ; i += N_COL)
 23ef46e:	f10b 0b04 	add.w	fp, fp, #4
      dt[(i+5)&15]  = is_box (a9     ^  bc^b2  ^  c9^c2  ^  dc^d1) ;
 23ef472:	468c      	mov	ip, r1
 23ef474:	9900      	ldr	r1, [sp, #0]
  for (byte i = 0 ; i < N_BLOCK ; i += N_COL)
 23ef476:	f1bb 0f10 	cmp.w	fp, #16
      dt[(i+5)&15]  = is_box (a9     ^  bc^b2  ^  c9^c2  ^  dc^d1) ;
 23ef47a:	ea8c 0c01 	eor.w	ip, ip, r1
 23ef47e:	9901      	ldr	r1, [sp, #4]
 23ef480:	ea81 0c0c 	eor.w	ip, r1, ip
 23ef484:	9908      	ldr	r1, [sp, #32]
 23ef486:	ea81 0c0c 	eor.w	ip, r1, ip
 23ef48a:	990a      	ldr	r1, [sp, #40]	; 0x28
 23ef48c:	ea83 0c0c 	eor.w	ip, r3, ip
 23ef490:	ea81 0c0c 	eor.w	ip, r1, ip
  return pgm_read_byte (& s_inv [x]) ;
 23ef494:	ea85 0c0c 	eor.w	ip, r5, ip
      dt[(i+5)&15]  = is_box (a9     ^  bc^b2  ^  c9^c2  ^  dc^d1) ;
 23ef498:	f814 c00c 	ldrb.w	ip, [r4, ip]
      dt[(i+10)&15] = is_box (ac^a1  ^  b9     ^  cc^c2  ^  d9^d2) ;
 23ef49c:	a914      	add	r1, sp, #80	; 0x50
      dt[(i+5)&15]  = is_box (a9     ^  bc^b2  ^  c9^c2  ^  dc^d1) ;
 23ef49e:	f807 cc20 	strb.w	ip, [r7, #-32]
      dt[(i+10)&15] = is_box (ac^a1  ^  b9     ^  cc^c2  ^  d9^d2) ;
 23ef4a2:	f10e 070a 	add.w	r7, lr, #10
 23ef4a6:	f007 070f 	and.w	r7, r7, #15
 23ef4aa:	440f      	add	r7, r1
 23ef4ac:	9906      	ldr	r1, [sp, #24]
 23ef4ae:	468c      	mov	ip, r1
 23ef4b0:	9901      	ldr	r1, [sp, #4]
 23ef4b2:	ea8c 0801 	eor.w	r8, ip, r1
 23ef4b6:	ea80 0808 	eor.w	r8, r0, r8
 23ef4ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 23ef4bc:	ea82 0208 	eor.w	r2, r2, r8
 23ef4c0:	ea82 0201 	eor.w	r2, r2, r1
  return pgm_read_byte (& s_inv [x]) ;
 23ef4c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
      dt[(i+10)&15] = is_box (ac^a1  ^  b9     ^  cc^c2  ^  d9^d2) ;
 23ef4c6:	ea82 0206 	eor.w	r2, r2, r6
  return pgm_read_byte (& s_inv [x]) ;
 23ef4ca:	ea82 0201 	eor.w	r2, r2, r1
      dt[(i+10)&15] = is_box (ac^a1  ^  b9     ^  cc^c2  ^  d9^d2) ;
 23ef4ce:	5ca2      	ldrb	r2, [r4, r2]
      dt[(i+15)&15] = is_box (a9^a2  ^  bc^b1  ^  c9     ^  dc^d2) ;
 23ef4d0:	a914      	add	r1, sp, #80	; 0x50
      dt[(i+10)&15] = is_box (ac^a1  ^  b9     ^  cc^c2  ^  d9^d2) ;
 23ef4d2:	f807 2c20 	strb.w	r2, [r7, #-32]
      dt[(i+15)&15] = is_box (a9^a2  ^  bc^b1  ^  c9     ^  dc^d2) ;
 23ef4d6:	f10e 020f 	add.w	r2, lr, #15
 23ef4da:	f002 020f 	and.w	r2, r2, #15
 23ef4de:	440a      	add	r2, r1
 23ef4e0:	9902      	ldr	r1, [sp, #8]
 23ef4e2:	ea81 0e0a 	eor.w	lr, r1, sl
 23ef4e6:	9908      	ldr	r1, [sp, #32]
 23ef4e8:	ea80 0e0e 	eor.w	lr, r0, lr
 23ef4ec:	ea81 0e0e 	eor.w	lr, r1, lr
 23ef4f0:	990a      	ldr	r1, [sp, #40]	; 0x28
 23ef4f2:	ea83 030e 	eor.w	r3, r3, lr
 23ef4f6:	ea81 0003 	eor.w	r0, r1, r3
  return pgm_read_byte (& s_inv [x]) ;
 23ef4fa:	ea85 0500 	eor.w	r5, r5, r0
      dt[(i+15)&15] = is_box (a9^a2  ^  bc^b1  ^  c9     ^  dc^d2) ;
 23ef4fe:	5d63      	ldrb	r3, [r4, r5]
 23ef500:	f802 3c20 	strb.w	r3, [r2, #-32]
  for (byte i = 0 ; i < N_BLOCK ; i += N_COL)
 23ef504:	f47f af09 	bne.w	23ef31a <_ZN3AES7decryptEPhS0_+0xfa>
 23ef508:	9b05      	ldr	r3, [sp, #20]
 23ef50a:	3b10      	subs	r3, #16
 23ef50c:	9305      	str	r3, [sp, #20]
      for (byte r = round ; --r ; )
 23ef50e:	e6f3      	b.n	23ef2f8 <_ZN3AES7decryptEPhS0_+0xd8>
         inv_mix_sub_columns (s1, s2) ;
       }
      copy_and_key (cipher, s1, (byte*) (key_sched)) ;
 23ef510:	ee17 0a10 	vmov	r0, s14
 23ef514:	ee17 1a90 	vmov	r1, s15
 23ef518:	9a07      	ldr	r2, [sp, #28]
 23ef51a:	f7ff fd75 	bl	23ef008 <_ZL12copy_and_keyPhS_S_>
    }
  else
    return FAILURE ;
  return SUCCESS ;
 23ef51e:	2000      	movs	r0, #0
}
 23ef520:	b015      	add	sp, #84	; 0x54
 23ef522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return FAILURE ;
 23ef526:	20ff      	movs	r0, #255	; 0xff
 23ef528:	e7fa      	b.n	23ef520 <_ZN3AES7decryptEPhS0_+0x300>
 23ef52a:	bf00      	nop
 23ef52c:	023feb6c 	.word	0x023feb6c

023ef530 <_ZN3AES11cbc_decryptEPhS0_iS0_>:

/******************************************************************************/

byte AES::cbc_decrypt (byte * cipher, byte * plain, int n_block, byte iv [N_BLOCK])
{
 23ef530:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 23ef534:	4607      	mov	r7, r0
 23ef536:	460d      	mov	r5, r1
 23ef538:	4616      	mov	r6, r2
 23ef53a:	461c      	mov	r4, r3
 23ef53c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  while (n_block--)
 23ef540:	b1ec      	cbz	r4, 23ef57e <_ZN3AES11cbc_decryptEPhS0_iS0_+0x4e>
    {
      byte tmp [N_BLOCK] ;
      copy_n_bytes (tmp, cipher, N_BLOCK) ;
 23ef542:	2310      	movs	r3, #16
 23ef544:	462a      	mov	r2, r5
 23ef546:	4669      	mov	r1, sp
 23ef548:	4638      	mov	r0, r7
 23ef54a:	f7ff fdab 	bl	23ef0a4 <_ZN3AES12copy_n_bytesEPhS0_h>
      if (decrypt (cipher, plain) != SUCCESS)
 23ef54e:	4632      	mov	r2, r6
 23ef550:	4629      	mov	r1, r5
 23ef552:	4638      	mov	r0, r7
 23ef554:	f7ff fe64 	bl	23ef220 <_ZN3AES7decryptEPhS0_>
 23ef558:	3c01      	subs	r4, #1
 23ef55a:	b118      	cbz	r0, 23ef564 <_ZN3AES11cbc_decryptEPhS0_iS0_+0x34>
        return FAILURE ;
 23ef55c:	20ff      	movs	r0, #255	; 0xff
      copy_n_bytes (iv, tmp, N_BLOCK) ;
      plain  += N_BLOCK ;
      cipher += N_BLOCK;
    }
  return SUCCESS ;
}
 23ef55e:	b004      	add	sp, #16
 23ef560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      xor_block (plain, iv) ;
 23ef564:	4630      	mov	r0, r6
 23ef566:	4641      	mov	r1, r8
 23ef568:	f7ff fd28 	bl	23eefbc <_ZL9xor_blockPhS_>
      copy_n_bytes (iv, tmp, N_BLOCK) ;
 23ef56c:	2310      	movs	r3, #16
 23ef56e:	466a      	mov	r2, sp
 23ef570:	4641      	mov	r1, r8
 23ef572:	4638      	mov	r0, r7
 23ef574:	f7ff fd96 	bl	23ef0a4 <_ZN3AES12copy_n_bytesEPhS0_h>
      plain  += N_BLOCK ;
 23ef578:	3610      	adds	r6, #16
      cipher += N_BLOCK;
 23ef57a:	3510      	adds	r5, #16
  while (n_block--)
 23ef57c:	e7e0      	b.n	23ef540 <_ZN3AES11cbc_decryptEPhS0_iS0_+0x10>
  return SUCCESS ;
 23ef57e:	4620      	mov	r0, r4
 23ef580:	e7ed      	b.n	23ef55e <_ZN3AES11cbc_decryptEPhS0_iS0_+0x2e>

023ef582 <_ZN3AES6set_IVEy>:
  return SUCCESS ;
}

/*****************************************************************************/

void AES::set_IV(unsigned long long int IVCl){
 23ef582:	b537      	push	{r0, r1, r2, r4, r5, lr}
	memcpy(iv,&IVCl,8);
 23ef584:	466d      	mov	r5, sp
void AES::set_IV(unsigned long long int IVCl){
 23ef586:	e9cd 2300 	strd	r2, r3, [sp]
 23ef58a:	4604      	mov	r4, r0
	memcpy(iv,&IVCl,8);
 23ef58c:	cd03      	ldmia	r5!, {r0, r1}
	memcpy(iv+8,&IVCl,8);
 23ef58e:	466d      	mov	r5, sp
	memcpy(iv,&IVCl,8);
 23ef590:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 23ef594:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	IVC = IVCl;
 23ef598:	e9c4 233e 	strd	r2, r3, [r4, #248]	; 0xf8
	memcpy(iv+8,&IVCl,8);
 23ef59c:	cd03      	ldmia	r5!, {r0, r1}
 23ef59e:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
 23ef5a2:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
}
 23ef5a6:	b003      	add	sp, #12
 23ef5a8:	bd30      	pop	{r4, r5, pc}

023ef5aa <_ZN3AES6iv_incEv>:

/******************************************************************************/

void AES::iv_inc(){
	IVC += 1;
 23ef5aa:	e9d0 323e 	ldrd	r3, r2, [r0, #248]	; 0xf8
 23ef5ae:	3301      	adds	r3, #1
 23ef5b0:	f142 0200 	adc.w	r2, r2, #0
 23ef5b4:	e9c0 323e 	strd	r3, r2, [r0, #248]	; 0xf8
	memcpy(iv,&IVC,8);
 23ef5b8:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 23ef5bc:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ef5c0:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
 23ef5c4:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
	memcpy(iv+8,&IVC,8);
 23ef5c8:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 23ef5cc:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 23ef5d0:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
 23ef5d4:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
}
 23ef5d8:	4770      	bx	lr

023ef5da <_ZN3AES6get_IVEPh>:


/******************************************************************************/

void AES::get_IV(byte *out){
	memcpy(out,&IVC,8);
 23ef5da:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 23ef5de:	600b      	str	r3, [r1, #0]
 23ef5e0:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
 23ef5e4:	604b      	str	r3, [r1, #4]
	memcpy(out+8,&IVC,8);
 23ef5e6:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 23ef5ea:	608b      	str	r3, [r1, #8]
 23ef5ec:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
 23ef5f0:	60cb      	str	r3, [r1, #12]
}
 23ef5f2:	4770      	bx	lr

023ef5f4 <_ZN3AES14do_aes_decryptEPhiS0_S0_iS0_>:
	cbc_encrypt (plain_p, cipher, blocks);
}

/******************************************************************************/

void AES::do_aes_decrypt(byte *cipher,int size_c,byte *plain,byte *key, int bits, byte ivl [N_BLOCK]){
 23ef5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ef5f8:	4614      	mov	r4, r2
 23ef5fa:	461f      	mov	r7, r3
 23ef5fc:	4605      	mov	r5, r0
 23ef5fe:	460e      	mov	r6, r1
	size = sizel;
 23ef600:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
	set_size(size_c);
	int blocks = size_c / N_BLOCK;
	set_key (key, bits);
 23ef604:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
void AES::do_aes_decrypt(byte *cipher,int size_c,byte *plain,byte *key, int bits, byte ivl [N_BLOCK]){
 23ef608:	f8dd 8020 	ldr.w	r8, [sp, #32]
	set_key (key, bits);
 23ef60c:	f7ff fd7a 	bl	23ef104 <_ZN3AES7set_keyEPhi>
	int blocks = size_c / N_BLOCK;
 23ef610:	2c00      	cmp	r4, #0
 23ef612:	bfb8      	it	lt
 23ef614:	340f      	addlt	r4, #15
	cbc_decrypt (cipher,plain, blocks, ivl);
 23ef616:	463a      	mov	r2, r7
 23ef618:	4631      	mov	r1, r6
 23ef61a:	4628      	mov	r0, r5
 23ef61c:	f8cd 8018 	str.w	r8, [sp, #24]
 23ef620:	1123      	asrs	r3, r4, #4
}
 23ef622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	cbc_decrypt (cipher,plain, blocks, ivl);
 23ef626:	f7ff bf83 	b.w	23ef530 <_ZN3AES11cbc_decryptEPhS0_iS0_>

023ef62a <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  /*! @brief Whether we should automatically change the range (if possible) for
     higher precision
      @param enabled True if we will try to autorange */
  virtual void enableAutoRange(bool enabled) {
    (void)enabled; /* suppress unused warning */
  };
 23ef62a:	4770      	bx	lr

023ef62c <_ZN15Adafruit_BME280C1Ev>:
#include <Wire.h>

/*!
 *  @brief  class constructor
 */
Adafruit_BME280::Adafruit_BME280() : _cs(-1), _mosi(-1), _miso(-1), _sck(-1) {}
 23ef62c:	2200      	movs	r2, #0
 23ef62e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 23ef632:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23ef636:	e9c0 1208 	strd	r1, r2, [r0, #32]
 23ef63a:	6102      	str	r2, [r0, #16]
 23ef63c:	4770      	bx	lr

023ef63e <_ZN15Adafruit_BME2807spixferEh>:
 *   @brief  Encapsulate hardware and software SPI transfer into one
 * function
 *   @param x the data byte to transfer
 *   @returns the data byte read from the device
 */
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 23ef63e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // hardware SPI
  if (_sck == -1)
 23ef642:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 23ef646:	4604      	mov	r4, r0
  if (_sck == -1)
 23ef648:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 23ef64a:	460f      	mov	r7, r1
  if (_sck == -1)
 23ef64c:	d104      	bne.n	23ef658 <_ZN15Adafruit_BME2807spixferEh+0x1a>
    digitalWrite(_sck, HIGH);
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
}
 23ef64e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return _spi->transfer(x);
 23ef652:	6840      	ldr	r0, [r0, #4]
 23ef654:	f00a b988 	b.w	23f9968 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
 23ef658:	2500      	movs	r5, #0
  for (int i = 7; i >= 0; i--) {
 23ef65a:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1 << i));
 23ef65c:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
 23ef660:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
 23ef664:	2100      	movs	r1, #0
 23ef666:	b280      	uxth	r0, r0
 23ef668:	f00a fdc3 	bl	23fa1f2 <digitalWrite>
    digitalWrite(_mosi, x & (1 << i));
 23ef66c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 23ef670:	fa08 f106 	lsl.w	r1, r8, r6
 23ef674:	4039      	ands	r1, r7
 23ef676:	b280      	uxth	r0, r0
 23ef678:	f00a fdbb 	bl	23fa1f2 <digitalWrite>
    digitalWrite(_sck, HIGH);
 23ef67c:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
 23ef680:	2101      	movs	r1, #1
 23ef682:	b280      	uxth	r0, r0
 23ef684:	f00a fdb5 	bl	23fa1f2 <digitalWrite>
    if (digitalRead(_miso))
 23ef688:	f994 0022 	ldrsb.w	r0, [r4, #34]	; 0x22
    reply <<= 1;
 23ef68c:	006d      	lsls	r5, r5, #1
    if (digitalRead(_miso))
 23ef68e:	b280      	uxth	r0, r0
    reply <<= 1;
 23ef690:	b2ed      	uxtb	r5, r5
    if (digitalRead(_miso))
 23ef692:	f00a fdc7 	bl	23fa224 <digitalRead>
 23ef696:	b108      	cbz	r0, 23ef69c <_ZN15Adafruit_BME2807spixferEh+0x5e>
      reply |= 1;
 23ef698:	f045 0501 	orr.w	r5, r5, #1
  for (int i = 7; i >= 0; i--) {
 23ef69c:	3e01      	subs	r6, #1
 23ef69e:	d2df      	bcs.n	23ef660 <_ZN15Adafruit_BME2807spixferEh+0x22>
}
 23ef6a0:	4628      	mov	r0, r5
 23ef6a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

023ef6a8 <_ZN15Adafruit_BME2806write8Ehh>:
/*!
 *   @brief  Writes an 8 bit value over I2C or SPI
 *   @param reg the register address to write to
 *   @param value the value to write to the register
 */
void Adafruit_BME280::write8(byte reg, byte value) {
 23ef6a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (_cs == -1) {
 23ef6aa:	f990 3020 	ldrsb.w	r3, [r0, #32]
void Adafruit_BME280::write8(byte reg, byte value) {
 23ef6ae:	4604      	mov	r4, r0
  if (_cs == -1) {
 23ef6b0:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
 23ef6b2:	460e      	mov	r6, r1
 23ef6b4:	4615      	mov	r5, r2
  if (_cs == -1) {
 23ef6b6:	d113      	bne.n	23ef6e0 <_ZN15Adafruit_BME2806write8Ehh+0x38>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23ef6b8:	7d01      	ldrb	r1, [r0, #20]
 23ef6ba:	6800      	ldr	r0, [r0, #0]
 23ef6bc:	f009 fbfc 	bl	23f8eb8 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23ef6c0:	6820      	ldr	r0, [r4, #0]
 23ef6c2:	4631      	mov	r1, r6
 23ef6c4:	6803      	ldr	r3, [r0, #0]
 23ef6c6:	689b      	ldr	r3, [r3, #8]
 23ef6c8:	4798      	blx	r3
    _wire->write((uint8_t)value);
 23ef6ca:	6820      	ldr	r0, [r4, #0]
 23ef6cc:	4629      	mov	r1, r5
 23ef6ce:	6803      	ldr	r3, [r0, #0]
 23ef6d0:	689b      	ldr	r3, [r3, #8]
 23ef6d2:	4798      	blx	r3
    _wire->endTransmission();
 23ef6d4:	6820      	ldr	r0, [r4, #0]
    spixfer(value);
    digitalWrite(_cs, HIGH);
    if (_sck == -1)
      _spi->endTransaction(); // release the SPI bus
  }
}
 23ef6d6:	b004      	add	sp, #16
 23ef6d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _wire->endTransmission();
 23ef6dc:	f009 bbf7 	b.w	23f8ece <_ZN7TwoWire15endTransmissionEv>
    if (_sck == -1)
 23ef6e0:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
 23ef6e4:	3301      	adds	r3, #1
 23ef6e6:	d10d      	bne.n	23ef704 <_ZN15Adafruit_BME2806write8Ehh+0x5c>
      dataMode_{dataMode}
 23ef6e8:	4b17      	ldr	r3, [pc, #92]	; (23ef748 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23ef6ea:	4669      	mov	r1, sp
 23ef6ec:	9300      	str	r3, [sp, #0]
 23ef6ee:	2300      	movs	r3, #0
 23ef6f0:	f88d 3004 	strb.w	r3, [sp, #4]
 23ef6f4:	4b15      	ldr	r3, [pc, #84]	; (23ef74c <_ZN15Adafruit_BME2806write8Ehh+0xa4>)
 23ef6f6:	6840      	ldr	r0, [r0, #4]
 23ef6f8:	9302      	str	r3, [sp, #8]
 23ef6fa:	2301      	movs	r3, #1
 23ef6fc:	f8ad 300c 	strh.w	r3, [sp, #12]
 23ef700:	f00a f8c4 	bl	23f988c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23ef704:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23ef708:	2100      	movs	r1, #0
 23ef70a:	b280      	uxth	r0, r0
 23ef70c:	f00a fd71 	bl	23fa1f2 <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
 23ef710:	f006 017f 	and.w	r1, r6, #127	; 0x7f
 23ef714:	4620      	mov	r0, r4
 23ef716:	f7ff ff92 	bl	23ef63e <_ZN15Adafruit_BME2807spixferEh>
    spixfer(value);
 23ef71a:	4629      	mov	r1, r5
 23ef71c:	4620      	mov	r0, r4
 23ef71e:	f7ff ff8e 	bl	23ef63e <_ZN15Adafruit_BME2807spixferEh>
    digitalWrite(_cs, HIGH);
 23ef722:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23ef726:	2101      	movs	r1, #1
 23ef728:	b280      	uxth	r0, r0
 23ef72a:	f00a fd62 	bl	23fa1f2 <digitalWrite>
    if (_sck == -1)
 23ef72e:	f994 3023 	ldrsb.w	r3, [r4, #35]	; 0x23
 23ef732:	3301      	adds	r3, #1
 23ef734:	d105      	bne.n	23ef742 <_ZN15Adafruit_BME2806write8Ehh+0x9a>
      _spi->endTransaction(); // release the SPI bus
 23ef736:	6860      	ldr	r0, [r4, #4]
}
 23ef738:	b004      	add	sp, #16
 23ef73a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      _spi->endTransaction(); // release the SPI bus
 23ef73e:	f00a b88b 	b.w	23f9858 <_ZN8SPIClass14endTransactionEv>
}
 23ef742:	b004      	add	sp, #16
 23ef744:	bd70      	pop	{r4, r5, r6, pc}
 23ef746:	bf00      	nop
 23ef748:	023fea34 	.word	0x023fea34
 23ef74c:	0007a120 	.word	0x0007a120

023ef750 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
                                  standby_duration duration) {
 23ef750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23ef752:	4604      	mov	r4, r0
  _measReg.osrs_t = tempSampling;
 23ef754:	00db      	lsls	r3, r3, #3
 23ef756:	f002 0207 	and.w	r2, r2, #7
 23ef75a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 23ef75e:	4313      	orrs	r3, r2
 23ef760:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
                                  standby_duration duration) {
 23ef764:	f89d 7018 	ldrb.w	r7, [sp, #24]
  _measReg.osrs_t = tempSampling;
 23ef768:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  _humReg.osrs_h = humSampling;
 23ef76c:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
                                  standby_duration duration) {
 23ef770:	f89d 501c 	ldrb.w	r5, [sp, #28]
 23ef774:	f89d 6020 	ldrb.w	r6, [sp, #32]
  _humReg.osrs_h = humSampling;
 23ef778:	f367 1347 	bfi	r3, r7, #5, #3
 23ef77c:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  _configReg.t_sb = duration;
 23ef780:	00ed      	lsls	r5, r5, #3
 23ef782:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 23ef786:	f006 0607 	and.w	r6, r6, #7
 23ef78a:	f005 0538 	and.w	r5, r5, #56	; 0x38
 23ef78e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 23ef792:	4335      	orrs	r5, r6
 23ef794:	431d      	orrs	r5, r3
 23ef796:	f880 504c 	strb.w	r5, [r0, #76]	; 0x4c
  write8(BME280_REGISTER_CONTROL, MODE_SLEEP);
 23ef79a:	2200      	movs	r2, #0
 23ef79c:	21f4      	movs	r1, #244	; 0xf4
 23ef79e:	f7ff ff83 	bl	23ef6a8 <_ZN15Adafruit_BME2806write8Ehh>
    // 100 = x8
    // 101 and above = x16
    unsigned int osrs_h : 3; ///< pressure oversampling

    /// @return combined ctrl hum register
    unsigned int get() { return (osrs_h); }
 23ef7a2:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
  write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
 23ef7a6:	4620      	mov	r0, r4
 23ef7a8:	21f2      	movs	r1, #242	; 0xf2
 23ef7aa:	0952      	lsrs	r2, r2, #5
 23ef7ac:	f7ff ff7c 	bl	23ef6a8 <_ZN15Adafruit_BME2806write8Ehh>
    unsigned int get() { return (t_sb << 5) | (filter << 2) | spi3w_en; }
 23ef7b0:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
  write8(BME280_REGISTER_CONFIG, _configReg.get());
 23ef7b4:	4620      	mov	r0, r4
 23ef7b6:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 23ef7ba:	f002 0107 	and.w	r1, r2, #7
 23ef7be:	009b      	lsls	r3, r3, #2
 23ef7c0:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 23ef7c4:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
 23ef7c8:	21f5      	movs	r1, #245	; 0xf5
 23ef7ca:	f7ff ff6d 	bl	23ef6a8 <_ZN15Adafruit_BME2806write8Ehh>
    unsigned int get() { return (osrs_t << 5) | (osrs_p << 2) | mode; }
 23ef7ce:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
  write8(BME280_REGISTER_CONTROL, _measReg.get());
 23ef7d2:	4620      	mov	r0, r4
 23ef7d4:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 23ef7d8:	f002 0107 	and.w	r1, r2, #7
 23ef7dc:	009b      	lsls	r3, r3, #2
 23ef7de:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 23ef7e2:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
 23ef7e6:	21f4      	movs	r1, #244	; 0xf4
}
 23ef7e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  write8(BME280_REGISTER_CONTROL, _measReg.get());
 23ef7ec:	f7ff bf5c 	b.w	23ef6a8 <_ZN15Adafruit_BME2806write8Ehh>

023ef7f0 <_ZN15Adafruit_BME2805read8Eh>:
/*!
 *   @brief  Reads an 8 bit value over I2C or SPI
 *   @param reg the register address to read from
 *   @returns the data byte read from the device
 */
uint8_t Adafruit_BME280::read8(byte reg) {
 23ef7f0:	b530      	push	{r4, r5, lr}
  uint8_t value;

  if (_cs == -1) {
 23ef7f2:	f990 3020 	ldrsb.w	r3, [r0, #32]
uint8_t Adafruit_BME280::read8(byte reg) {
 23ef7f6:	4604      	mov	r4, r0
  if (_cs == -1) {
 23ef7f8:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
 23ef7fa:	460d      	mov	r5, r1
 23ef7fc:	b085      	sub	sp, #20
  if (_cs == -1) {
 23ef7fe:	d118      	bne.n	23ef832 <_ZN15Adafruit_BME2805read8Eh+0x42>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23ef800:	7d01      	ldrb	r1, [r0, #20]
 23ef802:	6800      	ldr	r0, [r0, #0]
 23ef804:	f009 fb58 	bl	23f8eb8 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23ef808:	6820      	ldr	r0, [r4, #0]
 23ef80a:	4629      	mov	r1, r5
 23ef80c:	6803      	ldr	r3, [r0, #0]
 23ef80e:	689b      	ldr	r3, [r3, #8]
 23ef810:	4798      	blx	r3
    _wire->endTransmission();
 23ef812:	6820      	ldr	r0, [r4, #0]
 23ef814:	f009 fb5b 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)1);
 23ef818:	2201      	movs	r2, #1
 23ef81a:	7d21      	ldrb	r1, [r4, #20]
 23ef81c:	6820      	ldr	r0, [r4, #0]
 23ef81e:	f009 fb48 	bl	23f8eb2 <_ZN7TwoWire11requestFromEhj>
    value = _wire->read();
 23ef822:	6820      	ldr	r0, [r4, #0]
 23ef824:	6803      	ldr	r3, [r0, #0]
 23ef826:	695b      	ldr	r3, [r3, #20]
 23ef828:	4798      	blx	r3
 23ef82a:	b2c5      	uxtb	r5, r0
    digitalWrite(_cs, HIGH);
    if (_sck == -1)
      _spi->endTransaction(); // release the SPI bus
  }
  return value;
}
 23ef82c:	4628      	mov	r0, r5
 23ef82e:	b005      	add	sp, #20
 23ef830:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23ef832:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
 23ef836:	3301      	adds	r3, #1
 23ef838:	d10d      	bne.n	23ef856 <_ZN15Adafruit_BME2805read8Eh+0x66>
 23ef83a:	4b16      	ldr	r3, [pc, #88]	; (23ef894 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23ef83c:	4669      	mov	r1, sp
 23ef83e:	9300      	str	r3, [sp, #0]
 23ef840:	2300      	movs	r3, #0
 23ef842:	f88d 3004 	strb.w	r3, [sp, #4]
 23ef846:	4b14      	ldr	r3, [pc, #80]	; (23ef898 <_ZN15Adafruit_BME2805read8Eh+0xa8>)
 23ef848:	6840      	ldr	r0, [r0, #4]
 23ef84a:	9302      	str	r3, [sp, #8]
 23ef84c:	2301      	movs	r3, #1
 23ef84e:	f8ad 300c 	strh.w	r3, [sp, #12]
 23ef852:	f00a f81b 	bl	23f988c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23ef856:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23ef85a:	2100      	movs	r1, #0
 23ef85c:	b280      	uxth	r0, r0
 23ef85e:	f00a fcc8 	bl	23fa1f2 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23ef862:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23ef866:	4620      	mov	r0, r4
 23ef868:	f7ff fee9 	bl	23ef63e <_ZN15Adafruit_BME2807spixferEh>
    value = spixfer(0);
 23ef86c:	2100      	movs	r1, #0
 23ef86e:	4620      	mov	r0, r4
 23ef870:	f7ff fee5 	bl	23ef63e <_ZN15Adafruit_BME2807spixferEh>
 23ef874:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
 23ef876:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23ef87a:	2101      	movs	r1, #1
 23ef87c:	b280      	uxth	r0, r0
 23ef87e:	f00a fcb8 	bl	23fa1f2 <digitalWrite>
    if (_sck == -1)
 23ef882:	f994 3023 	ldrsb.w	r3, [r4, #35]	; 0x23
 23ef886:	3301      	adds	r3, #1
 23ef888:	d1d0      	bne.n	23ef82c <_ZN15Adafruit_BME2805read8Eh+0x3c>
      _spi->endTransaction(); // release the SPI bus
 23ef88a:	6860      	ldr	r0, [r4, #4]
 23ef88c:	f009 ffe4 	bl	23f9858 <_ZN8SPIClass14endTransactionEv>
 23ef890:	e7cc      	b.n	23ef82c <_ZN15Adafruit_BME2805read8Eh+0x3c>
 23ef892:	bf00      	nop
 23ef894:	023fea34 	.word	0x023fea34
 23ef898:	0007a120 	.word	0x0007a120

023ef89c <_ZN15Adafruit_BME2806read16Eh>:
/*!
 *   @brief  Reads a 16 bit value over I2C or SPI
 *   @param reg the register address to read from
 *   @returns the 16 bit data value read from the device
 */
uint16_t Adafruit_BME280::read16(byte reg) {
 23ef89c:	b530      	push	{r4, r5, lr}
  uint16_t value;

  if (_cs == -1) {
 23ef89e:	f990 3020 	ldrsb.w	r3, [r0, #32]
uint16_t Adafruit_BME280::read16(byte reg) {
 23ef8a2:	4604      	mov	r4, r0
  if (_cs == -1) {
 23ef8a4:	3301      	adds	r3, #1
uint16_t Adafruit_BME280::read16(byte reg) {
 23ef8a6:	460d      	mov	r5, r1
 23ef8a8:	b085      	sub	sp, #20
  if (_cs == -1) {
 23ef8aa:	d11f      	bne.n	23ef8ec <_ZN15Adafruit_BME2806read16Eh+0x50>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23ef8ac:	7d01      	ldrb	r1, [r0, #20]
 23ef8ae:	6800      	ldr	r0, [r0, #0]
 23ef8b0:	f009 fb02 	bl	23f8eb8 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23ef8b4:	6820      	ldr	r0, [r4, #0]
 23ef8b6:	4629      	mov	r1, r5
 23ef8b8:	6803      	ldr	r3, [r0, #0]
 23ef8ba:	689b      	ldr	r3, [r3, #8]
 23ef8bc:	4798      	blx	r3
    _wire->endTransmission();
 23ef8be:	6820      	ldr	r0, [r4, #0]
 23ef8c0:	f009 fb05 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)2);
 23ef8c4:	2202      	movs	r2, #2
 23ef8c6:	7d21      	ldrb	r1, [r4, #20]
 23ef8c8:	6820      	ldr	r0, [r4, #0]
 23ef8ca:	f009 faf2 	bl	23f8eb2 <_ZN7TwoWire11requestFromEhj>
    value = (_wire->read() << 8) | _wire->read();
 23ef8ce:	6820      	ldr	r0, [r4, #0]
 23ef8d0:	6803      	ldr	r3, [r0, #0]
 23ef8d2:	695b      	ldr	r3, [r3, #20]
 23ef8d4:	4798      	blx	r3
 23ef8d6:	4605      	mov	r5, r0
 23ef8d8:	6820      	ldr	r0, [r4, #0]
 23ef8da:	6803      	ldr	r3, [r0, #0]
 23ef8dc:	695b      	ldr	r3, [r3, #20]
 23ef8de:	4798      	blx	r3
 23ef8e0:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 23ef8e4:	b285      	uxth	r5, r0
    if (_sck == -1)
      _spi->endTransaction(); // release the SPI bus
  }

  return value;
}
 23ef8e6:	4628      	mov	r0, r5
 23ef8e8:	b005      	add	sp, #20
 23ef8ea:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23ef8ec:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
 23ef8f0:	3301      	adds	r3, #1
 23ef8f2:	d10d      	bne.n	23ef910 <_ZN15Adafruit_BME2806read16Eh+0x74>
 23ef8f4:	4b19      	ldr	r3, [pc, #100]	; (23ef95c <_ZN15Adafruit_BME2806read16Eh+0xc0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23ef8f6:	4669      	mov	r1, sp
 23ef8f8:	9300      	str	r3, [sp, #0]
 23ef8fa:	2300      	movs	r3, #0
 23ef8fc:	f88d 3004 	strb.w	r3, [sp, #4]
 23ef900:	4b17      	ldr	r3, [pc, #92]	; (23ef960 <_ZN15Adafruit_BME2806read16Eh+0xc4>)
 23ef902:	6840      	ldr	r0, [r0, #4]
 23ef904:	9302      	str	r3, [sp, #8]
 23ef906:	2301      	movs	r3, #1
 23ef908:	f8ad 300c 	strh.w	r3, [sp, #12]
 23ef90c:	f009 ffbe 	bl	23f988c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23ef910:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23ef914:	2100      	movs	r1, #0
 23ef916:	b280      	uxth	r0, r0
 23ef918:	f00a fc6b 	bl	23fa1f2 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23ef91c:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23ef920:	4620      	mov	r0, r4
 23ef922:	f7ff fe8c 	bl	23ef63e <_ZN15Adafruit_BME2807spixferEh>
    value = (spixfer(0) << 8) | spixfer(0);
 23ef926:	2100      	movs	r1, #0
 23ef928:	4620      	mov	r0, r4
 23ef92a:	f7ff fe88 	bl	23ef63e <_ZN15Adafruit_BME2807spixferEh>
 23ef92e:	2100      	movs	r1, #0
 23ef930:	4605      	mov	r5, r0
 23ef932:	4620      	mov	r0, r4
 23ef934:	f7ff fe83 	bl	23ef63e <_ZN15Adafruit_BME2807spixferEh>
 23ef938:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 23ef93c:	b285      	uxth	r5, r0
    digitalWrite(_cs, HIGH);
 23ef93e:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23ef942:	2101      	movs	r1, #1
 23ef944:	b280      	uxth	r0, r0
 23ef946:	f00a fc54 	bl	23fa1f2 <digitalWrite>
    if (_sck == -1)
 23ef94a:	f994 3023 	ldrsb.w	r3, [r4, #35]	; 0x23
 23ef94e:	3301      	adds	r3, #1
 23ef950:	d1c9      	bne.n	23ef8e6 <_ZN15Adafruit_BME2806read16Eh+0x4a>
      _spi->endTransaction(); // release the SPI bus
 23ef952:	6860      	ldr	r0, [r4, #4]
 23ef954:	f009 ff80 	bl	23f9858 <_ZN8SPIClass14endTransactionEv>
 23ef958:	e7c5      	b.n	23ef8e6 <_ZN15Adafruit_BME2806read16Eh+0x4a>
 23ef95a:	bf00      	nop
 23ef95c:	023fea34 	.word	0x023fea34
 23ef960:	0007a120 	.word	0x0007a120

023ef964 <_ZN15Adafruit_BME2809read16_LEEh>:
/*!
 *   @brief  Reads a signed 16 bit little endian value over I2C or SPI
 *   @param reg the register address to read from
 *   @returns the 16 bit data value read from the device
 */
uint16_t Adafruit_BME280::read16_LE(byte reg) {
 23ef964:	b508      	push	{r3, lr}
  uint16_t temp = read16(reg);
 23ef966:	f7ff ff99 	bl	23ef89c <_ZN15Adafruit_BME2806read16Eh>
  return (temp >> 8) | (temp << 8);
 23ef96a:	ba40      	rev16	r0, r0
}
 23ef96c:	b280      	uxth	r0, r0
 23ef96e:	bd08      	pop	{r3, pc}

023ef970 <_ZN15Adafruit_BME2806read24Eh>:
/*!
 *   @brief  Reads a 24 bit value over I2C
 *   @param reg the register address to read from
 *   @returns the 24 bit data value read from the device
 */
uint32_t Adafruit_BME280::read24(byte reg) {
 23ef970:	b530      	push	{r4, r5, lr}
  uint32_t value;

  if (_cs == -1) {
 23ef972:	f990 3020 	ldrsb.w	r3, [r0, #32]
uint32_t Adafruit_BME280::read24(byte reg) {
 23ef976:	4604      	mov	r4, r0
  if (_cs == -1) {
 23ef978:	3301      	adds	r3, #1
uint32_t Adafruit_BME280::read24(byte reg) {
 23ef97a:	460d      	mov	r5, r1
 23ef97c:	b085      	sub	sp, #20
  if (_cs == -1) {
 23ef97e:	d123      	bne.n	23ef9c8 <_ZN15Adafruit_BME2806read24Eh+0x58>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23ef980:	7d01      	ldrb	r1, [r0, #20]
 23ef982:	6800      	ldr	r0, [r0, #0]
 23ef984:	f009 fa98 	bl	23f8eb8 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23ef988:	6820      	ldr	r0, [r4, #0]
 23ef98a:	4629      	mov	r1, r5
 23ef98c:	6803      	ldr	r3, [r0, #0]
 23ef98e:	689b      	ldr	r3, [r3, #8]
 23ef990:	4798      	blx	r3
    _wire->endTransmission();
 23ef992:	6820      	ldr	r0, [r4, #0]
 23ef994:	f009 fa9b 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)3);
 23ef998:	2203      	movs	r2, #3
 23ef99a:	7d21      	ldrb	r1, [r4, #20]
 23ef99c:	6820      	ldr	r0, [r4, #0]
 23ef99e:	f009 fa88 	bl	23f8eb2 <_ZN7TwoWire11requestFromEhj>

    value = _wire->read();
 23ef9a2:	6820      	ldr	r0, [r4, #0]
 23ef9a4:	6803      	ldr	r3, [r0, #0]
 23ef9a6:	695b      	ldr	r3, [r3, #20]
 23ef9a8:	4798      	blx	r3
    value <<= 8;
 23ef9aa:	0205      	lsls	r5, r0, #8
    value |= _wire->read();
 23ef9ac:	6820      	ldr	r0, [r4, #0]
 23ef9ae:	6803      	ldr	r3, [r0, #0]
 23ef9b0:	695b      	ldr	r3, [r3, #20]
 23ef9b2:	4798      	blx	r3
 23ef9b4:	4328      	orrs	r0, r5
    value <<= 8;
 23ef9b6:	0205      	lsls	r5, r0, #8
    value |= _wire->read();
 23ef9b8:	6820      	ldr	r0, [r4, #0]
 23ef9ba:	6803      	ldr	r3, [r0, #0]
 23ef9bc:	695b      	ldr	r3, [r3, #20]
 23ef9be:	4798      	blx	r3
 23ef9c0:	4305      	orrs	r5, r0
    if (_sck == -1)
      _spi->endTransaction(); // release the SPI bus
  }

  return value;
}
 23ef9c2:	4628      	mov	r0, r5
 23ef9c4:	b005      	add	sp, #20
 23ef9c6:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23ef9c8:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
 23ef9cc:	3301      	adds	r3, #1
 23ef9ce:	d10d      	bne.n	23ef9ec <_ZN15Adafruit_BME2806read24Eh+0x7c>
 23ef9d0:	4b1b      	ldr	r3, [pc, #108]	; (23efa40 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23ef9d2:	4669      	mov	r1, sp
 23ef9d4:	9300      	str	r3, [sp, #0]
 23ef9d6:	2300      	movs	r3, #0
 23ef9d8:	f88d 3004 	strb.w	r3, [sp, #4]
 23ef9dc:	4b19      	ldr	r3, [pc, #100]	; (23efa44 <_ZN15Adafruit_BME2806read24Eh+0xd4>)
 23ef9de:	6840      	ldr	r0, [r0, #4]
 23ef9e0:	9302      	str	r3, [sp, #8]
 23ef9e2:	2301      	movs	r3, #1
 23ef9e4:	f8ad 300c 	strh.w	r3, [sp, #12]
 23ef9e8:	f009 ff50 	bl	23f988c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23ef9ec:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23ef9f0:	2100      	movs	r1, #0
 23ef9f2:	b280      	uxth	r0, r0
 23ef9f4:	f00a fbfd 	bl	23fa1f2 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23ef9f8:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23ef9fc:	4620      	mov	r0, r4
 23ef9fe:	f7ff fe1e 	bl	23ef63e <_ZN15Adafruit_BME2807spixferEh>
    value = spixfer(0);
 23efa02:	2100      	movs	r1, #0
 23efa04:	4620      	mov	r0, r4
 23efa06:	f7ff fe1a 	bl	23ef63e <_ZN15Adafruit_BME2807spixferEh>
    value |= spixfer(0);
 23efa0a:	2100      	movs	r1, #0
    value <<= 8;
 23efa0c:	0205      	lsls	r5, r0, #8
    value |= spixfer(0);
 23efa0e:	4620      	mov	r0, r4
 23efa10:	f7ff fe15 	bl	23ef63e <_ZN15Adafruit_BME2807spixferEh>
 23efa14:	4328      	orrs	r0, r5
    value |= spixfer(0);
 23efa16:	2100      	movs	r1, #0
    value <<= 8;
 23efa18:	0205      	lsls	r5, r0, #8
    value |= spixfer(0);
 23efa1a:	4620      	mov	r0, r4
 23efa1c:	f7ff fe0f 	bl	23ef63e <_ZN15Adafruit_BME2807spixferEh>
 23efa20:	4305      	orrs	r5, r0
    digitalWrite(_cs, HIGH);
 23efa22:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23efa26:	2101      	movs	r1, #1
 23efa28:	b280      	uxth	r0, r0
 23efa2a:	f00a fbe2 	bl	23fa1f2 <digitalWrite>
    if (_sck == -1)
 23efa2e:	f994 3023 	ldrsb.w	r3, [r4, #35]	; 0x23
 23efa32:	3301      	adds	r3, #1
 23efa34:	d1c5      	bne.n	23ef9c2 <_ZN15Adafruit_BME2806read24Eh+0x52>
      _spi->endTransaction(); // release the SPI bus
 23efa36:	6860      	ldr	r0, [r4, #4]
 23efa38:	f009 ff0e 	bl	23f9858 <_ZN8SPIClass14endTransactionEv>
  return value;
 23efa3c:	e7c1      	b.n	23ef9c2 <_ZN15Adafruit_BME2806read24Eh+0x52>
 23efa3e:	bf00      	nop
 23efa40:	023fea34 	.word	0x023fea34
 23efa44:	0007a120 	.word	0x0007a120

023efa48 <_ZN15Adafruit_BME28016readCoefficientsEv>:
}

/*!
 *   @brief  Reads the factory-set coefficients
 */
void Adafruit_BME280::readCoefficients(void) {
 23efa48:	b538      	push	{r3, r4, r5, lr}
  _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 23efa4a:	2188      	movs	r1, #136	; 0x88
void Adafruit_BME280::readCoefficients(void) {
 23efa4c:	4604      	mov	r4, r0
  _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 23efa4e:	f7ff ff89 	bl	23ef964 <_ZN15Adafruit_BME2809read16_LEEh>
  return (int16_t)read16_LE(reg);
 23efa52:	218a      	movs	r1, #138	; 0x8a
  _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 23efa54:	8520      	strh	r0, [r4, #40]	; 0x28
  return (int16_t)read16_LE(reg);
 23efa56:	4620      	mov	r0, r4
 23efa58:	f7ff ff84 	bl	23ef964 <_ZN15Adafruit_BME2809read16_LEEh>
 23efa5c:	218c      	movs	r1, #140	; 0x8c
  _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
 23efa5e:	8560      	strh	r0, [r4, #42]	; 0x2a
  return (int16_t)read16_LE(reg);
 23efa60:	4620      	mov	r0, r4
 23efa62:	f7ff ff7f 	bl	23ef964 <_ZN15Adafruit_BME2809read16_LEEh>
  _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

  _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 23efa66:	218e      	movs	r1, #142	; 0x8e
  _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
 23efa68:	85a0      	strh	r0, [r4, #44]	; 0x2c
  _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 23efa6a:	4620      	mov	r0, r4
 23efa6c:	f7ff ff7a 	bl	23ef964 <_ZN15Adafruit_BME2809read16_LEEh>
  return (int16_t)read16_LE(reg);
 23efa70:	2190      	movs	r1, #144	; 0x90
  _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 23efa72:	85e0      	strh	r0, [r4, #46]	; 0x2e
  return (int16_t)read16_LE(reg);
 23efa74:	4620      	mov	r0, r4
 23efa76:	f7ff ff75 	bl	23ef964 <_ZN15Adafruit_BME2809read16_LEEh>
 23efa7a:	2192      	movs	r1, #146	; 0x92
  _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
 23efa7c:	8620      	strh	r0, [r4, #48]	; 0x30
  return (int16_t)read16_LE(reg);
 23efa7e:	4620      	mov	r0, r4
 23efa80:	f7ff ff70 	bl	23ef964 <_ZN15Adafruit_BME2809read16_LEEh>
 23efa84:	2194      	movs	r1, #148	; 0x94
  _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
 23efa86:	8660      	strh	r0, [r4, #50]	; 0x32
  return (int16_t)read16_LE(reg);
 23efa88:	4620      	mov	r0, r4
 23efa8a:	f7ff ff6b 	bl	23ef964 <_ZN15Adafruit_BME2809read16_LEEh>
 23efa8e:	2196      	movs	r1, #150	; 0x96
  _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
 23efa90:	86a0      	strh	r0, [r4, #52]	; 0x34
  return (int16_t)read16_LE(reg);
 23efa92:	4620      	mov	r0, r4
 23efa94:	f7ff ff66 	bl	23ef964 <_ZN15Adafruit_BME2809read16_LEEh>
 23efa98:	2198      	movs	r1, #152	; 0x98
  _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
 23efa9a:	86e0      	strh	r0, [r4, #54]	; 0x36
  return (int16_t)read16_LE(reg);
 23efa9c:	4620      	mov	r0, r4
 23efa9e:	f7ff ff61 	bl	23ef964 <_ZN15Adafruit_BME2809read16_LEEh>
 23efaa2:	219a      	movs	r1, #154	; 0x9a
  _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
 23efaa4:	8720      	strh	r0, [r4, #56]	; 0x38
  return (int16_t)read16_LE(reg);
 23efaa6:	4620      	mov	r0, r4
 23efaa8:	f7ff ff5c 	bl	23ef964 <_ZN15Adafruit_BME2809read16_LEEh>
 23efaac:	219c      	movs	r1, #156	; 0x9c
  _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
 23efaae:	8760      	strh	r0, [r4, #58]	; 0x3a
  return (int16_t)read16_LE(reg);
 23efab0:	4620      	mov	r0, r4
 23efab2:	f7ff ff57 	bl	23ef964 <_ZN15Adafruit_BME2809read16_LEEh>
 23efab6:	219e      	movs	r1, #158	; 0x9e
  _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
 23efab8:	87a0      	strh	r0, [r4, #60]	; 0x3c
  return (int16_t)read16_LE(reg);
 23efaba:	4620      	mov	r0, r4
 23efabc:	f7ff ff52 	bl	23ef964 <_ZN15Adafruit_BME2809read16_LEEh>
  _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

  _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 23efac0:	21a1      	movs	r1, #161	; 0xa1
  _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
 23efac2:	87e0      	strh	r0, [r4, #62]	; 0x3e
  _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 23efac4:	4620      	mov	r0, r4
 23efac6:	f7ff fe93 	bl	23ef7f0 <_ZN15Adafruit_BME2805read8Eh>
  return (int16_t)read16_LE(reg);
 23efaca:	21e1      	movs	r1, #225	; 0xe1
  _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 23efacc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return (int16_t)read16_LE(reg);
 23efad0:	4620      	mov	r0, r4
 23efad2:	f7ff ff47 	bl	23ef964 <_ZN15Adafruit_BME2809read16_LEEh>
  _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
  _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 23efad6:	21e3      	movs	r1, #227	; 0xe3
  _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
 23efad8:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
  _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 23efadc:	4620      	mov	r0, r4
 23efade:	f7ff fe87 	bl	23ef7f0 <_ZN15Adafruit_BME2805read8Eh>
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23efae2:	21e4      	movs	r1, #228	; 0xe4
  _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 23efae4:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23efae8:	4620      	mov	r0, r4
 23efaea:	f7ff fe81 	bl	23ef7f0 <_ZN15Adafruit_BME2805read8Eh>
                         (read8(BME280_REGISTER_DIG_H4 + 1) & 0xF);
 23efaee:	21e5      	movs	r1, #229	; 0xe5
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23efaf0:	4605      	mov	r5, r0
                         (read8(BME280_REGISTER_DIG_H4 + 1) & 0xF);
 23efaf2:	4620      	mov	r0, r4
 23efaf4:	f7ff fe7c 	bl	23ef7f0 <_ZN15Adafruit_BME2805read8Eh>
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23efaf8:	b26d      	sxtb	r5, r5
                         (read8(BME280_REGISTER_DIG_H4 + 1) & 0xF);
 23efafa:	f000 000f 	and.w	r0, r0, #15
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23efafe:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
  _bme280_calib.dig_H5 = ((int8_t)read8(BME280_REGISTER_DIG_H5 + 1) << 4) |
 23efb02:	21e6      	movs	r1, #230	; 0xe6
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23efb04:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
  _bme280_calib.dig_H5 = ((int8_t)read8(BME280_REGISTER_DIG_H5 + 1) << 4) |
 23efb08:	4620      	mov	r0, r4
 23efb0a:	f7ff fe71 	bl	23ef7f0 <_ZN15Adafruit_BME2805read8Eh>
                         (read8(BME280_REGISTER_DIG_H5) >> 4);
 23efb0e:	21e5      	movs	r1, #229	; 0xe5
  _bme280_calib.dig_H5 = ((int8_t)read8(BME280_REGISTER_DIG_H5 + 1) << 4) |
 23efb10:	4605      	mov	r5, r0
                         (read8(BME280_REGISTER_DIG_H5) >> 4);
 23efb12:	4620      	mov	r0, r4
 23efb14:	f7ff fe6c 	bl	23ef7f0 <_ZN15Adafruit_BME2805read8Eh>
  _bme280_calib.dig_H5 = ((int8_t)read8(BME280_REGISTER_DIG_H5 + 1) << 4) |
 23efb18:	b26d      	sxtb	r5, r5
                         (read8(BME280_REGISTER_DIG_H5) >> 4);
 23efb1a:	f3c0 1007 	ubfx	r0, r0, #4, #8
  _bme280_calib.dig_H5 = ((int8_t)read8(BME280_REGISTER_DIG_H5 + 1) << 4) |
 23efb1e:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
 23efb22:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
  _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
 23efb26:	21e7      	movs	r1, #231	; 0xe7
 23efb28:	4620      	mov	r0, r4
 23efb2a:	f7ff fe61 	bl	23ef7f0 <_ZN15Adafruit_BME2805read8Eh>
 23efb2e:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
}
 23efb32:	bd38      	pop	{r3, r4, r5, pc}

023efb34 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
/*!
 *   @brief return true if chip is busy reading cal data
 *   @returns true if reading calibration, false otherwise
 */
bool Adafruit_BME280::isReadingCalibration(void) {
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
 23efb34:	21f3      	movs	r1, #243	; 0xf3
bool Adafruit_BME280::isReadingCalibration(void) {
 23efb36:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
 23efb38:	f7ff fe5a 	bl	23ef7f0 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
 23efb3c:	f000 0001 	and.w	r0, r0, #1
 23efb40:	bd08      	pop	{r3, pc}

023efb42 <_ZN15Adafruit_BME2804initEv>:
bool Adafruit_BME280::init() {
 23efb42:	b530      	push	{r4, r5, lr}
 23efb44:	4604      	mov	r4, r0
  if (_cs == -1) {
 23efb46:	f990 0020 	ldrsb.w	r0, [r0, #32]
bool Adafruit_BME280::init() {
 23efb4a:	b085      	sub	sp, #20
  if (_cs == -1) {
 23efb4c:	1c42      	adds	r2, r0, #1
 23efb4e:	d129      	bne.n	23efba4 <_ZN15Adafruit_BME2804initEv+0x62>
    _wire->begin();
 23efb50:	6820      	ldr	r0, [r4, #0]
 23efb52:	f009 f987 	bl	23f8e64 <_ZN7TwoWire5beginEv>
  _sensorID = read8(BME280_REGISTER_CHIPID);
 23efb56:	21d0      	movs	r1, #208	; 0xd0
 23efb58:	4620      	mov	r0, r4
 23efb5a:	f7ff fe49 	bl	23ef7f0 <_ZN15Adafruit_BME2805read8Eh>
  if (_sensorID != 0x60)
 23efb5e:	2860      	cmp	r0, #96	; 0x60
  _sensorID = read8(BME280_REGISTER_CHIPID);
 23efb60:	61a0      	str	r0, [r4, #24]
  if (_sensorID != 0x60)
 23efb62:	d142      	bne.n	23efbea <_ZN15Adafruit_BME2804initEv+0xa8>
  write8(BME280_REGISTER_SOFTRESET, 0xB6);
 23efb64:	22b6      	movs	r2, #182	; 0xb6
 23efb66:	21e0      	movs	r1, #224	; 0xe0
 23efb68:	4620      	mov	r0, r4
 23efb6a:	f7ff fd9d 	bl	23ef6a8 <_ZN15Adafruit_BME2806write8Ehh>
  delay(10);
 23efb6e:	200a      	movs	r0, #10
 23efb70:	f008 fba8 	bl	23f82c4 <delay>
  while (isReadingCalibration())
 23efb74:	4620      	mov	r0, r4
 23efb76:	f7ff ffdd 	bl	23efb34 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
 23efb7a:	4605      	mov	r5, r0
 23efb7c:	2800      	cmp	r0, #0
 23efb7e:	d1f6      	bne.n	23efb6e <_ZN15Adafruit_BME2804initEv+0x2c>
  readCoefficients(); // read trimming parameters, see DS 4.2.2
 23efb80:	4620      	mov	r0, r4
 23efb82:	f7ff ff61 	bl	23efa48 <_ZN15Adafruit_BME28016readCoefficientsEv>
  setSampling(); // use defaults
 23efb86:	2305      	movs	r3, #5
 23efb88:	2103      	movs	r1, #3
 23efb8a:	461a      	mov	r2, r3
 23efb8c:	4620      	mov	r0, r4
 23efb8e:	9300      	str	r3, [sp, #0]
 23efb90:	e9cd 5501 	strd	r5, r5, [sp, #4]
 23efb94:	f7ff fddc 	bl	23ef750 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
  delay(100);
 23efb98:	2064      	movs	r0, #100	; 0x64
 23efb9a:	f008 fb93 	bl	23f82c4 <delay>
  return true;
 23efb9e:	2001      	movs	r0, #1
}
 23efba0:	b005      	add	sp, #20
 23efba2:	bd30      	pop	{r4, r5, pc}
    digitalWrite(_cs, HIGH);
 23efba4:	2101      	movs	r1, #1
 23efba6:	b280      	uxth	r0, r0
 23efba8:	f00a fb23 	bl	23fa1f2 <digitalWrite>
    pinMode(_cs, OUTPUT);
 23efbac:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23efbb0:	2101      	movs	r1, #1
 23efbb2:	b280      	uxth	r0, r0
 23efbb4:	f00a fb0c 	bl	23fa1d0 <pinMode>
    if (_sck == -1) {
 23efbb8:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
 23efbbc:	1c43      	adds	r3, r0, #1
 23efbbe:	d103      	bne.n	23efbc8 <_ZN15Adafruit_BME2804initEv+0x86>
      _spi->begin();
 23efbc0:	6860      	ldr	r0, [r4, #4]
 23efbc2:	f009 fe0f 	bl	23f97e4 <_ZN8SPIClass5beginEv>
 23efbc6:	e7c6      	b.n	23efb56 <_ZN15Adafruit_BME2804initEv+0x14>
      pinMode(_sck, OUTPUT);
 23efbc8:	2101      	movs	r1, #1
 23efbca:	b280      	uxth	r0, r0
 23efbcc:	f00a fb00 	bl	23fa1d0 <pinMode>
      pinMode(_mosi, OUTPUT);
 23efbd0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 23efbd4:	2101      	movs	r1, #1
 23efbd6:	b280      	uxth	r0, r0
 23efbd8:	f00a fafa 	bl	23fa1d0 <pinMode>
      pinMode(_miso, INPUT);
 23efbdc:	f994 0022 	ldrsb.w	r0, [r4, #34]	; 0x22
 23efbe0:	2100      	movs	r1, #0
 23efbe2:	b280      	uxth	r0, r0
 23efbe4:	f00a faf4 	bl	23fa1d0 <pinMode>
 23efbe8:	e7b5      	b.n	23efb56 <_ZN15Adafruit_BME2804initEv+0x14>
    return false;
 23efbea:	2000      	movs	r0, #0
 23efbec:	e7d8      	b.n	23efba0 <_ZN15Adafruit_BME2804initEv+0x5e>

023efbee <_ZN15Adafruit_BME2805beginEhP7TwoWire>:
  _i2caddr = addr;
 23efbee:	7501      	strb	r1, [r0, #20]
  _wire = theWire;
 23efbf0:	6002      	str	r2, [r0, #0]
  status = init();
 23efbf2:	f7ff bfa6 	b.w	23efb42 <_ZN15Adafruit_BME2804initEv>
	...

023efbf8 <_ZN15Adafruit_BME28015readTemperatureEv>:

/*!
 *   @brief  Returns the temperature from the sensor
 *   @returns the temperature read from the device
 */
float Adafruit_BME280::readTemperature(void) {
 23efbf8:	b538      	push	{r3, r4, r5, lr}
  int32_t var1, var2;

  int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
 23efbfa:	21fa      	movs	r1, #250	; 0xfa
float Adafruit_BME280::readTemperature(void) {
 23efbfc:	4604      	mov	r4, r0
  int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
 23efbfe:	f7ff feb7 	bl	23ef970 <_ZN15Adafruit_BME2806read24Eh>
  if (adc_T == 0x800000) // value in case temp measurement was disabled
 23efc02:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 23efc06:	d021      	beq.n	23efc4c <_ZN15Adafruit_BME28015readTemperatureEv+0x54>
    return NAN;
  adc_T >>= 4;

  var1 = ((((adc_T >> 3) - ((int32_t)_bme280_calib.dig_T1 << 1))) *
 23efc08:	8d21      	ldrh	r1, [r4, #40]	; 0x28
         14;

  t_fine = var1 + var2 + t_fine_adjust;

  float T = (t_fine * 5 + 128) >> 8;
  return T / 100;
 23efc0a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 23efc54 <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
  var2 = (((((adc_T >> 4) - ((int32_t)_bme280_calib.dig_T1)) *
 23efc0e:	ebc1 2220 	rsb	r2, r1, r0, asr #8
  var1 = ((((adc_T >> 3) - ((int32_t)_bme280_calib.dig_T1 << 1))) *
 23efc12:	004d      	lsls	r5, r1, #1
          ((int32_t)_bme280_calib.dig_T2)) >>
 23efc14:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
  var1 = ((((adc_T >> 3) - ((int32_t)_bme280_calib.dig_T1 << 1))) *
 23efc18:	ebc5 13e0 	rsb	r3, r5, r0, asr #7
 23efc1c:	4359      	muls	r1, r3
  var2 = (((((adc_T >> 4) - ((int32_t)_bme280_calib.dig_T1)) *
 23efc1e:	fb02 f302 	mul.w	r3, r2, r2
          ((int32_t)_bme280_calib.dig_T3)) >>
 23efc22:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
            ((adc_T >> 4) - ((int32_t)_bme280_calib.dig_T1))) >>
 23efc26:	131b      	asrs	r3, r3, #12
           12) *
 23efc28:	4353      	muls	r3, r2
  t_fine = var1 + var2 + t_fine_adjust;
 23efc2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
  var2 = (((((adc_T >> 4) - ((int32_t)_bme280_calib.dig_T1)) *
 23efc2c:	139b      	asrs	r3, r3, #14
  t_fine = var1 + var2 + t_fine_adjust;
 23efc2e:	eb03 23e1 	add.w	r3, r3, r1, asr #11
 23efc32:	4413      	add	r3, r2
 23efc34:	61e3      	str	r3, [r4, #28]
  float T = (t_fine * 5 + 128) >> 8;
 23efc36:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 23efc3a:	3380      	adds	r3, #128	; 0x80
 23efc3c:	121b      	asrs	r3, r3, #8
 23efc3e:	ee07 3a90 	vmov	s15, r3
 23efc42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return T / 100;
 23efc46:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
 23efc4a:	bd38      	pop	{r3, r4, r5, pc}
    return NAN;
 23efc4c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23efc58 <_ZN15Adafruit_BME28015readTemperatureEv+0x60>
 23efc50:	e7fb      	b.n	23efc4a <_ZN15Adafruit_BME28015readTemperatureEv+0x52>
 23efc52:	bf00      	nop
 23efc54:	42c80000 	.word	0x42c80000
 23efc58:	7fc00000 	.word	0x7fc00000

023efc5c <_ZN15Adafruit_BME28012readPressureEv>:

/*!
 *   @brief  Returns the pressure from the sensor
 *   @returns the pressure value (in Pascal) read from the device
 */
float Adafruit_BME280::readPressure(void) {
 23efc5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23efc60:	4605      	mov	r5, r0
  int64_t var1, var2, p;

  readTemperature(); // must be done first to get t_fine
 23efc62:	f7ff ffc9 	bl	23efbf8 <_ZN15Adafruit_BME28015readTemperatureEv>

  int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
 23efc66:	21f7      	movs	r1, #247	; 0xf7
 23efc68:	4628      	mov	r0, r5
 23efc6a:	f7ff fe81 	bl	23ef970 <_ZN15Adafruit_BME2806read24Eh>
  if (adc_P == 0x800000) // value in case pressure measurement was disabled
 23efc6e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 23efc72:	f000 80b6 	beq.w	23efde2 <_ZN15Adafruit_BME28012readPressureEv+0x186>
    return NAN;
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
 23efc76:	69e9      	ldr	r1, [r5, #28]
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
  var2 = var2 + ((var1 * (int64_t)_bme280_calib.dig_P5) << 17);
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4) << 35);
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3) >> 8) +
         ((var1 * (int64_t)_bme280_calib.dig_P2) << 12);
 23efc78:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
  var1 = ((int64_t)t_fine) - 128000;
 23efc7c:	ea4f 7ee1 	mov.w	lr, r1, asr #31
 23efc80:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
 23efc84:	f14e 3eff 	adc.w	lr, lr, #4294967295	; 0xffffffff
         ((var1 * (int64_t)_bme280_calib.dig_P2) << 12);
 23efc88:	fb03 f20e 	mul.w	r2, r3, lr
 23efc8c:	17dc      	asrs	r4, r3, #31
 23efc8e:	fb01 2204 	mla	r2, r1, r4, r2
 23efc92:	fba3 3401 	umull	r3, r4, r3, r1
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 23efc96:	fba1 7801 	umull	r7, r8, r1, r1
 23efc9a:	fb01 f60e 	mul.w	r6, r1, lr
         ((var1 * (int64_t)_bme280_calib.dig_P2) << 12);
 23efc9e:	4422      	add	r2, r4
 23efca0:	0312      	lsls	r2, r2, #12
 23efca2:	031c      	lsls	r4, r3, #12
 23efca4:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3) >> 8) +
 23efca8:	f9b5 3032 	ldrsh.w	r3, [r5, #50]	; 0x32
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 23efcac:	eb08 0846 	add.w	r8, r8, r6, lsl #1
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3) >> 8) +
 23efcb0:	fb03 f608 	mul.w	r6, r3, r8
 23efcb4:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 23efcb8:	fb07 660c 	mla	r6, r7, ip, r6
 23efcbc:	fba3 3c07 	umull	r3, ip, r3, r7
 23efcc0:	4466      	add	r6, ip
 23efcc2:	0a1b      	lsrs	r3, r3, #8
 23efcc4:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 23efcc8:	191b      	adds	r3, r3, r4
 23efcca:	eb42 2226 	adc.w	r2, r2, r6, asr #8
  var1 =
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bme280_calib.dig_P1) >> 33;
 23efcce:	8dee      	ldrh	r6, [r5, #46]	; 0x2e
 23efcd0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 23efcd4:	fba3 3406 	umull	r3, r4, r3, r6
 23efcd8:	fb06 4402 	mla	r4, r6, r2, r4
  var1 =
 23efcdc:	17e3      	asrs	r3, r4, #31
 23efcde:	1062      	asrs	r2, r4, #1

  if (var1 == 0) {
 23efce0:	ea53 0464 	orrs.w	r4, r3, r4, asr #1
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bme280_calib.dig_P1) >> 33;
 23efce4:	f04f 0c00 	mov.w	ip, #0
  if (var1 == 0) {
 23efce8:	d07e      	beq.n	23efde8 <_ZN15Adafruit_BME28012readPressureEv+0x18c>
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 23efcea:	f9b5 4038 	ldrsh.w	r4, [r5, #56]	; 0x38
  adc_P >>= 4;
 23efcee:	1100      	asrs	r0, r0, #4
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 23efcf0:	fb04 f608 	mul.w	r6, r4, r8
 23efcf4:	ea4f 79e4 	mov.w	r9, r4, asr #31
 23efcf8:	fb07 6609 	mla	r6, r7, r9, r6
 23efcfc:	fba4 4707 	umull	r4, r7, r4, r7
 23efd00:	443e      	add	r6, r7
  var2 = var2 + ((var1 * (int64_t)_bme280_calib.dig_P5) << 17);
 23efd02:	f9b5 7036 	ldrsh.w	r7, [r5, #54]	; 0x36
 23efd06:	fb07 fe0e 	mul.w	lr, r7, lr
 23efd0a:	ea4f 78e7 	mov.w	r8, r7, asr #31
 23efd0e:	fb01 ee08 	mla	lr, r1, r8, lr
 23efd12:	fba7 7101 	umull	r7, r1, r7, r1
 23efd16:	4471      	add	r1, lr
 23efd18:	0449      	lsls	r1, r1, #17
 23efd1a:	ea41 31d7 	orr.w	r1, r1, r7, lsr #15
 23efd1e:	047f      	lsls	r7, r7, #17
 23efd20:	193f      	adds	r7, r7, r4
 23efd22:	eb46 0601 	adc.w	r6, r6, r1
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4) << 35);
 23efd26:	f9b5 1034 	ldrsh.w	r1, [r5, #52]	; 0x34
    return 0; // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
 23efd2a:	f5c0 1480 	rsb	r4, r0, #1048576	; 0x100000
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4) << 35);
 23efd2e:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
  p = (((p << 31) - var2) * 3125) / var1;
 23efd32:	f640 4135 	movw	r1, #3125	; 0xc35
 23efd36:	f004 4000 	and.w	r0, r4, #2147483648	; 0x80000000
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4) << 35);
 23efd3a:	eb1c 0707 	adds.w	r7, ip, r7
  p = (((p << 31) - var2) * 3125) / var1;
 23efd3e:	ea40 0054 	orr.w	r0, r0, r4, lsr #1
 23efd42:	07e4      	lsls	r4, r4, #31
 23efd44:	1be4      	subs	r4, r4, r7
 23efd46:	eb60 0606 	sbc.w	r6, r0, r6
 23efd4a:	fba4 0401 	umull	r0, r4, r4, r1
 23efd4e:	fb01 4106 	mla	r1, r1, r6, r4
 23efd52:	f7f5 ff67 	bl	23e5c24 <__aeabi_ldivmod>
 23efd56:	4686      	mov	lr, r0
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23efd58:	f9b5 203e 	ldrsh.w	r2, [r5, #62]	; 0x3e
 23efd5c:	ea4f 3c61 	mov.w	ip, r1, asr #13
 23efd60:	fb02 f70c 	mul.w	r7, r2, ip
 23efd64:	0b43      	lsrs	r3, r0, #13
 23efd66:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
 23efd6a:	17d4      	asrs	r4, r2, #31
 23efd6c:	fb03 7704 	mla	r7, r3, r4, r7
 23efd70:	fba2 2403 	umull	r2, r4, r2, r3
 23efd74:	443c      	add	r4, r7
 23efd76:	fb02 f70c 	mul.w	r7, r2, ip
 23efd7a:	fb03 7704 	mla	r7, r3, r4, r7
 23efd7e:	fba2 2303 	umull	r2, r3, r2, r3
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 23efd82:	f9b5 603c 	ldrsh.w	r6, [r5, #60]	; 0x3c
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23efd86:	441f      	add	r7, r3
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 23efd88:	fb06 f401 	mul.w	r4, r6, r1
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23efd8c:	0e53      	lsrs	r3, r2, #25
 23efd8e:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7

  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7) << 4);
 23efd92:	181b      	adds	r3, r3, r0
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 23efd94:	ea4f 72e6 	mov.w	r2, r6, asr #31
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7) << 4);
 23efd98:	eb41 6767 	adc.w	r7, r1, r7, asr #25
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 23efd9c:	fb02 4100 	mla	r1, r2, r0, r4
 23efda0:	fba6 060e 	umull	r0, r6, r6, lr
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7) << 4);
 23efda4:	f9b5 403a 	ldrsh.w	r4, [r5, #58]	; 0x3a
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 23efda8:	4431      	add	r1, r6
 23efdaa:	0cc0      	lsrs	r0, r0, #19
 23efdac:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7) << 4);
 23efdb0:	1818      	adds	r0, r3, r0
 23efdb2:	ea4f 75e4 	mov.w	r5, r4, asr #31
 23efdb6:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
 23efdba:	0a00      	lsrs	r0, r0, #8
 23efdbc:	012d      	lsls	r5, r5, #4
 23efdbe:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 23efdc2:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
 23efdc6:	0124      	lsls	r4, r4, #4
 23efdc8:	1820      	adds	r0, r4, r0
  return (float)p / 256;
 23efdca:	eb45 2121 	adc.w	r1, r5, r1, asr #8
 23efdce:	f7f5 feeb 	bl	23e5ba8 <__aeabi_l2f>
 23efdd2:	ed9f 0a07 	vldr	s0, [pc, #28]	; 23efdf0 <_ZN15Adafruit_BME28012readPressureEv+0x194>
 23efdd6:	ee07 0a90 	vmov	s15, r0
 23efdda:	ee27 0a80 	vmul.f32	s0, s15, s0
}
 23efdde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NAN;
 23efde2:	ed9f 0a04 	vldr	s0, [pc, #16]	; 23efdf4 <_ZN15Adafruit_BME28012readPressureEv+0x198>
 23efde6:	e7fa      	b.n	23efdde <_ZN15Adafruit_BME28012readPressureEv+0x182>
    return 0; // avoid exception caused by division by zero
 23efde8:	ed9f 0a03 	vldr	s0, [pc, #12]	; 23efdf8 <_ZN15Adafruit_BME28012readPressureEv+0x19c>
 23efdec:	e7f7      	b.n	23efdde <_ZN15Adafruit_BME28012readPressureEv+0x182>
 23efdee:	bf00      	nop
 23efdf0:	3b800000 	.word	0x3b800000
 23efdf4:	7fc00000 	.word	0x7fc00000
 23efdf8:	00000000 	.word	0x00000000

023efdfc <_ZN15Adafruit_BME28012readHumidityEv>:

/*!
 *  @brief  Returns the humidity from the sensor
 *  @returns the humidity value read from the device
 */
float Adafruit_BME280::readHumidity(void) {
 23efdfc:	b538      	push	{r3, r4, r5, lr}
 23efdfe:	4604      	mov	r4, r0
  readTemperature(); // must be done first to get t_fine
 23efe00:	f7ff fefa 	bl	23efbf8 <_ZN15Adafruit_BME28015readTemperatureEv>

  int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
 23efe04:	21fd      	movs	r1, #253	; 0xfd
 23efe06:	4620      	mov	r0, r4
 23efe08:	f7ff fd48 	bl	23ef89c <_ZN15Adafruit_BME2806read16Eh>
  if (adc_H == 0x8000) // value in case humidity measurement was disabled
 23efe0c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 23efe10:	d038      	beq.n	23efe84 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    return NAN;

  int32_t v_x1_u32r;

  v_x1_u32r = (t_fine - ((int32_t)76800));
 23efe12:	69e1      	ldr	r1, [r4, #28]

  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                  (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) +
 23efe14:	f9b4 2048 	ldrsh.w	r2, [r4, #72]	; 0x48
  v_x1_u32r = (t_fine - ((int32_t)76800));
 23efe18:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
 23efe1c:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
 23efe20:	0509      	lsls	r1, r1, #20
 23efe22:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
 23efe26:	fb05 3312 	mls	r3, r5, r2, r3
                  (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) +
 23efe2a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
                 ((int32_t)16384)) >>
 23efe2e:	13da      	asrs	r2, r3, #15
                15) *
               (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                    (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) +
 23efe30:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
               (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
 23efe34:	f994 104a 	ldrsb.w	r1, [r4, #74]	; 0x4a
                    (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) +
 23efe38:	436b      	muls	r3, r5
               (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
 23efe3a:	4369      	muls	r1, r5
                    (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) +
 23efe3c:	12db      	asrs	r3, r3, #11
               (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
 23efe3e:	1289      	asrs	r1, r1, #10
                    (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) +
 23efe40:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
               (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
 23efe44:	434b      	muls	r3, r1
                     ((int32_t)32768))) >>
                   10) +
                  ((int32_t)2097152)) *
                     ((int32_t)_bme280_calib.dig_H2) +
 23efe46:	f9b4 1042 	ldrsh.w	r1, [r4, #66]	; 0x42
                     ((int32_t)32768))) >>
 23efe4a:	129b      	asrs	r3, r3, #10
                   10) +
 23efe4c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                  ((int32_t)2097152)) *
 23efe50:	434b      	muls	r3, r1
                     ((int32_t)_bme280_calib.dig_H2) +
 23efe52:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
                 8192) >>
 23efe56:	139b      	asrs	r3, r3, #14
  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
 23efe58:	4353      	muls	r3, r2
                14));

  v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 23efe5a:	13da      	asrs	r2, r3, #15
 23efe5c:	4352      	muls	r2, r2
                             ((int32_t)_bme280_calib.dig_H1)) >>
 23efe5e:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
  v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 23efe62:	11d2      	asrs	r2, r2, #7
 23efe64:	434a      	muls	r2, r1
 23efe66:	eba3 1322 	sub.w	r3, r3, r2, asr #4
                            4));

  v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 23efe6a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 23efe6e:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 23efe72:	bfa8      	it	ge
 23efe74:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
  float h = (v_x1_u32r >> 12);
 23efe78:	131b      	asrs	r3, r3, #12
 23efe7a:	ee00 3a10 	vmov	s0, r3
  return h / 1024.0;
 23efe7e:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
 23efe82:	bd38      	pop	{r3, r4, r5, pc}
    return NAN;
 23efe84:	ed9f 0a01 	vldr	s0, [pc, #4]	; 23efe8c <_ZN15Adafruit_BME28012readHumidityEv+0x90>
 23efe88:	e7fb      	b.n	23efe82 <_ZN15Adafruit_BME28012readHumidityEv+0x86>
 23efe8a:	bf00      	nop
 23efe8c:	7fc00000 	.word	0x7fc00000

023efe90 <_ZN24Adafruit_BMP280_PressureD1Ev>:
  int _sensorID = 280;
  Adafruit_BMP280 *_theBMP280 = NULL;
};

/** Adafruit Unified Sensor interface for pressure component of BMP280 */
class Adafruit_BMP280_Pressure : public Adafruit_Sensor {
 23efe90:	4770      	bx	lr

023efe92 <_ZN20Adafruit_BMP280_TempD1Ev>:
class Adafruit_BMP280_Temp : public Adafruit_Sensor {
 23efe92:	4770      	bx	lr

023efe94 <_ZN20Adafruit_BMP280_TempD0Ev>:
 23efe94:	b510      	push	{r4, lr}
 23efe96:	4604      	mov	r4, r0
 23efe98:	2110      	movs	r1, #16
 23efe9a:	f7f6 f8d6 	bl	23e604a <_ZdlPvj>
 23efe9e:	4620      	mov	r0, r4
 23efea0:	bd10      	pop	{r4, pc}

023efea2 <_ZN24Adafruit_BMP280_PressureD0Ev>:
class Adafruit_BMP280_Pressure : public Adafruit_Sensor {
 23efea2:	b510      	push	{r4, lr}
 23efea4:	4604      	mov	r4, r0
 23efea6:	2110      	movs	r1, #16
 23efea8:	f7f6 f8cf 	bl	23e604a <_ZdlPvj>
 23efeac:	4620      	mov	r0, r4
 23efeae:	bd10      	pop	{r4, pc}

023efeb0 <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data for the BMP280's temperature sensor
*/
/**************************************************************************/
void Adafruit_BMP280_Temp::getSensor(sensor_t *sensor) {
 23efeb0:	b538      	push	{r3, r4, r5, lr}
 23efeb2:	460c      	mov	r4, r1
 23efeb4:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 23efeb6:	2220      	movs	r2, #32
 23efeb8:	2100      	movs	r1, #0
 23efeba:	f104 0008 	add.w	r0, r4, #8
 23efebe:	f00c ffa6 	bl	23fce0e <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BMP280", sizeof(sensor->name) - 1);
 23efec2:	220b      	movs	r2, #11
 23efec4:	4620      	mov	r0, r4
 23efec6:	4908      	ldr	r1, [pc, #32]	; (23efee8 <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t+0x38>)
 23efec8:	f00d f84f 	bl	23fcf6a <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
 23efecc:	2301      	movs	r3, #1
 23efece:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
 23efed0:	68ab      	ldr	r3, [r5, #8]
 23efed2:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 23efed4:	230d      	movs	r3, #13
 23efed6:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->min_value = -40.0; /* Temperature range -40 ~ +85 C  */
 23efed8:	4b04      	ldr	r3, [pc, #16]	; (23efeec <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t+0x3c>)
 23efeda:	61e3      	str	r3, [r4, #28]
  sensor->max_value = +85.0;
 23efedc:	4b04      	ldr	r3, [pc, #16]	; (23efef0 <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t+0x40>)
 23efede:	61a3      	str	r3, [r4, #24]
  sensor->resolution = 0.01; /*  0.01 C */
 23efee0:	4b04      	ldr	r3, [pc, #16]	; (23efef4 <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t+0x44>)
 23efee2:	6223      	str	r3, [r4, #32]
}
 23efee4:	bd38      	pop	{r3, r4, r5, pc}
 23efee6:	bf00      	nop
 23efee8:	023fd4ac 	.word	0x023fd4ac
 23efeec:	c2200000 	.word	0xc2200000
 23efef0:	42aa0000 	.word	0x42aa0000
 23efef4:	3c23d70a 	.word	0x3c23d70a

023efef8 <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data for the BMP280's pressure sensor
*/
/**************************************************************************/
void Adafruit_BMP280_Pressure::getSensor(sensor_t *sensor) {
 23efef8:	b538      	push	{r3, r4, r5, lr}
 23efefa:	460c      	mov	r4, r1
 23efefc:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 23efefe:	2220      	movs	r2, #32
 23eff00:	2100      	movs	r1, #0
 23eff02:	f104 0008 	add.w	r0, r4, #8
 23eff06:	f00c ff82 	bl	23fce0e <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BMP280", sizeof(sensor->name) - 1);
 23eff0a:	220b      	movs	r2, #11
 23eff0c:	4620      	mov	r0, r4
 23eff0e:	4908      	ldr	r1, [pc, #32]	; (23eff30 <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t+0x38>)
 23eff10:	f00d f82b 	bl	23fcf6a <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
 23eff14:	2301      	movs	r3, #1
 23eff16:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
 23eff18:	68ab      	ldr	r3, [r5, #8]
 23eff1a:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_PRESSURE;
 23eff1c:	2306      	movs	r3, #6
 23eff1e:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->min_value = 300.0; /* 300 ~ 1100 hPa  */
 23eff20:	4b04      	ldr	r3, [pc, #16]	; (23eff34 <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t+0x3c>)
 23eff22:	61e3      	str	r3, [r4, #28]
  sensor->max_value = 1100.0;
 23eff24:	4b04      	ldr	r3, [pc, #16]	; (23eff38 <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t+0x40>)
 23eff26:	61a3      	str	r3, [r4, #24]
  sensor->resolution = 0.012; /* 0.12 hPa relative */
 23eff28:	4b04      	ldr	r3, [pc, #16]	; (23eff3c <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t+0x44>)
 23eff2a:	6223      	str	r3, [r4, #32]
}
 23eff2c:	bd38      	pop	{r3, r4, r5, pc}
 23eff2e:	bf00      	nop
 23eff30:	023fd4ac 	.word	0x023fd4ac
 23eff34:	43960000 	.word	0x43960000
 23eff38:	44898000 	.word	0x44898000
 23eff3c:	3c449ba6 	.word	0x3c449ba6

023eff40 <_ZN15Adafruit_BMP280C1EP7TwoWire>:
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1) {
 23eff40:	2300      	movs	r3, #0
Adafruit_BMP280::Adafruit_BMP280(TwoWire *theWire)
 23eff42:	b510      	push	{r4, lr}
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1) {
 23eff44:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23eff48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
Adafruit_BMP280::Adafruit_BMP280(TwoWire *theWire)
 23eff4c:	4604      	mov	r4, r0
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1) {
 23eff4e:	61c3      	str	r3, [r0, #28]
  _wire = theWire;
 23eff50:	6001      	str	r1, [r0, #0]
  temp_sensor = new Adafruit_BMP280_Temp(this);
 23eff52:	2010      	movs	r0, #16
 23eff54:	f7f6 f875 	bl	23e6042 <_Znwj>
 23eff58:	b128      	cbz	r0, 23eff66 <_ZN15Adafruit_BMP280C1EP7TwoWire+0x26>
  Adafruit_BMP280_Temp(Adafruit_BMP280 *parent) { _theBMP280 = parent; }
 23eff5a:	4b09      	ldr	r3, [pc, #36]	; (23eff80 <_ZN15Adafruit_BMP280C1EP7TwoWire+0x40>)
 23eff5c:	6003      	str	r3, [r0, #0]
 23eff5e:	f44f 738c 	mov.w	r3, #280	; 0x118
 23eff62:	e9c0 3402 	strd	r3, r4, [r0, #8]
 23eff66:	60a0      	str	r0, [r4, #8]
  pressure_sensor = new Adafruit_BMP280_Pressure(this);
 23eff68:	2010      	movs	r0, #16
 23eff6a:	f7f6 f86a 	bl	23e6042 <_Znwj>
 23eff6e:	b120      	cbz	r0, 23eff7a <_ZN15Adafruit_BMP280C1EP7TwoWire+0x3a>
public:
  /** @brief Create an Adafruit_Sensor compatible object for the pressure sensor
      @param parent A pointer to the BMP280 class */
  Adafruit_BMP280_Pressure(Adafruit_BMP280 *parent) { _theBMP280 = parent; }
 23eff70:	4b04      	ldr	r3, [pc, #16]	; (23eff84 <_ZN15Adafruit_BMP280C1EP7TwoWire+0x44>)
 23eff72:	6003      	str	r3, [r0, #0]
 23eff74:	2300      	movs	r3, #0
 23eff76:	e9c0 3402 	strd	r3, r4, [r0, #8]
 23eff7a:	60e0      	str	r0, [r4, #12]
}
 23eff7c:	4620      	mov	r0, r4
 23eff7e:	bd10      	pop	{r4, pc}
 23eff80:	023fec74 	.word	0x023fec74
 23eff84:	023fec90 	.word	0x023fec90

023eff88 <_ZN15Adafruit_BMP2807spixferEh>:
uint8_t Adafruit_BMP280::spixfer(uint8_t x) {
 23eff88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (_sck == -1)
 23eff8c:	f990 301f 	ldrsb.w	r3, [r0, #31]
uint8_t Adafruit_BMP280::spixfer(uint8_t x) {
 23eff90:	4604      	mov	r4, r0
  if (_sck == -1)
 23eff92:	3301      	adds	r3, #1
uint8_t Adafruit_BMP280::spixfer(uint8_t x) {
 23eff94:	460f      	mov	r7, r1
  if (_sck == -1)
 23eff96:	d104      	bne.n	23effa2 <_ZN15Adafruit_BMP2807spixferEh+0x1a>
}
 23eff98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return _spi->transfer(x);
 23eff9c:	6840      	ldr	r0, [r0, #4]
 23eff9e:	f009 bce3 	b.w	23f9968 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
 23effa2:	2500      	movs	r5, #0
  for (int i = 7; i >= 0; i--) {
 23effa4:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1 << i));
 23effa6:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
 23effaa:	f994 001f 	ldrsb.w	r0, [r4, #31]
 23effae:	2100      	movs	r1, #0
 23effb0:	b280      	uxth	r0, r0
 23effb2:	f00a f91e 	bl	23fa1f2 <digitalWrite>
    digitalWrite(_mosi, x & (1 << i));
 23effb6:	f994 001d 	ldrsb.w	r0, [r4, #29]
 23effba:	fa08 f106 	lsl.w	r1, r8, r6
 23effbe:	4039      	ands	r1, r7
 23effc0:	b280      	uxth	r0, r0
 23effc2:	f00a f916 	bl	23fa1f2 <digitalWrite>
    digitalWrite(_sck, HIGH);
 23effc6:	f994 001f 	ldrsb.w	r0, [r4, #31]
 23effca:	2101      	movs	r1, #1
 23effcc:	b280      	uxth	r0, r0
 23effce:	f00a f910 	bl	23fa1f2 <digitalWrite>
    if (digitalRead(_miso))
 23effd2:	f994 001e 	ldrsb.w	r0, [r4, #30]
    reply <<= 1;
 23effd6:	006d      	lsls	r5, r5, #1
    if (digitalRead(_miso))
 23effd8:	b280      	uxth	r0, r0
    reply <<= 1;
 23effda:	b2ed      	uxtb	r5, r5
    if (digitalRead(_miso))
 23effdc:	f00a f922 	bl	23fa224 <digitalRead>
 23effe0:	b108      	cbz	r0, 23effe6 <_ZN15Adafruit_BMP2807spixferEh+0x5e>
      reply |= 1;
 23effe2:	f045 0501 	orr.w	r5, r5, #1
  for (int i = 7; i >= 0; i--) {
 23effe6:	3e01      	subs	r6, #1
 23effe8:	d2df      	bcs.n	23effaa <_ZN15Adafruit_BMP2807spixferEh+0x22>
}
 23effea:	4628      	mov	r0, r5
 23effec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023efff0 <_ZN15Adafruit_BMP2806write8Ehh>:
void Adafruit_BMP280::write8(byte reg, byte value) {
 23efff0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (_cs == -1) {
 23efff2:	f990 301c 	ldrsb.w	r3, [r0, #28]
void Adafruit_BMP280::write8(byte reg, byte value) {
 23efff6:	4604      	mov	r4, r0
  if (_cs == -1) {
 23efff8:	3301      	adds	r3, #1
void Adafruit_BMP280::write8(byte reg, byte value) {
 23efffa:	460e      	mov	r6, r1
 23efffc:	4615      	mov	r5, r2
  if (_cs == -1) {
 23efffe:	d113      	bne.n	23f0028 <_ZN15Adafruit_BMP2806write8Ehh+0x38>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23f0000:	7c01      	ldrb	r1, [r0, #16]
 23f0002:	6800      	ldr	r0, [r0, #0]
 23f0004:	f008 ff58 	bl	23f8eb8 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23f0008:	6820      	ldr	r0, [r4, #0]
 23f000a:	4631      	mov	r1, r6
 23f000c:	6803      	ldr	r3, [r0, #0]
 23f000e:	689b      	ldr	r3, [r3, #8]
 23f0010:	4798      	blx	r3
    _wire->write((uint8_t)value);
 23f0012:	6820      	ldr	r0, [r4, #0]
 23f0014:	4629      	mov	r1, r5
 23f0016:	6803      	ldr	r3, [r0, #0]
 23f0018:	689b      	ldr	r3, [r3, #8]
 23f001a:	4798      	blx	r3
    _wire->endTransmission();
 23f001c:	6820      	ldr	r0, [r4, #0]
}
 23f001e:	b004      	add	sp, #16
 23f0020:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _wire->endTransmission();
 23f0024:	f008 bf53 	b.w	23f8ece <_ZN7TwoWire15endTransmissionEv>
    if (_sck == -1)
 23f0028:	f990 301f 	ldrsb.w	r3, [r0, #31]
 23f002c:	3301      	adds	r3, #1
 23f002e:	d10d      	bne.n	23f004c <_ZN15Adafruit_BMP2806write8Ehh+0x5c>
 23f0030:	4b17      	ldr	r3, [pc, #92]	; (23f0090 <_ZN15Adafruit_BMP2806write8Ehh+0xa0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23f0032:	4669      	mov	r1, sp
 23f0034:	9300      	str	r3, [sp, #0]
 23f0036:	2300      	movs	r3, #0
 23f0038:	f88d 3004 	strb.w	r3, [sp, #4]
 23f003c:	4b15      	ldr	r3, [pc, #84]	; (23f0094 <_ZN15Adafruit_BMP2806write8Ehh+0xa4>)
 23f003e:	6840      	ldr	r0, [r0, #4]
 23f0040:	9302      	str	r3, [sp, #8]
 23f0042:	2301      	movs	r3, #1
 23f0044:	f8ad 300c 	strh.w	r3, [sp, #12]
 23f0048:	f009 fc20 	bl	23f988c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23f004c:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23f0050:	2100      	movs	r1, #0
 23f0052:	b280      	uxth	r0, r0
 23f0054:	f00a f8cd 	bl	23fa1f2 <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
 23f0058:	f006 017f 	and.w	r1, r6, #127	; 0x7f
 23f005c:	4620      	mov	r0, r4
 23f005e:	f7ff ff93 	bl	23eff88 <_ZN15Adafruit_BMP2807spixferEh>
    spixfer(value);
 23f0062:	4629      	mov	r1, r5
 23f0064:	4620      	mov	r0, r4
 23f0066:	f7ff ff8f 	bl	23eff88 <_ZN15Adafruit_BMP2807spixferEh>
    digitalWrite(_cs, HIGH);
 23f006a:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23f006e:	2101      	movs	r1, #1
 23f0070:	b280      	uxth	r0, r0
 23f0072:	f00a f8be 	bl	23fa1f2 <digitalWrite>
    if (_sck == -1)
 23f0076:	f994 301f 	ldrsb.w	r3, [r4, #31]
 23f007a:	3301      	adds	r3, #1
 23f007c:	d105      	bne.n	23f008a <_ZN15Adafruit_BMP2806write8Ehh+0x9a>
      _spi->endTransaction(); // release the SPI bus
 23f007e:	6860      	ldr	r0, [r4, #4]
}
 23f0080:	b004      	add	sp, #16
 23f0082:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      _spi->endTransaction(); // release the SPI bus
 23f0086:	f009 bbe7 	b.w	23f9858 <_ZN8SPIClass14endTransactionEv>
}
 23f008a:	b004      	add	sp, #16
 23f008c:	bd70      	pop	{r4, r5, r6, pc}
 23f008e:	bf00      	nop
 23f0090:	023fea34 	.word	0x023fea34
 23f0094:	0007a120 	.word	0x0007a120

023f0098 <_ZN15Adafruit_BMP28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_NS_13sensor_filterENS_16standby_durationE>:
                                  standby_duration duration) {
 23f0098:	b570      	push	{r4, r5, r6, lr}
 23f009a:	4604      	mov	r4, r0
  _measReg.osrs_t = tempSampling;
 23f009c:	00db      	lsls	r3, r3, #3
 23f009e:	f002 0207 	and.w	r2, r2, #7
 23f00a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
                                  standby_duration duration) {
 23f00a6:	f89d 5010 	ldrb.w	r5, [sp, #16]
  _measReg.osrs_t = tempSampling;
 23f00aa:	4313      	orrs	r3, r2
                                  standby_duration duration) {
 23f00ac:	f89d 6014 	ldrb.w	r6, [sp, #20]
  _configReg.filter = filter;
 23f00b0:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
  _measReg.osrs_t = tempSampling;
 23f00b4:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 23f00b8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  _configReg.filter = filter;
 23f00bc:	f005 0307 	and.w	r3, r5, #7
  _configReg.t_sb = duration;
 23f00c0:	f006 0107 	and.w	r1, r6, #7
  _configReg.filter = filter;
 23f00c4:	f363 02c5 	bfi	r2, r3, #3, #3
  _configReg.t_sb = duration;
 23f00c8:	f361 0202 	bfi	r2, r1, #0, #3
    /** Unused - don't set */
    unsigned int none : 1;
    /** Enables 3-wire SPI */
    unsigned int spi3w_en : 1;
    /** Used to retrieve the assembled config register's byte value. */
    unsigned int get() { return (t_sb << 5) | (filter << 2) | spi3w_en; }
 23f00cc:	009b      	lsls	r3, r3, #2
 23f00ce:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 23f00d2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 23f00d6:	f3c2 12c0 	ubfx	r2, r2, #7, #1
  write8(BMP280_REGISTER_CONFIG, _configReg.get());
 23f00da:	431a      	orrs	r2, r3
 23f00dc:	21f5      	movs	r1, #245	; 0xf5
 23f00de:	f7ff ff87 	bl	23efff0 <_ZN15Adafruit_BMP2806write8Ehh>
    /** Pressure oversampling. */
    unsigned int osrs_p : 3;
    /** Device mode */
    unsigned int mode : 2;
    /** Used to retrieve the assembled ctrl_meas register's byte value. */
    unsigned int get() { return (osrs_t << 5) | (osrs_p << 2) | mode; }
 23f00e2:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
  write8(BMP280_REGISTER_CONTROL, _measReg.get());
 23f00e6:	4620      	mov	r0, r4
}
 23f00e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23f00ec:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 23f00f0:	f002 0107 	and.w	r1, r2, #7
 23f00f4:	009b      	lsls	r3, r3, #2
 23f00f6:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
  write8(BMP280_REGISTER_CONTROL, _measReg.get());
 23f00fa:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
 23f00fe:	21f4      	movs	r1, #244	; 0xf4
 23f0100:	f7ff bf76 	b.w	23efff0 <_ZN15Adafruit_BMP2806write8Ehh>

023f0104 <_ZN15Adafruit_BMP2805read8Eh>:
uint8_t Adafruit_BMP280::read8(byte reg) {
 23f0104:	b530      	push	{r4, r5, lr}
  if (_cs == -1) {
 23f0106:	f990 301c 	ldrsb.w	r3, [r0, #28]
uint8_t Adafruit_BMP280::read8(byte reg) {
 23f010a:	4604      	mov	r4, r0
  if (_cs == -1) {
 23f010c:	3301      	adds	r3, #1
uint8_t Adafruit_BMP280::read8(byte reg) {
 23f010e:	460d      	mov	r5, r1
 23f0110:	b085      	sub	sp, #20
  if (_cs == -1) {
 23f0112:	d118      	bne.n	23f0146 <_ZN15Adafruit_BMP2805read8Eh+0x42>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23f0114:	7c01      	ldrb	r1, [r0, #16]
 23f0116:	6800      	ldr	r0, [r0, #0]
 23f0118:	f008 fece 	bl	23f8eb8 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23f011c:	6820      	ldr	r0, [r4, #0]
 23f011e:	4629      	mov	r1, r5
 23f0120:	6803      	ldr	r3, [r0, #0]
 23f0122:	689b      	ldr	r3, [r3, #8]
 23f0124:	4798      	blx	r3
    _wire->endTransmission();
 23f0126:	6820      	ldr	r0, [r4, #0]
 23f0128:	f008 fed1 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)1);
 23f012c:	2201      	movs	r2, #1
 23f012e:	7c21      	ldrb	r1, [r4, #16]
 23f0130:	6820      	ldr	r0, [r4, #0]
 23f0132:	f008 febe 	bl	23f8eb2 <_ZN7TwoWire11requestFromEhj>
    value = _wire->read();
 23f0136:	6820      	ldr	r0, [r4, #0]
 23f0138:	6803      	ldr	r3, [r0, #0]
 23f013a:	695b      	ldr	r3, [r3, #20]
 23f013c:	4798      	blx	r3
 23f013e:	b2c5      	uxtb	r5, r0
}
 23f0140:	4628      	mov	r0, r5
 23f0142:	b005      	add	sp, #20
 23f0144:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23f0146:	f990 301f 	ldrsb.w	r3, [r0, #31]
 23f014a:	3301      	adds	r3, #1
 23f014c:	d10d      	bne.n	23f016a <_ZN15Adafruit_BMP2805read8Eh+0x66>
 23f014e:	4b16      	ldr	r3, [pc, #88]	; (23f01a8 <_ZN15Adafruit_BMP2805read8Eh+0xa4>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23f0150:	4669      	mov	r1, sp
 23f0152:	9300      	str	r3, [sp, #0]
 23f0154:	2300      	movs	r3, #0
 23f0156:	f88d 3004 	strb.w	r3, [sp, #4]
 23f015a:	4b14      	ldr	r3, [pc, #80]	; (23f01ac <_ZN15Adafruit_BMP2805read8Eh+0xa8>)
 23f015c:	6840      	ldr	r0, [r0, #4]
 23f015e:	9302      	str	r3, [sp, #8]
 23f0160:	2301      	movs	r3, #1
 23f0162:	f8ad 300c 	strh.w	r3, [sp, #12]
 23f0166:	f009 fb91 	bl	23f988c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23f016a:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23f016e:	2100      	movs	r1, #0
 23f0170:	b280      	uxth	r0, r0
 23f0172:	f00a f83e 	bl	23fa1f2 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23f0176:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23f017a:	4620      	mov	r0, r4
 23f017c:	f7ff ff04 	bl	23eff88 <_ZN15Adafruit_BMP2807spixferEh>
    value = spixfer(0);
 23f0180:	2100      	movs	r1, #0
 23f0182:	4620      	mov	r0, r4
 23f0184:	f7ff ff00 	bl	23eff88 <_ZN15Adafruit_BMP2807spixferEh>
 23f0188:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
 23f018a:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23f018e:	2101      	movs	r1, #1
 23f0190:	b280      	uxth	r0, r0
 23f0192:	f00a f82e 	bl	23fa1f2 <digitalWrite>
    if (_sck == -1)
 23f0196:	f994 301f 	ldrsb.w	r3, [r4, #31]
 23f019a:	3301      	adds	r3, #1
 23f019c:	d1d0      	bne.n	23f0140 <_ZN15Adafruit_BMP2805read8Eh+0x3c>
      _spi->endTransaction(); // release the SPI bus
 23f019e:	6860      	ldr	r0, [r4, #4]
 23f01a0:	f009 fb5a 	bl	23f9858 <_ZN8SPIClass14endTransactionEv>
 23f01a4:	e7cc      	b.n	23f0140 <_ZN15Adafruit_BMP2805read8Eh+0x3c>
 23f01a6:	bf00      	nop
 23f01a8:	023fea34 	.word	0x023fea34
 23f01ac:	0007a120 	.word	0x0007a120

023f01b0 <_ZN15Adafruit_BMP2806read16Eh>:
uint16_t Adafruit_BMP280::read16(byte reg) {
 23f01b0:	b530      	push	{r4, r5, lr}
  if (_cs == -1) {
 23f01b2:	f990 301c 	ldrsb.w	r3, [r0, #28]
uint16_t Adafruit_BMP280::read16(byte reg) {
 23f01b6:	4604      	mov	r4, r0
  if (_cs == -1) {
 23f01b8:	3301      	adds	r3, #1
uint16_t Adafruit_BMP280::read16(byte reg) {
 23f01ba:	460d      	mov	r5, r1
 23f01bc:	b085      	sub	sp, #20
  if (_cs == -1) {
 23f01be:	d11f      	bne.n	23f0200 <_ZN15Adafruit_BMP2806read16Eh+0x50>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23f01c0:	7c01      	ldrb	r1, [r0, #16]
 23f01c2:	6800      	ldr	r0, [r0, #0]
 23f01c4:	f008 fe78 	bl	23f8eb8 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23f01c8:	6820      	ldr	r0, [r4, #0]
 23f01ca:	4629      	mov	r1, r5
 23f01cc:	6803      	ldr	r3, [r0, #0]
 23f01ce:	689b      	ldr	r3, [r3, #8]
 23f01d0:	4798      	blx	r3
    _wire->endTransmission();
 23f01d2:	6820      	ldr	r0, [r4, #0]
 23f01d4:	f008 fe7b 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)2);
 23f01d8:	2202      	movs	r2, #2
 23f01da:	7c21      	ldrb	r1, [r4, #16]
 23f01dc:	6820      	ldr	r0, [r4, #0]
 23f01de:	f008 fe68 	bl	23f8eb2 <_ZN7TwoWire11requestFromEhj>
    value = (_wire->read() << 8) | _wire->read();
 23f01e2:	6820      	ldr	r0, [r4, #0]
 23f01e4:	6803      	ldr	r3, [r0, #0]
 23f01e6:	695b      	ldr	r3, [r3, #20]
 23f01e8:	4798      	blx	r3
 23f01ea:	4605      	mov	r5, r0
 23f01ec:	6820      	ldr	r0, [r4, #0]
 23f01ee:	6803      	ldr	r3, [r0, #0]
 23f01f0:	695b      	ldr	r3, [r3, #20]
 23f01f2:	4798      	blx	r3
 23f01f4:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 23f01f8:	b285      	uxth	r5, r0
}
 23f01fa:	4628      	mov	r0, r5
 23f01fc:	b005      	add	sp, #20
 23f01fe:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23f0200:	f990 301f 	ldrsb.w	r3, [r0, #31]
 23f0204:	3301      	adds	r3, #1
 23f0206:	d10d      	bne.n	23f0224 <_ZN15Adafruit_BMP2806read16Eh+0x74>
 23f0208:	4b19      	ldr	r3, [pc, #100]	; (23f0270 <_ZN15Adafruit_BMP2806read16Eh+0xc0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23f020a:	4669      	mov	r1, sp
 23f020c:	9300      	str	r3, [sp, #0]
 23f020e:	2300      	movs	r3, #0
 23f0210:	f88d 3004 	strb.w	r3, [sp, #4]
 23f0214:	4b17      	ldr	r3, [pc, #92]	; (23f0274 <_ZN15Adafruit_BMP2806read16Eh+0xc4>)
 23f0216:	6840      	ldr	r0, [r0, #4]
 23f0218:	9302      	str	r3, [sp, #8]
 23f021a:	2301      	movs	r3, #1
 23f021c:	f8ad 300c 	strh.w	r3, [sp, #12]
 23f0220:	f009 fb34 	bl	23f988c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23f0224:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23f0228:	2100      	movs	r1, #0
 23f022a:	b280      	uxth	r0, r0
 23f022c:	f009 ffe1 	bl	23fa1f2 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23f0230:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23f0234:	4620      	mov	r0, r4
 23f0236:	f7ff fea7 	bl	23eff88 <_ZN15Adafruit_BMP2807spixferEh>
    value = (spixfer(0) << 8) | spixfer(0);
 23f023a:	2100      	movs	r1, #0
 23f023c:	4620      	mov	r0, r4
 23f023e:	f7ff fea3 	bl	23eff88 <_ZN15Adafruit_BMP2807spixferEh>
 23f0242:	2100      	movs	r1, #0
 23f0244:	4605      	mov	r5, r0
 23f0246:	4620      	mov	r0, r4
 23f0248:	f7ff fe9e 	bl	23eff88 <_ZN15Adafruit_BMP2807spixferEh>
 23f024c:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 23f0250:	b285      	uxth	r5, r0
    digitalWrite(_cs, HIGH);
 23f0252:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23f0256:	2101      	movs	r1, #1
 23f0258:	b280      	uxth	r0, r0
 23f025a:	f009 ffca 	bl	23fa1f2 <digitalWrite>
    if (_sck == -1)
 23f025e:	f994 301f 	ldrsb.w	r3, [r4, #31]
 23f0262:	3301      	adds	r3, #1
 23f0264:	d1c9      	bne.n	23f01fa <_ZN15Adafruit_BMP2806read16Eh+0x4a>
      _spi->endTransaction(); // release the SPI bus
 23f0266:	6860      	ldr	r0, [r4, #4]
 23f0268:	f009 faf6 	bl	23f9858 <_ZN8SPIClass14endTransactionEv>
 23f026c:	e7c5      	b.n	23f01fa <_ZN15Adafruit_BMP2806read16Eh+0x4a>
 23f026e:	bf00      	nop
 23f0270:	023fea34 	.word	0x023fea34
 23f0274:	0007a120 	.word	0x0007a120

023f0278 <_ZN15Adafruit_BMP2809read16_LEEh>:
uint16_t Adafruit_BMP280::read16_LE(byte reg) {
 23f0278:	b508      	push	{r3, lr}
  uint16_t temp = read16(reg);
 23f027a:	f7ff ff99 	bl	23f01b0 <_ZN15Adafruit_BMP2806read16Eh>
  return (temp >> 8) | (temp << 8);
 23f027e:	ba40      	rev16	r0, r0
}
 23f0280:	b280      	uxth	r0, r0
 23f0282:	bd08      	pop	{r3, pc}

023f0284 <_ZN15Adafruit_BMP2806read24Eh>:
uint32_t Adafruit_BMP280::read24(byte reg) {
 23f0284:	b530      	push	{r4, r5, lr}
  if (_cs == -1) {
 23f0286:	f990 301c 	ldrsb.w	r3, [r0, #28]
uint32_t Adafruit_BMP280::read24(byte reg) {
 23f028a:	4604      	mov	r4, r0
  if (_cs == -1) {
 23f028c:	3301      	adds	r3, #1
uint32_t Adafruit_BMP280::read24(byte reg) {
 23f028e:	460d      	mov	r5, r1
 23f0290:	b085      	sub	sp, #20
  if (_cs == -1) {
 23f0292:	d123      	bne.n	23f02dc <_ZN15Adafruit_BMP2806read24Eh+0x58>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23f0294:	7c01      	ldrb	r1, [r0, #16]
 23f0296:	6800      	ldr	r0, [r0, #0]
 23f0298:	f008 fe0e 	bl	23f8eb8 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23f029c:	6820      	ldr	r0, [r4, #0]
 23f029e:	4629      	mov	r1, r5
 23f02a0:	6803      	ldr	r3, [r0, #0]
 23f02a2:	689b      	ldr	r3, [r3, #8]
 23f02a4:	4798      	blx	r3
    _wire->endTransmission();
 23f02a6:	6820      	ldr	r0, [r4, #0]
 23f02a8:	f008 fe11 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)3);
 23f02ac:	2203      	movs	r2, #3
 23f02ae:	7c21      	ldrb	r1, [r4, #16]
 23f02b0:	6820      	ldr	r0, [r4, #0]
 23f02b2:	f008 fdfe 	bl	23f8eb2 <_ZN7TwoWire11requestFromEhj>
    value = _wire->read();
 23f02b6:	6820      	ldr	r0, [r4, #0]
 23f02b8:	6803      	ldr	r3, [r0, #0]
 23f02ba:	695b      	ldr	r3, [r3, #20]
 23f02bc:	4798      	blx	r3
    value <<= 8;
 23f02be:	0205      	lsls	r5, r0, #8
    value |= _wire->read();
 23f02c0:	6820      	ldr	r0, [r4, #0]
 23f02c2:	6803      	ldr	r3, [r0, #0]
 23f02c4:	695b      	ldr	r3, [r3, #20]
 23f02c6:	4798      	blx	r3
 23f02c8:	4328      	orrs	r0, r5
    value <<= 8;
 23f02ca:	0205      	lsls	r5, r0, #8
    value |= _wire->read();
 23f02cc:	6820      	ldr	r0, [r4, #0]
 23f02ce:	6803      	ldr	r3, [r0, #0]
 23f02d0:	695b      	ldr	r3, [r3, #20]
 23f02d2:	4798      	blx	r3
 23f02d4:	4305      	orrs	r5, r0
}
 23f02d6:	4628      	mov	r0, r5
 23f02d8:	b005      	add	sp, #20
 23f02da:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23f02dc:	f990 301f 	ldrsb.w	r3, [r0, #31]
 23f02e0:	3301      	adds	r3, #1
 23f02e2:	d10d      	bne.n	23f0300 <_ZN15Adafruit_BMP2806read24Eh+0x7c>
 23f02e4:	4b1b      	ldr	r3, [pc, #108]	; (23f0354 <_ZN15Adafruit_BMP2806read24Eh+0xd0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23f02e6:	4669      	mov	r1, sp
 23f02e8:	9300      	str	r3, [sp, #0]
 23f02ea:	2300      	movs	r3, #0
 23f02ec:	f88d 3004 	strb.w	r3, [sp, #4]
 23f02f0:	4b19      	ldr	r3, [pc, #100]	; (23f0358 <_ZN15Adafruit_BMP2806read24Eh+0xd4>)
 23f02f2:	6840      	ldr	r0, [r0, #4]
 23f02f4:	9302      	str	r3, [sp, #8]
 23f02f6:	2301      	movs	r3, #1
 23f02f8:	f8ad 300c 	strh.w	r3, [sp, #12]
 23f02fc:	f009 fac6 	bl	23f988c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23f0300:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23f0304:	2100      	movs	r1, #0
 23f0306:	b280      	uxth	r0, r0
 23f0308:	f009 ff73 	bl	23fa1f2 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23f030c:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23f0310:	4620      	mov	r0, r4
 23f0312:	f7ff fe39 	bl	23eff88 <_ZN15Adafruit_BMP2807spixferEh>
    value = spixfer(0);
 23f0316:	2100      	movs	r1, #0
 23f0318:	4620      	mov	r0, r4
 23f031a:	f7ff fe35 	bl	23eff88 <_ZN15Adafruit_BMP2807spixferEh>
    value |= spixfer(0);
 23f031e:	2100      	movs	r1, #0
    value <<= 8;
 23f0320:	0205      	lsls	r5, r0, #8
    value |= spixfer(0);
 23f0322:	4620      	mov	r0, r4
 23f0324:	f7ff fe30 	bl	23eff88 <_ZN15Adafruit_BMP2807spixferEh>
 23f0328:	4328      	orrs	r0, r5
    value |= spixfer(0);
 23f032a:	2100      	movs	r1, #0
    value <<= 8;
 23f032c:	0205      	lsls	r5, r0, #8
    value |= spixfer(0);
 23f032e:	4620      	mov	r0, r4
 23f0330:	f7ff fe2a 	bl	23eff88 <_ZN15Adafruit_BMP2807spixferEh>
 23f0334:	4305      	orrs	r5, r0
    digitalWrite(_cs, HIGH);
 23f0336:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23f033a:	2101      	movs	r1, #1
 23f033c:	b280      	uxth	r0, r0
 23f033e:	f009 ff58 	bl	23fa1f2 <digitalWrite>
    if (_sck == -1)
 23f0342:	f994 301f 	ldrsb.w	r3, [r4, #31]
 23f0346:	3301      	adds	r3, #1
 23f0348:	d1c5      	bne.n	23f02d6 <_ZN15Adafruit_BMP2806read24Eh+0x52>
      _spi->endTransaction(); // release the SPI bus
 23f034a:	6860      	ldr	r0, [r4, #4]
 23f034c:	f009 fa84 	bl	23f9858 <_ZN8SPIClass14endTransactionEv>
  return value;
 23f0350:	e7c1      	b.n	23f02d6 <_ZN15Adafruit_BMP2806read24Eh+0x52>
 23f0352:	bf00      	nop
 23f0354:	023fea34 	.word	0x023fea34
 23f0358:	0007a120 	.word	0x0007a120

023f035c <_ZN15Adafruit_BMP28016readCoefficientsEv>:
void Adafruit_BMP280::readCoefficients() {
 23f035c:	b510      	push	{r4, lr}
  _bmp280_calib.dig_T1 = read16_LE(BMP280_REGISTER_DIG_T1);
 23f035e:	2188      	movs	r1, #136	; 0x88
void Adafruit_BMP280::readCoefficients() {
 23f0360:	4604      	mov	r4, r0
  _bmp280_calib.dig_T1 = read16_LE(BMP280_REGISTER_DIG_T1);
 23f0362:	f7ff ff89 	bl	23f0278 <_ZN15Adafruit_BMP2809read16_LEEh>
  return (int16_t)read16_LE(reg);
 23f0366:	218a      	movs	r1, #138	; 0x8a
  _bmp280_calib.dig_T1 = read16_LE(BMP280_REGISTER_DIG_T1);
 23f0368:	8420      	strh	r0, [r4, #32]
  return (int16_t)read16_LE(reg);
 23f036a:	4620      	mov	r0, r4
 23f036c:	f7ff ff84 	bl	23f0278 <_ZN15Adafruit_BMP2809read16_LEEh>
 23f0370:	218c      	movs	r1, #140	; 0x8c
  _bmp280_calib.dig_T2 = readS16_LE(BMP280_REGISTER_DIG_T2);
 23f0372:	8460      	strh	r0, [r4, #34]	; 0x22
  return (int16_t)read16_LE(reg);
 23f0374:	4620      	mov	r0, r4
 23f0376:	f7ff ff7f 	bl	23f0278 <_ZN15Adafruit_BMP2809read16_LEEh>
  _bmp280_calib.dig_P1 = read16_LE(BMP280_REGISTER_DIG_P1);
 23f037a:	218e      	movs	r1, #142	; 0x8e
  _bmp280_calib.dig_T3 = readS16_LE(BMP280_REGISTER_DIG_T3);
 23f037c:	84a0      	strh	r0, [r4, #36]	; 0x24
  _bmp280_calib.dig_P1 = read16_LE(BMP280_REGISTER_DIG_P1);
 23f037e:	4620      	mov	r0, r4
 23f0380:	f7ff ff7a 	bl	23f0278 <_ZN15Adafruit_BMP2809read16_LEEh>
  return (int16_t)read16_LE(reg);
 23f0384:	2190      	movs	r1, #144	; 0x90
  _bmp280_calib.dig_P1 = read16_LE(BMP280_REGISTER_DIG_P1);
 23f0386:	84e0      	strh	r0, [r4, #38]	; 0x26
  return (int16_t)read16_LE(reg);
 23f0388:	4620      	mov	r0, r4
 23f038a:	f7ff ff75 	bl	23f0278 <_ZN15Adafruit_BMP2809read16_LEEh>
 23f038e:	2192      	movs	r1, #146	; 0x92
  _bmp280_calib.dig_P2 = readS16_LE(BMP280_REGISTER_DIG_P2);
 23f0390:	8520      	strh	r0, [r4, #40]	; 0x28
  return (int16_t)read16_LE(reg);
 23f0392:	4620      	mov	r0, r4
 23f0394:	f7ff ff70 	bl	23f0278 <_ZN15Adafruit_BMP2809read16_LEEh>
 23f0398:	2194      	movs	r1, #148	; 0x94
  _bmp280_calib.dig_P3 = readS16_LE(BMP280_REGISTER_DIG_P3);
 23f039a:	8560      	strh	r0, [r4, #42]	; 0x2a
  return (int16_t)read16_LE(reg);
 23f039c:	4620      	mov	r0, r4
 23f039e:	f7ff ff6b 	bl	23f0278 <_ZN15Adafruit_BMP2809read16_LEEh>
 23f03a2:	2196      	movs	r1, #150	; 0x96
  _bmp280_calib.dig_P4 = readS16_LE(BMP280_REGISTER_DIG_P4);
 23f03a4:	85a0      	strh	r0, [r4, #44]	; 0x2c
  return (int16_t)read16_LE(reg);
 23f03a6:	4620      	mov	r0, r4
 23f03a8:	f7ff ff66 	bl	23f0278 <_ZN15Adafruit_BMP2809read16_LEEh>
 23f03ac:	2198      	movs	r1, #152	; 0x98
  _bmp280_calib.dig_P5 = readS16_LE(BMP280_REGISTER_DIG_P5);
 23f03ae:	85e0      	strh	r0, [r4, #46]	; 0x2e
  return (int16_t)read16_LE(reg);
 23f03b0:	4620      	mov	r0, r4
 23f03b2:	f7ff ff61 	bl	23f0278 <_ZN15Adafruit_BMP2809read16_LEEh>
 23f03b6:	219a      	movs	r1, #154	; 0x9a
  _bmp280_calib.dig_P6 = readS16_LE(BMP280_REGISTER_DIG_P6);
 23f03b8:	8620      	strh	r0, [r4, #48]	; 0x30
  return (int16_t)read16_LE(reg);
 23f03ba:	4620      	mov	r0, r4
 23f03bc:	f7ff ff5c 	bl	23f0278 <_ZN15Adafruit_BMP2809read16_LEEh>
 23f03c0:	219c      	movs	r1, #156	; 0x9c
  _bmp280_calib.dig_P7 = readS16_LE(BMP280_REGISTER_DIG_P7);
 23f03c2:	8660      	strh	r0, [r4, #50]	; 0x32
  return (int16_t)read16_LE(reg);
 23f03c4:	4620      	mov	r0, r4
 23f03c6:	f7ff ff57 	bl	23f0278 <_ZN15Adafruit_BMP2809read16_LEEh>
 23f03ca:	219e      	movs	r1, #158	; 0x9e
  _bmp280_calib.dig_P8 = readS16_LE(BMP280_REGISTER_DIG_P8);
 23f03cc:	86a0      	strh	r0, [r4, #52]	; 0x34
  return (int16_t)read16_LE(reg);
 23f03ce:	4620      	mov	r0, r4
 23f03d0:	f7ff ff52 	bl	23f0278 <_ZN15Adafruit_BMP2809read16_LEEh>
  _bmp280_calib.dig_P9 = readS16_LE(BMP280_REGISTER_DIG_P9);
 23f03d4:	86e0      	strh	r0, [r4, #54]	; 0x36
}
 23f03d6:	bd10      	pop	{r4, pc}

023f03d8 <_ZN15Adafruit_BMP2805beginEhh>:
bool Adafruit_BMP280::begin(uint8_t addr, uint8_t chipid) {
 23f03d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f03da:	4604      	mov	r4, r0
  _i2caddr = addr;
 23f03dc:	7401      	strb	r1, [r0, #16]
  if (_cs == -1) {
 23f03de:	f990 001c 	ldrsb.w	r0, [r0, #28]
bool Adafruit_BMP280::begin(uint8_t addr, uint8_t chipid) {
 23f03e2:	4615      	mov	r5, r2
  if (_cs == -1) {
 23f03e4:	1c42      	adds	r2, r0, #1
 23f03e6:	d11b      	bne.n	23f0420 <_ZN15Adafruit_BMP2805beginEhh+0x48>
    _wire->begin();
 23f03e8:	6820      	ldr	r0, [r4, #0]
 23f03ea:	f008 fd3b 	bl	23f8e64 <_ZN7TwoWire5beginEv>
  if (read8(BMP280_REGISTER_CHIPID) != chipid)
 23f03ee:	21d0      	movs	r1, #208	; 0xd0
 23f03f0:	4620      	mov	r0, r4
 23f03f2:	f7ff fe87 	bl	23f0104 <_ZN15Adafruit_BMP2805read8Eh>
 23f03f6:	42a8      	cmp	r0, r5
 23f03f8:	f04f 0500 	mov.w	r5, #0
 23f03fc:	d133      	bne.n	23f0466 <_ZN15Adafruit_BMP2805beginEhh+0x8e>
  readCoefficients();
 23f03fe:	4620      	mov	r0, r4
 23f0400:	f7ff ffac 	bl	23f035c <_ZN15Adafruit_BMP28016readCoefficientsEv>
  setSampling();
 23f0404:	2305      	movs	r3, #5
 23f0406:	2103      	movs	r1, #3
 23f0408:	461a      	mov	r2, r3
 23f040a:	4620      	mov	r0, r4
 23f040c:	e9cd 5500 	strd	r5, r5, [sp]
 23f0410:	f7ff fe42 	bl	23f0098 <_ZN15Adafruit_BMP28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_NS_13sensor_filterENS_16standby_durationE>
  delay(100);
 23f0414:	2064      	movs	r0, #100	; 0x64
 23f0416:	f007 ff55 	bl	23f82c4 <delay>
  return true;
 23f041a:	2001      	movs	r0, #1
}
 23f041c:	b003      	add	sp, #12
 23f041e:	bd30      	pop	{r4, r5, pc}
    digitalWrite(_cs, HIGH);
 23f0420:	2101      	movs	r1, #1
 23f0422:	b280      	uxth	r0, r0
 23f0424:	f009 fee5 	bl	23fa1f2 <digitalWrite>
    pinMode(_cs, OUTPUT);
 23f0428:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23f042c:	2101      	movs	r1, #1
 23f042e:	b280      	uxth	r0, r0
 23f0430:	f009 fece 	bl	23fa1d0 <pinMode>
    if (_sck == -1) {
 23f0434:	f994 001f 	ldrsb.w	r0, [r4, #31]
 23f0438:	1c43      	adds	r3, r0, #1
 23f043a:	d103      	bne.n	23f0444 <_ZN15Adafruit_BMP2805beginEhh+0x6c>
      _spi->begin();
 23f043c:	6860      	ldr	r0, [r4, #4]
 23f043e:	f009 f9d1 	bl	23f97e4 <_ZN8SPIClass5beginEv>
 23f0442:	e7d4      	b.n	23f03ee <_ZN15Adafruit_BMP2805beginEhh+0x16>
      pinMode(_sck, OUTPUT);
 23f0444:	2101      	movs	r1, #1
 23f0446:	b280      	uxth	r0, r0
 23f0448:	f009 fec2 	bl	23fa1d0 <pinMode>
      pinMode(_mosi, OUTPUT);
 23f044c:	f994 001d 	ldrsb.w	r0, [r4, #29]
 23f0450:	2101      	movs	r1, #1
 23f0452:	b280      	uxth	r0, r0
 23f0454:	f009 febc 	bl	23fa1d0 <pinMode>
      pinMode(_miso, INPUT);
 23f0458:	f994 001e 	ldrsb.w	r0, [r4, #30]
 23f045c:	2100      	movs	r1, #0
 23f045e:	b280      	uxth	r0, r0
 23f0460:	f009 feb6 	bl	23fa1d0 <pinMode>
 23f0464:	e7c3      	b.n	23f03ee <_ZN15Adafruit_BMP2805beginEhh+0x16>
    return false;
 23f0466:	4628      	mov	r0, r5
 23f0468:	e7d8      	b.n	23f041c <_ZN15Adafruit_BMP2805beginEhh+0x44>
	...

023f046c <_ZN15Adafruit_BMP28015readTemperatureEv>:
float Adafruit_BMP280::readTemperature() {
 23f046c:	b510      	push	{r4, lr}
 23f046e:	4604      	mov	r4, r0
  int32_t adc_T = read24(BMP280_REGISTER_TEMPDATA);
 23f0470:	21fa      	movs	r1, #250	; 0xfa
 23f0472:	f7ff ff07 	bl	23f0284 <_ZN15Adafruit_BMP2806read24Eh>
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
 23f0476:	8c21      	ldrh	r1, [r4, #32]
}
 23f0478:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 23f04b8 <_ZN15Adafruit_BMP28015readTemperatureEv+0x4c>
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
 23f047c:	004b      	lsls	r3, r1, #1
  var2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) *
 23f047e:	ebc1 2220 	rsb	r2, r1, r0, asr #8
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
 23f0482:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
          ((int32_t)_bmp280_calib.dig_T2)) >>
 23f0486:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
 23f048a:	4359      	muls	r1, r3
  var2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) *
 23f048c:	fb02 f302 	mul.w	r3, r2, r2
          ((int32_t)_bmp280_calib.dig_T3)) >>
 23f0490:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
            ((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1))) >>
 23f0494:	131b      	asrs	r3, r3, #12
           12) *
 23f0496:	4353      	muls	r3, r2
  var2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) *
 23f0498:	139b      	asrs	r3, r3, #14
  t_fine = var1 + var2;
 23f049a:	eb03 23e1 	add.w	r3, r3, r1, asr #11
 23f049e:	61a3      	str	r3, [r4, #24]
  float T = (t_fine * 5 + 128) >> 8;
 23f04a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 23f04a4:	3380      	adds	r3, #128	; 0x80
 23f04a6:	121b      	asrs	r3, r3, #8
 23f04a8:	ee07 3a90 	vmov	s15, r3
 23f04ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 23f04b0:	ee87 0a80 	vdiv.f32	s0, s15, s0
 23f04b4:	bd10      	pop	{r4, pc}
 23f04b6:	bf00      	nop
 23f04b8:	42c80000 	.word	0x42c80000

023f04bc <_ZN20Adafruit_BMP280_Temp8getEventEP15sensors_event_t>:
bool Adafruit_BMP280_Temp::getEvent(sensors_event_t *event) {
 23f04bc:	b538      	push	{r3, r4, r5, lr}
 23f04be:	460c      	mov	r4, r1
 23f04c0:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
 23f04c2:	2220      	movs	r2, #32
 23f04c4:	2100      	movs	r1, #0
 23f04c6:	1d20      	adds	r0, r4, #4
 23f04c8:	f00c fca1 	bl	23fce0e <memset>
  event->version = sizeof(sensors_event_t);
 23f04cc:	2324      	movs	r3, #36	; 0x24
 23f04ce:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
 23f04d0:	68ab      	ldr	r3, [r5, #8]
 23f04d2:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 23f04d4:	230d      	movs	r3, #13
 23f04d6:	60a3      	str	r3, [r4, #8]
 23f04d8:	f007 f872 	bl	23f75c0 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
 23f04dc:	6120      	str	r0, [r4, #16]
  event->temperature = _theBMP280->readTemperature();
 23f04de:	68e8      	ldr	r0, [r5, #12]
 23f04e0:	f7ff ffc4 	bl	23f046c <_ZN15Adafruit_BMP28015readTemperatureEv>
}
 23f04e4:	2001      	movs	r0, #1
  event->temperature = _theBMP280->readTemperature();
 23f04e6:	ed84 0a05 	vstr	s0, [r4, #20]
}
 23f04ea:	bd38      	pop	{r3, r4, r5, pc}

023f04ec <_ZN15Adafruit_BMP28012readPressureEv>:
float Adafruit_BMP280::readPressure() {
 23f04ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23f04f0:	4604      	mov	r4, r0
  readTemperature();
 23f04f2:	f7ff ffbb 	bl	23f046c <_ZN15Adafruit_BMP28015readTemperatureEv>
  int32_t adc_P = read24(BMP280_REGISTER_PRESSUREDATA);
 23f04f6:	21f7      	movs	r1, #247	; 0xf7
 23f04f8:	4620      	mov	r0, r4
 23f04fa:	f7ff fec3 	bl	23f0284 <_ZN15Adafruit_BMP2806read24Eh>
  var1 = ((int64_t)t_fine) - 128000;
 23f04fe:	69a1      	ldr	r1, [r4, #24]
         ((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
 23f0500:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
  var1 = ((int64_t)t_fine) - 128000;
 23f0504:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 23f0508:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
 23f050c:	f14c 3cff 	adc.w	ip, ip, #4294967295	; 0xffffffff
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
 23f0510:	fba1 6801 	umull	r6, r8, r1, r1
 23f0514:	fb01 f50c 	mul.w	r5, r1, ip
         ((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
 23f0518:	fb03 f20c 	mul.w	r2, r3, ip
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
 23f051c:	eb08 0845 	add.w	r8, r8, r5, lsl #1
         ((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
 23f0520:	17dd      	asrs	r5, r3, #31
 23f0522:	fb01 2205 	mla	r2, r1, r5, r2
 23f0526:	fba3 3501 	umull	r3, r5, r3, r1
 23f052a:	442a      	add	r2, r5
 23f052c:	0312      	lsls	r2, r2, #12
 23f052e:	031d      	lsls	r5, r3, #12
 23f0530:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
  var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
 23f0534:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
 23f0538:	fb03 f708 	mul.w	r7, r3, r8
 23f053c:	ea4f 7ee3 	mov.w	lr, r3, asr #31
 23f0540:	fb06 770e 	mla	r7, r6, lr, r7
 23f0544:	fba3 3e06 	umull	r3, lr, r3, r6
 23f0548:	4477      	add	r7, lr
 23f054a:	0a1b      	lsrs	r3, r3, #8
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
 23f054c:	f8b4 e026 	ldrh.w	lr, [r4, #38]	; 0x26
  var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
 23f0550:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 23f0554:	195b      	adds	r3, r3, r5
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
 23f0556:	fba3 350e 	umull	r3, r5, r3, lr
  var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
 23f055a:	eb42 2227 	adc.w	r2, r2, r7, asr #8
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
 23f055e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 23f0562:	fb0e 5502 	mla	r5, lr, r2, r5
  var1 =
 23f0566:	17eb      	asrs	r3, r5, #31
 23f0568:	106a      	asrs	r2, r5, #1
  if (var1 == 0) {
 23f056a:	ea53 0565 	orrs.w	r5, r3, r5, asr #1
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
 23f056e:	f04f 0700 	mov.w	r7, #0
  if (var1 == 0) {
 23f0572:	d07b      	beq.n	23f066c <_ZN15Adafruit_BMP28012readPressureEv+0x180>
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
 23f0574:	f9b4 e030 	ldrsh.w	lr, [r4, #48]	; 0x30
  adc_P >>= 4;
 23f0578:	1100      	asrs	r0, r0, #4
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
 23f057a:	fb0e f508 	mul.w	r5, lr, r8
 23f057e:	ea4f 79ee 	mov.w	r9, lr, asr #31
 23f0582:	fb06 5509 	mla	r5, r6, r9, r5
 23f0586:	fbae e606 	umull	lr, r6, lr, r6
 23f058a:	4435      	add	r5, r6
  var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
 23f058c:	f9b4 602e 	ldrsh.w	r6, [r4, #46]	; 0x2e
  p = 1048576 - adc_P;
 23f0590:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
  var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
 23f0594:	fb06 fc0c 	mul.w	ip, r6, ip
 23f0598:	ea4f 78e6 	mov.w	r8, r6, asr #31
 23f059c:	fb01 cc08 	mla	ip, r1, r8, ip
 23f05a0:	fba6 6101 	umull	r6, r1, r6, r1
 23f05a4:	4461      	add	r1, ip
 23f05a6:	0449      	lsls	r1, r1, #17
 23f05a8:	ea41 31d6 	orr.w	r1, r1, r6, lsr #15
 23f05ac:	0476      	lsls	r6, r6, #17
 23f05ae:	eb16 060e 	adds.w	r6, r6, lr
 23f05b2:	eb45 0101 	adc.w	r1, r5, r1
  var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
 23f05b6:	f9b4 502c 	ldrsh.w	r5, [r4, #44]	; 0x2c
  p = (((p << 31) - var2) * 3125) / var1;
 23f05ba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
 23f05be:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
  p = (((p << 31) - var2) * 3125) / var1;
 23f05c2:	f640 4535 	movw	r5, #3125	; 0xc35
  var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
 23f05c6:	19be      	adds	r6, r7, r6
  p = (((p << 31) - var2) * 3125) / var1;
 23f05c8:	ea4c 0c50 	orr.w	ip, ip, r0, lsr #1
 23f05cc:	07c0      	lsls	r0, r0, #31
 23f05ce:	1b80      	subs	r0, r0, r6
 23f05d0:	eb6c 0c01 	sbc.w	ip, ip, r1
 23f05d4:	fba0 0105 	umull	r0, r1, r0, r5
 23f05d8:	fb05 110c 	mla	r1, r5, ip, r1
 23f05dc:	f7f5 fb22 	bl	23e5c24 <__aeabi_ldivmod>
 23f05e0:	4686      	mov	lr, r0
  var1 = (((int64_t)_bmp280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23f05e2:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 23f05e6:	ea4f 3c61 	mov.w	ip, r1, asr #13
 23f05ea:	fb02 f70c 	mul.w	r7, r2, ip
 23f05ee:	0b43      	lsrs	r3, r0, #13
 23f05f0:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
 23f05f4:	17d5      	asrs	r5, r2, #31
 23f05f6:	fb03 7705 	mla	r7, r3, r5, r7
 23f05fa:	fba2 2503 	umull	r2, r5, r2, r3
 23f05fe:	443d      	add	r5, r7
 23f0600:	fb02 f70c 	mul.w	r7, r2, ip
 23f0604:	fb03 7705 	mla	r7, r3, r5, r7
 23f0608:	fba2 2303 	umull	r2, r3, r2, r3
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
 23f060c:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
  var1 = (((int64_t)_bmp280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23f0610:	441f      	add	r7, r3
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
 23f0612:	fb06 f501 	mul.w	r5, r6, r1
  var1 = (((int64_t)_bmp280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23f0616:	0e53      	lsrs	r3, r2, #25
 23f0618:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
 23f061c:	181b      	adds	r3, r3, r0
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
 23f061e:	ea4f 72e6 	mov.w	r2, r6, asr #31
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
 23f0622:	eb41 6767 	adc.w	r7, r1, r7, asr #25
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
 23f0626:	fb02 5100 	mla	r1, r2, r0, r5
 23f062a:	fba6 060e 	umull	r0, r6, r6, lr
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
 23f062e:	f9b4 4032 	ldrsh.w	r4, [r4, #50]	; 0x32
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
 23f0632:	4431      	add	r1, r6
 23f0634:	0cc0      	lsrs	r0, r0, #19
 23f0636:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
 23f063a:	1818      	adds	r0, r3, r0
 23f063c:	ea4f 75e4 	mov.w	r5, r4, asr #31
 23f0640:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
 23f0644:	0a00      	lsrs	r0, r0, #8
 23f0646:	012d      	lsls	r5, r5, #4
 23f0648:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 23f064c:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
 23f0650:	0124      	lsls	r4, r4, #4
 23f0652:	1820      	adds	r0, r4, r0
  return (float)p / 256;
 23f0654:	eb45 2121 	adc.w	r1, r5, r1, asr #8
 23f0658:	f7f5 faa6 	bl	23e5ba8 <__aeabi_l2f>
 23f065c:	ed9f 0a05 	vldr	s0, [pc, #20]	; 23f0674 <_ZN15Adafruit_BMP28012readPressureEv+0x188>
 23f0660:	ee07 0a90 	vmov	s15, r0
 23f0664:	ee27 0a80 	vmul.f32	s0, s15, s0
}
 23f0668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0; // avoid exception caused by division by zero
 23f066c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23f0678 <_ZN15Adafruit_BMP28012readPressureEv+0x18c>
 23f0670:	e7fa      	b.n	23f0668 <_ZN15Adafruit_BMP28012readPressureEv+0x17c>
 23f0672:	bf00      	nop
 23f0674:	3b800000 	.word	0x3b800000
 23f0678:	00000000 	.word	0x00000000

023f067c <_ZN24Adafruit_BMP280_Pressure8getEventEP15sensors_event_t>:
    @brief  Gets the pressure as a standard sensor event
    @param  event Sensor event object that will be populated
    @returns True
*/
/**************************************************************************/
bool Adafruit_BMP280_Pressure::getEvent(sensors_event_t *event) {
 23f067c:	b538      	push	{r3, r4, r5, lr}
 23f067e:	460c      	mov	r4, r1
 23f0680:	4605      	mov	r5, r0
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 23f0682:	2220      	movs	r2, #32
 23f0684:	2100      	movs	r1, #0
 23f0686:	1d20      	adds	r0, r4, #4
 23f0688:	f00c fbc1 	bl	23fce0e <memset>

  event->version = sizeof(sensors_event_t);
 23f068c:	2324      	movs	r3, #36	; 0x24
 23f068e:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
 23f0690:	68ab      	ldr	r3, [r5, #8]
 23f0692:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_PRESSURE;
 23f0694:	2306      	movs	r3, #6
 23f0696:	60a3      	str	r3, [r4, #8]
 23f0698:	f006 ff92 	bl	23f75c0 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
 23f069c:	6120      	str	r0, [r4, #16]
  event->pressure = _theBMP280->readPressure() / 100; // convert Pa to hPa
 23f069e:	68e8      	ldr	r0, [r5, #12]
 23f06a0:	f7ff ff24 	bl	23f04ec <_ZN15Adafruit_BMP28012readPressureEv>
 23f06a4:	ed9f 7a03 	vldr	s14, [pc, #12]	; 23f06b4 <_ZN24Adafruit_BMP280_Pressure8getEventEP15sensors_event_t+0x38>
 23f06a8:	eec0 7a07 	vdiv.f32	s15, s0, s14
  return true;
}
 23f06ac:	2001      	movs	r0, #1
  event->pressure = _theBMP280->readPressure() / 100; // convert Pa to hPa
 23f06ae:	edc4 7a05 	vstr	s15, [r4, #20]
}
 23f06b2:	bd38      	pop	{r3, r4, r5, pc}
 23f06b4:	42c80000 	.word	0x42c80000

023f06b8 <_ZL9i2c_writehPKhmPv>:
/*!
    @brief  Writes 8 bit values over I2C
*/
/**************************************************************************/
int8_t i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len,
                 void *intf_ptr) {
 23f06b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Serial.print("I2C write address 0x"); Serial.print(reg_addr, HEX);
  // Serial.print(" len "); Serial.println(len, HEX);

  if (!g_i2c_dev->write((uint8_t *)reg_data, len, true, &reg_addr, 1))
 23f06ba:	2301      	movs	r3, #1
                 void *intf_ptr) {
 23f06bc:	f88d 000f 	strb.w	r0, [sp, #15]
  if (!g_i2c_dev->write((uint8_t *)reg_data, len, true, &reg_addr, 1))
 23f06c0:	f10d 000f 	add.w	r0, sp, #15
 23f06c4:	9000      	str	r0, [sp, #0]
 23f06c6:	4805      	ldr	r0, [pc, #20]	; (23f06dc <_ZL9i2c_writehPKhmPv+0x24>)
 23f06c8:	9301      	str	r3, [sp, #4]
 23f06ca:	6800      	ldr	r0, [r0, #0]
 23f06cc:	f000 fa64 	bl	23f0b98 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 23f06d0:	f080 0001 	eor.w	r0, r0, #1
    return 1;

  return 0;
}
 23f06d4:	b240      	sxtb	r0, r0
 23f06d6:	b005      	add	sp, #20
 23f06d8:	f85d fb04 	ldr.w	pc, [sp], #4
 23f06dc:	1007ae60 	.word	0x1007ae60

023f06e0 <_ZL8i2c_readhPhmPv>:
                void *intf_ptr) {
 23f06e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f06e2:	460b      	mov	r3, r1
  if (!g_i2c_dev->write_then_read(&reg_addr, 1, reg_data, len))
 23f06e4:	2100      	movs	r1, #0
 23f06e6:	e9cd 2100 	strd	r2, r1, [sp]
                void *intf_ptr) {
 23f06ea:	f88d 000f 	strb.w	r0, [sp, #15]
  if (!g_i2c_dev->write_then_read(&reg_addr, 1, reg_data, len))
 23f06ee:	4806      	ldr	r0, [pc, #24]	; (23f0708 <_ZL8i2c_readhPhmPv+0x28>)
 23f06f0:	2201      	movs	r2, #1
 23f06f2:	f10d 010f 	add.w	r1, sp, #15
 23f06f6:	6800      	ldr	r0, [r0, #0]
 23f06f8:	f000 faa0 	bl	23f0c3c <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
 23f06fc:	f080 0001 	eor.w	r0, r0, #1
}
 23f0700:	b240      	sxtb	r0, r0
 23f0702:	b005      	add	sp, #20
 23f0704:	f85d fb04 	ldr.w	pc, [sp], #4
 23f0708:	1007ae60 	.word	0x1007ae60

023f070c <_ZL10delay_usecmPv>:
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 23f070c:	f006 bf4a 	b.w	23f75a4 <HAL_Delay_Microseconds>

023f0710 <_ZN15Adafruit_BMP3XXC1Ev>:
  _meas_end = 0;
 23f0710:	2200      	movs	r2, #0
Adafruit_BMP3XX::Adafruit_BMP3XX(void) {
 23f0712:	e9c0 2204 	strd	r2, r2, [r0, #16]
  _meas_end = 0;
 23f0716:	6282      	str	r2, [r0, #40]	; 0x28
  _filterEnabled = _tempOSEnabled = _presOSEnabled = false;
 23f0718:	8302      	strh	r2, [r0, #24]
 23f071a:	7682      	strb	r2, [r0, #26]
}
 23f071c:	4770      	bx	lr
	...

023f0720 <_ZN15Adafruit_BMP3XX5_initEv>:
bool Adafruit_BMP3XX::_init(void) {
 23f0720:	b5f0      	push	{r4, r5, r6, r7, lr}
  g_i2c_dev = i2c_dev;
 23f0722:	4b2b      	ldr	r3, [pc, #172]	; (23f07d0 <_ZN15Adafruit_BMP3XX5_initEv+0xb0>)
 23f0724:	6902      	ldr	r2, [r0, #16]
  rslt = bmp3_soft_reset(&the_sensor);
 23f0726:	f100 0730 	add.w	r7, r0, #48	; 0x30
  g_i2c_dev = i2c_dev;
 23f072a:	601a      	str	r2, [r3, #0]
  g_spi_dev = spi_dev;
 23f072c:	6942      	ldr	r2, [r0, #20]
 23f072e:	4b29      	ldr	r3, [pc, #164]	; (23f07d4 <_ZN15Adafruit_BMP3XX5_initEv+0xb4>)
bool Adafruit_BMP3XX::_init(void) {
 23f0730:	4605      	mov	r5, r0
  g_spi_dev = spi_dev;
 23f0732:	601a      	str	r2, [r3, #0]
  the_sensor.delay_us = delay_usec;
 23f0734:	4b28      	ldr	r3, [pc, #160]	; (23f07d8 <_ZN15Adafruit_BMP3XX5_initEv+0xb8>)
bool Adafruit_BMP3XX::_init(void) {
 23f0736:	b089      	sub	sp, #36	; 0x24
  the_sensor.delay_us = delay_usec;
 23f0738:	6443      	str	r3, [r0, #68]	; 0x44
  rslt = bmp3_soft_reset(&the_sensor);
 23f073a:	4638      	mov	r0, r7
 23f073c:	f7f5 ffc4 	bl	23e66c8 <bmp3_soft_reset>
  if (rslt != BMP3_OK)
 23f0740:	b110      	cbz	r0, 23f0748 <_ZN15Adafruit_BMP3XX5_initEv+0x28>
    return false;
 23f0742:	2000      	movs	r0, #0
}
 23f0744:	b009      	add	sp, #36	; 0x24
 23f0746:	bdf0      	pop	{r4, r5, r6, r7, pc}
  rslt = bmp3_init(&the_sensor);
 23f0748:	4638      	mov	r0, r7
 23f074a:	f7f5 fffb 	bl	23e6744 <bmp3_init>
  uint8_t crc = 0xFF;
  uint8_t stored_crc;
  uint8_t trim_param[21];
  uint8_t i;

  rslt = bmp3_get_regs(BMP3_REG_CALIB_DATA, trim_param, 21, dev);
 23f074e:	2215      	movs	r2, #21
 23f0750:	463b      	mov	r3, r7
 23f0752:	2031      	movs	r0, #49	; 0x31
 23f0754:	a902      	add	r1, sp, #8
 23f0756:	f7f5 fddd 	bl	23e6314 <bmp3_get_regs>
  if (rslt == BMP3_OK) {
 23f075a:	4602      	mov	r2, r0
 23f075c:	2800      	cmp	r0, #0
 23f075e:	d1f0      	bne.n	23f0742 <_ZN15Adafruit_BMP3XX5_initEv+0x22>
  uint8_t crc = 0xFF;
 23f0760:	24ff      	movs	r4, #255	; 0xff
 23f0762:	a902      	add	r1, sp, #8
    for (i = 0; i < 21; i++) {
      crc = (uint8_t)cal_crc(crc, trim_param[i]);
 23f0764:	2608      	movs	r6, #8
 23f0766:	f811 3b01 	ldrb.w	r3, [r1], #1
  int8_t poly = 0x1D;
  int8_t var2;
  uint8_t i;

  for (i = 0; i < 8; i++) {
    if ((seed & 0x80) ^ (data & 0x80)) {
 23f076a:	ea84 0003 	eor.w	r0, r4, r3
      var2 = 0;
    }

    seed = (seed & 0x7F) << 1;
    data = (data & 0x7F) << 1;
    seed = seed ^ (uint8_t)(poly * var2);
 23f076e:	f010 0f80 	tst.w	r0, #128	; 0x80
 23f0772:	bf14      	ite	ne
 23f0774:	201d      	movne	r0, #29
 23f0776:	2000      	moveq	r0, #0
    seed = (seed & 0x7F) << 1;
 23f0778:	0064      	lsls	r4, r4, #1
  for (i = 0; i < 8; i++) {
 23f077a:	3e01      	subs	r6, #1
    seed = (seed & 0x7F) << 1;
 23f077c:	b2e4      	uxtb	r4, r4
    data = (data & 0x7F) << 1;
 23f077e:	005b      	lsls	r3, r3, #1
  for (i = 0; i < 8; i++) {
 23f0780:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    data = (data & 0x7F) << 1;
 23f0784:	b2db      	uxtb	r3, r3
    seed = seed ^ (uint8_t)(poly * var2);
 23f0786:	ea84 0400 	eor.w	r4, r4, r0
  for (i = 0; i < 8; i++) {
 23f078a:	d1ee      	bne.n	23f076a <_ZN15Adafruit_BMP3XX5_initEv+0x4a>
    for (i = 0; i < 21; i++) {
 23f078c:	3201      	adds	r2, #1
 23f078e:	b2d2      	uxtb	r2, r2
 23f0790:	2a15      	cmp	r2, #21
 23f0792:	d1e7      	bne.n	23f0764 <_ZN15Adafruit_BMP3XX5_initEv+0x44>
    crc = (crc ^ 0xFF);
 23f0794:	43e4      	mvns	r4, r4
    rslt = bmp3_get_regs(0x30, &stored_crc, 1, dev);
 23f0796:	463b      	mov	r3, r7
 23f0798:	2201      	movs	r2, #1
 23f079a:	2030      	movs	r0, #48	; 0x30
 23f079c:	f10d 0107 	add.w	r1, sp, #7
 23f07a0:	f7f5 fdb8 	bl	23e6314 <bmp3_get_regs>
    if (stored_crc != crc) {
 23f07a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23f07a8:	b2e4      	uxtb	r4, r4
 23f07aa:	42a3      	cmp	r3, r4
 23f07ac:	d1c9      	bne.n	23f0742 <_ZN15Adafruit_BMP3XX5_initEv+0x22>
  if (rslt != BMP3_OK)
 23f07ae:	2800      	cmp	r0, #0
 23f07b0:	d1c7      	bne.n	23f0742 <_ZN15Adafruit_BMP3XX5_initEv+0x22>
  the_sensor.settings.odr_filter.odr = odr;
 23f07b2:	2303      	movs	r3, #3
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 23f07b4:	2001      	movs	r0, #1
  the_sensor.settings.odr_filter.odr = odr;
 23f07b6:	f885 30e6 	strb.w	r3, [r5, #230]	; 0xe6
    _filterEnabled = false;
 23f07ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  the_sensor.settings.odr_filter.press_os = oversample;
 23f07be:	f885 60e3 	strb.w	r6, [r5, #227]	; 0xe3
  the_sensor.settings.odr_filter.temp_os = oversample;
 23f07c2:	f8a5 60e4 	strh.w	r6, [r5, #228]	; 0xe4
    _filterEnabled = false;
 23f07c6:	61ab      	str	r3, [r5, #24]
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 23f07c8:	f885 00e0 	strb.w	r0, [r5, #224]	; 0xe0
  return true;
 23f07cc:	e7ba      	b.n	23f0744 <_ZN15Adafruit_BMP3XX5_initEv+0x24>
 23f07ce:	bf00      	nop
 23f07d0:	1007ae60 	.word	0x1007ae60
 23f07d4:	1007ae64 	.word	0x1007ae64
 23f07d8:	023f070d 	.word	0x023f070d

023f07dc <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>:
bool Adafruit_BMP3XX::begin_I2C(uint8_t addr, TwoWire *theWire) {
 23f07dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f07de:	4604      	mov	r4, r0
  if (i2c_dev)
 23f07e0:	6900      	ldr	r0, [r0, #16]
bool Adafruit_BMP3XX::begin_I2C(uint8_t addr, TwoWire *theWire) {
 23f07e2:	460e      	mov	r6, r1
 23f07e4:	4617      	mov	r7, r2
  if (i2c_dev)
 23f07e6:	b110      	cbz	r0, 23f07ee <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x12>
    delete i2c_dev;
 23f07e8:	2110      	movs	r1, #16
 23f07ea:	f7f5 fc2e 	bl	23e604a <_ZdlPvj>
  if (spi_dev)
 23f07ee:	6965      	ldr	r5, [r4, #20]
 23f07f0:	b135      	cbz	r5, 23f0800 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x24>
    delete spi_dev;
 23f07f2:	4628      	mov	r0, r5
 23f07f4:	f000 fa39 	bl	23f0c6a <_ZN18Adafruit_SPIDeviceD1Ev>
 23f07f8:	2138      	movs	r1, #56	; 0x38
 23f07fa:	4628      	mov	r0, r5
 23f07fc:	f7f5 fc25 	bl	23e604a <_ZdlPvj>
  spi_dev = NULL;
 23f0800:	2300      	movs	r3, #0
  g_i2c_dev = i2c_dev = new Adafruit_I2CDevice(addr, theWire);
 23f0802:	2010      	movs	r0, #16
  spi_dev = NULL;
 23f0804:	6163      	str	r3, [r4, #20]
  g_i2c_dev = i2c_dev = new Adafruit_I2CDevice(addr, theWire);
 23f0806:	f7f5 fc1c 	bl	23e6042 <_Znwj>
 23f080a:	4605      	mov	r5, r0
 23f080c:	b118      	cbz	r0, 23f0816 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x3a>
 23f080e:	463a      	mov	r2, r7
 23f0810:	4631      	mov	r1, r6
 23f0812:	f000 f996 	bl	23f0b42 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
 23f0816:	4f0e      	ldr	r7, [pc, #56]	; (23f0850 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x74>)
  if (!i2c_dev->begin()) {
 23f0818:	2101      	movs	r1, #1
 23f081a:	4628      	mov	r0, r5
  g_i2c_dev = i2c_dev = new Adafruit_I2CDevice(addr, theWire);
 23f081c:	6125      	str	r5, [r4, #16]
 23f081e:	603d      	str	r5, [r7, #0]
  if (!i2c_dev->begin()) {
 23f0820:	f000 f9ab 	bl	23f0b7a <_ZN18Adafruit_I2CDevice5beginEb>
 23f0824:	b190      	cbz	r0, 23f084c <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x70>
  the_sensor.intf = BMP3_I2C_INTF;
 23f0826:	2301      	movs	r3, #1
 23f0828:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  the_sensor.read = &i2c_read;
 23f082c:	4b09      	ldr	r3, [pc, #36]	; (23f0854 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x78>)
  return _init();
 23f082e:	4620      	mov	r0, r4
  the_sensor.read = &i2c_read;
 23f0830:	63e3      	str	r3, [r4, #60]	; 0x3c
  the_sensor.write = &i2c_write;
 23f0832:	4b09      	ldr	r3, [pc, #36]	; (23f0858 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x7c>)
  the_sensor.chip_id = addr;
 23f0834:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  the_sensor.write = &i2c_write;
 23f0838:	6423      	str	r3, [r4, #64]	; 0x40
  the_sensor.intf_ptr = g_i2c_dev;
 23f083a:	683b      	ldr	r3, [r7, #0]
 23f083c:	6363      	str	r3, [r4, #52]	; 0x34
  the_sensor.dummy_byte = 0;
 23f083e:	2300      	movs	r3, #0
 23f0840:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 23f0844:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return _init();
 23f0848:	f7ff bf6a 	b.w	23f0720 <_ZN15Adafruit_BMP3XX5_initEv>
}
 23f084c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f084e:	bf00      	nop
 23f0850:	1007ae60 	.word	0x1007ae60
 23f0854:	023f06e1 	.word	0x023f06e1
 23f0858:	023f06b9 	.word	0x023f06b9

023f085c <_ZN15Adafruit_BMP3XX14performReadingEv>:
bool Adafruit_BMP3XX::performReading(void) {
 23f085c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  g_i2c_dev = i2c_dev;
 23f085e:	4b21      	ldr	r3, [pc, #132]	; (23f08e4 <_ZN15Adafruit_BMP3XX14performReadingEv+0x88>)
 23f0860:	6902      	ldr	r2, [r0, #16]
bool Adafruit_BMP3XX::performReading(void) {
 23f0862:	4604      	mov	r4, r0
  g_i2c_dev = i2c_dev;
 23f0864:	601a      	str	r2, [r3, #0]
  g_spi_dev = spi_dev;
 23f0866:	6942      	ldr	r2, [r0, #20]
 23f0868:	4b1f      	ldr	r3, [pc, #124]	; (23f08e8 <_ZN15Adafruit_BMP3XX14performReadingEv+0x8c>)
 23f086a:	601a      	str	r2, [r3, #0]
  the_sensor.settings.temp_en = BMP3_ENABLE;
 23f086c:	2301      	movs	r3, #1
  if (_tempOSEnabled) {
 23f086e:	7e42      	ldrb	r2, [r0, #25]
  the_sensor.settings.temp_en = BMP3_ENABLE;
 23f0870:	f880 30e2 	strb.w	r3, [r0, #226]	; 0xe2
  the_sensor.settings.press_en = BMP3_ENABLE;
 23f0874:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
  if (_presOSEnabled) {
 23f0878:	7ea3      	ldrb	r3, [r4, #26]
    settings_sel |= BMP3_SEL_TEMP_OS;
 23f087a:	2a00      	cmp	r2, #0
 23f087c:	bf0c      	ite	eq
 23f087e:	2004      	moveq	r0, #4
 23f0880:	2024      	movne	r0, #36	; 0x24
  if (_presOSEnabled) {
 23f0882:	b993      	cbnz	r3, 23f08aa <_ZN15Adafruit_BMP3XX14performReadingEv+0x4e>
  settings_sel |= BMP3_SEL_PRESS_EN;
 23f0884:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled) {
 23f0888:	7e23      	ldrb	r3, [r4, #24]
 23f088a:	b10b      	cbz	r3, 23f0890 <_ZN15Adafruit_BMP3XX14performReadingEv+0x34>
    settings_sel |= BMP3_SEL_IIR_FILTER;
 23f088c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  if (_ODREnabled) {
 23f0890:	7ee3      	ldrb	r3, [r4, #27]
 23f0892:	b10b      	cbz	r3, 23f0898 <_ZN15Adafruit_BMP3XX14performReadingEv+0x3c>
    settings_sel |= BMP3_SEL_ODR;
 23f0894:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  rslt = bmp3_set_sensor_settings(settings_sel, &the_sensor);
 23f0898:	f104 0630 	add.w	r6, r4, #48	; 0x30
 23f089c:	4631      	mov	r1, r6
 23f089e:	f7f5 fde5 	bl	23e646c <bmp3_set_sensor_settings>
  if (rslt != BMP3_OK)
 23f08a2:	b128      	cbz	r0, 23f08b0 <_ZN15Adafruit_BMP3XX14performReadingEv+0x54>
    return false;
 23f08a4:	2000      	movs	r0, #0
}
 23f08a6:	b004      	add	sp, #16
 23f08a8:	bd70      	pop	{r4, r5, r6, pc}
    settings_sel |= BMP3_SEL_PRESS_OS;
 23f08aa:	f040 0012 	orr.w	r0, r0, #18
 23f08ae:	e7eb      	b.n	23f0888 <_ZN15Adafruit_BMP3XX14performReadingEv+0x2c>
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 23f08b0:	2501      	movs	r5, #1
  rslt = bmp3_set_op_mode(&the_sensor);
 23f08b2:	4630      	mov	r0, r6
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 23f08b4:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
  rslt = bmp3_set_op_mode(&the_sensor);
 23f08b8:	f7f6 f85b 	bl	23e6972 <bmp3_set_op_mode>
  if (rslt != BMP3_OK)
 23f08bc:	2800      	cmp	r0, #0
 23f08be:	d1f1      	bne.n	23f08a4 <_ZN15Adafruit_BMP3XX14performReadingEv+0x48>
  rslt = bmp3_get_sensor_data(sensor_comp, &data, &the_sensor);
 23f08c0:	4632      	mov	r2, r6
 23f08c2:	4669      	mov	r1, sp
 23f08c4:	2003      	movs	r0, #3
 23f08c6:	f7f6 f8c9 	bl	23e6a5c <bmp3_get_sensor_data>
  if (rslt != BMP3_OK)
 23f08ca:	2800      	cmp	r0, #0
 23f08cc:	d1ea      	bne.n	23f08a4 <_ZN15Adafruit_BMP3XX14performReadingEv+0x48>
  temperature = data.temperature;
 23f08ce:	e9dd 2300 	ldrd	r2, r3, [sp]
  return true;
 23f08d2:	4628      	mov	r0, r5
  temperature = data.temperature;
 23f08d4:	e9c4 2300 	strd	r2, r3, [r4]
  pressure = data.pressure;
 23f08d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23f08dc:	e9c4 2302 	strd	r2, r3, [r4, #8]
  return true;
 23f08e0:	e7e1      	b.n	23f08a6 <_ZN15Adafruit_BMP3XX14performReadingEv+0x4a>
 23f08e2:	bf00      	nop
 23f08e4:	1007ae60 	.word	0x1007ae60
 23f08e8:	1007ae64 	.word	0x1007ae64

023f08ec <_ZN15Adafruit_BMP3XX15readTemperatureEv>:
float Adafruit_BMP3XX::readTemperature(void) {
 23f08ec:	b510      	push	{r4, lr}
 23f08ee:	4604      	mov	r4, r0
  performReading();
 23f08f0:	f7ff ffb4 	bl	23f085c <_ZN15Adafruit_BMP3XX14performReadingEv>
  return temperature;
 23f08f4:	e9d4 0100 	ldrd	r0, r1, [r4]
 23f08f8:	f7f5 f836 	bl	23e5968 <__aeabi_d2f>
}
 23f08fc:	ee00 0a10 	vmov	s0, r0
 23f0900:	bd10      	pop	{r4, pc}

023f0902 <_ZN15Adafruit_BMP3XX12readPressureEv>:
float Adafruit_BMP3XX::readPressure(void) {
 23f0902:	b510      	push	{r4, lr}
 23f0904:	4604      	mov	r4, r0
  performReading();
 23f0906:	f7ff ffa9 	bl	23f085c <_ZN15Adafruit_BMP3XX14performReadingEv>
  return pressure;
 23f090a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23f090e:	f7f5 f82b 	bl	23e5968 <__aeabi_d2f>
}
 23f0912:	ee00 0a10 	vmov	s0, r0
 23f0916:	bd10      	pop	{r4, pc}

023f0918 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
 23f0918:	b530      	push	{r4, r5, lr}
                                                 uint16_t reg_addr,
                                                 uint8_t width,
                                                 uint8_t byteorder,
                                                 uint8_t address_width) {
 23f091a:	2500      	movs	r5, #0
  _i2cdevice = i2cdevice;
  _spidevice = NULL;
  _addrwidth = address_width;
  _address = reg_addr;
 23f091c:	8142      	strh	r2, [r0, #10]
  _spidevice = NULL;
 23f091e:	e9c0 1500 	strd	r1, r5, [r0]
  _byteorder = byteorder;
 23f0922:	f89d 200c 	ldrb.w	r2, [sp, #12]
  _addrwidth = address_width;
 23f0926:	f89d 1010 	ldrb.w	r1, [sp, #16]
                                                 uint8_t address_width) {
 23f092a:	6145      	str	r5, [r0, #20]
  _addrwidth = address_width;
 23f092c:	7341      	strb	r1, [r0, #13]
  _byteorder = byteorder;
 23f092e:	7382      	strb	r2, [r0, #14]
  _width = width;
 23f0930:	7303      	strb	r3, [r0, #12]
}
 23f0932:	bd30      	pop	{r4, r5, pc}

023f0934 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(
 23f0934:	b530      	push	{r4, r5, lr}
    Adafruit_I2CDevice *i2cdevice, Adafruit_SPIDevice *spidevice,
    Adafruit_BusIO_SPIRegType type, uint16_t reg_addr, uint8_t width,
    uint8_t byteorder, uint8_t address_width) {
 23f0936:	2500      	movs	r5, #0
  _spidevice = spidevice;
  _i2cdevice = i2cdevice;
  _spiregtype = type;
 23f0938:	7203      	strb	r3, [r0, #8]
  _addrwidth = address_width;
 23f093a:	f89d 3018 	ldrb.w	r3, [sp, #24]
  _i2cdevice = i2cdevice;
 23f093e:	e9c0 1200 	strd	r1, r2, [r0]
  _addrwidth = address_width;
 23f0942:	7343      	strb	r3, [r0, #13]
  _address = reg_addr;
 23f0944:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    uint8_t byteorder, uint8_t address_width) {
 23f0948:	6145      	str	r5, [r0, #20]
  _address = reg_addr;
 23f094a:	8143      	strh	r3, [r0, #10]
  _byteorder = byteorder;
 23f094c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23f0950:	7383      	strb	r3, [r0, #14]
  _width = width;
 23f0952:	f89d 3010 	ldrb.w	r3, [sp, #16]
 23f0956:	7303      	strb	r3, [r0, #12]
}
 23f0958:	bd30      	pop	{r4, r5, pc}

023f095a <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
 23f095a:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
 23f095c:	8945      	ldrh	r5, [r0, #10]
                           (uint8_t)(_address >> 8)};
 23f095e:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
 23f0960:	4603      	mov	r3, r0

  if (_i2cdevice) {
 23f0962:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
 23f0964:	b085      	sub	sp, #20
                           (uint8_t)(_address >> 8)};
 23f0966:	0a2d      	lsrs	r5, r5, #8
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
 23f0968:	460e      	mov	r6, r1
 23f096a:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
 23f096c:	f88d 400c 	strb.w	r4, [sp, #12]
 23f0970:	f88d 500d 	strb.w	r5, [sp, #13]
  if (_i2cdevice) {
 23f0974:	b140      	cbz	r0, 23f0988 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2e>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
 23f0976:	7b5b      	ldrb	r3, [r3, #13]
 23f0978:	9301      	str	r3, [sp, #4]
 23f097a:	ab03      	add	r3, sp, #12
 23f097c:	9300      	str	r3, [sp, #0]
 23f097e:	2301      	movs	r3, #1
 23f0980:	f000 f90a 	bl	23f0b98 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
 23f0984:	b005      	add	sp, #20
 23f0986:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
 23f0988:	6858      	ldr	r0, [r3, #4]
 23f098a:	2800      	cmp	r0, #0
 23f098c:	d0fa      	beq.n	23f0984 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
 23f098e:	f893 e008 	ldrb.w	lr, [r3, #8]
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
 23f0992:	f893 c00d 	ldrb.w	ip, [r3, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
 23f0996:	f1be 0f03 	cmp.w	lr, #3
 23f099a:	d10c      	bne.n	23f09b6 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5c>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
 23f099c:	f10c 0301 	add.w	r3, ip, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
 23f09a0:	f025 0501 	bic.w	r5, r5, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
 23f09a4:	9300      	str	r3, [sp, #0]
      addrbuffer[0] =
 23f09a6:	f88d 500c 	strb.w	r5, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
 23f09aa:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
 23f09ae:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
 23f09b0:	f000 fa15 	bl	23f0dde <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
 23f09b4:	e7e6      	b.n	23f0984 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
 23f09b6:	f1be 0f00 	cmp.w	lr, #0
 23f09ba:	d109      	bne.n	23f09d0 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x76>
      addrbuffer[0] &= ~0x80;
 23f09bc:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
 23f09c0:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
 23f09c4:	463a      	mov	r2, r7
 23f09c6:	4631      	mov	r1, r6
 23f09c8:	f8cd c000 	str.w	ip, [sp]
 23f09cc:	ab03      	add	r3, sp, #12
 23f09ce:	e7ef      	b.n	23f09b0 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
 23f09d0:	f1be 0f02 	cmp.w	lr, #2
 23f09d4:	d102      	bne.n	23f09dc <_ZN23Adafruit_BusIO_Register5writeEPhh+0x82>
      addrbuffer[0] |= 0x80;
 23f09d6:	f064 047f 	orn	r4, r4, #127	; 0x7f
 23f09da:	e7f1      	b.n	23f09c0 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x66>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
 23f09dc:	f1be 0f01 	cmp.w	lr, #1
      addrbuffer[0] &= ~0x80;
 23f09e0:	bf01      	itttt	eq
 23f09e2:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 23f09e6:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
 23f09ea:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 23f09ee:	f88d 300c 	strbeq.w	r3, [sp, #12]
 23f09f2:	e7e7      	b.n	23f09c4 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6a>

023f09f4 <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
 23f09f4:	460b      	mov	r3, r1
 23f09f6:	b4f0      	push	{r4, r5, r6, r7}
  if (numbytes == 0) {
 23f09f8:	b902      	cbnz	r2, 23f09fc <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
 23f09fa:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
 23f09fc:	2a04      	cmp	r2, #4
 23f09fe:	d814      	bhi.n	23f0a2a <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
 23f0a00:	f100 050f 	add.w	r5, r0, #15
 23f0a04:	4629      	mov	r1, r5
 23f0a06:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
 23f0a08:	1884      	adds	r4, r0, r2
 23f0a0a:	4284      	cmp	r4, r0
 23f0a0c:	d009      	beq.n	23f0a22 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
 23f0a0e:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
 23f0a10:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
 23f0a12:	b927      	cbnz	r7, 23f0a1e <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
 23f0a14:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
 23f0a16:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
 23f0a18:	3501      	adds	r5, #1
 23f0a1a:	3c01      	subs	r4, #1
 23f0a1c:	e7f5      	b.n	23f0a0a <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
 23f0a1e:	73a6      	strb	r6, [r4, #14]
 23f0a20:	e7f9      	b.n	23f0a16 <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
 23f0a22:	4620      	mov	r0, r4
}
 23f0a24:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
 23f0a26:	f7ff bf98 	b.w	23f095a <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
 23f0a2a:	2000      	movs	r0, #0
 23f0a2c:	bcf0      	pop	{r4, r5, r6, r7}
 23f0a2e:	4770      	bx	lr

023f0a30 <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
 23f0a30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
 23f0a32:	8946      	ldrh	r6, [r0, #10]
                           (uint8_t)(_address >> 8)};
 23f0a34:	7a85      	ldrb	r5, [r0, #10]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
 23f0a36:	4604      	mov	r4, r0

  if (_i2cdevice) {
 23f0a38:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
 23f0a3a:	0a36      	lsrs	r6, r6, #8
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
 23f0a3c:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
 23f0a3e:	f88d 500c 	strb.w	r5, [sp, #12]
 23f0a42:	f88d 600d 	strb.w	r6, [sp, #13]
  if (_i2cdevice) {
 23f0a46:	b140      	cbz	r0, 23f0a5a <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
 23f0a48:	2100      	movs	r1, #0
 23f0a4a:	e9cd 2100 	strd	r2, r1, [sp]
 23f0a4e:	a903      	add	r1, sp, #12
 23f0a50:	7b62      	ldrb	r2, [r4, #13]
 23f0a52:	f000 f8f3 	bl	23f0c3c <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
 23f0a56:	b004      	add	sp, #16
 23f0a58:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
 23f0a5a:	6860      	ldr	r0, [r4, #4]
 23f0a5c:	2800      	cmp	r0, #0
 23f0a5e:	d0fa      	beq.n	23f0a56 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
 23f0a60:	7a21      	ldrb	r1, [r4, #8]
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
 23f0a62:	7b64      	ldrb	r4, [r4, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
 23f0a64:	2903      	cmp	r1, #3
 23f0a66:	d10d      	bne.n	23f0a84 <_ZN23Adafruit_BusIO_Register4readEPhh+0x54>
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
 23f0a68:	21ff      	movs	r1, #255	; 0xff
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
 23f0a6a:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
 23f0a6e:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
 23f0a72:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
 23f0a76:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
 23f0a7a:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
 23f0a7c:	a903      	add	r1, sp, #12
 23f0a7e:	f000 f9e0 	bl	23f0e42 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
 23f0a82:	e7e8      	b.n	23f0a56 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
 23f0a84:	b941      	cbnz	r1, 23f0a98 <_ZN23Adafruit_BusIO_Register4readEPhh+0x68>
      addrbuffer[0] |= 0x80;
 23f0a86:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
 23f0a8a:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
 23f0a8e:	21ff      	movs	r1, #255	; 0xff
 23f0a90:	e9cd 2100 	strd	r2, r1, [sp]
 23f0a94:	4622      	mov	r2, r4
 23f0a96:	e7f1      	b.n	23f0a7c <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
 23f0a98:	2902      	cmp	r1, #2
 23f0a9a:	d102      	bne.n	23f0aa2 <_ZN23Adafruit_BusIO_Register4readEPhh+0x72>
      addrbuffer[0] &= ~0x80;
 23f0a9c:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 23f0aa0:	e7f3      	b.n	23f0a8a <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
 23f0aa2:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
 23f0aa4:	bf02      	ittt	eq
 23f0aa6:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
 23f0aaa:	f061 013f 	orneq	r1, r1, #63	; 0x3f
 23f0aae:	f88d 100c 	strbeq.w	r1, [sp, #12]
 23f0ab2:	e7ec      	b.n	23f0a8e <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>

023f0ab4 <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
 23f0ab4:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
 23f0ab6:	f100 050f 	add.w	r5, r0, #15
 23f0aba:	4629      	mov	r1, r5
 23f0abc:	7b02      	ldrb	r2, [r0, #12]
uint32_t Adafruit_BusIO_Register::read(void) {
 23f0abe:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
 23f0ac0:	f7ff ffb6 	bl	23f0a30 <_ZN23Adafruit_BusIO_Register4readEPhh>
 23f0ac4:	b178      	cbz	r0, 23f0ae6 <_ZN23Adafruit_BusIO_Register4readEv+0x32>
 23f0ac6:	4629      	mov	r1, r5
  uint32_t value = 0;
 23f0ac8:	2000      	movs	r0, #0
 23f0aca:	7b22      	ldrb	r2, [r4, #12]
 23f0acc:	4422      	add	r2, r4
  for (int i = 0; i < _width; i++) {
 23f0ace:	42a2      	cmp	r2, r4
 23f0ad0:	d00b      	beq.n	23f0aea <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
 23f0ad2:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
 23f0ad4:	7ba0      	ldrb	r0, [r4, #14]
 23f0ad6:	b920      	cbnz	r0, 23f0ae2 <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
 23f0ad8:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
 23f0ada:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
 23f0adc:	3a01      	subs	r2, #1
 23f0ade:	3101      	adds	r1, #1
 23f0ae0:	e7f5      	b.n	23f0ace <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
 23f0ae2:	7808      	ldrb	r0, [r1, #0]
 23f0ae4:	e7f9      	b.n	23f0ada <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
 23f0ae6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23f0aea:	bd38      	pop	{r3, r4, r5, pc}

023f0aec <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
 23f0aec:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
 23f0aee:	6001      	str	r1, [r0, #0]
  _bits = bits;
 23f0af0:	7102      	strb	r2, [r0, #4]
  _shift = shift;
 23f0af2:	7143      	strb	r3, [r0, #5]
}
 23f0af4:	bd10      	pop	{r4, pc}

023f0af6 <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
 23f0af6:	b510      	push	{r4, lr}
 23f0af8:	4604      	mov	r4, r0
  uint32_t val = _register->read();
 23f0afa:	6800      	ldr	r0, [r0, #0]
 23f0afc:	f7ff ffda 	bl	23f0ab4 <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
 23f0b00:	2301      	movs	r3, #1
 23f0b02:	7922      	ldrb	r2, [r4, #4]
 23f0b04:	4093      	lsls	r3, r2
  val >>= _shift;
 23f0b06:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
 23f0b08:	3b01      	subs	r3, #1
  val >>= _shift;
 23f0b0a:	40d0      	lsrs	r0, r2
}
 23f0b0c:	4018      	ands	r0, r3
 23f0b0e:	bd10      	pop	{r4, pc}

023f0b10 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
 23f0b10:	b570      	push	{r4, r5, r6, lr}
 23f0b12:	4604      	mov	r4, r0
  uint32_t val = _register->read();
 23f0b14:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
 23f0b16:	460e      	mov	r6, r1
  uint32_t val = _register->read();
 23f0b18:	f7ff ffcc 	bl	23f0ab4 <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
 23f0b1c:	2201      	movs	r2, #1
 23f0b1e:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
 23f0b20:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits)) - 1;
 23f0b22:	409a      	lsls	r2, r3
 23f0b24:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
 23f0b26:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;          // remove the current data at that spot
 23f0b2a:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
 23f0b2e:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
 23f0b30:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
 23f0b32:	fa03 f101 	lsl.w	r1, r3, r1
  return _register->write(val, _register->width());
 23f0b36:	4329      	orrs	r1, r5
 23f0b38:	7b02      	ldrb	r2, [r0, #12]
}
 23f0b3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
 23f0b3e:	f7ff bf59 	b.w	23f09f4 <_ZN23Adafruit_BusIO_Register5writeEmh>

023f0b42 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
 23f0b42:	6042      	str	r2, [r0, #4]
  _begun = false;
 23f0b44:	2200      	movs	r2, #0
 23f0b46:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
 23f0b48:	2220      	movs	r2, #32
  _addr = addr;
 23f0b4a:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
 23f0b4c:	60c2      	str	r2, [r0, #12]
#endif
}
 23f0b4e:	4770      	bx	lr

023f0b50 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
 23f0b50:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
 23f0b52:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
 23f0b54:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
 23f0b56:	b153      	cbz	r3, 23f0b6e <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
 23f0b58:	7821      	ldrb	r1, [r4, #0]
 23f0b5a:	6860      	ldr	r0, [r4, #4]
 23f0b5c:	f008 f9ac 	bl	23f8eb8 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
 23f0b60:	6860      	ldr	r0, [r4, #4]
 23f0b62:	f008 f9b4 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>
 23f0b66:	fab0 f080 	clz	r0, r0
 23f0b6a:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
 23f0b6c:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
 23f0b6e:	2101      	movs	r1, #1
 23f0b70:	f000 f803 	bl	23f0b7a <_ZN18Adafruit_I2CDevice5beginEb>
 23f0b74:	2800      	cmp	r0, #0
 23f0b76:	d1ef      	bne.n	23f0b58 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
 23f0b78:	e7f8      	b.n	23f0b6c <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

023f0b7a <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 23f0b7a:	b538      	push	{r3, r4, r5, lr}
 23f0b7c:	4604      	mov	r4, r0
  _wire->begin();
 23f0b7e:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 23f0b80:	460d      	mov	r5, r1
  _wire->begin();
 23f0b82:	f008 f96f 	bl	23f8e64 <_ZN7TwoWire5beginEv>
  _begun = true;
 23f0b86:	2001      	movs	r0, #1
 23f0b88:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
 23f0b8a:	b125      	cbz	r5, 23f0b96 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
 23f0b8c:	4620      	mov	r0, r4
}
 23f0b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
 23f0b92:	f7ff bfdd 	b.w	23f0b50 <_ZN18Adafruit_I2CDevice8detectedEv>
}
 23f0b96:	bd38      	pop	{r3, r4, r5, pc}

023f0b98 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
 23f0b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23f0b9c:	461f      	mov	r7, r3
 23f0b9e:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
  if ((len + prefix_len) > maxBufferSize()) {
 23f0ba2:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
 23f0ba4:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
 23f0ba6:	4432      	add	r2, r6
 23f0ba8:	429a      	cmp	r2, r3
                               size_t prefix_len) {
 23f0baa:	4604      	mov	r4, r0
 23f0bac:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
 23f0bae:	d902      	bls.n	23f0bb6 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
 23f0bb0:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("Failed to send!");
#endif
    return false;
  }
}
 23f0bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
 23f0bb6:	7801      	ldrb	r1, [r0, #0]
 23f0bb8:	6840      	ldr	r0, [r0, #4]
 23f0bba:	f008 f97d 	bl	23f8eb8 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
 23f0bbe:	b97e      	cbnz	r6, 23f0be0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
 23f0bc0:	6860      	ldr	r0, [r4, #4]
 23f0bc2:	462a      	mov	r2, r5
 23f0bc4:	6803      	ldr	r3, [r0, #0]
 23f0bc6:	4641      	mov	r1, r8
 23f0bc8:	68db      	ldr	r3, [r3, #12]
 23f0bca:	4798      	blx	r3
 23f0bcc:	4285      	cmp	r5, r0
 23f0bce:	d1ef      	bne.n	23f0bb0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
 23f0bd0:	4639      	mov	r1, r7
 23f0bd2:	6860      	ldr	r0, [r4, #4]
 23f0bd4:	f008 f977 	bl	23f8ec6 <_ZN7TwoWire15endTransmissionEh>
 23f0bd8:	fab0 f080 	clz	r0, r0
 23f0bdc:	0940      	lsrs	r0, r0, #5
 23f0bde:	e7e8      	b.n	23f0bb2 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
 23f0be0:	f1b9 0f00 	cmp.w	r9, #0
 23f0be4:	d0ec      	beq.n	23f0bc0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
 23f0be6:	6860      	ldr	r0, [r4, #4]
 23f0be8:	4632      	mov	r2, r6
 23f0bea:	6803      	ldr	r3, [r0, #0]
 23f0bec:	4649      	mov	r1, r9
 23f0bee:	68db      	ldr	r3, [r3, #12]
 23f0bf0:	4798      	blx	r3
 23f0bf2:	4286      	cmp	r6, r0
 23f0bf4:	d1dc      	bne.n	23f0bb0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
 23f0bf6:	e7e3      	b.n	23f0bc0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

023f0bf8 <_ZN18Adafruit_I2CDevice4readEPhjb>:
 *    @param  buffer Pointer to buffer of data to read into
 *    @param  len Number of bytes from buffer to read.
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
 23f0bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f0bfc:	4615      	mov	r5, r2
  if (len > maxBufferSize()) {
 23f0bfe:	68c2      	ldr	r2, [r0, #12]
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
 23f0c00:	4604      	mov	r4, r0
  if (len > maxBufferSize()) {
 23f0c02:	42aa      	cmp	r2, r5
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
 23f0c04:	460e      	mov	r6, r1
  if (len > maxBufferSize()) {
 23f0c06:	d314      	bcc.n	23f0c32 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
  }

#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
 23f0c08:	7801      	ldrb	r1, [r0, #0]
 23f0c0a:	b2ea      	uxtb	r2, r5
 23f0c0c:	6840      	ldr	r0, [r0, #4]
 23f0c0e:	f008 f93c 	bl	23f8e8a <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
 23f0c12:	4285      	cmp	r5, r0
 23f0c14:	d10d      	bne.n	23f0c32 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
 23f0c16:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
 23f0c18:	fa1f f887 	uxth.w	r8, r7
 23f0c1c:	4545      	cmp	r5, r8
 23f0c1e:	f107 0701 	add.w	r7, r7, #1
 23f0c22:	d909      	bls.n	23f0c38 <_ZN18Adafruit_I2CDevice4readEPhjb+0x40>
    buffer[i] = _wire->read();
 23f0c24:	6860      	ldr	r0, [r4, #4]
 23f0c26:	6803      	ldr	r3, [r0, #0]
 23f0c28:	695b      	ldr	r3, [r3, #20]
 23f0c2a:	4798      	blx	r3
 23f0c2c:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
 23f0c30:	e7f2      	b.n	23f0c18 <_ZN18Adafruit_I2CDevice4readEPhjb+0x20>
    return false;
 23f0c32:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 23f0c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f0c38:	2001      	movs	r0, #1
 23f0c3a:	e7fb      	b.n	23f0c34 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3c>

023f0c3c <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
 23f0c3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f0c3e:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
 23f0c40:	2300      	movs	r3, #0
 23f0c42:	e9cd 3300 	strd	r3, r3, [sp]
 23f0c46:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
 23f0c4a:	4604      	mov	r4, r0
 23f0c4c:	9e06      	ldr	r6, [sp, #24]
  if (!write(write_buffer, write_len, stop)) {
 23f0c4e:	f7ff ffa3 	bl	23f0b98 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 23f0c52:	b140      	cbz	r0, 23f0c66 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
 23f0c54:	2301      	movs	r3, #1
 23f0c56:	4632      	mov	r2, r6
 23f0c58:	4629      	mov	r1, r5
 23f0c5a:	4620      	mov	r0, r4
}
 23f0c5c:	b002      	add	sp, #8
 23f0c5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
 23f0c62:	f7ff bfc9 	b.w	23f0bf8 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
 23f0c66:	b002      	add	sp, #8
 23f0c68:	bd70      	pop	{r4, r5, r6, pc}

023f0c6a <_ZN18Adafruit_SPIDeviceD1Ev>:
}

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
 23f0c6a:	b510      	push	{r4, lr}
 23f0c6c:	4604      	mov	r4, r0
  if (_spiSetting) {
 23f0c6e:	6840      	ldr	r0, [r0, #4]
 23f0c70:	b110      	cbz	r0, 23f0c78 <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
 23f0c72:	6803      	ldr	r3, [r0, #0]
 23f0c74:	689b      	ldr	r3, [r3, #8]
 23f0c76:	4798      	blx	r3
    _spiSetting = nullptr;
  }
}
 23f0c78:	4620      	mov	r0, r4
 23f0c7a:	bd10      	pop	{r4, pc}

023f0c7c <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
 23f0c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f0c80:	4604      	mov	r4, r0
  if (_spi) {
 23f0c82:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
 23f0c84:	460d      	mov	r5, r1
 23f0c86:	b085      	sub	sp, #20
  if (_spi) {
 23f0c88:	b140      	cbz	r0, 23f0c9c <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
 23f0c8a:	2300      	movs	r3, #0
 23f0c8c:	9300      	str	r3, [sp, #0]
 23f0c8e:	4613      	mov	r3, r2
 23f0c90:	460a      	mov	r2, r1
 23f0c92:	f008 fe6f 	bl	23f9974 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
 23f0c96:	b005      	add	sp, #20
 23f0c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
 23f0c9c:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23f0c9e:	68a0      	ldr	r0, [r4, #8]
    startbit = 0x80;
 23f0ca0:	2b00      	cmp	r3, #0
 23f0ca2:	bf0c      	ite	eq
 23f0ca4:	f04f 0b01 	moveq.w	fp, #1
 23f0ca8:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
 23f0cac:	780b      	ldrb	r3, [r1, #0]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23f0cae:	4f44      	ldr	r7, [pc, #272]	; (23f0dc0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x144>)
  bool towrite, lastmosi = !(buffer[0] & startbit);
 23f0cb0:	ea1b 0f03 	tst.w	fp, r3
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23f0cb4:	fbb7 f7f0 	udiv	r7, r7, r0
  bool towrite, lastmosi = !(buffer[0] & startbit);
 23f0cb8:	bf0c      	ite	eq
 23f0cba:	f04f 0901 	moveq.w	r9, #1
 23f0cbe:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23f0cc2:	188b      	adds	r3, r1, r2
 23f0cc4:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
 23f0cc6:	9303      	str	r3, [sp, #12]
 23f0cc8:	9b03      	ldr	r3, [sp, #12]
 23f0cca:	42ab      	cmp	r3, r5
 23f0ccc:	d0e3      	beq.n	23f0c96 <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    for (uint8_t b = startbit; b != 0;
 23f0cce:	465e      	mov	r6, fp
    uint8_t reply = 0;
 23f0cd0:	f04f 0800 	mov.w	r8, #0
    uint8_t send = buffer[i];
 23f0cd4:	f895 a000 	ldrb.w	sl, [r5]
      if (bitdelay_us) {
 23f0cd8:	b117      	cbz	r7, 23f0ce0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x64>
 23f0cda:	4638      	mov	r0, r7
 23f0cdc:	f006 fc62 	bl	23f75a4 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
 23f0ce0:	7b63      	ldrb	r3, [r4, #13]
 23f0ce2:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 23f0ce6:	d141      	bne.n	23f0d6c <_ZN18Adafruit_SPIDevice8transferEPhj+0xf0>
        if ((_mosi != -1) && (lastmosi != towrite)) {
 23f0ce8:	f994 3010 	ldrsb.w	r3, [r4, #16]
 23f0cec:	1c5a      	adds	r2, r3, #1
 23f0cee:	d00f      	beq.n	23f0d10 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
        towrite = send & b;
 23f0cf0:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
 23f0cf4:	bf14      	ite	ne
 23f0cf6:	2301      	movne	r3, #1
 23f0cf8:	2300      	moveq	r3, #0
 23f0cfa:	454b      	cmp	r3, r9
 23f0cfc:	d008      	beq.n	23f0d10 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
            *mosiPort |= mosiPinMask;
 23f0cfe:	6963      	ldr	r3, [r4, #20]
 23f0d00:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f0d02:	681a      	ldr	r2, [r3, #0]
          if (towrite)
 23f0d04:	2900      	cmp	r1, #0
 23f0d06:	d02c      	beq.n	23f0d62 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe6>
            *mosiPort |= mosiPinMask;
 23f0d08:	f04f 0901 	mov.w	r9, #1
 23f0d0c:	4302      	orrs	r2, r0
 23f0d0e:	601a      	str	r2, [r3, #0]
        *clkPort |= clkPinMask; // Clock high
 23f0d10:	69a1      	ldr	r1, [r4, #24]
 23f0d12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23f0d14:	680a      	ldr	r2, [r1, #0]
 23f0d16:	4313      	orrs	r3, r2
 23f0d18:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
 23f0d1a:	b117      	cbz	r7, 23f0d22 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa6>
 23f0d1c:	4638      	mov	r0, r7
 23f0d1e:	f006 fc41 	bl	23f75a4 <HAL_Delay_Microseconds>
        if (_miso != -1) {
 23f0d22:	f994 3011 	ldrsb.w	r3, [r4, #17]
 23f0d26:	3301      	adds	r3, #1
 23f0d28:	d006      	beq.n	23f0d38 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbc>
          if (*misoPort & misoPinMask) {
 23f0d2a:	69e3      	ldr	r3, [r4, #28]
 23f0d2c:	681a      	ldr	r2, [r3, #0]
 23f0d2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 23f0d30:	421a      	tst	r2, r3
            reply |= b;
 23f0d32:	bf18      	it	ne
 23f0d34:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
 23f0d38:	69a1      	ldr	r1, [r4, #24]
 23f0d3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23f0d3c:	680a      	ldr	r2, [r1, #0]
 23f0d3e:	ea22 0303 	bic.w	r3, r2, r3
 23f0d42:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
 23f0d44:	f994 3011 	ldrsb.w	r3, [r4, #17]
 23f0d48:	3301      	adds	r3, #1
        buffer[i] = reply;
 23f0d4a:	bf18      	it	ne
 23f0d4c:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
 23f0d50:	7b23      	ldrb	r3, [r4, #12]
 23f0d52:	2b00      	cmp	r3, #0
 23f0d54:	d132      	bne.n	23f0dbc <_ZN18Adafruit_SPIDevice8transferEPhj+0x140>
 23f0d56:	0076      	lsls	r6, r6, #1
 23f0d58:	b2f6      	uxtb	r6, r6
 23f0d5a:	2e00      	cmp	r6, #0
 23f0d5c:	d1bc      	bne.n	23f0cd8 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5c>
  for (size_t i = 0; i < len; i++) {
 23f0d5e:	3501      	adds	r5, #1
 23f0d60:	e7b2      	b.n	23f0cc8 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4c>
            *mosiPort &= ~mosiPinMask;
 23f0d62:	ea22 0200 	bic.w	r2, r2, r0
 23f0d66:	4689      	mov	r9, r1
 23f0d68:	601a      	str	r2, [r3, #0]
 23f0d6a:	e7d1      	b.n	23f0d10 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
        *clkPort |= clkPinMask; // Clock high
 23f0d6c:	69a1      	ldr	r1, [r4, #24]
 23f0d6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23f0d70:	680a      	ldr	r2, [r1, #0]
 23f0d72:	4313      	orrs	r3, r2
 23f0d74:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
 23f0d76:	b117      	cbz	r7, 23f0d7e <_ZN18Adafruit_SPIDevice8transferEPhj+0x102>
 23f0d78:	4638      	mov	r0, r7
 23f0d7a:	f006 fc13 	bl	23f75a4 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
 23f0d7e:	f994 3010 	ldrsb.w	r3, [r4, #16]
 23f0d82:	3301      	adds	r3, #1
 23f0d84:	d008      	beq.n	23f0d98 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11c>
            *mosiPort |= mosiPinMask;
 23f0d86:	6963      	ldr	r3, [r4, #20]
 23f0d88:	6a61      	ldr	r1, [r4, #36]	; 0x24
 23f0d8a:	681a      	ldr	r2, [r3, #0]
          if (send & b)
 23f0d8c:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
 23f0d90:	bf14      	ite	ne
 23f0d92:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
 23f0d94:	438a      	biceq	r2, r1
 23f0d96:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
 23f0d98:	69a1      	ldr	r1, [r4, #24]
 23f0d9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23f0d9c:	680a      	ldr	r2, [r1, #0]
 23f0d9e:	ea22 0303 	bic.w	r3, r2, r3
 23f0da2:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
 23f0da4:	f994 3011 	ldrsb.w	r3, [r4, #17]
 23f0da8:	3301      	adds	r3, #1
 23f0daa:	d0cb      	beq.n	23f0d44 <_ZN18Adafruit_SPIDevice8transferEPhj+0xc8>
          if (*misoPort & misoPinMask) {
 23f0dac:	69e3      	ldr	r3, [r4, #28]
 23f0dae:	681a      	ldr	r2, [r3, #0]
 23f0db0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 23f0db2:	421a      	tst	r2, r3
            reply |= b;
 23f0db4:	bf18      	it	ne
 23f0db6:	ea46 0808 	orrne.w	r8, r6, r8
 23f0dba:	e7c3      	b.n	23f0d44 <_ZN18Adafruit_SPIDevice8transferEPhj+0xc8>
    for (uint8_t b = startbit; b != 0;
 23f0dbc:	0876      	lsrs	r6, r6, #1
 23f0dbe:	e7cc      	b.n	23f0d5a <_ZN18Adafruit_SPIDevice8transferEPhj+0xde>
 23f0dc0:	0007a120 	.word	0x0007a120

023f0dc4 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
 23f0dc4:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
 23f0dc6:	2201      	movs	r2, #1
  uint8_t data = send;
 23f0dc8:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
 23f0dcc:	f10d 0107 	add.w	r1, sp, #7
 23f0dd0:	f7ff ff54 	bl	23f0c7c <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
 23f0dd4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 23f0dd8:	b003      	add	sp, #12
 23f0dda:	f85d fb04 	ldr.w	pc, [sp], #4

023f0dde <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
 23f0dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f0de2:	4604      	mov	r4, r0
  if (_spi) {
 23f0de4:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
 23f0de6:	460e      	mov	r6, r1
 23f0de8:	4617      	mov	r7, r2
 23f0dea:	461d      	mov	r5, r3
  if (_spi) {
 23f0dec:	b110      	cbz	r0, 23f0df4 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
 23f0dee:	6861      	ldr	r1, [r4, #4]
 23f0df0:	f008 fd4c 	bl	23f988c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
 23f0df4:	f994 000e 	ldrsb.w	r0, [r4, #14]
 23f0df8:	2100      	movs	r1, #0
 23f0dfa:	b280      	uxth	r0, r0
 23f0dfc:	f009 f9f9 	bl	23fa1f2 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
 23f0e00:	9b06      	ldr	r3, [sp, #24]
 23f0e02:	eb05 0803 	add.w	r8, r5, r3
 23f0e06:	4545      	cmp	r5, r8
 23f0e08:	d108      	bne.n	23f0e1c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
 23f0e0a:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
 23f0e0c:	42b7      	cmp	r7, r6
 23f0e0e:	d00b      	beq.n	23f0e28 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
 23f0e10:	4620      	mov	r0, r4
 23f0e12:	f816 1b01 	ldrb.w	r1, [r6], #1
 23f0e16:	f7ff ffd5 	bl	23f0dc4 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
 23f0e1a:	e7f7      	b.n	23f0e0c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
 23f0e1c:	4620      	mov	r0, r4
 23f0e1e:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f0e22:	f7ff ffcf 	bl	23f0dc4 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
 23f0e26:	e7ee      	b.n	23f0e06 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
 23f0e28:	f994 000e 	ldrsb.w	r0, [r4, #14]
 23f0e2c:	2101      	movs	r1, #1
 23f0e2e:	b280      	uxth	r0, r0
 23f0e30:	f009 f9df 	bl	23fa1f2 <digitalWrite>

  if (_spi) {
 23f0e34:	6820      	ldr	r0, [r4, #0]
 23f0e36:	b108      	cbz	r0, 23f0e3c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
 23f0e38:	f008 fd0e 	bl	23f9858 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 23f0e3c:	2001      	movs	r0, #1
 23f0e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f0e42 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
 23f0e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f0e46:	4604      	mov	r4, r0
  if (_spi) {
 23f0e48:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
 23f0e4a:	460e      	mov	r6, r1
 23f0e4c:	4617      	mov	r7, r2
 23f0e4e:	461d      	mov	r5, r3
 23f0e50:	f89d 801c 	ldrb.w	r8, [sp, #28]
  if (_spi) {
 23f0e54:	b110      	cbz	r0, 23f0e5c <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
 23f0e56:	6861      	ldr	r1, [r4, #4]
 23f0e58:	f008 fd18 	bl	23f988c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
 23f0e5c:	f994 000e 	ldrsb.w	r0, [r4, #14]
 23f0e60:	2100      	movs	r1, #0
 23f0e62:	b280      	uxth	r0, r0
 23f0e64:	f009 f9c5 	bl	23fa1f2 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
 23f0e68:	4437      	add	r7, r6
 23f0e6a:	42be      	cmp	r6, r7
 23f0e6c:	d10a      	bne.n	23f0e84 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
 23f0e6e:	9b06      	ldr	r3, [sp, #24]
 23f0e70:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
 23f0e72:	42ae      	cmp	r6, r5
 23f0e74:	d00c      	beq.n	23f0e90 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
 23f0e76:	4641      	mov	r1, r8
 23f0e78:	4620      	mov	r0, r4
 23f0e7a:	f7ff ffa3 	bl	23f0dc4 <_ZN18Adafruit_SPIDevice8transferEh>
 23f0e7e:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
 23f0e82:	e7f6      	b.n	23f0e72 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
 23f0e84:	4620      	mov	r0, r4
 23f0e86:	f816 1b01 	ldrb.w	r1, [r6], #1
 23f0e8a:	f7ff ff9b 	bl	23f0dc4 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
 23f0e8e:	e7ec      	b.n	23f0e6a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
 23f0e90:	f994 000e 	ldrsb.w	r0, [r4, #14]
 23f0e94:	2101      	movs	r1, #1
 23f0e96:	b280      	uxth	r0, r0
 23f0e98:	f009 f9ab 	bl	23fa1f2 <digitalWrite>

  if (_spi) {
 23f0e9c:	6820      	ldr	r0, [r4, #0]
 23f0e9e:	b108      	cbz	r0, 23f0ea4 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
 23f0ea0:	f008 fcda 	bl	23f9858 <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
 23f0ea4:	2001      	movs	r0, #1
 23f0ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f0eaa <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
 23f0eaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f0eae:	461f      	mov	r7, r3
 23f0eb0:	b085      	sub	sp, #20
 23f0eb2:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
#if defined(ESP8266)
  yield();
#endif
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 23f0eb6:	eba7 0a01 	sub.w	sl, r7, r1
 23f0eba:	eba8 0902 	sub.w	r9, r8, r2
 23f0ebe:	f1b9 0f00 	cmp.w	r9, #0
 23f0ec2:	bfb8      	it	lt
 23f0ec4:	f1c9 0900 	rsblt	r9, r9, #0
 23f0ec8:	f1ba 0f00 	cmp.w	sl, #0
 23f0ecc:	bfb8      	it	lt
 23f0ece:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
 23f0ed2:	45d1      	cmp	r9, sl
                             uint16_t color) {
 23f0ed4:	4683      	mov	fp, r0
 23f0ed6:	460c      	mov	r4, r1
 23f0ed8:	4615      	mov	r5, r2
 23f0eda:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  if (steep) {
 23f0ede:	dd04      	ble.n	23f0eea <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
 23f0ee0:	463a      	mov	r2, r7
    _swap_int16_t(x0, y0);
 23f0ee2:	462c      	mov	r4, r5
    _swap_int16_t(x1, y1);
 23f0ee4:	4647      	mov	r7, r8
    _swap_int16_t(x0, y0);
 23f0ee6:	460d      	mov	r5, r1
    _swap_int16_t(x1, y1);
 23f0ee8:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
 23f0eea:	42bc      	cmp	r4, r7
 23f0eec:	dd05      	ble.n	23f0efa <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
 23f0eee:	462a      	mov	r2, r5
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
 23f0ef0:	4645      	mov	r5, r8
 23f0ef2:	4690      	mov	r8, r2
  if (x0 > x1) {
 23f0ef4:	4622      	mov	r2, r4
 23f0ef6:	463c      	mov	r4, r7
 23f0ef8:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
 23f0efa:	1b3e      	subs	r6, r7, r4
 23f0efc:	b2b2      	uxth	r2, r6
 23f0efe:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
 23f0f00:	eba8 0205 	sub.w	r2, r8, r5
 23f0f04:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 23f0f08:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
 23f0f0c:	f3c6 32c0 	ubfx	r2, r6, #15, #1
 23f0f10:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 23f0f14:	4545      	cmp	r5, r8
 23f0f16:	bfb4      	ite	lt
 23f0f18:	2201      	movlt	r2, #1
 23f0f1a:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
  dy = abs(y1 - y0);
 23f0f1e:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
 23f0f20:	1076      	asrs	r6, r6, #1
    ystep = -1;
 23f0f22:	9202      	str	r2, [sp, #8]
  }

  for (; x0 <= x1; x0++) {
 23f0f24:	42bc      	cmp	r4, r7
 23f0f26:	dc1c      	bgt.n	23f0f62 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
    if (steep) {
      writePixel(y0, x0, color);
 23f0f28:	f8db 2000 	ldr.w	r2, [fp]
    if (steep) {
 23f0f2c:	45d1      	cmp	r9, sl
      writePixel(y0, x0, color);
 23f0f2e:	f8d2 8018 	ldr.w	r8, [r2, #24]
 23f0f32:	bfc7      	ittee	gt
 23f0f34:	4629      	movgt	r1, r5
 23f0f36:	4622      	movgt	r2, r4
    } else {
      writePixel(x0, y0, color);
 23f0f38:	462a      	movle	r2, r5
 23f0f3a:	4621      	movle	r1, r4
      writePixel(y0, x0, color);
 23f0f3c:	9303      	str	r3, [sp, #12]
      writePixel(x0, y0, color);
 23f0f3e:	4658      	mov	r0, fp
 23f0f40:	47c0      	blx	r8
    }
    err -= dy;
 23f0f42:	9a01      	ldr	r2, [sp, #4]
      writePixel(x0, y0, color);
 23f0f44:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
 23f0f46:	1ab6      	subs	r6, r6, r2
 23f0f48:	b2b1      	uxth	r1, r6
 23f0f4a:	b236      	sxth	r6, r6
    if (err < 0) {
 23f0f4c:	2e00      	cmp	r6, #0
 23f0f4e:	da05      	bge.n	23f0f5c <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
      y0 += ystep;
 23f0f50:	9a02      	ldr	r2, [sp, #8]
 23f0f52:	4415      	add	r5, r2
      err += dx;
 23f0f54:	9a00      	ldr	r2, [sp, #0]
      y0 += ystep;
 23f0f56:	b22d      	sxth	r5, r5
      err += dx;
 23f0f58:	1856      	adds	r6, r2, r1
 23f0f5a:	b236      	sxth	r6, r6
  for (; x0 <= x1; x0++) {
 23f0f5c:	3401      	adds	r4, #1
 23f0f5e:	b224      	sxth	r4, r4
 23f0f60:	e7e0      	b.n	23f0f24 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
    }
  }
}
 23f0f62:	b005      	add	sp, #20
 23f0f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023f0f68 <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
 23f0f68:	4770      	bx	lr

023f0f6a <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
 23f0f6a:	b410      	push	{r4}
  drawPixel(x, y, color);
 23f0f6c:	6804      	ldr	r4, [r0, #0]
 23f0f6e:	6924      	ldr	r4, [r4, #16]
 23f0f70:	46a4      	mov	ip, r4
}
 23f0f72:	f85d 4b04 	ldr.w	r4, [sp], #4
  drawPixel(x, y, color);
 23f0f76:	4760      	bx	ip

023f0f78 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
 23f0f78:	b430      	push	{r4, r5}
 23f0f7a:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
 23f0f7e:	6804      	ldr	r4, [r0, #0]
 23f0f80:	9502      	str	r5, [sp, #8]
 23f0f82:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 23f0f84:	46a4      	mov	ip, r4
}
 23f0f86:	bc30      	pop	{r4, r5}
  drawFastVLine(x, y, h, color);
 23f0f88:	4760      	bx	ip

023f0f8a <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
 23f0f8a:	b430      	push	{r4, r5}
 23f0f8c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
 23f0f90:	6804      	ldr	r4, [r0, #0]
 23f0f92:	9502      	str	r5, [sp, #8]
 23f0f94:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 23f0f96:	46a4      	mov	ip, r4
}
 23f0f98:	bc30      	pop	{r4, r5}
  drawFastHLine(x, y, w, color);
 23f0f9a:	4760      	bx	ip

023f0f9c <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
 23f0f9c:	b470      	push	{r4, r5, r6}
 23f0f9e:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 23f0fa2:	f8bd 6010 	ldrh.w	r6, [sp, #16]
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
 23f0fa6:	6804      	ldr	r4, [r0, #0]
 23f0fa8:	e9cd 5603 	strd	r5, r6, [sp, #12]
 23f0fac:	6c24      	ldr	r4, [r4, #64]	; 0x40
 23f0fae:	46a4      	mov	ip, r4
}
 23f0fb0:	bc70      	pop	{r4, r5, r6}
  fillRect(x, y, w, h, color);
 23f0fb2:	4760      	bx	ip

023f0fb4 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
 23f0fb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f0fb8:	461c      	mov	r4, r3
 23f0fba:	4616      	mov	r6, r2
 23f0fbc:	4605      	mov	r5, r0
 23f0fbe:	460f      	mov	r7, r1
  startWrite();
 23f0fc0:	6803      	ldr	r3, [r0, #0]
  writeLine(x, y, x, y + h - 1, color);
 23f0fc2:	3c01      	subs	r4, #1
                                 uint16_t color) {
 23f0fc4:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
 23f0fc8:	695b      	ldr	r3, [r3, #20]
  writeLine(x, y, x, y + h - 1, color);
 23f0fca:	4434      	add	r4, r6
  startWrite();
 23f0fcc:	4798      	blx	r3
  writeLine(x, y, x, y + h - 1, color);
 23f0fce:	b224      	sxth	r4, r4
 23f0fd0:	682b      	ldr	r3, [r5, #0]
 23f0fd2:	f8cd 8004 	str.w	r8, [sp, #4]
 23f0fd6:	9400      	str	r4, [sp, #0]
 23f0fd8:	4628      	mov	r0, r5
 23f0fda:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 23f0fdc:	4632      	mov	r2, r6
 23f0fde:	463b      	mov	r3, r7
 23f0fe0:	4639      	mov	r1, r7
 23f0fe2:	47a0      	blx	r4
  endWrite();
 23f0fe4:	4628      	mov	r0, r5
 23f0fe6:	682b      	ldr	r3, [r5, #0]
 23f0fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23f0fea:	b002      	add	sp, #8
 23f0fec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
 23f0ff0:	4718      	bx	r3

023f0ff2 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
 23f0ff2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f0ff6:	4617      	mov	r7, r2
 23f0ff8:	4604      	mov	r4, r0
 23f0ffa:	461d      	mov	r5, r3
 23f0ffc:	460e      	mov	r6, r1
  startWrite();
 23f0ffe:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
 23f1000:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
 23f1004:	695b      	ldr	r3, [r3, #20]
 23f1006:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
 23f1008:	e9cd 7800 	strd	r7, r8, [sp]
 23f100c:	6822      	ldr	r2, [r4, #0]
 23f100e:	1e6b      	subs	r3, r5, #1
 23f1010:	4433      	add	r3, r6
 23f1012:	4620      	mov	r0, r4
 23f1014:	6a95      	ldr	r5, [r2, #40]	; 0x28
 23f1016:	4631      	mov	r1, r6
 23f1018:	463a      	mov	r2, r7
 23f101a:	b21b      	sxth	r3, r3
 23f101c:	47a8      	blx	r5
  endWrite();
 23f101e:	4620      	mov	r0, r4
 23f1020:	6823      	ldr	r3, [r4, #0]
 23f1022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23f1024:	b002      	add	sp, #8
 23f1026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
 23f102a:	4718      	bx	r3

023f102c <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 23f102c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f1030:	461e      	mov	r6, r3
  startWrite();
 23f1032:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
 23f1034:	460c      	mov	r4, r1
  startWrite();
 23f1036:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
 23f1038:	4605      	mov	r5, r0
 23f103a:	4617      	mov	r7, r2
 23f103c:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 23f1040:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  startWrite();
 23f1044:	4798      	blx	r3
  for (int16_t i = x; i < x + w; i++) {
 23f1046:	4426      	add	r6, r4
 23f1048:	42b4      	cmp	r4, r6
    writeFastVLine(i, y, h, color);
 23f104a:	682b      	ldr	r3, [r5, #0]
  for (int16_t i = x; i < x + w; i++) {
 23f104c:	da0b      	bge.n	23f1066 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
    writeFastVLine(i, y, h, color);
 23f104e:	f8cd 8000 	str.w	r8, [sp]
 23f1052:	4621      	mov	r1, r4
 23f1054:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23f1058:	463a      	mov	r2, r7
 23f105a:	464b      	mov	r3, r9
 23f105c:	4628      	mov	r0, r5
 23f105e:	3401      	adds	r4, #1
 23f1060:	47d0      	blx	sl
  for (int16_t i = x; i < x + w; i++) {
 23f1062:	b224      	sxth	r4, r4
 23f1064:	e7f0      	b.n	23f1048 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
  }
  endWrite();
 23f1066:	4628      	mov	r0, r5
 23f1068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23f106a:	b002      	add	sp, #8
 23f106c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
 23f1070:	4718      	bx	r3

023f1072 <_ZN12Adafruit_GFX10fillScreenEt>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
 23f1072:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 23f1074:	9101      	str	r1, [sp, #4]
 23f1076:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 23f107a:	6802      	ldr	r2, [r0, #0]
 23f107c:	9100      	str	r1, [sp, #0]
 23f107e:	6c14      	ldr	r4, [r2, #64]	; 0x40
 23f1080:	2200      	movs	r2, #0
 23f1082:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23f1086:	4611      	mov	r1, r2
 23f1088:	47a0      	blx	r4
}
 23f108a:	b002      	add	sp, #8
 23f108c:	bd10      	pop	{r4, pc}

023f108e <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                            uint16_t color) {
 23f108e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  // Update in subclasses if desired!
  if (x0 == x1) {
 23f1092:	4299      	cmp	r1, r3
                            uint16_t color) {
 23f1094:	4616      	mov	r6, r2
 23f1096:	4680      	mov	r8, r0
 23f1098:	460d      	mov	r5, r1
 23f109a:	461c      	mov	r4, r3
 23f109c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 23f10a0:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
    if (y0 > y1)
      _swap_int16_t(y0, y1);
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23f10a4:	6802      	ldr	r2, [r0, #0]
  if (x0 == x1) {
 23f10a6:	d112      	bne.n	23f10ce <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
    if (y0 > y1)
 23f10a8:	42be      	cmp	r6, r7
 23f10aa:	bfc2      	ittt	gt
 23f10ac:	4633      	movgt	r3, r6
 23f10ae:	463e      	movgt	r6, r7
 23f10b0:	461f      	movgt	r7, r3
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23f10b2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23f10b6:	1c7b      	adds	r3, r7, #1
 23f10b8:	6b94      	ldr	r4, [r2, #56]	; 0x38
 23f10ba:	1b9b      	subs	r3, r3, r6
  } else if (y0 == y1) {
    if (x0 > x1)
      _swap_int16_t(x0, x1);
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23f10bc:	4632      	mov	r2, r6
 23f10be:	4629      	mov	r1, r5
 23f10c0:	4640      	mov	r0, r8
 23f10c2:	46a4      	mov	ip, r4
 23f10c4:	b21b      	sxth	r3, r3
  } else {
    startWrite();
    writeLine(x0, y0, x1, y1, color);
    endWrite();
  }
}
 23f10c6:	b003      	add	sp, #12
 23f10c8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23f10cc:	4760      	bx	ip
  } else if (y0 == y1) {
 23f10ce:	42be      	cmp	r6, r7
 23f10d0:	d10a      	bne.n	23f10e8 <_ZN12Adafruit_GFX8drawLineEsssst+0x5a>
    if (x0 > x1)
 23f10d2:	4299      	cmp	r1, r3
 23f10d4:	bfc2      	ittt	gt
 23f10d6:	460b      	movgt	r3, r1
 23f10d8:	4625      	movgt	r5, r4
 23f10da:	461c      	movgt	r4, r3
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23f10dc:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23f10e0:	1c63      	adds	r3, r4, #1
 23f10e2:	1b5b      	subs	r3, r3, r5
 23f10e4:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 23f10e6:	e7e9      	b.n	23f10bc <_ZN12Adafruit_GFX8drawLineEsssst+0x2e>
    startWrite();
 23f10e8:	6953      	ldr	r3, [r2, #20]
 23f10ea:	4798      	blx	r3
    writeLine(x0, y0, x1, y1, color);
 23f10ec:	e9cd 7900 	strd	r7, r9, [sp]
 23f10f0:	f8d8 3000 	ldr.w	r3, [r8]
 23f10f4:	4640      	mov	r0, r8
 23f10f6:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 23f10f8:	4632      	mov	r2, r6
 23f10fa:	4623      	mov	r3, r4
 23f10fc:	4629      	mov	r1, r5
 23f10fe:	47b8      	blx	r7
    endWrite();
 23f1100:	4640      	mov	r0, r8
 23f1102:	f8d8 3000 	ldr.w	r3, [r8]
 23f1106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23f1108:	b003      	add	sp, #12
 23f110a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    endWrite();
 23f110e:	4718      	bx	r3

023f1110 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 23f1110:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f1114:	4604      	mov	r4, r0
 23f1116:	460f      	mov	r7, r1
 23f1118:	4616      	mov	r6, r2
 23f111a:	461d      	mov	r5, r3
  startWrite();
 23f111c:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
 23f111e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  startWrite();
 23f1122:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
 23f1124:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  startWrite();
 23f1128:	4798      	blx	r3
  writeFastHLine(x, y, w, color);
 23f112a:	6823      	ldr	r3, [r4, #0]
 23f112c:	f8cd 8000 	str.w	r8, [sp]
 23f1130:	4632      	mov	r2, r6
 23f1132:	4639      	mov	r1, r7
 23f1134:	4620      	mov	r0, r4
 23f1136:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23f113a:	462b      	mov	r3, r5
 23f113c:	47d0      	blx	sl
  writeFastHLine(x, y + h - 1, w, color);
 23f113e:	6823      	ldr	r3, [r4, #0]
 23f1140:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 23f1144:	f8cd 8000 	str.w	r8, [sp]
 23f1148:	4432      	add	r2, r6
 23f114a:	4639      	mov	r1, r7
 23f114c:	4620      	mov	r0, r4
 23f114e:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23f1152:	b212      	sxth	r2, r2
 23f1154:	462b      	mov	r3, r5
 23f1156:	47d0      	blx	sl
  writeFastVLine(x, y, h, color);
 23f1158:	6823      	ldr	r3, [r4, #0]
 23f115a:	f8cd 8000 	str.w	r8, [sp]
 23f115e:	4632      	mov	r2, r6
 23f1160:	4639      	mov	r1, r7
 23f1162:	4620      	mov	r0, r4
 23f1164:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23f1168:	464b      	mov	r3, r9
 23f116a:	47d0      	blx	sl
  writeFastVLine(x + w - 1, y, h, color);
 23f116c:	1e6b      	subs	r3, r5, #1
 23f116e:	19d9      	adds	r1, r3, r7
 23f1170:	6823      	ldr	r3, [r4, #0]
 23f1172:	f8cd 8000 	str.w	r8, [sp]
 23f1176:	4620      	mov	r0, r4
 23f1178:	6a1d      	ldr	r5, [r3, #32]
 23f117a:	4632      	mov	r2, r6
 23f117c:	464b      	mov	r3, r9
 23f117e:	b209      	sxth	r1, r1
 23f1180:	47a8      	blx	r5
  endWrite();
 23f1182:	4620      	mov	r0, r4
 23f1184:	6823      	ldr	r3, [r4, #0]
 23f1186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23f1188:	b002      	add	sp, #8
 23f118a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
 23f118e:	4718      	bx	r3

023f1190 <_ZN12Adafruit_GFX13invertDisplayEb>:
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
 23f1190:	4770      	bx	lr

023f1192 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
 23f1192:	f001 0303 	and.w	r3, r1, #3
    _height = HEIGHT;
 23f1196:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
  rotation = (x & 3);
 23f119a:	7683      	strb	r3, [r0, #26]
    _width = WIDTH;
 23f119c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
  switch (rotation) {
 23f11a0:	07c9      	lsls	r1, r1, #31
    _width = WIDTH;
 23f11a2:	bf59      	ittee	pl
 23f11a4:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
 23f11a6:	81c2      	strhpl	r2, [r0, #14]
    _width = HEIGHT;
 23f11a8:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
 23f11aa:	81c3      	strhmi	r3, [r0, #14]
}
 23f11ac:	4770      	bx	lr
	...

023f11b0 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 23f11b0:	b530      	push	{r4, r5, lr}
 23f11b2:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
 23f11b4:	2400      	movs	r4, #0
  _width = WIDTH;
 23f11b6:	8181      	strh	r1, [r0, #12]
  textsize_x = textsize_y = 1;
 23f11b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 23f11bc:	4d05      	ldr	r5, [pc, #20]	; (23f11d4 <_ZN12Adafruit_GFXC1Ess+0x24>)
 23f11be:	8142      	strh	r2, [r0, #10]
  _height = HEIGHT;
 23f11c0:	81c2      	strh	r2, [r0, #14]
  textsize_x = textsize_y = 1;
 23f11c2:	4a05      	ldr	r2, [pc, #20]	; (23f11d8 <_ZN12Adafruit_GFXC1Ess+0x28>)
 23f11c4:	6044      	str	r4, [r0, #4]
 23f11c6:	e9c0 1205 	strd	r1, r2, [r0, #20]
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 23f11ca:	6005      	str	r5, [r0, #0]
  cursor_y = cursor_x = 0;
 23f11cc:	6104      	str	r4, [r0, #16]
  _cp437 = false;
 23f11ce:	7704      	strb	r4, [r0, #28]
  gfxFont = NULL;
 23f11d0:	6204      	str	r4, [r0, #32]
}
 23f11d2:	bd30      	pop	{r4, r5, pc}
 23f11d4:	023ff1ac 	.word	0x023ff1ac
 23f11d8:	01000101 	.word	0x01000101

023f11dc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
                              int16_t w, int16_t h, uint16_t color) {
 23f11dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  startWrite();
 23f11e0:	2600      	movs	r6, #0
  uint8_t byte = 0;
 23f11e2:	4635      	mov	r5, r6
                              int16_t w, int16_t h, uint16_t color) {
 23f11e4:	b089      	sub	sp, #36	; 0x24
 23f11e6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 23f11ea:	9304      	str	r3, [sp, #16]
  startWrite();
 23f11ec:	6802      	ldr	r2, [r0, #0]
                              int16_t w, int16_t h, uint16_t color) {
 23f11ee:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 23f11f2:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
  startWrite();
 23f11f6:	6952      	ldr	r2, [r2, #20]
                              int16_t w, int16_t h, uint16_t color) {
 23f11f8:	9305      	str	r3, [sp, #20]
 23f11fa:	4604      	mov	r4, r0
 23f11fc:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
  startWrite();
 23f1200:	4790      	blx	r2
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 23f1202:	f118 0207 	adds.w	r2, r8, #7
 23f1206:	bf48      	it	mi
 23f1208:	f108 020e 	addmi.w	r2, r8, #14
 23f120c:	ea4f 0be2 	mov.w	fp, r2, asr #3
  startWrite();
 23f1210:	9601      	str	r6, [sp, #4]
 23f1212:	9b03      	ldr	r3, [sp, #12]
 23f1214:	9a01      	ldr	r2, [sp, #4]
  for (int16_t j = 0; j < h; j++, y++) {
 23f1216:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 23f121a:	189a      	adds	r2, r3, r2
 23f121c:	9b05      	ldr	r3, [sp, #20]
 23f121e:	b212      	sxth	r2, r2
 23f1220:	428b      	cmp	r3, r1
 23f1222:	dd27      	ble.n	23f1274 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x98>
 23f1224:	f04f 0900 	mov.w	r9, #0
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 23f1228:	9b04      	ldr	r3, [sp, #16]
 23f122a:	4433      	add	r3, r6
 23f122c:	9306      	str	r3, [sp, #24]
 23f122e:	fa0f f089 	sxth.w	r0, r9
    for (int16_t i = 0; i < w; i++) {
 23f1232:	4580      	cmp	r8, r0
 23f1234:	fa1f f189 	uxth.w	r1, r9
 23f1238:	dd17      	ble.n	23f126a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8e>
      if (i & 7)
 23f123a:	074f      	lsls	r7, r1, #29
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 23f123c:	bf05      	ittet	eq
 23f123e:	9b06      	ldreq	r3, [sp, #24]
 23f1240:	10c0      	asreq	r0, r0, #3
        byte <<= 1;
 23f1242:	006d      	lslne	r5, r5, #1
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 23f1244:	5c1d      	ldrbeq	r5, [r3, r0]
        byte <<= 1;
 23f1246:	bf18      	it	ne
 23f1248:	b2ed      	uxtbne	r5, r5
      if (byte & 0x80)
 23f124a:	062b      	lsls	r3, r5, #24
 23f124c:	d50a      	bpl.n	23f1264 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x88>
        writePixel(x + i, y, color);
 23f124e:	9b02      	ldr	r3, [sp, #8]
 23f1250:	6820      	ldr	r0, [r4, #0]
 23f1252:	4419      	add	r1, r3
 23f1254:	6983      	ldr	r3, [r0, #24]
 23f1256:	9207      	str	r2, [sp, #28]
 23f1258:	461f      	mov	r7, r3
 23f125a:	4620      	mov	r0, r4
 23f125c:	4653      	mov	r3, sl
 23f125e:	b209      	sxth	r1, r1
 23f1260:	47b8      	blx	r7
 23f1262:	9a07      	ldr	r2, [sp, #28]
    for (int16_t i = 0; i < w; i++) {
 23f1264:	f109 0901 	add.w	r9, r9, #1
 23f1268:	e7e1      	b.n	23f122e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x52>
  for (int16_t j = 0; j < h; j++, y++) {
 23f126a:	9b01      	ldr	r3, [sp, #4]
 23f126c:	445e      	add	r6, fp
 23f126e:	3301      	adds	r3, #1
 23f1270:	9301      	str	r3, [sp, #4]
 23f1272:	e7ce      	b.n	23f1212 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x36>
  endWrite();
 23f1274:	4620      	mov	r0, r4
 23f1276:	6823      	ldr	r3, [r4, #0]
 23f1278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23f127a:	b009      	add	sp, #36	; 0x24
 23f127c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
 23f1280:	4718      	bx	r3
	...

023f1284 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
                            uint8_t size_y) {
 23f1284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f1288:	ed2d 8b02 	vpush	{d8}
 23f128c:	b091      	sub	sp, #68	; 0x44
 23f128e:	4616      	mov	r6, r2
 23f1290:	461f      	mov	r7, r3
  if (!gfxFont) { // 'Classic' built-in font
 23f1292:	6a02      	ldr	r2, [r0, #32]
                            uint8_t size_y) {
 23f1294:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 23f1298:	4683      	mov	fp, r0
 23f129a:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
 23f129e:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
 23f12a2:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
 23f12a6:	9103      	str	r1, [sp, #12]
 23f12a8:	9304      	str	r3, [sp, #16]
  if (!gfxFont) { // 'Classic' built-in font
 23f12aa:	2a00      	cmp	r2, #0
 23f12ac:	f040 80c5 	bne.w	23f143a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
    if ((x >= _width) ||              // Clip right
 23f12b0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23f12b4:	428b      	cmp	r3, r1
 23f12b6:	f340 814c 	ble.w	23f1552 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
 23f12ba:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23f12be:	42b3      	cmp	r3, r6
 23f12c0:	f340 8147 	ble.w	23f1552 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((x + 6 * size_x - 1) < 0) || // Clip left
 23f12c4:	2306      	movs	r3, #6
 23f12c6:	fb13 1305 	smlabb	r3, r3, r5, r1
        (y >= _height) ||             // Clip bottom
 23f12ca:	2b00      	cmp	r3, #0
 23f12cc:	f340 8141 	ble.w	23f1552 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((y + 8 * size_y - 1) < 0))   // Clip top
 23f12d0:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
        ((x + 6 * size_x - 1) < 0) || // Clip left
 23f12d4:	2b00      	cmp	r3, #0
 23f12d6:	f340 813c 	ble.w	23f1552 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
    if (!_cp437 && (c >= 176))
 23f12da:	7f03      	ldrb	r3, [r0, #28]
 23f12dc:	b91b      	cbnz	r3, 23f12e6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
 23f12de:	2faf      	cmp	r7, #175	; 0xaf
      c++; // Handle 'classic' charset behavior
 23f12e0:	bf84      	itt	hi
 23f12e2:	3701      	addhi	r7, #1
 23f12e4:	b2ff      	uxtbhi	r7, r7
    startWrite();
 23f12e6:	f8db 3000 	ldr.w	r3, [fp]
 23f12ea:	4658      	mov	r0, fp
 23f12ec:	695b      	ldr	r3, [r3, #20]
 23f12ee:	4798      	blx	r3
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23f12f0:	2205      	movs	r2, #5
 23f12f2:	9209      	str	r2, [sp, #36]	; 0x24
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 23f12f4:	2200      	movs	r2, #0
 23f12f6:	9205      	str	r2, [sp, #20]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23f12f8:	4a98      	ldr	r2, [pc, #608]	; (23f155c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
 23f12fa:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 23f12fe:	18d3      	adds	r3, r2, r3
 23f1300:	930c      	str	r3, [sp, #48]	; 0x30
            writePixel(x + i, y + j, color);
 23f1302:	b2b3      	uxth	r3, r6
 23f1304:	9306      	str	r3, [sp, #24]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23f1306:	9a05      	ldr	r2, [sp, #20]
 23f1308:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23f130a:	fb02 f905 	mul.w	r9, r2, r5
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23f130e:	5c9b      	ldrb	r3, [r3, r2]
 23f1310:	9307      	str	r3, [sp, #28]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23f1312:	b2ab      	uxth	r3, r5
 23f1314:	930b      	str	r3, [sp, #44]	; 0x2c
 23f1316:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 23f131a:	9308      	str	r3, [sp, #32]
 23f131c:	9b03      	ldr	r3, [sp, #12]
 23f131e:	fa19 f983 	uxtah	r9, r9, r3
 23f1322:	fa0f f389 	sxth.w	r3, r9
 23f1326:	ee08 3a10 	vmov	s16, r3
 23f132a:	2308      	movs	r3, #8
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 23f132c:	f04f 0900 	mov.w	r9, #0
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23f1330:	930a      	str	r3, [sp, #40]	; 0x28
            writePixel(x + i, y + j, bg);
 23f1332:	9b03      	ldr	r3, [sp, #12]
 23f1334:	eb02 0a03 	add.w	sl, r2, r3
 23f1338:	fa0f fa8a 	sxth.w	sl, sl
        if (line & 1) {
 23f133c:	9a07      	ldr	r2, [sp, #28]
            writePixel(x + i, y + j, color);
 23f133e:	f8db 3000 	ldr.w	r3, [fp]
        if (line & 1) {
 23f1342:	07d2      	lsls	r2, r2, #31
 23f1344:	d552      	bpl.n	23f13ec <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
          if (size_x == 1 && size_y == 1)
 23f1346:	2d01      	cmp	r5, #1
            writePixel(x + i, y + j, color);
 23f1348:	fa1f f289 	uxth.w	r2, r9
          if (size_x == 1 && size_y == 1)
 23f134c:	d13e      	bne.n	23f13cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
 23f134e:	2c01      	cmp	r4, #1
 23f1350:	d13c      	bne.n	23f13cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
            writePixel(x + i, y + j, color);
 23f1352:	699b      	ldr	r3, [r3, #24]
 23f1354:	9906      	ldr	r1, [sp, #24]
 23f1356:	461f      	mov	r7, r3
 23f1358:	9b04      	ldr	r3, [sp, #16]
 23f135a:	440a      	add	r2, r1
            writePixel(x + i, y + j, bg);
 23f135c:	4651      	mov	r1, sl
 23f135e:	4658      	mov	r0, fp
 23f1360:	b212      	sxth	r2, r2
 23f1362:	47b8      	blx	r7
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 23f1364:	f109 0301 	add.w	r3, r9, #1
 23f1368:	fa4f f983 	sxtb.w	r9, r3
 23f136c:	9b07      	ldr	r3, [sp, #28]
 23f136e:	085b      	lsrs	r3, r3, #1
 23f1370:	9307      	str	r3, [sp, #28]
 23f1372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23f1374:	3b01      	subs	r3, #1
 23f1376:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23f137a:	930a      	str	r3, [sp, #40]	; 0x28
 23f137c:	d1de      	bne.n	23f133c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 23f137e:	9f05      	ldr	r7, [sp, #20]
 23f1380:	3701      	adds	r7, #1
 23f1382:	b27b      	sxtb	r3, r7
 23f1384:	9305      	str	r3, [sp, #20]
 23f1386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23f1388:	3b01      	subs	r3, #1
 23f138a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23f138e:	9309      	str	r3, [sp, #36]	; 0x24
 23f1390:	d1b9      	bne.n	23f1306 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
    if (bg != color) { // If opaque, draw vertical line for last column
 23f1392:	9b04      	ldr	r3, [sp, #16]
 23f1394:	4543      	cmp	r3, r8
 23f1396:	d00f      	beq.n	23f13b8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
      if (size_x == 1 && size_y == 1)
 23f1398:	2d01      	cmp	r5, #1
        writeFastVLine(x + 5, y, 8, bg);
 23f139a:	f8db 3000 	ldr.w	r3, [fp]
      if (size_x == 1 && size_y == 1)
 23f139e:	d13b      	bne.n	23f1418 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
 23f13a0:	2c01      	cmp	r4, #1
 23f13a2:	d139      	bne.n	23f1418 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
        writeFastVLine(x + 5, y, 8, bg);
 23f13a4:	9908      	ldr	r1, [sp, #32]
 23f13a6:	f8cd 8000 	str.w	r8, [sp]
 23f13aa:	3105      	adds	r1, #5
 23f13ac:	6a1c      	ldr	r4, [r3, #32]
 23f13ae:	4632      	mov	r2, r6
 23f13b0:	2308      	movs	r3, #8
 23f13b2:	4658      	mov	r0, fp
 23f13b4:	b209      	sxth	r1, r1
 23f13b6:	47a0      	blx	r4
    endWrite();
 23f13b8:	4658      	mov	r0, fp
 23f13ba:	f8db 3000 	ldr.w	r3, [fp]
 23f13be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23f13c0:	b011      	add	sp, #68	; 0x44
 23f13c2:	ecbd 8b02 	vpop	{d8}
 23f13c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
 23f13ca:	4718      	bx	r3
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 23f13cc:	fb14 f202 	smulbb	r2, r4, r2
 23f13d0:	9906      	ldr	r1, [sp, #24]
 23f13d2:	440a      	add	r2, r1
 23f13d4:	9904      	ldr	r1, [sp, #16]
 23f13d6:	9101      	str	r1, [sp, #4]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23f13d8:	9400      	str	r4, [sp, #0]
 23f13da:	69db      	ldr	r3, [r3, #28]
 23f13dc:	ee18 1a10 	vmov	r1, s16
 23f13e0:	461f      	mov	r7, r3
 23f13e2:	4658      	mov	r0, fp
 23f13e4:	462b      	mov	r3, r5
 23f13e6:	b212      	sxth	r2, r2
 23f13e8:	47b8      	blx	r7
 23f13ea:	e7bb      	b.n	23f1364 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
        } else if (bg != color) {
 23f13ec:	9a04      	ldr	r2, [sp, #16]
 23f13ee:	4542      	cmp	r2, r8
 23f13f0:	d0b8      	beq.n	23f1364 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
          if (size_x == 1 && size_y == 1)
 23f13f2:	2d01      	cmp	r5, #1
            writePixel(x + i, y + j, color);
 23f13f4:	fa1f f289 	uxth.w	r2, r9
          if (size_x == 1 && size_y == 1)
 23f13f8:	d107      	bne.n	23f140a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
 23f13fa:	2c01      	cmp	r4, #1
 23f13fc:	d105      	bne.n	23f140a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
            writePixel(x + i, y + j, bg);
 23f13fe:	699b      	ldr	r3, [r3, #24]
 23f1400:	9906      	ldr	r1, [sp, #24]
 23f1402:	461f      	mov	r7, r3
 23f1404:	440a      	add	r2, r1
 23f1406:	4643      	mov	r3, r8
 23f1408:	e7a8      	b.n	23f135c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23f140a:	fb14 f202 	smulbb	r2, r4, r2
 23f140e:	9906      	ldr	r1, [sp, #24]
 23f1410:	f8cd 8004 	str.w	r8, [sp, #4]
 23f1414:	440a      	add	r2, r1
 23f1416:	e7df      	b.n	23f13d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 23f1418:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23f141a:	00e4      	lsls	r4, r4, #3
 23f141c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 23f1420:	9a08      	ldr	r2, [sp, #32]
 23f1422:	f8cd 8004 	str.w	r8, [sp, #4]
 23f1426:	440a      	add	r2, r1
 23f1428:	4611      	mov	r1, r2
 23f142a:	9400      	str	r4, [sp, #0]
 23f142c:	69dc      	ldr	r4, [r3, #28]
 23f142e:	4632      	mov	r2, r6
 23f1430:	462b      	mov	r3, r5
 23f1432:	4658      	mov	r0, fp
 23f1434:	b209      	sxth	r1, r1
 23f1436:	47a0      	blx	r4
    endWrite();
 23f1438:	e7be      	b.n	23f13b8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23f143a:	7a13      	ldrb	r3, [r2, #8]
  return gfxFont->glyph + c;
 23f143c:	6851      	ldr	r1, [r2, #4]
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23f143e:	1aff      	subs	r7, r7, r3
  return gfxFont->bitmap;
 23f1440:	6812      	ldr	r2, [r2, #0]
  return gfxFont->glyph + c;
 23f1442:	b2ff      	uxtb	r7, r7
  return gfxFont->bitmap;
 23f1444:	920b      	str	r2, [sp, #44]	; 0x2c
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23f1446:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
  return gfxFont->glyph + c;
 23f144a:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23f144e:	9206      	str	r2, [sp, #24]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 23f1450:	789a      	ldrb	r2, [r3, #2]
    if (size_x > 1 || size_y > 1) {
 23f1452:	2d01      	cmp	r5, #1
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 23f1454:	9209      	str	r2, [sp, #36]	; 0x24
 23f1456:	78da      	ldrb	r2, [r3, #3]
           yo = pgm_read_byte(&glyph->yOffset);
 23f1458:	f993 a006 	ldrsb.w	sl, [r3, #6]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 23f145c:	920c      	str	r2, [sp, #48]	; 0x30
    int8_t xo = pgm_read_byte(&glyph->xOffset),
 23f145e:	f993 2005 	ldrsb.w	r2, [r3, #5]
 23f1462:	920a      	str	r2, [sp, #40]	; 0x28
    if (size_x > 1 || size_y > 1) {
 23f1464:	d801      	bhi.n	23f146a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
 23f1466:	2c01      	cmp	r4, #1
 23f1468:	d957      	bls.n	23f151a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
      xo16 = xo;
 23f146a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 23f146e:	9308      	str	r3, [sp, #32]
      yo16 = yo;
 23f1470:	fa0f f38a 	sxth.w	r3, sl
 23f1474:	9307      	str	r3, [sp, #28]
    uint8_t xx, yy, bits = 0, bit = 0;
 23f1476:	f04f 0800 	mov.w	r8, #0
 23f147a:	46c1      	mov	r9, r8
    for (yy = 0; yy < h; yy++) {
 23f147c:	4647      	mov	r7, r8
    startWrite();
 23f147e:	f8db 3000 	ldr.w	r3, [fp]
 23f1482:	4658      	mov	r0, fp
 23f1484:	695b      	ldr	r3, [r3, #20]
 23f1486:	4798      	blx	r3
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23f1488:	b2b3      	uxth	r3, r6
 23f148a:	930e      	str	r3, [sp, #56]	; 0x38
            writePixel(x + xo + xx, y + yo + yy, color);
 23f148c:	fa1a f386 	uxtah	r3, sl, r6
 23f1490:	930f      	str	r3, [sp, #60]	; 0x3c
    for (yy = 0; yy < h; yy++) {
 23f1492:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23f1494:	429f      	cmp	r7, r3
 23f1496:	d28f      	bcs.n	23f13b8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23f1498:	9b07      	ldr	r3, [sp, #28]
 23f149a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 23f149c:	443b      	add	r3, r7
 23f149e:	fb03 2304 	mla	r3, r3, r4, r2
      for (xx = 0; xx < w; xx++) {
 23f14a2:	2200      	movs	r2, #0
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23f14a4:	b21b      	sxth	r3, r3
 23f14a6:	ee08 3a10 	vmov	s16, r3
 23f14aa:	4643      	mov	r3, r8
      for (xx = 0; xx < w; xx++) {
 23f14ac:	9205      	str	r2, [sp, #20]
            writePixel(x + xo + xx, y + yo + yy, color);
 23f14ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 23f14b0:	eb02 0a07 	add.w	sl, r2, r7
 23f14b4:	fa0f fa8a 	sxth.w	sl, sl
      for (xx = 0; xx < w; xx++) {
 23f14b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23f14ba:	9905      	ldr	r1, [sp, #20]
 23f14bc:	4291      	cmp	r1, r2
 23f14be:	d241      	bcs.n	23f1544 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
        if (!(bit++ & 7)) {
 23f14c0:	1c5a      	adds	r2, r3, #1
 23f14c2:	b2d2      	uxtb	r2, r2
 23f14c4:	075b      	lsls	r3, r3, #29
 23f14c6:	920d      	str	r2, [sp, #52]	; 0x34
 23f14c8:	d107      	bne.n	23f14da <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
          bits = pgm_read_byte(&bitmap[bo++]);
 23f14ca:	9b06      	ldr	r3, [sp, #24]
 23f14cc:	9906      	ldr	r1, [sp, #24]
 23f14ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23f14d0:	3301      	adds	r3, #1
 23f14d2:	b29b      	uxth	r3, r3
 23f14d4:	f812 9001 	ldrb.w	r9, [r2, r1]
 23f14d8:	9306      	str	r3, [sp, #24]
        if (bits & 0x80) {
 23f14da:	f019 0f80 	tst.w	r9, #128	; 0x80
 23f14de:	d012      	beq.n	23f1506 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
          if (size_x == 1 && size_y == 1) {
 23f14e0:	2d01      	cmp	r5, #1
            writePixel(x + xo + xx, y + yo + yy, color);
 23f14e2:	f8db 3000 	ldr.w	r3, [fp]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23f14e6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
          if (size_x == 1 && size_y == 1) {
 23f14ea:	d11a      	bne.n	23f1522 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
 23f14ec:	2c01      	cmp	r4, #1
 23f14ee:	d118      	bne.n	23f1522 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
            writePixel(x + xo + xx, y + yo + yy, color);
 23f14f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23f14f2:	699b      	ldr	r3, [r3, #24]
 23f14f4:	4411      	add	r1, r2
 23f14f6:	9a05      	ldr	r2, [sp, #20]
 23f14f8:	461e      	mov	r6, r3
 23f14fa:	4411      	add	r1, r2
 23f14fc:	4658      	mov	r0, fp
 23f14fe:	4652      	mov	r2, sl
 23f1500:	9b04      	ldr	r3, [sp, #16]
 23f1502:	b209      	sxth	r1, r1
 23f1504:	47b0      	blx	r6
      for (xx = 0; xx < w; xx++) {
 23f1506:	9e05      	ldr	r6, [sp, #20]
        bits <<= 1;
 23f1508:	ea4f 0949 	mov.w	r9, r9, lsl #1
      for (xx = 0; xx < w; xx++) {
 23f150c:	3601      	adds	r6, #1
 23f150e:	b2f3      	uxtb	r3, r6
 23f1510:	9305      	str	r3, [sp, #20]
        bits <<= 1;
 23f1512:	fa5f f989 	uxtb.w	r9, r9
        if (!(bit++ & 7)) {
 23f1516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
      for (xx = 0; xx < w; xx++) {
 23f1518:	e7ce      	b.n	23f14b8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
    int16_t xo16 = 0, yo16 = 0;
 23f151a:	2300      	movs	r3, #0
 23f151c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 23f1520:	e7a9      	b.n	23f1476 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23f1522:	9805      	ldr	r0, [sp, #20]
 23f1524:	9a08      	ldr	r2, [sp, #32]
 23f1526:	4402      	add	r2, r0
 23f1528:	fb02 1105 	mla	r1, r2, r5, r1
 23f152c:	9a04      	ldr	r2, [sp, #16]
 23f152e:	4658      	mov	r0, fp
 23f1530:	e9cd 4200 	strd	r4, r2, [sp]
 23f1534:	69db      	ldr	r3, [r3, #28]
 23f1536:	ee18 2a10 	vmov	r2, s16
 23f153a:	461e      	mov	r6, r3
 23f153c:	b209      	sxth	r1, r1
 23f153e:	462b      	mov	r3, r5
 23f1540:	47b0      	blx	r6
 23f1542:	e7e0      	b.n	23f1506 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
 23f1544:	9b09      	ldr	r3, [sp, #36]	; 0x24
    for (yy = 0; yy < h; yy++) {
 23f1546:	3701      	adds	r7, #1
 23f1548:	4498      	add	r8, r3
 23f154a:	fa5f f888 	uxtb.w	r8, r8
 23f154e:	b2ff      	uxtb	r7, r7
 23f1550:	e79f      	b.n	23f1492 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
 23f1552:	b011      	add	sp, #68	; 0x44
 23f1554:	ecbd 8b02 	vpop	{d8}
 23f1558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f155c:	023feca4 	.word	0x023feca4

023f1560 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
 23f1560:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!gfxFont) { // 'Classic' built-in font
 23f1562:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
 23f1564:	4604      	mov	r4, r0
 23f1566:	460b      	mov	r3, r1
 23f1568:	b085      	sub	sp, #20
  if (!gfxFont) { // 'Classic' built-in font
 23f156a:	2a00      	cmp	r2, #0
 23f156c:	d134      	bne.n	23f15d8 <_ZN12Adafruit_GFX5writeEh+0x78>
    if (c == '\n') {              // Newline?
 23f156e:	290a      	cmp	r1, #10
 23f1570:	d108      	bne.n	23f1584 <_ZN12Adafruit_GFX5writeEh+0x24>
      cursor_y += textsize_y * 8; // advance y one line
 23f1572:	8a43      	ldrh	r3, [r0, #18]
      cursor_x = 0;               // Reset x to zero,
 23f1574:	8202      	strh	r2, [r0, #16]
      cursor_y += textsize_y * 8; // advance y one line
 23f1576:	7e42      	ldrb	r2, [r0, #25]
 23f1578:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
      cursor_y +=
 23f157c:	8263      	strh	r3, [r4, #18]
}
 23f157e:	2001      	movs	r0, #1
 23f1580:	b005      	add	sp, #20
 23f1582:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (c != '\r') {       // Ignore carriage returns
 23f1584:	290d      	cmp	r1, #13
 23f1586:	d0fa      	beq.n	23f157e <_ZN12Adafruit_GFX5writeEh+0x1e>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23f1588:	7ee1      	ldrb	r1, [r4, #27]
 23f158a:	7e00      	ldrb	r0, [r0, #24]
      cursor_y += textsize_y * 8; // advance y one line
 23f158c:	7e65      	ldrb	r5, [r4, #25]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23f158e:	b171      	cbz	r1, 23f15ae <_ZN12Adafruit_GFX5writeEh+0x4e>
 23f1590:	2106      	movs	r1, #6
 23f1592:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 23f1596:	fb11 6100 	smlabb	r1, r1, r0, r6
 23f159a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 23f159e:	42b1      	cmp	r1, r6
      cursor_y += textsize_y * 8; // advance y one line
 23f15a0:	bfc1      	itttt	gt
 23f15a2:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
        cursor_x = 0;                                       // Reset x to zero,
 23f15a6:	8222      	strhgt	r2, [r4, #16]
        cursor_y += textsize_y * 8; // advance y one line
 23f15a8:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
 23f15ac:	8262      	strhgt	r2, [r4, #18]
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 23f15ae:	8ae2      	ldrh	r2, [r4, #22]
 23f15b0:	e9cd 0502 	strd	r0, r5, [sp, #8]
 23f15b4:	9201      	str	r2, [sp, #4]
 23f15b6:	8aa2      	ldrh	r2, [r4, #20]
 23f15b8:	4620      	mov	r0, r4
 23f15ba:	9200      	str	r2, [sp, #0]
 23f15bc:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23f15c0:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23f15c4:	f7ff fe5e 	bl	23f1284 <_ZN12Adafruit_GFX8drawCharEsshtthh>
      cursor_x += textsize_x * 6; // Advance x one char
 23f15c8:	7e23      	ldrb	r3, [r4, #24]
 23f15ca:	8a22      	ldrh	r2, [r4, #16]
 23f15cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f15d0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
        cursor_x +=
 23f15d4:	8223      	strh	r3, [r4, #16]
 23f15d6:	e7d2      	b.n	23f157e <_ZN12Adafruit_GFX5writeEh+0x1e>
    if (c == '\n') {
 23f15d8:	290a      	cmp	r1, #10
 23f15da:	d107      	bne.n	23f15ec <_ZN12Adafruit_GFX5writeEh+0x8c>
      cursor_x = 0;
 23f15dc:	2300      	movs	r3, #0
 23f15de:	8203      	strh	r3, [r0, #16]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23f15e0:	7e41      	ldrb	r1, [r0, #25]
 23f15e2:	7b12      	ldrb	r2, [r2, #12]
      cursor_y +=
 23f15e4:	8a43      	ldrh	r3, [r0, #18]
 23f15e6:	fb01 3302 	mla	r3, r1, r2, r3
 23f15ea:	e7c7      	b.n	23f157c <_ZN12Adafruit_GFX5writeEh+0x1c>
    } else if (c != '\r') {
 23f15ec:	290d      	cmp	r1, #13
 23f15ee:	d0c6      	beq.n	23f157e <_ZN12Adafruit_GFX5writeEh+0x1e>
      uint8_t first = pgm_read_byte(&gfxFont->first);
 23f15f0:	7a15      	ldrb	r5, [r2, #8]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 23f15f2:	42a9      	cmp	r1, r5
 23f15f4:	d3c3      	bcc.n	23f157e <_ZN12Adafruit_GFX5writeEh+0x1e>
 23f15f6:	7a91      	ldrb	r1, [r2, #10]
 23f15f8:	4299      	cmp	r1, r3
 23f15fa:	d3c0      	bcc.n	23f157e <_ZN12Adafruit_GFX5writeEh+0x1e>
  return gfxFont->glyph + c;
 23f15fc:	6851      	ldr	r1, [r2, #4]
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
 23f15fe:	1b5d      	subs	r5, r3, r5
  return gfxFont->glyph + c;
 23f1600:	b2ed      	uxtb	r5, r5
 23f1602:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
        uint8_t w = pgm_read_byte(&glyph->width),
 23f1606:	78a8      	ldrb	r0, [r5, #2]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
 23f1608:	b328      	cbz	r0, 23f1656 <_ZN12Adafruit_GFX5writeEh+0xf6>
 23f160a:	78e9      	ldrb	r1, [r5, #3]
 23f160c:	b319      	cbz	r1, 23f1656 <_ZN12Adafruit_GFX5writeEh+0xf6>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23f160e:	7ee1      	ldrb	r1, [r4, #27]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23f1610:	7e26      	ldrb	r6, [r4, #24]
      cursor_y += textsize_y * 8; // advance y one line
 23f1612:	7e67      	ldrb	r7, [r4, #25]
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23f1614:	b191      	cbz	r1, 23f163c <_ZN12Adafruit_GFX5writeEh+0xdc>
 23f1616:	f995 1005 	ldrsb.w	r1, [r5, #5]
 23f161a:	4408      	add	r0, r1
 23f161c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23f1620:	fb06 1100 	mla	r1, r6, r0, r1
 23f1624:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 23f1628:	4281      	cmp	r1, r0
 23f162a:	dd07      	ble.n	23f163c <_ZN12Adafruit_GFX5writeEh+0xdc>
            cursor_x = 0;
 23f162c:	2000      	movs	r0, #0
 23f162e:	8220      	strh	r0, [r4, #16]
      cursor_y += textsize_y * 8; // advance y one line
 23f1630:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23f1634:	7b12      	ldrb	r2, [r2, #12]
            cursor_y += (int16_t)textsize_y *
 23f1636:	fb02 1207 	mla	r2, r2, r7, r1
 23f163a:	8262      	strh	r2, [r4, #18]
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 23f163c:	8ae2      	ldrh	r2, [r4, #22]
 23f163e:	4620      	mov	r0, r4
 23f1640:	9201      	str	r2, [sp, #4]
 23f1642:	8aa2      	ldrh	r2, [r4, #20]
 23f1644:	e9cd 6702 	strd	r6, r7, [sp, #8]
 23f1648:	9200      	str	r2, [sp, #0]
 23f164a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23f164e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23f1652:	f7ff fe17 	bl	23f1284 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 23f1656:	7929      	ldrb	r1, [r5, #4]
 23f1658:	7e22      	ldrb	r2, [r4, #24]
        cursor_x +=
 23f165a:	8a23      	ldrh	r3, [r4, #16]
 23f165c:	fb01 3302 	mla	r3, r1, r2, r3
 23f1660:	e7b8      	b.n	23f15d4 <_ZN12Adafruit_GFX5writeEh+0x74>

023f1662 <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize_x = (s_x > 0) ? s_x : 1;
 23f1662:	2901      	cmp	r1, #1
 23f1664:	bf38      	it	cc
 23f1666:	2101      	movcc	r1, #1
 23f1668:	7601      	strb	r1, [r0, #24]
  textsize_y = (s_y > 0) ? s_y : 1;
 23f166a:	7641      	strb	r1, [r0, #25]
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
 23f166c:	4770      	bx	lr

023f166e <_ZN16Adafruit_HDC302xC1Ev>:
#include "Adafruit_HDC302x.h"

/**
 * Constructor for the HDC302x sensor driver.
 */
Adafruit_HDC302x::Adafruit_HDC302x() { currentAutoMode = EXIT_AUTO_MODE; }
 23f166e:	2200      	movs	r2, #0
 23f1670:	6002      	str	r2, [r0, #0]
 23f1672:	f243 0293 	movw	r2, #12435	; 0x3093
 23f1676:	8082      	strh	r2, [r0, #4]
 23f1678:	4770      	bx	lr

023f167a <_ZN16Adafruit_HDC302x12writeCommandEt>:
 * Writes a command to the HDC302x sensor.
 *
 * @param command The command to write.
 * @return true if the command was written successfully, otherwise false.
 */
bool Adafruit_HDC302x::writeCommand(uint16_t command) {
 23f167a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[2];
  buffer[0] = (uint8_t)(command >> 8);   // High byte
 23f167c:	0a0b      	lsrs	r3, r1, #8
 23f167e:	f88d 300c 	strb.w	r3, [sp, #12]
  buffer[1] = (uint8_t)(command & 0xFF); // Low byte

  return i2c_dev->write(buffer, 2);
 23f1682:	2300      	movs	r3, #0
 23f1684:	e9cd 3300 	strd	r3, r3, [sp]
  buffer[1] = (uint8_t)(command & 0xFF); // Low byte
 23f1688:	f88d 100d 	strb.w	r1, [sp, #13]
  return i2c_dev->write(buffer, 2);
 23f168c:	2301      	movs	r3, #1
 23f168e:	2202      	movs	r2, #2
 23f1690:	a903      	add	r1, sp, #12
 23f1692:	6800      	ldr	r0, [r0, #0]
 23f1694:	f7ff fa80 	bl	23f0b98 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
 23f1698:	b005      	add	sp, #20
 23f169a:	f85d fb04 	ldr.w	pc, [sp], #4

023f169e <_ZN16Adafruit_HDC302x11setAutoModeE13hdcAutoMode_t>:
  currentAutoMode = mode;
 23f169e:	8081      	strh	r1, [r0, #4]
  writeCommand(mode);
 23f16a0:	f7ff bfeb 	b.w	23f167a <_ZN16Adafruit_HDC302x12writeCommandEt>

023f16a4 <_ZN16Adafruit_HDC302x19clearStatusRegisterEv>:
  return writeCommand(HDC302x_Commands::CLEAR_STATUS_REGISTER);
 23f16a4:	f243 0141 	movw	r1, #12353	; 0x3041
 23f16a8:	f7ff bfe7 	b.w	23f167a <_ZN16Adafruit_HDC302x12writeCommandEt>

023f16ac <_ZN16Adafruit_HDC302x5resetEv>:
  return writeCommand(HDC302x_Commands::SOFT_RESET);
 23f16ac:	f243 01a2 	movw	r1, #12450	; 0x30a2
 23f16b0:	f7ff bfe3 	b.w	23f167a <_ZN16Adafruit_HDC302x12writeCommandEt>

023f16b4 <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi>:
 * @param len Length of the data array.
 * @return uint8_t The calculated CRC-8 value.
 */
uint8_t Adafruit_HDC302x::calculateCRC8(const uint8_t *data, int len) {
  uint8_t crc = 0xFF; // Typical initial value
  for (int i = 0; i < len; i++) {
 23f16b4:	2300      	movs	r3, #0
  uint8_t crc = 0xFF; // Typical initial value
 23f16b6:	20ff      	movs	r0, #255	; 0xff
uint8_t Adafruit_HDC302x::calculateCRC8(const uint8_t *data, int len) {
 23f16b8:	b510      	push	{r4, lr}
  for (int i = 0; i < len; i++) {
 23f16ba:	4293      	cmp	r3, r2
 23f16bc:	da0e      	bge.n	23f16dc <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi+0x28>
    crc ^= data[i];               // XOR byte into least sig. byte of crc
 23f16be:	5ccc      	ldrb	r4, [r1, r3]
 23f16c0:	4060      	eors	r0, r4
 23f16c2:	2408      	movs	r4, #8
    for (int j = 8; j > 0; j--) { // Loop over each bit
      if (crc & 0x80) {           // If the uppermost bit is 1...
 23f16c4:	f010 0f80 	tst.w	r0, #128	; 0x80
 23f16c8:	ea4f 0040 	mov.w	r0, r0, lsl #1
        crc = (crc << 1) ^ 0x31;  // Polynomial used by HDC302x
 23f16cc:	bf18      	it	ne
 23f16ce:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
    for (int j = 8; j > 0; j--) { // Loop over each bit
 23f16d2:	3c01      	subs	r4, #1
      } else {
        crc = (crc << 1);
 23f16d4:	b2c0      	uxtb	r0, r0
    for (int j = 8; j > 0; j--) { // Loop over each bit
 23f16d6:	d1f5      	bne.n	23f16c4 <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi+0x10>
  for (int i = 0; i < len; i++) {
 23f16d8:	3301      	adds	r3, #1
 23f16da:	e7ee      	b.n	23f16ba <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi+0x6>
      }
    }
  }
  return crc; // Final XOR value can also be applied if specified by device
}
 23f16dc:	bd10      	pop	{r4, pc}
	...

023f16e0 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_>:
                                          double &RH) {
 23f16e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f16e4:	4605      	mov	r5, r0
 23f16e6:	4617      	mov	r7, r2
 23f16e8:	461e      	mov	r6, r3
  if (!writeCommand(command)) {
 23f16ea:	f7ff ffc6 	bl	23f167a <_ZN16Adafruit_HDC302x12writeCommandEt>
 23f16ee:	4604      	mov	r4, r0
 23f16f0:	2800      	cmp	r0, #0
 23f16f2:	d04a      	beq.n	23f178a <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xaa>
 23f16f4:	f04f 080a 	mov.w	r8, #10
  while (!i2c_dev->read(buffer, 6)) {
 23f16f8:	2301      	movs	r3, #1
 23f16fa:	2206      	movs	r2, #6
 23f16fc:	4669      	mov	r1, sp
 23f16fe:	6828      	ldr	r0, [r5, #0]
 23f1700:	f7ff fa7a 	bl	23f0bf8 <_ZN18Adafruit_I2CDevice4readEPhjb>
 23f1704:	4604      	mov	r4, r0
 23f1706:	b930      	cbnz	r0, 23f1716 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0x36>
    if (++retries >= MAX_RETRIES) {
 23f1708:	f1b8 0801 	subs.w	r8, r8, #1
 23f170c:	d03d      	beq.n	23f178a <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xaa>
    delay(1); // Wait and retry if NAK received
 23f170e:	2001      	movs	r0, #1
 23f1710:	f006 fdd8 	bl	23f82c4 <delay>
  while (!i2c_dev->read(buffer, 6)) {
 23f1714:	e7f0      	b.n	23f16f8 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0x18>
  if (calculateCRC8(buffer, 2) != buffer[2]) {
 23f1716:	2202      	movs	r2, #2
 23f1718:	4669      	mov	r1, sp
 23f171a:	4628      	mov	r0, r5
 23f171c:	f7ff ffca 	bl	23f16b4 <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi>
 23f1720:	f89d 3002 	ldrb.w	r3, [sp, #2]
 23f1724:	4283      	cmp	r3, r0
 23f1726:	d134      	bne.n	23f1792 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xb2>
  if (calculateCRC8(buffer + 3, 2) != buffer[5]) {
 23f1728:	4628      	mov	r0, r5
 23f172a:	f10d 0103 	add.w	r1, sp, #3
 23f172e:	f7ff ffc1 	bl	23f16b4 <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi>
 23f1732:	f89d 3005 	ldrb.w	r3, [sp, #5]
 23f1736:	4283      	cmp	r3, r0
 23f1738:	d12b      	bne.n	23f1792 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xb2>
  temp = ((rawTemperature / 65535.0) * 175.0) - 45.0;
 23f173a:	f8bd 0000 	ldrh.w	r0, [sp]
 23f173e:	f8bd 5003 	ldrh.w	r5, [sp, #3]
 23f1742:	ba40      	rev16	r0, r0
 23f1744:	b280      	uxth	r0, r0
 23f1746:	f7f3 fdad 	bl	23e52a4 <__aeabi_i2d>
 23f174a:	a313      	add	r3, pc, #76	; (adr r3, 23f1798 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xb8>)
 23f174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f1750:	f7f3 ff3c 	bl	23e55cc <__aeabi_ddiv>
 23f1754:	a314      	add	r3, pc, #80	; (adr r3, 23f17a8 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xc8>)
 23f1756:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f175a:	f7f3 fe0d 	bl	23e5378 <__aeabi_dmul>
 23f175e:	2200      	movs	r2, #0
 23f1760:	4b0f      	ldr	r3, [pc, #60]	; (23f17a0 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xc0>)
 23f1762:	f7f3 fc51 	bl	23e5008 <__aeabi_dsub>
 23f1766:	ba6d      	rev16	r5, r5
 23f1768:	b2ad      	uxth	r5, r5
 23f176a:	e9c7 0100 	strd	r0, r1, [r7]
  RH = (rawHumidity / 65535.0) * 100.0;
 23f176e:	4628      	mov	r0, r5
 23f1770:	f7f3 fd98 	bl	23e52a4 <__aeabi_i2d>
 23f1774:	a308      	add	r3, pc, #32	; (adr r3, 23f1798 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xb8>)
 23f1776:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f177a:	f7f3 ff27 	bl	23e55cc <__aeabi_ddiv>
 23f177e:	2200      	movs	r2, #0
 23f1780:	4b08      	ldr	r3, [pc, #32]	; (23f17a4 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xc4>)
 23f1782:	f7f3 fdf9 	bl	23e5378 <__aeabi_dmul>
 23f1786:	e9c6 0100 	strd	r0, r1, [r6]
}
 23f178a:	4620      	mov	r0, r4
 23f178c:	b002      	add	sp, #8
 23f178e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return false; // CRC check failed
 23f1792:	2400      	movs	r4, #0
 23f1794:	e7f9      	b.n	23f178a <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xaa>
 23f1796:	bf00      	nop
 23f1798:	00000000 	.word	0x00000000
 23f179c:	40efffe0 	.word	0x40efffe0
 23f17a0:	40468000 	.word	0x40468000
 23f17a4:	40590000 	.word	0x40590000
 23f17a8:	00000000 	.word	0x00000000
 23f17ac:	4065e000 	.word	0x4065e000

023f17b0 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>:
    double &temp, double &RH, hdcTriggerMode_t mode = TRIGGERMODE_LP0) {
 23f17b0:	b410      	push	{r4}
 23f17b2:	460c      	mov	r4, r1
 23f17b4:	4619      	mov	r1, r3
  return sendCommandReadTRH(static_cast<uint16_t>(mode), temp, RH);
 23f17b6:	4613      	mov	r3, r2
 23f17b8:	4622      	mov	r2, r4
}
 23f17ba:	f85d 4b04 	ldr.w	r4, [sp], #4
  return sendCommandReadTRH(static_cast<uint16_t>(mode), temp, RH);
 23f17be:	f7ff bf8f 	b.w	23f16e0 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_>

023f17c2 <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt>:
bool Adafruit_HDC302x::writeCommandReadData(uint16_t command, uint16_t &data) {
 23f17c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  cmd_buffer[0] = (uint8_t)(command >> 8);   // High byte of the command
 23f17c4:	0a0b      	lsrs	r3, r1, #8
bool Adafruit_HDC302x::writeCommandReadData(uint16_t command, uint16_t &data) {
 23f17c6:	b085      	sub	sp, #20
  cmd_buffer[0] = (uint8_t)(command >> 8);   // High byte of the command
 23f17c8:	f88d 3008 	strb.w	r3, [sp, #8]
  if (!i2c_dev->write_then_read(cmd_buffer, 2, data_buffer, 3)) {
 23f17cc:	2700      	movs	r7, #0
 23f17ce:	2303      	movs	r3, #3
 23f17d0:	e9cd 3700 	strd	r3, r7, [sp]
  cmd_buffer[1] = (uint8_t)(command & 0xFF); // Low byte of the command
 23f17d4:	f88d 1009 	strb.w	r1, [sp, #9]
bool Adafruit_HDC302x::writeCommandReadData(uint16_t command, uint16_t &data) {
 23f17d8:	4605      	mov	r5, r0
 23f17da:	4616      	mov	r6, r2
  if (!i2c_dev->write_then_read(cmd_buffer, 2, data_buffer, 3)) {
 23f17dc:	6800      	ldr	r0, [r0, #0]
 23f17de:	2202      	movs	r2, #2
 23f17e0:	ab03      	add	r3, sp, #12
 23f17e2:	a902      	add	r1, sp, #8
 23f17e4:	f7ff fa2a 	bl	23f0c3c <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
 23f17e8:	4604      	mov	r4, r0
 23f17ea:	b160      	cbz	r0, 23f1806 <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt+0x44>
  uint8_t calculated_crc = calculateCRC8(data_buffer, 2);
 23f17ec:	2202      	movs	r2, #2
 23f17ee:	4628      	mov	r0, r5
 23f17f0:	a903      	add	r1, sp, #12
 23f17f2:	f7ff ff5f 	bl	23f16b4 <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi>
  if (calculated_crc != data_buffer[2]) {
 23f17f6:	f89d 300e 	ldrb.w	r3, [sp, #14]
 23f17fa:	4283      	cmp	r3, r0
 23f17fc:	d106      	bne.n	23f180c <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt+0x4a>
  data = (uint16_t)(data_buffer[0] << 8 | data_buffer[1]);
 23f17fe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 23f1802:	ba5b      	rev16	r3, r3
 23f1804:	8033      	strh	r3, [r6, #0]
}
 23f1806:	4620      	mov	r0, r4
 23f1808:	b005      	add	sp, #20
 23f180a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return false; // Communication failed
 23f180c:	463c      	mov	r4, r7
 23f180e:	e7fa      	b.n	23f1806 <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt+0x44>

023f1810 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire>:
bool Adafruit_HDC302x::begin(uint8_t i2cAddr, TwoWire *wire) {
 23f1810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23f1812:	4604      	mov	r4, r0
  delay(5); // wait for device to be ready
 23f1814:	2005      	movs	r0, #5
bool Adafruit_HDC302x::begin(uint8_t i2cAddr, TwoWire *wire) {
 23f1816:	460e      	mov	r6, r1
 23f1818:	4617      	mov	r7, r2
  delay(5); // wait for device to be ready
 23f181a:	f006 fd53 	bl	23f82c4 <delay>
  if (i2c_dev) {
 23f181e:	6820      	ldr	r0, [r4, #0]
 23f1820:	b110      	cbz	r0, 23f1828 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x18>
    delete i2c_dev;
 23f1822:	2110      	movs	r1, #16
 23f1824:	f7f4 fc11 	bl	23e604a <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(i2cAddr, wire);
 23f1828:	2010      	movs	r0, #16
 23f182a:	f7f4 fc0a 	bl	23e6042 <_Znwj>
 23f182e:	4605      	mov	r5, r0
 23f1830:	b118      	cbz	r0, 23f183a <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x2a>
 23f1832:	463a      	mov	r2, r7
 23f1834:	4631      	mov	r1, r6
 23f1836:	f7ff f984 	bl	23f0b42 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin()) {
 23f183a:	2101      	movs	r1, #1
 23f183c:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(i2cAddr, wire);
 23f183e:	6025      	str	r5, [r4, #0]
  if (!i2c_dev->begin()) {
 23f1840:	f7ff f99b 	bl	23f0b7a <_ZN18Adafruit_I2CDevice5beginEb>
 23f1844:	b918      	cbnz	r0, 23f184e <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x3e>
    return false;
 23f1846:	2500      	movs	r5, #0
}
 23f1848:	4628      	mov	r0, r5
 23f184a:	b003      	add	sp, #12
 23f184c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!reset()) {
 23f184e:	4620      	mov	r0, r4
 23f1850:	f7ff ff2c 	bl	23f16ac <_ZN16Adafruit_HDC302x5resetEv>
 23f1854:	2800      	cmp	r0, #0
 23f1856:	d0f6      	beq.n	23f1846 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x36>
  clearStatusRegister();
 23f1858:	4620      	mov	r0, r4
 23f185a:	f7ff ff23 	bl	23f16a4 <_ZN16Adafruit_HDC302x19clearStatusRegisterEv>
  if (!writeCommandReadData(HDC302x_Commands::READ_MANUFACTURER_ID,
 23f185e:	f243 7181 	movw	r1, #14209	; 0x3781
 23f1862:	4620      	mov	r0, r4
 23f1864:	f10d 0206 	add.w	r2, sp, #6
 23f1868:	f7ff ffab 	bl	23f17c2 <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt>
                            manufacturerID) ||
 23f186c:	4605      	mov	r5, r0
 23f186e:	2800      	cmp	r0, #0
 23f1870:	d0e9      	beq.n	23f1846 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x36>
 23f1872:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 23f1876:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 23f187a:	d1e4      	bne.n	23f1846 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x36>
  setAutoMode(EXIT_AUTO_MODE);
 23f187c:	f243 0193 	movw	r1, #12435	; 0x3093
 23f1880:	4620      	mov	r0, r4
 23f1882:	f7ff ff0c 	bl	23f169e <_ZN16Adafruit_HDC302x11setAutoModeE13hdcAutoMode_t>
  return true;
 23f1886:	e7df      	b.n	23f1848 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x38>

023f1888 <_ZN16Adafruit_HTU21DFC1Ev>:
#include "Adafruit_HTU21DF.h"

/**
 * Constructor for the HTU21DF driver.
 */
Adafruit_HTU21DF::Adafruit_HTU21DF() {
 23f1888:	2200      	movs	r2, #0
 23f188a:	6002      	str	r2, [r0, #0]
  /* Assign default values to internal tracking variables. */
  _last_humidity = 0.0f;
 23f188c:	2200      	movs	r2, #0
 23f188e:	6042      	str	r2, [r0, #4]
  _last_temp = 0.0f;
 23f1890:	6082      	str	r2, [r0, #8]
}
 23f1892:	4770      	bx	lr

023f1894 <_ZN16Adafruit_HTU21DF5resetEv>:
}

/**
 * Sends a 'reset' request to the HTU21DF, followed by a 15ms delay.
 */
void Adafruit_HTU21DF::reset(void) {
 23f1894:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t cmd = HTU21DF_RESET;
 23f1896:	23fe      	movs	r3, #254	; 0xfe
 23f1898:	f88d 300f 	strb.w	r3, [sp, #15]
  i2c_dev->write(&cmd, 1);
 23f189c:	2300      	movs	r3, #0
 23f189e:	e9cd 3300 	strd	r3, r3, [sp]
 23f18a2:	2301      	movs	r3, #1
 23f18a4:	f10d 010f 	add.w	r1, sp, #15
 23f18a8:	461a      	mov	r2, r3
 23f18aa:	6800      	ldr	r0, [r0, #0]
 23f18ac:	f7ff f974 	bl	23f0b98 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>

  delay(15);
 23f18b0:	200f      	movs	r0, #15
 23f18b2:	f006 fd07 	bl	23f82c4 <delay>
}
 23f18b6:	b005      	add	sp, #20
 23f18b8:	f85d fb04 	ldr.w	pc, [sp], #4

023f18bc <_ZN16Adafruit_HTU21DF5beginEP7TwoWire>:
bool Adafruit_HTU21DF::begin(TwoWire *theWire) {
 23f18bc:	b570      	push	{r4, r5, r6, lr}
 23f18be:	4604      	mov	r4, r0
  if (i2c_dev) {
 23f18c0:	6800      	ldr	r0, [r0, #0]
bool Adafruit_HTU21DF::begin(TwoWire *theWire) {
 23f18c2:	460e      	mov	r6, r1
 23f18c4:	b088      	sub	sp, #32
  if (i2c_dev) {
 23f18c6:	b110      	cbz	r0, 23f18ce <_ZN16Adafruit_HTU21DF5beginEP7TwoWire+0x12>
    delete i2c_dev;
 23f18c8:	2110      	movs	r1, #16
 23f18ca:	f7f4 fbbe 	bl	23e604a <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(HTU21DF_I2CADDR, theWire);
 23f18ce:	2010      	movs	r0, #16
 23f18d0:	f7f4 fbb7 	bl	23e6042 <_Znwj>
 23f18d4:	4605      	mov	r5, r0
 23f18d6:	b118      	cbz	r0, 23f18e0 <_ZN16Adafruit_HTU21DF5beginEP7TwoWire+0x24>
 23f18d8:	4632      	mov	r2, r6
 23f18da:	2140      	movs	r1, #64	; 0x40
 23f18dc:	f7ff f931 	bl	23f0b42 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin()) {
 23f18e0:	2101      	movs	r1, #1
 23f18e2:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(HTU21DF_I2CADDR, theWire);
 23f18e4:	6025      	str	r5, [r4, #0]
  if (!i2c_dev->begin()) {
 23f18e6:	f7ff f948 	bl	23f0b7a <_ZN18Adafruit_I2CDevice5beginEb>
 23f18ea:	b188      	cbz	r0, 23f1910 <_ZN16Adafruit_HTU21DF5beginEP7TwoWire+0x54>
  reset();
 23f18ec:	4620      	mov	r0, r4
 23f18ee:	f7ff ffd1 	bl	23f1894 <_ZN16Adafruit_HTU21DF5resetEv>
      Adafruit_BusIO_Register(i2c_dev, HTU21DF_READREG);
 23f18f2:	2301      	movs	r3, #1
 23f18f4:	2200      	movs	r2, #0
 23f18f6:	6821      	ldr	r1, [r4, #0]
 23f18f8:	e9cd 2300 	strd	r2, r3, [sp]
 23f18fc:	a802      	add	r0, sp, #8
 23f18fe:	22e7      	movs	r2, #231	; 0xe7
 23f1900:	f7ff f80a 	bl	23f0918 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return (reg.read() == 0x2); // after reset should be 0x2
 23f1904:	a802      	add	r0, sp, #8
 23f1906:	f7ff f8d5 	bl	23f0ab4 <_ZN23Adafruit_BusIO_Register4readEv>
 23f190a:	1e83      	subs	r3, r0, #2
 23f190c:	4258      	negs	r0, r3
 23f190e:	4158      	adcs	r0, r3
}
 23f1910:	b008      	add	sp, #32
 23f1912:	bd70      	pop	{r4, r5, r6, pc}

023f1914 <_ZN16Adafruit_HTU21DF15readTemperatureEv>:
 * Performs a single temperature conversion in degrees Celsius.
 *
 * @return a single-precision (32-bit) float value indicating the measured
 *         temperature in degrees Celsius or NAN on failure.
 */
float Adafruit_HTU21DF::readTemperature(void) {
 23f1914:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // OK lets ready!
  uint8_t cmd = HTU21DF_READTEMP;
 23f1916:	23e3      	movs	r3, #227	; 0xe3
 23f1918:	f88d 300b 	strb.w	r3, [sp, #11]
  if (!i2c_dev->write(&cmd, 1)) {
 23f191c:	2300      	movs	r3, #0
 23f191e:	e9cd 3300 	strd	r3, r3, [sp]
 23f1922:	2301      	movs	r3, #1
float Adafruit_HTU21DF::readTemperature(void) {
 23f1924:	4604      	mov	r4, r0
  if (!i2c_dev->write(&cmd, 1)) {
 23f1926:	461a      	mov	r2, r3
 23f1928:	6800      	ldr	r0, [r0, #0]
 23f192a:	f10d 010b 	add.w	r1, sp, #11
 23f192e:	f7ff f933 	bl	23f0b98 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 23f1932:	b318      	cbz	r0, 23f197c <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x68>
    return NAN;
  }

  delay(50); // add delay between request and actual read!
 23f1934:	2032      	movs	r0, #50	; 0x32
 23f1936:	f006 fcc5 	bl	23f82c4 <delay>

  uint8_t buf[3];
  if (!i2c_dev->read(buf, 3)) {
 23f193a:	2301      	movs	r3, #1
 23f193c:	2203      	movs	r2, #3
 23f193e:	6820      	ldr	r0, [r4, #0]
 23f1940:	a903      	add	r1, sp, #12
 23f1942:	f7ff f959 	bl	23f0bf8 <_ZN18Adafruit_I2CDevice4readEPhjb>
 23f1946:	b1c8      	cbz	r0, 23f197c <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x68>
  }

  /* Read 16 bits of data, dropping the last two status bits. */
  uint16_t t = buf[0];
  t <<= 8;
  t |= buf[1] & 0b11111100;
 23f1948:	f89d 300d 	ldrb.w	r3, [sp, #13]
  uint16_t t = buf[0];
 23f194c:	f89d 200c 	ldrb.w	r2, [sp, #12]
  t |= buf[1] & 0b11111100;
 23f1950:	f003 03fc 	and.w	r3, r3, #252	; 0xfc

  // 3rd byte is the CRC

  float temp = t;
 23f1954:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 23f1958:	ee07 3a90 	vmov	s15, r3
  temp *= 175.72f;
 23f195c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 23f1984 <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x70>
  float temp = t;
 23f1960:	eef8 7a67 	vcvt.f32.u32	s15, s15
  temp /= 65536.0f;
  temp -= 46.85f;
 23f1964:	ed9f 0a08 	vldr	s0, [pc, #32]	; 23f1988 <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x74>
  temp *= 175.72f;
 23f1968:	ee67 7a87 	vmul.f32	s15, s15, s14
  temp -= 46.85f;
 23f196c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 23f198c <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x78>
 23f1970:	eea7 0a87 	vfma.f32	s0, s15, s14

  /* Track the value internally in case we need to access it later. */
  _last_temp = temp;
 23f1974:	ed84 0a02 	vstr	s0, [r4, #8]

  return temp;
}
 23f1978:	b004      	add	sp, #16
 23f197a:	bd10      	pop	{r4, pc}
    return NAN;
 23f197c:	ed9f 0a04 	vldr	s0, [pc, #16]	; 23f1990 <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x7c>
 23f1980:	e7fa      	b.n	23f1978 <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x64>
 23f1982:	bf00      	nop
 23f1984:	432fb852 	.word	0x432fb852
 23f1988:	c23b6666 	.word	0xc23b6666
 23f198c:	37800000 	.word	0x37800000
 23f1990:	7fc00000 	.word	0x7fc00000

023f1994 <_ZN16Adafruit_HTU21DF12readHumidityEv>:
 * Performs a single relative humidity conversion.
 *
 * @return A single-precision (32-bit) float value indicating the relative
 *         humidity in percent (0..100.0%).
 */
float Adafruit_HTU21DF::readHumidity(void) {
 23f1994:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* Prepare the I2C request. */
  uint8_t cmd = HTU21DF_READHUM;
 23f1996:	23e5      	movs	r3, #229	; 0xe5
 23f1998:	f88d 300b 	strb.w	r3, [sp, #11]
  if (!i2c_dev->write(&cmd, 1)) {
 23f199c:	2300      	movs	r3, #0
 23f199e:	e9cd 3300 	strd	r3, r3, [sp]
 23f19a2:	2301      	movs	r3, #1
float Adafruit_HTU21DF::readHumidity(void) {
 23f19a4:	4604      	mov	r4, r0
  if (!i2c_dev->write(&cmd, 1)) {
 23f19a6:	461a      	mov	r2, r3
 23f19a8:	6800      	ldr	r0, [r0, #0]
 23f19aa:	f10d 010b 	add.w	r1, sp, #11
 23f19ae:	f7ff f8f3 	bl	23f0b98 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 23f19b2:	b318      	cbz	r0, 23f19fc <_ZN16Adafruit_HTU21DF12readHumidityEv+0x68>
    return NAN;
  }

  /* Wait a bit for the conversion to complete. */
  delay(50);
 23f19b4:	2032      	movs	r0, #50	; 0x32
 23f19b6:	f006 fc85 	bl	23f82c4 <delay>

  uint8_t buf[3];
  if (!i2c_dev->read(buf, 3)) {
 23f19ba:	2301      	movs	r3, #1
 23f19bc:	2203      	movs	r2, #3
 23f19be:	6820      	ldr	r0, [r4, #0]
 23f19c0:	a903      	add	r1, sp, #12
 23f19c2:	f7ff f919 	bl	23f0bf8 <_ZN18Adafruit_I2CDevice4readEPhjb>
 23f19c6:	b1c8      	cbz	r0, 23f19fc <_ZN16Adafruit_HTU21DF12readHumidityEv+0x68>
  }

  /* Read 16 bits of data, dropping the last two status bits. */
  uint16_t h = buf[0];
  h <<= 8;
  h |= buf[1] & 0b11111100;
 23f19c8:	f89d 300d 	ldrb.w	r3, [sp, #13]
  uint16_t h = buf[0];
 23f19cc:	f89d 200c 	ldrb.w	r2, [sp, #12]
  h |= buf[1] & 0b11111100;
 23f19d0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc

  // 3rd byte is the CRC

  float hum = h;
 23f19d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 23f19d8:	ee07 3a90 	vmov	s15, r3
  hum *= 125.0f;
 23f19dc:	ed9f 7a09 	vldr	s14, [pc, #36]	; 23f1a04 <_ZN16Adafruit_HTU21DF12readHumidityEv+0x70>
  float hum = h;
 23f19e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
  hum /= 65536.0f;
  hum -= 6.0f;
 23f19e4:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
  hum *= 125.0f;
 23f19e8:	ee67 7a87 	vmul.f32	s15, s15, s14
  hum -= 6.0f;
 23f19ec:	ed9f 7a06 	vldr	s14, [pc, #24]	; 23f1a08 <_ZN16Adafruit_HTU21DF12readHumidityEv+0x74>
 23f19f0:	eea7 0a87 	vfma.f32	s0, s15, s14

  /* Track the value internally in case we need to access it later. */
  _last_humidity = hum;
 23f19f4:	ed84 0a01 	vstr	s0, [r4, #4]

  return hum;
}
 23f19f8:	b004      	add	sp, #16
 23f19fa:	bd10      	pop	{r4, pc}
    return NAN;
 23f19fc:	ed9f 0a03 	vldr	s0, [pc, #12]	; 23f1a0c <_ZN16Adafruit_HTU21DF12readHumidityEv+0x78>
 23f1a00:	e7fa      	b.n	23f19f8 <_ZN16Adafruit_HTU21DF12readHumidityEv+0x64>
 23f1a02:	bf00      	nop
 23f1a04:	42fa0000 	.word	0x42fa0000
 23f1a08:	37800000 	.word	0x37800000
 23f1a0c:	7fc00000 	.word	0x7fc00000

023f1a10 <_ZN16Adafruit_LPS35HWC1Ev>:
#include "Adafruit_LPS35HW.h"

/*!
 *    @brief  Instantiates a new LPS35HW class
 */
Adafruit_LPS35HW::Adafruit_LPS35HW(void) {}
 23f1a10:	4770      	bx	lr

023f1a12 <_ZN16Adafruit_LPS35HW5resetEv>:
/*!
    @brief Resets the hardware. All configuration registers are set to
            default values, the same as a power-on reset.
*/
/**************************************************************************/
void Adafruit_LPS35HW::reset(void) {
 23f1a12:	b507      	push	{r0, r1, r2, lr}
  Adafruit_BusIO_RegisterBits reset =
      Adafruit_BusIO_RegisterBits(Config2, 1, 2);
 23f1a14:	2302      	movs	r3, #2
 23f1a16:	6841      	ldr	r1, [r0, #4]
 23f1a18:	2201      	movs	r2, #1
 23f1a1a:	4668      	mov	r0, sp
 23f1a1c:	f7ff f866 	bl	23f0aec <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  reset.write(1);
 23f1a20:	2101      	movs	r1, #1
 23f1a22:	4668      	mov	r0, sp
 23f1a24:	f7ff f874 	bl	23f0b10 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  while (reset.read() == true) {
 23f1a28:	4668      	mov	r0, sp
 23f1a2a:	f7ff f864 	bl	23f0af6 <_ZN27Adafruit_BusIO_RegisterBits4readEv>
 23f1a2e:	2801      	cmp	r0, #1
 23f1a30:	d102      	bne.n	23f1a38 <_ZN16Adafruit_LPS35HW5resetEv+0x26>
    delay(1);
 23f1a32:	f006 fc47 	bl	23f82c4 <delay>
  while (reset.read() == true) {
 23f1a36:	e7f7      	b.n	23f1a28 <_ZN16Adafruit_LPS35HW5resetEv+0x16>
  }
}
 23f1a38:	b003      	add	sp, #12
 23f1a3a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023f1a40 <_ZN16Adafruit_LPS35HW15readTemperatureEv>:
    @return The current temperature in degrees C
*/
/**************************************************************************/
float Adafruit_LPS35HW::readTemperature(void) {
  Adafruit_BusIO_Register temp = Adafruit_BusIO_Register(
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_TEMP_OUT_L, 2);
 23f1a40:	2300      	movs	r3, #0
 23f1a42:	2201      	movs	r2, #1
float Adafruit_LPS35HW::readTemperature(void) {
 23f1a44:	b500      	push	{lr}
 23f1a46:	b08b      	sub	sp, #44	; 0x2c
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_TEMP_OUT_L, 2);
 23f1a48:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f1a4c:	2102      	movs	r1, #2
 23f1a4e:	222b      	movs	r2, #43	; 0x2b
 23f1a50:	e9cd 2100 	strd	r2, r1, [sp]
 23f1a54:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 23f1a58:	a804      	add	r0, sp, #16
 23f1a5a:	f7fe ff6b 	bl	23f0934 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  return (int16_t)temp.read() / 100.0;
 23f1a5e:	a804      	add	r0, sp, #16
 23f1a60:	f7ff f828 	bl	23f0ab4 <_ZN23Adafruit_BusIO_Register4readEv>
 23f1a64:	b200      	sxth	r0, r0
 23f1a66:	f7f3 fc1d 	bl	23e52a4 <__aeabi_i2d>
 23f1a6a:	2200      	movs	r2, #0
 23f1a6c:	4b04      	ldr	r3, [pc, #16]	; (23f1a80 <_ZN16Adafruit_LPS35HW15readTemperatureEv+0x40>)
 23f1a6e:	f7f3 fdad 	bl	23e55cc <__aeabi_ddiv>
 23f1a72:	f7f3 ff79 	bl	23e5968 <__aeabi_d2f>
}
 23f1a76:	ee00 0a10 	vmov	s0, r0
 23f1a7a:	b00b      	add	sp, #44	; 0x2c
 23f1a7c:	f85d fb04 	ldr.w	pc, [sp], #4
 23f1a80:	40590000 	.word	0x40590000

023f1a84 <_ZN16Adafruit_LPS35HW12readPressureEv>:
    @return The current pressure in hPa, relative to the reference temperature
*/
/**************************************************************************/
float Adafruit_LPS35HW::readPressure(void) {
  Adafruit_BusIO_Register pressure = Adafruit_BusIO_Register(
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_PRESS_OUT_XL, 3);
 23f1a84:	2300      	movs	r3, #0
 23f1a86:	2201      	movs	r2, #1
float Adafruit_LPS35HW::readPressure(void) {
 23f1a88:	b500      	push	{lr}
 23f1a8a:	b08b      	sub	sp, #44	; 0x2c
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_PRESS_OUT_XL, 3);
 23f1a8c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f1a90:	2103      	movs	r1, #3
 23f1a92:	2228      	movs	r2, #40	; 0x28
 23f1a94:	e9cd 2100 	strd	r2, r1, [sp]
 23f1a98:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 23f1a9c:	a804      	add	r0, sp, #16
 23f1a9e:	f7fe ff49 	bl	23f0934 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  int32_t raw_pressure = pressure.read();
 23f1aa2:	a804      	add	r0, sp, #16
 23f1aa4:	f7ff f806 	bl	23f0ab4 <_ZN23Adafruit_BusIO_Register4readEv>
  // perform sign extension for 24 bit number if needed
  if (raw_pressure & 0x800000) {
 23f1aa8:	0203      	lsls	r3, r0, #8
    raw_pressure = (0xff000000 | raw_pressure);
 23f1aaa:	bf48      	it	mi
 23f1aac:	f040 407f 	orrmi.w	r0, r0, #4278190080	; 0xff000000
  }

  return (raw_pressure / 4096.0);
 23f1ab0:	f7f3 fbf8 	bl	23e52a4 <__aeabi_i2d>
 23f1ab4:	2200      	movs	r2, #0
 23f1ab6:	4b05      	ldr	r3, [pc, #20]	; (23f1acc <_ZN16Adafruit_LPS35HW12readPressureEv+0x48>)
 23f1ab8:	f7f3 fc5e 	bl	23e5378 <__aeabi_dmul>
 23f1abc:	f7f3 ff54 	bl	23e5968 <__aeabi_d2f>
}
 23f1ac0:	ee00 0a10 	vmov	s0, r0
 23f1ac4:	b00b      	add	sp, #44	; 0x2c
 23f1ac6:	f85d fb04 	ldr.w	pc, [sp], #4
 23f1aca:	bf00      	nop
 23f1acc:	3f300000 	.word	0x3f300000

023f1ad0 <_ZN16Adafruit_LPS35HW11setDataRateE10_data_rate>:
    @brief Sets a new measurement rate
    @param new_rate
          The new output data rate to be set (ODR)
*/
/**************************************************************************/
void Adafruit_LPS35HW::setDataRate(LPS35HW_DataRate new_rate) {
 23f1ad0:	b513      	push	{r0, r1, r4, lr}
 23f1ad2:	460c      	mov	r4, r1
  Adafruit_BusIO_RegisterBits data_rate =
      Adafruit_BusIO_RegisterBits(Config1, 3, 4);
 23f1ad4:	2304      	movs	r3, #4
 23f1ad6:	2203      	movs	r2, #3
 23f1ad8:	6801      	ldr	r1, [r0, #0]
 23f1ada:	4668      	mov	r0, sp
 23f1adc:	f7ff f806 	bl	23f0aec <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  data_rate.write(new_rate);
 23f1ae0:	4621      	mov	r1, r4
 23f1ae2:	4668      	mov	r0, sp
 23f1ae4:	f7ff f814 	bl	23f0b10 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
 23f1ae8:	b002      	add	sp, #8
 23f1aea:	bd10      	pop	{r4, pc}

023f1aec <_ZN16Adafruit_LPS35HW5_initEv>:
boolean Adafruit_LPS35HW::_init(void) {
 23f1aec:	b5f0      	push	{r4, r5, r6, r7, lr}
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_WHO_AM_I, 1);
 23f1aee:	2500      	movs	r5, #0
 23f1af0:	2701      	movs	r7, #1
 23f1af2:	230f      	movs	r3, #15
boolean Adafruit_LPS35HW::_init(void) {
 23f1af4:	b08d      	sub	sp, #52	; 0x34
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_WHO_AM_I, 1);
 23f1af6:	e9cd 5702 	strd	r5, r7, [sp, #8]
 23f1afa:	9300      	str	r3, [sp, #0]
 23f1afc:	9701      	str	r7, [sp, #4]
 23f1afe:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 23f1b02:	462b      	mov	r3, r5
boolean Adafruit_LPS35HW::_init(void) {
 23f1b04:	4604      	mov	r4, r0
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_WHO_AM_I, 1);
 23f1b06:	a806      	add	r0, sp, #24
 23f1b08:	f7fe ff14 	bl	23f0934 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  if (chip_id.read() != 0xB1) {
 23f1b0c:	a806      	add	r0, sp, #24
 23f1b0e:	f7fe ffd1 	bl	23f0ab4 <_ZN23Adafruit_BusIO_Register4readEv>
 23f1b12:	28b1      	cmp	r0, #177	; 0xb1
 23f1b14:	d167      	bne.n	23f1be6 <_ZN16Adafruit_LPS35HW5_initEv+0xfa>
                                        LPS35HW_CTRL_REG1, 1);
 23f1b16:	2018      	movs	r0, #24
 23f1b18:	f7f4 fa93 	bl	23e6042 <_Znwj>
 23f1b1c:	4606      	mov	r6, r0
 23f1b1e:	b148      	cbz	r0, 23f1b34 <_ZN16Adafruit_LPS35HW5_initEv+0x48>
 23f1b20:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 23f1b24:	2310      	movs	r3, #16
 23f1b26:	e9cd 5702 	strd	r5, r7, [sp, #8]
 23f1b2a:	9300      	str	r3, [sp, #0]
 23f1b2c:	9701      	str	r7, [sp, #4]
 23f1b2e:	462b      	mov	r3, r5
 23f1b30:	f7fe ff00 	bl	23f0934 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
                                        LPS35HW_CTRL_REG2, 1);
 23f1b34:	2018      	movs	r0, #24
  Config1 = new Adafruit_BusIO_Register(i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD,
 23f1b36:	6026      	str	r6, [r4, #0]
                                        LPS35HW_CTRL_REG2, 1);
 23f1b38:	f7f4 fa83 	bl	23e6042 <_Znwj>
 23f1b3c:	4605      	mov	r5, r0
 23f1b3e:	b150      	cbz	r0, 23f1b56 <_ZN16Adafruit_LPS35HW5_initEv+0x6a>
 23f1b40:	2201      	movs	r2, #1
 23f1b42:	2300      	movs	r3, #0
 23f1b44:	9201      	str	r2, [sp, #4]
 23f1b46:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f1b4a:	2211      	movs	r2, #17
 23f1b4c:	9200      	str	r2, [sp, #0]
 23f1b4e:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 23f1b52:	f7fe feef 	bl	23f0934 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Config2 = new Adafruit_BusIO_Register(i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD,
 23f1b56:	6065      	str	r5, [r4, #4]
                                        LPS35HW_CTRL_REG3, 1);
 23f1b58:	2018      	movs	r0, #24
 23f1b5a:	f7f4 fa72 	bl	23e6042 <_Znwj>
 23f1b5e:	4605      	mov	r5, r0
 23f1b60:	b150      	cbz	r0, 23f1b78 <_ZN16Adafruit_LPS35HW5_initEv+0x8c>
 23f1b62:	2201      	movs	r2, #1
 23f1b64:	2300      	movs	r3, #0
 23f1b66:	9201      	str	r2, [sp, #4]
 23f1b68:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f1b6c:	2212      	movs	r2, #18
 23f1b6e:	9200      	str	r2, [sp, #0]
 23f1b70:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 23f1b74:	f7fe fede 	bl	23f0934 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Config3 = new Adafruit_BusIO_Register(i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD,
 23f1b78:	60a5      	str	r5, [r4, #8]
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_INTERRUPT_CFG, 1);
 23f1b7a:	2018      	movs	r0, #24
 23f1b7c:	f7f4 fa61 	bl	23e6042 <_Znwj>
 23f1b80:	4605      	mov	r5, r0
 23f1b82:	b150      	cbz	r0, 23f1b9a <_ZN16Adafruit_LPS35HW5_initEv+0xae>
 23f1b84:	2201      	movs	r2, #1
 23f1b86:	2300      	movs	r3, #0
 23f1b88:	9201      	str	r2, [sp, #4]
 23f1b8a:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f1b8e:	220b      	movs	r2, #11
 23f1b90:	9200      	str	r2, [sp, #0]
 23f1b92:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 23f1b96:	f7fe fecd 	bl	23f0934 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  InterruptCfg = new Adafruit_BusIO_Register(
 23f1b9a:	60e5      	str	r5, [r4, #12]
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_INT_SOURCE, 1);
 23f1b9c:	2018      	movs	r0, #24
 23f1b9e:	f7f4 fa50 	bl	23e6042 <_Znwj>
 23f1ba2:	4605      	mov	r5, r0
 23f1ba4:	b150      	cbz	r0, 23f1bbc <_ZN16Adafruit_LPS35HW5_initEv+0xd0>
 23f1ba6:	2201      	movs	r2, #1
 23f1ba8:	2300      	movs	r3, #0
 23f1baa:	9201      	str	r2, [sp, #4]
 23f1bac:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f1bb0:	2225      	movs	r2, #37	; 0x25
 23f1bb2:	9200      	str	r2, [sp, #0]
 23f1bb4:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 23f1bb8:	f7fe febc 	bl	23f0934 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  reset();
 23f1bbc:	4620      	mov	r0, r4
  InterruptStatus = new Adafruit_BusIO_Register(
 23f1bbe:	6125      	str	r5, [r4, #16]
  reset();
 23f1bc0:	f7ff ff27 	bl	23f1a12 <_ZN16Adafruit_LPS35HW5resetEv>
  setDataRate(LPS35HW_RATE_10_HZ); // default in continuous at 10 hz
 23f1bc4:	2102      	movs	r1, #2
 23f1bc6:	4620      	mov	r0, r4
 23f1bc8:	f7ff ff82 	bl	23f1ad0 <_ZN16Adafruit_LPS35HW11setDataRateE10_data_rate>
      Adafruit_BusIO_RegisterBits(Config1, 1, 1);
 23f1bcc:	2301      	movs	r3, #1
 23f1bce:	6821      	ldr	r1, [r4, #0]
 23f1bd0:	461a      	mov	r2, r3
 23f1bd2:	a804      	add	r0, sp, #16
 23f1bd4:	f7fe ff8a 	bl	23f0aec <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  block_reads.write(0x1);
 23f1bd8:	2101      	movs	r1, #1
 23f1bda:	a804      	add	r0, sp, #16
 23f1bdc:	f7fe ff98 	bl	23f0b10 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  return true;
 23f1be0:	2001      	movs	r0, #1
}
 23f1be2:	b00d      	add	sp, #52	; 0x34
 23f1be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return false;
 23f1be6:	4628      	mov	r0, r5
 23f1be8:	e7fb      	b.n	23f1be2 <_ZN16Adafruit_LPS35HW5_initEv+0xf6>

023f1bea <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire>:
  spi_dev = NULL;
 23f1bea:	2300      	movs	r3, #0
boolean Adafruit_LPS35HW::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
 23f1bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  spi_dev = NULL;
 23f1bee:	6183      	str	r3, [r0, #24]
boolean Adafruit_LPS35HW::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
 23f1bf0:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
 23f1bf2:	2010      	movs	r0, #16
boolean Adafruit_LPS35HW::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
 23f1bf4:	e9cd 2100 	strd	r2, r1, [sp]
  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
 23f1bf8:	f7f4 fa23 	bl	23e6042 <_Znwj>
 23f1bfc:	4605      	mov	r5, r0
 23f1bfe:	b118      	cbz	r0, 23f1c08 <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire+0x1e>
 23f1c00:	e9dd 2100 	ldrd	r2, r1, [sp]
 23f1c04:	f7fe ff9d 	bl	23f0b42 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin()) {
 23f1c08:	2101      	movs	r1, #1
 23f1c0a:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
 23f1c0c:	6165      	str	r5, [r4, #20]
  if (!i2c_dev->begin()) {
 23f1c0e:	f7fe ffb4 	bl	23f0b7a <_ZN18Adafruit_I2CDevice5beginEb>
 23f1c12:	b128      	cbz	r0, 23f1c20 <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire+0x36>
  return _init();
 23f1c14:	4620      	mov	r0, r4
}
 23f1c16:	b003      	add	sp, #12
 23f1c18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return _init();
 23f1c1c:	f7ff bf66 	b.w	23f1aec <_ZN16Adafruit_LPS35HW5_initEv>
}
 23f1c20:	b003      	add	sp, #12
 23f1c22:	bd30      	pop	{r4, r5, pc}

023f1c24 <_ZN16Adafruit_MCP9808D1Ev>:
 23f1c24:	4770      	bx	lr

023f1c26 <_ZN16Adafruit_MCP9808D0Ev>:
 23f1c26:	b510      	push	{r4, lr}
 23f1c28:	4604      	mov	r4, r0
 23f1c2a:	210c      	movs	r1, #12
 23f1c2c:	f7f4 fa0d 	bl	23e604a <_ZdlPvj>
 23f1c30:	4620      	mov	r0, r4
 23f1c32:	bd10      	pop	{r4, pc}

023f1c34 <_ZN16Adafruit_MCP98089getSensorEP8sensor_t>:
   resulution
    @param  sensor Pointer to Adafruit_Sensor sensor_t object that will be
   filled with sensor type data
*/
/**************************************************************************/
void Adafruit_MCP9808::getSensor(sensor_t *sensor) {
 23f1c34:	b538      	push	{r3, r4, r5, lr}
 23f1c36:	460c      	mov	r4, r1
 23f1c38:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 23f1c3a:	2220      	movs	r2, #32
 23f1c3c:	2100      	movs	r1, #0
 23f1c3e:	f104 0008 	add.w	r0, r4, #8
 23f1c42:	f00b f8e4 	bl	23fce0e <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "MCP9808", sizeof(sensor->name) - 1);
 23f1c46:	220b      	movs	r2, #11
 23f1c48:	4620      	mov	r0, r4
 23f1c4a:	4908      	ldr	r1, [pc, #32]	; (23f1c6c <_ZN16Adafruit_MCP98089getSensorEP8sensor_t+0x38>)
 23f1c4c:	f00b f98d 	bl	23fcf6a <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
 23f1c50:	2301      	movs	r3, #1
 23f1c52:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
 23f1c54:	88eb      	ldrh	r3, [r5, #6]
 23f1c56:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 23f1c58:	230d      	movs	r3, #13
 23f1c5a:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->max_value = 100.0;
 23f1c5c:	4b04      	ldr	r3, [pc, #16]	; (23f1c70 <_ZN16Adafruit_MCP98089getSensorEP8sensor_t+0x3c>)
 23f1c5e:	61a3      	str	r3, [r4, #24]
  sensor->min_value = -20.0;
 23f1c60:	4b04      	ldr	r3, [pc, #16]	; (23f1c74 <_ZN16Adafruit_MCP98089getSensorEP8sensor_t+0x40>)
 23f1c62:	61e3      	str	r3, [r4, #28]
  sensor->resolution = 0.0625;
 23f1c64:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 23f1c68:	6223      	str	r3, [r4, #32]
}
 23f1c6a:	bd38      	pop	{r3, r4, r5, pc}
 23f1c6c:	023ff1fc 	.word	0x023ff1fc
 23f1c70:	42c80000 	.word	0x42c80000
 23f1c74:	c1a00000 	.word	0xc1a00000

023f1c78 <_ZN16Adafruit_MCP9808C1Ev>:
Adafruit_MCP9808::Adafruit_MCP9808() {}
 23f1c78:	4a03      	ldr	r2, [pc, #12]	; (23f1c88 <_ZN16Adafruit_MCP9808C1Ev+0x10>)
 23f1c7a:	6002      	str	r2, [r0, #0]
 23f1c7c:	f242 6250 	movw	r2, #9808	; 0x2650
 23f1c80:	80c2      	strh	r2, [r0, #6]
 23f1c82:	2200      	movs	r2, #0
 23f1c84:	6082      	str	r2, [r0, #8]
 23f1c86:	4770      	bx	lr
 23f1c88:	023ff20c 	.word	0x023ff20c

023f1c8c <_ZN16Adafruit_MCP98087write16Eht>:
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
 23f1c8c:	2301      	movs	r3, #1
void Adafruit_MCP9808::write16(uint8_t reg, uint16_t value) {
 23f1c8e:	b510      	push	{r4, lr}
 23f1c90:	4614      	mov	r4, r2
 23f1c92:	b088      	sub	sp, #32
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
 23f1c94:	e9cd 3300 	strd	r3, r3, [sp]
 23f1c98:	460a      	mov	r2, r1
 23f1c9a:	2302      	movs	r3, #2
 23f1c9c:	6881      	ldr	r1, [r0, #8]
 23f1c9e:	a802      	add	r0, sp, #8
 23f1ca0:	f7fe fe3a 	bl	23f0918 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  reg16.write(value);
 23f1ca4:	2200      	movs	r2, #0
 23f1ca6:	4621      	mov	r1, r4
 23f1ca8:	a802      	add	r0, sp, #8
 23f1caa:	f7fe fea3 	bl	23f09f4 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
 23f1cae:	b008      	add	sp, #32
 23f1cb0:	bd10      	pop	{r4, pc}

023f1cb2 <_ZN16Adafruit_MCP98086read16Eh>:
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
 23f1cb2:	2301      	movs	r3, #1
uint16_t Adafruit_MCP9808::read16(uint8_t reg) {
 23f1cb4:	b500      	push	{lr}
 23f1cb6:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
 23f1cb8:	e9cd 3300 	strd	r3, r3, [sp]
uint16_t Adafruit_MCP9808::read16(uint8_t reg) {
 23f1cbc:	460a      	mov	r2, r1
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
 23f1cbe:	2302      	movs	r3, #2
 23f1cc0:	6881      	ldr	r1, [r0, #8]
 23f1cc2:	a802      	add	r0, sp, #8
 23f1cc4:	f7fe fe28 	bl	23f0918 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return reg16.read();
 23f1cc8:	a802      	add	r0, sp, #8
 23f1cca:	f7fe fef3 	bl	23f0ab4 <_ZN23Adafruit_BusIO_Register4readEv>
}
 23f1cce:	b280      	uxth	r0, r0
 23f1cd0:	b009      	add	sp, #36	; 0x24
 23f1cd2:	f85d fb04 	ldr.w	pc, [sp], #4

023f1cd6 <_ZN16Adafruit_MCP98084initEv>:
bool Adafruit_MCP9808::init() {
 23f1cd6:	b538      	push	{r3, r4, r5, lr}
  if (!i2c_dev->begin()) {
 23f1cd8:	2101      	movs	r1, #1
bool Adafruit_MCP9808::init() {
 23f1cda:	4604      	mov	r4, r0
  if (!i2c_dev->begin()) {
 23f1cdc:	6880      	ldr	r0, [r0, #8]
 23f1cde:	f7fe ff4c 	bl	23f0b7a <_ZN18Adafruit_I2CDevice5beginEb>
 23f1ce2:	4605      	mov	r5, r0
 23f1ce4:	b910      	cbnz	r0, 23f1cec <_ZN16Adafruit_MCP98084initEv+0x16>
    return false;
 23f1ce6:	2500      	movs	r5, #0
}
 23f1ce8:	4628      	mov	r0, r5
 23f1cea:	bd38      	pop	{r3, r4, r5, pc}
  if (read16(MCP9808_REG_MANUF_ID) != 0x0054)
 23f1cec:	2106      	movs	r1, #6
 23f1cee:	4620      	mov	r0, r4
 23f1cf0:	f7ff ffdf 	bl	23f1cb2 <_ZN16Adafruit_MCP98086read16Eh>
 23f1cf4:	2854      	cmp	r0, #84	; 0x54
 23f1cf6:	d1f6      	bne.n	23f1ce6 <_ZN16Adafruit_MCP98084initEv+0x10>
  if (read16(MCP9808_REG_DEVICE_ID) != 0x0400)
 23f1cf8:	2107      	movs	r1, #7
 23f1cfa:	4620      	mov	r0, r4
 23f1cfc:	f7ff ffd9 	bl	23f1cb2 <_ZN16Adafruit_MCP98086read16Eh>
 23f1d00:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 23f1d04:	d1ef      	bne.n	23f1ce6 <_ZN16Adafruit_MCP98084initEv+0x10>
  write16(MCP9808_REG_CONFIG, 0x0);
 23f1d06:	2200      	movs	r2, #0
 23f1d08:	2101      	movs	r1, #1
 23f1d0a:	4620      	mov	r0, r4
 23f1d0c:	f7ff ffbe 	bl	23f1c8c <_ZN16Adafruit_MCP98087write16Eht>
  return true;
 23f1d10:	e7ea      	b.n	23f1ce8 <_ZN16Adafruit_MCP98084initEv+0x12>

023f1d12 <_ZN16Adafruit_MCP98085beginEhP7TwoWire>:
bool Adafruit_MCP9808::begin(uint8_t addr, TwoWire *theWire) {
 23f1d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f1d14:	4604      	mov	r4, r0
  if (i2c_dev) {
 23f1d16:	6880      	ldr	r0, [r0, #8]
bool Adafruit_MCP9808::begin(uint8_t addr, TwoWire *theWire) {
 23f1d18:	460e      	mov	r6, r1
 23f1d1a:	4617      	mov	r7, r2
  if (i2c_dev) {
 23f1d1c:	b110      	cbz	r0, 23f1d24 <_ZN16Adafruit_MCP98085beginEhP7TwoWire+0x12>
    delete i2c_dev;
 23f1d1e:	2110      	movs	r1, #16
 23f1d20:	f7f4 f993 	bl	23e604a <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
 23f1d24:	2010      	movs	r0, #16
 23f1d26:	f7f4 f98c 	bl	23e6042 <_Znwj>
 23f1d2a:	4605      	mov	r5, r0
 23f1d2c:	b118      	cbz	r0, 23f1d36 <_ZN16Adafruit_MCP98085beginEhP7TwoWire+0x24>
 23f1d2e:	463a      	mov	r2, r7
 23f1d30:	4631      	mov	r1, r6
 23f1d32:	f7fe ff06 	bl	23f0b42 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  return init();
 23f1d36:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
 23f1d38:	60a5      	str	r5, [r4, #8]
}
 23f1d3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return init();
 23f1d3e:	f7ff bfca 	b.w	23f1cd6 <_ZN16Adafruit_MCP98084initEv>

023f1d42 <_ZN16Adafruit_MCP98085beginEh>:
bool Adafruit_MCP9808::begin(uint8_t addr) { return begin(addr, &Wire); }
 23f1d42:	b513      	push	{r0, r1, r4, lr}
 23f1d44:	4604      	mov	r4, r0
 23f1d46:	9101      	str	r1, [sp, #4]
 23f1d48:	f008 fac6 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23f1d4c:	4602      	mov	r2, r0
 23f1d4e:	4620      	mov	r0, r4
 23f1d50:	9901      	ldr	r1, [sp, #4]
 23f1d52:	b002      	add	sp, #8
 23f1d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f1d58:	f7ff bfdb 	b.w	23f1d12 <_ZN16Adafruit_MCP98085beginEhP7TwoWire>

023f1d5c <_ZN16Adafruit_MCP98089readTempCEv>:
float Adafruit_MCP9808::readTempC() {
 23f1d5c:	b508      	push	{r3, lr}
  uint16_t t = read16(MCP9808_REG_AMBIENT_TEMP);
 23f1d5e:	2105      	movs	r1, #5
 23f1d60:	f7ff ffa7 	bl	23f1cb2 <_ZN16Adafruit_MCP98086read16Eh>
  if (t != 0xFFFF) {
 23f1d64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23f1d68:	4298      	cmp	r0, r3
 23f1d6a:	d00c      	beq.n	23f1d86 <_ZN16Adafruit_MCP98089readTempCEv+0x2a>
    temp = t & 0x0FFF;
 23f1d6c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 23f1d70:	ee00 3a10 	vmov	s0, r3
    if (t & 0x1000)
 23f1d74:	04c3      	lsls	r3, r0, #19
    temp /= 16.0;
 23f1d76:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
    if (t & 0x1000)
 23f1d7a:	d503      	bpl.n	23f1d84 <_ZN16Adafruit_MCP98089readTempCEv+0x28>
      temp -= 256;
 23f1d7c:	eddf 7a03 	vldr	s15, [pc, #12]	; 23f1d8c <_ZN16Adafruit_MCP98089readTempCEv+0x30>
 23f1d80:	ee30 0a67 	vsub.f32	s0, s0, s15
}
 23f1d84:	bd08      	pop	{r3, pc}
  float temp = NAN;
 23f1d86:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23f1d90 <_ZN16Adafruit_MCP98089readTempCEv+0x34>
  return temp;
 23f1d8a:	e7fb      	b.n	23f1d84 <_ZN16Adafruit_MCP98089readTempCEv+0x28>
 23f1d8c:	43800000 	.word	0x43800000
 23f1d90:	7fc00000 	.word	0x7fc00000

023f1d94 <_ZN16Adafruit_MCP98088getEventEP15sensors_event_t>:
bool Adafruit_MCP9808::getEvent(sensors_event_t *temp) {
 23f1d94:	b570      	push	{r4, r5, r6, lr}
 23f1d96:	460c      	mov	r4, r1
 23f1d98:	4605      	mov	r5, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23f1d9a:	f005 fc11 	bl	23f75c0 <HAL_Timer_Get_Milli_Seconds>
  memset(temp, 0, sizeof(sensors_event_t));
 23f1d9e:	2220      	movs	r2, #32
 23f1da0:	4606      	mov	r6, r0
 23f1da2:	2100      	movs	r1, #0
 23f1da4:	1d20      	adds	r0, r4, #4
 23f1da6:	f00b f832 	bl	23fce0e <memset>
  temp->version = sizeof(sensors_event_t);
 23f1daa:	2324      	movs	r3, #36	; 0x24
 23f1dac:	6023      	str	r3, [r4, #0]
  temp->sensor_id = _sensorID;
 23f1dae:	88eb      	ldrh	r3, [r5, #6]
  temp->temperature = readTempC();
 23f1db0:	4628      	mov	r0, r5
  temp->sensor_id = _sensorID;
 23f1db2:	6063      	str	r3, [r4, #4]
  temp->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 23f1db4:	230d      	movs	r3, #13
  temp->timestamp = t;
 23f1db6:	6126      	str	r6, [r4, #16]
  temp->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 23f1db8:	60a3      	str	r3, [r4, #8]
  temp->temperature = readTempC();
 23f1dba:	f7ff ffcf 	bl	23f1d5c <_ZN16Adafruit_MCP98089readTempCEv>
}
 23f1dbe:	2001      	movs	r0, #1
  temp->temperature = readTempC();
 23f1dc0:	ed84 0a05 	vstr	s0, [r4, #20]
}
 23f1dc4:	bd70      	pop	{r4, r5, r6, pc}

023f1dc6 <_ZN16Adafruit_PM25AQIC1Ev>:
#include "Adafruit_PM25AQI.h"

/*!
 *  @brief  Instantiates a new PM25AQI class
 */
Adafruit_PM25AQI::Adafruit_PM25AQI() {}
 23f1dc6:	2200      	movs	r2, #0
 23f1dc8:	e9c0 2200 	strd	r2, r2, [r0]
 23f1dcc:	4770      	bx	lr

023f1dce <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>:
 *  @brief  Setups the hardware and detects a valid PMSA003I. Initializes I2C.
 *  @param  theWire
 *          Optional pointer to I2C interface, otherwise use Wire
 *  @return True if PMSA003I found on I2C, False if something went wrong!
 */
bool Adafruit_PM25AQI::begin_I2C(TwoWire *theWire) {
 23f1dce:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
 23f1dd0:	6803      	ldr	r3, [r0, #0]
bool Adafruit_PM25AQI::begin_I2C(TwoWire *theWire) {
 23f1dd2:	4604      	mov	r4, r0
  if (!i2c_dev) {
 23f1dd4:	b953      	cbnz	r3, 23f1dec <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire+0x1e>
    i2c_dev = new Adafruit_I2CDevice(PMSA003I_I2CADDR_DEFAULT, theWire);
 23f1dd6:	2010      	movs	r0, #16
 23f1dd8:	9101      	str	r1, [sp, #4]
 23f1dda:	f7f4 f932 	bl	23e6042 <_Znwj>
 23f1dde:	4605      	mov	r5, r0
 23f1de0:	b118      	cbz	r0, 23f1dea <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire+0x1c>
 23f1de2:	2112      	movs	r1, #18
 23f1de4:	9a01      	ldr	r2, [sp, #4]
 23f1de6:	f7fe feac 	bl	23f0b42 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
 23f1dea:	6025      	str	r5, [r4, #0]
  }

  if (!i2c_dev->begin()) {
 23f1dec:	2101      	movs	r1, #1
 23f1dee:	6820      	ldr	r0, [r4, #0]
    return false;
  }

  return true;
}
 23f1df0:	b003      	add	sp, #12
 23f1df2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  if (!i2c_dev->begin()) {
 23f1df6:	f7fe bec0 	b.w	23f0b7a <_ZN18Adafruit_I2CDevice5beginEb>

023f1dfa <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata>:
 *  @brief  Setups the hardware and detects a valid UART PM2.5
 *  @param  data
 *          Pointer to PM25_AQI_Data that will be filled by read()ing
 *  @return True on successful read, false if timed out or bad data
 */
bool Adafruit_PM25AQI::read(PM25_AQI_Data *data) {
 23f1dfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f1dfc:	4604      	mov	r4, r0
  uint8_t buffer[32];
  uint16_t sum = 0;

  if (!data) {
 23f1dfe:	460d      	mov	r5, r1
bool Adafruit_PM25AQI::read(PM25_AQI_Data *data) {
 23f1e00:	b091      	sub	sp, #68	; 0x44
  if (!data) {
 23f1e02:	b911      	cbnz	r1, 23f1e0a <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x10>
        return false;
      }
    }
    if (serial_dev->peek() != 0x42) {
      serial_dev->read();
      return false;
 23f1e04:	2000      	movs	r0, #0
    return false;
  }

  // success!
  return true;
}
 23f1e06:	b011      	add	sp, #68	; 0x44
 23f1e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (i2c_dev) { // ok using i2c?
 23f1e0a:	6800      	ldr	r0, [r0, #0]
 23f1e0c:	2800      	cmp	r0, #0
 23f1e0e:	d039      	beq.n	23f1e84 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x8a>
    if (!i2c_dev->read(buffer, 32)) {
 23f1e10:	2220      	movs	r2, #32
 23f1e12:	2301      	movs	r3, #1
 23f1e14:	eb0d 0102 	add.w	r1, sp, r2
 23f1e18:	f7fe feee 	bl	23f0bf8 <_ZN18Adafruit_I2CDevice4readEPhjb>
 23f1e1c:	2800      	cmp	r0, #0
 23f1e1e:	d0f1      	beq.n	23f1e04 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
  if (buffer[0] != 0x42) {
 23f1e20:	f89d 3020 	ldrb.w	r3, [sp, #32]
 23f1e24:	2b42      	cmp	r3, #66	; 0x42
 23f1e26:	d1ed      	bne.n	23f1e04 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
 23f1e28:	aa08      	add	r2, sp, #32
 23f1e2a:	4611      	mov	r1, r2
 23f1e2c:	231e      	movs	r3, #30
  uint16_t sum = 0;
 23f1e2e:	2600      	movs	r6, #0
    sum += buffer[i];
 23f1e30:	f811 0b01 	ldrb.w	r0, [r1], #1
  for (uint8_t i = 0; i < 30; i++) {
 23f1e34:	3b01      	subs	r3, #1
    sum += buffer[i];
 23f1e36:	4430      	add	r0, r6
  for (uint8_t i = 0; i < 30; i++) {
 23f1e38:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    sum += buffer[i];
 23f1e3c:	b286      	uxth	r6, r0
  for (uint8_t i = 0; i < 30; i++) {
 23f1e3e:	d1f7      	bne.n	23f1e30 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x36>
 23f1e40:	4668      	mov	r0, sp
 23f1e42:	2101      	movs	r1, #1
 23f1e44:	4603      	mov	r3, r0
    buffer_u16[i] += (buffer[2 + i * 2] << 8);
 23f1e46:	7897      	ldrb	r7, [r2, #2]
    buffer_u16[i] = buffer[2 + i * 2 + 1];
 23f1e48:	78d4      	ldrb	r4, [r2, #3]
  for (uint8_t i = 0; i < 15; i++) {
 23f1e4a:	3101      	adds	r1, #1
    buffer_u16[i] += (buffer[2 + i * 2] << 8);
 23f1e4c:	eb04 2407 	add.w	r4, r4, r7, lsl #8
  for (uint8_t i = 0; i < 15; i++) {
 23f1e50:	2910      	cmp	r1, #16
    buffer_u16[i] += (buffer[2 + i * 2] << 8);
 23f1e52:	f820 4b02 	strh.w	r4, [r0], #2
  for (uint8_t i = 0; i < 15; i++) {
 23f1e56:	f102 0202 	add.w	r2, r2, #2
 23f1e5a:	d1f4      	bne.n	23f1e46 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x4c>
  memcpy((void *)data, (void *)buffer_u16, 30);
 23f1e5c:	462a      	mov	r2, r5
 23f1e5e:	af06      	add	r7, sp, #24
 23f1e60:	461c      	mov	r4, r3
 23f1e62:	cc03      	ldmia	r4!, {r0, r1}
 23f1e64:	42bc      	cmp	r4, r7
 23f1e66:	6010      	str	r0, [r2, #0]
 23f1e68:	6051      	str	r1, [r2, #4]
 23f1e6a:	4623      	mov	r3, r4
 23f1e6c:	f102 0208 	add.w	r2, r2, #8
 23f1e70:	d1f6      	bne.n	23f1e60 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x66>
 23f1e72:	6820      	ldr	r0, [r4, #0]
 23f1e74:	6010      	str	r0, [r2, #0]
 23f1e76:	88a3      	ldrh	r3, [r4, #4]
 23f1e78:	8093      	strh	r3, [r2, #4]
  if (sum != data->checksum) {
 23f1e7a:	8ba8      	ldrh	r0, [r5, #28]
 23f1e7c:	1b83      	subs	r3, r0, r6
 23f1e7e:	4258      	negs	r0, r3
 23f1e80:	4158      	adcs	r0, r3
 23f1e82:	e7c0      	b.n	23f1e06 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xc>
  } else if (serial_dev) { // ok using uart
 23f1e84:	6860      	ldr	r0, [r4, #4]
 23f1e86:	2800      	cmp	r0, #0
 23f1e88:	d0bc      	beq.n	23f1e04 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
    if (!serial_dev->available()) {
 23f1e8a:	6803      	ldr	r3, [r0, #0]
 23f1e8c:	691b      	ldr	r3, [r3, #16]
 23f1e8e:	4798      	blx	r3
 23f1e90:	2800      	cmp	r0, #0
 23f1e92:	d0b7      	beq.n	23f1e04 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
 23f1e94:	2620      	movs	r6, #32
    while ((skipped < 32) && (serial_dev->peek() != 0x42)) {
 23f1e96:	6860      	ldr	r0, [r4, #4]
 23f1e98:	6803      	ldr	r3, [r0, #0]
 23f1e9a:	699b      	ldr	r3, [r3, #24]
 23f1e9c:	4798      	blx	r3
 23f1e9e:	2842      	cmp	r0, #66	; 0x42
 23f1ea0:	d00b      	beq.n	23f1eba <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xc0>
      serial_dev->read();
 23f1ea2:	6860      	ldr	r0, [r4, #4]
 23f1ea4:	6803      	ldr	r3, [r0, #0]
 23f1ea6:	695b      	ldr	r3, [r3, #20]
 23f1ea8:	4798      	blx	r3
      if (!serial_dev->available()) {
 23f1eaa:	6860      	ldr	r0, [r4, #4]
 23f1eac:	6803      	ldr	r3, [r0, #0]
 23f1eae:	691b      	ldr	r3, [r3, #16]
 23f1eb0:	4798      	blx	r3
 23f1eb2:	2800      	cmp	r0, #0
 23f1eb4:	d0a6      	beq.n	23f1e04 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
    while ((skipped < 32) && (serial_dev->peek() != 0x42)) {
 23f1eb6:	3e01      	subs	r6, #1
 23f1eb8:	d1ed      	bne.n	23f1e96 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x9c>
    if (serial_dev->peek() != 0x42) {
 23f1eba:	6860      	ldr	r0, [r4, #4]
 23f1ebc:	6803      	ldr	r3, [r0, #0]
 23f1ebe:	699b      	ldr	r3, [r3, #24]
 23f1ec0:	4798      	blx	r3
 23f1ec2:	2842      	cmp	r0, #66	; 0x42
 23f1ec4:	6860      	ldr	r0, [r4, #4]
      serial_dev->read();
 23f1ec6:	6803      	ldr	r3, [r0, #0]
    if (serial_dev->peek() != 0x42) {
 23f1ec8:	d002      	beq.n	23f1ed0 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xd6>
      serial_dev->read();
 23f1eca:	695b      	ldr	r3, [r3, #20]
 23f1ecc:	4798      	blx	r3
 23f1ece:	e799      	b.n	23f1e04 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
    if (serial_dev->available() < 32) {
 23f1ed0:	691b      	ldr	r3, [r3, #16]
 23f1ed2:	4798      	blx	r3
 23f1ed4:	281f      	cmp	r0, #31
 23f1ed6:	dd95      	ble.n	23f1e04 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
    serial_dev->readBytes((char *)buffer, 32);
 23f1ed8:	2220      	movs	r2, #32
 23f1eda:	6860      	ldr	r0, [r4, #4]
 23f1edc:	eb0d 0102 	add.w	r1, sp, r2
 23f1ee0:	6803      	ldr	r3, [r0, #0]
 23f1ee2:	6a1b      	ldr	r3, [r3, #32]
 23f1ee4:	4798      	blx	r3
 23f1ee6:	e79b      	b.n	23f1e20 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x26>

023f1ee8 <_ZL4crc8PKhi.constprop.0>:

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);

  for (int j = len; j; --j) {
    crc ^= *data++;
 23f1ee8:	7803      	ldrb	r3, [r0, #0]
 23f1eea:	2208      	movs	r2, #8
 23f1eec:	43db      	mvns	r3, r3
 23f1eee:	b2db      	uxtb	r3, r3

    for (int i = 8; i; --i) {
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
 23f1ef0:	f013 0f80 	tst.w	r3, #128	; 0x80
 23f1ef4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23f1ef8:	d001      	beq.n	23f1efe <_ZL4crc8PKhi.constprop.0+0x16>
 23f1efa:	f083 0331 	eor.w	r3, r3, #49	; 0x31
    for (int i = 8; i; --i) {
 23f1efe:	3a01      	subs	r2, #1
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
 23f1f00:	b2db      	uxtb	r3, r3
    for (int i = 8; i; --i) {
 23f1f02:	d1f5      	bne.n	23f1ef0 <_ZL4crc8PKhi.constprop.0+0x8>
    crc ^= *data++;
 23f1f04:	7840      	ldrb	r0, [r0, #1]
 23f1f06:	4058      	eors	r0, r3
 23f1f08:	2308      	movs	r3, #8
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
 23f1f0a:	f010 0f80 	tst.w	r0, #128	; 0x80
 23f1f0e:	ea4f 0040 	mov.w	r0, r0, lsl #1
 23f1f12:	d001      	beq.n	23f1f18 <_ZL4crc8PKhi.constprop.0+0x30>
 23f1f14:	f080 0031 	eor.w	r0, r0, #49	; 0x31
    for (int i = 8; i; --i) {
 23f1f18:	3b01      	subs	r3, #1
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
 23f1f1a:	b2c0      	uxtb	r0, r0
    for (int i = 8; i; --i) {
 23f1f1c:	d1f5      	bne.n	23f1f0a <_ZL4crc8PKhi.constprop.0+0x22>
 23f1f1e:	4770      	bx	lr

023f1f20 <_ZN14Adafruit_SHT31C1EP7TwoWire>:
Adafruit_SHT31::Adafruit_SHT31(TwoWire *theWire) {
 23f1f20:	2200      	movs	r2, #0
  _wire = theWire;
 23f1f22:	e9c0 1202 	strd	r1, r2, [r0, #8]
  humidity = NAN;
 23f1f26:	4a02      	ldr	r2, [pc, #8]	; (23f1f30 <_ZN14Adafruit_SHT31C1EP7TwoWire+0x10>)
 23f1f28:	6002      	str	r2, [r0, #0]
  temp = NAN;
 23f1f2a:	6042      	str	r2, [r0, #4]
}
 23f1f2c:	4770      	bx	lr
 23f1f2e:	bf00      	nop
 23f1f30:	7fc00000 	.word	0x7fc00000

023f1f34 <_ZN14Adafruit_SHT31D1Ev>:
Adafruit_SHT31::~Adafruit_SHT31() {
 23f1f34:	b510      	push	{r4, lr}
 23f1f36:	4604      	mov	r4, r0
  if (i2c_dev) {
 23f1f38:	68c0      	ldr	r0, [r0, #12]
 23f1f3a:	b110      	cbz	r0, 23f1f42 <_ZN14Adafruit_SHT31D1Ev+0xe>
    delete i2c_dev; // remove old interface
 23f1f3c:	2110      	movs	r1, #16
 23f1f3e:	f7f4 f884 	bl	23e604a <_ZdlPvj>
}
 23f1f42:	4620      	mov	r0, r4
 23f1f44:	bd10      	pop	{r4, pc}

023f1f46 <_ZN14Adafruit_SHT3112writeCommandEt>:
/**
 * Internal function to perform and I2C write.
 *
 * @param cmd   The 16-bit command ID to send.
 */
bool Adafruit_SHT31::writeCommand(uint16_t command) {
 23f1f46:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t cmd[2];

  cmd[0] = command >> 8;
 23f1f48:	0a0b      	lsrs	r3, r1, #8
 23f1f4a:	f88d 300c 	strb.w	r3, [sp, #12]
  cmd[1] = command & 0xFF;

  return i2c_dev->write(cmd, 2);
 23f1f4e:	2300      	movs	r3, #0
 23f1f50:	e9cd 3300 	strd	r3, r3, [sp]
  cmd[1] = command & 0xFF;
 23f1f54:	f88d 100d 	strb.w	r1, [sp, #13]
  return i2c_dev->write(cmd, 2);
 23f1f58:	2301      	movs	r3, #1
 23f1f5a:	2202      	movs	r2, #2
 23f1f5c:	a903      	add	r1, sp, #12
 23f1f5e:	68c0      	ldr	r0, [r0, #12]
 23f1f60:	f7fe fe1a 	bl	23f0b98 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
 23f1f64:	b005      	add	sp, #20
 23f1f66:	f85d fb04 	ldr.w	pc, [sp], #4

023f1f6a <_ZN14Adafruit_SHT3110readStatusEv>:
uint16_t Adafruit_SHT31::readStatus(void) {
 23f1f6a:	b513      	push	{r0, r1, r4, lr}
 23f1f6c:	4604      	mov	r4, r0
  writeCommand(SHT31_READSTATUS);
 23f1f6e:	f24f 312d 	movw	r1, #62253	; 0xf32d
 23f1f72:	f7ff ffe8 	bl	23f1f46 <_ZN14Adafruit_SHT3112writeCommandEt>
  i2c_dev->read(data, 3);
 23f1f76:	2301      	movs	r3, #1
 23f1f78:	2203      	movs	r2, #3
 23f1f7a:	68e0      	ldr	r0, [r4, #12]
 23f1f7c:	a901      	add	r1, sp, #4
 23f1f7e:	f7fe fe3b 	bl	23f0bf8 <_ZN18Adafruit_I2CDevice4readEPhjb>
  return stat;
 23f1f82:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 23f1f86:	ba40      	rev16	r0, r0
}
 23f1f88:	b280      	uxth	r0, r0
 23f1f8a:	b002      	add	sp, #8
 23f1f8c:	bd10      	pop	{r4, pc}

023f1f8e <_ZN14Adafruit_SHT315resetEv>:
void Adafruit_SHT31::reset(void) {
 23f1f8e:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
 23f1f90:	f243 01a2 	movw	r1, #12450	; 0x30a2
 23f1f94:	f7ff ffd7 	bl	23f1f46 <_ZN14Adafruit_SHT3112writeCommandEt>
}
 23f1f98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(10);
 23f1f9c:	200a      	movs	r0, #10
 23f1f9e:	f006 b991 	b.w	23f82c4 <delay>

023f1fa2 <_ZN14Adafruit_SHT315beginEh>:
bool Adafruit_SHT31::begin(uint8_t i2caddr) {
 23f1fa2:	b570      	push	{r4, r5, r6, lr}
 23f1fa4:	4604      	mov	r4, r0
  if (i2c_dev) {
 23f1fa6:	68c0      	ldr	r0, [r0, #12]
bool Adafruit_SHT31::begin(uint8_t i2caddr) {
 23f1fa8:	460e      	mov	r6, r1
  if (i2c_dev) {
 23f1faa:	b110      	cbz	r0, 23f1fb2 <_ZN14Adafruit_SHT315beginEh+0x10>
    delete i2c_dev; // remove old interface
 23f1fac:	2110      	movs	r1, #16
 23f1fae:	f7f4 f84c 	bl	23e604a <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(i2caddr, _wire);
 23f1fb2:	2010      	movs	r0, #16
 23f1fb4:	f7f4 f845 	bl	23e6042 <_Znwj>
 23f1fb8:	4605      	mov	r5, r0
 23f1fba:	b118      	cbz	r0, 23f1fc4 <_ZN14Adafruit_SHT315beginEh+0x22>
 23f1fbc:	4631      	mov	r1, r6
 23f1fbe:	68a2      	ldr	r2, [r4, #8]
 23f1fc0:	f7fe fdbf 	bl	23f0b42 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin()) {
 23f1fc4:	2101      	movs	r1, #1
 23f1fc6:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(i2caddr, _wire);
 23f1fc8:	60e5      	str	r5, [r4, #12]
  if (!i2c_dev->begin()) {
 23f1fca:	f7fe fdd6 	bl	23f0b7a <_ZN18Adafruit_I2CDevice5beginEb>
 23f1fce:	b150      	cbz	r0, 23f1fe6 <_ZN14Adafruit_SHT315beginEh+0x44>
  reset();
 23f1fd0:	4620      	mov	r0, r4
 23f1fd2:	f7ff ffdc 	bl	23f1f8e <_ZN14Adafruit_SHT315resetEv>
  return readStatus() != 0xFFFF;
 23f1fd6:	4620      	mov	r0, r4
 23f1fd8:	f7ff ffc7 	bl	23f1f6a <_ZN14Adafruit_SHT3110readStatusEv>
 23f1fdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23f1fe0:	1ac0      	subs	r0, r0, r3
 23f1fe2:	bf18      	it	ne
 23f1fe4:	2001      	movne	r0, #1
}
 23f1fe6:	bd70      	pop	{r4, r5, r6, pc}

023f1fe8 <_ZN14Adafruit_SHT3111readTempHumEv>:
bool Adafruit_SHT31::readTempHum(void) {
 23f1fe8:	b513      	push	{r0, r1, r4, lr}
 23f1fea:	4604      	mov	r4, r0
  writeCommand(SHT31_MEAS_HIGHREP);
 23f1fec:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 23f1ff0:	f7ff ffa9 	bl	23f1f46 <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(20);
 23f1ff4:	2014      	movs	r0, #20
 23f1ff6:	f006 f965 	bl	23f82c4 <delay>
  i2c_dev->read(readbuffer, sizeof(readbuffer));
 23f1ffa:	2301      	movs	r3, #1
 23f1ffc:	2206      	movs	r2, #6
 23f1ffe:	4669      	mov	r1, sp
 23f2000:	68e0      	ldr	r0, [r4, #12]
 23f2002:	f7fe fdf9 	bl	23f0bf8 <_ZN18Adafruit_I2CDevice4readEPhjb>
  if (readbuffer[2] != crc8(readbuffer, 2) ||
 23f2006:	4668      	mov	r0, sp
 23f2008:	f7ff ff6e 	bl	23f1ee8 <_ZL4crc8PKhi.constprop.0>
 23f200c:	f89d 1002 	ldrb.w	r1, [sp, #2]
 23f2010:	4281      	cmp	r1, r0
 23f2012:	d12f      	bne.n	23f2074 <_ZN14Adafruit_SHT3111readTempHumEv+0x8c>
      readbuffer[5] != crc8(readbuffer + 3, 2))
 23f2014:	f10d 0003 	add.w	r0, sp, #3
 23f2018:	f7ff ff66 	bl	23f1ee8 <_ZL4crc8PKhi.constprop.0>
 23f201c:	f89d 1005 	ldrb.w	r1, [sp, #5]
  if (readbuffer[2] != crc8(readbuffer, 2) ||
 23f2020:	4281      	cmp	r1, r0
 23f2022:	d127      	bne.n	23f2074 <_ZN14Adafruit_SHT3111readTempHumEv+0x8c>
  stemp = ((4375 * stemp) >> 14) - 4500;
 23f2024:	f241 1217 	movw	r2, #4375	; 0x1117
  int32_t stemp = (int32_t)(((uint32_t)readbuffer[0] << 8) | readbuffer[1]);
 23f2028:	f8bd 3000 	ldrh.w	r3, [sp]
  temp = (float)stemp / 100.0f;
 23f202c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 23f2078 <_ZN14Adafruit_SHT3111readTempHumEv+0x90>
  int32_t stemp = (int32_t)(((uint32_t)readbuffer[0] << 8) | readbuffer[1]);
 23f2030:	ba5b      	rev16	r3, r3
 23f2032:	b29b      	uxth	r3, r3
  stemp = ((4375 * stemp) >> 14) - 4500;
 23f2034:	4353      	muls	r3, r2
 23f2036:	139b      	asrs	r3, r3, #14
 23f2038:	f5a3 538c 	sub.w	r3, r3, #4480	; 0x1180
 23f203c:	3b14      	subs	r3, #20
  temp = (float)stemp / 100.0f;
 23f203e:	ee07 3a90 	vmov	s15, r3
  shum = (625 * shum) >> 12;
 23f2042:	f240 2271 	movw	r2, #625	; 0x271
  temp = (float)stemp / 100.0f;
 23f2046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  shum = (625 * shum) >> 12;
 23f204a:	f8bd 3003 	ldrh.w	r3, [sp, #3]
  temp = (float)stemp / 100.0f;
 23f204e:	eec7 6a87 	vdiv.f32	s13, s15, s14
  shum = (625 * shum) >> 12;
 23f2052:	ba5b      	rev16	r3, r3
 23f2054:	b29b      	uxth	r3, r3
 23f2056:	4353      	muls	r3, r2
 23f2058:	0b1b      	lsrs	r3, r3, #12
  humidity = (float)shum / 100.0f;
 23f205a:	ee07 3a90 	vmov	s15, r3
 23f205e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  temp = (float)stemp / 100.0f;
 23f2062:	edc4 6a01 	vstr	s13, [r4, #4]
  humidity = (float)shum / 100.0f;
 23f2066:	eec7 6a87 	vdiv.f32	s13, s15, s14
  return true;
 23f206a:	2001      	movs	r0, #1
  humidity = (float)shum / 100.0f;
 23f206c:	edc4 6a00 	vstr	s13, [r4]
}
 23f2070:	b002      	add	sp, #8
 23f2072:	bd10      	pop	{r4, pc}
    return false;
 23f2074:	2000      	movs	r0, #0
 23f2076:	e7fb      	b.n	23f2070 <_ZN14Adafruit_SHT3111readTempHumEv+0x88>
 23f2078:	42c80000 	.word	0x42c80000

023f207c <_ZN14Adafruit_SHT3115readTemperatureEv>:
float Adafruit_SHT31::readTemperature(void) {
 23f207c:	b510      	push	{r4, lr}
 23f207e:	4604      	mov	r4, r0
  if (!readTempHum())
 23f2080:	f7ff ffb2 	bl	23f1fe8 <_ZN14Adafruit_SHT3111readTempHumEv>
 23f2084:	b110      	cbz	r0, 23f208c <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>
  return temp;
 23f2086:	ed94 0a01 	vldr	s0, [r4, #4]
}
 23f208a:	bd10      	pop	{r4, pc}
    return NAN;
 23f208c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 23f2094 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>
 23f2090:	e7fb      	b.n	23f208a <_ZN14Adafruit_SHT3115readTemperatureEv+0xe>
 23f2092:	bf00      	nop
 23f2094:	7fc00000 	.word	0x7fc00000

023f2098 <_ZN14Adafruit_SHT3112readHumidityEv>:
float Adafruit_SHT31::readHumidity(void) {
 23f2098:	b510      	push	{r4, lr}
 23f209a:	4604      	mov	r4, r0
  if (!readTempHum())
 23f209c:	f7ff ffa4 	bl	23f1fe8 <_ZN14Adafruit_SHT3111readTempHumEv>
 23f20a0:	b110      	cbz	r0, 23f20a8 <_ZN14Adafruit_SHT3112readHumidityEv+0x10>
  return humidity;
 23f20a2:	ed94 0a00 	vldr	s0, [r4]
}
 23f20a6:	bd10      	pop	{r4, pc}
    return NAN;
 23f20a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 23f20b0 <_ZN14Adafruit_SHT3112readHumidityEv+0x18>
 23f20ac:	e7fb      	b.n	23f20a6 <_ZN14Adafruit_SHT3112readHumidityEv+0xe>
 23f20ae:	bf00      	nop
 23f20b0:	7fc00000 	.word	0x7fc00000

023f20b4 <_ZN15Adafruit_SI1145C1Ev>:
#include "Adafruit_SI1145.h"
/**
 * @brief Construct a new Adafruit_SI1145::Adafruit_SI1145 object
 *
 */
Adafruit_SI1145::Adafruit_SI1145() : m_pBus(&Wire), _addr(SI1145_ADDR) {}
 23f20b4:	b510      	push	{r4, lr}
 23f20b6:	4604      	mov	r4, r0
 23f20b8:	f008 f90e 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23f20bc:	2360      	movs	r3, #96	; 0x60
 23f20be:	6020      	str	r0, [r4, #0]
 23f20c0:	7123      	strb	r3, [r4, #4]
 23f20c2:	4620      	mov	r0, r4
 23f20c4:	bd10      	pop	{r4, pc}

023f20c6 <_ZN15Adafruit_SI11455read8Eh>:
  return read8(SI1145_REG_PARAMRD);
}

/*********************************************************************/

uint8_t Adafruit_SI1145::read8(uint8_t reg) {
 23f20c6:	b538      	push	{r3, r4, r5, lr}
 23f20c8:	4604      	mov	r4, r0
 23f20ca:	460d      	mov	r5, r1
  m_pBus->beginTransmission(_addr);
 23f20cc:	7901      	ldrb	r1, [r0, #4]
 23f20ce:	6800      	ldr	r0, [r0, #0]
 23f20d0:	f006 fef2 	bl	23f8eb8 <_ZN7TwoWire17beginTransmissionEh>
  m_pBus->write((uint8_t)reg);
 23f20d4:	6820      	ldr	r0, [r4, #0]
 23f20d6:	4629      	mov	r1, r5
 23f20d8:	6803      	ldr	r3, [r0, #0]
 23f20da:	689b      	ldr	r3, [r3, #8]
 23f20dc:	4798      	blx	r3
  m_pBus->endTransmission();
 23f20de:	6820      	ldr	r0, [r4, #0]
 23f20e0:	f006 fef5 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>

  m_pBus->requestFrom((uint8_t)_addr, (uint8_t)1);
 23f20e4:	2201      	movs	r2, #1
 23f20e6:	7921      	ldrb	r1, [r4, #4]
 23f20e8:	6820      	ldr	r0, [r4, #0]
 23f20ea:	f006 fee2 	bl	23f8eb2 <_ZN7TwoWire11requestFromEhj>
  return m_pBus->read();
 23f20ee:	6820      	ldr	r0, [r4, #0]
 23f20f0:	6803      	ldr	r3, [r0, #0]
 23f20f2:	695b      	ldr	r3, [r3, #20]
 23f20f4:	4798      	blx	r3
}
 23f20f6:	b2c0      	uxtb	r0, r0
 23f20f8:	bd38      	pop	{r3, r4, r5, pc}

023f20fa <_ZN15Adafruit_SI11456read16Eh>:

uint16_t Adafruit_SI1145::read16(uint8_t a) {
 23f20fa:	b538      	push	{r3, r4, r5, lr}
 23f20fc:	4604      	mov	r4, r0
 23f20fe:	460d      	mov	r5, r1
  uint16_t ret;

  m_pBus->beginTransmission(_addr); // start transmission to device
 23f2100:	7901      	ldrb	r1, [r0, #4]
 23f2102:	6800      	ldr	r0, [r0, #0]
 23f2104:	f006 fed8 	bl	23f8eb8 <_ZN7TwoWire17beginTransmissionEh>
  m_pBus->write(a);                 // sends register address to read from
 23f2108:	6820      	ldr	r0, [r4, #0]
 23f210a:	4629      	mov	r1, r5
 23f210c:	6803      	ldr	r3, [r0, #0]
 23f210e:	689b      	ldr	r3, [r3, #8]
 23f2110:	4798      	blx	r3
  m_pBus->endTransmission();        // end transmission
 23f2112:	6820      	ldr	r0, [r4, #0]
 23f2114:	f006 fedb 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>

  m_pBus->requestFrom(_addr, (uint8_t)2); // send data n-bytes read
 23f2118:	2202      	movs	r2, #2
 23f211a:	7921      	ldrb	r1, [r4, #4]
 23f211c:	6820      	ldr	r0, [r4, #0]
 23f211e:	f006 fec8 	bl	23f8eb2 <_ZN7TwoWire11requestFromEhj>
  ret = m_pBus->read();                   // receive DATA
 23f2122:	6820      	ldr	r0, [r4, #0]
 23f2124:	6803      	ldr	r3, [r0, #0]
 23f2126:	695b      	ldr	r3, [r3, #20]
 23f2128:	4798      	blx	r3
 23f212a:	4605      	mov	r5, r0
  ret |= (uint16_t)m_pBus->read() << 8;   // receive DATA
 23f212c:	6820      	ldr	r0, [r4, #0]
 23f212e:	6803      	ldr	r3, [r0, #0]
 23f2130:	695b      	ldr	r3, [r3, #20]
 23f2132:	4798      	blx	r3
 23f2134:	ea45 2000 	orr.w	r0, r5, r0, lsl #8

  return ret;
}
 23f2138:	b280      	uxth	r0, r0
 23f213a:	bd38      	pop	{r3, r4, r5, pc}

023f213c <_ZN15Adafruit_SI11456readUVEv>:
uint16_t Adafruit_SI1145::readUV(void) { return read16(0x2C); }
 23f213c:	212c      	movs	r1, #44	; 0x2c
 23f213e:	f7ff bfdc 	b.w	23f20fa <_ZN15Adafruit_SI11456read16Eh>

023f2142 <_ZN15Adafruit_SI114511readVisibleEv>:
uint16_t Adafruit_SI1145::readVisible(void) { return read16(0x22); }
 23f2142:	2122      	movs	r1, #34	; 0x22
 23f2144:	f7ff bfd9 	b.w	23f20fa <_ZN15Adafruit_SI11456read16Eh>

023f2148 <_ZN15Adafruit_SI11456readIREv>:
uint16_t Adafruit_SI1145::readIR(void) { return read16(0x24); }
 23f2148:	2124      	movs	r1, #36	; 0x24
 23f214a:	f7ff bfd6 	b.w	23f20fa <_ZN15Adafruit_SI11456read16Eh>

023f214e <_ZN15Adafruit_SI11456write8Ehh>:

void Adafruit_SI1145::write8(uint8_t reg, uint8_t val) {
 23f214e:	b570      	push	{r4, r5, r6, lr}
 23f2150:	4604      	mov	r4, r0
 23f2152:	460e      	mov	r6, r1
 23f2154:	4615      	mov	r5, r2

  m_pBus->beginTransmission(_addr); // start transmission to device
 23f2156:	7901      	ldrb	r1, [r0, #4]
 23f2158:	6800      	ldr	r0, [r0, #0]
 23f215a:	f006 fead 	bl	23f8eb8 <_ZN7TwoWire17beginTransmissionEh>
  m_pBus->write(reg);               // sends register address to write
 23f215e:	6820      	ldr	r0, [r4, #0]
 23f2160:	4631      	mov	r1, r6
 23f2162:	6803      	ldr	r3, [r0, #0]
 23f2164:	689b      	ldr	r3, [r3, #8]
 23f2166:	4798      	blx	r3
  m_pBus->write(val);               // sends value
 23f2168:	6820      	ldr	r0, [r4, #0]
 23f216a:	4629      	mov	r1, r5
 23f216c:	6803      	ldr	r3, [r0, #0]
 23f216e:	689b      	ldr	r3, [r3, #8]
 23f2170:	4798      	blx	r3
  m_pBus->endTransmission();        // end transmission
 23f2172:	6820      	ldr	r0, [r4, #0]
}
 23f2174:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  m_pBus->endTransmission();        // end transmission
 23f2178:	f006 bea9 	b.w	23f8ece <_ZN7TwoWire15endTransmissionEv>

023f217c <_ZN15Adafruit_SI11455resetEv>:
void Adafruit_SI1145::reset() {
 23f217c:	b510      	push	{r4, lr}
 23f217e:	4604      	mov	r4, r0
  write8(SI1145_REG_MEASRATE0, 0);
 23f2180:	2200      	movs	r2, #0
 23f2182:	2108      	movs	r1, #8
 23f2184:	f7ff ffe3 	bl	23f214e <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_MEASRATE1, 0);
 23f2188:	4620      	mov	r0, r4
 23f218a:	2200      	movs	r2, #0
 23f218c:	2109      	movs	r1, #9
 23f218e:	f7ff ffde 	bl	23f214e <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQEN, 0);
 23f2192:	4620      	mov	r0, r4
 23f2194:	2200      	movs	r2, #0
 23f2196:	2104      	movs	r1, #4
 23f2198:	f7ff ffd9 	bl	23f214e <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQMODE1, 0);
 23f219c:	4620      	mov	r0, r4
 23f219e:	2200      	movs	r2, #0
 23f21a0:	2105      	movs	r1, #5
 23f21a2:	f7ff ffd4 	bl	23f214e <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQMODE2, 0);
 23f21a6:	4620      	mov	r0, r4
 23f21a8:	2200      	movs	r2, #0
 23f21aa:	2106      	movs	r1, #6
 23f21ac:	f7ff ffcf 	bl	23f214e <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_INTCFG, 0);
 23f21b0:	4620      	mov	r0, r4
 23f21b2:	2200      	movs	r2, #0
 23f21b4:	2103      	movs	r1, #3
 23f21b6:	f7ff ffca 	bl	23f214e <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQSTAT, 0xFF);
 23f21ba:	4620      	mov	r0, r4
 23f21bc:	22ff      	movs	r2, #255	; 0xff
 23f21be:	2121      	movs	r1, #33	; 0x21
 23f21c0:	f7ff ffc5 	bl	23f214e <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_COMMAND, SI1145_RESET);
 23f21c4:	2201      	movs	r2, #1
 23f21c6:	2118      	movs	r1, #24
 23f21c8:	4620      	mov	r0, r4
 23f21ca:	f7ff ffc0 	bl	23f214e <_ZN15Adafruit_SI11456write8Ehh>
  delay(10);
 23f21ce:	200a      	movs	r0, #10
 23f21d0:	f006 f878 	bl	23f82c4 <delay>
  write8(SI1145_REG_HWKEY, 0x17);
 23f21d4:	4620      	mov	r0, r4
 23f21d6:	2217      	movs	r2, #23
 23f21d8:	2107      	movs	r1, #7
 23f21da:	f7ff ffb8 	bl	23f214e <_ZN15Adafruit_SI11456write8Ehh>
}
 23f21de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(10);
 23f21e2:	200a      	movs	r0, #10
 23f21e4:	f006 b86e 	b.w	23f82c4 <delay>

023f21e8 <_ZN15Adafruit_SI114510writeParamEhh>:
uint8_t Adafruit_SI1145::writeParam(uint8_t p, uint8_t v) {
 23f21e8:	b538      	push	{r3, r4, r5, lr}
 23f21ea:	4604      	mov	r4, r0
 23f21ec:	460d      	mov	r5, r1
  write8(SI1145_REG_PARAMWR, v);
 23f21ee:	2117      	movs	r1, #23
 23f21f0:	f7ff ffad 	bl	23f214e <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_COMMAND, p | SI1145_PARAM_SET);
 23f21f4:	4620      	mov	r0, r4
 23f21f6:	2118      	movs	r1, #24
 23f21f8:	f045 02a0 	orr.w	r2, r5, #160	; 0xa0
 23f21fc:	f7ff ffa7 	bl	23f214e <_ZN15Adafruit_SI11456write8Ehh>
  return read8(SI1145_REG_PARAMRD);
 23f2200:	4620      	mov	r0, r4
}
 23f2202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return read8(SI1145_REG_PARAMRD);
 23f2206:	212e      	movs	r1, #46	; 0x2e
 23f2208:	f7ff bf5d 	b.w	23f20c6 <_ZN15Adafruit_SI11455read8Eh>

023f220c <_ZN15Adafruit_SI11455beginEhP7TwoWire>:
boolean Adafruit_SI1145::begin(uint8_t addr, TwoWire *pBus) {
 23f220c:	b510      	push	{r4, lr}
 23f220e:	4604      	mov	r4, r0
 23f2210:	4610      	mov	r0, r2
  _addr = addr;
 23f2212:	7121      	strb	r1, [r4, #4]
  m_pBus = pBus;
 23f2214:	6022      	str	r2, [r4, #0]
  m_pBus->begin();
 23f2216:	f006 fe25 	bl	23f8e64 <_ZN7TwoWire5beginEv>
  uint8_t id = read8(SI1145_REG_PARTID);
 23f221a:	2100      	movs	r1, #0
 23f221c:	4620      	mov	r0, r4
 23f221e:	f7ff ff52 	bl	23f20c6 <_ZN15Adafruit_SI11455read8Eh>
  if (id != 0x45)
 23f2222:	2845      	cmp	r0, #69	; 0x45
 23f2224:	d172      	bne.n	23f230c <_ZN15Adafruit_SI11455beginEhP7TwoWire+0x100>
  reset();
 23f2226:	4620      	mov	r0, r4
 23f2228:	f7ff ffa8 	bl	23f217c <_ZN15Adafruit_SI11455resetEv>
  write8(SI1145_REG_UCOEFF0, 0x29);
 23f222c:	2229      	movs	r2, #41	; 0x29
 23f222e:	2113      	movs	r1, #19
 23f2230:	4620      	mov	r0, r4
 23f2232:	f7ff ff8c 	bl	23f214e <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF1, 0x89);
 23f2236:	2289      	movs	r2, #137	; 0x89
 23f2238:	2114      	movs	r1, #20
 23f223a:	4620      	mov	r0, r4
 23f223c:	f7ff ff87 	bl	23f214e <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF2, 0x02);
 23f2240:	2202      	movs	r2, #2
 23f2242:	2115      	movs	r1, #21
 23f2244:	4620      	mov	r0, r4
 23f2246:	f7ff ff82 	bl	23f214e <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF3, 0x00);
 23f224a:	2200      	movs	r2, #0
 23f224c:	2116      	movs	r1, #22
 23f224e:	4620      	mov	r0, r4
 23f2250:	f7ff ff7d 	bl	23f214e <_ZN15Adafruit_SI11456write8Ehh>
  writeParam(SI1145_PARAM_CHLIST,
 23f2254:	22b1      	movs	r2, #177	; 0xb1
 23f2256:	2101      	movs	r1, #1
 23f2258:	4620      	mov	r0, r4
 23f225a:	f7ff ffc5 	bl	23f21e8 <_ZN15Adafruit_SI114510writeParamEhh>
  write8(SI1145_REG_INTCFG, SI1145_REG_INTCFG_INTOE);
 23f225e:	2201      	movs	r2, #1
 23f2260:	2103      	movs	r1, #3
 23f2262:	4620      	mov	r0, r4
 23f2264:	f7ff ff73 	bl	23f214e <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQEN, SI1145_REG_IRQEN_ALSEVERYSAMPLE);
 23f2268:	2201      	movs	r2, #1
 23f226a:	2104      	movs	r1, #4
 23f226c:	4620      	mov	r0, r4
 23f226e:	f7ff ff6e 	bl	23f214e <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_PSLED21, 0x03); // 20mA for LED 1 only
 23f2272:	2203      	movs	r2, #3
 23f2274:	210f      	movs	r1, #15
 23f2276:	4620      	mov	r0, r4
 23f2278:	f7ff ff69 	bl	23f214e <_ZN15Adafruit_SI11456write8Ehh>
  writeParam(SI1145_PARAM_PS1ADCMUX, SI1145_PARAM_ADCMUX_LARGEIR);
 23f227c:	2203      	movs	r2, #3
 23f227e:	2107      	movs	r1, #7
 23f2280:	4620      	mov	r0, r4
 23f2282:	f7ff ffb1 	bl	23f21e8 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_PSLED12SEL, SI1145_PARAM_PSLED12SEL_PS1LED1);
 23f2286:	2201      	movs	r2, #1
 23f2288:	2102      	movs	r1, #2
 23f228a:	4620      	mov	r0, r4
 23f228c:	f7ff ffac 	bl	23f21e8 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_PSADCGAIN, 0);
 23f2290:	2200      	movs	r2, #0
 23f2292:	210b      	movs	r1, #11
 23f2294:	4620      	mov	r0, r4
 23f2296:	f7ff ffa7 	bl	23f21e8 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_PSADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
 23f229a:	2270      	movs	r2, #112	; 0x70
 23f229c:	210a      	movs	r1, #10
 23f229e:	4620      	mov	r0, r4
 23f22a0:	f7ff ffa2 	bl	23f21e8 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_PSADCMISC,
 23f22a4:	2224      	movs	r2, #36	; 0x24
 23f22a6:	210c      	movs	r1, #12
 23f22a8:	4620      	mov	r0, r4
 23f22aa:	f7ff ff9d 	bl	23f21e8 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSIRADCMUX, SI1145_PARAM_ADCMUX_SMALLIR);
 23f22ae:	2200      	movs	r2, #0
 23f22b0:	210e      	movs	r1, #14
 23f22b2:	4620      	mov	r0, r4
 23f22b4:	f7ff ff98 	bl	23f21e8 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSIRADCGAIN, 0);
 23f22b8:	2200      	movs	r2, #0
 23f22ba:	211e      	movs	r1, #30
 23f22bc:	4620      	mov	r0, r4
 23f22be:	f7ff ff93 	bl	23f21e8 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSIRADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
 23f22c2:	2270      	movs	r2, #112	; 0x70
 23f22c4:	211d      	movs	r1, #29
 23f22c6:	4620      	mov	r0, r4
 23f22c8:	f7ff ff8e 	bl	23f21e8 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSIRADCMISC, SI1145_PARAM_ALSIRADCMISC_RANGE);
 23f22cc:	2220      	movs	r2, #32
 23f22ce:	211f      	movs	r1, #31
 23f22d0:	4620      	mov	r0, r4
 23f22d2:	f7ff ff89 	bl	23f21e8 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSVISADCGAIN, 0);
 23f22d6:	2200      	movs	r2, #0
 23f22d8:	2111      	movs	r1, #17
 23f22da:	4620      	mov	r0, r4
 23f22dc:	f7ff ff84 	bl	23f21e8 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSVISADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
 23f22e0:	2270      	movs	r2, #112	; 0x70
 23f22e2:	2110      	movs	r1, #16
 23f22e4:	4620      	mov	r0, r4
 23f22e6:	f7ff ff7f 	bl	23f21e8 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSVISADCMISC, SI1145_PARAM_ALSVISADCMISC_VISRANGE);
 23f22ea:	2220      	movs	r2, #32
 23f22ec:	2112      	movs	r1, #18
 23f22ee:	4620      	mov	r0, r4
 23f22f0:	f7ff ff7a 	bl	23f21e8 <_ZN15Adafruit_SI114510writeParamEhh>
  write8(SI1145_REG_MEASRATE0, 0xFF); // 255 * 31.25uS = 8ms
 23f22f4:	22ff      	movs	r2, #255	; 0xff
 23f22f6:	2108      	movs	r1, #8
 23f22f8:	4620      	mov	r0, r4
 23f22fa:	f7ff ff28 	bl	23f214e <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_COMMAND, SI1145_PSALS_AUTO);
 23f22fe:	4620      	mov	r0, r4
 23f2300:	220f      	movs	r2, #15
 23f2302:	2118      	movs	r1, #24
 23f2304:	f7ff ff23 	bl	23f214e <_ZN15Adafruit_SI11456write8Ehh>
 23f2308:	2001      	movs	r0, #1
}
 23f230a:	bd10      	pop	{r4, pc}
    return false; // look for SI1145
 23f230c:	2000      	movs	r0, #0
 23f230e:	e7fc      	b.n	23f230a <_ZN15Adafruit_SI11455beginEhP7TwoWire+0xfe>

023f2310 <_ZN15Adafruit_SI11455beginEP7TwoWire>:
boolean Adafruit_SI1145::begin(TwoWire *pBus) {
 23f2310:	460a      	mov	r2, r1
  return begin(SI1145_ADDR, pBus);
 23f2312:	2160      	movs	r1, #96	; 0x60
 23f2314:	f7ff bf7a 	b.w	23f220c <_ZN15Adafruit_SI11455beginEhP7TwoWire>

023f2318 <_ZN16Adafruit_SSD1306D1Ev>:
      rstPin(rst_pin) {}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
 23f2318:	b510      	push	{r4, lr}
 23f231a:	4b04      	ldr	r3, [pc, #16]	; (23f232c <_ZN16Adafruit_SSD1306D1Ev+0x14>)
 23f231c:	4604      	mov	r4, r0
 23f231e:	6003      	str	r3, [r0, #0]
  if (buffer) {
 23f2320:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 23f2322:	b108      	cbz	r0, 23f2328 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
 23f2324:	f005 ff18 	bl	23f8158 <free>
    buffer = NULL;
  }
}
 23f2328:	4620      	mov	r0, r4
 23f232a:	bd10      	pop	{r4, pc}
 23f232c:	023ff6c8 	.word	0x023ff6c8

023f2330 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
 23f2330:	b510      	push	{r4, lr}
 23f2332:	4604      	mov	r4, r0
}
 23f2334:	f7ff fff0 	bl	23f2318 <_ZN16Adafruit_SSD1306D1Ev>
 23f2338:	4620      	mov	r0, r4
 23f233a:	2174      	movs	r1, #116	; 0x74
 23f233c:	f7f3 fe85 	bl	23e604a <_ZdlPvj>
 23f2340:	4620      	mov	r0, r4
 23f2342:	bd10      	pop	{r4, pc}

023f2344 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 23f2344:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 23f2346:	b510      	push	{r4, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 23f2348:	db4b      	blt.n	23f23e2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
 23f234a:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 23f234e:	428c      	cmp	r4, r1
 23f2350:	dd47      	ble.n	23f23e2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
 23f2352:	2a00      	cmp	r2, #0
 23f2354:	db45      	blt.n	23f23e2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
 23f2356:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 23f235a:	4294      	cmp	r4, r2
 23f235c:	dd41      	ble.n	23f23e2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
 23f235e:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
 23f2360:	2c02      	cmp	r4, #2
 23f2362:	d01f      	beq.n	23f23a4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
 23f2364:	2c03      	cmp	r4, #3
 23f2366:	d026      	beq.n	23f23b6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
 23f2368:	2c01      	cmp	r4, #1
 23f236a:	d104      	bne.n	23f2376 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
    case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
 23f236c:	43d2      	mvns	r2, r2
 23f236e:	8904      	ldrh	r4, [r0, #8]
 23f2370:	4414      	add	r4, r2
      break;
 23f2372:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
 23f2374:	b221      	sxth	r1, r4
    case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch (color) {
 23f2376:	2b01      	cmp	r3, #1
 23f2378:	d023      	beq.n	23f23c2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
 23f237a:	2b02      	cmp	r3, #2
 23f237c:	d032      	beq.n	23f23e4 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
 23f237e:	bb83      	cbnz	r3, 23f23e2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    case SSD1306_WHITE:
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
      break;
    case SSD1306_BLACK:
      buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
 23f2380:	4613      	mov	r3, r2
 23f2382:	2a00      	cmp	r2, #0
 23f2384:	8904      	ldrh	r4, [r0, #8]
 23f2386:	bfb8      	it	lt
 23f2388:	1dd3      	addlt	r3, r2, #7
 23f238a:	10db      	asrs	r3, r3, #3
 23f238c:	fb13 1104 	smlabb	r1, r3, r4, r1
 23f2390:	2301      	movs	r3, #1
 23f2392:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 23f2394:	f002 0207 	and.w	r2, r2, #7
 23f2398:	4093      	lsls	r3, r2
 23f239a:	5c42      	ldrb	r2, [r0, r1]
 23f239c:	ea22 0203 	bic.w	r2, r2, r3
      break;
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
 23f23a0:	5442      	strb	r2, [r0, r1]
      break;
    }
  }
}
 23f23a2:	e01e      	b.n	23f23e2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      y = HEIGHT - y - 1;
 23f23a4:	43d2      	mvns	r2, r2
      x = WIDTH - x - 1;
 23f23a6:	8904      	ldrh	r4, [r0, #8]
 23f23a8:	3c01      	subs	r4, #1
 23f23aa:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
 23f23ac:	8944      	ldrh	r4, [r0, #10]
      x = WIDTH - x - 1;
 23f23ae:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
 23f23b0:	4422      	add	r2, r4
 23f23b2:	b212      	sxth	r2, r2
      break;
 23f23b4:	e7df      	b.n	23f2376 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
 23f23b6:	8944      	ldrh	r4, [r0, #10]
 23f23b8:	3c01      	subs	r4, #1
 23f23ba:	1a64      	subs	r4, r4, r1
      break;
 23f23bc:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
 23f23be:	b222      	sxth	r2, r4
      break;
 23f23c0:	e7d9      	b.n	23f2376 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
 23f23c2:	4613      	mov	r3, r2
 23f23c4:	2a00      	cmp	r2, #0
 23f23c6:	8904      	ldrh	r4, [r0, #8]
 23f23c8:	bfb8      	it	lt
 23f23ca:	1dd3      	addlt	r3, r2, #7
 23f23cc:	10db      	asrs	r3, r3, #3
 23f23ce:	fb13 1104 	smlabb	r1, r3, r4, r1
 23f23d2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 23f23d4:	f002 0007 	and.w	r0, r2, #7
 23f23d8:	2201      	movs	r2, #1
 23f23da:	4082      	lsls	r2, r0
 23f23dc:	5c58      	ldrb	r0, [r3, r1]
 23f23de:	4302      	orrs	r2, r0
 23f23e0:	545a      	strb	r2, [r3, r1]
}
 23f23e2:	bd10      	pop	{r4, pc}
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
 23f23e4:	4613      	mov	r3, r2
 23f23e6:	2a00      	cmp	r2, #0
 23f23e8:	8904      	ldrh	r4, [r0, #8]
 23f23ea:	bfb8      	it	lt
 23f23ec:	1dd3      	addlt	r3, r2, #7
 23f23ee:	10db      	asrs	r3, r3, #3
 23f23f0:	fb13 1104 	smlabb	r1, r3, r4, r1
 23f23f4:	2301      	movs	r3, #1
 23f23f6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 23f23f8:	f002 0207 	and.w	r2, r2, #7
 23f23fc:	fa03 f202 	lsl.w	r2, r3, r2
 23f2400:	5c43      	ldrb	r3, [r0, r1]
 23f2402:	405a      	eors	r2, r3
 23f2404:	e7cc      	b.n	23f23a0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

023f2408 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
 23f2408:	b570      	push	{r4, r5, r6, lr}
 23f240a:	4604      	mov	r4, r0
 23f240c:	461d      	mov	r5, r3
      wireClk(clkDuring), restoreClk(clkAfter)
 23f240e:	2600      	movs	r6, #0
 23f2410:	f7fe fece 	bl	23f11b0 <_ZN12Adafruit_GFXC1Ess>
 23f2414:	4b11      	ldr	r3, [pc, #68]	; (23f245c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
 23f2416:	6266      	str	r6, [r4, #36]	; 0x24
 23f2418:	6023      	str	r3, [r4, #0]
    : Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
 23f241a:	b915      	cbnz	r5, 23f2422 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
 23f241c:	f007 ff5c 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23f2420:	4605      	mov	r5, r0
      wireClk(clkDuring), restoreClk(clkAfter)
 23f2422:	23ff      	movs	r3, #255	; 0xff
 23f2424:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 23f2428:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 23f242c:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 23f2430:	f64f 72ff 	movw	r2, #65535	; 0xffff
 23f2434:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
 23f2438:	9b05      	ldr	r3, [sp, #20]
}
 23f243a:	4620      	mov	r0, r4
      wireClk(clkDuring), restoreClk(clkAfter)
 23f243c:	65a3      	str	r3, [r4, #88]	; 0x58
 23f243e:	9b06      	ldr	r3, [sp, #24]
 23f2440:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
 23f2444:	65e3      	str	r3, [r4, #92]	; 0x5c
  {
 23f2446:	4b06      	ldr	r3, [pc, #24]	; (23f2460 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
 23f2448:	86a2      	strh	r2, [r4, #52]	; 0x34
 23f244a:	6663      	str	r3, [r4, #100]	; 0x64
 23f244c:	2301      	movs	r3, #1
 23f244e:	66e6      	str	r6, [r4, #108]	; 0x6c
 23f2450:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 23f2454:	f8a4 6070 	strh.w	r6, [r4, #112]	; 0x70
}
 23f2458:	bd70      	pop	{r4, r5, r6, pc}
 23f245a:	bf00      	nop
 23f245c:	023ff6c8 	.word	0x023ff6c8
 23f2460:	023fea34 	.word	0x023fea34

023f2464 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
 23f2464:	b570      	push	{r4, r5, r6, lr}
 23f2466:	4604      	mov	r4, r0
  if (wire) { // I2C
 23f2468:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
 23f246a:	460d      	mov	r5, r1
  if (wire) { // I2C
 23f246c:	b190      	cbz	r0, 23f2494 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
 23f246e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 23f2472:	f006 fd25 	bl	23f8ec0 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 23f2476:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f2478:	2100      	movs	r1, #0
 23f247a:	6803      	ldr	r3, [r0, #0]
 23f247c:	689b      	ldr	r3, [r3, #8]
 23f247e:	4798      	blx	r3
    WIRE_WRITE(c);
 23f2480:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f2482:	4629      	mov	r1, r5
 23f2484:	6803      	ldr	r3, [r0, #0]
 23f2486:	689b      	ldr	r3, [r3, #8]
 23f2488:	4798      	blx	r3
    wire->endTransmission();
 23f248a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
 23f248c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    wire->endTransmission();
 23f2490:	f006 bd1d 	b.w	23f8ece <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
 23f2494:	6c22      	ldr	r2, [r4, #64]	; 0x40
 23f2496:	6d20      	ldr	r0, [r4, #80]	; 0x50
 23f2498:	6813      	ldr	r3, [r2, #0]
 23f249a:	ea23 0300 	bic.w	r3, r3, r0
 23f249e:	6013      	str	r3, [r2, #0]
  if (spi) {
 23f24a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f24a2:	b118      	cbz	r0, 23f24ac <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x48>
}
 23f24a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (void)spi->transfer(d);
 23f24a8:	f007 ba5e 	b.w	23f9968 <_ZN8SPIClass8transferEh>
 23f24ac:	2208      	movs	r2, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f24ae:	2180      	movs	r1, #128	; 0x80
        *mosiPort |= mosiPinMask;
 23f24b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23f24b2:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 23f24b4:	6818      	ldr	r0, [r3, #0]
      if (d & bit)
 23f24b6:	420d      	tst	r5, r1
        *mosiPort |= mosiPinMask;
 23f24b8:	bf14      	ite	ne
 23f24ba:	4330      	orrne	r0, r6
        *mosiPort &= ~mosiPinMask;
 23f24bc:	43b0      	biceq	r0, r6
 23f24be:	6018      	str	r0, [r3, #0]
      *clkPort |= clkPinMask;  // Clock high
 23f24c0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 23f24c2:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 23f24c4:	6803      	ldr	r3, [r0, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f24c6:	3a01      	subs	r2, #1
      *clkPort |= clkPinMask;  // Clock high
 23f24c8:	ea43 0306 	orr.w	r3, r3, r6
 23f24cc:	6003      	str	r3, [r0, #0]
      *clkPort &= ~clkPinMask; // Clock low
 23f24ce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 23f24d0:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 23f24d2:	6803      	ldr	r3, [r0, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f24d4:	ea4f 0151 	mov.w	r1, r1, lsr #1
      *clkPort &= ~clkPinMask; // Clock low
 23f24d8:	ea23 0306 	bic.w	r3, r3, r6
 23f24dc:	6003      	str	r3, [r0, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f24de:	d1e7      	bne.n	23f24b0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4c>
}
 23f24e0:	bd70      	pop	{r4, r5, r6, pc}

023f24e2 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing SSD1306_BLACK (value 0) pixels will actually draw
   white, SSD1306_WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(bool i) {
 23f24e2:	b538      	push	{r3, r4, r5, lr}
 23f24e4:	4604      	mov	r4, r0
  TRANSACTION_START
 23f24e6:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(bool i) {
 23f24e8:	460d      	mov	r5, r1
  TRANSACTION_START
 23f24ea:	b180      	cbz	r0, 23f250e <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>
	  setSpeed(speed);
 23f24ec:	6da1      	ldr	r1, [r4, #88]	; 0x58
 23f24ee:	f006 fcb5 	bl	23f8e5c <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
 23f24f2:	2d00      	cmp	r5, #0
 23f24f4:	4620      	mov	r0, r4
 23f24f6:	bf14      	ite	ne
 23f24f8:	21a7      	movne	r1, #167	; 0xa7
 23f24fa:	21a6      	moveq	r1, #166	; 0xa6
 23f24fc:	f7ff ffb2 	bl	23f2464 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
 23f2500:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f2502:	b188      	cbz	r0, 23f2528 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
 23f2504:	6de1      	ldr	r1, [r4, #92]	; 0x5c
}
 23f2506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23f250a:	f006 bca7 	b.w	23f8e5c <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
 23f250e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f2510:	b118      	cbz	r0, 23f251a <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
 23f2512:	f104 0164 	add.w	r1, r4, #100	; 0x64
 23f2516:	f007 f9b9 	bl	23f988c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
 23f251a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f251c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f251e:	6813      	ldr	r3, [r2, #0]
 23f2520:	ea23 0301 	bic.w	r3, r3, r1
 23f2524:	6013      	str	r3, [r2, #0]
 23f2526:	e7e4      	b.n	23f24f2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
 23f2528:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f252a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f252c:	6813      	ldr	r3, [r2, #0]
 23f252e:	430b      	orrs	r3, r1
 23f2530:	6013      	str	r3, [r2, #0]
 23f2532:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f2534:	b118      	cbz	r0, 23f253e <_ZN16Adafruit_SSD130613invertDisplayEb+0x5c>
}
 23f2536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
 23f253a:	f007 b98d 	b.w	23f9858 <_ZN8SPIClass14endTransactionEv>
}
 23f253e:	bd38      	pop	{r3, r4, r5, pc}

023f2540 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
 23f2540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f2542:	4604      	mov	r4, r0
  if (wire) { // I2C
 23f2544:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
 23f2546:	460d      	mov	r5, r1
  if (wire) { // I2C
 23f2548:	188f      	adds	r7, r1, r2
 23f254a:	b340      	cbz	r0, 23f259e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x5e>
    wire->beginTransmission(i2caddr);
 23f254c:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 23f2550:	f006 fcb6 	bl	23f8ec0 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 23f2554:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f2556:	2100      	movs	r1, #0
 23f2558:	6803      	ldr	r3, [r0, #0]
    uint16_t bytesOut = 1;
 23f255a:	2601      	movs	r6, #1
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 23f255c:	689b      	ldr	r3, [r3, #8]
 23f255e:	4798      	blx	r3
    while (n--) {
 23f2560:	42bd      	cmp	r5, r7
        wire->endTransmission();
 23f2562:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while (n--) {
 23f2564:	d017      	beq.n	23f2596 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x56>
      if (bytesOut >= WIRE_MAX) {
 23f2566:	2e1f      	cmp	r6, #31
 23f2568:	d90c      	bls.n	23f2584 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x44>
        wire->endTransmission();
 23f256a:	f006 fcb0 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
 23f256e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 23f2572:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f2574:	f006 fca4 	bl	23f8ec0 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 23f2578:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f257a:	2100      	movs	r1, #0
 23f257c:	6803      	ldr	r3, [r0, #0]
        bytesOut = 1;
 23f257e:	2601      	movs	r6, #1
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 23f2580:	689b      	ldr	r3, [r3, #8]
 23f2582:	4798      	blx	r3
      WIRE_WRITE(pgm_read_byte(c++));
 23f2584:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f2586:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f258a:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
 23f258c:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
 23f258e:	689b      	ldr	r3, [r3, #8]
 23f2590:	4798      	blx	r3
      bytesOut++;
 23f2592:	b2b6      	uxth	r6, r6
    while (n--) {
 23f2594:	e7e4      	b.n	23f2560 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x20>
}
 23f2596:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
 23f259a:	f006 bc98 	b.w	23f8ece <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
 23f259e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 23f25a0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 23f25a2:	6813      	ldr	r3, [r2, #0]
 23f25a4:	ea23 0301 	bic.w	r3, r3, r1
 23f25a8:	6013      	str	r3, [r2, #0]
    while (n--)
 23f25aa:	42bd      	cmp	r5, r7
 23f25ac:	d026      	beq.n	23f25fc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xbc>
  if (spi) {
 23f25ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
      SPIwrite(pgm_read_byte(c++));
 23f25b0:	f815 1b01 	ldrb.w	r1, [r5], #1
  if (spi) {
 23f25b4:	b110      	cbz	r0, 23f25bc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x7c>
    (void)spi->transfer(d);
 23f25b6:	f007 f9d7 	bl	23f9968 <_ZN8SPIClass8transferEh>
 23f25ba:	e7f6      	b.n	23f25aa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6a>
 23f25bc:	f04f 0e08 	mov.w	lr, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f25c0:	2080      	movs	r0, #128	; 0x80
        *mosiPort |= mosiPinMask;
 23f25c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23f25c4:	f8d4 c048 	ldr.w	ip, [r4, #72]	; 0x48
 23f25c8:	681e      	ldr	r6, [r3, #0]
      if (d & bit)
 23f25ca:	4201      	tst	r1, r0
        *mosiPort |= mosiPinMask;
 23f25cc:	bf14      	ite	ne
 23f25ce:	ea46 060c 	orrne.w	r6, r6, ip
        *mosiPort &= ~mosiPinMask;
 23f25d2:	ea26 060c 	biceq.w	r6, r6, ip
 23f25d6:	601e      	str	r6, [r3, #0]
      *clkPort |= clkPinMask;  // Clock high
 23f25d8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 23f25da:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 23f25dc:	6833      	ldr	r3, [r6, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f25de:	f1be 0e01 	subs.w	lr, lr, #1
      *clkPort |= clkPinMask;  // Clock high
 23f25e2:	ea43 0302 	orr.w	r3, r3, r2
 23f25e6:	6033      	str	r3, [r6, #0]
      *clkPort &= ~clkPinMask; // Clock low
 23f25e8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 23f25ea:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 23f25ec:	6833      	ldr	r3, [r6, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f25ee:	ea4f 0050 	mov.w	r0, r0, lsr #1
      *clkPort &= ~clkPinMask; // Clock low
 23f25f2:	ea23 0302 	bic.w	r3, r3, r2
 23f25f6:	6033      	str	r3, [r6, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f25f8:	d1e3      	bne.n	23f25c2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x82>
 23f25fa:	e7d6      	b.n	23f25aa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6a>
}
 23f25fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f25fe <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
 23f25fe:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 23f2602:	2100      	movs	r1, #0
 23f2604:	1dda      	adds	r2, r3, #7
 23f2606:	bf48      	it	mi
 23f2608:	f103 020e 	addmi.w	r2, r3, #14
 23f260c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 23f2610:	10d2      	asrs	r2, r2, #3
 23f2612:	435a      	muls	r2, r3
 23f2614:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 23f2616:	f00a bbfa 	b.w	23fce0e <memset>
	...

023f261c <_ZN16Adafruit_SSD13065beginEhhbb>:
                             bool periphBegin) {
 23f261c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 23f2620:	461e      	mov	r6, r3
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
 23f2622:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
                             bool periphBegin) {
 23f2624:	4604      	mov	r4, r0
 23f2626:	460f      	mov	r7, r1
 23f2628:	4615      	mov	r5, r2
 23f262a:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
 23f262e:	b1c3      	cbz	r3, 23f2662 <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
 23f2630:	4620      	mov	r0, r4
 23f2632:	f7ff ffe4 	bl	23f25fe <_ZN16Adafruit_SSD130612clearDisplayEv>
  if (HEIGHT > 32) {
 23f2636:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 23f263a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 23f263e:	2820      	cmp	r0, #32
 23f2640:	dc21      	bgt.n	23f2686 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
 23f2642:	2320      	movs	r3, #32
 23f2644:	2201      	movs	r2, #1
 23f2646:	e9cd 3201 	strd	r3, r2, [sp, #4]
 23f264a:	2373      	movs	r3, #115	; 0x73
 23f264c:	3820      	subs	r0, #32
 23f264e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 23f2652:	3973      	subs	r1, #115	; 0x73
 23f2654:	9300      	str	r3, [sp, #0]
 23f2656:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 23f265a:	4bb8      	ldr	r3, [pc, #736]	; (23f293c <_ZN16Adafruit_SSD13065beginEhhbb+0x320>)
 23f265c:	f340 024f 	sbfx	r2, r0, #1, #16
 23f2660:	e021      	b.n	23f26a6 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
 23f2662:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 23f2666:	1dd8      	adds	r0, r3, #7
 23f2668:	bf48      	it	mi
 23f266a:	f103 000e 	addmi.w	r0, r3, #14
 23f266e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 23f2672:	10c0      	asrs	r0, r0, #3
 23f2674:	4358      	muls	r0, r3
 23f2676:	f005 fd61 	bl	23f813c <malloc>
 23f267a:	62e0      	str	r0, [r4, #44]	; 0x2c
 23f267c:	2800      	cmp	r0, #0
 23f267e:	d1d7      	bne.n	23f2630 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
 23f2680:	b004      	add	sp, #16
 23f2682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
 23f2686:	3840      	subs	r0, #64	; 0x40
 23f2688:	f3c0 32c0 	ubfx	r2, r0, #15, #1
 23f268c:	2340      	movs	r3, #64	; 0x40
 23f268e:	fa02 f280 	sxtah	r2, r2, r0
 23f2692:	2001      	movs	r0, #1
 23f2694:	e9cd 3001 	strd	r3, r0, [sp, #4]
 23f2698:	2352      	movs	r3, #82	; 0x52
 23f269a:	3952      	subs	r1, #82	; 0x52
 23f269c:	9300      	str	r3, [sp, #0]
 23f269e:	4ba8      	ldr	r3, [pc, #672]	; (23f2940 <_ZN16Adafruit_SSD13065beginEhhbb+0x324>)
 23f26a0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 23f26a4:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
 23f26a6:	4620      	mov	r0, r4
 23f26a8:	f341 014f 	sbfx	r1, r1, #1, #16
 23f26ac:	f7fe fd96 	bl	23f11dc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if (wire) { // Using I2C
 23f26b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
 23f26b2:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if (wire) { // Using I2C
 23f26b6:	2800      	cmp	r0, #0
 23f26b8:	f000 809a 	beq.w	23f27f0 <_ZN16Adafruit_SSD13065beginEhhbb+0x1d4>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
 23f26bc:	2d00      	cmp	r5, #0
 23f26be:	f040 8095 	bne.w	23f27ec <_ZN16Adafruit_SSD13065beginEhhbb+0x1d0>
 23f26c2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 23f26c6:	2b20      	cmp	r3, #32
 23f26c8:	bf0c      	ite	eq
 23f26ca:	253c      	moveq	r5, #60	; 0x3c
 23f26cc:	253d      	movne	r5, #61	; 0x3d
 23f26ce:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if (periphBegin)
 23f26d2:	f1b8 0f00 	cmp.w	r8, #0
 23f26d6:	d001      	beq.n	23f26dc <_ZN16Adafruit_SSD13065beginEhhbb+0xc0>
      wire->begin();
 23f26d8:	f006 fbc4 	bl	23f8e64 <_ZN7TwoWire5beginEv>
  if (reset && (rstPin >= 0)) {
 23f26dc:	b1fe      	cbz	r6, 23f271e <_ZN16Adafruit_SSD13065beginEhhbb+0x102>
 23f26de:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 23f26e2:	2800      	cmp	r0, #0
 23f26e4:	db1b      	blt.n	23f271e <_ZN16Adafruit_SSD13065beginEhhbb+0x102>
    pinMode(rstPin, OUTPUT);
 23f26e6:	2101      	movs	r1, #1
 23f26e8:	b280      	uxth	r0, r0
 23f26ea:	f007 fd71 	bl	23fa1d0 <pinMode>
    digitalWrite(rstPin, HIGH);
 23f26ee:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 23f26f2:	2101      	movs	r1, #1
 23f26f4:	b280      	uxth	r0, r0
 23f26f6:	f007 fd7c 	bl	23fa1f2 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
 23f26fa:	2001      	movs	r0, #1
 23f26fc:	f005 fde2 	bl	23f82c4 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
 23f2700:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 23f2704:	2100      	movs	r1, #0
 23f2706:	b280      	uxth	r0, r0
 23f2708:	f007 fd73 	bl	23fa1f2 <digitalWrite>
    delay(10);                  // Wait 10 ms
 23f270c:	200a      	movs	r0, #10
 23f270e:	f005 fdd9 	bl	23f82c4 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
 23f2712:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 23f2716:	2101      	movs	r1, #1
 23f2718:	b280      	uxth	r0, r0
 23f271a:	f007 fd6a 	bl	23fa1f2 <digitalWrite>
  TRANSACTION_START
 23f271e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f2720:	2800      	cmp	r0, #0
 23f2722:	f000 80e5 	beq.w	23f28f0 <_ZN16Adafruit_SSD13065beginEhhbb+0x2d4>
 23f2726:	6da1      	ldr	r1, [r4, #88]	; 0x58
 23f2728:	f006 fb98 	bl	23f8e5c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
 23f272c:	2204      	movs	r2, #4
 23f272e:	4620      	mov	r0, r4
 23f2730:	4984      	ldr	r1, [pc, #528]	; (23f2944 <_ZN16Adafruit_SSD13065beginEhhbb+0x328>)
 23f2732:	f7ff ff05 	bl	23f2540 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
 23f2736:	8961      	ldrh	r1, [r4, #10]
 23f2738:	4620      	mov	r0, r4
 23f273a:	3901      	subs	r1, #1
 23f273c:	b2c9      	uxtb	r1, r1
 23f273e:	f7ff fe91 	bl	23f2464 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
 23f2742:	4981      	ldr	r1, [pc, #516]	; (23f2948 <_ZN16Adafruit_SSD13065beginEhhbb+0x32c>)
 23f2744:	2204      	movs	r2, #4
 23f2746:	4620      	mov	r0, r4
 23f2748:	f7ff fefa 	bl	23f2540 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 23f274c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 23f2750:	4620      	mov	r0, r4
 23f2752:	2b01      	cmp	r3, #1
 23f2754:	bf0c      	ite	eq
 23f2756:	2110      	moveq	r1, #16
 23f2758:	2114      	movne	r1, #20
 23f275a:	f7ff fe83 	bl	23f2464 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
 23f275e:	2204      	movs	r2, #4
 23f2760:	4620      	mov	r0, r4
 23f2762:	497a      	ldr	r1, [pc, #488]	; (23f294c <_ZN16Adafruit_SSD13065beginEhhbb+0x330>)
 23f2764:	f7ff feec 	bl	23f2540 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  contrast = 0x8F;
 23f2768:	238f      	movs	r3, #143	; 0x8f
  if ((WIDTH == 128) && (HEIGHT == 32)) {
 23f276a:	4a79      	ldr	r2, [pc, #484]	; (23f2950 <_ZN16Adafruit_SSD13065beginEhhbb+0x334>)
  contrast = 0x8F;
 23f276c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
  if ((WIDTH == 128) && (HEIGHT == 32)) {
 23f2770:	68a3      	ldr	r3, [r4, #8]
 23f2772:	4293      	cmp	r3, r2
 23f2774:	f000 80d4 	beq.w	23f2920 <_ZN16Adafruit_SSD13065beginEhhbb+0x304>
  } else if ((WIDTH == 128) && (HEIGHT == 64)) {
 23f2778:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 23f277c:	4293      	cmp	r3, r2
 23f277e:	f040 80c4 	bne.w	23f290a <_ZN16Adafruit_SSD13065beginEhhbb+0x2ee>
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 23f2782:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
    comPins = 0x12;
 23f2786:	2512      	movs	r5, #18
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 23f2788:	2b01      	cmp	r3, #1
 23f278a:	bf0c      	ite	eq
 23f278c:	239f      	moveq	r3, #159	; 0x9f
 23f278e:	23cf      	movne	r3, #207	; 0xcf
 23f2790:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
  ssd1306_command1(SSD1306_SETCOMPINS);
 23f2794:	21da      	movs	r1, #218	; 0xda
 23f2796:	4620      	mov	r0, r4
 23f2798:	f7ff fe64 	bl	23f2464 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(comPins);
 23f279c:	4629      	mov	r1, r5
 23f279e:	4620      	mov	r0, r4
 23f27a0:	f7ff fe60 	bl	23f2464 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(SSD1306_SETCONTRAST);
 23f27a4:	2181      	movs	r1, #129	; 0x81
 23f27a6:	4620      	mov	r0, r4
 23f27a8:	f7ff fe5c 	bl	23f2464 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(contrast);
 23f27ac:	4620      	mov	r0, r4
 23f27ae:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
 23f27b2:	f7ff fe57 	bl	23f2464 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
 23f27b6:	21d9      	movs	r1, #217	; 0xd9
 23f27b8:	4620      	mov	r0, r4
 23f27ba:	f7ff fe53 	bl	23f2464 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 23f27be:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 23f27c2:	4620      	mov	r0, r4
 23f27c4:	2b01      	cmp	r3, #1
 23f27c6:	bf0c      	ite	eq
 23f27c8:	2122      	moveq	r1, #34	; 0x22
 23f27ca:	21f1      	movne	r1, #241	; 0xf1
 23f27cc:	f7ff fe4a 	bl	23f2464 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
 23f27d0:	4620      	mov	r0, r4
 23f27d2:	2206      	movs	r2, #6
 23f27d4:	495f      	ldr	r1, [pc, #380]	; (23f2954 <_ZN16Adafruit_SSD13065beginEhhbb+0x338>)
 23f27d6:	f7ff feb3 	bl	23f2540 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
 23f27da:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f27dc:	2800      	cmp	r0, #0
 23f27de:	f000 80a1 	beq.w	23f2924 <_ZN16Adafruit_SSD13065beginEhhbb+0x308>
 23f27e2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 23f27e4:	f006 fb3a 	bl	23f8e5c <_ZN7TwoWire8setSpeedEm>
  return true; // Success
 23f27e8:	2001      	movs	r0, #1
 23f27ea:	e749      	b.n	23f2680 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
 23f27ec:	b26d      	sxtb	r5, r5
 23f27ee:	e76e      	b.n	23f26ce <_ZN16Adafruit_SSD13065beginEhhbb+0xb2>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
 23f27f0:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
 23f27f4:	2101      	movs	r1, #1
 23f27f6:	b280      	uxth	r0, r0
 23f27f8:	f007 fcea 	bl	23fa1d0 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
 23f27fc:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 23f2800:	2101      	movs	r1, #1
 23f2802:	b280      	uxth	r0, r0
 23f2804:	f007 fce4 	bl	23fa1d0 <pinMode>
    dcPort = (PortReg *)portOutputRegister(digitalPinToPort(dcPin));
 23f2808:	f004 ff58 	bl	23f76bc <hal_pin_map>
 23f280c:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
 23f2810:	4d51      	ldr	r5, [pc, #324]	; (23f2958 <_ZN16Adafruit_SSD13065beginEhhbb+0x33c>)
 23f2812:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f2816:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 23f281a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 23f281e:	6423      	str	r3, [r4, #64]	; 0x40
    dcPinMask = digitalPinToBitMask(dcPin);
 23f2820:	f004 ff4c 	bl	23f76bc <hal_pin_map>
 23f2824:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
 23f2828:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f282c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 23f2830:	785b      	ldrb	r3, [r3, #1]
 23f2832:	6523      	str	r3, [r4, #80]	; 0x50
    csPort = (PortReg *)portOutputRegister(digitalPinToPort(csPin));
 23f2834:	f004 ff42 	bl	23f76bc <hal_pin_map>
 23f2838:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
 23f283c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f2840:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 23f2844:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 23f2848:	6463      	str	r3, [r4, #68]	; 0x44
    csPinMask = digitalPinToBitMask(csPin);
 23f284a:	f004 ff37 	bl	23f76bc <hal_pin_map>
 23f284e:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
    SSD1306_DESELECT
 23f2852:	6c62      	ldr	r2, [r4, #68]	; 0x44
    csPinMask = digitalPinToBitMask(csPin);
 23f2854:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f2858:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 23f285c:	785b      	ldrb	r3, [r3, #1]
 23f285e:	6563      	str	r3, [r4, #84]	; 0x54
    SSD1306_DESELECT
 23f2860:	6811      	ldr	r1, [r2, #0]
 23f2862:	430b      	orrs	r3, r1
 23f2864:	6013      	str	r3, [r2, #0]
    if (spi) { // Hardware SPI
 23f2866:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f2868:	b130      	cbz	r0, 23f2878 <_ZN16Adafruit_SSD13065beginEhhbb+0x25c>
      if (periphBegin)
 23f286a:	f1b8 0f00 	cmp.w	r8, #0
 23f286e:	f43f af35 	beq.w	23f26dc <_ZN16Adafruit_SSD13065beginEhhbb+0xc0>
        spi->begin();
 23f2872:	f006 ffb7 	bl	23f97e4 <_ZN8SPIClass5beginEv>
 23f2876:	e731      	b.n	23f26dc <_ZN16Adafruit_SSD13065beginEhhbb+0xc0>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
 23f2878:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
 23f287c:	2101      	movs	r1, #1
 23f287e:	b280      	uxth	r0, r0
 23f2880:	f007 fca6 	bl	23fa1d0 <pinMode>
      pinMode(clkPin, OUTPUT);
 23f2884:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 23f2888:	2101      	movs	r1, #1
 23f288a:	b280      	uxth	r0, r0
 23f288c:	f007 fca0 	bl	23fa1d0 <pinMode>
      mosiPort = (PortReg *)portOutputRegister(digitalPinToPort(mosiPin));
 23f2890:	f004 ff14 	bl	23f76bc <hal_pin_map>
 23f2894:	f994 3033 	ldrsb.w	r3, [r4, #51]	; 0x33
 23f2898:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f289c:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 23f28a0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 23f28a4:	63a3      	str	r3, [r4, #56]	; 0x38
      mosiPinMask = digitalPinToBitMask(mosiPin);
 23f28a6:	f004 ff09 	bl	23f76bc <hal_pin_map>
 23f28aa:	f994 3033 	ldrsb.w	r3, [r4, #51]	; 0x33
 23f28ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f28b2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 23f28b6:	785b      	ldrb	r3, [r3, #1]
 23f28b8:	64a3      	str	r3, [r4, #72]	; 0x48
      clkPort = (PortReg *)portOutputRegister(digitalPinToPort(clkPin));
 23f28ba:	f004 feff 	bl	23f76bc <hal_pin_map>
 23f28be:	f994 3034 	ldrsb.w	r3, [r4, #52]	; 0x34
 23f28c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f28c6:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 23f28ca:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 23f28ce:	63e3      	str	r3, [r4, #60]	; 0x3c
      clkPinMask = digitalPinToBitMask(clkPin);
 23f28d0:	f004 fef4 	bl	23f76bc <hal_pin_map>
 23f28d4:	f994 3034 	ldrsb.w	r3, [r4, #52]	; 0x34
      *clkPort &= ~clkPinMask; // Clock low
 23f28d8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      clkPinMask = digitalPinToBitMask(clkPin);
 23f28da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f28de:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 23f28e2:	7859      	ldrb	r1, [r3, #1]
 23f28e4:	64e1      	str	r1, [r4, #76]	; 0x4c
      *clkPort &= ~clkPinMask; // Clock low
 23f28e6:	6813      	ldr	r3, [r2, #0]
 23f28e8:	ea23 0301 	bic.w	r3, r3, r1
 23f28ec:	6013      	str	r3, [r2, #0]
 23f28ee:	e6f5      	b.n	23f26dc <_ZN16Adafruit_SSD13065beginEhhbb+0xc0>
  TRANSACTION_START
 23f28f0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f28f2:	b118      	cbz	r0, 23f28fc <_ZN16Adafruit_SSD13065beginEhhbb+0x2e0>
 23f28f4:	f104 0164 	add.w	r1, r4, #100	; 0x64
 23f28f8:	f006 ffc8 	bl	23f988c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
 23f28fc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f28fe:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f2900:	6813      	ldr	r3, [r2, #0]
 23f2902:	ea23 0301 	bic.w	r3, r3, r1
 23f2906:	6013      	str	r3, [r2, #0]
 23f2908:	e710      	b.n	23f272c <_ZN16Adafruit_SSD13065beginEhhbb+0x110>
  } else if ((WIDTH == 96) && (HEIGHT == 16)) {
 23f290a:	4a14      	ldr	r2, [pc, #80]	; (23f295c <_ZN16Adafruit_SSD13065beginEhhbb+0x340>)
 23f290c:	4293      	cmp	r3, r2
 23f290e:	d107      	bne.n	23f2920 <_ZN16Adafruit_SSD13065beginEhhbb+0x304>
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
 23f2910:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 23f2914:	2b01      	cmp	r3, #1
 23f2916:	bf0c      	ite	eq
 23f2918:	2310      	moveq	r3, #16
 23f291a:	23af      	movne	r3, #175	; 0xaf
 23f291c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    comPins = 0x02;
 23f2920:	2502      	movs	r5, #2
 23f2922:	e737      	b.n	23f2794 <_ZN16Adafruit_SSD13065beginEhhbb+0x178>
  TRANSACTION_END
 23f2924:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f2926:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f2928:	6813      	ldr	r3, [r2, #0]
 23f292a:	430b      	orrs	r3, r1
 23f292c:	6013      	str	r3, [r2, #0]
 23f292e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f2930:	2800      	cmp	r0, #0
 23f2932:	f43f af59 	beq.w	23f27e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x1cc>
 23f2936:	f006 ff8f 	bl	23f9858 <_ZN8SPIClass14endTransactionEv>
 23f293a:	e755      	b.n	23f27e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x1cc>
 23f293c:	023ff4e0 	.word	0x023ff4e0
 23f2940:	023ff220 	.word	0x023ff220
 23f2944:	023ff728 	.word	0x023ff728
 23f2948:	023ff72c 	.word	0x023ff72c
 23f294c:	023ff730 	.word	0x023ff730
 23f2950:	00200080 	.word	0x00200080
 23f2954:	023ff734 	.word	0x023ff734
 23f2958:	101c0024 	.word	0x101c0024
 23f295c:	00100060 	.word	0x00100060

023f2960 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
                                             uint16_t color) {
 23f2960:	b570      	push	{r4, r5, r6, lr}
  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
 23f2962:	2a00      	cmp	r2, #0
                                             uint16_t color) {
 23f2964:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
 23f2968:	db3f      	blt.n	23f29ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
 23f296a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 23f296e:	4294      	cmp	r4, r2
 23f2970:	dd3b      	ble.n	23f29ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
    if (x < 0) {                  // Clip left
 23f2972:	2900      	cmp	r1, #0
      w += x;
 23f2974:	bfbe      	ittt	lt
 23f2976:	185b      	addlt	r3, r3, r1
      x = 0;
 23f2978:	2100      	movlt	r1, #0
      w += x;
 23f297a:	b21b      	sxthlt	r3, r3
    if ((x + w) > WIDTH) { // Clip right
 23f297c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 23f2980:	18ce      	adds	r6, r1, r3
 23f2982:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
 23f2984:	bfc4      	itt	gt
 23f2986:	1a63      	subgt	r3, r4, r1
 23f2988:	b21b      	sxthgt	r3, r3
    if (w > 0) { // Proceed only if width is positive
 23f298a:	2b00      	cmp	r3, #0
 23f298c:	dd2d      	ble.n	23f29ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x], mask = 1 << (y & 7);
 23f298e:	10d6      	asrs	r6, r2, #3
 23f2990:	fb14 1106 	smlabb	r1, r4, r6, r1
 23f2994:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
      switch (color) {
 23f2996:	2d01      	cmp	r5, #1
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x], mask = 1 << (y & 7);
 23f2998:	4401      	add	r1, r0
 23f299a:	f002 0007 	and.w	r0, r2, #7
 23f299e:	f04f 0201 	mov.w	r2, #1
 23f29a2:	fa02 f200 	lsl.w	r2, r2, r0
 23f29a6:	b2d2      	uxtb	r2, r2
      switch (color) {
 23f29a8:	d016      	beq.n	23f29d8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x78>
 23f29aa:	2d02      	cmp	r5, #2
 23f29ac:	d00b      	beq.n	23f29c6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x66>
 23f29ae:	b9e5      	cbnz	r5, 23f29ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
        mask = ~mask;
 23f29b0:	43d2      	mvns	r2, r2
 23f29b2:	440b      	add	r3, r1
 23f29b4:	b2d2      	uxtb	r2, r2
        while (w--) {
 23f29b6:	4299      	cmp	r1, r3
 23f29b8:	d017      	beq.n	23f29ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
          *pBuf++ &= mask;
 23f29ba:	f811 0b01 	ldrb.w	r0, [r1], #1
 23f29be:	4010      	ands	r0, r2
 23f29c0:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
 23f29c4:	e7f7      	b.n	23f29b6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x56>
 23f29c6:	440b      	add	r3, r1
        while (w--) {
 23f29c8:	4299      	cmp	r1, r3
 23f29ca:	d00e      	beq.n	23f29ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
          *pBuf++ ^= mask;
 23f29cc:	f811 0b01 	ldrb.w	r0, [r1], #1
 23f29d0:	4050      	eors	r0, r2
 23f29d2:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
 23f29d6:	e7f7      	b.n	23f29c8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x68>
 23f29d8:	440b      	add	r3, r1
        while (w--) {
 23f29da:	4299      	cmp	r1, r3
 23f29dc:	d005      	beq.n	23f29ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
          *pBuf++ |= mask;
 23f29de:	f811 0b01 	ldrb.w	r0, [r1], #1
 23f29e2:	4310      	orrs	r0, r2
 23f29e4:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
 23f29e8:	e7f7      	b.n	23f29da <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x7a>
}
 23f29ea:	bd70      	pop	{r4, r5, r6, pc}

023f29ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
                                             int16_t __h, uint16_t color) {
 23f29ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
 23f29ee:	2900      	cmp	r1, #0
                                             int16_t __h, uint16_t color) {
 23f29f0:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
 23f29f4:	db77      	blt.n	23f2ae6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
 23f29f6:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 23f29fa:	42b1      	cmp	r1, r6
 23f29fc:	da73      	bge.n	23f2ae6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
    if (__y < 0) {               // Clip top
 23f29fe:	2a00      	cmp	r2, #0
      __h += __y;
 23f2a00:	bfbe      	ittt	lt
 23f2a02:	189b      	addlt	r3, r3, r2
      __y = 0;
 23f2a04:	2200      	movlt	r2, #0
      __h += __y;
 23f2a06:	b21b      	sxthlt	r3, r3
    if ((__y + __h) > HEIGHT) { // Clip bottom
 23f2a08:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 23f2a0c:	18d7      	adds	r7, r2, r3
 23f2a0e:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
 23f2a10:	bfc4      	itt	gt
 23f2a12:	1aa3      	subgt	r3, r4, r2
 23f2a14:	b21b      	sxthgt	r3, r3
    if (__h > 0) { // Proceed only if height is now positive
 23f2a16:	2b00      	cmp	r3, #0
 23f2a18:	dd65      	ble.n	23f2ae6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
 23f2a1a:	f3c2 04c4 	ubfx	r4, r2, #3, #5
 23f2a1e:	fb16 1604 	smlabb	r6, r6, r4, r1
 23f2a22:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
      if (mod) {
 23f2a24:	f012 0207 	ands.w	r2, r2, #7
      uint8_t y = __y, h = __h;
 23f2a28:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
 23f2a2a:	eb07 0406 	add.w	r4, r7, r6
      if (mod) {
 23f2a2e:	d024      	beq.n	23f2a7a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
 23f2a30:	f1c2 0208 	rsb	r2, r2, #8
 23f2a34:	b2d2      	uxtb	r2, r2
        if (h < mod)
 23f2a36:	4293      	cmp	r3, r2
          mask &= (0XFF >> (mod - h));
 23f2a38:	bf38      	it	cc
 23f2a3a:	f04f 0cff 	movcc.w	ip, #255	; 0xff
        uint8_t mask = pgm_read_byte(&premask[mod]);
 23f2a3e:	492c      	ldr	r1, [pc, #176]	; (23f2af0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          mask &= (0XFF >> (mod - h));
 23f2a40:	bf38      	it	cc
 23f2a42:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
 23f2a46:	5c89      	ldrb	r1, [r1, r2]
          mask &= (0XFF >> (mod - h));
 23f2a48:	bf3c      	itt	cc
 23f2a4a:	fa4c fc0e 	asrcc.w	ip, ip, lr
 23f2a4e:	ea0c 0101 	andcc.w	r1, ip, r1
        switch (color) {
 23f2a52:	2d01      	cmp	r5, #1
 23f2a54:	d007      	beq.n	23f2a66 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
 23f2a56:	2d02      	cmp	r5, #2
 23f2a58:	d02e      	beq.n	23f2ab8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
 23f2a5a:	b94d      	cbnz	r5, 23f2a70 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
          *pBuf &= ~mask;
 23f2a5c:	f817 c006 	ldrb.w	ip, [r7, r6]
 23f2a60:	ea2c 0101 	bic.w	r1, ip, r1
 23f2a64:	e003      	b.n	23f2a6e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
          *pBuf |= mask;
 23f2a66:	f817 c006 	ldrb.w	ip, [r7, r6]
 23f2a6a:	ea41 010c 	orr.w	r1, r1, ip
          *pBuf ^= mask;
 23f2a6e:	55b9      	strb	r1, [r7, r6]
      if (h >= mod) { // More to go?
 23f2a70:	4293      	cmp	r3, r2
 23f2a72:	d338      	bcc.n	23f2ae6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
        pBuf += WIDTH;
 23f2a74:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 23f2a78:	440c      	add	r4, r1
        h -= mod;
 23f2a7a:	1a9a      	subs	r2, r3, r2
 23f2a7c:	b2d2      	uxtb	r2, r2
        if (h >= 8) {
 23f2a7e:	2a07      	cmp	r2, #7
 23f2a80:	d90e      	bls.n	23f2aa0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if (color == SSD1306_INVERSE) {
 23f2a82:	2d02      	cmp	r5, #2
 23f2a84:	d11d      	bne.n	23f2ac2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
 23f2a86:	4613      	mov	r3, r2
              *pBuf ^= 0xFF; // Invert byte
 23f2a88:	7821      	ldrb	r1, [r4, #0]
              h -= 8;        // Subtract 8 rows from height
 23f2a8a:	3b08      	subs	r3, #8
              *pBuf ^= 0xFF; // Invert byte
 23f2a8c:	43c9      	mvns	r1, r1
 23f2a8e:	7021      	strb	r1, [r4, #0]
              pBuf += WIDTH; // Advance pointer 8 rows
 23f2a90:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h -= 8;        // Subtract 8 rows from height
 23f2a94:	b2db      	uxtb	r3, r3
            } while (h >= 8);
 23f2a96:	2b07      	cmp	r3, #7
              pBuf += WIDTH; // Advance pointer 8 rows
 23f2a98:	440c      	add	r4, r1
            } while (h >= 8);
 23f2a9a:	d8f5      	bhi.n	23f2a88 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
              h -= 8;        // Subtract 8 rows from height
 23f2a9c:	f002 0207 	and.w	r2, r2, #7
        if (h) { // Do the final partial byte, if necessary
 23f2aa0:	b30a      	cbz	r2, 23f2ae6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
 23f2aa2:	4b14      	ldr	r3, [pc, #80]	; (23f2af4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x108>)
          switch (color) {
 23f2aa4:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
 23f2aa6:	5c9b      	ldrb	r3, [r3, r2]
          switch (color) {
 23f2aa8:	d01a      	beq.n	23f2ae0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf4>
 23f2aaa:	2d02      	cmp	r5, #2
 23f2aac:	d01c      	beq.n	23f2ae8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfc>
 23f2aae:	b9d5      	cbnz	r5, 23f2ae6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
            *pBuf &= ~mask;
 23f2ab0:	7822      	ldrb	r2, [r4, #0]
 23f2ab2:	ea22 0303 	bic.w	r3, r2, r3
 23f2ab6:	e015      	b.n	23f2ae4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          *pBuf ^= mask;
 23f2ab8:	f817 c006 	ldrb.w	ip, [r7, r6]
 23f2abc:	ea81 010c 	eor.w	r1, r1, ip
 23f2ac0:	e7d5      	b.n	23f2a6e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
 23f2ac2:	1e29      	subs	r1, r5, #0
 23f2ac4:	bf18      	it	ne
 23f2ac6:	2101      	movne	r1, #1
 23f2ac8:	4613      	mov	r3, r2
 23f2aca:	4249      	negs	r1, r1
 23f2acc:	b2c9      	uxtb	r1, r1
              *pBuf = val;   // Set byte
 23f2ace:	7021      	strb	r1, [r4, #0]
              h -= 8;        // Subtract 8 rows from height
 23f2ad0:	3b08      	subs	r3, #8
              pBuf += WIDTH; // Advance pointer 8 rows
 23f2ad2:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h -= 8;        // Subtract 8 rows from height
 23f2ad6:	b2db      	uxtb	r3, r3
            } while (h >= 8);
 23f2ad8:	2b07      	cmp	r3, #7
              pBuf += WIDTH; // Advance pointer 8 rows
 23f2ada:	4434      	add	r4, r6
            } while (h >= 8);
 23f2adc:	d8f7      	bhi.n	23f2ace <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe2>
 23f2ade:	e7dd      	b.n	23f2a9c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
            *pBuf |= mask;
 23f2ae0:	7822      	ldrb	r2, [r4, #0]
 23f2ae2:	4313      	orrs	r3, r2
            *pBuf ^= mask;
 23f2ae4:	7023      	strb	r3, [r4, #0]
}
 23f2ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *pBuf ^= mask;
 23f2ae8:	7822      	ldrb	r2, [r4, #0]
 23f2aea:	4053      	eors	r3, r2
 23f2aec:	e7fa      	b.n	23f2ae4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
 23f2aee:	bf00      	nop
 23f2af0:	023ff718 	.word	0x023ff718
 23f2af4:	023ff720 	.word	0x023ff720

023f2af8 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
                                     uint16_t color) {
 23f2af8:	b470      	push	{r4, r5, r6}
 23f2afa:	4614      	mov	r4, r2
  switch (rotation) {
 23f2afc:	7e82      	ldrb	r2, [r0, #26]
                                     uint16_t color) {
 23f2afe:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch (rotation) {
 23f2b02:	2a02      	cmp	r2, #2
 23f2b04:	d00d      	beq.n	23f2b22 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
 23f2b06:	2a03      	cmp	r2, #3
 23f2b08:	d018      	beq.n	23f2b3c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
 23f2b0a:	2a01      	cmp	r2, #1
 23f2b0c:	d111      	bne.n	23f2b32 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
 23f2b0e:	43e4      	mvns	r4, r4
 23f2b10:	8902      	ldrh	r2, [r0, #8]
 23f2b12:	4414      	add	r4, r2
 23f2b14:	b224      	sxth	r4, r4
    drawFastVLineInternal(x, y, w, color);
 23f2b16:	460a      	mov	r2, r1
 23f2b18:	9603      	str	r6, [sp, #12]
 23f2b1a:	4621      	mov	r1, r4
}
 23f2b1c:	bc70      	pop	{r4, r5, r6}
    drawFastVLineInternal(x, y, w, color);
 23f2b1e:	f7ff bf65 	b.w	23f29ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
 23f2b22:	43e4      	mvns	r4, r4
 23f2b24:	8942      	ldrh	r2, [r0, #10]
    x -= (w - 1);
 23f2b26:	8905      	ldrh	r5, [r0, #8]
 23f2b28:	4419      	add	r1, r3
    y = HEIGHT - y - 1;
 23f2b2a:	4414      	add	r4, r2
    x -= (w - 1);
 23f2b2c:	1a69      	subs	r1, r5, r1
    y = HEIGHT - y - 1;
 23f2b2e:	b224      	sxth	r4, r4
    x -= (w - 1);
 23f2b30:	b209      	sxth	r1, r1
    drawFastHLineInternal(x, y, w, color);
 23f2b32:	4622      	mov	r2, r4
 23f2b34:	9603      	str	r6, [sp, #12]
}
 23f2b36:	bc70      	pop	{r4, r5, r6}
    drawFastHLineInternal(x, y, w, color);
 23f2b38:	f7ff bf12 	b.w	23f2960 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w - 1);
 23f2b3c:	8945      	ldrh	r5, [r0, #10]
 23f2b3e:	4419      	add	r1, r3
 23f2b40:	1a69      	subs	r1, r5, r1
 23f2b42:	b209      	sxth	r1, r1
    break;
 23f2b44:	e7e7      	b.n	23f2b16 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

023f2b46 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
                                     uint16_t color) {
 23f2b46:	b430      	push	{r4, r5}
 23f2b48:	4614      	mov	r4, r2
  switch (rotation) {
 23f2b4a:	7e82      	ldrb	r2, [r0, #26]
                                     uint16_t color) {
 23f2b4c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch (rotation) {
 23f2b50:	2a02      	cmp	r2, #2
 23f2b52:	d00d      	beq.n	23f2b70 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
 23f2b54:	2a03      	cmp	r2, #3
 23f2b56:	d018      	beq.n	23f2b8a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
 23f2b58:	2a01      	cmp	r2, #1
 23f2b5a:	d111      	bne.n	23f2b80 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h - 1);
 23f2b5c:	18e2      	adds	r2, r4, r3
 23f2b5e:	8904      	ldrh	r4, [r0, #8]
 23f2b60:	1aa4      	subs	r4, r4, r2
 23f2b62:	b224      	sxth	r4, r4
    drawFastHLineInternal(x, y, h, color);
 23f2b64:	460a      	mov	r2, r1
 23f2b66:	9502      	str	r5, [sp, #8]
 23f2b68:	4621      	mov	r1, r4
}
 23f2b6a:	bc30      	pop	{r4, r5}
    drawFastHLineInternal(x, y, h, color);
 23f2b6c:	f7ff bef8 	b.w	23f2960 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH - x - 1;
 23f2b70:	43c9      	mvns	r1, r1
 23f2b72:	8902      	ldrh	r2, [r0, #8]
 23f2b74:	4411      	add	r1, r2
    y -= (h - 1);
 23f2b76:	18e2      	adds	r2, r4, r3
 23f2b78:	8944      	ldrh	r4, [r0, #10]
    x = WIDTH - x - 1;
 23f2b7a:	b209      	sxth	r1, r1
    y -= (h - 1);
 23f2b7c:	1aa4      	subs	r4, r4, r2
 23f2b7e:	b224      	sxth	r4, r4
    drawFastVLineInternal(x, y, h, color);
 23f2b80:	4622      	mov	r2, r4
 23f2b82:	9502      	str	r5, [sp, #8]
}
 23f2b84:	bc30      	pop	{r4, r5}
    drawFastVLineInternal(x, y, h, color);
 23f2b86:	f7ff bf31 	b.w	23f29ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
 23f2b8a:	43c9      	mvns	r1, r1
 23f2b8c:	8942      	ldrh	r2, [r0, #10]
 23f2b8e:	4411      	add	r1, r2
 23f2b90:	b209      	sxth	r1, r1
    break;
 23f2b92:	e7e7      	b.n	23f2b64 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

023f2b94 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
 23f2b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f2b96:	4604      	mov	r4, r0
  TRANSACTION_START
 23f2b98:	6a80      	ldr	r0, [r0, #40]	; 0x28
 23f2b9a:	2800      	cmp	r0, #0
 23f2b9c:	d042      	beq.n	23f2c24 <_ZN16Adafruit_SSD13067displayEv+0x90>
 23f2b9e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 23f2ba0:	f006 f95c 	bl	23f8e5c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
 23f2ba4:	2205      	movs	r2, #5
 23f2ba6:	4620      	mov	r0, r4
 23f2ba8:	4947      	ldr	r1, [pc, #284]	; (23f2cc8 <_ZN16Adafruit_SSD13067displayEv+0x134>)
 23f2baa:	f7ff fcc9 	bl	23f2540 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
 23f2bae:	8921      	ldrh	r1, [r4, #8]
 23f2bb0:	4620      	mov	r0, r4
 23f2bb2:	3901      	subs	r1, #1
 23f2bb4:	b2c9      	uxtb	r1, r1
 23f2bb6:	f7ff fc55 	bl	23f2464 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  if (wire) { // I2C
 23f2bba:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
 23f2bbe:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 23f2bc2:	1dde      	adds	r6, r3, #7
 23f2bc4:	bf48      	it	mi
 23f2bc6:	f103 060e 	addmi.w	r6, r3, #14
 23f2bca:	8923      	ldrh	r3, [r4, #8]
 23f2bcc:	10f6      	asrs	r6, r6, #3
 23f2bce:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr = buffer;
 23f2bd2:	fa15 f686 	uxtah	r6, r5, r6
  if (wire) { // I2C
 23f2bd6:	2800      	cmp	r0, #0
 23f2bd8:	d03b      	beq.n	23f2c52 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
 23f2bda:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 23f2bde:	f006 f96f 	bl	23f8ec0 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
 23f2be2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f2be4:	2140      	movs	r1, #64	; 0x40
 23f2be6:	6803      	ldr	r3, [r0, #0]
    uint16_t bytesOut = 1;
 23f2be8:	2701      	movs	r7, #1
    WIRE_WRITE((uint8_t)0x40);
 23f2bea:	689b      	ldr	r3, [r3, #8]
 23f2bec:	4798      	blx	r3
    while (count--) {
 23f2bee:	42ae      	cmp	r6, r5
        wire->endTransmission();
 23f2bf0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while (count--) {
 23f2bf2:	d024      	beq.n	23f2c3e <_ZN16Adafruit_SSD13067displayEv+0xaa>
      if (bytesOut >= WIRE_MAX) {
 23f2bf4:	2f1f      	cmp	r7, #31
 23f2bf6:	d90c      	bls.n	23f2c12 <_ZN16Adafruit_SSD13067displayEv+0x7e>
        wire->endTransmission();
 23f2bf8:	f006 f969 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
 23f2bfc:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 23f2c00:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f2c02:	f006 f95d 	bl	23f8ec0 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
 23f2c06:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f2c08:	2140      	movs	r1, #64	; 0x40
 23f2c0a:	6803      	ldr	r3, [r0, #0]
        bytesOut = 1;
 23f2c0c:	2701      	movs	r7, #1
        WIRE_WRITE((uint8_t)0x40);
 23f2c0e:	689b      	ldr	r3, [r3, #8]
 23f2c10:	4798      	blx	r3
      WIRE_WRITE(*ptr++);
 23f2c12:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f2c14:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f2c18:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
 23f2c1a:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
 23f2c1c:	689b      	ldr	r3, [r3, #8]
 23f2c1e:	4798      	blx	r3
      bytesOut++;
 23f2c20:	b2bf      	uxth	r7, r7
    while (count--) {
 23f2c22:	e7e4      	b.n	23f2bee <_ZN16Adafruit_SSD13067displayEv+0x5a>
  TRANSACTION_START
 23f2c24:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f2c26:	b118      	cbz	r0, 23f2c30 <_ZN16Adafruit_SSD13067displayEv+0x9c>
 23f2c28:	f104 0164 	add.w	r1, r4, #100	; 0x64
 23f2c2c:	f006 fe2e 	bl	23f988c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
 23f2c30:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f2c32:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f2c34:	6813      	ldr	r3, [r2, #0]
 23f2c36:	ea23 0301 	bic.w	r3, r3, r1
 23f2c3a:	6013      	str	r3, [r2, #0]
 23f2c3c:	e7b2      	b.n	23f2ba4 <_ZN16Adafruit_SSD13067displayEv+0x10>
    wire->endTransmission();
 23f2c3e:	f006 f946 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
 23f2c42:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f2c44:	2800      	cmp	r0, #0
 23f2c46:	d032      	beq.n	23f2cae <_ZN16Adafruit_SSD13067displayEv+0x11a>
 23f2c48:	6de1      	ldr	r1, [r4, #92]	; 0x5c
}
 23f2c4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 23f2c4e:	f006 b905 	b.w	23f8e5c <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
 23f2c52:	6c22      	ldr	r2, [r4, #64]	; 0x40
 23f2c54:	6d21      	ldr	r1, [r4, #80]	; 0x50
 23f2c56:	6813      	ldr	r3, [r2, #0]
 23f2c58:	430b      	orrs	r3, r1
 23f2c5a:	6013      	str	r3, [r2, #0]
    while (count--)
 23f2c5c:	42b5      	cmp	r5, r6
 23f2c5e:	d0f0      	beq.n	23f2c42 <_ZN16Adafruit_SSD13067displayEv+0xae>
  if (spi) {
 23f2c60:	6a60      	ldr	r0, [r4, #36]	; 0x24
      SPIwrite(*ptr++);
 23f2c62:	f815 1b01 	ldrb.w	r1, [r5], #1
  if (spi) {
 23f2c66:	b110      	cbz	r0, 23f2c6e <_ZN16Adafruit_SSD13067displayEv+0xda>
    (void)spi->transfer(d);
 23f2c68:	f006 fe7e 	bl	23f9968 <_ZN8SPIClass8transferEh>
 23f2c6c:	e7f6      	b.n	23f2c5c <_ZN16Adafruit_SSD13067displayEv+0xc8>
 23f2c6e:	f04f 0e08 	mov.w	lr, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f2c72:	2080      	movs	r0, #128	; 0x80
        *mosiPort |= mosiPinMask;
 23f2c74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23f2c76:	f8d4 c048 	ldr.w	ip, [r4, #72]	; 0x48
 23f2c7a:	681f      	ldr	r7, [r3, #0]
      if (d & bit)
 23f2c7c:	4201      	tst	r1, r0
        *mosiPort |= mosiPinMask;
 23f2c7e:	bf14      	ite	ne
 23f2c80:	ea47 070c 	orrne.w	r7, r7, ip
        *mosiPort &= ~mosiPinMask;
 23f2c84:	ea27 070c 	biceq.w	r7, r7, ip
 23f2c88:	601f      	str	r7, [r3, #0]
      *clkPort |= clkPinMask;  // Clock high
 23f2c8a:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 23f2c8c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 23f2c8e:	683b      	ldr	r3, [r7, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f2c90:	f1be 0e01 	subs.w	lr, lr, #1
      *clkPort |= clkPinMask;  // Clock high
 23f2c94:	ea43 0302 	orr.w	r3, r3, r2
 23f2c98:	603b      	str	r3, [r7, #0]
      *clkPort &= ~clkPinMask; // Clock low
 23f2c9a:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 23f2c9c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 23f2c9e:	683b      	ldr	r3, [r7, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f2ca0:	ea4f 0050 	mov.w	r0, r0, lsr #1
      *clkPort &= ~clkPinMask; // Clock low
 23f2ca4:	ea23 0302 	bic.w	r3, r3, r2
 23f2ca8:	603b      	str	r3, [r7, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f2caa:	d1e3      	bne.n	23f2c74 <_ZN16Adafruit_SSD13067displayEv+0xe0>
 23f2cac:	e7d6      	b.n	23f2c5c <_ZN16Adafruit_SSD13067displayEv+0xc8>
  TRANSACTION_END
 23f2cae:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f2cb0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f2cb2:	6813      	ldr	r3, [r2, #0]
 23f2cb4:	430b      	orrs	r3, r1
 23f2cb6:	6013      	str	r3, [r2, #0]
 23f2cb8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f2cba:	b118      	cbz	r0, 23f2cc4 <_ZN16Adafruit_SSD13067displayEv+0x130>
}
 23f2cbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  TRANSACTION_END
 23f2cc0:	f006 bdca 	b.w	23f9858 <_ZN8SPIClass14endTransactionEv>
}
 23f2cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f2cc6:	bf00      	nop
 23f2cc8:	023ff73a 	.word	0x023ff73a

023f2ccc <_ZN17Adafruit_VEML7700C1Ev>:
#include "Adafruit_VEML7700.h"

/*!
 *    @brief  Instantiates a new VEML7700 class
 */
Adafruit_VEML7700::Adafruit_VEML7700(void) {}
 23f2ccc:	4a03      	ldr	r2, [pc, #12]	; (23f2cdc <_ZN17Adafruit_VEML7700C1Ev+0x10>)
 23f2cce:	6002      	str	r2, [r0, #0]
 23f2cd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 23f2cd4:	6042      	str	r2, [r0, #4]
 23f2cd6:	4a02      	ldr	r2, [pc, #8]	; (23f2ce0 <_ZN17Adafruit_VEML7700C1Ev+0x14>)
 23f2cd8:	6082      	str	r2, [r0, #8]
 23f2cda:	4770      	bx	lr
 23f2cdc:	3b6bedfa 	.word	0x3b6bedfa
 23f2ce0:	44480000 	.word	0x44480000

023f2ce4 <_ZN17Adafruit_VEML77006enableEb>:

/*!
 *    @brief Enable or disable the sensor
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::enable(bool enable) {
 23f2ce4:	b510      	push	{r4, lr}
 23f2ce6:	460c      	mov	r4, r1
  ALS_Shutdown->write(!enable);
 23f2ce8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 23f2cea:	f081 0101 	eor.w	r1, r1, #1
 23f2cee:	f7fd ff0f 	bl	23f0b10 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  //   When activating the sensor, set bit 0 of the command register
  //   to “0” with a wait time of 2.5 ms before the first measurement
  //   is needed, allowing for the correct start of the signal
  //   processor and oscillator.
  //   '''
  if (enable)
 23f2cf2:	b124      	cbz	r4, 23f2cfe <_ZN17Adafruit_VEML77006enableEb+0x1a>
    delay(5); // doubling 2.5ms spec to be sure
}
 23f2cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(5); // doubling 2.5ms spec to be sure
 23f2cf8:	2005      	movs	r0, #5
 23f2cfa:	f005 bae3 	b.w	23f82c4 <delay>
}
 23f2cfe:	bd10      	pop	{r4, pc}

023f2d00 <_ZN17Adafruit_VEML770015interruptEnableEb>:
/*!
 *    @brief Enable or disable the interrupt
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::interruptEnable(bool enable) {
  ALS_Interrupt_Enable->write(enable);
 23f2d00:	6b00      	ldr	r0, [r0, #48]	; 0x30
 23f2d02:	f7fd bf05 	b.w	23f0b10 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

023f2d06 <_ZN17Adafruit_VEML770014setPersistenceEh>:
 *    @brief Set the ALS IRQ persistence setting
 *    @param pers Persistence constant, can be VEML7700_PERS_1, VEML7700_PERS_2,
 *    VEML7700_PERS_4 or VEML7700_PERS_8
 */
void Adafruit_VEML7700::setPersistence(uint8_t pers) {
  ALS_Persistence->write(pers);
 23f2d06:	6b40      	ldr	r0, [r0, #52]	; 0x34
 23f2d08:	f7fd bf02 	b.w	23f0b10 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

023f2d0c <_ZN17Adafruit_VEML770018getIntegrationTimeEv>:
/*!
 *    @brief Get ALS integration time setting
 *    @returns IT index, can be VEML7700_IT_100MS, VEML7700_IT_200MS,
 * VEML7700_IT_400MS, VEML7700_IT_800MS, VEML7700_IT_50MS or VEML7700_IT_25MS
 */
uint8_t Adafruit_VEML7700::getIntegrationTime(void) {
 23f2d0c:	b508      	push	{r3, lr}
  return ALS_Integration_Time->read();
 23f2d0e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 23f2d10:	f7fd fef1 	bl	23f0af6 <_ZN27Adafruit_BusIO_RegisterBits4readEv>
}
 23f2d14:	b2c0      	uxtb	r0, r0
 23f2d16:	bd08      	pop	{r3, pc}

023f2d18 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv>:

/*!
 *    @brief Get ALS integration time value
 *    @returns ALS integration time in milliseconds
 */
int Adafruit_VEML7700::getIntegrationTimeValue(void) {
 23f2d18:	b508      	push	{r3, lr}
  switch (getIntegrationTime()) {
 23f2d1a:	f7ff fff7 	bl	23f2d0c <_ZN17Adafruit_VEML770018getIntegrationTimeEv>
 23f2d1e:	280c      	cmp	r0, #12
 23f2d20:	bf96      	itet	ls
 23f2d22:	4b03      	ldrls	r3, [pc, #12]	; (23f2d30 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv+0x18>)
 23f2d24:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 23f2d28:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
  case VEML7700_IT_800MS:
    return 800;
  default:
    return -1;
  }
}
 23f2d2c:	bd08      	pop	{r3, pc}
 23f2d2e:	bf00      	nop
 23f2d30:	023ff740 	.word	0x023ff740

023f2d34 <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>:
void Adafruit_VEML7700::setIntegrationTime(uint8_t it, bool wait) {
 23f2d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f2d36:	4605      	mov	r5, r0
  int flushDelay = wait ? getIntegrationTimeValue() : 0;
 23f2d38:	b17a      	cbz	r2, 23f2d5a <_ZN17Adafruit_VEML770018setIntegrationTimeEhb+0x26>
 23f2d3a:	9101      	str	r1, [sp, #4]
 23f2d3c:	f7ff ffec 	bl	23f2d18 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv>
 23f2d40:	4604      	mov	r4, r0
 23f2d42:	9901      	ldr	r1, [sp, #4]
  ALS_Integration_Time->write(it);
 23f2d44:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 23f2d46:	f7fd fee3 	bl	23f0b10 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  delay(flushDelay);
 23f2d4a:	4620      	mov	r0, r4
 23f2d4c:	f005 faba 	bl	23f82c4 <delay>
 23f2d50:	f004 fc36 	bl	23f75c0 <HAL_Timer_Get_Milli_Seconds>
  lastRead = millis();
 23f2d54:	60e8      	str	r0, [r5, #12]
}
 23f2d56:	b003      	add	sp, #12
 23f2d58:	bd30      	pop	{r4, r5, pc}
  int flushDelay = wait ? getIntegrationTimeValue() : 0;
 23f2d5a:	4614      	mov	r4, r2
 23f2d5c:	e7f2      	b.n	23f2d44 <_ZN17Adafruit_VEML770018setIntegrationTimeEhb+0x10>

023f2d5e <_ZN17Adafruit_VEML77007setGainEh>:
/*!
 *    @brief Set ALS gain
 *    @param gain Can be VEML7700_GAIN_1, VEML7700_GAIN_2, VEML7700_GAIN_1_8 or
 * VEML7700_GAIN_1_4
 */
void Adafruit_VEML7700::setGain(uint8_t gain) {
 23f2d5e:	b510      	push	{r4, lr}
 23f2d60:	4604      	mov	r4, r0
  ALS_Gain->write(gain);
 23f2d62:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 23f2d64:	f7fd fed4 	bl	23f0b10 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
 23f2d68:	f004 fc2a 	bl	23f75c0 <HAL_Timer_Get_Milli_Seconds>
  lastRead = millis(); // reset
 23f2d6c:	60e0      	str	r0, [r4, #12]
}
 23f2d6e:	bd10      	pop	{r4, pc}

023f2d70 <_ZN17Adafruit_VEML77007getGainEv>:
/*!
 *    @brief Get ALS gain setting
 *    @returns Gain index, can be VEML7700_GAIN_1, VEML7700_GAIN_2,
 * VEML7700_GAIN_1_8 or VEML7700_GAIN_1_4
 */
uint8_t Adafruit_VEML7700::getGain(void) { return ALS_Gain->read(); }
 23f2d70:	b508      	push	{r3, lr}
 23f2d72:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 23f2d74:	f7fd febf 	bl	23f0af6 <_ZN27Adafruit_BusIO_RegisterBits4readEv>
 23f2d78:	b2c0      	uxtb	r0, r0
 23f2d7a:	bd08      	pop	{r3, pc}

023f2d7c <_ZN17Adafruit_VEML770012getGainValueEv>:

/*!
 *    @brief Get ALS gain value
 *    @returns Actual gain value as float
 */
float Adafruit_VEML7700::getGainValue(void) {
 23f2d7c:	b508      	push	{r3, lr}
  switch (getGain()) {
 23f2d7e:	f7ff fff7 	bl	23f2d70 <_ZN17Adafruit_VEML77007getGainEv>
 23f2d82:	2803      	cmp	r0, #3
 23f2d84:	bf97      	itett	ls
 23f2d86:	4b04      	ldrls	r3, [pc, #16]	; (23f2d98 <_ZN17Adafruit_VEML770012getGainValueEv+0x1c>)
 23f2d88:	eebf 0a00 	vmovhi.f32	s0, #240	; 0xbf800000 -1.0
 23f2d8c:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
 23f2d90:	ed90 0a00 	vldrls	s0, [r0]
  case VEML7700_GAIN_2:
    return 2;
  default:
    return -1;
  }
}
 23f2d94:	bd08      	pop	{r3, pc}
 23f2d96:	bf00      	nop
 23f2d98:	023ff75c 	.word	0x023ff75c

023f2d9c <_ZN17Adafruit_VEML770015powerSaveEnableEb>:
/*!
 *    @brief Enable power save mode
 *    @param enable True if power save should be enabled
 */
void Adafruit_VEML7700::powerSaveEnable(bool enable) {
  PowerSave_Enable->write(enable);
 23f2d9c:	6c00      	ldr	r0, [r0, #64]	; 0x40
 23f2d9e:	f7fd beb7 	b.w	23f0b10 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

023f2da2 <_ZN17Adafruit_VEML77005beginEP7TwoWire>:
bool Adafruit_VEML7700::begin(TwoWire *theWire) {
 23f2da2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23f2da4:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
 23f2da6:	2010      	movs	r0, #16
bool Adafruit_VEML7700::begin(TwoWire *theWire) {
 23f2da8:	9103      	str	r1, [sp, #12]
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
 23f2daa:	f7f3 f94a 	bl	23e6042 <_Znwj>
 23f2dae:	4605      	mov	r5, r0
 23f2db0:	b118      	cbz	r0, 23f2dba <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x18>
 23f2db2:	2110      	movs	r1, #16
 23f2db4:	9a03      	ldr	r2, [sp, #12]
 23f2db6:	f7fd fec4 	bl	23f0b42 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin()) {
 23f2dba:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
 23f2dbc:	64a5      	str	r5, [r4, #72]	; 0x48
  if (!i2c_dev->begin()) {
 23f2dbe:	2101      	movs	r1, #1
 23f2dc0:	f7fd fedb 	bl	23f0b7a <_ZN18Adafruit_I2CDevice5beginEb>
 23f2dc4:	4605      	mov	r5, r0
 23f2dc6:	2800      	cmp	r0, #0
 23f2dc8:	f000 80d6 	beq.w	23f2f78 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x1d6>
      new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_CONFIG, 2, LSBFIRST);
 23f2dcc:	2018      	movs	r0, #24
 23f2dce:	f7f3 f938 	bl	23e6042 <_Znwj>
 23f2dd2:	4606      	mov	r6, r0
 23f2dd4:	b138      	cbz	r0, 23f2de6 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x44>
 23f2dd6:	2301      	movs	r3, #1
 23f2dd8:	2200      	movs	r2, #0
 23f2dda:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f2ddc:	e9cd 2300 	strd	r2, r3, [sp]
 23f2de0:	2302      	movs	r3, #2
 23f2de2:	f7fd fd99 	bl	23f0918 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  ALS_Config =
 23f2de6:	6126      	str	r6, [r4, #16]
      i2c_dev, VEML7700_ALS_THREHOLD_HIGH, 2, LSBFIRST);
 23f2de8:	2018      	movs	r0, #24
 23f2dea:	f7f3 f92a 	bl	23e6042 <_Znwj>
 23f2dee:	4606      	mov	r6, r0
 23f2df0:	b138      	cbz	r0, 23f2e02 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x60>
 23f2df2:	2300      	movs	r3, #0
 23f2df4:	2201      	movs	r2, #1
 23f2df6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f2df8:	e9cd 3200 	strd	r3, r2, [sp]
 23f2dfc:	2302      	movs	r3, #2
 23f2dfe:	f7fd fd8b 	bl	23f0918 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  ALS_HighThreshold = new Adafruit_I2CRegister(
 23f2e02:	61e6      	str	r6, [r4, #28]
      new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_THREHOLD_LOW, 2, LSBFIRST);
 23f2e04:	2018      	movs	r0, #24
 23f2e06:	f7f3 f91c 	bl	23e6042 <_Znwj>
 23f2e0a:	4606      	mov	r6, r0
 23f2e0c:	b140      	cbz	r0, 23f2e20 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x7e>
 23f2e0e:	2300      	movs	r3, #0
 23f2e10:	2201      	movs	r2, #1
 23f2e12:	e9cd 3200 	strd	r3, r2, [sp]
 23f2e16:	2302      	movs	r3, #2
 23f2e18:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f2e1a:	461a      	mov	r2, r3
 23f2e1c:	f7fd fd7c 	bl	23f0918 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  ALS_LowThreshold =
 23f2e20:	6226      	str	r6, [r4, #32]
      new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_POWER_SAVE, 2, LSBFIRST);
 23f2e22:	2018      	movs	r0, #24
 23f2e24:	f7f3 f90d 	bl	23e6042 <_Znwj>
 23f2e28:	4606      	mov	r6, r0
 23f2e2a:	b148      	cbz	r0, 23f2e40 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x9e>
 23f2e2c:	2300      	movs	r3, #0
 23f2e2e:	f04f 0e01 	mov.w	lr, #1
 23f2e32:	2203      	movs	r2, #3
 23f2e34:	e9cd 3e00 	strd	r3, lr, [sp]
 23f2e38:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f2e3a:	2302      	movs	r3, #2
 23f2e3c:	f7fd fd6c 	bl	23f0918 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Power_Saving =
 23f2e40:	6266      	str	r6, [r4, #36]	; 0x24
  ALS_Data = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_DATA, 2, LSBFIRST);
 23f2e42:	2018      	movs	r0, #24
 23f2e44:	f7f3 f8fd 	bl	23e6042 <_Znwj>
 23f2e48:	4606      	mov	r6, r0
 23f2e4a:	b148      	cbz	r0, 23f2e60 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xbe>
 23f2e4c:	2300      	movs	r3, #0
 23f2e4e:	f04f 0c01 	mov.w	ip, #1
 23f2e52:	2204      	movs	r2, #4
 23f2e54:	e9cd 3c00 	strd	r3, ip, [sp]
 23f2e58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f2e5a:	2302      	movs	r3, #2
 23f2e5c:	f7fd fd5c 	bl	23f0918 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
 23f2e60:	6166      	str	r6, [r4, #20]
      new Adafruit_I2CRegister(i2c_dev, VEML7700_WHITE_DATA, 2, LSBFIRST);
 23f2e62:	2018      	movs	r0, #24
 23f2e64:	f7f3 f8ed 	bl	23e6042 <_Znwj>
 23f2e68:	4606      	mov	r6, r0
 23f2e6a:	b140      	cbz	r0, 23f2e7e <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xdc>
 23f2e6c:	2300      	movs	r3, #0
 23f2e6e:	2101      	movs	r1, #1
 23f2e70:	2205      	movs	r2, #5
 23f2e72:	e9cd 3100 	strd	r3, r1, [sp]
 23f2e76:	2302      	movs	r3, #2
 23f2e78:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f2e7a:	f7fd fd4d 	bl	23f0918 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  White_Data =
 23f2e7e:	61a6      	str	r6, [r4, #24]
      new Adafruit_I2CRegister(i2c_dev, VEML7700_INTERRUPTSTATUS, 2, LSBFIRST);
 23f2e80:	2018      	movs	r0, #24
 23f2e82:	f7f3 f8de 	bl	23e6042 <_Znwj>
 23f2e86:	4606      	mov	r6, r0
 23f2e88:	b140      	cbz	r0, 23f2e9c <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xfa>
 23f2e8a:	2300      	movs	r3, #0
 23f2e8c:	2201      	movs	r2, #1
 23f2e8e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f2e90:	e9cd 3200 	strd	r3, r2, [sp]
 23f2e94:	2302      	movs	r3, #2
 23f2e96:	2206      	movs	r2, #6
 23f2e98:	f7fd fd3e 	bl	23f0918 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Interrupt_Status =
 23f2e9c:	62a6      	str	r6, [r4, #40]	; 0x28
      new Adafruit_I2CRegisterBits(ALS_Config, 1, 0); // # bits, bit_shift
 23f2e9e:	2008      	movs	r0, #8
 23f2ea0:	f7f3 f8cf 	bl	23e6042 <_Znwj>
 23f2ea4:	4606      	mov	r6, r0
 23f2ea6:	b120      	cbz	r0, 23f2eb2 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x110>
 23f2ea8:	2300      	movs	r3, #0
 23f2eaa:	2201      	movs	r2, #1
 23f2eac:	6921      	ldr	r1, [r4, #16]
 23f2eae:	f7fd fe1d 	bl	23f0aec <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  ALS_Shutdown =
 23f2eb2:	62e6      	str	r6, [r4, #44]	; 0x2c
  ALS_Interrupt_Enable = new Adafruit_I2CRegisterBits(ALS_Config, 1, 1);
 23f2eb4:	2008      	movs	r0, #8
 23f2eb6:	f7f3 f8c4 	bl	23e6042 <_Znwj>
 23f2eba:	4606      	mov	r6, r0
 23f2ebc:	b120      	cbz	r0, 23f2ec8 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x126>
 23f2ebe:	2301      	movs	r3, #1
 23f2ec0:	6921      	ldr	r1, [r4, #16]
 23f2ec2:	461a      	mov	r2, r3
 23f2ec4:	f7fd fe12 	bl	23f0aec <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
 23f2ec8:	6326      	str	r6, [r4, #48]	; 0x30
  ALS_Persistence = new Adafruit_I2CRegisterBits(ALS_Config, 2, 4);
 23f2eca:	2008      	movs	r0, #8
 23f2ecc:	f7f3 f8b9 	bl	23e6042 <_Znwj>
 23f2ed0:	4606      	mov	r6, r0
 23f2ed2:	b120      	cbz	r0, 23f2ede <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x13c>
 23f2ed4:	2304      	movs	r3, #4
 23f2ed6:	2202      	movs	r2, #2
 23f2ed8:	6921      	ldr	r1, [r4, #16]
 23f2eda:	f7fd fe07 	bl	23f0aec <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
 23f2ede:	6366      	str	r6, [r4, #52]	; 0x34
  ALS_Integration_Time = new Adafruit_I2CRegisterBits(ALS_Config, 4, 6);
 23f2ee0:	2008      	movs	r0, #8
 23f2ee2:	f7f3 f8ae 	bl	23e6042 <_Znwj>
 23f2ee6:	4606      	mov	r6, r0
 23f2ee8:	b120      	cbz	r0, 23f2ef4 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x152>
 23f2eea:	2306      	movs	r3, #6
 23f2eec:	2204      	movs	r2, #4
 23f2eee:	6921      	ldr	r1, [r4, #16]
 23f2ef0:	f7fd fdfc 	bl	23f0aec <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
 23f2ef4:	63a6      	str	r6, [r4, #56]	; 0x38
  ALS_Gain = new Adafruit_I2CRegisterBits(ALS_Config, 2, 11);
 23f2ef6:	2008      	movs	r0, #8
 23f2ef8:	f7f3 f8a3 	bl	23e6042 <_Znwj>
 23f2efc:	4606      	mov	r6, r0
 23f2efe:	b120      	cbz	r0, 23f2f0a <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x168>
 23f2f00:	230b      	movs	r3, #11
 23f2f02:	2202      	movs	r2, #2
 23f2f04:	6921      	ldr	r1, [r4, #16]
 23f2f06:	f7fd fdf1 	bl	23f0aec <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
 23f2f0a:	63e6      	str	r6, [r4, #60]	; 0x3c
  PowerSave_Enable = new Adafruit_I2CRegisterBits(Power_Saving, 1, 0);
 23f2f0c:	2008      	movs	r0, #8
 23f2f0e:	f7f3 f898 	bl	23e6042 <_Znwj>
 23f2f12:	4606      	mov	r6, r0
 23f2f14:	b120      	cbz	r0, 23f2f20 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x17e>
 23f2f16:	2300      	movs	r3, #0
 23f2f18:	2201      	movs	r2, #1
 23f2f1a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 23f2f1c:	f7fd fde6 	bl	23f0aec <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
 23f2f20:	6426      	str	r6, [r4, #64]	; 0x40
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
 23f2f22:	2008      	movs	r0, #8
 23f2f24:	f7f3 f88d 	bl	23e6042 <_Znwj>
 23f2f28:	4606      	mov	r6, r0
 23f2f2a:	b120      	cbz	r0, 23f2f36 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x194>
 23f2f2c:	2301      	movs	r3, #1
 23f2f2e:	2202      	movs	r2, #2
 23f2f30:	6a61      	ldr	r1, [r4, #36]	; 0x24
 23f2f32:	f7fd fddb 	bl	23f0aec <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  enable(false);
 23f2f36:	2100      	movs	r1, #0
 23f2f38:	4620      	mov	r0, r4
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
 23f2f3a:	6466      	str	r6, [r4, #68]	; 0x44
  enable(false);
 23f2f3c:	f7ff fed2 	bl	23f2ce4 <_ZN17Adafruit_VEML77006enableEb>
  interruptEnable(false);
 23f2f40:	2100      	movs	r1, #0
 23f2f42:	4620      	mov	r0, r4
 23f2f44:	f7ff fedc 	bl	23f2d00 <_ZN17Adafruit_VEML770015interruptEnableEb>
  setPersistence(VEML7700_PERS_1);
 23f2f48:	2100      	movs	r1, #0
 23f2f4a:	4620      	mov	r0, r4
 23f2f4c:	f7ff fedb 	bl	23f2d06 <_ZN17Adafruit_VEML770014setPersistenceEh>
  setGain(VEML7700_GAIN_1_8);
 23f2f50:	2102      	movs	r1, #2
 23f2f52:	4620      	mov	r0, r4
 23f2f54:	f7ff ff03 	bl	23f2d5e <_ZN17Adafruit_VEML77007setGainEh>
  setIntegrationTime(VEML7700_IT_100MS);
 23f2f58:	2201      	movs	r2, #1
 23f2f5a:	2100      	movs	r1, #0
 23f2f5c:	4620      	mov	r0, r4
 23f2f5e:	f7ff fee9 	bl	23f2d34 <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>
  powerSaveEnable(false);
 23f2f62:	2100      	movs	r1, #0
 23f2f64:	4620      	mov	r0, r4
 23f2f66:	f7ff ff19 	bl	23f2d9c <_ZN17Adafruit_VEML770015powerSaveEnableEb>
  enable(true);
 23f2f6a:	2101      	movs	r1, #1
 23f2f6c:	4620      	mov	r0, r4
 23f2f6e:	f7ff feb9 	bl	23f2ce4 <_ZN17Adafruit_VEML77006enableEb>
 23f2f72:	f004 fb25 	bl	23f75c0 <HAL_Timer_Get_Milli_Seconds>
  lastRead = millis();
 23f2f76:	60e0      	str	r0, [r4, #12]
}
 23f2f78:	4628      	mov	r0, r5
 23f2f7a:	b004      	add	sp, #16
 23f2f7c:	bd70      	pop	{r4, r5, r6, pc}

023f2f7e <_ZN17Adafruit_VEML770013getResolutionEv>:

/*!
 *    @brief Determines resolution for current gain and integration time
 * settings.
 */
float Adafruit_VEML7700::getResolution(void) {
 23f2f7e:	b510      	push	{r4, lr}
 23f2f80:	ed2d 8b04 	vpush	{d8-d9}
 23f2f84:	4604      	mov	r4, r0
  return MAX_RES * (IT_MAX / getIntegrationTimeValue()) *
 23f2f86:	edd0 8a00 	vldr	s17, [r0]
 23f2f8a:	ed90 9a02 	vldr	s18, [r0, #8]
 23f2f8e:	f7ff fec3 	bl	23f2d18 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv>
 23f2f92:	ee07 0a90 	vmov	s15, r0
 23f2f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f2f9a:	ee89 8a27 	vdiv.f32	s16, s18, s15
         (GAIN_MAX / getGainValue());
 23f2f9e:	4620      	mov	r0, r4
  return MAX_RES * (IT_MAX / getIntegrationTimeValue()) *
 23f2fa0:	ee28 8a28 	vmul.f32	s16, s16, s17
         (GAIN_MAX / getGainValue());
 23f2fa4:	edd4 8a01 	vldr	s17, [r4, #4]
 23f2fa8:	f7ff fee8 	bl	23f2d7c <_ZN17Adafruit_VEML770012getGainValueEv>
 23f2fac:	eec8 7a80 	vdiv.f32	s15, s17, s0
}
 23f2fb0:	ee27 0a88 	vmul.f32	s0, s15, s16
 23f2fb4:	ecbd 8b04 	vpop	{d8-d9}
 23f2fb8:	bd10      	pop	{r4, pc}
 23f2fba:	0000      	movs	r0, r0
 23f2fbc:	0000      	movs	r0, r0
	...

023f2fc0 <_ZN17Adafruit_VEML770010computeLuxEtb>:
 *    @brief Copmute lux from ALS reading.
 *    @param rawALS raw ALS register value
 *    @param corrected if true, apply non-linear correction
 *    @return lux value
 */
float Adafruit_VEML7700::computeLux(uint16_t rawALS, bool corrected) {
 23f2fc0:	b538      	push	{r3, r4, r5, lr}
 23f2fc2:	ed2d 8b02 	vpush	{d8}
 23f2fc6:	ee08 1a10 	vmov	s16, r1
 23f2fca:	4614      	mov	r4, r2
  float lux = getResolution() * rawALS;
 23f2fcc:	f7ff ffd7 	bl	23f2f7e <_ZN17Adafruit_VEML770013getResolutionEv>
 23f2fd0:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 23f2fd4:	ee28 0a00 	vmul.f32	s0, s16, s0
  if (corrected)
 23f2fd8:	b34c      	cbz	r4, 23f302e <_ZN17Adafruit_VEML770010computeLuxEtb+0x6e>
    lux = (((6.0135e-13 * lux - 9.3924e-9) * lux + 8.1488e-5) * lux + 1.0023) *
 23f2fda:	ee10 0a10 	vmov	r0, s0
 23f2fde:	f7f2 f973 	bl	23e52c8 <__aeabi_f2d>
 23f2fe2:	a315      	add	r3, pc, #84	; (adr r3, 23f3038 <_ZN17Adafruit_VEML770010computeLuxEtb+0x78>)
 23f2fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f2fe8:	4604      	mov	r4, r0
 23f2fea:	460d      	mov	r5, r1
 23f2fec:	f7f2 f9c4 	bl	23e5378 <__aeabi_dmul>
 23f2ff0:	a313      	add	r3, pc, #76	; (adr r3, 23f3040 <_ZN17Adafruit_VEML770010computeLuxEtb+0x80>)
 23f2ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f2ff6:	f7f2 f807 	bl	23e5008 <__aeabi_dsub>
 23f2ffa:	4622      	mov	r2, r4
 23f2ffc:	462b      	mov	r3, r5
 23f2ffe:	f7f2 f9bb 	bl	23e5378 <__aeabi_dmul>
 23f3002:	a311      	add	r3, pc, #68	; (adr r3, 23f3048 <_ZN17Adafruit_VEML770010computeLuxEtb+0x88>)
 23f3004:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f3008:	f7f2 f800 	bl	23e500c <__adddf3>
 23f300c:	4622      	mov	r2, r4
 23f300e:	462b      	mov	r3, r5
 23f3010:	f7f2 f9b2 	bl	23e5378 <__aeabi_dmul>
 23f3014:	a30e      	add	r3, pc, #56	; (adr r3, 23f3050 <_ZN17Adafruit_VEML770010computeLuxEtb+0x90>)
 23f3016:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f301a:	f7f1 fff7 	bl	23e500c <__adddf3>
 23f301e:	4622      	mov	r2, r4
 23f3020:	462b      	mov	r3, r5
 23f3022:	f7f2 f9a9 	bl	23e5378 <__aeabi_dmul>
 23f3026:	f7f2 fc9f 	bl	23e5968 <__aeabi_d2f>
 23f302a:	ee00 0a10 	vmov	s0, r0
          lux;
  return lux;
}
 23f302e:	ecbd 8b02 	vpop	{d8}
 23f3032:	bd38      	pop	{r3, r4, r5, pc}
 23f3034:	f3af 8000 	nop.w
 23f3038:	b18f283b 	.word	0xb18f283b
 23f303c:	3d65287a 	.word	0x3d65287a
 23f3040:	c91ef46e 	.word	0xc91ef46e
 23f3044:	3e442b86 	.word	0x3e442b86
 23f3048:	2e18cab0 	.word	0x2e18cab0
 23f304c:	3f155c91 	.word	0x3f155c91
 23f3050:	b98c7e28 	.word	0xb98c7e28
 23f3054:	3ff0096b 	.word	0x3ff0096b

023f3058 <_ZN17Adafruit_VEML77008readWaitEv>:

void Adafruit_VEML7700::readWait(void) {
 23f3058:	b538      	push	{r3, r4, r5, lr}
 23f305a:	4605      	mov	r5, r0
  //   at least for the programmed integration time. For example,
  //   for ALS_IT = 100 ms a wait time of ≥ 100 ms is needed.
  //   '''
  // Based on testing, it needs more. So doubling to be sure.

  unsigned long timeToWait = 2 * getIntegrationTimeValue(); // see above
 23f305c:	f7ff fe5c 	bl	23f2d18 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv>
 23f3060:	0044      	lsls	r4, r0, #1
 23f3062:	f004 faad 	bl	23f75c0 <HAL_Timer_Get_Milli_Seconds>
  unsigned long timeWaited = millis() - lastRead;
 23f3066:	68eb      	ldr	r3, [r5, #12]
 23f3068:	1ac2      	subs	r2, r0, r3

  if (timeWaited < timeToWait)
 23f306a:	4294      	cmp	r4, r2
 23f306c:	d905      	bls.n	23f307a <_ZN17Adafruit_VEML77008readWaitEv+0x22>
    delay(timeToWait - timeWaited);
 23f306e:	1a18      	subs	r0, r3, r0
 23f3070:	4420      	add	r0, r4
}
 23f3072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    delay(timeToWait - timeWaited);
 23f3076:	f005 b925 	b.w	23f82c4 <delay>
}
 23f307a:	bd38      	pop	{r3, r4, r5, pc}

023f307c <_ZN17Adafruit_VEML77007readALSEb>:
uint16_t Adafruit_VEML7700::readALS(bool wait) {
 23f307c:	b510      	push	{r4, lr}
 23f307e:	4604      	mov	r4, r0
  if (wait)
 23f3080:	b109      	cbz	r1, 23f3086 <_ZN17Adafruit_VEML77007readALSEb+0xa>
    readWait();
 23f3082:	f7ff ffe9 	bl	23f3058 <_ZN17Adafruit_VEML77008readWaitEv>
 23f3086:	f004 fa9b 	bl	23f75c0 <HAL_Timer_Get_Milli_Seconds>
  lastRead = millis();
 23f308a:	60e0      	str	r0, [r4, #12]
  return ALS_Data->read();
 23f308c:	6960      	ldr	r0, [r4, #20]
 23f308e:	f7fd fd11 	bl	23f0ab4 <_ZN23Adafruit_BusIO_Register4readEv>
}
 23f3092:	b280      	uxth	r0, r0
 23f3094:	bd10      	pop	{r4, pc}
	...

023f3098 <_ZN17Adafruit_VEML77007autoLuxEv>:
 *  @brief Implemenation of App Note "Designing the VEML7700 Into an
 * Application", Vishay Document Number: 84323, Fig. 24 Flow Chart. This will
 * automatically adjust gain and integration time as needed to obtain a good raw
 * count value. Additionally, a non-linear correction is applied if needed.
 */
float Adafruit_VEML7700::autoLux(void) {
 23f3098:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23f309a:	4604      	mov	r4, r0
  const uint8_t gains[] = {VEML7700_GAIN_1_8, VEML7700_GAIN_1_4,
 23f309c:	4b2e      	ldr	r3, [pc, #184]	; (23f3158 <_ZN17Adafruit_VEML77007autoLuxEv+0xc0>)

  uint8_t gainIndex = 0;      // start with ALS gain = 1/8
  uint8_t itIndex = 2;        // start with ALS integration time = 100ms
  bool useCorrection = false; // flag for non-linear correction

  setGain(gains[gainIndex]);
 23f309e:	2102      	movs	r1, #2
  const uint8_t gains[] = {VEML7700_GAIN_1_8, VEML7700_GAIN_1_4,
 23f30a0:	9301      	str	r3, [sp, #4]
  const uint8_t intTimes[] = {VEML7700_IT_25MS,  VEML7700_IT_50MS,
 23f30a2:	4b2e      	ldr	r3, [pc, #184]	; (23f315c <_ZN17Adafruit_VEML77007autoLuxEv+0xc4>)
 23f30a4:	6818      	ldr	r0, [r3, #0]
 23f30a6:	889b      	ldrh	r3, [r3, #4]
 23f30a8:	9002      	str	r0, [sp, #8]
  setGain(gains[gainIndex]);
 23f30aa:	4620      	mov	r0, r4
  const uint8_t intTimes[] = {VEML7700_IT_25MS,  VEML7700_IT_50MS,
 23f30ac:	f8ad 300c 	strh.w	r3, [sp, #12]
  setGain(gains[gainIndex]);
 23f30b0:	f7ff fe55 	bl	23f2d5e <_ZN17Adafruit_VEML77007setGainEh>
  setIntegrationTime(intTimes[itIndex]);
 23f30b4:	2201      	movs	r2, #1
 23f30b6:	2100      	movs	r1, #0
 23f30b8:	4620      	mov	r0, r4
 23f30ba:	f7ff fe3b 	bl	23f2d34 <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>

  uint16_t ALS = readALS(true);
 23f30be:	2101      	movs	r1, #1
 23f30c0:	4620      	mov	r0, r4
 23f30c2:	f7ff ffdb 	bl	23f307c <_ZN17Adafruit_VEML77007readALSEb>
  // Serial.println("** AUTO LUX DEBUG **");
  // Serial.print("ALS initial = "); Serial.println(ALS);

  if (ALS <= 100) {
 23f30c6:	2864      	cmp	r0, #100	; 0x64
 23f30c8:	d82e      	bhi.n	23f3128 <_ZN17Adafruit_VEML77007autoLuxEv+0x90>
  uint8_t itIndex = 2;        // start with ALS integration time = 100ms
 23f30ca:	2602      	movs	r6, #2
  uint8_t gainIndex = 0;      // start with ALS gain = 1/8
 23f30cc:	2500      	movs	r5, #0

    // increase first gain and then integration time as needed
    // compute lux using simple linear formula
    while ((ALS <= 100) && !((gainIndex == 3) && (itIndex == 5))) {
 23f30ce:	2d03      	cmp	r5, #3
 23f30d0:	d109      	bne.n	23f30e6 <_ZN17Adafruit_VEML77007autoLuxEv+0x4e>
 23f30d2:	2e05      	cmp	r6, #5
 23f30d4:	d11a      	bne.n	23f310c <_ZN17Adafruit_VEML77007autoLuxEv+0x74>
  bool useCorrection = false; // flag for non-linear correction
 23f30d6:	2200      	movs	r2, #0
      // Serial.print("ALS  hi lux = "); Serial.println(ALS);
    }
  }
  // Serial.println("** AUTO LUX DEBUG **");

  return computeLux(ALS, useCorrection);
 23f30d8:	4601      	mov	r1, r0
 23f30da:	4620      	mov	r0, r4
 23f30dc:	b004      	add	sp, #16
 23f30de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return computeLux(ALS, useCorrection);
 23f30e2:	f7ff bf6d 	b.w	23f2fc0 <_ZN17Adafruit_VEML770010computeLuxEtb>
      if (gainIndex < 3) {
 23f30e6:	2d02      	cmp	r5, #2
 23f30e8:	d810      	bhi.n	23f310c <_ZN17Adafruit_VEML77007autoLuxEv+0x74>
        setGain(gains[++gainIndex]);
 23f30ea:	1c6b      	adds	r3, r5, #1
 23f30ec:	aa04      	add	r2, sp, #16
 23f30ee:	b2dd      	uxtb	r5, r3
 23f30f0:	fa52 f383 	uxtab	r3, r2, r3
 23f30f4:	4620      	mov	r0, r4
 23f30f6:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 23f30fa:	f7ff fe30 	bl	23f2d5e <_ZN17Adafruit_VEML77007setGainEh>
      ALS = readALS(true);
 23f30fe:	2101      	movs	r1, #1
 23f3100:	4620      	mov	r0, r4
 23f3102:	f7ff ffbb 	bl	23f307c <_ZN17Adafruit_VEML77007readALSEb>
    while ((ALS <= 100) && !((gainIndex == 3) && (itIndex == 5))) {
 23f3106:	2864      	cmp	r0, #100	; 0x64
 23f3108:	d9e1      	bls.n	23f30ce <_ZN17Adafruit_VEML77007autoLuxEv+0x36>
 23f310a:	e7e4      	b.n	23f30d6 <_ZN17Adafruit_VEML77007autoLuxEv+0x3e>
      } else if (itIndex < 5) {
 23f310c:	2e04      	cmp	r6, #4
 23f310e:	d8f6      	bhi.n	23f30fe <_ZN17Adafruit_VEML77007autoLuxEv+0x66>
        setIntegrationTime(intTimes[++itIndex]);
 23f3110:	aa04      	add	r2, sp, #16
 23f3112:	1c73      	adds	r3, r6, #1
 23f3114:	b2de      	uxtb	r6, r3
 23f3116:	fa52 f383 	uxtab	r3, r2, r3
 23f311a:	4620      	mov	r0, r4
 23f311c:	2201      	movs	r2, #1
 23f311e:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 23f3122:	f7ff fe07 	bl	23f2d34 <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>
 23f3126:	e7ea      	b.n	23f30fe <_ZN17Adafruit_VEML77007autoLuxEv+0x66>
  uint8_t itIndex = 2;        // start with ALS integration time = 100ms
 23f3128:	2502      	movs	r5, #2
    while ((ALS > 10000) && (itIndex > 0)) {
 23f312a:	f242 7610 	movw	r6, #10000	; 0x2710
 23f312e:	42b0      	cmp	r0, r6
 23f3130:	d910      	bls.n	23f3154 <_ZN17Adafruit_VEML77007autoLuxEv+0xbc>
 23f3132:	b17d      	cbz	r5, 23f3154 <_ZN17Adafruit_VEML77007autoLuxEv+0xbc>
      setIntegrationTime(intTimes[--itIndex]);
 23f3134:	aa04      	add	r2, sp, #16
 23f3136:	1e6b      	subs	r3, r5, #1
 23f3138:	b2dd      	uxtb	r5, r3
 23f313a:	fa52 f383 	uxtab	r3, r2, r3
 23f313e:	4620      	mov	r0, r4
 23f3140:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 23f3144:	2201      	movs	r2, #1
 23f3146:	f7ff fdf5 	bl	23f2d34 <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>
      ALS = readALS(true);
 23f314a:	2101      	movs	r1, #1
 23f314c:	4620      	mov	r0, r4
 23f314e:	f7ff ff95 	bl	23f307c <_ZN17Adafruit_VEML77007readALSEb>
    while ((ALS > 10000) && (itIndex > 0)) {
 23f3152:	e7ec      	b.n	23f312e <_ZN17Adafruit_VEML77007autoLuxEv+0x96>
    useCorrection = true;
 23f3154:	2201      	movs	r2, #1
 23f3156:	e7bf      	b.n	23f30d8 <_ZN17Adafruit_VEML77007autoLuxEv+0x40>
 23f3158:	01000302 	.word	0x01000302
 23f315c:	023fd254 	.word	0x023fd254

023f3160 <_ZN17Adafruit_VEML77007readLuxE9luxMethod>:
float Adafruit_VEML7700::readLux(luxMethod method) {
 23f3160:	b510      	push	{r4, lr}
 23f3162:	4604      	mov	r4, r0
 23f3164:	ed2d 8b02 	vpush	{d8}
 23f3168:	2904      	cmp	r1, #4
 23f316a:	d82b      	bhi.n	23f31c4 <_ZN17Adafruit_VEML77007readLuxE9luxMethod+0x64>
 23f316c:	e8df f001 	tbb	[pc, r1]
 23f3170:	03242213 	.word	0x03242213
 23f3174:	15          	.byte	0x15
 23f3175:	00          	.byte	0x00
  bool wait = true;
 23f3176:	2100      	movs	r1, #0
    return computeLux(readALS(wait));
 23f3178:	4620      	mov	r0, r4
 23f317a:	f7ff ff7f 	bl	23f307c <_ZN17Adafruit_VEML77007readALSEb>
 23f317e:	ee08 0a10 	vmov	s16, r0
  float lux = getResolution() * rawALS;
 23f3182:	4620      	mov	r0, r4
 23f3184:	f7ff fefb 	bl	23f2f7e <_ZN17Adafruit_VEML770013getResolutionEv>
 23f3188:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 23f318c:	ee28 0a00 	vmul.f32	s0, s16, s0
}
 23f3190:	ecbd 8b02 	vpop	{d8}
 23f3194:	bd10      	pop	{r4, pc}
  bool wait = true;
 23f3196:	2101      	movs	r1, #1
 23f3198:	e7ee      	b.n	23f3178 <_ZN17Adafruit_VEML77007readLuxE9luxMethod+0x18>
 23f319a:	2100      	movs	r1, #0
    return computeLux(readALS(wait), true);
 23f319c:	4620      	mov	r0, r4
 23f319e:	f7ff ff6d 	bl	23f307c <_ZN17Adafruit_VEML77007readALSEb>
}
 23f31a2:	ecbd 8b02 	vpop	{d8}
    return computeLux(readALS(wait), true);
 23f31a6:	4601      	mov	r1, r0
 23f31a8:	2201      	movs	r2, #1
 23f31aa:	4620      	mov	r0, r4
}
 23f31ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return computeLux(readALS(wait), true);
 23f31b0:	f7ff bf06 	b.w	23f2fc0 <_ZN17Adafruit_VEML770010computeLuxEtb>
  bool wait = true;
 23f31b4:	2101      	movs	r1, #1
 23f31b6:	e7f1      	b.n	23f319c <_ZN17Adafruit_VEML77007readLuxE9luxMethod+0x3c>
}
 23f31b8:	ecbd 8b02 	vpop	{d8}
 23f31bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return autoLux();
 23f31c0:	f7ff bf6a 	b.w	23f3098 <_ZN17Adafruit_VEML77007autoLuxEv>
  bool wait = true;
 23f31c4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 23f31c8:	e7e2      	b.n	23f3190 <_ZN17Adafruit_VEML77007readLuxE9luxMethod+0x30>

023f31ca <_ZN7TwoWire5writeEi.isra.0>:
  inline size_t write(int n) { return write((uint8_t)n); }
 23f31ca:	6803      	ldr	r3, [r0, #0]
 23f31cc:	b2c9      	uxtb	r1, r1
 23f31ce:	689b      	ldr	r3, [r3, #8]
 23f31d0:	4718      	bx	r3

023f31d2 <_ZN8LeafSensC1Ev>:
 */
#include "LeafSens.h"


LeafSens::LeafSens(){
  addr=0x61;
 23f31d2:	2361      	movs	r3, #97	; 0x61
 23f31d4:	7103      	strb	r3, [r0, #4]
}
 23f31d6:	4770      	bx	lr

023f31d8 <_ZN8LeafSens4initEh>:
  _wire = the_wire;
  addr = address;
  return 0;
}

int LeafSens::init(uint8_t address){
 23f31d8:	b538      	push	{r3, r4, r5, lr}
 23f31da:	4604      	mov	r4, r0
 23f31dc:	460d      	mov	r5, r1
  _wire = &Wire;
 23f31de:	f007 f87b 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23f31e2:	6020      	str	r0, [r4, #0]
  _wire->begin();
 23f31e4:	f005 fe3e 	bl	23f8e64 <_ZN7TwoWire5beginEv>
  // _wire->setClock(100000L);
  addr = address;
  return 0;
}
 23f31e8:	2000      	movs	r0, #0
  addr = address;
 23f31ea:	7125      	strb	r5, [r4, #4]
}
 23f31ec:	bd38      	pop	{r3, r4, r5, pc}

023f31ee <_ZN8LeafSens8i2cdelayEi>:


bool LeafSens::i2cdelay(int size){
 23f31ee:	b570      	push	{r4, r5, r6, lr}
 23f31f0:	4606      	mov	r6, r0
  delay(1);
 23f31f2:	2001      	movs	r0, #1
bool LeafSens::i2cdelay(int size){
 23f31f4:	460d      	mov	r5, r1
  int i=0;
 23f31f6:	2400      	movs	r4, #0
  delay(1);
 23f31f8:	f005 f864 	bl	23f82c4 <delay>
  for (;_wire->available() < size && i<=size;i++) {
 23f31fc:	6830      	ldr	r0, [r6, #0]
 23f31fe:	6803      	ldr	r3, [r0, #0]
 23f3200:	691b      	ldr	r3, [r3, #16]
 23f3202:	4798      	blx	r3
 23f3204:	42a8      	cmp	r0, r5
 23f3206:	da06      	bge.n	23f3216 <_ZN8LeafSens8i2cdelayEi+0x28>
 23f3208:	42ac      	cmp	r4, r5
 23f320a:	dc09      	bgt.n	23f3220 <_ZN8LeafSens8i2cdelayEi+0x32>
	  delay(2);
 23f320c:	2002      	movs	r0, #2
 23f320e:	f005 f859 	bl	23f82c4 <delay>
  for (;_wire->available() < size && i<=size;i++) {
 23f3212:	3401      	adds	r4, #1
 23f3214:	e7f2      	b.n	23f31fc <_ZN8LeafSens8i2cdelayEi+0xe>
  }
  if(i>=size){
 23f3216:	42ac      	cmp	r4, r5
 23f3218:	bfac      	ite	ge
 23f321a:	2000      	movge	r0, #0
 23f321c:	2001      	movlt	r0, #1
	  return false;
  }else{
	  return true;
  }
}
 23f321e:	bd70      	pop	{r4, r5, r6, pc}
	  return false;
 23f3220:	2000      	movs	r0, #0
 23f3222:	e7fc      	b.n	23f321e <_ZN8LeafSens8i2cdelayEi+0x30>

023f3224 <_ZN8LeafSens8getStateEv>:

int LeafSens::getState(){ //-1:no data, 0:err, 1:ok
 23f3224:	b510      	push	{r4, lr}
 23f3226:	4604      	mov	r4, r0
  _wire->requestFrom(addr, (uint8_t)1);
 23f3228:	7901      	ldrb	r1, [r0, #4]
 23f322a:	2201      	movs	r2, #1
 23f322c:	6800      	ldr	r0, [r0, #0]
 23f322e:	f005 fe40 	bl	23f8eb2 <_ZN7TwoWire11requestFromEhj>
   if(i2cdelay(1)){
 23f3232:	2101      	movs	r1, #1
 23f3234:	4620      	mov	r0, r4
 23f3236:	f7ff ffda 	bl	23f31ee <_ZN8LeafSens8i2cdelayEi>
 23f323a:	b128      	cbz	r0, 23f3248 <_ZN8LeafSens8getStateEv+0x24>
    return _wire->read();
 23f323c:	6820      	ldr	r0, [r4, #0]
  }else{
    return -1;
  }
}
 23f323e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return _wire->read();
 23f3242:	6803      	ldr	r3, [r0, #0]
 23f3244:	695b      	ldr	r3, [r3, #20]
 23f3246:	4718      	bx	r3
}
 23f3248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23f324c:	bd10      	pop	{r4, pc}

023f324e <_ZN8LeafSens6getValEh>:

int16_t LeafSens::getVal(byte reg){
 23f324e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f3250:	4604      	mov	r4, r0
 23f3252:	460d      	mov	r5, r1

  _wire->beginTransmission(addr); // transmit to device
 23f3254:	7901      	ldrb	r1, [r0, #4]
 23f3256:	6800      	ldr	r0, [r0, #0]
 23f3258:	f005 fe2e 	bl	23f8eb8 <_ZN7TwoWire17beginTransmissionEh>
  _wire->write(reg);              // sends one byte
 23f325c:	6820      	ldr	r0, [r4, #0]
 23f325e:	4629      	mov	r1, r5
 23f3260:	6803      	ldr	r3, [r0, #0]
 23f3262:	689b      	ldr	r3, [r3, #8]
 23f3264:	4798      	blx	r3
  _wire->endTransmission();    // stop transmitting
 23f3266:	6820      	ldr	r0, [r4, #0]
 23f3268:	f005 fe31 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>
  delay(10);
 23f326c:	200a      	movs	r0, #10
 23f326e:	f005 f829 	bl	23f82c4 <delay>
  _wire->requestFrom(addr, (uint8_t)2);
 23f3272:	7921      	ldrb	r1, [r4, #4]
 23f3274:	2202      	movs	r2, #2
 23f3276:	6820      	ldr	r0, [r4, #0]
 23f3278:	f005 fe1b 	bl	23f8eb2 <_ZN7TwoWire11requestFromEhj>
  int16_t ret=0;
 23f327c:	2300      	movs	r3, #0
  if(i2cdelay(2)){
 23f327e:	2102      	movs	r1, #2
 23f3280:	4620      	mov	r0, r4
  int16_t ret=0;
 23f3282:	f8ad 3006 	strh.w	r3, [sp, #6]
  if(i2cdelay(2)){
 23f3286:	f7ff ffb2 	bl	23f31ee <_ZN8LeafSens8i2cdelayEi>
 23f328a:	b158      	cbz	r0, 23f32a4 <_ZN8LeafSens6getValEh+0x56>
	byte *pointer = (byte *)&ret;
    pointer[0] = _wire->read();
 23f328c:	6820      	ldr	r0, [r4, #0]
 23f328e:	6803      	ldr	r3, [r0, #0]
 23f3290:	695b      	ldr	r3, [r3, #20]
 23f3292:	4798      	blx	r3
 23f3294:	f88d 0006 	strb.w	r0, [sp, #6]
    pointer[1] = _wire->read();
 23f3298:	6820      	ldr	r0, [r4, #0]
 23f329a:	6803      	ldr	r3, [r0, #0]
 23f329c:	695b      	ldr	r3, [r3, #20]
 23f329e:	4798      	blx	r3
 23f32a0:	f88d 0007 	strb.w	r0, [sp, #7]
  }
  return ret;
}
 23f32a4:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 23f32a8:	b003      	add	sp, #12
 23f32aa:	bd30      	pop	{r4, r5, pc}

023f32ac <_ZN8LeafSens10newReadingEv>:
    return 0;
  }
  return 1;
}

int LeafSens::newReading(){
 23f32ac:	b510      	push	{r4, lr}
 23f32ae:	4604      	mov	r4, r0
  _wire->beginTransmission(addr); // transmit to device
 23f32b0:	7901      	ldrb	r1, [r0, #4]
 23f32b2:	6800      	ldr	r0, [r0, #0]
 23f32b4:	f005 fe00 	bl	23f8eb8 <_ZN7TwoWire17beginTransmissionEh>
  _wire->write(REG_READ_ST);              // sends one byte
 23f32b8:	2101      	movs	r1, #1
 23f32ba:	6820      	ldr	r0, [r4, #0]
 23f32bc:	f7ff ff85 	bl	23f31ca <_ZN7TwoWire5writeEi.isra.0>
  _wire->endTransmission();    // stop transmitting
 23f32c0:	6820      	ldr	r0, [r4, #0]
 23f32c2:	f005 fe04 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>
  delay(200); // let sensor read the data
 23f32c6:	20c8      	movs	r0, #200	; 0xc8
 23f32c8:	f004 fffc 	bl	23f82c4 <delay>
  return getState();
 23f32cc:	4620      	mov	r0, r4
}
 23f32ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return getState();
 23f32d2:	f7ff bfa7 	b.w	23f3224 <_ZN8LeafSens8getStateEv>
	...

023f32d8 <_ZN8LeafSens6getWetEv>:

float LeafSens::getWet()
{
 23f32d8:	b508      	push	{r3, lr}
  return getVal(REG_WET)/100.0;
 23f32da:	2105      	movs	r1, #5
 23f32dc:	f7ff ffb7 	bl	23f324e <_ZN8LeafSens6getValEh>
 23f32e0:	f7f1 ffe0 	bl	23e52a4 <__aeabi_i2d>
 23f32e4:	2200      	movs	r2, #0
 23f32e6:	4b04      	ldr	r3, [pc, #16]	; (23f32f8 <_ZN8LeafSens6getWetEv+0x20>)
 23f32e8:	f7f2 f970 	bl	23e55cc <__aeabi_ddiv>
 23f32ec:	f7f2 fb3c 	bl	23e5968 <__aeabi_d2f>
}
 23f32f0:	ee00 0a10 	vmov	s0, r0
 23f32f4:	bd08      	pop	{r3, pc}
 23f32f6:	bf00      	nop
 23f32f8:	40590000 	.word	0x40590000

023f32fc <_ZN8LeafSens7getTempEv>:

float LeafSens::getTemp()
{
 23f32fc:	b508      	push	{r3, lr}
  return getVal(REG_TEMP)/100.0;
 23f32fe:	2104      	movs	r1, #4
 23f3300:	f7ff ffa5 	bl	23f324e <_ZN8LeafSens6getValEh>
 23f3304:	f7f1 ffce 	bl	23e52a4 <__aeabi_i2d>
 23f3308:	2200      	movs	r2, #0
 23f330a:	4b04      	ldr	r3, [pc, #16]	; (23f331c <_ZN8LeafSens7getTempEv+0x20>)
 23f330c:	f7f2 f95e 	bl	23e55cc <__aeabi_ddiv>
 23f3310:	f7f2 fb2a 	bl	23e5968 <__aeabi_d2f>
}
 23f3314:	ee00 0a10 	vmov	s0, r0
 23f3318:	bd08      	pop	{r3, pc}
 23f331a:	bf00      	nop
 23f331c:	40590000 	.word	0x40590000

023f3320 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
 23f3320:	2001      	movs	r0, #1
 23f3322:	4770      	bx	lr

023f3324 <_ZN15RHGenericDriver13waitAvailableEv>:

// Blocks until a valid message is received
void RHGenericDriver::waitAvailable()
{
 23f3324:	b510      	push	{r4, lr}
 23f3326:	4604      	mov	r4, r0
    while (!available())
 23f3328:	6823      	ldr	r3, [r4, #0]
 23f332a:	4620      	mov	r0, r4
 23f332c:	685b      	ldr	r3, [r3, #4]
 23f332e:	4798      	blx	r3
 23f3330:	2800      	cmp	r0, #0
 23f3332:	d0f9      	beq.n	23f3328 <_ZN15RHGenericDriver13waitAvailableEv+0x4>
	YIELD;
}
 23f3334:	bd10      	pop	{r4, pc}

023f3336 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
 23f3336:	7903      	ldrb	r3, [r0, #4]
 23f3338:	2b03      	cmp	r3, #3
 23f333a:	d0fc      	beq.n	23f3336 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
 23f333c:	2001      	movs	r0, #1
 23f333e:	4770      	bx	lr

023f3340 <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
 23f3340:	2000      	movs	r0, #0
 23f3342:	4770      	bx	lr

023f3344 <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
 23f3344:	7181      	strb	r1, [r0, #6]
}
 23f3346:	4770      	bx	lr

023f3348 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
 23f3348:	7141      	strb	r1, [r0, #5]
}
 23f334a:	4770      	bx	lr

023f334c <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
 23f334c:	72c1      	strb	r1, [r0, #11]
}
 23f334e:	4770      	bx	lr

023f3350 <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
 23f3350:	7301      	strb	r1, [r0, #12]
}
 23f3352:	4770      	bx	lr

023f3354 <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
 23f3354:	7341      	strb	r1, [r0, #13]
}
 23f3356:	4770      	bx	lr

023f3358 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
 23f3358:	7b83      	ldrb	r3, [r0, #14]
 23f335a:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
 23f335e:	4311      	orrs	r1, r2
 23f3360:	7381      	strb	r1, [r0, #14]
}
 23f3362:	4770      	bx	lr

023f3364 <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
 23f3364:	79c0      	ldrb	r0, [r0, #7]
}
 23f3366:	4770      	bx	lr

023f3368 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
 23f3368:	7a00      	ldrb	r0, [r0, #8]
}
 23f336a:	4770      	bx	lr

023f336c <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
 23f336c:	7a40      	ldrb	r0, [r0, #9]
}
 23f336e:	4770      	bx	lr

023f3370 <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
 23f3370:	7a80      	ldrb	r0, [r0, #10]
}
 23f3372:	4770      	bx	lr

023f3374 <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
 23f3374:	8a00      	ldrh	r0, [r0, #16]
}
 23f3376:	b200      	sxth	r0, r0
 23f3378:	4770      	bx	lr

023f337a <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
 23f337a:	7900      	ldrb	r0, [r0, #4]
}
 23f337c:	4770      	bx	lr

023f337e <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
 23f337e:	7101      	strb	r1, [r0, #4]
}
 23f3380:	4770      	bx	lr

023f3382 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
 23f3382:	8a40      	ldrh	r0, [r0, #18]
}
 23f3384:	b280      	uxth	r0, r0
 23f3386:	4770      	bx	lr

023f3388 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
 23f3388:	8a80      	ldrh	r0, [r0, #20]
}
 23f338a:	b280      	uxth	r0, r0
 23f338c:	4770      	bx	lr

023f338e <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
 23f338e:	8ac0      	ldrh	r0, [r0, #22]
}
 23f3390:	b280      	uxth	r0, r0
 23f3392:	4770      	bx	lr

023f3394 <_ZN15RHGenericDriver20waitAvailableTimeoutEt>:
{
 23f3394:	b570      	push	{r4, r5, r6, lr}
 23f3396:	4604      	mov	r4, r0
 23f3398:	460e      	mov	r6, r1
 23f339a:	f004 f911 	bl	23f75c0 <HAL_Timer_Get_Milli_Seconds>
 23f339e:	4605      	mov	r5, r0
 23f33a0:	f004 f90e 	bl	23f75c0 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
 23f33a4:	1b40      	subs	r0, r0, r5
 23f33a6:	42b0      	cmp	r0, r6
 23f33a8:	d206      	bcs.n	23f33b8 <_ZN15RHGenericDriver20waitAvailableTimeoutEt+0x24>
        if (available())
 23f33aa:	6823      	ldr	r3, [r4, #0]
 23f33ac:	4620      	mov	r0, r4
 23f33ae:	685b      	ldr	r3, [r3, #4]
 23f33b0:	4798      	blx	r3
 23f33b2:	2800      	cmp	r0, #0
 23f33b4:	d0f4      	beq.n	23f33a0 <_ZN15RHGenericDriver20waitAvailableTimeoutEt+0xc>
}
 23f33b6:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 23f33b8:	2000      	movs	r0, #0
 23f33ba:	e7fc      	b.n	23f33b6 <_ZN15RHGenericDriver20waitAvailableTimeoutEt+0x22>

023f33bc <_ZN15RHGenericDriver14waitPacketSentEt>:
{
 23f33bc:	b570      	push	{r4, r5, r6, lr}
 23f33be:	4604      	mov	r4, r0
 23f33c0:	460e      	mov	r6, r1
 23f33c2:	f004 f8fd 	bl	23f75c0 <HAL_Timer_Get_Milli_Seconds>
 23f33c6:	4605      	mov	r5, r0
 23f33c8:	f004 f8fa 	bl	23f75c0 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
 23f33cc:	1b40      	subs	r0, r0, r5
 23f33ce:	42b0      	cmp	r0, r6
 23f33d0:	d204      	bcs.n	23f33dc <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
 23f33d2:	7923      	ldrb	r3, [r4, #4]
 23f33d4:	2b03      	cmp	r3, #3
 23f33d6:	d0f7      	beq.n	23f33c8 <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
 23f33d8:	2001      	movs	r0, #1
}
 23f33da:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 23f33dc:	2000      	movs	r0, #0
 23f33de:	e7fc      	b.n	23f33da <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

023f33e0 <_ZN15RHGenericDriver7waitCADEv>:
{
 23f33e0:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
 23f33e2:	69c3      	ldr	r3, [r0, #28]
{
 23f33e4:	4604      	mov	r4, r0
    if (!_cad_timeout)
 23f33e6:	b1b3      	cbz	r3, 23f3416 <_ZN15RHGenericDriver7waitCADEv+0x36>
 23f33e8:	f004 f8ea 	bl	23f75c0 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
 23f33ec:	2664      	movs	r6, #100	; 0x64
 23f33ee:	4605      	mov	r5, r0
    while (isChannelActive())
 23f33f0:	6823      	ldr	r3, [r4, #0]
 23f33f2:	4620      	mov	r0, r4
 23f33f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f33f6:	4798      	blx	r3
 23f33f8:	b168      	cbz	r0, 23f3416 <_ZN15RHGenericDriver7waitCADEv+0x36>
 23f33fa:	f004 f8e1 	bl	23f75c0 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
 23f33fe:	69e3      	ldr	r3, [r4, #28]
 23f3400:	1b40      	subs	r0, r0, r5
 23f3402:	4298      	cmp	r0, r3
 23f3404:	d809      	bhi.n	23f341a <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
 23f3406:	210a      	movs	r1, #10
 23f3408:	2001      	movs	r0, #1
 23f340a:	f006 f9cb 	bl	23f97a4 <_Z6randomii>
 23f340e:	4370      	muls	r0, r6
 23f3410:	f004 ff58 	bl	23f82c4 <delay>
    while (isChannelActive())
 23f3414:	e7ec      	b.n	23f33f0 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
 23f3416:	2001      	movs	r0, #1
}
 23f3418:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
 23f341a:	2000      	movs	r0, #0
 23f341c:	e7fc      	b.n	23f3418 <_ZN15RHGenericDriver7waitCADEv+0x38>
	...

023f3420 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
 23f3420:	4a06      	ldr	r2, [pc, #24]	; (23f343c <_ZN15RHGenericDriverC1Ev+0x1c>)
 23f3422:	21ff      	movs	r1, #255	; 0xff
 23f3424:	6002      	str	r2, [r0, #0]
 23f3426:	2200      	movs	r2, #0
 23f3428:	7141      	strb	r1, [r0, #5]
 23f342a:	7102      	strb	r2, [r0, #4]
 23f342c:	72c1      	strb	r1, [r0, #11]
 23f342e:	8242      	strh	r2, [r0, #18]
 23f3430:	8181      	strh	r1, [r0, #12]
 23f3432:	8282      	strh	r2, [r0, #20]
 23f3434:	7382      	strb	r2, [r0, #14]
 23f3436:	82c2      	strh	r2, [r0, #22]
 23f3438:	61c2      	str	r2, [r0, #28]
}
 23f343a:	4770      	bx	lr
 23f343c:	023ff774 	.word	0x023ff774

023f3440 <_ZN12RHGenericSPI15attachInterruptEv>:
    virtual uint8_t transfer(uint8_t data) = 0;

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
 23f3440:	4770      	bx	lr

023f3442 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
 23f3442:	4770      	bx	lr

023f3444 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
 23f3444:	4770      	bx	lr

023f3446 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
 23f3446:	4770      	bx	lr

023f3448 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Tells the SPI support software that SPI transactions will occur with the interrupt
    /// handler assocated with interruptNumber
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){}
 23f3448:	4770      	bx	lr

023f344a <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
 23f344a:	7141      	strb	r1, [r0, #5]
}
 23f344c:	4770      	bx	lr

023f344e <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
 23f344e:	7181      	strb	r1, [r0, #6]
}
 23f3450:	4770      	bx	lr

023f3452 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
 23f3452:	7101      	strb	r1, [r0, #4]
}
 23f3454:	4770      	bx	lr
	...

023f3458 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
 23f3458:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
 23f345a:	4d03      	ldr	r5, [pc, #12]	; (23f3468 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
 23f345c:	7101      	strb	r1, [r0, #4]
 23f345e:	6005      	str	r5, [r0, #0]
 23f3460:	7142      	strb	r2, [r0, #5]
 23f3462:	7183      	strb	r3, [r0, #6]
}
 23f3464:	bd30      	pop	{r4, r5, pc}
 23f3466:	bf00      	nop
 23f3468:	023ff7ec 	.word	0x023ff7ec

023f346c <_ZN13RHHardwareSPI14usingInterruptEh>:
void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
#if defined(SPI_HAS_TRANSACTION)

#endif
}
 23f346c:	4770      	bx	lr
	...

023f3470 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
 23f3470:	b510      	push	{r4, lr}
 23f3472:	4604      	mov	r4, r0
    RHGenericSPI(frequency, bitOrder, dataMode)
 23f3474:	f7ff fff0 	bl	23f3458 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
 23f3478:	4b05      	ldr	r3, [pc, #20]	; (23f3490 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
}
 23f347a:	4620      	mov	r0, r4
    RHGenericSPI(frequency, bitOrder, dataMode)
 23f347c:	6023      	str	r3, [r4, #0]
 23f347e:	4b05      	ldr	r3, [pc, #20]	; (23f3494 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
 23f3480:	60a3      	str	r3, [r4, #8]
 23f3482:	2301      	movs	r3, #1
 23f3484:	7323      	strb	r3, [r4, #12]
 23f3486:	2300      	movs	r3, #0
 23f3488:	6123      	str	r3, [r4, #16]
 23f348a:	82a3      	strh	r3, [r4, #20]
}
 23f348c:	bd10      	pop	{r4, pc}
 23f348e:	bf00      	nop
 23f3490:	023ff820 	.word	0x023ff820
 23f3494:	023fea34 	.word	0x023fea34

023f3498 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>:
    static SPIClass& instance() {
 23f3498:	b510      	push	{r4, lr}
        static SPIClass instance(Interface);
 23f349a:	4c09      	ldr	r4, [pc, #36]	; (23f34c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x28>)
 23f349c:	e8d4 3f8f 	ldab	r3, [r4]
 23f34a0:	07db      	lsls	r3, r3, #31
 23f34a2:	d40a      	bmi.n	23f34ba <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x22>
 23f34a4:	4620      	mov	r0, r4
 23f34a6:	f004 fef1 	bl	23f828c <__cxa_guard_acquire>
 23f34aa:	b130      	cbz	r0, 23f34ba <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x22>
 23f34ac:	2101      	movs	r1, #1
 23f34ae:	4805      	ldr	r0, [pc, #20]	; (23f34c4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x2c>)
 23f34b0:	f006 f98e 	bl	23f97d0 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23f34b4:	4620      	mov	r0, r4
 23f34b6:	f004 fef7 	bl	23f82a8 <__cxa_guard_release>
        return instance;
    }
 23f34ba:	4802      	ldr	r0, [pc, #8]	; (23f34c4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x2c>)
 23f34bc:	bd10      	pop	{r4, pc}
 23f34be:	bf00      	nop
 23f34c0:	1007ae68 	.word	0x1007ae68
 23f34c4:	1007ae6c 	.word	0x1007ae6c

023f34c8 <_ZN13RHHardwareSPI8transferEh>:
{
 23f34c8:	b507      	push	{r0, r1, r2, lr}
 23f34ca:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 23f34cc:	f7ff ffe4 	bl	23f3498 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
 23f34d0:	9901      	ldr	r1, [sp, #4]
}
 23f34d2:	b003      	add	sp, #12
 23f34d4:	f85d eb04 	ldr.w	lr, [sp], #4
 23f34d8:	f006 ba46 	b.w	23f9968 <_ZN8SPIClass8transferEh>

023f34dc <_ZN13RHHardwareSPI15attachInterruptEv>:
{
 23f34dc:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
 23f34de:	f7ff ffdb 	bl	23f3498 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
 23f34e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 23f34e6:	f006 ba58 	b.w	23f999a <_ZN8SPIClass15attachInterruptEv>

023f34ea <_ZN13RHHardwareSPI15detachInterruptEv>:
{
 23f34ea:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
 23f34ec:	f7ff ffd4 	bl	23f3498 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
 23f34f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 23f34f4:	f006 ba52 	b.w	23f999c <_ZN8SPIClass15detachInterruptEv>

023f34f8 <_ZN13RHHardwareSPI5beginEv>:
{
 23f34f8:	b510      	push	{r4, lr}
   if (_frequency == Frequency16MHz)
 23f34fa:	7903      	ldrb	r3, [r0, #4]
 23f34fc:	2b04      	cmp	r3, #4
 23f34fe:	d021      	beq.n	23f3544 <_ZN13RHHardwareSPI5beginEv+0x4c>
   else if (_frequency == Frequency8MHz)
 23f3500:	2b03      	cmp	r3, #3
 23f3502:	d021      	beq.n	23f3548 <_ZN13RHHardwareSPI5beginEv+0x50>
   else if (_frequency == Frequency4MHz)
 23f3504:	2b02      	cmp	r3, #2
 23f3506:	d021      	beq.n	23f354c <_ZN13RHHardwareSPI5beginEv+0x54>
       frequency = 1000000;
 23f3508:	4a11      	ldr	r2, [pc, #68]	; (23f3550 <_ZN13RHHardwareSPI5beginEv+0x58>)
 23f350a:	4912      	ldr	r1, [pc, #72]	; (23f3554 <_ZN13RHHardwareSPI5beginEv+0x5c>)
 23f350c:	2b01      	cmp	r3, #1
 23f350e:	bf18      	it	ne
 23f3510:	460a      	movne	r2, r1
   if (_bitOrder == BitOrderLSBFirst)
 23f3512:	7941      	ldrb	r1, [r0, #5]
    if (_dataMode == DataMode0)
 23f3514:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
 23f3516:	3901      	subs	r1, #1
 23f3518:	bf18      	it	ne
 23f351a:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
 23f351c:	b133      	cbz	r3, 23f352c <_ZN13RHHardwareSPI5beginEv+0x34>
    else if (_dataMode == DataMode1)
 23f351e:	2b01      	cmp	r3, #1
 23f3520:	d004      	beq.n	23f352c <_ZN13RHHardwareSPI5beginEv+0x34>
    else if (_dataMode == DataMode2)
 23f3522:	2b02      	cmp	r3, #2
 23f3524:	d002      	beq.n	23f352c <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
 23f3526:	2b03      	cmp	r3, #3
 23f3528:	bf18      	it	ne
 23f352a:	2300      	movne	r3, #0
class SPISettings : public Printable {
 23f352c:	2400      	movs	r4, #0
 23f352e:	7501      	strb	r1, [r0, #20]
 23f3530:	7304      	strb	r4, [r0, #12]
 23f3532:	6102      	str	r2, [r0, #16]
 23f3534:	7543      	strb	r3, [r0, #21]
        instance().begin(ss_pin);
 23f3536:	f7ff ffaf 	bl	23f3498 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
 23f353a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f353e:	21ff      	movs	r1, #255	; 0xff
 23f3540:	f006 b964 	b.w	23f980c <_ZN8SPIClass5beginEt>
       frequency = 16000000;
 23f3544:	4a04      	ldr	r2, [pc, #16]	; (23f3558 <_ZN13RHHardwareSPI5beginEv+0x60>)
 23f3546:	e7e4      	b.n	23f3512 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
 23f3548:	4a04      	ldr	r2, [pc, #16]	; (23f355c <_ZN13RHHardwareSPI5beginEv+0x64>)
 23f354a:	e7e2      	b.n	23f3512 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
 23f354c:	4a04      	ldr	r2, [pc, #16]	; (23f3560 <_ZN13RHHardwareSPI5beginEv+0x68>)
 23f354e:	e7e0      	b.n	23f3512 <_ZN13RHHardwareSPI5beginEv+0x1a>
 23f3550:	001e8480 	.word	0x001e8480
 23f3554:	000f4240 	.word	0x000f4240
 23f3558:	00f42400 	.word	0x00f42400
 23f355c:	007a1200 	.word	0x007a1200
 23f3560:	003d0900 	.word	0x003d0900

023f3564 <_ZN13RHHardwareSPI3endEv>:
{
 23f3564:	b508      	push	{r3, lr}
        instance().end();
 23f3566:	f7ff ff97 	bl	23f3498 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
 23f356a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 23f356e:	f006 b961 	b.w	23f9834 <_ZN8SPIClass3endEv>

023f3572 <_ZN13RHHardwareSPI16beginTransactionEv>:
{
 23f3572:	b510      	push	{r4, lr}
 23f3574:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
 23f3576:	f7ff ff8f 	bl	23f3498 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
 23f357a:	f104 0108 	add.w	r1, r4, #8
}
 23f357e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f3582:	f006 b983 	b.w	23f988c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

023f3586 <_ZN13RHHardwareSPI14endTransactionEv>:
{
 23f3586:	b508      	push	{r3, lr}
        instance().endTransaction();
 23f3588:	f7ff ff86 	bl	23f3498 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
 23f358c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 23f3590:	f006 b962 	b.w	23f9858 <_ZN8SPIClass14endTransactionEv>

023f3594 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
 23f3594:	2300      	movs	r3, #0
 23f3596:	4802      	ldr	r0, [pc, #8]	; (23f35a0 <_GLOBAL__sub_I_hardware_spi+0xc>)
 23f3598:	461a      	mov	r2, r3
 23f359a:	4619      	mov	r1, r3
 23f359c:	f7ff bf68 	b.w	23f3470 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
 23f35a0:	1007ae74 	.word	0x1007ae74

023f35a4 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
 23f35a4:	b510      	push	{r4, lr}
 23f35a6:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
 23f35a8:	6a00      	ldr	r0, [r0, #32]
 23f35aa:	6803      	ldr	r3, [r0, #0]
 23f35ac:	68db      	ldr	r3, [r3, #12]
 23f35ae:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin
    pinMode(_slaveSelectPin, OUTPUT);
 23f35b0:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f35b4:	2101      	movs	r1, #1
 23f35b6:	f006 fe0b 	bl	23fa1d0 <pinMode>
    digitalWrite(_slaveSelectPin, HIGH);
 23f35ba:	2101      	movs	r1, #1
 23f35bc:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f35c0:	f006 fe17 	bl	23fa1f2 <digitalWrite>

    delay(100);
 23f35c4:	2064      	movs	r0, #100	; 0x64
 23f35c6:	f004 fe7d 	bl	23f82c4 <delay>
    return true;
}
 23f35ca:	2001      	movs	r0, #1
 23f35cc:	bd10      	pop	{r4, pc}
	...

023f35d0 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
 23f35d0:	b570      	push	{r4, r5, r6, lr}
 23f35d2:	4604      	mov	r4, r0
 23f35d4:	460d      	mov	r5, r1
 23f35d6:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
 23f35d8:	f7ff ff22 	bl	23f3420 <_ZN15RHGenericDriverC1Ev>
 23f35dc:	4b03      	ldr	r3, [pc, #12]	; (23f35ec <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
}
 23f35de:	4620      	mov	r0, r4
    _slaveSelectPin(slaveSelectPin)
 23f35e0:	6023      	str	r3, [r4, #0]
 23f35e2:	6226      	str	r6, [r4, #32]
 23f35e4:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
 23f35e8:	bd70      	pop	{r4, r5, r6, pc}
 23f35ea:	bf00      	nop
 23f35ec:	023ff854 	.word	0x023ff854

023f35f0 <_ZN11RHSPIDriver7spiReadEh>:

uint8_t RHSPIDriver::spiRead(uint8_t reg)
{
 23f35f0:	b538      	push	{r3, r4, r5, lr}
 23f35f2:	4604      	mov	r4, r0
 23f35f4:	460d      	mov	r5, r1
    uint8_t val;
    ATOMIC_BLOCK_START;
    digitalWrite(_slaveSelectPin, LOW);
 23f35f6:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 23f35fa:	2100      	movs	r1, #0
 23f35fc:	f006 fdf9 	bl	23fa1f2 <digitalWrite>
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
 23f3600:	6a20      	ldr	r0, [r4, #32]
 23f3602:	f005 017f 	and.w	r1, r5, #127	; 0x7f
 23f3606:	6803      	ldr	r3, [r0, #0]
 23f3608:	681b      	ldr	r3, [r3, #0]
 23f360a:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
 23f360c:	6a20      	ldr	r0, [r4, #32]
 23f360e:	2100      	movs	r1, #0
 23f3610:	6803      	ldr	r3, [r0, #0]
 23f3612:	681b      	ldr	r3, [r3, #0]
 23f3614:	4798      	blx	r3
 23f3616:	4605      	mov	r5, r0
    digitalWrite(_slaveSelectPin, HIGH);
 23f3618:	2101      	movs	r1, #1
 23f361a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f361e:	f006 fde8 	bl	23fa1f2 <digitalWrite>
    ATOMIC_BLOCK_END;
    return val;
}
 23f3622:	4628      	mov	r0, r5
 23f3624:	bd38      	pop	{r3, r4, r5, pc}

023f3626 <_ZN11RHSPIDriver8spiWriteEhh>:

uint8_t RHSPIDriver::spiWrite(uint8_t reg, uint8_t val)
{
 23f3626:	b570      	push	{r4, r5, r6, lr}
 23f3628:	4604      	mov	r4, r0
 23f362a:	460d      	mov	r5, r1
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
    _spi.beginTransaction();
 23f362c:	6a00      	ldr	r0, [r0, #32]
{
 23f362e:	4616      	mov	r6, r2
    _spi.beginTransaction();
 23f3630:	6803      	ldr	r3, [r0, #0]
 23f3632:	6a1b      	ldr	r3, [r3, #32]
 23f3634:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, LOW);
 23f3636:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f363a:	2100      	movs	r1, #0
 23f363c:	f006 fdd9 	bl	23fa1f2 <digitalWrite>
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
 23f3640:	6a20      	ldr	r0, [r4, #32]
 23f3642:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23f3646:	6803      	ldr	r3, [r0, #0]
 23f3648:	681b      	ldr	r3, [r3, #0]
 23f364a:	4798      	blx	r3
 23f364c:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
 23f364e:	6a20      	ldr	r0, [r4, #32]
 23f3650:	4631      	mov	r1, r6
 23f3652:	6803      	ldr	r3, [r0, #0]
 23f3654:	681b      	ldr	r3, [r3, #0]
 23f3656:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, HIGH);
 23f3658:	2101      	movs	r1, #1
 23f365a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f365e:	f006 fdc8 	bl	23fa1f2 <digitalWrite>
    _spi.endTransaction();
 23f3662:	6a20      	ldr	r0, [r4, #32]
 23f3664:	6803      	ldr	r3, [r0, #0]
 23f3666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f3668:	4798      	blx	r3
    ATOMIC_BLOCK_END;
    return status;
}
 23f366a:	4628      	mov	r0, r5
 23f366c:	bd70      	pop	{r4, r5, r6, pc}

023f366e <_ZN11RHSPIDriver12spiBurstReadEhPhh>:

uint8_t RHSPIDriver::spiBurstRead(uint8_t reg, uint8_t* dest, uint8_t len)
{
 23f366e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f3670:	4604      	mov	r4, r0
 23f3672:	460f      	mov	r7, r1
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
    _spi.beginTransaction();
 23f3674:	6a00      	ldr	r0, [r0, #32]
{
 23f3676:	461e      	mov	r6, r3
    _spi.beginTransaction();
 23f3678:	6803      	ldr	r3, [r0, #0]
{
 23f367a:	4615      	mov	r5, r2
    _spi.beginTransaction();
 23f367c:	6a1b      	ldr	r3, [r3, #32]
 23f367e:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, LOW);
 23f3680:	2100      	movs	r1, #0
 23f3682:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f3686:	f006 fdb4 	bl	23fa1f2 <digitalWrite>
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
 23f368a:	6a20      	ldr	r0, [r4, #32]
 23f368c:	f007 017f 	and.w	r1, r7, #127	; 0x7f
 23f3690:	6803      	ldr	r3, [r0, #0]
 23f3692:	442e      	add	r6, r5
 23f3694:	681b      	ldr	r3, [r3, #0]
 23f3696:	4798      	blx	r3
 23f3698:	4607      	mov	r7, r0
    while (len--)
 23f369a:	42b5      	cmp	r5, r6
 23f369c:	d007      	beq.n	23f36ae <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x40>
	*dest++ = _spi.transfer(0);
 23f369e:	6a20      	ldr	r0, [r4, #32]
 23f36a0:	2100      	movs	r1, #0
 23f36a2:	6803      	ldr	r3, [r0, #0]
 23f36a4:	681b      	ldr	r3, [r3, #0]
 23f36a6:	4798      	blx	r3
 23f36a8:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
 23f36ac:	e7f5      	b.n	23f369a <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2c>
    digitalWrite(_slaveSelectPin, HIGH);
 23f36ae:	2101      	movs	r1, #1
 23f36b0:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f36b4:	f006 fd9d 	bl	23fa1f2 <digitalWrite>
    _spi.endTransaction();
 23f36b8:	6a20      	ldr	r0, [r4, #32]
 23f36ba:	6803      	ldr	r3, [r0, #0]
 23f36bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f36be:	4798      	blx	r3
    ATOMIC_BLOCK_END;
    return status;
}
 23f36c0:	4638      	mov	r0, r7
 23f36c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f36c4 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:

uint8_t RHSPIDriver::spiBurstWrite(uint8_t reg, const uint8_t* src, uint8_t len)
{
 23f36c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f36c6:	4604      	mov	r4, r0
 23f36c8:	460f      	mov	r7, r1
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
    _spi.beginTransaction();
 23f36ca:	6a00      	ldr	r0, [r0, #32]
{
 23f36cc:	461e      	mov	r6, r3
    _spi.beginTransaction();
 23f36ce:	6803      	ldr	r3, [r0, #0]
{
 23f36d0:	4615      	mov	r5, r2
    _spi.beginTransaction();
 23f36d2:	6a1b      	ldr	r3, [r3, #32]
 23f36d4:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, LOW);
 23f36d6:	2100      	movs	r1, #0
 23f36d8:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f36dc:	f006 fd89 	bl	23fa1f2 <digitalWrite>
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
 23f36e0:	6a20      	ldr	r0, [r4, #32]
 23f36e2:	f047 0180 	orr.w	r1, r7, #128	; 0x80
 23f36e6:	6803      	ldr	r3, [r0, #0]
 23f36e8:	442e      	add	r6, r5
 23f36ea:	681b      	ldr	r3, [r3, #0]
 23f36ec:	4798      	blx	r3
 23f36ee:	4607      	mov	r7, r0
    while (len--)
 23f36f0:	42b5      	cmp	r5, r6
 23f36f2:	d006      	beq.n	23f3702 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3e>
	_spi.transfer(*src++);
 23f36f4:	6a20      	ldr	r0, [r4, #32]
 23f36f6:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f36fa:	6803      	ldr	r3, [r0, #0]
 23f36fc:	681b      	ldr	r3, [r3, #0]
 23f36fe:	4798      	blx	r3
    while (len--)
 23f3700:	e7f6      	b.n	23f36f0 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2c>
    digitalWrite(_slaveSelectPin, HIGH);
 23f3702:	2101      	movs	r1, #1
 23f3704:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f3708:	f006 fd73 	bl	23fa1f2 <digitalWrite>
    _spi.endTransaction();
 23f370c:	6a20      	ldr	r0, [r4, #32]
 23f370e:	6803      	ldr	r3, [r0, #0]
 23f3710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f3712:	4798      	blx	r3
    ATOMIC_BLOCK_END;
    return status;
}
 23f3714:	4638      	mov	r0, r7
 23f3716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f3718 <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _slaveSelectPin = slaveSelectPin;
}

void RHSPIDriver::spiUsingInterrupt(uint8_t interruptNumber)
{
    _spi.usingInterrupt(interruptNumber);
 23f3718:	6a00      	ldr	r0, [r0, #32]
 23f371a:	6803      	ldr	r3, [r0, #0]
 23f371c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f371e:	4718      	bx	r3

023f3720 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
 23f3720:	20fb      	movs	r0, #251	; 0xfb
 23f3722:	4770      	bx	lr

023f3724 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
 23f3724:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
 23f3726:	7903      	ldrb	r3, [r0, #4]
{
 23f3728:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
 23f372a:	2b05      	cmp	r3, #5
 23f372c:	d00a      	beq.n	23f3744 <_ZN7RH_RF9515isChannelActiveEv+0x20>
    {
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
 23f372e:	2207      	movs	r2, #7
 23f3730:	2101      	movs	r1, #1
 23f3732:	f7ff ff78 	bl	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
 23f3736:	2280      	movs	r2, #128	; 0x80
 23f3738:	2140      	movs	r1, #64	; 0x40
 23f373a:	4620      	mov	r0, r4
 23f373c:	f7ff ff73 	bl	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
 23f3740:	2305      	movs	r3, #5
 23f3742:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
 23f3744:	7923      	ldrb	r3, [r4, #4]
 23f3746:	2b05      	cmp	r3, #5
 23f3748:	d0fc      	beq.n	23f3744 <_ZN7RH_RF9515isChannelActiveEv+0x20>
        YIELD;

    return _cad;
 23f374a:	7e20      	ldrb	r0, [r4, #24]
}
 23f374c:	bd10      	pop	{r4, pc}

023f374e <_ZN7RH_RF955sleepEv>:
{
 23f374e:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
 23f3750:	7903      	ldrb	r3, [r0, #4]
{
 23f3752:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
 23f3754:	2b01      	cmp	r3, #1
 23f3756:	d005      	beq.n	23f3764 <_ZN7RH_RF955sleepEv+0x16>
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
 23f3758:	2200      	movs	r2, #0
 23f375a:	2101      	movs	r1, #1
 23f375c:	f7ff ff63 	bl	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
 23f3760:	2301      	movs	r3, #1
 23f3762:	7123      	strb	r3, [r4, #4]
}
 23f3764:	2001      	movs	r0, #1
 23f3766:	bd10      	pop	{r4, pc}

023f3768 <_ZN7RH_RF954recvEPhS0_>:
{
 23f3768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
 23f376a:	6803      	ldr	r3, [r0, #0]
{
 23f376c:	4604      	mov	r4, r0
    if (!available())
 23f376e:	685b      	ldr	r3, [r3, #4]
{
 23f3770:	460f      	mov	r7, r1
 23f3772:	4615      	mov	r5, r2
    if (!available())
 23f3774:	4798      	blx	r3
 23f3776:	4606      	mov	r6, r0
 23f3778:	b1b8      	cbz	r0, 23f37aa <_ZN7RH_RF954recvEPhS0_+0x42>
    if (buf && len)
 23f377a:	b18f      	cbz	r7, 23f37a0 <_ZN7RH_RF954recvEPhS0_+0x38>
 23f377c:	b185      	cbz	r5, 23f37a0 <_ZN7RH_RF954recvEPhS0_+0x38>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
 23f377e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 23f3782:	782a      	ldrb	r2, [r5, #0]
 23f3784:	3b03      	subs	r3, #3
 23f3786:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
 23f3788:	bfd8      	it	le
 23f378a:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
 23f378e:	4638      	mov	r0, r7
	    *len = _bufLen-RH_RF95_HEADER_LEN;
 23f3790:	bfdc      	itt	le
 23f3792:	3b04      	suble	r3, #4
 23f3794:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
 23f3796:	782a      	ldrb	r2, [r5, #0]
 23f3798:	f104 012d 	add.w	r1, r4, #45	; 0x2d
 23f379c:	f009 fb2a 	bl	23fcdf4 <memcpy>
    _rxBufValid = false;
 23f37a0:	2300      	movs	r3, #0
 23f37a2:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
 23f37a6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 23f37aa:	4630      	mov	r0, r6
 23f37ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f37ae <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 23)
 23f37ae:	2917      	cmp	r1, #23
void RH_RF95::setTxPower(int8_t power, bool useRFO)
 23f37b0:	b538      	push	{r3, r4, r5, lr}
 23f37b2:	4605      	mov	r5, r0
 23f37b4:	460c      	mov	r4, r1
	if (power > 23)
 23f37b6:	dc14      	bgt.n	23f37e2 <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 5)
 23f37b8:	2904      	cmp	r1, #4
 23f37ba:	dd14      	ble.n	23f37e6 <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 20)
 23f37bc:	2914      	cmp	r1, #20
 23f37be:	dd13      	ble.n	23f37e8 <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
 23f37c0:	2207      	movs	r2, #7
 23f37c2:	214d      	movs	r1, #77	; 0x4d
 23f37c4:	4628      	mov	r0, r5
 23f37c6:	f7ff ff2e 	bl	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
 23f37ca:	3c03      	subs	r4, #3
 23f37cc:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
 23f37ce:	1f62      	subs	r2, r4, #5
 23f37d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 23f37d4:	4628      	mov	r0, r5
}
 23f37d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
 23f37da:	2109      	movs	r1, #9
 23f37dc:	b2d2      	uxtb	r2, r2
 23f37de:	f7ff bf22 	b.w	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 23;
 23f37e2:	2417      	movs	r4, #23
 23f37e4:	e7ec      	b.n	23f37c0 <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 5;
 23f37e6:	2405      	movs	r4, #5
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
 23f37e8:	2204      	movs	r2, #4
 23f37ea:	214d      	movs	r1, #77	; 0x4d
 23f37ec:	4628      	mov	r0, r5
 23f37ee:	f7ff ff1a 	bl	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
 23f37f2:	e7ec      	b.n	23f37ce <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>

023f37f4 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
 23f37f4:	b538      	push	{r3, r4, r5, lr}
 23f37f6:	4604      	mov	r4, r0
 23f37f8:	4615      	mov	r5, r2
    _rxBufValid(0)
 23f37fa:	461a      	mov	r2, r3
 23f37fc:	f7ff fee8 	bl	23f35d0 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
 23f3800:	4b05      	ldr	r3, [pc, #20]	; (23f3818 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x24>)
}
 23f3802:	4620      	mov	r0, r4
    _rxBufValid(0)
 23f3804:	6023      	str	r3, [r4, #0]
 23f3806:	2300      	movs	r3, #0
 23f3808:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _myInterruptIndex = 0xff; // Not allocated yet
 23f380c:	23ff      	movs	r3, #255	; 0xff
    _interruptPin = interruptPin;
 23f380e:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _myInterruptIndex = 0xff; // Not allocated yet
 23f3812:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
}
 23f3816:	bd38      	pop	{r3, r4, r5, pc}
 23f3818:	023ff8d8 	.word	0x023ff8d8

023f381c <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
 23f381c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 23f3820:	2b03      	cmp	r3, #3
 23f3822:	d91b      	bls.n	23f385c <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
 23f3824:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 23f3828:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
 23f382a:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 23f382e:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
 23f3830:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 23f3834:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
 23f3836:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 23f383a:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
 23f383c:	7983      	ldrb	r3, [r0, #6]
 23f383e:	b933      	cbnz	r3, 23f384e <_ZN7RH_RF9513validateRxBufEv+0x32>
 23f3840:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
 23f3842:	7942      	ldrb	r2, [r0, #5]
 23f3844:	429a      	cmp	r2, r3
 23f3846:	d002      	beq.n	23f384e <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
 23f3848:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
 23f384a:	2bff      	cmp	r3, #255	; 0xff
 23f384c:	d106      	bne.n	23f385c <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
 23f384e:	8a83      	ldrh	r3, [r0, #20]
 23f3850:	3301      	adds	r3, #1
 23f3852:	b29b      	uxth	r3, r3
 23f3854:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
 23f3856:	2301      	movs	r3, #1
 23f3858:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
 23f385c:	4770      	bx	lr
	...

023f3860 <_ZN7RH_RF9512setFrequencyEf>:
{
 23f3860:	b538      	push	{r3, r4, r5, lr}
 23f3862:	4604      	mov	r4, r0
 23f3864:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
 23f3868:	ee10 0a10 	vmov	r0, s0
{
 23f386c:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
 23f3870:	f7f1 fd2a 	bl	23e52c8 <__aeabi_f2d>
 23f3874:	a317      	add	r3, pc, #92	; (adr r3, 23f38d4 <_ZN7RH_RF9512setFrequencyEf+0x74>)
 23f3876:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f387a:	f7f1 fd7d 	bl	23e5378 <__aeabi_dmul>
 23f387e:	a317      	add	r3, pc, #92	; (adr r3, 23f38dc <_ZN7RH_RF9512setFrequencyEf+0x7c>)
 23f3880:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f3884:	f7f1 fea2 	bl	23e55cc <__aeabi_ddiv>
 23f3888:	f7f2 f84e 	bl	23e5928 <__aeabi_d2uiz>
 23f388c:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
 23f388e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 23f3892:	2106      	movs	r1, #6
 23f3894:	4620      	mov	r0, r4
 23f3896:	f7ff fec6 	bl	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
 23f389a:	2107      	movs	r1, #7
 23f389c:	f3c5 2207 	ubfx	r2, r5, #8, #8
 23f38a0:	4620      	mov	r0, r4
 23f38a2:	f7ff fec0 	bl	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
 23f38a6:	2108      	movs	r1, #8
 23f38a8:	4620      	mov	r0, r4
 23f38aa:	b2ea      	uxtb	r2, r5
 23f38ac:	f7ff febb 	bl	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
 23f38b0:	eddf 7a07 	vldr	s15, [pc, #28]	; 23f38d0 <_ZN7RH_RF9512setFrequencyEf+0x70>
 23f38b4:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
 23f38b8:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
 23f38bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f38c0:	bfac      	ite	ge
 23f38c2:	2301      	movge	r3, #1
 23f38c4:	2300      	movlt	r3, #0
}
 23f38c6:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
 23f38c8:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
 23f38cc:	bd38      	pop	{r3, r4, r5, pc}
 23f38ce:	bf00      	nop
 23f38d0:	4442c000 	.word	0x4442c000
 23f38d4:	00000000 	.word	0x00000000
 23f38d8:	412e8480 	.word	0x412e8480
 23f38dc:	00000000 	.word	0x00000000
 23f38e0:	404e8480 	.word	0x404e8480

023f38e4 <_ZN7RH_RF9511setModeIdleEv>:
{
 23f38e4:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
 23f38e6:	7903      	ldrb	r3, [r0, #4]
{
 23f38e8:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
 23f38ea:	2b02      	cmp	r3, #2
 23f38ec:	d005      	beq.n	23f38fa <_ZN7RH_RF9511setModeIdleEv+0x16>
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
 23f38ee:	2201      	movs	r2, #1
 23f38f0:	4611      	mov	r1, r2
 23f38f2:	f7ff fe98 	bl	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
 23f38f6:	2302      	movs	r3, #2
 23f38f8:	7123      	strb	r3, [r4, #4]
}
 23f38fa:	bd10      	pop	{r4, pc}

023f38fc <_ZN7RH_RF9515handleInterruptEv>:
{
 23f38fc:	b538      	push	{r3, r4, r5, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
 23f38fe:	2112      	movs	r1, #18
{
 23f3900:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
 23f3902:	f7ff fe75 	bl	23f35f0 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t crc_present = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
 23f3906:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
 23f3908:	4605      	mov	r5, r0
    uint8_t crc_present = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
 23f390a:	4620      	mov	r0, r4
 23f390c:	f7ff fe70 	bl	23f35f0 <_ZN11RHSPIDriver7spiReadEh>
    if (_mode == RHModeRx
 23f3910:	7923      	ldrb	r3, [r4, #4]
	&& ((irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
 23f3912:	2b04      	cmp	r3, #4
 23f3914:	d117      	bne.n	23f3946 <_ZN7RH_RF9515handleInterruptEv+0x4a>
	    | !(crc_present & RH_RF95_RX_PAYLOAD_CRC_IS_ON)))
 23f3916:	f080 0040 	eor.w	r0, r0, #64	; 0x40
 23f391a:	f3c0 1080 	ubfx	r0, r0, #6, #1
	&& ((irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
 23f391e:	f005 03a0 	and.w	r3, r5, #160	; 0xa0
 23f3922:	4303      	orrs	r3, r0
 23f3924:	d00f      	beq.n	23f3946 <_ZN7RH_RF9515handleInterruptEv+0x4a>
	_rxBad++;
 23f3926:	8a63      	ldrh	r3, [r4, #18]
 23f3928:	3301      	adds	r3, #1
 23f392a:	b29b      	uxth	r3, r3
 23f392c:	8263      	strh	r3, [r4, #18]
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 23f392e:	22ff      	movs	r2, #255	; 0xff
 23f3930:	2112      	movs	r1, #18
 23f3932:	4620      	mov	r0, r4
 23f3934:	f7ff fe77 	bl	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 23f3938:	4620      	mov	r0, r4
}
 23f393a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 23f393e:	22ff      	movs	r2, #255	; 0xff
 23f3940:	2112      	movs	r1, #18
 23f3942:	f7ff be70 	b.w	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
 23f3946:	7923      	ldrb	r3, [r4, #4]
 23f3948:	2b04      	cmp	r3, #4
 23f394a:	d101      	bne.n	23f3950 <_ZN7RH_RF9515handleInterruptEv+0x54>
 23f394c:	0669      	lsls	r1, r5, #25
 23f394e:	d40d      	bmi.n	23f396c <_ZN7RH_RF9515handleInterruptEv+0x70>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
 23f3950:	7923      	ldrb	r3, [r4, #4]
 23f3952:	2b03      	cmp	r3, #3
 23f3954:	d101      	bne.n	23f395a <_ZN7RH_RF9515handleInterruptEv+0x5e>
 23f3956:	072a      	lsls	r2, r5, #28
 23f3958:	d459      	bmi.n	23f3a0e <_ZN7RH_RF9515handleInterruptEv+0x112>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
 23f395a:	7923      	ldrb	r3, [r4, #4]
 23f395c:	2b05      	cmp	r3, #5
 23f395e:	d1e6      	bne.n	23f392e <_ZN7RH_RF9515handleInterruptEv+0x32>
 23f3960:	076b      	lsls	r3, r5, #29
 23f3962:	d5e4      	bpl.n	23f392e <_ZN7RH_RF9515handleInterruptEv+0x32>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
 23f3964:	f005 0501 	and.w	r5, r5, #1
 23f3968:	7625      	strb	r5, [r4, #24]
 23f396a:	e054      	b.n	23f3a16 <_ZN7RH_RF9515handleInterruptEv+0x11a>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
 23f396c:	2113      	movs	r1, #19
 23f396e:	4620      	mov	r0, r4
 23f3970:	f7ff fe3e 	bl	23f35f0 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
 23f3974:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
 23f3976:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
 23f3978:	4620      	mov	r0, r4
 23f397a:	f7ff fe39 	bl	23f35f0 <_ZN11RHSPIDriver7spiReadEh>
 23f397e:	210d      	movs	r1, #13
 23f3980:	4602      	mov	r2, r0
 23f3982:	4620      	mov	r0, r4
 23f3984:	f7ff fe4f 	bl	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
 23f3988:	462b      	mov	r3, r5
 23f398a:	2100      	movs	r1, #0
 23f398c:	f104 0229 	add.w	r2, r4, #41	; 0x29
 23f3990:	4620      	mov	r0, r4
 23f3992:	f7ff fe6c 	bl	23f366e <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 23f3996:	22ff      	movs	r2, #255	; 0xff
 23f3998:	2112      	movs	r1, #18
 23f399a:	4620      	mov	r0, r4
	_bufLen = len;
 23f399c:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 23f39a0:	f7ff fe41 	bl	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
 23f39a4:	2119      	movs	r1, #25
 23f39a6:	4620      	mov	r0, r4
 23f39a8:	f7ff fe22 	bl	23f35f0 <_ZN11RHSPIDriver7spiReadEh>
 23f39ac:	b240      	sxtb	r0, r0
 23f39ae:	2800      	cmp	r0, #0
 23f39b0:	bfb8      	it	lt
 23f39b2:	3003      	addlt	r0, #3
 23f39b4:	1080      	asrs	r0, r0, #2
 23f39b6:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
 23f39ba:	211a      	movs	r1, #26
 23f39bc:	4620      	mov	r0, r4
 23f39be:	f7ff fe17 	bl	23f35f0 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
 23f39c2:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
 23f39c6:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
 23f39c8:	2b00      	cmp	r3, #0
	    _lastRssi = (int)_lastRssi * 16 / 15;
 23f39ca:	bfa8      	it	ge
 23f39cc:	220f      	movge	r2, #15
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
 23f39ce:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
 23f39d0:	bfa9      	itett	ge
 23f39d2:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
 23f39d4:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
 23f39d6:	b21b      	sxthge	r3, r3
 23f39d8:	011b      	lslge	r3, r3, #4
 23f39da:	bfac      	ite	ge
 23f39dc:	fb93 f3f2 	sdivge	r3, r3, r2
	    _lastRssi = _lastRssi + _lastSNR;
 23f39e0:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
 23f39e2:	b21b      	sxth	r3, r3
 23f39e4:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
 23f39e6:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 23f39ea:	b16b      	cbz	r3, 23f3a08 <_ZN7RH_RF9515handleInterruptEv+0x10c>
	    _lastRssi -= 157;
 23f39ec:	8a23      	ldrh	r3, [r4, #16]
 23f39ee:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
 23f39f0:	b21b      	sxth	r3, r3
 23f39f2:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
 23f39f4:	4620      	mov	r0, r4
 23f39f6:	f7ff ff11 	bl	23f381c <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
 23f39fa:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 23f39fe:	2b00      	cmp	r3, #0
 23f3a00:	d095      	beq.n	23f392e <_ZN7RH_RF9515handleInterruptEv+0x32>
        setModeIdle();
 23f3a02:	f7ff ff6f 	bl	23f38e4 <_ZN7RH_RF9511setModeIdleEv>
 23f3a06:	e792      	b.n	23f392e <_ZN7RH_RF9515handleInterruptEv+0x32>
	    _lastRssi -= 164;
 23f3a08:	8a23      	ldrh	r3, [r4, #16]
 23f3a0a:	3ba4      	subs	r3, #164	; 0xa4
 23f3a0c:	e7f0      	b.n	23f39f0 <_ZN7RH_RF9515handleInterruptEv+0xf4>
	_txGood++;
 23f3a0e:	8ae3      	ldrh	r3, [r4, #22]
 23f3a10:	3301      	adds	r3, #1
 23f3a12:	b29b      	uxth	r3, r3
 23f3a14:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
 23f3a16:	4620      	mov	r0, r4
 23f3a18:	e7f3      	b.n	23f3a02 <_ZN7RH_RF9515handleInterruptEv+0x106>
	...

023f3a1c <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
 23f3a1c:	4b02      	ldr	r3, [pc, #8]	; (23f3a28 <_ZN7RH_RF954isr0Ev+0xc>)
 23f3a1e:	6818      	ldr	r0, [r3, #0]
 23f3a20:	b108      	cbz	r0, 23f3a26 <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
 23f3a22:	f7ff bf6b 	b.w	23f38fc <_ZN7RH_RF9515handleInterruptEv>
}
 23f3a26:	4770      	bx	lr
 23f3a28:	1007ae90 	.word	0x1007ae90

023f3a2c <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
 23f3a2c:	4b02      	ldr	r3, [pc, #8]	; (23f3a38 <_ZN7RH_RF954isr1Ev+0xc>)
 23f3a2e:	6858      	ldr	r0, [r3, #4]
 23f3a30:	b108      	cbz	r0, 23f3a36 <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
 23f3a32:	f7ff bf63 	b.w	23f38fc <_ZN7RH_RF9515handleInterruptEv>
}
 23f3a36:	4770      	bx	lr
 23f3a38:	1007ae90 	.word	0x1007ae90

023f3a3c <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
 23f3a3c:	4b02      	ldr	r3, [pc, #8]	; (23f3a48 <_ZN7RH_RF954isr2Ev+0xc>)
 23f3a3e:	6898      	ldr	r0, [r3, #8]
 23f3a40:	b108      	cbz	r0, 23f3a46 <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
 23f3a42:	f7ff bf5b 	b.w	23f38fc <_ZN7RH_RF9515handleInterruptEv>
}
 23f3a46:	4770      	bx	lr
 23f3a48:	1007ae90 	.word	0x1007ae90

023f3a4c <_ZN7RH_RF959setModeRxEv>:
{
 23f3a4c:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
 23f3a4e:	7903      	ldrb	r3, [r0, #4]
{
 23f3a50:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
 23f3a52:	2b04      	cmp	r3, #4
 23f3a54:	d00a      	beq.n	23f3a6c <_ZN7RH_RF959setModeRxEv+0x20>
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
 23f3a56:	2205      	movs	r2, #5
 23f3a58:	2101      	movs	r1, #1
 23f3a5a:	f7ff fde4 	bl	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
 23f3a5e:	2200      	movs	r2, #0
 23f3a60:	2140      	movs	r1, #64	; 0x40
 23f3a62:	4620      	mov	r0, r4
 23f3a64:	f7ff fddf 	bl	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
 23f3a68:	2304      	movs	r3, #4
 23f3a6a:	7123      	strb	r3, [r4, #4]
}
 23f3a6c:	bd10      	pop	{r4, pc}

023f3a6e <_ZN7RH_RF959availableEv>:
{
 23f3a6e:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
 23f3a70:	7903      	ldrb	r3, [r0, #4]
{
 23f3a72:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
 23f3a74:	2b03      	cmp	r3, #3
 23f3a76:	d005      	beq.n	23f3a84 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
 23f3a78:	f7ff ffe8 	bl	23f3a4c <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
 23f3a7c:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
 23f3a80:	b2c0      	uxtb	r0, r0
}
 23f3a82:	bd10      	pop	{r4, pc}
	return false;
 23f3a84:	2000      	movs	r0, #0
 23f3a86:	e7fc      	b.n	23f3a82 <_ZN7RH_RF959availableEv+0x14>

023f3a88 <_ZN7RH_RF959setModeTxEv>:
{
 23f3a88:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
 23f3a8a:	7903      	ldrb	r3, [r0, #4]
{
 23f3a8c:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
 23f3a8e:	2b03      	cmp	r3, #3
 23f3a90:	d00a      	beq.n	23f3aa8 <_ZN7RH_RF959setModeTxEv+0x20>
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
 23f3a92:	2203      	movs	r2, #3
 23f3a94:	2101      	movs	r1, #1
 23f3a96:	f7ff fdc6 	bl	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
 23f3a9a:	2240      	movs	r2, #64	; 0x40
 23f3a9c:	4620      	mov	r0, r4
 23f3a9e:	4611      	mov	r1, r2
 23f3aa0:	f7ff fdc1 	bl	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
 23f3aa4:	2303      	movs	r3, #3
 23f3aa6:	7123      	strb	r3, [r4, #4]
}
 23f3aa8:	bd10      	pop	{r4, pc}

023f3aaa <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
 23f3aaa:	2afb      	cmp	r2, #251	; 0xfb
{
 23f3aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f3aae:	4604      	mov	r4, r0
 23f3ab0:	460f      	mov	r7, r1
 23f3ab2:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
 23f3ab4:	d902      	bls.n	23f3abc <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
 23f3ab6:	2600      	movs	r6, #0
}
 23f3ab8:	4630      	mov	r0, r6
 23f3aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
 23f3abc:	6803      	ldr	r3, [r0, #0]
 23f3abe:	699b      	ldr	r3, [r3, #24]
 23f3ac0:	4798      	blx	r3
    setModeIdle();
 23f3ac2:	4620      	mov	r0, r4
 23f3ac4:	f7ff ff0e 	bl	23f38e4 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
 23f3ac8:	6823      	ldr	r3, [r4, #0]
 23f3aca:	4620      	mov	r0, r4
 23f3acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f3ace:	4798      	blx	r3
 23f3ad0:	4606      	mov	r6, r0
 23f3ad2:	2800      	cmp	r0, #0
 23f3ad4:	d0ef      	beq.n	23f3ab6 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
 23f3ad6:	2200      	movs	r2, #0
 23f3ad8:	210d      	movs	r1, #13
 23f3ada:	4620      	mov	r0, r4
 23f3adc:	f7ff fda3 	bl	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
 23f3ae0:	7ae2      	ldrb	r2, [r4, #11]
 23f3ae2:	2100      	movs	r1, #0
 23f3ae4:	4620      	mov	r0, r4
 23f3ae6:	f7ff fd9e 	bl	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
 23f3aea:	7b22      	ldrb	r2, [r4, #12]
 23f3aec:	2100      	movs	r1, #0
 23f3aee:	4620      	mov	r0, r4
 23f3af0:	f7ff fd99 	bl	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
 23f3af4:	7b62      	ldrb	r2, [r4, #13]
 23f3af6:	2100      	movs	r1, #0
 23f3af8:	4620      	mov	r0, r4
 23f3afa:	f7ff fd94 	bl	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
 23f3afe:	7ba2      	ldrb	r2, [r4, #14]
 23f3b00:	2100      	movs	r1, #0
 23f3b02:	4620      	mov	r0, r4
 23f3b04:	f7ff fd8f 	bl	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
 23f3b08:	462b      	mov	r3, r5
 23f3b0a:	463a      	mov	r2, r7
 23f3b0c:	2100      	movs	r1, #0
 23f3b0e:	4620      	mov	r0, r4
 23f3b10:	f7ff fdd8 	bl	23f36c4 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
 23f3b14:	1d2a      	adds	r2, r5, #4
 23f3b16:	2122      	movs	r1, #34	; 0x22
 23f3b18:	4620      	mov	r0, r4
 23f3b1a:	b2d2      	uxtb	r2, r2
 23f3b1c:	f7ff fd83 	bl	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
 23f3b20:	4620      	mov	r0, r4
 23f3b22:	f7ff ffb1 	bl	23f3a88 <_ZN7RH_RF959setModeTxEv>
    return true;
 23f3b26:	e7c7      	b.n	23f3ab8 <_ZN7RH_RF954sendEPKhh+0xe>

023f3b28 <_ZN7RH_RF9510setTxPowerEab>:
    if (useRFO)
 23f3b28:	b15a      	cbz	r2, 23f3b42 <_ZN7RH_RF9510setTxPowerEab+0x1a>
	if (power > 14)
 23f3b2a:	ea41 72e1 	orr.w	r2, r1, r1, asr #31
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | (power + 1));
 23f3b2e:	2a0e      	cmp	r2, #14
 23f3b30:	bfa8      	it	ge
 23f3b32:	220e      	movge	r2, #14
 23f3b34:	3201      	adds	r2, #1
 23f3b36:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 23f3b3a:	2109      	movs	r1, #9
 23f3b3c:	b2d2      	uxtb	r2, r2
 23f3b3e:	f7ff bd72 	b.w	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
 23f3b42:	f7ff be34 	b.w	23f37ae <_ZN7RH_RF9510setTxPowerEab.part.0>

023f3b46 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
 23f3b46:	b538      	push	{r3, r4, r5, lr}
 23f3b48:	4605      	mov	r5, r0
 23f3b4a:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
 23f3b4c:	780a      	ldrb	r2, [r1, #0]
 23f3b4e:	211d      	movs	r1, #29
 23f3b50:	f7ff fd69 	bl	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
 23f3b54:	7862      	ldrb	r2, [r4, #1]
 23f3b56:	211e      	movs	r1, #30
 23f3b58:	4628      	mov	r0, r5
 23f3b5a:	f7ff fd64 	bl	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
 23f3b5e:	4628      	mov	r0, r5
 23f3b60:	78a2      	ldrb	r2, [r4, #2]
 23f3b62:	2126      	movs	r1, #38	; 0x26
}
 23f3b64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
 23f3b68:	f7ff bd5d 	b.w	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>

023f3b6c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
 23f3b6c:	2904      	cmp	r1, #4
{
 23f3b6e:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
 23f3b70:	d80f      	bhi.n	23f3b92 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
 23f3b72:	4b09      	ldr	r3, [pc, #36]	; (23f3b98 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
 23f3b74:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 23f3b78:	185c      	adds	r4, r3, r1
 23f3b7a:	5a5a      	ldrh	r2, [r3, r1]
 23f3b7c:	78a3      	ldrb	r3, [r4, #2]
    setModemRegisters(&cfg);
 23f3b7e:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
 23f3b80:	f8ad 2004 	strh.w	r2, [sp, #4]
 23f3b84:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
 23f3b88:	f7ff ffdd 	bl	23f3b46 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
 23f3b8c:	2001      	movs	r0, #1
}
 23f3b8e:	b002      	add	sp, #8
 23f3b90:	bd10      	pop	{r4, pc}
        return false;
 23f3b92:	2000      	movs	r0, #0
 23f3b94:	e7fb      	b.n	23f3b8e <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
 23f3b96:	bf00      	nop
 23f3b98:	023ff8c4 	.word	0x023ff8c4

023f3b9c <_ZN7RH_RF9517setPreambleLengthEt>:
{
 23f3b9c:	b538      	push	{r3, r4, r5, lr}
 23f3b9e:	4605      	mov	r5, r0
 23f3ba0:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
 23f3ba2:	0a0a      	lsrs	r2, r1, #8
 23f3ba4:	2120      	movs	r1, #32
 23f3ba6:	f7ff fd3e 	bl	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
 23f3baa:	4628      	mov	r0, r5
 23f3bac:	b2e2      	uxtb	r2, r4
 23f3bae:	2121      	movs	r1, #33	; 0x21
}
 23f3bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
 23f3bb4:	f7ff bd37 	b.w	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>

023f3bb8 <_ZN7RH_RF954initEv>:
{
 23f3bb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f3bba:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
 23f3bbc:	f7ff fcf2 	bl	23f35a4 <_ZN11RHSPIDriver4initEv>
 23f3bc0:	4605      	mov	r5, r0
 23f3bc2:	b918      	cbnz	r0, 23f3bcc <_ZN7RH_RF954initEv+0x14>
	return false;
 23f3bc4:	2500      	movs	r5, #0
}
 23f3bc6:	4628      	mov	r0, r5
 23f3bc8:	b002      	add	sp, #8
 23f3bca:	bd70      	pop	{r4, r5, r6, pc}
    int interruptNumber = digitalPinToInterrupt(_interruptPin);
 23f3bcc:	f894 6026 	ldrb.w	r6, [r4, #38]	; 0x26
    spiUsingInterrupt(interruptNumber);
 23f3bd0:	4620      	mov	r0, r4
 23f3bd2:	4631      	mov	r1, r6
 23f3bd4:	f7ff fda0 	bl	23f3718 <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
 23f3bd8:	2280      	movs	r2, #128	; 0x80
 23f3bda:	2101      	movs	r1, #1
 23f3bdc:	4620      	mov	r0, r4
 23f3bde:	f7ff fd22 	bl	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
 23f3be2:	200a      	movs	r0, #10
 23f3be4:	f004 fb6e 	bl	23f82c4 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
 23f3be8:	2101      	movs	r1, #1
 23f3bea:	4620      	mov	r0, r4
 23f3bec:	f7ff fd00 	bl	23f35f0 <_ZN11RHSPIDriver7spiReadEh>
 23f3bf0:	2880      	cmp	r0, #128	; 0x80
 23f3bf2:	d1e7      	bne.n	23f3bc4 <_ZN7RH_RF954initEv+0xc>
    pinMode(_interruptPin, INPUT); 
 23f3bf4:	2100      	movs	r1, #0
 23f3bf6:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 23f3bfa:	f006 fae9 	bl	23fa1d0 <pinMode>
    if (_myInterruptIndex == 0xff)
 23f3bfe:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 23f3c02:	2bff      	cmp	r3, #255	; 0xff
 23f3c04:	d107      	bne.n	23f3c16 <_ZN7RH_RF954initEv+0x5e>
	if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
 23f3c06:	4a23      	ldr	r2, [pc, #140]	; (23f3c94 <_ZN7RH_RF954initEv+0xdc>)
 23f3c08:	7813      	ldrb	r3, [r2, #0]
 23f3c0a:	2b03      	cmp	r3, #3
 23f3c0c:	d8da      	bhi.n	23f3bc4 <_ZN7RH_RF954initEv+0xc>
	    _myInterruptIndex = _interruptCount++;
 23f3c0e:	1c59      	adds	r1, r3, #1
 23f3c10:	7011      	strb	r1, [r2, #0]
 23f3c12:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    _deviceForInterrupt[_myInterruptIndex] = this;
 23f3c16:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 23f3c1a:	4b1f      	ldr	r3, [pc, #124]	; (23f3c98 <_ZN7RH_RF954initEv+0xe0>)
 23f3c1c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    if (_myInterruptIndex == 0)
 23f3c20:	bb32      	cbnz	r2, 23f3c70 <_ZN7RH_RF954initEv+0xb8>
	attachInterrupt(interruptNumber, isr0, RISING);
 23f3c22:	9200      	str	r2, [sp, #0]
 23f3c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f3c28:	2201      	movs	r2, #1
 23f3c2a:	491c      	ldr	r1, [pc, #112]	; (23f3c9c <_ZN7RH_RF954initEv+0xe4>)
	attachInterrupt(interruptNumber, isr2, RISING);
 23f3c2c:	4630      	mov	r0, r6
 23f3c2e:	f005 f995 	bl	23f8f5c <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
 23f3c32:	2200      	movs	r2, #0
 23f3c34:	210e      	movs	r1, #14
 23f3c36:	4620      	mov	r0, r4
 23f3c38:	f7ff fcf5 	bl	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
 23f3c3c:	2200      	movs	r2, #0
 23f3c3e:	210f      	movs	r1, #15
 23f3c40:	4620      	mov	r0, r4
 23f3c42:	f7ff fcf0 	bl	23f3626 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
 23f3c46:	4620      	mov	r0, r4
 23f3c48:	f7ff fe4c 	bl	23f38e4 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
 23f3c4c:	2100      	movs	r1, #0
 23f3c4e:	4620      	mov	r0, r4
 23f3c50:	f7ff ff8c 	bl	23f3b6c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
 23f3c54:	2108      	movs	r1, #8
 23f3c56:	4620      	mov	r0, r4
 23f3c58:	f7ff ffa0 	bl	23f3b9c <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
 23f3c5c:	ed9f 0a10 	vldr	s0, [pc, #64]	; 23f3ca0 <_ZN7RH_RF954initEv+0xe8>
 23f3c60:	4620      	mov	r0, r4
 23f3c62:	f7ff fdfd 	bl	23f3860 <_ZN7RH_RF9512setFrequencyEf>
    if (useRFO)
 23f3c66:	210d      	movs	r1, #13
 23f3c68:	4620      	mov	r0, r4
 23f3c6a:	f7ff fda0 	bl	23f37ae <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
 23f3c6e:	e7aa      	b.n	23f3bc6 <_ZN7RH_RF954initEv+0xe>
    else if (_myInterruptIndex == 1)
 23f3c70:	2a01      	cmp	r2, #1
 23f3c72:	f04f 0300 	mov.w	r3, #0
 23f3c76:	d104      	bne.n	23f3c82 <_ZN7RH_RF954initEv+0xca>
	attachInterrupt(interruptNumber, isr1, RISING);
 23f3c78:	9300      	str	r3, [sp, #0]
 23f3c7a:	490a      	ldr	r1, [pc, #40]	; (23f3ca4 <_ZN7RH_RF954initEv+0xec>)
 23f3c7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f3c80:	e7d4      	b.n	23f3c2c <_ZN7RH_RF954initEv+0x74>
    else if (_myInterruptIndex == 2)
 23f3c82:	2a02      	cmp	r2, #2
 23f3c84:	d19e      	bne.n	23f3bc4 <_ZN7RH_RF954initEv+0xc>
	attachInterrupt(interruptNumber, isr2, RISING);
 23f3c86:	9300      	str	r3, [sp, #0]
 23f3c88:	2201      	movs	r2, #1
 23f3c8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f3c8e:	4906      	ldr	r1, [pc, #24]	; (23f3ca8 <_ZN7RH_RF954initEv+0xf0>)
 23f3c90:	e7cc      	b.n	23f3c2c <_ZN7RH_RF954initEv+0x74>
 23f3c92:	bf00      	nop
 23f3c94:	1007ae8c 	.word	0x1007ae8c
 23f3c98:	1007ae90 	.word	0x1007ae90
 23f3c9c:	023f3a1d 	.word	0x023f3a1d
 23f3ca0:	43d90000 	.word	0x43d90000
 23f3ca4:	023f3a2d 	.word	0x023f3a2d
 23f3ca8:	023f3a3d 	.word	0x023f3a3d

023f3cac <_ZL9date2daysthh>:
*/
/**************************************************************************/
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
  if (y >= 2000U)
    y -= 2000U;
  uint16_t days = d;
 23f3cac:	2300      	movs	r3, #0
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
 23f3cae:	b530      	push	{r4, r5, lr}
 23f3cb0:	4c0e      	ldr	r4, [pc, #56]	; (23f3cec <_ZL9date2daysthh+0x40>)
  for (uint8_t i = 1; i < m; ++i)
 23f3cb2:	3301      	adds	r3, #1
 23f3cb4:	b2dd      	uxtb	r5, r3
 23f3cb6:	428d      	cmp	r5, r1
 23f3cb8:	d204      	bcs.n	23f3cc4 <_ZL9date2daysthh+0x18>
    days += pgm_read_byte(daysInMonth + i - 1);
 23f3cba:	f814 5b01 	ldrb.w	r5, [r4], #1
 23f3cbe:	442a      	add	r2, r5
 23f3cc0:	b292      	uxth	r2, r2
  for (uint8_t i = 1; i < m; ++i)
 23f3cc2:	e7f6      	b.n	23f3cb2 <_ZL9date2daysthh+0x6>
  if (m > 2 && y % 4 == 0)
 23f3cc4:	2902      	cmp	r1, #2
 23f3cc6:	d903      	bls.n	23f3cd0 <_ZL9date2daysthh+0x24>
 23f3cc8:	0783      	lsls	r3, r0, #30
    ++days;
 23f3cca:	bf04      	itt	eq
 23f3ccc:	3201      	addeq	r2, #1
 23f3cce:	b292      	uxtheq	r2, r2
  return days + 365 * y + (y + 3) / 4 - 1;
 23f3cd0:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 23f3cd4:	1cc3      	adds	r3, r0, #3
 23f3cd6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 23f3cda:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 23f3cde:	f3c3 038d 	ubfx	r3, r3, #2, #14
 23f3ce2:	3801      	subs	r0, #1
 23f3ce4:	4418      	add	r0, r3
 23f3ce6:	4410      	add	r0, r2
}
 23f3ce8:	b280      	uxth	r0, r0
 23f3cea:	bd30      	pop	{r4, r5, pc}
 23f3cec:	023ff948 	.word	0x023ff948

023f3cf0 <_ZN8DateTimeC1Em>:
    @see The `unixtime()` method is the converse of this constructor.

    @param t Time elapsed in seconds since 1970-01-01 00:00:00.
*/
/**************************************************************************/
DateTime::DateTime(uint32_t t) {
 23f3cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
  t -= SECONDS_FROM_1970_TO_2000; // bring to 2000 timestamp from 1970

  ss = t % 60;
 23f3cf2:	243c      	movs	r4, #60	; 0x3c
  t -= SECONDS_FROM_1970_TO_2000; // bring to 2000 timestamp from 1970
 23f3cf4:	4b21      	ldr	r3, [pc, #132]	; (23f3d7c <_ZN8DateTimeC1Em+0x8c>)
  hh = t % 24;
  uint16_t days = t / 24;
  uint8_t leap;
  for (yOff = 0;; ++yOff) {
    leap = yOff % 4 == 0;
    if (days < 365U + leap)
 23f3cf6:	f240 166d 	movw	r6, #365	; 0x16d
  t -= SECONDS_FROM_1970_TO_2000; // bring to 2000 timestamp from 1970
 23f3cfa:	440b      	add	r3, r1
  ss = t % 60;
 23f3cfc:	fbb3 f1f4 	udiv	r1, r3, r4
  mm = t % 60;
 23f3d00:	fbb1 f2f4 	udiv	r2, r1, r4
  ss = t % 60;
 23f3d04:	fb04 3311 	mls	r3, r4, r1, r3
  mm = t % 60;
 23f3d08:	fb04 1112 	mls	r1, r4, r2, r1
 23f3d0c:	7101      	strb	r1, [r0, #4]
  hh = t % 24;
 23f3d0e:	2118      	movs	r1, #24
  ss = t % 60;
 23f3d10:	7143      	strb	r3, [r0, #5]
  hh = t % 24;
 23f3d12:	fbb2 f3f1 	udiv	r3, r2, r1
 23f3d16:	fb01 2213 	mls	r2, r1, r3, r2
 23f3d1a:	70c2      	strb	r2, [r0, #3]
  for (yOff = 0;; ++yOff) {
 23f3d1c:	2200      	movs	r2, #0
      break;
    days -= 365 + leap;
 23f3d1e:	f64f 6493 	movw	r4, #65171	; 0xfe93
  uint16_t days = t / 24;
 23f3d22:	b29b      	uxth	r3, r3
  for (yOff = 0;; ++yOff) {
 23f3d24:	7002      	strb	r2, [r0, #0]
    leap = yOff % 4 == 0;
 23f3d26:	7802      	ldrb	r2, [r0, #0]
 23f3d28:	f012 0503 	ands.w	r5, r2, #3
    if (days < 365U + leap)
 23f3d2c:	bf13      	iteet	ne
 23f3d2e:	4637      	movne	r7, r6
 23f3d30:	f44f 77b7 	moveq.w	r7, #366	; 0x16e
 23f3d34:	2101      	moveq	r1, #1
 23f3d36:	2100      	movne	r1, #0
 23f3d38:	42bb      	cmp	r3, r7
 23f3d3a:	d305      	bcc.n	23f3d48 <_ZN8DateTimeC1Em+0x58>
    days -= 365 + leap;
 23f3d3c:	1a61      	subs	r1, r4, r1
 23f3d3e:	440b      	add	r3, r1
  for (yOff = 0;; ++yOff) {
 23f3d40:	3201      	adds	r2, #1
    days -= 365 + leap;
 23f3d42:	b29b      	uxth	r3, r3
  for (yOff = 0;; ++yOff) {
 23f3d44:	7002      	strb	r2, [r0, #0]
    leap = yOff % 4 == 0;
 23f3d46:	e7ee      	b.n	23f3d26 <_ZN8DateTimeC1Em+0x36>
  }
  for (m = 1; m < 12; ++m) {
 23f3d48:	2201      	movs	r2, #1
    uint8_t daysPerMonth = pgm_read_byte(daysInMonth + m - 1);
 23f3d4a:	4e0d      	ldr	r6, [pc, #52]	; (23f3d80 <_ZN8DateTimeC1Em+0x90>)
  for (m = 1; m < 12; ++m) {
 23f3d4c:	7042      	strb	r2, [r0, #1]
 23f3d4e:	7842      	ldrb	r2, [r0, #1]
 23f3d50:	2a0b      	cmp	r2, #11
 23f3d52:	d80f      	bhi.n	23f3d74 <_ZN8DateTimeC1Em+0x84>
    uint8_t daysPerMonth = pgm_read_byte(daysInMonth + m - 1);
 23f3d54:	18b1      	adds	r1, r6, r2
 23f3d56:	f811 1c01 	ldrb.w	r1, [r1, #-1]
    if (leap && m == 2)
 23f3d5a:	b91d      	cbnz	r5, 23f3d64 <_ZN8DateTimeC1Em+0x74>
 23f3d5c:	2a02      	cmp	r2, #2
      ++daysPerMonth;
 23f3d5e:	bf04      	itt	eq
 23f3d60:	3101      	addeq	r1, #1
 23f3d62:	b2c9      	uxtbeq	r1, r1
    if (days < daysPerMonth)
 23f3d64:	4299      	cmp	r1, r3
 23f3d66:	b28c      	uxth	r4, r1
 23f3d68:	d804      	bhi.n	23f3d74 <_ZN8DateTimeC1Em+0x84>
      break;
    days -= daysPerMonth;
 23f3d6a:	1b1b      	subs	r3, r3, r4
  for (m = 1; m < 12; ++m) {
 23f3d6c:	3201      	adds	r2, #1
    days -= daysPerMonth;
 23f3d6e:	b29b      	uxth	r3, r3
  for (m = 1; m < 12; ++m) {
 23f3d70:	7042      	strb	r2, [r0, #1]
 23f3d72:	e7ec      	b.n	23f3d4e <_ZN8DateTimeC1Em+0x5e>
  }
  d = days + 1;
 23f3d74:	3301      	adds	r3, #1
 23f3d76:	7083      	strb	r3, [r0, #2]
}
 23f3d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f3d7a:	bf00      	nop
 23f3d7c:	c792bc80 	.word	0xc792bc80
 23f3d80:	023ff948 	.word	0x023ff948

023f3d84 <_ZN8DateTimeC1Ethhhhh>:
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    year -= 2000U;
  yOff = year;
  m = month;
  d = day;
 23f3d84:	7083      	strb	r3, [r0, #2]
  hh = hour;
 23f3d86:	f89d 3000 	ldrb.w	r3, [sp]
  if (year >= 2000U)
 23f3d8a:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
  hh = hour;
 23f3d8e:	70c3      	strb	r3, [r0, #3]
  mm = min;
 23f3d90:	f89d 3004 	ldrb.w	r3, [sp, #4]
    year -= 2000U;
 23f3d94:	bf28      	it	cs
 23f3d96:	f5a1 61fa 	subcs.w	r1, r1, #2000	; 0x7d0
  mm = min;
 23f3d9a:	7103      	strb	r3, [r0, #4]
  ss = sec;
 23f3d9c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    year -= 2000U;
 23f3da0:	bf28      	it	cs
 23f3da2:	b289      	uxthcs	r1, r1
  yOff = year;
 23f3da4:	7001      	strb	r1, [r0, #0]
  m = month;
 23f3da6:	7042      	strb	r2, [r0, #1]
  ss = sec;
 23f3da8:	7143      	strb	r3, [r0, #5]
}
 23f3daa:	4770      	bx	lr

023f3dac <_ZNK8DateTime8unixtimeEv>:
        this method.

    @return Number of seconds since 1970-01-01 00:00:00.
*/
/**************************************************************************/
uint32_t DateTime::unixtime(void) const {
 23f3dac:	b510      	push	{r4, lr}
 23f3dae:	4604      	mov	r4, r0
  uint32_t t;
  uint16_t days = date2days(yOff, m, d);
 23f3db0:	7882      	ldrb	r2, [r0, #2]
 23f3db2:	7841      	ldrb	r1, [r0, #1]
 23f3db4:	7800      	ldrb	r0, [r0, #0]
 23f3db6:	f7ff ff79 	bl	23f3cac <_ZL9date2daysthh>
  return ((days * 24UL + h) * 60 + m) * 60 + s;
 23f3dba:	2218      	movs	r2, #24
 23f3dbc:	78e3      	ldrb	r3, [r4, #3]
 23f3dbe:	7961      	ldrb	r1, [r4, #5]
 23f3dc0:	fb02 3000 	mla	r0, r2, r0, r3
 23f3dc4:	223c      	movs	r2, #60	; 0x3c
 23f3dc6:	7923      	ldrb	r3, [r4, #4]
 23f3dc8:	fb02 3000 	mla	r0, r2, r0, r3
  t = time2ulong(days, hh, mm, ss);
  t += SECONDS_FROM_1970_TO_2000; // seconds from 1970 to 2000
 23f3dcc:	4b02      	ldr	r3, [pc, #8]	; (23f3dd8 <_ZNK8DateTime8unixtimeEv+0x2c>)
 23f3dce:	440b      	add	r3, r1

  return t;
}
 23f3dd0:	fb02 3000 	mla	r0, r2, r0, r3
 23f3dd4:	bd10      	pop	{r4, pc}
 23f3dd6:	bf00      	nop
 23f3dd8:	386d4380 	.word	0x386d4380

023f3ddc <_ZN11RTC_PCF85235beginEP7TwoWire>:
    @brief  Start I2C for the PCF8523 and test succesful connection
    @return True if Wire can find PCF8523 or false otherwise.
*/
/**************************************************************************/

boolean RTC_PCF8523::begin(TwoWire *wireInstance) {
 23f3ddc:	b510      	push	{r4, lr}
 23f3dde:	4604      	mov	r4, r0
 23f3de0:	4608      	mov	r0, r1
  RTCWireBus = wireInstance;
 23f3de2:	6021      	str	r1, [r4, #0]
  RTCWireBus->begin();
 23f3de4:	f005 f83e 	bl	23f8e64 <_ZN7TwoWire5beginEv>
  RTCWireBus->beginTransmission(PCF8523_ADDRESS);
 23f3de8:	2168      	movs	r1, #104	; 0x68
 23f3dea:	6820      	ldr	r0, [r4, #0]
 23f3dec:	f005 f868 	bl	23f8ec0 <_ZN7TwoWire17beginTransmissionEi>
  if (RTCWireBus->endTransmission() == 0)
 23f3df0:	6820      	ldr	r0, [r4, #0]
 23f3df2:	f005 f86c 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>
    return true;
  return false;
}
 23f3df6:	fab0 f080 	clz	r0, r0
 23f3dfa:	0940      	lsrs	r0, r0, #5
 23f3dfc:	bd10      	pop	{r4, pc}

023f3dfe <_ZN11RTC_PCF85236adjustERK8DateTime>:
/*!
    @brief  Set the date and time, set battery switchover mode
    @param dt DateTime to set
*/
/**************************************************************************/
void RTC_PCF8523::adjust(const DateTime &dt) {
 23f3dfe:	b570      	push	{r4, r5, r6, lr}
 23f3e00:	4604      	mov	r4, r0
 23f3e02:	460e      	mov	r6, r1
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 23f3e04:	250a      	movs	r5, #10
  RTCWireBus->beginTransmission(PCF8523_ADDRESS);
 23f3e06:	2168      	movs	r1, #104	; 0x68
 23f3e08:	6800      	ldr	r0, [r0, #0]
 23f3e0a:	f005 f859 	bl	23f8ec0 <_ZN7TwoWire17beginTransmissionEi>
  RTCWireBus->_I2C_WRITE((byte)3); // start at location 3
 23f3e0e:	6820      	ldr	r0, [r4, #0]
 23f3e10:	2103      	movs	r1, #3
 23f3e12:	6803      	ldr	r3, [r0, #0]
 23f3e14:	689b      	ldr	r3, [r3, #8]
 23f3e16:	4798      	blx	r3
  uint8_t minute() const { return mm; }
  /*!
      @brief  Return the second.
      @return Second (0--59).
  */
  uint8_t second() const { return ss; }
 23f3e18:	7971      	ldrb	r1, [r6, #5]
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.second()));
 23f3e1a:	6820      	ldr	r0, [r4, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 23f3e1c:	fbb1 f3f5 	udiv	r3, r1, r5
 23f3e20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f3e24:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.second()));
 23f3e28:	6803      	ldr	r3, [r0, #0]
 23f3e2a:	b2c9      	uxtb	r1, r1
 23f3e2c:	689b      	ldr	r3, [r3, #8]
 23f3e2e:	4798      	blx	r3
  uint8_t minute() const { return mm; }
 23f3e30:	7931      	ldrb	r1, [r6, #4]
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.minute()));
 23f3e32:	6820      	ldr	r0, [r4, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 23f3e34:	fbb1 f3f5 	udiv	r3, r1, r5
 23f3e38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f3e3c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.minute()));
 23f3e40:	6803      	ldr	r3, [r0, #0]
 23f3e42:	b2c9      	uxtb	r1, r1
 23f3e44:	689b      	ldr	r3, [r3, #8]
 23f3e46:	4798      	blx	r3
  uint8_t hour() const { return hh; }
 23f3e48:	78f1      	ldrb	r1, [r6, #3]
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.hour()));
 23f3e4a:	6820      	ldr	r0, [r4, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 23f3e4c:	fbb1 f3f5 	udiv	r3, r1, r5
 23f3e50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f3e54:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.hour()));
 23f3e58:	6803      	ldr	r3, [r0, #0]
 23f3e5a:	b2c9      	uxtb	r1, r1
 23f3e5c:	689b      	ldr	r3, [r3, #8]
 23f3e5e:	4798      	blx	r3
  uint8_t day() const { return d; }
 23f3e60:	78b1      	ldrb	r1, [r6, #2]
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.day()));
 23f3e62:	6820      	ldr	r0, [r4, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 23f3e64:	fbb1 f3f5 	udiv	r3, r1, r5
 23f3e68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f3e6c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.day()));
 23f3e70:	6803      	ldr	r3, [r0, #0]
 23f3e72:	b2c9      	uxtb	r1, r1
 23f3e74:	689b      	ldr	r3, [r3, #8]
 23f3e76:	4798      	blx	r3
  RTCWireBus->_I2C_WRITE(bin2bcd(0)); // skip weekdays
 23f3e78:	6820      	ldr	r0, [r4, #0]
 23f3e7a:	2100      	movs	r1, #0
 23f3e7c:	6803      	ldr	r3, [r0, #0]
 23f3e7e:	689b      	ldr	r3, [r3, #8]
 23f3e80:	4798      	blx	r3
  uint8_t month() const { return m; }
 23f3e82:	7871      	ldrb	r1, [r6, #1]
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.month()));
 23f3e84:	6820      	ldr	r0, [r4, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 23f3e86:	fbb1 f3f5 	udiv	r3, r1, r5
 23f3e8a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f3e8e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.month()));
 23f3e92:	6803      	ldr	r3, [r0, #0]
 23f3e94:	b2c9      	uxtb	r1, r1
 23f3e96:	689b      	ldr	r3, [r3, #8]
 23f3e98:	4798      	blx	r3
  uint16_t year() const { return 2000U + yOff; }
 23f3e9a:	7831      	ldrb	r1, [r6, #0]
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.year() - 2000U));
 23f3e9c:	6820      	ldr	r0, [r4, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 23f3e9e:	fbb1 f5f5 	udiv	r5, r1, r5
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.year() - 2000U));
 23f3ea2:	6803      	ldr	r3, [r0, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 23f3ea4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 23f3ea8:	eb01 0145 	add.w	r1, r1, r5, lsl #1
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.year() - 2000U));
 23f3eac:	689b      	ldr	r3, [r3, #8]
 23f3eae:	b2c9      	uxtb	r1, r1
 23f3eb0:	4798      	blx	r3
  RTCWireBus->endTransmission();
 23f3eb2:	6820      	ldr	r0, [r4, #0]
 23f3eb4:	f005 f80b 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>

  // set to battery switchover mode
  RTCWireBus->beginTransmission(PCF8523_ADDRESS);
 23f3eb8:	6820      	ldr	r0, [r4, #0]
 23f3eba:	2168      	movs	r1, #104	; 0x68
 23f3ebc:	f005 f800 	bl	23f8ec0 <_ZN7TwoWire17beginTransmissionEi>
  RTCWireBus->_I2C_WRITE((byte)PCF8523_CONTROL_3);
 23f3ec0:	6820      	ldr	r0, [r4, #0]
 23f3ec2:	2102      	movs	r1, #2
 23f3ec4:	6803      	ldr	r3, [r0, #0]
 23f3ec6:	689b      	ldr	r3, [r3, #8]
 23f3ec8:	4798      	blx	r3
  RTCWireBus->_I2C_WRITE((byte)0x00);
 23f3eca:	6820      	ldr	r0, [r4, #0]
 23f3ecc:	2100      	movs	r1, #0
 23f3ece:	6803      	ldr	r3, [r0, #0]
 23f3ed0:	689b      	ldr	r3, [r3, #8]
 23f3ed2:	4798      	blx	r3
  RTCWireBus->endTransmission();
 23f3ed4:	6820      	ldr	r0, [r4, #0]
}
 23f3ed6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  RTCWireBus->endTransmission();
 23f3eda:	f004 bff8 	b.w	23f8ece <_ZN7TwoWire15endTransmissionEv>

023f3ede <_ZN11RTC_PCF85233nowEv>:
/*!
    @brief  Get the current date/time
    @return DateTime object containing the current date/time
*/
/**************************************************************************/
DateTime RTC_PCF8523::now() {
 23f3ede:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f3ee2:	460c      	mov	r4, r1
 23f3ee4:	4605      	mov	r5, r0
  RTCWireBus->beginTransmission(PCF8523_ADDRESS);
 23f3ee6:	2168      	movs	r1, #104	; 0x68
 23f3ee8:	6820      	ldr	r0, [r4, #0]
 23f3eea:	f004 ffe9 	bl	23f8ec0 <_ZN7TwoWire17beginTransmissionEi>
  RTCWireBus->_I2C_WRITE((byte)3);
 23f3eee:	6820      	ldr	r0, [r4, #0]
 23f3ef0:	2103      	movs	r1, #3
 23f3ef2:	6803      	ldr	r3, [r0, #0]
 23f3ef4:	689b      	ldr	r3, [r3, #8]
 23f3ef6:	4798      	blx	r3
  RTCWireBus->endTransmission();
 23f3ef8:	6820      	ldr	r0, [r4, #0]
 23f3efa:	f004 ffe8 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>

  RTCWireBus->requestFrom(PCF8523_ADDRESS, 7);
 23f3efe:	2207      	movs	r2, #7
 23f3f00:	2168      	movs	r1, #104	; 0x68
 23f3f02:	6820      	ldr	r0, [r4, #0]
 23f3f04:	f004 ffd5 	bl	23f8eb2 <_ZN7TwoWire11requestFromEhj>
  uint8_t ss = bcd2bin(RTCWireBus->_I2C_READ() & 0x7F);
 23f3f08:	6820      	ldr	r0, [r4, #0]
 23f3f0a:	6803      	ldr	r3, [r0, #0]
 23f3f0c:	695b      	ldr	r3, [r3, #20]
 23f3f0e:	4798      	blx	r3
 23f3f10:	f000 097f 	and.w	r9, r0, #127	; 0x7f
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
 23f3f14:	f3c0 1002 	ubfx	r0, r0, #4, #3
 23f3f18:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
 23f3f1c:	eb09 0040 	add.w	r0, r9, r0, lsl #1
 23f3f20:	fa5f f980 	uxtb.w	r9, r0
  uint8_t mm = bcd2bin(RTCWireBus->_I2C_READ());
 23f3f24:	6820      	ldr	r0, [r4, #0]
 23f3f26:	6803      	ldr	r3, [r0, #0]
 23f3f28:	695b      	ldr	r3, [r3, #20]
 23f3f2a:	4798      	blx	r3
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
 23f3f2c:	f3c0 1603 	ubfx	r6, r0, #4, #4
 23f3f30:	eba6 0686 	sub.w	r6, r6, r6, lsl #2
 23f3f34:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 23f3f38:	f000 06ff 	and.w	r6, r0, #255	; 0xff
  uint8_t hh = bcd2bin(RTCWireBus->_I2C_READ());
 23f3f3c:	6820      	ldr	r0, [r4, #0]
 23f3f3e:	6803      	ldr	r3, [r0, #0]
 23f3f40:	695b      	ldr	r3, [r3, #20]
 23f3f42:	4798      	blx	r3
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
 23f3f44:	f3c0 1703 	ubfx	r7, r0, #4, #4
 23f3f48:	eba7 0787 	sub.w	r7, r7, r7, lsl #2
 23f3f4c:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 23f3f50:	f000 07ff 	and.w	r7, r0, #255	; 0xff
  uint8_t d = bcd2bin(RTCWireBus->_I2C_READ());
 23f3f54:	6820      	ldr	r0, [r4, #0]
 23f3f56:	6803      	ldr	r3, [r0, #0]
 23f3f58:	695b      	ldr	r3, [r3, #20]
 23f3f5a:	4798      	blx	r3
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
 23f3f5c:	f3c0 1803 	ubfx	r8, r0, #4, #4
 23f3f60:	eba8 0888 	sub.w	r8, r8, r8, lsl #2
 23f3f64:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 23f3f68:	f000 08ff 	and.w	r8, r0, #255	; 0xff
  RTCWireBus->_I2C_READ(); // skip 'weekdays'
 23f3f6c:	6820      	ldr	r0, [r4, #0]
 23f3f6e:	6803      	ldr	r3, [r0, #0]
 23f3f70:	695b      	ldr	r3, [r3, #20]
 23f3f72:	4798      	blx	r3
  uint8_t m = bcd2bin(RTCWireBus->_I2C_READ());
 23f3f74:	6820      	ldr	r0, [r4, #0]
 23f3f76:	6803      	ldr	r3, [r0, #0]
 23f3f78:	695b      	ldr	r3, [r3, #20]
 23f3f7a:	4798      	blx	r3
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
 23f3f7c:	f3c0 1a03 	ubfx	sl, r0, #4, #4
 23f3f80:	ebaa 0a8a 	sub.w	sl, sl, sl, lsl #2
 23f3f84:	eb00 004a 	add.w	r0, r0, sl, lsl #1
 23f3f88:	f000 0aff 	and.w	sl, r0, #255	; 0xff
  uint16_t y = bcd2bin(RTCWireBus->_I2C_READ()) + 2000U;
 23f3f8c:	6820      	ldr	r0, [r4, #0]
 23f3f8e:	6803      	ldr	r3, [r0, #0]
 23f3f90:	695b      	ldr	r3, [r3, #20]
 23f3f92:	4798      	blx	r3
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
 23f3f94:	f3c0 1303 	ubfx	r3, r0, #4, #4
 23f3f98:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 23f3f9c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
  yOff = year;
 23f3fa0:	7028      	strb	r0, [r5, #0]
  m = month;
 23f3fa2:	f885 a001 	strb.w	sl, [r5, #1]

  return DateTime(y, m, d, hh, mm, ss);
}
 23f3fa6:	4628      	mov	r0, r5
  d = day;
 23f3fa8:	f885 8002 	strb.w	r8, [r5, #2]
  hh = hour;
 23f3fac:	70ef      	strb	r7, [r5, #3]
  mm = min;
 23f3fae:	712e      	strb	r6, [r5, #4]
  ss = sec;
 23f3fb0:	f885 9005 	strb.w	r9, [r5, #5]
}
 23f3fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023f3fb8 <_ZN7FatFile8openRootEP9FatVolume.part.0>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 23f3fb8:	b538      	push	{r3, r4, r5, lr}
 23f3fba:	460d      	mov	r5, r1
 23f3fbc:	4604      	mov	r4, r0
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 23f3fbe:	2224      	movs	r2, #36	; 0x24
 23f3fc0:	2100      	movs	r1, #0
 23f3fc2:	f008 ff24 	bl	23fce0e <memset>

  m_vol = vol;
 23f3fc6:	60a5      	str	r5, [r4, #8]
  /** \return The number of File Allocation Tables. */
  uint8_t fatCount() const { return 2; }
  /** \return The logical sector number for the start of the first FAT. */
  uint32_t fatStartSector() const { return m_fatStartSector; }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const { return m_fatType; }
 23f3fc8:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
 23f3fca:	2b10      	cmp	r3, #16
 23f3fcc:	d003      	beq.n	23f3fd6 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
 23f3fce:	2b20      	cmp	r3, #32
 23f3fd0:	d006      	beq.n	23f3fe0 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
 23f3fd2:	2000      	movs	r0, #0
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
}
 23f3fd4:	bd38      	pop	{r3, r4, r5, pc}
      m_attributes = FILE_ATTR_ROOT_FIXED;
 23f3fd6:	2340      	movs	r3, #64	; 0x40
  m_flags = FILE_FLAG_READ;
 23f3fd8:	2001      	movs	r0, #1
      m_attributes = FILE_ATTR_ROOT32;
 23f3fda:	7023      	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
 23f3fdc:	70a0      	strb	r0, [r4, #2]
  return true;
 23f3fde:	e7f9      	b.n	23f3fd4 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
      m_attributes = FILE_ATTR_ROOT32;
 23f3fe0:	2380      	movs	r3, #128	; 0x80
 23f3fe2:	e7f9      	b.n	23f3fd8 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

023f3fe4 <_ZN12FatPartition9cacheSyncEv>:
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
 23f3fe4:	b510      	push	{r4, lr}
 23f3fe6:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
 23f3fe8:	3024      	adds	r0, #36	; 0x24
 23f3fea:	f003 fa00 	bl	23f73ee <_ZN7FsCache4syncEv>
 23f3fee:	b148      	cbz	r0, 23f4004 <_ZN12FatPartition9cacheSyncEv+0x20>
 23f3ff0:	f504 700d 	add.w	r0, r4, #564	; 0x234
 23f3ff4:	f003 f9fb 	bl	23f73ee <_ZN7FsCache4syncEv>
 23f3ff8:	b120      	cbz	r0, 23f4004 <_ZN12FatPartition9cacheSyncEv+0x20>
  bool syncDevice() { return m_blockDev->syncDevice(); }
 23f3ffa:	6820      	ldr	r0, [r4, #0]
  }
 23f3ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  bool syncDevice() { return m_blockDev->syncDevice(); }
 23f4000:	f001 b976 	b.w	23f52f0 <_ZN9SdSpiCard10syncDeviceEv>
  }
 23f4004:	2000      	movs	r0, #0
 23f4006:	bd10      	pop	{r4, pc}

023f4008 <_ZN7FatFile4copyEPKS_>:
    if (from != this) {
 23f4008:	4281      	cmp	r1, r0
  void copy(const FatFile* from) {
 23f400a:	b530      	push	{r4, r5, lr}
    if (from != this) {
 23f400c:	d007      	beq.n	23f401e <_ZN7FatFile4copyEPKS_+0x16>
      *this = *from;
 23f400e:	4604      	mov	r4, r0
 23f4010:	460d      	mov	r5, r1
 23f4012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f4014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f4016:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f4018:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f401a:	682b      	ldr	r3, [r5, #0]
 23f401c:	6023      	str	r3, [r4, #0]
  }
 23f401e:	bd30      	pop	{r4, r5, pc}

023f4020 <_ZN7FatFile10addClusterEv>:
  uint32_t cc = m_curCluster;
 23f4020:	4602      	mov	r2, r0
bool FatFile::addCluster() {
 23f4022:	b538      	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
 23f4024:	f852 5f10 	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
 23f4028:	4604      	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
 23f402a:	4629      	mov	r1, r5
 23f402c:	6880      	ldr	r0, [r0, #8]
 23f402e:	f002 ffce 	bl	23f6fce <_ZN12FatPartition15allocateClusterEmPm>
 23f4032:	b140      	cbz	r0, 23f4046 <_ZN7FatFile10addClusterEv+0x26>
    m_flags |= FILE_FLAG_CONTIGUOUS;
 23f4034:	78a3      	ldrb	r3, [r4, #2]
  if (cc == 0) {
 23f4036:	b93d      	cbnz	r5, 23f4048 <_ZN7FatFile10addClusterEv+0x28>
    m_flags |= FILE_FLAG_CONTIGUOUS;
 23f4038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
 23f403c:	70a3      	strb	r3, [r4, #2]
  m_flags |= FILE_FLAG_DIR_DIRTY;
 23f403e:	78a3      	ldrb	r3, [r4, #2]
 23f4040:	f063 037f 	orn	r3, r3, #127	; 0x7f
 23f4044:	70a3      	strb	r3, [r4, #2]
}
 23f4046:	bd38      	pop	{r3, r4, r5, pc}
  } else if (m_curCluster != (cc + 1)) {
 23f4048:	6922      	ldr	r2, [r4, #16]
 23f404a:	3501      	adds	r5, #1
 23f404c:	42aa      	cmp	r2, r5
 23f404e:	d0f6      	beq.n	23f403e <_ZN7FatFile10addClusterEv+0x1e>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
 23f4050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 23f4054:	e7f2      	b.n	23f403c <_ZN7FatFile10addClusterEv+0x1c>
	...

023f4058 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
 23f4058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
 23f405a:	7805      	ldrb	r5, [r0, #0]
bool FatFile::addDirCluster() {
 23f405c:	4604      	mov	r4, r0
  if (isRootFixed()) {
 23f405e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 23f4062:	d002      	beq.n	23f406a <_ZN7FatFile13addDirClusterEv+0x12>
  return false;
 23f4064:	2600      	movs	r6, #0
}
 23f4066:	4630      	mov	r0, r6
 23f4068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_curPosition >= 512UL * 4095) {
 23f406a:	6942      	ldr	r2, [r0, #20]
 23f406c:	4b15      	ldr	r3, [pc, #84]	; (23f40c4 <_ZN7FatFile13addDirClusterEv+0x6c>)
 23f406e:	429a      	cmp	r2, r3
 23f4070:	d2f8      	bcs.n	23f4064 <_ZN7FatFile13addDirClusterEv+0xc>
  if (!addCluster()) {
 23f4072:	f7ff ffd5 	bl	23f4020 <_ZN7FatFile10addClusterEv>
 23f4076:	4606      	mov	r6, r0
 23f4078:	2800      	cmp	r0, #0
 23f407a:	d0f3      	beq.n	23f4064 <_ZN7FatFile13addDirClusterEv+0xc>
  sector = m_vol->clusterStartSector(m_curCluster);
 23f407c:	68a2      	ldr	r2, [r4, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
 23f407e:	6923      	ldr	r3, [r4, #16]
 23f4080:	7991      	ldrb	r1, [r2, #6]
 23f4082:	6957      	ldr	r7, [r2, #20]
 23f4084:	3b02      	subs	r3, #2
 23f4086:	408b      	lsls	r3, r1
 23f4088:	441f      	add	r7, r3
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
 23f408a:	68a0      	ldr	r0, [r4, #8]
 23f408c:	b2e9      	uxtb	r1, r5
 23f408e:	7903      	ldrb	r3, [r0, #4]
 23f4090:	428b      	cmp	r3, r1
 23f4092:	d90d      	bls.n	23f40b0 <_ZN7FatFile13addDirClusterEv+0x58>
    return m_cache.prepare(sector, options);
 23f4094:	2205      	movs	r2, #5
 23f4096:	4439      	add	r1, r7
 23f4098:	3024      	adds	r0, #36	; 0x24
 23f409a:	f003 f9ce 	bl	23f743a <_ZN7FsCache7prepareEmh>
    if (!pc) {
 23f409e:	3501      	adds	r5, #1
 23f40a0:	2800      	cmp	r0, #0
 23f40a2:	d0df      	beq.n	23f4064 <_ZN7FatFile13addDirClusterEv+0xc>
    memset(pc, 0, m_vol->bytesPerSector());
 23f40a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 23f40a8:	2100      	movs	r1, #0
 23f40aa:	f008 feb0 	bl	23fce0e <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
 23f40ae:	e7ec      	b.n	23f408a <_ZN7FatFile13addDirClusterEv+0x32>
    return m_bytesPerSector << m_sectorsPerClusterShift;
 23f40b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 23f40b4:	7982      	ldrb	r2, [r0, #6]
 23f40b6:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
 23f40b8:	6962      	ldr	r2, [r4, #20]
 23f40ba:	fa12 f383 	uxtah	r3, r2, r3
 23f40be:	6163      	str	r3, [r4, #20]
  return true;
 23f40c0:	e7d1      	b.n	23f4066 <_ZN7FatFile13addDirClusterEv+0xe>
 23f40c2:	bf00      	nop
 23f40c4:	001ffe00 	.word	0x001ffe00

023f40c8 <_ZN7FatFile13cacheDirEntryEh>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
 23f40c8:	b510      	push	{r4, lr}
 23f40ca:	4604      	mov	r4, r0
    return m_cache.prepare(sector, options);
 23f40cc:	6880      	ldr	r0, [r0, #8]
 23f40ce:	460a      	mov	r2, r1
 23f40d0:	3024      	adds	r0, #36	; 0x24
 23f40d2:	69a1      	ldr	r1, [r4, #24]
 23f40d4:	f003 f9b1 	bl	23f743a <_ZN7FsCache7prepareEmh>
  if (!dir) {
 23f40d8:	b120      	cbz	r0, 23f40e4 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return dir + (m_dirIndex & 0XF);
 23f40da:	88a3      	ldrh	r3, [r4, #4]
 23f40dc:	f003 030f 	and.w	r3, r3, #15
 23f40e0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
 23f40e4:	bd10      	pop	{r4, pc}

023f40e6 <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
 23f40e6:	7803      	ldrb	r3, [r0, #0]
 23f40e8:	b90b      	cbnz	r3, 23f40ee <_ZN7FatFile8openRootEP9FatVolume+0x8>
 23f40ea:	f7ff bf65 	b.w	23f3fb8 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
 23f40ee:	2000      	movs	r0, #0
 23f40f0:	4770      	bx	lr

023f40f2 <_ZN7FatFile11openClusterEPS_>:
bool FatFile::openCluster(FatFile* file) {
 23f40f2:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
 23f40f4:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
 23f40f6:	4604      	mov	r4, r0
 23f40f8:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
 23f40fa:	b923      	cbnz	r3, 23f4106 <_ZN7FatFile11openClusterEPS_+0x14>
}
 23f40fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
 23f4100:	6889      	ldr	r1, [r1, #8]
 23f4102:	f7ff bff0 	b.w	23f40e6 <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
 23f4106:	2224      	movs	r2, #36	; 0x24
 23f4108:	2100      	movs	r1, #0
 23f410a:	f008 fe80 	bl	23fce0e <memset>
  m_attributes = FILE_ATTR_SUBDIR;
 23f410e:	2310      	movs	r3, #16
  m_flags = FILE_FLAG_READ;
 23f4110:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
 23f4112:	7023      	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
 23f4114:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
 23f4116:	68ab      	ldr	r3, [r5, #8]
 23f4118:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
 23f411a:	68eb      	ldr	r3, [r5, #12]
 23f411c:	6223      	str	r3, [r4, #32]
}
 23f411e:	bd38      	pop	{r3, r4, r5, pc}

023f4120 <_ZN7FatFile4readEPvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 23f4120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f4124:	ed2d 8b02 	vpush	{d8}
  /** \return true if this file has a Long File Name. */
  bool isLFN() const { return m_lfnOrd; }
  /** \return True if this is an open file/directory. */
  bool isOpen() const { return m_attributes; }
  /** \return True file is readable. */
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
 23f4128:	7883      	ldrb	r3, [r0, #2]
 23f412a:	4604      	mov	r4, r0
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
 23f412c:	07d8      	lsls	r0, r3, #31
int FatFile::read(void* buf, size_t nbyte) {
 23f412e:	4688      	mov	r8, r1
 23f4130:	4615      	mov	r5, r2
 23f4132:	b083      	sub	sp, #12
  if (!isReadable()) {
 23f4134:	d56c      	bpl.n	23f4210 <_ZN7FatFile4readEPvj+0xf0>
  bool isFile() const { return m_attributes & FILE_ATTR_FILE; }
 23f4136:	7823      	ldrb	r3, [r4, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 23f4138:	0719      	lsls	r1, r3, #28
 23f413a:	d533      	bpl.n	23f41a4 <_ZN7FatFile4readEPvj+0x84>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 23f413c:	69e3      	ldr	r3, [r4, #28]
 23f413e:	6962      	ldr	r2, [r4, #20]
 23f4140:	1a9b      	subs	r3, r3, r2
 23f4142:	429d      	cmp	r5, r3
 23f4144:	bf28      	it	cs
 23f4146:	461d      	movcs	r5, r3
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f4148:	f104 0310 	add.w	r3, r4, #16
  toRead = nbyte;
 23f414c:	462e      	mov	r6, r5
  uint8_t sectorOfCluster = 0;
 23f414e:	f04f 0900 	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f4152:	ee08 3a10 	vmov	s16, r3
  while (toRead) {
 23f4156:	2e00      	cmp	r6, #0
 23f4158:	f000 809f 	beq.w	23f429a <_ZN7FatFile4readEPvj+0x17a>
  /** \return True if this is the root directory. */
  bool isRoot() const { return m_attributes & FILE_ATTR_ROOT; }
  /** \return True if this is the FAT32 root directory. */
  bool isRoot32() const { return m_attributes & FILE_ATTR_ROOT32; }
  /** \return True if this is the FAT12 of FAT16 root directory. */
  bool isRootFixed() const { return m_attributes & FILE_ATTR_ROOT_FIXED; }
 23f415c:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
 23f415e:	6967      	ldr	r7, [r4, #20]
    if (isRootFixed()) {
 23f4160:	0653      	lsls	r3, r2, #25
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
 23f4162:	68a0      	ldr	r0, [r4, #8]
 23f4164:	f3c7 0b08 	ubfx	fp, r7, #0, #9
               (m_curPosition >> m_vol->bytesPerSectorShift());
 23f4168:	ea4f 2157 	mov.w	r1, r7, lsr #9
    if (isRootFixed()) {
 23f416c:	d523      	bpl.n	23f41b6 <_ZN7FatFile4readEPvj+0x96>
      sector = m_vol->rootDirStart() +
 23f416e:	6a02      	ldr	r2, [r0, #32]
 23f4170:	4411      	add	r1, r2
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
 23f4172:	f8d4 a008 	ldr.w	sl, [r4, #8]
 23f4176:	f1bb 0f00 	cmp.w	fp, #0
 23f417a:	d150      	bne.n	23f421e <_ZN7FatFile4readEPvj+0xfe>
 23f417c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23f4180:	d34d      	bcc.n	23f421e <_ZN7FatFile4readEPvj+0xfe>
   * \param[in] option mode for cached sector.
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() { return m_sector; }
 23f4182:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 23f4186:	4291      	cmp	r1, r2
 23f4188:	d049      	beq.n	23f421e <_ZN7FatFile4readEPvj+0xfe>
        goto fail;
      }
      const uint8_t* src = pc + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
 23f418a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 23f418e:	d25f      	bcs.n	23f4250 <_ZN7FatFile4readEPvj+0x130>
    return m_blockDev->readSector(sector, dst);
 23f4190:	4642      	mov	r2, r8
 23f4192:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 23f4196:	f001 fa0b 	bl	23f55b0 <_ZN9SdSpiCard10readSectorEmPh>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
 23f419a:	2800      	cmp	r0, #0
 23f419c:	d038      	beq.n	23f4210 <_ZN7FatFile4readEPvj+0xf0>
      n = m_vol->bytesPerSector();
 23f419e:	f44f 7700 	mov.w	r7, #512	; 0x200
 23f41a2:	e04f      	b.n	23f4244 <_ZN7FatFile4readEPvj+0x124>
  } else if (isRootFixed()) {
 23f41a4:	065a      	lsls	r2, r3, #25
 23f41a6:	d5cf      	bpl.n	23f4148 <_ZN7FatFile4readEPvj+0x28>
        FS_DIR_SIZE * m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 23f41a8:	68a3      	ldr	r3, [r4, #8]
 23f41aa:	891a      	ldrh	r2, [r3, #8]
 23f41ac:	6963      	ldr	r3, [r4, #20]
    uint16_t tmp16 =
 23f41ae:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
 23f41b2:	b29b      	uxth	r3, r3
 23f41b4:	e7c5      	b.n	23f4142 <_ZN7FatFile4readEPvj+0x22>
    return (position >> 9) & m_clusterSectorMask;
 23f41b6:	f890 9005 	ldrb.w	r9, [r0, #5]
 23f41ba:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && sectorOfCluster == 0) {
 23f41be:	f1bb 0f00 	cmp.w	fp, #0
 23f41c2:	d108      	bne.n	23f41d6 <_ZN7FatFile4readEPvj+0xb6>
 23f41c4:	f1b9 0f00 	cmp.w	r9, #0
 23f41c8:	d105      	bne.n	23f41d6 <_ZN7FatFile4readEPvj+0xb6>
        if (m_curPosition == 0) {
 23f41ca:	b96f      	cbnz	r7, 23f41e8 <_ZN7FatFile4readEPvj+0xc8>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 23f41cc:	0612      	lsls	r2, r2, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
 23f41ce:	bf4c      	ite	mi
 23f41d0:	6a02      	ldrmi	r2, [r0, #32]
 23f41d2:	6a22      	ldrpl	r2, [r4, #32]
 23f41d4:	6122      	str	r2, [r4, #16]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
 23f41d6:	68a2      	ldr	r2, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
 23f41d8:	6921      	ldr	r1, [r4, #16]
 23f41da:	7990      	ldrb	r0, [r2, #6]
 23f41dc:	3902      	subs	r1, #2
 23f41de:	6952      	ldr	r2, [r2, #20]
 23f41e0:	4081      	lsls	r1, r0
 23f41e2:	4411      	add	r1, r2
 23f41e4:	4449      	add	r1, r9
 23f41e6:	e7c4      	b.n	23f4172 <_ZN7FatFile4readEPvj+0x52>
        } else if (isFile() && isContiguous()) {
 23f41e8:	0713      	lsls	r3, r2, #28
          m_curCluster++;
 23f41ea:	6921      	ldr	r1, [r4, #16]
        } else if (isFile() && isContiguous()) {
 23f41ec:	d505      	bpl.n	23f41fa <_ZN7FatFile4readEPvj+0xda>
 23f41ee:	78a2      	ldrb	r2, [r4, #2]
 23f41f0:	0657      	lsls	r7, r2, #25
 23f41f2:	d502      	bpl.n	23f41fa <_ZN7FatFile4readEPvj+0xda>
          m_curCluster++;
 23f41f4:	3101      	adds	r1, #1
 23f41f6:	6121      	str	r1, [r4, #16]
 23f41f8:	e7ed      	b.n	23f41d6 <_ZN7FatFile4readEPvj+0xb6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f41fa:	ee18 2a10 	vmov	r2, s16
 23f41fe:	f002 fe81 	bl	23f6f04 <_ZN12FatPartition6fatGetEmPm>
          if (fg < 0) {
 23f4202:	2800      	cmp	r0, #0
 23f4204:	db04      	blt.n	23f4210 <_ZN7FatFile4readEPvj+0xf0>
          if (fg == 0) {
 23f4206:	d1e6      	bne.n	23f41d6 <_ZN7FatFile4readEPvj+0xb6>
            if (isDir()) {
 23f4208:	7823      	ldrb	r3, [r4, #0]
 23f420a:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 23f420e:	d144      	bne.n	23f429a <_ZN7FatFile4readEPvj+0x17a>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 23f4210:	7863      	ldrb	r3, [r4, #1]
  return -1;
 23f4212:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  m_error |= READ_ERROR;
 23f4216:	f043 0302 	orr.w	r3, r3, #2
 23f421a:	7063      	strb	r3, [r4, #1]
  return -1;
 23f421c:	e03e      	b.n	23f429c <_ZN7FatFile4readEPvj+0x17c>
      n = m_vol->bytesPerSector() - offset;
 23f421e:	f5cb 7700 	rsb	r7, fp, #512	; 0x200
      if (n > toRead) {
 23f4222:	42b7      	cmp	r7, r6
    return m_cache.prepare(sector, options);
 23f4224:	f04f 0200 	mov.w	r2, #0
 23f4228:	f10a 0024 	add.w	r0, sl, #36	; 0x24
 23f422c:	bf28      	it	cs
 23f422e:	4637      	movcs	r7, r6
 23f4230:	f003 f903 	bl	23f743a <_ZN7FsCache7prepareEmh>
      if (!pc) {
 23f4234:	2800      	cmp	r0, #0
 23f4236:	d0eb      	beq.n	23f4210 <_ZN7FatFile4readEPvj+0xf0>
      memcpy(dst, src, n);
 23f4238:	eb00 010b 	add.w	r1, r0, fp
 23f423c:	463a      	mov	r2, r7
 23f423e:	4640      	mov	r0, r8
 23f4240:	f008 fdd8 	bl	23fcdf4 <memcpy>
    m_curPosition += n;
 23f4244:	6963      	ldr	r3, [r4, #20]
    dst += n;
 23f4246:	44b8      	add	r8, r7
    m_curPosition += n;
 23f4248:	443b      	add	r3, r7
 23f424a:	6163      	str	r3, [r4, #20]
    toRead -= n;
 23f424c:	1bf6      	subs	r6, r6, r7
  while (toRead) {
 23f424e:	e782      	b.n	23f4156 <_ZN7FatFile4readEPvj+0x36>
      if (!isRootFixed()) {
 23f4250:	7820      	ldrb	r0, [r4, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
 23f4252:	0a73      	lsrs	r3, r6, #9
      if (!isRootFixed()) {
 23f4254:	0640      	lsls	r0, r0, #25
 23f4256:	d406      	bmi.n	23f4266 <_ZN7FatFile4readEPvj+0x146>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
 23f4258:	f89a 0004 	ldrb.w	r0, [sl, #4]
 23f425c:	eba0 0009 	sub.w	r0, r0, r9
 23f4260:	4283      	cmp	r3, r0
 23f4262:	bf28      	it	cs
 23f4264:	4603      	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
 23f4266:	4291      	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
 23f4268:	ea4f 2743 	mov.w	r7, r3, lsl #9
 23f426c:	d907      	bls.n	23f427e <_ZN7FatFile4readEPvj+0x15e>
    return m_blockDev->readSectors(sector, dst, count);
 23f426e:	4642      	mov	r2, r8
 23f4270:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 23f4274:	f001 f970 	bl	23f5558 <_ZN9SdSpiCard11readSectorsEmPhj>
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
 23f4278:	2800      	cmp	r0, #0
 23f427a:	d1e3      	bne.n	23f4244 <_ZN7FatFile4readEPvj+0x124>
 23f427c:	e7c8      	b.n	23f4210 <_ZN7FatFile4readEPvj+0xf0>
    return sector <= m_sector && m_sector < (sector + count);
 23f427e:	18c8      	adds	r0, r1, r3
 23f4280:	4282      	cmp	r2, r0
 23f4282:	d2f4      	bcs.n	23f426e <_ZN7FatFile4readEPvj+0x14e>
    if (isCached(sector, count) && !sync()) {
 23f4284:	f10a 0024 	add.w	r0, sl, #36	; 0x24
 23f4288:	e9cd 1300 	strd	r1, r3, [sp]
 23f428c:	f003 f8af 	bl	23f73ee <_ZN7FsCache4syncEv>
 23f4290:	e9dd 1300 	ldrd	r1, r3, [sp]
 23f4294:	2800      	cmp	r0, #0
 23f4296:	d1ea      	bne.n	23f426e <_ZN7FatFile4readEPvj+0x14e>
 23f4298:	e7ba      	b.n	23f4210 <_ZN7FatFile4readEPvj+0xf0>
  return nbyte - toRead;
 23f429a:	1ba8      	subs	r0, r5, r6
}
 23f429c:	b003      	add	sp, #12
 23f429e:	ecbd 8b02 	vpop	{d8}
 23f42a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023f42a6 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
 23f42a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 23f42a8:	2201      	movs	r2, #1
  uint32_t saveCurCluster = m_curCluster;
 23f42aa:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23f42ae:	f10d 0107 	add.w	r1, sp, #7
int FatFile::peek() {
 23f42b2:	4604      	mov	r4, r0
 23f42b4:	f7ff ff34 	bl	23f4120 <_ZN7FatFile4readEPvj>
 23f42b8:	2801      	cmp	r0, #1
 23f42ba:	bf14      	ite	ne
 23f42bc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23f42c0:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = saveCurCluster;
 23f42c4:	e9c4 5604 	strd	r5, r6, [r4, #16]
}
 23f42c8:	b002      	add	sp, #8
 23f42ca:	bd70      	pop	{r4, r5, r6, pc}

023f42cc <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
 23f42cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
 23f42ce:	6943      	ldr	r3, [r0, #20]
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
 23f42d0:	4604      	mov	r4, r0

  if (i == 0 || !skipReadOk) {
 23f42d2:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
 23f42d6:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
 23f42da:	d000      	beq.n	23f42de <_ZN7FatFile12readDirCacheEb+0x12>
 23f42dc:	b999      	cbnz	r1, 23f4306 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
 23f42de:	2201      	movs	r2, #1
 23f42e0:	4620      	mov	r0, r4
 23f42e2:	f10d 0107 	add.w	r1, sp, #7
 23f42e6:	f7ff ff1b 	bl	23f4120 <_ZN7FatFile4readEPvj>
    if (n != 1) {
 23f42ea:	b240      	sxtb	r0, r0
 23f42ec:	2801      	cmp	r0, #1
 23f42ee:	d002      	beq.n	23f42f6 <_ZN7FatFile12readDirCacheEb+0x2a>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
 23f42f0:	2000      	movs	r0, #0
}
 23f42f2:	b003      	add	sp, #12
 23f42f4:	bd30      	pop	{r4, r5, pc}
    m_curPosition += FS_DIR_SIZE - 1;
 23f42f6:	6963      	ldr	r3, [r4, #20]
 23f42f8:	331f      	adds	r3, #31
  uint8_t* cacheBuffer() { return m_buffer; }
 23f42fa:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += FS_DIR_SIZE;
 23f42fc:	6163      	str	r3, [r4, #20]
 23f42fe:	3034      	adds	r0, #52	; 0x34
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
 23f4300:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 23f4304:	e7f5      	b.n	23f42f2 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += FS_DIR_SIZE;
 23f4306:	3320      	adds	r3, #32
 23f4308:	e7f7      	b.n	23f42fa <_ZN7FatFile12readDirCacheEb+0x2e>

023f430a <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 23f430a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f430e:	460d      	mov	r5, r1
  bool isOpen() const { return m_attributes; }
 23f4310:	7801      	ldrb	r1, [r0, #0]
 23f4312:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 23f4314:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
 23f4316:	b181      	cbz	r1, 23f433a <_ZN7FatFile7seekSetEm+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 23f4318:	6940      	ldr	r0, [r0, #20]
 23f431a:	42a8      	cmp	r0, r5
 23f431c:	d006      	beq.n	23f432c <_ZN7FatFile7seekSetEm+0x22>
    return true;
  }
  if (pos == 0) {
 23f431e:	b93d      	cbnz	r5, 23f4330 <_ZN7FatFile7seekSetEm+0x26>
    // set position to start of file
    m_curCluster = 0;
 23f4320:	6125      	str	r5, [r4, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
 23f4322:	78a3      	ldrb	r3, [r4, #2]
  m_curPosition = pos;
 23f4324:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
 23f4326:	f023 0320 	bic.w	r3, r3, #32
 23f432a:	70a3      	strb	r3, [r4, #2]
    return true;
 23f432c:	2001      	movs	r0, #1
 23f432e:	e006      	b.n	23f433e <_ZN7FatFile7seekSetEm+0x34>
  if (isFile()) {
 23f4330:	070b      	lsls	r3, r1, #28
 23f4332:	d506      	bpl.n	23f4342 <_ZN7FatFile7seekSetEm+0x38>
    if (pos > m_fileSize) {
 23f4334:	69e3      	ldr	r3, [r4, #28]
 23f4336:	42ab      	cmp	r3, r5
 23f4338:	d20b      	bcs.n	23f4352 <_ZN7FatFile7seekSetEm+0x48>
  return true;

fail:
  m_curCluster = tmp;
  return false;
 23f433a:	2000      	movs	r0, #0
  m_curCluster = tmp;
 23f433c:	6127      	str	r7, [r4, #16]
}
 23f433e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
 23f4342:	064e      	lsls	r6, r1, #25
 23f4344:	d505      	bpl.n	23f4352 <_ZN7FatFile7seekSetEm+0x48>
  uint16_t rootDirEntryCount() const { return m_rootDirEntryCount; }
 23f4346:	68a3      	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE * m_vol->rootDirEntryCount()) {
 23f4348:	891b      	ldrh	r3, [r3, #8]
 23f434a:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
 23f434e:	d9e8      	bls.n	23f4322 <_ZN7FatFile7seekSetEm+0x18>
 23f4350:	e7f3      	b.n	23f433a <_ZN7FatFile7seekSetEm+0x30>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
 23f4352:	f8d4 c008 	ldr.w	ip, [r4, #8]
  if (isContiguous()) {
 23f4356:	78a2      	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
 23f4358:	f89c 3006 	ldrb.w	r3, [ip, #6]
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
 23f435c:	1e6e      	subs	r6, r5, #1
 23f435e:	3309      	adds	r3, #9
 23f4360:	b2db      	uxtb	r3, r3
  if (isContiguous()) {
 23f4362:	0652      	lsls	r2, r2, #25
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
 23f4364:	fa26 f603 	lsr.w	r6, r6, r3
  if (isContiguous()) {
 23f4368:	d503      	bpl.n	23f4372 <_ZN7FatFile7seekSetEm+0x68>
    m_curCluster = m_firstCluster + nNew;
 23f436a:	6a23      	ldr	r3, [r4, #32]
 23f436c:	4433      	add	r3, r6
 23f436e:	6123      	str	r3, [r4, #16]
    goto done;
 23f4370:	e7d7      	b.n	23f4322 <_ZN7FatFile7seekSetEm+0x18>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
 23f4372:	1e42      	subs	r2, r0, #1
 23f4374:	fa22 f303 	lsr.w	r3, r2, r3
  if (nNew < nCur || m_curPosition == 0) {
 23f4378:	429e      	cmp	r6, r3
 23f437a:	d300      	bcc.n	23f437e <_ZN7FatFile7seekSetEm+0x74>
 23f437c:	b998      	cbnz	r0, 23f43a6 <_ZN7FatFile7seekSetEm+0x9c>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 23f437e:	060b      	lsls	r3, r1, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
 23f4380:	bf4c      	ite	mi
 23f4382:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
 23f4386:	6a23      	ldrpl	r3, [r4, #32]
 23f4388:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 23f438a:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
 23f438e:	2e00      	cmp	r6, #0
 23f4390:	d0c7      	beq.n	23f4322 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 23f4392:	4642      	mov	r2, r8
 23f4394:	6921      	ldr	r1, [r4, #16]
 23f4396:	68a0      	ldr	r0, [r4, #8]
 23f4398:	f002 fdb4 	bl	23f6f04 <_ZN12FatPartition6fatGetEmPm>
 23f439c:	2800      	cmp	r0, #0
 23f439e:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 23f43a2:	dcf4      	bgt.n	23f438e <_ZN7FatFile7seekSetEm+0x84>
 23f43a4:	e7c9      	b.n	23f433a <_ZN7FatFile7seekSetEm+0x30>
    nNew -= nCur;
 23f43a6:	1af6      	subs	r6, r6, r3
 23f43a8:	e7ef      	b.n	23f438a <_ZN7FatFile7seekSetEm+0x80>

023f43aa <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
 23f43aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f43ac:	460f      	mov	r7, r1
 23f43ae:	4604      	mov	r4, r0
 23f43b0:	4616      	mov	r6, r2
  memset(this, 0, sizeof(FatFile));
 23f43b2:	2100      	movs	r1, #0
 23f43b4:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
 23f43b6:	461d      	mov	r5, r3
  memset(this, 0, sizeof(FatFile));
 23f43b8:	f008 fd29 	bl	23fce0e <memset>
  m_vol = dirFile->m_vol;
 23f43bc:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 23f43be:	80a6      	strh	r6, [r4, #4]
  m_vol = dirFile->m_vol;
 23f43c0:	60a0      	str	r0, [r4, #8]
  m_dirCluster = dirFile->m_firstCluster;
 23f43c2:	6a3b      	ldr	r3, [r7, #32]
 23f43c4:	f100 0234 	add.w	r2, r0, #52	; 0x34
  dir += 0XF & dirIndex;
 23f43c8:	f006 060f 	and.w	r6, r6, #15
  m_dirCluster = dirFile->m_firstCluster;
 23f43cc:	60e3      	str	r3, [r4, #12]
  dir += 0XF & dirIndex;
 23f43ce:	eb02 1246 	add.w	r2, r2, r6, lsl #5

static inline bool isFatFile(const DirFat_t* dir) {
  return (dir->attributes & (FS_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFatFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
 23f43d2:	7ad3      	ldrb	r3, [r2, #11]
  if (!isFatFileOrSubdir(dir)) {
 23f43d4:	0719      	lsls	r1, r3, #28
 23f43d6:	d43f      	bmi.n	23f4458 <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
  m_attributes = dir->attributes & FS_ATTRIB_COPY;
 23f43d8:	f003 0337 	and.w	r3, r3, #55	; 0x37
 23f43dc:	7023      	strb	r3, [r4, #0]
  if (isFatFile(dir)) {
 23f43de:	7ad1      	ldrb	r1, [r2, #11]
 23f43e0:	f011 0f18 	tst.w	r1, #24
    m_attributes |= FILE_ATTR_FILE;
 23f43e4:	bf04      	itt	eq
 23f43e6:	f043 0308 	orreq.w	r3, r3, #8
 23f43ea:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
 23f43ec:	f89d 3018 	ldrb.w	r3, [sp, #24]
 23f43f0:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
 23f43f2:	f005 0303 	and.w	r3, r5, #3
 23f43f6:	2b01      	cmp	r3, #1
 23f43f8:	d028      	beq.n	23f444c <_ZN7FatFile15openCachedEntryEPS_tih+0xa2>
 23f43fa:	2b02      	cmp	r3, #2
 23f43fc:	d024      	beq.n	23f4448 <_ZN7FatFile15openCachedEntryEPS_tih+0x9e>
 23f43fe:	bb5b      	cbnz	r3, 23f4458 <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
      if (oflag & O_TRUNC) {
 23f4400:	056b      	lsls	r3, r5, #21
 23f4402:	d429      	bmi.n	23f4458 <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
      m_flags = FILE_FLAG_READ;
 23f4404:	2301      	movs	r3, #1
      m_flags = FILE_FLAG_WRITE;
 23f4406:	70a3      	strb	r3, [r4, #2]
  if (m_flags & FILE_FLAG_WRITE) {
 23f4408:	78a1      	ldrb	r1, [r4, #2]
 23f440a:	078f      	lsls	r7, r1, #30
 23f440c:	d507      	bpl.n	23f441e <_ZN7FatFile15openCachedEntryEPS_tih+0x74>
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
 23f440e:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
 23f4410:	06de      	lsls	r6, r3, #27
 23f4412:	d421      	bmi.n	23f4458 <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
 23f4414:	07df      	lsls	r7, r3, #31
 23f4416:	d41f      	bmi.n	23f4458 <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
    m_attributes |= FS_ATTRIB_ARCHIVE;
 23f4418:	f043 0320 	orr.w	r3, r3, #32
 23f441c:	7023      	strb	r3, [r4, #0]
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
 23f441e:	f005 0308 	and.w	r3, r5, #8
 23f4422:	430b      	orrs	r3, r1
 23f4424:	70a3      	strb	r3, [r4, #2]
  uint32_t sector() { return m_sector; }
 23f4426:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if (oflag & O_TRUNC) {
 23f4428:	056e      	lsls	r6, r5, #21
  m_dirSector = m_vol->cacheSectorNumber();
 23f442a:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
 23f442c:	8a93      	ldrh	r3, [r2, #20]
                 getLe16(dir->firstClusterLow);
 23f442e:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
 23f4430:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  if (oflag & O_TRUNC) {
 23f4434:	d514      	bpl.n	23f4460 <_ZN7FatFile15openCachedEntryEPS_tih+0xb6>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 23f4436:	b959      	cbnz	r1, 23f4450 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
 23f4438:	78a3      	ldrb	r3, [r4, #2]
 23f443a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 23f443e:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 23f4440:	046b      	lsls	r3, r5, #17
 23f4442:	d411      	bmi.n	23f4468 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
  return true;
 23f4444:	2001      	movs	r0, #1
}
 23f4446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
 23f4448:	2303      	movs	r3, #3
 23f444a:	e7dc      	b.n	23f4406 <_ZN7FatFile15openCachedEntryEPS_tih+0x5c>
      m_flags = FILE_FLAG_WRITE;
 23f444c:	2302      	movs	r3, #2
 23f444e:	e7da      	b.n	23f4406 <_ZN7FatFile15openCachedEntryEPS_tih+0x5c>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 23f4450:	f002 fdf8 	bl	23f7044 <_ZN12FatPartition9freeChainEm>
 23f4454:	2800      	cmp	r0, #0
 23f4456:	d1ef      	bne.n	23f4438 <_ZN7FatFile15openCachedEntryEPS_tih+0x8e>
  m_attributes = FILE_ATTR_CLOSED;
 23f4458:	2000      	movs	r0, #0
 23f445a:	7020      	strb	r0, [r4, #0]
  m_flags = 0;
 23f445c:	70a0      	strb	r0, [r4, #2]
  return false;
 23f445e:	e7f2      	b.n	23f4446 <_ZN7FatFile15openCachedEntryEPS_tih+0x9c>
    m_firstCluster = firstCluster;
 23f4460:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
 23f4462:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
 23f4464:	61e3      	str	r3, [r4, #28]
 23f4466:	e7eb      	b.n	23f4440 <_ZN7FatFile15openCachedEntryEPS_tih+0x96>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 23f4468:	4620      	mov	r0, r4
 23f446a:	69e1      	ldr	r1, [r4, #28]
 23f446c:	f7ff ff4d 	bl	23f430a <_ZN7FatFile7seekSetEm>
 23f4470:	2800      	cmp	r0, #0
 23f4472:	d1e7      	bne.n	23f4444 <_ZN7FatFile15openCachedEntryEPS_tih+0x9a>
 23f4474:	e7f0      	b.n	23f4458 <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
	...

023f4478 <_ZN7FatFile4syncEv>:
//------------------------------------------------------------------------------
bool FatFile::sync() {
 23f4478:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
 23f447a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
 23f447c:	4604      	mov	r4, r0
  if (!isOpen()) {
 23f447e:	2b00      	cmp	r3, #0
 23f4480:	d039      	beq.n	23f44f6 <_ZN7FatFile4syncEv+0x7e>
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
 23f4482:	f990 3002 	ldrsb.w	r3, [r0, #2]
 23f4486:	2b00      	cmp	r3, #0
 23f4488:	da2f      	bge.n	23f44ea <_ZN7FatFile4syncEv+0x72>
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
 23f448a:	2101      	movs	r1, #1
 23f448c:	f7ff fe1c 	bl	23f40c8 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
 23f4490:	4605      	mov	r5, r0
 23f4492:	b930      	cbnz	r0, 23f44a2 <_ZN7FatFile4syncEv+0x2a>
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
 23f4494:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
 23f4496:	7863      	ldrb	r3, [r4, #1]
 23f4498:	f043 0301 	orr.w	r3, r3, #1
 23f449c:	7063      	strb	r3, [r4, #1]
}
 23f449e:	b003      	add	sp, #12
 23f44a0:	bd30      	pop	{r4, r5, pc}
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
 23f44a2:	7803      	ldrb	r3, [r0, #0]
 23f44a4:	2be5      	cmp	r3, #229	; 0xe5
 23f44a6:	d0f5      	beq.n	23f4494 <_ZN7FatFile4syncEv+0x1c>
    dir->attributes = m_attributes & FS_ATTRIB_COPY;
 23f44a8:	7823      	ldrb	r3, [r4, #0]
 23f44aa:	f003 0337 	and.w	r3, r3, #55	; 0x37
 23f44ae:	72c3      	strb	r3, [r0, #11]
    if (isFile()) {
 23f44b0:	7823      	ldrb	r3, [r4, #0]
 23f44b2:	071b      	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
 23f44b4:	bf44      	itt	mi
 23f44b6:	69e3      	ldrmi	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
 23f44b8:	61c3      	strmi	r3, [r0, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
 23f44ba:	6a23      	ldr	r3, [r4, #32]
 23f44bc:	8343      	strh	r3, [r0, #26]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
 23f44be:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 23f44c0:	8283      	strh	r3, [r0, #20]
    if (FsDateTime::callback) {
 23f44c2:	4b0e      	ldr	r3, [pc, #56]	; (23f44fc <_ZN7FatFile4syncEv+0x84>)
 23f44c4:	681b      	ldr	r3, [r3, #0]
 23f44c6:	b163      	cbz	r3, 23f44e2 <_ZN7FatFile4syncEv+0x6a>
      FsDateTime::callback(&date, &time, &ms10);
 23f44c8:	f10d 0203 	add.w	r2, sp, #3
 23f44cc:	f10d 0106 	add.w	r1, sp, #6
 23f44d0:	a801      	add	r0, sp, #4
 23f44d2:	4798      	blx	r3
      setLe16(dir->modifyDate, date);
 23f44d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
 23f44d8:	832b      	strh	r3, [r5, #24]
 23f44da:	826b      	strh	r3, [r5, #18]
 23f44dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 23f44e0:	82eb      	strh	r3, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
 23f44e2:	78a3      	ldrb	r3, [r4, #2]
 23f44e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 23f44e8:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
 23f44ea:	68a0      	ldr	r0, [r4, #8]
 23f44ec:	f7ff fd7a 	bl	23f3fe4 <_ZN12FatPartition9cacheSyncEv>
 23f44f0:	2800      	cmp	r0, #0
 23f44f2:	d0cf      	beq.n	23f4494 <_ZN7FatFile4syncEv+0x1c>
 23f44f4:	e7d3      	b.n	23f449e <_ZN7FatFile4syncEv+0x26>
    return true;
 23f44f6:	2001      	movs	r0, #1
 23f44f8:	e7d1      	b.n	23f449e <_ZN7FatFile4syncEv+0x26>
 23f44fa:	bf00      	nop
 23f44fc:	1007aeac 	.word	0x1007aeac

023f4500 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
 23f4500:	b510      	push	{r4, lr}
 23f4502:	4604      	mov	r4, r0
  bool rtn = sync();
 23f4504:	f7ff ffb8 	bl	23f4478 <_ZN7FatFile4syncEv>
  m_attributes = FILE_ATTR_CLOSED;
 23f4508:	2300      	movs	r3, #0
 23f450a:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
 23f450c:	70a3      	strb	r3, [r4, #2]
}
 23f450e:	bd10      	pop	{r4, pc}

023f4510 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 23f4510:	b570      	push	{r4, r5, r6, lr}
 23f4512:	461e      	mov	r6, r3
  FatFile() {}
 23f4514:	2300      	movs	r3, #0
 23f4516:	b094      	sub	sp, #80	; 0x50
 23f4518:	930b      	str	r3, [sp, #44]	; 0x2c
  if (isOpen() || !dirFile->isDir()) {
 23f451a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 23f451c:	4605      	mov	r5, r0
 23f451e:	460c      	mov	r4, r1
 23f4520:	9201      	str	r2, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
 23f4522:	b113      	cbz	r3, 23f452a <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
 23f4524:	2000      	movs	r0, #0
}
 23f4526:	b014      	add	sp, #80	; 0x50
 23f4528:	bd70      	pop	{r4, r5, r6, pc}
  if (isOpen() || !dirFile->isDir()) {
 23f452a:	780b      	ldrb	r3, [r1, #0]
 23f452c:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 23f4530:	d0f8      	beq.n	23f4524 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
 23f4532:	7813      	ldrb	r3, [r2, #0]
 23f4534:	2b2f      	cmp	r3, #47	; 0x2f
 23f4536:	d112      	bne.n	23f455e <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
 23f4538:	9a01      	ldr	r2, [sp, #4]
 23f453a:	7813      	ldrb	r3, [r2, #0]
 23f453c:	2b2f      	cmp	r3, #47	; 0x2f
 23f453e:	d102      	bne.n	23f4546 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
 23f4540:	3201      	adds	r2, #1
 23f4542:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
 23f4544:	e7f8      	b.n	23f4538 <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
 23f4546:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
 23f4548:	b91b      	cbnz	r3, 23f4552 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
 23f454a:	4628      	mov	r0, r5
 23f454c:	f7ff fdcb 	bl	23f40e6 <_ZN7FatFile8openRootEP9FatVolume>
 23f4550:	e7e9      	b.n	23f4526 <_ZN7FatFile4openEPS_PKci+0x16>
  bool isOpen() const { return m_attributes; }
 23f4552:	a80b      	add	r0, sp, #44	; 0x2c
 23f4554:	f7ff fd30 	bl	23f3fb8 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 23f4558:	2800      	cmp	r0, #0
 23f455a:	d0e3      	beq.n	23f4524 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
 23f455c:	ac0b      	add	r4, sp, #44	; 0x2c
    if (!parsePathName(path, &fname, &path)) {
 23f455e:	4628      	mov	r0, r5
 23f4560:	9901      	ldr	r1, [sp, #4]
 23f4562:	ab01      	add	r3, sp, #4
 23f4564:	aa03      	add	r2, sp, #12
 23f4566:	f000 fd55 	bl	23f5014 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_>
 23f456a:	2800      	cmp	r0, #0
 23f456c:	d0da      	beq.n	23f4524 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
 23f456e:	9b01      	ldr	r3, [sp, #4]
 23f4570:	781b      	ldrb	r3, [r3, #0]
 23f4572:	b17b      	cbz	r3, 23f4594 <_ZN7FatFile4openEPS_PKci+0x84>
    if (!open(dirFile, &fname, O_RDONLY)) {
 23f4574:	2300      	movs	r3, #0
 23f4576:	4621      	mov	r1, r4
 23f4578:	4628      	mov	r0, r5
 23f457a:	aa03      	add	r2, sp, #12
 23f457c:	f000 fc0a 	bl	23f4d94 <_ZN7FatFile4openEPS_P8FatLfn_ti>
 23f4580:	2800      	cmp	r0, #0
 23f4582:	d0cf      	beq.n	23f4524 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir.copy(this);
 23f4584:	a80b      	add	r0, sp, #44	; 0x2c
 23f4586:	4629      	mov	r1, r5
 23f4588:	f7ff fd3e 	bl	23f4008 <_ZN7FatFile4copyEPKS_>
    close();
 23f458c:	4628      	mov	r0, r5
 23f458e:	f7ff ffb7 	bl	23f4500 <_ZN7FatFile5closeEv>
  while (1) {
 23f4592:	e7e3      	b.n	23f455c <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
 23f4594:	4633      	mov	r3, r6
 23f4596:	4621      	mov	r1, r4
 23f4598:	4628      	mov	r0, r5
 23f459a:	aa03      	add	r2, sp, #12
 23f459c:	f000 fbfa 	bl	23f4d94 <_ZN7FatFile4openEPS_P8FatLfn_ti>
 23f45a0:	e7c1      	b.n	23f4526 <_ZN7FatFile4openEPS_PKci+0x16>

023f45a2 <_ZN7FatFile4openEP9FatVolumePKci>:
  return vol && open(vol->vwd(), path, oflag);
 23f45a2:	b119      	cbz	r1, 23f45ac <_ZN7FatFile4openEP9FatVolumePKci+0xa>
 23f45a4:	f201 4144 	addw	r1, r1, #1092	; 0x444
 23f45a8:	f7ff bfb2 	b.w	23f4510 <_ZN7FatFile4openEPS_PKci>
}
 23f45ac:	4608      	mov	r0, r1
 23f45ae:	4770      	bx	lr

023f45b0 <_ZN7FatFile5mkdirEPS_P8FatLfn_t>:
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
 23f45b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!parent->isDir()) {
 23f45b2:	780b      	ldrb	r3, [r1, #0]
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
 23f45b4:	4604      	mov	r4, r0
  if (!parent->isDir()) {
 23f45b6:	f013 0fd0 	tst.w	r3, #208	; 0xd0
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
 23f45ba:	460e      	mov	r6, r1
 23f45bc:	b089      	sub	sp, #36	; 0x24
  if (!parent->isDir()) {
 23f45be:	d102      	bne.n	23f45c6 <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x16>
  return false;
 23f45c0:	2000      	movs	r0, #0
}
 23f45c2:	b009      	add	sp, #36	; 0x24
 23f45c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
 23f45c6:	f640 2302 	movw	r3, #2562	; 0xa02
 23f45ca:	f000 fbe3 	bl	23f4d94 <_ZN7FatFile4openEPS_P8FatLfn_ti>
 23f45ce:	2800      	cmp	r0, #0
 23f45d0:	d0f6      	beq.n	23f45c0 <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x10>
  m_flags = FILE_FLAG_READ;
 23f45d2:	2701      	movs	r7, #1
  m_attributes = FILE_ATTR_SUBDIR;
 23f45d4:	2510      	movs	r5, #16
  if (!addDirCluster()) {
 23f45d6:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ;
 23f45d8:	70a7      	strb	r7, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
 23f45da:	7025      	strb	r5, [r4, #0]
  if (!addDirCluster()) {
 23f45dc:	f7ff fd3c 	bl	23f4058 <_ZN7FatFile13addDirClusterEv>
 23f45e0:	2800      	cmp	r0, #0
 23f45e2:	d0ed      	beq.n	23f45c0 <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x10>
  m_firstCluster = m_curCluster;
 23f45e4:	6923      	ldr	r3, [r4, #16]
   *
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() { seekSet(0UL); }
 23f45e6:	2100      	movs	r1, #0
 23f45e8:	4620      	mov	r0, r4
 23f45ea:	6223      	str	r3, [r4, #32]
 23f45ec:	f7ff fe8d 	bl	23f430a <_ZN7FatFile7seekSetEm>
  if (!sync()) {
 23f45f0:	4620      	mov	r0, r4
 23f45f2:	f7ff ff41 	bl	23f4478 <_ZN7FatFile4syncEv>
 23f45f6:	2800      	cmp	r0, #0
 23f45f8:	d0e2      	beq.n	23f45c0 <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x10>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
 23f45fa:	4639      	mov	r1, r7
 23f45fc:	4620      	mov	r0, r4
 23f45fe:	f7ff fd63 	bl	23f40c8 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
 23f4602:	2800      	cmp	r0, #0
 23f4604:	d0dc      	beq.n	23f45c0 <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x10>
  memcpy(&dot, dir, sizeof(dot));
 23f4606:	466a      	mov	r2, sp
  dir->attributes = FS_ATTRIB_DIRECTORY;
 23f4608:	72c5      	strb	r5, [r0, #11]
  memcpy(&dot, dir, sizeof(dot));
 23f460a:	4603      	mov	r3, r0
 23f460c:	4615      	mov	r5, r2
 23f460e:	f100 0c20 	add.w	ip, r0, #32
 23f4612:	4617      	mov	r7, r2
 23f4614:	6818      	ldr	r0, [r3, #0]
 23f4616:	6859      	ldr	r1, [r3, #4]
 23f4618:	3308      	adds	r3, #8
 23f461a:	c703      	stmia	r7!, {r0, r1}
 23f461c:	4563      	cmp	r3, ip
 23f461e:	463a      	mov	r2, r7
 23f4620:	d1f7      	bne.n	23f4612 <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x62>
    dot.name[i] = ' ';
 23f4622:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
  sector = m_vol->clusterStartSector(m_firstCluster);
 23f4626:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
 23f4628:	6a21      	ldr	r1, [r4, #32]
    dot.name[i] = ' ';
 23f462a:	f8cd 3001 	str.w	r3, [sp, #1]
 23f462e:	f8cd 3005 	str.w	r3, [sp, #5]
 23f4632:	f8ad 3009 	strh.w	r3, [sp, #9]
 23f4636:	7983      	ldrb	r3, [r0, #6]
 23f4638:	3902      	subs	r1, #2
 23f463a:	4099      	lsls	r1, r3
 23f463c:	6943      	ldr	r3, [r0, #20]
    return m_cache.prepare(sector, options);
 23f463e:	2201      	movs	r2, #1
 23f4640:	4419      	add	r1, r3
 23f4642:	3024      	adds	r0, #36	; 0x24
 23f4644:	f002 fef9 	bl	23f743a <_ZN7FsCache7prepareEmh>
  if (!dir) {
 23f4648:	4603      	mov	r3, r0
 23f464a:	2800      	cmp	r0, #0
 23f464c:	d0b8      	beq.n	23f45c0 <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x10>
  memcpy(&dir[0], &dot, sizeof(dot));
 23f464e:	222e      	movs	r2, #46	; 0x2e
 23f4650:	46ac      	mov	ip, r5
 23f4652:	4607      	mov	r7, r0
 23f4654:	f88d 2000 	strb.w	r2, [sp]
 23f4658:	f10d 0e20 	add.w	lr, sp, #32
 23f465c:	4662      	mov	r2, ip
 23f465e:	ca03      	ldmia	r2!, {r0, r1}
 23f4660:	4572      	cmp	r2, lr
 23f4662:	6038      	str	r0, [r7, #0]
 23f4664:	6079      	str	r1, [r7, #4]
 23f4666:	4694      	mov	ip, r2
 23f4668:	f107 0708 	add.w	r7, r7, #8
 23f466c:	d1f6      	bne.n	23f465c <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0xac>
  dot.name[1] = '.';
 23f466e:	222e      	movs	r2, #46	; 0x2e
 23f4670:	f88d 2001 	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
 23f4674:	6a32      	ldr	r2, [r6, #32]
  memcpy(&dir[1], &dot, sizeof(dot));
 23f4676:	3320      	adds	r3, #32
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
 23f4678:	0c11      	lsrs	r1, r2, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
 23f467a:	f8ad 201a 	strh.w	r2, [sp, #26]
  memcpy(&dir[1], &dot, sizeof(dot));
 23f467e:	462a      	mov	r2, r5
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
 23f4680:	f8ad 1014 	strh.w	r1, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
 23f4684:	ae08      	add	r6, sp, #32
 23f4686:	4615      	mov	r5, r2
 23f4688:	cd03      	ldmia	r5!, {r0, r1}
 23f468a:	42b5      	cmp	r5, r6
 23f468c:	6018      	str	r0, [r3, #0]
 23f468e:	6059      	str	r1, [r3, #4]
 23f4690:	462a      	mov	r2, r5
 23f4692:	f103 0308 	add.w	r3, r3, #8
 23f4696:	d1f6      	bne.n	23f4686 <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0xd6>
  return m_vol->cacheSync();
 23f4698:	68a0      	ldr	r0, [r4, #8]
 23f469a:	f7ff fca3 	bl	23f3fe4 <_ZN12FatPartition9cacheSyncEv>
 23f469e:	e790      	b.n	23f45c2 <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x12>

023f46a0 <_ZN7FatFile5mkdirEPS_PKcb>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
 23f46a0:	b570      	push	{r4, r5, r6, lr}
 23f46a2:	461e      	mov	r6, r3
  FatFile() {}
 23f46a4:	2300      	movs	r3, #0
 23f46a6:	b094      	sub	sp, #80	; 0x50
 23f46a8:	930b      	str	r3, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
 23f46aa:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
 23f46ac:	4605      	mov	r5, r0
 23f46ae:	460c      	mov	r4, r1
 23f46b0:	9201      	str	r2, [sp, #4]
  if (isOpen() || !parent->isDir()) {
 23f46b2:	b113      	cbz	r3, 23f46ba <_ZN7FatFile5mkdirEPS_PKcb+0x1a>
  return false;
 23f46b4:	2000      	movs	r0, #0
}
 23f46b6:	b014      	add	sp, #80	; 0x50
 23f46b8:	bd70      	pop	{r4, r5, r6, pc}
  if (isOpen() || !parent->isDir()) {
 23f46ba:	780b      	ldrb	r3, [r1, #0]
 23f46bc:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 23f46c0:	d0f8      	beq.n	23f46b4 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
  if (isDirSeparator(*path)) {
 23f46c2:	7813      	ldrb	r3, [r2, #0]
 23f46c4:	2b2f      	cmp	r3, #47	; 0x2f
 23f46c6:	d10d      	bne.n	23f46e4 <_ZN7FatFile5mkdirEPS_PKcb+0x44>
    while (isDirSeparator(*path)) {
 23f46c8:	9a01      	ldr	r2, [sp, #4]
 23f46ca:	7813      	ldrb	r3, [r2, #0]
 23f46cc:	2b2f      	cmp	r3, #47	; 0x2f
 23f46ce:	d102      	bne.n	23f46d6 <_ZN7FatFile5mkdirEPS_PKcb+0x36>
      path++;
 23f46d0:	3201      	adds	r2, #1
 23f46d2:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
 23f46d4:	e7f8      	b.n	23f46c8 <_ZN7FatFile5mkdirEPS_PKcb+0x28>
  bool isOpen() const { return m_attributes; }
 23f46d6:	68a1      	ldr	r1, [r4, #8]
 23f46d8:	a80b      	add	r0, sp, #44	; 0x2c
 23f46da:	f7ff fc6d 	bl	23f3fb8 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(parent->m_vol)) {
 23f46de:	2800      	cmp	r0, #0
 23f46e0:	d0e8      	beq.n	23f46b4 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
    parent = &tmpDir;
 23f46e2:	ac0b      	add	r4, sp, #44	; 0x2c
    if (!parsePathName(path, &fname, &path)) {
 23f46e4:	4628      	mov	r0, r5
 23f46e6:	9901      	ldr	r1, [sp, #4]
 23f46e8:	ab01      	add	r3, sp, #4
 23f46ea:	aa03      	add	r2, sp, #12
 23f46ec:	f000 fc92 	bl	23f5014 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_>
 23f46f0:	2800      	cmp	r0, #0
 23f46f2:	d0df      	beq.n	23f46b4 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
    if (!*path) {
 23f46f4:	9b01      	ldr	r3, [sp, #4]
 23f46f6:	781b      	ldrb	r3, [r3, #0]
 23f46f8:	b1c3      	cbz	r3, 23f472c <_ZN7FatFile5mkdirEPS_PKcb+0x8c>
    if (!open(parent, &fname, O_RDONLY)) {
 23f46fa:	2300      	movs	r3, #0
 23f46fc:	4621      	mov	r1, r4
 23f46fe:	4628      	mov	r0, r5
 23f4700:	aa03      	add	r2, sp, #12
 23f4702:	f000 fb47 	bl	23f4d94 <_ZN7FatFile4openEPS_P8FatLfn_ti>
 23f4706:	b138      	cbz	r0, 23f4718 <_ZN7FatFile5mkdirEPS_PKcb+0x78>
    tmpDir.copy(this);
 23f4708:	a80b      	add	r0, sp, #44	; 0x2c
 23f470a:	4629      	mov	r1, r5
 23f470c:	f7ff fc7c 	bl	23f4008 <_ZN7FatFile4copyEPKS_>
    close();
 23f4710:	4628      	mov	r0, r5
 23f4712:	f7ff fef5 	bl	23f4500 <_ZN7FatFile5closeEv>
  while (1) {
 23f4716:	e7e4      	b.n	23f46e2 <_ZN7FatFile5mkdirEPS_PKcb+0x42>
      if (!pFlag || !mkdir(parent, &fname)) {
 23f4718:	2e00      	cmp	r6, #0
 23f471a:	d0cb      	beq.n	23f46b4 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
 23f471c:	4621      	mov	r1, r4
 23f471e:	4628      	mov	r0, r5
 23f4720:	aa03      	add	r2, sp, #12
 23f4722:	f7ff ff45 	bl	23f45b0 <_ZN7FatFile5mkdirEPS_P8FatLfn_t>
 23f4726:	2800      	cmp	r0, #0
 23f4728:	d1ee      	bne.n	23f4708 <_ZN7FatFile5mkdirEPS_PKcb+0x68>
 23f472a:	e7c3      	b.n	23f46b4 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
  return mkdir(parent, &fname);
 23f472c:	4621      	mov	r1, r4
 23f472e:	4628      	mov	r0, r5
 23f4730:	aa03      	add	r2, sp, #12
 23f4732:	f7ff ff3d 	bl	23f45b0 <_ZN7FatFile5mkdirEPS_P8FatLfn_t>
 23f4736:	e7be      	b.n	23f46b6 <_ZN7FatFile5mkdirEPS_PKcb+0x16>

023f4738 <_ZN7FatFile6renameEPS_PKc>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
 23f4738:	b5f0      	push	{r4, r5, r6, r7, lr}
  FatFile() {}
 23f473a:	2500      	movs	r5, #0
  if (!(isFile() || isSubDir())) {
 23f473c:	7803      	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
 23f473e:	b09d      	sub	sp, #116	; 0x74
  if (!(isFile() || isSubDir())) {
 23f4740:	f013 0f18 	tst.w	r3, #24
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
 23f4744:	4604      	mov	r4, r0
 23f4746:	460f      	mov	r7, r1
 23f4748:	950a      	str	r5, [sp, #40]	; 0x28
 23f474a:	9513      	str	r5, [sp, #76]	; 0x4c
  if (!(isFile() || isSubDir())) {
 23f474c:	d102      	bne.n	23f4754 <_ZN7FatFile6renameEPS_PKc+0x1c>
  return false;
 23f474e:	2000      	movs	r0, #0
}
 23f4750:	b01d      	add	sp, #116	; 0x74
 23f4752:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (m_vol != dirFile->m_vol) {
 23f4754:	6881      	ldr	r1, [r0, #8]
 23f4756:	68bb      	ldr	r3, [r7, #8]
 23f4758:	4299      	cmp	r1, r3
 23f475a:	d1f8      	bne.n	23f474e <_ZN7FatFile6renameEPS_PKc+0x16>
 23f475c:	9201      	str	r2, [sp, #4]
  sync();
 23f475e:	f7ff fe8b 	bl	23f4478 <_ZN7FatFile4syncEv>
  oldFile.copy(this);
 23f4762:	4621      	mov	r1, r4
 23f4764:	a813      	add	r0, sp, #76	; 0x4c
 23f4766:	f7ff fc4f 	bl	23f4008 <_ZN7FatFile4copyEPKS_>
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
 23f476a:	4629      	mov	r1, r5
 23f476c:	4620      	mov	r0, r4
 23f476e:	f7ff fcab 	bl	23f40c8 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
 23f4772:	2800      	cmp	r0, #0
 23f4774:	d0eb      	beq.n	23f474e <_ZN7FatFile6renameEPS_PKc+0x16>
  memcpy(&entry, dir, sizeof(entry));
 23f4776:	ae02      	add	r6, sp, #8
 23f4778:	4603      	mov	r3, r0
 23f477a:	4635      	mov	r5, r6
 23f477c:	9a01      	ldr	r2, [sp, #4]
 23f477e:	f100 0e20 	add.w	lr, r0, #32
 23f4782:	46b4      	mov	ip, r6
 23f4784:	6818      	ldr	r0, [r3, #0]
 23f4786:	6859      	ldr	r1, [r3, #4]
 23f4788:	3308      	adds	r3, #8
 23f478a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 23f478e:	4573      	cmp	r3, lr
 23f4790:	4666      	mov	r6, ip
 23f4792:	d1f6      	bne.n	23f4782 <_ZN7FatFile6renameEPS_PKc+0x4a>
  if (isFile()) {
 23f4794:	7823      	ldrb	r3, [r4, #0]
 23f4796:	ae0a      	add	r6, sp, #40	; 0x28
 23f4798:	f013 0308 	ands.w	r3, r3, #8
 23f479c:	d009      	beq.n	23f47b2 <_ZN7FatFile6renameEPS_PKc+0x7a>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
 23f479e:	f640 2301 	movw	r3, #2561	; 0xa01
 23f47a2:	4639      	mov	r1, r7
 23f47a4:	4630      	mov	r0, r6
 23f47a6:	f7ff feb3 	bl	23f4510 <_ZN7FatFile4openEPS_PKci>
 23f47aa:	2800      	cmp	r0, #0
 23f47ac:	d0cf      	beq.n	23f474e <_ZN7FatFile6renameEPS_PKc+0x16>
  uint32_t dirCluster = 0;
 23f47ae:	2700      	movs	r7, #0
 23f47b0:	e006      	b.n	23f47c0 <_ZN7FatFile6renameEPS_PKc+0x88>
    if (!file.mkdir(dirFile, newPath, false)) {
 23f47b2:	4639      	mov	r1, r7
 23f47b4:	4630      	mov	r0, r6
 23f47b6:	f7ff ff73 	bl	23f46a0 <_ZN7FatFile5mkdirEPS_PKcb>
 23f47ba:	2800      	cmp	r0, #0
 23f47bc:	d0c7      	beq.n	23f474e <_ZN7FatFile6renameEPS_PKc+0x16>
    dirCluster = file.m_firstCluster;
 23f47be:	9f12      	ldr	r7, [sp, #72]	; 0x48
  m_dirSector = file.m_dirSector;
 23f47c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
 23f47c2:	2101      	movs	r1, #1
  m_dirSector = file.m_dirSector;
 23f47c4:	61a3      	str	r3, [r4, #24]
  m_dirIndex = file.m_dirIndex;
 23f47c6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
 23f47ca:	4620      	mov	r0, r4
  m_dirIndex = file.m_dirIndex;
 23f47cc:	80a3      	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
 23f47ce:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 23f47d2:	70e3      	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
 23f47d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23f47d6:	60e3      	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
 23f47d8:	2300      	movs	r3, #0
 23f47da:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
  file.m_flags = 0;
 23f47de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
 23f47e2:	f7ff fc71 	bl	23f40c8 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
 23f47e6:	2800      	cmp	r0, #0
 23f47e8:	d0b1      	beq.n	23f474e <_ZN7FatFile6renameEPS_PKc+0x16>
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
 23f47ea:	f10d 0315 	add.w	r3, sp, #21
 23f47ee:	f100 020d 	add.w	r2, r0, #13
 23f47f2:	f10d 0125 	add.w	r1, sp, #37	; 0x25
 23f47f6:	f853 cb04 	ldr.w	ip, [r3], #4
 23f47fa:	428b      	cmp	r3, r1
 23f47fc:	f842 cb04 	str.w	ip, [r2], #4
 23f4800:	d1f9      	bne.n	23f47f6 <_ZN7FatFile6renameEPS_PKc+0xbe>
 23f4802:	8819      	ldrh	r1, [r3, #0]
 23f4804:	8011      	strh	r1, [r2, #0]
 23f4806:	789b      	ldrb	r3, [r3, #2]
 23f4808:	7093      	strb	r3, [r2, #2]
  dir->attributes = entry.attributes;
 23f480a:	f89d 3013 	ldrb.w	r3, [sp, #19]
 23f480e:	72c3      	strb	r3, [r0, #11]
  if (dirCluster) {
 23f4810:	2f00      	cmp	r7, #0
 23f4812:	d039      	beq.n	23f4888 <_ZN7FatFile6renameEPS_PKc+0x150>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
 23f4814:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
 23f4816:	1ebb      	subs	r3, r7, #2
 23f4818:	7981      	ldrb	r1, [r0, #6]
    return m_cache.prepare(sector, options);
 23f481a:	2200      	movs	r2, #0
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
 23f481c:	408b      	lsls	r3, r1
 23f481e:	6941      	ldr	r1, [r0, #20]
    return m_cache.prepare(sector, options);
 23f4820:	3024      	adds	r0, #36	; 0x24
 23f4822:	4419      	add	r1, r3
 23f4824:	f002 fe09 	bl	23f743a <_ZN7FsCache7prepareEmh>
    if (!dir) {
 23f4828:	2800      	cmp	r0, #0
 23f482a:	d090      	beq.n	23f474e <_ZN7FatFile6renameEPS_PKc+0x16>
    memcpy(&entry, &dir[1], sizeof(entry));
 23f482c:	46ae      	mov	lr, r5
 23f482e:	f100 0220 	add.w	r2, r0, #32
 23f4832:	f100 0340 	add.w	r3, r0, #64	; 0x40
 23f4836:	46f4      	mov	ip, lr
 23f4838:	6810      	ldr	r0, [r2, #0]
 23f483a:	6851      	ldr	r1, [r2, #4]
 23f483c:	3208      	adds	r2, #8
 23f483e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 23f4842:	429a      	cmp	r2, r3
 23f4844:	46e6      	mov	lr, ip
 23f4846:	d1f6      	bne.n	23f4836 <_ZN7FatFile6renameEPS_PKc+0xfe>
    if (!m_vol->freeChain(dirCluster)) {
 23f4848:	4639      	mov	r1, r7
 23f484a:	68a0      	ldr	r0, [r4, #8]
 23f484c:	f002 fbfa 	bl	23f7044 <_ZN12FatPartition9freeChainEm>
 23f4850:	2800      	cmp	r0, #0
 23f4852:	f43f af7c 	beq.w	23f474e <_ZN7FatFile6renameEPS_PKc+0x16>
    sector = m_vol->clusterStartSector(m_firstCluster);
 23f4856:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
 23f4858:	6a21      	ldr	r1, [r4, #32]
 23f485a:	7983      	ldrb	r3, [r0, #6]
 23f485c:	3902      	subs	r1, #2
 23f485e:	4099      	lsls	r1, r3
 23f4860:	6943      	ldr	r3, [r0, #20]
    return m_cache.prepare(sector, options);
 23f4862:	2201      	movs	r2, #1
 23f4864:	4419      	add	r1, r3
 23f4866:	3024      	adds	r0, #36	; 0x24
 23f4868:	f002 fde7 	bl	23f743a <_ZN7FsCache7prepareEmh>
    if (!dir) {
 23f486c:	2800      	cmp	r0, #0
 23f486e:	f43f af6e 	beq.w	23f474e <_ZN7FatFile6renameEPS_PKc+0x16>
    memcpy(&dir[1], &entry, sizeof(entry));
 23f4872:	f100 0320 	add.w	r3, r0, #32
 23f4876:	462a      	mov	r2, r5
 23f4878:	ca03      	ldmia	r2!, {r0, r1}
 23f487a:	42b2      	cmp	r2, r6
 23f487c:	6018      	str	r0, [r3, #0]
 23f487e:	6059      	str	r1, [r3, #4]
 23f4880:	4615      	mov	r5, r2
 23f4882:	f103 0308 	add.w	r3, r3, #8
 23f4886:	d1f6      	bne.n	23f4876 <_ZN7FatFile6renameEPS_PKc+0x13e>
  oldFile.m_firstCluster = 0;
 23f4888:	2300      	movs	r3, #0
 23f488a:	931b      	str	r3, [sp, #108]	; 0x6c
  oldFile.m_flags = FILE_FLAG_WRITE;
 23f488c:	2302      	movs	r3, #2
 23f488e:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
  oldFile.m_attributes = FILE_ATTR_FILE;
 23f4892:	2308      	movs	r3, #8
  if (!oldFile.remove()) {
 23f4894:	a813      	add	r0, sp, #76	; 0x4c
  oldFile.m_attributes = FILE_ATTR_FILE;
 23f4896:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
  if (!oldFile.remove()) {
 23f489a:	f000 fbff 	bl	23f509c <_ZN7FatFile6removeEv>
 23f489e:	2800      	cmp	r0, #0
 23f48a0:	f43f af55 	beq.w	23f474e <_ZN7FatFile6renameEPS_PKc+0x16>
  return m_vol->cacheSync();
 23f48a4:	68a0      	ldr	r0, [r4, #8]
 23f48a6:	f7ff fb9d 	bl	23f3fe4 <_ZN12FatPartition9cacheSyncEv>
 23f48aa:	e751      	b.n	23f4750 <_ZN7FatFile6renameEPS_PKc+0x18>

023f48ac <_ZN7FatFile6renameEPKc>:
bool FatFile::rename(const char* newPath) {
 23f48ac:	460a      	mov	r2, r1
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() { return m_cwv; }
  FatFile* vwd() { return &m_vwd; }
 23f48ae:	6881      	ldr	r1, [r0, #8]
  return rename(m_vol->vwd(), newPath);
 23f48b0:	f201 4144 	addw	r1, r1, #1092	; 0x444
 23f48b4:	f7ff bf40 	b.w	23f4738 <_ZN7FatFile6renameEPS_PKc>

023f48b8 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
 23f48b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
 23f48bc:	7883      	ldrb	r3, [r0, #2]
 23f48be:	4688      	mov	r8, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
 23f48c0:	0799      	lsls	r1, r3, #30
size_t FatFile::write(const void* buf, size_t nbyte) {
 23f48c2:	4604      	mov	r4, r0
 23f48c4:	4691      	mov	r9, r2
  if (!isWritable()) {
 23f48c6:	d544      	bpl.n	23f4952 <_ZN7FatFile5writeEPKvj+0x9a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
 23f48c8:	071a      	lsls	r2, r3, #28
 23f48ca:	d43d      	bmi.n	23f4948 <_ZN7FatFile5writeEPKvj+0x90>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 23f48cc:	6963      	ldr	r3, [r4, #20]
 23f48ce:	43db      	mvns	r3, r3
 23f48d0:	454b      	cmp	r3, r9
 23f48d2:	d33e      	bcc.n	23f4952 <_ZN7FatFile5writeEPKvj+0x9a>
 23f48d4:	464f      	mov	r7, r9
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f48d6:	f104 0a10 	add.w	sl, r4, #16
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
 23f48da:	6962      	ldr	r2, [r4, #20]
  while (nToWrite) {
 23f48dc:	2f00      	cmp	r7, #0
 23f48de:	f000 809e 	beq.w	23f4a1e <_ZN7FatFile5writeEPKvj+0x166>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
 23f48e2:	68a0      	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
 23f48e4:	f3c2 0508 	ubfx	r5, r2, #0, #9
    return (position >> 9) & m_clusterSectorMask;
 23f48e8:	7946      	ldrb	r6, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
 23f48ea:	ea16 2652 	ands.w	r6, r6, r2, lsr #9
 23f48ee:	d10b      	bne.n	23f4908 <_ZN7FatFile5writeEPKvj+0x50>
 23f48f0:	b955      	cbnz	r5, 23f4908 <_ZN7FatFile5writeEPKvj+0x50>
      if (m_curCluster != 0) {
 23f48f2:	6921      	ldr	r1, [r4, #16]
 23f48f4:	2900      	cmp	r1, #0
 23f48f6:	d03f      	beq.n	23f4978 <_ZN7FatFile5writeEPKvj+0xc0>
        if (isContiguous() && m_fileSize > m_curPosition) {
 23f48f8:	78a3      	ldrb	r3, [r4, #2]
 23f48fa:	065b      	lsls	r3, r3, #25
 23f48fc:	d530      	bpl.n	23f4960 <_ZN7FatFile5writeEPKvj+0xa8>
 23f48fe:	69e3      	ldr	r3, [r4, #28]
 23f4900:	4293      	cmp	r3, r2
 23f4902:	d92d      	bls.n	23f4960 <_ZN7FatFile5writeEPKvj+0xa8>
          m_curCluster++;
 23f4904:	3101      	adds	r1, #1
 23f4906:	6121      	str	r1, [r4, #16]
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
 23f4908:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
 23f490a:	6921      	ldr	r1, [r4, #16]
 23f490c:	7983      	ldrb	r3, [r0, #6]
 23f490e:	3902      	subs	r1, #2
 23f4910:	4099      	lsls	r1, r3
 23f4912:	6943      	ldr	r3, [r0, #20]
 23f4914:	4419      	add	r1, r3
 23f4916:	4431      	add	r1, r6

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
 23f4918:	2d00      	cmp	r5, #0
 23f491a:	d139      	bne.n	23f4990 <_ZN7FatFile5writeEPKvj+0xd8>
 23f491c:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 23f4920:	d336      	bcc.n	23f4990 <_ZN7FatFile5writeEPKvj+0xd8>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2 * m_vol->bytesPerSector()) {
 23f4922:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 23f4926:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 23f4928:	d260      	bcs.n	23f49ec <_ZN7FatFile5writeEPKvj+0x134>
    if (isCached(sector)) {
 23f492a:	4291      	cmp	r1, r2
    m_sector = 0XFFFFFFFF;
 23f492c:	bf02      	ittt	eq
 23f492e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
 23f4932:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
 23f4936:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeSector(sector, src);
 23f4938:	4642      	mov	r2, r8
 23f493a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 23f493c:	f000 fe7f 	bl	23f563e <_ZN9SdSpiCard11writeSectorEmPKh>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
 23f4940:	b138      	cbz	r0, 23f4952 <_ZN7FatFile5writeEPKvj+0x9a>
      n = m_vol->bytesPerSector();
 23f4942:	f44f 7600 	mov.w	r6, #512	; 0x200
 23f4946:	e047      	b.n	23f49d8 <_ZN7FatFile5writeEPKvj+0x120>
    if (!seekSet(m_fileSize)) {
 23f4948:	69c1      	ldr	r1, [r0, #28]
 23f494a:	f7ff fcde 	bl	23f430a <_ZN7FatFile7seekSetEm>
 23f494e:	2800      	cmp	r0, #0
 23f4950:	d1bc      	bne.n	23f48cc <_ZN7FatFile5writeEPKvj+0x14>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 23f4952:	7863      	ldrb	r3, [r4, #1]
  return 0;
 23f4954:	f04f 0900 	mov.w	r9, #0
  m_error |= WRITE_ERROR;
 23f4958:	f043 0301 	orr.w	r3, r3, #1
 23f495c:	7063      	strb	r3, [r4, #1]
  return 0;
 23f495e:	e06b      	b.n	23f4a38 <_ZN7FatFile5writeEPKvj+0x180>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f4960:	4652      	mov	r2, sl
 23f4962:	f002 facf 	bl	23f6f04 <_ZN12FatPartition6fatGetEmPm>
          if (fg < 0) {
 23f4966:	2800      	cmp	r0, #0
 23f4968:	dbf3      	blt.n	23f4952 <_ZN7FatFile5writeEPKvj+0x9a>
        if (fg == 0) {
 23f496a:	d1cd      	bne.n	23f4908 <_ZN7FatFile5writeEPKvj+0x50>
          if (!addCluster()) {
 23f496c:	4620      	mov	r0, r4
 23f496e:	f7ff fb57 	bl	23f4020 <_ZN7FatFile10addClusterEv>
 23f4972:	2800      	cmp	r0, #0
 23f4974:	d1c8      	bne.n	23f4908 <_ZN7FatFile5writeEPKvj+0x50>
 23f4976:	e7ec      	b.n	23f4952 <_ZN7FatFile5writeEPKvj+0x9a>
        if (m_firstCluster == 0) {
 23f4978:	6a23      	ldr	r3, [r4, #32]
 23f497a:	b93b      	cbnz	r3, 23f498c <_ZN7FatFile5writeEPKvj+0xd4>
          if (!addCluster()) {
 23f497c:	4620      	mov	r0, r4
 23f497e:	f7ff fb4f 	bl	23f4020 <_ZN7FatFile10addClusterEv>
 23f4982:	2800      	cmp	r0, #0
 23f4984:	d0e5      	beq.n	23f4952 <_ZN7FatFile5writeEPKvj+0x9a>
          m_firstCluster = m_curCluster;
 23f4986:	6923      	ldr	r3, [r4, #16]
 23f4988:	6223      	str	r3, [r4, #32]
 23f498a:	e7bd      	b.n	23f4908 <_ZN7FatFile5writeEPKvj+0x50>
          m_curCluster = m_firstCluster;
 23f498c:	6123      	str	r3, [r4, #16]
 23f498e:	e7bb      	b.n	23f4908 <_ZN7FatFile5writeEPKvj+0x50>
      n = m_vol->bytesPerSector() - sectorOffset;
 23f4990:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      if (n > nToWrite) {
 23f4994:	42be      	cmp	r6, r7
 23f4996:	bf28      	it	cs
 23f4998:	463e      	movcs	r6, r7
      if (sectorOffset == 0 &&
 23f499a:	bb1d      	cbnz	r5, 23f49e4 <_ZN7FatFile5writeEPKvj+0x12c>
 23f499c:	6962      	ldr	r2, [r4, #20]
 23f499e:	69e3      	ldr	r3, [r4, #28]
 23f49a0:	429a      	cmp	r2, r3
 23f49a2:	d221      	bcs.n	23f49e8 <_ZN7FatFile5writeEPKvj+0x130>
          (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
 23f49a4:	78a3      	ldrb	r3, [r4, #2]
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
 23f49a6:	f013 0f20 	tst.w	r3, #32
 23f49aa:	bf0c      	ite	eq
 23f49ac:	2201      	moveq	r2, #1
 23f49ae:	2205      	movne	r2, #5
    return m_cache.prepare(sector, options);
 23f49b0:	3024      	adds	r0, #36	; 0x24
 23f49b2:	f002 fd42 	bl	23f743a <_ZN7FsCache7prepareEmh>
      if (!pc) {
 23f49b6:	2800      	cmp	r0, #0
 23f49b8:	d0cb      	beq.n	23f4952 <_ZN7FatFile5writeEPKvj+0x9a>
      memcpy(dst, src, n);
 23f49ba:	4428      	add	r0, r5
 23f49bc:	4632      	mov	r2, r6
 23f49be:	4641      	mov	r1, r8
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
 23f49c0:	4435      	add	r5, r6
      memcpy(dst, src, n);
 23f49c2:	f008 fa17 	bl	23fcdf4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
 23f49c6:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 23f49ca:	d105      	bne.n	23f49d8 <_ZN7FatFile5writeEPKvj+0x120>
  bool cacheSyncData() { return m_cache.sync(); }
 23f49cc:	68a0      	ldr	r0, [r4, #8]
 23f49ce:	3024      	adds	r0, #36	; 0x24
 23f49d0:	f002 fd0d 	bl	23f73ee <_ZN7FsCache4syncEv>
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
 23f49d4:	2800      	cmp	r0, #0
 23f49d6:	d0bc      	beq.n	23f4952 <_ZN7FatFile5writeEPKvj+0x9a>
    m_curPosition += n;
 23f49d8:	6963      	ldr	r3, [r4, #20]
    src += n;
 23f49da:	44b0      	add	r8, r6
    m_curPosition += n;
 23f49dc:	4433      	add	r3, r6
 23f49de:	6163      	str	r3, [r4, #20]
    nToWrite -= n;
 23f49e0:	1bbf      	subs	r7, r7, r6
  while (nToWrite) {
 23f49e2:	e77a      	b.n	23f48da <_ZN7FatFile5writeEPKvj+0x22>
        cacheOption = FsCache::CACHE_FOR_WRITE;
 23f49e4:	2201      	movs	r2, #1
 23f49e6:	e7e3      	b.n	23f49b0 <_ZN7FatFile5writeEPKvj+0xf8>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
 23f49e8:	2205      	movs	r2, #5
 23f49ea:	e7e1      	b.n	23f49b0 <_ZN7FatFile5writeEPKvj+0xf8>
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
 23f49ec:	7903      	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
 23f49ee:	ea4f 2c57 	mov.w	ip, r7, lsr #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
 23f49f2:	1b9b      	subs	r3, r3, r6
 23f49f4:	4563      	cmp	r3, ip
 23f49f6:	bf28      	it	cs
 23f49f8:	4663      	movcs	r3, ip
    return sector <= m_sector && m_sector < (sector + count);
 23f49fa:	4291      	cmp	r1, r2
      n = nSector << m_vol->bytesPerSectorShift();
 23f49fc:	ea4f 2643 	mov.w	r6, r3, lsl #9
 23f4a00:	d808      	bhi.n	23f4a14 <_ZN7FatFile5writeEPKvj+0x15c>
 23f4a02:	eb01 0c03 	add.w	ip, r1, r3
 23f4a06:	4594      	cmp	ip, r2
    m_sector = 0XFFFFFFFF;
 23f4a08:	bf82      	ittt	hi
 23f4a0a:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
 23f4a0e:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
 23f4a12:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeSectors(sector, src, count);
 23f4a14:	4642      	mov	r2, r8
 23f4a16:	6a80      	ldr	r0, [r0, #40]	; 0x28
 23f4a18:	f000 fde3 	bl	23f55e2 <_ZN9SdSpiCard12writeSectorsEmPKhj>
 23f4a1c:	e7da      	b.n	23f49d4 <_ZN7FatFile5writeEPKvj+0x11c>
  if (m_curPosition > m_fileSize) {
 23f4a1e:	69e3      	ldr	r3, [r4, #28]
 23f4a20:	4293      	cmp	r3, r2
 23f4a22:	d205      	bcs.n	23f4a30 <_ZN7FatFile5writeEPKvj+0x178>
    m_fileSize = m_curPosition;
 23f4a24:	61e2      	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
 23f4a26:	78a3      	ldrb	r3, [r4, #2]
 23f4a28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 23f4a2c:	70a3      	strb	r3, [r4, #2]
 23f4a2e:	e003      	b.n	23f4a38 <_ZN7FatFile5writeEPKvj+0x180>
  } else if (FsDateTime::callback) {
 23f4a30:	4b03      	ldr	r3, [pc, #12]	; (23f4a40 <_ZN7FatFile5writeEPKvj+0x188>)
 23f4a32:	681b      	ldr	r3, [r3, #0]
 23f4a34:	2b00      	cmp	r3, #0
 23f4a36:	d1f6      	bne.n	23f4a26 <_ZN7FatFile5writeEPKvj+0x16e>
}
 23f4a38:	4648      	mov	r0, r9
 23f4a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f4a3e:	bf00      	nop
 23f4a40:	1007aeac 	.word	0x1007aeac

023f4a44 <_ZN7FatFile11lfnChecksumEPKh.isra.0>:
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(const DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(const uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
 23f4a44:	1e41      	subs	r1, r0, #1
 23f4a46:	f100 030a 	add.w	r3, r0, #10
    uint8_t sum = 0;
 23f4a4a:	2000      	movs	r0, #0
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
 23f4a4c:	0842      	lsrs	r2, r0, #1
 23f4a4e:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
 23f4a52:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23f4a56:	fa52 f080 	uxtab	r0, r2, r0
    for (uint8_t i = 0; i < 11; i++) {
 23f4a5a:	428b      	cmp	r3, r1
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
 23f4a5c:	b2c0      	uxtb	r0, r0
    for (uint8_t i = 0; i < 11; i++) {
 23f4a5e:	d1f5      	bne.n	23f4a4c <_ZN7FatFile11lfnChecksumEPKh.isra.0+0x8>
    }
    return sum;
  }
 23f4a60:	4770      	bx	lr

023f4a62 <_ZN7FatFile8cacheDirEt>:
  DirFat_t* cacheDir(uint16_t index) {
 23f4a62:	b510      	push	{r4, lr}
    return seekSet(32UL * index) ? readDirCache() : nullptr;
 23f4a64:	0149      	lsls	r1, r1, #5
  DirFat_t* cacheDir(uint16_t index) {
 23f4a66:	4604      	mov	r4, r0
    return seekSet(32UL * index) ? readDirCache() : nullptr;
 23f4a68:	f7ff fc4f 	bl	23f430a <_ZN7FatFile7seekSetEm>
 23f4a6c:	b128      	cbz	r0, 23f4a7a <_ZN7FatFile8cacheDirEt+0x18>
 23f4a6e:	4620      	mov	r0, r4
  }
 23f4a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return seekSet(32UL * index) ? readDirCache() : nullptr;
 23f4a74:	2100      	movs	r1, #0
 23f4a76:	f7ff bc29 	b.w	23f42cc <_ZN7FatFile12readDirCacheEb>
  }
 23f4a7a:	bd10      	pop	{r4, pc}

023f4a7c <_ZN7FatFile7cmpNameEtP8FatLfn_th>:
  } else if (i < 13) {
    setLe16(ldir->unicode3 + 2 * (i - 11), c);
  }
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
 23f4a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      *this = *from;
 23f4a80:	4606      	mov	r6, r0
 23f4a82:	b08b      	sub	sp, #44	; 0x2c
 23f4a84:	ac01      	add	r4, sp, #4
 23f4a86:	4615      	mov	r5, r2
 23f4a88:	4607      	mov	r7, r0
 23f4a8a:	4689      	mov	r9, r1
 23f4a8c:	469a      	mov	sl, r3
 23f4a8e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 23f4a90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f4a92:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 23f4a94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f4a96:	6833      	ldr	r3, [r6, #0]
  FatFile dir;
  dir.copy(this);
  const DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
 23f4a98:	2601      	movs	r6, #1
 23f4a9a:	6023      	str	r3, [r4, #0]
  const char* end;
#if !USE_UTF8_LONG_NAMES
  /** \return true if at end. */
  bool atEnd() { return next == end; }
  /** Reset to start of LFN. */
  void reset() { next = begin; }
 23f4a9c:	682b      	ldr	r3, [r5, #0]
 23f4a9e:	606b      	str	r3, [r5, #4]
 23f4aa0:	4556      	cmp	r6, sl
 23f4aa2:	d839      	bhi.n	23f4b18 <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x9c>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
 23f4aa4:	eba9 0106 	sub.w	r1, r9, r6
 23f4aa8:	b289      	uxth	r1, r1
 23f4aaa:	a801      	add	r0, sp, #4
 23f4aac:	f7ff ffd9 	bl	23f4a62 <_ZN7FatFile8cacheDirEt>
    if (!ldir) {
 23f4ab0:	4683      	mov	fp, r0
 23f4ab2:	b918      	cbnz	r0, 23f4abc <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x40>
    }
  }
  return true;

fail:
  return false;
 23f4ab4:	2000      	movs	r0, #0
}
 23f4ab6:	b00b      	add	sp, #44	; 0x2c
 23f4ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f4abc:	f04f 0800 	mov.w	r8, #0
      uint16_t u = getLfnChar(ldir, i);
 23f4ac0:	fa5f f288 	uxtb.w	r2, r8
 23f4ac4:	4659      	mov	r1, fp
 23f4ac6:	4638      	mov	r0, r7
 23f4ac8:	f002 fa08 	bl	23f6edc <_ZN7FatFile10getLfnCharEPK8DirLfn_th>
      if (fname->atEnd()) {
 23f4acc:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 23f4ad0:	4293      	cmp	r3, r2
 23f4ad2:	d103      	bne.n	23f4adc <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x60>
        return u == 0;
 23f4ad4:	fab0 f080 	clz	r0, r0
 23f4ad8:	0940      	lsrs	r0, r0, #5
 23f4ada:	e7ec      	b.n	23f4ab6 <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x3a>
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
 23f4adc:	287f      	cmp	r0, #127	; 0x7f
 23f4ade:	d8e9      	bhi.n	23f4ab4 <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x38>
 23f4ae0:	b2c4      	uxtb	r4, r0
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
 23f4ae2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 23f4ae6:	2b19      	cmp	r3, #25
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
 23f4ae8:	f102 0301 	add.w	r3, r2, #1
 23f4aec:	606b      	str	r3, [r5, #4]
 23f4aee:	7813      	ldrb	r3, [r2, #0]
 23f4af0:	bf98      	it	ls
 23f4af2:	3c20      	subls	r4, #32
 23f4af4:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 23f4af8:	bf98      	it	ls
 23f4afa:	b2e4      	uxtbls	r4, r4
 23f4afc:	2a19      	cmp	r2, #25
 23f4afe:	bf9c      	itt	ls
 23f4b00:	3b20      	subls	r3, #32
 23f4b02:	b2db      	uxtbls	r3, r3
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
 23f4b04:	42a3      	cmp	r3, r4
 23f4b06:	d1d5      	bne.n	23f4ab4 <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x38>
    for (uint8_t i = 0; i < 13; i++) {
 23f4b08:	f108 0801 	add.w	r8, r8, #1
 23f4b0c:	f1b8 0f0d 	cmp.w	r8, #13
 23f4b10:	d1d6      	bne.n	23f4ac0 <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x44>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
 23f4b12:	3601      	adds	r6, #1
 23f4b14:	b2f6      	uxtb	r6, r6
 23f4b16:	e7c3      	b.n	23f4aa0 <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x24>
  return true;
 23f4b18:	2001      	movs	r0, #1
 23f4b1a:	e7cc      	b.n	23f4ab6 <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x3a>

023f4b1c <_ZN7FatFile9createLFNEtP8FatLfn_th>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
 23f4b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f4b20:	4604      	mov	r4, r0
 23f4b22:	4616      	mov	r6, r2
 23f4b24:	b08b      	sub	sp, #44	; 0x2c
 23f4b26:	ad01      	add	r5, sp, #4
 23f4b28:	468a      	mov	sl, r1
 23f4b2a:	4698      	mov	r8, r3
 23f4b2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f4b2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f4b30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f4b32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f4b34:	6823      	ldr	r3, [r4, #0]
  FatFile dir;
  dir.copy(this);
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
 23f4b36:	f106 0012 	add.w	r0, r6, #18
 23f4b3a:	602b      	str	r3, [r5, #0]
 23f4b3c:	f7ff ff82 	bl	23f4a44 <_ZN7FatFile11lfnChecksumEPKh.isra.0>
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
 23f4b40:	2501      	movs	r5, #1
  uint8_t checksum = lfnChecksum(fname->sfn);
 23f4b42:	4681      	mov	r9, r0
  uint8_t fc = 0;
 23f4b44:	2700      	movs	r7, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
 23f4b46:	f04f 0b0f 	mov.w	fp, #15
  void reset() { next = begin; }
 23f4b4a:	6833      	ldr	r3, [r6, #0]
 23f4b4c:	6073      	str	r3, [r6, #4]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
 23f4b4e:	4545      	cmp	r5, r8
 23f4b50:	d841      	bhi.n	23f4bd6 <_ZN7FatFile9createLFNEtP8FatLfn_th+0xba>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
 23f4b52:	ebaa 0105 	sub.w	r1, sl, r5
 23f4b56:	b289      	uxth	r1, r1
 23f4b58:	a801      	add	r0, sp, #4
 23f4b5a:	f7ff ff82 	bl	23f4a62 <_ZN7FatFile8cacheDirEt>
    if (!ldir) {
 23f4b5e:	2800      	cmp	r0, #0
 23f4b60:	d03a      	beq.n	23f4bd8 <_ZN7FatFile9createLFNEtP8FatLfn_th+0xbc>
    dir.m_vol->cacheDirty();
 23f4b62:	9a03      	ldr	r2, [sp, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
 23f4b64:	4545      	cmp	r5, r8
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
 23f4b66:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 23f4b6a:	f100 0401 	add.w	r4, r0, #1
 23f4b6e:	f043 0301 	orr.w	r3, r3, #1
 23f4b72:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    ldir->mustBeZero1 = 0;
 23f4b76:	f04f 0200 	mov.w	r2, #0
 23f4b7a:	bf14      	ite	ne
 23f4b7c:	462b      	movne	r3, r5
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
 23f4b7e:	f045 0340 	orreq.w	r3, r5, #64	; 0x40
 23f4b82:	7003      	strb	r3, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
 23f4b84:	f880 b00b 	strb.w	fp, [r0, #11]
    ldir->mustBeZero1 = 0;
 23f4b88:	7302      	strb	r2, [r0, #12]
    ldir->checksum = checksum;
 23f4b8a:	f880 900d 	strb.w	r9, [r0, #13]
 23f4b8e:	8342      	strh	r2, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t cp;
      if (fname->atEnd()) {
 23f4b90:	e9d6 1301 	ldrd	r1, r3, [r6, #4]
 23f4b94:	4299      	cmp	r1, r3
 23f4b96:	d110      	bne.n	23f4bba <_ZN7FatFile9createLFNEtP8FatLfn_th+0x9e>
        cp = fc++ ? 0XFFFF : 0;
 23f4b98:	b19f      	cbz	r7, 23f4bc2 <_ZN7FatFile9createLFNEtP8FatLfn_th+0xa6>
 23f4b9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23f4b9e:	3701      	adds	r7, #1
 23f4ba0:	b2ff      	uxtb	r7, r7
  if (i < 5) {
 23f4ba2:	2a04      	cmp	r2, #4
 23f4ba4:	b2d1      	uxtb	r1, r2
 23f4ba6:	d80f      	bhi.n	23f4bc8 <_ZN7FatFile9createLFNEtP8FatLfn_th+0xac>
 23f4ba8:	8023      	strh	r3, [r4, #0]
    for (uint8_t i = 0; i < 13; i++) {
 23f4baa:	3201      	adds	r2, #1
 23f4bac:	2a0d      	cmp	r2, #13
 23f4bae:	f104 0402 	add.w	r4, r4, #2
 23f4bb2:	d1ed      	bne.n	23f4b90 <_ZN7FatFile9createLFNEtP8FatLfn_th+0x74>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
 23f4bb4:	3501      	adds	r5, #1
 23f4bb6:	b2ed      	uxtb	r5, r5
 23f4bb8:	e7c9      	b.n	23f4b4e <_ZN7FatFile9createLFNEtP8FatLfn_th+0x32>
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() { return atEnd() ? 0 : *next++; }
 23f4bba:	1c4b      	adds	r3, r1, #1
 23f4bbc:	6073      	str	r3, [r6, #4]
 23f4bbe:	780b      	ldrb	r3, [r1, #0]
 23f4bc0:	e7ef      	b.n	23f4ba2 <_ZN7FatFile9createLFNEtP8FatLfn_th+0x86>
        cp = fc++ ? 0XFFFF : 0;
 23f4bc2:	463b      	mov	r3, r7
 23f4bc4:	2701      	movs	r7, #1
 23f4bc6:	e7ec      	b.n	23f4ba2 <_ZN7FatFile9createLFNEtP8FatLfn_th+0x86>
  } else if (i < 11) {
 23f4bc8:	290a      	cmp	r1, #10
 23f4bca:	bf94      	ite	ls
 23f4bcc:	f8a4 3003 	strhls.w	r3, [r4, #3]
 23f4bd0:	f8a4 3005 	strhhi.w	r3, [r4, #5]
}
 23f4bd4:	e7e9      	b.n	23f4baa <_ZN7FatFile9createLFNEtP8FatLfn_th+0x8e>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
 23f4bd6:	2001      	movs	r0, #1

fail:
  return false;
}
 23f4bd8:	b00b      	add	sp, #44	; 0x2c
 23f4bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023f4bde <_ZN7FatFile7makeSFNEP8FatLfn_t>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
 23f4bde:	4602      	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
 23f4be0:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
bool FatFile::makeSFN(FatLfn_t* fname) {
 23f4be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const char* ptr = fname->begin;
 23f4be8:	f852 3b12 	ldr.w	r3, [r2], #18
  const char* end = fname->end;
 23f4bec:	6886      	ldr	r6, [r0, #8]
    fname->sfn[k] = ' ';
 23f4bee:	f8c0 1012 	str.w	r1, [r0, #18]
 23f4bf2:	6051      	str	r1, [r2, #4]
 23f4bf4:	f8c2 1007 	str.w	r1, [r2, #7]
bool FatFile::makeSFN(FatLfn_t* fname) {
 23f4bf8:	4605      	mov	r5, r0
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
 23f4bfa:	7818      	ldrb	r0, [r3, #0]
 23f4bfc:	382e      	subs	r0, #46	; 0x2e
 23f4bfe:	bf18      	it	ne
 23f4c00:	2001      	movne	r0, #1
 23f4c02:	461f      	mov	r7, r3
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {
 23f4c04:	f813 2b01 	ldrb.w	r2, [r3], #1
 23f4c08:	2a2e      	cmp	r2, #46	; 0x2e
 23f4c0a:	d0fa      	beq.n	23f4c02 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x24>
  }
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {
 23f4c0c:	1e72      	subs	r2, r6, #1
 23f4c0e:	42ba      	cmp	r2, r7
 23f4c10:	4696      	mov	lr, r2
 23f4c12:	d903      	bls.n	23f4c1c <_ZN7FatFile7makeSFNEP8FatLfn_t+0x3e>
 23f4c14:	f812 3901 	ldrb.w	r3, [r2], #-1
 23f4c18:	2b2e      	cmp	r3, #46	; 0x2e
 23f4c1a:	d1f8      	bne.n	23f4c0e <_ZN7FatFile7makeSFNEP8FatLfn_t+0x30>
 23f4c1c:	2200      	movs	r2, #0
 23f4c1e:	f04f 0c07 	mov.w	ip, #7
 23f4c22:	4611      	mov	r1, r2
 23f4c24:	4690      	mov	r8, r2
 23f4c26:	f04f 0908 	mov.w	r9, #8
  }

  for (; ptr < end; ptr++) {
 23f4c2a:	42b7      	cmp	r7, r6
 23f4c2c:	d251      	bcs.n	23f4cd2 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xf4>
    c = *ptr;
 23f4c2e:	783b      	ldrb	r3, [r7, #0]
    if (c == '.' && ptr == dot) {
 23f4c30:	2b2e      	cmp	r3, #46	; 0x2e
 23f4c32:	d107      	bne.n	23f4c44 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x66>
 23f4c34:	45be      	cmp	lr, r7
 23f4c36:	d113      	bne.n	23f4c60 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x82>
      in = 10;                // Max index for full 8.3 name.
 23f4c38:	f04f 0c0a 	mov.w	ip, #10
      i = 8;                  // Place for extension.
 23f4c3c:	2408      	movs	r4, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
 23f4c3e:	f04f 0910 	mov.w	r9, #16
 23f4c42:	e03b      	b.n	23f4cbc <_ZN7FatFile7makeSFNEP8FatLfn_t+0xde>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
 23f4c44:	2b22      	cmp	r3, #34	; 0x22
 23f4c46:	d00b      	beq.n	23f4c60 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x82>
 23f4c48:	2b7c      	cmp	r3, #124	; 0x7c
 23f4c4a:	d009      	beq.n	23f4c60 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x82>
 23f4c4c:	f1a3 045b 	sub.w	r4, r3, #91	; 0x5b
 23f4c50:	2c02      	cmp	r4, #2
 23f4c52:	d905      	bls.n	23f4c60 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x82>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
 23f4c54:	f1a3 042a 	sub.w	r4, r3, #42	; 0x2a
 23f4c58:	2c05      	cmp	r4, #5
 23f4c5a:	d806      	bhi.n	23f4c6a <_ZN7FatFile7makeSFNEP8FatLfn_t+0x8c>
 23f4c5c:	2b2d      	cmp	r3, #45	; 0x2d
 23f4c5e:	d013      	beq.n	23f4c88 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xaa>
        if ((c & 0XC0) == 0X80) {
          continue;
        }
        c = '_';
      }
      if (i > in) {
 23f4c60:	4561      	cmp	r1, ip
 23f4c62:	d813      	bhi.n	23f4c8c <_ZN7FatFile7makeSFNEP8FatLfn_t+0xae>
        is83 = false;
 23f4c64:	2000      	movs	r0, #0
        c = '_';
 23f4c66:	235f      	movs	r3, #95	; 0x5f
 23f4c68:	e021      	b.n	23f4cae <_ZN7FatFile7makeSFNEP8FatLfn_t+0xd0>
 23f4c6a:	f1a3 043a 	sub.w	r4, r3, #58	; 0x3a
 23f4c6e:	2c05      	cmp	r4, #5
 23f4c70:	d903      	bls.n	23f4c7a <_ZN7FatFile7makeSFNEP8FatLfn_t+0x9c>
      if (sfnReservedChar(c)) {
 23f4c72:	f1a3 0421 	sub.w	r4, r3, #33	; 0x21
 23f4c76:	2c5d      	cmp	r4, #93	; 0x5d
 23f4c78:	d906      	bls.n	23f4c88 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xaa>
        if ((c & 0XC0) == 0X80) {
 23f4c7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 23f4c7e:	2b80      	cmp	r3, #128	; 0x80
 23f4c80:	d1ee      	bne.n	23f4c60 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x82>
 23f4c82:	460c      	mov	r4, r1
        is83 = false;
 23f4c84:	2000      	movs	r0, #0
 23f4c86:	e019      	b.n	23f4cbc <_ZN7FatFile7makeSFNEP8FatLfn_t+0xde>
      if (i > in) {
 23f4c88:	4561      	cmp	r1, ip
 23f4c8a:	d907      	bls.n	23f4c9c <_ZN7FatFile7makeSFNEP8FatLfn_t+0xbe>
        is83 = false;
        if (in == 10 || ptr > dot) {
 23f4c8c:	f1bc 0f0a 	cmp.w	ip, #10
 23f4c90:	d01e      	beq.n	23f4cd0 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xf2>
 23f4c92:	45be      	cmp	lr, r7
 23f4c94:	d31c      	bcc.n	23f4cd0 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xf2>
          // Done - extension longer than three characters or no extension.
          break;
        }
        // Skip to dot.
        ptr = dot - 1;
 23f4c96:	f10e 37ff 	add.w	r7, lr, #4294967295	; 0xffffffff
        continue;
 23f4c9a:	e7f2      	b.n	23f4c82 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xa4>
      }
      if (isLower(c)) {
 23f4c9c:	f1a3 0461 	sub.w	r4, r3, #97	; 0x61
 23f4ca0:	2c19      	cmp	r4, #25
 23f4ca2:	d80e      	bhi.n	23f4cc2 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xe4>
        c += 'A' - 'a';
 23f4ca4:	3b20      	subs	r3, #32
        lc |= bit;
 23f4ca6:	ea49 0202 	orr.w	r2, r9, r2
        c += 'A' - 'a';
 23f4caa:	b2db      	uxtb	r3, r3
        lc |= bit;
 23f4cac:	b2d2      	uxtb	r2, r2
      } else if (isUpper(c)) {
        uc |= bit;
      }
      fname->sfn[i++] = c;
 23f4cae:	1c4c      	adds	r4, r1, #1
 23f4cb0:	b2e4      	uxtb	r4, r4
 23f4cb2:	4429      	add	r1, r5
      if (i < 7) {
 23f4cb4:	2c06      	cmp	r4, #6
      fname->sfn[i++] = c;
 23f4cb6:	748b      	strb	r3, [r1, #18]
      if (i < 7) {
 23f4cb8:	d800      	bhi.n	23f4cbc <_ZN7FatFile7makeSFNEP8FatLfn_t+0xde>
        fname->seqPos = i;
 23f4cba:	742c      	strb	r4, [r5, #16]
  for (; ptr < end; ptr++) {
 23f4cbc:	4621      	mov	r1, r4
 23f4cbe:	3701      	adds	r7, #1
 23f4cc0:	e7b3      	b.n	23f4c2a <_ZN7FatFile7makeSFNEP8FatLfn_t+0x4c>
      } else if (isUpper(c)) {
 23f4cc2:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
 23f4cc6:	2c19      	cmp	r4, #25
        uc |= bit;
 23f4cc8:	bf98      	it	ls
 23f4cca:	ea49 0808 	orrls.w	r8, r9, r8
 23f4cce:	e7ee      	b.n	23f4cae <_ZN7FatFile7makeSFNEP8FatLfn_t+0xd0>
        is83 = false;
 23f4cd0:	2000      	movs	r0, #0
      }
    }
  }
  if (fname->sfn[0] == ' ') {
 23f4cd2:	7cab      	ldrb	r3, [r5, #18]
 23f4cd4:	2b20      	cmp	r3, #32
 23f4cd6:	d011      	beq.n	23f4cfc <_ZN7FatFile7makeSFNEP8FatLfn_t+0x11e>
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
 23f4cd8:	b130      	cbz	r0, 23f4ce8 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x10a>
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
 23f4cda:	ea18 0f02 	tst.w	r8, r2
 23f4cde:	bf18      	it	ne
 23f4ce0:	2202      	movne	r2, #2
 23f4ce2:	746a      	strb	r2, [r5, #17]
  }
  return true;

fail:
  return false;
}
 23f4ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[fname->seqPos] = '~';
 23f4ce8:	7c2a      	ldrb	r2, [r5, #16]
    fname->flags = FNAME_FLAG_LOST_CHARS;
 23f4cea:	2101      	movs	r1, #1
    fname->sfn[fname->seqPos] = '~';
 23f4cec:	18ab      	adds	r3, r5, r2
 23f4cee:	227e      	movs	r2, #126	; 0x7e
    fname->flags = FNAME_FLAG_LOST_CHARS;
 23f4cf0:	7469      	strb	r1, [r5, #17]
    fname->sfn[fname->seqPos] = '~';
 23f4cf2:	749a      	strb	r2, [r3, #18]
    fname->sfn[fname->seqPos + 1] = '1';
 23f4cf4:	2231      	movs	r2, #49	; 0x31
  return true;
 23f4cf6:	4608      	mov	r0, r1
    fname->sfn[fname->seqPos + 1] = '1';
 23f4cf8:	74da      	strb	r2, [r3, #19]
 23f4cfa:	e7f3      	b.n	23f4ce4 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x106>
  return false;
 23f4cfc:	2000      	movs	r0, #0
 23f4cfe:	e7f1      	b.n	23f4ce4 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x106>

023f4d00 <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
 23f4d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f4d04:	4680      	mov	r8, r0
 23f4d06:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
 23f4d08:	2462      	movs	r4, #98	; 0x62
  const DirFat_t* dir;
  uint16_t hex = 0;
 23f4d0a:	2700      	movs	r7, #0
    for (uint8_t i = pos + 4; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
 23f4d0c:	f04f 097e 	mov.w	r9, #126	; 0x7e
  uint8_t pos = fname->seqPos;
 23f4d10:	7c0e      	ldrb	r6, [r1, #16]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 23f4d12:	f101 0a12 	add.w	sl, r1, #18
 23f4d16:	f002 fc53 	bl	23f75c0 <HAL_Timer_Get_Milli_Seconds>
 23f4d1a:	2e03      	cmp	r6, #3
 23f4d1c:	bf28      	it	cs
 23f4d1e:	2603      	movcs	r6, #3
    hex += millis();
 23f4d20:	4438      	add	r0, r7
    for (uint8_t i = pos + 4; i > pos; i--) {
 23f4d22:	1d33      	adds	r3, r6, #4
    hex += millis();
 23f4d24:	b287      	uxth	r7, r0
    for (uint8_t i = pos + 4; i > pos; i--) {
 23f4d26:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
 23f4d28:	f007 020f 	and.w	r2, r7, #15
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 23f4d2c:	18e9      	adds	r1, r5, r3
    for (uint8_t i = pos + 4; i > pos; i--) {
 23f4d2e:	3b01      	subs	r3, #1
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 23f4d30:	2a09      	cmp	r2, #9
    for (uint8_t i = pos + 4; i > pos; i--) {
 23f4d32:	b2db      	uxtb	r3, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 23f4d34:	bf94      	ite	ls
 23f4d36:	3230      	addls	r2, #48	; 0x30
 23f4d38:	3237      	addhi	r2, #55	; 0x37
    for (uint8_t i = pos + 4; i > pos; i--) {
 23f4d3a:	429e      	cmp	r6, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 23f4d3c:	748a      	strb	r2, [r1, #18]
      hex >>= 4;
 23f4d3e:	ea4f 1717 	mov.w	r7, r7, lsr #4
    for (uint8_t i = pos + 4; i > pos; i--) {
 23f4d42:	d1f1      	bne.n	23f4d28 <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x28>
    fname->sfn[pos] = '~';
 23f4d44:	19ab      	adds	r3, r5, r6
  void rewind() { seekSet(0UL); }
 23f4d46:	2100      	movs	r1, #0
 23f4d48:	4640      	mov	r0, r8
 23f4d4a:	f883 9012 	strb.w	r9, [r3, #18]
 23f4d4e:	f7ff fadc 	bl	23f430a <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
 23f4d52:	2101      	movs	r1, #1
 23f4d54:	4640      	mov	r0, r8
 23f4d56:	f7ff fab9 	bl	23f42cc <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 23f4d5a:	4601      	mov	r1, r0
 23f4d5c:	b930      	cbnz	r0, 23f4d6c <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x6c>
        if (!getError()) {
 23f4d5e:	f898 0001 	ldrb.w	r0, [r8, #1]
 23f4d62:	fab0 f080 	clz	r0, r0
 23f4d66:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
 23f4d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (dir->name[0] == FAT_NAME_FREE) {
 23f4d6c:	7803      	ldrb	r3, [r0, #0]
 23f4d6e:	b173      	cbz	r3, 23f4d8e <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x8e>
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 23f4d70:	7ac3      	ldrb	r3, [r0, #11]
 23f4d72:	071b      	lsls	r3, r3, #28
 23f4d74:	d4ed      	bmi.n	23f4d52 <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x52>
 23f4d76:	220b      	movs	r2, #11
 23f4d78:	4650      	mov	r0, sl
 23f4d7a:	f008 f82b 	bl	23fcdd4 <memcmp>
 23f4d7e:	2800      	cmp	r0, #0
 23f4d80:	d1e7      	bne.n	23f4d52 <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x52>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
 23f4d82:	1e60      	subs	r0, r4, #1
 23f4d84:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
 23f4d88:	d1c5      	bne.n	23f4d16 <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x16>
  return false;
 23f4d8a:	4620      	mov	r0, r4
fail:
 23f4d8c:	e7ec      	b.n	23f4d68 <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x68>
  return true;
 23f4d8e:	2001      	movs	r0, #1
 23f4d90:	e7ea      	b.n	23f4d68 <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x68>
	...

023f4d94 <_ZN7FatFile4openEPS_P8FatLfn_ti>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
 23f4d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f4d98:	ed2d 8b02 	vpush	{d8}
 23f4d9c:	b08b      	sub	sp, #44	; 0x2c
 23f4d9e:	9304      	str	r3, [sp, #16]
  uint16_t time;
  DirFat_t* dir;
  const DirLfn_t* ldir;
  auto vol = dirFile->m_vol;

  if (!dirFile->isDir() || isOpen()) {
 23f4da0:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
 23f4da2:	460d      	mov	r5, r1
  if (!dirFile->isDir() || isOpen()) {
 23f4da4:	f013 0fd0 	tst.w	r3, #208	; 0xd0
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
 23f4da8:	4617      	mov	r7, r2
 23f4daa:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
 23f4dac:	d105      	bne.n	23f4dba <_ZN7FatFile4openEPS_P8FatLfn_ti+0x26>
    goto fail;
  }
  return true;

fail:
  return false;
 23f4dae:	2000      	movs	r0, #0
}
 23f4db0:	b00b      	add	sp, #44	; 0x2c
 23f4db2:	ecbd 8b02 	vpop	{d8}
 23f4db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool isOpen() const { return m_attributes; }
 23f4dba:	9b07      	ldr	r3, [sp, #28]
 23f4dbc:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
 23f4dbe:	2b00      	cmp	r3, #0
 23f4dc0:	d1f5      	bne.n	23f4dae <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
  nameOrd = (fname->len + 12) / 13;
 23f4dc2:	68d3      	ldr	r3, [r2, #12]
 23f4dc4:	220d      	movs	r2, #13
 23f4dc6:	330c      	adds	r3, #12
 23f4dc8:	fbb3 f3f2 	udiv	r3, r3, r2
 23f4dcc:	b2db      	uxtb	r3, r3
 23f4dce:	9306      	str	r3, [sp, #24]
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
 23f4dd0:	7c7b      	ldrb	r3, [r7, #17]
  uint8_t checksum = 0;
 23f4dd2:	f04f 0a00 	mov.w	sl, #0
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
 23f4dd6:	079a      	lsls	r2, r3, #30
 23f4dd8:	bf0c      	ite	eq
 23f4dda:	2301      	moveq	r3, #1
 23f4ddc:	9b06      	ldrne	r3, [sp, #24]
  void rewind() { seekSet(0UL); }
 23f4dde:	4628      	mov	r0, r5
 23f4de0:	bf1c      	itt	ne
 23f4de2:	f103 0901 	addne.w	r9, r3, #1
 23f4de6:	fa5f f389 	uxtbne.w	r3, r9
 23f4dea:	9302      	str	r3, [sp, #8]
  auto vol = dirFile->m_vol;
 23f4dec:	688b      	ldr	r3, [r1, #8]
 23f4dee:	2100      	movs	r1, #0
 23f4df0:	9305      	str	r3, [sp, #20]
 23f4df2:	f7ff fa8a 	bl	23f430a <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 23f4df6:	f107 0312 	add.w	r3, r7, #18
  uint8_t order = 0;
 23f4dfa:	46d0      	mov	r8, sl
  uint8_t freeFound = 0;
 23f4dfc:	4654      	mov	r4, sl
  uint8_t lfnOrd = 0;
 23f4dfe:	46d1      	mov	r9, sl
  bool fnameFound = false;
 23f4e00:	46d3      	mov	fp, sl
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 23f4e02:	ee08 3a10 	vmov	s16, r3
  uint16_t freeIndex = 0;
 23f4e06:	f8cd a00c 	str.w	sl, [sp, #12]
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
 23f4e0a:	696e      	ldr	r6, [r5, #20]
    dir = dirFile->readDirCache();
 23f4e0c:	2100      	movs	r1, #0
 23f4e0e:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
 23f4e10:	f3c6 164f 	ubfx	r6, r6, #5, #16
    dir = dirFile->readDirCache();
 23f4e14:	f7ff fa5a 	bl	23f42cc <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 23f4e18:	2800      	cmp	r0, #0
 23f4e1a:	d12f      	bne.n	23f4e7c <_ZN7FatFile4openEPS_P8FatLfn_ti+0xe8>
      if (dirFile->getError()) {
 23f4e1c:	786b      	ldrb	r3, [r5, #1]
 23f4e1e:	2b00      	cmp	r3, #0
 23f4e20:	d1c5      	bne.n	23f4dae <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
 23f4e22:	9b04      	ldr	r3, [sp, #16]
 23f4e24:	059a      	lsls	r2, r3, #22
 23f4e26:	d5c2      	bpl.n	23f4dae <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>

#define O_READ O_RDONLY
#define O_WRITE O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
 23f4e28:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
 23f4e2c:	3b01      	subs	r3, #1
 23f4e2e:	2b01      	cmp	r3, #1
 23f4e30:	d8bd      	bhi.n	23f4dae <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
  if (freeFound == 0) {
 23f4e32:	9b03      	ldr	r3, [sp, #12]
 23f4e34:	2c00      	cmp	r4, #0
 23f4e36:	bf08      	it	eq
 23f4e38:	4633      	moveq	r3, r6
 23f4e3a:	9303      	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
 23f4e3c:	9b02      	ldr	r3, [sp, #8]
 23f4e3e:	429c      	cmp	r4, r3
 23f4e40:	d209      	bcs.n	23f4e56 <_ZN7FatFile4openEPS_P8FatLfn_ti+0xc2>
    dir = dirFile->readDirCache();
 23f4e42:	2100      	movs	r1, #0
 23f4e44:	4628      	mov	r0, r5
 23f4e46:	f7ff fa41 	bl	23f42cc <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 23f4e4a:	2800      	cmp	r0, #0
 23f4e4c:	f040 8085 	bne.w	23f4f5a <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1c6>
      if (dirFile->getError()) {
 23f4e50:	786b      	ldrb	r3, [r5, #1]
 23f4e52:	2b00      	cmp	r3, #0
 23f4e54:	d1ab      	bne.n	23f4dae <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
  while (freeTotal < freeNeed) {
 23f4e56:	f8bd 6008 	ldrh.w	r6, [sp, #8]
  freeTotal = freeFound;
 23f4e5a:	b2a4      	uxth	r4, r4
  while (freeTotal < freeNeed) {
 23f4e5c:	42a6      	cmp	r6, r4
 23f4e5e:	d97f      	bls.n	23f4f60 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1cc>
    if (!dirFile->addDirCluster()) {
 23f4e60:	4628      	mov	r0, r5
 23f4e62:	f7ff f8f9 	bl	23f4058 <_ZN7FatFile13addDirClusterEv>
 23f4e66:	2800      	cmp	r0, #0
 23f4e68:	d0a1      	beq.n	23f4dae <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
    return m_sectorsPerCluster * (m_bytesPerSector / FS_DIR_SIZE);
 23f4e6a:	9b05      	ldr	r3, [sp, #20]
 23f4e6c:	791b      	ldrb	r3, [r3, #4]
    freeTotal += vol->dirEntriesPerCluster();
 23f4e6e:	eb04 1403 	add.w	r4, r4, r3, lsl #4
 23f4e72:	b2a4      	uxth	r4, r4
  while (freeTotal < freeNeed) {
 23f4e74:	e7f2      	b.n	23f4e5c <_ZN7FatFile4openEPS_P8FatLfn_ti+0xc8>
        fnameFound = true;
 23f4e76:	f04f 0b01 	mov.w	fp, #1
 23f4e7a:	e7c6      	b.n	23f4e0a <_ZN7FatFile4openEPS_P8FatLfn_ti+0x76>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
 23f4e7c:	7802      	ldrb	r2, [r0, #0]
 23f4e7e:	2ae5      	cmp	r2, #229	; 0xe5
 23f4e80:	d000      	beq.n	23f4e84 <_ZN7FatFile4openEPS_P8FatLfn_ti+0xf0>
 23f4e82:	b982      	cbnz	r2, 23f4ea6 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x112>
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
 23f4e84:	9b03      	ldr	r3, [sp, #12]
 23f4e86:	2c00      	cmp	r4, #0
 23f4e88:	bf08      	it	eq
 23f4e8a:	4633      	moveq	r3, r6
 23f4e8c:	9303      	str	r3, [sp, #12]
      if (freeFound < freeNeed) {
 23f4e8e:	9b02      	ldr	r3, [sp, #8]
 23f4e90:	429c      	cmp	r4, r3
        freeFound++;
 23f4e92:	bf3c      	itt	cc
 23f4e94:	3401      	addcc	r4, #1
 23f4e96:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
 23f4e98:	2a00      	cmp	r2, #0
 23f4e9a:	d0c2      	beq.n	23f4e22 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x8e>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
 23f4e9c:	2ae5      	cmp	r2, #229	; 0xe5
 23f4e9e:	d106      	bne.n	23f4eae <_ZN7FatFile4openEPS_P8FatLfn_ti+0x11a>
      lfnOrd = 0;
 23f4ea0:	f04f 0900 	mov.w	r9, #0
 23f4ea4:	e7b1      	b.n	23f4e0a <_ZN7FatFile4openEPS_P8FatLfn_ti+0x76>
        freeFound = 0;
 23f4ea6:	9b02      	ldr	r3, [sp, #8]
 23f4ea8:	429c      	cmp	r4, r3
 23f4eaa:	bf38      	it	cc
 23f4eac:	2400      	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
 23f4eae:	2a2e      	cmp	r2, #46	; 0x2e
 23f4eb0:	d0f6      	beq.n	23f4ea0 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x10c>
}
static inline uint8_t isFatLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
 23f4eb2:	7ac1      	ldrb	r1, [r0, #11]
    } else if (isFatLongName(dir)) {
 23f4eb4:	290f      	cmp	r1, #15
 23f4eb6:	d126      	bne.n	23f4f06 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x172>
      if (!lfnOrd) {
 23f4eb8:	f1b9 0f00 	cmp.w	r9, #0
 23f4ebc:	d119      	bne.n	23f4ef2 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x15e>
        if (order != nameOrd ||
 23f4ebe:	9b06      	ldr	r3, [sp, #24]
        order = ldir->order & 0X1F;
 23f4ec0:	f002 081f 	and.w	r8, r2, #31
        if (order != nameOrd ||
 23f4ec4:	4543      	cmp	r3, r8
 23f4ec6:	d1a0      	bne.n	23f4e0a <_ZN7FatFile4openEPS_P8FatLfn_ti+0x76>
 23f4ec8:	f012 0940 	ands.w	r9, r2, #64	; 0x40
 23f4ecc:	d09d      	beq.n	23f4e0a <_ZN7FatFile4openEPS_P8FatLfn_ti+0x76>
        checksum = ldir->checksum;
 23f4ece:	4699      	mov	r9, r3
 23f4ed0:	f890 a00d 	ldrb.w	sl, [r0, #13]
      if (order == 1) {
 23f4ed4:	f1b8 0f01 	cmp.w	r8, #1
 23f4ed8:	d197      	bne.n	23f4e0a <_ZN7FatFile4openEPS_P8FatLfn_ti+0x76>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
 23f4eda:	1c71      	adds	r1, r6, #1
 23f4edc:	464b      	mov	r3, r9
 23f4ede:	463a      	mov	r2, r7
 23f4ee0:	4628      	mov	r0, r5
 23f4ee2:	b289      	uxth	r1, r1
 23f4ee4:	f7ff fdca 	bl	23f4a7c <_ZN7FatFile7cmpNameEtP8FatLfn_th>
          lfnOrd = 0;
 23f4ee8:	2800      	cmp	r0, #0
 23f4eea:	bf08      	it	eq
 23f4eec:	f04f 0900 	moveq.w	r9, #0
 23f4ef0:	e78b      	b.n	23f4e0a <_ZN7FatFile4openEPS_P8FatLfn_ti+0x76>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
 23f4ef2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23f4ef6:	fa5f f888 	uxtb.w	r8, r8
 23f4efa:	4542      	cmp	r2, r8
 23f4efc:	d1d0      	bne.n	23f4ea0 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x10c>
 23f4efe:	7b42      	ldrb	r2, [r0, #13]
 23f4f00:	4552      	cmp	r2, sl
 23f4f02:	d0e7      	beq.n	23f4ed4 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x140>
 23f4f04:	e7cc      	b.n	23f4ea0 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x10c>
    } else if (isFatFileOrSubdir(dir)) {
 23f4f06:	070b      	lsls	r3, r1, #28
 23f4f08:	d4ca      	bmi.n	23f4ea0 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x10c>
      if (lfnOrd) {
 23f4f0a:	f1b9 0f00 	cmp.w	r9, #0
 23f4f0e:	d00a      	beq.n	23f4f26 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x192>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
 23f4f10:	f1b8 0f01 	cmp.w	r8, #1
 23f4f14:	f47f af4b 	bne.w	23f4dae <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
 23f4f18:	f7ff fd94 	bl	23f4a44 <_ZN7FatFile11lfnChecksumEPKh.isra.0>
 23f4f1c:	4550      	cmp	r0, sl
 23f4f1e:	f47f af46 	bne.w	23f4dae <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
 23f4f22:	46cb      	mov	fp, r9
 23f4f24:	e00c      	b.n	23f4f40 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1ac>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 23f4f26:	220b      	movs	r2, #11
 23f4f28:	ee18 1a10 	vmov	r1, s16
 23f4f2c:	f007 ff52 	bl	23fcdd4 <memcmp>
 23f4f30:	2800      	cmp	r0, #0
 23f4f32:	f47f af6a 	bne.w	23f4e0a <_ZN7FatFile4openEPS_P8FatLfn_ti+0x76>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 23f4f36:	f897 b011 	ldrb.w	fp, [r7, #17]
 23f4f3a:	f01b 0b01 	ands.w	fp, fp, #1
 23f4f3e:	d19a      	bne.n	23f4e76 <_ZN7FatFile4openEPS_P8FatLfn_ti+0xe2>
  if (oflag & O_EXCL) {
 23f4f40:	9b04      	ldr	r3, [sp, #16]
 23f4f42:	0519      	lsls	r1, r3, #20
 23f4f44:	f53f af33 	bmi.w	23f4dae <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 23f4f48:	4632      	mov	r2, r6
 23f4f4a:	4629      	mov	r1, r5
 23f4f4c:	9b04      	ldr	r3, [sp, #16]
 23f4f4e:	9807      	ldr	r0, [sp, #28]
 23f4f50:	f8cd b000 	str.w	fp, [sp]
 23f4f54:	f7ff fa29 	bl	23f43aa <_ZN7FatFile15openCachedEntryEPS_tih>
 23f4f58:	e72a      	b.n	23f4db0 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1c>
    freeFound++;
 23f4f5a:	3401      	adds	r4, #1
 23f4f5c:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
 23f4f5e:	e76d      	b.n	23f4e3c <_ZN7FatFile4openEPS_P8FatLfn_ti+0xa8>
  if (fnameFound) {
 23f4f60:	f1bb 0f00 	cmp.w	fp, #0
 23f4f64:	d147      	bne.n	23f4ff6 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x262>
  lfnOrd = freeNeed - 1;
 23f4f66:	9b02      	ldr	r3, [sp, #8]
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
 23f4f68:	463a      	mov	r2, r7
  lfnOrd = freeNeed - 1;
 23f4f6a:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
  curIndex = freeIndex + lfnOrd;
 23f4f6e:	9b03      	ldr	r3, [sp, #12]
  lfnOrd = freeNeed - 1;
 23f4f70:	fa5f fb89 	uxtb.w	fp, r9
  curIndex = freeIndex + lfnOrd;
 23f4f74:	fa53 f989 	uxtab	r9, r3, r9
 23f4f78:	fa1f f689 	uxth.w	r6, r9
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
 23f4f7c:	465b      	mov	r3, fp
 23f4f7e:	4631      	mov	r1, r6
 23f4f80:	4628      	mov	r0, r5
 23f4f82:	f7ff fdcb 	bl	23f4b1c <_ZN7FatFile9createLFNEtP8FatLfn_th>
 23f4f86:	2800      	cmp	r0, #0
 23f4f88:	f43f af11 	beq.w	23f4dae <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
  dir = dirFile->cacheDir(curIndex);
 23f4f8c:	4631      	mov	r1, r6
 23f4f8e:	4628      	mov	r0, r5
 23f4f90:	f7ff fd67 	bl	23f4a62 <_ZN7FatFile8cacheDirEt>
  if (!dir) {
 23f4f94:	4604      	mov	r4, r0
 23f4f96:	2800      	cmp	r0, #0
 23f4f98:	f43f af09 	beq.w	23f4dae <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
  memset(dir, 0, sizeof(DirFat_t));
 23f4f9c:	2220      	movs	r2, #32
 23f4f9e:	2100      	movs	r1, #0
 23f4fa0:	f007 ff35 	bl	23fce0e <memset>
  memcpy(dir->name, fname->sfn, 11);
 23f4fa4:	f8d7 3012 	ldr.w	r3, [r7, #18]
 23f4fa8:	6023      	str	r3, [r4, #0]
 23f4faa:	f8d7 3016 	ldr.w	r3, [r7, #22]
 23f4fae:	6063      	str	r3, [r4, #4]
 23f4fb0:	8b7b      	ldrh	r3, [r7, #26]
 23f4fb2:	8123      	strh	r3, [r4, #8]
 23f4fb4:	7f3b      	ldrb	r3, [r7, #28]
 23f4fb6:	72a3      	strb	r3, [r4, #10]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
 23f4fb8:	7c7b      	ldrb	r3, [r7, #17]
 23f4fba:	f003 0318 	and.w	r3, r3, #24
 23f4fbe:	7323      	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
 23f4fc0:	4b13      	ldr	r3, [pc, #76]	; (23f5010 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x27c>)
 23f4fc2:	681b      	ldr	r3, [r3, #0]
 23f4fc4:	b1f3      	cbz	r3, 23f5004 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x270>
    FsDateTime::callback(&date, &time, &ms10);
 23f4fc6:	f10d 0223 	add.w	r2, sp, #35	; 0x23
 23f4fca:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 23f4fce:	a809      	add	r0, sp, #36	; 0x24
 23f4fd0:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
 23f4fd2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 23f4fd6:	8223      	strh	r3, [r4, #16]
 23f4fd8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 23f4fdc:	81e3      	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
 23f4fde:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 23f4fe2:	7363      	strb	r3, [r4, #13]
 23f4fe4:	9b05      	ldr	r3, [sp, #20]
 23f4fe6:	9a05      	ldr	r2, [sp, #20]
 23f4fe8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 23f4fec:	f043 0301 	orr.w	r3, r3, #1
 23f4ff0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  void cacheDirty() { m_cache.dirty(); }
 23f4ff4:	e7a8      	b.n	23f4f48 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1b4>
    if (!dirFile->makeUniqueSfn(fname)) {
 23f4ff6:	4639      	mov	r1, r7
 23f4ff8:	4628      	mov	r0, r5
 23f4ffa:	f7ff fe81 	bl	23f4d00 <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t>
 23f4ffe:	2800      	cmp	r0, #0
 23f5000:	d1b1      	bne.n	23f4f66 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1d2>
 23f5002:	e6d4      	b.n	23f4dae <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
 23f5004:	f645 2321 	movw	r3, #23073	; 0x5a21
 23f5008:	8223      	strh	r3, [r4, #16]
 23f500a:	8323      	strh	r3, [r4, #24]
 23f500c:	8263      	strh	r3, [r4, #18]
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59
 23f500e:	e7e9      	b.n	23f4fe4 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x250>
 23f5010:	1007aeac 	.word	0x1007aeac

023f5014 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path, FatLfn_t* fname,
                            const char** ptr) {
 23f5014:	b470      	push	{r4, r5, r6}
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
 23f5016:	460d      	mov	r5, r1
 23f5018:	f811 0b01 	ldrb.w	r0, [r1], #1
 23f501c:	2820      	cmp	r0, #32
 23f501e:	d0fa      	beq.n	23f5016 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x2>
    path++;
  }
  fname->begin = path;
  fname->len = 0;
 23f5020:	2100      	movs	r1, #0
 23f5022:	4628      	mov	r0, r5
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':' || c == '<' ||
 23f5024:	4e1c      	ldr	r6, [pc, #112]	; (23f5098 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x84>)
  fname->begin = path;
 23f5026:	6015      	str	r5, [r2, #0]
  fname->len = 0;
 23f5028:	60d1      	str	r1, [r2, #12]
  while (*path && !isDirSeparator(*path)) {
 23f502a:	4604      	mov	r4, r0
 23f502c:	f814 1b01 	ldrb.w	r1, [r4], #1
 23f5030:	b1f1      	cbz	r1, 23f5070 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x5c>
 23f5032:	292f      	cmp	r1, #47	; 0x2f
 23f5034:	d01c      	beq.n	23f5070 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x5c>
         c == '>' || c == '?' || c == '\\' || c == '|';
 23f5036:	f1a1 0020 	sub.w	r0, r1, #32
 23f503a:	285f      	cmp	r0, #95	; 0x5f
 23f503c:	d828      	bhi.n	23f5090 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x7c>
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':' || c == '<' ||
 23f503e:	f1a1 0022 	sub.w	r0, r1, #34	; 0x22
 23f5042:	b2c0      	uxtb	r0, r0
 23f5044:	281d      	cmp	r0, #29
 23f5046:	d803      	bhi.n	23f5050 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x3c>
 23f5048:	fa26 f000 	lsr.w	r0, r6, r0
 23f504c:	07c0      	lsls	r0, r0, #31
 23f504e:	d41f      	bmi.n	23f5090 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x7c>
 23f5050:	f001 00bf 	and.w	r0, r1, #191	; 0xbf
 23f5054:	283c      	cmp	r0, #60	; 0x3c
 23f5056:	d01b      	beq.n	23f5090 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x7c>
         c == '>' || c == '?' || c == '\\' || c == '|';
 23f5058:	295c      	cmp	r1, #92	; 0x5c
 23f505a:	d019      	beq.n	23f5090 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x7c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len++;
#endif  // USE_UTF8_LONG_NAMES
    if (cp != '.' && cp != ' ') {
 23f505c:	292e      	cmp	r1, #46	; 0x2e
 23f505e:	eba4 0005 	sub.w	r0, r4, r5
 23f5062:	d003      	beq.n	23f506c <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x58>
 23f5064:	2920      	cmp	r1, #32
 23f5066:	d001      	beq.n	23f506c <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x58>
      // Need to trim trailing dots spaces.
      fname->len = len;
      fname->end = path;
 23f5068:	e9c2 4002 	strd	r4, r0, [r2, #8]
                            const char** ptr) {
 23f506c:	4620      	mov	r0, r4
 23f506e:	e7dc      	b.n	23f502a <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x16>
    }
  }
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
 23f5070:	68d1      	ldr	r1, [r2, #12]
 23f5072:	3901      	subs	r1, #1
 23f5074:	29fe      	cmp	r1, #254	; 0xfe
 23f5076:	d80b      	bhi.n	23f5090 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x7c>
 23f5078:	4604      	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {
 23f507a:	f810 1b01 	ldrb.w	r1, [r0], #1
 23f507e:	2920      	cmp	r1, #32
 23f5080:	d0fa      	beq.n	23f5078 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x64>
 23f5082:	292f      	cmp	r1, #47	; 0x2f
 23f5084:	d0f8      	beq.n	23f5078 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x64>
  }
  *ptr = path;
 23f5086:	601c      	str	r4, [r3, #0]
  return makeSFN(fname);
 23f5088:	4610      	mov	r0, r2

fail:
  return false;
}
 23f508a:	bc70      	pop	{r4, r5, r6}
  return makeSFN(fname);
 23f508c:	f7ff bda7 	b.w	23f4bde <_ZN7FatFile7makeSFNEP8FatLfn_t>
}
 23f5090:	2000      	movs	r0, #0
 23f5092:	bc70      	pop	{r4, r5, r6}
 23f5094:	4770      	bx	lr
 23f5096:	bf00      	nop
 23f5098:	31000101 	.word	0x31000101

023f509c <_ZN7FatFile6removeEv>:
  FatFile() {}
 23f509c:	2300      	movs	r3, #0
//------------------------------------------------------------------------------
bool FatFile::remove() {
 23f509e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f50a2:	b08a      	sub	sp, #40	; 0x28
 23f50a4:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
 23f50a6:	7883      	ldrb	r3, [r0, #2]
bool FatFile::remove() {
 23f50a8:	4604      	mov	r4, r0
  if (!isWritable()) {
 23f50aa:	079a      	lsls	r2, r3, #30
 23f50ac:	d507      	bpl.n	23f50be <_ZN7FatFile6removeEv+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
 23f50ae:	6a01      	ldr	r1, [r0, #32]
 23f50b0:	b939      	cbnz	r1, 23f50c2 <_ZN7FatFile6removeEv+0x26>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
 23f50b2:	2101      	movs	r1, #1
 23f50b4:	4620      	mov	r0, r4
 23f50b6:	f7ff f807 	bl	23f40c8 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
 23f50ba:	4605      	mov	r5, r0
 23f50bc:	b938      	cbnz	r0, 23f50ce <_ZN7FatFile6removeEv+0x32>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
 23f50be:	2000      	movs	r0, #0
 23f50c0:	e042      	b.n	23f5148 <_ZN7FatFile6removeEv+0xac>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
 23f50c2:	6880      	ldr	r0, [r0, #8]
 23f50c4:	f001 ffbe 	bl	23f7044 <_ZN12FatPartition9freeChainEm>
 23f50c8:	2800      	cmp	r0, #0
 23f50ca:	d1f2      	bne.n	23f50b2 <_ZN7FatFile6removeEv+0x16>
 23f50cc:	e7f7      	b.n	23f50be <_ZN7FatFile6removeEv+0x22>
  dir->name[0] = FAT_NAME_DELETED;
 23f50ce:	27e5      	movs	r7, #229	; 0xe5
  checksum = lfnChecksum(dir->name);
 23f50d0:	f7ff fcb8 	bl	23f4a44 <_ZN7FatFile11lfnChecksumEPKh.isra.0>
  m_attributes = FILE_ATTR_CLOSED;
 23f50d4:	2300      	movs	r3, #0
  dir->name[0] = FAT_NAME_DELETED;
 23f50d6:	702f      	strb	r7, [r5, #0]
  checksum = lfnChecksum(dir->name);
 23f50d8:	4606      	mov	r6, r0
  m_attributes = FILE_ATTR_CLOSED;
 23f50da:	7023      	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
 23f50dc:	68a0      	ldr	r0, [r4, #8]
  m_flags = 0;
 23f50de:	70a3      	strb	r3, [r4, #2]
  if (!m_vol->cacheSync()) {
 23f50e0:	f7fe ff80 	bl	23f3fe4 <_ZN12FatPartition9cacheSyncEv>
 23f50e4:	2800      	cmp	r0, #0
 23f50e6:	d0ea      	beq.n	23f50be <_ZN7FatFile6removeEv+0x22>
  if (!isLFN()) {
 23f50e8:	78e3      	ldrb	r3, [r4, #3]
 23f50ea:	b36b      	cbz	r3, 23f5148 <_ZN7FatFile6removeEv+0xac>
  if (!dirFile.openCluster(this)) {
 23f50ec:	4621      	mov	r1, r4
 23f50ee:	a801      	add	r0, sp, #4
 23f50f0:	f7fe ffff 	bl	23f40f2 <_ZN7FatFile11openClusterEPS_>
 23f50f4:	2800      	cmp	r0, #0
 23f50f6:	d0e2      	beq.n	23f50be <_ZN7FatFile6removeEv+0x22>
 23f50f8:	2501      	movs	r5, #1
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
 23f50fa:	78e3      	ldrb	r3, [r4, #3]
 23f50fc:	fa5f f885 	uxtb.w	r8, r5
 23f5100:	4543      	cmp	r3, r8
 23f5102:	d3dc      	bcc.n	23f50be <_ZN7FatFile6removeEv+0x22>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
 23f5104:	88a1      	ldrh	r1, [r4, #4]
 23f5106:	a801      	add	r0, sp, #4
 23f5108:	1b49      	subs	r1, r1, r5
 23f510a:	b289      	uxth	r1, r1
 23f510c:	f7ff fca9 	bl	23f4a62 <_ZN7FatFile8cacheDirEt>
    if (!ldir) {
 23f5110:	2800      	cmp	r0, #0
 23f5112:	d0d4      	beq.n	23f50be <_ZN7FatFile6removeEv+0x22>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
 23f5114:	7ac3      	ldrb	r3, [r0, #11]
 23f5116:	2b0f      	cmp	r3, #15
 23f5118:	d1d1      	bne.n	23f50be <_ZN7FatFile6removeEv+0x22>
        order != (ldir->order & 0X1F) || checksum != ldir->checksum) {
 23f511a:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
 23f511c:	f002 031f 	and.w	r3, r2, #31
 23f5120:	4543      	cmp	r3, r8
 23f5122:	d1cc      	bne.n	23f50be <_ZN7FatFile6removeEv+0x22>
        order != (ldir->order & 0X1F) || checksum != ldir->checksum) {
 23f5124:	7b43      	ldrb	r3, [r0, #13]
 23f5126:	42b3      	cmp	r3, r6
 23f5128:	d1c9      	bne.n	23f50be <_ZN7FatFile6removeEv+0x22>
    ldir->order = FAT_NAME_DELETED;
 23f512a:	7007      	strb	r7, [r0, #0]
    m_vol->cacheDirty();
 23f512c:	68a1      	ldr	r1, [r4, #8]
    if (last) {
 23f512e:	3501      	adds	r5, #1
 23f5130:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
 23f5134:	b2ad      	uxth	r5, r5
 23f5136:	f043 0301 	orr.w	r3, r3, #1
 23f513a:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
 23f513e:	0653      	lsls	r3, r2, #25
 23f5140:	d5db      	bpl.n	23f50fa <_ZN7FatFile6removeEv+0x5e>
      if (!m_vol->cacheSync()) {
 23f5142:	68a0      	ldr	r0, [r4, #8]
 23f5144:	f7fe ff4e 	bl	23f3fe4 <_ZN12FatPartition9cacheSyncEv>
}
 23f5148:	b00a      	add	sp, #40	; 0x28
 23f514a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f514e <_ZN7Timeout8timedOutEv.isra.0>:
 public:
  Timeout() {}
  explicit Timeout(uint16_t ms) { set(ms); }
  uint16_t millis16() { return millis(); }
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
 23f514e:	b510      	push	{r4, lr}
 23f5150:	4604      	mov	r4, r0
 23f5152:	f002 fa35 	bl	23f75c0 <HAL_Timer_Get_Milli_Seconds>
 23f5156:	1a20      	subs	r0, r4, r0
 23f5158:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 23f515c:	bd10      	pop	{r4, pc}

023f515e <_ZN18SdSpiArduinoDriver11setSckSpeedEm>:
 23f515e:	2300      	movs	r3, #0
 23f5160:	7203      	strb	r3, [r0, #8]
 23f5162:	2301      	movs	r3, #1
 23f5164:	60c1      	str	r1, [r0, #12]
 23f5166:	8203      	strh	r3, [r0, #16]
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
  }
 23f5168:	4770      	bx	lr

023f516a <_ZN9SdSpiCard8spiStartEv>:
  (void)value;
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
 23f516a:	b538      	push	{r3, r4, r5, lr}
  SPI_ASSERT_NOT_ACTIVE;
  if (!m_spiActive) {
 23f516c:	7f05      	ldrb	r5, [r0, #28]
void SdSpiCard::spiStart() {
 23f516e:	4604      	mov	r4, r0
  if (!m_spiActive) {
 23f5170:	b96d      	cbnz	r5, 23f518e <_ZN9SdSpiCard8spiStartEv+0x24>
  void spiActivate() { m_spiDriver.activate(); }
 23f5172:	f000 faab 	bl	23f56cc <_ZN18SdSpiArduinoDriver8activateEv>
    spiActivate();
    m_spiActive = true;
 23f5176:	2301      	movs	r3, #1
  void spiSelect() { sdCsWrite(m_csPin, false); }
 23f5178:	4629      	mov	r1, r5
 23f517a:	7ea0      	ldrb	r0, [r4, #26]
 23f517c:	7723      	strb	r3, [r4, #28]
 23f517e:	f002 f934 	bl	23f73ea <_Z9sdCsWritehb>
    m_spiDriver.send(data);
 23f5182:	4620      	mov	r0, r4
    spiSelect();
    // Dummy byte to drive MISO busy status.
    spiSend(0XFF);
  }
}
 23f5184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23f5188:	21ff      	movs	r1, #255	; 0xff
 23f518a:	f000 bae7 	b.w	23f575c <_ZN18SdSpiArduinoDriver4sendEh>
 23f518e:	bd38      	pop	{r3, r4, r5, pc}

023f5190 <_ZN9SdSpiCard7spiStopEv>:
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
 23f5190:	b510      	push	{r4, lr}
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
 23f5192:	7f03      	ldrb	r3, [r0, #28]
void SdSpiCard::spiStop() {
 23f5194:	4604      	mov	r4, r0
  if (m_spiActive) {
 23f5196:	b163      	cbz	r3, 23f51b2 <_ZN9SdSpiCard7spiStopEv+0x22>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
 23f5198:	2101      	movs	r1, #1
 23f519a:	7e80      	ldrb	r0, [r0, #26]
 23f519c:	f002 f925 	bl	23f73ea <_Z9sdCsWritehb>
    m_spiDriver.send(data);
 23f51a0:	21ff      	movs	r1, #255	; 0xff
 23f51a2:	4620      	mov	r0, r4
 23f51a4:	f000 fada 	bl	23f575c <_ZN18SdSpiArduinoDriver4sendEh>
  void spiDeactivate() { m_spiDriver.deactivate(); }
 23f51a8:	4620      	mov	r0, r4
 23f51aa:	f000 fab9 	bl	23f5720 <_ZN18SdSpiArduinoDriver10deactivateEv>
    spiUnselect();
    // Insure MISO goes to low Z.
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
 23f51ae:	2300      	movs	r3, #0
 23f51b0:	7723      	strb	r3, [r4, #28]
  }
}
 23f51b2:	bd10      	pop	{r4, pc}

023f51b4 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 23f51b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f51b6:	4604      	mov	r4, r0
 23f51b8:	460e      	mov	r6, r1
 23f51ba:	4617      	mov	r7, r2
 23f51bc:	f002 fa00 	bl	23f75c0 <HAL_Timer_Get_Milli_Seconds>
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
 23f51c0:	f500 7096 	add.w	r0, r0, #300	; 0x12c
 23f51c4:	b285      	uxth	r5, r0
    return m_spiDriver.receive();
 23f51c6:	4620      	mov	r0, r4
 23f51c8:	f000 faad 	bl	23f5726 <_ZN18SdSpiArduinoDriver7receiveEv>
  while ((m_status = spiReceive()) == 0XFF) {
 23f51cc:	28ff      	cmp	r0, #255	; 0xff
 23f51ce:	77a0      	strb	r0, [r4, #30]
 23f51d0:	d10b      	bne.n	23f51ea <_ZN9SdSpiCard8readDataEPhj+0x36>
    if (timeout.timedOut()) {
 23f51d2:	4628      	mov	r0, r5
 23f51d4:	f7ff ffbb 	bl	23f514e <_ZN7Timeout8timedOutEv.isra.0>
 23f51d8:	2800      	cmp	r0, #0
 23f51da:	d0f4      	beq.n	23f51c6 <_ZN9SdSpiCard8readDataEPhj+0x12>
    m_errorCode = code;
 23f51dc:	231e      	movs	r3, #30
  spiStop();
 23f51de:	4620      	mov	r0, r4
 23f51e0:	76e3      	strb	r3, [r4, #27]
 23f51e2:	f7ff ffd5 	bl	23f5190 <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f51e6:	2000      	movs	r0, #0
}
 23f51e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_SECTOR) {
 23f51ea:	28fe      	cmp	r0, #254	; 0xfe
 23f51ec:	d001      	beq.n	23f51f2 <_ZN9SdSpiCard8readDataEPhj+0x3e>
 23f51ee:	2319      	movs	r3, #25
 23f51f0:	e7f5      	b.n	23f51de <_ZN9SdSpiCard8readDataEPhj+0x2a>
    return m_spiDriver.receive(buf, n);
 23f51f2:	463a      	mov	r2, r7
 23f51f4:	4631      	mov	r1, r6
 23f51f6:	4620      	mov	r0, r4
 23f51f8:	f000 fa9a 	bl	23f5730 <_ZN18SdSpiArduinoDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
 23f51fc:	77a0      	strb	r0, [r4, #30]
 23f51fe:	b108      	cbz	r0, 23f5204 <_ZN9SdSpiCard8readDataEPhj+0x50>
    m_errorCode = code;
 23f5200:	2326      	movs	r3, #38	; 0x26
 23f5202:	e7ec      	b.n	23f51de <_ZN9SdSpiCard8readDataEPhj+0x2a>
    return m_spiDriver.receive();
 23f5204:	4620      	mov	r0, r4
 23f5206:	f000 fa8e 	bl	23f5726 <_ZN18SdSpiArduinoDriver7receiveEv>
 23f520a:	4620      	mov	r0, r4
 23f520c:	f000 fa8b 	bl	23f5726 <_ZN18SdSpiArduinoDriver7receiveEv>
  return true;
 23f5210:	2001      	movs	r0, #1
 23f5212:	e7e9      	b.n	23f51e8 <_ZN9SdSpiCard8readDataEPhj+0x34>

023f5214 <_ZN9SdSpiCard8readDataEPh>:
bool SdSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
 23f5214:	f44f 7200 	mov.w	r2, #512	; 0x200
 23f5218:	f7ff bfcc 	b.w	23f51b4 <_ZN9SdSpiCard8readDataEPhj>

023f521c <_ZN9SdSpiCard9waitReadyEt>:
    return readStop();
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::waitReady(uint16_t ms) {
 23f521c:	b538      	push	{r3, r4, r5, lr}
 23f521e:	460c      	mov	r4, r1
 23f5220:	4605      	mov	r5, r0
 23f5222:	f002 f9cd 	bl	23f75c0 <HAL_Timer_Get_Milli_Seconds>
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
 23f5226:	4404      	add	r4, r0
 23f5228:	b2a4      	uxth	r4, r4
 23f522a:	4628      	mov	r0, r5
 23f522c:	f000 fa7b 	bl	23f5726 <_ZN18SdSpiArduinoDriver7receiveEv>
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
 23f5230:	28ff      	cmp	r0, #255	; 0xff
 23f5232:	d006      	beq.n	23f5242 <_ZN9SdSpiCard9waitReadyEt+0x26>
    if (timeout.timedOut()) {
 23f5234:	4620      	mov	r0, r4
 23f5236:	f7ff ff8a 	bl	23f514e <_ZN7Timeout8timedOutEv.isra.0>
 23f523a:	2800      	cmp	r0, #0
 23f523c:	d0f5      	beq.n	23f522a <_ZN9SdSpiCard9waitReadyEt+0xe>
      return false;
 23f523e:	2000      	movs	r0, #0
    }
  }
  return true;
}
 23f5240:	bd38      	pop	{r3, r4, r5, pc}
  return true;
 23f5242:	2001      	movs	r0, #1
 23f5244:	e7fc      	b.n	23f5240 <_ZN9SdSpiCard9waitReadyEt+0x24>

023f5246 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 23f5246:	b538      	push	{r3, r4, r5, lr}
 23f5248:	4604      	mov	r4, r0
 23f524a:	4615      	mov	r5, r2
    m_spiDriver.send(data);
 23f524c:	f000 fa86 	bl	23f575c <_ZN18SdSpiArduinoDriver4sendEh>
    m_spiDriver.send(buf, n);
 23f5250:	f44f 7200 	mov.w	r2, #512	; 0x200
 23f5254:	4629      	mov	r1, r5
 23f5256:	4620      	mov	r0, r4
 23f5258:	f000 fa84 	bl	23f5764 <_ZN18SdSpiArduinoDriver4sendEPKhj>
    m_spiDriver.send(data);
 23f525c:	21ff      	movs	r1, #255	; 0xff
 23f525e:	4620      	mov	r0, r4
 23f5260:	f000 fa7c 	bl	23f575c <_ZN18SdSpiArduinoDriver4sendEh>
 23f5264:	21ff      	movs	r1, #255	; 0xff
 23f5266:	4620      	mov	r0, r4
 23f5268:	f000 fa78 	bl	23f575c <_ZN18SdSpiArduinoDriver4sendEh>
    return m_spiDriver.receive();
 23f526c:	4620      	mov	r0, r4
 23f526e:	f000 fa5a 	bl	23f5726 <_ZN18SdSpiArduinoDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
 23f5272:	77a0      	strb	r0, [r4, #30]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 23f5274:	f000 001f 	and.w	r0, r0, #31
 23f5278:	2805      	cmp	r0, #5
 23f527a:	d006      	beq.n	23f528a <_ZN9SdSpiCard9writeDataEhPKh+0x44>
    m_errorCode = code;
 23f527c:	2321      	movs	r3, #33	; 0x21
    goto fail;
  }
  return true;

fail:
  spiStop();
 23f527e:	4620      	mov	r0, r4
 23f5280:	76e3      	strb	r3, [r4, #27]
 23f5282:	f7ff ff85 	bl	23f5190 <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f5286:	2000      	movs	r0, #0
}
 23f5288:	bd38      	pop	{r3, r4, r5, pc}
  return true;
 23f528a:	2001      	movs	r0, #1
 23f528c:	e7fc      	b.n	23f5288 <_ZN9SdSpiCard9writeDataEhPKh+0x42>

023f528e <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
 23f528e:	b513      	push	{r0, r1, r4, lr}
 23f5290:	9101      	str	r1, [sp, #4]
  if (!waitReady(SD_WRITE_TIMEOUT)) {
 23f5292:	f44f 7116 	mov.w	r1, #600	; 0x258
bool SdSpiCard::writeData(const uint8_t* src) {
 23f5296:	4604      	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
 23f5298:	f7ff ffc0 	bl	23f521c <_ZN9SdSpiCard9waitReadyEt>
 23f529c:	9a01      	ldr	r2, [sp, #4]
 23f529e:	b930      	cbnz	r0, 23f52ae <_ZN9SdSpiCard9writeDataEPKh+0x20>
 23f52a0:	2325      	movs	r3, #37	; 0x25
 23f52a2:	76e3      	strb	r3, [r4, #27]
  spiStop();
 23f52a4:	4620      	mov	r0, r4
 23f52a6:	f7ff ff73 	bl	23f5190 <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f52aa:	2000      	movs	r0, #0
 23f52ac:	e005      	b.n	23f52ba <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 23f52ae:	21fc      	movs	r1, #252	; 0xfc
 23f52b0:	4620      	mov	r0, r4
 23f52b2:	f7ff ffc8 	bl	23f5246 <_ZN9SdSpiCard9writeDataEhPKh>
 23f52b6:	2800      	cmp	r0, #0
 23f52b8:	d0f4      	beq.n	23f52a4 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
 23f52ba:	b002      	add	sp, #8
 23f52bc:	bd10      	pop	{r4, pc}

023f52be <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 23f52be:	b538      	push	{r3, r4, r5, lr}
  if (!waitReady(SD_WRITE_TIMEOUT)) {
 23f52c0:	f44f 7116 	mov.w	r1, #600	; 0x258
bool SdSpiCard::writeStop() {
 23f52c4:	4604      	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
 23f52c6:	f7ff ffa9 	bl	23f521c <_ZN9SdSpiCard9waitReadyEt>
 23f52ca:	4605      	mov	r5, r0
 23f52cc:	b930      	cbnz	r0, 23f52dc <_ZN9SdSpiCard9writeStopEv+0x1e>
 23f52ce:	231f      	movs	r3, #31
  m_state = IDLE_STATE;
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
 23f52d0:	4620      	mov	r0, r4
 23f52d2:	76e3      	strb	r3, [r4, #27]
 23f52d4:	f7ff ff5c 	bl	23f5190 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
 23f52d8:	4628      	mov	r0, r5
 23f52da:	bd38      	pop	{r3, r4, r5, pc}
    m_spiDriver.send(data);
 23f52dc:	21fd      	movs	r1, #253	; 0xfd
 23f52de:	4620      	mov	r0, r4
 23f52e0:	f000 fa3c 	bl	23f575c <_ZN18SdSpiArduinoDriver4sendEh>
  spiStop();
 23f52e4:	4620      	mov	r0, r4
 23f52e6:	f7ff ff53 	bl	23f5190 <_ZN9SdSpiCard7spiStopEv>
  m_state = IDLE_STATE;
 23f52ea:	2300      	movs	r3, #0
 23f52ec:	7763      	strb	r3, [r4, #29]
  return true;
 23f52ee:	e7f3      	b.n	23f52d8 <_ZN9SdSpiCard9writeStopEv+0x1a>

023f52f0 <_ZN9SdSpiCard10syncDeviceEv>:
  if (m_state == WRITE_STATE) {
 23f52f0:	7f43      	ldrb	r3, [r0, #29]
 23f52f2:	2b02      	cmp	r3, #2
 23f52f4:	d101      	bne.n	23f52fa <_ZN9SdSpiCard10syncDeviceEv+0xa>
    return writeStop();
 23f52f6:	f7ff bfe2 	b.w	23f52be <_ZN9SdSpiCard9writeStopEv>
  if (m_state == READ_STATE) {
 23f52fa:	2b01      	cmp	r3, #1
 23f52fc:	d101      	bne.n	23f5302 <_ZN9SdSpiCard10syncDeviceEv+0x12>
    return readStop();
 23f52fe:	f000 b916 	b.w	23f552e <_ZN9SdSpiCard8readStopEv>
}
 23f5302:	2001      	movs	r0, #1
 23f5304:	4770      	bx	lr

023f5306 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 23f5306:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23f5308:	4604      	mov	r4, r0
 23f530a:	460d      	mov	r5, r1
 23f530c:	9201      	str	r2, [sp, #4]
  if (!syncDevice()) {
 23f530e:	f7ff ffef 	bl	23f52f0 <_ZN9SdSpiCard10syncDeviceEv>
 23f5312:	b390      	cbz	r0, 23f537a <_ZN9SdSpiCard11cardCommandEhm+0x74>
  if (!m_spiActive) {
 23f5314:	7f23      	ldrb	r3, [r4, #28]
 23f5316:	b913      	cbnz	r3, 23f531e <_ZN9SdSpiCard11cardCommandEhm+0x18>
    spiStart();
 23f5318:	4620      	mov	r0, r4
 23f531a:	f7ff ff26 	bl	23f516a <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0 && cmd != CMD12 && !waitReady(SD_CMD_TIMEOUT)) {
 23f531e:	bb1d      	cbnz	r5, 23f5368 <_ZN9SdSpiCard11cardCommandEhm+0x62>
 23f5320:	4620      	mov	r0, r4
 23f5322:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 23f5326:	f000 fa19 	bl	23f575c <_ZN18SdSpiArduinoDriver4sendEh>
 23f532a:	2603      	movs	r6, #3
    spiSend(pa[i]);
 23f532c:	af01      	add	r7, sp, #4
 23f532e:	5db9      	ldrb	r1, [r7, r6]
 23f5330:	4620      	mov	r0, r4
 23f5332:	f000 fa13 	bl	23f575c <_ZN18SdSpiArduinoDriver4sendEh>
  for (int8_t i = 3; i >= 0; i--) {
 23f5336:	3e01      	subs	r6, #1
 23f5338:	d2f9      	bcs.n	23f532e <_ZN9SdSpiCard11cardCommandEhm+0x28>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 23f533a:	2d00      	cmp	r5, #0
 23f533c:	bf0c      	ite	eq
 23f533e:	2195      	moveq	r1, #149	; 0x95
 23f5340:	2187      	movne	r1, #135	; 0x87
 23f5342:	4620      	mov	r0, r4
 23f5344:	f000 fa0a 	bl	23f575c <_ZN18SdSpiArduinoDriver4sendEh>
    return m_spiDriver.receive();
 23f5348:	4620      	mov	r0, r4
 23f534a:	f000 f9ec 	bl	23f5726 <_ZN18SdSpiArduinoDriver7receiveEv>
 23f534e:	250a      	movs	r5, #10
 23f5350:	4620      	mov	r0, r4
 23f5352:	f000 f9e8 	bl	23f5726 <_ZN18SdSpiArduinoDriver7receiveEv>
  } while (m_status & 0X80 && ++n < 10);
 23f5356:	0603      	lsls	r3, r0, #24
    m_status = spiReceive();
 23f5358:	77a0      	strb	r0, [r4, #30]
  } while (m_status & 0X80 && ++n < 10);
 23f535a:	d503      	bpl.n	23f5364 <_ZN9SdSpiCard11cardCommandEhm+0x5e>
 23f535c:	3d01      	subs	r5, #1
 23f535e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 23f5362:	d1f5      	bne.n	23f5350 <_ZN9SdSpiCard11cardCommandEhm+0x4a>
}
 23f5364:	b003      	add	sp, #12
 23f5366:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (cmd != CMD0 && cmd != CMD12 && !waitReady(SD_CMD_TIMEOUT)) {
 23f5368:	2d0c      	cmp	r5, #12
 23f536a:	d0d9      	beq.n	23f5320 <_ZN9SdSpiCard11cardCommandEhm+0x1a>
 23f536c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 23f5370:	4620      	mov	r0, r4
 23f5372:	f7ff ff53 	bl	23f521c <_ZN9SdSpiCard9waitReadyEt>
 23f5376:	2800      	cmp	r0, #0
 23f5378:	d1d2      	bne.n	23f5320 <_ZN9SdSpiCard11cardCommandEhm+0x1a>
    return 0XFF;
 23f537a:	20ff      	movs	r0, #255	; 0xff
 23f537c:	e7f2      	b.n	23f5364 <_ZN9SdSpiCard11cardCommandEhm+0x5e>

023f537e <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
 23f537e:	b570      	push	{r4, r5, r6, lr}
 23f5380:	4604      	mov	r4, r0
 23f5382:	460d      	mov	r5, r1
 23f5384:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
 23f5386:	2137      	movs	r1, #55	; 0x37
 23f5388:	2200      	movs	r2, #0
 23f538a:	f7ff ffbc 	bl	23f5306 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 23f538e:	4632      	mov	r2, r6
 23f5390:	4629      	mov	r1, r5
 23f5392:	4620      	mov	r0, r4
  }
 23f5394:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
 23f5398:	f7ff bfb5 	b.w	23f5306 <_ZN9SdSpiCard11cardCommandEhm>

023f539c <_ZN9SdSpiCard5beginE11SdSpiConfig>:
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
 23f539c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f53a0:	b088      	sub	sp, #32
 23f53a2:	ad01      	add	r5, sp, #4
 23f53a4:	4604      	mov	r4, r0
 23f53a6:	e885 000e 	stmia.w	r5, {r1, r2, r3}
    m_beginCalled = false;
 23f53aa:	2300      	movs	r3, #0
 23f53ac:	f89d 0004 	ldrb.w	r0, [sp, #4]
 23f53b0:	7663      	strb	r3, [r4, #25]
  m_errorCode = SD_CARD_ERROR_NONE;
 23f53b2:	76e3      	strb	r3, [r4, #27]
    m_spiActive = false;
 23f53b4:	61e3      	str	r3, [r4, #28]
  m_csPin = spiConfig.csPin;
 23f53b6:	76a0      	strb	r0, [r4, #26]
 23f53b8:	4617      	mov	r7, r2
 23f53ba:	f89d 6005 	ldrb.w	r6, [sp, #5]
  sdCsInit(m_csPin);
 23f53be:	f002 f811 	bl	23f73e4 <_Z8sdCsInith>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
 23f53c2:	2101      	movs	r1, #1
 23f53c4:	7ea0      	ldrb	r0, [r4, #26]
 23f53c6:	f002 f810 	bl	23f73ea <_Z9sdCsWritehb>
  void spiSetSckSpeed(uint32_t maxSck) { m_spiDriver.setSckSpeed(maxSck); }
 23f53ca:	4620      	mov	r0, r4
 23f53cc:	494c      	ldr	r1, [pc, #304]	; (23f5500 <_ZN9SdSpiCard5beginE11SdSpiConfig+0x164>)
 23f53ce:	f7ff fec6 	bl	23f515e <_ZN18SdSpiArduinoDriver11setSckSpeedEm>
  spiBegin(spiConfig);
 23f53d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  m_beginCalled = true;
 23f53d6:	2501      	movs	r5, #1
 23f53d8:	ab05      	add	r3, sp, #20
 23f53da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
 23f53de:	4620      	mov	r0, r4
 23f53e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 23f53e2:	f000 f977 	bl	23f56d4 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig>
  spiStart();
 23f53e6:	4620      	mov	r0, r4
  m_beginCalled = true;
 23f53e8:	7665      	strb	r5, [r4, #25]
  spiStart();
 23f53ea:	f7ff febe 	bl	23f516a <_ZN9SdSpiCard8spiStartEv>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
 23f53ee:	4629      	mov	r1, r5
 23f53f0:	7ea0      	ldrb	r0, [r4, #26]
 23f53f2:	f001 fffa 	bl	23f73ea <_Z9sdCsWritehb>
 23f53f6:	250a      	movs	r5, #10
    return m_spiDriver.receive();
 23f53f8:	4620      	mov	r0, r4
  for (uint8_t i = 0; i < 10; i++) {
 23f53fa:	3d01      	subs	r5, #1
 23f53fc:	f000 f993 	bl	23f5726 <_ZN18SdSpiArduinoDriver7receiveEv>
 23f5400:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 23f5404:	d1f8      	bne.n	23f53f8 <_ZN9SdSpiCard5beginE11SdSpiConfig+0x5c>
  void spiSelect() { sdCsWrite(m_csPin, false); }
 23f5406:	4629      	mov	r1, r5
 23f5408:	7ea0      	ldrb	r0, [r4, #26]
 23f540a:	f001 ffee 	bl	23f73ea <_Z9sdCsWritehb>
 23f540e:	f002 f8d7 	bl	23f75c0 <HAL_Timer_Get_Milli_Seconds>
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
 23f5412:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 23f5416:	b285      	uxth	r5, r0
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
 23f5418:	2200      	movs	r2, #0
 23f541a:	4620      	mov	r0, r4
 23f541c:	4611      	mov	r1, r2
 23f541e:	f7ff ff72 	bl	23f5306 <_ZN9SdSpiCard11cardCommandEhm>
 23f5422:	2801      	cmp	r0, #1
 23f5424:	4680      	mov	r8, r0
 23f5426:	d00d      	beq.n	23f5444 <_ZN9SdSpiCard5beginE11SdSpiConfig+0xa8>
    if (timeout.timedOut()) {
 23f5428:	4628      	mov	r0, r5
 23f542a:	f7ff fe90 	bl	23f514e <_ZN7Timeout8timedOutEv.isra.0>
 23f542e:	2800      	cmp	r0, #0
 23f5430:	d0f2      	beq.n	23f5418 <_ZN9SdSpiCard5beginE11SdSpiConfig+0x7c>
    m_errorCode = code;
 23f5432:	2301      	movs	r3, #1
  spiStop();
 23f5434:	4620      	mov	r0, r4
 23f5436:	76e3      	strb	r3, [r4, #27]
 23f5438:	f7ff feaa 	bl	23f5190 <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f543c:	2000      	movs	r0, #0
}
 23f543e:	b008      	add	sp, #32
 23f5440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND) {
 23f5444:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 23f5448:	2108      	movs	r1, #8
 23f544a:	4620      	mov	r0, r4
 23f544c:	f7ff ff5b 	bl	23f5306 <_ZN9SdSpiCard11cardCommandEhm>
 23f5450:	0743      	lsls	r3, r0, #29
 23f5452:	d413      	bmi.n	23f547c <_ZN9SdSpiCard5beginE11SdSpiConfig+0xe0>
 23f5454:	f04f 0904 	mov.w	r9, #4
    return m_spiDriver.receive();
 23f5458:	4620      	mov	r0, r4
 23f545a:	f000 f964 	bl	23f5726 <_ZN18SdSpiArduinoDriver7receiveEv>
    for (uint8_t i = 0; i < 4; i++) {
 23f545e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 23f5462:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
      m_status = spiReceive();
 23f5466:	77a0      	strb	r0, [r4, #30]
    for (uint8_t i = 0; i < 4; i++) {
 23f5468:	d1f6      	bne.n	23f5458 <_ZN9SdSpiCard5beginE11SdSpiConfig+0xbc>
    if (m_status == 0XAA) {
 23f546a:	28aa      	cmp	r0, #170	; 0xaa
 23f546c:	d018      	beq.n	23f54a0 <_ZN9SdSpiCard5beginE11SdSpiConfig+0x104>
    if (timeout.timedOut()) {
 23f546e:	4628      	mov	r0, r5
 23f5470:	f7ff fe6d 	bl	23f514e <_ZN7Timeout8timedOutEv.isra.0>
 23f5474:	2800      	cmp	r0, #0
 23f5476:	d0e5      	beq.n	23f5444 <_ZN9SdSpiCard5beginE11SdSpiConfig+0xa8>
    m_errorCode = code;
 23f5478:	2306      	movs	r3, #6
 23f547a:	e7db      	b.n	23f5434 <_ZN9SdSpiCard5beginE11SdSpiConfig+0x98>
      cardType = SD_CARD_TYPE_SD1;
 23f547c:	f04f 0901 	mov.w	r9, #1
  arg = cardType == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 23f5480:	f04f 0a00 	mov.w	sl, #0
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 23f5484:	4652      	mov	r2, sl
 23f5486:	2129      	movs	r1, #41	; 0x29
 23f5488:	4620      	mov	r0, r4
 23f548a:	f7ff ff78 	bl	23f537e <_ZN9SdSpiCard8cardAcmdEhm>
 23f548e:	4602      	mov	r2, r0
 23f5490:	b158      	cbz	r0, 23f54aa <_ZN9SdSpiCard5beginE11SdSpiConfig+0x10e>
    if (timeout.timedOut()) {
 23f5492:	4628      	mov	r0, r5
 23f5494:	f7ff fe5b 	bl	23f514e <_ZN7Timeout8timedOutEv.isra.0>
 23f5498:	2800      	cmp	r0, #0
 23f549a:	d0f3      	beq.n	23f5484 <_ZN9SdSpiCard5beginE11SdSpiConfig+0xe8>
 23f549c:	2317      	movs	r3, #23
 23f549e:	e7c9      	b.n	23f5434 <_ZN9SdSpiCard5beginE11SdSpiConfig+0x98>
      cardType = SD_CARD_TYPE_SD2;
 23f54a0:	f04f 0902 	mov.w	r9, #2
  arg = cardType == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 23f54a4:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 23f54a8:	e7ec      	b.n	23f5484 <_ZN9SdSpiCard5beginE11SdSpiConfig+0xe8>
  if (cardType == SD_CARD_TYPE_SD2) {
 23f54aa:	f1b9 0f02 	cmp.w	r9, #2
 23f54ae:	d119      	bne.n	23f54e4 <_ZN9SdSpiCard5beginE11SdSpiConfig+0x148>
    if (cardCommand(CMD58, 0)) {
 23f54b0:	213a      	movs	r1, #58	; 0x3a
 23f54b2:	4620      	mov	r0, r4
 23f54b4:	f7ff ff27 	bl	23f5306 <_ZN9SdSpiCard11cardCommandEhm>
 23f54b8:	b108      	cbz	r0, 23f54be <_ZN9SdSpiCard5beginE11SdSpiConfig+0x122>
 23f54ba:	2312      	movs	r3, #18
 23f54bc:	e7ba      	b.n	23f5434 <_ZN9SdSpiCard5beginE11SdSpiConfig+0x98>
    return m_spiDriver.receive();
 23f54be:	4620      	mov	r0, r4
 23f54c0:	f000 f931 	bl	23f5726 <_ZN18SdSpiArduinoDriver7receiveEv>
    if ((spiReceive() & 0XC0) == 0XC0) {
 23f54c4:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
      cardType = SD_CARD_TYPE_SDHC;
 23f54c8:	28c0      	cmp	r0, #192	; 0xc0
 23f54ca:	bf08      	it	eq
 23f54cc:	f04f 0903 	moveq.w	r9, #3
 23f54d0:	4620      	mov	r0, r4
 23f54d2:	f000 f928 	bl	23f5726 <_ZN18SdSpiArduinoDriver7receiveEv>
 23f54d6:	4620      	mov	r0, r4
 23f54d8:	f000 f925 	bl	23f5726 <_ZN18SdSpiArduinoDriver7receiveEv>
 23f54dc:	4620      	mov	r0, r4
 23f54de:	f000 f922 	bl	23f5726 <_ZN18SdSpiArduinoDriver7receiveEv>
    for (uint8_t i = 0; i < 3; i++) {
 23f54e2:	46c8      	mov	r8, r9
  spiStop();
 23f54e4:	4620      	mov	r0, r4
 23f54e6:	f7ff fe53 	bl	23f5190 <_ZN9SdSpiCard7spiStopEv>
const uint8_t DEDICATED_SPI = 1;
/**
 * \param[in] opt option field of SdSpiConfig.
 * \return true for dedicated SPI.
 */
inline bool spiOptionDedicated(uint8_t opt) { return opt & DEDICATED_SPI; }
 23f54ea:	f006 0601 	and.w	r6, r6, #1
  void spiSetSckSpeed(uint32_t maxSck) { m_spiDriver.setSckSpeed(maxSck); }
 23f54ee:	4620      	mov	r0, r4
 23f54f0:	4639      	mov	r1, r7
 23f54f2:	f7ff fe34 	bl	23f515e <_ZN18SdSpiArduinoDriver11setSckSpeedEm>
  return true;
 23f54f6:	2001      	movs	r0, #1
  m_type = cardType;
 23f54f8:	f884 801f 	strb.w	r8, [r4, #31]
 23f54fc:	7626      	strb	r6, [r4, #24]
  return true;
 23f54fe:	e79e      	b.n	23f543e <_ZN9SdSpiCard5beginE11SdSpiConfig+0xa2>
 23f5500:	00061a80 	.word	0x00061a80

023f5504 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t sector) {
 23f5504:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 23f5506:	7fc3      	ldrb	r3, [r0, #31]
bool SdSpiCard::readStart(uint32_t sector) {
 23f5508:	460a      	mov	r2, r1
  if (type() != SD_CARD_TYPE_SDHC) {
 23f550a:	2b03      	cmp	r3, #3
    sector <<= 9;
 23f550c:	bf18      	it	ne
 23f550e:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, sector)) {
 23f5510:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t sector) {
 23f5512:	4604      	mov	r4, r0
  if (cardCommand(CMD18, sector)) {
 23f5514:	f7ff fef7 	bl	23f5306 <_ZN9SdSpiCard11cardCommandEhm>
 23f5518:	b130      	cbz	r0, 23f5528 <_ZN9SdSpiCard9readStartEm+0x24>
    m_errorCode = code;
 23f551a:	230c      	movs	r3, #12
  spiStop();
 23f551c:	4620      	mov	r0, r4
 23f551e:	76e3      	strb	r3, [r4, #27]
 23f5520:	f7ff fe36 	bl	23f5190 <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f5524:	2000      	movs	r0, #0
}
 23f5526:	bd10      	pop	{r4, pc}
  m_state = READ_STATE;
 23f5528:	2001      	movs	r0, #1
 23f552a:	7760      	strb	r0, [r4, #29]
  return true;
 23f552c:	e7fb      	b.n	23f5526 <_ZN9SdSpiCard9readStartEm+0x22>

023f552e <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
 23f552e:	b538      	push	{r3, r4, r5, lr}
  m_state = IDLE_STATE;
 23f5530:	2400      	movs	r4, #0
  if (cardCommand(CMD12, 0)) {
 23f5532:	210c      	movs	r1, #12
 23f5534:	4622      	mov	r2, r4
  m_state = IDLE_STATE;
 23f5536:	7744      	strb	r4, [r0, #29]
bool SdSpiCard::readStop() {
 23f5538:	4605      	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
 23f553a:	f7ff fee4 	bl	23f5306 <_ZN9SdSpiCard11cardCommandEhm>
 23f553e:	b130      	cbz	r0, 23f554e <_ZN9SdSpiCard8readStopEv+0x20>
 23f5540:	2309      	movs	r3, #9
  spiStop();
 23f5542:	4628      	mov	r0, r5
 23f5544:	76eb      	strb	r3, [r5, #27]
 23f5546:	f7ff fe23 	bl	23f5190 <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f554a:	4620      	mov	r0, r4
}
 23f554c:	bd38      	pop	{r3, r4, r5, pc}
  spiStop();
 23f554e:	4628      	mov	r0, r5
 23f5550:	f7ff fe1e 	bl	23f5190 <_ZN9SdSpiCard7spiStopEv>
  return true;
 23f5554:	2001      	movs	r0, #1
 23f5556:	e7f9      	b.n	23f554c <_ZN9SdSpiCard8readStopEv+0x1e>

023f5558 <_ZN9SdSpiCard11readSectorsEmPhj>:
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
 23f5558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f555a:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
 23f555c:	7f43      	ldrb	r3, [r0, #29]
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
 23f555e:	4604      	mov	r4, r0
  if (sdState() != READ_STATE || sector != m_curSector) {
 23f5560:	2b01      	cmp	r3, #1
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
 23f5562:	460d      	mov	r5, r1
 23f5564:	4616      	mov	r6, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
 23f5566:	d102      	bne.n	23f556e <_ZN9SdSpiCard11readSectorsEmPhj+0x16>
 23f5568:	6943      	ldr	r3, [r0, #20]
 23f556a:	428b      	cmp	r3, r1
 23f556c:	d007      	beq.n	23f557e <_ZN9SdSpiCard11readSectorsEmPhj+0x26>
    if (!readStart(sector)) {
 23f556e:	4629      	mov	r1, r5
 23f5570:	4620      	mov	r0, r4
 23f5572:	f7ff ffc7 	bl	23f5504 <_ZN9SdSpiCard9readStartEm>
 23f5576:	b908      	cbnz	r0, 23f557c <_ZN9SdSpiCard11readSectorsEmPhj+0x24>
  return false;
 23f5578:	2000      	movs	r0, #0
}
 23f557a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_curSector = sector;
 23f557c:	6165      	str	r5, [r4, #20]
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
 23f557e:	2500      	movs	r5, #0
  for (size_t i = 0; i < ns; i++, dst += 512) {
 23f5580:	42bd      	cmp	r5, r7
 23f5582:	eb06 2145 	add.w	r1, r6, r5, lsl #9
 23f5586:	d006      	beq.n	23f5596 <_ZN9SdSpiCard11readSectorsEmPhj+0x3e>
    if (!readData(dst)) {
 23f5588:	4620      	mov	r0, r4
 23f558a:	f7ff fe43 	bl	23f5214 <_ZN9SdSpiCard8readDataEPh>
 23f558e:	2800      	cmp	r0, #0
 23f5590:	d0f2      	beq.n	23f5578 <_ZN9SdSpiCard11readSectorsEmPhj+0x20>
  for (size_t i = 0; i < ns; i++, dst += 512) {
 23f5592:	3501      	adds	r5, #1
 23f5594:	e7f4      	b.n	23f5580 <_ZN9SdSpiCard11readSectorsEmPhj+0x28>
  m_curSector += ns;
 23f5596:	6963      	ldr	r3, [r4, #20]
 23f5598:	442b      	add	r3, r5
 23f559a:	6163      	str	r3, [r4, #20]
  return m_dedicatedSpi ? true : readStop();
 23f559c:	7e23      	ldrb	r3, [r4, #24]
 23f559e:	b92b      	cbnz	r3, 23f55ac <_ZN9SdSpiCard11readSectorsEmPhj+0x54>
 23f55a0:	4620      	mov	r0, r4
 23f55a2:	f7ff ffc4 	bl	23f552e <_ZN9SdSpiCard8readStopEv>
 23f55a6:	f000 0001 	and.w	r0, r0, #1
 23f55aa:	e7e6      	b.n	23f557a <_ZN9SdSpiCard11readSectorsEmPhj+0x22>
 23f55ac:	2001      	movs	r0, #1
 23f55ae:	e7fa      	b.n	23f55a6 <_ZN9SdSpiCard11readSectorsEmPhj+0x4e>

023f55b0 <_ZN9SdSpiCard10readSectorEmPh>:
  return readSectors(sector, dst, 1);
 23f55b0:	2301      	movs	r3, #1
 23f55b2:	f7ff bfd1 	b.w	23f5558 <_ZN9SdSpiCard11readSectorsEmPhj>

023f55b6 <_ZN9SdSpiCard10writeStartEm>:
bool SdSpiCard::writeStart(uint32_t sector) {
 23f55b6:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 23f55b8:	7fc3      	ldrb	r3, [r0, #31]
bool SdSpiCard::writeStart(uint32_t sector) {
 23f55ba:	460a      	mov	r2, r1
  if (type() != SD_CARD_TYPE_SDHC) {
 23f55bc:	2b03      	cmp	r3, #3
    sector <<= 9;
 23f55be:	bf18      	it	ne
 23f55c0:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD25, sector)) {
 23f55c2:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t sector) {
 23f55c4:	4604      	mov	r4, r0
  if (cardCommand(CMD25, sector)) {
 23f55c6:	f7ff fe9e 	bl	23f5306 <_ZN9SdSpiCard11cardCommandEhm>
 23f55ca:	b130      	cbz	r0, 23f55da <_ZN9SdSpiCard10writeStartEm+0x24>
 23f55cc:	230e      	movs	r3, #14
  spiStop();
 23f55ce:	4620      	mov	r0, r4
 23f55d0:	76e3      	strb	r3, [r4, #27]
 23f55d2:	f7ff fddd 	bl	23f5190 <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f55d6:	2000      	movs	r0, #0
}
 23f55d8:	bd10      	pop	{r4, pc}
  m_state = WRITE_STATE;
 23f55da:	2302      	movs	r3, #2
  return true;
 23f55dc:	2001      	movs	r0, #1
  m_state = WRITE_STATE;
 23f55de:	7763      	strb	r3, [r4, #29]
  return true;
 23f55e0:	e7fa      	b.n	23f55d8 <_ZN9SdSpiCard10writeStartEm+0x22>

023f55e2 <_ZN9SdSpiCard12writeSectorsEmPKhj>:
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
 23f55e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f55e4:	461f      	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
 23f55e6:	7f43      	ldrb	r3, [r0, #29]
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
 23f55e8:	4604      	mov	r4, r0
  if (sdState() != WRITE_STATE || m_curSector != sector) {
 23f55ea:	2b02      	cmp	r3, #2
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
 23f55ec:	460d      	mov	r5, r1
 23f55ee:	4616      	mov	r6, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
 23f55f0:	d102      	bne.n	23f55f8 <_ZN9SdSpiCard12writeSectorsEmPKhj+0x16>
 23f55f2:	6943      	ldr	r3, [r0, #20]
 23f55f4:	428b      	cmp	r3, r1
 23f55f6:	d005      	beq.n	23f5604 <_ZN9SdSpiCard12writeSectorsEmPKhj+0x22>
    if (!writeStart(sector)) {
 23f55f8:	4629      	mov	r1, r5
 23f55fa:	4620      	mov	r0, r4
 23f55fc:	f7ff ffdb 	bl	23f55b6 <_ZN9SdSpiCard10writeStartEm>
 23f5600:	b1c0      	cbz	r0, 23f5634 <_ZN9SdSpiCard12writeSectorsEmPKhj+0x52>
    m_curSector = sector;
 23f5602:	6165      	str	r5, [r4, #20]
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
 23f5604:	2500      	movs	r5, #0
  for (size_t i = 0; i < ns; i++, src += 512) {
 23f5606:	42bd      	cmp	r5, r7
 23f5608:	eb06 2145 	add.w	r1, r6, r5, lsl #9
 23f560c:	d005      	beq.n	23f561a <_ZN9SdSpiCard12writeSectorsEmPKhj+0x38>
    if (!writeData(src)) {
 23f560e:	4620      	mov	r0, r4
 23f5610:	f7ff fe3d 	bl	23f528e <_ZN9SdSpiCard9writeDataEPKh>
 23f5614:	b170      	cbz	r0, 23f5634 <_ZN9SdSpiCard12writeSectorsEmPKhj+0x52>
  for (size_t i = 0; i < ns; i++, src += 512) {
 23f5616:	3501      	adds	r5, #1
 23f5618:	e7f5      	b.n	23f5606 <_ZN9SdSpiCard12writeSectorsEmPKhj+0x24>
  m_curSector += ns;
 23f561a:	6963      	ldr	r3, [r4, #20]
 23f561c:	442b      	add	r3, r5
 23f561e:	6163      	str	r3, [r4, #20]
  return m_dedicatedSpi ? true : writeStop();
 23f5620:	7e23      	ldrb	r3, [r4, #24]
 23f5622:	b92b      	cbnz	r3, 23f5630 <_ZN9SdSpiCard12writeSectorsEmPKhj+0x4e>
 23f5624:	4620      	mov	r0, r4
 23f5626:	f7ff fe4a 	bl	23f52be <_ZN9SdSpiCard9writeStopEv>
 23f562a:	f000 0001 	and.w	r0, r0, #1
}
 23f562e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return m_dedicatedSpi ? true : writeStop();
 23f5630:	2001      	movs	r0, #1
 23f5632:	e7fa      	b.n	23f562a <_ZN9SdSpiCard12writeSectorsEmPKhj+0x48>
  spiStop();
 23f5634:	4620      	mov	r0, r4
 23f5636:	f7ff fdab 	bl	23f5190 <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f563a:	2000      	movs	r0, #0
 23f563c:	e7f7      	b.n	23f562e <_ZN9SdSpiCard12writeSectorsEmPKhj+0x4c>

023f563e <_ZN9SdSpiCard11writeSectorEmPKh>:
bool SdSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
 23f563e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_dedicatedSpi) {
 23f5642:	7e07      	ldrb	r7, [r0, #24]
bool SdSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
 23f5644:	4604      	mov	r4, r0
 23f5646:	460b      	mov	r3, r1
 23f5648:	4615      	mov	r5, r2
  if (m_dedicatedSpi) {
 23f564a:	b127      	cbz	r7, 23f5656 <_ZN9SdSpiCard11writeSectorEmPKh+0x18>
}
 23f564c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return writeSectors(sector, src, 1);
 23f5650:	2301      	movs	r3, #1
 23f5652:	f7ff bfc6 	b.w	23f55e2 <_ZN9SdSpiCard12writeSectorsEmPKhj>
  if (type() != SD_CARD_TYPE_SDHC) {
 23f5656:	7fc2      	ldrb	r2, [r0, #31]
 23f5658:	2a03      	cmp	r2, #3
    sector <<= 9;
 23f565a:	bf18      	it	ne
 23f565c:	024b      	lslne	r3, r1, #9
  if (cardCommand(CMD24, sector)) {
 23f565e:	461a      	mov	r2, r3
 23f5660:	2118      	movs	r1, #24
 23f5662:	f7ff fe50 	bl	23f5306 <_ZN9SdSpiCard11cardCommandEhm>
 23f5666:	4606      	mov	r6, r0
 23f5668:	b128      	cbz	r0, 23f5676 <_ZN9SdSpiCard11writeSectorEmPKh+0x38>
 23f566a:	230d      	movs	r3, #13
 23f566c:	76e3      	strb	r3, [r4, #27]
  spiStop();
 23f566e:	4620      	mov	r0, r4
 23f5670:	f7ff fd8e 	bl	23f5190 <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f5674:	e020      	b.n	23f56b8 <_ZN9SdSpiCard11writeSectorEmPKh+0x7a>
  if (!writeData(DATA_START_SECTOR, src)) {
 23f5676:	462a      	mov	r2, r5
 23f5678:	21fe      	movs	r1, #254	; 0xfe
 23f567a:	4620      	mov	r0, r4
 23f567c:	f7ff fde3 	bl	23f5246 <_ZN9SdSpiCard9writeDataEhPKh>
 23f5680:	2800      	cmp	r0, #0
 23f5682:	d0f4      	beq.n	23f566e <_ZN9SdSpiCard11writeSectorEmPKh+0x30>
  if (!waitReady(SD_WRITE_TIMEOUT)) {
 23f5684:	f44f 7116 	mov.w	r1, #600	; 0x258
 23f5688:	4620      	mov	r0, r4
 23f568a:	f7ff fdc7 	bl	23f521c <_ZN9SdSpiCard9waitReadyEt>
 23f568e:	4605      	mov	r5, r0
 23f5690:	b908      	cbnz	r0, 23f5696 <_ZN9SdSpiCard11writeSectorEmPKh+0x58>
 23f5692:	2324      	movs	r3, #36	; 0x24
 23f5694:	e7ea      	b.n	23f566c <_ZN9SdSpiCard11writeSectorEmPKh+0x2e>
  if (cardCommand(CMD13, 0) || spiReceive()) {
 23f5696:	4632      	mov	r2, r6
 23f5698:	210d      	movs	r1, #13
 23f569a:	4620      	mov	r0, r4
 23f569c:	f7ff fe33 	bl	23f5306 <_ZN9SdSpiCard11cardCommandEhm>
 23f56a0:	b108      	cbz	r0, 23f56a6 <_ZN9SdSpiCard11writeSectorEmPKh+0x68>
 23f56a2:	230a      	movs	r3, #10
 23f56a4:	e7e2      	b.n	23f566c <_ZN9SdSpiCard11writeSectorEmPKh+0x2e>
    return m_spiDriver.receive();
 23f56a6:	4620      	mov	r0, r4
 23f56a8:	f000 f83d 	bl	23f5726 <_ZN18SdSpiArduinoDriver7receiveEv>
 23f56ac:	2800      	cmp	r0, #0
 23f56ae:	d1f8      	bne.n	23f56a2 <_ZN9SdSpiCard11writeSectorEmPKh+0x64>
  spiStop();
 23f56b0:	4620      	mov	r0, r4
 23f56b2:	f7ff fd6d 	bl	23f5190 <_ZN9SdSpiCard7spiStopEv>
  return true;
 23f56b6:	462f      	mov	r7, r5
}
 23f56b8:	4638      	mov	r0, r7
 23f56ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

023f56c0 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) && defined(PLATFORM_ID)
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback() {
  SPI_DMA_TransferCompleted = true;
 23f56c0:	2201      	movs	r2, #1
 23f56c2:	4b01      	ldr	r3, [pc, #4]	; (23f56c8 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 23f56c4:	701a      	strb	r2, [r3, #0]
}
 23f56c6:	4770      	bx	lr
 23f56c8:	1007aea0 	.word	0x1007aea0

023f56cc <_ZN18SdSpiArduinoDriver8activateEv>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() { m_spi->beginTransaction(m_spiSettings); }
 23f56cc:	1d01      	adds	r1, r0, #4
 23f56ce:	6800      	ldr	r0, [r0, #0]
 23f56d0:	f004 b8dc 	b.w	23f988c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

023f56d4 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
 23f56d4:	b530      	push	{r4, r5, lr}
 23f56d6:	b085      	sub	sp, #20
 23f56d8:	4604      	mov	r4, r0
 23f56da:	a804      	add	r0, sp, #16
 23f56dc:	e900 000e 	stmdb	r0, {r1, r2, r3}
  if (spiConfig.spiPort) {
 23f56e0:	b133      	cbz	r3, 23f56f0 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig+0x1c>
    m_spi = spiConfig.spiPort;
  } else {
    m_spi = &SPI;
 23f56e2:	6023      	str	r3, [r4, #0]
  }
  m_spi->begin();
 23f56e4:	6820      	ldr	r0, [r4, #0]
}
 23f56e6:	b005      	add	sp, #20
 23f56e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  m_spi->begin();
 23f56ec:	f004 b87a 	b.w	23f97e4 <_ZN8SPIClass5beginEv>
        static SPIClass instance(Interface);
 23f56f0:	4d09      	ldr	r5, [pc, #36]	; (23f5718 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig+0x44>)
 23f56f2:	e8d5 1f8f 	ldab	r1, [r5]
 23f56f6:	f011 0101 	ands.w	r1, r1, #1
 23f56fa:	d10b      	bne.n	23f5714 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig+0x40>
 23f56fc:	4628      	mov	r0, r5
 23f56fe:	9100      	str	r1, [sp, #0]
 23f5700:	f002 fdc4 	bl	23f828c <__cxa_guard_acquire>
 23f5704:	9900      	ldr	r1, [sp, #0]
 23f5706:	b128      	cbz	r0, 23f5714 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig+0x40>
 23f5708:	4804      	ldr	r0, [pc, #16]	; (23f571c <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig+0x48>)
 23f570a:	f004 f861 	bl	23f97d0 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23f570e:	4628      	mov	r0, r5
 23f5710:	f002 fdca 	bl	23f82a8 <__cxa_guard_release>
    m_spi = &SPI;
 23f5714:	4b01      	ldr	r3, [pc, #4]	; (23f571c <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig+0x48>)
 23f5716:	e7e4      	b.n	23f56e2 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig+0xe>
 23f5718:	1006a288 	.word	0x1006a288
 23f571c:	1006a28c 	.word	0x1006a28c

023f5720 <_ZN18SdSpiArduinoDriver10deactivateEv>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() { m_spi->endTransaction(); }
 23f5720:	6800      	ldr	r0, [r0, #0]
 23f5722:	f004 b899 	b.w	23f9858 <_ZN8SPIClass14endTransactionEv>

023f5726 <_ZN18SdSpiArduinoDriver7receiveEv>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() { m_spi->end(); }
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() { return m_spi->transfer(0XFF); }
 23f5726:	21ff      	movs	r1, #255	; 0xff
 23f5728:	6800      	ldr	r0, [r0, #0]
 23f572a:	f004 b91d 	b.w	23f9968 <_ZN8SPIClass8transferEh>
	...

023f5730 <_ZN18SdSpiArduinoDriver7receiveEPhj>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
 23f5730:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
 23f5732:	2500      	movs	r5, #0
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
 23f5734:	4613      	mov	r3, r2
  m_spi->transfer(nullptr, buf, count, SD_SPI_DMA_TransferComplete_Callback);
 23f5736:	4a07      	ldr	r2, [pc, #28]	; (23f5754 <_ZN18SdSpiArduinoDriver7receiveEPhj+0x24>)
  SPI_DMA_TransferCompleted = false;
 23f5738:	4c07      	ldr	r4, [pc, #28]	; (23f5758 <_ZN18SdSpiArduinoDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, count, SD_SPI_DMA_TransferComplete_Callback);
 23f573a:	9200      	str	r2, [sp, #0]
 23f573c:	6800      	ldr	r0, [r0, #0]
 23f573e:	460a      	mov	r2, r1
 23f5740:	4629      	mov	r1, r5
  SPI_DMA_TransferCompleted = false;
 23f5742:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, count, SD_SPI_DMA_TransferComplete_Callback);
 23f5744:	f004 f916 	bl	23f9974 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {
 23f5748:	7823      	ldrb	r3, [r4, #0]
 23f574a:	2b00      	cmp	r3, #0
 23f574c:	d0fc      	beq.n	23f5748 <_ZN18SdSpiArduinoDriver7receiveEPhj+0x18>
  }
  return 0;
}
 23f574e:	2000      	movs	r0, #0
 23f5750:	b003      	add	sp, #12
 23f5752:	bd30      	pop	{r4, r5, pc}
 23f5754:	023f56c1 	.word	0x023f56c1
 23f5758:	1007aea0 	.word	0x1007aea0

023f575c <_ZN18SdSpiArduinoDriver4sendEh>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) { m_spi->transfer(data); }
 23f575c:	6800      	ldr	r0, [r0, #0]
 23f575e:	f004 b903 	b.w	23f9968 <_ZN8SPIClass8transferEh>
	...

023f5764 <_ZN18SdSpiArduinoDriver4sendEPKhj>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
 23f5764:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
 23f5766:	2500      	movs	r5, #0
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
 23f5768:	4613      	mov	r3, r2

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, count,
 23f576a:	4a06      	ldr	r2, [pc, #24]	; (23f5784 <_ZN18SdSpiArduinoDriver4sendEPKhj+0x20>)
  SPI_DMA_TransferCompleted = false;
 23f576c:	4c06      	ldr	r4, [pc, #24]	; (23f5788 <_ZN18SdSpiArduinoDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, count,
 23f576e:	9200      	str	r2, [sp, #0]
 23f5770:	6800      	ldr	r0, [r0, #0]
 23f5772:	462a      	mov	r2, r5
  SPI_DMA_TransferCompleted = false;
 23f5774:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, count,
 23f5776:	f004 f8fd 	bl	23f9974 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                  SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {
 23f577a:	7823      	ldrb	r3, [r4, #0]
 23f577c:	2b00      	cmp	r3, #0
 23f577e:	d0fc      	beq.n	23f577a <_ZN18SdSpiArduinoDriver4sendEPKhj+0x16>
  }
}
 23f5780:	b003      	add	sp, #12
 23f5782:	bd30      	pop	{r4, r5, pc}
 23f5784:	023f56c1 	.word	0x023f56c1
 23f5788:	1007aea0 	.word	0x1007aea0

023f578c <_ZN7TwoWire5writeEi.isra.0>:
 23f578c:	6803      	ldr	r3, [r0, #0]
 23f578e:	b2c9      	uxtb	r1, r1
 23f5790:	689b      	ldr	r3, [r3, #8]
 23f5792:	4718      	bx	r3

023f5794 <_ZN5SVCS3C1Ev>:
 */
#include "i2cArduino.h"


SVCS3::SVCS3(){
  addr=0x63;
 23f5794:	2363      	movs	r3, #99	; 0x63
 23f5796:	7103      	strb	r3, [r0, #4]
}
 23f5798:	4770      	bx	lr

023f579a <_ZN5SVCS34initEi>:
  _wire = the_wire;
  addr = address;
  return 0;
}

int SVCS3::init(int address){
 23f579a:	b538      	push	{r3, r4, r5, lr}
 23f579c:	4604      	mov	r4, r0
 23f579e:	460d      	mov	r5, r1
  _wire = &Wire;
 23f57a0:	f004 fd9a 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23f57a4:	6020      	str	r0, [r4, #0]
  _wire->begin();
 23f57a6:	f003 fb5d 	bl	23f8e64 <_ZN7TwoWire5beginEv>
  addr = address;
  return 0;
}
 23f57aa:	2000      	movs	r0, #0
  addr = address;
 23f57ac:	7125      	strb	r5, [r4, #4]
}
 23f57ae:	bd38      	pop	{r3, r4, r5, pc}

023f57b0 <_ZN5SVCS38i2cdelayEi>:


bool SVCS3::i2cdelay(int size){
 23f57b0:	b570      	push	{r4, r5, r6, lr}
 23f57b2:	4606      	mov	r6, r0
 23f57b4:	460d      	mov	r5, r1
  int i=0;
 23f57b6:	2400      	movs	r4, #0
  for (;_wire->available() < size && i<=size;i++) {
 23f57b8:	6830      	ldr	r0, [r6, #0]
 23f57ba:	6803      	ldr	r3, [r0, #0]
 23f57bc:	691b      	ldr	r3, [r3, #16]
 23f57be:	4798      	blx	r3
 23f57c0:	42a8      	cmp	r0, r5
 23f57c2:	da06      	bge.n	23f57d2 <_ZN5SVCS38i2cdelayEi+0x22>
 23f57c4:	42ac      	cmp	r4, r5
 23f57c6:	dc09      	bgt.n	23f57dc <_ZN5SVCS38i2cdelayEi+0x2c>
	  delay(2);
 23f57c8:	2002      	movs	r0, #2
 23f57ca:	f002 fd7b 	bl	23f82c4 <delay>
  for (;_wire->available() < size && i<=size;i++) {
 23f57ce:	3401      	adds	r4, #1
 23f57d0:	e7f2      	b.n	23f57b8 <_ZN5SVCS38i2cdelayEi+0x8>
  }
  if(i>=size){
 23f57d2:	42ac      	cmp	r4, r5
 23f57d4:	bfac      	ite	ge
 23f57d6:	2000      	movge	r0, #0
 23f57d8:	2001      	movlt	r0, #1
	  return false;
  }else{
	  return true;
  }
}
 23f57da:	bd70      	pop	{r4, r5, r6, pc}
	  return false;
 23f57dc:	2000      	movs	r0, #0
 23f57de:	e7fc      	b.n	23f57da <_ZN5SVCS38i2cdelayEi+0x2a>

023f57e0 <_ZN5SVCS38getStateEv>:

int SVCS3::getState(){ //-1:no data, 0:err, 1:ok
 23f57e0:	b510      	push	{r4, lr}
 23f57e2:	4604      	mov	r4, r0
  _wire->requestFrom(addr, (uint8_t)1);
 23f57e4:	7901      	ldrb	r1, [r0, #4]
 23f57e6:	2201      	movs	r2, #1
 23f57e8:	6800      	ldr	r0, [r0, #0]
 23f57ea:	f003 fb62 	bl	23f8eb2 <_ZN7TwoWire11requestFromEhj>
   if(i2cdelay(1)){
 23f57ee:	2101      	movs	r1, #1
 23f57f0:	4620      	mov	r0, r4
 23f57f2:	f7ff ffdd 	bl	23f57b0 <_ZN5SVCS38i2cdelayEi>
 23f57f6:	b128      	cbz	r0, 23f5804 <_ZN5SVCS38getStateEv+0x24>
    return _wire->read();
 23f57f8:	6820      	ldr	r0, [r4, #0]
  }else{
    return -1;
  }
}
 23f57fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return _wire->read();
 23f57fe:	6803      	ldr	r3, [r0, #0]
 23f5800:	695b      	ldr	r3, [r3, #20]
 23f5802:	4718      	bx	r3
}
 23f5804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23f5808:	bd10      	pop	{r4, pc}

023f580a <_ZN5SVCS36getValEh>:

int16_t SVCS3::getVal(byte reg){
 23f580a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f580c:	4604      	mov	r4, r0
 23f580e:	460d      	mov	r5, r1

  _wire->beginTransmission(addr); // transmit to device
 23f5810:	7901      	ldrb	r1, [r0, #4]
 23f5812:	6800      	ldr	r0, [r0, #0]
 23f5814:	f003 fb50 	bl	23f8eb8 <_ZN7TwoWire17beginTransmissionEh>
  _wire->write(reg);              // sends one byte
 23f5818:	6820      	ldr	r0, [r4, #0]
 23f581a:	4629      	mov	r1, r5
 23f581c:	6803      	ldr	r3, [r0, #0]
 23f581e:	689b      	ldr	r3, [r3, #8]
 23f5820:	4798      	blx	r3
  _wire->endTransmission();    // stop transmitting
 23f5822:	6820      	ldr	r0, [r4, #0]
 23f5824:	f003 fb53 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>
 
  _wire->requestFrom(addr, (uint8_t)2);
 23f5828:	7921      	ldrb	r1, [r4, #4]
 23f582a:	2202      	movs	r2, #2
 23f582c:	6820      	ldr	r0, [r4, #0]
 23f582e:	f003 fb40 	bl	23f8eb2 <_ZN7TwoWire11requestFromEhj>
  int16_t ret=0;
 23f5832:	2300      	movs	r3, #0
  if(i2cdelay(2)){
 23f5834:	2102      	movs	r1, #2
 23f5836:	4620      	mov	r0, r4
  int16_t ret=0;
 23f5838:	f8ad 3006 	strh.w	r3, [sp, #6]
  if(i2cdelay(2)){
 23f583c:	f7ff ffb8 	bl	23f57b0 <_ZN5SVCS38i2cdelayEi>
 23f5840:	b158      	cbz	r0, 23f585a <_ZN5SVCS36getValEh+0x50>
	byte *pointer = (byte *)&ret;
    pointer[0] = _wire->read();
 23f5842:	6820      	ldr	r0, [r4, #0]
 23f5844:	6803      	ldr	r3, [r0, #0]
 23f5846:	695b      	ldr	r3, [r3, #20]
 23f5848:	4798      	blx	r3
 23f584a:	f88d 0006 	strb.w	r0, [sp, #6]
    pointer[1] = _wire->read();
 23f584e:	6820      	ldr	r0, [r4, #0]
 23f5850:	6803      	ldr	r3, [r0, #0]
 23f5852:	695b      	ldr	r3, [r3, #20]
 23f5854:	4798      	blx	r3
 23f5856:	f88d 0007 	strb.w	r0, [sp, #7]
  }
  return ret;
}
 23f585a:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 23f585e:	b003      	add	sp, #12
 23f5860:	bd30      	pop	{r4, r5, pc}

023f5862 <_ZN5SVCS310newReadingEv>:
    return 0;
  }
  return 1;
}

int SVCS3::newReading(){
 23f5862:	b510      	push	{r4, lr}
 23f5864:	4604      	mov	r4, r0
  _wire->beginTransmission(addr); // transmit to device
 23f5866:	7901      	ldrb	r1, [r0, #4]
 23f5868:	6800      	ldr	r0, [r0, #0]
 23f586a:	f003 fb25 	bl	23f8eb8 <_ZN7TwoWire17beginTransmissionEh>
  _wire->write(REG_READ_START);              // sends one byte
 23f586e:	2101      	movs	r1, #1
 23f5870:	6820      	ldr	r0, [r4, #0]
 23f5872:	f7ff ff8b 	bl	23f578c <_ZN7TwoWire5writeEi.isra.0>
  _wire->endTransmission();    // stop transmitting
 23f5876:	6820      	ldr	r0, [r4, #0]
 23f5878:	f003 fb29 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>
  delay(300);
 23f587c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 23f5880:	f002 fd20 	bl	23f82c4 <delay>
  return getState();
 23f5884:	4620      	mov	r0, r4
}
 23f5886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return getState();
 23f588a:	f7ff bfa9 	b.w	23f57e0 <_ZN5SVCS38getStateEv>
	...

023f5890 <_ZN5SVCS36getE25Ev>:

float SVCS3::getE25()
{
 23f5890:	b508      	push	{r3, lr}
  return getVal(REG_READ_E25)/100.0;
 23f5892:	2102      	movs	r1, #2
 23f5894:	f7ff ffb9 	bl	23f580a <_ZN5SVCS36getValEh>
 23f5898:	f7ef fd04 	bl	23e52a4 <__aeabi_i2d>
 23f589c:	2200      	movs	r2, #0
 23f589e:	4b04      	ldr	r3, [pc, #16]	; (23f58b0 <_ZN5SVCS36getE25Ev+0x20>)
 23f58a0:	f7ef fe94 	bl	23e55cc <__aeabi_ddiv>
 23f58a4:	f7f0 f860 	bl	23e5968 <__aeabi_d2f>
}
 23f58a8:	ee00 0a10 	vmov	s0, r0
 23f58ac:	bd08      	pop	{r3, pc}
 23f58ae:	bf00      	nop
 23f58b0:	40590000 	.word	0x40590000

023f58b4 <_ZN5SVCS35getECEv>:

float SVCS3::getEC()
{
 23f58b4:	b508      	push	{r3, lr}
  return getVal(REG_READ_EC)/10.0;
 23f58b6:	2103      	movs	r1, #3
 23f58b8:	f7ff ffa7 	bl	23f580a <_ZN5SVCS36getValEh>
 23f58bc:	f7ef fcf2 	bl	23e52a4 <__aeabi_i2d>
 23f58c0:	2200      	movs	r2, #0
 23f58c2:	4b04      	ldr	r3, [pc, #16]	; (23f58d4 <_ZN5SVCS35getECEv+0x20>)
 23f58c4:	f7ef fe82 	bl	23e55cc <__aeabi_ddiv>
 23f58c8:	f7f0 f84e 	bl	23e5968 <__aeabi_d2f>
}
 23f58cc:	ee00 0a10 	vmov	s0, r0
 23f58d0:	bd08      	pop	{r3, pc}
 23f58d2:	bf00      	nop
 23f58d4:	40240000 	.word	0x40240000

023f58d8 <_ZN5SVCS37getTempEv>:

float SVCS3::getTemp()
{
 23f58d8:	b508      	push	{r3, lr}
  return getVal(REG_READ_TEMP)/100.0;
 23f58da:	2104      	movs	r1, #4
 23f58dc:	f7ff ff95 	bl	23f580a <_ZN5SVCS36getValEh>
 23f58e0:	f7ef fce0 	bl	23e52a4 <__aeabi_i2d>
 23f58e4:	2200      	movs	r2, #0
 23f58e6:	4b04      	ldr	r3, [pc, #16]	; (23f58f8 <_ZN5SVCS37getTempEv+0x20>)
 23f58e8:	f7ef fe70 	bl	23e55cc <__aeabi_ddiv>
 23f58ec:	f7f0 f83c 	bl	23e5968 <__aeabi_d2f>
}
 23f58f0:	ee00 0a10 	vmov	s0, r0
 23f58f4:	bd08      	pop	{r3, pc}
 23f58f6:	bf00      	nop
 23f58f8:	40590000 	.word	0x40590000

023f58fc <_ZN5SVCS36getVWCEv>:

float SVCS3::getVWC()
{
 23f58fc:	b508      	push	{r3, lr}
  return getVal(REG_READ_VWC)/10.0;
 23f58fe:	2105      	movs	r1, #5
 23f5900:	f7ff ff83 	bl	23f580a <_ZN5SVCS36getValEh>
 23f5904:	f7ef fcce 	bl	23e52a4 <__aeabi_i2d>
 23f5908:	2200      	movs	r2, #0
 23f590a:	4b04      	ldr	r3, [pc, #16]	; (23f591c <_ZN5SVCS36getVWCEv+0x20>)
 23f590c:	f7ef fe5e 	bl	23e55cc <__aeabi_ddiv>
 23f5910:	f7f0 f82a 	bl	23e5968 <__aeabi_d2f>
}
 23f5914:	ee00 0a10 	vmov	s0, r0
 23f5918:	bd08      	pop	{r3, pc}
 23f591a:	bf00      	nop
 23f591c:	40240000 	.word	0x40240000

023f5920 <_ZN7SVMULTIC1Ev>:
 */
#include "i2cMultiSm.h"


SVMULTI::SVMULTI(){
  addr=101;
 23f5920:	2365      	movs	r3, #101	; 0x65
 23f5922:	8083      	strh	r3, [r0, #4]
}
 23f5924:	4770      	bx	lr

023f5926 <_ZN7SVMULTI4initEi>:
  _wire = the_wire;
  addr = address;
  return 0;
}

int SVMULTI::init(int address){
 23f5926:	b538      	push	{r3, r4, r5, lr}
 23f5928:	4604      	mov	r4, r0
 23f592a:	460d      	mov	r5, r1
  _wire = &Wire;
 23f592c:	f004 fcd4 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23f5930:	6020      	str	r0, [r4, #0]
  _wire->begin();
 23f5932:	f003 fa97 	bl	23f8e64 <_ZN7TwoWire5beginEv>
  addr = address;
  return 0;
}
 23f5936:	2000      	movs	r0, #0
  addr = address;
 23f5938:	80a5      	strh	r5, [r4, #4]
}
 23f593a:	bd38      	pop	{r3, r4, r5, pc}

023f593c <_ZN7SVMULTI8i2cdelayEi>:


bool SVMULTI::i2cdelay(int size){
 23f593c:	b570      	push	{r4, r5, r6, lr}
 23f593e:	4606      	mov	r6, r0
 23f5940:	460d      	mov	r5, r1
  int i=0;
 23f5942:	2400      	movs	r4, #0
  for (;_wire->available() < size && i<=size;i++) {
 23f5944:	6830      	ldr	r0, [r6, #0]
 23f5946:	6803      	ldr	r3, [r0, #0]
 23f5948:	691b      	ldr	r3, [r3, #16]
 23f594a:	4798      	blx	r3
 23f594c:	42a8      	cmp	r0, r5
 23f594e:	da06      	bge.n	23f595e <_ZN7SVMULTI8i2cdelayEi+0x22>
 23f5950:	42ac      	cmp	r4, r5
 23f5952:	dc09      	bgt.n	23f5968 <_ZN7SVMULTI8i2cdelayEi+0x2c>
	  delay(2);
 23f5954:	2002      	movs	r0, #2
 23f5956:	f002 fcb5 	bl	23f82c4 <delay>
  for (;_wire->available() < size && i<=size;i++) {
 23f595a:	3401      	adds	r4, #1
 23f595c:	e7f2      	b.n	23f5944 <_ZN7SVMULTI8i2cdelayEi+0x8>
  }
  if(i>=size){
 23f595e:	42ac      	cmp	r4, r5
 23f5960:	bfac      	ite	ge
 23f5962:	2000      	movge	r0, #0
 23f5964:	2001      	movlt	r0, #1
	  return false;
  }else{
	  return true;
  }
}
 23f5966:	bd70      	pop	{r4, r5, r6, pc}
	  return false;
 23f5968:	2000      	movs	r0, #0
 23f596a:	e7fc      	b.n	23f5966 <_ZN7SVMULTI8i2cdelayEi+0x2a>

023f596c <_ZN7SVMULTI8getStateEv>:

int SVMULTI::getState(){ //-1:no data, 0:err, 1:ok
 23f596c:	b510      	push	{r4, lr}
 23f596e:	4604      	mov	r4, r0
  _wire->requestFrom(addr, (uint8_t)1);
 23f5970:	7901      	ldrb	r1, [r0, #4]
 23f5972:	2201      	movs	r2, #1
 23f5974:	6800      	ldr	r0, [r0, #0]
 23f5976:	f003 fa9c 	bl	23f8eb2 <_ZN7TwoWire11requestFromEhj>
   if(i2cdelay(1)){
 23f597a:	2101      	movs	r1, #1
 23f597c:	4620      	mov	r0, r4
 23f597e:	f7ff ffdd 	bl	23f593c <_ZN7SVMULTI8i2cdelayEi>
 23f5982:	b128      	cbz	r0, 23f5990 <_ZN7SVMULTI8getStateEv+0x24>
    return _wire->read();
 23f5984:	6820      	ldr	r0, [r4, #0]
  }else{
    return -1;
  }
}
 23f5986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return _wire->read();
 23f598a:	6803      	ldr	r3, [r0, #0]
 23f598c:	695b      	ldr	r3, [r3, #20]
 23f598e:	4718      	bx	r3
}
 23f5990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23f5994:	bd10      	pop	{r4, pc}

023f5996 <_ZN7SVMULTI10newReadingEv>:
    return 0;
  }
  return 1;
}

int SVMULTI::newReading(){
 23f5996:	b510      	push	{r4, lr}
 23f5998:	4604      	mov	r4, r0
  _wire->beginTransmission(addr); // transmit to device
 23f599a:	8881      	ldrh	r1, [r0, #4]
 23f599c:	6800      	ldr	r0, [r0, #0]
 23f599e:	f003 fa8f 	bl	23f8ec0 <_ZN7TwoWire17beginTransmissionEi>
  _wire->write(REG_READ_START);              // sends one byte
 23f59a2:	6820      	ldr	r0, [r4, #0]
 23f59a4:	2101      	movs	r1, #1
 23f59a6:	6803      	ldr	r3, [r0, #0]
 23f59a8:	689b      	ldr	r3, [r3, #8]
 23f59aa:	4798      	blx	r3
  _wire->endTransmission();    // stop transmitting
 23f59ac:	6820      	ldr	r0, [r4, #0]
 23f59ae:	f003 fa8e 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>
  delay(300);
 23f59b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 23f59b6:	f002 fc85 	bl	23f82c4 <delay>
  return getState();
 23f59ba:	4620      	mov	r0, r4
}
 23f59bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return getState();
 23f59c0:	f7ff bfd4 	b.w	23f596c <_ZN7SVMULTI8getStateEv>

023f59c4 <_ZN7SVMULTI6getRawEP6vals_t>:
	}

}


void SVMULTI::getRaw(vals_t *vals){
 23f59c4:	b570      	push	{r4, r5, r6, lr}
 23f59c6:	4604      	mov	r4, r0
 23f59c8:	460d      	mov	r5, r1
  _wire->beginTransmission(addr); // transmit to device
 23f59ca:	8881      	ldrh	r1, [r0, #4]
 23f59cc:	6800      	ldr	r0, [r0, #0]
 23f59ce:	f003 fa77 	bl	23f8ec0 <_ZN7TwoWire17beginTransmissionEi>
  _wire->write(REG_GET_DATA);              // sends one byte
 23f59d2:	6820      	ldr	r0, [r4, #0]
 23f59d4:	2109      	movs	r1, #9
 23f59d6:	6803      	ldr	r3, [r0, #0]
 23f59d8:	689b      	ldr	r3, [r3, #8]
 23f59da:	4798      	blx	r3
  _wire->endTransmission();    // stop transmitting
 23f59dc:	6820      	ldr	r0, [r4, #0]
 23f59de:	f003 fa76 	bl	23f8ece <_ZN7TwoWire15endTransmissionEv>
  _wire->requestFrom(addr, (uint8_t)14);
 23f59e2:	7921      	ldrb	r1, [r4, #4]
 23f59e4:	220e      	movs	r2, #14
 23f59e6:	6820      	ldr	r0, [r4, #0]
 23f59e8:	f003 fa63 	bl	23f8eb2 <_ZN7TwoWire11requestFromEhj>
   byte *p1 = (byte*)vals;
  if(i2cdelay(14)){
 23f59ec:	210e      	movs	r1, #14
 23f59ee:	4620      	mov	r0, r4
 23f59f0:	f7ff ffa4 	bl	23f593c <_ZN7SVMULTI8i2cdelayEi>
 23f59f4:	b148      	cbz	r0, 23f5a0a <_ZN7SVMULTI6getRawEP6vals_t+0x46>
 23f59f6:	1e6e      	subs	r6, r5, #1
 23f59f8:	350d      	adds	r5, #13
    // Wire.readBytes((byte*)&vals, 14);
	  for(int i = 0; i<14; i++){
		  p1[i] = _wire->read();
 23f59fa:	6820      	ldr	r0, [r4, #0]
 23f59fc:	6803      	ldr	r3, [r0, #0]
 23f59fe:	695b      	ldr	r3, [r3, #20]
 23f5a00:	4798      	blx	r3
 23f5a02:	f806 0f01 	strb.w	r0, [r6, #1]!
	  for(int i = 0; i<14; i++){
 23f5a06:	42ae      	cmp	r6, r5
 23f5a08:	d1f7      	bne.n	23f59fa <_ZN7SVMULTI6getRawEP6vals_t+0x36>
	  }
  }
}
 23f5a0a:	bd70      	pop	{r4, r5, r6, pc}
 23f5a0c:	0000      	movs	r0, r0
	...

023f5a10 <_ZN7SVMULTI7getDataEP10soil_ret_t>:
void SVMULTI::getData(soil_ret_t *data){
 23f5a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f5a14:	ed2d 8b02 	vpush	{d8}
 23f5a18:	b085      	sub	sp, #20
 23f5a1a:	460c      	mov	r4, r1
  getRaw(&vals);
 23f5a1c:	4669      	mov	r1, sp
 23f5a1e:	f7ff ffd1 	bl	23f59c4 <_ZN7SVMULTI6getRawEP6vals_t>
 23f5a22:	ed9f 8b3b 	vldr	d8, [pc, #236]	; 23f5b10 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x100>
 23f5a26:	f10d 0a04 	add.w	sl, sp, #4
 23f5a2a:	f104 0508 	add.w	r5, r4, #8
 23f5a2e:	f104 0b1c 	add.w	fp, r4, #28
		  data->dp[a] = vals.dp[a]/100.0;
 23f5a32:	f93a 0b02 	ldrsh.w	r0, [sl], #2
 23f5a36:	f7ef fc35 	bl	23e52a4 <__aeabi_i2d>
 23f5a3a:	2200      	movs	r2, #0
 23f5a3c:	4b3e      	ldr	r3, [pc, #248]	; (23f5b38 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x128>)
 23f5a3e:	f7ef fdc5 	bl	23e55cc <__aeabi_ddiv>
 23f5a42:	f7ef ff91 	bl	23e5968 <__aeabi_d2f>
 23f5a46:	6028      	str	r0, [r5, #0]
 23f5a48:	f7ef fc3e 	bl	23e52c8 <__aeabi_f2d>
 23f5a4c:	eeb0 1a48 	vmov.f32	s2, s16
 23f5a50:	eef0 1a68 	vmov.f32	s3, s17
 23f5a54:	ec41 0b10 	vmov	d0, r0, r1
 23f5a58:	f004 ffee 	bl	23faa38 <pow>
 23f5a5c:	f855 0b04 	ldr.w	r0, [r5], #4
 23f5a60:	ec59 8b10 	vmov	r8, r9, d0
 23f5a64:	f7ef fc30 	bl	23e52c8 <__aeabi_f2d>
		  data->vwc[a] = (4.3e-6 * pow(data->dp[a],3) - 5.5e-4*pow(data->dp[a],2) + 2.92e-2*data->dp[a] - 5.3e-2)* 100.0;
 23f5a68:	a32b      	add	r3, pc, #172	; (adr r3, 23f5b18 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x108>)
 23f5a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f5a6e:	4606      	mov	r6, r0
 23f5a70:	460f      	mov	r7, r1
 23f5a72:	4640      	mov	r0, r8
 23f5a74:	4649      	mov	r1, r9
 23f5a76:	f7ef fc7f 	bl	23e5378 <__aeabi_dmul>
 23f5a7a:	4632      	mov	r2, r6
 23f5a7c:	4680      	mov	r8, r0
 23f5a7e:	4689      	mov	r9, r1
 23f5a80:	463b      	mov	r3, r7
 23f5a82:	4630      	mov	r0, r6
 23f5a84:	4639      	mov	r1, r7
 23f5a86:	f7ef fc77 	bl	23e5378 <__aeabi_dmul>
 23f5a8a:	a325      	add	r3, pc, #148	; (adr r3, 23f5b20 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x110>)
 23f5a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f5a90:	f7ef fc72 	bl	23e5378 <__aeabi_dmul>
 23f5a94:	4602      	mov	r2, r0
 23f5a96:	460b      	mov	r3, r1
 23f5a98:	4640      	mov	r0, r8
 23f5a9a:	4649      	mov	r1, r9
 23f5a9c:	f7ef fab4 	bl	23e5008 <__aeabi_dsub>
 23f5aa0:	a321      	add	r3, pc, #132	; (adr r3, 23f5b28 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x118>)
 23f5aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f5aa6:	4680      	mov	r8, r0
 23f5aa8:	4689      	mov	r9, r1
 23f5aaa:	4630      	mov	r0, r6
 23f5aac:	4639      	mov	r1, r7
 23f5aae:	f7ef fc63 	bl	23e5378 <__aeabi_dmul>
 23f5ab2:	4602      	mov	r2, r0
 23f5ab4:	460b      	mov	r3, r1
 23f5ab6:	4640      	mov	r0, r8
 23f5ab8:	4649      	mov	r1, r9
 23f5aba:	f7ef faa7 	bl	23e500c <__adddf3>
 23f5abe:	a31c      	add	r3, pc, #112	; (adr r3, 23f5b30 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x120>)
 23f5ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f5ac4:	f7ef faa0 	bl	23e5008 <__aeabi_dsub>
 23f5ac8:	2200      	movs	r2, #0
 23f5aca:	4b1b      	ldr	r3, [pc, #108]	; (23f5b38 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x128>)
 23f5acc:	f7ef fc54 	bl	23e5378 <__aeabi_dmul>
 23f5ad0:	f7ef ff4a 	bl	23e5968 <__aeabi_d2f>
  for(int a=0;a<MULTI_ZONES;a++){
 23f5ad4:	45ab      	cmp	fp, r5
		  data->vwc[a] = (4.3e-6 * pow(data->dp[a],3) - 5.5e-4*pow(data->dp[a],2) + 2.92e-2*data->dp[a] - 5.3e-2)* 100.0;
 23f5ad6:	6128      	str	r0, [r5, #16]
  for(int a=0;a<MULTI_ZONES;a++){
 23f5ad8:	d1ab      	bne.n	23f5a32 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x22>
		  data->temp[a] = vals.temp[a]/100.0;
 23f5ada:	f9bd 0000 	ldrsh.w	r0, [sp]
 23f5ade:	f7ef fbe1 	bl	23e52a4 <__aeabi_i2d>
 23f5ae2:	2200      	movs	r2, #0
 23f5ae4:	4b14      	ldr	r3, [pc, #80]	; (23f5b38 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x128>)
 23f5ae6:	f7ef fd71 	bl	23e55cc <__aeabi_ddiv>
 23f5aea:	f7ef ff3d 	bl	23e5968 <__aeabi_d2f>
 23f5aee:	6020      	str	r0, [r4, #0]
 23f5af0:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 23f5af4:	f7ef fbd6 	bl	23e52a4 <__aeabi_i2d>
 23f5af8:	2200      	movs	r2, #0
 23f5afa:	4b0f      	ldr	r3, [pc, #60]	; (23f5b38 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x128>)
 23f5afc:	f7ef fd66 	bl	23e55cc <__aeabi_ddiv>
 23f5b00:	f7ef ff32 	bl	23e5968 <__aeabi_d2f>
 23f5b04:	6060      	str	r0, [r4, #4]
}
 23f5b06:	b005      	add	sp, #20
 23f5b08:	ecbd 8b02 	vpop	{d8}
 23f5b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f5b10:	00000000 	.word	0x00000000
 23f5b14:	40080000 	.word	0x40080000
 23f5b18:	fff6c5c5 	.word	0xfff6c5c5
 23f5b1c:	3ed20916 	.word	0x3ed20916
 23f5b20:	01a36e2f 	.word	0x01a36e2f
 23f5b24:	3f4205bc 	.word	0x3f4205bc
 23f5b28:	d42c3c9f 	.word	0xd42c3c9f
 23f5b2c:	3f9de69a 	.word	0x3f9de69a
 23f5b30:	e5604189 	.word	0xe5604189
 23f5b34:	3fab22d0 	.word	0x3fab22d0
 23f5b38:	40590000 	.word	0x40590000

023f5b3c <_ZN9ExFatFile8dirCacheEhh>:

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
 23f5b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f5b3e:	4604      	mov	r4, r0
 23f5b40:	460f      	mov	r7, r1
 23f5b42:	b085      	sub	sp, #20
  DirPos_t pos = m_dirPos;
 23f5b44:	ad01      	add	r5, sp, #4
 23f5b46:	f100 0324 	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
 23f5b4a:	4616      	mov	r6, r2
  DirPos_t pos = m_dirPos;
 23f5b4c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 23f5b50:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE * set) != 1) {
 23f5b54:	4629      	mov	r1, r5
 23f5b56:	6a20      	ldr	r0, [r4, #32]
 23f5b58:	017a      	lsls	r2, r7, #5
 23f5b5a:	f001 f8d8 	bl	23f6d0e <_ZN14ExFatPartition7dirSeekEP8DirPos_tm>
 23f5b5e:	2801      	cmp	r0, #1
 23f5b60:	d106      	bne.n	23f5b70 <_ZN9ExFatFile8dirCacheEhh+0x34>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
 23f5b62:	4632      	mov	r2, r6
 23f5b64:	4629      	mov	r1, r5
 23f5b66:	6a20      	ldr	r0, [r4, #32]
 23f5b68:	f001 f884 	bl	23f6c74 <_ZN14ExFatPartition8dirCacheEPK8DirPos_th>
}
 23f5b6c:	b005      	add	sp, #20
 23f5b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return nullptr;
 23f5b70:	2000      	movs	r0, #0
 23f5b72:	e7fb      	b.n	23f5b6c <_ZN9ExFatFile8dirCacheEhh+0x30>

023f5b74 <_ZN9ExFatFile5closeEv>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
 23f5b74:	b510      	push	{r4, lr}
 23f5b76:	4604      	mov	r4, r0
  bool rtn = sync();
 23f5b78:	f000 fcd2 	bl	23f6520 <_ZN9ExFatFile4syncEv>
  m_attributes = FILE_ATTR_CLOSED;
 23f5b7c:	2300      	movs	r3, #0
 23f5b7e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
 23f5b82:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
 23f5b86:	bd10      	pop	{r4, pc}

023f5b88 <_ZN9ExFatFile8openRootEP11ExFatVolume>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
 23f5b88:	b538      	push	{r3, r4, r5, lr}
 23f5b8a:	460d      	mov	r5, r1
  if (isOpen()) {
 23f5b8c:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
bool ExFatFile::openRoot(ExFatVolume* vol) {
 23f5b90:	4604      	mov	r4, r0
  if (isOpen()) {
 23f5b92:	b951      	cbnz	r1, 23f5baa <_ZN9ExFatFile8openRootEP11ExFatVolume+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
 23f5b94:	2238      	movs	r2, #56	; 0x38
 23f5b96:	f007 f93a 	bl	23fce0e <memset>
  m_attributes = FILE_ATTR_ROOT;
 23f5b9a:	2340      	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
 23f5b9c:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_ROOT;
 23f5b9e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
 23f5ba2:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
 23f5ba4:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
  return true;

fail:
  return false;
}
 23f5ba8:	bd38      	pop	{r3, r4, r5, pc}
  return false;
 23f5baa:	2000      	movs	r0, #0
 23f5bac:	e7fc      	b.n	23f5ba8 <_ZN9ExFatFile8openRootEP11ExFatVolume+0x20>
	...

023f5bb0 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path, ExName_t* fname,
                              const char** ptr) {
 23f5bb0:	b4f0      	push	{r4, r5, r6, r7}
  // Skip leading spaces.
  while (*path == ' ') {
 23f5bb2:	460c      	mov	r4, r1
 23f5bb4:	f811 5b01 	ldrb.w	r5, [r1], #1
 23f5bb8:	2d20      	cmp	r5, #32
 23f5bba:	d0fa      	beq.n	23f5bb2 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x2>
// Size of FAT and exFAT directory structures.
const size_t FS_DIR_SIZE = 32;
//------------------------------------------------------------------------------
// Reserved characters for exFAT names and FAT LFN.
inline bool lfnReservedChar(uint8_t c) {
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':' || c == '<' ||
 23f5bbc:	4f18      	ldr	r7, [pc, #96]	; (23f5c20 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x70>)
    path++;
  }
  fname->begin = path;
 23f5bbe:	6014      	str	r4, [r2, #0]
  fname->end = path;
 23f5bc0:	6094      	str	r4, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
 23f5bc2:	4626      	mov	r6, r4
 23f5bc4:	f816 5b01 	ldrb.w	r5, [r6], #1
 23f5bc8:	b1dd      	cbz	r5, 23f5c02 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x52>
 23f5bca:	2d2f      	cmp	r5, #47	; 0x2f
 23f5bcc:	d019      	beq.n	23f5c02 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x52>
         c == '>' || c == '?' || c == '\\' || c == '|';
 23f5bce:	f1a5 0120 	sub.w	r1, r5, #32
 23f5bd2:	295f      	cmp	r1, #95	; 0x5f
 23f5bd4:	d821      	bhi.n	23f5c1a <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x6a>
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':' || c == '<' ||
 23f5bd6:	f1a5 0122 	sub.w	r1, r5, #34	; 0x22
 23f5bda:	b2c9      	uxtb	r1, r1
 23f5bdc:	291d      	cmp	r1, #29
 23f5bde:	d803      	bhi.n	23f5be8 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x38>
 23f5be0:	fa27 f101 	lsr.w	r1, r7, r1
 23f5be4:	07c9      	lsls	r1, r1, #31
 23f5be6:	d418      	bmi.n	23f5c1a <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x6a>
 23f5be8:	f005 01bf 	and.w	r1, r5, #191	; 0xbf
 23f5bec:	293c      	cmp	r1, #60	; 0x3c
 23f5bee:	d014      	beq.n	23f5c1a <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x6a>
         c == '>' || c == '?' || c == '\\' || c == '|';
 23f5bf0:	2d5c      	cmp	r5, #92	; 0x5c
 23f5bf2:	d012      	beq.n	23f5c1a <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x6a>
    uint8_t c = *path++;
    if (!lfnLegalChar(c)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (c != '.' && c != ' ') {
 23f5bf4:	2d2e      	cmp	r5, #46	; 0x2e
 23f5bf6:	d002      	beq.n	23f5bfe <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x4e>
 23f5bf8:	2d20      	cmp	r5, #32
 23f5bfa:	d000      	beq.n	23f5bfe <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x4e>
      // Need to trim trailing dots spaces.
      fname->end = path;
 23f5bfc:	6096      	str	r6, [r2, #8]
                              const char** ptr) {
 23f5bfe:	4634      	mov	r4, r6
 23f5c00:	e7df      	b.n	23f5bc2 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x12>
 23f5c02:	4625      	mov	r5, r4
    }
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {
 23f5c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 23f5c08:	2920      	cmp	r1, #32
 23f5c0a:	d0fa      	beq.n	23f5c02 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x52>
 23f5c0c:	292f      	cmp	r1, #47	; 0x2f
 23f5c0e:	d0f8      	beq.n	23f5c02 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x52>
  }
  *ptr = path;
 23f5c10:	601d      	str	r5, [r3, #0]
  return hashName(fname);
 23f5c12:	4611      	mov	r1, r2

fail:
  return false;
}
 23f5c14:	bcf0      	pop	{r4, r5, r6, r7}
  return hashName(fname);
 23f5c16:	f000 bf61 	b.w	23f6adc <_ZN9ExFatFile8hashNameEP8ExName_t>
}
 23f5c1a:	2000      	movs	r0, #0
 23f5c1c:	bcf0      	pop	{r4, r5, r6, r7}
 23f5c1e:	4770      	bx	lr
 23f5c20:	31000101 	.word	0x31000101

023f5c24 <_ZN9ExFatFile4readEPvj>:
  m_curPosition = saveCurPosition;
  m_curCluster = saveCurCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
 23f5c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f5c28:	ed2d 8b02 	vpush	{d8}
  /** \return True if file is read-only */
  bool isReadOnly() const { return m_attributes & FS_ATTRIB_READ_ONLY; }
  /** \return True if this is the root directory. */
  bool isRoot() const { return m_attributes & FILE_ATTR_ROOT; }
  /** \return True file is readable. */
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
 23f5c2c:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 23f5c30:	4604      	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
 23f5c32:	07dd      	lsls	r5, r3, #31
int ExFatFile::read(void* buf, size_t count) {
 23f5c34:	4689      	mov	r9, r1
 23f5c36:	4616      	mov	r6, r2
 23f5c38:	b083      	sub	sp, #12
  if (!isReadable()) {
 23f5c3a:	d567      	bpl.n	23f5d0c <_ZN9ExFatFile4readEPvj+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
 23f5c3c:	0658      	lsls	r0, r3, #25
 23f5c3e:	d403      	bmi.n	23f5c48 <_ZN9ExFatFile4readEPvj+0x24>
 23f5c40:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 23f5c44:	0719      	lsls	r1, r3, #28
 23f5c46:	d50b      	bpl.n	23f5c60 <_ZN9ExFatFile4readEPvj+0x3c>
    if ((m_curPosition + count) > m_validLength) {
 23f5c48:	e9d4 3200 	ldrd	r3, r2, [r4]
 23f5c4c:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 23f5c50:	18f5      	adds	r5, r6, r3
 23f5c52:	f142 0200 	adc.w	r2, r2, #0
 23f5c56:	42a9      	cmp	r1, r5
 23f5c58:	eb70 0202 	sbcs.w	r2, r0, r2
      count = toRead = m_validLength - m_curPosition;
 23f5c5c:	bf38      	it	cc
 23f5c5e:	1ace      	subcc	r6, r1, r3
        m_curCluster =
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f5c60:	f104 0318 	add.w	r3, r4, #24
int ExFatFile::read(void* buf, size_t count) {
 23f5c64:	46b0      	mov	r8, r6
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f5c66:	ee08 3a10 	vmov	s16, r3
  while (toRead) {
 23f5c6a:	f1b8 0f00 	cmp.w	r8, #0
 23f5c6e:	f000 8098 	beq.w	23f5da2 <_ZN9ExFatFile4readEPvj+0x17e>
    clusterOffset = m_curPosition & m_vol->clusterMask();
 23f5c72:	e9d4 3200 	ldrd	r3, r2, [r4]
 23f5c76:	6a20      	ldr	r0, [r4, #32]
 23f5c78:	f8d0 5438 	ldr.w	r5, [r0, #1080]	; 0x438
 23f5c7c:	ea05 0703 	and.w	r7, r5, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
 23f5c80:	f3c7 0b08 	ubfx	fp, r7, #0, #9
    if (clusterOffset == 0) {
 23f5c84:	b94f      	cbnz	r7, 23f5c9a <_ZN9ExFatFile4readEPvj+0x76>
      if (m_curPosition == 0) {
 23f5c86:	4313      	orrs	r3, r2
 23f5c88:	d12c      	bne.n	23f5ce4 <_ZN9ExFatFile4readEPvj+0xc0>
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
 23f5c8a:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 23f5c8e:	065a      	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() { return m_blockDev->isBusy(); }
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
 23f5c90:	bf4c      	ite	mi
 23f5c92:	f8d0 3434 	ldrmi.w	r3, [r0, #1076]	; 0x434
 23f5c96:	69e3      	ldrpl	r3, [r4, #28]
        m_curCluster =
 23f5c98:	61a3      	str	r3, [r4, #24]
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
 23f5c9a:	f8d4 a020 	ldr.w	sl, [r4, #32]
  bool dataCacheSync() { return m_dataCache.sync(); }
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const { return m_clusterMask; }
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
 23f5c9e:	69a2      	ldr	r2, [r4, #24]
 23f5ca0:	f89a 0445 	ldrb.w	r0, [sl, #1093]	; 0x445
 23f5ca4:	1e95      	subs	r5, r2, #2
 23f5ca6:	f8da 142c 	ldr.w	r1, [sl, #1068]	; 0x42c
 23f5caa:	4085      	lsls	r5, r0
 23f5cac:	eb05 2557 	add.w	r5, r5, r7, lsr #9
             (clusterOffset >> m_vol->bytesPerSectorShift());
 23f5cb0:	ea4f 2c57 	mov.w	ip, r7, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
 23f5cb4:	440d      	add	r5, r1
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector() ||
 23f5cb6:	f1bb 0f00 	cmp.w	fp, #0
 23f5cba:	d130      	bne.n	23f5d1e <_ZN9ExFatFile4readEPvj+0xfa>
 23f5cbc:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 23f5cc0:	d32d      	bcc.n	23f5d1e <_ZN9ExFatFile4readEPvj+0xfa>
   * \param[in] option mode for cached sector.
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() { return m_sector; }
 23f5cc2:	f8da 2218 	ldr.w	r2, [sl, #536]	; 0x218
 23f5cc6:	4295      	cmp	r5, r2
 23f5cc8:	d029      	beq.n	23f5d1e <_ZN9ExFatFile4readEPvj+0xfa>
        goto fail;
      }
      const uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
 23f5cca:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 23f5cce:	d245      	bcs.n	23f5d5c <_ZN9ExFatFile4readEPvj+0x138>
    return m_blockDev->readSector(sector, dst);
 23f5cd0:	464a      	mov	r2, r9
 23f5cd2:	4629      	mov	r1, r5
 23f5cd4:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
 23f5cd8:	f7ff fc6a 	bl	23f55b0 <_ZN9SdSpiCard10readSectorEmPh>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
 23f5cdc:	b1b0      	cbz	r0, 23f5d0c <_ZN9ExFatFile4readEPvj+0xe8>
      n = m_vol->bytesPerSector();
 23f5cde:	f44f 7700 	mov.w	r7, #512	; 0x200
 23f5ce2:	e030      	b.n	23f5d46 <_ZN9ExFatFile4readEPvj+0x122>
      } else if (isContiguous()) {
 23f5ce4:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
        m_curCluster++;
 23f5ce8:	69a1      	ldr	r1, [r4, #24]
      } else if (isContiguous()) {
 23f5cea:	065b      	lsls	r3, r3, #25
 23f5cec:	d502      	bpl.n	23f5cf4 <_ZN9ExFatFile4readEPvj+0xd0>
        m_curCluster++;
 23f5cee:	3101      	adds	r1, #1
 23f5cf0:	61a1      	str	r1, [r4, #24]
 23f5cf2:	e7d2      	b.n	23f5c9a <_ZN9ExFatFile4readEPvj+0x76>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f5cf4:	ee18 2a10 	vmov	r2, s16
 23f5cf8:	f000 ffd6 	bl	23f6ca8 <_ZN14ExFatPartition6fatGetEmPm>
        if (fg < 0) {
 23f5cfc:	2800      	cmp	r0, #0
 23f5cfe:	db05      	blt.n	23f5d0c <_ZN9ExFatFile4readEPvj+0xe8>
        if (fg == 0) {
 23f5d00:	d1cb      	bne.n	23f5c9a <_ZN9ExFatFile4readEPvj+0x76>
          if (isDir()) {
 23f5d02:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 23f5d06:	f013 0f50 	tst.w	r3, #80	; 0x50
 23f5d0a:	d14a      	bne.n	23f5da2 <_ZN9ExFatFile4readEPvj+0x17e>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
 23f5d0c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
 23f5d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  m_error |= READ_ERROR;
 23f5d14:	f043 0302 	orr.w	r3, r3, #2
 23f5d18:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return -1;
 23f5d1c:	e043      	b.n	23f5da6 <_ZN9ExFatFile4readEPvj+0x182>
      n = m_vol->bytesPerSector() - sectorOffset;
 23f5d1e:	f5cb 7700 	rsb	r7, fp, #512	; 0x200
      if (n > toRead) {
 23f5d22:	4547      	cmp	r7, r8
    return m_dataCache.prepare(sector, option);
 23f5d24:	f04f 0200 	mov.w	r2, #0
 23f5d28:	4629      	mov	r1, r5
 23f5d2a:	f50a 7004 	add.w	r0, sl, #528	; 0x210
 23f5d2e:	bf28      	it	cs
 23f5d30:	4647      	movcs	r7, r8
 23f5d32:	f001 fb82 	bl	23f743a <_ZN7FsCache7prepareEmh>
      if (!cache) {
 23f5d36:	2800      	cmp	r0, #0
 23f5d38:	d0e8      	beq.n	23f5d0c <_ZN9ExFatFile4readEPvj+0xe8>
      memcpy(dst, src, n);
 23f5d3a:	eb00 010b 	add.w	r1, r0, fp
 23f5d3e:	463a      	mov	r2, r7
 23f5d40:	4648      	mov	r0, r9
 23f5d42:	f007 f857 	bl	23fcdf4 <memcpy>
    m_curPosition += n;
 23f5d46:	e9d4 3200 	ldrd	r3, r2, [r4]
 23f5d4a:	19db      	adds	r3, r3, r7
 23f5d4c:	f142 0200 	adc.w	r2, r2, #0
 23f5d50:	e9c4 3200 	strd	r3, r2, [r4]
    dst += n;
 23f5d54:	44b9      	add	r9, r7
    toRead -= n;
 23f5d56:	eba8 0807 	sub.w	r8, r8, r7
  while (toRead) {
 23f5d5a:	e786      	b.n	23f5c6a <_ZN9ExFatFile4readEPvj+0x46>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
 23f5d5c:	2101      	movs	r1, #1
 23f5d5e:	fa01 f000 	lsl.w	r0, r1, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
 23f5d62:	ea4f 2758 	mov.w	r7, r8, lsr #9
                       (clusterOffset >> m_vol->bytesPerSectorShift());
 23f5d66:	eba0 030c 	sub.w	r3, r0, ip
 23f5d6a:	42bb      	cmp	r3, r7
 23f5d6c:	bf28      	it	cs
 23f5d6e:	463b      	movcs	r3, r7
    return sector <= m_sector && m_sector < (sector + count);
 23f5d70:	4295      	cmp	r5, r2
      n = ns << m_vol->bytesPerSectorShift();
 23f5d72:	ea4f 2743 	mov.w	r7, r3, lsl #9
 23f5d76:	d908      	bls.n	23f5d8a <_ZN9ExFatFile4readEPvj+0x166>
    return m_blockDev->readSectors(sector, dst, count);
 23f5d78:	464a      	mov	r2, r9
 23f5d7a:	4629      	mov	r1, r5
 23f5d7c:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
 23f5d80:	f7ff fbea 	bl	23f5558 <_ZN9SdSpiCard11readSectorsEmPhj>
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
 23f5d84:	2800      	cmp	r0, #0
 23f5d86:	d1de      	bne.n	23f5d46 <_ZN9ExFatFile4readEPvj+0x122>
 23f5d88:	e7c0      	b.n	23f5d0c <_ZN9ExFatFile4readEPvj+0xe8>
    return sector <= m_sector && m_sector < (sector + count);
 23f5d8a:	18e9      	adds	r1, r5, r3
 23f5d8c:	428a      	cmp	r2, r1
 23f5d8e:	d2f3      	bcs.n	23f5d78 <_ZN9ExFatFile4readEPvj+0x154>
    if (isCached(sector, count) && !sync()) {
 23f5d90:	f50a 7004 	add.w	r0, sl, #528	; 0x210
 23f5d94:	9301      	str	r3, [sp, #4]
 23f5d96:	f001 fb2a 	bl	23f73ee <_ZN7FsCache4syncEv>
 23f5d9a:	9b01      	ldr	r3, [sp, #4]
 23f5d9c:	2800      	cmp	r0, #0
 23f5d9e:	d1eb      	bne.n	23f5d78 <_ZN9ExFatFile4readEPvj+0x154>
 23f5da0:	e7b4      	b.n	23f5d0c <_ZN9ExFatFile4readEPvj+0xe8>
  return count - toRead;
 23f5da2:	eba6 0008 	sub.w	r0, r6, r8
}
 23f5da6:	b003      	add	sp, #12
 23f5da8:	ecbd 8b02 	vpop	{d8}
 23f5dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023f5db0 <_ZN9ExFatFile4peekEv>:
int ExFatFile::peek() {
 23f5db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 23f5db2:	2201      	movs	r2, #1
  uint64_t saveCurPosition = m_curPosition;
 23f5db4:	e9d0 6700 	ldrd	r6, r7, [r0]
 23f5db8:	f10d 0107 	add.w	r1, sp, #7
int ExFatFile::peek() {
 23f5dbc:	4604      	mov	r4, r0
  uint32_t saveCurCluster = m_curCluster;
 23f5dbe:	6985      	ldr	r5, [r0, #24]
 23f5dc0:	f7ff ff30 	bl	23f5c24 <_ZN9ExFatFile4readEPvj>
 23f5dc4:	2801      	cmp	r0, #1
 23f5dc6:	bf14      	ite	ne
 23f5dc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23f5dcc:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curPosition = saveCurPosition;
 23f5dd0:	e9c4 6700 	strd	r6, r7, [r4]
  m_curCluster = saveCurCluster;
 23f5dd4:	61a5      	str	r5, [r4, #24]
}
 23f5dd6:	b003      	add	sp, #12
 23f5dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f5dda <_ZN9ExFatFile7seekSetEy>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
 23f5dda:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f5dde:	461f      	mov	r7, r3
  bool isOpen() const { return m_attributes; }
 23f5de0:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 23f5de4:	4604      	mov	r4, r0
 23f5de6:	4616      	mov	r6, r2
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 23f5de8:	f8d0 8018 	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
 23f5dec:	2b00      	cmp	r3, #0
 23f5dee:	d05b      	beq.n	23f5ea8 <_ZN9ExFatFile7seekSetEy+0xce>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 23f5df0:	e9d0 0c00 	ldrd	r0, ip, [r0]
 23f5df4:	45bc      	cmp	ip, r7
 23f5df6:	bf08      	it	eq
 23f5df8:	4290      	cmpeq	r0, r2
 23f5dfa:	d006      	beq.n	23f5e0a <_ZN9ExFatFile7seekSetEy+0x30>
    return true;
  }
  if (pos == 0) {
 23f5dfc:	ea56 0207 	orrs.w	r2, r6, r7
 23f5e00:	d105      	bne.n	23f5e0e <_ZN9ExFatFile7seekSetEy+0x34>
    // set position to start of file
    m_curCluster = 0;
 23f5e02:	2300      	movs	r3, #0
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
 23f5e04:	61a3      	str	r3, [r4, #24]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 23f5e06:	e9c4 6700 	strd	r6, r7, [r4]
    return true;
 23f5e0a:	2001      	movs	r0, #1
 23f5e0c:	e04f      	b.n	23f5eae <_ZN9ExFatFile7seekSetEy+0xd4>
  if (isFile()) {
 23f5e0e:	071a      	lsls	r2, r3, #28
 23f5e10:	d504      	bpl.n	23f5e1c <_ZN9ExFatFile7seekSetEy+0x42>
    if (pos > m_validLength) {
 23f5e12:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 23f5e16:	42b1      	cmp	r1, r6
 23f5e18:	41ba      	sbcs	r2, r7
 23f5e1a:	d345      	bcc.n	23f5ea8 <_ZN9ExFatFile7seekSetEy+0xce>
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
 23f5e1c:	f8d4 e020 	ldr.w	lr, [r4, #32]
 23f5e20:	1e75      	subs	r5, r6, #1
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
 23f5e22:	f89e 1445 	ldrb.w	r1, [lr, #1093]	; 0x445
 23f5e26:	f147 3aff 	adc.w	sl, r7, #4294967295	; 0xffffffff
 23f5e2a:	3109      	adds	r1, #9
 23f5e2c:	b2c9      	uxtb	r1, r1
 23f5e2e:	f1c1 0920 	rsb	r9, r1, #32
 23f5e32:	fa0a f909 	lsl.w	r9, sl, r9
 23f5e36:	f1a1 0220 	sub.w	r2, r1, #32
 23f5e3a:	40cd      	lsrs	r5, r1
 23f5e3c:	fa2a f202 	lsr.w	r2, sl, r2
 23f5e40:	ea45 0509 	orr.w	r5, r5, r9
 23f5e44:	4315      	orrs	r5, r2
  if (isContiguous()) {
 23f5e46:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
 23f5e4a:	f1c1 0920 	rsb	r9, r1, #32
 23f5e4e:	f012 0f40 	tst.w	r2, #64	; 0x40
 23f5e52:	f1a1 0a20 	sub.w	sl, r1, #32
 23f5e56:	d002      	beq.n	23f5e5e <_ZN9ExFatFile7seekSetEy+0x84>
    m_curCluster = m_firstCluster + nNew;
 23f5e58:	69e3      	ldr	r3, [r4, #28]
 23f5e5a:	442b      	add	r3, r5
 23f5e5c:	e7d2      	b.n	23f5e04 <_ZN9ExFatFile7seekSetEy+0x2a>
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
 23f5e5e:	f110 3bff 	adds.w	fp, r0, #4294967295	; 0xffffffff
 23f5e62:	f14c 32ff 	adc.w	r2, ip, #4294967295	; 0xffffffff
 23f5e66:	fa02 f909 	lsl.w	r9, r2, r9
 23f5e6a:	fa2b f101 	lsr.w	r1, fp, r1
 23f5e6e:	ea41 0109 	orr.w	r1, r1, r9
 23f5e72:	fa22 f20a 	lsr.w	r2, r2, sl
 23f5e76:	4311      	orrs	r1, r2
  if (nNew < nCur || m_curPosition == 0) {
 23f5e78:	428d      	cmp	r5, r1
 23f5e7a:	d302      	bcc.n	23f5e82 <_ZN9ExFatFile7seekSetEy+0xa8>
 23f5e7c:	ea50 020c 	orrs.w	r2, r0, ip
 23f5e80:	d117      	bne.n	23f5eb2 <_ZN9ExFatFile7seekSetEy+0xd8>
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
 23f5e82:	065b      	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
 23f5e84:	bf4c      	ite	mi
 23f5e86:	f8de 3434 	ldrmi.w	r3, [lr, #1076]	; 0x434
 23f5e8a:	69e3      	ldrpl	r3, [r4, #28]
 23f5e8c:	61a3      	str	r3, [r4, #24]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 23f5e8e:	f104 0918 	add.w	r9, r4, #24
  while (nNew--) {
 23f5e92:	2d00      	cmp	r5, #0
 23f5e94:	d0b7      	beq.n	23f5e06 <_ZN9ExFatFile7seekSetEy+0x2c>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 23f5e96:	464a      	mov	r2, r9
 23f5e98:	69a1      	ldr	r1, [r4, #24]
 23f5e9a:	6a20      	ldr	r0, [r4, #32]
 23f5e9c:	f000 ff04 	bl	23f6ca8 <_ZN14ExFatPartition6fatGetEmPm>
 23f5ea0:	2800      	cmp	r0, #0
 23f5ea2:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 23f5ea6:	dcf4      	bgt.n	23f5e92 <_ZN9ExFatFile7seekSetEy+0xb8>
  return true;

fail:
  m_curCluster = tmp;
  return false;
 23f5ea8:	2000      	movs	r0, #0
  m_curCluster = tmp;
 23f5eaa:	f8c4 8018 	str.w	r8, [r4, #24]
}
 23f5eae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
 23f5eb2:	1a6d      	subs	r5, r5, r1
 23f5eb4:	e7eb      	b.n	23f5e8e <_ZN9ExFatFile7seekSetEy+0xb4>
	...

023f5eb8 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
 23f5eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f5ebc:	4699      	mov	r9, r3
 23f5ebe:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 23f5ec2:	4604      	mov	r4, r0
 23f5ec4:	460e      	mov	r6, r1
 23f5ec6:	4615      	mov	r5, r2
 23f5ec8:	b08d      	sub	sp, #52	; 0x34
  if (isOpen() || !dir->isDir()) {
 23f5eca:	2b00      	cmp	r3, #0
 23f5ecc:	d141      	bne.n	23f5f52 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
 23f5ece:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 23f5ed2:	f013 0f50 	tst.w	r3, #80	; 0x50
 23f5ed6:	d03c      	beq.n	23f5f52 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
  switch (oflag & O_ACCMODE) {
 23f5ed8:	f009 0303 	and.w	r3, r9, #3
 23f5edc:	2b03      	cmp	r3, #3
 23f5ede:	d038      	beq.n	23f5f52 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
 23f5ee0:	f009 0a08 	and.w	sl, r9, #8
 23f5ee4:	3301      	adds	r3, #1
 23f5ee6:	ea4a 0a03 	orr.w	sl, sl, r3
  if (fname) {
 23f5eea:	2a00      	cmp	r2, #0
 23f5eec:	d038      	beq.n	23f5f60 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xa8>
    freeNeed = 2 + (fname->nameLength + 14) / 15;
 23f5eee:	230f      	movs	r3, #15
 23f5ef0:	68d7      	ldr	r7, [r2, #12]
   *
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() { seekSet(0); }
 23f5ef2:	4608      	mov	r0, r1
 23f5ef4:	370e      	adds	r7, #14
 23f5ef6:	fbb7 f7f3 	udiv	r7, r7, r3
 23f5efa:	2200      	movs	r2, #0
 23f5efc:	3702      	adds	r7, #2
 23f5efe:	2300      	movs	r3, #0
 23f5f00:	b2ff      	uxtb	r7, r7
 23f5f02:	f7ff ff6a 	bl	23f5dda <_ZN9ExFatFile7seekSetEy>
      inSet = false;
 23f5f06:	f04f 0b00 	mov.w	fp, #0
 23f5f0a:	46d8      	mov	r8, fp
    n = dir->read(buf, FS_DIR_SIZE);
 23f5f0c:	2220      	movs	r2, #32
 23f5f0e:	4630      	mov	r0, r6
 23f5f10:	a904      	add	r1, sp, #16
 23f5f12:	f7ff fe87 	bl	23f5c24 <_ZN9ExFatFile4readEPvj>
    if (n == 0) {
 23f5f16:	2800      	cmp	r0, #0
 23f5f18:	f000 80c6 	beq.w	23f60a8 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x1f0>
    if (n != FS_DIR_SIZE) {
 23f5f1c:	2820      	cmp	r0, #32
 23f5f1e:	d118      	bne.n	23f5f52 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
    if (!(buf[0] & EXFAT_TYPE_USED)) {
 23f5f20:	f99d 1010 	ldrsb.w	r1, [sp, #16]
 23f5f24:	f89d 2010 	ldrb.w	r2, [sp, #16]
 23f5f28:	2900      	cmp	r1, #0
 23f5f2a:	db1e      	blt.n	23f5f6a <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xb2>
      if (freeCount == 0) {
 23f5f2c:	f1bb 0f00 	cmp.w	fp, #0
 23f5f30:	d105      	bne.n	23f5f3e <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x86>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
 23f5f32:	6831      	ldr	r1, [r6, #0]
 23f5f34:	f1a1 0320 	sub.w	r3, r1, #32
 23f5f38:	9300      	str	r3, [sp, #0]
  uint32_t curCluster() const { return m_curCluster; }
 23f5f3a:	69b3      	ldr	r3, [r6, #24]
 23f5f3c:	9301      	str	r3, [sp, #4]
      if (freeCount < freeNeed) {
 23f5f3e:	45bb      	cmp	fp, r7
        freeCount++;
 23f5f40:	bf3c      	itt	cc
 23f5f42:	f10b 0301 	addcc.w	r3, fp, #1
 23f5f46:	fa5f fb83 	uxtbcc.w	fp, r3
      if (buf[0] == EXFAT_TYPE_END_DIR) {
 23f5f4a:	b95a      	cbnz	r2, 23f5f64 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xac>
        if (fname) {
 23f5f4c:	2d00      	cmp	r5, #0
 23f5f4e:	f040 80ab 	bne.w	23f60a8 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x1f0>
  m_attributes = FILE_ATTR_CLOSED;
 23f5f52:	f04f 0800 	mov.w	r8, #0
 23f5f56:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
 23f5f5a:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
  return false;
 23f5f5e:	e06d      	b.n	23f603c <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x184>
  uint8_t freeNeed = 3;
 23f5f60:	2703      	movs	r7, #3
 23f5f62:	e7d0      	b.n	23f5f06 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x4e>
      inSet = false;
 23f5f64:	2000      	movs	r0, #0
 23f5f66:	4680      	mov	r8, r0
 23f5f68:	e7d0      	b.n	23f5f0c <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x54>
    } else if (!inSet) {
 23f5f6a:	f1b8 0f00 	cmp.w	r8, #0
 23f5f6e:	d127      	bne.n	23f5fc0 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x108>
        freeCount = 0;
 23f5f70:	45bb      	cmp	fp, r7
 23f5f72:	bf38      	it	cc
 23f5f74:	f04f 0b00 	movcc.w	fp, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
 23f5f78:	2a85      	cmp	r2, #133	; 0x85
 23f5f7a:	d1f3      	bne.n	23f5f64 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xac>
      memset(this, 0, sizeof(ExFatFile));
 23f5f7c:	2238      	movs	r2, #56	; 0x38
 23f5f7e:	4641      	mov	r1, r8
 23f5f80:	4620      	mov	r0, r4
 23f5f82:	f006 ff44 	bl	23fce0e <memset>
      m_setCount = dirFile->setCount;
 23f5f86:	f89d 2011 	ldrb.w	r2, [sp, #17]
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
 23f5f8a:	f89d 1014 	ldrb.w	r1, [sp, #20]
      m_setCount = dirFile->setCount;
 23f5f8e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
 23f5f92:	f001 0237 	and.w	r2, r1, #55	; 0x37
      if (!(m_attributes & FS_ATTRIB_DIRECTORY)) {
 23f5f96:	06c9      	lsls	r1, r1, #27
        m_attributes |= FILE_ATTR_FILE;
 23f5f98:	bf58      	it	pl
 23f5f9a:	f042 0208 	orrpl.w	r2, r2, #8
 23f5f9e:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
  bool hashName(ExName_t* fname);
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path, ExName_t* fname, const char** ptr);
  ExFatVolume* volume() const { return m_vol; }
 23f5fa2:	6a32      	ldr	r2, [r6, #32]
      inSet = true;
 23f5fa4:	2001      	movs	r0, #1
      m_vol = dir->volume();
 23f5fa6:	6222      	str	r2, [r4, #32]
  uint32_t curCluster() const { return m_curCluster; }
 23f5fa8:	69b2      	ldr	r2, [r6, #24]
      m_dirPos.cluster = dir->curCluster();
 23f5faa:	6262      	str	r2, [r4, #36]	; 0x24
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
 23f5fac:	6832      	ldr	r2, [r6, #0]
 23f5fae:	3a20      	subs	r2, #32
 23f5fb0:	62a2      	str	r2, [r4, #40]	; 0x28
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
 23f5fb2:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
 23f5fb6:	f3c2 1280 	ubfx	r2, r2, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
 23f5fba:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
 23f5fbe:	e7d2      	b.n	23f5f66 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xae>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
 23f5fc0:	2ac0      	cmp	r2, #192	; 0xc0
 23f5fc2:	d150      	bne.n	23f6066 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x1ae>
      m_validLength = getLe64(dirStream->validLength);
 23f5fc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
 23f5fc8:	f89d 2011 	ldrb.w	r2, [sp, #17]
      m_flags = modeFlags;
 23f5fcc:	f884 a033 	strb.w	sl, [r4, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
 23f5fd0:	0793      	lsls	r3, r2, #30
        m_flags |= FILE_FLAG_CONTIGUOUS;
 23f5fd2:	bf44      	itt	mi
 23f5fd4:	f04a 0240 	orrmi.w	r2, sl, #64	; 0x40
 23f5fd8:	f884 2033 	strbmi.w	r2, [r4, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
 23f5fdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
      m_validLength = getLe64(dirStream->validLength);
 23f5fde:	e9c4 0104 	strd	r0, r1, [r4, #16]
      m_dataLength = getLe64(dirStream->dataLength);
 23f5fe2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
      m_firstCluster = getLe32(dirStream->firstCluster);
 23f5fe6:	61e2      	str	r2, [r4, #28]
      m_dataLength = getLe64(dirStream->dataLength);
 23f5fe8:	e9c4 0102 	strd	r0, r1, [r4, #8]
      if (!fname) {
 23f5fec:	bb55      	cbnz	r5, 23f6044 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x18c>
  if (oflag & O_EXCL) {
 23f5fee:	f419 6f00 	tst.w	r9, #2048	; 0x800
 23f5ff2:	d1ae      	bne.n	23f5f52 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
 23f5ff4:	f419 4f88 	tst.w	r9, #17408	; 0x4400
 23f5ff8:	d103      	bne.n	23f6002 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x14a>
 23f5ffa:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 23f5ffe:	079d      	lsls	r5, r3, #30
 23f6000:	d505      	bpl.n	23f600e <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x156>
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
 23f6002:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
 23f6006:	06d8      	lsls	r0, r3, #27
 23f6008:	d4a3      	bmi.n	23f5f52 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
 23f600a:	07d9      	lsls	r1, r3, #31
 23f600c:	d4a1      	bmi.n	23f5f52 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
  if (oflag & O_TRUNC) {
 23f600e:	f419 6f80 	tst.w	r9, #1024	; 0x400
 23f6012:	d039      	beq.n	23f6088 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x1d0>
    if (!(m_flags & FILE_FLAG_WRITE)) {
 23f6014:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 23f6018:	079a      	lsls	r2, r3, #30
 23f601a:	d59a      	bpl.n	23f5f52 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
  bool truncate(uint64_t length) { return seekSet(length) && truncate(); }
 23f601c:	2200      	movs	r2, #0
 23f601e:	2300      	movs	r3, #0
 23f6020:	4620      	mov	r0, r4
 23f6022:	f7ff feda 	bl	23f5dda <_ZN9ExFatFile7seekSetEy>
 23f6026:	2800      	cmp	r0, #0
 23f6028:	d093      	beq.n	23f5f52 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
 23f602a:	4620      	mov	r0, r4
 23f602c:	f000 fbc2 	bl	23f67b4 <_ZN9ExFatFile8truncateEv>
 23f6030:	2800      	cmp	r0, #0
 23f6032:	d08e      	beq.n	23f5f52 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
  if (isWritable()) {
 23f6034:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 23f6038:	079b      	lsls	r3, r3, #30
 23f603a:	d42e      	bmi.n	23f609a <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x1e2>
}
 23f603c:	4640      	mov	r0, r8
 23f603e:	b00d      	add	sp, #52	; 0x34
 23f6040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const char* end;
#if !USE_UTF8_LONG_NAMES
  /** \return true if at end. */
  bool atEnd() { return next == end; }
  /** Reset to start of LFN. */
  void reset() { next = begin; }
 23f6044:	682a      	ldr	r2, [r5, #0]
      if (fname->nameLength != dirStream->nameLength ||
 23f6046:	68e9      	ldr	r1, [r5, #12]
 23f6048:	606a      	str	r2, [r5, #4]
 23f604a:	f89d 2013 	ldrb.w	r2, [sp, #19]
 23f604e:	4291      	cmp	r1, r2
 23f6050:	d188      	bne.n	23f5f64 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xac>
 23f6052:	8a28      	ldrh	r0, [r5, #16]
 23f6054:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 23f6058:	eba0 0c02 	sub.w	ip, r0, r2
 23f605c:	f1dc 0000 	rsbs	r0, ip, #0
 23f6060:	eb40 000c 	adc.w	r0, r0, ip
 23f6064:	e77f      	b.n	23f5f66 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xae>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
 23f6066:	2ac1      	cmp	r2, #193	; 0xc1
 23f6068:	f47f af7c 	bne.w	23f5f64 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xac>
      if (!cmpName(dirName, fname)) {
 23f606c:	462a      	mov	r2, r5
 23f606e:	4620      	mov	r0, r4
 23f6070:	a904      	add	r1, sp, #16
 23f6072:	f000 fd0b 	bl	23f6a8c <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t>
 23f6076:	2800      	cmp	r0, #0
 23f6078:	f43f af75 	beq.w	23f5f66 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xae>
      if (fname->atEnd()) {
 23f607c:	e9d5 2101 	ldrd	r2, r1, [r5, #4]
 23f6080:	4291      	cmp	r1, r2
 23f6082:	f47f af70 	bne.w	23f5f66 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xae>
 23f6086:	e7b2      	b.n	23f5fee <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x136>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
 23f6088:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 23f608c:	d0d2      	beq.n	23f6034 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x17c>
 23f608e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 23f6092:	4620      	mov	r0, r4
 23f6094:	f7ff fea1 	bl	23f5dda <_ZN9ExFatFile7seekSetEy>
 23f6098:	e7ca      	b.n	23f6030 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x178>
    m_attributes |= FS_ATTRIB_ARCHIVE;
 23f609a:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 23f609e:	f043 0320 	orr.w	r3, r3, #32
 23f60a2:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
 23f60a6:	e7c9      	b.n	23f603c <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x184>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
 23f60a8:	f419 7f00 	tst.w	r9, #512	; 0x200
 23f60ac:	f43f af51 	beq.w	23f5f52 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
 23f60b0:	f01a 0f02 	tst.w	sl, #2
 23f60b4:	f43f af4d 	beq.w	23f5f52 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
 23f60b8:	2d00      	cmp	r5, #0
 23f60ba:	f43f af4a 	beq.w	23f5f52 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
  while (freeCount < freeNeed) {
 23f60be:	45bb      	cmp	fp, r7
 23f60c0:	d221      	bcs.n	23f6106 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x24e>
    n = dir->read(buf, FS_DIR_SIZE);
 23f60c2:	2220      	movs	r2, #32
 23f60c4:	4630      	mov	r0, r6
 23f60c6:	a904      	add	r1, sp, #16
 23f60c8:	f7ff fdac 	bl	23f5c24 <_ZN9ExFatFile4readEPvj>
    if (n == 0) {
 23f60cc:	b950      	cbnz	r0, 23f60e4 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x22c>
      if (!dir->addDirCluster()) {
 23f60ce:	4630      	mov	r0, r6
      uint32_t saveCurCluster = dir->m_curCluster;
 23f60d0:	f8d6 8018 	ldr.w	r8, [r6, #24]
      if (!dir->addDirCluster()) {
 23f60d4:	f000 fa45 	bl	23f6562 <_ZN9ExFatFile13addDirClusterEv>
 23f60d8:	2800      	cmp	r0, #0
 23f60da:	f43f af3a 	beq.w	23f5f52 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
      dir->m_curCluster = saveCurCluster;
 23f60de:	f8c6 8018 	str.w	r8, [r6, #24]
      continue;
 23f60e2:	e7ec      	b.n	23f60be <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x206>
    if (n != FS_DIR_SIZE) {
 23f60e4:	2820      	cmp	r0, #32
 23f60e6:	f47f af34 	bne.w	23f5f52 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
    if (freeCount == 0) {
 23f60ea:	f1bb 0f00 	cmp.w	fp, #0
 23f60ee:	d105      	bne.n	23f60fc <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x244>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
 23f60f0:	6832      	ldr	r2, [r6, #0]
 23f60f2:	f1a2 0320 	sub.w	r3, r2, #32
 23f60f6:	9300      	str	r3, [sp, #0]
  uint32_t curCluster() const { return m_curCluster; }
 23f60f8:	69b3      	ldr	r3, [r6, #24]
 23f60fa:	9301      	str	r3, [sp, #4]
    freeCount++;
 23f60fc:	f10b 0301 	add.w	r3, fp, #1
 23f6100:	fa5f fb83 	uxtb.w	fp, r3
 23f6104:	e7db      	b.n	23f60be <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x206>
  memset(this, 0, sizeof(ExFatFile));
 23f6106:	2238      	movs	r2, #56	; 0x38
 23f6108:	2100      	movs	r1, #0
 23f610a:	4620      	mov	r0, r4
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
 23f610c:	f896 8033 	ldrb.w	r8, [r6, #51]	; 0x33
 23f6110:	f006 fe7d 	bl	23fce0e <memset>
  ExFatVolume* volume() const { return m_vol; }
 23f6114:	6a33      	ldr	r3, [r6, #32]
 23f6116:	f04f 0900 	mov.w	r9, #0
  m_vol = dir->volume();
 23f611a:	6223      	str	r3, [r4, #32]
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
 23f611c:	2328      	movs	r3, #40	; 0x28
 23f611e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_dirPos = freePos;
 23f6122:	9b01      	ldr	r3, [sp, #4]
  freePos.isContiguous = dir->isContiguous();
 23f6124:	f3c8 1880 	ubfx	r8, r8, #6, #1
  m_dirPos = freePos;
 23f6128:	6263      	str	r3, [r4, #36]	; 0x24
 23f612a:	9b00      	ldr	r3, [sp, #0]
 23f612c:	f884 802c 	strb.w	r8, [r4, #44]	; 0x2c
 23f6130:	62a3      	str	r3, [r4, #40]	; 0x28
 23f6132:	682b      	ldr	r3, [r5, #0]
      m_setCount = freeNeed - 1;
 23f6134:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
 23f6138:	606b      	str	r3, [r5, #4]
 23f613a:	fa5f f888 	uxtb.w	r8, r8
 23f613e:	fa5f fb89 	uxtb.w	fp, r9
  for (uint8_t i = 0; i < freeNeed; i++) {
 23f6142:	45bb      	cmp	fp, r7
 23f6144:	d255      	bcs.n	23f61f2 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x33a>
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
 23f6146:	2201      	movs	r2, #1
 23f6148:	4659      	mov	r1, fp
 23f614a:	4620      	mov	r0, r4
 23f614c:	f7ff fcf6 	bl	23f5b3c <_ZN9ExFatFile8dirCacheEhh>
    if (!cache || (cache[0] & 0x80)) {
 23f6150:	4606      	mov	r6, r0
 23f6152:	2800      	cmp	r0, #0
 23f6154:	f43f aefd 	beq.w	23f5f52 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
 23f6158:	f990 2000 	ldrsb.w	r2, [r0]
 23f615c:	2a00      	cmp	r2, #0
 23f615e:	f6ff aef8 	blt.w	23f5f52 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
    memset(cache, 0, FS_DIR_SIZE);
 23f6162:	2220      	movs	r2, #32
 23f6164:	2100      	movs	r1, #0
 23f6166:	f006 fe52 	bl	23fce0e <memset>
    if (i == 0) {
 23f616a:	f1bb 0f00 	cmp.w	fp, #0
 23f616e:	d120      	bne.n	23f61b2 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x2fa>
      dirFile->type = EXFAT_TYPE_FILE;
 23f6170:	2385      	movs	r3, #133	; 0x85
 23f6172:	7033      	strb	r3, [r6, #0]
      if (FsDateTime::callback) {
 23f6174:	4b21      	ldr	r3, [pc, #132]	; (23f61fc <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x344>)
      m_setCount = freeNeed - 1;
 23f6176:	f884 8030 	strb.w	r8, [r4, #48]	; 0x30
      dirFile->setCount = m_setCount;
 23f617a:	f886 8001 	strb.w	r8, [r6, #1]
      if (FsDateTime::callback) {
 23f617e:	681b      	ldr	r3, [r3, #0]
 23f6180:	b18b      	cbz	r3, 23f61a6 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x2ee>
        FsDateTime::callback(&date, &time, &ms10);
 23f6182:	f10d 020b 	add.w	r2, sp, #11
 23f6186:	f10d 010e 	add.w	r1, sp, #14
 23f618a:	a803      	add	r0, sp, #12
 23f618c:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
 23f618e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 23f6192:	8173      	strh	r3, [r6, #10]
 23f6194:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 23f6198:	8133      	strh	r3, [r6, #8]
        dirFile->createTimeMs = ms10;
 23f619a:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23f619e:	7533      	strb	r3, [r6, #20]
  for (uint8_t i = 0; i < freeNeed; i++) {
 23f61a0:	f109 0901 	add.w	r9, r9, #1
 23f61a4:	e7cb      	b.n	23f613e <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x286>
 23f61a6:	f645 2321 	movw	r3, #23073	; 0x5a21
 23f61aa:	8173      	strh	r3, [r6, #10]
 23f61ac:	81f3      	strh	r3, [r6, #14]
 23f61ae:	8273      	strh	r3, [r6, #18]
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59
 23f61b0:	e7f6      	b.n	23f61a0 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x2e8>
    } else if (i == 1) {
 23f61b2:	f1bb 0f01 	cmp.w	fp, #1
 23f61b6:	d10c      	bne.n	23f61d2 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x31a>
      dirStream->type = EXFAT_TYPE_STREAM;
 23f61b8:	22c0      	movs	r2, #192	; 0xc0
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
 23f61ba:	f06a 037f 	orn	r3, sl, #127	; 0x7f
      dirStream->type = EXFAT_TYPE_STREAM;
 23f61be:	7032      	strb	r2, [r6, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
 23f61c0:	f886 b001 	strb.w	fp, [r6, #1]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
 23f61c4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
 23f61c8:	68eb      	ldr	r3, [r5, #12]
 23f61ca:	70f3      	strb	r3, [r6, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
 23f61cc:	8a2b      	ldrh	r3, [r5, #16]
 23f61ce:	80b3      	strh	r3, [r6, #4]
}
 23f61d0:	e7e6      	b.n	23f61a0 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x2e8>
      dirName->type = EXFAT_TYPE_NAME;
 23f61d2:	23c1      	movs	r3, #193	; 0xc1
 23f61d4:	f106 021e 	add.w	r2, r6, #30
 23f61d8:	7033      	strb	r3, [r6, #0]
        if (fname->atEnd()) {
 23f61da:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
 23f61de:	428b      	cmp	r3, r1
 23f61e0:	d0de      	beq.n	23f61a0 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x2e8>
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() { return atEnd() ? 0 : *next++; }
 23f61e2:	1c59      	adds	r1, r3, #1
 23f61e4:	6069      	str	r1, [r5, #4]
 23f61e6:	781b      	ldrb	r3, [r3, #0]
 23f61e8:	f826 3f02 	strh.w	r3, [r6, #2]!
      for (size_t k = 0; k < 15; k++) {
 23f61ec:	42b2      	cmp	r2, r6
 23f61ee:	d1f4      	bne.n	23f61da <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x322>
 23f61f0:	e7d6      	b.n	23f61a0 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x2e8>
  return sync();
 23f61f2:	4620      	mov	r0, r4
 23f61f4:	f000 f994 	bl	23f6520 <_ZN9ExFatFile4syncEv>
 23f61f8:	4680      	mov	r8, r0
 23f61fa:	e71f      	b.n	23f603c <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x184>
 23f61fc:	1007aeac 	.word	0x1007aeac

023f6200 <_ZN9ExFatFile4openEPS_PKci>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
 23f6200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f6204:	4698      	mov	r8, r3
  ExFatFile() {}
 23f6206:	2300      	movs	r3, #0
 23f6208:	b096      	sub	sp, #88	; 0x58
 23f620a:	9314      	str	r3, [sp, #80]	; 0x50
  if (isOpen() || !dirFile->isDir()) {
 23f620c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
 23f6210:	4605      	mov	r5, r0
 23f6212:	460c      	mov	r4, r1
 23f6214:	9201      	str	r2, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
 23f6216:	b11b      	cbz	r3, 23f6220 <_ZN9ExFatFile4openEPS_PKci+0x20>
  return false;
 23f6218:	2000      	movs	r0, #0
}
 23f621a:	b016      	add	sp, #88	; 0x58
 23f621c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isOpen() || !dirFile->isDir()) {
 23f6220:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 23f6224:	f013 0f50 	tst.w	r3, #80	; 0x50
 23f6228:	d0f6      	beq.n	23f6218 <_ZN9ExFatFile4openEPS_PKci+0x18>
  if (isDirSeparator(*path)) {
 23f622a:	7813      	ldrb	r3, [r2, #0]
 23f622c:	2b2f      	cmp	r3, #47	; 0x2f
 23f622e:	d11a      	bne.n	23f6266 <_ZN9ExFatFile4openEPS_PKci+0x66>
    while (isDirSeparator(*path)) {
 23f6230:	9a01      	ldr	r2, [sp, #4]
 23f6232:	7813      	ldrb	r3, [r2, #0]
 23f6234:	2b2f      	cmp	r3, #47	; 0x2f
 23f6236:	d102      	bne.n	23f623e <_ZN9ExFatFile4openEPS_PKci+0x3e>
      path++;
 23f6238:	3201      	adds	r2, #1
 23f623a:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
 23f623c:	e7f8      	b.n	23f6230 <_ZN9ExFatFile4openEPS_PKci+0x30>
      return openRoot(dirFile->m_vol);
 23f623e:	6a24      	ldr	r4, [r4, #32]
    if (*path == 0) {
 23f6240:	b923      	cbnz	r3, 23f624c <_ZN9ExFatFile4openEPS_PKci+0x4c>
      return openRoot(dirFile->m_vol);
 23f6242:	4621      	mov	r1, r4
 23f6244:	4628      	mov	r0, r5
 23f6246:	f7ff fc9f 	bl	23f5b88 <_ZN9ExFatFile8openRootEP11ExFatVolume>
 23f624a:	e7e6      	b.n	23f621a <_ZN9ExFatFile4openEPS_PKci+0x1a>
  memset(this, 0, sizeof(ExFatFile));
 23f624c:	2238      	movs	r2, #56	; 0x38
 23f624e:	2100      	movs	r1, #0
 23f6250:	a808      	add	r0, sp, #32
 23f6252:	f006 fddc 	bl	23fce0e <memset>
  m_attributes = FILE_ATTR_ROOT;
 23f6256:	2340      	movs	r3, #64	; 0x40
 23f6258:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  m_flags = FILE_FLAG_READ;
 23f625c:	2301      	movs	r3, #1
  m_vol = vol;
 23f625e:	9410      	str	r4, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
 23f6260:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    dirFile = &tmpDir;
 23f6264:	ac08      	add	r4, sp, #32
    if (!parsePathName(path, &fname, &path)) {
 23f6266:	4628      	mov	r0, r5
 23f6268:	9901      	ldr	r1, [sp, #4]
 23f626a:	ab01      	add	r3, sp, #4
 23f626c:	aa03      	add	r2, sp, #12
 23f626e:	f7ff fc9f 	bl	23f5bb0 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_>
 23f6272:	2800      	cmp	r0, #0
 23f6274:	d0d0      	beq.n	23f6218 <_ZN9ExFatFile4openEPS_PKci+0x18>
    if (*path == 0) {
 23f6276:	9b01      	ldr	r3, [sp, #4]
 23f6278:	781b      	ldrb	r3, [r3, #0]
 23f627a:	b1d3      	cbz	r3, 23f62b2 <_ZN9ExFatFile4openEPS_PKci+0xb2>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
 23f627c:	2300      	movs	r3, #0
 23f627e:	4621      	mov	r1, r4
 23f6280:	4628      	mov	r0, r5
 23f6282:	aa03      	add	r2, sp, #12
 23f6284:	f7ff fe18 	bl	23f5eb8 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti>
 23f6288:	2800      	cmp	r0, #0
 23f628a:	d0c5      	beq.n	23f6218 <_ZN9ExFatFile4openEPS_PKci+0x18>
      *this = *from;
 23f628c:	ae08      	add	r6, sp, #32
 23f628e:	462a      	mov	r2, r5
 23f6290:	4634      	mov	r4, r6
 23f6292:	f105 0330 	add.w	r3, r5, #48	; 0x30
 23f6296:	4637      	mov	r7, r6
 23f6298:	6810      	ldr	r0, [r2, #0]
 23f629a:	6851      	ldr	r1, [r2, #4]
 23f629c:	3208      	adds	r2, #8
 23f629e:	c703      	stmia	r7!, {r0, r1}
 23f62a0:	429a      	cmp	r2, r3
 23f62a2:	463e      	mov	r6, r7
 23f62a4:	d1f7      	bne.n	23f6296 <_ZN9ExFatFile4openEPS_PKci+0x96>
 23f62a6:	6810      	ldr	r0, [r2, #0]
 23f62a8:	6038      	str	r0, [r7, #0]
    close();
 23f62aa:	4628      	mov	r0, r5
 23f62ac:	f7ff fc62 	bl	23f5b74 <_ZN9ExFatFile5closeEv>
    if (!parsePathName(path, &fname, &path)) {
 23f62b0:	e7d9      	b.n	23f6266 <_ZN9ExFatFile4openEPS_PKci+0x66>
  return openPrivate(dirFile, &fname, oflag);
 23f62b2:	4643      	mov	r3, r8
 23f62b4:	4621      	mov	r1, r4
 23f62b6:	4628      	mov	r0, r5
 23f62b8:	aa03      	add	r2, sp, #12
 23f62ba:	f7ff fdfd 	bl	23f5eb8 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti>
 23f62be:	e7ac      	b.n	23f621a <_ZN9ExFatFile4openEPS_PKci+0x1a>

023f62c0 <_ZN9ExFatFile4openEP11ExFatVolumePKci>:
  return vol && open(vol->vwd(), path, oflag);
 23f62c0:	b119      	cbz	r1, 23f62ca <_ZN9ExFatFile4openEP11ExFatVolumePKci+0xa>
 23f62c2:	f501 6189 	add.w	r1, r1, #1096	; 0x448
 23f62c6:	f7ff bf9b 	b.w	23f6200 <_ZN9ExFatFile4openEPS_PKci>
}
 23f62ca:	4608      	mov	r0, r1
 23f62cc:	4770      	bx	lr

023f62ce <_ZL16exFatDirChecksumPKht>:
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
 23f62ce:	2300      	movs	r3, #0
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
 23f62d0:	b510      	push	{r4, lr}
  bool skip = data[0] == EXFAT_TYPE_FILE;
 23f62d2:	7804      	ldrb	r4, [r0, #0]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
 23f62d4:	084a      	lsrs	r2, r1, #1
 23f62d6:	ea42 31c1 	orr.w	r1, r2, r1, lsl #15
 23f62da:	5cc2      	ldrb	r2, [r0, r3]
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
 23f62dc:	2b01      	cmp	r3, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
 23f62de:	fa12 f181 	uxtah	r1, r2, r1
 23f62e2:	b289      	uxth	r1, r1
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
 23f62e4:	d108      	bne.n	23f62f8 <_ZL16exFatDirChecksumPKht+0x2a>
 23f62e6:	2c85      	cmp	r4, #133	; 0x85
 23f62e8:	bf14      	ite	ne
 23f62ea:	2201      	movne	r2, #1
 23f62ec:	2203      	moveq	r2, #3
 23f62ee:	4413      	add	r3, r2
 23f62f0:	2b1f      	cmp	r3, #31
 23f62f2:	d9ef      	bls.n	23f62d4 <_ZL16exFatDirChecksumPKht+0x6>
  }
  return checksum;
}
 23f62f4:	4608      	mov	r0, r1
 23f62f6:	bd10      	pop	{r4, pc}
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
 23f62f8:	2201      	movs	r2, #1
 23f62fa:	e7f8      	b.n	23f62ee <_ZL16exFatDirChecksumPKht+0x20>

023f62fc <_ZN14ExFatPartition9cacheSyncEv>:
  bool cacheSync() {
 23f62fc:	b510      	push	{r4, lr}
 23f62fe:	4604      	mov	r4, r0
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
 23f6300:	f001 f875 	bl	23f73ee <_ZN7FsCache4syncEv>
 23f6304:	b150      	cbz	r0, 23f631c <_ZN14ExFatPartition9cacheSyncEv+0x20>
 23f6306:	f504 7004 	add.w	r0, r4, #528	; 0x210
 23f630a:	f001 f870 	bl	23f73ee <_ZN7FsCache4syncEv>
 23f630e:	b128      	cbz	r0, 23f631c <_ZN14ExFatPartition9cacheSyncEv+0x20>
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const { return m_sectorMask; }
  bool syncDevice() { return m_blockDev->syncDevice(); }
 23f6310:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
  }
 23f6314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  bool syncDevice() { return m_blockDev->syncDevice(); }
 23f6318:	f7fe bfea 	b.w	23f52f0 <_ZN9SdSpiCard10syncDeviceEv>
  }
 23f631c:	2000      	movs	r0, #0
 23f631e:	bd10      	pop	{r4, pc}

023f6320 <_ZN9ExFatFile10addClusterEv>:
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
 23f6320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f6322:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
 23f6324:	69a1      	ldr	r1, [r4, #24]
 23f6326:	6a00      	ldr	r0, [r0, #32]
 23f6328:	b101      	cbz	r1, 23f632c <_ZN9ExFatFile10addClusterEv+0xc>
 23f632a:	3101      	adds	r1, #1
 23f632c:	2201      	movs	r2, #1
 23f632e:	f000 fbfc 	bl	23f6b2a <_ZN14ExFatPartition10bitmapFindEmm>
  if (find < 2) {
 23f6332:	2801      	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
 23f6334:	4605      	mov	r5, r0
  if (find < 2) {
 23f6336:	d802      	bhi.n	23f633e <_ZN9ExFatFile10addClusterEv+0x1e>
done:
  m_curCluster = find;
  return true;

fail:
  return false;
 23f6338:	2600      	movs	r6, #0
}
 23f633a:	4630      	mov	r0, r6
 23f633c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
 23f633e:	2301      	movs	r3, #1
 23f6340:	4601      	mov	r1, r0
 23f6342:	461a      	mov	r2, r3
 23f6344:	6a20      	ldr	r0, [r4, #32]
 23f6346:	f000 fc45 	bl	23f6bd4 <_ZN14ExFatPartition12bitmapModifyEmmb>
 23f634a:	4606      	mov	r6, r0
 23f634c:	2800      	cmp	r0, #0
 23f634e:	d0f3      	beq.n	23f6338 <_ZN9ExFatFile10addClusterEv+0x18>
  if (m_curCluster == 0) {
 23f6350:	69a2      	ldr	r2, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
 23f6352:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  if (m_curCluster == 0) {
 23f6356:	b92a      	cbnz	r2, 23f6364 <_ZN9ExFatFile10addClusterEv+0x44>
    m_flags |= FILE_FLAG_CONTIGUOUS;
 23f6358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 23f635c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_curCluster = find;
 23f6360:	61a5      	str	r5, [r4, #24]
  return true;
 23f6362:	e7ea      	b.n	23f633a <_ZN9ExFatFile10addClusterEv+0x1a>
  if (isContiguous()) {
 23f6364:	0659      	lsls	r1, r3, #25
 23f6366:	d513      	bpl.n	23f6390 <_ZN9ExFatFile10addClusterEv+0x70>
    if (find == (m_curCluster + 1)) {
 23f6368:	3201      	adds	r2, #1
 23f636a:	42aa      	cmp	r2, r5
 23f636c:	d0f8      	beq.n	23f6360 <_ZN9ExFatFile10addClusterEv+0x40>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
 23f636e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
 23f6372:	69e1      	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
 23f6374:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
 23f6378:	69a3      	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
 23f637a:	6a20      	ldr	r0, [r4, #32]
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
 23f637c:	428b      	cmp	r3, r1
 23f637e:	d907      	bls.n	23f6390 <_ZN9ExFatFile10addClusterEv+0x70>
      if (!m_vol->fatPut(c, c + 1)) {
 23f6380:	1c4f      	adds	r7, r1, #1
 23f6382:	463a      	mov	r2, r7
 23f6384:	f000 fce3 	bl	23f6d4e <_ZN14ExFatPartition6fatPutEmm>
 23f6388:	2800      	cmp	r0, #0
 23f638a:	d0d5      	beq.n	23f6338 <_ZN9ExFatFile10addClusterEv+0x18>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
 23f638c:	4639      	mov	r1, r7
 23f638e:	e7f3      	b.n	23f6378 <_ZN9ExFatFile10addClusterEv+0x58>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
 23f6390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f6394:	4629      	mov	r1, r5
 23f6396:	6a20      	ldr	r0, [r4, #32]
 23f6398:	f000 fcd9 	bl	23f6d4e <_ZN14ExFatPartition6fatPutEmm>
 23f639c:	2800      	cmp	r0, #0
 23f639e:	d0cb      	beq.n	23f6338 <_ZN9ExFatFile10addClusterEv+0x18>
  if (m_curCluster) {
 23f63a0:	69a1      	ldr	r1, [r4, #24]
 23f63a2:	2900      	cmp	r1, #0
 23f63a4:	d0dc      	beq.n	23f6360 <_ZN9ExFatFile10addClusterEv+0x40>
    if (!m_vol->fatPut(m_curCluster, find)) {
 23f63a6:	462a      	mov	r2, r5
 23f63a8:	6a20      	ldr	r0, [r4, #32]
 23f63aa:	f000 fcd0 	bl	23f6d4e <_ZN14ExFatPartition6fatPutEmm>
 23f63ae:	2800      	cmp	r0, #0
 23f63b0:	d1d6      	bne.n	23f6360 <_ZN9ExFatFile10addClusterEv+0x40>
 23f63b2:	e7c1      	b.n	23f6338 <_ZN9ExFatFile10addClusterEv+0x18>

023f63b4 <_ZN9ExFatFile6removeEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
 23f63b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
 23f63b6:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 23f63ba:	4604      	mov	r4, r0
  uint8_t* cache;
  if (!isWritable()) {
 23f63bc:	079a      	lsls	r2, r3, #30
 23f63be:	d401      	bmi.n	23f63c4 <_ZN9ExFatFile6removeEv+0x10>

  // Write entry to device.
  return m_vol->cacheSync();

fail:
  return false;
 23f63c0:	2000      	movs	r0, #0
}
 23f63c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_firstCluster) {
 23f63c4:	69c1      	ldr	r1, [r0, #28]
 23f63c6:	b9d1      	cbnz	r1, 23f63fe <_ZN9ExFatFile6removeEv+0x4a>
bool ExFatFile::remove() {
 23f63c8:	2500      	movs	r5, #0
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
 23f63ca:	2201      	movs	r2, #1
 23f63cc:	4620      	mov	r0, r4
 23f63ce:	b2e9      	uxtb	r1, r5
 23f63d0:	f7ff fbb4 	bl	23f5b3c <_ZN9ExFatFile8dirCacheEhh>
    if (!cache) {
 23f63d4:	2800      	cmp	r0, #0
 23f63d6:	d0f3      	beq.n	23f63c0 <_ZN9ExFatFile6removeEv+0xc>
    cache[0] &= 0x7F;
 23f63d8:	7803      	ldrb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
 23f63da:	3501      	adds	r5, #1
    cache[0] &= 0x7F;
 23f63dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 23f63e0:	7003      	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
 23f63e2:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 23f63e6:	b2eb      	uxtb	r3, r5
 23f63e8:	429a      	cmp	r2, r3
 23f63ea:	d2ee      	bcs.n	23f63ca <_ZN9ExFatFile6removeEv+0x16>
  m_attributes = FILE_ATTR_CLOSED;
 23f63ec:	2300      	movs	r3, #0
  return m_vol->cacheSync();
 23f63ee:	6a20      	ldr	r0, [r4, #32]
  m_attributes = FILE_ATTR_CLOSED;
 23f63f0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
 23f63f4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return m_vol->cacheSync();
 23f63f8:	f7ff ff80 	bl	23f62fc <_ZN14ExFatPartition9cacheSyncEv>
 23f63fc:	e7e1      	b.n	23f63c2 <_ZN9ExFatFile6removeEv+0xe>
    if (isContiguous()) {
 23f63fe:	065b      	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
 23f6400:	6a00      	ldr	r0, [r0, #32]
    if (isContiguous()) {
 23f6402:	d51b      	bpl.n	23f643c <_ZN9ExFatFile6removeEv+0x88>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
 23f6404:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
 23f6408:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
 23f640c:	3a01      	subs	r2, #1
 23f640e:	f103 0309 	add.w	r3, r3, #9
 23f6412:	b2db      	uxtb	r3, r3
 23f6414:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
 23f6418:	f1c3 0720 	rsb	r7, r3, #32
 23f641c:	f1a3 0620 	sub.w	r6, r3, #32
 23f6420:	40da      	lsrs	r2, r3
 23f6422:	fa05 f707 	lsl.w	r7, r5, r7
 23f6426:	433a      	orrs	r2, r7
 23f6428:	fa25 f606 	lsr.w	r6, r5, r6
 23f642c:	4332      	orrs	r2, r6
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
 23f642e:	2300      	movs	r3, #0
 23f6430:	3201      	adds	r2, #1
 23f6432:	f000 fbcf 	bl	23f6bd4 <_ZN14ExFatPartition12bitmapModifyEmmb>
      if (!m_vol->freeChain(m_firstCluster)) {
 23f6436:	2800      	cmp	r0, #0
 23f6438:	d1c6      	bne.n	23f63c8 <_ZN9ExFatFile6removeEv+0x14>
 23f643a:	e7c1      	b.n	23f63c0 <_ZN9ExFatFile6removeEv+0xc>
 23f643c:	f000 fca4 	bl	23f6d88 <_ZN14ExFatPartition9freeChainEm>
 23f6440:	e7f9      	b.n	23f6436 <_ZN9ExFatFile6removeEv+0x82>
	...

023f6444 <_ZN9ExFatFile7syncDirEv>:
fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
 23f6444:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f6448:	2700      	movs	r7, #0
 23f644a:	4604      	mov	r4, r0
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
 23f644c:	463e      	mov	r6, r7
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
        if (FsDateTime::callback) {
 23f644e:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 23f651c <_ZN9ExFatFile7syncDirEv+0xd8>
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
 23f6452:	2200      	movs	r2, #0
 23f6454:	4620      	mov	r0, r4
 23f6456:	b2f9      	uxtb	r1, r7
 23f6458:	f7ff fb70 	bl	23f5b3c <_ZN9ExFatFile8dirCacheEhh>
    if (!cache) {
 23f645c:	4605      	mov	r5, r0
 23f645e:	2800      	cmp	r0, #0
 23f6460:	d03d      	beq.n	23f64de <_ZN9ExFatFile7syncDirEv+0x9a>
    switch (cache[0]) {
 23f6462:	7803      	ldrb	r3, [r0, #0]
 23f6464:	2bc0      	cmp	r3, #192	; 0xc0
 23f6466:	d044      	beq.n	23f64f2 <_ZN9ExFatFile7syncDirEv+0xae>
 23f6468:	2bc1      	cmp	r3, #193	; 0xc1
 23f646a:	d021      	beq.n	23f64b0 <_ZN9ExFatFile7syncDirEv+0x6c>
 23f646c:	2b85      	cmp	r3, #133	; 0x85
 23f646e:	d136      	bne.n	23f64de <_ZN9ExFatFile7syncDirEv+0x9a>
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
 23f6470:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 23f6474:	f003 0337 	and.w	r3, r3, #55	; 0x37
 23f6478:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
 23f647a:	f8d8 3000 	ldr.w	r3, [r8]
 23f647e:	b183      	cbz	r3, 23f64a2 <_ZN9ExFatFile7syncDirEv+0x5e>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
 23f6480:	f10d 0203 	add.w	r2, sp, #3
 23f6484:	f10d 0106 	add.w	r1, sp, #6
 23f6488:	a801      	add	r0, sp, #4
 23f648a:	4798      	blx	r3
          df->modifyTimeMs = ms10;
 23f648c:	f89d 3003 	ldrb.w	r3, [sp, #3]
          setLe16(df->modifyTime, time);
 23f6490:	f8bd 2006 	ldrh.w	r2, [sp, #6]
          df->modifyTimeMs = ms10;
 23f6494:	756b      	strb	r3, [r5, #21]
          setLe16(df->modifyDate, date);
 23f6496:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
 23f649a:	81aa      	strh	r2, [r5, #12]
 23f649c:	81eb      	strh	r3, [r5, #14]
 23f649e:	822a      	strh	r2, [r5, #16]
 23f64a0:	826b      	strh	r3, [r5, #18]
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
 23f64a2:	6a22      	ldr	r2, [r4, #32]
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
 23f64a4:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
 23f64a8:	f043 0301 	orr.w	r3, r3, #1
 23f64ac:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
      default:
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
 23f64b0:	4631      	mov	r1, r6
 23f64b2:	4628      	mov	r0, r5
 23f64b4:	f7ff ff0b 	bl	23f62ce <_ZL16exFatDirChecksumPKht>
  for (uint8_t is = 0; is <= m_setCount; is++) {
 23f64b8:	3701      	adds	r7, #1
 23f64ba:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 23f64be:	b2fb      	uxtb	r3, r7
 23f64c0:	429a      	cmp	r2, r3
    checksum = exFatDirChecksum(cache, checksum);
 23f64c2:	4606      	mov	r6, r0
  for (uint8_t is = 0; is <= m_setCount; is++) {
 23f64c4:	d2c5      	bcs.n	23f6452 <_ZN9ExFatFile7syncDirEv+0xe>
  }
  df = reinterpret_cast<DirFile_t*>(
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
 23f64c6:	2201      	movs	r2, #1
 23f64c8:	6a20      	ldr	r0, [r4, #32]
 23f64ca:	f104 0124 	add.w	r1, r4, #36	; 0x24
 23f64ce:	f000 fbd1 	bl	23f6c74 <_ZN14ExFatPartition8dirCacheEPK8DirPos_th>
  if (!df) {
 23f64d2:	b120      	cbz	r0, 23f64de <_ZN9ExFatFile7syncDirEv+0x9a>
 23f64d4:	8046      	strh	r6, [r0, #2]
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
 23f64d6:	6a20      	ldr	r0, [r4, #32]
 23f64d8:	f7ff ff10 	bl	23f62fc <_ZN14ExFatPartition9cacheSyncEv>
 23f64dc:	b930      	cbnz	r0, 23f64ec <_ZN9ExFatFile7syncDirEv+0xa8>
  }
  return true;

fail:
  m_error |= WRITE_ERROR;
  return false;
 23f64de:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
 23f64e0:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 23f64e4:	f043 0301 	orr.w	r3, r3, #1
 23f64e8:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
 23f64ec:	b002      	add	sp, #8
 23f64ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (isContiguous()) {
 23f64f2:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
 23f64f6:	7843      	ldrb	r3, [r0, #1]
        if (isContiguous()) {
 23f64f8:	0652      	lsls	r2, r2, #25
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
 23f64fa:	bf4c      	ite	mi
 23f64fc:	f043 0302 	orrmi.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
 23f6500:	f003 03fd 	andpl.w	r3, r3, #253	; 0xfd
 23f6504:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
 23f6506:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
  *reinterpret_cast<uint64_t*>(dst) = src;
 23f650a:	e9c0 2302 	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
 23f650e:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
 23f6510:	6143      	str	r3, [r0, #20]
        setLe64(ds->dataLength, m_dataLength);
 23f6512:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
  *reinterpret_cast<uint64_t*>(dst) = src;
 23f6516:	e9c0 2306 	strd	r2, r3, [r0, #24]
 23f651a:	e7c2      	b.n	23f64a2 <_ZN9ExFatFile7syncDirEv+0x5e>
 23f651c:	1007aeac 	.word	0x1007aeac

023f6520 <_ZN9ExFatFile4syncEv>:
bool ExFatFile::sync() {
 23f6520:	b510      	push	{r4, lr}
  if (!isOpen()) {
 23f6522:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::sync() {
 23f6526:	4604      	mov	r4, r0
  if (!isOpen()) {
 23f6528:	b90b      	cbnz	r3, 23f652e <_ZN9ExFatFile4syncEv+0xe>
    return true;
 23f652a:	2001      	movs	r0, #1
}
 23f652c:	bd10      	pop	{r4, pc}
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
 23f652e:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
 23f6532:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 23f6536:	2a00      	cmp	r2, #0
 23f6538:	da07      	bge.n	23f654a <_ZN9ExFatFile4syncEv+0x2a>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
 23f653a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 23f653e:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
 23f6542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return syncDir();
 23f6546:	f7ff bf7d 	b.w	23f6444 <_ZN9ExFatFile7syncDirEv>
  if (!m_vol->cacheSync()) {
 23f654a:	6a00      	ldr	r0, [r0, #32]
 23f654c:	f7ff fed6 	bl	23f62fc <_ZN14ExFatPartition9cacheSyncEv>
 23f6550:	2800      	cmp	r0, #0
 23f6552:	d1ea      	bne.n	23f652a <_ZN9ExFatFile4syncEv+0xa>
  m_error |= WRITE_ERROR;
 23f6554:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 23f6558:	f043 0301 	orr.w	r3, r3, #1
 23f655c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return false;
 23f6560:	e7e4      	b.n	23f652c <_ZN9ExFatFile4syncEv+0xc>

023f6562 <_ZN9ExFatFile13addDirClusterEv>:
bool ExFatFile::addDirCluster() {
 23f6562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
 23f6564:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
 23f6568:	4604      	mov	r4, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
 23f656a:	065a      	lsls	r2, r3, #25
 23f656c:	d52e      	bpl.n	23f65cc <_ZN9ExFatFile13addDirClusterEv+0x6a>
 23f656e:	6a00      	ldr	r0, [r0, #32]
 23f6570:	f000 fca8 	bl	23f6ec4 <_ZN14ExFatPartition10rootLengthEv>
  uint32_t bytesPerCluster() const { return m_bytesPerCluster; }
 23f6574:	6a23      	ldr	r3, [r4, #32]
  dl += m_vol->bytesPerCluster();
 23f6576:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 23f657a:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
 23f657c:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 23f6580:	d247      	bcs.n	23f6612 <_ZN9ExFatFile13addDirClusterEv+0xb0>
  if (!addCluster()) {
 23f6582:	4620      	mov	r0, r4
 23f6584:	f7ff fecc 	bl	23f6320 <_ZN9ExFatFile10addClusterEv>
 23f6588:	2800      	cmp	r0, #0
 23f658a:	d042      	beq.n	23f6612 <_ZN9ExFatFile13addDirClusterEv+0xb0>
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
 23f658c:	2600      	movs	r6, #0
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
 23f658e:	2701      	movs	r7, #1
  sector = m_vol->clusterStartSector(m_curCluster);
 23f6590:	6a23      	ldr	r3, [r4, #32]
           ((cluster - 2) << m_sectorsPerClusterShift);
 23f6592:	69a5      	ldr	r5, [r4, #24]
 23f6594:	f893 2445 	ldrb.w	r2, [r3, #1093]	; 0x445
 23f6598:	3d02      	subs	r5, #2
 23f659a:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 23f659e:	4095      	lsls	r5, r2
 23f65a0:	441d      	add	r5, r3
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
 23f65a2:	6a20      	ldr	r0, [r4, #32]
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
 23f65a4:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
 23f65a8:	fa07 f303 	lsl.w	r3, r7, r3
 23f65ac:	42b3      	cmp	r3, r6
 23f65ae:	d90f      	bls.n	23f65d0 <_ZN9ExFatFile13addDirClusterEv+0x6e>
    return m_dataCache.prepare(sector, option);
 23f65b0:	2205      	movs	r2, #5
 23f65b2:	19a9      	adds	r1, r5, r6
 23f65b4:	f500 7004 	add.w	r0, r0, #528	; 0x210
 23f65b8:	f000 ff3f 	bl	23f743a <_ZN7FsCache7prepareEmh>
    if (!cache) {
 23f65bc:	b348      	cbz	r0, 23f6612 <_ZN9ExFatFile13addDirClusterEv+0xb0>
    memset(cache, 0, m_vol->bytesPerSector());
 23f65be:	f44f 7200 	mov.w	r2, #512	; 0x200
 23f65c2:	2100      	movs	r1, #0
 23f65c4:	f006 fc23 	bl	23fce0e <memset>
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
 23f65c8:	3601      	adds	r6, #1
 23f65ca:	e7ea      	b.n	23f65a2 <_ZN9ExFatFile13addDirClusterEv+0x40>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
 23f65cc:	6880      	ldr	r0, [r0, #8]
 23f65ce:	e7d1      	b.n	23f6574 <_ZN9ExFatFile13addDirClusterEv+0x12>
  if (!isRoot()) {
 23f65d0:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 23f65d4:	065b      	lsls	r3, r3, #25
 23f65d6:	d417      	bmi.n	23f6608 <_ZN9ExFatFile13addDirClusterEv+0xa6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
 23f65d8:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 23f65dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 23f65e0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength += m_vol->bytesPerCluster();
 23f65e4:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
 23f65e8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 23f65ec:	185b      	adds	r3, r3, r1
 23f65ee:	f142 0200 	adc.w	r2, r2, #0
 23f65f2:	e9c4 3202 	strd	r3, r2, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
 23f65f6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 23f65fa:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
 23f65fe:	185b      	adds	r3, r3, r1
 23f6600:	f142 0200 	adc.w	r2, r2, #0
 23f6604:	e9c4 3204 	strd	r3, r2, [r4, #16]
  return sync();
 23f6608:	4620      	mov	r0, r4
}
 23f660a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return sync();
 23f660e:	f7ff bf87 	b.w	23f6520 <_ZN9ExFatFile4syncEv>
}
 23f6612:	2000      	movs	r0, #0
 23f6614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f6616 <_ZN9ExFatFile5mkdirEPS_P8ExName_t>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
 23f6616:	b510      	push	{r4, lr}
  if (!parent->isDir()) {
 23f6618:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
 23f661c:	4604      	mov	r4, r0
  if (!parent->isDir()) {
 23f661e:	f013 0f50 	tst.w	r3, #80	; 0x50
 23f6622:	d01a      	beq.n	23f665a <_ZN9ExFatFile5mkdirEPS_P8ExName_t+0x44>
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
 23f6624:	f640 2302 	movw	r3, #2562	; 0xa02
 23f6628:	f7ff fc46 	bl	23f5eb8 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti>
 23f662c:	b1a8      	cbz	r0, 23f665a <_ZN9ExFatFile5mkdirEPS_P8ExName_t+0x44>
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
 23f662e:	2330      	movs	r3, #48	; 0x30
  if (!addDirCluster()) {
 23f6630:	4620      	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
 23f6632:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
 23f6636:	f7ff ff94 	bl	23f6562 <_ZN9ExFatFile13addDirClusterEv>
 23f663a:	b170      	cbz	r0, 23f665a <_ZN9ExFatFile5mkdirEPS_P8ExName_t+0x44>
  m_firstCluster = m_curCluster;
 23f663c:	69a3      	ldr	r3, [r4, #24]
  void rewind() { seekSet(0); }
 23f663e:	4620      	mov	r0, r4
 23f6640:	61e3      	str	r3, [r4, #28]
 23f6642:	2200      	movs	r2, #0
 23f6644:	2300      	movs	r3, #0
 23f6646:	f7ff fbc8 	bl	23f5dda <_ZN9ExFatFile7seekSetEy>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
 23f664a:	23c1      	movs	r3, #193	; 0xc1
  return sync();
 23f664c:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
 23f664e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
 23f6652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return sync();
 23f6656:	f7ff bf63 	b.w	23f6520 <_ZN9ExFatFile4syncEv>
}
 23f665a:	2000      	movs	r0, #0
 23f665c:	bd10      	pop	{r4, pc}

023f665e <_ZN9ExFatFile5mkdirEPS_PKcb>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
 23f665e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f6662:	4698      	mov	r8, r3
  ExFatFile() {}
 23f6664:	2300      	movs	r3, #0
 23f6666:	b096      	sub	sp, #88	; 0x58
 23f6668:	9314      	str	r3, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
 23f666a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
 23f666e:	4605      	mov	r5, r0
 23f6670:	460c      	mov	r4, r1
 23f6672:	9201      	str	r2, [sp, #4]
  if (isOpen() || !parent->isDir()) {
 23f6674:	b11b      	cbz	r3, 23f667e <_ZN9ExFatFile5mkdirEPS_PKcb+0x20>
  return false;
 23f6676:	2000      	movs	r0, #0
}
 23f6678:	b016      	add	sp, #88	; 0x58
 23f667a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isOpen() || !parent->isDir()) {
 23f667e:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 23f6682:	f013 0f50 	tst.w	r3, #80	; 0x50
 23f6686:	d0f6      	beq.n	23f6676 <_ZN9ExFatFile5mkdirEPS_PKcb+0x18>
  if (isDirSeparator(*path)) {
 23f6688:	7813      	ldrb	r3, [r2, #0]
 23f668a:	2b2f      	cmp	r3, #47	; 0x2f
 23f668c:	d10d      	bne.n	23f66aa <_ZN9ExFatFile5mkdirEPS_PKcb+0x4c>
    while (isDirSeparator(*path)) {
 23f668e:	9a01      	ldr	r2, [sp, #4]
 23f6690:	7813      	ldrb	r3, [r2, #0]
 23f6692:	2b2f      	cmp	r3, #47	; 0x2f
 23f6694:	d102      	bne.n	23f669c <_ZN9ExFatFile5mkdirEPS_PKcb+0x3e>
      path++;
 23f6696:	3201      	adds	r2, #1
 23f6698:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
 23f669a:	e7f8      	b.n	23f668e <_ZN9ExFatFile5mkdirEPS_PKcb+0x30>
    if (!tmpDir.openRoot(parent->m_vol)) {
 23f669c:	6a21      	ldr	r1, [r4, #32]
 23f669e:	a808      	add	r0, sp, #32
 23f66a0:	f7ff fa72 	bl	23f5b88 <_ZN9ExFatFile8openRootEP11ExFatVolume>
 23f66a4:	2800      	cmp	r0, #0
 23f66a6:	d0e6      	beq.n	23f6676 <_ZN9ExFatFile5mkdirEPS_PKcb+0x18>
    parent = &tmpDir;
 23f66a8:	ac08      	add	r4, sp, #32
    if (!parsePathName(path, &fname, &path)) {
 23f66aa:	4628      	mov	r0, r5
 23f66ac:	9901      	ldr	r1, [sp, #4]
 23f66ae:	ab01      	add	r3, sp, #4
 23f66b0:	aa03      	add	r2, sp, #12
 23f66b2:	f7ff fa7d 	bl	23f5bb0 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_>
 23f66b6:	2800      	cmp	r0, #0
 23f66b8:	d0dd      	beq.n	23f6676 <_ZN9ExFatFile5mkdirEPS_PKcb+0x18>
    if (!*path) {
 23f66ba:	9b01      	ldr	r3, [sp, #4]
 23f66bc:	781b      	ldrb	r3, [r3, #0]
 23f66be:	b323      	cbz	r3, 23f670a <_ZN9ExFatFile5mkdirEPS_PKcb+0xac>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
 23f66c0:	2300      	movs	r3, #0
 23f66c2:	4621      	mov	r1, r4
 23f66c4:	4628      	mov	r0, r5
 23f66c6:	aa03      	add	r2, sp, #12
 23f66c8:	f7ff fbf6 	bl	23f5eb8 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti>
 23f66cc:	b190      	cbz	r0, 23f66f4 <_ZN9ExFatFile5mkdirEPS_PKcb+0x96>
      *this = *from;
 23f66ce:	ae08      	add	r6, sp, #32
 23f66d0:	462a      	mov	r2, r5
 23f66d2:	4634      	mov	r4, r6
 23f66d4:	f105 0330 	add.w	r3, r5, #48	; 0x30
 23f66d8:	4637      	mov	r7, r6
 23f66da:	6810      	ldr	r0, [r2, #0]
 23f66dc:	6851      	ldr	r1, [r2, #4]
 23f66de:	3208      	adds	r2, #8
 23f66e0:	c703      	stmia	r7!, {r0, r1}
 23f66e2:	429a      	cmp	r2, r3
 23f66e4:	463e      	mov	r6, r7
 23f66e6:	d1f7      	bne.n	23f66d8 <_ZN9ExFatFile5mkdirEPS_PKcb+0x7a>
 23f66e8:	6810      	ldr	r0, [r2, #0]
 23f66ea:	6038      	str	r0, [r7, #0]
    close();
 23f66ec:	4628      	mov	r0, r5
 23f66ee:	f7ff fa41 	bl	23f5b74 <_ZN9ExFatFile5closeEv>
    if (!parsePathName(path, &fname, &path)) {
 23f66f2:	e7da      	b.n	23f66aa <_ZN9ExFatFile5mkdirEPS_PKcb+0x4c>
      if (!pFlag || !mkdir(parent, &fname)) {
 23f66f4:	f1b8 0f00 	cmp.w	r8, #0
 23f66f8:	d0bd      	beq.n	23f6676 <_ZN9ExFatFile5mkdirEPS_PKcb+0x18>
 23f66fa:	4621      	mov	r1, r4
 23f66fc:	4628      	mov	r0, r5
 23f66fe:	aa03      	add	r2, sp, #12
 23f6700:	f7ff ff89 	bl	23f6616 <_ZN9ExFatFile5mkdirEPS_P8ExName_t>
 23f6704:	2800      	cmp	r0, #0
 23f6706:	d1e2      	bne.n	23f66ce <_ZN9ExFatFile5mkdirEPS_PKcb+0x70>
 23f6708:	e7b5      	b.n	23f6676 <_ZN9ExFatFile5mkdirEPS_PKcb+0x18>
  return mkdir(parent, &fname);
 23f670a:	4621      	mov	r1, r4
 23f670c:	4628      	mov	r0, r5
 23f670e:	aa03      	add	r2, sp, #12
 23f6710:	f7ff ff81 	bl	23f6616 <_ZN9ExFatFile5mkdirEPS_P8ExName_t>
 23f6714:	e7b0      	b.n	23f6678 <_ZN9ExFatFile5mkdirEPS_PKcb+0x1a>

023f6716 <_ZN9ExFatFile6renameEPS_PKc>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
 23f6716:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f6718:	4604      	mov	r4, r0
  ExFatFile() {}
 23f671a:	2000      	movs	r0, #0
 23f671c:	b09d      	sub	sp, #116	; 0x74
 23f671e:	900c      	str	r0, [sp, #48]	; 0x30
 23f6720:	901a      	str	r0, [sp, #104]	; 0x68
  if (!(isFile() || isSubDir())) {
 23f6722:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
 23f6726:	f010 0f18 	tst.w	r0, #24
 23f672a:	d102      	bne.n	23f6732 <_ZN9ExFatFile6renameEPS_PKc+0x1c>
  return false;
 23f672c:	2000      	movs	r0, #0
}
 23f672e:	b01d      	add	sp, #116	; 0x74
 23f6730:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (m_vol != dirFile->m_vol) {
 23f6732:	6a20      	ldr	r0, [r4, #32]
 23f6734:	6a0b      	ldr	r3, [r1, #32]
 23f6736:	4298      	cmp	r0, r3
 23f6738:	d1f8      	bne.n	23f672c <_ZN9ExFatFile6renameEPS_PKc+0x16>
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
 23f673a:	f640 2301 	movw	r3, #2561	; 0xa01
 23f673e:	4668      	mov	r0, sp
 23f6740:	f7ff fd5e 	bl	23f6200 <_ZN9ExFatFile4openEPS_PKci>
 23f6744:	2800      	cmp	r0, #0
 23f6746:	d0f1      	beq.n	23f672c <_ZN9ExFatFile6renameEPS_PKc+0x16>
      *this = *from;
 23f6748:	aa0e      	add	r2, sp, #56	; 0x38
 23f674a:	4623      	mov	r3, r4
 23f674c:	4616      	mov	r6, r2
 23f674e:	f104 0730 	add.w	r7, r4, #48	; 0x30
 23f6752:	4615      	mov	r5, r2
 23f6754:	6818      	ldr	r0, [r3, #0]
 23f6756:	6859      	ldr	r1, [r3, #4]
 23f6758:	3308      	adds	r3, #8
 23f675a:	c503      	stmia	r5!, {r0, r1}
 23f675c:	42bb      	cmp	r3, r7
 23f675e:	462a      	mov	r2, r5
 23f6760:	d1f7      	bne.n	23f6752 <_ZN9ExFatFile6renameEPS_PKc+0x3c>
 23f6762:	6818      	ldr	r0, [r3, #0]
  m_dirPos = file.m_dirPos;
 23f6764:	aa09      	add	r2, sp, #36	; 0x24
 23f6766:	6028      	str	r0, [r5, #0]
 23f6768:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23f676c:	ca07      	ldmia	r2, {r0, r1, r2}
 23f676e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
 23f6772:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
  if (!sync()) {
 23f6776:	4620      	mov	r0, r4
  m_setCount = file.m_setCount;
 23f6778:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
 23f677c:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 23f6780:	f063 037f 	orn	r3, r3, #127	; 0x7f
 23f6784:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
 23f6788:	f7ff feca 	bl	23f6520 <_ZN9ExFatFile4syncEv>
 23f678c:	2800      	cmp	r0, #0
 23f678e:	d0cd      	beq.n	23f672c <_ZN9ExFatFile6renameEPS_PKc+0x16>
  oldFile.m_firstCluster = 0;
 23f6790:	2300      	movs	r3, #0
 23f6792:	9315      	str	r3, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
 23f6794:	2302      	movs	r3, #2
 23f6796:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
 23f679a:	2308      	movs	r3, #8
  return oldFile.remove();
 23f679c:	4630      	mov	r0, r6
  oldFile.m_attributes = FILE_ATTR_FILE;
 23f679e:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
 23f67a2:	f7ff fe07 	bl	23f63b4 <_ZN9ExFatFile6removeEv>
 23f67a6:	e7c2      	b.n	23f672e <_ZN9ExFatFile6renameEPS_PKc+0x18>

023f67a8 <_ZN9ExFatFile6renameEPKc>:
bool ExFatFile::rename(const char* newPath) {
 23f67a8:	460a      	mov	r2, r1
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() { return m_cwv; }
  ExFatFile* vwd() { return &m_vwd; }
 23f67aa:	6a01      	ldr	r1, [r0, #32]
  return rename(m_vol->vwd(), newPath);
 23f67ac:	f501 6189 	add.w	r1, r1, #1096	; 0x448
 23f67b0:	f7ff bfb1 	b.w	23f6716 <_ZN9ExFatFile6renameEPS_PKc>

023f67b4 <_ZN9ExFatFile8truncateEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
 23f67b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
 23f67b6:	f890 2033 	ldrb.w	r2, [r0, #51]	; 0x33
 23f67ba:	4604      	mov	r4, r0
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
 23f67bc:	0793      	lsls	r3, r2, #30
 23f67be:	d402      	bmi.n	23f67c6 <_ZN9ExFatFile8truncateEv+0x12>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
 23f67c0:	2000      	movs	r0, #0
}
 23f67c2:	b003      	add	sp, #12
 23f67c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (m_firstCluster == 0) {
 23f67c6:	69c3      	ldr	r3, [r0, #28]
 23f67c8:	2b00      	cmp	r3, #0
 23f67ca:	d056      	beq.n	23f687a <_ZN9ExFatFile8truncateEv+0xc6>
  if (isContiguous()) {
 23f67cc:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    if (m_curCluster) {
 23f67d0:	6981      	ldr	r1, [r0, #24]
  if (isContiguous()) {
 23f67d2:	d037      	beq.n	23f6844 <_ZN9ExFatFile8truncateEv+0x90>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
 23f67d4:	e9d4 2602 	ldrd	r2, r6, [r4, #8]
 23f67d8:	6a00      	ldr	r0, [r0, #32]
 23f67da:	3a01      	subs	r2, #1
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
 23f67dc:	f890 5445 	ldrb.w	r5, [r0, #1093]	; 0x445
 23f67e0:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
 23f67e4:	3509      	adds	r5, #9
 23f67e6:	b2ed      	uxtb	r5, r5
 23f67e8:	f1c5 0c20 	rsb	ip, r5, #32
 23f67ec:	f1a5 0720 	sub.w	r7, r5, #32
 23f67f0:	40ea      	lsrs	r2, r5
 23f67f2:	fa06 fc0c 	lsl.w	ip, r6, ip
 23f67f6:	ea42 020c 	orr.w	r2, r2, ip
 23f67fa:	fa26 f707 	lsr.w	r7, r6, r7
 23f67fe:	433a      	orrs	r2, r7
 23f6800:	3201      	adds	r2, #1
    if (m_curCluster) {
 23f6802:	b1a9      	cbz	r1, 23f6830 <_ZN9ExFatFile8truncateEv+0x7c>
      nc -= 1 + m_curCluster - m_firstCluster;
 23f6804:	3b01      	subs	r3, #1
      toFree = m_curCluster + 1;
 23f6806:	1c4d      	adds	r5, r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
 23f6808:	1a5b      	subs	r3, r3, r1
      toFree = m_curCluster + 1;
 23f680a:	9501      	str	r5, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
 23f680c:	441a      	add	r2, r3
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
 23f680e:	b992      	cbnz	r2, 23f6836 <_ZN9ExFatFile8truncateEv+0x82>
  m_dataLength = m_curPosition;
 23f6810:	e9d4 2300 	ldrd	r2, r3, [r4]
 23f6814:	e9c4 2302 	strd	r2, r3, [r4, #8]
  m_validLength = m_curPosition;
 23f6818:	e9c4 2304 	strd	r2, r3, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
 23f681c:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  return sync();
 23f6820:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_DIR_DIRTY;
 23f6822:	f063 037f 	orn	r3, r3, #127	; 0x7f
 23f6826:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return sync();
 23f682a:	f7ff fe79 	bl	23f6520 <_ZN9ExFatFile4syncEv>
 23f682e:	e7c8      	b.n	23f67c2 <_ZN9ExFatFile8truncateEv+0xe>
      toFree = m_firstCluster;
 23f6830:	9301      	str	r3, [sp, #4]
      m_firstCluster = 0;
 23f6832:	61e1      	str	r1, [r4, #28]
 23f6834:	e7eb      	b.n	23f680e <_ZN9ExFatFile8truncateEv+0x5a>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
 23f6836:	2300      	movs	r3, #0
 23f6838:	9901      	ldr	r1, [sp, #4]
 23f683a:	f000 f9cb 	bl	23f6bd4 <_ZN14ExFatPartition12bitmapModifyEmmb>
      if (!m_vol->freeChain(toFree)) {
 23f683e:	2800      	cmp	r0, #0
 23f6840:	d1e6      	bne.n	23f6810 <_ZN9ExFatFile8truncateEv+0x5c>
 23f6842:	e7bd      	b.n	23f67c0 <_ZN9ExFatFile8truncateEv+0xc>
    if (m_curCluster) {
 23f6844:	b1b1      	cbz	r1, 23f6874 <_ZN9ExFatFile8truncateEv+0xc0>
      toFree = 0;
 23f6846:	9201      	str	r2, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
 23f6848:	6a00      	ldr	r0, [r0, #32]
 23f684a:	aa01      	add	r2, sp, #4
 23f684c:	f000 fa2c 	bl	23f6ca8 <_ZN14ExFatPartition6fatGetEmPm>
      if (fg < 0) {
 23f6850:	2800      	cmp	r0, #0
 23f6852:	dbb5      	blt.n	23f67c0 <_ZN9ExFatFile8truncateEv+0xc>
      if (fg) {
 23f6854:	d007      	beq.n	23f6866 <_ZN9ExFatFile8truncateEv+0xb2>
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
 23f6856:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f685a:	69a1      	ldr	r1, [r4, #24]
 23f685c:	6a20      	ldr	r0, [r4, #32]
 23f685e:	f000 fa76 	bl	23f6d4e <_ZN14ExFatPartition6fatPutEmm>
 23f6862:	2800      	cmp	r0, #0
 23f6864:	d0ac      	beq.n	23f67c0 <_ZN9ExFatFile8truncateEv+0xc>
    if (toFree) {
 23f6866:	9901      	ldr	r1, [sp, #4]
 23f6868:	2900      	cmp	r1, #0
 23f686a:	d0d1      	beq.n	23f6810 <_ZN9ExFatFile8truncateEv+0x5c>
      if (!m_vol->freeChain(toFree)) {
 23f686c:	6a20      	ldr	r0, [r4, #32]
 23f686e:	f000 fa8b 	bl	23f6d88 <_ZN14ExFatPartition9freeChainEm>
 23f6872:	e7e4      	b.n	23f683e <_ZN9ExFatFile8truncateEv+0x8a>
      toFree = m_firstCluster;
 23f6874:	9301      	str	r3, [sp, #4]
      m_firstCluster = 0;
 23f6876:	61c1      	str	r1, [r0, #28]
 23f6878:	e7f5      	b.n	23f6866 <_ZN9ExFatFile8truncateEv+0xb2>
    return true;
 23f687a:	2001      	movs	r0, #1
 23f687c:	e7a1      	b.n	23f67c2 <_ZN9ExFatFile8truncateEv+0xe>
	...

023f6880 <_ZN9ExFatFile5writeEPKvj>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
 23f6880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f6884:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 23f6888:	4688      	mov	r8, r1

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
 23f688a:	0799      	lsls	r1, r3, #30
size_t ExFatFile::write(const void* buf, size_t nbyte) {
 23f688c:	4604      	mov	r4, r0
 23f688e:	4691      	mov	r9, r2
  if (!isWritable()) {
 23f6890:	d566      	bpl.n	23f6960 <_ZN9ExFatFile5writeEPKvj+0xe0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
 23f6892:	071a      	lsls	r2, r3, #28
 23f6894:	d45e      	bmi.n	23f6954 <_ZN9ExFatFile5writeEPKvj+0xd4>
size_t ExFatFile::write(const void* buf, size_t nbyte) {
 23f6896:	464f      	mov	r7, r9
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
 23f6898:	f04f 0b01 	mov.w	fp, #1
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f689c:	f104 0a18 	add.w	sl, r4, #24
    clusterOffset = m_curPosition & m_vol->clusterMask();
 23f68a0:	e9d4 5300 	ldrd	r5, r3, [r4]
  while (toWrite) {
 23f68a4:	2f00      	cmp	r7, #0
 23f68a6:	f000 80d9 	beq.w	23f6a5c <_ZN9ExFatFile5writeEPKvj+0x1dc>
    clusterOffset = m_curPosition & m_vol->clusterMask();
 23f68aa:	6a20      	ldr	r0, [r4, #32]
 23f68ac:	f8d0 1438 	ldr.w	r1, [r0, #1080]	; 0x438
 23f68b0:	400d      	ands	r5, r1
    sectorOffset = clusterOffset & m_vol->sectorMask();
 23f68b2:	f3c5 0608 	ubfx	r6, r5, #0, #9
    if (clusterOffset == 0) {
 23f68b6:	bb2d      	cbnz	r5, 23f6904 <_ZN9ExFatFile5writeEPKvj+0x84>
      if (m_curCluster != 0) {
 23f68b8:	69a1      	ldr	r1, [r4, #24]
 23f68ba:	2900      	cmp	r1, #0
 23f68bc:	d063      	beq.n	23f6986 <_ZN9ExFatFile5writeEPKvj+0x106>
        if (isContiguous()) {
 23f68be:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 23f68c2:	065b      	lsls	r3, r3, #25
 23f68c4:	d558      	bpl.n	23f6978 <_ZN9ExFatFile5writeEPKvj+0xf8>
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
 23f68c6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 23f68ca:	f890 0445 	ldrb.w	r0, [r0, #1093]	; 0x445
 23f68ce:	3b01      	subs	r3, #1
 23f68d0:	f100 0009 	add.w	r0, r0, #9
 23f68d4:	b2c0      	uxtb	r0, r0
 23f68d6:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
 23f68da:	f1c0 0e20 	rsb	lr, r0, #32
 23f68de:	fa02 fe0e 	lsl.w	lr, r2, lr
 23f68e2:	f1a0 0c20 	sub.w	ip, r0, #32
 23f68e6:	40c3      	lsrs	r3, r0
 23f68e8:	fa22 fc0c 	lsr.w	ip, r2, ip
 23f68ec:	ea43 030e 	orr.w	r3, r3, lr
 23f68f0:	69e2      	ldr	r2, [r4, #28]
 23f68f2:	ea43 030c 	orr.w	r3, r3, ip
 23f68f6:	4413      	add	r3, r2
          if (m_curCluster < lc) {
 23f68f8:	428b      	cmp	r3, r1
 23f68fa:	d83a      	bhi.n	23f6972 <_ZN9ExFatFile5writeEPKvj+0xf2>
          if (!addCluster()) {
 23f68fc:	4620      	mov	r0, r4
 23f68fe:	f7ff fd0f 	bl	23f6320 <_ZN9ExFatFile10addClusterEv>
 23f6902:	b368      	cbz	r0, 23f6960 <_ZN9ExFatFile5writeEPKvj+0xe0>
    sector = m_vol->clusterStartSector(m_curCluster) +
 23f6904:	6a20      	ldr	r0, [r4, #32]
           ((cluster - 2) << m_sectorsPerClusterShift);
 23f6906:	69a1      	ldr	r1, [r4, #24]
 23f6908:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
 23f690c:	3902      	subs	r1, #2
 23f690e:	4091      	lsls	r1, r2
             (clusterOffset >> m_vol->bytesPerSectorShift());
 23f6910:	ea4f 2e55 	mov.w	lr, r5, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
 23f6914:	eb01 2555 	add.w	r5, r1, r5, lsr #9
 23f6918:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
 23f691c:	4429      	add	r1, r5
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
 23f691e:	2e00      	cmp	r6, #0
 23f6920:	d13d      	bne.n	23f699e <_ZN9ExFatFile5writeEPKvj+0x11e>
 23f6922:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 23f6926:	d33a      	bcc.n	23f699e <_ZN9ExFatFile5writeEPKvj+0x11e>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2 * m_vol->bytesPerSector()) {
 23f6928:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 23f692c:	f8d0 c218 	ldr.w	ip, [r0, #536]	; 0x218
 23f6930:	d279      	bcs.n	23f6a26 <_ZN9ExFatFile5writeEPKvj+0x1a6>
    if (isCached(sector)) {
 23f6932:	4561      	cmp	r1, ip
    m_sector = 0XFFFFFFFF;
 23f6934:	bf02      	ittt	eq
 23f6936:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
 23f693a:	f880 6210 	strbeq.w	r6, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
 23f693e:	f8c0 3218 	streq.w	r3, [r0, #536]	; 0x218
    return m_blockDev->writeSector(sector, src);
 23f6942:	4642      	mov	r2, r8
 23f6944:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 23f6948:	f7fe fe79 	bl	23f563e <_ZN9SdSpiCard11writeSectorEmPKh>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
 23f694c:	b140      	cbz	r0, 23f6960 <_ZN9ExFatFile5writeEPKvj+0xe0>
      n = m_vol->bytesPerSector();
 23f694e:	f44f 7500 	mov.w	r5, #512	; 0x200
 23f6952:	e04d      	b.n	23f69f0 <_ZN9ExFatFile5writeEPKvj+0x170>
    if (!seekSet(m_validLength)) {
 23f6954:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 23f6958:	f7ff fa3f 	bl	23f5dda <_ZN9ExFatFile7seekSetEy>
 23f695c:	2800      	cmp	r0, #0
 23f695e:	d19a      	bne.n	23f6896 <_ZN9ExFatFile5writeEPKvj+0x16>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 23f6960:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
 23f6964:	f04f 0900 	mov.w	r9, #0
  m_error |= WRITE_ERROR;
 23f6968:	f043 0301 	orr.w	r3, r3, #1
 23f696c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return 0;
 23f6970:	e086      	b.n	23f6a80 <_ZN9ExFatFile5writeEPKvj+0x200>
            m_curCluster++;
 23f6972:	3101      	adds	r1, #1
 23f6974:	61a1      	str	r1, [r4, #24]
        if (fg == 0) {
 23f6976:	e7c5      	b.n	23f6904 <_ZN9ExFatFile5writeEPKvj+0x84>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f6978:	4652      	mov	r2, sl
 23f697a:	f000 f995 	bl	23f6ca8 <_ZN14ExFatPartition6fatGetEmPm>
          if (fg < 0) {
 23f697e:	2800      	cmp	r0, #0
 23f6980:	dbee      	blt.n	23f6960 <_ZN9ExFatFile5writeEPKvj+0xe0>
        if (fg == 0) {
 23f6982:	d0bb      	beq.n	23f68fc <_ZN9ExFatFile5writeEPKvj+0x7c>
 23f6984:	e7be      	b.n	23f6904 <_ZN9ExFatFile5writeEPKvj+0x84>
        if (m_firstCluster == 0) {
 23f6986:	69e3      	ldr	r3, [r4, #28]
 23f6988:	b93b      	cbnz	r3, 23f699a <_ZN9ExFatFile5writeEPKvj+0x11a>
          if (!addCluster()) {
 23f698a:	4620      	mov	r0, r4
 23f698c:	f7ff fcc8 	bl	23f6320 <_ZN9ExFatFile10addClusterEv>
 23f6990:	2800      	cmp	r0, #0
 23f6992:	d0e5      	beq.n	23f6960 <_ZN9ExFatFile5writeEPKvj+0xe0>
          m_firstCluster = m_curCluster;
 23f6994:	69a3      	ldr	r3, [r4, #24]
 23f6996:	61e3      	str	r3, [r4, #28]
 23f6998:	e7b4      	b.n	23f6904 <_ZN9ExFatFile5writeEPKvj+0x84>
          m_curCluster = m_firstCluster;
 23f699a:	61a3      	str	r3, [r4, #24]
 23f699c:	e7b2      	b.n	23f6904 <_ZN9ExFatFile5writeEPKvj+0x84>
      n = m_vol->bytesPerSector() - sectorOffset;
 23f699e:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
      if (n > toWrite) {
 23f69a2:	42bd      	cmp	r5, r7
 23f69a4:	bf28      	it	cs
 23f69a6:	463d      	movcs	r5, r7
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
 23f69a8:	2e00      	cmp	r6, #0
 23f69aa:	d13a      	bne.n	23f6a22 <_ZN9ExFatFile5writeEPKvj+0x1a2>
 23f69ac:	6963      	ldr	r3, [r4, #20]
 23f69ae:	6862      	ldr	r2, [r4, #4]
 23f69b0:	9301      	str	r3, [sp, #4]
 23f69b2:	6823      	ldr	r3, [r4, #0]
 23f69b4:	469c      	mov	ip, r3
 23f69b6:	6923      	ldr	r3, [r4, #16]
 23f69b8:	459c      	cmp	ip, r3
 23f69ba:	9b01      	ldr	r3, [sp, #4]
 23f69bc:	eb72 0303 	sbcs.w	r3, r2, r3
 23f69c0:	d32f      	bcc.n	23f6a22 <_ZN9ExFatFile5writeEPKvj+0x1a2>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
 23f69c2:	2205      	movs	r2, #5
    return m_dataCache.prepare(sector, option);
 23f69c4:	f500 7004 	add.w	r0, r0, #528	; 0x210
 23f69c8:	f000 fd37 	bl	23f743a <_ZN7FsCache7prepareEmh>
      if (!cache) {
 23f69cc:	2800      	cmp	r0, #0
 23f69ce:	d0c7      	beq.n	23f6960 <_ZN9ExFatFile5writeEPKvj+0xe0>
      memcpy(dst, src, n);
 23f69d0:	4430      	add	r0, r6
 23f69d2:	462a      	mov	r2, r5
 23f69d4:	4641      	mov	r1, r8
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
 23f69d6:	442e      	add	r6, r5
      memcpy(dst, src, n);
 23f69d8:	f006 fa0c 	bl	23fcdf4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
 23f69dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23f69e0:	d106      	bne.n	23f69f0 <_ZN9ExFatFile5writeEPKvj+0x170>
  bool dataCacheSync() { return m_dataCache.sync(); }
 23f69e2:	6a20      	ldr	r0, [r4, #32]
 23f69e4:	f500 7004 	add.w	r0, r0, #528	; 0x210
 23f69e8:	f000 fd01 	bl	23f73ee <_ZN7FsCache4syncEv>
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
 23f69ec:	2800      	cmp	r0, #0
 23f69ee:	d0b7      	beq.n	23f6960 <_ZN9ExFatFile5writeEPKvj+0xe0>
    m_curPosition += n;
 23f69f0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
 23f69f4:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
 23f69f8:	18eb      	adds	r3, r5, r3
 23f69fa:	f142 0200 	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
 23f69fe:	4298      	cmp	r0, r3
 23f6a00:	4191      	sbcs	r1, r2
    m_curPosition += n;
 23f6a02:	e9c4 3200 	strd	r3, r2, [r4]
    src += n;
 23f6a06:	44a8      	add	r8, r5
    toWrite -= n;
 23f6a08:	eba7 0705 	sub.w	r7, r7, r5
    if (m_curPosition > m_validLength) {
 23f6a0c:	f4bf af48 	bcs.w	23f68a0 <_ZN9ExFatFile5writeEPKvj+0x20>
      m_flags |= FILE_FLAG_DIR_DIRTY;
 23f6a10:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
 23f6a14:	e9c4 3204 	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
 23f6a18:	f061 017f 	orn	r1, r1, #127	; 0x7f
 23f6a1c:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
 23f6a20:	e73e      	b.n	23f68a0 <_ZN9ExFatFile5writeEPKvj+0x20>
        cacheOption = FsCache::CACHE_FOR_WRITE;
 23f6a22:	2201      	movs	r2, #1
 23f6a24:	e7ce      	b.n	23f69c4 <_ZN9ExFatFile5writeEPKvj+0x144>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
 23f6a26:	fa0b f302 	lsl.w	r3, fp, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
 23f6a2a:	0a7d      	lsrs	r5, r7, #9
                       (clusterOffset >> m_vol->bytesPerSectorShift());
 23f6a2c:	eba3 030e 	sub.w	r3, r3, lr
 23f6a30:	42ab      	cmp	r3, r5
 23f6a32:	bf28      	it	cs
 23f6a34:	462b      	movcs	r3, r5
    return sector <= m_sector && m_sector < (sector + count);
 23f6a36:	4561      	cmp	r1, ip
      n = ns << m_vol->bytesPerSectorShift();
 23f6a38:	ea4f 2543 	mov.w	r5, r3, lsl #9
 23f6a3c:	d808      	bhi.n	23f6a50 <_ZN9ExFatFile5writeEPKvj+0x1d0>
 23f6a3e:	18ca      	adds	r2, r1, r3
 23f6a40:	4562      	cmp	r2, ip
    m_sector = 0XFFFFFFFF;
 23f6a42:	bf82      	ittt	hi
 23f6a44:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
 23f6a48:	f880 6210 	strbhi.w	r6, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
 23f6a4c:	f8c0 2218 	strhi.w	r2, [r0, #536]	; 0x218
    return m_blockDev->writeSectors(sector, src, count);
 23f6a50:	4642      	mov	r2, r8
 23f6a52:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 23f6a56:	f7fe fdc4 	bl	23f55e2 <_ZN9SdSpiCard12writeSectorsEmPKhj>
 23f6a5a:	e7c7      	b.n	23f69ec <_ZN9ExFatFile5writeEPKvj+0x16c>
  if (m_curPosition > m_dataLength) {
 23f6a5c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 23f6a60:	42a9      	cmp	r1, r5
 23f6a62:	419a      	sbcs	r2, r3
 23f6a64:	d208      	bcs.n	23f6a78 <_ZN9ExFatFile5writeEPKvj+0x1f8>
    m_dataLength = m_curPosition;
 23f6a66:	e9c4 5302 	strd	r5, r3, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
 23f6a6a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 23f6a6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 23f6a72:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 23f6a76:	e003      	b.n	23f6a80 <_ZN9ExFatFile5writeEPKvj+0x200>
  } else if (FsDateTime::callback) {
 23f6a78:	4b03      	ldr	r3, [pc, #12]	; (23f6a88 <_ZN9ExFatFile5writeEPKvj+0x208>)
 23f6a7a:	681b      	ldr	r3, [r3, #0]
 23f6a7c:	2b00      	cmp	r3, #0
 23f6a7e:	d1f4      	bne.n	23f6a6a <_ZN9ExFatFile5writeEPKvj+0x1ea>
}
 23f6a80:	4648      	mov	r0, r9
 23f6a82:	b003      	add	sp, #12
 23f6a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f6a88:	1007aeac 	.word	0x1007aeac

023f6a8c <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
 23f6a8c:	b570      	push	{r4, r5, r6, lr}
  bool atEnd() { return next == end; }
 23f6a8e:	6895      	ldr	r5, [r2, #8]
 23f6a90:	f101 041e 	add.w	r4, r1, #30
 23f6a94:	6853      	ldr	r3, [r2, #4]
  return *reinterpret_cast<const uint16_t*>(src);
 23f6a96:	f831 0f02 	ldrh.w	r0, [r1, #2]!
  for (uint8_t i = 0; i < 15; i++) {
    uint16_t u = getLe16(dirName->unicode + 2 * i);
    if (fname->atEnd()) {
 23f6a9a:	429d      	cmp	r5, r3
 23f6a9c:	d103      	bne.n	23f6aa6 <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t+0x1a>
      return u == 0;
 23f6a9e:	fab0 f080 	clz	r0, r0
 23f6aa2:	0940      	lsrs	r0, r0, #5
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
}
 23f6aa4:	bd70      	pop	{r4, r5, r6, pc}
  char getch() { return atEnd() ? 0 : *next++; }
 23f6aa6:	1c5e      	adds	r6, r3, #1
 23f6aa8:	6056      	str	r6, [r2, #4]
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
 23f6aaa:	287e      	cmp	r0, #126	; 0x7e
 23f6aac:	781b      	ldrb	r3, [r3, #0]
 23f6aae:	d813      	bhi.n	23f6ad8 <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t+0x4c>
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
 23f6ab0:	f1a3 0661 	sub.w	r6, r3, #97	; 0x61
 23f6ab4:	2e19      	cmp	r6, #25
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
 23f6ab6:	b2c0      	uxtb	r0, r0
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
 23f6ab8:	bf98      	it	ls
 23f6aba:	3b20      	subls	r3, #32
 23f6abc:	f1a0 0661 	sub.w	r6, r0, #97	; 0x61
 23f6ac0:	bf98      	it	ls
 23f6ac2:	b2db      	uxtbls	r3, r3
 23f6ac4:	2e19      	cmp	r6, #25
 23f6ac6:	bf9c      	itt	ls
 23f6ac8:	3820      	subls	r0, #32
 23f6aca:	b2c0      	uxtbls	r0, r0
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
 23f6acc:	4298      	cmp	r0, r3
 23f6ace:	d103      	bne.n	23f6ad8 <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t+0x4c>
  for (uint8_t i = 0; i < 15; i++) {
 23f6ad0:	42a1      	cmp	r1, r4
 23f6ad2:	d1df      	bne.n	23f6a94 <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t+0x8>
  return true;
 23f6ad4:	2001      	movs	r0, #1
 23f6ad6:	e7e5      	b.n	23f6aa4 <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t+0x18>
      return false;
 23f6ad8:	2000      	movs	r0, #0
 23f6ada:	e7e3      	b.n	23f6aa4 <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t+0x18>

023f6adc <_ZN9ExFatFile8hashNameEP8ExName_t>:
fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
 23f6adc:	b530      	push	{r4, r5, lr}
  uint16_t hash = 0;
 23f6ade:	2400      	movs	r4, #0
  void reset() { next = begin; }
 23f6ae0:	680d      	ldr	r5, [r1, #0]
  bool atEnd() { return next == end; }
 23f6ae2:	6888      	ldr	r0, [r1, #8]
  void reset() { next = begin; }
 23f6ae4:	604d      	str	r5, [r1, #4]
  bool atEnd() { return next == end; }
 23f6ae6:	684b      	ldr	r3, [r1, #4]
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
  }
#else   // USE_UTF8_LONG_NAMES
  while (!fname->atEnd()) {
 23f6ae8:	4283      	cmp	r3, r0
 23f6aea:	d015      	beq.n	23f6b18 <_ZN9ExFatFile8hashNameEP8ExName_t+0x3c>
  char getch() { return atEnd() ? 0 : *next++; }
 23f6aec:	1c5a      	adds	r2, r3, #1
 23f6aee:	604a      	str	r2, [r1, #4]
 23f6af0:	781a      	ldrb	r2, [r3, #0]
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
 23f6af2:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 23f6af6:	2b19      	cmp	r3, #25
 23f6af8:	bf98      	it	ls
 23f6afa:	3a20      	subls	r2, #32
  hash = ((hash << 15) | (hash >> 1)) + u;
 23f6afc:	ea4f 0354 	mov.w	r3, r4, lsr #1
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
 23f6b00:	bf98      	it	ls
 23f6b02:	b2d2      	uxtbls	r2, r2
  hash = ((hash << 15) | (hash >> 1)) + u;
 23f6b04:	ea43 33c4 	orr.w	r3, r3, r4, lsl #15
 23f6b08:	4413      	add	r3, r2
 23f6b0a:	b29a      	uxth	r2, r3
  hash = ((hash << 15) | (hash >> 1));
 23f6b0c:	f3c3 034e 	ubfx	r3, r3, #1, #15
 23f6b10:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
 23f6b14:	b29c      	uxth	r4, r3
  while (!fname->atEnd()) {
 23f6b16:	e7e6      	b.n	23f6ae6 <_ZN9ExFatFile8hashNameEP8ExName_t+0xa>
    // Convert to byte for smaller exFatHash.
    char c = fname->getch();
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
 23f6b18:	1b40      	subs	r0, r0, r5
 23f6b1a:	60c8      	str	r0, [r1, #12]
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
 23f6b1c:	3801      	subs	r0, #1
  }
  return true;

fail:
  return false;
}
 23f6b1e:	28fe      	cmp	r0, #254	; 0xfe
 23f6b20:	bf8c      	ite	hi
 23f6b22:	2000      	movhi	r0, #0
 23f6b24:	2001      	movls	r0, #1
  fname->nameHash = hash;
 23f6b26:	820c      	strh	r4, [r1, #16]
}
 23f6b28:	bd30      	pop	{r4, r5, pc}

023f6b2a <_ZN14ExFatPartition10bitmapFindEmm>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
 23f6b2a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f6b2e:	4607      	mov	r7, r0
 23f6b30:	4693      	mov	fp, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
 23f6b32:	468a      	mov	sl, r1
 23f6b34:	b369      	cbz	r1, 23f6b92 <_ZN14ExFatPartition10bitmapFindEmm+0x68>
 23f6b36:	1e8d      	subs	r5, r1, #2
  if (start >= m_clusterCount) {
 23f6b38:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  const uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
 23f6b3c:	2401      	movs	r4, #1
    start = 0;
 23f6b3e:	42ab      	cmp	r3, r5
 23f6b40:	bf98      	it	ls
 23f6b42:	2500      	movls	r5, #0
  uint32_t bgnAlloc = start;
 23f6b44:	46a8      	mov	r8, r5
  uint32_t endAlloc = start;
 23f6b46:	462e      	mov	r6, r5
  uint8_t mask = 1 << (start & 7);
 23f6b48:	f005 0307 	and.w	r3, r5, #7
 23f6b4c:	409c      	lsls	r4, r3
  size_t i = (start >> 3) & (sectorSize - 1);
 23f6b4e:	f3c5 09c8 	ubfx	r9, r5, #3, #9
  uint8_t mask = 1 << (start & 7);
 23f6b52:	b2e4      	uxtb	r4, r4
  while (true) {
    uint32_t sector =
 23f6b54:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
 23f6b58:	2200      	movs	r2, #0
 23f6b5a:	4638      	mov	r0, r7
 23f6b5c:	eb01 3116 	add.w	r1, r1, r6, lsr #12
 23f6b60:	f000 fc6b 	bl	23f743a <_ZN7FsCache7prepareEmh>
        m_clusterHeapStartSector + (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
 23f6b64:	b198      	cbz	r0, 23f6b8e <_ZN14ExFatPartition10bitmapFindEmm+0x64>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
 23f6b66:	f810 3009 	ldrb.w	r3, [r0, r9]
 23f6b6a:	4223      	tst	r3, r4
        endAlloc++;
 23f6b6c:	f106 0601 	add.w	r6, r6, #1
        if (!(mask & cache[i])) {
 23f6b70:	d112      	bne.n	23f6b98 <_ZN14ExFatPartition10bitmapFindEmm+0x6e>
          if ((endAlloc - bgnAlloc) == count) {
 23f6b72:	eba6 0208 	sub.w	r2, r6, r8
 23f6b76:	455a      	cmp	r2, fp
 23f6b78:	d10f      	bne.n	23f6b9a <_ZN14ExFatPartition10bitmapFindEmm+0x70>
            if (cluster == 0 && count == 1) {
 23f6b7a:	f1ba 0f00 	cmp.w	sl, #0
 23f6b7e:	d104      	bne.n	23f6b8a <_ZN14ExFatPartition10bitmapFindEmm+0x60>
 23f6b80:	f1bb 0f01 	cmp.w	fp, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
 23f6b84:	bf08      	it	eq
 23f6b86:	f8c7 8420 	streq.w	r8, [r7, #1056]	; 0x420
            }
            return bgnAlloc + 2;
 23f6b8a:	f108 0002 	add.w	r0, r8, #2
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
 23f6b8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
 23f6b92:	f8d0 5420 	ldr.w	r5, [r0, #1056]	; 0x420
 23f6b96:	e7cf      	b.n	23f6b38 <_ZN14ExFatPartition10bitmapFindEmm+0xe>
        endAlloc++;
 23f6b98:	46b0      	mov	r8, r6
        if (endAlloc == start) {
 23f6b9a:	42b5      	cmp	r5, r6
 23f6b9c:	d018      	beq.n	23f6bd0 <_ZN14ExFatPartition10bitmapFindEmm+0xa6>
        if (endAlloc >= m_clusterCount) {
 23f6b9e:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 23f6ba2:	42b2      	cmp	r2, r6
 23f6ba4:	d90e      	bls.n	23f6bc4 <_ZN14ExFatPartition10bitmapFindEmm+0x9a>
      for (; mask; mask <<= 1) {
 23f6ba6:	0064      	lsls	r4, r4, #1
 23f6ba8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 23f6bac:	d1dd      	bne.n	23f6b6a <_ZN14ExFatPartition10bitmapFindEmm+0x40>
    for (; i < sectorSize; i++) {
 23f6bae:	f109 0301 	add.w	r3, r9, #1
 23f6bb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    i = 0;
 23f6bb6:	f04f 0900 	mov.w	r9, #0
 23f6bba:	f04f 0401 	mov.w	r4, #1
    for (; i < sectorSize; i++) {
 23f6bbe:	d2c9      	bcs.n	23f6b54 <_ZN14ExFatPartition10bitmapFindEmm+0x2a>
 23f6bc0:	4699      	mov	r9, r3
 23f6bc2:	e7d0      	b.n	23f6b66 <_ZN14ExFatPartition10bitmapFindEmm+0x3c>
          endAlloc = bgnAlloc = 0;
 23f6bc4:	f04f 0800 	mov.w	r8, #0
          i = sectorSize;
 23f6bc8:	f44f 7900 	mov.w	r9, #512	; 0x200
          endAlloc = bgnAlloc = 0;
 23f6bcc:	4646      	mov	r6, r8
 23f6bce:	e7ee      	b.n	23f6bae <_ZN14ExFatPartition10bitmapFindEmm+0x84>
          return 1;
 23f6bd0:	2001      	movs	r0, #1
 23f6bd2:	e7dc      	b.n	23f6b8e <_ZN14ExFatPartition10bitmapFindEmm+0x64>

023f6bd4 <_ZN14ExFatPartition12bitmapModifyEmmb>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster, uint32_t count,
                                  bool value) {
 23f6bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
 23f6bd8:	3902      	subs	r1, #2
                                  bool value) {
 23f6bda:	4605      	mov	r5, r0
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
 23f6bdc:	f8d0 0430 	ldr.w	r0, [r0, #1072]	; 0x430
                                  bool value) {
 23f6be0:	461f      	mov	r7, r3
  if ((start + count) > m_clusterCount) {
 23f6be2:	188b      	adds	r3, r1, r2
 23f6be4:	4283      	cmp	r3, r0
                                  bool value) {
 23f6be6:	4616      	mov	r6, r2
  if ((start + count) > m_clusterCount) {
 23f6be8:	d83f      	bhi.n	23f6c6a <_ZN14ExFatPartition12bitmapModifyEmmb+0x96>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
 23f6bea:	f8d5 2420 	ldr.w	r2, [r5, #1056]	; 0x420
  if (value) {
 23f6bee:	b3bf      	cbz	r7, 23f6c60 <_ZN14ExFatPartition12bitmapModifyEmmb+0x8c>
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
 23f6bf0:	4291      	cmp	r1, r2
 23f6bf2:	d806      	bhi.n	23f6c02 <_ZN14ExFatPartition12bitmapModifyEmmb+0x2e>
 23f6bf4:	4293      	cmp	r3, r2
 23f6bf6:	d904      	bls.n	23f6c02 <_ZN14ExFatPartition12bitmapModifyEmmb+0x2e>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
 23f6bf8:	4283      	cmp	r3, r0
 23f6bfa:	bf28      	it	cs
 23f6bfc:	2300      	movcs	r3, #0
 23f6bfe:	f8c5 3420 	str.w	r3, [r5, #1056]	; 0x420
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
 23f6c02:	f04f 0901 	mov.w	r9, #1
 23f6c06:	f001 0307 	and.w	r3, r1, #7
 23f6c0a:	fa09 f903 	lsl.w	r9, r9, r3
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
 23f6c0e:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
  mask = 1 << (start & 7);
 23f6c12:	fa5f f989 	uxtb.w	r9, r9
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
 23f6c16:	eb03 3811 	add.w	r8, r3, r1, lsr #12
  i = (start >> 3) & m_sectorMask;
 23f6c1a:	f3c1 04c8 	ubfx	r4, r1, #3, #9
 23f6c1e:	2201      	movs	r2, #1
 23f6c20:	4641      	mov	r1, r8
 23f6c22:	4628      	mov	r0, r5
 23f6c24:	4490      	add	r8, r2
 23f6c26:	f000 fc08 	bl	23f743a <_ZN7FsCache7prepareEmh>
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
 23f6c2a:	b1f0      	cbz	r0, 23f6c6a <_ZN14ExFatPartition12bitmapModifyEmmb+0x96>
 23f6c2c:	4649      	mov	r1, r9
 23f6c2e:	1903      	adds	r3, r0, r4
 23f6c30:	f500 7000 	add.w	r0, r0, #512	; 0x200
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
 23f6c34:	781a      	ldrb	r2, [r3, #0]
 23f6c36:	420a      	tst	r2, r1
 23f6c38:	bf14      	ite	ne
 23f6c3a:	2401      	movne	r4, #1
 23f6c3c:	2400      	moveq	r4, #0
 23f6c3e:	42bc      	cmp	r4, r7
 23f6c40:	d013      	beq.n	23f6c6a <_ZN14ExFatPartition12bitmapModifyEmmb+0x96>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
 23f6c42:	404a      	eors	r2, r1
        if (--count == 0) {
 23f6c44:	3e01      	subs	r6, #1
        cache[i] ^= mask;
 23f6c46:	701a      	strb	r2, [r3, #0]
        if (--count == 0) {
 23f6c48:	d012      	beq.n	23f6c70 <_ZN14ExFatPartition12bitmapModifyEmmb+0x9c>
      for (; mask; mask <<= 1) {
 23f6c4a:	0049      	lsls	r1, r1, #1
 23f6c4c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 23f6c50:	d1f0      	bne.n	23f6c34 <_ZN14ExFatPartition12bitmapModifyEmmb+0x60>
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
 23f6c52:	460c      	mov	r4, r1
 23f6c54:	2101      	movs	r1, #1
    for (; i < m_bytesPerSector; i++) {
 23f6c56:	3301      	adds	r3, #1
 23f6c58:	4298      	cmp	r0, r3
      mask = 1;
 23f6c5a:	4689      	mov	r9, r1
    for (; i < m_bytesPerSector; i++) {
 23f6c5c:	d1ea      	bne.n	23f6c34 <_ZN14ExFatPartition12bitmapModifyEmmb+0x60>
 23f6c5e:	e7de      	b.n	23f6c1e <_ZN14ExFatPartition12bitmapModifyEmmb+0x4a>
    if (start < m_bitmapStart) {
 23f6c60:	4291      	cmp	r1, r2
      m_bitmapStart = start;
 23f6c62:	bf38      	it	cc
 23f6c64:	f8c5 1420 	strcc.w	r1, [r5, #1056]	; 0x420
 23f6c68:	e7cb      	b.n	23f6c02 <_ZN14ExFatPartition12bitmapModifyEmmb+0x2e>
  }

fail:
  return false;
 23f6c6a:	2000      	movs	r0, #0
}
 23f6c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          return true;
 23f6c70:	2001      	movs	r0, #1
 23f6c72:	e7fb      	b.n	23f6c6c <_ZN14ExFatPartition12bitmapModifyEmmb+0x98>

023f6c74 <_ZN14ExFatPartition8dirCacheEPK8DirPos_th>:
    n++;
  } while (status);
  return n;
}
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(const DirPos_t* pos, uint8_t options) {
 23f6c74:	b538      	push	{r3, r4, r5, lr}
 23f6c76:	460c      	mov	r4, r1
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
 23f6c78:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
 23f6c7c:	6849      	ldr	r1, [r1, #4]
           ((cluster - 2) << m_sectorsPerClusterShift);
 23f6c7e:	f890 5445 	ldrb.w	r5, [r0, #1093]	; 0x445
 23f6c82:	4019      	ands	r1, r3
 23f6c84:	6823      	ldr	r3, [r4, #0]
    return m_dataCache.prepare(sector, option);
 23f6c86:	f500 7004 	add.w	r0, r0, #528	; 0x210
           ((cluster - 2) << m_sectorsPerClusterShift);
 23f6c8a:	3b02      	subs	r3, #2
 23f6c8c:	40ab      	lsls	r3, r5
 23f6c8e:	eb03 2351 	add.w	r3, r3, r1, lsr #9
 23f6c92:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
 23f6c96:	4419      	add	r1, r3
 23f6c98:	f000 fbcf 	bl	23f743a <_ZN7FsCache7prepareEmh>
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
 23f6c9c:	b118      	cbz	r0, 23f6ca6 <_ZN14ExFatPartition8dirCacheEPK8DirPos_th+0x32>
 23f6c9e:	6863      	ldr	r3, [r4, #4]
 23f6ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23f6ca4:	4418      	add	r0, r3
}
 23f6ca6:	bd38      	pop	{r3, r4, r5, pc}

023f6ca8 <_ZN14ExFatPartition6fatGetEmPm>:
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
 23f6ca8:	b538      	push	{r3, r4, r5, lr}
  const uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
 23f6caa:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
 23f6cae:	460c      	mov	r4, r1
  if (cluster > (m_clusterCount + 1)) {
 23f6cb0:	3301      	adds	r3, #1
 23f6cb2:	428b      	cmp	r3, r1
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
 23f6cb4:	4615      	mov	r5, r2
  if (cluster > (m_clusterCount + 1)) {
 23f6cb6:	d202      	bcs.n	23f6cbe <_ZN14ExFatPartition6fatGetEmPm+0x16>
    DBG_FAIL_MACRO;
    return -1;
 23f6cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
 23f6cbc:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
 23f6cbe:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
 23f6cc2:	2200      	movs	r2, #0
 23f6cc4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 23f6cc8:	f500 7004 	add.w	r0, r0, #528	; 0x210
 23f6ccc:	f000 fbb5 	bl	23f743a <_ZN7FsCache7prepareEmh>
  if (!cache) {
 23f6cd0:	2800      	cmp	r0, #0
 23f6cd2:	d0f1      	beq.n	23f6cb8 <_ZN14ExFatPartition6fatGetEmPm+0x10>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
 23f6cd4:	00a4      	lsls	r4, r4, #2
 23f6cd6:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
 23f6cda:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
 23f6cdc:	1c5a      	adds	r2, r3, #1
  return 1;
 23f6cde:	bf16      	itet	ne
 23f6ce0:	2001      	movne	r0, #1
    return 0;
 23f6ce2:	2000      	moveq	r0, #0
  *value = next;
 23f6ce4:	602b      	strne	r3, [r5, #0]
  return 1;
 23f6ce6:	e7e9      	b.n	23f6cbc <_ZN14ExFatPartition6fatGetEmPm+0x14>

023f6ce8 <_ZN14ExFatPartition9chainSizeEm>:
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
 23f6ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f6cea:	4605      	mov	r5, r0
  uint32_t n = 0;
 23f6cec:	2400      	movs	r4, #0
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
 23f6cee:	9101      	str	r1, [sp, #4]
    status = fatGet(cluster, &cluster);
 23f6cf0:	4628      	mov	r0, r5
 23f6cf2:	9901      	ldr	r1, [sp, #4]
 23f6cf4:	aa01      	add	r2, sp, #4
 23f6cf6:	f7ff ffd7 	bl	23f6ca8 <_ZN14ExFatPartition6fatGetEmPm>
    if (status < 0) return 0;
 23f6cfa:	2800      	cmp	r0, #0
 23f6cfc:	db05      	blt.n	23f6d0a <_ZN14ExFatPartition9chainSizeEm+0x22>
    n++;
 23f6cfe:	f104 0401 	add.w	r4, r4, #1
  } while (status);
 23f6d02:	d1f5      	bne.n	23f6cf0 <_ZN14ExFatPartition9chainSizeEm+0x8>
}
 23f6d04:	4620      	mov	r0, r4
 23f6d06:	b003      	add	sp, #12
 23f6d08:	bd30      	pop	{r4, r5, pc}
    if (status < 0) return 0;
 23f6d0a:	2400      	movs	r4, #0
 23f6d0c:	e7fa      	b.n	23f6d04 <_ZN14ExFatPartition9chainSizeEm+0x1c>

023f6d0e <_ZN14ExFatPartition7dirSeekEP8DirPos_tm>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
 23f6d0e:	b570      	push	{r4, r5, r6, lr}
 23f6d10:	4606      	mov	r6, r0
 23f6d12:	460d      	mov	r5, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
 23f6d14:	684b      	ldr	r3, [r1, #4]
 23f6d16:	f8d0 4438 	ldr.w	r4, [r0, #1080]	; 0x438
 23f6d1a:	401c      	ands	r4, r3
  pos->position += offset;
 23f6d1c:	4413      	add	r3, r2
 23f6d1e:	604b      	str	r3, [r1, #4]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
 23f6d20:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
 23f6d24:	4414      	add	r4, r2
 23f6d26:	3309      	adds	r3, #9
  tmp >>= bytesPerClusterShift();
 23f6d28:	b2db      	uxtb	r3, r3
 23f6d2a:	40dc      	lsrs	r4, r3
  while (tmp--) {
 23f6d2c:	b16c      	cbz	r4, 23f6d4a <_ZN14ExFatPartition7dirSeekEP8DirPos_tm+0x3c>
    if (pos->isContiguous) {
 23f6d2e:	7a2b      	ldrb	r3, [r5, #8]
      pos->cluster++;
 23f6d30:	6829      	ldr	r1, [r5, #0]
    if (pos->isContiguous) {
 23f6d32:	b11b      	cbz	r3, 23f6d3c <_ZN14ExFatPartition7dirSeekEP8DirPos_tm+0x2e>
      pos->cluster++;
 23f6d34:	3101      	adds	r1, #1
 23f6d36:	6029      	str	r1, [r5, #0]
 23f6d38:	3c01      	subs	r4, #1
 23f6d3a:	e7f7      	b.n	23f6d2c <_ZN14ExFatPartition7dirSeekEP8DirPos_tm+0x1e>
      status = fatGet(pos->cluster, &pos->cluster);
 23f6d3c:	462a      	mov	r2, r5
 23f6d3e:	4630      	mov	r0, r6
 23f6d40:	f7ff ffb2 	bl	23f6ca8 <_ZN14ExFatPartition6fatGetEmPm>
      if (status != 1) {
 23f6d44:	2801      	cmp	r0, #1
 23f6d46:	d0f7      	beq.n	23f6d38 <_ZN14ExFatPartition7dirSeekEP8DirPos_tm+0x2a>
}
 23f6d48:	bd70      	pop	{r4, r5, r6, pc}
  return 1;
 23f6d4a:	2001      	movs	r0, #1
 23f6d4c:	e7fc      	b.n	23f6d48 <_ZN14ExFatPartition7dirSeekEP8DirPos_tm+0x3a>

023f6d4e <_ZN14ExFatPartition6fatPutEmm>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
 23f6d4e:	2901      	cmp	r1, #1
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
 23f6d50:	b538      	push	{r3, r4, r5, lr}
 23f6d52:	460c      	mov	r4, r1
 23f6d54:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
 23f6d56:	d801      	bhi.n	23f6d5c <_ZN14ExFatPartition6fatPutEmm+0xe>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

fail:
  return false;
 23f6d58:	2000      	movs	r0, #0
}
 23f6d5a:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
 23f6d5c:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
 23f6d60:	3301      	adds	r3, #1
 23f6d62:	428b      	cmp	r3, r1
 23f6d64:	d3f8      	bcc.n	23f6d58 <_ZN14ExFatPartition6fatPutEmm+0xa>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
 23f6d66:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    return m_dataCache.prepare(sector, option);
 23f6d6a:	2201      	movs	r2, #1
 23f6d6c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 23f6d70:	f500 7004 	add.w	r0, r0, #528	; 0x210
 23f6d74:	f000 fb61 	bl	23f743a <_ZN7FsCache7prepareEmh>
  if (!cache) {
 23f6d78:	2800      	cmp	r0, #0
 23f6d7a:	d0ed      	beq.n	23f6d58 <_ZN14ExFatPartition6fatPutEmm+0xa>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
 23f6d7c:	00a4      	lsls	r4, r4, #2
 23f6d7e:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
 23f6d82:	5105      	str	r5, [r0, r4]
  return true;
 23f6d84:	2001      	movs	r0, #1
 23f6d86:	e7e8      	b.n	23f6d5a <_ZN14ExFatPartition6fatPutEmm+0xc>

023f6d88 <_ZN14ExFatPartition9freeChainEm>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
 23f6d88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f6d8c:	4607      	mov	r7, r0
 23f6d8e:	460c      	mov	r4, r1
  uint32_t next;
  uint32_t start = cluster;
 23f6d90:	4688      	mov	r8, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
 23f6d92:	4621      	mov	r1, r4
 23f6d94:	4638      	mov	r0, r7
 23f6d96:	aa01      	add	r2, sp, #4
 23f6d98:	f7ff ff86 	bl	23f6ca8 <_ZN14ExFatPartition6fatGetEmPm>
    if (status < 0) {
 23f6d9c:	1e06      	subs	r6, r0, #0
 23f6d9e:	da04      	bge.n	23f6daa <_ZN14ExFatPartition9freeChainEm+0x22>
  } while (status);

  return true;

fail:
  return false;
 23f6da0:	2500      	movs	r5, #0
}
 23f6da2:	4628      	mov	r0, r5
 23f6da4:	b002      	add	sp, #8
 23f6da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!fatPut(cluster, 0)) {
 23f6daa:	2200      	movs	r2, #0
 23f6dac:	4621      	mov	r1, r4
 23f6dae:	4638      	mov	r0, r7
 23f6db0:	f7ff ffcd 	bl	23f6d4e <_ZN14ExFatPartition6fatPutEmm>
 23f6db4:	4605      	mov	r5, r0
 23f6db6:	2800      	cmp	r0, #0
 23f6db8:	d0f2      	beq.n	23f6da0 <_ZN14ExFatPartition9freeChainEm+0x18>
    if (status == 0 || (cluster + 1) != next) {
 23f6dba:	1c62      	adds	r2, r4, #1
 23f6dbc:	b116      	cbz	r6, 23f6dc4 <_ZN14ExFatPartition9freeChainEm+0x3c>
 23f6dbe:	9b01      	ldr	r3, [sp, #4]
 23f6dc0:	4293      	cmp	r3, r2
 23f6dc2:	d00a      	beq.n	23f6dda <_ZN14ExFatPartition9freeChainEm+0x52>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
 23f6dc4:	2300      	movs	r3, #0
 23f6dc6:	4641      	mov	r1, r8
 23f6dc8:	4638      	mov	r0, r7
 23f6dca:	eba2 0208 	sub.w	r2, r2, r8
 23f6dce:	f7ff ff01 	bl	23f6bd4 <_ZN14ExFatPartition12bitmapModifyEmmb>
 23f6dd2:	2800      	cmp	r0, #0
 23f6dd4:	d0e4      	beq.n	23f6da0 <_ZN14ExFatPartition9freeChainEm+0x18>
      start = next;
 23f6dd6:	f8dd 8004 	ldr.w	r8, [sp, #4]
    cluster = next;
 23f6dda:	9c01      	ldr	r4, [sp, #4]
  } while (status);
 23f6ddc:	2e00      	cmp	r6, #0
 23f6dde:	d1d8      	bne.n	23f6d92 <_ZN14ExFatPartition9freeChainEm+0xa>
 23f6de0:	e7df      	b.n	23f6da2 <_ZN14ExFatPartition9freeChainEm+0x1a>
	...

023f6de4 <_ZN14ExFatPartition4initEP9SdSpiCardhm>:
      }
    }
  }
}
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
 23f6de4:	b570      	push	{r4, r5, r6, lr}
 23f6de6:	461e      	mov	r6, r3
  pbs_t* pbs;
  const BpbExFat_t* bpb;
  const MbrSector_t* mbr;
  m_fatType = 0;
 23f6de8:	2300      	movs	r3, #0
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
 23f6dea:	4604      	mov	r4, r0
  m_fatType = 0;
 23f6dec:	f880 3444 	strb.w	r3, [r0, #1092]	; 0x444
  m_blockDev = dev;
 23f6df0:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
    m_blockDev = blockDev;
 23f6df4:	6041      	str	r1, [r0, #4]
    m_status = 0;
 23f6df6:	7003      	strb	r3, [r0, #0]
    m_sector = 0XFFFFFFFF;
 23f6df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  cacheInit(m_blockDev);
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 23f6dfc:	4615      	mov	r5, r2
 23f6dfe:	60a0      	str	r0, [r4, #8]
    m_blockDev = blockDev;
 23f6e00:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
    m_status = 0;
 23f6e04:	f884 3210 	strb.w	r3, [r4, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
 23f6e08:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
 23f6e0c:	b1d2      	cbz	r2, 23f6e44 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x60>
    if (part > 4) {
 23f6e0e:	2a04      	cmp	r2, #4
 23f6e10:	d901      	bls.n	23f6e16 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x32>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

fail:
  return false;
 23f6e12:	2000      	movs	r0, #0
}
 23f6e14:	bd70      	pop	{r4, r5, r6, pc}
 23f6e16:	461a      	mov	r2, r3
 23f6e18:	4619      	mov	r1, r3
 23f6e1a:	f504 7004 	add.w	r0, r4, #528	; 0x210
 23f6e1e:	f000 fb0c 	bl	23f743a <_ZN7FsCache7prepareEmh>
    if (!mbr) {
 23f6e22:	2800      	cmp	r0, #0
 23f6e24:	d0f5      	beq.n	23f6e12 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x2e>
    const MbrPart_t* mp = mbr->part + part - 1;
 23f6e26:	f105 5280 	add.w	r2, r5, #268435456	; 0x10000000
 23f6e2a:	3a01      	subs	r2, #1
 23f6e2c:	f500 70df 	add.w	r0, r0, #446	; 0x1be
 23f6e30:	0113      	lsls	r3, r2, #4
 23f6e32:	eb00 1202 	add.w	r2, r0, r2, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
 23f6e36:	7911      	ldrb	r1, [r2, #4]
 23f6e38:	2900      	cmp	r1, #0
 23f6e3a:	d0ea      	beq.n	23f6e12 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x2e>
 23f6e3c:	5cc3      	ldrb	r3, [r0, r3]
 23f6e3e:	065b      	lsls	r3, r3, #25
 23f6e40:	d1e7      	bne.n	23f6e12 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x2e>
  return *reinterpret_cast<const uint32_t*>(src);
 23f6e42:	6896      	ldr	r6, [r2, #8]
 23f6e44:	2200      	movs	r2, #0
 23f6e46:	4631      	mov	r1, r6
 23f6e48:	f504 7004 	add.w	r0, r4, #528	; 0x210
 23f6e4c:	f000 faf5 	bl	23f743a <_ZN7FsCache7prepareEmh>
  if (!pbs) {
 23f6e50:	4605      	mov	r5, r0
 23f6e52:	2800      	cmp	r0, #0
 23f6e54:	d0dd      	beq.n	23f6e12 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x2e>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
 23f6e56:	491a      	ldr	r1, [pc, #104]	; (23f6ec0 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0xdc>)
 23f6e58:	2205      	movs	r2, #5
 23f6e5a:	3003      	adds	r0, #3
 23f6e5c:	f006 f871 	bl	23fcf42 <strncmp>
 23f6e60:	4601      	mov	r1, r0
 23f6e62:	2800      	cmp	r0, #0
 23f6e64:	d1d5      	bne.n	23f6e12 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x2e>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
 23f6e66:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
 23f6e6a:	2b09      	cmp	r3, #9
 23f6e6c:	d1d1      	bne.n	23f6e12 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x2e>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
 23f6e6e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 23f6e70:	4433      	add	r3, r6
 23f6e72:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
 23f6e76:	6d6b      	ldr	r3, [r5, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
 23f6e78:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
 23f6e7c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 23f6e7e:	4433      	add	r3, r6
 23f6e80:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
 23f6e84:	6deb      	ldr	r3, [r5, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
 23f6e86:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
 23f6e8a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
 23f6e8c:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
 23f6e90:	f895 306d 	ldrb.w	r3, [r5, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
 23f6e94:	2501      	movs	r5, #1
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
 23f6e96:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
 23f6e9a:	3309      	adds	r3, #9
 23f6e9c:	fa05 f303 	lsl.w	r3, r5, r3
 23f6ea0:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
 23f6ea4:	3b01      	subs	r3, #1
 23f6ea6:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
  m_bitmapStart = 0;
 23f6eaa:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
 23f6eae:	462a      	mov	r2, r5
 23f6eb0:	4620      	mov	r0, r4
 23f6eb2:	f7ff fe3a 	bl	23f6b2a <_ZN14ExFatPartition10bitmapFindEmm>
  m_fatType = FAT_TYPE_EXFAT;
 23f6eb6:	2340      	movs	r3, #64	; 0x40
  return true;
 23f6eb8:	4628      	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
 23f6eba:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
  return true;
 23f6ebe:	e7a9      	b.n	23f6e14 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x30>
 23f6ec0:	023ff953 	.word	0x023ff953

023f6ec4 <_ZN14ExFatPartition10rootLengthEv>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
 23f6ec4:	b510      	push	{r4, lr}
 23f6ec6:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
 23f6ec8:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
 23f6ecc:	f7ff ff0c 	bl	23f6ce8 <_ZN14ExFatPartition9chainSizeEm>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
 23f6ed0:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
 23f6ed4:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
 23f6ed6:	b2db      	uxtb	r3, r3
}
 23f6ed8:	4098      	lsls	r0, r3
 23f6eda:	bd10      	pop	{r4, pc}

023f6edc <_ZN7FatFile10getLfnCharEPK8DirLfn_th>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(const DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
 23f6edc:	2a04      	cmp	r2, #4
 23f6ede:	d804      	bhi.n	23f6eea <_ZN7FatFile10getLfnCharEPK8DirLfn_th+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
 23f6ee0:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 23f6ee4:	f8b2 0001 	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2 * i);
 23f6ee8:	4770      	bx	lr
  } else if (i < 11) {
 23f6eea:	2a0a      	cmp	r2, #10
 23f6eec:	d803      	bhi.n	23f6ef6 <_ZN7FatFile10getLfnCharEPK8DirLfn_th+0x1a>
 23f6eee:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 23f6ef2:	8888      	ldrh	r0, [r1, #4]
    return getLe16(ldir->unicode2 + 2 * (i - 5));
 23f6ef4:	4770      	bx	lr
  } else if (i < 13) {
 23f6ef6:	2a0c      	cmp	r2, #12
 23f6ef8:	bf9a      	itte	ls
 23f6efa:	eb01 0142 	addls.w	r1, r1, r2, lsl #1
 23f6efe:	88c8      	ldrhls	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2 * (i - 11));
  }
  DBG_HALT_IF(i >= 13);
  return 0;
 23f6f00:	2000      	movhi	r0, #0
}
 23f6f02:	4770      	bx	lr

023f6f04 <_ZN12FatPartition6fatGetEmPm>:
  uint32_t sector;
  uint32_t next;
  const uint8_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 23f6f04:	2901      	cmp	r1, #1
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
 23f6f06:	b570      	push	{r4, r5, r6, lr}
 23f6f08:	4605      	mov	r5, r0
 23f6f0a:	460c      	mov	r4, r1
 23f6f0c:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
 23f6f0e:	d802      	bhi.n	23f6f16 <_ZN12FatPartition6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
 23f6f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23f6f14:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
 23f6f16:	69c3      	ldr	r3, [r0, #28]
 23f6f18:	428b      	cmp	r3, r1
 23f6f1a:	d3f9      	bcc.n	23f6f10 <_ZN12FatPartition6fatGetEmPm+0xc>
  uint8_t fatType() const { return m_fatType; }
 23f6f1c:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
 23f6f1e:	2b20      	cmp	r3, #32
 23f6f20:	d114      	bne.n	23f6f4c <_ZN12FatPartition6fatGetEmPm+0x48>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
 23f6f22:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
 23f6f24:	2202      	movs	r2, #2
 23f6f26:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 23f6f2a:	f500 700d 	add.w	r0, r0, #564	; 0x234
 23f6f2e:	f000 fa84 	bl	23f743a <_ZN7FsCache7prepareEmh>
    if (!pc) {
 23f6f32:	2800      	cmp	r0, #0
 23f6f34:	d0ec      	beq.n	23f6f10 <_ZN12FatPartition6fatGetEmPm+0xc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
 23f6f36:	00a4      	lsls	r4, r4, #2
    next = getLe32(pc + offset);
 23f6f38:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
 23f6f3c:	5903      	ldr	r3, [r0, r4]
  if (isEOC(next)) {
 23f6f3e:	69ea      	ldr	r2, [r5, #28]
 23f6f40:	429a      	cmp	r2, r3
  return 1;
 23f6f42:	bf2a      	itet	cs
 23f6f44:	2001      	movcs	r0, #1
    return 0;
 23f6f46:	2000      	movcc	r0, #0
  *value = next;
 23f6f48:	6033      	strcs	r3, [r6, #0]
  return 1;
 23f6f4a:	e7e3      	b.n	23f6f14 <_ZN12FatPartition6fatGetEmPm+0x10>
  } else if (fatType() == 16) {
 23f6f4c:	2b10      	cmp	r3, #16
 23f6f4e:	d1df      	bne.n	23f6f10 <_ZN12FatPartition6fatGetEmPm+0xc>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
 23f6f50:	f3c1 2307 	ubfx	r3, r1, #8, #8
 23f6f54:	6981      	ldr	r1, [r0, #24]
 23f6f56:	2202      	movs	r2, #2
 23f6f58:	4419      	add	r1, r3
 23f6f5a:	f500 700d 	add.w	r0, r0, #564	; 0x234
 23f6f5e:	f000 fa6c 	bl	23f743a <_ZN7FsCache7prepareEmh>
    if (!pc) {
 23f6f62:	2800      	cmp	r0, #0
 23f6f64:	d0d4      	beq.n	23f6f10 <_ZN12FatPartition6fatGetEmPm+0xc>
    uint16_t offset = (cluster << 1) & m_sectorMask;
 23f6f66:	0064      	lsls	r4, r4, #1
    next = getLe16(pc + offset);
 23f6f68:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 23f6f6c:	5b03      	ldrh	r3, [r0, r4]
 23f6f6e:	e7e6      	b.n	23f6f3e <_ZN12FatPartition6fatGetEmPm+0x3a>

023f6f70 <_ZN12FatPartition6fatPutEmm>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 23f6f70:	2901      	cmp	r1, #1
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
 23f6f72:	b538      	push	{r3, r4, r5, lr}
 23f6f74:	460c      	mov	r4, r1
 23f6f76:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
 23f6f78:	d801      	bhi.n	23f6f7e <_ZN12FatPartition6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 23f6f7a:	2000      	movs	r0, #0
}
 23f6f7c:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
 23f6f7e:	69c3      	ldr	r3, [r0, #28]
 23f6f80:	428b      	cmp	r3, r1
 23f6f82:	d3fa      	bcc.n	23f6f7a <_ZN12FatPartition6fatPutEmm+0xa>
  uint8_t fatType() const { return m_fatType; }
 23f6f84:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
 23f6f86:	2b20      	cmp	r3, #32
 23f6f88:	d10f      	bne.n	23f6faa <_ZN12FatPartition6fatPutEmm+0x3a>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
 23f6f8a:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
 23f6f8c:	2203      	movs	r2, #3
 23f6f8e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 23f6f92:	f500 700d 	add.w	r0, r0, #564	; 0x234
 23f6f96:	f000 fa50 	bl	23f743a <_ZN7FsCache7prepareEmh>
    if (!pc) {
 23f6f9a:	2800      	cmp	r0, #0
 23f6f9c:	d0ed      	beq.n	23f6f7a <_ZN12FatPartition6fatPutEmm+0xa>
    uint16_t offset = (cluster << 2) & m_sectorMask;
 23f6f9e:	00a4      	lsls	r4, r4, #2
    setLe32(pc + offset, value);
 23f6fa0:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
 23f6fa4:	5105      	str	r5, [r0, r4]
    return true;
 23f6fa6:	2001      	movs	r0, #1
 23f6fa8:	e7e8      	b.n	23f6f7c <_ZN12FatPartition6fatPutEmm+0xc>
  if (fatType() == 16) {
 23f6faa:	2b10      	cmp	r3, #16
 23f6fac:	d1e5      	bne.n	23f6f7a <_ZN12FatPartition6fatPutEmm+0xa>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
 23f6fae:	f3c1 2307 	ubfx	r3, r1, #8, #8
 23f6fb2:	6981      	ldr	r1, [r0, #24]
 23f6fb4:	2203      	movs	r2, #3
 23f6fb6:	4419      	add	r1, r3
 23f6fb8:	f500 700d 	add.w	r0, r0, #564	; 0x234
 23f6fbc:	f000 fa3d 	bl	23f743a <_ZN7FsCache7prepareEmh>
    if (!pc) {
 23f6fc0:	2800      	cmp	r0, #0
 23f6fc2:	d0da      	beq.n	23f6f7a <_ZN12FatPartition6fatPutEmm+0xa>
    uint16_t offset = (cluster << 1) & m_sectorMask;
 23f6fc4:	0064      	lsls	r4, r4, #1
    setLe16(pc + offset, value);
 23f6fc6:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 23f6fca:	5305      	strh	r5, [r0, r4]
 23f6fcc:	e7eb      	b.n	23f6fa6 <_ZN12FatPartition6fatPutEmm+0x36>

023f6fce <_ZN12FatPartition15allocateClusterEmPm>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
 23f6fce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
 23f6fd2:	68c4      	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
 23f6fd4:	4605      	mov	r5, r0
  if (m_allocSearchStart < current) {
 23f6fd6:	428c      	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
 23f6fd8:	460e      	mov	r6, r1
 23f6fda:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
 23f6fdc:	d301      	bcc.n	23f6fe2 <_ZN12FatPartition15allocateClusterEmPm+0x14>
      setStart = true;
 23f6fde:	2701      	movs	r7, #1
 23f6fe0:	e001      	b.n	23f6fe6 <_ZN12FatPartition15allocateClusterEmPm+0x18>
 23f6fe2:	460c      	mov	r4, r1
    setStart = false;
 23f6fe4:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
 23f6fe6:	69eb      	ldr	r3, [r5, #28]
    find++;
 23f6fe8:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
 23f6fea:	42a3      	cmp	r3, r4
 23f6fec:	d202      	bcs.n	23f6ff4 <_ZN12FatPartition15allocateClusterEmPm+0x26>
      if (setStart) {
 23f6fee:	b9c7      	cbnz	r7, 23f7022 <_ZN12FatPartition15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
 23f6ff0:	68ec      	ldr	r4, [r5, #12]
 23f6ff2:	e7f4      	b.n	23f6fde <_ZN12FatPartition15allocateClusterEmPm+0x10>
    if (find == current) {
 23f6ff4:	42a6      	cmp	r6, r4
 23f6ff6:	d014      	beq.n	23f7022 <_ZN12FatPartition15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
 23f6ff8:	4621      	mov	r1, r4
 23f6ffa:	4628      	mov	r0, r5
 23f6ffc:	aa01      	add	r2, sp, #4
 23f6ffe:	f7ff ff81 	bl	23f6f04 <_ZN12FatPartition6fatGetEmPm>
    if (fg < 0) {
 23f7002:	2800      	cmp	r0, #0
 23f7004:	db0d      	blt.n	23f7022 <_ZN12FatPartition15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
 23f7006:	d0ee      	beq.n	23f6fe6 <_ZN12FatPartition15allocateClusterEmPm+0x18>
 23f7008:	9b01      	ldr	r3, [sp, #4]
 23f700a:	2b00      	cmp	r3, #0
 23f700c:	d1eb      	bne.n	23f6fe6 <_ZN12FatPartition15allocateClusterEmPm+0x18>
  if (setStart) {
 23f700e:	b107      	cbz	r7, 23f7012 <_ZN12FatPartition15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
 23f7010:	60ec      	str	r4, [r5, #12]
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) { return fatPut(cluster, 0x0FFFFFFF); }
 23f7012:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 23f7016:	4621      	mov	r1, r4
 23f7018:	4628      	mov	r0, r5
 23f701a:	f7ff ffa9 	bl	23f6f70 <_ZN12FatPartition6fatPutEmm>
  if (!fatPutEOC(find)) {
 23f701e:	4607      	mov	r7, r0
 23f7020:	b920      	cbnz	r0, 23f702c <_ZN12FatPartition15allocateClusterEmPm+0x5e>
  return false;
 23f7022:	2700      	movs	r7, #0
}
 23f7024:	4638      	mov	r0, r7
 23f7026:	b002      	add	sp, #8
 23f7028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
 23f702c:	b916      	cbnz	r6, 23f7034 <_ZN12FatPartition15allocateClusterEmPm+0x66>
  *next = find;
 23f702e:	f8c8 4000 	str.w	r4, [r8]
  return true;
 23f7032:	e7f7      	b.n	23f7024 <_ZN12FatPartition15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
 23f7034:	4622      	mov	r2, r4
 23f7036:	4631      	mov	r1, r6
 23f7038:	4628      	mov	r0, r5
 23f703a:	f7ff ff99 	bl	23f6f70 <_ZN12FatPartition6fatPutEmm>
 23f703e:	2800      	cmp	r0, #0
 23f7040:	d1f5      	bne.n	23f702e <_ZN12FatPartition15allocateClusterEmPm+0x60>
 23f7042:	e7ee      	b.n	23f7022 <_ZN12FatPartition15allocateClusterEmPm+0x54>

023f7044 <_ZN12FatPartition9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
 23f7044:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f7046:	4605      	mov	r5, r0
 23f7048:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 23f704a:	4621      	mov	r1, r4
 23f704c:	4628      	mov	r0, r5
 23f704e:	aa01      	add	r2, sp, #4
 23f7050:	f7ff ff58 	bl	23f6f04 <_ZN12FatPartition6fatGetEmPm>
    if (fg < 0) {
 23f7054:	1e06      	subs	r6, r0, #0
 23f7056:	db10      	blt.n	23f707a <_ZN12FatPartition9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 23f7058:	2200      	movs	r2, #0
 23f705a:	4621      	mov	r1, r4
 23f705c:	4628      	mov	r0, r5
 23f705e:	f7ff ff87 	bl	23f6f70 <_ZN12FatPartition6fatPutEmm>
 23f7062:	b150      	cbz	r0, 23f707a <_ZN12FatPartition9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
 23f7064:	68eb      	ldr	r3, [r5, #12]
 23f7066:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
 23f7068:	bf84      	itt	hi
 23f706a:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 23f706e:	60ec      	strhi	r4, [r5, #12]
    }
    cluster = next;
 23f7070:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
 23f7072:	2e00      	cmp	r6, #0
 23f7074:	d1e9      	bne.n	23f704a <_ZN12FatPartition9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 23f7076:	b002      	add	sp, #8
 23f7078:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 23f707a:	2000      	movs	r0, #0
 23f707c:	e7fb      	b.n	23f7076 <_ZN12FatPartition9freeChainEm+0x32>

023f707e <_ZN12FatPartition4initEP9SdSpiCardhm>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
 23f707e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f7080:	461d      	mov	r5, r3
  m_blockDev = dev;
  pbs_t* pbs;
  const BpbFat32_t* bpb;
  const MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
 23f7082:	2300      	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
 23f7084:	4604      	mov	r4, r0
  m_blockDev = dev;
 23f7086:	6001      	str	r1, [r0, #0]
  m_fatType = 0;
 23f7088:	71c3      	strb	r3, [r0, #7]
  m_allocSearchStart = 1;
 23f708a:	2001      	movs	r0, #1
 23f708c:	60e0      	str	r0, [r4, #12]
    m_sector = 0XFFFFFFFF;
 23f708e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 23f7092:	4616      	mov	r6, r2
  m_cache.init(dev);
 23f7094:	f104 0724 	add.w	r7, r4, #36	; 0x24
    m_blockDev = blockDev;
 23f7098:	62a1      	str	r1, [r4, #40]	; 0x28
    m_status = 0;
 23f709a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
 23f709e:	62e0      	str	r0, [r4, #44]	; 0x2c
    m_blockDev = blockDev;
 23f70a0:	f8c4 1238 	str.w	r1, [r4, #568]	; 0x238
    m_status = 0;
 23f70a4:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
    m_sector = 0XFFFFFFFF;
 23f70a8:	f8c4 023c 	str.w	r0, [r4, #572]	; 0x23c
  if (part) {
 23f70ac:	b1ca      	cbz	r2, 23f70e2 <_ZN12FatPartition4initEP9SdSpiCardhm+0x64>
    if (part > 4) {
 23f70ae:	2a04      	cmp	r2, #4
 23f70b0:	d901      	bls.n	23f70b6 <_ZN12FatPartition4initEP9SdSpiCardhm+0x38>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

fail:
  return false;
 23f70b2:	2000      	movs	r0, #0
}
 23f70b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return m_cache.prepare(sector, options);
 23f70b6:	461a      	mov	r2, r3
 23f70b8:	4619      	mov	r1, r3
 23f70ba:	4638      	mov	r0, r7
 23f70bc:	f000 f9bd 	bl	23f743a <_ZN7FsCache7prepareEmh>
    if (!mbr) {
 23f70c0:	2800      	cmp	r0, #0
 23f70c2:	d0f6      	beq.n	23f70b2 <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
    const MbrPart_t* mp = mbr->part + part - 1;
 23f70c4:	f106 5280 	add.w	r2, r6, #268435456	; 0x10000000
 23f70c8:	3a01      	subs	r2, #1
 23f70ca:	f500 70df 	add.w	r0, r0, #446	; 0x1be
 23f70ce:	0113      	lsls	r3, r2, #4
 23f70d0:	eb00 1202 	add.w	r2, r0, r2, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
 23f70d4:	7911      	ldrb	r1, [r2, #4]
 23f70d6:	2900      	cmp	r1, #0
 23f70d8:	d0eb      	beq.n	23f70b2 <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
 23f70da:	5cc3      	ldrb	r3, [r0, r3]
 23f70dc:	065b      	lsls	r3, r3, #25
 23f70de:	d1e8      	bne.n	23f70b2 <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
  return *reinterpret_cast<const uint32_t*>(src);
 23f70e0:	6895      	ldr	r5, [r2, #8]
 23f70e2:	2200      	movs	r2, #0
 23f70e4:	4629      	mov	r1, r5
 23f70e6:	4638      	mov	r0, r7
 23f70e8:	f000 f9a7 	bl	23f743a <_ZN7FsCache7prepareEmh>
  if (!pbs) {
 23f70ec:	2800      	cmp	r0, #0
 23f70ee:	d0e0      	beq.n	23f70b2 <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
  if (bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
 23f70f0:	7c03      	ldrb	r3, [r0, #16]
 23f70f2:	2b02      	cmp	r3, #2
 23f70f4:	d1dd      	bne.n	23f70b2 <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
 23f70f6:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 23f70fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 23f70fe:	d1d8      	bne.n	23f70b2 <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
 23f7100:	7b41      	ldrb	r1, [r0, #13]
  m_sectorsPerClusterShift = 0;
 23f7102:	2609      	movs	r6, #9
  m_clusterSectorMask = m_sectorsPerCluster - 1;
 23f7104:	1e4b      	subs	r3, r1, #1
 23f7106:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
 23f7108:	2300      	movs	r3, #0
 23f710a:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
 23f710c:	2301      	movs	r3, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
 23f710e:	7121      	strb	r1, [r4, #4]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
 23f7110:	4299      	cmp	r1, r3
 23f7112:	d007      	beq.n	23f7124 <_ZN12FatPartition4initEP9SdSpiCardhm+0xa6>
    if (tmp == 0) {
 23f7114:	3e01      	subs	r6, #1
 23f7116:	d0cc      	beq.n	23f70b2 <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
    m_sectorsPerClusterShift++;
 23f7118:	79a2      	ldrb	r2, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
 23f711a:	005b      	lsls	r3, r3, #1
    m_sectorsPerClusterShift++;
 23f711c:	3201      	adds	r2, #1
 23f711e:	71a2      	strb	r2, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
 23f7120:	b2db      	uxtb	r3, r3
 23f7122:	e7f5      	b.n	23f7110 <_ZN12FatPartition4initEP9SdSpiCardhm+0x92>
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
 23f7124:	8ac3      	ldrh	r3, [r0, #22]
 23f7126:	6123      	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
 23f7128:	b90b      	cbnz	r3, 23f712e <_ZN12FatPartition4initEP9SdSpiCardhm+0xb0>
 23f712a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
 23f712c:	6123      	str	r3, [r4, #16]
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
 23f712e:	89c1      	ldrh	r1, [r0, #14]
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
 23f7130:	6922      	ldr	r2, [r4, #16]
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
 23f7132:	4429      	add	r1, r5
 23f7134:	61a1      	str	r1, [r4, #24]
  return *reinterpret_cast<const uint16_t*>(src);
 23f7136:	f8b0 3011 	ldrh.w	r3, [r0, #17]
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
 23f713a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
 23f713e:	8123      	strh	r3, [r4, #8]
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
 23f7140:	015b      	lsls	r3, r3, #5
 23f7142:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
 23f7146:	6221      	str	r1, [r4, #32]
      m_rootDirStart +
 23f7148:	eb01 2153 	add.w	r1, r1, r3, lsr #9
  m_dataStartSector =
 23f714c:	6161      	str	r1, [r4, #20]
  totalSectors = getLe16(bpb->totalSectors16);
 23f714e:	f8b0 3013 	ldrh.w	r3, [r0, #19]
  if (totalSectors == 0) {
 23f7152:	b903      	cbnz	r3, 23f7156 <_ZN12FatPartition4initEP9SdSpiCardhm+0xd8>
  return *reinterpret_cast<const uint32_t*>(src);
 23f7154:	6a03      	ldr	r3, [r0, #32]
  countOfClusters = totalSectors - (m_dataStartSector - volStart);
 23f7156:	1a6d      	subs	r5, r5, r1
  countOfClusters >>= m_sectorsPerClusterShift;
 23f7158:	79a1      	ldrb	r1, [r4, #6]
  countOfClusters = totalSectors - (m_dataStartSector - volStart);
 23f715a:	441d      	add	r5, r3
  countOfClusters >>= m_sectorsPerClusterShift;
 23f715c:	40cd      	lsrs	r5, r1
  m_lastCluster = countOfClusters + 1;
 23f715e:	1c6b      	adds	r3, r5, #1
 23f7160:	61e3      	str	r3, [r4, #28]
  if (countOfClusters < 4085) {
 23f7162:	f640 73f4 	movw	r3, #4084	; 0xff4
 23f7166:	429d      	cmp	r5, r3
 23f7168:	d802      	bhi.n	23f7170 <_ZN12FatPartition4initEP9SdSpiCardhm+0xf2>
    m_fatType = 12;
 23f716a:	230c      	movs	r3, #12
 23f716c:	71e3      	strb	r3, [r4, #7]
 23f716e:	e7a0      	b.n	23f70b2 <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
  } else if (countOfClusters < 65525) {
 23f7170:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 23f7174:	429d      	cmp	r5, r3
 23f7176:	bf89      	itett	hi
 23f7178:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
 23f717a:	2310      	movls	r3, #16
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
 23f717c:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 23f717e:	2320      	movhi	r3, #32
  return true;
 23f7180:	2001      	movs	r0, #1
    m_fatType = 32;
 23f7182:	71e3      	strb	r3, [r4, #7]
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) { m_mirrorOffset = offset; }
 23f7184:	6322      	str	r2, [r4, #48]	; 0x30
 23f7186:	f8c4 2240 	str.w	r2, [r4, #576]	; 0x240
  return true;
 23f718a:	e793      	b.n	23f70b4 <_ZN12FatPartition4initEP9SdSpiCardhm+0x36>

023f718c <_ZN10FsBaseFile4copyEPKS_>:
  return *this;
}
#endif  // FILE_COPY_CONSTRUCTOR_SELECT
//------------------------------------------------------------------------------
void FsBaseFile::copy(const FsBaseFile* from) {
  if (from != this) {
 23f718c:	4281      	cmp	r1, r0
void FsBaseFile::copy(const FsBaseFile* from) {
 23f718e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f7190:	4605      	mov	r5, r0
 23f7192:	460e      	mov	r6, r1
  if (from != this) {
 23f7194:	d016      	beq.n	23f71c4 <_ZN10FsBaseFile4copyEPKS_+0x38>
    m_fFile = nullptr;
 23f7196:	2700      	movs	r7, #0
    m_xFile = nullptr;
 23f7198:	e9c0 770e 	strd	r7, r7, [r0, #56]	; 0x38
    if (from->m_fFile) {
 23f719c:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 23f719e:	b194      	cbz	r4, 23f71c6 <_ZN10FsBaseFile4copyEPKS_+0x3a>
      m_fFile = new (m_fileMem) FatFile;
 23f71a0:	4601      	mov	r1, r0
 23f71a2:	2024      	movs	r0, #36	; 0x24
 23f71a4:	f000 f887 	bl	23f72b6 <_ZnwjPm>
 23f71a8:	4604      	mov	r4, r0
 23f71aa:	b108      	cbz	r0, 23f71b0 <_ZN10FsBaseFile4copyEPKS_+0x24>
 23f71ac:	8007      	strh	r7, [r0, #0]
 23f71ae:	7087      	strb	r7, [r0, #2]
 23f71b0:	63ac      	str	r4, [r5, #56]	; 0x38
      m_fFile->copy(from->m_fFile);
 23f71b2:	6bb5      	ldr	r5, [r6, #56]	; 0x38
    if (from != this) {
 23f71b4:	42a5      	cmp	r5, r4
 23f71b6:	d005      	beq.n	23f71c4 <_ZN10FsBaseFile4copyEPKS_+0x38>
      *this = *from;
 23f71b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f71ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f71bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f71be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f71c0:	682b      	ldr	r3, [r5, #0]
 23f71c2:	6023      	str	r3, [r4, #0]
    } else if (from->m_xFile) {
      m_xFile = new (m_fileMem) ExFatFile;
      m_xFile->copy(from->m_xFile);
    }
  }
}
 23f71c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (from->m_xFile) {
 23f71c6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 23f71c8:	2b00      	cmp	r3, #0
 23f71ca:	d0fb      	beq.n	23f71c4 <_ZN10FsBaseFile4copyEPKS_+0x38>
      m_xFile = new (m_fileMem) ExFatFile;
 23f71cc:	4601      	mov	r1, r0
 23f71ce:	2038      	movs	r0, #56	; 0x38
 23f71d0:	f000 f871 	bl	23f72b6 <_ZnwjPm>
 23f71d4:	b110      	cbz	r0, 23f71dc <_ZN10FsBaseFile4copyEPKS_+0x50>
  ExFatFile() {}
 23f71d6:	f880 4031 	strb.w	r4, [r0, #49]	; 0x31
 23f71da:	8644      	strh	r4, [r0, #50]	; 0x32
 23f71dc:	63e8      	str	r0, [r5, #60]	; 0x3c
      m_xFile->copy(from->m_xFile);
 23f71de:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    if (from != this) {
 23f71e0:	4283      	cmp	r3, r0
 23f71e2:	d0ef      	beq.n	23f71c4 <_ZN10FsBaseFile4copyEPKS_+0x38>
      *this = *from;
 23f71e4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 23f71e8:	f853 1b04 	ldr.w	r1, [r3], #4
 23f71ec:	4293      	cmp	r3, r2
 23f71ee:	f840 1b04 	str.w	r1, [r0], #4
 23f71f2:	d1f9      	bne.n	23f71e8 <_ZN10FsBaseFile4copyEPKS_+0x5c>
 23f71f4:	e7e6      	b.n	23f71c4 <_ZN10FsBaseFile4copyEPKS_+0x38>

023f71f6 <_ZN10FsBaseFile4moveEPS_>:
//------------------------------------------------------------------------------
void FsBaseFile::move(FsBaseFile* from) {
  if (from != this) {
 23f71f6:	4281      	cmp	r1, r0
void FsBaseFile::move(FsBaseFile* from) {
 23f71f8:	b510      	push	{r4, lr}
 23f71fa:	460c      	mov	r4, r1
  if (from != this) {
 23f71fc:	d004      	beq.n	23f7208 <_ZN10FsBaseFile4moveEPS_+0x12>
    copy(from);
 23f71fe:	f7ff ffc5 	bl	23f718c <_ZN10FsBaseFile4copyEPKS_>
    from->m_fFile = nullptr;
 23f7202:	2300      	movs	r3, #0
    from->m_xFile = nullptr;
 23f7204:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
  }
}
 23f7208:	bd10      	pop	{r4, pc}

023f720a <_ZN10FsBaseFile5closeEv>:
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
 23f720a:	b510      	push	{r4, lr}
 23f720c:	4604      	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
 23f720e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 23f7210:	b138      	cbz	r0, 23f7222 <_ZN10FsBaseFile5closeEv+0x18>
 23f7212:	f7fd f975 	bl	23f4500 <_ZN7FatFile5closeEv>
  m_fFile = nullptr;
 23f7216:	2300      	movs	r3, #0
  m_xFile = nullptr;
  return rtn;
}
 23f7218:	f000 0001 	and.w	r0, r0, #1
  m_xFile = nullptr;
 23f721c:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
}
 23f7220:	bd10      	pop	{r4, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
 23f7222:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 23f7224:	b110      	cbz	r0, 23f722c <_ZN10FsBaseFile5closeEv+0x22>
 23f7226:	f7fe fca5 	bl	23f5b74 <_ZN9ExFatFile5closeEv>
 23f722a:	e7f4      	b.n	23f7216 <_ZN10FsBaseFile5closeEv+0xc>
 23f722c:	2001      	movs	r0, #1
 23f722e:	e7f2      	b.n	23f7216 <_ZN10FsBaseFile5closeEv+0xc>

023f7230 <_ZN10FsBaseFile4openEP8FsVolumePKci>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
 23f7230:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f7232:	4604      	mov	r4, r0
  if (!vol) {
 23f7234:	460d      	mov	r5, r1
 23f7236:	b911      	cbnz	r1, 23f723e <_ZN10FsBaseFile4openEP8FsVolumePKci+0xe>
    return false;
 23f7238:	2000      	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
 23f723a:	b002      	add	sp, #8
 23f723c:	bd70      	pop	{r4, r5, r6, pc}
 23f723e:	e9cd 2300 	strd	r2, r3, [sp]
  close();
 23f7242:	f7ff ffe2 	bl	23f720a <_ZN10FsBaseFile5closeEv>
  if (vol->m_fVol) {
 23f7246:	e9dd 2300 	ldrd	r2, r3, [sp]
 23f724a:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
 23f724e:	b1b6      	cbz	r6, 23f727e <_ZN10FsBaseFile4openEP8FsVolumePKci+0x4e>
    m_fFile = new (m_fileMem) FatFile;
 23f7250:	4621      	mov	r1, r4
 23f7252:	2024      	movs	r0, #36	; 0x24
 23f7254:	f000 f82f 	bl	23f72b6 <_ZnwjPm>
 23f7258:	e9dd 2300 	ldrd	r2, r3, [sp]
 23f725c:	b110      	cbz	r0, 23f7264 <_ZN10FsBaseFile4openEP8FsVolumePKci+0x34>
  FatFile() {}
 23f725e:	2100      	movs	r1, #0
 23f7260:	8001      	strh	r1, [r0, #0]
 23f7262:	7081      	strb	r1, [r0, #2]
 23f7264:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
 23f7266:	b910      	cbnz	r0, 23f726e <_ZN10FsBaseFile4openEP8FsVolumePKci+0x3e>
    m_fFile = nullptr;
 23f7268:	2000      	movs	r0, #0
 23f726a:	63a0      	str	r0, [r4, #56]	; 0x38
 23f726c:	e7e5      	b.n	23f723a <_ZN10FsBaseFile4openEP8FsVolumePKci+0xa>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
 23f726e:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
 23f7272:	f7fd f996 	bl	23f45a2 <_ZN7FatFile4openEP9FatVolumePKci>
 23f7276:	2800      	cmp	r0, #0
 23f7278:	d0f6      	beq.n	23f7268 <_ZN10FsBaseFile4openEP8FsVolumePKci+0x38>
      return true;
 23f727a:	2001      	movs	r0, #1
 23f727c:	e7dd      	b.n	23f723a <_ZN10FsBaseFile4openEP8FsVolumePKci+0xa>
  } else if (vol->m_xVol) {
 23f727e:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
 23f7282:	e9cd 2300 	strd	r2, r3, [sp]
 23f7286:	2900      	cmp	r1, #0
 23f7288:	d0d6      	beq.n	23f7238 <_ZN10FsBaseFile4openEP8FsVolumePKci+0x8>
    m_xFile = new (m_fileMem) ExFatFile;
 23f728a:	4621      	mov	r1, r4
 23f728c:	2038      	movs	r0, #56	; 0x38
 23f728e:	f000 f812 	bl	23f72b6 <_ZnwjPm>
 23f7292:	e9dd 2300 	ldrd	r2, r3, [sp]
 23f7296:	b110      	cbz	r0, 23f729e <_ZN10FsBaseFile4openEP8FsVolumePKci+0x6e>
  ExFatFile() {}
 23f7298:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
 23f729c:	8646      	strh	r6, [r0, #50]	; 0x32
 23f729e:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
 23f72a0:	b910      	cbnz	r0, 23f72a8 <_ZN10FsBaseFile4openEP8FsVolumePKci+0x78>
    m_xFile = nullptr;
 23f72a2:	2000      	movs	r0, #0
 23f72a4:	63e0      	str	r0, [r4, #60]	; 0x3c
 23f72a6:	e7c8      	b.n	23f723a <_ZN10FsBaseFile4openEP8FsVolumePKci+0xa>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
 23f72a8:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
 23f72ac:	f7ff f808 	bl	23f62c0 <_ZN9ExFatFile4openEP11ExFatVolumePKci>
 23f72b0:	2800      	cmp	r0, #0
 23f72b2:	d0f6      	beq.n	23f72a2 <_ZN10FsBaseFile4openEP8FsVolumePKci+0x72>
 23f72b4:	e7e1      	b.n	23f727a <_ZN10FsBaseFile4openEP8FsVolumePKci+0x4a>

023f72b6 <_ZnwjPm>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
 23f72b6:	4608      	mov	r0, r1
 23f72b8:	4770      	bx	lr
	...

023f72bc <_ZN8FsVolume5beginEP9SdSpiCardbhm>:
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part,
                     uint32_t volStart) {
 23f72bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_fVol = nullptr;
 23f72c0:	2600      	movs	r6, #0
                     uint32_t volStart) {
 23f72c2:	4605      	mov	r5, r0
  m_fVol = nullptr;
 23f72c4:	f8c0 6480 	str.w	r6, [r0, #1152]	; 0x480
                     uint32_t volStart) {
 23f72c8:	460f      	mov	r7, r1
  m_xVol = new (m_volMem) ExFatVolume;
 23f72ca:	4601      	mov	r1, r0
 23f72cc:	f44f 6090 	mov.w	r0, #1152	; 0x480
                     uint32_t volStart) {
 23f72d0:	4690      	mov	r8, r2
 23f72d2:	469a      	mov	sl, r3
 23f72d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
  m_xVol = new (m_volMem) ExFatVolume;
 23f72d8:	f7ff ffed 	bl	23f72b6 <_ZnwjPm>
 23f72dc:	4604      	mov	r4, r0
 23f72de:	b180      	cbz	r0, 23f7302 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x46>
 23f72e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    m_blockDev = blockDev;
 23f72e4:	6046      	str	r6, [r0, #4]
    m_status = 0;
 23f72e6:	7006      	strb	r6, [r0, #0]
    m_sector = 0XFFFFFFFF;
 23f72e8:	6083      	str	r3, [r0, #8]
    m_blockDev = blockDev;
 23f72ea:	f8c0 6214 	str.w	r6, [r0, #532]	; 0x214
    m_status = 0;
 23f72ee:	f880 6210 	strb.w	r6, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
 23f72f2:	f8c0 3218 	str.w	r3, [r0, #536]	; 0x218
  ExFatPartition() = default;  // cppcheck-suppress uninitMemberVar
 23f72f6:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
 23f72fa:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
 23f72fe:	f8a0 647a 	strh.w	r6, [r0, #1146]	; 0x47a
 23f7302:	f8c5 4484 	str.w	r4, [r5, #1156]	; 0x484
  if (m_xVol && m_xVol->begin(blockDev, false, part, volStart)) {
 23f7306:	b1ec      	cbz	r4, 23f7344 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x88>
    if (!init(dev, part, volStart)) {
 23f7308:	464b      	mov	r3, r9
 23f730a:	4652      	mov	r2, sl
 23f730c:	4639      	mov	r1, r7
 23f730e:	4620      	mov	r0, r4
 23f7310:	f7ff fd68 	bl	23f6de4 <_ZN14ExFatPartition4initEP9SdSpiCardhm>
 23f7314:	b1b0      	cbz	r0, 23f7344 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x88>
    m_vwd.close();
 23f7316:	f504 6689 	add.w	r6, r4, #1096	; 0x448
 23f731a:	4630      	mov	r0, r6
 23f731c:	f7fe fc2a 	bl	23f5b74 <_ZN9ExFatFile5closeEv>
    return m_vwd.openRoot(this);
 23f7320:	4621      	mov	r1, r4
 23f7322:	4630      	mov	r0, r6
 23f7324:	f7fe fc30 	bl	23f5b88 <_ZN9ExFatFile8openRootEP11ExFatVolume>
    if (!chdir()) {
 23f7328:	b160      	cbz	r0, 23f7344 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x88>
    if (setCwv || !m_cwv) {
 23f732a:	4b21      	ldr	r3, [pc, #132]	; (23f73b0 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xf4>)
    if (setCwv || !m_cwv) {
 23f732c:	681a      	ldr	r2, [r3, #0]
 23f732e:	b902      	cbnz	r2, 23f7332 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x76>
      m_cwv = this;
 23f7330:	601c      	str	r4, [r3, #0]
  }
  m_fVol = nullptr;
  return false;

done:
  if (setCwv || !m_cwv) {
 23f7332:	4b20      	ldr	r3, [pc, #128]	; (23f73b4 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xf8>)
 23f7334:	f1b8 0f00 	cmp.w	r8, #0
 23f7338:	d101      	bne.n	23f733e <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x82>
 23f733a:	681a      	ldr	r2, [r3, #0]
 23f733c:	b902      	cbnz	r2, 23f7340 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x84>
    m_cwv = this;
 23f733e:	601d      	str	r5, [r3, #0]
  }
  return true;
 23f7340:	2001      	movs	r0, #1
 23f7342:	e033      	b.n	23f73ac <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xf0>
  m_xVol = nullptr;
 23f7344:	2600      	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
 23f7346:	4629      	mov	r1, r5
 23f7348:	f44f 608d 	mov.w	r0, #1128	; 0x468
  m_xVol = nullptr;
 23f734c:	f8c5 6484 	str.w	r6, [r5, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
 23f7350:	f7ff ffb1 	bl	23f72b6 <_ZnwjPm>
 23f7354:	4604      	mov	r4, r0
 23f7356:	b180      	cbz	r0, 23f737a <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xbe>
 23f7358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  FatPartition() = default;  // cppcheck-suppress uninitMemberVar
 23f735c:	71c6      	strb	r6, [r0, #7]
    m_blockDev = blockDev;
 23f735e:	6286      	str	r6, [r0, #40]	; 0x28
    m_status = 0;
 23f7360:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
 23f7364:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_blockDev = blockDev;
 23f7366:	f8c0 6238 	str.w	r6, [r0, #568]	; 0x238
    m_status = 0;
 23f736a:	f880 6234 	strb.w	r6, [r0, #564]	; 0x234
    m_sector = 0XFFFFFFFF;
 23f736e:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
 23f7372:	f8a0 6444 	strh.w	r6, [r0, #1092]	; 0x444
 23f7376:	f880 6446 	strb.w	r6, [r0, #1094]	; 0x446
 23f737a:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
  if (m_fVol && m_fVol->begin(blockDev, false, part, volStart)) {
 23f737e:	b194      	cbz	r4, 23f73a6 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xea>
    if (!init(dev, part, volStart)) {
 23f7380:	464b      	mov	r3, r9
 23f7382:	4652      	mov	r2, sl
 23f7384:	4639      	mov	r1, r7
 23f7386:	4620      	mov	r0, r4
 23f7388:	f7ff fe79 	bl	23f707e <_ZN12FatPartition4initEP9SdSpiCardhm>
 23f738c:	b158      	cbz	r0, 23f73a6 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xea>
    m_vwd.close();
 23f738e:	f204 4644 	addw	r6, r4, #1092	; 0x444
 23f7392:	4630      	mov	r0, r6
 23f7394:	f7fd f8b4 	bl	23f4500 <_ZN7FatFile5closeEv>
    return m_vwd.openRoot(this);
 23f7398:	4621      	mov	r1, r4
 23f739a:	4630      	mov	r0, r6
 23f739c:	f7fc fea3 	bl	23f40e6 <_ZN7FatFile8openRootEP9FatVolume>
    if (!chdir()) {
 23f73a0:	b108      	cbz	r0, 23f73a6 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xea>
    if (setCwv || !m_cwv) {
 23f73a2:	4b05      	ldr	r3, [pc, #20]	; (23f73b8 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xfc>)
 23f73a4:	e7c2      	b.n	23f732c <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x70>
  m_fVol = nullptr;
 23f73a6:	2000      	movs	r0, #0
 23f73a8:	f8c5 0480 	str.w	r0, [r5, #1152]	; 0x480
}
 23f73ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f73b0:	1007aea4 	.word	0x1007aea4
 23f73b4:	1007aea8 	.word	0x1007aea8
 23f73b8:	1007ae9c 	.word	0x1007ae9c

023f73bc <_ZN8FsVolume4openEPKci>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char* path, oflag_t oflag) {
 23f73bc:	b538      	push	{r3, r4, r5, lr}
 23f73be:	4604      	mov	r4, r0
    Stream() {_timeout=1000;}
 23f73c0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 23f73c4:	2000      	movs	r0, #0
 23f73c6:	e9c4 0501 	strd	r0, r5, [r4, #4]
  FsBaseFile() = default;  // cppcheck-suppress uninitMemberVar
 23f73ca:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23f73ce:	4620      	mov	r0, r4
 23f73d0:	4d03      	ldr	r5, [pc, #12]	; (23f73e0 <_ZN8FsVolume4openEPKci+0x24>)
 23f73d2:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
 23f73d6:	f7ff ff2b 	bl	23f7230 <_ZN10FsBaseFile4openEP8FsVolumePKci>
  return tmpFile;
}
 23f73da:	4620      	mov	r0, r4
 23f73dc:	bd38      	pop	{r3, r4, r5, pc}
 23f73de:	bf00      	nop
 23f73e0:	023fea48 	.word	0x023fea48

023f73e4 <_Z8sdCsInith>:
 */
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) { pinMode(pin, OUTPUT); }
 23f73e4:	2101      	movs	r1, #1
 23f73e6:	f002 bef3 	b.w	23fa1d0 <pinMode>

023f73ea <_Z9sdCsWritehb>:
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level ? HIGH : LOW);
 23f73ea:	f002 bf02 	b.w	23fa1f2 <digitalWrite>

023f73ee <_ZN7FsCache4syncEv>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
 23f73ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 23f73f0:	7803      	ldrb	r3, [r0, #0]
bool FsCache::sync() {
 23f73f2:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 23f73f4:	07da      	lsls	r2, r3, #31
 23f73f6:	d51e      	bpl.n	23f7436 <_ZN7FsCache4syncEv+0x48>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
 23f73f8:	f100 0210 	add.w	r2, r0, #16
 23f73fc:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 23f7400:	9201      	str	r2, [sp, #4]
 23f7402:	f7fe f91c 	bl	23f563e <_ZN9SdSpiCard11writeSectorEmPKh>
 23f7406:	9a01      	ldr	r2, [sp, #4]
 23f7408:	4605      	mov	r5, r0
 23f740a:	b918      	cbnz	r0, 23f7414 <_ZN7FsCache4syncEv+0x26>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 23f740c:	2500      	movs	r5, #0
}
 23f740e:	4628      	mov	r0, r5
 23f7410:	b003      	add	sp, #12
 23f7412:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 23f7414:	7823      	ldrb	r3, [r4, #0]
 23f7416:	079b      	lsls	r3, r3, #30
 23f7418:	d404      	bmi.n	23f7424 <_ZN7FsCache4syncEv+0x36>
    m_status &= ~CACHE_STATUS_DIRTY;
 23f741a:	7823      	ldrb	r3, [r4, #0]
 23f741c:	f023 0301 	bic.w	r3, r3, #1
 23f7420:	7023      	strb	r3, [r4, #0]
 23f7422:	e7f4      	b.n	23f740e <_ZN7FsCache4syncEv+0x20>
      if (!m_blockDev->writeSector(m_sector + m_mirrorOffset, m_buffer)) {
 23f7424:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 23f7428:	6860      	ldr	r0, [r4, #4]
 23f742a:	4419      	add	r1, r3
 23f742c:	f7fe f907 	bl	23f563e <_ZN9SdSpiCard11writeSectorEmPKh>
 23f7430:	2800      	cmp	r0, #0
 23f7432:	d1f2      	bne.n	23f741a <_ZN7FsCache4syncEv+0x2c>
 23f7434:	e7ea      	b.n	23f740c <_ZN7FsCache4syncEv+0x1e>
  return true;
 23f7436:	2501      	movs	r5, #1
 23f7438:	e7e9      	b.n	23f740e <_ZN7FsCache4syncEv+0x20>

023f743a <_ZN7FsCache7prepareEmh>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
 23f743a:	b570      	push	{r4, r5, r6, lr}
  if (!m_blockDev) {
 23f743c:	6843      	ldr	r3, [r0, #4]
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
 23f743e:	4604      	mov	r4, r0
 23f7440:	460e      	mov	r6, r1
 23f7442:	4615      	mov	r5, r2
  if (!m_blockDev) {
 23f7444:	b90b      	cbnz	r3, 23f744a <_ZN7FsCache7prepareEmh+0x10>
  return nullptr;
 23f7446:	2000      	movs	r0, #0
}
 23f7448:	bd70      	pop	{r4, r5, r6, pc}
  if (m_sector != sector) {
 23f744a:	6883      	ldr	r3, [r0, #8]
 23f744c:	428b      	cmp	r3, r1
 23f744e:	d008      	beq.n	23f7462 <_ZN7FsCache7prepareEmh+0x28>
    if (!sync()) {
 23f7450:	f7ff ffcd 	bl	23f73ee <_ZN7FsCache4syncEv>
 23f7454:	2800      	cmp	r0, #0
 23f7456:	d0f6      	beq.n	23f7446 <_ZN7FsCache7prepareEmh+0xc>
    if (!(option & CACHE_OPTION_NO_READ)) {
 23f7458:	076b      	lsls	r3, r5, #29
 23f745a:	d50a      	bpl.n	23f7472 <_ZN7FsCache7prepareEmh+0x38>
    m_status = 0;
 23f745c:	2300      	movs	r3, #0
    m_sector = sector;
 23f745e:	60a6      	str	r6, [r4, #8]
    m_status = 0;
 23f7460:	7023      	strb	r3, [r4, #0]
  m_status |= option & CACHE_STATUS_MASK;
 23f7462:	4620      	mov	r0, r4
 23f7464:	7822      	ldrb	r2, [r4, #0]
 23f7466:	f005 0503 	and.w	r5, r5, #3
 23f746a:	4315      	orrs	r5, r2
 23f746c:	f800 5b10 	strb.w	r5, [r0], #16
  return m_buffer;
 23f7470:	e7ea      	b.n	23f7448 <_ZN7FsCache7prepareEmh+0xe>
      if (!m_blockDev->readSector(sector, m_buffer)) {
 23f7472:	4631      	mov	r1, r6
 23f7474:	6860      	ldr	r0, [r4, #4]
 23f7476:	f104 0210 	add.w	r2, r4, #16
 23f747a:	f7fe f899 	bl	23f55b0 <_ZN9SdSpiCard10readSectorEmPh>
 23f747e:	2800      	cmp	r0, #0
 23f7480:	d1ec      	bne.n	23f745c <_ZN7FsCache7prepareEmh+0x22>
 23f7482:	e7e0      	b.n	23f7446 <_ZN7FsCache7prepareEmh+0xc>

023f7484 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 23f7484:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 23f7486:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23f7488:	4604      	mov	r4, r0
      if (_M_manager)
 23f748a:	b113      	cbz	r3, 23f7492 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23f748c:	2203      	movs	r2, #3
 23f748e:	4601      	mov	r1, r0
 23f7490:	4798      	blx	r3
    }
 23f7492:	4620      	mov	r0, r4
 23f7494:	bd10      	pop	{r4, pc}
	...

023f7498 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23f7498:	4b01      	ldr	r3, [pc, #4]	; (23f74a0 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
 23f749a:	4a02      	ldr	r2, [pc, #8]	; (23f74a4 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
 23f749c:	601a      	str	r2, [r3, #0]
// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
        instance->systemEvent(event, param);
    }
}
 23f749e:	4770      	bx	lr
 23f74a0:	1007aeb0 	.word	0x1007aeb0
 23f74a4:	023ff959 	.word	0x023ff959

023f74a8 <cellular_credentials_set>:
DYNALIB_FN(5, hal_cellular, cellular_pdp_deactivate, cellular_result_t(void*))
DYNALIB_FN(6, hal_cellular, cellular_gprs_attach, cellular_result_t(CellularCredentials*, void*))
DYNALIB_FN(7, hal_cellular, cellular_gprs_detach, cellular_result_t(void*))
DYNALIB_FN(8, hal_cellular, cellular_fetch_ipconfig, cellular_result_t(CellularConfig*, void*))
DYNALIB_FN(9, hal_cellular, cellular_device_info, cellular_result_t(CellularDevice*, void*))
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
 23f74a8:	b509      	push	{r0, r3, lr}
 23f74aa:	4804      	ldr	r0, [pc, #16]	; (23f74bc <cellular_credentials_set+0x14>)
 23f74ac:	6800      	ldr	r0, [r0, #0]
 23f74ae:	4b04      	ldr	r3, [pc, #16]	; (23f74c0 <cellular_credentials_set+0x18>)
 23f74b0:	4403      	add	r3, r0
 23f74b2:	681b      	ldr	r3, [r3, #0]
 23f74b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f74b6:	9302      	str	r3, [sp, #8]
 23f74b8:	bd09      	pop	{r0, r3, pc}
 23f74ba:	0000      	.short	0x0000
 23f74bc:	1006a138 	.word	0x1006a138
 23f74c0:	0000006c 	.word	0x0000006c

023f74c4 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
 23f74c4:	b509      	push	{r0, r3, lr}
 23f74c6:	4804      	ldr	r0, [pc, #16]	; (23f74d8 <cellular_signal+0x14>)
 23f74c8:	6800      	ldr	r0, [r0, #0]
 23f74ca:	4b04      	ldr	r3, [pc, #16]	; (23f74dc <cellular_signal+0x18>)
 23f74cc:	4403      	add	r3, r0
 23f74ce:	681b      	ldr	r3, [r3, #0]
 23f74d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f74d2:	9302      	str	r3, [sp, #8]
 23f74d4:	bd09      	pop	{r0, r3, pc}
 23f74d6:	0000      	.short	0x0000
 23f74d8:	1006a138 	.word	0x1006a138
 23f74dc:	0000006c 	.word	0x0000006c

023f74e0 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 23f74e0:	b509      	push	{r0, r3, lr}
 23f74e2:	4804      	ldr	r0, [pc, #16]	; (23f74f4 <cellular_command+0x14>)
 23f74e4:	6800      	ldr	r0, [r0, #0]
 23f74e6:	4b04      	ldr	r3, [pc, #16]	; (23f74f8 <cellular_command+0x18>)
 23f74e8:	4403      	add	r3, r0
 23f74ea:	681b      	ldr	r3, [r3, #0]
 23f74ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f74ee:	9302      	str	r3, [sp, #8]
 23f74f0:	bd09      	pop	{r0, r3, pc}
 23f74f2:	0000      	.short	0x0000
 23f74f4:	1006a138 	.word	0x1006a138
 23f74f8:	0000006c 	.word	0x0000006c

023f74fc <cellular_set_active_sim>:
DYNALIB_FN(29, hal_cellular, cellular_sim_to_network_provider, cellular_result_t(void*))
DYNALIB_FN(30, hal_cellular, cellular_network_provider_data_get, CellularNetProvData(void*))
DYNALIB_FN(31, hal_cellular, cellular_lock, int(void*))
DYNALIB_FN(32, hal_cellular, cellular_unlock, void(void*))
DYNALIB_FN(33, hal_cellular, cellular_set_power_mode, void(int mode, void* reserved))
DYNALIB_FN(34, hal_cellular, cellular_set_active_sim, cellular_result_t(int, void*))
 23f74fc:	b509      	push	{r0, r3, lr}
 23f74fe:	4804      	ldr	r0, [pc, #16]	; (23f7510 <cellular_set_active_sim+0x14>)
 23f7500:	6800      	ldr	r0, [r0, #0]
 23f7502:	4b04      	ldr	r3, [pc, #16]	; (23f7514 <cellular_set_active_sim+0x18>)
 23f7504:	4403      	add	r3, r0
 23f7506:	681b      	ldr	r3, [r3, #0]
 23f7508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23f750c:	9302      	str	r3, [sp, #8]
 23f750e:	bd09      	pop	{r0, r3, pc}
 23f7510:	1006a138 	.word	0x1006a138
 23f7514:	0000006c 	.word	0x0000006c

023f7518 <cellular_get_active_sim>:
DYNALIB_FN(35, hal_cellular, cellular_get_active_sim, cellular_result_t(int*, void*))
 23f7518:	b509      	push	{r0, r3, lr}
 23f751a:	4804      	ldr	r0, [pc, #16]	; (23f752c <cellular_get_active_sim+0x14>)
 23f751c:	6800      	ldr	r0, [r0, #0]
 23f751e:	4b04      	ldr	r3, [pc, #16]	; (23f7530 <cellular_get_active_sim+0x18>)
 23f7520:	4403      	add	r3, r0
 23f7522:	681b      	ldr	r3, [r3, #0]
 23f7524:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 23f7528:	9302      	str	r3, [sp, #8]
 23f752a:	bd09      	pop	{r0, r3, pc}
 23f752c:	1006a138 	.word	0x1006a138
 23f7530:	0000006c 	.word	0x0000006c

023f7534 <cellular_credentials_clear>:
DYNALIB_FN(36, hal_cellular, cellular_credentials_clear, int(void*))
 23f7534:	b509      	push	{r0, r3, lr}
 23f7536:	4804      	ldr	r0, [pc, #16]	; (23f7548 <cellular_credentials_clear+0x14>)
 23f7538:	6800      	ldr	r0, [r0, #0]
 23f753a:	4b04      	ldr	r3, [pc, #16]	; (23f754c <cellular_credentials_clear+0x18>)
 23f753c:	4403      	add	r3, r0
 23f753e:	681b      	ldr	r3, [r3, #0]
 23f7540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 23f7544:	9302      	str	r3, [sp, #8]
 23f7546:	bd09      	pop	{r0, r3, pc}
 23f7548:	1006a138 	.word	0x1006a138
 23f754c:	0000006c 	.word	0x0000006c

023f7550 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23f7550:	b509      	push	{r0, r3, lr}
 23f7552:	4804      	ldr	r0, [pc, #16]	; (23f7564 <os_mutex_recursive_create+0x14>)
 23f7554:	6800      	ldr	r0, [r0, #0]
 23f7556:	4b04      	ldr	r3, [pc, #16]	; (23f7568 <os_mutex_recursive_create+0x18>)
 23f7558:	4403      	add	r3, r0
 23f755a:	681b      	ldr	r3, [r3, #0]
 23f755c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f755e:	9302      	str	r3, [sp, #8]
 23f7560:	bd09      	pop	{r0, r3, pc}
 23f7562:	0000      	.short	0x0000
 23f7564:	1006a138 	.word	0x1006a138
 23f7568:	00000030 	.word	0x00000030

023f756c <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, hal_watchdog_reset_flagged_deprecated, bool(void))
DYNALIB_FN(17, hal_core, hal_watchdog_refresh_deprecated, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
 23f756c:	b509      	push	{r0, r3, lr}
 23f756e:	4804      	ldr	r0, [pc, #16]	; (23f7580 <HAL_Core_Runtime_Info+0x14>)
 23f7570:	6800      	ldr	r0, [r0, #0]
 23f7572:	4b04      	ldr	r3, [pc, #16]	; (23f7584 <HAL_Core_Runtime_Info+0x18>)
 23f7574:	4403      	add	r3, r0
 23f7576:	681b      	ldr	r3, [r3, #0]
 23f7578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f757a:	9302      	str	r3, [sp, #8]
 23f757c:	bd09      	pop	{r0, r3, pc}
 23f757e:	0000      	.short	0x0000
 23f7580:	1006a138 	.word	0x1006a138
 23f7584:	0000001c 	.word	0x0000001c

023f7588 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23f7588:	b509      	push	{r0, r3, lr}
 23f758a:	4804      	ldr	r0, [pc, #16]	; (23f759c <HAL_RNG_GetRandomNumber+0x14>)
 23f758c:	6800      	ldr	r0, [r0, #0]
 23f758e:	4b04      	ldr	r3, [pc, #16]	; (23f75a0 <HAL_RNG_GetRandomNumber+0x18>)
 23f7590:	4403      	add	r3, r0
 23f7592:	681b      	ldr	r3, [r3, #0]
 23f7594:	685b      	ldr	r3, [r3, #4]
 23f7596:	9302      	str	r3, [sp, #8]
 23f7598:	bd09      	pop	{r0, r3, pc}
 23f759a:	0000      	.short	0x0000
 23f759c:	1006a138 	.word	0x1006a138
 23f75a0:	00000000 	.word	0x00000000

023f75a4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23f75a4:	b509      	push	{r0, r3, lr}
 23f75a6:	4804      	ldr	r0, [pc, #16]	; (23f75b8 <HAL_Delay_Microseconds+0x14>)
 23f75a8:	6800      	ldr	r0, [r0, #0]
 23f75aa:	4b04      	ldr	r3, [pc, #16]	; (23f75bc <HAL_Delay_Microseconds+0x18>)
 23f75ac:	4403      	add	r3, r0
 23f75ae:	681b      	ldr	r3, [r3, #0]
 23f75b0:	68db      	ldr	r3, [r3, #12]
 23f75b2:	9302      	str	r3, [sp, #8]
 23f75b4:	bd09      	pop	{r0, r3, pc}
 23f75b6:	0000      	.short	0x0000
 23f75b8:	1006a138 	.word	0x1006a138
 23f75bc:	00000000 	.word	0x00000000

023f75c0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23f75c0:	b509      	push	{r0, r3, lr}
 23f75c2:	4804      	ldr	r0, [pc, #16]	; (23f75d4 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23f75c4:	6800      	ldr	r0, [r0, #0]
 23f75c6:	4b04      	ldr	r3, [pc, #16]	; (23f75d8 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23f75c8:	4403      	add	r3, r0
 23f75ca:	681b      	ldr	r3, [r3, #0]
 23f75cc:	695b      	ldr	r3, [r3, #20]
 23f75ce:	9302      	str	r3, [sp, #8]
 23f75d0:	bd09      	pop	{r0, r3, pc}
 23f75d2:	0000      	.short	0x0000
 23f75d4:	1006a138 	.word	0x1006a138
 23f75d8:	00000000 	.word	0x00000000

023f75dc <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 23f75dc:	b509      	push	{r0, r3, lr}
 23f75de:	4804      	ldr	r0, [pc, #16]	; (23f75f0 <HAL_EEPROM_Init+0x14>)
 23f75e0:	6800      	ldr	r0, [r0, #0]
 23f75e2:	4b04      	ldr	r3, [pc, #16]	; (23f75f4 <HAL_EEPROM_Init+0x18>)
 23f75e4:	4403      	add	r3, r0
 23f75e6:	681b      	ldr	r3, [r3, #0]
 23f75e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f75ea:	9302      	str	r3, [sp, #8]
 23f75ec:	bd09      	pop	{r0, r3, pc}
 23f75ee:	0000      	.short	0x0000
 23f75f0:	1006a138 	.word	0x1006a138
 23f75f4:	00000000 	.word	0x00000000

023f75f8 <HAL_EEPROM_Length>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))
 23f75f8:	b509      	push	{r0, r3, lr}
 23f75fa:	4804      	ldr	r0, [pc, #16]	; (23f760c <HAL_EEPROM_Length+0x14>)
 23f75fc:	6800      	ldr	r0, [r0, #0]
 23f75fe:	4b04      	ldr	r3, [pc, #16]	; (23f7610 <HAL_EEPROM_Length+0x18>)
 23f7600:	4403      	add	r3, r0
 23f7602:	681b      	ldr	r3, [r3, #0]
 23f7604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f7606:	9302      	str	r3, [sp, #8]
 23f7608:	bd09      	pop	{r0, r3, pc}
 23f760a:	0000      	.short	0x0000
 23f760c:	1006a138 	.word	0x1006a138
 23f7610:	00000000 	.word	0x00000000

023f7614 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 23f7614:	b509      	push	{r0, r3, lr}
 23f7616:	4804      	ldr	r0, [pc, #16]	; (23f7628 <HAL_EEPROM_Get+0x14>)
 23f7618:	6800      	ldr	r0, [r0, #0]
 23f761a:	4b04      	ldr	r3, [pc, #16]	; (23f762c <HAL_EEPROM_Get+0x18>)
 23f761c:	4403      	add	r3, r0
 23f761e:	681b      	ldr	r3, [r3, #0]
 23f7620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f7622:	9302      	str	r3, [sp, #8]
 23f7624:	bd09      	pop	{r0, r3, pc}
 23f7626:	0000      	.short	0x0000
 23f7628:	1006a138 	.word	0x1006a138
 23f762c:	00000000 	.word	0x00000000

023f7630 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 23f7630:	b509      	push	{r0, r3, lr}
 23f7632:	4804      	ldr	r0, [pc, #16]	; (23f7644 <HAL_EEPROM_Put+0x14>)
 23f7634:	6800      	ldr	r0, [r0, #0]
 23f7636:	4b04      	ldr	r3, [pc, #16]	; (23f7648 <HAL_EEPROM_Put+0x18>)
 23f7638:	4403      	add	r3, r0
 23f763a:	681b      	ldr	r3, [r3, #0]
 23f763c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f763e:	9302      	str	r3, [sp, #8]
 23f7640:	bd09      	pop	{r0, r3, pc}
 23f7642:	0000      	.short	0x0000
 23f7644:	1006a138 	.word	0x1006a138
 23f7648:	00000000 	.word	0x00000000

023f764c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 23f764c:	b509      	push	{r0, r3, lr}
 23f764e:	4804      	ldr	r0, [pc, #16]	; (23f7660 <hal_rtc_time_is_valid+0x14>)
 23f7650:	6800      	ldr	r0, [r0, #0]
 23f7652:	4b04      	ldr	r3, [pc, #16]	; (23f7664 <hal_rtc_time_is_valid+0x18>)
 23f7654:	4403      	add	r3, r0
 23f7656:	681b      	ldr	r3, [r3, #0]
 23f7658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f765a:	9302      	str	r3, [sp, #8]
 23f765c:	bd09      	pop	{r0, r3, pc}
 23f765e:	0000      	.short	0x0000
 23f7660:	1006a138 	.word	0x1006a138
 23f7664:	00000000 	.word	0x00000000

023f7668 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 23f7668:	b509      	push	{r0, r3, lr}
 23f766a:	4804      	ldr	r0, [pc, #16]	; (23f767c <hal_timer_millis+0x14>)
 23f766c:	6800      	ldr	r0, [r0, #0]
 23f766e:	4b04      	ldr	r3, [pc, #16]	; (23f7680 <hal_timer_millis+0x18>)
 23f7670:	4403      	add	r3, r0
 23f7672:	681b      	ldr	r3, [r3, #0]
 23f7674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23f7676:	9302      	str	r3, [sp, #8]
 23f7678:	bd09      	pop	{r0, r3, pc}
 23f767a:	0000      	.short	0x0000
 23f767c:	1006a138 	.word	0x1006a138
 23f7680:	00000000 	.word	0x00000000

023f7684 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 23f7684:	b509      	push	{r0, r3, lr}
 23f7686:	4804      	ldr	r0, [pc, #16]	; (23f7698 <hal_rtc_get_time+0x14>)
 23f7688:	6800      	ldr	r0, [r0, #0]
 23f768a:	4b04      	ldr	r3, [pc, #16]	; (23f769c <hal_rtc_get_time+0x18>)
 23f768c:	4403      	add	r3, r0
 23f768e:	681b      	ldr	r3, [r3, #0]
 23f7690:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 23f7692:	9302      	str	r3, [sp, #8]
 23f7694:	bd09      	pop	{r0, r3, pc}
 23f7696:	0000      	.short	0x0000
 23f7698:	1006a138 	.word	0x1006a138
 23f769c:	00000000 	.word	0x00000000

023f76a0 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
 23f76a0:	b509      	push	{r0, r3, lr}
 23f76a2:	4804      	ldr	r0, [pc, #16]	; (23f76b4 <hal_rtc_set_time+0x14>)
 23f76a4:	6800      	ldr	r0, [r0, #0]
 23f76a6:	4b04      	ldr	r3, [pc, #16]	; (23f76b8 <hal_rtc_set_time+0x18>)
 23f76a8:	4403      	add	r3, r0
 23f76aa:	681b      	ldr	r3, [r3, #0]
 23f76ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 23f76ae:	9302      	str	r3, [sp, #8]
 23f76b0:	bd09      	pop	{r0, r3, pc}
 23f76b2:	0000      	.short	0x0000
 23f76b4:	1006a138 	.word	0x1006a138
 23f76b8:	00000000 	.word	0x00000000

023f76bc <hal_pin_map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
 23f76bc:	b509      	push	{r0, r3, lr}
 23f76be:	4804      	ldr	r0, [pc, #16]	; (23f76d0 <hal_pin_map+0x14>)
 23f76c0:	6800      	ldr	r0, [r0, #0]
 23f76c2:	4b04      	ldr	r3, [pc, #16]	; (23f76d4 <hal_pin_map+0x18>)
 23f76c4:	4403      	add	r3, r0
 23f76c6:	681b      	ldr	r3, [r3, #0]
 23f76c8:	681b      	ldr	r3, [r3, #0]
 23f76ca:	9302      	str	r3, [sp, #8]
 23f76cc:	bd09      	pop	{r0, r3, pc}
 23f76ce:	0000      	.short	0x0000
 23f76d0:	1006a138 	.word	0x1006a138
 23f76d4:	00000014 	.word	0x00000014

023f76d8 <hal_pin_validate_function>:
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
 23f76d8:	b509      	push	{r0, r3, lr}
 23f76da:	4804      	ldr	r0, [pc, #16]	; (23f76ec <hal_pin_validate_function+0x14>)
 23f76dc:	6800      	ldr	r0, [r0, #0]
 23f76de:	4b04      	ldr	r3, [pc, #16]	; (23f76f0 <hal_pin_validate_function+0x18>)
 23f76e0:	4403      	add	r3, r0
 23f76e2:	681b      	ldr	r3, [r3, #0]
 23f76e4:	685b      	ldr	r3, [r3, #4]
 23f76e6:	9302      	str	r3, [sp, #8]
 23f76e8:	bd09      	pop	{r0, r3, pc}
 23f76ea:	0000      	.short	0x0000
 23f76ec:	1006a138 	.word	0x1006a138
 23f76f0:	00000014 	.word	0x00000014

023f76f4 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23f76f4:	b509      	push	{r0, r3, lr}
 23f76f6:	4804      	ldr	r0, [pc, #16]	; (23f7708 <hal_gpio_mode+0x14>)
 23f76f8:	6800      	ldr	r0, [r0, #0]
 23f76fa:	4b04      	ldr	r3, [pc, #16]	; (23f770c <hal_gpio_mode+0x18>)
 23f76fc:	4403      	add	r3, r0
 23f76fe:	681b      	ldr	r3, [r3, #0]
 23f7700:	689b      	ldr	r3, [r3, #8]
 23f7702:	9302      	str	r3, [sp, #8]
 23f7704:	bd09      	pop	{r0, r3, pc}
 23f7706:	0000      	.short	0x0000
 23f7708:	1006a138 	.word	0x1006a138
 23f770c:	00000014 	.word	0x00000014

023f7710 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23f7710:	b509      	push	{r0, r3, lr}
 23f7712:	4804      	ldr	r0, [pc, #16]	; (23f7724 <hal_gpio_get_mode+0x14>)
 23f7714:	6800      	ldr	r0, [r0, #0]
 23f7716:	4b04      	ldr	r3, [pc, #16]	; (23f7728 <hal_gpio_get_mode+0x18>)
 23f7718:	4403      	add	r3, r0
 23f771a:	681b      	ldr	r3, [r3, #0]
 23f771c:	68db      	ldr	r3, [r3, #12]
 23f771e:	9302      	str	r3, [sp, #8]
 23f7720:	bd09      	pop	{r0, r3, pc}
 23f7722:	0000      	.short	0x0000
 23f7724:	1006a138 	.word	0x1006a138
 23f7728:	00000014 	.word	0x00000014

023f772c <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23f772c:	b509      	push	{r0, r3, lr}
 23f772e:	4804      	ldr	r0, [pc, #16]	; (23f7740 <hal_gpio_write+0x14>)
 23f7730:	6800      	ldr	r0, [r0, #0]
 23f7732:	4b04      	ldr	r3, [pc, #16]	; (23f7744 <hal_gpio_write+0x18>)
 23f7734:	4403      	add	r3, r0
 23f7736:	681b      	ldr	r3, [r3, #0]
 23f7738:	691b      	ldr	r3, [r3, #16]
 23f773a:	9302      	str	r3, [sp, #8]
 23f773c:	bd09      	pop	{r0, r3, pc}
 23f773e:	0000      	.short	0x0000
 23f7740:	1006a138 	.word	0x1006a138
 23f7744:	00000014 	.word	0x00000014

023f7748 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
 23f7748:	b509      	push	{r0, r3, lr}
 23f774a:	4804      	ldr	r0, [pc, #16]	; (23f775c <hal_gpio_read+0x14>)
 23f774c:	6800      	ldr	r0, [r0, #0]
 23f774e:	4b04      	ldr	r3, [pc, #16]	; (23f7760 <hal_gpio_read+0x18>)
 23f7750:	4403      	add	r3, r0
 23f7752:	681b      	ldr	r3, [r3, #0]
 23f7754:	695b      	ldr	r3, [r3, #20]
 23f7756:	9302      	str	r3, [sp, #8]
 23f7758:	bd09      	pop	{r0, r3, pc}
 23f775a:	0000      	.short	0x0000
 23f775c:	1006a138 	.word	0x1006a138
 23f7760:	00000014 	.word	0x00000014

023f7764 <hal_interrupt_attach>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
 23f7764:	b509      	push	{r0, r3, lr}
 23f7766:	4804      	ldr	r0, [pc, #16]	; (23f7778 <hal_interrupt_attach+0x14>)
 23f7768:	6800      	ldr	r0, [r0, #0]
 23f776a:	4b04      	ldr	r3, [pc, #16]	; (23f777c <hal_interrupt_attach+0x18>)
 23f776c:	4403      	add	r3, r0
 23f776e:	681b      	ldr	r3, [r3, #0]
 23f7770:	699b      	ldr	r3, [r3, #24]
 23f7772:	9302      	str	r3, [sp, #8]
 23f7774:	bd09      	pop	{r0, r3, pc}
 23f7776:	0000      	.short	0x0000
 23f7778:	1006a138 	.word	0x1006a138
 23f777c:	00000014 	.word	0x00000014

023f7780 <hal_interrupt_detach>:
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
 23f7780:	b509      	push	{r0, r3, lr}
 23f7782:	4804      	ldr	r0, [pc, #16]	; (23f7794 <hal_interrupt_detach+0x14>)
 23f7784:	6800      	ldr	r0, [r0, #0]
 23f7786:	4b04      	ldr	r3, [pc, #16]	; (23f7798 <hal_interrupt_detach+0x18>)
 23f7788:	4403      	add	r3, r0
 23f778a:	681b      	ldr	r3, [r3, #0]
 23f778c:	69db      	ldr	r3, [r3, #28]
 23f778e:	9302      	str	r3, [sp, #8]
 23f7790:	bd09      	pop	{r0, r3, pc}
 23f7792:	0000      	.short	0x0000
 23f7794:	1006a138 	.word	0x1006a138
 23f7798:	00000014 	.word	0x00000014

023f779c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 23f779c:	b509      	push	{r0, r3, lr}
 23f779e:	4804      	ldr	r0, [pc, #16]	; (23f77b0 <hal_adc_read+0x14>)
 23f77a0:	6800      	ldr	r0, [r0, #0]
 23f77a2:	4b04      	ldr	r3, [pc, #16]	; (23f77b4 <hal_adc_read+0x18>)
 23f77a4:	4403      	add	r3, r0
 23f77a6:	681b      	ldr	r3, [r3, #0]
 23f77a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f77aa:	9302      	str	r3, [sp, #8]
 23f77ac:	bd09      	pop	{r0, r3, pc}
 23f77ae:	0000      	.short	0x0000
 23f77b0:	1006a138 	.word	0x1006a138
 23f77b4:	00000014 	.word	0x00000014

023f77b8 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 23f77b8:	b509      	push	{r0, r3, lr}
 23f77ba:	4804      	ldr	r0, [pc, #16]	; (23f77cc <hal_i2c_set_speed+0x14>)
 23f77bc:	6800      	ldr	r0, [r0, #0]
 23f77be:	4b04      	ldr	r3, [pc, #16]	; (23f77d0 <hal_i2c_set_speed+0x18>)
 23f77c0:	4403      	add	r3, r0
 23f77c2:	681b      	ldr	r3, [r3, #0]
 23f77c4:	681b      	ldr	r3, [r3, #0]
 23f77c6:	9302      	str	r3, [sp, #8]
 23f77c8:	bd09      	pop	{r0, r3, pc}
 23f77ca:	0000      	.short	0x0000
 23f77cc:	1006a138 	.word	0x1006a138
 23f77d0:	00000010 	.word	0x00000010

023f77d4 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23f77d4:	b509      	push	{r0, r3, lr}
 23f77d6:	4804      	ldr	r0, [pc, #16]	; (23f77e8 <hal_i2c_begin+0x14>)
 23f77d8:	6800      	ldr	r0, [r0, #0]
 23f77da:	4b04      	ldr	r3, [pc, #16]	; (23f77ec <hal_i2c_begin+0x18>)
 23f77dc:	4403      	add	r3, r0
 23f77de:	681b      	ldr	r3, [r3, #0]
 23f77e0:	68db      	ldr	r3, [r3, #12]
 23f77e2:	9302      	str	r3, [sp, #8]
 23f77e4:	bd09      	pop	{r0, r3, pc}
 23f77e6:	0000      	.short	0x0000
 23f77e8:	1006a138 	.word	0x1006a138
 23f77ec:	00000010 	.word	0x00000010

023f77f0 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23f77f0:	b509      	push	{r0, r3, lr}
 23f77f2:	4804      	ldr	r0, [pc, #16]	; (23f7804 <hal_i2c_begin_transmission+0x14>)
 23f77f4:	6800      	ldr	r0, [r0, #0]
 23f77f6:	4b04      	ldr	r3, [pc, #16]	; (23f7808 <hal_i2c_begin_transmission+0x18>)
 23f77f8:	4403      	add	r3, r0
 23f77fa:	681b      	ldr	r3, [r3, #0]
 23f77fc:	699b      	ldr	r3, [r3, #24]
 23f77fe:	9302      	str	r3, [sp, #8]
 23f7800:	bd09      	pop	{r0, r3, pc}
 23f7802:	0000      	.short	0x0000
 23f7804:	1006a138 	.word	0x1006a138
 23f7808:	00000010 	.word	0x00000010

023f780c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23f780c:	b509      	push	{r0, r3, lr}
 23f780e:	4804      	ldr	r0, [pc, #16]	; (23f7820 <hal_i2c_end_transmission+0x14>)
 23f7810:	6800      	ldr	r0, [r0, #0]
 23f7812:	4b04      	ldr	r3, [pc, #16]	; (23f7824 <hal_i2c_end_transmission+0x18>)
 23f7814:	4403      	add	r3, r0
 23f7816:	681b      	ldr	r3, [r3, #0]
 23f7818:	69db      	ldr	r3, [r3, #28]
 23f781a:	9302      	str	r3, [sp, #8]
 23f781c:	bd09      	pop	{r0, r3, pc}
 23f781e:	0000      	.short	0x0000
 23f7820:	1006a138 	.word	0x1006a138
 23f7824:	00000010 	.word	0x00000010

023f7828 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23f7828:	b509      	push	{r0, r3, lr}
 23f782a:	4804      	ldr	r0, [pc, #16]	; (23f783c <hal_i2c_write+0x14>)
 23f782c:	6800      	ldr	r0, [r0, #0]
 23f782e:	4b04      	ldr	r3, [pc, #16]	; (23f7840 <hal_i2c_write+0x18>)
 23f7830:	4403      	add	r3, r0
 23f7832:	681b      	ldr	r3, [r3, #0]
 23f7834:	6a1b      	ldr	r3, [r3, #32]
 23f7836:	9302      	str	r3, [sp, #8]
 23f7838:	bd09      	pop	{r0, r3, pc}
 23f783a:	0000      	.short	0x0000
 23f783c:	1006a138 	.word	0x1006a138
 23f7840:	00000010 	.word	0x00000010

023f7844 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23f7844:	b509      	push	{r0, r3, lr}
 23f7846:	4804      	ldr	r0, [pc, #16]	; (23f7858 <hal_i2c_available+0x14>)
 23f7848:	6800      	ldr	r0, [r0, #0]
 23f784a:	4b04      	ldr	r3, [pc, #16]	; (23f785c <hal_i2c_available+0x18>)
 23f784c:	4403      	add	r3, r0
 23f784e:	681b      	ldr	r3, [r3, #0]
 23f7850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f7852:	9302      	str	r3, [sp, #8]
 23f7854:	bd09      	pop	{r0, r3, pc}
 23f7856:	0000      	.short	0x0000
 23f7858:	1006a138 	.word	0x1006a138
 23f785c:	00000010 	.word	0x00000010

023f7860 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23f7860:	b509      	push	{r0, r3, lr}
 23f7862:	4804      	ldr	r0, [pc, #16]	; (23f7874 <hal_i2c_read+0x14>)
 23f7864:	6800      	ldr	r0, [r0, #0]
 23f7866:	4b04      	ldr	r3, [pc, #16]	; (23f7878 <hal_i2c_read+0x18>)
 23f7868:	4403      	add	r3, r0
 23f786a:	681b      	ldr	r3, [r3, #0]
 23f786c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f786e:	9302      	str	r3, [sp, #8]
 23f7870:	bd09      	pop	{r0, r3, pc}
 23f7872:	0000      	.short	0x0000
 23f7874:	1006a138 	.word	0x1006a138
 23f7878:	00000010 	.word	0x00000010

023f787c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23f787c:	b509      	push	{r0, r3, lr}
 23f787e:	4804      	ldr	r0, [pc, #16]	; (23f7890 <hal_i2c_peek+0x14>)
 23f7880:	6800      	ldr	r0, [r0, #0]
 23f7882:	4b04      	ldr	r3, [pc, #16]	; (23f7894 <hal_i2c_peek+0x18>)
 23f7884:	4403      	add	r3, r0
 23f7886:	681b      	ldr	r3, [r3, #0]
 23f7888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f788a:	9302      	str	r3, [sp, #8]
 23f788c:	bd09      	pop	{r0, r3, pc}
 23f788e:	0000      	.short	0x0000
 23f7890:	1006a138 	.word	0x1006a138
 23f7894:	00000010 	.word	0x00000010

023f7898 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23f7898:	b509      	push	{r0, r3, lr}
 23f789a:	4804      	ldr	r0, [pc, #16]	; (23f78ac <hal_i2c_flush+0x14>)
 23f789c:	6800      	ldr	r0, [r0, #0]
 23f789e:	4b04      	ldr	r3, [pc, #16]	; (23f78b0 <hal_i2c_flush+0x18>)
 23f78a0:	4403      	add	r3, r0
 23f78a2:	681b      	ldr	r3, [r3, #0]
 23f78a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f78a6:	9302      	str	r3, [sp, #8]
 23f78a8:	bd09      	pop	{r0, r3, pc}
 23f78aa:	0000      	.short	0x0000
 23f78ac:	1006a138 	.word	0x1006a138
 23f78b0:	00000010 	.word	0x00000010

023f78b4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23f78b4:	b509      	push	{r0, r3, lr}
 23f78b6:	4804      	ldr	r0, [pc, #16]	; (23f78c8 <hal_i2c_is_enabled+0x14>)
 23f78b8:	6800      	ldr	r0, [r0, #0]
 23f78ba:	4b04      	ldr	r3, [pc, #16]	; (23f78cc <hal_i2c_is_enabled+0x18>)
 23f78bc:	4403      	add	r3, r0
 23f78be:	681b      	ldr	r3, [r3, #0]
 23f78c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f78c2:	9302      	str	r3, [sp, #8]
 23f78c4:	bd09      	pop	{r0, r3, pc}
 23f78c6:	0000      	.short	0x0000
 23f78c8:	1006a138 	.word	0x1006a138
 23f78cc:	00000010 	.word	0x00000010

023f78d0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23f78d0:	b509      	push	{r0, r3, lr}
 23f78d2:	4804      	ldr	r0, [pc, #16]	; (23f78e4 <hal_i2c_init+0x14>)
 23f78d4:	6800      	ldr	r0, [r0, #0]
 23f78d6:	4b04      	ldr	r3, [pc, #16]	; (23f78e8 <hal_i2c_init+0x18>)
 23f78d8:	4403      	add	r3, r0
 23f78da:	681b      	ldr	r3, [r3, #0]
 23f78dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f78de:	9302      	str	r3, [sp, #8]
 23f78e0:	bd09      	pop	{r0, r3, pc}
 23f78e2:	0000      	.short	0x0000
 23f78e4:	1006a138 	.word	0x1006a138
 23f78e8:	00000010 	.word	0x00000010

023f78ec <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
 23f78ec:	b509      	push	{r0, r3, lr}
 23f78ee:	4804      	ldr	r0, [pc, #16]	; (23f7900 <hal_i2c_lock+0x14>)
 23f78f0:	6800      	ldr	r0, [r0, #0]
 23f78f2:	4b04      	ldr	r3, [pc, #16]	; (23f7904 <hal_i2c_lock+0x18>)
 23f78f4:	4403      	add	r3, r0
 23f78f6:	681b      	ldr	r3, [r3, #0]
 23f78f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f78fa:	9302      	str	r3, [sp, #8]
 23f78fc:	bd09      	pop	{r0, r3, pc}
 23f78fe:	0000      	.short	0x0000
 23f7900:	1006a138 	.word	0x1006a138
 23f7904:	00000010 	.word	0x00000010

023f7908 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
 23f7908:	b509      	push	{r0, r3, lr}
 23f790a:	4804      	ldr	r0, [pc, #16]	; (23f791c <hal_i2c_unlock+0x14>)
 23f790c:	6800      	ldr	r0, [r0, #0]
 23f790e:	4b04      	ldr	r3, [pc, #16]	; (23f7920 <hal_i2c_unlock+0x18>)
 23f7910:	4403      	add	r3, r0
 23f7912:	681b      	ldr	r3, [r3, #0]
 23f7914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f7916:	9302      	str	r3, [sp, #8]
 23f7918:	bd09      	pop	{r0, r3, pc}
 23f791a:	0000      	.short	0x0000
 23f791c:	1006a138 	.word	0x1006a138
 23f7920:	00000010 	.word	0x00000010

023f7924 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 23f7924:	b509      	push	{r0, r3, lr}
 23f7926:	4804      	ldr	r0, [pc, #16]	; (23f7938 <hal_i2c_request_ex+0x14>)
 23f7928:	6800      	ldr	r0, [r0, #0]
 23f792a:	4b04      	ldr	r3, [pc, #16]	; (23f793c <hal_i2c_request_ex+0x18>)
 23f792c:	4403      	add	r3, r0
 23f792e:	681b      	ldr	r3, [r3, #0]
 23f7930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23f7932:	9302      	str	r3, [sp, #8]
 23f7934:	bd09      	pop	{r0, r3, pc}
 23f7936:	0000      	.short	0x0000
 23f7938:	1006a138 	.word	0x1006a138
 23f793c:	00000010 	.word	0x00000010

023f7940 <hal_i2c_transaction>:
DYNALIB_FN(21, hal_i2c, hal_i2c_sleep, int(hal_i2c_interface_t i2c, bool sleep, void* reserved))
DYNALIB_FN(22, hal_i2c, hal_i2c_end_transmission_ext, int(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(23, hal_i2c, hal_i2c_transaction, int(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, const hal_i2c_transmission_config_t*, void*))
 23f7940:	b509      	push	{r0, r3, lr}
 23f7942:	4804      	ldr	r0, [pc, #16]	; (23f7954 <hal_i2c_transaction+0x14>)
 23f7944:	6800      	ldr	r0, [r0, #0]
 23f7946:	4b04      	ldr	r3, [pc, #16]	; (23f7958 <hal_i2c_transaction+0x18>)
 23f7948:	4403      	add	r3, r0
 23f794a:	681b      	ldr	r3, [r3, #0]
 23f794c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23f794e:	9302      	str	r3, [sp, #8]
 23f7950:	bd09      	pop	{r0, r3, pc}
 23f7952:	0000      	.short	0x0000
 23f7954:	1006a138 	.word	0x1006a138
 23f7958:	00000010 	.word	0x00000010

023f795c <if_get_by_index>:
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
 23f795c:	b509      	push	{r0, r3, lr}
 23f795e:	4804      	ldr	r0, [pc, #16]	; (23f7970 <if_get_by_index+0x14>)
 23f7960:	6800      	ldr	r0, [r0, #0]
 23f7962:	4b04      	ldr	r3, [pc, #16]	; (23f7974 <if_get_by_index+0x18>)
 23f7964:	4403      	add	r3, r0
 23f7966:	681b      	ldr	r3, [r3, #0]
 23f7968:	699b      	ldr	r3, [r3, #24]
 23f796a:	9302      	str	r3, [sp, #8]
 23f796c:	bd09      	pop	{r0, r3, pc}
 23f796e:	0000      	.short	0x0000
 23f7970:	1006a138 	.word	0x1006a138
 23f7974:	00000054 	.word	0x00000054

023f7978 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23f7978:	b509      	push	{r0, r3, lr}
 23f797a:	4804      	ldr	r0, [pc, #16]	; (23f798c <inet_inet_ntop+0x14>)
 23f797c:	6800      	ldr	r0, [r0, #0]
 23f797e:	4b04      	ldr	r3, [pc, #16]	; (23f7990 <inet_inet_ntop+0x18>)
 23f7980:	4403      	add	r3, r0
 23f7982:	681b      	ldr	r3, [r3, #0]
 23f7984:	695b      	ldr	r3, [r3, #20]
 23f7986:	9302      	str	r3, [sp, #8]
 23f7988:	bd09      	pop	{r0, r3, pc}
 23f798a:	0000      	.short	0x0000
 23f798c:	1006a138 	.word	0x1006a138
 23f7990:	0000004c 	.word	0x0000004c

023f7994 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23f7994:	b509      	push	{r0, r3, lr}
 23f7996:	4804      	ldr	r0, [pc, #16]	; (23f79a8 <netdb_freeaddrinfo+0x14>)
 23f7998:	6800      	ldr	r0, [r0, #0]
 23f799a:	4b04      	ldr	r3, [pc, #16]	; (23f79ac <netdb_freeaddrinfo+0x18>)
 23f799c:	4403      	add	r3, r0
 23f799e:	681b      	ldr	r3, [r3, #0]
 23f79a0:	689b      	ldr	r3, [r3, #8]
 23f79a2:	9302      	str	r3, [sp, #8]
 23f79a4:	bd09      	pop	{r0, r3, pc}
 23f79a6:	0000      	.short	0x0000
 23f79a8:	1006a138 	.word	0x1006a138
 23f79ac:	00000050 	.word	0x00000050

023f79b0 <netdb_getaddrinfo_ex>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
DYNALIB_FN(4, hal_netdb, netdb_getnameinfo, int(const struct sockaddr*, socklen_t, char*, socklen_t, char*, socklen_t, int))
DYNALIB_FN(5, hal_netdb, netdb_getaddrinfo_ex, int(const char*, const char*, const struct addrinfo*, struct addrinfo**, if_t))
 23f79b0:	b509      	push	{r0, r3, lr}
 23f79b2:	4804      	ldr	r0, [pc, #16]	; (23f79c4 <netdb_getaddrinfo_ex+0x14>)
 23f79b4:	6800      	ldr	r0, [r0, #0]
 23f79b6:	4b04      	ldr	r3, [pc, #16]	; (23f79c8 <netdb_getaddrinfo_ex+0x18>)
 23f79b8:	4403      	add	r3, r0
 23f79ba:	681b      	ldr	r3, [r3, #0]
 23f79bc:	695b      	ldr	r3, [r3, #20]
 23f79be:	9302      	str	r3, [sp, #8]
 23f79c0:	bd09      	pop	{r0, r3, pc}
 23f79c2:	0000      	.short	0x0000
 23f79c4:	1006a138 	.word	0x1006a138
 23f79c8:	00000050 	.word	0x00000050

023f79cc <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 23f79cc:	b509      	push	{r0, r3, lr}
 23f79ce:	4804      	ldr	r0, [pc, #16]	; (23f79e0 <hal_spi_begin+0x14>)
 23f79d0:	6800      	ldr	r0, [r0, #0]
 23f79d2:	4b04      	ldr	r3, [pc, #16]	; (23f79e4 <hal_spi_begin+0x18>)
 23f79d4:	4403      	add	r3, r0
 23f79d6:	681b      	ldr	r3, [r3, #0]
 23f79d8:	681b      	ldr	r3, [r3, #0]
 23f79da:	9302      	str	r3, [sp, #8]
 23f79dc:	bd09      	pop	{r0, r3, pc}
 23f79de:	0000      	.short	0x0000
 23f79e0:	1006a138 	.word	0x1006a138
 23f79e4:	00000018 	.word	0x00000018

023f79e8 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
 23f79e8:	b509      	push	{r0, r3, lr}
 23f79ea:	4804      	ldr	r0, [pc, #16]	; (23f79fc <hal_spi_end+0x14>)
 23f79ec:	6800      	ldr	r0, [r0, #0]
 23f79ee:	4b04      	ldr	r3, [pc, #16]	; (23f7a00 <hal_spi_end+0x18>)
 23f79f0:	4403      	add	r3, r0
 23f79f2:	681b      	ldr	r3, [r3, #0]
 23f79f4:	685b      	ldr	r3, [r3, #4]
 23f79f6:	9302      	str	r3, [sp, #8]
 23f79f8:	bd09      	pop	{r0, r3, pc}
 23f79fa:	0000      	.short	0x0000
 23f79fc:	1006a138 	.word	0x1006a138
 23f7a00:	00000018 	.word	0x00000018

023f7a04 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 23f7a04:	b509      	push	{r0, r3, lr}
 23f7a06:	4804      	ldr	r0, [pc, #16]	; (23f7a18 <hal_spi_transfer+0x14>)
 23f7a08:	6800      	ldr	r0, [r0, #0]
 23f7a0a:	4b04      	ldr	r3, [pc, #16]	; (23f7a1c <hal_spi_transfer+0x18>)
 23f7a0c:	4403      	add	r3, r0
 23f7a0e:	681b      	ldr	r3, [r3, #0]
 23f7a10:	695b      	ldr	r3, [r3, #20]
 23f7a12:	9302      	str	r3, [sp, #8]
 23f7a14:	bd09      	pop	{r0, r3, pc}
 23f7a16:	0000      	.short	0x0000
 23f7a18:	1006a138 	.word	0x1006a138
 23f7a1c:	00000018 	.word	0x00000018

023f7a20 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23f7a20:	b509      	push	{r0, r3, lr}
 23f7a22:	4804      	ldr	r0, [pc, #16]	; (23f7a34 <hal_spi_init+0x14>)
 23f7a24:	6800      	ldr	r0, [r0, #0]
 23f7a26:	4b04      	ldr	r3, [pc, #16]	; (23f7a38 <hal_spi_init+0x18>)
 23f7a28:	4403      	add	r3, r0
 23f7a2a:	681b      	ldr	r3, [r3, #0]
 23f7a2c:	69db      	ldr	r3, [r3, #28]
 23f7a2e:	9302      	str	r3, [sp, #8]
 23f7a30:	bd09      	pop	{r0, r3, pc}
 23f7a32:	0000      	.short	0x0000
 23f7a34:	1006a138 	.word	0x1006a138
 23f7a38:	00000018 	.word	0x00000018

023f7a3c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23f7a3c:	b509      	push	{r0, r3, lr}
 23f7a3e:	4804      	ldr	r0, [pc, #16]	; (23f7a50 <hal_spi_is_enabled+0x14>)
 23f7a40:	6800      	ldr	r0, [r0, #0]
 23f7a42:	4b04      	ldr	r3, [pc, #16]	; (23f7a54 <hal_spi_is_enabled+0x18>)
 23f7a44:	4403      	add	r3, r0
 23f7a46:	681b      	ldr	r3, [r3, #0]
 23f7a48:	6a1b      	ldr	r3, [r3, #32]
 23f7a4a:	9302      	str	r3, [sp, #8]
 23f7a4c:	bd09      	pop	{r0, r3, pc}
 23f7a4e:	0000      	.short	0x0000
 23f7a50:	1006a138 	.word	0x1006a138
 23f7a54:	00000018 	.word	0x00000018

023f7a58 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 23f7a58:	b509      	push	{r0, r3, lr}
 23f7a5a:	4804      	ldr	r0, [pc, #16]	; (23f7a6c <hal_spi_info+0x14>)
 23f7a5c:	6800      	ldr	r0, [r0, #0]
 23f7a5e:	4b04      	ldr	r3, [pc, #16]	; (23f7a70 <hal_spi_info+0x18>)
 23f7a60:	4403      	add	r3, r0
 23f7a62:	681b      	ldr	r3, [r3, #0]
 23f7a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f7a66:	9302      	str	r3, [sp, #8]
 23f7a68:	bd09      	pop	{r0, r3, pc}
 23f7a6a:	0000      	.short	0x0000
 23f7a6c:	1006a138 	.word	0x1006a138
 23f7a70:	00000018 	.word	0x00000018

023f7a74 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
 23f7a74:	b509      	push	{r0, r3, lr}
 23f7a76:	4804      	ldr	r0, [pc, #16]	; (23f7a88 <hal_spi_transfer_dma+0x14>)
 23f7a78:	6800      	ldr	r0, [r0, #0]
 23f7a7a:	4b04      	ldr	r3, [pc, #16]	; (23f7a8c <hal_spi_transfer_dma+0x18>)
 23f7a7c:	4403      	add	r3, r0
 23f7a7e:	681b      	ldr	r3, [r3, #0]
 23f7a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f7a82:	9302      	str	r3, [sp, #8]
 23f7a84:	bd09      	pop	{r0, r3, pc}
 23f7a86:	0000      	.short	0x0000
 23f7a88:	1006a138 	.word	0x1006a138
 23f7a8c:	00000018 	.word	0x00000018

023f7a90 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 23f7a90:	b509      	push	{r0, r3, lr}
 23f7a92:	4804      	ldr	r0, [pc, #16]	; (23f7aa4 <hal_spi_transfer_dma_status+0x14>)
 23f7a94:	6800      	ldr	r0, [r0, #0]
 23f7a96:	4b04      	ldr	r3, [pc, #16]	; (23f7aa8 <hal_spi_transfer_dma_status+0x18>)
 23f7a98:	4403      	add	r3, r0
 23f7a9a:	681b      	ldr	r3, [r3, #0]
 23f7a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23f7a9e:	9302      	str	r3, [sp, #8]
 23f7aa0:	bd09      	pop	{r0, r3, pc}
 23f7aa2:	0000      	.short	0x0000
 23f7aa4:	1006a138 	.word	0x1006a138
 23f7aa8:	00000018 	.word	0x00000018

023f7aac <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 23f7aac:	b509      	push	{r0, r3, lr}
 23f7aae:	4804      	ldr	r0, [pc, #16]	; (23f7ac0 <hal_spi_set_settings+0x14>)
 23f7ab0:	6800      	ldr	r0, [r0, #0]
 23f7ab2:	4b04      	ldr	r3, [pc, #16]	; (23f7ac4 <hal_spi_set_settings+0x18>)
 23f7ab4:	4403      	add	r3, r0
 23f7ab6:	681b      	ldr	r3, [r3, #0]
 23f7ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f7aba:	9302      	str	r3, [sp, #8]
 23f7abc:	bd09      	pop	{r0, r3, pc}
 23f7abe:	0000      	.short	0x0000
 23f7ac0:	1006a138 	.word	0x1006a138
 23f7ac4:	00000018 	.word	0x00000018

023f7ac8 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23f7ac8:	b509      	push	{r0, r3, lr}
 23f7aca:	4804      	ldr	r0, [pc, #16]	; (23f7adc <hal_spi_acquire+0x14>)
 23f7acc:	6800      	ldr	r0, [r0, #0]
 23f7ace:	4b04      	ldr	r3, [pc, #16]	; (23f7ae0 <hal_spi_acquire+0x18>)
 23f7ad0:	4403      	add	r3, r0
 23f7ad2:	681b      	ldr	r3, [r3, #0]
 23f7ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f7ad6:	9302      	str	r3, [sp, #8]
 23f7ad8:	bd09      	pop	{r0, r3, pc}
 23f7ada:	0000      	.short	0x0000
 23f7adc:	1006a138 	.word	0x1006a138
 23f7ae0:	00000018 	.word	0x00000018

023f7ae4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23f7ae4:	b509      	push	{r0, r3, lr}
 23f7ae6:	4804      	ldr	r0, [pc, #16]	; (23f7af8 <hal_spi_release+0x14>)
 23f7ae8:	6800      	ldr	r0, [r0, #0]
 23f7aea:	4b04      	ldr	r3, [pc, #16]	; (23f7afc <hal_spi_release+0x18>)
 23f7aec:	4403      	add	r3, r0
 23f7aee:	681b      	ldr	r3, [r3, #0]
 23f7af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f7af2:	9302      	str	r3, [sp, #8]
 23f7af4:	bd09      	pop	{r0, r3, pc}
 23f7af6:	0000      	.short	0x0000
 23f7af8:	1006a138 	.word	0x1006a138
 23f7afc:	00000018 	.word	0x00000018

023f7b00 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23f7b00:	b509      	push	{r0, r3, lr}
 23f7b02:	4804      	ldr	r0, [pc, #16]	; (23f7b14 <hal_usart_write+0x14>)
 23f7b04:	6800      	ldr	r0, [r0, #0]
 23f7b06:	4b04      	ldr	r3, [pc, #16]	; (23f7b18 <hal_usart_write+0x18>)
 23f7b08:	4403      	add	r3, r0
 23f7b0a:	681b      	ldr	r3, [r3, #0]
 23f7b0c:	68db      	ldr	r3, [r3, #12]
 23f7b0e:	9302      	str	r3, [sp, #8]
 23f7b10:	bd09      	pop	{r0, r3, pc}
 23f7b12:	0000      	.short	0x0000
 23f7b14:	1006a138 	.word	0x1006a138
 23f7b18:	00000024 	.word	0x00000024

023f7b1c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23f7b1c:	b509      	push	{r0, r3, lr}
 23f7b1e:	4804      	ldr	r0, [pc, #16]	; (23f7b30 <hal_usart_available+0x14>)
 23f7b20:	6800      	ldr	r0, [r0, #0]
 23f7b22:	4b04      	ldr	r3, [pc, #16]	; (23f7b34 <hal_usart_available+0x18>)
 23f7b24:	4403      	add	r3, r0
 23f7b26:	681b      	ldr	r3, [r3, #0]
 23f7b28:	691b      	ldr	r3, [r3, #16]
 23f7b2a:	9302      	str	r3, [sp, #8]
 23f7b2c:	bd09      	pop	{r0, r3, pc}
 23f7b2e:	0000      	.short	0x0000
 23f7b30:	1006a138 	.word	0x1006a138
 23f7b34:	00000024 	.word	0x00000024

023f7b38 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23f7b38:	b509      	push	{r0, r3, lr}
 23f7b3a:	4804      	ldr	r0, [pc, #16]	; (23f7b4c <hal_usart_read+0x14>)
 23f7b3c:	6800      	ldr	r0, [r0, #0]
 23f7b3e:	4b04      	ldr	r3, [pc, #16]	; (23f7b50 <hal_usart_read+0x18>)
 23f7b40:	4403      	add	r3, r0
 23f7b42:	681b      	ldr	r3, [r3, #0]
 23f7b44:	695b      	ldr	r3, [r3, #20]
 23f7b46:	9302      	str	r3, [sp, #8]
 23f7b48:	bd09      	pop	{r0, r3, pc}
 23f7b4a:	0000      	.short	0x0000
 23f7b4c:	1006a138 	.word	0x1006a138
 23f7b50:	00000024 	.word	0x00000024

023f7b54 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23f7b54:	b509      	push	{r0, r3, lr}
 23f7b56:	4804      	ldr	r0, [pc, #16]	; (23f7b68 <hal_usart_peek+0x14>)
 23f7b58:	6800      	ldr	r0, [r0, #0]
 23f7b5a:	4b04      	ldr	r3, [pc, #16]	; (23f7b6c <hal_usart_peek+0x18>)
 23f7b5c:	4403      	add	r3, r0
 23f7b5e:	681b      	ldr	r3, [r3, #0]
 23f7b60:	699b      	ldr	r3, [r3, #24]
 23f7b62:	9302      	str	r3, [sp, #8]
 23f7b64:	bd09      	pop	{r0, r3, pc}
 23f7b66:	0000      	.short	0x0000
 23f7b68:	1006a138 	.word	0x1006a138
 23f7b6c:	00000024 	.word	0x00000024

023f7b70 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23f7b70:	b509      	push	{r0, r3, lr}
 23f7b72:	4804      	ldr	r0, [pc, #16]	; (23f7b84 <hal_usart_flush+0x14>)
 23f7b74:	6800      	ldr	r0, [r0, #0]
 23f7b76:	4b04      	ldr	r3, [pc, #16]	; (23f7b88 <hal_usart_flush+0x18>)
 23f7b78:	4403      	add	r3, r0
 23f7b7a:	681b      	ldr	r3, [r3, #0]
 23f7b7c:	69db      	ldr	r3, [r3, #28]
 23f7b7e:	9302      	str	r3, [sp, #8]
 23f7b80:	bd09      	pop	{r0, r3, pc}
 23f7b82:	0000      	.short	0x0000
 23f7b84:	1006a138 	.word	0x1006a138
 23f7b88:	00000024 	.word	0x00000024

023f7b8c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23f7b8c:	b509      	push	{r0, r3, lr}
 23f7b8e:	4804      	ldr	r0, [pc, #16]	; (23f7ba0 <hal_usart_is_enabled+0x14>)
 23f7b90:	6800      	ldr	r0, [r0, #0]
 23f7b92:	4b04      	ldr	r3, [pc, #16]	; (23f7ba4 <hal_usart_is_enabled+0x18>)
 23f7b94:	4403      	add	r3, r0
 23f7b96:	681b      	ldr	r3, [r3, #0]
 23f7b98:	6a1b      	ldr	r3, [r3, #32]
 23f7b9a:	9302      	str	r3, [sp, #8]
 23f7b9c:	bd09      	pop	{r0, r3, pc}
 23f7b9e:	0000      	.short	0x0000
 23f7ba0:	1006a138 	.word	0x1006a138
 23f7ba4:	00000024 	.word	0x00000024

023f7ba8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23f7ba8:	b509      	push	{r0, r3, lr}
 23f7baa:	4804      	ldr	r0, [pc, #16]	; (23f7bbc <hal_usart_available_data_for_write+0x14>)
 23f7bac:	6800      	ldr	r0, [r0, #0]
 23f7bae:	4b04      	ldr	r3, [pc, #16]	; (23f7bc0 <hal_usart_available_data_for_write+0x18>)
 23f7bb0:	4403      	add	r3, r0
 23f7bb2:	681b      	ldr	r3, [r3, #0]
 23f7bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f7bb6:	9302      	str	r3, [sp, #8]
 23f7bb8:	bd09      	pop	{r0, r3, pc}
 23f7bba:	0000      	.short	0x0000
 23f7bbc:	1006a138 	.word	0x1006a138
 23f7bc0:	00000024 	.word	0x00000024

023f7bc4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23f7bc4:	b509      	push	{r0, r3, lr}
 23f7bc6:	4804      	ldr	r0, [pc, #16]	; (23f7bd8 <hal_usart_init_ex+0x14>)
 23f7bc8:	6800      	ldr	r0, [r0, #0]
 23f7bca:	4b04      	ldr	r3, [pc, #16]	; (23f7bdc <hal_usart_init_ex+0x18>)
 23f7bcc:	4403      	add	r3, r0
 23f7bce:	681b      	ldr	r3, [r3, #0]
 23f7bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f7bd2:	9302      	str	r3, [sp, #8]
 23f7bd4:	bd09      	pop	{r0, r3, pc}
 23f7bd6:	0000      	.short	0x0000
 23f7bd8:	1006a138 	.word	0x1006a138
 23f7bdc:	00000024 	.word	0x00000024

023f7be0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23f7be0:	b509      	push	{r0, r3, lr}
 23f7be2:	4804      	ldr	r0, [pc, #16]	; (23f7bf4 <HAL_USB_USART_Init+0x14>)
 23f7be4:	6800      	ldr	r0, [r0, #0]
 23f7be6:	4b04      	ldr	r3, [pc, #16]	; (23f7bf8 <HAL_USB_USART_Init+0x18>)
 23f7be8:	4403      	add	r3, r0
 23f7bea:	681b      	ldr	r3, [r3, #0]
 23f7bec:	681b      	ldr	r3, [r3, #0]
 23f7bee:	9302      	str	r3, [sp, #8]
 23f7bf0:	bd09      	pop	{r0, r3, pc}
 23f7bf2:	0000      	.short	0x0000
 23f7bf4:	1006a138 	.word	0x1006a138
 23f7bf8:	00000034 	.word	0x00000034

023f7bfc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23f7bfc:	b509      	push	{r0, r3, lr}
 23f7bfe:	4804      	ldr	r0, [pc, #16]	; (23f7c10 <HAL_USB_USART_Begin+0x14>)
 23f7c00:	6800      	ldr	r0, [r0, #0]
 23f7c02:	4b04      	ldr	r3, [pc, #16]	; (23f7c14 <HAL_USB_USART_Begin+0x18>)
 23f7c04:	4403      	add	r3, r0
 23f7c06:	681b      	ldr	r3, [r3, #0]
 23f7c08:	685b      	ldr	r3, [r3, #4]
 23f7c0a:	9302      	str	r3, [sp, #8]
 23f7c0c:	bd09      	pop	{r0, r3, pc}
 23f7c0e:	0000      	.short	0x0000
 23f7c10:	1006a138 	.word	0x1006a138
 23f7c14:	00000034 	.word	0x00000034

023f7c18 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN_WRAP(4, hal_usb, HAL_USB_USART_Available_Data, protected, int32_t(HAL_USB_USART_Serial))
 23f7c18:	b509      	push	{r0, r3, lr}
 23f7c1a:	4804      	ldr	r0, [pc, #16]	; (23f7c2c <HAL_USB_USART_Available_Data+0x14>)
 23f7c1c:	6800      	ldr	r0, [r0, #0]
 23f7c1e:	4b04      	ldr	r3, [pc, #16]	; (23f7c30 <HAL_USB_USART_Available_Data+0x18>)
 23f7c20:	4403      	add	r3, r0
 23f7c22:	681b      	ldr	r3, [r3, #0]
 23f7c24:	691b      	ldr	r3, [r3, #16]
 23f7c26:	9302      	str	r3, [sp, #8]
 23f7c28:	bd09      	pop	{r0, r3, pc}
 23f7c2a:	0000      	.short	0x0000
 23f7c2c:	1006a138 	.word	0x1006a138
 23f7c30:	00000034 	.word	0x00000034

023f7c34 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN_WRAP(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, protected, int32_t(HAL_USB_USART_Serial))
 23f7c34:	b509      	push	{r0, r3, lr}
 23f7c36:	4804      	ldr	r0, [pc, #16]	; (23f7c48 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23f7c38:	6800      	ldr	r0, [r0, #0]
 23f7c3a:	4b04      	ldr	r3, [pc, #16]	; (23f7c4c <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23f7c3c:	4403      	add	r3, r0
 23f7c3e:	681b      	ldr	r3, [r3, #0]
 23f7c40:	695b      	ldr	r3, [r3, #20]
 23f7c42:	9302      	str	r3, [sp, #8]
 23f7c44:	bd09      	pop	{r0, r3, pc}
 23f7c46:	0000      	.short	0x0000
 23f7c48:	1006a138 	.word	0x1006a138
 23f7c4c:	00000034 	.word	0x00000034

023f7c50 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN_WRAP(6, hal_usb, HAL_USB_USART_Receive_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f7c50:	b509      	push	{r0, r3, lr}
 23f7c52:	4804      	ldr	r0, [pc, #16]	; (23f7c64 <HAL_USB_USART_Receive_Data+0x14>)
 23f7c54:	6800      	ldr	r0, [r0, #0]
 23f7c56:	4b04      	ldr	r3, [pc, #16]	; (23f7c68 <HAL_USB_USART_Receive_Data+0x18>)
 23f7c58:	4403      	add	r3, r0
 23f7c5a:	681b      	ldr	r3, [r3, #0]
 23f7c5c:	699b      	ldr	r3, [r3, #24]
 23f7c5e:	9302      	str	r3, [sp, #8]
 23f7c60:	bd09      	pop	{r0, r3, pc}
 23f7c62:	0000      	.short	0x0000
 23f7c64:	1006a138 	.word	0x1006a138
 23f7c68:	00000034 	.word	0x00000034

023f7c6c <HAL_USB_USART_Send_Data>:
DYNALIB_FN_WRAP(7, hal_usb, HAL_USB_USART_Send_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f7c6c:	b509      	push	{r0, r3, lr}
 23f7c6e:	4804      	ldr	r0, [pc, #16]	; (23f7c80 <HAL_USB_USART_Send_Data+0x14>)
 23f7c70:	6800      	ldr	r0, [r0, #0]
 23f7c72:	4b04      	ldr	r3, [pc, #16]	; (23f7c84 <HAL_USB_USART_Send_Data+0x18>)
 23f7c74:	4403      	add	r3, r0
 23f7c76:	681b      	ldr	r3, [r3, #0]
 23f7c78:	69db      	ldr	r3, [r3, #28]
 23f7c7a:	9302      	str	r3, [sp, #8]
 23f7c7c:	bd09      	pop	{r0, r3, pc}
 23f7c7e:	0000      	.short	0x0000
 23f7c80:	1006a138 	.word	0x1006a138
 23f7c84:	00000034 	.word	0x00000034

023f7c88 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN_WRAP(8, hal_usb, HAL_USB_USART_Flush_Data, protected, void(HAL_USB_USART_Serial))
 23f7c88:	b509      	push	{r0, r3, lr}
 23f7c8a:	4804      	ldr	r0, [pc, #16]	; (23f7c9c <HAL_USB_USART_Flush_Data+0x14>)
 23f7c8c:	6800      	ldr	r0, [r0, #0]
 23f7c8e:	4b04      	ldr	r3, [pc, #16]	; (23f7ca0 <HAL_USB_USART_Flush_Data+0x18>)
 23f7c90:	4403      	add	r3, r0
 23f7c92:	681b      	ldr	r3, [r3, #0]
 23f7c94:	6a1b      	ldr	r3, [r3, #32]
 23f7c96:	9302      	str	r3, [sp, #8]
 23f7c98:	bd09      	pop	{r0, r3, pc}
 23f7c9a:	0000      	.short	0x0000
 23f7c9c:	1006a138 	.word	0x1006a138
 23f7ca0:	00000034 	.word	0x00000034

023f7ca4 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 23f7ca4:	b509      	push	{r0, r3, lr}
 23f7ca6:	4804      	ldr	r0, [pc, #16]	; (23f7cb8 <HAL_USB_USART_Is_Connected+0x14>)
 23f7ca8:	6800      	ldr	r0, [r0, #0]
 23f7caa:	4b04      	ldr	r3, [pc, #16]	; (23f7cbc <HAL_USB_USART_Is_Connected+0x18>)
 23f7cac:	4403      	add	r3, r0
 23f7cae:	681b      	ldr	r3, [r3, #0]
 23f7cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f7cb2:	9302      	str	r3, [sp, #8]
 23f7cb4:	bd09      	pop	{r0, r3, pc}
 23f7cb6:	0000      	.short	0x0000
 23f7cb8:	1006a138 	.word	0x1006a138
 23f7cbc:	00000034 	.word	0x00000034

023f7cc0 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
 23f7cc0:	b509      	push	{r0, r3, lr}
 23f7cc2:	4804      	ldr	r0, [pc, #16]	; (23f7cd4 <diag_get_source+0x14>)
 23f7cc4:	6800      	ldr	r0, [r0, #0]
 23f7cc6:	4b04      	ldr	r3, [pc, #16]	; (23f7cd8 <diag_get_source+0x18>)
 23f7cc8:	4403      	add	r3, r0
 23f7cca:	681b      	ldr	r3, [r3, #0]
 23f7ccc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 23f7cd0:	9302      	str	r3, [sp, #8]
 23f7cd2:	bd09      	pop	{r0, r3, pc}
 23f7cd4:	1006a138 	.word	0x1006a138
 23f7cd8:	00000048 	.word	0x00000048

023f7cdc <panic_ext>:
DYNALIB_FN(48, services, devicetree_tree_lock, int(void*))
DYNALIB_FN(49, services, devicetree_tree_get, int(void*, uint32_t, void*))
DYNALIB_FN(50, services, devicetree_string_dictionary_lookup, const char*(uint32_t, void*))
DYNALIB_FN(51, services, devicetree_hash_string, uint32_t(const char*, size_t))
DYNALIB_FN(52, services, security_mode_get, int(void*))
DYNALIB_FN(53, services, panic_ext, void(const PanicData*, void*))
 23f7cdc:	b509      	push	{r0, r3, lr}
 23f7cde:	4804      	ldr	r0, [pc, #16]	; (23f7cf0 <panic_ext+0x14>)
 23f7ce0:	6800      	ldr	r0, [r0, #0]
 23f7ce2:	4b04      	ldr	r3, [pc, #16]	; (23f7cf4 <panic_ext+0x18>)
 23f7ce4:	4403      	add	r3, r0
 23f7ce6:	681b      	ldr	r3, [r3, #0]
 23f7ce8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 23f7cec:	9302      	str	r3, [sp, #8]
 23f7cee:	bd09      	pop	{r0, r3, pc}
 23f7cf0:	1006a138 	.word	0x1006a138
 23f7cf4:	00000048 	.word	0x00000048

023f7cf8 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 23f7cf8:	b509      	push	{r0, r3, lr}
 23f7cfa:	4804      	ldr	r0, [pc, #16]	; (23f7d0c <system_mode+0x14>)
 23f7cfc:	6800      	ldr	r0, [r0, #0]
 23f7cfe:	4b04      	ldr	r3, [pc, #16]	; (23f7d10 <system_mode+0x18>)
 23f7d00:	4403      	add	r3, r0
 23f7d02:	681b      	ldr	r3, [r3, #0]
 23f7d04:	681b      	ldr	r3, [r3, #0]
 23f7d06:	9302      	str	r3, [sp, #8]
 23f7d08:	bd09      	pop	{r0, r3, pc}
 23f7d0a:	0000      	.short	0x0000
 23f7d0c:	1006a138 	.word	0x1006a138
 23f7d10:	00000008 	.word	0x00000008

023f7d14 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23f7d14:	b509      	push	{r0, r3, lr}
 23f7d16:	4804      	ldr	r0, [pc, #16]	; (23f7d28 <set_system_mode+0x14>)
 23f7d18:	6800      	ldr	r0, [r0, #0]
 23f7d1a:	4b04      	ldr	r3, [pc, #16]	; (23f7d2c <set_system_mode+0x18>)
 23f7d1c:	4403      	add	r3, r0
 23f7d1e:	681b      	ldr	r3, [r3, #0]
 23f7d20:	685b      	ldr	r3, [r3, #4]
 23f7d22:	9302      	str	r3, [sp, #8]
 23f7d24:	bd09      	pop	{r0, r3, pc}
 23f7d26:	0000      	.short	0x0000
 23f7d28:	1006a138 	.word	0x1006a138
 23f7d2c:	00000008 	.word	0x00000008

023f7d30 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler_deprecated, void(void*))
DYNALIB_FN(3, system, system_firmwareUpdate_deprecated, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer_deprecated, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23f7d30:	b509      	push	{r0, r3, lr}
 23f7d32:	4804      	ldr	r0, [pc, #16]	; (23f7d44 <system_delay_ms+0x14>)
 23f7d34:	6800      	ldr	r0, [r0, #0]
 23f7d36:	4b04      	ldr	r3, [pc, #16]	; (23f7d48 <system_delay_ms+0x18>)
 23f7d38:	4403      	add	r3, r0
 23f7d3a:	681b      	ldr	r3, [r3, #0]
 23f7d3c:	695b      	ldr	r3, [r3, #20]
 23f7d3e:	9302      	str	r3, [sp, #8]
 23f7d40:	bd09      	pop	{r0, r3, pc}
 23f7d42:	0000      	.short	0x0000
 23f7d44:	1006a138 	.word	0x1006a138
 23f7d48:	00000008 	.word	0x00000008

023f7d4c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23f7d4c:	b509      	push	{r0, r3, lr}
 23f7d4e:	4804      	ldr	r0, [pc, #16]	; (23f7d60 <system_thread_set_state+0x14>)
 23f7d50:	6800      	ldr	r0, [r0, #0]
 23f7d52:	4b04      	ldr	r3, [pc, #16]	; (23f7d64 <system_thread_set_state+0x18>)
 23f7d54:	4403      	add	r3, r0
 23f7d56:	681b      	ldr	r3, [r3, #0]
 23f7d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f7d5a:	9302      	str	r3, [sp, #8]
 23f7d5c:	bd09      	pop	{r0, r3, pc}
 23f7d5e:	0000      	.short	0x0000
 23f7d60:	1006a138 	.word	0x1006a138
 23f7d64:	00000008 	.word	0x00000008

023f7d68 <system_version_info>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
 23f7d68:	b509      	push	{r0, r3, lr}
 23f7d6a:	4804      	ldr	r0, [pc, #16]	; (23f7d7c <system_version_info+0x14>)
 23f7d6c:	6800      	ldr	r0, [r0, #0]
 23f7d6e:	4b04      	ldr	r3, [pc, #16]	; (23f7d80 <system_version_info+0x18>)
 23f7d70:	4403      	add	r3, r0
 23f7d72:	681b      	ldr	r3, [r3, #0]
 23f7d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f7d76:	9302      	str	r3, [sp, #8]
 23f7d78:	bd09      	pop	{r0, r3, pc}
 23f7d7a:	0000      	.short	0x0000
 23f7d7c:	1006a138 	.word	0x1006a138
 23f7d80:	00000008 	.word	0x00000008

023f7d84 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN_WRAP(16, system, Spark_Prepare_For_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN_WRAP(17, system, Spark_Save_Firmware_Chunk, protected, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN_WRAP(18, system, Spark_Finish_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 23f7d84:	b509      	push	{r0, r3, lr}
 23f7d86:	4804      	ldr	r0, [pc, #16]	; (23f7d98 <application_thread_current+0x14>)
 23f7d88:	6800      	ldr	r0, [r0, #0]
 23f7d8a:	4b04      	ldr	r3, [pc, #16]	; (23f7d9c <application_thread_current+0x18>)
 23f7d8c:	4403      	add	r3, r0
 23f7d8e:	681b      	ldr	r3, [r3, #0]
 23f7d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f7d92:	9302      	str	r3, [sp, #8]
 23f7d94:	bd09      	pop	{r0, r3, pc}
 23f7d96:	0000      	.short	0x0000
 23f7d98:	1006a138 	.word	0x1006a138
 23f7d9c:	00000008 	.word	0x00000008

023f7da0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 23f7da0:	b509      	push	{r0, r3, lr}
 23f7da2:	4804      	ldr	r0, [pc, #16]	; (23f7db4 <application_thread_invoke+0x14>)
 23f7da4:	6800      	ldr	r0, [r0, #0]
 23f7da6:	4b04      	ldr	r3, [pc, #16]	; (23f7db8 <application_thread_invoke+0x18>)
 23f7da8:	4403      	add	r3, r0
 23f7daa:	681b      	ldr	r3, [r3, #0]
 23f7dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f7dae:	9302      	str	r3, [sp, #8]
 23f7db0:	bd09      	pop	{r0, r3, pc}
 23f7db2:	0000      	.short	0x0000
 23f7db4:	1006a138 	.word	0x1006a138
 23f7db8:	00000008 	.word	0x00000008

023f7dbc <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 23f7dbc:	b509      	push	{r0, r3, lr}
 23f7dbe:	4804      	ldr	r0, [pc, #16]	; (23f7dd0 <system_thread_get_state+0x14>)
 23f7dc0:	6800      	ldr	r0, [r0, #0]
 23f7dc2:	4b04      	ldr	r3, [pc, #16]	; (23f7dd4 <system_thread_get_state+0x18>)
 23f7dc4:	4403      	add	r3, r0
 23f7dc6:	681b      	ldr	r3, [r3, #0]
 23f7dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f7dca:	9302      	str	r3, [sp, #8]
 23f7dcc:	bd09      	pop	{r0, r3, pc}
 23f7dce:	0000      	.short	0x0000
 23f7dd0:	1006a138 	.word	0x1006a138
 23f7dd4:	00000008 	.word	0x00000008

023f7dd8 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
 23f7dd8:	b509      	push	{r0, r3, lr}
 23f7dda:	4804      	ldr	r0, [pc, #16]	; (23f7dec <system_notify_time_changed+0x14>)
 23f7ddc:	6800      	ldr	r0, [r0, #0]
 23f7dde:	4b04      	ldr	r3, [pc, #16]	; (23f7df0 <system_notify_time_changed+0x18>)
 23f7de0:	4403      	add	r3, r0
 23f7de2:	681b      	ldr	r3, [r3, #0]
 23f7de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23f7de6:	9302      	str	r3, [sp, #8]
 23f7de8:	bd09      	pop	{r0, r3, pc}
 23f7dea:	0000      	.short	0x0000
 23f7dec:	1006a138 	.word	0x1006a138
 23f7df0:	00000008 	.word	0x00000008

023f7df4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23f7df4:	b509      	push	{r0, r3, lr}
 23f7df6:	4804      	ldr	r0, [pc, #16]	; (23f7e08 <system_ctrl_set_app_request_handler+0x14>)
 23f7df8:	6800      	ldr	r0, [r0, #0]
 23f7dfa:	4b04      	ldr	r3, [pc, #16]	; (23f7e0c <system_ctrl_set_app_request_handler+0x18>)
 23f7dfc:	4403      	add	r3, r0
 23f7dfe:	681b      	ldr	r3, [r3, #0]
 23f7e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23f7e04:	9302      	str	r3, [sp, #8]
 23f7e06:	bd09      	pop	{r0, r3, pc}
 23f7e08:	1006a138 	.word	0x1006a138
 23f7e0c:	00000008 	.word	0x00000008

023f7e10 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23f7e10:	b509      	push	{r0, r3, lr}
 23f7e12:	4804      	ldr	r0, [pc, #16]	; (23f7e24 <system_ctrl_set_result+0x14>)
 23f7e14:	6800      	ldr	r0, [r0, #0]
 23f7e16:	4b04      	ldr	r3, [pc, #16]	; (23f7e28 <system_ctrl_set_result+0x18>)
 23f7e18:	4403      	add	r3, r0
 23f7e1a:	681b      	ldr	r3, [r3, #0]
 23f7e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23f7e20:	9302      	str	r3, [sp, #8]
 23f7e22:	bd09      	pop	{r0, r3, pc}
 23f7e24:	1006a138 	.word	0x1006a138
 23f7e28:	00000008 	.word	0x00000008

023f7e2c <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
 23f7e2c:	b509      	push	{r0, r3, lr}
 23f7e2e:	4804      	ldr	r0, [pc, #16]	; (23f7e40 <system_power_management_set_config+0x14>)
 23f7e30:	6800      	ldr	r0, [r0, #0]
 23f7e32:	4b04      	ldr	r3, [pc, #16]	; (23f7e44 <system_power_management_set_config+0x18>)
 23f7e34:	4403      	add	r3, r0
 23f7e36:	681b      	ldr	r3, [r3, #0]
 23f7e38:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 23f7e3c:	9302      	str	r3, [sp, #8]
 23f7e3e:	bd09      	pop	{r0, r3, pc}
 23f7e40:	1006a138 	.word	0x1006a138
 23f7e44:	00000008 	.word	0x00000008

023f7e48 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 23f7e48:	b509      	push	{r0, r3, lr}
 23f7e4a:	4804      	ldr	r0, [pc, #16]	; (23f7e5c <system_reset+0x14>)
 23f7e4c:	6800      	ldr	r0, [r0, #0]
 23f7e4e:	4b04      	ldr	r3, [pc, #16]	; (23f7e60 <system_reset+0x18>)
 23f7e50:	4403      	add	r3, r0
 23f7e52:	681b      	ldr	r3, [r3, #0]
 23f7e54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 23f7e58:	9302      	str	r3, [sp, #8]
 23f7e5a:	bd09      	pop	{r0, r3, pc}
 23f7e5c:	1006a138 	.word	0x1006a138
 23f7e60:	00000008 	.word	0x00000008

023f7e64 <system_power_management_get_config>:

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX1 + 2, system, system_power_management_get_config, int(hal_power_config*, void*))
 23f7e64:	b509      	push	{r0, r3, lr}
 23f7e66:	4804      	ldr	r0, [pc, #16]	; (23f7e78 <system_power_management_get_config+0x14>)
 23f7e68:	6800      	ldr	r0, [r0, #0]
 23f7e6a:	4b04      	ldr	r3, [pc, #16]	; (23f7e7c <system_power_management_get_config+0x18>)
 23f7e6c:	4403      	add	r3, r0
 23f7e6e:	681b      	ldr	r3, [r3, #0]
 23f7e70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 23f7e74:	9302      	str	r3, [sp, #8]
 23f7e76:	bd09      	pop	{r0, r3, pc}
 23f7e78:	1006a138 	.word	0x1006a138
 23f7e7c:	00000008 	.word	0x00000008

023f7e80 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 23f7e80:	b509      	push	{r0, r3, lr}
 23f7e82:	4804      	ldr	r0, [pc, #16]	; (23f7e94 <spark_function+0x14>)
 23f7e84:	6800      	ldr	r0, [r0, #0]
 23f7e86:	4b04      	ldr	r3, [pc, #16]	; (23f7e98 <spark_function+0x18>)
 23f7e88:	4403      	add	r3, r0
 23f7e8a:	681b      	ldr	r3, [r3, #0]
 23f7e8c:	685b      	ldr	r3, [r3, #4]
 23f7e8e:	9302      	str	r3, [sp, #8]
 23f7e90:	bd09      	pop	{r0, r3, pc}
 23f7e92:	0000      	.short	0x0000
 23f7e94:	1006a138 	.word	0x1006a138
 23f7e98:	0000002c 	.word	0x0000002c

023f7e9c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23f7e9c:	b509      	push	{r0, r3, lr}
 23f7e9e:	4804      	ldr	r0, [pc, #16]	; (23f7eb0 <spark_process+0x14>)
 23f7ea0:	6800      	ldr	r0, [r0, #0]
 23f7ea2:	4b04      	ldr	r3, [pc, #16]	; (23f7eb4 <spark_process+0x18>)
 23f7ea4:	4403      	add	r3, r0
 23f7ea6:	681b      	ldr	r3, [r3, #0]
 23f7ea8:	689b      	ldr	r3, [r3, #8]
 23f7eaa:	9302      	str	r3, [sp, #8]
 23f7eac:	bd09      	pop	{r0, r3, pc}
 23f7eae:	0000      	.short	0x0000
 23f7eb0:	1006a138 	.word	0x1006a138
 23f7eb4:	0000002c 	.word	0x0000002c

023f7eb8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 23f7eb8:	b509      	push	{r0, r3, lr}
 23f7eba:	4804      	ldr	r0, [pc, #16]	; (23f7ecc <spark_cloud_flag_connect+0x14>)
 23f7ebc:	6800      	ldr	r0, [r0, #0]
 23f7ebe:	4b04      	ldr	r3, [pc, #16]	; (23f7ed0 <spark_cloud_flag_connect+0x18>)
 23f7ec0:	4403      	add	r3, r0
 23f7ec2:	681b      	ldr	r3, [r3, #0]
 23f7ec4:	68db      	ldr	r3, [r3, #12]
 23f7ec6:	9302      	str	r3, [sp, #8]
 23f7ec8:	bd09      	pop	{r0, r3, pc}
 23f7eca:	0000      	.short	0x0000
 23f7ecc:	1006a138 	.word	0x1006a138
 23f7ed0:	0000002c 	.word	0x0000002c

023f7ed4 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 23f7ed4:	b509      	push	{r0, r3, lr}
 23f7ed6:	4804      	ldr	r0, [pc, #16]	; (23f7ee8 <spark_cloud_flag_connected+0x14>)
 23f7ed8:	6800      	ldr	r0, [r0, #0]
 23f7eda:	4b04      	ldr	r3, [pc, #16]	; (23f7eec <spark_cloud_flag_connected+0x18>)
 23f7edc:	4403      	add	r3, r0
 23f7ede:	681b      	ldr	r3, [r3, #0]
 23f7ee0:	695b      	ldr	r3, [r3, #20]
 23f7ee2:	9302      	str	r3, [sp, #8]
 23f7ee4:	bd09      	pop	{r0, r3, pc}
 23f7ee6:	0000      	.short	0x0000
 23f7ee8:	1006a138 	.word	0x1006a138
 23f7eec:	0000002c 	.word	0x0000002c

023f7ef0 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 23f7ef0:	b509      	push	{r0, r3, lr}
 23f7ef2:	4804      	ldr	r0, [pc, #16]	; (23f7f04 <spark_deviceID+0x14>)
 23f7ef4:	6800      	ldr	r0, [r0, #0]
 23f7ef6:	4b04      	ldr	r3, [pc, #16]	; (23f7f08 <spark_deviceID+0x18>)
 23f7ef8:	4403      	add	r3, r0
 23f7efa:	681b      	ldr	r3, [r3, #0]
 23f7efc:	69db      	ldr	r3, [r3, #28]
 23f7efe:	9302      	str	r3, [sp, #8]
 23f7f00:	bd09      	pop	{r0, r3, pc}
 23f7f02:	0000      	.short	0x0000
 23f7f04:	1006a138 	.word	0x1006a138
 23f7f08:	0000002c 	.word	0x0000002c

023f7f0c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 23f7f0c:	b509      	push	{r0, r3, lr}
 23f7f0e:	4804      	ldr	r0, [pc, #16]	; (23f7f20 <spark_send_event+0x14>)
 23f7f10:	6800      	ldr	r0, [r0, #0]
 23f7f12:	4b04      	ldr	r3, [pc, #16]	; (23f7f24 <spark_send_event+0x18>)
 23f7f14:	4403      	add	r3, r0
 23f7f16:	681b      	ldr	r3, [r3, #0]
 23f7f18:	6a1b      	ldr	r3, [r3, #32]
 23f7f1a:	9302      	str	r3, [sp, #8]
 23f7f1c:	bd09      	pop	{r0, r3, pc}
 23f7f1e:	0000      	.short	0x0000
 23f7f20:	1006a138 	.word	0x1006a138
 23f7f24:	0000002c 	.word	0x0000002c

023f7f28 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, spark_subscribe_param*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 23f7f28:	b509      	push	{r0, r3, lr}
 23f7f2a:	4804      	ldr	r0, [pc, #16]	; (23f7f3c <spark_sync_time+0x14>)
 23f7f2c:	6800      	ldr	r0, [r0, #0]
 23f7f2e:	4b04      	ldr	r3, [pc, #16]	; (23f7f40 <spark_sync_time+0x18>)
 23f7f30:	4403      	add	r3, r0
 23f7f32:	681b      	ldr	r3, [r3, #0]
 23f7f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f7f36:	9302      	str	r3, [sp, #8]
 23f7f38:	bd09      	pop	{r0, r3, pc}
 23f7f3a:	0000      	.short	0x0000
 23f7f3c:	1006a138 	.word	0x1006a138
 23f7f40:	0000002c 	.word	0x0000002c

023f7f44 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 23f7f44:	b509      	push	{r0, r3, lr}
 23f7f46:	4804      	ldr	r0, [pc, #16]	; (23f7f58 <spark_sync_time_pending+0x14>)
 23f7f48:	6800      	ldr	r0, [r0, #0]
 23f7f4a:	4b04      	ldr	r3, [pc, #16]	; (23f7f5c <spark_sync_time_pending+0x18>)
 23f7f4c:	4403      	add	r3, r0
 23f7f4e:	681b      	ldr	r3, [r3, #0]
 23f7f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f7f52:	9302      	str	r3, [sp, #8]
 23f7f54:	bd09      	pop	{r0, r3, pc}
 23f7f56:	0000      	.short	0x0000
 23f7f58:	1006a138 	.word	0x1006a138
 23f7f5c:	0000002c 	.word	0x0000002c

023f7f60 <spark_set_connection_property>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
 23f7f60:	b509      	push	{r0, r3, lr}
 23f7f62:	4804      	ldr	r0, [pc, #16]	; (23f7f74 <spark_set_connection_property+0x14>)
 23f7f64:	6800      	ldr	r0, [r0, #0]
 23f7f66:	4b04      	ldr	r3, [pc, #16]	; (23f7f78 <spark_set_connection_property+0x18>)
 23f7f68:	4403      	add	r3, r0
 23f7f6a:	681b      	ldr	r3, [r3, #0]
 23f7f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23f7f6e:	9302      	str	r3, [sp, #8]
 23f7f70:	bd09      	pop	{r0, r3, pc}
 23f7f72:	0000      	.short	0x0000
 23f7f74:	1006a138 	.word	0x1006a138
 23f7f78:	0000002c 	.word	0x0000002c

023f7f7c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23f7f7c:	b509      	push	{r0, r3, lr}
 23f7f7e:	4804      	ldr	r0, [pc, #16]	; (23f7f90 <spark_set_random_seed_from_cloud_handler+0x14>)
 23f7f80:	6800      	ldr	r0, [r0, #0]
 23f7f82:	4b04      	ldr	r3, [pc, #16]	; (23f7f94 <spark_set_random_seed_from_cloud_handler+0x18>)
 23f7f84:	4403      	add	r3, r0
 23f7f86:	681b      	ldr	r3, [r3, #0]
 23f7f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f7f8a:	9302      	str	r3, [sp, #8]
 23f7f8c:	bd09      	pop	{r0, r3, pc}
 23f7f8e:	0000      	.short	0x0000
 23f7f90:	1006a138 	.word	0x1006a138
 23f7f94:	0000002c 	.word	0x0000002c

023f7f98 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 23f7f98:	b509      	push	{r0, r3, lr}
 23f7f9a:	4804      	ldr	r0, [pc, #16]	; (23f7fac <spark_cloud_disconnect+0x14>)
 23f7f9c:	6800      	ldr	r0, [r0, #0]
 23f7f9e:	4b04      	ldr	r3, [pc, #16]	; (23f7fb0 <spark_cloud_disconnect+0x18>)
 23f7fa0:	4403      	add	r3, r0
 23f7fa2:	681b      	ldr	r3, [r3, #0]
 23f7fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f7fa6:	9302      	str	r3, [sp, #8]
 23f7fa8:	bd09      	pop	{r0, r3, pc}
 23f7faa:	0000      	.short	0x0000
 23f7fac:	1006a138 	.word	0x1006a138
 23f7fb0:	0000002c 	.word	0x0000002c

023f7fb4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23f7fb4:	b509      	push	{r0, r3, lr}
 23f7fb6:	4804      	ldr	r0, [pc, #16]	; (23f7fc8 <network_connect+0x14>)
 23f7fb8:	6800      	ldr	r0, [r0, #0]
 23f7fba:	4b04      	ldr	r3, [pc, #16]	; (23f7fcc <network_connect+0x18>)
 23f7fbc:	4403      	add	r3, r0
 23f7fbe:	681b      	ldr	r3, [r3, #0]
 23f7fc0:	685b      	ldr	r3, [r3, #4]
 23f7fc2:	9302      	str	r3, [sp, #8]
 23f7fc4:	bd09      	pop	{r0, r3, pc}
 23f7fc6:	0000      	.short	0x0000
 23f7fc8:	1006a138 	.word	0x1006a138
 23f7fcc:	00000028 	.word	0x00000028

023f7fd0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23f7fd0:	b509      	push	{r0, r3, lr}
 23f7fd2:	4804      	ldr	r0, [pc, #16]	; (23f7fe4 <network_connecting+0x14>)
 23f7fd4:	6800      	ldr	r0, [r0, #0]
 23f7fd6:	4b04      	ldr	r3, [pc, #16]	; (23f7fe8 <network_connecting+0x18>)
 23f7fd8:	4403      	add	r3, r0
 23f7fda:	681b      	ldr	r3, [r3, #0]
 23f7fdc:	689b      	ldr	r3, [r3, #8]
 23f7fde:	9302      	str	r3, [sp, #8]
 23f7fe0:	bd09      	pop	{r0, r3, pc}
 23f7fe2:	0000      	.short	0x0000
 23f7fe4:	1006a138 	.word	0x1006a138
 23f7fe8:	00000028 	.word	0x00000028

023f7fec <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23f7fec:	b509      	push	{r0, r3, lr}
 23f7fee:	4804      	ldr	r0, [pc, #16]	; (23f8000 <network_disconnect+0x14>)
 23f7ff0:	6800      	ldr	r0, [r0, #0]
 23f7ff2:	4b04      	ldr	r3, [pc, #16]	; (23f8004 <network_disconnect+0x18>)
 23f7ff4:	4403      	add	r3, r0
 23f7ff6:	681b      	ldr	r3, [r3, #0]
 23f7ff8:	68db      	ldr	r3, [r3, #12]
 23f7ffa:	9302      	str	r3, [sp, #8]
 23f7ffc:	bd09      	pop	{r0, r3, pc}
 23f7ffe:	0000      	.short	0x0000
 23f8000:	1006a138 	.word	0x1006a138
 23f8004:	00000028 	.word	0x00000028

023f8008 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23f8008:	b509      	push	{r0, r3, lr}
 23f800a:	4804      	ldr	r0, [pc, #16]	; (23f801c <network_ready+0x14>)
 23f800c:	6800      	ldr	r0, [r0, #0]
 23f800e:	4b04      	ldr	r3, [pc, #16]	; (23f8020 <network_ready+0x18>)
 23f8010:	4403      	add	r3, r0
 23f8012:	681b      	ldr	r3, [r3, #0]
 23f8014:	691b      	ldr	r3, [r3, #16]
 23f8016:	9302      	str	r3, [sp, #8]
 23f8018:	bd09      	pop	{r0, r3, pc}
 23f801a:	0000      	.short	0x0000
 23f801c:	1006a138 	.word	0x1006a138
 23f8020:	00000028 	.word	0x00000028

023f8024 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23f8024:	b509      	push	{r0, r3, lr}
 23f8026:	4804      	ldr	r0, [pc, #16]	; (23f8038 <network_on+0x14>)
 23f8028:	6800      	ldr	r0, [r0, #0]
 23f802a:	4b04      	ldr	r3, [pc, #16]	; (23f803c <network_on+0x18>)
 23f802c:	4403      	add	r3, r0
 23f802e:	681b      	ldr	r3, [r3, #0]
 23f8030:	695b      	ldr	r3, [r3, #20]
 23f8032:	9302      	str	r3, [sp, #8]
 23f8034:	bd09      	pop	{r0, r3, pc}
 23f8036:	0000      	.short	0x0000
 23f8038:	1006a138 	.word	0x1006a138
 23f803c:	00000028 	.word	0x00000028

023f8040 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23f8040:	b509      	push	{r0, r3, lr}
 23f8042:	4804      	ldr	r0, [pc, #16]	; (23f8054 <network_off+0x14>)
 23f8044:	6800      	ldr	r0, [r0, #0]
 23f8046:	4b04      	ldr	r3, [pc, #16]	; (23f8058 <network_off+0x18>)
 23f8048:	4403      	add	r3, r0
 23f804a:	681b      	ldr	r3, [r3, #0]
 23f804c:	699b      	ldr	r3, [r3, #24]
 23f804e:	9302      	str	r3, [sp, #8]
 23f8050:	bd09      	pop	{r0, r3, pc}
 23f8052:	0000      	.short	0x0000
 23f8054:	1006a138 	.word	0x1006a138
 23f8058:	00000028 	.word	0x00000028

023f805c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23f805c:	b509      	push	{r0, r3, lr}
 23f805e:	4804      	ldr	r0, [pc, #16]	; (23f8070 <network_listen+0x14>)
 23f8060:	6800      	ldr	r0, [r0, #0]
 23f8062:	4b04      	ldr	r3, [pc, #16]	; (23f8074 <network_listen+0x18>)
 23f8064:	4403      	add	r3, r0
 23f8066:	681b      	ldr	r3, [r3, #0]
 23f8068:	69db      	ldr	r3, [r3, #28]
 23f806a:	9302      	str	r3, [sp, #8]
 23f806c:	bd09      	pop	{r0, r3, pc}
 23f806e:	0000      	.short	0x0000
 23f8070:	1006a138 	.word	0x1006a138
 23f8074:	00000028 	.word	0x00000028

023f8078 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23f8078:	b509      	push	{r0, r3, lr}
 23f807a:	4804      	ldr	r0, [pc, #16]	; (23f808c <network_listening+0x14>)
 23f807c:	6800      	ldr	r0, [r0, #0]
 23f807e:	4b04      	ldr	r3, [pc, #16]	; (23f8090 <network_listening+0x18>)
 23f8080:	4403      	add	r3, r0
 23f8082:	681b      	ldr	r3, [r3, #0]
 23f8084:	6a1b      	ldr	r3, [r3, #32]
 23f8086:	9302      	str	r3, [sp, #8]
 23f8088:	bd09      	pop	{r0, r3, pc}
 23f808a:	0000      	.short	0x0000
 23f808c:	1006a138 	.word	0x1006a138
 23f8090:	00000028 	.word	0x00000028

023f8094 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23f8094:	b509      	push	{r0, r3, lr}
 23f8096:	4804      	ldr	r0, [pc, #16]	; (23f80a8 <network_set_listen_timeout+0x14>)
 23f8098:	6800      	ldr	r0, [r0, #0]
 23f809a:	4b04      	ldr	r3, [pc, #16]	; (23f80ac <network_set_listen_timeout+0x18>)
 23f809c:	4403      	add	r3, r0
 23f809e:	681b      	ldr	r3, [r3, #0]
 23f80a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f80a2:	9302      	str	r3, [sp, #8]
 23f80a4:	bd09      	pop	{r0, r3, pc}
 23f80a6:	0000      	.short	0x0000
 23f80a8:	1006a138 	.word	0x1006a138
 23f80ac:	00000028 	.word	0x00000028

023f80b0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23f80b0:	b509      	push	{r0, r3, lr}
 23f80b2:	4804      	ldr	r0, [pc, #16]	; (23f80c4 <network_get_listen_timeout+0x14>)
 23f80b4:	6800      	ldr	r0, [r0, #0]
 23f80b6:	4b04      	ldr	r3, [pc, #16]	; (23f80c8 <network_get_listen_timeout+0x18>)
 23f80b8:	4403      	add	r3, r0
 23f80ba:	681b      	ldr	r3, [r3, #0]
 23f80bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f80be:	9302      	str	r3, [sp, #8]
 23f80c0:	bd09      	pop	{r0, r3, pc}
 23f80c2:	0000      	.short	0x0000
 23f80c4:	1006a138 	.word	0x1006a138
 23f80c8:	00000028 	.word	0x00000028

023f80cc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23f80cc:	b509      	push	{r0, r3, lr}
 23f80ce:	4804      	ldr	r0, [pc, #16]	; (23f80e0 <network_is_on+0x14>)
 23f80d0:	6800      	ldr	r0, [r0, #0]
 23f80d2:	4b04      	ldr	r3, [pc, #16]	; (23f80e4 <network_is_on+0x18>)
 23f80d4:	4403      	add	r3, r0
 23f80d6:	681b      	ldr	r3, [r3, #0]
 23f80d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f80da:	9302      	str	r3, [sp, #8]
 23f80dc:	bd09      	pop	{r0, r3, pc}
 23f80de:	0000      	.short	0x0000
 23f80e0:	1006a138 	.word	0x1006a138
 23f80e4:	00000028 	.word	0x00000028

023f80e8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23f80e8:	b509      	push	{r0, r3, lr}
 23f80ea:	4804      	ldr	r0, [pc, #16]	; (23f80fc <network_is_off+0x14>)
 23f80ec:	6800      	ldr	r0, [r0, #0]
 23f80ee:	4b04      	ldr	r3, [pc, #16]	; (23f8100 <network_is_off+0x18>)
 23f80f0:	4403      	add	r3, r0
 23f80f2:	681b      	ldr	r3, [r3, #0]
 23f80f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f80f6:	9302      	str	r3, [sp, #8]
 23f80f8:	bd09      	pop	{r0, r3, pc}
 23f80fa:	0000      	.short	0x0000
 23f80fc:	1006a138 	.word	0x1006a138
 23f8100:	00000028 	.word	0x00000028

023f8104 <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
 23f8104:	b509      	push	{r0, r3, lr}
 23f8106:	4804      	ldr	r0, [pc, #16]	; (23f8118 <network_prefer+0x14>)
 23f8108:	6800      	ldr	r0, [r0, #0]
 23f810a:	4b04      	ldr	r3, [pc, #16]	; (23f811c <network_prefer+0x18>)
 23f810c:	4403      	add	r3, r0
 23f810e:	681b      	ldr	r3, [r3, #0]
 23f8110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f8112:	9302      	str	r3, [sp, #8]
 23f8114:	bd09      	pop	{r0, r3, pc}
 23f8116:	0000      	.short	0x0000
 23f8118:	1006a138 	.word	0x1006a138
 23f811c:	00000028 	.word	0x00000028

023f8120 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
 23f8120:	b509      	push	{r0, r3, lr}
 23f8122:	4804      	ldr	r0, [pc, #16]	; (23f8134 <network_is_preferred+0x14>)
 23f8124:	6800      	ldr	r0, [r0, #0]
 23f8126:	4b04      	ldr	r3, [pc, #16]	; (23f8138 <network_is_preferred+0x18>)
 23f8128:	4403      	add	r3, r0
 23f812a:	681b      	ldr	r3, [r3, #0]
 23f812c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f812e:	9302      	str	r3, [sp, #8]
 23f8130:	bd09      	pop	{r0, r3, pc}
 23f8132:	0000      	.short	0x0000
 23f8134:	1006a138 	.word	0x1006a138
 23f8138:	00000028 	.word	0x00000028

023f813c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || defined(DYNALIB_IMPORT)

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23f813c:	b509      	push	{r0, r3, lr}
 23f813e:	4804      	ldr	r0, [pc, #16]	; (23f8150 <malloc+0x14>)
 23f8140:	6800      	ldr	r0, [r0, #0]
 23f8142:	4b04      	ldr	r3, [pc, #16]	; (23f8154 <malloc+0x18>)
 23f8144:	4403      	add	r3, r0
 23f8146:	681b      	ldr	r3, [r3, #0]
 23f8148:	681b      	ldr	r3, [r3, #0]
 23f814a:	9302      	str	r3, [sp, #8]
 23f814c:	bd09      	pop	{r0, r3, pc}
 23f814e:	0000      	.short	0x0000
 23f8150:	1006a138 	.word	0x1006a138
 23f8154:	00000004 	.word	0x00000004

023f8158 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23f8158:	b509      	push	{r0, r3, lr}
 23f815a:	4804      	ldr	r0, [pc, #16]	; (23f816c <free+0x14>)
 23f815c:	6800      	ldr	r0, [r0, #0]
 23f815e:	4b04      	ldr	r3, [pc, #16]	; (23f8170 <free+0x18>)
 23f8160:	4403      	add	r3, r0
 23f8162:	681b      	ldr	r3, [r3, #0]
 23f8164:	685b      	ldr	r3, [r3, #4]
 23f8166:	9302      	str	r3, [sp, #8]
 23f8168:	bd09      	pop	{r0, r3, pc}
 23f816a:	0000      	.short	0x0000
 23f816c:	1006a138 	.word	0x1006a138
 23f8170:	00000004 	.word	0x00000004

023f8174 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23f8174:	b509      	push	{r0, r3, lr}
 23f8176:	4804      	ldr	r0, [pc, #16]	; (23f8188 <realloc+0x14>)
 23f8178:	6800      	ldr	r0, [r0, #0]
 23f817a:	4b04      	ldr	r3, [pc, #16]	; (23f818c <realloc+0x18>)
 23f817c:	4403      	add	r3, r0
 23f817e:	681b      	ldr	r3, [r3, #0]
 23f8180:	689b      	ldr	r3, [r3, #8]
 23f8182:	9302      	str	r3, [sp, #8]
 23f8184:	bd09      	pop	{r0, r3, pc}
 23f8186:	0000      	.short	0x0000
 23f8188:	1006a138 	.word	0x1006a138
 23f818c:	00000004 	.word	0x00000004

023f8190 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 23f8190:	b509      	push	{r0, r3, lr}
 23f8192:	4804      	ldr	r0, [pc, #16]	; (23f81a4 <sprintf+0x14>)
 23f8194:	6800      	ldr	r0, [r0, #0]
 23f8196:	4b04      	ldr	r3, [pc, #16]	; (23f81a8 <sprintf+0x18>)
 23f8198:	4403      	add	r3, r0
 23f819a:	681b      	ldr	r3, [r3, #0]
 23f819c:	68db      	ldr	r3, [r3, #12]
 23f819e:	9302      	str	r3, [sp, #8]
 23f81a0:	bd09      	pop	{r0, r3, pc}
 23f81a2:	0000      	.short	0x0000
 23f81a4:	1006a138 	.word	0x1006a138
 23f81a8:	00000004 	.word	0x00000004

023f81ac <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
 23f81ac:	b509      	push	{r0, r3, lr}
 23f81ae:	4804      	ldr	r0, [pc, #16]	; (23f81c0 <sscanf+0x14>)
 23f81b0:	6800      	ldr	r0, [r0, #0]
 23f81b2:	4b04      	ldr	r3, [pc, #16]	; (23f81c4 <sscanf+0x18>)
 23f81b4:	4403      	add	r3, r0
 23f81b6:	681b      	ldr	r3, [r3, #0]
 23f81b8:	695b      	ldr	r3, [r3, #20]
 23f81ba:	9302      	str	r3, [sp, #8]
 23f81bc:	bd09      	pop	{r0, r3, pc}
 23f81be:	0000      	.short	0x0000
 23f81c0:	1006a138 	.word	0x1006a138
 23f81c4:	00000004 	.word	0x00000004

023f81c8 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23f81c8:	b509      	push	{r0, r3, lr}
 23f81ca:	4804      	ldr	r0, [pc, #16]	; (23f81dc <vsnprintf+0x14>)
 23f81cc:	6800      	ldr	r0, [r0, #0]
 23f81ce:	4b04      	ldr	r3, [pc, #16]	; (23f81e0 <vsnprintf+0x18>)
 23f81d0:	4403      	add	r3, r0
 23f81d2:	681b      	ldr	r3, [r3, #0]
 23f81d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f81d6:	9302      	str	r3, [sp, #8]
 23f81d8:	bd09      	pop	{r0, r3, pc}
 23f81da:	0000      	.short	0x0000
 23f81dc:	1006a138 	.word	0x1006a138
 23f81e0:	00000004 	.word	0x00000004

023f81e4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23f81e4:	b509      	push	{r0, r3, lr}
 23f81e6:	4804      	ldr	r0, [pc, #16]	; (23f81f8 <abort+0x14>)
 23f81e8:	6800      	ldr	r0, [r0, #0]
 23f81ea:	4b04      	ldr	r3, [pc, #16]	; (23f81fc <abort+0x18>)
 23f81ec:	4403      	add	r3, r0
 23f81ee:	681b      	ldr	r3, [r3, #0]
 23f81f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f81f2:	9302      	str	r3, [sp, #8]
 23f81f4:	bd09      	pop	{r0, r3, pc}
 23f81f6:	0000      	.short	0x0000
 23f81f8:	1006a138 	.word	0x1006a138
 23f81fc:	00000004 	.word	0x00000004

023f8200 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23f8200:	b509      	push	{r0, r3, lr}
 23f8202:	4804      	ldr	r0, [pc, #16]	; (23f8214 <_malloc_r+0x14>)
 23f8204:	6800      	ldr	r0, [r0, #0]
 23f8206:	4b04      	ldr	r3, [pc, #16]	; (23f8218 <_malloc_r+0x18>)
 23f8208:	4403      	add	r3, r0
 23f820a:	681b      	ldr	r3, [r3, #0]
 23f820c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f820e:	9302      	str	r3, [sp, #8]
 23f8210:	bd09      	pop	{r0, r3, pc}
 23f8212:	0000      	.short	0x0000
 23f8214:	1006a138 	.word	0x1006a138
 23f8218:	00000004 	.word	0x00000004

023f821c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23f821c:	b509      	push	{r0, r3, lr}
 23f821e:	4804      	ldr	r0, [pc, #16]	; (23f8230 <__errno+0x14>)
 23f8220:	6800      	ldr	r0, [r0, #0]
 23f8222:	4b04      	ldr	r3, [pc, #16]	; (23f8234 <__errno+0x18>)
 23f8224:	4403      	add	r3, r0
 23f8226:	681b      	ldr	r3, [r3, #0]
 23f8228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f822a:	9302      	str	r3, [sp, #8]
 23f822c:	bd09      	pop	{r0, r3, pc}
 23f822e:	0000      	.short	0x0000
 23f8230:	1006a138 	.word	0x1006a138
 23f8234:	00000004 	.word	0x00000004

023f8238 <__assert_func>:

#if defined(DYNALIB_EXPORT) || defined(DYNALIB_IMPORT)
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23f8238:	b509      	push	{r0, r3, lr}
 23f823a:	4804      	ldr	r0, [pc, #16]	; (23f824c <__assert_func+0x14>)
 23f823c:	6800      	ldr	r0, [r0, #0]
 23f823e:	4b04      	ldr	r3, [pc, #16]	; (23f8250 <__assert_func+0x18>)
 23f8240:	4403      	add	r3, r0
 23f8242:	681b      	ldr	r3, [r3, #0]
 23f8244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f8246:	9302      	str	r3, [sp, #8]
 23f8248:	bd09      	pop	{r0, r3, pc}
 23f824a:	0000      	.short	0x0000
 23f824c:	1006a138 	.word	0x1006a138
 23f8250:	00000004 	.word	0x00000004

023f8254 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23f8254:	b509      	push	{r0, r3, lr}
 23f8256:	4804      	ldr	r0, [pc, #16]	; (23f8268 <newlib_impure_ptr_callback+0x14>)
 23f8258:	6800      	ldr	r0, [r0, #0]
 23f825a:	4b04      	ldr	r3, [pc, #16]	; (23f826c <newlib_impure_ptr_callback+0x18>)
 23f825c:	4403      	add	r3, r0
 23f825e:	681b      	ldr	r3, [r3, #0]
 23f8260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f8262:	9302      	str	r3, [sp, #8]
 23f8264:	bd09      	pop	{r0, r3, pc}
 23f8266:	0000      	.short	0x0000
 23f8268:	1006a138 	.word	0x1006a138
 23f826c:	00000004 	.word	0x00000004

023f8270 <localtime_r>:

DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
 23f8270:	b509      	push	{r0, r3, lr}
 23f8272:	4804      	ldr	r0, [pc, #16]	; (23f8284 <localtime_r+0x14>)
 23f8274:	6800      	ldr	r0, [r0, #0]
 23f8276:	4b04      	ldr	r3, [pc, #16]	; (23f8288 <localtime_r+0x18>)
 23f8278:	4403      	add	r3, r0
 23f827a:	681b      	ldr	r3, [r3, #0]
 23f827c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f827e:	9302      	str	r3, [sp, #8]
 23f8280:	bd09      	pop	{r0, r3, pc}
 23f8282:	0000      	.short	0x0000
 23f8284:	1006a138 	.word	0x1006a138
 23f8288:	00000004 	.word	0x00000004

023f828c <__cxa_guard_acquire>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
DYNALIB_FN(22, rt, __cxa_guard_acquire, int(__guard*))
 23f828c:	b509      	push	{r0, r3, lr}
 23f828e:	4804      	ldr	r0, [pc, #16]	; (23f82a0 <__cxa_guard_acquire+0x14>)
 23f8290:	6800      	ldr	r0, [r0, #0]
 23f8292:	4b04      	ldr	r3, [pc, #16]	; (23f82a4 <__cxa_guard_acquire+0x18>)
 23f8294:	4403      	add	r3, r0
 23f8296:	681b      	ldr	r3, [r3, #0]
 23f8298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f829a:	9302      	str	r3, [sp, #8]
 23f829c:	bd09      	pop	{r0, r3, pc}
 23f829e:	0000      	.short	0x0000
 23f82a0:	1006a138 	.word	0x1006a138
 23f82a4:	00000004 	.word	0x00000004

023f82a8 <__cxa_guard_release>:
DYNALIB_FN(23, rt, __cxa_guard_release, void(__guard*))
 23f82a8:	b509      	push	{r0, r3, lr}
 23f82aa:	4804      	ldr	r0, [pc, #16]	; (23f82bc <__cxa_guard_release+0x14>)
 23f82ac:	6800      	ldr	r0, [r0, #0]
 23f82ae:	4b04      	ldr	r3, [pc, #16]	; (23f82c0 <__cxa_guard_release+0x18>)
 23f82b0:	4403      	add	r3, r0
 23f82b2:	681b      	ldr	r3, [r3, #0]
 23f82b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23f82b6:	9302      	str	r3, [sp, #8]
 23f82b8:	bd09      	pop	{r0, r3, pc}
 23f82ba:	0000      	.short	0x0000
 23f82bc:	1006a138 	.word	0x1006a138
 23f82c0:	00000004 	.word	0x00000004

023f82c4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23f82c4:	2100      	movs	r1, #0
 23f82c6:	f7ff bd33 	b.w	23f7d30 <system_delay_ms>

023f82ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 23f82ca:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 23f82cc:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23f82ce:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23f82d0:	b17c      	cbz	r4, 23f82f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23f82d2:	6863      	ldr	r3, [r4, #4]
 23f82d4:	3b01      	subs	r3, #1
 23f82d6:	6063      	str	r3, [r4, #4]
 23f82d8:	b95b      	cbnz	r3, 23f82f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23f82da:	6823      	ldr	r3, [r4, #0]
 23f82dc:	4620      	mov	r0, r4
 23f82de:	689b      	ldr	r3, [r3, #8]
 23f82e0:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23f82e2:	68a3      	ldr	r3, [r4, #8]
 23f82e4:	3b01      	subs	r3, #1
 23f82e6:	60a3      	str	r3, [r4, #8]
 23f82e8:	b91b      	cbnz	r3, 23f82f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23f82ea:	6823      	ldr	r3, [r4, #0]
 23f82ec:	4620      	mov	r0, r4
 23f82ee:	68db      	ldr	r3, [r3, #12]
 23f82f0:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23f82f2:	4628      	mov	r0, r5
 23f82f4:	bd38      	pop	{r3, r4, r5, pc}

023f82f6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 23f82f6:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 23f82f8:	6883      	ldr	r3, [r0, #8]
 23f82fa:	4604      	mov	r4, r0
 23f82fc:	b90b      	cbnz	r3, 23f8302 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 23f82fe:	f002 f8a1 	bl	23fa444 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f8302:	68c3      	ldr	r3, [r0, #12]
 23f8304:	4798      	blx	r3
      if (_M_manager)
 23f8306:	68a3      	ldr	r3, [r4, #8]
 23f8308:	b11b      	cbz	r3, 23f8312 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23f830a:	2203      	movs	r2, #3
 23f830c:	4621      	mov	r1, r4
 23f830e:	4620      	mov	r0, r4
 23f8310:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 23f8312:	4620      	mov	r0, r4
}
 23f8314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 23f8318:	2110      	movs	r1, #16
 23f831a:	f7ed be96 	b.w	23e604a <_ZdlPvj>

023f831e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 23f831e:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f8320:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 23f8322:	460b      	mov	r3, r1
 23f8324:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f8326:	e9d0 0100 	ldrd	r0, r1, [r0]
 23f832a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23f832e:	e893 0003 	ldmia.w	r3, {r0, r1}
 23f8332:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23f8336:	e894 0003 	ldmia.w	r4, {r0, r1}
 23f833a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 23f833e:	b002      	add	sp, #8
 23f8340:	bd10      	pop	{r4, pc}
	...

023f8344 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23f8344:	2300      	movs	r3, #0
 23f8346:	4802      	ldr	r0, [pc, #8]	; (23f8350 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23f8348:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23f834a:	f7ff b901 	b.w	23f7550 <os_mutex_recursive_create>
 23f834e:	bf00      	nop
 23f8350:	1007aeb4 	.word	0x1007aeb4

023f8354 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 23f8354:	2200      	movs	r2, #0
 23f8356:	6840      	ldr	r0, [r0, #4]
 23f8358:	4611      	mov	r1, r2
 23f835a:	f7ff be55 	b.w	23f8008 <network_ready>

023f835e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 23f835e:	2200      	movs	r2, #0
 23f8360:	6840      	ldr	r0, [r0, #4]
 23f8362:	4611      	mov	r1, r2
 23f8364:	f7ff be88 	b.w	23f8078 <network_listening>

023f8368 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23f8368:	2200      	movs	r2, #0
 23f836a:	6840      	ldr	r0, [r0, #4]
 23f836c:	4611      	mov	r1, r2
 23f836e:	f7ff be9f 	b.w	23f80b0 <network_get_listen_timeout>

023f8372 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23f8372:	2200      	movs	r2, #0
 23f8374:	6840      	ldr	r0, [r0, #4]
 23f8376:	f7ff be8d 	b.w	23f8094 <network_set_listen_timeout>

023f837a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23f837a:	2200      	movs	r2, #0
 23f837c:	6840      	ldr	r0, [r0, #4]
 23f837e:	f081 0101 	eor.w	r1, r1, #1
 23f8382:	f7ff be6b 	b.w	23f805c <network_listen>

023f8386 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23f8386:	2300      	movs	r3, #0
 23f8388:	6840      	ldr	r0, [r0, #4]
 23f838a:	461a      	mov	r2, r3
 23f838c:	4619      	mov	r1, r3
 23f838e:	f7ff be57 	b.w	23f8040 <network_off>

023f8392 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23f8392:	2300      	movs	r3, #0
 23f8394:	6840      	ldr	r0, [r0, #4]
 23f8396:	461a      	mov	r2, r3
 23f8398:	4619      	mov	r1, r3
 23f839a:	f7ff be43 	b.w	23f8024 <network_on>

023f839e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23f839e:	2200      	movs	r2, #0
 23f83a0:	6840      	ldr	r0, [r0, #4]
 23f83a2:	4611      	mov	r1, r2
 23f83a4:	f7ff be14 	b.w	23f7fd0 <network_connecting>

023f83a8 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23f83a8:	2200      	movs	r2, #0
 23f83aa:	2102      	movs	r1, #2
 23f83ac:	6840      	ldr	r0, [r0, #4]
 23f83ae:	f7ff be1d 	b.w	23f7fec <network_disconnect>

023f83b2 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23f83b2:	2300      	movs	r3, #0
 23f83b4:	6840      	ldr	r0, [r0, #4]
 23f83b6:	461a      	mov	r2, r3
 23f83b8:	f7ff bdfc 	b.w	23f7fb4 <network_connect>

023f83bc <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 23f83bc:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
 23f83be:	2518      	movs	r5, #24
 23f83c0:	4b12      	ldr	r3, [pc, #72]	; (23f840c <_ZN5spark13CellularClass4RSSIEv+0x50>)
 23f83c2:	460e      	mov	r6, r1
 23f83c4:	6003      	str	r3, [r0, #0]
 23f83c6:	3330      	adds	r3, #48	; 0x30
 23f83c8:	462a      	mov	r2, r5
 23f83ca:	2100      	movs	r1, #0
 23f83cc:	b086      	sub	sp, #24
 23f83ce:	6043      	str	r3, [r0, #4]
 23f83d0:	4604      	mov	r4, r0
 23f83d2:	3008      	adds	r0, #8
 23f83d4:	f004 fd1b 	bl	23fce0e <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 23f83d8:	2200      	movs	r2, #0
 23f83da:	6870      	ldr	r0, [r6, #4]
 23f83dc:	4611      	mov	r1, r2
 23f83de:	f7ff fe13 	bl	23f8008 <network_ready>
 23f83e2:	b178      	cbz	r0, 23f8404 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
 23f83e4:	2100      	movs	r1, #0
 23f83e6:	462a      	mov	r2, r5
 23f83e8:	4668      	mov	r0, sp
 23f83ea:	f004 fd10 	bl	23fce0e <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
 23f83ee:	4669      	mov	r1, sp
 23f83f0:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
 23f83f2:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
 23f83f6:	f7ff f865 	bl	23f74c4 <cellular_signal>
 23f83fa:	b918      	cbnz	r0, 23f8404 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
 23f83fc:	4669      	mov	r1, sp
 23f83fe:	4620      	mov	r0, r4
 23f8400:	f000 f990 	bl	23f8724 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
 23f8404:	4620      	mov	r0, r4
 23f8406:	b006      	add	sp, #24
 23f8408:	bd70      	pop	{r4, r5, r6, pc}
 23f840a:	bf00      	nop
 23f840c:	023ff9bc 	.word	0x023ff9bc

023f8410 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 23f8410:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 23f8412:	2428      	movs	r4, #40	; 0x28
 23f8414:	4b07      	ldr	r3, [pc, #28]	; (23f8434 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 23f8416:	4622      	mov	r2, r4
 23f8418:	4618      	mov	r0, r3
 23f841a:	2100      	movs	r1, #0
 23f841c:	f004 fcf7 	bl	23fce0e <memset>
        cid = -1;
 23f8420:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f8424:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name, bool flushCache = false);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23f8426:	2204      	movs	r2, #4
 23f8428:	4b03      	ldr	r3, [pc, #12]	; (23f8438 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 23f842a:	8004      	strh	r4, [r0, #0]
 23f842c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 23f842e:	4a03      	ldr	r2, [pc, #12]	; (23f843c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 23f8430:	601a      	str	r2, [r3, #0]
 23f8432:	bd10      	pop	{r4, pc}
 23f8434:	1007aec0 	.word	0x1007aec0
 23f8438:	1007aeb8 	.word	0x1007aeb8
 23f843c:	023ff96c 	.word	0x023ff96c

023f8440 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 23f8440:	4770      	bx	lr

023f8442 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 23f8442:	7b00      	ldrb	r0, [r0, #12]
 23f8444:	4770      	bx	lr

023f8446 <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
 23f8446:	7b03      	ldrb	r3, [r0, #12]
 23f8448:	b14b      	cbz	r3, 23f845e <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
 23f844a:	6903      	ldr	r3, [r0, #16]
 23f844c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23f8450:	d005      	beq.n	23f845e <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
 23f8452:	6980      	ldr	r0, [r0, #24]
 23f8454:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
 23f8458:	bf18      	it	ne
 23f845a:	2001      	movne	r0, #1
 23f845c:	4770      	bx	lr
 23f845e:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
 23f8460:	4770      	bx	lr

023f8462 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
 23f8462:	6803      	ldr	r3, [r0, #0]
 23f8464:	6a1b      	ldr	r3, [r3, #32]
 23f8466:	4718      	bx	r3

023f8468 <_ZN14CellularSignalD0Ev>:
 23f8468:	b510      	push	{r4, lr}
 23f846a:	4604      	mov	r4, r0
 23f846c:	2120      	movs	r1, #32
 23f846e:	f7ed fdec 	bl	23e604a <_ZdlPvj>
 23f8472:	4620      	mov	r0, r4
 23f8474:	bd10      	pop	{r4, pc}
	...

023f8478 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 23f8478:	7b03      	ldrb	r3, [r0, #12]
 23f847a:	b17b      	cbz	r3, 23f849c <_ZNK14CellularSignal11getStrengthEv+0x24>
 23f847c:	6943      	ldr	r3, [r0, #20]
 23f847e:	2b00      	cmp	r3, #0
 23f8480:	db0c      	blt.n	23f849c <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
 23f8482:	ee07 3a90 	vmov	s15, r3
 23f8486:	ed9f 7a07 	vldr	s14, [pc, #28]	; 23f84a4 <_ZNK14CellularSignal11getStrengthEv+0x2c>
 23f848a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f848e:	ee87 0a87 	vdiv.f32	s0, s15, s14
 23f8492:	eddf 7a05 	vldr	s15, [pc, #20]	; 23f84a8 <_ZNK14CellularSignal11getStrengthEv+0x30>
 23f8496:	ee20 0a27 	vmul.f32	s0, s0, s15
 23f849a:	4770      	bx	lr
    return -1.0f;
 23f849c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
 23f84a0:	4770      	bx	lr
 23f84a2:	bf00      	nop
 23f84a4:	477fff00 	.word	0x477fff00
 23f84a8:	42c80000 	.word	0x42c80000

023f84ac <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 23f84ac:	7b03      	ldrb	r3, [r0, #12]
 23f84ae:	b163      	cbz	r3, 23f84ca <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
 23f84b0:	6903      	ldr	r3, [r0, #16]
 23f84b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23f84b6:	d008      	beq.n	23f84ca <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
 23f84b8:	ee07 3a90 	vmov	s15, r3
 23f84bc:	ed9f 7a04 	vldr	s14, [pc, #16]	; 23f84d0 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
 23f84c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f84c4:	ee87 0a87 	vdiv.f32	s0, s15, s14
 23f84c8:	4770      	bx	lr
    return 0.0f;
 23f84ca:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23f84d4 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
 23f84ce:	4770      	bx	lr
 23f84d0:	42c80000 	.word	0x42c80000
 23f84d4:	00000000 	.word	0x00000000

023f84d8 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 23f84d8:	7b03      	ldrb	r3, [r0, #12]
 23f84da:	b17b      	cbz	r3, 23f84fc <_ZNK14CellularSignal10getQualityEv+0x24>
 23f84dc:	69c3      	ldr	r3, [r0, #28]
 23f84de:	2b00      	cmp	r3, #0
 23f84e0:	db0c      	blt.n	23f84fc <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
 23f84e2:	ee07 3a90 	vmov	s15, r3
 23f84e6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 23f8504 <_ZNK14CellularSignal10getQualityEv+0x2c>
 23f84ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f84ee:	ee87 0a87 	vdiv.f32	s0, s15, s14
 23f84f2:	eddf 7a05 	vldr	s15, [pc, #20]	; 23f8508 <_ZNK14CellularSignal10getQualityEv+0x30>
 23f84f6:	ee20 0a27 	vmul.f32	s0, s0, s15
 23f84fa:	4770      	bx	lr
    return -1.0f;
 23f84fc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
 23f8500:	4770      	bx	lr
 23f8502:	bf00      	nop
 23f8504:	477fff00 	.word	0x477fff00
 23f8508:	42c80000 	.word	0x42c80000

023f850c <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 23f850c:	7b03      	ldrb	r3, [r0, #12]
 23f850e:	b163      	cbz	r3, 23f852a <_ZNK14CellularSignal15getQualityValueEv+0x1e>
 23f8510:	6983      	ldr	r3, [r0, #24]
 23f8512:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23f8516:	d008      	beq.n	23f852a <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
 23f8518:	ee07 3a90 	vmov	s15, r3
 23f851c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 23f8530 <_ZNK14CellularSignal15getQualityValueEv+0x24>
 23f8520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f8524:	ee87 0a87 	vdiv.f32	s0, s15, s14
 23f8528:	4770      	bx	lr
    return 0.0f;
 23f852a:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23f8534 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
 23f852e:	4770      	bx	lr
 23f8530:	42c80000 	.word	0x42c80000
 23f8534:	00000000 	.word	0x00000000

023f8538 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:

} // namespace particle

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
inline size_t Print::print(T n, int base)
 23f8538:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 23f853a:	1e0c      	subs	r4, r1, #0
inline size_t Print::print(T n, int base)
 23f853c:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
 23f853e:	da0a      	bge.n	23f8556 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
 23f8540:	212d      	movs	r1, #45	; 0x2d
 23f8542:	f001 f8b8 	bl	23f96b6 <_ZN5Print5printEc>
 23f8546:	4605      	mov	r5, r0
            val = -n;
 23f8548:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23f854a:	220a      	movs	r2, #10
 23f854c:	4630      	mov	r0, r6
 23f854e:	f001 f8cf 	bl	23f96f0 <_ZN5Print11printNumberEmh>
    }
}
 23f8552:	4428      	add	r0, r5
 23f8554:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
 23f8556:	4621      	mov	r1, r4
        size_t t = 0;
 23f8558:	2500      	movs	r5, #0
 23f855a:	e7f6      	b.n	23f854a <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

023f855c <_ZN5Print10printFloatEdh>:
    size_t printFloat(double number, uint8_t digits) {
 23f855c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f8560:	ec55 4b10 	vmov	r4, r5, d0
 23f8564:	4607      	mov	r7, r0
 23f8566:	460e      	mov	r6, r1
        if (std::isnan(number)) {
 23f8568:	ee10 2a10 	vmov	r2, s0
 23f856c:	462b      	mov	r3, r5
 23f856e:	ee10 0a10 	vmov	r0, s0
 23f8572:	4629      	mov	r1, r5
 23f8574:	f7ed f99a 	bl	23e58ac <__aeabi_dcmpun>
 23f8578:	b128      	cbz	r0, 23f8586 <_ZN5Print10printFloatEdh+0x2a>
            return print("nan");
 23f857a:	494c      	ldr	r1, [pc, #304]	; (23f86ac <_ZN5Print10printFloatEdh+0x150>)
            return print ("ovf"); // constant determined empirically
 23f857c:	4638      	mov	r0, r7
    }
 23f857e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            return print ("ovf"); // constant determined empirically
 23f8582:	f001 b894 	b.w	23f96ae <_ZN5Print5printEPKc>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 23f8586:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
        if (std::isinf(number)) {
 23f858a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f858e:	4620      	mov	r0, r4
 23f8590:	4649      	mov	r1, r9
 23f8592:	4b47      	ldr	r3, [pc, #284]	; (23f86b0 <_ZN5Print10printFloatEdh+0x154>)
 23f8594:	f7ed f98a 	bl	23e58ac <__aeabi_dcmpun>
 23f8598:	b948      	cbnz	r0, 23f85ae <_ZN5Print10printFloatEdh+0x52>
 23f859a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f859e:	4620      	mov	r0, r4
 23f85a0:	4649      	mov	r1, r9
 23f85a2:	4b43      	ldr	r3, [pc, #268]	; (23f86b0 <_ZN5Print10printFloatEdh+0x154>)
 23f85a4:	f7ed f964 	bl	23e5870 <__aeabi_dcmple>
 23f85a8:	b908      	cbnz	r0, 23f85ae <_ZN5Print10printFloatEdh+0x52>
            return print("inf");
 23f85aa:	4942      	ldr	r1, [pc, #264]	; (23f86b4 <_ZN5Print10printFloatEdh+0x158>)
 23f85ac:	e7e6      	b.n	23f857c <_ZN5Print10printFloatEdh+0x20>
        if (number > 4294967040.0) {
 23f85ae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23f85b2:	4620      	mov	r0, r4
 23f85b4:	4629      	mov	r1, r5
 23f85b6:	4b40      	ldr	r3, [pc, #256]	; (23f86b8 <_ZN5Print10printFloatEdh+0x15c>)
 23f85b8:	f7ed f96e 	bl	23e5898 <__aeabi_dcmpgt>
 23f85bc:	b108      	cbz	r0, 23f85c2 <_ZN5Print10printFloatEdh+0x66>
            return print ("ovf"); // constant determined empirically
 23f85be:	493f      	ldr	r1, [pc, #252]	; (23f86bc <_ZN5Print10printFloatEdh+0x160>)
 23f85c0:	e7dc      	b.n	23f857c <_ZN5Print10printFloatEdh+0x20>
        if (number <-4294967040.0) {
 23f85c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23f85c6:	4620      	mov	r0, r4
 23f85c8:	4629      	mov	r1, r5
 23f85ca:	4b3d      	ldr	r3, [pc, #244]	; (23f86c0 <_ZN5Print10printFloatEdh+0x164>)
 23f85cc:	f7ed f946 	bl	23e585c <__aeabi_dcmplt>
 23f85d0:	2800      	cmp	r0, #0
 23f85d2:	d1f4      	bne.n	23f85be <_ZN5Print10printFloatEdh+0x62>
        if (number < 0.0) {
 23f85d4:	2200      	movs	r2, #0
 23f85d6:	2300      	movs	r3, #0
 23f85d8:	4620      	mov	r0, r4
 23f85da:	4629      	mov	r1, r5
 23f85dc:	f7ed f93e 	bl	23e585c <__aeabi_dcmplt>
 23f85e0:	b1d0      	cbz	r0, 23f8618 <_ZN5Print10printFloatEdh+0xbc>
            n += print('-');
 23f85e2:	212d      	movs	r1, #45	; 0x2d
 23f85e4:	4638      	mov	r0, r7
 23f85e6:	f001 f866 	bl	23f96b6 <_ZN5Print5printEc>
            number = -number;
 23f85ea:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
            n += print('-');
 23f85ee:	4682      	mov	sl, r0
            number = -number;
 23f85f0:	461d      	mov	r5, r3
        size_t n = 0;
 23f85f2:	f04f 0b00 	mov.w	fp, #0
        double rounding = 0.5;
 23f85f6:	2000      	movs	r0, #0
            rounding /= 10.0;
 23f85f8:	f04f 0800 	mov.w	r8, #0
        double rounding = 0.5;
 23f85fc:	4931      	ldr	r1, [pc, #196]	; (23f86c4 <_ZN5Print10printFloatEdh+0x168>)
            rounding /= 10.0;
 23f85fe:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 23f86cc <_ZN5Print10printFloatEdh+0x170>
        for (uint8_t i = 0; i < digits; ++i) {
 23f8602:	fa5f f38b 	uxtb.w	r3, fp
 23f8606:	429e      	cmp	r6, r3
 23f8608:	d908      	bls.n	23f861c <_ZN5Print10printFloatEdh+0xc0>
            rounding /= 10.0;
 23f860a:	4642      	mov	r2, r8
 23f860c:	464b      	mov	r3, r9
 23f860e:	f7ec ffdd 	bl	23e55cc <__aeabi_ddiv>
        for (uint8_t i = 0; i < digits; ++i) {
 23f8612:	f10b 0b01 	add.w	fp, fp, #1
 23f8616:	e7f4      	b.n	23f8602 <_ZN5Print10printFloatEdh+0xa6>
        size_t n = 0;
 23f8618:	4682      	mov	sl, r0
 23f861a:	e7ea      	b.n	23f85f2 <_ZN5Print10printFloatEdh+0x96>
        number += rounding;
 23f861c:	4602      	mov	r2, r0
 23f861e:	460b      	mov	r3, r1
 23f8620:	4620      	mov	r0, r4
 23f8622:	4629      	mov	r1, r5
 23f8624:	f7ec fcf2 	bl	23e500c <__adddf3>
 23f8628:	460d      	mov	r5, r1
 23f862a:	4604      	mov	r4, r0
        unsigned long int_part = (unsigned long)number;
 23f862c:	f7ed f97c 	bl	23e5928 <__aeabi_d2uiz>
 23f8630:	4680      	mov	r8, r0
        double remainder = number - (double)int_part;
 23f8632:	f7ec fe27 	bl	23e5284 <__aeabi_ui2d>
 23f8636:	4602      	mov	r2, r0
 23f8638:	460b      	mov	r3, r1
 23f863a:	4620      	mov	r0, r4
 23f863c:	4629      	mov	r1, r5
 23f863e:	f7ec fce3 	bl	23e5008 <__aeabi_dsub>
        return printNumber(val, base) + t;
 23f8642:	220a      	movs	r2, #10
        double remainder = number - (double)int_part;
 23f8644:	4604      	mov	r4, r0
 23f8646:	460d      	mov	r5, r1
        return printNumber(val, base) + t;
 23f8648:	4638      	mov	r0, r7
 23f864a:	4641      	mov	r1, r8
 23f864c:	f001 f850 	bl	23f96f0 <_ZN5Print11printNumberEmh>
        n += print(int_part);
 23f8650:	4482      	add	sl, r0
        if (digits > 0) {
 23f8652:	b33e      	cbz	r6, 23f86a4 <_ZN5Print10printFloatEdh+0x148>
            n += print(".");
 23f8654:	4638      	mov	r0, r7
 23f8656:	491c      	ldr	r1, [pc, #112]	; (23f86c8 <_ZN5Print10printFloatEdh+0x16c>)
 23f8658:	f001 f829 	bl	23f96ae <_ZN5Print5printEPKc>
            remainder *= 10.0;
 23f865c:	f04f 0800 	mov.w	r8, #0
 23f8660:	f8df 9068 	ldr.w	r9, [pc, #104]	; 23f86cc <_ZN5Print10printFloatEdh+0x170>
            n += print(".");
 23f8664:	4482      	add	sl, r0
        while (digits-- > 0) {
 23f8666:	b1ee      	cbz	r6, 23f86a4 <_ZN5Print10printFloatEdh+0x148>
            remainder *= 10.0;
 23f8668:	4642      	mov	r2, r8
 23f866a:	464b      	mov	r3, r9
 23f866c:	4620      	mov	r0, r4
 23f866e:	4629      	mov	r1, r5
 23f8670:	f7ec fe82 	bl	23e5378 <__aeabi_dmul>
 23f8674:	460d      	mov	r5, r1
 23f8676:	4604      	mov	r4, r0
            int toPrint = int(remainder);
 23f8678:	f7ed f92e 	bl	23e58d8 <__aeabi_d2iz>
 23f867c:	4601      	mov	r1, r0
 23f867e:	4683      	mov	fp, r0
inline size_t Print::print(T n, int base)
 23f8680:	4638      	mov	r0, r7
 23f8682:	f7ff ff59 	bl	23f8538 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
            n += print(toPrint);
 23f8686:	4482      	add	sl, r0
            remainder -= toPrint;
 23f8688:	4658      	mov	r0, fp
 23f868a:	f7ec fe0b 	bl	23e52a4 <__aeabi_i2d>
 23f868e:	4602      	mov	r2, r0
 23f8690:	460b      	mov	r3, r1
 23f8692:	4620      	mov	r0, r4
 23f8694:	4629      	mov	r1, r5
 23f8696:	f7ec fcb7 	bl	23e5008 <__aeabi_dsub>
 23f869a:	3e01      	subs	r6, #1
 23f869c:	4604      	mov	r4, r0
 23f869e:	460d      	mov	r5, r1
 23f86a0:	b2f6      	uxtb	r6, r6
        while (digits-- > 0) {
 23f86a2:	e7e0      	b.n	23f8666 <_ZN5Print10printFloatEdh+0x10a>
    }
 23f86a4:	4650      	mov	r0, sl
 23f86a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f86aa:	bf00      	nop
 23f86ac:	023ff9a8 	.word	0x023ff9a8
 23f86b0:	7fefffff 	.word	0x7fefffff
 23f86b4:	023ff9ac 	.word	0x023ff9ac
 23f86b8:	41efffff 	.word	0x41efffff
 23f86bc:	023ff9b0 	.word	0x023ff9b0
 23f86c0:	c1efffff 	.word	0xc1efffff
 23f86c4:	3fe00000 	.word	0x3fe00000
 23f86c8:	023fe647 	.word	0x023fe647
 23f86cc:	40240000 	.word	0x40240000

023f86d0 <_ZNK14CellularSignal7printToER5Print>:
{
 23f86d0:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
 23f86d2:	6803      	ldr	r3, [r0, #0]
{
 23f86d4:	460c      	mov	r4, r1
    n += p.print(this->getStrengthValue(), 2);
 23f86d6:	691b      	ldr	r3, [r3, #16]
{
 23f86d8:	4605      	mov	r5, r0
    n += p.print(this->getStrengthValue(), 2);
 23f86da:	4798      	blx	r3
 23f86dc:	ee10 0a10 	vmov	r0, s0
        return printFloat((double)n, digits);
 23f86e0:	f7ec fdf2 	bl	23e52c8 <__aeabi_f2d>
 23f86e4:	ec41 0b10 	vmov	d0, r0, r1
 23f86e8:	2102      	movs	r1, #2
 23f86ea:	4620      	mov	r0, r4
 23f86ec:	f7ff ff36 	bl	23f855c <_ZN5Print10printFloatEdh>
    n += p.print(',');
 23f86f0:	212c      	movs	r1, #44	; 0x2c
 23f86f2:	4606      	mov	r6, r0
 23f86f4:	4620      	mov	r0, r4
 23f86f6:	f000 ffde 	bl	23f96b6 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
 23f86fa:	682b      	ldr	r3, [r5, #0]
    n += p.print(',');
 23f86fc:	4406      	add	r6, r0
    n += p.print(this->getQualityValue(), 2);
 23f86fe:	699b      	ldr	r3, [r3, #24]
 23f8700:	4628      	mov	r0, r5
 23f8702:	4798      	blx	r3
 23f8704:	ee10 0a10 	vmov	r0, s0
 23f8708:	f7ec fdde 	bl	23e52c8 <__aeabi_f2d>
 23f870c:	ec41 0b10 	vmov	d0, r0, r1
 23f8710:	2102      	movs	r1, #2
 23f8712:	4620      	mov	r0, r4
 23f8714:	f7ff ff22 	bl	23f855c <_ZN5Print10printFloatEdh>
}
 23f8718:	4430      	add	r0, r6
 23f871a:	bd70      	pop	{r4, r5, r6, pc}

023f871c <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 23f871c:	f1a0 0004 	sub.w	r0, r0, #4
 23f8720:	f7ff bfd6 	b.w	23f86d0 <_ZNK14CellularSignal7printToER5Print>

023f8724 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
 23f8724:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 23f8726:	460d      	mov	r5, r1
 23f8728:	f100 0408 	add.w	r4, r0, #8
 23f872c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f872e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f8730:	e895 0003 	ldmia.w	r5, {r0, r1}
 23f8734:	e884 0003 	stmia.w	r4, {r0, r1}
}
 23f8738:	2001      	movs	r0, #1
 23f873a:	bd30      	pop	{r4, r5, pc}

023f873c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23f873c:	4770      	bx	lr

023f873e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 23f873e:	2000      	movs	r0, #0
 23f8740:	4770      	bx	lr

023f8742 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23f8742:	b510      	push	{r4, lr}
 23f8744:	4604      	mov	r4, r0
 23f8746:	2110      	movs	r1, #16
 23f8748:	f7ed fc7f 	bl	23e604a <_ZdlPvj>
 23f874c:	4620      	mov	r0, r4
 23f874e:	bd10      	pop	{r4, pc}

023f8750 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 23f8750:	b508      	push	{r3, lr}
      { delete this; }
 23f8752:	f7ff fff6 	bl	23f8742 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 23f8756:	bd08      	pop	{r3, pc}

023f8758 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 23f8758:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 23f875a:	b530      	push	{r4, r5, lr}
        type_(type) {
 23f875c:	f64f 749c 	movw	r4, #65436	; 0xff9c
 23f8760:	6002      	str	r2, [r0, #0]
 23f8762:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 23f8764:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23f8766:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23f8768:	680c      	ldr	r4, [r1, #0]
 23f876a:	8085      	strh	r5, [r0, #4]
 23f876c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23f876e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 23f8770:	bd30      	pop	{r4, r5, pc}

023f8772 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 23f8772:	b510      	push	{r4, lr}
 23f8774:	4604      	mov	r4, r0
    free((void*)msg_);
 23f8776:	6800      	ldr	r0, [r0, #0]
 23f8778:	f7ff fcee 	bl	23f8158 <free>
}
 23f877c:	4620      	mov	r0, r4
 23f877e:	bd10      	pop	{r4, pc}

023f8780 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23f8780:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 23f8782:	68c4      	ldr	r4, [r0, #12]
 23f8784:	b314      	cbz	r4, 23f87cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x4c>
 23f8786:	7823      	ldrb	r3, [r4, #0]
 23f8788:	b2db      	uxtb	r3, r3
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 23f878a:	2b02      	cmp	r3, #2
 23f878c:	d103      	bne.n	23f8796 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x16>
            error_.~Error();
 23f878e:	f104 000c 	add.w	r0, r4, #12
 23f8792:	f7ff ffee 	bl	23f8772 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 23f8796:	1d23      	adds	r3, r4, #4
 23f8798:	681d      	ldr	r5, [r3, #0]
        delete onSuccess_.load(std::memory_order_relaxed);
 23f879a:	b135      	cbz	r5, 23f87aa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x2a>
    class function<_Res(_ArgTypes...)>
 23f879c:	4628      	mov	r0, r5
 23f879e:	f7fe fe71 	bl	23f7484 <_ZNSt14_Function_baseD1Ev>
 23f87a2:	2110      	movs	r1, #16
 23f87a4:	4628      	mov	r0, r5
 23f87a6:	f7ed fc50 	bl	23e604a <_ZdlPvj>
 23f87aa:	f104 0308 	add.w	r3, r4, #8
 23f87ae:	681d      	ldr	r5, [r3, #0]
        delete onError_.load(std::memory_order_relaxed);
 23f87b0:	b135      	cbz	r5, 23f87c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x40>
 23f87b2:	4628      	mov	r0, r5
 23f87b4:	f7fe fe66 	bl	23f7484 <_ZNSt14_Function_baseD1Ev>
 23f87b8:	2110      	movs	r1, #16
 23f87ba:	4628      	mov	r0, r5
 23f87bc:	f7ed fc45 	bl	23e604a <_ZdlPvj>
 23f87c0:	4620      	mov	r0, r4
 23f87c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23f87c6:	2114      	movs	r1, #20
 23f87c8:	f7ed bc3f 	b.w	23e604a <_ZdlPvj>
 23f87cc:	bd38      	pop	{r3, r4, r5, pc}

023f87ce <_ZNK22CloudDisconnectOptions15toSystemOptionsEv>:

} // namespace

spark_cloud_disconnect_options CloudDisconnectOptions::toSystemOptions() const
{
    spark_cloud_disconnect_options opts = {};
 23f87ce:	2200      	movs	r2, #0
 23f87d0:	8142      	strh	r2, [r0, #10]
    opts.size = sizeof(opts);
 23f87d2:	220c      	movs	r2, #12
 23f87d4:	8002      	strh	r2, [r0, #0]
    opts.flags = flags_;
 23f87d6:	680a      	ldr	r2, [r1, #0]
 23f87d8:	7082      	strb	r2, [r0, #2]
    opts.graceful = graceful_;
 23f87da:	7a0a      	ldrb	r2, [r1, #8]
 23f87dc:	70c2      	strb	r2, [r0, #3]
    opts.timeout = timeout_;
 23f87de:	684a      	ldr	r2, [r1, #4]
 23f87e0:	6042      	str	r2, [r0, #4]
    opts.clear_session = clearSession_;
 23f87e2:	7a4a      	ldrb	r2, [r1, #9]
 23f87e4:	7202      	strb	r2, [r0, #8]
    opts.reconnect_immediately = reconnect_;
 23f87e6:	7a8a      	ldrb	r2, [r1, #10]
 23f87e8:	7242      	strb	r2, [r0, #9]
    return opts;
}
 23f87ea:	4770      	bx	lr

023f87ec <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession, options->reconnect_immediately);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 23f87ec:	b510      	push	{r4, lr}
 23f87ee:	b088      	sub	sp, #32
 23f87f0:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 23f87f2:	4668      	mov	r0, sp
 23f87f4:	f001 f960 	bl	23f9ab8 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 23f87f8:	4669      	mov	r1, sp
 23f87fa:	a804      	add	r0, sp, #16
 23f87fc:	f001 f97f 	bl	23f9afe <_ZN6StringC1ERKS_>
 23f8800:	a804      	add	r0, sp, #16
 23f8802:	47a0      	blx	r4
 23f8804:	4604      	mov	r4, r0
 23f8806:	a804      	add	r0, sp, #16
 23f8808:	f001 f90b 	bl	23f9a22 <_ZN6StringD1Ev>
    String p(param);
 23f880c:	4668      	mov	r0, sp
 23f880e:	f001 f908 	bl	23f9a22 <_ZN6StringD1Ev>
}
 23f8812:	4620      	mov	r0, r4
 23f8814:	b008      	add	sp, #32
 23f8816:	bd10      	pop	{r4, pc}

023f8818 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 23f8818:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 23f881a:	2300      	movs	r3, #0
         size = sizeof(*this);
 23f881c:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 23f881e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 23f8822:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 23f8824:	4669      	mov	r1, sp
 23f8826:	461a      	mov	r2, r3
 23f8828:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 23f882a:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 23f882e:	f8ad 4000 	strh.w	r4, [sp]
 23f8832:	f7ff fb25 	bl	23f7e80 <spark_function>
}
 23f8836:	b004      	add	sp, #16
 23f8838:	bd10      	pop	{r4, pc}

023f883a <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 23f883a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f883c:	4601      	mov	r1, r0
    const auto opts = options.toSystemOptions();
 23f883e:	a801      	add	r0, sp, #4
 23f8840:	f7ff ffc5 	bl	23f87ce <_ZNK22CloudDisconnectOptions15toSystemOptionsEv>
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 23f8844:	2100      	movs	r1, #0
 23f8846:	f7ff fba7 	bl	23f7f98 <spark_cloud_disconnect>
}
 23f884a:	b005      	add	sp, #20
 23f884c:	f85d fb04 	ldr.w	pc, [sp], #4

023f8850 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>:

void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
 23f8850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const auto opts = options.toSystemOptions();
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
 23f8852:	2300      	movs	r3, #0
void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
 23f8854:	4601      	mov	r1, r0
    const auto opts = options.toSystemOptions();
 23f8856:	a801      	add	r0, sp, #4
 23f8858:	f7ff ffb9 	bl	23f87ce <_ZNK22CloudDisconnectOptions15toSystemOptionsEv>
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
 23f885c:	4602      	mov	r2, r0
 23f885e:	4619      	mov	r1, r3
 23f8860:	2002      	movs	r0, #2
 23f8862:	f7ff fb7d 	bl	23f7f60 <spark_set_connection_property>
}
 23f8866:	b005      	add	sp, #20
 23f8868:	f85d fb04 	ldr.w	pc, [sp], #4

023f886c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
 23f886c:	680b      	ldr	r3, [r1, #0]
 23f886e:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23f8870:	684b      	ldr	r3, [r1, #4]
 23f8872:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23f8874:	b113      	cbz	r3, 23f887c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 23f8876:	685a      	ldr	r2, [r3, #4]
 23f8878:	3201      	adds	r2, #1
 23f887a:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23f887c:	4770      	bx	lr

023f887e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 23f887e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f8880:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23f8882:	4668      	mov	r0, sp
 23f8884:	460d      	mov	r5, r1
 23f8886:	f7ff fff1 	bl	23f886c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 23f888a:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23f888c:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23f888e:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 23f8890:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23f8892:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 23f8894:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 23f8896:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 23f8898:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 23f889a:	f7ff fd16 	bl	23f82ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 23f889e:	b135      	cbz	r5, 23f88ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 23f88a0:	1d28      	adds	r0, r5, #4
 23f88a2:	f7ff fd12 	bl	23f82ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f88a6:	2108      	movs	r1, #8
 23f88a8:	4628      	mov	r0, r5
 23f88aa:	f7ed fbce 	bl	23e604a <_ZdlPvj>
        return p;
    }
 23f88ae:	4620      	mov	r0, r4
 23f88b0:	b003      	add	sp, #12
 23f88b2:	bd30      	pop	{r4, r5, pc}

023f88b4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 23f88b4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23f88b6:	b510      	push	{r4, lr}
      if (_M_empty())
 23f88b8:	b90a      	cbnz	r2, 23f88be <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 23f88ba:	f001 fdc3 	bl	23fa444 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f88be:	68c3      	ldr	r3, [r0, #12]
    }
 23f88c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f88c4:	4718      	bx	r3

023f88c6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f88c6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23f88c8:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23f88ca:	f100 0110 	add.w	r1, r0, #16
 23f88ce:	f7ff fff1 	bl	23f88b4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 23f88d2:	bd08      	pop	{r3, pc}

023f88d4 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 23f88d4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23f88d6:	b510      	push	{r4, lr}
      if (_M_empty())
 23f88d8:	b90a      	cbnz	r2, 23f88de <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 23f88da:	f001 fdb3 	bl	23fa444 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f88de:	68c3      	ldr	r3, [r0, #12]
    }
 23f88e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f88e4:	4718      	bx	r3

023f88e6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f88e6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23f88e8:	6800      	ldr	r0, [r0, #0]
 23f88ea:	f100 0110 	add.w	r1, r0, #16
 23f88ee:	f7ff fff1 	bl	23f88d4 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 23f88f2:	bd08      	pop	{r3, pc}

023f88f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 23f88f4:	b538      	push	{r3, r4, r5, lr}
 23f88f6:	2300      	movs	r3, #0
 23f88f8:	4604      	mov	r4, r0
 23f88fa:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23f88fc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 23f88fe:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23f8900:	f7ed fb9f 	bl	23e6042 <_Znwj>
 23f8904:	b128      	cbz	r0, 23f8912 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 23f8906:	2301      	movs	r3, #1
 23f8908:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 23f890c:	4b02      	ldr	r3, [pc, #8]	; (23f8918 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 23f890e:	60c5      	str	r5, [r0, #12]
 23f8910:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23f8912:	6020      	str	r0, [r4, #0]
	}
 23f8914:	4620      	mov	r0, r4
 23f8916:	bd38      	pop	{r3, r4, r5, pc}
 23f8918:	023ff9f8 	.word	0x023ff9f8

023f891c <_ZN8particle10FutureBaseIbNS_6detail13FutureContextEEC1ENS_5Error4TypeE>:
    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
    }

    explicit FutureBase(Error::Type error) :
 23f891c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        type_(type) {
 23f891e:	2600      	movs	r6, #0
 23f8920:	f8ad 1004 	strh.w	r1, [sp, #4]
 23f8924:	4605      	mov	r5, r0
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23f8926:	4669      	mov	r1, sp
 23f8928:	a802      	add	r0, sp, #8
 23f892a:	9600      	str	r6, [sp, #0]
 23f892c:	f7ff ff14 	bl	23f8758 <_ZN8particle5ErrorC1EOS0_>
 23f8930:	2014      	movs	r0, #20
 23f8932:	f7ed fb86 	bl	23e6042 <_Znwj>
 23f8936:	4604      	mov	r4, r0
 23f8938:	b148      	cbz	r0, 23f894e <_ZN8particle10FutureBaseIbNS_6detail13FutureContextEEC1ENS_5Error4TypeE+0x32>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 23f893a:	2302      	movs	r3, #2
 23f893c:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23f893e:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23f8940:	e9c0 6601 	strd	r6, r6, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23f8944:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 23f8946:	a902      	add	r1, sp, #8
 23f8948:	300c      	adds	r0, #12
 23f894a:	f7ff ff05 	bl	23f8758 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23f894e:	4628      	mov	r0, r5
	: __shared_count(__p)
 23f8950:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23f8952:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 23f8956:	f7ff ffcd 	bl	23f88f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23f895a:	a802      	add	r0, sp, #8
 23f895c:	f7ff ff09 	bl	23f8772 <_ZN8particle5ErrorD1Ev>
            FutureBase(Error(error)) {
 23f8960:	4668      	mov	r0, sp
 23f8962:	f7ff ff06 	bl	23f8772 <_ZN8particle5ErrorD1Ev>
    }
 23f8966:	4628      	mov	r0, r5
 23f8968:	b004      	add	sp, #16
 23f896a:	bd70      	pop	{r4, r5, r6, pc}

023f896c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 23f896c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23f896e:	2300      	movs	r3, #0
 23f8970:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23f8972:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23f8974:	4604      	mov	r4, r0
 23f8976:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23f8978:	b12b      	cbz	r3, 23f8986 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f897a:	2202      	movs	r2, #2
 23f897c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f897e:	68eb      	ldr	r3, [r5, #12]
 23f8980:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23f8982:	68ab      	ldr	r3, [r5, #8]
 23f8984:	60a3      	str	r3, [r4, #8]
    }
 23f8986:	4620      	mov	r0, r4
 23f8988:	bd38      	pop	{r3, r4, r5, pc}
	...

023f898c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 23f898c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f898e:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23f8990:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 23f8992:	4668      	mov	r0, sp
 23f8994:	f7ff fee0 	bl	23f8758 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23f8998:	f04f 0302 	mov.w	r3, #2
 23f899c:	e8d4 2f4f 	ldrexb	r2, [r4]
 23f89a0:	2a00      	cmp	r2, #0
 23f89a2:	d103      	bne.n	23f89ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 23f89a4:	e8c4 3f41 	strexb	r1, r3, [r4]
 23f89a8:	2900      	cmp	r1, #0
 23f89aa:	d1f7      	bne.n	23f899c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 23f89ac:	d121      	bne.n	23f89f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
            new(&error_) Error(std::move(error));
 23f89ae:	f104 050c 	add.w	r5, r4, #12
 23f89b2:	4669      	mov	r1, sp
 23f89b4:	4628      	mov	r0, r5
 23f89b6:	f7ff fecf 	bl	23f8758 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 23f89ba:	2201      	movs	r2, #1
 23f89bc:	1c63      	adds	r3, r4, #1
 23f89be:	e8c3 2f8f 	stlb	r2, [r3]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23f89c2:	2000      	movs	r0, #0
 23f89c4:	f104 0308 	add.w	r3, r4, #8
 23f89c8:	e8d3 6fef 	ldaex	r6, [r3]
 23f89cc:	e8c3 0fe2 	stlex	r2, r0, [r3]
 23f89d0:	2a00      	cmp	r2, #0
 23f89d2:	d1f9      	bne.n	23f89c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
        if (callbackPtr) {
 23f89d4:	b16e      	cbz	r6, 23f89f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
        return (application_thread_current(nullptr) != 0);
 23f89d6:	f7ff f9d5 	bl	23f7d84 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23f89da:	b178      	cbz	r0, 23f89fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x70>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23f89dc:	4629      	mov	r1, r5
 23f89de:	4630      	mov	r0, r6
 23f89e0:	f7ff ff68 	bl	23f88b4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 23f89e4:	4630      	mov	r0, r6
 23f89e6:	f7fe fd4d 	bl	23f7484 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23f89ea:	2110      	movs	r1, #16
 23f89ec:	4630      	mov	r0, r6
 23f89ee:	f7ed fb2c 	bl	23e604a <_ZdlPvj>
        p_->setError(std::move(error));
 23f89f2:	4668      	mov	r0, sp
 23f89f4:	f7ff febd 	bl	23f8772 <_ZN8particle5ErrorD1Ev>
    }
 23f89f8:	b009      	add	sp, #36	; 0x24
 23f89fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23f89fc:	4631      	mov	r1, r6
 23f89fe:	a802      	add	r0, sp, #8
 23f8a00:	f7ff ffb4 	bl	23f896c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23f8a04:	68e0      	ldr	r0, [r4, #12]
 23f8a06:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23f8a0a:	b108      	cbz	r0, 23f8a10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x84>
 23f8a0c:	f004 fa7c 	bl	23fcf08 <strdup>
        type_(type) {
 23f8a10:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23f8a12:	2010      	movs	r0, #16
 23f8a14:	f8ad 501c 	strh.w	r5, [sp, #28]
 23f8a18:	f7ed fb13 	bl	23e6042 <_Znwj>
 23f8a1c:	4605      	mov	r5, r0
 23f8a1e:	b1e8      	cbz	r0, 23f8a5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd0>
    _Function_base() : _M_manager(nullptr) { }
 23f8a20:	2700      	movs	r7, #0
 23f8a22:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f8a24:	2018      	movs	r0, #24
 23f8a26:	f7ed fb0c 	bl	23e6042 <_Znwj>
 23f8a2a:	4604      	mov	r4, r0
 23f8a2c:	b188      	cbz	r0, 23f8a52 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc6>
	std::swap(_M_functor, __x._M_functor);
 23f8a2e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23f8a30:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23f8a32:	a802      	add	r0, sp, #8
 23f8a34:	f7ff fc73 	bl	23f831e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f8a38:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 23f8a3a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f8a3c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f8a3e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23f8a40:	9204      	str	r2, [sp, #16]
 23f8a42:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23f8a44:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 23f8a46:	60e3      	str	r3, [r4, #12]
 23f8a48:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 23f8a4c:	9205      	str	r2, [sp, #20]
 23f8a4e:	f7ff fe83 	bl	23f8758 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 23f8a52:	4b08      	ldr	r3, [pc, #32]	; (23f8a74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f8a54:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23f8a56:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23f8a58:	4b07      	ldr	r3, [pc, #28]	; (23f8a78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>)
 23f8a5a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 23f8a5c:	a806      	add	r0, sp, #24
 23f8a5e:	f7ff fe88 	bl	23f8772 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23f8a62:	a802      	add	r0, sp, #8
 23f8a64:	f7fe fd0e 	bl	23f7484 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23f8a68:	2200      	movs	r2, #0
 23f8a6a:	4629      	mov	r1, r5
 23f8a6c:	4803      	ldr	r0, [pc, #12]	; (23f8a7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
 23f8a6e:	f7ff f997 	bl	23f7da0 <application_thread_invoke>
 23f8a72:	e7b7      	b.n	23f89e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 23f8a74:	023f88c7 	.word	0x023f88c7
 23f8a78:	023f8b59 	.word	0x023f8b59
 23f8a7c:	023f82f7 	.word	0x023f82f7

023f8a80 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE>:
        PublishFlags flags) {
 23f8a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f8a84:	b08d      	sub	sp, #52	; 0x34
 23f8a86:	4604      	mov	r4, r0
 23f8a88:	460e      	mov	r6, r1
 23f8a8a:	4617      	mov	r7, r2
 23f8a8c:	4699      	mov	r9, r3
 23f8a8e:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23f8a92:	f7ff fa1f 	bl	23f7ed4 <spark_cloud_flag_connected>
    if (!connected()) {
 23f8a96:	b940      	cbnz	r0, 23f8aaa <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0x2a>
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 23f8a98:	f06f 01d1 	mvn.w	r1, #209	; 0xd1
 23f8a9c:	4620      	mov	r0, r4
 23f8a9e:	f7ff ff3d 	bl	23f891c <_ZN8particle10FutureBaseIbNS_6detail13FutureContextEEC1ENS_5Error4TypeE>
}
 23f8aa2:	4620      	mov	r0, r4
 23f8aa4:	b00d      	add	sp, #52	; 0x34
 23f8aa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d.size = sizeof(spark_send_event_data);
 23f8aaa:	2014      	movs	r0, #20
    spark_send_event_data d = {};
 23f8aac:	2500      	movs	r5, #0
    d.content_type = static_cast<int>(type);
 23f8aae:	9b14      	ldr	r3, [sp, #80]	; 0x50
    spark_send_event_data d = {};
 23f8ab0:	e9cd 5508 	strd	r5, r5, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 23f8ab4:	9007      	str	r0, [sp, #28]
    d.data_size = size;
 23f8ab6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    d.content_type = static_cast<int>(type);
 23f8aba:	930b      	str	r3, [sp, #44]	; 0x2c
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 23f8abc:	f7ed fac1 	bl	23e6042 <_Znwj>
 23f8ac0:	4601      	mov	r1, r0
 23f8ac2:	b118      	cbz	r0, 23f8acc <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23f8ac4:	e9c0 5501 	strd	r5, r5, [r0, #4]
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 23f8ac8:	7005      	strb	r5, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23f8aca:	7045      	strb	r5, [r0, #1]
	: __shared_count(__p)
 23f8acc:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23f8ace:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 23f8ad0:	f7ff ff10 	bl	23f88f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 23f8ad4:	4b1f      	ldr	r3, [pc, #124]	; (23f8b54 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0xd4>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 23f8ad6:	2008      	movs	r0, #8
 23f8ad8:	9308      	str	r3, [sp, #32]
 23f8ada:	f7ed fab2 	bl	23e6042 <_Znwj>
 23f8ade:	4605      	mov	r5, r0
 23f8ae0:	b110      	cbz	r0, 23f8ae8 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0x68>
 23f8ae2:	a903      	add	r1, sp, #12
 23f8ae4:	f7ff fec2 	bl	23f886c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(name, data, ttl, flags.value(), &d) && !p.isDone()) {
 23f8ae8:	ab07      	add	r3, sp, #28
 23f8aea:	9300      	str	r3, [sp, #0]
 23f8aec:	4639      	mov	r1, r7
 23f8aee:	4630      	mov	r0, r6
 23f8af0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 23f8af2:	fa5f f388 	uxtb.w	r3, r8
    d.handler_data = p.dataPtr();
 23f8af6:	9509      	str	r5, [sp, #36]	; 0x24
    if (!spark_send_event(name, data, ttl, flags.value(), &d) && !p.isDone()) {
 23f8af8:	f7ff fa08 	bl	23f7f0c <spark_send_event>
 23f8afc:	b9b8      	cbnz	r0, 23f8b2e <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0xae>
	return __atomic_load_n(&_M_i, int(__m));
 23f8afe:	9b03      	ldr	r3, [sp, #12]
 23f8b00:	3301      	adds	r3, #1
 23f8b02:	781b      	ldrb	r3, [r3, #0]
 23f8b04:	b2db      	uxtb	r3, r3
 23f8b06:	b993      	cbnz	r3, 23f8b2e <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0xae>
        type_(type) {
 23f8b08:	9305      	str	r3, [sp, #20]
 23f8b0a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 23f8b0e:	a905      	add	r1, sp, #20
 23f8b10:	a803      	add	r0, sp, #12
 23f8b12:	f8ad 3018 	strh.w	r3, [sp, #24]
 23f8b16:	f7ff ff39 	bl	23f898c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23f8b1a:	a805      	add	r0, sp, #20
 23f8b1c:	f7ff fe29 	bl	23f8772 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 23f8b20:	a805      	add	r0, sp, #20
 23f8b22:	9909      	ldr	r1, [sp, #36]	; 0x24
 23f8b24:	f7ff feab 	bl	23f887e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 23f8b28:	a806      	add	r0, sp, #24
 23f8b2a:	f7ff fbce 	bl	23f82ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f8b2e:	a903      	add	r1, sp, #12
 23f8b30:	a805      	add	r0, sp, #20
 23f8b32:	f7ff fe9b 	bl	23f886c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 23f8b36:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23f8b38:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23f8b3a:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 23f8b3c:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23f8b3e:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 23f8b40:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 23f8b42:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 23f8b44:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 23f8b46:	f7ff fbc0 	bl	23f82ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f8b4a:	a804      	add	r0, sp, #16
 23f8b4c:	f7ff fbbd 	bl	23f82ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 23f8b50:	e7a7      	b.n	23f8aa2 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0x22>
 23f8b52:	bf00      	nop
 23f8b54:	023f8c1d 	.word	0x023f8c1d

023f8b58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 23f8b58:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23f8b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f8b5c:	4605      	mov	r5, r0
	switch (__op)
 23f8b5e:	d103      	bne.n	23f8b68 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23f8b60:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f8b62:	6003      	str	r3, [r0, #0]
      }
 23f8b64:	2000      	movs	r0, #0
 23f8b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 23f8b68:	2a02      	cmp	r2, #2
 23f8b6a:	d010      	beq.n	23f8b8e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 23f8b6c:	2a03      	cmp	r2, #3
 23f8b6e:	d1f9      	bne.n	23f8b64 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23f8b70:	6804      	ldr	r4, [r0, #0]
 23f8b72:	2c00      	cmp	r4, #0
 23f8b74:	d0f6      	beq.n	23f8b64 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 23f8b76:	f104 0010 	add.w	r0, r4, #16
 23f8b7a:	f7ff fdfa 	bl	23f8772 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23f8b7e:	4620      	mov	r0, r4
 23f8b80:	f7fe fc80 	bl	23f7484 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23f8b84:	2118      	movs	r1, #24
 23f8b86:	4620      	mov	r0, r4
 23f8b88:	f7ed fa5f 	bl	23e604a <_ZdlPvj>
 23f8b8c:	e7ea      	b.n	23f8b64 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23f8b8e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 23f8b90:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23f8b92:	f7ed fa56 	bl	23e6042 <_Znwj>
 23f8b96:	4604      	mov	r4, r0
 23f8b98:	b150      	cbz	r0, 23f8bb0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 23f8b9a:	4631      	mov	r1, r6
 23f8b9c:	f7ff fee6 	bl	23f896c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23f8ba0:	6930      	ldr	r0, [r6, #16]
 23f8ba2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23f8ba6:	b108      	cbz	r0, 23f8bac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 23f8ba8:	f004 f9ae 	bl	23fcf08 <strdup>
        type_(type) {
 23f8bac:	6120      	str	r0, [r4, #16]
 23f8bae:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 23f8bb0:	602c      	str	r4, [r5, #0]
	}
 23f8bb2:	e7d7      	b.n	23f8b64 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

023f8bb4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 23f8bb4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23f8bb6:	2300      	movs	r3, #0
 23f8bb8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23f8bba:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23f8bbc:	4604      	mov	r4, r0
 23f8bbe:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23f8bc0:	b12b      	cbz	r3, 23f8bce <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f8bc2:	2202      	movs	r2, #2
 23f8bc4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f8bc6:	68eb      	ldr	r3, [r5, #12]
 23f8bc8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23f8bca:	68ab      	ldr	r3, [r5, #8]
 23f8bcc:	60a3      	str	r3, [r4, #8]
    }
 23f8bce:	4620      	mov	r0, r4
 23f8bd0:	bd38      	pop	{r3, r4, r5, pc}

023f8bd2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 23f8bd2:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23f8bd4:	b570      	push	{r4, r5, r6, lr}
 23f8bd6:	4604      	mov	r4, r0
	switch (__op)
 23f8bd8:	d103      	bne.n	23f8be2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23f8bda:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f8bdc:	6003      	str	r3, [r0, #0]
      }
 23f8bde:	2000      	movs	r0, #0
 23f8be0:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 23f8be2:	2a02      	cmp	r2, #2
 23f8be4:	d00c      	beq.n	23f8c00 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 23f8be6:	2a03      	cmp	r2, #3
 23f8be8:	d1f9      	bne.n	23f8bde <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23f8bea:	6804      	ldr	r4, [r0, #0]
 23f8bec:	2c00      	cmp	r4, #0
 23f8bee:	d0f6      	beq.n	23f8bde <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23f8bf0:	4620      	mov	r0, r4
 23f8bf2:	f7fe fc47 	bl	23f7484 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23f8bf6:	2114      	movs	r1, #20
 23f8bf8:	4620      	mov	r0, r4
 23f8bfa:	f7ed fa26 	bl	23e604a <_ZdlPvj>
 23f8bfe:	e7ee      	b.n	23f8bde <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23f8c00:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 23f8c02:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23f8c04:	f7ed fa1d 	bl	23e6042 <_Znwj>
 23f8c08:	4605      	mov	r5, r0
 23f8c0a:	b120      	cbz	r0, 23f8c16 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
 23f8c0c:	4631      	mov	r1, r6
 23f8c0e:	f7ff ffd1 	bl	23f8bb4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 23f8c12:	7c33      	ldrb	r3, [r6, #16]
 23f8c14:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 23f8c16:	6025      	str	r5, [r4, #0]
	}
 23f8c18:	e7e1      	b.n	23f8bde <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	...

023f8c1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 23f8c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f8c1e:	4604      	mov	r4, r0
 23f8c20:	b089      	sub	sp, #36	; 0x24
 23f8c22:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 23f8c24:	a801      	add	r0, sp, #4
 23f8c26:	4611      	mov	r1, r2
 23f8c28:	f7ff fe29 	bl	23f887e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 23f8c2c:	b1a4      	cbz	r4, 23f8c58 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 23f8c2e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23f8c30:	b11d      	cbz	r5, 23f8c3a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 23f8c32:	4628      	mov	r0, r5
 23f8c34:	f004 f968 	bl	23fcf08 <strdup>
 23f8c38:	4605      	mov	r5, r0
 23f8c3a:	a801      	add	r0, sp, #4
 23f8c3c:	a903      	add	r1, sp, #12
        type_(type) {
 23f8c3e:	9503      	str	r5, [sp, #12]
 23f8c40:	f8ad 4010 	strh.w	r4, [sp, #16]
 23f8c44:	f7ff fea2 	bl	23f898c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23f8c48:	a803      	add	r0, sp, #12
 23f8c4a:	f7ff fd92 	bl	23f8772 <_ZN8particle5ErrorD1Ev>
 23f8c4e:	a802      	add	r0, sp, #8
 23f8c50:	f7ff fb3b 	bl	23f82ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f8c54:	b009      	add	sp, #36	; 0x24
 23f8c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23f8c58:	2301      	movs	r3, #1
      { return _M_ptr; }
 23f8c5a:	9d01      	ldr	r5, [sp, #4]
 23f8c5c:	e8d5 2f4f 	ldrexb	r2, [r5]
 23f8c60:	2a00      	cmp	r2, #0
 23f8c62:	d103      	bne.n	23f8c6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 23f8c64:	e8c5 3f41 	strexb	r1, r3, [r5]
 23f8c68:	2900      	cmp	r1, #0
 23f8c6a:	d1f7      	bne.n	23f8c5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 23f8c6c:	d1ef      	bne.n	23f8c4e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 23f8c6e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 23f8c70:	2201      	movs	r2, #1
 23f8c72:	18eb      	adds	r3, r5, r3
 23f8c74:	e8c3 2f8f 	stlb	r2, [r3]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23f8c78:	1d2b      	adds	r3, r5, #4
 23f8c7a:	e8d3 6fef 	ldaex	r6, [r3]
 23f8c7e:	e8c3 4fe2 	stlex	r2, r4, [r3]
 23f8c82:	2a00      	cmp	r2, #0
 23f8c84:	d1f9      	bne.n	23f8c7a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x5e>
        if (callbackPtr) {
 23f8c86:	2e00      	cmp	r6, #0
 23f8c88:	d0e1      	beq.n	23f8c4e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 23f8c8a:	4620      	mov	r0, r4
 23f8c8c:	f7ff f87a 	bl	23f7d84 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23f8c90:	4607      	mov	r7, r0
 23f8c92:	b160      	cbz	r0, 23f8cae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x92>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23f8c94:	4630      	mov	r0, r6
 23f8c96:	f105 010c 	add.w	r1, r5, #12
 23f8c9a:	f7ff fe1b 	bl	23f88d4 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 23f8c9e:	4630      	mov	r0, r6
 23f8ca0:	f7fe fbf0 	bl	23f7484 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23f8ca4:	2110      	movs	r1, #16
 23f8ca6:	4630      	mov	r0, r6
 23f8ca8:	f7ed f9cf 	bl	23e604a <_ZdlPvj>
 23f8cac:	e7cf      	b.n	23f8c4e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23f8cae:	4631      	mov	r1, r6
 23f8cb0:	a803      	add	r0, sp, #12
 23f8cb2:	f7ff ff7f 	bl	23f8bb4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23f8cb6:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23f8cb8:	2010      	movs	r0, #16
 23f8cba:	f88d 301c 	strb.w	r3, [sp, #28]
 23f8cbe:	f7ed f9c0 	bl	23e6042 <_Znwj>
 23f8cc2:	4605      	mov	r5, r0
 23f8cc4:	b1d0      	cbz	r0, 23f8cfc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe0>
    _Function_base() : _M_manager(nullptr) { }
 23f8cc6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f8cc8:	2014      	movs	r0, #20
 23f8cca:	f7ed f9ba 	bl	23e6042 <_Znwj>
 23f8cce:	4604      	mov	r4, r0
 23f8cd0:	b178      	cbz	r0, 23f8cf2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xd6>
	std::swap(_M_functor, __x._M_functor);
 23f8cd2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23f8cd4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23f8cd6:	a803      	add	r0, sp, #12
 23f8cd8:	f7ff fb21 	bl	23f831e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f8cdc:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23f8cde:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f8ce0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f8ce2:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 23f8ce4:	9205      	str	r2, [sp, #20]
 23f8ce6:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f8ce8:	60e3      	str	r3, [r4, #12]
 23f8cea:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 23f8cee:	9206      	str	r2, [sp, #24]
 23f8cf0:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 23f8cf2:	4b07      	ldr	r3, [pc, #28]	; (23f8d10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f8cf4:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23f8cf6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23f8cf8:	4b06      	ldr	r3, [pc, #24]	; (23f8d14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
 23f8cfa:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 23f8cfc:	a803      	add	r0, sp, #12
 23f8cfe:	f7fe fbc1 	bl	23f7484 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23f8d02:	2200      	movs	r2, #0
 23f8d04:	4629      	mov	r1, r5
 23f8d06:	4804      	ldr	r0, [pc, #16]	; (23f8d18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 23f8d08:	f7ff f84a 	bl	23f7da0 <application_thread_invoke>
 23f8d0c:	e7c7      	b.n	23f8c9e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x82>
 23f8d0e:	bf00      	nop
 23f8d10:	023f88e7 	.word	0x023f88e7
 23f8d14:	023f8bd3 	.word	0x023f8bd3
 23f8d18:	023f82f7 	.word	0x023f82f7

023f8d1c <_GLOBAL__sub_I__ZN8particle10CloudEvent15s_subscriptionsE>:
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 23f8d1c:	2200      	movs	r2, #0
 23f8d1e:	4b02      	ldr	r3, [pc, #8]	; (23f8d28 <_GLOBAL__sub_I__ZN8particle10CloudEvent15s_subscriptionsE+0xc>)
 23f8d20:	e9c3 2200 	strd	r2, r2, [r3]
 23f8d24:	609a      	str	r2, [r3, #8]
        // Keep the reference around until the application callback is called
        d.unwrap();
    }
}

} // namespace particle
 23f8d26:	4770      	bx	lr
 23f8d28:	1007aee8 	.word	0x1007aee8

023f8d2c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23f8d2c:	2200      	movs	r2, #0
 23f8d2e:	6840      	ldr	r0, [r0, #4]
 23f8d30:	4611      	mov	r1, r2
 23f8d32:	f7ff b9a1 	b.w	23f8078 <network_listening>

023f8d36 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23f8d36:	2200      	movs	r2, #0
 23f8d38:	6840      	ldr	r0, [r0, #4]
 23f8d3a:	4611      	mov	r1, r2
 23f8d3c:	f7ff b9b8 	b.w	23f80b0 <network_get_listen_timeout>

023f8d40 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23f8d40:	2200      	movs	r2, #0
 23f8d42:	6840      	ldr	r0, [r0, #4]
 23f8d44:	f7ff b9a6 	b.w	23f8094 <network_set_listen_timeout>

023f8d48 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23f8d48:	2200      	movs	r2, #0
 23f8d4a:	6840      	ldr	r0, [r0, #4]
 23f8d4c:	f081 0101 	eor.w	r1, r1, #1
 23f8d50:	f7ff b984 	b.w	23f805c <network_listen>

023f8d54 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23f8d54:	2300      	movs	r3, #0
 23f8d56:	6840      	ldr	r0, [r0, #4]
 23f8d58:	461a      	mov	r2, r3
 23f8d5a:	4619      	mov	r1, r3
 23f8d5c:	f7ff b970 	b.w	23f8040 <network_off>

023f8d60 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23f8d60:	2300      	movs	r3, #0
 23f8d62:	6840      	ldr	r0, [r0, #4]
 23f8d64:	461a      	mov	r2, r3
 23f8d66:	4619      	mov	r1, r3
 23f8d68:	f7ff b95c 	b.w	23f8024 <network_on>

023f8d6c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23f8d6c:	2200      	movs	r2, #0
 23f8d6e:	6840      	ldr	r0, [r0, #4]
 23f8d70:	4611      	mov	r1, r2
 23f8d72:	f7ff b949 	b.w	23f8008 <network_ready>

023f8d76 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23f8d76:	2200      	movs	r2, #0
 23f8d78:	6840      	ldr	r0, [r0, #4]
 23f8d7a:	4611      	mov	r1, r2
 23f8d7c:	f7ff b928 	b.w	23f7fd0 <network_connecting>

023f8d80 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23f8d80:	2200      	movs	r2, #0
 23f8d82:	2102      	movs	r1, #2
 23f8d84:	6840      	ldr	r0, [r0, #4]
 23f8d86:	f7ff b931 	b.w	23f7fec <network_disconnect>

023f8d8a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23f8d8a:	2300      	movs	r3, #0
 23f8d8c:	6840      	ldr	r0, [r0, #4]
 23f8d8e:	461a      	mov	r2, r3
 23f8d90:	f7ff b910 	b.w	23f7fb4 <network_connect>

023f8d94 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
 23f8d94:	2203      	movs	r2, #3
 23f8d96:	4b02      	ldr	r3, [pc, #8]	; (23f8da0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23f8d98:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23f8d9a:	4a02      	ldr	r2, [pc, #8]	; (23f8da4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23f8d9c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23f8d9e:	4770      	bx	lr
 23f8da0:	1007aef4 	.word	0x1007aef4
 23f8da4:	023ffa14 	.word	0x023ffa14

023f8da8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23f8da8:	4770      	bx	lr

023f8daa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23f8daa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f8dac:	4606      	mov	r6, r0
 23f8dae:	4615      	mov	r5, r2
 23f8db0:	460c      	mov	r4, r1
 23f8db2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23f8db4:	42bc      	cmp	r4, r7
 23f8db6:	d006      	beq.n	23f8dc6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23f8db8:	6833      	ldr	r3, [r6, #0]
 23f8dba:	4630      	mov	r0, r6
 23f8dbc:	689b      	ldr	r3, [r3, #8]
 23f8dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 23f8dc2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23f8dc4:	e7f6      	b.n	23f8db4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23f8dc6:	4628      	mov	r0, r5
 23f8dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f8dca <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23f8dca:	2200      	movs	r2, #0
 23f8dcc:	7c00      	ldrb	r0, [r0, #16]
 23f8dce:	f7fe bd2b 	b.w	23f7828 <hal_i2c_write>

023f8dd2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23f8dd2:	2100      	movs	r1, #0
 23f8dd4:	7c00      	ldrb	r0, [r0, #16]
 23f8dd6:	f7fe bd35 	b.w	23f7844 <hal_i2c_available>

023f8dda <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23f8dda:	2100      	movs	r1, #0
 23f8ddc:	7c00      	ldrb	r0, [r0, #16]
 23f8dde:	f7fe bd3f 	b.w	23f7860 <hal_i2c_read>

023f8de2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23f8de2:	2100      	movs	r1, #0
 23f8de4:	7c00      	ldrb	r0, [r0, #16]
 23f8de6:	f7fe bd49 	b.w	23f787c <hal_i2c_peek>

023f8dea <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23f8dea:	2100      	movs	r1, #0
 23f8dec:	7c00      	ldrb	r0, [r0, #16]
 23f8dee:	f7fe bd53 	b.w	23f7898 <hal_i2c_flush>

023f8df2 <_ZN7TwoWireD0Ev>:
 23f8df2:	b510      	push	{r4, lr}
 23f8df4:	4604      	mov	r4, r0
 23f8df6:	2114      	movs	r1, #20
 23f8df8:	f7ed f927 	bl	23e604a <_ZdlPvj>
 23f8dfc:	4620      	mov	r0, r4
 23f8dfe:	bd10      	pop	{r4, pc}

023f8e00 <_ZNK16WireTransmission9halConfigEv>:
    hal_i2c_transmission_config_t conf = {
 23f8e00:	2200      	movs	r2, #0
 23f8e02:	e9c0 2200 	strd	r2, r2, [r0]
 23f8e06:	2218      	movs	r2, #24
 23f8e08:	8002      	strh	r2, [r0, #0]
    };
 23f8e0a:	780a      	ldrb	r2, [r1, #0]
 23f8e0c:	7102      	strb	r2, [r0, #4]
 23f8e0e:	684a      	ldr	r2, [r1, #4]
 23f8e10:	6082      	str	r2, [r0, #8]
 23f8e12:	68ca      	ldr	r2, [r1, #12]
 23f8e14:	60c2      	str	r2, [r0, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0),
 23f8e16:	7a0a      	ldrb	r2, [r1, #8]
 23f8e18:	6102      	str	r2, [r0, #16]
    };
 23f8e1a:	690a      	ldr	r2, [r1, #16]
 23f8e1c:	6142      	str	r2, [r0, #20]
  }
 23f8e1e:	4770      	bx	lr

023f8e20 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23f8e20:	b538      	push	{r3, r4, r5, lr}
 23f8e22:	4604      	mov	r4, r0
 23f8e24:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23f8e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f8e2a:	2200      	movs	r2, #0
 23f8e2c:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23f8e30:	4b09      	ldr	r3, [pc, #36]	; (23f8e58 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23f8e32:	4608      	mov	r0, r1
  _i2c = i2c;
 23f8e34:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23f8e36:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23f8e38:	4629      	mov	r1, r5
 23f8e3a:	f7fe fd49 	bl	23f78d0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23f8e3e:	30bf      	adds	r0, #191	; 0xbf
 23f8e40:	d108      	bne.n	23f8e54 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23f8e42:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23f8e44:	07db      	lsls	r3, r3, #31
 23f8e46:	d505      	bpl.n	23f8e54 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23f8e48:	6868      	ldr	r0, [r5, #4]
 23f8e4a:	f7ff f985 	bl	23f8158 <free>
    free(conf.tx_buffer);
 23f8e4e:	68e8      	ldr	r0, [r5, #12]
 23f8e50:	f7ff f982 	bl	23f8158 <free>
}
 23f8e54:	4620      	mov	r0, r4
 23f8e56:	bd38      	pop	{r3, r4, r5, pc}
 23f8e58:	023ffa58 	.word	0x023ffa58

023f8e5c <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 23f8e5c:	2200      	movs	r2, #0
 23f8e5e:	7c00      	ldrb	r0, [r0, #16]
 23f8e60:	f7fe bcaa 	b.w	23f77b8 <hal_i2c_set_speed>

023f8e64 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23f8e64:	2300      	movs	r3, #0
 23f8e66:	7c00      	ldrb	r0, [r0, #16]
 23f8e68:	461a      	mov	r2, r3
 23f8e6a:	4619      	mov	r1, r3
 23f8e6c:	f7fe bcb2 	b.w	23f77d4 <hal_i2c_begin>

023f8e70 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 23f8e70:	b510      	push	{r4, lr}
 23f8e72:	4604      	mov	r4, r0
 23f8e74:	b086      	sub	sp, #24
  auto conf = transfer.halConfig();
 23f8e76:	4668      	mov	r0, sp
 23f8e78:	f7ff ffc2 	bl	23f8e00 <_ZNK16WireTransmission9halConfigEv>
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 23f8e7c:	2200      	movs	r2, #0
 23f8e7e:	4669      	mov	r1, sp
 23f8e80:	7c20      	ldrb	r0, [r4, #16]
 23f8e82:	f7fe fd4f 	bl	23f7924 <hal_i2c_request_ex>
}
 23f8e86:	b006      	add	sp, #24
 23f8e88:	bd10      	pop	{r4, pc}

023f8e8a <_ZN7TwoWire11requestFromEhjh>:
{
 23f8e8a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        buffer_(nullptr) {
 23f8e8c:	f88d 1004 	strb.w	r1, [sp, #4]
 23f8e90:	2100      	movs	r1, #0
 23f8e92:	f04f 0c64 	mov.w	ip, #100	; 0x64
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 23f8e96:	1a5b      	subs	r3, r3, r1
 23f8e98:	bf18      	it	ne
 23f8e9a:	2301      	movne	r3, #1
 23f8e9c:	e9cd c104 	strd	ip, r1, [sp, #16]
 23f8ea0:	a901      	add	r1, sp, #4
    size_ = size;
 23f8ea2:	9202      	str	r2, [sp, #8]
 23f8ea4:	f88d 300c 	strb.w	r3, [sp, #12]
 23f8ea8:	f7ff ffe2 	bl	23f8e70 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 23f8eac:	b007      	add	sp, #28
 23f8eae:	f85d fb04 	ldr.w	pc, [sp], #4

023f8eb2 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 23f8eb2:	2301      	movs	r3, #1
 23f8eb4:	f7ff bfe9 	b.w	23f8e8a <_ZN7TwoWire11requestFromEhjh>

023f8eb8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23f8eb8:	2200      	movs	r2, #0
 23f8eba:	7c00      	ldrb	r0, [r0, #16]
 23f8ebc:	f7fe bc98 	b.w	23f77f0 <hal_i2c_begin_transmission>

023f8ec0 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 23f8ec0:	b2c9      	uxtb	r1, r1
 23f8ec2:	f7ff bff9 	b.w	23f8eb8 <_ZN7TwoWire17beginTransmissionEh>

023f8ec6 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23f8ec6:	2200      	movs	r2, #0
 23f8ec8:	7c00      	ldrb	r0, [r0, #16]
 23f8eca:	f7fe bc9f 	b.w	23f780c <hal_i2c_end_transmission>

023f8ece <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 23f8ece:	2101      	movs	r1, #1
 23f8ed0:	f7ff bff9 	b.w	23f8ec6 <_ZN7TwoWire15endTransmissionEh>

023f8ed4 <_ZN7TwoWire4lockEv>:
{
  return hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 23f8ed4:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
 23f8ed6:	2100      	movs	r1, #0
 23f8ed8:	7c00      	ldrb	r0, [r0, #16]
 23f8eda:	f7fe fd07 	bl	23f78ec <hal_i2c_lock>
}
 23f8ede:	fab0 f080 	clz	r0, r0
 23f8ee2:	0940      	lsrs	r0, r0, #5
 23f8ee4:	bd08      	pop	{r3, pc}

023f8ee6 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 23f8ee6:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
 23f8ee8:	2100      	movs	r1, #0
 23f8eea:	7c00      	ldrb	r0, [r0, #16]
 23f8eec:	f7fe fd0c 	bl	23f7908 <hal_i2c_unlock>
}
 23f8ef0:	fab0 f080 	clz	r0, r0
 23f8ef4:	0940      	lsrs	r0, r0, #5
 23f8ef6:	bd08      	pop	{r3, pc}

023f8ef8 <_ZN7TwoWire11transactionERK16WireTransmissionS2_>:

#if HAL_PLATFORM_I2C_NUM == 1
int TwoWire::transaction(const WireTransmission& tx, const WireTransmission& rx)
{
 23f8ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f8efc:	b08c      	sub	sp, #48	; 0x30
  auto txConf = tx.halConfig();
 23f8efe:	466c      	mov	r4, sp
{
 23f8f00:	4615      	mov	r5, r2
 23f8f02:	460f      	mov	r7, r1
 23f8f04:	4606      	mov	r6, r0
  auto rxConf = rx.halConfig();
 23f8f06:	f10d 0818 	add.w	r8, sp, #24
  auto txConf = tx.halConfig();
 23f8f0a:	4620      	mov	r0, r4
 23f8f0c:	f7ff ff78 	bl	23f8e00 <_ZNK16WireTransmission9halConfigEv>
  auto rxConf = rx.halConfig();
 23f8f10:	4629      	mov	r1, r5
 23f8f12:	4640      	mov	r0, r8
 23f8f14:	f7ff ff74 	bl	23f8e00 <_ZNK16WireTransmission9halConfigEv>
  return hal_i2c_transaction(_i2c, tx.isValid() ? &txConf : nullptr, rx.isValid() ? &rxConf : nullptr, nullptr);
 23f8f18:	783b      	ldrb	r3, [r7, #0]
 23f8f1a:	7c30      	ldrb	r0, [r6, #16]
 23f8f1c:	2bff      	cmp	r3, #255	; 0xff
 23f8f1e:	782b      	ldrb	r3, [r5, #0]
 23f8f20:	bf14      	ite	ne
 23f8f22:	4621      	movne	r1, r4
 23f8f24:	2100      	moveq	r1, #0
 23f8f26:	2bff      	cmp	r3, #255	; 0xff
 23f8f28:	f04f 0300 	mov.w	r3, #0
 23f8f2c:	bf14      	ite	ne
 23f8f2e:	4642      	movne	r2, r8
 23f8f30:	461a      	moveq	r2, r3
 23f8f32:	f7fe fd05 	bl	23f7940 <hal_i2c_transaction>
}
 23f8f36:	b00c      	add	sp, #48	; 0x30
 23f8f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f8f3c <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t>:
        buffer_(nullptr) {
 23f8f3c:	21ff      	movs	r1, #255	; 0xff
 23f8f3e:	2200      	movs	r2, #0
      : address_{address},
 23f8f40:	4b04      	ldr	r3, [pc, #16]	; (23f8f54 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t+0x18>)
        buffer_(nullptr) {
 23f8f42:	2001      	movs	r0, #1
 23f8f44:	e9c3 1200 	strd	r1, r2, [r3]
 23f8f48:	2164      	movs	r1, #100	; 0x64
 23f8f4a:	611a      	str	r2, [r3, #16]
 23f8f4c:	e9c3 0102 	strd	r0, r1, [r3, #8]

namespace particle {
namespace detail {
const WireTransmission WIRE_INVALID_TRANSMISSION(0xff);
} // detail
} // particle
 23f8f50:	4770      	bx	lr
 23f8f52:	bf00      	nop
 23f8f54:	1007aefc 	.word	0x1007aefc

023f8f58 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 23f8f58:	4700      	bx	r0
	...

023f8f5c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 23f8f5c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 23f8f60:	461d      	mov	r5, r3
    hal_interrupt_detach(pin);
    hal_interrupt_extra_configuration_t extra = {};
 23f8f62:	2400      	movs	r4, #0
{
 23f8f64:	460f      	mov	r7, r1
 23f8f66:	4690      	mov	r8, r2
 23f8f68:	4606      	mov	r6, r0
    hal_interrupt_detach(pin);
 23f8f6a:	f7fe fc09 	bl	23f7780 <hal_interrupt_detach>
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 23f8f6e:	2304      	movs	r3, #4
  if (priority >= 0) {
 23f8f70:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 23f8f72:	f88d 3008 	strb.w	r3, [sp, #8]
    extra.IRQChannelSubPriority = subpriority;
 23f8f76:	bfa8      	it	ge
 23f8f78:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    hal_interrupt_extra_configuration_t extra = {};
 23f8f7c:	f8cd 4009 	str.w	r4, [sp, #9]
    return &extra;
 23f8f80:	bfa4      	itt	ge
 23f8f82:	ac02      	addge	r4, sp, #8
    extra.IRQChannelSubPriority = subpriority;
 23f8f84:	f88d 300a 	strbge.w	r3, [sp, #10]
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 23f8f88:	463a      	mov	r2, r7
 23f8f8a:	4643      	mov	r3, r8
 23f8f8c:	4630      	mov	r0, r6
 23f8f8e:	4906      	ldr	r1, [pc, #24]	; (23f8fa8 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)
 23f8f90:	9400      	str	r4, [sp, #0]
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 23f8f92:	bfa8      	it	ge
 23f8f94:	f88d 5009 	strbge.w	r5, [sp, #9]
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 23f8f98:	f7fe fbe4 	bl	23f7764 <hal_interrupt_attach>
        return false;
    }
    return true;
}
 23f8f9c:	fab0 f080 	clz	r0, r0
 23f8fa0:	0940      	lsrs	r0, r0, #5
 23f8fa2:	b004      	add	sp, #16
 23f8fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f8fa8:	023f8f59 	.word	0x023f8f59

023f8fac <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23f8fac:	4770      	bx	lr

023f8fae <_ZN9IPAddressD0Ev>:
 23f8fae:	b510      	push	{r4, lr}
 23f8fb0:	4604      	mov	r4, r0
 23f8fb2:	2118      	movs	r1, #24
 23f8fb4:	f7ed f849 	bl	23e604a <_ZdlPvj>
 23f8fb8:	4620      	mov	r0, r4
 23f8fba:	bd10      	pop	{r4, pc}

023f8fbc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23f8fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23f8fbe:	7d03      	ldrb	r3, [r0, #20]
{
 23f8fc0:	460e      	mov	r6, r1
	if (address.v==6) {
 23f8fc2:	2b06      	cmp	r3, #6
 23f8fc4:	f04f 0400 	mov.w	r4, #0
{
 23f8fc8:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f8fca:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23f8fce:	d012      	beq.n	23f8ff6 <_ZNK9IPAddress7printToER5Print+0x3a>
 23f8fd0:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
 23f8fd4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23f8fd8:	220a      	movs	r2, #10
 23f8fda:	4630      	mov	r0, r6
 23f8fdc:	f000 fb88 	bl	23f96f0 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23f8fe0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23f8fe2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23f8fe4:	d019      	beq.n	23f901a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23f8fe6:	2c00      	cmp	r4, #0
 23f8fe8:	d0f4      	beq.n	23f8fd4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23f8fea:	212e      	movs	r1, #46	; 0x2e
 23f8fec:	4630      	mov	r0, r6
 23f8fee:	f000 fb62 	bl	23f96b6 <_ZN5Print5printEc>
 23f8ff2:	4404      	add	r4, r0
 23f8ff4:	e7ee      	b.n	23f8fd4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f8ff6:	232f      	movs	r3, #47	; 0x2f
 23f8ff8:	466a      	mov	r2, sp
 23f8ffa:	4639      	mov	r1, r7
 23f8ffc:	200a      	movs	r0, #10
		buf[0] = 0;
 23f8ffe:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f9002:	f7fe fcb9 	bl	23f7978 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23f9006:	4668      	mov	r0, sp
 23f9008:	f7ec fff6 	bl	23e5ff8 <strlen>
 23f900c:	6833      	ldr	r3, [r6, #0]
 23f900e:	4602      	mov	r2, r0
 23f9010:	4669      	mov	r1, sp
 23f9012:	4630      	mov	r0, r6
 23f9014:	68db      	ldr	r3, [r3, #12]
 23f9016:	4798      	blx	r3
 23f9018:	4604      	mov	r4, r0
    }
    return n;
}
 23f901a:	4620      	mov	r0, r4
 23f901c:	b00d      	add	sp, #52	; 0x34
 23f901e:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f9020 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23f9020:	b510      	push	{r4, lr}
 23f9022:	4604      	mov	r4, r0
 23f9024:	4b04      	ldr	r3, [pc, #16]	; (23f9038 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23f9026:	2211      	movs	r2, #17
 23f9028:	2100      	movs	r1, #0
 23f902a:	f840 3b04 	str.w	r3, [r0], #4
 23f902e:	f003 feee 	bl	23fce0e <memset>
}
 23f9032:	4620      	mov	r0, r4
 23f9034:	bd10      	pop	{r4, pc}
 23f9036:	bf00      	nop
 23f9038:	023ffa84 	.word	0x023ffa84

023f903c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23f903c:	4603      	mov	r3, r0
 23f903e:	4a07      	ldr	r2, [pc, #28]	; (23f905c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23f9040:	b510      	push	{r4, lr}
 23f9042:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23f9046:	f101 0210 	add.w	r2, r1, #16
 23f904a:	f851 4b04 	ldr.w	r4, [r1], #4
 23f904e:	4291      	cmp	r1, r2
 23f9050:	f843 4b04 	str.w	r4, [r3], #4
 23f9054:	d1f9      	bne.n	23f904a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23f9056:	780a      	ldrb	r2, [r1, #0]
 23f9058:	701a      	strb	r2, [r3, #0]
}
 23f905a:	bd10      	pop	{r4, pc}
 23f905c:	023ffa84 	.word	0x023ffa84

023f9060 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23f9060:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23f9062:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23f9066:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23f906a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23f906e:	2304      	movs	r3, #4
 23f9070:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23f9074:	6041      	str	r1, [r0, #4]
 23f9076:	7503      	strb	r3, [r0, #20]
}
 23f9078:	bd10      	pop	{r4, pc}
	...

023f907c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23f907c:	b507      	push	{r0, r1, r2, lr}
 23f907e:	4b06      	ldr	r3, [pc, #24]	; (23f9098 <_ZN9IPAddressC1EPKh+0x1c>)
 23f9080:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23f9082:	78cb      	ldrb	r3, [r1, #3]
 23f9084:	9300      	str	r3, [sp, #0]
 23f9086:	788b      	ldrb	r3, [r1, #2]
 23f9088:	784a      	ldrb	r2, [r1, #1]
 23f908a:	7809      	ldrb	r1, [r1, #0]
 23f908c:	f7ff ffe8 	bl	23f9060 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23f9090:	b003      	add	sp, #12
 23f9092:	f85d fb04 	ldr.w	pc, [sp], #4
 23f9096:	bf00      	nop
 23f9098:	023ffa84 	.word	0x023ffa84

023f909c <_ZN5spark16JSONBufferWriterD1Ev>:
private:
    Print &strm_;
    size_t bytesWritten_;
};

class JSONBufferWriter: public JSONWriter {
 23f909c:	4770      	bx	lr

023f909e <_ZN5spark16JSONBufferWriterD0Ev>:
 23f909e:	b510      	push	{r4, lr}
 23f90a0:	4604      	mov	r4, r0
 23f90a2:	2114      	movs	r1, #20
 23f90a4:	f7ec ffd1 	bl	23e604a <_ZdlPvj>
 23f90a8:	4620      	mov	r0, r4
 23f90aa:	bd10      	pop	{r4, pc}

023f90ac <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 23f90ac:	b538      	push	{r3, r4, r5, lr}
 23f90ae:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
 23f90b0:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 23f90b4:	4293      	cmp	r3, r2
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 23f90b6:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
 23f90b8:	d207      	bcs.n	23f90ca <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
 23f90ba:	1ad2      	subs	r2, r2, r3
 23f90bc:	6880      	ldr	r0, [r0, #8]
 23f90be:	42aa      	cmp	r2, r5
 23f90c0:	bf28      	it	cs
 23f90c2:	462a      	movcs	r2, r5
 23f90c4:	4418      	add	r0, r3
 23f90c6:	f003 fe95 	bl	23fcdf4 <memcpy>
    }
    n_ += size;
 23f90ca:	6922      	ldr	r2, [r4, #16]
 23f90cc:	442a      	add	r2, r5
 23f90ce:	6122      	str	r2, [r4, #16]
}
 23f90d0:	bd38      	pop	{r3, r4, r5, pc}

023f90d2 <_ZN5spark16JSONBufferWriter6printfEPKcz>:

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
 23f90d2:	b40e      	push	{r1, r2, r3}
 23f90d4:	b517      	push	{r0, r1, r2, r4, lr}
 23f90d6:	4604      	mov	r4, r0
 23f90d8:	ab05      	add	r3, sp, #20
 23f90da:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 23f90de:	68e1      	ldr	r1, [r4, #12]
    va_start(args, fmt);
 23f90e0:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 23f90e2:	6903      	ldr	r3, [r0, #16]
 23f90e4:	6880      	ldr	r0, [r0, #8]
 23f90e6:	428b      	cmp	r3, r1
 23f90e8:	bf34      	ite	cc
 23f90ea:	1ac9      	subcc	r1, r1, r3
 23f90ec:	2100      	movcs	r1, #0
 23f90ee:	4418      	add	r0, r3
 23f90f0:	9b01      	ldr	r3, [sp, #4]
 23f90f2:	f7ff f869 	bl	23f81c8 <vsnprintf>
    va_end(args);
    n_ += n;
 23f90f6:	6923      	ldr	r3, [r4, #16]
 23f90f8:	4418      	add	r0, r3
 23f90fa:	6120      	str	r0, [r4, #16]
}
 23f90fc:	b003      	add	sp, #12
 23f90fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f9102:	b003      	add	sp, #12
 23f9104:	4770      	bx	lr

023f9106 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23f9106:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23f9108:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23f910a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23f910e:	2201      	movs	r2, #1
 23f9110:	689b      	ldr	r3, [r3, #8]
 23f9112:	f10d 0107 	add.w	r1, sp, #7
 23f9116:	4798      	blx	r3
}
 23f9118:	b003      	add	sp, #12
 23f911a:	f85d fb04 	ldr.w	pc, [sp], #4

023f911e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23f911e:	b510      	push	{r4, lr}
    write('}');
 23f9120:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23f9122:	4604      	mov	r4, r0
    write('}');
 23f9124:	f7ff ffef 	bl	23f9106 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23f9128:	2301      	movs	r3, #1
}
 23f912a:	4620      	mov	r0, r4
    state_ = NEXT;
 23f912c:	7123      	strb	r3, [r4, #4]
}
 23f912e:	bd10      	pop	{r4, pc}

023f9130 <_ZN5spark10JSONWriter14writeSeparatorEv>:
void spark::JSONWriter::writeSeparator() {
 23f9130:	b508      	push	{r3, lr}
    switch (state_) {
 23f9132:	7903      	ldrb	r3, [r0, #4]
 23f9134:	2b01      	cmp	r3, #1
 23f9136:	d002      	beq.n	23f913e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23f9138:	2b02      	cmp	r3, #2
 23f913a:	d004      	beq.n	23f9146 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
}
 23f913c:	bd08      	pop	{r3, pc}
        write(',');
 23f913e:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23f9140:	f7ff ffe1 	bl	23f9106 <_ZN5spark10JSONWriter5writeEc>
}
 23f9144:	e7fa      	b.n	23f913c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23f9146:	213a      	movs	r1, #58	; 0x3a
 23f9148:	e7fa      	b.n	23f9140 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023f914a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23f914a:	b510      	push	{r4, lr}
 23f914c:	4604      	mov	r4, r0
    writeSeparator();
 23f914e:	f7ff ffef 	bl	23f9130 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23f9152:	4620      	mov	r0, r4
 23f9154:	217b      	movs	r1, #123	; 0x7b
 23f9156:	f7ff ffd6 	bl	23f9106 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23f915a:	2300      	movs	r3, #0
}
 23f915c:	4620      	mov	r0, r4
    state_ = BEGIN;
 23f915e:	7123      	strb	r3, [r4, #4]
}
 23f9160:	bd10      	pop	{r4, pc}
	...

023f9164 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23f9164:	b513      	push	{r0, r1, r4, lr}
 23f9166:	4604      	mov	r4, r0
 23f9168:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23f916a:	f7ff ffe1 	bl	23f9130 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23f916e:	6823      	ldr	r3, [r4, #0]
 23f9170:	4620      	mov	r0, r4
 23f9172:	68db      	ldr	r3, [r3, #12]
 23f9174:	9a01      	ldr	r2, [sp, #4]
 23f9176:	4903      	ldr	r1, [pc, #12]	; (23f9184 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23f9178:	4798      	blx	r3
    state_ = NEXT;
 23f917a:	2301      	movs	r3, #1
}
 23f917c:	4620      	mov	r0, r4
    state_ = NEXT;
 23f917e:	7123      	strb	r3, [r4, #4]
}
 23f9180:	b002      	add	sp, #8
 23f9182:	bd10      	pop	{r4, pc}
 23f9184:	023fda35 	.word	0x023fda35

023f9188 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23f9188:	b513      	push	{r0, r1, r4, lr}
 23f918a:	4604      	mov	r4, r0
 23f918c:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23f918e:	f7ff ffcf 	bl	23f9130 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23f9192:	6823      	ldr	r3, [r4, #0]
 23f9194:	4620      	mov	r0, r4
 23f9196:	68db      	ldr	r3, [r3, #12]
 23f9198:	9a01      	ldr	r2, [sp, #4]
 23f919a:	4903      	ldr	r1, [pc, #12]	; (23f91a8 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23f919c:	4798      	blx	r3
    state_ = NEXT;
 23f919e:	2301      	movs	r3, #1
}
 23f91a0:	4620      	mov	r0, r4
    state_ = NEXT;
 23f91a2:	7123      	strb	r3, [r4, #4]
}
 23f91a4:	b002      	add	sp, #8
 23f91a6:	bd10      	pop	{r4, pc}
 23f91a8:	023ffa90 	.word	0x023ffa90

023f91ac <_ZN5spark10JSONWriter5valueEm>:
spark::JSONWriter& spark::JSONWriter::value(unsigned long val) {
 23f91ac:	b513      	push	{r0, r1, r4, lr}
 23f91ae:	4604      	mov	r4, r0
 23f91b0:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23f91b2:	f7ff ffbd 	bl	23f9130 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%lu", val);
 23f91b6:	6823      	ldr	r3, [r4, #0]
 23f91b8:	4620      	mov	r0, r4
 23f91ba:	68db      	ldr	r3, [r3, #12]
 23f91bc:	9a01      	ldr	r2, [sp, #4]
 23f91be:	4903      	ldr	r1, [pc, #12]	; (23f91cc <_ZN5spark10JSONWriter5valueEm+0x20>)
 23f91c0:	4798      	blx	r3
    state_ = NEXT;
 23f91c2:	2301      	movs	r3, #1
}
 23f91c4:	4620      	mov	r0, r4
    state_ = NEXT;
 23f91c6:	7123      	strb	r3, [r4, #4]
}
 23f91c8:	b002      	add	sp, #8
 23f91ca:	bd10      	pop	{r4, pc}
 23f91cc:	023fda8e 	.word	0x023fda8e

023f91d0 <_ZN5spark10JSONWriter5valueEy>:
spark::JSONWriter& spark::JSONWriter::value(unsigned long long val) {
 23f91d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f91d2:	4604      	mov	r4, r0
 23f91d4:	e9cd 3200 	strd	r3, r2, [sp]
    writeSeparator();
 23f91d8:	f7ff ffaa 	bl	23f9130 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%llu", val);
 23f91dc:	e9dd 3200 	ldrd	r3, r2, [sp]
 23f91e0:	6821      	ldr	r1, [r4, #0]
 23f91e2:	4620      	mov	r0, r4
 23f91e4:	68cd      	ldr	r5, [r1, #12]
 23f91e6:	4903      	ldr	r1, [pc, #12]	; (23f91f4 <_ZN5spark10JSONWriter5valueEy+0x24>)
 23f91e8:	47a8      	blx	r5
    state_ = NEXT;
 23f91ea:	2301      	movs	r3, #1
}
 23f91ec:	4620      	mov	r0, r4
    state_ = NEXT;
 23f91ee:	7123      	strb	r3, [r4, #4]
}
 23f91f0:	b003      	add	sp, #12
 23f91f2:	bd30      	pop	{r4, r5, pc}
 23f91f4:	023ffa93 	.word	0x023ffa93

023f91f8 <_ZN5spark10JSONWriter5valueEdi>:
spark::JSONWriter& spark::JSONWriter::value(double val, int precision) {
 23f91f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f91fc:	4606      	mov	r6, r0
 23f91fe:	ec55 4b10 	vmov	r4, r5, d0
 23f9202:	460f      	mov	r7, r1
    writeSeparator();
 23f9204:	f7ff ff94 	bl	23f9130 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%.*lf", precision, toFinite(val)); // NaN and infinite values are not permitted by the spec
 23f9208:	6833      	ldr	r3, [r6, #0]
    if (std::isnan(val)) {
 23f920a:	4622      	mov	r2, r4
    printf("%.*lf", precision, toFinite(val)); // NaN and infinite values are not permitted by the spec
 23f920c:	f8d3 a00c 	ldr.w	sl, [r3, #12]
    if (std::isnan(val)) {
 23f9210:	4620      	mov	r0, r4
 23f9212:	462b      	mov	r3, r5
 23f9214:	4629      	mov	r1, r5
 23f9216:	f7ec fb49 	bl	23e58ac <__aeabi_dcmpun>
 23f921a:	bb38      	cbnz	r0, 23f926c <_ZN5spark10JSONWriter5valueEdi+0x74>
 23f921c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
    if (std::isinf(val)) {
 23f9220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f9224:	4620      	mov	r0, r4
 23f9226:	4649      	mov	r1, r9
 23f9228:	4b13      	ldr	r3, [pc, #76]	; (23f9278 <_ZN5spark10JSONWriter5valueEdi+0x80>)
 23f922a:	f7ec fb3f 	bl	23e58ac <__aeabi_dcmpun>
 23f922e:	b988      	cbnz	r0, 23f9254 <_ZN5spark10JSONWriter5valueEdi+0x5c>
 23f9230:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f9234:	4620      	mov	r0, r4
 23f9236:	4649      	mov	r1, r9
 23f9238:	4b0f      	ldr	r3, [pc, #60]	; (23f9278 <_ZN5spark10JSONWriter5valueEdi+0x80>)
 23f923a:	f7ec fb19 	bl	23e5870 <__aeabi_dcmple>
 23f923e:	b948      	cbnz	r0, 23f9254 <_ZN5spark10JSONWriter5valueEdi+0x5c>
        return (val < 0) ? std::numeric_limits<double>::lowest() : std::numeric_limits<double>::max();
 23f9240:	4620      	mov	r0, r4
 23f9242:	2200      	movs	r2, #0
 23f9244:	2300      	movs	r3, #0
 23f9246:	4629      	mov	r1, r5
 23f9248:	f7ec fb08 	bl	23e585c <__aeabi_dcmplt>
 23f924c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 23f9250:	b978      	cbnz	r0, 23f9272 <_ZN5spark10JSONWriter5valueEdi+0x7a>
 23f9252:	4d09      	ldr	r5, [pc, #36]	; (23f9278 <_ZN5spark10JSONWriter5valueEdi+0x80>)
    printf("%.*lf", precision, toFinite(val)); // NaN and infinite values are not permitted by the spec
 23f9254:	4630      	mov	r0, r6
 23f9256:	463a      	mov	r2, r7
 23f9258:	e9cd 4500 	strd	r4, r5, [sp]
 23f925c:	4907      	ldr	r1, [pc, #28]	; (23f927c <_ZN5spark10JSONWriter5valueEdi+0x84>)
 23f925e:	47d0      	blx	sl
    state_ = NEXT;
 23f9260:	2301      	movs	r3, #1
}
 23f9262:	4630      	mov	r0, r6
    state_ = NEXT;
 23f9264:	7133      	strb	r3, [r6, #4]
}
 23f9266:	b002      	add	sp, #8
 23f9268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return 0;
 23f926c:	2400      	movs	r4, #0
 23f926e:	2500      	movs	r5, #0
 23f9270:	e7f0      	b.n	23f9254 <_ZN5spark10JSONWriter5valueEdi+0x5c>
        return (val < 0) ? std::numeric_limits<double>::lowest() : std::numeric_limits<double>::max();
 23f9272:	f46f 1580 	mvn.w	r5, #1048576	; 0x100000
 23f9276:	e7ed      	b.n	23f9254 <_ZN5spark10JSONWriter5valueEdi+0x5c>
 23f9278:	7fefffff 	.word	0x7fefffff
 23f927c:	023ffa98 	.word	0x023ffa98

023f9280 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23f9280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f9284:	460d      	mov	r5, r1
 23f9286:	4690      	mov	r8, r2
    write('"');
 23f9288:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23f928a:	4604      	mov	r4, r0
 23f928c:	462f      	mov	r7, r5
    write('"');
 23f928e:	f7ff ff3a 	bl	23f9106 <_ZN5spark10JSONWriter5writeEc>
                printf("u%04x", (unsigned)c);
 23f9292:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23f9338 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23f9296:	44a8      	add	r8, r5
    while (s != end) {
 23f9298:	4547      	cmp	r7, r8
 23f929a:	46ba      	mov	sl, r7
 23f929c:	d03d      	beq.n	23f931a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23f929e:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23f92a2:	2e22      	cmp	r6, #34	; 0x22
 23f92a4:	d006      	beq.n	23f92b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23f92a6:	2e5c      	cmp	r6, #92	; 0x5c
 23f92a8:	d004      	beq.n	23f92b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23f92aa:	4630      	mov	r0, r6
 23f92ac:	f003 fd8a 	bl	23fcdc4 <isprint>
 23f92b0:	2800      	cmp	r0, #0
 23f92b2:	d1f1      	bne.n	23f9298 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23f92b4:	6823      	ldr	r3, [r4, #0]
 23f92b6:	4629      	mov	r1, r5
 23f92b8:	4620      	mov	r0, r4
 23f92ba:	689b      	ldr	r3, [r3, #8]
 23f92bc:	ebaa 0205 	sub.w	r2, sl, r5
 23f92c0:	4798      	blx	r3
            write('\\');
 23f92c2:	215c      	movs	r1, #92	; 0x5c
 23f92c4:	4620      	mov	r0, r4
 23f92c6:	f7ff ff1e 	bl	23f9106 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23f92ca:	2e0d      	cmp	r6, #13
 23f92cc:	d80a      	bhi.n	23f92e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23f92ce:	2e07      	cmp	r6, #7
 23f92d0:	d91c      	bls.n	23f930c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23f92d2:	f1a6 0308 	sub.w	r3, r6, #8
 23f92d6:	2b05      	cmp	r3, #5
 23f92d8:	d818      	bhi.n	23f930c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23f92da:	e8df f003 	tbb	[pc, r3]
 23f92de:	0f0d      	.short	0x0f0d
 23f92e0:	15131711 	.word	0x15131711
 23f92e4:	2e22      	cmp	r6, #34	; 0x22
 23f92e6:	d001      	beq.n	23f92ec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23f92e8:	2e5c      	cmp	r6, #92	; 0x5c
 23f92ea:	d10f      	bne.n	23f930c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23f92ec:	4631      	mov	r1, r6
                write('b');
 23f92ee:	4620      	mov	r0, r4
 23f92f0:	f7ff ff09 	bl	23f9106 <_ZN5spark10JSONWriter5writeEc>
            str = s + 1;
 23f92f4:	463d      	mov	r5, r7
    while (s != end) {
 23f92f6:	e7cf      	b.n	23f9298 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23f92f8:	2162      	movs	r1, #98	; 0x62
 23f92fa:	e7f8      	b.n	23f92ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23f92fc:	2174      	movs	r1, #116	; 0x74
 23f92fe:	e7f6      	b.n	23f92ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23f9300:	216e      	movs	r1, #110	; 0x6e
 23f9302:	e7f4      	b.n	23f92ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23f9304:	2166      	movs	r1, #102	; 0x66
 23f9306:	e7f2      	b.n	23f92ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23f9308:	2172      	movs	r1, #114	; 0x72
 23f930a:	e7f0      	b.n	23f92ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23f930c:	6823      	ldr	r3, [r4, #0]
 23f930e:	4632      	mov	r2, r6
 23f9310:	4649      	mov	r1, r9
 23f9312:	4620      	mov	r0, r4
 23f9314:	68db      	ldr	r3, [r3, #12]
 23f9316:	4798      	blx	r3
                break;
 23f9318:	e7ec      	b.n	23f92f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
    if (s != str) {
 23f931a:	42bd      	cmp	r5, r7
 23f931c:	d005      	beq.n	23f932a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23f931e:	6823      	ldr	r3, [r4, #0]
 23f9320:	4629      	mov	r1, r5
 23f9322:	4620      	mov	r0, r4
 23f9324:	689b      	ldr	r3, [r3, #8]
 23f9326:	1b7a      	subs	r2, r7, r5
 23f9328:	4798      	blx	r3
    write('"');
 23f932a:	2122      	movs	r1, #34	; 0x22
 23f932c:	4620      	mov	r0, r4
 23f932e:	f7ff feea 	bl	23f9106 <_ZN5spark10JSONWriter5writeEc>
}
 23f9332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f9336:	bf00      	nop
 23f9338:	023ffa9e 	.word	0x023ffa9e

023f933c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23f933c:	b513      	push	{r0, r1, r4, lr}
 23f933e:	4604      	mov	r4, r0
 23f9340:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23f9344:	f7ff fef4 	bl	23f9130 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23f9348:	e9dd 2100 	ldrd	r2, r1, [sp]
 23f934c:	4620      	mov	r0, r4
 23f934e:	f7ff ff97 	bl	23f9280 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23f9352:	2302      	movs	r3, #2
}
 23f9354:	4620      	mov	r0, r4
    state_ = VALUE;
 23f9356:	7123      	strb	r3, [r4, #4]
}
 23f9358:	b002      	add	sp, #8
 23f935a:	bd10      	pop	{r4, pc}

023f935c <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23f935c:	b513      	push	{r0, r1, r4, lr}
 23f935e:	4604      	mov	r4, r0
 23f9360:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23f9364:	f7ff fee4 	bl	23f9130 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23f9368:	e9dd 2100 	ldrd	r2, r1, [sp]
 23f936c:	4620      	mov	r0, r4
 23f936e:	f7ff ff87 	bl	23f9280 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23f9372:	2301      	movs	r3, #1
}
 23f9374:	4620      	mov	r0, r4
    state_ = NEXT;
 23f9376:	7123      	strb	r3, [r4, #4]
}
 23f9378:	b002      	add	sp, #8
 23f937a:	bd10      	pop	{r4, pc}

023f937c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23f937c:	4b01      	ldr	r3, [pc, #4]	; (23f9384 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23f937e:	4a02      	ldr	r2, [pc, #8]	; (23f9388 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23f9380:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23f9382:	4770      	bx	lr
 23f9384:	1007af10 	.word	0x1007af10
 23f9388:	023ffabc 	.word	0x023ffabc

023f938c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23f938c:	2300      	movs	r3, #0
 23f938e:	6840      	ldr	r0, [r0, #4]
 23f9390:	461a      	mov	r2, r3
 23f9392:	f7fe be0f 	b.w	23f7fb4 <network_connect>

023f9396 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23f9396:	2200      	movs	r2, #0
 23f9398:	2102      	movs	r1, #2
 23f939a:	6840      	ldr	r0, [r0, #4]
 23f939c:	f7fe be26 	b.w	23f7fec <network_disconnect>

023f93a0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23f93a0:	2200      	movs	r2, #0
 23f93a2:	6840      	ldr	r0, [r0, #4]
 23f93a4:	4611      	mov	r1, r2
 23f93a6:	f7fe be13 	b.w	23f7fd0 <network_connecting>

023f93aa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23f93aa:	2200      	movs	r2, #0
 23f93ac:	6840      	ldr	r0, [r0, #4]
 23f93ae:	4611      	mov	r1, r2
 23f93b0:	f7fe be2a 	b.w	23f8008 <network_ready>

023f93b4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23f93b4:	2300      	movs	r3, #0
 23f93b6:	6840      	ldr	r0, [r0, #4]
 23f93b8:	461a      	mov	r2, r3
 23f93ba:	4619      	mov	r1, r3
 23f93bc:	f7fe be32 	b.w	23f8024 <network_on>

023f93c0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23f93c0:	2300      	movs	r3, #0
 23f93c2:	6840      	ldr	r0, [r0, #4]
 23f93c4:	461a      	mov	r2, r3
 23f93c6:	4619      	mov	r1, r3
 23f93c8:	f7fe be3a 	b.w	23f8040 <network_off>

023f93cc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23f93cc:	2100      	movs	r1, #0
 23f93ce:	6840      	ldr	r0, [r0, #4]
 23f93d0:	f7fe be7c 	b.w	23f80cc <network_is_on>

023f93d4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23f93d4:	2100      	movs	r1, #0
 23f93d6:	6840      	ldr	r0, [r0, #4]
 23f93d8:	f7fe be86 	b.w	23f80e8 <network_is_off>

023f93dc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23f93dc:	2200      	movs	r2, #0
 23f93de:	6840      	ldr	r0, [r0, #4]
 23f93e0:	f081 0101 	eor.w	r1, r1, #1
 23f93e4:	f7fe be3a 	b.w	23f805c <network_listen>

023f93e8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23f93e8:	2200      	movs	r2, #0
 23f93ea:	6840      	ldr	r0, [r0, #4]
 23f93ec:	f7fe be52 	b.w	23f8094 <network_set_listen_timeout>

023f93f0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23f93f0:	2200      	movs	r2, #0
 23f93f2:	6840      	ldr	r0, [r0, #4]
 23f93f4:	4611      	mov	r1, r2
 23f93f6:	f7fe be5b 	b.w	23f80b0 <network_get_listen_timeout>

023f93fa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23f93fa:	2200      	movs	r2, #0
 23f93fc:	6840      	ldr	r0, [r0, #4]
 23f93fe:	4611      	mov	r1, r2
 23f9400:	f7fe be3a 	b.w	23f8078 <network_listening>

023f9404 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
 23f9404:	2100      	movs	r1, #0
 23f9406:	6840      	ldr	r0, [r0, #4]
 23f9408:	f7fe be8a 	b.w	23f8120 <network_is_preferred>

023f940c <_ZN5spark12NetworkClass7resolveEPKcb>:
}

IPAddress NetworkClass::resolve(const char* name, bool flushCache) {
 23f940c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23f9410:	2600      	movs	r6, #0
IPAddress NetworkClass::resolve(const char* name, bool flushCache) {
 23f9412:	4698      	mov	r8, r3
 23f9414:	b099      	sub	sp, #100	; 0x64
 23f9416:	460d      	mov	r5, r1
 23f9418:	4614      	mov	r4, r2
 23f941a:	4607      	mov	r7, r0
    IPAddress addr;
 23f941c:	f7ff fe00 	bl	23f9020 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
 23f9420:	221c      	movs	r2, #28
 23f9422:	4631      	mov	r1, r6
 23f9424:	a811      	add	r0, sp, #68	; 0x44
    struct addrinfo *ai = nullptr;
 23f9426:	9603      	str	r6, [sp, #12]
    struct addrinfo hints = {};
 23f9428:	f003 fcf1 	bl	23fce0e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
    if (flushCache) {
 23f942c:	f1b8 0f00 	cmp.w	r8, #0
 23f9430:	d12c      	bne.n	23f948c <_ZN5spark12NetworkClass7resolveEPKcb+0x80>
    hints.ai_flags = AI_ADDRCONFIG;
 23f9432:	2340      	movs	r3, #64	; 0x40
        return iface_;
 23f9434:	6868      	ldr	r0, [r5, #4]
        hints.ai_flags |= AI_FLUSHCACHE;
 23f9436:	9310      	str	r3, [sp, #64]	; 0x40
    }
    hints.ai_family = AF_UNSPEC;
    if_t iface = nullptr;
 23f9438:	9604      	str	r6, [sp, #16]
    if ((network_interface_t)*this != NETWORK_INTERFACE_ALL) {
 23f943a:	b118      	cbz	r0, 23f9444 <_ZN5spark12NetworkClass7resolveEPKcb+0x38>
        if_get_by_index((network_interface_t)*this, &iface);
 23f943c:	a904      	add	r1, sp, #16
 23f943e:	b2c0      	uxtb	r0, r0
 23f9440:	f7fe fa8c 	bl	23f795c <if_get_by_index>
    }
    const int r = netdb_getaddrinfo_ex(name, nullptr, &hints, &ai, iface);
 23f9444:	9b04      	ldr	r3, [sp, #16]
 23f9446:	4620      	mov	r0, r4
 23f9448:	9300      	str	r3, [sp, #0]
 23f944a:	2100      	movs	r1, #0
 23f944c:	ab03      	add	r3, sp, #12
 23f944e:	aa10      	add	r2, sp, #64	; 0x40
 23f9450:	f7fe faae 	bl	23f79b0 <netdb_getaddrinfo_ex>
    if (!r) {
 23f9454:	4604      	mov	r4, r0
 23f9456:	2800      	cmp	r0, #0
 23f9458:	d14d      	bne.n	23f94f6 <_ZN5spark12NetworkClass7resolveEPKcb+0xea>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23f945a:	4602      	mov	r2, r0
 23f945c:	2101      	movs	r1, #1
 23f945e:	6868      	ldr	r0, [r5, #4]
 23f9460:	f7fe fdd2 	bl	23f8008 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f9464:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23f9466:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f9468:	4622      	mov	r2, r4
 23f946a:	6868      	ldr	r0, [r5, #4]
 23f946c:	f7fe fdcc 	bl	23f8008 <network_ready>
        bool ok = false;
 23f9470:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f9472:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23f9474:	9e03      	ldr	r6, [sp, #12]
 23f9476:	2e00      	cmp	r6, #0
 23f9478:	d03d      	beq.n	23f94f6 <_ZN5spark12NetworkClass7resolveEPKcb+0xea>
 23f947a:	2900      	cmp	r1, #0
 23f947c:	d13b      	bne.n	23f94f6 <_ZN5spark12NetworkClass7resolveEPKcb+0xea>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23f947e:	6873      	ldr	r3, [r6, #4]
 23f9480:	2b02      	cmp	r3, #2
 23f9482:	d005      	beq.n	23f9490 <_ZN5spark12NetworkClass7resolveEPKcb+0x84>
 23f9484:	2b0a      	cmp	r3, #10
 23f9486:	d013      	beq.n	23f94b0 <_ZN5spark12NetworkClass7resolveEPKcb+0xa4>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23f9488:	69f6      	ldr	r6, [r6, #28]
 23f948a:	e7f4      	b.n	23f9476 <_ZN5spark12NetworkClass7resolveEPKcb+0x6a>
        hints.ai_flags |= AI_FLUSHCACHE;
 23f948c:	4b1d      	ldr	r3, [pc, #116]	; (23f9504 <_ZN5spark12NetworkClass7resolveEPKcb+0xf8>)
 23f948e:	e7d1      	b.n	23f9434 <_ZN5spark12NetworkClass7resolveEPKcb+0x28>
                case AF_INET: {
                    if (!ipv4) {
 23f9490:	f1b8 0f00 	cmp.w	r8, #0
 23f9494:	d0f8      	beq.n	23f9488 <_ZN5spark12NetworkClass7resolveEPKcb+0x7c>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23f9496:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23f9498:	a80a      	add	r0, sp, #40	; 0x28
 23f949a:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23f949c:	1d3c      	adds	r4, r7, #4
 23f949e:	ad0b      	add	r5, sp, #44	; 0x2c
        return *this = IPAddress(address);
 23f94a0:	f7ff fdec 	bl	23f907c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23f94a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f94a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f94a8:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23f94aa:	4641      	mov	r1, r8
 23f94ac:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23f94ae:	e7eb      	b.n	23f9488 <_ZN5spark12NetworkClass7resolveEPKcb+0x7c>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23f94b0:	f1b9 0f00 	cmp.w	r9, #0
 23f94b4:	d0e8      	beq.n	23f9488 <_ZN5spark12NetworkClass7resolveEPKcb+0x7c>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23f94b6:	2210      	movs	r2, #16
 23f94b8:	a805      	add	r0, sp, #20
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23f94ba:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23f94bc:	f003 fca7 	bl	23fce0e <memset>
                    a.v = 6;
 23f94c0:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23f94c2:	ad05      	add	r5, sp, #20
                    a.v = 6;
 23f94c4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23f94c8:	f104 0308 	add.w	r3, r4, #8
 23f94cc:	3418      	adds	r4, #24
 23f94ce:	462a      	mov	r2, r5
 23f94d0:	6818      	ldr	r0, [r3, #0]
 23f94d2:	6859      	ldr	r1, [r3, #4]
 23f94d4:	3308      	adds	r3, #8
 23f94d6:	c203      	stmia	r2!, {r0, r1}
 23f94d8:	42a3      	cmp	r3, r4
 23f94da:	4615      	mov	r5, r2
 23f94dc:	d1f7      	bne.n	23f94ce <_ZN5spark12NetworkClass7resolveEPKcb+0xc2>
                    addr = IPAddress(a);
 23f94de:	a905      	add	r1, sp, #20
 23f94e0:	a80a      	add	r0, sp, #40	; 0x28
class IPAddress : public Printable {
 23f94e2:	1d3c      	adds	r4, r7, #4
 23f94e4:	ad0b      	add	r5, sp, #44	; 0x2c
 23f94e6:	f7ff fda9 	bl	23f903c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23f94ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f94ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f94ee:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23f94f0:	4649      	mov	r1, r9
 23f94f2:	7023      	strb	r3, [r4, #0]
                    break;
 23f94f4:	e7c8      	b.n	23f9488 <_ZN5spark12NetworkClass7resolveEPKcb+0x7c>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23f94f6:	9803      	ldr	r0, [sp, #12]
 23f94f8:	f7fe fa4c 	bl	23f7994 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23f94fc:	4638      	mov	r0, r7
 23f94fe:	b019      	add	sp, #100	; 0x64
 23f9500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23f9504:	40000040 	.word	0x40000040

023f9508 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
 23f9508:	3803      	subs	r0, #3
 23f950a:	2803      	cmp	r0, #3
 23f950c:	bf9a      	itte	ls
 23f950e:	4b02      	ldrls	r3, [pc, #8]	; (23f9518 <_ZN5spark12NetworkClass4fromEm+0x10>)
 23f9510:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
 23f9514:	4801      	ldrhi	r0, [pc, #4]	; (23f951c <_ZN5spark12NetworkClass4fromEm+0x14>)
}
 23f9516:	4770      	bx	lr
 23f9518:	023ffac0 	.word	0x023ffac0
 23f951c:	1007af14 	.word	0x1007af14

023f9520 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
 23f9520:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
 23f9522:	2200      	movs	r2, #0
 23f9524:	6840      	ldr	r0, [r0, #4]
 23f9526:	f7fe fded 	bl	23f8104 <network_prefer>
}
 23f952a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
 23f952e:	f7ff bfeb 	b.w	23f9508 <_ZN5spark12NetworkClass4fromEm>
	...

023f9534 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
            : iface_(iface) {
 23f9534:	4b02      	ldr	r3, [pc, #8]	; (23f9540 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23f9536:	4a03      	ldr	r2, [pc, #12]	; (23f9544 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23f9538:	601a      	str	r2, [r3, #0]
 23f953a:	2200      	movs	r2, #0
 23f953c:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23f953e:	4770      	bx	lr
 23f9540:	1007af14 	.word	0x1007af14
 23f9544:	023ffad8 	.word	0x023ffad8

023f9548 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    config.quantity(sizeof(buf));
    pmicWireInstance()->transaction(config);
#endif // (HAL_PLATFORM_I2C_NUM != 1)
}

bool PMIC::lock() {
 23f9548:	b508      	push	{r3, lr}
            return &Wire;
 23f954a:	f000 fec5 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
    return pmicWireInstance()->lock();
}
 23f954e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
 23f9552:	f7ff bcbf 	b.w	23f8ed4 <_ZN7TwoWire4lockEv>

023f9556 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
 23f9556:	b510      	push	{r4, lr}
 23f9558:	4604      	mov	r4, r0
    lock_(_lock)
 23f955a:	7001      	strb	r1, [r0, #0]
    if (lock_) {
 23f955c:	b109      	cbz	r1, 23f9562 <_ZN4PMICC1Eb+0xc>
        lock();
 23f955e:	f7ff fff3 	bl	23f9548 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
 23f9562:	4620      	mov	r0, r4
 23f9564:	bd10      	pop	{r4, pc}

023f9566 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
 23f9566:	b508      	push	{r3, lr}
            return &Wire;
 23f9568:	f000 feb6 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
    return pmicWireInstance()->unlock();
}
 23f956c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
 23f9570:	f7ff bcb9 	b.w	23f8ee6 <_ZN7TwoWire6unlockEv>

023f9574 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23f9574:	b510      	push	{r4, lr}
 23f9576:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 23f9578:	6800      	ldr	r0, [r0, #0]
 23f957a:	f7ff fff4 	bl	23f9566 <_ZN4PMIC6unlockEv>
 23f957e:	4620      	mov	r0, r4
 23f9580:	bd10      	pop	{r4, pc}

023f9582 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
 23f9582:	b510      	push	{r4, lr}
 23f9584:	b08e      	sub	sp, #56	; 0x38
 23f9586:	f88d 1007 	strb.w	r1, [sp, #7]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f958a:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
 23f958c:	f7ff ffdc 	bl	23f9548 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    buffer_ = buf;
 23f9590:	f10d 0307 	add.w	r3, sp, #7
 23f9594:	9308      	str	r3, [sp, #32]
    size_ = size;
 23f9596:	2301      	movs	r3, #1
    byte DATA = 0;
 23f9598:	2400      	movs	r4, #0
        buffer_(nullptr) {
 23f959a:	216b      	movs	r1, #107	; 0x6b
    timeout_ = ms;
 23f959c:	220a      	movs	r2, #10
    size_ = size;
 23f959e:	9305      	str	r3, [sp, #20]
        buffer_(nullptr) {
 23f95a0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    size_ = size;
 23f95a4:	930a      	str	r3, [sp, #40]	; 0x28
    buffer_ = buf;
 23f95a6:	f10d 030b 	add.w	r3, sp, #11
 23f95aa:	930d      	str	r3, [sp, #52]	; 0x34
 23f95ac:	f88d 400b 	strb.w	r4, [sp, #11]
        buffer_(nullptr) {
 23f95b0:	f88d 1010 	strb.w	r1, [sp, #16]
    timeout_ = ms;
 23f95b4:	9207      	str	r2, [sp, #28]
    stop_ = stop;
 23f95b6:	f88d 4018 	strb.w	r4, [sp, #24]
        buffer_(nullptr) {
 23f95ba:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
    timeout_ = ms;
 23f95be:	920c      	str	r2, [sp, #48]	; 0x30
            return &Wire;
 23f95c0:	f000 fe8a 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
    auto r = pmicWireInstance()->transaction(config, rxConfig);
 23f95c4:	aa09      	add	r2, sp, #36	; 0x24
 23f95c6:	a904      	add	r1, sp, #16
 23f95c8:	f7ff fc96 	bl	23f8ef8 <_ZN7TwoWire11transactionERK16WireTransmissionS2_>
    if (r != 1) {
 23f95cc:	2801      	cmp	r0, #1
        DATA = 0;
 23f95ce:	bf18      	it	ne
 23f95d0:	f88d 400b 	strbne.w	r4, [sp, #11]
    return DATA;
 23f95d4:	f89d 400b 	ldrb.w	r4, [sp, #11]
    std::lock_guard<PMIC> l(*this);
 23f95d8:	a803      	add	r0, sp, #12
 23f95da:	f7ff ffcb 	bl	23f9574 <_ZNSt10lock_guardI4PMICED1Ev>
}
 23f95de:	4620      	mov	r0, r4
 23f95e0:	b00e      	add	sp, #56	; 0x38
 23f95e2:	bd10      	pop	{r4, pc}

023f95e4 <_ZN4PMIC8getFaultEv>:
    DATA = readRegister(FAULT_REGISTER);
 23f95e4:	2109      	movs	r1, #9
 23f95e6:	f7ff bfcc 	b.w	23f9582 <_ZN4PMIC12readRegisterEh>
	...

023f95ec <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
 23f95ec:	b530      	push	{r4, r5, lr}
 23f95ee:	b089      	sub	sp, #36	; 0x24
 23f95f0:	460d      	mov	r5, r1
 23f95f2:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f95f4:	9002      	str	r0, [sp, #8]
      { _M_device.lock(); }
 23f95f6:	f7ff ffa7 	bl	23f9548 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        buffer_(nullptr) {
 23f95fa:	236b      	movs	r3, #107	; 0x6b
 23f95fc:	f88d 300c 	strb.w	r3, [sp, #12]
 23f9600:	2301      	movs	r3, #1
 23f9602:	f88d 3014 	strb.w	r3, [sp, #20]
    timeout_ = ms;
 23f9606:	230a      	movs	r3, #10
 23f9608:	9306      	str	r3, [sp, #24]
    buffer_ = buf;
 23f960a:	ab01      	add	r3, sp, #4
 23f960c:	9307      	str	r3, [sp, #28]
    size_ = size;
 23f960e:	2302      	movs	r3, #2
    uint8_t buf[2] = {address, DATA};
 23f9610:	f88d 5004 	strb.w	r5, [sp, #4]
 23f9614:	9304      	str	r3, [sp, #16]
 23f9616:	f88d 4005 	strb.w	r4, [sp, #5]
            return &Wire;
 23f961a:	f000 fe5d 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
    pmicWireInstance()->transaction(config);
 23f961e:	4a04      	ldr	r2, [pc, #16]	; (23f9630 <_ZN4PMIC13writeRegisterEhh+0x44>)
 23f9620:	a903      	add	r1, sp, #12
 23f9622:	f7ff fc69 	bl	23f8ef8 <_ZN7TwoWire11transactionERK16WireTransmissionS2_>
    std::lock_guard<PMIC> l(*this);
 23f9626:	a802      	add	r0, sp, #8
 23f9628:	f7ff ffa4 	bl	23f9574 <_ZNSt10lock_guardI4PMICED1Ev>
}
 23f962c:	b009      	add	sp, #36	; 0x24
 23f962e:	bd30      	pop	{r4, r5, pc}
 23f9630:	1007aefc 	.word	0x1007aefc

023f9634 <_ZN4PMIC12enableBATFETEv>:
bool PMIC::enableBATFET(void) {
 23f9634:	b513      	push	{r0, r1, r4, lr}
 23f9636:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f9638:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 23f963a:	f7ff ff85 	bl	23f9548 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(MISC_CONTROL_REGISTER);
 23f963e:	2107      	movs	r1, #7
 23f9640:	4620      	mov	r0, r4
 23f9642:	f7ff ff9e 	bl	23f9582 <_ZN4PMIC12readRegisterEh>
    writeRegister(MISC_CONTROL_REGISTER, (DATA & 0b11011111));
 23f9646:	2107      	movs	r1, #7
 23f9648:	f000 02df 	and.w	r2, r0, #223	; 0xdf
 23f964c:	4620      	mov	r0, r4
 23f964e:	f7ff ffcd 	bl	23f95ec <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 23f9652:	a801      	add	r0, sp, #4
 23f9654:	f7ff ff8e 	bl	23f9574 <_ZNSt10lock_guardI4PMICED1Ev>
}
 23f9658:	2001      	movs	r0, #1
 23f965a:	b002      	add	sp, #8
 23f965c:	bd10      	pop	{r4, pc}

023f965e <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23f965e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f9660:	4606      	mov	r6, r0
 23f9662:	460d      	mov	r5, r1
  size_t n = 0;
 23f9664:	2400      	movs	r4, #0
 23f9666:	188f      	adds	r7, r1, r2
  while (size--) {
 23f9668:	42bd      	cmp	r5, r7
 23f966a:	d00c      	beq.n	23f9686 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23f966c:	6833      	ldr	r3, [r6, #0]
 23f966e:	4630      	mov	r0, r6
 23f9670:	689b      	ldr	r3, [r3, #8]
 23f9672:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f9676:	4798      	blx	r3
     if (chunk>=0)
 23f9678:	1e03      	subs	r3, r0, #0
 23f967a:	db01      	blt.n	23f9680 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23f967c:	441c      	add	r4, r3
  while (size--) {
 23f967e:	e7f3      	b.n	23f9668 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23f9680:	2c00      	cmp	r4, #0
 23f9682:	bf08      	it	eq
 23f9684:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23f9686:	4620      	mov	r0, r4
 23f9688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f968a <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23f968a:	b513      	push	{r0, r1, r4, lr}
 23f968c:	4604      	mov	r4, r0
    }
 23f968e:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23f9690:	b159      	cbz	r1, 23f96aa <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23f9692:	9101      	str	r1, [sp, #4]
 23f9694:	f7ec fcb0 	bl	23e5ff8 <strlen>
 23f9698:	4602      	mov	r2, r0
 23f969a:	4620      	mov	r0, r4
 23f969c:	6823      	ldr	r3, [r4, #0]
 23f969e:	9901      	ldr	r1, [sp, #4]
 23f96a0:	68db      	ldr	r3, [r3, #12]
    }
 23f96a2:	b002      	add	sp, #8
 23f96a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23f96a8:	4718      	bx	r3
    }
 23f96aa:	b002      	add	sp, #8
 23f96ac:	bd10      	pop	{r4, pc}

023f96ae <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 23f96ae:	b508      	push	{r3, lr}
  return write(str);
 23f96b0:	f7ff ffeb 	bl	23f968a <_ZN5Print5writeEPKc>
}
 23f96b4:	bd08      	pop	{r3, pc}

023f96b6 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 23f96b6:	6803      	ldr	r3, [r0, #0]
 23f96b8:	689b      	ldr	r3, [r3, #8]
 23f96ba:	4718      	bx	r3

023f96bc <_ZN5Print5printEPK19__FlashStringHelper>:
 23f96bc:	b508      	push	{r3, lr}
 23f96be:	f7ff ffe4 	bl	23f968a <_ZN5Print5writeEPKc>
 23f96c2:	bd08      	pop	{r3, pc}

023f96c4 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23f96c4:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23f96c6:	210d      	movs	r1, #13
{
 23f96c8:	4605      	mov	r5, r0
  size_t n = print('\r');
 23f96ca:	f7ff fff4 	bl	23f96b6 <_ZN5Print5printEc>
  n += print('\n');
 23f96ce:	210a      	movs	r1, #10
  size_t n = print('\r');
 23f96d0:	4604      	mov	r4, r0
  n += print('\n');
 23f96d2:	4628      	mov	r0, r5
 23f96d4:	f7ff ffef 	bl	23f96b6 <_ZN5Print5printEc>
  return n;
}
 23f96d8:	4420      	add	r0, r4
 23f96da:	bd38      	pop	{r3, r4, r5, pc}

023f96dc <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 23f96dc:	b538      	push	{r3, r4, r5, lr}
 23f96de:	4605      	mov	r5, r0
  return write(str);
 23f96e0:	f7ff ffd3 	bl	23f968a <_ZN5Print5writeEPKc>
 23f96e4:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 23f96e6:	4628      	mov	r0, r5
 23f96e8:	f7ff ffec 	bl	23f96c4 <_ZN5Print7printlnEv>
  return n;
}
 23f96ec:	4420      	add	r0, r4
 23f96ee:	bd38      	pop	{r3, r4, r5, pc}

023f96f0 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23f96f0:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23f96f2:	2a01      	cmp	r2, #1
 23f96f4:	bf98      	it	ls
 23f96f6:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23f96f8:	b530      	push	{r4, r5, lr}
 23f96fa:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23f96fc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23f9700:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23f9702:	460d      	mov	r5, r1
 23f9704:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23f9708:	fb01 5312 	mls	r3, r1, r2, r5
 23f970c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23f9710:	2b09      	cmp	r3, #9
 23f9712:	bf94      	ite	ls
 23f9714:	3330      	addls	r3, #48	; 0x30
 23f9716:	3337      	addhi	r3, #55	; 0x37
 23f9718:	b2db      	uxtb	r3, r3
  } while(n);
 23f971a:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23f971c:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23f9720:	d9ef      	bls.n	23f9702 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23f9722:	4621      	mov	r1, r4
 23f9724:	f7ff ffb1 	bl	23f968a <_ZN5Print5writeEPKc>
}
 23f9728:	b00b      	add	sp, #44	; 0x2c
 23f972a:	bd30      	pop	{r4, r5, pc}

023f972c <_ZN5Print7vprintfEbPKcSt9__va_list>:
    writeVariant(var, writer);
    return writer.bytesWritten();
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 23f972c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f9730:	b086      	sub	sp, #24
 23f9732:	af00      	add	r7, sp, #0
 23f9734:	4605      	mov	r5, r0
 23f9736:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 23f9738:	1d38      	adds	r0, r7, #4
 23f973a:	2114      	movs	r1, #20
{
 23f973c:	4614      	mov	r4, r2
    va_copy(args2, args);
 23f973e:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 23f9740:	f7fe fd42 	bl	23f81c8 <vsnprintf>

    if (n<bufsize)
 23f9744:	2813      	cmp	r0, #19
 23f9746:	d80e      	bhi.n	23f9766 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 23f9748:	4628      	mov	r0, r5
 23f974a:	1d39      	adds	r1, r7, #4
 23f974c:	f7ff ff9d 	bl	23f968a <_ZN5Print5writeEPKc>
 23f9750:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 23f9752:	b11e      	cbz	r6, 23f975c <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 23f9754:	4628      	mov	r0, r5
 23f9756:	f7ff ffb5 	bl	23f96c4 <_ZN5Print7printlnEv>
 23f975a:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 23f975c:	4620      	mov	r0, r4
 23f975e:	3718      	adds	r7, #24
 23f9760:	46bd      	mov	sp, r7
 23f9762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 23f9766:	f100 0308 	add.w	r3, r0, #8
 23f976a:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 23f976e:	46e8      	mov	r8, sp
        char bigger[n+1];
 23f9770:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 23f9774:	4622      	mov	r2, r4
 23f9776:	1c41      	adds	r1, r0, #1
 23f9778:	683b      	ldr	r3, [r7, #0]
 23f977a:	4668      	mov	r0, sp
 23f977c:	f7fe fd24 	bl	23f81c8 <vsnprintf>
  return write(str);
 23f9780:	4669      	mov	r1, sp
 23f9782:	4628      	mov	r0, r5
 23f9784:	f7ff ff81 	bl	23f968a <_ZN5Print5writeEPKc>
 23f9788:	4604      	mov	r4, r0
 23f978a:	46c5      	mov	sp, r8
 23f978c:	e7e1      	b.n	23f9752 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

023f978e <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
 23f978e:	b510      	push	{r4, lr}
  if (0 == max) {
 23f9790:	4604      	mov	r4, r0
 23f9792:	b128      	cbz	r0, 23f97a0 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
 23f9794:	f003 fb72 	bl	23fce7c <rand>
 23f9798:	fb90 f3f4 	sdiv	r3, r0, r4
 23f979c:	fb03 0414 	mls	r4, r3, r4, r0
}
 23f97a0:	4620      	mov	r0, r4
 23f97a2:	bd10      	pop	{r4, pc}

023f97a4 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
 23f97a4:	4288      	cmp	r0, r1
{
 23f97a6:	b510      	push	{r4, lr}
 23f97a8:	4604      	mov	r4, r0
  if (min >= max) {
 23f97aa:	da03      	bge.n	23f97b4 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
 23f97ac:	1a08      	subs	r0, r1, r0
 23f97ae:	f7ff ffee 	bl	23f978e <_Z6randomi>
 23f97b2:	4404      	add	r4, r0
}
 23f97b4:	4620      	mov	r0, r4
 23f97b6:	bd10      	pop	{r4, pc}

023f97b8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23f97b8:	2200      	movs	r2, #0
 23f97ba:	4b01      	ldr	r3, [pc, #4]	; (23f97c0 <_GLOBAL__sub_I_RGB+0x8>)
 23f97bc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23f97be:	4770      	bx	lr
 23f97c0:	1007af1c 	.word	0x1007af1c

023f97c4 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23f97c4:	2100      	movs	r1, #0
 23f97c6:	f7fe b98d 	b.w	23f7ae4 <hal_spi_release>

023f97ca <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23f97ca:	2100      	movs	r1, #0
 23f97cc:	f7fe b97c 	b.w	23f7ac8 <hal_spi_acquire>

023f97d0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23f97d0:	b510      	push	{r4, lr}
 23f97d2:	4604      	mov	r4, r0
 23f97d4:	4608      	mov	r0, r1
{
    _spi = spi;
 23f97d6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23f97d8:	f7fe f922 	bl	23f7a20 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23f97dc:	2300      	movs	r3, #0
}
 23f97de:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23f97e0:	6063      	str	r3, [r4, #4]
}
 23f97e2:	bd10      	pop	{r4, pc}

023f97e4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 23f97e4:	b513      	push	{r0, r1, r4, lr}
 23f97e6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
 23f97e8:	7800      	ldrb	r0, [r0, #0]
 23f97ea:	f7ff ffee 	bl	23f97ca <_ZN8SPIClass4lockEv.isra.0>
 23f97ee:	b958      	cbnz	r0, 23f9808 <_ZN8SPIClass5beginEv+0x24>
 23f97f0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 23f97f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23f97f6:	9001      	str	r0, [sp, #4]
 23f97f8:	f7fe f8e8 	bl	23f79cc <hal_spi_begin>
        unlock();
 23f97fc:	9801      	ldr	r0, [sp, #4]
    }
}
 23f97fe:	b002      	add	sp, #8
 23f9800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f9804:	f7ff bfde 	b.w	23f97c4 <_ZN8SPIClass6unlockEv.isra.0>
 23f9808:	b002      	add	sp, #8
 23f980a:	bd10      	pop	{r4, pc}

023f980c <_ZN8SPIClass5beginEt>:

void SPIClass::begin(uint16_t ss_pin)
{
 23f980c:	b513      	push	{r0, r1, r4, lr}
 23f980e:	4604      	mov	r4, r0
    if (!lock())
 23f9810:	7800      	ldrb	r0, [r0, #0]
{
 23f9812:	9101      	str	r1, [sp, #4]
    if (!lock())
 23f9814:	f7ff ffd9 	bl	23f97ca <_ZN8SPIClass4lockEv.isra.0>
 23f9818:	9901      	ldr	r1, [sp, #4]
 23f981a:	b948      	cbnz	r0, 23f9830 <_ZN8SPIClass5beginEt+0x24>
 23f981c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, ss_pin);
 23f981e:	9001      	str	r0, [sp, #4]
 23f9820:	f7fe f8d4 	bl	23f79cc <hal_spi_begin>
        unlock();
 23f9824:	9801      	ldr	r0, [sp, #4]
    }
}
 23f9826:	b002      	add	sp, #8
 23f9828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f982c:	f7ff bfca 	b.w	23f97c4 <_ZN8SPIClass6unlockEv.isra.0>
 23f9830:	b002      	add	sp, #8
 23f9832:	bd10      	pop	{r4, pc}

023f9834 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
 23f9834:	b513      	push	{r0, r1, r4, lr}
 23f9836:	4604      	mov	r4, r0
    if (!lock())
 23f9838:	7800      	ldrb	r0, [r0, #0]
 23f983a:	f7ff ffc6 	bl	23f97ca <_ZN8SPIClass4lockEv.isra.0>
 23f983e:	b948      	cbnz	r0, 23f9854 <_ZN8SPIClass3endEv+0x20>
 23f9840:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
 23f9842:	9001      	str	r0, [sp, #4]
 23f9844:	f7fe f8d0 	bl	23f79e8 <hal_spi_end>
        unlock();
 23f9848:	9801      	ldr	r0, [sp, #4]
    }
}
 23f984a:	b002      	add	sp, #8
 23f984c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f9850:	f7ff bfb8 	b.w	23f97c4 <_ZN8SPIClass6unlockEv.isra.0>
 23f9854:	b002      	add	sp, #8
 23f9856:	bd10      	pop	{r4, pc}

023f9858 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
 23f9858:	7800      	ldrb	r0, [r0, #0]
 23f985a:	f7ff bfb3 	b.w	23f97c4 <_ZN8SPIClass6unlockEv.isra.0>
	...

023f9860 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 23f9860:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 23f9862:	2400      	movs	r4, #0
 23f9864:	0840      	lsrs	r0, r0, #1
 23f9866:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23f9868:	6818      	ldr	r0, [r3, #0]
 23f986a:	b2e5      	uxtb	r5, r4
 23f986c:	4288      	cmp	r0, r1
 23f986e:	d906      	bls.n	23f987e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 23f9870:	3401      	adds	r4, #1
 23f9872:	2c08      	cmp	r4, #8
 23f9874:	d002      	beq.n	23f987c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 23f9876:	0840      	lsrs	r0, r0, #1
 23f9878:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23f987a:	e7f5      	b.n	23f9868 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 23f987c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 23f987e:	4b02      	ldr	r3, [pc, #8]	; (23f9888 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 23f9880:	5d5b      	ldrb	r3, [r3, r5]
 23f9882:	7013      	strb	r3, [r2, #0]
}
 23f9884:	bd30      	pop	{r4, r5, pc}
 23f9886:	bf00      	nop
 23f9888:	023ffb14 	.word	0x023ffb14

023f988c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 23f988c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f9890:	4606      	mov	r6, r0
 23f9892:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
 23f9894:	7800      	ldrb	r0, [r0, #0]
{
 23f9896:	460c      	mov	r4, r1
    CHECK(lock());
 23f9898:	f7ff ff97 	bl	23f97ca <_ZN8SPIClass4lockEv.isra.0>
 23f989c:	2800      	cmp	r0, #0
 23f989e:	db1b      	blt.n	23f98d8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23f98a0:	2214      	movs	r2, #20
 23f98a2:	2100      	movs	r1, #0
 23f98a4:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 23f98a6:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 23f98a8:	f003 fab1 	bl	23fce0e <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23f98ac:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23f98ae:	2200      	movs	r2, #0
 23f98b0:	4628      	mov	r0, r5
 23f98b2:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 23f98b4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 23f98b8:	f7fe f8ce 	bl	23f7a58 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 23f98bc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 23f98c0:	b113      	cbz	r3, 23f98c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
 23f98c2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 23f98c6:	b155      	cbz	r5, 23f98de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
 23f98c8:	2700      	movs	r7, #0
 23f98ca:	2501      	movs	r5, #1
 23f98cc:	46b9      	mov	r9, r7
 23f98ce:	46b8      	mov	r8, r7
    if (default_ && other.default_)
 23f98d0:	7923      	ldrb	r3, [r4, #4]
 23f98d2:	b15d      	cbz	r5, 23f98ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
 23f98d4:	b1c3      	cbz	r3, 23f9908 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
 23f98d6:	2000      	movs	r0, #0
}
 23f98d8:	b00f      	add	sp, #60	; 0x3c
 23f98da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 23f98de:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 23f98e2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 23f98e6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 23f98ea:	e7f1      	b.n	23f98d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
 23f98ec:	2b00      	cmp	r3, #0
 23f98ee:	d135      	bne.n	23f995c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
 23f98f0:	68a3      	ldr	r3, [r4, #8]
 23f98f2:	4543      	cmp	r3, r8
 23f98f4:	d108      	bne.n	23f9908 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
 23f98f6:	f88d 9020 	strb.w	r9, [sp, #32]
 23f98fa:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23f98fe:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23f9902:	89a3      	ldrh	r3, [r4, #12]
 23f9904:	429a      	cmp	r2, r3
 23f9906:	d0e6      	beq.n	23f98d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
 23f9908:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23f990a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 23f990c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23f9910:	980a      	ldr	r0, [sp, #40]	; 0x28
 23f9912:	ab04      	add	r3, sp, #16
 23f9914:	f10d 020f 	add.w	r2, sp, #15
 23f9918:	f7ff ffa2 	bl	23f9860 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
 23f991c:	7921      	ldrb	r1, [r4, #4]
 23f991e:	b985      	cbnz	r5, 23f9942 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
 23f9920:	b989      	cbnz	r1, 23f9946 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23f9922:	68a3      	ldr	r3, [r4, #8]
 23f9924:	4543      	cmp	r3, r8
 23f9926:	d30e      	bcc.n	23f9946 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
 23f9928:	f88d 9020 	strb.w	r9, [sp, #32]
 23f992c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23f9930:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23f9934:	89a3      	ldrh	r3, [r4, #12]
 23f9936:	429a      	cmp	r2, r3
 23f9938:	d105      	bne.n	23f9946 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 23f993a:	9b04      	ldr	r3, [sp, #16]
 23f993c:	4543      	cmp	r3, r8
 23f993e:	d102      	bne.n	23f9946 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23f9940:	e7c9      	b.n	23f98d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
 23f9942:	2900      	cmp	r1, #0
 23f9944:	d1f9      	bne.n	23f993a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 23f9946:	2300      	movs	r3, #0
 23f9948:	9301      	str	r3, [sp, #4]
 23f994a:	7b63      	ldrb	r3, [r4, #13]
 23f994c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 23f9950:	9300      	str	r3, [sp, #0]
 23f9952:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 23f9954:	7830      	ldrb	r0, [r6, #0]
 23f9956:	f7fe f8a9 	bl	23f7aac <hal_spi_set_settings>
 23f995a:	e7bc      	b.n	23f98d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
 23f995c:	462b      	mov	r3, r5
 23f995e:	462a      	mov	r2, r5
 23f9960:	2101      	movs	r1, #1
 23f9962:	e9cd 5500 	strd	r5, r5, [sp]
 23f9966:	e7f5      	b.n	23f9954 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

023f9968 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 23f9968:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 23f996a:	7800      	ldrb	r0, [r0, #0]
 23f996c:	f7fe f84a 	bl	23f7a04 <hal_spi_transfer>
}
 23f9970:	b2c0      	uxtb	r0, r0
 23f9972:	bd08      	pop	{r3, pc}

023f9974 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 23f9974:	b530      	push	{r4, r5, lr}
 23f9976:	b087      	sub	sp, #28
 23f9978:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 23f997a:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 23f997c:	9500      	str	r5, [sp, #0]
 23f997e:	7800      	ldrb	r0, [r0, #0]
 23f9980:	f7fe f878 	bl	23f7a74 <hal_spi_transfer_dma>
    if (user_callback == NULL)
 23f9984:	b93d      	cbnz	r5, 23f9996 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 23f9986:	7820      	ldrb	r0, [r4, #0]
 23f9988:	a902      	add	r1, sp, #8
 23f998a:	f7fe f881 	bl	23f7a90 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 23f998e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23f9992:	07db      	lsls	r3, r3, #31
 23f9994:	d4f7      	bmi.n	23f9986 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
 23f9996:	b007      	add	sp, #28
 23f9998:	bd30      	pop	{r4, r5, pc}

023f999a <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
 23f999a:	4770      	bx	lr

023f999c <_ZN8SPIClass15detachInterruptEv>:
 23f999c:	4770      	bx	lr

023f999e <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 23f999e:	b510      	push	{r4, lr}
 23f99a0:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23f99a2:	f7fd fe0d 	bl	23f75c0 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 23f99a6:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 23f99a8:	6823      	ldr	r3, [r4, #0]
 23f99aa:	4620      	mov	r0, r4
 23f99ac:	695b      	ldr	r3, [r3, #20]
 23f99ae:	4798      	blx	r3
    if (c >= 0) return c;
 23f99b0:	2800      	cmp	r0, #0
 23f99b2:	da08      	bge.n	23f99c6 <_ZN6Stream9timedReadEv+0x28>
 23f99b4:	f7fd fe04 	bl	23f75c0 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
 23f99b8:	68e3      	ldr	r3, [r4, #12]
 23f99ba:	1ac0      	subs	r0, r0, r3
 23f99bc:	68a3      	ldr	r3, [r4, #8]
 23f99be:	4298      	cmp	r0, r3
 23f99c0:	d3f2      	bcc.n	23f99a8 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 23f99c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23f99c6:	bd10      	pop	{r4, pc}

023f99c8 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 23f99c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f99cc:	4607      	mov	r7, r0
 23f99ce:	460c      	mov	r4, r1
 23f99d0:	460d      	mov	r5, r1
 23f99d2:	188e      	adds	r6, r1, r2
  size_t count = 0;
  while (count < length) {
 23f99d4:	42b5      	cmp	r5, r6
 23f99d6:	eba5 0804 	sub.w	r8, r5, r4
 23f99da:	d007      	beq.n	23f99ec <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 23f99dc:	4638      	mov	r0, r7
 23f99de:	f7ff ffde 	bl	23f999e <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 23f99e2:	1e03      	subs	r3, r0, #0
 23f99e4:	db02      	blt.n	23f99ec <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
 23f99e6:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
 23f99ea:	e7f3      	b.n	23f99d4 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
 23f99ec:	4640      	mov	r0, r8
 23f99ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f99f2 <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
 23f99f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f99f6:	4607      	mov	r7, r0
 23f99f8:	4688      	mov	r8, r1
 23f99fa:	4616      	mov	r6, r2
  if (length < 1) return 0;
 23f99fc:	461d      	mov	r5, r3
 23f99fe:	b173      	cbz	r3, 23f9a1e <_ZN6Stream14readBytesUntilEcPcj+0x2c>
  size_t index = 0;
 23f9a00:	2400      	movs	r4, #0
  while (index < length) {
    int c = timedRead();
 23f9a02:	4638      	mov	r0, r7
 23f9a04:	f7ff ffcb 	bl	23f999e <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
 23f9a08:	1e03      	subs	r3, r0, #0
 23f9a0a:	db05      	blt.n	23f9a18 <_ZN6Stream14readBytesUntilEcPcj+0x26>
 23f9a0c:	4543      	cmp	r3, r8
 23f9a0e:	d003      	beq.n	23f9a18 <_ZN6Stream14readBytesUntilEcPcj+0x26>
    *buffer++ = (char)c;
 23f9a10:	5533      	strb	r3, [r6, r4]
    index++;
 23f9a12:	3401      	adds	r4, #1
  while (index < length) {
 23f9a14:	42a5      	cmp	r5, r4
 23f9a16:	d1f4      	bne.n	23f9a02 <_ZN6Stream14readBytesUntilEcPcj+0x10>
  }
  return index; // return number of characters, not including null terminator
}
 23f9a18:	4620      	mov	r0, r4
 23f9a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (length < 1) return 0;
 23f9a1e:	461c      	mov	r4, r3
 23f9a20:	e7fa      	b.n	23f9a18 <_ZN6Stream14readBytesUntilEcPcj+0x26>

023f9a22 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
 23f9a22:	b510      	push	{r4, lr}
 23f9a24:	4604      	mov	r4, r0
{
    free(buffer);
 23f9a26:	6800      	ldr	r0, [r0, #0]
 23f9a28:	f7fe fb96 	bl	23f8158 <free>
}
 23f9a2c:	4620      	mov	r0, r4
 23f9a2e:	bd10      	pop	{r4, pc}

023f9a30 <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
 23f9a30:	b510      	push	{r4, lr}
 23f9a32:	4604      	mov	r4, r0
    if (buffer) {
 23f9a34:	6800      	ldr	r0, [r0, #0]
 23f9a36:	b108      	cbz	r0, 23f9a3c <_ZN6String10invalidateEv+0xc>
        free(buffer);
 23f9a38:	f7fe fb8e 	bl	23f8158 <free>
    }
    buffer = nullptr;
 23f9a3c:	2300      	movs	r3, #0
    capacity_ = len = 0;
 23f9a3e:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
 23f9a42:	6023      	str	r3, [r4, #0]
}
 23f9a44:	bd10      	pop	{r4, pc}

023f9a46 <_ZN6String12changeBufferEj>:
    len = size;
    return true;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23f9a46:	b538      	push	{r3, r4, r5, lr}
 23f9a48:	4604      	mov	r4, r0
 23f9a4a:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23f9a4c:	6800      	ldr	r0, [r0, #0]
 23f9a4e:	3101      	adds	r1, #1
 23f9a50:	f7fe fb90 	bl	23f8174 <realloc>
    if (newbuffer) {
 23f9a54:	b110      	cbz	r0, 23f9a5c <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
 23f9a56:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
 23f9a5a:	2001      	movs	r0, #1
    }
    return 0;
}
 23f9a5c:	bd38      	pop	{r3, r4, r5, pc}

023f9a5e <_ZN6String7reserveEj>:
{
 23f9a5e:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
 23f9a60:	6803      	ldr	r3, [r0, #0]
{
 23f9a62:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
 23f9a64:	b123      	cbz	r3, 23f9a70 <_ZN6String7reserveEj+0x12>
 23f9a66:	6843      	ldr	r3, [r0, #4]
 23f9a68:	428b      	cmp	r3, r1
 23f9a6a:	d301      	bcc.n	23f9a70 <_ZN6String7reserveEj+0x12>
 23f9a6c:	2001      	movs	r0, #1
}
 23f9a6e:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
 23f9a70:	4620      	mov	r0, r4
 23f9a72:	f7ff ffe8 	bl	23f9a46 <_ZN6String12changeBufferEj>
 23f9a76:	2800      	cmp	r0, #0
 23f9a78:	d0f9      	beq.n	23f9a6e <_ZN6String7reserveEj+0x10>
        if (len == 0) {
 23f9a7a:	68a3      	ldr	r3, [r4, #8]
 23f9a7c:	2b00      	cmp	r3, #0
 23f9a7e:	d1f5      	bne.n	23f9a6c <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
 23f9a80:	6822      	ldr	r2, [r4, #0]
 23f9a82:	7013      	strb	r3, [r2, #0]
 23f9a84:	e7f2      	b.n	23f9a6c <_ZN6String7reserveEj+0xe>

023f9a86 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23f9a86:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f9a88:	460d      	mov	r5, r1
    if (!reserve(length)) {
 23f9a8a:	4611      	mov	r1, r2
 23f9a8c:	9201      	str	r2, [sp, #4]
{
 23f9a8e:	4604      	mov	r4, r0
    if (!reserve(length)) {
 23f9a90:	f7ff ffe5 	bl	23f9a5e <_ZN6String7reserveEj>
 23f9a94:	9a01      	ldr	r2, [sp, #4]
 23f9a96:	b928      	cbnz	r0, 23f9aa4 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
 23f9a98:	4620      	mov	r0, r4
 23f9a9a:	f7ff ffc9 	bl	23f9a30 <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
 23f9a9e:	4620      	mov	r0, r4
 23f9aa0:	b003      	add	sp, #12
 23f9aa2:	bd30      	pop	{r4, r5, pc}
    memcpy(buffer, cstr, length);
 23f9aa4:	4629      	mov	r1, r5
    len = length;
 23f9aa6:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
 23f9aa8:	6820      	ldr	r0, [r4, #0]
 23f9aaa:	f003 f9a3 	bl	23fcdf4 <memcpy>
    buffer[len] = 0;
 23f9aae:	2100      	movs	r1, #0
 23f9ab0:	6822      	ldr	r2, [r4, #0]
 23f9ab2:	68a3      	ldr	r3, [r4, #8]
 23f9ab4:	54d1      	strb	r1, [r2, r3]
    return *this;
 23f9ab6:	e7f2      	b.n	23f9a9e <_ZN6String4copyEPKcj+0x18>

023f9ab8 <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
 23f9ab8:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23f9aba:	b513      	push	{r0, r1, r4, lr}
 23f9abc:	4604      	mov	r4, r0
    capacity_ = 0;
 23f9abe:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23f9ac2:	6083      	str	r3, [r0, #8]
    flags = 0;
 23f9ac4:	7303      	strb	r3, [r0, #12]
    if (cstr) {
 23f9ac6:	b141      	cbz	r1, 23f9ada <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
 23f9ac8:	4608      	mov	r0, r1
 23f9aca:	9101      	str	r1, [sp, #4]
 23f9acc:	f7ec fa94 	bl	23e5ff8 <strlen>
 23f9ad0:	9901      	ldr	r1, [sp, #4]
 23f9ad2:	4602      	mov	r2, r0
 23f9ad4:	4620      	mov	r0, r4
 23f9ad6:	f7ff ffd6 	bl	23f9a86 <_ZN6String4copyEPKcj>
}
 23f9ada:	4620      	mov	r0, r4
 23f9adc:	b002      	add	sp, #8
 23f9ade:	bd10      	pop	{r4, pc}

023f9ae0 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
 23f9ae0:	4288      	cmp	r0, r1
{
 23f9ae2:	b510      	push	{r4, lr}
 23f9ae4:	4604      	mov	r4, r0
    if (this == &rhs) {
 23f9ae6:	d005      	beq.n	23f9af4 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
 23f9ae8:	680b      	ldr	r3, [r1, #0]
 23f9aea:	b12b      	cbz	r3, 23f9af8 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
 23f9aec:	688a      	ldr	r2, [r1, #8]
 23f9aee:	4619      	mov	r1, r3
 23f9af0:	f7ff ffc9 	bl	23f9a86 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
 23f9af4:	4620      	mov	r0, r4
 23f9af6:	bd10      	pop	{r4, pc}
        invalidate();
 23f9af8:	f7ff ff9a 	bl	23f9a30 <_ZN6String10invalidateEv>
 23f9afc:	e7fa      	b.n	23f9af4 <_ZN6StringaSERKS_+0x14>

023f9afe <_ZN6StringC1ERKS_>:
    buffer = nullptr;
 23f9afe:	2300      	movs	r3, #0
String::String(const String &value)
 23f9b00:	b510      	push	{r4, lr}
 23f9b02:	4604      	mov	r4, r0
    capacity_ = 0;
 23f9b04:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23f9b08:	6083      	str	r3, [r0, #8]
    flags = 0;
 23f9b0a:	7303      	strb	r3, [r0, #12]
    *this = value;
 23f9b0c:	f7ff ffe8 	bl	23f9ae0 <_ZN6StringaSERKS_>
}
 23f9b10:	4620      	mov	r0, r4
 23f9b12:	bd10      	pop	{r4, pc}

023f9b14 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 23f9b14:	b507      	push	{r0, r1, r2, lr}
 23f9b16:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 23f9b18:	2100      	movs	r1, #0
{
 23f9b1a:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 23f9b1c:	9100      	str	r1, [sp, #0]
 23f9b1e:	2001      	movs	r0, #1
 23f9b20:	218c      	movs	r1, #140	; 0x8c
 23f9b22:	f7fe f991 	bl	23f7e48 <system_reset>
}
 23f9b26:	b003      	add	sp, #12
 23f9b28:	f85d fb04 	ldr.w	pc, [sp], #4

023f9b2c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 23f9b2c:	4601      	mov	r1, r0
    reset(0, flags);
 23f9b2e:	2000      	movs	r0, #0
 23f9b30:	f7ff bff0 	b.w	23f9b14 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

023f9b34 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 23f9b34:	2000      	movs	r0, #0
 23f9b36:	f7ff bff9 	b.w	23f9b2c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

023f9b3a <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
 23f9b3a:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
 23f9b3c:	2420      	movs	r4, #32
{
 23f9b3e:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
 23f9b40:	4622      	mov	r2, r4
 23f9b42:	2100      	movs	r1, #0
 23f9b44:	4668      	mov	r0, sp
 23f9b46:	f003 f962 	bl	23fce0e <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
 23f9b4a:	2100      	movs	r1, #0
 23f9b4c:	4668      	mov	r0, sp
    info.size = sizeof(info);
 23f9b4e:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
 23f9b52:	f7fd fd0b 	bl	23f756c <HAL_Core_Runtime_Info>
    return info.freeheap;
}
 23f9b56:	9801      	ldr	r0, [sp, #4]
 23f9b58:	b008      	add	sp, #32
 23f9b5a:	bd10      	pop	{r4, pc}

023f9b5c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23f9b5c:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23f9b5e:	2000      	movs	r0, #0
 23f9b60:	4b04      	ldr	r3, [pc, #16]	; (23f9b74 <_GLOBAL__sub_I_System+0x18>)
 23f9b62:	601a      	str	r2, [r3, #0]
 23f9b64:	4b04      	ldr	r3, [pc, #16]	; (23f9b78 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23f9b66:	4a05      	ldr	r2, [pc, #20]	; (23f9b7c <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23f9b68:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23f9b6c:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23f9b6e:	f7fe b8d1 	b.w	23f7d14 <set_system_mode>
 23f9b72:	bf00      	nop
 23f9b74:	1007af38 	.word	0x1007af38
 23f9b78:	1007af2c 	.word	0x1007af2c
 23f9b7c:	ffff0000 	.word	0xffff0000

023f9b80 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 23f9b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 23f9b84:	4a15      	ldr	r2, [pc, #84]	; (23f9bdc <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 23f9b86:	f8df 8060 	ldr.w	r8, [pc, #96]	; 23f9be8 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 23f9b8a:	e9d2 6300 	ldrd	r6, r3, [r2]
 23f9b8e:	1980      	adds	r0, r0, r6
 23f9b90:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
 23f9b94:	4b12      	ldr	r3, [pc, #72]	; (23f9be0 <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 23f9b96:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 23f9b98:	e9d3 6700 	ldrd	r6, r7, [r3]
 23f9b9c:	1986      	adds	r6, r0, r6
 23f9b9e:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
 23f9ba2:	e9d8 2300 	ldrd	r2, r3, [r8]
 23f9ba6:	42bb      	cmp	r3, r7
 23f9ba8:	bf08      	it	eq
 23f9baa:	42b2      	cmpeq	r2, r6
 23f9bac:	d013      	beq.n	23f9bd6 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 23f9bae:	a903      	add	r1, sp, #12
 23f9bb0:	4668      	mov	r0, sp
 23f9bb2:	e9cd 6700 	strd	r6, r7, [sp]
 23f9bb6:	f7fe fb5b 	bl	23f8270 <localtime_r>
	calendar_time.tm_year += 1900;
 23f9bba:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23f9bbc:	4d09      	ldr	r5, [pc, #36]	; (23f9be4 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 23f9bbe:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23f9bc2:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 23f9bc4:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23f9bc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f9bc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f9bca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f9bcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 23f9bce:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23f9bd2:	6823      	ldr	r3, [r4, #0]
 23f9bd4:	602b      	str	r3, [r5, #0]
    }
}
 23f9bd6:	b00c      	add	sp, #48	; 0x30
 23f9bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f9bdc:	1007af70 	.word	0x1007af70
 23f9be0:	1007af68 	.word	0x1007af68
 23f9be4:	1007af40 	.word	0x1007af40
 23f9be8:	1007af78 	.word	0x1007af78

023f9bec <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
 23f9bec:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
 23f9bee:	2000      	movs	r0, #0
 23f9bf0:	f7fe f9a8 	bl	23f7f44 <spark_sync_time_pending>
 23f9bf4:	b128      	cbz	r0, 23f9c02 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23f9bf6:	f7fe f96d 	bl	23f7ed4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 23f9bfa:	f080 0001 	eor.w	r0, r0, #1
 23f9bfe:	b2c0      	uxtb	r0, r0
    }
 23f9c00:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 23f9c02:	2001      	movs	r0, #1
 23f9c04:	e7fc      	b.n	23f9c00 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

023f9c08 <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
 23f9c08:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f9c0a:	f7ff ffb9 	bl	23f9b80 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
 23f9c0e:	4b01      	ldr	r3, [pc, #4]	; (23f9c14 <_ZN9TimeClass4hourEx+0xc>)
 23f9c10:	6898      	ldr	r0, [r3, #8]
 23f9c12:	bd08      	pop	{r3, pc}
 23f9c14:	1007af40 	.word	0x1007af40

023f9c18 <_ZN9TimeClass6minuteEx>:
	return minute(now());
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
 23f9c18:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f9c1a:	f7ff ffb1 	bl	23f9b80 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_min;
}
 23f9c1e:	4b01      	ldr	r3, [pc, #4]	; (23f9c24 <_ZN9TimeClass6minuteEx+0xc>)
 23f9c20:	6858      	ldr	r0, [r3, #4]
 23f9c22:	bd08      	pop	{r3, pc}
 23f9c24:	1007af40 	.word	0x1007af40

023f9c28 <_ZN9TimeClass6secondEx>:
	return second(now());
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
 23f9c28:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f9c2a:	f7ff ffa9 	bl	23f9b80 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_sec;
}
 23f9c2e:	4b01      	ldr	r3, [pc, #4]	; (23f9c34 <_ZN9TimeClass6secondEx+0xc>)
 23f9c30:	6818      	ldr	r0, [r3, #0]
 23f9c32:	bd08      	pop	{r3, pc}
 23f9c34:	1007af40 	.word	0x1007af40

023f9c38 <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
 23f9c38:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f9c3a:	f7ff ffa1 	bl	23f9b80 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
 23f9c3e:	4b01      	ldr	r3, [pc, #4]	; (23f9c44 <_ZN9TimeClass3dayEx+0xc>)
 23f9c40:	68d8      	ldr	r0, [r3, #12]
 23f9c42:	bd08      	pop	{r3, pc}
 23f9c44:	1007af40 	.word	0x1007af40

023f9c48 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 23f9c48:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f9c4a:	f7ff ff99 	bl	23f9b80 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 23f9c4e:	4b02      	ldr	r3, [pc, #8]	; (23f9c58 <_ZN9TimeClass5monthEx+0x10>)
 23f9c50:	6918      	ldr	r0, [r3, #16]
}
 23f9c52:	3001      	adds	r0, #1
 23f9c54:	bd08      	pop	{r3, pc}
 23f9c56:	bf00      	nop
 23f9c58:	1007af40 	.word	0x1007af40

023f9c5c <_ZN9TimeClass4yearEx>:
	return year(now());
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
 23f9c5c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f9c5e:	f7ff ff8f 	bl	23f9b80 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_year;
}
 23f9c62:	4b01      	ldr	r3, [pc, #4]	; (23f9c68 <_ZN9TimeClass4yearEx+0xc>)
 23f9c64:	6958      	ldr	r0, [r3, #20]
 23f9c66:	bd08      	pop	{r3, pc}
 23f9c68:	1007af40 	.word	0x1007af40

023f9c6c <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
 23f9c6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f9c6e:	4602      	mov	r2, r0
 23f9c70:	460b      	mov	r3, r1
    struct timeval tv = {
 23f9c72:	2100      	movs	r1, #0
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
 23f9c74:	4668      	mov	r0, sp
    };
 23f9c76:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
 23f9c7a:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
 23f9c7e:	f7fd fd0f 	bl	23f76a0 <hal_rtc_set_time>
 23f9c82:	4602      	mov	r2, r0
 23f9c84:	b910      	cbnz	r0, 23f9c8c <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
 23f9c86:	4601      	mov	r1, r0
 23f9c88:	f7fe f8a6 	bl	23f7dd8 <system_notify_time_changed>
    }
}
 23f9c8c:	b005      	add	sp, #20
 23f9c8e:	f85d fb04 	ldr.w	pc, [sp], #4

023f9c92 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 23f9c92:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 23f9c94:	2000      	movs	r0, #0
 23f9c96:	f7fd fcd9 	bl	23f764c <hal_rtc_time_is_valid>
    if (rtcstate)
 23f9c9a:	4604      	mov	r4, r0
 23f9c9c:	b9a0      	cbnz	r0, 23f9cc8 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 23f9c9e:	f7fe f82b 	bl	23f7cf8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 23f9ca2:	2801      	cmp	r0, #1
 23f9ca4:	d110      	bne.n	23f9cc8 <_ZN9TimeClass7isValidEv+0x36>
 23f9ca6:	4620      	mov	r0, r4
 23f9ca8:	f7fe f888 	bl	23f7dbc <system_thread_get_state>
 23f9cac:	b960      	cbnz	r0, 23f9cc8 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 23f9cae:	f7ff ff9d 	bl	23f9bec <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 23f9cb2:	b910      	cbnz	r0, 23f9cba <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 23f9cb4:	f7fe f8f2 	bl	23f7e9c <spark_process>
        while (_while() && !_condition()) {
 23f9cb8:	e7f9      	b.n	23f9cae <_ZN9TimeClass7isValidEv+0x1c>
 23f9cba:	f7ff ff97 	bl	23f9bec <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 23f9cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 23f9cc2:	2000      	movs	r0, #0
 23f9cc4:	f7fd bcc2 	b.w	23f764c <hal_rtc_time_is_valid>
}
 23f9cc8:	4620      	mov	r0, r4
 23f9cca:	bd10      	pop	{r4, pc}

023f9ccc <_ZN9TimeClass3nowEv>:
{
 23f9ccc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 23f9cce:	f7ff ffe0 	bl	23f9c92 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 23f9cd2:	2210      	movs	r2, #16
 23f9cd4:	2100      	movs	r1, #0
 23f9cd6:	4668      	mov	r0, sp
 23f9cd8:	f003 f899 	bl	23fce0e <memset>
    hal_rtc_get_time(&tv, nullptr);
 23f9cdc:	2100      	movs	r1, #0
 23f9cde:	4668      	mov	r0, sp
 23f9ce0:	f7fd fcd0 	bl	23f7684 <hal_rtc_get_time>
}
 23f9ce4:	9800      	ldr	r0, [sp, #0]
 23f9ce6:	b005      	add	sp, #20
 23f9ce8:	f85d fb04 	ldr.w	pc, [sp], #4

023f9cec <_ZN9TimeClass4hourEv>:
{
 23f9cec:	b508      	push	{r3, lr}
	return hour(now());
 23f9cee:	f7ff ffed 	bl	23f9ccc <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23f9cf2:	17c1      	asrs	r1, r0, #31
 23f9cf4:	f7ff ff44 	bl	23f9b80 <_ZL22Refresh_UnixTime_Cachex>
}
 23f9cf8:	4b01      	ldr	r3, [pc, #4]	; (23f9d00 <_ZN9TimeClass4hourEv+0x14>)
 23f9cfa:	6898      	ldr	r0, [r3, #8]
 23f9cfc:	bd08      	pop	{r3, pc}
 23f9cfe:	bf00      	nop
 23f9d00:	1007af40 	.word	0x1007af40

023f9d04 <_ZN9TimeClass6minuteEv>:
{
 23f9d04:	b508      	push	{r3, lr}
	return minute(now());
 23f9d06:	f7ff ffe1 	bl	23f9ccc <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23f9d0a:	17c1      	asrs	r1, r0, #31
 23f9d0c:	f7ff ff38 	bl	23f9b80 <_ZL22Refresh_UnixTime_Cachex>
}
 23f9d10:	4b01      	ldr	r3, [pc, #4]	; (23f9d18 <_ZN9TimeClass6minuteEv+0x14>)
 23f9d12:	6858      	ldr	r0, [r3, #4]
 23f9d14:	bd08      	pop	{r3, pc}
 23f9d16:	bf00      	nop
 23f9d18:	1007af40 	.word	0x1007af40

023f9d1c <_ZN9TimeClass6secondEv>:
{
 23f9d1c:	b508      	push	{r3, lr}
	return second(now());
 23f9d1e:	f7ff ffd5 	bl	23f9ccc <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23f9d22:	17c1      	asrs	r1, r0, #31
 23f9d24:	f7ff ff2c 	bl	23f9b80 <_ZL22Refresh_UnixTime_Cachex>
}
 23f9d28:	4b01      	ldr	r3, [pc, #4]	; (23f9d30 <_ZN9TimeClass6secondEv+0x14>)
 23f9d2a:	6818      	ldr	r0, [r3, #0]
 23f9d2c:	bd08      	pop	{r3, pc}
 23f9d2e:	bf00      	nop
 23f9d30:	1007af40 	.word	0x1007af40

023f9d34 <_ZN9TimeClass3dayEv>:
{
 23f9d34:	b508      	push	{r3, lr}
	return day(now());
 23f9d36:	f7ff ffc9 	bl	23f9ccc <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23f9d3a:	17c1      	asrs	r1, r0, #31
 23f9d3c:	f7ff ff20 	bl	23f9b80 <_ZL22Refresh_UnixTime_Cachex>
}
 23f9d40:	4b01      	ldr	r3, [pc, #4]	; (23f9d48 <_ZN9TimeClass3dayEv+0x14>)
 23f9d42:	68d8      	ldr	r0, [r3, #12]
 23f9d44:	bd08      	pop	{r3, pc}
 23f9d46:	bf00      	nop
 23f9d48:	1007af40 	.word	0x1007af40

023f9d4c <_ZN9TimeClass5monthEv>:
{
 23f9d4c:	b508      	push	{r3, lr}
	return month(now());
 23f9d4e:	f7ff ffbd 	bl	23f9ccc <_ZN9TimeClass3nowEv>
}
 23f9d52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 23f9d56:	17c1      	asrs	r1, r0, #31
 23f9d58:	f7ff bf76 	b.w	23f9c48 <_ZN9TimeClass5monthEx>

023f9d5c <_ZN9TimeClass4yearEv>:
{
 23f9d5c:	b508      	push	{r3, lr}
	return year(now());
 23f9d5e:	f7ff ffb5 	bl	23f9ccc <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23f9d62:	17c1      	asrs	r1, r0, #31
 23f9d64:	f7ff ff0c 	bl	23f9b80 <_ZL22Refresh_UnixTime_Cachex>
}
 23f9d68:	4b01      	ldr	r3, [pc, #4]	; (23f9d70 <_ZN9TimeClass4yearEv+0x14>)
 23f9d6a:	6958      	ldr	r0, [r3, #20]
 23f9d6c:	bd08      	pop	{r3, pc}
 23f9d6e:	bf00      	nop
 23f9d70:	1007af40 	.word	0x1007af40

023f9d74 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23f9d74:	4b02      	ldr	r3, [pc, #8]	; (23f9d80 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23f9d76:	681a      	ldr	r2, [r3, #0]
 23f9d78:	4b02      	ldr	r3, [pc, #8]	; (23f9d84 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23f9d7a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23f9d7c:	4770      	bx	lr
 23f9d7e:	bf00      	nop
 23f9d80:	1006a214 	.word	0x1006a214
 23f9d84:	1007af3c 	.word	0x1007af3c

023f9d88 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23f9d88:	4770      	bx	lr

023f9d8a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23f9d8a:	7441      	strb	r1, [r0, #17]
}
 23f9d8c:	4770      	bx	lr

023f9d8e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23f9d8e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23f9d90:	7c00      	ldrb	r0, [r0, #16]
 23f9d92:	f7fd ff09 	bl	23f7ba8 <hal_usart_available_data_for_write>
}
 23f9d96:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f9d9a:	bd08      	pop	{r3, pc}

023f9d9c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23f9d9c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23f9d9e:	7c00      	ldrb	r0, [r0, #16]
 23f9da0:	f7fd febc 	bl	23f7b1c <hal_usart_available>
}
 23f9da4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f9da8:	bd08      	pop	{r3, pc}

023f9daa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23f9daa:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23f9dac:	7c00      	ldrb	r0, [r0, #16]
 23f9dae:	f7fd fed1 	bl	23f7b54 <hal_usart_peek>
}
 23f9db2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f9db6:	bd08      	pop	{r3, pc}

023f9db8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23f9db8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23f9dba:	7c00      	ldrb	r0, [r0, #16]
 23f9dbc:	f7fd febc 	bl	23f7b38 <hal_usart_read>
}
 23f9dc0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f9dc4:	bd08      	pop	{r3, pc}

023f9dc6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23f9dc6:	7c00      	ldrb	r0, [r0, #16]
 23f9dc8:	f7fd bed2 	b.w	23f7b70 <hal_usart_flush>

023f9dcc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23f9dcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f9dce:	7c45      	ldrb	r5, [r0, #17]
{
 23f9dd0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f9dd2:	b12d      	cbz	r5, 23f9de0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23f9dd4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23f9dd6:	b003      	add	sp, #12
 23f9dd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23f9ddc:	f7fd be90 	b.w	23f7b00 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f9de0:	7c00      	ldrb	r0, [r0, #16]
 23f9de2:	9101      	str	r1, [sp, #4]
 23f9de4:	f7fd fee0 	bl	23f7ba8 <hal_usart_available_data_for_write>
 23f9de8:	2800      	cmp	r0, #0
 23f9dea:	9901      	ldr	r1, [sp, #4]
 23f9dec:	dcf2      	bgt.n	23f9dd4 <_ZN11USARTSerial5writeEh+0x8>
}
 23f9dee:	4628      	mov	r0, r5
 23f9df0:	b003      	add	sp, #12
 23f9df2:	bd30      	pop	{r4, r5, pc}

023f9df4 <_ZN11USARTSerialD0Ev>:
 23f9df4:	b510      	push	{r4, lr}
 23f9df6:	4604      	mov	r4, r0
 23f9df8:	2114      	movs	r1, #20
 23f9dfa:	f7ec f926 	bl	23e604a <_ZdlPvj>
 23f9dfe:	4620      	mov	r0, r4
 23f9e00:	bd10      	pop	{r4, pc}
	...

023f9e04 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23f9e04:	b510      	push	{r4, lr}
 23f9e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f9e0a:	4604      	mov	r4, r0
 23f9e0c:	4608      	mov	r0, r1
 23f9e0e:	4611      	mov	r1, r2
 23f9e10:	2200      	movs	r2, #0
 23f9e12:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23f9e16:	4b04      	ldr	r3, [pc, #16]	; (23f9e28 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23f9e18:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23f9e1a:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23f9e1c:	2301      	movs	r3, #1
 23f9e1e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23f9e20:	f7fd fed0 	bl	23f7bc4 <hal_usart_init_ex>
}
 23f9e24:	4620      	mov	r0, r4
 23f9e26:	bd10      	pop	{r4, pc}
 23f9e28:	023ffb40 	.word	0x023ffb40

023f9e2c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23f9e2c:	7c00      	ldrb	r0, [r0, #16]
 23f9e2e:	f7fd bead 	b.w	23f7b8c <hal_usart_is_enabled>

023f9e32 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23f9e32:	7441      	strb	r1, [r0, #17]
}
 23f9e34:	4770      	bx	lr

023f9e36 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23f9e36:	4770      	bx	lr

023f9e38 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23f9e38:	4770      	bx	lr

023f9e3a <_ZN9USBSerial4readEv>:
{
 23f9e3a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23f9e3c:	2100      	movs	r1, #0
 23f9e3e:	7c00      	ldrb	r0, [r0, #16]
 23f9e40:	f7fd ff06 	bl	23f7c50 <HAL_USB_USART_Receive_Data>
}
 23f9e44:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f9e48:	bd08      	pop	{r3, pc}

023f9e4a <_ZN9USBSerial4peekEv>:
{
 23f9e4a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23f9e4c:	2101      	movs	r1, #1
 23f9e4e:	7c00      	ldrb	r0, [r0, #16]
 23f9e50:	f7fd fefe 	bl	23f7c50 <HAL_USB_USART_Receive_Data>
}
 23f9e54:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f9e58:	bd08      	pop	{r3, pc}

023f9e5a <_ZN9USBSerial17availableForWriteEv>:
{
 23f9e5a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23f9e5c:	7c00      	ldrb	r0, [r0, #16]
 23f9e5e:	f7fd fee9 	bl	23f7c34 <HAL_USB_USART_Available_Data_For_Write>
}
 23f9e62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f9e66:	bd08      	pop	{r3, pc}

023f9e68 <_ZN9USBSerial9availableEv>:
{
 23f9e68:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23f9e6a:	7c00      	ldrb	r0, [r0, #16]
 23f9e6c:	f7fd fed4 	bl	23f7c18 <HAL_USB_USART_Available_Data>
}
 23f9e70:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f9e74:	bd08      	pop	{r3, pc}

023f9e76 <_ZN9USBSerial5writeEh>:
{
 23f9e76:	b513      	push	{r0, r1, r4, lr}
 23f9e78:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23f9e7a:	7c00      	ldrb	r0, [r0, #16]
{
 23f9e7c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23f9e7e:	f7fd fed9 	bl	23f7c34 <HAL_USB_USART_Available_Data_For_Write>
 23f9e82:	2800      	cmp	r0, #0
 23f9e84:	9901      	ldr	r1, [sp, #4]
 23f9e86:	dc01      	bgt.n	23f9e8c <_ZN9USBSerial5writeEh+0x16>
 23f9e88:	7c60      	ldrb	r0, [r4, #17]
 23f9e8a:	b120      	cbz	r0, 23f9e96 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23f9e8c:	7c20      	ldrb	r0, [r4, #16]
 23f9e8e:	f7fd feed 	bl	23f7c6c <HAL_USB_USART_Send_Data>
 23f9e92:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23f9e96:	b002      	add	sp, #8
 23f9e98:	bd10      	pop	{r4, pc}

023f9e9a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23f9e9a:	7c00      	ldrb	r0, [r0, #16]
 23f9e9c:	f7fd bef4 	b.w	23f7c88 <HAL_USB_USART_Flush_Data>

023f9ea0 <_ZN9USBSerialD0Ev>:
 23f9ea0:	b510      	push	{r4, lr}
 23f9ea2:	4604      	mov	r4, r0
 23f9ea4:	2114      	movs	r1, #20
 23f9ea6:	f7ec f8d0 	bl	23e604a <_ZdlPvj>
 23f9eaa:	4620      	mov	r0, r4
 23f9eac:	bd10      	pop	{r4, pc}
	...

023f9eb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23f9eb0:	b510      	push	{r4, lr}
 23f9eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f9eb6:	4604      	mov	r4, r0
 23f9eb8:	4608      	mov	r0, r1
 23f9eba:	2100      	movs	r1, #0
 23f9ebc:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23f9ec0:	4b04      	ldr	r3, [pc, #16]	; (23f9ed4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23f9ec2:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23f9ec4:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23f9ec6:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23f9ec8:	4611      	mov	r1, r2
  _blocking = true;
 23f9eca:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23f9ecc:	f7fd fe88 	bl	23f7be0 <HAL_USB_USART_Init>
}
 23f9ed0:	4620      	mov	r0, r4
 23f9ed2:	bd10      	pop	{r4, pc}
 23f9ed4:	023ffb74 	.word	0x023ffb74

023f9ed8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23f9ed8:	2200      	movs	r2, #0
 23f9eda:	7c00      	ldrb	r0, [r0, #16]
 23f9edc:	f7fd be8e 	b.w	23f7bfc <HAL_USB_USART_Begin>

023f9ee0 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
 23f9ee0:	7c00      	ldrb	r0, [r0, #16]
 23f9ee2:	f7fd bedf 	b.w	23f7ca4 <HAL_USB_USART_Is_Connected>

023f9ee6 <_Z19acquireSerialBufferv>:
{
 23f9ee6:	b510      	push	{r4, lr}
 23f9ee8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23f9eea:	2214      	movs	r2, #20
 23f9eec:	2100      	movs	r1, #0
 23f9eee:	f002 ff8e 	bl	23fce0e <memset>
}
 23f9ef2:	4620      	mov	r0, r4
 23f9ef4:	bd10      	pop	{r4, pc}
	...

023f9ef8 <_Z16_fetch_usbserialv>:
{
 23f9ef8:	b510      	push	{r4, lr}
 23f9efa:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23f9efc:	a803      	add	r0, sp, #12
 23f9efe:	f7ff fff2 	bl	23f9ee6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23f9f02:	4c0c      	ldr	r4, [pc, #48]	; (23f9f34 <_Z16_fetch_usbserialv+0x3c>)
 23f9f04:	e8d4 1f8f 	ldab	r1, [r4]
 23f9f08:	f011 0101 	ands.w	r1, r1, #1
 23f9f0c:	d10f      	bne.n	23f9f2e <_Z16_fetch_usbserialv+0x36>
 23f9f0e:	4620      	mov	r0, r4
 23f9f10:	9101      	str	r1, [sp, #4]
 23f9f12:	f7fe f9bb 	bl	23f828c <__cxa_guard_acquire>
 23f9f16:	9901      	ldr	r1, [sp, #4]
 23f9f18:	b148      	cbz	r0, 23f9f2e <_Z16_fetch_usbserialv+0x36>
 23f9f1a:	aa03      	add	r2, sp, #12
 23f9f1c:	4806      	ldr	r0, [pc, #24]	; (23f9f38 <_Z16_fetch_usbserialv+0x40>)
 23f9f1e:	f7ff ffc7 	bl	23f9eb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23f9f22:	4620      	mov	r0, r4
 23f9f24:	f7fe f9c0 	bl	23f82a8 <__cxa_guard_release>
 23f9f28:	4804      	ldr	r0, [pc, #16]	; (23f9f3c <_Z16_fetch_usbserialv+0x44>)
 23f9f2a:	f002 ff41 	bl	23fcdb0 <atexit>
	return _usbserial;
}
 23f9f2e:	4802      	ldr	r0, [pc, #8]	; (23f9f38 <_Z16_fetch_usbserialv+0x40>)
 23f9f30:	b008      	add	sp, #32
 23f9f32:	bd10      	pop	{r4, pc}
 23f9f34:	1007af80 	.word	0x1007af80
 23f9f38:	1007af84 	.word	0x1007af84
 23f9f3c:	023f9e37 	.word	0x023f9e37

023f9f40 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23f9f40:	2200      	movs	r2, #0
 23f9f42:	6840      	ldr	r0, [r0, #4]
 23f9f44:	4611      	mov	r1, r2
 23f9f46:	f7fe b85f 	b.w	23f8008 <network_ready>

023f9f4a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23f9f4a:	2200      	movs	r2, #0
 23f9f4c:	6840      	ldr	r0, [r0, #4]
 23f9f4e:	4611      	mov	r1, r2
 23f9f50:	f7fe b892 	b.w	23f8078 <network_listening>

023f9f54 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23f9f54:	2200      	movs	r2, #0
 23f9f56:	6840      	ldr	r0, [r0, #4]
 23f9f58:	4611      	mov	r1, r2
 23f9f5a:	f7fe b8a9 	b.w	23f80b0 <network_get_listen_timeout>

023f9f5e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23f9f5e:	2200      	movs	r2, #0
 23f9f60:	6840      	ldr	r0, [r0, #4]
 23f9f62:	f7fe b897 	b.w	23f8094 <network_set_listen_timeout>

023f9f66 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23f9f66:	2200      	movs	r2, #0
 23f9f68:	6840      	ldr	r0, [r0, #4]
 23f9f6a:	f081 0101 	eor.w	r1, r1, #1
 23f9f6e:	f7fe b875 	b.w	23f805c <network_listen>

023f9f72 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23f9f72:	2300      	movs	r3, #0
 23f9f74:	6840      	ldr	r0, [r0, #4]
 23f9f76:	461a      	mov	r2, r3
 23f9f78:	4619      	mov	r1, r3
 23f9f7a:	f7fe b861 	b.w	23f8040 <network_off>

023f9f7e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23f9f7e:	2300      	movs	r3, #0
 23f9f80:	6840      	ldr	r0, [r0, #4]
 23f9f82:	461a      	mov	r2, r3
 23f9f84:	4619      	mov	r1, r3
 23f9f86:	f7fe b84d 	b.w	23f8024 <network_on>

023f9f8a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23f9f8a:	2200      	movs	r2, #0
 23f9f8c:	6840      	ldr	r0, [r0, #4]
 23f9f8e:	4611      	mov	r1, r2
 23f9f90:	f7fe b81e 	b.w	23f7fd0 <network_connecting>

023f9f94 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23f9f94:	2200      	movs	r2, #0
 23f9f96:	2102      	movs	r1, #2
 23f9f98:	6840      	ldr	r0, [r0, #4]
 23f9f9a:	f7fe b827 	b.w	23f7fec <network_disconnect>

023f9f9e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23f9f9e:	2300      	movs	r3, #0
 23f9fa0:	6840      	ldr	r0, [r0, #4]
 23f9fa2:	461a      	mov	r2, r3
 23f9fa4:	f7fe b806 	b.w	23f7fb4 <network_connect>

023f9fa8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23f9fa8:	2205      	movs	r2, #5
 23f9faa:	4b02      	ldr	r3, [pc, #8]	; (23f9fb4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23f9fac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23f9fae:	4a02      	ldr	r2, [pc, #8]	; (23f9fb8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23f9fb0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23f9fb2:	4770      	bx	lr
 23f9fb4:	1007af98 	.word	0x1007af98
 23f9fb8:	023ffba8 	.word	0x023ffba8

023f9fbc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23f9fbc:	4b01      	ldr	r3, [pc, #4]	; (23f9fc4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23f9fbe:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23f9fc0:	4770      	bx	lr
 23f9fc2:	bf00      	nop
 23f9fc4:	1006a220 	.word	0x1006a220

023f9fc8 <serialEventRun>:
{
 23f9fc8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23f9fca:	4b0d      	ldr	r3, [pc, #52]	; (23fa000 <serialEventRun+0x38>)
 23f9fcc:	b143      	cbz	r3, 23f9fe0 <serialEventRun+0x18>
 23f9fce:	f7ff ff93 	bl	23f9ef8 <_Z16_fetch_usbserialv>
 23f9fd2:	6803      	ldr	r3, [r0, #0]
 23f9fd4:	691b      	ldr	r3, [r3, #16]
 23f9fd6:	4798      	blx	r3
 23f9fd8:	2800      	cmp	r0, #0
 23f9fda:	dd01      	ble.n	23f9fe0 <serialEventRun+0x18>
        serialEvent();
 23f9fdc:	e000      	b.n	23f9fe0 <serialEventRun+0x18>
 23f9fde:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23f9fe0:	4b08      	ldr	r3, [pc, #32]	; (23fa004 <serialEventRun+0x3c>)
 23f9fe2:	b143      	cbz	r3, 23f9ff6 <serialEventRun+0x2e>
 23f9fe4:	f000 f9d2 	bl	23fa38c <_Z22__fetch_global_Serial1v>
 23f9fe8:	6803      	ldr	r3, [r0, #0]
 23f9fea:	691b      	ldr	r3, [r3, #16]
 23f9fec:	4798      	blx	r3
 23f9fee:	2800      	cmp	r0, #0
 23f9ff0:	dd01      	ble.n	23f9ff6 <serialEventRun+0x2e>
        serialEvent1();
 23f9ff2:	e000      	b.n	23f9ff6 <serialEventRun+0x2e>
 23f9ff4:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23f9ff6:	4b04      	ldr	r3, [pc, #16]	; (23fa008 <serialEventRun+0x40>)
 23f9ff8:	b10b      	cbz	r3, 23f9ffe <serialEventRun+0x36>
 23f9ffa:	f000 fa0d 	bl	23fa418 <_Z15serialEventRun2v>
}
 23f9ffe:	bd08      	pop	{r3, pc}
	...

023fa00c <_post_loop>:
{
 23fa00c:	b508      	push	{r3, lr}
	serialEventRun();
 23fa00e:	f7ff ffdb 	bl	23f9fc8 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fa012:	f7fd fad5 	bl	23f75c0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fa016:	4b01      	ldr	r3, [pc, #4]	; (23fa01c <_post_loop+0x10>)
 23fa018:	6018      	str	r0, [r3, #0]
}
 23fa01a:	bd08      	pop	{r3, pc}
 23fa01c:	1007afa8 	.word	0x1007afa8

023fa020 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fa020:	4805      	ldr	r0, [pc, #20]	; (23fa038 <_Z33system_initialize_user_backup_ramv+0x18>)
 23fa022:	4a06      	ldr	r2, [pc, #24]	; (23fa03c <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fa024:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fa026:	1a12      	subs	r2, r2, r0
 23fa028:	4905      	ldr	r1, [pc, #20]	; (23fa040 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fa02a:	f002 fee3 	bl	23fcdf4 <memcpy>
    __backup_sram_signature = signature;
 23fa02e:	4b05      	ldr	r3, [pc, #20]	; (23fa044 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fa030:	4a05      	ldr	r2, [pc, #20]	; (23fa048 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fa032:	601a      	str	r2, [r3, #0]
}
 23fa034:	bd08      	pop	{r3, pc}
 23fa036:	bf00      	nop
 23fa038:	1007b400 	.word	0x1007b400
 23fa03c:	1007b404 	.word	0x1007b404
 23fa040:	085ff1f8 	.word	0x085ff1f8
 23fa044:	1007b400 	.word	0x1007b400
 23fa048:	9a271c1e 	.word	0x9a271c1e

023fa04c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fa04c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fa04e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fa050:	461a      	mov	r2, r3
 23fa052:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fa056:	9300      	str	r3, [sp, #0]
 23fa058:	f7fd feda 	bl	23f7e10 <system_ctrl_set_result>
}
 23fa05c:	b003      	add	sp, #12
 23fa05e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fa064 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fa064:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fa066:	8843      	ldrh	r3, [r0, #2]
 23fa068:	2b0a      	cmp	r3, #10
 23fa06a:	d008      	beq.n	23fa07e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fa06c:	2b50      	cmp	r3, #80	; 0x50
 23fa06e:	d10b      	bne.n	23fa088 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fa070:	4b09      	ldr	r3, [pc, #36]	; (23fa098 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fa072:	681b      	ldr	r3, [r3, #0]
 23fa074:	b14b      	cbz	r3, 23fa08a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fa076:	b003      	add	sp, #12
 23fa078:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fa07c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fa07e:	f7ff ffe5 	bl	23fa04c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fa082:	b003      	add	sp, #12
 23fa084:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fa088:	2300      	movs	r3, #0
 23fa08a:	461a      	mov	r2, r3
 23fa08c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fa090:	9300      	str	r3, [sp, #0]
 23fa092:	f7fd febd 	bl	23f7e10 <system_ctrl_set_result>
}
 23fa096:	e7f4      	b.n	23fa082 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fa098:	1007afa4 	.word	0x1007afa4

023fa09c <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fa09c:	2100      	movs	r1, #0
{
 23fa09e:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fa0a0:	4811      	ldr	r0, [pc, #68]	; (23fa0e8 <module_user_init_hook+0x4c>)
 23fa0a2:	f7fe f8d7 	bl	23f8254 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fa0a6:	4b11      	ldr	r3, [pc, #68]	; (23fa0ec <module_user_init_hook+0x50>)
 23fa0a8:	681a      	ldr	r2, [r3, #0]
 23fa0aa:	4b11      	ldr	r3, [pc, #68]	; (23fa0f0 <module_user_init_hook+0x54>)
 23fa0ac:	429a      	cmp	r2, r3
 23fa0ae:	bf0c      	ite	eq
 23fa0b0:	2201      	moveq	r2, #1
 23fa0b2:	2200      	movne	r2, #0
 23fa0b4:	4b0f      	ldr	r3, [pc, #60]	; (23fa0f4 <module_user_init_hook+0x58>)
 23fa0b6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fa0b8:	d001      	beq.n	23fa0be <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fa0ba:	f7ff ffb1 	bl	23fa020 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fa0be:	f7fd fa63 	bl	23f7588 <HAL_RNG_GetRandomNumber>
 23fa0c2:	4604      	mov	r4, r0
    srand(seed);
 23fa0c4:	f002 feac 	bl	23fce20 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fa0c8:	4b0b      	ldr	r3, [pc, #44]	; (23fa0f8 <module_user_init_hook+0x5c>)
 23fa0ca:	b113      	cbz	r3, 23fa0d2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fa0cc:	4620      	mov	r0, r4
 23fa0ce:	e000      	b.n	23fa0d2 <module_user_init_hook+0x36>
 23fa0d0:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fa0d2:	2100      	movs	r1, #0
 23fa0d4:	4808      	ldr	r0, [pc, #32]	; (23fa0f8 <module_user_init_hook+0x5c>)
 23fa0d6:	f7fd ff51 	bl	23f7f7c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fa0da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fa0de:	2100      	movs	r1, #0
 23fa0e0:	4806      	ldr	r0, [pc, #24]	; (23fa0fc <module_user_init_hook+0x60>)
 23fa0e2:	f7fd be87 	b.w	23f7df4 <system_ctrl_set_app_request_handler>
 23fa0e6:	bf00      	nop
 23fa0e8:	023f9fbd 	.word	0x023f9fbd
 23fa0ec:	1007b400 	.word	0x1007b400
 23fa0f0:	9a271c1e 	.word	0x9a271c1e
 23fa0f4:	1007afa0 	.word	0x1007afa0
 23fa0f8:	00000000 	.word	0x00000000
 23fa0fc:	023fa065 	.word	0x023fa065

023fa100 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
 23fa100:	b509      	push	{r0, r3, lr}
 23fa102:	4804      	ldr	r0, [pc, #16]	; (23fa114 <spark_protocol_instance+0x14>)
 23fa104:	6800      	ldr	r0, [r0, #0]
 23fa106:	4b04      	ldr	r3, [pc, #16]	; (23fa118 <spark_protocol_instance+0x18>)
 23fa108:	4403      	add	r3, r0
 23fa10a:	681b      	ldr	r3, [r3, #0]
 23fa10c:	681b      	ldr	r3, [r3, #0]
 23fa10e:	9302      	str	r3, [sp, #8]
 23fa110:	bd09      	pop	{r0, r3, pc}
 23fa112:	0000      	.short	0x0000
 23fa114:	1006a138 	.word	0x1006a138
 23fa118:	00000044 	.word	0x00000044

023fa11c <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
 23fa11c:	b509      	push	{r0, r3, lr}
 23fa11e:	4804      	ldr	r0, [pc, #16]	; (23fa130 <spark_protocol_set_product_id+0x14>)
 23fa120:	6800      	ldr	r0, [r0, #0]
 23fa122:	4b04      	ldr	r3, [pc, #16]	; (23fa134 <spark_protocol_set_product_id+0x18>)
 23fa124:	4403      	add	r3, r0
 23fa126:	681b      	ldr	r3, [r3, #0]
 23fa128:	685b      	ldr	r3, [r3, #4]
 23fa12a:	9302      	str	r3, [sp, #8]
 23fa12c:	bd09      	pop	{r0, r3, pc}
 23fa12e:	0000      	.short	0x0000
 23fa130:	1006a138 	.word	0x1006a138
 23fa134:	00000044 	.word	0x00000044

023fa138 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
 23fa138:	b509      	push	{r0, r3, lr}
 23fa13a:	4804      	ldr	r0, [pc, #16]	; (23fa14c <spark_protocol_set_product_firmware_version+0x14>)
 23fa13c:	6800      	ldr	r0, [r0, #0]
 23fa13e:	4b04      	ldr	r3, [pc, #16]	; (23fa150 <spark_protocol_set_product_firmware_version+0x18>)
 23fa140:	4403      	add	r3, r0
 23fa142:	681b      	ldr	r3, [r3, #0]
 23fa144:	689b      	ldr	r3, [r3, #8]
 23fa146:	9302      	str	r3, [sp, #8]
 23fa148:	bd09      	pop	{r0, r3, pc}
 23fa14a:	0000      	.short	0x0000
 23fa14c:	1006a138 	.word	0x1006a138
 23fa150:	00000044 	.word	0x00000044

023fa154 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23fa154:	282c      	cmp	r0, #44	; 0x2c
bool pinAvailable(uint16_t pin) {
 23fa156:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
 23fa158:	d902      	bls.n	23fa160 <pinAvailable+0xc>
    return false;
 23fa15a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23fa15c:	b002      	add	sp, #8
 23fa15e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fa160:	f1a0 030b 	sub.w	r3, r0, #11
 23fa164:	2b02      	cmp	r3, #2
 23fa166:	d819      	bhi.n	23fa19c <pinAvailable+0x48>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fa168:	4c17      	ldr	r4, [pc, #92]	; (23fa1c8 <pinAvailable+0x74>)
 23fa16a:	e8d4 1f8f 	ldab	r1, [r4]
 23fa16e:	f011 0101 	ands.w	r1, r1, #1
 23fa172:	d10b      	bne.n	23fa18c <pinAvailable+0x38>
 23fa174:	4620      	mov	r0, r4
 23fa176:	9101      	str	r1, [sp, #4]
 23fa178:	f7fe f888 	bl	23f828c <__cxa_guard_acquire>
 23fa17c:	9901      	ldr	r1, [sp, #4]
 23fa17e:	b128      	cbz	r0, 23fa18c <pinAvailable+0x38>
 23fa180:	4812      	ldr	r0, [pc, #72]	; (23fa1cc <pinAvailable+0x78>)
 23fa182:	f7ff fb25 	bl	23f97d0 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fa186:	4620      	mov	r0, r4
 23fa188:	f7fe f88e 	bl	23f82a8 <__cxa_guard_release>
 23fa18c:	4b0f      	ldr	r3, [pc, #60]	; (23fa1cc <pinAvailable+0x78>)
 23fa18e:	7818      	ldrb	r0, [r3, #0]
 23fa190:	f7fd fc54 	bl	23f7a3c <hal_spi_is_enabled>
 23fa194:	2800      	cmp	r0, #0
 23fa196:	d1e0      	bne.n	23fa15a <pinAvailable+0x6>
  return true; // 'pin' is available
 23fa198:	2001      	movs	r0, #1
 23fa19a:	e7df      	b.n	23fa15c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23fa19c:	2801      	cmp	r0, #1
 23fa19e:	d809      	bhi.n	23fa1b4 <pinAvailable+0x60>
 23fa1a0:	f000 f89a 	bl	23fa2d8 <_Z19__fetch_global_Wirev>
 23fa1a4:	2100      	movs	r1, #0
 23fa1a6:	7c00      	ldrb	r0, [r0, #16]
 23fa1a8:	f7fd fb84 	bl	23f78b4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fa1ac:	f080 0001 	eor.w	r0, r0, #1
 23fa1b0:	b2c0      	uxtb	r0, r0
 23fa1b2:	e7d3      	b.n	23fa15c <pinAvailable+0x8>
 23fa1b4:	3809      	subs	r0, #9
 23fa1b6:	2801      	cmp	r0, #1
 23fa1b8:	d8ee      	bhi.n	23fa198 <pinAvailable+0x44>
 23fa1ba:	f000 f8e7 	bl	23fa38c <_Z22__fetch_global_Serial1v>
 23fa1be:	7c00      	ldrb	r0, [r0, #16]
 23fa1c0:	f7fd fce4 	bl	23f7b8c <hal_usart_is_enabled>
 23fa1c4:	e7f2      	b.n	23fa1ac <pinAvailable+0x58>
 23fa1c6:	bf00      	nop
 23fa1c8:	1006a288 	.word	0x1006a288
 23fa1cc:	1006a28c 	.word	0x1006a28c

023fa1d0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fa1d0:	282c      	cmp	r0, #44	; 0x2c
{
 23fa1d2:	b538      	push	{r3, r4, r5, lr}
 23fa1d4:	4604      	mov	r4, r0
 23fa1d6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fa1d8:	d80a      	bhi.n	23fa1f0 <pinMode+0x20>
 23fa1da:	29ff      	cmp	r1, #255	; 0xff
 23fa1dc:	d008      	beq.n	23fa1f0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23fa1de:	f7ff ffb9 	bl	23fa154 <pinAvailable>
 23fa1e2:	b128      	cbz	r0, 23fa1f0 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23fa1e4:	4629      	mov	r1, r5
 23fa1e6:	4620      	mov	r0, r4
}
 23fa1e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23fa1ec:	f7fd ba82 	b.w	23f76f4 <hal_gpio_mode>
}
 23fa1f0:	bd38      	pop	{r3, r4, r5, pc}

023fa1f2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23fa1f2:	b538      	push	{r3, r4, r5, lr}
 23fa1f4:	4604      	mov	r4, r0
 23fa1f6:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23fa1f8:	f7fd fa8a 	bl	23f7710 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23fa1fc:	28ff      	cmp	r0, #255	; 0xff
 23fa1fe:	d010      	beq.n	23fa222 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23fa200:	2806      	cmp	r0, #6
 23fa202:	d804      	bhi.n	23fa20e <digitalWrite+0x1c>
 23fa204:	234d      	movs	r3, #77	; 0x4d
 23fa206:	fa23 f000 	lsr.w	r0, r3, r0
 23fa20a:	07c3      	lsls	r3, r0, #31
 23fa20c:	d409      	bmi.n	23fa222 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23fa20e:	4620      	mov	r0, r4
 23fa210:	f7ff ffa0 	bl	23fa154 <pinAvailable>
 23fa214:	b128      	cbz	r0, 23fa222 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23fa216:	4629      	mov	r1, r5
 23fa218:	4620      	mov	r0, r4
}
 23fa21a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23fa21e:	f7fd ba85 	b.w	23f772c <hal_gpio_write>
}
 23fa222:	bd38      	pop	{r3, r4, r5, pc}

023fa224 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
 23fa224:	b510      	push	{r4, lr}
 23fa226:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
 23fa228:	f7fd fa72 	bl	23f7710 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 23fa22c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 23fa22e:	b2db      	uxtb	r3, r3
 23fa230:	2b01      	cmp	r3, #1
 23fa232:	d908      	bls.n	23fa246 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 23fa234:	4620      	mov	r0, r4
 23fa236:	f7ff ff8d 	bl	23fa154 <pinAvailable>
 23fa23a:	b120      	cbz	r0, 23fa246 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
 23fa23c:	4620      	mov	r0, r4
}
 23fa23e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
 23fa242:	f7fd ba81 	b.w	23f7748 <hal_gpio_read>
}
 23fa246:	2000      	movs	r0, #0
 23fa248:	bd10      	pop	{r4, pc}

023fa24a <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(hal_pin_t pin)
{
 23fa24a:	b510      	push	{r4, lr}
 23fa24c:	4604      	mov	r4, r0
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
 23fa24e:	f7ff ff81 	bl	23fa154 <pinAvailable>
 23fa252:	b150      	cbz	r0, 23fa26a <analogRead+0x20>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
 23fa254:	2103      	movs	r1, #3
 23fa256:	4620      	mov	r0, r4
 23fa258:	f7fd fa3e 	bl	23f76d8 <hal_pin_validate_function>
 23fa25c:	2803      	cmp	r0, #3
 23fa25e:	d104      	bne.n	23fa26a <analogRead+0x20>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 23fa260:	4620      	mov	r0, r4
}
 23fa262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 23fa266:	f7fd ba99 	b.w	23f779c <hal_adc_read>
}
 23fa26a:	2000      	movs	r0, #0
 23fa26c:	bd10      	pop	{r4, pc}
	...

023fa270 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 23fa270:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 23fa272:	4c08      	ldr	r4, [pc, #32]	; (23fa294 <_Z21__fetch_global_EEPROMv+0x24>)
 23fa274:	e8d4 3f8f 	ldab	r3, [r4]
 23fa278:	07db      	lsls	r3, r3, #31
 23fa27a:	d408      	bmi.n	23fa28e <_Z21__fetch_global_EEPROMv+0x1e>
 23fa27c:	4620      	mov	r0, r4
 23fa27e:	f7fe f805 	bl	23f828c <__cxa_guard_acquire>
 23fa282:	b120      	cbz	r0, 23fa28e <_Z21__fetch_global_EEPROMv+0x1e>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 23fa284:	f7fd f9aa 	bl	23f75dc <HAL_EEPROM_Init>
 23fa288:	4620      	mov	r0, r4
 23fa28a:	f7fe f80d 	bl	23f82a8 <__cxa_guard_release>
	return eeprom;
}
 23fa28e:	4802      	ldr	r0, [pc, #8]	; (23fa298 <_Z21__fetch_global_EEPROMv+0x28>)
 23fa290:	bd10      	pop	{r4, pc}
 23fa292:	bf00      	nop
 23fa294:	1007afac 	.word	0x1007afac
 23fa298:	1007afb0 	.word	0x1007afb0

023fa29c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fa29c:	4770      	bx	lr
	...

023fa2a0 <_Z17acquireWireBufferv>:
{
 23fa2a0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23fa2a2:	4b0b      	ldr	r3, [pc, #44]	; (23fa2d0 <_Z17acquireWireBufferv+0x30>)
{
 23fa2a4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23fa2a6:	6003      	str	r3, [r0, #0]
 23fa2a8:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fa2aa:	490a      	ldr	r1, [pc, #40]	; (23fa2d4 <_Z17acquireWireBufferv+0x34>)
	hal_i2c_config_t config = {
 23fa2ac:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fa2ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 23fa2b2:	f000 f8c5 	bl	23fa440 <_ZnajRKSt9nothrow_t>
	};
 23fa2b6:	f44f 7500 	mov.w	r5, #512	; 0x200
 23fa2ba:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fa2bc:	4905      	ldr	r1, [pc, #20]	; (23fa2d4 <_Z17acquireWireBufferv+0x34>)
 23fa2be:	4628      	mov	r0, r5
	};
 23fa2c0:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fa2c2:	f000 f8bd 	bl	23fa440 <_ZnajRKSt9nothrow_t>
	};
 23fa2c6:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23fa2ca:	4620      	mov	r0, r4
 23fa2cc:	bd38      	pop	{r3, r4, r5, pc}
 23fa2ce:	bf00      	nop
 23fa2d0:	00010018 	.word	0x00010018
 23fa2d4:	023ffbe4 	.word	0x023ffbe4

023fa2d8 <_Z19__fetch_global_Wirev>:
{
 23fa2d8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fa2da:	4d0e      	ldr	r5, [pc, #56]	; (23fa314 <_Z19__fetch_global_Wirev+0x3c>)
{
 23fa2dc:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fa2de:	e8d5 1f8f 	ldab	r1, [r5]
 23fa2e2:	f011 0401 	ands.w	r4, r1, #1
 23fa2e6:	d111      	bne.n	23fa30c <_Z19__fetch_global_Wirev+0x34>
 23fa2e8:	4628      	mov	r0, r5
 23fa2ea:	f7fd ffcf 	bl	23f828c <__cxa_guard_acquire>
 23fa2ee:	b168      	cbz	r0, 23fa30c <_Z19__fetch_global_Wirev+0x34>
 23fa2f0:	4668      	mov	r0, sp
 23fa2f2:	f7ff ffd5 	bl	23fa2a0 <_Z17acquireWireBufferv>
 23fa2f6:	466a      	mov	r2, sp
 23fa2f8:	4621      	mov	r1, r4
 23fa2fa:	4807      	ldr	r0, [pc, #28]	; (23fa318 <_Z19__fetch_global_Wirev+0x40>)
 23fa2fc:	f7fe fd90 	bl	23f8e20 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23fa300:	4628      	mov	r0, r5
 23fa302:	f7fd ffd1 	bl	23f82a8 <__cxa_guard_release>
 23fa306:	4805      	ldr	r0, [pc, #20]	; (23fa31c <_Z19__fetch_global_Wirev+0x44>)
 23fa308:	f002 fd52 	bl	23fcdb0 <atexit>
	return wire;
}
 23fa30c:	4802      	ldr	r0, [pc, #8]	; (23fa318 <_Z19__fetch_global_Wirev+0x40>)
 23fa30e:	b007      	add	sp, #28
 23fa310:	bd30      	pop	{r4, r5, pc}
 23fa312:	bf00      	nop
 23fa314:	1007afb4 	.word	0x1007afb4
 23fa318:	1007afb8 	.word	0x1007afb8
 23fa31c:	023fa29d 	.word	0x023fa29d

023fa320 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fa320:	4770      	bx	lr

023fa322 <__tcf_1>:
 23fa322:	4770      	bx	lr

023fa324 <_Z20acquireSerial1Bufferv>:
{
 23fa324:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23fa326:	2514      	movs	r5, #20
{
 23fa328:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23fa32a:	462a      	mov	r2, r5
 23fa32c:	2100      	movs	r1, #0
 23fa32e:	f002 fd6e 	bl	23fce0e <memset>
 23fa332:	8025      	strh	r5, [r4, #0]
 23fa334:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fa336:	4907      	ldr	r1, [pc, #28]	; (23fa354 <_Z20acquireSerial1Bufferv+0x30>)
 23fa338:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fa33a:	8125      	strh	r5, [r4, #8]
 23fa33c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fa33e:	f000 f87f 	bl	23fa440 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fa342:	4904      	ldr	r1, [pc, #16]	; (23fa354 <_Z20acquireSerial1Bufferv+0x30>)
    };
 23fa344:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fa346:	4628      	mov	r0, r5
 23fa348:	f000 f87a 	bl	23fa440 <_ZnajRKSt9nothrow_t>
    };
 23fa34c:	60e0      	str	r0, [r4, #12]
}
 23fa34e:	4620      	mov	r0, r4
 23fa350:	bd38      	pop	{r3, r4, r5, pc}
 23fa352:	bf00      	nop
 23fa354:	023ffbe4 	.word	0x023ffbe4

023fa358 <_Z20acquireSerial2Bufferv>:
 23fa358:	b538      	push	{r3, r4, r5, lr}
 23fa35a:	2514      	movs	r5, #20
 23fa35c:	4604      	mov	r4, r0
 23fa35e:	462a      	mov	r2, r5
 23fa360:	2100      	movs	r1, #0
 23fa362:	f002 fd54 	bl	23fce0e <memset>
 23fa366:	8025      	strh	r5, [r4, #0]
 23fa368:	2540      	movs	r5, #64	; 0x40
 23fa36a:	4907      	ldr	r1, [pc, #28]	; (23fa388 <_Z20acquireSerial2Bufferv+0x30>)
 23fa36c:	4628      	mov	r0, r5
 23fa36e:	8125      	strh	r5, [r4, #8]
 23fa370:	8225      	strh	r5, [r4, #16]
 23fa372:	f000 f865 	bl	23fa440 <_ZnajRKSt9nothrow_t>
 23fa376:	4904      	ldr	r1, [pc, #16]	; (23fa388 <_Z20acquireSerial2Bufferv+0x30>)
 23fa378:	6060      	str	r0, [r4, #4]
 23fa37a:	4628      	mov	r0, r5
 23fa37c:	f000 f860 	bl	23fa440 <_ZnajRKSt9nothrow_t>
 23fa380:	60e0      	str	r0, [r4, #12]
 23fa382:	4620      	mov	r0, r4
 23fa384:	bd38      	pop	{r3, r4, r5, pc}
 23fa386:	bf00      	nop
 23fa388:	023ffbe4 	.word	0x023ffbe4

023fa38c <_Z22__fetch_global_Serial1v>:
{
 23fa38c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fa38e:	4d0e      	ldr	r5, [pc, #56]	; (23fa3c8 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23fa390:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fa392:	e8d5 1f8f 	ldab	r1, [r5]
 23fa396:	f011 0401 	ands.w	r4, r1, #1
 23fa39a:	d111      	bne.n	23fa3c0 <_Z22__fetch_global_Serial1v+0x34>
 23fa39c:	4628      	mov	r0, r5
 23fa39e:	f7fd ff75 	bl	23f828c <__cxa_guard_acquire>
 23fa3a2:	b168      	cbz	r0, 23fa3c0 <_Z22__fetch_global_Serial1v+0x34>
 23fa3a4:	a801      	add	r0, sp, #4
 23fa3a6:	f7ff ffbd 	bl	23fa324 <_Z20acquireSerial1Bufferv>
 23fa3aa:	4621      	mov	r1, r4
 23fa3ac:	aa01      	add	r2, sp, #4
 23fa3ae:	4807      	ldr	r0, [pc, #28]	; (23fa3cc <_Z22__fetch_global_Serial1v+0x40>)
 23fa3b0:	f7ff fd28 	bl	23f9e04 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fa3b4:	4628      	mov	r0, r5
 23fa3b6:	f7fd ff77 	bl	23f82a8 <__cxa_guard_release>
 23fa3ba:	4805      	ldr	r0, [pc, #20]	; (23fa3d0 <_Z22__fetch_global_Serial1v+0x44>)
 23fa3bc:	f002 fcf8 	bl	23fcdb0 <atexit>
    return serial1;
}
 23fa3c0:	4802      	ldr	r0, [pc, #8]	; (23fa3cc <_Z22__fetch_global_Serial1v+0x40>)
 23fa3c2:	b007      	add	sp, #28
 23fa3c4:	bd30      	pop	{r4, r5, pc}
 23fa3c6:	bf00      	nop
 23fa3c8:	1007afcc 	.word	0x1007afcc
 23fa3cc:	1007afd4 	.word	0x1007afd4
 23fa3d0:	023fa321 	.word	0x023fa321

023fa3d4 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23fa3d4:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fa3d6:	4c0d      	ldr	r4, [pc, #52]	; (23fa40c <_Z22__fetch_global_Serial2v+0x38>)
{
 23fa3d8:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fa3da:	e8d4 3f8f 	ldab	r3, [r4]
 23fa3de:	07db      	lsls	r3, r3, #31
 23fa3e0:	d411      	bmi.n	23fa406 <_Z22__fetch_global_Serial2v+0x32>
 23fa3e2:	4620      	mov	r0, r4
 23fa3e4:	f7fd ff52 	bl	23f828c <__cxa_guard_acquire>
 23fa3e8:	b168      	cbz	r0, 23fa406 <_Z22__fetch_global_Serial2v+0x32>
 23fa3ea:	a801      	add	r0, sp, #4
 23fa3ec:	f7ff ffb4 	bl	23fa358 <_Z20acquireSerial2Bufferv>
 23fa3f0:	2101      	movs	r1, #1
 23fa3f2:	aa01      	add	r2, sp, #4
 23fa3f4:	4806      	ldr	r0, [pc, #24]	; (23fa410 <_Z22__fetch_global_Serial2v+0x3c>)
 23fa3f6:	f7ff fd05 	bl	23f9e04 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fa3fa:	4620      	mov	r0, r4
 23fa3fc:	f7fd ff54 	bl	23f82a8 <__cxa_guard_release>
 23fa400:	4804      	ldr	r0, [pc, #16]	; (23fa414 <_Z22__fetch_global_Serial2v+0x40>)
 23fa402:	f002 fcd5 	bl	23fcdb0 <atexit>
	return serial2;
}
 23fa406:	4802      	ldr	r0, [pc, #8]	; (23fa410 <_Z22__fetch_global_Serial2v+0x3c>)
 23fa408:	b006      	add	sp, #24
 23fa40a:	bd10      	pop	{r4, pc}
 23fa40c:	1007afd0 	.word	0x1007afd0
 23fa410:	1007afe8 	.word	0x1007afe8
 23fa414:	023fa323 	.word	0x023fa323

023fa418 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23fa418:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23fa41a:	f7ff ffdb 	bl	23fa3d4 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23fa41e:	4b07      	ldr	r3, [pc, #28]	; (23fa43c <_Z15serialEventRun2v+0x24>)
 23fa420:	4604      	mov	r4, r0
 23fa422:	b153      	cbz	r3, 23fa43a <_Z15serialEventRun2v+0x22>
 23fa424:	f7ff fd02 	bl	23f9e2c <_ZN11USARTSerial9isEnabledEv>
 23fa428:	b138      	cbz	r0, 23fa43a <_Z15serialEventRun2v+0x22>
 23fa42a:	6823      	ldr	r3, [r4, #0]
 23fa42c:	4620      	mov	r0, r4
 23fa42e:	691b      	ldr	r3, [r3, #16]
 23fa430:	4798      	blx	r3
 23fa432:	2800      	cmp	r0, #0
 23fa434:	dd01      	ble.n	23fa43a <_Z15serialEventRun2v+0x22>
        handler();
 23fa436:	e000      	b.n	23fa43a <_Z15serialEventRun2v+0x22>
 23fa438:	bf00      	nop
}
 23fa43a:	bd10      	pop	{r4, pc}
 23fa43c:	00000000 	.word	0x00000000

023fa440 <_ZnajRKSt9nothrow_t>:
 23fa440:	f7eb be01 	b.w	23e6046 <_Znaj>

023fa444 <_ZSt25__throw_bad_function_callv>:
 23fa444:	b508      	push	{r3, lr}
 23fa446:	f7fd fecd 	bl	23f81e4 <abort>
 23fa44a:	0000      	movs	r0, r0
 23fa44c:	0000      	movs	r0, r0
	...

023fa450 <atan>:
 23fa450:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa454:	ec55 4b10 	vmov	r4, r5, d0
 23fa458:	4bc7      	ldr	r3, [pc, #796]	; (23fa778 <atan+0x328>)
 23fa45a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 23fa45e:	46aa      	mov	sl, r5
 23fa460:	429e      	cmp	r6, r3
 23fa462:	dd16      	ble.n	23fa492 <atan+0x42>
 23fa464:	4bc5      	ldr	r3, [pc, #788]	; (23fa77c <atan+0x32c>)
 23fa466:	429e      	cmp	r6, r3
 23fa468:	dc01      	bgt.n	23fa46e <atan+0x1e>
 23fa46a:	d10a      	bne.n	23fa482 <atan+0x32>
 23fa46c:	b14c      	cbz	r4, 23fa482 <atan+0x32>
 23fa46e:	4622      	mov	r2, r4
 23fa470:	462b      	mov	r3, r5
 23fa472:	4620      	mov	r0, r4
 23fa474:	4629      	mov	r1, r5
 23fa476:	f7ea fdc9 	bl	23e500c <__adddf3>
 23fa47a:	ec41 0b10 	vmov	d0, r0, r1
 23fa47e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa482:	f1ba 0f00 	cmp.w	sl, #0
 23fa486:	f340 80bf 	ble.w	23fa608 <atan+0x1b8>
 23fa48a:	ed9f 0b9f 	vldr	d0, [pc, #636]	; 23fa708 <atan+0x2b8>
 23fa48e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa492:	4bbb      	ldr	r3, [pc, #748]	; (23fa780 <atan+0x330>)
 23fa494:	429e      	cmp	r6, r3
 23fa496:	f300 80ba 	bgt.w	23fa60e <atan+0x1be>
 23fa49a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 23fa49e:	429e      	cmp	r6, r3
 23fa4a0:	f340 80a0 	ble.w	23fa5e4 <atan+0x194>
 23fa4a4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 23fa4a8:	4622      	mov	r2, r4
 23fa4aa:	462b      	mov	r3, r5
 23fa4ac:	4620      	mov	r0, r4
 23fa4ae:	4629      	mov	r1, r5
 23fa4b0:	f7ea ff62 	bl	23e5378 <__aeabi_dmul>
 23fa4b4:	4602      	mov	r2, r0
 23fa4b6:	460b      	mov	r3, r1
 23fa4b8:	4680      	mov	r8, r0
 23fa4ba:	4689      	mov	r9, r1
 23fa4bc:	f7ea ff5c 	bl	23e5378 <__aeabi_dmul>
 23fa4c0:	4606      	mov	r6, r0
 23fa4c2:	460f      	mov	r7, r1
 23fa4c4:	a392      	add	r3, pc, #584	; (adr r3, 23fa710 <atan+0x2c0>)
 23fa4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa4ca:	f7ea ff55 	bl	23e5378 <__aeabi_dmul>
 23fa4ce:	a392      	add	r3, pc, #584	; (adr r3, 23fa718 <atan+0x2c8>)
 23fa4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa4d4:	f7ea fd9a 	bl	23e500c <__adddf3>
 23fa4d8:	4632      	mov	r2, r6
 23fa4da:	463b      	mov	r3, r7
 23fa4dc:	f7ea ff4c 	bl	23e5378 <__aeabi_dmul>
 23fa4e0:	a38f      	add	r3, pc, #572	; (adr r3, 23fa720 <atan+0x2d0>)
 23fa4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa4e6:	f7ea fd91 	bl	23e500c <__adddf3>
 23fa4ea:	4632      	mov	r2, r6
 23fa4ec:	463b      	mov	r3, r7
 23fa4ee:	f7ea ff43 	bl	23e5378 <__aeabi_dmul>
 23fa4f2:	a38d      	add	r3, pc, #564	; (adr r3, 23fa728 <atan+0x2d8>)
 23fa4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa4f8:	f7ea fd88 	bl	23e500c <__adddf3>
 23fa4fc:	4632      	mov	r2, r6
 23fa4fe:	463b      	mov	r3, r7
 23fa500:	f7ea ff3a 	bl	23e5378 <__aeabi_dmul>
 23fa504:	a38a      	add	r3, pc, #552	; (adr r3, 23fa730 <atan+0x2e0>)
 23fa506:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa50a:	f7ea fd7f 	bl	23e500c <__adddf3>
 23fa50e:	4632      	mov	r2, r6
 23fa510:	463b      	mov	r3, r7
 23fa512:	f7ea ff31 	bl	23e5378 <__aeabi_dmul>
 23fa516:	a388      	add	r3, pc, #544	; (adr r3, 23fa738 <atan+0x2e8>)
 23fa518:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa51c:	f7ea fd76 	bl	23e500c <__adddf3>
 23fa520:	4642      	mov	r2, r8
 23fa522:	464b      	mov	r3, r9
 23fa524:	f7ea ff28 	bl	23e5378 <__aeabi_dmul>
 23fa528:	4680      	mov	r8, r0
 23fa52a:	4689      	mov	r9, r1
 23fa52c:	4630      	mov	r0, r6
 23fa52e:	4639      	mov	r1, r7
 23fa530:	a383      	add	r3, pc, #524	; (adr r3, 23fa740 <atan+0x2f0>)
 23fa532:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa536:	f7ea ff1f 	bl	23e5378 <__aeabi_dmul>
 23fa53a:	a383      	add	r3, pc, #524	; (adr r3, 23fa748 <atan+0x2f8>)
 23fa53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa540:	f7ea fd62 	bl	23e5008 <__aeabi_dsub>
 23fa544:	4632      	mov	r2, r6
 23fa546:	463b      	mov	r3, r7
 23fa548:	f7ea ff16 	bl	23e5378 <__aeabi_dmul>
 23fa54c:	a380      	add	r3, pc, #512	; (adr r3, 23fa750 <atan+0x300>)
 23fa54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa552:	f7ea fd59 	bl	23e5008 <__aeabi_dsub>
 23fa556:	4632      	mov	r2, r6
 23fa558:	463b      	mov	r3, r7
 23fa55a:	f7ea ff0d 	bl	23e5378 <__aeabi_dmul>
 23fa55e:	a37e      	add	r3, pc, #504	; (adr r3, 23fa758 <atan+0x308>)
 23fa560:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa564:	f7ea fd50 	bl	23e5008 <__aeabi_dsub>
 23fa568:	4632      	mov	r2, r6
 23fa56a:	463b      	mov	r3, r7
 23fa56c:	f7ea ff04 	bl	23e5378 <__aeabi_dmul>
 23fa570:	a37b      	add	r3, pc, #492	; (adr r3, 23fa760 <atan+0x310>)
 23fa572:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa576:	f7ea fd47 	bl	23e5008 <__aeabi_dsub>
 23fa57a:	4632      	mov	r2, r6
 23fa57c:	463b      	mov	r3, r7
 23fa57e:	f7ea fefb 	bl	23e5378 <__aeabi_dmul>
 23fa582:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 23fa586:	4602      	mov	r2, r0
 23fa588:	460b      	mov	r3, r1
 23fa58a:	4640      	mov	r0, r8
 23fa58c:	4649      	mov	r1, r9
 23fa58e:	d063      	beq.n	23fa658 <atan+0x208>
 23fa590:	4e7c      	ldr	r6, [pc, #496]	; (23fa784 <atan+0x334>)
 23fa592:	f7ea fd3b 	bl	23e500c <__adddf3>
 23fa596:	4622      	mov	r2, r4
 23fa598:	462b      	mov	r3, r5
 23fa59a:	f7ea feed 	bl	23e5378 <__aeabi_dmul>
 23fa59e:	4b7a      	ldr	r3, [pc, #488]	; (23fa788 <atan+0x338>)
 23fa5a0:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
 23fa5a4:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 23fa5a8:	449b      	add	fp, r3
 23fa5aa:	e9db 2300 	ldrd	r2, r3, [fp]
 23fa5ae:	f7ea fd2b 	bl	23e5008 <__aeabi_dsub>
 23fa5b2:	4622      	mov	r2, r4
 23fa5b4:	462b      	mov	r3, r5
 23fa5b6:	f7ea fd27 	bl	23e5008 <__aeabi_dsub>
 23fa5ba:	4602      	mov	r2, r0
 23fa5bc:	460b      	mov	r3, r1
 23fa5be:	e9d6 0100 	ldrd	r0, r1, [r6]
 23fa5c2:	f7ea fd21 	bl	23e5008 <__aeabi_dsub>
 23fa5c6:	f1ba 0f00 	cmp.w	sl, #0
 23fa5ca:	ec41 0b10 	vmov	d0, r0, r1
 23fa5ce:	f6bf af56 	bge.w	23fa47e <atan+0x2e>
 23fa5d2:	ee10 1a90 	vmov	r1, s1
 23fa5d6:	4602      	mov	r2, r0
 23fa5d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fa5dc:	ec43 2b10 	vmov	d0, r2, r3
 23fa5e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa5e4:	a360      	add	r3, pc, #384	; (adr r3, 23fa768 <atan+0x318>)
 23fa5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa5ea:	ee10 0a10 	vmov	r0, s0
 23fa5ee:	4629      	mov	r1, r5
 23fa5f0:	f7ea fd0c 	bl	23e500c <__adddf3>
 23fa5f4:	2200      	movs	r2, #0
 23fa5f6:	4b65      	ldr	r3, [pc, #404]	; (23fa78c <atan+0x33c>)
 23fa5f8:	f7eb f94e 	bl	23e5898 <__aeabi_dcmpgt>
 23fa5fc:	2800      	cmp	r0, #0
 23fa5fe:	f43f af51 	beq.w	23fa4a4 <atan+0x54>
 23fa602:	ec45 4b10 	vmov	d0, r4, r5
 23fa606:	e73a      	b.n	23fa47e <atan+0x2e>
 23fa608:	ed9f 0b59 	vldr	d0, [pc, #356]	; 23fa770 <atan+0x320>
 23fa60c:	e737      	b.n	23fa47e <atan+0x2e>
 23fa60e:	f000 f91b 	bl	23fa848 <fabs>
 23fa612:	4b5f      	ldr	r3, [pc, #380]	; (23fa790 <atan+0x340>)
 23fa614:	429e      	cmp	r6, r3
 23fa616:	ec55 4b10 	vmov	r4, r5, d0
 23fa61a:	dc2d      	bgt.n	23fa678 <atan+0x228>
 23fa61c:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 23fa620:	429e      	cmp	r6, r3
 23fa622:	dd58      	ble.n	23fa6d6 <atan+0x286>
 23fa624:	2200      	movs	r2, #0
 23fa626:	4b59      	ldr	r3, [pc, #356]	; (23fa78c <atan+0x33c>)
 23fa628:	ee10 0a10 	vmov	r0, s0
 23fa62c:	4629      	mov	r1, r5
 23fa62e:	f7ea fceb 	bl	23e5008 <__aeabi_dsub>
 23fa632:	f04f 0b01 	mov.w	fp, #1
 23fa636:	4606      	mov	r6, r0
 23fa638:	460f      	mov	r7, r1
 23fa63a:	4620      	mov	r0, r4
 23fa63c:	4629      	mov	r1, r5
 23fa63e:	2200      	movs	r2, #0
 23fa640:	4b52      	ldr	r3, [pc, #328]	; (23fa78c <atan+0x33c>)
 23fa642:	f7ea fce3 	bl	23e500c <__adddf3>
 23fa646:	4602      	mov	r2, r0
 23fa648:	460b      	mov	r3, r1
 23fa64a:	4630      	mov	r0, r6
 23fa64c:	4639      	mov	r1, r7
 23fa64e:	f7ea ffbd 	bl	23e55cc <__aeabi_ddiv>
 23fa652:	4604      	mov	r4, r0
 23fa654:	460d      	mov	r5, r1
 23fa656:	e727      	b.n	23fa4a8 <atan+0x58>
 23fa658:	f7ea fcd8 	bl	23e500c <__adddf3>
 23fa65c:	4622      	mov	r2, r4
 23fa65e:	462b      	mov	r3, r5
 23fa660:	f7ea fe8a 	bl	23e5378 <__aeabi_dmul>
 23fa664:	4602      	mov	r2, r0
 23fa666:	460b      	mov	r3, r1
 23fa668:	4620      	mov	r0, r4
 23fa66a:	4629      	mov	r1, r5
 23fa66c:	f7ea fccc 	bl	23e5008 <__aeabi_dsub>
 23fa670:	ec41 0b10 	vmov	d0, r0, r1
 23fa674:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa678:	4b46      	ldr	r3, [pc, #280]	; (23fa794 <atan+0x344>)
 23fa67a:	429e      	cmp	r6, r3
 23fa67c:	da1f      	bge.n	23fa6be <atan+0x26e>
 23fa67e:	ee10 0a10 	vmov	r0, s0
 23fa682:	2200      	movs	r2, #0
 23fa684:	4b44      	ldr	r3, [pc, #272]	; (23fa798 <atan+0x348>)
 23fa686:	4629      	mov	r1, r5
 23fa688:	f7ea fcbe 	bl	23e5008 <__aeabi_dsub>
 23fa68c:	4602      	mov	r2, r0
 23fa68e:	460b      	mov	r3, r1
 23fa690:	4620      	mov	r0, r4
 23fa692:	4629      	mov	r1, r5
 23fa694:	4614      	mov	r4, r2
 23fa696:	461d      	mov	r5, r3
 23fa698:	2200      	movs	r2, #0
 23fa69a:	4b3f      	ldr	r3, [pc, #252]	; (23fa798 <atan+0x348>)
 23fa69c:	f04f 0b02 	mov.w	fp, #2
 23fa6a0:	f7ea fe6a 	bl	23e5378 <__aeabi_dmul>
 23fa6a4:	2200      	movs	r2, #0
 23fa6a6:	4b39      	ldr	r3, [pc, #228]	; (23fa78c <atan+0x33c>)
 23fa6a8:	f7ea fcb0 	bl	23e500c <__adddf3>
 23fa6ac:	4602      	mov	r2, r0
 23fa6ae:	460b      	mov	r3, r1
 23fa6b0:	4620      	mov	r0, r4
 23fa6b2:	4629      	mov	r1, r5
 23fa6b4:	f7ea ff8a 	bl	23e55cc <__aeabi_ddiv>
 23fa6b8:	4604      	mov	r4, r0
 23fa6ba:	460d      	mov	r5, r1
 23fa6bc:	e6f4      	b.n	23fa4a8 <atan+0x58>
 23fa6be:	462b      	mov	r3, r5
 23fa6c0:	2000      	movs	r0, #0
 23fa6c2:	4936      	ldr	r1, [pc, #216]	; (23fa79c <atan+0x34c>)
 23fa6c4:	ee10 2a10 	vmov	r2, s0
 23fa6c8:	f7ea ff80 	bl	23e55cc <__aeabi_ddiv>
 23fa6cc:	f04f 0b03 	mov.w	fp, #3
 23fa6d0:	4604      	mov	r4, r0
 23fa6d2:	460d      	mov	r5, r1
 23fa6d4:	e6e8      	b.n	23fa4a8 <atan+0x58>
 23fa6d6:	ee10 2a10 	vmov	r2, s0
 23fa6da:	462b      	mov	r3, r5
 23fa6dc:	ee10 0a10 	vmov	r0, s0
 23fa6e0:	4629      	mov	r1, r5
 23fa6e2:	f7ea fc93 	bl	23e500c <__adddf3>
 23fa6e6:	2200      	movs	r2, #0
 23fa6e8:	4b28      	ldr	r3, [pc, #160]	; (23fa78c <atan+0x33c>)
 23fa6ea:	f04f 0b00 	mov.w	fp, #0
 23fa6ee:	f7ea fc8b 	bl	23e5008 <__aeabi_dsub>
 23fa6f2:	2200      	movs	r2, #0
 23fa6f4:	4606      	mov	r6, r0
 23fa6f6:	460f      	mov	r7, r1
 23fa6f8:	4620      	mov	r0, r4
 23fa6fa:	4629      	mov	r1, r5
 23fa6fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 23fa700:	e79f      	b.n	23fa642 <atan+0x1f2>
 23fa702:	bf00      	nop
 23fa704:	f3af 8000 	nop.w
 23fa708:	54442d18 	.word	0x54442d18
 23fa70c:	3ff921fb 	.word	0x3ff921fb
 23fa710:	e322da11 	.word	0xe322da11
 23fa714:	3f90ad3a 	.word	0x3f90ad3a
 23fa718:	24760deb 	.word	0x24760deb
 23fa71c:	3fa97b4b 	.word	0x3fa97b4b
 23fa720:	a0d03d51 	.word	0xa0d03d51
 23fa724:	3fb10d66 	.word	0x3fb10d66
 23fa728:	c54c206e 	.word	0xc54c206e
 23fa72c:	3fb745cd 	.word	0x3fb745cd
 23fa730:	920083ff 	.word	0x920083ff
 23fa734:	3fc24924 	.word	0x3fc24924
 23fa738:	5555550d 	.word	0x5555550d
 23fa73c:	3fd55555 	.word	0x3fd55555
 23fa740:	2c6a6c2f 	.word	0x2c6a6c2f
 23fa744:	bfa2b444 	.word	0xbfa2b444
 23fa748:	52defd9a 	.word	0x52defd9a
 23fa74c:	3fadde2d 	.word	0x3fadde2d
 23fa750:	af749a6d 	.word	0xaf749a6d
 23fa754:	3fb3b0f2 	.word	0x3fb3b0f2
 23fa758:	fe231671 	.word	0xfe231671
 23fa75c:	3fbc71c6 	.word	0x3fbc71c6
 23fa760:	9998ebc4 	.word	0x9998ebc4
 23fa764:	3fc99999 	.word	0x3fc99999
 23fa768:	8800759c 	.word	0x8800759c
 23fa76c:	7e37e43c 	.word	0x7e37e43c
 23fa770:	54442d18 	.word	0x54442d18
 23fa774:	bff921fb 	.word	0xbff921fb
 23fa778:	440fffff 	.word	0x440fffff
 23fa77c:	7ff00000 	.word	0x7ff00000
 23fa780:	3fdbffff 	.word	0x3fdbffff
 23fa784:	023ffbe8 	.word	0x023ffbe8
 23fa788:	023ffc08 	.word	0x023ffc08
 23fa78c:	3ff00000 	.word	0x3ff00000
 23fa790:	3ff2ffff 	.word	0x3ff2ffff
 23fa794:	40038000 	.word	0x40038000
 23fa798:	3ff80000 	.word	0x3ff80000
 23fa79c:	bff00000 	.word	0xbff00000

023fa7a0 <cos>:
 23fa7a0:	ec51 0b10 	vmov	r0, r1, d0
 23fa7a4:	4a26      	ldr	r2, [pc, #152]	; (23fa840 <cos+0xa0>)
 23fa7a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23fa7aa:	4293      	cmp	r3, r2
 23fa7ac:	dd20      	ble.n	23fa7f0 <cos+0x50>
 23fa7ae:	4a25      	ldr	r2, [pc, #148]	; (23fa844 <cos+0xa4>)
 23fa7b0:	4293      	cmp	r3, r2
 23fa7b2:	b500      	push	{lr}
 23fa7b4:	b085      	sub	sp, #20
 23fa7b6:	dd09      	ble.n	23fa7cc <cos+0x2c>
 23fa7b8:	ee10 2a10 	vmov	r2, s0
 23fa7bc:	460b      	mov	r3, r1
 23fa7be:	f7ea fc23 	bl	23e5008 <__aeabi_dsub>
 23fa7c2:	ec41 0b10 	vmov	d0, r0, r1
 23fa7c6:	b005      	add	sp, #20
 23fa7c8:	f85d fb04 	ldr.w	pc, [sp], #4
 23fa7cc:	4668      	mov	r0, sp
 23fa7ce:	f001 f8a7 	bl	23fb920 <__ieee754_rem_pio2>
 23fa7d2:	f000 0003 	and.w	r0, r0, #3
 23fa7d6:	2801      	cmp	r0, #1
 23fa7d8:	d00e      	beq.n	23fa7f8 <cos+0x58>
 23fa7da:	2802      	cmp	r0, #2
 23fa7dc:	d022      	beq.n	23fa824 <cos+0x84>
 23fa7de:	b1d0      	cbz	r0, 23fa816 <cos+0x76>
 23fa7e0:	2001      	movs	r0, #1
 23fa7e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 23fa7e6:	ed9d 0b00 	vldr	d0, [sp]
 23fa7ea:	f002 f8e5 	bl	23fc9b8 <__kernel_sin>
 23fa7ee:	e7ea      	b.n	23fa7c6 <cos+0x26>
 23fa7f0:	ed9f 1b11 	vldr	d1, [pc, #68]	; 23fa838 <cos+0x98>
 23fa7f4:	f001 bb7c 	b.w	23fbef0 <__kernel_cos>
 23fa7f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 23fa7fc:	ed9d 0b00 	vldr	d0, [sp]
 23fa800:	f002 f8da 	bl	23fc9b8 <__kernel_sin>
 23fa804:	ec53 2b10 	vmov	r2, r3, d0
 23fa808:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 23fa80c:	ee00 3a90 	vmov	s1, r3
 23fa810:	b005      	add	sp, #20
 23fa812:	f85d fb04 	ldr.w	pc, [sp], #4
 23fa816:	ed9d 1b02 	vldr	d1, [sp, #8]
 23fa81a:	ed9d 0b00 	vldr	d0, [sp]
 23fa81e:	f001 fb67 	bl	23fbef0 <__kernel_cos>
 23fa822:	e7d0      	b.n	23fa7c6 <cos+0x26>
 23fa824:	ed9d 1b02 	vldr	d1, [sp, #8]
 23fa828:	ed9d 0b00 	vldr	d0, [sp]
 23fa82c:	f001 fb60 	bl	23fbef0 <__kernel_cos>
 23fa830:	e7e8      	b.n	23fa804 <cos+0x64>
 23fa832:	bf00      	nop
 23fa834:	f3af 8000 	nop.w
	...
 23fa840:	3fe921fb 	.word	0x3fe921fb
 23fa844:	7fefffff 	.word	0x7fefffff

023fa848 <fabs>:
 23fa848:	ec51 0b10 	vmov	r0, r1, d0
 23fa84c:	ee10 2a10 	vmov	r2, s0
 23fa850:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23fa854:	ec43 2b10 	vmov	d0, r2, r3
 23fa858:	4770      	bx	lr
 23fa85a:	bf00      	nop
 23fa85c:	0000      	movs	r0, r0
	...

023fa860 <scalbn>:
 23fa860:	b538      	push	{r3, r4, r5, lr}
 23fa862:	ec53 2b10 	vmov	r2, r3, d0
 23fa866:	f3c3 510a 	ubfx	r1, r3, #20, #11
 23fa86a:	469c      	mov	ip, r3
 23fa86c:	4604      	mov	r4, r0
 23fa86e:	bb89      	cbnz	r1, 23fa8d4 <scalbn+0x74>
 23fa870:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 23fa874:	ee10 1a10 	vmov	r1, s0
 23fa878:	ea5c 0101 	orrs.w	r1, ip, r1
 23fa87c:	d029      	beq.n	23fa8d2 <scalbn+0x72>
 23fa87e:	4d3e      	ldr	r5, [pc, #248]	; (23fa978 <scalbn+0x118>)
 23fa880:	4619      	mov	r1, r3
 23fa882:	2200      	movs	r2, #0
 23fa884:	4b3d      	ldr	r3, [pc, #244]	; (23fa97c <scalbn+0x11c>)
 23fa886:	ee10 0a10 	vmov	r0, s0
 23fa88a:	f7ea fd75 	bl	23e5378 <__aeabi_dmul>
 23fa88e:	42ac      	cmp	r4, r5
 23fa890:	4602      	mov	r2, r0
 23fa892:	460b      	mov	r3, r1
 23fa894:	db16      	blt.n	23fa8c4 <scalbn+0x64>
 23fa896:	468c      	mov	ip, r1
 23fa898:	f3c1 510a 	ubfx	r1, r1, #20, #11
 23fa89c:	3936      	subs	r1, #54	; 0x36
 23fa89e:	4421      	add	r1, r4
 23fa8a0:	f240 70fe 	movw	r0, #2046	; 0x7fe
 23fa8a4:	4281      	cmp	r1, r0
 23fa8a6:	dc21      	bgt.n	23fa8ec <scalbn+0x8c>
 23fa8a8:	2900      	cmp	r1, #0
 23fa8aa:	dc47      	bgt.n	23fa93c <scalbn+0xdc>
 23fa8ac:	f111 0f35 	cmn.w	r1, #53	; 0x35
 23fa8b0:	da34      	bge.n	23fa91c <scalbn+0xbc>
 23fa8b2:	f24c 3150 	movw	r1, #50000	; 0xc350
 23fa8b6:	428c      	cmp	r4, r1
 23fa8b8:	dc18      	bgt.n	23fa8ec <scalbn+0x8c>
 23fa8ba:	2b00      	cmp	r3, #0
 23fa8bc:	a126      	add	r1, pc, #152	; (adr r1, 23fa958 <scalbn+0xf8>)
 23fa8be:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fa8c2:	db43      	blt.n	23fa94c <scalbn+0xec>
 23fa8c4:	a324      	add	r3, pc, #144	; (adr r3, 23fa958 <scalbn+0xf8>)
 23fa8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa8ca:	f7ea fd55 	bl	23e5378 <__aeabi_dmul>
 23fa8ce:	ec41 0b10 	vmov	d0, r0, r1
 23fa8d2:	bd38      	pop	{r3, r4, r5, pc}
 23fa8d4:	f240 7eff 	movw	lr, #2047	; 0x7ff
 23fa8d8:	4571      	cmp	r1, lr
 23fa8da:	d1e0      	bne.n	23fa89e <scalbn+0x3e>
 23fa8dc:	ee10 0a10 	vmov	r0, s0
 23fa8e0:	4619      	mov	r1, r3
 23fa8e2:	f7ea fb93 	bl	23e500c <__adddf3>
 23fa8e6:	ec41 0b10 	vmov	d0, r0, r1
 23fa8ea:	bd38      	pop	{r3, r4, r5, pc}
 23fa8ec:	2b00      	cmp	r3, #0
 23fa8ee:	a11c      	add	r1, pc, #112	; (adr r1, 23fa960 <scalbn+0x100>)
 23fa8f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fa8f4:	db07      	blt.n	23fa906 <scalbn+0xa6>
 23fa8f6:	a31a      	add	r3, pc, #104	; (adr r3, 23fa960 <scalbn+0x100>)
 23fa8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa8fc:	f7ea fd3c 	bl	23e5378 <__aeabi_dmul>
 23fa900:	ec41 0b10 	vmov	d0, r0, r1
 23fa904:	bd38      	pop	{r3, r4, r5, pc}
 23fa906:	a118      	add	r1, pc, #96	; (adr r1, 23fa968 <scalbn+0x108>)
 23fa908:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fa90c:	a314      	add	r3, pc, #80	; (adr r3, 23fa960 <scalbn+0x100>)
 23fa90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa912:	f7ea fd31 	bl	23e5378 <__aeabi_dmul>
 23fa916:	ec41 0b10 	vmov	d0, r0, r1
 23fa91a:	e7f3      	b.n	23fa904 <scalbn+0xa4>
 23fa91c:	4818      	ldr	r0, [pc, #96]	; (23fa980 <scalbn+0x120>)
 23fa91e:	3136      	adds	r1, #54	; 0x36
 23fa920:	4614      	mov	r4, r2
 23fa922:	4b18      	ldr	r3, [pc, #96]	; (23fa984 <scalbn+0x124>)
 23fa924:	ea0c 0000 	and.w	r0, ip, r0
 23fa928:	2200      	movs	r2, #0
 23fa92a:	ea40 5501 	orr.w	r5, r0, r1, lsl #20
 23fa92e:	4620      	mov	r0, r4
 23fa930:	4629      	mov	r1, r5
 23fa932:	f7ea fd21 	bl	23e5378 <__aeabi_dmul>
 23fa936:	ec41 0b10 	vmov	d0, r0, r1
 23fa93a:	bd38      	pop	{r3, r4, r5, pc}
 23fa93c:	4810      	ldr	r0, [pc, #64]	; (23fa980 <scalbn+0x120>)
 23fa93e:	ea0c 0000 	and.w	r0, ip, r0
 23fa942:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
 23fa946:	ec43 2b10 	vmov	d0, r2, r3
 23fa94a:	bd38      	pop	{r3, r4, r5, pc}
 23fa94c:	a108      	add	r1, pc, #32	; (adr r1, 23fa970 <scalbn+0x110>)
 23fa94e:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fa952:	e7b7      	b.n	23fa8c4 <scalbn+0x64>
 23fa954:	f3af 8000 	nop.w
 23fa958:	c2f8f359 	.word	0xc2f8f359
 23fa95c:	01a56e1f 	.word	0x01a56e1f
 23fa960:	8800759c 	.word	0x8800759c
 23fa964:	7e37e43c 	.word	0x7e37e43c
 23fa968:	8800759c 	.word	0x8800759c
 23fa96c:	fe37e43c 	.word	0xfe37e43c
 23fa970:	c2f8f359 	.word	0xc2f8f359
 23fa974:	81a56e1f 	.word	0x81a56e1f
 23fa978:	ffff3cb0 	.word	0xffff3cb0
 23fa97c:	43500000 	.word	0x43500000
 23fa980:	800fffff 	.word	0x800fffff
 23fa984:	3c900000 	.word	0x3c900000

023fa988 <sin>:
 23fa988:	ec51 0b10 	vmov	r0, r1, d0
 23fa98c:	4a26      	ldr	r2, [pc, #152]	; (23faa28 <sin+0xa0>)
 23fa98e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23fa992:	4293      	cmp	r3, r2
 23fa994:	dd27      	ble.n	23fa9e6 <sin+0x5e>
 23fa996:	4a25      	ldr	r2, [pc, #148]	; (23faa2c <sin+0xa4>)
 23fa998:	4293      	cmp	r3, r2
 23fa99a:	b500      	push	{lr}
 23fa99c:	b085      	sub	sp, #20
 23fa99e:	dd09      	ble.n	23fa9b4 <sin+0x2c>
 23fa9a0:	ee10 2a10 	vmov	r2, s0
 23fa9a4:	460b      	mov	r3, r1
 23fa9a6:	f7ea fb2f 	bl	23e5008 <__aeabi_dsub>
 23fa9aa:	ec41 0b10 	vmov	d0, r0, r1
 23fa9ae:	b005      	add	sp, #20
 23fa9b0:	f85d fb04 	ldr.w	pc, [sp], #4
 23fa9b4:	4668      	mov	r0, sp
 23fa9b6:	f000 ffb3 	bl	23fb920 <__ieee754_rem_pio2>
 23fa9ba:	f000 0003 	and.w	r0, r0, #3
 23fa9be:	2801      	cmp	r0, #1
 23fa9c0:	d016      	beq.n	23fa9f0 <sin+0x68>
 23fa9c2:	2802      	cmp	r0, #2
 23fa9c4:	d023      	beq.n	23faa0e <sin+0x86>
 23fa9c6:	b1d0      	cbz	r0, 23fa9fe <sin+0x76>
 23fa9c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 23fa9cc:	ed9d 0b00 	vldr	d0, [sp]
 23fa9d0:	f001 fa8e 	bl	23fbef0 <__kernel_cos>
 23fa9d4:	ec53 2b10 	vmov	r2, r3, d0
 23fa9d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 23fa9dc:	ee00 3a90 	vmov	s1, r3
 23fa9e0:	b005      	add	sp, #20
 23fa9e2:	f85d fb04 	ldr.w	pc, [sp], #4
 23fa9e6:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 23faa20 <sin+0x98>
 23fa9ea:	2000      	movs	r0, #0
 23fa9ec:	f001 bfe4 	b.w	23fc9b8 <__kernel_sin>
 23fa9f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 23fa9f4:	ed9d 0b00 	vldr	d0, [sp]
 23fa9f8:	f001 fa7a 	bl	23fbef0 <__kernel_cos>
 23fa9fc:	e7d7      	b.n	23fa9ae <sin+0x26>
 23fa9fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 23faa02:	ed9d 0b00 	vldr	d0, [sp]
 23faa06:	2001      	movs	r0, #1
 23faa08:	f001 ffd6 	bl	23fc9b8 <__kernel_sin>
 23faa0c:	e7cf      	b.n	23fa9ae <sin+0x26>
 23faa0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 23faa12:	ed9d 0b00 	vldr	d0, [sp]
 23faa16:	2001      	movs	r0, #1
 23faa18:	f001 ffce 	bl	23fc9b8 <__kernel_sin>
 23faa1c:	e7da      	b.n	23fa9d4 <sin+0x4c>
 23faa1e:	bf00      	nop
	...
 23faa28:	3fe921fb 	.word	0x3fe921fb
 23faa2c:	7fefffff 	.word	0x7fefffff

023faa30 <atan2>:
 23faa30:	f000 b90e 	b.w	23fac50 <__ieee754_atan2>
 23faa34:	0000      	movs	r0, r0
	...

023faa38 <pow>:
 23faa38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23faa3a:	ed2d 8b02 	vpush	{d8}
 23faa3e:	ec57 6b10 	vmov	r6, r7, d0
 23faa42:	ec55 4b11 	vmov	r4, r5, d1
 23faa46:	f000 f9d7 	bl	23fadf8 <__ieee754_pow>
 23faa4a:	4b63      	ldr	r3, [pc, #396]	; (23fabd8 <pow+0x1a0>)
 23faa4c:	eeb0 8a40 	vmov.f32	s16, s0
 23faa50:	eef0 8a60 	vmov.f32	s17, s1
 23faa54:	f993 3000 	ldrsb.w	r3, [r3]
 23faa58:	3301      	adds	r3, #1
 23faa5a:	d02a      	beq.n	23faab2 <pow+0x7a>
 23faa5c:	4622      	mov	r2, r4
 23faa5e:	462b      	mov	r3, r5
 23faa60:	4620      	mov	r0, r4
 23faa62:	4629      	mov	r1, r5
 23faa64:	f7ea ff22 	bl	23e58ac <__aeabi_dcmpun>
 23faa68:	bb18      	cbnz	r0, 23faab2 <pow+0x7a>
 23faa6a:	4632      	mov	r2, r6
 23faa6c:	463b      	mov	r3, r7
 23faa6e:	4630      	mov	r0, r6
 23faa70:	4639      	mov	r1, r7
 23faa72:	f7ea ff1b 	bl	23e58ac <__aeabi_dcmpun>
 23faa76:	2800      	cmp	r0, #0
 23faa78:	d144      	bne.n	23fab04 <pow+0xcc>
 23faa7a:	2200      	movs	r2, #0
 23faa7c:	2300      	movs	r3, #0
 23faa7e:	4630      	mov	r0, r6
 23faa80:	4639      	mov	r1, r7
 23faa82:	f7ea fee1 	bl	23e5848 <__aeabi_dcmpeq>
 23faa86:	b1d8      	cbz	r0, 23faac0 <pow+0x88>
 23faa88:	2200      	movs	r2, #0
 23faa8a:	2300      	movs	r3, #0
 23faa8c:	4620      	mov	r0, r4
 23faa8e:	4629      	mov	r1, r5
 23faa90:	f7ea feda 	bl	23e5848 <__aeabi_dcmpeq>
 23faa94:	2800      	cmp	r0, #0
 23faa96:	d13d      	bne.n	23fab14 <pow+0xdc>
 23faa98:	ec45 4b10 	vmov	d0, r4, r5
 23faa9c:	f002 f852 	bl	23fcb44 <finite>
 23faaa0:	b138      	cbz	r0, 23faab2 <pow+0x7a>
 23faaa2:	4620      	mov	r0, r4
 23faaa4:	4629      	mov	r1, r5
 23faaa6:	2200      	movs	r2, #0
 23faaa8:	2300      	movs	r3, #0
 23faaaa:	f7ea fed7 	bl	23e585c <__aeabi_dcmplt>
 23faaae:	2800      	cmp	r0, #0
 23faab0:	d15c      	bne.n	23fab6c <pow+0x134>
 23faab2:	eeb0 0a48 	vmov.f32	s0, s16
 23faab6:	eef0 0a68 	vmov.f32	s1, s17
 23faaba:	ecbd 8b02 	vpop	{d8}
 23faabe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23faac0:	eeb0 0a48 	vmov.f32	s0, s16
 23faac4:	eef0 0a68 	vmov.f32	s1, s17
 23faac8:	f002 f83c 	bl	23fcb44 <finite>
 23faacc:	b358      	cbz	r0, 23fab26 <pow+0xee>
 23faace:	2200      	movs	r2, #0
 23faad0:	2300      	movs	r3, #0
 23faad2:	ec51 0b18 	vmov	r0, r1, d8
 23faad6:	f7ea feb7 	bl	23e5848 <__aeabi_dcmpeq>
 23faada:	2800      	cmp	r0, #0
 23faadc:	d0e9      	beq.n	23faab2 <pow+0x7a>
 23faade:	ec47 6b10 	vmov	d0, r6, r7
 23faae2:	f002 f82f 	bl	23fcb44 <finite>
 23faae6:	2800      	cmp	r0, #0
 23faae8:	d0e3      	beq.n	23faab2 <pow+0x7a>
 23faaea:	ec45 4b10 	vmov	d0, r4, r5
 23faaee:	f002 f829 	bl	23fcb44 <finite>
 23faaf2:	2800      	cmp	r0, #0
 23faaf4:	d0dd      	beq.n	23faab2 <pow+0x7a>
 23faaf6:	f7fd fb91 	bl	23f821c <__errno>
 23faafa:	2322      	movs	r3, #34	; 0x22
 23faafc:	ed9f 8b2e 	vldr	d8, [pc, #184]	; 23fabb8 <pow+0x180>
 23fab00:	6003      	str	r3, [r0, #0]
 23fab02:	e7d6      	b.n	23faab2 <pow+0x7a>
 23fab04:	4620      	mov	r0, r4
 23fab06:	4629      	mov	r1, r5
 23fab08:	2200      	movs	r2, #0
 23fab0a:	2300      	movs	r3, #0
 23fab0c:	f7ea fe9c 	bl	23e5848 <__aeabi_dcmpeq>
 23fab10:	2800      	cmp	r0, #0
 23fab12:	d0ce      	beq.n	23faab2 <pow+0x7a>
 23fab14:	ed9f 8b2a 	vldr	d8, [pc, #168]	; 23fabc0 <pow+0x188>
 23fab18:	eeb0 0a48 	vmov.f32	s0, s16
 23fab1c:	eef0 0a68 	vmov.f32	s1, s17
 23fab20:	ecbd 8b02 	vpop	{d8}
 23fab24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fab26:	ec47 6b10 	vmov	d0, r6, r7
 23fab2a:	f002 f80b 	bl	23fcb44 <finite>
 23fab2e:	2800      	cmp	r0, #0
 23fab30:	d0cd      	beq.n	23faace <pow+0x96>
 23fab32:	ec45 4b10 	vmov	d0, r4, r5
 23fab36:	f002 f805 	bl	23fcb44 <finite>
 23fab3a:	2800      	cmp	r0, #0
 23fab3c:	d0c7      	beq.n	23faace <pow+0x96>
 23fab3e:	ee18 0a10 	vmov	r0, s16
 23fab42:	ec53 2b18 	vmov	r2, r3, d8
 23fab46:	4619      	mov	r1, r3
 23fab48:	f7ea feb0 	bl	23e58ac <__aeabi_dcmpun>
 23fab4c:	bb20      	cbnz	r0, 23fab98 <pow+0x160>
 23fab4e:	f7fd fb65 	bl	23f821c <__errno>
 23fab52:	2222      	movs	r2, #34	; 0x22
 23fab54:	4603      	mov	r3, r0
 23fab56:	4639      	mov	r1, r7
 23fab58:	4630      	mov	r0, r6
 23fab5a:	601a      	str	r2, [r3, #0]
 23fab5c:	2200      	movs	r2, #0
 23fab5e:	2300      	movs	r3, #0
 23fab60:	f7ea fe7c 	bl	23e585c <__aeabi_dcmplt>
 23fab64:	b948      	cbnz	r0, 23fab7a <pow+0x142>
 23fab66:	ed9f 8b18 	vldr	d8, [pc, #96]	; 23fabc8 <pow+0x190>
 23fab6a:	e7a2      	b.n	23faab2 <pow+0x7a>
 23fab6c:	f7fd fb56 	bl	23f821c <__errno>
 23fab70:	2321      	movs	r3, #33	; 0x21
 23fab72:	ed9f 8b17 	vldr	d8, [pc, #92]	; 23fabd0 <pow+0x198>
 23fab76:	6003      	str	r3, [r0, #0]
 23fab78:	e79b      	b.n	23faab2 <pow+0x7a>
 23fab7a:	ec45 4b10 	vmov	d0, r4, r5
 23fab7e:	f002 f87b 	bl	23fcc78 <rint>
 23fab82:	4622      	mov	r2, r4
 23fab84:	462b      	mov	r3, r5
 23fab86:	ec51 0b10 	vmov	r0, r1, d0
 23fab8a:	f7ea fe5d 	bl	23e5848 <__aeabi_dcmpeq>
 23fab8e:	2800      	cmp	r0, #0
 23fab90:	d1e9      	bne.n	23fab66 <pow+0x12e>
 23fab92:	ed9f 8b0f 	vldr	d8, [pc, #60]	; 23fabd0 <pow+0x198>
 23fab96:	e78c      	b.n	23faab2 <pow+0x7a>
 23fab98:	f7fd fb40 	bl	23f821c <__errno>
 23fab9c:	2200      	movs	r2, #0
 23fab9e:	2300      	movs	r3, #0
 23faba0:	2121      	movs	r1, #33	; 0x21
 23faba2:	6001      	str	r1, [r0, #0]
 23faba4:	4610      	mov	r0, r2
 23faba6:	4619      	mov	r1, r3
 23faba8:	f7ea fd10 	bl	23e55cc <__aeabi_ddiv>
 23fabac:	ec41 0b18 	vmov	d8, r0, r1
 23fabb0:	e77f      	b.n	23faab2 <pow+0x7a>
 23fabb2:	bf00      	nop
 23fabb4:	f3af 8000 	nop.w
	...
 23fabc4:	3ff00000 	.word	0x3ff00000
 23fabc8:	00000000 	.word	0x00000000
 23fabcc:	7ff00000 	.word	0x7ff00000
 23fabd0:	00000000 	.word	0x00000000
 23fabd4:	fff00000 	.word	0xfff00000
 23fabd8:	1006a21c 	.word	0x1006a21c

023fabdc <sqrt>:
 23fabdc:	b538      	push	{r3, r4, r5, lr}
 23fabde:	ed2d 8b02 	vpush	{d8}
 23fabe2:	ec55 4b10 	vmov	r4, r5, d0
 23fabe6:	f001 f8c1 	bl	23fbd6c <__ieee754_sqrt>
 23fabea:	4b18      	ldr	r3, [pc, #96]	; (23fac4c <sqrt+0x70>)
 23fabec:	eeb0 8a40 	vmov.f32	s16, s0
 23fabf0:	eef0 8a60 	vmov.f32	s17, s1
 23fabf4:	f993 3000 	ldrsb.w	r3, [r3]
 23fabf8:	3301      	adds	r3, #1
 23fabfa:	d00d      	beq.n	23fac18 <sqrt+0x3c>
 23fabfc:	4622      	mov	r2, r4
 23fabfe:	462b      	mov	r3, r5
 23fac00:	4620      	mov	r0, r4
 23fac02:	4629      	mov	r1, r5
 23fac04:	f7ea fe52 	bl	23e58ac <__aeabi_dcmpun>
 23fac08:	b930      	cbnz	r0, 23fac18 <sqrt+0x3c>
 23fac0a:	2200      	movs	r2, #0
 23fac0c:	2300      	movs	r3, #0
 23fac0e:	4620      	mov	r0, r4
 23fac10:	4629      	mov	r1, r5
 23fac12:	f7ea fe23 	bl	23e585c <__aeabi_dcmplt>
 23fac16:	b930      	cbnz	r0, 23fac26 <sqrt+0x4a>
 23fac18:	eeb0 0a48 	vmov.f32	s0, s16
 23fac1c:	eef0 0a68 	vmov.f32	s1, s17
 23fac20:	ecbd 8b02 	vpop	{d8}
 23fac24:	bd38      	pop	{r3, r4, r5, pc}
 23fac26:	f7fd faf9 	bl	23f821c <__errno>
 23fac2a:	2200      	movs	r2, #0
 23fac2c:	2300      	movs	r3, #0
 23fac2e:	2121      	movs	r1, #33	; 0x21
 23fac30:	6001      	str	r1, [r0, #0]
 23fac32:	4610      	mov	r0, r2
 23fac34:	4619      	mov	r1, r3
 23fac36:	f7ea fcc9 	bl	23e55cc <__aeabi_ddiv>
 23fac3a:	ec41 0b18 	vmov	d8, r0, r1
 23fac3e:	eeb0 0a48 	vmov.f32	s0, s16
 23fac42:	eef0 0a68 	vmov.f32	s1, s17
 23fac46:	ecbd 8b02 	vpop	{d8}
 23fac4a:	bd38      	pop	{r3, r4, r5, pc}
 23fac4c:	1006a21c 	.word	0x1006a21c

023fac50 <__ieee754_atan2>:
 23fac50:	ec51 0b11 	vmov	r0, r1, d1
 23fac54:	4243      	negs	r3, r0
 23fac56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fac5a:	4303      	orrs	r3, r0
 23fac5c:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 23fac60:	4e61      	ldr	r6, [pc, #388]	; (23fade8 <__ieee754_atan2+0x198>)
 23fac62:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
 23fac66:	42b3      	cmp	r3, r6
 23fac68:	ec55 4b10 	vmov	r4, r5, d0
 23fac6c:	d83c      	bhi.n	23face8 <__ieee754_atan2+0x98>
 23fac6e:	4263      	negs	r3, r4
 23fac70:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
 23fac74:	46a9      	mov	r9, r5
 23fac76:	4323      	orrs	r3, r4
 23fac78:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
 23fac7c:	42b3      	cmp	r3, r6
 23fac7e:	d833      	bhi.n	23face8 <__ieee754_atan2+0x98>
 23fac80:	4b5a      	ldr	r3, [pc, #360]	; (23fadec <__ieee754_atan2+0x19c>)
 23fac82:	440b      	add	r3, r1
 23fac84:	4303      	orrs	r3, r0
 23fac86:	d03e      	beq.n	23fad06 <__ieee754_atan2+0xb6>
 23fac88:	178f      	asrs	r7, r1, #30
 23fac8a:	ea5a 0304 	orrs.w	r3, sl, r4
 23fac8e:	f007 0702 	and.w	r7, r7, #2
 23fac92:	ea47 77d5 	orr.w	r7, r7, r5, lsr #31
 23fac96:	d02f      	beq.n	23facf8 <__ieee754_atan2+0xa8>
 23fac98:	ea5e 0300 	orrs.w	r3, lr, r0
 23fac9c:	d037      	beq.n	23fad0e <__ieee754_atan2+0xbe>
 23fac9e:	45b6      	cmp	lr, r6
 23faca0:	d044      	beq.n	23fad2c <__ieee754_atan2+0xdc>
 23faca2:	45b2      	cmp	sl, r6
 23faca4:	d033      	beq.n	23fad0e <__ieee754_atan2+0xbe>
 23faca6:	ebaa 0e0e 	sub.w	lr, sl, lr
 23facaa:	f1be 7f74 	cmp.w	lr, #63963136	; 0x3d00000
 23facae:	ea4f 532e 	mov.w	r3, lr, asr #20
 23facb2:	da38      	bge.n	23fad26 <__ieee754_atan2+0xd6>
 23facb4:	2900      	cmp	r1, #0
 23facb6:	da6a      	bge.n	23fad8e <__ieee754_atan2+0x13e>
 23facb8:	333c      	adds	r3, #60	; 0x3c
 23facba:	da68      	bge.n	23fad8e <__ieee754_atan2+0x13e>
 23facbc:	ed9f 0b3c 	vldr	d0, [pc, #240]	; 23fadb0 <__ieee754_atan2+0x160>
 23facc0:	2f01      	cmp	r7, #1
 23facc2:	d050      	beq.n	23fad66 <__ieee754_atan2+0x116>
 23facc4:	2f02      	cmp	r7, #2
 23facc6:	d03d      	beq.n	23fad44 <__ieee754_atan2+0xf4>
 23facc8:	b1a7      	cbz	r7, 23facf4 <__ieee754_atan2+0xa4>
 23facca:	ec51 0b10 	vmov	r0, r1, d0
 23facce:	a33a      	add	r3, pc, #232	; (adr r3, 23fadb8 <__ieee754_atan2+0x168>)
 23facd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23facd4:	f7ea f998 	bl	23e5008 <__aeabi_dsub>
 23facd8:	a339      	add	r3, pc, #228	; (adr r3, 23fadc0 <__ieee754_atan2+0x170>)
 23facda:	e9d3 2300 	ldrd	r2, r3, [r3]
 23facde:	f7ea f993 	bl	23e5008 <__aeabi_dsub>
 23face2:	ec41 0b10 	vmov	d0, r0, r1
 23face6:	e005      	b.n	23facf4 <__ieee754_atan2+0xa4>
 23face8:	4622      	mov	r2, r4
 23facea:	462b      	mov	r3, r5
 23facec:	f7ea f98e 	bl	23e500c <__adddf3>
 23facf0:	ec41 0b10 	vmov	d0, r0, r1
 23facf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23facf8:	2f02      	cmp	r7, #2
 23facfa:	d00e      	beq.n	23fad1a <__ieee754_atan2+0xca>
 23facfc:	2f03      	cmp	r7, #3
 23facfe:	d1f9      	bne.n	23facf4 <__ieee754_atan2+0xa4>
 23fad00:	ed9f 0b31 	vldr	d0, [pc, #196]	; 23fadc8 <__ieee754_atan2+0x178>
 23fad04:	e7f6      	b.n	23facf4 <__ieee754_atan2+0xa4>
 23fad06:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fad0a:	f7ff bba1 	b.w	23fa450 <atan>
 23fad0e:	f1b9 0f00 	cmp.w	r9, #0
 23fad12:	db05      	blt.n	23fad20 <__ieee754_atan2+0xd0>
 23fad14:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 23fadd0 <__ieee754_atan2+0x180>
 23fad18:	e7ec      	b.n	23facf4 <__ieee754_atan2+0xa4>
 23fad1a:	ed9f 0b29 	vldr	d0, [pc, #164]	; 23fadc0 <__ieee754_atan2+0x170>
 23fad1e:	e7e9      	b.n	23facf4 <__ieee754_atan2+0xa4>
 23fad20:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 23fadd8 <__ieee754_atan2+0x188>
 23fad24:	e7e6      	b.n	23facf4 <__ieee754_atan2+0xa4>
 23fad26:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 23fadd0 <__ieee754_atan2+0x180>
 23fad2a:	e7c9      	b.n	23facc0 <__ieee754_atan2+0x70>
 23fad2c:	45f2      	cmp	sl, lr
 23fad2e:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 23fad32:	d021      	beq.n	23fad78 <__ieee754_atan2+0x128>
 23fad34:	2f02      	cmp	r7, #2
 23fad36:	d827      	bhi.n	23fad88 <__ieee754_atan2+0x138>
 23fad38:	4b2d      	ldr	r3, [pc, #180]	; (23fadf0 <__ieee754_atan2+0x1a0>)
 23fad3a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 23fad3e:	ed97 0b00 	vldr	d0, [r7]
 23fad42:	e7d7      	b.n	23facf4 <__ieee754_atan2+0xa4>
 23fad44:	a31c      	add	r3, pc, #112	; (adr r3, 23fadb8 <__ieee754_atan2+0x168>)
 23fad46:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fad4a:	ec51 0b10 	vmov	r0, r1, d0
 23fad4e:	f7ea f95b 	bl	23e5008 <__aeabi_dsub>
 23fad52:	4602      	mov	r2, r0
 23fad54:	460b      	mov	r3, r1
 23fad56:	a11a      	add	r1, pc, #104	; (adr r1, 23fadc0 <__ieee754_atan2+0x170>)
 23fad58:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fad5c:	f7ea f954 	bl	23e5008 <__aeabi_dsub>
 23fad60:	ec41 0b10 	vmov	d0, r0, r1
 23fad64:	e7c6      	b.n	23facf4 <__ieee754_atan2+0xa4>
 23fad66:	ee10 1a90 	vmov	r1, s1
 23fad6a:	ec53 2b10 	vmov	r2, r3, d0
 23fad6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fad72:	ec43 2b10 	vmov	d0, r2, r3
 23fad76:	e7bd      	b.n	23facf4 <__ieee754_atan2+0xa4>
 23fad78:	2f02      	cmp	r7, #2
 23fad7a:	d815      	bhi.n	23fada8 <__ieee754_atan2+0x158>
 23fad7c:	4b1d      	ldr	r3, [pc, #116]	; (23fadf4 <__ieee754_atan2+0x1a4>)
 23fad7e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 23fad82:	ed97 0b00 	vldr	d0, [r7]
 23fad86:	e7b5      	b.n	23facf4 <__ieee754_atan2+0xa4>
 23fad88:	ed9f 0b09 	vldr	d0, [pc, #36]	; 23fadb0 <__ieee754_atan2+0x160>
 23fad8c:	e7b2      	b.n	23facf4 <__ieee754_atan2+0xa4>
 23fad8e:	4602      	mov	r2, r0
 23fad90:	460b      	mov	r3, r1
 23fad92:	4620      	mov	r0, r4
 23fad94:	4629      	mov	r1, r5
 23fad96:	f7ea fc19 	bl	23e55cc <__aeabi_ddiv>
 23fad9a:	ec41 0b10 	vmov	d0, r0, r1
 23fad9e:	f7ff fd53 	bl	23fa848 <fabs>
 23fada2:	f7ff fb55 	bl	23fa450 <atan>
 23fada6:	e78b      	b.n	23facc0 <__ieee754_atan2+0x70>
 23fada8:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 23fade0 <__ieee754_atan2+0x190>
 23fadac:	e7a2      	b.n	23facf4 <__ieee754_atan2+0xa4>
 23fadae:	bf00      	nop
	...
 23fadb8:	33145c07 	.word	0x33145c07
 23fadbc:	3ca1a626 	.word	0x3ca1a626
 23fadc0:	54442d18 	.word	0x54442d18
 23fadc4:	400921fb 	.word	0x400921fb
 23fadc8:	54442d18 	.word	0x54442d18
 23fadcc:	c00921fb 	.word	0xc00921fb
 23fadd0:	54442d18 	.word	0x54442d18
 23fadd4:	3ff921fb 	.word	0x3ff921fb
 23fadd8:	54442d18 	.word	0x54442d18
 23faddc:	bff921fb 	.word	0xbff921fb
 23fade0:	54442d18 	.word	0x54442d18
 23fade4:	3fe921fb 	.word	0x3fe921fb
 23fade8:	7ff00000 	.word	0x7ff00000
 23fadec:	c0100000 	.word	0xc0100000
 23fadf0:	023ffc40 	.word	0x023ffc40
 23fadf4:	023ffc28 	.word	0x023ffc28

023fadf8 <__ieee754_pow>:
 23fadf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fadfc:	ec55 4b11 	vmov	r4, r5, d1
 23fae00:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
 23fae04:	ea5a 0204 	orrs.w	r2, sl, r4
 23fae08:	ed2d 8b0c 	vpush	{d8-d13}
 23fae0c:	b087      	sub	sp, #28
 23fae0e:	d01f      	beq.n	23fae50 <__ieee754_pow+0x58>
 23fae10:	495d      	ldr	r1, [pc, #372]	; (23faf88 <__ieee754_pow+0x190>)
 23fae12:	ee10 2a10 	vmov	r2, s0
 23fae16:	ec57 6b10 	vmov	r6, r7, d0
 23fae1a:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 23fae1e:	46b9      	mov	r9, r7
 23fae20:	4588      	cmp	r8, r1
 23fae22:	dc11      	bgt.n	23fae48 <__ieee754_pow+0x50>
 23fae24:	46ab      	mov	fp, r5
 23fae26:	ee11 3a10 	vmov	r3, s2
 23fae2a:	d108      	bne.n	23fae3e <__ieee754_pow+0x46>
 23fae2c:	b13e      	cbz	r6, 23fae3e <__ieee754_pow+0x46>
 23fae2e:	4857      	ldr	r0, [pc, #348]	; (23faf8c <__ieee754_pow+0x194>)
 23fae30:	b007      	add	sp, #28
 23fae32:	ecbd 8b0c 	vpop	{d8-d13}
 23fae36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fae3a:	f001 bf15 	b.w	23fcc68 <nan>
 23fae3e:	4952      	ldr	r1, [pc, #328]	; (23faf88 <__ieee754_pow+0x190>)
 23fae40:	458a      	cmp	sl, r1
 23fae42:	dc01      	bgt.n	23fae48 <__ieee754_pow+0x50>
 23fae44:	d10b      	bne.n	23fae5e <__ieee754_pow+0x66>
 23fae46:	b153      	cbz	r3, 23fae5e <__ieee754_pow+0x66>
 23fae48:	4b51      	ldr	r3, [pc, #324]	; (23faf90 <__ieee754_pow+0x198>)
 23fae4a:	4443      	add	r3, r8
 23fae4c:	4313      	orrs	r3, r2
 23fae4e:	d1ee      	bne.n	23fae2e <__ieee754_pow+0x36>
 23fae50:	ed9f 0b49 	vldr	d0, [pc, #292]	; 23faf78 <__ieee754_pow+0x180>
 23fae54:	b007      	add	sp, #28
 23fae56:	ecbd 8b0c 	vpop	{d8-d13}
 23fae5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fae5e:	f1b9 0f00 	cmp.w	r9, #0
 23fae62:	db45      	blt.n	23faef0 <__ieee754_pow+0xf8>
 23fae64:	2100      	movs	r1, #0
 23fae66:	9100      	str	r1, [sp, #0]
 23fae68:	b983      	cbnz	r3, 23fae8c <__ieee754_pow+0x94>
 23fae6a:	4b47      	ldr	r3, [pc, #284]	; (23faf88 <__ieee754_pow+0x190>)
 23fae6c:	459a      	cmp	sl, r3
 23fae6e:	d05b      	beq.n	23faf28 <__ieee754_pow+0x130>
 23fae70:	4b48      	ldr	r3, [pc, #288]	; (23faf94 <__ieee754_pow+0x19c>)
 23fae72:	459a      	cmp	sl, r3
 23fae74:	d06a      	beq.n	23faf4c <__ieee754_pow+0x154>
 23fae76:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
 23fae7a:	f000 84b0 	beq.w	23fb7de <__ieee754_pow+0x9e6>
 23fae7e:	4b46      	ldr	r3, [pc, #280]	; (23faf98 <__ieee754_pow+0x1a0>)
 23fae80:	459b      	cmp	fp, r3
 23fae82:	d103      	bne.n	23fae8c <__ieee754_pow+0x94>
 23fae84:	f1b9 0f00 	cmp.w	r9, #0
 23fae88:	f280 850d 	bge.w	23fb8a6 <__ieee754_pow+0xaae>
 23fae8c:	9202      	str	r2, [sp, #8]
 23fae8e:	ec47 6b10 	vmov	d0, r6, r7
 23fae92:	f7ff fcd9 	bl	23fa848 <fabs>
 23fae96:	9a02      	ldr	r2, [sp, #8]
 23fae98:	b94a      	cbnz	r2, 23faeae <__ieee754_pow+0xb6>
 23fae9a:	f029 4340 	bic.w	r3, r9, #3221225472	; 0xc0000000
 23fae9e:	4a3d      	ldr	r2, [pc, #244]	; (23faf94 <__ieee754_pow+0x19c>)
 23faea0:	4293      	cmp	r3, r2
 23faea2:	f000 83a8 	beq.w	23fb5f6 <__ieee754_pow+0x7fe>
 23faea6:	f1b8 0f00 	cmp.w	r8, #0
 23faeaa:	f000 83a4 	beq.w	23fb5f6 <__ieee754_pow+0x7fe>
 23faeae:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 23faeb2:	9a00      	ldr	r2, [sp, #0]
 23faeb4:	3b01      	subs	r3, #1
 23faeb6:	9304      	str	r3, [sp, #16]
 23faeb8:	4313      	orrs	r3, r2
 23faeba:	d04e      	beq.n	23faf5a <__ieee754_pow+0x162>
 23faebc:	4b37      	ldr	r3, [pc, #220]	; (23faf9c <__ieee754_pow+0x1a4>)
 23faebe:	459a      	cmp	sl, r3
 23faec0:	dd72      	ble.n	23fafa8 <__ieee754_pow+0x1b0>
 23faec2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 23faec6:	459a      	cmp	sl, r3
 23faec8:	4b35      	ldr	r3, [pc, #212]	; (23fafa0 <__ieee754_pow+0x1a8>)
 23faeca:	f340 842b 	ble.w	23fb724 <__ieee754_pow+0x92c>
 23faece:	4598      	cmp	r8, r3
 23faed0:	f340 83a9 	ble.w	23fb626 <__ieee754_pow+0x82e>
 23faed4:	f1bb 0f00 	cmp.w	fp, #0
 23faed8:	f340 83a9 	ble.w	23fb62e <__ieee754_pow+0x836>
 23faedc:	a328      	add	r3, pc, #160	; (adr r3, 23faf80 <__ieee754_pow+0x188>)
 23faede:	e9d3 2300 	ldrd	r2, r3, [r3]
 23faee2:	4610      	mov	r0, r2
 23faee4:	4619      	mov	r1, r3
 23faee6:	f7ea fa47 	bl	23e5378 <__aeabi_dmul>
 23faeea:	ec41 0b10 	vmov	d0, r0, r1
 23faeee:	e7b1      	b.n	23fae54 <__ieee754_pow+0x5c>
 23faef0:	492c      	ldr	r1, [pc, #176]	; (23fafa4 <__ieee754_pow+0x1ac>)
 23faef2:	458a      	cmp	sl, r1
 23faef4:	dc27      	bgt.n	23faf46 <__ieee754_pow+0x14e>
 23faef6:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 23faefa:	458a      	cmp	sl, r1
 23faefc:	ddb2      	ble.n	23fae64 <__ieee754_pow+0x6c>
 23faefe:	ea4f 512a 	mov.w	r1, sl, asr #20
 23faf02:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 23faf06:	2914      	cmp	r1, #20
 23faf08:	f340 847d 	ble.w	23fb806 <__ieee754_pow+0xa0e>
 23faf0c:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 23faf10:	fa23 f001 	lsr.w	r0, r3, r1
 23faf14:	fa00 f101 	lsl.w	r1, r0, r1
 23faf18:	4299      	cmp	r1, r3
 23faf1a:	d1a3      	bne.n	23fae64 <__ieee754_pow+0x6c>
 23faf1c:	f000 0001 	and.w	r0, r0, #1
 23faf20:	f1c0 0102 	rsb	r1, r0, #2
 23faf24:	9100      	str	r1, [sp, #0]
 23faf26:	e79f      	b.n	23fae68 <__ieee754_pow+0x70>
 23faf28:	4b19      	ldr	r3, [pc, #100]	; (23faf90 <__ieee754_pow+0x198>)
 23faf2a:	4443      	add	r3, r8
 23faf2c:	4313      	orrs	r3, r2
 23faf2e:	d08f      	beq.n	23fae50 <__ieee754_pow+0x58>
 23faf30:	4b1b      	ldr	r3, [pc, #108]	; (23fafa0 <__ieee754_pow+0x1a8>)
 23faf32:	4598      	cmp	r8, r3
 23faf34:	f340 83ab 	ble.w	23fb68e <__ieee754_pow+0x896>
 23faf38:	f1bb 0f00 	cmp.w	fp, #0
 23faf3c:	f2c0 8377 	blt.w	23fb62e <__ieee754_pow+0x836>
 23faf40:	ec45 4b10 	vmov	d0, r4, r5
 23faf44:	e786      	b.n	23fae54 <__ieee754_pow+0x5c>
 23faf46:	2102      	movs	r1, #2
 23faf48:	9100      	str	r1, [sp, #0]
 23faf4a:	e78d      	b.n	23fae68 <__ieee754_pow+0x70>
 23faf4c:	f1bb 0f00 	cmp.w	fp, #0
 23faf50:	f2c0 844f 	blt.w	23fb7f2 <__ieee754_pow+0x9fa>
 23faf54:	ec47 6b10 	vmov	d0, r6, r7
 23faf58:	e77c      	b.n	23fae54 <__ieee754_pow+0x5c>
 23faf5a:	4632      	mov	r2, r6
 23faf5c:	463b      	mov	r3, r7
 23faf5e:	4610      	mov	r0, r2
 23faf60:	4619      	mov	r1, r3
 23faf62:	f7ea f851 	bl	23e5008 <__aeabi_dsub>
 23faf66:	4602      	mov	r2, r0
 23faf68:	460b      	mov	r3, r1
 23faf6a:	f7ea fb2f 	bl	23e55cc <__aeabi_ddiv>
 23faf6e:	ec41 0b10 	vmov	d0, r0, r1
 23faf72:	e76f      	b.n	23fae54 <__ieee754_pow+0x5c>
 23faf74:	f3af 8000 	nop.w
 23faf78:	00000000 	.word	0x00000000
 23faf7c:	3ff00000 	.word	0x3ff00000
 23faf80:	8800759c 	.word	0x8800759c
 23faf84:	7e37e43c 	.word	0x7e37e43c
 23faf88:	7ff00000 	.word	0x7ff00000
 23faf8c:	023ffc58 	.word	0x023ffc58
 23faf90:	c0100000 	.word	0xc0100000
 23faf94:	3ff00000 	.word	0x3ff00000
 23faf98:	3fe00000 	.word	0x3fe00000
 23faf9c:	41e00000 	.word	0x41e00000
 23fafa0:	3fefffff 	.word	0x3fefffff
 23fafa4:	433fffff 	.word	0x433fffff
 23fafa8:	4be3      	ldr	r3, [pc, #908]	; (23fb338 <__ieee754_pow+0x540>)
 23fafaa:	2200      	movs	r2, #0
 23fafac:	ea09 0303 	and.w	r3, r9, r3
 23fafb0:	b953      	cbnz	r3, 23fafc8 <__ieee754_pow+0x1d0>
 23fafb2:	4be2      	ldr	r3, [pc, #904]	; (23fb33c <__ieee754_pow+0x544>)
 23fafb4:	ec51 0b10 	vmov	r0, r1, d0
 23fafb8:	f7ea f9de 	bl	23e5378 <__aeabi_dmul>
 23fafbc:	f06f 0234 	mvn.w	r2, #52	; 0x34
 23fafc0:	ec41 0b10 	vmov	d0, r0, r1
 23fafc4:	ee10 8a90 	vmov	r8, s1
 23fafc8:	ea4f 5328 	mov.w	r3, r8, asr #20
 23fafcc:	f3c8 0813 	ubfx	r8, r8, #0, #20
 23fafd0:	4edb      	ldr	r6, [pc, #876]	; (23fb340 <__ieee754_pow+0x548>)
 23fafd2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 23fafd6:	ea48 0606 	orr.w	r6, r8, r6
 23fafda:	189a      	adds	r2, r3, r2
 23fafdc:	4bd9      	ldr	r3, [pc, #868]	; (23fb344 <__ieee754_pow+0x54c>)
 23fafde:	4598      	cmp	r8, r3
 23fafe0:	9205      	str	r2, [sp, #20]
 23fafe2:	dd07      	ble.n	23faff4 <__ieee754_pow+0x1fc>
 23fafe4:	4bd8      	ldr	r3, [pc, #864]	; (23fb348 <__ieee754_pow+0x550>)
 23fafe6:	4598      	cmp	r8, r3
 23fafe8:	f340 8433 	ble.w	23fb852 <__ieee754_pow+0xa5a>
 23fafec:	3201      	adds	r2, #1
 23fafee:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 23faff2:	9205      	str	r2, [sp, #20]
 23faff4:	2700      	movs	r7, #0
 23faff6:	ed9f 7bb8 	vldr	d7, [pc, #736]	; 23fb2d8 <__ieee754_pow+0x4e0>
 23faffa:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 23fb2e0 <__ieee754_pow+0x4e8>
 23faffe:	eeb0 da47 	vmov.f32	s26, s14
 23fb002:	eef0 da67 	vmov.f32	s27, s15
 23fb006:	eeb0 ca47 	vmov.f32	s24, s14
 23fb00a:	eef0 ca67 	vmov.f32	s25, s15
 23fb00e:	ec51 0b16 	vmov	r0, r1, d6
 23fb012:	ec53 2b10 	vmov	r2, r3, d0
 23fb016:	4633      	mov	r3, r6
 23fb018:	1076      	asrs	r6, r6, #1
 23fb01a:	ec43 2b19 	vmov	d9, r2, r3
 23fb01e:	ec41 0b1a 	vmov	d10, r0, r1
 23fb022:	4602      	mov	r2, r0
 23fb024:	460b      	mov	r3, r1
 23fb026:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 23fb02a:	ec51 0b19 	vmov	r0, r1, d9
 23fb02e:	f7e9 ffeb 	bl	23e5008 <__aeabi_dsub>
 23fb032:	4680      	mov	r8, r0
 23fb034:	4689      	mov	r9, r1
 23fb036:	ec53 2b1a 	vmov	r2, r3, d10
 23fb03a:	ec51 0b19 	vmov	r0, r1, d9
 23fb03e:	f7e9 ffe5 	bl	23e500c <__adddf3>
 23fb042:	4602      	mov	r2, r0
 23fb044:	460b      	mov	r3, r1
 23fb046:	2000      	movs	r0, #0
 23fb048:	49bd      	ldr	r1, [pc, #756]	; (23fb340 <__ieee754_pow+0x548>)
 23fb04a:	f7ea fabf 	bl	23e55cc <__aeabi_ddiv>
 23fb04e:	ec41 0b1b 	vmov	d11, r0, r1
 23fb052:	ec53 2b1b 	vmov	r2, r3, d11
 23fb056:	4640      	mov	r0, r8
 23fb058:	4649      	mov	r1, r9
 23fb05a:	f7ea f98d 	bl	23e5378 <__aeabi_dmul>
 23fb05e:	460a      	mov	r2, r1
 23fb060:	f506 2300 	add.w	r3, r6, #524288	; 0x80000
 23fb064:	ec41 0b18 	vmov	d8, r0, r1
 23fb068:	4601      	mov	r1, r0
 23fb06a:	2000      	movs	r0, #0
 23fb06c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 23fb070:	2100      	movs	r1, #0
 23fb072:	4606      	mov	r6, r0
 23fb074:	4602      	mov	r2, r0
 23fb076:	9102      	str	r1, [sp, #8]
 23fb078:	19d9      	adds	r1, r3, r7
 23fb07a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 23fb07e:	460f      	mov	r7, r1
 23fb080:	460b      	mov	r3, r1
 23fb082:	4650      	mov	r0, sl
 23fb084:	4659      	mov	r1, fp
 23fb086:	f7ea f977 	bl	23e5378 <__aeabi_dmul>
 23fb08a:	4602      	mov	r2, r0
 23fb08c:	460b      	mov	r3, r1
 23fb08e:	4640      	mov	r0, r8
 23fb090:	4649      	mov	r1, r9
 23fb092:	f7e9 ffb9 	bl	23e5008 <__aeabi_dsub>
 23fb096:	4680      	mov	r8, r0
 23fb098:	4689      	mov	r9, r1
 23fb09a:	4630      	mov	r0, r6
 23fb09c:	4639      	mov	r1, r7
 23fb09e:	ec53 2b1a 	vmov	r2, r3, d10
 23fb0a2:	f7e9 ffb1 	bl	23e5008 <__aeabi_dsub>
 23fb0a6:	4602      	mov	r2, r0
 23fb0a8:	460b      	mov	r3, r1
 23fb0aa:	ec51 0b19 	vmov	r0, r1, d9
 23fb0ae:	f7e9 ffab 	bl	23e5008 <__aeabi_dsub>
 23fb0b2:	4652      	mov	r2, sl
 23fb0b4:	465b      	mov	r3, fp
 23fb0b6:	f7ea f95f 	bl	23e5378 <__aeabi_dmul>
 23fb0ba:	4602      	mov	r2, r0
 23fb0bc:	460b      	mov	r3, r1
 23fb0be:	4640      	mov	r0, r8
 23fb0c0:	4649      	mov	r1, r9
 23fb0c2:	f7e9 ffa1 	bl	23e5008 <__aeabi_dsub>
 23fb0c6:	ec53 2b1b 	vmov	r2, r3, d11
 23fb0ca:	f7ea f955 	bl	23e5378 <__aeabi_dmul>
 23fb0ce:	ec53 2b18 	vmov	r2, r3, d8
 23fb0d2:	ec41 0b1a 	vmov	d10, r0, r1
 23fb0d6:	ec51 0b18 	vmov	r0, r1, d8
 23fb0da:	f7ea f94d 	bl	23e5378 <__aeabi_dmul>
 23fb0de:	4606      	mov	r6, r0
 23fb0e0:	460f      	mov	r7, r1
 23fb0e2:	a381      	add	r3, pc, #516	; (adr r3, 23fb2e8 <__ieee754_pow+0x4f0>)
 23fb0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb0e8:	f7ea f946 	bl	23e5378 <__aeabi_dmul>
 23fb0ec:	a380      	add	r3, pc, #512	; (adr r3, 23fb2f0 <__ieee754_pow+0x4f8>)
 23fb0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb0f2:	f7e9 ff8b 	bl	23e500c <__adddf3>
 23fb0f6:	4632      	mov	r2, r6
 23fb0f8:	463b      	mov	r3, r7
 23fb0fa:	f7ea f93d 	bl	23e5378 <__aeabi_dmul>
 23fb0fe:	a37e      	add	r3, pc, #504	; (adr r3, 23fb2f8 <__ieee754_pow+0x500>)
 23fb100:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb104:	f7e9 ff82 	bl	23e500c <__adddf3>
 23fb108:	4632      	mov	r2, r6
 23fb10a:	463b      	mov	r3, r7
 23fb10c:	f7ea f934 	bl	23e5378 <__aeabi_dmul>
 23fb110:	a37b      	add	r3, pc, #492	; (adr r3, 23fb300 <__ieee754_pow+0x508>)
 23fb112:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb116:	f7e9 ff79 	bl	23e500c <__adddf3>
 23fb11a:	4632      	mov	r2, r6
 23fb11c:	463b      	mov	r3, r7
 23fb11e:	f7ea f92b 	bl	23e5378 <__aeabi_dmul>
 23fb122:	a379      	add	r3, pc, #484	; (adr r3, 23fb308 <__ieee754_pow+0x510>)
 23fb124:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb128:	f7e9 ff70 	bl	23e500c <__adddf3>
 23fb12c:	4632      	mov	r2, r6
 23fb12e:	463b      	mov	r3, r7
 23fb130:	f7ea f922 	bl	23e5378 <__aeabi_dmul>
 23fb134:	a376      	add	r3, pc, #472	; (adr r3, 23fb310 <__ieee754_pow+0x518>)
 23fb136:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb13a:	f7e9 ff67 	bl	23e500c <__adddf3>
 23fb13e:	4680      	mov	r8, r0
 23fb140:	4689      	mov	r9, r1
 23fb142:	4632      	mov	r2, r6
 23fb144:	463b      	mov	r3, r7
 23fb146:	4630      	mov	r0, r6
 23fb148:	4639      	mov	r1, r7
 23fb14a:	f7ea f915 	bl	23e5378 <__aeabi_dmul>
 23fb14e:	4602      	mov	r2, r0
 23fb150:	460b      	mov	r3, r1
 23fb152:	4640      	mov	r0, r8
 23fb154:	4649      	mov	r1, r9
 23fb156:	f04f 0800 	mov.w	r8, #0
 23fb15a:	f7ea f90d 	bl	23e5378 <__aeabi_dmul>
 23fb15e:	4652      	mov	r2, sl
 23fb160:	4606      	mov	r6, r0
 23fb162:	460f      	mov	r7, r1
 23fb164:	465b      	mov	r3, fp
 23fb166:	ec51 0b18 	vmov	r0, r1, d8
 23fb16a:	f7e9 ff4f 	bl	23e500c <__adddf3>
 23fb16e:	ec53 2b1a 	vmov	r2, r3, d10
 23fb172:	f7ea f901 	bl	23e5378 <__aeabi_dmul>
 23fb176:	4632      	mov	r2, r6
 23fb178:	463b      	mov	r3, r7
 23fb17a:	f7e9 ff47 	bl	23e500c <__adddf3>
 23fb17e:	4652      	mov	r2, sl
 23fb180:	465b      	mov	r3, fp
 23fb182:	ec41 0b19 	vmov	d9, r0, r1
 23fb186:	4650      	mov	r0, sl
 23fb188:	4659      	mov	r1, fp
 23fb18a:	f7ea f8f5 	bl	23e5378 <__aeabi_dmul>
 23fb18e:	2200      	movs	r2, #0
 23fb190:	4b6e      	ldr	r3, [pc, #440]	; (23fb34c <__ieee754_pow+0x554>)
 23fb192:	4606      	mov	r6, r0
 23fb194:	460f      	mov	r7, r1
 23fb196:	f7e9 ff39 	bl	23e500c <__adddf3>
 23fb19a:	ec53 2b19 	vmov	r2, r3, d9
 23fb19e:	f7e9 ff35 	bl	23e500c <__adddf3>
 23fb1a2:	4689      	mov	r9, r1
 23fb1a4:	4642      	mov	r2, r8
 23fb1a6:	4650      	mov	r0, sl
 23fb1a8:	464b      	mov	r3, r9
 23fb1aa:	4659      	mov	r1, fp
 23fb1ac:	f7ea f8e4 	bl	23e5378 <__aeabi_dmul>
 23fb1b0:	2200      	movs	r2, #0
 23fb1b2:	4682      	mov	sl, r0
 23fb1b4:	468b      	mov	fp, r1
 23fb1b6:	4b65      	ldr	r3, [pc, #404]	; (23fb34c <__ieee754_pow+0x554>)
 23fb1b8:	4640      	mov	r0, r8
 23fb1ba:	4649      	mov	r1, r9
 23fb1bc:	f7e9 ff24 	bl	23e5008 <__aeabi_dsub>
 23fb1c0:	4632      	mov	r2, r6
 23fb1c2:	463b      	mov	r3, r7
 23fb1c4:	f7e9 ff20 	bl	23e5008 <__aeabi_dsub>
 23fb1c8:	4602      	mov	r2, r0
 23fb1ca:	460b      	mov	r3, r1
 23fb1cc:	ec51 0b19 	vmov	r0, r1, d9
 23fb1d0:	f7e9 ff1a 	bl	23e5008 <__aeabi_dsub>
 23fb1d4:	ec53 2b18 	vmov	r2, r3, d8
 23fb1d8:	f7ea f8ce 	bl	23e5378 <__aeabi_dmul>
 23fb1dc:	4606      	mov	r6, r0
 23fb1de:	460f      	mov	r7, r1
 23fb1e0:	4642      	mov	r2, r8
 23fb1e2:	464b      	mov	r3, r9
 23fb1e4:	ec51 0b1a 	vmov	r0, r1, d10
 23fb1e8:	f7ea f8c6 	bl	23e5378 <__aeabi_dmul>
 23fb1ec:	4602      	mov	r2, r0
 23fb1ee:	460b      	mov	r3, r1
 23fb1f0:	4630      	mov	r0, r6
 23fb1f2:	4639      	mov	r1, r7
 23fb1f4:	f7e9 ff0a 	bl	23e500c <__adddf3>
 23fb1f8:	4680      	mov	r8, r0
 23fb1fa:	4689      	mov	r9, r1
 23fb1fc:	4650      	mov	r0, sl
 23fb1fe:	4642      	mov	r2, r8
 23fb200:	4659      	mov	r1, fp
 23fb202:	464b      	mov	r3, r9
 23fb204:	f7e9 ff02 	bl	23e500c <__adddf3>
 23fb208:	2000      	movs	r0, #0
 23fb20a:	460f      	mov	r7, r1
 23fb20c:	4606      	mov	r6, r0
 23fb20e:	a342      	add	r3, pc, #264	; (adr r3, 23fb318 <__ieee754_pow+0x520>)
 23fb210:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb214:	f7ea f8b0 	bl	23e5378 <__aeabi_dmul>
 23fb218:	4652      	mov	r2, sl
 23fb21a:	465b      	mov	r3, fp
 23fb21c:	ec41 0b19 	vmov	d9, r0, r1
 23fb220:	4630      	mov	r0, r6
 23fb222:	4639      	mov	r1, r7
 23fb224:	f7e9 fef0 	bl	23e5008 <__aeabi_dsub>
 23fb228:	4602      	mov	r2, r0
 23fb22a:	460b      	mov	r3, r1
 23fb22c:	4640      	mov	r0, r8
 23fb22e:	4649      	mov	r1, r9
 23fb230:	f7e9 feea 	bl	23e5008 <__aeabi_dsub>
 23fb234:	a33a      	add	r3, pc, #232	; (adr r3, 23fb320 <__ieee754_pow+0x528>)
 23fb236:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb23a:	f7ea f89d 	bl	23e5378 <__aeabi_dmul>
 23fb23e:	4680      	mov	r8, r0
 23fb240:	4689      	mov	r9, r1
 23fb242:	4630      	mov	r0, r6
 23fb244:	4639      	mov	r1, r7
 23fb246:	a338      	add	r3, pc, #224	; (adr r3, 23fb328 <__ieee754_pow+0x530>)
 23fb248:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb24c:	f7ea f894 	bl	23e5378 <__aeabi_dmul>
 23fb250:	4602      	mov	r2, r0
 23fb252:	460b      	mov	r3, r1
 23fb254:	4640      	mov	r0, r8
 23fb256:	4649      	mov	r1, r9
 23fb258:	f7e9 fed8 	bl	23e500c <__adddf3>
 23fb25c:	ec53 2b1c 	vmov	r2, r3, d12
 23fb260:	f7e9 fed4 	bl	23e500c <__adddf3>
 23fb264:	4606      	mov	r6, r0
 23fb266:	460f      	mov	r7, r1
 23fb268:	9805      	ldr	r0, [sp, #20]
 23fb26a:	f7ea f81b 	bl	23e52a4 <__aeabi_i2d>
 23fb26e:	4632      	mov	r2, r6
 23fb270:	4680      	mov	r8, r0
 23fb272:	4689      	mov	r9, r1
 23fb274:	463b      	mov	r3, r7
 23fb276:	ec51 0b19 	vmov	r0, r1, d9
 23fb27a:	f7e9 fec7 	bl	23e500c <__adddf3>
 23fb27e:	ec53 2b1d 	vmov	r2, r3, d13
 23fb282:	f7e9 fec3 	bl	23e500c <__adddf3>
 23fb286:	4642      	mov	r2, r8
 23fb288:	464b      	mov	r3, r9
 23fb28a:	f7e9 febf 	bl	23e500c <__adddf3>
 23fb28e:	2000      	movs	r0, #0
 23fb290:	4642      	mov	r2, r8
 23fb292:	464b      	mov	r3, r9
 23fb294:	4682      	mov	sl, r0
 23fb296:	468b      	mov	fp, r1
 23fb298:	f7e9 feb6 	bl	23e5008 <__aeabi_dsub>
 23fb29c:	ec53 2b1d 	vmov	r2, r3, d13
 23fb2a0:	f7e9 feb2 	bl	23e5008 <__aeabi_dsub>
 23fb2a4:	ec53 2b19 	vmov	r2, r3, d9
 23fb2a8:	f7e9 feae 	bl	23e5008 <__aeabi_dsub>
 23fb2ac:	4602      	mov	r2, r0
 23fb2ae:	460b      	mov	r3, r1
 23fb2b0:	4630      	mov	r0, r6
 23fb2b2:	4639      	mov	r1, r7
 23fb2b4:	f7e9 fea8 	bl	23e5008 <__aeabi_dsub>
 23fb2b8:	9b00      	ldr	r3, [sp, #0]
 23fb2ba:	9a04      	ldr	r2, [sp, #16]
 23fb2bc:	3b01      	subs	r3, #1
 23fb2be:	4313      	orrs	r3, r2
 23fb2c0:	ec41 0b18 	vmov	d8, r0, r1
 23fb2c4:	f040 81dc 	bne.w	23fb680 <__ieee754_pow+0x888>
 23fb2c8:	ed9f 7b19 	vldr	d7, [pc, #100]	; 23fb330 <__ieee754_pow+0x538>
 23fb2cc:	eeb0 9a47 	vmov.f32	s18, s14
 23fb2d0:	eef0 9a67 	vmov.f32	s19, s15
 23fb2d4:	e03c      	b.n	23fb350 <__ieee754_pow+0x558>
 23fb2d6:	bf00      	nop
	...
 23fb2e4:	3ff00000 	.word	0x3ff00000
 23fb2e8:	4a454eef 	.word	0x4a454eef
 23fb2ec:	3fca7e28 	.word	0x3fca7e28
 23fb2f0:	93c9db65 	.word	0x93c9db65
 23fb2f4:	3fcd864a 	.word	0x3fcd864a
 23fb2f8:	a91d4101 	.word	0xa91d4101
 23fb2fc:	3fd17460 	.word	0x3fd17460
 23fb300:	518f264d 	.word	0x518f264d
 23fb304:	3fd55555 	.word	0x3fd55555
 23fb308:	db6fabff 	.word	0xdb6fabff
 23fb30c:	3fdb6db6 	.word	0x3fdb6db6
 23fb310:	33333303 	.word	0x33333303
 23fb314:	3fe33333 	.word	0x3fe33333
 23fb318:	e0000000 	.word	0xe0000000
 23fb31c:	3feec709 	.word	0x3feec709
 23fb320:	dc3a03fd 	.word	0xdc3a03fd
 23fb324:	3feec709 	.word	0x3feec709
 23fb328:	145b01f5 	.word	0x145b01f5
 23fb32c:	be3e2fe0 	.word	0xbe3e2fe0
 23fb330:	00000000 	.word	0x00000000
 23fb334:	bff00000 	.word	0xbff00000
 23fb338:	7ff00000 	.word	0x7ff00000
 23fb33c:	43400000 	.word	0x43400000
 23fb340:	3ff00000 	.word	0x3ff00000
 23fb344:	0003988e 	.word	0x0003988e
 23fb348:	000bb679 	.word	0x000bb679
 23fb34c:	40080000 	.word	0x40080000
 23fb350:	2300      	movs	r3, #0
 23fb352:	4620      	mov	r0, r4
 23fb354:	4629      	mov	r1, r5
 23fb356:	e9cd 4500 	strd	r4, r5, [sp]
 23fb35a:	9300      	str	r3, [sp, #0]
 23fb35c:	e9dd 8900 	ldrd	r8, r9, [sp]
 23fb360:	4642      	mov	r2, r8
 23fb362:	464b      	mov	r3, r9
 23fb364:	f7e9 fe50 	bl	23e5008 <__aeabi_dsub>
 23fb368:	465b      	mov	r3, fp
 23fb36a:	4652      	mov	r2, sl
 23fb36c:	f7ea f804 	bl	23e5378 <__aeabi_dmul>
 23fb370:	4606      	mov	r6, r0
 23fb372:	460f      	mov	r7, r1
 23fb374:	4622      	mov	r2, r4
 23fb376:	462b      	mov	r3, r5
 23fb378:	ec51 0b18 	vmov	r0, r1, d8
 23fb37c:	f7e9 fffc 	bl	23e5378 <__aeabi_dmul>
 23fb380:	4602      	mov	r2, r0
 23fb382:	460b      	mov	r3, r1
 23fb384:	4630      	mov	r0, r6
 23fb386:	4639      	mov	r1, r7
 23fb388:	f7e9 fe40 	bl	23e500c <__adddf3>
 23fb38c:	4642      	mov	r2, r8
 23fb38e:	4604      	mov	r4, r0
 23fb390:	460d      	mov	r5, r1
 23fb392:	464b      	mov	r3, r9
 23fb394:	4659      	mov	r1, fp
 23fb396:	4650      	mov	r0, sl
 23fb398:	46a0      	mov	r8, r4
 23fb39a:	f7e9 ffed 	bl	23e5378 <__aeabi_dmul>
 23fb39e:	4606      	mov	r6, r0
 23fb3a0:	460f      	mov	r7, r1
 23fb3a2:	4620      	mov	r0, r4
 23fb3a4:	4629      	mov	r1, r5
 23fb3a6:	4632      	mov	r2, r6
 23fb3a8:	463b      	mov	r3, r7
 23fb3aa:	46a9      	mov	r9, r5
 23fb3ac:	f7e9 fe2e 	bl	23e500c <__adddf3>
 23fb3b0:	4bd5      	ldr	r3, [pc, #852]	; (23fb708 <__ieee754_pow+0x910>)
 23fb3b2:	4604      	mov	r4, r0
 23fb3b4:	460d      	mov	r5, r1
 23fb3b6:	4299      	cmp	r1, r3
 23fb3b8:	468b      	mov	fp, r1
 23fb3ba:	f340 813b 	ble.w	23fb634 <__ieee754_pow+0x83c>
 23fb3be:	4bd3      	ldr	r3, [pc, #844]	; (23fb70c <__ieee754_pow+0x914>)
 23fb3c0:	440b      	add	r3, r1
 23fb3c2:	4303      	orrs	r3, r0
 23fb3c4:	f040 8235 	bne.w	23fb832 <__ieee754_pow+0xa3a>
 23fb3c8:	4640      	mov	r0, r8
 23fb3ca:	4649      	mov	r1, r9
 23fb3cc:	a3b6      	add	r3, pc, #728	; (adr r3, 23fb6a8 <__ieee754_pow+0x8b0>)
 23fb3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb3d2:	f7e9 fe1b 	bl	23e500c <__adddf3>
 23fb3d6:	4632      	mov	r2, r6
 23fb3d8:	463b      	mov	r3, r7
 23fb3da:	ec41 0b18 	vmov	d8, r0, r1
 23fb3de:	4620      	mov	r0, r4
 23fb3e0:	4629      	mov	r1, r5
 23fb3e2:	f7e9 fe11 	bl	23e5008 <__aeabi_dsub>
 23fb3e6:	4602      	mov	r2, r0
 23fb3e8:	460b      	mov	r3, r1
 23fb3ea:	ec51 0b18 	vmov	r0, r1, d8
 23fb3ee:	f7ea fa53 	bl	23e5898 <__aeabi_dcmpgt>
 23fb3f2:	2800      	cmp	r0, #0
 23fb3f4:	f040 821d 	bne.w	23fb832 <__ieee754_pow+0xa3a>
 23fb3f8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 23fb3fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 23fb400:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 23fb404:	4cc2      	ldr	r4, [pc, #776]	; (23fb710 <__ieee754_pow+0x918>)
 23fb406:	f1bb 0f00 	cmp.w	fp, #0
 23fb40a:	fa42 f303 	asr.w	r3, r2, r3
 23fb40e:	f04f 0000 	mov.w	r0, #0
 23fb412:	445b      	add	r3, fp
 23fb414:	f3c3 520a 	ubfx	r2, r3, #20, #11
 23fb418:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 23fb41c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 23fb420:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 23fb424:	fa44 f402 	asr.w	r4, r4, r2
 23fb428:	f1c2 0214 	rsb	r2, r2, #20
 23fb42c:	ea23 0104 	bic.w	r1, r3, r4
 23fb430:	fa4a fa02 	asr.w	sl, sl, r2
 23fb434:	4602      	mov	r2, r0
 23fb436:	4630      	mov	r0, r6
 23fb438:	460b      	mov	r3, r1
 23fb43a:	bfb8      	it	lt
 23fb43c:	f1ca 0a00 	rsblt	sl, sl, #0
 23fb440:	4639      	mov	r1, r7
 23fb442:	f7e9 fde1 	bl	23e5008 <__aeabi_dsub>
 23fb446:	4602      	mov	r2, r0
 23fb448:	460b      	mov	r3, r1
 23fb44a:	4606      	mov	r6, r0
 23fb44c:	460f      	mov	r7, r1
 23fb44e:	4640      	mov	r0, r8
 23fb450:	4649      	mov	r1, r9
 23fb452:	ea4f 5b0a 	mov.w	fp, sl, lsl #20
 23fb456:	f7e9 fdd9 	bl	23e500c <__adddf3>
 23fb45a:	460d      	mov	r5, r1
 23fb45c:	2400      	movs	r4, #0
 23fb45e:	4629      	mov	r1, r5
 23fb460:	a393      	add	r3, pc, #588	; (adr r3, 23fb6b0 <__ieee754_pow+0x8b8>)
 23fb462:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb466:	4620      	mov	r0, r4
 23fb468:	f7e9 ff86 	bl	23e5378 <__aeabi_dmul>
 23fb46c:	4632      	mov	r2, r6
 23fb46e:	463b      	mov	r3, r7
 23fb470:	4606      	mov	r6, r0
 23fb472:	460f      	mov	r7, r1
 23fb474:	4620      	mov	r0, r4
 23fb476:	4629      	mov	r1, r5
 23fb478:	f7e9 fdc6 	bl	23e5008 <__aeabi_dsub>
 23fb47c:	4602      	mov	r2, r0
 23fb47e:	460b      	mov	r3, r1
 23fb480:	4640      	mov	r0, r8
 23fb482:	4649      	mov	r1, r9
 23fb484:	f7e9 fdc0 	bl	23e5008 <__aeabi_dsub>
 23fb488:	a38b      	add	r3, pc, #556	; (adr r3, 23fb6b8 <__ieee754_pow+0x8c0>)
 23fb48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb48e:	f7e9 ff73 	bl	23e5378 <__aeabi_dmul>
 23fb492:	4680      	mov	r8, r0
 23fb494:	4689      	mov	r9, r1
 23fb496:	4620      	mov	r0, r4
 23fb498:	4629      	mov	r1, r5
 23fb49a:	a389      	add	r3, pc, #548	; (adr r3, 23fb6c0 <__ieee754_pow+0x8c8>)
 23fb49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb4a0:	f7e9 ff6a 	bl	23e5378 <__aeabi_dmul>
 23fb4a4:	4602      	mov	r2, r0
 23fb4a6:	460b      	mov	r3, r1
 23fb4a8:	4640      	mov	r0, r8
 23fb4aa:	4649      	mov	r1, r9
 23fb4ac:	f7e9 fdae 	bl	23e500c <__adddf3>
 23fb4b0:	4680      	mov	r8, r0
 23fb4b2:	4689      	mov	r9, r1
 23fb4b4:	4630      	mov	r0, r6
 23fb4b6:	4642      	mov	r2, r8
 23fb4b8:	4639      	mov	r1, r7
 23fb4ba:	464b      	mov	r3, r9
 23fb4bc:	f7e9 fda6 	bl	23e500c <__adddf3>
 23fb4c0:	4632      	mov	r2, r6
 23fb4c2:	4604      	mov	r4, r0
 23fb4c4:	460d      	mov	r5, r1
 23fb4c6:	463b      	mov	r3, r7
 23fb4c8:	f7e9 fd9e 	bl	23e5008 <__aeabi_dsub>
 23fb4cc:	4602      	mov	r2, r0
 23fb4ce:	460b      	mov	r3, r1
 23fb4d0:	4640      	mov	r0, r8
 23fb4d2:	4649      	mov	r1, r9
 23fb4d4:	f7e9 fd98 	bl	23e5008 <__aeabi_dsub>
 23fb4d8:	4622      	mov	r2, r4
 23fb4da:	4680      	mov	r8, r0
 23fb4dc:	4689      	mov	r9, r1
 23fb4de:	462b      	mov	r3, r5
 23fb4e0:	4620      	mov	r0, r4
 23fb4e2:	4629      	mov	r1, r5
 23fb4e4:	f7e9 ff48 	bl	23e5378 <__aeabi_dmul>
 23fb4e8:	4606      	mov	r6, r0
 23fb4ea:	460f      	mov	r7, r1
 23fb4ec:	a376      	add	r3, pc, #472	; (adr r3, 23fb6c8 <__ieee754_pow+0x8d0>)
 23fb4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb4f2:	f7e9 ff41 	bl	23e5378 <__aeabi_dmul>
 23fb4f6:	a376      	add	r3, pc, #472	; (adr r3, 23fb6d0 <__ieee754_pow+0x8d8>)
 23fb4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb4fc:	f7e9 fd84 	bl	23e5008 <__aeabi_dsub>
 23fb500:	4632      	mov	r2, r6
 23fb502:	463b      	mov	r3, r7
 23fb504:	f7e9 ff38 	bl	23e5378 <__aeabi_dmul>
 23fb508:	a373      	add	r3, pc, #460	; (adr r3, 23fb6d8 <__ieee754_pow+0x8e0>)
 23fb50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb50e:	f7e9 fd7d 	bl	23e500c <__adddf3>
 23fb512:	4632      	mov	r2, r6
 23fb514:	463b      	mov	r3, r7
 23fb516:	f7e9 ff2f 	bl	23e5378 <__aeabi_dmul>
 23fb51a:	a371      	add	r3, pc, #452	; (adr r3, 23fb6e0 <__ieee754_pow+0x8e8>)
 23fb51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb520:	f7e9 fd72 	bl	23e5008 <__aeabi_dsub>
 23fb524:	4632      	mov	r2, r6
 23fb526:	463b      	mov	r3, r7
 23fb528:	f7e9 ff26 	bl	23e5378 <__aeabi_dmul>
 23fb52c:	a36e      	add	r3, pc, #440	; (adr r3, 23fb6e8 <__ieee754_pow+0x8f0>)
 23fb52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb532:	f7e9 fd6b 	bl	23e500c <__adddf3>
 23fb536:	4632      	mov	r2, r6
 23fb538:	463b      	mov	r3, r7
 23fb53a:	f7e9 ff1d 	bl	23e5378 <__aeabi_dmul>
 23fb53e:	4602      	mov	r2, r0
 23fb540:	460b      	mov	r3, r1
 23fb542:	4620      	mov	r0, r4
 23fb544:	4629      	mov	r1, r5
 23fb546:	f7e9 fd5f 	bl	23e5008 <__aeabi_dsub>
 23fb54a:	4606      	mov	r6, r0
 23fb54c:	460f      	mov	r7, r1
 23fb54e:	4620      	mov	r0, r4
 23fb550:	4632      	mov	r2, r6
 23fb552:	4629      	mov	r1, r5
 23fb554:	463b      	mov	r3, r7
 23fb556:	f7e9 ff0f 	bl	23e5378 <__aeabi_dmul>
 23fb55a:	2200      	movs	r2, #0
 23fb55c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 23fb560:	ec41 0b18 	vmov	d8, r0, r1
 23fb564:	4630      	mov	r0, r6
 23fb566:	4639      	mov	r1, r7
 23fb568:	f7e9 fd4e 	bl	23e5008 <__aeabi_dsub>
 23fb56c:	4602      	mov	r2, r0
 23fb56e:	460b      	mov	r3, r1
 23fb570:	ec51 0b18 	vmov	r0, r1, d8
 23fb574:	f7ea f82a 	bl	23e55cc <__aeabi_ddiv>
 23fb578:	4642      	mov	r2, r8
 23fb57a:	4606      	mov	r6, r0
 23fb57c:	460f      	mov	r7, r1
 23fb57e:	464b      	mov	r3, r9
 23fb580:	4620      	mov	r0, r4
 23fb582:	4629      	mov	r1, r5
 23fb584:	f7e9 fef8 	bl	23e5378 <__aeabi_dmul>
 23fb588:	4642      	mov	r2, r8
 23fb58a:	464b      	mov	r3, r9
 23fb58c:	f7e9 fd3e 	bl	23e500c <__adddf3>
 23fb590:	4602      	mov	r2, r0
 23fb592:	460b      	mov	r3, r1
 23fb594:	4630      	mov	r0, r6
 23fb596:	4639      	mov	r1, r7
 23fb598:	f7e9 fd36 	bl	23e5008 <__aeabi_dsub>
 23fb59c:	4622      	mov	r2, r4
 23fb59e:	462b      	mov	r3, r5
 23fb5a0:	f7e9 fd32 	bl	23e5008 <__aeabi_dsub>
 23fb5a4:	4602      	mov	r2, r0
 23fb5a6:	460b      	mov	r3, r1
 23fb5a8:	2000      	movs	r0, #0
 23fb5aa:	495a      	ldr	r1, [pc, #360]	; (23fb714 <__ieee754_pow+0x91c>)
 23fb5ac:	f7e9 fd2c 	bl	23e5008 <__aeabi_dsub>
 23fb5b0:	448b      	add	fp, r1
 23fb5b2:	4602      	mov	r2, r0
 23fb5b4:	460b      	mov	r3, r1
 23fb5b6:	f5bb 1f80 	cmp.w	fp, #1048576	; 0x100000
 23fb5ba:	f2c0 816c 	blt.w	23fb896 <__ieee754_pow+0xa9e>
 23fb5be:	4659      	mov	r1, fp
 23fb5c0:	ec53 2b19 	vmov	r2, r3, d9
 23fb5c4:	f7e9 fed8 	bl	23e5378 <__aeabi_dmul>
 23fb5c8:	ec41 0b10 	vmov	d0, r0, r1
 23fb5cc:	e442      	b.n	23fae54 <__ieee754_pow+0x5c>
 23fb5ce:	ec47 6b10 	vmov	d0, r6, r7
 23fb5d2:	9200      	str	r2, [sp, #0]
 23fb5d4:	f7ff f938 	bl	23fa848 <fabs>
 23fb5d8:	9a00      	ldr	r2, [sp, #0]
 23fb5da:	2a00      	cmp	r2, #0
 23fb5dc:	f47f acbd 	bne.w	23faf5a <__ieee754_pow+0x162>
 23fb5e0:	f029 4340 	bic.w	r3, r9, #3221225472	; 0xc0000000
 23fb5e4:	4a4b      	ldr	r2, [pc, #300]	; (23fb714 <__ieee754_pow+0x91c>)
 23fb5e6:	4293      	cmp	r3, r2
 23fb5e8:	d003      	beq.n	23fb5f2 <__ieee754_pow+0x7fa>
 23fb5ea:	f1b8 0f00 	cmp.w	r8, #0
 23fb5ee:	f47f acb4 	bne.w	23faf5a <__ieee754_pow+0x162>
 23fb5f2:	2300      	movs	r3, #0
 23fb5f4:	9300      	str	r3, [sp, #0]
 23fb5f6:	f1bb 0f00 	cmp.w	fp, #0
 23fb5fa:	da07      	bge.n	23fb60c <__ieee754_pow+0x814>
 23fb5fc:	2000      	movs	r0, #0
 23fb5fe:	4945      	ldr	r1, [pc, #276]	; (23fb714 <__ieee754_pow+0x91c>)
 23fb600:	ec53 2b10 	vmov	r2, r3, d0
 23fb604:	f7e9 ffe2 	bl	23e55cc <__aeabi_ddiv>
 23fb608:	ec41 0b10 	vmov	d0, r0, r1
 23fb60c:	f1b9 0f00 	cmp.w	r9, #0
 23fb610:	f6bf ac20 	bge.w	23fae54 <__ieee754_pow+0x5c>
 23fb614:	4b40      	ldr	r3, [pc, #256]	; (23fb718 <__ieee754_pow+0x920>)
 23fb616:	9a00      	ldr	r2, [sp, #0]
 23fb618:	4443      	add	r3, r8
 23fb61a:	4313      	orrs	r3, r2
 23fb61c:	f040 812d 	bne.w	23fb87a <__ieee754_pow+0xa82>
 23fb620:	ec53 2b10 	vmov	r2, r3, d0
 23fb624:	e49b      	b.n	23faf5e <__ieee754_pow+0x166>
 23fb626:	f1bb 0f00 	cmp.w	fp, #0
 23fb62a:	f6ff ac57 	blt.w	23faedc <__ieee754_pow+0xe4>
 23fb62e:	ed9f 0b30 	vldr	d0, [pc, #192]	; 23fb6f0 <__ieee754_pow+0x8f8>
 23fb632:	e40f      	b.n	23fae54 <__ieee754_pow+0x5c>
 23fb634:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23fb638:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 23fb720 <__ieee754_pow+0x928>
 23fb63c:	4563      	cmp	r3, ip
 23fb63e:	f340 80f0 	ble.w	23fb822 <__ieee754_pow+0xa2a>
 23fb642:	4b36      	ldr	r3, [pc, #216]	; (23fb71c <__ieee754_pow+0x924>)
 23fb644:	440b      	add	r3, r1
 23fb646:	4303      	orrs	r3, r0
 23fb648:	d10a      	bne.n	23fb660 <__ieee754_pow+0x868>
 23fb64a:	4632      	mov	r2, r6
 23fb64c:	463b      	mov	r3, r7
 23fb64e:	f7e9 fcdb 	bl	23e5008 <__aeabi_dsub>
 23fb652:	4642      	mov	r2, r8
 23fb654:	464b      	mov	r3, r9
 23fb656:	f7ea f915 	bl	23e5884 <__aeabi_dcmpge>
 23fb65a:	2800      	cmp	r0, #0
 23fb65c:	f43f aecc 	beq.w	23fb3f8 <__ieee754_pow+0x600>
 23fb660:	a325      	add	r3, pc, #148	; (adr r3, 23fb6f8 <__ieee754_pow+0x900>)
 23fb662:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb666:	ec51 0b19 	vmov	r0, r1, d9
 23fb66a:	f7e9 fe85 	bl	23e5378 <__aeabi_dmul>
 23fb66e:	a322      	add	r3, pc, #136	; (adr r3, 23fb6f8 <__ieee754_pow+0x900>)
 23fb670:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb674:	f7e9 fe80 	bl	23e5378 <__aeabi_dmul>
 23fb678:	ec41 0b10 	vmov	d0, r0, r1
 23fb67c:	f7ff bbea 	b.w	23fae54 <__ieee754_pow+0x5c>
 23fb680:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 23fb700 <__ieee754_pow+0x908>
 23fb684:	eeb0 9a47 	vmov.f32	s18, s14
 23fb688:	eef0 9a67 	vmov.f32	s19, s15
 23fb68c:	e660      	b.n	23fb350 <__ieee754_pow+0x558>
 23fb68e:	f1bb 0f00 	cmp.w	fp, #0
 23fb692:	dacc      	bge.n	23fb62e <__ieee754_pow+0x836>
 23fb694:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 23fb698:	ee00 4a10 	vmov	s0, r4
 23fb69c:	ee00 3a90 	vmov	s1, r3
 23fb6a0:	f7ff bbd8 	b.w	23fae54 <__ieee754_pow+0x5c>
 23fb6a4:	f3af 8000 	nop.w
 23fb6a8:	652b82fe 	.word	0x652b82fe
 23fb6ac:	3c971547 	.word	0x3c971547
 23fb6b0:	00000000 	.word	0x00000000
 23fb6b4:	3fe62e43 	.word	0x3fe62e43
 23fb6b8:	fefa39ef 	.word	0xfefa39ef
 23fb6bc:	3fe62e42 	.word	0x3fe62e42
 23fb6c0:	0ca86c39 	.word	0x0ca86c39
 23fb6c4:	be205c61 	.word	0xbe205c61
 23fb6c8:	72bea4d0 	.word	0x72bea4d0
 23fb6cc:	3e663769 	.word	0x3e663769
 23fb6d0:	c5d26bf1 	.word	0xc5d26bf1
 23fb6d4:	3ebbbd41 	.word	0x3ebbbd41
 23fb6d8:	af25de2c 	.word	0xaf25de2c
 23fb6dc:	3f11566a 	.word	0x3f11566a
 23fb6e0:	16bebd93 	.word	0x16bebd93
 23fb6e4:	3f66c16c 	.word	0x3f66c16c
 23fb6e8:	5555553e 	.word	0x5555553e
 23fb6ec:	3fc55555 	.word	0x3fc55555
	...
 23fb6f8:	c2f8f359 	.word	0xc2f8f359
 23fb6fc:	01a56e1f 	.word	0x01a56e1f
 23fb700:	00000000 	.word	0x00000000
 23fb704:	3ff00000 	.word	0x3ff00000
 23fb708:	408fffff 	.word	0x408fffff
 23fb70c:	bf700000 	.word	0xbf700000
 23fb710:	000fffff 	.word	0x000fffff
 23fb714:	3ff00000 	.word	0x3ff00000
 23fb718:	c0100000 	.word	0xc0100000
 23fb71c:	3f6f3400 	.word	0x3f6f3400
 23fb720:	4090cbff 	.word	0x4090cbff
 23fb724:	4598      	cmp	r8, r3
 23fb726:	f6ff af7e 	blt.w	23fb626 <__ieee754_pow+0x82e>
 23fb72a:	4b79      	ldr	r3, [pc, #484]	; (23fb910 <__ieee754_pow+0xb18>)
 23fb72c:	4598      	cmp	r8, r3
 23fb72e:	f73f abd1 	bgt.w	23faed4 <__ieee754_pow+0xdc>
 23fb732:	2200      	movs	r2, #0
 23fb734:	4b76      	ldr	r3, [pc, #472]	; (23fb910 <__ieee754_pow+0xb18>)
 23fb736:	ec51 0b10 	vmov	r0, r1, d0
 23fb73a:	f7e9 fc65 	bl	23e5008 <__aeabi_dsub>
 23fb73e:	4606      	mov	r6, r0
 23fb740:	460f      	mov	r7, r1
 23fb742:	a363      	add	r3, pc, #396	; (adr r3, 23fb8d0 <__ieee754_pow+0xad8>)
 23fb744:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb748:	f7e9 fe16 	bl	23e5378 <__aeabi_dmul>
 23fb74c:	4682      	mov	sl, r0
 23fb74e:	468b      	mov	fp, r1
 23fb750:	4630      	mov	r0, r6
 23fb752:	4639      	mov	r1, r7
 23fb754:	a360      	add	r3, pc, #384	; (adr r3, 23fb8d8 <__ieee754_pow+0xae0>)
 23fb756:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb75a:	f7e9 fe0d 	bl	23e5378 <__aeabi_dmul>
 23fb75e:	2200      	movs	r2, #0
 23fb760:	4b6c      	ldr	r3, [pc, #432]	; (23fb914 <__ieee754_pow+0xb1c>)
 23fb762:	ec41 0b18 	vmov	d8, r0, r1
 23fb766:	4630      	mov	r0, r6
 23fb768:	4639      	mov	r1, r7
 23fb76a:	f7e9 fe05 	bl	23e5378 <__aeabi_dmul>
 23fb76e:	4602      	mov	r2, r0
 23fb770:	460b      	mov	r3, r1
 23fb772:	a15b      	add	r1, pc, #364	; (adr r1, 23fb8e0 <__ieee754_pow+0xae8>)
 23fb774:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fb778:	f7e9 fc46 	bl	23e5008 <__aeabi_dsub>
 23fb77c:	4632      	mov	r2, r6
 23fb77e:	463b      	mov	r3, r7
 23fb780:	f7e9 fdfa 	bl	23e5378 <__aeabi_dmul>
 23fb784:	4602      	mov	r2, r0
 23fb786:	460b      	mov	r3, r1
 23fb788:	2000      	movs	r0, #0
 23fb78a:	4963      	ldr	r1, [pc, #396]	; (23fb918 <__ieee754_pow+0xb20>)
 23fb78c:	f7e9 fc3c 	bl	23e5008 <__aeabi_dsub>
 23fb790:	4680      	mov	r8, r0
 23fb792:	4689      	mov	r9, r1
 23fb794:	4632      	mov	r2, r6
 23fb796:	463b      	mov	r3, r7
 23fb798:	4630      	mov	r0, r6
 23fb79a:	4639      	mov	r1, r7
 23fb79c:	f7e9 fdec 	bl	23e5378 <__aeabi_dmul>
 23fb7a0:	4602      	mov	r2, r0
 23fb7a2:	460b      	mov	r3, r1
 23fb7a4:	4640      	mov	r0, r8
 23fb7a6:	4649      	mov	r1, r9
 23fb7a8:	f7e9 fde6 	bl	23e5378 <__aeabi_dmul>
 23fb7ac:	a34e      	add	r3, pc, #312	; (adr r3, 23fb8e8 <__ieee754_pow+0xaf0>)
 23fb7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb7b2:	f7e9 fde1 	bl	23e5378 <__aeabi_dmul>
 23fb7b6:	4602      	mov	r2, r0
 23fb7b8:	460b      	mov	r3, r1
 23fb7ba:	ec51 0b18 	vmov	r0, r1, d8
 23fb7be:	f7e9 fc23 	bl	23e5008 <__aeabi_dsub>
 23fb7c2:	4606      	mov	r6, r0
 23fb7c4:	460f      	mov	r7, r1
 23fb7c6:	4650      	mov	r0, sl
 23fb7c8:	4659      	mov	r1, fp
 23fb7ca:	4632      	mov	r2, r6
 23fb7cc:	463b      	mov	r3, r7
 23fb7ce:	f7e9 fc1d 	bl	23e500c <__adddf3>
 23fb7d2:	2000      	movs	r0, #0
 23fb7d4:	4652      	mov	r2, sl
 23fb7d6:	465b      	mov	r3, fp
 23fb7d8:	4682      	mov	sl, r0
 23fb7da:	468b      	mov	fp, r1
 23fb7dc:	e564      	b.n	23fb2a8 <__ieee754_pow+0x4b0>
 23fb7de:	4632      	mov	r2, r6
 23fb7e0:	463b      	mov	r3, r7
 23fb7e2:	4630      	mov	r0, r6
 23fb7e4:	4639      	mov	r1, r7
 23fb7e6:	f7e9 fdc7 	bl	23e5378 <__aeabi_dmul>
 23fb7ea:	ec41 0b10 	vmov	d0, r0, r1
 23fb7ee:	f7ff bb31 	b.w	23fae54 <__ieee754_pow+0x5c>
 23fb7f2:	2000      	movs	r0, #0
 23fb7f4:	4946      	ldr	r1, [pc, #280]	; (23fb910 <__ieee754_pow+0xb18>)
 23fb7f6:	4632      	mov	r2, r6
 23fb7f8:	463b      	mov	r3, r7
 23fb7fa:	f7e9 fee7 	bl	23e55cc <__aeabi_ddiv>
 23fb7fe:	ec41 0b10 	vmov	d0, r0, r1
 23fb802:	f7ff bb27 	b.w	23fae54 <__ieee754_pow+0x5c>
 23fb806:	2b00      	cmp	r3, #0
 23fb808:	f47f aee1 	bne.w	23fb5ce <__ieee754_pow+0x7d6>
 23fb80c:	f1c1 0114 	rsb	r1, r1, #20
 23fb810:	fa4a f001 	asr.w	r0, sl, r1
 23fb814:	fa00 f101 	lsl.w	r1, r0, r1
 23fb818:	4551      	cmp	r1, sl
 23fb81a:	d04d      	beq.n	23fb8b8 <__ieee754_pow+0xac0>
 23fb81c:	9300      	str	r3, [sp, #0]
 23fb81e:	f7ff bb27 	b.w	23fae70 <__ieee754_pow+0x78>
 23fb822:	4a3d      	ldr	r2, [pc, #244]	; (23fb918 <__ieee754_pow+0xb20>)
 23fb824:	4293      	cmp	r3, r2
 23fb826:	dc4e      	bgt.n	23fb8c6 <__ieee754_pow+0xace>
 23fb828:	e9dd 2300 	ldrd	r2, r3, [sp]
 23fb82c:	4693      	mov	fp, r2
 23fb82e:	4692      	mov	sl, r2
 23fb830:	e614      	b.n	23fb45c <__ieee754_pow+0x664>
 23fb832:	a32f      	add	r3, pc, #188	; (adr r3, 23fb8f0 <__ieee754_pow+0xaf8>)
 23fb834:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb838:	ec51 0b19 	vmov	r0, r1, d9
 23fb83c:	f7e9 fd9c 	bl	23e5378 <__aeabi_dmul>
 23fb840:	a32b      	add	r3, pc, #172	; (adr r3, 23fb8f0 <__ieee754_pow+0xaf8>)
 23fb842:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb846:	f7e9 fd97 	bl	23e5378 <__aeabi_dmul>
 23fb84a:	ec41 0b10 	vmov	d0, r0, r1
 23fb84e:	f7ff bb01 	b.w	23fae54 <__ieee754_pow+0x5c>
 23fb852:	ed9f 7b29 	vldr	d7, [pc, #164]	; 23fb8f8 <__ieee754_pow+0xb00>
 23fb856:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 23fb85a:	eeb0 da47 	vmov.f32	s26, s14
 23fb85e:	eef0 da67 	vmov.f32	s27, s15
 23fb862:	ed9f 7b27 	vldr	d7, [pc, #156]	; 23fb900 <__ieee754_pow+0xb08>
 23fb866:	eeb0 ca47 	vmov.f32	s24, s14
 23fb86a:	eef0 ca67 	vmov.f32	s25, s15
 23fb86e:	ed9f 7b26 	vldr	d7, [pc, #152]	; 23fb908 <__ieee754_pow+0xb10>
 23fb872:	ec51 0b17 	vmov	r0, r1, d7
 23fb876:	f7ff bbcc 	b.w	23fb012 <__ieee754_pow+0x21a>
 23fb87a:	9b00      	ldr	r3, [sp, #0]
 23fb87c:	2b01      	cmp	r3, #1
 23fb87e:	f47f aae9 	bne.w	23fae54 <__ieee754_pow+0x5c>
 23fb882:	ee10 1a90 	vmov	r1, s1
 23fb886:	ee10 2a10 	vmov	r2, s0
 23fb88a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fb88e:	ec43 2b10 	vmov	d0, r2, r3
 23fb892:	f7ff badf 	b.w	23fae54 <__ieee754_pow+0x5c>
 23fb896:	4650      	mov	r0, sl
 23fb898:	ec43 2b10 	vmov	d0, r2, r3
 23fb89c:	f7fe ffe0 	bl	23fa860 <scalbn>
 23fb8a0:	ec51 0b10 	vmov	r0, r1, d0
 23fb8a4:	e68c      	b.n	23fb5c0 <__ieee754_pow+0x7c8>
 23fb8a6:	ec47 6b10 	vmov	d0, r6, r7
 23fb8aa:	b007      	add	sp, #28
 23fb8ac:	ecbd 8b0c 	vpop	{d8-d13}
 23fb8b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb8b4:	f000 ba5a 	b.w	23fbd6c <__ieee754_sqrt>
 23fb8b8:	f000 0001 	and.w	r0, r0, #1
 23fb8bc:	f1c0 0302 	rsb	r3, r0, #2
 23fb8c0:	9300      	str	r3, [sp, #0]
 23fb8c2:	f7ff bad5 	b.w	23fae70 <__ieee754_pow+0x78>
 23fb8c6:	151b      	asrs	r3, r3, #20
 23fb8c8:	e598      	b.n	23fb3fc <__ieee754_pow+0x604>
 23fb8ca:	bf00      	nop
 23fb8cc:	f3af 8000 	nop.w
 23fb8d0:	60000000 	.word	0x60000000
 23fb8d4:	3ff71547 	.word	0x3ff71547
 23fb8d8:	f85ddf44 	.word	0xf85ddf44
 23fb8dc:	3e54ae0b 	.word	0x3e54ae0b
 23fb8e0:	55555555 	.word	0x55555555
 23fb8e4:	3fd55555 	.word	0x3fd55555
 23fb8e8:	652b82fe 	.word	0x652b82fe
 23fb8ec:	3ff71547 	.word	0x3ff71547
 23fb8f0:	8800759c 	.word	0x8800759c
 23fb8f4:	7e37e43c 	.word	0x7e37e43c
 23fb8f8:	40000000 	.word	0x40000000
 23fb8fc:	3fe2b803 	.word	0x3fe2b803
 23fb900:	43cfd006 	.word	0x43cfd006
 23fb904:	3e4cfdeb 	.word	0x3e4cfdeb
 23fb908:	00000000 	.word	0x00000000
 23fb90c:	3ff80000 	.word	0x3ff80000
 23fb910:	3ff00000 	.word	0x3ff00000
 23fb914:	3fd00000 	.word	0x3fd00000
 23fb918:	3fe00000 	.word	0x3fe00000
 23fb91c:	00000000 	.word	0x00000000

023fb920 <__ieee754_rem_pio2>:
 23fb920:	ec53 2b10 	vmov	r2, r3, d0
 23fb924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb928:	4991      	ldr	r1, [pc, #580]	; (23fbb70 <__ieee754_rem_pio2+0x250>)
 23fb92a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 23fb92e:	4604      	mov	r4, r0
 23fb930:	428d      	cmp	r5, r1
 23fb932:	ed2d 8b06 	vpush	{d8-d10}
 23fb936:	b08b      	sub	sp, #44	; 0x2c
 23fb938:	f340 808c 	ble.w	23fba54 <__ieee754_rem_pio2+0x134>
 23fb93c:	498d      	ldr	r1, [pc, #564]	; (23fbb74 <__ieee754_rem_pio2+0x254>)
 23fb93e:	461f      	mov	r7, r3
 23fb940:	428d      	cmp	r5, r1
 23fb942:	dc2b      	bgt.n	23fb99c <__ieee754_rem_pio2+0x7c>
 23fb944:	2f00      	cmp	r7, #0
 23fb946:	4619      	mov	r1, r3
 23fb948:	ee10 0a10 	vmov	r0, s0
 23fb94c:	a37e      	add	r3, pc, #504	; (adr r3, 23fbb48 <__ieee754_rem_pio2+0x228>)
 23fb94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb952:	f340 81b8 	ble.w	23fbcc6 <__ieee754_rem_pio2+0x3a6>
 23fb956:	f7e9 fb57 	bl	23e5008 <__aeabi_dsub>
 23fb95a:	4b87      	ldr	r3, [pc, #540]	; (23fbb78 <__ieee754_rem_pio2+0x258>)
 23fb95c:	4680      	mov	r8, r0
 23fb95e:	4689      	mov	r9, r1
 23fb960:	429d      	cmp	r5, r3
 23fb962:	f000 808f 	beq.w	23fba84 <__ieee754_rem_pio2+0x164>
 23fb966:	2601      	movs	r6, #1
 23fb968:	a379      	add	r3, pc, #484	; (adr r3, 23fbb50 <__ieee754_rem_pio2+0x230>)
 23fb96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb96e:	f7e9 fb4b 	bl	23e5008 <__aeabi_dsub>
 23fb972:	4602      	mov	r2, r0
 23fb974:	460b      	mov	r3, r1
 23fb976:	4640      	mov	r0, r8
 23fb978:	4649      	mov	r1, r9
 23fb97a:	e9c4 2300 	strd	r2, r3, [r4]
 23fb97e:	f7e9 fb43 	bl	23e5008 <__aeabi_dsub>
 23fb982:	a373      	add	r3, pc, #460	; (adr r3, 23fbb50 <__ieee754_rem_pio2+0x230>)
 23fb984:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb988:	f7e9 fb3e 	bl	23e5008 <__aeabi_dsub>
 23fb98c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fb990:	4630      	mov	r0, r6
 23fb992:	b00b      	add	sp, #44	; 0x2c
 23fb994:	ecbd 8b06 	vpop	{d8-d10}
 23fb998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb99c:	4977      	ldr	r1, [pc, #476]	; (23fbb7c <__ieee754_rem_pio2+0x25c>)
 23fb99e:	428d      	cmp	r5, r1
 23fb9a0:	f340 8092 	ble.w	23fbac8 <__ieee754_rem_pio2+0x1a8>
 23fb9a4:	4976      	ldr	r1, [pc, #472]	; (23fbb80 <__ieee754_rem_pio2+0x260>)
 23fb9a6:	428d      	cmp	r5, r1
 23fb9a8:	dc61      	bgt.n	23fba6e <__ieee754_rem_pio2+0x14e>
 23fb9aa:	152e      	asrs	r6, r5, #20
 23fb9ac:	ee10 0a10 	vmov	r0, s0
 23fb9b0:	4690      	mov	r8, r2
 23fb9b2:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 23fb9b6:	eba5 5106 	sub.w	r1, r5, r6, lsl #20
 23fb9ba:	4689      	mov	r9, r1
 23fb9bc:	f7e9 ff8c 	bl	23e58d8 <__aeabi_d2iz>
 23fb9c0:	f7e9 fc70 	bl	23e52a4 <__aeabi_i2d>
 23fb9c4:	4602      	mov	r2, r0
 23fb9c6:	460b      	mov	r3, r1
 23fb9c8:	4640      	mov	r0, r8
 23fb9ca:	4649      	mov	r1, r9
 23fb9cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 23fb9d0:	f7e9 fb1a 	bl	23e5008 <__aeabi_dsub>
 23fb9d4:	2200      	movs	r2, #0
 23fb9d6:	4b6b      	ldr	r3, [pc, #428]	; (23fbb84 <__ieee754_rem_pio2+0x264>)
 23fb9d8:	f7e9 fcce 	bl	23e5378 <__aeabi_dmul>
 23fb9dc:	4689      	mov	r9, r1
 23fb9de:	4680      	mov	r8, r0
 23fb9e0:	f7e9 ff7a 	bl	23e58d8 <__aeabi_d2iz>
 23fb9e4:	4605      	mov	r5, r0
 23fb9e6:	f7e9 fc5d 	bl	23e52a4 <__aeabi_i2d>
 23fb9ea:	4602      	mov	r2, r0
 23fb9ec:	460b      	mov	r3, r1
 23fb9ee:	4640      	mov	r0, r8
 23fb9f0:	4649      	mov	r1, r9
 23fb9f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 23fb9f6:	f7e9 fb07 	bl	23e5008 <__aeabi_dsub>
 23fb9fa:	2200      	movs	r2, #0
 23fb9fc:	4b61      	ldr	r3, [pc, #388]	; (23fbb84 <__ieee754_rem_pio2+0x264>)
 23fb9fe:	f7e9 fcbb 	bl	23e5378 <__aeabi_dmul>
 23fba02:	4602      	mov	r2, r0
 23fba04:	460b      	mov	r3, r1
 23fba06:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23fba0a:	2200      	movs	r2, #0
 23fba0c:	2300      	movs	r3, #0
 23fba0e:	f7e9 ff1b 	bl	23e5848 <__aeabi_dcmpeq>
 23fba12:	2800      	cmp	r0, #0
 23fba14:	f000 8155 	beq.w	23fbcc2 <__ieee754_rem_pio2+0x3a2>
 23fba18:	2d00      	cmp	r5, #0
 23fba1a:	bf0c      	ite	eq
 23fba1c:	2301      	moveq	r3, #1
 23fba1e:	2302      	movne	r3, #2
 23fba20:	4959      	ldr	r1, [pc, #356]	; (23fbb88 <__ieee754_rem_pio2+0x268>)
 23fba22:	4632      	mov	r2, r6
 23fba24:	a804      	add	r0, sp, #16
 23fba26:	9101      	str	r1, [sp, #4]
 23fba28:	2102      	movs	r1, #2
 23fba2a:	9100      	str	r1, [sp, #0]
 23fba2c:	4621      	mov	r1, r4
 23fba2e:	f000 fb9f 	bl	23fc170 <__kernel_rem_pio2>
 23fba32:	2f00      	cmp	r7, #0
 23fba34:	4606      	mov	r6, r0
 23fba36:	daab      	bge.n	23fb990 <__ieee754_rem_pio2+0x70>
 23fba38:	6861      	ldr	r1, [r4, #4]
 23fba3a:	4246      	negs	r6, r0
 23fba3c:	6822      	ldr	r2, [r4, #0]
 23fba3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fba42:	68e1      	ldr	r1, [r4, #12]
 23fba44:	e9c4 2300 	strd	r2, r3, [r4]
 23fba48:	68a2      	ldr	r2, [r4, #8]
 23fba4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fba4e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 23fba52:	e79d      	b.n	23fb990 <__ieee754_rem_pio2+0x70>
 23fba54:	2000      	movs	r0, #0
 23fba56:	2100      	movs	r1, #0
 23fba58:	2600      	movs	r6, #0
 23fba5a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fba5e:	4630      	mov	r0, r6
 23fba60:	ed84 0b00 	vstr	d0, [r4]
 23fba64:	b00b      	add	sp, #44	; 0x2c
 23fba66:	ecbd 8b06 	vpop	{d8-d10}
 23fba6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fba6e:	ee10 0a10 	vmov	r0, s0
 23fba72:	4619      	mov	r1, r3
 23fba74:	f7e9 fac8 	bl	23e5008 <__aeabi_dsub>
 23fba78:	2600      	movs	r6, #0
 23fba7a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fba7e:	e9c4 0100 	strd	r0, r1, [r4]
 23fba82:	e785      	b.n	23fb990 <__ieee754_rem_pio2+0x70>
 23fba84:	a334      	add	r3, pc, #208	; (adr r3, 23fbb58 <__ieee754_rem_pio2+0x238>)
 23fba86:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fba8a:	f7e9 fabd 	bl	23e5008 <__aeabi_dsub>
 23fba8e:	4680      	mov	r8, r0
 23fba90:	4689      	mov	r9, r1
 23fba92:	2601      	movs	r6, #1
 23fba94:	a332      	add	r3, pc, #200	; (adr r3, 23fbb60 <__ieee754_rem_pio2+0x240>)
 23fba96:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fba9a:	f7e9 fab5 	bl	23e5008 <__aeabi_dsub>
 23fba9e:	4602      	mov	r2, r0
 23fbaa0:	460b      	mov	r3, r1
 23fbaa2:	4640      	mov	r0, r8
 23fbaa4:	4649      	mov	r1, r9
 23fbaa6:	e9c4 2300 	strd	r2, r3, [r4]
 23fbaaa:	f7e9 faad 	bl	23e5008 <__aeabi_dsub>
 23fbaae:	a32c      	add	r3, pc, #176	; (adr r3, 23fbb60 <__ieee754_rem_pio2+0x240>)
 23fbab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbab4:	f7e9 faa8 	bl	23e5008 <__aeabi_dsub>
 23fbab8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fbabc:	4630      	mov	r0, r6
 23fbabe:	b00b      	add	sp, #44	; 0x2c
 23fbac0:	ecbd 8b06 	vpop	{d8-d10}
 23fbac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fbac8:	f7fe febe 	bl	23fa848 <fabs>
 23fbacc:	ee10 0a10 	vmov	r0, s0
 23fbad0:	ec59 8b10 	vmov	r8, r9, d0
 23fbad4:	a324      	add	r3, pc, #144	; (adr r3, 23fbb68 <__ieee754_rem_pio2+0x248>)
 23fbad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbada:	4649      	mov	r1, r9
 23fbadc:	f7e9 fc4c 	bl	23e5378 <__aeabi_dmul>
 23fbae0:	2200      	movs	r2, #0
 23fbae2:	4b2a      	ldr	r3, [pc, #168]	; (23fbb8c <__ieee754_rem_pio2+0x26c>)
 23fbae4:	f7e9 fa92 	bl	23e500c <__adddf3>
 23fbae8:	f7e9 fef6 	bl	23e58d8 <__aeabi_d2iz>
 23fbaec:	4606      	mov	r6, r0
 23fbaee:	f7e9 fbd9 	bl	23e52a4 <__aeabi_i2d>
 23fbaf2:	4602      	mov	r2, r0
 23fbaf4:	460b      	mov	r3, r1
 23fbaf6:	ec43 2b18 	vmov	d8, r2, r3
 23fbafa:	a313      	add	r3, pc, #76	; (adr r3, 23fbb48 <__ieee754_rem_pio2+0x228>)
 23fbafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbb00:	f7e9 fc3a 	bl	23e5378 <__aeabi_dmul>
 23fbb04:	4602      	mov	r2, r0
 23fbb06:	460b      	mov	r3, r1
 23fbb08:	4640      	mov	r0, r8
 23fbb0a:	4649      	mov	r1, r9
 23fbb0c:	eeb0 9a48 	vmov.f32	s18, s16
 23fbb10:	eef0 9a68 	vmov.f32	s19, s17
 23fbb14:	f7e9 fa78 	bl	23e5008 <__aeabi_dsub>
 23fbb18:	4682      	mov	sl, r0
 23fbb1a:	468b      	mov	fp, r1
 23fbb1c:	a30c      	add	r3, pc, #48	; (adr r3, 23fbb50 <__ieee754_rem_pio2+0x230>)
 23fbb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbb22:	ec51 0b18 	vmov	r0, r1, d8
 23fbb26:	f7e9 fc27 	bl	23e5378 <__aeabi_dmul>
 23fbb2a:	2e1f      	cmp	r6, #31
 23fbb2c:	ec41 0b18 	vmov	d8, r0, r1
 23fbb30:	dc30      	bgt.n	23fbb94 <__ieee754_rem_pio2+0x274>
 23fbb32:	4b17      	ldr	r3, [pc, #92]	; (23fbb90 <__ieee754_rem_pio2+0x270>)
 23fbb34:	1e72      	subs	r2, r6, #1
 23fbb36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23fbb3a:	42ab      	cmp	r3, r5
 23fbb3c:	d02a      	beq.n	23fbb94 <__ieee754_rem_pio2+0x274>
 23fbb3e:	4602      	mov	r2, r0
 23fbb40:	460b      	mov	r3, r1
 23fbb42:	e09d      	b.n	23fbc80 <__ieee754_rem_pio2+0x360>
 23fbb44:	f3af 8000 	nop.w
 23fbb48:	54400000 	.word	0x54400000
 23fbb4c:	3ff921fb 	.word	0x3ff921fb
 23fbb50:	1a626331 	.word	0x1a626331
 23fbb54:	3dd0b461 	.word	0x3dd0b461
 23fbb58:	1a600000 	.word	0x1a600000
 23fbb5c:	3dd0b461 	.word	0x3dd0b461
 23fbb60:	2e037073 	.word	0x2e037073
 23fbb64:	3ba3198a 	.word	0x3ba3198a
 23fbb68:	6dc9c883 	.word	0x6dc9c883
 23fbb6c:	3fe45f30 	.word	0x3fe45f30
 23fbb70:	3fe921fb 	.word	0x3fe921fb
 23fbb74:	4002d97b 	.word	0x4002d97b
 23fbb78:	3ff921fb 	.word	0x3ff921fb
 23fbb7c:	413921fb 	.word	0x413921fb
 23fbb80:	7fefffff 	.word	0x7fefffff
 23fbb84:	41700000 	.word	0x41700000
 23fbb88:	023ffcdc 	.word	0x023ffcdc
 23fbb8c:	3fe00000 	.word	0x3fe00000
 23fbb90:	023ffc5c 	.word	0x023ffc5c
 23fbb94:	152b      	asrs	r3, r5, #20
 23fbb96:	4650      	mov	r0, sl
 23fbb98:	4659      	mov	r1, fp
 23fbb9a:	9303      	str	r3, [sp, #12]
 23fbb9c:	ec53 2b18 	vmov	r2, r3, d8
 23fbba0:	f7e9 fa32 	bl	23e5008 <__aeabi_dsub>
 23fbba4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 23fbba8:	4680      	mov	r8, r0
 23fbbaa:	4689      	mov	r9, r1
 23fbbac:	ebc3 5515 	rsb	r5, r3, r5, lsr #20
 23fbbb0:	2d10      	cmp	r5, #16
 23fbbb2:	dd6b      	ble.n	23fbc8c <__ieee754_rem_pio2+0x36c>
 23fbbb4:	a364      	add	r3, pc, #400	; (adr r3, 23fbd48 <__ieee754_rem_pio2+0x428>)
 23fbbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbbba:	ec51 0b19 	vmov	r0, r1, d9
 23fbbbe:	f7e9 fbdb 	bl	23e5378 <__aeabi_dmul>
 23fbbc2:	4680      	mov	r8, r0
 23fbbc4:	4689      	mov	r9, r1
 23fbbc6:	4650      	mov	r0, sl
 23fbbc8:	4642      	mov	r2, r8
 23fbbca:	4659      	mov	r1, fp
 23fbbcc:	464b      	mov	r3, r9
 23fbbce:	f7e9 fa1b 	bl	23e5008 <__aeabi_dsub>
 23fbbd2:	4602      	mov	r2, r0
 23fbbd4:	460b      	mov	r3, r1
 23fbbd6:	4650      	mov	r0, sl
 23fbbd8:	4659      	mov	r1, fp
 23fbbda:	4692      	mov	sl, r2
 23fbbdc:	469b      	mov	fp, r3
 23fbbde:	ec43 2b1a 	vmov	d10, r2, r3
 23fbbe2:	f7e9 fa11 	bl	23e5008 <__aeabi_dsub>
 23fbbe6:	4642      	mov	r2, r8
 23fbbe8:	464b      	mov	r3, r9
 23fbbea:	f7e9 fa0d 	bl	23e5008 <__aeabi_dsub>
 23fbbee:	4680      	mov	r8, r0
 23fbbf0:	4689      	mov	r9, r1
 23fbbf2:	a357      	add	r3, pc, #348	; (adr r3, 23fbd50 <__ieee754_rem_pio2+0x430>)
 23fbbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbbf8:	ec51 0b19 	vmov	r0, r1, d9
 23fbbfc:	f7e9 fbbc 	bl	23e5378 <__aeabi_dmul>
 23fbc00:	4642      	mov	r2, r8
 23fbc02:	464b      	mov	r3, r9
 23fbc04:	f7e9 fa00 	bl	23e5008 <__aeabi_dsub>
 23fbc08:	4602      	mov	r2, r0
 23fbc0a:	460b      	mov	r3, r1
 23fbc0c:	4650      	mov	r0, sl
 23fbc0e:	4659      	mov	r1, fp
 23fbc10:	ec43 2b18 	vmov	d8, r2, r3
 23fbc14:	f7e9 f9f8 	bl	23e5008 <__aeabi_dsub>
 23fbc18:	9a03      	ldr	r2, [sp, #12]
 23fbc1a:	f3c1 530a 	ubfx	r3, r1, #20, #11
 23fbc1e:	4680      	mov	r8, r0
 23fbc20:	4689      	mov	r9, r1
 23fbc22:	1ad3      	subs	r3, r2, r3
 23fbc24:	2b31      	cmp	r3, #49	; 0x31
 23fbc26:	dd31      	ble.n	23fbc8c <__ieee754_rem_pio2+0x36c>
 23fbc28:	a34c      	add	r3, pc, #304	; (adr r3, 23fbd5c <__ieee754_rem_pio2+0x43c>)
 23fbc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbc2e:	ec51 0b19 	vmov	r0, r1, d9
 23fbc32:	f7e9 fba1 	bl	23e5378 <__aeabi_dmul>
 23fbc36:	4680      	mov	r8, r0
 23fbc38:	4689      	mov	r9, r1
 23fbc3a:	4642      	mov	r2, r8
 23fbc3c:	464b      	mov	r3, r9
 23fbc3e:	ec51 0b1a 	vmov	r0, r1, d10
 23fbc42:	f7e9 f9e1 	bl	23e5008 <__aeabi_dsub>
 23fbc46:	4682      	mov	sl, r0
 23fbc48:	468b      	mov	fp, r1
 23fbc4a:	4652      	mov	r2, sl
 23fbc4c:	465b      	mov	r3, fp
 23fbc4e:	ec51 0b1a 	vmov	r0, r1, d10
 23fbc52:	f7e9 f9d9 	bl	23e5008 <__aeabi_dsub>
 23fbc56:	4642      	mov	r2, r8
 23fbc58:	464b      	mov	r3, r9
 23fbc5a:	f7e9 f9d5 	bl	23e5008 <__aeabi_dsub>
 23fbc5e:	4680      	mov	r8, r0
 23fbc60:	4689      	mov	r9, r1
 23fbc62:	a340      	add	r3, pc, #256	; (adr r3, 23fbd64 <__ieee754_rem_pio2+0x444>)
 23fbc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbc68:	ec51 0b19 	vmov	r0, r1, d9
 23fbc6c:	f7e9 fb84 	bl	23e5378 <__aeabi_dmul>
 23fbc70:	4642      	mov	r2, r8
 23fbc72:	464b      	mov	r3, r9
 23fbc74:	f7e9 f9c8 	bl	23e5008 <__aeabi_dsub>
 23fbc78:	4602      	mov	r2, r0
 23fbc7a:	460b      	mov	r3, r1
 23fbc7c:	ec43 2b18 	vmov	d8, r2, r3
 23fbc80:	4650      	mov	r0, sl
 23fbc82:	4659      	mov	r1, fp
 23fbc84:	f7e9 f9c0 	bl	23e5008 <__aeabi_dsub>
 23fbc88:	4680      	mov	r8, r0
 23fbc8a:	4689      	mov	r9, r1
 23fbc8c:	4642      	mov	r2, r8
 23fbc8e:	464b      	mov	r3, r9
 23fbc90:	4650      	mov	r0, sl
 23fbc92:	4659      	mov	r1, fp
 23fbc94:	e9c4 8900 	strd	r8, r9, [r4]
 23fbc98:	f7e9 f9b6 	bl	23e5008 <__aeabi_dsub>
 23fbc9c:	ec53 2b18 	vmov	r2, r3, d8
 23fbca0:	f7e9 f9b2 	bl	23e5008 <__aeabi_dsub>
 23fbca4:	2f00      	cmp	r7, #0
 23fbca6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fbcaa:	f6bf ae71 	bge.w	23fb990 <__ieee754_rem_pio2+0x70>
 23fbcae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 23fbcb2:	4276      	negs	r6, r6
 23fbcb4:	e9c4 8300 	strd	r8, r3, [r4]
 23fbcb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fbcbc:	e9c4 0302 	strd	r0, r3, [r4, #8]
 23fbcc0:	e666      	b.n	23fb990 <__ieee754_rem_pio2+0x70>
 23fbcc2:	2303      	movs	r3, #3
 23fbcc4:	e6ac      	b.n	23fba20 <__ieee754_rem_pio2+0x100>
 23fbcc6:	f7e9 f9a1 	bl	23e500c <__adddf3>
 23fbcca:	4b23      	ldr	r3, [pc, #140]	; (23fbd58 <__ieee754_rem_pio2+0x438>)
 23fbccc:	4680      	mov	r8, r0
 23fbcce:	4689      	mov	r9, r1
 23fbcd0:	429d      	cmp	r5, r3
 23fbcd2:	d016      	beq.n	23fbd02 <__ieee754_rem_pio2+0x3e2>
 23fbcd4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 23fbcd8:	a319      	add	r3, pc, #100	; (adr r3, 23fbd40 <__ieee754_rem_pio2+0x420>)
 23fbcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbcde:	f7e9 f995 	bl	23e500c <__adddf3>
 23fbce2:	4602      	mov	r2, r0
 23fbce4:	460b      	mov	r3, r1
 23fbce6:	4640      	mov	r0, r8
 23fbce8:	4649      	mov	r1, r9
 23fbcea:	e9c4 2300 	strd	r2, r3, [r4]
 23fbcee:	f7e9 f98b 	bl	23e5008 <__aeabi_dsub>
 23fbcf2:	a313      	add	r3, pc, #76	; (adr r3, 23fbd40 <__ieee754_rem_pio2+0x420>)
 23fbcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbcf8:	f7e9 f988 	bl	23e500c <__adddf3>
 23fbcfc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fbd00:	e646      	b.n	23fb990 <__ieee754_rem_pio2+0x70>
 23fbd02:	a311      	add	r3, pc, #68	; (adr r3, 23fbd48 <__ieee754_rem_pio2+0x428>)
 23fbd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbd08:	f7e9 f980 	bl	23e500c <__adddf3>
 23fbd0c:	4680      	mov	r8, r0
 23fbd0e:	4689      	mov	r9, r1
 23fbd10:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 23fbd14:	a30e      	add	r3, pc, #56	; (adr r3, 23fbd50 <__ieee754_rem_pio2+0x430>)
 23fbd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbd1a:	f7e9 f977 	bl	23e500c <__adddf3>
 23fbd1e:	4602      	mov	r2, r0
 23fbd20:	460b      	mov	r3, r1
 23fbd22:	4640      	mov	r0, r8
 23fbd24:	4649      	mov	r1, r9
 23fbd26:	e9c4 2300 	strd	r2, r3, [r4]
 23fbd2a:	f7e9 f96d 	bl	23e5008 <__aeabi_dsub>
 23fbd2e:	a308      	add	r3, pc, #32	; (adr r3, 23fbd50 <__ieee754_rem_pio2+0x430>)
 23fbd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbd34:	f7e9 f96a 	bl	23e500c <__adddf3>
 23fbd38:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fbd3c:	e628      	b.n	23fb990 <__ieee754_rem_pio2+0x70>
 23fbd3e:	bf00      	nop
 23fbd40:	1a626331 	.word	0x1a626331
 23fbd44:	3dd0b461 	.word	0x3dd0b461
 23fbd48:	1a600000 	.word	0x1a600000
 23fbd4c:	3dd0b461 	.word	0x3dd0b461
 23fbd50:	2e037073 	.word	0x2e037073
 23fbd54:	3ba3198a 	.word	0x3ba3198a
 23fbd58:	3ff921fb 	.word	0x3ff921fb
 23fbd5c:	2e000000 	.word	0x2e000000
 23fbd60:	3ba3198a 	.word	0x3ba3198a
 23fbd64:	252049c1 	.word	0x252049c1
 23fbd68:	397b839a 	.word	0x397b839a

023fbd6c <__ieee754_sqrt>:
 23fbd6c:	495e      	ldr	r1, [pc, #376]	; (23fbee8 <__ieee754_sqrt+0x17c>)
 23fbd6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fbd72:	ec55 4b10 	vmov	r4, r5, d0
 23fbd76:	43a9      	bics	r1, r5
 23fbd78:	f000 8094 	beq.w	23fbea4 <__ieee754_sqrt+0x138>
 23fbd7c:	2d00      	cmp	r5, #0
 23fbd7e:	462b      	mov	r3, r5
 23fbd80:	ee10 2a10 	vmov	r2, s0
 23fbd84:	dd5a      	ble.n	23fbe3c <__ieee754_sqrt+0xd0>
 23fbd86:	1528      	asrs	r0, r5, #20
 23fbd88:	d067      	beq.n	23fbe5a <__ieee754_sqrt+0xee>
 23fbd8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 23fbd8e:	07c1      	lsls	r1, r0, #31
 23fbd90:	f2a0 37ff 	subw	r7, r0, #1023	; 0x3ff
 23fbd94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fbd98:	d403      	bmi.n	23fbda2 <__ieee754_sqrt+0x36>
 23fbd9a:	005b      	lsls	r3, r3, #1
 23fbd9c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23fbda0:	0052      	lsls	r2, r2, #1
 23fbda2:	0fd1      	lsrs	r1, r2, #31
 23fbda4:	2600      	movs	r6, #0
 23fbda6:	107f      	asrs	r7, r7, #1
 23fbda8:	f04f 0c16 	mov.w	ip, #22
 23fbdac:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 23fbdb0:	46b6      	mov	lr, r6
 23fbdb2:	0052      	lsls	r2, r2, #1
 23fbdb4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 23fbdb8:	eb0e 0001 	add.w	r0, lr, r1
 23fbdbc:	4298      	cmp	r0, r3
 23fbdbe:	dc03      	bgt.n	23fbdc8 <__ieee754_sqrt+0x5c>
 23fbdc0:	1a1b      	subs	r3, r3, r0
 23fbdc2:	eb00 0e01 	add.w	lr, r0, r1
 23fbdc6:	440e      	add	r6, r1
 23fbdc8:	005b      	lsls	r3, r3, #1
 23fbdca:	f1bc 0c01 	subs.w	ip, ip, #1
 23fbdce:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23fbdd2:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23fbdd6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23fbdda:	d1ed      	bne.n	23fbdb8 <__ieee754_sqrt+0x4c>
 23fbddc:	4665      	mov	r5, ip
 23fbdde:	2420      	movs	r4, #32
 23fbde0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 23fbde4:	e014      	b.n	23fbe10 <__ieee754_sqrt+0xa4>
 23fbde6:	d10a      	bne.n	23fbdfe <__ieee754_sqrt+0x92>
 23fbde8:	4290      	cmp	r0, r2
 23fbdea:	d808      	bhi.n	23fbdfe <__ieee754_sqrt+0x92>
 23fbdec:	2800      	cmp	r0, #0
 23fbdee:	eb00 0c01 	add.w	ip, r0, r1
 23fbdf2:	db1d      	blt.n	23fbe30 <__ieee754_sqrt+0xc4>
 23fbdf4:	46f0      	mov	r8, lr
 23fbdf6:	2300      	movs	r3, #0
 23fbdf8:	1a12      	subs	r2, r2, r0
 23fbdfa:	440d      	add	r5, r1
 23fbdfc:	46c6      	mov	lr, r8
 23fbdfe:	0fd0      	lsrs	r0, r2, #31
 23fbe00:	3c01      	subs	r4, #1
 23fbe02:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23fbe06:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 23fbe0a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23fbe0e:	d033      	beq.n	23fbe78 <__ieee754_sqrt+0x10c>
 23fbe10:	4573      	cmp	r3, lr
 23fbe12:	eb01 000c 	add.w	r0, r1, ip
 23fbe16:	dde6      	ble.n	23fbde6 <__ieee754_sqrt+0x7a>
 23fbe18:	2800      	cmp	r0, #0
 23fbe1a:	eb00 0c01 	add.w	ip, r0, r1
 23fbe1e:	db07      	blt.n	23fbe30 <__ieee754_sqrt+0xc4>
 23fbe20:	46f0      	mov	r8, lr
 23fbe22:	eba3 030e 	sub.w	r3, r3, lr
 23fbe26:	4290      	cmp	r0, r2
 23fbe28:	bf88      	it	hi
 23fbe2a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 23fbe2e:	e7e3      	b.n	23fbdf8 <__ieee754_sqrt+0x8c>
 23fbe30:	f1bc 0f00 	cmp.w	ip, #0
 23fbe34:	dbf4      	blt.n	23fbe20 <__ieee754_sqrt+0xb4>
 23fbe36:	f10e 0801 	add.w	r8, lr, #1
 23fbe3a:	e7f2      	b.n	23fbe22 <__ieee754_sqrt+0xb6>
 23fbe3c:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 23fbe40:	4321      	orrs	r1, r4
 23fbe42:	d028      	beq.n	23fbe96 <__ieee754_sqrt+0x12a>
 23fbe44:	2d00      	cmp	r5, #0
 23fbe46:	d13d      	bne.n	23fbec4 <__ieee754_sqrt+0x158>
 23fbe48:	4628      	mov	r0, r5
 23fbe4a:	0ad1      	lsrs	r1, r2, #11
 23fbe4c:	3815      	subs	r0, #21
 23fbe4e:	0552      	lsls	r2, r2, #21
 23fbe50:	460b      	mov	r3, r1
 23fbe52:	2900      	cmp	r1, #0
 23fbe54:	d0f9      	beq.n	23fbe4a <__ieee754_sqrt+0xde>
 23fbe56:	02cf      	lsls	r7, r1, #11
 23fbe58:	d441      	bmi.n	23fbede <__ieee754_sqrt+0x172>
 23fbe5a:	2400      	movs	r4, #0
 23fbe5c:	005b      	lsls	r3, r3, #1
 23fbe5e:	4625      	mov	r5, r4
 23fbe60:	3401      	adds	r4, #1
 23fbe62:	02de      	lsls	r6, r3, #11
 23fbe64:	d5fa      	bpl.n	23fbe5c <__ieee754_sqrt+0xf0>
 23fbe66:	4619      	mov	r1, r3
 23fbe68:	4613      	mov	r3, r2
 23fbe6a:	40a2      	lsls	r2, r4
 23fbe6c:	f1c4 0420 	rsb	r4, r4, #32
 23fbe70:	40e3      	lsrs	r3, r4
 23fbe72:	1b40      	subs	r0, r0, r5
 23fbe74:	430b      	orrs	r3, r1
 23fbe76:	e788      	b.n	23fbd8a <__ieee754_sqrt+0x1e>
 23fbe78:	4313      	orrs	r3, r2
 23fbe7a:	d10e      	bne.n	23fbe9a <__ieee754_sqrt+0x12e>
 23fbe7c:	086c      	lsrs	r4, r5, #1
 23fbe7e:	07f3      	lsls	r3, r6, #31
 23fbe80:	491a      	ldr	r1, [pc, #104]	; (23fbeec <__ieee754_sqrt+0x180>)
 23fbe82:	bf48      	it	mi
 23fbe84:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 23fbe88:	eb01 0166 	add.w	r1, r1, r6, asr #1
 23fbe8c:	4622      	mov	r2, r4
 23fbe8e:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 23fbe92:	ec43 2b10 	vmov	d0, r2, r3
 23fbe96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fbe9a:	1c6a      	adds	r2, r5, #1
 23fbe9c:	d01d      	beq.n	23fbeda <__ieee754_sqrt+0x16e>
 23fbe9e:	1c6c      	adds	r4, r5, #1
 23fbea0:	0864      	lsrs	r4, r4, #1
 23fbea2:	e7ec      	b.n	23fbe7e <__ieee754_sqrt+0x112>
 23fbea4:	ee10 2a10 	vmov	r2, s0
 23fbea8:	462b      	mov	r3, r5
 23fbeaa:	ee10 0a10 	vmov	r0, s0
 23fbeae:	4629      	mov	r1, r5
 23fbeb0:	f7e9 fa62 	bl	23e5378 <__aeabi_dmul>
 23fbeb4:	4622      	mov	r2, r4
 23fbeb6:	462b      	mov	r3, r5
 23fbeb8:	f7e9 f8a8 	bl	23e500c <__adddf3>
 23fbebc:	ec41 0b10 	vmov	d0, r0, r1
 23fbec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fbec4:	4620      	mov	r0, r4
 23fbec6:	4629      	mov	r1, r5
 23fbec8:	f7e9 f89e 	bl	23e5008 <__aeabi_dsub>
 23fbecc:	4602      	mov	r2, r0
 23fbece:	460b      	mov	r3, r1
 23fbed0:	f7e9 fb7c 	bl	23e55cc <__aeabi_ddiv>
 23fbed4:	ec41 0b10 	vmov	d0, r0, r1
 23fbed8:	e7dd      	b.n	23fbe96 <__ieee754_sqrt+0x12a>
 23fbeda:	3601      	adds	r6, #1
 23fbedc:	e7cf      	b.n	23fbe7e <__ieee754_sqrt+0x112>
 23fbede:	4613      	mov	r3, r2
 23fbee0:	2420      	movs	r4, #32
 23fbee2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 23fbee6:	e7c3      	b.n	23fbe70 <__ieee754_sqrt+0x104>
 23fbee8:	7ff00000 	.word	0x7ff00000
 23fbeec:	3fe00000 	.word	0x3fe00000

023fbef0 <__kernel_cos>:
 23fbef0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fbef4:	ec57 6b10 	vmov	r6, r7, d0
 23fbef8:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
 23fbefc:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
 23fbf00:	ec5b ab11 	vmov	sl, fp, d1
 23fbf04:	ed2d 8b04 	vpush	{d8-d9}
 23fbf08:	da71      	bge.n	23fbfee <__kernel_cos+0xfe>
 23fbf0a:	ee10 0a10 	vmov	r0, s0
 23fbf0e:	4639      	mov	r1, r7
 23fbf10:	f7e9 fce2 	bl	23e58d8 <__aeabi_d2iz>
 23fbf14:	2800      	cmp	r0, #0
 23fbf16:	f000 80f6 	beq.w	23fc106 <__kernel_cos+0x216>
 23fbf1a:	4632      	mov	r2, r6
 23fbf1c:	463b      	mov	r3, r7
 23fbf1e:	4630      	mov	r0, r6
 23fbf20:	4639      	mov	r1, r7
 23fbf22:	f7e9 fa29 	bl	23e5378 <__aeabi_dmul>
 23fbf26:	4604      	mov	r4, r0
 23fbf28:	460d      	mov	r5, r1
 23fbf2a:	a37b      	add	r3, pc, #492	; (adr r3, 23fc118 <__kernel_cos+0x228>)
 23fbf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbf30:	f7e9 fa22 	bl	23e5378 <__aeabi_dmul>
 23fbf34:	a37a      	add	r3, pc, #488	; (adr r3, 23fc120 <__kernel_cos+0x230>)
 23fbf36:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbf3a:	f7e9 f867 	bl	23e500c <__adddf3>
 23fbf3e:	4622      	mov	r2, r4
 23fbf40:	462b      	mov	r3, r5
 23fbf42:	f7e9 fa19 	bl	23e5378 <__aeabi_dmul>
 23fbf46:	a378      	add	r3, pc, #480	; (adr r3, 23fc128 <__kernel_cos+0x238>)
 23fbf48:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbf4c:	f7e9 f85c 	bl	23e5008 <__aeabi_dsub>
 23fbf50:	4622      	mov	r2, r4
 23fbf52:	462b      	mov	r3, r5
 23fbf54:	f7e9 fa10 	bl	23e5378 <__aeabi_dmul>
 23fbf58:	a375      	add	r3, pc, #468	; (adr r3, 23fc130 <__kernel_cos+0x240>)
 23fbf5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbf5e:	f7e9 f855 	bl	23e500c <__adddf3>
 23fbf62:	4622      	mov	r2, r4
 23fbf64:	462b      	mov	r3, r5
 23fbf66:	f7e9 fa07 	bl	23e5378 <__aeabi_dmul>
 23fbf6a:	a373      	add	r3, pc, #460	; (adr r3, 23fc138 <__kernel_cos+0x248>)
 23fbf6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbf70:	f7e9 f84a 	bl	23e5008 <__aeabi_dsub>
 23fbf74:	4622      	mov	r2, r4
 23fbf76:	462b      	mov	r3, r5
 23fbf78:	f7e9 f9fe 	bl	23e5378 <__aeabi_dmul>
 23fbf7c:	a370      	add	r3, pc, #448	; (adr r3, 23fc140 <__kernel_cos+0x250>)
 23fbf7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbf82:	f7e9 f843 	bl	23e500c <__adddf3>
 23fbf86:	4622      	mov	r2, r4
 23fbf88:	462b      	mov	r3, r5
 23fbf8a:	f7e9 f9f5 	bl	23e5378 <__aeabi_dmul>
 23fbf8e:	ec41 0b18 	vmov	d8, r0, r1
 23fbf92:	2200      	movs	r2, #0
 23fbf94:	4b70      	ldr	r3, [pc, #448]	; (23fc158 <__kernel_cos+0x268>)
 23fbf96:	4620      	mov	r0, r4
 23fbf98:	4629      	mov	r1, r5
 23fbf9a:	f7e9 f9ed 	bl	23e5378 <__aeabi_dmul>
 23fbf9e:	4680      	mov	r8, r0
 23fbfa0:	4689      	mov	r9, r1
 23fbfa2:	4620      	mov	r0, r4
 23fbfa4:	4629      	mov	r1, r5
 23fbfa6:	ec53 2b18 	vmov	r2, r3, d8
 23fbfaa:	f7e9 f9e5 	bl	23e5378 <__aeabi_dmul>
 23fbfae:	4604      	mov	r4, r0
 23fbfb0:	460d      	mov	r5, r1
 23fbfb2:	4652      	mov	r2, sl
 23fbfb4:	465b      	mov	r3, fp
 23fbfb6:	4630      	mov	r0, r6
 23fbfb8:	4639      	mov	r1, r7
 23fbfba:	f7e9 f9dd 	bl	23e5378 <__aeabi_dmul>
 23fbfbe:	4602      	mov	r2, r0
 23fbfc0:	460b      	mov	r3, r1
 23fbfc2:	4620      	mov	r0, r4
 23fbfc4:	4629      	mov	r1, r5
 23fbfc6:	f7e9 f81f 	bl	23e5008 <__aeabi_dsub>
 23fbfca:	4602      	mov	r2, r0
 23fbfcc:	460b      	mov	r3, r1
 23fbfce:	4640      	mov	r0, r8
 23fbfd0:	4649      	mov	r1, r9
 23fbfd2:	f7e9 f819 	bl	23e5008 <__aeabi_dsub>
 23fbfd6:	4602      	mov	r2, r0
 23fbfd8:	460b      	mov	r3, r1
 23fbfda:	2000      	movs	r0, #0
 23fbfdc:	495f      	ldr	r1, [pc, #380]	; (23fc15c <__kernel_cos+0x26c>)
 23fbfde:	f7e9 f813 	bl	23e5008 <__aeabi_dsub>
 23fbfe2:	ecbd 8b04 	vpop	{d8-d9}
 23fbfe6:	ec41 0b10 	vmov	d0, r0, r1
 23fbfea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fbfee:	ee10 2a10 	vmov	r2, s0
 23fbff2:	ee10 0a10 	vmov	r0, s0
 23fbff6:	463b      	mov	r3, r7
 23fbff8:	4639      	mov	r1, r7
 23fbffa:	f7e9 f9bd 	bl	23e5378 <__aeabi_dmul>
 23fbffe:	4604      	mov	r4, r0
 23fc000:	460d      	mov	r5, r1
 23fc002:	a345      	add	r3, pc, #276	; (adr r3, 23fc118 <__kernel_cos+0x228>)
 23fc004:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc008:	f7e9 f9b6 	bl	23e5378 <__aeabi_dmul>
 23fc00c:	a344      	add	r3, pc, #272	; (adr r3, 23fc120 <__kernel_cos+0x230>)
 23fc00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc012:	f7e8 fffb 	bl	23e500c <__adddf3>
 23fc016:	4622      	mov	r2, r4
 23fc018:	462b      	mov	r3, r5
 23fc01a:	f7e9 f9ad 	bl	23e5378 <__aeabi_dmul>
 23fc01e:	a342      	add	r3, pc, #264	; (adr r3, 23fc128 <__kernel_cos+0x238>)
 23fc020:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc024:	f7e8 fff0 	bl	23e5008 <__aeabi_dsub>
 23fc028:	4622      	mov	r2, r4
 23fc02a:	462b      	mov	r3, r5
 23fc02c:	f7e9 f9a4 	bl	23e5378 <__aeabi_dmul>
 23fc030:	a33f      	add	r3, pc, #252	; (adr r3, 23fc130 <__kernel_cos+0x240>)
 23fc032:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc036:	f7e8 ffe9 	bl	23e500c <__adddf3>
 23fc03a:	4622      	mov	r2, r4
 23fc03c:	462b      	mov	r3, r5
 23fc03e:	f7e9 f99b 	bl	23e5378 <__aeabi_dmul>
 23fc042:	a33d      	add	r3, pc, #244	; (adr r3, 23fc138 <__kernel_cos+0x248>)
 23fc044:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc048:	f7e8 ffde 	bl	23e5008 <__aeabi_dsub>
 23fc04c:	4622      	mov	r2, r4
 23fc04e:	462b      	mov	r3, r5
 23fc050:	f7e9 f992 	bl	23e5378 <__aeabi_dmul>
 23fc054:	a33a      	add	r3, pc, #232	; (adr r3, 23fc140 <__kernel_cos+0x250>)
 23fc056:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc05a:	f7e8 ffd7 	bl	23e500c <__adddf3>
 23fc05e:	462b      	mov	r3, r5
 23fc060:	4622      	mov	r2, r4
 23fc062:	f7e9 f989 	bl	23e5378 <__aeabi_dmul>
 23fc066:	4b3e      	ldr	r3, [pc, #248]	; (23fc160 <__kernel_cos+0x270>)
 23fc068:	4599      	cmp	r9, r3
 23fc06a:	ec41 0b18 	vmov	d8, r0, r1
 23fc06e:	dd90      	ble.n	23fbf92 <__kernel_cos+0xa2>
 23fc070:	4b3c      	ldr	r3, [pc, #240]	; (23fc164 <__kernel_cos+0x274>)
 23fc072:	4599      	cmp	r9, r3
 23fc074:	dc3c      	bgt.n	23fc0f0 <__kernel_cos+0x200>
 23fc076:	2200      	movs	r2, #0
 23fc078:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
 23fc07c:	2000      	movs	r0, #0
 23fc07e:	4937      	ldr	r1, [pc, #220]	; (23fc15c <__kernel_cos+0x26c>)
 23fc080:	4690      	mov	r8, r2
 23fc082:	4699      	mov	r9, r3
 23fc084:	f7e8 ffc0 	bl	23e5008 <__aeabi_dsub>
 23fc088:	ec41 0b19 	vmov	d9, r0, r1
 23fc08c:	2200      	movs	r2, #0
 23fc08e:	4b32      	ldr	r3, [pc, #200]	; (23fc158 <__kernel_cos+0x268>)
 23fc090:	4620      	mov	r0, r4
 23fc092:	4629      	mov	r1, r5
 23fc094:	f7e9 f970 	bl	23e5378 <__aeabi_dmul>
 23fc098:	4642      	mov	r2, r8
 23fc09a:	464b      	mov	r3, r9
 23fc09c:	f7e8 ffb4 	bl	23e5008 <__aeabi_dsub>
 23fc0a0:	4680      	mov	r8, r0
 23fc0a2:	4689      	mov	r9, r1
 23fc0a4:	4620      	mov	r0, r4
 23fc0a6:	4629      	mov	r1, r5
 23fc0a8:	ec53 2b18 	vmov	r2, r3, d8
 23fc0ac:	f7e9 f964 	bl	23e5378 <__aeabi_dmul>
 23fc0b0:	4604      	mov	r4, r0
 23fc0b2:	460d      	mov	r5, r1
 23fc0b4:	4652      	mov	r2, sl
 23fc0b6:	465b      	mov	r3, fp
 23fc0b8:	4630      	mov	r0, r6
 23fc0ba:	4639      	mov	r1, r7
 23fc0bc:	f7e9 f95c 	bl	23e5378 <__aeabi_dmul>
 23fc0c0:	4602      	mov	r2, r0
 23fc0c2:	460b      	mov	r3, r1
 23fc0c4:	4620      	mov	r0, r4
 23fc0c6:	4629      	mov	r1, r5
 23fc0c8:	f7e8 ff9e 	bl	23e5008 <__aeabi_dsub>
 23fc0cc:	4602      	mov	r2, r0
 23fc0ce:	460b      	mov	r3, r1
 23fc0d0:	4640      	mov	r0, r8
 23fc0d2:	4649      	mov	r1, r9
 23fc0d4:	f7e8 ff98 	bl	23e5008 <__aeabi_dsub>
 23fc0d8:	4602      	mov	r2, r0
 23fc0da:	460b      	mov	r3, r1
 23fc0dc:	ec51 0b19 	vmov	r0, r1, d9
 23fc0e0:	f7e8 ff92 	bl	23e5008 <__aeabi_dsub>
 23fc0e4:	ecbd 8b04 	vpop	{d8-d9}
 23fc0e8:	ec41 0b10 	vmov	d0, r0, r1
 23fc0ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc0f0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 23fc148 <__kernel_cos+0x258>
 23fc0f4:	f04f 0800 	mov.w	r8, #0
 23fc0f8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 23fc168 <__kernel_cos+0x278>
 23fc0fc:	eeb0 9a47 	vmov.f32	s18, s14
 23fc100:	eef0 9a67 	vmov.f32	s19, s15
 23fc104:	e7c2      	b.n	23fc08c <__kernel_cos+0x19c>
 23fc106:	ecbd 8b04 	vpop	{d8-d9}
 23fc10a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 23fc150 <__kernel_cos+0x260>
 23fc10e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc112:	bf00      	nop
 23fc114:	f3af 8000 	nop.w
 23fc118:	be8838d4 	.word	0xbe8838d4
 23fc11c:	bda8fae9 	.word	0xbda8fae9
 23fc120:	bdb4b1c4 	.word	0xbdb4b1c4
 23fc124:	3e21ee9e 	.word	0x3e21ee9e
 23fc128:	809c52ad 	.word	0x809c52ad
 23fc12c:	3e927e4f 	.word	0x3e927e4f
 23fc130:	19cb1590 	.word	0x19cb1590
 23fc134:	3efa01a0 	.word	0x3efa01a0
 23fc138:	16c15177 	.word	0x16c15177
 23fc13c:	3f56c16c 	.word	0x3f56c16c
 23fc140:	5555554c 	.word	0x5555554c
 23fc144:	3fa55555 	.word	0x3fa55555
 23fc148:	00000000 	.word	0x00000000
 23fc14c:	3fe70000 	.word	0x3fe70000
 23fc150:	00000000 	.word	0x00000000
 23fc154:	3ff00000 	.word	0x3ff00000
 23fc158:	3fe00000 	.word	0x3fe00000
 23fc15c:	3ff00000 	.word	0x3ff00000
 23fc160:	3fd33332 	.word	0x3fd33332
 23fc164:	3fe90000 	.word	0x3fe90000
 23fc168:	3fd20000 	.word	0x3fd20000
 23fc16c:	00000000 	.word	0x00000000

023fc170 <__kernel_rem_pio2>:
 23fc170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fc174:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 23fc178:	461c      	mov	r4, r3
 23fc17a:	f112 0f14 	cmn.w	r2, #20
 23fc17e:	9308      	str	r3, [sp, #32]
 23fc180:	910b      	str	r1, [sp, #44]	; 0x2c
 23fc182:	4bb6      	ldr	r3, [pc, #728]	; (23fc45c <__kernel_rem_pio2+0x2ec>)
 23fc184:	99a2      	ldr	r1, [sp, #648]	; 0x288
 23fc186:	9004      	str	r0, [sp, #16]
 23fc188:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 23fc18c:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
 23fc190:	9105      	str	r1, [sp, #20]
 23fc192:	9303      	str	r3, [sp, #12]
 23fc194:	f2c0 833a 	blt.w	23fc80c <__kernel_rem_pio2+0x69c>
 23fc198:	1ed3      	subs	r3, r2, #3
 23fc19a:	49b1      	ldr	r1, [pc, #708]	; (23fc460 <__kernel_rem_pio2+0x2f0>)
 23fc19c:	fb81 0103 	smull	r0, r1, r1, r3
 23fc1a0:	17db      	asrs	r3, r3, #31
 23fc1a2:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 23fc1a6:	9307      	str	r3, [sp, #28]
 23fc1a8:	3301      	adds	r3, #1
 23fc1aa:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 23fc1ae:	00db      	lsls	r3, r3, #3
 23fc1b0:	18d3      	adds	r3, r2, r3
 23fc1b2:	9a07      	ldr	r2, [sp, #28]
 23fc1b4:	9306      	str	r3, [sp, #24]
 23fc1b6:	9b03      	ldr	r3, [sp, #12]
 23fc1b8:	1ad4      	subs	r4, r2, r3
 23fc1ba:	9a05      	ldr	r2, [sp, #20]
 23fc1bc:	18d6      	adds	r6, r2, r3
 23fc1be:	d414      	bmi.n	23fc1ea <__kernel_rem_pio2+0x7a>
 23fc1c0:	3601      	adds	r6, #1
 23fc1c2:	ad20      	add	r5, sp, #128	; 0x80
 23fc1c4:	f04f 0800 	mov.w	r8, #0
 23fc1c8:	f04f 0900 	mov.w	r9, #0
 23fc1cc:	4426      	add	r6, r4
 23fc1ce:	9fa3      	ldr	r7, [sp, #652]	; 0x28c
 23fc1d0:	2c00      	cmp	r4, #0
 23fc1d2:	4640      	mov	r0, r8
 23fc1d4:	4649      	mov	r1, r9
 23fc1d6:	db03      	blt.n	23fc1e0 <__kernel_rem_pio2+0x70>
 23fc1d8:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 23fc1dc:	f7e9 f862 	bl	23e52a4 <__aeabi_i2d>
 23fc1e0:	3401      	adds	r4, #1
 23fc1e2:	42b4      	cmp	r4, r6
 23fc1e4:	e8e5 0102 	strd	r0, r1, [r5], #8
 23fc1e8:	d1f2      	bne.n	23fc1d0 <__kernel_rem_pio2+0x60>
 23fc1ea:	9b05      	ldr	r3, [sp, #20]
 23fc1ec:	2b00      	cmp	r3, #0
 23fc1ee:	f2c0 83c7 	blt.w	23fc980 <__kernel_rem_pio2+0x810>
 23fc1f2:	9b08      	ldr	r3, [sp, #32]
 23fc1f4:	a920      	add	r1, sp, #128	; 0x80
 23fc1f6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 23fc1fa:	f8dd 900c 	ldr.w	r9, [sp, #12]
 23fc1fe:	00da      	lsls	r2, r3, #3
 23fc200:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
 23fc204:	9202      	str	r2, [sp, #8]
 23fc206:	9a05      	ldr	r2, [sp, #20]
 23fc208:	441a      	add	r2, r3
 23fc20a:	9201      	str	r2, [sp, #4]
 23fc20c:	9a04      	ldr	r2, [sp, #16]
 23fc20e:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
 23fc212:	9b03      	ldr	r3, [sp, #12]
 23fc214:	2b00      	cmp	r3, #0
 23fc216:	f2c0 81a6 	blt.w	23fc566 <__kernel_rem_pio2+0x3f6>
 23fc21a:	4657      	mov	r7, sl
 23fc21c:	9e04      	ldr	r6, [sp, #16]
 23fc21e:	2400      	movs	r4, #0
 23fc220:	2500      	movs	r5, #0
 23fc222:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 23fc226:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 23fc22a:	f7e9 f8a5 	bl	23e5378 <__aeabi_dmul>
 23fc22e:	4602      	mov	r2, r0
 23fc230:	460b      	mov	r3, r1
 23fc232:	4620      	mov	r0, r4
 23fc234:	4629      	mov	r1, r5
 23fc236:	f7e8 fee9 	bl	23e500c <__adddf3>
 23fc23a:	4546      	cmp	r6, r8
 23fc23c:	4604      	mov	r4, r0
 23fc23e:	460d      	mov	r5, r1
 23fc240:	d1ef      	bne.n	23fc222 <__kernel_rem_pio2+0xb2>
 23fc242:	f109 0901 	add.w	r9, r9, #1
 23fc246:	9b01      	ldr	r3, [sp, #4]
 23fc248:	f10a 0a08 	add.w	sl, sl, #8
 23fc24c:	4599      	cmp	r9, r3
 23fc24e:	e8eb 4502 	strd	r4, r5, [fp], #8
 23fc252:	d1de      	bne.n	23fc212 <__kernel_rem_pio2+0xa2>
 23fc254:	9a04      	ldr	r2, [sp, #16]
 23fc256:	a90b      	add	r1, sp, #44	; 0x2c
 23fc258:	9b02      	ldr	r3, [sp, #8]
 23fc25a:	4413      	add	r3, r2
 23fc25c:	469b      	mov	fp, r3
 23fc25e:	9b05      	ldr	r3, [sp, #20]
 23fc260:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 23fc264:	a90c      	add	r1, sp, #48	; 0x30
 23fc266:	920a      	str	r2, [sp, #40]	; 0x28
 23fc268:	461a      	mov	r2, r3
 23fc26a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 23fc26e:	9201      	str	r2, [sp, #4]
 23fc270:	3b08      	subs	r3, #8
 23fc272:	9309      	str	r3, [sp, #36]	; 0x24
 23fc274:	9a01      	ldr	r2, [sp, #4]
 23fc276:	a998      	add	r1, sp, #608	; 0x260
 23fc278:	2a00      	cmp	r2, #0
 23fc27a:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 23fc27e:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 23fc282:	dd29      	ble.n	23fc2d8 <__kernel_rem_pio2+0x168>
 23fc284:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 23fc288:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 23fc28c:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
 23fc290:	2200      	movs	r2, #0
 23fc292:	4b74      	ldr	r3, [pc, #464]	; (23fc464 <__kernel_rem_pio2+0x2f4>)
 23fc294:	4620      	mov	r0, r4
 23fc296:	4629      	mov	r1, r5
 23fc298:	f7e9 f86e 	bl	23e5378 <__aeabi_dmul>
 23fc29c:	f7e9 fb1c 	bl	23e58d8 <__aeabi_d2iz>
 23fc2a0:	f7e9 f800 	bl	23e52a4 <__aeabi_i2d>
 23fc2a4:	2200      	movs	r2, #0
 23fc2a6:	4b70      	ldr	r3, [pc, #448]	; (23fc468 <__kernel_rem_pio2+0x2f8>)
 23fc2a8:	4606      	mov	r6, r0
 23fc2aa:	460f      	mov	r7, r1
 23fc2ac:	f7e9 f864 	bl	23e5378 <__aeabi_dmul>
 23fc2b0:	4602      	mov	r2, r0
 23fc2b2:	460b      	mov	r3, r1
 23fc2b4:	4620      	mov	r0, r4
 23fc2b6:	4629      	mov	r1, r5
 23fc2b8:	f7e8 fea6 	bl	23e5008 <__aeabi_dsub>
 23fc2bc:	f7e9 fb0c 	bl	23e58d8 <__aeabi_d2iz>
 23fc2c0:	4639      	mov	r1, r7
 23fc2c2:	f849 0b04 	str.w	r0, [r9], #4
 23fc2c6:	4630      	mov	r0, r6
 23fc2c8:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 23fc2cc:	f7e8 fe9e 	bl	23e500c <__adddf3>
 23fc2d0:	4604      	mov	r4, r0
 23fc2d2:	45d0      	cmp	r8, sl
 23fc2d4:	460d      	mov	r5, r1
 23fc2d6:	d1db      	bne.n	23fc290 <__kernel_rem_pio2+0x120>
 23fc2d8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 23fc2dc:	ec45 4b10 	vmov	d0, r4, r5
 23fc2e0:	4648      	mov	r0, r9
 23fc2e2:	f7fe fabd 	bl	23fa860 <scalbn>
 23fc2e6:	2200      	movs	r2, #0
 23fc2e8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 23fc2ec:	ee10 0a10 	vmov	r0, s0
 23fc2f0:	ec55 4b10 	vmov	r4, r5, d0
 23fc2f4:	4629      	mov	r1, r5
 23fc2f6:	f7e9 f83f 	bl	23e5378 <__aeabi_dmul>
 23fc2fa:	ec41 0b10 	vmov	d0, r0, r1
 23fc2fe:	f000 fc2f 	bl	23fcb60 <floor>
 23fc302:	2200      	movs	r2, #0
 23fc304:	4b59      	ldr	r3, [pc, #356]	; (23fc46c <__kernel_rem_pio2+0x2fc>)
 23fc306:	ec51 0b10 	vmov	r0, r1, d0
 23fc30a:	f7e9 f835 	bl	23e5378 <__aeabi_dmul>
 23fc30e:	4602      	mov	r2, r0
 23fc310:	460b      	mov	r3, r1
 23fc312:	4620      	mov	r0, r4
 23fc314:	4629      	mov	r1, r5
 23fc316:	f7e8 fe77 	bl	23e5008 <__aeabi_dsub>
 23fc31a:	460d      	mov	r5, r1
 23fc31c:	4604      	mov	r4, r0
 23fc31e:	f7e9 fadb 	bl	23e58d8 <__aeabi_d2iz>
 23fc322:	4680      	mov	r8, r0
 23fc324:	f7e8 ffbe 	bl	23e52a4 <__aeabi_i2d>
 23fc328:	460b      	mov	r3, r1
 23fc32a:	4602      	mov	r2, r0
 23fc32c:	4629      	mov	r1, r5
 23fc32e:	4620      	mov	r0, r4
 23fc330:	f7e8 fe6a 	bl	23e5008 <__aeabi_dsub>
 23fc334:	464b      	mov	r3, r9
 23fc336:	4606      	mov	r6, r0
 23fc338:	460f      	mov	r7, r1
 23fc33a:	2b00      	cmp	r3, #0
 23fc33c:	f340 8098 	ble.w	23fc470 <__kernel_rem_pio2+0x300>
 23fc340:	9a01      	ldr	r2, [sp, #4]
 23fc342:	a90c      	add	r1, sp, #48	; 0x30
 23fc344:	f1c9 0318 	rsb	r3, r9, #24
 23fc348:	f1c9 0517 	rsb	r5, r9, #23
 23fc34c:	3a01      	subs	r2, #1
 23fc34e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 23fc352:	fa41 f003 	asr.w	r0, r1, r3
 23fc356:	fa00 f303 	lsl.w	r3, r0, r3
 23fc35a:	4480      	add	r8, r0
 23fc35c:	1acb      	subs	r3, r1, r3
 23fc35e:	a90c      	add	r1, sp, #48	; 0x30
 23fc360:	fa43 f505 	asr.w	r5, r3, r5
 23fc364:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 23fc368:	2d00      	cmp	r5, #0
 23fc36a:	f300 808b 	bgt.w	23fc484 <__kernel_rem_pio2+0x314>
 23fc36e:	2200      	movs	r2, #0
 23fc370:	2300      	movs	r3, #0
 23fc372:	4630      	mov	r0, r6
 23fc374:	4639      	mov	r1, r7
 23fc376:	f7e9 fa67 	bl	23e5848 <__aeabi_dcmpeq>
 23fc37a:	2800      	cmp	r0, #0
 23fc37c:	f000 824d 	beq.w	23fc81a <__kernel_rem_pio2+0x6aa>
 23fc380:	9a01      	ldr	r2, [sp, #4]
 23fc382:	9b05      	ldr	r3, [sp, #20]
 23fc384:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
 23fc388:	4553      	cmp	r3, sl
 23fc38a:	dc10      	bgt.n	23fc3ae <__kernel_rem_pio2+0x23e>
 23fc38c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 23fc390:	980a      	ldr	r0, [sp, #40]	; 0x28
 23fc392:	4413      	add	r3, r2
 23fc394:	aa0c      	add	r2, sp, #48	; 0x30
 23fc396:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 23fc39a:	2200      	movs	r2, #0
 23fc39c:	f853 1904 	ldr.w	r1, [r3], #-4
 23fc3a0:	4283      	cmp	r3, r0
 23fc3a2:	ea42 0201 	orr.w	r2, r2, r1
 23fc3a6:	d1f9      	bne.n	23fc39c <__kernel_rem_pio2+0x22c>
 23fc3a8:	2a00      	cmp	r2, #0
 23fc3aa:	f040 80df 	bne.w	23fc56c <__kernel_rem_pio2+0x3fc>
 23fc3ae:	9b05      	ldr	r3, [sp, #20]
 23fc3b0:	aa0c      	add	r2, sp, #48	; 0x30
 23fc3b2:	3b01      	subs	r3, #1
 23fc3b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 23fc3b8:	2b00      	cmp	r3, #0
 23fc3ba:	f040 80cf 	bne.w	23fc55c <__kernel_rem_pio2+0x3ec>
 23fc3be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23fc3c0:	2301      	movs	r3, #1
 23fc3c2:	f852 1904 	ldr.w	r1, [r2], #-4
 23fc3c6:	3301      	adds	r3, #1
 23fc3c8:	2900      	cmp	r1, #0
 23fc3ca:	d0fa      	beq.n	23fc3c2 <__kernel_rem_pio2+0x252>
 23fc3cc:	9a01      	ldr	r2, [sp, #4]
 23fc3ce:	18d3      	adds	r3, r2, r3
 23fc3d0:	9302      	str	r3, [sp, #8]
 23fc3d2:	1c53      	adds	r3, r2, #1
 23fc3d4:	4699      	mov	r9, r3
 23fc3d6:	9a01      	ldr	r2, [sp, #4]
 23fc3d8:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 23fc3dc:	9908      	ldr	r1, [sp, #32]
 23fc3de:	440a      	add	r2, r1
 23fc3e0:	4690      	mov	r8, r2
 23fc3e2:	9a07      	ldr	r2, [sp, #28]
 23fc3e4:	441a      	add	r2, r3
 23fc3e6:	4492      	add	sl, r2
 23fc3e8:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 23fc3ea:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 23fc3ee:	aa20      	add	r2, sp, #128	; 0x80
 23fc3f0:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
 23fc3f4:	aa70      	add	r2, sp, #448	; 0x1c0
 23fc3f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 23fc3fa:	9301      	str	r3, [sp, #4]
 23fc3fc:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 23fc400:	4647      	mov	r7, r8
 23fc402:	f7e8 ff4f 	bl	23e52a4 <__aeabi_i2d>
 23fc406:	460b      	mov	r3, r1
 23fc408:	9903      	ldr	r1, [sp, #12]
 23fc40a:	4602      	mov	r2, r0
 23fc40c:	f108 0808 	add.w	r8, r8, #8
 23fc410:	2900      	cmp	r1, #0
 23fc412:	e948 2302 	strd	r2, r3, [r8, #-8]
 23fc416:	db1e      	blt.n	23fc456 <__kernel_rem_pio2+0x2e6>
 23fc418:	9e04      	ldr	r6, [sp, #16]
 23fc41a:	2400      	movs	r4, #0
 23fc41c:	2500      	movs	r5, #0
 23fc41e:	e001      	b.n	23fc424 <__kernel_rem_pio2+0x2b4>
 23fc420:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 23fc424:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 23fc428:	f7e8 ffa6 	bl	23e5378 <__aeabi_dmul>
 23fc42c:	4602      	mov	r2, r0
 23fc42e:	460b      	mov	r3, r1
 23fc430:	4620      	mov	r0, r4
 23fc432:	4629      	mov	r1, r5
 23fc434:	f7e8 fdea 	bl	23e500c <__adddf3>
 23fc438:	455e      	cmp	r6, fp
 23fc43a:	4604      	mov	r4, r0
 23fc43c:	460d      	mov	r5, r1
 23fc43e:	d1ef      	bne.n	23fc420 <__kernel_rem_pio2+0x2b0>
 23fc440:	9b01      	ldr	r3, [sp, #4]
 23fc442:	f109 0901 	add.w	r9, r9, #1
 23fc446:	e8e3 4502 	strd	r4, r5, [r3], #8
 23fc44a:	9301      	str	r3, [sp, #4]
 23fc44c:	9b02      	ldr	r3, [sp, #8]
 23fc44e:	4599      	cmp	r9, r3
 23fc450:	ddd4      	ble.n	23fc3fc <__kernel_rem_pio2+0x28c>
 23fc452:	9301      	str	r3, [sp, #4]
 23fc454:	e70e      	b.n	23fc274 <__kernel_rem_pio2+0x104>
 23fc456:	2400      	movs	r4, #0
 23fc458:	2500      	movs	r5, #0
 23fc45a:	e7f1      	b.n	23fc440 <__kernel_rem_pio2+0x2d0>
 23fc45c:	023ffe28 	.word	0x023ffe28
 23fc460:	2aaaaaab 	.word	0x2aaaaaab
 23fc464:	3e700000 	.word	0x3e700000
 23fc468:	41700000 	.word	0x41700000
 23fc46c:	40200000 	.word	0x40200000
 23fc470:	d16b      	bne.n	23fc54a <__kernel_rem_pio2+0x3da>
 23fc472:	9b01      	ldr	r3, [sp, #4]
 23fc474:	aa0c      	add	r2, sp, #48	; 0x30
 23fc476:	3b01      	subs	r3, #1
 23fc478:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 23fc47c:	15ed      	asrs	r5, r5, #23
 23fc47e:	2d00      	cmp	r5, #0
 23fc480:	f77f af75 	ble.w	23fc36e <__kernel_rem_pio2+0x1fe>
 23fc484:	9b01      	ldr	r3, [sp, #4]
 23fc486:	f108 0801 	add.w	r8, r8, #1
 23fc48a:	2b00      	cmp	r3, #0
 23fc48c:	f340 81c3 	ble.w	23fc816 <__kernel_rem_pio2+0x6a6>
 23fc490:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 23fc492:	2c00      	cmp	r4, #0
 23fc494:	d151      	bne.n	23fc53a <__kernel_rem_pio2+0x3ca>
 23fc496:	9b01      	ldr	r3, [sp, #4]
 23fc498:	2b01      	cmp	r3, #1
 23fc49a:	d020      	beq.n	23fc4de <__kernel_rem_pio2+0x36e>
 23fc49c:	ab0c      	add	r3, sp, #48	; 0x30
 23fc49e:	2201      	movs	r2, #1
 23fc4a0:	f853 4f04 	ldr.w	r4, [r3, #4]!
 23fc4a4:	2c00      	cmp	r4, #0
 23fc4a6:	d04b      	beq.n	23fc540 <__kernel_rem_pio2+0x3d0>
 23fc4a8:	1c53      	adds	r3, r2, #1
 23fc4aa:	a90c      	add	r1, sp, #48	; 0x30
 23fc4ac:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
 23fc4b0:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
 23fc4b4:	9901      	ldr	r1, [sp, #4]
 23fc4b6:	4299      	cmp	r1, r3
 23fc4b8:	dd10      	ble.n	23fc4dc <__kernel_rem_pio2+0x36c>
 23fc4ba:	a80c      	add	r0, sp, #48	; 0x30
 23fc4bc:	aa0c      	add	r2, sp, #48	; 0x30
 23fc4be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 23fc4c2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 23fc4c6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 23fc4ca:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 23fc4ce:	e000      	b.n	23fc4d2 <__kernel_rem_pio2+0x362>
 23fc4d0:	681a      	ldr	r2, [r3, #0]
 23fc4d2:	1a8a      	subs	r2, r1, r2
 23fc4d4:	f843 2b04 	str.w	r2, [r3], #4
 23fc4d8:	4283      	cmp	r3, r0
 23fc4da:	d1f9      	bne.n	23fc4d0 <__kernel_rem_pio2+0x360>
 23fc4dc:	2401      	movs	r4, #1
 23fc4de:	9b06      	ldr	r3, [sp, #24]
 23fc4e0:	2b00      	cmp	r3, #0
 23fc4e2:	dd0e      	ble.n	23fc502 <__kernel_rem_pio2+0x392>
 23fc4e4:	2b01      	cmp	r3, #1
 23fc4e6:	f000 816b 	beq.w	23fc7c0 <__kernel_rem_pio2+0x650>
 23fc4ea:	2b02      	cmp	r3, #2
 23fc4ec:	d109      	bne.n	23fc502 <__kernel_rem_pio2+0x392>
 23fc4ee:	9b01      	ldr	r3, [sp, #4]
 23fc4f0:	a90c      	add	r1, sp, #48	; 0x30
 23fc4f2:	1e5a      	subs	r2, r3, #1
 23fc4f4:	ab0c      	add	r3, sp, #48	; 0x30
 23fc4f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23fc4fa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 23fc4fe:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 23fc502:	2d02      	cmp	r5, #2
 23fc504:	f47f af33 	bne.w	23fc36e <__kernel_rem_pio2+0x1fe>
 23fc508:	4632      	mov	r2, r6
 23fc50a:	463b      	mov	r3, r7
 23fc50c:	2000      	movs	r0, #0
 23fc50e:	49b6      	ldr	r1, [pc, #728]	; (23fc7e8 <__kernel_rem_pio2+0x678>)
 23fc510:	f7e8 fd7a 	bl	23e5008 <__aeabi_dsub>
 23fc514:	4606      	mov	r6, r0
 23fc516:	460f      	mov	r7, r1
 23fc518:	2c00      	cmp	r4, #0
 23fc51a:	f43f af28 	beq.w	23fc36e <__kernel_rem_pio2+0x1fe>
 23fc51e:	9806      	ldr	r0, [sp, #24]
 23fc520:	ed9f 0bad 	vldr	d0, [pc, #692]	; 23fc7d8 <__kernel_rem_pio2+0x668>
 23fc524:	f7fe f99c 	bl	23fa860 <scalbn>
 23fc528:	4630      	mov	r0, r6
 23fc52a:	4639      	mov	r1, r7
 23fc52c:	ec53 2b10 	vmov	r2, r3, d0
 23fc530:	f7e8 fd6a 	bl	23e5008 <__aeabi_dsub>
 23fc534:	4606      	mov	r6, r0
 23fc536:	460f      	mov	r7, r1
 23fc538:	e719      	b.n	23fc36e <__kernel_rem_pio2+0x1fe>
 23fc53a:	2301      	movs	r3, #1
 23fc53c:	2200      	movs	r2, #0
 23fc53e:	e7b4      	b.n	23fc4aa <__kernel_rem_pio2+0x33a>
 23fc540:	3201      	adds	r2, #1
 23fc542:	9901      	ldr	r1, [sp, #4]
 23fc544:	428a      	cmp	r2, r1
 23fc546:	d1ab      	bne.n	23fc4a0 <__kernel_rem_pio2+0x330>
 23fc548:	e7c9      	b.n	23fc4de <__kernel_rem_pio2+0x36e>
 23fc54a:	2200      	movs	r2, #0
 23fc54c:	4ba7      	ldr	r3, [pc, #668]	; (23fc7ec <__kernel_rem_pio2+0x67c>)
 23fc54e:	f7e9 f999 	bl	23e5884 <__aeabi_dcmpge>
 23fc552:	2800      	cmp	r0, #0
 23fc554:	f040 8152 	bne.w	23fc7fc <__kernel_rem_pio2+0x68c>
 23fc558:	4605      	mov	r5, r0
 23fc55a:	e708      	b.n	23fc36e <__kernel_rem_pio2+0x1fe>
 23fc55c:	9b01      	ldr	r3, [sp, #4]
 23fc55e:	3301      	adds	r3, #1
 23fc560:	4699      	mov	r9, r3
 23fc562:	9302      	str	r3, [sp, #8]
 23fc564:	e737      	b.n	23fc3d6 <__kernel_rem_pio2+0x266>
 23fc566:	2400      	movs	r4, #0
 23fc568:	2500      	movs	r5, #0
 23fc56a:	e66a      	b.n	23fc242 <__kernel_rem_pio2+0xd2>
 23fc56c:	9b06      	ldr	r3, [sp, #24]
 23fc56e:	9503      	str	r5, [sp, #12]
 23fc570:	f1a3 0218 	sub.w	r2, r3, #24
 23fc574:	ab0c      	add	r3, sp, #48	; 0x30
 23fc576:	f8cd 801c 	str.w	r8, [sp, #28]
 23fc57a:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 23fc57e:	9206      	str	r2, [sp, #24]
 23fc580:	b973      	cbnz	r3, 23fc5a0 <__kernel_rem_pio2+0x430>
 23fc582:	4b9b      	ldr	r3, [pc, #620]	; (23fc7f0 <__kernel_rem_pio2+0x680>)
 23fc584:	9901      	ldr	r1, [sp, #4]
 23fc586:	4419      	add	r1, r3
 23fc588:	460b      	mov	r3, r1
 23fc58a:	a90c      	add	r1, sp, #48	; 0x30
 23fc58c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 23fc590:	f853 1904 	ldr.w	r1, [r3], #-4
 23fc594:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 23fc598:	3a18      	subs	r2, #24
 23fc59a:	2900      	cmp	r1, #0
 23fc59c:	d0f8      	beq.n	23fc590 <__kernel_rem_pio2+0x420>
 23fc59e:	9206      	str	r2, [sp, #24]
 23fc5a0:	9806      	ldr	r0, [sp, #24]
 23fc5a2:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 23fc7d8 <__kernel_rem_pio2+0x668>
 23fc5a6:	f7fe f95b 	bl	23fa860 <scalbn>
 23fc5aa:	f1ba 0f00 	cmp.w	sl, #0
 23fc5ae:	ec55 4b10 	vmov	r4, r5, d0
 23fc5b2:	f2c0 81db 	blt.w	23fc96c <__kernel_rem_pio2+0x7fc>
 23fc5b6:	ab70      	add	r3, sp, #448	; 0x1c0
 23fc5b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 23fc5bc:	f04f 0800 	mov.w	r8, #0
 23fc5c0:	f8df 9230 	ldr.w	r9, [pc, #560]	; 23fc7f4 <__kernel_rem_pio2+0x684>
 23fc5c4:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
 23fc5c8:	9204      	str	r2, [sp, #16]
 23fc5ca:	f10a 0301 	add.w	r3, sl, #1
 23fc5ce:	aa0c      	add	r2, sp, #48	; 0x30
 23fc5d0:	f10b 0708 	add.w	r7, fp, #8
 23fc5d4:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 23fc5d8:	9306      	str	r3, [sp, #24]
 23fc5da:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 23fc5de:	f7e8 fe61 	bl	23e52a4 <__aeabi_i2d>
 23fc5e2:	4622      	mov	r2, r4
 23fc5e4:	462b      	mov	r3, r5
 23fc5e6:	f7e8 fec7 	bl	23e5378 <__aeabi_dmul>
 23fc5ea:	464b      	mov	r3, r9
 23fc5ec:	4642      	mov	r2, r8
 23fc5ee:	e967 0102 	strd	r0, r1, [r7, #-8]!
 23fc5f2:	4620      	mov	r0, r4
 23fc5f4:	4629      	mov	r1, r5
 23fc5f6:	f7e8 febf 	bl	23e5378 <__aeabi_dmul>
 23fc5fa:	ab0c      	add	r3, sp, #48	; 0x30
 23fc5fc:	4604      	mov	r4, r0
 23fc5fe:	460d      	mov	r5, r1
 23fc600:	429e      	cmp	r6, r3
 23fc602:	d1ea      	bne.n	23fc5da <__kernel_rem_pio2+0x46a>
 23fc604:	ab48      	add	r3, sp, #288	; 0x120
 23fc606:	f04f 0900 	mov.w	r9, #0
 23fc60a:	e9cd 3a01 	strd	r3, sl, [sp, #4]
 23fc60e:	f8dd a014 	ldr.w	sl, [sp, #20]
 23fc612:	f1ba 0f00 	cmp.w	sl, #0
 23fc616:	db2c      	blt.n	23fc672 <__kernel_rem_pio2+0x502>
 23fc618:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 23fc7f8 <__kernel_rem_pio2+0x688>
 23fc61c:	465f      	mov	r7, fp
 23fc61e:	2600      	movs	r6, #0
 23fc620:	2400      	movs	r4, #0
 23fc622:	2500      	movs	r5, #0
 23fc624:	a36e      	add	r3, pc, #440	; (adr r3, 23fc7e0 <__kernel_rem_pio2+0x670>)
 23fc626:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc62a:	e003      	b.n	23fc634 <__kernel_rem_pio2+0x4c4>
 23fc62c:	45b1      	cmp	r9, r6
 23fc62e:	db10      	blt.n	23fc652 <__kernel_rem_pio2+0x4e2>
 23fc630:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 23fc634:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 23fc638:	3601      	adds	r6, #1
 23fc63a:	f7e8 fe9d 	bl	23e5378 <__aeabi_dmul>
 23fc63e:	4602      	mov	r2, r0
 23fc640:	460b      	mov	r3, r1
 23fc642:	4620      	mov	r0, r4
 23fc644:	4629      	mov	r1, r5
 23fc646:	f7e8 fce1 	bl	23e500c <__adddf3>
 23fc64a:	45b2      	cmp	sl, r6
 23fc64c:	4604      	mov	r4, r0
 23fc64e:	460d      	mov	r5, r1
 23fc650:	daec      	bge.n	23fc62c <__kernel_rem_pio2+0x4bc>
 23fc652:	9b01      	ldr	r3, [sp, #4]
 23fc654:	f1ab 0b08 	sub.w	fp, fp, #8
 23fc658:	9a02      	ldr	r2, [sp, #8]
 23fc65a:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 23fc65e:	454a      	cmp	r2, r9
 23fc660:	e9c3 4500 	strd	r4, r5, [r3]
 23fc664:	f109 0301 	add.w	r3, r9, #1
 23fc668:	d006      	beq.n	23fc678 <__kernel_rem_pio2+0x508>
 23fc66a:	f1ba 0f00 	cmp.w	sl, #0
 23fc66e:	4699      	mov	r9, r3
 23fc670:	dad2      	bge.n	23fc618 <__kernel_rem_pio2+0x4a8>
 23fc672:	2400      	movs	r4, #0
 23fc674:	2500      	movs	r5, #0
 23fc676:	e7ec      	b.n	23fc652 <__kernel_rem_pio2+0x4e2>
 23fc678:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23fc67a:	f8dd a008 	ldr.w	sl, [sp, #8]
 23fc67e:	2b02      	cmp	r3, #2
 23fc680:	dc1e      	bgt.n	23fc6c0 <__kernel_rem_pio2+0x550>
 23fc682:	2b00      	cmp	r3, #0
 23fc684:	f300 80ff 	bgt.w	23fc886 <__kernel_rem_pio2+0x716>
 23fc688:	d113      	bne.n	23fc6b2 <__kernel_rem_pio2+0x542>
 23fc68a:	9c04      	ldr	r4, [sp, #16]
 23fc68c:	2000      	movs	r0, #0
 23fc68e:	9d01      	ldr	r5, [sp, #4]
 23fc690:	2100      	movs	r1, #0
 23fc692:	3408      	adds	r4, #8
 23fc694:	442c      	add	r4, r5
 23fc696:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 23fc69a:	f7e8 fcb7 	bl	23e500c <__adddf3>
 23fc69e:	42a5      	cmp	r5, r4
 23fc6a0:	d1f9      	bne.n	23fc696 <__kernel_rem_pio2+0x526>
 23fc6a2:	9b03      	ldr	r3, [sp, #12]
 23fc6a4:	b113      	cbz	r3, 23fc6ac <__kernel_rem_pio2+0x53c>
 23fc6a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fc6aa:	4619      	mov	r1, r3
 23fc6ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fc6ae:	e9c3 0100 	strd	r0, r1, [r3]
 23fc6b2:	9b07      	ldr	r3, [sp, #28]
 23fc6b4:	f003 0007 	and.w	r0, r3, #7
 23fc6b8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23fc6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc6c0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23fc6c2:	2b03      	cmp	r3, #3
 23fc6c4:	d1f5      	bne.n	23fc6b2 <__kernel_rem_pio2+0x542>
 23fc6c6:	f1ba 0f00 	cmp.w	sl, #0
 23fc6ca:	f000 816b 	beq.w	23fc9a4 <__kernel_rem_pio2+0x834>
 23fc6ce:	9a01      	ldr	r2, [sp, #4]
 23fc6d0:	9b04      	ldr	r3, [sp, #16]
 23fc6d2:	eb02 0bca 	add.w	fp, r2, sl, lsl #3
 23fc6d6:	18d3      	adds	r3, r2, r3
 23fc6d8:	e9d3 4500 	ldrd	r4, r5, [r3]
 23fc6dc:	e97b 6702 	ldrd	r6, r7, [fp, #-8]!
 23fc6e0:	4620      	mov	r0, r4
 23fc6e2:	4629      	mov	r1, r5
 23fc6e4:	4632      	mov	r2, r6
 23fc6e6:	463b      	mov	r3, r7
 23fc6e8:	f7e8 fc90 	bl	23e500c <__adddf3>
 23fc6ec:	46a0      	mov	r8, r4
 23fc6ee:	46a9      	mov	r9, r5
 23fc6f0:	4604      	mov	r4, r0
 23fc6f2:	460d      	mov	r5, r1
 23fc6f4:	4630      	mov	r0, r6
 23fc6f6:	4622      	mov	r2, r4
 23fc6f8:	4639      	mov	r1, r7
 23fc6fa:	462b      	mov	r3, r5
 23fc6fc:	f7e8 fc84 	bl	23e5008 <__aeabi_dsub>
 23fc700:	464b      	mov	r3, r9
 23fc702:	4642      	mov	r2, r8
 23fc704:	f7e8 fc82 	bl	23e500c <__adddf3>
 23fc708:	9b01      	ldr	r3, [sp, #4]
 23fc70a:	455b      	cmp	r3, fp
 23fc70c:	e9cb 0102 	strd	r0, r1, [fp, #8]
 23fc710:	e9cb 4500 	strd	r4, r5, [fp]
 23fc714:	d1e2      	bne.n	23fc6dc <__kernel_rem_pio2+0x56c>
 23fc716:	f1ba 0f01 	cmp.w	sl, #1
 23fc71a:	f340 8143 	ble.w	23fc9a4 <__kernel_rem_pio2+0x834>
 23fc71e:	9b04      	ldr	r3, [sp, #16]
 23fc720:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 23fc724:	9901      	ldr	r1, [sp, #4]
 23fc726:	461a      	mov	r2, r3
 23fc728:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 23fc72c:	4453      	add	r3, sl
 23fc72e:	440a      	add	r2, r1
 23fc730:	00db      	lsls	r3, r3, #3
 23fc732:	f103 0a08 	add.w	sl, r3, #8
 23fc736:	9302      	str	r3, [sp, #8]
 23fc738:	e9d2 4500 	ldrd	r4, r5, [r2]
 23fc73c:	448a      	add	sl, r1
 23fc73e:	4620      	mov	r0, r4
 23fc740:	4629      	mov	r1, r5
 23fc742:	46a0      	mov	r8, r4
 23fc744:	46a9      	mov	r9, r5
 23fc746:	e97a 6702 	ldrd	r6, r7, [sl, #-8]!
 23fc74a:	4632      	mov	r2, r6
 23fc74c:	463b      	mov	r3, r7
 23fc74e:	f7e8 fc5d 	bl	23e500c <__adddf3>
 23fc752:	4604      	mov	r4, r0
 23fc754:	460d      	mov	r5, r1
 23fc756:	4630      	mov	r0, r6
 23fc758:	4622      	mov	r2, r4
 23fc75a:	4639      	mov	r1, r7
 23fc75c:	462b      	mov	r3, r5
 23fc75e:	f7e8 fc53 	bl	23e5008 <__aeabi_dsub>
 23fc762:	4642      	mov	r2, r8
 23fc764:	464b      	mov	r3, r9
 23fc766:	f7e8 fc51 	bl	23e500c <__adddf3>
 23fc76a:	45d3      	cmp	fp, sl
 23fc76c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 23fc770:	e9ca 4500 	strd	r4, r5, [sl]
 23fc774:	d1e3      	bne.n	23fc73e <__kernel_rem_pio2+0x5ce>
 23fc776:	9c02      	ldr	r4, [sp, #8]
 23fc778:	2000      	movs	r0, #0
 23fc77a:	9b01      	ldr	r3, [sp, #4]
 23fc77c:	2100      	movs	r1, #0
 23fc77e:	3410      	adds	r4, #16
 23fc780:	f103 0510 	add.w	r5, r3, #16
 23fc784:	441c      	add	r4, r3
 23fc786:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 23fc78a:	f7e8 fc3f 	bl	23e500c <__adddf3>
 23fc78e:	42a5      	cmp	r5, r4
 23fc790:	d1f9      	bne.n	23fc786 <__kernel_rem_pio2+0x616>
 23fc792:	9b03      	ldr	r3, [sp, #12]
 23fc794:	2b00      	cmp	r3, #0
 23fc796:	f040 80b4 	bne.w	23fc902 <__kernel_rem_pio2+0x792>
 23fc79a:	9d01      	ldr	r5, [sp, #4]
 23fc79c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 23fc79e:	e9d5 2300 	ldrd	r2, r3, [r5]
 23fc7a2:	e9c4 0104 	strd	r0, r1, [r4, #16]
 23fc7a6:	e9c4 2300 	strd	r2, r3, [r4]
 23fc7aa:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 23fc7ae:	e9c4 2302 	strd	r2, r3, [r4, #8]
 23fc7b2:	9b07      	ldr	r3, [sp, #28]
 23fc7b4:	f003 0007 	and.w	r0, r3, #7
 23fc7b8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23fc7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc7c0:	9b01      	ldr	r3, [sp, #4]
 23fc7c2:	a90c      	add	r1, sp, #48	; 0x30
 23fc7c4:	1e5a      	subs	r2, r3, #1
 23fc7c6:	ab0c      	add	r3, sp, #48	; 0x30
 23fc7c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23fc7cc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 23fc7d0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 23fc7d4:	e695      	b.n	23fc502 <__kernel_rem_pio2+0x392>
 23fc7d6:	bf00      	nop
 23fc7d8:	00000000 	.word	0x00000000
 23fc7dc:	3ff00000 	.word	0x3ff00000
 23fc7e0:	40000000 	.word	0x40000000
 23fc7e4:	3ff921fb 	.word	0x3ff921fb
 23fc7e8:	3ff00000 	.word	0x3ff00000
 23fc7ec:	3fe00000 	.word	0x3fe00000
 23fc7f0:	3ffffffe 	.word	0x3ffffffe
 23fc7f4:	3e700000 	.word	0x3e700000
 23fc7f8:	023ffdf0 	.word	0x023ffdf0
 23fc7fc:	9b01      	ldr	r3, [sp, #4]
 23fc7fe:	f108 0801 	add.w	r8, r8, #1
 23fc802:	2b00      	cmp	r3, #0
 23fc804:	f340 80a8 	ble.w	23fc958 <__kernel_rem_pio2+0x7e8>
 23fc808:	2502      	movs	r5, #2
 23fc80a:	e641      	b.n	23fc490 <__kernel_rem_pio2+0x320>
 23fc80c:	2100      	movs	r1, #0
 23fc80e:	f06f 0317 	mvn.w	r3, #23
 23fc812:	9107      	str	r1, [sp, #28]
 23fc814:	e4cc      	b.n	23fc1b0 <__kernel_rem_pio2+0x40>
 23fc816:	2400      	movs	r4, #0
 23fc818:	e661      	b.n	23fc4de <__kernel_rem_pio2+0x36e>
 23fc81a:	ec47 6b10 	vmov	d0, r6, r7
 23fc81e:	9e06      	ldr	r6, [sp, #24]
 23fc820:	9503      	str	r5, [sp, #12]
 23fc822:	4270      	negs	r0, r6
 23fc824:	f8cd 801c 	str.w	r8, [sp, #28]
 23fc828:	f7fe f81a 	bl	23fa860 <scalbn>
 23fc82c:	2200      	movs	r2, #0
 23fc82e:	4b5f      	ldr	r3, [pc, #380]	; (23fc9ac <__kernel_rem_pio2+0x83c>)
 23fc830:	ee10 0a10 	vmov	r0, s0
 23fc834:	ec55 4b10 	vmov	r4, r5, d0
 23fc838:	4629      	mov	r1, r5
 23fc83a:	f7e9 f823 	bl	23e5884 <__aeabi_dcmpge>
 23fc83e:	2800      	cmp	r0, #0
 23fc840:	d055      	beq.n	23fc8ee <__kernel_rem_pio2+0x77e>
 23fc842:	3618      	adds	r6, #24
 23fc844:	2200      	movs	r2, #0
 23fc846:	4b5a      	ldr	r3, [pc, #360]	; (23fc9b0 <__kernel_rem_pio2+0x840>)
 23fc848:	4620      	mov	r0, r4
 23fc84a:	4629      	mov	r1, r5
 23fc84c:	9606      	str	r6, [sp, #24]
 23fc84e:	f7e8 fd93 	bl	23e5378 <__aeabi_dmul>
 23fc852:	9f01      	ldr	r7, [sp, #4]
 23fc854:	f7e9 f840 	bl	23e58d8 <__aeabi_d2iz>
 23fc858:	4606      	mov	r6, r0
 23fc85a:	f7e8 fd23 	bl	23e52a4 <__aeabi_i2d>
 23fc85e:	2200      	movs	r2, #0
 23fc860:	4b52      	ldr	r3, [pc, #328]	; (23fc9ac <__kernel_rem_pio2+0x83c>)
 23fc862:	f107 0a01 	add.w	sl, r7, #1
 23fc866:	f7e8 fd87 	bl	23e5378 <__aeabi_dmul>
 23fc86a:	460b      	mov	r3, r1
 23fc86c:	4602      	mov	r2, r0
 23fc86e:	4629      	mov	r1, r5
 23fc870:	4620      	mov	r0, r4
 23fc872:	f7e8 fbc9 	bl	23e5008 <__aeabi_dsub>
 23fc876:	f7e9 f82f 	bl	23e58d8 <__aeabi_d2iz>
 23fc87a:	ab0c      	add	r3, sp, #48	; 0x30
 23fc87c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 23fc880:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 23fc884:	e68c      	b.n	23fc5a0 <__kernel_rem_pio2+0x430>
 23fc886:	9d01      	ldr	r5, [sp, #4]
 23fc888:	2000      	movs	r0, #0
 23fc88a:	9a06      	ldr	r2, [sp, #24]
 23fc88c:	2100      	movs	r1, #0
 23fc88e:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
 23fc892:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 23fc896:	f7e8 fbb9 	bl	23e500c <__adddf3>
 23fc89a:	42a5      	cmp	r5, r4
 23fc89c:	d1f9      	bne.n	23fc892 <__kernel_rem_pio2+0x722>
 23fc89e:	9b03      	ldr	r3, [sp, #12]
 23fc8a0:	2b00      	cmp	r3, #0
 23fc8a2:	d149      	bne.n	23fc938 <__kernel_rem_pio2+0x7c8>
 23fc8a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fc8a6:	4602      	mov	r2, r0
 23fc8a8:	e9c3 0100 	strd	r0, r1, [r3]
 23fc8ac:	460b      	mov	r3, r1
 23fc8ae:	9901      	ldr	r1, [sp, #4]
 23fc8b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fc8b4:	f7e8 fba8 	bl	23e5008 <__aeabi_dsub>
 23fc8b8:	f1ba 0f00 	cmp.w	sl, #0
 23fc8bc:	dd0d      	ble.n	23fc8da <__kernel_rem_pio2+0x76a>
 23fc8be:	ad4a      	add	r5, sp, #296	; 0x128
 23fc8c0:	2401      	movs	r4, #1
 23fc8c2:	3401      	adds	r4, #1
 23fc8c4:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 23fc8c8:	f7e8 fba0 	bl	23e500c <__adddf3>
 23fc8cc:	45a2      	cmp	sl, r4
 23fc8ce:	daf8      	bge.n	23fc8c2 <__kernel_rem_pio2+0x752>
 23fc8d0:	9b03      	ldr	r3, [sp, #12]
 23fc8d2:	b113      	cbz	r3, 23fc8da <__kernel_rem_pio2+0x76a>
 23fc8d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fc8d8:	4619      	mov	r1, r3
 23fc8da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fc8dc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 23fc8e0:	9b07      	ldr	r3, [sp, #28]
 23fc8e2:	f003 0007 	and.w	r0, r3, #7
 23fc8e6:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23fc8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc8ee:	4620      	mov	r0, r4
 23fc8f0:	4629      	mov	r1, r5
 23fc8f2:	f7e8 fff1 	bl	23e58d8 <__aeabi_d2iz>
 23fc8f6:	9b01      	ldr	r3, [sp, #4]
 23fc8f8:	aa0c      	add	r2, sp, #48	; 0x30
 23fc8fa:	469a      	mov	sl, r3
 23fc8fc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 23fc900:	e64e      	b.n	23fc5a0 <__kernel_rem_pio2+0x430>
 23fc902:	9b01      	ldr	r3, [sp, #4]
 23fc904:	4602      	mov	r2, r0
 23fc906:	461e      	mov	r6, r3
 23fc908:	685c      	ldr	r4, [r3, #4]
 23fc90a:	68dd      	ldr	r5, [r3, #12]
 23fc90c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fc910:	990b      	ldr	r1, [sp, #44]	; 0x2c
 23fc912:	e9c1 2304 	strd	r2, r3, [r1, #16]
 23fc916:	6832      	ldr	r2, [r6, #0]
 23fc918:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 23fc91c:	e9c1 2300 	strd	r2, r3, [r1]
 23fc920:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 23fc924:	68b2      	ldr	r2, [r6, #8]
 23fc926:	e9c1 2302 	strd	r2, r3, [r1, #8]
 23fc92a:	9b07      	ldr	r3, [sp, #28]
 23fc92c:	f003 0007 	and.w	r0, r3, #7
 23fc930:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23fc934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc938:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fc93a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fc93e:	6053      	str	r3, [r2, #4]
 23fc940:	460b      	mov	r3, r1
 23fc942:	9901      	ldr	r1, [sp, #4]
 23fc944:	6010      	str	r0, [r2, #0]
 23fc946:	4602      	mov	r2, r0
 23fc948:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fc94c:	f7e8 fb5c 	bl	23e5008 <__aeabi_dsub>
 23fc950:	f1ba 0f00 	cmp.w	sl, #0
 23fc954:	dcb3      	bgt.n	23fc8be <__kernel_rem_pio2+0x74e>
 23fc956:	e7bd      	b.n	23fc8d4 <__kernel_rem_pio2+0x764>
 23fc958:	4632      	mov	r2, r6
 23fc95a:	463b      	mov	r3, r7
 23fc95c:	2000      	movs	r0, #0
 23fc95e:	4915      	ldr	r1, [pc, #84]	; (23fc9b4 <__kernel_rem_pio2+0x844>)
 23fc960:	f7e8 fb52 	bl	23e5008 <__aeabi_dsub>
 23fc964:	2502      	movs	r5, #2
 23fc966:	4606      	mov	r6, r0
 23fc968:	460f      	mov	r7, r1
 23fc96a:	e500      	b.n	23fc36e <__kernel_rem_pio2+0x1fe>
 23fc96c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23fc96e:	2b02      	cmp	r3, #2
 23fc970:	dc0a      	bgt.n	23fc988 <__kernel_rem_pio2+0x818>
 23fc972:	2b00      	cmp	r3, #0
 23fc974:	dc11      	bgt.n	23fc99a <__kernel_rem_pio2+0x82a>
 23fc976:	f47f ae9c 	bne.w	23fc6b2 <__kernel_rem_pio2+0x542>
 23fc97a:	2000      	movs	r0, #0
 23fc97c:	2100      	movs	r1, #0
 23fc97e:	e690      	b.n	23fc6a2 <__kernel_rem_pio2+0x532>
 23fc980:	9b08      	ldr	r3, [sp, #32]
 23fc982:	00db      	lsls	r3, r3, #3
 23fc984:	9302      	str	r3, [sp, #8]
 23fc986:	e465      	b.n	23fc254 <__kernel_rem_pio2+0xe4>
 23fc988:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23fc98a:	2b03      	cmp	r3, #3
 23fc98c:	f47f ae91 	bne.w	23fc6b2 <__kernel_rem_pio2+0x542>
 23fc990:	ab48      	add	r3, sp, #288	; 0x120
 23fc992:	2000      	movs	r0, #0
 23fc994:	2100      	movs	r1, #0
 23fc996:	9301      	str	r3, [sp, #4]
 23fc998:	e6fb      	b.n	23fc792 <__kernel_rem_pio2+0x622>
 23fc99a:	ab48      	add	r3, sp, #288	; 0x120
 23fc99c:	2000      	movs	r0, #0
 23fc99e:	2100      	movs	r1, #0
 23fc9a0:	9301      	str	r3, [sp, #4]
 23fc9a2:	e77c      	b.n	23fc89e <__kernel_rem_pio2+0x72e>
 23fc9a4:	2000      	movs	r0, #0
 23fc9a6:	2100      	movs	r1, #0
 23fc9a8:	e6f3      	b.n	23fc792 <__kernel_rem_pio2+0x622>
 23fc9aa:	bf00      	nop
 23fc9ac:	41700000 	.word	0x41700000
 23fc9b0:	3e700000 	.word	0x3e700000
 23fc9b4:	3ff00000 	.word	0x3ff00000

023fc9b8 <__kernel_sin>:
 23fc9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fc9bc:	ec5b ab10 	vmov	sl, fp, d0
 23fc9c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 23fc9c4:	4680      	mov	r8, r0
 23fc9c6:	ed2d 8b02 	vpush	{d8}
 23fc9ca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 23fc9ce:	b083      	sub	sp, #12
 23fc9d0:	ed8d 1b00 	vstr	d1, [sp]
 23fc9d4:	da07      	bge.n	23fc9e6 <__kernel_sin+0x2e>
 23fc9d6:	ee10 0a10 	vmov	r0, s0
 23fc9da:	4659      	mov	r1, fp
 23fc9dc:	f7e8 ff7c 	bl	23e58d8 <__aeabi_d2iz>
 23fc9e0:	2800      	cmp	r0, #0
 23fc9e2:	f000 808e 	beq.w	23fcb02 <__kernel_sin+0x14a>
 23fc9e6:	4652      	mov	r2, sl
 23fc9e8:	465b      	mov	r3, fp
 23fc9ea:	4650      	mov	r0, sl
 23fc9ec:	4659      	mov	r1, fp
 23fc9ee:	f7e8 fcc3 	bl	23e5378 <__aeabi_dmul>
 23fc9f2:	4604      	mov	r4, r0
 23fc9f4:	460d      	mov	r5, r1
 23fc9f6:	4650      	mov	r0, sl
 23fc9f8:	4622      	mov	r2, r4
 23fc9fa:	4659      	mov	r1, fp
 23fc9fc:	462b      	mov	r3, r5
 23fc9fe:	f7e8 fcbb 	bl	23e5378 <__aeabi_dmul>
 23fca02:	4606      	mov	r6, r0
 23fca04:	460f      	mov	r7, r1
 23fca06:	4620      	mov	r0, r4
 23fca08:	4629      	mov	r1, r5
 23fca0a:	a344      	add	r3, pc, #272	; (adr r3, 23fcb1c <__kernel_sin+0x164>)
 23fca0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fca10:	f7e8 fcb2 	bl	23e5378 <__aeabi_dmul>
 23fca14:	a343      	add	r3, pc, #268	; (adr r3, 23fcb24 <__kernel_sin+0x16c>)
 23fca16:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fca1a:	f7e8 faf5 	bl	23e5008 <__aeabi_dsub>
 23fca1e:	4622      	mov	r2, r4
 23fca20:	462b      	mov	r3, r5
 23fca22:	f7e8 fca9 	bl	23e5378 <__aeabi_dmul>
 23fca26:	a341      	add	r3, pc, #260	; (adr r3, 23fcb2c <__kernel_sin+0x174>)
 23fca28:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fca2c:	f7e8 faee 	bl	23e500c <__adddf3>
 23fca30:	4622      	mov	r2, r4
 23fca32:	462b      	mov	r3, r5
 23fca34:	f7e8 fca0 	bl	23e5378 <__aeabi_dmul>
 23fca38:	a33e      	add	r3, pc, #248	; (adr r3, 23fcb34 <__kernel_sin+0x17c>)
 23fca3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fca3e:	f7e8 fae3 	bl	23e5008 <__aeabi_dsub>
 23fca42:	4622      	mov	r2, r4
 23fca44:	462b      	mov	r3, r5
 23fca46:	f7e8 fc97 	bl	23e5378 <__aeabi_dmul>
 23fca4a:	a33c      	add	r3, pc, #240	; (adr r3, 23fcb3c <__kernel_sin+0x184>)
 23fca4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fca50:	f7e8 fadc 	bl	23e500c <__adddf3>
 23fca54:	ec41 0b18 	vmov	d8, r0, r1
 23fca58:	f1b8 0f00 	cmp.w	r8, #0
 23fca5c:	d037      	beq.n	23fcace <__kernel_sin+0x116>
 23fca5e:	2200      	movs	r2, #0
 23fca60:	4b2d      	ldr	r3, [pc, #180]	; (23fcb18 <__kernel_sin+0x160>)
 23fca62:	e9dd 0100 	ldrd	r0, r1, [sp]
 23fca66:	f7e8 fc87 	bl	23e5378 <__aeabi_dmul>
 23fca6a:	4680      	mov	r8, r0
 23fca6c:	4689      	mov	r9, r1
 23fca6e:	4630      	mov	r0, r6
 23fca70:	4639      	mov	r1, r7
 23fca72:	ec53 2b18 	vmov	r2, r3, d8
 23fca76:	f7e8 fc7f 	bl	23e5378 <__aeabi_dmul>
 23fca7a:	4602      	mov	r2, r0
 23fca7c:	460b      	mov	r3, r1
 23fca7e:	4640      	mov	r0, r8
 23fca80:	4649      	mov	r1, r9
 23fca82:	f7e8 fac1 	bl	23e5008 <__aeabi_dsub>
 23fca86:	4622      	mov	r2, r4
 23fca88:	462b      	mov	r3, r5
 23fca8a:	f7e8 fc75 	bl	23e5378 <__aeabi_dmul>
 23fca8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 23fca92:	f7e8 fab9 	bl	23e5008 <__aeabi_dsub>
 23fca96:	4604      	mov	r4, r0
 23fca98:	460d      	mov	r5, r1
 23fca9a:	4630      	mov	r0, r6
 23fca9c:	4639      	mov	r1, r7
 23fca9e:	a31c      	add	r3, pc, #112	; (adr r3, 23fcb10 <__kernel_sin+0x158>)
 23fcaa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fcaa4:	f7e8 fc68 	bl	23e5378 <__aeabi_dmul>
 23fcaa8:	4602      	mov	r2, r0
 23fcaaa:	460b      	mov	r3, r1
 23fcaac:	4620      	mov	r0, r4
 23fcaae:	4629      	mov	r1, r5
 23fcab0:	f7e8 faac 	bl	23e500c <__adddf3>
 23fcab4:	4602      	mov	r2, r0
 23fcab6:	460b      	mov	r3, r1
 23fcab8:	4650      	mov	r0, sl
 23fcaba:	4659      	mov	r1, fp
 23fcabc:	f7e8 faa4 	bl	23e5008 <__aeabi_dsub>
 23fcac0:	ec41 0b10 	vmov	d0, r0, r1
 23fcac4:	b003      	add	sp, #12
 23fcac6:	ecbd 8b02 	vpop	{d8}
 23fcaca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fcace:	4602      	mov	r2, r0
 23fcad0:	460b      	mov	r3, r1
 23fcad2:	4620      	mov	r0, r4
 23fcad4:	4629      	mov	r1, r5
 23fcad6:	f7e8 fc4f 	bl	23e5378 <__aeabi_dmul>
 23fcada:	a30d      	add	r3, pc, #52	; (adr r3, 23fcb10 <__kernel_sin+0x158>)
 23fcadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fcae0:	f7e8 fa92 	bl	23e5008 <__aeabi_dsub>
 23fcae4:	4632      	mov	r2, r6
 23fcae6:	463b      	mov	r3, r7
 23fcae8:	f7e8 fc46 	bl	23e5378 <__aeabi_dmul>
 23fcaec:	4652      	mov	r2, sl
 23fcaee:	465b      	mov	r3, fp
 23fcaf0:	f7e8 fa8c 	bl	23e500c <__adddf3>
 23fcaf4:	ec41 0b10 	vmov	d0, r0, r1
 23fcaf8:	b003      	add	sp, #12
 23fcafa:	ecbd 8b02 	vpop	{d8}
 23fcafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fcb02:	ec4b ab10 	vmov	d0, sl, fp
 23fcb06:	b003      	add	sp, #12
 23fcb08:	ecbd 8b02 	vpop	{d8}
 23fcb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fcb10:	55555549 	.word	0x55555549
 23fcb14:	3fc55555 	.word	0x3fc55555
 23fcb18:	3fe00000 	.word	0x3fe00000
 23fcb1c:	5acfd57c 	.word	0x5acfd57c
 23fcb20:	3de5d93a 	.word	0x3de5d93a
 23fcb24:	8a2b9ceb 	.word	0x8a2b9ceb
 23fcb28:	3e5ae5e6 	.word	0x3e5ae5e6
 23fcb2c:	57b1fe7d 	.word	0x57b1fe7d
 23fcb30:	3ec71de3 	.word	0x3ec71de3
 23fcb34:	19c161d5 	.word	0x19c161d5
 23fcb38:	3f2a01a0 	.word	0x3f2a01a0
 23fcb3c:	1110f8a6 	.word	0x1110f8a6
 23fcb40:	3f811111 	.word	0x3f811111

023fcb44 <finite>:
 23fcb44:	b082      	sub	sp, #8
 23fcb46:	4805      	ldr	r0, [pc, #20]	; (23fcb5c <finite+0x18>)
 23fcb48:	ed8d 0b00 	vstr	d0, [sp]
 23fcb4c:	9b01      	ldr	r3, [sp, #4]
 23fcb4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 23fcb52:	4418      	add	r0, r3
 23fcb54:	0fc0      	lsrs	r0, r0, #31
 23fcb56:	b002      	add	sp, #8
 23fcb58:	4770      	bx	lr
 23fcb5a:	bf00      	nop
 23fcb5c:	80100000 	.word	0x80100000

023fcb60 <floor>:
 23fcb60:	ec51 0b10 	vmov	r0, r1, d0
 23fcb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fcb66:	f3c1 530a 	ubfx	r3, r1, #20, #11
 23fcb6a:	460c      	mov	r4, r1
 23fcb6c:	ee10 6a10 	vmov	r6, s0
 23fcb70:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
 23fcb74:	2d13      	cmp	r5, #19
 23fcb76:	dc30      	bgt.n	23fcbda <floor+0x7a>
 23fcb78:	2d00      	cmp	r5, #0
 23fcb7a:	db1e      	blt.n	23fcbba <floor+0x5a>
 23fcb7c:	4f38      	ldr	r7, [pc, #224]	; (23fcc60 <floor+0x100>)
 23fcb7e:	412f      	asrs	r7, r5
 23fcb80:	ea01 0307 	and.w	r3, r1, r7
 23fcb84:	4303      	orrs	r3, r0
 23fcb86:	d02d      	beq.n	23fcbe4 <floor+0x84>
 23fcb88:	a333      	add	r3, pc, #204	; (adr r3, 23fcc58 <floor+0xf8>)
 23fcb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fcb8e:	f7e8 fa3d 	bl	23e500c <__adddf3>
 23fcb92:	2200      	movs	r2, #0
 23fcb94:	2300      	movs	r3, #0
 23fcb96:	f7e8 fe7f 	bl	23e5898 <__aeabi_dcmpgt>
 23fcb9a:	b148      	cbz	r0, 23fcbb0 <floor+0x50>
 23fcb9c:	2c00      	cmp	r4, #0
 23fcb9e:	da04      	bge.n	23fcbaa <floor+0x4a>
 23fcba0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 23fcba4:	fa43 f505 	asr.w	r5, r3, r5
 23fcba8:	442c      	add	r4, r5
 23fcbaa:	ea24 0407 	bic.w	r4, r4, r7
 23fcbae:	2600      	movs	r6, #0
 23fcbb0:	4623      	mov	r3, r4
 23fcbb2:	4632      	mov	r2, r6
 23fcbb4:	ec43 2b10 	vmov	d0, r2, r3
 23fcbb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fcbba:	a327      	add	r3, pc, #156	; (adr r3, 23fcc58 <floor+0xf8>)
 23fcbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fcbc0:	f7e8 fa24 	bl	23e500c <__adddf3>
 23fcbc4:	2200      	movs	r2, #0
 23fcbc6:	2300      	movs	r3, #0
 23fcbc8:	f7e8 fe66 	bl	23e5898 <__aeabi_dcmpgt>
 23fcbcc:	2800      	cmp	r0, #0
 23fcbce:	d0ef      	beq.n	23fcbb0 <floor+0x50>
 23fcbd0:	2c00      	cmp	r4, #0
 23fcbd2:	db29      	blt.n	23fcc28 <floor+0xc8>
 23fcbd4:	2600      	movs	r6, #0
 23fcbd6:	4634      	mov	r4, r6
 23fcbd8:	e7ea      	b.n	23fcbb0 <floor+0x50>
 23fcbda:	2d33      	cmp	r5, #51	; 0x33
 23fcbdc:	dd05      	ble.n	23fcbea <floor+0x8a>
 23fcbde:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 23fcbe2:	d019      	beq.n	23fcc18 <floor+0xb8>
 23fcbe4:	ec41 0b10 	vmov	d0, r0, r1
 23fcbe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fcbea:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 23fcbee:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 23fcbf2:	40df      	lsrs	r7, r3
 23fcbf4:	4207      	tst	r7, r0
 23fcbf6:	d0f5      	beq.n	23fcbe4 <floor+0x84>
 23fcbf8:	a317      	add	r3, pc, #92	; (adr r3, 23fcc58 <floor+0xf8>)
 23fcbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fcbfe:	f7e8 fa05 	bl	23e500c <__adddf3>
 23fcc02:	2200      	movs	r2, #0
 23fcc04:	2300      	movs	r3, #0
 23fcc06:	f7e8 fe47 	bl	23e5898 <__aeabi_dcmpgt>
 23fcc0a:	2800      	cmp	r0, #0
 23fcc0c:	d0d0      	beq.n	23fcbb0 <floor+0x50>
 23fcc0e:	2c00      	cmp	r4, #0
 23fcc10:	db13      	blt.n	23fcc3a <floor+0xda>
 23fcc12:	ea26 0607 	bic.w	r6, r6, r7
 23fcc16:	e7cb      	b.n	23fcbb0 <floor+0x50>
 23fcc18:	ee10 2a10 	vmov	r2, s0
 23fcc1c:	460b      	mov	r3, r1
 23fcc1e:	f7e8 f9f5 	bl	23e500c <__adddf3>
 23fcc22:	ec41 0b10 	vmov	d0, r0, r1
 23fcc26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fcc28:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 23fcc2c:	4a0d      	ldr	r2, [pc, #52]	; (23fcc64 <floor+0x104>)
 23fcc2e:	4333      	orrs	r3, r6
 23fcc30:	2600      	movs	r6, #0
 23fcc32:	42b3      	cmp	r3, r6
 23fcc34:	bf18      	it	ne
 23fcc36:	4614      	movne	r4, r2
 23fcc38:	e7ba      	b.n	23fcbb0 <floor+0x50>
 23fcc3a:	2d14      	cmp	r5, #20
 23fcc3c:	d008      	beq.n	23fcc50 <floor+0xf0>
 23fcc3e:	2301      	movs	r3, #1
 23fcc40:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 23fcc44:	fa03 f505 	lsl.w	r5, r3, r5
 23fcc48:	19ae      	adds	r6, r5, r6
 23fcc4a:	bf28      	it	cs
 23fcc4c:	18e4      	addcs	r4, r4, r3
 23fcc4e:	e7e0      	b.n	23fcc12 <floor+0xb2>
 23fcc50:	3401      	adds	r4, #1
 23fcc52:	e7de      	b.n	23fcc12 <floor+0xb2>
 23fcc54:	f3af 8000 	nop.w
 23fcc58:	8800759c 	.word	0x8800759c
 23fcc5c:	7e37e43c 	.word	0x7e37e43c
 23fcc60:	000fffff 	.word	0x000fffff
 23fcc64:	bff00000 	.word	0xbff00000

023fcc68 <nan>:
 23fcc68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 23fcc70 <nan+0x8>
 23fcc6c:	4770      	bx	lr
 23fcc6e:	bf00      	nop
 23fcc70:	00000000 	.word	0x00000000
 23fcc74:	7ff80000 	.word	0x7ff80000

023fcc78 <rint>:
 23fcc78:	ec53 2b10 	vmov	r2, r3, d0
 23fcc7c:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
 23fcc80:	ee10 0a10 	vmov	r0, s0
 23fcc84:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
 23fcc88:	2913      	cmp	r1, #19
 23fcc8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fcc8c:	461c      	mov	r4, r3
 23fcc8e:	b083      	sub	sp, #12
 23fcc90:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
 23fcc94:	dc3a      	bgt.n	23fcd0c <rint+0x94>
 23fcc96:	2900      	cmp	r1, #0
 23fcc98:	db30      	blt.n	23fccfc <rint+0x84>
 23fcc9a:	4d42      	ldr	r5, [pc, #264]	; (23fcda4 <rint+0x12c>)
 23fcc9c:	fa45 fc01 	asr.w	ip, r5, r1
 23fcca0:	ea03 050c 	and.w	r5, r3, ip
 23fcca4:	4315      	orrs	r5, r2
 23fcca6:	d02d      	beq.n	23fcd04 <rint+0x8c>
 23fcca8:	ea03 035c 	and.w	r3, r3, ip, lsr #1
 23fccac:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 23fccb0:	4318      	orrs	r0, r3
 23fccb2:	d00c      	beq.n	23fccce <rint+0x56>
 23fccb4:	ea24 0c0c 	bic.w	ip, r4, ip
 23fccb8:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 23fccbc:	2913      	cmp	r1, #19
 23fccbe:	fa44 f101 	asr.w	r1, r4, r1
 23fccc2:	bf0c      	ite	eq
 23fccc4:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
 23fccc8:	2000      	movne	r0, #0
 23fccca:	ea4c 0401 	orr.w	r4, ip, r1
 23fccce:	4936      	ldr	r1, [pc, #216]	; (23fcda8 <rint+0x130>)
 23fccd0:	4623      	mov	r3, r4
 23fccd2:	4602      	mov	r2, r0
 23fccd4:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
 23fccd8:	e9de 4500 	ldrd	r4, r5, [lr]
 23fccdc:	4620      	mov	r0, r4
 23fccde:	4629      	mov	r1, r5
 23fcce0:	f7e8 f994 	bl	23e500c <__adddf3>
 23fcce4:	4622      	mov	r2, r4
 23fcce6:	462b      	mov	r3, r5
 23fcce8:	e9cd 0100 	strd	r0, r1, [sp]
 23fccec:	e9dd 0100 	ldrd	r0, r1, [sp]
 23fccf0:	f7e8 f98a 	bl	23e5008 <__aeabi_dsub>
 23fccf4:	ec41 0b10 	vmov	d0, r0, r1
 23fccf8:	b003      	add	sp, #12
 23fccfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fccfc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 23fcd00:	4311      	orrs	r1, r2
 23fcd02:	d124      	bne.n	23fcd4e <rint+0xd6>
 23fcd04:	ec43 2b10 	vmov	d0, r2, r3
 23fcd08:	b003      	add	sp, #12
 23fcd0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fcd0c:	2933      	cmp	r1, #51	; 0x33
 23fcd0e:	dd08      	ble.n	23fcd22 <rint+0xaa>
 23fcd10:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 23fcd14:	d1f6      	bne.n	23fcd04 <rint+0x8c>
 23fcd16:	4619      	mov	r1, r3
 23fcd18:	f7e8 f978 	bl	23e500c <__adddf3>
 23fcd1c:	ec41 0b10 	vmov	d0, r0, r1
 23fcd20:	e7f2      	b.n	23fcd08 <rint+0x90>
 23fcd22:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 23fcd26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 23fcd2a:	fa21 f10c 	lsr.w	r1, r1, ip
 23fcd2e:	420a      	tst	r2, r1
 23fcd30:	d0e8      	beq.n	23fcd04 <rint+0x8c>
 23fcd32:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 23fcd36:	ea4f 0351 	mov.w	r3, r1, lsr #1
 23fcd3a:	d0c8      	beq.n	23fccce <rint+0x56>
 23fcd3c:	ea20 0303 	bic.w	r3, r0, r3
 23fcd40:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 23fcd44:	fa40 fc0c 	asr.w	ip, r0, ip
 23fcd48:	ea43 000c 	orr.w	r0, r3, ip
 23fcd4c:	e7bf      	b.n	23fccce <rint+0x56>
 23fcd4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 23fcd52:	4a16      	ldr	r2, [pc, #88]	; (23fcdac <rint+0x134>)
 23fcd54:	4318      	orrs	r0, r3
 23fcd56:	4022      	ands	r2, r4
 23fcd58:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 23fcd5c:	4243      	negs	r3, r0
 23fcd5e:	4303      	orrs	r3, r0
 23fcd60:	0b1b      	lsrs	r3, r3, #12
 23fcd62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 23fcd66:	ea43 0702 	orr.w	r7, r3, r2
 23fcd6a:	4b0f      	ldr	r3, [pc, #60]	; (23fcda8 <rint+0x130>)
 23fcd6c:	ee10 2a10 	vmov	r2, s0
 23fcd70:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
 23fcd74:	463b      	mov	r3, r7
 23fcd76:	e9de 6700 	ldrd	r6, r7, [lr]
 23fcd7a:	4630      	mov	r0, r6
 23fcd7c:	4639      	mov	r1, r7
 23fcd7e:	f7e8 f945 	bl	23e500c <__adddf3>
 23fcd82:	4632      	mov	r2, r6
 23fcd84:	463b      	mov	r3, r7
 23fcd86:	e9cd 0100 	strd	r0, r1, [sp]
 23fcd8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 23fcd8e:	f7e8 f93b 	bl	23e5008 <__aeabi_dsub>
 23fcd92:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fcd96:	4602      	mov	r2, r0
 23fcd98:	ea41 0304 	orr.w	r3, r1, r4
 23fcd9c:	ec43 2b10 	vmov	d0, r2, r3
 23fcda0:	b003      	add	sp, #12
 23fcda2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fcda4:	000fffff 	.word	0x000fffff
 23fcda8:	023ffe38 	.word	0x023ffe38
 23fcdac:	fffe0000 	.word	0xfffe0000

023fcdb0 <atexit>:
 23fcdb0:	2300      	movs	r3, #0
 23fcdb2:	4601      	mov	r1, r0
 23fcdb4:	461a      	mov	r2, r3
 23fcdb6:	4618      	mov	r0, r3
 23fcdb8:	f7e9 b962 	b.w	23e6080 <__register_exitproc>

023fcdbc <atoi>:
 23fcdbc:	220a      	movs	r2, #10
 23fcdbe:	2100      	movs	r1, #0
 23fcdc0:	f000 b994 	b.w	23fd0ec <strtol>

023fcdc4 <isprint>:
 23fcdc4:	4b02      	ldr	r3, [pc, #8]	; (23fcdd0 <isprint+0xc>)
 23fcdc6:	4418      	add	r0, r3
 23fcdc8:	7840      	ldrb	r0, [r0, #1]
 23fcdca:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23fcdce:	4770      	bx	lr
 23fcdd0:	023ffeb8 	.word	0x023ffeb8

023fcdd4 <memcmp>:
 23fcdd4:	3901      	subs	r1, #1
 23fcdd6:	4402      	add	r2, r0
 23fcdd8:	b510      	push	{r4, lr}
 23fcdda:	4290      	cmp	r0, r2
 23fcddc:	d101      	bne.n	23fcde2 <memcmp+0xe>
 23fcdde:	2000      	movs	r0, #0
 23fcde0:	e005      	b.n	23fcdee <memcmp+0x1a>
 23fcde2:	7803      	ldrb	r3, [r0, #0]
 23fcde4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 23fcde8:	42a3      	cmp	r3, r4
 23fcdea:	d001      	beq.n	23fcdf0 <memcmp+0x1c>
 23fcdec:	1b18      	subs	r0, r3, r4
 23fcdee:	bd10      	pop	{r4, pc}
 23fcdf0:	3001      	adds	r0, #1
 23fcdf2:	e7f2      	b.n	23fcdda <memcmp+0x6>

023fcdf4 <memcpy>:
 23fcdf4:	440a      	add	r2, r1
 23fcdf6:	1e43      	subs	r3, r0, #1
 23fcdf8:	4291      	cmp	r1, r2
 23fcdfa:	d100      	bne.n	23fcdfe <memcpy+0xa>
 23fcdfc:	4770      	bx	lr
 23fcdfe:	b510      	push	{r4, lr}
 23fce00:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fce04:	4291      	cmp	r1, r2
 23fce06:	f803 4f01 	strb.w	r4, [r3, #1]!
 23fce0a:	d1f9      	bne.n	23fce00 <memcpy+0xc>
 23fce0c:	bd10      	pop	{r4, pc}

023fce0e <memset>:
 23fce0e:	4402      	add	r2, r0
 23fce10:	4603      	mov	r3, r0
 23fce12:	4293      	cmp	r3, r2
 23fce14:	d100      	bne.n	23fce18 <memset+0xa>
 23fce16:	4770      	bx	lr
 23fce18:	f803 1b01 	strb.w	r1, [r3], #1
 23fce1c:	e7f9      	b.n	23fce12 <memset+0x4>
	...

023fce20 <srand>:
 23fce20:	b538      	push	{r3, r4, r5, lr}
 23fce22:	4b10      	ldr	r3, [pc, #64]	; (23fce64 <srand+0x44>)
 23fce24:	4604      	mov	r4, r0
 23fce26:	681d      	ldr	r5, [r3, #0]
 23fce28:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fce2a:	b9b3      	cbnz	r3, 23fce5a <srand+0x3a>
 23fce2c:	2018      	movs	r0, #24
 23fce2e:	f7fb f985 	bl	23f813c <malloc>
 23fce32:	4602      	mov	r2, r0
 23fce34:	63a8      	str	r0, [r5, #56]	; 0x38
 23fce36:	b920      	cbnz	r0, 23fce42 <srand+0x22>
 23fce38:	4b0b      	ldr	r3, [pc, #44]	; (23fce68 <srand+0x48>)
 23fce3a:	2142      	movs	r1, #66	; 0x42
 23fce3c:	480b      	ldr	r0, [pc, #44]	; (23fce6c <srand+0x4c>)
 23fce3e:	f7fb f9fb 	bl	23f8238 <__assert_func>
 23fce42:	490b      	ldr	r1, [pc, #44]	; (23fce70 <srand+0x50>)
 23fce44:	4b0b      	ldr	r3, [pc, #44]	; (23fce74 <srand+0x54>)
 23fce46:	e9c0 1300 	strd	r1, r3, [r0]
 23fce4a:	4b0b      	ldr	r3, [pc, #44]	; (23fce78 <srand+0x58>)
 23fce4c:	2100      	movs	r1, #0
 23fce4e:	6083      	str	r3, [r0, #8]
 23fce50:	230b      	movs	r3, #11
 23fce52:	8183      	strh	r3, [r0, #12]
 23fce54:	2001      	movs	r0, #1
 23fce56:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23fce5a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fce5c:	2200      	movs	r2, #0
 23fce5e:	611c      	str	r4, [r3, #16]
 23fce60:	615a      	str	r2, [r3, #20]
 23fce62:	bd38      	pop	{r3, r4, r5, pc}
 23fce64:	1006a220 	.word	0x1006a220
 23fce68:	023ffe48 	.word	0x023ffe48
 23fce6c:	023ffe5f 	.word	0x023ffe5f
 23fce70:	abcd330e 	.word	0xabcd330e
 23fce74:	e66d1234 	.word	0xe66d1234
 23fce78:	0005deec 	.word	0x0005deec

023fce7c <rand>:
 23fce7c:	4b16      	ldr	r3, [pc, #88]	; (23fced8 <rand+0x5c>)
 23fce7e:	b510      	push	{r4, lr}
 23fce80:	681c      	ldr	r4, [r3, #0]
 23fce82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23fce84:	b9b3      	cbnz	r3, 23fceb4 <rand+0x38>
 23fce86:	2018      	movs	r0, #24
 23fce88:	f7fb f958 	bl	23f813c <malloc>
 23fce8c:	63a0      	str	r0, [r4, #56]	; 0x38
 23fce8e:	b928      	cbnz	r0, 23fce9c <rand+0x20>
 23fce90:	4602      	mov	r2, r0
 23fce92:	4b12      	ldr	r3, [pc, #72]	; (23fcedc <rand+0x60>)
 23fce94:	214e      	movs	r1, #78	; 0x4e
 23fce96:	4812      	ldr	r0, [pc, #72]	; (23fcee0 <rand+0x64>)
 23fce98:	f7fb f9ce 	bl	23f8238 <__assert_func>
 23fce9c:	4a11      	ldr	r2, [pc, #68]	; (23fcee4 <rand+0x68>)
 23fce9e:	4b12      	ldr	r3, [pc, #72]	; (23fcee8 <rand+0x6c>)
 23fcea0:	e9c0 2300 	strd	r2, r3, [r0]
 23fcea4:	4b11      	ldr	r3, [pc, #68]	; (23fceec <rand+0x70>)
 23fcea6:	2201      	movs	r2, #1
 23fcea8:	6083      	str	r3, [r0, #8]
 23fceaa:	230b      	movs	r3, #11
 23fceac:	8183      	strh	r3, [r0, #12]
 23fceae:	2300      	movs	r3, #0
 23fceb0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 23fceb4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 23fceb6:	4a0e      	ldr	r2, [pc, #56]	; (23fcef0 <rand+0x74>)
 23fceb8:	6920      	ldr	r0, [r4, #16]
 23fceba:	6963      	ldr	r3, [r4, #20]
 23fcebc:	490d      	ldr	r1, [pc, #52]	; (23fcef4 <rand+0x78>)
 23fcebe:	4342      	muls	r2, r0
 23fcec0:	fb01 2203 	mla	r2, r1, r3, r2
 23fcec4:	fba0 0101 	umull	r0, r1, r0, r1
 23fcec8:	1c43      	adds	r3, r0, #1
 23fceca:	eb42 0001 	adc.w	r0, r2, r1
 23fcece:	e9c4 3004 	strd	r3, r0, [r4, #16]
 23fced2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 23fced6:	bd10      	pop	{r4, pc}
 23fced8:	1006a220 	.word	0x1006a220
 23fcedc:	023ffe48 	.word	0x023ffe48
 23fcee0:	023ffe5f 	.word	0x023ffe5f
 23fcee4:	abcd330e 	.word	0xabcd330e
 23fcee8:	e66d1234 	.word	0xe66d1234
 23fceec:	0005deec 	.word	0x0005deec
 23fcef0:	5851f42d 	.word	0x5851f42d
 23fcef4:	4c957f2d 	.word	0x4c957f2d

023fcef8 <strcpy>:
 23fcef8:	4603      	mov	r3, r0
 23fcefa:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fcefe:	f803 2b01 	strb.w	r2, [r3], #1
 23fcf02:	2a00      	cmp	r2, #0
 23fcf04:	d1f9      	bne.n	23fcefa <strcpy+0x2>
 23fcf06:	4770      	bx	lr

023fcf08 <strdup>:
 23fcf08:	4b02      	ldr	r3, [pc, #8]	; (23fcf14 <strdup+0xc>)
 23fcf0a:	4601      	mov	r1, r0
 23fcf0c:	6818      	ldr	r0, [r3, #0]
 23fcf0e:	f000 b803 	b.w	23fcf18 <_strdup_r>
 23fcf12:	bf00      	nop
 23fcf14:	1006a220 	.word	0x1006a220

023fcf18 <_strdup_r>:
 23fcf18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcf1a:	4604      	mov	r4, r0
 23fcf1c:	4608      	mov	r0, r1
 23fcf1e:	460d      	mov	r5, r1
 23fcf20:	f7e9 f86a 	bl	23e5ff8 <strlen>
 23fcf24:	1c42      	adds	r2, r0, #1
 23fcf26:	4620      	mov	r0, r4
 23fcf28:	4611      	mov	r1, r2
 23fcf2a:	9201      	str	r2, [sp, #4]
 23fcf2c:	f7fb f968 	bl	23f8200 <_malloc_r>
 23fcf30:	4604      	mov	r4, r0
 23fcf32:	b118      	cbz	r0, 23fcf3c <_strdup_r+0x24>
 23fcf34:	9a01      	ldr	r2, [sp, #4]
 23fcf36:	4629      	mov	r1, r5
 23fcf38:	f7ff ff5c 	bl	23fcdf4 <memcpy>
 23fcf3c:	4620      	mov	r0, r4
 23fcf3e:	b003      	add	sp, #12
 23fcf40:	bd30      	pop	{r4, r5, pc}

023fcf42 <strncmp>:
 23fcf42:	b510      	push	{r4, lr}
 23fcf44:	b17a      	cbz	r2, 23fcf66 <strncmp+0x24>
 23fcf46:	4603      	mov	r3, r0
 23fcf48:	3901      	subs	r1, #1
 23fcf4a:	1884      	adds	r4, r0, r2
 23fcf4c:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fcf50:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23fcf54:	4290      	cmp	r0, r2
 23fcf56:	d101      	bne.n	23fcf5c <strncmp+0x1a>
 23fcf58:	42a3      	cmp	r3, r4
 23fcf5a:	d101      	bne.n	23fcf60 <strncmp+0x1e>
 23fcf5c:	1a80      	subs	r0, r0, r2
 23fcf5e:	bd10      	pop	{r4, pc}
 23fcf60:	2800      	cmp	r0, #0
 23fcf62:	d1f3      	bne.n	23fcf4c <strncmp+0xa>
 23fcf64:	e7fa      	b.n	23fcf5c <strncmp+0x1a>
 23fcf66:	4610      	mov	r0, r2
 23fcf68:	e7f9      	b.n	23fcf5e <strncmp+0x1c>

023fcf6a <strncpy>:
 23fcf6a:	3901      	subs	r1, #1
 23fcf6c:	4603      	mov	r3, r0
 23fcf6e:	b510      	push	{r4, lr}
 23fcf70:	b132      	cbz	r2, 23fcf80 <strncpy+0x16>
 23fcf72:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 23fcf76:	3a01      	subs	r2, #1
 23fcf78:	f803 4b01 	strb.w	r4, [r3], #1
 23fcf7c:	2c00      	cmp	r4, #0
 23fcf7e:	d1f7      	bne.n	23fcf70 <strncpy+0x6>
 23fcf80:	441a      	add	r2, r3
 23fcf82:	2100      	movs	r1, #0
 23fcf84:	4293      	cmp	r3, r2
 23fcf86:	d100      	bne.n	23fcf8a <strncpy+0x20>
 23fcf88:	bd10      	pop	{r4, pc}
 23fcf8a:	f803 1b01 	strb.w	r1, [r3], #1
 23fcf8e:	e7f9      	b.n	23fcf84 <strncpy+0x1a>

023fcf90 <__strtok_r>:
 23fcf90:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fcf92:	b908      	cbnz	r0, 23fcf98 <__strtok_r+0x8>
 23fcf94:	6810      	ldr	r0, [r2, #0]
 23fcf96:	b188      	cbz	r0, 23fcfbc <__strtok_r+0x2c>
 23fcf98:	4604      	mov	r4, r0
 23fcf9a:	4620      	mov	r0, r4
 23fcf9c:	460f      	mov	r7, r1
 23fcf9e:	f814 5b01 	ldrb.w	r5, [r4], #1
 23fcfa2:	f817 6b01 	ldrb.w	r6, [r7], #1
 23fcfa6:	b91e      	cbnz	r6, 23fcfb0 <__strtok_r+0x20>
 23fcfa8:	b965      	cbnz	r5, 23fcfc4 <__strtok_r+0x34>
 23fcfaa:	4628      	mov	r0, r5
 23fcfac:	6015      	str	r5, [r2, #0]
 23fcfae:	e005      	b.n	23fcfbc <__strtok_r+0x2c>
 23fcfb0:	42b5      	cmp	r5, r6
 23fcfb2:	d1f6      	bne.n	23fcfa2 <__strtok_r+0x12>
 23fcfb4:	2b00      	cmp	r3, #0
 23fcfb6:	d1f0      	bne.n	23fcf9a <__strtok_r+0xa>
 23fcfb8:	6014      	str	r4, [r2, #0]
 23fcfba:	7003      	strb	r3, [r0, #0]
 23fcfbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fcfbe:	461c      	mov	r4, r3
 23fcfc0:	e00c      	b.n	23fcfdc <__strtok_r+0x4c>
 23fcfc2:	b915      	cbnz	r5, 23fcfca <__strtok_r+0x3a>
 23fcfc4:	f814 3b01 	ldrb.w	r3, [r4], #1
 23fcfc8:	460e      	mov	r6, r1
 23fcfca:	f816 5b01 	ldrb.w	r5, [r6], #1
 23fcfce:	42ab      	cmp	r3, r5
 23fcfd0:	d1f7      	bne.n	23fcfc2 <__strtok_r+0x32>
 23fcfd2:	2b00      	cmp	r3, #0
 23fcfd4:	d0f3      	beq.n	23fcfbe <__strtok_r+0x2e>
 23fcfd6:	2300      	movs	r3, #0
 23fcfd8:	f804 3c01 	strb.w	r3, [r4, #-1]
 23fcfdc:	6014      	str	r4, [r2, #0]
 23fcfde:	e7ed      	b.n	23fcfbc <__strtok_r+0x2c>

023fcfe0 <strtok_r>:
 23fcfe0:	2301      	movs	r3, #1
 23fcfe2:	f7ff bfd5 	b.w	23fcf90 <__strtok_r>
	...

023fcfe8 <_strtol_l.constprop.0>:
 23fcfe8:	2b01      	cmp	r3, #1
 23fcfea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fcfee:	d001      	beq.n	23fcff4 <_strtol_l.constprop.0+0xc>
 23fcff0:	2b24      	cmp	r3, #36	; 0x24
 23fcff2:	d906      	bls.n	23fd002 <_strtol_l.constprop.0+0x1a>
 23fcff4:	f7fb f912 	bl	23f821c <__errno>
 23fcff8:	2316      	movs	r3, #22
 23fcffa:	6003      	str	r3, [r0, #0]
 23fcffc:	2000      	movs	r0, #0
 23fcffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fd002:	460d      	mov	r5, r1
 23fd004:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23fd0e8 <_strtol_l.constprop.0+0x100>
 23fd008:	462e      	mov	r6, r5
 23fd00a:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fd00e:	f814 700c 	ldrb.w	r7, [r4, ip]
 23fd012:	f017 0708 	ands.w	r7, r7, #8
 23fd016:	d1f7      	bne.n	23fd008 <_strtol_l.constprop.0+0x20>
 23fd018:	2c2d      	cmp	r4, #45	; 0x2d
 23fd01a:	d132      	bne.n	23fd082 <_strtol_l.constprop.0+0x9a>
 23fd01c:	782c      	ldrb	r4, [r5, #0]
 23fd01e:	2701      	movs	r7, #1
 23fd020:	1cb5      	adds	r5, r6, #2
 23fd022:	2b00      	cmp	r3, #0
 23fd024:	d05b      	beq.n	23fd0de <_strtol_l.constprop.0+0xf6>
 23fd026:	2b10      	cmp	r3, #16
 23fd028:	d109      	bne.n	23fd03e <_strtol_l.constprop.0+0x56>
 23fd02a:	2c30      	cmp	r4, #48	; 0x30
 23fd02c:	d107      	bne.n	23fd03e <_strtol_l.constprop.0+0x56>
 23fd02e:	782c      	ldrb	r4, [r5, #0]
 23fd030:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23fd034:	2c58      	cmp	r4, #88	; 0x58
 23fd036:	d14d      	bne.n	23fd0d4 <_strtol_l.constprop.0+0xec>
 23fd038:	786c      	ldrb	r4, [r5, #1]
 23fd03a:	2310      	movs	r3, #16
 23fd03c:	3502      	adds	r5, #2
 23fd03e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23fd042:	f04f 0c00 	mov.w	ip, #0
 23fd046:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23fd04a:	4666      	mov	r6, ip
 23fd04c:	fbb8 f9f3 	udiv	r9, r8, r3
 23fd050:	fb03 8a19 	mls	sl, r3, r9, r8
 23fd054:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23fd058:	f1be 0f09 	cmp.w	lr, #9
 23fd05c:	d816      	bhi.n	23fd08c <_strtol_l.constprop.0+0xa4>
 23fd05e:	4674      	mov	r4, lr
 23fd060:	42a3      	cmp	r3, r4
 23fd062:	dd24      	ble.n	23fd0ae <_strtol_l.constprop.0+0xc6>
 23fd064:	f1bc 0f00 	cmp.w	ip, #0
 23fd068:	db1e      	blt.n	23fd0a8 <_strtol_l.constprop.0+0xc0>
 23fd06a:	45b1      	cmp	r9, r6
 23fd06c:	d31c      	bcc.n	23fd0a8 <_strtol_l.constprop.0+0xc0>
 23fd06e:	d101      	bne.n	23fd074 <_strtol_l.constprop.0+0x8c>
 23fd070:	45a2      	cmp	sl, r4
 23fd072:	db19      	blt.n	23fd0a8 <_strtol_l.constprop.0+0xc0>
 23fd074:	fb06 4603 	mla	r6, r6, r3, r4
 23fd078:	f04f 0c01 	mov.w	ip, #1
 23fd07c:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fd080:	e7e8      	b.n	23fd054 <_strtol_l.constprop.0+0x6c>
 23fd082:	2c2b      	cmp	r4, #43	; 0x2b
 23fd084:	bf04      	itt	eq
 23fd086:	782c      	ldrbeq	r4, [r5, #0]
 23fd088:	1cb5      	addeq	r5, r6, #2
 23fd08a:	e7ca      	b.n	23fd022 <_strtol_l.constprop.0+0x3a>
 23fd08c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23fd090:	f1be 0f19 	cmp.w	lr, #25
 23fd094:	d801      	bhi.n	23fd09a <_strtol_l.constprop.0+0xb2>
 23fd096:	3c37      	subs	r4, #55	; 0x37
 23fd098:	e7e2      	b.n	23fd060 <_strtol_l.constprop.0+0x78>
 23fd09a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23fd09e:	f1be 0f19 	cmp.w	lr, #25
 23fd0a2:	d804      	bhi.n	23fd0ae <_strtol_l.constprop.0+0xc6>
 23fd0a4:	3c57      	subs	r4, #87	; 0x57
 23fd0a6:	e7db      	b.n	23fd060 <_strtol_l.constprop.0+0x78>
 23fd0a8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fd0ac:	e7e6      	b.n	23fd07c <_strtol_l.constprop.0+0x94>
 23fd0ae:	f1bc 0f00 	cmp.w	ip, #0
 23fd0b2:	da05      	bge.n	23fd0c0 <_strtol_l.constprop.0+0xd8>
 23fd0b4:	2322      	movs	r3, #34	; 0x22
 23fd0b6:	4646      	mov	r6, r8
 23fd0b8:	6003      	str	r3, [r0, #0]
 23fd0ba:	b942      	cbnz	r2, 23fd0ce <_strtol_l.constprop.0+0xe6>
 23fd0bc:	4630      	mov	r0, r6
 23fd0be:	e79e      	b.n	23fcffe <_strtol_l.constprop.0+0x16>
 23fd0c0:	b107      	cbz	r7, 23fd0c4 <_strtol_l.constprop.0+0xdc>
 23fd0c2:	4276      	negs	r6, r6
 23fd0c4:	2a00      	cmp	r2, #0
 23fd0c6:	d0f9      	beq.n	23fd0bc <_strtol_l.constprop.0+0xd4>
 23fd0c8:	f1bc 0f00 	cmp.w	ip, #0
 23fd0cc:	d000      	beq.n	23fd0d0 <_strtol_l.constprop.0+0xe8>
 23fd0ce:	1e69      	subs	r1, r5, #1
 23fd0d0:	6011      	str	r1, [r2, #0]
 23fd0d2:	e7f3      	b.n	23fd0bc <_strtol_l.constprop.0+0xd4>
 23fd0d4:	2430      	movs	r4, #48	; 0x30
 23fd0d6:	2b00      	cmp	r3, #0
 23fd0d8:	d1b1      	bne.n	23fd03e <_strtol_l.constprop.0+0x56>
 23fd0da:	2308      	movs	r3, #8
 23fd0dc:	e7af      	b.n	23fd03e <_strtol_l.constprop.0+0x56>
 23fd0de:	2c30      	cmp	r4, #48	; 0x30
 23fd0e0:	d0a5      	beq.n	23fd02e <_strtol_l.constprop.0+0x46>
 23fd0e2:	230a      	movs	r3, #10
 23fd0e4:	e7ab      	b.n	23fd03e <_strtol_l.constprop.0+0x56>
 23fd0e6:	bf00      	nop
 23fd0e8:	023ffeb9 	.word	0x023ffeb9

023fd0ec <strtol>:
 23fd0ec:	4613      	mov	r3, r2
 23fd0ee:	460a      	mov	r2, r1
 23fd0f0:	4601      	mov	r1, r0
 23fd0f2:	4802      	ldr	r0, [pc, #8]	; (23fd0fc <strtol+0x10>)
 23fd0f4:	6800      	ldr	r0, [r0, #0]
 23fd0f6:	f7ff bf77 	b.w	23fcfe8 <_strtol_l.constprop.0>
 23fd0fa:	bf00      	nop
 23fd0fc:	1006a220 	.word	0x1006a220

023fd100 <link_const_data_start>:
 23fd100:	00001388 	.word	0x00001388
 23fd104:	00002710 	.word	0x00002710
 23fd108:	00004e20 	.word	0x00004e20
 23fd10c:	00009c40 	.word	0x00009c40
 23fd110:	00013880 	.word	0x00013880
 23fd114:	00027100 	.word	0x00027100
 23fd118:	0004e200 	.word	0x0004e200
 23fd11c:	0009c400 	.word	0x0009c400
 23fd120:	00138800 	.word	0x00138800
 23fd124:	00271000 	.word	0x00271000
 23fd128:	004e2000 	.word	0x004e2000
 23fd12c:	009c4000 	.word	0x009c4000
 23fd130:	01388000 	.word	0x01388000
 23fd134:	02710000 	.word	0x02710000
 23fd138:	04e20000 	.word	0x04e20000
 23fd13c:	09c40000 	.word	0x09c40000
 23fd140:	13880000 	.word	0x13880000
 23fd144:	27100000 	.word	0x27100000
 23fd148:	00000000 	.word	0x00000000
 23fd14c:	00000013 	.word	0x00000013
 23fd150:	023fd281 	.word	0x023fd281
 23fd154:	00000012 	.word	0x00000012
 23fd158:	023fd284 	.word	0x023fd284
 23fd15c:	00000011 	.word	0x00000011
 23fd160:	023fd287 	.word	0x023fd287
 23fd164:	00000010 	.word	0x00000010
 23fd168:	023fd28a 	.word	0x023fd28a
 23fd16c:	0000000f 	.word	0x0000000f
 23fd170:	023fd28d 	.word	0x023fd28d
 23fd174:	0000000e 	.word	0x0000000e
 23fd178:	023fd290 	.word	0x023fd290
 23fd17c:	00000000 	.word	0x00000000
 23fd180:	023fd293 	.word	0x023fd293
 23fd184:	00000001 	.word	0x00000001
 23fd188:	023fd296 	.word	0x023fd296
 23fd18c:	00000002 	.word	0x00000002
 23fd190:	023fd299 	.word	0x023fd299
 23fd194:	00000003 	.word	0x00000003
 23fd198:	023fd29c 	.word	0x023fd29c
 23fd19c:	00000004 	.word	0x00000004
 23fd1a0:	023fd29f 	.word	0x023fd29f
 23fd1a4:	00000005 	.word	0x00000005
 23fd1a8:	023fd2a2 	.word	0x023fd2a2
 23fd1ac:	00000006 	.word	0x00000006
 23fd1b0:	023fd2a5 	.word	0x023fd2a5
 23fd1b4:	00000007 	.word	0x00000007
 23fd1b8:	023fd2a8 	.word	0x023fd2a8
 23fd1bc:	00000008 	.word	0x00000008
 23fd1c0:	023fd2ab 	.word	0x023fd2ab
 23fd1c4:	00000009 	.word	0x00000009
 23fd1c8:	023fd2ae 	.word	0x023fd2ae
 23fd1cc:	0000000a 	.word	0x0000000a
 23fd1d0:	023fd2b1 	.word	0x023fd2b1
 23fd1d4:	0000000b 	.word	0x0000000b
 23fd1d8:	023fd2b5 	.word	0x023fd2b5
 23fd1dc:	0000000c 	.word	0x0000000c
 23fd1e0:	023fd2b9 	.word	0x023fd2b9
 23fd1e4:	0000000d 	.word	0x0000000d
 23fd1e8:	023fd2bd 	.word	0x023fd2bd
 23fd1ec:	0000000e 	.word	0x0000000e
 23fd1f0:	023fd2c1 	.word	0x023fd2c1
 23fd1f4:	0000000f 	.word	0x0000000f
 23fd1f8:	023fd2c5 	.word	0x023fd2c5
 23fd1fc:	00000009 	.word	0x00000009
 23fd200:	023fd2c9 	.word	0x023fd2c9
 23fd204:	0000000a 	.word	0x0000000a
 23fd208:	023fd2cc 	.word	0x023fd2cc
 23fd20c:	00000000 	.word	0x00000000
 23fd210:	023fd2cf 	.word	0x023fd2cf
 23fd214:	00000001 	.word	0x00000001
 23fd218:	023fd2d3 	.word	0x023fd2d3
 23fd21c:	0000000c 	.word	0x0000000c
 23fd220:	023fd2d7 	.word	0x023fd2d7
 23fd224:	0000000b 	.word	0x0000000b
 23fd228:	023fd2dc 	.word	0x023fd2dc
 23fd22c:	0000000d 	.word	0x0000000d
 23fd230:	023fd2e1 	.word	0x023fd2e1
 23fd234:	00000008 	.word	0x00000008
 23fd238:	023fd2e5 	.word	0x023fd2e5
 23fd23c:	04030201 	.word	0x04030201
 23fd240:	08070605 	.word	0x08070605
 23fd244:	0c0b0a09 	.word	0x0c0b0a09
 23fd248:	100f0e0d 	.word	0x100f0e0d
 23fd24c:	00000000 	.word	0x00000000
 23fd250:	01000000 	.word	0x01000000
 23fd254:	0100080c 	.word	0x0100080c
 23fd258:	00000302 	.word	0x00000302

023fd25c <dynalib_user>:
 23fd25c:	023e6009 023e6031 023e6035 00000000     .`>.1`>.5`>.....
 23fd26c:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23fd27c:	6c617574 00304100 41003141 33410032     tual.A0.A1.A2.A3
 23fd28c:	00344100 44003541 31440030 00324400     .A4.A5.D0.D1.D2.
 23fd29c:	44003344 35440034 00364400 44003744     D3.D4.D5.D6.D7.D
 23fd2ac:	39440038 30314400 31314400 32314400     8.D9.D10.D11.D12
 23fd2bc:	33314400 34314400 35314400 00585400     .D13.D14.D15.TX.
 23fd2cc:	53005852 53004144 4d004c43 0049534f     RX.SDA.SCL.MOSI.
 23fd2dc:	4f53494d 4b435300 00535300 4e4b4e55     MISO.SCK.SS.UNKN
 23fd2ec:	454d4200 00303832 33504d42 0d003039     .BME280.BMP390..
 23fd2fc:	5e5b250a 0a0d5d0d 66656400 746c7561     .%[^.]...default
 23fd30c:	534d0020 534c0042 533c0042 65534950      .MSB.LSB.<SPISe
 23fd31c:	6e697474 64207367 75616665 003e746c     ttings default>.
 23fd32c:	4950533c 74746553 73676e69 25732520     <SPISettings %s%
 23fd33c:	73252075 444f4d20 3e752545 2f007c00     u %s MODE%u>.|./
 23fd34c:	5c002d00 454c4f00 3a323344 4f004b4f     .-.\.OLED32:OK.O
 23fd35c:	3644454c 4b4f3a34 2d642500 64323025     LED64:OK.%d-%02d
 23fd36c:	3230252d 30255464 253a6432 3a643230     -%02dT%02d:%02d:
 23fd37c:	64323025 52524500 4354523a 544f4e20     %02d.ERR:RTC NOT
 23fd38c:	554f4620 4500444e 523a5252 492d4354      FOUND.ERR:RTC-I
 23fd39c:	4e204332 4f46544f 00444e55 002a7325     2C NOTFOUND.%s*.
 23fd3ac:	3a435452 494c4156 454e0044 47204445     RTC:VALID.NEED G
 23fd3bc:	54204d53 2d454d49 4354523e 43545200     SM TIME->RTC.RTC
 23fd3cc:	6553203a 54520074 31203a43 53205453     : Set.RTC: 1ST S
 23fd3dc:	00434e59 3a435452 52483220 4e595320     YNC.RTC: 2HR SYN
 23fd3ec:	45410043 4b502053 21205945 00544553     C.AES PKEY !SET.
 23fd3fc:	20534541 59454b50 36312120 74794220     AES PKEY !16 Byt
 23fd40c:	41007365 4d205345 20564959 54455321     es.AES MYIV !SET
 23fd41c:	524f4c00 57502041 52452052 4f4c0052     .LORA PWR ERR.LO
 23fd42c:	46204152 20514552 00525245 41524f4c     RA FREQ ERR.LORA
 23fd43c:	44444120 52452052 45410052 454b5f53      ADDR ERR.AES_KE
 23fd44c:	73255b59 4541005d 594d5f53 255b5649     Y[%s].AES_MYIV[%
 23fd45c:	4c005d75 2041524f 20564643 67004b4f     u].LORA CFV OK.g
 23fd46c:	425f7465 6863736f 6968435f 28444970     et_Bosch_ChipID(
 23fd47c:	20200029 3a433249 58323025 67655220     ).  I2C:%02X Reg
 23fd48c:	3230253a 20200058 5f525245 253a5445     :%02X.  ERR_ET:%
 23fd49c:	20200064 50494843 253a4449 20583230     d.  CHIPID:%02X 
 23fd4ac:	32504d42 20003038 49484320 3a444950     BMP280.  CHIPID:
 23fd4bc:	58323025 504d4220 00383833 48432020     %02X BMP388.  CH
 23fd4cc:	44495049 3230253a 4d422058 39332f45     IPID:%02X BME/39
 23fd4dc:	20200030 50494843 253a4449 20583230     0.  CHIPID:%02X 
 23fd4ec:	61566e49 0064696c 52452020 46525f52     InValid.  ERR_RF
 23fd4fc:	4200303a 493a584d 0054494e 31504d42     :0.BMX:INIT.BMP1
 23fd50c:	52524520 504d4200 4b4f2031 584d4200      ERR.BMP1 OK.BMX
 23fd51c:	52452031 4d420052 30393350 4f20315f     1 ERR.BMP390_1 O
 23fd52c:	4d42004b 30383245 4f20315f 4d42004b     K.BME280_1 OK.BM
 23fd53c:	45203133 42005252 2031334d 42004b4f     31 ERR.BM31 OK.B
 23fd54c:	315f584d 00464e20 32504d42 52524520     MX_1 NF.BMP2 ERR
 23fd55c:	504d4200 4b4f2032 584d4200 52452032     .BMP2 OK.BMX2 ER
 23fd56c:	4d420052 30393350 4f20325f 4d42004b     R.BMP390_2 OK.BM
 23fd57c:	30383245 4f20325f 4d42004b 45203233     E280_2 OK.BM32 E
 23fd58c:	42005252 2032334d 42004b4f 325f584d     RR.BM32 OK.BMX_2
 23fd59c:	00464e20 32555448 493a4431 0054494e      NF.HTU21D:INIT.
 23fd5ac:	20555448 4800464e 4f205554 434d004b     HTU NF.HTU OK.MC
 23fd5bc:	30383950 4e493a38 4d005449 20315043     P9808:INIT.MCP1 
 23fd5cc:	4d00464e 20315043 4d004b4f 20325043     NF.MCP1 OK.MCP2 
 23fd5dc:	4d00464e 20325043 4d004b4f 20335043     NF.MCP2 OK.MCP3 
 23fd5ec:	4d00464e 20335043 4d004b4f 20345043     NF.MCP3 OK.MCP4 
 23fd5fc:	4d00464e 20345043 53004b4f 493a5448     NF.MCP4 OK.SHT:I
 23fd60c:	0054494e 31544853 00464e20 31544853     NIT.SHT1 NF.SHT1
 23fd61c:	004b4f20 32544853 00464e20 32544853      OK.SHT2 NF.SHT2
 23fd62c:	004b4f20 38484948 494e493a 49480054      OK.HIH8:INIT.HI
 23fd63c:	4f203848 4948004b 4e203848 42570046     H8 OK.HIH8 NF.WB
 23fd64c:	4e493a54 57005449 4f3a5442 4257004b     T:INIT.WBT:OK.WB
 23fd65c:	464e3a54 3a494800 54494e49 3a494800     T:NF.HI:INIT.HI:
 23fd66c:	48004b4f 464e3a49 47425700 4e493a54     OK.HI:NF.WBGT:IN
 23fd67c:	57005449 3a544742 77204b4f 6f6c472f     IT.WBGT:OK w/Glo
 23fd68c:	57006562 3a544742 77204b4f 6c472f6f     be.WBGT:OK wo/Gl
 23fd69c:	0065626f 54474257 00464e3a 31314953     obe.WBGT:NF.SI11
 23fd6ac:	493a3534 0054494e 4f3a4953 4953004b     45:INIT.SI:OK.SI
 23fd6bc:	5b49563a 252e6425 5d643230 3a495300     :VI[%d.%02d].SI:
 23fd6cc:	255b5249 30252e64 005d6432 553a4953     IR[%d.%02d].SI:U
 23fd6dc:	64255b56 3230252e 56005d64 493a584c     V[%d.%02d].VLX:I
 23fd6ec:	0054494e 20584c56 56004b4f 4e20584c     NIT.VLX OK.VLX N
 23fd6fc:	4c420046 4e493a58 42005449 4f3a584c     F.BLX:INIT.BLX:O
 23fd70c:	4c42004b 464e3a58 324d5000 49514135     K.BLX:NF.PM25AQI
 23fd71c:	494e493a 4d500054 00464e3a 423a4d50     :INIT.PM:NF.PM:B
 23fd72c:	6e696765 00464e20 4f3a4d50 4d50004b     egin NF.PM:OK.PM
 23fd73c:	46464f20 454e494c 43444800 494e493a      OFFLINE.HDC:INI
 23fd74c:	44480054 4e203143 44480046 4f203143     T.HDC1 NF.HDC1 O
 23fd75c:	4448004b 4e203243 44480046 4f203243     K.HDC2 NF.HDC2 O
 23fd76c:	504c004b 4e493a53 4c005449 20315350     K.LPS:INIT.LPS1 
 23fd77c:	4c00464e 20315350 4c004b4f 20325350     NF.LPS1 OK.LPS2 
 23fd78c:	4c00464e 20325350 54004b4f 493a574c     NF.LPS2 OK.TLW:I
 23fd79c:	0054494e 20574c54 5400464e 4f20574c     NIT.TLW NF.TLW O
 23fd7ac:	5354004b 4e493a4d 54005449 4e204d53     K.TSM:INIT.TSM N
 23fd7bc:	53540046 4b4f204d 534d5400 4e493a4d     F.TSM OK.TMSM:IN
 23fd7cc:	54005449 204d534d 5400464e 204d534d     IT.TMSM NF.TMSM 
 23fd7dc:	41004b4f 30363553 4e493a30 57005449     OK.AS5600:INIT.W
 23fd7ec:	464e3a44 3a445700 41004b4f 4e493a34     D:NF.WD:OK.A4:IN
 23fd7fc:	41005449 49443d34 44005453 3d545349     IT.A4=DIST.DIST=
 23fd80c:	44004d35 3d545349 004d3031 523d3441     5M.DIST=10M.A4=R
 23fd81c:	004e4941 523d3441 41005741 554e3d34     AIN.A4=RAW.A4=NU
 23fd82c:	41004c4c 554e3d34 532c4c4c 464e2044     LL.A4=NULL,SD NF
 23fd83c:	3a354100 54494e49 3d354100 00574152     .A5:INIT.A5=RAW.
 23fd84c:	4e3d3541 004c4c55 4e3d3541 2c4c4c55     A5=NULL.A5=NULL,
 23fd85c:	4e204453 44570046 66664f20 656e696c     SD NF.WD Offline
 23fd86c:	57004c5f 664f2044 6e696c66 00485f65     _L.WD Offline_H.
 23fd87c:	4f204457 6e696c6e 4d420065 4f203150     WD Online.BMP1 O
 23fd88c:	4e494c4e 4d420045 4f203145 4e494c4e     NLINE.BME1 ONLIN
 23fd89c:	4d420045 30393350 4f20315f 4e494c4e     E.BMP390_1 ONLIN
 23fd8ac:	4d420045 4f203133 4e494c4e 4d420045     E.BM31 ONLINE.BM
 23fd8bc:	4f203158 494c4646 4200454e 2032504d     X1 OFFLINE.BMP2 
 23fd8cc:	494c4e4f 4200454e 2032454d 494c4e4f     ONLINE.BME2 ONLI
 23fd8dc:	4200454e 2032334d 494c4e4f 4200454e     NE.BM32 ONLINE.B
 23fd8ec:	2032584d 4c46464f 00454e49 20555448     MX2 OFFLINE.HTU 
 23fd8fc:	494c4e4f 4800454e 4f205554 494c4646     ONLINE.HTU OFFLI
 23fd90c:	5300454e 4e4f2049 454e494c 20495300     NE.SI ONLINE.SI 
 23fd91c:	4c46464f 00454e49 4f204457 4e494c4e     OFFLINE.WD ONLIN
 23fd92c:	44570045 46464f20 454e494c 584c5600     E.WD OFFLINE.VLX
 23fd93c:	4c4e4f20 00454e49 20584c56 4c46464f      ONLINE.VLX OFFL
 23fd94c:	00454e49 4f204d50 4e494c4e 45450045     INE.PM ONLINE.EE
 23fd95c:	4d4f5250 454c4320 45205241 524f5252     PROM CLEAR ERROR
 23fd96c:	363e5400 5452202c 2d20363e 004b4f20     .T>6, RT>6 - OK.
 23fd97c:	2c363e54 3c545220 2620363d 52202026     T>6, RT<=6 &&  R
 23fd98c:	59363e54 6f4d202d 54006576 202c363c     T>6Y- Move.T<6, 
 23fd99c:	363c5452 52202620 20363e54 74736559     RT<6 & RT>6 Yest
 23fd9ac:	61647265 202d2079 54004b4f 202c363c     erday - OK.T<6, 
 23fd9bc:	363c5452 20262620 363e5452 2064322d     RT<6 && RT>6-2d 
 23fd9cc:	6f4d202d 54006576 202c363c 363c5452     - Move.T<6, RT<6
 23fd9dc:	20262620 3d3c5452 64322d36 43202d20      && RT<=6-2d - C
 23fd9ec:	7261656c 50454500 204d4f52 54494e49     lear.EEPROM INIT
 23fd9fc:	52524520 4500524f 4f525045 5452204d      ERROR.EEPROM RT
 23fda0c:	44505520 44455441 50454500 204d4f52      UPDATED.EEPROM 
 23fda1c:	41445055 00444554 52504545 44204d4f     UPDATED.EEPROM D
 23fda2c:	00504d55 4e454c20 0064253a 31545220     UMP. LEN:%d. RT1
 23fda3c:	2e64253a 64323025 50522000 64253a31     :%d.%02d. RP1:%d
 23fda4c:	3230252e 52200064 253a3254 30252e64     .%02d. RT2:%d.%0
 23fda5c:	20006432 3a325052 252e6425 00643230     2d. RP2:%d.%02d.
 23fda6c:	54475220 6c253a53 4e200075 50465332      RGTS:%lu. N2SFP
 23fda7c:	756c253a 53432000 756c253a 53432000     :%lu. CS:%lu. CS
 23fda8c:	6c253a43 44530075 00464e3a 4d3a4453     C:%lu.SD:NF.SD:M
 23fda9c:	5249444b 53424f20 004b4f20 4f3a4453     KDIR OBS OK.SD:O
 23fdaac:	6e696c6e 44530065 444b4d3a 4f205249     nline.SD:MKDIR O
 23fdabc:	45205342 53005252 664f3a44 6e696c66     BS ERR.SD:Offlin
 23fdacc:	44530065 53424f3a 52494420 69784520     e.SD:OBS DIR Exi
 23fdadc:	00737473 252f7325 30256434 30256432     sts.%s/%4d%02d%0
 23fdaec:	6c2e6432 5300676f 704f3a44 4c286e65     2d.log.SD:Open(L
 23fdafc:	4529676f 4e005252 3e2d5332 3a4c4544     og)ERR.N2S->DEL:
 23fdb0c:	4e00464e 3e2d5332 3a4c4544 4e004b4f     NF.N2S->DEL:OK.N
 23fdb1c:	3e2d5332 3a4c4544 00525245 3a53324e     2S->DEL:ERR.N2S:
 23fdb2c:	6c6c7546 53324e00 53424f3a 64644120     Full.N2S:OBS Add
 23fdb3c:	4e006465 4f3a5332 206e6570 6f727245     ed.N2S:Open Erro
 23fdb4c:	73250072 0073252c 61526f4c 5b67734d     r.%s,%s.LoRaMsg[
 23fdb5c:	2d5d6425 53324e3e 524f4c00 65522041     %d]->N2S.LORA Re
 23fdb6c:	2079616c 63256325 6b6e5520 002c006e     lay %c%c Unkn.,.
 23fdb7c:	616c6552 73252079 3a444920 43206425     Relay %s ID:%d C
 23fdb8c:	253a544e 4f4c0064 52204152 79616c65     NT:%d.LORA Relay
 23fdb9c:	536f4e20 65636170 524f4c00 65522041      NoSpace.LORA Re
 23fdbac:	2079616c 4c67734d 0074736f 41524f4c     lay MsgLost.LORA
 23fdbbc:	6c655220 25207961 3e2d2073 65755120      Relay %s -> Que
 23fdbcc:	3a646575 43006425 49464e4f 58542e47     ued:%d.CONFIG.TX
 23fdbdc:	44530054 72614320 65203a64 726f7272     T.SD Card: error
 23fdbec:	206e6f20 6e65706f 20676e69 656c6966      on opening file
 23fdbfc:	65610020 6b705f73 43007965 65613a46      .aes_pkey.CF:ae
 23fdc0c:	6b705f73 5b3d7965 005d7325 5f736561     s_pkey=[%s].aes_
 23fdc1c:	7669796d 3a464300 5f736561 7669796d     myiv.CF:aes_myiv
 23fdc2c:	6c255b3d 6c005d75 5f61726f 74696e75     =[%lu].lora_unit
 23fdc3c:	43006469 6f6c3a46 755f6172 6974696e     id.CF:lora_uniti
 23fdc4c:	255b3d64 6c005d64 5f61726f 6f707874     d=[%d].lora_txpo
 23fdc5c:	00726577 6c3a4643 5f61726f 6f707874     wer.CF:lora_txpo
 23fdc6c:	3d726577 5d64255b 726f6c00 72665f61     wer=[%d].lora_fr
 23fdc7c:	43007165 6f6c3a46 665f6172 3d716572     eq.CF:lora_freq=
 23fdc8c:	5d64255b 00746100 00737363 00687468     [%d].at.css.hth.
 23fdc9c:	41796857 6548496d 003f6572 0053462c     WhyAmIHere?.,FS.
 23fdcac:	2d53424f 2064253e 20646441 0053324e     OBS->%d Add N2S.
 23fdcbc:	5b53424f 2d5d6425 0044533e 7325202c     OBS[%d]->SD., %s
 23fdccc:	2d524c00 53324e3e 53424f00 4c4c415b     .LR->N2S.OBS[ALL
 23fdcdc:	4e3e2d5d 44005332 7463416f 3a6e6f69     ]->N2S.DoAction:
 23fdcec:	4f424552 4400544f 7463416f 3a6e6f69     REBOOT.DoAction:
 23fdcfc:	4f464e49 416f4400 6f697463 45533a6e     INFO.DoAction:SE
 23fdd0c:	4400444e 7463416f 3a6e6f69 00545243     ND.DoAction:CRT.
 23fdd1c:	63416f44 6e6f6974 4434413a 00545349     DoAction:A4DIST.
 23fdd2c:	443d3441 2c545349 4c454420 49415220     A4=DIST, DEL RAI
 23fdd3c:	4b4f3a4e 3d344100 54534944 4544202c     N:OK.A4=DIST, DE
 23fdd4c:	4152204c 453a4e49 41005252 49443d34     L RAIN:ERR.A4=DI
 23fdd5c:	202c5453 45524c41 20594441 53495845     ST, ALREADY EXIS
 23fdd6c:	41005354 49443d34 202c5453 00544553     TS.A4=DIST, SET.
 23fdd7c:	443d3441 2c545349 45504f20 5245204e     A4=DIST, OPEN ER
 23fdd8c:	34410052 5349443d 44202c54 35204c45     R.A4=DIST, DEL 5
 23fdd9c:	4b4f3a4d 3031202c 4553204d 34410054     M:OK, 10M SET.A4
 23fddac:	5349443d 44202c54 35204c45 52453a4d     =DIST, DEL 5M:ER
 23fddbc:	34410052 5349443d 31202c54 41004d30     R.A4=DIST, 10M.A
 23fddcc:	49443d34 202c5453 4e204453 6f440046     4=DIST, SD NF.Do
 23fdddc:	69746341 413a6e6f 49415234 3441004e     Action:A4RAIN.A4
 23fddec:	4941523d 44202c4e 44204c45 3a545349     =RAIN, DEL DIST:
 23fddfc:	41004b4f 41523d34 202c4e49 204c4544     OK.A4=RAIN, DEL 
 23fde0c:	54534944 5252453a 3d344100 4e494152     DIST:ERR.A4=RAIN
 23fde1c:	4544202c 4d35204c 004b4f3a 523d3441     , DEL 5M:OK.A4=R
 23fde2c:	2c4e4941 4c454420 3a4d3520 00525245     AIN, DEL 5M:ERR.
 23fde3c:	523d3441 2c4e4941 524c4120 59444145     A4=RAIN, ALREADY
 23fde4c:	49584520 00535453 523d3441 2c4e4941      EXISTS.A4=RAIN,
 23fde5c:	54455320 3d344100 4e494152 504f202c      SET.A4=RAIN, OP
 23fde6c:	45204e45 41005252 41523d34 202c4e49     EN ERR.A4=RAIN, 
 23fde7c:	4e204453 6f440046 69746341 353a6e6f     SD NF.DoAction:5
 23fde8c:	5349444d 4d350054 54534944 4c41202c     MDIST.5MDIST, AL
 23fde9c:	44414552 58452059 53545349 444d3500     READY EXISTS.5MD
 23fdeac:	20545349 00544553 49444d35 4f205453     IST SET.5MDIST O
 23fdebc:	204e4550 00525245 49444d35 202c5453     PEN ERR.5MDIST, 
 23fdecc:	4e204453 6f440046 69746341 413a6e6f     SD NF.DoAction:A
 23fdedc:	57415234 3d344100 54534944 4544202c     4RAW.A4=DIST, DE
 23fdeec:	4944204c 4f3a5453 3441004b 5349443d     L DIST:OK.A4=DIS
 23fdefc:	44202c54 44204c45 3a545349 00525245     T, DEL DIST:ERR.
 23fdf0c:	443d3441 2c545349 4c454420 3a4d3520     A4=DIST, DEL 5M:
 23fdf1c:	41004b4f 41523d34 41202c57 4145524c     OK.A4=RAW, ALREA
 23fdf2c:	45205944 54534958 34410053 5741523d     DY EXISTS.A4=RAW
 23fdf3c:	4553202c 34410054 5741523d 504f202c     , SET.A4=RAW, OP
 23fdf4c:	45204e45 41005252 41523d34 53202c57     EN ERR.A4=RAW, S
 23fdf5c:	464e2044 416f4400 6f697463 34413a6e     D NF.DoAction:A4
 23fdf6c:	00524c43 433d3441 202c524c 204c4544     CLR.A4=CLR, DEL 
 23fdf7c:	54534944 004b4f3a 433d3441 202c524c     DIST:OK.A4=CLR, 
 23fdf8c:	204c4544 54534944 5252453a 3d344100     DEL DIST:ERR.A4=
 23fdf9c:	2c524c43 4c454420 49415220 464e3a4e     CLR, DEL RAIN:NF
 23fdfac:	3d344100 2c524c43 4c454420 49415220     .A4=CLR, DEL RAI
 23fdfbc:	4b4f3a4e 3d344100 2c524c43 4c454420     N:OK.A4=CLR, DEL
 23fdfcc:	49415220 52453a4e 34410052 524c433d      RAIN:ERR.A4=CLR
 23fdfdc:	4544202c 4152204c 4b4f3a57 3d344100     , DEL RAW:OK.A4=
 23fdfec:	2c524c43 4c454420 57415220 5252453a     CLR, DEL RAW:ERR
 23fdffc:	3d344100 2c524c43 4c454420 3a4d3520     .A4=CLR, DEL 5M:
 23fe00c:	41004b4f 4c433d34 44202c52 35204c45     OK.A4=CLR, DEL 5
 23fe01c:	52453a4d 34410052 524c433d 4453202c     M:ERR.A4=CLR, SD
 23fe02c:	00464e20 63416f44 6e6f6974 5235413a      NF.DoAction:A5R
 23fe03c:	41005741 41523d35 41202c57 4145524c     AW.A5=RAW, ALREA
 23fe04c:	45205944 54534958 35410053 5741523d     DY EXISTS.A5=RAW
 23fe05c:	4553202c 35410054 5741523d 504f202c     , SET.A5=RAW, OP
 23fe06c:	45204e45 41005252 41523d35 53202c57     EN ERR.A5=RAW, S
 23fe07c:	464e2044 416f4400 6f697463 35413a6e     D NF.DoAction:A5
 23fe08c:	00524c43 433d3541 202c524c 204c4544     CLR.A5=CLR, DEL 
 23fe09c:	3a574152 41004b4f 4c433d35 44202c52     RAW:OK.A5=CLR, D
 23fe0ac:	52204c45 453a5741 41005252 4c433d35     EL RAW:ERR.A5=CL
 23fe0bc:	44202c52 41204c45 57415235 00464e3a     R, DEL A5RAW:NF.
 23fe0cc:	433d3541 202c524c 4e204453 6f440046     A5=CLR, SD NF.Do
 23fe0dc:	69746341 543a6e6f 4d354958 49585400     Action:TXI5M.TXI
 23fe0ec:	202c4d35 45524c41 20594441 00544553     5M, ALREADY SET.
 23fe0fc:	35495854 4553204d 58540054 204d3549     TXI5M SET.TXI5M 
 23fe10c:	4e45504f 52524520 49585400 203a4d35     OPEN ERR.TXI5M: 
 23fe11c:	6f6d6552 20646576 30315854 6946204d     Removed TX10M Fi
 23fe12c:	5400656c 4d354958 4453202c 00464e20     le.TXI5M, SD NF.
 23fe13c:	63416f44 6e6f6974 4958543a 004d3031     DoAction:TXI10M.
 23fe14c:	31495854 202c4d30 45524c41 20594441     TXI10M, ALREADY 
 23fe15c:	00544553 31495854 53204d30 54005445     SET.TXI10M SET.T
 23fe16c:	30314958 504f204d 45204e45 54005252     XI10M OPEN ERR.T
 23fe17c:	4d354958 6552203a 65766f6d 58542064     XI5M: Removed TX
 23fe18c:	46204d35 00656c69 31495854 202c4d30     5M File.TXI10M, 
 23fe19c:	4e204453 6f440046 69746341 543a6e6f     SD NF.DoAction:T
 23fe1ac:	35314958 5854004d 4d353149 4c41202c     XI15M.TXI15M, AL
 23fe1bc:	44414552 45532059 58540054 4d353149     READY SET.TXI15M
 23fe1cc:	6552203a 65766f6d 58542064 46204d35     : Removed TX5M F
 23fe1dc:	00656c69 31495854 203a4d35 6f6d6552     ile.TXI15M: Remo
 23fe1ec:	20646576 30315854 6946204d 5400656c     ved TX10M File.T
 23fe1fc:	35314958 4553204d 58540054 4d353149     XI15M SET.TXI15M
 23fe20c:	4453202c 00464e20 63416f44 6e6f6974     , SD NF.DoAction
 23fe21c:	4e4b553a 4d495300 746e493a 616e7265     :UKN.SIM:Interna
 23fe22c:	4953006c 78453a4d 6e726574 53006c61     l.SIM:External.S
 23fe23c:	553a4d49 6f6e6b6e 255b6e77 53005d64     IM:Unknown[%d].S
 23fe24c:	3a464d49 61766e49 2064696c 53005a53     IMF:Invalid SZ.S
 23fe25c:	3a464d49 6e65704f 4d495300 443e2d46     IMF:Open.SIMF->D
 23fe26c:	4f3a6c65 4953004b 3e2d464d 3a6c6544     el:OK.SIMF->Del:
 23fe27c:	00727245 464d4953 5b44493a 005d7325     Err.SIMF:ID[%s].
 23fe28c:	45544e49 4c414e52 4d495300 50413a46     INTERNAL.SIMF:AP
 23fe29c:	754e3d4e 45206c6c 53007272 533a4d49     N=Null Err.SIM:S
 23fe2ac:	45207465 72657478 2d6c616e 004e5041     et External-APN.
 23fe2bc:	3a4d4953 20746553 64657243 69746e65     SIM:Set Credenti
 23fe2cc:	00736c61 4e504120 5d73255b 50552000     als. APN[%s]. UP
 23fe2dc:	4d495300 73553a46 616e7265 4e3d656d     .SIMF:Username=N
 23fe2ec:	206c6c75 00727245 464d4953 7361503a     ull Err.SIMF:Pas
 23fe2fc:	3d647773 6c6c754e 72724520 4d495300     swd=Null Err.SIM
 23fe30c:	7465533a 74784520 616e7265 50552d6c     :Set External-UP
 23fe31c:	4d495300 7465533a 74784520 616e7265     .SIM:Set Externa
 23fe32c:	55412d6c 20200050 255b4e55 20005d73     l-AUP.  UN[%s]. 
 23fe33c:	5b575020 005d7325 464d4953 5b44493a      PW[%s].SIMF:ID[
 23fe34c:	205d7325 00727245 464d4953 4c45443a     %s] Err.SIMF:DEL
 23fe35c:	4d495320 00444c4f 464d4953 4e45523a      SIMOLD.SIMF:REN
 23fe36c:	20454d41 4f525245 49530052 523a464d     AME ERROR.SIMF:R
 23fe37c:	4d414e45 4b4f2045 21212100 42455220     ENAME OK.!!! REB
 23fe38c:	20544f4f 00212121 3d3d3d3d 3d3d3d3d     OOT !!!.========
 23fe39c:	3d3d3d3d 3d3d3d3d 3d3d3d3d 2121003d     =============.!!
 23fe3ac:	45532021 49532054 5245204d 20524f52     ! SET SIM ERROR 
 23fe3bc:	00212121 464d4953 45504f3a 5245204e     !!!.SIMF:OPEN ER
 23fe3cc:	00524f52 3a4d4953 55204f4e 54414450     ROR.SIM:NO UPDAT
 23fe3dc:	49462045 5400454c 493a4958 0054494e     E FILE.TXI:INIT.
 23fe3ec:	35495854 6f46204d 00646e75 3a495854     TXI5M Found.TXI:
 23fe3fc:	31204d52 54004d30 30314958 6f46204d     RM 10M.TXI10M Fo
 23fe40c:	00646e75 3a495854 35204d52 5854004d     und.TXI:RM 5M.TX
 23fe41c:	64253d49 6157004d 20347469 69726553     I=%dM.Wait4 Seri
 23fe42c:	43206c61 6f736e6f 4f00656c 3a44454c     al Console.OLED:
 23fe43c:	62616e45 0064656c 44454c4f 7369443a     Enabled.OLED:Dis
 23fe44c:	656c6261 43530064 616e453a 64656c62     abled.SC:Enabled
 23fe45c:	52455300 696e493a 45530074 4b4f3a52     .SER:Init.SER:OK
 23fe46c:	4d534600 7070632e 3231363a 63727320     .FSM.cpp:612 src
 23fe47c:	20262620 2d637273 6c61633e 6361626c      && src->callbac
 23fe48c:	424f006b 6f445f53 6954203a 4e20656d     k.OBS_Do: Time N
 23fe49c:	63620056 70620073 66630063 67720072     V.bcs.bpc.cfr.rg
 23fe4ac:	74677200 70677200 00737700 77006477     .rgt.rgp.ws.wd.w
 23fe4bc:	67770067 70620064 74620031 68620031     g.wgd.bp1.bt1.bh
 23fe4cc:	70620031 74620032 68620032 68680032     1.bp2.bt2.bh2.hh
 23fe4dc:	74680031 74730031 68730031 74730031     1.ht1.st1.sh1.st
 23fe4ec:	68730032 52450032 44483a52 52203143     2.sh2.ERR:HDC1 R
 23fe4fc:	00646165 31746468 68646800 64680031     ead.hdt1.hdh1.hd
 23fe50c:	68003274 00326864 3174706c 70706c00     t2.hdh2.lpt1.lpp
 23fe51c:	706c0031 6c003274 00327070 00327468     1.lpt2.lpp2.ht2.
 23fe52c:	00326868 52204953 54455345 31767300     hh2.SI RESET.sv1
 23fe53c:	31697300 31757300 786c7600 786c6200     .si1.su1.vlx.blx
 23fe54c:	00677300 00723461 00326772 32746772     .sg.a4r.rg2.rgt2
 23fe55c:	70677200 35610032 6d700072 30317331     .rgp2.a5r.pm1s10
 23fe56c:	316d7000 00353273 73316d70 00303031     .pm1s25.pm1s100.
 23fe57c:	65316d70 70003031 3265316d 6d700035     pm1e10.pm1e25.pm
 23fe58c:	30316531 69680030 74627700 67627700     1e100.hi.wbt.wbg
 23fe59c:	6c740074 74007777 0074776c 656d7374     t.tlww.tlwt.tsme
 23fe5ac:	74003532 63656d73 6d737400 00637776     25.tsmec.tsmvwc.
 23fe5bc:	746d7374 736d7400 0031736d 6d736d74     tsmt.tmsms1.tmsm
 23fe5cc:	74003273 736d736d 6d740033 34736d73     s2.tmsms3.tmsms4
 23fe5dc:	736d7400 0031746d 6d736d74 43003274     .tmsmt1.tmsmt2.C
 23fe5ec:	64253a53 3230252e 3a422064 252c6425     S:%d.%02d B:%d,%
 23fe5fc:	30252e64 4c006432 2041524f 4c004b4f     d.%02d.LORA OK.L
 23fe60c:	2041524f 4c00464e 2041524f 54494e49     ORA NF.LORA INIT
 23fe61c:	52524520 524f4c00 53432041 5252452d      ERR.LORA CS-ERR
 23fe62c:	524f4c00 6e492041 57007469 44646e69     .LORA Init.WindD
 23fe63c:	20747369 74696e49 2e002928 72615000     ist Init()...Par
 23fe64c:	6c636974 6f4e3a65 61655274 46007964     ticle:NotReady.F
 23fe65c:	64255b53 503e2d5d 4f204255 64255b4b     S[%d]->PUB OK[%d
 23fe66c:	5346005d 5d64255b 55503e2d 52452042     ].FS[%d]->PUB ER
 23fe67c:	45520052 5b59414c 2d5d7325 4255503e     R.RELAY[%s]->PUB
 23fe68c:	004b4f20 414c4552 73255b59 503e2d5d      OK.RELAY[%s]->P
 23fe69c:	45204255 52005252 59414c45 50595420     UB ERR.RELAY TYP
 23fe6ac:	64255b45 4e49205d 494c4156 32330044     E[%d] INVALID.32
 23fe6bc:	00343600 41534944 44454c42 414e4500     .64.DISABLED.ENA
 23fe6cc:	44454c42 55525400 41460045 0045534c     BLED.TRUE.FALSE.
 23fe6dc:	4f464e49 284f445f 65640029 00646976     INFO_DO().devid.
 23fe6ec:	6f766564 72660073 656d6565 7075006d     devos.freemem.up
 23fe6fc:	656d6974 72657600 4d534600 3035322d     time.ver.FSM-250
 23fe70c:	76313237 64250031 626f0073 25006973     721v1.%ds.obsi.%
 23fe71c:	6f006d64 69747362 6e327400 72640074     dm.obsti.t2nt.dr
 23fe72c:	6e007463 61007332 49440034 35205453     ct.n2s.a4.DIST 5
 23fe73c:	4944004d 31205453 52004d30 4e003247     M.DIST 10M.RG2.N
 23fe74c:	35610053 42732500 2831584d 00297325     S.a5.%sBMX1(%s).
 23fe75c:	4d427325 25283258 25002973 50434d73     %sBMX2(%s).%sMCP
 23fe76c:	73250031 3250434d 4d732500 2f335043     1.%sMCP2.%sMCP3/
 23fe77c:	00317467 434d7325 672f3450 25003274     gt1.%sMCP4/gt2.%
 23fe78c:	54485373 73250031 32544853 48732500     sSHT1.%sSHT2.%sH
 23fe79c:	00314344 44487325 25003243 53504c73     DC1.%sHDC2.%sLPS
 23fe7ac:	73250031 3253504c 48732500 00384849     1.%sLPS2.%sHIH8.
 23fe7bc:	49537325 56732500 004c4d45 4c427325     %sSI.%sVEML.%sBL
 23fe7cc:	73250058 36355341 25003030 574c5473     X.%sAS5600.%sTLW
 23fe7dc:	54732500 25004d53 534d5473 7325004d     .%sTSM.%sTMSM.%s
 23fe7ec:	25004948 54425773 57732500 20544742     HI.%sWBT.%sWBGT 
 23fe7fc:	4c472f57 0045424f 42577325 57205447     W/GLOBE.%sWBGT W
 23fe80c:	4c472f4f 0045424f 4d507325 51413532     O/GLOBE.%sPM25AQ
 23fe81c:	52732500 73252847 65730029 726f736e     .%sRG(%s).sensor
 23fe82c:	64250073 2c64252c 484d6425 6f6c007a     s.%d,%d,%dMHz.lo
 23fe83c:	6f006172 0064656c 70656373 25286e69     ra.oled.scepin(%
 23fe84c:	73002973 53006563 704f3a44 49286e65     s).sce.SD:Open(I
 23fe85c:	296f666e 00525245 4f464e49 55503e2d     nfo)ERR.INFO->PU
 23fe86c:	4b4f2042 5d64255b 464e4900 503e2d4f     B OK[%d].INFO->P
 23fe87c:	45204255 4e005252 503a5332 696c6275     UB ERR.N2S:Publi
 23fe88c:	4e006873 453a5332 7974706d 53324e00     sh.N2S:Empty.N2S
 23fe89c:	5d64255b 3e2d7325 3a425550 4e004b4f     [%d]%s->PUB:OK.N
 23fe8ac:	255b5332 73255d64 55503e2d 45523a42     2S[%d]%s->PUB:RE
 23fe8bc:	00595254 5b53324e 255d6425 503e2d73     TRY.N2S[%d]%s->P
 23fe8cc:	453a4255 4e005252 4f3a5332 4e205342     UB:ERR.N2S:OBS N
 23fe8dc:	65646565 324e0064 424f3a53 55462053     eeded.N2S:OBS FU
 23fe8ec:	4e004c4c 255b5332 3e2d5d64 3a524f42     LL.N2S[%d]->BOR:
 23fe8fc:	00525245 2d53324e 45504f3e 52453a4e     ERR.N2S->OPEN:ER
 23fe90c:	45520052 2d59414c 53324e3e 6e6f4300     R.RELAY->N2S.Con
 23fe91c:	7463656e 57006465 65522053 73657266     nected.WS Refres
 23fe92c:	65522068 72697571 45006465 203a5252     h Required.ERR: 
 23fe93c:	43206f4e 6b636f6c 69614400 5220796c     No Clock.Daily R
 23fe94c:	6f6f6265 65520074 746f6f62 00676e69     eboot.Rebooting.
 23fe95c:	206d2749 76696c41 57202165 003f7968     I'm Alive! Why?.
 23fe96c:	79706f43 68676972 325b2074 5d353230     Copyright [2025]
 23fe97c:	6e555b20 72657669 79746973 726f4320      [University Cor
 23fe98c:	61726f70 6e6f6974 726f6620 6d744120     poration for Atm
 23fe99c:	6870736f 63697265 73655220 63726165     ospheric Researc
 23fe9ac:	4e005d68 453a5332 74736978 324e0073     h].N2S:Exists.N2
 23fe9bc:	6f4e3a53 4300656e 4f4e3a46 00732520     S:None.CF:NO %s.
 23fe9cc:	002b7325 3a435453 6c615620 53006469     %s+.STC: Valid.S
 23fe9dc:	203a4354 20746f4e 696c6156 73250064     TC: Not Valid.%s
 23fe9ec:	6f44003d 69746341 44006e6f 7463416f     =.DoAction.DoAct
 23fe9fc:	3a6e6f69 44004b4f 7463416f 3a6e6f69     ion:OK.DoAction:
 23fea0c:	00525245 432b5441 0d494d49 4d49000a     ERR.AT+CIMI...IM
 23fea1c:	4e3a4953 4d490046 253a4953 00000073     SI:NF.IMSI:%s...

023fea2c <_ZTVN8particle11SPISettingsE>:
	...
 23fea34:	023e6b99 023e6acf 023e6ae3              .k>..j>..j>.

023fea40 <_ZTV6FsFile>:
	...
 23fea48:	023e6ae1 023e6af1 023e6e13 023e6e09     .j>..j>..n>..n>.
 23fea58:	023e6d81 023e6deb 023e6b41 023e6aff     .m>..m>.Ak>..j>.
 23fea68:	023f99c9                                ..?.

023fea6c <_ZL5s_fwd>:
 23fea6c:	7b777c63 c56f6bf2 2b670130 76abd7fe     c|w{.ko.0.g+...v
 23fea7c:	7dc982ca f04759fa afa2d4ad c072a49c     ...}.YG.......r.
 23fea8c:	2693fdb7 ccf73f36 f1e5a534 1531d871     ...&6?..4...q.1.
 23fea9c:	c323c704 9a059618 e2801207 75b227eb     ..#..........'.u
 23feaac:	1a2c8309 a05a6e1b b3d63b52 842fe329     ..,..nZ.R;..)./.
 23feabc:	ed00d153 5bb1fc20 39becb6a cf584c4a     S... ..[j..9JLX.
 23feacc:	fbaaefd0 85334d43 7f02f945 a89f3c50     ....CM3.E...P<..
 23feadc:	8f40a351 f5389d92 21dab6bc d2f3ff10     Q.@...8....!....
 23feaec:	ec130ccd 1744975f 3d7ea7c4 73195d64     ...._.D...~=d].s
 23feafc:	dc4f8160 88902a22 14b8ee46 db0b5ede     `.O."*..F....^..
 23feb0c:	0a3a32e0 5c240649 62acd3c2 79e49591     .2:.I.$\...b...y
 23feb1c:	6d37c8e7 a94ed58d eaf4566c 08ae7a65     ..7m..N.lV..ez..
 23feb2c:	2e2578ba c6b4a61c 1f74dde8 8a8bbd4b     .x%.......t.K...
 23feb3c:	66b53e70 0ef60348 b9573561 9e1dc186     p>.fH...a5W.....
 23feb4c:	1198f8e1 948ed969 e9871e9b df2855ce     ....i........U(.
 23feb5c:	0d89a18c 6842e6bf 0f2d9941 16bb54b0     ......BhA.-..T..

023feb6c <_ZL5s_inv>:
 23feb6c:	d56a0952 38a53630 9ea340bf fbd7f381     R.j.06.8.@......
 23feb7c:	8239e37c 87ff2f9b 44438e34 cbe9dec4     |.9../..4.CD....
 23feb8c:	32947b54 3d23c2a6 0b954cee 4ec3fa42     T{.2..#=.L..B..N
 23feb9c:	66a12e08 b224d928 49a25b76 25d18b6d     ...f(.$.v[.Im..%
 23febac:	64f6f872 16986886 cc5ca4d4 92b6655d     r..d.h....\.]e..
 23febbc:	5048706c dab9edfd 5746155e 849d8da7     lpHP....^.FW....
 23febcc:	00abd890 0ad3bc8c 0558e4f7 0645b3b8     ..........X...E.
 23febdc:	8f1e2cd0 020f3fca 03bdafc1 6b8a1301     .,...?.........k
 23febec:	4111913a eadc674f cecff297 73e6b4f0     :..AOg.........s
 23febfc:	2274ac96 8535ade7 e837f9e2 6edf751c     ..t"..5...7..u.n
 23fec0c:	711af147 89c5291d 0e62b76f 1bbe18aa     G..q.)..o.b.....
 23fec1c:	4b3e56fc 2079d2c6 fec0db9a f45acd78     .V>K..y ....x.Z.
 23fec2c:	33a8dd1f 31c70788 591012b1 5fec8027     ...3...1...Y'.._
 23fec3c:	a97f5160 0d4ab519 9f7ae52d ef9cc993     `Q....J.-.z.....
 23fec4c:	4d3be0a0 b0f52aae 3cbbebc8 61995383     ..;M.*.....<.S.a
 23fec5c:	7e042b17 26d677ba 631469e1 7d0c2155     .+.~.w.&.i.cU!.}

023fec6c <_ZTV20Adafruit_BMP280_Temp>:
	...
 23fec74:	023efe93 023efe95 023ef62b 023f04bd     ..>...>.+.>...?.
 23fec84:	023efeb1                                ..>.

023fec88 <_ZTV24Adafruit_BMP280_Pressure>:
	...
 23fec90:	023efe91 023efea3 023ef62b 023f067d     ..>...>.+.>.}.?.
 23feca0:	023efef9                                ..>.

023feca4 <_ZL4font>:
 23feca4:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
 23fecb4:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
 23fecc4:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
 23fecd4:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
 23fece4:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
 23fecf4:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
 23fed04:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
 23fed14:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
 23fed24:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
 23fed34:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
 23fed44:	00000000 5f000000 07000000 14000700     ......._........
 23fed54:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
 23fed64:	00502056 00030708 41221c00 22410000     V P......."A..A"
 23fed74:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
 23fed84:	08080800 00000808 20006060 02040810     ........``. ....
 23fed94:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
 23feda4:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
 23fedb4:	41314949 07091121 49494936 49494636     II1A!...6III6FII
 23fedc4:	00001e29 00000014 00003440 22140800     ).......@4....."
 23fedd4:	14141441 41001414 02081422 06095901     A......A"....Y..
 23fede4:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
 23fedf4:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
 23fee04:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
 23fee14:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
 23fee24:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
 23fee34:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
 23fee44:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
 23fee54:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
 23fee64:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
 23fee74:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
 23fee84:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
 23fee94:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
 23feea4:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
 23feeb4:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
 23feec4:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
 23feed4:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
 23feee4:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
 23feef4:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
 23fef04:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
 23fef14:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
 23fef24:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
 23fef34:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
 23fef44:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
 23fef54:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
 23fef64:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
 23fef74:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
 23fef84:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
 23fef94:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
 23fefa4:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
 23fefb4:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
 23fefc4:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
 23fefd4:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
 23fefe4:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
 23feff4:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
 23ff004:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
 23ff014:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
 23ff024:	00ff0000 ff101010 14141400 101000ff     ................
 23ff034:	10ff00ff f010f010 fc141414 f7141400     ................
 23ff044:	0000ff00 14ff00ff fc04f414 10171414     ................
 23ff054:	1f10101f 14141f10 10001f14 00f01010     ................
 23ff064:	1f000000 10101010 1010101f 0010f010     ................
 23ff074:	10ff0000 10101010 10101010 000010ff     ................
 23ff084:	0014ff00 ff00ff00 101f0000 fc000017     ................
 23ff094:	1414f404 14171017 f404f414 00ff0000     ................
 23ff0a4:	141414f7 14141414 14f700f7 14171414     ................
 23ff0b4:	101f1010 1414141f 101014f4 00f010f0     ................
 23ff0c4:	1f101f00 1f000000 00000014 000014fc     ................
 23ff0d4:	10f010f0 ff10ff10 ff141414 10101014     ................
 23ff0e4:	0000001f ff10f000 ffffffff f0f0f0f0     ................
 23ff0f4:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
 23ff104:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
 23ff114:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
 23ff124:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
 23ff134:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
 23ff144:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
 23ff154:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
 23ff164:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
 23ff174:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
 23ff184:	00000018 30001010 0101ff40 01011f00     .......0@.......
 23ff194:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....

023ff1a4 <_ZTV12Adafruit_GFX>:
	...
 23ff1b4:	023f1561 023f965f 023e6051 023f0f69     a.?._.?.Q`>.i.?.
 23ff1c4:	023f0f6b 023f0f9d 023f0f79 023f0f8b     k.?...?.y.?...?.
 23ff1d4:	023f0eab 023f0f69 023f1193 023f1191     ..?.i.?...?...?.
 23ff1e4:	023f0fb5 023f0ff3 023f102d 023f1073     ..?...?.-.?.s.?.
 23ff1f4:	023f108f 023f1111 3950434d 00383038     ..?...?.MCP9808.

023ff204 <_ZTV16Adafruit_MCP9808>:
	...
 23ff20c:	023f1c25 023f1c27 023ef62b 023f1d95     %.?.'.?.+.>...?.
 23ff21c:	023f1c35                                5.?.

023ff220 <_ZL12splash1_data>:
 23ff220:	00000000 00800100 00000000 00000000     ................
 23ff230:	00008003 00000000 07000000 000000c0     ................
 23ff240:	00000000 c0070000 00000000 00000000     ................
 23ff250:	00c00f00 00000000 00000000 0000e01f     ................
 23ff260:	00000000 1f000000 000000e0 00000000     ................
 23ff270:	e03f0000 00000000 00000000 00f03f00     ..?..........?..
	...
 23ff288:	0000f07f 00000000 7ff81f00 000000f0     ................
 23ff298:	00000000 f07ffe3f 00000000 3f000000     ....?..........?
 23ff2a8:	00f07fff 00000000 ff1f0000 0000e0fb     ................
 23ff2b8:	00000000 f9ff0f00 0000c0ff 00000000     ................
 23ff2c8:	fff9ff0f 000000f8 07000000 fffff1ff     ................
 23ff2d8:	00000000 fc030000 80ffff73 00000000     ........s.......
 23ff2e8:	3ffe0100 0080ffff 00000000 0f1eff00     ...?............
 23ff2f8:	000000ff 00000000 fc1ffe7f 00000000     ................
 23ff308:	3f000000 00f8ffff 00000000 df0f0000     ...?............
 23ff318:	0000e0ff 00000000 ff191f00 000000c0     ................
 23ff328:	00000000 00ff3c3f 00000000 7e000000     ....?<.........~
 23ff338:	0000f87c 00000000 fe7f0000 0000007c     |...........|...
 23ff348:	00000000 fcffff00 00000000 00000000     ................
 23ff358:	00feffff 00000000 ff000000 0000feff     ................
 23ff368:	00000000 efff0100 000000fe 00000000     ................
 23ff378:	fecfff01 00000000 03000000 00fe07ff     ................
 23ff388:	00000000 fc030000 0000fe07 00000000     ................
 23ff398:	03f00300 000000fe 00000000 fe008001     ................
	...
 23ff3b0:	007e0000 00000000 00000000 00003e00     ..~..........>..
	...
 23ff3c8:	0000000c 07000000 00fc0080 00c00300     ................
 23ff3d8:	80070000 0000fc01 0000c003 01800700     ................
 23ff3e8:	030000fc 000000c0 e0018007 1e000000     ................
 23ff3f8:	07000000 00e00180 001e0000 9ff7e37f     ................
 23ff408:	78e7fdf9 ffc0df7b fdbffff7 7b78fffd     ...x{.........x{
 23ff418:	f7ffc0df fdfdbfff df7b78ff 87f7f0c0     .........x{.....
 23ff428:	ffe13dbc 00de7b78 bc87f7f0 78f0e13d     .=..x{......=..x
 23ff438:	0000de7b 3d8087f7 7b78e0e1 f77f00de     {......=..x{....
 23ff448:	e1fd9f87 de7b78e0 87f7ff00 e0e1fdbf     .....x{.........
 23ff458:	00de7b78 bc87f7f0 78e0e13d f000de7b     x{......=..x{...
 23ff468:	3dbc87f7 7b78e0e1 f7f000de e13dbc87     ...=..x{......=.
 23ff478:	de7b78e0 fff7ff00 e0e1fdbf c0dffb7f     .x{.............
 23ff488:	bffff7ff 7fe0e1fd 7cc0dffb 3d9ff3f3     ...........|...=
 23ff498:	7b3ee0e1 0000c0cf 00000000 00000000     ..>{............
 23ff4a8:	ffffff00 ffffffff c0ffffff ffffffff     ................
 23ff4b8:	11db68fd ffc0311a fdffffff 6afb5a2b     .h...1......+Z.j
 23ff4c8:	ffffc0ef 4bfdffff 331a3b5b ffffffc0     .......K[;.3....
 23ff4d8:	5b6bfdff c0fd6adb                       ..k[.j..

023ff4e0 <_ZL12splash2_data>:
 23ff4e0:	00600000 00000000 00000000 00000000     ..`.............
 23ff4f0:	0000e000 00000000 00000000 01000000     ................
 23ff500:	000000e0 00000000 00000000 f0010000     ................
	...
 23ff51c:	00f00300 00000000 00000000 00000000     ................
 23ff52c:	0000f007 00000000 00000000 07000000     ................
 23ff53c:	000000f8 00000000 00000000 f80f0000     ................
 23ff54c:	03000000 007e00c0 00e00100 00f80f7f     ......~.........
 23ff55c:	c0030000 0000fe00 ff00e001 0000f8ef     ................
 23ff56c:	00c00300 010000fe ffff00e0 000000f8     ................
 23ff57c:	f000c003 0f000000 7ffe7f00 030000c0     ................
 23ff58c:	00f000c0 000f0000 f87ffe3f cffbf13f     ........?...?...
 23ff59c:	bcf3fefc 1fe0ef3d 7fff7ffe fedffffb     ....=...........
 23ff5ac:	3dbcfffe c61fe0ef fb7fffff fefedfff     ...=............
 23ff5bc:	ef3dbcff c7e30fe0 c37b78fe fff01ede     ..=......x{.....
 23ff5cc:	00ef3dbc fc87ff07 dec37b78 3cf8f01e     .=......x{.....<
 23ff5dc:	0100ef3d 00f0ffff 1ec0c37b 3d3cf0f0     =.......{.....<=
 23ff5ec:	f30100ef fb3fe07f f0fecfc3 ef3d3cf0     ......?......<=.
 23ff5fc:	3fe30300 c3fb7f80 f0f0fedf 00ef3d3c     ...?........<=..
 23ff60c:	003ce707 dec37b78 3cf0f01e 0700ef3d     ..<.x{.....<=...
 23ff61c:	7800beff 1edec37b 3d3cf0f0 ff0700ef     ...x{.....<=....
 23ff62c:	7b7800fe f01edec3 ef3d3cf0 feff0f00     ..x{.....<=.....
 23ff63c:	fffb7f00 f0f0fedf e0effd3f 00ffff0f     ........?.......
 23ff64c:	dffffb7f 3ff0f0fe 0fe0effd 3e00fff9     .......?.......>
 23ff65c:	9ecff979 3d1ff0f0 f11fe0e7 000000ff     y......=........
	...
 23ff674:	ff801f00 ffff7f00 ffffffff e0ffffff     ................
 23ff684:	007f001c ffffff7f 886db4fe 00e0188d     ..........m.....
 23ff694:	7f001f00 feffffff b57dad95 0000e077     ..........}.w...
 23ff6a4:	ff7f000f a5feffff 198d9dad 060000e0     ................
 23ff6b4:	ffff7f00 adb5feff e07eb5ed              ..........~.

023ff6c0 <_ZTV16Adafruit_SSD1306>:
	...
 23ff6c8:	023f2319 023f2331 023f1561 023f965f     .#?.1#?.a.?._.?.
 23ff6d8:	023f2345 023f0f69 023f0f6b 023f0f9d     E#?.i.?.k.?...?.
 23ff6e8:	023f0f79 023f0f8b 023f0eab 023f0f69     y.?...?...?.i.?.
 23ff6f8:	023f1193 023f24e3 023f2b47 023f2af9     ..?..$?.G+?..*?.
 23ff708:	023f102d 023f1073 023f108f 023f1111     -.?.s.?...?...?.

023ff718 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
 23ff718:	e0c08000 fefcf8f0                       ........

023ff720 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
 23ff720:	07030100 7f3f1f0f                       ......?.

023ff728 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
 23ff728:	a880d5ae                                ....

023ff72c <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
 23ff72c:	8d4000d3                                ..@.

023ff730 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
 23ff730:	c8a10020                                 ...

023ff734 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
 23ff734:	a6a440db                                 .@....

023ff73a <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
 23ff73a:	21ff0022                                 "..!..

023ff740 <CSWTCH.30>:
 23ff740:	00c80064 03200190 ffffffff ffffffff     d..... .........
 23ff750:	ffff0032 ffffffff 00000019              2...........

023ff75c <CSWTCH.35>:
 23ff75c:	3f800000 40000000 3e000000 3e800000     ...?...@...>...>

023ff76c <_ZTV15RHGenericDriver>:
	...
 23ff774:	023f3321 023e6051 023e6051 023e6051     !3?.Q`>.Q`>.Q`>.
 23ff784:	023e6051 023f3325 023f3337 023f33bd     Q`>.%3?.73?..3?.
 23ff794:	023f3395 023f33e1 023f3341 023f3349     .3?..3?.A3?.I3?.
 23ff7a4:	023f334d 023f3351 023f3355 023f3359     M3?.Q3?.U3?.Y3?.
 23ff7b4:	023f3345 023f3365 023f3369 023f336d     E3?.e3?.i3?.m3?.
 23ff7c4:	023f3371 023f3375 023f337b 023f337f     q3?.u3?.{3?..3?.
 23ff7d4:	023f3341 023f3383 023f3389 023f338f     A3?..3?..3?..3?.

023ff7e4 <_ZTV12RHGenericSPI>:
	...
 23ff7ec:	023e6051 023f3441 023f3443 023e6051     Q`>.A4?.C4?.Q`>.
 23ff7fc:	023e6051 023f344b 023f344f 023f3453     Q`>.K4?.O4?.S4?.
 23ff80c:	023f3445 023f3447 023f3449              E4?.G4?.I4?.

023ff818 <_ZTV13RHHardwareSPI>:
	...
 23ff820:	023f34c9 023f34dd 023f34eb 023f34f9     .4?..4?..4?..4?.
 23ff830:	023f3565 023f344b 023f344f 023f3453     e5?.K4?.O4?.S4?.
 23ff840:	023f3573 023f3587 023f346d              s5?..5?.m4?.

023ff84c <_ZTV11RHSPIDriver>:
	...
 23ff854:	023f35a5 023e6051 023e6051 023e6051     .5?.Q`>.Q`>.Q`>.
 23ff864:	023e6051 023f3325 023f3337 023f33bd     Q`>.%3?.73?..3?.
 23ff874:	023f3395 023f33e1 023f3341 023f3349     .3?..3?.A3?.I3?.
 23ff884:	023f334d 023f3351 023f3355 023f3359     M3?.Q3?.U3?.Y3?.
 23ff894:	023f3345 023f3365 023f3369 023f336d     E3?.e3?.i3?.m3?.
 23ff8a4:	023f3371 023f3375 023f337b 023f337f     q3?.u3?.{3?..3?.
 23ff8b4:	023f3341 023f3383 023f3389 023f338f     A3?..3?..3?..3?.

023ff8c4 <_ZL18MODEM_CONFIG_TABLE>:
 23ff8c4:	92047472 94480474 0cc47804              rt..t.H..x..

023ff8d0 <_ZTV7RH_RF95>:
	...
 23ff8d8:	023f3bb9 023f3a6f 023f3769 023f3aab     .;?.o:?.i7?..:?.
 23ff8e8:	023f3721 023f3325 023f3337 023f33bd     !7?.%3?.73?..3?.
 23ff8f8:	023f3395 023f33e1 023f3725 023f3349     .3?..3?.%7?.I3?.
 23ff908:	023f334d 023f3351 023f3355 023f3359     M3?.Q3?.U3?.Y3?.
 23ff918:	023f3345 023f3365 023f3369 023f336d     E3?.e3?.i3?.m3?.
 23ff928:	023f3371 023f3375 023f337b 023f337f     q3?.u3?.{3?..3?.
 23ff938:	023f374f 023f3383 023f3389 023f338f     O7?..3?..3?..3?.

023ff948 <_ZL11daysInMonth>:
 23ff948:	1e1f1c1f 1f1f1e1f 451e1f1e 54414658     ...........EXFAT
 23ff958:	70706100 3162612e 00353038              .app.ab1805.

023ff964 <_ZTVN5spark13CellularClassE>:
	...
 23ff96c:	023f83b3 023f83a9 023f839f 023f8355     ..?...?...?.U.?.
 23ff97c:	023f8393 023f8387 023f93cd 023f93d5     ..?...?...?...?.
 23ff98c:	023f837b 023f8373 023f8369 023f835f     {.?.s.?.i.?._.?.
 23ff99c:	023f9521 023f9405 023f940d 006e616e     !.?...?...?.nan.
 23ff9ac:	00666e69 0066766f                       inf.ovf.

023ff9b4 <_ZTV14CellularSignal>:
	...
 23ff9bc:	023f8441 023f8469 023f8443 023f8479     A.?.i.?.C.?.y.?.
 23ff9cc:	023f84ad 023f84d9 023f850d 023f86d1     ..?...?...?...?.
 23ff9dc:	023f8447 023f8463 fffffffc 00000000     G.?.c.?.........
 23ff9ec:	023f871d                                ..?.

023ff9f0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ff9f8:	023f873d 023f8743 023f8781 023f8751     =.?.C.?...?.Q.?.
 23ffa08:	023f873f                                ?.?.

023ffa0c <_ZTVN5spark13EthernetClassE>:
	...
 23ffa14:	023f8d8b 023f8d81 023f8d77 023f8d6d     ..?...?.w.?.m.?.
 23ffa24:	023f8d61 023f8d55 023f93cd 023f93d5     a.?.U.?...?...?.
 23ffa34:	023f8d49 023f8d41 023f8d37 023f8d2d     I.?.A.?.7.?.-.?.
 23ffa44:	023f9521 023f9405 023f940d              !.?...?...?.

023ffa50 <_ZTV7TwoWire>:
	...
 23ffa58:	023f8da9 023f8df3 023f8dcb 023f8dab     ..?...?...?...?.
 23ffa68:	023f8dd3 023f8ddb 023f8de3 023f8deb     ..?...?...?...?.
 23ffa78:	023f99c9                                ..?.

023ffa7c <_ZTV9IPAddress>:
	...
 23ffa84:	023f8fbd 023f8fad 023f8faf 25007525     ..?...?...?.%u.%
 23ffa94:	00756c6c 6c2a2e25 25750066 00783430     llu.%.*lf.u%04x.

023ffaa4 <_ZTVN5spark16JSONBufferWriterE>:
	...
 23ffaac:	023f909d 023f909f 023f90ad 023f90d3     ..?...?...?...?.
 23ffabc:	00707061                                app.

023ffac0 <CSWTCH.165>:
 23ffac0:	1007aef4 1007aeb8 1007af98 1007af14     ................

023ffad0 <_ZTVN5spark12NetworkClassE>:
	...
 23ffad8:	023f938d 023f9397 023f93a1 023f93ab     ..?...?...?...?.
 23ffae8:	023f93b5 023f93c1 023f93cd 023f93d5     ..?...?...?...?.
 23ffaf8:	023f93dd 023f93e9 023f93f1 023f93fb     ..?...?...?...?.
 23ffb08:	023f9521 023f9405 023f940d              !.?...?...?.

023ffb14 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 23ffb14:	18100800 38302820 252d5925 64252d6d     .... (08%Y-%m-%d
 23ffb24:	3a482554 253a4d25 007a2553 74637361     T%H:%M:%S%z.asct
 23ffb34:	00656d69                                ime.

023ffb38 <_ZTV11USARTSerial>:
	...
 23ffb40:	023f9d89 023f9df5 023f9dcd 023f965f     ..?...?...?._.?.
 23ffb50:	023f9d9d 023f9db9 023f9dab 023f9dc7     ..?...?...?...?.
 23ffb60:	023f99c9 023f9d8b 023f9d8f              ..?...?...?.

023ffb6c <_ZTV9USBSerial>:
	...
 23ffb74:	023f9e39 023f9ea1 023f9e77 023f965f     9.?...?.w.?._.?.
 23ffb84:	023f9e69 023f9e3b 023f9e4b 023f9e9b     i.?.;.?.K.?...?.
 23ffb94:	023f99c9 023f9e5b 023f9e33              ..?.[.?.3.?.

023ffba0 <_ZTVN5spark9WiFiClassE>:
	...
 23ffba8:	023f9f9f 023f9f95 023f9f8b 023f9f41     ..?...?...?.A.?.
 23ffbb8:	023f9f7f 023f9f73 023f93cd 023f93d5     ..?.s.?...?...?.
 23ffbc8:	023f9f67 023f9f5f 023f9f55 023f9f4b     g.?._.?.U.?.K.?.
 23ffbd8:	023f9521 023f9405 023f940d              !.?...?...?.

023ffbe4 <_ZSt7nothrow>:
 23ffbe4:	00000000                                ....

023ffbe8 <atanhi>:
 23ffbe8:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
 23ffbf8:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

023ffc08 <atanlo>:
 23ffc08:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
 23ffc18:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

023ffc28 <CSWTCH.8>:
 23ffc28:	54442d18 bfe921fb 7f3321d2 4002d97c     .-DT.!...!3.|..@
 23ffc38:	7f3321d2 c002d97c                       .!3.|...

023ffc40 <CSWTCH.9>:
 23ffc40:	00000000 80000000 54442d18 400921fb     .........-DT.!.@
 23ffc50:	54442d18 c00921fb 00000000              .-DT.!......

023ffc5c <npio2_hw>:
 23ffc5c:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
 23ffc6c:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
 23ffc7c:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
 23ffc8c:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
 23ffc9c:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
 23ffcac:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
 23ffcbc:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
 23ffccc:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

023ffcdc <two_over_pi>:
 23ffcdc:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
 23ffcec:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
 23ffcfc:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
 23ffd0c:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
 23ffd1c:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
 23ffd2c:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
 23ffd3c:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
 23ffd4c:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
 23ffd5c:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
 23ffd6c:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
 23ffd7c:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
 23ffd8c:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
 23ffd9c:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
 23ffdac:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
 23ffdbc:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
 23ffdcc:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
 23ffddc:	0060e27b 00c08c6b 00000000              {.`.k.......

023ffde8 <PIo2>:
 23ffde8:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
 23ffdf8:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
 23ffe08:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
 23ffe18:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

023ffe28 <init_jk>:
 23ffe28:	00000002 00000003 00000004 00000006     ................

023ffe38 <TWO52>:
 23ffe38:	00000000 43300000 00000000 c3300000     ......0C......0.
 23ffe48:	4e454552 616d2054 636f6c6c 63757320     REENT malloc suc
 23ffe58:	64656563 2f006465 2f706d74 6b6e656a     ceeded./tmp/jenk
 23ffe68:	2d736e69 2d434347 702d3031 6c657069     ins-GCC-10-pipel
 23ffe78:	2d656e69 325f3834 31303230 5f343231     ine-48_20201124_
 23ffe88:	36303631 36303831 732f3933 6e2f6372     1606180639/src/n
 23ffe98:	696c7765 656e2f62 62696c77 62696c2f     ewlib/newlib/lib
 23ffea8:	74732f63 62696c64 6e61722f 00632e64     c/stdlib/rand.c.

023ffeb8 <_ctype_>:
 23ffeb8:	20202000 20202020 28282020 20282828     .         ((((( 
 23ffec8:	20202020 20202020 20202020 20202020                     
 23ffed8:	10108820 10101010 10101010 10101010      ...............
 23ffee8:	04040410 04040404 10040404 10101010     ................
 23ffef8:	41411010 41414141 01010101 01010101     ..AAAAAA........
 23fff08:	01010101 01010101 01010101 10101010     ................
 23fff18:	42421010 42424242 02020202 02020202     ..BBBBBB........
 23fff28:	02020202 02020202 02020202 10101010     ................
 23fff38:	00000020 00000000 00000000 00000000      ...............
	...

023fffb9 <link_const_data_end>:
 23fffb9:	00          	.byte	0x00
	...

023fffbc <link_constructors_location>:
 23fffbc:	023ed789 	.word	0x023ed789
 23fffc0:	023f3595 	.word	0x023f3595
 23fffc4:	023f7499 	.word	0x023f7499
 23fffc8:	023f8345 	.word	0x023f8345
 23fffcc:	023f8411 	.word	0x023f8411
 23fffd0:	023f8d1d 	.word	0x023f8d1d
 23fffd4:	023f8d95 	.word	0x023f8d95
 23fffd8:	023f8f3d 	.word	0x023f8f3d
 23fffdc:	023f937d 	.word	0x023f937d
 23fffe0:	023f9535 	.word	0x023f9535
 23fffe4:	023f97b9 	.word	0x023f97b9
 23fffe8:	023f9b5d 	.word	0x023f9b5d
 23fffec:	023f9d75 	.word	0x023f9d75
 23ffff0:	023f9fa9 	.word	0x023f9fa9
