
/Users/rjbubon/Documents/Particle/3D-PAWS-Muon-FullStation/target/6.3.3/msom/3D-PAWS-Muon-FullStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085e6000  085e6000  00006000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085e6018  085e6018  00006018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  085e60a4  085e60a4  000060a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .dynalib      00000008  023e6828  085e60b0  00006828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .psram_text   000197c8  023e6830  085e60b8  00006830  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  5 .data_alt     00000000  023ffff8  023ffff8  00030000  2**0
                  CONTENTS
  6 .bss_alt      00000000  023ffff8  023ffff8  00030000  2**0
                  CONTENTS
  7 .data         0000014c  1006a198  085ff880  0002a198  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00010d14  1006a2e8  1006a2e8  0003a2e8  2**3
                  ALLOC
  9 .secure_ram_text 00000000  1007d000  1007d000  00030000  2**0
                  CONTENTS
 10 .backup       00000004  1007b400  085ff9cc  0002b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .module_info_suffix_align 000005e8  085ff9d0  085ff9d0  0002f9d0  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0002ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0002fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   003c8026  00000000  00000000  00030000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0003aad0  00000000  00000000  003f8026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    000a18ef  00000000  00000000  00432af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00006508  00000000  00000000  004d43e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 000196c0  00000000  00000000  004da8ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000a4dcb  00000000  00000000  004f3fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000d8eff  00000000  00000000  00598d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0015fcc5  00000000  00000000  00671c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00013b4c  00000000  00000000  007d193c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085e6018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85e6018:	4813      	ldr	r0, [pc, #76]	; (85e6068 <module_user_pre_init+0x50>)
 85e601a:	4914      	ldr	r1, [pc, #80]	; (85e606c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85e601c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85e601e:	4288      	cmp	r0, r1
 85e6020:	d005      	beq.n	85e602e <module_user_pre_init+0x16>
 85e6022:	4a13      	ldr	r2, [pc, #76]	; (85e6070 <module_user_pre_init+0x58>)
 85e6024:	4282      	cmp	r2, r0
 85e6026:	d002      	beq.n	85e602e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85e6028:	4b12      	ldr	r3, [pc, #72]	; (85e6074 <module_user_pre_init+0x5c>)
 85e602a:	1a12      	subs	r2, r2, r0
 85e602c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85e602e:	4812      	ldr	r0, [pc, #72]	; (85e6078 <module_user_pre_init+0x60>)
 85e6030:	4a12      	ldr	r2, [pc, #72]	; (85e607c <module_user_pre_init+0x64>)
 85e6032:	2100      	movs	r1, #0
 85e6034:	4b12      	ldr	r3, [pc, #72]	; (85e6080 <module_user_pre_init+0x68>)
 85e6036:	1a12      	subs	r2, r2, r0
 85e6038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85e603a:	4812      	ldr	r0, [pc, #72]	; (85e6084 <module_user_pre_init+0x6c>)
 85e603c:	4912      	ldr	r1, [pc, #72]	; (85e6088 <module_user_pre_init+0x70>)
 85e603e:	4288      	cmp	r0, r1
 85e6040:	d005      	beq.n	85e604e <module_user_pre_init+0x36>
 85e6042:	4a12      	ldr	r2, [pc, #72]	; (85e608c <module_user_pre_init+0x74>)
 85e6044:	4282      	cmp	r2, r0
 85e6046:	d002      	beq.n	85e604e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85e6048:	4b0a      	ldr	r3, [pc, #40]	; (85e6074 <module_user_pre_init+0x5c>)
 85e604a:	1a12      	subs	r2, r2, r0
 85e604c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85e604e:	4810      	ldr	r0, [pc, #64]	; (85e6090 <module_user_pre_init+0x78>)
 85e6050:	4910      	ldr	r1, [pc, #64]	; (85e6094 <module_user_pre_init+0x7c>)
 85e6052:	4288      	cmp	r0, r1
 85e6054:	d005      	beq.n	85e6062 <module_user_pre_init+0x4a>
 85e6056:	4a10      	ldr	r2, [pc, #64]	; (85e6098 <module_user_pre_init+0x80>)
 85e6058:	4282      	cmp	r2, r0
 85e605a:	d002      	beq.n	85e6062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85e605c:	4b05      	ldr	r3, [pc, #20]	; (85e6074 <module_user_pre_init+0x5c>)
 85e605e:	1a12      	subs	r2, r2, r0
 85e6060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85e6062:	4801      	ldr	r0, [pc, #4]	; (85e6068 <module_user_pre_init+0x50>)
 85e6064:	bd08      	pop	{r3, pc}
 85e6066:	bf00      	nop
 85e6068:	1006a198 	.word	0x1006a198
 85e606c:	085ff880 	.word	0x085ff880
 85e6070:	1006a2e4 	.word	0x1006a2e4
 85e6074:	10110d2d 	.word	0x10110d2d
 85e6078:	1006a2e8 	.word	0x1006a2e8
 85e607c:	1007affc 	.word	0x1007affc
 85e6080:	10110ea1 	.word	0x10110ea1
 85e6084:	023e6828 	.word	0x023e6828
 85e6088:	085e60b0 	.word	0x085e60b0
 85e608c:	023e6830 	.word	0x023e6830
 85e6090:	023e6830 	.word	0x023e6830
 85e6094:	085e60b8 	.word	0x085e60b8
 85e6098:	023ffff8 	.word	0x023ffff8

085e609c <dynalib_preinit>:
 85e609c:	085e6019 00000000                       .`^.....

Disassembly of section .psram_text:

023e6830 <__aeabi_drsub>:
 23e6830:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23e6834:	e002      	b.n	23e683c <__adddf3>
 23e6836:	bf00      	nop

023e6838 <__aeabi_dsub>:
 23e6838:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023e683c <__adddf3>:
 23e683c:	b530      	push	{r4, r5, lr}
 23e683e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23e6842:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23e6846:	ea94 0f05 	teq	r4, r5
 23e684a:	bf08      	it	eq
 23e684c:	ea90 0f02 	teqeq	r0, r2
 23e6850:	bf1f      	itttt	ne
 23e6852:	ea54 0c00 	orrsne.w	ip, r4, r0
 23e6856:	ea55 0c02 	orrsne.w	ip, r5, r2
 23e685a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23e685e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23e6862:	f000 80e2 	beq.w	23e6a2a <__adddf3+0x1ee>
 23e6866:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23e686a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23e686e:	bfb8      	it	lt
 23e6870:	426d      	neglt	r5, r5
 23e6872:	dd0c      	ble.n	23e688e <__adddf3+0x52>
 23e6874:	442c      	add	r4, r5
 23e6876:	ea80 0202 	eor.w	r2, r0, r2
 23e687a:	ea81 0303 	eor.w	r3, r1, r3
 23e687e:	ea82 0000 	eor.w	r0, r2, r0
 23e6882:	ea83 0101 	eor.w	r1, r3, r1
 23e6886:	ea80 0202 	eor.w	r2, r0, r2
 23e688a:	ea81 0303 	eor.w	r3, r1, r3
 23e688e:	2d36      	cmp	r5, #54	; 0x36
 23e6890:	bf88      	it	hi
 23e6892:	bd30      	pophi	{r4, r5, pc}
 23e6894:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23e6898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23e689c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23e68a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23e68a4:	d002      	beq.n	23e68ac <__adddf3+0x70>
 23e68a6:	4240      	negs	r0, r0
 23e68a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e68ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23e68b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23e68b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23e68b8:	d002      	beq.n	23e68c0 <__adddf3+0x84>
 23e68ba:	4252      	negs	r2, r2
 23e68bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e68c0:	ea94 0f05 	teq	r4, r5
 23e68c4:	f000 80a7 	beq.w	23e6a16 <__adddf3+0x1da>
 23e68c8:	f1a4 0401 	sub.w	r4, r4, #1
 23e68cc:	f1d5 0e20 	rsbs	lr, r5, #32
 23e68d0:	db0d      	blt.n	23e68ee <__adddf3+0xb2>
 23e68d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 23e68d6:	fa22 f205 	lsr.w	r2, r2, r5
 23e68da:	1880      	adds	r0, r0, r2
 23e68dc:	f141 0100 	adc.w	r1, r1, #0
 23e68e0:	fa03 f20e 	lsl.w	r2, r3, lr
 23e68e4:	1880      	adds	r0, r0, r2
 23e68e6:	fa43 f305 	asr.w	r3, r3, r5
 23e68ea:	4159      	adcs	r1, r3
 23e68ec:	e00e      	b.n	23e690c <__adddf3+0xd0>
 23e68ee:	f1a5 0520 	sub.w	r5, r5, #32
 23e68f2:	f10e 0e20 	add.w	lr, lr, #32
 23e68f6:	2a01      	cmp	r2, #1
 23e68f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 23e68fc:	bf28      	it	cs
 23e68fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 23e6902:	fa43 f305 	asr.w	r3, r3, r5
 23e6906:	18c0      	adds	r0, r0, r3
 23e6908:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23e690c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23e6910:	d507      	bpl.n	23e6922 <__adddf3+0xe6>
 23e6912:	f04f 0e00 	mov.w	lr, #0
 23e6916:	f1dc 0c00 	rsbs	ip, ip, #0
 23e691a:	eb7e 0000 	sbcs.w	r0, lr, r0
 23e691e:	eb6e 0101 	sbc.w	r1, lr, r1
 23e6922:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23e6926:	d31b      	bcc.n	23e6960 <__adddf3+0x124>
 23e6928:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23e692c:	d30c      	bcc.n	23e6948 <__adddf3+0x10c>
 23e692e:	0849      	lsrs	r1, r1, #1
 23e6930:	ea5f 0030 	movs.w	r0, r0, rrx
 23e6934:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23e6938:	f104 0401 	add.w	r4, r4, #1
 23e693c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23e6940:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23e6944:	f080 809a 	bcs.w	23e6a7c <__adddf3+0x240>
 23e6948:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23e694c:	bf08      	it	eq
 23e694e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23e6952:	f150 0000 	adcs.w	r0, r0, #0
 23e6956:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23e695a:	ea41 0105 	orr.w	r1, r1, r5
 23e695e:	bd30      	pop	{r4, r5, pc}
 23e6960:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23e6964:	4140      	adcs	r0, r0
 23e6966:	eb41 0101 	adc.w	r1, r1, r1
 23e696a:	3c01      	subs	r4, #1
 23e696c:	bf28      	it	cs
 23e696e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23e6972:	d2e9      	bcs.n	23e6948 <__adddf3+0x10c>
 23e6974:	f091 0f00 	teq	r1, #0
 23e6978:	bf04      	itt	eq
 23e697a:	4601      	moveq	r1, r0
 23e697c:	2000      	moveq	r0, #0
 23e697e:	fab1 f381 	clz	r3, r1
 23e6982:	bf08      	it	eq
 23e6984:	3320      	addeq	r3, #32
 23e6986:	f1a3 030b 	sub.w	r3, r3, #11
 23e698a:	f1b3 0220 	subs.w	r2, r3, #32
 23e698e:	da0c      	bge.n	23e69aa <__adddf3+0x16e>
 23e6990:	320c      	adds	r2, #12
 23e6992:	dd08      	ble.n	23e69a6 <__adddf3+0x16a>
 23e6994:	f102 0c14 	add.w	ip, r2, #20
 23e6998:	f1c2 020c 	rsb	r2, r2, #12
 23e699c:	fa01 f00c 	lsl.w	r0, r1, ip
 23e69a0:	fa21 f102 	lsr.w	r1, r1, r2
 23e69a4:	e00c      	b.n	23e69c0 <__adddf3+0x184>
 23e69a6:	f102 0214 	add.w	r2, r2, #20
 23e69aa:	bfd8      	it	le
 23e69ac:	f1c2 0c20 	rsble	ip, r2, #32
 23e69b0:	fa01 f102 	lsl.w	r1, r1, r2
 23e69b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 23e69b8:	bfdc      	itt	le
 23e69ba:	ea41 010c 	orrle.w	r1, r1, ip
 23e69be:	4090      	lslle	r0, r2
 23e69c0:	1ae4      	subs	r4, r4, r3
 23e69c2:	bfa2      	ittt	ge
 23e69c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23e69c8:	4329      	orrge	r1, r5
 23e69ca:	bd30      	popge	{r4, r5, pc}
 23e69cc:	ea6f 0404 	mvn.w	r4, r4
 23e69d0:	3c1f      	subs	r4, #31
 23e69d2:	da1c      	bge.n	23e6a0e <__adddf3+0x1d2>
 23e69d4:	340c      	adds	r4, #12
 23e69d6:	dc0e      	bgt.n	23e69f6 <__adddf3+0x1ba>
 23e69d8:	f104 0414 	add.w	r4, r4, #20
 23e69dc:	f1c4 0220 	rsb	r2, r4, #32
 23e69e0:	fa20 f004 	lsr.w	r0, r0, r4
 23e69e4:	fa01 f302 	lsl.w	r3, r1, r2
 23e69e8:	ea40 0003 	orr.w	r0, r0, r3
 23e69ec:	fa21 f304 	lsr.w	r3, r1, r4
 23e69f0:	ea45 0103 	orr.w	r1, r5, r3
 23e69f4:	bd30      	pop	{r4, r5, pc}
 23e69f6:	f1c4 040c 	rsb	r4, r4, #12
 23e69fa:	f1c4 0220 	rsb	r2, r4, #32
 23e69fe:	fa20 f002 	lsr.w	r0, r0, r2
 23e6a02:	fa01 f304 	lsl.w	r3, r1, r4
 23e6a06:	ea40 0003 	orr.w	r0, r0, r3
 23e6a0a:	4629      	mov	r1, r5
 23e6a0c:	bd30      	pop	{r4, r5, pc}
 23e6a0e:	fa21 f004 	lsr.w	r0, r1, r4
 23e6a12:	4629      	mov	r1, r5
 23e6a14:	bd30      	pop	{r4, r5, pc}
 23e6a16:	f094 0f00 	teq	r4, #0
 23e6a1a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23e6a1e:	bf06      	itte	eq
 23e6a20:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23e6a24:	3401      	addeq	r4, #1
 23e6a26:	3d01      	subne	r5, #1
 23e6a28:	e74e      	b.n	23e68c8 <__adddf3+0x8c>
 23e6a2a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23e6a2e:	bf18      	it	ne
 23e6a30:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23e6a34:	d029      	beq.n	23e6a8a <__adddf3+0x24e>
 23e6a36:	ea94 0f05 	teq	r4, r5
 23e6a3a:	bf08      	it	eq
 23e6a3c:	ea90 0f02 	teqeq	r0, r2
 23e6a40:	d005      	beq.n	23e6a4e <__adddf3+0x212>
 23e6a42:	ea54 0c00 	orrs.w	ip, r4, r0
 23e6a46:	bf04      	itt	eq
 23e6a48:	4619      	moveq	r1, r3
 23e6a4a:	4610      	moveq	r0, r2
 23e6a4c:	bd30      	pop	{r4, r5, pc}
 23e6a4e:	ea91 0f03 	teq	r1, r3
 23e6a52:	bf1e      	ittt	ne
 23e6a54:	2100      	movne	r1, #0
 23e6a56:	2000      	movne	r0, #0
 23e6a58:	bd30      	popne	{r4, r5, pc}
 23e6a5a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23e6a5e:	d105      	bne.n	23e6a6c <__adddf3+0x230>
 23e6a60:	0040      	lsls	r0, r0, #1
 23e6a62:	4149      	adcs	r1, r1
 23e6a64:	bf28      	it	cs
 23e6a66:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23e6a6a:	bd30      	pop	{r4, r5, pc}
 23e6a6c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23e6a70:	bf3c      	itt	cc
 23e6a72:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23e6a76:	bd30      	popcc	{r4, r5, pc}
 23e6a78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23e6a7c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23e6a80:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23e6a84:	f04f 0000 	mov.w	r0, #0
 23e6a88:	bd30      	pop	{r4, r5, pc}
 23e6a8a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23e6a8e:	bf1a      	itte	ne
 23e6a90:	4619      	movne	r1, r3
 23e6a92:	4610      	movne	r0, r2
 23e6a94:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23e6a98:	bf1c      	itt	ne
 23e6a9a:	460b      	movne	r3, r1
 23e6a9c:	4602      	movne	r2, r0
 23e6a9e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23e6aa2:	bf06      	itte	eq
 23e6aa4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23e6aa8:	ea91 0f03 	teqeq	r1, r3
 23e6aac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23e6ab0:	bd30      	pop	{r4, r5, pc}
 23e6ab2:	bf00      	nop

023e6ab4 <__aeabi_ui2d>:
 23e6ab4:	f090 0f00 	teq	r0, #0
 23e6ab8:	bf04      	itt	eq
 23e6aba:	2100      	moveq	r1, #0
 23e6abc:	4770      	bxeq	lr
 23e6abe:	b530      	push	{r4, r5, lr}
 23e6ac0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23e6ac4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23e6ac8:	f04f 0500 	mov.w	r5, #0
 23e6acc:	f04f 0100 	mov.w	r1, #0
 23e6ad0:	e750      	b.n	23e6974 <__adddf3+0x138>
 23e6ad2:	bf00      	nop

023e6ad4 <__aeabi_i2d>:
 23e6ad4:	f090 0f00 	teq	r0, #0
 23e6ad8:	bf04      	itt	eq
 23e6ada:	2100      	moveq	r1, #0
 23e6adc:	4770      	bxeq	lr
 23e6ade:	b530      	push	{r4, r5, lr}
 23e6ae0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23e6ae4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23e6ae8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23e6aec:	bf48      	it	mi
 23e6aee:	4240      	negmi	r0, r0
 23e6af0:	f04f 0100 	mov.w	r1, #0
 23e6af4:	e73e      	b.n	23e6974 <__adddf3+0x138>
 23e6af6:	bf00      	nop

023e6af8 <__aeabi_f2d>:
 23e6af8:	0042      	lsls	r2, r0, #1
 23e6afa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23e6afe:	ea4f 0131 	mov.w	r1, r1, rrx
 23e6b02:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23e6b06:	bf1f      	itttt	ne
 23e6b08:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23e6b0c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23e6b10:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23e6b14:	4770      	bxne	lr
 23e6b16:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23e6b1a:	bf08      	it	eq
 23e6b1c:	4770      	bxeq	lr
 23e6b1e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23e6b22:	bf04      	itt	eq
 23e6b24:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23e6b28:	4770      	bxeq	lr
 23e6b2a:	b530      	push	{r4, r5, lr}
 23e6b2c:	f44f 7460 	mov.w	r4, #896	; 0x380
 23e6b30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23e6b34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23e6b38:	e71c      	b.n	23e6974 <__adddf3+0x138>
 23e6b3a:	bf00      	nop

023e6b3c <__aeabi_ul2d>:
 23e6b3c:	ea50 0201 	orrs.w	r2, r0, r1
 23e6b40:	bf08      	it	eq
 23e6b42:	4770      	bxeq	lr
 23e6b44:	b530      	push	{r4, r5, lr}
 23e6b46:	f04f 0500 	mov.w	r5, #0
 23e6b4a:	e00a      	b.n	23e6b62 <__aeabi_l2d+0x16>

023e6b4c <__aeabi_l2d>:
 23e6b4c:	ea50 0201 	orrs.w	r2, r0, r1
 23e6b50:	bf08      	it	eq
 23e6b52:	4770      	bxeq	lr
 23e6b54:	b530      	push	{r4, r5, lr}
 23e6b56:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23e6b5a:	d502      	bpl.n	23e6b62 <__aeabi_l2d+0x16>
 23e6b5c:	4240      	negs	r0, r0
 23e6b5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e6b62:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23e6b66:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23e6b6a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23e6b6e:	f43f aed8 	beq.w	23e6922 <__adddf3+0xe6>
 23e6b72:	f04f 0203 	mov.w	r2, #3
 23e6b76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23e6b7a:	bf18      	it	ne
 23e6b7c:	3203      	addne	r2, #3
 23e6b7e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23e6b82:	bf18      	it	ne
 23e6b84:	3203      	addne	r2, #3
 23e6b86:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23e6b8a:	f1c2 0320 	rsb	r3, r2, #32
 23e6b8e:	fa00 fc03 	lsl.w	ip, r0, r3
 23e6b92:	fa20 f002 	lsr.w	r0, r0, r2
 23e6b96:	fa01 fe03 	lsl.w	lr, r1, r3
 23e6b9a:	ea40 000e 	orr.w	r0, r0, lr
 23e6b9e:	fa21 f102 	lsr.w	r1, r1, r2
 23e6ba2:	4414      	add	r4, r2
 23e6ba4:	e6bd      	b.n	23e6922 <__adddf3+0xe6>
 23e6ba6:	bf00      	nop

023e6ba8 <__aeabi_dmul>:
 23e6ba8:	b570      	push	{r4, r5, r6, lr}
 23e6baa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23e6bae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23e6bb2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23e6bb6:	bf1d      	ittte	ne
 23e6bb8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23e6bbc:	ea94 0f0c 	teqne	r4, ip
 23e6bc0:	ea95 0f0c 	teqne	r5, ip
 23e6bc4:	f000 f8de 	bleq	23e6d84 <__aeabi_dmul+0x1dc>
 23e6bc8:	442c      	add	r4, r5
 23e6bca:	ea81 0603 	eor.w	r6, r1, r3
 23e6bce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23e6bd2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23e6bd6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23e6bda:	bf18      	it	ne
 23e6bdc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23e6be0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23e6be4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23e6be8:	d038      	beq.n	23e6c5c <__aeabi_dmul+0xb4>
 23e6bea:	fba0 ce02 	umull	ip, lr, r0, r2
 23e6bee:	f04f 0500 	mov.w	r5, #0
 23e6bf2:	fbe1 e502 	umlal	lr, r5, r1, r2
 23e6bf6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23e6bfa:	fbe0 e503 	umlal	lr, r5, r0, r3
 23e6bfe:	f04f 0600 	mov.w	r6, #0
 23e6c02:	fbe1 5603 	umlal	r5, r6, r1, r3
 23e6c06:	f09c 0f00 	teq	ip, #0
 23e6c0a:	bf18      	it	ne
 23e6c0c:	f04e 0e01 	orrne.w	lr, lr, #1
 23e6c10:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23e6c14:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23e6c18:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23e6c1c:	d204      	bcs.n	23e6c28 <__aeabi_dmul+0x80>
 23e6c1e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23e6c22:	416d      	adcs	r5, r5
 23e6c24:	eb46 0606 	adc.w	r6, r6, r6
 23e6c28:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23e6c2c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23e6c30:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23e6c34:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23e6c38:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23e6c3c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23e6c40:	bf88      	it	hi
 23e6c42:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23e6c46:	d81e      	bhi.n	23e6c86 <__aeabi_dmul+0xde>
 23e6c48:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23e6c4c:	bf08      	it	eq
 23e6c4e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23e6c52:	f150 0000 	adcs.w	r0, r0, #0
 23e6c56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23e6c5a:	bd70      	pop	{r4, r5, r6, pc}
 23e6c5c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23e6c60:	ea46 0101 	orr.w	r1, r6, r1
 23e6c64:	ea40 0002 	orr.w	r0, r0, r2
 23e6c68:	ea81 0103 	eor.w	r1, r1, r3
 23e6c6c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23e6c70:	bfc2      	ittt	gt
 23e6c72:	ebd4 050c 	rsbsgt	r5, r4, ip
 23e6c76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23e6c7a:	bd70      	popgt	{r4, r5, r6, pc}
 23e6c7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23e6c80:	f04f 0e00 	mov.w	lr, #0
 23e6c84:	3c01      	subs	r4, #1
 23e6c86:	f300 80ab 	bgt.w	23e6de0 <__aeabi_dmul+0x238>
 23e6c8a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23e6c8e:	bfde      	ittt	le
 23e6c90:	2000      	movle	r0, #0
 23e6c92:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23e6c96:	bd70      	pople	{r4, r5, r6, pc}
 23e6c98:	f1c4 0400 	rsb	r4, r4, #0
 23e6c9c:	3c20      	subs	r4, #32
 23e6c9e:	da35      	bge.n	23e6d0c <__aeabi_dmul+0x164>
 23e6ca0:	340c      	adds	r4, #12
 23e6ca2:	dc1b      	bgt.n	23e6cdc <__aeabi_dmul+0x134>
 23e6ca4:	f104 0414 	add.w	r4, r4, #20
 23e6ca8:	f1c4 0520 	rsb	r5, r4, #32
 23e6cac:	fa00 f305 	lsl.w	r3, r0, r5
 23e6cb0:	fa20 f004 	lsr.w	r0, r0, r4
 23e6cb4:	fa01 f205 	lsl.w	r2, r1, r5
 23e6cb8:	ea40 0002 	orr.w	r0, r0, r2
 23e6cbc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23e6cc0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23e6cc4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23e6cc8:	fa21 f604 	lsr.w	r6, r1, r4
 23e6ccc:	eb42 0106 	adc.w	r1, r2, r6
 23e6cd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23e6cd4:	bf08      	it	eq
 23e6cd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23e6cda:	bd70      	pop	{r4, r5, r6, pc}
 23e6cdc:	f1c4 040c 	rsb	r4, r4, #12
 23e6ce0:	f1c4 0520 	rsb	r5, r4, #32
 23e6ce4:	fa00 f304 	lsl.w	r3, r0, r4
 23e6ce8:	fa20 f005 	lsr.w	r0, r0, r5
 23e6cec:	fa01 f204 	lsl.w	r2, r1, r4
 23e6cf0:	ea40 0002 	orr.w	r0, r0, r2
 23e6cf4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23e6cf8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23e6cfc:	f141 0100 	adc.w	r1, r1, #0
 23e6d00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23e6d04:	bf08      	it	eq
 23e6d06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23e6d0a:	bd70      	pop	{r4, r5, r6, pc}
 23e6d0c:	f1c4 0520 	rsb	r5, r4, #32
 23e6d10:	fa00 f205 	lsl.w	r2, r0, r5
 23e6d14:	ea4e 0e02 	orr.w	lr, lr, r2
 23e6d18:	fa20 f304 	lsr.w	r3, r0, r4
 23e6d1c:	fa01 f205 	lsl.w	r2, r1, r5
 23e6d20:	ea43 0302 	orr.w	r3, r3, r2
 23e6d24:	fa21 f004 	lsr.w	r0, r1, r4
 23e6d28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23e6d2c:	fa21 f204 	lsr.w	r2, r1, r4
 23e6d30:	ea20 0002 	bic.w	r0, r0, r2
 23e6d34:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23e6d38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23e6d3c:	bf08      	it	eq
 23e6d3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23e6d42:	bd70      	pop	{r4, r5, r6, pc}
 23e6d44:	f094 0f00 	teq	r4, #0
 23e6d48:	d10f      	bne.n	23e6d6a <__aeabi_dmul+0x1c2>
 23e6d4a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23e6d4e:	0040      	lsls	r0, r0, #1
 23e6d50:	eb41 0101 	adc.w	r1, r1, r1
 23e6d54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23e6d58:	bf08      	it	eq
 23e6d5a:	3c01      	subeq	r4, #1
 23e6d5c:	d0f7      	beq.n	23e6d4e <__aeabi_dmul+0x1a6>
 23e6d5e:	ea41 0106 	orr.w	r1, r1, r6
 23e6d62:	f095 0f00 	teq	r5, #0
 23e6d66:	bf18      	it	ne
 23e6d68:	4770      	bxne	lr
 23e6d6a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23e6d6e:	0052      	lsls	r2, r2, #1
 23e6d70:	eb43 0303 	adc.w	r3, r3, r3
 23e6d74:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23e6d78:	bf08      	it	eq
 23e6d7a:	3d01      	subeq	r5, #1
 23e6d7c:	d0f7      	beq.n	23e6d6e <__aeabi_dmul+0x1c6>
 23e6d7e:	ea43 0306 	orr.w	r3, r3, r6
 23e6d82:	4770      	bx	lr
 23e6d84:	ea94 0f0c 	teq	r4, ip
 23e6d88:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23e6d8c:	bf18      	it	ne
 23e6d8e:	ea95 0f0c 	teqne	r5, ip
 23e6d92:	d00c      	beq.n	23e6dae <__aeabi_dmul+0x206>
 23e6d94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23e6d98:	bf18      	it	ne
 23e6d9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23e6d9e:	d1d1      	bne.n	23e6d44 <__aeabi_dmul+0x19c>
 23e6da0:	ea81 0103 	eor.w	r1, r1, r3
 23e6da4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23e6da8:	f04f 0000 	mov.w	r0, #0
 23e6dac:	bd70      	pop	{r4, r5, r6, pc}
 23e6dae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23e6db2:	bf06      	itte	eq
 23e6db4:	4610      	moveq	r0, r2
 23e6db6:	4619      	moveq	r1, r3
 23e6db8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23e6dbc:	d019      	beq.n	23e6df2 <__aeabi_dmul+0x24a>
 23e6dbe:	ea94 0f0c 	teq	r4, ip
 23e6dc2:	d102      	bne.n	23e6dca <__aeabi_dmul+0x222>
 23e6dc4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23e6dc8:	d113      	bne.n	23e6df2 <__aeabi_dmul+0x24a>
 23e6dca:	ea95 0f0c 	teq	r5, ip
 23e6dce:	d105      	bne.n	23e6ddc <__aeabi_dmul+0x234>
 23e6dd0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23e6dd4:	bf1c      	itt	ne
 23e6dd6:	4610      	movne	r0, r2
 23e6dd8:	4619      	movne	r1, r3
 23e6dda:	d10a      	bne.n	23e6df2 <__aeabi_dmul+0x24a>
 23e6ddc:	ea81 0103 	eor.w	r1, r1, r3
 23e6de0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23e6de4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23e6de8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23e6dec:	f04f 0000 	mov.w	r0, #0
 23e6df0:	bd70      	pop	{r4, r5, r6, pc}
 23e6df2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23e6df6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23e6dfa:	bd70      	pop	{r4, r5, r6, pc}

023e6dfc <__aeabi_ddiv>:
 23e6dfc:	b570      	push	{r4, r5, r6, lr}
 23e6dfe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23e6e02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23e6e06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23e6e0a:	bf1d      	ittte	ne
 23e6e0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23e6e10:	ea94 0f0c 	teqne	r4, ip
 23e6e14:	ea95 0f0c 	teqne	r5, ip
 23e6e18:	f000 f8a7 	bleq	23e6f6a <__aeabi_ddiv+0x16e>
 23e6e1c:	eba4 0405 	sub.w	r4, r4, r5
 23e6e20:	ea81 0e03 	eor.w	lr, r1, r3
 23e6e24:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23e6e28:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23e6e2c:	f000 8088 	beq.w	23e6f40 <__aeabi_ddiv+0x144>
 23e6e30:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23e6e34:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23e6e38:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23e6e3c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23e6e40:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23e6e44:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23e6e48:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23e6e4c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23e6e50:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23e6e54:	429d      	cmp	r5, r3
 23e6e56:	bf08      	it	eq
 23e6e58:	4296      	cmpeq	r6, r2
 23e6e5a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23e6e5e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23e6e62:	d202      	bcs.n	23e6e6a <__aeabi_ddiv+0x6e>
 23e6e64:	085b      	lsrs	r3, r3, #1
 23e6e66:	ea4f 0232 	mov.w	r2, r2, rrx
 23e6e6a:	1ab6      	subs	r6, r6, r2
 23e6e6c:	eb65 0503 	sbc.w	r5, r5, r3
 23e6e70:	085b      	lsrs	r3, r3, #1
 23e6e72:	ea4f 0232 	mov.w	r2, r2, rrx
 23e6e76:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23e6e7a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23e6e7e:	ebb6 0e02 	subs.w	lr, r6, r2
 23e6e82:	eb75 0e03 	sbcs.w	lr, r5, r3
 23e6e86:	bf22      	ittt	cs
 23e6e88:	1ab6      	subcs	r6, r6, r2
 23e6e8a:	4675      	movcs	r5, lr
 23e6e8c:	ea40 000c 	orrcs.w	r0, r0, ip
 23e6e90:	085b      	lsrs	r3, r3, #1
 23e6e92:	ea4f 0232 	mov.w	r2, r2, rrx
 23e6e96:	ebb6 0e02 	subs.w	lr, r6, r2
 23e6e9a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23e6e9e:	bf22      	ittt	cs
 23e6ea0:	1ab6      	subcs	r6, r6, r2
 23e6ea2:	4675      	movcs	r5, lr
 23e6ea4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23e6ea8:	085b      	lsrs	r3, r3, #1
 23e6eaa:	ea4f 0232 	mov.w	r2, r2, rrx
 23e6eae:	ebb6 0e02 	subs.w	lr, r6, r2
 23e6eb2:	eb75 0e03 	sbcs.w	lr, r5, r3
 23e6eb6:	bf22      	ittt	cs
 23e6eb8:	1ab6      	subcs	r6, r6, r2
 23e6eba:	4675      	movcs	r5, lr
 23e6ebc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23e6ec0:	085b      	lsrs	r3, r3, #1
 23e6ec2:	ea4f 0232 	mov.w	r2, r2, rrx
 23e6ec6:	ebb6 0e02 	subs.w	lr, r6, r2
 23e6eca:	eb75 0e03 	sbcs.w	lr, r5, r3
 23e6ece:	bf22      	ittt	cs
 23e6ed0:	1ab6      	subcs	r6, r6, r2
 23e6ed2:	4675      	movcs	r5, lr
 23e6ed4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23e6ed8:	ea55 0e06 	orrs.w	lr, r5, r6
 23e6edc:	d018      	beq.n	23e6f10 <__aeabi_ddiv+0x114>
 23e6ede:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23e6ee2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23e6ee6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23e6eea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23e6eee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23e6ef2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23e6ef6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23e6efa:	d1c0      	bne.n	23e6e7e <__aeabi_ddiv+0x82>
 23e6efc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23e6f00:	d10b      	bne.n	23e6f1a <__aeabi_ddiv+0x11e>
 23e6f02:	ea41 0100 	orr.w	r1, r1, r0
 23e6f06:	f04f 0000 	mov.w	r0, #0
 23e6f0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23e6f0e:	e7b6      	b.n	23e6e7e <__aeabi_ddiv+0x82>
 23e6f10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23e6f14:	bf04      	itt	eq
 23e6f16:	4301      	orreq	r1, r0
 23e6f18:	2000      	moveq	r0, #0
 23e6f1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23e6f1e:	bf88      	it	hi
 23e6f20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23e6f24:	f63f aeaf 	bhi.w	23e6c86 <__aeabi_dmul+0xde>
 23e6f28:	ebb5 0c03 	subs.w	ip, r5, r3
 23e6f2c:	bf04      	itt	eq
 23e6f2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 23e6f32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23e6f36:	f150 0000 	adcs.w	r0, r0, #0
 23e6f3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23e6f3e:	bd70      	pop	{r4, r5, r6, pc}
 23e6f40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23e6f44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23e6f48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23e6f4c:	bfc2      	ittt	gt
 23e6f4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 23e6f52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23e6f56:	bd70      	popgt	{r4, r5, r6, pc}
 23e6f58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23e6f5c:	f04f 0e00 	mov.w	lr, #0
 23e6f60:	3c01      	subs	r4, #1
 23e6f62:	e690      	b.n	23e6c86 <__aeabi_dmul+0xde>
 23e6f64:	ea45 0e06 	orr.w	lr, r5, r6
 23e6f68:	e68d      	b.n	23e6c86 <__aeabi_dmul+0xde>
 23e6f6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23e6f6e:	ea94 0f0c 	teq	r4, ip
 23e6f72:	bf08      	it	eq
 23e6f74:	ea95 0f0c 	teqeq	r5, ip
 23e6f78:	f43f af3b 	beq.w	23e6df2 <__aeabi_dmul+0x24a>
 23e6f7c:	ea94 0f0c 	teq	r4, ip
 23e6f80:	d10a      	bne.n	23e6f98 <__aeabi_ddiv+0x19c>
 23e6f82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23e6f86:	f47f af34 	bne.w	23e6df2 <__aeabi_dmul+0x24a>
 23e6f8a:	ea95 0f0c 	teq	r5, ip
 23e6f8e:	f47f af25 	bne.w	23e6ddc <__aeabi_dmul+0x234>
 23e6f92:	4610      	mov	r0, r2
 23e6f94:	4619      	mov	r1, r3
 23e6f96:	e72c      	b.n	23e6df2 <__aeabi_dmul+0x24a>
 23e6f98:	ea95 0f0c 	teq	r5, ip
 23e6f9c:	d106      	bne.n	23e6fac <__aeabi_ddiv+0x1b0>
 23e6f9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23e6fa2:	f43f aefd 	beq.w	23e6da0 <__aeabi_dmul+0x1f8>
 23e6fa6:	4610      	mov	r0, r2
 23e6fa8:	4619      	mov	r1, r3
 23e6faa:	e722      	b.n	23e6df2 <__aeabi_dmul+0x24a>
 23e6fac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23e6fb0:	bf18      	it	ne
 23e6fb2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23e6fb6:	f47f aec5 	bne.w	23e6d44 <__aeabi_dmul+0x19c>
 23e6fba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23e6fbe:	f47f af0d 	bne.w	23e6ddc <__aeabi_dmul+0x234>
 23e6fc2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23e6fc6:	f47f aeeb 	bne.w	23e6da0 <__aeabi_dmul+0x1f8>
 23e6fca:	e712      	b.n	23e6df2 <__aeabi_dmul+0x24a>

023e6fcc <__gedf2>:
 23e6fcc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23e6fd0:	e006      	b.n	23e6fe0 <__cmpdf2+0x4>
 23e6fd2:	bf00      	nop

023e6fd4 <__ledf2>:
 23e6fd4:	f04f 0c01 	mov.w	ip, #1
 23e6fd8:	e002      	b.n	23e6fe0 <__cmpdf2+0x4>
 23e6fda:	bf00      	nop

023e6fdc <__cmpdf2>:
 23e6fdc:	f04f 0c01 	mov.w	ip, #1
 23e6fe0:	f84d cd04 	str.w	ip, [sp, #-4]!
 23e6fe4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23e6fe8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e6fec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23e6ff0:	bf18      	it	ne
 23e6ff2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23e6ff6:	d01b      	beq.n	23e7030 <__cmpdf2+0x54>
 23e6ff8:	b001      	add	sp, #4
 23e6ffa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23e6ffe:	bf0c      	ite	eq
 23e7000:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23e7004:	ea91 0f03 	teqne	r1, r3
 23e7008:	bf02      	ittt	eq
 23e700a:	ea90 0f02 	teqeq	r0, r2
 23e700e:	2000      	moveq	r0, #0
 23e7010:	4770      	bxeq	lr
 23e7012:	f110 0f00 	cmn.w	r0, #0
 23e7016:	ea91 0f03 	teq	r1, r3
 23e701a:	bf58      	it	pl
 23e701c:	4299      	cmppl	r1, r3
 23e701e:	bf08      	it	eq
 23e7020:	4290      	cmpeq	r0, r2
 23e7022:	bf2c      	ite	cs
 23e7024:	17d8      	asrcs	r0, r3, #31
 23e7026:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23e702a:	f040 0001 	orr.w	r0, r0, #1
 23e702e:	4770      	bx	lr
 23e7030:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23e7034:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e7038:	d102      	bne.n	23e7040 <__cmpdf2+0x64>
 23e703a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23e703e:	d107      	bne.n	23e7050 <__cmpdf2+0x74>
 23e7040:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23e7044:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e7048:	d1d6      	bne.n	23e6ff8 <__cmpdf2+0x1c>
 23e704a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23e704e:	d0d3      	beq.n	23e6ff8 <__cmpdf2+0x1c>
 23e7050:	f85d 0b04 	ldr.w	r0, [sp], #4
 23e7054:	4770      	bx	lr
 23e7056:	bf00      	nop

023e7058 <__aeabi_cdrcmple>:
 23e7058:	4684      	mov	ip, r0
 23e705a:	4610      	mov	r0, r2
 23e705c:	4662      	mov	r2, ip
 23e705e:	468c      	mov	ip, r1
 23e7060:	4619      	mov	r1, r3
 23e7062:	4663      	mov	r3, ip
 23e7064:	e000      	b.n	23e7068 <__aeabi_cdcmpeq>
 23e7066:	bf00      	nop

023e7068 <__aeabi_cdcmpeq>:
 23e7068:	b501      	push	{r0, lr}
 23e706a:	f7ff ffb7 	bl	23e6fdc <__cmpdf2>
 23e706e:	2800      	cmp	r0, #0
 23e7070:	bf48      	it	mi
 23e7072:	f110 0f00 	cmnmi.w	r0, #0
 23e7076:	bd01      	pop	{r0, pc}

023e7078 <__aeabi_dcmpeq>:
 23e7078:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e707c:	f7ff fff4 	bl	23e7068 <__aeabi_cdcmpeq>
 23e7080:	bf0c      	ite	eq
 23e7082:	2001      	moveq	r0, #1
 23e7084:	2000      	movne	r0, #0
 23e7086:	f85d fb08 	ldr.w	pc, [sp], #8
 23e708a:	bf00      	nop

023e708c <__aeabi_dcmplt>:
 23e708c:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e7090:	f7ff ffea 	bl	23e7068 <__aeabi_cdcmpeq>
 23e7094:	bf34      	ite	cc
 23e7096:	2001      	movcc	r0, #1
 23e7098:	2000      	movcs	r0, #0
 23e709a:	f85d fb08 	ldr.w	pc, [sp], #8
 23e709e:	bf00      	nop

023e70a0 <__aeabi_dcmple>:
 23e70a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e70a4:	f7ff ffe0 	bl	23e7068 <__aeabi_cdcmpeq>
 23e70a8:	bf94      	ite	ls
 23e70aa:	2001      	movls	r0, #1
 23e70ac:	2000      	movhi	r0, #0
 23e70ae:	f85d fb08 	ldr.w	pc, [sp], #8
 23e70b2:	bf00      	nop

023e70b4 <__aeabi_dcmpge>:
 23e70b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e70b8:	f7ff ffce 	bl	23e7058 <__aeabi_cdrcmple>
 23e70bc:	bf94      	ite	ls
 23e70be:	2001      	movls	r0, #1
 23e70c0:	2000      	movhi	r0, #0
 23e70c2:	f85d fb08 	ldr.w	pc, [sp], #8
 23e70c6:	bf00      	nop

023e70c8 <__aeabi_dcmpgt>:
 23e70c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e70cc:	f7ff ffc4 	bl	23e7058 <__aeabi_cdrcmple>
 23e70d0:	bf34      	ite	cc
 23e70d2:	2001      	movcc	r0, #1
 23e70d4:	2000      	movcs	r0, #0
 23e70d6:	f85d fb08 	ldr.w	pc, [sp], #8
 23e70da:	bf00      	nop

023e70dc <__aeabi_dcmpun>:
 23e70dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23e70e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e70e4:	d102      	bne.n	23e70ec <__aeabi_dcmpun+0x10>
 23e70e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23e70ea:	d10a      	bne.n	23e7102 <__aeabi_dcmpun+0x26>
 23e70ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23e70f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e70f4:	d102      	bne.n	23e70fc <__aeabi_dcmpun+0x20>
 23e70f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23e70fa:	d102      	bne.n	23e7102 <__aeabi_dcmpun+0x26>
 23e70fc:	f04f 0000 	mov.w	r0, #0
 23e7100:	4770      	bx	lr
 23e7102:	f04f 0001 	mov.w	r0, #1
 23e7106:	4770      	bx	lr

023e7108 <__aeabi_d2iz>:
 23e7108:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23e710c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23e7110:	d215      	bcs.n	23e713e <__aeabi_d2iz+0x36>
 23e7112:	d511      	bpl.n	23e7138 <__aeabi_d2iz+0x30>
 23e7114:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23e7118:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23e711c:	d912      	bls.n	23e7144 <__aeabi_d2iz+0x3c>
 23e711e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23e7122:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23e7126:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23e712a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23e712e:	fa23 f002 	lsr.w	r0, r3, r2
 23e7132:	bf18      	it	ne
 23e7134:	4240      	negne	r0, r0
 23e7136:	4770      	bx	lr
 23e7138:	f04f 0000 	mov.w	r0, #0
 23e713c:	4770      	bx	lr
 23e713e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23e7142:	d105      	bne.n	23e7150 <__aeabi_d2iz+0x48>
 23e7144:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 23e7148:	bf08      	it	eq
 23e714a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 23e714e:	4770      	bx	lr
 23e7150:	f04f 0000 	mov.w	r0, #0
 23e7154:	4770      	bx	lr
 23e7156:	bf00      	nop

023e7158 <__aeabi_d2uiz>:
 23e7158:	004a      	lsls	r2, r1, #1
 23e715a:	d211      	bcs.n	23e7180 <__aeabi_d2uiz+0x28>
 23e715c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23e7160:	d211      	bcs.n	23e7186 <__aeabi_d2uiz+0x2e>
 23e7162:	d50d      	bpl.n	23e7180 <__aeabi_d2uiz+0x28>
 23e7164:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23e7168:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23e716c:	d40e      	bmi.n	23e718c <__aeabi_d2uiz+0x34>
 23e716e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23e7172:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23e7176:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23e717a:	fa23 f002 	lsr.w	r0, r3, r2
 23e717e:	4770      	bx	lr
 23e7180:	f04f 0000 	mov.w	r0, #0
 23e7184:	4770      	bx	lr
 23e7186:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23e718a:	d102      	bne.n	23e7192 <__aeabi_d2uiz+0x3a>
 23e718c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e7190:	4770      	bx	lr
 23e7192:	f04f 0000 	mov.w	r0, #0
 23e7196:	4770      	bx	lr

023e7198 <__aeabi_d2f>:
 23e7198:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23e719c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23e71a0:	bf24      	itt	cs
 23e71a2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23e71a6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23e71aa:	d90d      	bls.n	23e71c8 <__aeabi_d2f+0x30>
 23e71ac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23e71b0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23e71b4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23e71b8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23e71bc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23e71c0:	bf08      	it	eq
 23e71c2:	f020 0001 	biceq.w	r0, r0, #1
 23e71c6:	4770      	bx	lr
 23e71c8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23e71cc:	d121      	bne.n	23e7212 <__aeabi_d2f+0x7a>
 23e71ce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23e71d2:	bfbc      	itt	lt
 23e71d4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23e71d8:	4770      	bxlt	lr
 23e71da:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23e71de:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23e71e2:	f1c2 0218 	rsb	r2, r2, #24
 23e71e6:	f1c2 0c20 	rsb	ip, r2, #32
 23e71ea:	fa10 f30c 	lsls.w	r3, r0, ip
 23e71ee:	fa20 f002 	lsr.w	r0, r0, r2
 23e71f2:	bf18      	it	ne
 23e71f4:	f040 0001 	orrne.w	r0, r0, #1
 23e71f8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23e71fc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23e7200:	fa03 fc0c 	lsl.w	ip, r3, ip
 23e7204:	ea40 000c 	orr.w	r0, r0, ip
 23e7208:	fa23 f302 	lsr.w	r3, r3, r2
 23e720c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23e7210:	e7cc      	b.n	23e71ac <__aeabi_d2f+0x14>
 23e7212:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23e7216:	d107      	bne.n	23e7228 <__aeabi_d2f+0x90>
 23e7218:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23e721c:	bf1e      	ittt	ne
 23e721e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23e7222:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23e7226:	4770      	bxne	lr
 23e7228:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23e722c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23e7230:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23e7234:	4770      	bx	lr
 23e7236:	bf00      	nop

023e7238 <__aeabi_frsub>:
 23e7238:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 23e723c:	e002      	b.n	23e7244 <__addsf3>
 23e723e:	bf00      	nop

023e7240 <__aeabi_fsub>:
 23e7240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

023e7244 <__addsf3>:
 23e7244:	0042      	lsls	r2, r0, #1
 23e7246:	bf1f      	itttt	ne
 23e7248:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 23e724c:	ea92 0f03 	teqne	r2, r3
 23e7250:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 23e7254:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 23e7258:	d06a      	beq.n	23e7330 <__addsf3+0xec>
 23e725a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 23e725e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 23e7262:	bfc1      	itttt	gt
 23e7264:	18d2      	addgt	r2, r2, r3
 23e7266:	4041      	eorgt	r1, r0
 23e7268:	4048      	eorgt	r0, r1
 23e726a:	4041      	eorgt	r1, r0
 23e726c:	bfb8      	it	lt
 23e726e:	425b      	neglt	r3, r3
 23e7270:	2b19      	cmp	r3, #25
 23e7272:	bf88      	it	hi
 23e7274:	4770      	bxhi	lr
 23e7276:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 23e727a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23e727e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 23e7282:	bf18      	it	ne
 23e7284:	4240      	negne	r0, r0
 23e7286:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23e728a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 23e728e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 23e7292:	bf18      	it	ne
 23e7294:	4249      	negne	r1, r1
 23e7296:	ea92 0f03 	teq	r2, r3
 23e729a:	d03f      	beq.n	23e731c <__addsf3+0xd8>
 23e729c:	f1a2 0201 	sub.w	r2, r2, #1
 23e72a0:	fa41 fc03 	asr.w	ip, r1, r3
 23e72a4:	eb10 000c 	adds.w	r0, r0, ip
 23e72a8:	f1c3 0320 	rsb	r3, r3, #32
 23e72ac:	fa01 f103 	lsl.w	r1, r1, r3
 23e72b0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 23e72b4:	d502      	bpl.n	23e72bc <__addsf3+0x78>
 23e72b6:	4249      	negs	r1, r1
 23e72b8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 23e72bc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 23e72c0:	d313      	bcc.n	23e72ea <__addsf3+0xa6>
 23e72c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 23e72c6:	d306      	bcc.n	23e72d6 <__addsf3+0x92>
 23e72c8:	0840      	lsrs	r0, r0, #1
 23e72ca:	ea4f 0131 	mov.w	r1, r1, rrx
 23e72ce:	f102 0201 	add.w	r2, r2, #1
 23e72d2:	2afe      	cmp	r2, #254	; 0xfe
 23e72d4:	d251      	bcs.n	23e737a <__addsf3+0x136>
 23e72d6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 23e72da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 23e72de:	bf08      	it	eq
 23e72e0:	f020 0001 	biceq.w	r0, r0, #1
 23e72e4:	ea40 0003 	orr.w	r0, r0, r3
 23e72e8:	4770      	bx	lr
 23e72ea:	0049      	lsls	r1, r1, #1
 23e72ec:	eb40 0000 	adc.w	r0, r0, r0
 23e72f0:	3a01      	subs	r2, #1
 23e72f2:	bf28      	it	cs
 23e72f4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 23e72f8:	d2ed      	bcs.n	23e72d6 <__addsf3+0x92>
 23e72fa:	fab0 fc80 	clz	ip, r0
 23e72fe:	f1ac 0c08 	sub.w	ip, ip, #8
 23e7302:	ebb2 020c 	subs.w	r2, r2, ip
 23e7306:	fa00 f00c 	lsl.w	r0, r0, ip
 23e730a:	bfaa      	itet	ge
 23e730c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 23e7310:	4252      	neglt	r2, r2
 23e7312:	4318      	orrge	r0, r3
 23e7314:	bfbc      	itt	lt
 23e7316:	40d0      	lsrlt	r0, r2
 23e7318:	4318      	orrlt	r0, r3
 23e731a:	4770      	bx	lr
 23e731c:	f092 0f00 	teq	r2, #0
 23e7320:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 23e7324:	bf06      	itte	eq
 23e7326:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 23e732a:	3201      	addeq	r2, #1
 23e732c:	3b01      	subne	r3, #1
 23e732e:	e7b5      	b.n	23e729c <__addsf3+0x58>
 23e7330:	ea4f 0341 	mov.w	r3, r1, lsl #1
 23e7334:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 23e7338:	bf18      	it	ne
 23e733a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 23e733e:	d021      	beq.n	23e7384 <__addsf3+0x140>
 23e7340:	ea92 0f03 	teq	r2, r3
 23e7344:	d004      	beq.n	23e7350 <__addsf3+0x10c>
 23e7346:	f092 0f00 	teq	r2, #0
 23e734a:	bf08      	it	eq
 23e734c:	4608      	moveq	r0, r1
 23e734e:	4770      	bx	lr
 23e7350:	ea90 0f01 	teq	r0, r1
 23e7354:	bf1c      	itt	ne
 23e7356:	2000      	movne	r0, #0
 23e7358:	4770      	bxne	lr
 23e735a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 23e735e:	d104      	bne.n	23e736a <__addsf3+0x126>
 23e7360:	0040      	lsls	r0, r0, #1
 23e7362:	bf28      	it	cs
 23e7364:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 23e7368:	4770      	bx	lr
 23e736a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 23e736e:	bf3c      	itt	cc
 23e7370:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 23e7374:	4770      	bxcc	lr
 23e7376:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 23e737a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 23e737e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23e7382:	4770      	bx	lr
 23e7384:	ea7f 6222 	mvns.w	r2, r2, asr #24
 23e7388:	bf16      	itet	ne
 23e738a:	4608      	movne	r0, r1
 23e738c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 23e7390:	4601      	movne	r1, r0
 23e7392:	0242      	lsls	r2, r0, #9
 23e7394:	bf06      	itte	eq
 23e7396:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 23e739a:	ea90 0f01 	teqeq	r0, r1
 23e739e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 23e73a2:	4770      	bx	lr

023e73a4 <__aeabi_ui2f>:
 23e73a4:	f04f 0300 	mov.w	r3, #0
 23e73a8:	e004      	b.n	23e73b4 <__aeabi_i2f+0x8>
 23e73aa:	bf00      	nop

023e73ac <__aeabi_i2f>:
 23e73ac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 23e73b0:	bf48      	it	mi
 23e73b2:	4240      	negmi	r0, r0
 23e73b4:	ea5f 0c00 	movs.w	ip, r0
 23e73b8:	bf08      	it	eq
 23e73ba:	4770      	bxeq	lr
 23e73bc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 23e73c0:	4601      	mov	r1, r0
 23e73c2:	f04f 0000 	mov.w	r0, #0
 23e73c6:	e01c      	b.n	23e7402 <__aeabi_l2f+0x2a>

023e73c8 <__aeabi_ul2f>:
 23e73c8:	ea50 0201 	orrs.w	r2, r0, r1
 23e73cc:	bf08      	it	eq
 23e73ce:	4770      	bxeq	lr
 23e73d0:	f04f 0300 	mov.w	r3, #0
 23e73d4:	e00a      	b.n	23e73ec <__aeabi_l2f+0x14>
 23e73d6:	bf00      	nop

023e73d8 <__aeabi_l2f>:
 23e73d8:	ea50 0201 	orrs.w	r2, r0, r1
 23e73dc:	bf08      	it	eq
 23e73de:	4770      	bxeq	lr
 23e73e0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 23e73e4:	d502      	bpl.n	23e73ec <__aeabi_l2f+0x14>
 23e73e6:	4240      	negs	r0, r0
 23e73e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e73ec:	ea5f 0c01 	movs.w	ip, r1
 23e73f0:	bf02      	ittt	eq
 23e73f2:	4684      	moveq	ip, r0
 23e73f4:	4601      	moveq	r1, r0
 23e73f6:	2000      	moveq	r0, #0
 23e73f8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 23e73fc:	bf08      	it	eq
 23e73fe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 23e7402:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 23e7406:	fabc f28c 	clz	r2, ip
 23e740a:	3a08      	subs	r2, #8
 23e740c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 23e7410:	db10      	blt.n	23e7434 <__aeabi_l2f+0x5c>
 23e7412:	fa01 fc02 	lsl.w	ip, r1, r2
 23e7416:	4463      	add	r3, ip
 23e7418:	fa00 fc02 	lsl.w	ip, r0, r2
 23e741c:	f1c2 0220 	rsb	r2, r2, #32
 23e7420:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23e7424:	fa20 f202 	lsr.w	r2, r0, r2
 23e7428:	eb43 0002 	adc.w	r0, r3, r2
 23e742c:	bf08      	it	eq
 23e742e:	f020 0001 	biceq.w	r0, r0, #1
 23e7432:	4770      	bx	lr
 23e7434:	f102 0220 	add.w	r2, r2, #32
 23e7438:	fa01 fc02 	lsl.w	ip, r1, r2
 23e743c:	f1c2 0220 	rsb	r2, r2, #32
 23e7440:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 23e7444:	fa21 f202 	lsr.w	r2, r1, r2
 23e7448:	eb43 0002 	adc.w	r0, r3, r2
 23e744c:	bf08      	it	eq
 23e744e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 23e7452:	4770      	bx	lr

023e7454 <__aeabi_ldivmod>:
 23e7454:	b97b      	cbnz	r3, 23e7476 <__aeabi_ldivmod+0x22>
 23e7456:	b972      	cbnz	r2, 23e7476 <__aeabi_ldivmod+0x22>
 23e7458:	2900      	cmp	r1, #0
 23e745a:	bfbe      	ittt	lt
 23e745c:	2000      	movlt	r0, #0
 23e745e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 23e7462:	e006      	blt.n	23e7472 <__aeabi_ldivmod+0x1e>
 23e7464:	bf08      	it	eq
 23e7466:	2800      	cmpeq	r0, #0
 23e7468:	bf1c      	itt	ne
 23e746a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 23e746e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23e7472:	f000 b9cd 	b.w	23e7810 <__aeabi_idiv0>
 23e7476:	f1ad 0c08 	sub.w	ip, sp, #8
 23e747a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 23e747e:	2900      	cmp	r1, #0
 23e7480:	db09      	blt.n	23e7496 <__aeabi_ldivmod+0x42>
 23e7482:	2b00      	cmp	r3, #0
 23e7484:	db1a      	blt.n	23e74bc <__aeabi_ldivmod+0x68>
 23e7486:	f000 f84d 	bl	23e7524 <__udivmoddi4>
 23e748a:	f8dd e004 	ldr.w	lr, [sp, #4]
 23e748e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23e7492:	b004      	add	sp, #16
 23e7494:	4770      	bx	lr
 23e7496:	4240      	negs	r0, r0
 23e7498:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e749c:	2b00      	cmp	r3, #0
 23e749e:	db1b      	blt.n	23e74d8 <__aeabi_ldivmod+0x84>
 23e74a0:	f000 f840 	bl	23e7524 <__udivmoddi4>
 23e74a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 23e74a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23e74ac:	b004      	add	sp, #16
 23e74ae:	4240      	negs	r0, r0
 23e74b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e74b4:	4252      	negs	r2, r2
 23e74b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e74ba:	4770      	bx	lr
 23e74bc:	4252      	negs	r2, r2
 23e74be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e74c2:	f000 f82f 	bl	23e7524 <__udivmoddi4>
 23e74c6:	f8dd e004 	ldr.w	lr, [sp, #4]
 23e74ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23e74ce:	b004      	add	sp, #16
 23e74d0:	4240      	negs	r0, r0
 23e74d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e74d6:	4770      	bx	lr
 23e74d8:	4252      	negs	r2, r2
 23e74da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e74de:	f000 f821 	bl	23e7524 <__udivmoddi4>
 23e74e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 23e74e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23e74ea:	b004      	add	sp, #16
 23e74ec:	4252      	negs	r2, r2
 23e74ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e74f2:	4770      	bx	lr

023e74f4 <__aeabi_uldivmod>:
 23e74f4:	b953      	cbnz	r3, 23e750c <__aeabi_uldivmod+0x18>
 23e74f6:	b94a      	cbnz	r2, 23e750c <__aeabi_uldivmod+0x18>
 23e74f8:	2900      	cmp	r1, #0
 23e74fa:	bf08      	it	eq
 23e74fc:	2800      	cmpeq	r0, #0
 23e74fe:	bf1c      	itt	ne
 23e7500:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 23e7504:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23e7508:	f000 b982 	b.w	23e7810 <__aeabi_idiv0>
 23e750c:	f1ad 0c08 	sub.w	ip, sp, #8
 23e7510:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 23e7514:	f000 f806 	bl	23e7524 <__udivmoddi4>
 23e7518:	f8dd e004 	ldr.w	lr, [sp, #4]
 23e751c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23e7520:	b004      	add	sp, #16
 23e7522:	4770      	bx	lr

023e7524 <__udivmoddi4>:
 23e7524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23e7528:	9d09      	ldr	r5, [sp, #36]	; 0x24
 23e752a:	4604      	mov	r4, r0
 23e752c:	460f      	mov	r7, r1
 23e752e:	2b00      	cmp	r3, #0
 23e7530:	d148      	bne.n	23e75c4 <__udivmoddi4+0xa0>
 23e7532:	428a      	cmp	r2, r1
 23e7534:	4694      	mov	ip, r2
 23e7536:	d961      	bls.n	23e75fc <__udivmoddi4+0xd8>
 23e7538:	fab2 f382 	clz	r3, r2
 23e753c:	b143      	cbz	r3, 23e7550 <__udivmoddi4+0x2c>
 23e753e:	f1c3 0120 	rsb	r1, r3, #32
 23e7542:	409f      	lsls	r7, r3
 23e7544:	fa02 fc03 	lsl.w	ip, r2, r3
 23e7548:	409c      	lsls	r4, r3
 23e754a:	fa20 f101 	lsr.w	r1, r0, r1
 23e754e:	430f      	orrs	r7, r1
 23e7550:	ea4f 411c 	mov.w	r1, ip, lsr #16
 23e7554:	fa1f fe8c 	uxth.w	lr, ip
 23e7558:	0c22      	lsrs	r2, r4, #16
 23e755a:	fbb7 f6f1 	udiv	r6, r7, r1
 23e755e:	fb01 7716 	mls	r7, r1, r6, r7
 23e7562:	fb06 f00e 	mul.w	r0, r6, lr
 23e7566:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 23e756a:	4290      	cmp	r0, r2
 23e756c:	d908      	bls.n	23e7580 <__udivmoddi4+0x5c>
 23e756e:	eb1c 0202 	adds.w	r2, ip, r2
 23e7572:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 23e7576:	d202      	bcs.n	23e757e <__udivmoddi4+0x5a>
 23e7578:	4290      	cmp	r0, r2
 23e757a:	f200 8137 	bhi.w	23e77ec <__udivmoddi4+0x2c8>
 23e757e:	463e      	mov	r6, r7
 23e7580:	1a12      	subs	r2, r2, r0
 23e7582:	b2a4      	uxth	r4, r4
 23e7584:	fbb2 f0f1 	udiv	r0, r2, r1
 23e7588:	fb01 2210 	mls	r2, r1, r0, r2
 23e758c:	fb00 fe0e 	mul.w	lr, r0, lr
 23e7590:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 23e7594:	45a6      	cmp	lr, r4
 23e7596:	d908      	bls.n	23e75aa <__udivmoddi4+0x86>
 23e7598:	eb1c 0404 	adds.w	r4, ip, r4
 23e759c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 23e75a0:	d202      	bcs.n	23e75a8 <__udivmoddi4+0x84>
 23e75a2:	45a6      	cmp	lr, r4
 23e75a4:	f200 811c 	bhi.w	23e77e0 <__udivmoddi4+0x2bc>
 23e75a8:	4610      	mov	r0, r2
 23e75aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 23e75ae:	eba4 040e 	sub.w	r4, r4, lr
 23e75b2:	2600      	movs	r6, #0
 23e75b4:	b11d      	cbz	r5, 23e75be <__udivmoddi4+0x9a>
 23e75b6:	40dc      	lsrs	r4, r3
 23e75b8:	2300      	movs	r3, #0
 23e75ba:	e9c5 4300 	strd	r4, r3, [r5]
 23e75be:	4631      	mov	r1, r6
 23e75c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23e75c4:	428b      	cmp	r3, r1
 23e75c6:	d909      	bls.n	23e75dc <__udivmoddi4+0xb8>
 23e75c8:	2d00      	cmp	r5, #0
 23e75ca:	f000 80fd 	beq.w	23e77c8 <__udivmoddi4+0x2a4>
 23e75ce:	2600      	movs	r6, #0
 23e75d0:	e9c5 0100 	strd	r0, r1, [r5]
 23e75d4:	4630      	mov	r0, r6
 23e75d6:	4631      	mov	r1, r6
 23e75d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23e75dc:	fab3 f683 	clz	r6, r3
 23e75e0:	2e00      	cmp	r6, #0
 23e75e2:	d14b      	bne.n	23e767c <__udivmoddi4+0x158>
 23e75e4:	428b      	cmp	r3, r1
 23e75e6:	f0c0 80f2 	bcc.w	23e77ce <__udivmoddi4+0x2aa>
 23e75ea:	4282      	cmp	r2, r0
 23e75ec:	f240 80ef 	bls.w	23e77ce <__udivmoddi4+0x2aa>
 23e75f0:	4630      	mov	r0, r6
 23e75f2:	2d00      	cmp	r5, #0
 23e75f4:	d0e3      	beq.n	23e75be <__udivmoddi4+0x9a>
 23e75f6:	e9c5 4700 	strd	r4, r7, [r5]
 23e75fa:	e7e0      	b.n	23e75be <__udivmoddi4+0x9a>
 23e75fc:	b902      	cbnz	r2, 23e7600 <__udivmoddi4+0xdc>
 23e75fe:	deff      	udf	#255	; 0xff
 23e7600:	fab2 f382 	clz	r3, r2
 23e7604:	2b00      	cmp	r3, #0
 23e7606:	f040 809d 	bne.w	23e7744 <__udivmoddi4+0x220>
 23e760a:	1a89      	subs	r1, r1, r2
 23e760c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 23e7610:	b297      	uxth	r7, r2
 23e7612:	2601      	movs	r6, #1
 23e7614:	0c20      	lsrs	r0, r4, #16
 23e7616:	fbb1 f2fe 	udiv	r2, r1, lr
 23e761a:	fb0e 1112 	mls	r1, lr, r2, r1
 23e761e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23e7622:	fb07 f002 	mul.w	r0, r7, r2
 23e7626:	4288      	cmp	r0, r1
 23e7628:	d90f      	bls.n	23e764a <__udivmoddi4+0x126>
 23e762a:	eb1c 0101 	adds.w	r1, ip, r1
 23e762e:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 23e7632:	bf2c      	ite	cs
 23e7634:	f04f 0901 	movcs.w	r9, #1
 23e7638:	f04f 0900 	movcc.w	r9, #0
 23e763c:	4288      	cmp	r0, r1
 23e763e:	d903      	bls.n	23e7648 <__udivmoddi4+0x124>
 23e7640:	f1b9 0f00 	cmp.w	r9, #0
 23e7644:	f000 80cf 	beq.w	23e77e6 <__udivmoddi4+0x2c2>
 23e7648:	4642      	mov	r2, r8
 23e764a:	1a09      	subs	r1, r1, r0
 23e764c:	b2a4      	uxth	r4, r4
 23e764e:	fbb1 f0fe 	udiv	r0, r1, lr
 23e7652:	fb0e 1110 	mls	r1, lr, r0, r1
 23e7656:	fb00 f707 	mul.w	r7, r0, r7
 23e765a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 23e765e:	42a7      	cmp	r7, r4
 23e7660:	d908      	bls.n	23e7674 <__udivmoddi4+0x150>
 23e7662:	eb1c 0404 	adds.w	r4, ip, r4
 23e7666:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 23e766a:	d202      	bcs.n	23e7672 <__udivmoddi4+0x14e>
 23e766c:	42a7      	cmp	r7, r4
 23e766e:	f200 80b4 	bhi.w	23e77da <__udivmoddi4+0x2b6>
 23e7672:	4608      	mov	r0, r1
 23e7674:	1be4      	subs	r4, r4, r7
 23e7676:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 23e767a:	e79b      	b.n	23e75b4 <__udivmoddi4+0x90>
 23e767c:	f1c6 0720 	rsb	r7, r6, #32
 23e7680:	40b3      	lsls	r3, r6
 23e7682:	fa01 f406 	lsl.w	r4, r1, r6
 23e7686:	fa22 fc07 	lsr.w	ip, r2, r7
 23e768a:	40f9      	lsrs	r1, r7
 23e768c:	40b2      	lsls	r2, r6
 23e768e:	ea4c 0c03 	orr.w	ip, ip, r3
 23e7692:	fa20 f307 	lsr.w	r3, r0, r7
 23e7696:	ea4f 491c 	mov.w	r9, ip, lsr #16
 23e769a:	431c      	orrs	r4, r3
 23e769c:	fa1f fe8c 	uxth.w	lr, ip
 23e76a0:	fa00 f306 	lsl.w	r3, r0, r6
 23e76a4:	0c20      	lsrs	r0, r4, #16
 23e76a6:	fbb1 f8f9 	udiv	r8, r1, r9
 23e76aa:	fb09 1118 	mls	r1, r9, r8, r1
 23e76ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23e76b2:	fb08 f00e 	mul.w	r0, r8, lr
 23e76b6:	4288      	cmp	r0, r1
 23e76b8:	d90f      	bls.n	23e76da <__udivmoddi4+0x1b6>
 23e76ba:	eb1c 0101 	adds.w	r1, ip, r1
 23e76be:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 23e76c2:	bf2c      	ite	cs
 23e76c4:	f04f 0b01 	movcs.w	fp, #1
 23e76c8:	f04f 0b00 	movcc.w	fp, #0
 23e76cc:	4288      	cmp	r0, r1
 23e76ce:	d903      	bls.n	23e76d8 <__udivmoddi4+0x1b4>
 23e76d0:	f1bb 0f00 	cmp.w	fp, #0
 23e76d4:	f000 808d 	beq.w	23e77f2 <__udivmoddi4+0x2ce>
 23e76d8:	46d0      	mov	r8, sl
 23e76da:	1a09      	subs	r1, r1, r0
 23e76dc:	b2a4      	uxth	r4, r4
 23e76de:	fbb1 f0f9 	udiv	r0, r1, r9
 23e76e2:	fb09 1110 	mls	r1, r9, r0, r1
 23e76e6:	fb00 fe0e 	mul.w	lr, r0, lr
 23e76ea:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 23e76ee:	458e      	cmp	lr, r1
 23e76f0:	d907      	bls.n	23e7702 <__udivmoddi4+0x1de>
 23e76f2:	eb1c 0101 	adds.w	r1, ip, r1
 23e76f6:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 23e76fa:	d201      	bcs.n	23e7700 <__udivmoddi4+0x1dc>
 23e76fc:	458e      	cmp	lr, r1
 23e76fe:	d87f      	bhi.n	23e7800 <__udivmoddi4+0x2dc>
 23e7700:	4620      	mov	r0, r4
 23e7702:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 23e7706:	eba1 010e 	sub.w	r1, r1, lr
 23e770a:	fba0 9802 	umull	r9, r8, r0, r2
 23e770e:	4541      	cmp	r1, r8
 23e7710:	464c      	mov	r4, r9
 23e7712:	46c6      	mov	lr, r8
 23e7714:	d302      	bcc.n	23e771c <__udivmoddi4+0x1f8>
 23e7716:	d106      	bne.n	23e7726 <__udivmoddi4+0x202>
 23e7718:	454b      	cmp	r3, r9
 23e771a:	d204      	bcs.n	23e7726 <__udivmoddi4+0x202>
 23e771c:	3801      	subs	r0, #1
 23e771e:	ebb9 0402 	subs.w	r4, r9, r2
 23e7722:	eb68 0e0c 	sbc.w	lr, r8, ip
 23e7726:	2d00      	cmp	r5, #0
 23e7728:	d070      	beq.n	23e780c <__udivmoddi4+0x2e8>
 23e772a:	1b1a      	subs	r2, r3, r4
 23e772c:	eb61 010e 	sbc.w	r1, r1, lr
 23e7730:	fa22 f306 	lsr.w	r3, r2, r6
 23e7734:	fa01 f707 	lsl.w	r7, r1, r7
 23e7738:	40f1      	lsrs	r1, r6
 23e773a:	2600      	movs	r6, #0
 23e773c:	431f      	orrs	r7, r3
 23e773e:	e9c5 7100 	strd	r7, r1, [r5]
 23e7742:	e73c      	b.n	23e75be <__udivmoddi4+0x9a>
 23e7744:	fa02 fc03 	lsl.w	ip, r2, r3
 23e7748:	f1c3 0020 	rsb	r0, r3, #32
 23e774c:	fa01 f203 	lsl.w	r2, r1, r3
 23e7750:	fa21 f600 	lsr.w	r6, r1, r0
 23e7754:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 23e7758:	fa24 f100 	lsr.w	r1, r4, r0
 23e775c:	fa1f f78c 	uxth.w	r7, ip
 23e7760:	409c      	lsls	r4, r3
 23e7762:	4311      	orrs	r1, r2
 23e7764:	fbb6 f0fe 	udiv	r0, r6, lr
 23e7768:	0c0a      	lsrs	r2, r1, #16
 23e776a:	fb0e 6610 	mls	r6, lr, r0, r6
 23e776e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 23e7772:	fb00 f607 	mul.w	r6, r0, r7
 23e7776:	4296      	cmp	r6, r2
 23e7778:	d90e      	bls.n	23e7798 <__udivmoddi4+0x274>
 23e777a:	eb1c 0202 	adds.w	r2, ip, r2
 23e777e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 23e7782:	bf2c      	ite	cs
 23e7784:	f04f 0901 	movcs.w	r9, #1
 23e7788:	f04f 0900 	movcc.w	r9, #0
 23e778c:	4296      	cmp	r6, r2
 23e778e:	d902      	bls.n	23e7796 <__udivmoddi4+0x272>
 23e7790:	f1b9 0f00 	cmp.w	r9, #0
 23e7794:	d031      	beq.n	23e77fa <__udivmoddi4+0x2d6>
 23e7796:	4640      	mov	r0, r8
 23e7798:	1b92      	subs	r2, r2, r6
 23e779a:	b289      	uxth	r1, r1
 23e779c:	fbb2 f6fe 	udiv	r6, r2, lr
 23e77a0:	fb0e 2216 	mls	r2, lr, r6, r2
 23e77a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 23e77a8:	fb06 f207 	mul.w	r2, r6, r7
 23e77ac:	428a      	cmp	r2, r1
 23e77ae:	d907      	bls.n	23e77c0 <__udivmoddi4+0x29c>
 23e77b0:	eb1c 0101 	adds.w	r1, ip, r1
 23e77b4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 23e77b8:	d201      	bcs.n	23e77be <__udivmoddi4+0x29a>
 23e77ba:	428a      	cmp	r2, r1
 23e77bc:	d823      	bhi.n	23e7806 <__udivmoddi4+0x2e2>
 23e77be:	4646      	mov	r6, r8
 23e77c0:	1a89      	subs	r1, r1, r2
 23e77c2:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 23e77c6:	e725      	b.n	23e7614 <__udivmoddi4+0xf0>
 23e77c8:	462e      	mov	r6, r5
 23e77ca:	4628      	mov	r0, r5
 23e77cc:	e6f7      	b.n	23e75be <__udivmoddi4+0x9a>
 23e77ce:	1a84      	subs	r4, r0, r2
 23e77d0:	eb61 0303 	sbc.w	r3, r1, r3
 23e77d4:	2001      	movs	r0, #1
 23e77d6:	461f      	mov	r7, r3
 23e77d8:	e70b      	b.n	23e75f2 <__udivmoddi4+0xce>
 23e77da:	4464      	add	r4, ip
 23e77dc:	3802      	subs	r0, #2
 23e77de:	e749      	b.n	23e7674 <__udivmoddi4+0x150>
 23e77e0:	4464      	add	r4, ip
 23e77e2:	3802      	subs	r0, #2
 23e77e4:	e6e1      	b.n	23e75aa <__udivmoddi4+0x86>
 23e77e6:	3a02      	subs	r2, #2
 23e77e8:	4461      	add	r1, ip
 23e77ea:	e72e      	b.n	23e764a <__udivmoddi4+0x126>
 23e77ec:	3e02      	subs	r6, #2
 23e77ee:	4462      	add	r2, ip
 23e77f0:	e6c6      	b.n	23e7580 <__udivmoddi4+0x5c>
 23e77f2:	f1a8 0802 	sub.w	r8, r8, #2
 23e77f6:	4461      	add	r1, ip
 23e77f8:	e76f      	b.n	23e76da <__udivmoddi4+0x1b6>
 23e77fa:	3802      	subs	r0, #2
 23e77fc:	4462      	add	r2, ip
 23e77fe:	e7cb      	b.n	23e7798 <__udivmoddi4+0x274>
 23e7800:	3802      	subs	r0, #2
 23e7802:	4461      	add	r1, ip
 23e7804:	e77d      	b.n	23e7702 <__udivmoddi4+0x1de>
 23e7806:	3e02      	subs	r6, #2
 23e7808:	4461      	add	r1, ip
 23e780a:	e7d9      	b.n	23e77c0 <__udivmoddi4+0x29c>
 23e780c:	462e      	mov	r6, r5
 23e780e:	e6d6      	b.n	23e75be <__udivmoddi4+0x9a>

023e7810 <__aeabi_idiv0>:
 23e7810:	4770      	bx	lr
 23e7812:	bf00      	nop

023e7814 <strcmp>:
 23e7814:	f810 2b01 	ldrb.w	r2, [r0], #1
 23e7818:	f811 3b01 	ldrb.w	r3, [r1], #1
 23e781c:	2a01      	cmp	r2, #1
 23e781e:	bf28      	it	cs
 23e7820:	429a      	cmpcs	r2, r3
 23e7822:	d0f7      	beq.n	23e7814 <strcmp>
 23e7824:	1ad0      	subs	r0, r2, r3
 23e7826:	4770      	bx	lr

023e7828 <strlen>:
 23e7828:	4603      	mov	r3, r0
 23e782a:	f813 2b01 	ldrb.w	r2, [r3], #1
 23e782e:	2a00      	cmp	r2, #0
 23e7830:	d1fb      	bne.n	23e782a <strlen+0x2>
 23e7832:	1a18      	subs	r0, r3, r0
 23e7834:	3801      	subs	r0, #1
 23e7836:	4770      	bx	lr

023e7838 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23e7838:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23e783a:	f012 fc4d 	bl	23fa0d8 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23e783e:	2500      	movs	r5, #0
 23e7840:	4e05      	ldr	r6, [pc, #20]	; (23e7858 <module_user_init+0x20>)
 23e7842:	4c06      	ldr	r4, [pc, #24]	; (23e785c <module_user_init+0x24>)
 23e7844:	1ba4      	subs	r4, r4, r6
 23e7846:	08a4      	lsrs	r4, r4, #2
 23e7848:	42ac      	cmp	r4, r5
 23e784a:	d100      	bne.n	23e784e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23e784c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23e784e:	f856 3b04 	ldr.w	r3, [r6], #4
 23e7852:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23e7854:	3501      	adds	r5, #1
 23e7856:	e7f7      	b.n	23e7848 <module_user_init+0x10>
 23e7858:	023fffc4 	.word	0x023fffc4
 23e785c:	023ffff8 	.word	0x023ffff8

023e7860 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23e7860:	f008 bcaa 	b.w	23f01b8 <setup>

023e7864 <module_user_loop>:
}

void module_user_loop() {
 23e7864:	b508      	push	{r3, lr}
    loop();
 23e7866:	f008 fdeb 	bl	23f0440 <loop>
    _post_loop();
}
 23e786a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23e786e:	f012 bbeb 	b.w	23fa048 <_post_loop>

023e7872 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23e7872:	f010 bc9d 	b.w	23f81b0 <malloc>

023e7876 <_Znaj>:
 23e7876:	f010 bc9b 	b.w	23f81b0 <malloc>

023e787a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23e787a:	f010 bca7 	b.w	23f81cc <free>
	...

023e7880 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23e7880:	4674      	mov	r4, lr
void __cxa_pure_virtual() {
 23e7882:	b500      	push	{lr}
 23e7884:	b08d      	sub	sp, #52	; 0x34
  PANIC(PureVirtualCall,"Call on pure virtual");
 23e7886:	222c      	movs	r2, #44	; 0x2c
 23e7888:	2100      	movs	r1, #0
 23e788a:	a801      	add	r0, sp, #4
 23e788c:	f015 fadb 	bl	23fce46 <memset>
 23e7890:	4b05      	ldr	r3, [pc, #20]	; (23e78a8 <__cxa_pure_virtual+0x28>)
 23e7892:	9404      	str	r4, [sp, #16]
 23e7894:	9301      	str	r3, [sp, #4]
 23e7896:	4b05      	ldr	r3, [pc, #20]	; (23e78ac <__cxa_pure_virtual+0x2c>)
 23e7898:	9302      	str	r3, [sp, #8]
}

__attribute__((always_inline)) static inline uint32_t __get_PC(void) { 
    uint32_t result; 

    asm volatile ("mov %0, pc\n" : "=r" (result) ); 
 23e789a:	467b      	mov	r3, pc
 23e789c:	2100      	movs	r1, #0
 23e789e:	a801      	add	r0, sp, #4
 23e78a0:	9303      	str	r3, [sp, #12]
 23e78a2:	f010 fa71 	bl	23f7d88 <panic_ext>
  while (1);
 23e78a6:	e7fe      	b.n	23e78a6 <__cxa_pure_virtual+0x26>
 23e78a8:	000c002c 	.word	0x000c002c
 23e78ac:	023fd27c 	.word	0x023fd27c

023e78b0 <__register_exitproc>:
int __cxa_atexit(void (*f)(void *), void *p, void *d) {
    return 0;
}

void __register_exitproc(int type, void (*fn)(void), void* arg, void* d) {
}
 23e78b0:	4770      	bx	lr

023e78b2 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 23e78b2:	b158      	cbz	r0, 23e78cc <null_ptr_check+0x1a>
 23e78b4:	68c3      	ldr	r3, [r0, #12]
 23e78b6:	b14b      	cbz	r3, 23e78cc <null_ptr_check+0x1a>
 23e78b8:	6903      	ldr	r3, [r0, #16]
 23e78ba:	b13b      	cbz	r3, 23e78cc <null_ptr_check+0x1a>
 23e78bc:	6943      	ldr	r3, [r0, #20]
 23e78be:	b12b      	cbz	r3, 23e78cc <null_ptr_check+0x1a>
 23e78c0:	6840      	ldr	r0, [r0, #4]
 23e78c2:	fab0 f080 	clz	r0, r0
 23e78c6:	0940      	lsrs	r0, r0, #5
 23e78c8:	4240      	negs	r0, r0
 23e78ca:	4770      	bx	lr
        (dev->intf_ptr == NULL))
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 23e78cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        /* Device structure is fine */
        rslt = BMP3_OK;
    }

    return rslt;
}
 23e78d0:	4770      	bx	lr

023e78d2 <compensate_data>:
{
 23e78d2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23e78d6:	4682      	mov	sl, r0
 23e78d8:	ed2d 8b06 	vpush	{d8-d10}
 23e78dc:	4688      	mov	r8, r1
 23e78de:	461c      	mov	r4, r3
    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 23e78e0:	4615      	mov	r5, r2
 23e78e2:	2a00      	cmp	r2, #0
 23e78e4:	f000 80dd 	beq.w	23e7aa2 <compensate_data+0x1d0>
        if (sensor_comp & (BMP3_PRESS | BMP3_TEMP))
 23e78e8:	f010 0f03 	tst.w	r0, #3
 23e78ec:	d022      	beq.n	23e7934 <compensate_data+0x62>
    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 23e78ee:	6848      	ldr	r0, [r1, #4]
 23e78f0:	f7ff f8e0 	bl	23e6ab4 <__aeabi_ui2d>
 23e78f4:	e9d4 2300 	ldrd	r2, r3, [r4]
 23e78f8:	f7fe ff9e 	bl	23e6838 <__aeabi_dsub>
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 23e78fc:	4602      	mov	r2, r0
 23e78fe:	460b      	mov	r3, r1
    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 23e7900:	4606      	mov	r6, r0
 23e7902:	460f      	mov	r7, r1
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 23e7904:	f7ff f950 	bl	23e6ba8 <__aeabi_dmul>
 23e7908:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 23e790c:	f7ff f94c 	bl	23e6ba8 <__aeabi_dmul>
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 23e7910:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 23e7914:	ec41 0b18 	vmov	d8, r0, r1
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 23e7918:	4630      	mov	r0, r6
 23e791a:	4639      	mov	r1, r7
 23e791c:	f7ff f944 	bl	23e6ba8 <__aeabi_dmul>
 23e7920:	4602      	mov	r2, r0
 23e7922:	460b      	mov	r3, r1
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 23e7924:	ec51 0b18 	vmov	r0, r1, d8
 23e7928:	f7fe ff88 	bl	23e683c <__adddf3>
 23e792c:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 23e7930:	e9c5 0100 	strd	r0, r1, [r5]
        if (sensor_comp & BMP3_PRESS)
 23e7934:	f01a 0001 	ands.w	r0, sl, #1
 23e7938:	f000 80af 	beq.w	23e7a9a <compensate_data+0x1c8>
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 23e793c:	e9d4 ab1c 	ldrd	sl, fp, [r4, #112]	; 0x70
        pow_output = (float) base * pow_output;
 23e7940:	4659      	mov	r1, fp
 23e7942:	4650      	mov	r0, sl
 23e7944:	f7ff fc28 	bl	23e7198 <__aeabi_d2f>
 23e7948:	ee08 0a10 	vmov	s16, r0
 23e794c:	ee68 8a08 	vmul.f32	s17, s16, s16
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e7950:	ee18 0a90 	vmov	r0, s17
 23e7954:	f7ff f8d0 	bl	23e6af8 <__aeabi_f2d>
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e7958:	ee68 7a28 	vmul.f32	s15, s16, s17
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e795c:	ec41 0b19 	vmov	d9, r0, r1
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e7960:	ee17 0a90 	vmov	r0, s15
 23e7964:	f7ff f8c8 	bl	23e6af8 <__aeabi_f2d>
 23e7968:	ec41 0b1a 	vmov	d10, r0, r1
    partial_out2 = uncomp_data->pressure *
 23e796c:	f8d8 0000 	ldr.w	r0, [r8]
 23e7970:	f7ff f8a0 	bl	23e6ab4 <__aeabi_ui2d>
 23e7974:	4689      	mov	r9, r1
 23e7976:	4680      	mov	r8, r0
        pow_output = (float) base * pow_output;
 23e7978:	f7ff fc0e 	bl	23e7198 <__aeabi_d2f>
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 23e797c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
        pow_output = (float) base * pow_output;
 23e7980:	ee08 0a10 	vmov	s16, r0
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 23e7984:	4659      	mov	r1, fp
 23e7986:	4650      	mov	r0, sl
 23e7988:	f7ff f90e 	bl	23e6ba8 <__aeabi_dmul>
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 23e798c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 23e7990:	f7fe ff54 	bl	23e683c <__adddf3>
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e7994:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 23e7998:	4606      	mov	r6, r0
 23e799a:	460f      	mov	r7, r1
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e799c:	ec51 0b19 	vmov	r0, r1, d9
 23e79a0:	f7ff f902 	bl	23e6ba8 <__aeabi_dmul>
 23e79a4:	4602      	mov	r2, r0
 23e79a6:	460b      	mov	r3, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 23e79a8:	4630      	mov	r0, r6
 23e79aa:	4639      	mov	r1, r7
 23e79ac:	f7fe ff46 	bl	23e683c <__adddf3>
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e79b0:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 23e79b4:	4606      	mov	r6, r0
 23e79b6:	460f      	mov	r7, r1
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e79b8:	ec51 0b1a 	vmov	r0, r1, d10
 23e79bc:	f7ff f8f4 	bl	23e6ba8 <__aeabi_dmul>
 23e79c0:	4602      	mov	r2, r0
 23e79c2:	460b      	mov	r3, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 23e79c4:	4630      	mov	r0, r6
 23e79c6:	4639      	mov	r1, r7
 23e79c8:	f7fe ff38 	bl	23e683c <__adddf3>
    partial_out2 = uncomp_data->pressure *
 23e79cc:	4642      	mov	r2, r8
 23e79ce:	464b      	mov	r3, r9
 23e79d0:	f7ff f8ea 	bl	23e6ba8 <__aeabi_dmul>
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 23e79d4:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
    partial_out2 = uncomp_data->pressure *
 23e79d8:	4606      	mov	r6, r0
 23e79da:	460f      	mov	r7, r1
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 23e79dc:	4650      	mov	r0, sl
 23e79de:	4659      	mov	r1, fp
 23e79e0:	f7ff f8e2 	bl	23e6ba8 <__aeabi_dmul>
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 23e79e4:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 23e79e8:	f7fe ff28 	bl	23e683c <__adddf3>
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e79ec:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 23e79f0:	4680      	mov	r8, r0
 23e79f2:	4689      	mov	r9, r1
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e79f4:	ec51 0b19 	vmov	r0, r1, d9
 23e79f8:	f7ff f8d6 	bl	23e6ba8 <__aeabi_dmul>
 23e79fc:	4602      	mov	r2, r0
 23e79fe:	460b      	mov	r3, r1
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 23e7a00:	4640      	mov	r0, r8
 23e7a02:	4649      	mov	r1, r9
 23e7a04:	f7fe ff1a 	bl	23e683c <__adddf3>
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e7a08:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 23e7a0c:	4680      	mov	r8, r0
 23e7a0e:	4689      	mov	r9, r1
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e7a10:	ec51 0b1a 	vmov	r0, r1, d10
 23e7a14:	f7ff f8c8 	bl	23e6ba8 <__aeabi_dmul>
 23e7a18:	4602      	mov	r2, r0
 23e7a1a:	460b      	mov	r3, r1
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 23e7a1c:	4640      	mov	r0, r8
 23e7a1e:	4649      	mov	r1, r9
 23e7a20:	f7fe ff0c 	bl	23e683c <__adddf3>
 23e7a24:	4602      	mov	r2, r0
 23e7a26:	460b      	mov	r3, r1
    comp_press = partial_out1 + partial_out2 + partial_data4;
 23e7a28:	4630      	mov	r0, r6
 23e7a2a:	4639      	mov	r1, r7
 23e7a2c:	f7fe ff06 	bl	23e683c <__adddf3>
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 23e7a30:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    comp_press = partial_out1 + partial_out2 + partial_data4;
 23e7a34:	4606      	mov	r6, r0
 23e7a36:	460f      	mov	r7, r1
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 23e7a38:	4650      	mov	r0, sl
 23e7a3a:	4659      	mov	r1, fp
 23e7a3c:	f7ff f8b4 	bl	23e6ba8 <__aeabi_dmul>
 23e7a40:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
 23e7a44:	f7fe fefa 	bl	23e683c <__adddf3>
        pow_output = (float) base * pow_output;
 23e7a48:	ee68 8a08 	vmul.f32	s17, s16, s16
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 23e7a4c:	4680      	mov	r8, r0
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 23e7a4e:	ee18 0a90 	vmov	r0, s17
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 23e7a52:	4689      	mov	r9, r1
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 23e7a54:	f7ff f850 	bl	23e6af8 <__aeabi_f2d>
 23e7a58:	4602      	mov	r2, r0
 23e7a5a:	460b      	mov	r3, r1
    partial_data3 = partial_data1 * partial_data2;
 23e7a5c:	4640      	mov	r0, r8
 23e7a5e:	4649      	mov	r1, r9
 23e7a60:	f7ff f8a2 	bl	23e6ba8 <__aeabi_dmul>
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 23e7a64:	ee68 7a28 	vmul.f32	s15, s16, s17
    partial_data3 = partial_data1 * partial_data2;
 23e7a68:	4680      	mov	r8, r0
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 23e7a6a:	ee17 0a90 	vmov	r0, s15
    partial_data3 = partial_data1 * partial_data2;
 23e7a6e:	4689      	mov	r9, r1
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 23e7a70:	f7ff f842 	bl	23e6af8 <__aeabi_f2d>
 23e7a74:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
 23e7a78:	f7ff f896 	bl	23e6ba8 <__aeabi_dmul>
 23e7a7c:	4602      	mov	r2, r0
 23e7a7e:	460b      	mov	r3, r1
 23e7a80:	4640      	mov	r0, r8
 23e7a82:	4649      	mov	r1, r9
 23e7a84:	f7fe feda 	bl	23e683c <__adddf3>
 23e7a88:	4602      	mov	r2, r0
 23e7a8a:	460b      	mov	r3, r1
    comp_press = partial_out1 + partial_out2 + partial_data4;
 23e7a8c:	4630      	mov	r0, r6
 23e7a8e:	4639      	mov	r1, r7
 23e7a90:	f7fe fed4 	bl	23e683c <__adddf3>
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 23e7a94:	e9c5 0102 	strd	r0, r1, [r5, #8]
    int8_t rslt = BMP3_OK;
 23e7a98:	2000      	movs	r0, #0
}
 23e7a9a:	ecbd 8b06 	vpop	{d8-d10}
 23e7a9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rslt = BMP3_E_NULL_PTR;
 23e7aa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e7aa6:	e7f8      	b.n	23e7a9a <compensate_data+0x1c8>

023e7aa8 <validate_osr_and_odr_settings>:
{
 23e7aa8:	b510      	push	{r4, lr}
 23e7aaa:	4604      	mov	r4, r0
 23e7aac:	b092      	sub	sp, #72	; 0x48
    uint32_t odr[18] = {
 23e7aae:	2248      	movs	r2, #72	; 0x48
 23e7ab0:	4668      	mov	r0, sp
 23e7ab2:	4920      	ldr	r1, [pc, #128]	; (23e7b34 <validate_osr_and_odr_settings+0x8c>)
 23e7ab4:	f015 f9ba 	bl	23fce2c <memcpy>
    if (dev->settings.press_en)
 23e7ab8:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 23e7abc:	b173      	cbz	r3, 23e7adc <validate_osr_and_odr_settings+0x34>
    float pow_output = 1;
 23e7abe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 23e7ac2:	f894 30b3 	ldrb.w	r3, [r4, #179]	; 0xb3
    while (power != 0)
 23e7ac6:	bb5b      	cbnz	r3, 23e7b20 <validate_osr_and_odr_settings+0x78>
    press_meas_t = (BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 23e7ac8:	eddf 6a1b 	vldr	s13, [pc, #108]	; 23e7b38 <validate_osr_and_odr_settings+0x90>
 23e7acc:	eddf 7a1b 	vldr	s15, [pc, #108]	; 23e7b3c <validate_osr_and_odr_settings+0x94>
 23e7ad0:	eee7 7a26 	vfma.f32	s15, s14, s13
 23e7ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23e7ad8:	ee17 3a90 	vmov	r3, s15
    if (dev->settings.temp_en)
 23e7adc:	f894 20b2 	ldrb.w	r2, [r4, #178]	; 0xb2
 23e7ae0:	b17a      	cbz	r2, 23e7b02 <validate_osr_and_odr_settings+0x5a>
    float pow_output = 1;
 23e7ae2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 23e7ae6:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
    while (power != 0)
 23e7aea:	b9f2      	cbnz	r2, 23e7b2a <validate_osr_and_odr_settings+0x82>
    temp_meas_t = (BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 23e7aec:	eddf 6a12 	vldr	s13, [pc, #72]	; 23e7b38 <validate_osr_and_odr_settings+0x90>
 23e7af0:	eddf 7a13 	vldr	s15, [pc, #76]	; 23e7b40 <validate_osr_and_odr_settings+0x98>
 23e7af4:	eee7 7a26 	vfma.f32	s15, s14, s13
 23e7af8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
        meas_t_p += calculate_temp_meas_time(dev);
 23e7afc:	ee17 2a90 	vmov	r2, s15
 23e7b00:	4413      	add	r3, r2
    rslt = verify_meas_time_and_odr_duration(meas_t, odr[dev->settings.odr_filter.odr]);
 23e7b02:	f894 20b6 	ldrb.w	r2, [r4, #182]	; 0xb6
 23e7b06:	a912      	add	r1, sp, #72	; 0x48
 23e7b08:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    if (meas_t < odr_duration)
 23e7b0c:	f852 2c48 	ldr.w	r2, [r2, #-72]
    meas_t += meas_t_p;
 23e7b10:	33ea      	adds	r3, #234	; 0xea
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 23e7b12:	429a      	cmp	r2, r3
}
 23e7b14:	bf94      	ite	ls
 23e7b16:	f06f 0002 	mvnls.w	r0, #2
 23e7b1a:	2000      	movhi	r0, #0
 23e7b1c:	b012      	add	sp, #72	; 0x48
 23e7b1e:	bd10      	pop	{r4, pc}
        power--;
 23e7b20:	3b01      	subs	r3, #1
        pow_output = (float) base * pow_output;
 23e7b22:	ee37 7a07 	vadd.f32	s14, s14, s14
        power--;
 23e7b26:	b2db      	uxtb	r3, r3
 23e7b28:	e7cd      	b.n	23e7ac6 <validate_osr_and_odr_settings+0x1e>
 23e7b2a:	3a01      	subs	r2, #1
        pow_output = (float) base * pow_output;
 23e7b2c:	ee37 7a07 	vadd.f32	s14, s14, s14
        power--;
 23e7b30:	b2d2      	uxtb	r2, r2
 23e7b32:	e7da      	b.n	23e7aea <validate_osr_and_odr_settings+0x42>
 23e7b34:	023fd110 	.word	0x023fd110
 23e7b38:	44fa0000 	.word	0x44fa0000
 23e7b3c:	43c40000 	.word	0x43c40000
 23e7b40:	439c8000 	.word	0x439c8000

023e7b44 <bmp3_get_regs>:
{
 23e7b44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23e7b48:	4606      	mov	r6, r0
 23e7b4a:	af00      	add	r7, sp, #0
    rslt = null_ptr_check(dev);
 23e7b4c:	4618      	mov	r0, r3
{
 23e7b4e:	461c      	mov	r4, r3
    rslt = null_ptr_check(dev);
 23e7b50:	f7ff feaf 	bl	23e78b2 <null_ptr_check>
{
 23e7b54:	4688      	mov	r8, r1
 23e7b56:	4691      	mov	r9, r2
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 23e7b58:	4605      	mov	r5, r0
 23e7b5a:	bb88      	cbnz	r0, 23e7bc0 <bmp3_get_regs+0x7c>
 23e7b5c:	b381      	cbz	r1, 23e7bc0 <bmp3_get_regs+0x7c>
        uint32_t temp_len = len + dev->dummy_byte;
 23e7b5e:	7aa0      	ldrb	r0, [r4, #10]
        if (dev->intf != BMP3_I2C_INTF)
 23e7b60:	f894 c008 	ldrb.w	ip, [r4, #8]
        uint32_t temp_len = len + dev->dummy_byte;
 23e7b64:	4410      	add	r0, r2
        uint8_t temp_buff[len + dev->dummy_byte];
 23e7b66:	1dc3      	adds	r3, r0, #7
 23e7b68:	f023 0307 	bic.w	r3, r3, #7
    {
 23e7b6c:	46ea      	mov	sl, sp
        uint8_t temp_buff[len + dev->dummy_byte];
 23e7b6e:	ebad 0d03 	sub.w	sp, sp, r3
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 23e7b72:	68e3      	ldr	r3, [r4, #12]
        if (dev->intf != BMP3_I2C_INTF)
 23e7b74:	f1bc 0f01 	cmp.w	ip, #1
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 23e7b78:	469e      	mov	lr, r3
        uint8_t temp_buff[len + dev->dummy_byte];
 23e7b7a:	46eb      	mov	fp, sp
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 23e7b7c:	6863      	ldr	r3, [r4, #4]
        if (dev->intf != BMP3_I2C_INTF)
 23e7b7e:	d01a      	beq.n	23e7bb6 <bmp3_get_regs+0x72>
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 23e7b80:	4602      	mov	r2, r0
 23e7b82:	4669      	mov	r1, sp
 23e7b84:	f046 0080 	orr.w	r0, r6, #128	; 0x80
 23e7b88:	4676      	mov	r6, lr
 23e7b8a:	47b0      	blx	r6
 23e7b8c:	7260      	strb	r0, [r4, #9]
            for (idx = 0; idx < len; idx++)
 23e7b8e:	454d      	cmp	r5, r9
 23e7b90:	d109      	bne.n	23e7ba6 <bmp3_get_regs+0x62>
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 23e7b92:	f994 0009 	ldrsb.w	r0, [r4, #9]
 23e7b96:	46d5      	mov	sp, sl
            rslt = BMP3_E_COMM_FAIL;
 23e7b98:	2800      	cmp	r0, #0
 23e7b9a:	bf18      	it	ne
 23e7b9c:	f06f 0006 	mvnne.w	r0, #6
}
 23e7ba0:	46bd      	mov	sp, r7
 23e7ba2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 23e7ba6:	7aa3      	ldrb	r3, [r4, #10]
 23e7ba8:	eb0b 0205 	add.w	r2, fp, r5
 23e7bac:	5cd3      	ldrb	r3, [r2, r3]
 23e7bae:	f808 3005 	strb.w	r3, [r8, r5]
            for (idx = 0; idx < len; idx++)
 23e7bb2:	3501      	adds	r5, #1
 23e7bb4:	e7eb      	b.n	23e7b8e <bmp3_get_regs+0x4a>
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 23e7bb6:	4630      	mov	r0, r6
 23e7bb8:	4675      	mov	r5, lr
 23e7bba:	47a8      	blx	r5
 23e7bbc:	7260      	strb	r0, [r4, #9]
 23e7bbe:	e7e8      	b.n	23e7b92 <bmp3_get_regs+0x4e>
        rslt = BMP3_E_NULL_PTR;
 23e7bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e7bc4:	e7ec      	b.n	23e7ba0 <bmp3_get_regs+0x5c>

023e7bc6 <bmp3_set_regs>:
{
 23e7bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23e7bca:	461c      	mov	r4, r3
    uint8_t temp_buff[len * 2];
 23e7bcc:	ea4f 0842 	mov.w	r8, r2, lsl #1
 23e7bd0:	f108 0307 	add.w	r3, r8, #7
 23e7bd4:	f023 0307 	bic.w	r3, r3, #7
{
 23e7bd8:	af00      	add	r7, sp, #0
 23e7bda:	4606      	mov	r6, r0
    uint8_t temp_buff[len * 2];
 23e7bdc:	ebad 0d03 	sub.w	sp, sp, r3
    rslt = null_ptr_check(dev);
 23e7be0:	4620      	mov	r0, r4
{
 23e7be2:	460d      	mov	r5, r1
    uint8_t temp_buff[len * 2];
 23e7be4:	4669      	mov	r1, sp
    rslt = null_ptr_check(dev);
 23e7be6:	f7ff fe64 	bl	23e78b2 <null_ptr_check>
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 23e7bea:	bb70      	cbnz	r0, 23e7c4a <bmp3_set_regs+0x84>
 23e7bec:	b36e      	cbz	r6, 23e7c4a <bmp3_set_regs+0x84>
 23e7bee:	b365      	cbz	r5, 23e7c4a <bmp3_set_regs+0x84>
        if (len != 0)
 23e7bf0:	b372      	cbz	r2, 23e7c50 <bmp3_set_regs+0x8a>
            temp_buff[0] = reg_data[0];
 23e7bf2:	782b      	ldrb	r3, [r5, #0]
 23e7bf4:	f88d 3000 	strb.w	r3, [sp]
            if (dev->intf == BMP3_SPI_INTF)
 23e7bf8:	7a23      	ldrb	r3, [r4, #8]
 23e7bfa:	b303      	cbz	r3, 23e7c3e <bmp3_set_regs+0x78>
            if (len > 1)
 23e7bfc:	2a01      	cmp	r2, #1
 23e7bfe:	d00c      	beq.n	23e7c1a <bmp3_set_regs+0x54>
    for (index = 1; index < len; index++)
 23e7c00:	2301      	movs	r3, #1
        temp_buff[(index * 2) - 1] = reg_addr[index];
 23e7c02:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 23e7c06:	5cf0      	ldrb	r0, [r6, r3]
 23e7c08:	f80c 0013 	strb.w	r0, [ip, r3, lsl #1]
        temp_buff[index * 2] = reg_data[index];
 23e7c0c:	5ce8      	ldrb	r0, [r5, r3]
 23e7c0e:	f801 0013 	strb.w	r0, [r1, r3, lsl #1]
    for (index = 1; index < len; index++)
 23e7c12:	3301      	adds	r3, #1
 23e7c14:	429a      	cmp	r2, r3
 23e7c16:	d8f6      	bhi.n	23e7c06 <bmp3_set_regs+0x40>
                temp_len = len * 2;
 23e7c18:	4642      	mov	r2, r8
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 23e7c1a:	6925      	ldr	r5, [r4, #16]
 23e7c1c:	6863      	ldr	r3, [r4, #4]
 23e7c1e:	7830      	ldrb	r0, [r6, #0]
 23e7c20:	47a8      	blx	r5
                rslt = BMP3_E_COMM_FAIL;
 23e7c22:	2800      	cmp	r0, #0
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 23e7c24:	7260      	strb	r0, [r4, #9]
                rslt = BMP3_E_COMM_FAIL;
 23e7c26:	bf18      	it	ne
 23e7c28:	f06f 0006 	mvnne.w	r0, #6
}
 23e7c2c:	46bd      	mov	sp, r7
 23e7c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 23e7c32:	f816 c000 	ldrb.w	ip, [r6, r0]
 23e7c36:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
 23e7c3a:	f806 c000 	strb.w	ip, [r6, r0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 23e7c3e:	b2d8      	uxtb	r0, r3
 23e7c40:	4282      	cmp	r2, r0
 23e7c42:	f103 0301 	add.w	r3, r3, #1
 23e7c46:	d8f4      	bhi.n	23e7c32 <bmp3_set_regs+0x6c>
 23e7c48:	e7d8      	b.n	23e7bfc <bmp3_set_regs+0x36>
        rslt = BMP3_E_NULL_PTR;
 23e7c4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e7c4e:	e7ed      	b.n	23e7c2c <bmp3_set_regs+0x66>
            rslt = BMP3_E_INVALID_LEN;
 23e7c50:	f06f 0005 	mvn.w	r0, #5
 23e7c54:	e7ea      	b.n	23e7c2c <bmp3_set_regs+0x66>

023e7c56 <write_power_mode>:
{
 23e7c56:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23e7c58:	4603      	mov	r3, r0
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e7c5a:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 23e7c5c:	2201      	movs	r2, #1
 23e7c5e:	f10d 010f 	add.w	r1, sp, #15
    uint8_t op_mode = dev->settings.op_mode;
 23e7c62:	f893 40b0 	ldrb.w	r4, [r3, #176]	; 0xb0
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 23e7c66:	9301      	str	r3, [sp, #4]
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e7c68:	f88d 000e 	strb.w	r0, [sp, #14]
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 23e7c6c:	f7ff ff6a 	bl	23e7b44 <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e7c70:	9b01      	ldr	r3, [sp, #4]
 23e7c72:	b980      	cbnz	r0, 23e7c96 <write_power_mode+0x40>
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 23e7c74:	f89d 200f 	ldrb.w	r2, [sp, #15]
 23e7c78:	0124      	lsls	r4, r4, #4
 23e7c7a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 23e7c7e:	f004 0430 	and.w	r4, r4, #48	; 0x30
 23e7c82:	4322      	orrs	r2, r4
 23e7c84:	f88d 200f 	strb.w	r2, [sp, #15]
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 23e7c88:	f10d 010f 	add.w	r1, sp, #15
 23e7c8c:	2201      	movs	r2, #1
 23e7c8e:	f10d 000e 	add.w	r0, sp, #14
 23e7c92:	f7ff ff98 	bl	23e7bc6 <bmp3_set_regs>
}
 23e7c96:	b004      	add	sp, #16
 23e7c98:	bd10      	pop	{r4, pc}
	...

023e7c9c <bmp3_set_sensor_settings>:
{
 23e7c9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23e7c9e:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
 23e7ca0:	4608      	mov	r0, r1
{
 23e7ca2:	460d      	mov	r5, r1
    rslt = null_ptr_check(dev);
 23e7ca4:	f7ff fe05 	bl	23e78b2 <null_ptr_check>
    if (rslt == BMP3_OK)
 23e7ca8:	2800      	cmp	r0, #0
 23e7caa:	f040 811e 	bne.w	23e7eea <bmp3_set_sensor_settings+0x24e>
    if (sub_settings & desired_settings)
 23e7cae:	f014 0f06 	tst.w	r4, #6
 23e7cb2:	d029      	beq.n	23e7d08 <bmp3_set_sensor_settings+0x6c>
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e7cb4:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e7cb6:	460b      	mov	r3, r1
 23e7cb8:	2201      	movs	r2, #1
 23e7cba:	a901      	add	r1, sp, #4
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e7cbc:	f88d 0000 	strb.w	r0, [sp]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e7cc0:	f7ff ff40 	bl	23e7b44 <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e7cc4:	bb00      	cbnz	r0, 23e7d08 <bmp3_set_sensor_settings+0x6c>
        if (desired_settings & BMP3_SEL_PRESS_EN)
 23e7cc6:	07a7      	lsls	r7, r4, #30
 23e7cc8:	d50a      	bpl.n	23e7ce0 <bmp3_set_sensor_settings+0x44>
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, dev->settings.press_en);
 23e7cca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23e7cce:	f895 20b1 	ldrb.w	r2, [r5, #177]	; 0xb1
 23e7cd2:	f023 0301 	bic.w	r3, r3, #1
 23e7cd6:	f002 0201 	and.w	r2, r2, #1
 23e7cda:	4313      	orrs	r3, r2
 23e7cdc:	f88d 3004 	strb.w	r3, [sp, #4]
        if (desired_settings & BMP3_SEL_TEMP_EN)
 23e7ce0:	0766      	lsls	r6, r4, #29
 23e7ce2:	d50b      	bpl.n	23e7cfc <bmp3_set_sensor_settings+0x60>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, dev->settings.temp_en);
 23e7ce4:	f895 30b2 	ldrb.w	r3, [r5, #178]	; 0xb2
 23e7ce8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 23e7cec:	005b      	lsls	r3, r3, #1
 23e7cee:	f003 0302 	and.w	r3, r3, #2
 23e7cf2:	f022 0202 	bic.w	r2, r2, #2
 23e7cf6:	4313      	orrs	r3, r2
 23e7cf8:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 23e7cfc:	462b      	mov	r3, r5
 23e7cfe:	2201      	movs	r2, #1
 23e7d00:	4668      	mov	r0, sp
 23e7d02:	a901      	add	r1, sp, #4
 23e7d04:	f7ff ff5f 	bl	23e7bc6 <bmp3_set_regs>
    if (sub_settings & desired_settings)
 23e7d08:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 23e7d0c:	d072      	beq.n	23e7df4 <bmp3_set_sensor_settings+0x158>
        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings) && (!rslt))
 23e7d0e:	2800      	cmp	r0, #0
 23e7d10:	d170      	bne.n	23e7df4 <bmp3_set_sensor_settings+0x158>
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 23e7d12:	2204      	movs	r2, #4
    uint8_t reg_addr[3] = { 0 };
 23e7d14:	4b77      	ldr	r3, [pc, #476]	; (23e7ef4 <bmp3_set_sensor_settings+0x258>)
 23e7d16:	f88d 0002 	strb.w	r0, [sp, #2]
 23e7d1a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 23e7d1e:	201c      	movs	r0, #28
    uint8_t reg_addr[3] = { 0 };
 23e7d20:	f8ad 3000 	strh.w	r3, [sp]
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 23e7d24:	eb0d 0102 	add.w	r1, sp, r2
 23e7d28:	462b      	mov	r3, r5
 23e7d2a:	f7ff ff0b 	bl	23e7b44 <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e7d2e:	2800      	cmp	r0, #0
 23e7d30:	d160      	bne.n	23e7df4 <bmp3_set_sensor_settings+0x158>
    if (sub_settings & desired_settings)
 23e7d32:	f014 0f30 	tst.w	r4, #48	; 0x30
 23e7d36:	f000 80da 	beq.w	23e7eee <bmp3_set_sensor_settings+0x252>
        if (settings & BMP3_SEL_PRESS_OS)
 23e7d3a:	06e0      	lsls	r0, r4, #27
 23e7d3c:	f895 20b4 	ldrb.w	r2, [r5, #180]	; 0xb4
 23e7d40:	d50a      	bpl.n	23e7d58 <bmp3_set_sensor_settings+0xbc>
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 23e7d42:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23e7d46:	f895 10b3 	ldrb.w	r1, [r5, #179]	; 0xb3
 23e7d4a:	f023 0307 	bic.w	r3, r3, #7
 23e7d4e:	f001 0107 	and.w	r1, r1, #7
 23e7d52:	430b      	orrs	r3, r1
 23e7d54:	f88d 3004 	strb.w	r3, [sp, #4]
        if (settings & BMP3_SEL_TEMP_OS)
 23e7d58:	06a1      	lsls	r1, r4, #26
 23e7d5a:	d509      	bpl.n	23e7d70 <bmp3_set_sensor_settings+0xd4>
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 23e7d5c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23e7d60:	00d2      	lsls	r2, r2, #3
 23e7d62:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 23e7d66:	f002 0238 	and.w	r2, r2, #56	; 0x38
 23e7d6a:	4313      	orrs	r3, r2
 23e7d6c:	f88d 3004 	strb.w	r3, [sp, #4]
        addr[*len] = BMP3_REG_OSR;
 23e7d70:	231c      	movs	r3, #28
}
 23e7d72:	2601      	movs	r6, #1
        addr[*len] = BMP3_REG_OSR;
 23e7d74:	f88d 3000 	strb.w	r3, [sp]
    if (sub_settings & desired_settings)
 23e7d78:	0622      	lsls	r2, r4, #24
 23e7d7a:	d518      	bpl.n	23e7dae <bmp3_set_sensor_settings+0x112>
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 23e7d7c:	f895 30b6 	ldrb.w	r3, [r5, #182]	; 0xb6
 23e7d80:	2b11      	cmp	r3, #17
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 23e7d82:	bf84      	itt	hi
 23e7d84:	2311      	movhi	r3, #17
 23e7d86:	f885 30b6 	strbhi.w	r3, [r5, #182]	; 0xb6
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 23e7d8a:	ab02      	add	r3, sp, #8
 23e7d8c:	1999      	adds	r1, r3, r6
 23e7d8e:	f895 20b6 	ldrb.w	r2, [r5, #182]	; 0xb6
 23e7d92:	f89d 3005 	ldrb.w	r3, [sp, #5]
 23e7d96:	f002 021f 	and.w	r2, r2, #31
 23e7d9a:	f023 031f 	bic.w	r3, r3, #31
 23e7d9e:	4313      	orrs	r3, r2
 23e7da0:	f801 3c04 	strb.w	r3, [r1, #-4]
    addr[*len] = BMP3_REG_ODR;
 23e7da4:	231d      	movs	r3, #29
    (*len)++;
 23e7da6:	3601      	adds	r6, #1
    addr[*len] = BMP3_REG_ODR;
 23e7da8:	f801 3c08 	strb.w	r3, [r1, #-8]
    (*len)++;
 23e7dac:	b2f6      	uxtb	r6, r6
    if (sub_settings & desired_settings)
 23e7dae:	0663      	lsls	r3, r4, #25
 23e7db0:	d512      	bpl.n	23e7dd8 <bmp3_set_sensor_settings+0x13c>
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 23e7db2:	ab02      	add	r3, sp, #8
 23e7db4:	1999      	adds	r1, r3, r6
 23e7db6:	f895 30b5 	ldrb.w	r3, [r5, #181]	; 0xb5
 23e7dba:	f89d 2007 	ldrb.w	r2, [sp, #7]
 23e7dbe:	005b      	lsls	r3, r3, #1
 23e7dc0:	f003 030e 	and.w	r3, r3, #14
 23e7dc4:	f022 020e 	bic.w	r2, r2, #14
 23e7dc8:	4313      	orrs	r3, r2
 23e7dca:	f801 3c04 	strb.w	r3, [r1, #-4]
    addr[*len] = BMP3_REG_CONFIG;
 23e7dce:	231f      	movs	r3, #31
    (*len)++;
 23e7dd0:	3601      	adds	r6, #1
    addr[*len] = BMP3_REG_CONFIG;
 23e7dd2:	f801 3c08 	strb.w	r3, [r1, #-8]
    (*len)++;
 23e7dd6:	b2f6      	uxtb	r6, r6
        if (dev->settings.op_mode == BMP3_MODE_NORMAL)
 23e7dd8:	f895 30b0 	ldrb.w	r3, [r5, #176]	; 0xb0
 23e7ddc:	2b03      	cmp	r3, #3
 23e7dde:	d103      	bne.n	23e7de8 <bmp3_set_sensor_settings+0x14c>
            rslt = validate_osr_and_odr_settings(dev);
 23e7de0:	4628      	mov	r0, r5
 23e7de2:	f7ff fe61 	bl	23e7aa8 <validate_osr_and_odr_settings>
        if (rslt == BMP3_OK)
 23e7de6:	b928      	cbnz	r0, 23e7df4 <bmp3_set_sensor_settings+0x158>
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 23e7de8:	462b      	mov	r3, r5
 23e7dea:	4632      	mov	r2, r6
 23e7dec:	4668      	mov	r0, sp
 23e7dee:	a901      	add	r1, sp, #4
 23e7df0:	f7ff fee9 	bl	23e7bc6 <bmp3_set_regs>
    if (sub_settings & desired_settings)
 23e7df4:	f414 6fe1 	tst.w	r4, #1800	; 0x708
 23e7df8:	d048      	beq.n	23e7e8c <bmp3_set_sensor_settings+0x1f0>
        if (are_settings_changed(BMP3_INT_CTRL, desired_settings) && (!rslt))
 23e7dfa:	2800      	cmp	r0, #0
 23e7dfc:	d146      	bne.n	23e7e8c <bmp3_set_sensor_settings+0x1f0>
    reg_addr = BMP3_REG_INT_CTRL;
 23e7dfe:	2019      	movs	r0, #25
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e7e00:	462b      	mov	r3, r5
 23e7e02:	2201      	movs	r2, #1
 23e7e04:	4669      	mov	r1, sp
    reg_addr = BMP3_REG_INT_CTRL;
 23e7e06:	f88d 0004 	strb.w	r0, [sp, #4]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e7e0a:	f7ff fe9b 	bl	23e7b44 <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e7e0e:	2800      	cmp	r0, #0
 23e7e10:	d13c      	bne.n	23e7e8c <bmp3_set_sensor_settings+0x1f0>
        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 23e7e12:	05e7      	lsls	r7, r4, #23
        int_settings = dev->settings.int_settings;
 23e7e14:	f895 00b8 	ldrb.w	r0, [r5, #184]	; 0xb8
 23e7e18:	f895 10b9 	ldrb.w	r1, [r5, #185]	; 0xb9
 23e7e1c:	f895 20ba 	ldrb.w	r2, [r5, #186]	; 0xba
        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 23e7e20:	d50a      	bpl.n	23e7e38 <bmp3_set_sensor_settings+0x19c>
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 23e7e22:	f89d 3000 	ldrb.w	r3, [sp]
 23e7e26:	f895 60b7 	ldrb.w	r6, [r5, #183]	; 0xb7
 23e7e2a:	f023 0301 	bic.w	r3, r3, #1
 23e7e2e:	f006 0601 	and.w	r6, r6, #1
 23e7e32:	4333      	orrs	r3, r6
 23e7e34:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_LEVEL)
 23e7e38:	05a6      	lsls	r6, r4, #22
 23e7e3a:	d509      	bpl.n	23e7e50 <bmp3_set_sensor_settings+0x1b4>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 23e7e3c:	f89d 3000 	ldrb.w	r3, [sp]
 23e7e40:	0040      	lsls	r0, r0, #1
 23e7e42:	f023 0302 	bic.w	r3, r3, #2
 23e7e46:	f000 0002 	and.w	r0, r0, #2
 23e7e4a:	4303      	orrs	r3, r0
 23e7e4c:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_LATCH)
 23e7e50:	0560      	lsls	r0, r4, #21
 23e7e52:	d509      	bpl.n	23e7e68 <bmp3_set_sensor_settings+0x1cc>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 23e7e54:	f89d 3000 	ldrb.w	r3, [sp]
 23e7e58:	0089      	lsls	r1, r1, #2
 23e7e5a:	f023 0304 	bic.w	r3, r3, #4
 23e7e5e:	f001 0104 	and.w	r1, r1, #4
 23e7e62:	430b      	orrs	r3, r1
 23e7e64:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_DRDY_EN)
 23e7e68:	0721      	lsls	r1, r4, #28
 23e7e6a:	d509      	bpl.n	23e7e80 <bmp3_set_sensor_settings+0x1e4>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 23e7e6c:	f89d 3000 	ldrb.w	r3, [sp]
 23e7e70:	0192      	lsls	r2, r2, #6
 23e7e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 23e7e76:	f002 0240 	and.w	r2, r2, #64	; 0x40
 23e7e7a:	4313      	orrs	r3, r2
 23e7e7c:	f88d 3000 	strb.w	r3, [sp]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 23e7e80:	462b      	mov	r3, r5
 23e7e82:	2201      	movs	r2, #1
 23e7e84:	4669      	mov	r1, sp
 23e7e86:	a801      	add	r0, sp, #4
 23e7e88:	f7ff fe9d 	bl	23e7bc6 <bmp3_set_regs>
    if (sub_settings & desired_settings)
 23e7e8c:	f414 5fc0 	tst.w	r4, #6144	; 0x1800
 23e7e90:	d02b      	beq.n	23e7eea <bmp3_set_sensor_settings+0x24e>
        if (are_settings_changed(BMP3_ADV_SETT, desired_settings) && (!rslt))
 23e7e92:	bb50      	cbnz	r0, 23e7eea <bmp3_set_sensor_settings+0x24e>
    reg_addr = BMP3_REG_IF_CONF;
 23e7e94:	201a      	movs	r0, #26
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e7e96:	462b      	mov	r3, r5
 23e7e98:	2201      	movs	r2, #1
 23e7e9a:	a901      	add	r1, sp, #4
    struct bmp3_adv_settings adv_settings = dev->settings.adv_settings;
 23e7e9c:	f895 70bb 	ldrb.w	r7, [r5, #187]	; 0xbb
 23e7ea0:	f895 60bc 	ldrb.w	r6, [r5, #188]	; 0xbc
    reg_addr = BMP3_REG_IF_CONF;
 23e7ea4:	f88d 0000 	strb.w	r0, [sp]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e7ea8:	f7ff fe4c 	bl	23e7b44 <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e7eac:	b9e8      	cbnz	r0, 23e7eea <bmp3_set_sensor_settings+0x24e>
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 23e7eae:	0522      	lsls	r2, r4, #20
 23e7eb0:	d509      	bpl.n	23e7ec6 <bmp3_set_sensor_settings+0x22a>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 23e7eb2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23e7eb6:	007f      	lsls	r7, r7, #1
 23e7eb8:	f023 0302 	bic.w	r3, r3, #2
 23e7ebc:	f007 0702 	and.w	r7, r7, #2
 23e7ec0:	433b      	orrs	r3, r7
 23e7ec2:	f88d 3004 	strb.w	r3, [sp, #4]
        if (desired_settings & BMP3_SEL_I2C_WDT)
 23e7ec6:	04e3      	lsls	r3, r4, #19
 23e7ec8:	d509      	bpl.n	23e7ede <bmp3_set_sensor_settings+0x242>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 23e7eca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23e7ece:	00b6      	lsls	r6, r6, #2
 23e7ed0:	f023 0304 	bic.w	r3, r3, #4
 23e7ed4:	f006 0604 	and.w	r6, r6, #4
 23e7ed8:	4333      	orrs	r3, r6
 23e7eda:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 23e7ede:	462b      	mov	r3, r5
 23e7ee0:	2201      	movs	r2, #1
 23e7ee2:	4668      	mov	r0, sp
 23e7ee4:	a901      	add	r1, sp, #4
 23e7ee6:	f7ff fe6e 	bl	23e7bc6 <bmp3_set_regs>
}
 23e7eea:	b003      	add	sp, #12
 23e7eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t len = 0;
 23e7eee:	4606      	mov	r6, r0
 23e7ef0:	e742      	b.n	23e7d78 <bmp3_set_sensor_settings+0xdc>
 23e7ef2:	bf00      	nop
 23e7ef4:	023fd110 	.word	0x023fd110

023e7ef8 <bmp3_soft_reset>:
    uint8_t reg_addr = BMP3_REG_CMD;
 23e7ef8:	237e      	movs	r3, #126	; 0x7e
{
 23e7efa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t reg_addr = BMP3_REG_CMD;
 23e7efc:	f88d 3004 	strb.w	r3, [sp, #4]
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 23e7f00:	23b6      	movs	r3, #182	; 0xb6
{
 23e7f02:	4605      	mov	r5, r0
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 23e7f04:	f88d 3005 	strb.w	r3, [sp, #5]
    rslt = null_ptr_check(dev);
 23e7f08:	f7ff fcd3 	bl	23e78b2 <null_ptr_check>
    if (rslt == BMP3_OK)
 23e7f0c:	4604      	mov	r4, r0
 23e7f0e:	b960      	cbnz	r0, 23e7f2a <bmp3_soft_reset+0x32>
        rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 23e7f10:	462b      	mov	r3, r5
 23e7f12:	2201      	movs	r2, #1
 23e7f14:	2003      	movs	r0, #3
 23e7f16:	f10d 0106 	add.w	r1, sp, #6
 23e7f1a:	f7ff fe13 	bl	23e7b44 <bmp3_get_regs>
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 23e7f1e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 23e7f22:	06db      	lsls	r3, r3, #27
 23e7f24:	d404      	bmi.n	23e7f30 <bmp3_soft_reset+0x38>
            rslt = BMP3_E_CMD_EXEC_FAILED;
 23e7f26:	f06f 0403 	mvn.w	r4, #3
}
 23e7f2a:	4620      	mov	r0, r4
 23e7f2c:	b003      	add	sp, #12
 23e7f2e:	bd30      	pop	{r4, r5, pc}
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 23e7f30:	2800      	cmp	r0, #0
 23e7f32:	d1f8      	bne.n	23e7f26 <bmp3_soft_reset+0x2e>
            rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 23e7f34:	462b      	mov	r3, r5
 23e7f36:	2201      	movs	r2, #1
 23e7f38:	f10d 0105 	add.w	r1, sp, #5
 23e7f3c:	a801      	add	r0, sp, #4
 23e7f3e:	f7ff fe42 	bl	23e7bc6 <bmp3_set_regs>
            if (rslt == BMP3_OK)
 23e7f42:	4604      	mov	r4, r0
 23e7f44:	2800      	cmp	r0, #0
 23e7f46:	d1f0      	bne.n	23e7f2a <bmp3_soft_reset+0x32>
                dev->delay_us(2000, dev->intf_ptr);
 23e7f48:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23e7f4c:	696b      	ldr	r3, [r5, #20]
 23e7f4e:	6869      	ldr	r1, [r5, #4]
 23e7f50:	4798      	blx	r3
                rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 23e7f52:	462b      	mov	r3, r5
 23e7f54:	2201      	movs	r2, #1
 23e7f56:	2002      	movs	r0, #2
 23e7f58:	f10d 0107 	add.w	r1, sp, #7
 23e7f5c:	f7ff fdf2 	bl	23e7b44 <bmp3_get_regs>
                if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 23e7f60:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23e7f64:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 23e7f68:	4318      	orrs	r0, r3
 23e7f6a:	b2c0      	uxtb	r0, r0
 23e7f6c:	2800      	cmp	r0, #0
 23e7f6e:	d0dc      	beq.n	23e7f2a <bmp3_soft_reset+0x32>
 23e7f70:	e7d9      	b.n	23e7f26 <bmp3_soft_reset+0x2e>
	...

023e7f74 <bmp3_init>:
    uint8_t chip_id = 0;
 23e7f74:	2300      	movs	r3, #0
{
 23e7f76:	b530      	push	{r4, r5, lr}
 23e7f78:	b089      	sub	sp, #36	; 0x24
 23e7f7a:	4604      	mov	r4, r0
    uint8_t chip_id = 0;
 23e7f7c:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_ptr_check(dev);
 23e7f80:	f7ff fc97 	bl	23e78b2 <null_ptr_check>
    if (rslt == BMP3_OK)
 23e7f84:	4605      	mov	r5, r0
 23e7f86:	2800      	cmp	r0, #0
 23e7f88:	f040 80d8 	bne.w	23e813c <bmp3_init+0x1c8>
        if (dev->intf != BMP3_I2C_INTF)
 23e7f8c:	7a23      	ldrb	r3, [r4, #8]
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 23e7f8e:	2201      	movs	r2, #1
        if (dev->intf != BMP3_I2C_INTF)
 23e7f90:	3b01      	subs	r3, #1
 23e7f92:	bf18      	it	ne
 23e7f94:	2301      	movne	r3, #1
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 23e7f96:	f10d 0107 	add.w	r1, sp, #7
        if (dev->intf != BMP3_I2C_INTF)
 23e7f9a:	72a3      	strb	r3, [r4, #10]
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 23e7f9c:	4623      	mov	r3, r4
 23e7f9e:	f7ff fdd1 	bl	23e7b44 <bmp3_get_regs>
        if (rslt == BMP3_OK)
 23e7fa2:	4605      	mov	r5, r0
 23e7fa4:	2800      	cmp	r0, #0
 23e7fa6:	f040 80c9 	bne.w	23e813c <bmp3_init+0x1c8>
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 23e7faa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23e7fae:	2b50      	cmp	r3, #80	; 0x50
 23e7fb0:	d002      	beq.n	23e7fb8 <bmp3_init+0x44>
 23e7fb2:	2b60      	cmp	r3, #96	; 0x60
 23e7fb4:	f040 80c5 	bne.w	23e8142 <bmp3_init+0x1ce>
                rslt = bmp3_soft_reset(dev);
 23e7fb8:	4620      	mov	r0, r4
                dev->chip_id = chip_id;
 23e7fba:	7023      	strb	r3, [r4, #0]
                rslt = bmp3_soft_reset(dev);
 23e7fbc:	f7ff ff9c 	bl	23e7ef8 <bmp3_soft_reset>
                if (rslt == BMP3_OK)
 23e7fc0:	4605      	mov	r5, r0
 23e7fc2:	2800      	cmp	r0, #0
 23e7fc4:	f040 80ba 	bne.w	23e813c <bmp3_init+0x1c8>
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 23e7fc8:	4601      	mov	r1, r0
 23e7fca:	2211      	movs	r2, #17
 23e7fcc:	9002      	str	r0, [sp, #8]
 23e7fce:	a803      	add	r0, sp, #12
 23e7fd0:	f014 ff39 	bl	23fce46 <memset>
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 23e7fd4:	4623      	mov	r3, r4
 23e7fd6:	2215      	movs	r2, #21
 23e7fd8:	a902      	add	r1, sp, #8
 23e7fda:	2031      	movs	r0, #49	; 0x31
 23e7fdc:	f7ff fdb2 	bl	23e7b44 <bmp3_get_regs>
 23e7fe0:	4605      	mov	r5, r0
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 23e7fe2:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 23e7fe6:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 23e7fea:	f7fe fd63 	bl	23e6ab4 <__aeabi_ui2d>
 23e7fee:	2200      	movs	r2, #0
 23e7ff0:	4b55      	ldr	r3, [pc, #340]	; (23e8148 <bmp3_init+0x1d4>)
 23e7ff2:	f7fe fdd9 	bl	23e6ba8 <__aeabi_dmul>
 23e7ff6:	e9c4 0106 	strd	r0, r1, [r4, #24]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 23e7ffa:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 23e7ffe:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 23e8002:	f7fe fd57 	bl	23e6ab4 <__aeabi_ui2d>
 23e8006:	2200      	movs	r2, #0
 23e8008:	4b50      	ldr	r3, [pc, #320]	; (23e814c <bmp3_init+0x1d8>)
 23e800a:	f7fe fdcd 	bl	23e6ba8 <__aeabi_dmul>
 23e800e:	e9c4 0108 	strd	r0, r1, [r4, #32]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 23e8012:	f99d 000c 	ldrsb.w	r0, [sp, #12]
 23e8016:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 23e801a:	f7fe fd5b 	bl	23e6ad4 <__aeabi_i2d>
 23e801e:	2200      	movs	r2, #0
 23e8020:	4b4b      	ldr	r3, [pc, #300]	; (23e8150 <bmp3_init+0x1dc>)
 23e8022:	f7fe fdc1 	bl	23e6ba8 <__aeabi_dmul>
 23e8026:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 23e802a:	f9bd 000d 	ldrsh.w	r0, [sp, #13]
 23e802e:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 23e8032:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 23e8036:	f7fe fd4d 	bl	23e6ad4 <__aeabi_i2d>
 23e803a:	2200      	movs	r2, #0
 23e803c:	4b45      	ldr	r3, [pc, #276]	; (23e8154 <bmp3_init+0x1e0>)
 23e803e:	f7fe fdb3 	bl	23e6ba8 <__aeabi_dmul>
 23e8042:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 23e8046:	f9bd 000f 	ldrsh.w	r0, [sp, #15]
 23e804a:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 23e804e:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 23e8052:	f7fe fd3f 	bl	23e6ad4 <__aeabi_i2d>
 23e8056:	2200      	movs	r2, #0
 23e8058:	4b3f      	ldr	r3, [pc, #252]	; (23e8158 <bmp3_init+0x1e4>)
 23e805a:	f7fe fda5 	bl	23e6ba8 <__aeabi_dmul>
 23e805e:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 23e8062:	f99d 0011 	ldrsb.w	r0, [sp, #17]
 23e8066:	f884 009a 	strb.w	r0, [r4, #154]	; 0x9a
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 23e806a:	f7fe fd33 	bl	23e6ad4 <__aeabi_i2d>
 23e806e:	2200      	movs	r2, #0
 23e8070:	4b3a      	ldr	r3, [pc, #232]	; (23e815c <bmp3_init+0x1e8>)
 23e8072:	f7fe fd99 	bl	23e6ba8 <__aeabi_dmul>
 23e8076:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 23e807a:	f99d 0012 	ldrsb.w	r0, [sp, #18]
 23e807e:	f884 009b 	strb.w	r0, [r4, #155]	; 0x9b
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 23e8082:	f7fe fd27 	bl	23e6ad4 <__aeabi_i2d>
 23e8086:	2200      	movs	r2, #0
 23e8088:	4b35      	ldr	r3, [pc, #212]	; (23e8160 <bmp3_init+0x1ec>)
 23e808a:	f7fe fd8d 	bl	23e6ba8 <__aeabi_dmul>
 23e808e:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 23e8092:	f8bd 0013 	ldrh.w	r0, [sp, #19]
 23e8096:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 23e809a:	f7fe fd0b 	bl	23e6ab4 <__aeabi_ui2d>
 23e809e:	2200      	movs	r2, #0
 23e80a0:	4b30      	ldr	r3, [pc, #192]	; (23e8164 <bmp3_init+0x1f0>)
 23e80a2:	f7fe fd81 	bl	23e6ba8 <__aeabi_dmul>
 23e80a6:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 23e80aa:	f8bd 0015 	ldrh.w	r0, [sp, #21]
 23e80ae:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 23e80b2:	f7fe fcff 	bl	23e6ab4 <__aeabi_ui2d>
 23e80b6:	2200      	movs	r2, #0
 23e80b8:	4b2b      	ldr	r3, [pc, #172]	; (23e8168 <bmp3_init+0x1f4>)
 23e80ba:	f7fe fd75 	bl	23e6ba8 <__aeabi_dmul>
 23e80be:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 23e80c2:	f99d 0017 	ldrsb.w	r0, [sp, #23]
 23e80c6:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 23e80ca:	f7fe fd03 	bl	23e6ad4 <__aeabi_i2d>
 23e80ce:	2200      	movs	r2, #0
 23e80d0:	4b26      	ldr	r3, [pc, #152]	; (23e816c <bmp3_init+0x1f8>)
 23e80d2:	f7fe fd69 	bl	23e6ba8 <__aeabi_dmul>
 23e80d6:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 23e80da:	f99d 0018 	ldrsb.w	r0, [sp, #24]
 23e80de:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 23e80e2:	f7fe fcf7 	bl	23e6ad4 <__aeabi_i2d>
 23e80e6:	2200      	movs	r2, #0
 23e80e8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 23e80ec:	f7fe fd5c 	bl	23e6ba8 <__aeabi_dmul>
 23e80f0:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 23e80f4:	f9bd 0019 	ldrsh.w	r0, [sp, #25]
 23e80f8:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 23e80fc:	f7fe fcea 	bl	23e6ad4 <__aeabi_i2d>
 23e8100:	2200      	movs	r2, #0
 23e8102:	4b13      	ldr	r3, [pc, #76]	; (23e8150 <bmp3_init+0x1dc>)
 23e8104:	f7fe fd50 	bl	23e6ba8 <__aeabi_dmul>
 23e8108:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 23e810c:	f99d 001b 	ldrsb.w	r0, [sp, #27]
 23e8110:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 23e8114:	f7fe fcde 	bl	23e6ad4 <__aeabi_i2d>
 23e8118:	2200      	movs	r2, #0
 23e811a:	4b0d      	ldr	r3, [pc, #52]	; (23e8150 <bmp3_init+0x1dc>)
 23e811c:	f7fe fd44 	bl	23e6ba8 <__aeabi_dmul>
 23e8120:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 23e8124:	f99d 001c 	ldrsb.w	r0, [sp, #28]
 23e8128:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 23e812c:	f7fe fcd2 	bl	23e6ad4 <__aeabi_i2d>
 23e8130:	2200      	movs	r2, #0
 23e8132:	4b0f      	ldr	r3, [pc, #60]	; (23e8170 <bmp3_init+0x1fc>)
 23e8134:	f7fe fd38 	bl	23e6ba8 <__aeabi_dmul>
 23e8138:	e9c4 0120 	strd	r0, r1, [r4, #128]	; 0x80
}
 23e813c:	4628      	mov	r0, r5
 23e813e:	b009      	add	sp, #36	; 0x24
 23e8140:	bd30      	pop	{r4, r5, pc}
                rslt = BMP3_E_DEV_NOT_FOUND;
 23e8142:	f06f 0501 	mvn.w	r5, #1
 23e8146:	e7f9      	b.n	23e813c <bmp3_init+0x1c8>
 23e8148:	40700000 	.word	0x40700000
 23e814c:	3e100000 	.word	0x3e100000
 23e8150:	3cf00000 	.word	0x3cf00000
 23e8154:	3eb00000 	.word	0x3eb00000
 23e8158:	3e200000 	.word	0x3e200000
 23e815c:	3df00000 	.word	0x3df00000
 23e8160:	3da00000 	.word	0x3da00000
 23e8164:	40200000 	.word	0x40200000
 23e8168:	3f900000 	.word	0x3f900000
 23e816c:	3f700000 	.word	0x3f700000
 23e8170:	3be00000 	.word	0x3be00000

023e8174 <bmp3_get_op_mode>:
{
 23e8174:	b513      	push	{r0, r1, r4, lr}
 23e8176:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
 23e8178:	4608      	mov	r0, r1
 23e817a:	9101      	str	r1, [sp, #4]
 23e817c:	f7ff fb99 	bl	23e78b2 <null_ptr_check>
    if ((rslt == BMP3_OK) && (op_mode != NULL))
 23e8180:	b960      	cbnz	r0, 23e819c <bmp3_get_op_mode+0x28>
 23e8182:	b15c      	cbz	r4, 23e819c <bmp3_get_op_mode+0x28>
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 23e8184:	460b      	mov	r3, r1
 23e8186:	2201      	movs	r2, #1
 23e8188:	4621      	mov	r1, r4
 23e818a:	201b      	movs	r0, #27
 23e818c:	f7ff fcda 	bl	23e7b44 <bmp3_get_regs>
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 23e8190:	7823      	ldrb	r3, [r4, #0]
 23e8192:	f3c3 1301 	ubfx	r3, r3, #4, #2
 23e8196:	7023      	strb	r3, [r4, #0]
}
 23e8198:	b002      	add	sp, #8
 23e819a:	bd10      	pop	{r4, pc}
        rslt = BMP3_E_NULL_PTR;
 23e819c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e81a0:	e7fa      	b.n	23e8198 <bmp3_get_op_mode+0x24>

023e81a2 <bmp3_set_op_mode>:
{
 23e81a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23e81a4:	4605      	mov	r5, r0
    rslt = null_ptr_check(dev);
 23e81a6:	f7ff fb84 	bl	23e78b2 <null_ptr_check>
    if (rslt == BMP3_OK)
 23e81aa:	4604      	mov	r4, r0
 23e81ac:	2800      	cmp	r0, #0
 23e81ae:	d163      	bne.n	23e8278 <bmp3_set_op_mode+0xd6>
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 23e81b0:	4629      	mov	r1, r5
 23e81b2:	f10d 0002 	add.w	r0, sp, #2
        uint8_t curr_mode = dev->settings.op_mode;
 23e81b6:	f895 60b0 	ldrb.w	r6, [r5, #176]	; 0xb0
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 23e81ba:	f7ff ffdb 	bl	23e8174 <bmp3_get_op_mode>
        if (last_set_mode != BMP3_MODE_SLEEP)
 23e81be:	f89d 3002 	ldrb.w	r3, [sp, #2]
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 23e81c2:	4604      	mov	r4, r0
        if (last_set_mode != BMP3_MODE_SLEEP)
 23e81c4:	b1e3      	cbz	r3, 23e8200 <bmp3_set_op_mode+0x5e>
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e81c6:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 23e81c8:	462b      	mov	r3, r5
 23e81ca:	2201      	movs	r2, #1
 23e81cc:	a901      	add	r1, sp, #4
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e81ce:	f88d 0003 	strb.w	r0, [sp, #3]
    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 23e81d2:	f7ff fcb7 	bl	23e7b44 <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e81d6:	4604      	mov	r4, r0
 23e81d8:	b968      	cbnz	r0, 23e81f6 <bmp3_set_op_mode+0x54>
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 23e81da:	f89d 3004 	ldrb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 23e81de:	2201      	movs	r2, #1
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 23e81e0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 23e81e4:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 23e81e8:	a901      	add	r1, sp, #4
 23e81ea:	462b      	mov	r3, r5
 23e81ec:	f10d 0003 	add.w	r0, sp, #3
 23e81f0:	f7ff fce9 	bl	23e7bc6 <bmp3_set_regs>
 23e81f4:	4604      	mov	r4, r0
            dev->delay_us(5000, dev->intf_ptr);
 23e81f6:	f241 3088 	movw	r0, #5000	; 0x1388
 23e81fa:	696b      	ldr	r3, [r5, #20]
 23e81fc:	6869      	ldr	r1, [r5, #4]
 23e81fe:	4798      	blx	r3
        if (rslt == BMP3_OK)
 23e8200:	bbd4      	cbnz	r4, 23e8278 <bmp3_set_op_mode+0xd6>
            if (curr_mode == BMP3_MODE_NORMAL)
 23e8202:	2e03      	cmp	r6, #3
 23e8204:	d13b      	bne.n	23e827e <bmp3_set_op_mode+0xdc>
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 23e8206:	2204      	movs	r2, #4
 23e8208:	462b      	mov	r3, r5
 23e820a:	eb0d 0102 	add.w	r1, sp, r2
 23e820e:	201c      	movs	r0, #28
 23e8210:	f7ff fc98 	bl	23e7b44 <bmp3_get_regs>
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 23e8214:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if (rslt == BMP3_OK)
 23e8218:	4604      	mov	r4, r0
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 23e821a:	f003 0207 	and.w	r2, r3, #7
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 23e821e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 23e8222:	f885 30b4 	strb.w	r3, [r5, #180]	; 0xb4
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 23e8226:	f89d 3005 	ldrb.w	r3, [sp, #5]
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 23e822a:	f885 20b3 	strb.w	r2, [r5, #179]	; 0xb3
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 23e822e:	f003 031f 	and.w	r3, r3, #31
 23e8232:	f885 30b6 	strb.w	r3, [r5, #182]	; 0xb6
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 23e8236:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23e823a:	f3c3 0342 	ubfx	r3, r3, #1, #3
 23e823e:	f885 30b5 	strb.w	r3, [r5, #181]	; 0xb5
    if (rslt == BMP3_OK)
 23e8242:	b9c8      	cbnz	r0, 23e8278 <bmp3_set_op_mode+0xd6>
        rslt = validate_osr_and_odr_settings(dev);
 23e8244:	4628      	mov	r0, r5
 23e8246:	f7ff fc2f 	bl	23e7aa8 <validate_osr_and_odr_settings>
    if (rslt == BMP3_OK)
 23e824a:	4604      	mov	r4, r0
 23e824c:	b9a0      	cbnz	r0, 23e8278 <bmp3_set_op_mode+0xd6>
        rslt = write_power_mode(dev);
 23e824e:	4628      	mov	r0, r5
 23e8250:	f7ff fd01 	bl	23e7c56 <write_power_mode>
        if (rslt == BMP3_OK)
 23e8254:	4604      	mov	r4, r0
 23e8256:	b978      	cbnz	r0, 23e8278 <bmp3_set_op_mode+0xd6>
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 23e8258:	462b      	mov	r3, r5
 23e825a:	2201      	movs	r2, #1
 23e825c:	2002      	movs	r0, #2
 23e825e:	a901      	add	r1, sp, #4
 23e8260:	f7ff fc70 	bl	23e7b44 <bmp3_get_regs>
            if (rslt == BMP3_OK)
 23e8264:	4604      	mov	r4, r0
 23e8266:	b938      	cbnz	r0, 23e8278 <bmp3_set_op_mode+0xd6>
                if (conf_err_status & BMP3_ERR_CONF)
 23e8268:	f89d 3004 	ldrb.w	r3, [sp, #4]
                    rslt = BMP3_E_CONFIGURATION_ERR;
 23e826c:	f013 0f04 	tst.w	r3, #4
 23e8270:	bf0c      	ite	eq
 23e8272:	4604      	moveq	r4, r0
 23e8274:	f06f 0404 	mvnne.w	r4, #4
}
 23e8278:	4620      	mov	r0, r4
 23e827a:	b002      	add	sp, #8
 23e827c:	bd70      	pop	{r4, r5, r6, pc}
            else if (curr_mode == BMP3_MODE_FORCED)
 23e827e:	2e01      	cmp	r6, #1
 23e8280:	d1fa      	bne.n	23e8278 <bmp3_set_op_mode+0xd6>
                rslt = write_power_mode(dev);
 23e8282:	4628      	mov	r0, r5
 23e8284:	f7ff fce7 	bl	23e7c56 <write_power_mode>
 23e8288:	4604      	mov	r4, r0
    return rslt;
 23e828a:	e7f5      	b.n	23e8278 <bmp3_set_op_mode+0xd6>

023e828c <bmp3_get_sensor_data>:
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 23e828c:	2300      	movs	r3, #0
{
 23e828e:	b5f0      	push	{r4, r5, r6, r7, lr}
 23e8290:	4606      	mov	r6, r0
 23e8292:	b085      	sub	sp, #20
    rslt = null_ptr_check(dev);
 23e8294:	4610      	mov	r0, r2
{
 23e8296:	460d      	mov	r5, r1
 23e8298:	4617      	mov	r7, r2
    struct bmp3_uncomp_data uncomp_data = { 0 };
 23e829a:	e9cd 3302 	strd	r3, r3, [sp, #8]
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 23e829e:	9300      	str	r3, [sp, #0]
 23e82a0:	f8ad 3004 	strh.w	r3, [sp, #4]
    rslt = null_ptr_check(dev);
 23e82a4:	f7ff fb05 	bl	23e78b2 <null_ptr_check>
    if ((rslt == BMP3_OK) && (comp_data != NULL))
 23e82a8:	bb30      	cbnz	r0, 23e82f8 <bmp3_get_sensor_data+0x6c>
 23e82aa:	b329      	cbz	r1, 23e82f8 <bmp3_get_sensor_data+0x6c>
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 23e82ac:	4613      	mov	r3, r2
 23e82ae:	4669      	mov	r1, sp
 23e82b0:	2206      	movs	r2, #6
 23e82b2:	2004      	movs	r0, #4
 23e82b4:	f7ff fc46 	bl	23e7b44 <bmp3_get_regs>
        if (rslt == BMP3_OK)
 23e82b8:	b9e0      	cbnz	r0, 23e82f4 <bmp3_get_sensor_data+0x68>
    data_msb = (uint32_t)reg_data[2] << 16;
 23e82ba:	f89d 3002 	ldrb.w	r3, [sp, #2]
    data_lsb = (uint32_t)reg_data[1] << 8;
 23e82be:	f89d 2001 	ldrb.w	r2, [sp, #1]
    data_msb = (uint32_t)reg_data[2] << 16;
 23e82c2:	041b      	lsls	r3, r3, #16
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 23e82c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    data_xlsb = (uint32_t)reg_data[0];
 23e82c8:	f89d 2000 	ldrb.w	r2, [sp]
    data_msb = (uint32_t)reg_data[5] << 16;
 23e82cc:	f89d 4005 	ldrb.w	r4, [sp, #5]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 23e82d0:	4313      	orrs	r3, r2
 23e82d2:	9302      	str	r3, [sp, #8]
    data_lsb = (uint32_t)reg_data[4] << 8;
 23e82d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
    data_msb = (uint32_t)reg_data[5] << 16;
 23e82d8:	0424      	lsls	r4, r4, #16
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 23e82da:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    data_xlsb = (uint32_t)reg_data[3];
 23e82de:	f89d 3003 	ldrb.w	r3, [sp, #3]
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 23e82e2:	462a      	mov	r2, r5
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 23e82e4:	431c      	orrs	r4, r3
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 23e82e6:	4630      	mov	r0, r6
 23e82e8:	f107 0318 	add.w	r3, r7, #24
 23e82ec:	a902      	add	r1, sp, #8
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 23e82ee:	9403      	str	r4, [sp, #12]
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 23e82f0:	f7ff faef 	bl	23e78d2 <compensate_data>
}
 23e82f4:	b005      	add	sp, #20
 23e82f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rslt = BMP3_E_NULL_PTR;
 23e82f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e82fc:	e7fa      	b.n	23e82f4 <bmp3_get_sensor_data+0x68>

023e82fe <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
 23e82fe:	4770      	bx	lr

023e8300 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
 23e8300:	7c03      	ldrb	r3, [r0, #16]
 23e8302:	f013 0308 	ands.w	r3, r3, #8
 23e8306:	bf1e      	ittt	ne
 23e8308:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
 23e830a:	6a40      	ldrne	r0, [r0, #36]	; 0x24
 23e830c:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
 23e830e:	2b00      	cmp	r3, #0
  }
 23e8310:	bfac      	ite	ge
 23e8312:	4618      	movge	r0, r3
 23e8314:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
 23e8318:	4770      	bx	lr
	...

023e831c <_Z28anemometer_interrupt_handlerv>:
 * ======================================================================================================================
 */
#define ANEMOMETER_IRQ_PIN  A2
void anemometer_interrupt_handler()
{
  anemometer_interrupt_count++;
 23e831c:	4a02      	ldr	r2, [pc, #8]	; (23e8328 <_Z28anemometer_interrupt_handlerv+0xc>)
 23e831e:	6813      	ldr	r3, [r2, #0]
 23e8320:	3301      	adds	r3, #1
 23e8322:	6013      	str	r3, [r2, #0]
}
 23e8324:	4770      	bx	lr
 23e8326:	bf00      	nop
 23e8328:	1006a968 	.word	0x1006a968

023e832c <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
 23e832c:	4770      	bx	lr

023e832e <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
 23e832e:	b510      	push	{r4, lr}
 23e8330:	4604      	mov	r4, r0
  }
 23e8332:	2110      	movs	r1, #16
 23e8334:	f7ff faa1 	bl	23e787a <_ZdlPvj>
 23e8338:	4620      	mov	r0, r4
 23e833a:	bd10      	pop	{r4, pc}

023e833c <_ZN4FileD0Ev>:
 23e833c:	b510      	push	{r4, lr}
 23e833e:	4604      	mov	r4, r0
 23e8340:	2134      	movs	r1, #52	; 0x34
 23e8342:	f7ff fa9a 	bl	23e787a <_ZdlPvj>
 23e8346:	4620      	mov	r0, r4
 23e8348:	bd10      	pop	{r4, pc}

023e834a <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
 23e834a:	3010      	adds	r0, #16
 23e834c:	f00d bc36 	b.w	23f5bbc <_ZN7FatFile4syncEv>

023e8350 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
 23e8350:	3010      	adds	r0, #16
 23e8352:	f00d bb54 	b.w	23f59fe <_ZN7FatFile4peekEv>

023e8356 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 23e8356:	3010      	adds	r0, #16
 23e8358:	f00d be50 	b.w	23f5ffc <_ZN7FatFile5writeEPKvj>

023e835c <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
 23e835c:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 23e835e:	2201      	movs	r2, #1
 23e8360:	f88d 1007 	strb.w	r1, [sp, #7]
 23e8364:	3010      	adds	r0, #16
 23e8366:	f10d 0107 	add.w	r1, sp, #7
 23e836a:	f00d fe47 	bl	23f5ffc <_ZN7FatFile5writeEPKvj>
  }
 23e836e:	b003      	add	sp, #12
 23e8370:	f85d fb04 	ldr.w	pc, [sp], #4

023e8374 <_ZN5spark10JSONWriter5valueEPKc.isra.0>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23e8374:	b513      	push	{r0, r1, r4, lr}
 23e8376:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23e8378:	4608      	mov	r0, r1
 23e837a:	9101      	str	r1, [sp, #4]
 23e837c:	f7ff fa54 	bl	23e7828 <strlen>
 23e8380:	4602      	mov	r2, r0
 23e8382:	4620      	mov	r0, r4
 23e8384:	9901      	ldr	r1, [sp, #4]
}
 23e8386:	b002      	add	sp, #8
 23e8388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23e838c:	f010 bffa 	b.w	23f9384 <_ZN5spark10JSONWriter5valueEPKcj>

023e8390 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 23e8390:	6803      	ldr	r3, [r0, #0]
 23e8392:	b2c9      	uxtb	r1, r1
 23e8394:	689b      	ldr	r3, [r3, #8]
 23e8396:	4718      	bx	r3

023e8398 <_ZN5Print6printfEPKcz>:

    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 23e8398:	b40e      	push	{r1, r2, r3}
 23e839a:	b503      	push	{r0, r1, lr}
 23e839c:	ab03      	add	r3, sp, #12
 23e839e:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 23e83a2:	2100      	movs	r1, #0
        va_start(args, format);
 23e83a4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 23e83a6:	f011 f9df 	bl	23f9768 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 23e83aa:	b002      	add	sp, #8
 23e83ac:	f85d eb04 	ldr.w	lr, [sp], #4
 23e83b0:	b003      	add	sp, #12
 23e83b2:	4770      	bx	lr

023e83b4 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 23e83b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23e83b6:	4604      	mov	r4, r0
  {
    if (default_ && clock_ == 0)
 23e83b8:	7922      	ldrb	r2, [r4, #4]
  virtual size_t printTo(Print& p) const
 23e83ba:	4608      	mov	r0, r1
    if (default_ && clock_ == 0)
 23e83bc:	68a3      	ldr	r3, [r4, #8]
 23e83be:	b132      	cbz	r2, 23e83ce <_ZNK8particle11SPISettings7printToER5Print+0x1a>
 23e83c0:	b9a3      	cbnz	r3, 23e83ec <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
 23e83c2:	490b      	ldr	r1, [pc, #44]	; (23e83f0 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
 23e83c4:	b002      	add	sp, #8
 23e83c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
 23e83ca:	f011 b98e 	b.w	23f96ea <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 23e83ce:	4a09      	ldr	r2, [pc, #36]	; (23e83f4 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
 23e83d0:	7b26      	ldrb	r6, [r4, #12]
 23e83d2:	4d09      	ldr	r5, [pc, #36]	; (23e83f8 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
 23e83d4:	4909      	ldr	r1, [pc, #36]	; (23e83fc <_ZNK8particle11SPISettings7printToER5Print+0x48>)
 23e83d6:	7b64      	ldrb	r4, [r4, #13]
 23e83d8:	2e01      	cmp	r6, #1
 23e83da:	bf18      	it	ne
 23e83dc:	4629      	movne	r1, r5
 23e83de:	e9cd 1400 	strd	r1, r4, [sp]
 23e83e2:	4907      	ldr	r1, [pc, #28]	; (23e8400 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
 23e83e4:	f7ff ffd8 	bl	23e8398 <_ZN5Print6printfEPKcz>
  }
 23e83e8:	b002      	add	sp, #8
 23e83ea:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 23e83ec:	4a05      	ldr	r2, [pc, #20]	; (23e8404 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
 23e83ee:	e7ef      	b.n	23e83d0 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
 23e83f0:	023fd31c 	.word	0x023fd31c
 23e83f4:	023fdc09 	.word	0x023fdc09
 23e83f8:	023fd318 	.word	0x023fd318
 23e83fc:	023fd314 	.word	0x023fd314
 23e8400:	023fd332 	.word	0x023fd332
 23e8404:	023fd30b 	.word	0x023fd30b

023e8408 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 23e8408:	2300      	movs	r3, #0
 23e840a:	6840      	ldr	r0, [r0, #4]
 23e840c:	461a      	mov	r2, r3
 23e840e:	4619      	mov	r1, r3
 23e8410:	f00f be42 	b.w	23f8098 <network_on>

023e8414 <_ZN5spark13CellularClass3offEv>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 23e8414:	2300      	movs	r3, #0
 23e8416:	6840      	ldr	r0, [r0, #4]
 23e8418:	461a      	mov	r2, r3
 23e841a:	4619      	mov	r1, r3
 23e841c:	f00f be4a 	b.w	23f80b4 <network_off>

023e8420 <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 23e8420:	2000      	movs	r0, #0
 23e8422:	f00f b977 	b.w	23f7714 <hal_timer_millis>
	...

023e8428 <_Z28raingauge1_interrupt_handlerv>:
 *  raingauge1_interrupt_handler() - This function is called whenever a magnet/interrupt is detected by the arduino
 * ======================================================================================================================
 */
#define RAINGAUGE1_IRQ_PIN A3
void raingauge1_interrupt_handler()
{
 23e8428:	b510      	push	{r4, lr}
  if ((System.millis() - raingauge1_interrupt_ltime) > 500) { // Count tip if a half second has gone by since last interrupt
 23e842a:	f7ff fff9 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23e842e:	4c0e      	ldr	r4, [pc, #56]	; (23e8468 <_Z28raingauge1_interrupt_handlerv+0x40>)
 23e8430:	e9d4 3200 	ldrd	r3, r2, [r4]
 23e8434:	1ac0      	subs	r0, r0, r3
 23e8436:	f240 13f5 	movw	r3, #501	; 0x1f5
 23e843a:	eb61 0102 	sbc.w	r1, r1, r2
 23e843e:	4298      	cmp	r0, r3
 23e8440:	f171 0300 	sbcs.w	r3, r1, #0
 23e8444:	d30f      	bcc.n	23e8466 <_Z28raingauge1_interrupt_handlerv+0x3e>
    raingauge1_interrupt_ltime = System.millis();
 23e8446:	f7ff ffeb 	bl	23e8420 <_ZN11SystemClass6millisEv>
    raingauge1_interrupt_count++;
 23e844a:	4a08      	ldr	r2, [pc, #32]	; (23e846c <_Z28raingauge1_interrupt_handlerv+0x44>)
    raingauge1_interrupt_ltime = System.millis();
 23e844c:	e9c4 0100 	strd	r0, r1, [r4]
    raingauge1_interrupt_count++;
 23e8450:	6813      	ldr	r3, [r2, #0]
    digitalWrite(LED_PIN, HIGH);
 23e8452:	2101      	movs	r1, #1
    raingauge1_interrupt_count++;
 23e8454:	3301      	adds	r3, #1
 23e8456:	6013      	str	r3, [r2, #0]
    digitalWrite(LED_PIN, HIGH);
 23e8458:	4b05      	ldr	r3, [pc, #20]	; (23e8470 <_Z28raingauge1_interrupt_handlerv+0x48>)
 23e845a:	8818      	ldrh	r0, [r3, #0]
 23e845c:	f011 fee7 	bl	23fa22e <digitalWrite>
    TurnLedOff = true;
 23e8460:	2201      	movs	r2, #1
 23e8462:	4b04      	ldr	r3, [pc, #16]	; (23e8474 <_Z28raingauge1_interrupt_handlerv+0x4c>)
 23e8464:	701a      	strb	r2, [r3, #0]
  }   
}
 23e8466:	bd10      	pop	{r4, pc}
 23e8468:	1007aa68 	.word	0x1007aa68
 23e846c:	1007aa64 	.word	0x1007aa64
 23e8470:	1006a1a4 	.word	0x1006a1a4
 23e8474:	1006a837 	.word	0x1006a837

023e8478 <_Z28raingauge2_interrupt_handlerv>:
 *  raingauge2_interrupt_handler() - This function is called whenever a magnet/interrupt is detected by the arduino
 * ======================================================================================================================
 */
#define RAINGAUGE2_IRQ_PIN   A4
void raingauge2_interrupt_handler()
{
 23e8478:	b510      	push	{r4, lr}
  if ((System.millis() - raingauge2_interrupt_ltime) > 500) { // Count tip if a half second has gone by since last interrupt
 23e847a:	f7ff ffd1 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23e847e:	4c0e      	ldr	r4, [pc, #56]	; (23e84b8 <_Z28raingauge2_interrupt_handlerv+0x40>)
 23e8480:	e9d4 3200 	ldrd	r3, r2, [r4]
 23e8484:	1ac0      	subs	r0, r0, r3
 23e8486:	f240 13f5 	movw	r3, #501	; 0x1f5
 23e848a:	eb61 0102 	sbc.w	r1, r1, r2
 23e848e:	4298      	cmp	r0, r3
 23e8490:	f171 0300 	sbcs.w	r3, r1, #0
 23e8494:	d30f      	bcc.n	23e84b6 <_Z28raingauge2_interrupt_handlerv+0x3e>
    raingauge2_interrupt_ltime = System.millis();
 23e8496:	f7ff ffc3 	bl	23e8420 <_ZN11SystemClass6millisEv>
    raingauge2_interrupt_count++;
 23e849a:	4a08      	ldr	r2, [pc, #32]	; (23e84bc <_Z28raingauge2_interrupt_handlerv+0x44>)
    raingauge2_interrupt_ltime = System.millis();
 23e849c:	e9c4 0100 	strd	r0, r1, [r4]
    raingauge2_interrupt_count++;
 23e84a0:	6813      	ldr	r3, [r2, #0]
    digitalWrite(LED_PIN, HIGH);
 23e84a2:	2101      	movs	r1, #1
    raingauge2_interrupt_count++;
 23e84a4:	3301      	adds	r3, #1
 23e84a6:	6013      	str	r3, [r2, #0]
    digitalWrite(LED_PIN, HIGH);
 23e84a8:	4b05      	ldr	r3, [pc, #20]	; (23e84c0 <_Z28raingauge2_interrupt_handlerv+0x48>)
 23e84aa:	8818      	ldrh	r0, [r3, #0]
 23e84ac:	f011 febf 	bl	23fa22e <digitalWrite>
    TurnLedOff = true;
 23e84b0:	2201      	movs	r2, #1
 23e84b2:	4b04      	ldr	r3, [pc, #16]	; (23e84c4 <_Z28raingauge2_interrupt_handlerv+0x4c>)
 23e84b4:	701a      	strb	r2, [r3, #0]
  }   
}
 23e84b6:	bd10      	pop	{r4, pc}
 23e84b8:	1007aa80 	.word	0x1007aa80
 23e84bc:	1007aa78 	.word	0x1007aa78
 23e84c0:	1006a1a4 	.word	0x1006a1a4
 23e84c4:	1006a837 	.word	0x1006a837

023e84c8 <_ZN5spark10JSONWriter4nameEPKc>:
inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
 23e84c8:	b513      	push	{r0, r1, r4, lr}
 23e84ca:	4604      	mov	r4, r0
    return this->name(name, strlen(name));
 23e84cc:	4608      	mov	r0, r1
 23e84ce:	9101      	str	r1, [sp, #4]
 23e84d0:	f7ff f9aa 	bl	23e7828 <strlen>
 23e84d4:	4602      	mov	r2, r0
 23e84d6:	4620      	mov	r0, r4
 23e84d8:	9901      	ldr	r1, [sp, #4]
}
 23e84da:	b002      	add	sp, #8
 23e84dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->name(name, strlen(name));
 23e84e0:	f010 bf40 	b.w	23f9364 <_ZN5spark10JSONWriter4nameEPKcj>

023e84e4 <_ZN7FatFile6existsEPKc>:
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 23e84e4:	2300      	movs	r3, #0
  bool exists(const char* path) {
 23e84e6:	b500      	push	{lr}
 23e84e8:	b08b      	sub	sp, #44	; 0x2c
 23e84ea:	460a      	mov	r2, r1
    return file.open(this, path, O_RDONLY);
 23e84ec:	4601      	mov	r1, r0
 23e84ee:	a801      	add	r0, sp, #4
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 23e84f0:	9301      	str	r3, [sp, #4]
    return file.open(this, path, O_RDONLY);
 23e84f2:	f00d fba0 	bl	23f5c36 <_ZN7FatFile4openEPS_PKci>
  }
 23e84f6:	b00b      	add	sp, #44	; 0x2c
 23e84f8:	f85d fb04 	ldr.w	pc, [sp], #4

023e84fc <_ZN7FatFile4readEv>:
  int read() {
 23e84fc:	b507      	push	{r0, r1, r2, lr}
    return read(&b, 1) == 1 ? b : -1;
 23e84fe:	2201      	movs	r2, #1
 23e8500:	f10d 0107 	add.w	r1, sp, #7
 23e8504:	f00d f9cd 	bl	23f58a2 <_ZN7FatFile4readEPvj>
 23e8508:	2801      	cmp	r0, #1
 23e850a:	bf14      	ite	ne
 23e850c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23e8510:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  }
 23e8514:	b003      	add	sp, #12
 23e8516:	f85d fb04 	ldr.w	pc, [sp], #4

023e851a <_ZN4File4readEv>:
  int read() {
 23e851a:	b508      	push	{r3, lr}
    return FatFile::read();
 23e851c:	3010      	adds	r0, #16
 23e851e:	f7ff ffed 	bl	23e84fc <_ZN7FatFile4readEv>
  }
 23e8522:	bd08      	pop	{r3, pc}

023e8524 <_ZN4FileC1Ev>:
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 23e8524:	2200      	movs	r2, #0
 23e8526:	8202      	strh	r2, [r0, #16]
    Print() : write_error(0) {}
 23e8528:	6042      	str	r2, [r0, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23e852a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23e852e:	6082      	str	r2, [r0, #8]
  File() {}
 23e8530:	4a01      	ldr	r2, [pc, #4]	; (23e8538 <_ZN4FileC1Ev+0x14>)
 23e8532:	6002      	str	r2, [r0, #0]
 23e8534:	4770      	bx	lr
 23e8536:	bf00      	nop
 23e8538:	023fea64 	.word	0x023fea64

023e853c <_Z16I2C_Device_Existh>:
 * 
 *  The i2c_scanner uses the return value of the Write.endTransmisstion to see 
 *  if a device did acknowledge to the address.
 *=======================================================================================================================
 */
bool I2C_Device_Exist(byte address) {
 23e853c:	b507      	push	{r0, r1, r2, lr}
 23e853e:	9001      	str	r0, [sp, #4]
  byte error;

  Wire.begin();                     // Connect to I2C as Master (no addess is passed to signal being a slave)
 23e8540:	f011 fee8 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e8544:	f010 fcb6 	bl	23f8eb4 <_ZN7TwoWire5beginEv>

  Wire.beginTransmission(address);  // Begin a transmission to the I2C slave device with the given address. 
 23e8548:	f011 fee4 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e854c:	9901      	ldr	r1, [sp, #4]
 23e854e:	f010 fcdb 	bl	23f8f08 <_ZN7TwoWire17beginTransmissionEh>
                                    // Subsequently, queue bytes for transmission with the write() function 
                                    // and transmit them by calling endTransmission(). 

  error = Wire.endTransmission();   // Ends a transmission to a slave device that was begun by beginTransmission() 
 23e8552:	f011 fedf 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e8556:	f010 fce2 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>
  else {
    // sprintf (msgbuf, "I2CERR: %d", error);
    // Output (msgbuf);
    return (false);
  }
}
 23e855a:	fab0 f080 	clz	r0, r0
 23e855e:	0940      	lsrs	r0, r0, #5
 23e8560:	b003      	add	sp, #12
 23e8562:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023e8568 <_Z5Blinkii>:
 * ======================================================================================================================
 * Blink() - Count, delay between, delay at end
 * ======================================================================================================================
 */
void Blink(int count, int between)
{
 23e8568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23e856a:	4606      	mov	r6, r0
 23e856c:	460c      	mov	r4, r1
  int c;

  for (c=0; c<count; c++) {
 23e856e:	2500      	movs	r5, #0
    digitalWrite(LED_PIN, HIGH);
 23e8570:	4f09      	ldr	r7, [pc, #36]	; (23e8598 <_Z5Blinkii+0x30>)
  for (c=0; c<count; c++) {
 23e8572:	42b5      	cmp	r5, r6
 23e8574:	da0f      	bge.n	23e8596 <_Z5Blinkii+0x2e>
    digitalWrite(LED_PIN, HIGH);
 23e8576:	2101      	movs	r1, #1
 23e8578:	8838      	ldrh	r0, [r7, #0]
 23e857a:	f011 fe58 	bl	23fa22e <digitalWrite>
    delay(between);
 23e857e:	4620      	mov	r0, r4
 23e8580:	f00f fecc 	bl	23f831c <delay>
    digitalWrite(LED_PIN, LOW);
 23e8584:	2100      	movs	r1, #0
 23e8586:	8838      	ldrh	r0, [r7, #0]
 23e8588:	f011 fe51 	bl	23fa22e <digitalWrite>
    delay(between);
 23e858c:	4620      	mov	r0, r4
 23e858e:	f00f fec5 	bl	23f831c <delay>
  for (c=0; c<count; c++) {
 23e8592:	3501      	adds	r5, #1
 23e8594:	e7ed      	b.n	23e8572 <_Z5Blinkii+0xa>
  }
}
 23e8596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23e8598:	1006a1a4 	.word	0x1006a1a4

023e859c <_Z6mysortPjj>:
/*
 * ======================================================================================================================
 * mysort()
 * ======================================================================================================================
 */
void mysort(unsigned int a[], unsigned int n) { 
 23e859c:	b530      	push	{r4, r5, lr}
  unsigned int i, j;

  for(i = 0;i < n-1;i++) {
 23e859e:	3901      	subs	r1, #1
 23e85a0:	b169      	cbz	r1, 23e85be <_Z6mysortPjj+0x22>
 23e85a2:	4603      	mov	r3, r0
    for(j = 0;j < n-i-1;j++) {
 23e85a4:	2200      	movs	r2, #0
      if(a[j] > a[j+1])
 23e85a6:	681c      	ldr	r4, [r3, #0]
 23e85a8:	685d      	ldr	r5, [r3, #4]
 23e85aa:	3201      	adds	r2, #1
 23e85ac:	42ac      	cmp	r4, r5
 23e85ae:	d901      	bls.n	23e85b4 <_Z6mysortPjj+0x18>
  *q=t;
 23e85b0:	e9c3 5400 	strd	r5, r4, [r3]
    for(j = 0;j < n-i-1;j++) {
 23e85b4:	428a      	cmp	r2, r1
 23e85b6:	f103 0304 	add.w	r3, r3, #4
 23e85ba:	d3f4      	bcc.n	23e85a6 <_Z6mysortPjj+0xa>
 23e85bc:	e7ef      	b.n	23e859e <_Z6mysortPjj+0x2>
        myswap(&a[j],&a[j+1]);
    }
  }
}
 23e85be:	bd30      	pop	{r4, r5, pc}

023e85c0 <_Z13JPO_ClearBitsv>:
 * ======================================================================================================================
 * JPO_ClearBits() - Clear System Status Bits related to initialization
 * ======================================================================================================================
 */
void JPO_ClearBits() {
  if (JustPoweredOn) {
 23e85c0:	4b08      	ldr	r3, [pc, #32]	; (23e85e4 <_Z13JPO_ClearBitsv+0x24>)
 23e85c2:	781a      	ldrb	r2, [r3, #0]
 23e85c4:	b162      	cbz	r2, 23e85e0 <_Z13JPO_ClearBitsv+0x20>
    JustPoweredOn = false;
 23e85c6:	2200      	movs	r2, #0
 23e85c8:	701a      	strb	r2, [r3, #0]
    SystemStatusBits &= ~SSB_BLX;     // Turn Off BLUX30 Not Found Bit
    SystemStatusBits &= ~SSB_LPS_1;   // Turn Off LPS35HW Not Found Bit
    SystemStatusBits &= ~SSB_LPS_2;   // Turn Off LPS35HW Not Found Bit
    SystemStatusBits &= ~SSB_TLW;     // Turn Off Tinovi Leaf Wetness Not Found Bit
    SystemStatusBits &= ~SSB_TSM;     // Turn Off Tinovi Soil Moisture Not Found Bit
    SystemStatusBits &= ~SSB_TMSM;    // Turn Off Tinovi MultiLevel Soil Moisture Not Found Bit
 23e85ca:	4a07      	ldr	r2, [pc, #28]	; (23e85e8 <_Z13JPO_ClearBitsv+0x28>)
 23e85cc:	6813      	ldr	r3, [r2, #0]
 23e85ce:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 23e85d2:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 23e85d6:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
 23e85da:	f023 0309 	bic.w	r3, r3, #9
 23e85de:	6013      	str	r3, [r2, #0]
  }
}
 23e85e0:	4770      	bx	lr
 23e85e2:	bf00      	nop
 23e85e4:	1006a1a2 	.word	0x1006a1a2
 23e85e8:	1006a22c 	.word	0x1006a22c

023e85ec <_Z17OLED_sleepDisplayv>:
 * ======================================================================================================================
 * OLED_sleepDisplay()
 * ======================================================================================================================
 */
void OLED_sleepDisplay() {
  if (DisplayEnabled) {
 23e85ec:	4b06      	ldr	r3, [pc, #24]	; (23e8608 <_Z17OLED_sleepDisplayv+0x1c>)
 23e85ee:	781b      	ldrb	r3, [r3, #0]
 23e85f0:	b143      	cbz	r3, 23e8604 <_Z17OLED_sleepDisplayv+0x18>
    if (OLED32) {
 23e85f2:	4b06      	ldr	r3, [pc, #24]	; (23e860c <_Z17OLED_sleepDisplayv+0x20>)
      display32.ssd1306_command(SSD1306_DISPLAYOFF);
 23e85f4:	21ae      	movs	r1, #174	; 0xae
    if (OLED32) {
 23e85f6:	681b      	ldr	r3, [r3, #0]
 23e85f8:	2b3c      	cmp	r3, #60	; 0x3c
      display32.ssd1306_command(SSD1306_DISPLAYOFF);
 23e85fa:	bf0c      	ite	eq
 23e85fc:	4804      	ldreq	r0, [pc, #16]	; (23e8610 <_Z17OLED_sleepDisplayv+0x24>)
    }
    else {
      display64.ssd1306_command(SSD1306_DISPLAYOFF);
 23e85fe:	4805      	ldrne	r0, [pc, #20]	; (23e8614 <_Z17OLED_sleepDisplayv+0x28>)
 23e8600:	f00b bbc5 	b.w	23f3d8e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    }
  }
}
 23e8604:	4770      	bx	lr
 23e8606:	bf00      	nop
 23e8608:	1006a1a1 	.word	0x1006a1a1
 23e860c:	1007aa28 	.word	0x1007aa28
 23e8610:	1006ada4 	.word	0x1006ada4
 23e8614:	1006ae18 	.word	0x1006ae18

023e8618 <_Z16OLED_wakeDisplayv>:
 * ======================================================================================================================
 * OLED_wakeDisplay()
 * ======================================================================================================================
 */
void OLED_wakeDisplay() {
  if (DisplayEnabled) {
 23e8618:	4b06      	ldr	r3, [pc, #24]	; (23e8634 <_Z16OLED_wakeDisplayv+0x1c>)
 23e861a:	781b      	ldrb	r3, [r3, #0]
 23e861c:	b143      	cbz	r3, 23e8630 <_Z16OLED_wakeDisplayv+0x18>
    if (OLED32) {
 23e861e:	4b06      	ldr	r3, [pc, #24]	; (23e8638 <_Z16OLED_wakeDisplayv+0x20>)
      display32.ssd1306_command(SSD1306_DISPLAYON);
 23e8620:	21af      	movs	r1, #175	; 0xaf
    if (OLED32) {
 23e8622:	681b      	ldr	r3, [r3, #0]
 23e8624:	2b3c      	cmp	r3, #60	; 0x3c
      display32.ssd1306_command(SSD1306_DISPLAYON);
 23e8626:	bf0c      	ite	eq
 23e8628:	4804      	ldreq	r0, [pc, #16]	; (23e863c <_Z16OLED_wakeDisplayv+0x24>)
    }
    else {
      display64.ssd1306_command(SSD1306_DISPLAYON);
 23e862a:	4805      	ldrne	r0, [pc, #20]	; (23e8640 <_Z16OLED_wakeDisplayv+0x28>)
 23e862c:	f00b bbaf 	b.w	23f3d8e <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    }
  }
}
 23e8630:	4770      	bx	lr
 23e8632:	bf00      	nop
 23e8634:	1006a1a1 	.word	0x1006a1a1
 23e8638:	1007aa28 	.word	0x1007aa28
 23e863c:	1006ada4 	.word	0x1006ada4
 23e8640:	1006ae18 	.word	0x1006ae18

023e8644 <_Z9OLED_spinv>:
/*
 * ======================================================================================================================
 * OLED_spin() 
 * ======================================================================================================================
 */
void OLED_spin() {
 23e8644:	b570      	push	{r4, r5, r6, lr}
  static int spin=0;
    
  if (DisplayEnabled) {
 23e8646:	4b24      	ldr	r3, [pc, #144]	; (23e86d8 <_Z9OLED_spinv+0x94>)
 23e8648:	781b      	ldrb	r3, [r3, #0]
 23e864a:	2b00      	cmp	r3, #0
 23e864c:	d038      	beq.n	23e86c0 <_Z9OLED_spinv+0x7c>
    if (OLED32) {
 23e864e:	4e23      	ldr	r6, [pc, #140]	; (23e86dc <_Z9OLED_spinv+0x98>)
 23e8650:	4d23      	ldr	r5, [pc, #140]	; (23e86e0 <_Z9OLED_spinv+0x9c>)
 23e8652:	6833      	ldr	r3, [r6, #0]
 23e8654:	2b3c      	cmp	r3, #60	; 0x3c
 23e8656:	f04f 0301 	mov.w	r3, #1
 23e865a:	d112      	bne.n	23e8682 <_Z9OLED_spinv+0x3e>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
 23e865c:	4c21      	ldr	r4, [pc, #132]	; (23e86e4 <_Z9OLED_spinv+0xa0>)
    @param   c   16-bit 5-6-5 Color to draw text with
    @param   bg  16-bit 5-6-5 Color to draw background/fill with
  */
  /**********************************************************************/
  void setTextColor(uint16_t c, uint16_t bg) {
    textcolor = c;
 23e865e:	e9c4 5304 	strd	r5, r3, [r4, #16]
      display64.setTextColor(WHITE, BLACK); // Draw 'inverse' text
      display64.setCursor(120,24);
      display64.print(" ");
      display64.setCursor(120,24);
      display64.setCursor(120,56);
      display64.print(" ");
 23e8662:	4620      	mov	r0, r4
 23e8664:	4920      	ldr	r1, [pc, #128]	; (23e86e8 <_Z9OLED_spinv+0xa4>)
 23e8666:	f011 f840 	bl	23f96ea <_ZN5Print5printEPKc>
    cursor_x = x;
 23e866a:	6125      	str	r5, [r4, #16]
      display64.setCursor(120,56);       
    } 
    switch (spin++) {
 23e866c:	4c1f      	ldr	r4, [pc, #124]	; (23e86ec <_Z9OLED_spinv+0xa8>)
 23e866e:	6822      	ldr	r2, [r4, #0]
 23e8670:	1c53      	adds	r3, r2, #1
 23e8672:	6023      	str	r3, [r4, #0]
 23e8674:	4b1e      	ldr	r3, [pc, #120]	; (23e86f0 <_Z9OLED_spinv+0xac>)
 23e8676:	2a03      	cmp	r2, #3
 23e8678:	d80f      	bhi.n	23e869a <_Z9OLED_spinv+0x56>
 23e867a:	e8df f002 	tbb	[pc, r2]
 23e867e:	220c      	.short	0x220c
 23e8680:	2624      	.short	0x2624
 23e8682:	4c1c      	ldr	r4, [pc, #112]	; (23e86f4 <_Z9OLED_spinv+0xb0>)
      display64.print(" ");
 23e8684:	4918      	ldr	r1, [pc, #96]	; (23e86e8 <_Z9OLED_spinv+0xa4>)
    textcolor = c;
 23e8686:	e9c4 5304 	strd	r5, r3, [r4, #16]
    cursor_x = x;
 23e868a:	4d1b      	ldr	r5, [pc, #108]	; (23e86f8 <_Z9OLED_spinv+0xb4>)
 23e868c:	4620      	mov	r0, r4
 23e868e:	f011 f82c 	bl	23f96ea <_ZN5Print5printEPKc>
 23e8692:	6125      	str	r5, [r4, #16]
 23e8694:	e7e5      	b.n	23e8662 <_Z9OLED_spinv+0x1e>
      case 0 : msgp = (char *) "|"; break;
 23e8696:	4a19      	ldr	r2, [pc, #100]	; (23e86fc <_Z9OLED_spinv+0xb8>)
      case 1 : msgp = (char *) "/"; break;
      case 2 : msgp = (char *) "-"; break;
      case 3 : msgp = (char *) "\\"; break;
 23e8698:	601a      	str	r2, [r3, #0]
    }
    if (OLED32) {
      display32.print(msgp);
 23e869a:	6819      	ldr	r1, [r3, #0]
    if (OLED32) {
 23e869c:	6833      	ldr	r3, [r6, #0]
 23e869e:	2b3c      	cmp	r3, #60	; 0x3c
 23e86a0:	d115      	bne.n	23e86ce <_Z9OLED_spinv+0x8a>
      display32.print(msgp);
 23e86a2:	4810      	ldr	r0, [pc, #64]	; (23e86e4 <_Z9OLED_spinv+0xa0>)
 23e86a4:	f011 f821 	bl	23f96ea <_ZN5Print5printEPKc>
      display32.display();
 23e86a8:	480e      	ldr	r0, [pc, #56]	; (23e86e4 <_Z9OLED_spinv+0xa0>)
    }
    else {
      display64.print(msgp);
      display64.display();
 23e86aa:	f00b fe67 	bl	23f437c <_ZN16Adafruit_SSD13067displayEv>
    }
    spin %= 4;
 23e86ae:	6823      	ldr	r3, [r4, #0]
 23e86b0:	425a      	negs	r2, r3
 23e86b2:	f002 0203 	and.w	r2, r2, #3
 23e86b6:	f003 0303 	and.w	r3, r3, #3
 23e86ba:	bf58      	it	pl
 23e86bc:	4253      	negpl	r3, r2
 23e86be:	6023      	str	r3, [r4, #0]
  }
}
 23e86c0:	bd70      	pop	{r4, r5, r6, pc}
      case 1 : msgp = (char *) "/"; break;
 23e86c2:	4a0f      	ldr	r2, [pc, #60]	; (23e8700 <_Z9OLED_spinv+0xbc>)
 23e86c4:	e7e8      	b.n	23e8698 <_Z9OLED_spinv+0x54>
      case 2 : msgp = (char *) "-"; break;
 23e86c6:	4a0f      	ldr	r2, [pc, #60]	; (23e8704 <_Z9OLED_spinv+0xc0>)
 23e86c8:	e7e6      	b.n	23e8698 <_Z9OLED_spinv+0x54>
      case 3 : msgp = (char *) "\\"; break;
 23e86ca:	4a0f      	ldr	r2, [pc, #60]	; (23e8708 <_Z9OLED_spinv+0xc4>)
 23e86cc:	e7e4      	b.n	23e8698 <_Z9OLED_spinv+0x54>
      display64.print(msgp);
 23e86ce:	4809      	ldr	r0, [pc, #36]	; (23e86f4 <_Z9OLED_spinv+0xb0>)
 23e86d0:	f011 f80b 	bl	23f96ea <_ZN5Print5printEPKc>
      display64.display();
 23e86d4:	4807      	ldr	r0, [pc, #28]	; (23e86f4 <_Z9OLED_spinv+0xb0>)
 23e86d6:	e7e8      	b.n	23e86aa <_Z9OLED_spinv+0x66>
 23e86d8:	1006a1a1 	.word	0x1006a1a1
 23e86dc:	1007aa28 	.word	0x1007aa28
 23e86e0:	00180078 	.word	0x00180078
 23e86e4:	1006ada4 	.word	0x1006ada4
 23e86e8:	023fdc08 	.word	0x023fdc08
 23e86ec:	1006a83c 	.word	0x1006a83c
 23e86f0:	1006f548 	.word	0x1006f548
 23e86f4:	1006ae18 	.word	0x1006ae18
 23e86f8:	00380078 	.word	0x00380078
 23e86fc:	023fd34f 	.word	0x023fd34f
 23e8700:	023fd351 	.word	0x023fd351
 23e8704:	023fd353 	.word	0x023fd353
 23e8708:	023fd355 	.word	0x023fd355

023e870c <_Z11OLED_updatev>:
/*
 * ======================================================================================================================
 * OLED_update() -- Output oled in memory map to display
 * ======================================================================================================================
 */
void OLED_update() {  
 23e870c:	b538      	push	{r3, r4, r5, lr}
  if (DisplayEnabled) {
 23e870e:	4b32      	ldr	r3, [pc, #200]	; (23e87d8 <_Z11OLED_updatev+0xcc>)
 23e8710:	781b      	ldrb	r3, [r3, #0]
 23e8712:	2b00      	cmp	r3, #0
 23e8714:	d05f      	beq.n	23e87d6 <_Z11OLED_updatev+0xca>
    if (OLED32) {
 23e8716:	4b31      	ldr	r3, [pc, #196]	; (23e87dc <_Z11OLED_updatev+0xd0>)
 23e8718:	2500      	movs	r5, #0
 23e871a:	681b      	ldr	r3, [r3, #0]
 23e871c:	2b3c      	cmp	r3, #60	; 0x3c
 23e871e:	d122      	bne.n	23e8766 <_Z11OLED_updatev+0x5a>
      display32.clearDisplay();
 23e8720:	4c2f      	ldr	r4, [pc, #188]	; (23e87e0 <_Z11OLED_updatev+0xd4>)
 23e8722:	4620      	mov	r0, r4
 23e8724:	f00b fb5f 	bl	23f3de6 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display32.setCursor(0,0);             // Start at top-left corner
      display32.print(oled_lines [0]);
 23e8728:	492e      	ldr	r1, [pc, #184]	; (23e87e4 <_Z11OLED_updatev+0xd8>)
 23e872a:	4620      	mov	r0, r4
 23e872c:	6125      	str	r5, [r4, #16]
 23e872e:	f010 ffdc 	bl	23f96ea <_ZN5Print5printEPKc>
 23e8732:	f44f 2300 	mov.w	r3, #524288	; 0x80000
      display32.setCursor(0,8);
      display32.print(oled_lines [1]);
 23e8736:	492c      	ldr	r1, [pc, #176]	; (23e87e8 <_Z11OLED_updatev+0xdc>)
 23e8738:	6123      	str	r3, [r4, #16]
 23e873a:	4620      	mov	r0, r4
 23e873c:	f010 ffd5 	bl	23f96ea <_ZN5Print5printEPKc>
 23e8740:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
      display32.setCursor(0,16);
      display32.print(oled_lines [2]);
 23e8744:	4929      	ldr	r1, [pc, #164]	; (23e87ec <_Z11OLED_updatev+0xe0>)
 23e8746:	6123      	str	r3, [r4, #16]
 23e8748:	4620      	mov	r0, r4
 23e874a:	f010 ffce 	bl	23f96ea <_ZN5Print5printEPKc>
 23e874e:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
      display32.setCursor(0,24);  
      display32.print(oled_lines [3]);
 23e8752:	4927      	ldr	r1, [pc, #156]	; (23e87f0 <_Z11OLED_updatev+0xe4>)
 23e8754:	6123      	str	r3, [r4, #16]
      display64.setCursor(0,40);  
      display64.print(oled_lines [5]);
      display64.setCursor(0,48);  
      display64.print(oled_lines [6]);
      display64.setCursor(0,56);  
      display64.print(oled_lines [7]);
 23e8756:	4620      	mov	r0, r4
 23e8758:	f010 ffc7 	bl	23f96ea <_ZN5Print5printEPKc>
      display64.display();
 23e875c:	4620      	mov	r0, r4
     
    }
  }
}
 23e875e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      display64.display();
 23e8762:	f00b be0b 	b.w	23f437c <_ZN16Adafruit_SSD13067displayEv>
      display64.clearDisplay();
 23e8766:	4c23      	ldr	r4, [pc, #140]	; (23e87f4 <_Z11OLED_updatev+0xe8>)
 23e8768:	4620      	mov	r0, r4
 23e876a:	f00b fb3c 	bl	23f3de6 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display64.print(oled_lines [0]);
 23e876e:	491d      	ldr	r1, [pc, #116]	; (23e87e4 <_Z11OLED_updatev+0xd8>)
 23e8770:	4620      	mov	r0, r4
 23e8772:	6125      	str	r5, [r4, #16]
 23e8774:	f010 ffb9 	bl	23f96ea <_ZN5Print5printEPKc>
 23e8778:	f44f 2300 	mov.w	r3, #524288	; 0x80000
      display64.print(oled_lines [1]);
 23e877c:	491a      	ldr	r1, [pc, #104]	; (23e87e8 <_Z11OLED_updatev+0xdc>)
 23e877e:	6123      	str	r3, [r4, #16]
 23e8780:	4620      	mov	r0, r4
 23e8782:	f010 ffb2 	bl	23f96ea <_ZN5Print5printEPKc>
 23e8786:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
      display64.print(oled_lines [2]);
 23e878a:	4918      	ldr	r1, [pc, #96]	; (23e87ec <_Z11OLED_updatev+0xe0>)
 23e878c:	6123      	str	r3, [r4, #16]
 23e878e:	4620      	mov	r0, r4
 23e8790:	f010 ffab 	bl	23f96ea <_ZN5Print5printEPKc>
 23e8794:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
      display64.print(oled_lines [3]);
 23e8798:	4915      	ldr	r1, [pc, #84]	; (23e87f0 <_Z11OLED_updatev+0xe4>)
 23e879a:	6123      	str	r3, [r4, #16]
 23e879c:	4620      	mov	r0, r4
 23e879e:	f010 ffa4 	bl	23f96ea <_ZN5Print5printEPKc>
 23e87a2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
      display64.print(oled_lines [4]);
 23e87a6:	4914      	ldr	r1, [pc, #80]	; (23e87f8 <_Z11OLED_updatev+0xec>)
 23e87a8:	6123      	str	r3, [r4, #16]
 23e87aa:	4620      	mov	r0, r4
 23e87ac:	f010 ff9d 	bl	23f96ea <_ZN5Print5printEPKc>
 23e87b0:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
      display64.print(oled_lines [5]);
 23e87b4:	4911      	ldr	r1, [pc, #68]	; (23e87fc <_Z11OLED_updatev+0xf0>)
 23e87b6:	6123      	str	r3, [r4, #16]
 23e87b8:	4620      	mov	r0, r4
 23e87ba:	f010 ff96 	bl	23f96ea <_ZN5Print5printEPKc>
 23e87be:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
      display64.print(oled_lines [6]);
 23e87c2:	490f      	ldr	r1, [pc, #60]	; (23e8800 <_Z11OLED_updatev+0xf4>)
 23e87c4:	6123      	str	r3, [r4, #16]
 23e87c6:	4620      	mov	r0, r4
 23e87c8:	f010 ff8f 	bl	23f96ea <_ZN5Print5printEPKc>
 23e87cc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
      display64.print(oled_lines [7]);
 23e87d0:	490c      	ldr	r1, [pc, #48]	; (23e8804 <_Z11OLED_updatev+0xf8>)
 23e87d2:	6123      	str	r3, [r4, #16]
 23e87d4:	e7bf      	b.n	23e8756 <_Z11OLED_updatev+0x4a>
}
 23e87d6:	bd38      	pop	{r3, r4, r5, pc}
 23e87d8:	1006a1a1 	.word	0x1006a1a1
 23e87dc:	1007aa28 	.word	0x1007aa28
 23e87e0:	1006ada4 	.word	0x1006ada4
 23e87e4:	1007a970 	.word	0x1007a970
 23e87e8:	1007a987 	.word	0x1007a987
 23e87ec:	1007a99e 	.word	0x1007a99e
 23e87f0:	1007a9b5 	.word	0x1007a9b5
 23e87f4:	1006ae18 	.word	0x1006ae18
 23e87f8:	1007a9cc 	.word	0x1007a9cc
 23e87fc:	1007a9e3 	.word	0x1007a9e3
 23e8800:	1007a9fa 	.word	0x1007a9fa
 23e8804:	1007aa11 	.word	0x1007aa11

023e8808 <_Z10OLED_writePKc>:
/*
 * ======================================================================================================================
 * OLED_write() 
 * ======================================================================================================================
 */
void OLED_write(const char *str) {
 23e8808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int c, len, bottom_line = 3;
  
  if (DisplayEnabled) {
 23e880a:	4b36      	ldr	r3, [pc, #216]	; (23e88e4 <_Z10OLED_writePKc+0xdc>)
void OLED_write(const char *str) {
 23e880c:	4604      	mov	r4, r0
  if (DisplayEnabled) {
 23e880e:	781b      	ldrb	r3, [r3, #0]
 23e8810:	2b00      	cmp	r3, #0
 23e8812:	d066      	beq.n	23e88e2 <_Z10OLED_writePKc+0xda>
    // move lines up
    for (c=0; c<=21; c++) {
      oled_lines [0][c] = oled_lines [1][c];
      oled_lines [1][c] = oled_lines [2][c];
      oled_lines [2][c] = oled_lines [3][c];
      if (OLED64) {
 23e8814:	4b34      	ldr	r3, [pc, #208]	; (23e88e8 <_Z10OLED_writePKc+0xe0>)
 23e8816:	6819      	ldr	r1, [r3, #0]
      oled_lines [0][c] = oled_lines [1][c];
 23e8818:	4b34      	ldr	r3, [pc, #208]	; (23e88ec <_Z10OLED_writePKc+0xe4>)
 23e881a:	f1a3 0217 	sub.w	r2, r3, #23
 23e881e:	4615      	mov	r5, r2
 23e8820:	f103 0014 	add.w	r0, r3, #20
 23e8824:	f853 6b04 	ldr.w	r6, [r3], #4
 23e8828:	4283      	cmp	r3, r0
 23e882a:	f842 6b04 	str.w	r6, [r2], #4
 23e882e:	d1f9      	bne.n	23e8824 <_Z10OLED_writePKc+0x1c>
 23e8830:	881b      	ldrh	r3, [r3, #0]
 23e8832:	8013      	strh	r3, [r2, #0]
      oled_lines [1][c] = oled_lines [2][c];
 23e8834:	4b2e      	ldr	r3, [pc, #184]	; (23e88f0 <_Z10OLED_writePKc+0xe8>)
 23e8836:	f1a3 0217 	sub.w	r2, r3, #23
 23e883a:	f103 0014 	add.w	r0, r3, #20
 23e883e:	f853 6b04 	ldr.w	r6, [r3], #4
 23e8842:	4283      	cmp	r3, r0
 23e8844:	f842 6b04 	str.w	r6, [r2], #4
 23e8848:	d1f9      	bne.n	23e883e <_Z10OLED_writePKc+0x36>
 23e884a:	881b      	ldrh	r3, [r3, #0]
 23e884c:	8013      	strh	r3, [r2, #0]
      oled_lines [2][c] = oled_lines [3][c];
 23e884e:	4b29      	ldr	r3, [pc, #164]	; (23e88f4 <_Z10OLED_writePKc+0xec>)
 23e8850:	f1a3 0217 	sub.w	r2, r3, #23
 23e8854:	f103 0014 	add.w	r0, r3, #20
 23e8858:	f853 6b04 	ldr.w	r6, [r3], #4
 23e885c:	4283      	cmp	r3, r0
 23e885e:	f842 6b04 	str.w	r6, [r2], #4
 23e8862:	d1f9      	bne.n	23e8858 <_Z10OLED_writePKc+0x50>
 23e8864:	881b      	ldrh	r3, [r3, #0]
  int c, len, bottom_line = 3;
 23e8866:	2603      	movs	r6, #3
      oled_lines [2][c] = oled_lines [3][c];
 23e8868:	8013      	strh	r3, [r2, #0]
    for (c=0; c<=21; c++) {
 23e886a:	2200      	movs	r2, #0
 23e886c:	4b22      	ldr	r3, [pc, #136]	; (23e88f8 <_Z10OLED_writePKc+0xf0>)
      if (OLED64) {
 23e886e:	293d      	cmp	r1, #61	; 0x3d
 23e8870:	d110      	bne.n	23e8894 <_Z10OLED_writePKc+0x8c>
        oled_lines [3][c] = oled_lines [4][c];
        oled_lines [4][c] = oled_lines [5][c];
        oled_lines [5][c] = oled_lines [6][c];  
        oled_lines [6][c] = oled_lines [7][c];  
        bottom_line = 7;          
 23e8872:	2607      	movs	r6, #7
        oled_lines [3][c] = oled_lines [4][c];
 23e8874:	f893 005c 	ldrb.w	r0, [r3, #92]	; 0x5c
 23e8878:	f883 0045 	strb.w	r0, [r3, #69]	; 0x45
        oled_lines [4][c] = oled_lines [5][c];
 23e887c:	f893 0073 	ldrb.w	r0, [r3, #115]	; 0x73
 23e8880:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
        oled_lines [5][c] = oled_lines [6][c];  
 23e8884:	f893 008a 	ldrb.w	r0, [r3, #138]	; 0x8a
 23e8888:	f883 0073 	strb.w	r0, [r3, #115]	; 0x73
        oled_lines [6][c] = oled_lines [7][c];  
 23e888c:	f893 00a1 	ldrb.w	r0, [r3, #161]	; 0xa1
 23e8890:	f883 008a 	strb.w	r0, [r3, #138]	; 0x8a
    for (c=0; c<=21; c++) {
 23e8894:	3201      	adds	r2, #1
 23e8896:	2a16      	cmp	r2, #22
 23e8898:	f103 0301 	add.w	r3, r3, #1
 23e889c:	d1e7      	bne.n	23e886e <_Z10OLED_writePKc+0x66>
      }
    }

    // check length on new output line string
    len = strlen (str);
 23e889e:	4620      	mov	r0, r4
 23e88a0:	f7fe ffc2 	bl	23e7828 <strlen>
    if (len>21) {
 23e88a4:	2217      	movs	r2, #23
 23e88a6:	2815      	cmp	r0, #21
 23e88a8:	bfa8      	it	ge
 23e88aa:	2015      	movge	r0, #21
      len = 21;
    }
    for (c=0; c<=len; c++) {
 23e88ac:	4372      	muls	r2, r6
 23e88ae:	1e63      	subs	r3, r4, #1
 23e88b0:	18a9      	adds	r1, r5, r2
 23e88b2:	4404      	add	r4, r0
      oled_lines [bottom_line][c] = *(str+c);
 23e88b4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
    for (c=0; c<=len; c++) {
 23e88b8:	42a3      	cmp	r3, r4
      oled_lines [bottom_line][c] = *(str+c);
 23e88ba:	f801 7b01 	strb.w	r7, [r1], #1
    for (c=0; c<=len; c++) {
 23e88be:	d1f9      	bne.n	23e88b4 <_Z10OLED_writePKc+0xac>
 23e88c0:	1c43      	adds	r3, r0, #1
    }

    // Adding Padding
    for (;c<=21; c++) {
      oled_lines [bottom_line][c] = ' ';
 23e88c2:	4413      	add	r3, r2
 23e88c4:	2120      	movs	r1, #32
 23e88c6:	f1c0 0215 	rsb	r2, r0, #21
 23e88ca:	18e8      	adds	r0, r5, r3
 23e88cc:	f014 fabb 	bl	23fce46 <memset>
    }
    oled_lines [bottom_line][22] = (char) NULL;
 23e88d0:	2317      	movs	r3, #23
 23e88d2:	2200      	movs	r2, #0
 23e88d4:	fb03 5306 	mla	r3, r3, r6, r5
 23e88d8:	759a      	strb	r2, [r3, #22]
    
    OLED_update();
  }
}
 23e88da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    OLED_update();
 23e88de:	f7ff bf15 	b.w	23e870c <_Z11OLED_updatev>
}
 23e88e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23e88e4:	1006a1a1 	.word	0x1006a1a1
 23e88e8:	1007aa28 	.word	0x1007aa28
 23e88ec:	1007a987 	.word	0x1007a987
 23e88f0:	1007a99e 	.word	0x1007a99e
 23e88f4:	1007a9b5 	.word	0x1007a9b5
 23e88f8:	1007a970 	.word	0x1007a970

023e88fc <_Z12Serial_writePKc>:
/*
 * ======================================================================================================================
 * Serial_write() 
 * ======================================================================================================================
 */
void Serial_write(const char *str) {
 23e88fc:	b507      	push	{r0, r1, r2, lr}
  if (SerialConsoleEnabled) {
 23e88fe:	4b07      	ldr	r3, [pc, #28]	; (23e891c <_Z12Serial_writePKc+0x20>)
 23e8900:	781b      	ldrb	r3, [r3, #0]
 23e8902:	b143      	cbz	r3, 23e8916 <_Z12Serial_writePKc+0x1a>
 23e8904:	9001      	str	r0, [sp, #4]
    Serial.println(str);
 23e8906:	f011 fb15 	bl	23f9f34 <_Z16_fetch_usbserialv>
 23e890a:	9901      	ldr	r1, [sp, #4]
  }
}
 23e890c:	b003      	add	sp, #12
 23e890e:	f85d eb04 	ldr.w	lr, [sp], #4
    Serial.println(str);
 23e8912:	f010 bf01 	b.w	23f9718 <_ZN5Print7printlnEPKc>
}
 23e8916:	b003      	add	sp, #12
 23e8918:	f85d fb04 	ldr.w	pc, [sp], #4
 23e891c:	1006a827 	.word	0x1006a827

023e8920 <_Z14Serial_writelnPKc>:
/*
 * ======================================================================================================================
 * Serial_writeln() 
 * ======================================================================================================================
 */
void Serial_writeln(const char *str) {
 23e8920:	b507      	push	{r0, r1, r2, lr}
  if (SerialConsoleEnabled) {
 23e8922:	4b0a      	ldr	r3, [pc, #40]	; (23e894c <_Z14Serial_writelnPKc+0x2c>)
 23e8924:	781b      	ldrb	r3, [r3, #0]
 23e8926:	b16b      	cbz	r3, 23e8944 <_Z14Serial_writelnPKc+0x24>
 23e8928:	9001      	str	r0, [sp, #4]
    Serial.println(str);
 23e892a:	f011 fb03 	bl	23f9f34 <_Z16_fetch_usbserialv>
 23e892e:	9901      	ldr	r1, [sp, #4]
 23e8930:	f010 fef2 	bl	23f9718 <_ZN5Print7printlnEPKc>
    Serial.flush();
 23e8934:	f011 fafe 	bl	23f9f34 <_Z16_fetch_usbserialv>
 23e8938:	6803      	ldr	r3, [r0, #0]
 23e893a:	69db      	ldr	r3, [r3, #28]
  }
}
 23e893c:	b003      	add	sp, #12
 23e893e:	f85d eb04 	ldr.w	lr, [sp], #4
    Serial.flush();
 23e8942:	4718      	bx	r3
}
 23e8944:	b003      	add	sp, #12
 23e8946:	f85d fb04 	ldr.w	pc, [sp], #4
 23e894a:	bf00      	nop
 23e894c:	1006a827 	.word	0x1006a827

023e8950 <_Z6OutputPKc>:
/*
 * ======================================================================================================================
 * Output()
 * ======================================================================================================================
 */
void Output(const char *str) {
 23e8950:	b510      	push	{r4, lr}
 23e8952:	4604      	mov	r4, r0
  OLED_write(str);
 23e8954:	f7ff ff58 	bl	23e8808 <_Z10OLED_writePKc>
  Serial_write(str);
 23e8958:	4620      	mov	r0, r4
}
 23e895a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial_write(str);
 23e895e:	f7ff bfcd 	b.w	23e88fc <_Z12Serial_writePKc>
	...

023e8964 <_Z15OLED_initializev>:
/*
 * ======================================================================================================================
 * OLED_initialize() -- Initialize oled if enabled
 * ======================================================================================================================
 */
void OLED_initialize() {
 23e8964:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (DisplayEnabled) {
 23e8966:	4d30      	ldr	r5, [pc, #192]	; (23e8a28 <_Z15OLED_initializev+0xc4>)
 23e8968:	782b      	ldrb	r3, [r5, #0]
 23e896a:	2b00      	cmp	r3, #0
 23e896c:	d059      	beq.n	23e8a22 <_Z15OLED_initializev+0xbe>
    if (I2C_Device_Exist (OLED32_I2C_ADDRESS)) {
 23e896e:	203c      	movs	r0, #60	; 0x3c
 23e8970:	f7ff fde4 	bl	23e853c <_Z16I2C_Device_Existh>
 23e8974:	4604      	mov	r4, r0
 23e8976:	b318      	cbz	r0, 23e89c0 <_Z15OLED_initializev+0x5c>
      oled_type = OLED32_I2C_ADDRESS;
 23e8978:	223c      	movs	r2, #60	; 0x3c
      display32.begin(SSD1306_SWITCHCAPVCC, OLED32_I2C_ADDRESS);
 23e897a:	2501      	movs	r5, #1
 23e897c:	4c2b      	ldr	r4, [pc, #172]	; (23e8a2c <_Z15OLED_initializev+0xc8>)
      oled_type = OLED32_I2C_ADDRESS;
 23e897e:	4b2c      	ldr	r3, [pc, #176]	; (23e8a30 <_Z15OLED_initializev+0xcc>)
      display32.begin(SSD1306_SWITCHCAPVCC, OLED32_I2C_ADDRESS);
 23e8980:	2102      	movs	r1, #2
      oled_type = OLED32_I2C_ADDRESS;
 23e8982:	601a      	str	r2, [r3, #0]
      display32.begin(SSD1306_SWITCHCAPVCC, OLED32_I2C_ADDRESS);
 23e8984:	4620      	mov	r0, r4
 23e8986:	462b      	mov	r3, r5
 23e8988:	9500      	str	r5, [sp, #0]
 23e898a:	f00b fa3b 	bl	23f3e04 <_ZN16Adafruit_SSD13065beginEhhbb>
      display32.clearDisplay();
 23e898e:	4620      	mov	r0, r4
 23e8990:	f00b fa29 	bl	23f3de6 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display32.setTextSize(1); // Draw 2X-scale text
 23e8994:	4620      	mov	r0, r4
 23e8996:	4629      	mov	r1, r5
 23e8998:	f00a fa2b 	bl	23f2df2 <_ZN12Adafruit_GFX11setTextSizeEh>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23e899c:	2300      	movs	r3, #0
 23e899e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 23e89a2:	e9c4 3204 	strd	r3, r2, [r4, #16]
      display32.setTextColor(WHITE);
      display32.setCursor(0, 0);
      for (int r=0; r<4; r++) {
        oled_lines[r][0]=0;
 23e89a6:	4a23      	ldr	r2, [pc, #140]	; (23e8a34 <_Z15OLED_initializev+0xd0>)
      }
      OLED_write("OLED32:OK");
 23e89a8:	4823      	ldr	r0, [pc, #140]	; (23e8a38 <_Z15OLED_initializev+0xd4>)
        oled_lines[r][0]=0;
 23e89aa:	7013      	strb	r3, [r2, #0]
 23e89ac:	75d3      	strb	r3, [r2, #23]
 23e89ae:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
 23e89b2:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
    else {
      DisplayEnabled = false;
      SystemStatusBits |= SSB_OLED; // Turn on Bit
    }
  }
}
 23e89b6:	b002      	add	sp, #8
 23e89b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      OLED_write("OLED64:OK");
 23e89bc:	f7ff bf24 	b.w	23e8808 <_Z10OLED_writePKc>
    else if (I2C_Device_Exist (OLED64_I2C_ADDRESS)) {
 23e89c0:	203d      	movs	r0, #61	; 0x3d
 23e89c2:	f7ff fdbb 	bl	23e853c <_Z16I2C_Device_Existh>
 23e89c6:	b330      	cbz	r0, 23e8a16 <_Z15OLED_initializev+0xb2>
      oled_type = OLED64_I2C_ADDRESS;
 23e89c8:	223d      	movs	r2, #61	; 0x3d
      display64.begin(SSD1306_SWITCHCAPVCC, OLED64_I2C_ADDRESS);
 23e89ca:	2601      	movs	r6, #1
 23e89cc:	4d1b      	ldr	r5, [pc, #108]	; (23e8a3c <_Z15OLED_initializev+0xd8>)
      oled_type = OLED64_I2C_ADDRESS;
 23e89ce:	4b18      	ldr	r3, [pc, #96]	; (23e8a30 <_Z15OLED_initializev+0xcc>)
      display64.begin(SSD1306_SWITCHCAPVCC, OLED64_I2C_ADDRESS);
 23e89d0:	2102      	movs	r1, #2
      oled_type = OLED64_I2C_ADDRESS;
 23e89d2:	601a      	str	r2, [r3, #0]
      display64.begin(SSD1306_SWITCHCAPVCC, OLED64_I2C_ADDRESS);
 23e89d4:	4628      	mov	r0, r5
 23e89d6:	4633      	mov	r3, r6
 23e89d8:	9600      	str	r6, [sp, #0]
 23e89da:	f00b fa13 	bl	23f3e04 <_ZN16Adafruit_SSD13065beginEhhbb>
      display64.clearDisplay();
 23e89de:	4628      	mov	r0, r5
 23e89e0:	f00b fa01 	bl	23f3de6 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display64.setTextSize(1); // Draw 2X-scale text
 23e89e4:	4628      	mov	r0, r5
 23e89e6:	4631      	mov	r1, r6
 23e89e8:	f00a fa03 	bl	23f2df2 <_ZN12Adafruit_GFX11setTextSizeEh>
 23e89ec:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 23e89f0:	616b      	str	r3, [r5, #20]
        oled_lines[r][0]=0;
 23e89f2:	4b10      	ldr	r3, [pc, #64]	; (23e8a34 <_Z15OLED_initializev+0xd0>)
      OLED_write("OLED64:OK");
 23e89f4:	4812      	ldr	r0, [pc, #72]	; (23e8a40 <_Z15OLED_initializev+0xdc>)
    cursor_x = x;
 23e89f6:	612c      	str	r4, [r5, #16]
        oled_lines[r][0]=0;
 23e89f8:	701c      	strb	r4, [r3, #0]
 23e89fa:	75dc      	strb	r4, [r3, #23]
 23e89fc:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
 23e8a00:	f883 4045 	strb.w	r4, [r3, #69]	; 0x45
 23e8a04:	f883 405c 	strb.w	r4, [r3, #92]	; 0x5c
 23e8a08:	f883 4073 	strb.w	r4, [r3, #115]	; 0x73
 23e8a0c:	f883 408a 	strb.w	r4, [r3, #138]	; 0x8a
 23e8a10:	f883 40a1 	strb.w	r4, [r3, #161]	; 0xa1
      OLED_write("OLED64:OK");
 23e8a14:	e7cf      	b.n	23e89b6 <_Z15OLED_initializev+0x52>
      SystemStatusBits |= SSB_OLED; // Turn on Bit
 23e8a16:	4a0b      	ldr	r2, [pc, #44]	; (23e8a44 <_Z15OLED_initializev+0xe0>)
      DisplayEnabled = false;
 23e8a18:	7028      	strb	r0, [r5, #0]
      SystemStatusBits |= SSB_OLED; // Turn on Bit
 23e8a1a:	6813      	ldr	r3, [r2, #0]
 23e8a1c:	f043 0308 	orr.w	r3, r3, #8
 23e8a20:	6013      	str	r3, [r2, #0]
}
 23e8a22:	b002      	add	sp, #8
 23e8a24:	bd70      	pop	{r4, r5, r6, pc}
 23e8a26:	bf00      	nop
 23e8a28:	1006a1a1 	.word	0x1006a1a1
 23e8a2c:	1006ada4 	.word	0x1006ada4
 23e8a30:	1007aa28 	.word	0x1007aa28
 23e8a34:	1007a970 	.word	0x1007a970
 23e8a38:	023fd357 	.word	0x023fd357
 23e8a3c:	1006ae18 	.word	0x1006ae18
 23e8a40:	023fd361 	.word	0x023fd361
 23e8a44:	1006a22c 	.word	0x1006a22c

023e8a48 <_Z13stc_timestampv>:
/* 
 *=======================================================================================================================
 * stc_timestamp() - Read from System Time Clock and set timestamp string
 *=======================================================================================================================
 */
void stc_timestamp() {
 23e8a48:	b570      	push	{r4, r5, r6, lr}
 23e8a4a:	b086      	sub	sp, #24

  // ISO_8601 Time Format
  sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
 23e8a4c:	f011 f9a4 	bl	23f9d98 <_ZN9TimeClass4yearEv>
 23e8a50:	9005      	str	r0, [sp, #20]
 23e8a52:	f011 f999 	bl	23f9d88 <_ZN9TimeClass5monthEv>
 23e8a56:	9004      	str	r0, [sp, #16]
 23e8a58:	f011 f98a 	bl	23f9d70 <_ZN9TimeClass3dayEv>
 23e8a5c:	4604      	mov	r4, r0
 23e8a5e:	f011 f963 	bl	23f9d28 <_ZN9TimeClass4hourEv>
 23e8a62:	4605      	mov	r5, r0
 23e8a64:	f011 f96c 	bl	23f9d40 <_ZN9TimeClass6minuteEv>
 23e8a68:	4606      	mov	r6, r0
 23e8a6a:	f011 f975 	bl	23f9d58 <_ZN9TimeClass6secondEv>
 23e8a6e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 23e8a72:	e9cd 6002 	strd	r6, r0, [sp, #8]
 23e8a76:	e9cd 4500 	strd	r4, r5, [sp]
 23e8a7a:	4903      	ldr	r1, [pc, #12]	; (23e8a88 <_Z13stc_timestampv+0x40>)
 23e8a7c:	4803      	ldr	r0, [pc, #12]	; (23e8a8c <_Z13stc_timestampv+0x44>)
 23e8a7e:	f00f fbc1 	bl	23f8204 <sprintf>
    Time.year(), Time.month(), Time.day(),
    Time.hour(), Time.minute(), Time.second());
}
 23e8a82:	b006      	add	sp, #24
 23e8a84:	bd70      	pop	{r4, r5, r6, pc}
 23e8a86:	bf00      	nop
 23e8a88:	023fd36b 	.word	0x023fd36b
 23e8a8c:	1007abec 	.word	0x1007abec

023e8a90 <_Z13rtc_timestampv>:
/* 
 *=======================================================================================================================
 * rtc_timestamp() - Read from RTC and set timestamp string
 *=======================================================================================================================
 */
void rtc_timestamp() {
 23e8a90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  now = rtc.now(); //get the current date-time
 23e8a92:	490e      	ldr	r1, [pc, #56]	; (23e8acc <_Z13rtc_timestampv+0x3c>)
 23e8a94:	a804      	add	r0, sp, #16
 23e8a96:	f00c fe16 	bl	23f56c6 <_ZN11RTC_PCF85233nowEv>
 23e8a9a:	4b0d      	ldr	r3, [pc, #52]	; (23e8ad0 <_Z13rtc_timestampv+0x40>)
 23e8a9c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 23e8aa0:	9804      	ldr	r0, [sp, #16]
 23e8aa2:	809a      	strh	r2, [r3, #4]

  // ISO_8601 Time Format
  sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
 23e8aa4:	7959      	ldrb	r1, [r3, #5]
  now = rtc.now(); //get the current date-time
 23e8aa6:	6018      	str	r0, [r3, #0]

  /*!
      @brief  Return the year.
      @return Year (range: 2000--2099).
  */
  uint16_t year() const { return 2000U + yOff; }
 23e8aa8:	781a      	ldrb	r2, [r3, #0]
  sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
 23e8aaa:	9103      	str	r1, [sp, #12]
 23e8aac:	7919      	ldrb	r1, [r3, #4]
 23e8aae:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 23e8ab2:	9102      	str	r1, [sp, #8]
 23e8ab4:	78d9      	ldrb	r1, [r3, #3]
 23e8ab6:	4807      	ldr	r0, [pc, #28]	; (23e8ad4 <_Z13rtc_timestampv+0x44>)
 23e8ab8:	9101      	str	r1, [sp, #4]
 23e8aba:	7899      	ldrb	r1, [r3, #2]
 23e8abc:	9100      	str	r1, [sp, #0]
 23e8abe:	785b      	ldrb	r3, [r3, #1]
 23e8ac0:	4905      	ldr	r1, [pc, #20]	; (23e8ad8 <_Z13rtc_timestampv+0x48>)
 23e8ac2:	f00f fb9f 	bl	23f8204 <sprintf>
    now.year(), now.month(), now.day(),
    now.hour(), now.minute(), now.second());
}
 23e8ac6:	b007      	add	sp, #28
 23e8ac8:	f85d fb04 	ldr.w	pc, [sp], #4
 23e8acc:	1007abbc 	.word	0x1007abbc
 23e8ad0:	1006f54c 	.word	0x1006f54c
 23e8ad4:	1007abec 	.word	0x1007abec
 23e8ad8:	023fd36b 	.word	0x023fd36b

023e8adc <_Z14rtc_initializev>:
/* 
 *=======================================================================================================================
 * rtc_initialize()
 *=======================================================================================================================
 */
void rtc_initialize() {
 23e8adc:	b537      	push	{r0, r1, r2, r4, r5, lr}

  if (!rtc.begin()) { // Always returns true
 23e8ade:	f011 fc19 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e8ae2:	4601      	mov	r1, r0
 23e8ae4:	4825      	ldr	r0, [pc, #148]	; (23e8b7c <_Z14rtc_initializev+0xa0>)
 23e8ae6:	f00c fd6d 	bl	23f55c4 <_ZN11RTC_PCF85235beginEP7TwoWire>
 23e8aea:	b948      	cbnz	r0, 23e8b00 <_Z14rtc_initializev+0x24>
     Output("ERR:RTC NOT FOUND");
 23e8aec:	4824      	ldr	r0, [pc, #144]	; (23e8b80 <_Z14rtc_initializev+0xa4>)
 23e8aee:	f7ff ff2f 	bl	23e8950 <_Z6OutputPKc>
     SystemStatusBits |= SSB_RTC; // Turn on Bit
 23e8af2:	4a24      	ldr	r2, [pc, #144]	; (23e8b84 <_Z14rtc_initializev+0xa8>)
 23e8af4:	6813      	ldr	r3, [r2, #0]
 23e8af6:	f043 0304 	orr.w	r3, r3, #4
 23e8afa:	6013      	str	r3, [r2, #0]
  }
  else {
    Output ("NEED GSM TIME->RTC");
    delay (5000); // Give the user some time to see this problem.
  }
}
 23e8afc:	b003      	add	sp, #12
 23e8afe:	bd30      	pop	{r4, r5, pc}
  if (!I2C_Device_Exist(PCF8523_ADDRESS)) {
 23e8b00:	2068      	movs	r0, #104	; 0x68
 23e8b02:	f7ff fd1b 	bl	23e853c <_Z16I2C_Device_Existh>
 23e8b06:	b970      	cbnz	r0, 23e8b26 <_Z14rtc_initializev+0x4a>
    Output("ERR:RTC-I2C NOTFOUND");
 23e8b08:	481f      	ldr	r0, [pc, #124]	; (23e8b88 <_Z14rtc_initializev+0xac>)
 23e8b0a:	f7ff ff21 	bl	23e8950 <_Z6OutputPKc>
    SystemStatusBits |= SSB_RTC; // Turn on Bit
 23e8b0e:	4a1d      	ldr	r2, [pc, #116]	; (23e8b84 <_Z14rtc_initializev+0xa8>)
 23e8b10:	6813      	ldr	r3, [r2, #0]
 23e8b12:	f043 0304 	orr.w	r3, r3, #4
 23e8b16:	6013      	str	r3, [r2, #0]
    delay (5000); // Give the user some time to see this problem.
 23e8b18:	f241 3088 	movw	r0, #5000	; 0x1388
}
 23e8b1c:	b003      	add	sp, #12
 23e8b1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    delay (5000); // Give the user some time to see this problem.
 23e8b22:	f00f bbfb 	b.w	23f831c <delay>
  RTC_exists = true; // We have a clock hardware connected
 23e8b26:	2501      	movs	r5, #1
 23e8b28:	4b18      	ldr	r3, [pc, #96]	; (23e8b8c <_Z14rtc_initializev+0xb0>)
 23e8b2a:	4c19      	ldr	r4, [pc, #100]	; (23e8b90 <_Z14rtc_initializev+0xb4>)
 23e8b2c:	701d      	strb	r5, [r3, #0]
  rtc_timestamp();
 23e8b2e:	f7ff ffaf 	bl	23e8a90 <_Z13rtc_timestampv>
  sprintf (msgbuf, "%s*", timestamp);
 23e8b32:	4a18      	ldr	r2, [pc, #96]	; (23e8b94 <_Z14rtc_initializev+0xb8>)
 23e8b34:	4918      	ldr	r1, [pc, #96]	; (23e8b98 <_Z14rtc_initializev+0xbc>)
 23e8b36:	4819      	ldr	r0, [pc, #100]	; (23e8b9c <_Z14rtc_initializev+0xc0>)
 23e8b38:	f00f fb64 	bl	23f8204 <sprintf>
  Output (msgbuf);
 23e8b3c:	4817      	ldr	r0, [pc, #92]	; (23e8b9c <_Z14rtc_initializev+0xc0>)
 23e8b3e:	f7ff ff07 	bl	23e8950 <_Z6OutputPKc>
 23e8b42:	7823      	ldrb	r3, [r4, #0]
  if ((now.year() >= 2023) && (now.year() <= 2031)) {
 23e8b44:	3b17      	subs	r3, #23
 23e8b46:	2b08      	cmp	r3, #8
 23e8b48:	d814      	bhi.n	23e8b74 <_Z14rtc_initializev+0x98>
    Output("RTC:VALID");
 23e8b4a:	4815      	ldr	r0, [pc, #84]	; (23e8ba0 <_Z14rtc_initializev+0xc4>)
 23e8b4c:	f7ff ff00 	bl	23e8950 <_Z6OutputPKc>
    now = rtc.now();
 23e8b50:	490a      	ldr	r1, [pc, #40]	; (23e8b7c <_Z14rtc_initializev+0xa0>)
 23e8b52:	4668      	mov	r0, sp
 23e8b54:	f00c fdb7 	bl	23f56c6 <_ZN11RTC_PCF85233nowEv>
 23e8b58:	9800      	ldr	r0, [sp, #0]
 23e8b5a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 23e8b5e:	6020      	str	r0, [r4, #0]
    Time.setTime(now.unixtime()); // If RTC valid, we set STC.
 23e8b60:	4620      	mov	r0, r4
    now = rtc.now();
 23e8b62:	80a3      	strh	r3, [r4, #4]
    Time.setTime(now.unixtime()); // If RTC valid, we set STC.
 23e8b64:	f00c fd16 	bl	23f5594 <_ZNK8DateTime8unixtimeEv>
 23e8b68:	2100      	movs	r1, #0
 23e8b6a:	f011 f89d 	bl	23f9ca8 <_ZN9TimeClass7setTimeEx>
    RTC_valid = true;
 23e8b6e:	4b0d      	ldr	r3, [pc, #52]	; (23e8ba4 <_Z14rtc_initializev+0xc8>)
 23e8b70:	701d      	strb	r5, [r3, #0]
 23e8b72:	e7c3      	b.n	23e8afc <_Z14rtc_initializev+0x20>
    Output ("NEED GSM TIME->RTC");
 23e8b74:	480c      	ldr	r0, [pc, #48]	; (23e8ba8 <_Z14rtc_initializev+0xcc>)
 23e8b76:	f7ff feeb 	bl	23e8950 <_Z6OutputPKc>
 23e8b7a:	e7cd      	b.n	23e8b18 <_Z14rtc_initializev+0x3c>
 23e8b7c:	1007abbc 	.word	0x1007abbc
 23e8b80:	023fd387 	.word	0x023fd387
 23e8b84:	1006a22c 	.word	0x1006a22c
 23e8b88:	023fd399 	.word	0x023fd399
 23e8b8c:	1006a365 	.word	0x1006a365
 23e8b90:	1006f54c 	.word	0x1006f54c
 23e8b94:	1007abec 	.word	0x1007abec
 23e8b98:	023fd3ae 	.word	0x023fd3ae
 23e8b9c:	1006f148 	.word	0x1006f148
 23e8ba0:	023fd3b2 	.word	0x023fd3b2
 23e8ba4:	1006a366 	.word	0x1006a366
 23e8ba8:	023fd3bc 	.word	0x023fd3bc

023e8bac <_Z15RTC_UpdateCheckv>:
/*
 * ======================================================================================================================
 * RTC_UpdateCheck() - Check if we need to Set or Update the RTC clock from the Cell Network   
 * ======================================================================================================================
 */
void RTC_UpdateCheck() {
 23e8bac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (RTC_exists && Particle.connected()) { 
 23e8bb0:	4b4f      	ldr	r3, [pc, #316]	; (23e8cf0 <_Z15RTC_UpdateCheckv+0x144>)
void RTC_UpdateCheck() {
 23e8bb2:	b087      	sub	sp, #28
  if (RTC_exists && Particle.connected()) { 
 23e8bb4:	781b      	ldrb	r3, [r3, #0]
 23e8bb6:	b36b      	cbz	r3, 23e8c14 <_Z15RTC_UpdateCheckv+0x68>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23e8bb8:	f00f f9c6 	bl	23f7f48 <spark_cloud_flag_connected>
 23e8bbc:	b350      	cbz	r0, 23e8c14 <_Z15RTC_UpdateCheckv+0x68>
    // Wer have a RTC and We have connected to the Cell network at some point
    if (!RTC_valid) {
 23e8bbe:	4f4d      	ldr	r7, [pc, #308]	; (23e8cf4 <_Z15RTC_UpdateCheckv+0x148>)
 23e8bc0:	783b      	ldrb	r3, [r7, #0]
 23e8bc2:	bb53      	cbnz	r3, 23e8c1a <_Z15RTC_UpdateCheckv+0x6e>
      // Set Uninitialized RTC from STC. Which has been set from the Cloud
      rtc.adjust(DateTime(Time.year(), Time.month(), Time.day(), Time.hour(), Time.minute(), Time.second() ));
 23e8bc4:	f011 f8e8 	bl	23f9d98 <_ZN9TimeClass4yearEv>
 23e8bc8:	4606      	mov	r6, r0
 23e8bca:	f011 f8dd 	bl	23f9d88 <_ZN9TimeClass5monthEv>
 23e8bce:	4680      	mov	r8, r0
 23e8bd0:	f011 f8ce 	bl	23f9d70 <_ZN9TimeClass3dayEv>
 23e8bd4:	4681      	mov	r9, r0
 23e8bd6:	f011 f8a7 	bl	23f9d28 <_ZN9TimeClass4hourEv>
 23e8bda:	4604      	mov	r4, r0
 23e8bdc:	f011 f8b0 	bl	23f9d40 <_ZN9TimeClass6minuteEv>
 23e8be0:	4605      	mov	r5, r0
 23e8be2:	f011 f8b9 	bl	23f9d58 <_ZN9TimeClass6secondEv>
 23e8be6:	b2ed      	uxtb	r5, r5
 23e8be8:	b2c0      	uxtb	r0, r0
 23e8bea:	b2e4      	uxtb	r4, r4
 23e8bec:	fa5f f389 	uxtb.w	r3, r9
 23e8bf0:	fa5f f288 	uxtb.w	r2, r8
 23e8bf4:	9002      	str	r0, [sp, #8]
 23e8bf6:	b2b1      	uxth	r1, r6
 23e8bf8:	9501      	str	r5, [sp, #4]
 23e8bfa:	9400      	str	r4, [sp, #0]
 23e8bfc:	a804      	add	r0, sp, #16
 23e8bfe:	f00c fcb5 	bl	23f556c <_ZN8DateTimeC1Ethhhhh>
 23e8c02:	483d      	ldr	r0, [pc, #244]	; (23e8cf8 <_Z15RTC_UpdateCheckv+0x14c>)
 23e8c04:	a904      	add	r1, sp, #16
 23e8c06:	f00c fcee 	bl	23f55e6 <_ZN11RTC_PCF85236adjustERK8DateTime>
      Output("RTC: Set");
 23e8c0a:	483c      	ldr	r0, [pc, #240]	; (23e8cfc <_Z15RTC_UpdateCheckv+0x150>)
 23e8c0c:	f7ff fea0 	bl	23e8950 <_Z6OutputPKc>
      RTC_valid = true;
 23e8c10:	2301      	movs	r3, #1
 23e8c12:	703b      	strb	r3, [r7, #0]
      sprintf (msgbuf, "%s*", timestamp);
      Output (msgbuf);
      LastTimeUpdate = System.millis();
    }
  }
 23e8c14:	b007      	add	sp, #28
 23e8c16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (LastTimeUpdate == 0){
 23e8c1a:	4c39      	ldr	r4, [pc, #228]	; (23e8d00 <_Z15RTC_UpdateCheckv+0x154>)
 23e8c1c:	e9d4 2300 	ldrd	r2, r3, [r4]
 23e8c20:	4313      	orrs	r3, r2
 23e8c22:	d134      	bne.n	23e8c8e <_Z15RTC_UpdateCheckv+0xe2>
      rtc.adjust(DateTime(Time.year(), Time.month(), Time.day(), Time.hour(), Time.minute(), Time.second() ));
 23e8c24:	f011 f8b8 	bl	23f9d98 <_ZN9TimeClass4yearEv>
 23e8c28:	4607      	mov	r7, r0
 23e8c2a:	f011 f8ad 	bl	23f9d88 <_ZN9TimeClass5monthEv>
 23e8c2e:	4680      	mov	r8, r0
 23e8c30:	f011 f89e 	bl	23f9d70 <_ZN9TimeClass3dayEv>
 23e8c34:	4681      	mov	r9, r0
 23e8c36:	f011 f877 	bl	23f9d28 <_ZN9TimeClass4hourEv>
 23e8c3a:	4605      	mov	r5, r0
 23e8c3c:	f011 f880 	bl	23f9d40 <_ZN9TimeClass6minuteEv>
 23e8c40:	4606      	mov	r6, r0
 23e8c42:	f011 f889 	bl	23f9d58 <_ZN9TimeClass6secondEv>
 23e8c46:	b2f6      	uxtb	r6, r6
 23e8c48:	b2c0      	uxtb	r0, r0
 23e8c4a:	b2ed      	uxtb	r5, r5
 23e8c4c:	9002      	str	r0, [sp, #8]
 23e8c4e:	fa5f f389 	uxtb.w	r3, r9
 23e8c52:	fa5f f288 	uxtb.w	r2, r8
 23e8c56:	b2b9      	uxth	r1, r7
 23e8c58:	9601      	str	r6, [sp, #4]
 23e8c5a:	9500      	str	r5, [sp, #0]
 23e8c5c:	a804      	add	r0, sp, #16
 23e8c5e:	f00c fc85 	bl	23f556c <_ZN8DateTimeC1Ethhhhh>
 23e8c62:	4825      	ldr	r0, [pc, #148]	; (23e8cf8 <_Z15RTC_UpdateCheckv+0x14c>)
 23e8c64:	a904      	add	r1, sp, #16
 23e8c66:	f00c fcbe 	bl	23f55e6 <_ZN11RTC_PCF85236adjustERK8DateTime>
      Output("RTC: 1ST SYNC");
 23e8c6a:	4826      	ldr	r0, [pc, #152]	; (23e8d04 <_Z15RTC_UpdateCheckv+0x158>)
      Output("RTC: 2HR SYNC");
 23e8c6c:	f7ff fe70 	bl	23e8950 <_Z6OutputPKc>
      rtc_timestamp();
 23e8c70:	f7ff ff0e 	bl	23e8a90 <_Z13rtc_timestampv>
      sprintf (msgbuf, "%s*", timestamp);
 23e8c74:	4a24      	ldr	r2, [pc, #144]	; (23e8d08 <_Z15RTC_UpdateCheckv+0x15c>)
 23e8c76:	4925      	ldr	r1, [pc, #148]	; (23e8d0c <_Z15RTC_UpdateCheckv+0x160>)
 23e8c78:	4825      	ldr	r0, [pc, #148]	; (23e8d10 <_Z15RTC_UpdateCheckv+0x164>)
 23e8c7a:	f00f fac3 	bl	23f8204 <sprintf>
      Output (msgbuf);
 23e8c7e:	4824      	ldr	r0, [pc, #144]	; (23e8d10 <_Z15RTC_UpdateCheckv+0x164>)
 23e8c80:	f7ff fe66 	bl	23e8950 <_Z6OutputPKc>
      LastTimeUpdate = System.millis();
 23e8c84:	f7ff fbcc 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23e8c88:	e9c4 0100 	strd	r0, r1, [r4]
 23e8c8c:	e7c2      	b.n	23e8c14 <_Z15RTC_UpdateCheckv+0x68>
    else if ((System.millis() - LastTimeUpdate) >= 2*3600*1000) {  // It's been 2 hours since last RTC update
 23e8c8e:	f7ff fbc7 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23e8c92:	e9d4 3200 	ldrd	r3, r2, [r4]
 23e8c96:	1ac0      	subs	r0, r0, r3
 23e8c98:	4b1e      	ldr	r3, [pc, #120]	; (23e8d14 <_Z15RTC_UpdateCheckv+0x168>)
 23e8c9a:	eb61 0102 	sbc.w	r1, r1, r2
 23e8c9e:	4298      	cmp	r0, r3
 23e8ca0:	f171 0300 	sbcs.w	r3, r1, #0
 23e8ca4:	d3b6      	bcc.n	23e8c14 <_Z15RTC_UpdateCheckv+0x68>
      rtc.adjust(DateTime(Time.year(), Time.month(), Time.day(), Time.hour(), Time.minute(), Time.second() ));
 23e8ca6:	f011 f877 	bl	23f9d98 <_ZN9TimeClass4yearEv>
 23e8caa:	4607      	mov	r7, r0
 23e8cac:	f011 f86c 	bl	23f9d88 <_ZN9TimeClass5monthEv>
 23e8cb0:	4680      	mov	r8, r0
 23e8cb2:	f011 f85d 	bl	23f9d70 <_ZN9TimeClass3dayEv>
 23e8cb6:	4681      	mov	r9, r0
 23e8cb8:	f011 f836 	bl	23f9d28 <_ZN9TimeClass4hourEv>
 23e8cbc:	4605      	mov	r5, r0
 23e8cbe:	f011 f83f 	bl	23f9d40 <_ZN9TimeClass6minuteEv>
 23e8cc2:	4606      	mov	r6, r0
 23e8cc4:	f011 f848 	bl	23f9d58 <_ZN9TimeClass6secondEv>
 23e8cc8:	b2f6      	uxtb	r6, r6
 23e8cca:	b2c0      	uxtb	r0, r0
 23e8ccc:	b2ed      	uxtb	r5, r5
 23e8cce:	9002      	str	r0, [sp, #8]
 23e8cd0:	fa5f f389 	uxtb.w	r3, r9
 23e8cd4:	fa5f f288 	uxtb.w	r2, r8
 23e8cd8:	b2b9      	uxth	r1, r7
 23e8cda:	9601      	str	r6, [sp, #4]
 23e8cdc:	9500      	str	r5, [sp, #0]
 23e8cde:	a804      	add	r0, sp, #16
 23e8ce0:	f00c fc44 	bl	23f556c <_ZN8DateTimeC1Ethhhhh>
 23e8ce4:	4804      	ldr	r0, [pc, #16]	; (23e8cf8 <_Z15RTC_UpdateCheckv+0x14c>)
 23e8ce6:	a904      	add	r1, sp, #16
 23e8ce8:	f00c fc7d 	bl	23f55e6 <_ZN11RTC_PCF85236adjustERK8DateTime>
      Output("RTC: 2HR SYNC");
 23e8cec:	480a      	ldr	r0, [pc, #40]	; (23e8d18 <_Z15RTC_UpdateCheckv+0x16c>)
 23e8cee:	e7bd      	b.n	23e8c6c <_Z15RTC_UpdateCheckv+0xc0>
 23e8cf0:	1006a365 	.word	0x1006a365
 23e8cf4:	1006a366 	.word	0x1006a366
 23e8cf8:	1007abbc 	.word	0x1007abbc
 23e8cfc:	023fd3cf 	.word	0x023fd3cf
 23e8d00:	1006a350 	.word	0x1006a350
 23e8d04:	023fd3d8 	.word	0x023fd3d8
 23e8d08:	1007abec 	.word	0x1007abec
 23e8d0c:	023fd3ae 	.word	0x023fd3ae
 23e8d10:	1006f148 	.word	0x1006f148
 23e8d14:	006ddd00 	.word	0x006ddd00
 23e8d18:	023fd3e6 	.word	0x023fd3e6

023e8d1c <_Z19lora_relay_msg_freeP18LORA_MSG_RELAY_STR>:
 *=======================================================================================================================
 * lora_relay_msg_free()
 *=======================================================================================================================
 */
void lora_relay_msg_free(LORA_MSG_RELAY_STR *m) {
  m->need2log = false;
 23e8d1c:	2100      	movs	r1, #0
  m->message_type = 0;
  memset (m->message, 0, LORA_RELAY_MSG_LENGTH);
 23e8d1e:	f44f 7280 	mov.w	r2, #256	; 0x100
  m->need2log = false;
 23e8d22:	7001      	strb	r1, [r0, #0]
  m->message_type = 0;
 23e8d24:	6041      	str	r1, [r0, #4]
  memset (m->message, 0, LORA_RELAY_MSG_LENGTH);
 23e8d26:	3008      	adds	r0, #8
 23e8d28:	f014 b88d 	b.w	23fce46 <memset>

023e8d2c <_Z19lora_relay_need2logv>:
 *=======================================================================================================================
 * lora_relay_need2log() - Return true if we have a relay that needs to be logged
 *=======================================================================================================================
 */
bool lora_relay_need2log() {
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e8d2c:	2300      	movs	r3, #0
    if (lora_msg_relay[i].need2log) {
 23e8d2e:	f44f 7284 	mov.w	r2, #264	; 0x108
 23e8d32:	4904      	ldr	r1, [pc, #16]	; (23e8d44 <_Z19lora_relay_need2logv+0x18>)
 23e8d34:	fb02 f003 	mul.w	r0, r2, r3
 23e8d38:	5c40      	ldrb	r0, [r0, r1]
 23e8d3a:	b910      	cbnz	r0, 23e8d42 <_Z19lora_relay_need2logv+0x16>
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e8d3c:	3301      	adds	r3, #1
 23e8d3e:	2b40      	cmp	r3, #64	; 0x40
 23e8d40:	d1f8      	bne.n	23e8d34 <_Z19lora_relay_need2logv+0x8>
      return (true);
    }
  }
  return(false);
}
 23e8d42:	4770      	bx	lr
 23e8d44:	1006aee0 	.word	0x1006aee0

023e8d48 <_Z19lora_relay_notinusev>:
 *=======================================================================================================================
 * lora_relay_notinuse() - return first open spot or -1 if full
 *=======================================================================================================================
 */
int lora_relay_notinuse() {
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e8d48:	2000      	movs	r0, #0
    if (!lora_msg_relay[i].need2log) {
 23e8d4a:	f44f 7384 	mov.w	r3, #264	; 0x108
 23e8d4e:	4a05      	ldr	r2, [pc, #20]	; (23e8d64 <_Z19lora_relay_notinusev+0x1c>)
 23e8d50:	fb03 f100 	mul.w	r1, r3, r0
 23e8d54:	5c89      	ldrb	r1, [r1, r2]
 23e8d56:	b121      	cbz	r1, 23e8d62 <_Z19lora_relay_notinusev+0x1a>
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e8d58:	3001      	adds	r0, #1
 23e8d5a:	2840      	cmp	r0, #64	; 0x40
 23e8d5c:	d1f8      	bne.n	23e8d50 <_Z19lora_relay_notinusev+0x8>
      return (i);
    }
  }
  return(-1);
 23e8d5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23e8d62:	4770      	bx	lr
 23e8d64:	1006aee0 	.word	0x1006aee0

023e8d68 <_Z23lora_relay_need2log_idxv>:
 *=======================================================================================================================
 * lora_relay_need2log_idx() - return first need2log spot or -1 if none
 *=======================================================================================================================
 */
int lora_relay_need2log_idx() {
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e8d68:	2000      	movs	r0, #0
    if (lora_msg_relay[i].need2log) {
 23e8d6a:	f44f 7384 	mov.w	r3, #264	; 0x108
 23e8d6e:	4a05      	ldr	r2, [pc, #20]	; (23e8d84 <_Z23lora_relay_need2log_idxv+0x1c>)
 23e8d70:	fb03 f100 	mul.w	r1, r3, r0
 23e8d74:	5c89      	ldrb	r1, [r1, r2]
 23e8d76:	b921      	cbnz	r1, 23e8d82 <_Z23lora_relay_need2log_idxv+0x1a>
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e8d78:	3001      	adds	r0, #1
 23e8d7a:	2840      	cmp	r0, #64	; 0x40
 23e8d7c:	d1f8      	bne.n	23e8d70 <_Z23lora_relay_need2log_idxv+0x8>
      return (i);
    }
  }
  return(-1);
 23e8d7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23e8d82:	4770      	bx	lr
 23e8d84:	1006aee0 	.word	0x1006aee0

023e8d88 <_Z22lora_device_initializev>:
/* 
 *=======================================================================================================================
 * lora_device_initialize()
 *=======================================================================================================================
 */
void lora_device_initialize() {
 23e8d88:	b538      	push	{r3, r4, r5, lr}
  if (LORA_exists) {
 23e8d8a:	4b07      	ldr	r3, [pc, #28]	; (23e8da8 <_Z22lora_device_initializev+0x20>)
 23e8d8c:	781b      	ldrb	r3, [r3, #0]
 23e8d8e:	b14b      	cbz	r3, 23e8da4 <_Z22lora_device_initializev+0x1c>
    // Init LoRa Relay Message structure
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e8d90:	2400      	movs	r4, #0
 23e8d92:	4d06      	ldr	r5, [pc, #24]	; (23e8dac <_Z22lora_device_initializev+0x24>)
      lora_relay_msg_free(&lora_msg_relay[i]);
 23e8d94:	4628      	mov	r0, r5
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e8d96:	3401      	adds	r4, #1
      lora_relay_msg_free(&lora_msg_relay[i]);
 23e8d98:	f7ff ffc0 	bl	23e8d1c <_Z19lora_relay_msg_freeP18LORA_MSG_RELAY_STR>
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e8d9c:	2c40      	cmp	r4, #64	; 0x40
 23e8d9e:	f505 7584 	add.w	r5, r5, #264	; 0x108
 23e8da2:	d1f7      	bne.n	23e8d94 <_Z22lora_device_initializev+0xc>
    }
  }
}
 23e8da4:	bd38      	pop	{r3, r4, r5, pc}
 23e8da6:	bf00      	nop
 23e8da8:	1006a349 	.word	0x1006a349
 23e8dac:	1006aee0 	.word	0x1006aee0

023e8db0 <_Z16lora_cf_validatev>:
/* 
 *=======================================================================================================================
 * lora_cf_validate() - Validate LoRa variables from CONFIG.TXT
 *=======================================================================================================================
 */
bool lora_cf_validate() {
 23e8db0:	b570      	push	{r4, r5, r6, lr}
  if (cf_aes_pkey == NULL) {
 23e8db2:	4b2a      	ldr	r3, [pc, #168]	; (23e8e5c <_Z16lora_cf_validatev+0xac>)
 23e8db4:	681d      	ldr	r5, [r3, #0]
 23e8db6:	b925      	cbnz	r5, 23e8dc2 <_Z16lora_cf_validatev+0x12>
    Output ("AES PKEY !SET");
 23e8db8:	4829      	ldr	r0, [pc, #164]	; (23e8e60 <_Z16lora_cf_validatev+0xb0>)
    return (false);
  }
  else if (strlen (cf_aes_pkey) != 16) {
    Output ("AES PKEY !16 Bytes");
 23e8dba:	f7ff fdc9 	bl	23e8950 <_Z6OutputPKc>
    return (false);    
 23e8dbe:	2000      	movs	r0, #0
    sprintf(msgbuf, "AES_MYIV[%u]", AES_MYIV); Output (msgbuf);

    Output ("LORA CFV OK");
    return (true);
  }
}
 23e8dc0:	bd70      	pop	{r4, r5, r6, pc}
  else if (strlen (cf_aes_pkey) != 16) {
 23e8dc2:	4628      	mov	r0, r5
 23e8dc4:	f7fe fd30 	bl	23e7828 <strlen>
 23e8dc8:	2810      	cmp	r0, #16
 23e8dca:	d001      	beq.n	23e8dd0 <_Z16lora_cf_validatev+0x20>
    Output ("AES PKEY !16 Bytes");
 23e8dcc:	4825      	ldr	r0, [pc, #148]	; (23e8e64 <_Z16lora_cf_validatev+0xb4>)
 23e8dce:	e7f4      	b.n	23e8dba <_Z16lora_cf_validatev+0xa>
  else if (cf_aes_myiv == 0) {
 23e8dd0:	4e25      	ldr	r6, [pc, #148]	; (23e8e68 <_Z16lora_cf_validatev+0xb8>)
 23e8dd2:	6834      	ldr	r4, [r6, #0]
 23e8dd4:	b90c      	cbnz	r4, 23e8dda <_Z16lora_cf_validatev+0x2a>
    Output ("AES MYIV !SET");
 23e8dd6:	4825      	ldr	r0, [pc, #148]	; (23e8e6c <_Z16lora_cf_validatev+0xbc>)
 23e8dd8:	e7ef      	b.n	23e8dba <_Z16lora_cf_validatev+0xa>
  else if ((cf_lora_txpower<5) || (cf_lora_txpower>23)) {
 23e8dda:	4b25      	ldr	r3, [pc, #148]	; (23e8e70 <_Z16lora_cf_validatev+0xc0>)
 23e8ddc:	681b      	ldr	r3, [r3, #0]
 23e8dde:	3b05      	subs	r3, #5
 23e8de0:	2b12      	cmp	r3, #18
 23e8de2:	d901      	bls.n	23e8de8 <_Z16lora_cf_validatev+0x38>
    Output ("LORA PWR ERR");
 23e8de4:	4823      	ldr	r0, [pc, #140]	; (23e8e74 <_Z16lora_cf_validatev+0xc4>)
 23e8de6:	e7e8      	b.n	23e8dba <_Z16lora_cf_validatev+0xa>
  else if ((cf_lora_freq!=915) && (cf_lora_freq!=866) && (cf_lora_freq!=433)) {
 23e8de8:	f240 3293 	movw	r2, #915	; 0x393
 23e8dec:	4b22      	ldr	r3, [pc, #136]	; (23e8e78 <_Z16lora_cf_validatev+0xc8>)
 23e8dee:	681b      	ldr	r3, [r3, #0]
 23e8df0:	4293      	cmp	r3, r2
 23e8df2:	d009      	beq.n	23e8e08 <_Z16lora_cf_validatev+0x58>
 23e8df4:	f240 3262 	movw	r2, #866	; 0x362
 23e8df8:	4293      	cmp	r3, r2
 23e8dfa:	d005      	beq.n	23e8e08 <_Z16lora_cf_validatev+0x58>
 23e8dfc:	f240 12b1 	movw	r2, #433	; 0x1b1
 23e8e00:	4293      	cmp	r3, r2
 23e8e02:	d001      	beq.n	23e8e08 <_Z16lora_cf_validatev+0x58>
    Output ("LORA FREQ ERR");
 23e8e04:	481d      	ldr	r0, [pc, #116]	; (23e8e7c <_Z16lora_cf_validatev+0xcc>)
 23e8e06:	e7d8      	b.n	23e8dba <_Z16lora_cf_validatev+0xa>
  else if ((cf_lora_unitid<0) || (cf_lora_unitid>254)) {
 23e8e08:	4b1d      	ldr	r3, [pc, #116]	; (23e8e80 <_Z16lora_cf_validatev+0xd0>)
 23e8e0a:	681b      	ldr	r3, [r3, #0]
 23e8e0c:	2bfe      	cmp	r3, #254	; 0xfe
 23e8e0e:	d901      	bls.n	23e8e14 <_Z16lora_cf_validatev+0x64>
    Output ("LORA ADDR ERR");
 23e8e10:	481c      	ldr	r0, [pc, #112]	; (23e8e84 <_Z16lora_cf_validatev+0xd4>)
 23e8e12:	e7d2      	b.n	23e8dba <_Z16lora_cf_validatev+0xa>
    memcpy ((char *)AES_KEY, cf_aes_pkey, 16);
 23e8e14:	462b      	mov	r3, r5
 23e8e16:	4a1c      	ldr	r2, [pc, #112]	; (23e8e88 <_Z16lora_cf_validatev+0xd8>)
 23e8e18:	f105 0110 	add.w	r1, r5, #16
 23e8e1c:	f853 0b04 	ldr.w	r0, [r3], #4
 23e8e20:	428b      	cmp	r3, r1
 23e8e22:	f842 0b04 	str.w	r0, [r2], #4
 23e8e26:	d1f9      	bne.n	23e8e1c <_Z16lora_cf_validatev+0x6c>
    sprintf(msgbuf, "AES_KEY[%s]", cf_aes_pkey); Output (msgbuf);
 23e8e28:	462a      	mov	r2, r5
 23e8e2a:	4918      	ldr	r1, [pc, #96]	; (23e8e8c <_Z16lora_cf_validatev+0xdc>)
 23e8e2c:	4818      	ldr	r0, [pc, #96]	; (23e8e90 <_Z16lora_cf_validatev+0xe0>)
 23e8e2e:	f00f f9e9 	bl	23f8204 <sprintf>
 23e8e32:	4817      	ldr	r0, [pc, #92]	; (23e8e90 <_Z16lora_cf_validatev+0xe0>)
 23e8e34:	f7ff fd8c 	bl	23e8950 <_Z6OutputPKc>
    AES_MYIV=cf_aes_myiv;
 23e8e38:	6832      	ldr	r2, [r6, #0]
 23e8e3a:	4916      	ldr	r1, [pc, #88]	; (23e8e94 <_Z16lora_cf_validatev+0xe4>)
 23e8e3c:	17d3      	asrs	r3, r2, #31
 23e8e3e:	e9c1 2300 	strd	r2, r3, [r1]
    sprintf(msgbuf, "AES_MYIV[%u]", AES_MYIV); Output (msgbuf);
 23e8e42:	4813      	ldr	r0, [pc, #76]	; (23e8e90 <_Z16lora_cf_validatev+0xe0>)
 23e8e44:	4914      	ldr	r1, [pc, #80]	; (23e8e98 <_Z16lora_cf_validatev+0xe8>)
 23e8e46:	f00f f9dd 	bl	23f8204 <sprintf>
 23e8e4a:	4811      	ldr	r0, [pc, #68]	; (23e8e90 <_Z16lora_cf_validatev+0xe0>)
 23e8e4c:	f7ff fd80 	bl	23e8950 <_Z6OutputPKc>
    Output ("LORA CFV OK");
 23e8e50:	4812      	ldr	r0, [pc, #72]	; (23e8e9c <_Z16lora_cf_validatev+0xec>)
 23e8e52:	f7ff fd7d 	bl	23e8950 <_Z6OutputPKc>
    return (true);
 23e8e56:	2001      	movs	r0, #1
 23e8e58:	e7b2      	b.n	23e8dc0 <_Z16lora_cf_validatev+0x10>
 23e8e5a:	bf00      	nop
 23e8e5c:	1006acac 	.word	0x1006acac
 23e8e60:	023fd3f4 	.word	0x023fd3f4
 23e8e64:	023fd402 	.word	0x023fd402
 23e8e68:	1006aca8 	.word	0x1006aca8
 23e8e6c:	023fd415 	.word	0x023fd415
 23e8e70:	1006a248 	.word	0x1006a248
 23e8e74:	023fd423 	.word	0x023fd423
 23e8e78:	1006a244 	.word	0x1006a244
 23e8e7c:	023fd430 	.word	0x023fd430
 23e8e80:	1006a24c 	.word	0x1006a24c
 23e8e84:	023fd43e 	.word	0x023fd43e
 23e8e88:	1006a2fc 	.word	0x1006a2fc
 23e8e8c:	023fd44c 	.word	0x023fd44c
 23e8e90:	1006f148 	.word	0x1006f148
 23e8e94:	1006a310 	.word	0x1006a310
 23e8e98:	023fd458 	.word	0x023fd458
 23e8e9c:	023fd465 	.word	0x023fd465

023e8ea0 <_Z16get_Bosch_ChipIDh>:
 *   Chip ID BME280 = 0x60 temp, pressure, humidity - I2C ADDRESS 0x77  (SD0 to GND = 0x76)  Register 0xE0 = Reset
 *   Chip ID BMP388 = 0x50 temp, pressure           - I2C ADDRESS 0x77  (SD0 to GND = 0x76)
 *   Chip ID BMP390 = 0x60 temp, pressure           - I2C ADDRESS 0x77  (SD0 to GND = 0x76)
 *=======================================================================================================================
 */
byte get_Bosch_ChipID (byte address) {
 23e8ea0:	b570      	push	{r4, r5, r6, lr}
 23e8ea2:	4605      	mov	r5, r0
  byte chip_id = 0;
  byte error;

  Output ("get_Bosch_ChipID()");
 23e8ea4:	4848      	ldr	r0, [pc, #288]	; (23e8fc8 <_Z16get_Bosch_ChipIDh+0x128>)
 23e8ea6:	f7ff fd53 	bl	23e8950 <_Z6OutputPKc>

  // Important! Need to check the 0x00 register first. Doing a 0x0D (not chip id loaction) on a bmp388 
  // will return a value that could match one of the IDs 

  // Check Register 0x00
  sprintf (msgbuf, "  I2C:%02X Reg:%02X", address, 0x00);
 23e8eaa:	462a      	mov	r2, r5
 23e8eac:	2300      	movs	r3, #0
 23e8eae:	4947      	ldr	r1, [pc, #284]	; (23e8fcc <_Z16get_Bosch_ChipIDh+0x12c>)
 23e8eb0:	4847      	ldr	r0, [pc, #284]	; (23e8fd0 <_Z16get_Bosch_ChipIDh+0x130>)
 23e8eb2:	f00f f9a7 	bl	23f8204 <sprintf>
  Output (msgbuf);
 23e8eb6:	4846      	ldr	r0, [pc, #280]	; (23e8fd0 <_Z16get_Bosch_ChipIDh+0x130>)
 23e8eb8:	f7ff fd4a 	bl	23e8950 <_Z6OutputPKc>
  Wire.begin();
 23e8ebc:	f011 fa2a 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e8ec0:	f00f fff8 	bl	23f8eb4 <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(address);
 23e8ec4:	f011 fa26 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e8ec8:	4629      	mov	r1, r5
 23e8eca:	f010 f81d 	bl	23f8f08 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(0x00);  // BM3 CHIPID REGISTER
 23e8ece:	f011 fa21 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e8ed2:	2100      	movs	r1, #0
 23e8ed4:	f7ff fa5c 	bl	23e8390 <_ZN7TwoWire5writeEi.isra.0>
  error = Wire.endTransmission();
 23e8ed8:	f011 fa1c 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e8edc:	f010 f81f 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>
    //  0:success
    //  1:data too long to fit in transmit buffer
    //  2:received NACK on transmit of address
    //  3:received NACK on transmit of data
    //  4:other error 
  if (error) {
 23e8ee0:	4602      	mov	r2, r0
 23e8ee2:	b370      	cbz	r0, 23e8f42 <_Z16get_Bosch_ChipIDh+0xa2>
    sprintf (msgbuf, "  ERR_ET:%d", error);
 23e8ee4:	493b      	ldr	r1, [pc, #236]	; (23e8fd4 <_Z16get_Bosch_ChipIDh+0x134>)
      sprintf (msgbuf, "  CHIPID:%02X BME/390", chip_id);
      Output (msgbuf);
      return (chip_id); // Found a Sensor!   
    }
    else {
      sprintf (msgbuf, "  CHIPID:%02X InValid", chip_id);
 23e8ee6:	483a      	ldr	r0, [pc, #232]	; (23e8fd0 <_Z16get_Bosch_ChipIDh+0x130>)
 23e8ee8:	f00f f98c 	bl	23f8204 <sprintf>
      Output (msgbuf);      
    }
  }
  else {
    sprintf (msgbuf, "  ERR_RF:0");
    Output (msgbuf);
 23e8eec:	4838      	ldr	r0, [pc, #224]	; (23e8fd0 <_Z16get_Bosch_ChipIDh+0x130>)
 23e8eee:	f7ff fd2f 	bl	23e8950 <_Z6OutputPKc>
  }

  // Check Register 0xD0
  chip_id = 0;
  sprintf (msgbuf, "  I2C:%02X Reg:%02X", address, 0xD0);
 23e8ef2:	23d0      	movs	r3, #208	; 0xd0
 23e8ef4:	462a      	mov	r2, r5
 23e8ef6:	4935      	ldr	r1, [pc, #212]	; (23e8fcc <_Z16get_Bosch_ChipIDh+0x12c>)
 23e8ef8:	4835      	ldr	r0, [pc, #212]	; (23e8fd0 <_Z16get_Bosch_ChipIDh+0x130>)
 23e8efa:	f00f f983 	bl	23f8204 <sprintf>
  Output (msgbuf);
 23e8efe:	4834      	ldr	r0, [pc, #208]	; (23e8fd0 <_Z16get_Bosch_ChipIDh+0x130>)
 23e8f00:	f7ff fd26 	bl	23e8950 <_Z6OutputPKc>
  Wire.begin();
 23e8f04:	f011 fa06 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e8f08:	f00f ffd4 	bl	23f8eb4 <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(address);
 23e8f0c:	f011 fa02 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e8f10:	4629      	mov	r1, r5
 23e8f12:	f00f fff9 	bl	23f8f08 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(0xD0);  // BM2 CHIPID REGISTER
 23e8f16:	f011 f9fd 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e8f1a:	21d0      	movs	r1, #208	; 0xd0
 23e8f1c:	f7ff fa38 	bl	23e8390 <_ZN7TwoWire5writeEi.isra.0>
  error = Wire.endTransmission();
 23e8f20:	f011 f9f8 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e8f24:	f00f fffb 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>
    //  0:success
    //  1:data too long to fit in transmit buffer
    //  2:received NACK on transmit of address
    //  3:received NACK on transmit of data
    //  4:other error 
  if (error) {
 23e8f28:	2800      	cmp	r0, #0
 23e8f2a:	d031      	beq.n	23e8f90 <_Z16get_Bosch_ChipIDh+0xf0>
    sprintf (msgbuf, "  ERR_ET:%d", error);
 23e8f2c:	4602      	mov	r2, r0
 23e8f2e:	4929      	ldr	r1, [pc, #164]	; (23e8fd4 <_Z16get_Bosch_ChipIDh+0x134>)
 23e8f30:	4827      	ldr	r0, [pc, #156]	; (23e8fd0 <_Z16get_Bosch_ChipIDh+0x130>)
 23e8f32:	f00f f967 	bl	23f8204 <sprintf>
    Output (msgbuf);
 23e8f36:	4826      	ldr	r0, [pc, #152]	; (23e8fd0 <_Z16get_Bosch_ChipIDh+0x130>)
 23e8f38:	f7ff fd0a 	bl	23e8950 <_Z6OutputPKc>
  }
  else {
    sprintf (msgbuf, "  ERR_RF:0");
    Output (msgbuf);
  }
  return(0);
 23e8f3c:	2400      	movs	r4, #0
}
 23e8f3e:	4620      	mov	r0, r4
 23e8f40:	bd70      	pop	{r4, r5, r6, pc}
  else if (Wire.requestFrom(address, 1)) {  // Returns the number of bytes returned from the slave device 
 23e8f42:	f011 f9e7 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e8f46:	2201      	movs	r2, #1
 23e8f48:	4629      	mov	r1, r5
 23e8f4a:	f00f ffda 	bl	23f8f02 <_ZN7TwoWire11requestFromEhj>
 23e8f4e:	b1d0      	cbz	r0, 23e8f86 <_Z16get_Bosch_ChipIDh+0xe6>
    chip_id = Wire.read();
 23e8f50:	f011 f9e0 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e8f54:	6803      	ldr	r3, [r0, #0]
 23e8f56:	695b      	ldr	r3, [r3, #20]
 23e8f58:	4798      	blx	r3
 23e8f5a:	b2c4      	uxtb	r4, r0
    if (chip_id == BMP280_CHIP_ID) { // 0x58
 23e8f5c:	2c58      	cmp	r4, #88	; 0x58
      sprintf (msgbuf, "  CHIPID:%02X BMP280", chip_id);
 23e8f5e:	4622      	mov	r2, r4
    if (chip_id == BMP280_CHIP_ID) { // 0x58
 23e8f60:	d101      	bne.n	23e8f66 <_Z16get_Bosch_ChipIDh+0xc6>
      sprintf (msgbuf, "  CHIPID:%02X BMP280", chip_id);
 23e8f62:	491d      	ldr	r1, [pc, #116]	; (23e8fd8 <_Z16get_Bosch_ChipIDh+0x138>)
 23e8f64:	e002      	b.n	23e8f6c <_Z16get_Bosch_ChipIDh+0xcc>
    else if (chip_id == BMP388_CHIP_ID) {  // 0x50
 23e8f66:	2c50      	cmp	r4, #80	; 0x50
 23e8f68:	d107      	bne.n	23e8f7a <_Z16get_Bosch_ChipIDh+0xda>
      sprintf (msgbuf, "  CHIPID:%02X BMP388", chip_id);
 23e8f6a:	491c      	ldr	r1, [pc, #112]	; (23e8fdc <_Z16get_Bosch_ChipIDh+0x13c>)
 23e8f6c:	4818      	ldr	r0, [pc, #96]	; (23e8fd0 <_Z16get_Bosch_ChipIDh+0x130>)
 23e8f6e:	f00f f949 	bl	23f8204 <sprintf>
    Output (msgbuf);
 23e8f72:	4817      	ldr	r0, [pc, #92]	; (23e8fd0 <_Z16get_Bosch_ChipIDh+0x130>)
 23e8f74:	f7ff fcec 	bl	23e8950 <_Z6OutputPKc>
 23e8f78:	e7e1      	b.n	23e8f3e <_Z16get_Bosch_ChipIDh+0x9e>
    else if (chip_id == BME280_BMP390_CHIP_ID) {  // 0x60
 23e8f7a:	2c60      	cmp	r4, #96	; 0x60
 23e8f7c:	d101      	bne.n	23e8f82 <_Z16get_Bosch_ChipIDh+0xe2>
      sprintf (msgbuf, "  CHIPID:%02X BME/390", chip_id);
 23e8f7e:	4918      	ldr	r1, [pc, #96]	; (23e8fe0 <_Z16get_Bosch_ChipIDh+0x140>)
 23e8f80:	e7f4      	b.n	23e8f6c <_Z16get_Bosch_ChipIDh+0xcc>
      sprintf (msgbuf, "  CHIPID:%02X InValid", chip_id);
 23e8f82:	4918      	ldr	r1, [pc, #96]	; (23e8fe4 <_Z16get_Bosch_ChipIDh+0x144>)
 23e8f84:	e7af      	b.n	23e8ee6 <_Z16get_Bosch_ChipIDh+0x46>
    sprintf (msgbuf, "  ERR_RF:0");
 23e8f86:	4918      	ldr	r1, [pc, #96]	; (23e8fe8 <_Z16get_Bosch_ChipIDh+0x148>)
 23e8f88:	4811      	ldr	r0, [pc, #68]	; (23e8fd0 <_Z16get_Bosch_ChipIDh+0x130>)
 23e8f8a:	f013 ffd1 	bl	23fcf30 <strcpy>
 23e8f8e:	e7ad      	b.n	23e8eec <_Z16get_Bosch_ChipIDh+0x4c>
  else if (Wire.requestFrom(address, 1)) {  // Returns the number of bytes returned from the slave device 
 23e8f90:	f011 f9c0 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e8f94:	2201      	movs	r2, #1
 23e8f96:	4629      	mov	r1, r5
 23e8f98:	f00f ffb3 	bl	23f8f02 <_ZN7TwoWire11requestFromEhj>
 23e8f9c:	4604      	mov	r4, r0
 23e8f9e:	b170      	cbz	r0, 23e8fbe <_Z16get_Bosch_ChipIDh+0x11e>
    chip_id = Wire.read(); 
 23e8fa0:	f011 f9b8 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e8fa4:	6803      	ldr	r3, [r0, #0]
 23e8fa6:	695b      	ldr	r3, [r3, #20]
 23e8fa8:	4798      	blx	r3
 23e8faa:	b2c4      	uxtb	r4, r0
    if (chip_id == BMP280_CHIP_ID) { // 0x58
 23e8fac:	2c58      	cmp	r4, #88	; 0x58
      sprintf (msgbuf, "  CHIPID:%02X BMP280", chip_id);
 23e8fae:	4622      	mov	r2, r4
    if (chip_id == BMP280_CHIP_ID) { // 0x58
 23e8fb0:	d0d7      	beq.n	23e8f62 <_Z16get_Bosch_ChipIDh+0xc2>
    else if (chip_id == BMP388_CHIP_ID) {  // 0x50
 23e8fb2:	2c50      	cmp	r4, #80	; 0x50
 23e8fb4:	d0d9      	beq.n	23e8f6a <_Z16get_Bosch_ChipIDh+0xca>
    else if (chip_id == BME280_BMP390_CHIP_ID) {  // 0x60
 23e8fb6:	2c60      	cmp	r4, #96	; 0x60
 23e8fb8:	d0e1      	beq.n	23e8f7e <_Z16get_Bosch_ChipIDh+0xde>
      sprintf (msgbuf, "  CHIPID:%02X InValid", chip_id);
 23e8fba:	490a      	ldr	r1, [pc, #40]	; (23e8fe4 <_Z16get_Bosch_ChipIDh+0x144>)
 23e8fbc:	e7b8      	b.n	23e8f30 <_Z16get_Bosch_ChipIDh+0x90>
    sprintf (msgbuf, "  ERR_RF:0");
 23e8fbe:	490a      	ldr	r1, [pc, #40]	; (23e8fe8 <_Z16get_Bosch_ChipIDh+0x148>)
 23e8fc0:	4803      	ldr	r0, [pc, #12]	; (23e8fd0 <_Z16get_Bosch_ChipIDh+0x130>)
 23e8fc2:	f013 ffb5 	bl	23fcf30 <strcpy>
 23e8fc6:	e7d4      	b.n	23e8f72 <_Z16get_Bosch_ChipIDh+0xd2>
 23e8fc8:	023fd471 	.word	0x023fd471
 23e8fcc:	023fd484 	.word	0x023fd484
 23e8fd0:	1006f148 	.word	0x1006f148
 23e8fd4:	023fd498 	.word	0x023fd498
 23e8fd8:	023fd4a4 	.word	0x023fd4a4
 23e8fdc:	023fd4b9 	.word	0x023fd4b9
 23e8fe0:	023fd4ce 	.word	0x023fd4ce
 23e8fe4:	023fd4e4 	.word	0x023fd4e4
 23e8fe8:	023fd4fa 	.word	0x023fd4fa

023e8fec <_Z14bmx_initializev>:
/* 
 *=======================================================================================================================
 * bmx_initialize() - Bosch sensor initialize
 *=======================================================================================================================
 */
void bmx_initialize() {
 23e8fec:	b538      	push	{r3, r4, r5, lr}
  Output("BMX:INIT");
 23e8fee:	486e      	ldr	r0, [pc, #440]	; (23e91a8 <_Z14bmx_initializev+0x1bc>)
 23e8ff0:	f7ff fcae 	bl	23e8950 <_Z6OutputPKc>
  
  // 1st Bosch Sensor - Need to see which (BMP, BME, BM3) is plugged in
  BMX_1_chip_id = get_Bosch_ChipID(BMX_ADDRESS_1);
 23e8ff4:	2077      	movs	r0, #119	; 0x77
 23e8ff6:	f7ff ff53 	bl	23e8ea0 <_Z16get_Bosch_ChipIDh>
 23e8ffa:	4b6c      	ldr	r3, [pc, #432]	; (23e91ac <_Z14bmx_initializev+0x1c0>)

  switch (BMX_1_chip_id) {
 23e8ffc:	2858      	cmp	r0, #88	; 0x58
  BMX_1_chip_id = get_Bosch_ChipID(BMX_ADDRESS_1);
 23e8ffe:	4602      	mov	r2, r0
 23e9000:	4c6b      	ldr	r4, [pc, #428]	; (23e91b0 <_Z14bmx_initializev+0x1c4>)
 23e9002:	7018      	strb	r0, [r3, #0]
  switch (BMX_1_chip_id) {
 23e9004:	d011      	beq.n	23e902a <_Z14bmx_initializev+0x3e>
 23e9006:	2860      	cmp	r0, #96	; 0x60
 23e9008:	d046      	beq.n	23e9098 <_Z14bmx_initializev+0xac>
 23e900a:	2850      	cmp	r0, #80	; 0x50
 23e900c:	d176      	bne.n	23e90fc <_Z14bmx_initializev+0x110>
        float p = bme1.readPressure();
      }
    break;

    case BMP388_CHIP_ID :
      if (!bm31.begin_I2C(BMX_ADDRESS_1)) { 
 23e900e:	f011 f981 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e9012:	2177      	movs	r1, #119	; 0x77
 23e9014:	4602      	mov	r2, r0
 23e9016:	4867      	ldr	r0, [pc, #412]	; (23e91b4 <_Z14bmx_initializev+0x1c8>)
 23e9018:	f008 ffa8 	bl	23f1f6c <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e901c:	4b66      	ldr	r3, [pc, #408]	; (23e91b8 <_Z14bmx_initializev+0x1cc>)
 23e901e:	2800      	cmp	r0, #0
 23e9020:	d165      	bne.n	23e90ee <_Z14bmx_initializev+0x102>
        msgp = (char *) "BM31 ERR";
 23e9022:	4a66      	ldr	r2, [pc, #408]	; (23e91bc <_Z14bmx_initializev+0x1d0>)
        BMX_1_exists = false;
 23e9024:	7018      	strb	r0, [r3, #0]
        msgp = (char *) "BM31 ERR";
 23e9026:	6022      	str	r2, [r4, #0]
        BMX_1_exists = false;
 23e9028:	e008      	b.n	23e903c <_Z14bmx_initializev+0x50>
      if (!bmp1.begin(BMX_ADDRESS_1)) { 
 23e902a:	2177      	movs	r1, #119	; 0x77
 23e902c:	4864      	ldr	r0, [pc, #400]	; (23e91c0 <_Z14bmx_initializev+0x1d4>)
 23e902e:	f008 fd9b 	bl	23f1b68 <_ZN15Adafruit_BMP2805beginEhh>
 23e9032:	4a61      	ldr	r2, [pc, #388]	; (23e91b8 <_Z14bmx_initializev+0x1cc>)
 23e9034:	b940      	cbnz	r0, 23e9048 <_Z14bmx_initializev+0x5c>
        msgp = (char *) "BMP1 ERR";
 23e9036:	4b63      	ldr	r3, [pc, #396]	; (23e91c4 <_Z14bmx_initializev+0x1d8>)
        BMX_1_exists = false;
 23e9038:	7010      	strb	r0, [r2, #0]
        msgp = (char *) "BMP1 ERR";
 23e903a:	6023      	str	r3, [r4, #0]
        SystemStatusBits |= SSB_BMX_1;  // Turn On Bit          
 23e903c:	4a62      	ldr	r2, [pc, #392]	; (23e91c8 <_Z14bmx_initializev+0x1dc>)
 23e903e:	6813      	ldr	r3, [r2, #0]
 23e9040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 23e9044:	6013      	str	r3, [r2, #0]
 23e9046:	e008      	b.n	23e905a <_Z14bmx_initializev+0x6e>
        BMX_1_exists = true;
 23e9048:	2301      	movs	r3, #1
 23e904a:	7013      	strb	r3, [r2, #0]
        BMX_1_type = BMX_TYPE_BMP280;
 23e904c:	4a5f      	ldr	r2, [pc, #380]	; (23e91cc <_Z14bmx_initializev+0x1e0>)
        float p = bmp1.readPressure();
 23e904e:	485c      	ldr	r0, [pc, #368]	; (23e91c0 <_Z14bmx_initializev+0x1d4>)
        BMX_1_type = BMX_TYPE_BMP280;
 23e9050:	7013      	strb	r3, [r2, #0]
        msgp = (char *) "BMP1 OK";
 23e9052:	4b5f      	ldr	r3, [pc, #380]	; (23e91d0 <_Z14bmx_initializev+0x1e4>)
 23e9054:	6023      	str	r3, [r4, #0]
        float p = bmp1.readPressure();
 23e9056:	f008 fe11 	bl	23f1c7c <_ZN15Adafruit_BMP28012readPressureEv>

    default:
      msgp = (char *) "BMX_1 NF";
    break;
  }
  Output (msgp);
 23e905a:	6820      	ldr	r0, [r4, #0]
 23e905c:	f7ff fc78 	bl	23e8950 <_Z6OutputPKc>

  // 2nd Bosch Sensor - Need to see which (BMP, BME, BM3) is plugged in
  BMX_2_chip_id = get_Bosch_ChipID(BMX_ADDRESS_2);
 23e9060:	2076      	movs	r0, #118	; 0x76
 23e9062:	f7ff ff1d 	bl	23e8ea0 <_Z16get_Bosch_ChipIDh>
 23e9066:	4b5b      	ldr	r3, [pc, #364]	; (23e91d4 <_Z14bmx_initializev+0x1e8>)
  switch (BMX_2_chip_id) {
 23e9068:	2858      	cmp	r0, #88	; 0x58
  BMX_2_chip_id = get_Bosch_ChipID(BMX_ADDRESS_2);
 23e906a:	4602      	mov	r2, r0
 23e906c:	7018      	strb	r0, [r3, #0]
  switch (BMX_2_chip_id) {
 23e906e:	d048      	beq.n	23e9102 <_Z14bmx_initializev+0x116>
 23e9070:	2860      	cmp	r0, #96	; 0x60
 23e9072:	d063      	beq.n	23e913c <_Z14bmx_initializev+0x150>
 23e9074:	2850      	cmp	r0, #80	; 0x50
 23e9076:	f040 8093 	bne.w	23e91a0 <_Z14bmx_initializev+0x1b4>
        float p = bme2.readPressure();
      }
    break;

    case BMP388_CHIP_ID :
      if (!bm32.begin_I2C(BMX_ADDRESS_2)) { 
 23e907a:	f011 f94b 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e907e:	2176      	movs	r1, #118	; 0x76
 23e9080:	4602      	mov	r2, r0
 23e9082:	4855      	ldr	r0, [pc, #340]	; (23e91d8 <_Z14bmx_initializev+0x1ec>)
 23e9084:	f008 ff72 	bl	23f1f6c <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e9088:	4b54      	ldr	r3, [pc, #336]	; (23e91dc <_Z14bmx_initializev+0x1f0>)
 23e908a:	2800      	cmp	r0, #0
 23e908c:	f040 8081 	bne.w	23e9192 <_Z14bmx_initializev+0x1a6>
        msgp = (char *) "BM32 ERR";
 23e9090:	4a53      	ldr	r2, [pc, #332]	; (23e91e0 <_Z14bmx_initializev+0x1f4>)
        BMX_2_exists = false;
 23e9092:	7018      	strb	r0, [r3, #0]
        msgp = (char *) "BM32 ERR";
 23e9094:	6022      	str	r2, [r4, #0]
        BMX_2_exists = false;
 23e9096:	e03d      	b.n	23e9114 <_Z14bmx_initializev+0x128>
      if (!bme1.begin(BMX_ADDRESS_1)) { 
 23e9098:	f011 f93c 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e909c:	2177      	movs	r1, #119	; 0x77
 23e909e:	4602      	mov	r2, r0
 23e90a0:	4850      	ldr	r0, [pc, #320]	; (23e91e4 <_Z14bmx_initializev+0x1f8>)
 23e90a2:	f008 f96c 	bl	23f137e <_ZN15Adafruit_BME2805beginEhP7TwoWire>
 23e90a6:	4d44      	ldr	r5, [pc, #272]	; (23e91b8 <_Z14bmx_initializev+0x1cc>)
 23e90a8:	b9b0      	cbnz	r0, 23e90d8 <_Z14bmx_initializev+0xec>
        if (!bm31.begin_I2C(BMX_ADDRESS_1)) {  // Perhaps it is a BMP390
 23e90aa:	f011 f933 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e90ae:	2177      	movs	r1, #119	; 0x77
 23e90b0:	4602      	mov	r2, r0
 23e90b2:	4840      	ldr	r0, [pc, #256]	; (23e91b4 <_Z14bmx_initializev+0x1c8>)
 23e90b4:	f008 ff5a 	bl	23f1f6c <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e90b8:	b918      	cbnz	r0, 23e90c2 <_Z14bmx_initializev+0xd6>
          msgp = (char *) "BMX1 ERR";
 23e90ba:	4b4b      	ldr	r3, [pc, #300]	; (23e91e8 <_Z14bmx_initializev+0x1fc>)
          BMX_1_exists = false;
 23e90bc:	7028      	strb	r0, [r5, #0]
          msgp = (char *) "BMX1 ERR";
 23e90be:	6023      	str	r3, [r4, #0]
          SystemStatusBits |= SSB_BMX_1;  // Turn On Bit          
 23e90c0:	e7bc      	b.n	23e903c <_Z14bmx_initializev+0x50>
          BMX_1_exists = true;
 23e90c2:	2301      	movs	r3, #1
          BMX_1_type = BMX_TYPE_BMP390;
 23e90c4:	2204      	movs	r2, #4
          BMX_1_exists = true;
 23e90c6:	702b      	strb	r3, [r5, #0]
          BMX_1_type = BMX_TYPE_BMP390;
 23e90c8:	4b40      	ldr	r3, [pc, #256]	; (23e91cc <_Z14bmx_initializev+0x1e0>)
 23e90ca:	701a      	strb	r2, [r3, #0]
          msgp = (char *) "BMP390_1 OK"; 
 23e90cc:	4b47      	ldr	r3, [pc, #284]	; (23e91ec <_Z14bmx_initializev+0x200>)
        float p = bm31.readPressure();
 23e90ce:	4839      	ldr	r0, [pc, #228]	; (23e91b4 <_Z14bmx_initializev+0x1c8>)
        msgp = (char *) "BM31 OK";
 23e90d0:	6023      	str	r3, [r4, #0]
        float p = bm31.readPressure();
 23e90d2:	f008 ffde 	bl	23f2092 <_ZN15Adafruit_BMP3XX12readPressureEv>
 23e90d6:	e7c0      	b.n	23e905a <_Z14bmx_initializev+0x6e>
        BMX_1_exists = true;
 23e90d8:	2301      	movs	r3, #1
        BMX_1_type = BMX_TYPE_BME280;
 23e90da:	2202      	movs	r2, #2
        BMX_1_exists = true;
 23e90dc:	702b      	strb	r3, [r5, #0]
        BMX_1_type = BMX_TYPE_BME280;
 23e90de:	4b3b      	ldr	r3, [pc, #236]	; (23e91cc <_Z14bmx_initializev+0x1e0>)
        float p = bme1.readPressure();
 23e90e0:	4840      	ldr	r0, [pc, #256]	; (23e91e4 <_Z14bmx_initializev+0x1f8>)
        BMX_1_type = BMX_TYPE_BME280;
 23e90e2:	701a      	strb	r2, [r3, #0]
        msgp = (char *) "BME280_1 OK";
 23e90e4:	4b42      	ldr	r3, [pc, #264]	; (23e91f0 <_Z14bmx_initializev+0x204>)
 23e90e6:	6023      	str	r3, [r4, #0]
        float p = bme1.readPressure();
 23e90e8:	f008 f980 	bl	23f13ec <_ZN15Adafruit_BME28012readPressureEv>
 23e90ec:	e7b5      	b.n	23e905a <_Z14bmx_initializev+0x6e>
        BMX_1_exists = true;
 23e90ee:	2201      	movs	r2, #1
 23e90f0:	701a      	strb	r2, [r3, #0]
        BMX_1_type = BMX_TYPE_BMP388;
 23e90f2:	2203      	movs	r2, #3
 23e90f4:	4b35      	ldr	r3, [pc, #212]	; (23e91cc <_Z14bmx_initializev+0x1e0>)
 23e90f6:	701a      	strb	r2, [r3, #0]
        msgp = (char *) "BM31 OK";
 23e90f8:	4b3e      	ldr	r3, [pc, #248]	; (23e91f4 <_Z14bmx_initializev+0x208>)
 23e90fa:	e7e8      	b.n	23e90ce <_Z14bmx_initializev+0xe2>
      msgp = (char *) "BMX_1 NF";
 23e90fc:	4b3e      	ldr	r3, [pc, #248]	; (23e91f8 <_Z14bmx_initializev+0x20c>)
 23e90fe:	6023      	str	r3, [r4, #0]
    break;
 23e9100:	e7ab      	b.n	23e905a <_Z14bmx_initializev+0x6e>
      if (!bmp2.begin(BMX_ADDRESS_2)) { 
 23e9102:	2176      	movs	r1, #118	; 0x76
 23e9104:	483d      	ldr	r0, [pc, #244]	; (23e91fc <_Z14bmx_initializev+0x210>)
 23e9106:	f008 fd2f 	bl	23f1b68 <_ZN15Adafruit_BMP2805beginEhh>
 23e910a:	4a34      	ldr	r2, [pc, #208]	; (23e91dc <_Z14bmx_initializev+0x1f0>)
 23e910c:	b940      	cbnz	r0, 23e9120 <_Z14bmx_initializev+0x134>
        msgp = (char *) "BMP2 ERR";
 23e910e:	4b3c      	ldr	r3, [pc, #240]	; (23e9200 <_Z14bmx_initializev+0x214>)
        BMX_2_exists = false;
 23e9110:	7010      	strb	r0, [r2, #0]
        msgp = (char *) "BMP2 ERR";
 23e9112:	6023      	str	r3, [r4, #0]
        SystemStatusBits |= SSB_BMX_2;  // Turn On Bit          
 23e9114:	4a2c      	ldr	r2, [pc, #176]	; (23e91c8 <_Z14bmx_initializev+0x1dc>)
 23e9116:	6813      	ldr	r3, [r2, #0]
 23e9118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 23e911c:	6013      	str	r3, [r2, #0]
 23e911e:	e008      	b.n	23e9132 <_Z14bmx_initializev+0x146>
        BMX_2_exists = true;
 23e9120:	2301      	movs	r3, #1
 23e9122:	7013      	strb	r3, [r2, #0]
        BMX_2_type = BMX_TYPE_BMP280;
 23e9124:	4a37      	ldr	r2, [pc, #220]	; (23e9204 <_Z14bmx_initializev+0x218>)
        float p = bmp2.readPressure();
 23e9126:	4835      	ldr	r0, [pc, #212]	; (23e91fc <_Z14bmx_initializev+0x210>)
        BMX_2_type = BMX_TYPE_BMP280;
 23e9128:	7013      	strb	r3, [r2, #0]
        msgp = (char *) "BMP2 OK";
 23e912a:	4b37      	ldr	r3, [pc, #220]	; (23e9208 <_Z14bmx_initializev+0x21c>)
 23e912c:	6023      	str	r3, [r4, #0]
        float p = bmp2.readPressure();
 23e912e:	f008 fda5 	bl	23f1c7c <_ZN15Adafruit_BMP28012readPressureEv>

    default:
      msgp = (char *) "BMX_2 NF";
    break;
  }
  Output (msgp);
 23e9132:	6820      	ldr	r0, [r4, #0]
}
 23e9134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
 23e9138:	f7ff bc0a 	b.w	23e8950 <_Z6OutputPKc>
      if (!bme2.begin(BMX_ADDRESS_2)) { 
 23e913c:	f011 f8ea 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e9140:	2176      	movs	r1, #118	; 0x76
 23e9142:	4602      	mov	r2, r0
 23e9144:	4831      	ldr	r0, [pc, #196]	; (23e920c <_Z14bmx_initializev+0x220>)
 23e9146:	f008 f91a 	bl	23f137e <_ZN15Adafruit_BME2805beginEhP7TwoWire>
 23e914a:	4d24      	ldr	r5, [pc, #144]	; (23e91dc <_Z14bmx_initializev+0x1f0>)
 23e914c:	b9b0      	cbnz	r0, 23e917c <_Z14bmx_initializev+0x190>
        if (!bm32.begin_I2C(BMX_ADDRESS_2)) {  // Perhaps it is a BMP390
 23e914e:	f011 f8e1 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e9152:	2176      	movs	r1, #118	; 0x76
 23e9154:	4602      	mov	r2, r0
 23e9156:	4820      	ldr	r0, [pc, #128]	; (23e91d8 <_Z14bmx_initializev+0x1ec>)
 23e9158:	f008 ff08 	bl	23f1f6c <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e915c:	b918      	cbnz	r0, 23e9166 <_Z14bmx_initializev+0x17a>
          msgp = (char *) "BMX2 ERR";
 23e915e:	4b2c      	ldr	r3, [pc, #176]	; (23e9210 <_Z14bmx_initializev+0x224>)
          BMX_2_exists = false;
 23e9160:	7028      	strb	r0, [r5, #0]
          msgp = (char *) "BMX2 ERR";
 23e9162:	6023      	str	r3, [r4, #0]
          SystemStatusBits |= SSB_BMX_2;  // Turn On Bit          
 23e9164:	e7d6      	b.n	23e9114 <_Z14bmx_initializev+0x128>
          BMX_2_exists = true;
 23e9166:	2301      	movs	r3, #1
          BMX_2_type = BMX_TYPE_BMP390;
 23e9168:	2204      	movs	r2, #4
          BMX_2_exists = true;
 23e916a:	702b      	strb	r3, [r5, #0]
          BMX_2_type = BMX_TYPE_BMP390;
 23e916c:	4b25      	ldr	r3, [pc, #148]	; (23e9204 <_Z14bmx_initializev+0x218>)
 23e916e:	701a      	strb	r2, [r3, #0]
          msgp = (char *) "BMP390_2 OK"; 
 23e9170:	4b28      	ldr	r3, [pc, #160]	; (23e9214 <_Z14bmx_initializev+0x228>)
        float p = bm32.readPressure();
 23e9172:	4819      	ldr	r0, [pc, #100]	; (23e91d8 <_Z14bmx_initializev+0x1ec>)
        msgp = (char *) "BM32 OK";
 23e9174:	6023      	str	r3, [r4, #0]
        float p = bm32.readPressure();
 23e9176:	f008 ff8c 	bl	23f2092 <_ZN15Adafruit_BMP3XX12readPressureEv>
 23e917a:	e7da      	b.n	23e9132 <_Z14bmx_initializev+0x146>
        BMX_2_exists = true;
 23e917c:	2301      	movs	r3, #1
        BMX_2_type = BMX_TYPE_BME280;
 23e917e:	2202      	movs	r2, #2
        BMX_2_exists = true;
 23e9180:	702b      	strb	r3, [r5, #0]
        BMX_2_type = BMX_TYPE_BME280;
 23e9182:	4b20      	ldr	r3, [pc, #128]	; (23e9204 <_Z14bmx_initializev+0x218>)
        float p = bme2.readPressure();
 23e9184:	4821      	ldr	r0, [pc, #132]	; (23e920c <_Z14bmx_initializev+0x220>)
        BMX_2_type = BMX_TYPE_BME280;
 23e9186:	701a      	strb	r2, [r3, #0]
        msgp = (char *) "BME280_2 OK";
 23e9188:	4b23      	ldr	r3, [pc, #140]	; (23e9218 <_Z14bmx_initializev+0x22c>)
 23e918a:	6023      	str	r3, [r4, #0]
        float p = bme2.readPressure();
 23e918c:	f008 f92e 	bl	23f13ec <_ZN15Adafruit_BME28012readPressureEv>
 23e9190:	e7cf      	b.n	23e9132 <_Z14bmx_initializev+0x146>
        BMX_2_exists = true;
 23e9192:	2201      	movs	r2, #1
 23e9194:	701a      	strb	r2, [r3, #0]
        BMX_2_type = BMX_TYPE_BMP388;
 23e9196:	2203      	movs	r2, #3
 23e9198:	4b1a      	ldr	r3, [pc, #104]	; (23e9204 <_Z14bmx_initializev+0x218>)
 23e919a:	701a      	strb	r2, [r3, #0]
        msgp = (char *) "BM32 OK";
 23e919c:	4b1f      	ldr	r3, [pc, #124]	; (23e921c <_Z14bmx_initializev+0x230>)
 23e919e:	e7e8      	b.n	23e9172 <_Z14bmx_initializev+0x186>
      msgp = (char *) "BMX_2 NF";
 23e91a0:	4b1f      	ldr	r3, [pc, #124]	; (23e9220 <_Z14bmx_initializev+0x234>)
 23e91a2:	6023      	str	r3, [r4, #0]
    break;
 23e91a4:	e7c5      	b.n	23e9132 <_Z14bmx_initializev+0x146>
 23e91a6:	bf00      	nop
 23e91a8:	023fd505 	.word	0x023fd505
 23e91ac:	1006a319 	.word	0x1006a319
 23e91b0:	1006f548 	.word	0x1006f548
 23e91b4:	1006a978 	.word	0x1006a978
 23e91b8:	1006a31a 	.word	0x1006a31a
 23e91bc:	023fd540 	.word	0x023fd540
 23e91c0:	1006ac28 	.word	0x1006ac28
 23e91c4:	023fd50e 	.word	0x023fd50e
 23e91c8:	1006a22c 	.word	0x1006a22c
 23e91cc:	1006a31b 	.word	0x1006a31b
 23e91d0:	023fd517 	.word	0x023fd517
 23e91d4:	1006a31c 	.word	0x1006a31c
 23e91d8:	1006aa78 	.word	0x1006aa78
 23e91dc:	1006a31d 	.word	0x1006a31d
 23e91e0:	023fd58c 	.word	0x023fd58c
 23e91e4:	1006ab78 	.word	0x1006ab78
 23e91e8:	023fd51f 	.word	0x023fd51f
 23e91ec:	023fd528 	.word	0x023fd528
 23e91f0:	023fd534 	.word	0x023fd534
 23e91f4:	023fd549 	.word	0x023fd549
 23e91f8:	023fd551 	.word	0x023fd551
 23e91fc:	1006ac68 	.word	0x1006ac68
 23e9200:	023fd55a 	.word	0x023fd55a
 23e9204:	1006a31e 	.word	0x1006a31e
 23e9208:	023fd563 	.word	0x023fd563
 23e920c:	1006abd0 	.word	0x1006abd0
 23e9210:	023fd56b 	.word	0x023fd56b
 23e9214:	023fd574 	.word	0x023fd574
 23e9218:	023fd580 	.word	0x023fd580
 23e921c:	023fd595 	.word	0x023fd595
 23e9220:	023fd59d 	.word	0x023fd59d

023e9224 <_Z17htu21d_initializev>:
/* 
 *=======================================================================================================================
 * htu21d_initialize() - HTU21D sensor initialize
 *=======================================================================================================================
 */
void htu21d_initialize() {
 23e9224:	b508      	push	{r3, lr}
  Output("HTU21D:INIT");
 23e9226:	480f      	ldr	r0, [pc, #60]	; (23e9264 <_Z17htu21d_initializev+0x40>)
 23e9228:	f7ff fb92 	bl	23e8950 <_Z6OutputPKc>
  
  // HTU21DF Humidity & Temp Sensor (I2C ADDRESS = 0x40)
  if (!htu.begin()) {
 23e922c:	f011 f872 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e9230:	4601      	mov	r1, r0
 23e9232:	480d      	ldr	r0, [pc, #52]	; (23e9268 <_Z17htu21d_initializev+0x44>)
 23e9234:	f009 ff0a 	bl	23f304c <_ZN16Adafruit_HTU21DF5beginEP7TwoWire>
 23e9238:	4b0c      	ldr	r3, [pc, #48]	; (23e926c <_Z17htu21d_initializev+0x48>)
 23e923a:	4a0d      	ldr	r2, [pc, #52]	; (23e9270 <_Z17htu21d_initializev+0x4c>)
 23e923c:	b960      	cbnz	r0, 23e9258 <_Z17htu21d_initializev+0x34>
    msgp = (char *) "HTU NF";
 23e923e:	490d      	ldr	r1, [pc, #52]	; (23e9274 <_Z17htu21d_initializev+0x50>)
    HTU21DF_exists = false;
 23e9240:	7010      	strb	r0, [r2, #0]
    msgp = (char *) "HTU NF";
 23e9242:	6019      	str	r1, [r3, #0]
    SystemStatusBits |= SSB_HTU21DF;  // Turn On Bit
 23e9244:	490c      	ldr	r1, [pc, #48]	; (23e9278 <_Z17htu21d_initializev+0x54>)
 23e9246:	680a      	ldr	r2, [r1, #0]
 23e9248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 23e924c:	600a      	str	r2, [r1, #0]
  }
  else {
    HTU21DF_exists = true;
    msgp = (char *) "HTU OK";
  }
  Output (msgp);
 23e924e:	6818      	ldr	r0, [r3, #0]
}
 23e9250:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
 23e9254:	f7ff bb7c 	b.w	23e8950 <_Z6OutputPKc>
    HTU21DF_exists = true;
 23e9258:	2101      	movs	r1, #1
 23e925a:	7011      	strb	r1, [r2, #0]
    msgp = (char *) "HTU OK";
 23e925c:	4a07      	ldr	r2, [pc, #28]	; (23e927c <_Z17htu21d_initializev+0x58>)
 23e925e:	601a      	str	r2, [r3, #0]
 23e9260:	e7f5      	b.n	23e924e <_Z17htu21d_initializev+0x2a>
 23e9262:	bf00      	nop
 23e9264:	023fd5a6 	.word	0x023fd5a6
 23e9268:	1006aec0 	.word	0x1006aec0
 23e926c:	1006f548 	.word	0x1006f548
 23e9270:	1006a348 	.word	0x1006a348
 23e9274:	023fd5b2 	.word	0x023fd5b2
 23e9278:	1006a22c 	.word	0x1006a22c
 23e927c:	023fd5b9 	.word	0x023fd5b9

023e9280 <_Z18mcp9808_initializev>:
/* 
 *=======================================================================================================================
 * mcp9808_initialize() - MCP9808 sensor initialize
 *=======================================================================================================================
 */
void mcp9808_initialize() {
 23e9280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Output("MCP9808:INIT");
 23e9282:	4844      	ldr	r0, [pc, #272]	; (23e9394 <_Z18mcp9808_initializev+0x114>)
 23e9284:	f7ff fb64 	bl	23e8950 <_Z6OutputPKc>
  
  // 1st MCP9808 Precision I2C Temperature Sensor (I2C ADDRESS = 0x18)
  mcp1 = Adafruit_MCP9808();
 23e9288:	a801      	add	r0, sp, #4
 23e928a:	f00a f8bd 	bl	23f3408 <_ZN16Adafruit_MCP9808C1Ev>

/** @brief Common sensor interface to unify various sensors.
 * Intentionally modeled after sensors.h in the Android API:
 * https://github.com/android/platform_hardware_libhardware/blob/master/include/hardware/sensors.h
 */
class Adafruit_Sensor {
 23e928e:	4842      	ldr	r0, [pc, #264]	; (23e9398 <_Z18mcp9808_initializev+0x118>)
 23e9290:	f89d 3008 	ldrb.w	r3, [sp, #8]
  if (!mcp1.begin(MCP_ADDRESS_1)) {
 23e9294:	2118      	movs	r1, #24
 23e9296:	7103      	strb	r3, [r0, #4]

/*!
 *    @brief  Class that stores state and functions for interacting with
 *            MCP9808 Temp Sensor
 */
class Adafruit_MCP9808 : public Adafruit_Sensor {
 23e9298:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 23e929c:	4c3f      	ldr	r4, [pc, #252]	; (23e939c <_Z18mcp9808_initializev+0x11c>)
 23e929e:	80c3      	strh	r3, [r0, #6]
 23e92a0:	9b03      	ldr	r3, [sp, #12]
 23e92a2:	6083      	str	r3, [r0, #8]
 23e92a4:	f00a f915 	bl	23f34d2 <_ZN16Adafruit_MCP98085beginEh>
 23e92a8:	4b3d      	ldr	r3, [pc, #244]	; (23e93a0 <_Z18mcp9808_initializev+0x120>)
 23e92aa:	2800      	cmp	r0, #0
 23e92ac:	d15e      	bne.n	23e936c <_Z18mcp9808_initializev+0xec>
    msgp = (char *) "MCP1 NF";
 23e92ae:	4a3d      	ldr	r2, [pc, #244]	; (23e93a4 <_Z18mcp9808_initializev+0x124>)
    MCP_1_exists = false;
 23e92b0:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "MCP1 NF";
 23e92b2:	6022      	str	r2, [r4, #0]
    SystemStatusBits |= SSB_MCP_1;  // Turn On Bit
 23e92b4:	4a3c      	ldr	r2, [pc, #240]	; (23e93a8 <_Z18mcp9808_initializev+0x128>)
 23e92b6:	6813      	ldr	r3, [r2, #0]
 23e92b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 23e92bc:	6013      	str	r3, [r2, #0]
  }
  else {
    MCP_1_exists = true;
    msgp = (char *) "MCP1 OK";
  }
  Output (msgp);
 23e92be:	6820      	ldr	r0, [r4, #0]
 23e92c0:	f7ff fb46 	bl	23e8950 <_Z6OutputPKc>

  // 2nd MCP9808 Precision I2C Temperature Sensor (I2C ADDRESS = 0x19)
  mcp2 = Adafruit_MCP9808();
 23e92c4:	a801      	add	r0, sp, #4
 23e92c6:	f00a f89f 	bl	23f3408 <_ZN16Adafruit_MCP9808C1Ev>
 23e92ca:	4838      	ldr	r0, [pc, #224]	; (23e93ac <_Z18mcp9808_initializev+0x12c>)
 23e92cc:	f89d 3008 	ldrb.w	r3, [sp, #8]
  if (!mcp2.begin(MCP_ADDRESS_2)) {
 23e92d0:	2119      	movs	r1, #25
 23e92d2:	7103      	strb	r3, [r0, #4]
 23e92d4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 23e92d8:	80c3      	strh	r3, [r0, #6]
 23e92da:	9b03      	ldr	r3, [sp, #12]
 23e92dc:	6083      	str	r3, [r0, #8]
 23e92de:	f00a f8f8 	bl	23f34d2 <_ZN16Adafruit_MCP98085beginEh>
 23e92e2:	4b33      	ldr	r3, [pc, #204]	; (23e93b0 <_Z18mcp9808_initializev+0x130>)
 23e92e4:	2800      	cmp	r0, #0
 23e92e6:	d146      	bne.n	23e9376 <_Z18mcp9808_initializev+0xf6>
    msgp = (char *) "MCP2 NF";
 23e92e8:	4a32      	ldr	r2, [pc, #200]	; (23e93b4 <_Z18mcp9808_initializev+0x134>)
    MCP_2_exists = false;
 23e92ea:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "MCP2 NF";
 23e92ec:	6022      	str	r2, [r4, #0]
    SystemStatusBits |= SSB_MCP_2;  // Turn On Bit
 23e92ee:	4a2e      	ldr	r2, [pc, #184]	; (23e93a8 <_Z18mcp9808_initializev+0x128>)
 23e92f0:	6813      	ldr	r3, [r2, #0]
 23e92f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 23e92f6:	6013      	str	r3, [r2, #0]
  }
  else {
    MCP_2_exists = true;
    msgp = (char *) "MCP2 OK";
  }
  Output (msgp);
 23e92f8:	6820      	ldr	r0, [r4, #0]
 23e92fa:	f7ff fb29 	bl	23e8950 <_Z6OutputPKc>

  // 3rd MCP9808 Precision I2C Temperature Sensor (I2C ADDRESS = 0x20)
  mcp3 = Adafruit_MCP9808();
 23e92fe:	a801      	add	r0, sp, #4
 23e9300:	f00a f882 	bl	23f3408 <_ZN16Adafruit_MCP9808C1Ev>
 23e9304:	482c      	ldr	r0, [pc, #176]	; (23e93b8 <_Z18mcp9808_initializev+0x138>)
 23e9306:	f89d 3008 	ldrb.w	r3, [sp, #8]
  if (!mcp3.begin(MCP_ADDRESS_3)) {
 23e930a:	211a      	movs	r1, #26
 23e930c:	7103      	strb	r3, [r0, #4]
 23e930e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 23e9312:	80c3      	strh	r3, [r0, #6]
 23e9314:	9b03      	ldr	r3, [sp, #12]
 23e9316:	6083      	str	r3, [r0, #8]
 23e9318:	f00a f8db 	bl	23f34d2 <_ZN16Adafruit_MCP98085beginEh>
 23e931c:	4b27      	ldr	r3, [pc, #156]	; (23e93bc <_Z18mcp9808_initializev+0x13c>)
 23e931e:	2800      	cmp	r0, #0
 23e9320:	d12e      	bne.n	23e9380 <_Z18mcp9808_initializev+0x100>
    msgp = (char *) "MCP3 NF";
 23e9322:	4a27      	ldr	r2, [pc, #156]	; (23e93c0 <_Z18mcp9808_initializev+0x140>)
    MCP_3_exists = false;
 23e9324:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "MCP3 NF";
 23e9326:	6022      	str	r2, [r4, #0]
    SystemStatusBits |= SSB_MCP_3;  // Turn On Bit
 23e9328:	4a1f      	ldr	r2, [pc, #124]	; (23e93a8 <_Z18mcp9808_initializev+0x128>)
 23e932a:	6813      	ldr	r3, [r2, #0]
 23e932c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 23e9330:	6013      	str	r3, [r2, #0]
  }
  else {
    MCP_3_exists = true;
    msgp = (char *) "MCP3 OK";
  }
  Output (msgp);
 23e9332:	6820      	ldr	r0, [r4, #0]
 23e9334:	f7ff fb0c 	bl	23e8950 <_Z6OutputPKc>

  // 4rd MCP9808 Precision I2C Temperature Sensor (I2C ADDRESS = 0x21)
  mcp4 = Adafruit_MCP9808();
 23e9338:	a801      	add	r0, sp, #4
 23e933a:	f00a f865 	bl	23f3408 <_ZN16Adafruit_MCP9808C1Ev>
 23e933e:	4821      	ldr	r0, [pc, #132]	; (23e93c4 <_Z18mcp9808_initializev+0x144>)
 23e9340:	f89d 3008 	ldrb.w	r3, [sp, #8]
  if (!mcp4.begin(MCP_ADDRESS_4)) {
 23e9344:	211b      	movs	r1, #27
 23e9346:	7103      	strb	r3, [r0, #4]
 23e9348:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 23e934c:	80c3      	strh	r3, [r0, #6]
 23e934e:	9b03      	ldr	r3, [sp, #12]
 23e9350:	6083      	str	r3, [r0, #8]
 23e9352:	f00a f8be 	bl	23f34d2 <_ZN16Adafruit_MCP98085beginEh>
 23e9356:	4b1c      	ldr	r3, [pc, #112]	; (23e93c8 <_Z18mcp9808_initializev+0x148>)
 23e9358:	b9b8      	cbnz	r0, 23e938a <_Z18mcp9808_initializev+0x10a>
    msgp = (char *) "MCP4 NF";
 23e935a:	4a1c      	ldr	r2, [pc, #112]	; (23e93cc <_Z18mcp9808_initializev+0x14c>)
    MCP_4_exists = false;
 23e935c:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "MCP4 NF";
 23e935e:	6022      	str	r2, [r4, #0]
  }
  else {
    MCP_4_exists = true;
    msgp = (char *) "MCP4 OK";
  }
  Output (msgp);
 23e9360:	6820      	ldr	r0, [r4, #0]
}
 23e9362:	b004      	add	sp, #16
 23e9364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Output (msgp);
 23e9368:	f7ff baf2 	b.w	23e8950 <_Z6OutputPKc>
    MCP_1_exists = true;
 23e936c:	2201      	movs	r2, #1
 23e936e:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "MCP1 OK";
 23e9370:	4b17      	ldr	r3, [pc, #92]	; (23e93d0 <_Z18mcp9808_initializev+0x150>)
 23e9372:	6023      	str	r3, [r4, #0]
 23e9374:	e7a3      	b.n	23e92be <_Z18mcp9808_initializev+0x3e>
    MCP_2_exists = true;
 23e9376:	2201      	movs	r2, #1
 23e9378:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "MCP2 OK";
 23e937a:	4b16      	ldr	r3, [pc, #88]	; (23e93d4 <_Z18mcp9808_initializev+0x154>)
 23e937c:	6023      	str	r3, [r4, #0]
 23e937e:	e7bb      	b.n	23e92f8 <_Z18mcp9808_initializev+0x78>
    MCP_3_exists = true;
 23e9380:	2201      	movs	r2, #1
 23e9382:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "MCP3 OK";
 23e9384:	4b14      	ldr	r3, [pc, #80]	; (23e93d8 <_Z18mcp9808_initializev+0x158>)
 23e9386:	6023      	str	r3, [r4, #0]
 23e9388:	e7d3      	b.n	23e9332 <_Z18mcp9808_initializev+0xb2>
    MCP_4_exists = true;
 23e938a:	2201      	movs	r2, #1
 23e938c:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "MCP4 OK";
 23e938e:	4b13      	ldr	r3, [pc, #76]	; (23e93dc <_Z18mcp9808_initializev+0x15c>)
 23e9390:	6023      	str	r3, [r4, #0]
 23e9392:	e7e5      	b.n	23e9360 <_Z18mcp9808_initializev+0xe0>
 23e9394:	023fd5c0 	.word	0x023fd5c0
 23e9398:	1006f118 	.word	0x1006f118
 23e939c:	1006f548 	.word	0x1006f548
 23e93a0:	1006a360 	.word	0x1006a360
 23e93a4:	023fd5cd 	.word	0x023fd5cd
 23e93a8:	1006a22c 	.word	0x1006a22c
 23e93ac:	1006f124 	.word	0x1006f124
 23e93b0:	1006a361 	.word	0x1006a361
 23e93b4:	023fd5dd 	.word	0x023fd5dd
 23e93b8:	1006f130 	.word	0x1006f130
 23e93bc:	1006a362 	.word	0x1006a362
 23e93c0:	023fd5ed 	.word	0x023fd5ed
 23e93c4:	1006f13c 	.word	0x1006f13c
 23e93c8:	1006a363 	.word	0x1006a363
 23e93cc:	023fd5fd 	.word	0x023fd5fd
 23e93d0:	023fd5d5 	.word	0x023fd5d5
 23e93d4:	023fd5e5 	.word	0x023fd5e5
 23e93d8:	023fd5f5 	.word	0x023fd5f5
 23e93dc:	023fd605 	.word	0x023fd605

023e93e0 <_Z14sht_initializev>:
/* 
 *=======================================================================================================================
 * sht_initialize() - SHT31 sensor initialize
 *=======================================================================================================================
 */
void sht_initialize() {
 23e93e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  Output("SHT:INIT");
 23e93e2:	4828      	ldr	r0, [pc, #160]	; (23e9484 <_Z14sht_initializev+0xa4>)
 23e93e4:	f7ff fab4 	bl	23e8950 <_Z6OutputPKc>
  
  // 1st SHT31 I2C Temperature/Humidity Sensor (I2C ADDRESS = 0x44)
  sht1 = Adafruit_SHT31();
 23e93e8:	466c      	mov	r4, sp
 23e93ea:	f010 ff93 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e93ee:	4d26      	ldr	r5, [pc, #152]	; (23e9488 <_Z14sht_initializev+0xa8>)
 23e93f0:	4601      	mov	r1, r0
 23e93f2:	4620      	mov	r0, r4
 23e93f4:	f00a f95c 	bl	23f36b0 <_ZN14Adafruit_SHT31C1EP7TwoWire>
 23e93f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 23e93fc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 23e9400:	4620      	mov	r0, r4
 23e9402:	f00a f95f 	bl	23f36c4 <_ZN14Adafruit_SHT31D1Ev>
  if (!sht1.begin(SHT_ADDRESS_1)) {
 23e9406:	4628      	mov	r0, r5
 23e9408:	2144      	movs	r1, #68	; 0x44
 23e940a:	f00a f992 	bl	23f3732 <_ZN14Adafruit_SHT315beginEh>
 23e940e:	4d1f      	ldr	r5, [pc, #124]	; (23e948c <_Z14sht_initializev+0xac>)
 23e9410:	4b1f      	ldr	r3, [pc, #124]	; (23e9490 <_Z14sht_initializev+0xb0>)
 23e9412:	bb60      	cbnz	r0, 23e946e <_Z14sht_initializev+0x8e>
    msgp = (char *) "SHT1 NF";
 23e9414:	4a1f      	ldr	r2, [pc, #124]	; (23e9494 <_Z14sht_initializev+0xb4>)
    SHT_1_exists = false;
 23e9416:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "SHT1 NF";
 23e9418:	602a      	str	r2, [r5, #0]
    SystemStatusBits |= SSB_SHT_1;  // Turn On Bit
 23e941a:	4a1f      	ldr	r2, [pc, #124]	; (23e9498 <_Z14sht_initializev+0xb8>)
 23e941c:	6813      	ldr	r3, [r2, #0]
 23e941e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 23e9422:	6013      	str	r3, [r2, #0]
  }
  else {
    SHT_1_exists = true;
    msgp = (char *) "SHT1 OK";
  }
  Output (msgp);
 23e9424:	6828      	ldr	r0, [r5, #0]
 23e9426:	f7ff fa93 	bl	23e8950 <_Z6OutputPKc>

  // 2nd SHT31 I2C Temperature/Humidity Sensor (I2C ADDRESS = 0x45)
  sht2 = Adafruit_SHT31();
 23e942a:	f010 ff73 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e942e:	4e1b      	ldr	r6, [pc, #108]	; (23e949c <_Z14sht_initializev+0xbc>)
 23e9430:	4601      	mov	r1, r0
 23e9432:	4620      	mov	r0, r4
 23e9434:	f00a f93c 	bl	23f36b0 <_ZN14Adafruit_SHT31C1EP7TwoWire>
 23e9438:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 23e943c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 23e9440:	4620      	mov	r0, r4
 23e9442:	f00a f93f 	bl	23f36c4 <_ZN14Adafruit_SHT31D1Ev>
  if (!sht2.begin(SHT_ADDRESS_2)) {
 23e9446:	2145      	movs	r1, #69	; 0x45
 23e9448:	4630      	mov	r0, r6
 23e944a:	f00a f972 	bl	23f3732 <_ZN14Adafruit_SHT315beginEh>
 23e944e:	4b14      	ldr	r3, [pc, #80]	; (23e94a0 <_Z14sht_initializev+0xc0>)
 23e9450:	b990      	cbnz	r0, 23e9478 <_Z14sht_initializev+0x98>
    msgp = (char *) "SHT2 NF";
 23e9452:	4a14      	ldr	r2, [pc, #80]	; (23e94a4 <_Z14sht_initializev+0xc4>)
    SHT_2_exists = false;
 23e9454:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "SHT2 NF";
 23e9456:	602a      	str	r2, [r5, #0]
    SystemStatusBits |= SSB_SHT_2;  // Turn On Bit
 23e9458:	4a0f      	ldr	r2, [pc, #60]	; (23e9498 <_Z14sht_initializev+0xb8>)
 23e945a:	6813      	ldr	r3, [r2, #0]
 23e945c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 23e9460:	6013      	str	r3, [r2, #0]
  }
  else {
    SHT_2_exists = true;
    msgp = (char *) "SHT2 OK";
  }
  Output (msgp);
 23e9462:	6828      	ldr	r0, [r5, #0]
}
 23e9464:	b004      	add	sp, #16
 23e9466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Output (msgp);
 23e946a:	f7ff ba71 	b.w	23e8950 <_Z6OutputPKc>
    SHT_1_exists = true;
 23e946e:	2201      	movs	r2, #1
 23e9470:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "SHT1 OK";
 23e9472:	4b0d      	ldr	r3, [pc, #52]	; (23e94a8 <_Z14sht_initializev+0xc8>)
 23e9474:	602b      	str	r3, [r5, #0]
 23e9476:	e7d5      	b.n	23e9424 <_Z14sht_initializev+0x44>
    SHT_2_exists = true;
 23e9478:	2201      	movs	r2, #1
 23e947a:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "SHT2 OK";
 23e947c:	4b0b      	ldr	r3, [pc, #44]	; (23e94ac <_Z14sht_initializev+0xcc>)
 23e947e:	602b      	str	r3, [r5, #0]
 23e9480:	e7ef      	b.n	23e9462 <_Z14sht_initializev+0x82>
 23e9482:	bf00      	nop
 23e9484:	023fd60d 	.word	0x023fd60d
 23e9488:	1007abc0 	.word	0x1007abc0
 23e948c:	1006f548 	.word	0x1006f548
 23e9490:	1006a824 	.word	0x1006a824
 23e9494:	023fd616 	.word	0x023fd616
 23e9498:	1006a22c 	.word	0x1006a22c
 23e949c:	1007abd0 	.word	0x1007abd0
 23e94a0:	1006a825 	.word	0x1006a825
 23e94a4:	023fd626 	.word	0x023fd626
 23e94a8:	023fd61e 	.word	0x023fd61e
 23e94ac:	023fd62e 	.word	0x023fd62e

023e94b0 <_Z15hih8_initializev>:
/* 
 *=======================================================================================================================
 * hih8_initialize() - HIH8000 sensor initialize
 *=======================================================================================================================
 */
void hih8_initialize() {
 23e94b0:	b508      	push	{r3, lr}
  Output("HIH8:INIT");
 23e94b2:	480d      	ldr	r0, [pc, #52]	; (23e94e8 <_Z15hih8_initializev+0x38>)
 23e94b4:	f7ff fa4c 	bl	23e8950 <_Z6OutputPKc>

  if (I2C_Device_Exist(HIH8000_ADDRESS)) {
 23e94b8:	2027      	movs	r0, #39	; 0x27
 23e94ba:	f7ff f83f 	bl	23e853c <_Z16I2C_Device_Existh>
 23e94be:	4a0b      	ldr	r2, [pc, #44]	; (23e94ec <_Z15hih8_initializev+0x3c>)
 23e94c0:	4b0b      	ldr	r3, [pc, #44]	; (23e94f0 <_Z15hih8_initializev+0x40>)
 23e94c2:	b140      	cbz	r0, 23e94d6 <_Z15hih8_initializev+0x26>
    HIH8_exists = true;
 23e94c4:	2101      	movs	r1, #1
 23e94c6:	7011      	strb	r1, [r2, #0]
    msgp = (char *) "HIH8 OK";
 23e94c8:	4a0a      	ldr	r2, [pc, #40]	; (23e94f4 <_Z15hih8_initializev+0x44>)
 23e94ca:	601a      	str	r2, [r3, #0]
  else {
    msgp = (char *) "HIH8 NF";
    HIH8_exists = false;
    SystemStatusBits |= SSB_HIH8;  // Turn On Bit
  }
  Output (msgp);
 23e94cc:	6818      	ldr	r0, [r3, #0]
}
 23e94ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
 23e94d2:	f7ff ba3d 	b.w	23e8950 <_Z6OutputPKc>
    msgp = (char *) "HIH8 NF";
 23e94d6:	4908      	ldr	r1, [pc, #32]	; (23e94f8 <_Z15hih8_initializev+0x48>)
    HIH8_exists = false;
 23e94d8:	7010      	strb	r0, [r2, #0]
    msgp = (char *) "HIH8 NF";
 23e94da:	6019      	str	r1, [r3, #0]
    SystemStatusBits |= SSB_HIH8;  // Turn On Bit
 23e94dc:	4907      	ldr	r1, [pc, #28]	; (23e94fc <_Z15hih8_initializev+0x4c>)
 23e94de:	680a      	ldr	r2, [r1, #0]
 23e94e0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 23e94e4:	600a      	str	r2, [r1, #0]
 23e94e6:	e7f1      	b.n	23e94cc <_Z15hih8_initializev+0x1c>
 23e94e8:	023fd636 	.word	0x023fd636
 23e94ec:	1006a346 	.word	0x1006a346
 23e94f0:	1006f548 	.word	0x1006f548
 23e94f4:	023fd640 	.word	0x023fd640
 23e94f8:	023fd648 	.word	0x023fd648
 23e94fc:	1006a22c 	.word	0x1006a22c

023e9500 <_Z17hih8_getTempHumidPfS_>:
 *=======================================================================================================================
 * hih8_getTempHumid() - Get Temp and Humidity
 *   Call example:  status = hih8_getTempHumid(&t, &h);
 *=======================================================================================================================
 */
bool hih8_getTempHumid(float *t, float *h) {
 23e9500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (HIH8_exists) {
 23e9504:	4b54      	ldr	r3, [pc, #336]	; (23e9658 <_Z17hih8_getTempHumidPfS_+0x158>)
bool hih8_getTempHumid(float *t, float *h) {
 23e9506:	4604      	mov	r4, r0
  if (HIH8_exists) {
 23e9508:	f893 8000 	ldrb.w	r8, [r3]
bool hih8_getTempHumid(float *t, float *h) {
 23e950c:	460d      	mov	r5, r1
  if (HIH8_exists) {
 23e950e:	f1b8 0f00 	cmp.w	r8, #0
 23e9512:	f000 8086 	beq.w	23e9622 <_Z17hih8_getTempHumidPfS_+0x122>
    uint16_t humidityBuffer    = 0;
    uint16_t temperatureBuffer = 0;
  
    Wire.begin();
 23e9516:	f010 fefd 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e951a:	f00f fccb 	bl	23f8eb4 <_ZN7TwoWire5beginEv>
    Wire.beginTransmission(HIH8000_ADDRESS);
 23e951e:	f010 fef9 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e9522:	2127      	movs	r1, #39	; 0x27
 23e9524:	f00f fcf4 	bl	23f8f10 <_ZN7TwoWire17beginTransmissionEi>

    Wire.write(0x00); // set the register location for read request
 23e9528:	f010 fef4 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e952c:	2100      	movs	r1, #0
 23e952e:	f7fe ff2f 	bl	23e8390 <_ZN7TwoWire5writeEi.isra.0>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 23e9532:	20c8      	movs	r0, #200	; 0xc8
 23e9534:	f00e f87e 	bl	23f7634 <HAL_Delay_Microseconds>

    delayMicroseconds(200); // give some time for sensor to process request

    if (Wire.requestFrom(HIH8000_ADDRESS, 4) == 4) {
 23e9538:	f010 feec 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e953c:	2204      	movs	r2, #4
 23e953e:	2127      	movs	r1, #39	; 0x27
 23e9540:	f00f fcdf 	bl	23f8f02 <_ZN7TwoWire11requestFromEhj>
 23e9544:	2804      	cmp	r0, #4
 23e9546:	d175      	bne.n	23e9634 <_Z17hih8_getTempHumidPfS_+0x134>

      // Get raw humidity data
      humidityBuffer = Wire.read();
 23e9548:	f010 fee4 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e954c:	6803      	ldr	r3, [r0, #0]
 23e954e:	695b      	ldr	r3, [r3, #20]
 23e9550:	4798      	blx	r3
 23e9552:	b287      	uxth	r7, r0
      humidityBuffer <<= 8;
      humidityBuffer |= Wire.read();
 23e9554:	f010 fede 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e9558:	6803      	ldr	r3, [r0, #0]
 23e955a:	695b      	ldr	r3, [r3, #20]
 23e955c:	4798      	blx	r3
 23e955e:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
 23e9562:	b287      	uxth	r7, r0
      humidityBuffer &= 0x3FFF;   // 14bit value, get rid of the upper 2 status bits

      // Get raw temperature data
      temperatureBuffer = Wire.read();
 23e9564:	f010 fed6 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e9568:	6803      	ldr	r3, [r0, #0]
 23e956a:	695b      	ldr	r3, [r3, #20]
 23e956c:	4798      	blx	r3
 23e956e:	b286      	uxth	r6, r0
      temperatureBuffer <<= 8;
      temperatureBuffer |= Wire.read();
 23e9570:	f010 fed0 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e9574:	6803      	ldr	r3, [r0, #0]
 23e9576:	695b      	ldr	r3, [r3, #20]
 23e9578:	4798      	blx	r3
 23e957a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 23e957e:	b286      	uxth	r6, r0
      temperatureBuffer >>= 2;  // Remove the last two "Do Not Care" bits (shift left is same as divide by 4)

      Wire.endTransmission();
 23e9580:	f010 fec8 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e9584:	f00f fccb 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>

      *h = humidityBuffer * 6.10e-3;
 23e9588:	f3c7 000d 	ubfx	r0, r7, #0, #14
 23e958c:	f7fd faa2 	bl	23e6ad4 <__aeabi_i2d>
 23e9590:	a32d      	add	r3, pc, #180	; (adr r3, 23e9648 <_Z17hih8_getTempHumidPfS_+0x148>)
 23e9592:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e9596:	f7fd fb07 	bl	23e6ba8 <__aeabi_dmul>
 23e959a:	f7fd fdfd 	bl	23e7198 <__aeabi_d2f>
 23e959e:	6028      	str	r0, [r5, #0]
      *t = temperatureBuffer * 1.007e-2 - 40.0;
 23e95a0:	08b0      	lsrs	r0, r6, #2
 23e95a2:	f7fd fa97 	bl	23e6ad4 <__aeabi_i2d>
 23e95a6:	a32a      	add	r3, pc, #168	; (adr r3, 23e9650 <_Z17hih8_getTempHumidPfS_+0x150>)
 23e95a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e95ac:	f7fd fafc 	bl	23e6ba8 <__aeabi_dmul>
 23e95b0:	2200      	movs	r2, #0
 23e95b2:	4b2a      	ldr	r3, [pc, #168]	; (23e965c <_Z17hih8_getTempHumidPfS_+0x15c>)
 23e95b4:	f7fd f940 	bl	23e6838 <__aeabi_dsub>
 23e95b8:	f7fd fdee 	bl	23e7198 <__aeabi_d2f>
 23e95bc:	6020      	str	r0, [r4, #0]

      // QC Check
      *h = (isnan(*h) || (*h < QC_MIN_RH) || (*h >QC_MAX_RH)) ? QC_ERR_RH : *h;
 23e95be:	edd5 7a00 	vldr	s15, [r5]
 23e95c2:	eef4 7a67 	vcmp.f32	s15, s15
 23e95c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e95ca:	d62d      	bvs.n	23e9628 <_Z17hih8_getTempHumidPfS_+0x128>
 23e95cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23e95d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e95d4:	d428      	bmi.n	23e9628 <_Z17hih8_getTempHumidPfS_+0x128>
 23e95d6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 23e9660 <_Z17hih8_getTempHumidPfS_+0x160>
 23e95da:	eef4 7a47 	vcmp.f32	s15, s14
 23e95de:	ed9f 7a21 	vldr	s14, [pc, #132]	; 23e9664 <_Z17hih8_getTempHumidPfS_+0x164>
 23e95e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e95e6:	fe77 7a27 	vselgt.f32	s15, s14, s15
 23e95ea:	edc5 7a00 	vstr	s15, [r5]
      *t = (isnan(*t) || (*t < QC_MIN_T)  || (*t >QC_MAX_T))  ? QC_ERR_T  : *t;
 23e95ee:	edd4 7a00 	vldr	s15, [r4]
 23e95f2:	eef4 7a67 	vcmp.f32	s15, s15
 23e95f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e95fa:	d618      	bvs.n	23e962e <_Z17hih8_getTempHumidPfS_+0x12e>
 23e95fc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 23e9668 <_Z17hih8_getTempHumidPfS_+0x168>
 23e9600:	eef4 7ac7 	vcmpe.f32	s15, s14
 23e9604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9608:	d411      	bmi.n	23e962e <_Z17hih8_getTempHumidPfS_+0x12e>
 23e960a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 23e966c <_Z17hih8_getTempHumidPfS_+0x16c>
 23e960e:	eef4 7a47 	vcmp.f32	s15, s14
 23e9612:	ed9f 7a14 	vldr	s14, [pc, #80]	; 23e9664 <_Z17hih8_getTempHumidPfS_+0x164>
 23e9616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e961a:	fe77 7a27 	vselgt.f32	s15, s14, s15
 23e961e:	edc4 7a00 	vstr	s15, [r4]
    }
  }
  else {
    return (false);
  }
}
 23e9622:	4640      	mov	r0, r8
 23e9624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *h = (isnan(*h) || (*h < QC_MIN_RH) || (*h >QC_MAX_RH)) ? QC_ERR_RH : *h;
 23e9628:	eddf 7a0e 	vldr	s15, [pc, #56]	; 23e9664 <_Z17hih8_getTempHumidPfS_+0x164>
 23e962c:	e7dd      	b.n	23e95ea <_Z17hih8_getTempHumidPfS_+0xea>
      *t = (isnan(*t) || (*t < QC_MIN_T)  || (*t >QC_MAX_T))  ? QC_ERR_T  : *t;
 23e962e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 23e9664 <_Z17hih8_getTempHumidPfS_+0x164>
 23e9632:	e7f4      	b.n	23e961e <_Z17hih8_getTempHumidPfS_+0x11e>
      Wire.endTransmission();
 23e9634:	f010 fe6e 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e9638:	f00f fc71 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>
      return(false);
 23e963c:	f04f 0800 	mov.w	r8, #0
 23e9640:	e7ef      	b.n	23e9622 <_Z17hih8_getTempHumidPfS_+0x122>
 23e9642:	bf00      	nop
 23e9644:	f3af 8000 	nop.w
 23e9648:	4816f007 	.word	0x4816f007
 23e964c:	3f78fc50 	.word	0x3f78fc50
 23e9650:	855da273 	.word	0x855da273
 23e9654:	3f849f94 	.word	0x3f849f94
 23e9658:	1006a346 	.word	0x1006a346
 23e965c:	40440000 	.word	0x40440000
 23e9660:	42c80000 	.word	0x42c80000
 23e9664:	c479f99a 	.word	0xc479f99a
 23e9668:	c2200000 	.word	0xc2200000
 23e966c:	42700000 	.word	0x42700000

023e9670 <_Z14wbt_initializev>:
/* 
 *=======================================================================================================================
 * wbt_initialize() - Wet Bulb Temperature
 *=======================================================================================================================
 */
void wbt_initialize() {
 23e9670:	b508      	push	{r3, lr}
  Output("WBT:INIT");
 23e9672:	4809      	ldr	r0, [pc, #36]	; (23e9698 <_Z14wbt_initializev+0x28>)
 23e9674:	f7ff f96c 	bl	23e8950 <_Z6OutputPKc>
  if (MCP_1_exists && SHT_1_exists) {
 23e9678:	4b08      	ldr	r3, [pc, #32]	; (23e969c <_Z14wbt_initializev+0x2c>)
 23e967a:	781b      	ldrb	r3, [r3, #0]
 23e967c:	b153      	cbz	r3, 23e9694 <_Z14wbt_initializev+0x24>
 23e967e:	4b08      	ldr	r3, [pc, #32]	; (23e96a0 <_Z14wbt_initializev+0x30>)
 23e9680:	781b      	ldrb	r3, [r3, #0]
 23e9682:	b13b      	cbz	r3, 23e9694 <_Z14wbt_initializev+0x24>
    WBT_exists = true;
 23e9684:	2201      	movs	r2, #1
 23e9686:	4b07      	ldr	r3, [pc, #28]	; (23e96a4 <_Z14wbt_initializev+0x34>)
    Output ("WBT:OK");
 23e9688:	4807      	ldr	r0, [pc, #28]	; (23e96a8 <_Z14wbt_initializev+0x38>)
    WBT_exists = true;
 23e968a:	701a      	strb	r2, [r3, #0]
  }
  else {
    Output ("WBT:NF");
  }
}
 23e968c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Output ("WBT:NF");
 23e9690:	f7ff b95e 	b.w	23e8950 <_Z6OutputPKc>
 23e9694:	4805      	ldr	r0, [pc, #20]	; (23e96ac <_Z14wbt_initializev+0x3c>)
 23e9696:	e7f9      	b.n	23e968c <_Z14wbt_initializev+0x1c>
 23e9698:	023fd650 	.word	0x023fd650
 23e969c:	1006a360 	.word	0x1006a360
 23e96a0:	1006a824 	.word	0x1006a824
 23e96a4:	1006a83a 	.word	0x1006a83a
 23e96a8:	023fd659 	.word	0x023fd659
 23e96ac:	023fd660 	.word	0x023fd660

023e96b0 <_Z13wbt_calculatedd>:
 *     In Arduino code, square brackets are not used for mathematical operations. Instead, parentheses ( ).
 * sqrt(x) computes the square root of x, which is x to the 1/2.
 * pow(RH, 1.5) calculates RH to the 3/2, which is the relative humidity raised to the power of 1.5.
 *=======================================================================================================================
 */
double wbt_calculate(double T, double RH) {
 23e96b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((T == -999.9) || (RH == -999.9)) {
 23e96b4:	a354      	add	r3, pc, #336	; (adr r3, 23e9808 <_Z13wbt_calculatedd+0x158>)
 23e96b6:	e9d3 2300 	ldrd	r2, r3, [r3]
double wbt_calculate(double T, double RH) {
 23e96ba:	ec57 6b10 	vmov	r6, r7, d0
 23e96be:	b085      	sub	sp, #20
  if ((T == -999.9) || (RH == -999.9)) {
 23e96c0:	ee10 0a10 	vmov	r0, s0
 23e96c4:	4639      	mov	r1, r7
double wbt_calculate(double T, double RH) {
 23e96c6:	ec55 4b11 	vmov	r4, r5, d1
  if ((T == -999.9) || (RH == -999.9)) {
 23e96ca:	f7fd fcd5 	bl	23e7078 <__aeabi_dcmpeq>
 23e96ce:	2800      	cmp	r0, #0
 23e96d0:	f040 808b 	bne.w	23e97ea <_Z13wbt_calculatedd+0x13a>
 23e96d4:	a34c      	add	r3, pc, #304	; (adr r3, 23e9808 <_Z13wbt_calculatedd+0x158>)
 23e96d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e96da:	4620      	mov	r0, r4
 23e96dc:	4629      	mov	r1, r5
 23e96de:	f7fd fccb 	bl	23e7078 <__aeabi_dcmpeq>
 23e96e2:	2800      	cmp	r0, #0
 23e96e4:	f040 8081 	bne.w	23e97ea <_Z13wbt_calculatedd+0x13a>
  }

  // Output("WBT:CALC");

  // Equation components
  double term1 = T * atan(0.151977 * sqrt(RH + 8.313659));
 23e96e8:	a34b      	add	r3, pc, #300	; (adr r3, 23e9818 <_Z13wbt_calculatedd+0x168>)
 23e96ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e96ee:	4620      	mov	r0, r4
 23e96f0:	4629      	mov	r1, r5
 23e96f2:	f7fd f8a3 	bl	23e683c <__adddf3>
 23e96f6:	ec41 0b10 	vmov	d0, r0, r1
 23e96fa:	f011 fa8b 	bl	23fac14 <sqrt>
 23e96fe:	a348      	add	r3, pc, #288	; (adr r3, 23e9820 <_Z13wbt_calculatedd+0x170>)
 23e9700:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e9704:	ec51 0b10 	vmov	r0, r1, d0
 23e9708:	f7fd fa4e 	bl	23e6ba8 <__aeabi_dmul>
 23e970c:	ec41 0b10 	vmov	d0, r0, r1
 23e9710:	f010 feba 	bl	23fa488 <atan>
  double term2 = atan(T + RH);
 23e9714:	4622      	mov	r2, r4
 23e9716:	462b      	mov	r3, r5
 23e9718:	4630      	mov	r0, r6
 23e971a:	4639      	mov	r1, r7
  double term1 = T * atan(0.151977 * sqrt(RH + 8.313659));
 23e971c:	ec59 8b10 	vmov	r8, r9, d0
  double term2 = atan(T + RH);
 23e9720:	f7fd f88c 	bl	23e683c <__adddf3>
 23e9724:	ec41 0b10 	vmov	d0, r0, r1
 23e9728:	f010 feae 	bl	23fa488 <atan>
  double term3 = atan(RH - 1.676311);
 23e972c:	a33e      	add	r3, pc, #248	; (adr r3, 23e9828 <_Z13wbt_calculatedd+0x178>)
 23e972e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e9732:	4620      	mov	r0, r4
 23e9734:	4629      	mov	r1, r5
  double term2 = atan(T + RH);
 23e9736:	ec5b ab10 	vmov	sl, fp, d0
  double term3 = atan(RH - 1.676311);
 23e973a:	f7fd f87d 	bl	23e6838 <__aeabi_dsub>
 23e973e:	ec41 0b10 	vmov	d0, r0, r1
 23e9742:	f010 fea1 	bl	23fa488 <atan>
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
 23e9746:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 23e9800 <_Z13wbt_calculatedd+0x150>
  double term3 = atan(RH - 1.676311);
 23e974a:	ed8d 0b00 	vstr	d0, [sp]
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
 23e974e:	ec45 4b10 	vmov	d0, r4, r5
 23e9752:	f011 f98d 	bl	23faa70 <pow>
 23e9756:	a336      	add	r3, pc, #216	; (adr r3, 23e9830 <_Z13wbt_calculatedd+0x180>)
 23e9758:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e975c:	4620      	mov	r0, r4
 23e975e:	4629      	mov	r1, r5
 23e9760:	ed8d 0b02 	vstr	d0, [sp, #8]
 23e9764:	f7fd fa20 	bl	23e6ba8 <__aeabi_dmul>
 23e9768:	ec41 0b10 	vmov	d0, r0, r1
 23e976c:	f010 fe8c 	bl	23fa488 <atan>
  double term1 = T * atan(0.151977 * sqrt(RH + 8.313659));
 23e9770:	4642      	mov	r2, r8
 23e9772:	464b      	mov	r3, r9
 23e9774:	4630      	mov	r0, r6
 23e9776:	4639      	mov	r1, r7
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
 23e9778:	ec55 4b10 	vmov	r4, r5, d0
  double term1 = T * atan(0.151977 * sqrt(RH + 8.313659));
 23e977c:	f7fd fa14 	bl	23e6ba8 <__aeabi_dmul>
  double constant = 4.686035;

  // Wet bulb temperature calculation
  double Tw = term1 + term2 - term3 + term4 - constant;
 23e9780:	4652      	mov	r2, sl
 23e9782:	465b      	mov	r3, fp
 23e9784:	f7fd f85a 	bl	23e683c <__adddf3>
 23e9788:	e9dd 2300 	ldrd	r2, r3, [sp]
 23e978c:	f7fd f854 	bl	23e6838 <__aeabi_dsub>
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
 23e9790:	a329      	add	r3, pc, #164	; (adr r3, 23e9838 <_Z13wbt_calculatedd+0x188>)
 23e9792:	e9d3 2300 	ldrd	r2, r3, [r3]
  double Tw = term1 + term2 - term3 + term4 - constant;
 23e9796:	4606      	mov	r6, r0
 23e9798:	460f      	mov	r7, r1
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
 23e979a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 23e979e:	f7fd fa03 	bl	23e6ba8 <__aeabi_dmul>
 23e97a2:	4622      	mov	r2, r4
 23e97a4:	462b      	mov	r3, r5
 23e97a6:	f7fd f9ff 	bl	23e6ba8 <__aeabi_dmul>
 23e97aa:	4602      	mov	r2, r0
 23e97ac:	460b      	mov	r3, r1
  double Tw = term1 + term2 - term3 + term4 - constant;
 23e97ae:	4630      	mov	r0, r6
 23e97b0:	4639      	mov	r1, r7
 23e97b2:	f7fd f843 	bl	23e683c <__adddf3>
 23e97b6:	a322      	add	r3, pc, #136	; (adr r3, 23e9840 <_Z13wbt_calculatedd+0x190>)
 23e97b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e97bc:	f7fd f83c 	bl	23e6838 <__aeabi_dsub>

  Tw = (isnan(Tw) || (Tw < QC_MIN_T)  || (Tw >QC_MAX_T))  ? QC_ERR_T  : Tw;
 23e97c0:	4602      	mov	r2, r0
 23e97c2:	460b      	mov	r3, r1
  double Tw = term1 + term2 - term3 + term4 - constant;
 23e97c4:	4604      	mov	r4, r0
 23e97c6:	460d      	mov	r5, r1
  Tw = (isnan(Tw) || (Tw < QC_MIN_T)  || (Tw >QC_MAX_T))  ? QC_ERR_T  : Tw;
 23e97c8:	f7fd fc88 	bl	23e70dc <__aeabi_dcmpun>
 23e97cc:	b968      	cbnz	r0, 23e97ea <_Z13wbt_calculatedd+0x13a>
 23e97ce:	2200      	movs	r2, #0
 23e97d0:	4620      	mov	r0, r4
 23e97d2:	4629      	mov	r1, r5
 23e97d4:	4b0e      	ldr	r3, [pc, #56]	; (23e9810 <_Z13wbt_calculatedd+0x160>)
 23e97d6:	f7fd fc59 	bl	23e708c <__aeabi_dcmplt>
 23e97da:	b930      	cbnz	r0, 23e97ea <_Z13wbt_calculatedd+0x13a>
 23e97dc:	2200      	movs	r2, #0
 23e97de:	4620      	mov	r0, r4
 23e97e0:	4629      	mov	r1, r5
 23e97e2:	4b0c      	ldr	r3, [pc, #48]	; (23e9814 <_Z13wbt_calculatedd+0x164>)
 23e97e4:	f7fd fc70 	bl	23e70c8 <__aeabi_dcmpgt>
 23e97e8:	b110      	cbz	r0, 23e97f0 <_Z13wbt_calculatedd+0x140>
 23e97ea:	a507      	add	r5, pc, #28	; (adr r5, 23e9808 <_Z13wbt_calculatedd+0x158>)
 23e97ec:	e9d5 4500 	ldrd	r4, r5, [r5]
  return (Tw);
}
 23e97f0:	ec45 4b10 	vmov	d0, r4, r5
 23e97f4:	b005      	add	sp, #20
 23e97f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23e97fa:	bf00      	nop
 23e97fc:	f3af 8000 	nop.w
 23e9800:	00000000 	.word	0x00000000
 23e9804:	3ff80000 	.word	0x3ff80000
 23e9808:	33333333 	.word	0x33333333
 23e980c:	c08f3f33 	.word	0xc08f3f33
 23e9810:	c0440000 	.word	0xc0440000
 23e9814:	404e0000 	.word	0x404e0000
 23e9818:	e996312f 	.word	0xe996312f
 23e981c:	4020a097 	.word	0x4020a097
 23e9820:	7a5f41af 	.word	0x7a5f41af
 23e9824:	3fc373fb 	.word	0x3fc373fb
 23e9828:	7baecd08 	.word	0x7baecd08
 23e982c:	3ffad22b 	.word	0x3ffad22b
 23e9830:	de050375 	.word	0xde050375
 23e9834:	3f97a7c9 	.word	0x3f97a7c9
 23e9838:	1f40b801 	.word	0x1f40b801
 23e983c:	3f700cb8 	.word	0x3f700cb8
 23e9840:	f583a53c 	.word	0xf583a53c
 23e9844:	4012be7f 	.word	0x4012be7f

023e9848 <_Z13hi_initializev>:
/* 
 *=======================================================================================================================
 * hi_initialize() - Heat Index Temperature
 *=======================================================================================================================
 */
void hi_initialize() {
 23e9848:	b508      	push	{r3, lr}
  Output("HI:INIT");
 23e984a:	4808      	ldr	r0, [pc, #32]	; (23e986c <_Z13hi_initializev+0x24>)
 23e984c:	f7ff f880 	bl	23e8950 <_Z6OutputPKc>
  if (SHT_1_exists) {
 23e9850:	4b07      	ldr	r3, [pc, #28]	; (23e9870 <_Z13hi_initializev+0x28>)
 23e9852:	781b      	ldrb	r3, [r3, #0]
 23e9854:	b13b      	cbz	r3, 23e9866 <_Z13hi_initializev+0x1e>
    HI_exists = true;
 23e9856:	2201      	movs	r2, #1
 23e9858:	4b06      	ldr	r3, [pc, #24]	; (23e9874 <_Z13hi_initializev+0x2c>)
    Output ("HI:OK");
 23e985a:	4807      	ldr	r0, [pc, #28]	; (23e9878 <_Z13hi_initializev+0x30>)
    HI_exists = true;
 23e985c:	701a      	strb	r2, [r3, #0]
  }
  else {
    Output ("HI:NF");
  }
}
 23e985e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Output ("HI:NF");
 23e9862:	f7ff b875 	b.w	23e8950 <_Z6OutputPKc>
 23e9866:	4805      	ldr	r0, [pc, #20]	; (23e987c <_Z13hi_initializev+0x34>)
 23e9868:	e7f9      	b.n	23e985e <_Z13hi_initializev+0x16>
 23e986a:	bf00      	nop
 23e986c:	023fd667 	.word	0x023fd667
 23e9870:	1006a824 	.word	0x1006a824
 23e9874:	1006a347 	.word	0x1006a347
 23e9878:	023fd66f 	.word	0x023fd66f
 23e987c:	023fd675 	.word	0x023fd675

023e9880 <_Z12hi_calculateff>:
 * warrant a heat index value below about 80 degrees F. In those cases, a simpler formula 
 * is applied to calculate values consistent with Steadman's results:
 * HI = 0.5 * {T + 61.0 + [(T-68.0)*1.2] + (RH*0.094)} 
 *=======================================================================================================================
 */
float hi_calculate(float T, float RH) {
 23e9880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23e9884:	ee10 0a10 	vmov	r0, s0
 23e9888:	ed2d 8b04 	vpush	{d8-d9}
 23e988c:	eef0 8a60 	vmov.f32	s17, s1
  float HI;
  float HI_f;

  if ((T == -999.9) || (RH == -999.9)) {
 23e9890:	f7fd f932 	bl	23e6af8 <__aeabi_f2d>
 23e9894:	a3c1      	add	r3, pc, #772	; (adr r3, 23e9b9c <_Z12hi_calculateff+0x31c>)
 23e9896:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e989a:	4604      	mov	r4, r0
 23e989c:	460d      	mov	r5, r1
 23e989e:	f7fd fbeb 	bl	23e7078 <__aeabi_dcmpeq>
 23e98a2:	2800      	cmp	r0, #0
 23e98a4:	f040 80fa 	bne.w	23e9a9c <_Z12hi_calculateff+0x21c>
 23e98a8:	ee18 0a90 	vmov	r0, s17
 23e98ac:	f7fd f924 	bl	23e6af8 <__aeabi_f2d>
 23e98b0:	a3ba      	add	r3, pc, #744	; (adr r3, 23e9b9c <_Z12hi_calculateff+0x31c>)
 23e98b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e98b6:	4680      	mov	r8, r0
 23e98b8:	4689      	mov	r9, r1
 23e98ba:	f7fd fbdd 	bl	23e7078 <__aeabi_dcmpeq>
 23e98be:	2800      	cmp	r0, #0
 23e98c0:	f040 80ec 	bne.w	23e9a9c <_Z12hi_calculateff+0x21c>
    return (-999.9);
  }

  // Convert temperature from Celsius to Fahrenheit
  float T_f = T * 9.0 / 5.0 + 32.0;
 23e98c4:	2200      	movs	r2, #0
 23e98c6:	4620      	mov	r0, r4
 23e98c8:	4629      	mov	r1, r5
 23e98ca:	4b9d      	ldr	r3, [pc, #628]	; (23e9b40 <_Z12hi_calculateff+0x2c0>)
 23e98cc:	f7fd f96c 	bl	23e6ba8 <__aeabi_dmul>
 23e98d0:	2200      	movs	r2, #0
 23e98d2:	4b9c      	ldr	r3, [pc, #624]	; (23e9b44 <_Z12hi_calculateff+0x2c4>)
 23e98d4:	f7fd fa92 	bl	23e6dfc <__aeabi_ddiv>
 23e98d8:	2200      	movs	r2, #0
 23e98da:	4b9b      	ldr	r3, [pc, #620]	; (23e9b48 <_Z12hi_calculateff+0x2c8>)
 23e98dc:	f7fc ffae 	bl	23e683c <__adddf3>
 23e98e0:	f7fd fc5a 	bl	23e7198 <__aeabi_d2f>
 23e98e4:	ee09 0a10 	vmov	s18, r0

  // Steadman's equation
  HI_f = 0.5 * (T_f + 61.0 + ((T_f - 68.0)*1.2) + (RH * 0.094));
 23e98e8:	f7fd f906 	bl	23e6af8 <__aeabi_f2d>
 23e98ec:	2200      	movs	r2, #0
 23e98ee:	4b97      	ldr	r3, [pc, #604]	; (23e9b4c <_Z12hi_calculateff+0x2cc>)
 23e98f0:	4604      	mov	r4, r0
 23e98f2:	460d      	mov	r5, r1
 23e98f4:	f7fc ffa0 	bl	23e6838 <__aeabi_dsub>
 23e98f8:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 23e98fc:	4b94      	ldr	r3, [pc, #592]	; (23e9b50 <_Z12hi_calculateff+0x2d0>)
 23e98fe:	f7fd f953 	bl	23e6ba8 <__aeabi_dmul>
 23e9902:	2200      	movs	r2, #0
 23e9904:	4606      	mov	r6, r0
 23e9906:	460f      	mov	r7, r1
 23e9908:	4b92      	ldr	r3, [pc, #584]	; (23e9b54 <_Z12hi_calculateff+0x2d4>)
 23e990a:	4620      	mov	r0, r4
 23e990c:	4629      	mov	r1, r5
 23e990e:	f7fc ff95 	bl	23e683c <__adddf3>
 23e9912:	4602      	mov	r2, r0
 23e9914:	460b      	mov	r3, r1
 23e9916:	4630      	mov	r0, r6
 23e9918:	4639      	mov	r1, r7
 23e991a:	f7fc ff8f 	bl	23e683c <__adddf3>
 23e991e:	a382      	add	r3, pc, #520	; (adr r3, 23e9b28 <_Z12hi_calculateff+0x2a8>)
 23e9920:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e9924:	4606      	mov	r6, r0
 23e9926:	460f      	mov	r7, r1
 23e9928:	4640      	mov	r0, r8
 23e992a:	4649      	mov	r1, r9
 23e992c:	f7fd f93c 	bl	23e6ba8 <__aeabi_dmul>
 23e9930:	4602      	mov	r2, r0
 23e9932:	460b      	mov	r3, r1
 23e9934:	4630      	mov	r0, r6
 23e9936:	4639      	mov	r1, r7
 23e9938:	f7fc ff80 	bl	23e683c <__adddf3>
 23e993c:	2200      	movs	r2, #0
 23e993e:	4b86      	ldr	r3, [pc, #536]	; (23e9b58 <_Z12hi_calculateff+0x2d8>)
 23e9940:	f7fd f932 	bl	23e6ba8 <__aeabi_dmul>
 23e9944:	f7fd fc28 	bl	23e7198 <__aeabi_d2f>

  // Compute the average of the simple HI with the actual temperature [deg F]
  HI_f = (HI_f + T_f) / 2;
 23e9948:	ee07 0a90 	vmov	s15, r0
 23e994c:	ee37 8a89 	vadd.f32	s16, s15, s18
 23e9950:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5

  if (HI_f >= 80.0) { 
 23e9954:	ed9f 7a81 	vldr	s14, [pc, #516]	; 23e9b5c <_Z12hi_calculateff+0x2dc>
  HI_f = (HI_f + T_f) / 2;
 23e9958:	ee28 8a27 	vmul.f32	s16, s16, s15
  if (HI_f >= 80.0) { 
 23e995c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 23e9960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9964:	db75      	blt.n	23e9a52 <_Z12hi_calculateff+0x1d2>
    float c7 = 0.00122874;
    float c8 = 0.00085282;
    float c9 = -0.00000199;
    
    // Heat Index calculation
    HI_f = c1 + (c2 * T_f) + (c3 * RH) + (c4 * T_f * RH) +
 23e9966:	eddf 7a7e 	vldr	s15, [pc, #504]	; 23e9b60 <_Z12hi_calculateff+0x2e0>
 23e996a:	ed9f 8a7e 	vldr	s16, [pc, #504]	; 23e9b64 <_Z12hi_calculateff+0x2e4>
 23e996e:	eea9 8a27 	vfma.f32	s16, s18, s15
 23e9972:	eddf 7a7d 	vldr	s15, [pc, #500]	; 23e9b68 <_Z12hi_calculateff+0x2e8>
 23e9976:	eea8 8aa7 	vfma.f32	s16, s17, s15
 23e997a:	eddf 7a7c 	vldr	s15, [pc, #496]	; 23e9b6c <_Z12hi_calculateff+0x2ec>
 23e997e:	ee69 7a27 	vmul.f32	s15, s18, s15
 23e9982:	eea7 8aa8 	vfma.f32	s16, s15, s17
                (c5 * T_f * T_f) + (c6 * RH * RH) + 
 23e9986:	eddf 7a7a 	vldr	s15, [pc, #488]	; 23e9b70 <_Z12hi_calculateff+0x2f0>
 23e998a:	ee69 7a27 	vmul.f32	s15, s18, s15
    HI_f = c1 + (c2 * T_f) + (c3 * RH) + (c4 * T_f * RH) +
 23e998e:	eea7 8a89 	vfma.f32	s16, s15, s18
                (c5 * T_f * T_f) + (c6 * RH * RH) + 
 23e9992:	eddf 7a78 	vldr	s15, [pc, #480]	; 23e9b74 <_Z12hi_calculateff+0x2f4>
 23e9996:	ee68 7aa7 	vmul.f32	s15, s17, s15
 23e999a:	eea7 8aa8 	vfma.f32	s16, s15, s17
                (c7 * T_f * T_f * RH) + (c8 * T_f * RH * RH) +
 23e999e:	eddf 7a76 	vldr	s15, [pc, #472]	; 23e9b78 <_Z12hi_calculateff+0x2f8>
 23e99a2:	ee69 7a27 	vmul.f32	s15, s18, s15
 23e99a6:	ee67 7a89 	vmul.f32	s15, s15, s18
                (c5 * T_f * T_f) + (c6 * RH * RH) + 
 23e99aa:	eea7 8aa8 	vfma.f32	s16, s15, s17
                (c7 * T_f * T_f * RH) + (c8 * T_f * RH * RH) +
 23e99ae:	eddf 7a73 	vldr	s15, [pc, #460]	; 23e9b7c <_Z12hi_calculateff+0x2fc>
 23e99b2:	ee69 7a27 	vmul.f32	s15, s18, s15
 23e99b6:	ee67 7aa8 	vmul.f32	s15, s15, s17
 23e99ba:	eea7 8aa8 	vfma.f32	s16, s15, s17
                (c9 * T_f * T_f * RH * RH);
 23e99be:	eddf 7a70 	vldr	s15, [pc, #448]	; 23e9b80 <_Z12hi_calculateff+0x300>

    if ((RH < 13.0) && ((T_f > 80.0) && (T_f < 112.0)) ) {
 23e99c2:	eef2 9a0a 	vmov.f32	s19, #42	; 0x41500000  13.0
                (c9 * T_f * T_f * RH * RH);
 23e99c6:	ee69 7a27 	vmul.f32	s15, s18, s15
    if ((RH < 13.0) && ((T_f > 80.0) && (T_f < 112.0)) ) {
 23e99ca:	eef4 8ae9 	vcmpe.f32	s17, s19
                (c9 * T_f * T_f * RH * RH);
 23e99ce:	ee67 7a89 	vmul.f32	s15, s15, s18
    if ((RH < 13.0) && ((T_f > 80.0) && (T_f < 112.0)) ) {
 23e99d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                (c9 * T_f * T_f * RH * RH);
 23e99d6:	ee67 7aa8 	vmul.f32	s15, s15, s17
    HI_f = c1 + (c2 * T_f) + (c3 * RH) + (c4 * T_f * RH) +
 23e99da:	eea7 8aa8 	vfma.f32	s16, s15, s17
    if ((RH < 13.0) && ((T_f > 80.0) && (T_f < 112.0)) ) {
 23e99de:	d563      	bpl.n	23e9aa8 <_Z12hi_calculateff+0x228>
 23e99e0:	eeb4 9ac7 	vcmpe.f32	s18, s14
 23e99e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e99e8:	dd5e      	ble.n	23e9aa8 <_Z12hi_calculateff+0x228>
 23e99ea:	eddf 7a66 	vldr	s15, [pc, #408]	; 23e9b84 <_Z12hi_calculateff+0x304>
 23e99ee:	eeb4 9ae7 	vcmpe.f32	s18, s15
 23e99f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e99f6:	f140 8090 	bpl.w	23e9b1a <_Z12hi_calculateff+0x29a>
      // If the RH is less than 13% and the temperature is between 80 and 112 degrees F, 
      // then the following adjustment is subtracted from HI: 
      // ADJUSTMENT = [(13-RH)/4]*SQRT{[17-ABS(T-95.)]/17}

      float Adjustment = ( (13 - RH) / 4 ) * sqrt( (17 - abs(T_f - 95.0) ) / 17 );
 23e99fa:	a34d      	add	r3, pc, #308	; (adr r3, 23e9b30 <_Z12hi_calculateff+0x2b0>)
 23e99fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e9a00:	4620      	mov	r0, r4
 23e9a02:	4629      	mov	r1, r5
 23e9a04:	f7fc ff18 	bl	23e6838 <__aeabi_dsub>
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 23e9a08:	4602      	mov	r2, r0
 23e9a0a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23e9a0e:	2000      	movs	r0, #0
 23e9a10:	495d      	ldr	r1, [pc, #372]	; (23e9b88 <_Z12hi_calculateff+0x308>)
 23e9a12:	f7fc ff11 	bl	23e6838 <__aeabi_dsub>
 23e9a16:	2200      	movs	r2, #0
 23e9a18:	4b5b      	ldr	r3, [pc, #364]	; (23e9b88 <_Z12hi_calculateff+0x308>)
 23e9a1a:	f7fd f9ef 	bl	23e6dfc <__aeabi_ddiv>
 23e9a1e:	ec41 0b10 	vmov	d0, r0, r1
 23e9a22:	f011 f8f7 	bl	23fac14 <sqrt>
 23e9a26:	ee79 8ae8 	vsub.f32	s17, s19, s17
 23e9a2a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 23e9a2e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 23e9a32:	ec55 4b10 	vmov	r4, r5, d0
 23e9a36:	ee17 0a90 	vmov	r0, s15
 23e9a3a:	f7fd f85d 	bl	23e6af8 <__aeabi_f2d>
 23e9a3e:	4622      	mov	r2, r4
 23e9a40:	462b      	mov	r3, r5
 23e9a42:	f7fd f8b1 	bl	23e6ba8 <__aeabi_dmul>
 23e9a46:	f7fd fba7 	bl	23e7198 <__aeabi_d2f>

      HI_f = HI_f - Adjustment;
 23e9a4a:	ee07 0a90 	vmov	s15, r0
 23e9a4e:	ee38 8a67 	vsub.f32	s16, s16, s15
      HI_f = HI_f + Adjustment;
    }
  }

  // Convert Heat Index from Fahrenheit to Celsius
  HI = (HI_f - 32.0) * 5.0 / 9.0;
 23e9a52:	ee18 0a10 	vmov	r0, s16
 23e9a56:	f7fd f84f 	bl	23e6af8 <__aeabi_f2d>
 23e9a5a:	2200      	movs	r2, #0
 23e9a5c:	4b3a      	ldr	r3, [pc, #232]	; (23e9b48 <_Z12hi_calculateff+0x2c8>)
 23e9a5e:	f7fc feeb 	bl	23e6838 <__aeabi_dsub>
 23e9a62:	2200      	movs	r2, #0
 23e9a64:	4b37      	ldr	r3, [pc, #220]	; (23e9b44 <_Z12hi_calculateff+0x2c4>)
 23e9a66:	f7fd f89f 	bl	23e6ba8 <__aeabi_dmul>
 23e9a6a:	2200      	movs	r2, #0
 23e9a6c:	4b34      	ldr	r3, [pc, #208]	; (23e9b40 <_Z12hi_calculateff+0x2c0>)
 23e9a6e:	f7fd f9c5 	bl	23e6dfc <__aeabi_ddiv>
 23e9a72:	f7fd fb91 	bl	23e7198 <__aeabi_d2f>
 23e9a76:	ee00 0a10 	vmov	s0, r0

  // Quality Control Check
  HI = (isnan(HI) || (HI < QC_MIN_HI)  || (HI >QC_MAX_HI))  ? QC_ERR_HI  : HI;
 23e9a7a:	eeb4 0a40 	vcmp.f32	s0, s0
 23e9a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9a82:	d60b      	bvs.n	23e9a9c <_Z12hi_calculateff+0x21c>
 23e9a84:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23e9a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9a8c:	d406      	bmi.n	23e9a9c <_Z12hi_calculateff+0x21c>
 23e9a8e:	eddf 7a3f 	vldr	s15, [pc, #252]	; 23e9b8c <_Z12hi_calculateff+0x30c>
 23e9a92:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23e9a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9a9a:	dd01      	ble.n	23e9aa0 <_Z12hi_calculateff+0x220>
 23e9a9c:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 23e9b90 <_Z12hi_calculateff+0x310>

  return (HI);
}
 23e9aa0:	ecbd 8b04 	vpop	{d8-d9}
 23e9aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if ((RH > 85.0) && ((T_f > 80.0) && (T_f < 87.0)) ) {
 23e9aa8:	eddf 7a3a 	vldr	s15, [pc, #232]	; 23e9b94 <_Z12hi_calculateff+0x314>
 23e9aac:	eef4 8ae7 	vcmpe.f32	s17, s15
 23e9ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9ab4:	ddcd      	ble.n	23e9a52 <_Z12hi_calculateff+0x1d2>
 23e9ab6:	eeb4 9ac7 	vcmpe.f32	s18, s14
 23e9aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9abe:	ddc8      	ble.n	23e9a52 <_Z12hi_calculateff+0x1d2>
 23e9ac0:	eddf 7a35 	vldr	s15, [pc, #212]	; 23e9b98 <_Z12hi_calculateff+0x318>
 23e9ac4:	eeb4 9ae7 	vcmpe.f32	s18, s15
 23e9ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9acc:	d5c1      	bpl.n	23e9a52 <_Z12hi_calculateff+0x1d2>
      float Adjustment = ( (RH - 85) / 10 ) * ( (87.0 - T_f) / 5 );
 23e9ace:	eddf 0a31 	vldr	s1, [pc, #196]	; 23e9b94 <_Z12hi_calculateff+0x314>
 23e9ad2:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 23e9ad6:	ee78 8ae0 	vsub.f32	s17, s17, s1
 23e9ada:	eec8 7aa7 	vdiv.f32	s15, s17, s15
 23e9ade:	ee17 0a90 	vmov	r0, s15
 23e9ae2:	f7fd f809 	bl	23e6af8 <__aeabi_f2d>
 23e9ae6:	4622      	mov	r2, r4
 23e9ae8:	4606      	mov	r6, r0
 23e9aea:	460f      	mov	r7, r1
 23e9aec:	a112      	add	r1, pc, #72	; (adr r1, 23e9b38 <_Z12hi_calculateff+0x2b8>)
 23e9aee:	e9d1 0100 	ldrd	r0, r1, [r1]
 23e9af2:	462b      	mov	r3, r5
 23e9af4:	f7fc fea0 	bl	23e6838 <__aeabi_dsub>
 23e9af8:	2200      	movs	r2, #0
 23e9afa:	4b12      	ldr	r3, [pc, #72]	; (23e9b44 <_Z12hi_calculateff+0x2c4>)
 23e9afc:	f7fd f97e 	bl	23e6dfc <__aeabi_ddiv>
 23e9b00:	4602      	mov	r2, r0
 23e9b02:	460b      	mov	r3, r1
 23e9b04:	4630      	mov	r0, r6
 23e9b06:	4639      	mov	r1, r7
 23e9b08:	f7fd f84e 	bl	23e6ba8 <__aeabi_dmul>
 23e9b0c:	f7fd fb44 	bl	23e7198 <__aeabi_d2f>
      HI_f = HI_f + Adjustment;
 23e9b10:	ee07 0a90 	vmov	s15, r0
 23e9b14:	ee38 8a27 	vadd.f32	s16, s16, s15
 23e9b18:	e79b      	b.n	23e9a52 <_Z12hi_calculateff+0x1d2>
    else if ((RH > 85.0) && ((T_f > 80.0) && (T_f < 87.0)) ) {
 23e9b1a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 23e9b94 <_Z12hi_calculateff+0x314>
 23e9b1e:	eef4 8ae7 	vcmpe.f32	s17, s15
 23e9b22:	e7ca      	b.n	23e9aba <_Z12hi_calculateff+0x23a>
 23e9b24:	f3af 8000 	nop.w
 23e9b28:	4dd2f1aa 	.word	0x4dd2f1aa
 23e9b2c:	3fb81062 	.word	0x3fb81062
 23e9b30:	00000000 	.word	0x00000000
 23e9b34:	4057c000 	.word	0x4057c000
 23e9b38:	00000000 	.word	0x00000000
 23e9b3c:	4055c000 	.word	0x4055c000
 23e9b40:	40220000 	.word	0x40220000
 23e9b44:	40140000 	.word	0x40140000
 23e9b48:	40400000 	.word	0x40400000
 23e9b4c:	40510000 	.word	0x40510000
 23e9b50:	3ff33333 	.word	0x3ff33333
 23e9b54:	404e8000 	.word	0x404e8000
 23e9b58:	3fe00000 	.word	0x3fe00000
 23e9b5c:	42a00000 	.word	0x42a00000
 23e9b60:	40032311 	.word	0x40032311
 23e9b64:	c2298419 	.word	0xc2298419
 23e9b68:	41224b16 	.word	0x41224b16
 23e9b6c:	be662648 	.word	0xbe662648
 23e9b70:	bbe00fe0 	.word	0xbbe00fe0
 23e9b74:	bd6087f8 	.word	0xbd6087f8
 23e9b78:	3aa10dac 	.word	0x3aa10dac
 23e9b7c:	3a5f8fc8 	.word	0x3a5f8fc8
 23e9b80:	b6058bf1 	.word	0xb6058bf1
 23e9b84:	42e00000 	.word	0x42e00000
 23e9b88:	40310000 	.word	0x40310000
 23e9b8c:	42700000 	.word	0x42700000
 23e9b90:	c479f99a 	.word	0xc479f99a
 23e9b94:	42aa0000 	.word	0x42aa0000
 23e9b98:	42ae0000 	.word	0x42ae0000
 23e9b9c:	33333333 	.word	0x33333333
 23e9ba0:	c08f3f33 	.word	0xc08f3f33

023e9ba4 <_Z15wbgt_initializev>:
/* 
 *=======================================================================================================================
 * wbgt_initialize() - Wet Bulb Globe Temperature
 *=======================================================================================================================
 */
void wbgt_initialize() {
 23e9ba4:	b508      	push	{r3, lr}
  Output("WBGT:INIT");
 23e9ba6:	480c      	ldr	r0, [pc, #48]	; (23e9bd8 <_Z15wbgt_initializev+0x34>)
 23e9ba8:	f7fe fed2 	bl	23e8950 <_Z6OutputPKc>
  if (MCP_1_exists && SHT_1_exists) {
 23e9bac:	4b0b      	ldr	r3, [pc, #44]	; (23e9bdc <_Z15wbgt_initializev+0x38>)
 23e9bae:	781b      	ldrb	r3, [r3, #0]
 23e9bb0:	b17b      	cbz	r3, 23e9bd2 <_Z15wbgt_initializev+0x2e>
 23e9bb2:	4b0b      	ldr	r3, [pc, #44]	; (23e9be0 <_Z15wbgt_initializev+0x3c>)
 23e9bb4:	781b      	ldrb	r3, [r3, #0]
 23e9bb6:	b163      	cbz	r3, 23e9bd2 <_Z15wbgt_initializev+0x2e>
    WBGT_exists = true;
 23e9bb8:	2201      	movs	r2, #1
 23e9bba:	4b0a      	ldr	r3, [pc, #40]	; (23e9be4 <_Z15wbgt_initializev+0x40>)
 23e9bbc:	701a      	strb	r2, [r3, #0]
    if (MCP_3_exists) {
 23e9bbe:	4b0a      	ldr	r3, [pc, #40]	; (23e9be8 <_Z15wbgt_initializev+0x44>)
 23e9bc0:	781b      	ldrb	r3, [r3, #0]
 23e9bc2:	b123      	cbz	r3, 23e9bce <_Z15wbgt_initializev+0x2a>
      Output ("WBGT:OK w/Globe");
 23e9bc4:	4809      	ldr	r0, [pc, #36]	; (23e9bec <_Z15wbgt_initializev+0x48>)
    }
  }
  else {
    Output ("WBGT:NF");
  }
}
 23e9bc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Output ("WBGT:NF");
 23e9bca:	f7fe bec1 	b.w	23e8950 <_Z6OutputPKc>
      Output ("WBGT:OK wo/Globe");
 23e9bce:	4808      	ldr	r0, [pc, #32]	; (23e9bf0 <_Z15wbgt_initializev+0x4c>)
 23e9bd0:	e7f9      	b.n	23e9bc6 <_Z15wbgt_initializev+0x22>
    Output ("WBGT:NF");
 23e9bd2:	4808      	ldr	r0, [pc, #32]	; (23e9bf4 <_Z15wbgt_initializev+0x50>)
 23e9bd4:	e7f7      	b.n	23e9bc6 <_Z15wbgt_initializev+0x22>
 23e9bd6:	bf00      	nop
 23e9bd8:	023fd67b 	.word	0x023fd67b
 23e9bdc:	1006a360 	.word	0x1006a360
 23e9be0:	1006a824 	.word	0x1006a824
 23e9be4:	1006a839 	.word	0x1006a839
 23e9be8:	1006a362 	.word	0x1006a362
 23e9bec:	023fd685 	.word	0x023fd685
 23e9bf0:	023fd695 	.word	0x023fd695
 23e9bf4:	023fd6a6 	.word	0x023fd6a6

023e9bf8 <_Z13wbgt_using_hid>:
/* 
 *=======================================================================================================================
 * wbgt_using_hi() - Compute Web Bulb Globe Temperature using Heat Index
 *=======================================================================================================================
 */
double wbgt_using_hi(double HIc) {
 23e9bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  if (HIc == -999.9) {
 23e9bfa:	a32f      	add	r3, pc, #188	; (adr r3, 23e9cb8 <_Z13wbgt_using_hid+0xc0>)
 23e9bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
double wbgt_using_hi(double HIc) {
 23e9c00:	ec55 4b10 	vmov	r4, r5, d0
  if (HIc == -999.9) {
 23e9c04:	ee10 0a10 	vmov	r0, s0
 23e9c08:	4629      	mov	r1, r5
 23e9c0a:	f7fd fa35 	bl	23e7078 <__aeabi_dcmpeq>
 23e9c0e:	2800      	cmp	r0, #0
 23e9c10:	d140      	bne.n	23e9c94 <_Z13wbgt_using_hid+0x9c>
    return (-999.9);
  }

  double HIf = HIc * 9.0 / 5.0 + 32.0;
 23e9c12:	2200      	movs	r2, #0
 23e9c14:	4620      	mov	r0, r4
 23e9c16:	4629      	mov	r1, r5
 23e9c18:	4b29      	ldr	r3, [pc, #164]	; (23e9cc0 <_Z13wbgt_using_hid+0xc8>)
 23e9c1a:	f7fc ffc5 	bl	23e6ba8 <__aeabi_dmul>
 23e9c1e:	2200      	movs	r2, #0
 23e9c20:	4b28      	ldr	r3, [pc, #160]	; (23e9cc4 <_Z13wbgt_using_hid+0xcc>)
 23e9c22:	f7fd f8eb 	bl	23e6dfc <__aeabi_ddiv>
 23e9c26:	2200      	movs	r2, #0
 23e9c28:	4b27      	ldr	r3, [pc, #156]	; (23e9cc8 <_Z13wbgt_using_hid+0xd0>)
 23e9c2a:	f7fc fe07 	bl	23e683c <__adddf3>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 23e9c2e:	4602      	mov	r2, r0
 23e9c30:	460b      	mov	r3, r1
 23e9c32:	4604      	mov	r4, r0
 23e9c34:	460d      	mov	r5, r1
 23e9c36:	f7fc ffb7 	bl	23e6ba8 <__aeabi_dmul>

  // Below produces Wet Bulb Globe Temperature in Celsius
  double TWc = -0.0034 * pow(HIf, 2) + 0.96 * HIf - 34;
 23e9c3a:	a31b      	add	r3, pc, #108	; (adr r3, 23e9ca8 <_Z13wbgt_using_hid+0xb0>)
 23e9c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e9c40:	f7fc ffb2 	bl	23e6ba8 <__aeabi_dmul>
 23e9c44:	a31a      	add	r3, pc, #104	; (adr r3, 23e9cb0 <_Z13wbgt_using_hid+0xb8>)
 23e9c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e9c4a:	4606      	mov	r6, r0
 23e9c4c:	460f      	mov	r7, r1
 23e9c4e:	4620      	mov	r0, r4
 23e9c50:	4629      	mov	r1, r5
 23e9c52:	f7fc ffa9 	bl	23e6ba8 <__aeabi_dmul>
 23e9c56:	4602      	mov	r2, r0
 23e9c58:	460b      	mov	r3, r1
 23e9c5a:	4630      	mov	r0, r6
 23e9c5c:	4639      	mov	r1, r7
 23e9c5e:	f7fc fded 	bl	23e683c <__adddf3>
 23e9c62:	2200      	movs	r2, #0
 23e9c64:	4b19      	ldr	r3, [pc, #100]	; (23e9ccc <_Z13wbgt_using_hid+0xd4>)
 23e9c66:	f7fc fde7 	bl	23e6838 <__aeabi_dsub>

  TWc = (isnan(TWc) || (TWc < QC_MIN_T)  || (TWc >QC_MAX_T))  ? QC_ERR_T  : TWc;
 23e9c6a:	4602      	mov	r2, r0
 23e9c6c:	460b      	mov	r3, r1
  double TWc = -0.0034 * pow(HIf, 2) + 0.96 * HIf - 34;
 23e9c6e:	4604      	mov	r4, r0
 23e9c70:	460d      	mov	r5, r1
  TWc = (isnan(TWc) || (TWc < QC_MIN_T)  || (TWc >QC_MAX_T))  ? QC_ERR_T  : TWc;
 23e9c72:	f7fd fa33 	bl	23e70dc <__aeabi_dcmpun>
 23e9c76:	b980      	cbnz	r0, 23e9c9a <_Z13wbgt_using_hid+0xa2>
 23e9c78:	2200      	movs	r2, #0
 23e9c7a:	4620      	mov	r0, r4
 23e9c7c:	4629      	mov	r1, r5
 23e9c7e:	4b14      	ldr	r3, [pc, #80]	; (23e9cd0 <_Z13wbgt_using_hid+0xd8>)
 23e9c80:	f7fd fa04 	bl	23e708c <__aeabi_dcmplt>
 23e9c84:	b948      	cbnz	r0, 23e9c9a <_Z13wbgt_using_hid+0xa2>
 23e9c86:	2200      	movs	r2, #0
 23e9c88:	4620      	mov	r0, r4
 23e9c8a:	4629      	mov	r1, r5
 23e9c8c:	4b11      	ldr	r3, [pc, #68]	; (23e9cd4 <_Z13wbgt_using_hid+0xdc>)
 23e9c8e:	f7fd fa1b 	bl	23e70c8 <__aeabi_dcmpgt>
 23e9c92:	b910      	cbnz	r0, 23e9c9a <_Z13wbgt_using_hid+0xa2>
  return (TWc);
}
 23e9c94:	ec45 4b10 	vmov	d0, r4, r5
 23e9c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TWc = (isnan(TWc) || (TWc < QC_MIN_T)  || (TWc >QC_MAX_T))  ? QC_ERR_T  : TWc;
 23e9c9a:	a507      	add	r5, pc, #28	; (adr r5, 23e9cb8 <_Z13wbgt_using_hid+0xc0>)
 23e9c9c:	e9d5 4500 	ldrd	r4, r5, [r5]
 23e9ca0:	e7f8      	b.n	23e9c94 <_Z13wbgt_using_hid+0x9c>
 23e9ca2:	bf00      	nop
 23e9ca4:	f3af 8000 	nop.w
 23e9ca8:	19ce075f 	.word	0x19ce075f
 23e9cac:	bf6bda51 	.word	0xbf6bda51
 23e9cb0:	eb851eb8 	.word	0xeb851eb8
 23e9cb4:	3feeb851 	.word	0x3feeb851
 23e9cb8:	33333333 	.word	0x33333333
 23e9cbc:	c08f3f33 	.word	0xc08f3f33
 23e9cc0:	40220000 	.word	0x40220000
 23e9cc4:	40140000 	.word	0x40140000
 23e9cc8:	40400000 	.word	0x40400000
 23e9ccc:	40410000 	.word	0x40410000
 23e9cd0:	c0440000 	.word	0xc0440000
 23e9cd4:	404e0000 	.word	0x404e0000

023e9cd8 <_Z14wbgt_using_wbtddd>:
/* 
 *=======================================================================================================================
 * wbgt_using_wbt() - Compute Web Bulb Globe Temperature using web bulb temperature
 *=======================================================================================================================
 */
double wbgt_using_wbt(double Ta, double Tg, double Tw) {
 23e9cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  // Ta = mcp1 temp
  // Tg = mcp3 temp
  // Tw = wbt_calculate(Ta, RH)

  double wbgt = (0.7 * Tw) + (0.2 * Tg) + (0.1 * Ta);  // This will be Celsius
 23e9cdc:	a326      	add	r3, pc, #152	; (adr r3, 23e9d78 <_Z14wbgt_using_wbtddd+0xa0>)
 23e9cde:	e9d3 2300 	ldrd	r2, r3, [r3]
double wbgt_using_wbt(double Ta, double Tg, double Tw) {
 23e9ce2:	ec51 0b12 	vmov	r0, r1, d2
 23e9ce6:	ec57 6b10 	vmov	r6, r7, d0
 23e9cea:	ec59 8b11 	vmov	r8, r9, d1
  double wbgt = (0.7 * Tw) + (0.2 * Tg) + (0.1 * Ta);  // This will be Celsius
 23e9cee:	f7fc ff5b 	bl	23e6ba8 <__aeabi_dmul>
 23e9cf2:	a323      	add	r3, pc, #140	; (adr r3, 23e9d80 <_Z14wbgt_using_wbtddd+0xa8>)
 23e9cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e9cf8:	4604      	mov	r4, r0
 23e9cfa:	460d      	mov	r5, r1
 23e9cfc:	4640      	mov	r0, r8
 23e9cfe:	4649      	mov	r1, r9
 23e9d00:	f7fc ff52 	bl	23e6ba8 <__aeabi_dmul>
 23e9d04:	4602      	mov	r2, r0
 23e9d06:	460b      	mov	r3, r1
 23e9d08:	4620      	mov	r0, r4
 23e9d0a:	4629      	mov	r1, r5
 23e9d0c:	f7fc fd96 	bl	23e683c <__adddf3>
 23e9d10:	a31d      	add	r3, pc, #116	; (adr r3, 23e9d88 <_Z14wbgt_using_wbtddd+0xb0>)
 23e9d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e9d16:	4604      	mov	r4, r0
 23e9d18:	460d      	mov	r5, r1
 23e9d1a:	4630      	mov	r0, r6
 23e9d1c:	4639      	mov	r1, r7
 23e9d1e:	f7fc ff43 	bl	23e6ba8 <__aeabi_dmul>
 23e9d22:	4602      	mov	r2, r0
 23e9d24:	460b      	mov	r3, r1
 23e9d26:	4620      	mov	r0, r4
 23e9d28:	4629      	mov	r1, r5
 23e9d2a:	f7fc fd87 	bl	23e683c <__adddf3>

  wbgt = (isnan(wbgt) || (wbgt < QC_MIN_T)  || (wbgt >QC_MAX_T))  ? QC_ERR_T  : wbgt;
 23e9d2e:	4602      	mov	r2, r0
 23e9d30:	460b      	mov	r3, r1
  double wbgt = (0.7 * Tw) + (0.2 * Tg) + (0.1 * Ta);  // This will be Celsius
 23e9d32:	4604      	mov	r4, r0
 23e9d34:	460d      	mov	r5, r1
  wbgt = (isnan(wbgt) || (wbgt < QC_MIN_T)  || (wbgt >QC_MAX_T))  ? QC_ERR_T  : wbgt;
 23e9d36:	f7fd f9d1 	bl	23e70dc <__aeabi_dcmpun>
 23e9d3a:	b988      	cbnz	r0, 23e9d60 <_Z14wbgt_using_wbtddd+0x88>
 23e9d3c:	2200      	movs	r2, #0
 23e9d3e:	4620      	mov	r0, r4
 23e9d40:	4629      	mov	r1, r5
 23e9d42:	4b0b      	ldr	r3, [pc, #44]	; (23e9d70 <_Z14wbgt_using_wbtddd+0x98>)
 23e9d44:	f7fd f9a2 	bl	23e708c <__aeabi_dcmplt>
 23e9d48:	b950      	cbnz	r0, 23e9d60 <_Z14wbgt_using_wbtddd+0x88>
 23e9d4a:	2200      	movs	r2, #0
 23e9d4c:	4620      	mov	r0, r4
 23e9d4e:	4629      	mov	r1, r5
 23e9d50:	4b08      	ldr	r3, [pc, #32]	; (23e9d74 <_Z14wbgt_using_wbtddd+0x9c>)
 23e9d52:	f7fd f9b9 	bl	23e70c8 <__aeabi_dcmpgt>
 23e9d56:	b918      	cbnz	r0, 23e9d60 <_Z14wbgt_using_wbtddd+0x88>

  return (wbgt);
}
 23e9d58:	ec45 4b10 	vmov	d0, r4, r5
 23e9d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  wbgt = (isnan(wbgt) || (wbgt < QC_MIN_T)  || (wbgt >QC_MAX_T))  ? QC_ERR_T  : wbgt;
 23e9d60:	a501      	add	r5, pc, #4	; (adr r5, 23e9d68 <_Z14wbgt_using_wbtddd+0x90>)
 23e9d62:	e9d5 4500 	ldrd	r4, r5, [r5]
  return (wbgt);
 23e9d66:	e7f7      	b.n	23e9d58 <_Z14wbgt_using_wbtddd+0x80>
 23e9d68:	33333333 	.word	0x33333333
 23e9d6c:	c08f3f33 	.word	0xc08f3f33
 23e9d70:	c0440000 	.word	0xc0440000
 23e9d74:	404e0000 	.word	0x404e0000
 23e9d78:	66666666 	.word	0x66666666
 23e9d7c:	3fe66666 	.word	0x3fe66666
 23e9d80:	9999999a 	.word	0x9999999a
 23e9d84:	3fc99999 	.word	0x3fc99999
 23e9d88:	9999999a 	.word	0x9999999a
 23e9d8c:	3fb99999 	.word	0x3fb99999

023e9d90 <_Z17si1145_initializev>:
/* 
 *=======================================================================================================================
 * si1145_initialize() - SI1145 sensor initialize
 *=======================================================================================================================
 */
void si1145_initialize() {
 23e9d90:	b570      	push	{r4, r5, r6, lr}
  Output("SI1145:INIT");
 23e9d92:	484b      	ldr	r0, [pc, #300]	; (23e9ec0 <_Z17si1145_initializev+0x130>)
void si1145_initialize() {
 23e9d94:	ed2d 8b02 	vpush	{d8}
  Output("SI1145:INIT");
 23e9d98:	f7fe fdda 	bl	23e8950 <_Z6OutputPKc>
  
  // SSB_SI1145 UV index & IR & Visible Sensor (I2C ADDRESS = 0x60)
  if (! uv.begin(&Wire)) {
 23e9d9c:	f010 faba 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e9da0:	4601      	mov	r1, r0
 23e9da2:	4848      	ldr	r0, [pc, #288]	; (23e9ec4 <_Z17si1145_initializev+0x134>)
 23e9da4:	f009 fe7c 	bl	23f3aa0 <_ZN15Adafruit_SI11455beginEP7TwoWire>
 23e9da8:	4d47      	ldr	r5, [pc, #284]	; (23e9ec8 <_Z17si1145_initializev+0x138>)
 23e9daa:	4604      	mov	r4, r0
 23e9dac:	b958      	cbnz	r0, 23e9dc6 <_Z17si1145_initializev+0x36>
    Output ("SI:NF");
 23e9dae:	4847      	ldr	r0, [pc, #284]	; (23e9ecc <_Z17si1145_initializev+0x13c>)
 23e9db0:	f7fe fdce 	bl	23e8950 <_Z6OutputPKc>
    SI1145_exists = false;
    SystemStatusBits |= SSB_SI1145;  // Turn On Bit
 23e9db4:	4a46      	ldr	r2, [pc, #280]	; (23e9ed0 <_Z17si1145_initializev+0x140>)
    SI1145_exists = false;
 23e9db6:	702c      	strb	r4, [r5, #0]
    SystemStatusBits |= SSB_SI1145;  // Turn On Bit
 23e9db8:	6813      	ldr	r3, [r2, #0]
 23e9dba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 23e9dbe:	6013      	str	r3, [r2, #0]
    sprintf (msgbuf, "SI:IR[%d.%02d]", (int)si_last_ir, (int)(si_last_ir*100.0)%100); 
    Output (msgbuf);
    sprintf (msgbuf, "SI:UV[%d.%02d]", (int)si_last_uv, (int)(si_last_uv*100.0)%100); 
    Output (msgbuf);
  }
}
 23e9dc0:	ecbd 8b02 	vpop	{d8}
 23e9dc4:	bd70      	pop	{r4, r5, r6, pc}
    SI1145_exists = true;
 23e9dc6:	2301      	movs	r3, #1
    Output ("SI:OK");
 23e9dc8:	4842      	ldr	r0, [pc, #264]	; (23e9ed4 <_Z17si1145_initializev+0x144>)
    SI1145_exists = true;
 23e9dca:	702b      	strb	r3, [r5, #0]
    Output ("SI:OK");
 23e9dcc:	f7fe fdc0 	bl	23e8950 <_Z6OutputPKc>
    si_last_vis = uv.readVisible();
 23e9dd0:	483c      	ldr	r0, [pc, #240]	; (23e9ec4 <_Z17si1145_initializev+0x134>)
 23e9dd2:	f009 fd7e 	bl	23f38d2 <_ZN15Adafruit_SI114511readVisibleEv>
 23e9dd6:	ee07 0a90 	vmov	s15, r0
 23e9dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23e9dde:	4c3e      	ldr	r4, [pc, #248]	; (23e9ed8 <_Z17si1145_initializev+0x148>)
    si_last_ir = uv.readIR();
 23e9de0:	4838      	ldr	r0, [pc, #224]	; (23e9ec4 <_Z17si1145_initializev+0x134>)
    si_last_vis = uv.readVisible();
 23e9de2:	edc4 7a00 	vstr	s15, [r4]
    si_last_ir = uv.readIR();
 23e9de6:	f009 fd77 	bl	23f38d8 <_ZN15Adafruit_SI11456readIREv>
 23e9dea:	ee07 0a90 	vmov	s15, r0
 23e9dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23e9df2:	4e3a      	ldr	r6, [pc, #232]	; (23e9edc <_Z17si1145_initializev+0x14c>)
    si_last_uv = uv.readUV()/100.0;
 23e9df4:	4833      	ldr	r0, [pc, #204]	; (23e9ec4 <_Z17si1145_initializev+0x134>)
    si_last_ir = uv.readIR();
 23e9df6:	edc6 7a00 	vstr	s15, [r6]
    si_last_uv = uv.readUV()/100.0;
 23e9dfa:	f009 fd67 	bl	23f38cc <_ZN15Adafruit_SI11456readUVEv>
 23e9dfe:	f7fc fe69 	bl	23e6ad4 <__aeabi_i2d>
 23e9e02:	2200      	movs	r2, #0
 23e9e04:	4b36      	ldr	r3, [pc, #216]	; (23e9ee0 <_Z17si1145_initializev+0x150>)
 23e9e06:	f7fc fff9 	bl	23e6dfc <__aeabi_ddiv>
 23e9e0a:	f7fd f9c5 	bl	23e7198 <__aeabi_d2f>
    sprintf (msgbuf, "SI:VI[%d.%02d]", (int)si_last_vis, (int)(si_last_vis*100.0)%100); 
 23e9e0e:	ed94 8a00 	vldr	s16, [r4]
    si_last_uv = uv.readUV()/100.0;
 23e9e12:	4d34      	ldr	r5, [pc, #208]	; (23e9ee4 <_Z17si1145_initializev+0x154>)
    sprintf (msgbuf, "SI:VI[%d.%02d]", (int)si_last_vis, (int)(si_last_vis*100.0)%100); 
 23e9e14:	2464      	movs	r4, #100	; 0x64
    si_last_uv = uv.readUV()/100.0;
 23e9e16:	6028      	str	r0, [r5, #0]
    sprintf (msgbuf, "SI:VI[%d.%02d]", (int)si_last_vis, (int)(si_last_vis*100.0)%100); 
 23e9e18:	ee18 0a10 	vmov	r0, s16
 23e9e1c:	f7fc fe6c 	bl	23e6af8 <__aeabi_f2d>
 23e9e20:	2200      	movs	r2, #0
 23e9e22:	4b2f      	ldr	r3, [pc, #188]	; (23e9ee0 <_Z17si1145_initializev+0x150>)
 23e9e24:	f7fc fec0 	bl	23e6ba8 <__aeabi_dmul>
 23e9e28:	f7fd f96e 	bl	23e7108 <__aeabi_d2iz>
 23e9e2c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 23e9e30:	fb90 f3f4 	sdiv	r3, r0, r4
 23e9e34:	ee17 2a90 	vmov	r2, s15
 23e9e38:	fb03 0314 	mls	r3, r3, r4, r0
 23e9e3c:	492a      	ldr	r1, [pc, #168]	; (23e9ee8 <_Z17si1145_initializev+0x158>)
 23e9e3e:	482b      	ldr	r0, [pc, #172]	; (23e9eec <_Z17si1145_initializev+0x15c>)
 23e9e40:	f00e f9e0 	bl	23f8204 <sprintf>
    Output (msgbuf);
 23e9e44:	4829      	ldr	r0, [pc, #164]	; (23e9eec <_Z17si1145_initializev+0x15c>)
 23e9e46:	f7fe fd83 	bl	23e8950 <_Z6OutputPKc>
    sprintf (msgbuf, "SI:IR[%d.%02d]", (int)si_last_ir, (int)(si_last_ir*100.0)%100); 
 23e9e4a:	ed96 8a00 	vldr	s16, [r6]
 23e9e4e:	ee18 0a10 	vmov	r0, s16
 23e9e52:	f7fc fe51 	bl	23e6af8 <__aeabi_f2d>
 23e9e56:	2200      	movs	r2, #0
 23e9e58:	4b21      	ldr	r3, [pc, #132]	; (23e9ee0 <_Z17si1145_initializev+0x150>)
 23e9e5a:	f7fc fea5 	bl	23e6ba8 <__aeabi_dmul>
 23e9e5e:	f7fd f953 	bl	23e7108 <__aeabi_d2iz>
 23e9e62:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 23e9e66:	fb90 f3f4 	sdiv	r3, r0, r4
 23e9e6a:	ee17 2a90 	vmov	r2, s15
 23e9e6e:	fb03 0314 	mls	r3, r3, r4, r0
 23e9e72:	491f      	ldr	r1, [pc, #124]	; (23e9ef0 <_Z17si1145_initializev+0x160>)
 23e9e74:	481d      	ldr	r0, [pc, #116]	; (23e9eec <_Z17si1145_initializev+0x15c>)
 23e9e76:	f00e f9c5 	bl	23f8204 <sprintf>
    Output (msgbuf);
 23e9e7a:	481c      	ldr	r0, [pc, #112]	; (23e9eec <_Z17si1145_initializev+0x15c>)
 23e9e7c:	f7fe fd68 	bl	23e8950 <_Z6OutputPKc>
    sprintf (msgbuf, "SI:UV[%d.%02d]", (int)si_last_uv, (int)(si_last_uv*100.0)%100); 
 23e9e80:	ed95 8a00 	vldr	s16, [r5]
 23e9e84:	ee18 0a10 	vmov	r0, s16
 23e9e88:	f7fc fe36 	bl	23e6af8 <__aeabi_f2d>
 23e9e8c:	2200      	movs	r2, #0
 23e9e8e:	4b14      	ldr	r3, [pc, #80]	; (23e9ee0 <_Z17si1145_initializev+0x150>)
 23e9e90:	f7fc fe8a 	bl	23e6ba8 <__aeabi_dmul>
 23e9e94:	f7fd f938 	bl	23e7108 <__aeabi_d2iz>
 23e9e98:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 23e9e9c:	fb90 f3f4 	sdiv	r3, r0, r4
 23e9ea0:	ee17 2a90 	vmov	r2, s15
 23e9ea4:	fb03 0314 	mls	r3, r3, r4, r0
 23e9ea8:	4912      	ldr	r1, [pc, #72]	; (23e9ef4 <_Z17si1145_initializev+0x164>)
 23e9eaa:	4810      	ldr	r0, [pc, #64]	; (23e9eec <_Z17si1145_initializev+0x15c>)
 23e9eac:	f00e f9aa 	bl	23f8204 <sprintf>
}
 23e9eb0:	ecbd 8b02 	vpop	{d8}
 23e9eb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Output (msgbuf);
 23e9eb8:	480c      	ldr	r0, [pc, #48]	; (23e9eec <_Z17si1145_initializev+0x15c>)
 23e9eba:	f7fe bd49 	b.w	23e8950 <_Z6OutputPKc>
 23e9ebe:	bf00      	nop
 23e9ec0:	023fd6ae 	.word	0x023fd6ae
 23e9ec4:	1007ac24 	.word	0x1007ac24
 23e9ec8:	1006a826 	.word	0x1006a826
 23e9ecc:	023fd6ba 	.word	0x023fd6ba
 23e9ed0:	1006a22c 	.word	0x1006a22c
 23e9ed4:	023fd6c0 	.word	0x023fd6c0
 23e9ed8:	1007abe8 	.word	0x1007abe8
 23e9edc:	1007abe0 	.word	0x1007abe0
 23e9ee0:	40590000 	.word	0x40590000
 23e9ee4:	1007abe4 	.word	0x1007abe4
 23e9ee8:	023fd6c6 	.word	0x023fd6c6
 23e9eec:	1006f148 	.word	0x1006f148
 23e9ef0:	023fd6d5 	.word	0x023fd6d5
 23e9ef4:	023fd6e4 	.word	0x023fd6e4

023e9ef8 <_Z14vlx_initializev>:
 * 400  lx Sunrise or sunset on a clear day
 * 1000 lx Overcast day; typical TV studio lighting
 * 
 *=======================================================================================================================
 */
void vlx_initialize() {
 23e9ef8:	b508      	push	{r3, lr}
  Output("VLX:INIT");
 23e9efa:	480f      	ldr	r0, [pc, #60]	; (23e9f38 <_Z14vlx_initializev+0x40>)
 23e9efc:	f7fe fd28 	bl	23e8950 <_Z6OutputPKc>

  if (veml.begin()) {
 23e9f00:	f010 fa08 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e9f04:	4601      	mov	r1, r0
 23e9f06:	480d      	ldr	r0, [pc, #52]	; (23e9f3c <_Z14vlx_initializev+0x44>)
 23e9f08:	f00a fb3f 	bl	23f458a <_ZN17Adafruit_VEML77005beginEP7TwoWire>
 23e9f0c:	4a0c      	ldr	r2, [pc, #48]	; (23e9f40 <_Z14vlx_initializev+0x48>)
 23e9f0e:	4b0d      	ldr	r3, [pc, #52]	; (23e9f44 <_Z14vlx_initializev+0x4c>)
 23e9f10:	b140      	cbz	r0, 23e9f24 <_Z14vlx_initializev+0x2c>
    VEML7700_exists = true;
 23e9f12:	2101      	movs	r1, #1
 23e9f14:	7011      	strb	r1, [r2, #0]
    msgp = (char *) "VLX OK";
 23e9f16:	4a0c      	ldr	r2, [pc, #48]	; (23e9f48 <_Z14vlx_initializev+0x50>)
 23e9f18:	601a      	str	r2, [r3, #0]
  else {
    msgp = (char *) "VLX NF";
    VEML7700_exists = false;
    SystemStatusBits |= SSB_VLX;  // Turn On Bit
  }
  Output (msgp);
 23e9f1a:	6818      	ldr	r0, [r3, #0]
}
 23e9f1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
 23e9f20:	f7fe bd16 	b.w	23e8950 <_Z6OutputPKc>
    msgp = (char *) "VLX NF";
 23e9f24:	4909      	ldr	r1, [pc, #36]	; (23e9f4c <_Z14vlx_initializev+0x54>)
    VEML7700_exists = false;
 23e9f26:	7010      	strb	r0, [r2, #0]
    msgp = (char *) "VLX NF";
 23e9f28:	6019      	str	r1, [r3, #0]
    SystemStatusBits |= SSB_VLX;  // Turn On Bit
 23e9f2a:	4909      	ldr	r1, [pc, #36]	; (23e9f50 <_Z14vlx_initializev+0x58>)
 23e9f2c:	680a      	ldr	r2, [r1, #0]
 23e9f2e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 23e9f32:	600a      	str	r2, [r1, #0]
 23e9f34:	e7f1      	b.n	23e9f1a <_Z14vlx_initializev+0x22>
 23e9f36:	bf00      	nop
 23e9f38:	023fd6f3 	.word	0x023fd6f3
 23e9f3c:	1007ac2c 	.word	0x1007ac2c
 23e9f40:	1006a838 	.word	0x1006a838
 23e9f44:	1006f548 	.word	0x1006f548
 23e9f48:	023fd6fc 	.word	0x023fd6fc
 23e9f4c:	023fd703 	.word	0x023fd703
 23e9f50:	1006a22c 	.word	0x1006a22c

023e9f54 <_Z14blx_initializev>:
/* 
 *=======================================================================================================================
 * blx_initialize() - DFRobot_B_LUX_V30B sensor
 *=======================================================================================================================
 */
void blx_initialize() {
 23e9f54:	b508      	push	{r3, lr}
  Output("BLX:INIT");
 23e9f56:	480d      	ldr	r0, [pc, #52]	; (23e9f8c <_Z14blx_initializev+0x38>)
 23e9f58:	f7fe fcfa 	bl	23e8950 <_Z6OutputPKc>

  if (I2C_Device_Exist(BLX_ADDRESS)) {
 23e9f5c:	204a      	movs	r0, #74	; 0x4a
 23e9f5e:	f7fe faed 	bl	23e853c <_Z16I2C_Device_Existh>
 23e9f62:	4a0b      	ldr	r2, [pc, #44]	; (23e9f90 <_Z14blx_initializev+0x3c>)
 23e9f64:	4b0b      	ldr	r3, [pc, #44]	; (23e9f94 <_Z14blx_initializev+0x40>)
 23e9f66:	b140      	cbz	r0, 23e9f7a <_Z14blx_initializev+0x26>
    BLX_exists = true;
 23e9f68:	2101      	movs	r1, #1
 23e9f6a:	7011      	strb	r1, [r2, #0]
    msgp = (char *) "BLX:OK";
 23e9f6c:	4a0a      	ldr	r2, [pc, #40]	; (23e9f98 <_Z14blx_initializev+0x44>)
 23e9f6e:	601a      	str	r2, [r3, #0]
  else {
    BLX_exists = false;
    msgp = (char *) "BLX:NF";
    SystemStatusBits |= SSB_BLX;  // Turn On Bit
  }
  Output (msgp);
 23e9f70:	6818      	ldr	r0, [r3, #0]
}
 23e9f72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
 23e9f76:	f7fe bceb 	b.w	23e8950 <_Z6OutputPKc>
    SystemStatusBits |= SSB_BLX;  // Turn On Bit
 23e9f7a:	4908      	ldr	r1, [pc, #32]	; (23e9f9c <_Z14blx_initializev+0x48>)
    BLX_exists = false;
 23e9f7c:	7010      	strb	r0, [r2, #0]
    msgp = (char *) "BLX:NF";
 23e9f7e:	4a08      	ldr	r2, [pc, #32]	; (23e9fa0 <_Z14blx_initializev+0x4c>)
 23e9f80:	601a      	str	r2, [r3, #0]
    SystemStatusBits |= SSB_BLX;  // Turn On Bit
 23e9f82:	680a      	ldr	r2, [r1, #0]
 23e9f84:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 23e9f88:	600a      	str	r2, [r1, #0]
 23e9f8a:	e7f1      	b.n	23e9f70 <_Z14blx_initializev+0x1c>
 23e9f8c:	023fd70a 	.word	0x023fd70a
 23e9f90:	1006a318 	.word	0x1006a318
 23e9f94:	1006f548 	.word	0x1006f548
 23e9f98:	023fd713 	.word	0x023fd713
 23e9f9c:	1006a22c 	.word	0x1006a22c
 23e9fa0:	023fd71a 	.word	0x023fd71a
 23e9fa4:	00000000 	.word	0x00000000

023e9fa8 <_Z15blx_takereadingv>:
/* 
 *=======================================================================================================================
 * blx_takereading() - DFRobot_B_LUX_V30B sensor reading
 *=======================================================================================================================
 */
float blx_takereading() {
 23e9fa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t raw;
  uint8_t data[4]; // Array to hold the 4 bytes of data
  const unsigned long timeout = 1000; // Timeout in milliseconds
  unsigned long startTime;

  Wire.beginTransmission(BLX_ADDRESS);
 23e9faa:	f010 f9b3 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e9fae:	214a      	movs	r1, #74	; 0x4a
 23e9fb0:	f00e ffae 	bl	23f8f10 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x00); // Point to the data register address
 23e9fb4:	f010 f9ae 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e9fb8:	2100      	movs	r1, #0
 23e9fba:	f7fe f9e9 	bl	23e8390 <_ZN7TwoWire5writeEi.isra.0>
  Wire.endTransmission(false); // false tells the I2C master to not release the bus between the write and read operations
 23e9fbe:	f010 f9a9 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e9fc2:	2100      	movs	r1, #0
 23e9fc4:	f00e ffa7 	bl	23f8f16 <_ZN7TwoWire15endTransmissionEh>

  // Request 4 bytes from the device
  Wire.requestFrom(BLX_ADDRESS, 4);
 23e9fc8:	f010 f9a4 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e9fcc:	2204      	movs	r2, #4
 23e9fce:	214a      	movs	r1, #74	; 0x4a
 23e9fd0:	f00e ff97 	bl	23f8f02 <_ZN7TwoWire11requestFromEhj>
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23e9fd4:	f00d fb4a 	bl	23f766c <HAL_Timer_Get_Milli_Seconds>
 23e9fd8:	4604      	mov	r4, r0

  startTime = millis(); // Record the start time
  while (Wire.available() < 4) { // Wait for all bytes to be received
 23e9fda:	f010 f99b 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23e9fde:	6803      	ldr	r3, [r0, #0]
 23e9fe0:	691b      	ldr	r3, [r3, #16]
 23e9fe2:	4798      	blx	r3
 23e9fe4:	2803      	cmp	r0, #3
 23e9fe6:	dc09      	bgt.n	23e9ffc <_Z15blx_takereadingv+0x54>
 23e9fe8:	f00d fb40 	bl	23f766c <HAL_Timer_Get_Milli_Seconds>
    if (millis() - startTime > timeout) { // Check if timeout has been reached
 23e9fec:	1b00      	subs	r0, r0, r4
 23e9fee:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 23e9ff2:	d826      	bhi.n	23ea042 <_Z15blx_takereadingv+0x9a>
      return -1; // Return error code if timeout occurs
    }
    delay(1); // Short delay to prevent busy-waiting
 23e9ff4:	2001      	movs	r0, #1
 23e9ff6:	f00e f991 	bl	23f831c <delay>
  while (Wire.available() < 4) { // Wait for all bytes to be received
 23e9ffa:	e7ee      	b.n	23e9fda <_Z15blx_takereadingv+0x32>
  }

  for (int i = 0; i < 4; i++) {
 23e9ffc:	2400      	movs	r4, #0
 23e9ffe:	ad01      	add	r5, sp, #4
    data[i] = Wire.read(); // Read each byte into the array
 23ea000:	f010 f988 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23ea004:	6803      	ldr	r3, [r0, #0]
  for (int i = 0; i < 4; i++) {
 23ea006:	3401      	adds	r4, #1
    data[i] = Wire.read(); // Read each byte into the array
 23ea008:	695b      	ldr	r3, [r3, #20]
 23ea00a:	4798      	blx	r3
  for (int i = 0; i < 4; i++) {
 23ea00c:	2c04      	cmp	r4, #4
    data[i] = Wire.read(); // Read each byte into the array
 23ea00e:	f805 0b01 	strb.w	r0, [r5], #1
  for (int i = 0; i < 4; i++) {
 23ea012:	d1f5      	bne.n	23ea000 <_Z15blx_takereadingv+0x58>
  raw = data[3];
  raw = (raw<<8)|data[2];
  raw = (raw<<8)|data[1];
  raw = (raw<<8)|data[0];

  lux = ((float)raw*1.4) / 1000;  // Is 1.4 scaling multiplier based on the sensor's internal calibration ?
 23ea014:	eddd 7a01 	vldr	s15, [sp, #4]
 23ea018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23ea01c:	ee17 0a90 	vmov	r0, s15
 23ea020:	f7fc fd6a 	bl	23e6af8 <__aeabi_f2d>
 23ea024:	a309      	add	r3, pc, #36	; (adr r3, 23ea04c <_Z15blx_takereadingv+0xa4>)
 23ea026:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ea02a:	f7fc fdbd 	bl	23e6ba8 <__aeabi_dmul>
 23ea02e:	2200      	movs	r2, #0
 23ea030:	4b05      	ldr	r3, [pc, #20]	; (23ea048 <_Z15blx_takereadingv+0xa0>)
 23ea032:	f7fc fee3 	bl	23e6dfc <__aeabi_ddiv>
 23ea036:	f7fd f8af 	bl	23e7198 <__aeabi_d2f>
 23ea03a:	ee00 0a10 	vmov	s0, r0
                                    // Is divide by 1000 converting from millilux ?

  // sprintf (msgbuf, "BLUX30 LUX %f RAW %lu\n", lux, raw);
  // Output (msgbuf);
  return(lux);
}
 23ea03e:	b003      	add	sp, #12
 23ea040:	bd30      	pop	{r4, r5, pc}
      return -1; // Return error code if timeout occurs
 23ea042:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 23ea046:	e7fa      	b.n	23ea03e <_Z15blx_takereadingv+0x96>
 23ea048:	408f4000 	.word	0x408f4000
 23ea04c:	66666666 	.word	0x66666666
 23ea050:	3ff66666 	.word	0x3ff66666

023ea054 <_Z13pm25aqi_clearv>:
 *=======================================================================================================================
 * pm25aqi_clear() - clear observation
 *=======================================================================================================================
 */
void pm25aqi_clear() {
  pm25aqi_obs.max_s10 = 0;
 23ea054:	2200      	movs	r2, #0
 23ea056:	4b04      	ldr	r3, [pc, #16]	; (23ea068 <_Z13pm25aqi_clearv+0x14>)
 23ea058:	801a      	strh	r2, [r3, #0]
  pm25aqi_obs.max_s25 = 0;
 23ea05a:	805a      	strh	r2, [r3, #2]
  pm25aqi_obs.max_s100 = 0;
 23ea05c:	809a      	strh	r2, [r3, #4]
  pm25aqi_obs.max_e10 = 0;
 23ea05e:	80da      	strh	r2, [r3, #6]
  pm25aqi_obs.max_e25 = 0;
 23ea060:	811a      	strh	r2, [r3, #8]
  pm25aqi_obs.max_e100 = 0;
 23ea062:	815a      	strh	r2, [r3, #10]
}
 23ea064:	4770      	bx	lr
 23ea066:	bf00      	nop
 23ea068:	1007aa2c 	.word	0x1007aa2c

023ea06c <_Z18pm25aqi_initializev>:
/* 
 *=======================================================================================================================
 * pm25aqi_initialize() - air quality sensor
 *=======================================================================================================================
 */
void pm25aqi_initialize() {
 23ea06c:	b538      	push	{r3, r4, r5, lr}
  Output("PM25AQI:INIT");
 23ea06e:	4817      	ldr	r0, [pc, #92]	; (23ea0cc <_Z18pm25aqi_initializev+0x60>)
 23ea070:	f7fe fc6e 	bl	23e8950 <_Z6OutputPKc>
  Wire.beginTransmission(PM25AQI_ADDRESS);
 23ea074:	f010 f94e 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23ea078:	2112      	movs	r1, #18
 23ea07a:	f00e ff49 	bl	23f8f10 <_ZN7TwoWire17beginTransmissionEi>
  if (Wire.endTransmission()) {
 23ea07e:	f010 f949 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23ea082:	f00e ff4c 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>
 23ea086:	4c12      	ldr	r4, [pc, #72]	; (23ea0d0 <_Z18pm25aqi_initializev+0x64>)
 23ea088:	4d12      	ldr	r5, [pc, #72]	; (23ea0d4 <_Z18pm25aqi_initializev+0x68>)
 23ea08a:	b168      	cbz	r0, 23ea0a8 <_Z18pm25aqi_initializev+0x3c>
    msgp = (char *) "PM:NF";
 23ea08c:	4b12      	ldr	r3, [pc, #72]	; (23ea0d8 <_Z18pm25aqi_initializev+0x6c>)
    PM25AQI_exists = false;
    SystemStatusBits |= SSB_PM25AQI;  // Turn On Bit
 23ea08e:	4a13      	ldr	r2, [pc, #76]	; (23ea0dc <_Z18pm25aqi_initializev+0x70>)
    msgp = (char *) "PM:NF";
 23ea090:	6023      	str	r3, [r4, #0]
    PM25AQI_exists = false;
 23ea092:	2300      	movs	r3, #0
 23ea094:	702b      	strb	r3, [r5, #0]
    SystemStatusBits |= SSB_PM25AQI;  // Turn On Bit
 23ea096:	6813      	ldr	r3, [r2, #0]
 23ea098:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 23ea09c:	6013      	str	r3, [r2, #0]
      msgp = (char *) "PM:OK";
      PM25AQI_exists = true;
      pm25aqi_clear();
    }
  }
  Output (msgp);
 23ea09e:	6820      	ldr	r0, [r4, #0]
}
 23ea0a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
 23ea0a4:	f7fe bc54 	b.w	23e8950 <_Z6OutputPKc>
    if (! pmaq.begin_I2C()) {      // connect to the sensor over I2C
 23ea0a8:	f010 f934 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23ea0ac:	4601      	mov	r1, r0
 23ea0ae:	480c      	ldr	r0, [pc, #48]	; (23ea0e0 <_Z18pm25aqi_initializev+0x74>)
 23ea0b0:	f009 fa55 	bl	23f355e <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>
 23ea0b4:	b918      	cbnz	r0, 23ea0be <_Z18pm25aqi_initializev+0x52>
      msgp = (char *) "PM:Begin NF";
 23ea0b6:	4b0b      	ldr	r3, [pc, #44]	; (23ea0e4 <_Z18pm25aqi_initializev+0x78>)
      PM25AQI_exists = false;
 23ea0b8:	7028      	strb	r0, [r5, #0]
      msgp = (char *) "PM:Begin NF";
 23ea0ba:	6023      	str	r3, [r4, #0]
      PM25AQI_exists = false;
 23ea0bc:	e7ef      	b.n	23ea09e <_Z18pm25aqi_initializev+0x32>
      msgp = (char *) "PM:OK";
 23ea0be:	4b0a      	ldr	r3, [pc, #40]	; (23ea0e8 <_Z18pm25aqi_initializev+0x7c>)
 23ea0c0:	6023      	str	r3, [r4, #0]
      PM25AQI_exists = true;
 23ea0c2:	2301      	movs	r3, #1
 23ea0c4:	702b      	strb	r3, [r5, #0]
      pm25aqi_clear();
 23ea0c6:	f7ff ffc5 	bl	23ea054 <_Z13pm25aqi_clearv>
 23ea0ca:	e7e8      	b.n	23ea09e <_Z18pm25aqi_initializev+0x32>
 23ea0cc:	023fd721 	.word	0x023fd721
 23ea0d0:	1006f548 	.word	0x1006f548
 23ea0d4:	1006a364 	.word	0x1006a364
 23ea0d8:	023fd72e 	.word	0x023fd72e
 23ea0dc:	1006a22c 	.word	0x1006a22c
 23ea0e0:	1007aa38 	.word	0x1007aa38
 23ea0e4:	023fd734 	.word	0x023fd734
 23ea0e8:	023fd740 	.word	0x023fd740

023ea0ec <_Z19pm25aqi_TakeReadingv>:
/* 
 *=======================================================================================================================
 * pm25aqi_TakeReading() - take air quality reading - keep the larger value
 *=======================================================================================================================
 */
void pm25aqi_TakeReading() {
 23ea0ec:	b510      	push	{r4, lr}
  if (PM25AQI_exists) {
 23ea0ee:	4c1d      	ldr	r4, [pc, #116]	; (23ea164 <_Z19pm25aqi_TakeReadingv+0x78>)
void pm25aqi_TakeReading() {
 23ea0f0:	b088      	sub	sp, #32
  if (PM25AQI_exists) {
 23ea0f2:	7823      	ldrb	r3, [r4, #0]
 23ea0f4:	b34b      	cbz	r3, 23ea14a <_Z19pm25aqi_TakeReadingv+0x5e>
    PM25_AQI_Data aqid;

    if (pmaq.read(&aqid)) {
 23ea0f6:	4669      	mov	r1, sp
 23ea0f8:	481b      	ldr	r0, [pc, #108]	; (23ea168 <_Z19pm25aqi_TakeReadingv+0x7c>)
 23ea0fa:	f009 fa46 	bl	23f358a <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata>
 23ea0fe:	b330      	cbz	r0, 23ea14e <_Z19pm25aqi_TakeReadingv+0x62>
      if (aqid.pm10_standard  > pm25aqi_obs.max_s10)  { pm25aqi_obs.max_s10  = aqid.pm10_standard;  }
 23ea100:	4b1a      	ldr	r3, [pc, #104]	; (23ea16c <_Z19pm25aqi_TakeReadingv+0x80>)
 23ea102:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 23ea106:	8819      	ldrh	r1, [r3, #0]
 23ea108:	4291      	cmp	r1, r2
 23ea10a:	bf38      	it	cc
 23ea10c:	801a      	strhcc	r2, [r3, #0]
      if (aqid.pm25_standard  > pm25aqi_obs.max_s25)  { pm25aqi_obs.max_s25  = aqid.pm25_standard;  }
 23ea10e:	8859      	ldrh	r1, [r3, #2]
 23ea110:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 23ea114:	4291      	cmp	r1, r2
 23ea116:	bf38      	it	cc
 23ea118:	805a      	strhcc	r2, [r3, #2]
      if (aqid.pm100_standard > pm25aqi_obs.max_s100) { pm25aqi_obs.max_s100 = aqid.pm100_standard; }
 23ea11a:	8899      	ldrh	r1, [r3, #4]
 23ea11c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 23ea120:	4291      	cmp	r1, r2
 23ea122:	bf38      	it	cc
 23ea124:	809a      	strhcc	r2, [r3, #4]

      if (aqid.pm10_env  > pm25aqi_obs.max_e10)  { pm25aqi_obs.max_e10  = aqid.pm10_env;  }
 23ea126:	88d9      	ldrh	r1, [r3, #6]
 23ea128:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 23ea12c:	4291      	cmp	r1, r2
 23ea12e:	bf38      	it	cc
 23ea130:	80da      	strhcc	r2, [r3, #6]
      if (aqid.pm25_env  > pm25aqi_obs.max_e25)  { pm25aqi_obs.max_e25  = aqid.pm25_env;  }
 23ea132:	8919      	ldrh	r1, [r3, #8]
 23ea134:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 23ea138:	4291      	cmp	r1, r2
 23ea13a:	bf38      	it	cc
 23ea13c:	811a      	strhcc	r2, [r3, #8]
      if (aqid.pm100_env > pm25aqi_obs.max_e100) { pm25aqi_obs.max_e100 = aqid.pm100_env; }
 23ea13e:	8959      	ldrh	r1, [r3, #10]
 23ea140:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 23ea144:	4291      	cmp	r1, r2
 23ea146:	d200      	bcs.n	23ea14a <_Z19pm25aqi_TakeReadingv+0x5e>
 23ea148:	815a      	strh	r2, [r3, #10]
      SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
      PM25AQI_exists = false;
      Output ("PM OFFLINE");
    }
  }
}
 23ea14a:	b008      	add	sp, #32
 23ea14c:	bd10      	pop	{r4, pc}
      SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
 23ea14e:	4a08      	ldr	r2, [pc, #32]	; (23ea170 <_Z19pm25aqi_TakeReadingv+0x84>)
      PM25AQI_exists = false;
 23ea150:	7020      	strb	r0, [r4, #0]
      SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
 23ea152:	6813      	ldr	r3, [r2, #0]
      Output ("PM OFFLINE");
 23ea154:	4807      	ldr	r0, [pc, #28]	; (23ea174 <_Z19pm25aqi_TakeReadingv+0x88>)
      SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
 23ea156:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 23ea15a:	6013      	str	r3, [r2, #0]
      Output ("PM OFFLINE");
 23ea15c:	f7fe fbf8 	bl	23e8950 <_Z6OutputPKc>
}
 23ea160:	e7f3      	b.n	23ea14a <_Z19pm25aqi_TakeReadingv+0x5e>
 23ea162:	bf00      	nop
 23ea164:	1006a364 	.word	0x1006a364
 23ea168:	1007aa38 	.word	0x1007aa38
 23ea16c:	1007aa2c 	.word	0x1007aa2c
 23ea170:	1006a22c 	.word	0x1006a22c
 23ea174:	023fd746 	.word	0x023fd746

023ea178 <_Z14hdc_initializev>:
/* 
 *=======================================================================================================================
 * hdc_initialize() - HDC3002c sensor initialize
 *=======================================================================================================================
 */
void hdc_initialize() {
 23ea178:	b5f0      	push	{r4, r5, r6, r7, lr}
 23ea17a:	b085      	sub	sp, #20
  Output("HDC:INIT");
  
  // 1st HDC I2C Temperature/Humidity Sensor (I2C ADDRESS = 0x44)
  hdc1 = Adafruit_HDC302x();
 23ea17c:	4e2b      	ldr	r6, [pc, #172]	; (23ea22c <_Z14hdc_initializev+0xb4>)
  Output("HDC:INIT");
 23ea17e:	482c      	ldr	r0, [pc, #176]	; (23ea230 <_Z14hdc_initializev+0xb8>)
  hdc1 = Adafruit_HDC302x();
 23ea180:	ac02      	add	r4, sp, #8
  Output("HDC:INIT");
 23ea182:	f7fe fbe5 	bl	23e8950 <_Z6OutputPKc>
  hdc1 = Adafruit_HDC302x();
 23ea186:	4620      	mov	r0, r4
 23ea188:	f008 fe39 	bl	23f2dfe <_ZN16Adafruit_HDC302xC1Ev>
 23ea18c:	e894 0003 	ldmia.w	r4, {r0, r1}
 23ea190:	80b1      	strh	r1, [r6, #4]
 23ea192:	6030      	str	r0, [r6, #0]
  if (!hdc1.begin(HDC_ADDRESS_1, &Wire)) {
 23ea194:	f010 f8be 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23ea198:	2146      	movs	r1, #70	; 0x46
 23ea19a:	4602      	mov	r2, r0
 23ea19c:	4630      	mov	r0, r6
 23ea19e:	f008 feff 	bl	23f2fa0 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire>
 23ea1a2:	4d24      	ldr	r5, [pc, #144]	; (23ea234 <_Z14hdc_initializev+0xbc>)
 23ea1a4:	4f24      	ldr	r7, [pc, #144]	; (23ea238 <_Z14hdc_initializev+0xc0>)
 23ea1a6:	bb48      	cbnz	r0, 23ea1fc <_Z14hdc_initializev+0x84>
    msgp = (char *) "HDC1 NF";
 23ea1a8:	4b24      	ldr	r3, [pc, #144]	; (23ea23c <_Z14hdc_initializev+0xc4>)
    HDC_1_exists = false;
    SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
 23ea1aa:	4a25      	ldr	r2, [pc, #148]	; (23ea240 <_Z14hdc_initializev+0xc8>)
    msgp = (char *) "HDC1 NF";
 23ea1ac:	602b      	str	r3, [r5, #0]
    SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
 23ea1ae:	6813      	ldr	r3, [r2, #0]
    HDC_1_exists = false;
 23ea1b0:	7038      	strb	r0, [r7, #0]
    SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
 23ea1b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23ea1b6:	6013      	str	r3, [r2, #0]
    msgp = (char *) "HDC1 OK";
  }
  Output (msgp);

  // 2nd HDC I2C Temperature/Humidity Sensor (I2C ADDRESS = 0x45)
  hdc2 = Adafruit_HDC302x();
 23ea1b8:	4e22      	ldr	r6, [pc, #136]	; (23ea244 <_Z14hdc_initializev+0xcc>)
  Output (msgp);
 23ea1ba:	6828      	ldr	r0, [r5, #0]
 23ea1bc:	f7fe fbc8 	bl	23e8950 <_Z6OutputPKc>
  hdc2 = Adafruit_HDC302x();
 23ea1c0:	4620      	mov	r0, r4
 23ea1c2:	f008 fe1c 	bl	23f2dfe <_ZN16Adafruit_HDC302xC1Ev>
 23ea1c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 23ea1ca:	80b1      	strh	r1, [r6, #4]
 23ea1cc:	6030      	str	r0, [r6, #0]
  if (!hdc2.begin(HDC_ADDRESS_2, &Wire)) {
 23ea1ce:	f010 f8a1 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23ea1d2:	2147      	movs	r1, #71	; 0x47
 23ea1d4:	4602      	mov	r2, r0
 23ea1d6:	4630      	mov	r0, r6
 23ea1d8:	f008 fee2 	bl	23f2fa0 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire>
 23ea1dc:	4f1a      	ldr	r7, [pc, #104]	; (23ea248 <_Z14hdc_initializev+0xd0>)
 23ea1de:	b9c8      	cbnz	r0, 23ea214 <_Z14hdc_initializev+0x9c>
    msgp = (char *) "HDC2 NF";
 23ea1e0:	4b1a      	ldr	r3, [pc, #104]	; (23ea24c <_Z14hdc_initializev+0xd4>)
    HDC_2_exists = false;
    SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
 23ea1e2:	4a17      	ldr	r2, [pc, #92]	; (23ea240 <_Z14hdc_initializev+0xc8>)
    msgp = (char *) "HDC2 NF";
 23ea1e4:	602b      	str	r3, [r5, #0]
    SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
 23ea1e6:	6813      	ldr	r3, [r2, #0]
    HDC_2_exists = false;
 23ea1e8:	7038      	strb	r0, [r7, #0]
    SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
 23ea1ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 23ea1ee:	6013      	str	r3, [r2, #0]
    double t,h;
    hdc2.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0);
    HDC_2_exists = true;
    msgp = (char *) "HDC2 OK";
  }
  Output (msgp);
 23ea1f0:	6828      	ldr	r0, [r5, #0]
}
 23ea1f2:	b005      	add	sp, #20
 23ea1f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  Output (msgp);
 23ea1f8:	f7fe bbaa 	b.w	23e8950 <_Z6OutputPKc>
    hdc1.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0);
 23ea1fc:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 23ea200:	4622      	mov	r2, r4
 23ea202:	4669      	mov	r1, sp
 23ea204:	4630      	mov	r0, r6
 23ea206:	f008 fe9b 	bl	23f2f40 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>
    HDC_1_exists = true;
 23ea20a:	2301      	movs	r3, #1
 23ea20c:	703b      	strb	r3, [r7, #0]
    msgp = (char *) "HDC1 OK";
 23ea20e:	4b10      	ldr	r3, [pc, #64]	; (23ea250 <_Z14hdc_initializev+0xd8>)
 23ea210:	602b      	str	r3, [r5, #0]
 23ea212:	e7d1      	b.n	23ea1b8 <_Z14hdc_initializev+0x40>
    hdc2.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0);
 23ea214:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 23ea218:	4622      	mov	r2, r4
 23ea21a:	4669      	mov	r1, sp
 23ea21c:	4630      	mov	r0, r6
 23ea21e:	f008 fe8f 	bl	23f2f40 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>
    HDC_2_exists = true;
 23ea222:	2301      	movs	r3, #1
 23ea224:	703b      	strb	r3, [r7, #0]
    msgp = (char *) "HDC2 OK";
 23ea226:	4b0b      	ldr	r3, [pc, #44]	; (23ea254 <_Z14hdc_initializev+0xdc>)
 23ea228:	602b      	str	r3, [r5, #0]
 23ea22a:	e7e1      	b.n	23ea1f0 <_Z14hdc_initializev+0x78>
 23ea22c:	1006aeb0 	.word	0x1006aeb0
 23ea230:	023fd751 	.word	0x023fd751
 23ea234:	1006f548 	.word	0x1006f548
 23ea238:	1006a344 	.word	0x1006a344
 23ea23c:	023fd75a 	.word	0x023fd75a
 23ea240:	1006a22c 	.word	0x1006a22c
 23ea244:	1006aeb8 	.word	0x1006aeb8
 23ea248:	1006a345 	.word	0x1006a345
 23ea24c:	023fd76a 	.word	0x023fd76a
 23ea250:	023fd762 	.word	0x023fd762
 23ea254:	023fd772 	.word	0x023fd772

023ea258 <_Z14lps_initializev>:
/* 
 *=======================================================================================================================
 * lps_initialize() - LPS35HW Pressure and Temperature initialize
 *=======================================================================================================================
 */
void lps_initialize() {
 23ea258:	b570      	push	{r4, r5, r6, lr}
  Output("LPS:INIT");
 23ea25a:	4831      	ldr	r0, [pc, #196]	; (23ea320 <_Z14lps_initializev+0xc8>)
void lps_initialize() {
 23ea25c:	b088      	sub	sp, #32
  
  // 1st LPS I2C Pressure/Temperature Sensor (I2C ADDRESS = 0x5D)
  lps1 = Adafruit_LPS35HW();
 23ea25e:	4c31      	ldr	r4, [pc, #196]	; (23ea324 <_Z14lps_initializev+0xcc>)
  Output("LPS:INIT");
 23ea260:	f7fe fb76 	bl	23e8950 <_Z6OutputPKc>
  lps1 = Adafruit_LPS35HW();
 23ea264:	ad01      	add	r5, sp, #4
 23ea266:	a801      	add	r0, sp, #4
 23ea268:	f008 ff9a 	bl	23f31a0 <_ZN16Adafruit_LPS35HWC1Ev>
 23ea26c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ea26e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ea270:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 23ea274:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  if (!lps1.begin_I2C(LPS_ADDRESS_1, &Wire)) {
 23ea278:	f010 f84c 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23ea27c:	215d      	movs	r1, #93	; 0x5d
 23ea27e:	4602      	mov	r2, r0
 23ea280:	f1a4 0010 	sub.w	r0, r4, #16
 23ea284:	f009 f879 	bl	23f337a <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire>
 23ea288:	4e27      	ldr	r6, [pc, #156]	; (23ea328 <_Z14lps_initializev+0xd0>)
 23ea28a:	4d28      	ldr	r5, [pc, #160]	; (23ea32c <_Z14lps_initializev+0xd4>)
 23ea28c:	2800      	cmp	r0, #0
 23ea28e:	d12d      	bne.n	23ea2ec <_Z14lps_initializev+0x94>
    msgp = (char *) "LPS1 NF";
 23ea290:	4b27      	ldr	r3, [pc, #156]	; (23ea330 <_Z14lps_initializev+0xd8>)
    LPS_1_exists = false;
    SystemStatusBits |= SSB_LPS_1;  // Turn On Bit
 23ea292:	4a28      	ldr	r2, [pc, #160]	; (23ea334 <_Z14lps_initializev+0xdc>)
    msgp = (char *) "LPS1 NF";
 23ea294:	6033      	str	r3, [r6, #0]
    SystemStatusBits |= SSB_LPS_1;  // Turn On Bit
 23ea296:	6813      	ldr	r3, [r2, #0]
    LPS_1_exists = false;
 23ea298:	7028      	strb	r0, [r5, #0]
    SystemStatusBits |= SSB_LPS_1;  // Turn On Bit
 23ea29a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 23ea29e:	6013      	str	r3, [r2, #0]
    t = lps1.readTemperature();
    p = lps1.readPressure();
    LPS_1_exists = true;
    msgp = (char *) "LPS1 OK";
  }
  Output (msgp);
 23ea2a0:	6830      	ldr	r0, [r6, #0]

  // 2nd LPS I2C Pressure/Temperature Sensor (I2C ADDRESS = 0x5C)
  lps2 = Adafruit_LPS35HW();
 23ea2a2:	4d25      	ldr	r5, [pc, #148]	; (23ea338 <_Z14lps_initializev+0xe0>)
  Output (msgp);
 23ea2a4:	f7fe fb54 	bl	23e8950 <_Z6OutputPKc>
  lps2 = Adafruit_LPS35HW();
 23ea2a8:	ac01      	add	r4, sp, #4
 23ea2aa:	a801      	add	r0, sp, #4
 23ea2ac:	f008 ff78 	bl	23f31a0 <_ZN16Adafruit_LPS35HWC1Ev>
 23ea2b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23ea2b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23ea2b4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 23ea2b8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (!lps2.begin_I2C(LPS_ADDRESS_2, &Wire)) {
 23ea2bc:	f010 f82a 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23ea2c0:	215c      	movs	r1, #92	; 0x5c
 23ea2c2:	4602      	mov	r2, r0
 23ea2c4:	f1a5 0010 	sub.w	r0, r5, #16
 23ea2c8:	f009 f857 	bl	23f337a <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire>
 23ea2cc:	4c1b      	ldr	r4, [pc, #108]	; (23ea33c <_Z14lps_initializev+0xe4>)
 23ea2ce:	b9d0      	cbnz	r0, 23ea306 <_Z14lps_initializev+0xae>
    msgp = (char *) "LPS2 NF";
 23ea2d0:	4b1b      	ldr	r3, [pc, #108]	; (23ea340 <_Z14lps_initializev+0xe8>)
    LPS_2_exists = false;
    SystemStatusBits |= SSB_LPS_2;  // Turn On Bit
 23ea2d2:	4a18      	ldr	r2, [pc, #96]	; (23ea334 <_Z14lps_initializev+0xdc>)
    msgp = (char *) "LPS2 NF";
 23ea2d4:	6033      	str	r3, [r6, #0]
    SystemStatusBits |= SSB_LPS_2;  // Turn On Bit
 23ea2d6:	6813      	ldr	r3, [r2, #0]
    LPS_2_exists = false;
 23ea2d8:	7020      	strb	r0, [r4, #0]
    SystemStatusBits |= SSB_LPS_2;  // Turn On Bit
 23ea2da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 23ea2de:	6013      	str	r3, [r2, #0]
    t = lps2.readTemperature();
    p = lps2.readPressure();
    LPS_2_exists = true;
    msgp = (char *) "LPS2 OK";
  }
  Output (msgp);
 23ea2e0:	6830      	ldr	r0, [r6, #0]
}
 23ea2e2:	b008      	add	sp, #32
 23ea2e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Output (msgp);
 23ea2e8:	f7fe bb32 	b.w	23e8950 <_Z6OutputPKc>
    t = lps1.readTemperature();
 23ea2ec:	f1a4 0010 	sub.w	r0, r4, #16
 23ea2f0:	f008 ff6e 	bl	23f31d0 <_ZN16Adafruit_LPS35HW15readTemperatureEv>
    p = lps1.readPressure();
 23ea2f4:	f1a4 0010 	sub.w	r0, r4, #16
 23ea2f8:	f008 ff8c 	bl	23f3214 <_ZN16Adafruit_LPS35HW12readPressureEv>
    LPS_1_exists = true;
 23ea2fc:	2301      	movs	r3, #1
 23ea2fe:	702b      	strb	r3, [r5, #0]
    msgp = (char *) "LPS1 OK";
 23ea300:	4b10      	ldr	r3, [pc, #64]	; (23ea344 <_Z14lps_initializev+0xec>)
 23ea302:	6033      	str	r3, [r6, #0]
 23ea304:	e7cc      	b.n	23ea2a0 <_Z14lps_initializev+0x48>
    t = lps2.readTemperature();
 23ea306:	f1a5 0010 	sub.w	r0, r5, #16
 23ea30a:	f008 ff61 	bl	23f31d0 <_ZN16Adafruit_LPS35HW15readTemperatureEv>
    p = lps2.readPressure();
 23ea30e:	f1a5 0010 	sub.w	r0, r5, #16
 23ea312:	f008 ff7f 	bl	23f3214 <_ZN16Adafruit_LPS35HW12readPressureEv>
    LPS_2_exists = true;
 23ea316:	2301      	movs	r3, #1
 23ea318:	7023      	strb	r3, [r4, #0]
    msgp = (char *) "LPS2 OK";
 23ea31a:	4b0b      	ldr	r3, [pc, #44]	; (23ea348 <_Z14lps_initializev+0xf0>)
 23ea31c:	6033      	str	r3, [r6, #0]
 23ea31e:	e7df      	b.n	23ea2e0 <_Z14lps_initializev+0x88>
 23ea320:	023fd77a 	.word	0x023fd77a
 23ea324:	1006f0e0 	.word	0x1006f0e0
 23ea328:	1006f548 	.word	0x1006f548
 23ea32c:	1006a34a 	.word	0x1006a34a
 23ea330:	023fd783 	.word	0x023fd783
 23ea334:	1006a22c 	.word	0x1006a22c
 23ea338:	1006f0fc 	.word	0x1006f0fc
 23ea33c:	1006a34b 	.word	0x1006a34b
 23ea340:	023fd793 	.word	0x023fd793
 23ea344:	023fd78b 	.word	0x023fd78b
 23ea348:	023fd79b 	.word	0x023fd79b

023ea34c <_Z14tlw_initializev>:
/* 
 *=======================================================================================================================
 * tlw_initialize() -  Tinovi Leaf Wetness initialize
 *=======================================================================================================================
 */
void tlw_initialize() {
 23ea34c:	b538      	push	{r3, r4, r5, lr}
  Output("TLW:INIT");
 23ea34e:	480f      	ldr	r0, [pc, #60]	; (23ea38c <_Z14tlw_initializev+0x40>)
 23ea350:	f7fe fafe 	bl	23e8950 <_Z6OutputPKc>
  
  // Tinovi Leaf Wetness initialize (I2C ADDRESS = 0x61)
  if (!I2C_Device_Exist(TLW_ADDRESS)) { 
 23ea354:	2061      	movs	r0, #97	; 0x61
 23ea356:	f7fe f8f1 	bl	23e853c <_Z16I2C_Device_Existh>
 23ea35a:	4c0d      	ldr	r4, [pc, #52]	; (23ea390 <_Z14tlw_initializev+0x44>)
 23ea35c:	4d0d      	ldr	r5, [pc, #52]	; (23ea394 <_Z14tlw_initializev+0x48>)
 23ea35e:	b938      	cbnz	r0, 23ea370 <_Z14tlw_initializev+0x24>
    msgp = (char *) "TLW NF";
 23ea360:	4b0d      	ldr	r3, [pc, #52]	; (23ea398 <_Z14tlw_initializev+0x4c>)
    TLW_exists = false;
 23ea362:	7028      	strb	r0, [r5, #0]
    msgp = (char *) "TLW NF";
 23ea364:	6023      	str	r3, [r4, #0]
    tlw.init(TLW_ADDRESS);
    msgp = (char *) "TLW OK";
    TLW_exists = true;
    SystemStatusBits |= SSB_TLW;  // Turn On Bit
  }
  Output (msgp);
 23ea366:	6820      	ldr	r0, [r4, #0]
}
 23ea368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
 23ea36c:	f7fe baf0 	b.w	23e8950 <_Z6OutputPKc>
    tlw.init(TLW_ADDRESS);
 23ea370:	2161      	movs	r1, #97	; 0x61
 23ea372:	480a      	ldr	r0, [pc, #40]	; (23ea39c <_Z14tlw_initializev+0x50>)
 23ea374:	f00a fb24 	bl	23f49c0 <_ZN8LeafSens4initEh>
    msgp = (char *) "TLW OK";
 23ea378:	4b09      	ldr	r3, [pc, #36]	; (23ea3a0 <_Z14tlw_initializev+0x54>)
    SystemStatusBits |= SSB_TLW;  // Turn On Bit
 23ea37a:	4a0a      	ldr	r2, [pc, #40]	; (23ea3a4 <_Z14tlw_initializev+0x58>)
    msgp = (char *) "TLW OK";
 23ea37c:	6023      	str	r3, [r4, #0]
    TLW_exists = true;
 23ea37e:	2301      	movs	r3, #1
 23ea380:	702b      	strb	r3, [r5, #0]
    SystemStatusBits |= SSB_TLW;  // Turn On Bit
 23ea382:	6813      	ldr	r3, [r2, #0]
 23ea384:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 23ea388:	6013      	str	r3, [r2, #0]
 23ea38a:	e7ec      	b.n	23ea366 <_Z14tlw_initializev+0x1a>
 23ea38c:	023fd7a3 	.word	0x023fd7a3
 23ea390:	1006f548 	.word	0x1006f548
 23ea394:	1006a834 	.word	0x1006a834
 23ea398:	023fd7ac 	.word	0x023fd7ac
 23ea39c:	1007ac0c 	.word	0x1007ac0c
 23ea3a0:	023fd7b3 	.word	0x023fd7b3
 23ea3a4:	1006a22c 	.word	0x1006a22c

023ea3a8 <_Z14tsm_initializev>:
/* 
 *=======================================================================================================================
 * tsm_initialize() -  Tinovi Soil Moisture initialize
 *=======================================================================================================================
 */
void tsm_initialize() {
 23ea3a8:	b538      	push	{r3, r4, r5, lr}
  Output("TSM:INIT");
 23ea3aa:	480f      	ldr	r0, [pc, #60]	; (23ea3e8 <_Z14tsm_initializev+0x40>)
 23ea3ac:	f7fe fad0 	bl	23e8950 <_Z6OutputPKc>
  
  // Tinovi Soil Moisture initialize (I2C ADDRESS = 0x63)
  if (!I2C_Device_Exist(TSM_ADDRESS)) { 
 23ea3b0:	2063      	movs	r0, #99	; 0x63
 23ea3b2:	f7fe f8c3 	bl	23e853c <_Z16I2C_Device_Existh>
 23ea3b6:	4c0d      	ldr	r4, [pc, #52]	; (23ea3ec <_Z14tsm_initializev+0x44>)
 23ea3b8:	4d0d      	ldr	r5, [pc, #52]	; (23ea3f0 <_Z14tsm_initializev+0x48>)
 23ea3ba:	b938      	cbnz	r0, 23ea3cc <_Z14tsm_initializev+0x24>
    msgp = (char *) "TSM NF";
 23ea3bc:	4b0d      	ldr	r3, [pc, #52]	; (23ea3f4 <_Z14tsm_initializev+0x4c>)
    TSM_exists = false;
 23ea3be:	7028      	strb	r0, [r5, #0]
    msgp = (char *) "TSM NF";
 23ea3c0:	6023      	str	r3, [r4, #0]
    tsm.init(TSM_ADDRESS);
    msgp = (char *) "TSM OK";
    TSM_exists = true;
    SystemStatusBits |= SSB_TSM;  // Turn On Bit
  }
  Output (msgp);
 23ea3c2:	6820      	ldr	r0, [r4, #0]
}
 23ea3c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
 23ea3c8:	f7fe bac2 	b.w	23e8950 <_Z6OutputPKc>
    tsm.init(TSM_ADDRESS);
 23ea3cc:	2163      	movs	r1, #99	; 0x63
 23ea3ce:	480a      	ldr	r0, [pc, #40]	; (23ea3f8 <_Z14tsm_initializev+0x50>)
 23ea3d0:	f00c fef1 	bl	23f71b6 <_ZN5SVCS34initEi>
    msgp = (char *) "TSM OK";
 23ea3d4:	4b09      	ldr	r3, [pc, #36]	; (23ea3fc <_Z14tsm_initializev+0x54>)
    SystemStatusBits |= SSB_TSM;  // Turn On Bit
 23ea3d6:	4a0a      	ldr	r2, [pc, #40]	; (23ea400 <_Z14tsm_initializev+0x58>)
    msgp = (char *) "TSM OK";
 23ea3d8:	6023      	str	r3, [r4, #0]
    TSM_exists = true;
 23ea3da:	2301      	movs	r3, #1
 23ea3dc:	702b      	strb	r3, [r5, #0]
    SystemStatusBits |= SSB_TSM;  // Turn On Bit
 23ea3de:	6813      	ldr	r3, [r2, #0]
 23ea3e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 23ea3e4:	6013      	str	r3, [r2, #0]
 23ea3e6:	e7ec      	b.n	23ea3c2 <_Z14tsm_initializev+0x1a>
 23ea3e8:	023fd7ba 	.word	0x023fd7ba
 23ea3ec:	1006f548 	.word	0x1006f548
 23ea3f0:	1006a836 	.word	0x1006a836
 23ea3f4:	023fd7c3 	.word	0x023fd7c3
 23ea3f8:	1007ac1c 	.word	0x1007ac1c
 23ea3fc:	023fd7ca 	.word	0x023fd7ca
 23ea400:	1006a22c 	.word	0x1006a22c

023ea404 <_Z15tmsm_initializev>:
/* 
 *=======================================================================================================================
 * tmsm_initialize() -  Tinovi MultiLevel Soil Moisture initialize
 *=======================================================================================================================
 */
void tmsm_initialize() {
 23ea404:	b538      	push	{r3, r4, r5, lr}
  Output("TMSM:INIT");
 23ea406:	480f      	ldr	r0, [pc, #60]	; (23ea444 <_Z15tmsm_initializev+0x40>)
 23ea408:	f7fe faa2 	bl	23e8950 <_Z6OutputPKc>
  
  // Tinovi MultiLevel Soil Moisture initialize (I2C ADDRESS = 0x65)
  if (!I2C_Device_Exist(TMSM_ADDRESS)) { 
 23ea40c:	2065      	movs	r0, #101	; 0x65
 23ea40e:	f7fe f895 	bl	23e853c <_Z16I2C_Device_Existh>
 23ea412:	4c0d      	ldr	r4, [pc, #52]	; (23ea448 <_Z15tmsm_initializev+0x44>)
 23ea414:	4d0d      	ldr	r5, [pc, #52]	; (23ea44c <_Z15tmsm_initializev+0x48>)
 23ea416:	b938      	cbnz	r0, 23ea428 <_Z15tmsm_initializev+0x24>
    msgp = (char *) "TMSM NF";
 23ea418:	4b0d      	ldr	r3, [pc, #52]	; (23ea450 <_Z15tmsm_initializev+0x4c>)
    TMSM_exists = false;
 23ea41a:	7028      	strb	r0, [r5, #0]
    msgp = (char *) "TMSM NF";
 23ea41c:	6023      	str	r3, [r4, #0]
    tmsm.init(TMSM_ADDRESS);
    msgp = (char *) "TMSM OK";
    TMSM_exists = true;
    SystemStatusBits |= SSB_TMSM;  // Turn On Bit
  }
  Output (msgp);
 23ea41e:	6820      	ldr	r0, [r4, #0]
}
 23ea420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
 23ea424:	f7fe ba94 	b.w	23e8950 <_Z6OutputPKc>
    tmsm.init(TMSM_ADDRESS);
 23ea428:	2165      	movs	r1, #101	; 0x65
 23ea42a:	480a      	ldr	r0, [pc, #40]	; (23ea454 <_Z15tmsm_initializev+0x50>)
 23ea42c:	f00c ff89 	bl	23f7342 <_ZN7SVMULTI4initEi>
    msgp = (char *) "TMSM OK";
 23ea430:	4b09      	ldr	r3, [pc, #36]	; (23ea458 <_Z15tmsm_initializev+0x54>)
    SystemStatusBits |= SSB_TMSM;  // Turn On Bit
 23ea432:	4a0a      	ldr	r2, [pc, #40]	; (23ea45c <_Z15tmsm_initializev+0x58>)
    msgp = (char *) "TMSM OK";
 23ea434:	6023      	str	r3, [r4, #0]
    TMSM_exists = true;
 23ea436:	2301      	movs	r3, #1
 23ea438:	702b      	strb	r3, [r5, #0]
    SystemStatusBits |= SSB_TMSM;  // Turn On Bit
 23ea43a:	6813      	ldr	r3, [r2, #0]
 23ea43c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 23ea440:	6013      	str	r3, [r2, #0]
 23ea442:	e7ec      	b.n	23ea41e <_Z15tmsm_initializev+0x1a>
 23ea444:	023fd7d1 	.word	0x023fd7d1
 23ea448:	1006f548 	.word	0x1006f548
 23ea44c:	1006a835 	.word	0x1006a835
 23ea450:	023fd7db 	.word	0x023fd7db
 23ea454:	1007ac14 	.word	0x1007ac14
 23ea458:	023fd7e3 	.word	0x023fd7e3
 23ea45c:	1006a22c 	.word	0x1006a22c

023ea460 <_Z17as5600_initializev>:
/* 
 *=======================================================================================================================
 * as5600_initialize() - wind direction sensor
 *=======================================================================================================================
 */
void as5600_initialize() {
 23ea460:	b508      	push	{r3, lr}
  Output("AS5600:INIT");
 23ea462:	4810      	ldr	r0, [pc, #64]	; (23ea4a4 <_Z17as5600_initializev+0x44>)
 23ea464:	f7fe fa74 	bl	23e8950 <_Z6OutputPKc>
  Wire.beginTransmission(AS5600_ADR);
 23ea468:	f00f ff54 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23ea46c:	4b0e      	ldr	r3, [pc, #56]	; (23ea4a8 <_Z17as5600_initializev+0x48>)
 23ea46e:	6819      	ldr	r1, [r3, #0]
 23ea470:	f00e fd4e 	bl	23f8f10 <_ZN7TwoWire17beginTransmissionEi>
  if (Wire.endTransmission()) {
 23ea474:	f00f ff4e 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23ea478:	f00e fd51 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>
 23ea47c:	4b0b      	ldr	r3, [pc, #44]	; (23ea4ac <_Z17as5600_initializev+0x4c>)
 23ea47e:	b170      	cbz	r0, 23ea49e <_Z17as5600_initializev+0x3e>
    msgp = (char *) "WD:NF";
    AS5600_exists = false;
 23ea480:	2100      	movs	r1, #0
    msgp = (char *) "WD:NF";
 23ea482:	4a0b      	ldr	r2, [pc, #44]	; (23ea4b0 <_Z17as5600_initializev+0x50>)
 23ea484:	601a      	str	r2, [r3, #0]
    AS5600_exists = false;
 23ea486:	4a0b      	ldr	r2, [pc, #44]	; (23ea4b4 <_Z17as5600_initializev+0x54>)
 23ea488:	7011      	strb	r1, [r2, #0]
    SystemStatusBits |= SSB_AS5600;  // Turn On Bit
 23ea48a:	490b      	ldr	r1, [pc, #44]	; (23ea4b8 <_Z17as5600_initializev+0x58>)
 23ea48c:	680a      	ldr	r2, [r1, #0]
 23ea48e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 23ea492:	600a      	str	r2, [r1, #0]
  }
  else {
    msgp = (char *) "WD:OK";
  }
  Output (msgp);
 23ea494:	6818      	ldr	r0, [r3, #0]
}
 23ea496:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
 23ea49a:	f7fe ba59 	b.w	23e8950 <_Z6OutputPKc>
    msgp = (char *) "WD:OK";
 23ea49e:	4a07      	ldr	r2, [pc, #28]	; (23ea4bc <_Z17as5600_initializev+0x5c>)
 23ea4a0:	601a      	str	r2, [r3, #0]
 23ea4a2:	e7f7      	b.n	23ea494 <_Z17as5600_initializev+0x34>
 23ea4a4:	023fd7eb 	.word	0x023fd7eb
 23ea4a8:	1006a19c 	.word	0x1006a19c
 23ea4ac:	1006f548 	.word	0x1006f548
 23ea4b0:	023fd7f7 	.word	0x023fd7f7
 23ea4b4:	1006a1a0 	.word	0x1006a1a0
 23ea4b8:	1006a22c 	.word	0x1006a22c
 23ea4bc:	023fd7fd 	.word	0x023fd7fd

023ea4c0 <_Z13A4_Initializev>:
/* 
 *=======================================================================================================================
 * A4_Initialize()
 *=======================================================================================================================
 */
void A4_Initialize() {
 23ea4c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  Output ("A4:INIT");
 23ea4c2:	482b      	ldr	r0, [pc, #172]	; (23ea570 <_Z13A4_Initializev+0xb0>)
 23ea4c4:	f7fe fa44 	bl	23e8950 <_Z6OutputPKc>
  if (SD_exists) {
 23ea4c8:	4b2a      	ldr	r3, [pc, #168]	; (23ea574 <_Z13A4_Initializev+0xb4>)
 23ea4ca:	781b      	ldrb	r3, [r3, #0]
 23ea4cc:	2b00      	cmp	r3, #0
 23ea4ce:	d04c      	beq.n	23ea56a <_Z13A4_Initializev+0xaa>
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return vwd()->exists(path);
 23ea4d0:	4929      	ldr	r1, [pc, #164]	; (23ea578 <_Z13A4_Initializev+0xb8>)
 23ea4d2:	482a      	ldr	r0, [pc, #168]	; (23ea57c <_Z13A4_Initializev+0xbc>)
 23ea4d4:	f7fe f806 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
    if (SD.exists(SD_A4_DIST_FILE)) {
 23ea4d8:	4604      	mov	r4, r0
 23ea4da:	b1b8      	cbz	r0, 23ea50c <_Z13A4_Initializev+0x4c>
      Output ("A4=DIST");
 23ea4dc:	4828      	ldr	r0, [pc, #160]	; (23ea580 <_Z13A4_Initializev+0xc0>)
 23ea4de:	f7fe fa37 	bl	23e8950 <_Z6OutputPKc>
      A4_State = A4_STATE_DISTANCE;
 23ea4e2:	2201      	movs	r2, #1
 23ea4e4:	4b27      	ldr	r3, [pc, #156]	; (23ea584 <_Z13A4_Initializev+0xc4>)
 23ea4e6:	4928      	ldr	r1, [pc, #160]	; (23ea588 <_Z13A4_Initializev+0xc8>)
 23ea4e8:	4824      	ldr	r0, [pc, #144]	; (23ea57c <_Z13A4_Initializev+0xbc>)
 23ea4ea:	601a      	str	r2, [r3, #0]
 23ea4ec:	f7fd fffa 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
 23ea4f0:	4b26      	ldr	r3, [pc, #152]	; (23ea58c <_Z13A4_Initializev+0xcc>)
      if (SD.exists(SD_5M_DIST_FILE)) {
 23ea4f2:	b138      	cbz	r0, 23ea504 <_Z13A4_Initializev+0x44>
        dg_adjustment = 1.25;
 23ea4f4:	4a26      	ldr	r2, [pc, #152]	; (23ea590 <_Z13A4_Initializev+0xd0>)
        Output ("DIST=5M");
 23ea4f6:	4827      	ldr	r0, [pc, #156]	; (23ea594 <_Z13A4_Initializev+0xd4>)
        dg_adjustment = 1.25;
 23ea4f8:	601a      	str	r2, [r3, #0]
    }
  }
  else {
    Output ("A4=NULL,SD NF");
  }
}
 23ea4fa:	b003      	add	sp, #12
 23ea4fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    Output ("A4=NULL,SD NF");
 23ea500:	f7fe ba26 	b.w	23e8950 <_Z6OutputPKc>
        dg_adjustment = 2.5;
 23ea504:	4a24      	ldr	r2, [pc, #144]	; (23ea598 <_Z13A4_Initializev+0xd8>)
        Output ("DIST=10M");
 23ea506:	4825      	ldr	r0, [pc, #148]	; (23ea59c <_Z13A4_Initializev+0xdc>)
        dg_adjustment = 2.5;
 23ea508:	601a      	str	r2, [r3, #0]
        Output ("DIST=10M");
 23ea50a:	e7f6      	b.n	23ea4fa <_Z13A4_Initializev+0x3a>
 23ea50c:	4924      	ldr	r1, [pc, #144]	; (23ea5a0 <_Z13A4_Initializev+0xe0>)
 23ea50e:	481b      	ldr	r0, [pc, #108]	; (23ea57c <_Z13A4_Initializev+0xbc>)
 23ea510:	f7fd ffe8 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
    else if (SD.exists(SD_A4_RAIN_FILE)) {
 23ea514:	b1d8      	cbz	r0, 23ea54e <_Z13A4_Initializev+0x8e>
      A4_State = A4_STATE_RAIN;
 23ea516:	2502      	movs	r5, #2
      Output ("A4=RAIN");
 23ea518:	4822      	ldr	r0, [pc, #136]	; (23ea5a4 <_Z13A4_Initializev+0xe4>)
 23ea51a:	f7fe fa19 	bl	23e8950 <_Z6OutputPKc>
      A4_State = A4_STATE_RAIN;
 23ea51e:	4b19      	ldr	r3, [pc, #100]	; (23ea584 <_Z13A4_Initializev+0xc4>)
 23ea520:	601d      	str	r5, [r3, #0]
      raingauge2_interrupt_count = 0;
 23ea522:	4b21      	ldr	r3, [pc, #132]	; (23ea5a8 <_Z13A4_Initializev+0xe8>)
 23ea524:	601c      	str	r4, [r3, #0]
      raingauge2_interrupt_stime = System.millis();
 23ea526:	f7fd ff7b 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23ea52a:	4b20      	ldr	r3, [pc, #128]	; (23ea5ac <_Z13A4_Initializev+0xec>)
      attachInterrupt(RAINGAUGE2_IRQ_PIN, raingauge2_interrupt_handler, FALLING);
 23ea52c:	462a      	mov	r2, r5
      raingauge2_interrupt_stime = System.millis();
 23ea52e:	e9c3 0100 	strd	r0, r1, [r3]
      raingauge2_interrupt_ltime = 0;  // used to debounce the tip
 23ea532:	2000      	movs	r0, #0
 23ea534:	2100      	movs	r1, #0
 23ea536:	4b1e      	ldr	r3, [pc, #120]	; (23ea5b0 <_Z13A4_Initializev+0xf0>)
 23ea538:	e9c3 0100 	strd	r0, r1, [r3]
      attachInterrupt(RAINGAUGE2_IRQ_PIN, raingauge2_interrupt_handler, FALLING);
 23ea53c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23ea540:	200f      	movs	r0, #15
 23ea542:	491c      	ldr	r1, [pc, #112]	; (23ea5b4 <_Z13A4_Initializev+0xf4>)
 23ea544:	9400      	str	r4, [sp, #0]
 23ea546:	f00e fd31 	bl	23f8fac <_Z15attachInterrupttPFvvE13InterruptModeah>
}
 23ea54a:	b003      	add	sp, #12
 23ea54c:	bd30      	pop	{r4, r5, pc}
 23ea54e:	491a      	ldr	r1, [pc, #104]	; (23ea5b8 <_Z13A4_Initializev+0xf8>)
 23ea550:	480a      	ldr	r0, [pc, #40]	; (23ea57c <_Z13A4_Initializev+0xbc>)
 23ea552:	f7fd ffc7 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
    else if (SD.exists(SD_A4_RAW_FILE)) {
 23ea556:	b130      	cbz	r0, 23ea566 <_Z13A4_Initializev+0xa6>
      Output ("A4=RAW");
 23ea558:	4818      	ldr	r0, [pc, #96]	; (23ea5bc <_Z13A4_Initializev+0xfc>)
 23ea55a:	f7fe f9f9 	bl	23e8950 <_Z6OutputPKc>
      A4_State = A4_STATE_RAW;
 23ea55e:	2203      	movs	r2, #3
 23ea560:	4b08      	ldr	r3, [pc, #32]	; (23ea584 <_Z13A4_Initializev+0xc4>)
 23ea562:	601a      	str	r2, [r3, #0]
 23ea564:	e7f1      	b.n	23ea54a <_Z13A4_Initializev+0x8a>
      Output ("A4=NULL");
 23ea566:	4816      	ldr	r0, [pc, #88]	; (23ea5c0 <_Z13A4_Initializev+0x100>)
 23ea568:	e7c7      	b.n	23ea4fa <_Z13A4_Initializev+0x3a>
    Output ("A4=NULL,SD NF");
 23ea56a:	4816      	ldr	r0, [pc, #88]	; (23ea5c4 <_Z13A4_Initializev+0x104>)
 23ea56c:	e7c5      	b.n	23ea4fa <_Z13A4_Initializev+0x3a>
 23ea56e:	bf00      	nop
 23ea570:	023fd803 	.word	0x023fd803
 23ea574:	1006a7ec 	.word	0x1006a7ec
 23ea578:	1006a1b7 	.word	0x1006a1b7
 23ea57c:	1006a7a4 	.word	0x1006a7a4
 23ea580:	023fd80b 	.word	0x023fd80b
 23ea584:	1006a2f4 	.word	0x1006a2f4
 23ea588:	1006a1ac 	.word	0x1006a1ac
 23ea58c:	1006a254 	.word	0x1006a254
 23ea590:	3fa00000 	.word	0x3fa00000
 23ea594:	023fd813 	.word	0x023fd813
 23ea598:	40200000 	.word	0x40200000
 23ea59c:	023fd81b 	.word	0x023fd81b
 23ea5a0:	1006a1c2 	.word	0x1006a1c2
 23ea5a4:	023fd824 	.word	0x023fd824
 23ea5a8:	1007aa78 	.word	0x1007aa78
 23ea5ac:	1007aa88 	.word	0x1007aa88
 23ea5b0:	1007aa80 	.word	0x1007aa80
 23ea5b4:	023e8479 	.word	0x023e8479
 23ea5b8:	1006a1cd 	.word	0x1006a1cd
 23ea5bc:	023fd82c 	.word	0x023fd82c
 23ea5c0:	023fd833 	.word	0x023fd833
 23ea5c4:	023fd83b 	.word	0x023fd83b

023ea5c8 <_Z13A5_Initializev>:
/* 
 *=======================================================================================================================
 * A5_Initialize()
 *=======================================================================================================================
 */
void A5_Initialize() {
 23ea5c8:	b508      	push	{r3, lr}
  Output ("A5:INIT");
 23ea5ca:	480c      	ldr	r0, [pc, #48]	; (23ea5fc <_Z13A5_Initializev+0x34>)
 23ea5cc:	f7fe f9c0 	bl	23e8950 <_Z6OutputPKc>
  if (SD_exists) {
 23ea5d0:	4b0b      	ldr	r3, [pc, #44]	; (23ea600 <_Z13A5_Initializev+0x38>)
 23ea5d2:	781b      	ldrb	r3, [r3, #0]
 23ea5d4:	b183      	cbz	r3, 23ea5f8 <_Z13A5_Initializev+0x30>
 23ea5d6:	490b      	ldr	r1, [pc, #44]	; (23ea604 <_Z13A5_Initializev+0x3c>)
 23ea5d8:	480b      	ldr	r0, [pc, #44]	; (23ea608 <_Z13A5_Initializev+0x40>)
 23ea5da:	f7fd ff83 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
    if (SD.exists(SD_A5_RAW_FILE)) {
 23ea5de:	b130      	cbz	r0, 23ea5ee <_Z13A5_Initializev+0x26>
      Output ("A5=RAW");
 23ea5e0:	480a      	ldr	r0, [pc, #40]	; (23ea60c <_Z13A5_Initializev+0x44>)
 23ea5e2:	f7fe f9b5 	bl	23e8950 <_Z6OutputPKc>
      A5_State = A5_STATE_RAW;
 23ea5e6:	2201      	movs	r2, #1
 23ea5e8:	4b09      	ldr	r3, [pc, #36]	; (23ea610 <_Z13A5_Initializev+0x48>)
 23ea5ea:	601a      	str	r2, [r3, #0]
    }
  }
  else {
    Output ("A5=NULL,SD NF");
  }
}
 23ea5ec:	bd08      	pop	{r3, pc}
      Output ("A5=NULL");
 23ea5ee:	4809      	ldr	r0, [pc, #36]	; (23ea614 <_Z13A5_Initializev+0x4c>)
}
 23ea5f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Output ("A5=NULL,SD NF");
 23ea5f4:	f7fe b9ac 	b.w	23e8950 <_Z6OutputPKc>
 23ea5f8:	4807      	ldr	r0, [pc, #28]	; (23ea618 <_Z13A5_Initializev+0x50>)
 23ea5fa:	e7f9      	b.n	23ea5f0 <_Z13A5_Initializev+0x28>
 23ea5fc:	023fd849 	.word	0x023fd849
 23ea600:	1006a7ec 	.word	0x1006a7ec
 23ea604:	1006a1d7 	.word	0x1006a1d7
 23ea608:	1006a7a4 	.word	0x1006a7a4
 23ea60c:	023fd851 	.word	0x023fd851
 23ea610:	1006a2f8 	.word	0x1006a2f8
 23ea614:	023fd858 	.word	0x023fd858
 23ea618:	023fd860 	.word	0x023fd860

023ea61c <_Z11Pin_ReadAvgi>:
/* 
 *=======================================================================================================================
 * Pin_ReadAvg()
 *=======================================================================================================================
 */
float Pin_ReadAvg(int pin) {
 23ea61c:	b570      	push	{r4, r5, r6, lr}
 23ea61e:	2505      	movs	r5, #5
  int numReadings = 5;
  int totalValue = 0;
 23ea620:	2400      	movs	r4, #0
  for (int i = 0; i < numReadings; i++) {
    totalValue += analogRead(pin);
 23ea622:	b286      	uxth	r6, r0
 23ea624:	4630      	mov	r0, r6
 23ea626:	f00f fe2e 	bl	23fa286 <analogRead>
 23ea62a:	4404      	add	r4, r0
    delay(10);  // Short delay between readings
 23ea62c:	200a      	movs	r0, #10
 23ea62e:	f00d fe75 	bl	23f831c <delay>
  for (int i = 0; i < numReadings; i++) {
 23ea632:	3d01      	subs	r5, #1
 23ea634:	d1f6      	bne.n	23ea624 <_Z11Pin_ReadAvgi+0x8>
  }
  return(totalValue / numReadings);
 23ea636:	2305      	movs	r3, #5
 23ea638:	fb94 f3f3 	sdiv	r3, r4, r3
 23ea63c:	ee00 3a10 	vmov	s0, r3
}
 23ea640:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 23ea644:	bd70      	pop	{r4, r5, r6, pc}
	...

023ea648 <_Z25DistanceGauge_TakeReadingv>:
/*
 * ======================================================================================================================
 * DistanceGauge_TakeReading() - measure every second             
 * ======================================================================================================================
 */
void DistanceGauge_TakeReading() {
 23ea648:	b508      	push	{r3, lr}
  dg_buckets[dg_bucket] = (int) analogRead(DISTANCE_GAUGE_PIN) * dg_adjustment;
 23ea64a:	200f      	movs	r0, #15
 23ea64c:	f00f fe1b 	bl	23fa286 <analogRead>
 23ea650:	ee07 0a90 	vmov	s15, r0
 23ea654:	490b      	ldr	r1, [pc, #44]	; (23ea684 <_Z25DistanceGauge_TakeReadingv+0x3c>)
 23ea656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23ea65a:	ed91 7a00 	vldr	s14, [r1]
 23ea65e:	ee67 7a87 	vmul.f32	s15, s15, s14
 23ea662:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23ea666:	ee17 0a90 	vmov	r0, s15
 23ea66a:	4a07      	ldr	r2, [pc, #28]	; (23ea688 <_Z25DistanceGauge_TakeReadingv+0x40>)
 23ea66c:	4907      	ldr	r1, [pc, #28]	; (23ea68c <_Z25DistanceGauge_TakeReadingv+0x44>)
 23ea66e:	6813      	ldr	r3, [r2, #0]
 23ea670:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  dg_bucket = (++dg_bucket) % DG_BUCKETS; // Advance bucket index for next reading
 23ea674:	213c      	movs	r1, #60	; 0x3c
 23ea676:	3301      	adds	r3, #1
 23ea678:	fbb3 f0f1 	udiv	r0, r3, r1
 23ea67c:	fb01 3310 	mls	r3, r1, r0, r3
 23ea680:	6013      	str	r3, [r2, #0]
}
 23ea682:	bd08      	pop	{r3, pc}
 23ea684:	1006a254 	.word	0x1006a254
 23ea688:	1006acb0 	.word	0x1006acb0
 23ea68c:	1006acb4 	.word	0x1006acb4

023ea690 <_Z20DistanceGauge_Medianv>:
 *=======================================================================================================================
 */
float DistanceGauge_Median() {
  int i;
  
  mysort(dg_buckets, DG_BUCKETS);
 23ea690:	4804      	ldr	r0, [pc, #16]	; (23ea6a4 <_Z20DistanceGauge_Medianv+0x14>)
 23ea692:	213c      	movs	r1, #60	; 0x3c
float DistanceGauge_Median() {
 23ea694:	b508      	push	{r3, lr}
  mysort(dg_buckets, DG_BUCKETS);
 23ea696:	f7fd ff81 	bl	23e859c <_Z6mysortPjj>
  i = (DG_BUCKETS+1) / 2 - 1; // -1 as array indexing in C starts from 0
  
  return (dg_buckets[i]); 
 23ea69a:	ed90 0a1d 	vldr	s0, [r0, #116]	; 0x74
}
 23ea69e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 23ea6a2:	bd08      	pop	{r3, pc}
 23ea6a4:	1006acb4 	.word	0x1006acb4

023ea6a8 <_Z16Wind_SampleSpeedv>:
 * Optipolar Hall Effect Sensor SS451A - Anemometer
 * speed  = (( (signals/2) * (2 * pi * radius) ) / time) * calibration_factor
 * speed in m/s =  (   ( (interrupts/2) * (2 * 3.14156 * 0.079) )  / (time_period in ms / 1000)  )  * 2.64
 *=======================================================================================================================
 */
float Wind_SampleSpeed() {
 23ea6a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ea6ac:	ed2d 8b02 	vpush	{d8}
  uint64_t delta_ms;
  float wind_speed;
  
  delta_ms = System.millis()-anemometer_interrupt_stime;
 23ea6b0:	f7fd feb6 	bl	23e8420 <_ZN11SystemClass6millisEv>

  if (anemometer_interrupt_count) {
 23ea6b4:	4f2c      	ldr	r7, [pc, #176]	; (23ea768 <_Z16Wind_SampleSpeedv+0xc0>)
  delta_ms = System.millis()-anemometer_interrupt_stime;
 23ea6b6:	4604      	mov	r4, r0
  if (anemometer_interrupt_count) {
 23ea6b8:	683b      	ldr	r3, [r7, #0]
  delta_ms = System.millis()-anemometer_interrupt_stime;
 23ea6ba:	460d      	mov	r5, r1
  if (anemometer_interrupt_count) {
 23ea6bc:	4e2b      	ldr	r6, [pc, #172]	; (23ea76c <_Z16Wind_SampleSpeedv+0xc4>)
 23ea6be:	2b00      	cmp	r3, #0
 23ea6c0:	d048      	beq.n	23ea754 <_Z16Wind_SampleSpeedv+0xac>
    // wind_speed = (  ( (anemometer_interrupt_count/2) * (2 * 3.14156 * ws_radius) )  / 
    //  (float)( (float)delta_ms / 1000)  )  * ws_calibration;

    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
 23ea6c2:	6838      	ldr	r0, [r7, #0]
 23ea6c4:	f7fc f9f6 	bl	23e6ab4 <__aeabi_ui2d>
 23ea6c8:	a325      	add	r3, pc, #148	; (adr r3, 23ea760 <_Z16Wind_SampleSpeedv+0xb8>)
 23ea6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ea6ce:	f7fc fa6b 	bl	23e6ba8 <__aeabi_dmul>
 23ea6d2:	4b27      	ldr	r3, [pc, #156]	; (23ea770 <_Z16Wind_SampleSpeedv+0xc8>)
 23ea6d4:	4680      	mov	r8, r0
 23ea6d6:	6818      	ldr	r0, [r3, #0]
 23ea6d8:	4689      	mov	r9, r1
 23ea6da:	f7fc fa0d 	bl	23e6af8 <__aeabi_f2d>
 23ea6de:	4602      	mov	r2, r0
 23ea6e0:	460b      	mov	r3, r1
 23ea6e2:	4640      	mov	r0, r8
 23ea6e4:	4649      	mov	r1, r9
 23ea6e6:	f7fc fa5f 	bl	23e6ba8 <__aeabi_dmul>
 23ea6ea:	4680      	mov	r8, r0
 23ea6ec:	4689      	mov	r9, r1
  delta_ms = System.millis()-anemometer_interrupt_stime;
 23ea6ee:	e9d6 0100 	ldrd	r0, r1, [r6]
 23ea6f2:	1a20      	subs	r0, r4, r0
 23ea6f4:	eb65 0101 	sbc.w	r1, r5, r1
        (float)( (float)delta_ms / 1000) )  * ws_calibration;
 23ea6f8:	f7fc fe66 	bl	23e73c8 <__aeabi_ul2f>
 23ea6fc:	eddf 7a1d 	vldr	s15, [pc, #116]	; 23ea774 <_Z16Wind_SampleSpeedv+0xcc>
 23ea700:	ee07 0a10 	vmov	s14, r0
 23ea704:	eec7 7a27 	vdiv.f32	s15, s14, s15
 23ea708:	ee17 0a90 	vmov	r0, s15
 23ea70c:	f7fc f9f4 	bl	23e6af8 <__aeabi_f2d>
 23ea710:	4602      	mov	r2, r0
 23ea712:	460b      	mov	r3, r1
    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
 23ea714:	4640      	mov	r0, r8
 23ea716:	4649      	mov	r1, r9
 23ea718:	f7fc fb70 	bl	23e6dfc <__aeabi_ddiv>
        (float)( (float)delta_ms / 1000) )  * ws_calibration;
 23ea71c:	4b16      	ldr	r3, [pc, #88]	; (23ea778 <_Z16Wind_SampleSpeedv+0xd0>)
    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
 23ea71e:	4604      	mov	r4, r0
        (float)( (float)delta_ms / 1000) )  * ws_calibration;
 23ea720:	6818      	ldr	r0, [r3, #0]
    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
 23ea722:	460d      	mov	r5, r1
        (float)( (float)delta_ms / 1000) )  * ws_calibration;
 23ea724:	f7fc f9e8 	bl	23e6af8 <__aeabi_f2d>
 23ea728:	4602      	mov	r2, r0
 23ea72a:	460b      	mov	r3, r1
 23ea72c:	4620      	mov	r0, r4
 23ea72e:	4629      	mov	r1, r5
 23ea730:	f7fc fa3a 	bl	23e6ba8 <__aeabi_dmul>
    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
 23ea734:	f7fc fd30 	bl	23e7198 <__aeabi_d2f>
 23ea738:	ee08 0a10 	vmov	s16, r0
  }
  else {
    wind_speed = 0.0;
  }

  anemometer_interrupt_count = 0;
 23ea73c:	2300      	movs	r3, #0
 23ea73e:	603b      	str	r3, [r7, #0]
  anemometer_interrupt_stime = System.millis();
 23ea740:	f7fd fe6e 	bl	23e8420 <_ZN11SystemClass6millisEv>
  
  return (wind_speed);
} 
 23ea744:	eeb0 0a48 	vmov.f32	s0, s16
 23ea748:	ecbd 8b02 	vpop	{d8}
  anemometer_interrupt_stime = System.millis();
 23ea74c:	e9c6 0100 	strd	r0, r1, [r6]
} 
 23ea750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    wind_speed = 0.0;
 23ea754:	ed9f 8a09 	vldr	s16, [pc, #36]	; 23ea77c <_Z16Wind_SampleSpeedv+0xd4>
 23ea758:	e7f0      	b.n	23ea73c <_Z16Wind_SampleSpeedv+0x94>
 23ea75a:	bf00      	nop
 23ea75c:	f3af 8000 	nop.w
 23ea760:	35935fc4 	.word	0x35935fc4
 23ea764:	400921ea 	.word	0x400921ea
 23ea768:	1006a968 	.word	0x1006a968
 23ea76c:	1006a970 	.word	0x1006a970
 23ea770:	1006a270 	.word	0x1006a270
 23ea774:	447a0000 	.word	0x447a0000
 23ea778:	1006a26c 	.word	0x1006a26c
 23ea77c:	00000000 	.word	0x00000000

023ea780 <_Z20Wind_SampleDirectionv>:
/* 
 *=======================================================================================================================
 * Wind_SampleDirection() -- Talk i2c to the AS5600 sensor and get direction
 *=======================================================================================================================
 */
int Wind_SampleDirection() {
 23ea780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int degree;
  
  // Read Raw Angle Low Byte
  Wire.beginTransmission(AS5600_ADR);
 23ea782:	4d39      	ldr	r5, [pc, #228]	; (23ea868 <_Z20Wind_SampleDirectionv+0xe8>)
 23ea784:	f00f fdc6 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23ea788:	6829      	ldr	r1, [r5, #0]
 23ea78a:	f00e fbc1 	bl	23f8f10 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(AS5600_raw_ang_lo);
 23ea78e:	f00f fdc1 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23ea792:	210d      	movs	r1, #13
 23ea794:	f7fd fdfc 	bl	23e8390 <_ZN7TwoWire5writeEi.isra.0>
  if (Wire.endTransmission()) {
 23ea798:	f00f fdbc 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23ea79c:	f00e fbbf 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>
 23ea7a0:	4c32      	ldr	r4, [pc, #200]	; (23ea86c <_Z20Wind_SampleDirectionv+0xec>)
 23ea7a2:	b178      	cbz	r0, 23ea7c4 <_Z20Wind_SampleDirectionv+0x44>
    if (AS5600_exists) {
 23ea7a4:	4b32      	ldr	r3, [pc, #200]	; (23ea870 <_Z20Wind_SampleDirectionv+0xf0>)
 23ea7a6:	781b      	ldrb	r3, [r3, #0]
 23ea7a8:	b113      	cbz	r3, 23ea7b0 <_Z20Wind_SampleDirectionv+0x30>
      Output ("WD Offline_L");
 23ea7aa:	4832      	ldr	r0, [pc, #200]	; (23ea874 <_Z20Wind_SampleDirectionv+0xf4>)
 23ea7ac:	f7fe f8d0 	bl	23e8950 <_Z6OutputPKc>
    }
    AS5600_exists = false;
 23ea7b0:	2200      	movs	r2, #0
 23ea7b2:	4b2f      	ldr	r3, [pc, #188]	; (23ea870 <_Z20Wind_SampleDirectionv+0xf0>)
 23ea7b4:	701a      	strb	r2, [r3, #0]
      else {
        return (-1);
      }
    }
  }
  SystemStatusBits |= SSB_AS5600;  // Turn On Bit
 23ea7b6:	6823      	ldr	r3, [r4, #0]
  return (-1); // Not the best value to return 
 23ea7b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  SystemStatusBits |= SSB_AS5600;  // Turn On Bit
 23ea7bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 23ea7c0:	6023      	str	r3, [r4, #0]
  return (-1); // Not the best value to return 
 23ea7c2:	e04c      	b.n	23ea85e <_Z20Wind_SampleDirectionv+0xde>
  else if (Wire.requestFrom(AS5600_ADR, 1)) {
 23ea7c4:	f00f fda6 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23ea7c8:	2201      	movs	r2, #1
 23ea7ca:	7829      	ldrb	r1, [r5, #0]
 23ea7cc:	f00e fb99 	bl	23f8f02 <_ZN7TwoWire11requestFromEhj>
 23ea7d0:	2800      	cmp	r0, #0
 23ea7d2:	d0f0      	beq.n	23ea7b6 <_Z20Wind_SampleDirectionv+0x36>
    int AS5600_lo_raw = Wire.read();
 23ea7d4:	f00f fd9e 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23ea7d8:	6803      	ldr	r3, [r0, #0]
 23ea7da:	695b      	ldr	r3, [r3, #20]
 23ea7dc:	4798      	blx	r3
 23ea7de:	4606      	mov	r6, r0
    Wire.beginTransmission(AS5600_ADR);
 23ea7e0:	f00f fd98 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23ea7e4:	6829      	ldr	r1, [r5, #0]
 23ea7e6:	f00e fb93 	bl	23f8f10 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(AS5600_raw_ang_hi);
 23ea7ea:	f00f fd93 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23ea7ee:	210c      	movs	r1, #12
 23ea7f0:	f7fd fdce 	bl	23e8390 <_ZN7TwoWire5writeEi.isra.0>
    if (Wire.endTransmission()) {
 23ea7f4:	f00f fd8e 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23ea7f8:	f00e fb91 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>
 23ea7fc:	b128      	cbz	r0, 23ea80a <_Z20Wind_SampleDirectionv+0x8a>
      if (AS5600_exists) {
 23ea7fe:	4b1c      	ldr	r3, [pc, #112]	; (23ea870 <_Z20Wind_SampleDirectionv+0xf0>)
 23ea800:	781b      	ldrb	r3, [r3, #0]
 23ea802:	2b00      	cmp	r3, #0
 23ea804:	d0d4      	beq.n	23ea7b0 <_Z20Wind_SampleDirectionv+0x30>
        Output ("WD Offline_H");
 23ea806:	481c      	ldr	r0, [pc, #112]	; (23ea878 <_Z20Wind_SampleDirectionv+0xf8>)
 23ea808:	e7d0      	b.n	23ea7ac <_Z20Wind_SampleDirectionv+0x2c>
    else if (Wire.requestFrom(AS5600_ADR, 1)) {
 23ea80a:	f00f fd83 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23ea80e:	2201      	movs	r2, #1
 23ea810:	7829      	ldrb	r1, [r5, #0]
 23ea812:	f00e fb76 	bl	23f8f02 <_ZN7TwoWire11requestFromEhj>
 23ea816:	2800      	cmp	r0, #0
 23ea818:	d0cd      	beq.n	23ea7b6 <_Z20Wind_SampleDirectionv+0x36>
      word AS5600_hi_raw = Wire.read();
 23ea81a:	f00f fd7b 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23ea81e:	6803      	ldr	r3, [r0, #0]
      if (!AS5600_exists) {
 23ea820:	4f13      	ldr	r7, [pc, #76]	; (23ea870 <_Z20Wind_SampleDirectionv+0xf0>)
      word AS5600_hi_raw = Wire.read();
 23ea822:	695b      	ldr	r3, [r3, #20]
 23ea824:	4798      	blx	r3
      if (!AS5600_exists) {
 23ea826:	783b      	ldrb	r3, [r7, #0]
      word AS5600_hi_raw = Wire.read();
 23ea828:	4605      	mov	r5, r0
      if (!AS5600_exists) {
 23ea82a:	b913      	cbnz	r3, 23ea832 <_Z20Wind_SampleDirectionv+0xb2>
        Output ("WD Online");
 23ea82c:	4813      	ldr	r0, [pc, #76]	; (23ea87c <_Z20Wind_SampleDirectionv+0xfc>)
 23ea82e:	f7fe f88f 	bl	23e8950 <_Z6OutputPKc>
      AS5600_exists = true;           // We made it 
 23ea832:	2301      	movs	r3, #1
 23ea834:	703b      	strb	r3, [r7, #0]
      SystemStatusBits &= ~SSB_AS5600; // Turn Off Bit
 23ea836:	6823      	ldr	r3, [r4, #0]
      degree = (int) AS5600_hi_raw * 0.0879;
 23ea838:	ea46 2005 	orr.w	r0, r6, r5, lsl #8
      SystemStatusBits &= ~SSB_AS5600; // Turn Off Bit
 23ea83c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 23ea840:	6023      	str	r3, [r4, #0]
      degree = (int) AS5600_hi_raw * 0.0879;
 23ea842:	f7fc f947 	bl	23e6ad4 <__aeabi_i2d>
 23ea846:	a306      	add	r3, pc, #24	; (adr r3, 23ea860 <_Z20Wind_SampleDirectionv+0xe0>)
 23ea848:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ea84c:	f7fc f9ac 	bl	23e6ba8 <__aeabi_dmul>
 23ea850:	f7fc fc5a 	bl	23e7108 <__aeabi_d2iz>
        return (-1);
 23ea854:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
 23ea858:	bf88      	it	hi
 23ea85a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
 23ea85e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23ea860:	495182aa 	.word	0x495182aa
 23ea864:	3fb6809d 	.word	0x3fb6809d
 23ea868:	1006a19c 	.word	0x1006a19c
 23ea86c:	1006a22c 	.word	0x1006a22c
 23ea870:	1006a1a0 	.word	0x1006a1a0
 23ea874:	023fd86e 	.word	0x023fd86e
 23ea878:	023fd87b 	.word	0x023fd87b
 23ea87c:	023fd888 	.word	0x023fd888

023ea880 <_Z20Wind_DirectionVectorv>:
/* 
 *=======================================================================================================================
 * Wind_DirectionVector()
 *=======================================================================================================================
 */
int Wind_DirectionVector() {
 23ea880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    // Flag we have wind speed
    if (s > 0) {
      ws_zero = false;  
    }
    r = (d * 71) / 4068.0;
 23ea884:	f20f 1910 	addw	r9, pc, #272	; 0x110
 23ea888:	e9d9 8900 	ldrd	r8, r9, [r9]
int Wind_DirectionVector() {
 23ea88c:	ed2d 8b08 	vpush	{d8-d11}
  double EW_vector_sum = 0.0;
 23ea890:	ed9f 8b3f 	vldr	d8, [pc, #252]	; 23ea990 <_Z20Wind_DirectionVectorv+0x110>
  bool ws_zero = true;
 23ea894:	2501      	movs	r5, #1
  for (i=0; i<WIND_READINGS; i++) {
 23ea896:	f04f 0a00 	mov.w	sl, #0
  double NS_vector_sum = 0.0;
 23ea89a:	eeb0 9a48 	vmov.f32	s18, s16
 23ea89e:	eef0 9a68 	vmov.f32	s19, s17
    r = (d * 71) / 4068.0;
 23ea8a2:	f04f 0b47 	mov.w	fp, #71	; 0x47
 23ea8a6:	4c40      	ldr	r4, [pc, #256]	; (23ea9a8 <_Z20Wind_DirectionVectorv+0x128>)
int Wind_DirectionVector() {
 23ea8a8:	b083      	sub	sp, #12
    d = wind.bucket[i].direction;
 23ea8aa:	6820      	ldr	r0, [r4, #0]
    if (d == -1) {
 23ea8ac:	1c43      	adds	r3, r0, #1
 23ea8ae:	d068      	beq.n	23ea982 <_Z20Wind_DirectionVectorv+0x102>
    s = wind.bucket[i].speed;
 23ea8b0:	ed94 ba01 	vldr	s22, [r4, #4]
      ws_zero = false;  
 23ea8b4:	eeb5 ba40 	vcmp.f32	s22, #0.0
 23ea8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    r = (d * 71) / 4068.0;
 23ea8bc:	fb0b f000 	mul.w	r0, fp, r0
      ws_zero = false;  
 23ea8c0:	bfc8      	it	gt
 23ea8c2:	2500      	movgt	r5, #0
    r = (d * 71) / 4068.0;
 23ea8c4:	f7fc f906 	bl	23e6ad4 <__aeabi_i2d>
 23ea8c8:	4642      	mov	r2, r8
 23ea8ca:	464b      	mov	r3, r9
 23ea8cc:	f7fc fa96 	bl	23e6dfc <__aeabi_ddiv>
    
    // North South Direction 
    NS_vector_sum += cos(r) * s;
 23ea8d0:	ec41 0b10 	vmov	d0, r0, r1
    r = (d * 71) / 4068.0;
 23ea8d4:	ec41 0b1a 	vmov	d10, r0, r1
    NS_vector_sum += cos(r) * s;
 23ea8d8:	f00f ff7e 	bl	23fa7d8 <cos>
 23ea8dc:	ee1b 0a10 	vmov	r0, s22
 23ea8e0:	ed8d 0b00 	vstr	d0, [sp]
 23ea8e4:	f7fc f908 	bl	23e6af8 <__aeabi_f2d>
 23ea8e8:	4602      	mov	r2, r0
 23ea8ea:	460b      	mov	r3, r1
 23ea8ec:	4606      	mov	r6, r0
 23ea8ee:	460f      	mov	r7, r1
 23ea8f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 23ea8f4:	f7fc f958 	bl	23e6ba8 <__aeabi_dmul>
 23ea8f8:	4602      	mov	r2, r0
 23ea8fa:	460b      	mov	r3, r1
 23ea8fc:	ec51 0b19 	vmov	r0, r1, d9
 23ea900:	f7fb ff9c 	bl	23e683c <__adddf3>
    EW_vector_sum += sin(r) * s;
 23ea904:	eeb0 0a4a 	vmov.f32	s0, s20
 23ea908:	eef0 0a6a 	vmov.f32	s1, s21
    NS_vector_sum += cos(r) * s;
 23ea90c:	ec41 0b19 	vmov	d9, r0, r1
    EW_vector_sum += sin(r) * s;
 23ea910:	f010 f856 	bl	23fa9c0 <sin>
 23ea914:	4630      	mov	r0, r6
 23ea916:	ec53 2b10 	vmov	r2, r3, d0
 23ea91a:	4639      	mov	r1, r7
 23ea91c:	f7fc f944 	bl	23e6ba8 <__aeabi_dmul>
 23ea920:	4602      	mov	r2, r0
 23ea922:	460b      	mov	r3, r1
 23ea924:	ec51 0b18 	vmov	r0, r1, d8
 23ea928:	f7fb ff88 	bl	23e683c <__adddf3>
  for (i=0; i<WIND_READINGS; i++) {
 23ea92c:	f10a 0a01 	add.w	sl, sl, #1
 23ea930:	f1ba 0f3c 	cmp.w	sl, #60	; 0x3c
    EW_vector_sum += sin(r) * s;
 23ea934:	ec41 0b18 	vmov	d8, r0, r1
  for (i=0; i<WIND_READINGS; i++) {
 23ea938:	f104 0408 	add.w	r4, r4, #8
 23ea93c:	d1b5      	bne.n	23ea8aa <_Z20Wind_DirectionVectorv+0x2a>
  }
  rtod = (atan2(EW_vector_sum, NS_vector_sum)*4068.0)/71.0;
 23ea93e:	eeb0 1a49 	vmov.f32	s2, s18
 23ea942:	eef0 1a69 	vmov.f32	s3, s19
 23ea946:	ec41 0b10 	vmov	d0, r0, r1
 23ea94a:	f010 f88d 	bl	23faa68 <atan2>
 23ea94e:	a312      	add	r3, pc, #72	; (adr r3, 23ea998 <_Z20Wind_DirectionVectorv+0x118>)
 23ea950:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ea954:	ec51 0b10 	vmov	r0, r1, d0
 23ea958:	f7fc f926 	bl	23e6ba8 <__aeabi_dmul>
 23ea95c:	a310      	add	r3, pc, #64	; (adr r3, 23ea9a0 <_Z20Wind_DirectionVectorv+0x120>)
 23ea95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ea962:	f7fc fa4b 	bl	23e6dfc <__aeabi_ddiv>
 23ea966:	f7fc fbcf 	bl	23e7108 <__aeabi_d2iz>
  if (rtod<0) {
 23ea96a:	2800      	cmp	r0, #0
    rtod = 360 + rtod;
 23ea96c:	bfb8      	it	lt
 23ea96e:	f500 70b4 	addlt.w	r0, r0, #360	; 0x168
  }

  // If all the winds speeds are 0 then we return current wind direction or 0 on failure of that.
  if (ws_zero) {
 23ea972:	b135      	cbz	r5, 23ea982 <_Z20Wind_DirectionVectorv+0x102>
    return (Wind_SampleDirection()); // Can return -1
  }
  else {
    return (rtod);
  }
}
 23ea974:	b003      	add	sp, #12
 23ea976:	ecbd 8b08 	vpop	{d8-d11}
 23ea97a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (Wind_SampleDirection()); // Can return -1
 23ea97e:	f7ff beff 	b.w	23ea780 <_Z20Wind_SampleDirectionv>
}
 23ea982:	b003      	add	sp, #12
 23ea984:	ecbd 8b08 	vpop	{d8-d11}
 23ea988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ea98c:	f3af 8000 	nop.w
	...
 23ea99c:	40afc800 	.word	0x40afc800
 23ea9a0:	00000000 	.word	0x00000000
 23ea9a4:	4051c000 	.word	0x4051c000
 23ea9a8:	1007ac78 	.word	0x1007ac78

023ea9ac <_Z17Wind_SpeedAveragev>:
 * Wind_SpeedAverage()
 *=======================================================================================================================
 */
float Wind_SpeedAverage() {
  float wind_speed = 0.0;
  for (int i=0; i<WIND_READINGS; i++) {
 23ea9ac:	2300      	movs	r3, #0
  float wind_speed = 0.0;
 23ea9ae:	eddf 7a08 	vldr	s15, [pc, #32]	; 23ea9d0 <_Z17Wind_SpeedAveragev+0x24>
 23ea9b2:	4a08      	ldr	r2, [pc, #32]	; (23ea9d4 <_Z17Wind_SpeedAveragev+0x28>)
    // sum wind speeds for later average
    wind_speed += wind.bucket[i].speed;
 23ea9b4:	ed92 7a01 	vldr	s14, [r2, #4]
  for (int i=0; i<WIND_READINGS; i++) {
 23ea9b8:	3301      	adds	r3, #1
 23ea9ba:	2b3c      	cmp	r3, #60	; 0x3c
    wind_speed += wind.bucket[i].speed;
 23ea9bc:	ee77 7a87 	vadd.f32	s15, s15, s14
  for (int i=0; i<WIND_READINGS; i++) {
 23ea9c0:	f102 0208 	add.w	r2, r2, #8
 23ea9c4:	d1f6      	bne.n	23ea9b4 <_Z17Wind_SpeedAveragev+0x8>
  }
  return( wind_speed / (float) WIND_READINGS);
}
 23ea9c6:	ed9f 0a04 	vldr	s0, [pc, #16]	; 23ea9d8 <_Z17Wind_SpeedAveragev+0x2c>
 23ea9ca:	ee87 0a80 	vdiv.f32	s0, s15, s0
 23ea9ce:	4770      	bx	lr
 23ea9d0:	00000000 	.word	0x00000000
 23ea9d4:	1007ac78 	.word	0x1007ac78
 23ea9d8:	42700000 	.word	0x42700000
 23ea9dc:	00000000 	.word	0x00000000

023ea9e0 <_Z15Wind_GustUpdatev>:
 *     Sum this reading with next 2.
 *     If greater than last, update last 
 * 
 *=======================================================================================================================
 */
void Wind_GustUpdate() {
 23ea9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ea9e4:	ed2d 8b08 	vpush	{d8-d11}
  int bucket = wind.bucket_idx; // Start at next bucket to fill (aka oldest reading)
 23ea9e8:	4963      	ldr	r1, [pc, #396]	; (23eab78 <_Z15Wind_GustUpdatev+0x198>)
 23ea9ea:	253a      	movs	r5, #58	; 0x3a
 23ea9ec:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
  float ws_sum = 0.0;
 23ea9f0:	ed9f 7a62 	vldr	s14, [pc, #392]	; 23eab7c <_Z15Wind_GustUpdatev+0x19c>
  int ws_bucket = bucket;
 23ea9f4:	461c      	mov	r4, r3
  float sum;

  for (int i=0; i<(WIND_READINGS-2); i++) {  // subtract 2 because we are looking ahead at the next 2 buckets
    // sum wind speeds 
    sum = wind.bucket[bucket].speed +
          wind.bucket[(bucket+1) % WIND_READINGS].speed +
 23ea9f6:	203c      	movs	r0, #60	; 0x3c
void Wind_GustUpdate() {
 23ea9f8:	b083      	sub	sp, #12
    sum = wind.bucket[bucket].speed +
 23ea9fa:	461e      	mov	r6, r3
 23ea9fc:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
          wind.bucket[(bucket+1) % WIND_READINGS].speed +
 23eaa00:	3301      	adds	r3, #1
    sum = wind.bucket[bucket].speed +
 23eaa02:	edd2 7a01 	vldr	s15, [r2, #4]
          wind.bucket[(bucket+1) % WIND_READINGS].speed +
 23eaa06:	fb93 f2f0 	sdiv	r2, r3, r0
 23eaa0a:	fb00 3312 	mls	r3, r0, r2, r3
          wind.bucket[(bucket+2) % WIND_READINGS].speed;
 23eaa0e:	1cb2      	adds	r2, r6, #2
 23eaa10:	fb92 f7f0 	sdiv	r7, r2, r0
 23eaa14:	fb00 2217 	mls	r2, r0, r7, r2
          wind.bucket[(bucket+1) % WIND_READINGS].speed +
 23eaa18:	eb01 07c3 	add.w	r7, r1, r3, lsl #3
    sum = wind.bucket[bucket].speed +
 23eaa1c:	edd7 6a01 	vldr	s13, [r7, #4]
          wind.bucket[(bucket+2) % WIND_READINGS].speed;
 23eaa20:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    sum = wind.bucket[bucket].speed +
 23eaa24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 23eaa28:	edd2 6a01 	vldr	s13, [r2, #4]
 23eaa2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
    if (sum >= ws_sum) {
 23eaa30:	eef4 7ac7 	vcmpe.f32	s15, s14
 23eaa34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eaa38:	bfa4      	itt	ge
 23eaa3a:	4634      	movge	r4, r6
      ws_sum = sum;
 23eaa3c:	eeb0 7a67 	vmovge.f32	s14, s15
  for (int i=0; i<(WIND_READINGS-2); i++) {  // subtract 2 because we are looking ahead at the next 2 buckets
 23eaa40:	3d01      	subs	r5, #1
 23eaa42:	d1da      	bne.n	23ea9fa <_Z15Wind_GustUpdatev+0x1a>
      ws_bucket = bucket;
    }
    bucket = (++bucket) % WIND_READINGS;
  }
  wind.gust = ws_sum/3;
 23eaa44:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
  
  // Determine Gust Direction 
  double NS_vector_sum = 0.0;
  double EW_vector_sum = 0.0;
 23eaa48:	ed9f 8b45 	vldr	d8, [pc, #276]	; 23eab60 <_Z15Wind_GustUpdatev+0x180>
  wind.gust = ws_sum/3;
 23eaa4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 23eaa50:	f04f 0803 	mov.w	r8, #3
 23eaa54:	edc1 7a79 	vstr	s15, [r1, #484]	; 0x1e4
  double r;
  float s;
  int d, i, rtod;
  bool ws_zero = true;
 23eaa58:	2501      	movs	r5, #1
  double NS_vector_sum = 0.0;
 23eaa5a:	eeb0 9a48 	vmov.f32	s18, s16
 23eaa5e:	eef0 9a68 	vmov.f32	s19, s17

    // Flag we have wind speed
    if (s > 0) {
      ws_zero = false;  
    }
    r = (d * 71) / 4068.0;
 23eaa62:	f04f 0b47 	mov.w	fp, #71	; 0x47
    
    // North South Direction 
    NS_vector_sum += cos(r) * s;
    EW_vector_sum += sin(r) * s;

    bucket = (++bucket) % WIND_READINGS;
 23eaa66:	f04f 093c 	mov.w	r9, #60	; 0x3c
    d = wind.bucket[bucket].direction;
 23eaa6a:	f8df a10c 	ldr.w	sl, [pc, #268]	; 23eab78 <_Z15Wind_GustUpdatev+0x198>
 23eaa6e:	f85a 0034 	ldr.w	r0, [sl, r4, lsl #3]
    if (d == -1) {
 23eaa72:	1c43      	adds	r3, r0, #1
 23eaa74:	d072      	beq.n	23eab5c <_Z15Wind_GustUpdatev+0x17c>
    s = wind.bucket[bucket].speed;
 23eaa76:	eb0a 03c4 	add.w	r3, sl, r4, lsl #3
 23eaa7a:	ed93 ba01 	vldr	s22, [r3, #4]
      ws_zero = false;  
 23eaa7e:	eeb5 ba40 	vcmp.f32	s22, #0.0
 23eaa82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    r = (d * 71) / 4068.0;
 23eaa86:	fb0b f000 	mul.w	r0, fp, r0
      ws_zero = false;  
 23eaa8a:	bfc8      	it	gt
 23eaa8c:	2500      	movgt	r5, #0
    r = (d * 71) / 4068.0;
 23eaa8e:	f7fc f821 	bl	23e6ad4 <__aeabi_i2d>
 23eaa92:	a335      	add	r3, pc, #212	; (adr r3, 23eab68 <_Z15Wind_GustUpdatev+0x188>)
 23eaa94:	e9d3 2300 	ldrd	r2, r3, [r3]
 23eaa98:	f7fc f9b0 	bl	23e6dfc <__aeabi_ddiv>
    NS_vector_sum += cos(r) * s;
 23eaa9c:	ec41 0b10 	vmov	d0, r0, r1
    r = (d * 71) / 4068.0;
 23eaaa0:	ec41 0b1a 	vmov	d10, r0, r1
    NS_vector_sum += cos(r) * s;
 23eaaa4:	f00f fe98 	bl	23fa7d8 <cos>
 23eaaa8:	ee1b 0a10 	vmov	r0, s22
 23eaaac:	ed8d 0b00 	vstr	d0, [sp]
 23eaab0:	f7fc f822 	bl	23e6af8 <__aeabi_f2d>
 23eaab4:	4602      	mov	r2, r0
 23eaab6:	460b      	mov	r3, r1
 23eaab8:	4606      	mov	r6, r0
 23eaaba:	460f      	mov	r7, r1
 23eaabc:	e9dd 0100 	ldrd	r0, r1, [sp]
 23eaac0:	f7fc f872 	bl	23e6ba8 <__aeabi_dmul>
 23eaac4:	4602      	mov	r2, r0
 23eaac6:	460b      	mov	r3, r1
 23eaac8:	ec51 0b19 	vmov	r0, r1, d9
 23eaacc:	f7fb feb6 	bl	23e683c <__adddf3>
    EW_vector_sum += sin(r) * s;
 23eaad0:	eeb0 0a4a 	vmov.f32	s0, s20
 23eaad4:	eef0 0a6a 	vmov.f32	s1, s21
    NS_vector_sum += cos(r) * s;
 23eaad8:	ec41 0b19 	vmov	d9, r0, r1
    EW_vector_sum += sin(r) * s;
 23eaadc:	f00f ff70 	bl	23fa9c0 <sin>
 23eaae0:	4630      	mov	r0, r6
 23eaae2:	ec53 2b10 	vmov	r2, r3, d0
 23eaae6:	4639      	mov	r1, r7
 23eaae8:	f7fc f85e 	bl	23e6ba8 <__aeabi_dmul>
    bucket = (++bucket) % WIND_READINGS;
 23eaaec:	3401      	adds	r4, #1
    EW_vector_sum += sin(r) * s;
 23eaaee:	460b      	mov	r3, r1
 23eaaf0:	4602      	mov	r2, r0
 23eaaf2:	ec51 0b18 	vmov	r0, r1, d8
 23eaaf6:	f7fb fea1 	bl	23e683c <__adddf3>
    bucket = (++bucket) % WIND_READINGS;
 23eaafa:	fb94 f3f9 	sdiv	r3, r4, r9
  for (i=0; i<3; i++) {
 23eaafe:	f1b8 0801 	subs.w	r8, r8, #1
    EW_vector_sum += sin(r) * s;
 23eab02:	ec41 0b18 	vmov	d8, r0, r1
    bucket = (++bucket) % WIND_READINGS;
 23eab06:	fb09 4413 	mls	r4, r9, r3, r4
  for (i=0; i<3; i++) {
 23eab0a:	d1b0      	bne.n	23eaa6e <_Z15Wind_GustUpdatev+0x8e>
  }

  rtod = (atan2(EW_vector_sum, NS_vector_sum)*4068.0)/71.0;
 23eab0c:	eeb0 1a49 	vmov.f32	s2, s18
 23eab10:	eef0 1a69 	vmov.f32	s3, s19
 23eab14:	eeb0 0a48 	vmov.f32	s0, s16
 23eab18:	eef0 0a68 	vmov.f32	s1, s17
 23eab1c:	f00f ffa4 	bl	23faa68 <atan2>
 23eab20:	a311      	add	r3, pc, #68	; (adr r3, 23eab68 <_Z15Wind_GustUpdatev+0x188>)
 23eab22:	e9d3 2300 	ldrd	r2, r3, [r3]
 23eab26:	ec51 0b10 	vmov	r0, r1, d0
 23eab2a:	f7fc f83d 	bl	23e6ba8 <__aeabi_dmul>
 23eab2e:	a310      	add	r3, pc, #64	; (adr r3, 23eab70 <_Z15Wind_GustUpdatev+0x190>)
 23eab30:	e9d3 2300 	ldrd	r2, r3, [r3]
 23eab34:	f7fc f962 	bl	23e6dfc <__aeabi_ddiv>
 23eab38:	f7fc fae6 	bl	23e7108 <__aeabi_d2iz>
  if (rtod<0) {
 23eab3c:	2800      	cmp	r0, #0
    rtod = 360 + rtod;
 23eab3e:	bfb8      	it	lt
 23eab40:	f500 70b4 	addlt.w	r0, r0, #360	; 0x168
  }

  // If all the winds speeds are 0 or we have a -1 direction then set -1 for direction.
  if (ws_zero) {
    wind.gust_direction = -1;
 23eab44:	2d00      	cmp	r5, #0
 23eab46:	bf18      	it	ne
 23eab48:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23eab4c:	4b0a      	ldr	r3, [pc, #40]	; (23eab78 <_Z15Wind_GustUpdatev+0x198>)
 23eab4e:	f8c3 01e8 	str.w	r0, [r3, #488]	; 0x1e8
  }
  else {
    wind.gust_direction = rtod;
  }
}
 23eab52:	b003      	add	sp, #12
 23eab54:	ecbd 8b08 	vpop	{d8-d11}
 23eab58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ws_zero = true;
 23eab5c:	2501      	movs	r5, #1
 23eab5e:	e7d5      	b.n	23eab0c <_Z15Wind_GustUpdatev+0x12c>
	...
 23eab6c:	40afc800 	.word	0x40afc800
 23eab70:	00000000 	.word	0x00000000
 23eab74:	4051c000 	.word	0x4051c000
 23eab78:	1007ac78 	.word	0x1007ac78
 23eab7c:	00000000 	.word	0x00000000

023eab80 <_Z16Wind_TakeReadingv>:
/*
 * ======================================================================================================================
 * Wind_TakeReading() - Wind direction and speed, measure every second             
 * ======================================================================================================================
 */
void Wind_TakeReading() {
 23eab80:	b538      	push	{r3, r4, r5, lr}
  wind.bucket[wind.bucket_idx].direction = (int) Wind_SampleDirection();
 23eab82:	4c0d      	ldr	r4, [pc, #52]	; (23eabb8 <_Z16Wind_TakeReadingv+0x38>)
 23eab84:	f8d4 51e0 	ldr.w	r5, [r4, #480]	; 0x1e0
 23eab88:	f7ff fdfa 	bl	23ea780 <_Z20Wind_SampleDirectionv>
 23eab8c:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
  wind.bucket[wind.bucket_idx].speed = Wind_SampleSpeed();
 23eab90:	f8d4 51e0 	ldr.w	r5, [r4, #480]	; 0x1e0
 23eab94:	f7ff fd88 	bl	23ea6a8 <_Z16Wind_SampleSpeedv>
  wind.bucket_idx = (++wind.bucket_idx) % WIND_READINGS; // Advance bucket index for next reading
 23eab98:	223c      	movs	r2, #60	; 0x3c
 23eab9a:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
  wind.bucket[wind.bucket_idx].speed = Wind_SampleSpeed();
 23eab9e:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
  wind.bucket_idx = (++wind.bucket_idx) % WIND_READINGS; // Advance bucket index for next reading
 23eaba2:	3301      	adds	r3, #1
 23eaba4:	fb93 f1f2 	sdiv	r1, r3, r2
  wind.bucket[wind.bucket_idx].speed = Wind_SampleSpeed();
 23eaba8:	ed85 0a01 	vstr	s0, [r5, #4]
  wind.bucket_idx = (++wind.bucket_idx) % WIND_READINGS; // Advance bucket index for next reading
 23eabac:	fb02 3311 	mls	r3, r2, r1, r3
 23eabb0:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
}
 23eabb4:	bd38      	pop	{r3, r4, r5, pc}
 23eabb6:	bf00      	nop
 23eabb8:	1007ac78 	.word	0x1007ac78

023eabbc <_Z17I2C_Check_Sensorsv>:
/*
 * ======================================================================================================================
 * I2C_Check_Sensors() - See if each I2C sensor responds on the bus and take action accordingly             
 * ======================================================================================================================
 */
void I2C_Check_Sensors() {
 23eabbc:	b570      	push	{r4, r5, r6, lr}

  // BMX_1 Barometric Pressure 
  if (I2C_Device_Exist (BMX_ADDRESS_1)) {
 23eabbe:	2077      	movs	r0, #119	; 0x77
 23eabc0:	f7fd fcbc 	bl	23e853c <_Z16I2C_Device_Existh>
 23eabc4:	4ca7      	ldr	r4, [pc, #668]	; (23eae64 <_Z17I2C_Check_Sensorsv+0x2a8>)
    // Sensor online but our state had it offline
    if (BMX_1_exists == false) {
 23eabc6:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (BMX_ADDRESS_1)) {
 23eabc8:	2800      	cmp	r0, #0
 23eabca:	f000 80ef 	beq.w	23eadac <_Z17I2C_Check_Sensorsv+0x1f0>
    if (BMX_1_exists == false) {
 23eabce:	b99b      	cbnz	r3, 23eabf8 <_Z17I2C_Check_Sensorsv+0x3c>
      if (BMX_1_chip_id == BMP280_CHIP_ID) {
 23eabd0:	4ba5      	ldr	r3, [pc, #660]	; (23eae68 <_Z17I2C_Check_Sensorsv+0x2ac>)
 23eabd2:	781a      	ldrb	r2, [r3, #0]
 23eabd4:	2a58      	cmp	r2, #88	; 0x58
 23eabd6:	f040 80b1 	bne.w	23ead3c <_Z17I2C_Check_Sensorsv+0x180>
        if (bmp1.begin(BMX_ADDRESS_1)) { 
 23eabda:	2177      	movs	r1, #119	; 0x77
 23eabdc:	48a3      	ldr	r0, [pc, #652]	; (23eae6c <_Z17I2C_Check_Sensorsv+0x2b0>)
 23eabde:	f006 ffc3 	bl	23f1b68 <_ZN15Adafruit_BMP2805beginEhh>
 23eabe2:	b148      	cbz	r0, 23eabf8 <_Z17I2C_Check_Sensorsv+0x3c>
          BMX_1_exists = true;
 23eabe4:	2301      	movs	r3, #1
          Output ("BMP1 ONLINE");
 23eabe6:	48a2      	ldr	r0, [pc, #648]	; (23eae70 <_Z17I2C_Check_Sensorsv+0x2b4>)
          BMX_1_exists = true;
 23eabe8:	7023      	strb	r3, [r4, #0]
        }        
      }
      else {
        if (bm31.begin_I2C(BMX_ADDRESS_1)) { 
          BMX_1_exists = true;
          Output ("BM31 ONLINE");
 23eabea:	f7fd feb1 	bl	23e8950 <_Z6OutputPKc>
          SystemStatusBits &= ~SSB_BMX_1; // Turn Off Bit
 23eabee:	4aa1      	ldr	r2, [pc, #644]	; (23eae74 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23eabf0:	6813      	ldr	r3, [r2, #0]
 23eabf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  else {
    // Sensor offline but our state has it online
    if (BMX_1_exists == true) {
      BMX_1_exists = false;
      Output ("BMX1 OFFLINE");
      SystemStatusBits |= SSB_BMX_1;  // Turn On Bit 
 23eabf6:	6013      	str	r3, [r2, #0]
    }    
  }

  // BMX_2 Barometric Pressure 
  if (I2C_Device_Exist (BMX_ADDRESS_2)) {
 23eabf8:	2076      	movs	r0, #118	; 0x76
 23eabfa:	f7fd fc9f 	bl	23e853c <_Z16I2C_Device_Existh>
 23eabfe:	4d9e      	ldr	r5, [pc, #632]	; (23eae78 <_Z17I2C_Check_Sensorsv+0x2bc>)
    // Sensor online but our state had it offline
    if (BMX_2_exists == false) {
 23eac00:	782b      	ldrb	r3, [r5, #0]
  if (I2C_Device_Exist (BMX_ADDRESS_2)) {
 23eac02:	2800      	cmp	r0, #0
 23eac04:	f000 8116 	beq.w	23eae34 <_Z17I2C_Check_Sensorsv+0x278>
    if (BMX_2_exists == false) {
 23eac08:	b99b      	cbnz	r3, 23eac32 <_Z17I2C_Check_Sensorsv+0x76>
      if (BMX_2_chip_id == BMP280_CHIP_ID) {
 23eac0a:	4b9c      	ldr	r3, [pc, #624]	; (23eae7c <_Z17I2C_Check_Sensorsv+0x2c0>)
 23eac0c:	781a      	ldrb	r2, [r3, #0]
 23eac0e:	2a58      	cmp	r2, #88	; 0x58
 23eac10:	f040 80d8 	bne.w	23eadc4 <_Z17I2C_Check_Sensorsv+0x208>
        if (bmp2.begin(BMX_ADDRESS_2)) { 
 23eac14:	2176      	movs	r1, #118	; 0x76
 23eac16:	489a      	ldr	r0, [pc, #616]	; (23eae80 <_Z17I2C_Check_Sensorsv+0x2c4>)
 23eac18:	f006 ffa6 	bl	23f1b68 <_ZN15Adafruit_BMP2805beginEhh>
 23eac1c:	b148      	cbz	r0, 23eac32 <_Z17I2C_Check_Sensorsv+0x76>
          BMX_2_exists = true;
 23eac1e:	2301      	movs	r3, #1
          Output ("BMP2 ONLINE");
 23eac20:	4898      	ldr	r0, [pc, #608]	; (23eae84 <_Z17I2C_Check_Sensorsv+0x2c8>)
          BMX_2_exists = true;
 23eac22:	702b      	strb	r3, [r5, #0]
        }        
      }
      else {
         if (bm32.begin_I2C(BMX_ADDRESS_2)) { 
          BMX_2_exists = true;
          Output ("BM32 ONLINE");
 23eac24:	f7fd fe94 	bl	23e8950 <_Z6OutputPKc>
          SystemStatusBits &= ~SSB_BMX_2; // Turn Off Bit
 23eac28:	4a92      	ldr	r2, [pc, #584]	; (23eae74 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23eac2a:	6813      	ldr	r3, [r2, #0]
 23eac2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  else {
    // Sensor offline but we our state has it online
    if (BMX_2_exists == true) {
      BMX_2_exists = false;
      Output ("BMX2 OFFLINE");
      SystemStatusBits |= SSB_BMX_2;  // Turn On Bit 
 23eac30:	6013      	str	r3, [r2, #0]
    }    
  }

  // HTU21DF Humidity & Temp Sensor
  if (I2C_Device_Exist (HTU21DF_I2CADDR)) {
 23eac32:	2040      	movs	r0, #64	; 0x40
 23eac34:	f7fd fc82 	bl	23e853c <_Z16I2C_Device_Existh>
 23eac38:	4c93      	ldr	r4, [pc, #588]	; (23eae88 <_Z17I2C_Check_Sensorsv+0x2cc>)
    // Sensor online but our state had it offline
    if (HTU21DF_exists == false) {
 23eac3a:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (HTU21DF_I2CADDR)) {
 23eac3c:	2800      	cmp	r0, #0
 23eac3e:	f000 8105 	beq.w	23eae4c <_Z17I2C_Check_Sensorsv+0x290>
    if (HTU21DF_exists == false) {
 23eac42:	b983      	cbnz	r3, 23eac66 <_Z17I2C_Check_Sensorsv+0xaa>
      // See if we can bring sensor online
      if (htu.begin()) {
 23eac44:	f00f fb66 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23eac48:	4601      	mov	r1, r0
 23eac4a:	4890      	ldr	r0, [pc, #576]	; (23eae8c <_Z17I2C_Check_Sensorsv+0x2d0>)
 23eac4c:	f008 f9fe 	bl	23f304c <_ZN16Adafruit_HTU21DF5beginEP7TwoWire>
 23eac50:	b148      	cbz	r0, 23eac66 <_Z17I2C_Check_Sensorsv+0xaa>
        HTU21DF_exists = true;
 23eac52:	2301      	movs	r3, #1
        Output ("HTU ONLINE");
 23eac54:	488e      	ldr	r0, [pc, #568]	; (23eae90 <_Z17I2C_Check_Sensorsv+0x2d4>)
        HTU21DF_exists = true;
 23eac56:	7023      	strb	r3, [r4, #0]
        Output ("HTU ONLINE");
 23eac58:	f7fd fe7a 	bl	23e8950 <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_HTU21DF; // Turn Off Bit
 23eac5c:	4a85      	ldr	r2, [pc, #532]	; (23eae74 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23eac5e:	6813      	ldr	r3, [r2, #0]
 23eac60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  else {
    // Sensor offline but we our state has it online
    if (HTU21DF_exists == true) {
      HTU21DF_exists = false;
      Output ("HTU OFFLINE");
      SystemStatusBits |= SSB_HTU21DF;  // Turn On Bit
 23eac64:	6013      	str	r3, [r2, #0]
    }   
  }
#endif

  // SI1145 UV index & IR & Visible Sensor
  if (I2C_Device_Exist (SI1145_ADDR)) {
 23eac66:	2060      	movs	r0, #96	; 0x60
 23eac68:	f7fd fc68 	bl	23e853c <_Z16I2C_Device_Existh>
 23eac6c:	4c89      	ldr	r4, [pc, #548]	; (23eae94 <_Z17I2C_Check_Sensorsv+0x2d8>)
    // Sensor online but our state had it offline
    if (SI1145_exists == false) {
 23eac6e:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (SI1145_ADDR)) {
 23eac70:	2800      	cmp	r0, #0
 23eac72:	f000 8141 	beq.w	23eaef8 <_Z17I2C_Check_Sensorsv+0x33c>
    if (SI1145_exists == false) {
 23eac76:	b98b      	cbnz	r3, 23eac9c <_Z17I2C_Check_Sensorsv+0xe0>
      // See if we can bring sensore online
      if (uv.begin()) {
 23eac78:	f00f fb4c 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23eac7c:	2160      	movs	r1, #96	; 0x60
 23eac7e:	4602      	mov	r2, r0
 23eac80:	4885      	ldr	r0, [pc, #532]	; (23eae98 <_Z17I2C_Check_Sensorsv+0x2dc>)
 23eac82:	f008 fe8b 	bl	23f399c <_ZN15Adafruit_SI11455beginEhP7TwoWire>
 23eac86:	b148      	cbz	r0, 23eac9c <_Z17I2C_Check_Sensorsv+0xe0>
        SI1145_exists = true;
 23eac88:	2301      	movs	r3, #1
        Output ("SI ONLINE");
 23eac8a:	4884      	ldr	r0, [pc, #528]	; (23eae9c <_Z17I2C_Check_Sensorsv+0x2e0>)
        SI1145_exists = true;
 23eac8c:	7023      	strb	r3, [r4, #0]
        Output ("SI ONLINE");
 23eac8e:	f7fd fe5f 	bl	23e8950 <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_SI1145; // Turn Off Bit
 23eac92:	4a78      	ldr	r2, [pc, #480]	; (23eae74 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23eac94:	6813      	ldr	r3, [r2, #0]
 23eac96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  else {
    // Sensor offline but we our state has it online
    if (SI1145_exists == true) {
      SI1145_exists = false;
      Output ("SI OFFLINE");
      SystemStatusBits |= SSB_SI1145;  // Turn On Bit
 23eac9a:	6013      	str	r3, [r2, #0]
    }   
  }

  // AS5600 Wind Direction
  if (I2C_Device_Exist (AS5600_ADR)) {
 23eac9c:	4b80      	ldr	r3, [pc, #512]	; (23eaea0 <_Z17I2C_Check_Sensorsv+0x2e4>)
 23eac9e:	7818      	ldrb	r0, [r3, #0]
 23eaca0:	f7fd fc4c 	bl	23e853c <_Z16I2C_Device_Existh>
 23eaca4:	4b7f      	ldr	r3, [pc, #508]	; (23eaea4 <_Z17I2C_Check_Sensorsv+0x2e8>)
    // Sensor online but our state had it offline
    if (AS5600_exists == false) {
 23eaca6:	781a      	ldrb	r2, [r3, #0]
  if (I2C_Device_Exist (AS5600_ADR)) {
 23eaca8:	2800      	cmp	r0, #0
 23eacaa:	f000 8131 	beq.w	23eaf10 <_Z17I2C_Check_Sensorsv+0x354>
    if (AS5600_exists == false) {
 23eacae:	b94a      	cbnz	r2, 23eacc4 <_Z17I2C_Check_Sensorsv+0x108>
      AS5600_exists = true;
 23eacb0:	2201      	movs	r2, #1
      Output ("WD ONLINE");
 23eacb2:	487d      	ldr	r0, [pc, #500]	; (23eaea8 <_Z17I2C_Check_Sensorsv+0x2ec>)
      AS5600_exists = true;
 23eacb4:	701a      	strb	r2, [r3, #0]
      Output ("WD ONLINE");
 23eacb6:	f7fd fe4b 	bl	23e8950 <_Z6OutputPKc>
      SystemStatusBits &= ~SSB_AS5600; // Turn Off Bit
 23eacba:	4a6e      	ldr	r2, [pc, #440]	; (23eae74 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23eacbc:	6813      	ldr	r3, [r2, #0]
 23eacbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  else {
    // Sensor offline but we our state has it online
    if (AS5600_exists == true) {
      AS5600_exists = false;
      Output ("WD OFFLINE");
      SystemStatusBits |= SSB_AS5600;  // Turn On Bit
 23eacc2:	6013      	str	r3, [r2, #0]
    }   
  }

  // VEML7700 Lux 
  if (I2C_Device_Exist (VEML7700_ADDRESS)) {
 23eacc4:	2010      	movs	r0, #16
 23eacc6:	f7fd fc39 	bl	23e853c <_Z16I2C_Device_Existh>
 23eacca:	4c78      	ldr	r4, [pc, #480]	; (23eaeac <_Z17I2C_Check_Sensorsv+0x2f0>)
    // Sensor online but our state had it offline
    if (VEML7700_exists == false) {
 23eaccc:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (VEML7700_ADDRESS)) {
 23eacce:	2800      	cmp	r0, #0
 23eacd0:	f000 812a 	beq.w	23eaf28 <_Z17I2C_Check_Sensorsv+0x36c>
    if (VEML7700_exists == false) {
 23eacd4:	b983      	cbnz	r3, 23eacf8 <_Z17I2C_Check_Sensorsv+0x13c>
      // See if we can bring sensor online
      if (veml.begin()) {
 23eacd6:	f00f fb1d 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23eacda:	4601      	mov	r1, r0
 23eacdc:	4874      	ldr	r0, [pc, #464]	; (23eaeb0 <_Z17I2C_Check_Sensorsv+0x2f4>)
 23eacde:	f009 fc54 	bl	23f458a <_ZN17Adafruit_VEML77005beginEP7TwoWire>
 23eace2:	b148      	cbz	r0, 23eacf8 <_Z17I2C_Check_Sensorsv+0x13c>
        VEML7700_exists = true;
 23eace4:	2301      	movs	r3, #1
        Output ("VLX ONLINE");
 23eace6:	4873      	ldr	r0, [pc, #460]	; (23eaeb4 <_Z17I2C_Check_Sensorsv+0x2f8>)
        VEML7700_exists = true;
 23eace8:	7023      	strb	r3, [r4, #0]
        Output ("VLX ONLINE");
 23eacea:	f7fd fe31 	bl	23e8950 <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_VLX; // Turn Off Bit
 23eacee:	4a61      	ldr	r2, [pc, #388]	; (23eae74 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23eacf0:	6813      	ldr	r3, [r2, #0]
 23eacf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
  else {
    // Sensor offline but we our state has it online
    if (VEML7700_exists == true) {
      VEML7700_exists = false;
      Output ("VLX OFFLINE");
      SystemStatusBits |= SSB_VLX;  // Turn On Bit
 23eacf6:	6013      	str	r3, [r2, #0]
    }   
  }

  // PM25AQI
  if (I2C_Device_Exist (PM25AQI_ADDRESS)) {
 23eacf8:	2012      	movs	r0, #18
 23eacfa:	f7fd fc1f 	bl	23e853c <_Z16I2C_Device_Existh>
 23eacfe:	4c6e      	ldr	r4, [pc, #440]	; (23eaeb8 <_Z17I2C_Check_Sensorsv+0x2fc>)
    // Sensor online but our state had it offline
    if (PM25AQI_exists == false) {
 23ead00:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (PM25AQI_ADDRESS)) {
 23ead02:	2800      	cmp	r0, #0
 23ead04:	f000 811c 	beq.w	23eaf40 <_Z17I2C_Check_Sensorsv+0x384>
    if (PM25AQI_exists == false) {
 23ead08:	2b00      	cmp	r3, #0
 23ead0a:	f040 8123 	bne.w	23eaf54 <_Z17I2C_Check_Sensorsv+0x398>
      // See if we can bring sensor online
      if (pmaq.begin_I2C()) {
 23ead0e:	f00f fb01 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23ead12:	4601      	mov	r1, r0
 23ead14:	4869      	ldr	r0, [pc, #420]	; (23eaebc <_Z17I2C_Check_Sensorsv+0x300>)
 23ead16:	f008 fc22 	bl	23f355e <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>
 23ead1a:	2800      	cmp	r0, #0
 23ead1c:	f000 811a 	beq.w	23eaf54 <_Z17I2C_Check_Sensorsv+0x398>
        PM25AQI_exists = true;
 23ead20:	2301      	movs	r3, #1
        Output ("PM ONLINE");
 23ead22:	4867      	ldr	r0, [pc, #412]	; (23eaec0 <_Z17I2C_Check_Sensorsv+0x304>)
        PM25AQI_exists = true;
 23ead24:	7023      	strb	r3, [r4, #0]
        Output ("PM ONLINE");
 23ead26:	f7fd fe13 	bl	23e8950 <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
 23ead2a:	4a52      	ldr	r2, [pc, #328]	; (23eae74 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23ead2c:	6813      	ldr	r3, [r2, #0]
 23ead2e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 23ead32:	6013      	str	r3, [r2, #0]
      PM25AQI_exists = false;
      Output ("PM OFFLINE");
      SystemStatusBits |= SSB_PM25AQI;  // Turn On Bit
    }   
  }
}
 23ead34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pm25aqi_clear();
 23ead38:	f7ff b98c 	b.w	23ea054 <_Z13pm25aqi_clearv>
      else if (BMX_1_chip_id == BME280_BMP390_CHIP_ID) {
 23ead3c:	2a60      	cmp	r2, #96	; 0x60
 23ead3e:	d127      	bne.n	23ead90 <_Z17I2C_Check_Sensorsv+0x1d4>
        if (BMX_1_type == BMX_TYPE_BME280) {
 23ead40:	4d60      	ldr	r5, [pc, #384]	; (23eaec4 <_Z17I2C_Check_Sensorsv+0x308>)
 23ead42:	782b      	ldrb	r3, [r5, #0]
 23ead44:	2b02      	cmp	r3, #2
 23ead46:	d111      	bne.n	23ead6c <_Z17I2C_Check_Sensorsv+0x1b0>
          if (bme1.begin(BMX_ADDRESS_1)) { 
 23ead48:	f00f fae4 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23ead4c:	2177      	movs	r1, #119	; 0x77
 23ead4e:	4602      	mov	r2, r0
 23ead50:	485d      	ldr	r0, [pc, #372]	; (23eaec8 <_Z17I2C_Check_Sensorsv+0x30c>)
 23ead52:	f006 fb14 	bl	23f137e <_ZN15Adafruit_BME2805beginEhP7TwoWire>
 23ead56:	b148      	cbz	r0, 23ead6c <_Z17I2C_Check_Sensorsv+0x1b0>
            BMX_1_exists = true;
 23ead58:	2301      	movs	r3, #1
            Output ("BME1 ONLINE");
 23ead5a:	485c      	ldr	r0, [pc, #368]	; (23eaecc <_Z17I2C_Check_Sensorsv+0x310>)
            BMX_1_exists = true;
 23ead5c:	7023      	strb	r3, [r4, #0]
            Output ("BME1 ONLINE");
 23ead5e:	f7fd fdf7 	bl	23e8950 <_Z6OutputPKc>
            SystemStatusBits &= ~SSB_BMX_1; // Turn Off Bit
 23ead62:	4a44      	ldr	r2, [pc, #272]	; (23eae74 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23ead64:	6813      	ldr	r3, [r2, #0]
 23ead66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 23ead6a:	6013      	str	r3, [r2, #0]
        if (BMX_1_type == BMX_TYPE_BMP390) {
 23ead6c:	782b      	ldrb	r3, [r5, #0]
 23ead6e:	2b04      	cmp	r3, #4
 23ead70:	f47f af42 	bne.w	23eabf8 <_Z17I2C_Check_Sensorsv+0x3c>
          if (bm31.begin_I2C(BMX_ADDRESS_1)) {
 23ead74:	f00f face 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23ead78:	2177      	movs	r1, #119	; 0x77
 23ead7a:	4602      	mov	r2, r0
 23ead7c:	4854      	ldr	r0, [pc, #336]	; (23eaed0 <_Z17I2C_Check_Sensorsv+0x314>)
 23ead7e:	f007 f8f5 	bl	23f1f6c <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23ead82:	2800      	cmp	r0, #0
 23ead84:	f43f af38 	beq.w	23eabf8 <_Z17I2C_Check_Sensorsv+0x3c>
            BMX_1_exists = true;
 23ead88:	2301      	movs	r3, #1
            Output ("BMP390_1 ONLINE");
 23ead8a:	4852      	ldr	r0, [pc, #328]	; (23eaed4 <_Z17I2C_Check_Sensorsv+0x318>)
            BMX_1_exists = true;
 23ead8c:	7023      	strb	r3, [r4, #0]
            Output ("BMP390_1 ONLINE");
 23ead8e:	e72c      	b.n	23eabea <_Z17I2C_Check_Sensorsv+0x2e>
        if (bm31.begin_I2C(BMX_ADDRESS_1)) { 
 23ead90:	f00f fac0 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23ead94:	2177      	movs	r1, #119	; 0x77
 23ead96:	4602      	mov	r2, r0
 23ead98:	484d      	ldr	r0, [pc, #308]	; (23eaed0 <_Z17I2C_Check_Sensorsv+0x314>)
 23ead9a:	f007 f8e7 	bl	23f1f6c <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23ead9e:	2800      	cmp	r0, #0
 23eada0:	f43f af2a 	beq.w	23eabf8 <_Z17I2C_Check_Sensorsv+0x3c>
          BMX_1_exists = true;
 23eada4:	2301      	movs	r3, #1
          Output ("BM31 ONLINE");
 23eada6:	484c      	ldr	r0, [pc, #304]	; (23eaed8 <_Z17I2C_Check_Sensorsv+0x31c>)
          BMX_1_exists = true;
 23eada8:	7023      	strb	r3, [r4, #0]
          Output ("BM31 ONLINE");
 23eadaa:	e71e      	b.n	23eabea <_Z17I2C_Check_Sensorsv+0x2e>
    if (BMX_1_exists == true) {
 23eadac:	2b00      	cmp	r3, #0
 23eadae:	f43f af23 	beq.w	23eabf8 <_Z17I2C_Check_Sensorsv+0x3c>
      BMX_1_exists = false;
 23eadb2:	7020      	strb	r0, [r4, #0]
      Output ("BMX1 OFFLINE");
 23eadb4:	4849      	ldr	r0, [pc, #292]	; (23eaedc <_Z17I2C_Check_Sensorsv+0x320>)
 23eadb6:	f7fd fdcb 	bl	23e8950 <_Z6OutputPKc>
      SystemStatusBits |= SSB_BMX_1;  // Turn On Bit 
 23eadba:	4a2e      	ldr	r2, [pc, #184]	; (23eae74 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23eadbc:	6813      	ldr	r3, [r2, #0]
 23eadbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 23eadc2:	e718      	b.n	23eabf6 <_Z17I2C_Check_Sensorsv+0x3a>
      else if (BMX_2_chip_id == BME280_BMP390_CHIP_ID) {
 23eadc4:	2a60      	cmp	r2, #96	; 0x60
 23eadc6:	d127      	bne.n	23eae18 <_Z17I2C_Check_Sensorsv+0x25c>
        if (BMX_2_type == BMX_TYPE_BME280) {
 23eadc8:	4e45      	ldr	r6, [pc, #276]	; (23eaee0 <_Z17I2C_Check_Sensorsv+0x324>)
 23eadca:	7833      	ldrb	r3, [r6, #0]
 23eadcc:	2b02      	cmp	r3, #2
 23eadce:	d111      	bne.n	23eadf4 <_Z17I2C_Check_Sensorsv+0x238>
          if (bme1.begin(BMX_ADDRESS_2)) { 
 23eadd0:	f00f faa0 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23eadd4:	2176      	movs	r1, #118	; 0x76
 23eadd6:	4602      	mov	r2, r0
 23eadd8:	483b      	ldr	r0, [pc, #236]	; (23eaec8 <_Z17I2C_Check_Sensorsv+0x30c>)
 23eadda:	f006 fad0 	bl	23f137e <_ZN15Adafruit_BME2805beginEhP7TwoWire>
 23eadde:	b148      	cbz	r0, 23eadf4 <_Z17I2C_Check_Sensorsv+0x238>
            BMX_2_exists = true;
 23eade0:	2301      	movs	r3, #1
            Output ("BME2 ONLINE");
 23eade2:	4840      	ldr	r0, [pc, #256]	; (23eaee4 <_Z17I2C_Check_Sensorsv+0x328>)
            BMX_2_exists = true;
 23eade4:	702b      	strb	r3, [r5, #0]
            Output ("BME2 ONLINE");
 23eade6:	f7fd fdb3 	bl	23e8950 <_Z6OutputPKc>
            SystemStatusBits &= ~SSB_BMX_2; // Turn Off Bit
 23eadea:	4a22      	ldr	r2, [pc, #136]	; (23eae74 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23eadec:	6813      	ldr	r3, [r2, #0]
 23eadee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 23eadf2:	6013      	str	r3, [r2, #0]
        if (BMX_2_type == BMX_TYPE_BMP390) {
 23eadf4:	7833      	ldrb	r3, [r6, #0]
 23eadf6:	2b04      	cmp	r3, #4
 23eadf8:	f47f af1b 	bne.w	23eac32 <_Z17I2C_Check_Sensorsv+0x76>
          if (bm31.begin_I2C(BMX_ADDRESS_2)) {
 23eadfc:	f00f fa8a 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23eae00:	2176      	movs	r1, #118	; 0x76
 23eae02:	4602      	mov	r2, r0
 23eae04:	4832      	ldr	r0, [pc, #200]	; (23eaed0 <_Z17I2C_Check_Sensorsv+0x314>)
 23eae06:	f007 f8b1 	bl	23f1f6c <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23eae0a:	2800      	cmp	r0, #0
 23eae0c:	f43f af11 	beq.w	23eac32 <_Z17I2C_Check_Sensorsv+0x76>
            BMX_1_exists = true;
 23eae10:	2301      	movs	r3, #1
            Output ("BMP390_1 ONLINE");
 23eae12:	4830      	ldr	r0, [pc, #192]	; (23eaed4 <_Z17I2C_Check_Sensorsv+0x318>)
            BMX_1_exists = true;
 23eae14:	7023      	strb	r3, [r4, #0]
            Output ("BMP390_1 ONLINE");
 23eae16:	e705      	b.n	23eac24 <_Z17I2C_Check_Sensorsv+0x68>
         if (bm32.begin_I2C(BMX_ADDRESS_2)) { 
 23eae18:	f00f fa7c 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23eae1c:	2176      	movs	r1, #118	; 0x76
 23eae1e:	4602      	mov	r2, r0
 23eae20:	4831      	ldr	r0, [pc, #196]	; (23eaee8 <_Z17I2C_Check_Sensorsv+0x32c>)
 23eae22:	f007 f8a3 	bl	23f1f6c <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23eae26:	2800      	cmp	r0, #0
 23eae28:	f43f af03 	beq.w	23eac32 <_Z17I2C_Check_Sensorsv+0x76>
          BMX_2_exists = true;
 23eae2c:	2301      	movs	r3, #1
          Output ("BM32 ONLINE");
 23eae2e:	482f      	ldr	r0, [pc, #188]	; (23eaeec <_Z17I2C_Check_Sensorsv+0x330>)
          BMX_2_exists = true;
 23eae30:	702b      	strb	r3, [r5, #0]
          Output ("BM32 ONLINE");
 23eae32:	e6f7      	b.n	23eac24 <_Z17I2C_Check_Sensorsv+0x68>
    if (BMX_2_exists == true) {
 23eae34:	2b00      	cmp	r3, #0
 23eae36:	f43f aefc 	beq.w	23eac32 <_Z17I2C_Check_Sensorsv+0x76>
      BMX_2_exists = false;
 23eae3a:	7028      	strb	r0, [r5, #0]
      Output ("BMX2 OFFLINE");
 23eae3c:	482c      	ldr	r0, [pc, #176]	; (23eaef0 <_Z17I2C_Check_Sensorsv+0x334>)
 23eae3e:	f7fd fd87 	bl	23e8950 <_Z6OutputPKc>
      SystemStatusBits |= SSB_BMX_2;  // Turn On Bit 
 23eae42:	4a0c      	ldr	r2, [pc, #48]	; (23eae74 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23eae44:	6813      	ldr	r3, [r2, #0]
 23eae46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 23eae4a:	e6f1      	b.n	23eac30 <_Z17I2C_Check_Sensorsv+0x74>
    if (HTU21DF_exists == true) {
 23eae4c:	2b00      	cmp	r3, #0
 23eae4e:	f43f af0a 	beq.w	23eac66 <_Z17I2C_Check_Sensorsv+0xaa>
      HTU21DF_exists = false;
 23eae52:	7020      	strb	r0, [r4, #0]
      Output ("HTU OFFLINE");
 23eae54:	4827      	ldr	r0, [pc, #156]	; (23eaef4 <_Z17I2C_Check_Sensorsv+0x338>)
 23eae56:	f7fd fd7b 	bl	23e8950 <_Z6OutputPKc>
      SystemStatusBits |= SSB_HTU21DF;  // Turn On Bit
 23eae5a:	4a06      	ldr	r2, [pc, #24]	; (23eae74 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23eae5c:	6813      	ldr	r3, [r2, #0]
 23eae5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 23eae62:	e6ff      	b.n	23eac64 <_Z17I2C_Check_Sensorsv+0xa8>
 23eae64:	1006a31a 	.word	0x1006a31a
 23eae68:	1006a319 	.word	0x1006a319
 23eae6c:	1006ac28 	.word	0x1006ac28
 23eae70:	023fd892 	.word	0x023fd892
 23eae74:	1006a22c 	.word	0x1006a22c
 23eae78:	1006a31d 	.word	0x1006a31d
 23eae7c:	1006a31c 	.word	0x1006a31c
 23eae80:	1006ac68 	.word	0x1006ac68
 23eae84:	023fd8d3 	.word	0x023fd8d3
 23eae88:	1006a348 	.word	0x1006a348
 23eae8c:	1006aec0 	.word	0x1006aec0
 23eae90:	023fd904 	.word	0x023fd904
 23eae94:	1006a826 	.word	0x1006a826
 23eae98:	1007ac24 	.word	0x1007ac24
 23eae9c:	023fd91b 	.word	0x023fd91b
 23eaea0:	1006a19c 	.word	0x1006a19c
 23eaea4:	1006a1a0 	.word	0x1006a1a0
 23eaea8:	023fd930 	.word	0x023fd930
 23eaeac:	1006a838 	.word	0x1006a838
 23eaeb0:	1007ac2c 	.word	0x1007ac2c
 23eaeb4:	023fd945 	.word	0x023fd945
 23eaeb8:	1006a364 	.word	0x1006a364
 23eaebc:	1007aa38 	.word	0x1007aa38
 23eaec0:	023fd95c 	.word	0x023fd95c
 23eaec4:	1006a31b 	.word	0x1006a31b
 23eaec8:	1006ab78 	.word	0x1006ab78
 23eaecc:	023fd89e 	.word	0x023fd89e
 23eaed0:	1006a978 	.word	0x1006a978
 23eaed4:	023fd8aa 	.word	0x023fd8aa
 23eaed8:	023fd8ba 	.word	0x023fd8ba
 23eaedc:	023fd8c6 	.word	0x023fd8c6
 23eaee0:	1006a31e 	.word	0x1006a31e
 23eaee4:	023fd8df 	.word	0x023fd8df
 23eaee8:	1006aa78 	.word	0x1006aa78
 23eaeec:	023fd8eb 	.word	0x023fd8eb
 23eaef0:	023fd8f7 	.word	0x023fd8f7
 23eaef4:	023fd90f 	.word	0x023fd90f
    if (SI1145_exists == true) {
 23eaef8:	2b00      	cmp	r3, #0
 23eaefa:	f43f aecf 	beq.w	23eac9c <_Z17I2C_Check_Sensorsv+0xe0>
      SI1145_exists = false;
 23eaefe:	7020      	strb	r0, [r4, #0]
      Output ("SI OFFLINE");
 23eaf00:	4815      	ldr	r0, [pc, #84]	; (23eaf58 <_Z17I2C_Check_Sensorsv+0x39c>)
 23eaf02:	f7fd fd25 	bl	23e8950 <_Z6OutputPKc>
      SystemStatusBits |= SSB_SI1145;  // Turn On Bit
 23eaf06:	4a15      	ldr	r2, [pc, #84]	; (23eaf5c <_Z17I2C_Check_Sensorsv+0x3a0>)
 23eaf08:	6813      	ldr	r3, [r2, #0]
 23eaf0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 23eaf0e:	e6c4      	b.n	23eac9a <_Z17I2C_Check_Sensorsv+0xde>
    if (AS5600_exists == true) {
 23eaf10:	2a00      	cmp	r2, #0
 23eaf12:	f43f aed7 	beq.w	23eacc4 <_Z17I2C_Check_Sensorsv+0x108>
      AS5600_exists = false;
 23eaf16:	7018      	strb	r0, [r3, #0]
      Output ("WD OFFLINE");
 23eaf18:	4811      	ldr	r0, [pc, #68]	; (23eaf60 <_Z17I2C_Check_Sensorsv+0x3a4>)
 23eaf1a:	f7fd fd19 	bl	23e8950 <_Z6OutputPKc>
      SystemStatusBits |= SSB_AS5600;  // Turn On Bit
 23eaf1e:	4a0f      	ldr	r2, [pc, #60]	; (23eaf5c <_Z17I2C_Check_Sensorsv+0x3a0>)
 23eaf20:	6813      	ldr	r3, [r2, #0]
 23eaf22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 23eaf26:	e6cc      	b.n	23eacc2 <_Z17I2C_Check_Sensorsv+0x106>
    if (VEML7700_exists == true) {
 23eaf28:	2b00      	cmp	r3, #0
 23eaf2a:	f43f aee5 	beq.w	23eacf8 <_Z17I2C_Check_Sensorsv+0x13c>
      VEML7700_exists = false;
 23eaf2e:	7020      	strb	r0, [r4, #0]
      Output ("VLX OFFLINE");
 23eaf30:	480c      	ldr	r0, [pc, #48]	; (23eaf64 <_Z17I2C_Check_Sensorsv+0x3a8>)
 23eaf32:	f7fd fd0d 	bl	23e8950 <_Z6OutputPKc>
      SystemStatusBits |= SSB_VLX;  // Turn On Bit
 23eaf36:	4a09      	ldr	r2, [pc, #36]	; (23eaf5c <_Z17I2C_Check_Sensorsv+0x3a0>)
 23eaf38:	6813      	ldr	r3, [r2, #0]
 23eaf3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 23eaf3e:	e6da      	b.n	23eacf6 <_Z17I2C_Check_Sensorsv+0x13a>
    if (PM25AQI_exists == true) {
 23eaf40:	b143      	cbz	r3, 23eaf54 <_Z17I2C_Check_Sensorsv+0x398>
      PM25AQI_exists = false;
 23eaf42:	7020      	strb	r0, [r4, #0]
      Output ("PM OFFLINE");
 23eaf44:	4808      	ldr	r0, [pc, #32]	; (23eaf68 <_Z17I2C_Check_Sensorsv+0x3ac>)
 23eaf46:	f7fd fd03 	bl	23e8950 <_Z6OutputPKc>
      SystemStatusBits |= SSB_PM25AQI;  // Turn On Bit
 23eaf4a:	4a04      	ldr	r2, [pc, #16]	; (23eaf5c <_Z17I2C_Check_Sensorsv+0x3a0>)
 23eaf4c:	6813      	ldr	r3, [r2, #0]
 23eaf4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 23eaf52:	6013      	str	r3, [r2, #0]
}
 23eaf54:	bd70      	pop	{r4, r5, r6, pc}
 23eaf56:	bf00      	nop
 23eaf58:	023fd925 	.word	0x023fd925
 23eaf5c:	1006a22c 	.word	0x1006a22c
 23eaf60:	023fd93a 	.word	0x023fd93a
 23eaf64:	023fd950 	.word	0x023fd950
 23eaf68:	023fd746 	.word	0x023fd746

023eaf6c <_Z22EEPROM_ChecksumComputev>:
 *=======================================================================================================================
 */
unsigned long EEPROM_ChecksumCompute() {
  unsigned long checksum=0;

  checksum += (unsigned long) eeprom.rgt1;
 23eaf6c:	4910      	ldr	r1, [pc, #64]	; (23eafb0 <_Z22EEPROM_ChecksumComputev+0x44>)
 23eaf6e:	edd1 7a00 	vldr	s15, [r1]
 23eaf72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23eaf76:	ee17 0a90 	vmov	r0, s15
  checksum += (unsigned long) eeprom.rgp1;
 23eaf7a:	edd1 7a01 	vldr	s15, [r1, #4]
 23eaf7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23eaf82:	ee17 2a90 	vmov	r2, s15
  checksum += (unsigned long) eeprom.rgt2;
 23eaf86:	edd1 7a02 	vldr	s15, [r1, #8]
 23eaf8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  checksum += (unsigned long) eeprom.rgp1;
 23eaf8e:	4410      	add	r0, r2
 23eaf90:	694a      	ldr	r2, [r1, #20]
 23eaf92:	4402      	add	r2, r0
  checksum += (unsigned long) eeprom.rgt2;
 23eaf94:	ee17 0a90 	vmov	r0, s15
  checksum += (unsigned long) eeprom.rgp2;
 23eaf98:	edd1 7a03 	vldr	s15, [r1, #12]
 23eaf9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23eafa0:	ee17 3a90 	vmov	r3, s15
 23eafa4:	4410      	add	r0, r2
 23eafa6:	4403      	add	r3, r0
  checksum += (unsigned long) eeprom.rgts;
  checksum += (unsigned long) eeprom.n2sfp;
 23eafa8:	6908      	ldr	r0, [r1, #16]
  return (checksum);
}
 23eafaa:	4418      	add	r0, r3
 23eafac:	4770      	bx	lr
 23eafae:	bf00      	nop
 23eafb0:	1006ae8c 	.word	0x1006ae8c

023eafb4 <_Z21EEPROM_ChecksumUpdatev>:
/* 
 *=======================================================================================================================
 * EEPROM_ChecksumUpdate()
 *=======================================================================================================================
 */
void EEPROM_ChecksumUpdate() {
 23eafb4:	b508      	push	{r3, lr}
  eeprom.checksum = EEPROM_ChecksumCompute();
 23eafb6:	f7ff ffd9 	bl	23eaf6c <_Z22EEPROM_ChecksumComputev>
 23eafba:	4b01      	ldr	r3, [pc, #4]	; (23eafc0 <_Z21EEPROM_ChecksumUpdatev+0xc>)
 23eafbc:	6198      	str	r0, [r3, #24]
}
 23eafbe:	bd08      	pop	{r3, pc}
 23eafc0:	1006ae8c 	.word	0x1006ae8c

023eafc4 <_Z12EEPROM_Resetl.part.0>:
 *                  Requires system clock to be valid
 *=======================================================================================================================
 */
void EEPROM_Reset(time32_t current_time) {
  if (Time.isValid()) {
    eeprom.rgt1 = 0.0;
 23eafc4:	2300      	movs	r3, #0
void EEPROM_Reset(time32_t current_time) {
 23eafc6:	b510      	push	{r4, lr}
    eeprom.rgt1 = 0.0;
 23eafc8:	4c09      	ldr	r4, [pc, #36]	; (23eaff0 <_Z12EEPROM_Resetl.part.0+0x2c>)
 23eafca:	6023      	str	r3, [r4, #0]
    eeprom.rgp1 = 0.0;
 23eafcc:	6063      	str	r3, [r4, #4]
    eeprom.rgt2 = 0.0;
 23eafce:	60a3      	str	r3, [r4, #8]
    eeprom.rgp2 = 0.0;
 23eafd0:	60e3      	str	r3, [r4, #12]
    eeprom.rgts = current_time;
    eeprom.n2sfp = 0;
 23eafd2:	2300      	movs	r3, #0
    eeprom.rgts = current_time;
 23eafd4:	6120      	str	r0, [r4, #16]
    eeprom.n2sfp = 0;
 23eafd6:	6163      	str	r3, [r4, #20]
    EEPROM_ChecksumUpdate();
 23eafd8:	f7ff ffec 	bl	23eafb4 <_Z21EEPROM_ChecksumUpdatev>
    EEPROM.put(eeprom_address, eeprom);
 23eafdc:	f00f f966 	bl	23fa2ac <_Z21__fetch_global_EEPROMv>
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        static_assert(!std::is_base_of_v<String, T>, "String class cannot be used with EEPROM, use char[] array");
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 23eafe0:	4b04      	ldr	r3, [pc, #16]	; (23eaff4 <_Z12EEPROM_Resetl.part.0+0x30>)
 23eafe2:	4621      	mov	r1, r4
  }
  else {
    Output("EEPROM RESET ERROR");
  }
}
 23eafe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23eafe8:	221c      	movs	r2, #28
 23eafea:	6818      	ldr	r0, [r3, #0]
 23eafec:	f00c bb76 	b.w	23f76dc <HAL_EEPROM_Put>
 23eaff0:	1006ae8c 	.word	0x1006ae8c
 23eaff4:	1006aea8 	.word	0x1006aea8

023eaff8 <_Z20EEPROM_ChecksumValidv>:
bool EEPROM_ChecksumValid() {
 23eaff8:	b508      	push	{r3, lr}
  unsigned long checksum = EEPROM_ChecksumCompute();
 23eaffa:	f7ff ffb7 	bl	23eaf6c <_Z22EEPROM_ChecksumComputev>
  if (checksum == eeprom.checksum) {
 23eaffe:	4b03      	ldr	r3, [pc, #12]	; (23eb00c <_Z20EEPROM_ChecksumValidv+0x14>)
 23eb000:	699b      	ldr	r3, [r3, #24]
}
 23eb002:	1a1b      	subs	r3, r3, r0
 23eb004:	4258      	negs	r0, r3
 23eb006:	4158      	adcs	r0, r3
 23eb008:	bd08      	pop	{r3, pc}
 23eb00a:	bf00      	nop
 23eb00c:	1006ae8c 	.word	0x1006ae8c

023eb010 <_Z22EEPROM_ClearRainTotalsl>:
 *=======================================================================================================================
 * EEPROM_ClearRainTotals() - Reset to default values
 *                           Requires system clock to be valid
 *=======================================================================================================================
 */
void EEPROM_ClearRainTotals(time32_t current_time) {
 23eb010:	b510      	push	{r4, lr}
 23eb012:	4604      	mov	r4, r0
  if (Time.isValid()) {
 23eb014:	f00e fe5b 	bl	23f9cce <_ZN9TimeClass7isValidEv>
 23eb018:	b120      	cbz	r0, 23eb024 <_Z22EEPROM_ClearRainTotalsl+0x14>
 23eb01a:	4620      	mov	r0, r4
    EEPROM.put(eeprom_address, eeprom);
  }
  else {
    Output("EEPROM CLEAR ERROR");
  }
}
 23eb01c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23eb020:	f7ff bfd0 	b.w	23eafc4 <_Z12EEPROM_Resetl.part.0>
    Output("EEPROM CLEAR ERROR");
 23eb024:	4802      	ldr	r0, [pc, #8]	; (23eb030 <_Z22EEPROM_ClearRainTotalsl+0x20>)
}
 23eb026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Output("EEPROM CLEAR ERROR");
 23eb02a:	f7fd bc91 	b.w	23e8950 <_Z6OutputPKc>
 23eb02e:	bf00      	nop
 23eb030:	023fd966 	.word	0x023fd966

023eb034 <_Z23EEPROM_ClearRain2Totalsv>:
 * EEPROM_ClearRain2Totals() - Reset Rain 2 Totals
 *                             Requires system clock to be valid
 *=======================================================================================================================
 */
void EEPROM_ClearRain2Totals() {
  eeprom.rgt2 = 0.0;
 23eb034:	2300      	movs	r3, #0
void EEPROM_ClearRain2Totals() {
 23eb036:	b510      	push	{r4, lr}
  eeprom.rgt2 = 0.0;
 23eb038:	4c07      	ldr	r4, [pc, #28]	; (23eb058 <_Z23EEPROM_ClearRain2Totalsv+0x24>)
 23eb03a:	60a3      	str	r3, [r4, #8]
  eeprom.rgp2 = 0.0;
 23eb03c:	60e3      	str	r3, [r4, #12]
  EEPROM_ChecksumUpdate();
 23eb03e:	f7ff ffb9 	bl	23eafb4 <_Z21EEPROM_ChecksumUpdatev>
  EEPROM.put(eeprom_address, eeprom);
 23eb042:	f00f f933 	bl	23fa2ac <_Z21__fetch_global_EEPROMv>
 23eb046:	4b05      	ldr	r3, [pc, #20]	; (23eb05c <_Z23EEPROM_ClearRain2Totalsv+0x28>)
 23eb048:	4621      	mov	r1, r4
}
 23eb04a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23eb04e:	221c      	movs	r2, #28
 23eb050:	6818      	ldr	r0, [r3, #0]
 23eb052:	f00c bb43 	b.w	23f76dc <HAL_EEPROM_Put>
 23eb056:	bf00      	nop
 23eb058:	1006ae8c 	.word	0x1006ae8c
 23eb05c:	1006aea8 	.word	0x1006aea8

023eb060 <_Z17EEPROM_Initializev>:
 *=======================================================================================================================
 * EEPROM_Initialize() - Check status of EEPROM information and determine status
 *                       Requires system clock to be valid
 *=======================================================================================================================
 */
void EEPROM_Initialize() {
 23eb060:	b570      	push	{r4, r5, r6, lr}
  if (Time.isValid()) {
 23eb062:	f00e fe34 	bl	23f9cce <_ZN9TimeClass7isValidEv>
 23eb066:	2800      	cmp	r0, #0
 23eb068:	d062      	beq.n	23eb130 <_Z17EEPROM_Initializev+0xd0>
    time32_t current_time = Time.now();
 23eb06a:	f00e fe4d 	bl	23f9d08 <_ZN9TimeClass3nowEv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 23eb06e:	4c33      	ldr	r4, [pc, #204]	; (23eb13c <_Z17EEPROM_Initializev+0xdc>)

    EEPROM.get(eeprom_address, eeprom);
 23eb070:	4e33      	ldr	r6, [pc, #204]	; (23eb140 <_Z17EEPROM_Initializev+0xe0>)
    time32_t current_time = Time.now();
 23eb072:	4605      	mov	r5, r0
    EEPROM.get(eeprom_address, eeprom);
 23eb074:	f00f f91a 	bl	23fa2ac <_Z21__fetch_global_EEPROMv>
 23eb078:	221c      	movs	r2, #28
 23eb07a:	4621      	mov	r1, r4
 23eb07c:	6830      	ldr	r0, [r6, #0]
 23eb07e:	f00c fb1f 	bl	23f76c0 <HAL_EEPROM_Get>

    if (!EEPROM_ChecksumValid()) {
 23eb082:	f7ff ffb9 	bl	23eaff8 <_Z20EEPROM_ChecksumValidv>
 23eb086:	b918      	cbnz	r0, 23eb090 <_Z17EEPROM_Initializev+0x30>
          EEPROM.put(eeprom_address, eeprom);
        }
        else {
          // if current time is before 6am and RT time before 6am 2 days ago - EEPROM has no valid data - clear EEPROM
          Output("T<6, RT<6 && RT<=6-2d - Clear");  
          EEPROM_ClearRainTotals(current_time);
 23eb088:	4628      	mov	r0, r5
 23eb08a:	f7ff ffc1 	bl	23eb010 <_Z22EEPROM_ClearRainTotalsl>
 23eb08e:	e02b      	b.n	23eb0e8 <_Z17EEPROM_Initializev+0x88>
      time32_t seconds_today        = current_time % 86400;
 23eb090:	4a2c      	ldr	r2, [pc, #176]	; (23eb144 <_Z17EEPROM_Initializev+0xe4>)
 23eb092:	fb95 f3f2 	sdiv	r3, r5, r2
 23eb096:	fb02 5313 	mls	r3, r2, r3, r5
      time32_t seconds_at_0000      = current_time - seconds_today;
 23eb09a:	1aeb      	subs	r3, r5, r3
      time32_t seconds_at_0600      = seconds_at_0000 + 21600;
 23eb09c:	f503 40a8 	add.w	r0, r3, #21504	; 0x5400
 23eb0a0:	3060      	adds	r0, #96	; 0x60
      time32_t seconds_yesterday_at_0600 = seconds_at_0600 - 86400;
 23eb0a2:	f5a3 417d 	sub.w	r1, r3, #64768	; 0xfd00
      if ((current_time > seconds_at_0600) && (eeprom.rgts > seconds_at_0600)) {
 23eb0a6:	4285      	cmp	r5, r0
 23eb0a8:	6922      	ldr	r2, [r4, #16]
      time32_t seconds_yesterday_at_0600 = seconds_at_0600 - 86400;
 23eb0aa:	f1a1 0120 	sub.w	r1, r1, #32
      if ((current_time > seconds_at_0600) && (eeprom.rgts > seconds_at_0600)) {
 23eb0ae:	dd1f      	ble.n	23eb0f0 <_Z17EEPROM_Initializev+0x90>
 23eb0b0:	4290      	cmp	r0, r2
 23eb0b2:	da03      	bge.n	23eb0bc <_Z17EEPROM_Initializev+0x5c>
        Output("T>6, RT>6 - OK");
 23eb0b4:	4824      	ldr	r0, [pc, #144]	; (23eb148 <_Z17EEPROM_Initializev+0xe8>)
          Output("T<6, RT<6 & RT>6 Yesterday - OK");
 23eb0b6:	f7fd fc4b 	bl	23e8950 <_Z6OutputPKc>
 23eb0ba:	e00b      	b.n	23eb0d4 <_Z17EEPROM_Initializev+0x74>
      else if ((current_time > seconds_at_0600) && (eeprom.rgts <= seconds_at_0600) && (eeprom.rgts > seconds_yesterday_at_0600)){
 23eb0bc:	4291      	cmp	r1, r2
 23eb0be:	da1b      	bge.n	23eb0f8 <_Z17EEPROM_Initializev+0x98>
          Output("T>6, RT<=6 &&  RT>6Y- Move");  
 23eb0c0:	4822      	ldr	r0, [pc, #136]	; (23eb14c <_Z17EEPROM_Initializev+0xec>)
 23eb0c2:	f7fd fc45 	bl	23e8950 <_Z6OutputPKc>
          eeprom.rgp1 = eeprom.rgt1;
 23eb0c6:	6823      	ldr	r3, [r4, #0]
          eeprom.rgp2 = eeprom.rgt2;
 23eb0c8:	68a2      	ldr	r2, [r4, #8]
          eeprom.rgp1 = eeprom.rgt1;
 23eb0ca:	6063      	str	r3, [r4, #4]
          eeprom.rgt1 = 0.0;
 23eb0cc:	2300      	movs	r3, #0
          eeprom.rgp2 = eeprom.rgt2;
 23eb0ce:	60e2      	str	r2, [r4, #12]
          eeprom.rgt1 = 0.0;
 23eb0d0:	6023      	str	r3, [r4, #0]
          eeprom.rgt2 = 0.0;
 23eb0d2:	60a3      	str	r3, [r4, #8]
          eeprom.rgts = current_time;
 23eb0d4:	6125      	str	r5, [r4, #16]
          EEPROM_ChecksumUpdate();
 23eb0d6:	f7ff ff6d 	bl	23eafb4 <_Z21EEPROM_ChecksumUpdatev>
          EEPROM.put(eeprom_address, eeprom);          
 23eb0da:	f00f f8e7 	bl	23fa2ac <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 23eb0de:	221c      	movs	r2, #28
 23eb0e0:	4621      	mov	r1, r4
 23eb0e2:	6830      	ldr	r0, [r6, #0]
 23eb0e4:	f00c fafa 	bl	23f76dc <HAL_EEPROM_Put>
        }
      }
    }
    eeprom_valid = true;
 23eb0e8:	2201      	movs	r2, #1
 23eb0ea:	4b19      	ldr	r3, [pc, #100]	; (23eb150 <_Z17EEPROM_Initializev+0xf0>)
 23eb0ec:	701a      	strb	r2, [r3, #0]
  }
  else {
    Output("EEPROM INIT ERROR");
  }
}
 23eb0ee:	bd70      	pop	{r4, r5, r6, pc}
        if (eeprom.rgts > seconds_yesterday_at_0600) {
 23eb0f0:	4291      	cmp	r1, r2
 23eb0f2:	da01      	bge.n	23eb0f8 <_Z17EEPROM_Initializev+0x98>
          Output("T<6, RT<6 & RT>6 Yesterday - OK");
 23eb0f4:	4817      	ldr	r0, [pc, #92]	; (23eb154 <_Z17EEPROM_Initializev+0xf4>)
 23eb0f6:	e7de      	b.n	23eb0b6 <_Z17EEPROM_Initializev+0x56>
        else if (eeprom.rgts > (seconds_yesterday_at_0600 - 84600)) { 
 23eb0f8:	f5a3 3311 	sub.w	r3, r3, #148480	; 0x24400
 23eb0fc:	f2a3 3397 	subw	r3, r3, #919	; 0x397
 23eb100:	429a      	cmp	r2, r3
 23eb102:	db11      	blt.n	23eb128 <_Z17EEPROM_Initializev+0xc8>
          Output("T<6, RT<6 && RT>6-2d - Move");  
 23eb104:	4814      	ldr	r0, [pc, #80]	; (23eb158 <_Z17EEPROM_Initializev+0xf8>)
 23eb106:	f7fd fc23 	bl	23e8950 <_Z6OutputPKc>
          eeprom.rgp1 = eeprom.rgt1;
 23eb10a:	6823      	ldr	r3, [r4, #0]
          eeprom.rgp2 = eeprom.rgt2;
 23eb10c:	68a2      	ldr	r2, [r4, #8]
          eeprom.rgp1 = eeprom.rgt1;
 23eb10e:	6063      	str	r3, [r4, #4]
          eeprom.rgt1 = 0.0;
 23eb110:	2300      	movs	r3, #0
          eeprom.rgp2 = eeprom.rgt2;
 23eb112:	60e2      	str	r2, [r4, #12]
          eeprom.rgt1 = 0.0;
 23eb114:	6023      	str	r3, [r4, #0]
          eeprom.rgt2 = 0.0;
 23eb116:	60a3      	str	r3, [r4, #8]
          eeprom.rgts = current_time;
 23eb118:	6125      	str	r5, [r4, #16]
          EEPROM_ChecksumUpdate();
 23eb11a:	f7ff ff4b 	bl	23eafb4 <_Z21EEPROM_ChecksumUpdatev>
          EEPROM.put(eeprom_address, eeprom);
 23eb11e:	f00f f8c5 	bl	23fa2ac <_Z21__fetch_global_EEPROMv>
 23eb122:	221c      	movs	r2, #28
 23eb124:	4905      	ldr	r1, [pc, #20]	; (23eb13c <_Z17EEPROM_Initializev+0xdc>)
 23eb126:	e7dc      	b.n	23eb0e2 <_Z17EEPROM_Initializev+0x82>
          Output("T<6, RT<6 && RT<=6-2d - Clear");  
 23eb128:	480c      	ldr	r0, [pc, #48]	; (23eb15c <_Z17EEPROM_Initializev+0xfc>)
 23eb12a:	f7fd fc11 	bl	23e8950 <_Z6OutputPKc>
 23eb12e:	e7ab      	b.n	23eb088 <_Z17EEPROM_Initializev+0x28>
    Output("EEPROM INIT ERROR");
 23eb130:	480b      	ldr	r0, [pc, #44]	; (23eb160 <_Z17EEPROM_Initializev+0x100>)
}
 23eb132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Output("EEPROM INIT ERROR");
 23eb136:	f7fd bc0b 	b.w	23e8950 <_Z6OutputPKc>
 23eb13a:	bf00      	nop
 23eb13c:	1006ae8c 	.word	0x1006ae8c
 23eb140:	1006aea8 	.word	0x1006aea8
 23eb144:	00015180 	.word	0x00015180
 23eb148:	023fd979 	.word	0x023fd979
 23eb14c:	023fd988 	.word	0x023fd988
 23eb150:	1006aeac 	.word	0x1006aeac
 23eb154:	023fd9a3 	.word	0x023fd9a3
 23eb158:	023fd9c3 	.word	0x023fd9c3
 23eb15c:	023fd9df 	.word	0x023fd9df
 23eb160:	023fd9fd 	.word	0x023fd9fd

023eb164 <_Z23EEPROM_UpdateRainTotalsff>:
/* 
 *=======================================================================================================================
 * EEPROM_UpdateRainTotals() - 
 *=======================================================================================================================
 */
void EEPROM_UpdateRainTotals(float rgt1, float rgt2) {
 23eb164:	b510      	push	{r4, lr}
 23eb166:	ed2d 8b02 	vpush	{d8}
  if (eeprom_valid) {
 23eb16a:	4b2f      	ldr	r3, [pc, #188]	; (23eb228 <_Z23EEPROM_UpdateRainTotalsff+0xc4>)
void EEPROM_UpdateRainTotals(float rgt1, float rgt2) {
 23eb16c:	eeb0 8a40 	vmov.f32	s16, s0
  if (eeprom_valid) {
 23eb170:	781b      	ldrb	r3, [r3, #0]
void EEPROM_UpdateRainTotals(float rgt1, float rgt2) {
 23eb172:	eef0 8a60 	vmov.f32	s17, s1
  if (eeprom_valid) {
 23eb176:	2b00      	cmp	r3, #0
 23eb178:	d053      	beq.n	23eb222 <_Z23EEPROM_UpdateRainTotalsff+0xbe>
    time32_t current_time     = Time.now();
 23eb17a:	f00e fdc5 	bl	23f9d08 <_ZN9TimeClass3nowEv>
    time32_t seconds_at_0600  = current_time - (current_time % 86400) + 21600; // time - seconds so far today + seconds to 0600
 23eb17e:	4b2b      	ldr	r3, [pc, #172]	; (23eb22c <_Z23EEPROM_UpdateRainTotalsff+0xc8>)
 23eb180:	492b      	ldr	r1, [pc, #172]	; (23eb230 <_Z23EEPROM_UpdateRainTotalsff+0xcc>)
 23eb182:	fb90 f2f3 	sdiv	r2, r0, r3
 23eb186:	fb03 0212 	mls	r2, r3, r2, r0
 23eb18a:	1a82      	subs	r2, r0, r2
 23eb18c:	f502 42a8 	add.w	r2, r2, #21504	; 0x5400
 23eb190:	3260      	adds	r2, #96	; 0x60

    if ((current_time > seconds_at_0600) && (eeprom.rgts <= seconds_at_0600)) {
 23eb192:	4290      	cmp	r0, r2
 23eb194:	4b27      	ldr	r3, [pc, #156]	; (23eb234 <_Z23EEPROM_UpdateRainTotalsff+0xd0>)
 23eb196:	dd28      	ble.n	23eb1ea <_Z23EEPROM_UpdateRainTotalsff+0x86>
 23eb198:	691c      	ldr	r4, [r3, #16]
 23eb19a:	42a2      	cmp	r2, r4
 23eb19c:	db25      	blt.n	23eb1ea <_Z23EEPROM_UpdateRainTotalsff+0x86>
      // if rgts is before 0600 then we need to move today's totals to prior day
      eeprom.rgp1 = eeprom.rgt1;
 23eb19e:	681a      	ldr	r2, [r3, #0]
      eeprom.rgt1 = 0;

      if (A4_State == A4_STATE_RAIN) {
 23eb1a0:	680c      	ldr	r4, [r1, #0]
      eeprom.rgp1 = eeprom.rgt1;
 23eb1a2:	605a      	str	r2, [r3, #4]
      eeprom.rgt1 = 0;
 23eb1a4:	2200      	movs	r2, #0
      if (A4_State == A4_STATE_RAIN) {
 23eb1a6:	2c02      	cmp	r4, #2
      eeprom.rgt1 = 0;
 23eb1a8:	601a      	str	r2, [r3, #0]
      if (A4_State == A4_STATE_RAIN) {
 23eb1aa:	d134      	bne.n	23eb216 <_Z23EEPROM_UpdateRainTotalsff+0xb2>
        eeprom.rgt2 = 0;
      }
    }

    // Only add valid rain to the total
    if (rgt1>0) {
 23eb1ac:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 23eb1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        eeprom.rgp2 = eeprom.rgt2;
 23eb1b4:	689c      	ldr	r4, [r3, #8]
        eeprom.rgt2 = 0;
 23eb1b6:	609a      	str	r2, [r3, #8]
        eeprom.rgp2 = eeprom.rgt2;
 23eb1b8:	60dc      	str	r4, [r3, #12]
    if (rgt1>0) {
 23eb1ba:	dc1b      	bgt.n	23eb1f4 <_Z23EEPROM_UpdateRainTotalsff+0x90>
      eeprom.rgt1 += rgt1;
    }
    if ((A4_State == A4_STATE_RAIN) && (rgt2>0)) {
 23eb1bc:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 23eb1c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb1c4:	dc20      	bgt.n	23eb208 <_Z23EEPROM_UpdateRainTotalsff+0xa4>
      eeprom.rgt2 += rgt2;
    }

    eeprom.rgts = current_time;
 23eb1c6:	6118      	str	r0, [r3, #16]
    EEPROM_ChecksumUpdate();
 23eb1c8:	f7ff fef4 	bl	23eafb4 <_Z21EEPROM_ChecksumUpdatev>
    EEPROM.put(eeprom_address, eeprom);
 23eb1cc:	f00f f86e 	bl	23fa2ac <_Z21__fetch_global_EEPROMv>
 23eb1d0:	4b19      	ldr	r3, [pc, #100]	; (23eb238 <_Z23EEPROM_UpdateRainTotalsff+0xd4>)
 23eb1d2:	221c      	movs	r2, #28
 23eb1d4:	6818      	ldr	r0, [r3, #0]
 23eb1d6:	4917      	ldr	r1, [pc, #92]	; (23eb234 <_Z23EEPROM_UpdateRainTotalsff+0xd0>)
 23eb1d8:	f00c fa80 	bl	23f76dc <HAL_EEPROM_Put>
    Output("EEPROM RT UPDATED");
  }
}
 23eb1dc:	ecbd 8b02 	vpop	{d8}
 23eb1e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Output("EEPROM RT UPDATED");
 23eb1e4:	4815      	ldr	r0, [pc, #84]	; (23eb23c <_Z23EEPROM_UpdateRainTotalsff+0xd8>)
 23eb1e6:	f7fd bbb3 	b.w	23e8950 <_Z6OutputPKc>
    if (rgt1>0) {
 23eb1ea:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 23eb1ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb1f2:	dd05      	ble.n	23eb200 <_Z23EEPROM_UpdateRainTotalsff+0x9c>
      eeprom.rgt1 += rgt1;
 23eb1f4:	ed93 0a00 	vldr	s0, [r3]
 23eb1f8:	ee30 8a08 	vadd.f32	s16, s0, s16
 23eb1fc:	ed83 8a00 	vstr	s16, [r3]
    if ((A4_State == A4_STATE_RAIN) && (rgt2>0)) {
 23eb200:	680a      	ldr	r2, [r1, #0]
 23eb202:	2a02      	cmp	r2, #2
 23eb204:	d1df      	bne.n	23eb1c6 <_Z23EEPROM_UpdateRainTotalsff+0x62>
 23eb206:	e7d9      	b.n	23eb1bc <_Z23EEPROM_UpdateRainTotalsff+0x58>
      eeprom.rgt2 += rgt2;
 23eb208:	edd3 0a02 	vldr	s1, [r3, #8]
 23eb20c:	ee70 8aa8 	vadd.f32	s17, s1, s17
 23eb210:	edc3 8a02 	vstr	s17, [r3, #8]
 23eb214:	e7d7      	b.n	23eb1c6 <_Z23EEPROM_UpdateRainTotalsff+0x62>
    if (rgt1>0) {
 23eb216:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 23eb21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb21e:	dce9      	bgt.n	23eb1f4 <_Z23EEPROM_UpdateRainTotalsff+0x90>
 23eb220:	e7d1      	b.n	23eb1c6 <_Z23EEPROM_UpdateRainTotalsff+0x62>
}
 23eb222:	ecbd 8b02 	vpop	{d8}
 23eb226:	bd10      	pop	{r4, pc}
 23eb228:	1006aeac 	.word	0x1006aeac
 23eb22c:	00015180 	.word	0x00015180
 23eb230:	1006a2f4 	.word	0x1006a2f4
 23eb234:	1006ae8c 	.word	0x1006ae8c
 23eb238:	1006aea8 	.word	0x1006aea8
 23eb23c:	023fda0f 	.word	0x023fda0f

023eb240 <_Z25EEPROM_SaveUnreportedRainv>:
/* 
 *=======================================================================================================================
 * EEPROM_SaveUnreportedRain() - 
 *=======================================================================================================================
 */
void EEPROM_SaveUnreportedRain() {
 23eb240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23eb242:	ed2d 8b02 	vpush	{d8}
  if (raingauge1_interrupt_count || ((A4_State == A4_STATE_RAIN) && raingauge2_interrupt_count)) {
 23eb246:	4b4e      	ldr	r3, [pc, #312]	; (23eb380 <_Z25EEPROM_SaveUnreportedRainv+0x140>)
 23eb248:	4f4e      	ldr	r7, [pc, #312]	; (23eb384 <_Z25EEPROM_SaveUnreportedRainv+0x144>)
 23eb24a:	681a      	ldr	r2, [r3, #0]
 23eb24c:	b942      	cbnz	r2, 23eb260 <_Z25EEPROM_SaveUnreportedRainv+0x20>
 23eb24e:	683a      	ldr	r2, [r7, #0]
 23eb250:	2a02      	cmp	r2, #2
 23eb252:	f040 808e 	bne.w	23eb372 <_Z25EEPROM_SaveUnreportedRainv+0x132>
 23eb256:	4a4c      	ldr	r2, [pc, #304]	; (23eb388 <_Z25EEPROM_SaveUnreportedRainv+0x148>)
 23eb258:	6812      	ldr	r2, [r2, #0]
 23eb25a:	2a00      	cmp	r2, #0
 23eb25c:	f000 8089 	beq.w	23eb372 <_Z25EEPROM_SaveUnreportedRainv+0x132>
    unsigned long rgds;     // rain gauge delta seconds, seconds since last rain gauge observation logged
    unsigned long rg2ds = 0;     // rain gauge delta seconds, seconds since last rain gauge observation logged
    float rain2 = 0.0;

    float rain = raingauge1_interrupt_count * 0.2;
 23eb260:	6818      	ldr	r0, [r3, #0]
 23eb262:	f7fb fc27 	bl	23e6ab4 <__aeabi_ui2d>
 23eb266:	a344      	add	r3, pc, #272	; (adr r3, 23eb378 <_Z25EEPROM_SaveUnreportedRainv+0x138>)
 23eb268:	e9d3 2300 	ldrd	r2, r3, [r3]
 23eb26c:	f7fb fc9c 	bl	23e6ba8 <__aeabi_dmul>
 23eb270:	f7fb ff92 	bl	23e7198 <__aeabi_d2f>
 23eb274:	ee08 0a90 	vmov	s17, r0
    rgds = (System.millis()-raingauge1_interrupt_stime)/1000;  // seconds since last rain gauge observation logged
 23eb278:	f7fd f8d2 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23eb27c:	4a43      	ldr	r2, [pc, #268]	; (23eb38c <_Z25EEPROM_SaveUnreportedRainv+0x14c>)
 23eb27e:	e9d2 3400 	ldrd	r3, r4, [r2]
 23eb282:	1ac0      	subs	r0, r0, r3
 23eb284:	eb61 0104 	sbc.w	r1, r1, r4
 23eb288:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23eb28c:	2300      	movs	r3, #0
 23eb28e:	f7fc f931 	bl	23e74f4 <__aeabi_uldivmod>
    rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
 23eb292:	eef4 8a68 	vcmp.f32	s17, s17
 23eb296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    rgds = (System.millis()-raingauge1_interrupt_stime)/1000;  // seconds since last rain gauge observation logged
 23eb29a:	4606      	mov	r6, r0
    rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
 23eb29c:	d660      	bvs.n	23eb360 <_Z25EEPROM_SaveUnreportedRainv+0x120>
 23eb29e:	ee18 0a90 	vmov	r0, s17
 23eb2a2:	f7fb fc29 	bl	23e6af8 <__aeabi_f2d>
 23eb2a6:	4604      	mov	r4, r0
 23eb2a8:	203c      	movs	r0, #60	; 0x3c
 23eb2aa:	fbb6 f0f0 	udiv	r0, r6, r0
 23eb2ae:	460d      	mov	r5, r1
 23eb2b0:	f7fb fc00 	bl	23e6ab4 <__aeabi_ui2d>
 23eb2b4:	2200      	movs	r2, #0
 23eb2b6:	4b36      	ldr	r3, [pc, #216]	; (23eb390 <_Z25EEPROM_SaveUnreportedRainv+0x150>)
 23eb2b8:	f7fb fc76 	bl	23e6ba8 <__aeabi_dmul>
 23eb2bc:	4602      	mov	r2, r0
 23eb2be:	460b      	mov	r3, r1
 23eb2c0:	4620      	mov	r0, r4
 23eb2c2:	4629      	mov	r1, r5
 23eb2c4:	f7fb ff00 	bl	23e70c8 <__aeabi_dcmpgt>
 23eb2c8:	eddf 7a32 	vldr	s15, [pc, #200]	; 23eb394 <_Z25EEPROM_SaveUnreportedRainv+0x154>
 23eb2cc:	2800      	cmp	r0, #0
 23eb2ce:	fe48 8aa7 	vseleq.f32	s17, s17, s15
    
    if (A4_State == A4_STATE_RAIN) {
 23eb2d2:	683b      	ldr	r3, [r7, #0]
 23eb2d4:	2b02      	cmp	r3, #2
 23eb2d6:	d146      	bne.n	23eb366 <_Z25EEPROM_SaveUnreportedRainv+0x126>
      rain2 = raingauge2_interrupt_count * 0.2;
 23eb2d8:	4b2b      	ldr	r3, [pc, #172]	; (23eb388 <_Z25EEPROM_SaveUnreportedRainv+0x148>)
 23eb2da:	6818      	ldr	r0, [r3, #0]
 23eb2dc:	f7fb fbea 	bl	23e6ab4 <__aeabi_ui2d>
 23eb2e0:	a325      	add	r3, pc, #148	; (adr r3, 23eb378 <_Z25EEPROM_SaveUnreportedRainv+0x138>)
 23eb2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23eb2e6:	f7fb fc5f 	bl	23e6ba8 <__aeabi_dmul>
 23eb2ea:	f7fb ff55 	bl	23e7198 <__aeabi_d2f>
 23eb2ee:	ee08 0a10 	vmov	s16, r0
      rg2ds = (System.millis()-raingauge2_interrupt_stime)/1000;  // seconds since last rain gauge observation logged
 23eb2f2:	f7fd f895 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23eb2f6:	4a28      	ldr	r2, [pc, #160]	; (23eb398 <_Z25EEPROM_SaveUnreportedRainv+0x158>)
 23eb2f8:	e9d2 3400 	ldrd	r3, r4, [r2]
 23eb2fc:	1ac0      	subs	r0, r0, r3
 23eb2fe:	eb61 0104 	sbc.w	r1, r1, r4
 23eb302:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23eb306:	2300      	movs	r3, #0
 23eb308:	f7fc f8f4 	bl	23e74f4 <__aeabi_uldivmod>
      rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
 23eb30c:	eeb4 8a48 	vcmp.f32	s16, s16
 23eb310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      rg2ds = (System.millis()-raingauge2_interrupt_stime)/1000;  // seconds since last rain gauge observation logged
 23eb314:	4606      	mov	r6, r0
      rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
 23eb316:	d629      	bvs.n	23eb36c <_Z25EEPROM_SaveUnreportedRainv+0x12c>
 23eb318:	ee18 0a10 	vmov	r0, s16
 23eb31c:	f7fb fbec 	bl	23e6af8 <__aeabi_f2d>
 23eb320:	4604      	mov	r4, r0
 23eb322:	203c      	movs	r0, #60	; 0x3c
 23eb324:	fbb6 f0f0 	udiv	r0, r6, r0
 23eb328:	460d      	mov	r5, r1
 23eb32a:	f7fb fbc3 	bl	23e6ab4 <__aeabi_ui2d>
 23eb32e:	2200      	movs	r2, #0
 23eb330:	4b17      	ldr	r3, [pc, #92]	; (23eb390 <_Z25EEPROM_SaveUnreportedRainv+0x150>)
 23eb332:	f7fb fc39 	bl	23e6ba8 <__aeabi_dmul>
 23eb336:	4602      	mov	r2, r0
 23eb338:	460b      	mov	r3, r1
 23eb33a:	4620      	mov	r0, r4
 23eb33c:	4629      	mov	r1, r5
 23eb33e:	f7fb fec3 	bl	23e70c8 <__aeabi_dcmpgt>
 23eb342:	eddf 7a14 	vldr	s15, [pc, #80]	; 23eb394 <_Z25EEPROM_SaveUnreportedRainv+0x154>
 23eb346:	2800      	cmp	r0, #0
 23eb348:	fe08 8a27 	vseleq.f32	s16, s16, s15
    }

    EEPROM_UpdateRainTotals(rain, rain2);
 23eb34c:	eef0 0a48 	vmov.f32	s1, s16
 23eb350:	eeb0 0a68 	vmov.f32	s0, s17
  }
}
 23eb354:	ecbd 8b02 	vpop	{d8}
 23eb358:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    EEPROM_UpdateRainTotals(rain, rain2);
 23eb35c:	f7ff bf02 	b.w	23eb164 <_Z23EEPROM_UpdateRainTotalsff>
    rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
 23eb360:	eddf 8a0c 	vldr	s17, [pc, #48]	; 23eb394 <_Z25EEPROM_SaveUnreportedRainv+0x154>
 23eb364:	e7b5      	b.n	23eb2d2 <_Z25EEPROM_SaveUnreportedRainv+0x92>
    float rain2 = 0.0;
 23eb366:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 23eb39c <_Z25EEPROM_SaveUnreportedRainv+0x15c>
 23eb36a:	e7ef      	b.n	23eb34c <_Z25EEPROM_SaveUnreportedRainv+0x10c>
      rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
 23eb36c:	ed9f 8a09 	vldr	s16, [pc, #36]	; 23eb394 <_Z25EEPROM_SaveUnreportedRainv+0x154>
 23eb370:	e7ec      	b.n	23eb34c <_Z25EEPROM_SaveUnreportedRainv+0x10c>
}
 23eb372:	ecbd 8b02 	vpop	{d8}
 23eb376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23eb378:	9999999a 	.word	0x9999999a
 23eb37c:	3fc99999 	.word	0x3fc99999
 23eb380:	1007aa64 	.word	0x1007aa64
 23eb384:	1006a2f4 	.word	0x1006a2f4
 23eb388:	1007aa78 	.word	0x1007aa78
 23eb38c:	1007aa70 	.word	0x1007aa70
 23eb390:	403e0000 	.word	0x403e0000
 23eb394:	c479f99a 	.word	0xc479f99a
 23eb398:	1007aa88 	.word	0x1007aa88
 23eb39c:	00000000 	.word	0x00000000

023eb3a0 <_Z13EEPROM_Updatev>:
/* 
 *=======================================================================================================================
 * EEPROM_Update() - Check status of EEPROM information and determine status
 *=======================================================================================================================
 */
void EEPROM_Update() {
 23eb3a0:	b510      	push	{r4, lr}
  if (eeprom_valid && Time.isValid()) {
 23eb3a2:	4b0d      	ldr	r3, [pc, #52]	; (23eb3d8 <_Z13EEPROM_Updatev+0x38>)
 23eb3a4:	781b      	ldrb	r3, [r3, #0]
 23eb3a6:	b1ab      	cbz	r3, 23eb3d4 <_Z13EEPROM_Updatev+0x34>
 23eb3a8:	f00e fc91 	bl	23f9cce <_ZN9TimeClass7isValidEv>
 23eb3ac:	b190      	cbz	r0, 23eb3d4 <_Z13EEPROM_Updatev+0x34>
    eeprom.rgts = Time.now();
 23eb3ae:	f00e fcab 	bl	23f9d08 <_ZN9TimeClass3nowEv>
 23eb3b2:	4c0a      	ldr	r4, [pc, #40]	; (23eb3dc <_Z13EEPROM_Updatev+0x3c>)
 23eb3b4:	6120      	str	r0, [r4, #16]
    EEPROM_ChecksumUpdate();
 23eb3b6:	f7ff fdfd 	bl	23eafb4 <_Z21EEPROM_ChecksumUpdatev>
    EEPROM.put(eeprom_address, eeprom);
 23eb3ba:	f00e ff77 	bl	23fa2ac <_Z21__fetch_global_EEPROMv>
 23eb3be:	4b08      	ldr	r3, [pc, #32]	; (23eb3e0 <_Z13EEPROM_Updatev+0x40>)
 23eb3c0:	4621      	mov	r1, r4
 23eb3c2:	6818      	ldr	r0, [r3, #0]
 23eb3c4:	221c      	movs	r2, #28
 23eb3c6:	f00c f989 	bl	23f76dc <HAL_EEPROM_Put>
    Output("EEPROM UPDATED");
  }
}
 23eb3ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Output("EEPROM UPDATED");
 23eb3ce:	4805      	ldr	r0, [pc, #20]	; (23eb3e4 <_Z13EEPROM_Updatev+0x44>)
 23eb3d0:	f7fd babe 	b.w	23e8950 <_Z6OutputPKc>
}
 23eb3d4:	bd10      	pop	{r4, pc}
 23eb3d6:	bf00      	nop
 23eb3d8:	1006aeac 	.word	0x1006aeac
 23eb3dc:	1006ae8c 	.word	0x1006ae8c
 23eb3e0:	1006aea8 	.word	0x1006aea8
 23eb3e4:	023fda21 	.word	0x023fda21

023eb3e8 <_Z11EEPROM_Dumpv>:
/* 
 *=======================================================================================================================
 * EEPROM_Dump() - 
 *=======================================================================================================================
 */
void EEPROM_Dump() {
 23eb3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23eb3ea:	ed2d 8b02 	vpush	{d8}
  size_t EEPROM_length = EEPROM.length();
 23eb3ee:	f00e ff5d 	bl	23fa2ac <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }
 23eb3f2:	f00c f957 	bl	23f76a4 <HAL_EEPROM_Length>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 23eb3f6:	4d4e      	ldr	r5, [pc, #312]	; (23eb530 <_Z11EEPROM_Dumpv+0x148>)
    uint16_t length()                    { return HAL_EEPROM_Length(); }
 23eb3f8:	4604      	mov	r4, r0

  EEPROM.get(eeprom_address, eeprom);
 23eb3fa:	f00e ff57 	bl	23fa2ac <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 23eb3fe:	4b4d      	ldr	r3, [pc, #308]	; (23eb534 <_Z11EEPROM_Dumpv+0x14c>)
 23eb400:	4629      	mov	r1, r5
 23eb402:	6818      	ldr	r0, [r3, #0]
 23eb404:	221c      	movs	r2, #28
 23eb406:	f00c f95b 	bl	23f76c0 <HAL_EEPROM_Get>

  unsigned long checksum = EEPROM_ChecksumCompute();
 23eb40a:	f7ff fdaf 	bl	23eaf6c <_Z22EEPROM_ChecksumComputev>

  Output("EEPROM DUMP");

  sprintf (msgbuf, " LEN:%d", EEPROM_length);
 23eb40e:	4e4a      	ldr	r6, [pc, #296]	; (23eb538 <_Z11EEPROM_Dumpv+0x150>)
  unsigned long checksum = EEPROM_ChecksumCompute();
 23eb410:	4607      	mov	r7, r0
  Output("EEPROM DUMP");
 23eb412:	484a      	ldr	r0, [pc, #296]	; (23eb53c <_Z11EEPROM_Dumpv+0x154>)
 23eb414:	f7fd fa9c 	bl	23e8950 <_Z6OutputPKc>
  sprintf (msgbuf, " LEN:%d", EEPROM_length);
 23eb418:	b2a2      	uxth	r2, r4
 23eb41a:	4949      	ldr	r1, [pc, #292]	; (23eb540 <_Z11EEPROM_Dumpv+0x158>)
 23eb41c:	4630      	mov	r0, r6
 23eb41e:	f00c fef1 	bl	23f8204 <sprintf>
  Output(msgbuf);
 23eb422:	4630      	mov	r0, r6
 23eb424:	f7fd fa94 	bl	23e8950 <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " RT1:%d.%02d", 
    (int)eeprom.rgt1, (int)(eeprom.rgt1*100)%100); 
 23eb428:	ed9f 8a46 	vldr	s16, [pc, #280]	; 23eb544 <_Z11EEPROM_Dumpv+0x15c>
 23eb42c:	ed95 7a00 	vldr	s14, [r5]
 23eb430:	ee67 7a08 	vmul.f32	s15, s14, s16
 23eb434:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  sprintf (Buffer32Bytes, " RT1:%d.%02d", 
 23eb438:	2664      	movs	r6, #100	; 0x64
    (int)eeprom.rgt1, (int)(eeprom.rgt1*100)%100); 
 23eb43a:	ee17 3a90 	vmov	r3, s15
  sprintf (Buffer32Bytes, " RT1:%d.%02d", 
 23eb43e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 23eb442:	fb93 f2f6 	sdiv	r2, r3, r6
 23eb446:	4c40      	ldr	r4, [pc, #256]	; (23eb548 <_Z11EEPROM_Dumpv+0x160>)
 23eb448:	fb06 3312 	mls	r3, r6, r2, r3
 23eb44c:	493f      	ldr	r1, [pc, #252]	; (23eb54c <_Z11EEPROM_Dumpv+0x164>)
 23eb44e:	ee17 2a90 	vmov	r2, s15
 23eb452:	4620      	mov	r0, r4
 23eb454:	f00c fed6 	bl	23f8204 <sprintf>
  Output (Buffer32Bytes);
 23eb458:	4620      	mov	r0, r4
 23eb45a:	f7fd fa79 	bl	23e8950 <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " RP1:%d.%02d", 
  (int)eeprom.rgp1, (int)(eeprom.rgp1*100)%100); 
 23eb45e:	ed95 7a01 	vldr	s14, [r5, #4]
 23eb462:	ee67 7a08 	vmul.f32	s15, s14, s16
 23eb466:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23eb46a:	ee17 3a90 	vmov	r3, s15
  sprintf (Buffer32Bytes, " RP1:%d.%02d", 
 23eb46e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 23eb472:	fb93 f2f6 	sdiv	r2, r3, r6
 23eb476:	4936      	ldr	r1, [pc, #216]	; (23eb550 <_Z11EEPROM_Dumpv+0x168>)
 23eb478:	fb06 3312 	mls	r3, r6, r2, r3
 23eb47c:	4620      	mov	r0, r4
 23eb47e:	ee17 2a90 	vmov	r2, s15
 23eb482:	f00c febf 	bl	23f8204 <sprintf>
  Output (Buffer32Bytes);
 23eb486:	4620      	mov	r0, r4
 23eb488:	f7fd fa62 	bl	23e8950 <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " RT2:%d.%02d", 
    (int)eeprom.rgt2, (int)(eeprom.rgt2*100)%100); 
 23eb48c:	ed95 7a02 	vldr	s14, [r5, #8]
 23eb490:	ee67 7a08 	vmul.f32	s15, s14, s16
 23eb494:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23eb498:	ee17 3a90 	vmov	r3, s15
  sprintf (Buffer32Bytes, " RT2:%d.%02d", 
 23eb49c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 23eb4a0:	fb93 f2f6 	sdiv	r2, r3, r6
 23eb4a4:	492b      	ldr	r1, [pc, #172]	; (23eb554 <_Z11EEPROM_Dumpv+0x16c>)
 23eb4a6:	fb06 3312 	mls	r3, r6, r2, r3
 23eb4aa:	4620      	mov	r0, r4
 23eb4ac:	ee17 2a90 	vmov	r2, s15
 23eb4b0:	f00c fea8 	bl	23f8204 <sprintf>
  Output (Buffer32Bytes);
 23eb4b4:	4620      	mov	r0, r4
 23eb4b6:	f7fd fa4b 	bl	23e8950 <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " RP2:%d.%02d", 
  (int)eeprom.rgp2, (int)(eeprom.rgp2*100)%100); 
 23eb4ba:	edd5 7a03 	vldr	s15, [r5, #12]
 23eb4be:	ee27 8a88 	vmul.f32	s16, s15, s16
 23eb4c2:	eebd 7ac8 	vcvt.s32.f32	s14, s16
 23eb4c6:	ee17 3a10 	vmov	r3, s14
  sprintf (Buffer32Bytes, " RP2:%d.%02d", 
 23eb4ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23eb4ce:	fb93 f2f6 	sdiv	r2, r3, r6
 23eb4d2:	4921      	ldr	r1, [pc, #132]	; (23eb558 <_Z11EEPROM_Dumpv+0x170>)
 23eb4d4:	fb06 3312 	mls	r3, r6, r2, r3
 23eb4d8:	4620      	mov	r0, r4
 23eb4da:	ee17 2a90 	vmov	r2, s15
 23eb4de:	f00c fe91 	bl	23f8204 <sprintf>
  Output (Buffer32Bytes);
 23eb4e2:	4620      	mov	r0, r4
 23eb4e4:	f7fd fa34 	bl	23e8950 <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " RGTS:%lu", eeprom.rgts);
 23eb4e8:	692a      	ldr	r2, [r5, #16]
 23eb4ea:	491c      	ldr	r1, [pc, #112]	; (23eb55c <_Z11EEPROM_Dumpv+0x174>)
 23eb4ec:	4620      	mov	r0, r4
 23eb4ee:	f00c fe89 	bl	23f8204 <sprintf>
  Output (Buffer32Bytes);
 23eb4f2:	4620      	mov	r0, r4
 23eb4f4:	f7fd fa2c 	bl	23e8950 <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " N2SFP:%lu", eeprom.n2sfp);
 23eb4f8:	696a      	ldr	r2, [r5, #20]
 23eb4fa:	4919      	ldr	r1, [pc, #100]	; (23eb560 <_Z11EEPROM_Dumpv+0x178>)
 23eb4fc:	4620      	mov	r0, r4
 23eb4fe:	f00c fe81 	bl	23f8204 <sprintf>
  Output (Buffer32Bytes);
 23eb502:	4620      	mov	r0, r4
 23eb504:	f7fd fa24 	bl	23e8950 <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " CS:%lu", eeprom.checksum);
 23eb508:	69aa      	ldr	r2, [r5, #24]
 23eb50a:	4916      	ldr	r1, [pc, #88]	; (23eb564 <_Z11EEPROM_Dumpv+0x17c>)
 23eb50c:	4620      	mov	r0, r4
 23eb50e:	f00c fe79 	bl	23f8204 <sprintf>
  Output (Buffer32Bytes);
 23eb512:	4620      	mov	r0, r4
 23eb514:	f7fd fa1c 	bl	23e8950 <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " CSC:%lu", checksum);
 23eb518:	463a      	mov	r2, r7
 23eb51a:	4620      	mov	r0, r4
 23eb51c:	4912      	ldr	r1, [pc, #72]	; (23eb568 <_Z11EEPROM_Dumpv+0x180>)
 23eb51e:	f00c fe71 	bl	23f8204 <sprintf>
  Output (Buffer32Bytes);
}
 23eb522:	ecbd 8b02 	vpop	{d8}
  Output (Buffer32Bytes);
 23eb526:	4620      	mov	r0, r4
}
 23eb528:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  Output (Buffer32Bytes);
 23eb52c:	f7fd ba10 	b.w	23e8950 <_Z6OutputPKc>
 23eb530:	1006ae8c 	.word	0x1006ae8c
 23eb534:	1006aea8 	.word	0x1006aea8
 23eb538:	1006f148 	.word	0x1006f148
 23eb53c:	023fda30 	.word	0x023fda30
 23eb540:	023fda3c 	.word	0x023fda3c
 23eb544:	42c80000 	.word	0x42c80000
 23eb548:	1006a31f 	.word	0x1006a31f
 23eb54c:	023fda44 	.word	0x023fda44
 23eb550:	023fda51 	.word	0x023fda51
 23eb554:	023fda5e 	.word	0x023fda5e
 23eb558:	023fda6b 	.word	0x023fda6b
 23eb55c:	023fda78 	.word	0x023fda78
 23eb560:	023fda82 	.word	0x023fda82
 23eb564:	023fda8d 	.word	0x023fda8d
 23eb568:	023fda95 	.word	0x023fda95

023eb56c <_Z13SD_initializev>:
/* 
 *=======================================================================================================================
 * SD_initialize()
 *=======================================================================================================================
 */
void SD_initialize() {
 23eb56c:	b570      	push	{r4, r5, r6, lr}
class SPISettings : public Printable {
 23eb56e:	4b37      	ldr	r3, [pc, #220]	; (23eb64c <_Z13SD_initializev+0xe0>)
 23eb570:	b08a      	sub	sp, #40	; 0x28
 23eb572:	9301      	str	r3, [sp, #4]
 23eb574:	2300      	movs	r3, #0
 23eb576:	2501      	movs	r5, #1
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
 23eb578:	4c35      	ldr	r4, [pc, #212]	; (23eb650 <_Z13SD_initializev+0xe4>)
 23eb57a:	f88d 3008 	strb.w	r3, [sp, #8]
 23eb57e:	4b35      	ldr	r3, [pc, #212]	; (23eb654 <_Z13SD_initializev+0xe8>)
 23eb580:	f504 668c 	add.w	r6, r4, #1120	; 0x460
 23eb584:	9303      	str	r3, [sp, #12]
 23eb586:	2205      	movs	r2, #5
 23eb588:	4630      	mov	r0, r6
 23eb58a:	ab01      	add	r3, sp, #4
 23eb58c:	f204 416c 	addw	r1, r4, #1132	; 0x46c
 23eb590:	f8ad 5010 	strh.w	r5, [sp, #16]
 23eb594:	f00b fbf4 	bl	23f6d80 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
 23eb598:	2800      	cmp	r0, #0
 23eb59a:	d036      	beq.n	23eb60a <_Z13SD_initializev+0x9e>
    vwd()->close();
 23eb59c:	f204 403c 	addw	r0, r4, #1084	; 0x43c
    m_blockDev = blockDev;
 23eb5a0:	6026      	str	r6, [r4, #0]
    vwd()->close();
 23eb5a2:	f00a fb41 	bl	23f5c28 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 23eb5a6:	4629      	mov	r1, r5
 23eb5a8:	4620      	mov	r0, r4
 23eb5aa:	f00b fa93 	bl	23f6ad4 <_ZN9FatVolume4initEh>
 23eb5ae:	f204 453c 	addw	r5, r4, #1084	; 0x43c
 23eb5b2:	4601      	mov	r1, r0
 23eb5b4:	b320      	cbz	r0, 23eb600 <_Z13SD_initializev+0x94>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 23eb5b6:	4926      	ldr	r1, [pc, #152]	; (23eb650 <_Z13SD_initializev+0xe4>)
 23eb5b8:	f201 403c 	addw	r0, r1, #1084	; 0x43c
 23eb5bc:	f00a f96b 	bl	23f5896 <_ZN7FatFile8openRootEP9FatVolume>
 23eb5c0:	b318      	cbz	r0, 23eb60a <_Z13SD_initializev+0x9e>
    if (!dir->isDir()) {
 23eb5c2:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
 23eb5c6:	f013 0f70 	tst.w	r3, #112	; 0x70
 23eb5ca:	d01e      	beq.n	23eb60a <_Z13SD_initializev+0x9e>
    m_cwd = dir;
 23eb5cc:	4b22      	ldr	r3, [pc, #136]	; (23eb658 <_Z13SD_initializev+0xec>)
    return vwd()->exists(path);
 23eb5ce:	4923      	ldr	r1, [pc, #140]	; (23eb65c <_Z13SD_initializev+0xf0>)
 23eb5d0:	4823      	ldr	r0, [pc, #140]	; (23eb660 <_Z13SD_initializev+0xf4>)
 23eb5d2:	601d      	str	r5, [r3, #0]
 23eb5d4:	f7fc ff86 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
    Output ("SD:NF");
    SystemStatusBits |= SSB_SD;
    delay (5000);
  }
  else {
    if (!SD.exists(SD_obsdir)) {
 23eb5d8:	2800      	cmp	r0, #0
 23eb5da:	d132      	bne.n	23eb642 <_Z13SD_initializev+0xd6>
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 23eb5dc:	9001      	str	r0, [sp, #4]
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
 23eb5de:	2301      	movs	r3, #1
 23eb5e0:	4a1e      	ldr	r2, [pc, #120]	; (23eb65c <_Z13SD_initializev+0xf0>)
 23eb5e2:	491f      	ldr	r1, [pc, #124]	; (23eb660 <_Z13SD_initializev+0xf4>)
 23eb5e4:	a801      	add	r0, sp, #4
 23eb5e6:	f00a fbfa 	bl	23f5dde <_ZN7FatFile5mkdirEPS_PKcb>
      if (SD.mkdir(SD_obsdir)) {
 23eb5ea:	b1e8      	cbz	r0, 23eb628 <_Z13SD_initializev+0xbc>
        Output ("SD:MKDIR OBS OK");
 23eb5ec:	481d      	ldr	r0, [pc, #116]	; (23eb664 <_Z13SD_initializev+0xf8>)
 23eb5ee:	f7fd f9af 	bl	23e8950 <_Z6OutputPKc>
        Output ("SD:Online");
 23eb5f2:	481d      	ldr	r0, [pc, #116]	; (23eb668 <_Z13SD_initializev+0xfc>)
        SystemStatusBits |= SSB_SD;  // Turn On Bit     
      } 
    }
    else {
      Output ("SD:Online");
      Output ("SD:OBS DIR Exists");
 23eb5f4:	f7fd f9ac 	bl	23e8950 <_Z6OutputPKc>
      SD_exists = true;
 23eb5f8:	2201      	movs	r2, #1
 23eb5fa:	4b1c      	ldr	r3, [pc, #112]	; (23eb66c <_Z13SD_initializev+0x100>)
 23eb5fc:	701a      	strb	r2, [r3, #0]
    }
  }
}
 23eb5fe:	e01e      	b.n	23eb63e <_Z13SD_initializev+0xd2>
    return (part ? init(part) : init(1) || init(0))
 23eb600:	4620      	mov	r0, r4
 23eb602:	f00b fa67 	bl	23f6ad4 <_ZN9FatVolume4initEh>
 23eb606:	2800      	cmp	r0, #0
 23eb608:	d1d5      	bne.n	23eb5b6 <_Z13SD_initializev+0x4a>
    Output ("SD:NF");
 23eb60a:	4819      	ldr	r0, [pc, #100]	; (23eb670 <_Z13SD_initializev+0x104>)
 23eb60c:	f7fd f9a0 	bl	23e8950 <_Z6OutputPKc>
    delay (5000);
 23eb610:	f241 3088 	movw	r0, #5000	; 0x1388
    SystemStatusBits |= SSB_SD;
 23eb614:	4a17      	ldr	r2, [pc, #92]	; (23eb674 <_Z13SD_initializev+0x108>)
 23eb616:	6813      	ldr	r3, [r2, #0]
 23eb618:	f043 0302 	orr.w	r3, r3, #2
 23eb61c:	6013      	str	r3, [r2, #0]
}
 23eb61e:	b00a      	add	sp, #40	; 0x28
 23eb620:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    delay (5000);
 23eb624:	f00c be7a 	b.w	23f831c <delay>
        Output ("SD:MKDIR OBS ERR");
 23eb628:	4813      	ldr	r0, [pc, #76]	; (23eb678 <_Z13SD_initializev+0x10c>)
 23eb62a:	f7fd f991 	bl	23e8950 <_Z6OutputPKc>
        Output ("SD:Offline");
 23eb62e:	4813      	ldr	r0, [pc, #76]	; (23eb67c <_Z13SD_initializev+0x110>)
 23eb630:	f7fd f98e 	bl	23e8950 <_Z6OutputPKc>
        SystemStatusBits |= SSB_SD;  // Turn On Bit     
 23eb634:	4a0f      	ldr	r2, [pc, #60]	; (23eb674 <_Z13SD_initializev+0x108>)
 23eb636:	6813      	ldr	r3, [r2, #0]
 23eb638:	f043 0302 	orr.w	r3, r3, #2
 23eb63c:	6013      	str	r3, [r2, #0]
}
 23eb63e:	b00a      	add	sp, #40	; 0x28
 23eb640:	bd70      	pop	{r4, r5, r6, pc}
      Output ("SD:Online");
 23eb642:	4809      	ldr	r0, [pc, #36]	; (23eb668 <_Z13SD_initializev+0xfc>)
 23eb644:	f7fd f984 	bl	23e8950 <_Z6OutputPKc>
      Output ("SD:OBS DIR Exists");
 23eb648:	480d      	ldr	r0, [pc, #52]	; (23eb680 <_Z13SD_initializev+0x114>)
 23eb64a:	e7d3      	b.n	23eb5f4 <_Z13SD_initializev+0x88>
 23eb64c:	023fea50 	.word	0x023fea50
 23eb650:	1006a368 	.word	0x1006a368
 23eb654:	02faf080 	.word	0x02faf080
 23eb658:	1007aea8 	.word	0x1007aea8
 23eb65c:	1006a210 	.word	0x1006a210
 23eb660:	1006a7a4 	.word	0x1006a7a4
 23eb664:	023fdaa4 	.word	0x023fdaa4
 23eb668:	023fdab4 	.word	0x023fdab4
 23eb66c:	1006a7ec 	.word	0x1006a7ec
 23eb670:	023fda9e 	.word	0x023fda9e
 23eb674:	1006a22c 	.word	0x1006a22c
 23eb678:	023fdabe 	.word	0x023fdabe
 23eb67c:	023fdacf 	.word	0x023fdacf
 23eb680:	023fdada 	.word	0x023fdada

023eb684 <_Z17SD_LogObservationPc>:
/* 
 *=======================================================================================================================
 * SD_LogObservation()
 *=======================================================================================================================
 */
void SD_LogObservation(char *observations) {
 23eb684:	b570      	push	{r4, r5, r6, lr}
 23eb686:	b0a4      	sub	sp, #144	; 0x90
 23eb688:	4606      	mov	r6, r0
  char SD_logfile[24];
  File fp;
 23eb68a:	a80a      	add	r0, sp, #40	; 0x28
 23eb68c:	f7fc ff4a 	bl	23e8524 <_ZN4FileC1Ev>

  if (!SD_exists) {
 23eb690:	4b24      	ldr	r3, [pc, #144]	; (23eb724 <_Z17SD_LogObservationPc+0xa0>)
 23eb692:	781b      	ldrb	r3, [r3, #0]
 23eb694:	2b00      	cmp	r3, #0
 23eb696:	d03a      	beq.n	23eb70e <_Z17SD_LogObservationPc+0x8a>
    return;
  }

  if (!Time.isValid()) {
 23eb698:	f00e fb19 	bl	23f9cce <_ZN9TimeClass7isValidEv>
 23eb69c:	2800      	cmp	r0, #0
 23eb69e:	d036      	beq.n	23eb70e <_Z17SD_LogObservationPc+0x8a>
    return;
  }
  
  sprintf (SD_logfile, "%s/%4d%02d%02d.log", SD_obsdir, Time.year(), Time.month(), Time.day());
 23eb6a0:	f00e fb7a 	bl	23f9d98 <_ZN9TimeClass4yearEv>
 23eb6a4:	9003      	str	r0, [sp, #12]
 23eb6a6:	f00e fb6f 	bl	23f9d88 <_ZN9TimeClass5monthEv>
 23eb6aa:	4604      	mov	r4, r0
 23eb6ac:	f00e fb60 	bl	23f9d70 <_ZN9TimeClass3dayEv>
 23eb6b0:	9b03      	ldr	r3, [sp, #12]
 23eb6b2:	e9cd 4000 	strd	r4, r0, [sp]
 23eb6b6:	4a1c      	ldr	r2, [pc, #112]	; (23eb728 <_Z17SD_LogObservationPc+0xa4>)
 23eb6b8:	491c      	ldr	r1, [pc, #112]	; (23eb72c <_Z17SD_LogObservationPc+0xa8>)
 23eb6ba:	a804      	add	r0, sp, #16
 23eb6bc:	f00c fda2 	bl	23f8204 <sprintf>
    File tmpFile;
 23eb6c0:	a817      	add	r0, sp, #92	; 0x5c
 23eb6c2:	f7fc ff2f 	bl	23e8524 <_ZN4FileC1Ev>
class File : public FatFile, public Stream {
 23eb6c6:	ad0e      	add	r5, sp, #56	; 0x38
    tmpFile.open(vwd(), path, oflag);
 23eb6c8:	f244 2302 	movw	r3, #16898	; 0x4202
 23eb6cc:	4918      	ldr	r1, [pc, #96]	; (23eb730 <_Z17SD_LogObservationPc+0xac>)
 23eb6ce:	aa04      	add	r2, sp, #16
 23eb6d0:	a81b      	add	r0, sp, #108	; 0x6c
 23eb6d2:	ac1b      	add	r4, sp, #108	; 0x6c
 23eb6d4:	f00a faaf 	bl	23f5c36 <_ZN7FatFile4openEPS_PKci>
 23eb6d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23eb6da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23eb6dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23eb6de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23eb6e0:	6823      	ldr	r3, [r4, #0]
 23eb6e2:	4c14      	ldr	r4, [pc, #80]	; (23eb734 <_Z17SD_LogObservationPc+0xb0>)
 23eb6e4:	602b      	str	r3, [r5, #0]
class Print
 23eb6e6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 23eb6e8:	930b      	str	r3, [sp, #44]	; 0x2c
class Stream : public Print
 23eb6ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 23eb6ec:	930c      	str	r3, [sp, #48]	; 0x30
 23eb6ee:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 23eb6f0:	930d      	str	r3, [sp, #52]	; 0x34
  
  fp = SD.open(SD_logfile, FILE_WRITE); 
  if (fp) {
 23eb6f2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 23eb6f6:	b163      	cbz	r3, 23eb712 <_Z17SD_LogObservationPc+0x8e>
    fp.println(observations);
 23eb6f8:	4631      	mov	r1, r6
 23eb6fa:	a80a      	add	r0, sp, #40	; 0x28
 23eb6fc:	f00e f80c 	bl	23f9718 <_ZN5Print7printlnEPKc>
    fp.close();
 23eb700:	a80e      	add	r0, sp, #56	; 0x38
 23eb702:	f00a fa91 	bl	23f5c28 <_ZN7FatFile5closeEv>
    SystemStatusBits &= ~SSB_SD;  // Turn Off Bit
 23eb706:	6823      	ldr	r3, [r4, #0]
 23eb708:	f023 0302 	bic.w	r3, r3, #2
 23eb70c:	6023      	str	r3, [r4, #0]
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
    Output ("SD:Open(Log)ERR");
    // At thins point we could set SD_exists to false and/or set a status bit to report it
    // sd_initialize();  // Reports SD NOT Found. Library bug with SD
  }
}
 23eb70e:	b024      	add	sp, #144	; 0x90
 23eb710:	bd70      	pop	{r4, r5, r6, pc}
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23eb712:	6823      	ldr	r3, [r4, #0]
    Output ("SD:Open(Log)ERR");
 23eb714:	4808      	ldr	r0, [pc, #32]	; (23eb738 <_Z17SD_LogObservationPc+0xb4>)
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23eb716:	f043 0302 	orr.w	r3, r3, #2
 23eb71a:	6023      	str	r3, [r4, #0]
    Output ("SD:Open(Log)ERR");
 23eb71c:	f7fd f918 	bl	23e8950 <_Z6OutputPKc>
    virtual ~Print() {}
 23eb720:	e7f5      	b.n	23eb70e <_Z17SD_LogObservationPc+0x8a>
 23eb722:	bf00      	nop
 23eb724:	1006a7ec 	.word	0x1006a7ec
 23eb728:	1006a210 	.word	0x1006a210
 23eb72c:	023fdaec 	.word	0x023fdaec
 23eb730:	1006a7a4 	.word	0x1006a7a4
 23eb734:	1006a22c 	.word	0x1006a22c
 23eb738:	023fdaff 	.word	0x023fdaff

023eb73c <_Z13SD_N2S_Deletev>:
/* 
 *=======================================================================================================================
 * SD_N2S_Delete()
 *=======================================================================================================================
 */
bool SD_N2S_Delete() {
 23eb73c:	b538      	push	{r3, r4, r5, lr}
  bool result;

  if (SD_exists && SD.exists(SD_n2s_file)) {
 23eb73e:	4b17      	ldr	r3, [pc, #92]	; (23eb79c <_Z13SD_N2S_Deletev+0x60>)
 23eb740:	4c17      	ldr	r4, [pc, #92]	; (23eb7a0 <_Z13SD_N2S_Deletev+0x64>)
 23eb742:	781b      	ldrb	r3, [r3, #0]
 23eb744:	b193      	cbz	r3, 23eb76c <_Z13SD_N2S_Deletev+0x30>
    return vwd()->exists(path);
 23eb746:	4917      	ldr	r1, [pc, #92]	; (23eb7a4 <_Z13SD_N2S_Deletev+0x68>)
 23eb748:	4817      	ldr	r0, [pc, #92]	; (23eb7a8 <_Z13SD_N2S_Deletev+0x6c>)
 23eb74a:	f7fc fecb 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
 23eb74e:	b168      	cbz	r0, 23eb76c <_Z13SD_N2S_Deletev+0x30>
  *
  * \return The value true is returned for success and
  * the value false is returned for failure.
  */
  bool remove(const char* path) {
    return FatFile::remove(vwd(), path);
 23eb750:	4914      	ldr	r1, [pc, #80]	; (23eb7a4 <_Z13SD_N2S_Deletev+0x68>)
 23eb752:	4815      	ldr	r0, [pc, #84]	; (23eb7a8 <_Z13SD_N2S_Deletev+0x6c>)
 23eb754:	f00a fabb 	bl	23f5cce <_ZN7FatFile6removeEPS_PKc>
    if (SD.remove (SD_n2s_file)) {
 23eb758:	4605      	mov	r5, r0
 23eb75a:	b9b0      	cbnz	r0, 23eb78a <_Z13SD_N2S_Deletev+0x4e>
      SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
      Output ("N2S->DEL:OK");
      result = true;
    }
    else {
      Output ("N2S->DEL:ERR");
 23eb75c:	4813      	ldr	r0, [pc, #76]	; (23eb7ac <_Z13SD_N2S_Deletev+0x70>)
 23eb75e:	f7fd f8f7 	bl	23e8950 <_Z6OutputPKc>
      SystemStatusBits |= SSB_SD; // Turn On Bit
 23eb762:	6823      	ldr	r3, [r4, #0]
 23eb764:	f043 0302 	orr.w	r3, r3, #2
 23eb768:	6023      	str	r3, [r4, #0]
      result = false;
 23eb76a:	e007      	b.n	23eb77c <_Z13SD_N2S_Deletev+0x40>
    }
  }
  else {
    SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23eb76c:	6823      	ldr	r3, [r4, #0]
    Output ("N2S->DEL:NF");
 23eb76e:	4810      	ldr	r0, [pc, #64]	; (23eb7b0 <_Z13SD_N2S_Deletev+0x74>)
    SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23eb770:	f023 0310 	bic.w	r3, r3, #16
 23eb774:	6023      	str	r3, [r4, #0]
    result = true;
 23eb776:	2501      	movs	r5, #1
    Output ("N2S->DEL:NF");
 23eb778:	f7fd f8ea 	bl	23e8950 <_Z6OutputPKc>
  }
  eeprom.n2sfp = 0;
 23eb77c:	2200      	movs	r2, #0
 23eb77e:	4b0d      	ldr	r3, [pc, #52]	; (23eb7b4 <_Z13SD_N2S_Deletev+0x78>)
 23eb780:	615a      	str	r2, [r3, #20]
  EEPROM_Update();
 23eb782:	f7ff fe0d 	bl	23eb3a0 <_Z13EEPROM_Updatev>
  return (result);
}
 23eb786:	4628      	mov	r0, r5
 23eb788:	bd38      	pop	{r3, r4, r5, pc}
      SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23eb78a:	6823      	ldr	r3, [r4, #0]
      Output ("N2S->DEL:OK");
 23eb78c:	480a      	ldr	r0, [pc, #40]	; (23eb7b8 <_Z13SD_N2S_Deletev+0x7c>)
      SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23eb78e:	f023 0310 	bic.w	r3, r3, #16
 23eb792:	6023      	str	r3, [r4, #0]
      Output ("N2S->DEL:OK");
 23eb794:	f7fd f8dc 	bl	23e8950 <_Z6OutputPKc>
      result = true;
 23eb798:	e7f0      	b.n	23eb77c <_Z13SD_N2S_Deletev+0x40>
 23eb79a:	bf00      	nop
 23eb79c:	1006a7ec 	.word	0x1006a7ec
 23eb7a0:	1006a22c 	.word	0x1006a22c
 23eb7a4:	1006a1ff 	.word	0x1006a1ff
 23eb7a8:	1006a7a4 	.word	0x1006a7a4
 23eb7ac:	023fdb27 	.word	0x023fdb27
 23eb7b0:	023fdb0f 	.word	0x023fdb0f
 23eb7b4:	1006ae8c 	.word	0x1006ae8c
 23eb7b8:	023fdb1b 	.word	0x023fdb1b

023eb7bc <_Z17SD_NeedToSend_AddPc>:
/* 
 *=======================================================================================================================
 * SD_NeedToSend_Add()
 *=======================================================================================================================
 */
void SD_NeedToSend_Add(char *observation) {
 23eb7bc:	b570      	push	{r4, r5, r6, lr}
 23eb7be:	b09a      	sub	sp, #104	; 0x68
 23eb7c0:	4606      	mov	r6, r0
  File fp;
 23eb7c2:	4668      	mov	r0, sp
 23eb7c4:	f7fc feae 	bl	23e8524 <_ZN4FileC1Ev>

  if (!SD_exists) {
 23eb7c8:	4b25      	ldr	r3, [pc, #148]	; (23eb860 <_Z17SD_NeedToSend_AddPc+0xa4>)
 23eb7ca:	781b      	ldrb	r3, [r3, #0]
 23eb7cc:	2b00      	cmp	r3, #0
 23eb7ce:	d02b      	beq.n	23eb828 <_Z17SD_NeedToSend_AddPc+0x6c>
    File tmpFile;
 23eb7d0:	a80d      	add	r0, sp, #52	; 0x34
 23eb7d2:	f7fc fea7 	bl	23e8524 <_ZN4FileC1Ev>
 23eb7d6:	ad04      	add	r5, sp, #16
    tmpFile.open(vwd(), path, oflag);
 23eb7d8:	f244 2302 	movw	r3, #16898	; 0x4202
 23eb7dc:	4a21      	ldr	r2, [pc, #132]	; (23eb864 <_Z17SD_NeedToSend_AddPc+0xa8>)
 23eb7de:	4922      	ldr	r1, [pc, #136]	; (23eb868 <_Z17SD_NeedToSend_AddPc+0xac>)
 23eb7e0:	a811      	add	r0, sp, #68	; 0x44
 23eb7e2:	ac11      	add	r4, sp, #68	; 0x44
 23eb7e4:	f00a fa27 	bl	23f5c36 <_ZN7FatFile4openEPS_PKci>
 23eb7e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23eb7ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23eb7ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23eb7ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23eb7f0:	6823      	ldr	r3, [r4, #0]
 23eb7f2:	602b      	str	r3, [r5, #0]
class Print
 23eb7f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 23eb7f6:	9301      	str	r3, [sp, #4]
 23eb7f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23eb7fa:	9302      	str	r3, [sp, #8]
 23eb7fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 23eb7fe:	9303      	str	r3, [sp, #12]
    return;
  }
  
  fp = SD.open(SD_n2s_file, FILE_WRITE); // Open the file for reading and writing, starting at the end of the file.
                                         // It will be created if it doesn't already exist.
  if (fp) {  
 23eb800:	f89d 3010 	ldrb.w	r3, [sp, #16]
 23eb804:	b323      	cbz	r3, 23eb850 <_Z17SD_NeedToSend_AddPc+0x94>
    if (fp.size() > SD_n2s_max_filesz) {
 23eb806:	4b19      	ldr	r3, [pc, #100]	; (23eb86c <_Z17SD_NeedToSend_AddPc+0xb0>)
 23eb808:	681a      	ldr	r2, [r3, #0]
 23eb80a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23eb80c:	429a      	cmp	r2, r3
 23eb80e:	d20d      	bcs.n	23eb82c <_Z17SD_NeedToSend_AddPc+0x70>
      fp.close();
 23eb810:	a804      	add	r0, sp, #16
 23eb812:	f00a fa09 	bl	23f5c28 <_ZN7FatFile5closeEv>
      Output ("N2S:Full");
 23eb816:	4816      	ldr	r0, [pc, #88]	; (23eb870 <_Z17SD_NeedToSend_AddPc+0xb4>)
 23eb818:	f7fd f89a 	bl	23e8950 <_Z6OutputPKc>
      if (SD_N2S_Delete()) {
 23eb81c:	f7ff ff8e 	bl	23eb73c <_Z13SD_N2S_Deletev>
 23eb820:	b110      	cbz	r0, 23eb828 <_Z17SD_NeedToSend_AddPc+0x6c>
        // Only call ourself again if we truely deleted the file. Otherwise infinate loop.
        SD_NeedToSend_Add(observation); // Now go and log the data
 23eb822:	4630      	mov	r0, r6
 23eb824:	f7ff ffca 	bl	23eb7bc <_Z17SD_NeedToSend_AddPc>
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
    Output ("N2S:Open Error");
    // At thins point we could set SD_exists to false and/or set a status bit to report it
    // sd_initialize();  // Reports SD NOT Found. Library bug with SD
  }
}
 23eb828:	b01a      	add	sp, #104	; 0x68
 23eb82a:	bd70      	pop	{r4, r5, r6, pc}
      fp.println(observation); //Print data, followed by a carriage return and newline, to the File
 23eb82c:	4631      	mov	r1, r6
 23eb82e:	4668      	mov	r0, sp
 23eb830:	f00d ff72 	bl	23f9718 <_ZN5Print7printlnEPKc>
      fp.close();
 23eb834:	a804      	add	r0, sp, #16
 23eb836:	f00a f9f7 	bl	23f5c28 <_ZN7FatFile5closeEv>
      SystemStatusBits |= SSB_N2S; // Turn on Bit that says there are entries in the N2S File
 23eb83a:	4a0e      	ldr	r2, [pc, #56]	; (23eb874 <_Z17SD_NeedToSend_AddPc+0xb8>)
      Output ("N2S:OBS Added");
 23eb83c:	480e      	ldr	r0, [pc, #56]	; (23eb878 <_Z17SD_NeedToSend_AddPc+0xbc>)
      SystemStatusBits &= ~SSB_SD;  // Turn Off Bit
 23eb83e:	6813      	ldr	r3, [r2, #0]
 23eb840:	f023 0302 	bic.w	r3, r3, #2
      SystemStatusBits |= SSB_N2S; // Turn on Bit that says there are entries in the N2S File
 23eb844:	f043 0310 	orr.w	r3, r3, #16
 23eb848:	6013      	str	r3, [r2, #0]
    Output ("N2S:Open Error");
 23eb84a:	f7fd f881 	bl	23e8950 <_Z6OutputPKc>
 23eb84e:	e7eb      	b.n	23eb828 <_Z17SD_NeedToSend_AddPc+0x6c>
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23eb850:	4a08      	ldr	r2, [pc, #32]	; (23eb874 <_Z17SD_NeedToSend_AddPc+0xb8>)
    Output ("N2S:Open Error");
 23eb852:	480a      	ldr	r0, [pc, #40]	; (23eb87c <_Z17SD_NeedToSend_AddPc+0xc0>)
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23eb854:	6813      	ldr	r3, [r2, #0]
 23eb856:	f043 0302 	orr.w	r3, r3, #2
 23eb85a:	6013      	str	r3, [r2, #0]
    Output ("N2S:Open Error");
 23eb85c:	e7f5      	b.n	23eb84a <_Z17SD_NeedToSend_AddPc+0x8e>
 23eb85e:	bf00      	nop
 23eb860:	1006a7ec 	.word	0x1006a7ec
 23eb864:	1006a1ff 	.word	0x1006a1ff
 23eb868:	1006a7a4 	.word	0x1006a7a4
 23eb86c:	1006a20c 	.word	0x1006a20c
 23eb870:	023fdb34 	.word	0x023fdb34
 23eb874:	1006a22c 	.word	0x1006a22c
 23eb878:	023fdb3d 	.word	0x023fdb3d
 23eb87c:	023fdb4b 	.word	0x023fdb4b

023eb880 <_Z16lora_msgs_to_n2sv>:
void lora_msgs_to_n2s() {
 23eb880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (LORA_exists) {
 23eb884:	4b14      	ldr	r3, [pc, #80]	; (23eb8d8 <_Z16lora_msgs_to_n2sv+0x58>)
 23eb886:	781b      	ldrb	r3, [r3, #0]
 23eb888:	b31b      	cbz	r3, 23eb8d2 <_Z16lora_msgs_to_n2sv+0x52>
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23eb88a:	2500      	movs	r5, #0
 23eb88c:	4c13      	ldr	r4, [pc, #76]	; (23eb8dc <_Z16lora_msgs_to_n2sv+0x5c>)
        sprintf (msgbuf, "%s,%s", m->message, relay_msgtypes[m->message_type]);
 23eb88e:	4f14      	ldr	r7, [pc, #80]	; (23eb8e0 <_Z16lora_msgs_to_n2sv+0x60>)
 23eb890:	f8df 805c 	ldr.w	r8, [pc, #92]	; 23eb8f0 <_Z16lora_msgs_to_n2sv+0x70>
 23eb894:	4e13      	ldr	r6, [pc, #76]	; (23eb8e4 <_Z16lora_msgs_to_n2sv+0x64>)
      if (m->need2log) {
 23eb896:	7823      	ldrb	r3, [r4, #0]
 23eb898:	b1b3      	cbz	r3, 23eb8c8 <_Z16lora_msgs_to_n2sv+0x48>
        sprintf (msgbuf, "%s,%s", m->message, relay_msgtypes[m->message_type]);
 23eb89a:	6863      	ldr	r3, [r4, #4]
 23eb89c:	4641      	mov	r1, r8
 23eb89e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 23eb8a2:	f104 0208 	add.w	r2, r4, #8
 23eb8a6:	4630      	mov	r0, r6
 23eb8a8:	f00c fcac 	bl	23f8204 <sprintf>
        SD_NeedToSend_Add(msgbuf); // Save to N2F File
 23eb8ac:	4630      	mov	r0, r6
 23eb8ae:	f7ff ff85 	bl	23eb7bc <_Z17SD_NeedToSend_AddPc>
        lora_relay_msg_free(m);
 23eb8b2:	4620      	mov	r0, r4
 23eb8b4:	f7fd fa32 	bl	23e8d1c <_Z19lora_relay_msg_freeP18LORA_MSG_RELAY_STR>
        sprintf (Buffer32Bytes, "LoRaMsg[%d]->N2S", i);
 23eb8b8:	462a      	mov	r2, r5
 23eb8ba:	490b      	ldr	r1, [pc, #44]	; (23eb8e8 <_Z16lora_msgs_to_n2sv+0x68>)
 23eb8bc:	480b      	ldr	r0, [pc, #44]	; (23eb8ec <_Z16lora_msgs_to_n2sv+0x6c>)
 23eb8be:	f00c fca1 	bl	23f8204 <sprintf>
        Output (Buffer32Bytes);
 23eb8c2:	480a      	ldr	r0, [pc, #40]	; (23eb8ec <_Z16lora_msgs_to_n2sv+0x6c>)
 23eb8c4:	f7fd f844 	bl	23e8950 <_Z6OutputPKc>
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23eb8c8:	3501      	adds	r5, #1
 23eb8ca:	2d40      	cmp	r5, #64	; 0x40
 23eb8cc:	f504 7484 	add.w	r4, r4, #264	; 0x108
 23eb8d0:	d1e1      	bne.n	23eb896 <_Z16lora_msgs_to_n2sv+0x16>
}
 23eb8d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23eb8d6:	bf00      	nop
 23eb8d8:	1006a349 	.word	0x1006a349
 23eb8dc:	1006aee0 	.word	0x1006aee0
 23eb8e0:	1006a260 	.word	0x1006a260
 23eb8e4:	1006f148 	.word	0x1006f148
 23eb8e8:	023fdb60 	.word	0x023fdb60
 23eb8ec:	1006a31f 	.word	0x1006a31f
 23eb8f0:	023fdb5a 	.word	0x023fdb5a

023eb8f4 <_Z14lora_relay_msgPc>:
 *   INT,   Station ID
 *   INT,   Message Counter
 *   OBS    JSON Observation
 *=======================================================================================================================
 */
void lora_relay_msg(char *obs) {
 23eb8f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  int unit_id = 0;
  unsigned int message_counter = 0;
  char *message;
  char *p;

  if ((obs[0] == 'I') && (obs[1] == 'F')) {
 23eb8f6:	7802      	ldrb	r2, [r0, #0]
 23eb8f8:	7843      	ldrb	r3, [r0, #1]
 23eb8fa:	2a49      	cmp	r2, #73	; 0x49
void lora_relay_msg(char *obs) {
 23eb8fc:	b087      	sub	sp, #28
  if ((obs[0] == 'I') && (obs[1] == 'F')) {
 23eb8fe:	d133      	bne.n	23eb968 <_Z14lora_relay_msgPc+0x74>
 23eb900:	2b46      	cmp	r3, #70	; 0x46
 23eb902:	d135      	bne.n	23eb970 <_Z14lora_relay_msgPc+0x7c>
    message_type = 1;
 23eb904:	2501      	movs	r5, #1
    Output (Buffer32Bytes);
    return;
  }

  p = &obs[2]; // Start after message type 
  unit_id = atoi (strtok_r(p, ",", &p));
 23eb906:	492c      	ldr	r1, [pc, #176]	; (23eb9b8 <_Z14lora_relay_msgPc+0xc4>)
 23eb908:	aa05      	add	r2, sp, #20
  p = &obs[2]; // Start after message type 
 23eb90a:	3002      	adds	r0, #2
 23eb90c:	9005      	str	r0, [sp, #20]
  unit_id = atoi (strtok_r(p, ",", &p));
 23eb90e:	f011 fb6f 	bl	23fcff0 <strtok_r>
 23eb912:	f011 fa6f 	bl	23fcdf4 <atoi>
  message_counter = atoi (strtok_r(p, ",", &p));
 23eb916:	4928      	ldr	r1, [pc, #160]	; (23eb9b8 <_Z14lora_relay_msgPc+0xc4>)
 23eb918:	aa05      	add	r2, sp, #20
  unit_id = atoi (strtok_r(p, ",", &p));
 23eb91a:	9003      	str	r0, [sp, #12]
  message_counter = atoi (strtok_r(p, ",", &p));
 23eb91c:	9805      	ldr	r0, [sp, #20]
 23eb91e:	f011 fb67 	bl	23fcff0 <strtok_r>
 23eb922:	f011 fa67 	bl	23fcdf4 <atoi>
  message = p;

  sprintf (Buffer32Bytes, "Relay %s ID:%d CNT:%d", relay_msgtypes[message_type], unit_id, message_counter);
 23eb926:	4e25      	ldr	r6, [pc, #148]	; (23eb9bc <_Z14lora_relay_msgPc+0xc8>)
 23eb928:	9b03      	ldr	r3, [sp, #12]
 23eb92a:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 23eb92e:	4924      	ldr	r1, [pc, #144]	; (23eb9c0 <_Z14lora_relay_msgPc+0xcc>)
 23eb930:	9000      	str	r0, [sp, #0]
 23eb932:	4824      	ldr	r0, [pc, #144]	; (23eb9c4 <_Z14lora_relay_msgPc+0xd0>)
  message = p;
 23eb934:	9f05      	ldr	r7, [sp, #20]
  sprintf (Buffer32Bytes, "Relay %s ID:%d CNT:%d", relay_msgtypes[message_type], unit_id, message_counter);
 23eb936:	f00c fc65 	bl	23f8204 <sprintf>
  Output (Buffer32Bytes);
 23eb93a:	4822      	ldr	r0, [pc, #136]	; (23eb9c4 <_Z14lora_relay_msgPc+0xd0>)
 23eb93c:	f7fd f808 	bl	23e8950 <_Z6OutputPKc>
  // Output (message);

  // Locate storage index
  int idx = lora_relay_notinuse();
 23eb940:	f7fd fa02 	bl	23e8d48 <_Z19lora_relay_notinusev>

  if (idx == -1) {
 23eb944:	1c42      	adds	r2, r0, #1
  int idx = lora_relay_notinuse();
 23eb946:	4604      	mov	r4, r0
  if (idx == -1) {
 23eb948:	d11e      	bne.n	23eb988 <_Z14lora_relay_msgPc+0x94>
    Output ("LORA Relay NoSpace");
 23eb94a:	481f      	ldr	r0, [pc, #124]	; (23eb9c8 <_Z14lora_relay_msgPc+0xd4>)
 23eb94c:	f7fd f800 	bl	23e8950 <_Z6OutputPKc>

    // Dump all LoRA messages to N2S
    lora_msgs_to_n2s();  // No Space - Dump all LoRA messages to N2S, then save new message
 23eb950:	f7ff ff96 	bl	23eb880 <_Z16lora_msgs_to_n2sv>

    idx = lora_relay_notinuse(); // This better not be -1 after freeing
 23eb954:	f7fd f9f8 	bl	23e8d48 <_Z19lora_relay_notinusev>
    if (idx == -1) {
 23eb958:	1c43      	adds	r3, r0, #1
    idx = lora_relay_notinuse(); // This better not be -1 after freeing
 23eb95a:	4604      	mov	r4, r0
    if (idx == -1) {
 23eb95c:	d114      	bne.n	23eb988 <_Z14lora_relay_msgPc+0x94>
      Output ("LORA Relay MsgLost");
 23eb95e:	481b      	ldr	r0, [pc, #108]	; (23eb9cc <_Z14lora_relay_msgPc+0xd8>)
  m = &lora_msg_relay[idx]; // Lets work with a pointer and not the index
  m->need2log = true;
  m->message_type = message_type;
  strncpy (m->message, message, LORA_RELAY_MSG_LENGTH-1); // minus 1 so last byte in array will always be null
  sprintf (Buffer32Bytes, "LORA Relay %s -> Queued:%d", relay_msgtypes[message_type], idx);
  Output (Buffer32Bytes);
 23eb960:	f7fc fff6 	bl	23e8950 <_Z6OutputPKc>
}
 23eb964:	b007      	add	sp, #28
 23eb966:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((obs[0] == 'L') && (obs[1] == 'R')) {
 23eb968:	2a4c      	cmp	r2, #76	; 0x4c
 23eb96a:	d101      	bne.n	23eb970 <_Z14lora_relay_msgPc+0x7c>
 23eb96c:	2b52      	cmp	r3, #82	; 0x52
 23eb96e:	d009      	beq.n	23eb984 <_Z14lora_relay_msgPc+0x90>
    sprintf (Buffer32Bytes, "LORA Relay %c%c Unkn", obs[0], obs[1]);
 23eb970:	4917      	ldr	r1, [pc, #92]	; (23eb9d0 <_Z14lora_relay_msgPc+0xdc>)
 23eb972:	4814      	ldr	r0, [pc, #80]	; (23eb9c4 <_Z14lora_relay_msgPc+0xd0>)
 23eb974:	f00c fc46 	bl	23f8204 <sprintf>
    Output (Buffer32Bytes);
 23eb978:	4812      	ldr	r0, [pc, #72]	; (23eb9c4 <_Z14lora_relay_msgPc+0xd0>)
}
 23eb97a:	b007      	add	sp, #28
 23eb97c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    Output (Buffer32Bytes);
 23eb980:	f7fc bfe6 	b.w	23e8950 <_Z6OutputPKc>
    message_type = 2; 
 23eb984:	2502      	movs	r5, #2
 23eb986:	e7be      	b.n	23eb906 <_Z14lora_relay_msgPc+0x12>
  m->need2log = true;
 23eb988:	f44f 7384 	mov.w	r3, #264	; 0x108
 23eb98c:	2101      	movs	r1, #1
 23eb98e:	4363      	muls	r3, r4
 23eb990:	4810      	ldr	r0, [pc, #64]	; (23eb9d4 <_Z14lora_relay_msgPc+0xe0>)
 23eb992:	18c2      	adds	r2, r0, r3
 23eb994:	54c1      	strb	r1, [r0, r3]
  strncpy (m->message, message, LORA_RELAY_MSG_LENGTH-1); // minus 1 so last byte in array will always be null
 23eb996:	3308      	adds	r3, #8
 23eb998:	4639      	mov	r1, r7
  m->message_type = message_type;
 23eb99a:	6055      	str	r5, [r2, #4]
  strncpy (m->message, message, LORA_RELAY_MSG_LENGTH-1); // minus 1 so last byte in array will always be null
 23eb99c:	4418      	add	r0, r3
 23eb99e:	22ff      	movs	r2, #255	; 0xff
 23eb9a0:	f011 faeb 	bl	23fcf7a <strncpy>
  sprintf (Buffer32Bytes, "LORA Relay %s -> Queued:%d", relay_msgtypes[message_type], idx);
 23eb9a4:	4623      	mov	r3, r4
 23eb9a6:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 23eb9aa:	490b      	ldr	r1, [pc, #44]	; (23eb9d8 <_Z14lora_relay_msgPc+0xe4>)
 23eb9ac:	4805      	ldr	r0, [pc, #20]	; (23eb9c4 <_Z14lora_relay_msgPc+0xd0>)
 23eb9ae:	f00c fc29 	bl	23f8204 <sprintf>
  Output (Buffer32Bytes);
 23eb9b2:	4804      	ldr	r0, [pc, #16]	; (23eb9c4 <_Z14lora_relay_msgPc+0xd0>)
 23eb9b4:	e7d4      	b.n	23eb960 <_Z14lora_relay_msgPc+0x6c>
 23eb9b6:	bf00      	nop
 23eb9b8:	023fdb86 	.word	0x023fdb86
 23eb9bc:	1006a260 	.word	0x1006a260
 23eb9c0:	023fdb88 	.word	0x023fdb88
 23eb9c4:	1006a31f 	.word	0x1006a31f
 23eb9c8:	023fdb9e 	.word	0x023fdb9e
 23eb9cc:	023fdbb1 	.word	0x023fdbb1
 23eb9d0:	023fdb71 	.word	0x023fdb71
 23eb9d4:	1006aee0 	.word	0x1006aee0
 23eb9d8:	023fdbc4 	.word	0x023fdbc4

023eb9dc <_Z10SD_findKeyPK19__FlashStringHelperPc>:
 *  myInt_1=2
 *  myFloat_1=0.74
 * =======================================================================================================================
 */

int SD_findKey(const __FlashStringHelper * key, char * value) {
 23eb9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23eb9e0:	4607      	mov	r7, r0
 23eb9e2:	b0a6      	sub	sp, #152	; 0x98
  
  // Disable LoRA SPI0 Chip Select
  pinMode(LORA_SS, OUTPUT);
 23eb9e4:	2003      	movs	r0, #3
int SD_findKey(const __FlashStringHelper * key, char * value) {
 23eb9e6:	460e      	mov	r6, r1
  pinMode(LORA_SS, OUTPUT);
 23eb9e8:	2101      	movs	r1, #1
 23eb9ea:	f00e fc0f 	bl	23fa20c <pinMode>
  digitalWrite(LORA_SS, HIGH);
 23eb9ee:	2101      	movs	r1, #1
 23eb9f0:	2003      	movs	r0, #3
 23eb9f2:	f00e fc1c 	bl	23fa22e <digitalWrite>
    File tmpFile;
 23eb9f6:	a809      	add	r0, sp, #36	; 0x24
 23eb9f8:	f7fc fd94 	bl	23e8524 <_ZN4FileC1Ev>
    tmpFile.open(vwd(), path, oflag);
 23eb9fc:	2300      	movs	r3, #0
 23eb9fe:	4a28      	ldr	r2, [pc, #160]	; (23ebaa0 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xc4>)
 23eba00:	4928      	ldr	r1, [pc, #160]	; (23ebaa4 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xc8>)
 23eba02:	a80d      	add	r0, sp, #52	; 0x34
 23eba04:	f00a f917 	bl	23f5c36 <_ZN7FatFile4openEPS_PKci>
  
  File configFile = SD.open(CF_NAME);

  if (!configFile) {
 23eba08:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
 23eba0c:	2c00      	cmp	r4, #0
 23eba0e:	d035      	beq.n	23eba7c <_Z10SD_findKeyPK19__FlashStringHelperPc+0xa0>
 23eba10:	ab01      	add	r3, sp, #4
    return(0);
  }

  char key_string[KEY_MAX_LENGTH];
  char SD_buffer[KEY_MAX_LENGTH + VALUE_MAX_LENGTH + 1]; // 1 is = character
  int key_length = 0;
 23eba12:	2500      	movs	r5, #0
 23eba14:	4698      	mov	r8, r3
  // Flash string to string
  PGM_P keyPoiter;
  keyPoiter = reinterpret_cast<PGM_P>(key);
  byte ch;
  do {
    ch = pgm_read_byte(keyPoiter++);
 23eba16:	5d7a      	ldrb	r2, [r7, r5]
    if (ch != 0)
 23eba18:	2a00      	cmp	r2, #0
 23eba1a:	d13d      	bne.n	23eba98 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xbc>
    // WINDOWS uses CFLF = \r\n
    int buffer_length = configFile.readBytesUntil('\n', SD_buffer, LINE_MAX_LENGTH);
    if (SD_buffer[buffer_length - 1] == '\r')
      buffer_length--; // trim the \r

    if (buffer_length > (key_length + 1)) { // 1 is = character
 23eba1c:	1c6f      	adds	r7, r5, #1
  while (configFile.available()) {
 23eba1e:	a809      	add	r0, sp, #36	; 0x24
 23eba20:	f7fc fc6e 	bl	23e8300 <_ZN4File9availableEv>
 23eba24:	4604      	mov	r4, r0
 23eba26:	b328      	cbz	r0, 23eba74 <_Z10SD_findKeyPK19__FlashStringHelperPc+0x98>
    int buffer_length = configFile.readBytesUntil('\n', SD_buffer, LINE_MAX_LENGTH);
 23eba28:	233f      	movs	r3, #63	; 0x3f
 23eba2a:	aa16      	add	r2, sp, #88	; 0x58
 23eba2c:	210a      	movs	r1, #10
 23eba2e:	a809      	add	r0, sp, #36	; 0x24
 23eba30:	f00d fffd 	bl	23f9a2e <_ZN6Stream14readBytesUntilEcPcj>
 23eba34:	4604      	mov	r4, r0
    if (SD_buffer[buffer_length - 1] == '\r')
 23eba36:	1e43      	subs	r3, r0, #1
 23eba38:	aa26      	add	r2, sp, #152	; 0x98
 23eba3a:	441a      	add	r2, r3
 23eba3c:	f812 2c40 	ldrb.w	r2, [r2, #-64]
      buffer_length--; // trim the \r
 23eba40:	2a0d      	cmp	r2, #13
 23eba42:	bf08      	it	eq
 23eba44:	461c      	moveq	r4, r3
    if (buffer_length > (key_length + 1)) { // 1 is = character
 23eba46:	42a7      	cmp	r7, r4
 23eba48:	dae9      	bge.n	23eba1e <_Z10SD_findKeyPK19__FlashStringHelperPc+0x42>
      if (memcmp(SD_buffer, key_string, key_length) == 0) { // equal
 23eba4a:	462a      	mov	r2, r5
 23eba4c:	4641      	mov	r1, r8
 23eba4e:	a816      	add	r0, sp, #88	; 0x58
 23eba50:	f011 f9dc 	bl	23fce0c <memcmp>
 23eba54:	2800      	cmp	r0, #0
 23eba56:	d1e2      	bne.n	23eba1e <_Z10SD_findKeyPK19__FlashStringHelperPc+0x42>
        if (SD_buffer[key_length] == '=') {
 23eba58:	ab26      	add	r3, sp, #152	; 0x98
 23eba5a:	442b      	add	r3, r5
 23eba5c:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 23eba60:	2b3d      	cmp	r3, #61	; 0x3d
 23eba62:	d1dc      	bne.n	23eba1e <_Z10SD_findKeyPK19__FlashStringHelperPc+0x42>
          value_length = buffer_length - key_length - 1;
 23eba64:	1b64      	subs	r4, r4, r5
 23eba66:	3c01      	subs	r4, #1
          memcpy(value, SD_buffer + key_length + 1, value_length);
 23eba68:	ab16      	add	r3, sp, #88	; 0x58
 23eba6a:	4622      	mov	r2, r4
 23eba6c:	4630      	mov	r0, r6
 23eba6e:	19d9      	adds	r1, r3, r7
 23eba70:	f011 f9dc 	bl	23fce2c <memcpy>
        }
      }
    }
  }

  configFile.close();  // close the file
 23eba74:	a80d      	add	r0, sp, #52	; 0x34
 23eba76:	f00a f8d7 	bl	23f5c28 <_ZN7FatFile5closeEv>
  return value_length;
 23eba7a:	e009      	b.n	23eba90 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xb4>
    Serial.print(F("SD Card: error on opening file "));
 23eba7c:	f00e fa5a 	bl	23f9f34 <_Z16_fetch_usbserialv>
 23eba80:	4909      	ldr	r1, [pc, #36]	; (23ebaa8 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xcc>)
 23eba82:	f00d fe39 	bl	23f96f8 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println(CF_NAME);
 23eba86:	f00e fa55 	bl	23f9f34 <_Z16_fetch_usbserialv>
 23eba8a:	4905      	ldr	r1, [pc, #20]	; (23ebaa0 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xc4>)
 23eba8c:	f00d fe44 	bl	23f9718 <_ZN5Print7printlnEPKc>
}
 23eba90:	4620      	mov	r0, r4
 23eba92:	b026      	add	sp, #152	; 0x98
 23eba94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      key_string[key_length++] = ch;
 23eba98:	3501      	adds	r5, #1
 23eba9a:	f803 2b01 	strb.w	r2, [r3], #1
  } while (ch != 0);
 23eba9e:	e7ba      	b.n	23eba16 <_Z10SD_findKeyPK19__FlashStringHelperPc+0x3a>
 23ebaa0:	023fdbdf 	.word	0x023fdbdf
 23ebaa4:	1006a7a4 	.word	0x1006a7a4
 23ebaa8:	023fdbea 	.word	0x023fdbea

023ebaac <_Z16HELPER_ascii2IntPci>:

int HELPER_ascii2Int(char *ascii, int length) {
  int sign = 1;
  int number = 0;

  for (int i = 0; i < length; i++) {
 23ebaac:	2300      	movs	r3, #0
int HELPER_ascii2Int(char *ascii, int length) {
 23ebaae:	b5f0      	push	{r4, r5, r6, r7, lr}
  int number = 0;
 23ebab0:	461c      	mov	r4, r3
  int sign = 1;
 23ebab2:	2501      	movs	r5, #1
    char c = *(ascii + i);
    if (i == 0 && c == '-')
      sign = -1;
    else {
      if (c >= '0' && c <= '9')
        number = number * 10 + (c - '0');
 23ebab4:	260a      	movs	r6, #10
  for (int i = 0; i < length; i++) {
 23ebab6:	428b      	cmp	r3, r1
 23ebab8:	da0e      	bge.n	23ebad8 <_Z16HELPER_ascii2IntPci+0x2c>
    char c = *(ascii + i);
 23ebaba:	5cc2      	ldrb	r2, [r0, r3]
    if (i == 0 && c == '-')
 23ebabc:	b90b      	cbnz	r3, 23ebac2 <_Z16HELPER_ascii2IntPci+0x16>
 23ebabe:	2a2d      	cmp	r2, #45	; 0x2d
 23ebac0:	d007      	beq.n	23ebad2 <_Z16HELPER_ascii2IntPci+0x26>
      if (c >= '0' && c <= '9')
 23ebac2:	3a30      	subs	r2, #48	; 0x30
 23ebac4:	b2d7      	uxtb	r7, r2
 23ebac6:	2f09      	cmp	r7, #9
 23ebac8:	d801      	bhi.n	23ebace <_Z16HELPER_ascii2IntPci+0x22>
        number = number * 10 + (c - '0');
 23ebaca:	fb06 2404 	mla	r4, r6, r4, r2
  for (int i = 0; i < length; i++) {
 23ebace:	3301      	adds	r3, #1
 23ebad0:	e7f1      	b.n	23ebab6 <_Z16HELPER_ascii2IntPci+0xa>
      sign = -1;
 23ebad2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 23ebad6:	e7fa      	b.n	23ebace <_Z16HELPER_ascii2IntPci+0x22>
    }
  }

  return number * sign;
}
 23ebad8:	fb04 f005 	mul.w	r0, r4, r5
 23ebadc:	bdf0      	pop	{r4, r5, r6, r7, pc}

023ebade <_Z20HELPER_ascii2CharStrPci>:
    str += String(c);
  }
  return str;
}

char* HELPER_ascii2CharStr(char *ascii, int length) {
 23ebade:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23ebae0:	4606      	mov	r6, r0
  char *str;
  str = (char *) malloc (length+1);
 23ebae2:	1c48      	adds	r0, r1, #1
char* HELPER_ascii2CharStr(char *ascii, int length) {
 23ebae4:	460c      	mov	r4, r1
  str = (char *) malloc (length+1);
 23ebae6:	f00c fb63 	bl	23f81b0 <malloc>
  str[0] = 0;
 23ebaea:	2100      	movs	r1, #0
  str = (char *) malloc (length+1);
 23ebaec:	4605      	mov	r5, r0
  for (int i = 0; i < length; i++) {
    char c = *(ascii + i);
    str[i] = c;
    str[i+1] = 0;
 23ebaee:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
  str[0] = 0;
 23ebaf2:	f800 1b01 	strb.w	r1, [r0], #1
    str[i+1] = 0;
 23ebaf6:	9201      	str	r2, [sp, #4]
 23ebaf8:	f011 f9a5 	bl	23fce46 <memset>
    str[i] = c;
 23ebafc:	4631      	mov	r1, r6
 23ebafe:	4628      	mov	r0, r5
 23ebb00:	9a01      	ldr	r2, [sp, #4]
 23ebb02:	f011 f993 	bl	23fce2c <memcpy>
  }
  return str;
}
 23ebb06:	4628      	mov	r0, r5
 23ebb08:	b002      	add	sp, #8
 23ebb0a:	bd70      	pop	{r4, r5, r6, pc}

023ebb0c <_Z10SD_findIntPK19__FlashStringHelper>:
  char value_string[VALUE_MAX_LENGTH];
  int value_length = SD_findKey(key, value_string);
  return value_length > 0;
}

int SD_findInt(const __FlashStringHelper * key) {
 23ebb0c:	b500      	push	{lr}
 23ebb0e:	b089      	sub	sp, #36	; 0x24
  char value_string[VALUE_MAX_LENGTH];
  int value_length = SD_findKey(key, value_string);
 23ebb10:	4669      	mov	r1, sp
 23ebb12:	f7ff ff63 	bl	23eb9dc <_Z10SD_findKeyPK19__FlashStringHelperPc>
 23ebb16:	4601      	mov	r1, r0
  return HELPER_ascii2Int(value_string, value_length);
 23ebb18:	4668      	mov	r0, sp
 23ebb1a:	f7ff ffc7 	bl	23ebaac <_Z16HELPER_ascii2IntPci>
}
 23ebb1e:	b009      	add	sp, #36	; 0x24
 23ebb20:	f85d fb04 	ldr.w	pc, [sp], #4

023ebb24 <_Z14SD_findCharStrPK19__FlashStringHelper>:
  char value_string[VALUE_MAX_LENGTH];
  int value_length = SD_findKey(key, value_string);
  return HELPER_ascii2String(value_string, value_length);
}

char* SD_findCharStr(const __FlashStringHelper * key) {
 23ebb24:	b500      	push	{lr}
 23ebb26:	b089      	sub	sp, #36	; 0x24
  char value_string[VALUE_MAX_LENGTH];
  int value_length = SD_findKey(key, value_string);
 23ebb28:	4669      	mov	r1, sp
 23ebb2a:	f7ff ff57 	bl	23eb9dc <_Z10SD_findKeyPK19__FlashStringHelperPc>
 23ebb2e:	4601      	mov	r1, r0
  return HELPER_ascii2CharStr(value_string, value_length);
 23ebb30:	4668      	mov	r0, sp
 23ebb32:	f7ff ffd4 	bl	23ebade <_Z20HELPER_ascii2CharStrPci>
}
 23ebb36:	b009      	add	sp, #36	; 0x24
 23ebb38:	f85d fb04 	ldr.w	pc, [sp], #4

023ebb3c <_Z17SD_ReadConfigFilev>:
/* 
 * =======================================================================================================================
 * SD_ReadConfigFile()
 * =======================================================================================================================
 */
void SD_ReadConfigFile() {
 23ebb3c:	b510      	push	{r4, lr}
  cf_aes_pkey     = SD_findCharStr(F("aes_pkey"));
 23ebb3e:	4822      	ldr	r0, [pc, #136]	; (23ebbc8 <_Z17SD_ReadConfigFilev+0x8c>)
 23ebb40:	f7ff fff0 	bl	23ebb24 <_Z14SD_findCharStrPK19__FlashStringHelper>
  sprintf(msgbuf, "CF:aes_pkey=[%s]", cf_aes_pkey); Output (msgbuf);
 23ebb44:	4c21      	ldr	r4, [pc, #132]	; (23ebbcc <_Z17SD_ReadConfigFilev+0x90>)
  cf_aes_pkey     = SD_findCharStr(F("aes_pkey"));
 23ebb46:	4b22      	ldr	r3, [pc, #136]	; (23ebbd0 <_Z17SD_ReadConfigFilev+0x94>)
 23ebb48:	4602      	mov	r2, r0
 23ebb4a:	6018      	str	r0, [r3, #0]
  sprintf(msgbuf, "CF:aes_pkey=[%s]", cf_aes_pkey); Output (msgbuf);
 23ebb4c:	4921      	ldr	r1, [pc, #132]	; (23ebbd4 <_Z17SD_ReadConfigFilev+0x98>)
 23ebb4e:	4620      	mov	r0, r4
 23ebb50:	f00c fb58 	bl	23f8204 <sprintf>
 23ebb54:	4620      	mov	r0, r4
 23ebb56:	f7fc fefb 	bl	23e8950 <_Z6OutputPKc>

  cf_aes_myiv     = SD_findLong(F("aes_myiv"));
 23ebb5a:	481f      	ldr	r0, [pc, #124]	; (23ebbd8 <_Z17SD_ReadConfigFilev+0x9c>)
 23ebb5c:	f7ff ffd6 	bl	23ebb0c <_Z10SD_findIntPK19__FlashStringHelper>
 23ebb60:	4b1e      	ldr	r3, [pc, #120]	; (23ebbdc <_Z17SD_ReadConfigFilev+0xa0>)
 23ebb62:	4602      	mov	r2, r0
 23ebb64:	6018      	str	r0, [r3, #0]
  sprintf(msgbuf, "CF:aes_myiv=[%lu]", cf_aes_myiv);   Output (msgbuf);
 23ebb66:	491e      	ldr	r1, [pc, #120]	; (23ebbe0 <_Z17SD_ReadConfigFilev+0xa4>)
 23ebb68:	4620      	mov	r0, r4
 23ebb6a:	f00c fb4b 	bl	23f8204 <sprintf>
 23ebb6e:	4620      	mov	r0, r4
 23ebb70:	f7fc feee 	bl	23e8950 <_Z6OutputPKc>

  cf_lora_unitid  = SD_findInt(F("lora_unitid"));
 23ebb74:	481b      	ldr	r0, [pc, #108]	; (23ebbe4 <_Z17SD_ReadConfigFilev+0xa8>)
 23ebb76:	f7ff ffc9 	bl	23ebb0c <_Z10SD_findIntPK19__FlashStringHelper>
 23ebb7a:	4b1b      	ldr	r3, [pc, #108]	; (23ebbe8 <_Z17SD_ReadConfigFilev+0xac>)
 23ebb7c:	4602      	mov	r2, r0
 23ebb7e:	6018      	str	r0, [r3, #0]
  sprintf(msgbuf, "CF:lora_unitid=[%d]", cf_lora_unitid); Output (msgbuf);
 23ebb80:	491a      	ldr	r1, [pc, #104]	; (23ebbec <_Z17SD_ReadConfigFilev+0xb0>)
 23ebb82:	4620      	mov	r0, r4
 23ebb84:	f00c fb3e 	bl	23f8204 <sprintf>
 23ebb88:	4620      	mov	r0, r4
 23ebb8a:	f7fc fee1 	bl	23e8950 <_Z6OutputPKc>

  cf_lora_txpower = SD_findInt(F("lora_txpower"));
 23ebb8e:	4818      	ldr	r0, [pc, #96]	; (23ebbf0 <_Z17SD_ReadConfigFilev+0xb4>)
 23ebb90:	f7ff ffbc 	bl	23ebb0c <_Z10SD_findIntPK19__FlashStringHelper>
 23ebb94:	4b17      	ldr	r3, [pc, #92]	; (23ebbf4 <_Z17SD_ReadConfigFilev+0xb8>)
 23ebb96:	4602      	mov	r2, r0
 23ebb98:	6018      	str	r0, [r3, #0]
  sprintf(msgbuf, "CF:lora_txpower=[%d]", cf_lora_txpower); Output (msgbuf);
 23ebb9a:	4917      	ldr	r1, [pc, #92]	; (23ebbf8 <_Z17SD_ReadConfigFilev+0xbc>)
 23ebb9c:	4620      	mov	r0, r4
 23ebb9e:	f00c fb31 	bl	23f8204 <sprintf>
 23ebba2:	4620      	mov	r0, r4
 23ebba4:	f7fc fed4 	bl	23e8950 <_Z6OutputPKc>

  cf_lora_freq   = SD_findInt(F("lora_freq"));
 23ebba8:	4814      	ldr	r0, [pc, #80]	; (23ebbfc <_Z17SD_ReadConfigFilev+0xc0>)
 23ebbaa:	f7ff ffaf 	bl	23ebb0c <_Z10SD_findIntPK19__FlashStringHelper>
 23ebbae:	4b14      	ldr	r3, [pc, #80]	; (23ebc00 <_Z17SD_ReadConfigFilev+0xc4>)
 23ebbb0:	4602      	mov	r2, r0
 23ebbb2:	6018      	str	r0, [r3, #0]
  sprintf(msgbuf, "CF:lora_freq=[%d]", cf_lora_freq); Output (msgbuf);
 23ebbb4:	4913      	ldr	r1, [pc, #76]	; (23ebc04 <_Z17SD_ReadConfigFilev+0xc8>)
 23ebbb6:	4620      	mov	r0, r4
 23ebbb8:	f00c fb24 	bl	23f8204 <sprintf>
 23ebbbc:	4620      	mov	r0, r4
 23ebbbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sprintf(msgbuf, "CF:lora_freq=[%d]", cf_lora_freq); Output (msgbuf);
 23ebbc2:	f7fc bec5 	b.w	23e8950 <_Z6OutputPKc>
 23ebbc6:	bf00      	nop
 23ebbc8:	023fdc0a 	.word	0x023fdc0a
 23ebbcc:	1006f148 	.word	0x1006f148
 23ebbd0:	1006acac 	.word	0x1006acac
 23ebbd4:	023fdc13 	.word	0x023fdc13
 23ebbd8:	023fdc24 	.word	0x023fdc24
 23ebbdc:	1006aca8 	.word	0x1006aca8
 23ebbe0:	023fdc2d 	.word	0x023fdc2d
 23ebbe4:	023fdc3f 	.word	0x023fdc3f
 23ebbe8:	1006a24c 	.word	0x1006a24c
 23ebbec:	023fdc4b 	.word	0x023fdc4b
 23ebbf0:	023fdc5f 	.word	0x023fdc5f
 23ebbf4:	1006a248 	.word	0x1006a248
 23ebbf8:	023fdc6c 	.word	0x023fdc6c
 23ebbfc:	023fdc81 	.word	0x023fdc81
 23ebc00:	1006a244 	.word	0x1006a244
 23ebc04:	023fdc8b 	.word	0x023fdc8b

023ebc08 <_Z9OBS_Cleari>:
 * ======================================================================================================================
 * OBS_Clear() - Set OBS to not in use
 * ======================================================================================================================
 */
void OBS_Clear(int i) {
  obs[i].inuse =false;
 23ebc08:	f640 2398 	movw	r3, #2712	; 0xa98
 23ebc0c:	4358      	muls	r0, r3
 23ebc0e:	2300      	movs	r3, #0
 23ebc10:	4a05      	ldr	r2, [pc, #20]	; (23ebc28 <_Z9OBS_Cleari+0x20>)
 23ebc12:	5413      	strb	r3, [r2, r0]
  for (int s=0; s<MAX_SENSORS; s++) {
 23ebc14:	4410      	add	r0, r2
    obs[i].sensor[s].inuse = false;
 23ebc16:	461a      	mov	r2, r3
  for (int s=0; s<MAX_SENSORS; s++) {
 23ebc18:	3301      	adds	r3, #1
 23ebc1a:	2b60      	cmp	r3, #96	; 0x60
    obs[i].sensor[s].inuse = false;
 23ebc1c:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  for (int s=0; s<MAX_SENSORS; s++) {
 23ebc20:	f100 001c 	add.w	r0, r0, #28
 23ebc24:	d1f8      	bne.n	23ebc18 <_Z9OBS_Cleari+0x10>
  }
}
 23ebc26:	4770      	bx	lr
 23ebc28:	1006f558 	.word	0x1006f558

023ebc2c <_Z11OBS_N2S_Addi>:
/*
 * ======================================================================================================================
 * OBS_N2S_Add() - Save OBS to N2S file
 * ======================================================================================================================
 */
void OBS_N2S_Add(int i) {
 23ebc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (obs[i].inuse) {     // Sanity check
 23ebc30:	f640 2598 	movw	r5, #2712	; 0xa98
 23ebc34:	4345      	muls	r5, r0
 23ebc36:	f8df 9198 	ldr.w	r9, [pc, #408]	; 23ebdd0 <_Z11OBS_N2S_Addi+0x1a4>
void OBS_N2S_Add(int i) {
 23ebc3a:	4607      	mov	r7, r0
  if (obs[i].inuse) {     // Sanity check
 23ebc3c:	f819 3005 	ldrb.w	r3, [r9, r5]
void OBS_N2S_Add(int i) {
 23ebc40:	b097      	sub	sp, #92	; 0x5c
  if (obs[i].inuse) {     // Sanity check
 23ebc42:	eb09 0405 	add.w	r4, r9, r5
 23ebc46:	2b00      	cmp	r3, #0
 23ebc48:	f000 809a 	beq.w	23ebd80 <_Z11OBS_N2S_Addi+0x154>
    char ts[32];
    
    memset(msgbuf, 0, sizeof(msgbuf));
 23ebc4c:	f8df 8170 	ldr.w	r8, [pc, #368]	; 23ebdc0 <_Z11OBS_N2S_Addi+0x194>
 23ebc50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 23ebc54:	2100      	movs	r1, #0
 23ebc56:	4640      	mov	r0, r8
 23ebc58:	f011 f8f5 	bl	23fce46 <memset>

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
 23ebc5c:	4b53      	ldr	r3, [pc, #332]	; (23ebdac <_Z11OBS_N2S_Addi+0x180>)
        state_(BEGIN) {
 23ebc5e:	2600      	movs	r6, #0
        n_(0) {
 23ebc60:	9309      	str	r3, [sp, #36]	; 0x24
 23ebc62:	f240 33ff 	movw	r3, #1023	; 0x3ff

    JSONBufferWriter writer(msgbuf, sizeof(msgbuf)-1);
    writer.beginObject();
 23ebc66:	a809      	add	r0, sp, #36	; 0x24
 23ebc68:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
        state_(BEGIN) {
 23ebc6c:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
        n_(0) {
 23ebc70:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 23ebc74:	f00d fa91 	bl	23f919a <_ZN5spark10JSONWriter11beginObjectEv>

    sprintf (ts, "%d-%02d-%02dT%02d:%02d:%02d",
 23ebc78:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23ebc7c:	f00e f80c 	bl	23f9c98 <_ZN9TimeClass4yearEx>
 23ebc80:	9007      	str	r0, [sp, #28]
 23ebc82:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23ebc86:	f00d fffd 	bl	23f9c84 <_ZN9TimeClass5monthEx>
 23ebc8a:	9006      	str	r0, [sp, #24]
 23ebc8c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23ebc90:	f00d fff0 	bl	23f9c74 <_ZN9TimeClass3dayEx>
 23ebc94:	9005      	str	r0, [sp, #20]
 23ebc96:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23ebc9a:	f00d ffd3 	bl	23f9c44 <_ZN9TimeClass4hourEx>
 23ebc9e:	4682      	mov	sl, r0
 23ebca0:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23ebca4:	f00d ffd6 	bl	23f9c54 <_ZN9TimeClass6minuteEx>
 23ebca8:	4683      	mov	fp, r0
 23ebcaa:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23ebcae:	f00d ffd9 	bl	23f9c64 <_ZN9TimeClass6secondEx>
 23ebcb2:	9b05      	ldr	r3, [sp, #20]
 23ebcb4:	e9cd b002 	strd	fp, r0, [sp, #8]
 23ebcb8:	493d      	ldr	r1, [pc, #244]	; (23ebdb0 <_Z11OBS_N2S_Addi+0x184>)
 23ebcba:	f8cd a004 	str.w	sl, [sp, #4]
 23ebcbe:	9300      	str	r3, [sp, #0]
 23ebcc0:	a80e      	add	r0, sp, #56	; 0x38
 23ebcc2:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 23ebcc6:	f00c fa9d 	bl	23f8204 <sprintf>
      Time.year(obs[i].ts), Time.month(obs[i].ts), Time.day(obs[i].ts),
      Time.hour(obs[i].ts), Time.minute(obs[i].ts), Time.second(obs[i].ts));

    writer.name("at").value(ts);
 23ebcca:	493a      	ldr	r1, [pc, #232]	; (23ebdb4 <_Z11OBS_N2S_Addi+0x188>)
 23ebccc:	a809      	add	r0, sp, #36	; 0x24
 23ebcce:	f7fc fbfb 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23ebcd2:	a90e      	add	r1, sp, #56	; 0x38
 23ebcd4:	f7fc fb4e 	bl	23e8374 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    writer.name("css").value(obs[i].css, 4);
 23ebcd8:	4937      	ldr	r1, [pc, #220]	; (23ebdb8 <_Z11OBS_N2S_Addi+0x18c>)
 23ebcda:	a809      	add	r0, sp, #36	; 0x24
 23ebcdc:	f7fc fbf4 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23ebce0:	4682      	mov	sl, r0
 23ebce2:	6920      	ldr	r0, [r4, #16]
 23ebce4:	f7fa ff08 	bl	23e6af8 <__aeabi_f2d>
 23ebce8:	ec41 0b10 	vmov	d0, r0, r1
 23ebcec:	2104      	movs	r1, #4
 23ebcee:	4650      	mov	r0, sl
 23ebcf0:	f00d fa96 	bl	23f9220 <_ZN5spark10JSONWriter5valueEdi>

    // Modify System Status and Set From Need to Send file bit
    obs[i].hth |= SSB_FROM_N2S; // Turn On Bit
 23ebcf4:	6963      	ldr	r3, [r4, #20]
    writer.name("hth").value((int) obs[i].hth);
 23ebcf6:	4931      	ldr	r1, [pc, #196]	; (23ebdbc <_Z11OBS_N2S_Addi+0x190>)
    obs[i].hth |= SSB_FROM_N2S; // Turn On Bit
 23ebcf8:	f043 0320 	orr.w	r3, r3, #32
 23ebcfc:	6163      	str	r3, [r4, #20]
    writer.name("hth").value((int) obs[i].hth);
 23ebcfe:	a809      	add	r0, sp, #36	; 0x24
 23ebd00:	f7fc fbe2 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23ebd04:	6961      	ldr	r1, [r4, #20]
 23ebd06:	f00d fa55 	bl	23f91b4 <_ZN5spark10JSONWriter5valueEi>

    for (int s=0; s<MAX_SENSORS; s++) {
 23ebd0a:	3518      	adds	r5, #24
            break;
          case U_OBS :
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
            break;
          default : // Should never happen
            Output ("WhyAmIHere?");
 23ebd0c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 23ebdd4 <_Z11OBS_N2S_Addi+0x1a8>
 23ebd10:	44a9      	add	r9, r5
      if (obs[i].sensor[s].inuse) {
 23ebd12:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 23ebd16:	b1a3      	cbz	r3, 23ebd42 <_Z11OBS_N2S_Addi+0x116>
        switch (obs[i].sensor[s].type) {
 23ebd18:	6a23      	ldr	r3, [r4, #32]
 23ebd1a:	2b01      	cmp	r3, #1
 23ebd1c:	d033      	beq.n	23ebd86 <_Z11OBS_N2S_Addi+0x15a>
 23ebd1e:	2b02      	cmp	r3, #2
 23ebd20:	d039      	beq.n	23ebd96 <_Z11OBS_N2S_Addi+0x16a>
 23ebd22:	2b00      	cmp	r3, #0
 23ebd24:	d13d      	bne.n	23ebda2 <_Z11OBS_N2S_Addi+0x176>
            writer.name(obs[i].sensor[s].id).value(obs[i].sensor[s].f_obs, 1);
 23ebd26:	4649      	mov	r1, r9
 23ebd28:	a809      	add	r0, sp, #36	; 0x24
 23ebd2a:	f7fc fbcd 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23ebd2e:	4605      	mov	r5, r0
 23ebd30:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23ebd32:	f7fa fee1 	bl	23e6af8 <__aeabi_f2d>
 23ebd36:	ec41 0b10 	vmov	d0, r0, r1
 23ebd3a:	2101      	movs	r1, #1
 23ebd3c:	4628      	mov	r0, r5
 23ebd3e:	f00d fa6f 	bl	23f9220 <_ZN5spark10JSONWriter5valueEdi>
    for (int s=0; s<MAX_SENSORS; s++) {
 23ebd42:	3601      	adds	r6, #1
 23ebd44:	2e60      	cmp	r6, #96	; 0x60
 23ebd46:	f104 041c 	add.w	r4, r4, #28
 23ebd4a:	f109 091c 	add.w	r9, r9, #28
 23ebd4e:	d1e0      	bne.n	23ebd12 <_Z11OBS_N2S_Addi+0xe6>
            break;
        }
      }
    }
    writer.endObject();
 23ebd50:	a809      	add	r0, sp, #36	; 0x24
 23ebd52:	f00d fa0c 	bl	23f916e <_ZN5spark10JSONWriter9endObjectEv>

    sprintf (msgbuf+strlen(msgbuf), ",FS");  // Add Particle Event Type after JSON structure
 23ebd56:	481a      	ldr	r0, [pc, #104]	; (23ebdc0 <_Z11OBS_N2S_Addi+0x194>)
 23ebd58:	f7fb fd66 	bl	23e7828 <strlen>
 23ebd5c:	4919      	ldr	r1, [pc, #100]	; (23ebdc4 <_Z11OBS_N2S_Addi+0x198>)
 23ebd5e:	4440      	add	r0, r8
 23ebd60:	f011 f8e6 	bl	23fcf30 <strcpy>
    SD_NeedToSend_Add(msgbuf); // Save to N2F File
 23ebd64:	4816      	ldr	r0, [pc, #88]	; (23ebdc0 <_Z11OBS_N2S_Addi+0x194>)
 23ebd66:	f7ff fd29 	bl	23eb7bc <_Z17SD_NeedToSend_AddPc>
    sprintf (Buffer32Bytes, "OBS->%d Add N2S", i);
 23ebd6a:	463a      	mov	r2, r7
 23ebd6c:	4916      	ldr	r1, [pc, #88]	; (23ebdc8 <_Z11OBS_N2S_Addi+0x19c>)
 23ebd6e:	4817      	ldr	r0, [pc, #92]	; (23ebdcc <_Z11OBS_N2S_Addi+0x1a0>)
 23ebd70:	f00c fa48 	bl	23f8204 <sprintf>
    Output(Buffer32Bytes);
 23ebd74:	4815      	ldr	r0, [pc, #84]	; (23ebdcc <_Z11OBS_N2S_Addi+0x1a0>)
 23ebd76:	f7fc fdeb 	bl	23e8950 <_Z6OutputPKc>
    Serial_write (msgbuf);
 23ebd7a:	4811      	ldr	r0, [pc, #68]	; (23ebdc0 <_Z11OBS_N2S_Addi+0x194>)
 23ebd7c:	f7fc fdbe 	bl	23e88fc <_Z12Serial_writePKc>
  }
}
 23ebd80:	b017      	add	sp, #92	; 0x5c
 23ebd82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            writer.name(obs[i].sensor[s].id).value(obs[i].sensor[s].i_obs);
 23ebd86:	4649      	mov	r1, r9
 23ebd88:	a809      	add	r0, sp, #36	; 0x24
 23ebd8a:	f7fc fb9d 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23ebd8e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
 23ebd90:	f00d fa10 	bl	23f91b4 <_ZN5spark10JSONWriter5valueEi>
            break;
 23ebd94:	e7d5      	b.n	23ebd42 <_Z11OBS_N2S_Addi+0x116>
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
 23ebd96:	4649      	mov	r1, r9
 23ebd98:	a809      	add	r0, sp, #36	; 0x24
 23ebd9a:	f7fc fb95 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23ebd9e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 23ebda0:	e7f6      	b.n	23ebd90 <_Z11OBS_N2S_Addi+0x164>
            Output ("WhyAmIHere?");
 23ebda2:	4650      	mov	r0, sl
 23ebda4:	f7fc fdd4 	bl	23e8950 <_Z6OutputPKc>
            break;
 23ebda8:	e7cb      	b.n	23ebd42 <_Z11OBS_N2S_Addi+0x116>
 23ebdaa:	bf00      	nop
 23ebdac:	023ffab4 	.word	0x023ffab4
 23ebdb0:	023fd36b 	.word	0x023fd36b
 23ebdb4:	023fdc9d 	.word	0x023fdc9d
 23ebdb8:	023fdca0 	.word	0x023fdca0
 23ebdbc:	023fdca4 	.word	0x023fdca4
 23ebdc0:	1006f148 	.word	0x1006f148
 23ebdc4:	023fdcb4 	.word	0x023fdcb4
 23ebdc8:	023fdcb8 	.word	0x023fdcb8
 23ebdcc:	1006a31f 	.word	0x1006a31f
 23ebdd0:	1006f558 	.word	0x1006f558
 23ebdd4:	023fdca8 	.word	0x023fdca8

023ebdd8 <_Z17OBS_FS_Build_JSONi>:
/*
 * ======================================================================================================================
 * OBS_FS_Build_JSON() - Create JSON observation in msgbuf
 * ======================================================================================================================
 */
bool OBS_FS_Build_JSON(int i) {
 23ebdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (obs[i].inuse) {     // Sanity check
 23ebddc:	f640 2498 	movw	r4, #2712	; 0xa98
 23ebde0:	4344      	muls	r4, r0
 23ebde2:	f8df 814c 	ldr.w	r8, [pc, #332]	; 23ebf30 <_Z17OBS_FS_Build_JSONi+0x158>
bool OBS_FS_Build_JSON(int i) {
 23ebde6:	b095      	sub	sp, #84	; 0x54
  if (obs[i].inuse) {     // Sanity check
 23ebde8:	f818 7004 	ldrb.w	r7, [r8, r4]
 23ebdec:	eb08 0504 	add.w	r5, r8, r4
 23ebdf0:	2f00      	cmp	r7, #0
 23ebdf2:	d07b      	beq.n	23ebeec <_Z17OBS_FS_Build_JSONi+0x114>
    char ts[32];
    
    memset(msgbuf, 0, sizeof(msgbuf));
 23ebdf4:	4b48      	ldr	r3, [pc, #288]	; (23ebf18 <_Z17OBS_FS_Build_JSONi+0x140>)
 23ebdf6:	2100      	movs	r1, #0
 23ebdf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 23ebdfc:	4618      	mov	r0, r3
 23ebdfe:	f011 f822 	bl	23fce46 <memset>
        state_(BEGIN) {
 23ebe02:	2600      	movs	r6, #0
        n_(0) {
 23ebe04:	f240 33ff 	movw	r3, #1023	; 0x3ff
 23ebe08:	4a44      	ldr	r2, [pc, #272]	; (23ebf1c <_Z17OBS_FS_Build_JSONi+0x144>)
 23ebe0a:	9009      	str	r0, [sp, #36]	; 0x24

    JSONBufferWriter writer(msgbuf, sizeof(msgbuf)-1);
    writer.beginObject();
 23ebe0c:	a807      	add	r0, sp, #28
 23ebe0e:	e9cd 360a 	strd	r3, r6, [sp, #40]	; 0x28
 23ebe12:	9207      	str	r2, [sp, #28]
        state_(BEGIN) {
 23ebe14:	f88d 6020 	strb.w	r6, [sp, #32]
 23ebe18:	f00d f9bf 	bl	23f919a <_ZN5spark10JSONWriter11beginObjectEv>

    sprintf (ts, "%d-%02d-%02dT%02d:%02d:%02d",
 23ebe1c:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23ebe20:	f00d ff3a 	bl	23f9c98 <_ZN9TimeClass4yearEx>
 23ebe24:	9005      	str	r0, [sp, #20]
 23ebe26:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23ebe2a:	f00d ff2b 	bl	23f9c84 <_ZN9TimeClass5monthEx>
 23ebe2e:	9004      	str	r0, [sp, #16]
 23ebe30:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23ebe34:	f00d ff1e 	bl	23f9c74 <_ZN9TimeClass3dayEx>
 23ebe38:	4681      	mov	r9, r0
 23ebe3a:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23ebe3e:	f00d ff01 	bl	23f9c44 <_ZN9TimeClass4hourEx>
 23ebe42:	4682      	mov	sl, r0
 23ebe44:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23ebe48:	f00d ff04 	bl	23f9c54 <_ZN9TimeClass6minuteEx>
 23ebe4c:	4683      	mov	fp, r0
 23ebe4e:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23ebe52:	f00d ff07 	bl	23f9c64 <_ZN9TimeClass6secondEx>
 23ebe56:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 23ebe5a:	e9cd b002 	strd	fp, r0, [sp, #8]
 23ebe5e:	e9cd 9a00 	strd	r9, sl, [sp]
 23ebe62:	492f      	ldr	r1, [pc, #188]	; (23ebf20 <_Z17OBS_FS_Build_JSONi+0x148>)
 23ebe64:	a80c      	add	r0, sp, #48	; 0x30
 23ebe66:	f00c f9cd 	bl	23f8204 <sprintf>
      Time.year(obs[i].ts), Time.month(obs[i].ts), Time.day(obs[i].ts),
      Time.hour(obs[i].ts), Time.minute(obs[i].ts), Time.second(obs[i].ts));

    writer.name("at").value(ts);
 23ebe6a:	492e      	ldr	r1, [pc, #184]	; (23ebf24 <_Z17OBS_FS_Build_JSONi+0x14c>)
 23ebe6c:	a807      	add	r0, sp, #28
 23ebe6e:	f7fc fb2b 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23ebe72:	a90c      	add	r1, sp, #48	; 0x30
 23ebe74:	f7fc fa7e 	bl	23e8374 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    writer.name("css").value(obs[i].css, 4);
 23ebe78:	492b      	ldr	r1, [pc, #172]	; (23ebf28 <_Z17OBS_FS_Build_JSONi+0x150>)
 23ebe7a:	a807      	add	r0, sp, #28
 23ebe7c:	f7fc fb24 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23ebe80:	4681      	mov	r9, r0
 23ebe82:	6928      	ldr	r0, [r5, #16]
 23ebe84:	f7fa fe38 	bl	23e6af8 <__aeabi_f2d>
 23ebe88:	ec41 0b10 	vmov	d0, r0, r1
 23ebe8c:	2104      	movs	r1, #4
 23ebe8e:	4648      	mov	r0, r9
 23ebe90:	f00d f9c6 	bl	23f9220 <_ZN5spark10JSONWriter5valueEdi>
    writer.name("hth").value((int) obs[i].hth);
 23ebe94:	4925      	ldr	r1, [pc, #148]	; (23ebf2c <_Z17OBS_FS_Build_JSONi+0x154>)
 23ebe96:	a807      	add	r0, sp, #28
 23ebe98:	f7fc fb16 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23ebe9c:	6969      	ldr	r1, [r5, #20]
 23ebe9e:	f00d f989 	bl	23f91b4 <_ZN5spark10JSONWriter5valueEi>

    for (int s=0; s<MAX_SENSORS; s++) {
 23ebea2:	3418      	adds	r4, #24
            break;
          case U_OBS :
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
            break;
          default : // Should never happen
            Output ("WhyAmIHere?");
 23ebea4:	f8df 908c 	ldr.w	r9, [pc, #140]	; 23ebf34 <_Z17OBS_FS_Build_JSONi+0x15c>
 23ebea8:	4444      	add	r4, r8
      if (obs[i].sensor[s].inuse) {
 23ebeaa:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 23ebeae:	b19b      	cbz	r3, 23ebed8 <_Z17OBS_FS_Build_JSONi+0x100>
        switch (obs[i].sensor[s].type) {
 23ebeb0:	6a2b      	ldr	r3, [r5, #32]
 23ebeb2:	2b01      	cmp	r3, #1
 23ebeb4:	d01e      	beq.n	23ebef4 <_Z17OBS_FS_Build_JSONi+0x11c>
 23ebeb6:	2b02      	cmp	r3, #2
 23ebeb8:	d024      	beq.n	23ebf04 <_Z17OBS_FS_Build_JSONi+0x12c>
 23ebeba:	bb4b      	cbnz	r3, 23ebf10 <_Z17OBS_FS_Build_JSONi+0x138>
            writer.name(obs[i].sensor[s].id).value(obs[i].sensor[s].f_obs, 1);
 23ebebc:	4621      	mov	r1, r4
 23ebebe:	a807      	add	r0, sp, #28
 23ebec0:	f7fc fb02 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23ebec4:	4680      	mov	r8, r0
 23ebec6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 23ebec8:	f7fa fe16 	bl	23e6af8 <__aeabi_f2d>
 23ebecc:	ec41 0b10 	vmov	d0, r0, r1
 23ebed0:	2101      	movs	r1, #1
 23ebed2:	4640      	mov	r0, r8
 23ebed4:	f00d f9a4 	bl	23f9220 <_ZN5spark10JSONWriter5valueEdi>
    for (int s=0; s<MAX_SENSORS; s++) {
 23ebed8:	3601      	adds	r6, #1
 23ebeda:	2e60      	cmp	r6, #96	; 0x60
 23ebedc:	f105 051c 	add.w	r5, r5, #28
 23ebee0:	f104 041c 	add.w	r4, r4, #28
 23ebee4:	d1e1      	bne.n	23ebeaa <_Z17OBS_FS_Build_JSONi+0xd2>
            break;
        }
      }
    }
    writer.endObject();
 23ebee6:	a807      	add	r0, sp, #28
 23ebee8:	f00d f941 	bl	23f916e <_ZN5spark10JSONWriter9endObjectEv>
    return (true);
  }
  else {
    return (false);
  }
}
 23ebeec:	4638      	mov	r0, r7
 23ebeee:	b015      	add	sp, #84	; 0x54
 23ebef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            writer.name(obs[i].sensor[s].id).value(obs[i].sensor[s].i_obs);
 23ebef4:	4621      	mov	r1, r4
 23ebef6:	a807      	add	r0, sp, #28
 23ebef8:	f7fc fae6 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23ebefc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
 23ebefe:	f00d f959 	bl	23f91b4 <_ZN5spark10JSONWriter5valueEi>
            break;
 23ebf02:	e7e9      	b.n	23ebed8 <_Z17OBS_FS_Build_JSONi+0x100>
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
 23ebf04:	4621      	mov	r1, r4
 23ebf06:	a807      	add	r0, sp, #28
 23ebf08:	f7fc fade 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23ebf0c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 23ebf0e:	e7f6      	b.n	23ebefe <_Z17OBS_FS_Build_JSONi+0x126>
            Output ("WhyAmIHere?");
 23ebf10:	4648      	mov	r0, r9
 23ebf12:	f7fc fd1d 	bl	23e8950 <_Z6OutputPKc>
            break;
 23ebf16:	e7df      	b.n	23ebed8 <_Z17OBS_FS_Build_JSONi+0x100>
 23ebf18:	1006f148 	.word	0x1006f148
 23ebf1c:	023ffab4 	.word	0x023ffab4
 23ebf20:	023fd36b 	.word	0x023fd36b
 23ebf24:	023fdc9d 	.word	0x023fdc9d
 23ebf28:	023fdca0 	.word	0x023fdca0
 23ebf2c:	023fdca4 	.word	0x023fdca4
 23ebf30:	1006f558 	.word	0x1006f558
 23ebf34:	023fdca8 	.word	0x023fdca8

023ebf38 <_Z20OBS_Relay_Build_JSONv>:
 */
int OBS_Relay_Build_JSON() {
  LORA_MSG_RELAY_STR *m;
  int relay_type = 0;

  memset(msgbuf, 0, sizeof(msgbuf));
 23ebf38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 23ebf3c:	2100      	movs	r1, #0
int OBS_Relay_Build_JSON() {
 23ebf3e:	b538      	push	{r3, r4, r5, lr}
  memset(msgbuf, 0, sizeof(msgbuf));
 23ebf40:	480c      	ldr	r0, [pc, #48]	; (23ebf74 <_Z20OBS_Relay_Build_JSONv+0x3c>)
 23ebf42:	f010 ff80 	bl	23fce46 <memset>
  JSONBufferWriter writer(msgbuf, sizeof(msgbuf)-1);

  // Locate message we need to log
  int i = lora_relay_need2log_idx();
 23ebf46:	f7fc ff0f 	bl	23e8d68 <_Z23lora_relay_need2log_idxv>
  if (i >= 0) {
 23ebf4a:	2800      	cmp	r0, #0
 23ebf4c:	db10      	blt.n	23ebf70 <_Z20OBS_Relay_Build_JSONv+0x38>
    m = &lora_msg_relay[i];
 23ebf4e:	f44f 7484 	mov.w	r4, #264	; 0x108
 23ebf52:	4344      	muls	r4, r0
    strncpy (msgbuf, m->message, LORA_RELAY_MSG_LENGTH-1); // minus 1 so last byte in array will always be null
 23ebf54:	4d08      	ldr	r5, [pc, #32]	; (23ebf78 <_Z20OBS_Relay_Build_JSONv+0x40>)
 23ebf56:	f104 0108 	add.w	r1, r4, #8
 23ebf5a:	22ff      	movs	r2, #255	; 0xff
 23ebf5c:	4805      	ldr	r0, [pc, #20]	; (23ebf74 <_Z20OBS_Relay_Build_JSONv+0x3c>)
 23ebf5e:	4429      	add	r1, r5
 23ebf60:	f011 f80b 	bl	23fcf7a <strncpy>
    relay_type = m->message_type;
 23ebf64:	1928      	adds	r0, r5, r4
 23ebf66:	6844      	ldr	r4, [r0, #4]
    lora_relay_msg_free(m);
 23ebf68:	f7fc fed8 	bl	23e8d1c <_Z19lora_relay_msg_freeP18LORA_MSG_RELAY_STR>
  }
  return (relay_type);
}
 23ebf6c:	4620      	mov	r0, r4
 23ebf6e:	bd38      	pop	{r3, r4, r5, pc}
  int relay_type = 0;
 23ebf70:	2400      	movs	r4, #0
  return (relay_type);
 23ebf72:	e7fb      	b.n	23ebf6c <_Z20OBS_Relay_Build_JSONv+0x34>
 23ebf74:	1006f148 	.word	0x1006f148
 23ebf78:	1006aee0 	.word	0x1006aee0

023ebf7c <_Z7OBS_Logi>:
/*
 * ======================================================================================================================
 * OBS_Log() - Save OBS to Log file
 * ======================================================================================================================
 */
void OBS_Log(int i) {
 23ebf7c:	b507      	push	{r0, r1, r2, lr}
 23ebf7e:	9001      	str	r0, [sp, #4]
  if (OBS_FS_Build_JSON(i)) {
 23ebf80:	f7ff ff2a 	bl	23ebdd8 <_Z17OBS_FS_Build_JSONi>
 23ebf84:	9a01      	ldr	r2, [sp, #4]
 23ebf86:	b178      	cbz	r0, 23ebfa8 <_Z7OBS_Logi+0x2c>
    sprintf (Buffer32Bytes, "OBS[%d]->SD", i);
 23ebf88:	4909      	ldr	r1, [pc, #36]	; (23ebfb0 <_Z7OBS_Logi+0x34>)
 23ebf8a:	480a      	ldr	r0, [pc, #40]	; (23ebfb4 <_Z7OBS_Logi+0x38>)
 23ebf8c:	f00c f93a 	bl	23f8204 <sprintf>
    Output(Buffer32Bytes);
 23ebf90:	4808      	ldr	r0, [pc, #32]	; (23ebfb4 <_Z7OBS_Logi+0x38>)
 23ebf92:	f7fc fcdd 	bl	23e8950 <_Z6OutputPKc>
    Serial_write (msgbuf);
 23ebf96:	4808      	ldr	r0, [pc, #32]	; (23ebfb8 <_Z7OBS_Logi+0x3c>)
 23ebf98:	f7fc fcb0 	bl	23e88fc <_Z12Serial_writePKc>

    SD_LogObservation(msgbuf);
 23ebf9c:	4806      	ldr	r0, [pc, #24]	; (23ebfb8 <_Z7OBS_Logi+0x3c>)
  }
}
 23ebf9e:	b003      	add	sp, #12
 23ebfa0:	f85d eb04 	ldr.w	lr, [sp], #4
    SD_LogObservation(msgbuf);
 23ebfa4:	f7ff bb6e 	b.w	23eb684 <_Z17SD_LogObservationPc>
}
 23ebfa8:	b003      	add	sp, #12
 23ebfaa:	f85d fb04 	ldr.w	pc, [sp], #4
 23ebfae:	bf00      	nop
 23ebfb0:	023fdcc8 	.word	0x023fdcc8
 23ebfb4:	1006a31f 	.word	0x1006a31f
 23ebfb8:	1006f148 	.word	0x1006f148

023ebfbc <_Z15OBS_N2S_SaveAllv>:
/*
 * ======================================================================================================================
 * OBS_N2S_SaveAll() - Save All N Observations to Need2Send File
 * ======================================================================================================================
 */
void OBS_N2S_SaveAll() {
 23ebfbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int relay_type;

  // Save All Station Observations to N2S file
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
 23ebfbe:	2400      	movs	r4, #0
    OBS_N2S_Add (i);
 23ebfc0:	4620      	mov	r0, r4
 23ebfc2:	f7ff fe33 	bl	23ebc2c <_Z11OBS_N2S_Addi>
    OBS_Clear(i);
 23ebfc6:	4620      	mov	r0, r4
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
 23ebfc8:	3401      	adds	r4, #1
    OBS_Clear(i);
 23ebfca:	f7ff fe1d 	bl	23ebc08 <_Z9OBS_Cleari>
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
 23ebfce:	2c11      	cmp	r4, #17
 23ebfd0:	d1f6      	bne.n	23ebfc0 <_Z15OBS_N2S_SaveAllv+0x4>
  }

  // Save All Rain and Soil LoRa Observations to N2S file
  while (lora_relay_need2log()) {
   relay_type = OBS_Relay_Build_JSON(); // This removed msg from relay structure and places it in msgbuf
    sprintf (msgbuf+strlen(msgbuf), ", %s", relay_msgtypes[relay_type]);  // Add Particle Event Type after JSON structure
 23ebfd2:	4d0e      	ldr	r5, [pc, #56]	; (23ec00c <_Z15OBS_N2S_SaveAllv+0x50>)
 23ebfd4:	4f0e      	ldr	r7, [pc, #56]	; (23ec010 <_Z15OBS_N2S_SaveAllv+0x54>)
 23ebfd6:	4e0f      	ldr	r6, [pc, #60]	; (23ec014 <_Z15OBS_N2S_SaveAllv+0x58>)
  while (lora_relay_need2log()) {
 23ebfd8:	f7fc fea8 	bl	23e8d2c <_Z19lora_relay_need2logv>
 23ebfdc:	b1a8      	cbz	r0, 23ec00a <_Z15OBS_N2S_SaveAllv+0x4e>
   relay_type = OBS_Relay_Build_JSON(); // This removed msg from relay structure and places it in msgbuf
 23ebfde:	f7ff ffab 	bl	23ebf38 <_Z20OBS_Relay_Build_JSONv>
 23ebfe2:	4604      	mov	r4, r0
    sprintf (msgbuf+strlen(msgbuf), ", %s", relay_msgtypes[relay_type]);  // Add Particle Event Type after JSON structure
 23ebfe4:	4809      	ldr	r0, [pc, #36]	; (23ec00c <_Z15OBS_N2S_SaveAllv+0x50>)
 23ebfe6:	f7fb fc1f 	bl	23e7828 <strlen>
 23ebfea:	4631      	mov	r1, r6
 23ebfec:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
 23ebff0:	4428      	add	r0, r5
 23ebff2:	f00c f907 	bl	23f8204 <sprintf>
    SD_NeedToSend_Add(msgbuf); // Save to N2F File
 23ebff6:	4805      	ldr	r0, [pc, #20]	; (23ec00c <_Z15OBS_N2S_SaveAllv+0x50>)
 23ebff8:	f7ff fbe0 	bl	23eb7bc <_Z17SD_NeedToSend_AddPc>
    Output("LR->N2S");
 23ebffc:	4806      	ldr	r0, [pc, #24]	; (23ec018 <_Z15OBS_N2S_SaveAllv+0x5c>)
 23ebffe:	f7fc fca7 	bl	23e8950 <_Z6OutputPKc>
    Serial_write (msgbuf); 
 23ec002:	4802      	ldr	r0, [pc, #8]	; (23ec00c <_Z15OBS_N2S_SaveAllv+0x50>)
 23ec004:	f7fc fc7a 	bl	23e88fc <_Z12Serial_writePKc>
  while (lora_relay_need2log()) {
 23ec008:	e7e6      	b.n	23ebfd8 <_Z15OBS_N2S_SaveAllv+0x1c>
  }
}
 23ec00a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23ec00c:	1006f148 	.word	0x1006f148
 23ec010:	1006a260 	.word	0x1006a260
 23ec014:	023fdcd4 	.word	0x023fdcd4
 23ec018:	023fdcd9 	.word	0x023fdcd9

023ec01c <_Z8OBS_Lastv>:
 * OBS_Last() - Find Last OBS and return index or -1 if empty
 * ======================================================================================================================
 */
int OBS_Last() {
  // Scan OBS for free spot
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23ec01c:	2000      	movs	r0, #0
    if (obs[i].inuse == false) {
 23ec01e:	f640 2398 	movw	r3, #2712	; 0xa98
 23ec022:	4a06      	ldr	r2, [pc, #24]	; (23ec03c <_Z8OBS_Lastv+0x20>)
 23ec024:	fb03 f100 	mul.w	r1, r3, r0
 23ec028:	5c89      	ldrb	r1, [r1, r2]
 23ec02a:	b909      	cbnz	r1, 23ec030 <_Z8OBS_Lastv+0x14>
      if (i == 0) {
        return (-1);
      }
      else {
        return (i-1);
 23ec02c:	3801      	subs	r0, #1
 23ec02e:	4770      	bx	lr
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23ec030:	3001      	adds	r0, #1
 23ec032:	2811      	cmp	r0, #17
 23ec034:	d1f6      	bne.n	23ec024 <_Z8OBS_Lastv+0x8>
      }
    }
  }
  // Arrary full, Never found an empty, return last in Array
  return (MAX_ONE_MINUTE_OBS-1);
 23ec036:	2010      	movs	r0, #16
}
 23ec038:	4770      	bx	lr
 23ec03a:	bf00      	nop
 23ec03c:	1006f558 	.word	0x1006f558

023ec040 <_Z8OBS_Fullv>:
 * OBS_Full() - Return true if there are open spots
 * ======================================================================================================================
 */
bool OBS_Full() {
  // Scan OBS for free spot
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23ec040:	2300      	movs	r3, #0
    if (obs[i].inuse == false) {
 23ec042:	f640 2298 	movw	r2, #2712	; 0xa98
 23ec046:	4904      	ldr	r1, [pc, #16]	; (23ec058 <_Z8OBS_Fullv+0x18>)
 23ec048:	fb02 f003 	mul.w	r0, r2, r3
 23ec04c:	5c40      	ldrb	r0, [r0, r1]
 23ec04e:	b110      	cbz	r0, 23ec056 <_Z8OBS_Fullv+0x16>
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23ec050:	3301      	adds	r3, #1
 23ec052:	2b11      	cmp	r3, #17
 23ec054:	d1f8      	bne.n	23ec048 <_Z8OBS_Fullv+0x8>
      return (false);
    }
  }
  return (true);
}
 23ec056:	4770      	bx	lr
 23ec058:	1006f558 	.word	0x1006f558

023ec05c <_Z8OBS_Openv>:
/*
 * ======================================================================================================================
 * OBS_Open() - Find a free OBS and return index
 * ======================================================================================================================
 */
int OBS_Open() {
 23ec05c:	b508      	push	{r3, lr}
  // Scan OBS for free spot
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23ec05e:	2000      	movs	r0, #0
    if (obs[i].inuse == false) {
 23ec060:	f640 2398 	movw	r3, #2712	; 0xa98
 23ec064:	4a07      	ldr	r2, [pc, #28]	; (23ec084 <_Z8OBS_Openv+0x28>)
 23ec066:	fb03 f100 	mul.w	r1, r3, r0
 23ec06a:	5c89      	ldrb	r1, [r1, r2]
 23ec06c:	b141      	cbz	r1, 23ec080 <_Z8OBS_Openv+0x24>
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23ec06e:	3001      	adds	r0, #1
 23ec070:	2811      	cmp	r0, #17
 23ec072:	d1f8      	bne.n	23ec066 <_Z8OBS_Openv+0xa>
      return (i);
    }
  }

  // All Observations are inuse
  Output ("OBS[ALL]->N2S");
 23ec074:	4804      	ldr	r0, [pc, #16]	; (23ec088 <_Z8OBS_Openv+0x2c>)
 23ec076:	f7fc fc6b 	bl	23e8950 <_Z6OutputPKc>

  // Save All N Observations to Need2Send File
  OBS_N2S_SaveAll();
 23ec07a:	f7ff ff9f 	bl	23ebfbc <_Z15OBS_N2S_SaveAllv>
 23ec07e:	2000      	movs	r0, #0

  // All OBS are Clear so return the first OBS 
  return (0);
}
 23ec080:	bd08      	pop	{r3, pc}
 23ec082:	bf00      	nop
 23ec084:	1006f558 	.word	0x1006f558
 23ec088:	023fdce1 	.word	0x023fdce1

023ec08c <_Z10GetPinNametPc>:
 /*
 * ======================================================================================================================
 * GetPinName() - return the pin name in provider buffer
 * ======================================================================================================================
 */
void GetPinName(pin_t pin, char *pinname) {
 23ec08c:	b530      	push	{r4, r5, lr}
 23ec08e:	b0bd      	sub	sp, #244	; 0xf4
 23ec090:	4605      	mov	r5, r0
 23ec092:	460c      	mov	r4, r1
  struct PinMap {
      pin_t pin;
      const char *name;
  };

  const PinMap pinTable[] = {
 23ec094:	22f0      	movs	r2, #240	; 0xf0
 23ec096:	4668      	mov	r0, sp
 23ec098:	490b      	ldr	r1, [pc, #44]	; (23ec0c8 <_Z10GetPinNametPc+0x3c>)
 23ec09a:	f010 fec7 	bl	23fce2c <memcpy>
      { SDA, "SDA" }, { SCL, "SCL" },
      { MOSI, "MOSI" }, { MISO, "MISO" }, { SCK, "SCK" },
      { SS, "SS" }
  };

  for (size_t i = 0; i < sizeof(pinTable) / sizeof(pinTable[0]); ++i) {
 23ec09e:	2300      	movs	r3, #0
      if (pin == pinTable[i].pin) {
 23ec0a0:	f83d 2033 	ldrh.w	r2, [sp, r3, lsl #3]
 23ec0a4:	42aa      	cmp	r2, r5
 23ec0a6:	d10a      	bne.n	23ec0be <_Z10GetPinNametPc+0x32>
          strcpy(pinname, pinTable[i].name);
 23ec0a8:	aa3c      	add	r2, sp, #240	; 0xf0
 23ec0aa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 23ec0ae:	f853 1cec 	ldr.w	r1, [r3, #-236]
          return;
      }
  }

  strcpy(pinname, "NF");
 23ec0b2:	4620      	mov	r0, r4
}
 23ec0b4:	b03d      	add	sp, #244	; 0xf4
 23ec0b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  strcpy(pinname, "NF");
 23ec0ba:	f010 bf39 	b.w	23fcf30 <strcpy>
  for (size_t i = 0; i < sizeof(pinTable) / sizeof(pinTable[0]); ++i) {
 23ec0be:	3301      	adds	r3, #1
 23ec0c0:	2b1e      	cmp	r3, #30
 23ec0c2:	d1ed      	bne.n	23ec0a0 <_Z10GetPinNametPc+0x14>
  strcpy(pinname, "NF");
 23ec0c4:	4901      	ldr	r1, [pc, #4]	; (23ec0cc <_Z10GetPinNametPc+0x40>)
 23ec0c6:	e7f4      	b.n	23ec0b2 <_Z10GetPinNametPc+0x26>
 23ec0c8:	023fd15c 	.word	0x023fd15c
 23ec0cc:	023fd75f 	.word	0x023fd75f

023ec0d0 <_Z11DeviceResetv>:
/*
 * ======================================================================================================================
 * DeviceReset() - Kill power to ourselves and do a cold boot
 * ======================================================================================================================
 */
void DeviceReset() {
 23ec0d0:	b508      	push	{r3, lr}
  digitalWrite(REBOOT_PIN, HIGH);
 23ec0d2:	2101      	movs	r1, #1
 23ec0d4:	2013      	movs	r0, #19
 23ec0d6:	f00e f8aa 	bl	23fa22e <digitalWrite>
  delay(5000);
 23ec0da:	f241 3088 	movw	r0, #5000	; 0x1388
 23ec0de:	f00c f91d 	bl	23f831c <delay>
  // Should not get here if relay / watchdog is connected.
  digitalWrite(REBOOT_PIN, LOW);
 23ec0e2:	2100      	movs	r1, #0
 23ec0e4:	2013      	movs	r0, #19
 23ec0e6:	f00e f8a2 	bl	23fa22e <digitalWrite>
  delay(2000); 
 23ec0ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23ec0ee:	f00c f915 	bl	23f831c <delay>

  // May never get here if relay board / watchdog not connected.

  // Resets the device, just like hitting the reset button or powering down and back up.
  System.reset();
}
 23ec0f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  System.reset();
 23ec0f6:	f00d bd3b 	b.w	23f9b70 <_ZN11SystemClass5resetEv>
	...

023ec0fc <_Z17Function_DoAction6String>:
/*
 * ======================================================================================================================
 * Function_DoAction() - Handler for Particle Function DoAction     
 * ======================================================================================================================
 */
int Function_DoAction(String s) {
 23ec0fc:	b530      	push	{r4, r5, lr}
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
 23ec0fe:	6805      	ldr	r5, [r0, #0]
  if (strcmp (s,"REBOOT") == 0) {  // Reboot - We loose untransmitted observations. But they are save to SD.
 23ec100:	498f      	ldr	r1, [pc, #572]	; (23ec340 <_Z17Function_DoAction6String+0x244>)
 23ec102:	4628      	mov	r0, r5
int Function_DoAction(String s) {
 23ec104:	b08f      	sub	sp, #60	; 0x3c
  if (strcmp (s,"REBOOT") == 0) {  // Reboot - We loose untransmitted observations. But they are save to SD.
 23ec106:	f7fb fb85 	bl	23e7814 <strcmp>
 23ec10a:	4604      	mov	r4, r0
 23ec10c:	b968      	cbnz	r0, 23ec12a <_Z17Function_DoAction6String+0x2e>
    Output("DoAction:REBOOT");     // Do a SEND before a REBOOT to address the abive issue.
 23ec10e:	488d      	ldr	r0, [pc, #564]	; (23ec344 <_Z17Function_DoAction6String+0x248>)
 23ec110:	f7fc fc1e 	bl	23e8950 <_Z6OutputPKc>
    EEPROM_SaveUnreportedRain();
 23ec114:	f7ff f894 	bl	23eb240 <_Z25EEPROM_SaveUnreportedRainv>
    delay(1000);
 23ec118:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23ec11c:	f00c f8fe 	bl	23f831c <delay>

    DeviceReset();
 23ec120:	f7ff ffd6 	bl	23ec0d0 <_Z11DeviceResetv>

  else {
    Output("DoAction:UKN"); 
    return(-1);
  }
}
 23ec124:	4620      	mov	r0, r4
 23ec126:	b00f      	add	sp, #60	; 0x3c
 23ec128:	bd30      	pop	{r4, r5, pc}
  else if (strcmp (s,"INFO") == 0) {  // Send System Information
 23ec12a:	4628      	mov	r0, r5
 23ec12c:	4986      	ldr	r1, [pc, #536]	; (23ec348 <_Z17Function_DoAction6String+0x24c>)
 23ec12e:	f7fb fb71 	bl	23e7814 <strcmp>
 23ec132:	4604      	mov	r4, r0
 23ec134:	b930      	cbnz	r0, 23ec144 <_Z17Function_DoAction6String+0x48>
    Output("DoAction:INFO");
 23ec136:	4885      	ldr	r0, [pc, #532]	; (23ec34c <_Z17Function_DoAction6String+0x250>)
 23ec138:	f7fc fc0a 	bl	23e8950 <_Z6OutputPKc>
    SendSystemInformation=true;
 23ec13c:	2201      	movs	r2, #1
 23ec13e:	4b84      	ldr	r3, [pc, #528]	; (23ec350 <_Z17Function_DoAction6String+0x254>)
 23ec140:	701a      	strb	r2, [r3, #0]
    return(0);  
 23ec142:	e7ef      	b.n	23ec124 <_Z17Function_DoAction6String+0x28>
  else if (strcmp (s,"SEND") == 0) {  // Send OBS Now
 23ec144:	4628      	mov	r0, r5
 23ec146:	4983      	ldr	r1, [pc, #524]	; (23ec354 <_Z17Function_DoAction6String+0x258>)
 23ec148:	f7fb fb64 	bl	23e7814 <strcmp>
 23ec14c:	4604      	mov	r4, r0
 23ec14e:	b940      	cbnz	r0, 23ec162 <_Z17Function_DoAction6String+0x66>
    Output("DoAction:SEND");
 23ec150:	4881      	ldr	r0, [pc, #516]	; (23ec358 <_Z17Function_DoAction6String+0x25c>)
 23ec152:	f7fc fbfd 	bl	23e8950 <_Z6OutputPKc>
    LastTransmitTime=0;
 23ec156:	2000      	movs	r0, #0
 23ec158:	2100      	movs	r1, #0
 23ec15a:	4b80      	ldr	r3, [pc, #512]	; (23ec35c <_Z17Function_DoAction6String+0x260>)
 23ec15c:	e9c3 0100 	strd	r0, r1, [r3]
    return(0);  
 23ec160:	e7e0      	b.n	23ec124 <_Z17Function_DoAction6String+0x28>
  else if (strcmp (s,"CRT") == 0) { // Clear Rain Totals
 23ec162:	4628      	mov	r0, r5
 23ec164:	497e      	ldr	r1, [pc, #504]	; (23ec360 <_Z17Function_DoAction6String+0x264>)
 23ec166:	f7fb fb55 	bl	23e7814 <strcmp>
 23ec16a:	4604      	mov	r4, r0
 23ec16c:	b948      	cbnz	r0, 23ec182 <_Z17Function_DoAction6String+0x86>
    time32_t current_time = Time.now();
 23ec16e:	f00d fdcb 	bl	23f9d08 <_ZN9TimeClass3nowEv>
 23ec172:	4605      	mov	r5, r0
    Output("DoAction:CRT");
 23ec174:	487b      	ldr	r0, [pc, #492]	; (23ec364 <_Z17Function_DoAction6String+0x268>)
 23ec176:	f7fc fbeb 	bl	23e8950 <_Z6OutputPKc>
    EEPROM_ClearRainTotals(current_time);
 23ec17a:	4628      	mov	r0, r5
 23ec17c:	f7fe ff48 	bl	23eb010 <_Z22EEPROM_ClearRainTotalsl>
    return(0);
 23ec180:	e7d0      	b.n	23ec124 <_Z17Function_DoAction6String+0x28>
  else if (strcmp (s,"A4DIST") == 0) { // Set A4 State File to Distance
 23ec182:	4628      	mov	r0, r5
 23ec184:	4978      	ldr	r1, [pc, #480]	; (23ec368 <_Z17Function_DoAction6String+0x26c>)
 23ec186:	f7fb fb45 	bl	23e7814 <strcmp>
 23ec18a:	4604      	mov	r4, r0
 23ec18c:	2800      	cmp	r0, #0
 23ec18e:	d15a      	bne.n	23ec246 <_Z17Function_DoAction6String+0x14a>
    Output("DoAction:A4DIST");
 23ec190:	4876      	ldr	r0, [pc, #472]	; (23ec36c <_Z17Function_DoAction6String+0x270>)
 23ec192:	f7fc fbdd 	bl	23e8950 <_Z6OutputPKc>
    if (SD_exists) {
 23ec196:	4b76      	ldr	r3, [pc, #472]	; (23ec370 <_Z17Function_DoAction6String+0x274>)
 23ec198:	781b      	ldrb	r3, [r3, #0]
 23ec19a:	2b00      	cmp	r3, #0
 23ec19c:	d04d      	beq.n	23ec23a <_Z17Function_DoAction6String+0x13e>
    return vwd()->exists(path);
 23ec19e:	4975      	ldr	r1, [pc, #468]	; (23ec374 <_Z17Function_DoAction6String+0x278>)
 23ec1a0:	4875      	ldr	r0, [pc, #468]	; (23ec378 <_Z17Function_DoAction6String+0x27c>)
 23ec1a2:	f7fc f99f 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_A4_RAIN_FILE)) {
 23ec1a6:	b148      	cbz	r0, 23ec1bc <_Z17Function_DoAction6String+0xc0>
        EEPROM_ClearRain2Totals();
 23ec1a8:	f7fe ff44 	bl	23eb034 <_Z23EEPROM_ClearRain2Totalsv>
    return FatFile::remove(vwd(), path);
 23ec1ac:	4971      	ldr	r1, [pc, #452]	; (23ec374 <_Z17Function_DoAction6String+0x278>)
 23ec1ae:	4872      	ldr	r0, [pc, #456]	; (23ec378 <_Z17Function_DoAction6String+0x27c>)
 23ec1b0:	f009 fd8d 	bl	23f5cce <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_A4_RAIN_FILE)) {
 23ec1b4:	b1d8      	cbz	r0, 23ec1ee <_Z17Function_DoAction6String+0xf2>
          Output ("A4=DIST, DEL RAIN:OK");
 23ec1b6:	4871      	ldr	r0, [pc, #452]	; (23ec37c <_Z17Function_DoAction6String+0x280>)
 23ec1b8:	f7fc fbca 	bl	23e8950 <_Z6OutputPKc>
    return vwd()->exists(path);
 23ec1bc:	4970      	ldr	r1, [pc, #448]	; (23ec380 <_Z17Function_DoAction6String+0x284>)
 23ec1be:	486e      	ldr	r0, [pc, #440]	; (23ec378 <_Z17Function_DoAction6String+0x27c>)
 23ec1c0:	f7fc f990 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_A4_DIST_FILE)) {
 23ec1c4:	b1c8      	cbz	r0, 23ec1fa <_Z17Function_DoAction6String+0xfe>
        Output ("A4=DIST, ALREADY EXISTS");    
 23ec1c6:	486f      	ldr	r0, [pc, #444]	; (23ec384 <_Z17Function_DoAction6String+0x288>)
          Output ("A4=DIST, SET");
 23ec1c8:	f7fc fbc2 	bl	23e8950 <_Z6OutputPKc>
      dg_adjustment = 2.5;
 23ec1cc:	4b6e      	ldr	r3, [pc, #440]	; (23ec388 <_Z17Function_DoAction6String+0x28c>)
 23ec1ce:	4a6f      	ldr	r2, [pc, #444]	; (23ec38c <_Z17Function_DoAction6String+0x290>)
 23ec1d0:	496f      	ldr	r1, [pc, #444]	; (23ec390 <_Z17Function_DoAction6String+0x294>)
 23ec1d2:	4869      	ldr	r0, [pc, #420]	; (23ec378 <_Z17Function_DoAction6String+0x27c>)
 23ec1d4:	601a      	str	r2, [r3, #0]
 23ec1d6:	f7fc f985 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_5M_DIST_FILE)) {
 23ec1da:	b360      	cbz	r0, 23ec236 <_Z17Function_DoAction6String+0x13a>
    return FatFile::remove(vwd(), path);
 23ec1dc:	496c      	ldr	r1, [pc, #432]	; (23ec390 <_Z17Function_DoAction6String+0x294>)
 23ec1de:	4866      	ldr	r0, [pc, #408]	; (23ec378 <_Z17Function_DoAction6String+0x27c>)
 23ec1e0:	f009 fd75 	bl	23f5cce <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_5M_DIST_FILE)) {
 23ec1e4:	b308      	cbz	r0, 23ec22a <_Z17Function_DoAction6String+0x12e>
          Output ("A4=DIST, DEL 5M:OK, 10M SET");
 23ec1e6:	486b      	ldr	r0, [pc, #428]	; (23ec394 <_Z17Function_DoAction6String+0x298>)
        Output ("TXI15M SET"); 
 23ec1e8:	f7fc fbb2 	bl	23e8950 <_Z6OutputPKc>
 23ec1ec:	e79a      	b.n	23ec124 <_Z17Function_DoAction6String+0x28>
          Output ("A4=DIST, DEL RAIN:ERR");
 23ec1ee:	486a      	ldr	r0, [pc, #424]	; (23ec398 <_Z17Function_DoAction6String+0x29c>)
          Output ("A4=RAIN, DEL DIST:ERR");
 23ec1f0:	f7fc fbae 	bl	23e8950 <_Z6OutputPKc>
          return(-2);
 23ec1f4:	f06f 0401 	mvn.w	r4, #1
 23ec1f8:	e794      	b.n	23ec124 <_Z17Function_DoAction6String+0x28>
    File tmpFile;
 23ec1fa:	a801      	add	r0, sp, #4
 23ec1fc:	f7fc f992 	bl	23e8524 <_ZN4FileC1Ev>
    tmpFile.open(vwd(), path, oflag);
 23ec200:	f244 2302 	movw	r3, #16898	; 0x4202
 23ec204:	4a5e      	ldr	r2, [pc, #376]	; (23ec380 <_Z17Function_DoAction6String+0x284>)
 23ec206:	495c      	ldr	r1, [pc, #368]	; (23ec378 <_Z17Function_DoAction6String+0x27c>)
 23ec208:	a805      	add	r0, sp, #20
 23ec20a:	f009 fd14 	bl	23f5c36 <_ZN7FatFile4openEPS_PKci>
        if (fp) {
 23ec20e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23ec212:	b123      	cbz	r3, 23ec21e <_Z17Function_DoAction6String+0x122>
          fp.close();
 23ec214:	a805      	add	r0, sp, #20
 23ec216:	f009 fd07 	bl	23f5c28 <_ZN7FatFile5closeEv>
          Output ("A4=DIST, SET");
 23ec21a:	4860      	ldr	r0, [pc, #384]	; (23ec39c <_Z17Function_DoAction6String+0x2a0>)
 23ec21c:	e7d4      	b.n	23ec1c8 <_Z17Function_DoAction6String+0xcc>
          Output ("A4=DIST, OPEN ERR");
 23ec21e:	4860      	ldr	r0, [pc, #384]	; (23ec3a0 <_Z17Function_DoAction6String+0x2a4>)
          Output ("A4=RAIN, OPEN ERR");
 23ec220:	f7fc fb96 	bl	23e8950 <_Z6OutputPKc>
          return(-3);
 23ec224:	f06f 0402 	mvn.w	r4, #2
 23ec228:	e77c      	b.n	23ec124 <_Z17Function_DoAction6String+0x28>
          Output ("A4=DIST, DEL 5M:ERR");
 23ec22a:	485e      	ldr	r0, [pc, #376]	; (23ec3a4 <_Z17Function_DoAction6String+0x2a8>)
          Output ("A4=RAIN, DEL 5M:ERR");
 23ec22c:	f7fc fb90 	bl	23e8950 <_Z6OutputPKc>
          return(-4);
 23ec230:	f06f 0403 	mvn.w	r4, #3
 23ec234:	e776      	b.n	23ec124 <_Z17Function_DoAction6String+0x28>
        Output ("A4=DIST, 10M");
 23ec236:	485c      	ldr	r0, [pc, #368]	; (23ec3a8 <_Z17Function_DoAction6String+0x2ac>)
 23ec238:	e7d6      	b.n	23ec1e8 <_Z17Function_DoAction6String+0xec>
      Output("A4=DIST, SD NF"); 
 23ec23a:	485c      	ldr	r0, [pc, #368]	; (23ec3ac <_Z17Function_DoAction6String+0x2b0>)
    Output("DoAction:UKN"); 
 23ec23c:	f7fc fb88 	bl	23e8950 <_Z6OutputPKc>
    return(-1);
 23ec240:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 23ec244:	e76e      	b.n	23ec124 <_Z17Function_DoAction6String+0x28>
  else if (strcmp (s,"A4RAIN") == 0) { // Set A4 State File to Rain
 23ec246:	4628      	mov	r0, r5
 23ec248:	4959      	ldr	r1, [pc, #356]	; (23ec3b0 <_Z17Function_DoAction6String+0x2b4>)
 23ec24a:	f7fb fae3 	bl	23e7814 <strcmp>
 23ec24e:	4604      	mov	r4, r0
 23ec250:	2800      	cmp	r0, #0
 23ec252:	d143      	bne.n	23ec2dc <_Z17Function_DoAction6String+0x1e0>
    Output("DoAction:A4RAIN");
 23ec254:	4857      	ldr	r0, [pc, #348]	; (23ec3b4 <_Z17Function_DoAction6String+0x2b8>)
 23ec256:	f7fc fb7b 	bl	23e8950 <_Z6OutputPKc>
    if (SD_exists) {
 23ec25a:	4b45      	ldr	r3, [pc, #276]	; (23ec370 <_Z17Function_DoAction6String+0x274>)
 23ec25c:	781b      	ldrb	r3, [r3, #0]
 23ec25e:	2b00      	cmp	r3, #0
 23ec260:	d03a      	beq.n	23ec2d8 <_Z17Function_DoAction6String+0x1dc>
    return vwd()->exists(path);
 23ec262:	4947      	ldr	r1, [pc, #284]	; (23ec380 <_Z17Function_DoAction6String+0x284>)
 23ec264:	4844      	ldr	r0, [pc, #272]	; (23ec378 <_Z17Function_DoAction6String+0x27c>)
 23ec266:	f7fc f93d 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_A4_DIST_FILE)) {
 23ec26a:	b138      	cbz	r0, 23ec27c <_Z17Function_DoAction6String+0x180>
    return FatFile::remove(vwd(), path);
 23ec26c:	4944      	ldr	r1, [pc, #272]	; (23ec380 <_Z17Function_DoAction6String+0x284>)
 23ec26e:	4842      	ldr	r0, [pc, #264]	; (23ec378 <_Z17Function_DoAction6String+0x27c>)
 23ec270:	f009 fd2d 	bl	23f5cce <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_A4_DIST_FILE)) {
 23ec274:	b1b0      	cbz	r0, 23ec2a4 <_Z17Function_DoAction6String+0x1a8>
          Output ("A4=RAIN, DEL DIST:OK");
 23ec276:	4850      	ldr	r0, [pc, #320]	; (23ec3b8 <_Z17Function_DoAction6String+0x2bc>)
 23ec278:	f7fc fb6a 	bl	23e8950 <_Z6OutputPKc>
    return vwd()->exists(path);
 23ec27c:	4944      	ldr	r1, [pc, #272]	; (23ec390 <_Z17Function_DoAction6String+0x294>)
 23ec27e:	483e      	ldr	r0, [pc, #248]	; (23ec378 <_Z17Function_DoAction6String+0x27c>)
 23ec280:	f7fc f930 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_5M_DIST_FILE)) {
 23ec284:	b138      	cbz	r0, 23ec296 <_Z17Function_DoAction6String+0x19a>
    return FatFile::remove(vwd(), path);
 23ec286:	4942      	ldr	r1, [pc, #264]	; (23ec390 <_Z17Function_DoAction6String+0x294>)
 23ec288:	483b      	ldr	r0, [pc, #236]	; (23ec378 <_Z17Function_DoAction6String+0x27c>)
 23ec28a:	f009 fd20 	bl	23f5cce <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_5M_DIST_FILE)) {
 23ec28e:	b158      	cbz	r0, 23ec2a8 <_Z17Function_DoAction6String+0x1ac>
          Output ("A4=RAIN, DEL 5M:OK");
 23ec290:	484a      	ldr	r0, [pc, #296]	; (23ec3bc <_Z17Function_DoAction6String+0x2c0>)
 23ec292:	f7fc fb5d 	bl	23e8950 <_Z6OutputPKc>
    return vwd()->exists(path);
 23ec296:	4937      	ldr	r1, [pc, #220]	; (23ec374 <_Z17Function_DoAction6String+0x278>)
 23ec298:	4837      	ldr	r0, [pc, #220]	; (23ec378 <_Z17Function_DoAction6String+0x27c>)
 23ec29a:	f7fc f923 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_A4_RAIN_FILE)) {
 23ec29e:	b128      	cbz	r0, 23ec2ac <_Z17Function_DoAction6String+0x1b0>
        Output ("A4=RAIN, ALREADY EXISTS");      
 23ec2a0:	4847      	ldr	r0, [pc, #284]	; (23ec3c0 <_Z17Function_DoAction6String+0x2c4>)
 23ec2a2:	e7a1      	b.n	23ec1e8 <_Z17Function_DoAction6String+0xec>
          Output ("A4=RAIN, DEL DIST:ERR");
 23ec2a4:	4847      	ldr	r0, [pc, #284]	; (23ec3c4 <_Z17Function_DoAction6String+0x2c8>)
 23ec2a6:	e7a3      	b.n	23ec1f0 <_Z17Function_DoAction6String+0xf4>
          Output ("A4=RAIN, DEL 5M:ERR");
 23ec2a8:	4847      	ldr	r0, [pc, #284]	; (23ec3c8 <_Z17Function_DoAction6String+0x2cc>)
 23ec2aa:	e7bf      	b.n	23ec22c <_Z17Function_DoAction6String+0x130>
        EEPROM_ClearRain2Totals(); // Just a good thing to do.
 23ec2ac:	f7fe fec2 	bl	23eb034 <_Z23EEPROM_ClearRain2Totalsv>
    File tmpFile;
 23ec2b0:	a801      	add	r0, sp, #4
 23ec2b2:	f7fc f937 	bl	23e8524 <_ZN4FileC1Ev>
    tmpFile.open(vwd(), path, oflag);
 23ec2b6:	f244 2302 	movw	r3, #16898	; 0x4202
 23ec2ba:	4a2e      	ldr	r2, [pc, #184]	; (23ec374 <_Z17Function_DoAction6String+0x278>)
 23ec2bc:	492e      	ldr	r1, [pc, #184]	; (23ec378 <_Z17Function_DoAction6String+0x27c>)
 23ec2be:	a805      	add	r0, sp, #20
 23ec2c0:	f009 fcb9 	bl	23f5c36 <_ZN7FatFile4openEPS_PKci>
        if (fp) {
 23ec2c4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23ec2c8:	b123      	cbz	r3, 23ec2d4 <_Z17Function_DoAction6String+0x1d8>
          fp.close();
 23ec2ca:	a805      	add	r0, sp, #20
 23ec2cc:	f009 fcac 	bl	23f5c28 <_ZN7FatFile5closeEv>
          Output ("A4=RAIN, SET");
 23ec2d0:	483e      	ldr	r0, [pc, #248]	; (23ec3cc <_Z17Function_DoAction6String+0x2d0>)
 23ec2d2:	e789      	b.n	23ec1e8 <_Z17Function_DoAction6String+0xec>
          Output ("A4=RAIN, OPEN ERR");
 23ec2d4:	483e      	ldr	r0, [pc, #248]	; (23ec3d0 <_Z17Function_DoAction6String+0x2d4>)
 23ec2d6:	e7a3      	b.n	23ec220 <_Z17Function_DoAction6String+0x124>
      Output("A4=RAIN, SD NF"); 
 23ec2d8:	483e      	ldr	r0, [pc, #248]	; (23ec3d4 <_Z17Function_DoAction6String+0x2d8>)
 23ec2da:	e7af      	b.n	23ec23c <_Z17Function_DoAction6String+0x140>
  else if (strcmp (s,"5MDIST") == 0) { // Set 5M Distance Sensor State File
 23ec2dc:	4628      	mov	r0, r5
 23ec2de:	493e      	ldr	r1, [pc, #248]	; (23ec3d8 <_Z17Function_DoAction6String+0x2dc>)
 23ec2e0:	f7fb fa98 	bl	23e7814 <strcmp>
 23ec2e4:	4604      	mov	r4, r0
 23ec2e6:	2800      	cmp	r0, #0
 23ec2e8:	f040 8084 	bne.w	23ec3f4 <_Z17Function_DoAction6String+0x2f8>
    Output("DoAction:5MDIST");
 23ec2ec:	483b      	ldr	r0, [pc, #236]	; (23ec3dc <_Z17Function_DoAction6String+0x2e0>)
 23ec2ee:	f7fc fb2f 	bl	23e8950 <_Z6OutputPKc>
    if (SD_exists) {
 23ec2f2:	4b1f      	ldr	r3, [pc, #124]	; (23ec370 <_Z17Function_DoAction6String+0x274>)
 23ec2f4:	781b      	ldrb	r3, [r3, #0]
 23ec2f6:	b30b      	cbz	r3, 23ec33c <_Z17Function_DoAction6String+0x240>
    return vwd()->exists(path);
 23ec2f8:	4925      	ldr	r1, [pc, #148]	; (23ec390 <_Z17Function_DoAction6String+0x294>)
 23ec2fa:	481f      	ldr	r0, [pc, #124]	; (23ec378 <_Z17Function_DoAction6String+0x27c>)
 23ec2fc:	f7fc f8f2 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_5M_DIST_FILE)) {
 23ec300:	b108      	cbz	r0, 23ec306 <_Z17Function_DoAction6String+0x20a>
        Output ("5MDIST, ALREADY EXISTS");      
 23ec302:	4837      	ldr	r0, [pc, #220]	; (23ec3e0 <_Z17Function_DoAction6String+0x2e4>)
 23ec304:	e770      	b.n	23ec1e8 <_Z17Function_DoAction6String+0xec>
    File tmpFile;
 23ec306:	a801      	add	r0, sp, #4
 23ec308:	f7fc f90c 	bl	23e8524 <_ZN4FileC1Ev>
    tmpFile.open(vwd(), path, oflag);
 23ec30c:	f244 2302 	movw	r3, #16898	; 0x4202
 23ec310:	4a1f      	ldr	r2, [pc, #124]	; (23ec390 <_Z17Function_DoAction6String+0x294>)
 23ec312:	4919      	ldr	r1, [pc, #100]	; (23ec378 <_Z17Function_DoAction6String+0x27c>)
 23ec314:	a805      	add	r0, sp, #20
 23ec316:	f009 fc8e 	bl	23f5c36 <_ZN7FatFile4openEPS_PKci>
        if (fp) {
 23ec31a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23ec31e:	b13b      	cbz	r3, 23ec330 <_Z17Function_DoAction6String+0x234>
          fp.close();
 23ec320:	a805      	add	r0, sp, #20
 23ec322:	f009 fc81 	bl	23f5c28 <_ZN7FatFile5closeEv>
          dg_adjustment = 1.25;
 23ec326:	4b18      	ldr	r3, [pc, #96]	; (23ec388 <_Z17Function_DoAction6String+0x28c>)
 23ec328:	4a2e      	ldr	r2, [pc, #184]	; (23ec3e4 <_Z17Function_DoAction6String+0x2e8>)
          Output ("5MDIST SET");
 23ec32a:	482f      	ldr	r0, [pc, #188]	; (23ec3e8 <_Z17Function_DoAction6String+0x2ec>)
          dg_adjustment = 1.25;
 23ec32c:	601a      	str	r2, [r3, #0]
          Output ("5MDIST SET");
 23ec32e:	e75b      	b.n	23ec1e8 <_Z17Function_DoAction6String+0xec>
          Output ("5MDIST OPEN ERR");
 23ec330:	482e      	ldr	r0, [pc, #184]	; (23ec3ec <_Z17Function_DoAction6String+0x2f0>)
          Output ("A4=RAW, OPEN ERR");
 23ec332:	f7fc fb0d 	bl	23e8950 <_Z6OutputPKc>
          return(-5);
 23ec336:	f06f 0404 	mvn.w	r4, #4
 23ec33a:	e6f3      	b.n	23ec124 <_Z17Function_DoAction6String+0x28>
      Output("5MDIST, SD NF"); 
 23ec33c:	482c      	ldr	r0, [pc, #176]	; (23ec3f0 <_Z17Function_DoAction6String+0x2f4>)
 23ec33e:	e77d      	b.n	23ec23c <_Z17Function_DoAction6String+0x140>
 23ec340:	023fdcf8 	.word	0x023fdcf8
 23ec344:	023fdcef 	.word	0x023fdcef
 23ec348:	023fdd08 	.word	0x023fdd08
 23ec34c:	023fdcff 	.word	0x023fdcff
 23ec350:	1006a228 	.word	0x1006a228
 23ec354:	023fdd16 	.word	0x023fdd16
 23ec358:	023fdd0d 	.word	0x023fdd0d
 23ec35c:	1006a358 	.word	0x1006a358
 23ec360:	023fdd24 	.word	0x023fdd24
 23ec364:	023fdd1b 	.word	0x023fdd1b
 23ec368:	023fdd31 	.word	0x023fdd31
 23ec36c:	023fdd28 	.word	0x023fdd28
 23ec370:	1006a7ec 	.word	0x1006a7ec
 23ec374:	1006a1c2 	.word	0x1006a1c2
 23ec378:	1006a7a4 	.word	0x1006a7a4
 23ec37c:	023fdd38 	.word	0x023fdd38
 23ec380:	1006a1b7 	.word	0x1006a1b7
 23ec384:	023fdd63 	.word	0x023fdd63
 23ec388:	1006a254 	.word	0x1006a254
 23ec38c:	40200000 	.word	0x40200000
 23ec390:	1006a1ac 	.word	0x1006a1ac
 23ec394:	023fdd9a 	.word	0x023fdd9a
 23ec398:	023fdd4d 	.word	0x023fdd4d
 23ec39c:	023fdd7b 	.word	0x023fdd7b
 23ec3a0:	023fdd88 	.word	0x023fdd88
 23ec3a4:	023fddb6 	.word	0x023fddb6
 23ec3a8:	023fddca 	.word	0x023fddca
 23ec3ac:	023fddd7 	.word	0x023fddd7
 23ec3b0:	023fddef 	.word	0x023fddef
 23ec3b4:	023fdde6 	.word	0x023fdde6
 23ec3b8:	023fddf6 	.word	0x023fddf6
 23ec3bc:	023fde21 	.word	0x023fde21
 23ec3c0:	023fde48 	.word	0x023fde48
 23ec3c4:	023fde0b 	.word	0x023fde0b
 23ec3c8:	023fde34 	.word	0x023fde34
 23ec3cc:	023fde60 	.word	0x023fde60
 23ec3d0:	023fde6d 	.word	0x023fde6d
 23ec3d4:	023fde7f 	.word	0x023fde7f
 23ec3d8:	023fde97 	.word	0x023fde97
 23ec3dc:	023fde8e 	.word	0x023fde8e
 23ec3e0:	023fde9e 	.word	0x023fde9e
 23ec3e4:	3fa00000 	.word	0x3fa00000
 23ec3e8:	023fdeb5 	.word	0x023fdeb5
 23ec3ec:	023fdec0 	.word	0x023fdec0
 23ec3f0:	023fded0 	.word	0x023fded0
  else if (strcmp (s,"A4RAW") == 0) { // Set A4 State File to Raw
 23ec3f4:	4628      	mov	r0, r5
 23ec3f6:	498b      	ldr	r1, [pc, #556]	; (23ec624 <_Z17Function_DoAction6String+0x528>)
 23ec3f8:	f7fb fa0c 	bl	23e7814 <strcmp>
 23ec3fc:	4604      	mov	r4, r0
 23ec3fe:	2800      	cmp	r0, #0
 23ec400:	d155      	bne.n	23ec4ae <_Z17Function_DoAction6String+0x3b2>
    Output("DoAction:A4RAW");
 23ec402:	4889      	ldr	r0, [pc, #548]	; (23ec628 <_Z17Function_DoAction6String+0x52c>)
 23ec404:	f7fc faa4 	bl	23e8950 <_Z6OutputPKc>
    if (SD_exists) {
 23ec408:	4b88      	ldr	r3, [pc, #544]	; (23ec62c <_Z17Function_DoAction6String+0x530>)
 23ec40a:	781b      	ldrb	r3, [r3, #0]
 23ec40c:	2b00      	cmp	r3, #0
 23ec40e:	d04c      	beq.n	23ec4aa <_Z17Function_DoAction6String+0x3ae>
    return vwd()->exists(path);
 23ec410:	4987      	ldr	r1, [pc, #540]	; (23ec630 <_Z17Function_DoAction6String+0x534>)
 23ec412:	4888      	ldr	r0, [pc, #544]	; (23ec634 <_Z17Function_DoAction6String+0x538>)
 23ec414:	f7fc f866 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_A4_RAIN_FILE)) {
 23ec418:	b158      	cbz	r0, 23ec432 <_Z17Function_DoAction6String+0x336>
        EEPROM_ClearRain2Totals();
 23ec41a:	f7fe fe0b 	bl	23eb034 <_Z23EEPROM_ClearRain2Totalsv>
    return FatFile::remove(vwd(), path);
 23ec41e:	4984      	ldr	r1, [pc, #528]	; (23ec630 <_Z17Function_DoAction6String+0x534>)
 23ec420:	4884      	ldr	r0, [pc, #528]	; (23ec634 <_Z17Function_DoAction6String+0x538>)
 23ec422:	f009 fc54 	bl	23f5cce <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_A4_RAIN_FILE)) {
 23ec426:	2800      	cmp	r0, #0
 23ec428:	f43f aee1 	beq.w	23ec1ee <_Z17Function_DoAction6String+0xf2>
          Output ("A4=DIST, DEL RAIN:OK");
 23ec42c:	4882      	ldr	r0, [pc, #520]	; (23ec638 <_Z17Function_DoAction6String+0x53c>)
 23ec42e:	f7fc fa8f 	bl	23e8950 <_Z6OutputPKc>
    return vwd()->exists(path);
 23ec432:	4982      	ldr	r1, [pc, #520]	; (23ec63c <_Z17Function_DoAction6String+0x540>)
 23ec434:	487f      	ldr	r0, [pc, #508]	; (23ec634 <_Z17Function_DoAction6String+0x538>)
 23ec436:	f7fc f855 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_A4_DIST_FILE)) {
 23ec43a:	b138      	cbz	r0, 23ec44c <_Z17Function_DoAction6String+0x350>
    return FatFile::remove(vwd(), path);
 23ec43c:	497f      	ldr	r1, [pc, #508]	; (23ec63c <_Z17Function_DoAction6String+0x540>)
 23ec43e:	487d      	ldr	r0, [pc, #500]	; (23ec634 <_Z17Function_DoAction6String+0x538>)
 23ec440:	f009 fc45 	bl	23f5cce <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_A4_DIST_FILE)) {
 23ec444:	b1d8      	cbz	r0, 23ec47e <_Z17Function_DoAction6String+0x382>
          Output ("A4=DIST, DEL DIST:OK");
 23ec446:	487e      	ldr	r0, [pc, #504]	; (23ec640 <_Z17Function_DoAction6String+0x544>)
 23ec448:	f7fc fa82 	bl	23e8950 <_Z6OutputPKc>
      dg_adjustment = 2.5;
 23ec44c:	4b7d      	ldr	r3, [pc, #500]	; (23ec644 <_Z17Function_DoAction6String+0x548>)
 23ec44e:	4a7e      	ldr	r2, [pc, #504]	; (23ec648 <_Z17Function_DoAction6String+0x54c>)
    return vwd()->exists(path);
 23ec450:	497e      	ldr	r1, [pc, #504]	; (23ec64c <_Z17Function_DoAction6String+0x550>)
 23ec452:	4878      	ldr	r0, [pc, #480]	; (23ec634 <_Z17Function_DoAction6String+0x538>)
 23ec454:	601a      	str	r2, [r3, #0]
 23ec456:	f7fc f845 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_5M_DIST_FILE)) {
 23ec45a:	b148      	cbz	r0, 23ec470 <_Z17Function_DoAction6String+0x374>
    return FatFile::remove(vwd(), path);
 23ec45c:	497b      	ldr	r1, [pc, #492]	; (23ec64c <_Z17Function_DoAction6String+0x550>)
 23ec45e:	4875      	ldr	r0, [pc, #468]	; (23ec634 <_Z17Function_DoAction6String+0x538>)
 23ec460:	f009 fc35 	bl	23f5cce <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_5M_DIST_FILE)) {
 23ec464:	2800      	cmp	r0, #0
 23ec466:	f43f aee0 	beq.w	23ec22a <_Z17Function_DoAction6String+0x12e>
          Output ("A4=DIST, DEL 5M:OK");
 23ec46a:	4879      	ldr	r0, [pc, #484]	; (23ec650 <_Z17Function_DoAction6String+0x554>)
 23ec46c:	f7fc fa70 	bl	23e8950 <_Z6OutputPKc>
    return vwd()->exists(path);
 23ec470:	4978      	ldr	r1, [pc, #480]	; (23ec654 <_Z17Function_DoAction6String+0x558>)
 23ec472:	4870      	ldr	r0, [pc, #448]	; (23ec634 <_Z17Function_DoAction6String+0x538>)
 23ec474:	f7fc f836 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_A4_RAW_FILE)) {
 23ec478:	b118      	cbz	r0, 23ec482 <_Z17Function_DoAction6String+0x386>
        Output ("A4=RAW, ALREADY EXISTS");    
 23ec47a:	4877      	ldr	r0, [pc, #476]	; (23ec658 <_Z17Function_DoAction6String+0x55c>)
 23ec47c:	e6b4      	b.n	23ec1e8 <_Z17Function_DoAction6String+0xec>
          Output ("A4=DIST, DEL DIST:ERR");
 23ec47e:	4877      	ldr	r0, [pc, #476]	; (23ec65c <_Z17Function_DoAction6String+0x560>)
 23ec480:	e6ce      	b.n	23ec220 <_Z17Function_DoAction6String+0x124>
    File tmpFile;
 23ec482:	a801      	add	r0, sp, #4
 23ec484:	f7fc f84e 	bl	23e8524 <_ZN4FileC1Ev>
    tmpFile.open(vwd(), path, oflag);
 23ec488:	f244 2302 	movw	r3, #16898	; 0x4202
 23ec48c:	4a71      	ldr	r2, [pc, #452]	; (23ec654 <_Z17Function_DoAction6String+0x558>)
 23ec48e:	4969      	ldr	r1, [pc, #420]	; (23ec634 <_Z17Function_DoAction6String+0x538>)
 23ec490:	a805      	add	r0, sp, #20
 23ec492:	f009 fbd0 	bl	23f5c36 <_ZN7FatFile4openEPS_PKci>
        if (fp) {
 23ec496:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23ec49a:	b123      	cbz	r3, 23ec4a6 <_Z17Function_DoAction6String+0x3aa>
          fp.close();
 23ec49c:	a805      	add	r0, sp, #20
 23ec49e:	f009 fbc3 	bl	23f5c28 <_ZN7FatFile5closeEv>
          Output ("A4=RAW, SET");
 23ec4a2:	486f      	ldr	r0, [pc, #444]	; (23ec660 <_Z17Function_DoAction6String+0x564>)
 23ec4a4:	e6a0      	b.n	23ec1e8 <_Z17Function_DoAction6String+0xec>
          Output ("A4=RAW, OPEN ERR");
 23ec4a6:	486f      	ldr	r0, [pc, #444]	; (23ec664 <_Z17Function_DoAction6String+0x568>)
 23ec4a8:	e743      	b.n	23ec332 <_Z17Function_DoAction6String+0x236>
      Output("A4=RAW, SD NF"); 
 23ec4aa:	486f      	ldr	r0, [pc, #444]	; (23ec668 <_Z17Function_DoAction6String+0x56c>)
 23ec4ac:	e6c6      	b.n	23ec23c <_Z17Function_DoAction6String+0x140>
  else if (strcmp (s,"A4CLR") == 0) { // Clear A4 State Files
 23ec4ae:	4628      	mov	r0, r5
 23ec4b0:	496e      	ldr	r1, [pc, #440]	; (23ec66c <_Z17Function_DoAction6String+0x570>)
 23ec4b2:	f7fb f9af 	bl	23e7814 <strcmp>
 23ec4b6:	4604      	mov	r4, r0
 23ec4b8:	2800      	cmp	r0, #0
 23ec4ba:	d166      	bne.n	23ec58a <_Z17Function_DoAction6String+0x48e>
    Output("DoAction:A4CLR");
 23ec4bc:	486c      	ldr	r0, [pc, #432]	; (23ec670 <_Z17Function_DoAction6String+0x574>)
 23ec4be:	f7fc fa47 	bl	23e8950 <_Z6OutputPKc>
    if (SD_exists) {
 23ec4c2:	4b5a      	ldr	r3, [pc, #360]	; (23ec62c <_Z17Function_DoAction6String+0x530>)
 23ec4c4:	781b      	ldrb	r3, [r3, #0]
 23ec4c6:	2b00      	cmp	r3, #0
 23ec4c8:	d05d      	beq.n	23ec586 <_Z17Function_DoAction6String+0x48a>
    return vwd()->exists(path);
 23ec4ca:	495c      	ldr	r1, [pc, #368]	; (23ec63c <_Z17Function_DoAction6String+0x540>)
 23ec4cc:	4859      	ldr	r0, [pc, #356]	; (23ec634 <_Z17Function_DoAction6String+0x538>)
 23ec4ce:	f7fc f809 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_A4_DIST_FILE)) {
 23ec4d2:	b308      	cbz	r0, 23ec518 <_Z17Function_DoAction6String+0x41c>
    return FatFile::remove(vwd(), path);
 23ec4d4:	4959      	ldr	r1, [pc, #356]	; (23ec63c <_Z17Function_DoAction6String+0x540>)
 23ec4d6:	4857      	ldr	r0, [pc, #348]	; (23ec634 <_Z17Function_DoAction6String+0x538>)
 23ec4d8:	f009 fbf9 	bl	23f5cce <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_A4_DIST_FILE)) {
 23ec4dc:	b130      	cbz	r0, 23ec4ec <_Z17Function_DoAction6String+0x3f0>
          A4_State = A4_STATE_NULL;
 23ec4de:	2200      	movs	r2, #0
 23ec4e0:	4b64      	ldr	r3, [pc, #400]	; (23ec674 <_Z17Function_DoAction6String+0x578>)
          Output ("A4=CLR, DEL DIST:OK");
 23ec4e2:	4865      	ldr	r0, [pc, #404]	; (23ec678 <_Z17Function_DoAction6String+0x57c>)
          A4_State = A4_STATE_NULL;
 23ec4e4:	601a      	str	r2, [r3, #0]
        Output ("A4=CLR, DEL RAIN:NF");
 23ec4e6:	f7fc fa33 	bl	23e8950 <_Z6OutputPKc>
 23ec4ea:	e004      	b.n	23ec4f6 <_Z17Function_DoAction6String+0x3fa>
          Output ("A4=CLR, DEL DIST:ERR");
 23ec4ec:	4863      	ldr	r0, [pc, #396]	; (23ec67c <_Z17Function_DoAction6String+0x580>)
 23ec4ee:	f7fc fa2f 	bl	23e8950 <_Z6OutputPKc>
          state=-2;
 23ec4f2:	f06f 0401 	mvn.w	r4, #1
    return vwd()->exists(path);
 23ec4f6:	494e      	ldr	r1, [pc, #312]	; (23ec630 <_Z17Function_DoAction6String+0x534>)
 23ec4f8:	484e      	ldr	r0, [pc, #312]	; (23ec634 <_Z17Function_DoAction6String+0x538>)
 23ec4fa:	f7fb fff3 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_A4_RAIN_FILE)) {
 23ec4fe:	b310      	cbz	r0, 23ec546 <_Z17Function_DoAction6String+0x44a>
    return FatFile::remove(vwd(), path);
 23ec500:	494b      	ldr	r1, [pc, #300]	; (23ec630 <_Z17Function_DoAction6String+0x534>)
 23ec502:	484c      	ldr	r0, [pc, #304]	; (23ec634 <_Z17Function_DoAction6String+0x538>)
 23ec504:	f009 fbe3 	bl	23f5cce <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_A4_RAIN_FILE)) {
 23ec508:	b140      	cbz	r0, 23ec51c <_Z17Function_DoAction6String+0x420>
          A4_State = A4_STATE_NULL;      // We still need a reboot to get rid of ISR
 23ec50a:	2200      	movs	r2, #0
 23ec50c:	4b59      	ldr	r3, [pc, #356]	; (23ec674 <_Z17Function_DoAction6String+0x578>)
          Output ("A4=CLR, DEL RAIN:OK");
 23ec50e:	485c      	ldr	r0, [pc, #368]	; (23ec680 <_Z17Function_DoAction6String+0x584>)
          A4_State = A4_STATE_NULL;      // We still need a reboot to get rid of ISR
 23ec510:	601a      	str	r2, [r3, #0]
        Output ("A4=CLR, DEL RAIN:NF");
 23ec512:	f7fc fa1d 	bl	23e8950 <_Z6OutputPKc>
 23ec516:	e005      	b.n	23ec524 <_Z17Function_DoAction6String+0x428>
        Output ("A4=CLR, DEL RAIN:NF");
 23ec518:	485a      	ldr	r0, [pc, #360]	; (23ec684 <_Z17Function_DoAction6String+0x588>)
 23ec51a:	e7e4      	b.n	23ec4e6 <_Z17Function_DoAction6String+0x3ea>
          Output ("A4=CLR, DEL RAIN:ERR");
 23ec51c:	485a      	ldr	r0, [pc, #360]	; (23ec688 <_Z17Function_DoAction6String+0x58c>)
 23ec51e:	f7fc fa17 	bl	23e8950 <_Z6OutputPKc>
          state+=-3; // returns a -3 if also failed removing DIST file
 23ec522:	3c03      	subs	r4, #3
    return vwd()->exists(path);
 23ec524:	494b      	ldr	r1, [pc, #300]	; (23ec654 <_Z17Function_DoAction6String+0x558>)
 23ec526:	4843      	ldr	r0, [pc, #268]	; (23ec634 <_Z17Function_DoAction6String+0x538>)
 23ec528:	f7fb ffdc 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_A4_RAW_FILE)) {
 23ec52c:	b320      	cbz	r0, 23ec578 <_Z17Function_DoAction6String+0x47c>
    return FatFile::remove(vwd(), path);
 23ec52e:	4949      	ldr	r1, [pc, #292]	; (23ec654 <_Z17Function_DoAction6String+0x558>)
 23ec530:	4840      	ldr	r0, [pc, #256]	; (23ec634 <_Z17Function_DoAction6String+0x538>)
 23ec532:	f009 fbcc 	bl	23f5cce <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_A4_RAW_FILE)) {
 23ec536:	b140      	cbz	r0, 23ec54a <_Z17Function_DoAction6String+0x44e>
          A4_State = A4_STATE_NULL;
 23ec538:	2200      	movs	r2, #0
 23ec53a:	4b4e      	ldr	r3, [pc, #312]	; (23ec674 <_Z17Function_DoAction6String+0x578>)
          Output ("A4=CLR, DEL RAW:OK");
 23ec53c:	4853      	ldr	r0, [pc, #332]	; (23ec68c <_Z17Function_DoAction6String+0x590>)
          A4_State = A4_STATE_NULL;
 23ec53e:	601a      	str	r2, [r3, #0]
        Output ("A4=CLR, DEL RAIN:NF");
 23ec540:	f7fc fa06 	bl	23e8950 <_Z6OutputPKc>
 23ec544:	e005      	b.n	23ec552 <_Z17Function_DoAction6String+0x456>
        Output ("A4=CLR, DEL RAIN:NF");
 23ec546:	484f      	ldr	r0, [pc, #316]	; (23ec684 <_Z17Function_DoAction6String+0x588>)
 23ec548:	e7e3      	b.n	23ec512 <_Z17Function_DoAction6String+0x416>
          Output ("A4=CLR, DEL RAW:ERR");
 23ec54a:	4851      	ldr	r0, [pc, #324]	; (23ec690 <_Z17Function_DoAction6String+0x594>)
 23ec54c:	f7fc fa00 	bl	23e8950 <_Z6OutputPKc>
          state+=-4; // returns a -4 if also failed removing RAW file
 23ec550:	3c04      	subs	r4, #4
    return vwd()->exists(path);
 23ec552:	493e      	ldr	r1, [pc, #248]	; (23ec64c <_Z17Function_DoAction6String+0x550>)
 23ec554:	4837      	ldr	r0, [pc, #220]	; (23ec634 <_Z17Function_DoAction6String+0x538>)
 23ec556:	f7fb ffc5 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_5M_DIST_FILE)) {
 23ec55a:	2800      	cmp	r0, #0
 23ec55c:	f43f ade2 	beq.w	23ec124 <_Z17Function_DoAction6String+0x28>
    return FatFile::remove(vwd(), path);
 23ec560:	493a      	ldr	r1, [pc, #232]	; (23ec64c <_Z17Function_DoAction6String+0x550>)
 23ec562:	4834      	ldr	r0, [pc, #208]	; (23ec634 <_Z17Function_DoAction6String+0x538>)
 23ec564:	f009 fbb3 	bl	23f5cce <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_5M_DIST_FILE)) {
 23ec568:	b140      	cbz	r0, 23ec57c <_Z17Function_DoAction6String+0x480>
          Output ("A4=CLR, DEL 5M:OK");
 23ec56a:	484a      	ldr	r0, [pc, #296]	; (23ec694 <_Z17Function_DoAction6String+0x598>)
 23ec56c:	f7fc f9f0 	bl	23e8950 <_Z6OutputPKc>
          dg_adjustment = 2.5;
 23ec570:	4b34      	ldr	r3, [pc, #208]	; (23ec644 <_Z17Function_DoAction6String+0x548>)
 23ec572:	4a35      	ldr	r2, [pc, #212]	; (23ec648 <_Z17Function_DoAction6String+0x54c>)
 23ec574:	601a      	str	r2, [r3, #0]
 23ec576:	e5d5      	b.n	23ec124 <_Z17Function_DoAction6String+0x28>
        Output ("A4=CLR, DEL RAIN:NF");
 23ec578:	4842      	ldr	r0, [pc, #264]	; (23ec684 <_Z17Function_DoAction6String+0x588>)
 23ec57a:	e7e1      	b.n	23ec540 <_Z17Function_DoAction6String+0x444>
          Output ("A4=CLR, DEL 5M:ERR");
 23ec57c:	4846      	ldr	r0, [pc, #280]	; (23ec698 <_Z17Function_DoAction6String+0x59c>)
 23ec57e:	f7fc f9e7 	bl	23e8950 <_Z6OutputPKc>
          state+=-5;
 23ec582:	3c05      	subs	r4, #5
 23ec584:	e5ce      	b.n	23ec124 <_Z17Function_DoAction6String+0x28>
      Output("A4=CLR, SD NF"); 
 23ec586:	4845      	ldr	r0, [pc, #276]	; (23ec69c <_Z17Function_DoAction6String+0x5a0>)
 23ec588:	e658      	b.n	23ec23c <_Z17Function_DoAction6String+0x140>
  else if (strcmp (s,"A5RAW") == 0) { // Set A5 State File to Raw
 23ec58a:	4628      	mov	r0, r5
 23ec58c:	4944      	ldr	r1, [pc, #272]	; (23ec6a0 <_Z17Function_DoAction6String+0x5a4>)
 23ec58e:	f7fb f941 	bl	23e7814 <strcmp>
 23ec592:	4604      	mov	r4, r0
 23ec594:	bb28      	cbnz	r0, 23ec5e2 <_Z17Function_DoAction6String+0x4e6>
    Output("DoAction:A5RAW");
 23ec596:	4843      	ldr	r0, [pc, #268]	; (23ec6a4 <_Z17Function_DoAction6String+0x5a8>)
 23ec598:	f7fc f9da 	bl	23e8950 <_Z6OutputPKc>
    if (SD_exists) {
 23ec59c:	4b23      	ldr	r3, [pc, #140]	; (23ec62c <_Z17Function_DoAction6String+0x530>)
 23ec59e:	781b      	ldrb	r3, [r3, #0]
 23ec5a0:	b1eb      	cbz	r3, 23ec5de <_Z17Function_DoAction6String+0x4e2>
    return vwd()->exists(path);
 23ec5a2:	4941      	ldr	r1, [pc, #260]	; (23ec6a8 <_Z17Function_DoAction6String+0x5ac>)
 23ec5a4:	4823      	ldr	r0, [pc, #140]	; (23ec634 <_Z17Function_DoAction6String+0x538>)
 23ec5a6:	f7fb ff9d 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_A5_RAW_FILE)) {
 23ec5aa:	b108      	cbz	r0, 23ec5b0 <_Z17Function_DoAction6String+0x4b4>
        Output ("A5=RAW, ALREADY EXISTS");    
 23ec5ac:	483f      	ldr	r0, [pc, #252]	; (23ec6ac <_Z17Function_DoAction6String+0x5b0>)
 23ec5ae:	e61b      	b.n	23ec1e8 <_Z17Function_DoAction6String+0xec>
    File tmpFile;
 23ec5b0:	a801      	add	r0, sp, #4
 23ec5b2:	f7fb ffb7 	bl	23e8524 <_ZN4FileC1Ev>
    tmpFile.open(vwd(), path, oflag);
 23ec5b6:	f244 2302 	movw	r3, #16898	; 0x4202
 23ec5ba:	4a3b      	ldr	r2, [pc, #236]	; (23ec6a8 <_Z17Function_DoAction6String+0x5ac>)
 23ec5bc:	491d      	ldr	r1, [pc, #116]	; (23ec634 <_Z17Function_DoAction6String+0x538>)
 23ec5be:	a805      	add	r0, sp, #20
 23ec5c0:	f009 fb39 	bl	23f5c36 <_ZN7FatFile4openEPS_PKci>
        if (fp) {
 23ec5c4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23ec5c8:	b13b      	cbz	r3, 23ec5da <_Z17Function_DoAction6String+0x4de>
          fp.close();
 23ec5ca:	a805      	add	r0, sp, #20
 23ec5cc:	f009 fb2c 	bl	23f5c28 <_ZN7FatFile5closeEv>
          A5_State = A5_STATE_RAW;
 23ec5d0:	2201      	movs	r2, #1
 23ec5d2:	4b37      	ldr	r3, [pc, #220]	; (23ec6b0 <_Z17Function_DoAction6String+0x5b4>)
          Output ("A5=RAW, SET");
 23ec5d4:	4837      	ldr	r0, [pc, #220]	; (23ec6b4 <_Z17Function_DoAction6String+0x5b8>)
          A5_State = A5_STATE_RAW;
 23ec5d6:	601a      	str	r2, [r3, #0]
          Output ("A5=RAW, SET");
 23ec5d8:	e606      	b.n	23ec1e8 <_Z17Function_DoAction6String+0xec>
          Output ("A5=RAW, OPEN ERR");
 23ec5da:	4837      	ldr	r0, [pc, #220]	; (23ec6b8 <_Z17Function_DoAction6String+0x5bc>)
 23ec5dc:	e608      	b.n	23ec1f0 <_Z17Function_DoAction6String+0xf4>
      Output("A5=RAW, SD NF"); 
 23ec5de:	4837      	ldr	r0, [pc, #220]	; (23ec6bc <_Z17Function_DoAction6String+0x5c0>)
 23ec5e0:	e62c      	b.n	23ec23c <_Z17Function_DoAction6String+0x140>
  else if (strcmp (s,"A5CLR") == 0) { // Clear A5 State Files
 23ec5e2:	4628      	mov	r0, r5
 23ec5e4:	4936      	ldr	r1, [pc, #216]	; (23ec6c0 <_Z17Function_DoAction6String+0x5c4>)
 23ec5e6:	f7fb f915 	bl	23e7814 <strcmp>
 23ec5ea:	4604      	mov	r4, r0
 23ec5ec:	2800      	cmp	r0, #0
 23ec5ee:	d173      	bne.n	23ec6d8 <_Z17Function_DoAction6String+0x5dc>
    Output("DoAction:A5CLR");
 23ec5f0:	4834      	ldr	r0, [pc, #208]	; (23ec6c4 <_Z17Function_DoAction6String+0x5c8>)
 23ec5f2:	f7fc f9ad 	bl	23e8950 <_Z6OutputPKc>
    if (SD_exists) {
 23ec5f6:	4b0d      	ldr	r3, [pc, #52]	; (23ec62c <_Z17Function_DoAction6String+0x530>)
 23ec5f8:	781b      	ldrb	r3, [r3, #0]
 23ec5fa:	b18b      	cbz	r3, 23ec620 <_Z17Function_DoAction6String+0x524>
    return vwd()->exists(path);
 23ec5fc:	492a      	ldr	r1, [pc, #168]	; (23ec6a8 <_Z17Function_DoAction6String+0x5ac>)
 23ec5fe:	480d      	ldr	r0, [pc, #52]	; (23ec634 <_Z17Function_DoAction6String+0x538>)
 23ec600:	f7fb ff70 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_A5_RAW_FILE)) {
 23ec604:	b150      	cbz	r0, 23ec61c <_Z17Function_DoAction6String+0x520>
    return FatFile::remove(vwd(), path);
 23ec606:	4913      	ldr	r1, [pc, #76]	; (23ec654 <_Z17Function_DoAction6String+0x558>)
 23ec608:	480a      	ldr	r0, [pc, #40]	; (23ec634 <_Z17Function_DoAction6String+0x538>)
 23ec60a:	f009 fb60 	bl	23f5cce <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_A4_RAW_FILE)) {
 23ec60e:	b118      	cbz	r0, 23ec618 <_Z17Function_DoAction6String+0x51c>
          A5_State = A5_STATE_NULL;
 23ec610:	4b27      	ldr	r3, [pc, #156]	; (23ec6b0 <_Z17Function_DoAction6String+0x5b4>)
          Output ("A5=CLR, DEL RAW:OK");
 23ec612:	482d      	ldr	r0, [pc, #180]	; (23ec6c8 <_Z17Function_DoAction6String+0x5cc>)
          A5_State = A5_STATE_NULL;
 23ec614:	601c      	str	r4, [r3, #0]
          Output ("A5=CLR, DEL RAW:OK");
 23ec616:	e5e7      	b.n	23ec1e8 <_Z17Function_DoAction6String+0xec>
          Output ("A5=CLR, DEL RAW:ERR");
 23ec618:	482c      	ldr	r0, [pc, #176]	; (23ec6cc <_Z17Function_DoAction6String+0x5d0>)
 23ec61a:	e5e9      	b.n	23ec1f0 <_Z17Function_DoAction6String+0xf4>
        Output ("A5=CLR, DEL A5RAW:NF");
 23ec61c:	482c      	ldr	r0, [pc, #176]	; (23ec6d0 <_Z17Function_DoAction6String+0x5d4>)
 23ec61e:	e5e3      	b.n	23ec1e8 <_Z17Function_DoAction6String+0xec>
      Output("A5=CLR, SD NF"); 
 23ec620:	482c      	ldr	r0, [pc, #176]	; (23ec6d4 <_Z17Function_DoAction6String+0x5d8>)
 23ec622:	e60b      	b.n	23ec23c <_Z17Function_DoAction6String+0x140>
 23ec624:	023fdee7 	.word	0x023fdee7
 23ec628:	023fdede 	.word	0x023fdede
 23ec62c:	1006a7ec 	.word	0x1006a7ec
 23ec630:	1006a1c2 	.word	0x1006a1c2
 23ec634:	1006a7a4 	.word	0x1006a7a4
 23ec638:	023fdd38 	.word	0x023fdd38
 23ec63c:	1006a1b7 	.word	0x1006a1b7
 23ec640:	023fdeed 	.word	0x023fdeed
 23ec644:	1006a254 	.word	0x1006a254
 23ec648:	40200000 	.word	0x40200000
 23ec64c:	1006a1ac 	.word	0x1006a1ac
 23ec650:	023fdf18 	.word	0x023fdf18
 23ec654:	1006a1cd 	.word	0x1006a1cd
 23ec658:	023fdf2b 	.word	0x023fdf2b
 23ec65c:	023fdf02 	.word	0x023fdf02
 23ec660:	023fdf42 	.word	0x023fdf42
 23ec664:	023fdf4e 	.word	0x023fdf4e
 23ec668:	023fdf5f 	.word	0x023fdf5f
 23ec66c:	023fdf76 	.word	0x023fdf76
 23ec670:	023fdf6d 	.word	0x023fdf6d
 23ec674:	1006a2f4 	.word	0x1006a2f4
 23ec678:	023fdf7c 	.word	0x023fdf7c
 23ec67c:	023fdf90 	.word	0x023fdf90
 23ec680:	023fdfb9 	.word	0x023fdfb9
 23ec684:	023fdfa5 	.word	0x023fdfa5
 23ec688:	023fdfcd 	.word	0x023fdfcd
 23ec68c:	023fdfe2 	.word	0x023fdfe2
 23ec690:	023fdff5 	.word	0x023fdff5
 23ec694:	023fe009 	.word	0x023fe009
 23ec698:	023fe01b 	.word	0x023fe01b
 23ec69c:	023fe02e 	.word	0x023fe02e
 23ec6a0:	023fe045 	.word	0x023fe045
 23ec6a4:	023fe03c 	.word	0x023fe03c
 23ec6a8:	1006a1d7 	.word	0x1006a1d7
 23ec6ac:	023fe04b 	.word	0x023fe04b
 23ec6b0:	1006a2f8 	.word	0x1006a2f8
 23ec6b4:	023fe062 	.word	0x023fe062
 23ec6b8:	023fe06e 	.word	0x023fe06e
 23ec6bc:	023fe07f 	.word	0x023fe07f
 23ec6c0:	023fe096 	.word	0x023fe096
 23ec6c4:	023fe08d 	.word	0x023fe08d
 23ec6c8:	023fe09c 	.word	0x023fe09c
 23ec6cc:	023fe0af 	.word	0x023fe0af
 23ec6d0:	023fe0c3 	.word	0x023fe0c3
 23ec6d4:	023fe0d8 	.word	0x023fe0d8
  else if (strcmp (s,"TXI5M") == 0) { // SetTransmit Interval to 5 Minutes
 23ec6d8:	4628      	mov	r0, r5
 23ec6da:	4968      	ldr	r1, [pc, #416]	; (23ec87c <_Z17Function_DoAction6String+0x780>)
 23ec6dc:	f7fb f89a 	bl	23e7814 <strcmp>
 23ec6e0:	4604      	mov	r4, r0
 23ec6e2:	2800      	cmp	r0, #0
 23ec6e4:	d13f      	bne.n	23ec766 <_Z17Function_DoAction6String+0x66a>
    Output("DoAction:TXI5M");
 23ec6e6:	4866      	ldr	r0, [pc, #408]	; (23ec880 <_Z17Function_DoAction6String+0x784>)
 23ec6e8:	f7fc f932 	bl	23e8950 <_Z6OutputPKc>
    if (SD_exists) {
 23ec6ec:	4b65      	ldr	r3, [pc, #404]	; (23ec884 <_Z17Function_DoAction6String+0x788>)
 23ec6ee:	781b      	ldrb	r3, [r3, #0]
 23ec6f0:	2b00      	cmp	r3, #0
 23ec6f2:	d036      	beq.n	23ec762 <_Z17Function_DoAction6String+0x666>
    return vwd()->exists(path);
 23ec6f4:	4964      	ldr	r1, [pc, #400]	; (23ec888 <_Z17Function_DoAction6String+0x78c>)
 23ec6f6:	4865      	ldr	r0, [pc, #404]	; (23ec88c <_Z17Function_DoAction6String+0x790>)
 23ec6f8:	f7fb fef4 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_TX5M_FILE)) {
 23ec6fc:	b170      	cbz	r0, 23ec71c <_Z17Function_DoAction6String+0x620>
        Output ("TXI5M, ALREADY SET"); 
 23ec6fe:	4864      	ldr	r0, [pc, #400]	; (23ec890 <_Z17Function_DoAction6String+0x794>)
 23ec700:	f7fc f926 	bl	23e8950 <_Z6OutputPKc>
        obs_tx_interval = 5;     
 23ec704:	2005      	movs	r0, #5
 23ec706:	2100      	movs	r1, #0
 23ec708:	4b62      	ldr	r3, [pc, #392]	; (23ec894 <_Z17Function_DoAction6String+0x798>)
 23ec70a:	e9c3 0100 	strd	r0, r1, [r3]
 23ec70e:	4962      	ldr	r1, [pc, #392]	; (23ec898 <_Z17Function_DoAction6String+0x79c>)
 23ec710:	485e      	ldr	r0, [pc, #376]	; (23ec88c <_Z17Function_DoAction6String+0x790>)
 23ec712:	f7fb fee7 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_TX10M_FILE)) {
 23ec716:	b9e0      	cbnz	r0, 23ec752 <_Z17Function_DoAction6String+0x656>
    return(0);
 23ec718:	2400      	movs	r4, #0
 23ec71a:	e503      	b.n	23ec124 <_Z17Function_DoAction6String+0x28>
    File tmpFile;
 23ec71c:	a801      	add	r0, sp, #4
 23ec71e:	f7fb ff01 	bl	23e8524 <_ZN4FileC1Ev>
    tmpFile.open(vwd(), path, oflag);
 23ec722:	f244 2302 	movw	r3, #16898	; 0x4202
 23ec726:	4a58      	ldr	r2, [pc, #352]	; (23ec888 <_Z17Function_DoAction6String+0x78c>)
 23ec728:	4958      	ldr	r1, [pc, #352]	; (23ec88c <_Z17Function_DoAction6String+0x790>)
 23ec72a:	a805      	add	r0, sp, #20
 23ec72c:	f009 fa83 	bl	23f5c36 <_ZN7FatFile4openEPS_PKci>
        if (fp) {
 23ec730:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23ec734:	b15b      	cbz	r3, 23ec74e <_Z17Function_DoAction6String+0x652>
          fp.close();
 23ec736:	a805      	add	r0, sp, #20
 23ec738:	f009 fa76 	bl	23f5c28 <_ZN7FatFile5closeEv>
          obs_tx_interval = 5;
 23ec73c:	2005      	movs	r0, #5
 23ec73e:	2100      	movs	r1, #0
 23ec740:	4b54      	ldr	r3, [pc, #336]	; (23ec894 <_Z17Function_DoAction6String+0x798>)
 23ec742:	e9c3 0100 	strd	r0, r1, [r3]
          Output ("TXI5M SET");
 23ec746:	4855      	ldr	r0, [pc, #340]	; (23ec89c <_Z17Function_DoAction6String+0x7a0>)
 23ec748:	f7fc f902 	bl	23e8950 <_Z6OutputPKc>
    virtual ~Print() {}
 23ec74c:	e7df      	b.n	23ec70e <_Z17Function_DoAction6String+0x612>
          Output ("TXI5M OPEN ERR");
 23ec74e:	4854      	ldr	r0, [pc, #336]	; (23ec8a0 <_Z17Function_DoAction6String+0x7a4>)
 23ec750:	e54e      	b.n	23ec1f0 <_Z17Function_DoAction6String+0xf4>
    return FatFile::remove(vwd(), path);
 23ec752:	4951      	ldr	r1, [pc, #324]	; (23ec898 <_Z17Function_DoAction6String+0x79c>)
 23ec754:	484d      	ldr	r0, [pc, #308]	; (23ec88c <_Z17Function_DoAction6String+0x790>)
 23ec756:	f009 faba 	bl	23f5cce <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_TX10M_FILE)) {
 23ec75a:	2800      	cmp	r0, #0
 23ec75c:	d0dc      	beq.n	23ec718 <_Z17Function_DoAction6String+0x61c>
          Output ("TXI5M: Removed TX10M File");
 23ec75e:	4851      	ldr	r0, [pc, #324]	; (23ec8a4 <_Z17Function_DoAction6String+0x7a8>)
 23ec760:	e542      	b.n	23ec1e8 <_Z17Function_DoAction6String+0xec>
      Output("TXI5M, SD NF"); 
 23ec762:	4851      	ldr	r0, [pc, #324]	; (23ec8a8 <_Z17Function_DoAction6String+0x7ac>)
 23ec764:	e56a      	b.n	23ec23c <_Z17Function_DoAction6String+0x140>
  else if (strcmp (s,"TXI10M") == 0) { // SetTransmit Interval to 10 Minutes
 23ec766:	4628      	mov	r0, r5
 23ec768:	4950      	ldr	r1, [pc, #320]	; (23ec8ac <_Z17Function_DoAction6String+0x7b0>)
 23ec76a:	f7fb f853 	bl	23e7814 <strcmp>
 23ec76e:	4604      	mov	r4, r0
 23ec770:	2800      	cmp	r0, #0
 23ec772:	d13e      	bne.n	23ec7f2 <_Z17Function_DoAction6String+0x6f6>
    Output("DoAction:TXI10M");
 23ec774:	484e      	ldr	r0, [pc, #312]	; (23ec8b0 <_Z17Function_DoAction6String+0x7b4>)
 23ec776:	f7fc f8eb 	bl	23e8950 <_Z6OutputPKc>
    if (SD_exists) {
 23ec77a:	4b42      	ldr	r3, [pc, #264]	; (23ec884 <_Z17Function_DoAction6String+0x788>)
 23ec77c:	781b      	ldrb	r3, [r3, #0]
 23ec77e:	2b00      	cmp	r3, #0
 23ec780:	d035      	beq.n	23ec7ee <_Z17Function_DoAction6String+0x6f2>
    return vwd()->exists(path);
 23ec782:	4945      	ldr	r1, [pc, #276]	; (23ec898 <_Z17Function_DoAction6String+0x79c>)
 23ec784:	4841      	ldr	r0, [pc, #260]	; (23ec88c <_Z17Function_DoAction6String+0x790>)
 23ec786:	f7fb fead 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_TX10M_FILE)) {
 23ec78a:	b1a8      	cbz	r0, 23ec7b8 <_Z17Function_DoAction6String+0x6bc>
        Output ("TXI10M, ALREADY SET"); 
 23ec78c:	4849      	ldr	r0, [pc, #292]	; (23ec8b4 <_Z17Function_DoAction6String+0x7b8>)
 23ec78e:	f7fc f8df 	bl	23e8950 <_Z6OutputPKc>
        obs_tx_interval = 10;     
 23ec792:	200a      	movs	r0, #10
 23ec794:	2100      	movs	r1, #0
 23ec796:	4b3f      	ldr	r3, [pc, #252]	; (23ec894 <_Z17Function_DoAction6String+0x798>)
 23ec798:	e9c3 0100 	strd	r0, r1, [r3]
 23ec79c:	493a      	ldr	r1, [pc, #232]	; (23ec888 <_Z17Function_DoAction6String+0x78c>)
 23ec79e:	483b      	ldr	r0, [pc, #236]	; (23ec88c <_Z17Function_DoAction6String+0x790>)
 23ec7a0:	f7fb fea0 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_TX5M_FILE)) {
 23ec7a4:	2800      	cmp	r0, #0
 23ec7a6:	d0b7      	beq.n	23ec718 <_Z17Function_DoAction6String+0x61c>
    return FatFile::remove(vwd(), path);
 23ec7a8:	4937      	ldr	r1, [pc, #220]	; (23ec888 <_Z17Function_DoAction6String+0x78c>)
 23ec7aa:	4838      	ldr	r0, [pc, #224]	; (23ec88c <_Z17Function_DoAction6String+0x790>)
 23ec7ac:	f009 fa8f 	bl	23f5cce <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_TX5M_FILE)) {
 23ec7b0:	2800      	cmp	r0, #0
 23ec7b2:	d0b1      	beq.n	23ec718 <_Z17Function_DoAction6String+0x61c>
          Output ("TXI5M: Removed TX5M File");
 23ec7b4:	4840      	ldr	r0, [pc, #256]	; (23ec8b8 <_Z17Function_DoAction6String+0x7bc>)
 23ec7b6:	e517      	b.n	23ec1e8 <_Z17Function_DoAction6String+0xec>
    File tmpFile;
 23ec7b8:	a801      	add	r0, sp, #4
 23ec7ba:	f7fb feb3 	bl	23e8524 <_ZN4FileC1Ev>
    tmpFile.open(vwd(), path, oflag);
 23ec7be:	f244 2302 	movw	r3, #16898	; 0x4202
 23ec7c2:	4a35      	ldr	r2, [pc, #212]	; (23ec898 <_Z17Function_DoAction6String+0x79c>)
 23ec7c4:	4931      	ldr	r1, [pc, #196]	; (23ec88c <_Z17Function_DoAction6String+0x790>)
 23ec7c6:	a805      	add	r0, sp, #20
 23ec7c8:	f009 fa35 	bl	23f5c36 <_ZN7FatFile4openEPS_PKci>
        if (fp) {
 23ec7cc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23ec7d0:	b15b      	cbz	r3, 23ec7ea <_Z17Function_DoAction6String+0x6ee>
          fp.close();
 23ec7d2:	a805      	add	r0, sp, #20
 23ec7d4:	f009 fa28 	bl	23f5c28 <_ZN7FatFile5closeEv>
          obs_tx_interval = 10;
 23ec7d8:	200a      	movs	r0, #10
 23ec7da:	2100      	movs	r1, #0
 23ec7dc:	4b2d      	ldr	r3, [pc, #180]	; (23ec894 <_Z17Function_DoAction6String+0x798>)
 23ec7de:	e9c3 0100 	strd	r0, r1, [r3]
          Output ("TXI10M SET");
 23ec7e2:	4836      	ldr	r0, [pc, #216]	; (23ec8bc <_Z17Function_DoAction6String+0x7c0>)
 23ec7e4:	f7fc f8b4 	bl	23e8950 <_Z6OutputPKc>
 23ec7e8:	e7d8      	b.n	23ec79c <_Z17Function_DoAction6String+0x6a0>
          Output ("TXI10M OPEN ERR");
 23ec7ea:	4835      	ldr	r0, [pc, #212]	; (23ec8c0 <_Z17Function_DoAction6String+0x7c4>)
 23ec7ec:	e500      	b.n	23ec1f0 <_Z17Function_DoAction6String+0xf4>
      Output("TXI10M, SD NF"); 
 23ec7ee:	4835      	ldr	r0, [pc, #212]	; (23ec8c4 <_Z17Function_DoAction6String+0x7c8>)
 23ec7f0:	e524      	b.n	23ec23c <_Z17Function_DoAction6String+0x140>
  else if (strcmp (s,"TXI15M") == 0) { // SetTransmit Interval to 15 Minutes
 23ec7f2:	4628      	mov	r0, r5
 23ec7f4:	4934      	ldr	r1, [pc, #208]	; (23ec8c8 <_Z17Function_DoAction6String+0x7cc>)
 23ec7f6:	f7fb f80d 	bl	23e7814 <strcmp>
 23ec7fa:	4604      	mov	r4, r0
 23ec7fc:	2800      	cmp	r0, #0
 23ec7fe:	d13b      	bne.n	23ec878 <_Z17Function_DoAction6String+0x77c>
    Output("DoAction:TXI15M");
 23ec800:	4832      	ldr	r0, [pc, #200]	; (23ec8cc <_Z17Function_DoAction6String+0x7d0>)
 23ec802:	f7fc f8a5 	bl	23e8950 <_Z6OutputPKc>
    if (SD_exists) {
 23ec806:	4b1f      	ldr	r3, [pc, #124]	; (23ec884 <_Z17Function_DoAction6String+0x788>)
 23ec808:	781b      	ldrb	r3, [r3, #0]
 23ec80a:	2b00      	cmp	r3, #0
 23ec80c:	d032      	beq.n	23ec874 <_Z17Function_DoAction6String+0x778>
    return vwd()->exists(path);
 23ec80e:	491e      	ldr	r1, [pc, #120]	; (23ec888 <_Z17Function_DoAction6String+0x78c>)
 23ec810:	481e      	ldr	r0, [pc, #120]	; (23ec88c <_Z17Function_DoAction6String+0x790>)
 23ec812:	f7fb fe67 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
 23ec816:	4d1f      	ldr	r5, [pc, #124]	; (23ec894 <_Z17Function_DoAction6String+0x798>)
      if (!SD.exists(SD_TX5M_FILE) && !SD.exists(SD_TX10M_FILE)) {
 23ec818:	b960      	cbnz	r0, 23ec834 <_Z17Function_DoAction6String+0x738>
 23ec81a:	491f      	ldr	r1, [pc, #124]	; (23ec898 <_Z17Function_DoAction6String+0x79c>)
 23ec81c:	481b      	ldr	r0, [pc, #108]	; (23ec88c <_Z17Function_DoAction6String+0x790>)
 23ec81e:	f7fb fe61 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
 23ec822:	b938      	cbnz	r0, 23ec834 <_Z17Function_DoAction6String+0x738>
        Output ("TXI15M, ALREADY SET"); 
 23ec824:	482a      	ldr	r0, [pc, #168]	; (23ec8d0 <_Z17Function_DoAction6String+0x7d4>)
 23ec826:	f7fc f893 	bl	23e8950 <_Z6OutputPKc>
        obs_tx_interval = 15;     
 23ec82a:	220f      	movs	r2, #15
 23ec82c:	2300      	movs	r3, #0
 23ec82e:	e9c5 2300 	strd	r2, r3, [r5]
 23ec832:	e477      	b.n	23ec124 <_Z17Function_DoAction6String+0x28>
 23ec834:	4914      	ldr	r1, [pc, #80]	; (23ec888 <_Z17Function_DoAction6String+0x78c>)
 23ec836:	4815      	ldr	r0, [pc, #84]	; (23ec88c <_Z17Function_DoAction6String+0x790>)
 23ec838:	f7fb fe54 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
        if (SD.exists(SD_TX5M_FILE)) {
 23ec83c:	b138      	cbz	r0, 23ec84e <_Z17Function_DoAction6String+0x752>
    return FatFile::remove(vwd(), path);
 23ec83e:	4912      	ldr	r1, [pc, #72]	; (23ec888 <_Z17Function_DoAction6String+0x78c>)
 23ec840:	4812      	ldr	r0, [pc, #72]	; (23ec88c <_Z17Function_DoAction6String+0x790>)
 23ec842:	f009 fa44 	bl	23f5cce <_ZN7FatFile6removeEPS_PKc>
          if (SD.remove (SD_TX5M_FILE)) {
 23ec846:	b110      	cbz	r0, 23ec84e <_Z17Function_DoAction6String+0x752>
            Output ("TXI15M: Removed TX5M File");
 23ec848:	4822      	ldr	r0, [pc, #136]	; (23ec8d4 <_Z17Function_DoAction6String+0x7d8>)
 23ec84a:	f7fc f881 	bl	23e8950 <_Z6OutputPKc>
    return vwd()->exists(path);
 23ec84e:	4912      	ldr	r1, [pc, #72]	; (23ec898 <_Z17Function_DoAction6String+0x79c>)
 23ec850:	480e      	ldr	r0, [pc, #56]	; (23ec88c <_Z17Function_DoAction6String+0x790>)
 23ec852:	f7fb fe47 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
        if (SD.exists(SD_TX10M_FILE)) {
 23ec856:	b138      	cbz	r0, 23ec868 <_Z17Function_DoAction6String+0x76c>
    return FatFile::remove(vwd(), path);
 23ec858:	490f      	ldr	r1, [pc, #60]	; (23ec898 <_Z17Function_DoAction6String+0x79c>)
 23ec85a:	480c      	ldr	r0, [pc, #48]	; (23ec88c <_Z17Function_DoAction6String+0x790>)
 23ec85c:	f009 fa37 	bl	23f5cce <_ZN7FatFile6removeEPS_PKc>
          if (SD.remove (SD_TX10M_FILE)) {
 23ec860:	b110      	cbz	r0, 23ec868 <_Z17Function_DoAction6String+0x76c>
            Output ("TXI15M: Removed TX10M File");
 23ec862:	481d      	ldr	r0, [pc, #116]	; (23ec8d8 <_Z17Function_DoAction6String+0x7dc>)
 23ec864:	f7fc f874 	bl	23e8950 <_Z6OutputPKc>
        obs_tx_interval = 15;
 23ec868:	220f      	movs	r2, #15
 23ec86a:	2300      	movs	r3, #0
        Output ("TXI15M SET"); 
 23ec86c:	481b      	ldr	r0, [pc, #108]	; (23ec8dc <_Z17Function_DoAction6String+0x7e0>)
        obs_tx_interval = 15;
 23ec86e:	e9c5 2300 	strd	r2, r3, [r5]
        Output ("TXI15M SET"); 
 23ec872:	e4b9      	b.n	23ec1e8 <_Z17Function_DoAction6String+0xec>
      Output("TXI15M, SD NF"); 
 23ec874:	481a      	ldr	r0, [pc, #104]	; (23ec8e0 <_Z17Function_DoAction6String+0x7e4>)
 23ec876:	e4e1      	b.n	23ec23c <_Z17Function_DoAction6String+0x140>
    Output("DoAction:UKN"); 
 23ec878:	481a      	ldr	r0, [pc, #104]	; (23ec8e4 <_Z17Function_DoAction6String+0x7e8>)
 23ec87a:	e4df      	b.n	23ec23c <_Z17Function_DoAction6String+0x140>
 23ec87c:	023fe0ef 	.word	0x023fe0ef
 23ec880:	023fe0e6 	.word	0x023fe0e6
 23ec884:	1006a7ec 	.word	0x1006a7ec
 23ec888:	1006a1f5 	.word	0x1006a1f5
 23ec88c:	1006a7a4 	.word	0x1006a7a4
 23ec890:	023fe0f5 	.word	0x023fe0f5
 23ec894:	1006a258 	.word	0x1006a258
 23ec898:	1006a1ea 	.word	0x1006a1ea
 23ec89c:	023fe108 	.word	0x023fe108
 23ec8a0:	023fe112 	.word	0x023fe112
 23ec8a4:	023fe121 	.word	0x023fe121
 23ec8a8:	023fe13b 	.word	0x023fe13b
 23ec8ac:	023fe151 	.word	0x023fe151
 23ec8b0:	023fe148 	.word	0x023fe148
 23ec8b4:	023fe158 	.word	0x023fe158
 23ec8b8:	023fe187 	.word	0x023fe187
 23ec8bc:	023fe16c 	.word	0x023fe16c
 23ec8c0:	023fe177 	.word	0x023fe177
 23ec8c4:	023fe1a0 	.word	0x023fe1a0
 23ec8c8:	023fe1b7 	.word	0x023fe1b7
 23ec8cc:	023fe1ae 	.word	0x023fe1ae
 23ec8d0:	023fe1be 	.word	0x023fe1be
 23ec8d4:	023fe1d2 	.word	0x023fe1d2
 23ec8d8:	023fe1ec 	.word	0x023fe1ec
 23ec8dc:	023fe207 	.word	0x023fe207
 23ec8e0:	023fe212 	.word	0x023fe212
 23ec8e4:	023fe220 	.word	0x023fe220

023ec8e8 <_Z14SimChangeCheckv>:
/*
 * ======================================================================================================================
 * SimChangeCheck() - Check for SIM.TXT file and set sim based on contents, after rename file to SIMOLD.TXT            
 * ======================================================================================================================
 */
void SimChangeCheck() {
 23ec8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int setActiveSim(SimType sim) {
        return cellular_set_active_sim(sim, nullptr);
    }

    SimType getActiveSim() const {
        int sim = 0;
 23ec8ec:	2400      	movs	r4, #0
 23ec8ee:	b0ae      	sub	sp, #184	; 0xb8
  File fp;
 23ec8f0:	a801      	add	r0, sp, #4
        const int r = cellular_get_active_sim(&sim, nullptr);
 23ec8f2:	af0e      	add	r7, sp, #56	; 0x38
 23ec8f4:	f7fb fe16 	bl	23e8524 <_ZN4FileC1Ev>
 23ec8f8:	4621      	mov	r1, r4
 23ec8fa:	4638      	mov	r0, r7
        int sim = 0;
 23ec8fc:	940e      	str	r4, [sp, #56]	; 0x38
        const int r = cellular_get_active_sim(&sim, nullptr);
 23ec8fe:	f00a fe53 	bl	23f75a8 <cellular_get_active_sim>
        if (r < 0) {
 23ec902:	42a0      	cmp	r0, r4
 23ec904:	da06      	bge.n	23ec914 <_Z14SimChangeCheckv+0x2c>
            return INVALID_SIM;
 23ec906:	4622      	mov	r2, r4
    Output ("SIM:Internal");
  } else if (simType == 2) {
    Output ("SIM:External");
  }
  else {
    sprintf (msgbuf, "SIM:Unknown[%d]", simType);
 23ec908:	498a      	ldr	r1, [pc, #552]	; (23ecb34 <_Z14SimChangeCheckv+0x24c>)
 23ec90a:	488b      	ldr	r0, [pc, #556]	; (23ecb38 <_Z14SimChangeCheckv+0x250>)
 23ec90c:	f00b fc7a 	bl	23f8204 <sprintf>
    Output (msgbuf);
 23ec910:	4889      	ldr	r0, [pc, #548]	; (23ecb38 <_Z14SimChangeCheckv+0x250>)
 23ec912:	e004      	b.n	23ec91e <_Z14SimChangeCheckv+0x36>
        }
        return (SimType)sim;
 23ec914:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
  if (simType == 1) {
 23ec918:	2a01      	cmp	r2, #1
 23ec91a:	d13f      	bne.n	23ec99c <_Z14SimChangeCheckv+0xb4>
    Output ("SIM:Internal");
 23ec91c:	4887      	ldr	r0, [pc, #540]	; (23ecb3c <_Z14SimChangeCheckv+0x254>)
    Output (msgbuf);
 23ec91e:	f7fc f817 	bl	23e8950 <_Z6OutputPKc>
  }

  if (SD_exists) {
 23ec922:	4b87      	ldr	r3, [pc, #540]	; (23ecb40 <_Z14SimChangeCheckv+0x258>)
 23ec924:	781b      	ldrb	r3, [r3, #0]
 23ec926:	2b00      	cmp	r3, #0
 23ec928:	f000 819b 	beq.w	23ecc62 <_Z14SimChangeCheckv+0x37a>
    return vwd()->exists(path);
 23ec92c:	4985      	ldr	r1, [pc, #532]	; (23ecb44 <_Z14SimChangeCheckv+0x25c>)
 23ec92e:	4886      	ldr	r0, [pc, #536]	; (23ecb48 <_Z14SimChangeCheckv+0x260>)
 23ec930:	f7fb fdd8 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
    // Test for file SIM.TXT
    if (SD.exists(SD_sim_file)) {
 23ec934:	4605      	mov	r5, r0
 23ec936:	2800      	cmp	r0, #0
 23ec938:	f000 8196 	beq.w	23ecc68 <_Z14SimChangeCheckv+0x380>
    File tmpFile;
 23ec93c:	4638      	mov	r0, r7
 23ec93e:	f7fb fdf1 	bl	23e8524 <_ZN4FileC1Ev>
 23ec942:	ae05      	add	r6, sp, #20
    tmpFile.open(vwd(), path, oflag);
 23ec944:	2300      	movs	r3, #0
 23ec946:	4a7f      	ldr	r2, [pc, #508]	; (23ecb44 <_Z14SimChangeCheckv+0x25c>)
 23ec948:	497f      	ldr	r1, [pc, #508]	; (23ecb48 <_Z14SimChangeCheckv+0x260>)
 23ec94a:	a812      	add	r0, sp, #72	; 0x48
 23ec94c:	ac12      	add	r4, sp, #72	; 0x48
 23ec94e:	f009 f972 	bl	23f5c36 <_ZN7FatFile4openEPS_PKci>
 23ec952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23ec954:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 23ec956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23ec958:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 23ec95a:	6823      	ldr	r3, [r4, #0]
 23ec95c:	6033      	str	r3, [r6, #0]
class Print
 23ec95e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23ec960:	9302      	str	r3, [sp, #8]
 23ec962:	9b10      	ldr	r3, [sp, #64]	; 0x40
 23ec964:	9303      	str	r3, [sp, #12]
 23ec966:	9b11      	ldr	r3, [sp, #68]	; 0x44
 23ec968:	9304      	str	r3, [sp, #16]
      fp = SD.open(SD_sim_file, FILE_READ); // Open the file for reading, starting at the beginning of the file.

      if (fp) {
 23ec96a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23ec96e:	2b00      	cmp	r3, #0
 23ec970:	f000 8174 	beq.w	23ecc5c <_Z14SimChangeCheckv+0x374>
        // Deal with too small or too big of file
        if (fp.size()<=7 || fp.size()>127) {
 23ec974:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23ec976:	3b08      	subs	r3, #8
 23ec978:	2b77      	cmp	r3, #119	; 0x77
 23ec97a:	d913      	bls.n	23ec9a4 <_Z14SimChangeCheckv+0xbc>
          fp.close();
 23ec97c:	a805      	add	r0, sp, #20
 23ec97e:	f009 f953 	bl	23f5c28 <_ZN7FatFile5closeEv>
          Output ("SIMF:Invalid SZ");
 23ec982:	4872      	ldr	r0, [pc, #456]	; (23ecb4c <_Z14SimChangeCheckv+0x264>)
 23ec984:	f7fb ffe4 	bl	23e8950 <_Z6OutputPKc>
    return FatFile::remove(vwd(), path);
 23ec988:	496e      	ldr	r1, [pc, #440]	; (23ecb44 <_Z14SimChangeCheckv+0x25c>)
 23ec98a:	486f      	ldr	r0, [pc, #444]	; (23ecb48 <_Z14SimChangeCheckv+0x260>)
 23ec98c:	f009 f99f 	bl	23f5cce <_ZN7FatFile6removeEPS_PKc>
          if (SD.remove (SD_sim_file)) {
 23ec990:	4605      	mov	r5, r0
 23ec992:	b9f0      	cbnz	r0, 23ec9d2 <_Z14SimChangeCheckv+0xea>
            Output ("SIMF->Del:OK");
          }
          else {
            Output ("SIMF->Del:Err");
 23ec994:	486e      	ldr	r0, [pc, #440]	; (23ecb50 <_Z14SimChangeCheckv+0x268>)
              sprintf (msgbuf, " APN[%s]", apn);
              Output(msgbuf);
              sprintf (msgbuf, "  UN[%s]", un);
              Output(msgbuf);
              sprintf (msgbuf, "  PW[%s]", pw);
              Output(msgbuf);
 23ec996:	f7fb ffdb 	bl	23e8950 <_Z6OutputPKc>
              changed = true;
 23ec99a:	e042      	b.n	23eca22 <_Z14SimChangeCheckv+0x13a>
  } else if (simType == 2) {
 23ec99c:	2a02      	cmp	r2, #2
 23ec99e:	d1b3      	bne.n	23ec908 <_Z14SimChangeCheckv+0x20>
    Output ("SIM:External");
 23ec9a0:	486c      	ldr	r0, [pc, #432]	; (23ecb54 <_Z14SimChangeCheckv+0x26c>)
 23ec9a2:	e7bc      	b.n	23ec91e <_Z14SimChangeCheckv+0x36>
          Output ("SIMF:Open");
 23ec9a4:	486c      	ldr	r0, [pc, #432]	; (23ecb58 <_Z14SimChangeCheckv+0x270>)
 23ec9a6:	f7fb ffd3 	bl	23e8950 <_Z6OutputPKc>
 23ec9aa:	463e      	mov	r6, r7
  int i=0;
 23ec9ac:	2400      	movs	r4, #0
          while (fp.available() && (i < 127 )) {
 23ec9ae:	a801      	add	r0, sp, #4
 23ec9b0:	f7fb fca6 	bl	23e8300 <_ZN4File9availableEv>
 23ec9b4:	b190      	cbz	r0, 23ec9dc <_Z14SimChangeCheckv+0xf4>
 23ec9b6:	2c7f      	cmp	r4, #127	; 0x7f
 23ec9b8:	d010      	beq.n	23ec9dc <_Z14SimChangeCheckv+0xf4>
    return FatFile::read();
 23ec9ba:	a805      	add	r0, sp, #20
 23ec9bc:	f7fb fd9e 	bl	23e84fc <_ZN7FatFile4readEv>
            ch = fp.read();
 23ec9c0:	b2c0      	uxtb	r0, r0
            if ((ch == 0x0A) || (ch == 0x0D) ) {  // newline or linefeed
 23ec9c2:	280a      	cmp	r0, #10
 23ec9c4:	d00a      	beq.n	23ec9dc <_Z14SimChangeCheckv+0xf4>
 23ec9c6:	280d      	cmp	r0, #13
 23ec9c8:	d008      	beq.n	23ec9dc <_Z14SimChangeCheckv+0xf4>
              buf[i++] = ch;
 23ec9ca:	3401      	adds	r4, #1
 23ec9cc:	f806 0b01 	strb.w	r0, [r6], #1
          while (fp.available() && (i < 127 )) {
 23ec9d0:	e7ed      	b.n	23ec9ae <_Z14SimChangeCheckv+0xc6>
            Output ("SIMF->Del:OK");
 23ec9d2:	4862      	ldr	r0, [pc, #392]	; (23ecb5c <_Z14SimChangeCheckv+0x274>)
            }
          }
          else {  // Pasrse Error
            sprintf (msgbuf, "SIMF:ID[%s] Err", id);
            Output(msgbuf);
 23ec9d4:	f7fb ffbc 	bl	23e8950 <_Z6OutputPKc>
  bool changed = false;
 23ec9d8:	2500      	movs	r5, #0
 23ec9da:	e022      	b.n	23eca22 <_Z14SimChangeCheckv+0x13a>
          buf[i] = (char) NULL;
 23ec9dc:	ab2e      	add	r3, sp, #184	; 0xb8
 23ec9de:	441c      	add	r4, r3
 23ec9e0:	2300      	movs	r3, #0
          id = strtok_r(p, " ", &p);
 23ec9e2:	466a      	mov	r2, sp
          buf[i] = (char) NULL;
 23ec9e4:	f804 3c80 	strb.w	r3, [r4, #-128]
          id = strtok_r(p, " ", &p);
 23ec9e8:	4638      	mov	r0, r7
 23ec9ea:	495d      	ldr	r1, [pc, #372]	; (23ecb60 <_Z14SimChangeCheckv+0x278>)
          p = &buf[0];
 23ec9ec:	9700      	str	r7, [sp, #0]
          id = strtok_r(p, " ", &p);
 23ec9ee:	f010 faff 	bl	23fcff0 <strtok_r>
          if (id != NULL) {
 23ec9f2:	4604      	mov	r4, r0
 23ec9f4:	b138      	cbz	r0, 23eca06 <_Z14SimChangeCheckv+0x11e>
            sprintf (msgbuf, "SIMF:ID[%s]", id);
 23ec9f6:	4602      	mov	r2, r0
 23ec9f8:	495a      	ldr	r1, [pc, #360]	; (23ecb64 <_Z14SimChangeCheckv+0x27c>)
 23ec9fa:	484f      	ldr	r0, [pc, #316]	; (23ecb38 <_Z14SimChangeCheckv+0x250>)
 23ec9fc:	f00b fc02 	bl	23f8204 <sprintf>
            Output(msgbuf);
 23eca00:	484d      	ldr	r0, [pc, #308]	; (23ecb38 <_Z14SimChangeCheckv+0x250>)
 23eca02:	f7fb ffa5 	bl	23e8950 <_Z6OutputPKc>
          if (strcmp (id,"INTERNAL") == 0) {
 23eca06:	4620      	mov	r0, r4
 23eca08:	4957      	ldr	r1, [pc, #348]	; (23ecb68 <_Z14SimChangeCheckv+0x280>)
 23eca0a:	f7fa ff03 	bl	23e7814 <strcmp>
 23eca0e:	4606      	mov	r6, r0
 23eca10:	2800      	cmp	r0, #0
 23eca12:	d134      	bne.n	23eca7e <_Z14SimChangeCheckv+0x196>
        return cellular_set_active_sim(sim, nullptr);
 23eca14:	4601      	mov	r1, r0
 23eca16:	2001      	movs	r0, #1
 23eca18:	f00a fdb8 	bl	23f758c <cellular_set_active_sim>
        cellular_credentials_clear(nullptr);
 23eca1c:	4630      	mov	r0, r6
 23eca1e:	f00a fdd1 	bl	23f75c4 <cellular_credentials_clear>
    return vwd()->exists(path);
 23eca22:	4952      	ldr	r1, [pc, #328]	; (23ecb6c <_Z14SimChangeCheckv+0x284>)
 23eca24:	4848      	ldr	r0, [pc, #288]	; (23ecb48 <_Z14SimChangeCheckv+0x260>)
 23eca26:	f7fb fd5d 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
          }
        }

        // No matter what happened with the above, rename file so we don't process again at boot
        // if SIMOLD.TXT exists then remove it before we rename SIM.TXT
        if (SD.exists(SD_simold_file)) {
 23eca2a:	b138      	cbz	r0, 23eca3c <_Z14SimChangeCheckv+0x154>
    return FatFile::remove(vwd(), path);
 23eca2c:	494f      	ldr	r1, [pc, #316]	; (23ecb6c <_Z14SimChangeCheckv+0x284>)
 23eca2e:	4846      	ldr	r0, [pc, #280]	; (23ecb48 <_Z14SimChangeCheckv+0x260>)
 23eca30:	f009 f94d 	bl	23f5cce <_ZN7FatFile6removeEPS_PKc>
          if (SD.remove (SD_simold_file)) {
 23eca34:	b110      	cbz	r0, 23eca3c <_Z14SimChangeCheckv+0x154>
            Output ("SIMF:DEL SIMOLD");
 23eca36:	484e      	ldr	r0, [pc, #312]	; (23ecb70 <_Z14SimChangeCheckv+0x288>)
 23eca38:	f7fb ff8a 	bl	23e8950 <_Z6OutputPKc>
    return rename(cwd(), newPath);
 23eca3c:	4b4d      	ldr	r3, [pc, #308]	; (23ecb74 <_Z14SimChangeCheckv+0x28c>)
 23eca3e:	4a4b      	ldr	r2, [pc, #300]	; (23ecb6c <_Z14SimChangeCheckv+0x284>)
 23eca40:	6819      	ldr	r1, [r3, #0]
 23eca42:	a805      	add	r0, sp, #20
 23eca44:	f009 fa1a 	bl	23f5e7c <_ZN7FatFile6renameEPS_PKc>
          }
        }

        if (!fp.rename(SD_simold_file)) {
 23eca48:	2800      	cmp	r0, #0
 23eca4a:	f040 80fd 	bne.w	23ecc48 <_Z14SimChangeCheckv+0x360>
          Output ("SIMF:RENAME ERROR");
 23eca4e:	484a      	ldr	r0, [pc, #296]	; (23ecb78 <_Z14SimChangeCheckv+0x290>)
        }
        else {
          Output ("SIMF:RENAME OK");
 23eca50:	f7fb ff7e 	bl	23e8950 <_Z6OutputPKc>
        }
        fp.close();
 23eca54:	a805      	add	r0, sp, #20
 23eca56:	f009 f8e7 	bl	23f5c28 <_ZN7FatFile5closeEv>

        // Notify user to reboot blink led forever
        if (changed) {
 23eca5a:	2d00      	cmp	r5, #0
 23eca5c:	f000 80f6 	beq.w	23ecc4c <_Z14SimChangeCheckv+0x364>
          Output ("==============");
 23eca60:	4846      	ldr	r0, [pc, #280]	; (23ecb7c <_Z14SimChangeCheckv+0x294>)
 23eca62:	f7fb ff75 	bl	23e8950 <_Z6OutputPKc>
          Output ("!!! REBOOT !!!");
 23eca66:	4846      	ldr	r0, [pc, #280]	; (23ecb80 <_Z14SimChangeCheckv+0x298>)
 23eca68:	f7fb ff72 	bl	23e8950 <_Z6OutputPKc>
          Output ("==============");
 23eca6c:	4843      	ldr	r0, [pc, #268]	; (23ecb7c <_Z14SimChangeCheckv+0x294>)

        }
        else {
          Output ("=====================");
          Output ("!!! SET SIM ERROR !!!");
          Output ("=====================");
 23eca6e:	f7fb ff6f 	bl	23e8950 <_Z6OutputPKc>
        }
        
        while(true) { // wait for Host to open serial port
          Blink(1, 750);
 23eca72:	f240 21ee 	movw	r1, #750	; 0x2ee
 23eca76:	2001      	movs	r0, #1
 23eca78:	f7fb fd76 	bl	23e8568 <_Z5Blinkii>
        while(true) { // wait for Host to open serial port
 23eca7c:	e7f9      	b.n	23eca72 <_Z14SimChangeCheckv+0x18a>
          else if (strcmp (id,"APN") == 0) {
 23eca7e:	4620      	mov	r0, r4
 23eca80:	4940      	ldr	r1, [pc, #256]	; (23ecb84 <_Z14SimChangeCheckv+0x29c>)
 23eca82:	f7fa fec7 	bl	23e7814 <strcmp>
 23eca86:	4606      	mov	r6, r0
 23eca88:	b9f8      	cbnz	r0, 23ecaca <_Z14SimChangeCheckv+0x1e2>
            apn = strtok_r(p, " ", &p);
 23eca8a:	466a      	mov	r2, sp
 23eca8c:	4934      	ldr	r1, [pc, #208]	; (23ecb60 <_Z14SimChangeCheckv+0x278>)
 23eca8e:	9800      	ldr	r0, [sp, #0]
 23eca90:	f010 faae 	bl	23fcff0 <strtok_r>
            if (apn == NULL) {
 23eca94:	4604      	mov	r4, r0
 23eca96:	b908      	cbnz	r0, 23eca9c <_Z14SimChangeCheckv+0x1b4>
              Output("SIMF:APN=Null Err");
 23eca98:	483b      	ldr	r0, [pc, #236]	; (23ecb88 <_Z14SimChangeCheckv+0x2a0>)
 23eca9a:	e79b      	b.n	23ec9d4 <_Z14SimChangeCheckv+0xec>
        return cellular_set_active_sim(sim, nullptr);
 23eca9c:	4631      	mov	r1, r6
 23eca9e:	2002      	movs	r0, #2
 23ecaa0:	f00a fd74 	bl	23f758c <cellular_set_active_sim>
              Output("SIM:Set External-APN");
 23ecaa4:	4839      	ldr	r0, [pc, #228]	; (23ecb8c <_Z14SimChangeCheckv+0x2a4>)
 23ecaa6:	f7fb ff53 	bl	23e8950 <_Z6OutputPKc>
        cellular_credentials_set(apn, username, password, nullptr);
 23ecaaa:	4a39      	ldr	r2, [pc, #228]	; (23ecb90 <_Z14SimChangeCheckv+0x2a8>)
 23ecaac:	4633      	mov	r3, r6
 23ecaae:	4611      	mov	r1, r2
 23ecab0:	4620      	mov	r0, r4
 23ecab2:	f00a fd4f 	bl	23f7554 <cellular_credentials_set>
              Output("SIM:Set Credentials");
 23ecab6:	4837      	ldr	r0, [pc, #220]	; (23ecb94 <_Z14SimChangeCheckv+0x2ac>)
 23ecab8:	f7fb ff4a 	bl	23e8950 <_Z6OutputPKc>
              sprintf (msgbuf, " APN[%s]", apn);
 23ecabc:	4622      	mov	r2, r4
 23ecabe:	4936      	ldr	r1, [pc, #216]	; (23ecb98 <_Z14SimChangeCheckv+0x2b0>)
              sprintf (msgbuf, "  PW[%s]", pw);
 23ecac0:	481d      	ldr	r0, [pc, #116]	; (23ecb38 <_Z14SimChangeCheckv+0x250>)
 23ecac2:	f00b fb9f 	bl	23f8204 <sprintf>
              Output(msgbuf);
 23ecac6:	481c      	ldr	r0, [pc, #112]	; (23ecb38 <_Z14SimChangeCheckv+0x250>)
 23ecac8:	e765      	b.n	23ec996 <_Z14SimChangeCheckv+0xae>
          else if (strcmp (id," UP") == 0) {
 23ecaca:	4620      	mov	r0, r4
 23ecacc:	4933      	ldr	r1, [pc, #204]	; (23ecb9c <_Z14SimChangeCheckv+0x2b4>)
 23ecace:	f7fa fea1 	bl	23e7814 <strcmp>
 23ecad2:	4607      	mov	r7, r0
 23ecad4:	2800      	cmp	r0, #0
 23ecad6:	d16d      	bne.n	23ecbb4 <_Z14SimChangeCheckv+0x2cc>
            un  = strtok_r(p, " ", &p);
 23ecad8:	466a      	mov	r2, sp
 23ecada:	4921      	ldr	r1, [pc, #132]	; (23ecb60 <_Z14SimChangeCheckv+0x278>)
 23ecadc:	9800      	ldr	r0, [sp, #0]
 23ecade:	f010 fa87 	bl	23fcff0 <strtok_r>
            pw  = strtok_r(p, " ", &p);
 23ecae2:	466a      	mov	r2, sp
            un  = strtok_r(p, " ", &p);
 23ecae4:	4606      	mov	r6, r0
            pw  = strtok_r(p, " ", &p);
 23ecae6:	491e      	ldr	r1, [pc, #120]	; (23ecb60 <_Z14SimChangeCheckv+0x278>)
 23ecae8:	9800      	ldr	r0, [sp, #0]
 23ecaea:	f010 fa81 	bl	23fcff0 <strtok_r>
 23ecaee:	4604      	mov	r4, r0
            if (un == NULL) {
 23ecaf0:	b90e      	cbnz	r6, 23ecaf6 <_Z14SimChangeCheckv+0x20e>
              Output("SIMF:Username=Null Err");
 23ecaf2:	482b      	ldr	r0, [pc, #172]	; (23ecba0 <_Z14SimChangeCheckv+0x2b8>)
 23ecaf4:	e76e      	b.n	23ec9d4 <_Z14SimChangeCheckv+0xec>
            else if (pw == NULL) {
 23ecaf6:	b908      	cbnz	r0, 23ecafc <_Z14SimChangeCheckv+0x214>
              Output("SIMF:Passwd=Null Err");
 23ecaf8:	482a      	ldr	r0, [pc, #168]	; (23ecba4 <_Z14SimChangeCheckv+0x2bc>)
 23ecafa:	e76b      	b.n	23ec9d4 <_Z14SimChangeCheckv+0xec>
        return cellular_set_active_sim(sim, nullptr);
 23ecafc:	4639      	mov	r1, r7
 23ecafe:	2002      	movs	r0, #2
 23ecb00:	f00a fd44 	bl	23f758c <cellular_set_active_sim>
              Output("SIM:Set External-UP");
 23ecb04:	4828      	ldr	r0, [pc, #160]	; (23ecba8 <_Z14SimChangeCheckv+0x2c0>)
 23ecb06:	f7fb ff23 	bl	23e8950 <_Z6OutputPKc>
        cellular_credentials_set(apn, username, password, nullptr);
 23ecb0a:	463b      	mov	r3, r7
 23ecb0c:	4622      	mov	r2, r4
 23ecb0e:	4631      	mov	r1, r6
 23ecb10:	481f      	ldr	r0, [pc, #124]	; (23ecb90 <_Z14SimChangeCheckv+0x2a8>)
 23ecb12:	f00a fd1f 	bl	23f7554 <cellular_credentials_set>
              Output("SIM:Set Credentials");
 23ecb16:	481f      	ldr	r0, [pc, #124]	; (23ecb94 <_Z14SimChangeCheckv+0x2ac>)
 23ecb18:	f7fb ff1a 	bl	23e8950 <_Z6OutputPKc>
              sprintf (msgbuf, " UN[%s]", un);
 23ecb1c:	4632      	mov	r2, r6
 23ecb1e:	4923      	ldr	r1, [pc, #140]	; (23ecbac <_Z14SimChangeCheckv+0x2c4>)
 23ecb20:	4805      	ldr	r0, [pc, #20]	; (23ecb38 <_Z14SimChangeCheckv+0x250>)
 23ecb22:	f00b fb6f 	bl	23f8204 <sprintf>
              Output(msgbuf);
 23ecb26:	4804      	ldr	r0, [pc, #16]	; (23ecb38 <_Z14SimChangeCheckv+0x250>)
 23ecb28:	f7fb ff12 	bl	23e8950 <_Z6OutputPKc>
              sprintf (msgbuf, " PW[%s]", pw);
 23ecb2c:	4622      	mov	r2, r4
 23ecb2e:	4920      	ldr	r1, [pc, #128]	; (23ecbb0 <_Z14SimChangeCheckv+0x2c8>)
 23ecb30:	e7c6      	b.n	23ecac0 <_Z14SimChangeCheckv+0x1d8>
 23ecb32:	bf00      	nop
 23ecb34:	023fe247 	.word	0x023fe247
 23ecb38:	1006f148 	.word	0x1006f148
 23ecb3c:	023fe22d 	.word	0x023fe22d
 23ecb40:	1006a7ec 	.word	0x1006a7ec
 23ecb44:	1006a215 	.word	0x1006a215
 23ecb48:	1006a7a4 	.word	0x1006a7a4
 23ecb4c:	023fe257 	.word	0x023fe257
 23ecb50:	023fe27e 	.word	0x023fe27e
 23ecb54:	023fe23a 	.word	0x023fe23a
 23ecb58:	023fe267 	.word	0x023fe267
 23ecb5c:	023fe271 	.word	0x023fe271
 23ecb60:	023fdc08 	.word	0x023fdc08
 23ecb64:	023fe28c 	.word	0x023fe28c
 23ecb68:	023fe298 	.word	0x023fe298
 23ecb6c:	1006a21d 	.word	0x1006a21d
 23ecb70:	023fe360 	.word	0x023fe360
 23ecb74:	1007aea8 	.word	0x1007aea8
 23ecb78:	023fe370 	.word	0x023fe370
 23ecb7c:	023fe3a7 	.word	0x023fe3a7
 23ecb80:	023fe391 	.word	0x023fe391
 23ecb84:	023fe2c4 	.word	0x023fe2c4
 23ecb88:	023fe2a1 	.word	0x023fe2a1
 23ecb8c:	023fe2b3 	.word	0x023fe2b3
 23ecb90:	023fdc09 	.word	0x023fdc09
 23ecb94:	023fe2c8 	.word	0x023fe2c8
 23ecb98:	023fe2dc 	.word	0x023fe2dc
 23ecb9c:	023fe2e5 	.word	0x023fe2e5
 23ecba0:	023fe2e9 	.word	0x023fe2e9
 23ecba4:	023fe300 	.word	0x023fe300
 23ecba8:	023fe315 	.word	0x023fe315
 23ecbac:	023fe33f 	.word	0x023fe33f
 23ecbb0:	023fe348 	.word	0x023fe348
          else if (strcmp (id,"AUP") == 0) {
 23ecbb4:	4620      	mov	r0, r4
 23ecbb6:	492d      	ldr	r1, [pc, #180]	; (23ecc6c <_Z14SimChangeCheckv+0x384>)
 23ecbb8:	f7fa fe2c 	bl	23e7814 <strcmp>
 23ecbbc:	4680      	mov	r8, r0
 23ecbbe:	2800      	cmp	r0, #0
 23ecbc0:	d13b      	bne.n	23ecc3a <_Z14SimChangeCheckv+0x352>
            apn = strtok_r(p, " ", &p);
 23ecbc2:	466a      	mov	r2, sp
 23ecbc4:	492a      	ldr	r1, [pc, #168]	; (23ecc70 <_Z14SimChangeCheckv+0x388>)
 23ecbc6:	9800      	ldr	r0, [sp, #0]
 23ecbc8:	f010 fa12 	bl	23fcff0 <strtok_r>
            un  = strtok_r(p, " ", &p);
 23ecbcc:	466a      	mov	r2, sp
 23ecbce:	4928      	ldr	r1, [pc, #160]	; (23ecc70 <_Z14SimChangeCheckv+0x388>)
            apn = strtok_r(p, " ", &p);
 23ecbd0:	4607      	mov	r7, r0
            un  = strtok_r(p, " ", &p);
 23ecbd2:	9800      	ldr	r0, [sp, #0]
 23ecbd4:	f010 fa0c 	bl	23fcff0 <strtok_r>
            pw  = strtok_r(p, " ", &p);
 23ecbd8:	466a      	mov	r2, sp
            un  = strtok_r(p, " ", &p);
 23ecbda:	4606      	mov	r6, r0
            pw  = strtok_r(p, " ", &p);
 23ecbdc:	4924      	ldr	r1, [pc, #144]	; (23ecc70 <_Z14SimChangeCheckv+0x388>)
 23ecbde:	9800      	ldr	r0, [sp, #0]
 23ecbe0:	f010 fa06 	bl	23fcff0 <strtok_r>
 23ecbe4:	4604      	mov	r4, r0
            if (apn == NULL) {
 23ecbe6:	2f00      	cmp	r7, #0
 23ecbe8:	f43f af56 	beq.w	23eca98 <_Z14SimChangeCheckv+0x1b0>
            else if (un == NULL) {
 23ecbec:	2e00      	cmp	r6, #0
 23ecbee:	d080      	beq.n	23ecaf2 <_Z14SimChangeCheckv+0x20a>
            else if (pw == NULL) {
 23ecbf0:	2800      	cmp	r0, #0
 23ecbf2:	d081      	beq.n	23ecaf8 <_Z14SimChangeCheckv+0x210>
        return cellular_set_active_sim(sim, nullptr);
 23ecbf4:	4641      	mov	r1, r8
 23ecbf6:	2002      	movs	r0, #2
 23ecbf8:	f00a fcc8 	bl	23f758c <cellular_set_active_sim>
              Output("SIM:Set External-AUP");
 23ecbfc:	481d      	ldr	r0, [pc, #116]	; (23ecc74 <_Z14SimChangeCheckv+0x38c>)
 23ecbfe:	f7fb fea7 	bl	23e8950 <_Z6OutputPKc>
        cellular_credentials_set(apn, username, password, nullptr);
 23ecc02:	4643      	mov	r3, r8
 23ecc04:	4622      	mov	r2, r4
 23ecc06:	4631      	mov	r1, r6
 23ecc08:	4638      	mov	r0, r7
 23ecc0a:	f00a fca3 	bl	23f7554 <cellular_credentials_set>
              Output("SIM:Set Credentials");
 23ecc0e:	481a      	ldr	r0, [pc, #104]	; (23ecc78 <_Z14SimChangeCheckv+0x390>)
 23ecc10:	f7fb fe9e 	bl	23e8950 <_Z6OutputPKc>
              sprintf (msgbuf, " APN[%s]", apn);
 23ecc14:	463a      	mov	r2, r7
 23ecc16:	4919      	ldr	r1, [pc, #100]	; (23ecc7c <_Z14SimChangeCheckv+0x394>)
 23ecc18:	4819      	ldr	r0, [pc, #100]	; (23ecc80 <_Z14SimChangeCheckv+0x398>)
 23ecc1a:	f00b faf3 	bl	23f8204 <sprintf>
              Output(msgbuf);
 23ecc1e:	4818      	ldr	r0, [pc, #96]	; (23ecc80 <_Z14SimChangeCheckv+0x398>)
 23ecc20:	f7fb fe96 	bl	23e8950 <_Z6OutputPKc>
              sprintf (msgbuf, "  UN[%s]", un);
 23ecc24:	4632      	mov	r2, r6
 23ecc26:	4917      	ldr	r1, [pc, #92]	; (23ecc84 <_Z14SimChangeCheckv+0x39c>)
 23ecc28:	4815      	ldr	r0, [pc, #84]	; (23ecc80 <_Z14SimChangeCheckv+0x398>)
 23ecc2a:	f00b faeb 	bl	23f8204 <sprintf>
              Output(msgbuf);
 23ecc2e:	4814      	ldr	r0, [pc, #80]	; (23ecc80 <_Z14SimChangeCheckv+0x398>)
 23ecc30:	f7fb fe8e 	bl	23e8950 <_Z6OutputPKc>
              sprintf (msgbuf, "  PW[%s]", pw);
 23ecc34:	4622      	mov	r2, r4
 23ecc36:	4914      	ldr	r1, [pc, #80]	; (23ecc88 <_Z14SimChangeCheckv+0x3a0>)
 23ecc38:	e742      	b.n	23ecac0 <_Z14SimChangeCheckv+0x1d8>
            sprintf (msgbuf, "SIMF:ID[%s] Err", id);
 23ecc3a:	4622      	mov	r2, r4
 23ecc3c:	4913      	ldr	r1, [pc, #76]	; (23ecc8c <_Z14SimChangeCheckv+0x3a4>)
 23ecc3e:	4810      	ldr	r0, [pc, #64]	; (23ecc80 <_Z14SimChangeCheckv+0x398>)
 23ecc40:	f00b fae0 	bl	23f8204 <sprintf>
            Output(msgbuf);
 23ecc44:	480e      	ldr	r0, [pc, #56]	; (23ecc80 <_Z14SimChangeCheckv+0x398>)
 23ecc46:	e6c5      	b.n	23ec9d4 <_Z14SimChangeCheckv+0xec>
          Output ("SIMF:RENAME OK");
 23ecc48:	4811      	ldr	r0, [pc, #68]	; (23ecc90 <_Z14SimChangeCheckv+0x3a8>)
 23ecc4a:	e701      	b.n	23eca50 <_Z14SimChangeCheckv+0x168>
          Output ("=====================");
 23ecc4c:	4811      	ldr	r0, [pc, #68]	; (23ecc94 <_Z14SimChangeCheckv+0x3ac>)
 23ecc4e:	f7fb fe7f 	bl	23e8950 <_Z6OutputPKc>
          Output ("!!! SET SIM ERROR !!!");
 23ecc52:	4811      	ldr	r0, [pc, #68]	; (23ecc98 <_Z14SimChangeCheckv+0x3b0>)
 23ecc54:	f7fb fe7c 	bl	23e8950 <_Z6OutputPKc>
          Output ("=====================");
 23ecc58:	480e      	ldr	r0, [pc, #56]	; (23ecc94 <_Z14SimChangeCheckv+0x3ac>)
 23ecc5a:	e708      	b.n	23eca6e <_Z14SimChangeCheckv+0x186>
        }
      }
      else {
        Output ("SIMF:OPEN ERROR");
 23ecc5c:	480f      	ldr	r0, [pc, #60]	; (23ecc9c <_Z14SimChangeCheckv+0x3b4>)
      }
    } 
    else {
      Output ("SIM:NO UPDATE FILE");
 23ecc5e:	f7fb fe77 	bl	23e8950 <_Z6OutputPKc>
    }
  } // Console and SD enabled
}
 23ecc62:	b02e      	add	sp, #184	; 0xb8
 23ecc64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Output ("SIM:NO UPDATE FILE");
 23ecc68:	480d      	ldr	r0, [pc, #52]	; (23ecca0 <_Z14SimChangeCheckv+0x3b8>)
 23ecc6a:	e7f8      	b.n	23ecc5e <_Z14SimChangeCheckv+0x376>
 23ecc6c:	023fe33a 	.word	0x023fe33a
 23ecc70:	023fdc08 	.word	0x023fdc08
 23ecc74:	023fe329 	.word	0x023fe329
 23ecc78:	023fe2c8 	.word	0x023fe2c8
 23ecc7c:	023fe2dc 	.word	0x023fe2dc
 23ecc80:	1006f148 	.word	0x1006f148
 23ecc84:	023fe33e 	.word	0x023fe33e
 23ecc88:	023fe347 	.word	0x023fe347
 23ecc8c:	023fe350 	.word	0x023fe350
 23ecc90:	023fe382 	.word	0x023fe382
 23ecc94:	023fe3a0 	.word	0x023fe3a0
 23ecc98:	023fe3b6 	.word	0x023fe3b6
 23ecc9c:	023fe3cc 	.word	0x023fe3cc
 23ecca0:	023fe3dc 	.word	0x023fe3dc

023ecca4 <_Z14TXI_Initializev>:
/* 
 *=======================================================================================================================
 * TXI_Initialize() - Transmit Interval 5, 10 or 15 minutes
 *=======================================================================================================================
 */
void TXI_Initialize() {
 23ecca4:	b510      	push	{r4, lr}
  Output ("TXI:INIT");
 23ecca6:	4822      	ldr	r0, [pc, #136]	; (23ecd30 <_Z14TXI_Initializev+0x8c>)
 23ecca8:	f7fb fe52 	bl	23e8950 <_Z6OutputPKc>
  if (SD_exists) {
 23eccac:	4b21      	ldr	r3, [pc, #132]	; (23ecd34 <_Z14TXI_Initializev+0x90>)
 23eccae:	4c22      	ldr	r4, [pc, #136]	; (23ecd38 <_Z14TXI_Initializev+0x94>)
 23eccb0:	781b      	ldrb	r3, [r3, #0]
 23eccb2:	b1c3      	cbz	r3, 23ecce6 <_Z14TXI_Initializev+0x42>
    return vwd()->exists(path);
 23eccb4:	4921      	ldr	r1, [pc, #132]	; (23ecd3c <_Z14TXI_Initializev+0x98>)
 23eccb6:	4822      	ldr	r0, [pc, #136]	; (23ecd40 <_Z14TXI_Initializev+0x9c>)
 23eccb8:	f7fb fc14 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
    if (SD.exists(SD_TX5M_FILE)) {
 23eccbc:	b1e8      	cbz	r0, 23eccfa <_Z14TXI_Initializev+0x56>
      Output ("TXI5M Found");
 23eccbe:	4821      	ldr	r0, [pc, #132]	; (23ecd44 <_Z14TXI_Initializev+0xa0>)
 23eccc0:	f7fb fe46 	bl	23e8950 <_Z6OutputPKc>
      obs_tx_interval = 5;
 23eccc4:	2205      	movs	r2, #5
 23eccc6:	2300      	movs	r3, #0
 23eccc8:	491f      	ldr	r1, [pc, #124]	; (23ecd48 <_Z14TXI_Initializev+0xa4>)
 23eccca:	481d      	ldr	r0, [pc, #116]	; (23ecd40 <_Z14TXI_Initializev+0x9c>)
 23ecccc:	e9c4 2300 	strd	r2, r3, [r4]
 23eccd0:	f7fb fc08 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_TX10M_FILE)) {
 23eccd4:	b138      	cbz	r0, 23ecce6 <_Z14TXI_Initializev+0x42>
    return FatFile::remove(vwd(), path);
 23eccd6:	491c      	ldr	r1, [pc, #112]	; (23ecd48 <_Z14TXI_Initializev+0xa4>)
 23eccd8:	4819      	ldr	r0, [pc, #100]	; (23ecd40 <_Z14TXI_Initializev+0x9c>)
 23eccda:	f008 fff8 	bl	23f5cce <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_TX10M_FILE)) {
 23eccde:	b110      	cbz	r0, 23ecce6 <_Z14TXI_Initializev+0x42>
          Output ("TXI:RM 10M");
 23ecce0:	481a      	ldr	r0, [pc, #104]	; (23ecd4c <_Z14TXI_Initializev+0xa8>)
    else if (SD.exists(SD_TX10M_FILE)) {
      Output ("TXI10M Found");
      obs_tx_interval = 10;
      if (SD.exists(SD_TX5M_FILE)) {
        if (SD.remove (SD_TX5M_FILE)) {
          Output ("TXI:RM 5M");
 23ecce2:	f7fb fe35 	bl	23e8950 <_Z6OutputPKc>
        }
      }
    }
  }
  sprintf (msgbuf, "TXI=%dM", (int) obs_tx_interval);
 23ecce6:	6822      	ldr	r2, [r4, #0]
 23ecce8:	4919      	ldr	r1, [pc, #100]	; (23ecd50 <_Z14TXI_Initializev+0xac>)
 23eccea:	481a      	ldr	r0, [pc, #104]	; (23ecd54 <_Z14TXI_Initializev+0xb0>)
 23eccec:	f00b fa8a 	bl	23f8204 <sprintf>
  Output(msgbuf);  
 23eccf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Output(msgbuf);  
 23eccf4:	4817      	ldr	r0, [pc, #92]	; (23ecd54 <_Z14TXI_Initializev+0xb0>)
 23eccf6:	f7fb be2b 	b.w	23e8950 <_Z6OutputPKc>
    return vwd()->exists(path);
 23eccfa:	4913      	ldr	r1, [pc, #76]	; (23ecd48 <_Z14TXI_Initializev+0xa4>)
 23eccfc:	4810      	ldr	r0, [pc, #64]	; (23ecd40 <_Z14TXI_Initializev+0x9c>)
 23eccfe:	f7fb fbf1 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
    else if (SD.exists(SD_TX10M_FILE)) {
 23ecd02:	2800      	cmp	r0, #0
 23ecd04:	d0ef      	beq.n	23ecce6 <_Z14TXI_Initializev+0x42>
      Output ("TXI10M Found");
 23ecd06:	4814      	ldr	r0, [pc, #80]	; (23ecd58 <_Z14TXI_Initializev+0xb4>)
 23ecd08:	f7fb fe22 	bl	23e8950 <_Z6OutputPKc>
      obs_tx_interval = 10;
 23ecd0c:	220a      	movs	r2, #10
 23ecd0e:	2300      	movs	r3, #0
 23ecd10:	490a      	ldr	r1, [pc, #40]	; (23ecd3c <_Z14TXI_Initializev+0x98>)
 23ecd12:	480b      	ldr	r0, [pc, #44]	; (23ecd40 <_Z14TXI_Initializev+0x9c>)
 23ecd14:	e9c4 2300 	strd	r2, r3, [r4]
 23ecd18:	f7fb fbe4 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_TX5M_FILE)) {
 23ecd1c:	2800      	cmp	r0, #0
 23ecd1e:	d0e2      	beq.n	23ecce6 <_Z14TXI_Initializev+0x42>
    return FatFile::remove(vwd(), path);
 23ecd20:	4906      	ldr	r1, [pc, #24]	; (23ecd3c <_Z14TXI_Initializev+0x98>)
 23ecd22:	4807      	ldr	r0, [pc, #28]	; (23ecd40 <_Z14TXI_Initializev+0x9c>)
 23ecd24:	f008 ffd3 	bl	23f5cce <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_TX5M_FILE)) {
 23ecd28:	2800      	cmp	r0, #0
 23ecd2a:	d0dc      	beq.n	23ecce6 <_Z14TXI_Initializev+0x42>
          Output ("TXI:RM 5M");
 23ecd2c:	480b      	ldr	r0, [pc, #44]	; (23ecd5c <_Z14TXI_Initializev+0xb8>)
 23ecd2e:	e7d8      	b.n	23ecce2 <_Z14TXI_Initializev+0x3e>
 23ecd30:	023fe3ef 	.word	0x023fe3ef
 23ecd34:	1006a7ec 	.word	0x1006a7ec
 23ecd38:	1006a258 	.word	0x1006a258
 23ecd3c:	1006a1f5 	.word	0x1006a1f5
 23ecd40:	1006a7a4 	.word	0x1006a7a4
 23ecd44:	023fe3f8 	.word	0x023fe3f8
 23ecd48:	1006a1ea 	.word	0x1006a1ea
 23ecd4c:	023fe404 	.word	0x023fe404
 23ecd50:	023fe426 	.word	0x023fe426
 23ecd54:	1006f148 	.word	0x1006f148
 23ecd58:	023fe40f 	.word	0x023fe40f
 23ecd5c:	023fe41c 	.word	0x023fe41c

023ecd60 <_Z9HeartBeatv>:
/*
 * ======================================================================================================================
 * HeartBeat() - Burns 250 ms 
 * ======================================================================================================================
 */
void HeartBeat() {
 23ecd60:	b508      	push	{r3, lr}
  digitalWrite(HEARTBEAT_PIN, HIGH);
 23ecd62:	2101      	movs	r1, #1
 23ecd64:	2012      	movs	r0, #18
 23ecd66:	f00d fa62 	bl	23fa22e <digitalWrite>
  delay(250);
 23ecd6a:	20fa      	movs	r0, #250	; 0xfa
 23ecd6c:	f00b fad6 	bl	23f831c <delay>
  digitalWrite(HEARTBEAT_PIN, LOW);
}
 23ecd70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(HEARTBEAT_PIN, LOW);
 23ecd74:	2100      	movs	r1, #0
 23ecd76:	2012      	movs	r0, #18
 23ecd78:	f00d ba59 	b.w	23fa22e <digitalWrite>

023ecd7c <_Z17Serial_Initializev>:
/*
 * ======================================================================================================================
 * Serial_Initialize() -
 * ======================================================================================================================
 */
void Serial_Initialize() {
 23ecd7c:	b510      	push	{r4, lr}
  // serial console enable pin
  pinMode(SCE_PIN, INPUT_PULLUP);   // Internal pullup resistor biases the pin to supply voltage.
 23ecd7e:	4c20      	ldr	r4, [pc, #128]	; (23ece00 <_Z17Serial_Initializev+0x84>)
 23ecd80:	2102      	movs	r1, #2
 23ecd82:	8820      	ldrh	r0, [r4, #0]
 23ecd84:	f00d fa42 	bl	23fa20c <pinMode>
                                    // If jumper set to ground, we enable serial console (low = enable)
  if (digitalRead(SCE_PIN) == LOW) {
 23ecd88:	8820      	ldrh	r0, [r4, #0]
 23ecd8a:	f00d fa69 	bl	23fa260 <digitalRead>
 23ecd8e:	4c1d      	ldr	r4, [pc, #116]	; (23ece04 <_Z17Serial_Initializev+0x88>)
 23ecd90:	b908      	cbnz	r0, 23ecd96 <_Z17Serial_Initializev+0x1a>
    SerialConsoleEnabled = true;
 23ecd92:	2301      	movs	r3, #1
 23ecd94:	7023      	strb	r3, [r4, #0]
  }

  // There are libraries that print to Serial Console so we need to initialize no mater what the jumper is set to.
  Serial.begin(9600);
 23ecd96:	f00d f8cd 	bl	23f9f34 <_Z16_fetch_usbserialv>
 23ecd9a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23ecd9e:	f00d f8b9 	bl	23f9f14 <_ZN9USBSerial5beginEl>
  delay(1000); // prevents usb driver crash on startup, do not omit this
 23ecda2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23ecda6:	f00b fab9 	bl	23f831c <delay>

  if (SerialConsoleEnabled) {
 23ecdaa:	7823      	ldrb	r3, [r4, #0]
 23ecdac:	b33b      	cbz	r3, 23ecdfe <_Z17Serial_Initializev+0x82>
    // Wait for serial port to be available
    if (!Serial.isConnected()) {
 23ecdae:	f00d f8c1 	bl	23f9f34 <_Z16_fetch_usbserialv>
 23ecdb2:	f00d f8b3 	bl	23f9f1c <_ZN9USBSerial11isConnectedEv>
 23ecdb6:	b910      	cbnz	r0, 23ecdbe <_Z17Serial_Initializev+0x42>
      OLED_write("Wait4 Serial Console");
 23ecdb8:	4813      	ldr	r0, [pc, #76]	; (23ece08 <_Z17Serial_Initializev+0x8c>)
 23ecdba:	f7fb fd25 	bl	23e8808 <_Z10OLED_writePKc>
void Serial_Initialize() {
 23ecdbe:	243d      	movs	r4, #61	; 0x3d
    }
    int countdown=60; // Wait N seconds for serial connection, then move on.
    while (!Serial.isConnected() && countdown) {
 23ecdc0:	f00d f8b8 	bl	23f9f34 <_Z16_fetch_usbserialv>
 23ecdc4:	f00d f8aa 	bl	23f9f1c <_ZN9USBSerial11isConnectedEv>
 23ecdc8:	b948      	cbnz	r0, 23ecdde <_Z17Serial_Initializev+0x62>
 23ecdca:	3c01      	subs	r4, #1
 23ecdcc:	d007      	beq.n	23ecdde <_Z17Serial_Initializev+0x62>
      HeartBeat(); // Provices 250ms delay
 23ecdce:	f7ff ffc7 	bl	23ecd60 <_Z9HeartBeatv>
      Blink(1, 750);
 23ecdd2:	f240 21ee 	movw	r1, #750	; 0x2ee
 23ecdd6:	2001      	movs	r0, #1
 23ecdd8:	f7fb fbc6 	bl	23e8568 <_Z5Blinkii>
    while (!Serial.isConnected() && countdown) {
 23ecddc:	e7f0      	b.n	23ecdc0 <_Z17Serial_Initializev+0x44>
      countdown--;
    }

    Serial_writeln(""); // Send carriage return and linefeed
 23ecdde:	480b      	ldr	r0, [pc, #44]	; (23ece0c <_Z17Serial_Initializev+0x90>)
 23ecde0:	f7fb fd9e 	bl	23e8920 <_Z14Serial_writelnPKc>
    
    if (DisplayEnabled) {
 23ecde4:	4b0a      	ldr	r3, [pc, #40]	; (23ece10 <_Z17Serial_Initializev+0x94>)
 23ecde6:	781b      	ldrb	r3, [r3, #0]
 23ecde8:	b13b      	cbz	r3, 23ecdfa <_Z17Serial_Initializev+0x7e>
      Serial_writeln ("OLED:Enabled");
 23ecdea:	480a      	ldr	r0, [pc, #40]	; (23ece14 <_Z17Serial_Initializev+0x98>)
    }
    else {
      Serial_writeln ("OLED:Disabled");
 23ecdec:	f7fb fd98 	bl	23e8920 <_Z14Serial_writelnPKc>
    }
    Output ("SC:Enabled");
  }
}
 23ecdf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Output ("SC:Enabled");
 23ecdf4:	4808      	ldr	r0, [pc, #32]	; (23ece18 <_Z17Serial_Initializev+0x9c>)
 23ecdf6:	f7fb bdab 	b.w	23e8950 <_Z6OutputPKc>
      Serial_writeln ("OLED:Disabled");
 23ecdfa:	4808      	ldr	r0, [pc, #32]	; (23ece1c <_Z17Serial_Initializev+0xa0>)
 23ecdfc:	e7f6      	b.n	23ecdec <_Z17Serial_Initializev+0x70>
}
 23ecdfe:	bd10      	pop	{r4, pc}
 23ece00:	1006a1a8 	.word	0x1006a1a8
 23ece04:	1006a827 	.word	0x1006a827
 23ece08:	023fe42e 	.word	0x023fe42e
 23ece0c:	023fdc09 	.word	0x023fdc09
 23ece10:	1006a1a1 	.word	0x1006a1a1
 23ece14:	023fe443 	.word	0x023fe443
 23ece18:	023fe45e 	.word	0x023fe45e
 23ece1c:	023fe450 	.word	0x023fe450

023ece20 <_Z17Output_Initializev>:
/*
 * ======================================================================================================================
 * Output_Initialize() -
 * ======================================================================================================================
 */
void Output_Initialize() {
 23ece20:	b508      	push	{r3, lr}
  OLED_initialize();
 23ece22:	f7fb fd9f 	bl	23e8964 <_Z15OLED_initializev>
  Output("SER:Init");
 23ece26:	4805      	ldr	r0, [pc, #20]	; (23ece3c <_Z17Output_Initializev+0x1c>)
 23ece28:	f7fb fd92 	bl	23e8950 <_Z6OutputPKc>
  Serial_Initialize();
 23ece2c:	f7ff ffa6 	bl	23ecd7c <_Z17Serial_Initializev>
  Output("SER:OK");
 23ece30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output("SER:OK");
 23ece34:	4802      	ldr	r0, [pc, #8]	; (23ece40 <_Z17Output_Initializev+0x20>)
 23ece36:	f7fb bd8b 	b.w	23e8950 <_Z6OutputPKc>
 23ece3a:	bf00      	nop
 23ece3c:	023fe469 	.word	0x023fe469
 23ece40:	023fe472 	.word	0x023fe472

023ece44 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
 23ece44:	2200      	movs	r2, #0
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
 23ece46:	b570      	push	{r4, r5, r6, lr}
 23ece48:	b08c      	sub	sp, #48	; 0x30
 23ece4a:	460d      	mov	r5, r1
    const int ret = diag_get_source(id, &src, nullptr);
 23ece4c:	4669      	mov	r1, sp
 23ece4e:	4676      	mov	r6, lr
    const diag_source* src = nullptr;
 23ece50:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
 23ece52:	f00a ff8b 	bl	23f7d6c <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
 23ece56:	b9e8      	cbnz	r0, 23ece94 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x50>
        return ret;
    }
    return get(src, val);
 23ece58:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
 23ece5a:	b10c      	cbz	r4, 23ece60 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1c>
 23ece5c:	6923      	ldr	r3, [r4, #16]
 23ece5e:	b97b      	cbnz	r3, 23ece80 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>
 23ece60:	222c      	movs	r2, #44	; 0x2c
 23ece62:	2100      	movs	r1, #0
 23ece64:	a801      	add	r0, sp, #4
 23ece66:	f00f ffee 	bl	23fce46 <memset>
 23ece6a:	4b0b      	ldr	r3, [pc, #44]	; (23ece98 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x54>)
 23ece6c:	9604      	str	r6, [sp, #16]
 23ece6e:	9301      	str	r3, [sp, #4]
 23ece70:	4b0a      	ldr	r3, [pc, #40]	; (23ece9c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x58>)
 23ece72:	9302      	str	r3, [sp, #8]
}

__attribute__((always_inline)) static inline uint32_t __get_PC(void) { 
    uint32_t result; 

    asm volatile ("mov %0, pc\n" : "=r" (result) ); 
 23ece74:	467b      	mov	r3, pc
 23ece76:	2100      	movs	r1, #0
 23ece78:	a801      	add	r0, sp, #4
 23ece7a:	9303      	str	r3, [sp, #12]
 23ece7c:	f00a ff84 	bl	23f7d88 <panic_ext>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
 23ece80:	230c      	movs	r3, #12
 23ece82:	e9cd 3501 	strd	r3, r5, [sp, #4]
 23ece86:	2304      	movs	r3, #4
 23ece88:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
 23ece8a:	2101      	movs	r1, #1
 23ece8c:	4620      	mov	r0, r4
 23ece8e:	6923      	ldr	r3, [r4, #16]
 23ece90:	aa01      	add	r2, sp, #4
 23ece92:	4798      	blx	r3
}
 23ece94:	b00c      	add	sp, #48	; 0x30
 23ece96:	bd70      	pop	{r4, r5, r6, pc}
 23ece98:	000a002c 	.word	0x000a002c
 23ece9c:	023fe479 	.word	0x023fe479

023ecea0 <_ZNK11SystemClass13batteryChargeEv.isra.0>:
            return r;
        }
        return val;
    }

    float batteryCharge() const {
 23ecea0:	b507      	push	{r0, r1, r2, lr}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
 23ecea2:	2003      	movs	r0, #3
 23ecea4:	a901      	add	r1, sp, #4
 23ecea6:	f7ff ffcd 	bl	23ece44 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
 23eceaa:	b940      	cbnz	r0, 23ecebe <_ZNK11SystemClass13batteryChargeEv.isra.0+0x1e>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
 23eceac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 23eceb0:	ee00 3a10 	vmov	s0, r3
 23eceb4:	eebb 0acc 	vcvt.f32.u32	s0, s0, #8

        using SocFixedPointT = particle::FixedPointUQ<8, 8>;

        SocFixedPointT soc(static_cast<typename SocFixedPointT::type>(val));
        return soc.toFloat();
    }
 23eceb8:	b003      	add	sp, #12
 23eceba:	f85d fb04 	ldr.w	pc, [sp], #4
            return -1.0f;
 23ecebe:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 23ecec2:	e7f9      	b.n	23eceb8 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x18>

023ecec4 <_ZNK11SystemClass12batteryStateEv.isra.0>:
    int batteryState() const {
 23ecec4:	b507      	push	{r0, r1, r2, lr}
 23ecec6:	2007      	movs	r0, #7
 23ecec8:	a901      	add	r1, sp, #4
 23ececa:	f7ff ffbb 	bl	23ece44 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
 23ecece:	2800      	cmp	r0, #0
        return val;
 23eced0:	bfa8      	it	ge
 23eced2:	9801      	ldrge	r0, [sp, #4]
    }
 23eced4:	b003      	add	sp, #12
 23eced6:	f85d fb04 	ldr.w	pc, [sp], #4
 23eceda:	0000      	movs	r0, r0
 23ecedc:	0000      	movs	r0, r0
	...

023ecee0 <_Z6OBS_Dov>:
/*
 * ======================================================================================================================
 * OBS_Do() - Get Observations - Should be called once a minute
 * ======================================================================================================================
 */
void OBS_Do() {
 23ecee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ecee4:	ed2d 8b06 	vpush	{d8-d10}
 23ecee8:	b099      	sub	sp, #100	; 0x64

// Output("DB:OBS_Start");


  // Safty Check for Vaild Time
  if (!Time.isValid()) {
 23eceea:	f00c fef0 	bl	23f9cce <_ZN9TimeClass7isValidEv>
 23eceee:	b948      	cbnz	r0, 23ecf04 <_Z6OBS_Dov+0x24>
    Output ("OBS_Do: Time NV");
 23ecef0:	4803      	ldr	r0, [pc, #12]	; (23ecf00 <_Z6OBS_Dov+0x20>)
  // Save Observation to SD Card
  OBS_Log(oidx);

  lastOBS = System.millis();
// Output("DB:OBS_Exit");
}
 23ecef2:	b019      	add	sp, #100	; 0x64
 23ecef4:	ecbd 8b06 	vpop	{d8-d10}
 23ecef8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Output ("OBS_Do: Time NV");
 23ecefc:	f7fb bd28 	b.w	23e8950 <_Z6OutputPKc>
 23ecf00:	023fe49a 	.word	0x023fe49a
  Wind_GustUpdate(); // Update Gust and Gust Direction readings
 23ecf04:	f7fd fd6c 	bl	23ea9e0 <_Z15Wind_GustUpdatev>
  int BatteryState = System.batteryState();
 23ecf08:	f7ff ffdc 	bl	23ecec4 <_ZNK11SystemClass12batteryStateEv.isra.0>
  CellularSignal sig = Cellular.RSSI();
 23ecf0c:	49de      	ldr	r1, [pc, #888]	; (23ed288 <_Z6OBS_Dov+0x3a8>)
  int BatteryState = System.batteryState();
 23ecf0e:	4681      	mov	r9, r0
  CellularSignal sig = Cellular.RSSI();
 23ecf10:	a804      	add	r0, sp, #16
 23ecf12:	f00b fa7b 	bl	23f840c <_ZN5spark13CellularClass4RSSIEv>
  byte cfr = pmic.getFault(); // Get Battery Charger Failt Register
 23ecf16:	48dd      	ldr	r0, [pc, #884]	; (23ed28c <_Z6OBS_Dov+0x3ac>)
 23ecf18:	f00c fb7f 	bl	23f961a <_ZN4PMIC8getFaultEv>
  if (BatteryState>0 && BatteryState<6) {
 23ecf1c:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 23ecf20:	2b04      	cmp	r3, #4
  byte cfr = pmic.getFault(); // Get Battery Charger Failt Register
 23ecf22:	4682      	mov	sl, r0
  if (BatteryState>0 && BatteryState<6) {
 23ecf24:	f200 81f8 	bhi.w	23ed318 <_Z6OBS_Dov+0x438>
    BatteryPoC = System.batteryCharge();
 23ecf28:	f7ff ffba 	bl	23ecea0 <_ZNK11SystemClass13batteryChargeEv.isra.0>
 23ecf2c:	eeb0 8a40 	vmov.f32	s16, s0
  oidx = OBS_Open();    // Get a free observation spot
 23ecf30:	f7ff f894 	bl	23ec05c <_Z8OBS_Openv>
  obs[oidx].inuse = true;
 23ecf34:	f640 2698 	movw	r6, #2712	; 0xa98
 23ecf38:	f04f 0801 	mov.w	r8, #1
 23ecf3c:	4346      	muls	r6, r0
 23ecf3e:	4cd4      	ldr	r4, [pc, #848]	; (23ed290 <_Z6OBS_Dov+0x3b0>)
  oidx = OBS_Open();    // Get a free observation spot
 23ecf40:	9000      	str	r0, [sp, #0]
  obs[oidx].inuse = true;
 23ecf42:	f804 8006 	strb.w	r8, [r4, r6]
  obs[oidx].ts = Time.now();
 23ecf46:	f00c fedf 	bl	23f9d08 <_ZN9TimeClass3nowEv>
  obs[oidx].inuse = true;
 23ecf4a:	19a7      	adds	r7, r4, r6
  obs[oidx].ts = Time.now();
 23ecf4c:	17c3      	asrs	r3, r0, #31
 23ecf4e:	e9c7 0302 	strd	r0, r3, [r7, #8]
  obs[oidx].css = sig.getStrength();
 23ecf52:	a804      	add	r0, sp, #16
 23ecf54:	f00b fab8 	bl	23f84c8 <_ZNK14CellularSignal11getStrengthEv>
 23ecf58:	f106 0518 	add.w	r5, r6, #24
 23ecf5c:	ed87 0a04 	vstr	s0, [r7, #16]
  strcpy (obs[oidx].sensor[sidx].id, "bcs");
 23ecf60:	49cc      	ldr	r1, [pc, #816]	; (23ed294 <_Z6OBS_Dov+0x3b4>)
 23ecf62:	1960      	adds	r0, r4, r5
 23ecf64:	f00f ffe4 	bl	23fcf30 <strcpy>
  strcpy (obs[oidx].sensor[sidx].id, "bpc");
 23ecf68:	f106 0034 	add.w	r0, r6, #52	; 0x34
 23ecf6c:	49ca      	ldr	r1, [pc, #808]	; (23ed298 <_Z6OBS_Dov+0x3b8>)
  obs[oidx].sensor[sidx].type = I_OBS;
 23ecf6e:	f8c7 8020 	str.w	r8, [r7, #32]
  obs[oidx].sensor[sidx].i_obs = BatteryState;
 23ecf72:	f8c7 9028 	str.w	r9, [r7, #40]	; 0x28
  obs[oidx].sensor[sidx++].inuse = true;
 23ecf76:	f887 8030 	strb.w	r8, [r7, #48]	; 0x30
  strcpy (obs[oidx].sensor[sidx].id, "bpc");
 23ecf7a:	4420      	add	r0, r4
 23ecf7c:	f00f ffd8 	bl	23fcf30 <strcpy>
  obs[oidx].sensor[sidx].type = F_OBS;
 23ecf80:	2300      	movs	r3, #0
  strcpy (obs[oidx].sensor[sidx].id, "cfr");
 23ecf82:	f106 0050 	add.w	r0, r6, #80	; 0x50
  obs[oidx].sensor[sidx].type = F_OBS;
 23ecf86:	63fb      	str	r3, [r7, #60]	; 0x3c
  obs[oidx].sensor[sidx].f_obs = BatteryPoC;
 23ecf88:	ed87 8a10 	vstr	s16, [r7, #64]	; 0x40
  strcpy (obs[oidx].sensor[sidx].id, "cfr");
 23ecf8c:	49c3      	ldr	r1, [pc, #780]	; (23ed29c <_Z6OBS_Dov+0x3bc>)
  obs[oidx].sensor[sidx++].inuse = true;
 23ecf8e:	f887 804c 	strb.w	r8, [r7, #76]	; 0x4c
  strcpy (obs[oidx].sensor[sidx].id, "cfr");
 23ecf92:	4420      	add	r0, r4
 23ecf94:	f00f ffcc 	bl	23fcf30 <strcpy>
  obs[oidx].sensor[sidx].i_obs = cfr;
 23ecf98:	f8c7 a060 	str.w	sl, [r7, #96]	; 0x60
  obs[oidx].sensor[sidx].type = I_OBS;
 23ecf9c:	f8c7 8058 	str.w	r8, [r7, #88]	; 0x58
  obs[oidx].sensor[sidx++].inuse = true;
 23ecfa0:	f887 8068 	strb.w	r8, [r7, #104]	; 0x68
  rgds = (System.millis()-raingauge1_interrupt_stime)/1000;
 23ecfa4:	f7fb fa3c 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23ecfa8:	468c      	mov	ip, r1
 23ecfaa:	4fbd      	ldr	r7, [pc, #756]	; (23ed2a0 <_Z6OBS_Dov+0x3c0>)
 23ecfac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23ecfb0:	683b      	ldr	r3, [r7, #0]
 23ecfb2:	6879      	ldr	r1, [r7, #4]
 23ecfb4:	1ac0      	subs	r0, r0, r3
 23ecfb6:	eb6c 0101 	sbc.w	r1, ip, r1
 23ecfba:	2300      	movs	r3, #0
 23ecfbc:	f7fa fa9a 	bl	23e74f4 <__aeabi_uldivmod>
  rain = raingauge1_interrupt_count * 0.2;
 23ecfc0:	f8df b32c 	ldr.w	fp, [pc, #812]	; 23ed2f0 <_Z6OBS_Dov+0x410>
  rgds = (System.millis()-raingauge1_interrupt_stime)/1000;
 23ecfc4:	4682      	mov	sl, r0
  rain = raingauge1_interrupt_count * 0.2;
 23ecfc6:	f8db 0000 	ldr.w	r0, [fp]
 23ecfca:	f7f9 fd73 	bl	23e6ab4 <__aeabi_ui2d>
 23ecfce:	a3ac      	add	r3, pc, #688	; (adr r3, 23ed280 <_Z6OBS_Dov+0x3a0>)
 23ecfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ecfd4:	f7f9 fde8 	bl	23e6ba8 <__aeabi_dmul>
 23ecfd8:	f7fa f8de 	bl	23e7198 <__aeabi_d2f>
 23ecfdc:	ee08 0a10 	vmov	s16, r0
  rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
 23ecfe0:	eeb4 8a48 	vcmp.f32	s16, s16
 23ecfe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ecfe8:	f180 8199 	bvs.w	23ed31e <_Z6OBS_Dov+0x43e>
 23ecfec:	f7f9 fd84 	bl	23e6af8 <__aeabi_f2d>
 23ecff0:	4680      	mov	r8, r0
 23ecff2:	203c      	movs	r0, #60	; 0x3c
 23ecff4:	fbba f0f0 	udiv	r0, sl, r0
 23ecff8:	4689      	mov	r9, r1
 23ecffa:	f7f9 fd5b 	bl	23e6ab4 <__aeabi_ui2d>
 23ecffe:	2200      	movs	r2, #0
 23ed000:	4ba8      	ldr	r3, [pc, #672]	; (23ed2a4 <_Z6OBS_Dov+0x3c4>)
 23ed002:	f7f9 fdd1 	bl	23e6ba8 <__aeabi_dmul>
 23ed006:	4602      	mov	r2, r0
 23ed008:	460b      	mov	r3, r1
 23ed00a:	4640      	mov	r0, r8
 23ed00c:	4649      	mov	r1, r9
 23ed00e:	f7fa f85b 	bl	23e70c8 <__aeabi_dcmpgt>
 23ed012:	eddf 7aa5 	vldr	s15, [pc, #660]	; 23ed2a8 <_Z6OBS_Dov+0x3c8>
 23ed016:	2800      	cmp	r0, #0
 23ed018:	fe08 8a27 	vseleq.f32	s16, s16, s15
  raingauge1_interrupt_count = 0;
 23ed01c:	2300      	movs	r3, #0
 23ed01e:	f8cb 3000 	str.w	r3, [fp]
  raingauge1_interrupt_stime = System.millis();
 23ed022:	f7fb f9fd 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23ed026:	e9c7 0100 	strd	r0, r1, [r7]
  raingauge1_interrupt_ltime = 0; // used to debounce the tip
 23ed02a:	2000      	movs	r0, #0
 23ed02c:	2100      	movs	r1, #0
 23ed02e:	4b9f      	ldr	r3, [pc, #636]	; (23ed2ac <_Z6OBS_Dov+0x3cc>)
 23ed030:	e9c3 0100 	strd	r0, r1, [r3]
  if (A4_State == A4_STATE_RAIN) {
 23ed034:	4b9e      	ldr	r3, [pc, #632]	; (23ed2b0 <_Z6OBS_Dov+0x3d0>)
 23ed036:	681b      	ldr	r3, [r3, #0]
 23ed038:	2b02      	cmp	r3, #2
 23ed03a:	f040 8176 	bne.w	23ed32a <_Z6OBS_Dov+0x44a>
    rg2ds = (System.millis()-raingauge2_interrupt_stime)/1000;
 23ed03e:	f7fb f9ef 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23ed042:	468c      	mov	ip, r1
 23ed044:	4f9b      	ldr	r7, [pc, #620]	; (23ed2b4 <_Z6OBS_Dov+0x3d4>)
 23ed046:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23ed04a:	683b      	ldr	r3, [r7, #0]
 23ed04c:	6879      	ldr	r1, [r7, #4]
 23ed04e:	1ac0      	subs	r0, r0, r3
 23ed050:	eb6c 0101 	sbc.w	r1, ip, r1
 23ed054:	2300      	movs	r3, #0
 23ed056:	f7fa fa4d 	bl	23e74f4 <__aeabi_uldivmod>
    rain2 = raingauge2_interrupt_count * 0.2;
 23ed05a:	f8df 9298 	ldr.w	r9, [pc, #664]	; 23ed2f4 <_Z6OBS_Dov+0x414>
    rg2ds = (System.millis()-raingauge2_interrupt_stime)/1000;
 23ed05e:	4680      	mov	r8, r0
    rain2 = raingauge2_interrupt_count * 0.2;
 23ed060:	f8d9 0000 	ldr.w	r0, [r9]
 23ed064:	f7f9 fd26 	bl	23e6ab4 <__aeabi_ui2d>
 23ed068:	a385      	add	r3, pc, #532	; (adr r3, 23ed280 <_Z6OBS_Dov+0x3a0>)
 23ed06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ed06e:	f7f9 fd9b 	bl	23e6ba8 <__aeabi_dmul>
 23ed072:	f7fa f891 	bl	23e7198 <__aeabi_d2f>
 23ed076:	ee09 0a10 	vmov	s18, r0
    rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
 23ed07a:	eeb4 9a49 	vcmp.f32	s18, s18
 23ed07e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed082:	f180 814f 	bvs.w	23ed324 <_Z6OBS_Dov+0x444>
 23ed086:	f7f9 fd37 	bl	23e6af8 <__aeabi_f2d>
 23ed08a:	4682      	mov	sl, r0
 23ed08c:	203c      	movs	r0, #60	; 0x3c
 23ed08e:	fbb8 f0f0 	udiv	r0, r8, r0
 23ed092:	468b      	mov	fp, r1
 23ed094:	f7f9 fd0e 	bl	23e6ab4 <__aeabi_ui2d>
 23ed098:	2200      	movs	r2, #0
 23ed09a:	4b82      	ldr	r3, [pc, #520]	; (23ed2a4 <_Z6OBS_Dov+0x3c4>)
 23ed09c:	f7f9 fd84 	bl	23e6ba8 <__aeabi_dmul>
 23ed0a0:	4602      	mov	r2, r0
 23ed0a2:	460b      	mov	r3, r1
 23ed0a4:	4650      	mov	r0, sl
 23ed0a6:	4659      	mov	r1, fp
 23ed0a8:	f7fa f80e 	bl	23e70c8 <__aeabi_dcmpgt>
 23ed0ac:	eddf 7a7e 	vldr	s15, [pc, #504]	; 23ed2a8 <_Z6OBS_Dov+0x3c8>
 23ed0b0:	2800      	cmp	r0, #0
 23ed0b2:	fe09 9a27 	vseleq.f32	s18, s18, s15
    raingauge2_interrupt_count = 0;
 23ed0b6:	2300      	movs	r3, #0
 23ed0b8:	f8c9 3000 	str.w	r3, [r9]
    raingauge2_interrupt_stime = System.millis();
 23ed0bc:	f7fb f9b0 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23ed0c0:	e9c7 0100 	strd	r0, r1, [r7]
    raingauge2_interrupt_ltime = 0; // used to debounce the tip
 23ed0c4:	2000      	movs	r0, #0
 23ed0c6:	2100      	movs	r1, #0
 23ed0c8:	4b7b      	ldr	r3, [pc, #492]	; (23ed2b8 <_Z6OBS_Dov+0x3d8>)
 23ed0ca:	e9c3 0100 	strd	r0, r1, [r3]
  obs[oidx].sensor[sidx].type = F_OBS;
 23ed0ce:	f640 2798 	movw	r7, #2712	; 0xa98
 23ed0d2:	f04f 0800 	mov.w	r8, #0
  obs[oidx].sensor[sidx++].inuse = true;
 23ed0d6:	f04f 0901 	mov.w	r9, #1
  EEPROM_UpdateRainTotals(rain, rain2);
 23ed0da:	eeb0 0a48 	vmov.f32	s0, s16
 23ed0de:	eef0 0a49 	vmov.f32	s1, s18
 23ed0e2:	f7fe f83f 	bl	23eb164 <_Z23EEPROM_UpdateRainTotalsff>
  strcpy (obs[oidx].sensor[sidx].id, "rg");
 23ed0e6:	f106 006c 	add.w	r0, r6, #108	; 0x6c
 23ed0ea:	4974      	ldr	r1, [pc, #464]	; (23ed2bc <_Z6OBS_Dov+0x3dc>)
 23ed0ec:	4420      	add	r0, r4
 23ed0ee:	f00f ff1f 	bl	23fcf30 <strcpy>
  obs[oidx].sensor[sidx].type = F_OBS;
 23ed0f2:	9b00      	ldr	r3, [sp, #0]
  obs[oidx].sensor[sidx].f_obs = eeprom.rgt1;
 23ed0f4:	f8df a200 	ldr.w	sl, [pc, #512]	; 23ed2f8 <_Z6OBS_Dov+0x418>
  obs[oidx].sensor[sidx].type = F_OBS;
 23ed0f8:	fb07 4703 	mla	r7, r7, r3, r4
  strcpy (obs[oidx].sensor[sidx].id, "rgt");
 23ed0fc:	f106 0088 	add.w	r0, r6, #136	; 0x88
 23ed100:	496f      	ldr	r1, [pc, #444]	; (23ed2c0 <_Z6OBS_Dov+0x3e0>)
  obs[oidx].sensor[sidx].f_obs = rain;
 23ed102:	ed87 8a1e 	vstr	s16, [r7, #120]	; 0x78
  obs[oidx].sensor[sidx].type = F_OBS;
 23ed106:	f8c7 8074 	str.w	r8, [r7, #116]	; 0x74
  obs[oidx].sensor[sidx++].inuse = true;
 23ed10a:	f887 9084 	strb.w	r9, [r7, #132]	; 0x84
  strcpy (obs[oidx].sensor[sidx].id, "rgt");
 23ed10e:	4420      	add	r0, r4
 23ed110:	f00f ff0e 	bl	23fcf30 <strcpy>
  obs[oidx].sensor[sidx].f_obs = eeprom.rgt1;
 23ed114:	f8da 3000 	ldr.w	r3, [sl]
  strcpy (obs[oidx].sensor[sidx].id, "rgp");
 23ed118:	f106 00a4 	add.w	r0, r6, #164	; 0xa4
 23ed11c:	4969      	ldr	r1, [pc, #420]	; (23ed2c4 <_Z6OBS_Dov+0x3e4>)
  obs[oidx].sensor[sidx].f_obs = eeprom.rgt1;
 23ed11e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  obs[oidx].sensor[sidx].type = F_OBS;
 23ed122:	f8c7 8090 	str.w	r8, [r7, #144]	; 0x90
  obs[oidx].sensor[sidx++].inuse = true;
 23ed126:	f887 90a0 	strb.w	r9, [r7, #160]	; 0xa0
  strcpy (obs[oidx].sensor[sidx].id, "rgp");
 23ed12a:	4420      	add	r0, r4
 23ed12c:	f00f ff00 	bl	23fcf30 <strcpy>
  obs[oidx].sensor[sidx].f_obs = eeprom.rgp1;
 23ed130:	f8da 3004 	ldr.w	r3, [sl, #4]
  strcpy (obs[oidx].sensor[sidx].id, "ws");
 23ed134:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
  obs[oidx].sensor[sidx].f_obs = eeprom.rgp1;
 23ed138:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  strcpy (obs[oidx].sensor[sidx].id, "ws");
 23ed13c:	4962      	ldr	r1, [pc, #392]	; (23ed2c8 <_Z6OBS_Dov+0x3e8>)
  obs[oidx].sensor[sidx].type = F_OBS;
 23ed13e:	f8c7 80ac 	str.w	r8, [r7, #172]	; 0xac
  obs[oidx].sensor[sidx++].inuse = true;
 23ed142:	f887 90bc 	strb.w	r9, [r7, #188]	; 0xbc
  strcpy (obs[oidx].sensor[sidx].id, "ws");
 23ed146:	4420      	add	r0, r4
 23ed148:	f00f fef2 	bl	23fcf30 <strcpy>
  obs[oidx].sensor[sidx].type = F_OBS;
 23ed14c:	f8c7 80c8 	str.w	r8, [r7, #200]	; 0xc8
  ws = Wind_SpeedAverage();
 23ed150:	f7fd fc2c 	bl	23ea9ac <_Z17Wind_SpeedAveragev>
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23ed154:	eeb4 0a40 	vcmp.f32	s0, s0
 23ed158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed15c:	f180 80e8 	bvs.w	23ed330 <_Z6OBS_Dov+0x450>
 23ed160:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23ed164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed168:	f100 80e2 	bmi.w	23ed330 <_Z6OBS_Dov+0x450>
 23ed16c:	eddf 7a57 	vldr	s15, [pc, #348]	; 23ed2cc <_Z6OBS_Dov+0x3ec>
 23ed170:	eeb4 0a67 	vcmp.f32	s0, s15
 23ed174:	eddf 7a4c 	vldr	s15, [pc, #304]	; 23ed2a8 <_Z6OBS_Dov+0x3c8>
 23ed178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed17c:	fe37 0a80 	vselgt.f32	s0, s15, s0
  obs[oidx].sensor[sidx].f_obs = ws;
 23ed180:	f640 2798 	movw	r7, #2712	; 0xa98
  obs[oidx].sensor[sidx++].inuse = true;
 23ed184:	f04f 0901 	mov.w	r9, #1
  obs[oidx].sensor[sidx].f_obs = ws;
 23ed188:	9b00      	ldr	r3, [sp, #0]
  strcpy (obs[oidx].sensor[sidx].id, "wd");
 23ed18a:	f106 00dc 	add.w	r0, r6, #220	; 0xdc
  obs[oidx].sensor[sidx].f_obs = ws;
 23ed18e:	fb07 4803 	mla	r8, r7, r3, r4
  strcpy (obs[oidx].sensor[sidx].id, "wd");
 23ed192:	494f      	ldr	r1, [pc, #316]	; (23ed2d0 <_Z6OBS_Dov+0x3f0>)
  obs[oidx].sensor[sidx].f_obs = ws;
 23ed194:	ed88 0a33 	vstr	s0, [r8, #204]	; 0xcc
  obs[oidx].sensor[sidx++].inuse = true;
 23ed198:	f888 90d8 	strb.w	r9, [r8, #216]	; 0xd8
  strcpy (obs[oidx].sensor[sidx].id, "wd");
 23ed19c:	4420      	add	r0, r4
 23ed19e:	f00f fec7 	bl	23fcf30 <strcpy>
  obs[oidx].sensor[sidx].type = I_OBS;
 23ed1a2:	f8c8 90e4 	str.w	r9, [r8, #228]	; 0xe4
  wd = Wind_DirectionVector();
 23ed1a6:	f7fd fb6b 	bl	23ea880 <_Z20Wind_DirectionVectorv>
  wd = (isnan(wd) || (wd < QC_MIN_WD) || (wd > QC_MAX_WD)) ? QC_ERR_WD : wd;
 23ed1aa:	2800      	cmp	r0, #0
 23ed1ac:	f2c0 80c3 	blt.w	23ed336 <_Z6OBS_Dov+0x456>
 23ed1b0:	4b48      	ldr	r3, [pc, #288]	; (23ed2d4 <_Z6OBS_Dov+0x3f4>)
 23ed1b2:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
 23ed1b6:	bfc8      	it	gt
 23ed1b8:	4618      	movgt	r0, r3
  obs[oidx].sensor[sidx].i_obs = wd;
 23ed1ba:	9b00      	ldr	r3, [sp, #0]
  return(wind.gust);
 23ed1bc:	f8df 913c 	ldr.w	r9, [pc, #316]	; 23ed2fc <_Z6OBS_Dov+0x41c>
 23ed1c0:	fb07 4703 	mla	r7, r7, r3, r4
  obs[oidx].sensor[sidx++].inuse = true;
 23ed1c4:	2301      	movs	r3, #1
  obs[oidx].sensor[sidx].i_obs = wd;
 23ed1c6:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
  strcpy (obs[oidx].sensor[sidx].id, "wg");
 23ed1ca:	f106 00f8 	add.w	r0, r6, #248	; 0xf8
  obs[oidx].sensor[sidx++].inuse = true;
 23ed1ce:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
  strcpy (obs[oidx].sensor[sidx].id, "wg");
 23ed1d2:	4941      	ldr	r1, [pc, #260]	; (23ed2d8 <_Z6OBS_Dov+0x3f8>)
 23ed1d4:	4420      	add	r0, r4
 23ed1d6:	f00f feab 	bl	23fcf30 <strcpy>
 23ed1da:	edd9 7a79 	vldr	s15, [r9, #484]	; 0x1e4
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23ed1de:	eef4 7a67 	vcmp.f32	s15, s15
  obs[oidx].sensor[sidx].type = F_OBS;
 23ed1e2:	2300      	movs	r3, #0
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23ed1e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  obs[oidx].sensor[sidx].type = F_OBS;
 23ed1e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23ed1ec:	f180 80a5 	bvs.w	23ed33a <_Z6OBS_Dov+0x45a>
 23ed1f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23ed1f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed1f8:	f100 809f 	bmi.w	23ed33a <_Z6OBS_Dov+0x45a>
 23ed1fc:	ed9f 7a33 	vldr	s14, [pc, #204]	; 23ed2cc <_Z6OBS_Dov+0x3ec>
 23ed200:	eef4 7a47 	vcmp.f32	s15, s14
 23ed204:	ed9f 7a28 	vldr	s14, [pc, #160]	; 23ed2a8 <_Z6OBS_Dov+0x3c8>
 23ed208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed20c:	fe77 7a27 	vselgt.f32	s15, s14, s15
  obs[oidx].sensor[sidx].f_obs = ws;
 23ed210:	f640 2798 	movw	r7, #2712	; 0xa98
  obs[oidx].sensor[sidx++].inuse = true;
 23ed214:	f04f 0a01 	mov.w	sl, #1
  obs[oidx].sensor[sidx].f_obs = ws;
 23ed218:	9b00      	ldr	r3, [sp, #0]
  strcpy (obs[oidx].sensor[sidx].id, "wgd");
 23ed21a:	f506 708a 	add.w	r0, r6, #276	; 0x114
  obs[oidx].sensor[sidx].f_obs = ws;
 23ed21e:	fb07 4803 	mla	r8, r7, r3, r4
  strcpy (obs[oidx].sensor[sidx].id, "wgd");
 23ed222:	492e      	ldr	r1, [pc, #184]	; (23ed2dc <_Z6OBS_Dov+0x3fc>)
  obs[oidx].sensor[sidx].f_obs = ws;
 23ed224:	edc8 7a41 	vstr	s15, [r8, #260]	; 0x104
  obs[oidx].sensor[sidx++].inuse = true;
 23ed228:	f888 a110 	strb.w	sl, [r8, #272]	; 0x110
  strcpy (obs[oidx].sensor[sidx].id, "wgd");
 23ed22c:	4420      	add	r0, r4
 23ed22e:	f00f fe7f 	bl	23fcf30 <strcpy>
  return(wind.gust_direction);
 23ed232:	f8d9 31e8 	ldr.w	r3, [r9, #488]	; 0x1e8
  obs[oidx].sensor[sidx].type = I_OBS;
 23ed236:	f8c8 a11c 	str.w	sl, [r8, #284]	; 0x11c
  wd = (isnan(wd) || (wd < QC_MIN_WD) || (wd > QC_MAX_WD)) ? QC_ERR_WD : wd;
 23ed23a:	2b00      	cmp	r3, #0
 23ed23c:	f2c0 8080 	blt.w	23ed340 <_Z6OBS_Dov+0x460>
 23ed240:	4a24      	ldr	r2, [pc, #144]	; (23ed2d4 <_Z6OBS_Dov+0x3f4>)
 23ed242:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 23ed246:	bfc8      	it	gt
 23ed248:	4613      	movgt	r3, r2
  obs[oidx].sensor[sidx].i_obs = wd;
 23ed24a:	9a00      	ldr	r2, [sp, #0]
 23ed24c:	fb07 4702 	mla	r7, r7, r2, r4
 23ed250:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  obs[oidx].sensor[sidx++].inuse = true;
 23ed254:	2301      	movs	r3, #1
 23ed256:	f887 312c 	strb.w	r3, [r7, #300]	; 0x12c
  if (BMX_1_exists) {
 23ed25a:	4b21      	ldr	r3, [pc, #132]	; (23ed2e0 <_Z6OBS_Dov+0x400>)
 23ed25c:	781b      	ldrb	r3, [r3, #0]
 23ed25e:	2b00      	cmp	r3, #0
 23ed260:	f000 8142 	beq.w	23ed4e8 <_Z6OBS_Dov+0x608>
    if (BMX_1_chip_id == BMP280_CHIP_ID) {
 23ed264:	4b1f      	ldr	r3, [pc, #124]	; (23ed2e4 <_Z6OBS_Dov+0x404>)
 23ed266:	f8df 9098 	ldr.w	r9, [pc, #152]	; 23ed300 <_Z6OBS_Dov+0x420>
 23ed26a:	781b      	ldrb	r3, [r3, #0]
 23ed26c:	2b58      	cmp	r3, #88	; 0x58
 23ed26e:	d169      	bne.n	23ed344 <_Z6OBS_Dov+0x464>
      p = bmp1.readPressure()/100.0F;       // bp1 hPa
 23ed270:	481d      	ldr	r0, [pc, #116]	; (23ed2e8 <_Z6OBS_Dov+0x408>)
 23ed272:	f004 fd03 	bl	23f1c7c <_ZN15Adafruit_BMP28012readPressureEv>
 23ed276:	eddf 7a1d 	vldr	s15, [pc, #116]	; 23ed2ec <_Z6OBS_Dov+0x40c>
 23ed27a:	e043      	b.n	23ed304 <_Z6OBS_Dov+0x424>
 23ed27c:	f3af 8000 	nop.w
 23ed280:	9999999a 	.word	0x9999999a
 23ed284:	3fc99999 	.word	0x3fc99999
 23ed288:	1007aeb8 	.word	0x1007aeb8
 23ed28c:	1007aa60 	.word	0x1007aa60
 23ed290:	1006f558 	.word	0x1006f558
 23ed294:	023fe4aa 	.word	0x023fe4aa
 23ed298:	023fe4ae 	.word	0x023fe4ae
 23ed29c:	023fe4b2 	.word	0x023fe4b2
 23ed2a0:	1007aa70 	.word	0x1007aa70
 23ed2a4:	403e0000 	.word	0x403e0000
 23ed2a8:	c479f99a 	.word	0xc479f99a
 23ed2ac:	1007aa68 	.word	0x1007aa68
 23ed2b0:	1006a2f4 	.word	0x1006a2f4
 23ed2b4:	1007aa88 	.word	0x1007aa88
 23ed2b8:	1007aa80 	.word	0x1007aa80
 23ed2bc:	023fe4b6 	.word	0x023fe4b6
 23ed2c0:	023fe4b9 	.word	0x023fe4b9
 23ed2c4:	023fe4bd 	.word	0x023fe4bd
 23ed2c8:	023fe4c1 	.word	0x023fe4c1
 23ed2cc:	42ce0000 	.word	0x42ce0000
 23ed2d0:	023fe4c4 	.word	0x023fe4c4
 23ed2d4:	fffffc19 	.word	0xfffffc19
 23ed2d8:	023fe4c7 	.word	0x023fe4c7
 23ed2dc:	023fe4ca 	.word	0x023fe4ca
 23ed2e0:	1006a31a 	.word	0x1006a31a
 23ed2e4:	1006a319 	.word	0x1006a319
 23ed2e8:	1006ac28 	.word	0x1006ac28
 23ed2ec:	42c80000 	.word	0x42c80000
 23ed2f0:	1007aa64 	.word	0x1007aa64
 23ed2f4:	1007aa78 	.word	0x1007aa78
 23ed2f8:	1006ae8c 	.word	0x1006ae8c
 23ed2fc:	1007ac78 	.word	0x1007ac78
 23ed300:	1006a31b 	.word	0x1006a31b
      t = bmp1.readTemperature();           // bt1
 23ed304:	487b      	ldr	r0, [pc, #492]	; (23ed4f4 <_Z6OBS_Dov+0x614>)
      p = bmp1.readPressure()/100.0F;       // bp1 hPa
 23ed306:	eec0 9a27 	vdiv.f32	s19, s0, s15
      t = bmp1.readTemperature();           // bt1
 23ed30a:	f004 fc77 	bl	23f1bfc <_ZN15Adafruit_BMP28015readTemperatureEv>
      t = bm31.readTemperature();           // bt1
 23ed30e:	eeb0 8a40 	vmov.f32	s16, s0
    float h = 0.0;
 23ed312:	eddf 8a79 	vldr	s17, [pc, #484]	; 23ed4f8 <_Z6OBS_Dov+0x618>
 23ed316:	e03e      	b.n	23ed396 <_Z6OBS_Dov+0x4b6>
  float BatteryPoC = 0.0; // Battery Percent of Charge
 23ed318:	ed9f 8a77 	vldr	s16, [pc, #476]	; 23ed4f8 <_Z6OBS_Dov+0x618>
 23ed31c:	e608      	b.n	23ecf30 <_Z6OBS_Dov+0x50>
  rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
 23ed31e:	ed9f 8a77 	vldr	s16, [pc, #476]	; 23ed4fc <_Z6OBS_Dov+0x61c>
 23ed322:	e67b      	b.n	23ed01c <_Z6OBS_Dov+0x13c>
    rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
 23ed324:	ed9f 9a75 	vldr	s18, [pc, #468]	; 23ed4fc <_Z6OBS_Dov+0x61c>
 23ed328:	e6c5      	b.n	23ed0b6 <_Z6OBS_Dov+0x1d6>
  float rain2 = 0.0;
 23ed32a:	ed9f 9a73 	vldr	s18, [pc, #460]	; 23ed4f8 <_Z6OBS_Dov+0x618>
 23ed32e:	e6ce      	b.n	23ed0ce <_Z6OBS_Dov+0x1ee>
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23ed330:	ed9f 0a72 	vldr	s0, [pc, #456]	; 23ed4fc <_Z6OBS_Dov+0x61c>
 23ed334:	e724      	b.n	23ed180 <_Z6OBS_Dov+0x2a0>
  wd = (isnan(wd) || (wd < QC_MIN_WD) || (wd > QC_MAX_WD)) ? QC_ERR_WD : wd;
 23ed336:	4872      	ldr	r0, [pc, #456]	; (23ed500 <_Z6OBS_Dov+0x620>)
 23ed338:	e73f      	b.n	23ed1ba <_Z6OBS_Dov+0x2da>
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23ed33a:	eddf 7a70 	vldr	s15, [pc, #448]	; 23ed4fc <_Z6OBS_Dov+0x61c>
 23ed33e:	e767      	b.n	23ed210 <_Z6OBS_Dov+0x330>
  wd = (isnan(wd) || (wd < QC_MIN_WD) || (wd > QC_MAX_WD)) ? QC_ERR_WD : wd;
 23ed340:	4b6f      	ldr	r3, [pc, #444]	; (23ed500 <_Z6OBS_Dov+0x620>)
 23ed342:	e782      	b.n	23ed24a <_Z6OBS_Dov+0x36a>
    else if (BMX_1_chip_id == BME280_BMP390_CHIP_ID) {
 23ed344:	2b60      	cmp	r3, #96	; 0x60
 23ed346:	f040 80bb 	bne.w	23ed4c0 <_Z6OBS_Dov+0x5e0>
      if (BMX_1_type == BMX_TYPE_BME280) {
 23ed34a:	f899 3000 	ldrb.w	r3, [r9]
 23ed34e:	2b02      	cmp	r3, #2
 23ed350:	f040 80af 	bne.w	23ed4b2 <_Z6OBS_Dov+0x5d2>
        p = bme1.readPressure()/100.0F;     // bp1 hPa
 23ed354:	486b      	ldr	r0, [pc, #428]	; (23ed504 <_Z6OBS_Dov+0x624>)
 23ed356:	f004 f849 	bl	23f13ec <_ZN15Adafruit_BME28012readPressureEv>
 23ed35a:	eddf 7a6b 	vldr	s15, [pc, #428]	; 23ed508 <_Z6OBS_Dov+0x628>
        t = bme1.readTemperature();         // bt1
 23ed35e:	4869      	ldr	r0, [pc, #420]	; (23ed504 <_Z6OBS_Dov+0x624>)
        p = bme1.readPressure()/100.0F;     // bp1 hPa
 23ed360:	eec0 9a27 	vdiv.f32	s19, s0, s15
        t = bme1.readTemperature();         // bt1
 23ed364:	f004 f810 	bl	23f1388 <_ZN15Adafruit_BME28015readTemperatureEv>
        h = bme1.readHumidity();            // bh1 
 23ed368:	4866      	ldr	r0, [pc, #408]	; (23ed504 <_Z6OBS_Dov+0x624>)
        t = bme1.readTemperature();         // bt1
 23ed36a:	eeb0 8a40 	vmov.f32	s16, s0
        h = bme1.readHumidity();            // bh1 
 23ed36e:	f004 f90d 	bl	23f158c <_ZN15Adafruit_BME28012readHumidityEv>
 23ed372:	eef0 8a40 	vmov.f32	s17, s0
      if (BMX_1_type == BMX_TYPE_BMP390) {
 23ed376:	f899 3000 	ldrb.w	r3, [r9]
 23ed37a:	2b04      	cmp	r3, #4
 23ed37c:	d10b      	bne.n	23ed396 <_Z6OBS_Dov+0x4b6>
        p = bm31.readPressure()/100.0F;     // bp1 hPa
 23ed37e:	4863      	ldr	r0, [pc, #396]	; (23ed50c <_Z6OBS_Dov+0x62c>)
 23ed380:	f004 fe87 	bl	23f2092 <_ZN15Adafruit_BMP3XX12readPressureEv>
 23ed384:	eddf 7a60 	vldr	s15, [pc, #384]	; 23ed508 <_Z6OBS_Dov+0x628>
        t = bm31.readTemperature();         // bt1 
 23ed388:	4860      	ldr	r0, [pc, #384]	; (23ed50c <_Z6OBS_Dov+0x62c>)
        p = bm31.readPressure()/100.0F;     // bp1 hPa
 23ed38a:	eec0 9a27 	vdiv.f32	s19, s0, s15
        t = bm31.readTemperature();         // bt1 
 23ed38e:	f004 fe75 	bl	23f207c <_ZN15Adafruit_BMP3XX15readTemperatureEv>
 23ed392:	eeb0 8a40 	vmov.f32	s16, s0
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23ed396:	eef4 9a69 	vcmp.f32	s19, s19
 23ed39a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed39e:	f180 809a 	bvs.w	23ed4d6 <_Z6OBS_Dov+0x5f6>
 23ed3a2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 23ed510 <_Z6OBS_Dov+0x630>
 23ed3a6:	eef4 9ae7 	vcmpe.f32	s19, s15
 23ed3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed3ae:	f100 8092 	bmi.w	23ed4d6 <_Z6OBS_Dov+0x5f6>
 23ed3b2:	eddf 7a58 	vldr	s15, [pc, #352]	; 23ed514 <_Z6OBS_Dov+0x634>
 23ed3b6:	eef4 9a67 	vcmp.f32	s19, s15
 23ed3ba:	eddf 7a50 	vldr	s15, [pc, #320]	; 23ed4fc <_Z6OBS_Dov+0x61c>
 23ed3be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed3c2:	fe77 9aa9 	vselgt.f32	s19, s15, s19
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed3c6:	eeb4 8a48 	vcmp.f32	s16, s16
 23ed3ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed3ce:	f180 8085 	bvs.w	23ed4dc <_Z6OBS_Dov+0x5fc>
 23ed3d2:	eddf 7a51 	vldr	s15, [pc, #324]	; 23ed518 <_Z6OBS_Dov+0x638>
 23ed3d6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23ed3da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed3de:	d47d      	bmi.n	23ed4dc <_Z6OBS_Dov+0x5fc>
 23ed3e0:	eddf 7a4e 	vldr	s15, [pc, #312]	; 23ed51c <_Z6OBS_Dov+0x63c>
 23ed3e4:	eeb4 8a67 	vcmp.f32	s16, s15
 23ed3e8:	eddf 7a44 	vldr	s15, [pc, #272]	; 23ed4fc <_Z6OBS_Dov+0x61c>
 23ed3ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed3f0:	fe37 8a88 	vselgt.f32	s16, s15, s16
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ed3f4:	eef4 8a68 	vcmp.f32	s17, s17
 23ed3f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed3fc:	d671      	bvs.n	23ed4e2 <_Z6OBS_Dov+0x602>
 23ed3fe:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 23ed402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed406:	d46c      	bmi.n	23ed4e2 <_Z6OBS_Dov+0x602>
 23ed408:	eddf 7a3f 	vldr	s15, [pc, #252]	; 23ed508 <_Z6OBS_Dov+0x628>
 23ed40c:	eef4 8a67 	vcmp.f32	s17, s15
 23ed410:	eddf 7a3a 	vldr	s15, [pc, #232]	; 23ed4fc <_Z6OBS_Dov+0x61c>
 23ed414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed418:	fe77 8aa8 	vselgt.f32	s17, s15, s17
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed41c:	f640 2798 	movw	r7, #2712	; 0xa98
 23ed420:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ed424:	f04f 0801 	mov.w	r8, #1
    strcpy (obs[oidx].sensor[sidx].id, "bp1");
 23ed428:	f506 7098 	add.w	r0, r6, #304	; 0x130
 23ed42c:	493c      	ldr	r1, [pc, #240]	; (23ed520 <_Z6OBS_Dov+0x640>)
 23ed42e:	4420      	add	r0, r4
 23ed430:	f00f fd7e 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed434:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "bt1");
 23ed436:	f506 70a6 	add.w	r0, r6, #332	; 0x14c
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed43a:	fb07 4703 	mla	r7, r7, r3, r4
    strcpy (obs[oidx].sensor[sidx].id, "bt1");
 23ed43e:	4939      	ldr	r1, [pc, #228]	; (23ed524 <_Z6OBS_Dov+0x644>)
    obs[oidx].sensor[sidx].f_obs = p;
 23ed440:	edc7 9a4f 	vstr	s19, [r7, #316]	; 0x13c
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed444:	f8c7 a138 	str.w	sl, [r7, #312]	; 0x138
    obs[oidx].sensor[sidx++].inuse = true;
 23ed448:	f887 8148 	strb.w	r8, [r7, #328]	; 0x148
    strcpy (obs[oidx].sensor[sidx].id, "bt1");
 23ed44c:	4420      	add	r0, r4
 23ed44e:	f00f fd6f 	bl	23fcf30 <strcpy>
    if (BMX_1_type == BMX_TYPE_BME280) {
 23ed452:	f899 3000 	ldrb.w	r3, [r9]
    obs[oidx].sensor[sidx].f_obs = t;
 23ed456:	ed87 8a56 	vstr	s16, [r7, #344]	; 0x158
    if (BMX_1_type == BMX_TYPE_BME280) {
 23ed45a:	2b02      	cmp	r3, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed45c:	f8c7 a154 	str.w	sl, [r7, #340]	; 0x154
    obs[oidx].sensor[sidx++].inuse = true;
 23ed460:	f887 8164 	strb.w	r8, [r7, #356]	; 0x164
    if (BMX_1_type == BMX_TYPE_BME280) {
 23ed464:	d143      	bne.n	23ed4ee <_Z6OBS_Dov+0x60e>
      strcpy (obs[oidx].sensor[sidx].id, "bh1");
 23ed466:	f506 70b4 	add.w	r0, r6, #360	; 0x168
 23ed46a:	492f      	ldr	r1, [pc, #188]	; (23ed528 <_Z6OBS_Dov+0x648>)
 23ed46c:	4420      	add	r0, r4
 23ed46e:	f00f fd5f 	bl	23fcf30 <strcpy>
      obs[oidx].sensor[sidx++].inuse = true;
 23ed472:	f887 8180 	strb.w	r8, [r7, #384]	; 0x180
      obs[oidx].sensor[sidx].f_obs = h;
 23ed476:	edc7 8a5d 	vstr	s17, [r7, #372]	; 0x174
      obs[oidx].sensor[sidx++].inuse = true;
 23ed47a:	f04f 080d 	mov.w	r8, #13
      obs[oidx].sensor[sidx].type = F_OBS;
 23ed47e:	f8c7 a170 	str.w	sl, [r7, #368]	; 0x170
  if (BMX_2_exists) {
 23ed482:	4b2a      	ldr	r3, [pc, #168]	; (23ed52c <_Z6OBS_Dov+0x64c>)
 23ed484:	781b      	ldrb	r3, [r3, #0]
 23ed486:	2b00      	cmp	r3, #0
 23ed488:	f000 8108 	beq.w	23ed69c <_Z6OBS_Dov+0x7bc>
    if (BMX_2_chip_id == BMP280_CHIP_ID) {
 23ed48c:	4b28      	ldr	r3, [pc, #160]	; (23ed530 <_Z6OBS_Dov+0x650>)
 23ed48e:	781b      	ldrb	r3, [r3, #0]
 23ed490:	2b58      	cmp	r3, #88	; 0x58
 23ed492:	d151      	bne.n	23ed538 <_Z6OBS_Dov+0x658>
      p = bmp2.readPressure()/100.0F;       // bp2 hPa
 23ed494:	4827      	ldr	r0, [pc, #156]	; (23ed534 <_Z6OBS_Dov+0x654>)
 23ed496:	f004 fbf1 	bl	23f1c7c <_ZN15Adafruit_BMP28012readPressureEv>
 23ed49a:	eddf 7a1b 	vldr	s15, [pc, #108]	; 23ed508 <_Z6OBS_Dov+0x628>
      t = bmp2.readTemperature();           // bt2
 23ed49e:	4825      	ldr	r0, [pc, #148]	; (23ed534 <_Z6OBS_Dov+0x654>)
      p = bmp2.readPressure()/100.0F;       // bp2 hPa
 23ed4a0:	eec0 9a27 	vdiv.f32	s19, s0, s15
      t = bmp2.readTemperature();           // bt2
 23ed4a4:	f004 fbaa 	bl	23f1bfc <_ZN15Adafruit_BMP28015readTemperatureEv>
      t = bm32.readTemperature();           // bt2
 23ed4a8:	eeb0 8a40 	vmov.f32	s16, s0
    float h = 0.0;
 23ed4ac:	eddf 8a12 	vldr	s17, [pc, #72]	; 23ed4f8 <_Z6OBS_Dov+0x618>
 23ed4b0:	e06a      	b.n	23ed588 <_Z6OBS_Dov+0x6a8>
    float h = 0.0;
 23ed4b2:	eddf 8a11 	vldr	s17, [pc, #68]	; 23ed4f8 <_Z6OBS_Dov+0x618>
    float t = 0.0;
 23ed4b6:	eeb0 8a68 	vmov.f32	s16, s17
    float p = 0.0;
 23ed4ba:	eef0 9a68 	vmov.f32	s19, s17
 23ed4be:	e75a      	b.n	23ed376 <_Z6OBS_Dov+0x496>
      p = bm31.readPressure()/100.0F;       // bp1 hPa
 23ed4c0:	4812      	ldr	r0, [pc, #72]	; (23ed50c <_Z6OBS_Dov+0x62c>)
 23ed4c2:	f004 fde6 	bl	23f2092 <_ZN15Adafruit_BMP3XX12readPressureEv>
 23ed4c6:	eddf 7a10 	vldr	s15, [pc, #64]	; 23ed508 <_Z6OBS_Dov+0x628>
      t = bm31.readTemperature();           // bt1
 23ed4ca:	4810      	ldr	r0, [pc, #64]	; (23ed50c <_Z6OBS_Dov+0x62c>)
      p = bm31.readPressure()/100.0F;       // bp1 hPa
 23ed4cc:	eec0 9a27 	vdiv.f32	s19, s0, s15
      t = bm31.readTemperature();           // bt1
 23ed4d0:	f004 fdd4 	bl	23f207c <_ZN15Adafruit_BMP3XX15readTemperatureEv>
 23ed4d4:	e71b      	b.n	23ed30e <_Z6OBS_Dov+0x42e>
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23ed4d6:	eddf 9a09 	vldr	s19, [pc, #36]	; 23ed4fc <_Z6OBS_Dov+0x61c>
 23ed4da:	e774      	b.n	23ed3c6 <_Z6OBS_Dov+0x4e6>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed4dc:	ed9f 8a07 	vldr	s16, [pc, #28]	; 23ed4fc <_Z6OBS_Dov+0x61c>
 23ed4e0:	e788      	b.n	23ed3f4 <_Z6OBS_Dov+0x514>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ed4e2:	eddf 8a06 	vldr	s17, [pc, #24]	; 23ed4fc <_Z6OBS_Dov+0x61c>
 23ed4e6:	e799      	b.n	23ed41c <_Z6OBS_Dov+0x53c>
  obs[oidx].sensor[sidx++].inuse = true;
 23ed4e8:	f04f 080a 	mov.w	r8, #10
 23ed4ec:	e7c9      	b.n	23ed482 <_Z6OBS_Dov+0x5a2>
    obs[oidx].sensor[sidx++].inuse = true;
 23ed4ee:	f04f 080c 	mov.w	r8, #12
 23ed4f2:	e7c6      	b.n	23ed482 <_Z6OBS_Dov+0x5a2>
 23ed4f4:	1006ac28 	.word	0x1006ac28
 23ed4f8:	00000000 	.word	0x00000000
 23ed4fc:	c479f99a 	.word	0xc479f99a
 23ed500:	fffffc19 	.word	0xfffffc19
 23ed504:	1006ab78 	.word	0x1006ab78
 23ed508:	42c80000 	.word	0x42c80000
 23ed50c:	1006a978 	.word	0x1006a978
 23ed510:	43960000 	.word	0x43960000
 23ed514:	44898000 	.word	0x44898000
 23ed518:	c2200000 	.word	0xc2200000
 23ed51c:	42700000 	.word	0x42700000
 23ed520:	023fe4ce 	.word	0x023fe4ce
 23ed524:	023fe4d2 	.word	0x023fe4d2
 23ed528:	023fe4d6 	.word	0x023fe4d6
 23ed52c:	1006a31d 	.word	0x1006a31d
 23ed530:	1006a31c 	.word	0x1006a31c
 23ed534:	1006ac68 	.word	0x1006ac68
    else if (BMX_2_chip_id == BME280_BMP390_CHIP_ID) {
 23ed538:	2b60      	cmp	r3, #96	; 0x60
 23ed53a:	f041 8306 	bne.w	23eeb4a <_Z6OBS_Dov+0x1c6a>
      if (BMX_2_type == BMX_TYPE_BME280) {
 23ed53e:	4edc      	ldr	r6, [pc, #880]	; (23ed8b0 <_Z6OBS_Dov+0x9d0>)
 23ed540:	7833      	ldrb	r3, [r6, #0]
 23ed542:	2b02      	cmp	r3, #2
 23ed544:	f041 82f9 	bne.w	23eeb3a <_Z6OBS_Dov+0x1c5a>
        p = bme2.readPressure()/100.0F;     // bp2 hPa
 23ed548:	48da      	ldr	r0, [pc, #872]	; (23ed8b4 <_Z6OBS_Dov+0x9d4>)
 23ed54a:	f003 ff4f 	bl	23f13ec <_ZN15Adafruit_BME28012readPressureEv>
 23ed54e:	eddf 7ada 	vldr	s15, [pc, #872]	; 23ed8b8 <_Z6OBS_Dov+0x9d8>
        t = bme2.readTemperature();         // bt2
 23ed552:	48d8      	ldr	r0, [pc, #864]	; (23ed8b4 <_Z6OBS_Dov+0x9d4>)
        p = bme2.readPressure()/100.0F;     // bp2 hPa
 23ed554:	eec0 9a27 	vdiv.f32	s19, s0, s15
        t = bme2.readTemperature();         // bt2
 23ed558:	f003 ff16 	bl	23f1388 <_ZN15Adafruit_BME28015readTemperatureEv>
        h = bme2.readHumidity();            // bh2 
 23ed55c:	48d5      	ldr	r0, [pc, #852]	; (23ed8b4 <_Z6OBS_Dov+0x9d4>)
        t = bme2.readTemperature();         // bt2
 23ed55e:	eeb0 8a40 	vmov.f32	s16, s0
        h = bme2.readHumidity();            // bh2 
 23ed562:	f004 f813 	bl	23f158c <_ZN15Adafruit_BME28012readHumidityEv>
 23ed566:	eef0 8a40 	vmov.f32	s17, s0
      if (BMX_2_type == BMX_TYPE_BMP390) {
 23ed56a:	7833      	ldrb	r3, [r6, #0]
 23ed56c:	2b04      	cmp	r3, #4
 23ed56e:	d10b      	bne.n	23ed588 <_Z6OBS_Dov+0x6a8>
        p = bm32.readPressure()/100.0F;     // bp2 hPa
 23ed570:	48d2      	ldr	r0, [pc, #840]	; (23ed8bc <_Z6OBS_Dov+0x9dc>)
 23ed572:	f004 fd8e 	bl	23f2092 <_ZN15Adafruit_BMP3XX12readPressureEv>
 23ed576:	eddf 7ad0 	vldr	s15, [pc, #832]	; 23ed8b8 <_Z6OBS_Dov+0x9d8>
        t = bm32.readTemperature();         // bt2       
 23ed57a:	48d0      	ldr	r0, [pc, #832]	; (23ed8bc <_Z6OBS_Dov+0x9dc>)
        p = bm32.readPressure()/100.0F;     // bp2 hPa
 23ed57c:	eec0 9a27 	vdiv.f32	s19, s0, s15
        t = bm32.readTemperature();         // bt2       
 23ed580:	f004 fd7c 	bl	23f207c <_ZN15Adafruit_BMP3XX15readTemperatureEv>
 23ed584:	eeb0 8a40 	vmov.f32	s16, s0
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23ed588:	eef4 9a69 	vcmp.f32	s19, s19
 23ed58c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed590:	f181 82e7 	bvs.w	23eeb62 <_Z6OBS_Dov+0x1c82>
 23ed594:	eddf 7aca 	vldr	s15, [pc, #808]	; 23ed8c0 <_Z6OBS_Dov+0x9e0>
 23ed598:	eef4 9ae7 	vcmpe.f32	s19, s15
 23ed59c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed5a0:	f101 82df 	bmi.w	23eeb62 <_Z6OBS_Dov+0x1c82>
 23ed5a4:	eddf 7ac7 	vldr	s15, [pc, #796]	; 23ed8c4 <_Z6OBS_Dov+0x9e4>
 23ed5a8:	eef4 9a67 	vcmp.f32	s19, s15
 23ed5ac:	eddf 7ad6 	vldr	s15, [pc, #856]	; 23ed908 <_Z6OBS_Dov+0xa28>
 23ed5b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed5b4:	fe77 9aa9 	vselgt.f32	s19, s15, s19
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed5b8:	eeb4 8a48 	vcmp.f32	s16, s16
 23ed5bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed5c0:	f181 82d3 	bvs.w	23eeb6a <_Z6OBS_Dov+0x1c8a>
 23ed5c4:	eddf 7ace 	vldr	s15, [pc, #824]	; 23ed900 <_Z6OBS_Dov+0xa20>
 23ed5c8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23ed5cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed5d0:	f101 82cb 	bmi.w	23eeb6a <_Z6OBS_Dov+0x1c8a>
 23ed5d4:	eddf 7acb 	vldr	s15, [pc, #812]	; 23ed904 <_Z6OBS_Dov+0xa24>
 23ed5d8:	eeb4 8a67 	vcmp.f32	s16, s15
 23ed5dc:	eddf 7aca 	vldr	s15, [pc, #808]	; 23ed908 <_Z6OBS_Dov+0xa28>
 23ed5e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed5e4:	fe37 8a88 	vselgt.f32	s16, s15, s16
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ed5e8:	eef4 8a68 	vcmp.f32	s17, s17
 23ed5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed5f0:	f181 82bf 	bvs.w	23eeb72 <_Z6OBS_Dov+0x1c92>
 23ed5f4:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 23ed5f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed5fc:	f101 82b9 	bmi.w	23eeb72 <_Z6OBS_Dov+0x1c92>
 23ed600:	eddf 7aad 	vldr	s15, [pc, #692]	; 23ed8b8 <_Z6OBS_Dov+0x9d8>
 23ed604:	eef4 8a67 	vcmp.f32	s17, s15
 23ed608:	eddf 7abf 	vldr	s15, [pc, #764]	; 23ed908 <_Z6OBS_Dov+0xa28>
 23ed60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed610:	fe77 8aa8 	vselgt.f32	s17, s15, s17
    strcpy (obs[oidx].sensor[sidx].id, "bp2");
 23ed614:	f04f 0b1c 	mov.w	fp, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed618:	f640 2698 	movw	r6, #2712	; 0xa98
 23ed61c:	fb0b f908 	mul.w	r9, fp, r8
    strcpy (obs[oidx].sensor[sidx].id, "bp2");
 23ed620:	eb05 0009 	add.w	r0, r5, r9
 23ed624:	49a8      	ldr	r1, [pc, #672]	; (23ed8c8 <_Z6OBS_Dov+0x9e8>)
 23ed626:	4420      	add	r0, r4
 23ed628:	f00f fc82 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed62c:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ed62e:	f04f 0a01 	mov.w	sl, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed632:	435e      	muls	r6, r3
 23ed634:	2300      	movs	r3, #0
 23ed636:	eb09 0206 	add.w	r2, r9, r6
    strcpy (obs[oidx].sensor[sidx].id, "bt2");
 23ed63a:	eb09 000b 	add.w	r0, r9, fp
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed63e:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "bt2");
 23ed640:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed642:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = p;
 23ed644:	edc2 9a09 	vstr	s19, [r2, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ed648:	f882 a030 	strb.w	sl, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "bt2");
 23ed64c:	499f      	ldr	r1, [pc, #636]	; (23ed8cc <_Z6OBS_Dov+0x9ec>)
 23ed64e:	4420      	add	r0, r4
 23ed650:	f00f fc6e 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed654:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ed656:	f108 0701 	add.w	r7, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed65a:	fb0b 6207 	mla	r2, fp, r7, r6
 23ed65e:	4422      	add	r2, r4
    obs[oidx].sensor[sidx].f_obs = t;
 23ed660:	ed82 8a09 	vstr	s16, [r2, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed664:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ed666:	f882 a030 	strb.w	sl, [r2, #48]	; 0x30
    if (BMX_2_type == BMX_TYPE_BME280) {
 23ed66a:	4a91      	ldr	r2, [pc, #580]	; (23ed8b0 <_Z6OBS_Dov+0x9d0>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ed66c:	f108 0702 	add.w	r7, r8, #2
    if (BMX_2_type == BMX_TYPE_BME280) {
 23ed670:	7812      	ldrb	r2, [r2, #0]
 23ed672:	2a02      	cmp	r2, #2
 23ed674:	f041 8281 	bne.w	23eeb7a <_Z6OBS_Dov+0x1c9a>
      obs[oidx].sensor[sidx].type = F_OBS;
 23ed678:	fb0b 6607 	mla	r6, fp, r7, r6
      strcpy (obs[oidx].sensor[sidx].id, "bh2");
 23ed67c:	f109 0038 	add.w	r0, r9, #56	; 0x38
 23ed680:	4428      	add	r0, r5
 23ed682:	4993      	ldr	r1, [pc, #588]	; (23ed8d0 <_Z6OBS_Dov+0x9f0>)
 23ed684:	4420      	add	r0, r4
 23ed686:	f00f fc53 	bl	23fcf30 <strcpy>
      obs[oidx].sensor[sidx].type = F_OBS;
 23ed68a:	4426      	add	r6, r4
 23ed68c:	2300      	movs	r3, #0
      obs[oidx].sensor[sidx].f_obs = h;
 23ed68e:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
      obs[oidx].sensor[sidx].type = F_OBS;
 23ed692:	6233      	str	r3, [r6, #32]
      obs[oidx].sensor[sidx++].inuse = true;
 23ed694:	f108 0803 	add.w	r8, r8, #3
 23ed698:	f886 a030 	strb.w	sl, [r6, #48]	; 0x30
  if (HTU21DF_exists) {
 23ed69c:	4b8d      	ldr	r3, [pc, #564]	; (23ed8d4 <_Z6OBS_Dov+0x9f4>)
 23ed69e:	781b      	ldrb	r3, [r3, #0]
 23ed6a0:	2b00      	cmp	r3, #0
 23ed6a2:	d070      	beq.n	23ed786 <_Z6OBS_Dov+0x8a6>
    strcpy (obs[oidx].sensor[sidx].id, "hh1");
 23ed6a4:	261c      	movs	r6, #28
 23ed6a6:	fb06 f608 	mul.w	r6, r6, r8
 23ed6aa:	19a8      	adds	r0, r5, r6
 23ed6ac:	498a      	ldr	r1, [pc, #552]	; (23ed8d8 <_Z6OBS_Dov+0x9f8>)
 23ed6ae:	4420      	add	r0, r4
 23ed6b0:	f00f fc3e 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed6b4:	f640 2398 	movw	r3, #2712	; 0xa98
 23ed6b8:	9a00      	ldr	r2, [sp, #0]
    h = htu.readHumidity();
 23ed6ba:	4888      	ldr	r0, [pc, #544]	; (23ed8dc <_Z6OBS_Dov+0x9fc>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed6bc:	fb03 6302 	mla	r3, r3, r2, r6
 23ed6c0:	2200      	movs	r2, #0
 23ed6c2:	4423      	add	r3, r4
 23ed6c4:	621a      	str	r2, [r3, #32]
    h = htu.readHumidity();
 23ed6c6:	f005 fd2d 	bl	23f3124 <_ZN16Adafruit_HTU21DF12readHumidityEv>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ed6ca:	eeb4 0a40 	vcmp.f32	s0, s0
 23ed6ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed6d2:	f181 8255 	bvs.w	23eeb80 <_Z6OBS_Dov+0x1ca0>
 23ed6d6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23ed6da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed6de:	f101 824f 	bmi.w	23eeb80 <_Z6OBS_Dov+0x1ca0>
 23ed6e2:	eddf 7a75 	vldr	s15, [pc, #468]	; 23ed8b8 <_Z6OBS_Dov+0x9d8>
 23ed6e6:	eeb4 0a67 	vcmp.f32	s0, s15
 23ed6ea:	eddf 7a87 	vldr	s15, [pc, #540]	; 23ed908 <_Z6OBS_Dov+0xa28>
 23ed6ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed6f2:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = h;
 23ed6f6:	f640 2998 	movw	r9, #2712	; 0xa98
 23ed6fa:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx++].inuse = true;
 23ed6fe:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = h;
 23ed700:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "ht1");
 23ed702:	eb06 000a 	add.w	r0, r6, sl
    obs[oidx].sensor[sidx].f_obs = h;
 23ed706:	fb09 f903 	mul.w	r9, r9, r3
 23ed70a:	fb0a 9308 	mla	r3, sl, r8, r9
    strcpy (obs[oidx].sensor[sidx].id, "ht1");
 23ed70e:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = h;
 23ed710:	4423      	add	r3, r4
 23ed712:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ed716:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "ht1");
 23ed71a:	4971      	ldr	r1, [pc, #452]	; (23ed8e0 <_Z6OBS_Dov+0xa00>)
 23ed71c:	4420      	add	r0, r4
 23ed71e:	f00f fc07 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed722:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ed724:	f108 0701 	add.w	r7, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed728:	fb0a 9907 	mla	r9, sl, r7, r9
 23ed72c:	44a1      	add	r9, r4
    t = htu.readTemperature();
 23ed72e:	486b      	ldr	r0, [pc, #428]	; (23ed8dc <_Z6OBS_Dov+0x9fc>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed730:	f8c9 3020 	str.w	r3, [r9, #32]
    t = htu.readTemperature();
 23ed734:	f005 fcb6 	bl	23f30a4 <_ZN16Adafruit_HTU21DF15readTemperatureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed738:	eeb4 0a40 	vcmp.f32	s0, s0
 23ed73c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed740:	f181 8222 	bvs.w	23eeb88 <_Z6OBS_Dov+0x1ca8>
 23ed744:	eddf 7a6e 	vldr	s15, [pc, #440]	; 23ed900 <_Z6OBS_Dov+0xa20>
 23ed748:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ed74c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed750:	f101 821a 	bmi.w	23eeb88 <_Z6OBS_Dov+0x1ca8>
 23ed754:	eddf 7a6b 	vldr	s15, [pc, #428]	; 23ed904 <_Z6OBS_Dov+0xa24>
 23ed758:	eeb4 0a67 	vcmp.f32	s0, s15
 23ed75c:	eddf 7a6a 	vldr	s15, [pc, #424]	; 23ed908 <_Z6OBS_Dov+0xa28>
 23ed760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed764:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23ed768:	f640 2398 	movw	r3, #2712	; 0xa98
 23ed76c:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ed76e:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].f_obs = t;
 23ed772:	4353      	muls	r3, r2
 23ed774:	221c      	movs	r2, #28
 23ed776:	fb02 3307 	mla	r3, r2, r7, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23ed77a:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23ed77c:	4423      	add	r3, r4
 23ed77e:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ed782:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  if (SHT_1_exists) {
 23ed786:	4b57      	ldr	r3, [pc, #348]	; (23ed8e4 <_Z6OBS_Dov+0xa04>)
 23ed788:	781b      	ldrb	r3, [r3, #0]
 23ed78a:	2b00      	cmp	r3, #0
 23ed78c:	f001 8208 	beq.w	23eeba0 <_Z6OBS_Dov+0x1cc0>
    strcpy (obs[oidx].sensor[sidx].id, "st1");
 23ed790:	261c      	movs	r6, #28
 23ed792:	fb06 f608 	mul.w	r6, r6, r8
 23ed796:	19a8      	adds	r0, r5, r6
 23ed798:	4953      	ldr	r1, [pc, #332]	; (23ed8e8 <_Z6OBS_Dov+0xa08>)
 23ed79a:	4420      	add	r0, r4
 23ed79c:	f00f fbc8 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed7a0:	f640 2398 	movw	r3, #2712	; 0xa98
 23ed7a4:	9a00      	ldr	r2, [sp, #0]
    t = sht1.readTemperature();
 23ed7a6:	4851      	ldr	r0, [pc, #324]	; (23ed8ec <_Z6OBS_Dov+0xa0c>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed7a8:	fb03 6302 	mla	r3, r3, r2, r6
 23ed7ac:	2200      	movs	r2, #0
 23ed7ae:	4423      	add	r3, r4
 23ed7b0:	621a      	str	r2, [r3, #32]
    t = sht1.readTemperature();
 23ed7b2:	f006 f82b 	bl	23f380c <_ZN14Adafruit_SHT3115readTemperatureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed7b6:	eeb4 0a40 	vcmp.f32	s0, s0
 23ed7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed7be:	f181 81e7 	bvs.w	23eeb90 <_Z6OBS_Dov+0x1cb0>
 23ed7c2:	eddf 7a4f 	vldr	s15, [pc, #316]	; 23ed900 <_Z6OBS_Dov+0xa20>
 23ed7c6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ed7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed7ce:	f101 81df 	bmi.w	23eeb90 <_Z6OBS_Dov+0x1cb0>
 23ed7d2:	eddf 7a4c 	vldr	s15, [pc, #304]	; 23ed904 <_Z6OBS_Dov+0xa24>
 23ed7d6:	eeb4 0a67 	vcmp.f32	s0, s15
 23ed7da:	eddf 7a4b 	vldr	s15, [pc, #300]	; 23ed908 <_Z6OBS_Dov+0xa28>
 23ed7de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed7e2:	fe37 8a80 	vselgt.f32	s16, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23ed7e6:	f640 2998 	movw	r9, #2712	; 0xa98
 23ed7ea:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx++].inuse = true;
 23ed7ee:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23ed7f0:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "sh1");
 23ed7f2:	eb06 000a 	add.w	r0, r6, sl
    obs[oidx].sensor[sidx].f_obs = t;
 23ed7f6:	fb09 f903 	mul.w	r9, r9, r3
 23ed7fa:	fb0a 9308 	mla	r3, sl, r8, r9
    strcpy (obs[oidx].sensor[sidx].id, "sh1");
 23ed7fe:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = t;
 23ed800:	4423      	add	r3, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ed802:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    obs[oidx].sensor[sidx].f_obs = t;
 23ed806:	ed83 8a09 	vstr	s16, [r3, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "sh1");
 23ed80a:	4939      	ldr	r1, [pc, #228]	; (23ed8f0 <_Z6OBS_Dov+0xa10>)
 23ed80c:	4420      	add	r0, r4
 23ed80e:	f00f fb8f 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed812:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ed814:	f108 0701 	add.w	r7, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed818:	fb0a 9907 	mla	r9, sl, r7, r9
 23ed81c:	44a1      	add	r9, r4
    h = sht1.readHumidity();
 23ed81e:	4833      	ldr	r0, [pc, #204]	; (23ed8ec <_Z6OBS_Dov+0xa0c>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed820:	f8c9 3020 	str.w	r3, [r9, #32]
    h = sht1.readHumidity();
 23ed824:	f006 f800 	bl	23f3828 <_ZN14Adafruit_SHT3112readHumidityEv>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ed828:	eeb4 0a40 	vcmp.f32	s0, s0
 23ed82c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed830:	f181 81b2 	bvs.w	23eeb98 <_Z6OBS_Dov+0x1cb8>
 23ed834:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23ed838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed83c:	f101 81ac 	bmi.w	23eeb98 <_Z6OBS_Dov+0x1cb8>
 23ed840:	eddf 7a1d 	vldr	s15, [pc, #116]	; 23ed8b8 <_Z6OBS_Dov+0x9d8>
 23ed844:	eeb4 0a67 	vcmp.f32	s0, s15
 23ed848:	eddf 7a2f 	vldr	s15, [pc, #188]	; 23ed908 <_Z6OBS_Dov+0xa28>
 23ed84c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed850:	fe77 9a80 	vselgt.f32	s19, s15, s0
    obs[oidx].sensor[sidx].f_obs = h;
 23ed854:	f640 2398 	movw	r3, #2712	; 0xa98
 23ed858:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ed85a:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].f_obs = h;
 23ed85e:	4353      	muls	r3, r2
 23ed860:	221c      	movs	r2, #28
 23ed862:	fb02 3307 	mla	r3, r2, r7, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23ed866:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = h;
 23ed868:	4423      	add	r3, r4
 23ed86a:	edc3 9a09 	vstr	s19, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ed86e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  if (SHT_2_exists) {
 23ed872:	4b20      	ldr	r3, [pc, #128]	; (23ed8f4 <_Z6OBS_Dov+0xa14>)
 23ed874:	781b      	ldrb	r3, [r3, #0]
 23ed876:	2b00      	cmp	r3, #0
 23ed878:	f000 80a0 	beq.w	23ed9bc <_Z6OBS_Dov+0xadc>
    strcpy (obs[oidx].sensor[sidx].id, "st2");
 23ed87c:	261c      	movs	r6, #28
 23ed87e:	fb06 f608 	mul.w	r6, r6, r8
 23ed882:	19a8      	adds	r0, r5, r6
 23ed884:	491c      	ldr	r1, [pc, #112]	; (23ed8f8 <_Z6OBS_Dov+0xa18>)
 23ed886:	4420      	add	r0, r4
 23ed888:	f00f fb52 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed88c:	f640 2398 	movw	r3, #2712	; 0xa98
 23ed890:	9a00      	ldr	r2, [sp, #0]
    t = sht2.readTemperature();
 23ed892:	481a      	ldr	r0, [pc, #104]	; (23ed8fc <_Z6OBS_Dov+0xa1c>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed894:	fb03 6302 	mla	r3, r3, r2, r6
 23ed898:	2200      	movs	r2, #0
 23ed89a:	4423      	add	r3, r4
 23ed89c:	621a      	str	r2, [r3, #32]
    t = sht2.readTemperature();
 23ed89e:	f005 ffb5 	bl	23f380c <_ZN14Adafruit_SHT3115readTemperatureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed8a2:	eeb4 0a40 	vcmp.f32	s0, s0
 23ed8a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed8aa:	f181 817f 	bvs.w	23eebac <_Z6OBS_Dov+0x1ccc>
 23ed8ae:	e02d      	b.n	23ed90c <_Z6OBS_Dov+0xa2c>
 23ed8b0:	1006a31e 	.word	0x1006a31e
 23ed8b4:	1006abd0 	.word	0x1006abd0
 23ed8b8:	42c80000 	.word	0x42c80000
 23ed8bc:	1006aa78 	.word	0x1006aa78
 23ed8c0:	43960000 	.word	0x43960000
 23ed8c4:	44898000 	.word	0x44898000
 23ed8c8:	023fe4da 	.word	0x023fe4da
 23ed8cc:	023fe4de 	.word	0x023fe4de
 23ed8d0:	023fe4e2 	.word	0x023fe4e2
 23ed8d4:	1006a348 	.word	0x1006a348
 23ed8d8:	023fe4e6 	.word	0x023fe4e6
 23ed8dc:	1006aec0 	.word	0x1006aec0
 23ed8e0:	023fe4ea 	.word	0x023fe4ea
 23ed8e4:	1006a824 	.word	0x1006a824
 23ed8e8:	023fe4ee 	.word	0x023fe4ee
 23ed8ec:	1007abc0 	.word	0x1007abc0
 23ed8f0:	023fe4f2 	.word	0x023fe4f2
 23ed8f4:	1006a825 	.word	0x1006a825
 23ed8f8:	023fe4f6 	.word	0x023fe4f6
 23ed8fc:	1007abd0 	.word	0x1007abd0
 23ed900:	c2200000 	.word	0xc2200000
 23ed904:	42700000 	.word	0x42700000
 23ed908:	c479f99a 	.word	0xc479f99a
 23ed90c:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 23ed900 <_Z6OBS_Dov+0xa20>
 23ed910:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ed914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed918:	f101 8148 	bmi.w	23eebac <_Z6OBS_Dov+0x1ccc>
 23ed91c:	ed5f 7a07 	vldr	s15, [pc, #-28]	; 23ed904 <_Z6OBS_Dov+0xa24>
 23ed920:	eeb4 0a67 	vcmp.f32	s0, s15
 23ed924:	ed5f 7a08 	vldr	s15, [pc, #-32]	; 23ed908 <_Z6OBS_Dov+0xa28>
 23ed928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed92c:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23ed930:	f640 2998 	movw	r9, #2712	; 0xa98
 23ed934:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx++].inuse = true;
 23ed938:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23ed93a:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "sh2");
 23ed93c:	eb06 000a 	add.w	r0, r6, sl
    obs[oidx].sensor[sidx].f_obs = t;
 23ed940:	fb09 f903 	mul.w	r9, r9, r3
 23ed944:	fb0a 9308 	mla	r3, sl, r8, r9
    strcpy (obs[oidx].sensor[sidx].id, "sh2");
 23ed948:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = t;
 23ed94a:	4423      	add	r3, r4
 23ed94c:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ed950:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "sh2");
 23ed954:	49ce      	ldr	r1, [pc, #824]	; (23edc90 <_Z6OBS_Dov+0xdb0>)
 23ed956:	4420      	add	r0, r4
 23ed958:	f00f faea 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed95c:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ed95e:	f108 0701 	add.w	r7, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed962:	fb0a 9907 	mla	r9, sl, r7, r9
 23ed966:	44a1      	add	r9, r4
    h = sht2.readHumidity();
 23ed968:	48ca      	ldr	r0, [pc, #808]	; (23edc94 <_Z6OBS_Dov+0xdb4>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ed96a:	f8c9 3020 	str.w	r3, [r9, #32]
    h = sht2.readHumidity();
 23ed96e:	f005 ff5b 	bl	23f3828 <_ZN14Adafruit_SHT3112readHumidityEv>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ed972:	eeb4 0a40 	vcmp.f32	s0, s0
 23ed976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed97a:	f181 811b 	bvs.w	23eebb4 <_Z6OBS_Dov+0x1cd4>
 23ed97e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23ed982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed986:	f101 8115 	bmi.w	23eebb4 <_Z6OBS_Dov+0x1cd4>
 23ed98a:	eddf 7ac3 	vldr	s15, [pc, #780]	; 23edc98 <_Z6OBS_Dov+0xdb8>
 23ed98e:	eeb4 0a67 	vcmp.f32	s0, s15
 23ed992:	eddf 7ac2 	vldr	s15, [pc, #776]	; 23edc9c <_Z6OBS_Dov+0xdbc>
 23ed996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed99a:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = h;
 23ed99e:	f640 2398 	movw	r3, #2712	; 0xa98
 23ed9a2:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ed9a4:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].f_obs = h;
 23ed9a8:	4353      	muls	r3, r2
 23ed9aa:	221c      	movs	r2, #28
 23ed9ac:	fb02 3307 	mla	r3, r2, r7, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23ed9b0:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = h;
 23ed9b2:	4423      	add	r3, r4
 23ed9b4:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ed9b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  if (HDC_1_exists) {
 23ed9bc:	4bb8      	ldr	r3, [pc, #736]	; (23edca0 <_Z6OBS_Dov+0xdc0>)
 23ed9be:	f8df b324 	ldr.w	fp, [pc, #804]	; 23edce4 <_Z6OBS_Dov+0xe04>
 23ed9c2:	781b      	ldrb	r3, [r3, #0]
 23ed9c4:	2b00      	cmp	r3, #0
 23ed9c6:	f000 808d 	beq.w	23edae4 <_Z6OBS_Dov+0xc04>
    double t = -999.9;
 23ed9ca:	f20f 2abc 	addw	sl, pc, #700	; 0x2bc
 23ed9ce:	e9da 9a00 	ldrd	r9, sl, [sl]
    if (hdc1.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0)) {
 23ed9d2:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 23ed9d6:	48b3      	ldr	r0, [pc, #716]	; (23edca4 <_Z6OBS_Dov+0xdc4>)
 23ed9d8:	aa0c      	add	r2, sp, #48	; 0x30
 23ed9da:	a902      	add	r1, sp, #8
    double t = -999.9;
 23ed9dc:	e9cd 9a02 	strd	r9, sl, [sp, #8]
    double h = -999.9;
 23ed9e0:	e9cd 9a0c 	strd	r9, sl, [sp, #48]	; 0x30
    if (hdc1.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0)) {
 23ed9e4:	f005 faac 	bl	23f2f40 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>
 23ed9e8:	2800      	cmp	r0, #0
 23ed9ea:	f001 8123 	beq.w	23eec34 <_Z6OBS_Dov+0x1d54>
      t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ed9ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 23ed9f2:	4632      	mov	r2, r6
 23ed9f4:	463b      	mov	r3, r7
 23ed9f6:	4630      	mov	r0, r6
 23ed9f8:	4639      	mov	r1, r7
 23ed9fa:	f7f9 fb6f 	bl	23e70dc <__aeabi_dcmpun>
 23ed9fe:	2800      	cmp	r0, #0
 23eda00:	f041 80dc 	bne.w	23eebbc <_Z6OBS_Dov+0x1cdc>
 23eda04:	2200      	movs	r2, #0
 23eda06:	4630      	mov	r0, r6
 23eda08:	4639      	mov	r1, r7
 23eda0a:	4ba7      	ldr	r3, [pc, #668]	; (23edca8 <_Z6OBS_Dov+0xdc8>)
 23eda0c:	f7f9 fb3e 	bl	23e708c <__aeabi_dcmplt>
 23eda10:	2800      	cmp	r0, #0
 23eda12:	f041 80d3 	bne.w	23eebbc <_Z6OBS_Dov+0x1cdc>
 23eda16:	2200      	movs	r2, #0
 23eda18:	4630      	mov	r0, r6
 23eda1a:	4639      	mov	r1, r7
 23eda1c:	4ba3      	ldr	r3, [pc, #652]	; (23edcac <_Z6OBS_Dov+0xdcc>)
 23eda1e:	f7f9 fb53 	bl	23e70c8 <__aeabi_dcmpgt>
 23eda22:	2800      	cmp	r0, #0
 23eda24:	f041 80ca 	bne.w	23eebbc <_Z6OBS_Dov+0x1cdc>
 23eda28:	e9cd 6702 	strd	r6, r7, [sp, #8]
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23eda2c:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 23eda30:	4632      	mov	r2, r6
 23eda32:	463b      	mov	r3, r7
 23eda34:	4630      	mov	r0, r6
 23eda36:	4639      	mov	r1, r7
 23eda38:	f7f9 fb50 	bl	23e70dc <__aeabi_dcmpun>
 23eda3c:	2800      	cmp	r0, #0
 23eda3e:	f041 80c1 	bne.w	23eebc4 <_Z6OBS_Dov+0x1ce4>
 23eda42:	2200      	movs	r2, #0
 23eda44:	2300      	movs	r3, #0
 23eda46:	4630      	mov	r0, r6
 23eda48:	4639      	mov	r1, r7
 23eda4a:	f7f9 fb1f 	bl	23e708c <__aeabi_dcmplt>
 23eda4e:	2800      	cmp	r0, #0
 23eda50:	f041 80b8 	bne.w	23eebc4 <_Z6OBS_Dov+0x1ce4>
 23eda54:	2200      	movs	r2, #0
 23eda56:	4630      	mov	r0, r6
 23eda58:	4639      	mov	r1, r7
 23eda5a:	4b95      	ldr	r3, [pc, #596]	; (23edcb0 <_Z6OBS_Dov+0xdd0>)
 23eda5c:	f7f9 fb34 	bl	23e70c8 <__aeabi_dcmpgt>
 23eda60:	2800      	cmp	r0, #0
 23eda62:	f041 80af 	bne.w	23eebc4 <_Z6OBS_Dov+0x1ce4>
      SystemStatusBits &= ~ SSB_HDC_1;  // Turn Off Bit
 23eda66:	f8db 3000 	ldr.w	r3, [fp]
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23eda6a:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
      SystemStatusBits &= ~ SSB_HDC_1;  // Turn Off Bit
 23eda6e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
      SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
 23eda72:	f8cb 3000 	str.w	r3, [fp]
    strcpy (obs[oidx].sensor[sidx].id, "hdt1");
 23eda76:	231c      	movs	r3, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23eda78:	f640 2698 	movw	r6, #2712	; 0xa98
 23eda7c:	fb03 f708 	mul.w	r7, r3, r8
    strcpy (obs[oidx].sensor[sidx].id, "hdt1");
 23eda80:	19e8      	adds	r0, r5, r7
 23eda82:	498c      	ldr	r1, [pc, #560]	; (23edcb4 <_Z6OBS_Dov+0xdd4>)
 23eda84:	4420      	add	r0, r4
 23eda86:	f00f fa53 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23eda8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    obs[oidx].sensor[sidx].type = F_OBS;
 23eda8e:	2200      	movs	r2, #0
 23eda90:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23eda92:	f04f 0a01 	mov.w	sl, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23eda96:	435e      	muls	r6, r3
 23eda98:	eb07 0906 	add.w	r9, r7, r6
 23eda9c:	44a1      	add	r9, r4
 23eda9e:	f8c9 2020 	str.w	r2, [r9, #32]
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23edaa2:	f7f9 fb79 	bl	23e7198 <__aeabi_d2f>
 23edaa6:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "hdh1");
 23edaaa:	f107 001c 	add.w	r0, r7, #28
 23edaae:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23edab0:	f108 0301 	add.w	r3, r8, #1
    strcpy (obs[oidx].sensor[sidx].id, "hdh1");
 23edab4:	4980      	ldr	r1, [pc, #512]	; (23edcb8 <_Z6OBS_Dov+0xdd8>)
    obs[oidx].sensor[sidx++].inuse = true;
 23edab6:	f889 a030 	strb.w	sl, [r9, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "hdh1");
 23edaba:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23edabc:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "hdh1");
 23edabe:	f00f fa37 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23edac2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    obs[oidx].sensor[sidx].type = F_OBS;
 23edac6:	9b01      	ldr	r3, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23edac8:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23edacc:	461a      	mov	r2, r3
 23edace:	231c      	movs	r3, #28
 23edad0:	fb03 6602 	mla	r6, r3, r2, r6
 23edad4:	2200      	movs	r2, #0
 23edad6:	4426      	add	r6, r4
 23edad8:	6232      	str	r2, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23edada:	f7f9 fb5d 	bl	23e7198 <__aeabi_d2f>
    obs[oidx].sensor[sidx++].inuse = true;
 23edade:	f886 a030 	strb.w	sl, [r6, #48]	; 0x30
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23edae2:	6270      	str	r0, [r6, #36]	; 0x24
  if (HDC_2_exists) {
 23edae4:	4b75      	ldr	r3, [pc, #468]	; (23edcbc <_Z6OBS_Dov+0xddc>)
 23edae6:	781b      	ldrb	r3, [r3, #0]
 23edae8:	2b00      	cmp	r3, #0
 23edaea:	f000 808d 	beq.w	23edc08 <_Z6OBS_Dov+0xd28>
    double t = -999.9;
 23edaee:	f20f 1a98 	addw	sl, pc, #408	; 0x198
 23edaf2:	e9da 9a00 	ldrd	r9, sl, [sl]
    if (hdc2.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0)) {
 23edaf6:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 23edafa:	4871      	ldr	r0, [pc, #452]	; (23edcc0 <_Z6OBS_Dov+0xde0>)
 23edafc:	aa0c      	add	r2, sp, #48	; 0x30
 23edafe:	a902      	add	r1, sp, #8
    double t = -999.9;
 23edb00:	e9cd 9a02 	strd	r9, sl, [sp, #8]
    double h = -999.9;
 23edb04:	e9cd 9a0c 	strd	r9, sl, [sp, #48]	; 0x30
    if (hdc2.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0)) {
 23edb08:	f005 fa1a 	bl	23f2f40 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>
 23edb0c:	2800      	cmp	r0, #0
 23edb0e:	f001 80a3 	beq.w	23eec58 <_Z6OBS_Dov+0x1d78>
      t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23edb12:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 23edb16:	4632      	mov	r2, r6
 23edb18:	463b      	mov	r3, r7
 23edb1a:	4630      	mov	r0, r6
 23edb1c:	4639      	mov	r1, r7
 23edb1e:	f7f9 fadd 	bl	23e70dc <__aeabi_dcmpun>
 23edb22:	2800      	cmp	r0, #0
 23edb24:	f041 808f 	bne.w	23eec46 <_Z6OBS_Dov+0x1d66>
 23edb28:	2200      	movs	r2, #0
 23edb2a:	4630      	mov	r0, r6
 23edb2c:	4639      	mov	r1, r7
 23edb2e:	4b5e      	ldr	r3, [pc, #376]	; (23edca8 <_Z6OBS_Dov+0xdc8>)
 23edb30:	f7f9 faac 	bl	23e708c <__aeabi_dcmplt>
 23edb34:	2800      	cmp	r0, #0
 23edb36:	f041 8086 	bne.w	23eec46 <_Z6OBS_Dov+0x1d66>
 23edb3a:	2200      	movs	r2, #0
 23edb3c:	4630      	mov	r0, r6
 23edb3e:	4639      	mov	r1, r7
 23edb40:	4b5a      	ldr	r3, [pc, #360]	; (23edcac <_Z6OBS_Dov+0xdcc>)
 23edb42:	f7f9 fac1 	bl	23e70c8 <__aeabi_dcmpgt>
 23edb46:	2800      	cmp	r0, #0
 23edb48:	f041 807d 	bne.w	23eec46 <_Z6OBS_Dov+0x1d66>
 23edb4c:	e9cd 6702 	strd	r6, r7, [sp, #8]
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23edb50:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 23edb54:	4632      	mov	r2, r6
 23edb56:	463b      	mov	r3, r7
 23edb58:	4630      	mov	r0, r6
 23edb5a:	4639      	mov	r1, r7
 23edb5c:	f7f9 fabe 	bl	23e70dc <__aeabi_dcmpun>
 23edb60:	2800      	cmp	r0, #0
 23edb62:	f041 8074 	bne.w	23eec4e <_Z6OBS_Dov+0x1d6e>
 23edb66:	2200      	movs	r2, #0
 23edb68:	2300      	movs	r3, #0
 23edb6a:	4630      	mov	r0, r6
 23edb6c:	4639      	mov	r1, r7
 23edb6e:	f7f9 fa8d 	bl	23e708c <__aeabi_dcmplt>
 23edb72:	2800      	cmp	r0, #0
 23edb74:	f041 806b 	bne.w	23eec4e <_Z6OBS_Dov+0x1d6e>
 23edb78:	2200      	movs	r2, #0
 23edb7a:	4630      	mov	r0, r6
 23edb7c:	4639      	mov	r1, r7
 23edb7e:	4b4c      	ldr	r3, [pc, #304]	; (23edcb0 <_Z6OBS_Dov+0xdd0>)
 23edb80:	f7f9 faa2 	bl	23e70c8 <__aeabi_dcmpgt>
 23edb84:	2800      	cmp	r0, #0
 23edb86:	f041 8062 	bne.w	23eec4e <_Z6OBS_Dov+0x1d6e>
      SystemStatusBits &= ~ SSB_HDC_2;  // Turn Off Bit
 23edb8a:	f8db 3000 	ldr.w	r3, [fp]
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23edb8e:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
      SystemStatusBits &= ~ SSB_HDC_2;  // Turn Off Bit
 23edb92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
      SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
 23edb96:	f8cb 3000 	str.w	r3, [fp]
    strcpy (obs[oidx].sensor[sidx].id, "hdt2");
 23edb9a:	231c      	movs	r3, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23edb9c:	f640 2698 	movw	r6, #2712	; 0xa98
 23edba0:	fb03 f708 	mul.w	r7, r3, r8
    strcpy (obs[oidx].sensor[sidx].id, "hdt2");
 23edba4:	19e8      	adds	r0, r5, r7
 23edba6:	4947      	ldr	r1, [pc, #284]	; (23edcc4 <_Z6OBS_Dov+0xde4>)
 23edba8:	4420      	add	r0, r4
 23edbaa:	f00f f9c1 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23edbae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    obs[oidx].sensor[sidx].type = F_OBS;
 23edbb2:	2200      	movs	r2, #0
 23edbb4:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23edbb6:	f04f 0a01 	mov.w	sl, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23edbba:	435e      	muls	r6, r3
 23edbbc:	eb07 0906 	add.w	r9, r7, r6
 23edbc0:	44a1      	add	r9, r4
 23edbc2:	f8c9 2020 	str.w	r2, [r9, #32]
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23edbc6:	f7f9 fae7 	bl	23e7198 <__aeabi_d2f>
 23edbca:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "hdh2");
 23edbce:	f107 001c 	add.w	r0, r7, #28
 23edbd2:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23edbd4:	f108 0301 	add.w	r3, r8, #1
    strcpy (obs[oidx].sensor[sidx].id, "hdh2");
 23edbd8:	493b      	ldr	r1, [pc, #236]	; (23edcc8 <_Z6OBS_Dov+0xde8>)
    obs[oidx].sensor[sidx++].inuse = true;
 23edbda:	f889 a030 	strb.w	sl, [r9, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "hdh2");
 23edbde:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23edbe0:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "hdh2");
 23edbe2:	f00f f9a5 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23edbe6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    obs[oidx].sensor[sidx].type = F_OBS;
 23edbea:	9b01      	ldr	r3, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23edbec:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23edbf0:	461a      	mov	r2, r3
 23edbf2:	231c      	movs	r3, #28
 23edbf4:	fb03 6602 	mla	r6, r3, r2, r6
 23edbf8:	2200      	movs	r2, #0
 23edbfa:	4426      	add	r6, r4
 23edbfc:	6232      	str	r2, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23edbfe:	f7f9 facb 	bl	23e7198 <__aeabi_d2f>
    obs[oidx].sensor[sidx++].inuse = true;
 23edc02:	f886 a030 	strb.w	sl, [r6, #48]	; 0x30
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23edc06:	6270      	str	r0, [r6, #36]	; 0x24
  if (LPS_1_exists) {
 23edc08:	4b30      	ldr	r3, [pc, #192]	; (23edccc <_Z6OBS_Dov+0xdec>)
 23edc0a:	781b      	ldrb	r3, [r3, #0]
 23edc0c:	2b00      	cmp	r3, #0
 23edc0e:	f000 809a 	beq.w	23edd46 <_Z6OBS_Dov+0xe66>
    float t = lps1.readTemperature();
 23edc12:	482f      	ldr	r0, [pc, #188]	; (23edcd0 <_Z6OBS_Dov+0xdf0>)
 23edc14:	f005 fadc 	bl	23f31d0 <_ZN16Adafruit_LPS35HW15readTemperatureEv>
 23edc18:	eeb0 aa40 	vmov.f32	s20, s0
    float p = lps1.readPressure();
 23edc1c:	482c      	ldr	r0, [pc, #176]	; (23edcd0 <_Z6OBS_Dov+0xdf0>)
 23edc1e:	f005 faf9 	bl	23f3214 <_ZN16Adafruit_LPS35HW12readPressureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23edc22:	eeb4 aa4a 	vcmp.f32	s20, s20
 23edc26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float p = lps1.readPressure();
 23edc2a:	eef0 8a40 	vmov.f32	s17, s0
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23edc2e:	f181 801c 	bvs.w	23eec6a <_Z6OBS_Dov+0x1d8a>
 23edc32:	eddf 7a28 	vldr	s15, [pc, #160]	; 23edcd4 <_Z6OBS_Dov+0xdf4>
 23edc36:	eeb4 aae7 	vcmpe.f32	s20, s15
 23edc3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23edc3e:	f101 8014 	bmi.w	23eec6a <_Z6OBS_Dov+0x1d8a>
 23edc42:	eddf 7a25 	vldr	s15, [pc, #148]	; 23edcd8 <_Z6OBS_Dov+0xdf8>
 23edc46:	eeb4 aa67 	vcmp.f32	s20, s15
 23edc4a:	eddf 7a14 	vldr	s15, [pc, #80]	; 23edc9c <_Z6OBS_Dov+0xdbc>
 23edc4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23edc52:	fe37 aa8a 	vselgt.f32	s20, s15, s20
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23edc56:	eef4 8a68 	vcmp.f32	s17, s17
 23edc5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23edc5e:	f181 8008 	bvs.w	23eec72 <_Z6OBS_Dov+0x1d92>
 23edc62:	eddf 7a1e 	vldr	s15, [pc, #120]	; 23edcdc <_Z6OBS_Dov+0xdfc>
 23edc66:	eef4 8ae7 	vcmpe.f32	s17, s15
 23edc6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23edc6e:	f101 8000 	bmi.w	23eec72 <_Z6OBS_Dov+0x1d92>
 23edc72:	eddf 7a1b 	vldr	s15, [pc, #108]	; 23edce0 <_Z6OBS_Dov+0xe00>
 23edc76:	eef4 8a67 	vcmp.f32	s17, s15
 23edc7a:	eddf 7a08 	vldr	s15, [pc, #32]	; 23edc9c <_Z6OBS_Dov+0xdbc>
 23edc7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23edc82:	fe77 8aa8 	vselgt.f32	s17, s15, s17
 23edc86:	e02f      	b.n	23edce8 <_Z6OBS_Dov+0xe08>
 23edc88:	33333333 	.word	0x33333333
 23edc8c:	c08f3f33 	.word	0xc08f3f33
 23edc90:	023fe4fa 	.word	0x023fe4fa
 23edc94:	1007abd0 	.word	0x1007abd0
 23edc98:	42c80000 	.word	0x42c80000
 23edc9c:	c479f99a 	.word	0xc479f99a
 23edca0:	1006a344 	.word	0x1006a344
 23edca4:	1006aeb0 	.word	0x1006aeb0
 23edca8:	c0440000 	.word	0xc0440000
 23edcac:	404e0000 	.word	0x404e0000
 23edcb0:	40590000 	.word	0x40590000
 23edcb4:	023fe50c 	.word	0x023fe50c
 23edcb8:	023fe511 	.word	0x023fe511
 23edcbc:	1006a345 	.word	0x1006a345
 23edcc0:	1006aeb8 	.word	0x1006aeb8
 23edcc4:	023fe516 	.word	0x023fe516
 23edcc8:	023fe51b 	.word	0x023fe51b
 23edccc:	1006a34a 	.word	0x1006a34a
 23edcd0:	1006f0e0 	.word	0x1006f0e0
 23edcd4:	c2200000 	.word	0xc2200000
 23edcd8:	42700000 	.word	0x42700000
 23edcdc:	43960000 	.word	0x43960000
 23edce0:	44898000 	.word	0x44898000
 23edce4:	1006a22c 	.word	0x1006a22c
    strcpy (obs[oidx].sensor[sidx].id, "lpt1");
 23edce8:	231c      	movs	r3, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23edcea:	f640 2698 	movw	r6, #2712	; 0xa98
 23edcee:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23edcf2:	f04f 0901 	mov.w	r9, #1
 23edcf6:	fb03 f708 	mul.w	r7, r3, r8
    strcpy (obs[oidx].sensor[sidx].id, "lpt1");
 23edcfa:	19e8      	adds	r0, r5, r7
 23edcfc:	49d7      	ldr	r1, [pc, #860]	; (23ee05c <_Z6OBS_Dov+0x117c>)
 23edcfe:	4420      	add	r0, r4
 23edd00:	f00f f916 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23edd04:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "lpp1");
 23edd06:	f107 001c 	add.w	r0, r7, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23edd0a:	435e      	muls	r6, r3
 23edd0c:	19b9      	adds	r1, r7, r6
 23edd0e:	4421      	add	r1, r4
    strcpy (obs[oidx].sensor[sidx].id, "lpp1");
 23edd10:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23edd12:	f108 0201 	add.w	r2, r8, #1
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23edd16:	ed81 aa09 	vstr	s20, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23edd1a:	f8c1 a020 	str.w	sl, [r1, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23edd1e:	f881 9030 	strb.w	r9, [r1, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "lpp1");
 23edd22:	4420      	add	r0, r4
 23edd24:	49ce      	ldr	r1, [pc, #824]	; (23ee060 <_Z6OBS_Dov+0x1180>)
    obs[oidx].sensor[sidx++].inuse = true;
 23edd26:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "lpp1");
 23edd28:	f00f f902 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23edd2c:	231c      	movs	r3, #28
 23edd2e:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23edd30:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23edd34:	fb03 6602 	mla	r6, r3, r2, r6
 23edd38:	4426      	add	r6, r4
    obs[oidx].sensor[sidx].f_obs = (float) p;
 23edd3a:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23edd3e:	f8c6 a020 	str.w	sl, [r6, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23edd42:	f886 9030 	strb.w	r9, [r6, #48]	; 0x30
  if (LPS_2_exists) {
 23edd46:	4bc7      	ldr	r3, [pc, #796]	; (23ee064 <_Z6OBS_Dov+0x1184>)
 23edd48:	781b      	ldrb	r3, [r3, #0]
 23edd4a:	2b00      	cmp	r3, #0
 23edd4c:	d068      	beq.n	23ede20 <_Z6OBS_Dov+0xf40>
    float t = lps2.readTemperature();
 23edd4e:	48c6      	ldr	r0, [pc, #792]	; (23ee068 <_Z6OBS_Dov+0x1188>)
 23edd50:	f005 fa3e 	bl	23f31d0 <_ZN16Adafruit_LPS35HW15readTemperatureEv>
 23edd54:	eeb0 aa40 	vmov.f32	s20, s0
    float p = lps2.readPressure();
 23edd58:	48c3      	ldr	r0, [pc, #780]	; (23ee068 <_Z6OBS_Dov+0x1188>)
 23edd5a:	f005 fa5b 	bl	23f3214 <_ZN16Adafruit_LPS35HW12readPressureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23edd5e:	eeb4 aa4a 	vcmp.f32	s20, s20
 23edd62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float p = lps2.readPressure();
 23edd66:	eef0 8a40 	vmov.f32	s17, s0
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23edd6a:	f180 8786 	bvs.w	23eec7a <_Z6OBS_Dov+0x1d9a>
 23edd6e:	eddf 7abf 	vldr	s15, [pc, #764]	; 23ee06c <_Z6OBS_Dov+0x118c>
 23edd72:	eeb4 aae7 	vcmpe.f32	s20, s15
 23edd76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23edd7a:	f100 877e 	bmi.w	23eec7a <_Z6OBS_Dov+0x1d9a>
 23edd7e:	eddf 7abc 	vldr	s15, [pc, #752]	; 23ee070 <_Z6OBS_Dov+0x1190>
 23edd82:	eeb4 aa67 	vcmp.f32	s20, s15
 23edd86:	eddf 7abb 	vldr	s15, [pc, #748]	; 23ee074 <_Z6OBS_Dov+0x1194>
 23edd8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23edd8e:	fe37 aa8a 	vselgt.f32	s20, s15, s20
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23edd92:	eef4 8a68 	vcmp.f32	s17, s17
 23edd96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23edd9a:	f180 8772 	bvs.w	23eec82 <_Z6OBS_Dov+0x1da2>
 23edd9e:	eddf 7ab6 	vldr	s15, [pc, #728]	; 23ee078 <_Z6OBS_Dov+0x1198>
 23edda2:	eef4 8ae7 	vcmpe.f32	s17, s15
 23edda6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eddaa:	f100 876a 	bmi.w	23eec82 <_Z6OBS_Dov+0x1da2>
 23eddae:	eddf 7ab3 	vldr	s15, [pc, #716]	; 23ee07c <_Z6OBS_Dov+0x119c>
 23eddb2:	eef4 8a67 	vcmp.f32	s17, s15
 23eddb6:	eddf 7aaf 	vldr	s15, [pc, #700]	; 23ee074 <_Z6OBS_Dov+0x1194>
 23eddba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eddbe:	fe77 8aa8 	vselgt.f32	s17, s15, s17
    strcpy (obs[oidx].sensor[sidx].id, "lpt2");
 23eddc2:	231c      	movs	r3, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23eddc4:	f640 2698 	movw	r6, #2712	; 0xa98
 23eddc8:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23eddcc:	f04f 0901 	mov.w	r9, #1
 23eddd0:	fb03 f708 	mul.w	r7, r3, r8
    strcpy (obs[oidx].sensor[sidx].id, "lpt2");
 23eddd4:	19e8      	adds	r0, r5, r7
 23eddd6:	49aa      	ldr	r1, [pc, #680]	; (23ee080 <_Z6OBS_Dov+0x11a0>)
 23eddd8:	4420      	add	r0, r4
 23eddda:	f00f f8a9 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eddde:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "lpp2");
 23edde0:	f107 001c 	add.w	r0, r7, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23edde4:	435e      	muls	r6, r3
 23edde6:	19b9      	adds	r1, r7, r6
 23edde8:	4421      	add	r1, r4
    strcpy (obs[oidx].sensor[sidx].id, "lpp2");
 23eddea:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23eddec:	f108 0201 	add.w	r2, r8, #1
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23eddf0:	ed81 aa09 	vstr	s20, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23eddf4:	f8c1 a020 	str.w	sl, [r1, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23eddf8:	f881 9030 	strb.w	r9, [r1, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "lpp2");
 23eddfc:	4420      	add	r0, r4
 23eddfe:	49a1      	ldr	r1, [pc, #644]	; (23ee084 <_Z6OBS_Dov+0x11a4>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ede00:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "lpp2");
 23ede02:	f00f f895 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ede06:	231c      	movs	r3, #28
 23ede08:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23ede0a:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23ede0e:	fb03 6602 	mla	r6, r3, r2, r6
 23ede12:	4426      	add	r6, r4
    obs[oidx].sensor[sidx].f_obs = (float) p;
 23ede14:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23ede18:	f8c6 a020 	str.w	sl, [r6, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ede1c:	f886 9030 	strb.w	r9, [r6, #48]	; 0x30
  if (HIH8_exists) {
 23ede20:	4b99      	ldr	r3, [pc, #612]	; (23ee088 <_Z6OBS_Dov+0x11a8>)
 23ede22:	781b      	ldrb	r3, [r3, #0]
 23ede24:	2b00      	cmp	r3, #0
 23ede26:	d06b      	beq.n	23edf00 <_Z6OBS_Dov+0x1020>
    float t = 0.0;
 23ede28:	2600      	movs	r6, #0
    bool status = hih8_getTempHumid(&t, &h);
 23ede2a:	a90c      	add	r1, sp, #48	; 0x30
 23ede2c:	a802      	add	r0, sp, #8
    float t = 0.0;
 23ede2e:	9602      	str	r6, [sp, #8]
    float h = 0.0;
 23ede30:	960c      	str	r6, [sp, #48]	; 0x30
    bool status = hih8_getTempHumid(&t, &h);
 23ede32:	f7fb fb65 	bl	23e9500 <_Z17hih8_getTempHumidPfS_>
    if (!status) {
 23ede36:	b910      	cbnz	r0, 23ede3e <_Z6OBS_Dov+0xf5e>
      t = -999.99;
 23ede38:	4b94      	ldr	r3, [pc, #592]	; (23ee08c <_Z6OBS_Dov+0x11ac>)
      h = 0.0;
 23ede3a:	960c      	str	r6, [sp, #48]	; 0x30
      t = -999.99;
 23ede3c:	9302      	str	r3, [sp, #8]
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ede3e:	ed9d aa02 	vldr	s20, [sp, #8]
 23ede42:	eeb4 aa4a 	vcmp.f32	s20, s20
 23ede46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ede4a:	f180 871e 	bvs.w	23eec8a <_Z6OBS_Dov+0x1daa>
 23ede4e:	eddf 7a87 	vldr	s15, [pc, #540]	; 23ee06c <_Z6OBS_Dov+0x118c>
 23ede52:	eeb4 aae7 	vcmpe.f32	s20, s15
 23ede56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ede5a:	f100 8716 	bmi.w	23eec8a <_Z6OBS_Dov+0x1daa>
 23ede5e:	eddf 7a84 	vldr	s15, [pc, #528]	; 23ee070 <_Z6OBS_Dov+0x1190>
 23ede62:	eeb4 aa67 	vcmp.f32	s20, s15
 23ede66:	eddf 7a83 	vldr	s15, [pc, #524]	; 23ee074 <_Z6OBS_Dov+0x1194>
 23ede6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ede6e:	fe37 aa8a 	vselgt.f32	s20, s15, s20
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ede72:	eddd 8a0c 	vldr	s17, [sp, #48]	; 0x30
 23ede76:	eef4 8a68 	vcmp.f32	s17, s17
 23ede7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ede7e:	f180 8708 	bvs.w	23eec92 <_Z6OBS_Dov+0x1db2>
 23ede82:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 23ede86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ede8a:	f100 8702 	bmi.w	23eec92 <_Z6OBS_Dov+0x1db2>
 23ede8e:	eddf 7a80 	vldr	s15, [pc, #512]	; 23ee090 <_Z6OBS_Dov+0x11b0>
 23ede92:	eef4 8a67 	vcmp.f32	s17, s15
 23ede96:	eddf 7a77 	vldr	s15, [pc, #476]	; 23ee074 <_Z6OBS_Dov+0x1194>
 23ede9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ede9e:	fe77 8aa8 	vselgt.f32	s17, s15, s17
    strcpy (obs[oidx].sensor[sidx].id, "ht2");
 23edea2:	231c      	movs	r3, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23edea4:	f640 2698 	movw	r6, #2712	; 0xa98
 23edea8:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23edeac:	f04f 0901 	mov.w	r9, #1
 23edeb0:	fb03 f708 	mul.w	r7, r3, r8
    strcpy (obs[oidx].sensor[sidx].id, "ht2");
 23edeb4:	19e8      	adds	r0, r5, r7
 23edeb6:	4977      	ldr	r1, [pc, #476]	; (23ee094 <_Z6OBS_Dov+0x11b4>)
 23edeb8:	4420      	add	r0, r4
 23edeba:	f00f f839 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23edebe:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "hh2");
 23edec0:	f107 001c 	add.w	r0, r7, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23edec4:	435e      	muls	r6, r3
 23edec6:	19b9      	adds	r1, r7, r6
 23edec8:	4421      	add	r1, r4
    strcpy (obs[oidx].sensor[sidx].id, "hh2");
 23edeca:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23edecc:	f108 0201 	add.w	r2, r8, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23eded0:	ed81 aa09 	vstr	s20, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23eded4:	f8c1 a020 	str.w	sl, [r1, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23eded8:	f881 9030 	strb.w	r9, [r1, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "hh2");
 23ededc:	4420      	add	r0, r4
 23edede:	496e      	ldr	r1, [pc, #440]	; (23ee098 <_Z6OBS_Dov+0x11b8>)
    obs[oidx].sensor[sidx++].inuse = true;
 23edee0:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "hh2");
 23edee2:	f00f f825 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23edee6:	231c      	movs	r3, #28
 23edee8:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23edeea:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23edeee:	fb03 6602 	mla	r6, r3, r2, r6
 23edef2:	4426      	add	r6, r4
    obs[oidx].sensor[sidx].f_obs = h;
 23edef4:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23edef8:	f8c6 a020 	str.w	sl, [r6, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23edefc:	f886 9030 	strb.w	r9, [r6, #48]	; 0x30
  if (SI1145_exists) {
 23edf00:	4e66      	ldr	r6, [pc, #408]	; (23ee09c <_Z6OBS_Dov+0x11bc>)
 23edf02:	7833      	ldrb	r3, [r6, #0]
 23edf04:	2b00      	cmp	r3, #0
 23edf06:	f000 811d 	beq.w	23ee144 <_Z6OBS_Dov+0x1264>
    float si_vis = uv.readVisible();
 23edf0a:	4865      	ldr	r0, [pc, #404]	; (23ee0a0 <_Z6OBS_Dov+0x11c0>)
 23edf0c:	f005 fce1 	bl	23f38d2 <_ZN15Adafruit_SI114511readVisibleEv>
 23edf10:	ee07 0a90 	vmov	s15, r0
    float si_ir = uv.readIR();
 23edf14:	4862      	ldr	r0, [pc, #392]	; (23ee0a0 <_Z6OBS_Dov+0x11c0>)
    float si_vis = uv.readVisible();
 23edf16:	eef8 aa67 	vcvt.f32.u32	s21, s15
    float si_ir = uv.readIR();
 23edf1a:	f005 fcdd 	bl	23f38d8 <_ZN15Adafruit_SI11456readIREv>
 23edf1e:	ee07 0a90 	vmov	s15, r0
    float si_uv = uv.readUV()/100.0;
 23edf22:	485f      	ldr	r0, [pc, #380]	; (23ee0a0 <_Z6OBS_Dov+0x11c0>)
    float si_ir = uv.readIR();
 23edf24:	eeb8 aa67 	vcvt.f32.u32	s20, s15
    float si_uv = uv.readUV()/100.0;
 23edf28:	f005 fcd0 	bl	23f38cc <_ZN15Adafruit_SI11456readUVEv>
 23edf2c:	f7f8 fdd2 	bl	23e6ad4 <__aeabi_i2d>
 23edf30:	2200      	movs	r2, #0
 23edf32:	4b5c      	ldr	r3, [pc, #368]	; (23ee0a4 <_Z6OBS_Dov+0x11c4>)
 23edf34:	f7f8 ff62 	bl	23e6dfc <__aeabi_ddiv>
 23edf38:	f7f9 f92e 	bl	23e7198 <__aeabi_d2f>
    if ( ((si_vis+si_ir+si_uv) == 0.0) && ((si_last_vis+si_last_ir+si_last_uv) != 0.0) ) {
 23edf3c:	ee7a 7a8a 	vadd.f32	s15, s21, s20
    float si_uv = uv.readUV()/100.0;
 23edf40:	ee08 0a90 	vmov	s17, r0
    if ( ((si_vis+si_ir+si_uv) == 0.0) && ((si_last_vis+si_last_ir+si_last_uv) != 0.0) ) {
 23edf44:	ee77 7aa8 	vadd.f32	s15, s15, s17
 23edf48:	eef5 7a40 	vcmp.f32	s15, #0.0
 23edf4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23edf50:	f8df a16c 	ldr.w	sl, [pc, #364]	; 23ee0c0 <_Z6OBS_Dov+0x11e0>
 23edf54:	f8df 916c 	ldr.w	r9, [pc, #364]	; 23ee0c4 <_Z6OBS_Dov+0x11e4>
 23edf58:	4f53      	ldr	r7, [pc, #332]	; (23ee0a8 <_Z6OBS_Dov+0x11c8>)
 23edf5a:	d141      	bne.n	23edfe0 <_Z6OBS_Dov+0x1100>
 23edf5c:	ed99 7a00 	vldr	s14, [r9]
 23edf60:	edda 7a00 	vldr	s15, [sl]
 23edf64:	ee77 7a87 	vadd.f32	s15, s15, s14
 23edf68:	ed97 7a00 	vldr	s14, [r7]
 23edf6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 23edf70:	eef5 7a40 	vcmp.f32	s15, #0.0
 23edf74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23edf78:	d032      	beq.n	23edfe0 <_Z6OBS_Dov+0x1100>
      Output ("SI RESET");
 23edf7a:	484c      	ldr	r0, [pc, #304]	; (23ee0ac <_Z6OBS_Dov+0x11cc>)
 23edf7c:	f7fa fce8 	bl	23e8950 <_Z6OutputPKc>
      if (uv.begin()) {
 23edf80:	f00c f9c8 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23edf84:	2160      	movs	r1, #96	; 0x60
 23edf86:	4602      	mov	r2, r0
 23edf88:	4845      	ldr	r0, [pc, #276]	; (23ee0a0 <_Z6OBS_Dov+0x11c0>)
 23edf8a:	f005 fd07 	bl	23f399c <_ZN15Adafruit_SI11455beginEhP7TwoWire>
 23edf8e:	2800      	cmp	r0, #0
 23edf90:	f000 8683 	beq.w	23eec9a <_Z6OBS_Dov+0x1dba>
        SI1145_exists = true;
 23edf94:	2301      	movs	r3, #1
        Output ("SI ONLINE");
 23edf96:	4846      	ldr	r0, [pc, #280]	; (23ee0b0 <_Z6OBS_Dov+0x11d0>)
        SI1145_exists = true;
 23edf98:	7033      	strb	r3, [r6, #0]
        Output ("SI ONLINE");
 23edf9a:	f7fa fcd9 	bl	23e8950 <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_SI1145; // Turn Off Bit
 23edf9e:	f8db 3000 	ldr.w	r3, [fp]
        si_vis = uv.readVisible();
 23edfa2:	483f      	ldr	r0, [pc, #252]	; (23ee0a0 <_Z6OBS_Dov+0x11c0>)
        SystemStatusBits &= ~SSB_SI1145; // Turn Off Bit
 23edfa4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 23edfa8:	f8cb 3000 	str.w	r3, [fp]
        si_vis = uv.readVisible();
 23edfac:	f005 fc91 	bl	23f38d2 <_ZN15Adafruit_SI114511readVisibleEv>
 23edfb0:	ee07 0a90 	vmov	s15, r0
        si_ir = uv.readIR();
 23edfb4:	483a      	ldr	r0, [pc, #232]	; (23ee0a0 <_Z6OBS_Dov+0x11c0>)
        si_vis = uv.readVisible();
 23edfb6:	eef8 aa67 	vcvt.f32.u32	s21, s15
        si_ir = uv.readIR();
 23edfba:	f005 fc8d 	bl	23f38d8 <_ZN15Adafruit_SI11456readIREv>
 23edfbe:	ee07 0a90 	vmov	s15, r0
        si_uv = uv.readUV()/100.0;
 23edfc2:	4837      	ldr	r0, [pc, #220]	; (23ee0a0 <_Z6OBS_Dov+0x11c0>)
        si_ir = uv.readIR();
 23edfc4:	eeb8 aa67 	vcvt.f32.u32	s20, s15
        si_uv = uv.readUV()/100.0;
 23edfc8:	f005 fc80 	bl	23f38cc <_ZN15Adafruit_SI11456readUVEv>
 23edfcc:	f7f8 fd82 	bl	23e6ad4 <__aeabi_i2d>
 23edfd0:	2200      	movs	r2, #0
 23edfd2:	4b34      	ldr	r3, [pc, #208]	; (23ee0a4 <_Z6OBS_Dov+0x11c4>)
 23edfd4:	f7f8 ff12 	bl	23e6dfc <__aeabi_ddiv>
 23edfd8:	f7f9 f8de 	bl	23e7198 <__aeabi_d2f>
 23edfdc:	ee08 0a90 	vmov	s17, r0
    si_vis = (isnan(si_vis) || (si_vis < QC_MIN_VI)  || (si_vis > QC_MAX_VI)) ? QC_ERR_VI  : si_vis;
 23edfe0:	eef4 aa6a 	vcmp.f32	s21, s21
 23edfe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    si_last_vis = si_vis;
 23edfe8:	edca aa00 	vstr	s21, [sl]
    si_last_ir = si_ir;
 23edfec:	ed89 aa00 	vstr	s20, [r9]
    si_last_uv = si_uv;
 23edff0:	edc7 8a00 	vstr	s17, [r7]
    si_vis = (isnan(si_vis) || (si_vis < QC_MIN_VI)  || (si_vis > QC_MAX_VI)) ? QC_ERR_VI  : si_vis;
 23edff4:	f180 865d 	bvs.w	23eecb2 <_Z6OBS_Dov+0x1dd2>
 23edff8:	eddf 7a2e 	vldr	s15, [pc, #184]	; 23ee0b4 <_Z6OBS_Dov+0x11d4>
 23edffc:	eef4 aa67 	vcmp.f32	s21, s15
 23ee000:	eddf 7a1c 	vldr	s15, [pc, #112]	; 23ee074 <_Z6OBS_Dov+0x1194>
 23ee004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee008:	fe77 aaaa 	vselgt.f32	s21, s15, s21
    si_ir  = (isnan(si_ir)  || (si_ir  < QC_MIN_IR)  || (si_ir  > QC_MAX_IR)) ? QC_ERR_IR  : si_ir;
 23ee00c:	eeb4 aa4a 	vcmp.f32	s20, s20
 23ee010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee014:	f180 8651 	bvs.w	23eecba <_Z6OBS_Dov+0x1dda>
 23ee018:	eddf 7a27 	vldr	s15, [pc, #156]	; 23ee0b8 <_Z6OBS_Dov+0x11d8>
 23ee01c:	eeb4 aa67 	vcmp.f32	s20, s15
 23ee020:	eddf 7a14 	vldr	s15, [pc, #80]	; 23ee074 <_Z6OBS_Dov+0x1194>
 23ee024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee028:	fe37 aa8a 	vselgt.f32	s20, s15, s20
    si_uv  = (isnan(si_uv)  || (si_uv  < QC_MIN_UV)  || (si_uv  > QC_MAX_UV)) ? QC_ERR_UV  : si_uv;
 23ee02c:	eef4 8a68 	vcmp.f32	s17, s17
 23ee030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee034:	f180 8645 	bvs.w	23eecc2 <_Z6OBS_Dov+0x1de2>
 23ee038:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 23ee03c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee040:	f100 863f 	bmi.w	23eecc2 <_Z6OBS_Dov+0x1de2>
 23ee044:	eddf 7a1d 	vldr	s15, [pc, #116]	; 23ee0bc <_Z6OBS_Dov+0x11dc>
 23ee048:	eef4 8a67 	vcmp.f32	s17, s15
 23ee04c:	eddf 7a09 	vldr	s15, [pc, #36]	; 23ee074 <_Z6OBS_Dov+0x1194>
 23ee050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee054:	fe77 8aa8 	vselgt.f32	s17, s15, s17
 23ee058:	e036      	b.n	23ee0c8 <_Z6OBS_Dov+0x11e8>
 23ee05a:	bf00      	nop
 23ee05c:	023fe520 	.word	0x023fe520
 23ee060:	023fe525 	.word	0x023fe525
 23ee064:	1006a34b 	.word	0x1006a34b
 23ee068:	1006f0fc 	.word	0x1006f0fc
 23ee06c:	c2200000 	.word	0xc2200000
 23ee070:	42700000 	.word	0x42700000
 23ee074:	c479f99a 	.word	0xc479f99a
 23ee078:	43960000 	.word	0x43960000
 23ee07c:	44898000 	.word	0x44898000
 23ee080:	023fe52a 	.word	0x023fe52a
 23ee084:	023fe52f 	.word	0x023fe52f
 23ee088:	1006a346 	.word	0x1006a346
 23ee08c:	c479ff5c 	.word	0xc479ff5c
 23ee090:	42c80000 	.word	0x42c80000
 23ee094:	023fe534 	.word	0x023fe534
 23ee098:	023fe538 	.word	0x023fe538
 23ee09c:	1006a826 	.word	0x1006a826
 23ee0a0:	1007ac24 	.word	0x1007ac24
 23ee0a4:	40590000 	.word	0x40590000
 23ee0a8:	1007abe4 	.word	0x1007abe4
 23ee0ac:	023fe53c 	.word	0x023fe53c
 23ee0b0:	023fd91b 	.word	0x023fd91b
 23ee0b4:	44fa0000 	.word	0x44fa0000
 23ee0b8:	467a0000 	.word	0x467a0000
 23ee0bc:	447a0000 	.word	0x447a0000
 23ee0c0:	1007abe8 	.word	0x1007abe8
 23ee0c4:	1007abe0 	.word	0x1007abe0
    strcpy (obs[oidx].sensor[sidx].id, "sv1");
 23ee0c8:	f04f 0b1c 	mov.w	fp, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee0cc:	f640 2698 	movw	r6, #2712	; 0xa98
 23ee0d0:	fb0b f708 	mul.w	r7, fp, r8
    strcpy (obs[oidx].sensor[sidx].id, "sv1");
 23ee0d4:	19e8      	adds	r0, r5, r7
 23ee0d6:	49d5      	ldr	r1, [pc, #852]	; (23ee42c <_Z6OBS_Dov+0x154c>)
 23ee0d8:	4420      	add	r0, r4
 23ee0da:	f00e ff29 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee0de:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ee0e0:	f04f 0a01 	mov.w	sl, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee0e4:	435e      	muls	r6, r3
 23ee0e6:	2300      	movs	r3, #0
 23ee0e8:	19ba      	adds	r2, r7, r6
    strcpy (obs[oidx].sensor[sidx].id, "si1");
 23ee0ea:	eb07 000b 	add.w	r0, r7, fp
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee0ee:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "si1");
 23ee0f0:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee0f2:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = si_vis;
 23ee0f4:	edc2 aa09 	vstr	s21, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "si1");
 23ee0f8:	49cd      	ldr	r1, [pc, #820]	; (23ee430 <_Z6OBS_Dov+0x1550>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ee0fa:	f882 a030 	strb.w	sl, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "si1");
 23ee0fe:	4420      	add	r0, r4
 23ee100:	f00e ff16 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee104:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ee106:	f108 0901 	add.w	r9, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee10a:	fb0b 6909 	mla	r9, fp, r9, r6
 23ee10e:	eb04 0209 	add.w	r2, r4, r9
    obs[oidx].sensor[sidx++].inuse = true;
 23ee112:	f108 0902 	add.w	r9, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee116:	fb0b 6609 	mla	r6, fp, r9, r6
    strcpy (obs[oidx].sensor[sidx].id, "su1");
 23ee11a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 23ee11e:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee120:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = si_ir;
 23ee122:	ed82 aa09 	vstr	s20, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "su1");
 23ee126:	49c3      	ldr	r1, [pc, #780]	; (23ee434 <_Z6OBS_Dov+0x1554>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ee128:	f882 a030 	strb.w	sl, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "su1");
 23ee12c:	4420      	add	r0, r4
 23ee12e:	f00e feff 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee132:	4426      	add	r6, r4
 23ee134:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx].f_obs = si_uv;
 23ee136:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee13a:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ee13c:	f108 0803 	add.w	r8, r8, #3
 23ee140:	f886 a030 	strb.w	sl, [r6, #48]	; 0x30
  if (MCP_1_exists) {
 23ee144:	4bbc      	ldr	r3, [pc, #752]	; (23ee438 <_Z6OBS_Dov+0x1558>)
 23ee146:	781b      	ldrb	r3, [r3, #0]
 23ee148:	b3c3      	cbz	r3, 23ee1bc <_Z6OBS_Dov+0x12dc>
    strcpy (obs[oidx].sensor[sidx].id, "mt1");
 23ee14a:	261c      	movs	r6, #28
 23ee14c:	fb06 f608 	mul.w	r6, r6, r8
 23ee150:	1970      	adds	r0, r6, r5
 23ee152:	49ba      	ldr	r1, [pc, #744]	; (23ee43c <_Z6OBS_Dov+0x155c>)
 23ee154:	4420      	add	r0, r4
 23ee156:	f00e feeb 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee15a:	f640 2398 	movw	r3, #2712	; 0xa98
 23ee15e:	9a00      	ldr	r2, [sp, #0]
    t = mcp1.readTempC();
 23ee160:	48b7      	ldr	r0, [pc, #732]	; (23ee440 <_Z6OBS_Dov+0x1560>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee162:	fb03 6602 	mla	r6, r3, r2, r6
 23ee166:	2300      	movs	r3, #0
 23ee168:	4426      	add	r6, r4
 23ee16a:	6233      	str	r3, [r6, #32]
    t = mcp1.readTempC();
 23ee16c:	f005 f9be 	bl	23f34ec <_ZN16Adafruit_MCP98089readTempCEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ee170:	eeb4 0a40 	vcmp.f32	s0, s0
 23ee174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee178:	f180 85a7 	bvs.w	23eecca <_Z6OBS_Dov+0x1dea>
 23ee17c:	eddf 7ab1 	vldr	s15, [pc, #708]	; 23ee444 <_Z6OBS_Dov+0x1564>
 23ee180:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ee184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee188:	f100 859f 	bmi.w	23eecca <_Z6OBS_Dov+0x1dea>
 23ee18c:	eddf 7aae 	vldr	s15, [pc, #696]	; 23ee448 <_Z6OBS_Dov+0x1568>
 23ee190:	eeb4 0a67 	vcmp.f32	s0, s15
 23ee194:	eddf 7aad 	vldr	s15, [pc, #692]	; 23ee44c <_Z6OBS_Dov+0x156c>
 23ee198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee19c:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23ee1a0:	f640 2398 	movw	r3, #2712	; 0xa98
 23ee1a4:	9a00      	ldr	r2, [sp, #0]
 23ee1a6:	4353      	muls	r3, r2
 23ee1a8:	221c      	movs	r2, #28
 23ee1aa:	fb02 3308 	mla	r3, r2, r8, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23ee1ae:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23ee1b0:	4423      	add	r3, r4
 23ee1b2:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ee1b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23ee1ba:	4490      	add	r8, r2
  if (MCP_2_exists) {
 23ee1bc:	4ba4      	ldr	r3, [pc, #656]	; (23ee450 <_Z6OBS_Dov+0x1570>)
 23ee1be:	781b      	ldrb	r3, [r3, #0]
 23ee1c0:	b3c3      	cbz	r3, 23ee234 <_Z6OBS_Dov+0x1354>
    strcpy (obs[oidx].sensor[sidx].id, "mt2");
 23ee1c2:	261c      	movs	r6, #28
 23ee1c4:	fb06 f608 	mul.w	r6, r6, r8
 23ee1c8:	1970      	adds	r0, r6, r5
 23ee1ca:	49a2      	ldr	r1, [pc, #648]	; (23ee454 <_Z6OBS_Dov+0x1574>)
 23ee1cc:	4420      	add	r0, r4
 23ee1ce:	f00e feaf 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee1d2:	f640 2398 	movw	r3, #2712	; 0xa98
 23ee1d6:	9a00      	ldr	r2, [sp, #0]
    t = mcp2.readTempC();
 23ee1d8:	489f      	ldr	r0, [pc, #636]	; (23ee458 <_Z6OBS_Dov+0x1578>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee1da:	fb03 6602 	mla	r6, r3, r2, r6
 23ee1de:	2300      	movs	r3, #0
 23ee1e0:	4426      	add	r6, r4
 23ee1e2:	6233      	str	r3, [r6, #32]
    t = mcp2.readTempC();
 23ee1e4:	f005 f982 	bl	23f34ec <_ZN16Adafruit_MCP98089readTempCEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ee1e8:	eeb4 0a40 	vcmp.f32	s0, s0
 23ee1ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee1f0:	f180 856f 	bvs.w	23eecd2 <_Z6OBS_Dov+0x1df2>
 23ee1f4:	eddf 7a93 	vldr	s15, [pc, #588]	; 23ee444 <_Z6OBS_Dov+0x1564>
 23ee1f8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ee1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee200:	f100 8567 	bmi.w	23eecd2 <_Z6OBS_Dov+0x1df2>
 23ee204:	eddf 7a90 	vldr	s15, [pc, #576]	; 23ee448 <_Z6OBS_Dov+0x1568>
 23ee208:	eeb4 0a67 	vcmp.f32	s0, s15
 23ee20c:	eddf 7a8f 	vldr	s15, [pc, #572]	; 23ee44c <_Z6OBS_Dov+0x156c>
 23ee210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee214:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23ee218:	f640 2398 	movw	r3, #2712	; 0xa98
 23ee21c:	9a00      	ldr	r2, [sp, #0]
 23ee21e:	4353      	muls	r3, r2
 23ee220:	221c      	movs	r2, #28
 23ee222:	fb02 3308 	mla	r3, r2, r8, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23ee226:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23ee228:	4423      	add	r3, r4
 23ee22a:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ee22e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23ee232:	4490      	add	r8, r2
  if (MCP_3_exists) {
 23ee234:	4b89      	ldr	r3, [pc, #548]	; (23ee45c <_Z6OBS_Dov+0x157c>)
 23ee236:	781b      	ldrb	r3, [r3, #0]
 23ee238:	2b00      	cmp	r3, #0
 23ee23a:	f000 8552 	beq.w	23eece2 <_Z6OBS_Dov+0x1e02>
    strcpy (obs[oidx].sensor[sidx].id, "gt1");
 23ee23e:	261c      	movs	r6, #28
 23ee240:	fb06 f608 	mul.w	r6, r6, r8
 23ee244:	1970      	adds	r0, r6, r5
 23ee246:	4986      	ldr	r1, [pc, #536]	; (23ee460 <_Z6OBS_Dov+0x1580>)
 23ee248:	4420      	add	r0, r4
 23ee24a:	f00e fe71 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee24e:	f640 2398 	movw	r3, #2712	; 0xa98
 23ee252:	9a00      	ldr	r2, [sp, #0]
    t = mcp3.readTempC();
 23ee254:	4883      	ldr	r0, [pc, #524]	; (23ee464 <_Z6OBS_Dov+0x1584>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee256:	fb03 6602 	mla	r6, r3, r2, r6
 23ee25a:	2300      	movs	r3, #0
 23ee25c:	4426      	add	r6, r4
 23ee25e:	6233      	str	r3, [r6, #32]
    t = mcp3.readTempC();
 23ee260:	f005 f944 	bl	23f34ec <_ZN16Adafruit_MCP98089readTempCEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ee264:	eeb4 0a40 	vcmp.f32	s0, s0
 23ee268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee26c:	f180 8535 	bvs.w	23eecda <_Z6OBS_Dov+0x1dfa>
 23ee270:	eddf 7a74 	vldr	s15, [pc, #464]	; 23ee444 <_Z6OBS_Dov+0x1564>
 23ee274:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ee278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee27c:	f100 852d 	bmi.w	23eecda <_Z6OBS_Dov+0x1dfa>
 23ee280:	eddf 7a71 	vldr	s15, [pc, #452]	; 23ee448 <_Z6OBS_Dov+0x1568>
 23ee284:	eeb4 0a67 	vcmp.f32	s0, s15
 23ee288:	eddf 7a70 	vldr	s15, [pc, #448]	; 23ee44c <_Z6OBS_Dov+0x156c>
 23ee28c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee290:	fe77 8a80 	vselgt.f32	s17, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23ee294:	f640 2398 	movw	r3, #2712	; 0xa98
 23ee298:	9a00      	ldr	r2, [sp, #0]
 23ee29a:	4353      	muls	r3, r2
 23ee29c:	221c      	movs	r2, #28
 23ee29e:	fb02 3308 	mla	r3, r2, r8, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23ee2a2:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23ee2a4:	4423      	add	r3, r4
 23ee2a6:	edc3 8a09 	vstr	s17, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ee2aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23ee2ae:	4490      	add	r8, r2
  if (MCP_4_exists) {
 23ee2b0:	4b6d      	ldr	r3, [pc, #436]	; (23ee468 <_Z6OBS_Dov+0x1588>)
 23ee2b2:	781b      	ldrb	r3, [r3, #0]
 23ee2b4:	b3c3      	cbz	r3, 23ee328 <_Z6OBS_Dov+0x1448>
    strcpy (obs[oidx].sensor[sidx].id, "gt2");
 23ee2b6:	261c      	movs	r6, #28
 23ee2b8:	fb06 f608 	mul.w	r6, r6, r8
 23ee2bc:	1970      	adds	r0, r6, r5
 23ee2be:	496b      	ldr	r1, [pc, #428]	; (23ee46c <_Z6OBS_Dov+0x158c>)
 23ee2c0:	4420      	add	r0, r4
 23ee2c2:	f00e fe35 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee2c6:	f640 2398 	movw	r3, #2712	; 0xa98
 23ee2ca:	9a00      	ldr	r2, [sp, #0]
    t = mcp4.readTempC();
 23ee2cc:	4868      	ldr	r0, [pc, #416]	; (23ee470 <_Z6OBS_Dov+0x1590>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee2ce:	fb03 6602 	mla	r6, r3, r2, r6
 23ee2d2:	2300      	movs	r3, #0
 23ee2d4:	4426      	add	r6, r4
 23ee2d6:	6233      	str	r3, [r6, #32]
    t = mcp4.readTempC();
 23ee2d8:	f005 f908 	bl	23f34ec <_ZN16Adafruit_MCP98089readTempCEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ee2dc:	eeb4 0a40 	vcmp.f32	s0, s0
 23ee2e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee2e4:	f180 8501 	bvs.w	23eecea <_Z6OBS_Dov+0x1e0a>
 23ee2e8:	eddf 7a56 	vldr	s15, [pc, #344]	; 23ee444 <_Z6OBS_Dov+0x1564>
 23ee2ec:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ee2f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee2f4:	f100 84f9 	bmi.w	23eecea <_Z6OBS_Dov+0x1e0a>
 23ee2f8:	eddf 7a53 	vldr	s15, [pc, #332]	; 23ee448 <_Z6OBS_Dov+0x1568>
 23ee2fc:	eeb4 0a67 	vcmp.f32	s0, s15
 23ee300:	eddf 7a52 	vldr	s15, [pc, #328]	; 23ee44c <_Z6OBS_Dov+0x156c>
 23ee304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee308:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23ee30c:	f640 2398 	movw	r3, #2712	; 0xa98
 23ee310:	9a00      	ldr	r2, [sp, #0]
 23ee312:	4353      	muls	r3, r2
 23ee314:	221c      	movs	r2, #28
 23ee316:	fb02 3308 	mla	r3, r2, r8, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23ee31a:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23ee31c:	4423      	add	r3, r4
 23ee31e:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ee322:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23ee326:	4490      	add	r8, r2
  if (VEML7700_exists) {
 23ee328:	4b52      	ldr	r3, [pc, #328]	; (23ee474 <_Z6OBS_Dov+0x1594>)
 23ee32a:	781b      	ldrb	r3, [r3, #0]
 23ee32c:	b37b      	cbz	r3, 23ee38e <_Z6OBS_Dov+0x14ae>
    float lux = veml.readLux(VEML_LUX_AUTO);
 23ee32e:	2102      	movs	r1, #2
 23ee330:	4851      	ldr	r0, [pc, #324]	; (23ee478 <_Z6OBS_Dov+0x1598>)
 23ee332:	f006 fb09 	bl	23f4948 <_ZN17Adafruit_VEML77007readLuxE9luxMethod>
    lux = (isnan(lux) || (lux < QC_MIN_VLX)  || (lux > QC_MAX_VLX))  ? QC_ERR_VLX  : lux;
 23ee336:	eeb4 0a40 	vcmp.f32	s0, s0
 23ee33a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee33e:	f180 84d8 	bvs.w	23eecf2 <_Z6OBS_Dov+0x1e12>
 23ee342:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23ee346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee34a:	f100 84d2 	bmi.w	23eecf2 <_Z6OBS_Dov+0x1e12>
 23ee34e:	eddf 7a4b 	vldr	s15, [pc, #300]	; 23ee47c <_Z6OBS_Dov+0x159c>
 23ee352:	eeb4 0a67 	vcmp.f32	s0, s15
 23ee356:	eddf 7a4a 	vldr	s15, [pc, #296]	; 23ee480 <_Z6OBS_Dov+0x15a0>
 23ee35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee35e:	fe37 aa80 	vselgt.f32	s20, s15, s0
    strcpy (obs[oidx].sensor[sidx].id, "vlx");
 23ee362:	261c      	movs	r6, #28
 23ee364:	fb06 f608 	mul.w	r6, r6, r8
 23ee368:	1970      	adds	r0, r6, r5
 23ee36a:	4946      	ldr	r1, [pc, #280]	; (23ee484 <_Z6OBS_Dov+0x15a4>)
 23ee36c:	4420      	add	r0, r4
 23ee36e:	f00e fddf 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee372:	f640 2398 	movw	r3, #2712	; 0xa98
 23ee376:	9a00      	ldr	r2, [sp, #0]
 23ee378:	fb03 6302 	mla	r3, r3, r2, r6
 23ee37c:	2200      	movs	r2, #0
 23ee37e:	4423      	add	r3, r4
 23ee380:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ee382:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = lux;
 23ee384:	ed83 aa09 	vstr	s20, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ee388:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23ee38c:	4490      	add	r8, r2
  if (BLX_exists) {
 23ee38e:	4b3e      	ldr	r3, [pc, #248]	; (23ee488 <_Z6OBS_Dov+0x15a8>)
 23ee390:	781b      	ldrb	r3, [r3, #0]
 23ee392:	b36b      	cbz	r3, 23ee3f0 <_Z6OBS_Dov+0x1510>
    float lux=blx_takereading();
 23ee394:	f7fb fe08 	bl	23e9fa8 <_Z15blx_takereadingv>
    lux = (isnan(lux) || (lux < QC_MIN_BLX)  || (lux > QC_MAX_BLX))  ? QC_ERR_BLX  : lux;
 23ee398:	eeb4 0a40 	vcmp.f32	s0, s0
 23ee39c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee3a0:	f180 84ab 	bvs.w	23eecfa <_Z6OBS_Dov+0x1e1a>
 23ee3a4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23ee3a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee3ac:	f100 84a5 	bmi.w	23eecfa <_Z6OBS_Dov+0x1e1a>
 23ee3b0:	eddf 7a36 	vldr	s15, [pc, #216]	; 23ee48c <_Z6OBS_Dov+0x15ac>
 23ee3b4:	eeb4 0a67 	vcmp.f32	s0, s15
 23ee3b8:	eddf 7a24 	vldr	s15, [pc, #144]	; 23ee44c <_Z6OBS_Dov+0x156c>
 23ee3bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee3c0:	fe37 aa80 	vselgt.f32	s20, s15, s0
    strcpy (obs[oidx].sensor[sidx].id, "blx");
 23ee3c4:	261c      	movs	r6, #28
 23ee3c6:	fb06 f608 	mul.w	r6, r6, r8
 23ee3ca:	1970      	adds	r0, r6, r5
 23ee3cc:	4930      	ldr	r1, [pc, #192]	; (23ee490 <_Z6OBS_Dov+0x15b0>)
 23ee3ce:	4420      	add	r0, r4
 23ee3d0:	f00e fdae 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee3d4:	f640 2398 	movw	r3, #2712	; 0xa98
 23ee3d8:	9a00      	ldr	r2, [sp, #0]
 23ee3da:	fb03 6302 	mla	r3, r3, r2, r6
 23ee3de:	2200      	movs	r2, #0
 23ee3e0:	4423      	add	r3, r4
 23ee3e2:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ee3e4:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = lux;
 23ee3e6:	ed83 aa09 	vstr	s20, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ee3ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23ee3ee:	4490      	add	r8, r2
  if (A4_State == A4_STATE_DISTANCE) {
 23ee3f0:	4b28      	ldr	r3, [pc, #160]	; (23ee494 <_Z6OBS_Dov+0x15b4>)
 23ee3f2:	681f      	ldr	r7, [r3, #0]
 23ee3f4:	2f01      	cmp	r7, #1
 23ee3f6:	d151      	bne.n	23ee49c <_Z6OBS_Dov+0x15bc>
    strcpy (obs[oidx].sensor[sidx].id, "sg"); // sg = snow or stream
 23ee3f8:	261c      	movs	r6, #28
 23ee3fa:	fb06 f608 	mul.w	r6, r6, r8
 23ee3fe:	1970      	adds	r0, r6, r5
 23ee400:	4925      	ldr	r1, [pc, #148]	; (23ee498 <_Z6OBS_Dov+0x15b8>)
 23ee402:	4420      	add	r0, r4
 23ee404:	f00e fd94 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee408:	f640 2398 	movw	r3, #2712	; 0xa98
 23ee40c:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ee40e:	f108 0801 	add.w	r8, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee412:	fb03 6602 	mla	r6, r3, r2, r6
 23ee416:	2300      	movs	r3, #0
 23ee418:	4426      	add	r6, r4
 23ee41a:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = DistanceGauge_Median();
 23ee41c:	f7fc f938 	bl	23ea690 <_Z20DistanceGauge_Medianv>
 23ee420:	ed86 0a09 	vstr	s0, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ee424:	f886 7030 	strb.w	r7, [r6, #48]	; 0x30
 23ee428:	e038      	b.n	23ee49c <_Z6OBS_Dov+0x15bc>
 23ee42a:	bf00      	nop
 23ee42c:	023fe545 	.word	0x023fe545
 23ee430:	023fe549 	.word	0x023fe549
 23ee434:	023fe54d 	.word	0x023fe54d
 23ee438:	1006a360 	.word	0x1006a360
 23ee43c:	023fe5ec 	.word	0x023fe5ec
 23ee440:	1006f118 	.word	0x1006f118
 23ee444:	c2200000 	.word	0xc2200000
 23ee448:	42700000 	.word	0x42700000
 23ee44c:	c479f99a 	.word	0xc479f99a
 23ee450:	1006a361 	.word	0x1006a361
 23ee454:	023fe5f3 	.word	0x023fe5f3
 23ee458:	1006f124 	.word	0x1006f124
 23ee45c:	1006a362 	.word	0x1006a362
 23ee460:	023fe788 	.word	0x023fe788
 23ee464:	1006f130 	.word	0x1006f130
 23ee468:	1006a363 	.word	0x1006a363
 23ee46c:	023fe793 	.word	0x023fe793
 23ee470:	1006f13c 	.word	0x1006f13c
 23ee474:	1006a838 	.word	0x1006a838
 23ee478:	1007ac2c 	.word	0x1007ac2c
 23ee47c:	47ea6000 	.word	0x47ea6000
 23ee480:	c479c000 	.word	0xc479c000
 23ee484:	023fe551 	.word	0x023fe551
 23ee488:	1006a318 	.word	0x1006a318
 23ee48c:	48438200 	.word	0x48438200
 23ee490:	023fe555 	.word	0x023fe555
 23ee494:	1006a2f4 	.word	0x1006a2f4
 23ee498:	023fe559 	.word	0x023fe559
  if (A4_State == A4_STATE_RAW) {
 23ee49c:	4bd5      	ldr	r3, [pc, #852]	; (23ee7f4 <_Z6OBS_Dov+0x1914>)
 23ee49e:	681b      	ldr	r3, [r3, #0]
 23ee4a0:	2b03      	cmp	r3, #3
 23ee4a2:	f040 842e 	bne.w	23eed02 <_Z6OBS_Dov+0x1e22>
    strcpy (obs[oidx].sensor[sidx].id, "a4r");
 23ee4a6:	261c      	movs	r6, #28
 23ee4a8:	fb06 f608 	mul.w	r6, r6, r8
 23ee4ac:	1970      	adds	r0, r6, r5
 23ee4ae:	49d2      	ldr	r1, [pc, #840]	; (23ee7f8 <_Z6OBS_Dov+0x1918>)
 23ee4b0:	4420      	add	r0, r4
 23ee4b2:	f00e fd3d 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee4b6:	f640 2398 	movw	r3, #2712	; 0xa98
 23ee4ba:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx].f_obs = Pin_ReadAvg(A4);
 23ee4bc:	200f      	movs	r0, #15
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee4be:	fb03 6602 	mla	r6, r3, r2, r6
 23ee4c2:	2300      	movs	r3, #0
 23ee4c4:	4426      	add	r6, r4
 23ee4c6:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = Pin_ReadAvg(A4);
 23ee4c8:	f7fc f8a8 	bl	23ea61c <_Z11Pin_ReadAvgi>
    obs[oidx].sensor[sidx++].inuse = true;
 23ee4cc:	2301      	movs	r3, #1
    obs[oidx].sensor[sidx].f_obs = Pin_ReadAvg(A4);
 23ee4ce:	ed86 0a09 	vstr	s0, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ee4d2:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
 23ee4d6:	4498      	add	r8, r3
  if (A5_State == A5_STATE_RAW) {
 23ee4d8:	4bc8      	ldr	r3, [pc, #800]	; (23ee7fc <_Z6OBS_Dov+0x191c>)
 23ee4da:	681f      	ldr	r7, [r3, #0]
 23ee4dc:	2f01      	cmp	r7, #1
 23ee4de:	d118      	bne.n	23ee512 <_Z6OBS_Dov+0x1632>
    strcpy (obs[oidx].sensor[sidx].id, "a5r");
 23ee4e0:	261c      	movs	r6, #28
 23ee4e2:	fb06 f608 	mul.w	r6, r6, r8
 23ee4e6:	1970      	adds	r0, r6, r5
 23ee4e8:	49c5      	ldr	r1, [pc, #788]	; (23ee800 <_Z6OBS_Dov+0x1920>)
 23ee4ea:	4420      	add	r0, r4
 23ee4ec:	f00e fd20 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee4f0:	f640 2398 	movw	r3, #2712	; 0xa98
 23ee4f4:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx].f_obs = Pin_ReadAvg(A5);
 23ee4f6:	200e      	movs	r0, #14
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee4f8:	fb03 6602 	mla	r6, r3, r2, r6
 23ee4fc:	2300      	movs	r3, #0
 23ee4fe:	4426      	add	r6, r4
 23ee500:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = Pin_ReadAvg(A5);
 23ee502:	f7fc f88b 	bl	23ea61c <_Z11Pin_ReadAvgi>
 23ee506:	ed86 0a09 	vstr	s0, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ee50a:	f886 7030 	strb.w	r7, [r6, #48]	; 0x30
 23ee50e:	f108 0801 	add.w	r8, r8, #1
  if (PM25AQI_exists) {
 23ee512:	4bbc      	ldr	r3, [pc, #752]	; (23ee804 <_Z6OBS_Dov+0x1924>)
 23ee514:	781b      	ldrb	r3, [r3, #0]
 23ee516:	2b00      	cmp	r3, #0
 23ee518:	f000 8087 	beq.w	23ee62a <_Z6OBS_Dov+0x174a>
    strcpy (obs[oidx].sensor[sidx].id, "pm1s10");
 23ee51c:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx].type = I_OBS;
 23ee520:	f640 2698 	movw	r6, #2712	; 0xa98
 23ee524:	f04f 0b01 	mov.w	fp, #1
 23ee528:	fb0a f708 	mul.w	r7, sl, r8
    strcpy (obs[oidx].sensor[sidx].id, "pm1s10");
 23ee52c:	19e8      	adds	r0, r5, r7
 23ee52e:	49b6      	ldr	r1, [pc, #728]	; (23ee808 <_Z6OBS_Dov+0x1928>)
 23ee530:	4420      	add	r0, r4
 23ee532:	f00e fcfd 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23ee536:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s10;
 23ee538:	f8df 9320 	ldr.w	r9, [pc, #800]	; 23ee85c <_Z6OBS_Dov+0x197c>
    obs[oidx].sensor[sidx].type = I_OBS;
 23ee53c:	435e      	muls	r6, r3
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
 23ee53e:	eb07 000a 	add.w	r0, r7, sl
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s10;
 23ee542:	f8b9 3000 	ldrh.w	r3, [r9]
    obs[oidx].sensor[sidx].type = I_OBS;
 23ee546:	19ba      	adds	r2, r7, r6
 23ee548:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
 23ee54a:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s10;
 23ee54c:	6293      	str	r3, [r2, #40]	; 0x28
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
 23ee54e:	49af      	ldr	r1, [pc, #700]	; (23ee80c <_Z6OBS_Dov+0x192c>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ee550:	eb08 030b 	add.w	r3, r8, fp
    obs[oidx].sensor[sidx].type = I_OBS;
 23ee554:	f8c2 b020 	str.w	fp, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ee558:	f882 b030 	strb.w	fp, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
 23ee55c:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ee55e:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
 23ee560:	f00e fce6 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23ee564:	9b01      	ldr	r3, [sp, #4]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s25;
 23ee566:	f8b9 2002 	ldrh.w	r2, [r9, #2]
    obs[oidx].sensor[sidx].type = I_OBS;
 23ee56a:	fb0a 6303 	mla	r3, sl, r3, r6
    strcpy (obs[oidx].sensor[sidx].id, "pm1s100");
 23ee56e:	f107 0038 	add.w	r0, r7, #56	; 0x38
    obs[oidx].sensor[sidx].type = I_OBS;
 23ee572:	4423      	add	r3, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1s100");
 23ee574:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s25;
 23ee576:	629a      	str	r2, [r3, #40]	; 0x28
    strcpy (obs[oidx].sensor[sidx].id, "pm1s100");
 23ee578:	49a5      	ldr	r1, [pc, #660]	; (23ee810 <_Z6OBS_Dov+0x1930>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ee57a:	f108 0202 	add.w	r2, r8, #2
    obs[oidx].sensor[sidx].type = I_OBS;
 23ee57e:	f8c3 b020 	str.w	fp, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ee582:	f883 b030 	strb.w	fp, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1s100");
 23ee586:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ee588:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1s100");
 23ee58a:	f00e fcd1 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23ee58e:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s100;
 23ee590:	f8b9 3004 	ldrh.w	r3, [r9, #4]
    obs[oidx].sensor[sidx].type = I_OBS;
 23ee594:	fb0a 6202 	mla	r2, sl, r2, r6
    strcpy (obs[oidx].sensor[sidx].id, "pm1e10");
 23ee598:	f107 0054 	add.w	r0, r7, #84	; 0x54
    obs[oidx].sensor[sidx].type = I_OBS;
 23ee59c:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1e10");
 23ee59e:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s100;
 23ee5a0:	6293      	str	r3, [r2, #40]	; 0x28
    strcpy (obs[oidx].sensor[sidx].id, "pm1e10");
 23ee5a2:	499c      	ldr	r1, [pc, #624]	; (23ee814 <_Z6OBS_Dov+0x1934>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ee5a4:	f108 0303 	add.w	r3, r8, #3
    obs[oidx].sensor[sidx].type = I_OBS;
 23ee5a8:	f8c2 b020 	str.w	fp, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ee5ac:	f882 b030 	strb.w	fp, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1e10");
 23ee5b0:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ee5b2:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1e10");
 23ee5b4:	f00e fcbc 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23ee5b8:	9b01      	ldr	r3, [sp, #4]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e10;
 23ee5ba:	f8b9 2006 	ldrh.w	r2, [r9, #6]
    obs[oidx].sensor[sidx].type = I_OBS;
 23ee5be:	fb0a 6303 	mla	r3, sl, r3, r6
    strcpy (obs[oidx].sensor[sidx].id, "pm1e25");
 23ee5c2:	f107 0070 	add.w	r0, r7, #112	; 0x70
    obs[oidx].sensor[sidx].type = I_OBS;
 23ee5c6:	4423      	add	r3, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1e25");
 23ee5c8:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e10;
 23ee5ca:	629a      	str	r2, [r3, #40]	; 0x28
    strcpy (obs[oidx].sensor[sidx].id, "pm1e25");
 23ee5cc:	4992      	ldr	r1, [pc, #584]	; (23ee818 <_Z6OBS_Dov+0x1938>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ee5ce:	f108 0204 	add.w	r2, r8, #4
    obs[oidx].sensor[sidx].type = I_OBS;
 23ee5d2:	f8c3 b020 	str.w	fp, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ee5d6:	f883 b030 	strb.w	fp, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1e25");
 23ee5da:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ee5dc:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1e25");
 23ee5de:	f00e fca7 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23ee5e2:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e25;
 23ee5e4:	f8b9 3008 	ldrh.w	r3, [r9, #8]
    obs[oidx].sensor[sidx].type = I_OBS;
 23ee5e8:	fb0a 6202 	mla	r2, sl, r2, r6
    strcpy (obs[oidx].sensor[sidx].id, "pm1e100");
 23ee5ec:	f107 008c 	add.w	r0, r7, #140	; 0x8c
    obs[oidx].sensor[sidx].type = I_OBS;
 23ee5f0:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1e100");
 23ee5f2:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e25;
 23ee5f4:	6293      	str	r3, [r2, #40]	; 0x28
    strcpy (obs[oidx].sensor[sidx].id, "pm1e100");
 23ee5f6:	4989      	ldr	r1, [pc, #548]	; (23ee81c <_Z6OBS_Dov+0x193c>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ee5f8:	f108 0305 	add.w	r3, r8, #5
    obs[oidx].sensor[sidx].type = I_OBS;
 23ee5fc:	f8c2 b020 	str.w	fp, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ee600:	f882 b030 	strb.w	fp, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1e100");
 23ee604:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ee606:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1e100");
 23ee608:	f00e fc92 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23ee60c:	9b01      	ldr	r3, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23ee60e:	f108 0806 	add.w	r8, r8, #6
    obs[oidx].sensor[sidx].type = I_OBS;
 23ee612:	fb0a 6603 	mla	r6, sl, r3, r6
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e100;
 23ee616:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    obs[oidx].sensor[sidx].type = I_OBS;
 23ee61a:	4426      	add	r6, r4
 23ee61c:	f8c6 b020 	str.w	fp, [r6, #32]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e100;
 23ee620:	62b3      	str	r3, [r6, #40]	; 0x28
    obs[oidx].sensor[sidx++].inuse = true;
 23ee622:	f886 b030 	strb.w	fp, [r6, #48]	; 0x30
    pm25aqi_clear();
 23ee626:	f7fb fd15 	bl	23ea054 <_Z13pm25aqi_clearv>
  if (HI_exists) {
 23ee62a:	4b7d      	ldr	r3, [pc, #500]	; (23ee820 <_Z6OBS_Dov+0x1940>)
 23ee62c:	781b      	ldrb	r3, [r3, #0]
 23ee62e:	2b00      	cmp	r3, #0
 23ee630:	f000 83b1 	beq.w	23eed96 <_Z6OBS_Dov+0x1eb6>
    strcpy (obs[oidx].sensor[sidx].id, "hi");
 23ee634:	261c      	movs	r6, #28
    heat_index = hi_calculate(sht1_temp, sht1_humid);
 23ee636:	eef0 0a69 	vmov.f32	s1, s19
 23ee63a:	eeb0 0a48 	vmov.f32	s0, s16
 23ee63e:	f7fb f91f 	bl	23e9880 <_Z12hi_calculateff>
    strcpy (obs[oidx].sensor[sidx].id, "hi");
 23ee642:	fb06 f608 	mul.w	r6, r6, r8
 23ee646:	1970      	adds	r0, r6, r5
 23ee648:	4976      	ldr	r1, [pc, #472]	; (23ee824 <_Z6OBS_Dov+0x1944>)
 23ee64a:	4420      	add	r0, r4
    heat_index = hi_calculate(sht1_temp, sht1_humid);
 23ee64c:	ee10 7a10 	vmov	r7, s0
    strcpy (obs[oidx].sensor[sidx].id, "hi");
 23ee650:	f00e fc6e 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee654:	f640 2398 	movw	r3, #2712	; 0xa98
 23ee658:	9a00      	ldr	r2, [sp, #0]
 23ee65a:	fb03 6302 	mla	r3, r3, r2, r6
 23ee65e:	2200      	movs	r2, #0
 23ee660:	4423      	add	r3, r4
 23ee662:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;    
 23ee664:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = (float) heat_index;
 23ee666:	625f      	str	r7, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;    
 23ee668:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23ee66c:	4490      	add	r8, r2
  if (WBT_exists) {
 23ee66e:	4b6e      	ldr	r3, [pc, #440]	; (23ee828 <_Z6OBS_Dov+0x1948>)
 23ee670:	781b      	ldrb	r3, [r3, #0]
 23ee672:	2b00      	cmp	r3, #0
 23ee674:	f000 8391 	beq.w	23eed9a <_Z6OBS_Dov+0x1eba>
    wetbulb_temp = wbt_calculate(sht1_temp, sht1_humid);
 23ee678:	ee19 0a90 	vmov	r0, s19
 23ee67c:	f7f8 fa3c 	bl	23e6af8 <__aeabi_f2d>
 23ee680:	ec41 0b19 	vmov	d9, r0, r1
 23ee684:	ee18 0a10 	vmov	r0, s16
 23ee688:	f7f8 fa36 	bl	23e6af8 <__aeabi_f2d>
 23ee68c:	eeb0 1a49 	vmov.f32	s2, s18
 23ee690:	eef0 1a69 	vmov.f32	s3, s19
 23ee694:	ec41 0b10 	vmov	d0, r0, r1
 23ee698:	f7fb f80a 	bl	23e96b0 <_Z13wbt_calculatedd>
    strcpy (obs[oidx].sensor[sidx].id, "wbt");
 23ee69c:	261c      	movs	r6, #28
    wetbulb_temp = wbt_calculate(sht1_temp, sht1_humid);
 23ee69e:	ec51 0b10 	vmov	r0, r1, d0
 23ee6a2:	f7f8 fd79 	bl	23e7198 <__aeabi_d2f>
    strcpy (obs[oidx].sensor[sidx].id, "wbt");
 23ee6a6:	fb06 f608 	mul.w	r6, r6, r8
    wetbulb_temp = wbt_calculate(sht1_temp, sht1_humid);
 23ee6aa:	4681      	mov	r9, r0
    strcpy (obs[oidx].sensor[sidx].id, "wbt");
 23ee6ac:	1970      	adds	r0, r6, r5
 23ee6ae:	4420      	add	r0, r4
 23ee6b0:	495e      	ldr	r1, [pc, #376]	; (23ee82c <_Z6OBS_Dov+0x194c>)
 23ee6b2:	f00e fc3d 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee6b6:	f640 2398 	movw	r3, #2712	; 0xa98
 23ee6ba:	9a00      	ldr	r2, [sp, #0]
 23ee6bc:	fb03 6602 	mla	r6, r3, r2, r6
 23ee6c0:	2300      	movs	r3, #0
 23ee6c2:	4434      	add	r4, r6
 23ee6c4:	6223      	str	r3, [r4, #32]
    obs[oidx].sensor[sidx++].inuse = true;  
 23ee6c6:	2301      	movs	r3, #1
    obs[oidx].sensor[sidx].f_obs = (float) wetbulb_temp;
 23ee6c8:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;  
 23ee6cc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 23ee6d0:	4498      	add	r8, r3
  if (WBGT_exists) {
 23ee6d2:	4b57      	ldr	r3, [pc, #348]	; (23ee830 <_Z6OBS_Dov+0x1950>)
 23ee6d4:	4c57      	ldr	r4, [pc, #348]	; (23ee834 <_Z6OBS_Dov+0x1954>)
 23ee6d6:	781b      	ldrb	r3, [r3, #0]
 23ee6d8:	2b00      	cmp	r3, #0
 23ee6da:	d039      	beq.n	23ee750 <_Z6OBS_Dov+0x1870>
    if (MCP_3_exists) {
 23ee6dc:	4b56      	ldr	r3, [pc, #344]	; (23ee838 <_Z6OBS_Dov+0x1958>)
 23ee6de:	781b      	ldrb	r3, [r3, #0]
 23ee6e0:	2b00      	cmp	r3, #0
 23ee6e2:	f000 835d 	beq.w	23eeda0 <_Z6OBS_Dov+0x1ec0>
      wbgt = wbgt_using_wbt(sht1_temp, mcp3_temp, wetbulb_temp); // TempAir, TempGlobe, TempWetBulb
 23ee6e6:	4648      	mov	r0, r9
 23ee6e8:	f7f8 fa06 	bl	23e6af8 <__aeabi_f2d>
 23ee6ec:	ec41 0b1a 	vmov	d10, r0, r1
 23ee6f0:	ee18 0a90 	vmov	r0, s17
 23ee6f4:	f7f8 fa00 	bl	23e6af8 <__aeabi_f2d>
 23ee6f8:	ec41 0b19 	vmov	d9, r0, r1
 23ee6fc:	ee18 0a10 	vmov	r0, s16
 23ee700:	f7f8 f9fa 	bl	23e6af8 <__aeabi_f2d>
 23ee704:	eeb0 2a4a 	vmov.f32	s4, s20
 23ee708:	eef0 2a6a 	vmov.f32	s5, s21
 23ee70c:	eeb0 1a49 	vmov.f32	s2, s18
 23ee710:	eef0 1a69 	vmov.f32	s3, s19
 23ee714:	ec41 0b10 	vmov	d0, r0, r1
 23ee718:	f7fb fade 	bl	23e9cd8 <_Z14wbgt_using_wbtddd>
    strcpy (obs[oidx].sensor[sidx].id, "wbgt");
 23ee71c:	261c      	movs	r6, #28
      wbgt = wbgt_using_hi(heat_index);
 23ee71e:	ec51 0b10 	vmov	r0, r1, d0
 23ee722:	f7f8 fd39 	bl	23e7198 <__aeabi_d2f>
    strcpy (obs[oidx].sensor[sidx].id, "wbgt");
 23ee726:	fb06 f608 	mul.w	r6, r6, r8
      wbgt = wbgt_using_hi(heat_index);
 23ee72a:	4607      	mov	r7, r0
    strcpy (obs[oidx].sensor[sidx].id, "wbgt");
 23ee72c:	1970      	adds	r0, r6, r5
 23ee72e:	4943      	ldr	r1, [pc, #268]	; (23ee83c <_Z6OBS_Dov+0x195c>)
 23ee730:	4420      	add	r0, r4
 23ee732:	f00e fbfd 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee736:	f640 2398 	movw	r3, #2712	; 0xa98
 23ee73a:	9a00      	ldr	r2, [sp, #0]
 23ee73c:	fb03 6302 	mla	r3, r3, r2, r6
 23ee740:	2200      	movs	r2, #0
 23ee742:	4423      	add	r3, r4
 23ee744:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;    
 23ee746:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = (float) wbgt;
 23ee748:	625f      	str	r7, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;    
 23ee74a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23ee74e:	4490      	add	r8, r2
  if (TLW_exists) {
 23ee750:	4b3b      	ldr	r3, [pc, #236]	; (23ee840 <_Z6OBS_Dov+0x1960>)
 23ee752:	781b      	ldrb	r3, [r3, #0]
 23ee754:	2b00      	cmp	r3, #0
 23ee756:	f000 808c 	beq.w	23ee872 <_Z6OBS_Dov+0x1992>
    tlw.newReading();
 23ee75a:	483a      	ldr	r0, [pc, #232]	; (23ee844 <_Z6OBS_Dov+0x1964>)
 23ee75c:	f006 f99a 	bl	23f4a94 <_ZN8LeafSens10newReadingEv>
    delay(100);
 23ee760:	2064      	movs	r0, #100	; 0x64
 23ee762:	f009 fddb 	bl	23f831c <delay>
    float w = tlw.getWet();
 23ee766:	4837      	ldr	r0, [pc, #220]	; (23ee844 <_Z6OBS_Dov+0x1964>)
 23ee768:	f006 f9aa 	bl	23f4ac0 <_ZN8LeafSens6getWetEv>
    float t = tlw.getTemp();
 23ee76c:	4835      	ldr	r0, [pc, #212]	; (23ee844 <_Z6OBS_Dov+0x1964>)
    float w = tlw.getWet();
 23ee76e:	eef0 8a40 	vmov.f32	s17, s0
    float t = tlw.getTemp();
 23ee772:	f006 f9b7 	bl	23f4ae4 <_ZN8LeafSens7getTempEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ee776:	eeb4 0a40 	vcmp.f32	s0, s0
 23ee77a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee77e:	f180 8317 	bvs.w	23eedb0 <_Z6OBS_Dov+0x1ed0>
 23ee782:	eddf 7a31 	vldr	s15, [pc, #196]	; 23ee848 <_Z6OBS_Dov+0x1968>
 23ee786:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ee78a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee78e:	f100 830f 	bmi.w	23eedb0 <_Z6OBS_Dov+0x1ed0>
 23ee792:	eddf 7a2e 	vldr	s15, [pc, #184]	; 23ee84c <_Z6OBS_Dov+0x196c>
 23ee796:	eeb4 0a67 	vcmp.f32	s0, s15
 23ee79a:	eddf 7a2d 	vldr	s15, [pc, #180]	; 23ee850 <_Z6OBS_Dov+0x1970>
 23ee79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee7a2:	fe37 8a80 	vselgt.f32	s16, s15, s0
    strcpy (obs[oidx].sensor[sidx].id, "tlww");
 23ee7a6:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee7aa:	f640 2698 	movw	r6, #2712	; 0xa98
 23ee7ae:	f04f 0900 	mov.w	r9, #0
    obs[oidx].sensor[sidx++].inuse = true; 
 23ee7b2:	2701      	movs	r7, #1
 23ee7b4:	fb0a f208 	mul.w	r2, sl, r8
    strcpy (obs[oidx].sensor[sidx].id, "tlww");
 23ee7b8:	18a8      	adds	r0, r5, r2
 23ee7ba:	4926      	ldr	r1, [pc, #152]	; (23ee854 <_Z6OBS_Dov+0x1974>)
 23ee7bc:	4420      	add	r0, r4
 23ee7be:	9201      	str	r2, [sp, #4]
 23ee7c0:	f00e fbb6 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee7c4:	9b00      	ldr	r3, [sp, #0]
 23ee7c6:	9a01      	ldr	r2, [sp, #4]
 23ee7c8:	435e      	muls	r6, r3
    strcpy (obs[oidx].sensor[sidx].id, "tlwt");
 23ee7ca:	eb02 000a 	add.w	r0, r2, sl
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee7ce:	1993      	adds	r3, r2, r6
 23ee7d0:	4423      	add	r3, r4
    strcpy (obs[oidx].sensor[sidx].id, "tlwt");
 23ee7d2:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = (float) w;
 23ee7d4:	edc3 8a09 	vstr	s17, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee7d8:	f8c3 9020 	str.w	r9, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true; 
 23ee7dc:	f108 0b01 	add.w	fp, r8, #1
 23ee7e0:	f883 7030 	strb.w	r7, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tlwt");
 23ee7e4:	491c      	ldr	r1, [pc, #112]	; (23ee858 <_Z6OBS_Dov+0x1978>)
 23ee7e6:	4420      	add	r0, r4
 23ee7e8:	f00e fba2 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee7ec:	fb0a 630b 	mla	r3, sl, fp, r6
 23ee7f0:	e036      	b.n	23ee860 <_Z6OBS_Dov+0x1980>
 23ee7f2:	bf00      	nop
 23ee7f4:	1006a2f4 	.word	0x1006a2f4
 23ee7f8:	023fe55c 	.word	0x023fe55c
 23ee7fc:	1006a2f8 	.word	0x1006a2f8
 23ee800:	023fe56e 	.word	0x023fe56e
 23ee804:	1006a364 	.word	0x1006a364
 23ee808:	023fe572 	.word	0x023fe572
 23ee80c:	023fe579 	.word	0x023fe579
 23ee810:	023fe580 	.word	0x023fe580
 23ee814:	023fe588 	.word	0x023fe588
 23ee818:	023fe58f 	.word	0x023fe58f
 23ee81c:	023fe596 	.word	0x023fe596
 23ee820:	1006a347 	.word	0x1006a347
 23ee824:	023fe59e 	.word	0x023fe59e
 23ee828:	1006a83a 	.word	0x1006a83a
 23ee82c:	023fe5a1 	.word	0x023fe5a1
 23ee830:	1006a839 	.word	0x1006a839
 23ee834:	1006f558 	.word	0x1006f558
 23ee838:	1006a362 	.word	0x1006a362
 23ee83c:	023fe5a5 	.word	0x023fe5a5
 23ee840:	1006a834 	.word	0x1006a834
 23ee844:	1007ac0c 	.word	0x1007ac0c
 23ee848:	c2200000 	.word	0xc2200000
 23ee84c:	42700000 	.word	0x42700000
 23ee850:	c479f99a 	.word	0xc479f99a
 23ee854:	023fe5aa 	.word	0x023fe5aa
 23ee858:	023fe5af 	.word	0x023fe5af
 23ee85c:	1007aa2c 	.word	0x1007aa2c
 23ee860:	4423      	add	r3, r4
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23ee862:	ed83 8a09 	vstr	s16, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee866:	f8c3 9020 	str.w	r9, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ee86a:	f108 0802 	add.w	r8, r8, #2
 23ee86e:	f883 7030 	strb.w	r7, [r3, #48]	; 0x30
  if (TSM_exists) {
 23ee872:	4bd9      	ldr	r3, [pc, #868]	; (23eebd8 <_Z6OBS_Dov+0x1cf8>)
 23ee874:	781b      	ldrb	r3, [r3, #0]
 23ee876:	2b00      	cmp	r3, #0
 23ee878:	d07f      	beq.n	23ee97a <_Z6OBS_Dov+0x1a9a>
    tsm.newReading();
 23ee87a:	48d8      	ldr	r0, [pc, #864]	; (23eebdc <_Z6OBS_Dov+0x1cfc>)
 23ee87c:	f008 fcff 	bl	23f727e <_ZN5SVCS310newReadingEv>
    delay(100);
 23ee880:	2064      	movs	r0, #100	; 0x64
 23ee882:	f009 fd4b 	bl	23f831c <delay>
    float e25 = tsm.getE25();
 23ee886:	48d5      	ldr	r0, [pc, #852]	; (23eebdc <_Z6OBS_Dov+0x1cfc>)
 23ee888:	f008 fd10 	bl	23f72ac <_ZN5SVCS36getE25Ev>
    float ec = tsm.getEC();
 23ee88c:	48d3      	ldr	r0, [pc, #844]	; (23eebdc <_Z6OBS_Dov+0x1cfc>)
    float e25 = tsm.getE25();
 23ee88e:	eef0 9a40 	vmov.f32	s19, s0
    float ec = tsm.getEC();
 23ee892:	f008 fd1d 	bl	23f72d0 <_ZN5SVCS35getECEv>
    float vwc = tsm.getVWC();
 23ee896:	48d1      	ldr	r0, [pc, #836]	; (23eebdc <_Z6OBS_Dov+0x1cfc>)
    float ec = tsm.getEC();
 23ee898:	eeb0 9a40 	vmov.f32	s18, s0
    float vwc = tsm.getVWC();
 23ee89c:	f008 fd3c 	bl	23f7318 <_ZN5SVCS36getVWCEv>
    float t = tsm.getTemp();
 23ee8a0:	48ce      	ldr	r0, [pc, #824]	; (23eebdc <_Z6OBS_Dov+0x1cfc>)
    float vwc = tsm.getVWC();
 23ee8a2:	eef0 8a40 	vmov.f32	s17, s0
    float t = tsm.getTemp();
 23ee8a6:	f008 fd25 	bl	23f72f4 <_ZN5SVCS37getTempEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ee8aa:	eeb4 0a40 	vcmp.f32	s0, s0
 23ee8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee8b2:	f180 8280 	bvs.w	23eedb6 <_Z6OBS_Dov+0x1ed6>
 23ee8b6:	eddf 7aca 	vldr	s15, [pc, #808]	; 23eebe0 <_Z6OBS_Dov+0x1d00>
 23ee8ba:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ee8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee8c2:	f100 8278 	bmi.w	23eedb6 <_Z6OBS_Dov+0x1ed6>
 23ee8c6:	eddf 7ac7 	vldr	s15, [pc, #796]	; 23eebe4 <_Z6OBS_Dov+0x1d04>
 23ee8ca:	eeb4 0a67 	vcmp.f32	s0, s15
 23ee8ce:	eddf 7ac6 	vldr	s15, [pc, #792]	; 23eebe8 <_Z6OBS_Dov+0x1d08>
 23ee8d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee8d6:	fe37 8a80 	vselgt.f32	s16, s15, s0
    strcpy (obs[oidx].sensor[sidx].id, "tsme25");
 23ee8da:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee8de:	f640 2698 	movw	r6, #2712	; 0xa98
 23ee8e2:	fb0a f908 	mul.w	r9, sl, r8
    strcpy (obs[oidx].sensor[sidx].id, "tsme25");
 23ee8e6:	eb05 0009 	add.w	r0, r5, r9
 23ee8ea:	49c0      	ldr	r1, [pc, #768]	; (23eebec <_Z6OBS_Dov+0x1d0c>)
 23ee8ec:	4420      	add	r0, r4
 23ee8ee:	f00e fb1f 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee8f2:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ee8f4:	2701      	movs	r7, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee8f6:	435e      	muls	r6, r3
 23ee8f8:	2300      	movs	r3, #0
 23ee8fa:	eb09 0206 	add.w	r2, r9, r6
    strcpy (obs[oidx].sensor[sidx].id, "tsmec");
 23ee8fe:	eb09 000a 	add.w	r0, r9, sl
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee902:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "tsmec");
 23ee904:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee906:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = (float) e25;
 23ee908:	edc2 9a09 	vstr	s19, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "tsmec");
 23ee90c:	49b8      	ldr	r1, [pc, #736]	; (23eebf0 <_Z6OBS_Dov+0x1d10>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ee90e:	f882 7030 	strb.w	r7, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tsmec");
 23ee912:	4420      	add	r0, r4
 23ee914:	f00e fb0c 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee918:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ee91a:	f108 0b01 	add.w	fp, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee91e:	fb0a 620b 	mla	r2, sl, fp, r6
    strcpy (obs[oidx].sensor[sidx].id, "tsmvwc");
 23ee922:	f109 0038 	add.w	r0, r9, #56	; 0x38
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee926:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "tsmvwc");
 23ee928:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee92a:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = (float) ec;
 23ee92c:	ed82 9a09 	vstr	s18, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "tsmvwc");
 23ee930:	49b0      	ldr	r1, [pc, #704]	; (23eebf4 <_Z6OBS_Dov+0x1d14>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ee932:	f882 7030 	strb.w	r7, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tsmvwc");
 23ee936:	4420      	add	r0, r4
 23ee938:	f00e fafa 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee93c:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ee93e:	f108 0b02 	add.w	fp, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee942:	fb0a 620b 	mla	r2, sl, fp, r6
    obs[oidx].sensor[sidx++].inuse = true; 
 23ee946:	f108 0b03 	add.w	fp, r8, #3
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee94a:	fb0a 660b 	mla	r6, sl, fp, r6
    strcpy (obs[oidx].sensor[sidx].id, "tsmt");
 23ee94e:	f109 0054 	add.w	r0, r9, #84	; 0x54
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee952:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "tsmt");
 23ee954:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee956:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = (float) vwc;
 23ee958:	edc2 8a09 	vstr	s17, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "tsmt");
 23ee95c:	49a6      	ldr	r1, [pc, #664]	; (23eebf8 <_Z6OBS_Dov+0x1d18>)
    obs[oidx].sensor[sidx++].inuse = true; 
 23ee95e:	f882 7030 	strb.w	r7, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tsmt");
 23ee962:	4420      	add	r0, r4
 23ee964:	f00e fae4 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee968:	4426      	add	r6, r4
 23ee96a:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23ee96c:	ed86 8a09 	vstr	s16, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee970:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ee972:	f108 0804 	add.w	r8, r8, #4
 23ee976:	f886 7030 	strb.w	r7, [r6, #48]	; 0x30
  if (TMSM_exists) {
 23ee97a:	4ba0      	ldr	r3, [pc, #640]	; (23eebfc <_Z6OBS_Dov+0x1d1c>)
 23ee97c:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 23eec30 <_Z6OBS_Dov+0x1d50>
 23ee980:	781a      	ldrb	r2, [r3, #0]
 23ee982:	2a00      	cmp	r2, #0
 23ee984:	f000 80c4 	beq.w	23eeb10 <_Z6OBS_Dov+0x1c30>
    tmsm.newReading();
 23ee988:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee98c:	f640 2798 	movw	r7, #2712	; 0xa98
 23ee990:	fb0a f608 	mul.w	r6, sl, r8
    tmsm.newReading();
 23ee994:	489a      	ldr	r0, [pc, #616]	; (23eec00 <_Z6OBS_Dov+0x1d20>)
 23ee996:	f008 fd0c 	bl	23f73b2 <_ZN7SVMULTI10newReadingEv>
    delay(100);
 23ee99a:	2064      	movs	r0, #100	; 0x64
 23ee99c:	f009 fcbe 	bl	23f831c <delay>
    tmsm.getData(&multi);
 23ee9a0:	4897      	ldr	r0, [pc, #604]	; (23eec00 <_Z6OBS_Dov+0x1d20>)
 23ee9a2:	a90c      	add	r1, sp, #48	; 0x30
 23ee9a4:	f008 fd40 	bl	23f7428 <_ZN7SVMULTI7getDataEP10soil_ret_t>
    strcpy (obs[oidx].sensor[sidx].id, "tmsms1");
 23ee9a8:	19a8      	adds	r0, r5, r6
 23ee9aa:	4996      	ldr	r1, [pc, #600]	; (23eec04 <_Z6OBS_Dov+0x1d24>)
 23ee9ac:	4420      	add	r0, r4
 23ee9ae:	f00e fabf 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee9b2:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ee9b4:	f04f 0b01 	mov.w	fp, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee9b8:	435f      	muls	r7, r3
 23ee9ba:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[0];
 23ee9bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee9be:	19f1      	adds	r1, r6, r7
    strcpy (obs[oidx].sensor[sidx].id, "tmsms2");
 23ee9c0:	eb06 000a 	add.w	r0, r6, sl
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee9c4:	4421      	add	r1, r4
    strcpy (obs[oidx].sensor[sidx].id, "tmsms2");
 23ee9c6:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee9c8:	620b      	str	r3, [r1, #32]
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[0];
 23ee9ca:	624a      	str	r2, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ee9cc:	f881 b030 	strb.w	fp, [r1, #48]	; 0x30
 23ee9d0:	f108 0201 	add.w	r2, r8, #1
    strcpy (obs[oidx].sensor[sidx].id, "tmsms2");
 23ee9d4:	498c      	ldr	r1, [pc, #560]	; (23eec08 <_Z6OBS_Dov+0x1d28>)
 23ee9d6:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ee9d8:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms2");
 23ee9da:	f00e faa9 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee9de:	2300      	movs	r3, #0
 23ee9e0:	9a01      	ldr	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms3");
 23ee9e2:	f106 0038 	add.w	r0, r6, #56	; 0x38
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee9e6:	fb0a 7102 	mla	r1, sl, r2, r7
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[1];
 23ee9ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee9ec:	4421      	add	r1, r4
    strcpy (obs[oidx].sensor[sidx].id, "tmsms3");
 23ee9ee:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23ee9f0:	620b      	str	r3, [r1, #32]
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[1];
 23ee9f2:	624a      	str	r2, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ee9f4:	f881 b030 	strb.w	fp, [r1, #48]	; 0x30
 23ee9f8:	f108 0202 	add.w	r2, r8, #2
    strcpy (obs[oidx].sensor[sidx].id, "tmsms3");
 23ee9fc:	4983      	ldr	r1, [pc, #524]	; (23eec0c <_Z6OBS_Dov+0x1d2c>)
 23ee9fe:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23eea00:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms3");
 23eea02:	f00e fa95 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eea06:	2300      	movs	r3, #0
 23eea08:	9a01      	ldr	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms4");
 23eea0a:	f106 0054 	add.w	r0, r6, #84	; 0x54
    obs[oidx].sensor[sidx].type = F_OBS;
 23eea0e:	fb0a 7102 	mla	r1, sl, r2, r7
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[2];
 23eea12:	9a15      	ldr	r2, [sp, #84]	; 0x54
    obs[oidx].sensor[sidx].type = F_OBS;
 23eea14:	4421      	add	r1, r4
    strcpy (obs[oidx].sensor[sidx].id, "tmsms4");
 23eea16:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23eea18:	620b      	str	r3, [r1, #32]
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[2];
 23eea1a:	624a      	str	r2, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eea1c:	f881 b030 	strb.w	fp, [r1, #48]	; 0x30
 23eea20:	f108 0203 	add.w	r2, r8, #3
    strcpy (obs[oidx].sensor[sidx].id, "tmsms4");
 23eea24:	4420      	add	r0, r4
 23eea26:	497a      	ldr	r1, [pc, #488]	; (23eec10 <_Z6OBS_Dov+0x1d30>)
    obs[oidx].sensor[sidx++].inuse = true;
 23eea28:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms4");
 23eea2a:	f00e fa81 	bl	23fcf30 <strcpy>
    t = multi.temp[0];
 23eea2e:	ed9d 8a0c 	vldr	s16, [sp, #48]	; 0x30
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eea32:	eeb4 8a48 	vcmp.f32	s16, s16
    obs[oidx].sensor[sidx].type = F_OBS;
 23eea36:	2300      	movs	r3, #0
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eea38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    obs[oidx].sensor[sidx].type = F_OBS;
 23eea3c:	9a01      	ldr	r2, [sp, #4]
 23eea3e:	fb0a 7702 	mla	r7, sl, r2, r7
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[3];
 23eea42:	9a16      	ldr	r2, [sp, #88]	; 0x58
    obs[oidx].sensor[sidx].type = F_OBS;
 23eea44:	443c      	add	r4, r7
 23eea46:	6223      	str	r3, [r4, #32]
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[3];
 23eea48:	6262      	str	r2, [r4, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eea4a:	f108 0704 	add.w	r7, r8, #4
 23eea4e:	f884 b030 	strb.w	fp, [r4, #48]	; 0x30
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eea52:	f180 81b3 	bvs.w	23eedbc <_Z6OBS_Dov+0x1edc>
 23eea56:	eddf 7a62 	vldr	s15, [pc, #392]	; 23eebe0 <_Z6OBS_Dov+0x1d00>
 23eea5a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23eea5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eea62:	f100 81ab 	bmi.w	23eedbc <_Z6OBS_Dov+0x1edc>
 23eea66:	eddf 7a5f 	vldr	s15, [pc, #380]	; 23eebe4 <_Z6OBS_Dov+0x1d04>
 23eea6a:	eeb4 8a67 	vcmp.f32	s16, s15
 23eea6e:	eddf 7a5e 	vldr	s15, [pc, #376]	; 23eebe8 <_Z6OBS_Dov+0x1d08>
 23eea72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eea76:	fe37 8a88 	vselgt.f32	s16, s15, s16
    strcpy (obs[oidx].sensor[sidx].id, "tmsmt1");
 23eea7a:	f106 0070 	add.w	r0, r6, #112	; 0x70
 23eea7e:	4428      	add	r0, r5
 23eea80:	4964      	ldr	r1, [pc, #400]	; (23eec14 <_Z6OBS_Dov+0x1d34>)
 23eea82:	4448      	add	r0, r9
 23eea84:	f00e fa54 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eea88:	f640 2298 	movw	r2, #2712	; 0xa98
 23eea8c:	211c      	movs	r1, #28
 23eea8e:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23eea90:	f108 0405 	add.w	r4, r8, #5
    obs[oidx].sensor[sidx].type = F_OBS;
 23eea94:	435a      	muls	r2, r3
 23eea96:	fb01 2207 	mla	r2, r1, r7, r2
 23eea9a:	444a      	add	r2, r9
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23eea9c:	ed82 8a09 	vstr	s16, [r2, #36]	; 0x24
    t = multi.temp[1];
 23eeaa0:	ed9d 8a0d 	vldr	s16, [sp, #52]	; 0x34
    obs[oidx].sensor[sidx].type = F_OBS;
 23eeaa4:	2100      	movs	r1, #0
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eeaa6:	eeb4 8a48 	vcmp.f32	s16, s16
    obs[oidx].sensor[sidx].type = F_OBS;
 23eeaaa:	6211      	str	r1, [r2, #32]
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eeaac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    obs[oidx].sensor[sidx++].inuse = true;
 23eeab0:	f04f 0101 	mov.w	r1, #1
 23eeab4:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eeab8:	f180 8183 	bvs.w	23eedc2 <_Z6OBS_Dov+0x1ee2>
 23eeabc:	eddf 7a48 	vldr	s15, [pc, #288]	; 23eebe0 <_Z6OBS_Dov+0x1d00>
 23eeac0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23eeac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eeac8:	f100 817b 	bmi.w	23eedc2 <_Z6OBS_Dov+0x1ee2>
 23eeacc:	eddf 7a45 	vldr	s15, [pc, #276]	; 23eebe4 <_Z6OBS_Dov+0x1d04>
 23eead0:	eeb4 8a67 	vcmp.f32	s16, s15
 23eead4:	eddf 7a44 	vldr	s15, [pc, #272]	; 23eebe8 <_Z6OBS_Dov+0x1d08>
 23eead8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eeadc:	fe37 8a88 	vselgt.f32	s16, s15, s16
    obs[oidx].sensor[sidx].type = F_OBS;
 23eeae0:	f640 2898 	movw	r8, #2712	; 0xa98
    strcpy (obs[oidx].sensor[sidx].id, "tmsmt2");
 23eeae4:	f106 008c 	add.w	r0, r6, #140	; 0x8c
 23eeae8:	4428      	add	r0, r5
 23eeaea:	494b      	ldr	r1, [pc, #300]	; (23eec18 <_Z6OBS_Dov+0x1d38>)
 23eeaec:	4448      	add	r0, r9
 23eeaee:	f00e fa1f 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eeaf2:	221c      	movs	r2, #28
 23eeaf4:	9b00      	ldr	r3, [sp, #0]
 23eeaf6:	fb08 f803 	mul.w	r8, r8, r3
 23eeafa:	fb02 8804 	mla	r8, r2, r4, r8
 23eeafe:	2200      	movs	r2, #0
 23eeb00:	44c8      	add	r8, r9
 23eeb02:	f8c8 2020 	str.w	r2, [r8, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23eeb06:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23eeb08:	ed88 8a09 	vstr	s16, [r8, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eeb0c:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
  obs[oidx].hth = SystemStatusBits;
 23eeb10:	f640 2298 	movw	r2, #2712	; 0xa98
 23eeb14:	9b00      	ldr	r3, [sp, #0]
  OBS_Log(oidx);
 23eeb16:	9800      	ldr	r0, [sp, #0]
  obs[oidx].hth = SystemStatusBits;
 23eeb18:	fb02 9303 	mla	r3, r2, r3, r9
 23eeb1c:	4a3f      	ldr	r2, [pc, #252]	; (23eec1c <_Z6OBS_Dov+0x1d3c>)
 23eeb1e:	6812      	ldr	r2, [r2, #0]
 23eeb20:	615a      	str	r2, [r3, #20]
  OBS_Log(oidx);
 23eeb22:	f7fd fa2b 	bl	23ebf7c <_Z7OBS_Logi>
  lastOBS = System.millis();
 23eeb26:	f7f9 fc7b 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23eeb2a:	4b3d      	ldr	r3, [pc, #244]	; (23eec20 <_Z6OBS_Dov+0x1d40>)
 23eeb2c:	e9c3 0100 	strd	r0, r1, [r3]
}
 23eeb30:	b019      	add	sp, #100	; 0x64
 23eeb32:	ecbd 8b06 	vpop	{d8-d10}
 23eeb36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    float h = 0.0;
 23eeb3a:	eddf 8a3a 	vldr	s17, [pc, #232]	; 23eec24 <_Z6OBS_Dov+0x1d44>
    float t = 0.0;
 23eeb3e:	eeb0 8a68 	vmov.f32	s16, s17
    float p = 0.0;
 23eeb42:	eef0 9a68 	vmov.f32	s19, s17
 23eeb46:	f7fe bd10 	b.w	23ed56a <_Z6OBS_Dov+0x68a>
      p = bm32.readPressure()/100.0F;       // bp2 hPa
 23eeb4a:	4837      	ldr	r0, [pc, #220]	; (23eec28 <_Z6OBS_Dov+0x1d48>)
 23eeb4c:	f003 faa1 	bl	23f2092 <_ZN15Adafruit_BMP3XX12readPressureEv>
 23eeb50:	eddf 7a36 	vldr	s15, [pc, #216]	; 23eec2c <_Z6OBS_Dov+0x1d4c>
      t = bm32.readTemperature();           // bt2
 23eeb54:	4834      	ldr	r0, [pc, #208]	; (23eec28 <_Z6OBS_Dov+0x1d48>)
      p = bm32.readPressure()/100.0F;       // bp2 hPa
 23eeb56:	eec0 9a27 	vdiv.f32	s19, s0, s15
      t = bm32.readTemperature();           // bt2
 23eeb5a:	f003 fa8f 	bl	23f207c <_ZN15Adafruit_BMP3XX15readTemperatureEv>
 23eeb5e:	f7fe bca3 	b.w	23ed4a8 <_Z6OBS_Dov+0x5c8>
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23eeb62:	eddf 9a21 	vldr	s19, [pc, #132]	; 23eebe8 <_Z6OBS_Dov+0x1d08>
 23eeb66:	f7fe bd27 	b.w	23ed5b8 <_Z6OBS_Dov+0x6d8>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eeb6a:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 23eebe8 <_Z6OBS_Dov+0x1d08>
 23eeb6e:	f7fe bd3b 	b.w	23ed5e8 <_Z6OBS_Dov+0x708>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23eeb72:	eddf 8a1d 	vldr	s17, [pc, #116]	; 23eebe8 <_Z6OBS_Dov+0x1d08>
 23eeb76:	f7fe bd4d 	b.w	23ed614 <_Z6OBS_Dov+0x734>
    obs[oidx].sensor[sidx++].inuse = true;
 23eeb7a:	46b8      	mov	r8, r7
 23eeb7c:	f7fe bd8e 	b.w	23ed69c <_Z6OBS_Dov+0x7bc>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23eeb80:	ed9f 0a19 	vldr	s0, [pc, #100]	; 23eebe8 <_Z6OBS_Dov+0x1d08>
 23eeb84:	f7fe bdb7 	b.w	23ed6f6 <_Z6OBS_Dov+0x816>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eeb88:	ed9f 0a17 	vldr	s0, [pc, #92]	; 23eebe8 <_Z6OBS_Dov+0x1d08>
 23eeb8c:	f7fe bdec 	b.w	23ed768 <_Z6OBS_Dov+0x888>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eeb90:	ed9f 8a15 	vldr	s16, [pc, #84]	; 23eebe8 <_Z6OBS_Dov+0x1d08>
 23eeb94:	f7fe be27 	b.w	23ed7e6 <_Z6OBS_Dov+0x906>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23eeb98:	eddf 9a13 	vldr	s19, [pc, #76]	; 23eebe8 <_Z6OBS_Dov+0x1d08>
 23eeb9c:	f7fe be5a 	b.w	23ed854 <_Z6OBS_Dov+0x974>
  float sht1_temp = 0.0;
 23eeba0:	ed9f 8a20 	vldr	s16, [pc, #128]	; 23eec24 <_Z6OBS_Dov+0x1d44>
  float sht1_humid = 0.0;
 23eeba4:	eef0 9a48 	vmov.f32	s19, s16
 23eeba8:	f7fe be63 	b.w	23ed872 <_Z6OBS_Dov+0x992>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eebac:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 23eebe8 <_Z6OBS_Dov+0x1d08>
 23eebb0:	f7fe bebe 	b.w	23ed930 <_Z6OBS_Dov+0xa50>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23eebb4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 23eebe8 <_Z6OBS_Dov+0x1d08>
 23eebb8:	f7fe bef1 	b.w	23ed99e <_Z6OBS_Dov+0xabe>
      t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eebbc:	464e      	mov	r6, r9
 23eebbe:	4657      	mov	r7, sl
 23eebc0:	f7fe bf32 	b.w	23eda28 <_Z6OBS_Dov+0xb48>
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23eebc4:	a702      	add	r7, pc, #8	; (adr r7, 23eebd0 <_Z6OBS_Dov+0x1cf0>)
 23eebc6:	e9d7 6700 	ldrd	r6, r7, [r7]
 23eebca:	f7fe bf4c 	b.w	23eda66 <_Z6OBS_Dov+0xb86>
 23eebce:	bf00      	nop
 23eebd0:	33333333 	.word	0x33333333
 23eebd4:	c08f3f33 	.word	0xc08f3f33
 23eebd8:	1006a836 	.word	0x1006a836
 23eebdc:	1007ac1c 	.word	0x1007ac1c
 23eebe0:	c2200000 	.word	0xc2200000
 23eebe4:	42700000 	.word	0x42700000
 23eebe8:	c479f99a 	.word	0xc479f99a
 23eebec:	023fe5b4 	.word	0x023fe5b4
 23eebf0:	023fe5bb 	.word	0x023fe5bb
 23eebf4:	023fe5c1 	.word	0x023fe5c1
 23eebf8:	023fe5c8 	.word	0x023fe5c8
 23eebfc:	1006a835 	.word	0x1006a835
 23eec00:	1007ac14 	.word	0x1007ac14
 23eec04:	023fe5cd 	.word	0x023fe5cd
 23eec08:	023fe5d4 	.word	0x023fe5d4
 23eec0c:	023fe5db 	.word	0x023fe5db
 23eec10:	023fe5e2 	.word	0x023fe5e2
 23eec14:	023fe5e9 	.word	0x023fe5e9
 23eec18:	023fe5f0 	.word	0x023fe5f0
 23eec1c:	1006a22c 	.word	0x1006a22c
 23eec20:	1006aed0 	.word	0x1006aed0
 23eec24:	00000000 	.word	0x00000000
 23eec28:	1006aa78 	.word	0x1006aa78
 23eec2c:	42c80000 	.word	0x42c80000
 23eec30:	1006f558 	.word	0x1006f558
      Output ("ERR:HDC1 Read");
 23eec34:	4866      	ldr	r0, [pc, #408]	; (23eedd0 <_Z6OBS_Dov+0x1ef0>)
 23eec36:	f7f9 fe8b 	bl	23e8950 <_Z6OutputPKc>
      SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
 23eec3a:	f8db 3000 	ldr.w	r3, [fp]
 23eec3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23eec42:	f7fe bf16 	b.w	23eda72 <_Z6OBS_Dov+0xb92>
      t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eec46:	464e      	mov	r6, r9
 23eec48:	4657      	mov	r7, sl
 23eec4a:	f7fe bf7f 	b.w	23edb4c <_Z6OBS_Dov+0xc6c>
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23eec4e:	a75e      	add	r7, pc, #376	; (adr r7, 23eedc8 <_Z6OBS_Dov+0x1ee8>)
 23eec50:	e9d7 6700 	ldrd	r6, r7, [r7]
 23eec54:	f7fe bf99 	b.w	23edb8a <_Z6OBS_Dov+0xcaa>
      Output ("ERR:HDC1 Read");
 23eec58:	485d      	ldr	r0, [pc, #372]	; (23eedd0 <_Z6OBS_Dov+0x1ef0>)
 23eec5a:	f7f9 fe79 	bl	23e8950 <_Z6OutputPKc>
      SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
 23eec5e:	f8db 3000 	ldr.w	r3, [fp]
 23eec62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 23eec66:	f7fe bf96 	b.w	23edb96 <_Z6OBS_Dov+0xcb6>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eec6a:	ed9f aa5a 	vldr	s20, [pc, #360]	; 23eedd4 <_Z6OBS_Dov+0x1ef4>
 23eec6e:	f7fe bff2 	b.w	23edc56 <_Z6OBS_Dov+0xd76>
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23eec72:	eddf 8a58 	vldr	s17, [pc, #352]	; 23eedd4 <_Z6OBS_Dov+0x1ef4>
 23eec76:	f7ff b837 	b.w	23edce8 <_Z6OBS_Dov+0xe08>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eec7a:	ed9f aa56 	vldr	s20, [pc, #344]	; 23eedd4 <_Z6OBS_Dov+0x1ef4>
 23eec7e:	f7ff b888 	b.w	23edd92 <_Z6OBS_Dov+0xeb2>
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23eec82:	eddf 8a54 	vldr	s17, [pc, #336]	; 23eedd4 <_Z6OBS_Dov+0x1ef4>
 23eec86:	f7ff b89c 	b.w	23eddc2 <_Z6OBS_Dov+0xee2>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eec8a:	ed9f aa52 	vldr	s20, [pc, #328]	; 23eedd4 <_Z6OBS_Dov+0x1ef4>
 23eec8e:	f7ff b8f0 	b.w	23ede72 <_Z6OBS_Dov+0xf92>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23eec92:	eddf 8a50 	vldr	s17, [pc, #320]	; 23eedd4 <_Z6OBS_Dov+0x1ef4>
 23eec96:	f7ff b904 	b.w	23edea2 <_Z6OBS_Dov+0xfc2>
        SI1145_exists = false;
 23eec9a:	7030      	strb	r0, [r6, #0]
        Output ("SI OFFLINE");
 23eec9c:	484e      	ldr	r0, [pc, #312]	; (23eedd8 <_Z6OBS_Dov+0x1ef8>)
 23eec9e:	f7f9 fe57 	bl	23e8950 <_Z6OutputPKc>
        SystemStatusBits |= SSB_SI1145;  // Turn On Bit    
 23eeca2:	f8db 3000 	ldr.w	r3, [fp]
 23eeca6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 23eecaa:	f8cb 3000 	str.w	r3, [fp]
 23eecae:	f7ff b997 	b.w	23edfe0 <_Z6OBS_Dov+0x1100>
    si_vis = (isnan(si_vis) || (si_vis < QC_MIN_VI)  || (si_vis > QC_MAX_VI)) ? QC_ERR_VI  : si_vis;
 23eecb2:	eddf aa48 	vldr	s21, [pc, #288]	; 23eedd4 <_Z6OBS_Dov+0x1ef4>
 23eecb6:	f7ff b9a9 	b.w	23ee00c <_Z6OBS_Dov+0x112c>
    si_ir  = (isnan(si_ir)  || (si_ir  < QC_MIN_IR)  || (si_ir  > QC_MAX_IR)) ? QC_ERR_IR  : si_ir;
 23eecba:	ed9f aa46 	vldr	s20, [pc, #280]	; 23eedd4 <_Z6OBS_Dov+0x1ef4>
 23eecbe:	f7ff b9b5 	b.w	23ee02c <_Z6OBS_Dov+0x114c>
    si_uv  = (isnan(si_uv)  || (si_uv  < QC_MIN_UV)  || (si_uv  > QC_MAX_UV)) ? QC_ERR_UV  : si_uv;
 23eecc2:	eddf 8a44 	vldr	s17, [pc, #272]	; 23eedd4 <_Z6OBS_Dov+0x1ef4>
 23eecc6:	f7ff b9ff 	b.w	23ee0c8 <_Z6OBS_Dov+0x11e8>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eecca:	ed9f 0a42 	vldr	s0, [pc, #264]	; 23eedd4 <_Z6OBS_Dov+0x1ef4>
 23eecce:	f7ff ba67 	b.w	23ee1a0 <_Z6OBS_Dov+0x12c0>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eecd2:	ed9f 0a40 	vldr	s0, [pc, #256]	; 23eedd4 <_Z6OBS_Dov+0x1ef4>
 23eecd6:	f7ff ba9f 	b.w	23ee218 <_Z6OBS_Dov+0x1338>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eecda:	eddf 8a3e 	vldr	s17, [pc, #248]	; 23eedd4 <_Z6OBS_Dov+0x1ef4>
 23eecde:	f7ff bad9 	b.w	23ee294 <_Z6OBS_Dov+0x13b4>
  float mcp3_temp = 0.0;  // globe temperature
 23eece2:	eddf 8a3e 	vldr	s17, [pc, #248]	; 23eeddc <_Z6OBS_Dov+0x1efc>
 23eece6:	f7ff bae3 	b.w	23ee2b0 <_Z6OBS_Dov+0x13d0>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eecea:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 23eedd4 <_Z6OBS_Dov+0x1ef4>
 23eecee:	f7ff bb0d 	b.w	23ee30c <_Z6OBS_Dov+0x142c>
    lux = (isnan(lux) || (lux < QC_MIN_VLX)  || (lux > QC_MAX_VLX))  ? QC_ERR_VLX  : lux;
 23eecf2:	ed9f aa3b 	vldr	s20, [pc, #236]	; 23eede0 <_Z6OBS_Dov+0x1f00>
 23eecf6:	f7ff bb34 	b.w	23ee362 <_Z6OBS_Dov+0x1482>
    lux = (isnan(lux) || (lux < QC_MIN_BLX)  || (lux > QC_MAX_BLX))  ? QC_ERR_BLX  : lux;
 23eecfa:	ed9f aa36 	vldr	s20, [pc, #216]	; 23eedd4 <_Z6OBS_Dov+0x1ef4>
 23eecfe:	f7ff bb61 	b.w	23ee3c4 <_Z6OBS_Dov+0x14e4>
  else if (A4_State == A4_STATE_RAIN) {
 23eed02:	2b02      	cmp	r3, #2
 23eed04:	f47f abe8 	bne.w	23ee4d8 <_Z6OBS_Dov+0x15f8>
    strcpy (obs[oidx].sensor[sidx].id, "rg2");
 23eed08:	f04f 0b1c 	mov.w	fp, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23eed0c:	f640 2698 	movw	r6, #2712	; 0xa98
 23eed10:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23eed14:	f04f 0901 	mov.w	r9, #1
 23eed18:	fb0b f708 	mul.w	r7, fp, r8
    strcpy (obs[oidx].sensor[sidx].id, "rg2");
 23eed1c:	19e8      	adds	r0, r5, r7
 23eed1e:	4931      	ldr	r1, [pc, #196]	; (23eede4 <_Z6OBS_Dov+0x1f04>)
 23eed20:	4420      	add	r0, r4
 23eed22:	f00e f905 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eed26:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
 23eed28:	eb07 000b 	add.w	r0, r7, fp
    obs[oidx].sensor[sidx].type = F_OBS;
 23eed2c:	435e      	muls	r6, r3
 23eed2e:	19ba      	adds	r2, r7, r6
 23eed30:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
 23eed32:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23eed34:	f108 0301 	add.w	r3, r8, #1
    obs[oidx].sensor[sidx].f_obs = rain2;
 23eed38:	ed82 9a09 	vstr	s18, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
 23eed3c:	492a      	ldr	r1, [pc, #168]	; (23eede8 <_Z6OBS_Dov+0x1f08>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23eed3e:	f8c2 a020 	str.w	sl, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23eed42:	f882 9030 	strb.w	r9, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
 23eed46:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23eed48:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
 23eed4a:	f00e f8f1 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eed4e:	9b01      	ldr	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "rgp2");
 23eed50:	f107 0038 	add.w	r0, r7, #56	; 0x38
    obs[oidx].sensor[sidx].type = F_OBS;
 23eed54:	fb0b 6303 	mla	r3, fp, r3, r6
 23eed58:	18e1      	adds	r1, r4, r3
    obs[oidx].sensor[sidx].f_obs = eeprom.rgt2;
 23eed5a:	4b24      	ldr	r3, [pc, #144]	; (23eedec <_Z6OBS_Dov+0x1f0c>)
    strcpy (obs[oidx].sensor[sidx].id, "rgp2");
 23eed5c:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = eeprom.rgt2;
 23eed5e:	689a      	ldr	r2, [r3, #8]
    obs[oidx].sensor[sidx].type = F_OBS;
 23eed60:	f8c1 a020 	str.w	sl, [r1, #32]
    obs[oidx].sensor[sidx].f_obs = eeprom.rgt2;
 23eed64:	624a      	str	r2, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eed66:	f881 9030 	strb.w	r9, [r1, #48]	; 0x30
 23eed6a:	f108 0202 	add.w	r2, r8, #2
    strcpy (obs[oidx].sensor[sidx].id, "rgp2");
 23eed6e:	4920      	ldr	r1, [pc, #128]	; (23eedf0 <_Z6OBS_Dov+0x1f10>)
 23eed70:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23eed72:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "rgp2");
 23eed74:	f00e f8dc 	bl	23fcf30 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eed78:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx].f_obs = eeprom.rgp2;
 23eed7a:	4b1c      	ldr	r3, [pc, #112]	; (23eedec <_Z6OBS_Dov+0x1f0c>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23eed7c:	fb0b 6602 	mla	r6, fp, r2, r6
    obs[oidx].sensor[sidx].f_obs = eeprom.rgp2;
 23eed80:	68db      	ldr	r3, [r3, #12]
    obs[oidx].sensor[sidx].type = F_OBS;
 23eed82:	4426      	add	r6, r4
 23eed84:	f8c6 a020 	str.w	sl, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = eeprom.rgp2;
 23eed88:	6273      	str	r3, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eed8a:	f108 0803 	add.w	r8, r8, #3
 23eed8e:	f886 9030 	strb.w	r9, [r6, #48]	; 0x30
 23eed92:	f7ff bba1 	b.w	23ee4d8 <_Z6OBS_Dov+0x15f8>
  float heat_index = 0.0;
 23eed96:	2700      	movs	r7, #0
 23eed98:	e469      	b.n	23ee66e <_Z6OBS_Dov+0x178e>
  float wetbulb_temp = 0.0;
 23eed9a:	f04f 0900 	mov.w	r9, #0
 23eed9e:	e498      	b.n	23ee6d2 <_Z6OBS_Dov+0x17f2>
      wbgt = wbgt_using_hi(heat_index);
 23eeda0:	4638      	mov	r0, r7
 23eeda2:	f7f7 fea9 	bl	23e6af8 <__aeabi_f2d>
 23eeda6:	ec41 0b10 	vmov	d0, r0, r1
 23eedaa:	f7fa ff25 	bl	23e9bf8 <_Z13wbgt_using_hid>
 23eedae:	e4b5      	b.n	23ee71c <_Z6OBS_Dov+0x183c>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eedb0:	ed9f 8a08 	vldr	s16, [pc, #32]	; 23eedd4 <_Z6OBS_Dov+0x1ef4>
 23eedb4:	e4f7      	b.n	23ee7a6 <_Z6OBS_Dov+0x18c6>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eedb6:	ed9f 8a07 	vldr	s16, [pc, #28]	; 23eedd4 <_Z6OBS_Dov+0x1ef4>
 23eedba:	e58e      	b.n	23ee8da <_Z6OBS_Dov+0x19fa>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eedbc:	ed9f 8a05 	vldr	s16, [pc, #20]	; 23eedd4 <_Z6OBS_Dov+0x1ef4>
 23eedc0:	e65b      	b.n	23eea7a <_Z6OBS_Dov+0x1b9a>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eedc2:	ed9f 8a04 	vldr	s16, [pc, #16]	; 23eedd4 <_Z6OBS_Dov+0x1ef4>
 23eedc6:	e68b      	b.n	23eeae0 <_Z6OBS_Dov+0x1c00>
 23eedc8:	33333333 	.word	0x33333333
 23eedcc:	c08f3f33 	.word	0xc08f3f33
 23eedd0:	023fe4fe 	.word	0x023fe4fe
 23eedd4:	c479f99a 	.word	0xc479f99a
 23eedd8:	023fd925 	.word	0x023fd925
 23eeddc:	00000000 	.word	0x00000000
 23eede0:	c479c000 	.word	0xc479c000
 23eede4:	023fe560 	.word	0x023fe560
 23eede8:	023fe564 	.word	0x023fe564
 23eedec:	1006ae8c 	.word	0x1006ae8c
 23eedf0:	023fe569 	.word	0x023fe569

023eedf4 <_Z22Output_CellBatteryInfov>:
void Output_CellBatteryInfo() {
 23eedf4:	b530      	push	{r4, r5, lr}
 23eedf6:	ed2d 8b02 	vpush	{d8}
 23eedfa:	b08d      	sub	sp, #52	; 0x34
  CellularSignal sig = Cellular.RSSI();
 23eedfc:	491f      	ldr	r1, [pc, #124]	; (23eee7c <_Z22Output_CellBatteryInfov+0x88>)
 23eedfe:	a804      	add	r0, sp, #16
 23eee00:	f009 fb04 	bl	23f840c <_ZN5spark13CellularClass4RSSIEv>
  float SignalStrength = sig.getStrength();
 23eee04:	a804      	add	r0, sp, #16
 23eee06:	f009 fb5f 	bl	23f84c8 <_ZNK14CellularSignal11getStrengthEv>
 23eee0a:	eeb0 8a40 	vmov.f32	s16, s0
  int BatteryState = System.batteryState();
 23eee0e:	f7fe f859 	bl	23ecec4 <_ZNK11SystemClass12batteryStateEv.isra.0>
  if (BatteryState>0 && BatteryState<6) {
 23eee12:	1e43      	subs	r3, r0, #1
 23eee14:	2b04      	cmp	r3, #4
  int BatteryState = System.batteryState();
 23eee16:	4604      	mov	r4, r0
  if (BatteryState>0 && BatteryState<6) {
 23eee18:	d82d      	bhi.n	23eee76 <_Z22Output_CellBatteryInfov+0x82>
    BatteryPoC = System.batteryCharge();
 23eee1a:	f7fe f841 	bl	23ecea0 <_ZNK11SystemClass13batteryChargeEv.isra.0>
    (int)SignalStrength, (int)(SignalStrength*100)%100,
 23eee1e:	eddf 7a18 	vldr	s15, [pc, #96]	; 23eee80 <_Z22Output_CellBatteryInfov+0x8c>
 23eee22:	ee28 7a27 	vmul.f32	s14, s16, s15
    BatteryState, (int)BatteryPoC, (int)(BatteryPoC*100)%100);
 23eee26:	ee60 7a27 	vmul.f32	s15, s0, s15
 23eee2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    (int)SignalStrength, (int)(SignalStrength*100)%100,
 23eee2e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  sprintf (Buffer32Bytes, "CS:%d.%02d B:%d,%d.%02d", 
 23eee32:	2164      	movs	r1, #100	; 0x64
    BatteryState, (int)BatteryPoC, (int)(BatteryPoC*100)%100);
 23eee34:	ee17 2a90 	vmov	r2, s15
    (int)SignalStrength, (int)(SignalStrength*100)%100,
 23eee38:	ee17 3a10 	vmov	r3, s14
  sprintf (Buffer32Bytes, "CS:%d.%02d B:%d,%d.%02d", 
 23eee3c:	fb92 f5f1 	sdiv	r5, r2, r1
 23eee40:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 23eee44:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 23eee48:	fb93 f0f1 	sdiv	r0, r3, r1
 23eee4c:	fb01 2215 	mls	r2, r1, r5, r2
 23eee50:	fb01 3310 	mls	r3, r1, r0, r3
 23eee54:	ed8d 0a01 	vstr	s0, [sp, #4]
 23eee58:	490a      	ldr	r1, [pc, #40]	; (23eee84 <_Z22Output_CellBatteryInfov+0x90>)
 23eee5a:	9202      	str	r2, [sp, #8]
 23eee5c:	9400      	str	r4, [sp, #0]
 23eee5e:	ee17 2a90 	vmov	r2, s15
 23eee62:	4809      	ldr	r0, [pc, #36]	; (23eee88 <_Z22Output_CellBatteryInfov+0x94>)
 23eee64:	f009 f9ce 	bl	23f8204 <sprintf>
  Output(Buffer32Bytes);
 23eee68:	4807      	ldr	r0, [pc, #28]	; (23eee88 <_Z22Output_CellBatteryInfov+0x94>)
 23eee6a:	f7f9 fd71 	bl	23e8950 <_Z6OutputPKc>
}
 23eee6e:	b00d      	add	sp, #52	; 0x34
 23eee70:	ecbd 8b02 	vpop	{d8}
 23eee74:	bd30      	pop	{r4, r5, pc}
  float BatteryPoC = 0.0;                 // Battery Percent of Charge
 23eee76:	ed9f 0a05 	vldr	s0, [pc, #20]	; 23eee8c <_Z22Output_CellBatteryInfov+0x98>
 23eee7a:	e7d0      	b.n	23eee1e <_Z22Output_CellBatteryInfov+0x2a>
 23eee7c:	1007aeb8 	.word	0x1007aeb8
 23eee80:	42c80000 	.word	0x42c80000
 23eee84:	023fe5f7 	.word	0x023fe5f7
 23eee88:	1006a31f 	.word	0x1006a31f
 23eee8c:	00000000 	.word	0x00000000

023eee90 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb>:
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
 23eee90:	b570      	push	{r4, r5, r6, lr}
 23eee92:	4604      	mov	r4, r0
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 23eee94:	2000      	movs	r0, #0
    ResultT result(ResultT defaultValue = ResultT()) const {
 23eee96:	460d      	mov	r5, r1
        return (application_thread_current(nullptr) != 0);
 23eee98:	f008 ffca 	bl	23f7e30 <application_thread_current>
 23eee9c:	1c66      	adds	r6, r4, #1
        if (ContextT::isApplicationThreadCurrent()) {
 23eee9e:	b128      	cbz	r0, 23eeeac <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x1c>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
 23eeea0:	7833      	ldrb	r3, [r6, #0]
 23eeea2:	b2db      	uxtb	r3, r3
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 23eeea4:	b913      	cbnz	r3, 23eeeac <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x1c>
        spark_process();
 23eeea6:	f009 f833 	bl	23f7f10 <spark_process>
    }
 23eeeaa:	e7f9      	b.n	23eeea0 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x10>
 23eeeac:	e8d6 3f8f 	ldab	r3, [r6]
 23eeeb0:	b2db      	uxtb	r3, r3
        if (this->acquireDone() && this->isSucceeded()) {
 23eeeb2:	b90b      	cbnz	r3, 23eeeb8 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x28>
        return std::move(defaultValue);
 23eeeb4:	4628      	mov	r0, r5
    }
 23eeeb6:	bd70      	pop	{r4, r5, r6, pc}
        return (application_thread_current(nullptr) != 0);
 23eeeb8:	2000      	movs	r0, #0
 23eeeba:	f008 ffb9 	bl	23f7e30 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23eeebe:	b128      	cbz	r0, 23eeecc <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x3c>
 23eeec0:	7833      	ldrb	r3, [r6, #0]
 23eeec2:	b2db      	uxtb	r3, r3
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 23eeec4:	b913      	cbnz	r3, 23eeecc <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x3c>
        spark_process();
 23eeec6:	f009 f823 	bl	23f7f10 <spark_process>
    }
 23eeeca:	e7f9      	b.n	23eeec0 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x30>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 23eeecc:	7823      	ldrb	r3, [r4, #0]
 23eeece:	b2db      	uxtb	r3, r3
        if (this->acquireDone() && this->isSucceeded()) {
 23eeed0:	2b01      	cmp	r3, #1
 23eeed2:	d1ef      	bne.n	23eeeb4 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x24>
            return result_;
 23eeed4:	7b20      	ldrb	r0, [r4, #12]
 23eeed6:	e7ee      	b.n	23eeeb6 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x26>

023eeed8 <_GLOBAL__sub_I___appProductVersion>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23eeed8:	2208      	movs	r2, #8
      // We need to reinitialize our wind readings before we can move on.
      Wind_Distance_Air_Initialize();
    }
#endif
  }
}
 23eeeda:	b570      	push	{r4, r5, r6, lr}
 23eeedc:	4b63      	ldr	r3, [pc, #396]	; (23ef06c <_GLOBAL__sub_I___appProductVersion+0x194>)
 23eeede:	b086      	sub	sp, #24
 23eeee0:	701a      	strb	r2, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
 23eeee2:	f00b f92b 	bl	23fa13c <spark_protocol_instance>
 23eeee6:	2300      	movs	r3, #0
 23eeee8:	2101      	movs	r1, #1
 23eeeea:	461a      	mov	r2, r3
 23eeeec:	f00b f942 	bl	23fa174 <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
 23eeef0:	f00b f924 	bl	23fa13c <spark_protocol_instance>
 23eeef4:	2300      	movs	r3, #0
 23eeef6:	2123      	movs	r1, #35	; 0x23
 23eeef8:	461a      	mov	r2, r3
 23eeefa:	f00b f92d 	bl	23fa158 <spark_protocol_set_product_id>
  SdFat() {
 23eeefe:	2264      	movs	r2, #100	; 0x64
 23eef00:	4c5b      	ldr	r4, [pc, #364]	; (23ef070 <_GLOBAL__sub_I___appProductVersion+0x198>)
 23eef02:	2300      	movs	r3, #0
 23eef04:	f8c4 2460 	str.w	r2, [r4, #1120]	; 0x460
  {
 23eef08:	4a5a      	ldr	r2, [pc, #360]	; (23ef074 <_GLOBAL__sub_I___appProductVersion+0x19c>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23eef0a:	4d5b      	ldr	r5, [pc, #364]	; (23ef078 <_GLOBAL__sub_I___appProductVersion+0x1a0>)
 23eef0c:	f8c4 2470 	str.w	r2, [r4, #1136]	; 0x470
 23eef10:	2201      	movs	r2, #1
 23eef12:	6063      	str	r3, [r4, #4]
 23eef14:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
 23eef18:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
 23eef1c:	f884 2474 	strb.w	r2, [r4, #1140]	; 0x474
 23eef20:	f8c4 3478 	str.w	r3, [r4, #1144]	; 0x478
 23eef24:	f8a4 347c 	strh.w	r3, [r4, #1148]	; 0x47c
 23eef28:	e8d5 1f8f 	ldab	r1, [r5]
 23eef2c:	4011      	ands	r1, r2
 23eef2e:	d10b      	bne.n	23eef48 <_GLOBAL__sub_I___appProductVersion+0x70>
 23eef30:	4628      	mov	r0, r5
 23eef32:	9105      	str	r1, [sp, #20]
 23eef34:	f009 f9d6 	bl	23f82e4 <__cxa_guard_acquire>
 23eef38:	9905      	ldr	r1, [sp, #20]
 23eef3a:	b128      	cbz	r0, 23eef48 <_GLOBAL__sub_I___appProductVersion+0x70>
 23eef3c:	484f      	ldr	r0, [pc, #316]	; (23ef07c <_GLOBAL__sub_I___appProductVersion+0x1a4>)
 23eef3e:	f00a fc65 	bl	23f980c <_ZN8SPIClassC1E19hal_spi_interface_t>
 23eef42:	4628      	mov	r0, r5
 23eef44:	f009 f9dc 	bl	23f8300 <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
 23eef48:	4b4c      	ldr	r3, [pc, #304]	; (23ef07c <_GLOBAL__sub_I___appProductVersion+0x1a4>)
File SD_fp;
 23eef4a:	484d      	ldr	r0, [pc, #308]	; (23ef080 <_GLOBAL__sub_I___appProductVersion+0x1a8>)
 23eef4c:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
 23eef50:	f7f9 fae8 	bl	23e8524 <_ZN4FileC1Ev>
PMIC pmic;
 23eef54:	2100      	movs	r1, #0
 23eef56:	484b      	ldr	r0, [pc, #300]	; (23ef084 <_GLOBAL__sub_I___appProductVersion+0x1ac>)
 23eef58:	f00a fb11 	bl	23f957e <_ZN4PMICC1Eb>
Adafruit_SSD1306 display32(SCREEN_WIDTH, 32, &Wire, OLED_RESET);
 23eef5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 23eef60:	f00b f9d8 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23eef64:	4d48      	ldr	r5, [pc, #288]	; (23ef088 <_GLOBAL__sub_I___appProductVersion+0x1b0>)
 23eef66:	4e49      	ldr	r6, [pc, #292]	; (23ef08c <_GLOBAL__sub_I___appProductVersion+0x1b4>)
 23eef68:	4603      	mov	r3, r0
 23eef6a:	2220      	movs	r2, #32
 23eef6c:	2180      	movs	r1, #128	; 0x80
 23eef6e:	9400      	str	r4, [sp, #0]
 23eef70:	e9cd 5601 	strd	r5, r6, [sp, #4]
 23eef74:	4846      	ldr	r0, [pc, #280]	; (23ef090 <_GLOBAL__sub_I___appProductVersion+0x1b8>)
 23eef76:	f004 fe0f 	bl	23f3b98 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
Adafruit_SSD1306 display64(SCREEN_WIDTH, 64, &Wire, OLED_RESET);
 23eef7a:	f00b f9cb 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23eef7e:	2240      	movs	r2, #64	; 0x40
 23eef80:	4603      	mov	r3, r0
 23eef82:	9400      	str	r4, [sp, #0]
 23eef84:	2180      	movs	r1, #128	; 0x80
 23eef86:	e9cd 5601 	strd	r5, r6, [sp, #4]
 23eef8a:	4842      	ldr	r0, [pc, #264]	; (23ef094 <_GLOBAL__sub_I___appProductVersion+0x1bc>)
 23eef8c:	f004 fe04 	bl	23f3b98 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
DateTime now;
 23eef90:	4941      	ldr	r1, [pc, #260]	; (23ef098 <_GLOBAL__sub_I___appProductVersion+0x1c0>)
 23eef92:	4842      	ldr	r0, [pc, #264]	; (23ef09c <_GLOBAL__sub_I___appProductVersion+0x1c4>)
 23eef94:	f006 faa0 	bl	23f54d8 <_ZN8DateTimeC1Em>
RH_RF95 rf95(LORA_SS, LORA_IRQ_PIN, hardware_spi); // SPI1
 23eef98:	2214      	movs	r2, #20
 23eef9a:	4b41      	ldr	r3, [pc, #260]	; (23ef0a0 <_GLOBAL__sub_I___appProductVersion+0x1c8>)
 23eef9c:	2103      	movs	r1, #3
 23eef9e:	4841      	ldr	r0, [pc, #260]	; (23ef0a4 <_GLOBAL__sub_I___appProductVersion+0x1cc>)
 23eefa0:	f006 f81c 	bl	23f4fdc <_ZN7RH_RF95C1EhhR12RHGenericSPI>
AES aes;
 23eefa4:	4840      	ldr	r0, [pc, #256]	; (23ef0a8 <_GLOBAL__sub_I___appProductVersion+0x1d0>)
 23eefa6:	f001 fc1f 	bl	23f07e8 <_ZN3AESC1Ev>
Adafruit_BMP280 bmp1;
 23eefaa:	f00b f9b3 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23eefae:	4601      	mov	r1, r0
 23eefb0:	483e      	ldr	r0, [pc, #248]	; (23ef0ac <_GLOBAL__sub_I___appProductVersion+0x1d4>)
 23eefb2:	f002 fb8d 	bl	23f16d0 <_ZN15Adafruit_BMP280C1EP7TwoWire>
Adafruit_BMP280 bmp2;
 23eefb6:	f00b f9ad 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23eefba:	4601      	mov	r1, r0
 23eefbc:	483c      	ldr	r0, [pc, #240]	; (23ef0b0 <_GLOBAL__sub_I___appProductVersion+0x1d8>)
 23eefbe:	f002 fb87 	bl	23f16d0 <_ZN15Adafruit_BMP280C1EP7TwoWire>
Adafruit_BME280 bme1;
 23eefc2:	483c      	ldr	r0, [pc, #240]	; (23ef0b4 <_GLOBAL__sub_I___appProductVersion+0x1dc>)
 23eefc4:	f001 fefa 	bl	23f0dbc <_ZN15Adafruit_BME280C1Ev>
Adafruit_BME280 bme2;
 23eefc8:	483b      	ldr	r0, [pc, #236]	; (23ef0b8 <_GLOBAL__sub_I___appProductVersion+0x1e0>)
 23eefca:	f001 fef7 	bl	23f0dbc <_ZN15Adafruit_BME280C1Ev>
Adafruit_BMP3XX bm31;
 23eefce:	483b      	ldr	r0, [pc, #236]	; (23ef0bc <_GLOBAL__sub_I___appProductVersion+0x1e4>)
 23eefd0:	f002 ff66 	bl	23f1ea0 <_ZN15Adafruit_BMP3XXC1Ev>
Adafruit_BMP3XX bm32;
 23eefd4:	483a      	ldr	r0, [pc, #232]	; (23ef0c0 <_GLOBAL__sub_I___appProductVersion+0x1e8>)
 23eefd6:	f002 ff63 	bl	23f1ea0 <_ZN15Adafruit_BMP3XXC1Ev>
Adafruit_HTU21DF htu = Adafruit_HTU21DF();
 23eefda:	483a      	ldr	r0, [pc, #232]	; (23ef0c4 <_GLOBAL__sub_I___appProductVersion+0x1ec>)
 23eefdc:	f004 f81c 	bl	23f3018 <_ZN16Adafruit_HTU21DFC1Ev>
Adafruit_MCP9808 mcp1;
 23eefe0:	4839      	ldr	r0, [pc, #228]	; (23ef0c8 <_GLOBAL__sub_I___appProductVersion+0x1f0>)
 23eefe2:	f004 fa11 	bl	23f3408 <_ZN16Adafruit_MCP9808C1Ev>
Adafruit_MCP9808 mcp2;
 23eefe6:	4839      	ldr	r0, [pc, #228]	; (23ef0cc <_GLOBAL__sub_I___appProductVersion+0x1f4>)
 23eefe8:	f004 fa0e 	bl	23f3408 <_ZN16Adafruit_MCP9808C1Ev>
Adafruit_MCP9808 mcp3;
 23eefec:	4838      	ldr	r0, [pc, #224]	; (23ef0d0 <_GLOBAL__sub_I___appProductVersion+0x1f8>)
 23eefee:	f004 fa0b 	bl	23f3408 <_ZN16Adafruit_MCP9808C1Ev>
Adafruit_MCP9808 mcp4;
 23eeff2:	4838      	ldr	r0, [pc, #224]	; (23ef0d4 <_GLOBAL__sub_I___appProductVersion+0x1fc>)
 23eeff4:	f004 fa08 	bl	23f3408 <_ZN16Adafruit_MCP9808C1Ev>
Adafruit_SHT31 sht1;
 23eeff8:	f00b f98c 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23eeffc:	4601      	mov	r1, r0
 23eeffe:	4836      	ldr	r0, [pc, #216]	; (23ef0d8 <_GLOBAL__sub_I___appProductVersion+0x200>)
 23ef000:	f004 fb56 	bl	23f36b0 <_ZN14Adafruit_SHT31C1EP7TwoWire>
Adafruit_SHT31 sht2;
 23ef004:	f00b f986 	bl	23fa314 <_Z19__fetch_global_Wirev>
              error_(SYSTEM_ERROR_NONE) {
 23ef008:	2400      	movs	r4, #0
 23ef00a:	4601      	mov	r1, r0
 23ef00c:	4833      	ldr	r0, [pc, #204]	; (23ef0dc <_GLOBAL__sub_I___appProductVersion+0x204>)
 23ef00e:	f004 fb4f 	bl	23f36b0 <_ZN14Adafruit_SHT31C1EP7TwoWire>
Adafruit_SI1145 uv = Adafruit_SI1145();
 23ef012:	4833      	ldr	r0, [pc, #204]	; (23ef0e0 <_GLOBAL__sub_I___appProductVersion+0x208>)
 23ef014:	f004 fc16 	bl	23f3844 <_ZN15Adafruit_SI1145C1Ev>
Adafruit_VEML7700 veml = Adafruit_VEML7700();
 23ef018:	4832      	ldr	r0, [pc, #200]	; (23ef0e4 <_GLOBAL__sub_I___appProductVersion+0x20c>)
 23ef01a:	f005 fa4b 	bl	23f44b4 <_ZN17Adafruit_VEML7700C1Ev>
Adafruit_PM25AQI pmaq = Adafruit_PM25AQI();
 23ef01e:	4832      	ldr	r0, [pc, #200]	; (23ef0e8 <_GLOBAL__sub_I___appProductVersion+0x210>)
 23ef020:	f004 fa99 	bl	23f3556 <_ZN16Adafruit_PM25AQIC1Ev>
Adafruit_HDC302x hdc1;
 23ef024:	4831      	ldr	r0, [pc, #196]	; (23ef0ec <_GLOBAL__sub_I___appProductVersion+0x214>)
 23ef026:	f003 feea 	bl	23f2dfe <_ZN16Adafruit_HDC302xC1Ev>
Adafruit_HDC302x hdc2;
 23ef02a:	4831      	ldr	r0, [pc, #196]	; (23ef0f0 <_GLOBAL__sub_I___appProductVersion+0x218>)
 23ef02c:	f003 fee7 	bl	23f2dfe <_ZN16Adafruit_HDC302xC1Ev>
Adafruit_LPS35HW lps1;
 23ef030:	4830      	ldr	r0, [pc, #192]	; (23ef0f4 <_GLOBAL__sub_I___appProductVersion+0x21c>)
 23ef032:	f004 f8b5 	bl	23f31a0 <_ZN16Adafruit_LPS35HWC1Ev>
Adafruit_LPS35HW lps2;
 23ef036:	4830      	ldr	r0, [pc, #192]	; (23ef0f8 <_GLOBAL__sub_I___appProductVersion+0x220>)
 23ef038:	f004 f8b2 	bl	23f31a0 <_ZN16Adafruit_LPS35HWC1Ev>
LeafSens tlw;
 23ef03c:	482f      	ldr	r0, [pc, #188]	; (23ef0fc <_GLOBAL__sub_I___appProductVersion+0x224>)
 23ef03e:	f005 fcbc 	bl	23f49ba <_ZN8LeafSensC1Ev>
SVCS3 tsm;
 23ef042:	482f      	ldr	r0, [pc, #188]	; (23ef100 <_GLOBAL__sub_I___appProductVersion+0x228>)
 23ef044:	f008 f8b4 	bl	23f71b0 <_ZN5SVCS3C1Ev>
SVMULTI tmsm;
 23ef048:	482e      	ldr	r0, [pc, #184]	; (23ef104 <_GLOBAL__sub_I___appProductVersion+0x22c>)
 23ef04a:	f008 f977 	bl	23f733c <_ZN7SVMULTIC1Ev>
 23ef04e:	4b2e      	ldr	r3, [pc, #184]	; (23ef108 <_GLOBAL__sub_I___appProductVersion+0x230>)
    SleepResult() {}
 23ef050:	4a2e      	ldr	r2, [pc, #184]	; (23ef10c <_GLOBAL__sub_I___appProductVersion+0x234>)
        set_system_mode(mode);
 23ef052:	2002      	movs	r0, #2
              error_(SYSTEM_ERROR_NONE) {
 23ef054:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
 23ef058:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 23ef05a:	f008 feb1 	bl	23f7dc0 <set_system_mode>
SYSTEM_THREAD(ENABLED);
 23ef05e:	4621      	mov	r1, r4
 23ef060:	2001      	movs	r0, #1
}
 23ef062:	b006      	add	sp, #24
 23ef064:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
SYSTEM_THREAD(ENABLED);
 23ef068:	f008 bec6 	b.w	23f7df8 <system_thread_set_state>
 23ef06c:	1006a83b 	.word	0x1006a83b
 23ef070:	1006a368 	.word	0x1006a368
 23ef074:	023fea50 	.word	0x023fea50
 23ef078:	1006a2e8 	.word	0x1006a2e8
 23ef07c:	1006a2ec 	.word	0x1006a2ec
 23ef080:	1006a7f0 	.word	0x1006a7f0
 23ef084:	1007aa60 	.word	0x1007aa60
 23ef088:	00061a80 	.word	0x00061a80
 23ef08c:	000186a0 	.word	0x000186a0
 23ef090:	1006ada4 	.word	0x1006ada4
 23ef094:	1006ae18 	.word	0x1006ae18
 23ef098:	386d4380 	.word	0x386d4380
 23ef09c:	1006f54c 	.word	0x1006f54c
 23ef0a0:	1007ae7c 	.word	0x1007ae7c
 23ef0a4:	1007aa90 	.word	0x1007aa90
 23ef0a8:	1006a840 	.word	0x1006a840
 23ef0ac:	1006ac28 	.word	0x1006ac28
 23ef0b0:	1006ac68 	.word	0x1006ac68
 23ef0b4:	1006ab78 	.word	0x1006ab78
 23ef0b8:	1006abd0 	.word	0x1006abd0
 23ef0bc:	1006a978 	.word	0x1006a978
 23ef0c0:	1006aa78 	.word	0x1006aa78
 23ef0c4:	1006aec0 	.word	0x1006aec0
 23ef0c8:	1006f118 	.word	0x1006f118
 23ef0cc:	1006f124 	.word	0x1006f124
 23ef0d0:	1006f130 	.word	0x1006f130
 23ef0d4:	1006f13c 	.word	0x1006f13c
 23ef0d8:	1007abc0 	.word	0x1007abc0
 23ef0dc:	1007abd0 	.word	0x1007abd0
 23ef0e0:	1007ac24 	.word	0x1007ac24
 23ef0e4:	1007ac2c 	.word	0x1007ac2c
 23ef0e8:	1007aa38 	.word	0x1007aa38
 23ef0ec:	1006aeb0 	.word	0x1006aeb0
 23ef0f0:	1006aeb8 	.word	0x1006aeb8
 23ef0f4:	1006f0e0 	.word	0x1006f0e0
 23ef0f8:	1006f0fc 	.word	0x1006f0fc
 23ef0fc:	1007ac0c 	.word	0x1007ac0c
 23ef100:	1007ac1c 	.word	0x1007ac1c
 23ef104:	1007ac14 	.word	0x1007ac14
 23ef108:	1006a828 	.word	0x1006a828
 23ef10c:	ffff0000 	.word	0xffff0000

023ef110 <_Z15lora_initializev>:
void lora_initialize() {
 23ef110:	b510      	push	{r4, lr}
  if (lora_cf_validate()) {
 23ef112:	f7f9 fe4d 	bl	23e8db0 <_Z16lora_cf_validatev>
 23ef116:	2800      	cmp	r0, #0
 23ef118:	d04b      	beq.n	23ef1b2 <_Z15lora_initializev+0xa2>
    pinMode(LORA_RESET, OUTPUT);
 23ef11a:	2101      	movs	r1, #1
 23ef11c:	2015      	movs	r0, #21
 23ef11e:	f00b f875 	bl	23fa20c <pinMode>
    digitalWrite(LORA_RESET, LOW);
 23ef122:	2100      	movs	r1, #0
 23ef124:	2015      	movs	r0, #21
 23ef126:	f00b f882 	bl	23fa22e <digitalWrite>
    delay(100);
 23ef12a:	2064      	movs	r0, #100	; 0x64
 23ef12c:	f009 f8f6 	bl	23f831c <delay>
    digitalWrite(LORA_RESET, HIGH);
 23ef130:	2101      	movs	r1, #1
 23ef132:	2015      	movs	r0, #21
 23ef134:	f00b f87b 	bl	23fa22e <digitalWrite>
    delay(100);
 23ef138:	2064      	movs	r0, #100	; 0x64
 23ef13a:	f009 f8ef 	bl	23f831c <delay>
    if (rf95.init()) {
 23ef13e:	481e      	ldr	r0, [pc, #120]	; (23ef1b8 <_Z15lora_initializev+0xa8>)
 23ef140:	f006 f92e 	bl	23f53a0 <_ZN7RH_RF954initEv>
 23ef144:	b370      	cbz	r0, 23ef1a4 <_Z15lora_initializev+0x94>
      rf95.setTxPower(cf_lora_txpower, false);
 23ef146:	4b1d      	ldr	r3, [pc, #116]	; (23ef1bc <_Z15lora_initializev+0xac>)
 23ef148:	2200      	movs	r2, #0
 23ef14a:	f993 1000 	ldrsb.w	r1, [r3]
 23ef14e:	481a      	ldr	r0, [pc, #104]	; (23ef1b8 <_Z15lora_initializev+0xa8>)
 23ef150:	f006 f8de 	bl	23f5310 <_ZN7RH_RF9510setTxPowerEab>
      rf95.setFrequency(cf_lora_freq);
 23ef154:	4b1a      	ldr	r3, [pc, #104]	; (23ef1c0 <_Z15lora_initializev+0xb0>)
      rf95.setThisAddress(cf_lora_unitid);
 23ef156:	4c1b      	ldr	r4, [pc, #108]	; (23ef1c4 <_Z15lora_initializev+0xb4>)
      rf95.setFrequency(cf_lora_freq);
 23ef158:	ed93 0a00 	vldr	s0, [r3]
 23ef15c:	4816      	ldr	r0, [pc, #88]	; (23ef1b8 <_Z15lora_initializev+0xa8>)
 23ef15e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 23ef162:	f005 ff71 	bl	23f5048 <_ZN7RH_RF9512setFrequencyEf>
      rf95.setThisAddress(cf_lora_unitid);
 23ef166:	7821      	ldrb	r1, [r4, #0]
 23ef168:	4813      	ldr	r0, [pc, #76]	; (23ef1b8 <_Z15lora_initializev+0xa8>)
 23ef16a:	f005 fce1 	bl	23f4b30 <_ZN15RHGenericDriver14setThisAddressEh>
      rf95.setHeaderFrom(cf_lora_unitid);
 23ef16e:	7821      	ldrb	r1, [r4, #0]
 23ef170:	4811      	ldr	r0, [pc, #68]	; (23ef1b8 <_Z15lora_initializev+0xa8>)
 23ef172:	f005 fce1 	bl	23f4b38 <_ZN15RHGenericDriver13setHeaderFromEh>
      rf95.setPromiscuous(true);
 23ef176:	2101      	movs	r1, #1
 23ef178:	480f      	ldr	r0, [pc, #60]	; (23ef1b8 <_Z15lora_initializev+0xa8>)
 23ef17a:	f005 fcd7 	bl	23f4b2c <_ZN15RHGenericDriver14setPromiscuousEb>
      rf95.setModeRx();
 23ef17e:	480e      	ldr	r0, [pc, #56]	; (23ef1b8 <_Z15lora_initializev+0xa8>)
 23ef180:	f006 f858 	bl	23f5234 <_ZN7RH_RF959setModeRxEv>
      LORA_exists=true;
 23ef184:	2201      	movs	r2, #1
 23ef186:	4b10      	ldr	r3, [pc, #64]	; (23ef1c8 <_Z15lora_initializev+0xb8>)
      Output ("LORA OK");
 23ef188:	4810      	ldr	r0, [pc, #64]	; (23ef1cc <_Z15lora_initializev+0xbc>)
      LORA_exists=true;
 23ef18a:	701a      	strb	r2, [r3, #0]
    Output ("LORA INIT ERR");
 23ef18c:	f7f9 fbe0 	bl	23e8950 <_Z6OutputPKc>
  lora_alarm_timer = System.millis() + (LORA_RESET_NOACTIVITY * 60000);  // Minutes * 60 seconds
 23ef190:	f7f9 f946 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23ef194:	4a0e      	ldr	r2, [pc, #56]	; (23ef1d0 <_Z15lora_initializev+0xc0>)
 23ef196:	4b0f      	ldr	r3, [pc, #60]	; (23ef1d4 <_Z15lora_initializev+0xc4>)
 23ef198:	1880      	adds	r0, r0, r2
 23ef19a:	f141 0100 	adc.w	r1, r1, #0
 23ef19e:	e9c3 0100 	strd	r0, r1, [r3]
}
 23ef1a2:	bd10      	pop	{r4, pc}
      SystemStatusBits |= SSB_LORA;  // Turn On Bit
 23ef1a4:	4a0c      	ldr	r2, [pc, #48]	; (23ef1d8 <_Z15lora_initializev+0xc8>)
      Output ("LORA NF");
 23ef1a6:	480d      	ldr	r0, [pc, #52]	; (23ef1dc <_Z15lora_initializev+0xcc>)
      SystemStatusBits |= SSB_LORA;  // Turn On Bit
 23ef1a8:	6813      	ldr	r3, [r2, #0]
 23ef1aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 23ef1ae:	6013      	str	r3, [r2, #0]
      Output ("LORA NF");
 23ef1b0:	e7ec      	b.n	23ef18c <_Z15lora_initializev+0x7c>
    Output ("LORA INIT ERR");
 23ef1b2:	480b      	ldr	r0, [pc, #44]	; (23ef1e0 <_Z15lora_initializev+0xd0>)
 23ef1b4:	e7ea      	b.n	23ef18c <_Z15lora_initializev+0x7c>
 23ef1b6:	bf00      	nop
 23ef1b8:	1007aa90 	.word	0x1007aa90
 23ef1bc:	1006a248 	.word	0x1006a248
 23ef1c0:	1006a244 	.word	0x1006a244
 23ef1c4:	1006a24c 	.word	0x1006a24c
 23ef1c8:	1006a349 	.word	0x1006a349
 23ef1cc:	023fe60f 	.word	0x023fe60f
 23ef1d0:	001b7740 	.word	0x001b7740
 23ef1d4:	1006aed8 	.word	0x1006aed8
 23ef1d8:	1006a22c 	.word	0x1006a22c
 23ef1dc:	023fe617 	.word	0x023fe617
 23ef1e0:	023fe61f 	.word	0x023fe61f

023ef1e4 <_Z14lora_msg_checkv.part.0>:
/* 
 *=======================================================================================================================
 * lora_msg_check()
 *=======================================================================================================================
 */
void lora_msg_check() {
 23ef1e4:	b570      	push	{r4, r5, r6, lr}
    if (rf95.available()) {
      byte iv [N_BLOCK];
    
      // Should be a message for us now
      uint8_t buf[RH_RF95_MAX_MESSAGE_LEN]; // 251 Bytes
      uint8_t len  = sizeof(buf);
 23ef1e6:	24fb      	movs	r4, #251	; 0xfb
void lora_msg_check() {
 23ef1e8:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
      uint8_t from = rf95.headerFrom();
 23ef1ec:	483b      	ldr	r0, [pc, #236]	; (23ef2dc <_Z14lora_msg_checkv.part.0+0xf8>)
      uint8_t len  = sizeof(buf);
 23ef1ee:	f88d 4013 	strb.w	r4, [sp, #19]
      uint8_t from = rf95.headerFrom();
 23ef1f2:	f005 fcad 	bl	23f4b50 <_ZN15RHGenericDriver10headerFromEv>
      uint8_t to   = rf95.headerTo();
 23ef1f6:	4839      	ldr	r0, [pc, #228]	; (23ef2dc <_Z14lora_msg_checkv.part.0+0xf8>)
 23ef1f8:	f005 fca8 	bl	23f4b4c <_ZN15RHGenericDriver8headerToEv>
      uint8_t id   = rf95.headerId();
 23ef1fc:	4837      	ldr	r0, [pc, #220]	; (23ef2dc <_Z14lora_msg_checkv.part.0+0xf8>)
 23ef1fe:	f005 fca9 	bl	23f4b54 <_ZN15RHGenericDriver8headerIdEv>
      uint8_t flags= rf95.headerFlags();
 23ef202:	4836      	ldr	r0, [pc, #216]	; (23ef2dc <_Z14lora_msg_checkv.part.0+0xf8>)
 23ef204:	f005 fca8 	bl	23f4b58 <_ZN15RHGenericDriver11headerFlagsEv>
      int8_t  rssi = rf95.lastRssi(); 
 23ef208:	4834      	ldr	r0, [pc, #208]	; (23ef2dc <_Z14lora_msg_checkv.part.0+0xf8>)
 23ef20a:	f005 fca7 	bl	23f4b5c <_ZN15RHGenericDriver8lastRssiEv>
      uint8_t byte2;
      uint8_t i;
      uint8_t msglen = 0;
      char msg[256];             // Used to hold decrypted lora messages

      memset(buf, 0, RH_RF95_MAX_MESSAGE_LEN);
 23ef20e:	4622      	mov	r2, r4
 23ef210:	2100      	movs	r1, #0
 23ef212:	a809      	add	r0, sp, #36	; 0x24
      memset(msg, 0, RH_RF95_MAX_MESSAGE_LEN+1);
 23ef214:	ac48      	add	r4, sp, #288	; 0x120
      memset(buf, 0, RH_RF95_MAX_MESSAGE_LEN);
 23ef216:	f00d fe16 	bl	23fce46 <memset>
      memset(msg, 0, RH_RF95_MAX_MESSAGE_LEN+1);
 23ef21a:	22fc      	movs	r2, #252	; 0xfc
 23ef21c:	2100      	movs	r1, #0
 23ef21e:	4620      	mov	r0, r4
 23ef220:	f00d fe11 	bl	23fce46 <memset>
    
      if (rf95.recv(buf, &len)) {
 23ef224:	482d      	ldr	r0, [pc, #180]	; (23ef2dc <_Z14lora_msg_checkv.part.0+0xf8>)
 23ef226:	f10d 0213 	add.w	r2, sp, #19
 23ef22a:	a909      	add	r1, sp, #36	; 0x24
 23ef22c:	f005 fe90 	bl	23f4f50 <_ZN7RH_RF954recvEPhS0_>
 23ef230:	2800      	cmp	r0, #0
 23ef232:	d043      	beq.n	23ef2bc <_Z14lora_msg_checkv.part.0+0xd8>
        // memcpy (msg, &buf[3], buf[0]);
        // Output (msg);
        // Serial_write ("LoRa Msg");
     
        aes.iv_inc();
 23ef234:	482a      	ldr	r0, [pc, #168]	; (23ef2e0 <_Z14lora_msg_checkv.part.0+0xfc>)
 23ef236:	f001 fd80 	bl	23f0d3a <_ZN3AES6iv_incEv>
        aes.set_IV(AES_MYIV);
 23ef23a:	4b2a      	ldr	r3, [pc, #168]	; (23ef2e4 <_Z14lora_msg_checkv.part.0+0x100>)
 23ef23c:	4828      	ldr	r0, [pc, #160]	; (23ef2e0 <_Z14lora_msg_checkv.part.0+0xfc>)
 23ef23e:	e9d3 2300 	ldrd	r2, r3, [r3]
        aes.get_IV(iv);
 23ef242:	ad05      	add	r5, sp, #20
        aes.set_IV(AES_MYIV);
 23ef244:	f001 fd65 	bl	23f0d12 <_ZN3AES6set_IVEy>
        aes.get_IV(iv);
 23ef248:	4629      	mov	r1, r5
 23ef24a:	4825      	ldr	r0, [pc, #148]	; (23ef2e0 <_Z14lora_msg_checkv.part.0+0xfc>)
 23ef24c:	f001 fd8d 	bl	23f0d6a <_ZN3AES6get_IVEPh>
        aes.do_aes_decrypt(buf, len, (byte *) msg, AES_KEY, 128, iv);
 23ef250:	2380      	movs	r3, #128	; 0x80
 23ef252:	9301      	str	r3, [sp, #4]
 23ef254:	4b24      	ldr	r3, [pc, #144]	; (23ef2e8 <_Z14lora_msg_checkv.part.0+0x104>)
 23ef256:	f89d 2013 	ldrb.w	r2, [sp, #19]
 23ef25a:	9300      	str	r3, [sp, #0]
 23ef25c:	4820      	ldr	r0, [pc, #128]	; (23ef2e0 <_Z14lora_msg_checkv.part.0+0xfc>)
 23ef25e:	4623      	mov	r3, r4
 23ef260:	9502      	str	r5, [sp, #8]
 23ef262:	a909      	add	r1, sp, #36	; 0x24
 23ef264:	f001 fd8e 	bl	23f0d84 <_ZN3AES14do_aes_decryptEPhiS0_S0_iS0_>
      
        if ( ( msg[3] == 'I' && msg[4] == 'F') ||
 23ef268:	78e3      	ldrb	r3, [r4, #3]
 23ef26a:	2b49      	cmp	r3, #73	; 0x49
 23ef26c:	d111      	bne.n	23ef292 <_Z14lora_msg_checkv.part.0+0xae>
 23ef26e:	7923      	ldrb	r3, [r4, #4]
 23ef270:	2b46      	cmp	r3, #70	; 0x46
             ( msg[3] == 'L' && msg[4] == 'R')) {
 23ef272:	d123      	bne.n	23ef2bc <_Z14lora_msg_checkv.part.0+0xd8>

          // Get length of what follows
          msglen = msg[0];
 23ef274:	f20d 1123 	addw	r1, sp, #291	; 0x123

          // Compute Checksum
          checksum=0;
          for (i=3; i<msglen; i++) {
 23ef278:	2203      	movs	r2, #3
          checksum=0;
 23ef27a:	2300      	movs	r3, #0
 23ef27c:	4608      	mov	r0, r1
          msglen = msg[0];
 23ef27e:	7825      	ldrb	r5, [r4, #0]
          for (i=3; i<msglen; i++) {
 23ef280:	4295      	cmp	r5, r2
 23ef282:	d90b      	bls.n	23ef29c <_Z14lora_msg_checkv.part.0+0xb8>
            checksum += msg[i];
 23ef284:	f811 6b01 	ldrb.w	r6, [r1], #1
          for (i=3; i<msglen; i++) {
 23ef288:	3201      	adds	r2, #1
            checksum += msg[i];
 23ef28a:	4433      	add	r3, r6
 23ef28c:	b29b      	uxth	r3, r3
          for (i=3; i<msglen; i++) {
 23ef28e:	b2d2      	uxtb	r2, r2
 23ef290:	e7f6      	b.n	23ef280 <_Z14lora_msg_checkv.part.0+0x9c>
        if ( ( msg[3] == 'I' && msg[4] == 'F') ||
 23ef292:	2b4c      	cmp	r3, #76	; 0x4c
 23ef294:	d112      	bne.n	23ef2bc <_Z14lora_msg_checkv.part.0+0xd8>
             ( msg[3] == 'L' && msg[4] == 'R')) {
 23ef296:	7923      	ldrb	r3, [r4, #4]
 23ef298:	2b52      	cmp	r3, #82	; 0x52
 23ef29a:	e7ea      	b.n	23ef272 <_Z14lora_msg_checkv.part.0+0x8e>
          }
          byte1 = checksum>>8;
          byte2 = checksum%256;

          // Validate Checksum against sent checksum
          if ((byte1 == msg[1]) && (byte2 == msg[2])) {
 23ef29c:	7862      	ldrb	r2, [r4, #1]
 23ef29e:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
 23ef2a2:	d117      	bne.n	23ef2d4 <_Z14lora_msg_checkv.part.0+0xf0>
 23ef2a4:	78a2      	ldrb	r2, [r4, #2]
 23ef2a6:	b2db      	uxtb	r3, r3
 23ef2a8:	429a      	cmp	r2, r3
 23ef2aa:	d113      	bne.n	23ef2d4 <_Z14lora_msg_checkv.part.0+0xf0>
            // Make what follows a string
            msg[msglen]=0;
 23ef2ac:	2300      	movs	r3, #0
 23ef2ae:	5563      	strb	r3, [r4, r5]

            char *payload = (char*)(msg+3); // After length and 2 checksum bytes

            // Display LoRa Message on Serial Console           
            Serial_write (payload);
 23ef2b0:	f7f9 fb24 	bl	23e88fc <_Z12Serial_writePKc>

            lora_relay_msg (payload);
 23ef2b4:	f20d 1023 	addw	r0, sp, #291	; 0x123
 23ef2b8:	f7fc fb1c 	bl	23eb8f4 <_Z14lora_relay_msgPc>
            Output ("LORA CS-ERR");
          }
        }
      }
      // Received LoRa Signal, Reset alarm
      lora_alarm_timer = System.millis() + (LORA_RESET_NOACTIVITY * 60000);
 23ef2bc:	f7f9 f8b0 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23ef2c0:	4a0a      	ldr	r2, [pc, #40]	; (23ef2ec <_Z14lora_msg_checkv.part.0+0x108>)
 23ef2c2:	4b0b      	ldr	r3, [pc, #44]	; (23ef2f0 <_Z14lora_msg_checkv.part.0+0x10c>)
 23ef2c4:	1880      	adds	r0, r0, r2
 23ef2c6:	f141 0100 	adc.w	r1, r1, #0
 23ef2ca:	e9c3 0100 	strd	r0, r1, [r3]
        // Need to set some system status bit here too
        lora_initialize();
      }
    }
  }
}
 23ef2ce:	f50d 7d08 	add.w	sp, sp, #544	; 0x220
 23ef2d2:	bd70      	pop	{r4, r5, r6, pc}
            Output ("LORA CS-ERR");
 23ef2d4:	4807      	ldr	r0, [pc, #28]	; (23ef2f4 <_Z14lora_msg_checkv.part.0+0x110>)
 23ef2d6:	f7f9 fb3b 	bl	23e8950 <_Z6OutputPKc>
 23ef2da:	e7ef      	b.n	23ef2bc <_Z14lora_msg_checkv.part.0+0xd8>
 23ef2dc:	1007aa90 	.word	0x1007aa90
 23ef2e0:	1006a840 	.word	0x1006a840
 23ef2e4:	1006a310 	.word	0x1006a310
 23ef2e8:	1006a2fc 	.word	0x1006a2fc
 23ef2ec:	001b7740 	.word	0x001b7740
 23ef2f0:	1006aed8 	.word	0x1006aed8
 23ef2f4:	023fe62d 	.word	0x023fe62d

023ef2f8 <_Z14lora_msg_checkv>:
void lora_msg_check() {
 23ef2f8:	b508      	push	{r3, lr}
  if (LORA_exists) {
 23ef2fa:	4b0e      	ldr	r3, [pc, #56]	; (23ef334 <_Z14lora_msg_checkv+0x3c>)
 23ef2fc:	781b      	ldrb	r3, [r3, #0]
 23ef2fe:	b1bb      	cbz	r3, 23ef330 <_Z14lora_msg_checkv+0x38>
    if (rf95.available()) {
 23ef300:	480d      	ldr	r0, [pc, #52]	; (23ef338 <_Z14lora_msg_checkv+0x40>)
 23ef302:	f005 ffa8 	bl	23f5256 <_ZN7RH_RF959availableEv>
 23ef306:	b118      	cbz	r0, 23ef310 <_Z14lora_msg_checkv+0x18>
}
 23ef308:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 23ef30c:	f7ff bf6a 	b.w	23ef1e4 <_Z14lora_msg_checkv.part.0>
      if (System.millis() >= lora_alarm_timer) {
 23ef310:	f7f9 f886 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23ef314:	4b09      	ldr	r3, [pc, #36]	; (23ef33c <_Z14lora_msg_checkv+0x44>)
 23ef316:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ef31a:	4290      	cmp	r0, r2
 23ef31c:	eb71 0303 	sbcs.w	r3, r1, r3
 23ef320:	d306      	bcc.n	23ef330 <_Z14lora_msg_checkv+0x38>
        Output ("LORA Init");
 23ef322:	4807      	ldr	r0, [pc, #28]	; (23ef340 <_Z14lora_msg_checkv+0x48>)
 23ef324:	f7f9 fb14 	bl	23e8950 <_Z6OutputPKc>
}
 23ef328:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        lora_initialize();
 23ef32c:	f7ff bef0 	b.w	23ef110 <_Z15lora_initializev>
}
 23ef330:	bd08      	pop	{r3, pc}
 23ef332:	bf00      	nop
 23ef334:	1006a349 	.word	0x1006a349
 23ef338:	1007aa90 	.word	0x1007aa90
 23ef33c:	1006aed8 	.word	0x1006aed8
 23ef340:	023fe639 	.word	0x023fe639

023ef344 <_Z13lora_msg_pollv>:
/* 
 *=======================================================================================================================
 * lora_msg_poll() -- Spend 750ms looking for LoRa Messages
 *=======================================================================================================================
 */
void lora_msg_poll() {
 23ef344:	b508      	push	{r3, lr}
  for (int i=0; i<3; i++) {
    lora_msg_check();
 23ef346:	f7ff ffd7 	bl	23ef2f8 <_Z14lora_msg_checkv>
    delay (250);
 23ef34a:	20fa      	movs	r0, #250	; 0xfa
 23ef34c:	f008 ffe6 	bl	23f831c <delay>
    lora_msg_check();
 23ef350:	f7ff ffd2 	bl	23ef2f8 <_Z14lora_msg_checkv>
    delay (250);
 23ef354:	20fa      	movs	r0, #250	; 0xfa
 23ef356:	f008 ffe1 	bl	23f831c <delay>
    lora_msg_check();
 23ef35a:	f7ff ffcd 	bl	23ef2f8 <_Z14lora_msg_checkv>
  }
 23ef35e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay (250);
 23ef362:	20fa      	movs	r0, #250	; 0xfa
 23ef364:	f008 bfda 	b.w	23f831c <delay>

023ef368 <_Z28Wind_Distance_Air_Initializev>:
void Wind_Distance_Air_Initialize() {
 23ef368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  anemometer_interrupt_count = 0;
 23ef36a:	2400      	movs	r4, #0
  Output ("WindDist Init()");
 23ef36c:	4821      	ldr	r0, [pc, #132]	; (23ef3f4 <_Z28Wind_Distance_Air_Initializev+0x8c>)
 23ef36e:	f7f9 faef 	bl	23e8950 <_Z6OutputPKc>
  anemometer_interrupt_count = 0;
 23ef372:	4b21      	ldr	r3, [pc, #132]	; (23ef3f8 <_Z28Wind_Distance_Air_Initializev+0x90>)
    if (A4_State == A4_STATE_DISTANCE) {
 23ef374:	4e21      	ldr	r6, [pc, #132]	; (23ef3fc <_Z28Wind_Distance_Air_Initializev+0x94>)
  anemometer_interrupt_count = 0;
 23ef376:	601c      	str	r4, [r3, #0]
  anemometer_interrupt_stime = System.millis();
 23ef378:	f7f9 f852 	bl	23e8420 <_ZN11SystemClass6millisEv>
  wind.gust = 0.0;
 23ef37c:	2200      	movs	r2, #0
  anemometer_interrupt_stime = System.millis();
 23ef37e:	4b20      	ldr	r3, [pc, #128]	; (23ef400 <_Z28Wind_Distance_Air_Initializev+0x98>)
    if (PM25AQI_exists) {
 23ef380:	4f20      	ldr	r7, [pc, #128]	; (23ef404 <_Z28Wind_Distance_Air_Initializev+0x9c>)
  anemometer_interrupt_stime = System.millis();
 23ef382:	e9c3 0100 	strd	r0, r1, [r3]
  wind.gust = 0.0;
 23ef386:	4b20      	ldr	r3, [pc, #128]	; (23ef408 <_Z28Wind_Distance_Air_Initializev+0xa0>)
 23ef388:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
  wind.gust_direction = -1;
 23ef38c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  wind.bucket_idx = 0;
 23ef390:	f8c3 41e0 	str.w	r4, [r3, #480]	; 0x1e0
 23ef394:	243c      	movs	r4, #60	; 0x3c
  wind.gust_direction = -1;
 23ef396:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
    lora_msg_poll(); // 750ms Second Delay
 23ef39a:	f7ff ffd3 	bl	23ef344 <_Z13lora_msg_pollv>
    HeartBeat();     // Provides a 250ms delay
 23ef39e:	f7fd fcdf 	bl	23ecd60 <_Z9HeartBeatv>
    Wind_TakeReading();
 23ef3a2:	f7fb fbed 	bl	23eab80 <_Z16Wind_TakeReadingv>
    if (A4_State == A4_STATE_DISTANCE) {
 23ef3a6:	6833      	ldr	r3, [r6, #0]
 23ef3a8:	2b01      	cmp	r3, #1
 23ef3aa:	d101      	bne.n	23ef3b0 <_Z28Wind_Distance_Air_Initializev+0x48>
      DistanceGauge_TakeReading();
 23ef3ac:	f7fb f94c 	bl	23ea648 <_Z25DistanceGauge_TakeReadingv>
    if (PM25AQI_exists) {
 23ef3b0:	783b      	ldrb	r3, [r7, #0]
 23ef3b2:	b10b      	cbz	r3, 23ef3b8 <_Z28Wind_Distance_Air_Initializev+0x50>
      pm25aqi_TakeReading();
 23ef3b4:	f7fa fe9a 	bl	23ea0ec <_Z19pm25aqi_TakeReadingv>
    if (SerialConsoleEnabled) Serial.print(".");  // Provide Serial Console some feedback as we loop and wait til next observation
 23ef3b8:	4d14      	ldr	r5, [pc, #80]	; (23ef40c <_Z28Wind_Distance_Air_Initializev+0xa4>)
 23ef3ba:	782b      	ldrb	r3, [r5, #0]
 23ef3bc:	b123      	cbz	r3, 23ef3c8 <_Z28Wind_Distance_Air_Initializev+0x60>
 23ef3be:	f00a fdb9 	bl	23f9f34 <_Z16_fetch_usbserialv>
 23ef3c2:	4913      	ldr	r1, [pc, #76]	; (23ef410 <_Z28Wind_Distance_Air_Initializev+0xa8>)
 23ef3c4:	f00a f991 	bl	23f96ea <_ZN5Print5printEPKc>
    OLED_spin();
 23ef3c8:	f7f9 f93c 	bl	23e8644 <_Z9OLED_spinv>
  for (int i=0; i< WIND_READINGS; i++) {
 23ef3cc:	3c01      	subs	r4, #1
 23ef3ce:	d1e4      	bne.n	23ef39a <_Z28Wind_Distance_Air_Initializev+0x32>
  Wind_TakeReading();
 23ef3d0:	f7fb fbd6 	bl	23eab80 <_Z16Wind_TakeReadingv>
  if (A4_State == A4_STATE_DISTANCE) {
 23ef3d4:	6833      	ldr	r3, [r6, #0]
 23ef3d6:	2b01      	cmp	r3, #1
 23ef3d8:	d101      	bne.n	23ef3de <_Z28Wind_Distance_Air_Initializev+0x76>
    DistanceGauge_TakeReading();
 23ef3da:	f7fb f935 	bl	23ea648 <_Z25DistanceGauge_TakeReadingv>
  if (SerialConsoleEnabled) Serial.println();  // Send a newline out to cleanup after all the periods we have been logging
 23ef3de:	782b      	ldrb	r3, [r5, #0]
 23ef3e0:	b11b      	cbz	r3, 23ef3ea <_Z28Wind_Distance_Air_Initializev+0x82>
 23ef3e2:	f00a fda7 	bl	23f9f34 <_Z16_fetch_usbserialv>
 23ef3e6:	f00a f98b 	bl	23f9700 <_ZN5Print7printlnEv>
  ws_refresh = false; // Set to false since we have just initialized wind speed data.
 23ef3ea:	2200      	movs	r2, #0
 23ef3ec:	4b09      	ldr	r3, [pc, #36]	; (23ef414 <_Z28Wind_Distance_Air_Initializev+0xac>)
 23ef3ee:	701a      	strb	r2, [r3, #0]
}
 23ef3f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23ef3f2:	bf00      	nop
 23ef3f4:	023fe643 	.word	0x023fe643
 23ef3f8:	1006a968 	.word	0x1006a968
 23ef3fc:	1006a2f4 	.word	0x1006a2f4
 23ef400:	1006a970 	.word	0x1006a970
 23ef404:	1006a364 	.word	0x1006a364
 23ef408:	1007ac78 	.word	0x1007ac78
 23ef40c:	1006a827 	.word	0x1006a827
 23ef410:	023fe653 	.word	0x023fe653
 23ef414:	1007ae64 	.word	0x1007ae64

023ef418 <_Z14BackGroundWorkv>:
void BackGroundWork() {
 23ef418:	b538      	push	{r3, r4, r5, lr}
  uint64_t OneSecondFromNow = System.millis() + 1000;
 23ef41a:	f7f9 f801 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23ef41e:	f510 747a 	adds.w	r4, r0, #1000	; 0x3e8
 23ef422:	f141 0500 	adc.w	r5, r1, #0
  Wind_TakeReading();
 23ef426:	f7fb fbab 	bl	23eab80 <_Z16Wind_TakeReadingv>
  if (A4_State == A4_STATE_DISTANCE) {
 23ef42a:	4b16      	ldr	r3, [pc, #88]	; (23ef484 <_Z14BackGroundWorkv+0x6c>)
 23ef42c:	681b      	ldr	r3, [r3, #0]
 23ef42e:	2b01      	cmp	r3, #1
 23ef430:	d101      	bne.n	23ef436 <_Z14BackGroundWorkv+0x1e>
    DistanceGauge_TakeReading();
 23ef432:	f7fb f909 	bl	23ea648 <_Z25DistanceGauge_TakeReadingv>
  if (PM25AQI_exists) {
 23ef436:	4b14      	ldr	r3, [pc, #80]	; (23ef488 <_Z14BackGroundWorkv+0x70>)
 23ef438:	781b      	ldrb	r3, [r3, #0]
 23ef43a:	b10b      	cbz	r3, 23ef440 <_Z14BackGroundWorkv+0x28>
    pm25aqi_TakeReading();
 23ef43c:	f7fa fe56 	bl	23ea0ec <_Z19pm25aqi_TakeReadingv>
  HeartBeat();  // Burns 250ms
 23ef440:	f7fd fc8e 	bl	23ecd60 <_Z9HeartBeatv>
  if (LORA_exists) {
 23ef444:	4b11      	ldr	r3, [pc, #68]	; (23ef48c <_Z14BackGroundWorkv+0x74>)
 23ef446:	781b      	ldrb	r3, [r3, #0]
 23ef448:	b10b      	cbz	r3, 23ef44e <_Z14BackGroundWorkv+0x36>
    lora_msg_poll(); // Provides a 750ms delay
 23ef44a:	f7ff ff7b 	bl	23ef344 <_Z13lora_msg_pollv>
  int64_t TimeRemaining = (OneSecondFromNow - System.millis());
 23ef44e:	f7f8 ffe7 	bl	23e8420 <_ZN11SystemClass6millisEv>
  if ((TimeRemaining > 0) && (TimeRemaining < 1000)) {
 23ef452:	f240 33e7 	movw	r3, #999	; 0x3e7
  int64_t TimeRemaining = (OneSecondFromNow - System.millis());
 23ef456:	1a20      	subs	r0, r4, r0
 23ef458:	eb65 0101 	sbc.w	r1, r5, r1
  if ((TimeRemaining > 0) && (TimeRemaining < 1000)) {
 23ef45c:	1e42      	subs	r2, r0, #1
 23ef45e:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 23ef462:	429a      	cmp	r2, r3
 23ef464:	f171 0300 	sbcs.w	r3, r1, #0
 23ef468:	d201      	bcs.n	23ef46e <_Z14BackGroundWorkv+0x56>
    delay (TimeRemaining);
 23ef46a:	f008 ff57 	bl	23f831c <delay>
  if (TurnLedOff) {   // Turned on by rain gauge interrupt handler
 23ef46e:	4c08      	ldr	r4, [pc, #32]	; (23ef490 <_Z14BackGroundWorkv+0x78>)
 23ef470:	7823      	ldrb	r3, [r4, #0]
 23ef472:	b133      	cbz	r3, 23ef482 <_Z14BackGroundWorkv+0x6a>
    digitalWrite(LED_PIN, LOW);  
 23ef474:	4b07      	ldr	r3, [pc, #28]	; (23ef494 <_Z14BackGroundWorkv+0x7c>)
 23ef476:	2100      	movs	r1, #0
 23ef478:	8818      	ldrh	r0, [r3, #0]
 23ef47a:	f00a fed8 	bl	23fa22e <digitalWrite>
    TurnLedOff = false;
 23ef47e:	2300      	movs	r3, #0
 23ef480:	7023      	strb	r3, [r4, #0]
}
 23ef482:	bd38      	pop	{r3, r4, r5, pc}
 23ef484:	1006a2f4 	.word	0x1006a2f4
 23ef488:	1006a364 	.word	0x1006a364
 23ef48c:	1006a349 	.word	0x1006a349
 23ef490:	1006a837 	.word	0x1006a837
 23ef494:	1006a1a4 	.word	0x1006a1a4

023ef498 <_Z16Particle_PublishPc>:
/*
 * ======================================================================================================================
 * Particle_Publish() - Publish to Particle what is in msgbuf
 * ======================================================================================================================
 */
bool Particle_Publish(char *EventName) {
 23ef498:	b5f0      	push	{r4, r5, r6, r7, lr}
 23ef49a:	b087      	sub	sp, #28
 23ef49c:	4604      	mov	r4, r0
 23ef49e:	f008 fd53 	bl	23f7f48 <spark_cloud_flag_connected>
  // Calling Particle.publish() when the cloud connection has been turned off will not publish an event. 
  // This is indicated by the return success code of false. If the cloud connection is turned on and 
  // trying to connect to the cloud unsuccessfully, Particle.publish() may block for up to 20 seconds 
  // (normal conditions) to 10 minutes (unusual conditions). Checking Particle.connected() 
  // before calling Particle.publish() can help prevent this.
  if (Particle.connected()) {
 23ef4a2:	4605      	mov	r5, r0
 23ef4a4:	2800      	cmp	r0, #0
 23ef4a6:	d03e      	beq.n	23ef526 <_Z16Particle_PublishPc+0x8e>
    uint64_t start_ts = System.millis();
 23ef4a8:	f7f8 ffba 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23ef4ac:	4606      	mov	r6, r0
        return publish_event(eventName, eventData, eventData ? std::strlen(eventData) : 0, static_cast<int>(particle::ContentType::TEXT), ttl, flags1 | flags2);
 23ef4ae:	4820      	ldr	r0, [pc, #128]	; (23ef530 <_Z16Particle_PublishPc+0x98>)
 23ef4b0:	460f      	mov	r7, r1
 23ef4b2:	f7f8 f9b9 	bl	23e7828 <strlen>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 23ef4b6:	4a1f      	ldr	r2, [pc, #124]	; (23ef534 <_Z16Particle_PublishPc+0x9c>)
 23ef4b8:	2500      	movs	r5, #0
 23ef4ba:	7812      	ldrb	r2, [r2, #0]
 23ef4bc:	4603      	mov	r3, r0
 23ef4be:	f88d 2008 	strb.w	r2, [sp, #8]
 23ef4c2:	223c      	movs	r2, #60	; 0x3c
 23ef4c4:	4621      	mov	r1, r4
 23ef4c6:	e9cd 5200 	strd	r5, r2, [sp]
 23ef4ca:	a804      	add	r0, sp, #16
 23ef4cc:	4a18      	ldr	r2, [pc, #96]	; (23ef530 <_Z16Particle_PublishPc+0x98>)
 23ef4ce:	f009 faff 	bl	23f8ad0 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE>
    explicit Future(ResultT result = ResultT()) :
            FutureBase<ResultT, ContextT>(std::make_shared<detail::FutureImpl<ResultT, ContextT>>(std::move(result))) {
    }

    ResultT result() const {
        return this->p_->result();
 23ef4d2:	4629      	mov	r1, r5
 23ef4d4:	9804      	ldr	r0, [sp, #16]
 23ef4d6:	f7ff fcdb 	bl	23eee90 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 23ef4da:	9c05      	ldr	r4, [sp, #20]
 23ef4dc:	4605      	mov	r5, r0
 23ef4de:	b17c      	cbz	r4, 23ef500 <_Z16Particle_PublishPc+0x68>
      if (--_M_use_count == 0)
 23ef4e0:	6863      	ldr	r3, [r4, #4]
 23ef4e2:	3b01      	subs	r3, #1
 23ef4e4:	6063      	str	r3, [r4, #4]
 23ef4e6:	b95b      	cbnz	r3, 23ef500 <_Z16Particle_PublishPc+0x68>
          _M_dispose();
 23ef4e8:	6823      	ldr	r3, [r4, #0]
 23ef4ea:	4620      	mov	r0, r4
 23ef4ec:	689b      	ldr	r3, [r3, #8]
 23ef4ee:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23ef4f0:	68a3      	ldr	r3, [r4, #8]
 23ef4f2:	3b01      	subs	r3, #1
 23ef4f4:	60a3      	str	r3, [r4, #8]
 23ef4f6:	b91b      	cbnz	r3, 23ef500 <_Z16Particle_PublishPc+0x68>
            _M_destroy();
 23ef4f8:	6823      	ldr	r3, [r4, #0]
 23ef4fa:	4620      	mov	r0, r4
 23ef4fc:	68db      	ldr	r3, [r3, #12]
 23ef4fe:	4798      	blx	r3
    if (Particle.publish(EventName, msgbuf, WITH_ACK)) {  // PRIVATE flag is always used even when not specified
 23ef500:	b175      	cbz	r5, 23ef520 <_Z16Particle_PublishPc+0x88>

      // A safty check, If we got hung up for N seconds or more sending, 
      // let's invalidate our wind data and force a reinit in the main loop()
      if ((System.millis() - start_ts) >= 2000) {
 23ef502:	f7f8 ff8d 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23ef506:	1b80      	subs	r0, r0, r6
 23ef508:	eb61 0107 	sbc.w	r1, r1, r7
 23ef50c:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 23ef510:	f171 0300 	sbcs.w	r3, r1, #0
        ws_refresh = true;
 23ef514:	bf22      	ittt	cs
 23ef516:	2201      	movcs	r2, #1
 23ef518:	4b07      	ldrcs	r3, [pc, #28]	; (23ef538 <_Z16Particle_PublishPc+0xa0>)
 23ef51a:	701a      	strbcs	r2, [r3, #0]
      }
      // Currently, a device can publish at rate of about 1 event/sec, with bursts of up to 4 allowed in 1 second. 
      // Back to back burst of 4 messages will take 4 seconds to recover.
      // Our BackGroundWork() provides a delay between observations of 1 second 
      BackGroundWork();
 23ef51c:	f7ff ff7c 	bl	23ef418 <_Z14BackGroundWorkv>
  }
  else {
    Output ("Particle:NotReady");
  }
  return(false);
}
 23ef520:	4628      	mov	r0, r5
 23ef522:	b007      	add	sp, #28
 23ef524:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Output ("Particle:NotReady");
 23ef526:	4805      	ldr	r0, [pc, #20]	; (23ef53c <_Z16Particle_PublishPc+0xa4>)
 23ef528:	f7f9 fa12 	bl	23e8950 <_Z6OutputPKc>
 23ef52c:	e7f8      	b.n	23ef520 <_Z16Particle_PublishPc+0x88>
 23ef52e:	bf00      	nop
 23ef530:	1006f148 	.word	0x1006f148
 23ef534:	1006a83b 	.word	0x1006a83b
 23ef538:	1007ae64 	.word	0x1007ae64
 23ef53c:	023fe655 	.word	0x023fe655

023ef540 <_Z14OBS_FS_Publishi>:
/*
 * ======================================================================================================================
 * OBS_FS_Publish() - obs[i].inuse for this observation must be true prior to calling
 * ======================================================================================================================
 */
bool OBS_FS_Publish(int i) {
 23ef540:	b513      	push	{r0, r1, r4, lr}
 23ef542:	9001      	str	r0, [sp, #4]
  OBS_FS_Build_JSON(i);  
 23ef544:	f7fc fc48 	bl	23ebdd8 <_Z17OBS_FS_Build_JSONi>
  if (Particle_Publish((char *) "FS")) {
 23ef548:	480e      	ldr	r0, [pc, #56]	; (23ef584 <_Z14OBS_FS_Publishi+0x44>)
 23ef54a:	f7ff ffa5 	bl	23ef498 <_Z16Particle_PublishPc>
 23ef54e:	9a01      	ldr	r2, [sp, #4]
 23ef550:	4604      	mov	r4, r0
 23ef552:	b188      	cbz	r0, 23ef578 <_Z14OBS_FS_Publishi+0x38>
    Serial_write (msgbuf);
 23ef554:	480c      	ldr	r0, [pc, #48]	; (23ef588 <_Z14OBS_FS_Publishi+0x48>)
 23ef556:	f7f9 f9d1 	bl	23e88fc <_Z12Serial_writePKc>
    sprintf (Buffer32Bytes, "FS[%d]->PUB OK[%d]", i, strlen(msgbuf)+1);
 23ef55a:	480b      	ldr	r0, [pc, #44]	; (23ef588 <_Z14OBS_FS_Publishi+0x48>)
 23ef55c:	f7f8 f964 	bl	23e7828 <strlen>
 23ef560:	9a01      	ldr	r2, [sp, #4]
 23ef562:	1c43      	adds	r3, r0, #1
 23ef564:	4909      	ldr	r1, [pc, #36]	; (23ef58c <_Z14OBS_FS_Publishi+0x4c>)
 23ef566:	480a      	ldr	r0, [pc, #40]	; (23ef590 <_Z14OBS_FS_Publishi+0x50>)
 23ef568:	f008 fe4c 	bl	23f8204 <sprintf>
    Output(Buffer32Bytes);
    return(true);
  }
  else {
    sprintf (Buffer32Bytes, "FS[%d]->PUB ERR", i);
    Output(Buffer32Bytes);
 23ef56c:	4808      	ldr	r0, [pc, #32]	; (23ef590 <_Z14OBS_FS_Publishi+0x50>)
 23ef56e:	f7f9 f9ef 	bl	23e8950 <_Z6OutputPKc>
    return(false);
  }
}
 23ef572:	4620      	mov	r0, r4
 23ef574:	b002      	add	sp, #8
 23ef576:	bd10      	pop	{r4, pc}
    sprintf (Buffer32Bytes, "FS[%d]->PUB ERR", i);
 23ef578:	4906      	ldr	r1, [pc, #24]	; (23ef594 <_Z14OBS_FS_Publishi+0x54>)
 23ef57a:	4805      	ldr	r0, [pc, #20]	; (23ef590 <_Z14OBS_FS_Publishi+0x50>)
 23ef57c:	f008 fe42 	bl	23f8204 <sprintf>
 23ef580:	e7f4      	b.n	23ef56c <_Z14OBS_FS_Publishi+0x2c>
 23ef582:	bf00      	nop
 23ef584:	023fdcb5 	.word	0x023fdcb5
 23ef588:	1006f148 	.word	0x1006f148
 23ef58c:	023fe667 	.word	0x023fe667
 23ef590:	1006a31f 	.word	0x1006a31f
 23ef594:	023fe67a 	.word	0x023fe67a

023ef598 <_Z17OBS_Relay_Publishi>:
/*
 * ======================================================================================================================
 * OBS_Relay_Publish()
 * ======================================================================================================================
 */
bool OBS_Relay_Publish(int relay_type) {
 23ef598:	b570      	push	{r4, r5, r6, lr}
  if (relay_type > 0) {  // little safty check. Should not be 0
 23ef59a:	1e04      	subs	r4, r0, #0
 23ef59c:	dd16      	ble.n	23ef5cc <_Z17OBS_Relay_Publishi+0x34>
    Serial_write (msgbuf);
    if (Particle_Publish((char *) relay_msgtypes[relay_type])) {
 23ef59e:	4e10      	ldr	r6, [pc, #64]	; (23ef5e0 <_Z17OBS_Relay_Publishi+0x48>)
    Serial_write (msgbuf);
 23ef5a0:	4810      	ldr	r0, [pc, #64]	; (23ef5e4 <_Z17OBS_Relay_Publishi+0x4c>)
 23ef5a2:	f7f9 f9ab 	bl	23e88fc <_Z12Serial_writePKc>
    if (Particle_Publish((char *) relay_msgtypes[relay_type])) {
 23ef5a6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 23ef5aa:	f7ff ff75 	bl	23ef498 <_Z16Particle_PublishPc>
      sprintf (Buffer32Bytes, "RELAY[%s]->PUB OK", relay_msgtypes[relay_type]);
 23ef5ae:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    if (Particle_Publish((char *) relay_msgtypes[relay_type])) {
 23ef5b2:	4605      	mov	r5, r0
 23ef5b4:	b140      	cbz	r0, 23ef5c8 <_Z17OBS_Relay_Publishi+0x30>
      sprintf (Buffer32Bytes, "RELAY[%s]->PUB OK", relay_msgtypes[relay_type]);
 23ef5b6:	490c      	ldr	r1, [pc, #48]	; (23ef5e8 <_Z17OBS_Relay_Publishi+0x50>)
      Output(Buffer32Bytes);
      return(true);
    }
    else {
      sprintf (Buffer32Bytes, "RELAY[%s]->PUB ERR", relay_msgtypes[relay_type]);
 23ef5b8:	480c      	ldr	r0, [pc, #48]	; (23ef5ec <_Z17OBS_Relay_Publishi+0x54>)
 23ef5ba:	f008 fe23 	bl	23f8204 <sprintf>
      Output(Buffer32Bytes);       
 23ef5be:	480b      	ldr	r0, [pc, #44]	; (23ef5ec <_Z17OBS_Relay_Publishi+0x54>)
 23ef5c0:	f7f9 f9c6 	bl	23e8950 <_Z6OutputPKc>
  else {
    sprintf (Buffer32Bytes, "RELAY TYPE[%d] INVALID", relay_type);
    Output(Buffer32Bytes);
    return(false);
  }
}
 23ef5c4:	4628      	mov	r0, r5
 23ef5c6:	bd70      	pop	{r4, r5, r6, pc}
      sprintf (Buffer32Bytes, "RELAY[%s]->PUB ERR", relay_msgtypes[relay_type]);
 23ef5c8:	4909      	ldr	r1, [pc, #36]	; (23ef5f0 <_Z17OBS_Relay_Publishi+0x58>)
 23ef5ca:	e7f5      	b.n	23ef5b8 <_Z17OBS_Relay_Publishi+0x20>
    sprintf (Buffer32Bytes, "RELAY TYPE[%d] INVALID", relay_type);
 23ef5cc:	4622      	mov	r2, r4
 23ef5ce:	4909      	ldr	r1, [pc, #36]	; (23ef5f4 <_Z17OBS_Relay_Publishi+0x5c>)
 23ef5d0:	4806      	ldr	r0, [pc, #24]	; (23ef5ec <_Z17OBS_Relay_Publishi+0x54>)
 23ef5d2:	f008 fe17 	bl	23f8204 <sprintf>
    Output(Buffer32Bytes);
 23ef5d6:	4805      	ldr	r0, [pc, #20]	; (23ef5ec <_Z17OBS_Relay_Publishi+0x54>)
 23ef5d8:	f7f9 f9ba 	bl	23e8950 <_Z6OutputPKc>
    return(false);
 23ef5dc:	2500      	movs	r5, #0
 23ef5de:	e7f1      	b.n	23ef5c4 <_Z17OBS_Relay_Publishi+0x2c>
 23ef5e0:	1006a260 	.word	0x1006a260
 23ef5e4:	1006f148 	.word	0x1006f148
 23ef5e8:	023fe68a 	.word	0x023fe68a
 23ef5ec:	1006a31f 	.word	0x1006a31f
 23ef5f0:	023fe69c 	.word	0x023fe69c
 23ef5f4:	023fe6af 	.word	0x023fe6af

023ef5f8 <_Z7INFO_Dov>:
/*
 * ======================================================================================================================
 * INFO_Do() - Get and Send System Information to Particle Cloud
 * ======================================================================================================================
 */
bool INFO_Do() {
 23ef5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ef5fc:	b0dc      	sub	sp, #368	; 0x170
  char buf[256];
  const char *comma = "";
  time_t ts = Time.now();
 23ef5fe:	f00a fb83 	bl	23f9d08 <_ZN9TimeClass3nowEv>

  Output("INFO_DO()");

  SendSystemInformation = false;
 23ef602:	2500      	movs	r5, #0
  time_t ts = Time.now();
 23ef604:	4604      	mov	r4, r0
 23ef606:	17c6      	asrs	r6, r0, #31
  Output("INFO_DO()");
 23ef608:	48b8      	ldr	r0, [pc, #736]	; (23ef8ec <_Z7INFO_Dov+0x2f4>)
 23ef60a:	f7f9 f9a1 	bl	23e8950 <_Z6OutputPKc>
  SendSystemInformation = false;
 23ef60e:	4bb8      	ldr	r3, [pc, #736]	; (23ef8f0 <_Z7INFO_Dov+0x2f8>)

  memset(buf, 0, sizeof(buf));        // holds string of found sensors 
 23ef610:	4629      	mov	r1, r5
 23ef612:	f44f 7280 	mov.w	r2, #256	; 0x100
 23ef616:	a81c      	add	r0, sp, #112	; 0x70
  SendSystemInformation = false;
 23ef618:	701d      	strb	r5, [r3, #0]
  memset(buf, 0, sizeof(buf));        // holds string of found sensors 
 23ef61a:	f00d fc14 	bl	23fce46 <memset>
  memset(msgbuf, 0, sizeof(msgbuf));  // hold the json formatted message we are building for sending.
 23ef61e:	4bb5      	ldr	r3, [pc, #724]	; (23ef8f4 <_Z7INFO_Dov+0x2fc>)
 23ef620:	4629      	mov	r1, r5
 23ef622:	f44f 6280 	mov.w	r2, #1024	; 0x400
 23ef626:	4618      	mov	r0, r3
 23ef628:	f00d fc0d 	bl	23fce46 <memset>
        n_(0) {
 23ef62c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 23ef630:	4ab1      	ldr	r2, [pc, #708]	; (23ef8f8 <_Z7INFO_Dov+0x300>)
 23ef632:	900c      	str	r0, [sp, #48]	; 0x30

  JSONBufferWriter writer(msgbuf, sizeof(msgbuf)-1);
  writer.beginObject();
 23ef634:	a80a      	add	r0, sp, #40	; 0x28
 23ef636:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
 23ef63a:	920a      	str	r2, [sp, #40]	; 0x28
        state_(BEGIN) {
 23ef63c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 23ef640:	f009 fdab 	bl	23f919a <_ZN5spark10JSONWriter11beginObjectEv>

  writer.name("devid").value(System.deviceID());
 23ef644:	49ad      	ldr	r1, [pc, #692]	; (23ef8fc <_Z7INFO_Dov+0x304>)
 23ef646:	a80a      	add	r0, sp, #40	; 0x28
 23ef648:	f7f8 ff3e 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23ef64c:	4607      	mov	r7, r0
        return spark_deviceID();
 23ef64e:	a80f      	add	r0, sp, #60	; 0x3c
 23ef650:	f008 fc88 	bl	23f7f64 <spark_deviceID>
    return value(val.c_str(), val.length());
 23ef654:	9a11      	ldr	r2, [sp, #68]	; 0x44
 23ef656:	990f      	ldr	r1, [sp, #60]	; 0x3c
 23ef658:	4638      	mov	r0, r7
 23ef65a:	f009 fe93 	bl	23f9384 <_ZN5spark10JSONWriter5valueEPKcj>
 23ef65e:	a80f      	add	r0, sp, #60	; 0x3c
 23ef660:	f00a f9fd 	bl	23f9a5e <_ZN6StringD1Ev>
  writer.name("devos").value(System.version());
 23ef664:	49a6      	ldr	r1, [pc, #664]	; (23ef900 <_Z7INFO_Dov+0x308>)
 23ef666:	a80a      	add	r0, sp, #40	; 0x28
 23ef668:	f7f8 ff2e 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
        SystemVersionInfo info = {};
 23ef66c:	f04f 081c 	mov.w	r8, #28
 23ef670:	4607      	mov	r7, r0
 23ef672:	4642      	mov	r2, r8
 23ef674:	4629      	mov	r1, r5
 23ef676:	a80f      	add	r0, sp, #60	; 0x3c
 23ef678:	f00d fbe5 	bl	23fce46 <memset>
        system_version_info(&info, nullptr);
 23ef67c:	4629      	mov	r1, r5
 23ef67e:	a80f      	add	r0, sp, #60	; 0x3c
        info.size = sizeof(SystemVersionInfo);
 23ef680:	f8ad 803c 	strh.w	r8, [sp, #60]	; 0x3c
        system_version_info(&info, nullptr);
 23ef684:	f008 fbc6 	bl	23f7e14 <system_version_info>
        return String(info.versionString);
 23ef688:	a911      	add	r1, sp, #68	; 0x44
 23ef68a:	a806      	add	r0, sp, #24
 23ef68c:	f00a fa32 	bl	23f9af4 <_ZN6StringC1EPK19__FlashStringHelper>
 23ef690:	9a08      	ldr	r2, [sp, #32]
 23ef692:	9906      	ldr	r1, [sp, #24]
 23ef694:	4638      	mov	r0, r7
 23ef696:	f009 fe75 	bl	23f9384 <_ZN5spark10JSONWriter5valueEPKcj>
 23ef69a:	a806      	add	r0, sp, #24
 23ef69c:	f00a f9df 	bl	23f9a5e <_ZN6StringD1Ev>
  writer.name("freemem").value(System.freeMemory());
 23ef6a0:	4998      	ldr	r1, [pc, #608]	; (23ef904 <_Z7INFO_Dov+0x30c>)
 23ef6a2:	a80a      	add	r0, sp, #40	; 0x28
 23ef6a4:	f7f8 ff10 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23ef6a8:	4607      	mov	r7, r0
 23ef6aa:	f00a fa64 	bl	23f9b76 <_ZN11SystemClass10freeMemoryEv>
 23ef6ae:	4601      	mov	r1, r0
 23ef6b0:	4638      	mov	r0, r7
 23ef6b2:	f009 fda3 	bl	23f91fc <_ZN5spark10JSONWriter5valueEm>
  writer.name("uptime").value(System.uptime());
 23ef6b6:	4994      	ldr	r1, [pc, #592]	; (23ef908 <_Z7INFO_Dov+0x310>)
 23ef6b8:	a80a      	add	r0, sp, #40	; 0x28
 23ef6ba:	f7f8 ff05 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23ef6be:	4607      	mov	r7, r0
        return (hal_timer_millis(nullptr) / 1000);
 23ef6c0:	4628      	mov	r0, r5
 23ef6c2:	f008 f827 	bl	23f7714 <hal_timer_millis>
 23ef6c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23ef6ca:	2300      	movs	r3, #0
 23ef6cc:	f7f7 ff12 	bl	23e74f4 <__aeabi_uldivmod>
 23ef6d0:	4601      	mov	r1, r0
 23ef6d2:	4638      	mov	r0, r7
 23ef6d4:	f009 fd80 	bl	23f91d8 <_ZN5spark10JSONWriter5valueEj>
#endif
#if PLATFORM_ID == PLATFORM_BORON
  writer.name("board").value("boron");
#endif

  sprintf (Buffer32Bytes, "%d-%02d-%02dT%02d:%02d:%02d",
 23ef6d8:	4620      	mov	r0, r4
 23ef6da:	4631      	mov	r1, r6
 23ef6dc:	f00a fadc 	bl	23f9c98 <_ZN9TimeClass4yearEx>
 23ef6e0:	4631      	mov	r1, r6
 23ef6e2:	9005      	str	r0, [sp, #20]
 23ef6e4:	4620      	mov	r0, r4
 23ef6e6:	f00a facd 	bl	23f9c84 <_ZN9TimeClass5monthEx>
 23ef6ea:	4631      	mov	r1, r6
 23ef6ec:	9004      	str	r0, [sp, #16]
 23ef6ee:	4620      	mov	r0, r4
 23ef6f0:	f00a fac0 	bl	23f9c74 <_ZN9TimeClass3dayEx>
 23ef6f4:	4631      	mov	r1, r6
 23ef6f6:	4605      	mov	r5, r0
 23ef6f8:	4620      	mov	r0, r4
 23ef6fa:	f00a faa3 	bl	23f9c44 <_ZN9TimeClass4hourEx>
 23ef6fe:	4631      	mov	r1, r6
 23ef700:	4607      	mov	r7, r0
 23ef702:	4620      	mov	r0, r4
 23ef704:	f00a faa6 	bl	23f9c54 <_ZN9TimeClass6minuteEx>
 23ef708:	4631      	mov	r1, r6
 23ef70a:	4680      	mov	r8, r0
 23ef70c:	4620      	mov	r0, r4
 23ef70e:	f00a faa9 	bl	23f9c64 <_ZN9TimeClass6secondEx>
 23ef712:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 23ef716:	e9cd 8002 	strd	r8, r0, [sp, #8]
 23ef71a:	e9cd 5700 	strd	r5, r7, [sp]
 23ef71e:	497b      	ldr	r1, [pc, #492]	; (23ef90c <_Z7INFO_Dov+0x314>)
 23ef720:	487b      	ldr	r0, [pc, #492]	; (23ef910 <_Z7INFO_Dov+0x318>)
 23ef722:	f008 fd6f 	bl	23f8204 <sprintf>
    Time.year(ts), Time.month(ts), Time.day(ts),
    Time.hour(ts), Time.minute(ts), Time.second(ts));
  writer.name("at").value(Buffer32Bytes);
 23ef726:	497b      	ldr	r1, [pc, #492]	; (23ef914 <_Z7INFO_Dov+0x31c>)
 23ef728:	a80a      	add	r0, sp, #40	; 0x28
 23ef72a:	f7f8 fecd 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23ef72e:	4978      	ldr	r1, [pc, #480]	; (23ef910 <_Z7INFO_Dov+0x318>)
 23ef730:	f7f8 fe20 	bl	23e8374 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  writer.name("ver").value(VERSION_INFO);
 23ef734:	4978      	ldr	r1, [pc, #480]	; (23ef918 <_Z7INFO_Dov+0x320>)
 23ef736:	a80a      	add	r0, sp, #40	; 0x28
 23ef738:	f7f8 fec6 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23ef73c:	4977      	ldr	r1, [pc, #476]	; (23ef91c <_Z7INFO_Dov+0x324>)
 23ef73e:	f7f8 fe19 	bl	23e8374 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  writer.name("hth").value((int) SystemStatusBits);
 23ef742:	4977      	ldr	r1, [pc, #476]	; (23ef920 <_Z7INFO_Dov+0x328>)
 23ef744:	a80a      	add	r0, sp, #40	; 0x28
 23ef746:	f7f8 febf 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23ef74a:	4b76      	ldr	r3, [pc, #472]	; (23ef924 <_Z7INFO_Dov+0x32c>)

  sprintf (Buffer32Bytes,"%ds", OBSERVATION_INTERVAL/1000);
  writer.name("obsi").value(Buffer32Bytes);
  sprintf (Buffer32Bytes,"%dm", (int) obs_tx_interval);
 23ef74c:	4c76      	ldr	r4, [pc, #472]	; (23ef928 <_Z7INFO_Dov+0x330>)
  writer.name("hth").value((int) SystemStatusBits);
 23ef74e:	6819      	ldr	r1, [r3, #0]
 23ef750:	f009 fd30 	bl	23f91b4 <_ZN5spark10JSONWriter5valueEi>
  sprintf (Buffer32Bytes,"%ds", OBSERVATION_INTERVAL/1000);
 23ef754:	223c      	movs	r2, #60	; 0x3c
 23ef756:	4975      	ldr	r1, [pc, #468]	; (23ef92c <_Z7INFO_Dov+0x334>)
 23ef758:	486d      	ldr	r0, [pc, #436]	; (23ef910 <_Z7INFO_Dov+0x318>)
 23ef75a:	f008 fd53 	bl	23f8204 <sprintf>
  writer.name("obsi").value(Buffer32Bytes);
 23ef75e:	4974      	ldr	r1, [pc, #464]	; (23ef930 <_Z7INFO_Dov+0x338>)
 23ef760:	a80a      	add	r0, sp, #40	; 0x28
 23ef762:	f7f8 feb1 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23ef766:	496a      	ldr	r1, [pc, #424]	; (23ef910 <_Z7INFO_Dov+0x318>)
 23ef768:	f7f8 fe04 	bl	23e8374 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  sprintf (Buffer32Bytes,"%dm", (int) obs_tx_interval);
 23ef76c:	6822      	ldr	r2, [r4, #0]
 23ef76e:	4971      	ldr	r1, [pc, #452]	; (23ef934 <_Z7INFO_Dov+0x33c>)
 23ef770:	4867      	ldr	r0, [pc, #412]	; (23ef910 <_Z7INFO_Dov+0x318>)
 23ef772:	f008 fd47 	bl	23f8204 <sprintf>
  writer.name("obsti").value(Buffer32Bytes);
 23ef776:	4970      	ldr	r1, [pc, #448]	; (23ef938 <_Z7INFO_Dov+0x340>)
 23ef778:	a80a      	add	r0, sp, #40	; 0x28
 23ef77a:	f7f8 fea5 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23ef77e:	4964      	ldr	r1, [pc, #400]	; (23ef910 <_Z7INFO_Dov+0x318>)
 23ef780:	f7f8 fdf8 	bl	23e8374 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  // Time 2 Next Transmit in Seconds
  sprintf (Buffer32Bytes, "%ds", (int) ((obs_tx_interval * 60) - ((System.millis() - LastTransmitTime)/1000)));
 23ef784:	233c      	movs	r3, #60	; 0x3c
 23ef786:	6824      	ldr	r4, [r4, #0]
 23ef788:	435c      	muls	r4, r3
 23ef78a:	f7f8 fe49 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23ef78e:	4a6b      	ldr	r2, [pc, #428]	; (23ef93c <_Z7INFO_Dov+0x344>)
 23ef790:	e9d2 3500 	ldrd	r3, r5, [r2]
 23ef794:	1ac0      	subs	r0, r0, r3
 23ef796:	eb61 0105 	sbc.w	r1, r1, r5
 23ef79a:	2300      	movs	r3, #0
 23ef79c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23ef7a0:	f7f7 fea8 	bl	23e74f4 <__aeabi_uldivmod>
 23ef7a4:	4961      	ldr	r1, [pc, #388]	; (23ef92c <_Z7INFO_Dov+0x334>)
 23ef7a6:	1a22      	subs	r2, r4, r0
 23ef7a8:	4859      	ldr	r0, [pc, #356]	; (23ef910 <_Z7INFO_Dov+0x318>)
 23ef7aa:	f008 fd2b 	bl	23f8204 <sprintf>
  writer.name("t2nt").value(Buffer32Bytes);
 23ef7ae:	4964      	ldr	r1, [pc, #400]	; (23ef940 <_Z7INFO_Dov+0x348>)
 23ef7b0:	a80a      	add	r0, sp, #40	; 0x28
 23ef7b2:	f7f8 fe89 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23ef7b6:	4956      	ldr	r1, [pc, #344]	; (23ef910 <_Z7INFO_Dov+0x318>)
 23ef7b8:	f7f8 fddc 	bl	23e8374 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  // Daily Reboot Countdown Timer
  writer.name("drct").value(DailyRebootCountDownTimer);
 23ef7bc:	4961      	ldr	r1, [pc, #388]	; (23ef944 <_Z7INFO_Dov+0x34c>)
 23ef7be:	a80a      	add	r0, sp, #40	; 0x28
 23ef7c0:	f7f8 fe82 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23ef7c4:	4b60      	ldr	r3, [pc, #384]	; (23ef948 <_Z7INFO_Dov+0x350>)
 23ef7c6:	6819      	ldr	r1, [r3, #0]
 23ef7c8:	f009 fcf4 	bl	23f91b4 <_ZN5spark10JSONWriter5valueEi>
    return vwd()->exists(path);
 23ef7cc:	495f      	ldr	r1, [pc, #380]	; (23ef94c <_Z7INFO_Dov+0x354>)
 23ef7ce:	4860      	ldr	r0, [pc, #384]	; (23ef950 <_Z7INFO_Dov+0x358>)
 23ef7d0:	f7f8 fe88 	bl	23e84e4 <_ZN7FatFile6existsEPKc>

  // Need 2 Send File
  if (SD.exists(SD_n2s_file)) {
 23ef7d4:	2800      	cmp	r0, #0
 23ef7d6:	f000 82f3 	beq.w	23efdc0 <_Z7INFO_Dov+0x7c8>
    File tmpFile;
 23ef7da:	a80f      	add	r0, sp, #60	; 0x3c
 23ef7dc:	f7f8 fea2 	bl	23e8524 <_ZN4FileC1Ev>
    tmpFile.open(vwd(), path, oflag);
 23ef7e0:	f244 2302 	movw	r3, #16898	; 0x4202
 23ef7e4:	495a      	ldr	r1, [pc, #360]	; (23ef950 <_Z7INFO_Dov+0x358>)
 23ef7e6:	4a59      	ldr	r2, [pc, #356]	; (23ef94c <_Z7INFO_Dov+0x354>)
 23ef7e8:	a813      	add	r0, sp, #76	; 0x4c
 23ef7ea:	f006 fa24 	bl	23f5c36 <_ZN7FatFile4openEPS_PKci>
    File fp = SD.open(SD_n2s_file, FILE_WRITE);
    if (fp) {
 23ef7ee:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
      writer.name("n2s").value(fp.size());
 23ef7f2:	4958      	ldr	r1, [pc, #352]	; (23ef954 <_Z7INFO_Dov+0x35c>)
 23ef7f4:	a80a      	add	r0, sp, #40	; 0x28
    if (fp) {
 23ef7f6:	2b00      	cmp	r3, #0
 23ef7f8:	f000 82db 	beq.w	23efdb2 <_Z7INFO_Dov+0x7ba>
      writer.name("n2s").value(fp.size());
 23ef7fc:	f7f8 fe64 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23ef800:	991a      	ldr	r1, [sp, #104]	; 0x68
 23ef802:	f009 fcfb 	bl	23f91fc <_ZN5spark10JSONWriter5valueEm>
      fp.close();
 23ef806:	a813      	add	r0, sp, #76	; 0x4c
 23ef808:	f006 fa0e 	bl	23f5c28 <_ZN7FatFile5closeEv>
    writer.name("actsim").value("ERR");
  }
#endif

  // How Pin A4 is Configured
  if (A4_State == A4_STATE_DISTANCE) {
 23ef80c:	4b52      	ldr	r3, [pc, #328]	; (23ef958 <_Z7INFO_Dov+0x360>)
 23ef80e:	681b      	ldr	r3, [r3, #0]
 23ef810:	2b01      	cmp	r3, #1
 23ef812:	f040 82e1 	bne.w	23efdd8 <_Z7INFO_Dov+0x7e0>
    if (dg_adjustment == 1.25) {
 23ef816:	4b51      	ldr	r3, [pc, #324]	; (23ef95c <_Z7INFO_Dov+0x364>)
 23ef818:	eef7 7a04 	vmov.f32	s15, #116	; 0x3fa00000  1.250
 23ef81c:	ed93 7a00 	vldr	s14, [r3]
 23ef820:	eeb4 7a67 	vcmp.f32	s14, s15
 23ef824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      writer.name("a4").value("DIST 5M");
 23ef828:	494d      	ldr	r1, [pc, #308]	; (23ef960 <_Z7INFO_Dov+0x368>)
 23ef82a:	a80a      	add	r0, sp, #40	; 0x28
    if (dg_adjustment == 1.25) {
 23ef82c:	f040 82d0 	bne.w	23efdd0 <_Z7INFO_Dov+0x7d8>
      writer.name("a4").value("DIST 5M");
 23ef830:	f7f8 fe4a 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23ef834:	494b      	ldr	r1, [pc, #300]	; (23ef964 <_Z7INFO_Dov+0x36c>)
  }
  else if (A4_State == A4_STATE_RAW){
    writer.name("a4").value("RAW");
  }
  else {
    writer.name("a4").value("NS"); // Not Set
 23ef836:	f7f8 fd9d 	bl	23e8374 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  }

  if (A5_State == A5_STATE_RAW){
 23ef83a:	4b4b      	ldr	r3, [pc, #300]	; (23ef968 <_Z7INFO_Dov+0x370>)
    writer.name("a5").value("RAW");
 23ef83c:	494b      	ldr	r1, [pc, #300]	; (23ef96c <_Z7INFO_Dov+0x374>)
  if (A5_State == A5_STATE_RAW){
 23ef83e:	681b      	ldr	r3, [r3, #0]
    writer.name("a5").value("RAW");
 23ef840:	a80a      	add	r0, sp, #40	; 0x28
  if (A5_State == A5_STATE_RAW){
 23ef842:	2b01      	cmp	r3, #1
 23ef844:	f040 82da 	bne.w	23efdfc <_Z7INFO_Dov+0x804>
    writer.name("a5").value("RAW");
 23ef848:	f7f8 fe3e 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23ef84c:	4948      	ldr	r1, [pc, #288]	; (23ef970 <_Z7INFO_Dov+0x378>)
  }
  else {
    writer.name("a5").value("NS"); // Not Set
 23ef84e:	f7f8 fd91 	bl	23e8374 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  }

  // Sensors
  if (BMX_1_exists) {
 23ef852:	4b48      	ldr	r3, [pc, #288]	; (23ef974 <_Z7INFO_Dov+0x37c>)
 23ef854:	781b      	ldrb	r3, [r3, #0]
 23ef856:	2b00      	cmp	r3, #0
 23ef858:	f000 82d4 	beq.w	23efe04 <_Z7INFO_Dov+0x80c>
    sprintf (buf+strlen(buf), "%sBMX1(%s)", comma, bmxtype[BMX_1_type]);
 23ef85c:	a81c      	add	r0, sp, #112	; 0x70
 23ef85e:	f7f7 ffe3 	bl	23e7828 <strlen>
 23ef862:	4b45      	ldr	r3, [pc, #276]	; (23ef978 <_Z7INFO_Dov+0x380>)
 23ef864:	ac1c      	add	r4, sp, #112	; 0x70
 23ef866:	781a      	ldrb	r2, [r3, #0]
 23ef868:	4b44      	ldr	r3, [pc, #272]	; (23ef97c <_Z7INFO_Dov+0x384>)
 23ef86a:	4420      	add	r0, r4
 23ef86c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23ef870:	4943      	ldr	r1, [pc, #268]	; (23ef980 <_Z7INFO_Dov+0x388>)
 23ef872:	4a44      	ldr	r2, [pc, #272]	; (23ef984 <_Z7INFO_Dov+0x38c>)
 23ef874:	f008 fcc6 	bl	23f8204 <sprintf>
    comma=",";
 23ef878:	4c43      	ldr	r4, [pc, #268]	; (23ef988 <_Z7INFO_Dov+0x390>)
  }
  if (BMX_2_exists) {
 23ef87a:	4b44      	ldr	r3, [pc, #272]	; (23ef98c <_Z7INFO_Dov+0x394>)
 23ef87c:	781b      	ldrb	r3, [r3, #0]
 23ef87e:	b173      	cbz	r3, 23ef89e <_Z7INFO_Dov+0x2a6>
    sprintf (buf+strlen(buf), "%sBMX2(%s)", comma, bmxtype[BMX_2_type]);
 23ef880:	a81c      	add	r0, sp, #112	; 0x70
 23ef882:	f7f7 ffd1 	bl	23e7828 <strlen>
 23ef886:	4b42      	ldr	r3, [pc, #264]	; (23ef990 <_Z7INFO_Dov+0x398>)
 23ef888:	4942      	ldr	r1, [pc, #264]	; (23ef994 <_Z7INFO_Dov+0x39c>)
 23ef88a:	781a      	ldrb	r2, [r3, #0]
 23ef88c:	4b3b      	ldr	r3, [pc, #236]	; (23ef97c <_Z7INFO_Dov+0x384>)
 23ef88e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23ef892:	4622      	mov	r2, r4
 23ef894:	ac1c      	add	r4, sp, #112	; 0x70
 23ef896:	4420      	add	r0, r4
 23ef898:	f008 fcb4 	bl	23f8204 <sprintf>
    comma=",";
 23ef89c:	4c3a      	ldr	r4, [pc, #232]	; (23ef988 <_Z7INFO_Dov+0x390>)
  }
  if (MCP_1_exists) {
 23ef89e:	4b3e      	ldr	r3, [pc, #248]	; (23ef998 <_Z7INFO_Dov+0x3a0>)
 23ef8a0:	781b      	ldrb	r3, [r3, #0]
 23ef8a2:	b14b      	cbz	r3, 23ef8b8 <_Z7INFO_Dov+0x2c0>
    sprintf (buf+strlen(buf), "%sMCP1", comma);
 23ef8a4:	a81c      	add	r0, sp, #112	; 0x70
 23ef8a6:	f7f7 ffbf 	bl	23e7828 <strlen>
 23ef8aa:	ab1c      	add	r3, sp, #112	; 0x70
 23ef8ac:	4622      	mov	r2, r4
 23ef8ae:	493b      	ldr	r1, [pc, #236]	; (23ef99c <_Z7INFO_Dov+0x3a4>)
 23ef8b0:	4418      	add	r0, r3
 23ef8b2:	f008 fca7 	bl	23f8204 <sprintf>
    comma=",";
 23ef8b6:	4c34      	ldr	r4, [pc, #208]	; (23ef988 <_Z7INFO_Dov+0x390>)
  }
  if (MCP_2_exists) {
 23ef8b8:	4b39      	ldr	r3, [pc, #228]	; (23ef9a0 <_Z7INFO_Dov+0x3a8>)
 23ef8ba:	781b      	ldrb	r3, [r3, #0]
 23ef8bc:	b14b      	cbz	r3, 23ef8d2 <_Z7INFO_Dov+0x2da>
    sprintf (buf+strlen(buf), "%sMCP2", comma);
 23ef8be:	a81c      	add	r0, sp, #112	; 0x70
 23ef8c0:	f7f7 ffb2 	bl	23e7828 <strlen>
 23ef8c4:	ab1c      	add	r3, sp, #112	; 0x70
 23ef8c6:	4622      	mov	r2, r4
 23ef8c8:	4936      	ldr	r1, [pc, #216]	; (23ef9a4 <_Z7INFO_Dov+0x3ac>)
 23ef8ca:	4418      	add	r0, r3
 23ef8cc:	f008 fc9a 	bl	23f8204 <sprintf>
    comma=",";
 23ef8d0:	4c2d      	ldr	r4, [pc, #180]	; (23ef988 <_Z7INFO_Dov+0x390>)
  }
  if (MCP_3_exists) {
 23ef8d2:	4d35      	ldr	r5, [pc, #212]	; (23ef9a8 <_Z7INFO_Dov+0x3b0>)
 23ef8d4:	782b      	ldrb	r3, [r5, #0]
 23ef8d6:	2b00      	cmp	r3, #0
 23ef8d8:	d06d      	beq.n	23ef9b6 <_Z7INFO_Dov+0x3be>
    sprintf (buf+strlen(buf), "%sMCP3/gt1", comma);
 23ef8da:	a81c      	add	r0, sp, #112	; 0x70
 23ef8dc:	f7f7 ffa4 	bl	23e7828 <strlen>
 23ef8e0:	ab1c      	add	r3, sp, #112	; 0x70
 23ef8e2:	4622      	mov	r2, r4
 23ef8e4:	4931      	ldr	r1, [pc, #196]	; (23ef9ac <_Z7INFO_Dov+0x3b4>)
 23ef8e6:	4418      	add	r0, r3
 23ef8e8:	e062      	b.n	23ef9b0 <_Z7INFO_Dov+0x3b8>
 23ef8ea:	bf00      	nop
 23ef8ec:	023fe6e8 	.word	0x023fe6e8
 23ef8f0:	1006a228 	.word	0x1006a228
 23ef8f4:	1006f148 	.word	0x1006f148
 23ef8f8:	023ffab4 	.word	0x023ffab4
 23ef8fc:	023fe6f2 	.word	0x023fe6f2
 23ef900:	023fe6f8 	.word	0x023fe6f8
 23ef904:	023fe6fe 	.word	0x023fe6fe
 23ef908:	023fe706 	.word	0x023fe706
 23ef90c:	023fd36b 	.word	0x023fd36b
 23ef910:	1006a31f 	.word	0x1006a31f
 23ef914:	023fdc9d 	.word	0x023fdc9d
 23ef918:	023fe70d 	.word	0x023fe70d
 23ef91c:	023fe711 	.word	0x023fe711
 23ef920:	023fdca4 	.word	0x023fdca4
 23ef924:	1006a22c 	.word	0x1006a22c
 23ef928:	1006a258 	.word	0x1006a258
 23ef92c:	023fe71e 	.word	0x023fe71e
 23ef930:	023fe722 	.word	0x023fe722
 23ef934:	023fe727 	.word	0x023fe727
 23ef938:	023fe72b 	.word	0x023fe72b
 23ef93c:	1006a358 	.word	0x1006a358
 23ef940:	023fe731 	.word	0x023fe731
 23ef944:	023fe736 	.word	0x023fe736
 23ef948:	1006a340 	.word	0x1006a340
 23ef94c:	1006a1ff 	.word	0x1006a1ff
 23ef950:	1006a7a4 	.word	0x1006a7a4
 23ef954:	023fe73b 	.word	0x023fe73b
 23ef958:	1006a2f4 	.word	0x1006a2f4
 23ef95c:	1006a254 	.word	0x1006a254
 23ef960:	023fe73f 	.word	0x023fe73f
 23ef964:	023fe742 	.word	0x023fe742
 23ef968:	1006a2f8 	.word	0x1006a2f8
 23ef96c:	023fe75a 	.word	0x023fe75a
 23ef970:	023fdee9 	.word	0x023fdee9
 23ef974:	1006a31a 	.word	0x1006a31a
 23ef978:	1006a31b 	.word	0x1006a31b
 23ef97c:	1006a230 	.word	0x1006a230
 23ef980:	023fe75d 	.word	0x023fe75d
 23ef984:	023fdc09 	.word	0x023fdc09
 23ef988:	023fdb86 	.word	0x023fdb86
 23ef98c:	1006a31d 	.word	0x1006a31d
 23ef990:	1006a31e 	.word	0x1006a31e
 23ef994:	023fe768 	.word	0x023fe768
 23ef998:	1006a360 	.word	0x1006a360
 23ef99c:	023fe773 	.word	0x023fe773
 23ef9a0:	1006a361 	.word	0x1006a361
 23ef9a4:	023fe77a 	.word	0x023fe77a
 23ef9a8:	1006a362 	.word	0x1006a362
 23ef9ac:	023fe781 	.word	0x023fe781
 23ef9b0:	f008 fc28 	bl	23f8204 <sprintf>
    comma=",";
 23ef9b4:	4c97      	ldr	r4, [pc, #604]	; (23efc14 <_Z7INFO_Dov+0x61c>)
  }
  if (MCP_4_exists) {
 23ef9b6:	4b98      	ldr	r3, [pc, #608]	; (23efc18 <_Z7INFO_Dov+0x620>)
 23ef9b8:	781b      	ldrb	r3, [r3, #0]
 23ef9ba:	b14b      	cbz	r3, 23ef9d0 <_Z7INFO_Dov+0x3d8>
    sprintf (buf+strlen(buf), "%sMCP4/gt2", comma);
 23ef9bc:	a81c      	add	r0, sp, #112	; 0x70
 23ef9be:	f7f7 ff33 	bl	23e7828 <strlen>
 23ef9c2:	ab1c      	add	r3, sp, #112	; 0x70
 23ef9c4:	4622      	mov	r2, r4
 23ef9c6:	4995      	ldr	r1, [pc, #596]	; (23efc1c <_Z7INFO_Dov+0x624>)
 23ef9c8:	4418      	add	r0, r3
 23ef9ca:	f008 fc1b 	bl	23f8204 <sprintf>
    comma=",";
 23ef9ce:	4c91      	ldr	r4, [pc, #580]	; (23efc14 <_Z7INFO_Dov+0x61c>)
  }
  if (SHT_1_exists) {
 23ef9d0:	4b93      	ldr	r3, [pc, #588]	; (23efc20 <_Z7INFO_Dov+0x628>)
 23ef9d2:	781b      	ldrb	r3, [r3, #0]
 23ef9d4:	b14b      	cbz	r3, 23ef9ea <_Z7INFO_Dov+0x3f2>
    sprintf (buf+strlen(buf), "%sSHT1", comma);
 23ef9d6:	a81c      	add	r0, sp, #112	; 0x70
 23ef9d8:	f7f7 ff26 	bl	23e7828 <strlen>
 23ef9dc:	ab1c      	add	r3, sp, #112	; 0x70
 23ef9de:	4622      	mov	r2, r4
 23ef9e0:	4990      	ldr	r1, [pc, #576]	; (23efc24 <_Z7INFO_Dov+0x62c>)
 23ef9e2:	4418      	add	r0, r3
 23ef9e4:	f008 fc0e 	bl	23f8204 <sprintf>
    comma=",";
 23ef9e8:	4c8a      	ldr	r4, [pc, #552]	; (23efc14 <_Z7INFO_Dov+0x61c>)
  }
  if (SHT_2_exists) {
 23ef9ea:	4b8f      	ldr	r3, [pc, #572]	; (23efc28 <_Z7INFO_Dov+0x630>)
 23ef9ec:	781b      	ldrb	r3, [r3, #0]
 23ef9ee:	b14b      	cbz	r3, 23efa04 <_Z7INFO_Dov+0x40c>
    sprintf (buf+strlen(buf), "%sSHT2", comma);
 23ef9f0:	a81c      	add	r0, sp, #112	; 0x70
 23ef9f2:	f7f7 ff19 	bl	23e7828 <strlen>
 23ef9f6:	ab1c      	add	r3, sp, #112	; 0x70
 23ef9f8:	4622      	mov	r2, r4
 23ef9fa:	498c      	ldr	r1, [pc, #560]	; (23efc2c <_Z7INFO_Dov+0x634>)
 23ef9fc:	4418      	add	r0, r3
 23ef9fe:	f008 fc01 	bl	23f8204 <sprintf>
    comma=",";
 23efa02:	4c84      	ldr	r4, [pc, #528]	; (23efc14 <_Z7INFO_Dov+0x61c>)
  }
  if (HDC_1_exists) {
 23efa04:	4b8a      	ldr	r3, [pc, #552]	; (23efc30 <_Z7INFO_Dov+0x638>)
 23efa06:	781b      	ldrb	r3, [r3, #0]
 23efa08:	b14b      	cbz	r3, 23efa1e <_Z7INFO_Dov+0x426>
    sprintf (buf+strlen(buf), "%sHDC1", comma);
 23efa0a:	a81c      	add	r0, sp, #112	; 0x70
 23efa0c:	f7f7 ff0c 	bl	23e7828 <strlen>
 23efa10:	ab1c      	add	r3, sp, #112	; 0x70
 23efa12:	4622      	mov	r2, r4
 23efa14:	4987      	ldr	r1, [pc, #540]	; (23efc34 <_Z7INFO_Dov+0x63c>)
 23efa16:	4418      	add	r0, r3
 23efa18:	f008 fbf4 	bl	23f8204 <sprintf>
    comma=",";
 23efa1c:	4c7d      	ldr	r4, [pc, #500]	; (23efc14 <_Z7INFO_Dov+0x61c>)
  }
  if (HDC_2_exists) {
 23efa1e:	4b86      	ldr	r3, [pc, #536]	; (23efc38 <_Z7INFO_Dov+0x640>)
 23efa20:	781b      	ldrb	r3, [r3, #0]
 23efa22:	b14b      	cbz	r3, 23efa38 <_Z7INFO_Dov+0x440>
    sprintf (buf+strlen(buf), "%sHDC2", comma);
 23efa24:	a81c      	add	r0, sp, #112	; 0x70
 23efa26:	f7f7 feff 	bl	23e7828 <strlen>
 23efa2a:	ab1c      	add	r3, sp, #112	; 0x70
 23efa2c:	4622      	mov	r2, r4
 23efa2e:	4983      	ldr	r1, [pc, #524]	; (23efc3c <_Z7INFO_Dov+0x644>)
 23efa30:	4418      	add	r0, r3
 23efa32:	f008 fbe7 	bl	23f8204 <sprintf>
    comma=",";
 23efa36:	4c77      	ldr	r4, [pc, #476]	; (23efc14 <_Z7INFO_Dov+0x61c>)
  }
  if (LPS_1_exists) {
 23efa38:	4b81      	ldr	r3, [pc, #516]	; (23efc40 <_Z7INFO_Dov+0x648>)
 23efa3a:	781b      	ldrb	r3, [r3, #0]
 23efa3c:	b14b      	cbz	r3, 23efa52 <_Z7INFO_Dov+0x45a>
    sprintf (buf+strlen(buf), "%sLPS1", comma);
 23efa3e:	a81c      	add	r0, sp, #112	; 0x70
 23efa40:	f7f7 fef2 	bl	23e7828 <strlen>
 23efa44:	ab1c      	add	r3, sp, #112	; 0x70
 23efa46:	4622      	mov	r2, r4
 23efa48:	497e      	ldr	r1, [pc, #504]	; (23efc44 <_Z7INFO_Dov+0x64c>)
 23efa4a:	4418      	add	r0, r3
 23efa4c:	f008 fbda 	bl	23f8204 <sprintf>
    comma=",";
 23efa50:	4c70      	ldr	r4, [pc, #448]	; (23efc14 <_Z7INFO_Dov+0x61c>)
  }
  if (LPS_2_exists) {
 23efa52:	4b7d      	ldr	r3, [pc, #500]	; (23efc48 <_Z7INFO_Dov+0x650>)
 23efa54:	781b      	ldrb	r3, [r3, #0]
 23efa56:	b14b      	cbz	r3, 23efa6c <_Z7INFO_Dov+0x474>
    sprintf (buf+strlen(buf), "%sLPS2", comma);
 23efa58:	a81c      	add	r0, sp, #112	; 0x70
 23efa5a:	f7f7 fee5 	bl	23e7828 <strlen>
 23efa5e:	ab1c      	add	r3, sp, #112	; 0x70
 23efa60:	4622      	mov	r2, r4
 23efa62:	497a      	ldr	r1, [pc, #488]	; (23efc4c <_Z7INFO_Dov+0x654>)
 23efa64:	4418      	add	r0, r3
 23efa66:	f008 fbcd 	bl	23f8204 <sprintf>
    comma=",";
 23efa6a:	4c6a      	ldr	r4, [pc, #424]	; (23efc14 <_Z7INFO_Dov+0x61c>)
  }
  if (HIH8_exists) {
 23efa6c:	4b78      	ldr	r3, [pc, #480]	; (23efc50 <_Z7INFO_Dov+0x658>)
 23efa6e:	781b      	ldrb	r3, [r3, #0]
 23efa70:	b14b      	cbz	r3, 23efa86 <_Z7INFO_Dov+0x48e>
    sprintf (buf+strlen(buf), "%sHIH8", comma);
 23efa72:	a81c      	add	r0, sp, #112	; 0x70
 23efa74:	f7f7 fed8 	bl	23e7828 <strlen>
 23efa78:	ab1c      	add	r3, sp, #112	; 0x70
 23efa7a:	4622      	mov	r2, r4
 23efa7c:	4975      	ldr	r1, [pc, #468]	; (23efc54 <_Z7INFO_Dov+0x65c>)
 23efa7e:	4418      	add	r0, r3
 23efa80:	f008 fbc0 	bl	23f8204 <sprintf>
    comma=",";
 23efa84:	4c63      	ldr	r4, [pc, #396]	; (23efc14 <_Z7INFO_Dov+0x61c>)
  }
  if (SI1145_exists) {
 23efa86:	4b74      	ldr	r3, [pc, #464]	; (23efc58 <_Z7INFO_Dov+0x660>)
 23efa88:	781b      	ldrb	r3, [r3, #0]
 23efa8a:	b14b      	cbz	r3, 23efaa0 <_Z7INFO_Dov+0x4a8>
    sprintf (buf+strlen(buf), "%sSI", comma);
 23efa8c:	a81c      	add	r0, sp, #112	; 0x70
 23efa8e:	f7f7 fecb 	bl	23e7828 <strlen>
 23efa92:	ab1c      	add	r3, sp, #112	; 0x70
 23efa94:	4622      	mov	r2, r4
 23efa96:	4971      	ldr	r1, [pc, #452]	; (23efc5c <_Z7INFO_Dov+0x664>)
 23efa98:	4418      	add	r0, r3
 23efa9a:	f008 fbb3 	bl	23f8204 <sprintf>
    comma=",";
 23efa9e:	4c5d      	ldr	r4, [pc, #372]	; (23efc14 <_Z7INFO_Dov+0x61c>)
  }
  if (VEML7700_exists) {
 23efaa0:	4b6f      	ldr	r3, [pc, #444]	; (23efc60 <_Z7INFO_Dov+0x668>)
 23efaa2:	781b      	ldrb	r3, [r3, #0]
 23efaa4:	b14b      	cbz	r3, 23efaba <_Z7INFO_Dov+0x4c2>
    sprintf (buf+strlen(buf), "%sVEML", comma);
 23efaa6:	a81c      	add	r0, sp, #112	; 0x70
 23efaa8:	f7f7 febe 	bl	23e7828 <strlen>
 23efaac:	ab1c      	add	r3, sp, #112	; 0x70
 23efaae:	4622      	mov	r2, r4
 23efab0:	496c      	ldr	r1, [pc, #432]	; (23efc64 <_Z7INFO_Dov+0x66c>)
 23efab2:	4418      	add	r0, r3
 23efab4:	f008 fba6 	bl	23f8204 <sprintf>
    comma=",";
 23efab8:	4c56      	ldr	r4, [pc, #344]	; (23efc14 <_Z7INFO_Dov+0x61c>)
  }
  if (BLX_exists) {
 23efaba:	4b6b      	ldr	r3, [pc, #428]	; (23efc68 <_Z7INFO_Dov+0x670>)
 23efabc:	781b      	ldrb	r3, [r3, #0]
 23efabe:	b14b      	cbz	r3, 23efad4 <_Z7INFO_Dov+0x4dc>
    sprintf (buf+strlen(buf), "%sBLX", comma);
 23efac0:	a81c      	add	r0, sp, #112	; 0x70
 23efac2:	f7f7 feb1 	bl	23e7828 <strlen>
 23efac6:	ab1c      	add	r3, sp, #112	; 0x70
 23efac8:	4622      	mov	r2, r4
 23efaca:	4968      	ldr	r1, [pc, #416]	; (23efc6c <_Z7INFO_Dov+0x674>)
 23efacc:	4418      	add	r0, r3
 23eface:	f008 fb99 	bl	23f8204 <sprintf>
    comma=",";
 23efad2:	4c50      	ldr	r4, [pc, #320]	; (23efc14 <_Z7INFO_Dov+0x61c>)
  }
  if (AS5600_exists) {
 23efad4:	4b66      	ldr	r3, [pc, #408]	; (23efc70 <_Z7INFO_Dov+0x678>)
 23efad6:	781b      	ldrb	r3, [r3, #0]
 23efad8:	b14b      	cbz	r3, 23efaee <_Z7INFO_Dov+0x4f6>
    sprintf (buf+strlen(buf), "%sAS5600", comma);
 23efada:	a81c      	add	r0, sp, #112	; 0x70
 23efadc:	f7f7 fea4 	bl	23e7828 <strlen>
 23efae0:	ab1c      	add	r3, sp, #112	; 0x70
 23efae2:	4622      	mov	r2, r4
 23efae4:	4963      	ldr	r1, [pc, #396]	; (23efc74 <_Z7INFO_Dov+0x67c>)
 23efae6:	4418      	add	r0, r3
 23efae8:	f008 fb8c 	bl	23f8204 <sprintf>
    comma=",";
 23efaec:	4c49      	ldr	r4, [pc, #292]	; (23efc14 <_Z7INFO_Dov+0x61c>)
  }
  if (TLW_exists) {
 23efaee:	4b62      	ldr	r3, [pc, #392]	; (23efc78 <_Z7INFO_Dov+0x680>)
 23efaf0:	781b      	ldrb	r3, [r3, #0]
 23efaf2:	b14b      	cbz	r3, 23efb08 <_Z7INFO_Dov+0x510>
    sprintf (buf+strlen(buf), "%sTLW", comma);
 23efaf4:	a81c      	add	r0, sp, #112	; 0x70
 23efaf6:	f7f7 fe97 	bl	23e7828 <strlen>
 23efafa:	ab1c      	add	r3, sp, #112	; 0x70
 23efafc:	4622      	mov	r2, r4
 23efafe:	495f      	ldr	r1, [pc, #380]	; (23efc7c <_Z7INFO_Dov+0x684>)
 23efb00:	4418      	add	r0, r3
 23efb02:	f008 fb7f 	bl	23f8204 <sprintf>
    comma=",";
 23efb06:	4c43      	ldr	r4, [pc, #268]	; (23efc14 <_Z7INFO_Dov+0x61c>)
  }
  if (TSM_exists) {
 23efb08:	4b5d      	ldr	r3, [pc, #372]	; (23efc80 <_Z7INFO_Dov+0x688>)
 23efb0a:	781b      	ldrb	r3, [r3, #0]
 23efb0c:	b14b      	cbz	r3, 23efb22 <_Z7INFO_Dov+0x52a>
    sprintf (buf+strlen(buf), "%sTSM", comma);
 23efb0e:	a81c      	add	r0, sp, #112	; 0x70
 23efb10:	f7f7 fe8a 	bl	23e7828 <strlen>
 23efb14:	ab1c      	add	r3, sp, #112	; 0x70
 23efb16:	4622      	mov	r2, r4
 23efb18:	495a      	ldr	r1, [pc, #360]	; (23efc84 <_Z7INFO_Dov+0x68c>)
 23efb1a:	4418      	add	r0, r3
 23efb1c:	f008 fb72 	bl	23f8204 <sprintf>
    comma=",";
 23efb20:	4c3c      	ldr	r4, [pc, #240]	; (23efc14 <_Z7INFO_Dov+0x61c>)
  }
  if (TMSM_exists) {
 23efb22:	4b59      	ldr	r3, [pc, #356]	; (23efc88 <_Z7INFO_Dov+0x690>)
 23efb24:	781b      	ldrb	r3, [r3, #0]
 23efb26:	b14b      	cbz	r3, 23efb3c <_Z7INFO_Dov+0x544>
    sprintf (buf+strlen(buf), "%sTMSM", comma);
 23efb28:	a81c      	add	r0, sp, #112	; 0x70
 23efb2a:	f7f7 fe7d 	bl	23e7828 <strlen>
 23efb2e:	ab1c      	add	r3, sp, #112	; 0x70
 23efb30:	4622      	mov	r2, r4
 23efb32:	4956      	ldr	r1, [pc, #344]	; (23efc8c <_Z7INFO_Dov+0x694>)
 23efb34:	4418      	add	r0, r3
 23efb36:	f008 fb65 	bl	23f8204 <sprintf>
    comma=",";
 23efb3a:	4c36      	ldr	r4, [pc, #216]	; (23efc14 <_Z7INFO_Dov+0x61c>)
  }
  if (HI_exists) {
 23efb3c:	4b54      	ldr	r3, [pc, #336]	; (23efc90 <_Z7INFO_Dov+0x698>)
 23efb3e:	781b      	ldrb	r3, [r3, #0]
 23efb40:	b14b      	cbz	r3, 23efb56 <_Z7INFO_Dov+0x55e>
    sprintf (buf+strlen(buf), "%sHI", comma);
 23efb42:	a81c      	add	r0, sp, #112	; 0x70
 23efb44:	f7f7 fe70 	bl	23e7828 <strlen>
 23efb48:	ab1c      	add	r3, sp, #112	; 0x70
 23efb4a:	4622      	mov	r2, r4
 23efb4c:	4951      	ldr	r1, [pc, #324]	; (23efc94 <_Z7INFO_Dov+0x69c>)
 23efb4e:	4418      	add	r0, r3
 23efb50:	f008 fb58 	bl	23f8204 <sprintf>
    comma=",";
 23efb54:	4c2f      	ldr	r4, [pc, #188]	; (23efc14 <_Z7INFO_Dov+0x61c>)
  }
  if (WBT_exists) {
 23efb56:	4b50      	ldr	r3, [pc, #320]	; (23efc98 <_Z7INFO_Dov+0x6a0>)
 23efb58:	781b      	ldrb	r3, [r3, #0]
 23efb5a:	b14b      	cbz	r3, 23efb70 <_Z7INFO_Dov+0x578>
    sprintf (buf+strlen(buf), "%sWBT", comma);
 23efb5c:	a81c      	add	r0, sp, #112	; 0x70
 23efb5e:	f7f7 fe63 	bl	23e7828 <strlen>
 23efb62:	ab1c      	add	r3, sp, #112	; 0x70
 23efb64:	4622      	mov	r2, r4
 23efb66:	494d      	ldr	r1, [pc, #308]	; (23efc9c <_Z7INFO_Dov+0x6a4>)
 23efb68:	4418      	add	r0, r3
 23efb6a:	f008 fb4b 	bl	23f8204 <sprintf>
    comma=",";
 23efb6e:	4c29      	ldr	r4, [pc, #164]	; (23efc14 <_Z7INFO_Dov+0x61c>)
  }
  if (WBGT_exists) {
 23efb70:	4b4b      	ldr	r3, [pc, #300]	; (23efca0 <_Z7INFO_Dov+0x6a8>)
 23efb72:	781b      	ldrb	r3, [r3, #0]
 23efb74:	b16b      	cbz	r3, 23efb92 <_Z7INFO_Dov+0x59a>
    if (MCP_3_exists) {
      sprintf (buf+strlen(buf), "%sWBGT W/GLOBE", comma);
 23efb76:	a81c      	add	r0, sp, #112	; 0x70
 23efb78:	f7f7 fe56 	bl	23e7828 <strlen>
 23efb7c:	ab1c      	add	r3, sp, #112	; 0x70
 23efb7e:	4418      	add	r0, r3
    if (MCP_3_exists) {
 23efb80:	782b      	ldrb	r3, [r5, #0]
      sprintf (buf+strlen(buf), "%sWBGT W/GLOBE", comma);
 23efb82:	4622      	mov	r2, r4
    if (MCP_3_exists) {
 23efb84:	2b00      	cmp	r3, #0
 23efb86:	f000 813f 	beq.w	23efe08 <_Z7INFO_Dov+0x810>
      sprintf (buf+strlen(buf), "%sWBGT W/GLOBE", comma);
 23efb8a:	4946      	ldr	r1, [pc, #280]	; (23efca4 <_Z7INFO_Dov+0x6ac>)
    }
    else {
      sprintf (buf+strlen(buf), "%sWBGT WO/GLOBE", comma);
 23efb8c:	f008 fb3a 	bl	23f8204 <sprintf>
    }
    comma=",";
 23efb90:	4c20      	ldr	r4, [pc, #128]	; (23efc14 <_Z7INFO_Dov+0x61c>)
  }
  if (PM25AQI_exists) {
 23efb92:	4b45      	ldr	r3, [pc, #276]	; (23efca8 <_Z7INFO_Dov+0x6b0>)
 23efb94:	781b      	ldrb	r3, [r3, #0]
 23efb96:	b14b      	cbz	r3, 23efbac <_Z7INFO_Dov+0x5b4>
    sprintf (buf+strlen(buf), "%sPM25AQ", comma);
 23efb98:	a81c      	add	r0, sp, #112	; 0x70
 23efb9a:	f7f7 fe45 	bl	23e7828 <strlen>
 23efb9e:	ab1c      	add	r3, sp, #112	; 0x70
 23efba0:	4622      	mov	r2, r4
 23efba2:	4942      	ldr	r1, [pc, #264]	; (23efcac <_Z7INFO_Dov+0x6b4>)
 23efba4:	4418      	add	r0, r3
 23efba6:	f008 fb2d 	bl	23f8204 <sprintf>
    comma=",";
 23efbaa:	4c1a      	ldr	r4, [pc, #104]	; (23efc14 <_Z7INFO_Dov+0x61c>)
  }

  GetPinName(RAINGAUGE1_IRQ_PIN, Buffer32Bytes);
 23efbac:	4940      	ldr	r1, [pc, #256]	; (23efcb0 <_Z7INFO_Dov+0x6b8>)
 23efbae:	2010      	movs	r0, #16
 23efbb0:	f7fc fa6c 	bl	23ec08c <_Z10GetPinNametPc>
  sprintf (buf+strlen(buf), "%sRG(%s)", comma, Buffer32Bytes);
 23efbb4:	a81c      	add	r0, sp, #112	; 0x70
 23efbb6:	f7f7 fe37 	bl	23e7828 <strlen>
 23efbba:	4622      	mov	r2, r4
 23efbbc:	ac1c      	add	r4, sp, #112	; 0x70
 23efbbe:	4b3c      	ldr	r3, [pc, #240]	; (23efcb0 <_Z7INFO_Dov+0x6b8>)
 23efbc0:	493c      	ldr	r1, [pc, #240]	; (23efcb4 <_Z7INFO_Dov+0x6bc>)
 23efbc2:	4420      	add	r0, r4
 23efbc4:	f008 fb1e 	bl	23f8204 <sprintf>

  writer.name("sensors").value(buf);
 23efbc8:	493b      	ldr	r1, [pc, #236]	; (23efcb8 <_Z7INFO_Dov+0x6c0>)
 23efbca:	a80a      	add	r0, sp, #40	; 0x28
 23efbcc:	f7f8 fc7c 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23efbd0:	4621      	mov	r1, r4
 23efbd2:	f7f8 fbcf 	bl	23e8374 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  // LoRa
  if (LORA_exists) {
 23efbd6:	4b39      	ldr	r3, [pc, #228]	; (23efcbc <_Z7INFO_Dov+0x6c4>)
 23efbd8:	781b      	ldrb	r3, [r3, #0]
 23efbda:	2b00      	cmp	r3, #0
 23efbdc:	f000 8116 	beq.w	23efe0c <_Z7INFO_Dov+0x814>
    sprintf (buf, "%d,%d,%dMHz", cf_lora_unitid, cf_lora_txpower, cf_lora_freq);  
 23efbe0:	4b37      	ldr	r3, [pc, #220]	; (23efcc0 <_Z7INFO_Dov+0x6c8>)
 23efbe2:	4a38      	ldr	r2, [pc, #224]	; (23efcc4 <_Z7INFO_Dov+0x6cc>)
 23efbe4:	681b      	ldr	r3, [r3, #0]
 23efbe6:	4620      	mov	r0, r4
 23efbe8:	9300      	str	r3, [sp, #0]
 23efbea:	4b37      	ldr	r3, [pc, #220]	; (23efcc8 <_Z7INFO_Dov+0x6d0>)
 23efbec:	6812      	ldr	r2, [r2, #0]
 23efbee:	681b      	ldr	r3, [r3, #0]
 23efbf0:	4936      	ldr	r1, [pc, #216]	; (23efccc <_Z7INFO_Dov+0x6d4>)
 23efbf2:	f008 fb07 	bl	23f8204 <sprintf>
  }
  else {
    sprintf (buf, "NF");
  }
  writer.name("lora").value(buf);
 23efbf6:	4936      	ldr	r1, [pc, #216]	; (23efcd0 <_Z7INFO_Dov+0x6d8>)

  // Oled Display
  if (oled_type) {
 23efbf8:	4c36      	ldr	r4, [pc, #216]	; (23efcd4 <_Z7INFO_Dov+0x6dc>)
  writer.name("lora").value(buf);
 23efbfa:	a80a      	add	r0, sp, #40	; 0x28
 23efbfc:	f7f8 fc64 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23efc00:	a91c      	add	r1, sp, #112	; 0x70
 23efc02:	f7f8 fbb7 	bl	23e8374 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  if (oled_type) {
 23efc06:	6823      	ldr	r3, [r4, #0]
    writer.name("oled").value(OLED32 ? "32" : "64");
 23efc08:	4933      	ldr	r1, [pc, #204]	; (23efcd8 <_Z7INFO_Dov+0x6e0>)
 23efc0a:	a80a      	add	r0, sp, #40	; 0x28
  if (oled_type) {
 23efc0c:	2b00      	cmp	r3, #0
 23efc0e:	f000 8102 	beq.w	23efe16 <_Z7INFO_Dov+0x81e>
 23efc12:	e063      	b.n	23efcdc <_Z7INFO_Dov+0x6e4>
 23efc14:	023fdb86 	.word	0x023fdb86
 23efc18:	1006a363 	.word	0x1006a363
 23efc1c:	023fe78c 	.word	0x023fe78c
 23efc20:	1006a824 	.word	0x1006a824
 23efc24:	023fe797 	.word	0x023fe797
 23efc28:	1006a825 	.word	0x1006a825
 23efc2c:	023fe79e 	.word	0x023fe79e
 23efc30:	1006a344 	.word	0x1006a344
 23efc34:	023fe7a5 	.word	0x023fe7a5
 23efc38:	1006a345 	.word	0x1006a345
 23efc3c:	023fe7ac 	.word	0x023fe7ac
 23efc40:	1006a34a 	.word	0x1006a34a
 23efc44:	023fe7b3 	.word	0x023fe7b3
 23efc48:	1006a34b 	.word	0x1006a34b
 23efc4c:	023fe7ba 	.word	0x023fe7ba
 23efc50:	1006a346 	.word	0x1006a346
 23efc54:	023fe7c1 	.word	0x023fe7c1
 23efc58:	1006a826 	.word	0x1006a826
 23efc5c:	023fe7c8 	.word	0x023fe7c8
 23efc60:	1006a838 	.word	0x1006a838
 23efc64:	023fe7cd 	.word	0x023fe7cd
 23efc68:	1006a318 	.word	0x1006a318
 23efc6c:	023fe7d4 	.word	0x023fe7d4
 23efc70:	1006a1a0 	.word	0x1006a1a0
 23efc74:	023fe7da 	.word	0x023fe7da
 23efc78:	1006a834 	.word	0x1006a834
 23efc7c:	023fe7e3 	.word	0x023fe7e3
 23efc80:	1006a836 	.word	0x1006a836
 23efc84:	023fe7e9 	.word	0x023fe7e9
 23efc88:	1006a835 	.word	0x1006a835
 23efc8c:	023fe7ef 	.word	0x023fe7ef
 23efc90:	1006a347 	.word	0x1006a347
 23efc94:	023fe7f6 	.word	0x023fe7f6
 23efc98:	1006a83a 	.word	0x1006a83a
 23efc9c:	023fe7fb 	.word	0x023fe7fb
 23efca0:	1006a839 	.word	0x1006a839
 23efca4:	023fe801 	.word	0x023fe801
 23efca8:	1006a364 	.word	0x1006a364
 23efcac:	023fe820 	.word	0x023fe820
 23efcb0:	1006a31f 	.word	0x1006a31f
 23efcb4:	023fe829 	.word	0x023fe829
 23efcb8:	023fe832 	.word	0x023fe832
 23efcbc:	1006a349 	.word	0x1006a349
 23efcc0:	1006a244 	.word	0x1006a244
 23efcc4:	1006a24c 	.word	0x1006a24c
 23efcc8:	1006a248 	.word	0x1006a248
 23efccc:	023fe83a 	.word	0x023fe83a
 23efcd0:	023fe846 	.word	0x023fe846
 23efcd4:	1007aa28 	.word	0x1007aa28
 23efcd8:	023fe84b 	.word	0x023fe84b
    writer.name("oled").value(OLED32 ? "32" : "64");
 23efcdc:	f7f8 fbf4 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23efce0:	6821      	ldr	r1, [r4, #0]
 23efce2:	4a55      	ldr	r2, [pc, #340]	; (23efe38 <_Z7INFO_Dov+0x840>)
 23efce4:	4b55      	ldr	r3, [pc, #340]	; (23efe3c <_Z7INFO_Dov+0x844>)
 23efce6:	293c      	cmp	r1, #60	; 0x3c
 23efce8:	bf0c      	ite	eq
 23efcea:	4611      	moveq	r1, r2
 23efcec:	4619      	movne	r1, r3
  else {
    writer.name("oled").value("NF");
  }

  // Serial Console Enable
  GetPinName(SCE_PIN, Buffer32Bytes);
 23efcee:	4d54      	ldr	r5, [pc, #336]	; (23efe40 <_Z7INFO_Dov+0x848>)
    writer.name("oled").value("NF");
 23efcf0:	f7f8 fb40 	bl	23e8374 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  GetPinName(SCE_PIN, Buffer32Bytes);
 23efcf4:	4953      	ldr	r1, [pc, #332]	; (23efe44 <_Z7INFO_Dov+0x84c>)
 23efcf6:	8828      	ldrh	r0, [r5, #0]
 23efcf8:	f7fc f9c8 	bl	23ec08c <_Z10GetPinNametPc>
  sprintf (buf, "scepin(%s)", Buffer32Bytes);
 23efcfc:	4a51      	ldr	r2, [pc, #324]	; (23efe44 <_Z7INFO_Dov+0x84c>)
 23efcfe:	4952      	ldr	r1, [pc, #328]	; (23efe48 <_Z7INFO_Dov+0x850>)
 23efd00:	a81c      	add	r0, sp, #112	; 0x70
 23efd02:	f008 fa7f 	bl	23f8204 <sprintf>
  writer.name(buf).value((digitalRead(SCE_PIN)) ? "DISABLED" : "ENABLED");
 23efd06:	a91c      	add	r1, sp, #112	; 0x70
 23efd08:	a80a      	add	r0, sp, #40	; 0x28
 23efd0a:	f7f8 fbdd 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23efd0e:	4604      	mov	r4, r0
 23efd10:	8828      	ldrh	r0, [r5, #0]
 23efd12:	f00a faa5 	bl	23fa260 <digitalRead>
 23efd16:	4a4d      	ldr	r2, [pc, #308]	; (23efe4c <_Z7INFO_Dov+0x854>)
 23efd18:	494d      	ldr	r1, [pc, #308]	; (23efe50 <_Z7INFO_Dov+0x858>)
 23efd1a:	2800      	cmp	r0, #0
 23efd1c:	bf18      	it	ne
 23efd1e:	4611      	movne	r1, r2
 23efd20:	4620      	mov	r0, r4
 23efd22:	f7f8 fb27 	bl	23e8374 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  writer.name("sce").value((SerialConsoleEnabled) ? "TRUE" : "FALSE");
 23efd26:	494b      	ldr	r1, [pc, #300]	; (23efe54 <_Z7INFO_Dov+0x85c>)
 23efd28:	a80a      	add	r0, sp, #40	; 0x28
 23efd2a:	f7f8 fbcd 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23efd2e:	4b4a      	ldr	r3, [pc, #296]	; (23efe58 <_Z7INFO_Dov+0x860>)
 23efd30:	4a4a      	ldr	r2, [pc, #296]	; (23efe5c <_Z7INFO_Dov+0x864>)
 23efd32:	7819      	ldrb	r1, [r3, #0]
 23efd34:	4b4a      	ldr	r3, [pc, #296]	; (23efe60 <_Z7INFO_Dov+0x868>)
 23efd36:	2900      	cmp	r1, #0
 23efd38:	bf14      	ite	ne
 23efd3a:	4611      	movne	r1, r2
 23efd3c:	4619      	moveq	r1, r3
 23efd3e:	f7f8 fb19 	bl	23e8374 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  writer.endObject();
 23efd42:	a80a      	add	r0, sp, #40	; 0x28
 23efd44:	f009 fa13 	bl	23f916e <_ZN5spark10JSONWriter9endObjectEv>

  // Done profiling system

  // Update INFO.TXT file
  if (SD_exists) {
 23efd48:	4b46      	ldr	r3, [pc, #280]	; (23efe64 <_Z7INFO_Dov+0x86c>)
 23efd4a:	781b      	ldrb	r3, [r3, #0]
 23efd4c:	b1cb      	cbz	r3, 23efd82 <_Z7INFO_Dov+0x78a>
    File tmpFile;
 23efd4e:	a80f      	add	r0, sp, #60	; 0x3c
 23efd50:	f7f8 fbe8 	bl	23e8524 <_ZN4FileC1Ev>
    tmpFile.open(vwd(), path, oflag);
 23efd54:	f244 6302 	movw	r3, #17922	; 0x4602
 23efd58:	4a43      	ldr	r2, [pc, #268]	; (23efe68 <_Z7INFO_Dov+0x870>)
 23efd5a:	4944      	ldr	r1, [pc, #272]	; (23efe6c <_Z7INFO_Dov+0x874>)
 23efd5c:	a813      	add	r0, sp, #76	; 0x4c
 23efd5e:	f005 ff6a 	bl	23f5c36 <_ZN7FatFile4openEPS_PKci>
    File fp = SD.open(SD_INFO_FILE, FILE_WRITE | O_TRUNC); 
    if (fp) {
 23efd62:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 23efd66:	4c42      	ldr	r4, [pc, #264]	; (23efe70 <_Z7INFO_Dov+0x878>)
 23efd68:	2b00      	cmp	r3, #0
 23efd6a:	d058      	beq.n	23efe1e <_Z7INFO_Dov+0x826>
      fp.println(msgbuf);
 23efd6c:	4941      	ldr	r1, [pc, #260]	; (23efe74 <_Z7INFO_Dov+0x87c>)
 23efd6e:	a80f      	add	r0, sp, #60	; 0x3c
 23efd70:	f009 fcd2 	bl	23f9718 <_ZN5Print7printlnEPKc>
      fp.close();
 23efd74:	a813      	add	r0, sp, #76	; 0x4c
 23efd76:	f005 ff57 	bl	23f5c28 <_ZN7FatFile5closeEv>
      SystemStatusBits &= ~SSB_SD;  // Turn Off Bit
 23efd7a:	6823      	ldr	r3, [r4, #0]
 23efd7c:	f023 0302 	bic.w	r3, r3, #2
 23efd80:	6023      	str	r3, [r4, #0]
      SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
      Output ("SD:Open(Info)ERR");
    }
  }

  if (Particle_Publish((char *) "INFO")) {
 23efd82:	483d      	ldr	r0, [pc, #244]	; (23efe78 <_Z7INFO_Dov+0x880>)
 23efd84:	f7ff fb88 	bl	23ef498 <_Z16Particle_PublishPc>
 23efd88:	4604      	mov	r4, r0
 23efd8a:	2800      	cmp	r0, #0
 23efd8c:	d04f      	beq.n	23efe2e <_Z7INFO_Dov+0x836>
    Serial_write (msgbuf);
 23efd8e:	4839      	ldr	r0, [pc, #228]	; (23efe74 <_Z7INFO_Dov+0x87c>)
 23efd90:	f7f8 fdb4 	bl	23e88fc <_Z12Serial_writePKc>
    sprintf (Buffer32Bytes, "INFO->PUB OK[%d]", strlen(msgbuf)+1);
 23efd94:	4837      	ldr	r0, [pc, #220]	; (23efe74 <_Z7INFO_Dov+0x87c>)
 23efd96:	f7f7 fd47 	bl	23e7828 <strlen>
 23efd9a:	4938      	ldr	r1, [pc, #224]	; (23efe7c <_Z7INFO_Dov+0x884>)
 23efd9c:	1c42      	adds	r2, r0, #1
 23efd9e:	4829      	ldr	r0, [pc, #164]	; (23efe44 <_Z7INFO_Dov+0x84c>)
 23efda0:	f008 fa30 	bl	23f8204 <sprintf>
    Output(Buffer32Bytes);
    return(true);
  }
  else {
    sprintf (Buffer32Bytes, "INFO->PUB ERR");
    Output(Buffer32Bytes);
 23efda4:	4827      	ldr	r0, [pc, #156]	; (23efe44 <_Z7INFO_Dov+0x84c>)
 23efda6:	f7f8 fdd3 	bl	23e8950 <_Z6OutputPKc>
    return(false);
  }
 23efdaa:	4620      	mov	r0, r4
 23efdac:	b05c      	add	sp, #368	; 0x170
 23efdae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      writer.name("n2s").value(-1);
 23efdb2:	f7f8 fb89 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23efdb6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 23efdba:	f009 f9fb 	bl	23f91b4 <_ZN5spark10JSONWriter5valueEi>
    virtual ~Print() {}
 23efdbe:	e525      	b.n	23ef80c <_Z7INFO_Dov+0x214>
    writer.name("n2s").value("NF");
 23efdc0:	492f      	ldr	r1, [pc, #188]	; (23efe80 <_Z7INFO_Dov+0x888>)
 23efdc2:	a80a      	add	r0, sp, #40	; 0x28
 23efdc4:	f7f8 fb80 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23efdc8:	492e      	ldr	r1, [pc, #184]	; (23efe84 <_Z7INFO_Dov+0x88c>)
 23efdca:	f7f8 fad3 	bl	23e8374 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
 23efdce:	e51d      	b.n	23ef80c <_Z7INFO_Dov+0x214>
      writer.name("a4").value("DIST 10M");
 23efdd0:	f7f8 fb7a 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23efdd4:	492c      	ldr	r1, [pc, #176]	; (23efe88 <_Z7INFO_Dov+0x890>)
 23efdd6:	e52e      	b.n	23ef836 <_Z7INFO_Dov+0x23e>
  else if (A4_State == A4_STATE_RAIN){
 23efdd8:	2b02      	cmp	r3, #2
    writer.name("a4").value("RG2");
 23efdda:	492c      	ldr	r1, [pc, #176]	; (23efe8c <_Z7INFO_Dov+0x894>)
 23efddc:	a80a      	add	r0, sp, #40	; 0x28
  else if (A4_State == A4_STATE_RAIN){
 23efdde:	d103      	bne.n	23efde8 <_Z7INFO_Dov+0x7f0>
    writer.name("a4").value("RG2");
 23efde0:	f7f8 fb72 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23efde4:	492a      	ldr	r1, [pc, #168]	; (23efe90 <_Z7INFO_Dov+0x898>)
 23efde6:	e526      	b.n	23ef836 <_Z7INFO_Dov+0x23e>
  else if (A4_State == A4_STATE_RAW){
 23efde8:	2b03      	cmp	r3, #3
 23efdea:	d103      	bne.n	23efdf4 <_Z7INFO_Dov+0x7fc>
    writer.name("a4").value("RAW");
 23efdec:	f7f8 fb6c 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23efdf0:	4928      	ldr	r1, [pc, #160]	; (23efe94 <_Z7INFO_Dov+0x89c>)
 23efdf2:	e520      	b.n	23ef836 <_Z7INFO_Dov+0x23e>
    writer.name("a4").value("NS"); // Not Set
 23efdf4:	f7f8 fb68 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23efdf8:	4927      	ldr	r1, [pc, #156]	; (23efe98 <_Z7INFO_Dov+0x8a0>)
 23efdfa:	e51c      	b.n	23ef836 <_Z7INFO_Dov+0x23e>
    writer.name("a5").value("NS"); // Not Set
 23efdfc:	f7f8 fb64 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23efe00:	4925      	ldr	r1, [pc, #148]	; (23efe98 <_Z7INFO_Dov+0x8a0>)
 23efe02:	e524      	b.n	23ef84e <_Z7INFO_Dov+0x256>
  const char *comma = "";
 23efe04:	4c25      	ldr	r4, [pc, #148]	; (23efe9c <_Z7INFO_Dov+0x8a4>)
 23efe06:	e538      	b.n	23ef87a <_Z7INFO_Dov+0x282>
      sprintf (buf+strlen(buf), "%sWBGT WO/GLOBE", comma);
 23efe08:	4925      	ldr	r1, [pc, #148]	; (23efea0 <_Z7INFO_Dov+0x8a8>)
 23efe0a:	e6bf      	b.n	23efb8c <_Z7INFO_Dov+0x594>
    sprintf (buf, "NF");
 23efe0c:	491d      	ldr	r1, [pc, #116]	; (23efe84 <_Z7INFO_Dov+0x88c>)
 23efe0e:	a81c      	add	r0, sp, #112	; 0x70
 23efe10:	f00d f88e 	bl	23fcf30 <strcpy>
 23efe14:	e6ef      	b.n	23efbf6 <_Z7INFO_Dov+0x5fe>
    writer.name("oled").value("NF");
 23efe16:	f7f8 fb57 	bl	23e84c8 <_ZN5spark10JSONWriter4nameEPKc>
 23efe1a:	491a      	ldr	r1, [pc, #104]	; (23efe84 <_Z7INFO_Dov+0x88c>)
 23efe1c:	e767      	b.n	23efcee <_Z7INFO_Dov+0x6f6>
      SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23efe1e:	6823      	ldr	r3, [r4, #0]
      Output ("SD:Open(Info)ERR");
 23efe20:	4820      	ldr	r0, [pc, #128]	; (23efea4 <_Z7INFO_Dov+0x8ac>)
      SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23efe22:	f043 0302 	orr.w	r3, r3, #2
 23efe26:	6023      	str	r3, [r4, #0]
      Output ("SD:Open(Info)ERR");
 23efe28:	f7f8 fd92 	bl	23e8950 <_Z6OutputPKc>
 23efe2c:	e7a9      	b.n	23efd82 <_Z7INFO_Dov+0x78a>
    sprintf (Buffer32Bytes, "INFO->PUB ERR");
 23efe2e:	491e      	ldr	r1, [pc, #120]	; (23efea8 <_Z7INFO_Dov+0x8b0>)
 23efe30:	4804      	ldr	r0, [pc, #16]	; (23efe44 <_Z7INFO_Dov+0x84c>)
 23efe32:	f00d f87d 	bl	23fcf30 <strcpy>
 23efe36:	e7b5      	b.n	23efda4 <_Z7INFO_Dov+0x7ac>
 23efe38:	023fe6c6 	.word	0x023fe6c6
 23efe3c:	023fe6c9 	.word	0x023fe6c9
 23efe40:	1006a1a8 	.word	0x1006a1a8
 23efe44:	1006a31f 	.word	0x1006a31f
 23efe48:	023fe850 	.word	0x023fe850
 23efe4c:	023fe6cc 	.word	0x023fe6cc
 23efe50:	023fe6d5 	.word	0x023fe6d5
 23efe54:	023fe85b 	.word	0x023fe85b
 23efe58:	1006a827 	.word	0x1006a827
 23efe5c:	023fe6dd 	.word	0x023fe6dd
 23efe60:	023fe6e2 	.word	0x023fe6e2
 23efe64:	1006a7ec 	.word	0x1006a7ec
 23efe68:	1006a1e1 	.word	0x1006a1e1
 23efe6c:	1006a7a4 	.word	0x1006a7a4
 23efe70:	1006a22c 	.word	0x1006a22c
 23efe74:	1006f148 	.word	0x1006f148
 23efe78:	023fdd08 	.word	0x023fdd08
 23efe7c:	023fe870 	.word	0x023fe870
 23efe80:	023fe73b 	.word	0x023fe73b
 23efe84:	023fd75f 	.word	0x023fd75f
 23efe88:	023fe74a 	.word	0x023fe74a
 23efe8c:	023fe73f 	.word	0x023fe73f
 23efe90:	023fe753 	.word	0x023fe753
 23efe94:	023fdee9 	.word	0x023fdee9
 23efe98:	023fe757 	.word	0x023fe757
 23efe9c:	023fdc09 	.word	0x023fdc09
 23efea0:	023fe810 	.word	0x023fe810
 23efea4:	023fe85f 	.word	0x023fe85f
 23efea8:	023fe881 	.word	0x023fe881

023efeac <_Z14SD_N2S_Publishv>:
void SD_N2S_Publish() {
 23efeac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23efeb0:	b09a      	sub	sp, #104	; 0x68
  File fp;
 23efeb2:	4668      	mov	r0, sp
 23efeb4:	f7f8 fb36 	bl	23e8524 <_ZN4FileC1Ev>
  if (SD_exists && SD.exists(SD_n2s_file)) {
 23efeb8:	4b72      	ldr	r3, [pc, #456]	; (23f0084 <_Z14SD_N2S_Publishv+0x1d8>)
 23efeba:	781b      	ldrb	r3, [r3, #0]
 23efebc:	2b00      	cmp	r3, #0
 23efebe:	d02f      	beq.n	23eff20 <_Z14SD_N2S_Publishv+0x74>
    return vwd()->exists(path);
 23efec0:	4971      	ldr	r1, [pc, #452]	; (23f0088 <_Z14SD_N2S_Publishv+0x1dc>)
 23efec2:	4872      	ldr	r0, [pc, #456]	; (23f008c <_Z14SD_N2S_Publishv+0x1e0>)
 23efec4:	f7f8 fb0e 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
 23efec8:	2800      	cmp	r0, #0
 23efeca:	d029      	beq.n	23eff20 <_Z14SD_N2S_Publishv+0x74>
    Output ("N2S:Publish");
 23efecc:	4870      	ldr	r0, [pc, #448]	; (23f0090 <_Z14SD_N2S_Publishv+0x1e4>)
 23efece:	f7f8 fd3f 	bl	23e8950 <_Z6OutputPKc>
    File tmpFile;
 23efed2:	a80d      	add	r0, sp, #52	; 0x34
 23efed4:	f7f8 fb26 	bl	23e8524 <_ZN4FileC1Ev>
class File : public FatFile, public Stream {
 23efed8:	ad04      	add	r5, sp, #16
    tmpFile.open(vwd(), path, oflag);
 23efeda:	2300      	movs	r3, #0
 23efedc:	4a6a      	ldr	r2, [pc, #424]	; (23f0088 <_Z14SD_N2S_Publishv+0x1dc>)
 23efede:	496b      	ldr	r1, [pc, #428]	; (23f008c <_Z14SD_N2S_Publishv+0x1e0>)
 23efee0:	a811      	add	r0, sp, #68	; 0x44
 23efee2:	ac11      	add	r4, sp, #68	; 0x44
 23efee4:	f005 fea7 	bl	23f5c36 <_ZN7FatFile4openEPS_PKci>
 23efee8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23efeea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23efeec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23efeee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23efef0:	6823      	ldr	r3, [r4, #0]
 23efef2:	602b      	str	r3, [r5, #0]
class Print
 23efef4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 23efef6:	9301      	str	r3, [sp, #4]
 23efef8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23efefa:	9302      	str	r3, [sp, #8]
 23efefc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 23efefe:	9303      	str	r3, [sp, #12]
    if (fp) {
 23eff00:	f89d 3010 	ldrb.w	r3, [sp, #16]
 23eff04:	2b00      	cmp	r3, #0
 23eff06:	f000 80b8 	beq.w	23f007a <_Z14SD_N2S_Publishv+0x1ce>
    return m_fileSize;
 23eff0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      if (fp.size()<=20) {
 23eff0c:	2b14      	cmp	r3, #20
 23eff0e:	d80a      	bhi.n	23eff26 <_Z14SD_N2S_Publishv+0x7a>
        fp.close();
 23eff10:	a804      	add	r0, sp, #16
 23eff12:	f005 fe89 	bl	23f5c28 <_ZN7FatFile5closeEv>
        Output ("N2S:Empty");
 23eff16:	485f      	ldr	r0, [pc, #380]	; (23f0094 <_Z14SD_N2S_Publishv+0x1e8>)
 23eff18:	f7f8 fd1a 	bl	23e8950 <_Z6OutputPKc>
            SD_N2S_Delete(); // Bad data in the file so delete the file           
 23eff1c:	f7fb fc0e 	bl	23eb73c <_Z13SD_N2S_Deletev>
}
 23eff20:	b01a      	add	sp, #104	; 0x68
 23eff22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (eeprom.n2sfp) {
 23eff26:	f8df 8190 	ldr.w	r8, [pc, #400]	; 23f00b8 <_Z14SD_N2S_Publishv+0x20c>
 23eff2a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 23eff2e:	b121      	cbz	r1, 23eff3a <_Z14SD_N2S_Publishv+0x8e>
          if (fp.size()<=eeprom.n2sfp) {
 23eff30:	4299      	cmp	r1, r3
 23eff32:	d311      	bcc.n	23eff58 <_Z14SD_N2S_Publishv+0xac>
            eeprom.n2sfp = 0; 
 23eff34:	2300      	movs	r3, #0
 23eff36:	f8c8 3014 	str.w	r3, [r8, #20]
 23eff3a:	2400      	movs	r4, #0
 23eff3c:	4625      	mov	r5, r4
 23eff3e:	4f56      	ldr	r7, [pc, #344]	; (23f0098 <_Z14SD_N2S_Publishv+0x1ec>)
            if ( (System.millis() - lastOBS) > OBSERVATION_INTERVAL) {
 23eff40:	f8df 9178 	ldr.w	r9, [pc, #376]	; 23f00bc <_Z14SD_N2S_Publishv+0x210>
              Output ("N2S:OBS Needed");
 23eff44:	f8df a178 	ldr.w	sl, [pc, #376]	; 23f00c0 <_Z14SD_N2S_Publishv+0x214>
        while (fp.available() && (i < MAX_MSGBUF_SIZE )) {
 23eff48:	4668      	mov	r0, sp
 23eff4a:	f7f8 f9d9 	bl	23e8300 <_ZN4File9availableEv>
 23eff4e:	b938      	cbnz	r0, 23eff60 <_Z14SD_N2S_Publishv+0xb4>
            fp.close();
 23eff50:	a804      	add	r0, sp, #16
 23eff52:	f005 fe69 	bl	23f5c28 <_ZN7FatFile5closeEv>
 23eff56:	e7e1      	b.n	23eff1c <_Z14SD_N2S_Publishv+0x70>
    return seekSet(pos);
 23eff58:	a804      	add	r0, sp, #16
 23eff5a:	f005 fd82 	bl	23f5a62 <_ZN7FatFile7seekSetEm>
 23eff5e:	e7ec      	b.n	23eff3a <_Z14SD_N2S_Publishv+0x8e>
        while (fp.available() && (i < MAX_MSGBUF_SIZE )) {
 23eff60:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 23eff64:	da5e      	bge.n	23f0024 <_Z14SD_N2S_Publishv+0x178>
    return FatFile::read();
 23eff66:	a804      	add	r0, sp, #16
 23eff68:	f7f8 fac8 	bl	23e84fc <_ZN7FatFile4readEv>
          ch = fp.read();
 23eff6c:	b2c3      	uxtb	r3, r0
          if (ch == 0x0A) {  // newline
 23eff6e:	2b0a      	cmp	r3, #10
 23eff70:	d16a      	bne.n	23f0048 <_Z14SD_N2S_Publishv+0x19c>
            if (Particle_Publish(EventType)) {
 23eff72:	4630      	mov	r0, r6
 23eff74:	f7ff fa90 	bl	23ef498 <_Z16Particle_PublishPc>
 23eff78:	b330      	cbz	r0, 23effc8 <_Z14SD_N2S_Publishv+0x11c>
              sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
 23eff7a:	4633      	mov	r3, r6
 23eff7c:	4622      	mov	r2, r4
 23eff7e:	4947      	ldr	r1, [pc, #284]	; (23f009c <_Z14SD_N2S_Publishv+0x1f0>)
 23eff80:	4847      	ldr	r0, [pc, #284]	; (23f00a0 <_Z14SD_N2S_Publishv+0x1f4>)
 23eff82:	f008 f93f 	bl	23f8204 <sprintf>
              Output (Buffer32Bytes);
 23eff86:	4846      	ldr	r0, [pc, #280]	; (23f00a0 <_Z14SD_N2S_Publishv+0x1f4>)
 23eff88:	f7f8 fce2 	bl	23e8950 <_Z6OutputPKc>
              Serial_write (msgbuf);
 23eff8c:	4638      	mov	r0, r7
              sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
 23eff8e:	1c65      	adds	r5, r4, #1
              Serial_write (msgbuf);
 23eff90:	f7f8 fcb4 	bl	23e88fc <_Z12Serial_writePKc>
                eeprom.n2sfp = fp.position();
 23eff94:	9b09      	ldr	r3, [sp, #36]	; 0x24
                sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
 23eff96:	462c      	mov	r4, r5
                eeprom.n2sfp = fp.position();
 23eff98:	f8c8 3014 	str.w	r3, [r8, #20]
            if ( (System.millis() - lastOBS) > OBSERVATION_INTERVAL) {
 23eff9c:	f7f8 fa40 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23effa0:	e9d9 2300 	ldrd	r2, r3, [r9]
 23effa4:	1a80      	subs	r0, r0, r2
 23effa6:	eb61 0103 	sbc.w	r1, r1, r3
 23effaa:	f64e 2361 	movw	r3, #60001	; 0xea61
 23effae:	4298      	cmp	r0, r3
 23effb0:	f171 0300 	sbcs.w	r3, r1, #0
 23effb4:	d345      	bcc.n	23f0042 <_Z14SD_N2S_Publishv+0x196>
              Output ("N2S:OBS Needed");
 23effb6:	4650      	mov	r0, sl
 23effb8:	f7f8 fcca 	bl	23e8950 <_Z6OutputPKc>
              if (OBS_Full()) {
 23effbc:	f7fc f840 	bl	23ec040 <_Z8OBS_Fullv>
 23effc0:	2800      	cmp	r0, #0
 23effc2:	d03a      	beq.n	23f003a <_Z14SD_N2S_Publishv+0x18e>
                Output ("N2S:OBS FULL");
 23effc4:	4837      	ldr	r0, [pc, #220]	; (23f00a4 <_Z14SD_N2S_Publishv+0x1f8>)
 23effc6:	e02b      	b.n	23f0020 <_Z14SD_N2S_Publishv+0x174>
              sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:RETRY", sent, EventType);
 23effc8:	4633      	mov	r3, r6
 23effca:	4622      	mov	r2, r4
 23effcc:	4936      	ldr	r1, [pc, #216]	; (23f00a8 <_Z14SD_N2S_Publishv+0x1fc>)
 23effce:	4834      	ldr	r0, [pc, #208]	; (23f00a0 <_Z14SD_N2S_Publishv+0x1f4>)
 23effd0:	f008 f918 	bl	23f8204 <sprintf>
              Output (Buffer32Bytes);
 23effd4:	4832      	ldr	r0, [pc, #200]	; (23f00a0 <_Z14SD_N2S_Publishv+0x1f4>)
 23effd6:	f7f8 fcbb 	bl	23e8950 <_Z6OutputPKc>
              Serial_write (msgbuf);
 23effda:	4638      	mov	r0, r7
 23effdc:	f7f8 fc8e 	bl	23e88fc <_Z12Serial_writePKc>
                BackGroundWork(); 
 23effe0:	f7ff fa1a 	bl	23ef418 <_Z14BackGroundWorkv>
 23effe4:	f7ff fa18 	bl	23ef418 <_Z14BackGroundWorkv>
 23effe8:	f7ff fa16 	bl	23ef418 <_Z14BackGroundWorkv>
 23effec:	f7ff fa14 	bl	23ef418 <_Z14BackGroundWorkv>
 23efff0:	f7ff fa12 	bl	23ef418 <_Z14BackGroundWorkv>
              if (Particle_Publish(EventType)) {
 23efff4:	4630      	mov	r0, r6
 23efff6:	f7ff fa4f 	bl	23ef498 <_Z16Particle_PublishPc>
 23efffa:	b150      	cbz	r0, 23f0012 <_Z14SD_N2S_Publishv+0x166>
                sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
 23efffc:	4633      	mov	r3, r6
 23efffe:	4622      	mov	r2, r4
 23f0000:	4926      	ldr	r1, [pc, #152]	; (23f009c <_Z14SD_N2S_Publishv+0x1f0>)
 23f0002:	4827      	ldr	r0, [pc, #156]	; (23f00a0 <_Z14SD_N2S_Publishv+0x1f4>)
 23f0004:	f008 f8fe 	bl	23f8204 <sprintf>
                Output (Buffer32Bytes);
 23f0008:	4825      	ldr	r0, [pc, #148]	; (23f00a0 <_Z14SD_N2S_Publishv+0x1f4>)
                sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
 23f000a:	1c65      	adds	r5, r4, #1
                Output (Buffer32Bytes);
 23f000c:	f7f8 fca0 	bl	23e8950 <_Z6OutputPKc>
 23f0010:	e7c0      	b.n	23eff94 <_Z14SD_N2S_Publishv+0xe8>
                sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:ERR", sent, EventType);
 23f0012:	4633      	mov	r3, r6
 23f0014:	4622      	mov	r2, r4
 23f0016:	4925      	ldr	r1, [pc, #148]	; (23f00ac <_Z14SD_N2S_Publishv+0x200>)
 23f0018:	4821      	ldr	r0, [pc, #132]	; (23f00a0 <_Z14SD_N2S_Publishv+0x1f4>)
 23f001a:	f008 f8f3 	bl	23f8204 <sprintf>
                Output (Buffer32Bytes);
 23f001e:	4820      	ldr	r0, [pc, #128]	; (23f00a0 <_Z14SD_N2S_Publishv+0x1f4>)
                Output ("N2S:OBS FULL");
 23f0020:	f7f8 fc96 	bl	23e8950 <_Z6OutputPKc>
        if (fp.available() <= 20) {
 23f0024:	4668      	mov	r0, sp
 23f0026:	f7f8 f96b 	bl	23e8300 <_ZN4File9availableEv>
 23f002a:	2814      	cmp	r0, #20
 23f002c:	dd90      	ble.n	23eff50 <_Z14SD_N2S_Publishv+0xa4>
          fp.close();
 23f002e:	a804      	add	r0, sp, #16
 23f0030:	f005 fdfa 	bl	23f5c28 <_ZN7FatFile5closeEv>
          EEPROM_Update(); // Update file postion in the eeprom.
 23f0034:	f7fb f9b4 	bl	23eb3a0 <_Z13EEPROM_Updatev>
 23f0038:	e772      	b.n	23eff20 <_Z14SD_N2S_Publishv+0x74>
                I2C_Check_Sensors(); // Make sure Sensors are online
 23f003a:	f7fa fdbf 	bl	23eabbc <_Z17I2C_Check_Sensorsv>
                OBS_Do();                  
 23f003e:	f7fc ff4f 	bl	23ecee0 <_Z6OBS_Dov>
 23f0042:	2000      	movs	r0, #0
 23f0044:	4605      	mov	r5, r0
 23f0046:	e77f      	b.n	23eff48 <_Z14SD_N2S_Publishv+0x9c>
          else if (ch == 0x0D) { // CR, LF follows and will trigger the line to be processed       
 23f0048:	2b0d      	cmp	r3, #13
 23f004a:	d108      	bne.n	23f005e <_Z14SD_N2S_Publishv+0x1b2>
            msgbuf[i] = 0; // null terminate then wait for newline to be read to process OBS
 23f004c:	2300      	movs	r3, #0
            msgbuf[i-3] = 0; // Set the comma to Null so we don't transmit to Particle what follows
 23f004e:	197a      	adds	r2, r7, r5
            EventType = &msgbuf[i-2];      
 23f0050:	1eae      	subs	r6, r5, #2
            msgbuf[i] = 0; // null terminate then wait for newline to be read to process OBS
 23f0052:	557b      	strb	r3, [r7, r5]
            msgbuf[i-3] = 0; // Set the comma to Null so we don't transmit to Particle what follows
 23f0054:	4628      	mov	r0, r5
 23f0056:	f802 3c03 	strb.w	r3, [r2, #-3]
            EventType = &msgbuf[i-2];      
 23f005a:	443e      	add	r6, r7
 23f005c:	e7f2      	b.n	23f0044 <_Z14SD_N2S_Publishv+0x198>
            msgbuf[i++] = ch;
 23f005e:	1c68      	adds	r0, r5, #1
          if (i >= MAX_MSGBUF_SIZE) {
 23f0060:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
            msgbuf[i++] = ch;
 23f0064:	557b      	strb	r3, [r7, r5]
          if (i >= MAX_MSGBUF_SIZE) {
 23f0066:	d1ed      	bne.n	23f0044 <_Z14SD_N2S_Publishv+0x198>
            sprintf (Buffer32Bytes, "N2S[%d]->BOR:ERR", sent);
 23f0068:	4622      	mov	r2, r4
 23f006a:	4911      	ldr	r1, [pc, #68]	; (23f00b0 <_Z14SD_N2S_Publishv+0x204>)
 23f006c:	480c      	ldr	r0, [pc, #48]	; (23f00a0 <_Z14SD_N2S_Publishv+0x1f4>)
 23f006e:	f008 f8c9 	bl	23f8204 <sprintf>
            Output (Buffer32Bytes);
 23f0072:	480b      	ldr	r0, [pc, #44]	; (23f00a0 <_Z14SD_N2S_Publishv+0x1f4>)
 23f0074:	f7f8 fc6c 	bl	23e8950 <_Z6OutputPKc>
 23f0078:	e76a      	b.n	23eff50 <_Z14SD_N2S_Publishv+0xa4>
        Output ("N2S->OPEN:ERR");
 23f007a:	480e      	ldr	r0, [pc, #56]	; (23f00b4 <_Z14SD_N2S_Publishv+0x208>)
 23f007c:	f7f8 fc68 	bl	23e8950 <_Z6OutputPKc>
    virtual ~Print() {}
 23f0080:	e74e      	b.n	23eff20 <_Z14SD_N2S_Publishv+0x74>
 23f0082:	bf00      	nop
 23f0084:	1006a7ec 	.word	0x1006a7ec
 23f0088:	1006a1ff 	.word	0x1006a1ff
 23f008c:	1006a7a4 	.word	0x1006a7a4
 23f0090:	023fe88f 	.word	0x023fe88f
 23f0094:	023fe89b 	.word	0x023fe89b
 23f0098:	1006f148 	.word	0x1006f148
 23f009c:	023fe8a5 	.word	0x023fe8a5
 23f00a0:	1006a31f 	.word	0x1006a31f
 23f00a4:	023fe8ee 	.word	0x023fe8ee
 23f00a8:	023fe8b7 	.word	0x023fe8b7
 23f00ac:	023fe8cc 	.word	0x023fe8cc
 23f00b0:	023fe8fb 	.word	0x023fe8fb
 23f00b4:	023fe90c 	.word	0x023fe90c
 23f00b8:	1006ae8c 	.word	0x1006ae8c
 23f00bc:	1006aed0 	.word	0x1006aed0
 23f00c0:	023fe8df 	.word	0x023fe8df

023f00c4 <_Z14OBS_PublishAllv>:
 * 
 * If sending an observation takes 2 or more seconds ws_refresh is set and 
 *   the main program loop calls Wind_Distance_Air_Initialize() 
 * ======================================================================================================================
 */
void OBS_PublishAll() {
 23f00c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f00c8:	b088      	sub	sp, #32
  bool OK2Send=true;
  int relay_type;

  // Update Cell Signal Strength On Last (Most Current) OBS Since Cell is turned to get reading
  int last = OBS_Last();
 23f00ca:	f7fb ffa7 	bl	23ec01c <_Z8OBS_Lastv>
  if (last >= 0) {
 23f00ce:	1e04      	subs	r4, r0, #0
 23f00d0:	4f30      	ldr	r7, [pc, #192]	; (23f0194 <_Z14OBS_PublishAllv+0xd0>)
 23f00d2:	db0c      	blt.n	23f00ee <_Z14OBS_PublishAllv+0x2a>
#if PLATFORM_ID == PLATFORM_ARGON
    WiFiSignal sig = WiFi.RSSI();
#else
    CellularSignal sig = Cellular.RSSI();
 23f00d4:	4668      	mov	r0, sp
 23f00d6:	4930      	ldr	r1, [pc, #192]	; (23f0198 <_Z14OBS_PublishAllv+0xd4>)
 23f00d8:	f008 f998 	bl	23f840c <_ZN5spark13CellularClass4RSSIEv>
#endif
    obs[last].css = sig.getStrength();
 23f00dc:	4668      	mov	r0, sp
 23f00de:	f008 f9f3 	bl	23f84c8 <_ZNK14CellularSignal11getStrengthEv>
 23f00e2:	f640 2098 	movw	r0, #2712	; 0xa98
 23f00e6:	fb00 7004 	mla	r0, r0, r4, r7
 23f00ea:	ed80 0a04 	vstr	s0, [r0, #16]
void OBS_PublishAll() {
 23f00ee:	2500      	movs	r5, #0
 23f00f0:	2401      	movs	r4, #1
  }

  // Go through the saved 1 minute observers and send them
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
    if (obs[i].inuse) {
 23f00f2:	f640 2898 	movw	r8, #2712	; 0xa98
 23f00f6:	fb08 f305 	mul.w	r3, r8, r5
 23f00fa:	5cfb      	ldrb	r3, [r7, r3]
 23f00fc:	b15b      	cbz	r3, 23f0116 <_Z14OBS_PublishAllv+0x52>
      if (OBS_FS_Publish(i) == false) {
 23f00fe:	4628      	mov	r0, r5
 23f0100:	f7ff fa1e 	bl	23ef540 <_Z14OBS_FS_Publishi>
 23f0104:	4606      	mov	r6, r0
 23f0106:	b918      	cbnz	r0, 23f0110 <_Z14OBS_PublishAllv+0x4c>
        OBS_N2S_Add (i);
 23f0108:	4628      	mov	r0, r5
 23f010a:	f7fb fd8f 	bl	23ebc2c <_Z11OBS_N2S_Addi>
        // Don't try to send any N2S because we just added to the file
        OK2Send = false;
 23f010e:	4634      	mov	r4, r6
      }
      OBS_Clear(i);
 23f0110:	4628      	mov	r0, r5
 23f0112:	f7fb fd79 	bl	23ebc08 <_Z9OBS_Cleari>
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
 23f0116:	3501      	adds	r5, #1
 23f0118:	2d11      	cmp	r5, #17
 23f011a:	d1ec      	bne.n	23f00f6 <_Z14OBS_PublishAllv+0x32>
    }
  }

  // Publish LoRa Relay Observations   
  if (LORA_exists) {
 23f011c:	4b1f      	ldr	r3, [pc, #124]	; (23f019c <_Z14OBS_PublishAllv+0xd8>)
 23f011e:	781b      	ldrb	r3, [r3, #0]
 23f0120:	b373      	cbz	r3, 23f0180 <_Z14OBS_PublishAllv+0xbc>
      else {
        if (OK2Send && (relay_type>0)) {
         OK2Send = OBS_Relay_Publish(relay_type);  // Note a new LoRa RS msgs could be received as we are sending    
        }
        if (!OK2Send) {
          sprintf (msgbuf+strlen(msgbuf), ",%s", relay_msgtypes[relay_type]);  // Add Particle Event Type after JSON structure
 23f0122:	4e1f      	ldr	r6, [pc, #124]	; (23f01a0 <_Z14OBS_PublishAllv+0xdc>)
 23f0124:	4f1f      	ldr	r7, [pc, #124]	; (23f01a4 <_Z14OBS_PublishAllv+0xe0>)
 23f0126:	f8df 808c 	ldr.w	r8, [pc, #140]	; 23f01b4 <_Z14OBS_PublishAllv+0xf0>
    while (lora_relay_need2log()) {
 23f012a:	f7f8 fdff 	bl	23e8d2c <_Z19lora_relay_need2logv>
 23f012e:	b338      	cbz	r0, 23f0180 <_Z14OBS_PublishAllv+0xbc>
      relay_type = OBS_Relay_Build_JSON(); // This removed msg from relay structure and places it in msgbuf
 23f0130:	f7fb ff02 	bl	23ebf38 <_Z20OBS_Relay_Build_JSONv>
      if (relay_type<=0) {
 23f0134:	1e05      	subs	r5, r0, #0
 23f0136:	dc08      	bgt.n	23f014a <_Z14OBS_PublishAllv+0x86>
        sprintf (Buffer32Bytes, "RELAY TYPE[%d] INVALID", relay_type);
 23f0138:	462a      	mov	r2, r5
 23f013a:	491b      	ldr	r1, [pc, #108]	; (23f01a8 <_Z14OBS_PublishAllv+0xe4>)
 23f013c:	481b      	ldr	r0, [pc, #108]	; (23f01ac <_Z14OBS_PublishAllv+0xe8>)
 23f013e:	f008 f861 	bl	23f8204 <sprintf>
        Output(Buffer32Bytes);
 23f0142:	481a      	ldr	r0, [pc, #104]	; (23f01ac <_Z14OBS_PublishAllv+0xe8>)
 23f0144:	f7f8 fc04 	bl	23e8950 <_Z6OutputPKc>
 23f0148:	e7ef      	b.n	23f012a <_Z14OBS_PublishAllv+0x66>
        if (OK2Send && (relay_type>0)) {
 23f014a:	b99c      	cbnz	r4, 23f0174 <_Z14OBS_PublishAllv+0xb0>
          sprintf (msgbuf+strlen(msgbuf), ",%s", relay_msgtypes[relay_type]);  // Add Particle Event Type after JSON structure
 23f014c:	4814      	ldr	r0, [pc, #80]	; (23f01a0 <_Z14OBS_PublishAllv+0xdc>)
 23f014e:	f7f7 fb6b 	bl	23e7828 <strlen>
 23f0152:	4641      	mov	r1, r8
 23f0154:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 23f0158:	4430      	add	r0, r6
 23f015a:	f008 f853 	bl	23f8204 <sprintf>
          SD_NeedToSend_Add(msgbuf); // Save to N2F File
 23f015e:	4810      	ldr	r0, [pc, #64]	; (23f01a0 <_Z14OBS_PublishAllv+0xdc>)
 23f0160:	f7fb fb2c 	bl	23eb7bc <_Z17SD_NeedToSend_AddPc>
          Output("RELAY->N2S");
 23f0164:	4812      	ldr	r0, [pc, #72]	; (23f01b0 <_Z14OBS_PublishAllv+0xec>)
 23f0166:	f7f8 fbf3 	bl	23e8950 <_Z6OutputPKc>
          Serial_write (msgbuf); 
 23f016a:	480d      	ldr	r0, [pc, #52]	; (23f01a0 <_Z14OBS_PublishAllv+0xdc>)
 23f016c:	f7f8 fbc6 	bl	23e88fc <_Z12Serial_writePKc>
 23f0170:	2400      	movs	r4, #0
 23f0172:	e7da      	b.n	23f012a <_Z14OBS_PublishAllv+0x66>
         OK2Send = OBS_Relay_Publish(relay_type);  // Note a new LoRa RS msgs could be received as we are sending    
 23f0174:	f7ff fa10 	bl	23ef598 <_Z17OBS_Relay_Publishi>
        if (!OK2Send) {
 23f0178:	4604      	mov	r4, r0
 23f017a:	2800      	cmp	r0, #0
 23f017c:	d1d5      	bne.n	23f012a <_Z14OBS_PublishAllv+0x66>
 23f017e:	e7e5      	b.n	23f014c <_Z14OBS_PublishAllv+0x88>
      }
    }
  }

  // Check if we have any N2S only if we have not added to the file while trying to send OBS
  if (OK2Send) {
 23f0180:	b124      	cbz	r4, 23f018c <_Z14OBS_PublishAllv+0xc8>
    SD_N2S_Publish(); 
  }
}
 23f0182:	b008      	add	sp, #32
 23f0184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    SD_N2S_Publish(); 
 23f0188:	f7ff be90 	b.w	23efeac <_Z14SD_N2S_Publishv>
}
 23f018c:	b008      	add	sp, #32
 23f018e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f0192:	bf00      	nop
 23f0194:	1006f558 	.word	0x1006f558
 23f0198:	1007aeb8 	.word	0x1007aeb8
 23f019c:	1006a349 	.word	0x1006a349
 23f01a0:	1006f148 	.word	0x1006f148
 23f01a4:	1006a260 	.word	0x1006a260
 23f01a8:	023fe6af 	.word	0x023fe6af
 23f01ac:	1006a31f 	.word	0x1006a31f
 23f01b0:	023fe91a 	.word	0x023fe91a
 23f01b4:	023fdb5c 	.word	0x023fdb5c

023f01b8 <setup>:
void setup() {
 23f01b8:	b530      	push	{r4, r5, lr}
	pmic.enableBATFET();
 23f01ba:	487f      	ldr	r0, [pc, #508]	; (23f03b8 <setup+0x200>)
void setup() {
 23f01bc:	b087      	sub	sp, #28
	pmic.enableBATFET();
 23f01be:	f009 fa53 	bl	23f9668 <_ZN4PMIC12enableBATFETEv>
  Time.setFormat(TIME_FORMAT_ISO8601_FULL);
 23f01c2:	4b7e      	ldr	r3, [pc, #504]	; (23f03bc <setup+0x204>)
  pinMode (REBOOT_PIN, OUTPUT);
 23f01c4:	2101      	movs	r1, #1
            return format(now(), format_spec);
        }

        void setFormat(const char* format)
        {
            this->format_spec = format;
 23f01c6:	681a      	ldr	r2, [r3, #0]
 23f01c8:	4b7d      	ldr	r3, [pc, #500]	; (23f03c0 <setup+0x208>)
 23f01ca:	2013      	movs	r0, #19
 23f01cc:	601a      	str	r2, [r3, #0]
 23f01ce:	f00a f81d 	bl	23fa20c <pinMode>
  pinMode (HEARTBEAT_PIN, OUTPUT);
 23f01d2:	2101      	movs	r1, #1
 23f01d4:	2012      	movs	r0, #18
 23f01d6:	f00a f819 	bl	23fa20c <pinMode>
  pinMode (LED_PIN, OUTPUT);
 23f01da:	4b7a      	ldr	r3, [pc, #488]	; (23f03c4 <setup+0x20c>)
 23f01dc:	2101      	movs	r1, #1
 23f01de:	8818      	ldrh	r0, [r3, #0]
 23f01e0:	f00a f814 	bl	23fa20c <pinMode>
  Output_Initialize();
 23f01e4:	f7fc fe1c 	bl	23ece20 <_Z17Output_Initializev>
  delay(2000); // Prevents usb driver crash on startup, Arduino needed this so keeping for Particle
 23f01e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23f01ec:	f008 f896 	bl	23f831c <delay>
  Serial_write(COPYRIGHT);
 23f01f0:	4875      	ldr	r0, [pc, #468]	; (23f03c8 <setup+0x210>)
 23f01f2:	f7f8 fb83 	bl	23e88fc <_Z12Serial_writePKc>
  Output (VERSION_INFO);
 23f01f6:	4875      	ldr	r0, [pc, #468]	; (23f03cc <setup+0x214>)
 23f01f8:	f7f8 fbaa 	bl	23e8950 <_Z6OutputPKc>
  delay(4000);
 23f01fc:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 23f0200:	f008 f88c 	bl	23f831c <delay>
  DailyRebootCountDownTimer = cf_reboot_countdown_timer;
 23f0204:	4b72      	ldr	r3, [pc, #456]	; (23f03d0 <setup+0x218>)
  if (SD_exists && SD.exists(SD_n2s_file)) {
 23f0206:	4d73      	ldr	r5, [pc, #460]	; (23f03d4 <setup+0x21c>)
  DailyRebootCountDownTimer = cf_reboot_countdown_timer;
 23f0208:	681a      	ldr	r2, [r3, #0]
 23f020a:	4b73      	ldr	r3, [pc, #460]	; (23f03d8 <setup+0x220>)
 23f020c:	4c73      	ldr	r4, [pc, #460]	; (23f03dc <setup+0x224>)
 23f020e:	601a      	str	r2, [r3, #0]
  SD_initialize();
 23f0210:	f7fb f9ac 	bl	23eb56c <_Z13SD_initializev>
  if (SD_exists && SD.exists(SD_n2s_file)) {
 23f0214:	782b      	ldrb	r3, [r5, #0]
 23f0216:	2b00      	cmp	r3, #0
 23f0218:	f000 80b7 	beq.w	23f038a <setup+0x1d2>
    return vwd()->exists(path);
 23f021c:	4970      	ldr	r1, [pc, #448]	; (23f03e0 <setup+0x228>)
 23f021e:	4871      	ldr	r0, [pc, #452]	; (23f03e4 <setup+0x22c>)
 23f0220:	f7f8 f960 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
 23f0224:	2800      	cmp	r0, #0
 23f0226:	f000 80b0 	beq.w	23f038a <setup+0x1d2>
    SystemStatusBits |= SSB_N2S; // Turn on Bit
 23f022a:	6823      	ldr	r3, [r4, #0]
    Output("N2S:Exists");
 23f022c:	486e      	ldr	r0, [pc, #440]	; (23f03e8 <setup+0x230>)
    SystemStatusBits |= SSB_N2S; // Turn on Bit
 23f022e:	f043 0310 	orr.w	r3, r3, #16
 23f0232:	6023      	str	r3, [r4, #0]
    Output("N2S:None");
 23f0234:	f7f8 fb8c 	bl	23e8950 <_Z6OutputPKc>
  if (SD_exists && SD.exists(CF_NAME)) {
 23f0238:	782b      	ldrb	r3, [r5, #0]
 23f023a:	2b00      	cmp	r3, #0
 23f023c:	f040 80ab 	bne.w	23f0396 <setup+0x1de>
    sprintf(msgbuf, "CF:NO %s", CF_NAME); Output (msgbuf);
 23f0240:	4a6a      	ldr	r2, [pc, #424]	; (23f03ec <setup+0x234>)
 23f0242:	496b      	ldr	r1, [pc, #428]	; (23f03f0 <setup+0x238>)
 23f0244:	486b      	ldr	r0, [pc, #428]	; (23f03f4 <setup+0x23c>)
 23f0246:	f007 ffdd 	bl	23f8204 <sprintf>
 23f024a:	486a      	ldr	r0, [pc, #424]	; (23f03f4 <setup+0x23c>)
 23f024c:	f7f8 fb80 	bl	23e8950 <_Z6OutputPKc>
    Output(msgbuf);
 23f0250:	4868      	ldr	r0, [pc, #416]	; (23f03f4 <setup+0x23c>)
 23f0252:	f7f8 fb7d 	bl	23e8950 <_Z6OutputPKc>
  EEPROM_Dump();
 23f0256:	f7fb f8c7 	bl	23eb3e8 <_Z11EEPROM_Dumpv>
  stc_timestamp();
 23f025a:	f7f8 fbf5 	bl	23e8a48 <_Z13stc_timestampv>
  sprintf (msgbuf, "%s+", timestamp);
 23f025e:	4a66      	ldr	r2, [pc, #408]	; (23f03f8 <setup+0x240>)
 23f0260:	4966      	ldr	r1, [pc, #408]	; (23f03fc <setup+0x244>)
 23f0262:	4864      	ldr	r0, [pc, #400]	; (23f03f4 <setup+0x23c>)
 23f0264:	f007 ffce 	bl	23f8204 <sprintf>
  Output(msgbuf);
 23f0268:	4862      	ldr	r0, [pc, #392]	; (23f03f4 <setup+0x23c>)
 23f026a:	f7f8 fb71 	bl	23e8950 <_Z6OutputPKc>
  rtc_initialize();
 23f026e:	f7f8 fc35 	bl	23e8adc <_Z14rtc_initializev>
  if (Time.isValid()) {
 23f0272:	f009 fd2c 	bl	23f9cce <_ZN9TimeClass7isValidEv>
 23f0276:	2800      	cmp	r0, #0
 23f0278:	f000 8097 	beq.w	23f03aa <setup+0x1f2>
    Output("STC: Valid");
 23f027c:	4860      	ldr	r0, [pc, #384]	; (23f0400 <setup+0x248>)
  anemometer_interrupt_count = 0;
 23f027e:	2400      	movs	r4, #0
    Output("STC: Not Valid");
 23f0280:	f7f8 fb66 	bl	23e8950 <_Z6OutputPKc>
  stc_timestamp();
 23f0284:	f7f8 fbe0 	bl	23e8a48 <_Z13stc_timestampv>
  sprintf (msgbuf, "%s=", timestamp);
 23f0288:	4a5b      	ldr	r2, [pc, #364]	; (23f03f8 <setup+0x240>)
 23f028a:	495e      	ldr	r1, [pc, #376]	; (23f0404 <setup+0x24c>)
 23f028c:	4859      	ldr	r0, [pc, #356]	; (23f03f4 <setup+0x23c>)
 23f028e:	f007 ffb9 	bl	23f8204 <sprintf>
  Output(msgbuf);
 23f0292:	4858      	ldr	r0, [pc, #352]	; (23f03f4 <setup+0x23c>)
 23f0294:	f7f8 fb5c 	bl	23e8950 <_Z6OutputPKc>
  SimChangeCheck();
 23f0298:	f7fc fb26 	bl	23ec8e8 <_Z14SimChangeCheckv>
  anemometer_interrupt_count = 0;
 23f029c:	4b5a      	ldr	r3, [pc, #360]	; (23f0408 <setup+0x250>)
 23f029e:	601c      	str	r4, [r3, #0]
  anemometer_interrupt_stime = System.millis();
 23f02a0:	f7f8 f8be 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23f02a4:	4b59      	ldr	r3, [pc, #356]	; (23f040c <setup+0x254>)
  attachInterrupt(ANEMOMETER_IRQ_PIN, anemometer_interrupt_handler, FALLING);
 23f02a6:	2202      	movs	r2, #2
  anemometer_interrupt_stime = System.millis();
 23f02a8:	e9c3 0100 	strd	r0, r1, [r3]
  attachInterrupt(ANEMOMETER_IRQ_PIN, anemometer_interrupt_handler, FALLING);
 23f02ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f02b0:	4957      	ldr	r1, [pc, #348]	; (23f0410 <setup+0x258>)
 23f02b2:	2011      	movs	r0, #17
 23f02b4:	9400      	str	r4, [sp, #0]
 23f02b6:	f008 fe79 	bl	23f8fac <_Z15attachInterrupttPFvvE13InterruptModeah>
  raingauge1_interrupt_count = 0;
 23f02ba:	4b56      	ldr	r3, [pc, #344]	; (23f0414 <setup+0x25c>)
 23f02bc:	601c      	str	r4, [r3, #0]
  raingauge1_interrupt_stime = System.millis();
 23f02be:	f7f8 f8af 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23f02c2:	4b55      	ldr	r3, [pc, #340]	; (23f0418 <setup+0x260>)
  attachInterrupt(RAINGAUGE1_IRQ_PIN, raingauge1_interrupt_handler, FALLING);
 23f02c4:	2202      	movs	r2, #2
  raingauge1_interrupt_stime = System.millis();
 23f02c6:	e9c3 0100 	strd	r0, r1, [r3]
  raingauge1_interrupt_ltime = 0;  // used to debounce the tip
 23f02ca:	2000      	movs	r0, #0
 23f02cc:	2100      	movs	r1, #0
 23f02ce:	4b53      	ldr	r3, [pc, #332]	; (23f041c <setup+0x264>)
 23f02d0:	e9c3 0100 	strd	r0, r1, [r3]
  attachInterrupt(RAINGAUGE1_IRQ_PIN, raingauge1_interrupt_handler, FALLING);
 23f02d4:	4952      	ldr	r1, [pc, #328]	; (23f0420 <setup+0x268>)
 23f02d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f02da:	2010      	movs	r0, #16
 23f02dc:	9400      	str	r4, [sp, #0]
 23f02de:	f008 fe65 	bl	23f8fac <_Z15attachInterrupttPFvvE13InterruptModeah>
  TXI_Initialize();
 23f02e2:	f7fc fcdf 	bl	23ecca4 <_Z14TXI_Initializev>
  A4_Initialize();
 23f02e6:	f7fa f8eb 	bl	23ea4c0 <_Z13A4_Initializev>
  A5_Initialize();
 23f02ea:	f7fa f96d 	bl	23ea5c8 <_Z13A5_Initializev>
  bmx_initialize();
 23f02ee:	f7f8 fe7d 	bl	23e8fec <_Z14bmx_initializev>
  htu21d_initialize();
 23f02f2:	f7f8 ff97 	bl	23e9224 <_Z17htu21d_initializev>
  mcp9808_initialize();
 23f02f6:	f7f8 ffc3 	bl	23e9280 <_Z18mcp9808_initializev>
  sht_initialize();
 23f02fa:	f7f9 f871 	bl	23e93e0 <_Z14sht_initializev>
  hih8_initialize();
 23f02fe:	f7f9 f8d7 	bl	23e94b0 <_Z15hih8_initializev>
  si1145_initialize();
 23f0302:	f7f9 fd45 	bl	23e9d90 <_Z17si1145_initializev>
  vlx_initialize();
 23f0306:	f7f9 fdf7 	bl	23e9ef8 <_Z14vlx_initializev>
  blx_initialize();
 23f030a:	f7f9 fe23 	bl	23e9f54 <_Z14blx_initializev>
  as5600_initialize();
 23f030e:	f7fa f8a7 	bl	23ea460 <_Z17as5600_initializev>
  pm25aqi_initialize();
 23f0312:	f7f9 feab 	bl	23ea06c <_Z18pm25aqi_initializev>
  hdc_initialize();
 23f0316:	f7f9 ff2f 	bl	23ea178 <_Z14hdc_initializev>
  lps_initialize();
 23f031a:	f7f9 ff9d 	bl	23ea258 <_Z14lps_initializev>
  tlw_initialize();
 23f031e:	f7fa f815 	bl	23ea34c <_Z14tlw_initializev>
  tsm_initialize();
 23f0322:	f7fa f841 	bl	23ea3a8 <_Z14tsm_initializev>
  tmsm_initialize();
 23f0326:	f7fa f86d 	bl	23ea404 <_Z15tmsm_initializev>
  wbt_initialize();
 23f032a:	f7f9 f9a1 	bl	23e9670 <_Z14wbt_initializev>
  hi_initialize();
 23f032e:	f7f9 fa8b 	bl	23e9848 <_Z13hi_initializev>
  wbgt_initialize();
 23f0332:	f7f9 fc37 	bl	23e9ba4 <_Z15wbgt_initializev>
  lora_initialize();
 23f0336:	f7fe feeb 	bl	23ef110 <_Z15lora_initializev>
  lora_device_initialize();
 23f033a:	f7f8 fd25 	bl	23e8d88 <_Z22lora_device_initializev>
  lora_msg_check();
 23f033e:	f7fe ffdb 	bl	23ef2f8 <_Z14lora_msg_checkv>
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
 23f0342:	2203      	movs	r2, #3
 23f0344:	f241 3388 	movw	r3, #5000	; 0x1388
 23f0348:	e9cd 2303 	strd	r2, r3, [sp, #12]
        bool clearSession, bool reconnect) :
 23f034c:	2301      	movs	r3, #1
  Particle.setDisconnectOptions(CloudDisconnectOptions().graceful(true).timeout(5s));
 23f034e:	a803      	add	r0, sp, #12
 23f0350:	f8ad 3014 	strh.w	r3, [sp, #20]
        reconnect_(reconnect) {
 23f0354:	f88d 4016 	strb.w	r4, [sp, #22]
 23f0358:	f008 faa2 	bl	23f88a0 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>
        spark_cloud_flag_connect();
 23f035c:	f007 fde6 	bl	23f7f2c <spark_cloud_flag_connect>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 23f0360:	4a30      	ldr	r2, [pc, #192]	; (23f0424 <setup+0x26c>)
 23f0362:	4931      	ldr	r1, [pc, #196]	; (23f0428 <setup+0x270>)
 23f0364:	4831      	ldr	r0, [pc, #196]	; (23f042c <setup+0x274>)
 23f0366:	f008 fa7f 	bl	23f8868 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  if (Particle.function("DoAction", Function_DoAction)) {
 23f036a:	b300      	cbz	r0, 23f03ae <setup+0x1f6>
    Output ("DoAction:OK");
 23f036c:	4830      	ldr	r0, [pc, #192]	; (23f0430 <setup+0x278>)
    Output ("DoAction:ERR");
 23f036e:	f7f8 faef 	bl	23e8950 <_Z6OutputPKc>
  Wind_Distance_Air_Initialize(); // Will call HeartBeat()
 23f0372:	f7fe fff9 	bl	23ef368 <_Z28Wind_Distance_Air_Initializev>
  if (Time.isValid()) {
 23f0376:	f009 fcaa 	bl	23f9cce <_ZN9TimeClass7isValidEv>
 23f037a:	b1d0      	cbz	r0, 23f03b2 <setup+0x1fa>
    EEPROM_Initialize();
 23f037c:	f7fa fe70 	bl	23eb060 <_Z17EEPROM_Initializev>
}
 23f0380:	b007      	add	sp, #28
 23f0382:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    OBS_Do();   
 23f0386:	f7fc bdab 	b.w	23ecee0 <_Z6OBS_Dov>
    SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23f038a:	6823      	ldr	r3, [r4, #0]
    Output("N2S:None");
 23f038c:	4829      	ldr	r0, [pc, #164]	; (23f0434 <setup+0x27c>)
    SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23f038e:	f023 0310 	bic.w	r3, r3, #16
 23f0392:	6023      	str	r3, [r4, #0]
    Output("N2S:None");
 23f0394:	e74e      	b.n	23f0234 <setup+0x7c>
 23f0396:	4915      	ldr	r1, [pc, #84]	; (23f03ec <setup+0x234>)
 23f0398:	4812      	ldr	r0, [pc, #72]	; (23f03e4 <setup+0x22c>)
 23f039a:	f7f8 f8a3 	bl	23e84e4 <_ZN7FatFile6existsEPKc>
  if (SD_exists && SD.exists(CF_NAME)) {
 23f039e:	2800      	cmp	r0, #0
 23f03a0:	f43f af4e 	beq.w	23f0240 <setup+0x88>
    SD_ReadConfigFile();
 23f03a4:	f7fb fbca 	bl	23ebb3c <_Z17SD_ReadConfigFilev>
 23f03a8:	e755      	b.n	23f0256 <setup+0x9e>
    Output("STC: Not Valid");
 23f03aa:	4823      	ldr	r0, [pc, #140]	; (23f0438 <setup+0x280>)
 23f03ac:	e767      	b.n	23f027e <setup+0xc6>
    Output ("DoAction:ERR");
 23f03ae:	4823      	ldr	r0, [pc, #140]	; (23f043c <setup+0x284>)
 23f03b0:	e7dd      	b.n	23f036e <setup+0x1b6>
}
 23f03b2:	b007      	add	sp, #28
 23f03b4:	bd30      	pop	{r4, r5, pc}
 23f03b6:	bf00      	nop
 23f03b8:	1007aa60 	.word	0x1007aa60
 23f03bc:	1006a278 	.word	0x1006a278
 23f03c0:	1007af3c 	.word	0x1007af3c
 23f03c4:	1006a1a4 	.word	0x1006a1a4
 23f03c8:	023fe925 	.word	0x023fe925
 23f03cc:	023fe711 	.word	0x023fe711
 23f03d0:	1006a250 	.word	0x1006a250
 23f03d4:	1006a7ec 	.word	0x1006a7ec
 23f03d8:	1006a340 	.word	0x1006a340
 23f03dc:	1006a22c 	.word	0x1006a22c
 23f03e0:	1006a1ff 	.word	0x1006a1ff
 23f03e4:	1006a7a4 	.word	0x1006a7a4
 23f03e8:	023fe968 	.word	0x023fe968
 23f03ec:	023fdbdf 	.word	0x023fdbdf
 23f03f0:	023fe97c 	.word	0x023fe97c
 23f03f4:	1006f148 	.word	0x1006f148
 23f03f8:	1007abec 	.word	0x1007abec
 23f03fc:	023fe985 	.word	0x023fe985
 23f0400:	023fe989 	.word	0x023fe989
 23f0404:	023fe9a3 	.word	0x023fe9a3
 23f0408:	1006a968 	.word	0x1006a968
 23f040c:	1006a970 	.word	0x1006a970
 23f0410:	023e831d 	.word	0x023e831d
 23f0414:	1007aa64 	.word	0x1007aa64
 23f0418:	1007aa70 	.word	0x1007aa70
 23f041c:	1007aa68 	.word	0x1007aa68
 23f0420:	023e8429 	.word	0x023e8429
 23f0424:	023fe9a7 	.word	0x023fe9a7
 23f0428:	023ec0fd 	.word	0x023ec0fd
 23f042c:	023f883d 	.word	0x023f883d
 23f0430:	023fe9b0 	.word	0x023fe9b0
 23f0434:	023fe973 	.word	0x023fe973
 23f0438:	023fe994 	.word	0x023fe994
 23f043c:	023fe9bc 	.word	0x023fe9bc

023f0440 <loop>:
void loop() {
 23f0440:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f0442:	b085      	sub	sp, #20
    if (Time.isValid()) {  
 23f0444:	f009 fc43 	bl	23f9cce <_ZN9TimeClass7isValidEv>
 23f0448:	2800      	cmp	r0, #0
 23f044a:	f000 80a8 	beq.w	23f059e <loop+0x15e>
      RTC_UpdateCheck();
 23f044e:	f7f8 fbad 	bl	23e8bac <_Z15RTC_UpdateCheckv>
      if (!eeprom_valid) {
 23f0452:	4ba6      	ldr	r3, [pc, #664]	; (23f06ec <loop+0x2ac>)
 23f0454:	781b      	ldrb	r3, [r3, #0]
 23f0456:	b90b      	cbnz	r3, 23f045c <loop+0x1c>
        EEPROM_Initialize();
 23f0458:	f7fa fe02 	bl	23eb060 <_Z17EEPROM_Initializev>
      if ( (System.millis() - lastOBS) > OBSERVATION_INTERVAL) {  // 1 minute
 23f045c:	f7f7 ffe0 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23f0460:	4aa3      	ldr	r2, [pc, #652]	; (23f06f0 <loop+0x2b0>)
 23f0462:	e9d2 3200 	ldrd	r3, r2, [r2]
 23f0466:	1ac0      	subs	r0, r0, r3
 23f0468:	f64e 2361 	movw	r3, #60001	; 0xea61
 23f046c:	eb61 0102 	sbc.w	r1, r1, r2
 23f0470:	4298      	cmp	r0, r3
 23f0472:	f171 0300 	sbcs.w	r3, r1, #0
 23f0476:	d303      	bcc.n	23f0480 <loop+0x40>
        I2C_Check_Sensors(); // Make sure Sensors are online
 23f0478:	f7fa fba0 	bl	23eabbc <_Z17I2C_Check_Sensorsv>
        OBS_Do(); 
 23f047c:	f7fc fd30 	bl	23ecee0 <_Z6OBS_Dov>
      if (SendSystemInformation && Particle.connected()) {
 23f0480:	4b9c      	ldr	r3, [pc, #624]	; (23f06f4 <loop+0x2b4>)
 23f0482:	781b      	ldrb	r3, [r3, #0]
 23f0484:	b123      	cbz	r3, 23f0490 <loop+0x50>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23f0486:	f007 fd5f 	bl	23f7f48 <spark_cloud_flag_connected>
 23f048a:	b108      	cbz	r0, 23f0490 <loop+0x50>
        INFO_Do(); // Function sets SendSystemInformation back to false.
 23f048c:	f7ff f8b4 	bl	23ef5f8 <_Z7INFO_Dov>
      if ( (LastTransmitTime == 0) || ((System.millis() - LastTransmitTime) > (obs_tx_interval * 60 * 1000)) ) {
 23f0490:	4c99      	ldr	r4, [pc, #612]	; (23f06f8 <loop+0x2b8>)
 23f0492:	e9d4 2300 	ldrd	r2, r3, [r4]
 23f0496:	4313      	orrs	r3, r2
 23f0498:	d136      	bne.n	23f0508 <loop+0xc8>
 23f049a:	f007 fd55 	bl	23f7f48 <spark_cloud_flag_connected>
        if (Particle.connected()) {
 23f049e:	2800      	cmp	r0, #0
 23f04a0:	d046      	beq.n	23f0530 <loop+0xf0>
          Output ("Connected");
 23f04a2:	4896      	ldr	r0, [pc, #600]	; (23f06fc <loop+0x2bc>)
 23f04a4:	f7f8 fa54 	bl	23e8950 <_Z6OutputPKc>
          LastTransmitTime = System.millis();
 23f04a8:	f7f7 ffba 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23f04ac:	e9c4 0100 	strd	r0, r1, [r4]
          if ((System.millis() - LastTimeUpdate) > (4*3600*1000)) {
 23f04b0:	f7f7 ffb6 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23f04b4:	2500      	movs	r5, #0
 23f04b6:	4c92      	ldr	r4, [pc, #584]	; (23f0700 <loop+0x2c0>)
 23f04b8:	e9d4 3200 	ldrd	r3, r2, [r4]
 23f04bc:	1ac0      	subs	r0, r0, r3
 23f04be:	4b91      	ldr	r3, [pc, #580]	; (23f0704 <loop+0x2c4>)
 23f04c0:	eb61 0102 	sbc.w	r1, r1, r2
 23f04c4:	4283      	cmp	r3, r0
 23f04c6:	eb75 0301 	sbcs.w	r3, r5, r1
 23f04ca:	d209      	bcs.n	23f04e0 <loop+0xa0>
 23f04cc:	f007 fd3c 	bl	23f7f48 <spark_cloud_flag_connected>
        if (!connected()) {
 23f04d0:	b110      	cbz	r0, 23f04d8 <loop+0x98>
        return spark_sync_time(NULL);
 23f04d2:	4628      	mov	r0, r5
 23f04d4:	f007 fd62 	bl	23f7f9c <spark_sync_time>
            LastTimeUpdate = System.millis();
 23f04d8:	f7f7 ffa2 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23f04dc:	e9c4 0100 	strd	r0, r1, [r4]
          OBS_PublishAll();
 23f04e0:	f7ff fdf0 	bl	23f00c4 <_Z14OBS_PublishAllv>
          if (ws_refresh) {
 23f04e4:	4b88      	ldr	r3, [pc, #544]	; (23f0708 <loop+0x2c8>)
 23f04e6:	781b      	ldrb	r3, [r3, #0]
 23f04e8:	b123      	cbz	r3, 23f04f4 <loop+0xb4>
            Output ("WS Refresh Required");
 23f04ea:	4888      	ldr	r0, [pc, #544]	; (23f070c <loop+0x2cc>)
 23f04ec:	f7f8 fa30 	bl	23e8950 <_Z6OutputPKc>
            Wind_Distance_Air_Initialize();
 23f04f0:	f7fe ff3a 	bl	23ef368 <_Z28Wind_Distance_Air_Initializev>
          stc_timestamp();
 23f04f4:	f7f8 faa8 	bl	23e8a48 <_Z13stc_timestampv>
          Output(timestamp);
 23f04f8:	4885      	ldr	r0, [pc, #532]	; (23f0710 <loop+0x2d0>)
 23f04fa:	f7f8 fa29 	bl	23e8950 <_Z6OutputPKc>
          Output_CellBatteryInfo();
 23f04fe:	f7fe fc79 	bl	23eedf4 <_Z22Output_CellBatteryInfov>
          JPO_ClearBits();
 23f0502:	f7f8 f85d 	bl	23e85c0 <_Z13JPO_ClearBitsv>
 23f0506:	e013      	b.n	23f0530 <loop+0xf0>
      if ( (LastTransmitTime == 0) || ((System.millis() - LastTransmitTime) > (obs_tx_interval * 60 * 1000)) ) {
 23f0508:	f7f7 ff8a 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23f050c:	e9d4 3200 	ldrd	r3, r2, [r4]
 23f0510:	f64e 2560 	movw	r5, #60000	; 0xea60
 23f0514:	4e7f      	ldr	r6, [pc, #508]	; (23f0714 <loop+0x2d4>)
 23f0516:	1ac0      	subs	r0, r0, r3
 23f0518:	6833      	ldr	r3, [r6, #0]
 23f051a:	eb61 0102 	sbc.w	r1, r1, r2
 23f051e:	fba3 3205 	umull	r3, r2, r3, r5
 23f0522:	6877      	ldr	r7, [r6, #4]
 23f0524:	4283      	cmp	r3, r0
 23f0526:	fb05 2207 	mla	r2, r5, r7, r2
 23f052a:	eb72 0301 	sbcs.w	r3, r2, r1
 23f052e:	d3b4      	bcc.n	23f049a <loop+0x5a>
      BackGroundWork();
 23f0530:	f7fe ff72 	bl	23ef418 <_Z14BackGroundWorkv>
    if ((cf_reboot_countdown_timer>0) && (--DailyRebootCountDownTimer<=0)) {
 23f0534:	4e78      	ldr	r6, [pc, #480]	; (23f0718 <loop+0x2d8>)
 23f0536:	6833      	ldr	r3, [r6, #0]
 23f0538:	2b00      	cmp	r3, #0
 23f053a:	dd65      	ble.n	23f0608 <loop+0x1c8>
 23f053c:	4d77      	ldr	r5, [pc, #476]	; (23f071c <loop+0x2dc>)
 23f053e:	682b      	ldr	r3, [r5, #0]
 23f0540:	3b01      	subs	r3, #1
 23f0542:	2b00      	cmp	r3, #0
 23f0544:	602b      	str	r3, [r5, #0]
 23f0546:	dc5f      	bgt.n	23f0608 <loop+0x1c8>
      Output ("Daily Reboot");
 23f0548:	4875      	ldr	r0, [pc, #468]	; (23f0720 <loop+0x2e0>)
 23f054a:	f7f8 fa01 	bl	23e8950 <_Z6OutputPKc>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23f054e:	f007 fcfb 	bl	23f7f48 <spark_cloud_flag_connected>
      if (Particle.connected()) {
 23f0552:	b108      	cbz	r0, 23f0558 <loop+0x118>
        OBS_PublishAll();
 23f0554:	f7ff fdb6 	bl	23f00c4 <_Z14OBS_PublishAllv>
      EEPROM_SaveUnreportedRain();
 23f0558:	f7fa fe72 	bl	23eb240 <_Z25EEPROM_SaveUnreportedRainv>
      delay(1000);
 23f055c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23f0560:	f007 fedc 	bl	23f831c <delay>
        reconnect_(reconnect) {
 23f0564:	2300      	movs	r3, #0
      Particle.disconnect();
 23f0566:	a801      	add	r0, sp, #4
 23f0568:	e9cd 3301 	strd	r3, r3, [sp, #4]
        bool clearSession, bool reconnect) :
 23f056c:	f8ad 300c 	strh.w	r3, [sp, #12]
        reconnect_(reconnect) {
 23f0570:	f88d 300e 	strb.w	r3, [sp, #14]
 23f0574:	f008 f989 	bl	23f888a <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        const system_tick_t start = millis();
 23f0578:	f7f7 ff52 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23f057c:	4604      	mov	r4, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23f057e:	f7f7 ff4f 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23f0582:	1b00      	subs	r0, r0, r4
 23f0584:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23f0588:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 23f058c:	f171 0300 	sbcs.w	r3, r1, #0
 23f0590:	d212      	bcs.n	23f05b8 <loop+0x178>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23f0592:	f007 fcd9 	bl	23f7f48 <spark_cloud_flag_connected>
 23f0596:	b178      	cbz	r0, 23f05b8 <loop+0x178>
            spark_process();
 23f0598:	f007 fcba 	bl	23f7f10 <spark_process>
        while (_while() && !_condition()) {
 23f059c:	e7ef      	b.n	23f057e <loop+0x13e>
      stc_timestamp();
 23f059e:	f7f8 fa53 	bl	23e8a48 <_Z13stc_timestampv>
      Output(timestamp);
 23f05a2:	485b      	ldr	r0, [pc, #364]	; (23f0710 <loop+0x2d0>)
 23f05a4:	f7f8 f9d4 	bl	23e8950 <_Z6OutputPKc>
      Output("ERR: No Clock");
 23f05a8:	485e      	ldr	r0, [pc, #376]	; (23f0724 <loop+0x2e4>)
 23f05aa:	f7f8 f9d1 	bl	23e8950 <_Z6OutputPKc>
      delay (DELAY_NO_RTC);
 23f05ae:	f64e 2060 	movw	r0, #60000	; 0xea60
 23f05b2:	f007 feb3 	bl	23f831c <delay>
 23f05b6:	e7bd      	b.n	23f0534 <loop+0xf4>
    virtual bool listening();
    virtual NetworkClass& prefer(bool prefer = true);
    virtual bool isPreferred();

    operator network_interface_t() const {
        return iface_;
 23f05b8:	4c5b      	ldr	r4, [pc, #364]	; (23f0728 <loop+0x2e8>)
 23f05ba:	f007 fcc5 	bl	23f7f48 <spark_cloud_flag_connected>
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23f05be:	2200      	movs	r2, #0
 23f05c0:	2102      	movs	r1, #2
 23f05c2:	6860      	ldr	r0, [r4, #4]
 23f05c4:	f007 fd4c 	bl	23f8060 <network_disconnect>
      delay(1000);
 23f05c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23f05cc:	f007 fea6 	bl	23f831c <delay>
      Cellular.off();
 23f05d0:	4620      	mov	r0, r4
 23f05d2:	f7f7 ff1f 	bl	23e8414 <_ZN5spark13CellularClass3offEv>
      Output("Rebooting");  
 23f05d6:	4855      	ldr	r0, [pc, #340]	; (23f072c <loop+0x2ec>)
 23f05d8:	f7f8 f9ba 	bl	23e8950 <_Z6OutputPKc>
      delay(1000);
 23f05dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23f05e0:	f007 fe9c 	bl	23f831c <delay>
      DeviceReset();
 23f05e4:	f7fb fd74 	bl	23ec0d0 <_Z11DeviceResetv>
      Output("I'm Alive! Why?");  
 23f05e8:	4851      	ldr	r0, [pc, #324]	; (23f0730 <loop+0x2f0>)
 23f05ea:	f7f8 f9b1 	bl	23e8950 <_Z6OutputPKc>
		  Cellular.on();
 23f05ee:	4620      	mov	r0, r4
 23f05f0:	f7f7 ff0a 	bl	23e8408 <_ZN5spark13CellularClass2onEv>
      delay(1000);
 23f05f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23f05f8:	f007 fe90 	bl	23f831c <delay>
        spark_cloud_flag_connect();
 23f05fc:	f007 fc96 	bl	23f7f2c <spark_cloud_flag_connect>
      DailyRebootCountDownTimer = cf_reboot_countdown_timer; // Reset count incase reboot fails
 23f0600:	6833      	ldr	r3, [r6, #0]
 23f0602:	602b      	str	r3, [r5, #0]
      Wind_Distance_Air_Initialize();
 23f0604:	f7fe feb0 	bl	23ef368 <_Z28Wind_Distance_Air_Initializev>
    if (!pmic.isPowerGood() && (System.batteryCharge() <= 15.0)) {
 23f0608:	484a      	ldr	r0, [pc, #296]	; (23f0734 <loop+0x2f4>)
 23f060a:	f008 ffff 	bl	23f960c <_ZN4PMIC11isPowerGoodEv>
 23f060e:	2800      	cmp	r0, #0
 23f0610:	d16a      	bne.n	23f06e8 <loop+0x2a8>
 23f0612:	f7fc fc45 	bl	23ecea0 <_ZNK11SystemClass13batteryChargeEv.isra.0>
 23f0616:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 23f061a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23f061e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f0622:	d861      	bhi.n	23f06e8 <loop+0x2a8>
      Output("Low Power!");
 23f0624:	4844      	ldr	r0, [pc, #272]	; (23f0738 <loop+0x2f8>)
 23f0626:	f7f8 f993 	bl	23e8950 <_Z6OutputPKc>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23f062a:	f007 fc8d 	bl	23f7f48 <spark_cloud_flag_connected>
      if (Particle.connected()) {
 23f062e:	b118      	cbz	r0, 23f0638 <loop+0x1f8>
        OBS_PublishAll(); 
 23f0630:	f7ff fd48 	bl	23f00c4 <_Z14OBS_PublishAllv>
        INFO_Do();
 23f0634:	f7fe ffe0 	bl	23ef5f8 <_Z7INFO_Dov>
        reconnect_(reconnect) {
 23f0638:	2300      	movs	r3, #0
      Particle.disconnect();
 23f063a:	a801      	add	r0, sp, #4
 23f063c:	e9cd 3301 	strd	r3, r3, [sp, #4]
        bool clearSession, bool reconnect) :
 23f0640:	f8ad 300c 	strh.w	r3, [sp, #12]
        reconnect_(reconnect) {
 23f0644:	f88d 300e 	strb.w	r3, [sp, #14]
 23f0648:	f008 f91f 	bl	23f888a <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        const system_tick_t start = millis();
 23f064c:	f7f7 fee8 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23f0650:	4604      	mov	r4, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23f0652:	f7f7 fee5 	bl	23e8420 <_ZN11SystemClass6millisEv>
 23f0656:	1b00      	subs	r0, r0, r4
 23f0658:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23f065c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 23f0660:	f171 0300 	sbcs.w	r3, r1, #0
 23f0664:	d205      	bcs.n	23f0672 <loop+0x232>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23f0666:	f007 fc6f 	bl	23f7f48 <spark_cloud_flag_connected>
 23f066a:	b110      	cbz	r0, 23f0672 <loop+0x232>
            spark_process();
 23f066c:	f007 fc50 	bl	23f7f10 <spark_process>
        while (_while() && !_condition()) {
 23f0670:	e7ef      	b.n	23f0652 <loop+0x212>
 23f0672:	4c2d      	ldr	r4, [pc, #180]	; (23f0728 <loop+0x2e8>)
 23f0674:	f007 fc68 	bl	23f7f48 <spark_cloud_flag_connected>
 23f0678:	2200      	movs	r2, #0
 23f067a:	2102      	movs	r1, #2
 23f067c:	6860      	ldr	r0, [r4, #4]
 23f067e:	f007 fcef 	bl	23f8060 <network_disconnect>
      delay(1000);
 23f0682:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23f0686:	f007 fe49 	bl	23f831c <delay>
      Cellular.off();
 23f068a:	4620      	mov	r0, r4
 23f068c:	f7f7 fec2 	bl	23e8414 <_ZN5spark13CellularClass3offEv>
      if (LORA_exists) {
 23f0690:	4b2a      	ldr	r3, [pc, #168]	; (23f073c <loop+0x2fc>)
 23f0692:	781b      	ldrb	r3, [r3, #0]
 23f0694:	b113      	cbz	r3, 23f069c <loop+0x25c>
        rf95.sleep(); // Power Down LoRa. Note: it turn on when accessed
 23f0696:	482a      	ldr	r0, [pc, #168]	; (23f0740 <loop+0x300>)
 23f0698:	f004 fc4d 	bl	23f4f36 <_ZN7RH_RF955sleepEv>
      Output("Powering Down");
 23f069c:	4829      	ldr	r0, [pc, #164]	; (23f0744 <loop+0x304>)
 23f069e:	f7f8 f957 	bl	23e8950 <_Z6OutputPKc>
      OLED_sleepDisplay();
 23f06a2:	f7f7 ffa3 	bl	23e85ec <_Z17OLED_sleepDisplayv>
      delay(5000);
 23f06a6:	f241 3088 	movw	r0, #5000	; 0x1388
 23f06aa:	f007 fe37 	bl	23f831c <delay>
		  pmic.disableBATFET();
 23f06ae:	4821      	ldr	r0, [pc, #132]	; (23f0734 <loop+0x2f4>)
 23f06b0:	f008 ffef 	bl	23f9692 <_ZN4PMIC13disableBATFETEv>
		  delay(2000);
 23f06b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23f06b8:	f007 fe30 	bl	23f831c <delay>
      OLED_wakeDisplay();   // May need to toggle the Display reset pin.
 23f06bc:	f7f7 ffac 	bl	23e8618 <_Z16OLED_wakeDisplayv>
		  delay(2000);
 23f06c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23f06c4:	f007 fe2a 	bl	23f831c <delay>
		  Output("Power Re-applied");
 23f06c8:	481f      	ldr	r0, [pc, #124]	; (23f0748 <loop+0x308>)
 23f06ca:	f7f8 f941 	bl	23e8950 <_Z6OutputPKc>
		  pmic.enableBATFET();
 23f06ce:	4819      	ldr	r0, [pc, #100]	; (23f0734 <loop+0x2f4>)
 23f06d0:	f008 ffca 	bl	23f9668 <_ZN4PMIC12enableBATFETEv>
		  Cellular.on();
 23f06d4:	4814      	ldr	r0, [pc, #80]	; (23f0728 <loop+0x2e8>)
 23f06d6:	f7f7 fe97 	bl	23e8408 <_ZN5spark13CellularClass2onEv>
        spark_cloud_flag_connect();
 23f06da:	f007 fc27 	bl	23f7f2c <spark_cloud_flag_connect>
}
 23f06de:	b005      	add	sp, #20
 23f06e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      Wind_Distance_Air_Initialize();
 23f06e4:	f7fe be40 	b.w	23ef368 <_Z28Wind_Distance_Air_Initializev>
}
 23f06e8:	b005      	add	sp, #20
 23f06ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f06ec:	1006aeac 	.word	0x1006aeac
 23f06f0:	1006aed0 	.word	0x1006aed0
 23f06f4:	1006a228 	.word	0x1006a228
 23f06f8:	1006a358 	.word	0x1006a358
 23f06fc:	023fe9c9 	.word	0x023fe9c9
 23f0700:	1006a350 	.word	0x1006a350
 23f0704:	00dbba00 	.word	0x00dbba00
 23f0708:	1007ae64 	.word	0x1007ae64
 23f070c:	023fe9d3 	.word	0x023fe9d3
 23f0710:	1007abec 	.word	0x1007abec
 23f0714:	1006a258 	.word	0x1006a258
 23f0718:	1006a250 	.word	0x1006a250
 23f071c:	1006a340 	.word	0x1006a340
 23f0720:	023fe9f5 	.word	0x023fe9f5
 23f0724:	023fe9e7 	.word	0x023fe9e7
 23f0728:	1007aeb8 	.word	0x1007aeb8
 23f072c:	023fea02 	.word	0x023fea02
 23f0730:	023fea0c 	.word	0x023fea0c
 23f0734:	1007aa60 	.word	0x1007aa60
 23f0738:	023fea1c 	.word	0x023fea1c
 23f073c:	1006a349 	.word	0x1006a349
 23f0740:	1007aa90 	.word	0x1007aa90
 23f0744:	023fea27 	.word	0x023fea27
 23f0748:	023fea35 	.word	0x023fea35

023f074c <_ZL9xor_blockPhS_>:
  return pgm_read_byte (& s_inv [x]) ;
}


static void xor_block (byte * d, byte * s)
{
 23f074c:	b510      	push	{r4, lr}
 23f074e:	1d0b      	adds	r3, r1, #4
 23f0750:	3004      	adds	r0, #4
 23f0752:	3114      	adds	r1, #20
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
    {
      *d++ ^= *s++ ;  // some unrolling
 23f0754:	f813 4c04 	ldrb.w	r4, [r3, #-4]
 23f0758:	f810 2c04 	ldrb.w	r2, [r0, #-4]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23f075c:	3304      	adds	r3, #4
      *d++ ^= *s++ ;  // some unrolling
 23f075e:	4062      	eors	r2, r4
 23f0760:	f800 2c04 	strb.w	r2, [r0, #-4]
      *d++ ^= *s++ ;
 23f0764:	f813 4c07 	ldrb.w	r4, [r3, #-7]
 23f0768:	f810 2c03 	ldrb.w	r2, [r0, #-3]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23f076c:	3004      	adds	r0, #4
      *d++ ^= *s++ ;
 23f076e:	4062      	eors	r2, r4
 23f0770:	f800 2c07 	strb.w	r2, [r0, #-7]
      *d++ ^= *s++ ;
 23f0774:	f813 4c06 	ldrb.w	r4, [r3, #-6]
 23f0778:	f810 2c06 	ldrb.w	r2, [r0, #-6]
 23f077c:	4062      	eors	r2, r4
 23f077e:	f800 2c06 	strb.w	r2, [r0, #-6]
      *d++ ^= *s++ ;
 23f0782:	f813 4c05 	ldrb.w	r4, [r3, #-5]
 23f0786:	f810 2c05 	ldrb.w	r2, [r0, #-5]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23f078a:	428b      	cmp	r3, r1
      *d++ ^= *s++ ;
 23f078c:	ea82 0204 	eor.w	r2, r2, r4
 23f0790:	f800 2c05 	strb.w	r2, [r0, #-5]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23f0794:	d1de      	bne.n	23f0754 <_ZL9xor_blockPhS_+0x8>
    }
}
 23f0796:	bd10      	pop	{r4, pc}

023f0798 <_ZL12copy_and_keyPhS_S_>:

static void copy_and_key (byte * d, byte * s, byte * k)
{
 23f0798:	b530      	push	{r4, r5, lr}
 23f079a:	1d0b      	adds	r3, r1, #4
 23f079c:	3204      	adds	r2, #4
 23f079e:	3004      	adds	r0, #4
 23f07a0:	3114      	adds	r1, #20
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
    {
      *d++ = *s++ ^ *k++ ;  // some unrolling
 23f07a2:	f813 4c04 	ldrb.w	r4, [r3, #-4]
 23f07a6:	f812 5c04 	ldrb.w	r5, [r2, #-4]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23f07aa:	3304      	adds	r3, #4
      *d++ = *s++ ^ *k++ ;  // some unrolling
 23f07ac:	406c      	eors	r4, r5
 23f07ae:	f800 4c04 	strb.w	r4, [r0, #-4]
      *d++ = *s++ ^ *k++ ;
 23f07b2:	f812 5c03 	ldrb.w	r5, [r2, #-3]
 23f07b6:	f813 4c07 	ldrb.w	r4, [r3, #-7]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23f07ba:	3204      	adds	r2, #4
      *d++ = *s++ ^ *k++ ;
 23f07bc:	406c      	eors	r4, r5
 23f07be:	f800 4c03 	strb.w	r4, [r0, #-3]
      *d++ = *s++ ^ *k++ ;
 23f07c2:	f813 4c06 	ldrb.w	r4, [r3, #-6]
 23f07c6:	f812 5c06 	ldrb.w	r5, [r2, #-6]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23f07ca:	3004      	adds	r0, #4
      *d++ = *s++ ^ *k++ ;
 23f07cc:	406c      	eors	r4, r5
 23f07ce:	f800 4c06 	strb.w	r4, [r0, #-6]
      *d++ = *s++ ^ *k++ ;
 23f07d2:	f813 4c05 	ldrb.w	r4, [r3, #-5]
 23f07d6:	f812 5c05 	ldrb.w	r5, [r2, #-5]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23f07da:	428b      	cmp	r3, r1
      *d++ = *s++ ^ *k++ ;
 23f07dc:	ea84 0405 	eor.w	r4, r4, r5
 23f07e0:	f800 4c05 	strb.w	r4, [r0, #-5]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23f07e4:	d1dd      	bne.n	23f07a2 <_ZL12copy_and_keyPhS_S_+0xa>
    }
}
 23f07e6:	bd30      	pop	{r4, r5, pc}

023f07e8 <_ZN3AESC1Ev>:
    }
}

/******************************************************************************/

AES::AES(){
 23f07e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23f07ea:	4a11      	ldr	r2, [pc, #68]	; (23f0830 <_ZN3AESC1Ev+0x48>)
 23f07ec:	4603      	mov	r3, r0
 23f07ee:	4617      	mov	r7, r2
 23f07f0:	f500 758c 	add.w	r5, r0, #280	; 0x118
 23f07f4:	f102 0610 	add.w	r6, r2, #16
 23f07f8:	462c      	mov	r4, r5
 23f07fa:	6810      	ldr	r0, [r2, #0]
 23f07fc:	6851      	ldr	r1, [r2, #4]
 23f07fe:	3208      	adds	r2, #8
 23f0800:	c403      	stmia	r4!, {r0, r1}
 23f0802:	42b2      	cmp	r2, r6
 23f0804:	4625      	mov	r5, r4
 23f0806:	d1f7      	bne.n	23f07f8 <_ZN3AESC1Ev+0x10>
	byte ar_iv[8] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01 };
 23f0808:	466a      	mov	r2, sp
 23f080a:	6938      	ldr	r0, [r7, #16]
 23f080c:	6871      	ldr	r1, [r6, #4]
 23f080e:	c203      	stmia	r2!, {r0, r1}
	memcpy(iv,ar_iv,8);
 23f0810:	466a      	mov	r2, sp
 23f0812:	ca03      	ldmia	r2!, {r0, r1}
	memcpy(iv+8,ar_iv,8);
 23f0814:	466a      	mov	r2, sp
	memcpy(iv,ar_iv,8);
 23f0816:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
 23f081a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	memcpy(iv+8,ar_iv,8);
 23f081e:	ca03      	ldmia	r2!, {r0, r1}
 23f0820:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	arr_pad[11] = 0x0c;
	arr_pad[12] = 0x0d;
	arr_pad[13] = 0x0e;
	arr_pad[14] = 0x0f;
	arr_pad[15] = 0x10;
}
 23f0824:	4618      	mov	r0, r3
	memcpy(iv+8,ar_iv,8);
 23f0826:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
}
 23f082a:	b003      	add	sp, #12
 23f082c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f082e:	bf00      	nop
 23f0830:	023fd24c 	.word	0x023fd24c

023f0834 <_ZN3AES12copy_n_bytesEPhS0_h>:
}

/******************************************************************************/

void AES::copy_n_bytes (byte * d, byte * s, byte nn)
{
 23f0834:	b570      	push	{r4, r5, r6, lr}
 23f0836:	4618      	mov	r0, r3
 23f0838:	460c      	mov	r4, r1
 23f083a:	4615      	mov	r5, r2
  while (nn >= 4)
 23f083c:	2803      	cmp	r0, #3
 23f083e:	f101 0104 	add.w	r1, r1, #4
 23f0842:	f105 0504 	add.w	r5, r5, #4
 23f0846:	d811      	bhi.n	23f086c <_ZN3AES12copy_n_bytesEPhS0_h+0x38>
 23f0848:	0898      	lsrs	r0, r3, #2
 23f084a:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
 23f084e:	440c      	add	r4, r1
 23f0850:	4411      	add	r1, r2
 23f0852:	ebc0 1280 	rsb	r2, r0, r0, lsl #6
 23f0856:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 23f085a:	fa51 f080 	uxtab	r0, r1, r0
      *d++ = *s++ ;
      *d++ = *s++ ;
      *d++ = *s++ ;
      nn -= 4 ;
    }
  while (nn--)
 23f085e:	4281      	cmp	r1, r0
 23f0860:	d017      	beq.n	23f0892 <_ZN3AES12copy_n_bytesEPhS0_h+0x5e>
    *d++ = *s++ ;
 23f0862:	f811 3b01 	ldrb.w	r3, [r1], #1
 23f0866:	f804 3b01 	strb.w	r3, [r4], #1
  while (nn--)
 23f086a:	e7f8      	b.n	23f085e <_ZN3AES12copy_n_bytesEPhS0_h+0x2a>
      *d++ = *s++ ;  // some unrolling
 23f086c:	f815 6c04 	ldrb.w	r6, [r5, #-4]
      nn -= 4 ;
 23f0870:	3804      	subs	r0, #4
      *d++ = *s++ ;  // some unrolling
 23f0872:	f801 6c04 	strb.w	r6, [r1, #-4]
      *d++ = *s++ ;
 23f0876:	f815 6c03 	ldrb.w	r6, [r5, #-3]
      nn -= 4 ;
 23f087a:	b2c0      	uxtb	r0, r0
      *d++ = *s++ ;
 23f087c:	f801 6c03 	strb.w	r6, [r1, #-3]
      *d++ = *s++ ;
 23f0880:	f815 6c02 	ldrb.w	r6, [r5, #-2]
 23f0884:	f801 6c02 	strb.w	r6, [r1, #-2]
      *d++ = *s++ ;
 23f0888:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 23f088c:	f801 6c01 	strb.w	r6, [r1, #-1]
  while (nn >= 4)
 23f0890:	e7d4      	b.n	23f083c <_ZN3AES12copy_n_bytesEPhS0_h+0x8>
}
 23f0892:	bd70      	pop	{r4, r5, r6, pc}

023f0894 <_ZN3AES7set_keyEPhi>:
  switch (keylen)
 23f0894:	2a80      	cmp	r2, #128	; 0x80
{
 23f0896:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f089a:	4604      	mov	r4, r0
 23f089c:	4608      	mov	r0, r1
  switch (keylen)
 23f089e:	d015      	beq.n	23f08cc <_ZN3AES7set_keyEPhi+0x38>
 23f08a0:	dc0b      	bgt.n	23f08ba <_ZN3AES7set_keyEPhi+0x26>
 23f08a2:	2a18      	cmp	r2, #24
 23f08a4:	d068      	beq.n	23f0978 <_ZN3AES7set_keyEPhi+0xe4>
 23f08a6:	2a20      	cmp	r2, #32
 23f08a8:	d00c      	beq.n	23f08c4 <_ZN3AES7set_keyEPhi+0x30>
 23f08aa:	2a10      	cmp	r2, #16
 23f08ac:	d00e      	beq.n	23f08cc <_ZN3AES7set_keyEPhi+0x38>
      round = 0;
 23f08ae:	2300      	movs	r3, #0
      return FAILURE;
 23f08b0:	20ff      	movs	r0, #255	; 0xff
      round = 0;
 23f08b2:	6023      	str	r3, [r4, #0]
}
 23f08b4:	b003      	add	sp, #12
 23f08b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (keylen)
 23f08ba:	2ac0      	cmp	r2, #192	; 0xc0
 23f08bc:	d05c      	beq.n	23f0978 <_ZN3AES7set_keyEPhi+0xe4>
 23f08be:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 23f08c2:	d1f4      	bne.n	23f08ae <_ZN3AES7set_keyEPhi+0x1a>
      round = 14 ;
 23f08c4:	230e      	movs	r3, #14
      keylen = 32; // 14 rounds
 23f08c6:	2620      	movs	r6, #32
      round = 14 ;
 23f08c8:	6023      	str	r3, [r4, #0]
      break;
 23f08ca:	e002      	b.n	23f08d2 <_ZN3AES7set_keyEPhi+0x3e>
      round = 10 ;
 23f08cc:	230a      	movs	r3, #10
      keylen = 16; // 10 rounds
 23f08ce:	2610      	movs	r6, #16
      round = 10 ;
 23f08d0:	6023      	str	r3, [r4, #0]
  hi = (round + 1) << 4 ;
 23f08d2:	4621      	mov	r1, r4
  copy_n_bytes (key_sched, key, keylen) ;
 23f08d4:	b2f7      	uxtb	r7, r6
 23f08d6:	4602      	mov	r2, r0
  hi = (round + 1) << 4 ;
 23f08d8:	f851 5b04 	ldr.w	r5, [r1], #4
  copy_n_bytes (key_sched, key, keylen) ;
 23f08dc:	463b      	mov	r3, r7
 23f08de:	4620      	mov	r0, r4
 23f08e0:	f7ff ffa8 	bl	23f0834 <_ZN3AES12copy_n_bytesEPhS0_h>
 23f08e4:	463a      	mov	r2, r7
 23f08e6:	46bc      	mov	ip, r7
  for (byte cc = keylen, rc = 1 ; cc < hi ; cc += N_COL)
 23f08e8:	2101      	movs	r1, #1
  hi = (round + 1) << 4 ;
 23f08ea:	3501      	adds	r5, #1
 23f08ec:	012d      	lsls	r5, r5, #4
  return pgm_read_byte (& s_fwd [x]) ;
 23f08ee:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 23f09ac <_ZN3AES7set_keyEPhi+0x118>
  hi = (round + 1) << 4 ;
 23f08f2:	b2ed      	uxtb	r5, r5
  for (byte cc = keylen, rc = 1 ; cc < hi ; cc += N_COL)
 23f08f4:	42aa      	cmp	r2, r5
 23f08f6:	d256      	bcs.n	23f09a6 <_ZN3AES7set_keyEPhi+0x112>
 23f08f8:	58a0      	ldr	r0, [r4, r2]
      if (cc == next)
 23f08fa:	4594      	cmp	ip, r2
        t[i] = key_sched [cc-4+i] ;
 23f08fc:	9001      	str	r0, [sp, #4]
      if (cc == next)
 23f08fe:	d13f      	bne.n	23f0980 <_ZN3AES7set_keyEPhi+0xec>
  return pgm_read_byte (& s_fwd [x]) ;
 23f0900:	f3c0 2307 	ubfx	r3, r0, #8, #8
          t[0] = s_box (t[1]) ^ rc ;
 23f0904:	f81e 3003 	ldrb.w	r3, [lr, r3]
          rc = f2 (rc) ;
 23f0908:	f011 0f80 	tst.w	r1, #128	; 0x80
          t[0] = s_box (t[1]) ^ rc ;
 23f090c:	ea83 0301 	eor.w	r3, r3, r1
 23f0910:	f88d 3004 	strb.w	r3, [sp, #4]
  return pgm_read_byte (& s_fwd [x]) ;
 23f0914:	f3c0 4307 	ubfx	r3, r0, #16, #8
          t[1] = s_box (t[2]) ;
 23f0918:	f81e 3003 	ldrb.w	r3, [lr, r3]
 23f091c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 23f0920:	f88d 3005 	strb.w	r3, [sp, #5]
  return pgm_read_byte (& s_fwd [x]) ;
 23f0924:	ea4f 6310 	mov.w	r3, r0, lsr #24
          t[2] = s_box (t[3]) ;
 23f0928:	f81e 3003 	ldrb.w	r3, [lr, r3]
  return pgm_read_byte (& s_fwd [x]) ;
 23f092c:	b2c0      	uxtb	r0, r0
          t[2] = s_box (t[3]) ;
 23f092e:	f88d 3006 	strb.w	r3, [sp, #6]
          t[3] = s_box (ttt) ;
 23f0932:	f81e 3000 	ldrb.w	r3, [lr, r0]
          next += keylen ;
 23f0936:	44bc      	add	ip, r7
          rc = f2 (rc) ;
 23f0938:	bf18      	it	ne
 23f093a:	f081 011b 	eorne.w	r1, r1, #27
          next += keylen ;
 23f093e:	fa5f fc8c 	uxtb.w	ip, ip
          t[3] = s_box (ttt) ;
 23f0942:	f88d 3007 	strb.w	r3, [sp, #7]
          rc = f2 (rc) ;
 23f0946:	b2c9      	uxtb	r1, r1
      else if (keylen == 32 && (cc & 31) == 16)
 23f0948:	2304      	movs	r3, #4
 23f094a:	1bd0      	subs	r0, r2, r7
 23f094c:	b2c0      	uxtb	r0, r0
 23f094e:	3004      	adds	r0, #4
 23f0950:	3204      	adds	r2, #4
 23f0952:	4420      	add	r0, r4
 23f0954:	f10d 0904 	add.w	r9, sp, #4
 23f0958:	eb04 0a02 	add.w	sl, r4, r2
        key_sched [cc + i] = key_sched [tt + i] ^ t[i] ;
 23f095c:	f810 8b01 	ldrb.w	r8, [r0], #1
 23f0960:	f819 bb01 	ldrb.w	fp, [r9], #1
      for (byte i = 0 ; i < N_COL ; i++)
 23f0964:	3b01      	subs	r3, #1
        key_sched [cc + i] = key_sched [tt + i] ^ t[i] ;
 23f0966:	ea88 080b 	eor.w	r8, r8, fp
      for (byte i = 0 ; i < N_COL ; i++)
 23f096a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
        key_sched [cc + i] = key_sched [tt + i] ^ t[i] ;
 23f096e:	f80a 8b01 	strb.w	r8, [sl], #1
      for (byte i = 0 ; i < N_COL ; i++)
 23f0972:	d1f3      	bne.n	23f095c <_ZN3AES7set_keyEPhi+0xc8>
  for (byte cc = keylen, rc = 1 ; cc < hi ; cc += N_COL)
 23f0974:	b2d2      	uxtb	r2, r2
 23f0976:	e7bd      	b.n	23f08f4 <_ZN3AES7set_keyEPhi+0x60>
      round = 12 ;
 23f0978:	230c      	movs	r3, #12
      keylen = 24; // 12 rounds
 23f097a:	2618      	movs	r6, #24
      round = 12 ;
 23f097c:	6023      	str	r3, [r4, #0]
      break;
 23f097e:	e7a8      	b.n	23f08d2 <_ZN3AES7set_keyEPhi+0x3e>
      else if (keylen == 32 && (cc & 31) == 16)
 23f0980:	2e20      	cmp	r6, #32
 23f0982:	d1e1      	bne.n	23f0948 <_ZN3AES7set_keyEPhi+0xb4>
 23f0984:	f002 031f 	and.w	r3, r2, #31
 23f0988:	2b10      	cmp	r3, #16
 23f098a:	d1dd      	bne.n	23f0948 <_ZN3AES7set_keyEPhi+0xb4>
 23f098c:	2304      	movs	r3, #4
 23f098e:	a801      	add	r0, sp, #4
            t[i] = s_box (t[i]) ;
 23f0990:	f890 8000 	ldrb.w	r8, [r0]
          for (byte i = 0 ; i < 4 ; i++)
 23f0994:	3b01      	subs	r3, #1
            t[i] = s_box (t[i]) ;
 23f0996:	f81e 8008 	ldrb.w	r8, [lr, r8]
          for (byte i = 0 ; i < 4 ; i++)
 23f099a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            t[i] = s_box (t[i]) ;
 23f099e:	f800 8b01 	strb.w	r8, [r0], #1
          for (byte i = 0 ; i < 4 ; i++)
 23f09a2:	d1f5      	bne.n	23f0990 <_ZN3AES7set_keyEPhi+0xfc>
 23f09a4:	e7d0      	b.n	23f0948 <_ZN3AES7set_keyEPhi+0xb4>
  return SUCCESS ;
 23f09a6:	2000      	movs	r0, #0
 23f09a8:	e784      	b.n	23f08b4 <_ZN3AES7set_keyEPhi+0x20>
 23f09aa:	bf00      	nop
 23f09ac:	023fea88 	.word	0x023fea88

023f09b0 <_ZN3AES7decryptEPhS0_>:
}

/******************************************************************************/

byte AES::decrypt (byte plain [N_BLOCK], byte cipher [N_BLOCK])
{
 23f09b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f09b4:	ee07 2a10 	vmov	s14, r2
  if (round)
 23f09b8:	6802      	ldr	r2, [r0, #0]
{
 23f09ba:	4605      	mov	r5, r0
 23f09bc:	b095      	sub	sp, #84	; 0x54
  if (round)
 23f09be:	2a00      	cmp	r2, #0
 23f09c0:	f000 8179 	beq.w	23f0cb6 <_ZN3AES7decryptEPhS0_+0x306>
    {
      byte s1 [N_BLOCK] ;
      copy_and_key (s1, plain, (byte*) (key_sched + round * N_BLOCK)) ;
 23f09c4:	1d03      	adds	r3, r0, #4
 23f09c6:	ae0c      	add	r6, sp, #48	; 0x30
 23f09c8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23f09cc:	4630      	mov	r0, r6
  return pgm_read_byte (& s_inv [x]) ;
 23f09ce:	4cbb      	ldr	r4, [pc, #748]	; (23f0cbc <_ZN3AES7decryptEPhS0_+0x30c>)
      copy_and_key (s1, plain, (byte*) (key_sched + round * N_BLOCK)) ;
 23f09d0:	9307      	str	r3, [sp, #28]
 23f09d2:	f7ff fee1 	bl	23f0798 <_ZL12copy_and_keyPhS_S_>
  return pgm_read_byte (& s_inv [x]) ;
 23f09d6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 23f09da:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
  st [0] = is_box (st[0]) ; st [4] = is_box (st [4]);
 23f09de:	5ce3      	ldrb	r3, [r4, r3]
  st [13] = is_box (st [9]) ; st [9] = is_box (st [5]) ;
 23f09e0:	5ca2      	ldrb	r2, [r4, r2]
  st [0] = is_box (st[0]) ; st [4] = is_box (st [4]);
 23f09e2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  return pgm_read_byte (& s_inv [x]) ;
 23f09e6:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 23f09ea:	ee07 6a90 	vmov	s15, r6
  st [0] = is_box (st[0]) ; st [4] = is_box (st [4]);
 23f09ee:	5ce3      	ldrb	r3, [r4, r3]
 23f09f0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  return pgm_read_byte (& s_inv [x]) ;
 23f09f4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
  st [8] = is_box (st[8]) ; st [12] = is_box (st [12]);
 23f09f8:	5ce3      	ldrb	r3, [r4, r3]
 23f09fa:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  return pgm_read_byte (& s_inv [x]) ;
 23f09fe:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
  st [8] = is_box (st[8]) ; st [12] = is_box (st [12]);
 23f0a02:	5ce3      	ldrb	r3, [r4, r3]
 23f0a04:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  byte tt = st[13] ;
 23f0a08:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
  st [13] = is_box (st [9]) ; st [9] = is_box (st [5]) ;
 23f0a0c:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
  return pgm_read_byte (& s_inv [x]) ;
 23f0a10:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
  st [5]  = is_box (st [1]) ; st [1] = is_box (tt) ;
 23f0a14:	5ce3      	ldrb	r3, [r4, r3]
  st [13] = is_box (st [9]) ; st [9] = is_box (st [5]) ;
 23f0a16:	5ca2      	ldrb	r2, [r4, r2]
 23f0a18:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  return pgm_read_byte (& s_inv [x]) ;
 23f0a1c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
  st [5]  = is_box (st [1]) ; st [1] = is_box (tt) ;
 23f0a20:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 23f0a24:	5ca2      	ldrb	r2, [r4, r2]
  tt = st [2] ; st [2] = is_box (st [10]) ; st [10] = is_box (tt) ;
 23f0a26:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
  st [5]  = is_box (st [1]) ; st [1] = is_box (tt) ;
 23f0a2a:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  return pgm_read_byte (& s_inv [x]) ;
 23f0a2e:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
  tt = st [2] ; st [2] = is_box (st [10]) ; st [10] = is_box (tt) ;
 23f0a32:	5ce3      	ldrb	r3, [r4, r3]
 23f0a34:	5ca2      	ldrb	r2, [r4, r2]
 23f0a36:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 23f0a3a:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
  return pgm_read_byte (& s_inv [x]) ;
 23f0a3e:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
  tt = st [6] ; st [6] = is_box (st [14]) ; st [14] = is_box (tt) ;
 23f0a42:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 23f0a46:	5ca2      	ldrb	r2, [r4, r2]
 23f0a48:	5ce3      	ldrb	r3, [r4, r3]
 23f0a4a:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  return pgm_read_byte (& s_inv [x]) ;
 23f0a4e:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
  tt = st [6] ; st [6] = is_box (st [14]) ; st [14] = is_box (tt) ;
 23f0a52:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
  st [3]  = is_box (st [7])  ; st [7]  = is_box (st [11]) ;
 23f0a56:	5ca2      	ldrb	r2, [r4, r2]
  tt = st [3] ;
 23f0a58:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  st [3]  = is_box (st [7])  ; st [7]  = is_box (st [11]) ;
 23f0a5c:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
  return pgm_read_byte (& s_inv [x]) ;
 23f0a60:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
  st [11] = is_box (st [15]) ; st [15] = is_box (tt) ;
 23f0a64:	5ce3      	ldrb	r3, [r4, r3]
  st [3]  = is_box (st [7])  ; st [7]  = is_box (st [11]) ;
 23f0a66:	5ca2      	ldrb	r2, [r4, r2]
 23f0a68:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  return pgm_read_byte (& s_inv [x]) ;
 23f0a6c:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
  st [11] = is_box (st [15]) ; st [15] = is_box (tt) ;
 23f0a70:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
      inv_shift_sub_rows (s1) ;

      for (byte r = round ; --r ; )
 23f0a74:	682b      	ldr	r3, [r5, #0]
  st [11] = is_box (st [15]) ; st [15] = is_box (tt) ;
 23f0a76:	5ca2      	ldrb	r2, [r4, r2]
 23f0a78:	3b01      	subs	r3, #1
 23f0a7a:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
      for (byte r = round ; --r ; )
 23f0a7e:	b2da      	uxtb	r2, r3
 23f0a80:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 23f0a84:	1d2b      	adds	r3, r5, #4
 23f0a86:	9305      	str	r3, [sp, #20]
 23f0a88:	9b07      	ldr	r3, [sp, #28]
 23f0a8a:	9a05      	ldr	r2, [sp, #20]
 23f0a8c:	4293      	cmp	r3, r2
 23f0a8e:	f000 8107 	beq.w	23f0ca0 <_ZN3AES7decryptEPhS0_+0x2f0>
       {
         byte s2 [N_BLOCK] ;
         copy_and_key (s2, s1, (byte*) (key_sched + r * N_BLOCK)) ;
 23f0a92:	ee17 1a90 	vmov	r1, s15
 23f0a96:	a810      	add	r0, sp, #64	; 0x40
 23f0a98:	f7ff fe7e 	bl	23f0798 <_ZL12copy_and_keyPhS_S_>
 23f0a9c:	ab0c      	add	r3, sp, #48	; 0x30
 23f0a9e:	f04f 0b00 	mov.w	fp, #0
 23f0aa2:	ee07 3a90 	vmov	s15, r3
 23f0aa6:	f10d 0940 	add.w	r9, sp, #64	; 0x40
      byte a1 = st [i] ;
 23f0aaa:	f899 3000 	ldrb.w	r3, [r9]
  for (byte i = 0 ; i < N_BLOCK ; i += N_COL)
 23f0aae:	f109 0904 	add.w	r9, r9, #4
      byte a1 = st [i] ;
 23f0ab2:	9306      	str	r3, [sp, #24]
      byte b1 = st [i+1] ;
 23f0ab4:	f819 3c03 	ldrb.w	r3, [r9, #-3]
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23f0ab8:	9906      	ldr	r1, [sp, #24]
      byte b1 = st [i+1] ;
 23f0aba:	9302      	str	r3, [sp, #8]
      byte c1 = st [i+2] ;
 23f0abc:	f819 3c02 	ldrb.w	r3, [r9, #-2]
 23f0ac0:	9303      	str	r3, [sp, #12]
      byte d1 = st [i+3] ;
 23f0ac2:	f819 3c01 	ldrb.w	r3, [r9, #-1]
 23f0ac6:	9304      	str	r3, [sp, #16]
      byte a2 = f2(a1), b2 = f2(b1), c2 = f2(c1), d2 = f2(d1) ;
 23f0ac8:	f919 3c04 	ldrsb.w	r3, [r9, #-4]
 23f0acc:	2b00      	cmp	r3, #0
 23f0ace:	9b06      	ldr	r3, [sp, #24]
 23f0ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23f0ad4:	bfb8      	it	lt
 23f0ad6:	f083 031b 	eorlt.w	r3, r3, #27
 23f0ada:	fa5f fa83 	uxtb.w	sl, r3
 23f0ade:	9b02      	ldr	r3, [sp, #8]
 23f0ae0:	ea4f 024a 	mov.w	r2, sl, lsl #1
 23f0ae4:	f013 0f80 	tst.w	r3, #128	; 0x80
 23f0ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23f0aec:	bf18      	it	ne
 23f0aee:	f083 031b 	eorne.w	r3, r3, #27
 23f0af2:	b2db      	uxtb	r3, r3
 23f0af4:	9300      	str	r3, [sp, #0]
 23f0af6:	9b03      	ldr	r3, [sp, #12]
 23f0af8:	f013 0f80 	tst.w	r3, #128	; 0x80
 23f0afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23f0b00:	bf18      	it	ne
 23f0b02:	f083 031b 	eorne.w	r3, r3, #27
 23f0b06:	b2db      	uxtb	r3, r3
 23f0b08:	9301      	str	r3, [sp, #4]
 23f0b0a:	9b04      	ldr	r3, [sp, #16]
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
 23f0b0c:	9d01      	ldr	r5, [sp, #4]
      byte a2 = f2(a1), b2 = f2(b1), c2 = f2(c1), d2 = f2(d1) ;
 23f0b0e:	f013 0f80 	tst.w	r3, #128	; 0x80
 23f0b12:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23f0b16:	bf18      	it	ne
 23f0b18:	f083 031b 	eorne.w	r3, r3, #27
 23f0b1c:	b2d8      	uxtb	r0, r3
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
 23f0b1e:	9b00      	ldr	r3, [sp, #0]
 23f0b20:	f01a 0f80 	tst.w	sl, #128	; 0x80
 23f0b24:	bf18      	it	ne
 23f0b26:	f082 021b 	eorne.w	r2, r2, #27
 23f0b2a:	f013 0f80 	tst.w	r3, #128	; 0x80
 23f0b2e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23f0b32:	ea4f 0c45 	mov.w	ip, r5, lsl #1
 23f0b36:	bf18      	it	ne
 23f0b38:	f083 031b 	eorne.w	r3, r3, #27
 23f0b3c:	f015 0f80 	tst.w	r5, #128	; 0x80
 23f0b40:	b2d2      	uxtb	r2, r2
 23f0b42:	ea4f 0740 	mov.w	r7, r0, lsl #1
 23f0b46:	bf18      	it	ne
 23f0b48:	f08c 0c1b 	eorne.w	ip, ip, #27
 23f0b4c:	f010 0f80 	tst.w	r0, #128	; 0x80
 23f0b50:	ea4f 0842 	mov.w	r8, r2, lsl #1
 23f0b54:	bf18      	it	ne
 23f0b56:	f087 071b 	eorne.w	r7, r7, #27
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23f0b5a:	f012 0f80 	tst.w	r2, #128	; 0x80
 23f0b5e:	bf18      	it	ne
 23f0b60:	f088 081b 	eorne.w	r8, r8, #27
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
 23f0b64:	b2db      	uxtb	r3, r3
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23f0b66:	fa5f f888 	uxtb.w	r8, r8
 23f0b6a:	f013 0f80 	tst.w	r3, #128	; 0x80
 23f0b6e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23f0b72:	ea81 0108 	eor.w	r1, r1, r8
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23f0b76:	bf18      	it	ne
 23f0b78:	f08e 0e1b 	eorne.w	lr, lr, #27
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23f0b7c:	9108      	str	r1, [sp, #32]
 23f0b7e:	9902      	ldr	r1, [sp, #8]
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
 23f0b80:	fa5f fc8c 	uxtb.w	ip, ip
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23f0b84:	fa5f fe8e 	uxtb.w	lr, lr
 23f0b88:	f01c 0f80 	tst.w	ip, #128	; 0x80
 23f0b8c:	ea4f 064c 	mov.w	r6, ip, lsl #1
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23f0b90:	ea81 010e 	eor.w	r1, r1, lr
 23f0b94:	9109      	str	r1, [sp, #36]	; 0x24
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23f0b96:	bf18      	it	ne
 23f0b98:	f086 061b 	eorne.w	r6, r6, #27
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23f0b9c:	9903      	ldr	r1, [sp, #12]
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
 23f0b9e:	b2ff      	uxtb	r7, r7
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23f0ba0:	b2f6      	uxtb	r6, r6
 23f0ba2:	f017 0f80 	tst.w	r7, #128	; 0x80
 23f0ba6:	ea4f 0547 	mov.w	r5, r7, lsl #1
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23f0baa:	ea81 0106 	eor.w	r1, r1, r6
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23f0bae:	bf18      	it	ne
 23f0bb0:	f085 051b 	eorne.w	r5, r5, #27
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23f0bb4:	910a      	str	r1, [sp, #40]	; 0x28
 23f0bb6:	9904      	ldr	r1, [sp, #16]
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23f0bb8:	b2ed      	uxtb	r5, r5
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23f0bba:	4069      	eors	r1, r5
 23f0bbc:	910b      	str	r1, [sp, #44]	; 0x2c
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23f0bbe:	9903      	ldr	r1, [sp, #12]
      byte ac = a8 ^ a4,bc = b8 ^ b4,cc = c8 ^ c4,dc = d8 ^ d4 ;
 23f0bc0:	407d      	eors	r5, r7
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23f0bc2:	ea81 070a 	eor.w	r7, r1, sl
 23f0bc6:	9900      	ldr	r1, [sp, #0]
      byte ac = a8 ^ a4,bc = b8 ^ b4,cc = c8 ^ c4,dc = d8 ^ d4 ;
 23f0bc8:	ea82 0208 	eor.w	r2, r2, r8
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23f0bcc:	404f      	eors	r7, r1
 23f0bce:	9909      	ldr	r1, [sp, #36]	; 0x24
 23f0bd0:	4057      	eors	r7, r2
      byte ac = a8 ^ a4,bc = b8 ^ b4,cc = c8 ^ c4,dc = d8 ^ d4 ;
 23f0bd2:	ea8c 0606 	eor.w	r6, ip, r6
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23f0bd6:	404f      	eors	r7, r1
  return pgm_read_byte (& s_inv [x]) ;
 23f0bd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23f0bda:	4077      	eors	r7, r6
  return pgm_read_byte (& s_inv [x]) ;
 23f0bdc:	404f      	eors	r7, r1
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23f0bde:	ee17 1a90 	vmov	r1, s15
 23f0be2:	5de7      	ldrb	r7, [r4, r7]
      byte ac = a8 ^ a4,bc = b8 ^ b4,cc = c8 ^ c4,dc = d8 ^ d4 ;
 23f0be4:	ea83 030e 	eor.w	r3, r3, lr
  return pgm_read_byte (& s_inv [x]) ;
 23f0be8:	fa5f fe8b 	uxtb.w	lr, fp
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23f0bec:	f80b 7001 	strb.w	r7, [fp, r1]
      dt[(i+5)&15]  = is_box (a9     ^  bc^b2  ^  c9^c2  ^  dc^d1) ;
 23f0bf0:	f10e 0705 	add.w	r7, lr, #5
 23f0bf4:	a914      	add	r1, sp, #80	; 0x50
 23f0bf6:	f007 070f 	and.w	r7, r7, #15
 23f0bfa:	440f      	add	r7, r1
 23f0bfc:	9904      	ldr	r1, [sp, #16]
  for (byte i = 0 ; i < N_BLOCK ; i += N_COL)
 23f0bfe:	f10b 0b04 	add.w	fp, fp, #4
      dt[(i+5)&15]  = is_box (a9     ^  bc^b2  ^  c9^c2  ^  dc^d1) ;
 23f0c02:	468c      	mov	ip, r1
 23f0c04:	9900      	ldr	r1, [sp, #0]
  for (byte i = 0 ; i < N_BLOCK ; i += N_COL)
 23f0c06:	f1bb 0f10 	cmp.w	fp, #16
      dt[(i+5)&15]  = is_box (a9     ^  bc^b2  ^  c9^c2  ^  dc^d1) ;
 23f0c0a:	ea8c 0c01 	eor.w	ip, ip, r1
 23f0c0e:	9901      	ldr	r1, [sp, #4]
 23f0c10:	ea81 0c0c 	eor.w	ip, r1, ip
 23f0c14:	9908      	ldr	r1, [sp, #32]
 23f0c16:	ea81 0c0c 	eor.w	ip, r1, ip
 23f0c1a:	990a      	ldr	r1, [sp, #40]	; 0x28
 23f0c1c:	ea83 0c0c 	eor.w	ip, r3, ip
 23f0c20:	ea81 0c0c 	eor.w	ip, r1, ip
  return pgm_read_byte (& s_inv [x]) ;
 23f0c24:	ea85 0c0c 	eor.w	ip, r5, ip
      dt[(i+5)&15]  = is_box (a9     ^  bc^b2  ^  c9^c2  ^  dc^d1) ;
 23f0c28:	f814 c00c 	ldrb.w	ip, [r4, ip]
      dt[(i+10)&15] = is_box (ac^a1  ^  b9     ^  cc^c2  ^  d9^d2) ;
 23f0c2c:	a914      	add	r1, sp, #80	; 0x50
      dt[(i+5)&15]  = is_box (a9     ^  bc^b2  ^  c9^c2  ^  dc^d1) ;
 23f0c2e:	f807 cc20 	strb.w	ip, [r7, #-32]
      dt[(i+10)&15] = is_box (ac^a1  ^  b9     ^  cc^c2  ^  d9^d2) ;
 23f0c32:	f10e 070a 	add.w	r7, lr, #10
 23f0c36:	f007 070f 	and.w	r7, r7, #15
 23f0c3a:	440f      	add	r7, r1
 23f0c3c:	9906      	ldr	r1, [sp, #24]
 23f0c3e:	468c      	mov	ip, r1
 23f0c40:	9901      	ldr	r1, [sp, #4]
 23f0c42:	ea8c 0801 	eor.w	r8, ip, r1
 23f0c46:	ea80 0808 	eor.w	r8, r0, r8
 23f0c4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 23f0c4c:	ea82 0208 	eor.w	r2, r2, r8
 23f0c50:	ea82 0201 	eor.w	r2, r2, r1
  return pgm_read_byte (& s_inv [x]) ;
 23f0c54:	990b      	ldr	r1, [sp, #44]	; 0x2c
      dt[(i+10)&15] = is_box (ac^a1  ^  b9     ^  cc^c2  ^  d9^d2) ;
 23f0c56:	ea82 0206 	eor.w	r2, r2, r6
  return pgm_read_byte (& s_inv [x]) ;
 23f0c5a:	ea82 0201 	eor.w	r2, r2, r1
      dt[(i+10)&15] = is_box (ac^a1  ^  b9     ^  cc^c2  ^  d9^d2) ;
 23f0c5e:	5ca2      	ldrb	r2, [r4, r2]
      dt[(i+15)&15] = is_box (a9^a2  ^  bc^b1  ^  c9     ^  dc^d2) ;
 23f0c60:	a914      	add	r1, sp, #80	; 0x50
      dt[(i+10)&15] = is_box (ac^a1  ^  b9     ^  cc^c2  ^  d9^d2) ;
 23f0c62:	f807 2c20 	strb.w	r2, [r7, #-32]
      dt[(i+15)&15] = is_box (a9^a2  ^  bc^b1  ^  c9     ^  dc^d2) ;
 23f0c66:	f10e 020f 	add.w	r2, lr, #15
 23f0c6a:	f002 020f 	and.w	r2, r2, #15
 23f0c6e:	440a      	add	r2, r1
 23f0c70:	9902      	ldr	r1, [sp, #8]
 23f0c72:	ea81 0e0a 	eor.w	lr, r1, sl
 23f0c76:	9908      	ldr	r1, [sp, #32]
 23f0c78:	ea80 0e0e 	eor.w	lr, r0, lr
 23f0c7c:	ea81 0e0e 	eor.w	lr, r1, lr
 23f0c80:	990a      	ldr	r1, [sp, #40]	; 0x28
 23f0c82:	ea83 030e 	eor.w	r3, r3, lr
 23f0c86:	ea81 0003 	eor.w	r0, r1, r3
  return pgm_read_byte (& s_inv [x]) ;
 23f0c8a:	ea85 0500 	eor.w	r5, r5, r0
      dt[(i+15)&15] = is_box (a9^a2  ^  bc^b1  ^  c9     ^  dc^d2) ;
 23f0c8e:	5d63      	ldrb	r3, [r4, r5]
 23f0c90:	f802 3c20 	strb.w	r3, [r2, #-32]
  for (byte i = 0 ; i < N_BLOCK ; i += N_COL)
 23f0c94:	f47f af09 	bne.w	23f0aaa <_ZN3AES7decryptEPhS0_+0xfa>
 23f0c98:	9b05      	ldr	r3, [sp, #20]
 23f0c9a:	3b10      	subs	r3, #16
 23f0c9c:	9305      	str	r3, [sp, #20]
      for (byte r = round ; --r ; )
 23f0c9e:	e6f3      	b.n	23f0a88 <_ZN3AES7decryptEPhS0_+0xd8>
         inv_mix_sub_columns (s1, s2) ;
       }
      copy_and_key (cipher, s1, (byte*) (key_sched)) ;
 23f0ca0:	ee17 0a10 	vmov	r0, s14
 23f0ca4:	ee17 1a90 	vmov	r1, s15
 23f0ca8:	9a07      	ldr	r2, [sp, #28]
 23f0caa:	f7ff fd75 	bl	23f0798 <_ZL12copy_and_keyPhS_S_>
    }
  else
    return FAILURE ;
  return SUCCESS ;
 23f0cae:	2000      	movs	r0, #0
}
 23f0cb0:	b015      	add	sp, #84	; 0x54
 23f0cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return FAILURE ;
 23f0cb6:	20ff      	movs	r0, #255	; 0xff
 23f0cb8:	e7fa      	b.n	23f0cb0 <_ZN3AES7decryptEPhS0_+0x300>
 23f0cba:	bf00      	nop
 23f0cbc:	023feb88 	.word	0x023feb88

023f0cc0 <_ZN3AES11cbc_decryptEPhS0_iS0_>:

/******************************************************************************/

byte AES::cbc_decrypt (byte * cipher, byte * plain, int n_block, byte iv [N_BLOCK])
{
 23f0cc0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 23f0cc4:	4607      	mov	r7, r0
 23f0cc6:	460d      	mov	r5, r1
 23f0cc8:	4616      	mov	r6, r2
 23f0cca:	461c      	mov	r4, r3
 23f0ccc:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  while (n_block--)
 23f0cd0:	b1ec      	cbz	r4, 23f0d0e <_ZN3AES11cbc_decryptEPhS0_iS0_+0x4e>
    {
      byte tmp [N_BLOCK] ;
      copy_n_bytes (tmp, cipher, N_BLOCK) ;
 23f0cd2:	2310      	movs	r3, #16
 23f0cd4:	462a      	mov	r2, r5
 23f0cd6:	4669      	mov	r1, sp
 23f0cd8:	4638      	mov	r0, r7
 23f0cda:	f7ff fdab 	bl	23f0834 <_ZN3AES12copy_n_bytesEPhS0_h>
      if (decrypt (cipher, plain) != SUCCESS)
 23f0cde:	4632      	mov	r2, r6
 23f0ce0:	4629      	mov	r1, r5
 23f0ce2:	4638      	mov	r0, r7
 23f0ce4:	f7ff fe64 	bl	23f09b0 <_ZN3AES7decryptEPhS0_>
 23f0ce8:	3c01      	subs	r4, #1
 23f0cea:	b118      	cbz	r0, 23f0cf4 <_ZN3AES11cbc_decryptEPhS0_iS0_+0x34>
        return FAILURE ;
 23f0cec:	20ff      	movs	r0, #255	; 0xff
      copy_n_bytes (iv, tmp, N_BLOCK) ;
      plain  += N_BLOCK ;
      cipher += N_BLOCK;
    }
  return SUCCESS ;
}
 23f0cee:	b004      	add	sp, #16
 23f0cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      xor_block (plain, iv) ;
 23f0cf4:	4630      	mov	r0, r6
 23f0cf6:	4641      	mov	r1, r8
 23f0cf8:	f7ff fd28 	bl	23f074c <_ZL9xor_blockPhS_>
      copy_n_bytes (iv, tmp, N_BLOCK) ;
 23f0cfc:	2310      	movs	r3, #16
 23f0cfe:	466a      	mov	r2, sp
 23f0d00:	4641      	mov	r1, r8
 23f0d02:	4638      	mov	r0, r7
 23f0d04:	f7ff fd96 	bl	23f0834 <_ZN3AES12copy_n_bytesEPhS0_h>
      plain  += N_BLOCK ;
 23f0d08:	3610      	adds	r6, #16
      cipher += N_BLOCK;
 23f0d0a:	3510      	adds	r5, #16
  while (n_block--)
 23f0d0c:	e7e0      	b.n	23f0cd0 <_ZN3AES11cbc_decryptEPhS0_iS0_+0x10>
  return SUCCESS ;
 23f0d0e:	4620      	mov	r0, r4
 23f0d10:	e7ed      	b.n	23f0cee <_ZN3AES11cbc_decryptEPhS0_iS0_+0x2e>

023f0d12 <_ZN3AES6set_IVEy>:
  return SUCCESS ;
}

/*****************************************************************************/

void AES::set_IV(unsigned long long int IVCl){
 23f0d12:	b537      	push	{r0, r1, r2, r4, r5, lr}
	memcpy(iv,&IVCl,8);
 23f0d14:	466d      	mov	r5, sp
void AES::set_IV(unsigned long long int IVCl){
 23f0d16:	e9cd 2300 	strd	r2, r3, [sp]
 23f0d1a:	4604      	mov	r4, r0
	memcpy(iv,&IVCl,8);
 23f0d1c:	cd03      	ldmia	r5!, {r0, r1}
	memcpy(iv+8,&IVCl,8);
 23f0d1e:	466d      	mov	r5, sp
	memcpy(iv,&IVCl,8);
 23f0d20:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 23f0d24:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	IVC = IVCl;
 23f0d28:	e9c4 233e 	strd	r2, r3, [r4, #248]	; 0xf8
	memcpy(iv+8,&IVCl,8);
 23f0d2c:	cd03      	ldmia	r5!, {r0, r1}
 23f0d2e:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
 23f0d32:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
}
 23f0d36:	b003      	add	sp, #12
 23f0d38:	bd30      	pop	{r4, r5, pc}

023f0d3a <_ZN3AES6iv_incEv>:

/******************************************************************************/

void AES::iv_inc(){
	IVC += 1;
 23f0d3a:	e9d0 323e 	ldrd	r3, r2, [r0, #248]	; 0xf8
 23f0d3e:	3301      	adds	r3, #1
 23f0d40:	f142 0200 	adc.w	r2, r2, #0
 23f0d44:	e9c0 323e 	strd	r3, r2, [r0, #248]	; 0xf8
	memcpy(iv,&IVC,8);
 23f0d48:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 23f0d4c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23f0d50:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
 23f0d54:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
	memcpy(iv+8,&IVC,8);
 23f0d58:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 23f0d5c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 23f0d60:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
 23f0d64:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
}
 23f0d68:	4770      	bx	lr

023f0d6a <_ZN3AES6get_IVEPh>:


/******************************************************************************/

void AES::get_IV(byte *out){
	memcpy(out,&IVC,8);
 23f0d6a:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 23f0d6e:	600b      	str	r3, [r1, #0]
 23f0d70:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
 23f0d74:	604b      	str	r3, [r1, #4]
	memcpy(out+8,&IVC,8);
 23f0d76:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 23f0d7a:	608b      	str	r3, [r1, #8]
 23f0d7c:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
 23f0d80:	60cb      	str	r3, [r1, #12]
}
 23f0d82:	4770      	bx	lr

023f0d84 <_ZN3AES14do_aes_decryptEPhiS0_S0_iS0_>:
	cbc_encrypt (plain_p, cipher, blocks);
}

/******************************************************************************/

void AES::do_aes_decrypt(byte *cipher,int size_c,byte *plain,byte *key, int bits, byte ivl [N_BLOCK]){
 23f0d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f0d88:	4614      	mov	r4, r2
 23f0d8a:	461f      	mov	r7, r3
 23f0d8c:	4605      	mov	r5, r0
 23f0d8e:	460e      	mov	r6, r1
	size = sizel;
 23f0d90:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
	set_size(size_c);
	int blocks = size_c / N_BLOCK;
	set_key (key, bits);
 23f0d94:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
void AES::do_aes_decrypt(byte *cipher,int size_c,byte *plain,byte *key, int bits, byte ivl [N_BLOCK]){
 23f0d98:	f8dd 8020 	ldr.w	r8, [sp, #32]
	set_key (key, bits);
 23f0d9c:	f7ff fd7a 	bl	23f0894 <_ZN3AES7set_keyEPhi>
	int blocks = size_c / N_BLOCK;
 23f0da0:	2c00      	cmp	r4, #0
 23f0da2:	bfb8      	it	lt
 23f0da4:	340f      	addlt	r4, #15
	cbc_decrypt (cipher,plain, blocks, ivl);
 23f0da6:	463a      	mov	r2, r7
 23f0da8:	4631      	mov	r1, r6
 23f0daa:	4628      	mov	r0, r5
 23f0dac:	f8cd 8018 	str.w	r8, [sp, #24]
 23f0db0:	1123      	asrs	r3, r4, #4
}
 23f0db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	cbc_decrypt (cipher,plain, blocks, ivl);
 23f0db6:	f7ff bf83 	b.w	23f0cc0 <_ZN3AES11cbc_decryptEPhS0_iS0_>

023f0dba <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  /*! @brief Whether we should automatically change the range (if possible) for
     higher precision
      @param enabled True if we will try to autorange */
  virtual void enableAutoRange(bool enabled) {
    (void)enabled; /* suppress unused warning */
  };
 23f0dba:	4770      	bx	lr

023f0dbc <_ZN15Adafruit_BME280C1Ev>:
#include <Wire.h>

/*!
 *  @brief  class constructor
 */
Adafruit_BME280::Adafruit_BME280() : _cs(-1), _mosi(-1), _miso(-1), _sck(-1) {}
 23f0dbc:	2200      	movs	r2, #0
 23f0dbe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 23f0dc2:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23f0dc6:	e9c0 1208 	strd	r1, r2, [r0, #32]
 23f0dca:	6102      	str	r2, [r0, #16]
 23f0dcc:	4770      	bx	lr

023f0dce <_ZN15Adafruit_BME2807spixferEh>:
 *   @brief  Encapsulate hardware and software SPI transfer into one
 * function
 *   @param x the data byte to transfer
 *   @returns the data byte read from the device
 */
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 23f0dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // hardware SPI
  if (_sck == -1)
 23f0dd2:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 23f0dd6:	4604      	mov	r4, r0
  if (_sck == -1)
 23f0dd8:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 23f0dda:	460f      	mov	r7, r1
  if (_sck == -1)
 23f0ddc:	d104      	bne.n	23f0de8 <_ZN15Adafruit_BME2807spixferEh+0x1a>
    digitalWrite(_sck, HIGH);
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
}
 23f0dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return _spi->transfer(x);
 23f0de2:	6840      	ldr	r0, [r0, #4]
 23f0de4:	f008 bdde 	b.w	23f99a4 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
 23f0de8:	2500      	movs	r5, #0
  for (int i = 7; i >= 0; i--) {
 23f0dea:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1 << i));
 23f0dec:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
 23f0df0:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
 23f0df4:	2100      	movs	r1, #0
 23f0df6:	b280      	uxth	r0, r0
 23f0df8:	f009 fa19 	bl	23fa22e <digitalWrite>
    digitalWrite(_mosi, x & (1 << i));
 23f0dfc:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 23f0e00:	fa08 f106 	lsl.w	r1, r8, r6
 23f0e04:	4039      	ands	r1, r7
 23f0e06:	b280      	uxth	r0, r0
 23f0e08:	f009 fa11 	bl	23fa22e <digitalWrite>
    digitalWrite(_sck, HIGH);
 23f0e0c:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
 23f0e10:	2101      	movs	r1, #1
 23f0e12:	b280      	uxth	r0, r0
 23f0e14:	f009 fa0b 	bl	23fa22e <digitalWrite>
    if (digitalRead(_miso))
 23f0e18:	f994 0022 	ldrsb.w	r0, [r4, #34]	; 0x22
    reply <<= 1;
 23f0e1c:	006d      	lsls	r5, r5, #1
    if (digitalRead(_miso))
 23f0e1e:	b280      	uxth	r0, r0
    reply <<= 1;
 23f0e20:	b2ed      	uxtb	r5, r5
    if (digitalRead(_miso))
 23f0e22:	f009 fa1d 	bl	23fa260 <digitalRead>
 23f0e26:	b108      	cbz	r0, 23f0e2c <_ZN15Adafruit_BME2807spixferEh+0x5e>
      reply |= 1;
 23f0e28:	f045 0501 	orr.w	r5, r5, #1
  for (int i = 7; i >= 0; i--) {
 23f0e2c:	3e01      	subs	r6, #1
 23f0e2e:	d2df      	bcs.n	23f0df0 <_ZN15Adafruit_BME2807spixferEh+0x22>
}
 23f0e30:	4628      	mov	r0, r5
 23f0e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

023f0e38 <_ZN15Adafruit_BME2806write8Ehh>:
/*!
 *   @brief  Writes an 8 bit value over I2C or SPI
 *   @param reg the register address to write to
 *   @param value the value to write to the register
 */
void Adafruit_BME280::write8(byte reg, byte value) {
 23f0e38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (_cs == -1) {
 23f0e3a:	f990 3020 	ldrsb.w	r3, [r0, #32]
void Adafruit_BME280::write8(byte reg, byte value) {
 23f0e3e:	4604      	mov	r4, r0
  if (_cs == -1) {
 23f0e40:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
 23f0e42:	460e      	mov	r6, r1
 23f0e44:	4615      	mov	r5, r2
  if (_cs == -1) {
 23f0e46:	d113      	bne.n	23f0e70 <_ZN15Adafruit_BME2806write8Ehh+0x38>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23f0e48:	7d01      	ldrb	r1, [r0, #20]
 23f0e4a:	6800      	ldr	r0, [r0, #0]
 23f0e4c:	f008 f85c 	bl	23f8f08 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23f0e50:	6820      	ldr	r0, [r4, #0]
 23f0e52:	4631      	mov	r1, r6
 23f0e54:	6803      	ldr	r3, [r0, #0]
 23f0e56:	689b      	ldr	r3, [r3, #8]
 23f0e58:	4798      	blx	r3
    _wire->write((uint8_t)value);
 23f0e5a:	6820      	ldr	r0, [r4, #0]
 23f0e5c:	4629      	mov	r1, r5
 23f0e5e:	6803      	ldr	r3, [r0, #0]
 23f0e60:	689b      	ldr	r3, [r3, #8]
 23f0e62:	4798      	blx	r3
    _wire->endTransmission();
 23f0e64:	6820      	ldr	r0, [r4, #0]
    spixfer(value);
    digitalWrite(_cs, HIGH);
    if (_sck == -1)
      _spi->endTransaction(); // release the SPI bus
  }
}
 23f0e66:	b004      	add	sp, #16
 23f0e68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _wire->endTransmission();
 23f0e6c:	f008 b857 	b.w	23f8f1e <_ZN7TwoWire15endTransmissionEv>
    if (_sck == -1)
 23f0e70:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
 23f0e74:	3301      	adds	r3, #1
 23f0e76:	d10d      	bne.n	23f0e94 <_ZN15Adafruit_BME2806write8Ehh+0x5c>
      dataMode_{dataMode}
 23f0e78:	4b17      	ldr	r3, [pc, #92]	; (23f0ed8 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23f0e7a:	4669      	mov	r1, sp
 23f0e7c:	9300      	str	r3, [sp, #0]
 23f0e7e:	2300      	movs	r3, #0
 23f0e80:	f88d 3004 	strb.w	r3, [sp, #4]
 23f0e84:	4b15      	ldr	r3, [pc, #84]	; (23f0edc <_ZN15Adafruit_BME2806write8Ehh+0xa4>)
 23f0e86:	6840      	ldr	r0, [r0, #4]
 23f0e88:	9302      	str	r3, [sp, #8]
 23f0e8a:	2301      	movs	r3, #1
 23f0e8c:	f8ad 300c 	strh.w	r3, [sp, #12]
 23f0e90:	f008 fd1a 	bl	23f98c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23f0e94:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23f0e98:	2100      	movs	r1, #0
 23f0e9a:	b280      	uxth	r0, r0
 23f0e9c:	f009 f9c7 	bl	23fa22e <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
 23f0ea0:	f006 017f 	and.w	r1, r6, #127	; 0x7f
 23f0ea4:	4620      	mov	r0, r4
 23f0ea6:	f7ff ff92 	bl	23f0dce <_ZN15Adafruit_BME2807spixferEh>
    spixfer(value);
 23f0eaa:	4629      	mov	r1, r5
 23f0eac:	4620      	mov	r0, r4
 23f0eae:	f7ff ff8e 	bl	23f0dce <_ZN15Adafruit_BME2807spixferEh>
    digitalWrite(_cs, HIGH);
 23f0eb2:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23f0eb6:	2101      	movs	r1, #1
 23f0eb8:	b280      	uxth	r0, r0
 23f0eba:	f009 f9b8 	bl	23fa22e <digitalWrite>
    if (_sck == -1)
 23f0ebe:	f994 3023 	ldrsb.w	r3, [r4, #35]	; 0x23
 23f0ec2:	3301      	adds	r3, #1
 23f0ec4:	d105      	bne.n	23f0ed2 <_ZN15Adafruit_BME2806write8Ehh+0x9a>
      _spi->endTransaction(); // release the SPI bus
 23f0ec6:	6860      	ldr	r0, [r4, #4]
}
 23f0ec8:	b004      	add	sp, #16
 23f0eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      _spi->endTransaction(); // release the SPI bus
 23f0ece:	f008 bce1 	b.w	23f9894 <_ZN8SPIClass14endTransactionEv>
}
 23f0ed2:	b004      	add	sp, #16
 23f0ed4:	bd70      	pop	{r4, r5, r6, pc}
 23f0ed6:	bf00      	nop
 23f0ed8:	023fea50 	.word	0x023fea50
 23f0edc:	0007a120 	.word	0x0007a120

023f0ee0 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
                                  standby_duration duration) {
 23f0ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f0ee2:	4604      	mov	r4, r0
  _measReg.osrs_t = tempSampling;
 23f0ee4:	00db      	lsls	r3, r3, #3
 23f0ee6:	f002 0207 	and.w	r2, r2, #7
 23f0eea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 23f0eee:	4313      	orrs	r3, r2
 23f0ef0:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
                                  standby_duration duration) {
 23f0ef4:	f89d 7018 	ldrb.w	r7, [sp, #24]
  _measReg.osrs_t = tempSampling;
 23f0ef8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  _humReg.osrs_h = humSampling;
 23f0efc:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
                                  standby_duration duration) {
 23f0f00:	f89d 501c 	ldrb.w	r5, [sp, #28]
 23f0f04:	f89d 6020 	ldrb.w	r6, [sp, #32]
  _humReg.osrs_h = humSampling;
 23f0f08:	f367 1347 	bfi	r3, r7, #5, #3
 23f0f0c:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  _configReg.t_sb = duration;
 23f0f10:	00ed      	lsls	r5, r5, #3
 23f0f12:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 23f0f16:	f006 0607 	and.w	r6, r6, #7
 23f0f1a:	f005 0538 	and.w	r5, r5, #56	; 0x38
 23f0f1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 23f0f22:	4335      	orrs	r5, r6
 23f0f24:	431d      	orrs	r5, r3
 23f0f26:	f880 504c 	strb.w	r5, [r0, #76]	; 0x4c
  write8(BME280_REGISTER_CONTROL, MODE_SLEEP);
 23f0f2a:	2200      	movs	r2, #0
 23f0f2c:	21f4      	movs	r1, #244	; 0xf4
 23f0f2e:	f7ff ff83 	bl	23f0e38 <_ZN15Adafruit_BME2806write8Ehh>
    // 100 = x8
    // 101 and above = x16
    unsigned int osrs_h : 3; ///< pressure oversampling

    /// @return combined ctrl hum register
    unsigned int get() { return (osrs_h); }
 23f0f32:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
  write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
 23f0f36:	4620      	mov	r0, r4
 23f0f38:	21f2      	movs	r1, #242	; 0xf2
 23f0f3a:	0952      	lsrs	r2, r2, #5
 23f0f3c:	f7ff ff7c 	bl	23f0e38 <_ZN15Adafruit_BME2806write8Ehh>
    unsigned int get() { return (t_sb << 5) | (filter << 2) | spi3w_en; }
 23f0f40:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
  write8(BME280_REGISTER_CONFIG, _configReg.get());
 23f0f44:	4620      	mov	r0, r4
 23f0f46:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 23f0f4a:	f002 0107 	and.w	r1, r2, #7
 23f0f4e:	009b      	lsls	r3, r3, #2
 23f0f50:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 23f0f54:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
 23f0f58:	21f5      	movs	r1, #245	; 0xf5
 23f0f5a:	f7ff ff6d 	bl	23f0e38 <_ZN15Adafruit_BME2806write8Ehh>
    unsigned int get() { return (osrs_t << 5) | (osrs_p << 2) | mode; }
 23f0f5e:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
  write8(BME280_REGISTER_CONTROL, _measReg.get());
 23f0f62:	4620      	mov	r0, r4
 23f0f64:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 23f0f68:	f002 0107 	and.w	r1, r2, #7
 23f0f6c:	009b      	lsls	r3, r3, #2
 23f0f6e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 23f0f72:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
 23f0f76:	21f4      	movs	r1, #244	; 0xf4
}
 23f0f78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  write8(BME280_REGISTER_CONTROL, _measReg.get());
 23f0f7c:	f7ff bf5c 	b.w	23f0e38 <_ZN15Adafruit_BME2806write8Ehh>

023f0f80 <_ZN15Adafruit_BME2805read8Eh>:
/*!
 *   @brief  Reads an 8 bit value over I2C or SPI
 *   @param reg the register address to read from
 *   @returns the data byte read from the device
 */
uint8_t Adafruit_BME280::read8(byte reg) {
 23f0f80:	b530      	push	{r4, r5, lr}
  uint8_t value;

  if (_cs == -1) {
 23f0f82:	f990 3020 	ldrsb.w	r3, [r0, #32]
uint8_t Adafruit_BME280::read8(byte reg) {
 23f0f86:	4604      	mov	r4, r0
  if (_cs == -1) {
 23f0f88:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
 23f0f8a:	460d      	mov	r5, r1
 23f0f8c:	b085      	sub	sp, #20
  if (_cs == -1) {
 23f0f8e:	d118      	bne.n	23f0fc2 <_ZN15Adafruit_BME2805read8Eh+0x42>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23f0f90:	7d01      	ldrb	r1, [r0, #20]
 23f0f92:	6800      	ldr	r0, [r0, #0]
 23f0f94:	f007 ffb8 	bl	23f8f08 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23f0f98:	6820      	ldr	r0, [r4, #0]
 23f0f9a:	4629      	mov	r1, r5
 23f0f9c:	6803      	ldr	r3, [r0, #0]
 23f0f9e:	689b      	ldr	r3, [r3, #8]
 23f0fa0:	4798      	blx	r3
    _wire->endTransmission();
 23f0fa2:	6820      	ldr	r0, [r4, #0]
 23f0fa4:	f007 ffbb 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)1);
 23f0fa8:	2201      	movs	r2, #1
 23f0faa:	7d21      	ldrb	r1, [r4, #20]
 23f0fac:	6820      	ldr	r0, [r4, #0]
 23f0fae:	f007 ffa8 	bl	23f8f02 <_ZN7TwoWire11requestFromEhj>
    value = _wire->read();
 23f0fb2:	6820      	ldr	r0, [r4, #0]
 23f0fb4:	6803      	ldr	r3, [r0, #0]
 23f0fb6:	695b      	ldr	r3, [r3, #20]
 23f0fb8:	4798      	blx	r3
 23f0fba:	b2c5      	uxtb	r5, r0
    digitalWrite(_cs, HIGH);
    if (_sck == -1)
      _spi->endTransaction(); // release the SPI bus
  }
  return value;
}
 23f0fbc:	4628      	mov	r0, r5
 23f0fbe:	b005      	add	sp, #20
 23f0fc0:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23f0fc2:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
 23f0fc6:	3301      	adds	r3, #1
 23f0fc8:	d10d      	bne.n	23f0fe6 <_ZN15Adafruit_BME2805read8Eh+0x66>
 23f0fca:	4b16      	ldr	r3, [pc, #88]	; (23f1024 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23f0fcc:	4669      	mov	r1, sp
 23f0fce:	9300      	str	r3, [sp, #0]
 23f0fd0:	2300      	movs	r3, #0
 23f0fd2:	f88d 3004 	strb.w	r3, [sp, #4]
 23f0fd6:	4b14      	ldr	r3, [pc, #80]	; (23f1028 <_ZN15Adafruit_BME2805read8Eh+0xa8>)
 23f0fd8:	6840      	ldr	r0, [r0, #4]
 23f0fda:	9302      	str	r3, [sp, #8]
 23f0fdc:	2301      	movs	r3, #1
 23f0fde:	f8ad 300c 	strh.w	r3, [sp, #12]
 23f0fe2:	f008 fc71 	bl	23f98c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23f0fe6:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23f0fea:	2100      	movs	r1, #0
 23f0fec:	b280      	uxth	r0, r0
 23f0fee:	f009 f91e 	bl	23fa22e <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23f0ff2:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23f0ff6:	4620      	mov	r0, r4
 23f0ff8:	f7ff fee9 	bl	23f0dce <_ZN15Adafruit_BME2807spixferEh>
    value = spixfer(0);
 23f0ffc:	2100      	movs	r1, #0
 23f0ffe:	4620      	mov	r0, r4
 23f1000:	f7ff fee5 	bl	23f0dce <_ZN15Adafruit_BME2807spixferEh>
 23f1004:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
 23f1006:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23f100a:	2101      	movs	r1, #1
 23f100c:	b280      	uxth	r0, r0
 23f100e:	f009 f90e 	bl	23fa22e <digitalWrite>
    if (_sck == -1)
 23f1012:	f994 3023 	ldrsb.w	r3, [r4, #35]	; 0x23
 23f1016:	3301      	adds	r3, #1
 23f1018:	d1d0      	bne.n	23f0fbc <_ZN15Adafruit_BME2805read8Eh+0x3c>
      _spi->endTransaction(); // release the SPI bus
 23f101a:	6860      	ldr	r0, [r4, #4]
 23f101c:	f008 fc3a 	bl	23f9894 <_ZN8SPIClass14endTransactionEv>
 23f1020:	e7cc      	b.n	23f0fbc <_ZN15Adafruit_BME2805read8Eh+0x3c>
 23f1022:	bf00      	nop
 23f1024:	023fea50 	.word	0x023fea50
 23f1028:	0007a120 	.word	0x0007a120

023f102c <_ZN15Adafruit_BME2806read16Eh>:
/*!
 *   @brief  Reads a 16 bit value over I2C or SPI
 *   @param reg the register address to read from
 *   @returns the 16 bit data value read from the device
 */
uint16_t Adafruit_BME280::read16(byte reg) {
 23f102c:	b530      	push	{r4, r5, lr}
  uint16_t value;

  if (_cs == -1) {
 23f102e:	f990 3020 	ldrsb.w	r3, [r0, #32]
uint16_t Adafruit_BME280::read16(byte reg) {
 23f1032:	4604      	mov	r4, r0
  if (_cs == -1) {
 23f1034:	3301      	adds	r3, #1
uint16_t Adafruit_BME280::read16(byte reg) {
 23f1036:	460d      	mov	r5, r1
 23f1038:	b085      	sub	sp, #20
  if (_cs == -1) {
 23f103a:	d11f      	bne.n	23f107c <_ZN15Adafruit_BME2806read16Eh+0x50>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23f103c:	7d01      	ldrb	r1, [r0, #20]
 23f103e:	6800      	ldr	r0, [r0, #0]
 23f1040:	f007 ff62 	bl	23f8f08 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23f1044:	6820      	ldr	r0, [r4, #0]
 23f1046:	4629      	mov	r1, r5
 23f1048:	6803      	ldr	r3, [r0, #0]
 23f104a:	689b      	ldr	r3, [r3, #8]
 23f104c:	4798      	blx	r3
    _wire->endTransmission();
 23f104e:	6820      	ldr	r0, [r4, #0]
 23f1050:	f007 ff65 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)2);
 23f1054:	2202      	movs	r2, #2
 23f1056:	7d21      	ldrb	r1, [r4, #20]
 23f1058:	6820      	ldr	r0, [r4, #0]
 23f105a:	f007 ff52 	bl	23f8f02 <_ZN7TwoWire11requestFromEhj>
    value = (_wire->read() << 8) | _wire->read();
 23f105e:	6820      	ldr	r0, [r4, #0]
 23f1060:	6803      	ldr	r3, [r0, #0]
 23f1062:	695b      	ldr	r3, [r3, #20]
 23f1064:	4798      	blx	r3
 23f1066:	4605      	mov	r5, r0
 23f1068:	6820      	ldr	r0, [r4, #0]
 23f106a:	6803      	ldr	r3, [r0, #0]
 23f106c:	695b      	ldr	r3, [r3, #20]
 23f106e:	4798      	blx	r3
 23f1070:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 23f1074:	b285      	uxth	r5, r0
    if (_sck == -1)
      _spi->endTransaction(); // release the SPI bus
  }

  return value;
}
 23f1076:	4628      	mov	r0, r5
 23f1078:	b005      	add	sp, #20
 23f107a:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23f107c:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
 23f1080:	3301      	adds	r3, #1
 23f1082:	d10d      	bne.n	23f10a0 <_ZN15Adafruit_BME2806read16Eh+0x74>
 23f1084:	4b19      	ldr	r3, [pc, #100]	; (23f10ec <_ZN15Adafruit_BME2806read16Eh+0xc0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23f1086:	4669      	mov	r1, sp
 23f1088:	9300      	str	r3, [sp, #0]
 23f108a:	2300      	movs	r3, #0
 23f108c:	f88d 3004 	strb.w	r3, [sp, #4]
 23f1090:	4b17      	ldr	r3, [pc, #92]	; (23f10f0 <_ZN15Adafruit_BME2806read16Eh+0xc4>)
 23f1092:	6840      	ldr	r0, [r0, #4]
 23f1094:	9302      	str	r3, [sp, #8]
 23f1096:	2301      	movs	r3, #1
 23f1098:	f8ad 300c 	strh.w	r3, [sp, #12]
 23f109c:	f008 fc14 	bl	23f98c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23f10a0:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23f10a4:	2100      	movs	r1, #0
 23f10a6:	b280      	uxth	r0, r0
 23f10a8:	f009 f8c1 	bl	23fa22e <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23f10ac:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23f10b0:	4620      	mov	r0, r4
 23f10b2:	f7ff fe8c 	bl	23f0dce <_ZN15Adafruit_BME2807spixferEh>
    value = (spixfer(0) << 8) | spixfer(0);
 23f10b6:	2100      	movs	r1, #0
 23f10b8:	4620      	mov	r0, r4
 23f10ba:	f7ff fe88 	bl	23f0dce <_ZN15Adafruit_BME2807spixferEh>
 23f10be:	2100      	movs	r1, #0
 23f10c0:	4605      	mov	r5, r0
 23f10c2:	4620      	mov	r0, r4
 23f10c4:	f7ff fe83 	bl	23f0dce <_ZN15Adafruit_BME2807spixferEh>
 23f10c8:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 23f10cc:	b285      	uxth	r5, r0
    digitalWrite(_cs, HIGH);
 23f10ce:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23f10d2:	2101      	movs	r1, #1
 23f10d4:	b280      	uxth	r0, r0
 23f10d6:	f009 f8aa 	bl	23fa22e <digitalWrite>
    if (_sck == -1)
 23f10da:	f994 3023 	ldrsb.w	r3, [r4, #35]	; 0x23
 23f10de:	3301      	adds	r3, #1
 23f10e0:	d1c9      	bne.n	23f1076 <_ZN15Adafruit_BME2806read16Eh+0x4a>
      _spi->endTransaction(); // release the SPI bus
 23f10e2:	6860      	ldr	r0, [r4, #4]
 23f10e4:	f008 fbd6 	bl	23f9894 <_ZN8SPIClass14endTransactionEv>
 23f10e8:	e7c5      	b.n	23f1076 <_ZN15Adafruit_BME2806read16Eh+0x4a>
 23f10ea:	bf00      	nop
 23f10ec:	023fea50 	.word	0x023fea50
 23f10f0:	0007a120 	.word	0x0007a120

023f10f4 <_ZN15Adafruit_BME2809read16_LEEh>:
/*!
 *   @brief  Reads a signed 16 bit little endian value over I2C or SPI
 *   @param reg the register address to read from
 *   @returns the 16 bit data value read from the device
 */
uint16_t Adafruit_BME280::read16_LE(byte reg) {
 23f10f4:	b508      	push	{r3, lr}
  uint16_t temp = read16(reg);
 23f10f6:	f7ff ff99 	bl	23f102c <_ZN15Adafruit_BME2806read16Eh>
  return (temp >> 8) | (temp << 8);
 23f10fa:	ba40      	rev16	r0, r0
}
 23f10fc:	b280      	uxth	r0, r0
 23f10fe:	bd08      	pop	{r3, pc}

023f1100 <_ZN15Adafruit_BME2806read24Eh>:
/*!
 *   @brief  Reads a 24 bit value over I2C
 *   @param reg the register address to read from
 *   @returns the 24 bit data value read from the device
 */
uint32_t Adafruit_BME280::read24(byte reg) {
 23f1100:	b530      	push	{r4, r5, lr}
  uint32_t value;

  if (_cs == -1) {
 23f1102:	f990 3020 	ldrsb.w	r3, [r0, #32]
uint32_t Adafruit_BME280::read24(byte reg) {
 23f1106:	4604      	mov	r4, r0
  if (_cs == -1) {
 23f1108:	3301      	adds	r3, #1
uint32_t Adafruit_BME280::read24(byte reg) {
 23f110a:	460d      	mov	r5, r1
 23f110c:	b085      	sub	sp, #20
  if (_cs == -1) {
 23f110e:	d123      	bne.n	23f1158 <_ZN15Adafruit_BME2806read24Eh+0x58>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23f1110:	7d01      	ldrb	r1, [r0, #20]
 23f1112:	6800      	ldr	r0, [r0, #0]
 23f1114:	f007 fef8 	bl	23f8f08 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23f1118:	6820      	ldr	r0, [r4, #0]
 23f111a:	4629      	mov	r1, r5
 23f111c:	6803      	ldr	r3, [r0, #0]
 23f111e:	689b      	ldr	r3, [r3, #8]
 23f1120:	4798      	blx	r3
    _wire->endTransmission();
 23f1122:	6820      	ldr	r0, [r4, #0]
 23f1124:	f007 fefb 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)3);
 23f1128:	2203      	movs	r2, #3
 23f112a:	7d21      	ldrb	r1, [r4, #20]
 23f112c:	6820      	ldr	r0, [r4, #0]
 23f112e:	f007 fee8 	bl	23f8f02 <_ZN7TwoWire11requestFromEhj>

    value = _wire->read();
 23f1132:	6820      	ldr	r0, [r4, #0]
 23f1134:	6803      	ldr	r3, [r0, #0]
 23f1136:	695b      	ldr	r3, [r3, #20]
 23f1138:	4798      	blx	r3
    value <<= 8;
 23f113a:	0205      	lsls	r5, r0, #8
    value |= _wire->read();
 23f113c:	6820      	ldr	r0, [r4, #0]
 23f113e:	6803      	ldr	r3, [r0, #0]
 23f1140:	695b      	ldr	r3, [r3, #20]
 23f1142:	4798      	blx	r3
 23f1144:	4328      	orrs	r0, r5
    value <<= 8;
 23f1146:	0205      	lsls	r5, r0, #8
    value |= _wire->read();
 23f1148:	6820      	ldr	r0, [r4, #0]
 23f114a:	6803      	ldr	r3, [r0, #0]
 23f114c:	695b      	ldr	r3, [r3, #20]
 23f114e:	4798      	blx	r3
 23f1150:	4305      	orrs	r5, r0
    if (_sck == -1)
      _spi->endTransaction(); // release the SPI bus
  }

  return value;
}
 23f1152:	4628      	mov	r0, r5
 23f1154:	b005      	add	sp, #20
 23f1156:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23f1158:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
 23f115c:	3301      	adds	r3, #1
 23f115e:	d10d      	bne.n	23f117c <_ZN15Adafruit_BME2806read24Eh+0x7c>
 23f1160:	4b1b      	ldr	r3, [pc, #108]	; (23f11d0 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23f1162:	4669      	mov	r1, sp
 23f1164:	9300      	str	r3, [sp, #0]
 23f1166:	2300      	movs	r3, #0
 23f1168:	f88d 3004 	strb.w	r3, [sp, #4]
 23f116c:	4b19      	ldr	r3, [pc, #100]	; (23f11d4 <_ZN15Adafruit_BME2806read24Eh+0xd4>)
 23f116e:	6840      	ldr	r0, [r0, #4]
 23f1170:	9302      	str	r3, [sp, #8]
 23f1172:	2301      	movs	r3, #1
 23f1174:	f8ad 300c 	strh.w	r3, [sp, #12]
 23f1178:	f008 fba6 	bl	23f98c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23f117c:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23f1180:	2100      	movs	r1, #0
 23f1182:	b280      	uxth	r0, r0
 23f1184:	f009 f853 	bl	23fa22e <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23f1188:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23f118c:	4620      	mov	r0, r4
 23f118e:	f7ff fe1e 	bl	23f0dce <_ZN15Adafruit_BME2807spixferEh>
    value = spixfer(0);
 23f1192:	2100      	movs	r1, #0
 23f1194:	4620      	mov	r0, r4
 23f1196:	f7ff fe1a 	bl	23f0dce <_ZN15Adafruit_BME2807spixferEh>
    value |= spixfer(0);
 23f119a:	2100      	movs	r1, #0
    value <<= 8;
 23f119c:	0205      	lsls	r5, r0, #8
    value |= spixfer(0);
 23f119e:	4620      	mov	r0, r4
 23f11a0:	f7ff fe15 	bl	23f0dce <_ZN15Adafruit_BME2807spixferEh>
 23f11a4:	4328      	orrs	r0, r5
    value |= spixfer(0);
 23f11a6:	2100      	movs	r1, #0
    value <<= 8;
 23f11a8:	0205      	lsls	r5, r0, #8
    value |= spixfer(0);
 23f11aa:	4620      	mov	r0, r4
 23f11ac:	f7ff fe0f 	bl	23f0dce <_ZN15Adafruit_BME2807spixferEh>
 23f11b0:	4305      	orrs	r5, r0
    digitalWrite(_cs, HIGH);
 23f11b2:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23f11b6:	2101      	movs	r1, #1
 23f11b8:	b280      	uxth	r0, r0
 23f11ba:	f009 f838 	bl	23fa22e <digitalWrite>
    if (_sck == -1)
 23f11be:	f994 3023 	ldrsb.w	r3, [r4, #35]	; 0x23
 23f11c2:	3301      	adds	r3, #1
 23f11c4:	d1c5      	bne.n	23f1152 <_ZN15Adafruit_BME2806read24Eh+0x52>
      _spi->endTransaction(); // release the SPI bus
 23f11c6:	6860      	ldr	r0, [r4, #4]
 23f11c8:	f008 fb64 	bl	23f9894 <_ZN8SPIClass14endTransactionEv>
  return value;
 23f11cc:	e7c1      	b.n	23f1152 <_ZN15Adafruit_BME2806read24Eh+0x52>
 23f11ce:	bf00      	nop
 23f11d0:	023fea50 	.word	0x023fea50
 23f11d4:	0007a120 	.word	0x0007a120

023f11d8 <_ZN15Adafruit_BME28016readCoefficientsEv>:
}

/*!
 *   @brief  Reads the factory-set coefficients
 */
void Adafruit_BME280::readCoefficients(void) {
 23f11d8:	b538      	push	{r3, r4, r5, lr}
  _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 23f11da:	2188      	movs	r1, #136	; 0x88
void Adafruit_BME280::readCoefficients(void) {
 23f11dc:	4604      	mov	r4, r0
  _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 23f11de:	f7ff ff89 	bl	23f10f4 <_ZN15Adafruit_BME2809read16_LEEh>
  return (int16_t)read16_LE(reg);
 23f11e2:	218a      	movs	r1, #138	; 0x8a
  _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 23f11e4:	8520      	strh	r0, [r4, #40]	; 0x28
  return (int16_t)read16_LE(reg);
 23f11e6:	4620      	mov	r0, r4
 23f11e8:	f7ff ff84 	bl	23f10f4 <_ZN15Adafruit_BME2809read16_LEEh>
 23f11ec:	218c      	movs	r1, #140	; 0x8c
  _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
 23f11ee:	8560      	strh	r0, [r4, #42]	; 0x2a
  return (int16_t)read16_LE(reg);
 23f11f0:	4620      	mov	r0, r4
 23f11f2:	f7ff ff7f 	bl	23f10f4 <_ZN15Adafruit_BME2809read16_LEEh>
  _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

  _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 23f11f6:	218e      	movs	r1, #142	; 0x8e
  _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
 23f11f8:	85a0      	strh	r0, [r4, #44]	; 0x2c
  _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 23f11fa:	4620      	mov	r0, r4
 23f11fc:	f7ff ff7a 	bl	23f10f4 <_ZN15Adafruit_BME2809read16_LEEh>
  return (int16_t)read16_LE(reg);
 23f1200:	2190      	movs	r1, #144	; 0x90
  _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 23f1202:	85e0      	strh	r0, [r4, #46]	; 0x2e
  return (int16_t)read16_LE(reg);
 23f1204:	4620      	mov	r0, r4
 23f1206:	f7ff ff75 	bl	23f10f4 <_ZN15Adafruit_BME2809read16_LEEh>
 23f120a:	2192      	movs	r1, #146	; 0x92
  _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
 23f120c:	8620      	strh	r0, [r4, #48]	; 0x30
  return (int16_t)read16_LE(reg);
 23f120e:	4620      	mov	r0, r4
 23f1210:	f7ff ff70 	bl	23f10f4 <_ZN15Adafruit_BME2809read16_LEEh>
 23f1214:	2194      	movs	r1, #148	; 0x94
  _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
 23f1216:	8660      	strh	r0, [r4, #50]	; 0x32
  return (int16_t)read16_LE(reg);
 23f1218:	4620      	mov	r0, r4
 23f121a:	f7ff ff6b 	bl	23f10f4 <_ZN15Adafruit_BME2809read16_LEEh>
 23f121e:	2196      	movs	r1, #150	; 0x96
  _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
 23f1220:	86a0      	strh	r0, [r4, #52]	; 0x34
  return (int16_t)read16_LE(reg);
 23f1222:	4620      	mov	r0, r4
 23f1224:	f7ff ff66 	bl	23f10f4 <_ZN15Adafruit_BME2809read16_LEEh>
 23f1228:	2198      	movs	r1, #152	; 0x98
  _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
 23f122a:	86e0      	strh	r0, [r4, #54]	; 0x36
  return (int16_t)read16_LE(reg);
 23f122c:	4620      	mov	r0, r4
 23f122e:	f7ff ff61 	bl	23f10f4 <_ZN15Adafruit_BME2809read16_LEEh>
 23f1232:	219a      	movs	r1, #154	; 0x9a
  _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
 23f1234:	8720      	strh	r0, [r4, #56]	; 0x38
  return (int16_t)read16_LE(reg);
 23f1236:	4620      	mov	r0, r4
 23f1238:	f7ff ff5c 	bl	23f10f4 <_ZN15Adafruit_BME2809read16_LEEh>
 23f123c:	219c      	movs	r1, #156	; 0x9c
  _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
 23f123e:	8760      	strh	r0, [r4, #58]	; 0x3a
  return (int16_t)read16_LE(reg);
 23f1240:	4620      	mov	r0, r4
 23f1242:	f7ff ff57 	bl	23f10f4 <_ZN15Adafruit_BME2809read16_LEEh>
 23f1246:	219e      	movs	r1, #158	; 0x9e
  _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
 23f1248:	87a0      	strh	r0, [r4, #60]	; 0x3c
  return (int16_t)read16_LE(reg);
 23f124a:	4620      	mov	r0, r4
 23f124c:	f7ff ff52 	bl	23f10f4 <_ZN15Adafruit_BME2809read16_LEEh>
  _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

  _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 23f1250:	21a1      	movs	r1, #161	; 0xa1
  _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
 23f1252:	87e0      	strh	r0, [r4, #62]	; 0x3e
  _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 23f1254:	4620      	mov	r0, r4
 23f1256:	f7ff fe93 	bl	23f0f80 <_ZN15Adafruit_BME2805read8Eh>
  return (int16_t)read16_LE(reg);
 23f125a:	21e1      	movs	r1, #225	; 0xe1
  _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 23f125c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return (int16_t)read16_LE(reg);
 23f1260:	4620      	mov	r0, r4
 23f1262:	f7ff ff47 	bl	23f10f4 <_ZN15Adafruit_BME2809read16_LEEh>
  _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
  _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 23f1266:	21e3      	movs	r1, #227	; 0xe3
  _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
 23f1268:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
  _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 23f126c:	4620      	mov	r0, r4
 23f126e:	f7ff fe87 	bl	23f0f80 <_ZN15Adafruit_BME2805read8Eh>
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23f1272:	21e4      	movs	r1, #228	; 0xe4
  _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 23f1274:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23f1278:	4620      	mov	r0, r4
 23f127a:	f7ff fe81 	bl	23f0f80 <_ZN15Adafruit_BME2805read8Eh>
                         (read8(BME280_REGISTER_DIG_H4 + 1) & 0xF);
 23f127e:	21e5      	movs	r1, #229	; 0xe5
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23f1280:	4605      	mov	r5, r0
                         (read8(BME280_REGISTER_DIG_H4 + 1) & 0xF);
 23f1282:	4620      	mov	r0, r4
 23f1284:	f7ff fe7c 	bl	23f0f80 <_ZN15Adafruit_BME2805read8Eh>
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23f1288:	b26d      	sxtb	r5, r5
                         (read8(BME280_REGISTER_DIG_H4 + 1) & 0xF);
 23f128a:	f000 000f 	and.w	r0, r0, #15
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23f128e:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
  _bme280_calib.dig_H5 = ((int8_t)read8(BME280_REGISTER_DIG_H5 + 1) << 4) |
 23f1292:	21e6      	movs	r1, #230	; 0xe6
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23f1294:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
  _bme280_calib.dig_H5 = ((int8_t)read8(BME280_REGISTER_DIG_H5 + 1) << 4) |
 23f1298:	4620      	mov	r0, r4
 23f129a:	f7ff fe71 	bl	23f0f80 <_ZN15Adafruit_BME2805read8Eh>
                         (read8(BME280_REGISTER_DIG_H5) >> 4);
 23f129e:	21e5      	movs	r1, #229	; 0xe5
  _bme280_calib.dig_H5 = ((int8_t)read8(BME280_REGISTER_DIG_H5 + 1) << 4) |
 23f12a0:	4605      	mov	r5, r0
                         (read8(BME280_REGISTER_DIG_H5) >> 4);
 23f12a2:	4620      	mov	r0, r4
 23f12a4:	f7ff fe6c 	bl	23f0f80 <_ZN15Adafruit_BME2805read8Eh>
  _bme280_calib.dig_H5 = ((int8_t)read8(BME280_REGISTER_DIG_H5 + 1) << 4) |
 23f12a8:	b26d      	sxtb	r5, r5
                         (read8(BME280_REGISTER_DIG_H5) >> 4);
 23f12aa:	f3c0 1007 	ubfx	r0, r0, #4, #8
  _bme280_calib.dig_H5 = ((int8_t)read8(BME280_REGISTER_DIG_H5 + 1) << 4) |
 23f12ae:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
 23f12b2:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
  _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
 23f12b6:	21e7      	movs	r1, #231	; 0xe7
 23f12b8:	4620      	mov	r0, r4
 23f12ba:	f7ff fe61 	bl	23f0f80 <_ZN15Adafruit_BME2805read8Eh>
 23f12be:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
}
 23f12c2:	bd38      	pop	{r3, r4, r5, pc}

023f12c4 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
/*!
 *   @brief return true if chip is busy reading cal data
 *   @returns true if reading calibration, false otherwise
 */
bool Adafruit_BME280::isReadingCalibration(void) {
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
 23f12c4:	21f3      	movs	r1, #243	; 0xf3
bool Adafruit_BME280::isReadingCalibration(void) {
 23f12c6:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
 23f12c8:	f7ff fe5a 	bl	23f0f80 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
 23f12cc:	f000 0001 	and.w	r0, r0, #1
 23f12d0:	bd08      	pop	{r3, pc}

023f12d2 <_ZN15Adafruit_BME2804initEv>:
bool Adafruit_BME280::init() {
 23f12d2:	b530      	push	{r4, r5, lr}
 23f12d4:	4604      	mov	r4, r0
  if (_cs == -1) {
 23f12d6:	f990 0020 	ldrsb.w	r0, [r0, #32]
bool Adafruit_BME280::init() {
 23f12da:	b085      	sub	sp, #20
  if (_cs == -1) {
 23f12dc:	1c42      	adds	r2, r0, #1
 23f12de:	d129      	bne.n	23f1334 <_ZN15Adafruit_BME2804initEv+0x62>
    _wire->begin();
 23f12e0:	6820      	ldr	r0, [r4, #0]
 23f12e2:	f007 fde7 	bl	23f8eb4 <_ZN7TwoWire5beginEv>
  _sensorID = read8(BME280_REGISTER_CHIPID);
 23f12e6:	21d0      	movs	r1, #208	; 0xd0
 23f12e8:	4620      	mov	r0, r4
 23f12ea:	f7ff fe49 	bl	23f0f80 <_ZN15Adafruit_BME2805read8Eh>
  if (_sensorID != 0x60)
 23f12ee:	2860      	cmp	r0, #96	; 0x60
  _sensorID = read8(BME280_REGISTER_CHIPID);
 23f12f0:	61a0      	str	r0, [r4, #24]
  if (_sensorID != 0x60)
 23f12f2:	d142      	bne.n	23f137a <_ZN15Adafruit_BME2804initEv+0xa8>
  write8(BME280_REGISTER_SOFTRESET, 0xB6);
 23f12f4:	22b6      	movs	r2, #182	; 0xb6
 23f12f6:	21e0      	movs	r1, #224	; 0xe0
 23f12f8:	4620      	mov	r0, r4
 23f12fa:	f7ff fd9d 	bl	23f0e38 <_ZN15Adafruit_BME2806write8Ehh>
  delay(10);
 23f12fe:	200a      	movs	r0, #10
 23f1300:	f007 f80c 	bl	23f831c <delay>
  while (isReadingCalibration())
 23f1304:	4620      	mov	r0, r4
 23f1306:	f7ff ffdd 	bl	23f12c4 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
 23f130a:	4605      	mov	r5, r0
 23f130c:	2800      	cmp	r0, #0
 23f130e:	d1f6      	bne.n	23f12fe <_ZN15Adafruit_BME2804initEv+0x2c>
  readCoefficients(); // read trimming parameters, see DS 4.2.2
 23f1310:	4620      	mov	r0, r4
 23f1312:	f7ff ff61 	bl	23f11d8 <_ZN15Adafruit_BME28016readCoefficientsEv>
  setSampling(); // use defaults
 23f1316:	2305      	movs	r3, #5
 23f1318:	2103      	movs	r1, #3
 23f131a:	461a      	mov	r2, r3
 23f131c:	4620      	mov	r0, r4
 23f131e:	9300      	str	r3, [sp, #0]
 23f1320:	e9cd 5501 	strd	r5, r5, [sp, #4]
 23f1324:	f7ff fddc 	bl	23f0ee0 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
  delay(100);
 23f1328:	2064      	movs	r0, #100	; 0x64
 23f132a:	f006 fff7 	bl	23f831c <delay>
  return true;
 23f132e:	2001      	movs	r0, #1
}
 23f1330:	b005      	add	sp, #20
 23f1332:	bd30      	pop	{r4, r5, pc}
    digitalWrite(_cs, HIGH);
 23f1334:	2101      	movs	r1, #1
 23f1336:	b280      	uxth	r0, r0
 23f1338:	f008 ff79 	bl	23fa22e <digitalWrite>
    pinMode(_cs, OUTPUT);
 23f133c:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23f1340:	2101      	movs	r1, #1
 23f1342:	b280      	uxth	r0, r0
 23f1344:	f008 ff62 	bl	23fa20c <pinMode>
    if (_sck == -1) {
 23f1348:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
 23f134c:	1c43      	adds	r3, r0, #1
 23f134e:	d103      	bne.n	23f1358 <_ZN15Adafruit_BME2804initEv+0x86>
      _spi->begin();
 23f1350:	6860      	ldr	r0, [r4, #4]
 23f1352:	f008 fa65 	bl	23f9820 <_ZN8SPIClass5beginEv>
 23f1356:	e7c6      	b.n	23f12e6 <_ZN15Adafruit_BME2804initEv+0x14>
      pinMode(_sck, OUTPUT);
 23f1358:	2101      	movs	r1, #1
 23f135a:	b280      	uxth	r0, r0
 23f135c:	f008 ff56 	bl	23fa20c <pinMode>
      pinMode(_mosi, OUTPUT);
 23f1360:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 23f1364:	2101      	movs	r1, #1
 23f1366:	b280      	uxth	r0, r0
 23f1368:	f008 ff50 	bl	23fa20c <pinMode>
      pinMode(_miso, INPUT);
 23f136c:	f994 0022 	ldrsb.w	r0, [r4, #34]	; 0x22
 23f1370:	2100      	movs	r1, #0
 23f1372:	b280      	uxth	r0, r0
 23f1374:	f008 ff4a 	bl	23fa20c <pinMode>
 23f1378:	e7b5      	b.n	23f12e6 <_ZN15Adafruit_BME2804initEv+0x14>
    return false;
 23f137a:	2000      	movs	r0, #0
 23f137c:	e7d8      	b.n	23f1330 <_ZN15Adafruit_BME2804initEv+0x5e>

023f137e <_ZN15Adafruit_BME2805beginEhP7TwoWire>:
  _i2caddr = addr;
 23f137e:	7501      	strb	r1, [r0, #20]
  _wire = theWire;
 23f1380:	6002      	str	r2, [r0, #0]
  status = init();
 23f1382:	f7ff bfa6 	b.w	23f12d2 <_ZN15Adafruit_BME2804initEv>
	...

023f1388 <_ZN15Adafruit_BME28015readTemperatureEv>:

/*!
 *   @brief  Returns the temperature from the sensor
 *   @returns the temperature read from the device
 */
float Adafruit_BME280::readTemperature(void) {
 23f1388:	b538      	push	{r3, r4, r5, lr}
  int32_t var1, var2;

  int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
 23f138a:	21fa      	movs	r1, #250	; 0xfa
float Adafruit_BME280::readTemperature(void) {
 23f138c:	4604      	mov	r4, r0
  int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
 23f138e:	f7ff feb7 	bl	23f1100 <_ZN15Adafruit_BME2806read24Eh>
  if (adc_T == 0x800000) // value in case temp measurement was disabled
 23f1392:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 23f1396:	d021      	beq.n	23f13dc <_ZN15Adafruit_BME28015readTemperatureEv+0x54>
    return NAN;
  adc_T >>= 4;

  var1 = ((((adc_T >> 3) - ((int32_t)_bme280_calib.dig_T1 << 1))) *
 23f1398:	8d21      	ldrh	r1, [r4, #40]	; 0x28
         14;

  t_fine = var1 + var2 + t_fine_adjust;

  float T = (t_fine * 5 + 128) >> 8;
  return T / 100;
 23f139a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 23f13e4 <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
  var2 = (((((adc_T >> 4) - ((int32_t)_bme280_calib.dig_T1)) *
 23f139e:	ebc1 2220 	rsb	r2, r1, r0, asr #8
  var1 = ((((adc_T >> 3) - ((int32_t)_bme280_calib.dig_T1 << 1))) *
 23f13a2:	004d      	lsls	r5, r1, #1
          ((int32_t)_bme280_calib.dig_T2)) >>
 23f13a4:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
  var1 = ((((adc_T >> 3) - ((int32_t)_bme280_calib.dig_T1 << 1))) *
 23f13a8:	ebc5 13e0 	rsb	r3, r5, r0, asr #7
 23f13ac:	4359      	muls	r1, r3
  var2 = (((((adc_T >> 4) - ((int32_t)_bme280_calib.dig_T1)) *
 23f13ae:	fb02 f302 	mul.w	r3, r2, r2
          ((int32_t)_bme280_calib.dig_T3)) >>
 23f13b2:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
            ((adc_T >> 4) - ((int32_t)_bme280_calib.dig_T1))) >>
 23f13b6:	131b      	asrs	r3, r3, #12
           12) *
 23f13b8:	4353      	muls	r3, r2
  t_fine = var1 + var2 + t_fine_adjust;
 23f13ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
  var2 = (((((adc_T >> 4) - ((int32_t)_bme280_calib.dig_T1)) *
 23f13bc:	139b      	asrs	r3, r3, #14
  t_fine = var1 + var2 + t_fine_adjust;
 23f13be:	eb03 23e1 	add.w	r3, r3, r1, asr #11
 23f13c2:	4413      	add	r3, r2
 23f13c4:	61e3      	str	r3, [r4, #28]
  float T = (t_fine * 5 + 128) >> 8;
 23f13c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 23f13ca:	3380      	adds	r3, #128	; 0x80
 23f13cc:	121b      	asrs	r3, r3, #8
 23f13ce:	ee07 3a90 	vmov	s15, r3
 23f13d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return T / 100;
 23f13d6:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
 23f13da:	bd38      	pop	{r3, r4, r5, pc}
    return NAN;
 23f13dc:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23f13e8 <_ZN15Adafruit_BME28015readTemperatureEv+0x60>
 23f13e0:	e7fb      	b.n	23f13da <_ZN15Adafruit_BME28015readTemperatureEv+0x52>
 23f13e2:	bf00      	nop
 23f13e4:	42c80000 	.word	0x42c80000
 23f13e8:	7fc00000 	.word	0x7fc00000

023f13ec <_ZN15Adafruit_BME28012readPressureEv>:

/*!
 *   @brief  Returns the pressure from the sensor
 *   @returns the pressure value (in Pascal) read from the device
 */
float Adafruit_BME280::readPressure(void) {
 23f13ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23f13f0:	4605      	mov	r5, r0
  int64_t var1, var2, p;

  readTemperature(); // must be done first to get t_fine
 23f13f2:	f7ff ffc9 	bl	23f1388 <_ZN15Adafruit_BME28015readTemperatureEv>

  int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
 23f13f6:	21f7      	movs	r1, #247	; 0xf7
 23f13f8:	4628      	mov	r0, r5
 23f13fa:	f7ff fe81 	bl	23f1100 <_ZN15Adafruit_BME2806read24Eh>
  if (adc_P == 0x800000) // value in case pressure measurement was disabled
 23f13fe:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 23f1402:	f000 80b6 	beq.w	23f1572 <_ZN15Adafruit_BME28012readPressureEv+0x186>
    return NAN;
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
 23f1406:	69e9      	ldr	r1, [r5, #28]
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
  var2 = var2 + ((var1 * (int64_t)_bme280_calib.dig_P5) << 17);
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4) << 35);
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3) >> 8) +
         ((var1 * (int64_t)_bme280_calib.dig_P2) << 12);
 23f1408:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
  var1 = ((int64_t)t_fine) - 128000;
 23f140c:	ea4f 7ee1 	mov.w	lr, r1, asr #31
 23f1410:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
 23f1414:	f14e 3eff 	adc.w	lr, lr, #4294967295	; 0xffffffff
         ((var1 * (int64_t)_bme280_calib.dig_P2) << 12);
 23f1418:	fb03 f20e 	mul.w	r2, r3, lr
 23f141c:	17dc      	asrs	r4, r3, #31
 23f141e:	fb01 2204 	mla	r2, r1, r4, r2
 23f1422:	fba3 3401 	umull	r3, r4, r3, r1
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 23f1426:	fba1 7801 	umull	r7, r8, r1, r1
 23f142a:	fb01 f60e 	mul.w	r6, r1, lr
         ((var1 * (int64_t)_bme280_calib.dig_P2) << 12);
 23f142e:	4422      	add	r2, r4
 23f1430:	0312      	lsls	r2, r2, #12
 23f1432:	031c      	lsls	r4, r3, #12
 23f1434:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3) >> 8) +
 23f1438:	f9b5 3032 	ldrsh.w	r3, [r5, #50]	; 0x32
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 23f143c:	eb08 0846 	add.w	r8, r8, r6, lsl #1
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3) >> 8) +
 23f1440:	fb03 f608 	mul.w	r6, r3, r8
 23f1444:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 23f1448:	fb07 660c 	mla	r6, r7, ip, r6
 23f144c:	fba3 3c07 	umull	r3, ip, r3, r7
 23f1450:	4466      	add	r6, ip
 23f1452:	0a1b      	lsrs	r3, r3, #8
 23f1454:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 23f1458:	191b      	adds	r3, r3, r4
 23f145a:	eb42 2226 	adc.w	r2, r2, r6, asr #8
  var1 =
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bme280_calib.dig_P1) >> 33;
 23f145e:	8dee      	ldrh	r6, [r5, #46]	; 0x2e
 23f1460:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 23f1464:	fba3 3406 	umull	r3, r4, r3, r6
 23f1468:	fb06 4402 	mla	r4, r6, r2, r4
  var1 =
 23f146c:	17e3      	asrs	r3, r4, #31
 23f146e:	1062      	asrs	r2, r4, #1

  if (var1 == 0) {
 23f1470:	ea53 0464 	orrs.w	r4, r3, r4, asr #1
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bme280_calib.dig_P1) >> 33;
 23f1474:	f04f 0c00 	mov.w	ip, #0
  if (var1 == 0) {
 23f1478:	d07e      	beq.n	23f1578 <_ZN15Adafruit_BME28012readPressureEv+0x18c>
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 23f147a:	f9b5 4038 	ldrsh.w	r4, [r5, #56]	; 0x38
  adc_P >>= 4;
 23f147e:	1100      	asrs	r0, r0, #4
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 23f1480:	fb04 f608 	mul.w	r6, r4, r8
 23f1484:	ea4f 79e4 	mov.w	r9, r4, asr #31
 23f1488:	fb07 6609 	mla	r6, r7, r9, r6
 23f148c:	fba4 4707 	umull	r4, r7, r4, r7
 23f1490:	443e      	add	r6, r7
  var2 = var2 + ((var1 * (int64_t)_bme280_calib.dig_P5) << 17);
 23f1492:	f9b5 7036 	ldrsh.w	r7, [r5, #54]	; 0x36
 23f1496:	fb07 fe0e 	mul.w	lr, r7, lr
 23f149a:	ea4f 78e7 	mov.w	r8, r7, asr #31
 23f149e:	fb01 ee08 	mla	lr, r1, r8, lr
 23f14a2:	fba7 7101 	umull	r7, r1, r7, r1
 23f14a6:	4471      	add	r1, lr
 23f14a8:	0449      	lsls	r1, r1, #17
 23f14aa:	ea41 31d7 	orr.w	r1, r1, r7, lsr #15
 23f14ae:	047f      	lsls	r7, r7, #17
 23f14b0:	193f      	adds	r7, r7, r4
 23f14b2:	eb46 0601 	adc.w	r6, r6, r1
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4) << 35);
 23f14b6:	f9b5 1034 	ldrsh.w	r1, [r5, #52]	; 0x34
    return 0; // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
 23f14ba:	f5c0 1480 	rsb	r4, r0, #1048576	; 0x100000
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4) << 35);
 23f14be:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
  p = (((p << 31) - var2) * 3125) / var1;
 23f14c2:	f640 4135 	movw	r1, #3125	; 0xc35
 23f14c6:	f004 4000 	and.w	r0, r4, #2147483648	; 0x80000000
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4) << 35);
 23f14ca:	eb1c 0707 	adds.w	r7, ip, r7
  p = (((p << 31) - var2) * 3125) / var1;
 23f14ce:	ea40 0054 	orr.w	r0, r0, r4, lsr #1
 23f14d2:	07e4      	lsls	r4, r4, #31
 23f14d4:	1be4      	subs	r4, r4, r7
 23f14d6:	eb60 0606 	sbc.w	r6, r0, r6
 23f14da:	fba4 0401 	umull	r0, r4, r4, r1
 23f14de:	fb01 4106 	mla	r1, r1, r6, r4
 23f14e2:	f7f5 ffb7 	bl	23e7454 <__aeabi_ldivmod>
 23f14e6:	4686      	mov	lr, r0
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23f14e8:	f9b5 203e 	ldrsh.w	r2, [r5, #62]	; 0x3e
 23f14ec:	ea4f 3c61 	mov.w	ip, r1, asr #13
 23f14f0:	fb02 f70c 	mul.w	r7, r2, ip
 23f14f4:	0b43      	lsrs	r3, r0, #13
 23f14f6:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
 23f14fa:	17d4      	asrs	r4, r2, #31
 23f14fc:	fb03 7704 	mla	r7, r3, r4, r7
 23f1500:	fba2 2403 	umull	r2, r4, r2, r3
 23f1504:	443c      	add	r4, r7
 23f1506:	fb02 f70c 	mul.w	r7, r2, ip
 23f150a:	fb03 7704 	mla	r7, r3, r4, r7
 23f150e:	fba2 2303 	umull	r2, r3, r2, r3
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 23f1512:	f9b5 603c 	ldrsh.w	r6, [r5, #60]	; 0x3c
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23f1516:	441f      	add	r7, r3
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 23f1518:	fb06 f401 	mul.w	r4, r6, r1
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23f151c:	0e53      	lsrs	r3, r2, #25
 23f151e:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7

  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7) << 4);
 23f1522:	181b      	adds	r3, r3, r0
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 23f1524:	ea4f 72e6 	mov.w	r2, r6, asr #31
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7) << 4);
 23f1528:	eb41 6767 	adc.w	r7, r1, r7, asr #25
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 23f152c:	fb02 4100 	mla	r1, r2, r0, r4
 23f1530:	fba6 060e 	umull	r0, r6, r6, lr
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7) << 4);
 23f1534:	f9b5 403a 	ldrsh.w	r4, [r5, #58]	; 0x3a
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 23f1538:	4431      	add	r1, r6
 23f153a:	0cc0      	lsrs	r0, r0, #19
 23f153c:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7) << 4);
 23f1540:	1818      	adds	r0, r3, r0
 23f1542:	ea4f 75e4 	mov.w	r5, r4, asr #31
 23f1546:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
 23f154a:	0a00      	lsrs	r0, r0, #8
 23f154c:	012d      	lsls	r5, r5, #4
 23f154e:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 23f1552:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
 23f1556:	0124      	lsls	r4, r4, #4
 23f1558:	1820      	adds	r0, r4, r0
  return (float)p / 256;
 23f155a:	eb45 2121 	adc.w	r1, r5, r1, asr #8
 23f155e:	f7f5 ff3b 	bl	23e73d8 <__aeabi_l2f>
 23f1562:	ed9f 0a07 	vldr	s0, [pc, #28]	; 23f1580 <_ZN15Adafruit_BME28012readPressureEv+0x194>
 23f1566:	ee07 0a90 	vmov	s15, r0
 23f156a:	ee27 0a80 	vmul.f32	s0, s15, s0
}
 23f156e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NAN;
 23f1572:	ed9f 0a04 	vldr	s0, [pc, #16]	; 23f1584 <_ZN15Adafruit_BME28012readPressureEv+0x198>
 23f1576:	e7fa      	b.n	23f156e <_ZN15Adafruit_BME28012readPressureEv+0x182>
    return 0; // avoid exception caused by division by zero
 23f1578:	ed9f 0a03 	vldr	s0, [pc, #12]	; 23f1588 <_ZN15Adafruit_BME28012readPressureEv+0x19c>
 23f157c:	e7f7      	b.n	23f156e <_ZN15Adafruit_BME28012readPressureEv+0x182>
 23f157e:	bf00      	nop
 23f1580:	3b800000 	.word	0x3b800000
 23f1584:	7fc00000 	.word	0x7fc00000
 23f1588:	00000000 	.word	0x00000000

023f158c <_ZN15Adafruit_BME28012readHumidityEv>:

/*!
 *  @brief  Returns the humidity from the sensor
 *  @returns the humidity value read from the device
 */
float Adafruit_BME280::readHumidity(void) {
 23f158c:	b538      	push	{r3, r4, r5, lr}
 23f158e:	4604      	mov	r4, r0
  readTemperature(); // must be done first to get t_fine
 23f1590:	f7ff fefa 	bl	23f1388 <_ZN15Adafruit_BME28015readTemperatureEv>

  int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
 23f1594:	21fd      	movs	r1, #253	; 0xfd
 23f1596:	4620      	mov	r0, r4
 23f1598:	f7ff fd48 	bl	23f102c <_ZN15Adafruit_BME2806read16Eh>
  if (adc_H == 0x8000) // value in case humidity measurement was disabled
 23f159c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 23f15a0:	d038      	beq.n	23f1614 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    return NAN;

  int32_t v_x1_u32r;

  v_x1_u32r = (t_fine - ((int32_t)76800));
 23f15a2:	69e1      	ldr	r1, [r4, #28]

  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                  (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) +
 23f15a4:	f9b4 2048 	ldrsh.w	r2, [r4, #72]	; 0x48
  v_x1_u32r = (t_fine - ((int32_t)76800));
 23f15a8:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
 23f15ac:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
 23f15b0:	0509      	lsls	r1, r1, #20
 23f15b2:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
 23f15b6:	fb05 3312 	mls	r3, r5, r2, r3
                  (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) +
 23f15ba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
                 ((int32_t)16384)) >>
 23f15be:	13da      	asrs	r2, r3, #15
                15) *
               (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                    (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) +
 23f15c0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
               (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
 23f15c4:	f994 104a 	ldrsb.w	r1, [r4, #74]	; 0x4a
                    (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) +
 23f15c8:	436b      	muls	r3, r5
               (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
 23f15ca:	4369      	muls	r1, r5
                    (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) +
 23f15cc:	12db      	asrs	r3, r3, #11
               (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
 23f15ce:	1289      	asrs	r1, r1, #10
                    (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) +
 23f15d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
               (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
 23f15d4:	434b      	muls	r3, r1
                     ((int32_t)32768))) >>
                   10) +
                  ((int32_t)2097152)) *
                     ((int32_t)_bme280_calib.dig_H2) +
 23f15d6:	f9b4 1042 	ldrsh.w	r1, [r4, #66]	; 0x42
                     ((int32_t)32768))) >>
 23f15da:	129b      	asrs	r3, r3, #10
                   10) +
 23f15dc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                  ((int32_t)2097152)) *
 23f15e0:	434b      	muls	r3, r1
                     ((int32_t)_bme280_calib.dig_H2) +
 23f15e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
                 8192) >>
 23f15e6:	139b      	asrs	r3, r3, #14
  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
 23f15e8:	4353      	muls	r3, r2
                14));

  v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 23f15ea:	13da      	asrs	r2, r3, #15
 23f15ec:	4352      	muls	r2, r2
                             ((int32_t)_bme280_calib.dig_H1)) >>
 23f15ee:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
  v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 23f15f2:	11d2      	asrs	r2, r2, #7
 23f15f4:	434a      	muls	r2, r1
 23f15f6:	eba3 1322 	sub.w	r3, r3, r2, asr #4
                            4));

  v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 23f15fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 23f15fe:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 23f1602:	bfa8      	it	ge
 23f1604:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
  float h = (v_x1_u32r >> 12);
 23f1608:	131b      	asrs	r3, r3, #12
 23f160a:	ee00 3a10 	vmov	s0, r3
  return h / 1024.0;
 23f160e:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
 23f1612:	bd38      	pop	{r3, r4, r5, pc}
    return NAN;
 23f1614:	ed9f 0a01 	vldr	s0, [pc, #4]	; 23f161c <_ZN15Adafruit_BME28012readHumidityEv+0x90>
 23f1618:	e7fb      	b.n	23f1612 <_ZN15Adafruit_BME28012readHumidityEv+0x86>
 23f161a:	bf00      	nop
 23f161c:	7fc00000 	.word	0x7fc00000

023f1620 <_ZN24Adafruit_BMP280_PressureD1Ev>:
  int _sensorID = 280;
  Adafruit_BMP280 *_theBMP280 = NULL;
};

/** Adafruit Unified Sensor interface for pressure component of BMP280 */
class Adafruit_BMP280_Pressure : public Adafruit_Sensor {
 23f1620:	4770      	bx	lr

023f1622 <_ZN20Adafruit_BMP280_TempD1Ev>:
class Adafruit_BMP280_Temp : public Adafruit_Sensor {
 23f1622:	4770      	bx	lr

023f1624 <_ZN20Adafruit_BMP280_TempD0Ev>:
 23f1624:	b510      	push	{r4, lr}
 23f1626:	4604      	mov	r4, r0
 23f1628:	2110      	movs	r1, #16
 23f162a:	f7f6 f926 	bl	23e787a <_ZdlPvj>
 23f162e:	4620      	mov	r0, r4
 23f1630:	bd10      	pop	{r4, pc}

023f1632 <_ZN24Adafruit_BMP280_PressureD0Ev>:
class Adafruit_BMP280_Pressure : public Adafruit_Sensor {
 23f1632:	b510      	push	{r4, lr}
 23f1634:	4604      	mov	r4, r0
 23f1636:	2110      	movs	r1, #16
 23f1638:	f7f6 f91f 	bl	23e787a <_ZdlPvj>
 23f163c:	4620      	mov	r0, r4
 23f163e:	bd10      	pop	{r4, pc}

023f1640 <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data for the BMP280's temperature sensor
*/
/**************************************************************************/
void Adafruit_BMP280_Temp::getSensor(sensor_t *sensor) {
 23f1640:	b538      	push	{r3, r4, r5, lr}
 23f1642:	460c      	mov	r4, r1
 23f1644:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 23f1646:	2220      	movs	r2, #32
 23f1648:	2100      	movs	r1, #0
 23f164a:	f104 0008 	add.w	r0, r4, #8
 23f164e:	f00b fbfa 	bl	23fce46 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BMP280", sizeof(sensor->name) - 1);
 23f1652:	220b      	movs	r2, #11
 23f1654:	4620      	mov	r0, r4
 23f1656:	4908      	ldr	r1, [pc, #32]	; (23f1678 <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t+0x38>)
 23f1658:	f00b fc8f 	bl	23fcf7a <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
 23f165c:	2301      	movs	r3, #1
 23f165e:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
 23f1660:	68ab      	ldr	r3, [r5, #8]
 23f1662:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 23f1664:	230d      	movs	r3, #13
 23f1666:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->min_value = -40.0; /* Temperature range -40 ~ +85 C  */
 23f1668:	4b04      	ldr	r3, [pc, #16]	; (23f167c <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t+0x3c>)
 23f166a:	61e3      	str	r3, [r4, #28]
  sensor->max_value = +85.0;
 23f166c:	4b04      	ldr	r3, [pc, #16]	; (23f1680 <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t+0x40>)
 23f166e:	61a3      	str	r3, [r4, #24]
  sensor->resolution = 0.01; /*  0.01 C */
 23f1670:	4b04      	ldr	r3, [pc, #16]	; (23f1684 <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t+0x44>)
 23f1672:	6223      	str	r3, [r4, #32]
}
 23f1674:	bd38      	pop	{r3, r4, r5, pc}
 23f1676:	bf00      	nop
 23f1678:	023fd4b2 	.word	0x023fd4b2
 23f167c:	c2200000 	.word	0xc2200000
 23f1680:	42aa0000 	.word	0x42aa0000
 23f1684:	3c23d70a 	.word	0x3c23d70a

023f1688 <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data for the BMP280's pressure sensor
*/
/**************************************************************************/
void Adafruit_BMP280_Pressure::getSensor(sensor_t *sensor) {
 23f1688:	b538      	push	{r3, r4, r5, lr}
 23f168a:	460c      	mov	r4, r1
 23f168c:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 23f168e:	2220      	movs	r2, #32
 23f1690:	2100      	movs	r1, #0
 23f1692:	f104 0008 	add.w	r0, r4, #8
 23f1696:	f00b fbd6 	bl	23fce46 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BMP280", sizeof(sensor->name) - 1);
 23f169a:	220b      	movs	r2, #11
 23f169c:	4620      	mov	r0, r4
 23f169e:	4908      	ldr	r1, [pc, #32]	; (23f16c0 <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t+0x38>)
 23f16a0:	f00b fc6b 	bl	23fcf7a <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
 23f16a4:	2301      	movs	r3, #1
 23f16a6:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
 23f16a8:	68ab      	ldr	r3, [r5, #8]
 23f16aa:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_PRESSURE;
 23f16ac:	2306      	movs	r3, #6
 23f16ae:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->min_value = 300.0; /* 300 ~ 1100 hPa  */
 23f16b0:	4b04      	ldr	r3, [pc, #16]	; (23f16c4 <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t+0x3c>)
 23f16b2:	61e3      	str	r3, [r4, #28]
  sensor->max_value = 1100.0;
 23f16b4:	4b04      	ldr	r3, [pc, #16]	; (23f16c8 <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t+0x40>)
 23f16b6:	61a3      	str	r3, [r4, #24]
  sensor->resolution = 0.012; /* 0.12 hPa relative */
 23f16b8:	4b04      	ldr	r3, [pc, #16]	; (23f16cc <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t+0x44>)
 23f16ba:	6223      	str	r3, [r4, #32]
}
 23f16bc:	bd38      	pop	{r3, r4, r5, pc}
 23f16be:	bf00      	nop
 23f16c0:	023fd4b2 	.word	0x023fd4b2
 23f16c4:	43960000 	.word	0x43960000
 23f16c8:	44898000 	.word	0x44898000
 23f16cc:	3c449ba6 	.word	0x3c449ba6

023f16d0 <_ZN15Adafruit_BMP280C1EP7TwoWire>:
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1) {
 23f16d0:	2300      	movs	r3, #0
Adafruit_BMP280::Adafruit_BMP280(TwoWire *theWire)
 23f16d2:	b510      	push	{r4, lr}
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1) {
 23f16d4:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23f16d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
Adafruit_BMP280::Adafruit_BMP280(TwoWire *theWire)
 23f16dc:	4604      	mov	r4, r0
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1) {
 23f16de:	61c3      	str	r3, [r0, #28]
  _wire = theWire;
 23f16e0:	6001      	str	r1, [r0, #0]
  temp_sensor = new Adafruit_BMP280_Temp(this);
 23f16e2:	2010      	movs	r0, #16
 23f16e4:	f7f6 f8c5 	bl	23e7872 <_Znwj>
 23f16e8:	b128      	cbz	r0, 23f16f6 <_ZN15Adafruit_BMP280C1EP7TwoWire+0x26>
  Adafruit_BMP280_Temp(Adafruit_BMP280 *parent) { _theBMP280 = parent; }
 23f16ea:	4b09      	ldr	r3, [pc, #36]	; (23f1710 <_ZN15Adafruit_BMP280C1EP7TwoWire+0x40>)
 23f16ec:	6003      	str	r3, [r0, #0]
 23f16ee:	f44f 738c 	mov.w	r3, #280	; 0x118
 23f16f2:	e9c0 3402 	strd	r3, r4, [r0, #8]
 23f16f6:	60a0      	str	r0, [r4, #8]
  pressure_sensor = new Adafruit_BMP280_Pressure(this);
 23f16f8:	2010      	movs	r0, #16
 23f16fa:	f7f6 f8ba 	bl	23e7872 <_Znwj>
 23f16fe:	b120      	cbz	r0, 23f170a <_ZN15Adafruit_BMP280C1EP7TwoWire+0x3a>
public:
  /** @brief Create an Adafruit_Sensor compatible object for the pressure sensor
      @param parent A pointer to the BMP280 class */
  Adafruit_BMP280_Pressure(Adafruit_BMP280 *parent) { _theBMP280 = parent; }
 23f1700:	4b04      	ldr	r3, [pc, #16]	; (23f1714 <_ZN15Adafruit_BMP280C1EP7TwoWire+0x44>)
 23f1702:	6003      	str	r3, [r0, #0]
 23f1704:	2300      	movs	r3, #0
 23f1706:	e9c0 3402 	strd	r3, r4, [r0, #8]
 23f170a:	60e0      	str	r0, [r4, #12]
}
 23f170c:	4620      	mov	r0, r4
 23f170e:	bd10      	pop	{r4, pc}
 23f1710:	023fec90 	.word	0x023fec90
 23f1714:	023fecac 	.word	0x023fecac

023f1718 <_ZN15Adafruit_BMP2807spixferEh>:
uint8_t Adafruit_BMP280::spixfer(uint8_t x) {
 23f1718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (_sck == -1)
 23f171c:	f990 301f 	ldrsb.w	r3, [r0, #31]
uint8_t Adafruit_BMP280::spixfer(uint8_t x) {
 23f1720:	4604      	mov	r4, r0
  if (_sck == -1)
 23f1722:	3301      	adds	r3, #1
uint8_t Adafruit_BMP280::spixfer(uint8_t x) {
 23f1724:	460f      	mov	r7, r1
  if (_sck == -1)
 23f1726:	d104      	bne.n	23f1732 <_ZN15Adafruit_BMP2807spixferEh+0x1a>
}
 23f1728:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return _spi->transfer(x);
 23f172c:	6840      	ldr	r0, [r0, #4]
 23f172e:	f008 b939 	b.w	23f99a4 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
 23f1732:	2500      	movs	r5, #0
  for (int i = 7; i >= 0; i--) {
 23f1734:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1 << i));
 23f1736:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
 23f173a:	f994 001f 	ldrsb.w	r0, [r4, #31]
 23f173e:	2100      	movs	r1, #0
 23f1740:	b280      	uxth	r0, r0
 23f1742:	f008 fd74 	bl	23fa22e <digitalWrite>
    digitalWrite(_mosi, x & (1 << i));
 23f1746:	f994 001d 	ldrsb.w	r0, [r4, #29]
 23f174a:	fa08 f106 	lsl.w	r1, r8, r6
 23f174e:	4039      	ands	r1, r7
 23f1750:	b280      	uxth	r0, r0
 23f1752:	f008 fd6c 	bl	23fa22e <digitalWrite>
    digitalWrite(_sck, HIGH);
 23f1756:	f994 001f 	ldrsb.w	r0, [r4, #31]
 23f175a:	2101      	movs	r1, #1
 23f175c:	b280      	uxth	r0, r0
 23f175e:	f008 fd66 	bl	23fa22e <digitalWrite>
    if (digitalRead(_miso))
 23f1762:	f994 001e 	ldrsb.w	r0, [r4, #30]
    reply <<= 1;
 23f1766:	006d      	lsls	r5, r5, #1
    if (digitalRead(_miso))
 23f1768:	b280      	uxth	r0, r0
    reply <<= 1;
 23f176a:	b2ed      	uxtb	r5, r5
    if (digitalRead(_miso))
 23f176c:	f008 fd78 	bl	23fa260 <digitalRead>
 23f1770:	b108      	cbz	r0, 23f1776 <_ZN15Adafruit_BMP2807spixferEh+0x5e>
      reply |= 1;
 23f1772:	f045 0501 	orr.w	r5, r5, #1
  for (int i = 7; i >= 0; i--) {
 23f1776:	3e01      	subs	r6, #1
 23f1778:	d2df      	bcs.n	23f173a <_ZN15Adafruit_BMP2807spixferEh+0x22>
}
 23f177a:	4628      	mov	r0, r5
 23f177c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f1780 <_ZN15Adafruit_BMP2806write8Ehh>:
void Adafruit_BMP280::write8(byte reg, byte value) {
 23f1780:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (_cs == -1) {
 23f1782:	f990 301c 	ldrsb.w	r3, [r0, #28]
void Adafruit_BMP280::write8(byte reg, byte value) {
 23f1786:	4604      	mov	r4, r0
  if (_cs == -1) {
 23f1788:	3301      	adds	r3, #1
void Adafruit_BMP280::write8(byte reg, byte value) {
 23f178a:	460e      	mov	r6, r1
 23f178c:	4615      	mov	r5, r2
  if (_cs == -1) {
 23f178e:	d113      	bne.n	23f17b8 <_ZN15Adafruit_BMP2806write8Ehh+0x38>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23f1790:	7c01      	ldrb	r1, [r0, #16]
 23f1792:	6800      	ldr	r0, [r0, #0]
 23f1794:	f007 fbb8 	bl	23f8f08 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23f1798:	6820      	ldr	r0, [r4, #0]
 23f179a:	4631      	mov	r1, r6
 23f179c:	6803      	ldr	r3, [r0, #0]
 23f179e:	689b      	ldr	r3, [r3, #8]
 23f17a0:	4798      	blx	r3
    _wire->write((uint8_t)value);
 23f17a2:	6820      	ldr	r0, [r4, #0]
 23f17a4:	4629      	mov	r1, r5
 23f17a6:	6803      	ldr	r3, [r0, #0]
 23f17a8:	689b      	ldr	r3, [r3, #8]
 23f17aa:	4798      	blx	r3
    _wire->endTransmission();
 23f17ac:	6820      	ldr	r0, [r4, #0]
}
 23f17ae:	b004      	add	sp, #16
 23f17b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _wire->endTransmission();
 23f17b4:	f007 bbb3 	b.w	23f8f1e <_ZN7TwoWire15endTransmissionEv>
    if (_sck == -1)
 23f17b8:	f990 301f 	ldrsb.w	r3, [r0, #31]
 23f17bc:	3301      	adds	r3, #1
 23f17be:	d10d      	bne.n	23f17dc <_ZN15Adafruit_BMP2806write8Ehh+0x5c>
 23f17c0:	4b17      	ldr	r3, [pc, #92]	; (23f1820 <_ZN15Adafruit_BMP2806write8Ehh+0xa0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23f17c2:	4669      	mov	r1, sp
 23f17c4:	9300      	str	r3, [sp, #0]
 23f17c6:	2300      	movs	r3, #0
 23f17c8:	f88d 3004 	strb.w	r3, [sp, #4]
 23f17cc:	4b15      	ldr	r3, [pc, #84]	; (23f1824 <_ZN15Adafruit_BMP2806write8Ehh+0xa4>)
 23f17ce:	6840      	ldr	r0, [r0, #4]
 23f17d0:	9302      	str	r3, [sp, #8]
 23f17d2:	2301      	movs	r3, #1
 23f17d4:	f8ad 300c 	strh.w	r3, [sp, #12]
 23f17d8:	f008 f876 	bl	23f98c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23f17dc:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23f17e0:	2100      	movs	r1, #0
 23f17e2:	b280      	uxth	r0, r0
 23f17e4:	f008 fd23 	bl	23fa22e <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
 23f17e8:	f006 017f 	and.w	r1, r6, #127	; 0x7f
 23f17ec:	4620      	mov	r0, r4
 23f17ee:	f7ff ff93 	bl	23f1718 <_ZN15Adafruit_BMP2807spixferEh>
    spixfer(value);
 23f17f2:	4629      	mov	r1, r5
 23f17f4:	4620      	mov	r0, r4
 23f17f6:	f7ff ff8f 	bl	23f1718 <_ZN15Adafruit_BMP2807spixferEh>
    digitalWrite(_cs, HIGH);
 23f17fa:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23f17fe:	2101      	movs	r1, #1
 23f1800:	b280      	uxth	r0, r0
 23f1802:	f008 fd14 	bl	23fa22e <digitalWrite>
    if (_sck == -1)
 23f1806:	f994 301f 	ldrsb.w	r3, [r4, #31]
 23f180a:	3301      	adds	r3, #1
 23f180c:	d105      	bne.n	23f181a <_ZN15Adafruit_BMP2806write8Ehh+0x9a>
      _spi->endTransaction(); // release the SPI bus
 23f180e:	6860      	ldr	r0, [r4, #4]
}
 23f1810:	b004      	add	sp, #16
 23f1812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      _spi->endTransaction(); // release the SPI bus
 23f1816:	f008 b83d 	b.w	23f9894 <_ZN8SPIClass14endTransactionEv>
}
 23f181a:	b004      	add	sp, #16
 23f181c:	bd70      	pop	{r4, r5, r6, pc}
 23f181e:	bf00      	nop
 23f1820:	023fea50 	.word	0x023fea50
 23f1824:	0007a120 	.word	0x0007a120

023f1828 <_ZN15Adafruit_BMP28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_NS_13sensor_filterENS_16standby_durationE>:
                                  standby_duration duration) {
 23f1828:	b570      	push	{r4, r5, r6, lr}
 23f182a:	4604      	mov	r4, r0
  _measReg.osrs_t = tempSampling;
 23f182c:	00db      	lsls	r3, r3, #3
 23f182e:	f002 0207 	and.w	r2, r2, #7
 23f1832:	f003 0338 	and.w	r3, r3, #56	; 0x38
                                  standby_duration duration) {
 23f1836:	f89d 5010 	ldrb.w	r5, [sp, #16]
  _measReg.osrs_t = tempSampling;
 23f183a:	4313      	orrs	r3, r2
                                  standby_duration duration) {
 23f183c:	f89d 6014 	ldrb.w	r6, [sp, #20]
  _configReg.filter = filter;
 23f1840:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
  _measReg.osrs_t = tempSampling;
 23f1844:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 23f1848:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  _configReg.filter = filter;
 23f184c:	f005 0307 	and.w	r3, r5, #7
  _configReg.t_sb = duration;
 23f1850:	f006 0107 	and.w	r1, r6, #7
  _configReg.filter = filter;
 23f1854:	f363 02c5 	bfi	r2, r3, #3, #3
  _configReg.t_sb = duration;
 23f1858:	f361 0202 	bfi	r2, r1, #0, #3
    /** Unused - don't set */
    unsigned int none : 1;
    /** Enables 3-wire SPI */
    unsigned int spi3w_en : 1;
    /** Used to retrieve the assembled config register's byte value. */
    unsigned int get() { return (t_sb << 5) | (filter << 2) | spi3w_en; }
 23f185c:	009b      	lsls	r3, r3, #2
 23f185e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 23f1862:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 23f1866:	f3c2 12c0 	ubfx	r2, r2, #7, #1
  write8(BMP280_REGISTER_CONFIG, _configReg.get());
 23f186a:	431a      	orrs	r2, r3
 23f186c:	21f5      	movs	r1, #245	; 0xf5
 23f186e:	f7ff ff87 	bl	23f1780 <_ZN15Adafruit_BMP2806write8Ehh>
    /** Pressure oversampling. */
    unsigned int osrs_p : 3;
    /** Device mode */
    unsigned int mode : 2;
    /** Used to retrieve the assembled ctrl_meas register's byte value. */
    unsigned int get() { return (osrs_t << 5) | (osrs_p << 2) | mode; }
 23f1872:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
  write8(BMP280_REGISTER_CONTROL, _measReg.get());
 23f1876:	4620      	mov	r0, r4
}
 23f1878:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23f187c:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 23f1880:	f002 0107 	and.w	r1, r2, #7
 23f1884:	009b      	lsls	r3, r3, #2
 23f1886:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
  write8(BMP280_REGISTER_CONTROL, _measReg.get());
 23f188a:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
 23f188e:	21f4      	movs	r1, #244	; 0xf4
 23f1890:	f7ff bf76 	b.w	23f1780 <_ZN15Adafruit_BMP2806write8Ehh>

023f1894 <_ZN15Adafruit_BMP2805read8Eh>:
uint8_t Adafruit_BMP280::read8(byte reg) {
 23f1894:	b530      	push	{r4, r5, lr}
  if (_cs == -1) {
 23f1896:	f990 301c 	ldrsb.w	r3, [r0, #28]
uint8_t Adafruit_BMP280::read8(byte reg) {
 23f189a:	4604      	mov	r4, r0
  if (_cs == -1) {
 23f189c:	3301      	adds	r3, #1
uint8_t Adafruit_BMP280::read8(byte reg) {
 23f189e:	460d      	mov	r5, r1
 23f18a0:	b085      	sub	sp, #20
  if (_cs == -1) {
 23f18a2:	d118      	bne.n	23f18d6 <_ZN15Adafruit_BMP2805read8Eh+0x42>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23f18a4:	7c01      	ldrb	r1, [r0, #16]
 23f18a6:	6800      	ldr	r0, [r0, #0]
 23f18a8:	f007 fb2e 	bl	23f8f08 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23f18ac:	6820      	ldr	r0, [r4, #0]
 23f18ae:	4629      	mov	r1, r5
 23f18b0:	6803      	ldr	r3, [r0, #0]
 23f18b2:	689b      	ldr	r3, [r3, #8]
 23f18b4:	4798      	blx	r3
    _wire->endTransmission();
 23f18b6:	6820      	ldr	r0, [r4, #0]
 23f18b8:	f007 fb31 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)1);
 23f18bc:	2201      	movs	r2, #1
 23f18be:	7c21      	ldrb	r1, [r4, #16]
 23f18c0:	6820      	ldr	r0, [r4, #0]
 23f18c2:	f007 fb1e 	bl	23f8f02 <_ZN7TwoWire11requestFromEhj>
    value = _wire->read();
 23f18c6:	6820      	ldr	r0, [r4, #0]
 23f18c8:	6803      	ldr	r3, [r0, #0]
 23f18ca:	695b      	ldr	r3, [r3, #20]
 23f18cc:	4798      	blx	r3
 23f18ce:	b2c5      	uxtb	r5, r0
}
 23f18d0:	4628      	mov	r0, r5
 23f18d2:	b005      	add	sp, #20
 23f18d4:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23f18d6:	f990 301f 	ldrsb.w	r3, [r0, #31]
 23f18da:	3301      	adds	r3, #1
 23f18dc:	d10d      	bne.n	23f18fa <_ZN15Adafruit_BMP2805read8Eh+0x66>
 23f18de:	4b16      	ldr	r3, [pc, #88]	; (23f1938 <_ZN15Adafruit_BMP2805read8Eh+0xa4>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23f18e0:	4669      	mov	r1, sp
 23f18e2:	9300      	str	r3, [sp, #0]
 23f18e4:	2300      	movs	r3, #0
 23f18e6:	f88d 3004 	strb.w	r3, [sp, #4]
 23f18ea:	4b14      	ldr	r3, [pc, #80]	; (23f193c <_ZN15Adafruit_BMP2805read8Eh+0xa8>)
 23f18ec:	6840      	ldr	r0, [r0, #4]
 23f18ee:	9302      	str	r3, [sp, #8]
 23f18f0:	2301      	movs	r3, #1
 23f18f2:	f8ad 300c 	strh.w	r3, [sp, #12]
 23f18f6:	f007 ffe7 	bl	23f98c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23f18fa:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23f18fe:	2100      	movs	r1, #0
 23f1900:	b280      	uxth	r0, r0
 23f1902:	f008 fc94 	bl	23fa22e <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23f1906:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23f190a:	4620      	mov	r0, r4
 23f190c:	f7ff ff04 	bl	23f1718 <_ZN15Adafruit_BMP2807spixferEh>
    value = spixfer(0);
 23f1910:	2100      	movs	r1, #0
 23f1912:	4620      	mov	r0, r4
 23f1914:	f7ff ff00 	bl	23f1718 <_ZN15Adafruit_BMP2807spixferEh>
 23f1918:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
 23f191a:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23f191e:	2101      	movs	r1, #1
 23f1920:	b280      	uxth	r0, r0
 23f1922:	f008 fc84 	bl	23fa22e <digitalWrite>
    if (_sck == -1)
 23f1926:	f994 301f 	ldrsb.w	r3, [r4, #31]
 23f192a:	3301      	adds	r3, #1
 23f192c:	d1d0      	bne.n	23f18d0 <_ZN15Adafruit_BMP2805read8Eh+0x3c>
      _spi->endTransaction(); // release the SPI bus
 23f192e:	6860      	ldr	r0, [r4, #4]
 23f1930:	f007 ffb0 	bl	23f9894 <_ZN8SPIClass14endTransactionEv>
 23f1934:	e7cc      	b.n	23f18d0 <_ZN15Adafruit_BMP2805read8Eh+0x3c>
 23f1936:	bf00      	nop
 23f1938:	023fea50 	.word	0x023fea50
 23f193c:	0007a120 	.word	0x0007a120

023f1940 <_ZN15Adafruit_BMP2806read16Eh>:
uint16_t Adafruit_BMP280::read16(byte reg) {
 23f1940:	b530      	push	{r4, r5, lr}
  if (_cs == -1) {
 23f1942:	f990 301c 	ldrsb.w	r3, [r0, #28]
uint16_t Adafruit_BMP280::read16(byte reg) {
 23f1946:	4604      	mov	r4, r0
  if (_cs == -1) {
 23f1948:	3301      	adds	r3, #1
uint16_t Adafruit_BMP280::read16(byte reg) {
 23f194a:	460d      	mov	r5, r1
 23f194c:	b085      	sub	sp, #20
  if (_cs == -1) {
 23f194e:	d11f      	bne.n	23f1990 <_ZN15Adafruit_BMP2806read16Eh+0x50>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23f1950:	7c01      	ldrb	r1, [r0, #16]
 23f1952:	6800      	ldr	r0, [r0, #0]
 23f1954:	f007 fad8 	bl	23f8f08 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23f1958:	6820      	ldr	r0, [r4, #0]
 23f195a:	4629      	mov	r1, r5
 23f195c:	6803      	ldr	r3, [r0, #0]
 23f195e:	689b      	ldr	r3, [r3, #8]
 23f1960:	4798      	blx	r3
    _wire->endTransmission();
 23f1962:	6820      	ldr	r0, [r4, #0]
 23f1964:	f007 fadb 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)2);
 23f1968:	2202      	movs	r2, #2
 23f196a:	7c21      	ldrb	r1, [r4, #16]
 23f196c:	6820      	ldr	r0, [r4, #0]
 23f196e:	f007 fac8 	bl	23f8f02 <_ZN7TwoWire11requestFromEhj>
    value = (_wire->read() << 8) | _wire->read();
 23f1972:	6820      	ldr	r0, [r4, #0]
 23f1974:	6803      	ldr	r3, [r0, #0]
 23f1976:	695b      	ldr	r3, [r3, #20]
 23f1978:	4798      	blx	r3
 23f197a:	4605      	mov	r5, r0
 23f197c:	6820      	ldr	r0, [r4, #0]
 23f197e:	6803      	ldr	r3, [r0, #0]
 23f1980:	695b      	ldr	r3, [r3, #20]
 23f1982:	4798      	blx	r3
 23f1984:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 23f1988:	b285      	uxth	r5, r0
}
 23f198a:	4628      	mov	r0, r5
 23f198c:	b005      	add	sp, #20
 23f198e:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23f1990:	f990 301f 	ldrsb.w	r3, [r0, #31]
 23f1994:	3301      	adds	r3, #1
 23f1996:	d10d      	bne.n	23f19b4 <_ZN15Adafruit_BMP2806read16Eh+0x74>
 23f1998:	4b19      	ldr	r3, [pc, #100]	; (23f1a00 <_ZN15Adafruit_BMP2806read16Eh+0xc0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23f199a:	4669      	mov	r1, sp
 23f199c:	9300      	str	r3, [sp, #0]
 23f199e:	2300      	movs	r3, #0
 23f19a0:	f88d 3004 	strb.w	r3, [sp, #4]
 23f19a4:	4b17      	ldr	r3, [pc, #92]	; (23f1a04 <_ZN15Adafruit_BMP2806read16Eh+0xc4>)
 23f19a6:	6840      	ldr	r0, [r0, #4]
 23f19a8:	9302      	str	r3, [sp, #8]
 23f19aa:	2301      	movs	r3, #1
 23f19ac:	f8ad 300c 	strh.w	r3, [sp, #12]
 23f19b0:	f007 ff8a 	bl	23f98c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23f19b4:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23f19b8:	2100      	movs	r1, #0
 23f19ba:	b280      	uxth	r0, r0
 23f19bc:	f008 fc37 	bl	23fa22e <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23f19c0:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23f19c4:	4620      	mov	r0, r4
 23f19c6:	f7ff fea7 	bl	23f1718 <_ZN15Adafruit_BMP2807spixferEh>
    value = (spixfer(0) << 8) | spixfer(0);
 23f19ca:	2100      	movs	r1, #0
 23f19cc:	4620      	mov	r0, r4
 23f19ce:	f7ff fea3 	bl	23f1718 <_ZN15Adafruit_BMP2807spixferEh>
 23f19d2:	2100      	movs	r1, #0
 23f19d4:	4605      	mov	r5, r0
 23f19d6:	4620      	mov	r0, r4
 23f19d8:	f7ff fe9e 	bl	23f1718 <_ZN15Adafruit_BMP2807spixferEh>
 23f19dc:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 23f19e0:	b285      	uxth	r5, r0
    digitalWrite(_cs, HIGH);
 23f19e2:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23f19e6:	2101      	movs	r1, #1
 23f19e8:	b280      	uxth	r0, r0
 23f19ea:	f008 fc20 	bl	23fa22e <digitalWrite>
    if (_sck == -1)
 23f19ee:	f994 301f 	ldrsb.w	r3, [r4, #31]
 23f19f2:	3301      	adds	r3, #1
 23f19f4:	d1c9      	bne.n	23f198a <_ZN15Adafruit_BMP2806read16Eh+0x4a>
      _spi->endTransaction(); // release the SPI bus
 23f19f6:	6860      	ldr	r0, [r4, #4]
 23f19f8:	f007 ff4c 	bl	23f9894 <_ZN8SPIClass14endTransactionEv>
 23f19fc:	e7c5      	b.n	23f198a <_ZN15Adafruit_BMP2806read16Eh+0x4a>
 23f19fe:	bf00      	nop
 23f1a00:	023fea50 	.word	0x023fea50
 23f1a04:	0007a120 	.word	0x0007a120

023f1a08 <_ZN15Adafruit_BMP2809read16_LEEh>:
uint16_t Adafruit_BMP280::read16_LE(byte reg) {
 23f1a08:	b508      	push	{r3, lr}
  uint16_t temp = read16(reg);
 23f1a0a:	f7ff ff99 	bl	23f1940 <_ZN15Adafruit_BMP2806read16Eh>
  return (temp >> 8) | (temp << 8);
 23f1a0e:	ba40      	rev16	r0, r0
}
 23f1a10:	b280      	uxth	r0, r0
 23f1a12:	bd08      	pop	{r3, pc}

023f1a14 <_ZN15Adafruit_BMP2806read24Eh>:
uint32_t Adafruit_BMP280::read24(byte reg) {
 23f1a14:	b530      	push	{r4, r5, lr}
  if (_cs == -1) {
 23f1a16:	f990 301c 	ldrsb.w	r3, [r0, #28]
uint32_t Adafruit_BMP280::read24(byte reg) {
 23f1a1a:	4604      	mov	r4, r0
  if (_cs == -1) {
 23f1a1c:	3301      	adds	r3, #1
uint32_t Adafruit_BMP280::read24(byte reg) {
 23f1a1e:	460d      	mov	r5, r1
 23f1a20:	b085      	sub	sp, #20
  if (_cs == -1) {
 23f1a22:	d123      	bne.n	23f1a6c <_ZN15Adafruit_BMP2806read24Eh+0x58>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23f1a24:	7c01      	ldrb	r1, [r0, #16]
 23f1a26:	6800      	ldr	r0, [r0, #0]
 23f1a28:	f007 fa6e 	bl	23f8f08 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23f1a2c:	6820      	ldr	r0, [r4, #0]
 23f1a2e:	4629      	mov	r1, r5
 23f1a30:	6803      	ldr	r3, [r0, #0]
 23f1a32:	689b      	ldr	r3, [r3, #8]
 23f1a34:	4798      	blx	r3
    _wire->endTransmission();
 23f1a36:	6820      	ldr	r0, [r4, #0]
 23f1a38:	f007 fa71 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)3);
 23f1a3c:	2203      	movs	r2, #3
 23f1a3e:	7c21      	ldrb	r1, [r4, #16]
 23f1a40:	6820      	ldr	r0, [r4, #0]
 23f1a42:	f007 fa5e 	bl	23f8f02 <_ZN7TwoWire11requestFromEhj>
    value = _wire->read();
 23f1a46:	6820      	ldr	r0, [r4, #0]
 23f1a48:	6803      	ldr	r3, [r0, #0]
 23f1a4a:	695b      	ldr	r3, [r3, #20]
 23f1a4c:	4798      	blx	r3
    value <<= 8;
 23f1a4e:	0205      	lsls	r5, r0, #8
    value |= _wire->read();
 23f1a50:	6820      	ldr	r0, [r4, #0]
 23f1a52:	6803      	ldr	r3, [r0, #0]
 23f1a54:	695b      	ldr	r3, [r3, #20]
 23f1a56:	4798      	blx	r3
 23f1a58:	4328      	orrs	r0, r5
    value <<= 8;
 23f1a5a:	0205      	lsls	r5, r0, #8
    value |= _wire->read();
 23f1a5c:	6820      	ldr	r0, [r4, #0]
 23f1a5e:	6803      	ldr	r3, [r0, #0]
 23f1a60:	695b      	ldr	r3, [r3, #20]
 23f1a62:	4798      	blx	r3
 23f1a64:	4305      	orrs	r5, r0
}
 23f1a66:	4628      	mov	r0, r5
 23f1a68:	b005      	add	sp, #20
 23f1a6a:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23f1a6c:	f990 301f 	ldrsb.w	r3, [r0, #31]
 23f1a70:	3301      	adds	r3, #1
 23f1a72:	d10d      	bne.n	23f1a90 <_ZN15Adafruit_BMP2806read24Eh+0x7c>
 23f1a74:	4b1b      	ldr	r3, [pc, #108]	; (23f1ae4 <_ZN15Adafruit_BMP2806read24Eh+0xd0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23f1a76:	4669      	mov	r1, sp
 23f1a78:	9300      	str	r3, [sp, #0]
 23f1a7a:	2300      	movs	r3, #0
 23f1a7c:	f88d 3004 	strb.w	r3, [sp, #4]
 23f1a80:	4b19      	ldr	r3, [pc, #100]	; (23f1ae8 <_ZN15Adafruit_BMP2806read24Eh+0xd4>)
 23f1a82:	6840      	ldr	r0, [r0, #4]
 23f1a84:	9302      	str	r3, [sp, #8]
 23f1a86:	2301      	movs	r3, #1
 23f1a88:	f8ad 300c 	strh.w	r3, [sp, #12]
 23f1a8c:	f007 ff1c 	bl	23f98c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23f1a90:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23f1a94:	2100      	movs	r1, #0
 23f1a96:	b280      	uxth	r0, r0
 23f1a98:	f008 fbc9 	bl	23fa22e <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23f1a9c:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23f1aa0:	4620      	mov	r0, r4
 23f1aa2:	f7ff fe39 	bl	23f1718 <_ZN15Adafruit_BMP2807spixferEh>
    value = spixfer(0);
 23f1aa6:	2100      	movs	r1, #0
 23f1aa8:	4620      	mov	r0, r4
 23f1aaa:	f7ff fe35 	bl	23f1718 <_ZN15Adafruit_BMP2807spixferEh>
    value |= spixfer(0);
 23f1aae:	2100      	movs	r1, #0
    value <<= 8;
 23f1ab0:	0205      	lsls	r5, r0, #8
    value |= spixfer(0);
 23f1ab2:	4620      	mov	r0, r4
 23f1ab4:	f7ff fe30 	bl	23f1718 <_ZN15Adafruit_BMP2807spixferEh>
 23f1ab8:	4328      	orrs	r0, r5
    value |= spixfer(0);
 23f1aba:	2100      	movs	r1, #0
    value <<= 8;
 23f1abc:	0205      	lsls	r5, r0, #8
    value |= spixfer(0);
 23f1abe:	4620      	mov	r0, r4
 23f1ac0:	f7ff fe2a 	bl	23f1718 <_ZN15Adafruit_BMP2807spixferEh>
 23f1ac4:	4305      	orrs	r5, r0
    digitalWrite(_cs, HIGH);
 23f1ac6:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23f1aca:	2101      	movs	r1, #1
 23f1acc:	b280      	uxth	r0, r0
 23f1ace:	f008 fbae 	bl	23fa22e <digitalWrite>
    if (_sck == -1)
 23f1ad2:	f994 301f 	ldrsb.w	r3, [r4, #31]
 23f1ad6:	3301      	adds	r3, #1
 23f1ad8:	d1c5      	bne.n	23f1a66 <_ZN15Adafruit_BMP2806read24Eh+0x52>
      _spi->endTransaction(); // release the SPI bus
 23f1ada:	6860      	ldr	r0, [r4, #4]
 23f1adc:	f007 feda 	bl	23f9894 <_ZN8SPIClass14endTransactionEv>
  return value;
 23f1ae0:	e7c1      	b.n	23f1a66 <_ZN15Adafruit_BMP2806read24Eh+0x52>
 23f1ae2:	bf00      	nop
 23f1ae4:	023fea50 	.word	0x023fea50
 23f1ae8:	0007a120 	.word	0x0007a120

023f1aec <_ZN15Adafruit_BMP28016readCoefficientsEv>:
void Adafruit_BMP280::readCoefficients() {
 23f1aec:	b510      	push	{r4, lr}
  _bmp280_calib.dig_T1 = read16_LE(BMP280_REGISTER_DIG_T1);
 23f1aee:	2188      	movs	r1, #136	; 0x88
void Adafruit_BMP280::readCoefficients() {
 23f1af0:	4604      	mov	r4, r0
  _bmp280_calib.dig_T1 = read16_LE(BMP280_REGISTER_DIG_T1);
 23f1af2:	f7ff ff89 	bl	23f1a08 <_ZN15Adafruit_BMP2809read16_LEEh>
  return (int16_t)read16_LE(reg);
 23f1af6:	218a      	movs	r1, #138	; 0x8a
  _bmp280_calib.dig_T1 = read16_LE(BMP280_REGISTER_DIG_T1);
 23f1af8:	8420      	strh	r0, [r4, #32]
  return (int16_t)read16_LE(reg);
 23f1afa:	4620      	mov	r0, r4
 23f1afc:	f7ff ff84 	bl	23f1a08 <_ZN15Adafruit_BMP2809read16_LEEh>
 23f1b00:	218c      	movs	r1, #140	; 0x8c
  _bmp280_calib.dig_T2 = readS16_LE(BMP280_REGISTER_DIG_T2);
 23f1b02:	8460      	strh	r0, [r4, #34]	; 0x22
  return (int16_t)read16_LE(reg);
 23f1b04:	4620      	mov	r0, r4
 23f1b06:	f7ff ff7f 	bl	23f1a08 <_ZN15Adafruit_BMP2809read16_LEEh>
  _bmp280_calib.dig_P1 = read16_LE(BMP280_REGISTER_DIG_P1);
 23f1b0a:	218e      	movs	r1, #142	; 0x8e
  _bmp280_calib.dig_T3 = readS16_LE(BMP280_REGISTER_DIG_T3);
 23f1b0c:	84a0      	strh	r0, [r4, #36]	; 0x24
  _bmp280_calib.dig_P1 = read16_LE(BMP280_REGISTER_DIG_P1);
 23f1b0e:	4620      	mov	r0, r4
 23f1b10:	f7ff ff7a 	bl	23f1a08 <_ZN15Adafruit_BMP2809read16_LEEh>
  return (int16_t)read16_LE(reg);
 23f1b14:	2190      	movs	r1, #144	; 0x90
  _bmp280_calib.dig_P1 = read16_LE(BMP280_REGISTER_DIG_P1);
 23f1b16:	84e0      	strh	r0, [r4, #38]	; 0x26
  return (int16_t)read16_LE(reg);
 23f1b18:	4620      	mov	r0, r4
 23f1b1a:	f7ff ff75 	bl	23f1a08 <_ZN15Adafruit_BMP2809read16_LEEh>
 23f1b1e:	2192      	movs	r1, #146	; 0x92
  _bmp280_calib.dig_P2 = readS16_LE(BMP280_REGISTER_DIG_P2);
 23f1b20:	8520      	strh	r0, [r4, #40]	; 0x28
  return (int16_t)read16_LE(reg);
 23f1b22:	4620      	mov	r0, r4
 23f1b24:	f7ff ff70 	bl	23f1a08 <_ZN15Adafruit_BMP2809read16_LEEh>
 23f1b28:	2194      	movs	r1, #148	; 0x94
  _bmp280_calib.dig_P3 = readS16_LE(BMP280_REGISTER_DIG_P3);
 23f1b2a:	8560      	strh	r0, [r4, #42]	; 0x2a
  return (int16_t)read16_LE(reg);
 23f1b2c:	4620      	mov	r0, r4
 23f1b2e:	f7ff ff6b 	bl	23f1a08 <_ZN15Adafruit_BMP2809read16_LEEh>
 23f1b32:	2196      	movs	r1, #150	; 0x96
  _bmp280_calib.dig_P4 = readS16_LE(BMP280_REGISTER_DIG_P4);
 23f1b34:	85a0      	strh	r0, [r4, #44]	; 0x2c
  return (int16_t)read16_LE(reg);
 23f1b36:	4620      	mov	r0, r4
 23f1b38:	f7ff ff66 	bl	23f1a08 <_ZN15Adafruit_BMP2809read16_LEEh>
 23f1b3c:	2198      	movs	r1, #152	; 0x98
  _bmp280_calib.dig_P5 = readS16_LE(BMP280_REGISTER_DIG_P5);
 23f1b3e:	85e0      	strh	r0, [r4, #46]	; 0x2e
  return (int16_t)read16_LE(reg);
 23f1b40:	4620      	mov	r0, r4
 23f1b42:	f7ff ff61 	bl	23f1a08 <_ZN15Adafruit_BMP2809read16_LEEh>
 23f1b46:	219a      	movs	r1, #154	; 0x9a
  _bmp280_calib.dig_P6 = readS16_LE(BMP280_REGISTER_DIG_P6);
 23f1b48:	8620      	strh	r0, [r4, #48]	; 0x30
  return (int16_t)read16_LE(reg);
 23f1b4a:	4620      	mov	r0, r4
 23f1b4c:	f7ff ff5c 	bl	23f1a08 <_ZN15Adafruit_BMP2809read16_LEEh>
 23f1b50:	219c      	movs	r1, #156	; 0x9c
  _bmp280_calib.dig_P7 = readS16_LE(BMP280_REGISTER_DIG_P7);
 23f1b52:	8660      	strh	r0, [r4, #50]	; 0x32
  return (int16_t)read16_LE(reg);
 23f1b54:	4620      	mov	r0, r4
 23f1b56:	f7ff ff57 	bl	23f1a08 <_ZN15Adafruit_BMP2809read16_LEEh>
 23f1b5a:	219e      	movs	r1, #158	; 0x9e
  _bmp280_calib.dig_P8 = readS16_LE(BMP280_REGISTER_DIG_P8);
 23f1b5c:	86a0      	strh	r0, [r4, #52]	; 0x34
  return (int16_t)read16_LE(reg);
 23f1b5e:	4620      	mov	r0, r4
 23f1b60:	f7ff ff52 	bl	23f1a08 <_ZN15Adafruit_BMP2809read16_LEEh>
  _bmp280_calib.dig_P9 = readS16_LE(BMP280_REGISTER_DIG_P9);
 23f1b64:	86e0      	strh	r0, [r4, #54]	; 0x36
}
 23f1b66:	bd10      	pop	{r4, pc}

023f1b68 <_ZN15Adafruit_BMP2805beginEhh>:
bool Adafruit_BMP280::begin(uint8_t addr, uint8_t chipid) {
 23f1b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f1b6a:	4604      	mov	r4, r0
  _i2caddr = addr;
 23f1b6c:	7401      	strb	r1, [r0, #16]
  if (_cs == -1) {
 23f1b6e:	f990 001c 	ldrsb.w	r0, [r0, #28]
bool Adafruit_BMP280::begin(uint8_t addr, uint8_t chipid) {
 23f1b72:	4615      	mov	r5, r2
  if (_cs == -1) {
 23f1b74:	1c42      	adds	r2, r0, #1
 23f1b76:	d11b      	bne.n	23f1bb0 <_ZN15Adafruit_BMP2805beginEhh+0x48>
    _wire->begin();
 23f1b78:	6820      	ldr	r0, [r4, #0]
 23f1b7a:	f007 f99b 	bl	23f8eb4 <_ZN7TwoWire5beginEv>
  if (read8(BMP280_REGISTER_CHIPID) != chipid)
 23f1b7e:	21d0      	movs	r1, #208	; 0xd0
 23f1b80:	4620      	mov	r0, r4
 23f1b82:	f7ff fe87 	bl	23f1894 <_ZN15Adafruit_BMP2805read8Eh>
 23f1b86:	42a8      	cmp	r0, r5
 23f1b88:	f04f 0500 	mov.w	r5, #0
 23f1b8c:	d133      	bne.n	23f1bf6 <_ZN15Adafruit_BMP2805beginEhh+0x8e>
  readCoefficients();
 23f1b8e:	4620      	mov	r0, r4
 23f1b90:	f7ff ffac 	bl	23f1aec <_ZN15Adafruit_BMP28016readCoefficientsEv>
  setSampling();
 23f1b94:	2305      	movs	r3, #5
 23f1b96:	2103      	movs	r1, #3
 23f1b98:	461a      	mov	r2, r3
 23f1b9a:	4620      	mov	r0, r4
 23f1b9c:	e9cd 5500 	strd	r5, r5, [sp]
 23f1ba0:	f7ff fe42 	bl	23f1828 <_ZN15Adafruit_BMP28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_NS_13sensor_filterENS_16standby_durationE>
  delay(100);
 23f1ba4:	2064      	movs	r0, #100	; 0x64
 23f1ba6:	f006 fbb9 	bl	23f831c <delay>
  return true;
 23f1baa:	2001      	movs	r0, #1
}
 23f1bac:	b003      	add	sp, #12
 23f1bae:	bd30      	pop	{r4, r5, pc}
    digitalWrite(_cs, HIGH);
 23f1bb0:	2101      	movs	r1, #1
 23f1bb2:	b280      	uxth	r0, r0
 23f1bb4:	f008 fb3b 	bl	23fa22e <digitalWrite>
    pinMode(_cs, OUTPUT);
 23f1bb8:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23f1bbc:	2101      	movs	r1, #1
 23f1bbe:	b280      	uxth	r0, r0
 23f1bc0:	f008 fb24 	bl	23fa20c <pinMode>
    if (_sck == -1) {
 23f1bc4:	f994 001f 	ldrsb.w	r0, [r4, #31]
 23f1bc8:	1c43      	adds	r3, r0, #1
 23f1bca:	d103      	bne.n	23f1bd4 <_ZN15Adafruit_BMP2805beginEhh+0x6c>
      _spi->begin();
 23f1bcc:	6860      	ldr	r0, [r4, #4]
 23f1bce:	f007 fe27 	bl	23f9820 <_ZN8SPIClass5beginEv>
 23f1bd2:	e7d4      	b.n	23f1b7e <_ZN15Adafruit_BMP2805beginEhh+0x16>
      pinMode(_sck, OUTPUT);
 23f1bd4:	2101      	movs	r1, #1
 23f1bd6:	b280      	uxth	r0, r0
 23f1bd8:	f008 fb18 	bl	23fa20c <pinMode>
      pinMode(_mosi, OUTPUT);
 23f1bdc:	f994 001d 	ldrsb.w	r0, [r4, #29]
 23f1be0:	2101      	movs	r1, #1
 23f1be2:	b280      	uxth	r0, r0
 23f1be4:	f008 fb12 	bl	23fa20c <pinMode>
      pinMode(_miso, INPUT);
 23f1be8:	f994 001e 	ldrsb.w	r0, [r4, #30]
 23f1bec:	2100      	movs	r1, #0
 23f1bee:	b280      	uxth	r0, r0
 23f1bf0:	f008 fb0c 	bl	23fa20c <pinMode>
 23f1bf4:	e7c3      	b.n	23f1b7e <_ZN15Adafruit_BMP2805beginEhh+0x16>
    return false;
 23f1bf6:	4628      	mov	r0, r5
 23f1bf8:	e7d8      	b.n	23f1bac <_ZN15Adafruit_BMP2805beginEhh+0x44>
	...

023f1bfc <_ZN15Adafruit_BMP28015readTemperatureEv>:
float Adafruit_BMP280::readTemperature() {
 23f1bfc:	b510      	push	{r4, lr}
 23f1bfe:	4604      	mov	r4, r0
  int32_t adc_T = read24(BMP280_REGISTER_TEMPDATA);
 23f1c00:	21fa      	movs	r1, #250	; 0xfa
 23f1c02:	f7ff ff07 	bl	23f1a14 <_ZN15Adafruit_BMP2806read24Eh>
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
 23f1c06:	8c21      	ldrh	r1, [r4, #32]
}
 23f1c08:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 23f1c48 <_ZN15Adafruit_BMP28015readTemperatureEv+0x4c>
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
 23f1c0c:	004b      	lsls	r3, r1, #1
  var2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) *
 23f1c0e:	ebc1 2220 	rsb	r2, r1, r0, asr #8
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
 23f1c12:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
          ((int32_t)_bmp280_calib.dig_T2)) >>
 23f1c16:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
 23f1c1a:	4359      	muls	r1, r3
  var2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) *
 23f1c1c:	fb02 f302 	mul.w	r3, r2, r2
          ((int32_t)_bmp280_calib.dig_T3)) >>
 23f1c20:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
            ((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1))) >>
 23f1c24:	131b      	asrs	r3, r3, #12
           12) *
 23f1c26:	4353      	muls	r3, r2
  var2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) *
 23f1c28:	139b      	asrs	r3, r3, #14
  t_fine = var1 + var2;
 23f1c2a:	eb03 23e1 	add.w	r3, r3, r1, asr #11
 23f1c2e:	61a3      	str	r3, [r4, #24]
  float T = (t_fine * 5 + 128) >> 8;
 23f1c30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 23f1c34:	3380      	adds	r3, #128	; 0x80
 23f1c36:	121b      	asrs	r3, r3, #8
 23f1c38:	ee07 3a90 	vmov	s15, r3
 23f1c3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 23f1c40:	ee87 0a80 	vdiv.f32	s0, s15, s0
 23f1c44:	bd10      	pop	{r4, pc}
 23f1c46:	bf00      	nop
 23f1c48:	42c80000 	.word	0x42c80000

023f1c4c <_ZN20Adafruit_BMP280_Temp8getEventEP15sensors_event_t>:
bool Adafruit_BMP280_Temp::getEvent(sensors_event_t *event) {
 23f1c4c:	b538      	push	{r3, r4, r5, lr}
 23f1c4e:	460c      	mov	r4, r1
 23f1c50:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
 23f1c52:	2220      	movs	r2, #32
 23f1c54:	2100      	movs	r1, #0
 23f1c56:	1d20      	adds	r0, r4, #4
 23f1c58:	f00b f8f5 	bl	23fce46 <memset>
  event->version = sizeof(sensors_event_t);
 23f1c5c:	2324      	movs	r3, #36	; 0x24
 23f1c5e:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
 23f1c60:	68ab      	ldr	r3, [r5, #8]
 23f1c62:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 23f1c64:	230d      	movs	r3, #13
 23f1c66:	60a3      	str	r3, [r4, #8]
 23f1c68:	f005 fd00 	bl	23f766c <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
 23f1c6c:	6120      	str	r0, [r4, #16]
  event->temperature = _theBMP280->readTemperature();
 23f1c6e:	68e8      	ldr	r0, [r5, #12]
 23f1c70:	f7ff ffc4 	bl	23f1bfc <_ZN15Adafruit_BMP28015readTemperatureEv>
}
 23f1c74:	2001      	movs	r0, #1
  event->temperature = _theBMP280->readTemperature();
 23f1c76:	ed84 0a05 	vstr	s0, [r4, #20]
}
 23f1c7a:	bd38      	pop	{r3, r4, r5, pc}

023f1c7c <_ZN15Adafruit_BMP28012readPressureEv>:
float Adafruit_BMP280::readPressure() {
 23f1c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23f1c80:	4604      	mov	r4, r0
  readTemperature();
 23f1c82:	f7ff ffbb 	bl	23f1bfc <_ZN15Adafruit_BMP28015readTemperatureEv>
  int32_t adc_P = read24(BMP280_REGISTER_PRESSUREDATA);
 23f1c86:	21f7      	movs	r1, #247	; 0xf7
 23f1c88:	4620      	mov	r0, r4
 23f1c8a:	f7ff fec3 	bl	23f1a14 <_ZN15Adafruit_BMP2806read24Eh>
  var1 = ((int64_t)t_fine) - 128000;
 23f1c8e:	69a1      	ldr	r1, [r4, #24]
         ((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
 23f1c90:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
  var1 = ((int64_t)t_fine) - 128000;
 23f1c94:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 23f1c98:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
 23f1c9c:	f14c 3cff 	adc.w	ip, ip, #4294967295	; 0xffffffff
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
 23f1ca0:	fba1 6801 	umull	r6, r8, r1, r1
 23f1ca4:	fb01 f50c 	mul.w	r5, r1, ip
         ((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
 23f1ca8:	fb03 f20c 	mul.w	r2, r3, ip
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
 23f1cac:	eb08 0845 	add.w	r8, r8, r5, lsl #1
         ((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
 23f1cb0:	17dd      	asrs	r5, r3, #31
 23f1cb2:	fb01 2205 	mla	r2, r1, r5, r2
 23f1cb6:	fba3 3501 	umull	r3, r5, r3, r1
 23f1cba:	442a      	add	r2, r5
 23f1cbc:	0312      	lsls	r2, r2, #12
 23f1cbe:	031d      	lsls	r5, r3, #12
 23f1cc0:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
  var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
 23f1cc4:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
 23f1cc8:	fb03 f708 	mul.w	r7, r3, r8
 23f1ccc:	ea4f 7ee3 	mov.w	lr, r3, asr #31
 23f1cd0:	fb06 770e 	mla	r7, r6, lr, r7
 23f1cd4:	fba3 3e06 	umull	r3, lr, r3, r6
 23f1cd8:	4477      	add	r7, lr
 23f1cda:	0a1b      	lsrs	r3, r3, #8
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
 23f1cdc:	f8b4 e026 	ldrh.w	lr, [r4, #38]	; 0x26
  var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
 23f1ce0:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 23f1ce4:	195b      	adds	r3, r3, r5
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
 23f1ce6:	fba3 350e 	umull	r3, r5, r3, lr
  var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
 23f1cea:	eb42 2227 	adc.w	r2, r2, r7, asr #8
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
 23f1cee:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 23f1cf2:	fb0e 5502 	mla	r5, lr, r2, r5
  var1 =
 23f1cf6:	17eb      	asrs	r3, r5, #31
 23f1cf8:	106a      	asrs	r2, r5, #1
  if (var1 == 0) {
 23f1cfa:	ea53 0565 	orrs.w	r5, r3, r5, asr #1
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
 23f1cfe:	f04f 0700 	mov.w	r7, #0
  if (var1 == 0) {
 23f1d02:	d07b      	beq.n	23f1dfc <_ZN15Adafruit_BMP28012readPressureEv+0x180>
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
 23f1d04:	f9b4 e030 	ldrsh.w	lr, [r4, #48]	; 0x30
  adc_P >>= 4;
 23f1d08:	1100      	asrs	r0, r0, #4
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
 23f1d0a:	fb0e f508 	mul.w	r5, lr, r8
 23f1d0e:	ea4f 79ee 	mov.w	r9, lr, asr #31
 23f1d12:	fb06 5509 	mla	r5, r6, r9, r5
 23f1d16:	fbae e606 	umull	lr, r6, lr, r6
 23f1d1a:	4435      	add	r5, r6
  var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
 23f1d1c:	f9b4 602e 	ldrsh.w	r6, [r4, #46]	; 0x2e
  p = 1048576 - adc_P;
 23f1d20:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
  var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
 23f1d24:	fb06 fc0c 	mul.w	ip, r6, ip
 23f1d28:	ea4f 78e6 	mov.w	r8, r6, asr #31
 23f1d2c:	fb01 cc08 	mla	ip, r1, r8, ip
 23f1d30:	fba6 6101 	umull	r6, r1, r6, r1
 23f1d34:	4461      	add	r1, ip
 23f1d36:	0449      	lsls	r1, r1, #17
 23f1d38:	ea41 31d6 	orr.w	r1, r1, r6, lsr #15
 23f1d3c:	0476      	lsls	r6, r6, #17
 23f1d3e:	eb16 060e 	adds.w	r6, r6, lr
 23f1d42:	eb45 0101 	adc.w	r1, r5, r1
  var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
 23f1d46:	f9b4 502c 	ldrsh.w	r5, [r4, #44]	; 0x2c
  p = (((p << 31) - var2) * 3125) / var1;
 23f1d4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
 23f1d4e:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
  p = (((p << 31) - var2) * 3125) / var1;
 23f1d52:	f640 4535 	movw	r5, #3125	; 0xc35
  var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
 23f1d56:	19be      	adds	r6, r7, r6
  p = (((p << 31) - var2) * 3125) / var1;
 23f1d58:	ea4c 0c50 	orr.w	ip, ip, r0, lsr #1
 23f1d5c:	07c0      	lsls	r0, r0, #31
 23f1d5e:	1b80      	subs	r0, r0, r6
 23f1d60:	eb6c 0c01 	sbc.w	ip, ip, r1
 23f1d64:	fba0 0105 	umull	r0, r1, r0, r5
 23f1d68:	fb05 110c 	mla	r1, r5, ip, r1
 23f1d6c:	f7f5 fb72 	bl	23e7454 <__aeabi_ldivmod>
 23f1d70:	4686      	mov	lr, r0
  var1 = (((int64_t)_bmp280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23f1d72:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 23f1d76:	ea4f 3c61 	mov.w	ip, r1, asr #13
 23f1d7a:	fb02 f70c 	mul.w	r7, r2, ip
 23f1d7e:	0b43      	lsrs	r3, r0, #13
 23f1d80:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
 23f1d84:	17d5      	asrs	r5, r2, #31
 23f1d86:	fb03 7705 	mla	r7, r3, r5, r7
 23f1d8a:	fba2 2503 	umull	r2, r5, r2, r3
 23f1d8e:	443d      	add	r5, r7
 23f1d90:	fb02 f70c 	mul.w	r7, r2, ip
 23f1d94:	fb03 7705 	mla	r7, r3, r5, r7
 23f1d98:	fba2 2303 	umull	r2, r3, r2, r3
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
 23f1d9c:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
  var1 = (((int64_t)_bmp280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23f1da0:	441f      	add	r7, r3
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
 23f1da2:	fb06 f501 	mul.w	r5, r6, r1
  var1 = (((int64_t)_bmp280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23f1da6:	0e53      	lsrs	r3, r2, #25
 23f1da8:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
 23f1dac:	181b      	adds	r3, r3, r0
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
 23f1dae:	ea4f 72e6 	mov.w	r2, r6, asr #31
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
 23f1db2:	eb41 6767 	adc.w	r7, r1, r7, asr #25
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
 23f1db6:	fb02 5100 	mla	r1, r2, r0, r5
 23f1dba:	fba6 060e 	umull	r0, r6, r6, lr
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
 23f1dbe:	f9b4 4032 	ldrsh.w	r4, [r4, #50]	; 0x32
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
 23f1dc2:	4431      	add	r1, r6
 23f1dc4:	0cc0      	lsrs	r0, r0, #19
 23f1dc6:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
 23f1dca:	1818      	adds	r0, r3, r0
 23f1dcc:	ea4f 75e4 	mov.w	r5, r4, asr #31
 23f1dd0:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
 23f1dd4:	0a00      	lsrs	r0, r0, #8
 23f1dd6:	012d      	lsls	r5, r5, #4
 23f1dd8:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 23f1ddc:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
 23f1de0:	0124      	lsls	r4, r4, #4
 23f1de2:	1820      	adds	r0, r4, r0
  return (float)p / 256;
 23f1de4:	eb45 2121 	adc.w	r1, r5, r1, asr #8
 23f1de8:	f7f5 faf6 	bl	23e73d8 <__aeabi_l2f>
 23f1dec:	ed9f 0a05 	vldr	s0, [pc, #20]	; 23f1e04 <_ZN15Adafruit_BMP28012readPressureEv+0x188>
 23f1df0:	ee07 0a90 	vmov	s15, r0
 23f1df4:	ee27 0a80 	vmul.f32	s0, s15, s0
}
 23f1df8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0; // avoid exception caused by division by zero
 23f1dfc:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23f1e08 <_ZN15Adafruit_BMP28012readPressureEv+0x18c>
 23f1e00:	e7fa      	b.n	23f1df8 <_ZN15Adafruit_BMP28012readPressureEv+0x17c>
 23f1e02:	bf00      	nop
 23f1e04:	3b800000 	.word	0x3b800000
 23f1e08:	00000000 	.word	0x00000000

023f1e0c <_ZN24Adafruit_BMP280_Pressure8getEventEP15sensors_event_t>:
    @brief  Gets the pressure as a standard sensor event
    @param  event Sensor event object that will be populated
    @returns True
*/
/**************************************************************************/
bool Adafruit_BMP280_Pressure::getEvent(sensors_event_t *event) {
 23f1e0c:	b538      	push	{r3, r4, r5, lr}
 23f1e0e:	460c      	mov	r4, r1
 23f1e10:	4605      	mov	r5, r0
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 23f1e12:	2220      	movs	r2, #32
 23f1e14:	2100      	movs	r1, #0
 23f1e16:	1d20      	adds	r0, r4, #4
 23f1e18:	f00b f815 	bl	23fce46 <memset>

  event->version = sizeof(sensors_event_t);
 23f1e1c:	2324      	movs	r3, #36	; 0x24
 23f1e1e:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
 23f1e20:	68ab      	ldr	r3, [r5, #8]
 23f1e22:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_PRESSURE;
 23f1e24:	2306      	movs	r3, #6
 23f1e26:	60a3      	str	r3, [r4, #8]
 23f1e28:	f005 fc20 	bl	23f766c <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
 23f1e2c:	6120      	str	r0, [r4, #16]
  event->pressure = _theBMP280->readPressure() / 100; // convert Pa to hPa
 23f1e2e:	68e8      	ldr	r0, [r5, #12]
 23f1e30:	f7ff ff24 	bl	23f1c7c <_ZN15Adafruit_BMP28012readPressureEv>
 23f1e34:	ed9f 7a03 	vldr	s14, [pc, #12]	; 23f1e44 <_ZN24Adafruit_BMP280_Pressure8getEventEP15sensors_event_t+0x38>
 23f1e38:	eec0 7a07 	vdiv.f32	s15, s0, s14
  return true;
}
 23f1e3c:	2001      	movs	r0, #1
  event->pressure = _theBMP280->readPressure() / 100; // convert Pa to hPa
 23f1e3e:	edc4 7a05 	vstr	s15, [r4, #20]
}
 23f1e42:	bd38      	pop	{r3, r4, r5, pc}
 23f1e44:	42c80000 	.word	0x42c80000

023f1e48 <_ZL9i2c_writehPKhmPv>:
/*!
    @brief  Writes 8 bit values over I2C
*/
/**************************************************************************/
int8_t i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len,
                 void *intf_ptr) {
 23f1e48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Serial.print("I2C write address 0x"); Serial.print(reg_addr, HEX);
  // Serial.print(" len "); Serial.println(len, HEX);

  if (!g_i2c_dev->write((uint8_t *)reg_data, len, true, &reg_addr, 1))
 23f1e4a:	2301      	movs	r3, #1
                 void *intf_ptr) {
 23f1e4c:	f88d 000f 	strb.w	r0, [sp, #15]
  if (!g_i2c_dev->write((uint8_t *)reg_data, len, true, &reg_addr, 1))
 23f1e50:	f10d 000f 	add.w	r0, sp, #15
 23f1e54:	9000      	str	r0, [sp, #0]
 23f1e56:	4805      	ldr	r0, [pc, #20]	; (23f1e6c <_ZL9i2c_writehPKhmPv+0x24>)
 23f1e58:	9301      	str	r3, [sp, #4]
 23f1e5a:	6800      	ldr	r0, [r0, #0]
 23f1e5c:	f000 fa64 	bl	23f2328 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 23f1e60:	f080 0001 	eor.w	r0, r0, #1
    return 1;

  return 0;
}
 23f1e64:	b240      	sxtb	r0, r0
 23f1e66:	b005      	add	sp, #20
 23f1e68:	f85d fb04 	ldr.w	pc, [sp], #4
 23f1e6c:	1007ae68 	.word	0x1007ae68

023f1e70 <_ZL8i2c_readhPhmPv>:
                void *intf_ptr) {
 23f1e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f1e72:	460b      	mov	r3, r1
  if (!g_i2c_dev->write_then_read(&reg_addr, 1, reg_data, len))
 23f1e74:	2100      	movs	r1, #0
 23f1e76:	e9cd 2100 	strd	r2, r1, [sp]
                void *intf_ptr) {
 23f1e7a:	f88d 000f 	strb.w	r0, [sp, #15]
  if (!g_i2c_dev->write_then_read(&reg_addr, 1, reg_data, len))
 23f1e7e:	4806      	ldr	r0, [pc, #24]	; (23f1e98 <_ZL8i2c_readhPhmPv+0x28>)
 23f1e80:	2201      	movs	r2, #1
 23f1e82:	f10d 010f 	add.w	r1, sp, #15
 23f1e86:	6800      	ldr	r0, [r0, #0]
 23f1e88:	f000 faa0 	bl	23f23cc <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
 23f1e8c:	f080 0001 	eor.w	r0, r0, #1
}
 23f1e90:	b240      	sxtb	r0, r0
 23f1e92:	b005      	add	sp, #20
 23f1e94:	f85d fb04 	ldr.w	pc, [sp], #4
 23f1e98:	1007ae68 	.word	0x1007ae68

023f1e9c <_ZL10delay_usecmPv>:
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 23f1e9c:	f005 bbca 	b.w	23f7634 <HAL_Delay_Microseconds>

023f1ea0 <_ZN15Adafruit_BMP3XXC1Ev>:
  _meas_end = 0;
 23f1ea0:	2200      	movs	r2, #0
Adafruit_BMP3XX::Adafruit_BMP3XX(void) {
 23f1ea2:	e9c0 2204 	strd	r2, r2, [r0, #16]
  _meas_end = 0;
 23f1ea6:	6282      	str	r2, [r0, #40]	; 0x28
  _filterEnabled = _tempOSEnabled = _presOSEnabled = false;
 23f1ea8:	8302      	strh	r2, [r0, #24]
 23f1eaa:	7682      	strb	r2, [r0, #26]
}
 23f1eac:	4770      	bx	lr
	...

023f1eb0 <_ZN15Adafruit_BMP3XX5_initEv>:
bool Adafruit_BMP3XX::_init(void) {
 23f1eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
  g_i2c_dev = i2c_dev;
 23f1eb2:	4b2b      	ldr	r3, [pc, #172]	; (23f1f60 <_ZN15Adafruit_BMP3XX5_initEv+0xb0>)
 23f1eb4:	6902      	ldr	r2, [r0, #16]
  rslt = bmp3_soft_reset(&the_sensor);
 23f1eb6:	f100 0730 	add.w	r7, r0, #48	; 0x30
  g_i2c_dev = i2c_dev;
 23f1eba:	601a      	str	r2, [r3, #0]
  g_spi_dev = spi_dev;
 23f1ebc:	6942      	ldr	r2, [r0, #20]
 23f1ebe:	4b29      	ldr	r3, [pc, #164]	; (23f1f64 <_ZN15Adafruit_BMP3XX5_initEv+0xb4>)
bool Adafruit_BMP3XX::_init(void) {
 23f1ec0:	4605      	mov	r5, r0
  g_spi_dev = spi_dev;
 23f1ec2:	601a      	str	r2, [r3, #0]
  the_sensor.delay_us = delay_usec;
 23f1ec4:	4b28      	ldr	r3, [pc, #160]	; (23f1f68 <_ZN15Adafruit_BMP3XX5_initEv+0xb8>)
bool Adafruit_BMP3XX::_init(void) {
 23f1ec6:	b089      	sub	sp, #36	; 0x24
  the_sensor.delay_us = delay_usec;
 23f1ec8:	6443      	str	r3, [r0, #68]	; 0x44
  rslt = bmp3_soft_reset(&the_sensor);
 23f1eca:	4638      	mov	r0, r7
 23f1ecc:	f7f6 f814 	bl	23e7ef8 <bmp3_soft_reset>
  if (rslt != BMP3_OK)
 23f1ed0:	b110      	cbz	r0, 23f1ed8 <_ZN15Adafruit_BMP3XX5_initEv+0x28>
    return false;
 23f1ed2:	2000      	movs	r0, #0
}
 23f1ed4:	b009      	add	sp, #36	; 0x24
 23f1ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  rslt = bmp3_init(&the_sensor);
 23f1ed8:	4638      	mov	r0, r7
 23f1eda:	f7f6 f84b 	bl	23e7f74 <bmp3_init>
  uint8_t crc = 0xFF;
  uint8_t stored_crc;
  uint8_t trim_param[21];
  uint8_t i;

  rslt = bmp3_get_regs(BMP3_REG_CALIB_DATA, trim_param, 21, dev);
 23f1ede:	2215      	movs	r2, #21
 23f1ee0:	463b      	mov	r3, r7
 23f1ee2:	2031      	movs	r0, #49	; 0x31
 23f1ee4:	a902      	add	r1, sp, #8
 23f1ee6:	f7f5 fe2d 	bl	23e7b44 <bmp3_get_regs>
  if (rslt == BMP3_OK) {
 23f1eea:	4602      	mov	r2, r0
 23f1eec:	2800      	cmp	r0, #0
 23f1eee:	d1f0      	bne.n	23f1ed2 <_ZN15Adafruit_BMP3XX5_initEv+0x22>
  uint8_t crc = 0xFF;
 23f1ef0:	24ff      	movs	r4, #255	; 0xff
 23f1ef2:	a902      	add	r1, sp, #8
    for (i = 0; i < 21; i++) {
      crc = (uint8_t)cal_crc(crc, trim_param[i]);
 23f1ef4:	2608      	movs	r6, #8
 23f1ef6:	f811 3b01 	ldrb.w	r3, [r1], #1
  int8_t poly = 0x1D;
  int8_t var2;
  uint8_t i;

  for (i = 0; i < 8; i++) {
    if ((seed & 0x80) ^ (data & 0x80)) {
 23f1efa:	ea84 0003 	eor.w	r0, r4, r3
      var2 = 0;
    }

    seed = (seed & 0x7F) << 1;
    data = (data & 0x7F) << 1;
    seed = seed ^ (uint8_t)(poly * var2);
 23f1efe:	f010 0f80 	tst.w	r0, #128	; 0x80
 23f1f02:	bf14      	ite	ne
 23f1f04:	201d      	movne	r0, #29
 23f1f06:	2000      	moveq	r0, #0
    seed = (seed & 0x7F) << 1;
 23f1f08:	0064      	lsls	r4, r4, #1
  for (i = 0; i < 8; i++) {
 23f1f0a:	3e01      	subs	r6, #1
    seed = (seed & 0x7F) << 1;
 23f1f0c:	b2e4      	uxtb	r4, r4
    data = (data & 0x7F) << 1;
 23f1f0e:	005b      	lsls	r3, r3, #1
  for (i = 0; i < 8; i++) {
 23f1f10:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    data = (data & 0x7F) << 1;
 23f1f14:	b2db      	uxtb	r3, r3
    seed = seed ^ (uint8_t)(poly * var2);
 23f1f16:	ea84 0400 	eor.w	r4, r4, r0
  for (i = 0; i < 8; i++) {
 23f1f1a:	d1ee      	bne.n	23f1efa <_ZN15Adafruit_BMP3XX5_initEv+0x4a>
    for (i = 0; i < 21; i++) {
 23f1f1c:	3201      	adds	r2, #1
 23f1f1e:	b2d2      	uxtb	r2, r2
 23f1f20:	2a15      	cmp	r2, #21
 23f1f22:	d1e7      	bne.n	23f1ef4 <_ZN15Adafruit_BMP3XX5_initEv+0x44>
    crc = (crc ^ 0xFF);
 23f1f24:	43e4      	mvns	r4, r4
    rslt = bmp3_get_regs(0x30, &stored_crc, 1, dev);
 23f1f26:	463b      	mov	r3, r7
 23f1f28:	2201      	movs	r2, #1
 23f1f2a:	2030      	movs	r0, #48	; 0x30
 23f1f2c:	f10d 0107 	add.w	r1, sp, #7
 23f1f30:	f7f5 fe08 	bl	23e7b44 <bmp3_get_regs>
    if (stored_crc != crc) {
 23f1f34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23f1f38:	b2e4      	uxtb	r4, r4
 23f1f3a:	42a3      	cmp	r3, r4
 23f1f3c:	d1c9      	bne.n	23f1ed2 <_ZN15Adafruit_BMP3XX5_initEv+0x22>
  if (rslt != BMP3_OK)
 23f1f3e:	2800      	cmp	r0, #0
 23f1f40:	d1c7      	bne.n	23f1ed2 <_ZN15Adafruit_BMP3XX5_initEv+0x22>
  the_sensor.settings.odr_filter.odr = odr;
 23f1f42:	2303      	movs	r3, #3
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 23f1f44:	2001      	movs	r0, #1
  the_sensor.settings.odr_filter.odr = odr;
 23f1f46:	f885 30e6 	strb.w	r3, [r5, #230]	; 0xe6
    _filterEnabled = false;
 23f1f4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  the_sensor.settings.odr_filter.press_os = oversample;
 23f1f4e:	f885 60e3 	strb.w	r6, [r5, #227]	; 0xe3
  the_sensor.settings.odr_filter.temp_os = oversample;
 23f1f52:	f8a5 60e4 	strh.w	r6, [r5, #228]	; 0xe4
    _filterEnabled = false;
 23f1f56:	61ab      	str	r3, [r5, #24]
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 23f1f58:	f885 00e0 	strb.w	r0, [r5, #224]	; 0xe0
  return true;
 23f1f5c:	e7ba      	b.n	23f1ed4 <_ZN15Adafruit_BMP3XX5_initEv+0x24>
 23f1f5e:	bf00      	nop
 23f1f60:	1007ae68 	.word	0x1007ae68
 23f1f64:	1007ae6c 	.word	0x1007ae6c
 23f1f68:	023f1e9d 	.word	0x023f1e9d

023f1f6c <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>:
bool Adafruit_BMP3XX::begin_I2C(uint8_t addr, TwoWire *theWire) {
 23f1f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f1f6e:	4604      	mov	r4, r0
  if (i2c_dev)
 23f1f70:	6900      	ldr	r0, [r0, #16]
bool Adafruit_BMP3XX::begin_I2C(uint8_t addr, TwoWire *theWire) {
 23f1f72:	460e      	mov	r6, r1
 23f1f74:	4617      	mov	r7, r2
  if (i2c_dev)
 23f1f76:	b110      	cbz	r0, 23f1f7e <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x12>
    delete i2c_dev;
 23f1f78:	2110      	movs	r1, #16
 23f1f7a:	f7f5 fc7e 	bl	23e787a <_ZdlPvj>
  if (spi_dev)
 23f1f7e:	6965      	ldr	r5, [r4, #20]
 23f1f80:	b135      	cbz	r5, 23f1f90 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x24>
    delete spi_dev;
 23f1f82:	4628      	mov	r0, r5
 23f1f84:	f000 fa39 	bl	23f23fa <_ZN18Adafruit_SPIDeviceD1Ev>
 23f1f88:	2138      	movs	r1, #56	; 0x38
 23f1f8a:	4628      	mov	r0, r5
 23f1f8c:	f7f5 fc75 	bl	23e787a <_ZdlPvj>
  spi_dev = NULL;
 23f1f90:	2300      	movs	r3, #0
  g_i2c_dev = i2c_dev = new Adafruit_I2CDevice(addr, theWire);
 23f1f92:	2010      	movs	r0, #16
  spi_dev = NULL;
 23f1f94:	6163      	str	r3, [r4, #20]
  g_i2c_dev = i2c_dev = new Adafruit_I2CDevice(addr, theWire);
 23f1f96:	f7f5 fc6c 	bl	23e7872 <_Znwj>
 23f1f9a:	4605      	mov	r5, r0
 23f1f9c:	b118      	cbz	r0, 23f1fa6 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x3a>
 23f1f9e:	463a      	mov	r2, r7
 23f1fa0:	4631      	mov	r1, r6
 23f1fa2:	f000 f996 	bl	23f22d2 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
 23f1fa6:	4f0e      	ldr	r7, [pc, #56]	; (23f1fe0 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x74>)
  if (!i2c_dev->begin()) {
 23f1fa8:	2101      	movs	r1, #1
 23f1faa:	4628      	mov	r0, r5
  g_i2c_dev = i2c_dev = new Adafruit_I2CDevice(addr, theWire);
 23f1fac:	6125      	str	r5, [r4, #16]
 23f1fae:	603d      	str	r5, [r7, #0]
  if (!i2c_dev->begin()) {
 23f1fb0:	f000 f9ab 	bl	23f230a <_ZN18Adafruit_I2CDevice5beginEb>
 23f1fb4:	b190      	cbz	r0, 23f1fdc <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x70>
  the_sensor.intf = BMP3_I2C_INTF;
 23f1fb6:	2301      	movs	r3, #1
 23f1fb8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  the_sensor.read = &i2c_read;
 23f1fbc:	4b09      	ldr	r3, [pc, #36]	; (23f1fe4 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x78>)
  return _init();
 23f1fbe:	4620      	mov	r0, r4
  the_sensor.read = &i2c_read;
 23f1fc0:	63e3      	str	r3, [r4, #60]	; 0x3c
  the_sensor.write = &i2c_write;
 23f1fc2:	4b09      	ldr	r3, [pc, #36]	; (23f1fe8 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x7c>)
  the_sensor.chip_id = addr;
 23f1fc4:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  the_sensor.write = &i2c_write;
 23f1fc8:	6423      	str	r3, [r4, #64]	; 0x40
  the_sensor.intf_ptr = g_i2c_dev;
 23f1fca:	683b      	ldr	r3, [r7, #0]
 23f1fcc:	6363      	str	r3, [r4, #52]	; 0x34
  the_sensor.dummy_byte = 0;
 23f1fce:	2300      	movs	r3, #0
 23f1fd0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 23f1fd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return _init();
 23f1fd8:	f7ff bf6a 	b.w	23f1eb0 <_ZN15Adafruit_BMP3XX5_initEv>
}
 23f1fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f1fde:	bf00      	nop
 23f1fe0:	1007ae68 	.word	0x1007ae68
 23f1fe4:	023f1e71 	.word	0x023f1e71
 23f1fe8:	023f1e49 	.word	0x023f1e49

023f1fec <_ZN15Adafruit_BMP3XX14performReadingEv>:
bool Adafruit_BMP3XX::performReading(void) {
 23f1fec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  g_i2c_dev = i2c_dev;
 23f1fee:	4b21      	ldr	r3, [pc, #132]	; (23f2074 <_ZN15Adafruit_BMP3XX14performReadingEv+0x88>)
 23f1ff0:	6902      	ldr	r2, [r0, #16]
bool Adafruit_BMP3XX::performReading(void) {
 23f1ff2:	4604      	mov	r4, r0
  g_i2c_dev = i2c_dev;
 23f1ff4:	601a      	str	r2, [r3, #0]
  g_spi_dev = spi_dev;
 23f1ff6:	6942      	ldr	r2, [r0, #20]
 23f1ff8:	4b1f      	ldr	r3, [pc, #124]	; (23f2078 <_ZN15Adafruit_BMP3XX14performReadingEv+0x8c>)
 23f1ffa:	601a      	str	r2, [r3, #0]
  the_sensor.settings.temp_en = BMP3_ENABLE;
 23f1ffc:	2301      	movs	r3, #1
  if (_tempOSEnabled) {
 23f1ffe:	7e42      	ldrb	r2, [r0, #25]
  the_sensor.settings.temp_en = BMP3_ENABLE;
 23f2000:	f880 30e2 	strb.w	r3, [r0, #226]	; 0xe2
  the_sensor.settings.press_en = BMP3_ENABLE;
 23f2004:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
  if (_presOSEnabled) {
 23f2008:	7ea3      	ldrb	r3, [r4, #26]
    settings_sel |= BMP3_SEL_TEMP_OS;
 23f200a:	2a00      	cmp	r2, #0
 23f200c:	bf0c      	ite	eq
 23f200e:	2004      	moveq	r0, #4
 23f2010:	2024      	movne	r0, #36	; 0x24
  if (_presOSEnabled) {
 23f2012:	b993      	cbnz	r3, 23f203a <_ZN15Adafruit_BMP3XX14performReadingEv+0x4e>
  settings_sel |= BMP3_SEL_PRESS_EN;
 23f2014:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled) {
 23f2018:	7e23      	ldrb	r3, [r4, #24]
 23f201a:	b10b      	cbz	r3, 23f2020 <_ZN15Adafruit_BMP3XX14performReadingEv+0x34>
    settings_sel |= BMP3_SEL_IIR_FILTER;
 23f201c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  if (_ODREnabled) {
 23f2020:	7ee3      	ldrb	r3, [r4, #27]
 23f2022:	b10b      	cbz	r3, 23f2028 <_ZN15Adafruit_BMP3XX14performReadingEv+0x3c>
    settings_sel |= BMP3_SEL_ODR;
 23f2024:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  rslt = bmp3_set_sensor_settings(settings_sel, &the_sensor);
 23f2028:	f104 0630 	add.w	r6, r4, #48	; 0x30
 23f202c:	4631      	mov	r1, r6
 23f202e:	f7f5 fe35 	bl	23e7c9c <bmp3_set_sensor_settings>
  if (rslt != BMP3_OK)
 23f2032:	b128      	cbz	r0, 23f2040 <_ZN15Adafruit_BMP3XX14performReadingEv+0x54>
    return false;
 23f2034:	2000      	movs	r0, #0
}
 23f2036:	b004      	add	sp, #16
 23f2038:	bd70      	pop	{r4, r5, r6, pc}
    settings_sel |= BMP3_SEL_PRESS_OS;
 23f203a:	f040 0012 	orr.w	r0, r0, #18
 23f203e:	e7eb      	b.n	23f2018 <_ZN15Adafruit_BMP3XX14performReadingEv+0x2c>
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 23f2040:	2501      	movs	r5, #1
  rslt = bmp3_set_op_mode(&the_sensor);
 23f2042:	4630      	mov	r0, r6
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 23f2044:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
  rslt = bmp3_set_op_mode(&the_sensor);
 23f2048:	f7f6 f8ab 	bl	23e81a2 <bmp3_set_op_mode>
  if (rslt != BMP3_OK)
 23f204c:	2800      	cmp	r0, #0
 23f204e:	d1f1      	bne.n	23f2034 <_ZN15Adafruit_BMP3XX14performReadingEv+0x48>
  rslt = bmp3_get_sensor_data(sensor_comp, &data, &the_sensor);
 23f2050:	4632      	mov	r2, r6
 23f2052:	4669      	mov	r1, sp
 23f2054:	2003      	movs	r0, #3
 23f2056:	f7f6 f919 	bl	23e828c <bmp3_get_sensor_data>
  if (rslt != BMP3_OK)
 23f205a:	2800      	cmp	r0, #0
 23f205c:	d1ea      	bne.n	23f2034 <_ZN15Adafruit_BMP3XX14performReadingEv+0x48>
  temperature = data.temperature;
 23f205e:	e9dd 2300 	ldrd	r2, r3, [sp]
  return true;
 23f2062:	4628      	mov	r0, r5
  temperature = data.temperature;
 23f2064:	e9c4 2300 	strd	r2, r3, [r4]
  pressure = data.pressure;
 23f2068:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23f206c:	e9c4 2302 	strd	r2, r3, [r4, #8]
  return true;
 23f2070:	e7e1      	b.n	23f2036 <_ZN15Adafruit_BMP3XX14performReadingEv+0x4a>
 23f2072:	bf00      	nop
 23f2074:	1007ae68 	.word	0x1007ae68
 23f2078:	1007ae6c 	.word	0x1007ae6c

023f207c <_ZN15Adafruit_BMP3XX15readTemperatureEv>:
float Adafruit_BMP3XX::readTemperature(void) {
 23f207c:	b510      	push	{r4, lr}
 23f207e:	4604      	mov	r4, r0
  performReading();
 23f2080:	f7ff ffb4 	bl	23f1fec <_ZN15Adafruit_BMP3XX14performReadingEv>
  return temperature;
 23f2084:	e9d4 0100 	ldrd	r0, r1, [r4]
 23f2088:	f7f5 f886 	bl	23e7198 <__aeabi_d2f>
}
 23f208c:	ee00 0a10 	vmov	s0, r0
 23f2090:	bd10      	pop	{r4, pc}

023f2092 <_ZN15Adafruit_BMP3XX12readPressureEv>:
float Adafruit_BMP3XX::readPressure(void) {
 23f2092:	b510      	push	{r4, lr}
 23f2094:	4604      	mov	r4, r0
  performReading();
 23f2096:	f7ff ffa9 	bl	23f1fec <_ZN15Adafruit_BMP3XX14performReadingEv>
  return pressure;
 23f209a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23f209e:	f7f5 f87b 	bl	23e7198 <__aeabi_d2f>
}
 23f20a2:	ee00 0a10 	vmov	s0, r0
 23f20a6:	bd10      	pop	{r4, pc}

023f20a8 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
 23f20a8:	b530      	push	{r4, r5, lr}
                                                 uint16_t reg_addr,
                                                 uint8_t width,
                                                 uint8_t byteorder,
                                                 uint8_t address_width) {
 23f20aa:	2500      	movs	r5, #0
  _i2cdevice = i2cdevice;
  _spidevice = NULL;
  _addrwidth = address_width;
  _address = reg_addr;
 23f20ac:	8142      	strh	r2, [r0, #10]
  _spidevice = NULL;
 23f20ae:	e9c0 1500 	strd	r1, r5, [r0]
  _byteorder = byteorder;
 23f20b2:	f89d 200c 	ldrb.w	r2, [sp, #12]
  _addrwidth = address_width;
 23f20b6:	f89d 1010 	ldrb.w	r1, [sp, #16]
                                                 uint8_t address_width) {
 23f20ba:	6145      	str	r5, [r0, #20]
  _addrwidth = address_width;
 23f20bc:	7341      	strb	r1, [r0, #13]
  _byteorder = byteorder;
 23f20be:	7382      	strb	r2, [r0, #14]
  _width = width;
 23f20c0:	7303      	strb	r3, [r0, #12]
}
 23f20c2:	bd30      	pop	{r4, r5, pc}

023f20c4 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(
 23f20c4:	b530      	push	{r4, r5, lr}
    Adafruit_I2CDevice *i2cdevice, Adafruit_SPIDevice *spidevice,
    Adafruit_BusIO_SPIRegType type, uint16_t reg_addr, uint8_t width,
    uint8_t byteorder, uint8_t address_width) {
 23f20c6:	2500      	movs	r5, #0
  _spidevice = spidevice;
  _i2cdevice = i2cdevice;
  _spiregtype = type;
 23f20c8:	7203      	strb	r3, [r0, #8]
  _addrwidth = address_width;
 23f20ca:	f89d 3018 	ldrb.w	r3, [sp, #24]
  _i2cdevice = i2cdevice;
 23f20ce:	e9c0 1200 	strd	r1, r2, [r0]
  _addrwidth = address_width;
 23f20d2:	7343      	strb	r3, [r0, #13]
  _address = reg_addr;
 23f20d4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    uint8_t byteorder, uint8_t address_width) {
 23f20d8:	6145      	str	r5, [r0, #20]
  _address = reg_addr;
 23f20da:	8143      	strh	r3, [r0, #10]
  _byteorder = byteorder;
 23f20dc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23f20e0:	7383      	strb	r3, [r0, #14]
  _width = width;
 23f20e2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 23f20e6:	7303      	strb	r3, [r0, #12]
}
 23f20e8:	bd30      	pop	{r4, r5, pc}

023f20ea <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
 23f20ea:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
 23f20ec:	8945      	ldrh	r5, [r0, #10]
                           (uint8_t)(_address >> 8)};
 23f20ee:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
 23f20f0:	4603      	mov	r3, r0

  if (_i2cdevice) {
 23f20f2:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
 23f20f4:	b085      	sub	sp, #20
                           (uint8_t)(_address >> 8)};
 23f20f6:	0a2d      	lsrs	r5, r5, #8
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
 23f20f8:	460e      	mov	r6, r1
 23f20fa:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
 23f20fc:	f88d 400c 	strb.w	r4, [sp, #12]
 23f2100:	f88d 500d 	strb.w	r5, [sp, #13]
  if (_i2cdevice) {
 23f2104:	b140      	cbz	r0, 23f2118 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2e>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
 23f2106:	7b5b      	ldrb	r3, [r3, #13]
 23f2108:	9301      	str	r3, [sp, #4]
 23f210a:	ab03      	add	r3, sp, #12
 23f210c:	9300      	str	r3, [sp, #0]
 23f210e:	2301      	movs	r3, #1
 23f2110:	f000 f90a 	bl	23f2328 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
 23f2114:	b005      	add	sp, #20
 23f2116:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
 23f2118:	6858      	ldr	r0, [r3, #4]
 23f211a:	2800      	cmp	r0, #0
 23f211c:	d0fa      	beq.n	23f2114 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
 23f211e:	f893 e008 	ldrb.w	lr, [r3, #8]
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
 23f2122:	f893 c00d 	ldrb.w	ip, [r3, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
 23f2126:	f1be 0f03 	cmp.w	lr, #3
 23f212a:	d10c      	bne.n	23f2146 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5c>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
 23f212c:	f10c 0301 	add.w	r3, ip, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
 23f2130:	f025 0501 	bic.w	r5, r5, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
 23f2134:	9300      	str	r3, [sp, #0]
      addrbuffer[0] =
 23f2136:	f88d 500c 	strb.w	r5, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
 23f213a:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
 23f213e:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
 23f2140:	f000 fa15 	bl	23f256e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
 23f2144:	e7e6      	b.n	23f2114 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
 23f2146:	f1be 0f00 	cmp.w	lr, #0
 23f214a:	d109      	bne.n	23f2160 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x76>
      addrbuffer[0] &= ~0x80;
 23f214c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
 23f2150:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
 23f2154:	463a      	mov	r2, r7
 23f2156:	4631      	mov	r1, r6
 23f2158:	f8cd c000 	str.w	ip, [sp]
 23f215c:	ab03      	add	r3, sp, #12
 23f215e:	e7ef      	b.n	23f2140 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
 23f2160:	f1be 0f02 	cmp.w	lr, #2
 23f2164:	d102      	bne.n	23f216c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x82>
      addrbuffer[0] |= 0x80;
 23f2166:	f064 047f 	orn	r4, r4, #127	; 0x7f
 23f216a:	e7f1      	b.n	23f2150 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x66>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
 23f216c:	f1be 0f01 	cmp.w	lr, #1
      addrbuffer[0] &= ~0x80;
 23f2170:	bf01      	itttt	eq
 23f2172:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 23f2176:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
 23f217a:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 23f217e:	f88d 300c 	strbeq.w	r3, [sp, #12]
 23f2182:	e7e7      	b.n	23f2154 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6a>

023f2184 <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
 23f2184:	460b      	mov	r3, r1
 23f2186:	b4f0      	push	{r4, r5, r6, r7}
  if (numbytes == 0) {
 23f2188:	b902      	cbnz	r2, 23f218c <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
 23f218a:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
 23f218c:	2a04      	cmp	r2, #4
 23f218e:	d814      	bhi.n	23f21ba <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
 23f2190:	f100 050f 	add.w	r5, r0, #15
 23f2194:	4629      	mov	r1, r5
 23f2196:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
 23f2198:	1884      	adds	r4, r0, r2
 23f219a:	4284      	cmp	r4, r0
 23f219c:	d009      	beq.n	23f21b2 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
 23f219e:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
 23f21a0:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
 23f21a2:	b927      	cbnz	r7, 23f21ae <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
 23f21a4:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
 23f21a6:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
 23f21a8:	3501      	adds	r5, #1
 23f21aa:	3c01      	subs	r4, #1
 23f21ac:	e7f5      	b.n	23f219a <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
 23f21ae:	73a6      	strb	r6, [r4, #14]
 23f21b0:	e7f9      	b.n	23f21a6 <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
 23f21b2:	4620      	mov	r0, r4
}
 23f21b4:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
 23f21b6:	f7ff bf98 	b.w	23f20ea <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
 23f21ba:	2000      	movs	r0, #0
 23f21bc:	bcf0      	pop	{r4, r5, r6, r7}
 23f21be:	4770      	bx	lr

023f21c0 <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
 23f21c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
 23f21c2:	8946      	ldrh	r6, [r0, #10]
                           (uint8_t)(_address >> 8)};
 23f21c4:	7a85      	ldrb	r5, [r0, #10]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
 23f21c6:	4604      	mov	r4, r0

  if (_i2cdevice) {
 23f21c8:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
 23f21ca:	0a36      	lsrs	r6, r6, #8
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
 23f21cc:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
 23f21ce:	f88d 500c 	strb.w	r5, [sp, #12]
 23f21d2:	f88d 600d 	strb.w	r6, [sp, #13]
  if (_i2cdevice) {
 23f21d6:	b140      	cbz	r0, 23f21ea <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
 23f21d8:	2100      	movs	r1, #0
 23f21da:	e9cd 2100 	strd	r2, r1, [sp]
 23f21de:	a903      	add	r1, sp, #12
 23f21e0:	7b62      	ldrb	r2, [r4, #13]
 23f21e2:	f000 f8f3 	bl	23f23cc <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
 23f21e6:	b004      	add	sp, #16
 23f21e8:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
 23f21ea:	6860      	ldr	r0, [r4, #4]
 23f21ec:	2800      	cmp	r0, #0
 23f21ee:	d0fa      	beq.n	23f21e6 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
 23f21f0:	7a21      	ldrb	r1, [r4, #8]
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
 23f21f2:	7b64      	ldrb	r4, [r4, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
 23f21f4:	2903      	cmp	r1, #3
 23f21f6:	d10d      	bne.n	23f2214 <_ZN23Adafruit_BusIO_Register4readEPhh+0x54>
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
 23f21f8:	21ff      	movs	r1, #255	; 0xff
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
 23f21fa:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
 23f21fe:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
 23f2202:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
 23f2206:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
 23f220a:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
 23f220c:	a903      	add	r1, sp, #12
 23f220e:	f000 f9e0 	bl	23f25d2 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
 23f2212:	e7e8      	b.n	23f21e6 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
 23f2214:	b941      	cbnz	r1, 23f2228 <_ZN23Adafruit_BusIO_Register4readEPhh+0x68>
      addrbuffer[0] |= 0x80;
 23f2216:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
 23f221a:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
 23f221e:	21ff      	movs	r1, #255	; 0xff
 23f2220:	e9cd 2100 	strd	r2, r1, [sp]
 23f2224:	4622      	mov	r2, r4
 23f2226:	e7f1      	b.n	23f220c <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
 23f2228:	2902      	cmp	r1, #2
 23f222a:	d102      	bne.n	23f2232 <_ZN23Adafruit_BusIO_Register4readEPhh+0x72>
      addrbuffer[0] &= ~0x80;
 23f222c:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 23f2230:	e7f3      	b.n	23f221a <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
 23f2232:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
 23f2234:	bf02      	ittt	eq
 23f2236:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
 23f223a:	f061 013f 	orneq	r1, r1, #63	; 0x3f
 23f223e:	f88d 100c 	strbeq.w	r1, [sp, #12]
 23f2242:	e7ec      	b.n	23f221e <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>

023f2244 <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
 23f2244:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
 23f2246:	f100 050f 	add.w	r5, r0, #15
 23f224a:	4629      	mov	r1, r5
 23f224c:	7b02      	ldrb	r2, [r0, #12]
uint32_t Adafruit_BusIO_Register::read(void) {
 23f224e:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
 23f2250:	f7ff ffb6 	bl	23f21c0 <_ZN23Adafruit_BusIO_Register4readEPhh>
 23f2254:	b178      	cbz	r0, 23f2276 <_ZN23Adafruit_BusIO_Register4readEv+0x32>
 23f2256:	4629      	mov	r1, r5
  uint32_t value = 0;
 23f2258:	2000      	movs	r0, #0
 23f225a:	7b22      	ldrb	r2, [r4, #12]
 23f225c:	4422      	add	r2, r4
  for (int i = 0; i < _width; i++) {
 23f225e:	42a2      	cmp	r2, r4
 23f2260:	d00b      	beq.n	23f227a <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
 23f2262:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
 23f2264:	7ba0      	ldrb	r0, [r4, #14]
 23f2266:	b920      	cbnz	r0, 23f2272 <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
 23f2268:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
 23f226a:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
 23f226c:	3a01      	subs	r2, #1
 23f226e:	3101      	adds	r1, #1
 23f2270:	e7f5      	b.n	23f225e <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
 23f2272:	7808      	ldrb	r0, [r1, #0]
 23f2274:	e7f9      	b.n	23f226a <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
 23f2276:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23f227a:	bd38      	pop	{r3, r4, r5, pc}

023f227c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
 23f227c:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
 23f227e:	6001      	str	r1, [r0, #0]
  _bits = bits;
 23f2280:	7102      	strb	r2, [r0, #4]
  _shift = shift;
 23f2282:	7143      	strb	r3, [r0, #5]
}
 23f2284:	bd10      	pop	{r4, pc}

023f2286 <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
 23f2286:	b510      	push	{r4, lr}
 23f2288:	4604      	mov	r4, r0
  uint32_t val = _register->read();
 23f228a:	6800      	ldr	r0, [r0, #0]
 23f228c:	f7ff ffda 	bl	23f2244 <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
 23f2290:	2301      	movs	r3, #1
 23f2292:	7922      	ldrb	r2, [r4, #4]
 23f2294:	4093      	lsls	r3, r2
  val >>= _shift;
 23f2296:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
 23f2298:	3b01      	subs	r3, #1
  val >>= _shift;
 23f229a:	40d0      	lsrs	r0, r2
}
 23f229c:	4018      	ands	r0, r3
 23f229e:	bd10      	pop	{r4, pc}

023f22a0 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
 23f22a0:	b570      	push	{r4, r5, r6, lr}
 23f22a2:	4604      	mov	r4, r0
  uint32_t val = _register->read();
 23f22a4:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
 23f22a6:	460e      	mov	r6, r1
  uint32_t val = _register->read();
 23f22a8:	f7ff ffcc 	bl	23f2244 <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
 23f22ac:	2201      	movs	r2, #1
 23f22ae:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
 23f22b0:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits)) - 1;
 23f22b2:	409a      	lsls	r2, r3
 23f22b4:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
 23f22b6:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;          // remove the current data at that spot
 23f22ba:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
 23f22be:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
 23f22c0:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
 23f22c2:	fa03 f101 	lsl.w	r1, r3, r1
  return _register->write(val, _register->width());
 23f22c6:	4329      	orrs	r1, r5
 23f22c8:	7b02      	ldrb	r2, [r0, #12]
}
 23f22ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
 23f22ce:	f7ff bf59 	b.w	23f2184 <_ZN23Adafruit_BusIO_Register5writeEmh>

023f22d2 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
 23f22d2:	6042      	str	r2, [r0, #4]
  _begun = false;
 23f22d4:	2200      	movs	r2, #0
 23f22d6:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
 23f22d8:	2220      	movs	r2, #32
  _addr = addr;
 23f22da:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
 23f22dc:	60c2      	str	r2, [r0, #12]
#endif
}
 23f22de:	4770      	bx	lr

023f22e0 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
 23f22e0:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
 23f22e2:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
 23f22e4:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
 23f22e6:	b153      	cbz	r3, 23f22fe <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
 23f22e8:	7821      	ldrb	r1, [r4, #0]
 23f22ea:	6860      	ldr	r0, [r4, #4]
 23f22ec:	f006 fe0c 	bl	23f8f08 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
 23f22f0:	6860      	ldr	r0, [r4, #4]
 23f22f2:	f006 fe14 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>
 23f22f6:	fab0 f080 	clz	r0, r0
 23f22fa:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
 23f22fc:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
 23f22fe:	2101      	movs	r1, #1
 23f2300:	f000 f803 	bl	23f230a <_ZN18Adafruit_I2CDevice5beginEb>
 23f2304:	2800      	cmp	r0, #0
 23f2306:	d1ef      	bne.n	23f22e8 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
 23f2308:	e7f8      	b.n	23f22fc <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

023f230a <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 23f230a:	b538      	push	{r3, r4, r5, lr}
 23f230c:	4604      	mov	r4, r0
  _wire->begin();
 23f230e:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 23f2310:	460d      	mov	r5, r1
  _wire->begin();
 23f2312:	f006 fdcf 	bl	23f8eb4 <_ZN7TwoWire5beginEv>
  _begun = true;
 23f2316:	2001      	movs	r0, #1
 23f2318:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
 23f231a:	b125      	cbz	r5, 23f2326 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
 23f231c:	4620      	mov	r0, r4
}
 23f231e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
 23f2322:	f7ff bfdd 	b.w	23f22e0 <_ZN18Adafruit_I2CDevice8detectedEv>
}
 23f2326:	bd38      	pop	{r3, r4, r5, pc}

023f2328 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
 23f2328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23f232c:	461f      	mov	r7, r3
 23f232e:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
  if ((len + prefix_len) > maxBufferSize()) {
 23f2332:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
 23f2334:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
 23f2336:	4432      	add	r2, r6
 23f2338:	429a      	cmp	r2, r3
                               size_t prefix_len) {
 23f233a:	4604      	mov	r4, r0
 23f233c:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
 23f233e:	d902      	bls.n	23f2346 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
 23f2340:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("Failed to send!");
#endif
    return false;
  }
}
 23f2342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
 23f2346:	7801      	ldrb	r1, [r0, #0]
 23f2348:	6840      	ldr	r0, [r0, #4]
 23f234a:	f006 fddd 	bl	23f8f08 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
 23f234e:	b97e      	cbnz	r6, 23f2370 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
 23f2350:	6860      	ldr	r0, [r4, #4]
 23f2352:	462a      	mov	r2, r5
 23f2354:	6803      	ldr	r3, [r0, #0]
 23f2356:	4641      	mov	r1, r8
 23f2358:	68db      	ldr	r3, [r3, #12]
 23f235a:	4798      	blx	r3
 23f235c:	4285      	cmp	r5, r0
 23f235e:	d1ef      	bne.n	23f2340 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
 23f2360:	4639      	mov	r1, r7
 23f2362:	6860      	ldr	r0, [r4, #4]
 23f2364:	f006 fdd7 	bl	23f8f16 <_ZN7TwoWire15endTransmissionEh>
 23f2368:	fab0 f080 	clz	r0, r0
 23f236c:	0940      	lsrs	r0, r0, #5
 23f236e:	e7e8      	b.n	23f2342 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
 23f2370:	f1b9 0f00 	cmp.w	r9, #0
 23f2374:	d0ec      	beq.n	23f2350 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
 23f2376:	6860      	ldr	r0, [r4, #4]
 23f2378:	4632      	mov	r2, r6
 23f237a:	6803      	ldr	r3, [r0, #0]
 23f237c:	4649      	mov	r1, r9
 23f237e:	68db      	ldr	r3, [r3, #12]
 23f2380:	4798      	blx	r3
 23f2382:	4286      	cmp	r6, r0
 23f2384:	d1dc      	bne.n	23f2340 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
 23f2386:	e7e3      	b.n	23f2350 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

023f2388 <_ZN18Adafruit_I2CDevice4readEPhjb>:
 *    @param  buffer Pointer to buffer of data to read into
 *    @param  len Number of bytes from buffer to read.
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
 23f2388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f238c:	4615      	mov	r5, r2
  if (len > maxBufferSize()) {
 23f238e:	68c2      	ldr	r2, [r0, #12]
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
 23f2390:	4604      	mov	r4, r0
  if (len > maxBufferSize()) {
 23f2392:	42aa      	cmp	r2, r5
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
 23f2394:	460e      	mov	r6, r1
  if (len > maxBufferSize()) {
 23f2396:	d314      	bcc.n	23f23c2 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
  }

#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
 23f2398:	7801      	ldrb	r1, [r0, #0]
 23f239a:	b2ea      	uxtb	r2, r5
 23f239c:	6840      	ldr	r0, [r0, #4]
 23f239e:	f006 fd9c 	bl	23f8eda <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
 23f23a2:	4285      	cmp	r5, r0
 23f23a4:	d10d      	bne.n	23f23c2 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
 23f23a6:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
 23f23a8:	fa1f f887 	uxth.w	r8, r7
 23f23ac:	4545      	cmp	r5, r8
 23f23ae:	f107 0701 	add.w	r7, r7, #1
 23f23b2:	d909      	bls.n	23f23c8 <_ZN18Adafruit_I2CDevice4readEPhjb+0x40>
    buffer[i] = _wire->read();
 23f23b4:	6860      	ldr	r0, [r4, #4]
 23f23b6:	6803      	ldr	r3, [r0, #0]
 23f23b8:	695b      	ldr	r3, [r3, #20]
 23f23ba:	4798      	blx	r3
 23f23bc:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
 23f23c0:	e7f2      	b.n	23f23a8 <_ZN18Adafruit_I2CDevice4readEPhjb+0x20>
    return false;
 23f23c2:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 23f23c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f23c8:	2001      	movs	r0, #1
 23f23ca:	e7fb      	b.n	23f23c4 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3c>

023f23cc <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
 23f23cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f23ce:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
 23f23d0:	2300      	movs	r3, #0
 23f23d2:	e9cd 3300 	strd	r3, r3, [sp]
 23f23d6:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
 23f23da:	4604      	mov	r4, r0
 23f23dc:	9e06      	ldr	r6, [sp, #24]
  if (!write(write_buffer, write_len, stop)) {
 23f23de:	f7ff ffa3 	bl	23f2328 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 23f23e2:	b140      	cbz	r0, 23f23f6 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
 23f23e4:	2301      	movs	r3, #1
 23f23e6:	4632      	mov	r2, r6
 23f23e8:	4629      	mov	r1, r5
 23f23ea:	4620      	mov	r0, r4
}
 23f23ec:	b002      	add	sp, #8
 23f23ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
 23f23f2:	f7ff bfc9 	b.w	23f2388 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
 23f23f6:	b002      	add	sp, #8
 23f23f8:	bd70      	pop	{r4, r5, r6, pc}

023f23fa <_ZN18Adafruit_SPIDeviceD1Ev>:
}

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
 23f23fa:	b510      	push	{r4, lr}
 23f23fc:	4604      	mov	r4, r0
  if (_spiSetting) {
 23f23fe:	6840      	ldr	r0, [r0, #4]
 23f2400:	b110      	cbz	r0, 23f2408 <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
 23f2402:	6803      	ldr	r3, [r0, #0]
 23f2404:	689b      	ldr	r3, [r3, #8]
 23f2406:	4798      	blx	r3
    _spiSetting = nullptr;
  }
}
 23f2408:	4620      	mov	r0, r4
 23f240a:	bd10      	pop	{r4, pc}

023f240c <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
 23f240c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f2410:	4604      	mov	r4, r0
  if (_spi) {
 23f2412:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
 23f2414:	460d      	mov	r5, r1
 23f2416:	b085      	sub	sp, #20
  if (_spi) {
 23f2418:	b140      	cbz	r0, 23f242c <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
 23f241a:	2300      	movs	r3, #0
 23f241c:	9300      	str	r3, [sp, #0]
 23f241e:	4613      	mov	r3, r2
 23f2420:	460a      	mov	r2, r1
 23f2422:	f007 fac5 	bl	23f99b0 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
 23f2426:	b005      	add	sp, #20
 23f2428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
 23f242c:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23f242e:	68a0      	ldr	r0, [r4, #8]
    startbit = 0x80;
 23f2430:	2b00      	cmp	r3, #0
 23f2432:	bf0c      	ite	eq
 23f2434:	f04f 0b01 	moveq.w	fp, #1
 23f2438:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
 23f243c:	780b      	ldrb	r3, [r1, #0]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23f243e:	4f44      	ldr	r7, [pc, #272]	; (23f2550 <_ZN18Adafruit_SPIDevice8transferEPhj+0x144>)
  bool towrite, lastmosi = !(buffer[0] & startbit);
 23f2440:	ea1b 0f03 	tst.w	fp, r3
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23f2444:	fbb7 f7f0 	udiv	r7, r7, r0
  bool towrite, lastmosi = !(buffer[0] & startbit);
 23f2448:	bf0c      	ite	eq
 23f244a:	f04f 0901 	moveq.w	r9, #1
 23f244e:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23f2452:	188b      	adds	r3, r1, r2
 23f2454:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
 23f2456:	9303      	str	r3, [sp, #12]
 23f2458:	9b03      	ldr	r3, [sp, #12]
 23f245a:	42ab      	cmp	r3, r5
 23f245c:	d0e3      	beq.n	23f2426 <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    for (uint8_t b = startbit; b != 0;
 23f245e:	465e      	mov	r6, fp
    uint8_t reply = 0;
 23f2460:	f04f 0800 	mov.w	r8, #0
    uint8_t send = buffer[i];
 23f2464:	f895 a000 	ldrb.w	sl, [r5]
      if (bitdelay_us) {
 23f2468:	b117      	cbz	r7, 23f2470 <_ZN18Adafruit_SPIDevice8transferEPhj+0x64>
 23f246a:	4638      	mov	r0, r7
 23f246c:	f005 f8e2 	bl	23f7634 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
 23f2470:	7b63      	ldrb	r3, [r4, #13]
 23f2472:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 23f2476:	d141      	bne.n	23f24fc <_ZN18Adafruit_SPIDevice8transferEPhj+0xf0>
        if ((_mosi != -1) && (lastmosi != towrite)) {
 23f2478:	f994 3010 	ldrsb.w	r3, [r4, #16]
 23f247c:	1c5a      	adds	r2, r3, #1
 23f247e:	d00f      	beq.n	23f24a0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
        towrite = send & b;
 23f2480:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
 23f2484:	bf14      	ite	ne
 23f2486:	2301      	movne	r3, #1
 23f2488:	2300      	moveq	r3, #0
 23f248a:	454b      	cmp	r3, r9
 23f248c:	d008      	beq.n	23f24a0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
            *mosiPort |= mosiPinMask;
 23f248e:	6963      	ldr	r3, [r4, #20]
 23f2490:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f2492:	681a      	ldr	r2, [r3, #0]
          if (towrite)
 23f2494:	2900      	cmp	r1, #0
 23f2496:	d02c      	beq.n	23f24f2 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe6>
            *mosiPort |= mosiPinMask;
 23f2498:	f04f 0901 	mov.w	r9, #1
 23f249c:	4302      	orrs	r2, r0
 23f249e:	601a      	str	r2, [r3, #0]
        *clkPort |= clkPinMask; // Clock high
 23f24a0:	69a1      	ldr	r1, [r4, #24]
 23f24a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23f24a4:	680a      	ldr	r2, [r1, #0]
 23f24a6:	4313      	orrs	r3, r2
 23f24a8:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
 23f24aa:	b117      	cbz	r7, 23f24b2 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa6>
 23f24ac:	4638      	mov	r0, r7
 23f24ae:	f005 f8c1 	bl	23f7634 <HAL_Delay_Microseconds>
        if (_miso != -1) {
 23f24b2:	f994 3011 	ldrsb.w	r3, [r4, #17]
 23f24b6:	3301      	adds	r3, #1
 23f24b8:	d006      	beq.n	23f24c8 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbc>
          if (*misoPort & misoPinMask) {
 23f24ba:	69e3      	ldr	r3, [r4, #28]
 23f24bc:	681a      	ldr	r2, [r3, #0]
 23f24be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 23f24c0:	421a      	tst	r2, r3
            reply |= b;
 23f24c2:	bf18      	it	ne
 23f24c4:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
 23f24c8:	69a1      	ldr	r1, [r4, #24]
 23f24ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23f24cc:	680a      	ldr	r2, [r1, #0]
 23f24ce:	ea22 0303 	bic.w	r3, r2, r3
 23f24d2:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
 23f24d4:	f994 3011 	ldrsb.w	r3, [r4, #17]
 23f24d8:	3301      	adds	r3, #1
        buffer[i] = reply;
 23f24da:	bf18      	it	ne
 23f24dc:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
 23f24e0:	7b23      	ldrb	r3, [r4, #12]
 23f24e2:	2b00      	cmp	r3, #0
 23f24e4:	d132      	bne.n	23f254c <_ZN18Adafruit_SPIDevice8transferEPhj+0x140>
 23f24e6:	0076      	lsls	r6, r6, #1
 23f24e8:	b2f6      	uxtb	r6, r6
 23f24ea:	2e00      	cmp	r6, #0
 23f24ec:	d1bc      	bne.n	23f2468 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5c>
  for (size_t i = 0; i < len; i++) {
 23f24ee:	3501      	adds	r5, #1
 23f24f0:	e7b2      	b.n	23f2458 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4c>
            *mosiPort &= ~mosiPinMask;
 23f24f2:	ea22 0200 	bic.w	r2, r2, r0
 23f24f6:	4689      	mov	r9, r1
 23f24f8:	601a      	str	r2, [r3, #0]
 23f24fa:	e7d1      	b.n	23f24a0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
        *clkPort |= clkPinMask; // Clock high
 23f24fc:	69a1      	ldr	r1, [r4, #24]
 23f24fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23f2500:	680a      	ldr	r2, [r1, #0]
 23f2502:	4313      	orrs	r3, r2
 23f2504:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
 23f2506:	b117      	cbz	r7, 23f250e <_ZN18Adafruit_SPIDevice8transferEPhj+0x102>
 23f2508:	4638      	mov	r0, r7
 23f250a:	f005 f893 	bl	23f7634 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
 23f250e:	f994 3010 	ldrsb.w	r3, [r4, #16]
 23f2512:	3301      	adds	r3, #1
 23f2514:	d008      	beq.n	23f2528 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11c>
            *mosiPort |= mosiPinMask;
 23f2516:	6963      	ldr	r3, [r4, #20]
 23f2518:	6a61      	ldr	r1, [r4, #36]	; 0x24
 23f251a:	681a      	ldr	r2, [r3, #0]
          if (send & b)
 23f251c:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
 23f2520:	bf14      	ite	ne
 23f2522:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
 23f2524:	438a      	biceq	r2, r1
 23f2526:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
 23f2528:	69a1      	ldr	r1, [r4, #24]
 23f252a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23f252c:	680a      	ldr	r2, [r1, #0]
 23f252e:	ea22 0303 	bic.w	r3, r2, r3
 23f2532:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
 23f2534:	f994 3011 	ldrsb.w	r3, [r4, #17]
 23f2538:	3301      	adds	r3, #1
 23f253a:	d0cb      	beq.n	23f24d4 <_ZN18Adafruit_SPIDevice8transferEPhj+0xc8>
          if (*misoPort & misoPinMask) {
 23f253c:	69e3      	ldr	r3, [r4, #28]
 23f253e:	681a      	ldr	r2, [r3, #0]
 23f2540:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 23f2542:	421a      	tst	r2, r3
            reply |= b;
 23f2544:	bf18      	it	ne
 23f2546:	ea46 0808 	orrne.w	r8, r6, r8
 23f254a:	e7c3      	b.n	23f24d4 <_ZN18Adafruit_SPIDevice8transferEPhj+0xc8>
    for (uint8_t b = startbit; b != 0;
 23f254c:	0876      	lsrs	r6, r6, #1
 23f254e:	e7cc      	b.n	23f24ea <_ZN18Adafruit_SPIDevice8transferEPhj+0xde>
 23f2550:	0007a120 	.word	0x0007a120

023f2554 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
 23f2554:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
 23f2556:	2201      	movs	r2, #1
  uint8_t data = send;
 23f2558:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
 23f255c:	f10d 0107 	add.w	r1, sp, #7
 23f2560:	f7ff ff54 	bl	23f240c <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
 23f2564:	f89d 0007 	ldrb.w	r0, [sp, #7]
 23f2568:	b003      	add	sp, #12
 23f256a:	f85d fb04 	ldr.w	pc, [sp], #4

023f256e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
 23f256e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f2572:	4604      	mov	r4, r0
  if (_spi) {
 23f2574:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
 23f2576:	460e      	mov	r6, r1
 23f2578:	4617      	mov	r7, r2
 23f257a:	461d      	mov	r5, r3
  if (_spi) {
 23f257c:	b110      	cbz	r0, 23f2584 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
 23f257e:	6861      	ldr	r1, [r4, #4]
 23f2580:	f007 f9a2 	bl	23f98c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
 23f2584:	f994 000e 	ldrsb.w	r0, [r4, #14]
 23f2588:	2100      	movs	r1, #0
 23f258a:	b280      	uxth	r0, r0
 23f258c:	f007 fe4f 	bl	23fa22e <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
 23f2590:	9b06      	ldr	r3, [sp, #24]
 23f2592:	eb05 0803 	add.w	r8, r5, r3
 23f2596:	4545      	cmp	r5, r8
 23f2598:	d108      	bne.n	23f25ac <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
 23f259a:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
 23f259c:	42b7      	cmp	r7, r6
 23f259e:	d00b      	beq.n	23f25b8 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
 23f25a0:	4620      	mov	r0, r4
 23f25a2:	f816 1b01 	ldrb.w	r1, [r6], #1
 23f25a6:	f7ff ffd5 	bl	23f2554 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
 23f25aa:	e7f7      	b.n	23f259c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
 23f25ac:	4620      	mov	r0, r4
 23f25ae:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f25b2:	f7ff ffcf 	bl	23f2554 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
 23f25b6:	e7ee      	b.n	23f2596 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
 23f25b8:	f994 000e 	ldrsb.w	r0, [r4, #14]
 23f25bc:	2101      	movs	r1, #1
 23f25be:	b280      	uxth	r0, r0
 23f25c0:	f007 fe35 	bl	23fa22e <digitalWrite>

  if (_spi) {
 23f25c4:	6820      	ldr	r0, [r4, #0]
 23f25c6:	b108      	cbz	r0, 23f25cc <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
 23f25c8:	f007 f964 	bl	23f9894 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 23f25cc:	2001      	movs	r0, #1
 23f25ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f25d2 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
 23f25d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f25d6:	4604      	mov	r4, r0
  if (_spi) {
 23f25d8:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
 23f25da:	460e      	mov	r6, r1
 23f25dc:	4617      	mov	r7, r2
 23f25de:	461d      	mov	r5, r3
 23f25e0:	f89d 801c 	ldrb.w	r8, [sp, #28]
  if (_spi) {
 23f25e4:	b110      	cbz	r0, 23f25ec <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
 23f25e6:	6861      	ldr	r1, [r4, #4]
 23f25e8:	f007 f96e 	bl	23f98c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
 23f25ec:	f994 000e 	ldrsb.w	r0, [r4, #14]
 23f25f0:	2100      	movs	r1, #0
 23f25f2:	b280      	uxth	r0, r0
 23f25f4:	f007 fe1b 	bl	23fa22e <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
 23f25f8:	4437      	add	r7, r6
 23f25fa:	42be      	cmp	r6, r7
 23f25fc:	d10a      	bne.n	23f2614 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
 23f25fe:	9b06      	ldr	r3, [sp, #24]
 23f2600:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
 23f2602:	42ae      	cmp	r6, r5
 23f2604:	d00c      	beq.n	23f2620 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
 23f2606:	4641      	mov	r1, r8
 23f2608:	4620      	mov	r0, r4
 23f260a:	f7ff ffa3 	bl	23f2554 <_ZN18Adafruit_SPIDevice8transferEh>
 23f260e:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
 23f2612:	e7f6      	b.n	23f2602 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
 23f2614:	4620      	mov	r0, r4
 23f2616:	f816 1b01 	ldrb.w	r1, [r6], #1
 23f261a:	f7ff ff9b 	bl	23f2554 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
 23f261e:	e7ec      	b.n	23f25fa <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
 23f2620:	f994 000e 	ldrsb.w	r0, [r4, #14]
 23f2624:	2101      	movs	r1, #1
 23f2626:	b280      	uxth	r0, r0
 23f2628:	f007 fe01 	bl	23fa22e <digitalWrite>

  if (_spi) {
 23f262c:	6820      	ldr	r0, [r4, #0]
 23f262e:	b108      	cbz	r0, 23f2634 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
 23f2630:	f007 f930 	bl	23f9894 <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
 23f2634:	2001      	movs	r0, #1
 23f2636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f263a <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
 23f263a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f263e:	461f      	mov	r7, r3
 23f2640:	b085      	sub	sp, #20
 23f2642:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
#if defined(ESP8266)
  yield();
#endif
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 23f2646:	eba7 0a01 	sub.w	sl, r7, r1
 23f264a:	eba8 0902 	sub.w	r9, r8, r2
 23f264e:	f1b9 0f00 	cmp.w	r9, #0
 23f2652:	bfb8      	it	lt
 23f2654:	f1c9 0900 	rsblt	r9, r9, #0
 23f2658:	f1ba 0f00 	cmp.w	sl, #0
 23f265c:	bfb8      	it	lt
 23f265e:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
 23f2662:	45d1      	cmp	r9, sl
                             uint16_t color) {
 23f2664:	4683      	mov	fp, r0
 23f2666:	460c      	mov	r4, r1
 23f2668:	4615      	mov	r5, r2
 23f266a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  if (steep) {
 23f266e:	dd04      	ble.n	23f267a <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
 23f2670:	463a      	mov	r2, r7
    _swap_int16_t(x0, y0);
 23f2672:	462c      	mov	r4, r5
    _swap_int16_t(x1, y1);
 23f2674:	4647      	mov	r7, r8
    _swap_int16_t(x0, y0);
 23f2676:	460d      	mov	r5, r1
    _swap_int16_t(x1, y1);
 23f2678:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
 23f267a:	42bc      	cmp	r4, r7
 23f267c:	dd05      	ble.n	23f268a <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
 23f267e:	462a      	mov	r2, r5
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
 23f2680:	4645      	mov	r5, r8
 23f2682:	4690      	mov	r8, r2
  if (x0 > x1) {
 23f2684:	4622      	mov	r2, r4
 23f2686:	463c      	mov	r4, r7
 23f2688:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
 23f268a:	1b3e      	subs	r6, r7, r4
 23f268c:	b2b2      	uxth	r2, r6
 23f268e:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
 23f2690:	eba8 0205 	sub.w	r2, r8, r5
 23f2694:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 23f2698:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
 23f269c:	f3c6 32c0 	ubfx	r2, r6, #15, #1
 23f26a0:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 23f26a4:	4545      	cmp	r5, r8
 23f26a6:	bfb4      	ite	lt
 23f26a8:	2201      	movlt	r2, #1
 23f26aa:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
  dy = abs(y1 - y0);
 23f26ae:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
 23f26b0:	1076      	asrs	r6, r6, #1
    ystep = -1;
 23f26b2:	9202      	str	r2, [sp, #8]
  }

  for (; x0 <= x1; x0++) {
 23f26b4:	42bc      	cmp	r4, r7
 23f26b6:	dc1c      	bgt.n	23f26f2 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
    if (steep) {
      writePixel(y0, x0, color);
 23f26b8:	f8db 2000 	ldr.w	r2, [fp]
    if (steep) {
 23f26bc:	45d1      	cmp	r9, sl
      writePixel(y0, x0, color);
 23f26be:	f8d2 8018 	ldr.w	r8, [r2, #24]
 23f26c2:	bfc7      	ittee	gt
 23f26c4:	4629      	movgt	r1, r5
 23f26c6:	4622      	movgt	r2, r4
    } else {
      writePixel(x0, y0, color);
 23f26c8:	462a      	movle	r2, r5
 23f26ca:	4621      	movle	r1, r4
      writePixel(y0, x0, color);
 23f26cc:	9303      	str	r3, [sp, #12]
      writePixel(x0, y0, color);
 23f26ce:	4658      	mov	r0, fp
 23f26d0:	47c0      	blx	r8
    }
    err -= dy;
 23f26d2:	9a01      	ldr	r2, [sp, #4]
      writePixel(x0, y0, color);
 23f26d4:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
 23f26d6:	1ab6      	subs	r6, r6, r2
 23f26d8:	b2b1      	uxth	r1, r6
 23f26da:	b236      	sxth	r6, r6
    if (err < 0) {
 23f26dc:	2e00      	cmp	r6, #0
 23f26de:	da05      	bge.n	23f26ec <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
      y0 += ystep;
 23f26e0:	9a02      	ldr	r2, [sp, #8]
 23f26e2:	4415      	add	r5, r2
      err += dx;
 23f26e4:	9a00      	ldr	r2, [sp, #0]
      y0 += ystep;
 23f26e6:	b22d      	sxth	r5, r5
      err += dx;
 23f26e8:	1856      	adds	r6, r2, r1
 23f26ea:	b236      	sxth	r6, r6
  for (; x0 <= x1; x0++) {
 23f26ec:	3401      	adds	r4, #1
 23f26ee:	b224      	sxth	r4, r4
 23f26f0:	e7e0      	b.n	23f26b4 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
    }
  }
}
 23f26f2:	b005      	add	sp, #20
 23f26f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023f26f8 <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
 23f26f8:	4770      	bx	lr

023f26fa <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
 23f26fa:	b410      	push	{r4}
  drawPixel(x, y, color);
 23f26fc:	6804      	ldr	r4, [r0, #0]
 23f26fe:	6924      	ldr	r4, [r4, #16]
 23f2700:	46a4      	mov	ip, r4
}
 23f2702:	f85d 4b04 	ldr.w	r4, [sp], #4
  drawPixel(x, y, color);
 23f2706:	4760      	bx	ip

023f2708 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
 23f2708:	b430      	push	{r4, r5}
 23f270a:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
 23f270e:	6804      	ldr	r4, [r0, #0]
 23f2710:	9502      	str	r5, [sp, #8]
 23f2712:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 23f2714:	46a4      	mov	ip, r4
}
 23f2716:	bc30      	pop	{r4, r5}
  drawFastVLine(x, y, h, color);
 23f2718:	4760      	bx	ip

023f271a <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
 23f271a:	b430      	push	{r4, r5}
 23f271c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
 23f2720:	6804      	ldr	r4, [r0, #0]
 23f2722:	9502      	str	r5, [sp, #8]
 23f2724:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 23f2726:	46a4      	mov	ip, r4
}
 23f2728:	bc30      	pop	{r4, r5}
  drawFastHLine(x, y, w, color);
 23f272a:	4760      	bx	ip

023f272c <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
 23f272c:	b470      	push	{r4, r5, r6}
 23f272e:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 23f2732:	f8bd 6010 	ldrh.w	r6, [sp, #16]
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
 23f2736:	6804      	ldr	r4, [r0, #0]
 23f2738:	e9cd 5603 	strd	r5, r6, [sp, #12]
 23f273c:	6c24      	ldr	r4, [r4, #64]	; 0x40
 23f273e:	46a4      	mov	ip, r4
}
 23f2740:	bc70      	pop	{r4, r5, r6}
  fillRect(x, y, w, h, color);
 23f2742:	4760      	bx	ip

023f2744 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
 23f2744:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f2748:	461c      	mov	r4, r3
 23f274a:	4616      	mov	r6, r2
 23f274c:	4605      	mov	r5, r0
 23f274e:	460f      	mov	r7, r1
  startWrite();
 23f2750:	6803      	ldr	r3, [r0, #0]
  writeLine(x, y, x, y + h - 1, color);
 23f2752:	3c01      	subs	r4, #1
                                 uint16_t color) {
 23f2754:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
 23f2758:	695b      	ldr	r3, [r3, #20]
  writeLine(x, y, x, y + h - 1, color);
 23f275a:	4434      	add	r4, r6
  startWrite();
 23f275c:	4798      	blx	r3
  writeLine(x, y, x, y + h - 1, color);
 23f275e:	b224      	sxth	r4, r4
 23f2760:	682b      	ldr	r3, [r5, #0]
 23f2762:	f8cd 8004 	str.w	r8, [sp, #4]
 23f2766:	9400      	str	r4, [sp, #0]
 23f2768:	4628      	mov	r0, r5
 23f276a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 23f276c:	4632      	mov	r2, r6
 23f276e:	463b      	mov	r3, r7
 23f2770:	4639      	mov	r1, r7
 23f2772:	47a0      	blx	r4
  endWrite();
 23f2774:	4628      	mov	r0, r5
 23f2776:	682b      	ldr	r3, [r5, #0]
 23f2778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23f277a:	b002      	add	sp, #8
 23f277c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
 23f2780:	4718      	bx	r3

023f2782 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
 23f2782:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f2786:	4617      	mov	r7, r2
 23f2788:	4604      	mov	r4, r0
 23f278a:	461d      	mov	r5, r3
 23f278c:	460e      	mov	r6, r1
  startWrite();
 23f278e:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
 23f2790:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
 23f2794:	695b      	ldr	r3, [r3, #20]
 23f2796:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
 23f2798:	e9cd 7800 	strd	r7, r8, [sp]
 23f279c:	6822      	ldr	r2, [r4, #0]
 23f279e:	1e6b      	subs	r3, r5, #1
 23f27a0:	4433      	add	r3, r6
 23f27a2:	4620      	mov	r0, r4
 23f27a4:	6a95      	ldr	r5, [r2, #40]	; 0x28
 23f27a6:	4631      	mov	r1, r6
 23f27a8:	463a      	mov	r2, r7
 23f27aa:	b21b      	sxth	r3, r3
 23f27ac:	47a8      	blx	r5
  endWrite();
 23f27ae:	4620      	mov	r0, r4
 23f27b0:	6823      	ldr	r3, [r4, #0]
 23f27b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23f27b4:	b002      	add	sp, #8
 23f27b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
 23f27ba:	4718      	bx	r3

023f27bc <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 23f27bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f27c0:	461e      	mov	r6, r3
  startWrite();
 23f27c2:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
 23f27c4:	460c      	mov	r4, r1
  startWrite();
 23f27c6:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
 23f27c8:	4605      	mov	r5, r0
 23f27ca:	4617      	mov	r7, r2
 23f27cc:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 23f27d0:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  startWrite();
 23f27d4:	4798      	blx	r3
  for (int16_t i = x; i < x + w; i++) {
 23f27d6:	4426      	add	r6, r4
 23f27d8:	42b4      	cmp	r4, r6
    writeFastVLine(i, y, h, color);
 23f27da:	682b      	ldr	r3, [r5, #0]
  for (int16_t i = x; i < x + w; i++) {
 23f27dc:	da0b      	bge.n	23f27f6 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
    writeFastVLine(i, y, h, color);
 23f27de:	f8cd 8000 	str.w	r8, [sp]
 23f27e2:	4621      	mov	r1, r4
 23f27e4:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23f27e8:	463a      	mov	r2, r7
 23f27ea:	464b      	mov	r3, r9
 23f27ec:	4628      	mov	r0, r5
 23f27ee:	3401      	adds	r4, #1
 23f27f0:	47d0      	blx	sl
  for (int16_t i = x; i < x + w; i++) {
 23f27f2:	b224      	sxth	r4, r4
 23f27f4:	e7f0      	b.n	23f27d8 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
  }
  endWrite();
 23f27f6:	4628      	mov	r0, r5
 23f27f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23f27fa:	b002      	add	sp, #8
 23f27fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
 23f2800:	4718      	bx	r3

023f2802 <_ZN12Adafruit_GFX10fillScreenEt>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
 23f2802:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 23f2804:	9101      	str	r1, [sp, #4]
 23f2806:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 23f280a:	6802      	ldr	r2, [r0, #0]
 23f280c:	9100      	str	r1, [sp, #0]
 23f280e:	6c14      	ldr	r4, [r2, #64]	; 0x40
 23f2810:	2200      	movs	r2, #0
 23f2812:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23f2816:	4611      	mov	r1, r2
 23f2818:	47a0      	blx	r4
}
 23f281a:	b002      	add	sp, #8
 23f281c:	bd10      	pop	{r4, pc}

023f281e <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                            uint16_t color) {
 23f281e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  // Update in subclasses if desired!
  if (x0 == x1) {
 23f2822:	4299      	cmp	r1, r3
                            uint16_t color) {
 23f2824:	4616      	mov	r6, r2
 23f2826:	4680      	mov	r8, r0
 23f2828:	460d      	mov	r5, r1
 23f282a:	461c      	mov	r4, r3
 23f282c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 23f2830:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
    if (y0 > y1)
      _swap_int16_t(y0, y1);
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23f2834:	6802      	ldr	r2, [r0, #0]
  if (x0 == x1) {
 23f2836:	d112      	bne.n	23f285e <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
    if (y0 > y1)
 23f2838:	42be      	cmp	r6, r7
 23f283a:	bfc2      	ittt	gt
 23f283c:	4633      	movgt	r3, r6
 23f283e:	463e      	movgt	r6, r7
 23f2840:	461f      	movgt	r7, r3
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23f2842:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23f2846:	1c7b      	adds	r3, r7, #1
 23f2848:	6b94      	ldr	r4, [r2, #56]	; 0x38
 23f284a:	1b9b      	subs	r3, r3, r6
  } else if (y0 == y1) {
    if (x0 > x1)
      _swap_int16_t(x0, x1);
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23f284c:	4632      	mov	r2, r6
 23f284e:	4629      	mov	r1, r5
 23f2850:	4640      	mov	r0, r8
 23f2852:	46a4      	mov	ip, r4
 23f2854:	b21b      	sxth	r3, r3
  } else {
    startWrite();
    writeLine(x0, y0, x1, y1, color);
    endWrite();
  }
}
 23f2856:	b003      	add	sp, #12
 23f2858:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23f285c:	4760      	bx	ip
  } else if (y0 == y1) {
 23f285e:	42be      	cmp	r6, r7
 23f2860:	d10a      	bne.n	23f2878 <_ZN12Adafruit_GFX8drawLineEsssst+0x5a>
    if (x0 > x1)
 23f2862:	4299      	cmp	r1, r3
 23f2864:	bfc2      	ittt	gt
 23f2866:	460b      	movgt	r3, r1
 23f2868:	4625      	movgt	r5, r4
 23f286a:	461c      	movgt	r4, r3
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23f286c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23f2870:	1c63      	adds	r3, r4, #1
 23f2872:	1b5b      	subs	r3, r3, r5
 23f2874:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 23f2876:	e7e9      	b.n	23f284c <_ZN12Adafruit_GFX8drawLineEsssst+0x2e>
    startWrite();
 23f2878:	6953      	ldr	r3, [r2, #20]
 23f287a:	4798      	blx	r3
    writeLine(x0, y0, x1, y1, color);
 23f287c:	e9cd 7900 	strd	r7, r9, [sp]
 23f2880:	f8d8 3000 	ldr.w	r3, [r8]
 23f2884:	4640      	mov	r0, r8
 23f2886:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 23f2888:	4632      	mov	r2, r6
 23f288a:	4623      	mov	r3, r4
 23f288c:	4629      	mov	r1, r5
 23f288e:	47b8      	blx	r7
    endWrite();
 23f2890:	4640      	mov	r0, r8
 23f2892:	f8d8 3000 	ldr.w	r3, [r8]
 23f2896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23f2898:	b003      	add	sp, #12
 23f289a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    endWrite();
 23f289e:	4718      	bx	r3

023f28a0 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 23f28a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f28a4:	4604      	mov	r4, r0
 23f28a6:	460f      	mov	r7, r1
 23f28a8:	4616      	mov	r6, r2
 23f28aa:	461d      	mov	r5, r3
  startWrite();
 23f28ac:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
 23f28ae:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  startWrite();
 23f28b2:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
 23f28b4:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  startWrite();
 23f28b8:	4798      	blx	r3
  writeFastHLine(x, y, w, color);
 23f28ba:	6823      	ldr	r3, [r4, #0]
 23f28bc:	f8cd 8000 	str.w	r8, [sp]
 23f28c0:	4632      	mov	r2, r6
 23f28c2:	4639      	mov	r1, r7
 23f28c4:	4620      	mov	r0, r4
 23f28c6:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23f28ca:	462b      	mov	r3, r5
 23f28cc:	47d0      	blx	sl
  writeFastHLine(x, y + h - 1, w, color);
 23f28ce:	6823      	ldr	r3, [r4, #0]
 23f28d0:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 23f28d4:	f8cd 8000 	str.w	r8, [sp]
 23f28d8:	4432      	add	r2, r6
 23f28da:	4639      	mov	r1, r7
 23f28dc:	4620      	mov	r0, r4
 23f28de:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23f28e2:	b212      	sxth	r2, r2
 23f28e4:	462b      	mov	r3, r5
 23f28e6:	47d0      	blx	sl
  writeFastVLine(x, y, h, color);
 23f28e8:	6823      	ldr	r3, [r4, #0]
 23f28ea:	f8cd 8000 	str.w	r8, [sp]
 23f28ee:	4632      	mov	r2, r6
 23f28f0:	4639      	mov	r1, r7
 23f28f2:	4620      	mov	r0, r4
 23f28f4:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23f28f8:	464b      	mov	r3, r9
 23f28fa:	47d0      	blx	sl
  writeFastVLine(x + w - 1, y, h, color);
 23f28fc:	1e6b      	subs	r3, r5, #1
 23f28fe:	19d9      	adds	r1, r3, r7
 23f2900:	6823      	ldr	r3, [r4, #0]
 23f2902:	f8cd 8000 	str.w	r8, [sp]
 23f2906:	4620      	mov	r0, r4
 23f2908:	6a1d      	ldr	r5, [r3, #32]
 23f290a:	4632      	mov	r2, r6
 23f290c:	464b      	mov	r3, r9
 23f290e:	b209      	sxth	r1, r1
 23f2910:	47a8      	blx	r5
  endWrite();
 23f2912:	4620      	mov	r0, r4
 23f2914:	6823      	ldr	r3, [r4, #0]
 23f2916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23f2918:	b002      	add	sp, #8
 23f291a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
 23f291e:	4718      	bx	r3

023f2920 <_ZN12Adafruit_GFX13invertDisplayEb>:
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
 23f2920:	4770      	bx	lr

023f2922 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
 23f2922:	f001 0303 	and.w	r3, r1, #3
    _height = HEIGHT;
 23f2926:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
  rotation = (x & 3);
 23f292a:	7683      	strb	r3, [r0, #26]
    _width = WIDTH;
 23f292c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
  switch (rotation) {
 23f2930:	07c9      	lsls	r1, r1, #31
    _width = WIDTH;
 23f2932:	bf59      	ittee	pl
 23f2934:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
 23f2936:	81c2      	strhpl	r2, [r0, #14]
    _width = HEIGHT;
 23f2938:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
 23f293a:	81c3      	strhmi	r3, [r0, #14]
}
 23f293c:	4770      	bx	lr
	...

023f2940 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 23f2940:	b530      	push	{r4, r5, lr}
 23f2942:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
 23f2944:	2400      	movs	r4, #0
  _width = WIDTH;
 23f2946:	8181      	strh	r1, [r0, #12]
  textsize_x = textsize_y = 1;
 23f2948:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 23f294c:	4d05      	ldr	r5, [pc, #20]	; (23f2964 <_ZN12Adafruit_GFXC1Ess+0x24>)
 23f294e:	8142      	strh	r2, [r0, #10]
  _height = HEIGHT;
 23f2950:	81c2      	strh	r2, [r0, #14]
  textsize_x = textsize_y = 1;
 23f2952:	4a05      	ldr	r2, [pc, #20]	; (23f2968 <_ZN12Adafruit_GFXC1Ess+0x28>)
 23f2954:	6044      	str	r4, [r0, #4]
 23f2956:	e9c0 1205 	strd	r1, r2, [r0, #20]
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 23f295a:	6005      	str	r5, [r0, #0]
  cursor_y = cursor_x = 0;
 23f295c:	6104      	str	r4, [r0, #16]
  _cp437 = false;
 23f295e:	7704      	strb	r4, [r0, #28]
  gfxFont = NULL;
 23f2960:	6204      	str	r4, [r0, #32]
}
 23f2962:	bd30      	pop	{r4, r5, pc}
 23f2964:	023ff1c8 	.word	0x023ff1c8
 23f2968:	01000101 	.word	0x01000101

023f296c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
                              int16_t w, int16_t h, uint16_t color) {
 23f296c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  startWrite();
 23f2970:	2600      	movs	r6, #0
  uint8_t byte = 0;
 23f2972:	4635      	mov	r5, r6
                              int16_t w, int16_t h, uint16_t color) {
 23f2974:	b089      	sub	sp, #36	; 0x24
 23f2976:	e9cd 1202 	strd	r1, r2, [sp, #8]
 23f297a:	9304      	str	r3, [sp, #16]
  startWrite();
 23f297c:	6802      	ldr	r2, [r0, #0]
                              int16_t w, int16_t h, uint16_t color) {
 23f297e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 23f2982:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
  startWrite();
 23f2986:	6952      	ldr	r2, [r2, #20]
                              int16_t w, int16_t h, uint16_t color) {
 23f2988:	9305      	str	r3, [sp, #20]
 23f298a:	4604      	mov	r4, r0
 23f298c:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
  startWrite();
 23f2990:	4790      	blx	r2
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 23f2992:	f118 0207 	adds.w	r2, r8, #7
 23f2996:	bf48      	it	mi
 23f2998:	f108 020e 	addmi.w	r2, r8, #14
 23f299c:	ea4f 0be2 	mov.w	fp, r2, asr #3
  startWrite();
 23f29a0:	9601      	str	r6, [sp, #4]
 23f29a2:	9b03      	ldr	r3, [sp, #12]
 23f29a4:	9a01      	ldr	r2, [sp, #4]
  for (int16_t j = 0; j < h; j++, y++) {
 23f29a6:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 23f29aa:	189a      	adds	r2, r3, r2
 23f29ac:	9b05      	ldr	r3, [sp, #20]
 23f29ae:	b212      	sxth	r2, r2
 23f29b0:	428b      	cmp	r3, r1
 23f29b2:	dd27      	ble.n	23f2a04 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x98>
 23f29b4:	f04f 0900 	mov.w	r9, #0
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 23f29b8:	9b04      	ldr	r3, [sp, #16]
 23f29ba:	4433      	add	r3, r6
 23f29bc:	9306      	str	r3, [sp, #24]
 23f29be:	fa0f f089 	sxth.w	r0, r9
    for (int16_t i = 0; i < w; i++) {
 23f29c2:	4580      	cmp	r8, r0
 23f29c4:	fa1f f189 	uxth.w	r1, r9
 23f29c8:	dd17      	ble.n	23f29fa <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8e>
      if (i & 7)
 23f29ca:	074f      	lsls	r7, r1, #29
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 23f29cc:	bf05      	ittet	eq
 23f29ce:	9b06      	ldreq	r3, [sp, #24]
 23f29d0:	10c0      	asreq	r0, r0, #3
        byte <<= 1;
 23f29d2:	006d      	lslne	r5, r5, #1
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 23f29d4:	5c1d      	ldrbeq	r5, [r3, r0]
        byte <<= 1;
 23f29d6:	bf18      	it	ne
 23f29d8:	b2ed      	uxtbne	r5, r5
      if (byte & 0x80)
 23f29da:	062b      	lsls	r3, r5, #24
 23f29dc:	d50a      	bpl.n	23f29f4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x88>
        writePixel(x + i, y, color);
 23f29de:	9b02      	ldr	r3, [sp, #8]
 23f29e0:	6820      	ldr	r0, [r4, #0]
 23f29e2:	4419      	add	r1, r3
 23f29e4:	6983      	ldr	r3, [r0, #24]
 23f29e6:	9207      	str	r2, [sp, #28]
 23f29e8:	461f      	mov	r7, r3
 23f29ea:	4620      	mov	r0, r4
 23f29ec:	4653      	mov	r3, sl
 23f29ee:	b209      	sxth	r1, r1
 23f29f0:	47b8      	blx	r7
 23f29f2:	9a07      	ldr	r2, [sp, #28]
    for (int16_t i = 0; i < w; i++) {
 23f29f4:	f109 0901 	add.w	r9, r9, #1
 23f29f8:	e7e1      	b.n	23f29be <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x52>
  for (int16_t j = 0; j < h; j++, y++) {
 23f29fa:	9b01      	ldr	r3, [sp, #4]
 23f29fc:	445e      	add	r6, fp
 23f29fe:	3301      	adds	r3, #1
 23f2a00:	9301      	str	r3, [sp, #4]
 23f2a02:	e7ce      	b.n	23f29a2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x36>
  endWrite();
 23f2a04:	4620      	mov	r0, r4
 23f2a06:	6823      	ldr	r3, [r4, #0]
 23f2a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23f2a0a:	b009      	add	sp, #36	; 0x24
 23f2a0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
 23f2a10:	4718      	bx	r3
	...

023f2a14 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
                            uint8_t size_y) {
 23f2a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f2a18:	ed2d 8b02 	vpush	{d8}
 23f2a1c:	b091      	sub	sp, #68	; 0x44
 23f2a1e:	4616      	mov	r6, r2
 23f2a20:	461f      	mov	r7, r3
  if (!gfxFont) { // 'Classic' built-in font
 23f2a22:	6a02      	ldr	r2, [r0, #32]
                            uint8_t size_y) {
 23f2a24:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 23f2a28:	4683      	mov	fp, r0
 23f2a2a:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
 23f2a2e:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
 23f2a32:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
 23f2a36:	9103      	str	r1, [sp, #12]
 23f2a38:	9304      	str	r3, [sp, #16]
  if (!gfxFont) { // 'Classic' built-in font
 23f2a3a:	2a00      	cmp	r2, #0
 23f2a3c:	f040 80c5 	bne.w	23f2bca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
    if ((x >= _width) ||              // Clip right
 23f2a40:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23f2a44:	428b      	cmp	r3, r1
 23f2a46:	f340 814c 	ble.w	23f2ce2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
 23f2a4a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23f2a4e:	42b3      	cmp	r3, r6
 23f2a50:	f340 8147 	ble.w	23f2ce2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((x + 6 * size_x - 1) < 0) || // Clip left
 23f2a54:	2306      	movs	r3, #6
 23f2a56:	fb13 1305 	smlabb	r3, r3, r5, r1
        (y >= _height) ||             // Clip bottom
 23f2a5a:	2b00      	cmp	r3, #0
 23f2a5c:	f340 8141 	ble.w	23f2ce2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((y + 8 * size_y - 1) < 0))   // Clip top
 23f2a60:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
        ((x + 6 * size_x - 1) < 0) || // Clip left
 23f2a64:	2b00      	cmp	r3, #0
 23f2a66:	f340 813c 	ble.w	23f2ce2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
    if (!_cp437 && (c >= 176))
 23f2a6a:	7f03      	ldrb	r3, [r0, #28]
 23f2a6c:	b91b      	cbnz	r3, 23f2a76 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
 23f2a6e:	2faf      	cmp	r7, #175	; 0xaf
      c++; // Handle 'classic' charset behavior
 23f2a70:	bf84      	itt	hi
 23f2a72:	3701      	addhi	r7, #1
 23f2a74:	b2ff      	uxtbhi	r7, r7
    startWrite();
 23f2a76:	f8db 3000 	ldr.w	r3, [fp]
 23f2a7a:	4658      	mov	r0, fp
 23f2a7c:	695b      	ldr	r3, [r3, #20]
 23f2a7e:	4798      	blx	r3
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23f2a80:	2205      	movs	r2, #5
 23f2a82:	9209      	str	r2, [sp, #36]	; 0x24
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 23f2a84:	2200      	movs	r2, #0
 23f2a86:	9205      	str	r2, [sp, #20]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23f2a88:	4a98      	ldr	r2, [pc, #608]	; (23f2cec <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
 23f2a8a:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 23f2a8e:	18d3      	adds	r3, r2, r3
 23f2a90:	930c      	str	r3, [sp, #48]	; 0x30
            writePixel(x + i, y + j, color);
 23f2a92:	b2b3      	uxth	r3, r6
 23f2a94:	9306      	str	r3, [sp, #24]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23f2a96:	9a05      	ldr	r2, [sp, #20]
 23f2a98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23f2a9a:	fb02 f905 	mul.w	r9, r2, r5
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23f2a9e:	5c9b      	ldrb	r3, [r3, r2]
 23f2aa0:	9307      	str	r3, [sp, #28]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23f2aa2:	b2ab      	uxth	r3, r5
 23f2aa4:	930b      	str	r3, [sp, #44]	; 0x2c
 23f2aa6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 23f2aaa:	9308      	str	r3, [sp, #32]
 23f2aac:	9b03      	ldr	r3, [sp, #12]
 23f2aae:	fa19 f983 	uxtah	r9, r9, r3
 23f2ab2:	fa0f f389 	sxth.w	r3, r9
 23f2ab6:	ee08 3a10 	vmov	s16, r3
 23f2aba:	2308      	movs	r3, #8
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 23f2abc:	f04f 0900 	mov.w	r9, #0
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23f2ac0:	930a      	str	r3, [sp, #40]	; 0x28
            writePixel(x + i, y + j, bg);
 23f2ac2:	9b03      	ldr	r3, [sp, #12]
 23f2ac4:	eb02 0a03 	add.w	sl, r2, r3
 23f2ac8:	fa0f fa8a 	sxth.w	sl, sl
        if (line & 1) {
 23f2acc:	9a07      	ldr	r2, [sp, #28]
            writePixel(x + i, y + j, color);
 23f2ace:	f8db 3000 	ldr.w	r3, [fp]
        if (line & 1) {
 23f2ad2:	07d2      	lsls	r2, r2, #31
 23f2ad4:	d552      	bpl.n	23f2b7c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
          if (size_x == 1 && size_y == 1)
 23f2ad6:	2d01      	cmp	r5, #1
            writePixel(x + i, y + j, color);
 23f2ad8:	fa1f f289 	uxth.w	r2, r9
          if (size_x == 1 && size_y == 1)
 23f2adc:	d13e      	bne.n	23f2b5c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
 23f2ade:	2c01      	cmp	r4, #1
 23f2ae0:	d13c      	bne.n	23f2b5c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
            writePixel(x + i, y + j, color);
 23f2ae2:	699b      	ldr	r3, [r3, #24]
 23f2ae4:	9906      	ldr	r1, [sp, #24]
 23f2ae6:	461f      	mov	r7, r3
 23f2ae8:	9b04      	ldr	r3, [sp, #16]
 23f2aea:	440a      	add	r2, r1
            writePixel(x + i, y + j, bg);
 23f2aec:	4651      	mov	r1, sl
 23f2aee:	4658      	mov	r0, fp
 23f2af0:	b212      	sxth	r2, r2
 23f2af2:	47b8      	blx	r7
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 23f2af4:	f109 0301 	add.w	r3, r9, #1
 23f2af8:	fa4f f983 	sxtb.w	r9, r3
 23f2afc:	9b07      	ldr	r3, [sp, #28]
 23f2afe:	085b      	lsrs	r3, r3, #1
 23f2b00:	9307      	str	r3, [sp, #28]
 23f2b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23f2b04:	3b01      	subs	r3, #1
 23f2b06:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23f2b0a:	930a      	str	r3, [sp, #40]	; 0x28
 23f2b0c:	d1de      	bne.n	23f2acc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 23f2b0e:	9f05      	ldr	r7, [sp, #20]
 23f2b10:	3701      	adds	r7, #1
 23f2b12:	b27b      	sxtb	r3, r7
 23f2b14:	9305      	str	r3, [sp, #20]
 23f2b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23f2b18:	3b01      	subs	r3, #1
 23f2b1a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23f2b1e:	9309      	str	r3, [sp, #36]	; 0x24
 23f2b20:	d1b9      	bne.n	23f2a96 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
    if (bg != color) { // If opaque, draw vertical line for last column
 23f2b22:	9b04      	ldr	r3, [sp, #16]
 23f2b24:	4543      	cmp	r3, r8
 23f2b26:	d00f      	beq.n	23f2b48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
      if (size_x == 1 && size_y == 1)
 23f2b28:	2d01      	cmp	r5, #1
        writeFastVLine(x + 5, y, 8, bg);
 23f2b2a:	f8db 3000 	ldr.w	r3, [fp]
      if (size_x == 1 && size_y == 1)
 23f2b2e:	d13b      	bne.n	23f2ba8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
 23f2b30:	2c01      	cmp	r4, #1
 23f2b32:	d139      	bne.n	23f2ba8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
        writeFastVLine(x + 5, y, 8, bg);
 23f2b34:	9908      	ldr	r1, [sp, #32]
 23f2b36:	f8cd 8000 	str.w	r8, [sp]
 23f2b3a:	3105      	adds	r1, #5
 23f2b3c:	6a1c      	ldr	r4, [r3, #32]
 23f2b3e:	4632      	mov	r2, r6
 23f2b40:	2308      	movs	r3, #8
 23f2b42:	4658      	mov	r0, fp
 23f2b44:	b209      	sxth	r1, r1
 23f2b46:	47a0      	blx	r4
    endWrite();
 23f2b48:	4658      	mov	r0, fp
 23f2b4a:	f8db 3000 	ldr.w	r3, [fp]
 23f2b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23f2b50:	b011      	add	sp, #68	; 0x44
 23f2b52:	ecbd 8b02 	vpop	{d8}
 23f2b56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
 23f2b5a:	4718      	bx	r3
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 23f2b5c:	fb14 f202 	smulbb	r2, r4, r2
 23f2b60:	9906      	ldr	r1, [sp, #24]
 23f2b62:	440a      	add	r2, r1
 23f2b64:	9904      	ldr	r1, [sp, #16]
 23f2b66:	9101      	str	r1, [sp, #4]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23f2b68:	9400      	str	r4, [sp, #0]
 23f2b6a:	69db      	ldr	r3, [r3, #28]
 23f2b6c:	ee18 1a10 	vmov	r1, s16
 23f2b70:	461f      	mov	r7, r3
 23f2b72:	4658      	mov	r0, fp
 23f2b74:	462b      	mov	r3, r5
 23f2b76:	b212      	sxth	r2, r2
 23f2b78:	47b8      	blx	r7
 23f2b7a:	e7bb      	b.n	23f2af4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
        } else if (bg != color) {
 23f2b7c:	9a04      	ldr	r2, [sp, #16]
 23f2b7e:	4542      	cmp	r2, r8
 23f2b80:	d0b8      	beq.n	23f2af4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
          if (size_x == 1 && size_y == 1)
 23f2b82:	2d01      	cmp	r5, #1
            writePixel(x + i, y + j, color);
 23f2b84:	fa1f f289 	uxth.w	r2, r9
          if (size_x == 1 && size_y == 1)
 23f2b88:	d107      	bne.n	23f2b9a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
 23f2b8a:	2c01      	cmp	r4, #1
 23f2b8c:	d105      	bne.n	23f2b9a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
            writePixel(x + i, y + j, bg);
 23f2b8e:	699b      	ldr	r3, [r3, #24]
 23f2b90:	9906      	ldr	r1, [sp, #24]
 23f2b92:	461f      	mov	r7, r3
 23f2b94:	440a      	add	r2, r1
 23f2b96:	4643      	mov	r3, r8
 23f2b98:	e7a8      	b.n	23f2aec <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23f2b9a:	fb14 f202 	smulbb	r2, r4, r2
 23f2b9e:	9906      	ldr	r1, [sp, #24]
 23f2ba0:	f8cd 8004 	str.w	r8, [sp, #4]
 23f2ba4:	440a      	add	r2, r1
 23f2ba6:	e7df      	b.n	23f2b68 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 23f2ba8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23f2baa:	00e4      	lsls	r4, r4, #3
 23f2bac:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 23f2bb0:	9a08      	ldr	r2, [sp, #32]
 23f2bb2:	f8cd 8004 	str.w	r8, [sp, #4]
 23f2bb6:	440a      	add	r2, r1
 23f2bb8:	4611      	mov	r1, r2
 23f2bba:	9400      	str	r4, [sp, #0]
 23f2bbc:	69dc      	ldr	r4, [r3, #28]
 23f2bbe:	4632      	mov	r2, r6
 23f2bc0:	462b      	mov	r3, r5
 23f2bc2:	4658      	mov	r0, fp
 23f2bc4:	b209      	sxth	r1, r1
 23f2bc6:	47a0      	blx	r4
    endWrite();
 23f2bc8:	e7be      	b.n	23f2b48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23f2bca:	7a13      	ldrb	r3, [r2, #8]
  return gfxFont->glyph + c;
 23f2bcc:	6851      	ldr	r1, [r2, #4]
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23f2bce:	1aff      	subs	r7, r7, r3
  return gfxFont->bitmap;
 23f2bd0:	6812      	ldr	r2, [r2, #0]
  return gfxFont->glyph + c;
 23f2bd2:	b2ff      	uxtb	r7, r7
  return gfxFont->bitmap;
 23f2bd4:	920b      	str	r2, [sp, #44]	; 0x2c
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23f2bd6:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
  return gfxFont->glyph + c;
 23f2bda:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23f2bde:	9206      	str	r2, [sp, #24]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 23f2be0:	789a      	ldrb	r2, [r3, #2]
    if (size_x > 1 || size_y > 1) {
 23f2be2:	2d01      	cmp	r5, #1
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 23f2be4:	9209      	str	r2, [sp, #36]	; 0x24
 23f2be6:	78da      	ldrb	r2, [r3, #3]
           yo = pgm_read_byte(&glyph->yOffset);
 23f2be8:	f993 a006 	ldrsb.w	sl, [r3, #6]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 23f2bec:	920c      	str	r2, [sp, #48]	; 0x30
    int8_t xo = pgm_read_byte(&glyph->xOffset),
 23f2bee:	f993 2005 	ldrsb.w	r2, [r3, #5]
 23f2bf2:	920a      	str	r2, [sp, #40]	; 0x28
    if (size_x > 1 || size_y > 1) {
 23f2bf4:	d801      	bhi.n	23f2bfa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
 23f2bf6:	2c01      	cmp	r4, #1
 23f2bf8:	d957      	bls.n	23f2caa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
      xo16 = xo;
 23f2bfa:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 23f2bfe:	9308      	str	r3, [sp, #32]
      yo16 = yo;
 23f2c00:	fa0f f38a 	sxth.w	r3, sl
 23f2c04:	9307      	str	r3, [sp, #28]
    uint8_t xx, yy, bits = 0, bit = 0;
 23f2c06:	f04f 0800 	mov.w	r8, #0
 23f2c0a:	46c1      	mov	r9, r8
    for (yy = 0; yy < h; yy++) {
 23f2c0c:	4647      	mov	r7, r8
    startWrite();
 23f2c0e:	f8db 3000 	ldr.w	r3, [fp]
 23f2c12:	4658      	mov	r0, fp
 23f2c14:	695b      	ldr	r3, [r3, #20]
 23f2c16:	4798      	blx	r3
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23f2c18:	b2b3      	uxth	r3, r6
 23f2c1a:	930e      	str	r3, [sp, #56]	; 0x38
            writePixel(x + xo + xx, y + yo + yy, color);
 23f2c1c:	fa1a f386 	uxtah	r3, sl, r6
 23f2c20:	930f      	str	r3, [sp, #60]	; 0x3c
    for (yy = 0; yy < h; yy++) {
 23f2c22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23f2c24:	429f      	cmp	r7, r3
 23f2c26:	d28f      	bcs.n	23f2b48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23f2c28:	9b07      	ldr	r3, [sp, #28]
 23f2c2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 23f2c2c:	443b      	add	r3, r7
 23f2c2e:	fb03 2304 	mla	r3, r3, r4, r2
      for (xx = 0; xx < w; xx++) {
 23f2c32:	2200      	movs	r2, #0
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23f2c34:	b21b      	sxth	r3, r3
 23f2c36:	ee08 3a10 	vmov	s16, r3
 23f2c3a:	4643      	mov	r3, r8
      for (xx = 0; xx < w; xx++) {
 23f2c3c:	9205      	str	r2, [sp, #20]
            writePixel(x + xo + xx, y + yo + yy, color);
 23f2c3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 23f2c40:	eb02 0a07 	add.w	sl, r2, r7
 23f2c44:	fa0f fa8a 	sxth.w	sl, sl
      for (xx = 0; xx < w; xx++) {
 23f2c48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23f2c4a:	9905      	ldr	r1, [sp, #20]
 23f2c4c:	4291      	cmp	r1, r2
 23f2c4e:	d241      	bcs.n	23f2cd4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
        if (!(bit++ & 7)) {
 23f2c50:	1c5a      	adds	r2, r3, #1
 23f2c52:	b2d2      	uxtb	r2, r2
 23f2c54:	075b      	lsls	r3, r3, #29
 23f2c56:	920d      	str	r2, [sp, #52]	; 0x34
 23f2c58:	d107      	bne.n	23f2c6a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
          bits = pgm_read_byte(&bitmap[bo++]);
 23f2c5a:	9b06      	ldr	r3, [sp, #24]
 23f2c5c:	9906      	ldr	r1, [sp, #24]
 23f2c5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23f2c60:	3301      	adds	r3, #1
 23f2c62:	b29b      	uxth	r3, r3
 23f2c64:	f812 9001 	ldrb.w	r9, [r2, r1]
 23f2c68:	9306      	str	r3, [sp, #24]
        if (bits & 0x80) {
 23f2c6a:	f019 0f80 	tst.w	r9, #128	; 0x80
 23f2c6e:	d012      	beq.n	23f2c96 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
          if (size_x == 1 && size_y == 1) {
 23f2c70:	2d01      	cmp	r5, #1
            writePixel(x + xo + xx, y + yo + yy, color);
 23f2c72:	f8db 3000 	ldr.w	r3, [fp]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23f2c76:	f8bd 100c 	ldrh.w	r1, [sp, #12]
          if (size_x == 1 && size_y == 1) {
 23f2c7a:	d11a      	bne.n	23f2cb2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
 23f2c7c:	2c01      	cmp	r4, #1
 23f2c7e:	d118      	bne.n	23f2cb2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
            writePixel(x + xo + xx, y + yo + yy, color);
 23f2c80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23f2c82:	699b      	ldr	r3, [r3, #24]
 23f2c84:	4411      	add	r1, r2
 23f2c86:	9a05      	ldr	r2, [sp, #20]
 23f2c88:	461e      	mov	r6, r3
 23f2c8a:	4411      	add	r1, r2
 23f2c8c:	4658      	mov	r0, fp
 23f2c8e:	4652      	mov	r2, sl
 23f2c90:	9b04      	ldr	r3, [sp, #16]
 23f2c92:	b209      	sxth	r1, r1
 23f2c94:	47b0      	blx	r6
      for (xx = 0; xx < w; xx++) {
 23f2c96:	9e05      	ldr	r6, [sp, #20]
        bits <<= 1;
 23f2c98:	ea4f 0949 	mov.w	r9, r9, lsl #1
      for (xx = 0; xx < w; xx++) {
 23f2c9c:	3601      	adds	r6, #1
 23f2c9e:	b2f3      	uxtb	r3, r6
 23f2ca0:	9305      	str	r3, [sp, #20]
        bits <<= 1;
 23f2ca2:	fa5f f989 	uxtb.w	r9, r9
        if (!(bit++ & 7)) {
 23f2ca6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
      for (xx = 0; xx < w; xx++) {
 23f2ca8:	e7ce      	b.n	23f2c48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
    int16_t xo16 = 0, yo16 = 0;
 23f2caa:	2300      	movs	r3, #0
 23f2cac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 23f2cb0:	e7a9      	b.n	23f2c06 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23f2cb2:	9805      	ldr	r0, [sp, #20]
 23f2cb4:	9a08      	ldr	r2, [sp, #32]
 23f2cb6:	4402      	add	r2, r0
 23f2cb8:	fb02 1105 	mla	r1, r2, r5, r1
 23f2cbc:	9a04      	ldr	r2, [sp, #16]
 23f2cbe:	4658      	mov	r0, fp
 23f2cc0:	e9cd 4200 	strd	r4, r2, [sp]
 23f2cc4:	69db      	ldr	r3, [r3, #28]
 23f2cc6:	ee18 2a10 	vmov	r2, s16
 23f2cca:	461e      	mov	r6, r3
 23f2ccc:	b209      	sxth	r1, r1
 23f2cce:	462b      	mov	r3, r5
 23f2cd0:	47b0      	blx	r6
 23f2cd2:	e7e0      	b.n	23f2c96 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
 23f2cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    for (yy = 0; yy < h; yy++) {
 23f2cd6:	3701      	adds	r7, #1
 23f2cd8:	4498      	add	r8, r3
 23f2cda:	fa5f f888 	uxtb.w	r8, r8
 23f2cde:	b2ff      	uxtb	r7, r7
 23f2ce0:	e79f      	b.n	23f2c22 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
 23f2ce2:	b011      	add	sp, #68	; 0x44
 23f2ce4:	ecbd 8b02 	vpop	{d8}
 23f2ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f2cec:	023fecc0 	.word	0x023fecc0

023f2cf0 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
 23f2cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!gfxFont) { // 'Classic' built-in font
 23f2cf2:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
 23f2cf4:	4604      	mov	r4, r0
 23f2cf6:	460b      	mov	r3, r1
 23f2cf8:	b085      	sub	sp, #20
  if (!gfxFont) { // 'Classic' built-in font
 23f2cfa:	2a00      	cmp	r2, #0
 23f2cfc:	d134      	bne.n	23f2d68 <_ZN12Adafruit_GFX5writeEh+0x78>
    if (c == '\n') {              // Newline?
 23f2cfe:	290a      	cmp	r1, #10
 23f2d00:	d108      	bne.n	23f2d14 <_ZN12Adafruit_GFX5writeEh+0x24>
      cursor_y += textsize_y * 8; // advance y one line
 23f2d02:	8a43      	ldrh	r3, [r0, #18]
      cursor_x = 0;               // Reset x to zero,
 23f2d04:	8202      	strh	r2, [r0, #16]
      cursor_y += textsize_y * 8; // advance y one line
 23f2d06:	7e42      	ldrb	r2, [r0, #25]
 23f2d08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
      cursor_y +=
 23f2d0c:	8263      	strh	r3, [r4, #18]
}
 23f2d0e:	2001      	movs	r0, #1
 23f2d10:	b005      	add	sp, #20
 23f2d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (c != '\r') {       // Ignore carriage returns
 23f2d14:	290d      	cmp	r1, #13
 23f2d16:	d0fa      	beq.n	23f2d0e <_ZN12Adafruit_GFX5writeEh+0x1e>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23f2d18:	7ee1      	ldrb	r1, [r4, #27]
 23f2d1a:	7e00      	ldrb	r0, [r0, #24]
      cursor_y += textsize_y * 8; // advance y one line
 23f2d1c:	7e65      	ldrb	r5, [r4, #25]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23f2d1e:	b171      	cbz	r1, 23f2d3e <_ZN12Adafruit_GFX5writeEh+0x4e>
 23f2d20:	2106      	movs	r1, #6
 23f2d22:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 23f2d26:	fb11 6100 	smlabb	r1, r1, r0, r6
 23f2d2a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 23f2d2e:	42b1      	cmp	r1, r6
      cursor_y += textsize_y * 8; // advance y one line
 23f2d30:	bfc1      	itttt	gt
 23f2d32:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
        cursor_x = 0;                                       // Reset x to zero,
 23f2d36:	8222      	strhgt	r2, [r4, #16]
        cursor_y += textsize_y * 8; // advance y one line
 23f2d38:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
 23f2d3c:	8262      	strhgt	r2, [r4, #18]
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 23f2d3e:	8ae2      	ldrh	r2, [r4, #22]
 23f2d40:	e9cd 0502 	strd	r0, r5, [sp, #8]
 23f2d44:	9201      	str	r2, [sp, #4]
 23f2d46:	8aa2      	ldrh	r2, [r4, #20]
 23f2d48:	4620      	mov	r0, r4
 23f2d4a:	9200      	str	r2, [sp, #0]
 23f2d4c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23f2d50:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23f2d54:	f7ff fe5e 	bl	23f2a14 <_ZN12Adafruit_GFX8drawCharEsshtthh>
      cursor_x += textsize_x * 6; // Advance x one char
 23f2d58:	7e23      	ldrb	r3, [r4, #24]
 23f2d5a:	8a22      	ldrh	r2, [r4, #16]
 23f2d5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f2d60:	eb02 0343 	add.w	r3, r2, r3, lsl #1
        cursor_x +=
 23f2d64:	8223      	strh	r3, [r4, #16]
 23f2d66:	e7d2      	b.n	23f2d0e <_ZN12Adafruit_GFX5writeEh+0x1e>
    if (c == '\n') {
 23f2d68:	290a      	cmp	r1, #10
 23f2d6a:	d107      	bne.n	23f2d7c <_ZN12Adafruit_GFX5writeEh+0x8c>
      cursor_x = 0;
 23f2d6c:	2300      	movs	r3, #0
 23f2d6e:	8203      	strh	r3, [r0, #16]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23f2d70:	7e41      	ldrb	r1, [r0, #25]
 23f2d72:	7b12      	ldrb	r2, [r2, #12]
      cursor_y +=
 23f2d74:	8a43      	ldrh	r3, [r0, #18]
 23f2d76:	fb01 3302 	mla	r3, r1, r2, r3
 23f2d7a:	e7c7      	b.n	23f2d0c <_ZN12Adafruit_GFX5writeEh+0x1c>
    } else if (c != '\r') {
 23f2d7c:	290d      	cmp	r1, #13
 23f2d7e:	d0c6      	beq.n	23f2d0e <_ZN12Adafruit_GFX5writeEh+0x1e>
      uint8_t first = pgm_read_byte(&gfxFont->first);
 23f2d80:	7a15      	ldrb	r5, [r2, #8]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 23f2d82:	42a9      	cmp	r1, r5
 23f2d84:	d3c3      	bcc.n	23f2d0e <_ZN12Adafruit_GFX5writeEh+0x1e>
 23f2d86:	7a91      	ldrb	r1, [r2, #10]
 23f2d88:	4299      	cmp	r1, r3
 23f2d8a:	d3c0      	bcc.n	23f2d0e <_ZN12Adafruit_GFX5writeEh+0x1e>
  return gfxFont->glyph + c;
 23f2d8c:	6851      	ldr	r1, [r2, #4]
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
 23f2d8e:	1b5d      	subs	r5, r3, r5
  return gfxFont->glyph + c;
 23f2d90:	b2ed      	uxtb	r5, r5
 23f2d92:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
        uint8_t w = pgm_read_byte(&glyph->width),
 23f2d96:	78a8      	ldrb	r0, [r5, #2]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
 23f2d98:	b328      	cbz	r0, 23f2de6 <_ZN12Adafruit_GFX5writeEh+0xf6>
 23f2d9a:	78e9      	ldrb	r1, [r5, #3]
 23f2d9c:	b319      	cbz	r1, 23f2de6 <_ZN12Adafruit_GFX5writeEh+0xf6>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23f2d9e:	7ee1      	ldrb	r1, [r4, #27]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23f2da0:	7e26      	ldrb	r6, [r4, #24]
      cursor_y += textsize_y * 8; // advance y one line
 23f2da2:	7e67      	ldrb	r7, [r4, #25]
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23f2da4:	b191      	cbz	r1, 23f2dcc <_ZN12Adafruit_GFX5writeEh+0xdc>
 23f2da6:	f995 1005 	ldrsb.w	r1, [r5, #5]
 23f2daa:	4408      	add	r0, r1
 23f2dac:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23f2db0:	fb06 1100 	mla	r1, r6, r0, r1
 23f2db4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 23f2db8:	4281      	cmp	r1, r0
 23f2dba:	dd07      	ble.n	23f2dcc <_ZN12Adafruit_GFX5writeEh+0xdc>
            cursor_x = 0;
 23f2dbc:	2000      	movs	r0, #0
 23f2dbe:	8220      	strh	r0, [r4, #16]
      cursor_y += textsize_y * 8; // advance y one line
 23f2dc0:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23f2dc4:	7b12      	ldrb	r2, [r2, #12]
            cursor_y += (int16_t)textsize_y *
 23f2dc6:	fb02 1207 	mla	r2, r2, r7, r1
 23f2dca:	8262      	strh	r2, [r4, #18]
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 23f2dcc:	8ae2      	ldrh	r2, [r4, #22]
 23f2dce:	4620      	mov	r0, r4
 23f2dd0:	9201      	str	r2, [sp, #4]
 23f2dd2:	8aa2      	ldrh	r2, [r4, #20]
 23f2dd4:	e9cd 6702 	strd	r6, r7, [sp, #8]
 23f2dd8:	9200      	str	r2, [sp, #0]
 23f2dda:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23f2dde:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23f2de2:	f7ff fe17 	bl	23f2a14 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 23f2de6:	7929      	ldrb	r1, [r5, #4]
 23f2de8:	7e22      	ldrb	r2, [r4, #24]
        cursor_x +=
 23f2dea:	8a23      	ldrh	r3, [r4, #16]
 23f2dec:	fb01 3302 	mla	r3, r1, r2, r3
 23f2df0:	e7b8      	b.n	23f2d64 <_ZN12Adafruit_GFX5writeEh+0x74>

023f2df2 <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize_x = (s_x > 0) ? s_x : 1;
 23f2df2:	2901      	cmp	r1, #1
 23f2df4:	bf38      	it	cc
 23f2df6:	2101      	movcc	r1, #1
 23f2df8:	7601      	strb	r1, [r0, #24]
  textsize_y = (s_y > 0) ? s_y : 1;
 23f2dfa:	7641      	strb	r1, [r0, #25]
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
 23f2dfc:	4770      	bx	lr

023f2dfe <_ZN16Adafruit_HDC302xC1Ev>:
#include "Adafruit_HDC302x.h"

/**
 * Constructor for the HDC302x sensor driver.
 */
Adafruit_HDC302x::Adafruit_HDC302x() { currentAutoMode = EXIT_AUTO_MODE; }
 23f2dfe:	2200      	movs	r2, #0
 23f2e00:	6002      	str	r2, [r0, #0]
 23f2e02:	f243 0293 	movw	r2, #12435	; 0x3093
 23f2e06:	8082      	strh	r2, [r0, #4]
 23f2e08:	4770      	bx	lr

023f2e0a <_ZN16Adafruit_HDC302x12writeCommandEt>:
 * Writes a command to the HDC302x sensor.
 *
 * @param command The command to write.
 * @return true if the command was written successfully, otherwise false.
 */
bool Adafruit_HDC302x::writeCommand(uint16_t command) {
 23f2e0a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[2];
  buffer[0] = (uint8_t)(command >> 8);   // High byte
 23f2e0c:	0a0b      	lsrs	r3, r1, #8
 23f2e0e:	f88d 300c 	strb.w	r3, [sp, #12]
  buffer[1] = (uint8_t)(command & 0xFF); // Low byte

  return i2c_dev->write(buffer, 2);
 23f2e12:	2300      	movs	r3, #0
 23f2e14:	e9cd 3300 	strd	r3, r3, [sp]
  buffer[1] = (uint8_t)(command & 0xFF); // Low byte
 23f2e18:	f88d 100d 	strb.w	r1, [sp, #13]
  return i2c_dev->write(buffer, 2);
 23f2e1c:	2301      	movs	r3, #1
 23f2e1e:	2202      	movs	r2, #2
 23f2e20:	a903      	add	r1, sp, #12
 23f2e22:	6800      	ldr	r0, [r0, #0]
 23f2e24:	f7ff fa80 	bl	23f2328 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
 23f2e28:	b005      	add	sp, #20
 23f2e2a:	f85d fb04 	ldr.w	pc, [sp], #4

023f2e2e <_ZN16Adafruit_HDC302x11setAutoModeE13hdcAutoMode_t>:
  currentAutoMode = mode;
 23f2e2e:	8081      	strh	r1, [r0, #4]
  writeCommand(mode);
 23f2e30:	f7ff bfeb 	b.w	23f2e0a <_ZN16Adafruit_HDC302x12writeCommandEt>

023f2e34 <_ZN16Adafruit_HDC302x19clearStatusRegisterEv>:
  return writeCommand(HDC302x_Commands::CLEAR_STATUS_REGISTER);
 23f2e34:	f243 0141 	movw	r1, #12353	; 0x3041
 23f2e38:	f7ff bfe7 	b.w	23f2e0a <_ZN16Adafruit_HDC302x12writeCommandEt>

023f2e3c <_ZN16Adafruit_HDC302x5resetEv>:
  return writeCommand(HDC302x_Commands::SOFT_RESET);
 23f2e3c:	f243 01a2 	movw	r1, #12450	; 0x30a2
 23f2e40:	f7ff bfe3 	b.w	23f2e0a <_ZN16Adafruit_HDC302x12writeCommandEt>

023f2e44 <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi>:
 * @param len Length of the data array.
 * @return uint8_t The calculated CRC-8 value.
 */
uint8_t Adafruit_HDC302x::calculateCRC8(const uint8_t *data, int len) {
  uint8_t crc = 0xFF; // Typical initial value
  for (int i = 0; i < len; i++) {
 23f2e44:	2300      	movs	r3, #0
  uint8_t crc = 0xFF; // Typical initial value
 23f2e46:	20ff      	movs	r0, #255	; 0xff
uint8_t Adafruit_HDC302x::calculateCRC8(const uint8_t *data, int len) {
 23f2e48:	b510      	push	{r4, lr}
  for (int i = 0; i < len; i++) {
 23f2e4a:	4293      	cmp	r3, r2
 23f2e4c:	da0e      	bge.n	23f2e6c <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi+0x28>
    crc ^= data[i];               // XOR byte into least sig. byte of crc
 23f2e4e:	5ccc      	ldrb	r4, [r1, r3]
 23f2e50:	4060      	eors	r0, r4
 23f2e52:	2408      	movs	r4, #8
    for (int j = 8; j > 0; j--) { // Loop over each bit
      if (crc & 0x80) {           // If the uppermost bit is 1...
 23f2e54:	f010 0f80 	tst.w	r0, #128	; 0x80
 23f2e58:	ea4f 0040 	mov.w	r0, r0, lsl #1
        crc = (crc << 1) ^ 0x31;  // Polynomial used by HDC302x
 23f2e5c:	bf18      	it	ne
 23f2e5e:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
    for (int j = 8; j > 0; j--) { // Loop over each bit
 23f2e62:	3c01      	subs	r4, #1
      } else {
        crc = (crc << 1);
 23f2e64:	b2c0      	uxtb	r0, r0
    for (int j = 8; j > 0; j--) { // Loop over each bit
 23f2e66:	d1f5      	bne.n	23f2e54 <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi+0x10>
  for (int i = 0; i < len; i++) {
 23f2e68:	3301      	adds	r3, #1
 23f2e6a:	e7ee      	b.n	23f2e4a <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi+0x6>
      }
    }
  }
  return crc; // Final XOR value can also be applied if specified by device
}
 23f2e6c:	bd10      	pop	{r4, pc}
	...

023f2e70 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_>:
                                          double &RH) {
 23f2e70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f2e74:	4605      	mov	r5, r0
 23f2e76:	4617      	mov	r7, r2
 23f2e78:	461e      	mov	r6, r3
  if (!writeCommand(command)) {
 23f2e7a:	f7ff ffc6 	bl	23f2e0a <_ZN16Adafruit_HDC302x12writeCommandEt>
 23f2e7e:	4604      	mov	r4, r0
 23f2e80:	2800      	cmp	r0, #0
 23f2e82:	d04a      	beq.n	23f2f1a <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xaa>
 23f2e84:	f04f 080a 	mov.w	r8, #10
  while (!i2c_dev->read(buffer, 6)) {
 23f2e88:	2301      	movs	r3, #1
 23f2e8a:	2206      	movs	r2, #6
 23f2e8c:	4669      	mov	r1, sp
 23f2e8e:	6828      	ldr	r0, [r5, #0]
 23f2e90:	f7ff fa7a 	bl	23f2388 <_ZN18Adafruit_I2CDevice4readEPhjb>
 23f2e94:	4604      	mov	r4, r0
 23f2e96:	b930      	cbnz	r0, 23f2ea6 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0x36>
    if (++retries >= MAX_RETRIES) {
 23f2e98:	f1b8 0801 	subs.w	r8, r8, #1
 23f2e9c:	d03d      	beq.n	23f2f1a <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xaa>
    delay(1); // Wait and retry if NAK received
 23f2e9e:	2001      	movs	r0, #1
 23f2ea0:	f005 fa3c 	bl	23f831c <delay>
  while (!i2c_dev->read(buffer, 6)) {
 23f2ea4:	e7f0      	b.n	23f2e88 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0x18>
  if (calculateCRC8(buffer, 2) != buffer[2]) {
 23f2ea6:	2202      	movs	r2, #2
 23f2ea8:	4669      	mov	r1, sp
 23f2eaa:	4628      	mov	r0, r5
 23f2eac:	f7ff ffca 	bl	23f2e44 <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi>
 23f2eb0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 23f2eb4:	4283      	cmp	r3, r0
 23f2eb6:	d134      	bne.n	23f2f22 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xb2>
  if (calculateCRC8(buffer + 3, 2) != buffer[5]) {
 23f2eb8:	4628      	mov	r0, r5
 23f2eba:	f10d 0103 	add.w	r1, sp, #3
 23f2ebe:	f7ff ffc1 	bl	23f2e44 <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi>
 23f2ec2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 23f2ec6:	4283      	cmp	r3, r0
 23f2ec8:	d12b      	bne.n	23f2f22 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xb2>
  temp = ((rawTemperature / 65535.0) * 175.0) - 45.0;
 23f2eca:	f8bd 0000 	ldrh.w	r0, [sp]
 23f2ece:	f8bd 5003 	ldrh.w	r5, [sp, #3]
 23f2ed2:	ba40      	rev16	r0, r0
 23f2ed4:	b280      	uxth	r0, r0
 23f2ed6:	f7f3 fdfd 	bl	23e6ad4 <__aeabi_i2d>
 23f2eda:	a313      	add	r3, pc, #76	; (adr r3, 23f2f28 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xb8>)
 23f2edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f2ee0:	f7f3 ff8c 	bl	23e6dfc <__aeabi_ddiv>
 23f2ee4:	a314      	add	r3, pc, #80	; (adr r3, 23f2f38 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xc8>)
 23f2ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f2eea:	f7f3 fe5d 	bl	23e6ba8 <__aeabi_dmul>
 23f2eee:	2200      	movs	r2, #0
 23f2ef0:	4b0f      	ldr	r3, [pc, #60]	; (23f2f30 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xc0>)
 23f2ef2:	f7f3 fca1 	bl	23e6838 <__aeabi_dsub>
 23f2ef6:	ba6d      	rev16	r5, r5
 23f2ef8:	b2ad      	uxth	r5, r5
 23f2efa:	e9c7 0100 	strd	r0, r1, [r7]
  RH = (rawHumidity / 65535.0) * 100.0;
 23f2efe:	4628      	mov	r0, r5
 23f2f00:	f7f3 fde8 	bl	23e6ad4 <__aeabi_i2d>
 23f2f04:	a308      	add	r3, pc, #32	; (adr r3, 23f2f28 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xb8>)
 23f2f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f2f0a:	f7f3 ff77 	bl	23e6dfc <__aeabi_ddiv>
 23f2f0e:	2200      	movs	r2, #0
 23f2f10:	4b08      	ldr	r3, [pc, #32]	; (23f2f34 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xc4>)
 23f2f12:	f7f3 fe49 	bl	23e6ba8 <__aeabi_dmul>
 23f2f16:	e9c6 0100 	strd	r0, r1, [r6]
}
 23f2f1a:	4620      	mov	r0, r4
 23f2f1c:	b002      	add	sp, #8
 23f2f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return false; // CRC check failed
 23f2f22:	2400      	movs	r4, #0
 23f2f24:	e7f9      	b.n	23f2f1a <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xaa>
 23f2f26:	bf00      	nop
 23f2f28:	00000000 	.word	0x00000000
 23f2f2c:	40efffe0 	.word	0x40efffe0
 23f2f30:	40468000 	.word	0x40468000
 23f2f34:	40590000 	.word	0x40590000
 23f2f38:	00000000 	.word	0x00000000
 23f2f3c:	4065e000 	.word	0x4065e000

023f2f40 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>:
    double &temp, double &RH, hdcTriggerMode_t mode = TRIGGERMODE_LP0) {
 23f2f40:	b410      	push	{r4}
 23f2f42:	460c      	mov	r4, r1
 23f2f44:	4619      	mov	r1, r3
  return sendCommandReadTRH(static_cast<uint16_t>(mode), temp, RH);
 23f2f46:	4613      	mov	r3, r2
 23f2f48:	4622      	mov	r2, r4
}
 23f2f4a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return sendCommandReadTRH(static_cast<uint16_t>(mode), temp, RH);
 23f2f4e:	f7ff bf8f 	b.w	23f2e70 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_>

023f2f52 <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt>:
bool Adafruit_HDC302x::writeCommandReadData(uint16_t command, uint16_t &data) {
 23f2f52:	b5f0      	push	{r4, r5, r6, r7, lr}
  cmd_buffer[0] = (uint8_t)(command >> 8);   // High byte of the command
 23f2f54:	0a0b      	lsrs	r3, r1, #8
bool Adafruit_HDC302x::writeCommandReadData(uint16_t command, uint16_t &data) {
 23f2f56:	b085      	sub	sp, #20
  cmd_buffer[0] = (uint8_t)(command >> 8);   // High byte of the command
 23f2f58:	f88d 3008 	strb.w	r3, [sp, #8]
  if (!i2c_dev->write_then_read(cmd_buffer, 2, data_buffer, 3)) {
 23f2f5c:	2700      	movs	r7, #0
 23f2f5e:	2303      	movs	r3, #3
 23f2f60:	e9cd 3700 	strd	r3, r7, [sp]
  cmd_buffer[1] = (uint8_t)(command & 0xFF); // Low byte of the command
 23f2f64:	f88d 1009 	strb.w	r1, [sp, #9]
bool Adafruit_HDC302x::writeCommandReadData(uint16_t command, uint16_t &data) {
 23f2f68:	4605      	mov	r5, r0
 23f2f6a:	4616      	mov	r6, r2
  if (!i2c_dev->write_then_read(cmd_buffer, 2, data_buffer, 3)) {
 23f2f6c:	6800      	ldr	r0, [r0, #0]
 23f2f6e:	2202      	movs	r2, #2
 23f2f70:	ab03      	add	r3, sp, #12
 23f2f72:	a902      	add	r1, sp, #8
 23f2f74:	f7ff fa2a 	bl	23f23cc <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
 23f2f78:	4604      	mov	r4, r0
 23f2f7a:	b160      	cbz	r0, 23f2f96 <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt+0x44>
  uint8_t calculated_crc = calculateCRC8(data_buffer, 2);
 23f2f7c:	2202      	movs	r2, #2
 23f2f7e:	4628      	mov	r0, r5
 23f2f80:	a903      	add	r1, sp, #12
 23f2f82:	f7ff ff5f 	bl	23f2e44 <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi>
  if (calculated_crc != data_buffer[2]) {
 23f2f86:	f89d 300e 	ldrb.w	r3, [sp, #14]
 23f2f8a:	4283      	cmp	r3, r0
 23f2f8c:	d106      	bne.n	23f2f9c <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt+0x4a>
  data = (uint16_t)(data_buffer[0] << 8 | data_buffer[1]);
 23f2f8e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 23f2f92:	ba5b      	rev16	r3, r3
 23f2f94:	8033      	strh	r3, [r6, #0]
}
 23f2f96:	4620      	mov	r0, r4
 23f2f98:	b005      	add	sp, #20
 23f2f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return false; // Communication failed
 23f2f9c:	463c      	mov	r4, r7
 23f2f9e:	e7fa      	b.n	23f2f96 <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt+0x44>

023f2fa0 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire>:
bool Adafruit_HDC302x::begin(uint8_t i2cAddr, TwoWire *wire) {
 23f2fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23f2fa2:	4604      	mov	r4, r0
  delay(5); // wait for device to be ready
 23f2fa4:	2005      	movs	r0, #5
bool Adafruit_HDC302x::begin(uint8_t i2cAddr, TwoWire *wire) {
 23f2fa6:	460e      	mov	r6, r1
 23f2fa8:	4617      	mov	r7, r2
  delay(5); // wait for device to be ready
 23f2faa:	f005 f9b7 	bl	23f831c <delay>
  if (i2c_dev) {
 23f2fae:	6820      	ldr	r0, [r4, #0]
 23f2fb0:	b110      	cbz	r0, 23f2fb8 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x18>
    delete i2c_dev;
 23f2fb2:	2110      	movs	r1, #16
 23f2fb4:	f7f4 fc61 	bl	23e787a <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(i2cAddr, wire);
 23f2fb8:	2010      	movs	r0, #16
 23f2fba:	f7f4 fc5a 	bl	23e7872 <_Znwj>
 23f2fbe:	4605      	mov	r5, r0
 23f2fc0:	b118      	cbz	r0, 23f2fca <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x2a>
 23f2fc2:	463a      	mov	r2, r7
 23f2fc4:	4631      	mov	r1, r6
 23f2fc6:	f7ff f984 	bl	23f22d2 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin()) {
 23f2fca:	2101      	movs	r1, #1
 23f2fcc:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(i2cAddr, wire);
 23f2fce:	6025      	str	r5, [r4, #0]
  if (!i2c_dev->begin()) {
 23f2fd0:	f7ff f99b 	bl	23f230a <_ZN18Adafruit_I2CDevice5beginEb>
 23f2fd4:	b918      	cbnz	r0, 23f2fde <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x3e>
    return false;
 23f2fd6:	2500      	movs	r5, #0
}
 23f2fd8:	4628      	mov	r0, r5
 23f2fda:	b003      	add	sp, #12
 23f2fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!reset()) {
 23f2fde:	4620      	mov	r0, r4
 23f2fe0:	f7ff ff2c 	bl	23f2e3c <_ZN16Adafruit_HDC302x5resetEv>
 23f2fe4:	2800      	cmp	r0, #0
 23f2fe6:	d0f6      	beq.n	23f2fd6 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x36>
  clearStatusRegister();
 23f2fe8:	4620      	mov	r0, r4
 23f2fea:	f7ff ff23 	bl	23f2e34 <_ZN16Adafruit_HDC302x19clearStatusRegisterEv>
  if (!writeCommandReadData(HDC302x_Commands::READ_MANUFACTURER_ID,
 23f2fee:	f243 7181 	movw	r1, #14209	; 0x3781
 23f2ff2:	4620      	mov	r0, r4
 23f2ff4:	f10d 0206 	add.w	r2, sp, #6
 23f2ff8:	f7ff ffab 	bl	23f2f52 <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt>
                            manufacturerID) ||
 23f2ffc:	4605      	mov	r5, r0
 23f2ffe:	2800      	cmp	r0, #0
 23f3000:	d0e9      	beq.n	23f2fd6 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x36>
 23f3002:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 23f3006:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 23f300a:	d1e4      	bne.n	23f2fd6 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x36>
  setAutoMode(EXIT_AUTO_MODE);
 23f300c:	f243 0193 	movw	r1, #12435	; 0x3093
 23f3010:	4620      	mov	r0, r4
 23f3012:	f7ff ff0c 	bl	23f2e2e <_ZN16Adafruit_HDC302x11setAutoModeE13hdcAutoMode_t>
  return true;
 23f3016:	e7df      	b.n	23f2fd8 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x38>

023f3018 <_ZN16Adafruit_HTU21DFC1Ev>:
#include "Adafruit_HTU21DF.h"

/**
 * Constructor for the HTU21DF driver.
 */
Adafruit_HTU21DF::Adafruit_HTU21DF() {
 23f3018:	2200      	movs	r2, #0
 23f301a:	6002      	str	r2, [r0, #0]
  /* Assign default values to internal tracking variables. */
  _last_humidity = 0.0f;
 23f301c:	2200      	movs	r2, #0
 23f301e:	6042      	str	r2, [r0, #4]
  _last_temp = 0.0f;
 23f3020:	6082      	str	r2, [r0, #8]
}
 23f3022:	4770      	bx	lr

023f3024 <_ZN16Adafruit_HTU21DF5resetEv>:
}

/**
 * Sends a 'reset' request to the HTU21DF, followed by a 15ms delay.
 */
void Adafruit_HTU21DF::reset(void) {
 23f3024:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t cmd = HTU21DF_RESET;
 23f3026:	23fe      	movs	r3, #254	; 0xfe
 23f3028:	f88d 300f 	strb.w	r3, [sp, #15]
  i2c_dev->write(&cmd, 1);
 23f302c:	2300      	movs	r3, #0
 23f302e:	e9cd 3300 	strd	r3, r3, [sp]
 23f3032:	2301      	movs	r3, #1
 23f3034:	f10d 010f 	add.w	r1, sp, #15
 23f3038:	461a      	mov	r2, r3
 23f303a:	6800      	ldr	r0, [r0, #0]
 23f303c:	f7ff f974 	bl	23f2328 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>

  delay(15);
 23f3040:	200f      	movs	r0, #15
 23f3042:	f005 f96b 	bl	23f831c <delay>
}
 23f3046:	b005      	add	sp, #20
 23f3048:	f85d fb04 	ldr.w	pc, [sp], #4

023f304c <_ZN16Adafruit_HTU21DF5beginEP7TwoWire>:
bool Adafruit_HTU21DF::begin(TwoWire *theWire) {
 23f304c:	b570      	push	{r4, r5, r6, lr}
 23f304e:	4604      	mov	r4, r0
  if (i2c_dev) {
 23f3050:	6800      	ldr	r0, [r0, #0]
bool Adafruit_HTU21DF::begin(TwoWire *theWire) {
 23f3052:	460e      	mov	r6, r1
 23f3054:	b088      	sub	sp, #32
  if (i2c_dev) {
 23f3056:	b110      	cbz	r0, 23f305e <_ZN16Adafruit_HTU21DF5beginEP7TwoWire+0x12>
    delete i2c_dev;
 23f3058:	2110      	movs	r1, #16
 23f305a:	f7f4 fc0e 	bl	23e787a <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(HTU21DF_I2CADDR, theWire);
 23f305e:	2010      	movs	r0, #16
 23f3060:	f7f4 fc07 	bl	23e7872 <_Znwj>
 23f3064:	4605      	mov	r5, r0
 23f3066:	b118      	cbz	r0, 23f3070 <_ZN16Adafruit_HTU21DF5beginEP7TwoWire+0x24>
 23f3068:	4632      	mov	r2, r6
 23f306a:	2140      	movs	r1, #64	; 0x40
 23f306c:	f7ff f931 	bl	23f22d2 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin()) {
 23f3070:	2101      	movs	r1, #1
 23f3072:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(HTU21DF_I2CADDR, theWire);
 23f3074:	6025      	str	r5, [r4, #0]
  if (!i2c_dev->begin()) {
 23f3076:	f7ff f948 	bl	23f230a <_ZN18Adafruit_I2CDevice5beginEb>
 23f307a:	b188      	cbz	r0, 23f30a0 <_ZN16Adafruit_HTU21DF5beginEP7TwoWire+0x54>
  reset();
 23f307c:	4620      	mov	r0, r4
 23f307e:	f7ff ffd1 	bl	23f3024 <_ZN16Adafruit_HTU21DF5resetEv>
      Adafruit_BusIO_Register(i2c_dev, HTU21DF_READREG);
 23f3082:	2301      	movs	r3, #1
 23f3084:	2200      	movs	r2, #0
 23f3086:	6821      	ldr	r1, [r4, #0]
 23f3088:	e9cd 2300 	strd	r2, r3, [sp]
 23f308c:	a802      	add	r0, sp, #8
 23f308e:	22e7      	movs	r2, #231	; 0xe7
 23f3090:	f7ff f80a 	bl	23f20a8 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return (reg.read() == 0x2); // after reset should be 0x2
 23f3094:	a802      	add	r0, sp, #8
 23f3096:	f7ff f8d5 	bl	23f2244 <_ZN23Adafruit_BusIO_Register4readEv>
 23f309a:	1e83      	subs	r3, r0, #2
 23f309c:	4258      	negs	r0, r3
 23f309e:	4158      	adcs	r0, r3
}
 23f30a0:	b008      	add	sp, #32
 23f30a2:	bd70      	pop	{r4, r5, r6, pc}

023f30a4 <_ZN16Adafruit_HTU21DF15readTemperatureEv>:
 * Performs a single temperature conversion in degrees Celsius.
 *
 * @return a single-precision (32-bit) float value indicating the measured
 *         temperature in degrees Celsius or NAN on failure.
 */
float Adafruit_HTU21DF::readTemperature(void) {
 23f30a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // OK lets ready!
  uint8_t cmd = HTU21DF_READTEMP;
 23f30a6:	23e3      	movs	r3, #227	; 0xe3
 23f30a8:	f88d 300b 	strb.w	r3, [sp, #11]
  if (!i2c_dev->write(&cmd, 1)) {
 23f30ac:	2300      	movs	r3, #0
 23f30ae:	e9cd 3300 	strd	r3, r3, [sp]
 23f30b2:	2301      	movs	r3, #1
float Adafruit_HTU21DF::readTemperature(void) {
 23f30b4:	4604      	mov	r4, r0
  if (!i2c_dev->write(&cmd, 1)) {
 23f30b6:	461a      	mov	r2, r3
 23f30b8:	6800      	ldr	r0, [r0, #0]
 23f30ba:	f10d 010b 	add.w	r1, sp, #11
 23f30be:	f7ff f933 	bl	23f2328 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 23f30c2:	b318      	cbz	r0, 23f310c <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x68>
    return NAN;
  }

  delay(50); // add delay between request and actual read!
 23f30c4:	2032      	movs	r0, #50	; 0x32
 23f30c6:	f005 f929 	bl	23f831c <delay>

  uint8_t buf[3];
  if (!i2c_dev->read(buf, 3)) {
 23f30ca:	2301      	movs	r3, #1
 23f30cc:	2203      	movs	r2, #3
 23f30ce:	6820      	ldr	r0, [r4, #0]
 23f30d0:	a903      	add	r1, sp, #12
 23f30d2:	f7ff f959 	bl	23f2388 <_ZN18Adafruit_I2CDevice4readEPhjb>
 23f30d6:	b1c8      	cbz	r0, 23f310c <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x68>
  }

  /* Read 16 bits of data, dropping the last two status bits. */
  uint16_t t = buf[0];
  t <<= 8;
  t |= buf[1] & 0b11111100;
 23f30d8:	f89d 300d 	ldrb.w	r3, [sp, #13]
  uint16_t t = buf[0];
 23f30dc:	f89d 200c 	ldrb.w	r2, [sp, #12]
  t |= buf[1] & 0b11111100;
 23f30e0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc

  // 3rd byte is the CRC

  float temp = t;
 23f30e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 23f30e8:	ee07 3a90 	vmov	s15, r3
  temp *= 175.72f;
 23f30ec:	ed9f 7a09 	vldr	s14, [pc, #36]	; 23f3114 <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x70>
  float temp = t;
 23f30f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
  temp /= 65536.0f;
  temp -= 46.85f;
 23f30f4:	ed9f 0a08 	vldr	s0, [pc, #32]	; 23f3118 <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x74>
  temp *= 175.72f;
 23f30f8:	ee67 7a87 	vmul.f32	s15, s15, s14
  temp -= 46.85f;
 23f30fc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 23f311c <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x78>
 23f3100:	eea7 0a87 	vfma.f32	s0, s15, s14

  /* Track the value internally in case we need to access it later. */
  _last_temp = temp;
 23f3104:	ed84 0a02 	vstr	s0, [r4, #8]

  return temp;
}
 23f3108:	b004      	add	sp, #16
 23f310a:	bd10      	pop	{r4, pc}
    return NAN;
 23f310c:	ed9f 0a04 	vldr	s0, [pc, #16]	; 23f3120 <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x7c>
 23f3110:	e7fa      	b.n	23f3108 <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x64>
 23f3112:	bf00      	nop
 23f3114:	432fb852 	.word	0x432fb852
 23f3118:	c23b6666 	.word	0xc23b6666
 23f311c:	37800000 	.word	0x37800000
 23f3120:	7fc00000 	.word	0x7fc00000

023f3124 <_ZN16Adafruit_HTU21DF12readHumidityEv>:
 * Performs a single relative humidity conversion.
 *
 * @return A single-precision (32-bit) float value indicating the relative
 *         humidity in percent (0..100.0%).
 */
float Adafruit_HTU21DF::readHumidity(void) {
 23f3124:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* Prepare the I2C request. */
  uint8_t cmd = HTU21DF_READHUM;
 23f3126:	23e5      	movs	r3, #229	; 0xe5
 23f3128:	f88d 300b 	strb.w	r3, [sp, #11]
  if (!i2c_dev->write(&cmd, 1)) {
 23f312c:	2300      	movs	r3, #0
 23f312e:	e9cd 3300 	strd	r3, r3, [sp]
 23f3132:	2301      	movs	r3, #1
float Adafruit_HTU21DF::readHumidity(void) {
 23f3134:	4604      	mov	r4, r0
  if (!i2c_dev->write(&cmd, 1)) {
 23f3136:	461a      	mov	r2, r3
 23f3138:	6800      	ldr	r0, [r0, #0]
 23f313a:	f10d 010b 	add.w	r1, sp, #11
 23f313e:	f7ff f8f3 	bl	23f2328 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 23f3142:	b318      	cbz	r0, 23f318c <_ZN16Adafruit_HTU21DF12readHumidityEv+0x68>
    return NAN;
  }

  /* Wait a bit for the conversion to complete. */
  delay(50);
 23f3144:	2032      	movs	r0, #50	; 0x32
 23f3146:	f005 f8e9 	bl	23f831c <delay>

  uint8_t buf[3];
  if (!i2c_dev->read(buf, 3)) {
 23f314a:	2301      	movs	r3, #1
 23f314c:	2203      	movs	r2, #3
 23f314e:	6820      	ldr	r0, [r4, #0]
 23f3150:	a903      	add	r1, sp, #12
 23f3152:	f7ff f919 	bl	23f2388 <_ZN18Adafruit_I2CDevice4readEPhjb>
 23f3156:	b1c8      	cbz	r0, 23f318c <_ZN16Adafruit_HTU21DF12readHumidityEv+0x68>
  }

  /* Read 16 bits of data, dropping the last two status bits. */
  uint16_t h = buf[0];
  h <<= 8;
  h |= buf[1] & 0b11111100;
 23f3158:	f89d 300d 	ldrb.w	r3, [sp, #13]
  uint16_t h = buf[0];
 23f315c:	f89d 200c 	ldrb.w	r2, [sp, #12]
  h |= buf[1] & 0b11111100;
 23f3160:	f003 03fc 	and.w	r3, r3, #252	; 0xfc

  // 3rd byte is the CRC

  float hum = h;
 23f3164:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 23f3168:	ee07 3a90 	vmov	s15, r3
  hum *= 125.0f;
 23f316c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 23f3194 <_ZN16Adafruit_HTU21DF12readHumidityEv+0x70>
  float hum = h;
 23f3170:	eef8 7a67 	vcvt.f32.u32	s15, s15
  hum /= 65536.0f;
  hum -= 6.0f;
 23f3174:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
  hum *= 125.0f;
 23f3178:	ee67 7a87 	vmul.f32	s15, s15, s14
  hum -= 6.0f;
 23f317c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 23f3198 <_ZN16Adafruit_HTU21DF12readHumidityEv+0x74>
 23f3180:	eea7 0a87 	vfma.f32	s0, s15, s14

  /* Track the value internally in case we need to access it later. */
  _last_humidity = hum;
 23f3184:	ed84 0a01 	vstr	s0, [r4, #4]

  return hum;
}
 23f3188:	b004      	add	sp, #16
 23f318a:	bd10      	pop	{r4, pc}
    return NAN;
 23f318c:	ed9f 0a03 	vldr	s0, [pc, #12]	; 23f319c <_ZN16Adafruit_HTU21DF12readHumidityEv+0x78>
 23f3190:	e7fa      	b.n	23f3188 <_ZN16Adafruit_HTU21DF12readHumidityEv+0x64>
 23f3192:	bf00      	nop
 23f3194:	42fa0000 	.word	0x42fa0000
 23f3198:	37800000 	.word	0x37800000
 23f319c:	7fc00000 	.word	0x7fc00000

023f31a0 <_ZN16Adafruit_LPS35HWC1Ev>:
#include "Adafruit_LPS35HW.h"

/*!
 *    @brief  Instantiates a new LPS35HW class
 */
Adafruit_LPS35HW::Adafruit_LPS35HW(void) {}
 23f31a0:	4770      	bx	lr

023f31a2 <_ZN16Adafruit_LPS35HW5resetEv>:
/*!
    @brief Resets the hardware. All configuration registers are set to
            default values, the same as a power-on reset.
*/
/**************************************************************************/
void Adafruit_LPS35HW::reset(void) {
 23f31a2:	b507      	push	{r0, r1, r2, lr}
  Adafruit_BusIO_RegisterBits reset =
      Adafruit_BusIO_RegisterBits(Config2, 1, 2);
 23f31a4:	2302      	movs	r3, #2
 23f31a6:	6841      	ldr	r1, [r0, #4]
 23f31a8:	2201      	movs	r2, #1
 23f31aa:	4668      	mov	r0, sp
 23f31ac:	f7ff f866 	bl	23f227c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  reset.write(1);
 23f31b0:	2101      	movs	r1, #1
 23f31b2:	4668      	mov	r0, sp
 23f31b4:	f7ff f874 	bl	23f22a0 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  while (reset.read() == true) {
 23f31b8:	4668      	mov	r0, sp
 23f31ba:	f7ff f864 	bl	23f2286 <_ZN27Adafruit_BusIO_RegisterBits4readEv>
 23f31be:	2801      	cmp	r0, #1
 23f31c0:	d102      	bne.n	23f31c8 <_ZN16Adafruit_LPS35HW5resetEv+0x26>
    delay(1);
 23f31c2:	f005 f8ab 	bl	23f831c <delay>
  while (reset.read() == true) {
 23f31c6:	e7f7      	b.n	23f31b8 <_ZN16Adafruit_LPS35HW5resetEv+0x16>
  }
}
 23f31c8:	b003      	add	sp, #12
 23f31ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023f31d0 <_ZN16Adafruit_LPS35HW15readTemperatureEv>:
    @return The current temperature in degrees C
*/
/**************************************************************************/
float Adafruit_LPS35HW::readTemperature(void) {
  Adafruit_BusIO_Register temp = Adafruit_BusIO_Register(
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_TEMP_OUT_L, 2);
 23f31d0:	2300      	movs	r3, #0
 23f31d2:	2201      	movs	r2, #1
float Adafruit_LPS35HW::readTemperature(void) {
 23f31d4:	b500      	push	{lr}
 23f31d6:	b08b      	sub	sp, #44	; 0x2c
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_TEMP_OUT_L, 2);
 23f31d8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f31dc:	2102      	movs	r1, #2
 23f31de:	222b      	movs	r2, #43	; 0x2b
 23f31e0:	e9cd 2100 	strd	r2, r1, [sp]
 23f31e4:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 23f31e8:	a804      	add	r0, sp, #16
 23f31ea:	f7fe ff6b 	bl	23f20c4 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  return (int16_t)temp.read() / 100.0;
 23f31ee:	a804      	add	r0, sp, #16
 23f31f0:	f7ff f828 	bl	23f2244 <_ZN23Adafruit_BusIO_Register4readEv>
 23f31f4:	b200      	sxth	r0, r0
 23f31f6:	f7f3 fc6d 	bl	23e6ad4 <__aeabi_i2d>
 23f31fa:	2200      	movs	r2, #0
 23f31fc:	4b04      	ldr	r3, [pc, #16]	; (23f3210 <_ZN16Adafruit_LPS35HW15readTemperatureEv+0x40>)
 23f31fe:	f7f3 fdfd 	bl	23e6dfc <__aeabi_ddiv>
 23f3202:	f7f3 ffc9 	bl	23e7198 <__aeabi_d2f>
}
 23f3206:	ee00 0a10 	vmov	s0, r0
 23f320a:	b00b      	add	sp, #44	; 0x2c
 23f320c:	f85d fb04 	ldr.w	pc, [sp], #4
 23f3210:	40590000 	.word	0x40590000

023f3214 <_ZN16Adafruit_LPS35HW12readPressureEv>:
    @return The current pressure in hPa, relative to the reference temperature
*/
/**************************************************************************/
float Adafruit_LPS35HW::readPressure(void) {
  Adafruit_BusIO_Register pressure = Adafruit_BusIO_Register(
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_PRESS_OUT_XL, 3);
 23f3214:	2300      	movs	r3, #0
 23f3216:	2201      	movs	r2, #1
float Adafruit_LPS35HW::readPressure(void) {
 23f3218:	b500      	push	{lr}
 23f321a:	b08b      	sub	sp, #44	; 0x2c
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_PRESS_OUT_XL, 3);
 23f321c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f3220:	2103      	movs	r1, #3
 23f3222:	2228      	movs	r2, #40	; 0x28
 23f3224:	e9cd 2100 	strd	r2, r1, [sp]
 23f3228:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 23f322c:	a804      	add	r0, sp, #16
 23f322e:	f7fe ff49 	bl	23f20c4 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  int32_t raw_pressure = pressure.read();
 23f3232:	a804      	add	r0, sp, #16
 23f3234:	f7ff f806 	bl	23f2244 <_ZN23Adafruit_BusIO_Register4readEv>
  // perform sign extension for 24 bit number if needed
  if (raw_pressure & 0x800000) {
 23f3238:	0203      	lsls	r3, r0, #8
    raw_pressure = (0xff000000 | raw_pressure);
 23f323a:	bf48      	it	mi
 23f323c:	f040 407f 	orrmi.w	r0, r0, #4278190080	; 0xff000000
  }

  return (raw_pressure / 4096.0);
 23f3240:	f7f3 fc48 	bl	23e6ad4 <__aeabi_i2d>
 23f3244:	2200      	movs	r2, #0
 23f3246:	4b05      	ldr	r3, [pc, #20]	; (23f325c <_ZN16Adafruit_LPS35HW12readPressureEv+0x48>)
 23f3248:	f7f3 fcae 	bl	23e6ba8 <__aeabi_dmul>
 23f324c:	f7f3 ffa4 	bl	23e7198 <__aeabi_d2f>
}
 23f3250:	ee00 0a10 	vmov	s0, r0
 23f3254:	b00b      	add	sp, #44	; 0x2c
 23f3256:	f85d fb04 	ldr.w	pc, [sp], #4
 23f325a:	bf00      	nop
 23f325c:	3f300000 	.word	0x3f300000

023f3260 <_ZN16Adafruit_LPS35HW11setDataRateE10_data_rate>:
    @brief Sets a new measurement rate
    @param new_rate
          The new output data rate to be set (ODR)
*/
/**************************************************************************/
void Adafruit_LPS35HW::setDataRate(LPS35HW_DataRate new_rate) {
 23f3260:	b513      	push	{r0, r1, r4, lr}
 23f3262:	460c      	mov	r4, r1
  Adafruit_BusIO_RegisterBits data_rate =
      Adafruit_BusIO_RegisterBits(Config1, 3, 4);
 23f3264:	2304      	movs	r3, #4
 23f3266:	2203      	movs	r2, #3
 23f3268:	6801      	ldr	r1, [r0, #0]
 23f326a:	4668      	mov	r0, sp
 23f326c:	f7ff f806 	bl	23f227c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  data_rate.write(new_rate);
 23f3270:	4621      	mov	r1, r4
 23f3272:	4668      	mov	r0, sp
 23f3274:	f7ff f814 	bl	23f22a0 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
 23f3278:	b002      	add	sp, #8
 23f327a:	bd10      	pop	{r4, pc}

023f327c <_ZN16Adafruit_LPS35HW5_initEv>:
boolean Adafruit_LPS35HW::_init(void) {
 23f327c:	b5f0      	push	{r4, r5, r6, r7, lr}
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_WHO_AM_I, 1);
 23f327e:	2500      	movs	r5, #0
 23f3280:	2701      	movs	r7, #1
 23f3282:	230f      	movs	r3, #15
boolean Adafruit_LPS35HW::_init(void) {
 23f3284:	b08d      	sub	sp, #52	; 0x34
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_WHO_AM_I, 1);
 23f3286:	e9cd 5702 	strd	r5, r7, [sp, #8]
 23f328a:	9300      	str	r3, [sp, #0]
 23f328c:	9701      	str	r7, [sp, #4]
 23f328e:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 23f3292:	462b      	mov	r3, r5
boolean Adafruit_LPS35HW::_init(void) {
 23f3294:	4604      	mov	r4, r0
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_WHO_AM_I, 1);
 23f3296:	a806      	add	r0, sp, #24
 23f3298:	f7fe ff14 	bl	23f20c4 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  if (chip_id.read() != 0xB1) {
 23f329c:	a806      	add	r0, sp, #24
 23f329e:	f7fe ffd1 	bl	23f2244 <_ZN23Adafruit_BusIO_Register4readEv>
 23f32a2:	28b1      	cmp	r0, #177	; 0xb1
 23f32a4:	d167      	bne.n	23f3376 <_ZN16Adafruit_LPS35HW5_initEv+0xfa>
                                        LPS35HW_CTRL_REG1, 1);
 23f32a6:	2018      	movs	r0, #24
 23f32a8:	f7f4 fae3 	bl	23e7872 <_Znwj>
 23f32ac:	4606      	mov	r6, r0
 23f32ae:	b148      	cbz	r0, 23f32c4 <_ZN16Adafruit_LPS35HW5_initEv+0x48>
 23f32b0:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 23f32b4:	2310      	movs	r3, #16
 23f32b6:	e9cd 5702 	strd	r5, r7, [sp, #8]
 23f32ba:	9300      	str	r3, [sp, #0]
 23f32bc:	9701      	str	r7, [sp, #4]
 23f32be:	462b      	mov	r3, r5
 23f32c0:	f7fe ff00 	bl	23f20c4 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
                                        LPS35HW_CTRL_REG2, 1);
 23f32c4:	2018      	movs	r0, #24
  Config1 = new Adafruit_BusIO_Register(i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD,
 23f32c6:	6026      	str	r6, [r4, #0]
                                        LPS35HW_CTRL_REG2, 1);
 23f32c8:	f7f4 fad3 	bl	23e7872 <_Znwj>
 23f32cc:	4605      	mov	r5, r0
 23f32ce:	b150      	cbz	r0, 23f32e6 <_ZN16Adafruit_LPS35HW5_initEv+0x6a>
 23f32d0:	2201      	movs	r2, #1
 23f32d2:	2300      	movs	r3, #0
 23f32d4:	9201      	str	r2, [sp, #4]
 23f32d6:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f32da:	2211      	movs	r2, #17
 23f32dc:	9200      	str	r2, [sp, #0]
 23f32de:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 23f32e2:	f7fe feef 	bl	23f20c4 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Config2 = new Adafruit_BusIO_Register(i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD,
 23f32e6:	6065      	str	r5, [r4, #4]
                                        LPS35HW_CTRL_REG3, 1);
 23f32e8:	2018      	movs	r0, #24
 23f32ea:	f7f4 fac2 	bl	23e7872 <_Znwj>
 23f32ee:	4605      	mov	r5, r0
 23f32f0:	b150      	cbz	r0, 23f3308 <_ZN16Adafruit_LPS35HW5_initEv+0x8c>
 23f32f2:	2201      	movs	r2, #1
 23f32f4:	2300      	movs	r3, #0
 23f32f6:	9201      	str	r2, [sp, #4]
 23f32f8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f32fc:	2212      	movs	r2, #18
 23f32fe:	9200      	str	r2, [sp, #0]
 23f3300:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 23f3304:	f7fe fede 	bl	23f20c4 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Config3 = new Adafruit_BusIO_Register(i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD,
 23f3308:	60a5      	str	r5, [r4, #8]
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_INTERRUPT_CFG, 1);
 23f330a:	2018      	movs	r0, #24
 23f330c:	f7f4 fab1 	bl	23e7872 <_Znwj>
 23f3310:	4605      	mov	r5, r0
 23f3312:	b150      	cbz	r0, 23f332a <_ZN16Adafruit_LPS35HW5_initEv+0xae>
 23f3314:	2201      	movs	r2, #1
 23f3316:	2300      	movs	r3, #0
 23f3318:	9201      	str	r2, [sp, #4]
 23f331a:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f331e:	220b      	movs	r2, #11
 23f3320:	9200      	str	r2, [sp, #0]
 23f3322:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 23f3326:	f7fe fecd 	bl	23f20c4 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  InterruptCfg = new Adafruit_BusIO_Register(
 23f332a:	60e5      	str	r5, [r4, #12]
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_INT_SOURCE, 1);
 23f332c:	2018      	movs	r0, #24
 23f332e:	f7f4 faa0 	bl	23e7872 <_Znwj>
 23f3332:	4605      	mov	r5, r0
 23f3334:	b150      	cbz	r0, 23f334c <_ZN16Adafruit_LPS35HW5_initEv+0xd0>
 23f3336:	2201      	movs	r2, #1
 23f3338:	2300      	movs	r3, #0
 23f333a:	9201      	str	r2, [sp, #4]
 23f333c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f3340:	2225      	movs	r2, #37	; 0x25
 23f3342:	9200      	str	r2, [sp, #0]
 23f3344:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 23f3348:	f7fe febc 	bl	23f20c4 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  reset();
 23f334c:	4620      	mov	r0, r4
  InterruptStatus = new Adafruit_BusIO_Register(
 23f334e:	6125      	str	r5, [r4, #16]
  reset();
 23f3350:	f7ff ff27 	bl	23f31a2 <_ZN16Adafruit_LPS35HW5resetEv>
  setDataRate(LPS35HW_RATE_10_HZ); // default in continuous at 10 hz
 23f3354:	2102      	movs	r1, #2
 23f3356:	4620      	mov	r0, r4
 23f3358:	f7ff ff82 	bl	23f3260 <_ZN16Adafruit_LPS35HW11setDataRateE10_data_rate>
      Adafruit_BusIO_RegisterBits(Config1, 1, 1);
 23f335c:	2301      	movs	r3, #1
 23f335e:	6821      	ldr	r1, [r4, #0]
 23f3360:	461a      	mov	r2, r3
 23f3362:	a804      	add	r0, sp, #16
 23f3364:	f7fe ff8a 	bl	23f227c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  block_reads.write(0x1);
 23f3368:	2101      	movs	r1, #1
 23f336a:	a804      	add	r0, sp, #16
 23f336c:	f7fe ff98 	bl	23f22a0 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  return true;
 23f3370:	2001      	movs	r0, #1
}
 23f3372:	b00d      	add	sp, #52	; 0x34
 23f3374:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return false;
 23f3376:	4628      	mov	r0, r5
 23f3378:	e7fb      	b.n	23f3372 <_ZN16Adafruit_LPS35HW5_initEv+0xf6>

023f337a <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire>:
  spi_dev = NULL;
 23f337a:	2300      	movs	r3, #0
boolean Adafruit_LPS35HW::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
 23f337c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  spi_dev = NULL;
 23f337e:	6183      	str	r3, [r0, #24]
boolean Adafruit_LPS35HW::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
 23f3380:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
 23f3382:	2010      	movs	r0, #16
boolean Adafruit_LPS35HW::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
 23f3384:	e9cd 2100 	strd	r2, r1, [sp]
  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
 23f3388:	f7f4 fa73 	bl	23e7872 <_Znwj>
 23f338c:	4605      	mov	r5, r0
 23f338e:	b118      	cbz	r0, 23f3398 <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire+0x1e>
 23f3390:	e9dd 2100 	ldrd	r2, r1, [sp]
 23f3394:	f7fe ff9d 	bl	23f22d2 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin()) {
 23f3398:	2101      	movs	r1, #1
 23f339a:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
 23f339c:	6165      	str	r5, [r4, #20]
  if (!i2c_dev->begin()) {
 23f339e:	f7fe ffb4 	bl	23f230a <_ZN18Adafruit_I2CDevice5beginEb>
 23f33a2:	b128      	cbz	r0, 23f33b0 <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire+0x36>
  return _init();
 23f33a4:	4620      	mov	r0, r4
}
 23f33a6:	b003      	add	sp, #12
 23f33a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return _init();
 23f33ac:	f7ff bf66 	b.w	23f327c <_ZN16Adafruit_LPS35HW5_initEv>
}
 23f33b0:	b003      	add	sp, #12
 23f33b2:	bd30      	pop	{r4, r5, pc}

023f33b4 <_ZN16Adafruit_MCP9808D1Ev>:
 23f33b4:	4770      	bx	lr

023f33b6 <_ZN16Adafruit_MCP9808D0Ev>:
 23f33b6:	b510      	push	{r4, lr}
 23f33b8:	4604      	mov	r4, r0
 23f33ba:	210c      	movs	r1, #12
 23f33bc:	f7f4 fa5d 	bl	23e787a <_ZdlPvj>
 23f33c0:	4620      	mov	r0, r4
 23f33c2:	bd10      	pop	{r4, pc}

023f33c4 <_ZN16Adafruit_MCP98089getSensorEP8sensor_t>:
   resulution
    @param  sensor Pointer to Adafruit_Sensor sensor_t object that will be
   filled with sensor type data
*/
/**************************************************************************/
void Adafruit_MCP9808::getSensor(sensor_t *sensor) {
 23f33c4:	b538      	push	{r3, r4, r5, lr}
 23f33c6:	460c      	mov	r4, r1
 23f33c8:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 23f33ca:	2220      	movs	r2, #32
 23f33cc:	2100      	movs	r1, #0
 23f33ce:	f104 0008 	add.w	r0, r4, #8
 23f33d2:	f009 fd38 	bl	23fce46 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "MCP9808", sizeof(sensor->name) - 1);
 23f33d6:	220b      	movs	r2, #11
 23f33d8:	4620      	mov	r0, r4
 23f33da:	4908      	ldr	r1, [pc, #32]	; (23f33fc <_ZN16Adafruit_MCP98089getSensorEP8sensor_t+0x38>)
 23f33dc:	f009 fdcd 	bl	23fcf7a <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
 23f33e0:	2301      	movs	r3, #1
 23f33e2:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
 23f33e4:	88eb      	ldrh	r3, [r5, #6]
 23f33e6:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 23f33e8:	230d      	movs	r3, #13
 23f33ea:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->max_value = 100.0;
 23f33ec:	4b04      	ldr	r3, [pc, #16]	; (23f3400 <_ZN16Adafruit_MCP98089getSensorEP8sensor_t+0x3c>)
 23f33ee:	61a3      	str	r3, [r4, #24]
  sensor->min_value = -20.0;
 23f33f0:	4b04      	ldr	r3, [pc, #16]	; (23f3404 <_ZN16Adafruit_MCP98089getSensorEP8sensor_t+0x40>)
 23f33f2:	61e3      	str	r3, [r4, #28]
  sensor->resolution = 0.0625;
 23f33f4:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 23f33f8:	6223      	str	r3, [r4, #32]
}
 23f33fa:	bd38      	pop	{r3, r4, r5, pc}
 23f33fc:	023ff218 	.word	0x023ff218
 23f3400:	42c80000 	.word	0x42c80000
 23f3404:	c1a00000 	.word	0xc1a00000

023f3408 <_ZN16Adafruit_MCP9808C1Ev>:
Adafruit_MCP9808::Adafruit_MCP9808() {}
 23f3408:	4a03      	ldr	r2, [pc, #12]	; (23f3418 <_ZN16Adafruit_MCP9808C1Ev+0x10>)
 23f340a:	6002      	str	r2, [r0, #0]
 23f340c:	f242 6250 	movw	r2, #9808	; 0x2650
 23f3410:	80c2      	strh	r2, [r0, #6]
 23f3412:	2200      	movs	r2, #0
 23f3414:	6082      	str	r2, [r0, #8]
 23f3416:	4770      	bx	lr
 23f3418:	023ff228 	.word	0x023ff228

023f341c <_ZN16Adafruit_MCP98087write16Eht>:
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
 23f341c:	2301      	movs	r3, #1
void Adafruit_MCP9808::write16(uint8_t reg, uint16_t value) {
 23f341e:	b510      	push	{r4, lr}
 23f3420:	4614      	mov	r4, r2
 23f3422:	b088      	sub	sp, #32
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
 23f3424:	e9cd 3300 	strd	r3, r3, [sp]
 23f3428:	460a      	mov	r2, r1
 23f342a:	2302      	movs	r3, #2
 23f342c:	6881      	ldr	r1, [r0, #8]
 23f342e:	a802      	add	r0, sp, #8
 23f3430:	f7fe fe3a 	bl	23f20a8 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  reg16.write(value);
 23f3434:	2200      	movs	r2, #0
 23f3436:	4621      	mov	r1, r4
 23f3438:	a802      	add	r0, sp, #8
 23f343a:	f7fe fea3 	bl	23f2184 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
 23f343e:	b008      	add	sp, #32
 23f3440:	bd10      	pop	{r4, pc}

023f3442 <_ZN16Adafruit_MCP98086read16Eh>:
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
 23f3442:	2301      	movs	r3, #1
uint16_t Adafruit_MCP9808::read16(uint8_t reg) {
 23f3444:	b500      	push	{lr}
 23f3446:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
 23f3448:	e9cd 3300 	strd	r3, r3, [sp]
uint16_t Adafruit_MCP9808::read16(uint8_t reg) {
 23f344c:	460a      	mov	r2, r1
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
 23f344e:	2302      	movs	r3, #2
 23f3450:	6881      	ldr	r1, [r0, #8]
 23f3452:	a802      	add	r0, sp, #8
 23f3454:	f7fe fe28 	bl	23f20a8 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return reg16.read();
 23f3458:	a802      	add	r0, sp, #8
 23f345a:	f7fe fef3 	bl	23f2244 <_ZN23Adafruit_BusIO_Register4readEv>
}
 23f345e:	b280      	uxth	r0, r0
 23f3460:	b009      	add	sp, #36	; 0x24
 23f3462:	f85d fb04 	ldr.w	pc, [sp], #4

023f3466 <_ZN16Adafruit_MCP98084initEv>:
bool Adafruit_MCP9808::init() {
 23f3466:	b538      	push	{r3, r4, r5, lr}
  if (!i2c_dev->begin()) {
 23f3468:	2101      	movs	r1, #1
bool Adafruit_MCP9808::init() {
 23f346a:	4604      	mov	r4, r0
  if (!i2c_dev->begin()) {
 23f346c:	6880      	ldr	r0, [r0, #8]
 23f346e:	f7fe ff4c 	bl	23f230a <_ZN18Adafruit_I2CDevice5beginEb>
 23f3472:	4605      	mov	r5, r0
 23f3474:	b910      	cbnz	r0, 23f347c <_ZN16Adafruit_MCP98084initEv+0x16>
    return false;
 23f3476:	2500      	movs	r5, #0
}
 23f3478:	4628      	mov	r0, r5
 23f347a:	bd38      	pop	{r3, r4, r5, pc}
  if (read16(MCP9808_REG_MANUF_ID) != 0x0054)
 23f347c:	2106      	movs	r1, #6
 23f347e:	4620      	mov	r0, r4
 23f3480:	f7ff ffdf 	bl	23f3442 <_ZN16Adafruit_MCP98086read16Eh>
 23f3484:	2854      	cmp	r0, #84	; 0x54
 23f3486:	d1f6      	bne.n	23f3476 <_ZN16Adafruit_MCP98084initEv+0x10>
  if (read16(MCP9808_REG_DEVICE_ID) != 0x0400)
 23f3488:	2107      	movs	r1, #7
 23f348a:	4620      	mov	r0, r4
 23f348c:	f7ff ffd9 	bl	23f3442 <_ZN16Adafruit_MCP98086read16Eh>
 23f3490:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 23f3494:	d1ef      	bne.n	23f3476 <_ZN16Adafruit_MCP98084initEv+0x10>
  write16(MCP9808_REG_CONFIG, 0x0);
 23f3496:	2200      	movs	r2, #0
 23f3498:	2101      	movs	r1, #1
 23f349a:	4620      	mov	r0, r4
 23f349c:	f7ff ffbe 	bl	23f341c <_ZN16Adafruit_MCP98087write16Eht>
  return true;
 23f34a0:	e7ea      	b.n	23f3478 <_ZN16Adafruit_MCP98084initEv+0x12>

023f34a2 <_ZN16Adafruit_MCP98085beginEhP7TwoWire>:
bool Adafruit_MCP9808::begin(uint8_t addr, TwoWire *theWire) {
 23f34a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f34a4:	4604      	mov	r4, r0
  if (i2c_dev) {
 23f34a6:	6880      	ldr	r0, [r0, #8]
bool Adafruit_MCP9808::begin(uint8_t addr, TwoWire *theWire) {
 23f34a8:	460e      	mov	r6, r1
 23f34aa:	4617      	mov	r7, r2
  if (i2c_dev) {
 23f34ac:	b110      	cbz	r0, 23f34b4 <_ZN16Adafruit_MCP98085beginEhP7TwoWire+0x12>
    delete i2c_dev;
 23f34ae:	2110      	movs	r1, #16
 23f34b0:	f7f4 f9e3 	bl	23e787a <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
 23f34b4:	2010      	movs	r0, #16
 23f34b6:	f7f4 f9dc 	bl	23e7872 <_Znwj>
 23f34ba:	4605      	mov	r5, r0
 23f34bc:	b118      	cbz	r0, 23f34c6 <_ZN16Adafruit_MCP98085beginEhP7TwoWire+0x24>
 23f34be:	463a      	mov	r2, r7
 23f34c0:	4631      	mov	r1, r6
 23f34c2:	f7fe ff06 	bl	23f22d2 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  return init();
 23f34c6:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
 23f34c8:	60a5      	str	r5, [r4, #8]
}
 23f34ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return init();
 23f34ce:	f7ff bfca 	b.w	23f3466 <_ZN16Adafruit_MCP98084initEv>

023f34d2 <_ZN16Adafruit_MCP98085beginEh>:
bool Adafruit_MCP9808::begin(uint8_t addr) { return begin(addr, &Wire); }
 23f34d2:	b513      	push	{r0, r1, r4, lr}
 23f34d4:	4604      	mov	r4, r0
 23f34d6:	9101      	str	r1, [sp, #4]
 23f34d8:	f006 ff1c 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23f34dc:	4602      	mov	r2, r0
 23f34de:	4620      	mov	r0, r4
 23f34e0:	9901      	ldr	r1, [sp, #4]
 23f34e2:	b002      	add	sp, #8
 23f34e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f34e8:	f7ff bfdb 	b.w	23f34a2 <_ZN16Adafruit_MCP98085beginEhP7TwoWire>

023f34ec <_ZN16Adafruit_MCP98089readTempCEv>:
float Adafruit_MCP9808::readTempC() {
 23f34ec:	b508      	push	{r3, lr}
  uint16_t t = read16(MCP9808_REG_AMBIENT_TEMP);
 23f34ee:	2105      	movs	r1, #5
 23f34f0:	f7ff ffa7 	bl	23f3442 <_ZN16Adafruit_MCP98086read16Eh>
  if (t != 0xFFFF) {
 23f34f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23f34f8:	4298      	cmp	r0, r3
 23f34fa:	d00c      	beq.n	23f3516 <_ZN16Adafruit_MCP98089readTempCEv+0x2a>
    temp = t & 0x0FFF;
 23f34fc:	f3c0 030b 	ubfx	r3, r0, #0, #12
 23f3500:	ee00 3a10 	vmov	s0, r3
    if (t & 0x1000)
 23f3504:	04c3      	lsls	r3, r0, #19
    temp /= 16.0;
 23f3506:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
    if (t & 0x1000)
 23f350a:	d503      	bpl.n	23f3514 <_ZN16Adafruit_MCP98089readTempCEv+0x28>
      temp -= 256;
 23f350c:	eddf 7a03 	vldr	s15, [pc, #12]	; 23f351c <_ZN16Adafruit_MCP98089readTempCEv+0x30>
 23f3510:	ee30 0a67 	vsub.f32	s0, s0, s15
}
 23f3514:	bd08      	pop	{r3, pc}
  float temp = NAN;
 23f3516:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23f3520 <_ZN16Adafruit_MCP98089readTempCEv+0x34>
  return temp;
 23f351a:	e7fb      	b.n	23f3514 <_ZN16Adafruit_MCP98089readTempCEv+0x28>
 23f351c:	43800000 	.word	0x43800000
 23f3520:	7fc00000 	.word	0x7fc00000

023f3524 <_ZN16Adafruit_MCP98088getEventEP15sensors_event_t>:
bool Adafruit_MCP9808::getEvent(sensors_event_t *temp) {
 23f3524:	b570      	push	{r4, r5, r6, lr}
 23f3526:	460c      	mov	r4, r1
 23f3528:	4605      	mov	r5, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23f352a:	f004 f89f 	bl	23f766c <HAL_Timer_Get_Milli_Seconds>
  memset(temp, 0, sizeof(sensors_event_t));
 23f352e:	2220      	movs	r2, #32
 23f3530:	4606      	mov	r6, r0
 23f3532:	2100      	movs	r1, #0
 23f3534:	1d20      	adds	r0, r4, #4
 23f3536:	f009 fc86 	bl	23fce46 <memset>
  temp->version = sizeof(sensors_event_t);
 23f353a:	2324      	movs	r3, #36	; 0x24
 23f353c:	6023      	str	r3, [r4, #0]
  temp->sensor_id = _sensorID;
 23f353e:	88eb      	ldrh	r3, [r5, #6]
  temp->temperature = readTempC();
 23f3540:	4628      	mov	r0, r5
  temp->sensor_id = _sensorID;
 23f3542:	6063      	str	r3, [r4, #4]
  temp->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 23f3544:	230d      	movs	r3, #13
  temp->timestamp = t;
 23f3546:	6126      	str	r6, [r4, #16]
  temp->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 23f3548:	60a3      	str	r3, [r4, #8]
  temp->temperature = readTempC();
 23f354a:	f7ff ffcf 	bl	23f34ec <_ZN16Adafruit_MCP98089readTempCEv>
}
 23f354e:	2001      	movs	r0, #1
  temp->temperature = readTempC();
 23f3550:	ed84 0a05 	vstr	s0, [r4, #20]
}
 23f3554:	bd70      	pop	{r4, r5, r6, pc}

023f3556 <_ZN16Adafruit_PM25AQIC1Ev>:
#include "Adafruit_PM25AQI.h"

/*!
 *  @brief  Instantiates a new PM25AQI class
 */
Adafruit_PM25AQI::Adafruit_PM25AQI() {}
 23f3556:	2200      	movs	r2, #0
 23f3558:	e9c0 2200 	strd	r2, r2, [r0]
 23f355c:	4770      	bx	lr

023f355e <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>:
 *  @brief  Setups the hardware and detects a valid PMSA003I. Initializes I2C.
 *  @param  theWire
 *          Optional pointer to I2C interface, otherwise use Wire
 *  @return True if PMSA003I found on I2C, False if something went wrong!
 */
bool Adafruit_PM25AQI::begin_I2C(TwoWire *theWire) {
 23f355e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
 23f3560:	6803      	ldr	r3, [r0, #0]
bool Adafruit_PM25AQI::begin_I2C(TwoWire *theWire) {
 23f3562:	4604      	mov	r4, r0
  if (!i2c_dev) {
 23f3564:	b953      	cbnz	r3, 23f357c <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire+0x1e>
    i2c_dev = new Adafruit_I2CDevice(PMSA003I_I2CADDR_DEFAULT, theWire);
 23f3566:	2010      	movs	r0, #16
 23f3568:	9101      	str	r1, [sp, #4]
 23f356a:	f7f4 f982 	bl	23e7872 <_Znwj>
 23f356e:	4605      	mov	r5, r0
 23f3570:	b118      	cbz	r0, 23f357a <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire+0x1c>
 23f3572:	2112      	movs	r1, #18
 23f3574:	9a01      	ldr	r2, [sp, #4]
 23f3576:	f7fe feac 	bl	23f22d2 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
 23f357a:	6025      	str	r5, [r4, #0]
  }

  if (!i2c_dev->begin()) {
 23f357c:	2101      	movs	r1, #1
 23f357e:	6820      	ldr	r0, [r4, #0]
    return false;
  }

  return true;
}
 23f3580:	b003      	add	sp, #12
 23f3582:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  if (!i2c_dev->begin()) {
 23f3586:	f7fe bec0 	b.w	23f230a <_ZN18Adafruit_I2CDevice5beginEb>

023f358a <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata>:
 *  @brief  Setups the hardware and detects a valid UART PM2.5
 *  @param  data
 *          Pointer to PM25_AQI_Data that will be filled by read()ing
 *  @return True on successful read, false if timed out or bad data
 */
bool Adafruit_PM25AQI::read(PM25_AQI_Data *data) {
 23f358a:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f358c:	4604      	mov	r4, r0
  uint8_t buffer[32];
  uint16_t sum = 0;

  if (!data) {
 23f358e:	460d      	mov	r5, r1
bool Adafruit_PM25AQI::read(PM25_AQI_Data *data) {
 23f3590:	b091      	sub	sp, #68	; 0x44
  if (!data) {
 23f3592:	b911      	cbnz	r1, 23f359a <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x10>
        return false;
      }
    }
    if (serial_dev->peek() != 0x42) {
      serial_dev->read();
      return false;
 23f3594:	2000      	movs	r0, #0
    return false;
  }

  // success!
  return true;
}
 23f3596:	b011      	add	sp, #68	; 0x44
 23f3598:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (i2c_dev) { // ok using i2c?
 23f359a:	6800      	ldr	r0, [r0, #0]
 23f359c:	2800      	cmp	r0, #0
 23f359e:	d039      	beq.n	23f3614 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x8a>
    if (!i2c_dev->read(buffer, 32)) {
 23f35a0:	2220      	movs	r2, #32
 23f35a2:	2301      	movs	r3, #1
 23f35a4:	eb0d 0102 	add.w	r1, sp, r2
 23f35a8:	f7fe feee 	bl	23f2388 <_ZN18Adafruit_I2CDevice4readEPhjb>
 23f35ac:	2800      	cmp	r0, #0
 23f35ae:	d0f1      	beq.n	23f3594 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
  if (buffer[0] != 0x42) {
 23f35b0:	f89d 3020 	ldrb.w	r3, [sp, #32]
 23f35b4:	2b42      	cmp	r3, #66	; 0x42
 23f35b6:	d1ed      	bne.n	23f3594 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
 23f35b8:	aa08      	add	r2, sp, #32
 23f35ba:	4611      	mov	r1, r2
 23f35bc:	231e      	movs	r3, #30
  uint16_t sum = 0;
 23f35be:	2600      	movs	r6, #0
    sum += buffer[i];
 23f35c0:	f811 0b01 	ldrb.w	r0, [r1], #1
  for (uint8_t i = 0; i < 30; i++) {
 23f35c4:	3b01      	subs	r3, #1
    sum += buffer[i];
 23f35c6:	4430      	add	r0, r6
  for (uint8_t i = 0; i < 30; i++) {
 23f35c8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    sum += buffer[i];
 23f35cc:	b286      	uxth	r6, r0
  for (uint8_t i = 0; i < 30; i++) {
 23f35ce:	d1f7      	bne.n	23f35c0 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x36>
 23f35d0:	4668      	mov	r0, sp
 23f35d2:	2101      	movs	r1, #1
 23f35d4:	4603      	mov	r3, r0
    buffer_u16[i] += (buffer[2 + i * 2] << 8);
 23f35d6:	7897      	ldrb	r7, [r2, #2]
    buffer_u16[i] = buffer[2 + i * 2 + 1];
 23f35d8:	78d4      	ldrb	r4, [r2, #3]
  for (uint8_t i = 0; i < 15; i++) {
 23f35da:	3101      	adds	r1, #1
    buffer_u16[i] += (buffer[2 + i * 2] << 8);
 23f35dc:	eb04 2407 	add.w	r4, r4, r7, lsl #8
  for (uint8_t i = 0; i < 15; i++) {
 23f35e0:	2910      	cmp	r1, #16
    buffer_u16[i] += (buffer[2 + i * 2] << 8);
 23f35e2:	f820 4b02 	strh.w	r4, [r0], #2
  for (uint8_t i = 0; i < 15; i++) {
 23f35e6:	f102 0202 	add.w	r2, r2, #2
 23f35ea:	d1f4      	bne.n	23f35d6 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x4c>
  memcpy((void *)data, (void *)buffer_u16, 30);
 23f35ec:	462a      	mov	r2, r5
 23f35ee:	af06      	add	r7, sp, #24
 23f35f0:	461c      	mov	r4, r3
 23f35f2:	cc03      	ldmia	r4!, {r0, r1}
 23f35f4:	42bc      	cmp	r4, r7
 23f35f6:	6010      	str	r0, [r2, #0]
 23f35f8:	6051      	str	r1, [r2, #4]
 23f35fa:	4623      	mov	r3, r4
 23f35fc:	f102 0208 	add.w	r2, r2, #8
 23f3600:	d1f6      	bne.n	23f35f0 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x66>
 23f3602:	6820      	ldr	r0, [r4, #0]
 23f3604:	6010      	str	r0, [r2, #0]
 23f3606:	88a3      	ldrh	r3, [r4, #4]
 23f3608:	8093      	strh	r3, [r2, #4]
  if (sum != data->checksum) {
 23f360a:	8ba8      	ldrh	r0, [r5, #28]
 23f360c:	1b83      	subs	r3, r0, r6
 23f360e:	4258      	negs	r0, r3
 23f3610:	4158      	adcs	r0, r3
 23f3612:	e7c0      	b.n	23f3596 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xc>
  } else if (serial_dev) { // ok using uart
 23f3614:	6860      	ldr	r0, [r4, #4]
 23f3616:	2800      	cmp	r0, #0
 23f3618:	d0bc      	beq.n	23f3594 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
    if (!serial_dev->available()) {
 23f361a:	6803      	ldr	r3, [r0, #0]
 23f361c:	691b      	ldr	r3, [r3, #16]
 23f361e:	4798      	blx	r3
 23f3620:	2800      	cmp	r0, #0
 23f3622:	d0b7      	beq.n	23f3594 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
 23f3624:	2620      	movs	r6, #32
    while ((skipped < 32) && (serial_dev->peek() != 0x42)) {
 23f3626:	6860      	ldr	r0, [r4, #4]
 23f3628:	6803      	ldr	r3, [r0, #0]
 23f362a:	699b      	ldr	r3, [r3, #24]
 23f362c:	4798      	blx	r3
 23f362e:	2842      	cmp	r0, #66	; 0x42
 23f3630:	d00b      	beq.n	23f364a <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xc0>
      serial_dev->read();
 23f3632:	6860      	ldr	r0, [r4, #4]
 23f3634:	6803      	ldr	r3, [r0, #0]
 23f3636:	695b      	ldr	r3, [r3, #20]
 23f3638:	4798      	blx	r3
      if (!serial_dev->available()) {
 23f363a:	6860      	ldr	r0, [r4, #4]
 23f363c:	6803      	ldr	r3, [r0, #0]
 23f363e:	691b      	ldr	r3, [r3, #16]
 23f3640:	4798      	blx	r3
 23f3642:	2800      	cmp	r0, #0
 23f3644:	d0a6      	beq.n	23f3594 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
    while ((skipped < 32) && (serial_dev->peek() != 0x42)) {
 23f3646:	3e01      	subs	r6, #1
 23f3648:	d1ed      	bne.n	23f3626 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x9c>
    if (serial_dev->peek() != 0x42) {
 23f364a:	6860      	ldr	r0, [r4, #4]
 23f364c:	6803      	ldr	r3, [r0, #0]
 23f364e:	699b      	ldr	r3, [r3, #24]
 23f3650:	4798      	blx	r3
 23f3652:	2842      	cmp	r0, #66	; 0x42
 23f3654:	6860      	ldr	r0, [r4, #4]
      serial_dev->read();
 23f3656:	6803      	ldr	r3, [r0, #0]
    if (serial_dev->peek() != 0x42) {
 23f3658:	d002      	beq.n	23f3660 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xd6>
      serial_dev->read();
 23f365a:	695b      	ldr	r3, [r3, #20]
 23f365c:	4798      	blx	r3
 23f365e:	e799      	b.n	23f3594 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
    if (serial_dev->available() < 32) {
 23f3660:	691b      	ldr	r3, [r3, #16]
 23f3662:	4798      	blx	r3
 23f3664:	281f      	cmp	r0, #31
 23f3666:	dd95      	ble.n	23f3594 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
    serial_dev->readBytes((char *)buffer, 32);
 23f3668:	2220      	movs	r2, #32
 23f366a:	6860      	ldr	r0, [r4, #4]
 23f366c:	eb0d 0102 	add.w	r1, sp, r2
 23f3670:	6803      	ldr	r3, [r0, #0]
 23f3672:	6a1b      	ldr	r3, [r3, #32]
 23f3674:	4798      	blx	r3
 23f3676:	e79b      	b.n	23f35b0 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x26>

023f3678 <_ZL4crc8PKhi.constprop.0>:

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);

  for (int j = len; j; --j) {
    crc ^= *data++;
 23f3678:	7803      	ldrb	r3, [r0, #0]
 23f367a:	2208      	movs	r2, #8
 23f367c:	43db      	mvns	r3, r3
 23f367e:	b2db      	uxtb	r3, r3

    for (int i = 8; i; --i) {
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
 23f3680:	f013 0f80 	tst.w	r3, #128	; 0x80
 23f3684:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23f3688:	d001      	beq.n	23f368e <_ZL4crc8PKhi.constprop.0+0x16>
 23f368a:	f083 0331 	eor.w	r3, r3, #49	; 0x31
    for (int i = 8; i; --i) {
 23f368e:	3a01      	subs	r2, #1
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
 23f3690:	b2db      	uxtb	r3, r3
    for (int i = 8; i; --i) {
 23f3692:	d1f5      	bne.n	23f3680 <_ZL4crc8PKhi.constprop.0+0x8>
    crc ^= *data++;
 23f3694:	7840      	ldrb	r0, [r0, #1]
 23f3696:	4058      	eors	r0, r3
 23f3698:	2308      	movs	r3, #8
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
 23f369a:	f010 0f80 	tst.w	r0, #128	; 0x80
 23f369e:	ea4f 0040 	mov.w	r0, r0, lsl #1
 23f36a2:	d001      	beq.n	23f36a8 <_ZL4crc8PKhi.constprop.0+0x30>
 23f36a4:	f080 0031 	eor.w	r0, r0, #49	; 0x31
    for (int i = 8; i; --i) {
 23f36a8:	3b01      	subs	r3, #1
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
 23f36aa:	b2c0      	uxtb	r0, r0
    for (int i = 8; i; --i) {
 23f36ac:	d1f5      	bne.n	23f369a <_ZL4crc8PKhi.constprop.0+0x22>
 23f36ae:	4770      	bx	lr

023f36b0 <_ZN14Adafruit_SHT31C1EP7TwoWire>:
Adafruit_SHT31::Adafruit_SHT31(TwoWire *theWire) {
 23f36b0:	2200      	movs	r2, #0
  _wire = theWire;
 23f36b2:	e9c0 1202 	strd	r1, r2, [r0, #8]
  humidity = NAN;
 23f36b6:	4a02      	ldr	r2, [pc, #8]	; (23f36c0 <_ZN14Adafruit_SHT31C1EP7TwoWire+0x10>)
 23f36b8:	6002      	str	r2, [r0, #0]
  temp = NAN;
 23f36ba:	6042      	str	r2, [r0, #4]
}
 23f36bc:	4770      	bx	lr
 23f36be:	bf00      	nop
 23f36c0:	7fc00000 	.word	0x7fc00000

023f36c4 <_ZN14Adafruit_SHT31D1Ev>:
Adafruit_SHT31::~Adafruit_SHT31() {
 23f36c4:	b510      	push	{r4, lr}
 23f36c6:	4604      	mov	r4, r0
  if (i2c_dev) {
 23f36c8:	68c0      	ldr	r0, [r0, #12]
 23f36ca:	b110      	cbz	r0, 23f36d2 <_ZN14Adafruit_SHT31D1Ev+0xe>
    delete i2c_dev; // remove old interface
 23f36cc:	2110      	movs	r1, #16
 23f36ce:	f7f4 f8d4 	bl	23e787a <_ZdlPvj>
}
 23f36d2:	4620      	mov	r0, r4
 23f36d4:	bd10      	pop	{r4, pc}

023f36d6 <_ZN14Adafruit_SHT3112writeCommandEt>:
/**
 * Internal function to perform and I2C write.
 *
 * @param cmd   The 16-bit command ID to send.
 */
bool Adafruit_SHT31::writeCommand(uint16_t command) {
 23f36d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t cmd[2];

  cmd[0] = command >> 8;
 23f36d8:	0a0b      	lsrs	r3, r1, #8
 23f36da:	f88d 300c 	strb.w	r3, [sp, #12]
  cmd[1] = command & 0xFF;

  return i2c_dev->write(cmd, 2);
 23f36de:	2300      	movs	r3, #0
 23f36e0:	e9cd 3300 	strd	r3, r3, [sp]
  cmd[1] = command & 0xFF;
 23f36e4:	f88d 100d 	strb.w	r1, [sp, #13]
  return i2c_dev->write(cmd, 2);
 23f36e8:	2301      	movs	r3, #1
 23f36ea:	2202      	movs	r2, #2
 23f36ec:	a903      	add	r1, sp, #12
 23f36ee:	68c0      	ldr	r0, [r0, #12]
 23f36f0:	f7fe fe1a 	bl	23f2328 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
 23f36f4:	b005      	add	sp, #20
 23f36f6:	f85d fb04 	ldr.w	pc, [sp], #4

023f36fa <_ZN14Adafruit_SHT3110readStatusEv>:
uint16_t Adafruit_SHT31::readStatus(void) {
 23f36fa:	b513      	push	{r0, r1, r4, lr}
 23f36fc:	4604      	mov	r4, r0
  writeCommand(SHT31_READSTATUS);
 23f36fe:	f24f 312d 	movw	r1, #62253	; 0xf32d
 23f3702:	f7ff ffe8 	bl	23f36d6 <_ZN14Adafruit_SHT3112writeCommandEt>
  i2c_dev->read(data, 3);
 23f3706:	2301      	movs	r3, #1
 23f3708:	2203      	movs	r2, #3
 23f370a:	68e0      	ldr	r0, [r4, #12]
 23f370c:	a901      	add	r1, sp, #4
 23f370e:	f7fe fe3b 	bl	23f2388 <_ZN18Adafruit_I2CDevice4readEPhjb>
  return stat;
 23f3712:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 23f3716:	ba40      	rev16	r0, r0
}
 23f3718:	b280      	uxth	r0, r0
 23f371a:	b002      	add	sp, #8
 23f371c:	bd10      	pop	{r4, pc}

023f371e <_ZN14Adafruit_SHT315resetEv>:
void Adafruit_SHT31::reset(void) {
 23f371e:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
 23f3720:	f243 01a2 	movw	r1, #12450	; 0x30a2
 23f3724:	f7ff ffd7 	bl	23f36d6 <_ZN14Adafruit_SHT3112writeCommandEt>
}
 23f3728:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(10);
 23f372c:	200a      	movs	r0, #10
 23f372e:	f004 bdf5 	b.w	23f831c <delay>

023f3732 <_ZN14Adafruit_SHT315beginEh>:
bool Adafruit_SHT31::begin(uint8_t i2caddr) {
 23f3732:	b570      	push	{r4, r5, r6, lr}
 23f3734:	4604      	mov	r4, r0
  if (i2c_dev) {
 23f3736:	68c0      	ldr	r0, [r0, #12]
bool Adafruit_SHT31::begin(uint8_t i2caddr) {
 23f3738:	460e      	mov	r6, r1
  if (i2c_dev) {
 23f373a:	b110      	cbz	r0, 23f3742 <_ZN14Adafruit_SHT315beginEh+0x10>
    delete i2c_dev; // remove old interface
 23f373c:	2110      	movs	r1, #16
 23f373e:	f7f4 f89c 	bl	23e787a <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(i2caddr, _wire);
 23f3742:	2010      	movs	r0, #16
 23f3744:	f7f4 f895 	bl	23e7872 <_Znwj>
 23f3748:	4605      	mov	r5, r0
 23f374a:	b118      	cbz	r0, 23f3754 <_ZN14Adafruit_SHT315beginEh+0x22>
 23f374c:	4631      	mov	r1, r6
 23f374e:	68a2      	ldr	r2, [r4, #8]
 23f3750:	f7fe fdbf 	bl	23f22d2 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin()) {
 23f3754:	2101      	movs	r1, #1
 23f3756:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(i2caddr, _wire);
 23f3758:	60e5      	str	r5, [r4, #12]
  if (!i2c_dev->begin()) {
 23f375a:	f7fe fdd6 	bl	23f230a <_ZN18Adafruit_I2CDevice5beginEb>
 23f375e:	b150      	cbz	r0, 23f3776 <_ZN14Adafruit_SHT315beginEh+0x44>
  reset();
 23f3760:	4620      	mov	r0, r4
 23f3762:	f7ff ffdc 	bl	23f371e <_ZN14Adafruit_SHT315resetEv>
  return readStatus() != 0xFFFF;
 23f3766:	4620      	mov	r0, r4
 23f3768:	f7ff ffc7 	bl	23f36fa <_ZN14Adafruit_SHT3110readStatusEv>
 23f376c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23f3770:	1ac0      	subs	r0, r0, r3
 23f3772:	bf18      	it	ne
 23f3774:	2001      	movne	r0, #1
}
 23f3776:	bd70      	pop	{r4, r5, r6, pc}

023f3778 <_ZN14Adafruit_SHT3111readTempHumEv>:
bool Adafruit_SHT31::readTempHum(void) {
 23f3778:	b513      	push	{r0, r1, r4, lr}
 23f377a:	4604      	mov	r4, r0
  writeCommand(SHT31_MEAS_HIGHREP);
 23f377c:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 23f3780:	f7ff ffa9 	bl	23f36d6 <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(20);
 23f3784:	2014      	movs	r0, #20
 23f3786:	f004 fdc9 	bl	23f831c <delay>
  i2c_dev->read(readbuffer, sizeof(readbuffer));
 23f378a:	2301      	movs	r3, #1
 23f378c:	2206      	movs	r2, #6
 23f378e:	4669      	mov	r1, sp
 23f3790:	68e0      	ldr	r0, [r4, #12]
 23f3792:	f7fe fdf9 	bl	23f2388 <_ZN18Adafruit_I2CDevice4readEPhjb>
  if (readbuffer[2] != crc8(readbuffer, 2) ||
 23f3796:	4668      	mov	r0, sp
 23f3798:	f7ff ff6e 	bl	23f3678 <_ZL4crc8PKhi.constprop.0>
 23f379c:	f89d 1002 	ldrb.w	r1, [sp, #2]
 23f37a0:	4281      	cmp	r1, r0
 23f37a2:	d12f      	bne.n	23f3804 <_ZN14Adafruit_SHT3111readTempHumEv+0x8c>
      readbuffer[5] != crc8(readbuffer + 3, 2))
 23f37a4:	f10d 0003 	add.w	r0, sp, #3
 23f37a8:	f7ff ff66 	bl	23f3678 <_ZL4crc8PKhi.constprop.0>
 23f37ac:	f89d 1005 	ldrb.w	r1, [sp, #5]
  if (readbuffer[2] != crc8(readbuffer, 2) ||
 23f37b0:	4281      	cmp	r1, r0
 23f37b2:	d127      	bne.n	23f3804 <_ZN14Adafruit_SHT3111readTempHumEv+0x8c>
  stemp = ((4375 * stemp) >> 14) - 4500;
 23f37b4:	f241 1217 	movw	r2, #4375	; 0x1117
  int32_t stemp = (int32_t)(((uint32_t)readbuffer[0] << 8) | readbuffer[1]);
 23f37b8:	f8bd 3000 	ldrh.w	r3, [sp]
  temp = (float)stemp / 100.0f;
 23f37bc:	ed9f 7a12 	vldr	s14, [pc, #72]	; 23f3808 <_ZN14Adafruit_SHT3111readTempHumEv+0x90>
  int32_t stemp = (int32_t)(((uint32_t)readbuffer[0] << 8) | readbuffer[1]);
 23f37c0:	ba5b      	rev16	r3, r3
 23f37c2:	b29b      	uxth	r3, r3
  stemp = ((4375 * stemp) >> 14) - 4500;
 23f37c4:	4353      	muls	r3, r2
 23f37c6:	139b      	asrs	r3, r3, #14
 23f37c8:	f5a3 538c 	sub.w	r3, r3, #4480	; 0x1180
 23f37cc:	3b14      	subs	r3, #20
  temp = (float)stemp / 100.0f;
 23f37ce:	ee07 3a90 	vmov	s15, r3
  shum = (625 * shum) >> 12;
 23f37d2:	f240 2271 	movw	r2, #625	; 0x271
  temp = (float)stemp / 100.0f;
 23f37d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  shum = (625 * shum) >> 12;
 23f37da:	f8bd 3003 	ldrh.w	r3, [sp, #3]
  temp = (float)stemp / 100.0f;
 23f37de:	eec7 6a87 	vdiv.f32	s13, s15, s14
  shum = (625 * shum) >> 12;
 23f37e2:	ba5b      	rev16	r3, r3
 23f37e4:	b29b      	uxth	r3, r3
 23f37e6:	4353      	muls	r3, r2
 23f37e8:	0b1b      	lsrs	r3, r3, #12
  humidity = (float)shum / 100.0f;
 23f37ea:	ee07 3a90 	vmov	s15, r3
 23f37ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  temp = (float)stemp / 100.0f;
 23f37f2:	edc4 6a01 	vstr	s13, [r4, #4]
  humidity = (float)shum / 100.0f;
 23f37f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
  return true;
 23f37fa:	2001      	movs	r0, #1
  humidity = (float)shum / 100.0f;
 23f37fc:	edc4 6a00 	vstr	s13, [r4]
}
 23f3800:	b002      	add	sp, #8
 23f3802:	bd10      	pop	{r4, pc}
    return false;
 23f3804:	2000      	movs	r0, #0
 23f3806:	e7fb      	b.n	23f3800 <_ZN14Adafruit_SHT3111readTempHumEv+0x88>
 23f3808:	42c80000 	.word	0x42c80000

023f380c <_ZN14Adafruit_SHT3115readTemperatureEv>:
float Adafruit_SHT31::readTemperature(void) {
 23f380c:	b510      	push	{r4, lr}
 23f380e:	4604      	mov	r4, r0
  if (!readTempHum())
 23f3810:	f7ff ffb2 	bl	23f3778 <_ZN14Adafruit_SHT3111readTempHumEv>
 23f3814:	b110      	cbz	r0, 23f381c <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>
  return temp;
 23f3816:	ed94 0a01 	vldr	s0, [r4, #4]
}
 23f381a:	bd10      	pop	{r4, pc}
    return NAN;
 23f381c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 23f3824 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>
 23f3820:	e7fb      	b.n	23f381a <_ZN14Adafruit_SHT3115readTemperatureEv+0xe>
 23f3822:	bf00      	nop
 23f3824:	7fc00000 	.word	0x7fc00000

023f3828 <_ZN14Adafruit_SHT3112readHumidityEv>:
float Adafruit_SHT31::readHumidity(void) {
 23f3828:	b510      	push	{r4, lr}
 23f382a:	4604      	mov	r4, r0
  if (!readTempHum())
 23f382c:	f7ff ffa4 	bl	23f3778 <_ZN14Adafruit_SHT3111readTempHumEv>
 23f3830:	b110      	cbz	r0, 23f3838 <_ZN14Adafruit_SHT3112readHumidityEv+0x10>
  return humidity;
 23f3832:	ed94 0a00 	vldr	s0, [r4]
}
 23f3836:	bd10      	pop	{r4, pc}
    return NAN;
 23f3838:	ed9f 0a01 	vldr	s0, [pc, #4]	; 23f3840 <_ZN14Adafruit_SHT3112readHumidityEv+0x18>
 23f383c:	e7fb      	b.n	23f3836 <_ZN14Adafruit_SHT3112readHumidityEv+0xe>
 23f383e:	bf00      	nop
 23f3840:	7fc00000 	.word	0x7fc00000

023f3844 <_ZN15Adafruit_SI1145C1Ev>:
#include "Adafruit_SI1145.h"
/**
 * @brief Construct a new Adafruit_SI1145::Adafruit_SI1145 object
 *
 */
Adafruit_SI1145::Adafruit_SI1145() : m_pBus(&Wire), _addr(SI1145_ADDR) {}
 23f3844:	b510      	push	{r4, lr}
 23f3846:	4604      	mov	r4, r0
 23f3848:	f006 fd64 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23f384c:	2360      	movs	r3, #96	; 0x60
 23f384e:	6020      	str	r0, [r4, #0]
 23f3850:	7123      	strb	r3, [r4, #4]
 23f3852:	4620      	mov	r0, r4
 23f3854:	bd10      	pop	{r4, pc}

023f3856 <_ZN15Adafruit_SI11455read8Eh>:
  return read8(SI1145_REG_PARAMRD);
}

/*********************************************************************/

uint8_t Adafruit_SI1145::read8(uint8_t reg) {
 23f3856:	b538      	push	{r3, r4, r5, lr}
 23f3858:	4604      	mov	r4, r0
 23f385a:	460d      	mov	r5, r1
  m_pBus->beginTransmission(_addr);
 23f385c:	7901      	ldrb	r1, [r0, #4]
 23f385e:	6800      	ldr	r0, [r0, #0]
 23f3860:	f005 fb52 	bl	23f8f08 <_ZN7TwoWire17beginTransmissionEh>
  m_pBus->write((uint8_t)reg);
 23f3864:	6820      	ldr	r0, [r4, #0]
 23f3866:	4629      	mov	r1, r5
 23f3868:	6803      	ldr	r3, [r0, #0]
 23f386a:	689b      	ldr	r3, [r3, #8]
 23f386c:	4798      	blx	r3
  m_pBus->endTransmission();
 23f386e:	6820      	ldr	r0, [r4, #0]
 23f3870:	f005 fb55 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>

  m_pBus->requestFrom((uint8_t)_addr, (uint8_t)1);
 23f3874:	2201      	movs	r2, #1
 23f3876:	7921      	ldrb	r1, [r4, #4]
 23f3878:	6820      	ldr	r0, [r4, #0]
 23f387a:	f005 fb42 	bl	23f8f02 <_ZN7TwoWire11requestFromEhj>
  return m_pBus->read();
 23f387e:	6820      	ldr	r0, [r4, #0]
 23f3880:	6803      	ldr	r3, [r0, #0]
 23f3882:	695b      	ldr	r3, [r3, #20]
 23f3884:	4798      	blx	r3
}
 23f3886:	b2c0      	uxtb	r0, r0
 23f3888:	bd38      	pop	{r3, r4, r5, pc}

023f388a <_ZN15Adafruit_SI11456read16Eh>:

uint16_t Adafruit_SI1145::read16(uint8_t a) {
 23f388a:	b538      	push	{r3, r4, r5, lr}
 23f388c:	4604      	mov	r4, r0
 23f388e:	460d      	mov	r5, r1
  uint16_t ret;

  m_pBus->beginTransmission(_addr); // start transmission to device
 23f3890:	7901      	ldrb	r1, [r0, #4]
 23f3892:	6800      	ldr	r0, [r0, #0]
 23f3894:	f005 fb38 	bl	23f8f08 <_ZN7TwoWire17beginTransmissionEh>
  m_pBus->write(a);                 // sends register address to read from
 23f3898:	6820      	ldr	r0, [r4, #0]
 23f389a:	4629      	mov	r1, r5
 23f389c:	6803      	ldr	r3, [r0, #0]
 23f389e:	689b      	ldr	r3, [r3, #8]
 23f38a0:	4798      	blx	r3
  m_pBus->endTransmission();        // end transmission
 23f38a2:	6820      	ldr	r0, [r4, #0]
 23f38a4:	f005 fb3b 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>

  m_pBus->requestFrom(_addr, (uint8_t)2); // send data n-bytes read
 23f38a8:	2202      	movs	r2, #2
 23f38aa:	7921      	ldrb	r1, [r4, #4]
 23f38ac:	6820      	ldr	r0, [r4, #0]
 23f38ae:	f005 fb28 	bl	23f8f02 <_ZN7TwoWire11requestFromEhj>
  ret = m_pBus->read();                   // receive DATA
 23f38b2:	6820      	ldr	r0, [r4, #0]
 23f38b4:	6803      	ldr	r3, [r0, #0]
 23f38b6:	695b      	ldr	r3, [r3, #20]
 23f38b8:	4798      	blx	r3
 23f38ba:	4605      	mov	r5, r0
  ret |= (uint16_t)m_pBus->read() << 8;   // receive DATA
 23f38bc:	6820      	ldr	r0, [r4, #0]
 23f38be:	6803      	ldr	r3, [r0, #0]
 23f38c0:	695b      	ldr	r3, [r3, #20]
 23f38c2:	4798      	blx	r3
 23f38c4:	ea45 2000 	orr.w	r0, r5, r0, lsl #8

  return ret;
}
 23f38c8:	b280      	uxth	r0, r0
 23f38ca:	bd38      	pop	{r3, r4, r5, pc}

023f38cc <_ZN15Adafruit_SI11456readUVEv>:
uint16_t Adafruit_SI1145::readUV(void) { return read16(0x2C); }
 23f38cc:	212c      	movs	r1, #44	; 0x2c
 23f38ce:	f7ff bfdc 	b.w	23f388a <_ZN15Adafruit_SI11456read16Eh>

023f38d2 <_ZN15Adafruit_SI114511readVisibleEv>:
uint16_t Adafruit_SI1145::readVisible(void) { return read16(0x22); }
 23f38d2:	2122      	movs	r1, #34	; 0x22
 23f38d4:	f7ff bfd9 	b.w	23f388a <_ZN15Adafruit_SI11456read16Eh>

023f38d8 <_ZN15Adafruit_SI11456readIREv>:
uint16_t Adafruit_SI1145::readIR(void) { return read16(0x24); }
 23f38d8:	2124      	movs	r1, #36	; 0x24
 23f38da:	f7ff bfd6 	b.w	23f388a <_ZN15Adafruit_SI11456read16Eh>

023f38de <_ZN15Adafruit_SI11456write8Ehh>:

void Adafruit_SI1145::write8(uint8_t reg, uint8_t val) {
 23f38de:	b570      	push	{r4, r5, r6, lr}
 23f38e0:	4604      	mov	r4, r0
 23f38e2:	460e      	mov	r6, r1
 23f38e4:	4615      	mov	r5, r2

  m_pBus->beginTransmission(_addr); // start transmission to device
 23f38e6:	7901      	ldrb	r1, [r0, #4]
 23f38e8:	6800      	ldr	r0, [r0, #0]
 23f38ea:	f005 fb0d 	bl	23f8f08 <_ZN7TwoWire17beginTransmissionEh>
  m_pBus->write(reg);               // sends register address to write
 23f38ee:	6820      	ldr	r0, [r4, #0]
 23f38f0:	4631      	mov	r1, r6
 23f38f2:	6803      	ldr	r3, [r0, #0]
 23f38f4:	689b      	ldr	r3, [r3, #8]
 23f38f6:	4798      	blx	r3
  m_pBus->write(val);               // sends value
 23f38f8:	6820      	ldr	r0, [r4, #0]
 23f38fa:	4629      	mov	r1, r5
 23f38fc:	6803      	ldr	r3, [r0, #0]
 23f38fe:	689b      	ldr	r3, [r3, #8]
 23f3900:	4798      	blx	r3
  m_pBus->endTransmission();        // end transmission
 23f3902:	6820      	ldr	r0, [r4, #0]
}
 23f3904:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  m_pBus->endTransmission();        // end transmission
 23f3908:	f005 bb09 	b.w	23f8f1e <_ZN7TwoWire15endTransmissionEv>

023f390c <_ZN15Adafruit_SI11455resetEv>:
void Adafruit_SI1145::reset() {
 23f390c:	b510      	push	{r4, lr}
 23f390e:	4604      	mov	r4, r0
  write8(SI1145_REG_MEASRATE0, 0);
 23f3910:	2200      	movs	r2, #0
 23f3912:	2108      	movs	r1, #8
 23f3914:	f7ff ffe3 	bl	23f38de <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_MEASRATE1, 0);
 23f3918:	4620      	mov	r0, r4
 23f391a:	2200      	movs	r2, #0
 23f391c:	2109      	movs	r1, #9
 23f391e:	f7ff ffde 	bl	23f38de <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQEN, 0);
 23f3922:	4620      	mov	r0, r4
 23f3924:	2200      	movs	r2, #0
 23f3926:	2104      	movs	r1, #4
 23f3928:	f7ff ffd9 	bl	23f38de <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQMODE1, 0);
 23f392c:	4620      	mov	r0, r4
 23f392e:	2200      	movs	r2, #0
 23f3930:	2105      	movs	r1, #5
 23f3932:	f7ff ffd4 	bl	23f38de <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQMODE2, 0);
 23f3936:	4620      	mov	r0, r4
 23f3938:	2200      	movs	r2, #0
 23f393a:	2106      	movs	r1, #6
 23f393c:	f7ff ffcf 	bl	23f38de <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_INTCFG, 0);
 23f3940:	4620      	mov	r0, r4
 23f3942:	2200      	movs	r2, #0
 23f3944:	2103      	movs	r1, #3
 23f3946:	f7ff ffca 	bl	23f38de <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQSTAT, 0xFF);
 23f394a:	4620      	mov	r0, r4
 23f394c:	22ff      	movs	r2, #255	; 0xff
 23f394e:	2121      	movs	r1, #33	; 0x21
 23f3950:	f7ff ffc5 	bl	23f38de <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_COMMAND, SI1145_RESET);
 23f3954:	2201      	movs	r2, #1
 23f3956:	2118      	movs	r1, #24
 23f3958:	4620      	mov	r0, r4
 23f395a:	f7ff ffc0 	bl	23f38de <_ZN15Adafruit_SI11456write8Ehh>
  delay(10);
 23f395e:	200a      	movs	r0, #10
 23f3960:	f004 fcdc 	bl	23f831c <delay>
  write8(SI1145_REG_HWKEY, 0x17);
 23f3964:	4620      	mov	r0, r4
 23f3966:	2217      	movs	r2, #23
 23f3968:	2107      	movs	r1, #7
 23f396a:	f7ff ffb8 	bl	23f38de <_ZN15Adafruit_SI11456write8Ehh>
}
 23f396e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(10);
 23f3972:	200a      	movs	r0, #10
 23f3974:	f004 bcd2 	b.w	23f831c <delay>

023f3978 <_ZN15Adafruit_SI114510writeParamEhh>:
uint8_t Adafruit_SI1145::writeParam(uint8_t p, uint8_t v) {
 23f3978:	b538      	push	{r3, r4, r5, lr}
 23f397a:	4604      	mov	r4, r0
 23f397c:	460d      	mov	r5, r1
  write8(SI1145_REG_PARAMWR, v);
 23f397e:	2117      	movs	r1, #23
 23f3980:	f7ff ffad 	bl	23f38de <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_COMMAND, p | SI1145_PARAM_SET);
 23f3984:	4620      	mov	r0, r4
 23f3986:	2118      	movs	r1, #24
 23f3988:	f045 02a0 	orr.w	r2, r5, #160	; 0xa0
 23f398c:	f7ff ffa7 	bl	23f38de <_ZN15Adafruit_SI11456write8Ehh>
  return read8(SI1145_REG_PARAMRD);
 23f3990:	4620      	mov	r0, r4
}
 23f3992:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return read8(SI1145_REG_PARAMRD);
 23f3996:	212e      	movs	r1, #46	; 0x2e
 23f3998:	f7ff bf5d 	b.w	23f3856 <_ZN15Adafruit_SI11455read8Eh>

023f399c <_ZN15Adafruit_SI11455beginEhP7TwoWire>:
boolean Adafruit_SI1145::begin(uint8_t addr, TwoWire *pBus) {
 23f399c:	b510      	push	{r4, lr}
 23f399e:	4604      	mov	r4, r0
 23f39a0:	4610      	mov	r0, r2
  _addr = addr;
 23f39a2:	7121      	strb	r1, [r4, #4]
  m_pBus = pBus;
 23f39a4:	6022      	str	r2, [r4, #0]
  m_pBus->begin();
 23f39a6:	f005 fa85 	bl	23f8eb4 <_ZN7TwoWire5beginEv>
  uint8_t id = read8(SI1145_REG_PARTID);
 23f39aa:	2100      	movs	r1, #0
 23f39ac:	4620      	mov	r0, r4
 23f39ae:	f7ff ff52 	bl	23f3856 <_ZN15Adafruit_SI11455read8Eh>
  if (id != 0x45)
 23f39b2:	2845      	cmp	r0, #69	; 0x45
 23f39b4:	d172      	bne.n	23f3a9c <_ZN15Adafruit_SI11455beginEhP7TwoWire+0x100>
  reset();
 23f39b6:	4620      	mov	r0, r4
 23f39b8:	f7ff ffa8 	bl	23f390c <_ZN15Adafruit_SI11455resetEv>
  write8(SI1145_REG_UCOEFF0, 0x29);
 23f39bc:	2229      	movs	r2, #41	; 0x29
 23f39be:	2113      	movs	r1, #19
 23f39c0:	4620      	mov	r0, r4
 23f39c2:	f7ff ff8c 	bl	23f38de <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF1, 0x89);
 23f39c6:	2289      	movs	r2, #137	; 0x89
 23f39c8:	2114      	movs	r1, #20
 23f39ca:	4620      	mov	r0, r4
 23f39cc:	f7ff ff87 	bl	23f38de <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF2, 0x02);
 23f39d0:	2202      	movs	r2, #2
 23f39d2:	2115      	movs	r1, #21
 23f39d4:	4620      	mov	r0, r4
 23f39d6:	f7ff ff82 	bl	23f38de <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF3, 0x00);
 23f39da:	2200      	movs	r2, #0
 23f39dc:	2116      	movs	r1, #22
 23f39de:	4620      	mov	r0, r4
 23f39e0:	f7ff ff7d 	bl	23f38de <_ZN15Adafruit_SI11456write8Ehh>
  writeParam(SI1145_PARAM_CHLIST,
 23f39e4:	22b1      	movs	r2, #177	; 0xb1
 23f39e6:	2101      	movs	r1, #1
 23f39e8:	4620      	mov	r0, r4
 23f39ea:	f7ff ffc5 	bl	23f3978 <_ZN15Adafruit_SI114510writeParamEhh>
  write8(SI1145_REG_INTCFG, SI1145_REG_INTCFG_INTOE);
 23f39ee:	2201      	movs	r2, #1
 23f39f0:	2103      	movs	r1, #3
 23f39f2:	4620      	mov	r0, r4
 23f39f4:	f7ff ff73 	bl	23f38de <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQEN, SI1145_REG_IRQEN_ALSEVERYSAMPLE);
 23f39f8:	2201      	movs	r2, #1
 23f39fa:	2104      	movs	r1, #4
 23f39fc:	4620      	mov	r0, r4
 23f39fe:	f7ff ff6e 	bl	23f38de <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_PSLED21, 0x03); // 20mA for LED 1 only
 23f3a02:	2203      	movs	r2, #3
 23f3a04:	210f      	movs	r1, #15
 23f3a06:	4620      	mov	r0, r4
 23f3a08:	f7ff ff69 	bl	23f38de <_ZN15Adafruit_SI11456write8Ehh>
  writeParam(SI1145_PARAM_PS1ADCMUX, SI1145_PARAM_ADCMUX_LARGEIR);
 23f3a0c:	2203      	movs	r2, #3
 23f3a0e:	2107      	movs	r1, #7
 23f3a10:	4620      	mov	r0, r4
 23f3a12:	f7ff ffb1 	bl	23f3978 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_PSLED12SEL, SI1145_PARAM_PSLED12SEL_PS1LED1);
 23f3a16:	2201      	movs	r2, #1
 23f3a18:	2102      	movs	r1, #2
 23f3a1a:	4620      	mov	r0, r4
 23f3a1c:	f7ff ffac 	bl	23f3978 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_PSADCGAIN, 0);
 23f3a20:	2200      	movs	r2, #0
 23f3a22:	210b      	movs	r1, #11
 23f3a24:	4620      	mov	r0, r4
 23f3a26:	f7ff ffa7 	bl	23f3978 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_PSADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
 23f3a2a:	2270      	movs	r2, #112	; 0x70
 23f3a2c:	210a      	movs	r1, #10
 23f3a2e:	4620      	mov	r0, r4
 23f3a30:	f7ff ffa2 	bl	23f3978 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_PSADCMISC,
 23f3a34:	2224      	movs	r2, #36	; 0x24
 23f3a36:	210c      	movs	r1, #12
 23f3a38:	4620      	mov	r0, r4
 23f3a3a:	f7ff ff9d 	bl	23f3978 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSIRADCMUX, SI1145_PARAM_ADCMUX_SMALLIR);
 23f3a3e:	2200      	movs	r2, #0
 23f3a40:	210e      	movs	r1, #14
 23f3a42:	4620      	mov	r0, r4
 23f3a44:	f7ff ff98 	bl	23f3978 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSIRADCGAIN, 0);
 23f3a48:	2200      	movs	r2, #0
 23f3a4a:	211e      	movs	r1, #30
 23f3a4c:	4620      	mov	r0, r4
 23f3a4e:	f7ff ff93 	bl	23f3978 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSIRADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
 23f3a52:	2270      	movs	r2, #112	; 0x70
 23f3a54:	211d      	movs	r1, #29
 23f3a56:	4620      	mov	r0, r4
 23f3a58:	f7ff ff8e 	bl	23f3978 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSIRADCMISC, SI1145_PARAM_ALSIRADCMISC_RANGE);
 23f3a5c:	2220      	movs	r2, #32
 23f3a5e:	211f      	movs	r1, #31
 23f3a60:	4620      	mov	r0, r4
 23f3a62:	f7ff ff89 	bl	23f3978 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSVISADCGAIN, 0);
 23f3a66:	2200      	movs	r2, #0
 23f3a68:	2111      	movs	r1, #17
 23f3a6a:	4620      	mov	r0, r4
 23f3a6c:	f7ff ff84 	bl	23f3978 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSVISADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
 23f3a70:	2270      	movs	r2, #112	; 0x70
 23f3a72:	2110      	movs	r1, #16
 23f3a74:	4620      	mov	r0, r4
 23f3a76:	f7ff ff7f 	bl	23f3978 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSVISADCMISC, SI1145_PARAM_ALSVISADCMISC_VISRANGE);
 23f3a7a:	2220      	movs	r2, #32
 23f3a7c:	2112      	movs	r1, #18
 23f3a7e:	4620      	mov	r0, r4
 23f3a80:	f7ff ff7a 	bl	23f3978 <_ZN15Adafruit_SI114510writeParamEhh>
  write8(SI1145_REG_MEASRATE0, 0xFF); // 255 * 31.25uS = 8ms
 23f3a84:	22ff      	movs	r2, #255	; 0xff
 23f3a86:	2108      	movs	r1, #8
 23f3a88:	4620      	mov	r0, r4
 23f3a8a:	f7ff ff28 	bl	23f38de <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_COMMAND, SI1145_PSALS_AUTO);
 23f3a8e:	4620      	mov	r0, r4
 23f3a90:	220f      	movs	r2, #15
 23f3a92:	2118      	movs	r1, #24
 23f3a94:	f7ff ff23 	bl	23f38de <_ZN15Adafruit_SI11456write8Ehh>
 23f3a98:	2001      	movs	r0, #1
}
 23f3a9a:	bd10      	pop	{r4, pc}
    return false; // look for SI1145
 23f3a9c:	2000      	movs	r0, #0
 23f3a9e:	e7fc      	b.n	23f3a9a <_ZN15Adafruit_SI11455beginEhP7TwoWire+0xfe>

023f3aa0 <_ZN15Adafruit_SI11455beginEP7TwoWire>:
boolean Adafruit_SI1145::begin(TwoWire *pBus) {
 23f3aa0:	460a      	mov	r2, r1
  return begin(SI1145_ADDR, pBus);
 23f3aa2:	2160      	movs	r1, #96	; 0x60
 23f3aa4:	f7ff bf7a 	b.w	23f399c <_ZN15Adafruit_SI11455beginEhP7TwoWire>

023f3aa8 <_ZN16Adafruit_SSD1306D1Ev>:
      rstPin(rst_pin) {}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
 23f3aa8:	b510      	push	{r4, lr}
 23f3aaa:	4b04      	ldr	r3, [pc, #16]	; (23f3abc <_ZN16Adafruit_SSD1306D1Ev+0x14>)
 23f3aac:	4604      	mov	r4, r0
 23f3aae:	6003      	str	r3, [r0, #0]
  if (buffer) {
 23f3ab0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 23f3ab2:	b108      	cbz	r0, 23f3ab8 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
 23f3ab4:	f004 fb8a 	bl	23f81cc <free>
    buffer = NULL;
  }
}
 23f3ab8:	4620      	mov	r0, r4
 23f3aba:	bd10      	pop	{r4, pc}
 23f3abc:	023ff6e4 	.word	0x023ff6e4

023f3ac0 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
 23f3ac0:	b510      	push	{r4, lr}
 23f3ac2:	4604      	mov	r4, r0
}
 23f3ac4:	f7ff fff0 	bl	23f3aa8 <_ZN16Adafruit_SSD1306D1Ev>
 23f3ac8:	4620      	mov	r0, r4
 23f3aca:	2174      	movs	r1, #116	; 0x74
 23f3acc:	f7f3 fed5 	bl	23e787a <_ZdlPvj>
 23f3ad0:	4620      	mov	r0, r4
 23f3ad2:	bd10      	pop	{r4, pc}

023f3ad4 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 23f3ad4:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 23f3ad6:	b510      	push	{r4, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 23f3ad8:	db4b      	blt.n	23f3b72 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
 23f3ada:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 23f3ade:	428c      	cmp	r4, r1
 23f3ae0:	dd47      	ble.n	23f3b72 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
 23f3ae2:	2a00      	cmp	r2, #0
 23f3ae4:	db45      	blt.n	23f3b72 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
 23f3ae6:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 23f3aea:	4294      	cmp	r4, r2
 23f3aec:	dd41      	ble.n	23f3b72 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
 23f3aee:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
 23f3af0:	2c02      	cmp	r4, #2
 23f3af2:	d01f      	beq.n	23f3b34 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
 23f3af4:	2c03      	cmp	r4, #3
 23f3af6:	d026      	beq.n	23f3b46 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
 23f3af8:	2c01      	cmp	r4, #1
 23f3afa:	d104      	bne.n	23f3b06 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
    case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
 23f3afc:	43d2      	mvns	r2, r2
 23f3afe:	8904      	ldrh	r4, [r0, #8]
 23f3b00:	4414      	add	r4, r2
      break;
 23f3b02:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
 23f3b04:	b221      	sxth	r1, r4
    case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch (color) {
 23f3b06:	2b01      	cmp	r3, #1
 23f3b08:	d023      	beq.n	23f3b52 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
 23f3b0a:	2b02      	cmp	r3, #2
 23f3b0c:	d032      	beq.n	23f3b74 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
 23f3b0e:	bb83      	cbnz	r3, 23f3b72 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    case SSD1306_WHITE:
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
      break;
    case SSD1306_BLACK:
      buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
 23f3b10:	4613      	mov	r3, r2
 23f3b12:	2a00      	cmp	r2, #0
 23f3b14:	8904      	ldrh	r4, [r0, #8]
 23f3b16:	bfb8      	it	lt
 23f3b18:	1dd3      	addlt	r3, r2, #7
 23f3b1a:	10db      	asrs	r3, r3, #3
 23f3b1c:	fb13 1104 	smlabb	r1, r3, r4, r1
 23f3b20:	2301      	movs	r3, #1
 23f3b22:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 23f3b24:	f002 0207 	and.w	r2, r2, #7
 23f3b28:	4093      	lsls	r3, r2
 23f3b2a:	5c42      	ldrb	r2, [r0, r1]
 23f3b2c:	ea22 0203 	bic.w	r2, r2, r3
      break;
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
 23f3b30:	5442      	strb	r2, [r0, r1]
      break;
    }
  }
}
 23f3b32:	e01e      	b.n	23f3b72 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      y = HEIGHT - y - 1;
 23f3b34:	43d2      	mvns	r2, r2
      x = WIDTH - x - 1;
 23f3b36:	8904      	ldrh	r4, [r0, #8]
 23f3b38:	3c01      	subs	r4, #1
 23f3b3a:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
 23f3b3c:	8944      	ldrh	r4, [r0, #10]
      x = WIDTH - x - 1;
 23f3b3e:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
 23f3b40:	4422      	add	r2, r4
 23f3b42:	b212      	sxth	r2, r2
      break;
 23f3b44:	e7df      	b.n	23f3b06 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
 23f3b46:	8944      	ldrh	r4, [r0, #10]
 23f3b48:	3c01      	subs	r4, #1
 23f3b4a:	1a64      	subs	r4, r4, r1
      break;
 23f3b4c:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
 23f3b4e:	b222      	sxth	r2, r4
      break;
 23f3b50:	e7d9      	b.n	23f3b06 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
 23f3b52:	4613      	mov	r3, r2
 23f3b54:	2a00      	cmp	r2, #0
 23f3b56:	8904      	ldrh	r4, [r0, #8]
 23f3b58:	bfb8      	it	lt
 23f3b5a:	1dd3      	addlt	r3, r2, #7
 23f3b5c:	10db      	asrs	r3, r3, #3
 23f3b5e:	fb13 1104 	smlabb	r1, r3, r4, r1
 23f3b62:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 23f3b64:	f002 0007 	and.w	r0, r2, #7
 23f3b68:	2201      	movs	r2, #1
 23f3b6a:	4082      	lsls	r2, r0
 23f3b6c:	5c58      	ldrb	r0, [r3, r1]
 23f3b6e:	4302      	orrs	r2, r0
 23f3b70:	545a      	strb	r2, [r3, r1]
}
 23f3b72:	bd10      	pop	{r4, pc}
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
 23f3b74:	4613      	mov	r3, r2
 23f3b76:	2a00      	cmp	r2, #0
 23f3b78:	8904      	ldrh	r4, [r0, #8]
 23f3b7a:	bfb8      	it	lt
 23f3b7c:	1dd3      	addlt	r3, r2, #7
 23f3b7e:	10db      	asrs	r3, r3, #3
 23f3b80:	fb13 1104 	smlabb	r1, r3, r4, r1
 23f3b84:	2301      	movs	r3, #1
 23f3b86:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 23f3b88:	f002 0207 	and.w	r2, r2, #7
 23f3b8c:	fa03 f202 	lsl.w	r2, r3, r2
 23f3b90:	5c43      	ldrb	r3, [r0, r1]
 23f3b92:	405a      	eors	r2, r3
 23f3b94:	e7cc      	b.n	23f3b30 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

023f3b98 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
 23f3b98:	b570      	push	{r4, r5, r6, lr}
 23f3b9a:	4604      	mov	r4, r0
 23f3b9c:	461d      	mov	r5, r3
      wireClk(clkDuring), restoreClk(clkAfter)
 23f3b9e:	2600      	movs	r6, #0
 23f3ba0:	f7fe fece 	bl	23f2940 <_ZN12Adafruit_GFXC1Ess>
 23f3ba4:	4b11      	ldr	r3, [pc, #68]	; (23f3bec <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
 23f3ba6:	6266      	str	r6, [r4, #36]	; 0x24
 23f3ba8:	6023      	str	r3, [r4, #0]
    : Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
 23f3baa:	b915      	cbnz	r5, 23f3bb2 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
 23f3bac:	f006 fbb2 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23f3bb0:	4605      	mov	r5, r0
      wireClk(clkDuring), restoreClk(clkAfter)
 23f3bb2:	23ff      	movs	r3, #255	; 0xff
 23f3bb4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 23f3bb8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 23f3bbc:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 23f3bc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 23f3bc4:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
 23f3bc8:	9b05      	ldr	r3, [sp, #20]
}
 23f3bca:	4620      	mov	r0, r4
      wireClk(clkDuring), restoreClk(clkAfter)
 23f3bcc:	65a3      	str	r3, [r4, #88]	; 0x58
 23f3bce:	9b06      	ldr	r3, [sp, #24]
 23f3bd0:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
 23f3bd4:	65e3      	str	r3, [r4, #92]	; 0x5c
  {
 23f3bd6:	4b06      	ldr	r3, [pc, #24]	; (23f3bf0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
 23f3bd8:	86a2      	strh	r2, [r4, #52]	; 0x34
 23f3bda:	6663      	str	r3, [r4, #100]	; 0x64
 23f3bdc:	2301      	movs	r3, #1
 23f3bde:	66e6      	str	r6, [r4, #108]	; 0x6c
 23f3be0:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 23f3be4:	f8a4 6070 	strh.w	r6, [r4, #112]	; 0x70
}
 23f3be8:	bd70      	pop	{r4, r5, r6, pc}
 23f3bea:	bf00      	nop
 23f3bec:	023ff6e4 	.word	0x023ff6e4
 23f3bf0:	023fea50 	.word	0x023fea50

023f3bf4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
 23f3bf4:	b570      	push	{r4, r5, r6, lr}
 23f3bf6:	4604      	mov	r4, r0
  if (wire) { // I2C
 23f3bf8:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
 23f3bfa:	460d      	mov	r5, r1
  if (wire) { // I2C
 23f3bfc:	b190      	cbz	r0, 23f3c24 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
 23f3bfe:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 23f3c02:	f005 f985 	bl	23f8f10 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 23f3c06:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f3c08:	2100      	movs	r1, #0
 23f3c0a:	6803      	ldr	r3, [r0, #0]
 23f3c0c:	689b      	ldr	r3, [r3, #8]
 23f3c0e:	4798      	blx	r3
    WIRE_WRITE(c);
 23f3c10:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f3c12:	4629      	mov	r1, r5
 23f3c14:	6803      	ldr	r3, [r0, #0]
 23f3c16:	689b      	ldr	r3, [r3, #8]
 23f3c18:	4798      	blx	r3
    wire->endTransmission();
 23f3c1a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
 23f3c1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    wire->endTransmission();
 23f3c20:	f005 b97d 	b.w	23f8f1e <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
 23f3c24:	6c22      	ldr	r2, [r4, #64]	; 0x40
 23f3c26:	6d20      	ldr	r0, [r4, #80]	; 0x50
 23f3c28:	6813      	ldr	r3, [r2, #0]
 23f3c2a:	ea23 0300 	bic.w	r3, r3, r0
 23f3c2e:	6013      	str	r3, [r2, #0]
  if (spi) {
 23f3c30:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f3c32:	b118      	cbz	r0, 23f3c3c <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x48>
}
 23f3c34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (void)spi->transfer(d);
 23f3c38:	f005 beb4 	b.w	23f99a4 <_ZN8SPIClass8transferEh>
 23f3c3c:	2208      	movs	r2, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f3c3e:	2180      	movs	r1, #128	; 0x80
        *mosiPort |= mosiPinMask;
 23f3c40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23f3c42:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 23f3c44:	6818      	ldr	r0, [r3, #0]
      if (d & bit)
 23f3c46:	420d      	tst	r5, r1
        *mosiPort |= mosiPinMask;
 23f3c48:	bf14      	ite	ne
 23f3c4a:	4330      	orrne	r0, r6
        *mosiPort &= ~mosiPinMask;
 23f3c4c:	43b0      	biceq	r0, r6
 23f3c4e:	6018      	str	r0, [r3, #0]
      *clkPort |= clkPinMask;  // Clock high
 23f3c50:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 23f3c52:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 23f3c54:	6803      	ldr	r3, [r0, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f3c56:	3a01      	subs	r2, #1
      *clkPort |= clkPinMask;  // Clock high
 23f3c58:	ea43 0306 	orr.w	r3, r3, r6
 23f3c5c:	6003      	str	r3, [r0, #0]
      *clkPort &= ~clkPinMask; // Clock low
 23f3c5e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 23f3c60:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 23f3c62:	6803      	ldr	r3, [r0, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f3c64:	ea4f 0151 	mov.w	r1, r1, lsr #1
      *clkPort &= ~clkPinMask; // Clock low
 23f3c68:	ea23 0306 	bic.w	r3, r3, r6
 23f3c6c:	6003      	str	r3, [r0, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f3c6e:	d1e7      	bne.n	23f3c40 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4c>
}
 23f3c70:	bd70      	pop	{r4, r5, r6, pc}

023f3c72 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing SSD1306_BLACK (value 0) pixels will actually draw
   white, SSD1306_WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(bool i) {
 23f3c72:	b538      	push	{r3, r4, r5, lr}
 23f3c74:	4604      	mov	r4, r0
  TRANSACTION_START
 23f3c76:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(bool i) {
 23f3c78:	460d      	mov	r5, r1
  TRANSACTION_START
 23f3c7a:	b180      	cbz	r0, 23f3c9e <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>
	  setSpeed(speed);
 23f3c7c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 23f3c7e:	f005 f915 	bl	23f8eac <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
 23f3c82:	2d00      	cmp	r5, #0
 23f3c84:	4620      	mov	r0, r4
 23f3c86:	bf14      	ite	ne
 23f3c88:	21a7      	movne	r1, #167	; 0xa7
 23f3c8a:	21a6      	moveq	r1, #166	; 0xa6
 23f3c8c:	f7ff ffb2 	bl	23f3bf4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
 23f3c90:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f3c92:	b188      	cbz	r0, 23f3cb8 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
 23f3c94:	6de1      	ldr	r1, [r4, #92]	; 0x5c
}
 23f3c96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23f3c9a:	f005 b907 	b.w	23f8eac <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
 23f3c9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f3ca0:	b118      	cbz	r0, 23f3caa <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
 23f3ca2:	f104 0164 	add.w	r1, r4, #100	; 0x64
 23f3ca6:	f005 fe0f 	bl	23f98c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
 23f3caa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f3cac:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f3cae:	6813      	ldr	r3, [r2, #0]
 23f3cb0:	ea23 0301 	bic.w	r3, r3, r1
 23f3cb4:	6013      	str	r3, [r2, #0]
 23f3cb6:	e7e4      	b.n	23f3c82 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
 23f3cb8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f3cba:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f3cbc:	6813      	ldr	r3, [r2, #0]
 23f3cbe:	430b      	orrs	r3, r1
 23f3cc0:	6013      	str	r3, [r2, #0]
 23f3cc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f3cc4:	b118      	cbz	r0, 23f3cce <_ZN16Adafruit_SSD130613invertDisplayEb+0x5c>
}
 23f3cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
 23f3cca:	f005 bde3 	b.w	23f9894 <_ZN8SPIClass14endTransactionEv>
}
 23f3cce:	bd38      	pop	{r3, r4, r5, pc}

023f3cd0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
 23f3cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f3cd2:	4604      	mov	r4, r0
  if (wire) { // I2C
 23f3cd4:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
 23f3cd6:	460d      	mov	r5, r1
  if (wire) { // I2C
 23f3cd8:	188f      	adds	r7, r1, r2
 23f3cda:	b340      	cbz	r0, 23f3d2e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x5e>
    wire->beginTransmission(i2caddr);
 23f3cdc:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 23f3ce0:	f005 f916 	bl	23f8f10 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 23f3ce4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f3ce6:	2100      	movs	r1, #0
 23f3ce8:	6803      	ldr	r3, [r0, #0]
    uint16_t bytesOut = 1;
 23f3cea:	2601      	movs	r6, #1
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 23f3cec:	689b      	ldr	r3, [r3, #8]
 23f3cee:	4798      	blx	r3
    while (n--) {
 23f3cf0:	42bd      	cmp	r5, r7
        wire->endTransmission();
 23f3cf2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while (n--) {
 23f3cf4:	d017      	beq.n	23f3d26 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x56>
      if (bytesOut >= WIRE_MAX) {
 23f3cf6:	2e1f      	cmp	r6, #31
 23f3cf8:	d90c      	bls.n	23f3d14 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x44>
        wire->endTransmission();
 23f3cfa:	f005 f910 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
 23f3cfe:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 23f3d02:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f3d04:	f005 f904 	bl	23f8f10 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 23f3d08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f3d0a:	2100      	movs	r1, #0
 23f3d0c:	6803      	ldr	r3, [r0, #0]
        bytesOut = 1;
 23f3d0e:	2601      	movs	r6, #1
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 23f3d10:	689b      	ldr	r3, [r3, #8]
 23f3d12:	4798      	blx	r3
      WIRE_WRITE(pgm_read_byte(c++));
 23f3d14:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f3d16:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f3d1a:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
 23f3d1c:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
 23f3d1e:	689b      	ldr	r3, [r3, #8]
 23f3d20:	4798      	blx	r3
      bytesOut++;
 23f3d22:	b2b6      	uxth	r6, r6
    while (n--) {
 23f3d24:	e7e4      	b.n	23f3cf0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x20>
}
 23f3d26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
 23f3d2a:	f005 b8f8 	b.w	23f8f1e <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
 23f3d2e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 23f3d30:	6d21      	ldr	r1, [r4, #80]	; 0x50
 23f3d32:	6813      	ldr	r3, [r2, #0]
 23f3d34:	ea23 0301 	bic.w	r3, r3, r1
 23f3d38:	6013      	str	r3, [r2, #0]
    while (n--)
 23f3d3a:	42bd      	cmp	r5, r7
 23f3d3c:	d026      	beq.n	23f3d8c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xbc>
  if (spi) {
 23f3d3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
      SPIwrite(pgm_read_byte(c++));
 23f3d40:	f815 1b01 	ldrb.w	r1, [r5], #1
  if (spi) {
 23f3d44:	b110      	cbz	r0, 23f3d4c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x7c>
    (void)spi->transfer(d);
 23f3d46:	f005 fe2d 	bl	23f99a4 <_ZN8SPIClass8transferEh>
 23f3d4a:	e7f6      	b.n	23f3d3a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6a>
 23f3d4c:	f04f 0e08 	mov.w	lr, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f3d50:	2080      	movs	r0, #128	; 0x80
        *mosiPort |= mosiPinMask;
 23f3d52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23f3d54:	f8d4 c048 	ldr.w	ip, [r4, #72]	; 0x48
 23f3d58:	681e      	ldr	r6, [r3, #0]
      if (d & bit)
 23f3d5a:	4201      	tst	r1, r0
        *mosiPort |= mosiPinMask;
 23f3d5c:	bf14      	ite	ne
 23f3d5e:	ea46 060c 	orrne.w	r6, r6, ip
        *mosiPort &= ~mosiPinMask;
 23f3d62:	ea26 060c 	biceq.w	r6, r6, ip
 23f3d66:	601e      	str	r6, [r3, #0]
      *clkPort |= clkPinMask;  // Clock high
 23f3d68:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 23f3d6a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 23f3d6c:	6833      	ldr	r3, [r6, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f3d6e:	f1be 0e01 	subs.w	lr, lr, #1
      *clkPort |= clkPinMask;  // Clock high
 23f3d72:	ea43 0302 	orr.w	r3, r3, r2
 23f3d76:	6033      	str	r3, [r6, #0]
      *clkPort &= ~clkPinMask; // Clock low
 23f3d78:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 23f3d7a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 23f3d7c:	6833      	ldr	r3, [r6, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f3d7e:	ea4f 0050 	mov.w	r0, r0, lsr #1
      *clkPort &= ~clkPinMask; // Clock low
 23f3d82:	ea23 0302 	bic.w	r3, r3, r2
 23f3d86:	6033      	str	r3, [r6, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f3d88:	d1e3      	bne.n	23f3d52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x82>
 23f3d8a:	e7d6      	b.n	23f3d3a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6a>
}
 23f3d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f3d8e <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) {
 23f3d8e:	b538      	push	{r3, r4, r5, lr}
 23f3d90:	4604      	mov	r4, r0
  TRANSACTION_START
 23f3d92:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command(uint8_t c) {
 23f3d94:	460d      	mov	r5, r1
  TRANSACTION_START
 23f3d96:	b168      	cbz	r0, 23f3db4 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x26>
 23f3d98:	6da1      	ldr	r1, [r4, #88]	; 0x58
 23f3d9a:	f005 f887 	bl	23f8eac <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(c);
 23f3d9e:	4620      	mov	r0, r4
 23f3da0:	4629      	mov	r1, r5
 23f3da2:	f7ff ff27 	bl	23f3bf4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
 23f3da6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f3da8:	b188      	cbz	r0, 23f3dce <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x40>
 23f3daa:	6de1      	ldr	r1, [r4, #92]	; 0x5c
}
 23f3dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23f3db0:	f005 b87c 	b.w	23f8eac <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
 23f3db4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f3db6:	b118      	cbz	r0, 23f3dc0 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x32>
 23f3db8:	f104 0164 	add.w	r1, r4, #100	; 0x64
 23f3dbc:	f005 fd84 	bl	23f98c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
 23f3dc0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f3dc2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f3dc4:	6813      	ldr	r3, [r2, #0]
 23f3dc6:	ea23 0301 	bic.w	r3, r3, r1
 23f3dca:	6013      	str	r3, [r2, #0]
 23f3dcc:	e7e7      	b.n	23f3d9e <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x10>
  TRANSACTION_END
 23f3dce:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f3dd0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f3dd2:	6813      	ldr	r3, [r2, #0]
 23f3dd4:	430b      	orrs	r3, r1
 23f3dd6:	6013      	str	r3, [r2, #0]
 23f3dd8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f3dda:	b118      	cbz	r0, 23f3de4 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x56>
}
 23f3ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
 23f3de0:	f005 bd58 	b.w	23f9894 <_ZN8SPIClass14endTransactionEv>
}
 23f3de4:	bd38      	pop	{r3, r4, r5, pc}

023f3de6 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
 23f3de6:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 23f3dea:	2100      	movs	r1, #0
 23f3dec:	1dda      	adds	r2, r3, #7
 23f3dee:	bf48      	it	mi
 23f3df0:	f103 020e 	addmi.w	r2, r3, #14
 23f3df4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 23f3df8:	10d2      	asrs	r2, r2, #3
 23f3dfa:	435a      	muls	r2, r3
 23f3dfc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 23f3dfe:	f009 b822 	b.w	23fce46 <memset>
	...

023f3e04 <_ZN16Adafruit_SSD13065beginEhhbb>:
                             bool periphBegin) {
 23f3e04:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 23f3e08:	461e      	mov	r6, r3
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
 23f3e0a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
                             bool periphBegin) {
 23f3e0c:	4604      	mov	r4, r0
 23f3e0e:	460f      	mov	r7, r1
 23f3e10:	4615      	mov	r5, r2
 23f3e12:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
 23f3e16:	b1c3      	cbz	r3, 23f3e4a <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
 23f3e18:	4620      	mov	r0, r4
 23f3e1a:	f7ff ffe4 	bl	23f3de6 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if (HEIGHT > 32) {
 23f3e1e:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 23f3e22:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 23f3e26:	2820      	cmp	r0, #32
 23f3e28:	dc21      	bgt.n	23f3e6e <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
 23f3e2a:	2320      	movs	r3, #32
 23f3e2c:	2201      	movs	r2, #1
 23f3e2e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 23f3e32:	2373      	movs	r3, #115	; 0x73
 23f3e34:	3820      	subs	r0, #32
 23f3e36:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 23f3e3a:	3973      	subs	r1, #115	; 0x73
 23f3e3c:	9300      	str	r3, [sp, #0]
 23f3e3e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 23f3e42:	4bb8      	ldr	r3, [pc, #736]	; (23f4124 <_ZN16Adafruit_SSD13065beginEhhbb+0x320>)
 23f3e44:	f340 024f 	sbfx	r2, r0, #1, #16
 23f3e48:	e021      	b.n	23f3e8e <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
 23f3e4a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 23f3e4e:	1dd8      	adds	r0, r3, #7
 23f3e50:	bf48      	it	mi
 23f3e52:	f103 000e 	addmi.w	r0, r3, #14
 23f3e56:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 23f3e5a:	10c0      	asrs	r0, r0, #3
 23f3e5c:	4358      	muls	r0, r3
 23f3e5e:	f004 f9a7 	bl	23f81b0 <malloc>
 23f3e62:	62e0      	str	r0, [r4, #44]	; 0x2c
 23f3e64:	2800      	cmp	r0, #0
 23f3e66:	d1d7      	bne.n	23f3e18 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
 23f3e68:	b004      	add	sp, #16
 23f3e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
 23f3e6e:	3840      	subs	r0, #64	; 0x40
 23f3e70:	f3c0 32c0 	ubfx	r2, r0, #15, #1
 23f3e74:	2340      	movs	r3, #64	; 0x40
 23f3e76:	fa02 f280 	sxtah	r2, r2, r0
 23f3e7a:	2001      	movs	r0, #1
 23f3e7c:	e9cd 3001 	strd	r3, r0, [sp, #4]
 23f3e80:	2352      	movs	r3, #82	; 0x52
 23f3e82:	3952      	subs	r1, #82	; 0x52
 23f3e84:	9300      	str	r3, [sp, #0]
 23f3e86:	4ba8      	ldr	r3, [pc, #672]	; (23f4128 <_ZN16Adafruit_SSD13065beginEhhbb+0x324>)
 23f3e88:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 23f3e8c:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
 23f3e8e:	4620      	mov	r0, r4
 23f3e90:	f341 014f 	sbfx	r1, r1, #1, #16
 23f3e94:	f7fe fd6a 	bl	23f296c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if (wire) { // Using I2C
 23f3e98:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
 23f3e9a:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if (wire) { // Using I2C
 23f3e9e:	2800      	cmp	r0, #0
 23f3ea0:	f000 809a 	beq.w	23f3fd8 <_ZN16Adafruit_SSD13065beginEhhbb+0x1d4>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
 23f3ea4:	2d00      	cmp	r5, #0
 23f3ea6:	f040 8095 	bne.w	23f3fd4 <_ZN16Adafruit_SSD13065beginEhhbb+0x1d0>
 23f3eaa:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 23f3eae:	2b20      	cmp	r3, #32
 23f3eb0:	bf0c      	ite	eq
 23f3eb2:	253c      	moveq	r5, #60	; 0x3c
 23f3eb4:	253d      	movne	r5, #61	; 0x3d
 23f3eb6:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if (periphBegin)
 23f3eba:	f1b8 0f00 	cmp.w	r8, #0
 23f3ebe:	d001      	beq.n	23f3ec4 <_ZN16Adafruit_SSD13065beginEhhbb+0xc0>
      wire->begin();
 23f3ec0:	f004 fff8 	bl	23f8eb4 <_ZN7TwoWire5beginEv>
  if (reset && (rstPin >= 0)) {
 23f3ec4:	b1fe      	cbz	r6, 23f3f06 <_ZN16Adafruit_SSD13065beginEhhbb+0x102>
 23f3ec6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 23f3eca:	2800      	cmp	r0, #0
 23f3ecc:	db1b      	blt.n	23f3f06 <_ZN16Adafruit_SSD13065beginEhhbb+0x102>
    pinMode(rstPin, OUTPUT);
 23f3ece:	2101      	movs	r1, #1
 23f3ed0:	b280      	uxth	r0, r0
 23f3ed2:	f006 f99b 	bl	23fa20c <pinMode>
    digitalWrite(rstPin, HIGH);
 23f3ed6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 23f3eda:	2101      	movs	r1, #1
 23f3edc:	b280      	uxth	r0, r0
 23f3ede:	f006 f9a6 	bl	23fa22e <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
 23f3ee2:	2001      	movs	r0, #1
 23f3ee4:	f004 fa1a 	bl	23f831c <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
 23f3ee8:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 23f3eec:	2100      	movs	r1, #0
 23f3eee:	b280      	uxth	r0, r0
 23f3ef0:	f006 f99d 	bl	23fa22e <digitalWrite>
    delay(10);                  // Wait 10 ms
 23f3ef4:	200a      	movs	r0, #10
 23f3ef6:	f004 fa11 	bl	23f831c <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
 23f3efa:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 23f3efe:	2101      	movs	r1, #1
 23f3f00:	b280      	uxth	r0, r0
 23f3f02:	f006 f994 	bl	23fa22e <digitalWrite>
  TRANSACTION_START
 23f3f06:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f3f08:	2800      	cmp	r0, #0
 23f3f0a:	f000 80e5 	beq.w	23f40d8 <_ZN16Adafruit_SSD13065beginEhhbb+0x2d4>
 23f3f0e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 23f3f10:	f004 ffcc 	bl	23f8eac <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
 23f3f14:	2204      	movs	r2, #4
 23f3f16:	4620      	mov	r0, r4
 23f3f18:	4984      	ldr	r1, [pc, #528]	; (23f412c <_ZN16Adafruit_SSD13065beginEhhbb+0x328>)
 23f3f1a:	f7ff fed9 	bl	23f3cd0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
 23f3f1e:	8961      	ldrh	r1, [r4, #10]
 23f3f20:	4620      	mov	r0, r4
 23f3f22:	3901      	subs	r1, #1
 23f3f24:	b2c9      	uxtb	r1, r1
 23f3f26:	f7ff fe65 	bl	23f3bf4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
 23f3f2a:	4981      	ldr	r1, [pc, #516]	; (23f4130 <_ZN16Adafruit_SSD13065beginEhhbb+0x32c>)
 23f3f2c:	2204      	movs	r2, #4
 23f3f2e:	4620      	mov	r0, r4
 23f3f30:	f7ff fece 	bl	23f3cd0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 23f3f34:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 23f3f38:	4620      	mov	r0, r4
 23f3f3a:	2b01      	cmp	r3, #1
 23f3f3c:	bf0c      	ite	eq
 23f3f3e:	2110      	moveq	r1, #16
 23f3f40:	2114      	movne	r1, #20
 23f3f42:	f7ff fe57 	bl	23f3bf4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
 23f3f46:	2204      	movs	r2, #4
 23f3f48:	4620      	mov	r0, r4
 23f3f4a:	497a      	ldr	r1, [pc, #488]	; (23f4134 <_ZN16Adafruit_SSD13065beginEhhbb+0x330>)
 23f3f4c:	f7ff fec0 	bl	23f3cd0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  contrast = 0x8F;
 23f3f50:	238f      	movs	r3, #143	; 0x8f
  if ((WIDTH == 128) && (HEIGHT == 32)) {
 23f3f52:	4a79      	ldr	r2, [pc, #484]	; (23f4138 <_ZN16Adafruit_SSD13065beginEhhbb+0x334>)
  contrast = 0x8F;
 23f3f54:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
  if ((WIDTH == 128) && (HEIGHT == 32)) {
 23f3f58:	68a3      	ldr	r3, [r4, #8]
 23f3f5a:	4293      	cmp	r3, r2
 23f3f5c:	f000 80d4 	beq.w	23f4108 <_ZN16Adafruit_SSD13065beginEhhbb+0x304>
  } else if ((WIDTH == 128) && (HEIGHT == 64)) {
 23f3f60:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 23f3f64:	4293      	cmp	r3, r2
 23f3f66:	f040 80c4 	bne.w	23f40f2 <_ZN16Adafruit_SSD13065beginEhhbb+0x2ee>
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 23f3f6a:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
    comPins = 0x12;
 23f3f6e:	2512      	movs	r5, #18
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 23f3f70:	2b01      	cmp	r3, #1
 23f3f72:	bf0c      	ite	eq
 23f3f74:	239f      	moveq	r3, #159	; 0x9f
 23f3f76:	23cf      	movne	r3, #207	; 0xcf
 23f3f78:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
  ssd1306_command1(SSD1306_SETCOMPINS);
 23f3f7c:	21da      	movs	r1, #218	; 0xda
 23f3f7e:	4620      	mov	r0, r4
 23f3f80:	f7ff fe38 	bl	23f3bf4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(comPins);
 23f3f84:	4629      	mov	r1, r5
 23f3f86:	4620      	mov	r0, r4
 23f3f88:	f7ff fe34 	bl	23f3bf4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(SSD1306_SETCONTRAST);
 23f3f8c:	2181      	movs	r1, #129	; 0x81
 23f3f8e:	4620      	mov	r0, r4
 23f3f90:	f7ff fe30 	bl	23f3bf4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(contrast);
 23f3f94:	4620      	mov	r0, r4
 23f3f96:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
 23f3f9a:	f7ff fe2b 	bl	23f3bf4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
 23f3f9e:	21d9      	movs	r1, #217	; 0xd9
 23f3fa0:	4620      	mov	r0, r4
 23f3fa2:	f7ff fe27 	bl	23f3bf4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 23f3fa6:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 23f3faa:	4620      	mov	r0, r4
 23f3fac:	2b01      	cmp	r3, #1
 23f3fae:	bf0c      	ite	eq
 23f3fb0:	2122      	moveq	r1, #34	; 0x22
 23f3fb2:	21f1      	movne	r1, #241	; 0xf1
 23f3fb4:	f7ff fe1e 	bl	23f3bf4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
 23f3fb8:	4620      	mov	r0, r4
 23f3fba:	2206      	movs	r2, #6
 23f3fbc:	495f      	ldr	r1, [pc, #380]	; (23f413c <_ZN16Adafruit_SSD13065beginEhhbb+0x338>)
 23f3fbe:	f7ff fe87 	bl	23f3cd0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
 23f3fc2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f3fc4:	2800      	cmp	r0, #0
 23f3fc6:	f000 80a1 	beq.w	23f410c <_ZN16Adafruit_SSD13065beginEhhbb+0x308>
 23f3fca:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 23f3fcc:	f004 ff6e 	bl	23f8eac <_ZN7TwoWire8setSpeedEm>
  return true; // Success
 23f3fd0:	2001      	movs	r0, #1
 23f3fd2:	e749      	b.n	23f3e68 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
 23f3fd4:	b26d      	sxtb	r5, r5
 23f3fd6:	e76e      	b.n	23f3eb6 <_ZN16Adafruit_SSD13065beginEhhbb+0xb2>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
 23f3fd8:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
 23f3fdc:	2101      	movs	r1, #1
 23f3fde:	b280      	uxth	r0, r0
 23f3fe0:	f006 f914 	bl	23fa20c <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
 23f3fe4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 23f3fe8:	2101      	movs	r1, #1
 23f3fea:	b280      	uxth	r0, r0
 23f3fec:	f006 f90e 	bl	23fa20c <pinMode>
    dcPort = (PortReg *)portOutputRegister(digitalPinToPort(dcPin));
 23f3ff0:	f003 fbba 	bl	23f7768 <hal_pin_map>
 23f3ff4:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
 23f3ff8:	4d51      	ldr	r5, [pc, #324]	; (23f4140 <_ZN16Adafruit_SSD13065beginEhhbb+0x33c>)
 23f3ffa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f3ffe:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 23f4002:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 23f4006:	6423      	str	r3, [r4, #64]	; 0x40
    dcPinMask = digitalPinToBitMask(dcPin);
 23f4008:	f003 fbae 	bl	23f7768 <hal_pin_map>
 23f400c:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
 23f4010:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f4014:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 23f4018:	785b      	ldrb	r3, [r3, #1]
 23f401a:	6523      	str	r3, [r4, #80]	; 0x50
    csPort = (PortReg *)portOutputRegister(digitalPinToPort(csPin));
 23f401c:	f003 fba4 	bl	23f7768 <hal_pin_map>
 23f4020:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
 23f4024:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f4028:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 23f402c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 23f4030:	6463      	str	r3, [r4, #68]	; 0x44
    csPinMask = digitalPinToBitMask(csPin);
 23f4032:	f003 fb99 	bl	23f7768 <hal_pin_map>
 23f4036:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
    SSD1306_DESELECT
 23f403a:	6c62      	ldr	r2, [r4, #68]	; 0x44
    csPinMask = digitalPinToBitMask(csPin);
 23f403c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f4040:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 23f4044:	785b      	ldrb	r3, [r3, #1]
 23f4046:	6563      	str	r3, [r4, #84]	; 0x54
    SSD1306_DESELECT
 23f4048:	6811      	ldr	r1, [r2, #0]
 23f404a:	430b      	orrs	r3, r1
 23f404c:	6013      	str	r3, [r2, #0]
    if (spi) { // Hardware SPI
 23f404e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f4050:	b130      	cbz	r0, 23f4060 <_ZN16Adafruit_SSD13065beginEhhbb+0x25c>
      if (periphBegin)
 23f4052:	f1b8 0f00 	cmp.w	r8, #0
 23f4056:	f43f af35 	beq.w	23f3ec4 <_ZN16Adafruit_SSD13065beginEhhbb+0xc0>
        spi->begin();
 23f405a:	f005 fbe1 	bl	23f9820 <_ZN8SPIClass5beginEv>
 23f405e:	e731      	b.n	23f3ec4 <_ZN16Adafruit_SSD13065beginEhhbb+0xc0>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
 23f4060:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
 23f4064:	2101      	movs	r1, #1
 23f4066:	b280      	uxth	r0, r0
 23f4068:	f006 f8d0 	bl	23fa20c <pinMode>
      pinMode(clkPin, OUTPUT);
 23f406c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 23f4070:	2101      	movs	r1, #1
 23f4072:	b280      	uxth	r0, r0
 23f4074:	f006 f8ca 	bl	23fa20c <pinMode>
      mosiPort = (PortReg *)portOutputRegister(digitalPinToPort(mosiPin));
 23f4078:	f003 fb76 	bl	23f7768 <hal_pin_map>
 23f407c:	f994 3033 	ldrsb.w	r3, [r4, #51]	; 0x33
 23f4080:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f4084:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 23f4088:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 23f408c:	63a3      	str	r3, [r4, #56]	; 0x38
      mosiPinMask = digitalPinToBitMask(mosiPin);
 23f408e:	f003 fb6b 	bl	23f7768 <hal_pin_map>
 23f4092:	f994 3033 	ldrsb.w	r3, [r4, #51]	; 0x33
 23f4096:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f409a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 23f409e:	785b      	ldrb	r3, [r3, #1]
 23f40a0:	64a3      	str	r3, [r4, #72]	; 0x48
      clkPort = (PortReg *)portOutputRegister(digitalPinToPort(clkPin));
 23f40a2:	f003 fb61 	bl	23f7768 <hal_pin_map>
 23f40a6:	f994 3034 	ldrsb.w	r3, [r4, #52]	; 0x34
 23f40aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f40ae:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 23f40b2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 23f40b6:	63e3      	str	r3, [r4, #60]	; 0x3c
      clkPinMask = digitalPinToBitMask(clkPin);
 23f40b8:	f003 fb56 	bl	23f7768 <hal_pin_map>
 23f40bc:	f994 3034 	ldrsb.w	r3, [r4, #52]	; 0x34
      *clkPort &= ~clkPinMask; // Clock low
 23f40c0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      clkPinMask = digitalPinToBitMask(clkPin);
 23f40c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f40c6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 23f40ca:	7859      	ldrb	r1, [r3, #1]
 23f40cc:	64e1      	str	r1, [r4, #76]	; 0x4c
      *clkPort &= ~clkPinMask; // Clock low
 23f40ce:	6813      	ldr	r3, [r2, #0]
 23f40d0:	ea23 0301 	bic.w	r3, r3, r1
 23f40d4:	6013      	str	r3, [r2, #0]
 23f40d6:	e6f5      	b.n	23f3ec4 <_ZN16Adafruit_SSD13065beginEhhbb+0xc0>
  TRANSACTION_START
 23f40d8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f40da:	b118      	cbz	r0, 23f40e4 <_ZN16Adafruit_SSD13065beginEhhbb+0x2e0>
 23f40dc:	f104 0164 	add.w	r1, r4, #100	; 0x64
 23f40e0:	f005 fbf2 	bl	23f98c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
 23f40e4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f40e6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f40e8:	6813      	ldr	r3, [r2, #0]
 23f40ea:	ea23 0301 	bic.w	r3, r3, r1
 23f40ee:	6013      	str	r3, [r2, #0]
 23f40f0:	e710      	b.n	23f3f14 <_ZN16Adafruit_SSD13065beginEhhbb+0x110>
  } else if ((WIDTH == 96) && (HEIGHT == 16)) {
 23f40f2:	4a14      	ldr	r2, [pc, #80]	; (23f4144 <_ZN16Adafruit_SSD13065beginEhhbb+0x340>)
 23f40f4:	4293      	cmp	r3, r2
 23f40f6:	d107      	bne.n	23f4108 <_ZN16Adafruit_SSD13065beginEhhbb+0x304>
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
 23f40f8:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 23f40fc:	2b01      	cmp	r3, #1
 23f40fe:	bf0c      	ite	eq
 23f4100:	2310      	moveq	r3, #16
 23f4102:	23af      	movne	r3, #175	; 0xaf
 23f4104:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    comPins = 0x02;
 23f4108:	2502      	movs	r5, #2
 23f410a:	e737      	b.n	23f3f7c <_ZN16Adafruit_SSD13065beginEhhbb+0x178>
  TRANSACTION_END
 23f410c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f410e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f4110:	6813      	ldr	r3, [r2, #0]
 23f4112:	430b      	orrs	r3, r1
 23f4114:	6013      	str	r3, [r2, #0]
 23f4116:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f4118:	2800      	cmp	r0, #0
 23f411a:	f43f af59 	beq.w	23f3fd0 <_ZN16Adafruit_SSD13065beginEhhbb+0x1cc>
 23f411e:	f005 fbb9 	bl	23f9894 <_ZN8SPIClass14endTransactionEv>
 23f4122:	e755      	b.n	23f3fd0 <_ZN16Adafruit_SSD13065beginEhhbb+0x1cc>
 23f4124:	023ff4fc 	.word	0x023ff4fc
 23f4128:	023ff23c 	.word	0x023ff23c
 23f412c:	023ff744 	.word	0x023ff744
 23f4130:	023ff748 	.word	0x023ff748
 23f4134:	023ff74c 	.word	0x023ff74c
 23f4138:	00200080 	.word	0x00200080
 23f413c:	023ff750 	.word	0x023ff750
 23f4140:	101c0024 	.word	0x101c0024
 23f4144:	00100060 	.word	0x00100060

023f4148 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
                                             uint16_t color) {
 23f4148:	b570      	push	{r4, r5, r6, lr}
  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
 23f414a:	2a00      	cmp	r2, #0
                                             uint16_t color) {
 23f414c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
 23f4150:	db3f      	blt.n	23f41d2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
 23f4152:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 23f4156:	4294      	cmp	r4, r2
 23f4158:	dd3b      	ble.n	23f41d2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
    if (x < 0) {                  // Clip left
 23f415a:	2900      	cmp	r1, #0
      w += x;
 23f415c:	bfbe      	ittt	lt
 23f415e:	185b      	addlt	r3, r3, r1
      x = 0;
 23f4160:	2100      	movlt	r1, #0
      w += x;
 23f4162:	b21b      	sxthlt	r3, r3
    if ((x + w) > WIDTH) { // Clip right
 23f4164:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 23f4168:	18ce      	adds	r6, r1, r3
 23f416a:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
 23f416c:	bfc4      	itt	gt
 23f416e:	1a63      	subgt	r3, r4, r1
 23f4170:	b21b      	sxthgt	r3, r3
    if (w > 0) { // Proceed only if width is positive
 23f4172:	2b00      	cmp	r3, #0
 23f4174:	dd2d      	ble.n	23f41d2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x], mask = 1 << (y & 7);
 23f4176:	10d6      	asrs	r6, r2, #3
 23f4178:	fb14 1106 	smlabb	r1, r4, r6, r1
 23f417c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
      switch (color) {
 23f417e:	2d01      	cmp	r5, #1
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x], mask = 1 << (y & 7);
 23f4180:	4401      	add	r1, r0
 23f4182:	f002 0007 	and.w	r0, r2, #7
 23f4186:	f04f 0201 	mov.w	r2, #1
 23f418a:	fa02 f200 	lsl.w	r2, r2, r0
 23f418e:	b2d2      	uxtb	r2, r2
      switch (color) {
 23f4190:	d016      	beq.n	23f41c0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x78>
 23f4192:	2d02      	cmp	r5, #2
 23f4194:	d00b      	beq.n	23f41ae <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x66>
 23f4196:	b9e5      	cbnz	r5, 23f41d2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
        mask = ~mask;
 23f4198:	43d2      	mvns	r2, r2
 23f419a:	440b      	add	r3, r1
 23f419c:	b2d2      	uxtb	r2, r2
        while (w--) {
 23f419e:	4299      	cmp	r1, r3
 23f41a0:	d017      	beq.n	23f41d2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
          *pBuf++ &= mask;
 23f41a2:	f811 0b01 	ldrb.w	r0, [r1], #1
 23f41a6:	4010      	ands	r0, r2
 23f41a8:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
 23f41ac:	e7f7      	b.n	23f419e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x56>
 23f41ae:	440b      	add	r3, r1
        while (w--) {
 23f41b0:	4299      	cmp	r1, r3
 23f41b2:	d00e      	beq.n	23f41d2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
          *pBuf++ ^= mask;
 23f41b4:	f811 0b01 	ldrb.w	r0, [r1], #1
 23f41b8:	4050      	eors	r0, r2
 23f41ba:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
 23f41be:	e7f7      	b.n	23f41b0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x68>
 23f41c0:	440b      	add	r3, r1
        while (w--) {
 23f41c2:	4299      	cmp	r1, r3
 23f41c4:	d005      	beq.n	23f41d2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
          *pBuf++ |= mask;
 23f41c6:	f811 0b01 	ldrb.w	r0, [r1], #1
 23f41ca:	4310      	orrs	r0, r2
 23f41cc:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
 23f41d0:	e7f7      	b.n	23f41c2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x7a>
}
 23f41d2:	bd70      	pop	{r4, r5, r6, pc}

023f41d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
                                             int16_t __h, uint16_t color) {
 23f41d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
 23f41d6:	2900      	cmp	r1, #0
                                             int16_t __h, uint16_t color) {
 23f41d8:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
 23f41dc:	db77      	blt.n	23f42ce <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
 23f41de:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 23f41e2:	42b1      	cmp	r1, r6
 23f41e4:	da73      	bge.n	23f42ce <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
    if (__y < 0) {               // Clip top
 23f41e6:	2a00      	cmp	r2, #0
      __h += __y;
 23f41e8:	bfbe      	ittt	lt
 23f41ea:	189b      	addlt	r3, r3, r2
      __y = 0;
 23f41ec:	2200      	movlt	r2, #0
      __h += __y;
 23f41ee:	b21b      	sxthlt	r3, r3
    if ((__y + __h) > HEIGHT) { // Clip bottom
 23f41f0:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 23f41f4:	18d7      	adds	r7, r2, r3
 23f41f6:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
 23f41f8:	bfc4      	itt	gt
 23f41fa:	1aa3      	subgt	r3, r4, r2
 23f41fc:	b21b      	sxthgt	r3, r3
    if (__h > 0) { // Proceed only if height is now positive
 23f41fe:	2b00      	cmp	r3, #0
 23f4200:	dd65      	ble.n	23f42ce <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
 23f4202:	f3c2 04c4 	ubfx	r4, r2, #3, #5
 23f4206:	fb16 1604 	smlabb	r6, r6, r4, r1
 23f420a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
      if (mod) {
 23f420c:	f012 0207 	ands.w	r2, r2, #7
      uint8_t y = __y, h = __h;
 23f4210:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
 23f4212:	eb07 0406 	add.w	r4, r7, r6
      if (mod) {
 23f4216:	d024      	beq.n	23f4262 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
 23f4218:	f1c2 0208 	rsb	r2, r2, #8
 23f421c:	b2d2      	uxtb	r2, r2
        if (h < mod)
 23f421e:	4293      	cmp	r3, r2
          mask &= (0XFF >> (mod - h));
 23f4220:	bf38      	it	cc
 23f4222:	f04f 0cff 	movcc.w	ip, #255	; 0xff
        uint8_t mask = pgm_read_byte(&premask[mod]);
 23f4226:	492c      	ldr	r1, [pc, #176]	; (23f42d8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          mask &= (0XFF >> (mod - h));
 23f4228:	bf38      	it	cc
 23f422a:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
 23f422e:	5c89      	ldrb	r1, [r1, r2]
          mask &= (0XFF >> (mod - h));
 23f4230:	bf3c      	itt	cc
 23f4232:	fa4c fc0e 	asrcc.w	ip, ip, lr
 23f4236:	ea0c 0101 	andcc.w	r1, ip, r1
        switch (color) {
 23f423a:	2d01      	cmp	r5, #1
 23f423c:	d007      	beq.n	23f424e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
 23f423e:	2d02      	cmp	r5, #2
 23f4240:	d02e      	beq.n	23f42a0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
 23f4242:	b94d      	cbnz	r5, 23f4258 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
          *pBuf &= ~mask;
 23f4244:	f817 c006 	ldrb.w	ip, [r7, r6]
 23f4248:	ea2c 0101 	bic.w	r1, ip, r1
 23f424c:	e003      	b.n	23f4256 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
          *pBuf |= mask;
 23f424e:	f817 c006 	ldrb.w	ip, [r7, r6]
 23f4252:	ea41 010c 	orr.w	r1, r1, ip
          *pBuf ^= mask;
 23f4256:	55b9      	strb	r1, [r7, r6]
      if (h >= mod) { // More to go?
 23f4258:	4293      	cmp	r3, r2
 23f425a:	d338      	bcc.n	23f42ce <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
        pBuf += WIDTH;
 23f425c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 23f4260:	440c      	add	r4, r1
        h -= mod;
 23f4262:	1a9a      	subs	r2, r3, r2
 23f4264:	b2d2      	uxtb	r2, r2
        if (h >= 8) {
 23f4266:	2a07      	cmp	r2, #7
 23f4268:	d90e      	bls.n	23f4288 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if (color == SSD1306_INVERSE) {
 23f426a:	2d02      	cmp	r5, #2
 23f426c:	d11d      	bne.n	23f42aa <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
 23f426e:	4613      	mov	r3, r2
              *pBuf ^= 0xFF; // Invert byte
 23f4270:	7821      	ldrb	r1, [r4, #0]
              h -= 8;        // Subtract 8 rows from height
 23f4272:	3b08      	subs	r3, #8
              *pBuf ^= 0xFF; // Invert byte
 23f4274:	43c9      	mvns	r1, r1
 23f4276:	7021      	strb	r1, [r4, #0]
              pBuf += WIDTH; // Advance pointer 8 rows
 23f4278:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h -= 8;        // Subtract 8 rows from height
 23f427c:	b2db      	uxtb	r3, r3
            } while (h >= 8);
 23f427e:	2b07      	cmp	r3, #7
              pBuf += WIDTH; // Advance pointer 8 rows
 23f4280:	440c      	add	r4, r1
            } while (h >= 8);
 23f4282:	d8f5      	bhi.n	23f4270 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
              h -= 8;        // Subtract 8 rows from height
 23f4284:	f002 0207 	and.w	r2, r2, #7
        if (h) { // Do the final partial byte, if necessary
 23f4288:	b30a      	cbz	r2, 23f42ce <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
 23f428a:	4b14      	ldr	r3, [pc, #80]	; (23f42dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x108>)
          switch (color) {
 23f428c:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
 23f428e:	5c9b      	ldrb	r3, [r3, r2]
          switch (color) {
 23f4290:	d01a      	beq.n	23f42c8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf4>
 23f4292:	2d02      	cmp	r5, #2
 23f4294:	d01c      	beq.n	23f42d0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfc>
 23f4296:	b9d5      	cbnz	r5, 23f42ce <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
            *pBuf &= ~mask;
 23f4298:	7822      	ldrb	r2, [r4, #0]
 23f429a:	ea22 0303 	bic.w	r3, r2, r3
 23f429e:	e015      	b.n	23f42cc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          *pBuf ^= mask;
 23f42a0:	f817 c006 	ldrb.w	ip, [r7, r6]
 23f42a4:	ea81 010c 	eor.w	r1, r1, ip
 23f42a8:	e7d5      	b.n	23f4256 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
 23f42aa:	1e29      	subs	r1, r5, #0
 23f42ac:	bf18      	it	ne
 23f42ae:	2101      	movne	r1, #1
 23f42b0:	4613      	mov	r3, r2
 23f42b2:	4249      	negs	r1, r1
 23f42b4:	b2c9      	uxtb	r1, r1
              *pBuf = val;   // Set byte
 23f42b6:	7021      	strb	r1, [r4, #0]
              h -= 8;        // Subtract 8 rows from height
 23f42b8:	3b08      	subs	r3, #8
              pBuf += WIDTH; // Advance pointer 8 rows
 23f42ba:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h -= 8;        // Subtract 8 rows from height
 23f42be:	b2db      	uxtb	r3, r3
            } while (h >= 8);
 23f42c0:	2b07      	cmp	r3, #7
              pBuf += WIDTH; // Advance pointer 8 rows
 23f42c2:	4434      	add	r4, r6
            } while (h >= 8);
 23f42c4:	d8f7      	bhi.n	23f42b6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe2>
 23f42c6:	e7dd      	b.n	23f4284 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
            *pBuf |= mask;
 23f42c8:	7822      	ldrb	r2, [r4, #0]
 23f42ca:	4313      	orrs	r3, r2
            *pBuf ^= mask;
 23f42cc:	7023      	strb	r3, [r4, #0]
}
 23f42ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *pBuf ^= mask;
 23f42d0:	7822      	ldrb	r2, [r4, #0]
 23f42d2:	4053      	eors	r3, r2
 23f42d4:	e7fa      	b.n	23f42cc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
 23f42d6:	bf00      	nop
 23f42d8:	023ff734 	.word	0x023ff734
 23f42dc:	023ff73c 	.word	0x023ff73c

023f42e0 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
                                     uint16_t color) {
 23f42e0:	b470      	push	{r4, r5, r6}
 23f42e2:	4614      	mov	r4, r2
  switch (rotation) {
 23f42e4:	7e82      	ldrb	r2, [r0, #26]
                                     uint16_t color) {
 23f42e6:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch (rotation) {
 23f42ea:	2a02      	cmp	r2, #2
 23f42ec:	d00d      	beq.n	23f430a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
 23f42ee:	2a03      	cmp	r2, #3
 23f42f0:	d018      	beq.n	23f4324 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
 23f42f2:	2a01      	cmp	r2, #1
 23f42f4:	d111      	bne.n	23f431a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
 23f42f6:	43e4      	mvns	r4, r4
 23f42f8:	8902      	ldrh	r2, [r0, #8]
 23f42fa:	4414      	add	r4, r2
 23f42fc:	b224      	sxth	r4, r4
    drawFastVLineInternal(x, y, w, color);
 23f42fe:	460a      	mov	r2, r1
 23f4300:	9603      	str	r6, [sp, #12]
 23f4302:	4621      	mov	r1, r4
}
 23f4304:	bc70      	pop	{r4, r5, r6}
    drawFastVLineInternal(x, y, w, color);
 23f4306:	f7ff bf65 	b.w	23f41d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
 23f430a:	43e4      	mvns	r4, r4
 23f430c:	8942      	ldrh	r2, [r0, #10]
    x -= (w - 1);
 23f430e:	8905      	ldrh	r5, [r0, #8]
 23f4310:	4419      	add	r1, r3
    y = HEIGHT - y - 1;
 23f4312:	4414      	add	r4, r2
    x -= (w - 1);
 23f4314:	1a69      	subs	r1, r5, r1
    y = HEIGHT - y - 1;
 23f4316:	b224      	sxth	r4, r4
    x -= (w - 1);
 23f4318:	b209      	sxth	r1, r1
    drawFastHLineInternal(x, y, w, color);
 23f431a:	4622      	mov	r2, r4
 23f431c:	9603      	str	r6, [sp, #12]
}
 23f431e:	bc70      	pop	{r4, r5, r6}
    drawFastHLineInternal(x, y, w, color);
 23f4320:	f7ff bf12 	b.w	23f4148 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w - 1);
 23f4324:	8945      	ldrh	r5, [r0, #10]
 23f4326:	4419      	add	r1, r3
 23f4328:	1a69      	subs	r1, r5, r1
 23f432a:	b209      	sxth	r1, r1
    break;
 23f432c:	e7e7      	b.n	23f42fe <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

023f432e <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
                                     uint16_t color) {
 23f432e:	b430      	push	{r4, r5}
 23f4330:	4614      	mov	r4, r2
  switch (rotation) {
 23f4332:	7e82      	ldrb	r2, [r0, #26]
                                     uint16_t color) {
 23f4334:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch (rotation) {
 23f4338:	2a02      	cmp	r2, #2
 23f433a:	d00d      	beq.n	23f4358 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
 23f433c:	2a03      	cmp	r2, #3
 23f433e:	d018      	beq.n	23f4372 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
 23f4340:	2a01      	cmp	r2, #1
 23f4342:	d111      	bne.n	23f4368 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h - 1);
 23f4344:	18e2      	adds	r2, r4, r3
 23f4346:	8904      	ldrh	r4, [r0, #8]
 23f4348:	1aa4      	subs	r4, r4, r2
 23f434a:	b224      	sxth	r4, r4
    drawFastHLineInternal(x, y, h, color);
 23f434c:	460a      	mov	r2, r1
 23f434e:	9502      	str	r5, [sp, #8]
 23f4350:	4621      	mov	r1, r4
}
 23f4352:	bc30      	pop	{r4, r5}
    drawFastHLineInternal(x, y, h, color);
 23f4354:	f7ff bef8 	b.w	23f4148 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH - x - 1;
 23f4358:	43c9      	mvns	r1, r1
 23f435a:	8902      	ldrh	r2, [r0, #8]
 23f435c:	4411      	add	r1, r2
    y -= (h - 1);
 23f435e:	18e2      	adds	r2, r4, r3
 23f4360:	8944      	ldrh	r4, [r0, #10]
    x = WIDTH - x - 1;
 23f4362:	b209      	sxth	r1, r1
    y -= (h - 1);
 23f4364:	1aa4      	subs	r4, r4, r2
 23f4366:	b224      	sxth	r4, r4
    drawFastVLineInternal(x, y, h, color);
 23f4368:	4622      	mov	r2, r4
 23f436a:	9502      	str	r5, [sp, #8]
}
 23f436c:	bc30      	pop	{r4, r5}
    drawFastVLineInternal(x, y, h, color);
 23f436e:	f7ff bf31 	b.w	23f41d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
 23f4372:	43c9      	mvns	r1, r1
 23f4374:	8942      	ldrh	r2, [r0, #10]
 23f4376:	4411      	add	r1, r2
 23f4378:	b209      	sxth	r1, r1
    break;
 23f437a:	e7e7      	b.n	23f434c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

023f437c <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
 23f437c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f437e:	4604      	mov	r4, r0
  TRANSACTION_START
 23f4380:	6a80      	ldr	r0, [r0, #40]	; 0x28
 23f4382:	2800      	cmp	r0, #0
 23f4384:	d042      	beq.n	23f440c <_ZN16Adafruit_SSD13067displayEv+0x90>
 23f4386:	6da1      	ldr	r1, [r4, #88]	; 0x58
 23f4388:	f004 fd90 	bl	23f8eac <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
 23f438c:	2205      	movs	r2, #5
 23f438e:	4620      	mov	r0, r4
 23f4390:	4947      	ldr	r1, [pc, #284]	; (23f44b0 <_ZN16Adafruit_SSD13067displayEv+0x134>)
 23f4392:	f7ff fc9d 	bl	23f3cd0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
 23f4396:	8921      	ldrh	r1, [r4, #8]
 23f4398:	4620      	mov	r0, r4
 23f439a:	3901      	subs	r1, #1
 23f439c:	b2c9      	uxtb	r1, r1
 23f439e:	f7ff fc29 	bl	23f3bf4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  if (wire) { // I2C
 23f43a2:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
 23f43a6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 23f43aa:	1dde      	adds	r6, r3, #7
 23f43ac:	bf48      	it	mi
 23f43ae:	f103 060e 	addmi.w	r6, r3, #14
 23f43b2:	8923      	ldrh	r3, [r4, #8]
 23f43b4:	10f6      	asrs	r6, r6, #3
 23f43b6:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr = buffer;
 23f43ba:	fa15 f686 	uxtah	r6, r5, r6
  if (wire) { // I2C
 23f43be:	2800      	cmp	r0, #0
 23f43c0:	d03b      	beq.n	23f443a <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
 23f43c2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 23f43c6:	f004 fda3 	bl	23f8f10 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
 23f43ca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f43cc:	2140      	movs	r1, #64	; 0x40
 23f43ce:	6803      	ldr	r3, [r0, #0]
    uint16_t bytesOut = 1;
 23f43d0:	2701      	movs	r7, #1
    WIRE_WRITE((uint8_t)0x40);
 23f43d2:	689b      	ldr	r3, [r3, #8]
 23f43d4:	4798      	blx	r3
    while (count--) {
 23f43d6:	42ae      	cmp	r6, r5
        wire->endTransmission();
 23f43d8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while (count--) {
 23f43da:	d024      	beq.n	23f4426 <_ZN16Adafruit_SSD13067displayEv+0xaa>
      if (bytesOut >= WIRE_MAX) {
 23f43dc:	2f1f      	cmp	r7, #31
 23f43de:	d90c      	bls.n	23f43fa <_ZN16Adafruit_SSD13067displayEv+0x7e>
        wire->endTransmission();
 23f43e0:	f004 fd9d 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
 23f43e4:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 23f43e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f43ea:	f004 fd91 	bl	23f8f10 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
 23f43ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f43f0:	2140      	movs	r1, #64	; 0x40
 23f43f2:	6803      	ldr	r3, [r0, #0]
        bytesOut = 1;
 23f43f4:	2701      	movs	r7, #1
        WIRE_WRITE((uint8_t)0x40);
 23f43f6:	689b      	ldr	r3, [r3, #8]
 23f43f8:	4798      	blx	r3
      WIRE_WRITE(*ptr++);
 23f43fa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f43fc:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f4400:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
 23f4402:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
 23f4404:	689b      	ldr	r3, [r3, #8]
 23f4406:	4798      	blx	r3
      bytesOut++;
 23f4408:	b2bf      	uxth	r7, r7
    while (count--) {
 23f440a:	e7e4      	b.n	23f43d6 <_ZN16Adafruit_SSD13067displayEv+0x5a>
  TRANSACTION_START
 23f440c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f440e:	b118      	cbz	r0, 23f4418 <_ZN16Adafruit_SSD13067displayEv+0x9c>
 23f4410:	f104 0164 	add.w	r1, r4, #100	; 0x64
 23f4414:	f005 fa58 	bl	23f98c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
 23f4418:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f441a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f441c:	6813      	ldr	r3, [r2, #0]
 23f441e:	ea23 0301 	bic.w	r3, r3, r1
 23f4422:	6013      	str	r3, [r2, #0]
 23f4424:	e7b2      	b.n	23f438c <_ZN16Adafruit_SSD13067displayEv+0x10>
    wire->endTransmission();
 23f4426:	f004 fd7a 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
 23f442a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f442c:	2800      	cmp	r0, #0
 23f442e:	d032      	beq.n	23f4496 <_ZN16Adafruit_SSD13067displayEv+0x11a>
 23f4430:	6de1      	ldr	r1, [r4, #92]	; 0x5c
}
 23f4432:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 23f4436:	f004 bd39 	b.w	23f8eac <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
 23f443a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 23f443c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 23f443e:	6813      	ldr	r3, [r2, #0]
 23f4440:	430b      	orrs	r3, r1
 23f4442:	6013      	str	r3, [r2, #0]
    while (count--)
 23f4444:	42b5      	cmp	r5, r6
 23f4446:	d0f0      	beq.n	23f442a <_ZN16Adafruit_SSD13067displayEv+0xae>
  if (spi) {
 23f4448:	6a60      	ldr	r0, [r4, #36]	; 0x24
      SPIwrite(*ptr++);
 23f444a:	f815 1b01 	ldrb.w	r1, [r5], #1
  if (spi) {
 23f444e:	b110      	cbz	r0, 23f4456 <_ZN16Adafruit_SSD13067displayEv+0xda>
    (void)spi->transfer(d);
 23f4450:	f005 faa8 	bl	23f99a4 <_ZN8SPIClass8transferEh>
 23f4454:	e7f6      	b.n	23f4444 <_ZN16Adafruit_SSD13067displayEv+0xc8>
 23f4456:	f04f 0e08 	mov.w	lr, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f445a:	2080      	movs	r0, #128	; 0x80
        *mosiPort |= mosiPinMask;
 23f445c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23f445e:	f8d4 c048 	ldr.w	ip, [r4, #72]	; 0x48
 23f4462:	681f      	ldr	r7, [r3, #0]
      if (d & bit)
 23f4464:	4201      	tst	r1, r0
        *mosiPort |= mosiPinMask;
 23f4466:	bf14      	ite	ne
 23f4468:	ea47 070c 	orrne.w	r7, r7, ip
        *mosiPort &= ~mosiPinMask;
 23f446c:	ea27 070c 	biceq.w	r7, r7, ip
 23f4470:	601f      	str	r7, [r3, #0]
      *clkPort |= clkPinMask;  // Clock high
 23f4472:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 23f4474:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 23f4476:	683b      	ldr	r3, [r7, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f4478:	f1be 0e01 	subs.w	lr, lr, #1
      *clkPort |= clkPinMask;  // Clock high
 23f447c:	ea43 0302 	orr.w	r3, r3, r2
 23f4480:	603b      	str	r3, [r7, #0]
      *clkPort &= ~clkPinMask; // Clock low
 23f4482:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 23f4484:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 23f4486:	683b      	ldr	r3, [r7, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f4488:	ea4f 0050 	mov.w	r0, r0, lsr #1
      *clkPort &= ~clkPinMask; // Clock low
 23f448c:	ea23 0302 	bic.w	r3, r3, r2
 23f4490:	603b      	str	r3, [r7, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f4492:	d1e3      	bne.n	23f445c <_ZN16Adafruit_SSD13067displayEv+0xe0>
 23f4494:	e7d6      	b.n	23f4444 <_ZN16Adafruit_SSD13067displayEv+0xc8>
  TRANSACTION_END
 23f4496:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f4498:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f449a:	6813      	ldr	r3, [r2, #0]
 23f449c:	430b      	orrs	r3, r1
 23f449e:	6013      	str	r3, [r2, #0]
 23f44a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f44a2:	b118      	cbz	r0, 23f44ac <_ZN16Adafruit_SSD13067displayEv+0x130>
}
 23f44a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  TRANSACTION_END
 23f44a8:	f005 b9f4 	b.w	23f9894 <_ZN8SPIClass14endTransactionEv>
}
 23f44ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f44ae:	bf00      	nop
 23f44b0:	023ff756 	.word	0x023ff756

023f44b4 <_ZN17Adafruit_VEML7700C1Ev>:
#include "Adafruit_VEML7700.h"

/*!
 *    @brief  Instantiates a new VEML7700 class
 */
Adafruit_VEML7700::Adafruit_VEML7700(void) {}
 23f44b4:	4a03      	ldr	r2, [pc, #12]	; (23f44c4 <_ZN17Adafruit_VEML7700C1Ev+0x10>)
 23f44b6:	6002      	str	r2, [r0, #0]
 23f44b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 23f44bc:	6042      	str	r2, [r0, #4]
 23f44be:	4a02      	ldr	r2, [pc, #8]	; (23f44c8 <_ZN17Adafruit_VEML7700C1Ev+0x14>)
 23f44c0:	6082      	str	r2, [r0, #8]
 23f44c2:	4770      	bx	lr
 23f44c4:	3b6bedfa 	.word	0x3b6bedfa
 23f44c8:	44480000 	.word	0x44480000

023f44cc <_ZN17Adafruit_VEML77006enableEb>:

/*!
 *    @brief Enable or disable the sensor
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::enable(bool enable) {
 23f44cc:	b510      	push	{r4, lr}
 23f44ce:	460c      	mov	r4, r1
  ALS_Shutdown->write(!enable);
 23f44d0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 23f44d2:	f081 0101 	eor.w	r1, r1, #1
 23f44d6:	f7fd fee3 	bl	23f22a0 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  //   When activating the sensor, set bit 0 of the command register
  //   to “0” with a wait time of 2.5 ms before the first measurement
  //   is needed, allowing for the correct start of the signal
  //   processor and oscillator.
  //   '''
  if (enable)
 23f44da:	b124      	cbz	r4, 23f44e6 <_ZN17Adafruit_VEML77006enableEb+0x1a>
    delay(5); // doubling 2.5ms spec to be sure
}
 23f44dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(5); // doubling 2.5ms spec to be sure
 23f44e0:	2005      	movs	r0, #5
 23f44e2:	f003 bf1b 	b.w	23f831c <delay>
}
 23f44e6:	bd10      	pop	{r4, pc}

023f44e8 <_ZN17Adafruit_VEML770015interruptEnableEb>:
/*!
 *    @brief Enable or disable the interrupt
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::interruptEnable(bool enable) {
  ALS_Interrupt_Enable->write(enable);
 23f44e8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 23f44ea:	f7fd bed9 	b.w	23f22a0 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

023f44ee <_ZN17Adafruit_VEML770014setPersistenceEh>:
 *    @brief Set the ALS IRQ persistence setting
 *    @param pers Persistence constant, can be VEML7700_PERS_1, VEML7700_PERS_2,
 *    VEML7700_PERS_4 or VEML7700_PERS_8
 */
void Adafruit_VEML7700::setPersistence(uint8_t pers) {
  ALS_Persistence->write(pers);
 23f44ee:	6b40      	ldr	r0, [r0, #52]	; 0x34
 23f44f0:	f7fd bed6 	b.w	23f22a0 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

023f44f4 <_ZN17Adafruit_VEML770018getIntegrationTimeEv>:
/*!
 *    @brief Get ALS integration time setting
 *    @returns IT index, can be VEML7700_IT_100MS, VEML7700_IT_200MS,
 * VEML7700_IT_400MS, VEML7700_IT_800MS, VEML7700_IT_50MS or VEML7700_IT_25MS
 */
uint8_t Adafruit_VEML7700::getIntegrationTime(void) {
 23f44f4:	b508      	push	{r3, lr}
  return ALS_Integration_Time->read();
 23f44f6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 23f44f8:	f7fd fec5 	bl	23f2286 <_ZN27Adafruit_BusIO_RegisterBits4readEv>
}
 23f44fc:	b2c0      	uxtb	r0, r0
 23f44fe:	bd08      	pop	{r3, pc}

023f4500 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv>:

/*!
 *    @brief Get ALS integration time value
 *    @returns ALS integration time in milliseconds
 */
int Adafruit_VEML7700::getIntegrationTimeValue(void) {
 23f4500:	b508      	push	{r3, lr}
  switch (getIntegrationTime()) {
 23f4502:	f7ff fff7 	bl	23f44f4 <_ZN17Adafruit_VEML770018getIntegrationTimeEv>
 23f4506:	280c      	cmp	r0, #12
 23f4508:	bf96      	itet	ls
 23f450a:	4b03      	ldrls	r3, [pc, #12]	; (23f4518 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv+0x18>)
 23f450c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 23f4510:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
  case VEML7700_IT_800MS:
    return 800;
  default:
    return -1;
  }
}
 23f4514:	bd08      	pop	{r3, pc}
 23f4516:	bf00      	nop
 23f4518:	023ff75c 	.word	0x023ff75c

023f451c <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>:
void Adafruit_VEML7700::setIntegrationTime(uint8_t it, bool wait) {
 23f451c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f451e:	4605      	mov	r5, r0
  int flushDelay = wait ? getIntegrationTimeValue() : 0;
 23f4520:	b17a      	cbz	r2, 23f4542 <_ZN17Adafruit_VEML770018setIntegrationTimeEhb+0x26>
 23f4522:	9101      	str	r1, [sp, #4]
 23f4524:	f7ff ffec 	bl	23f4500 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv>
 23f4528:	4604      	mov	r4, r0
 23f452a:	9901      	ldr	r1, [sp, #4]
  ALS_Integration_Time->write(it);
 23f452c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 23f452e:	f7fd feb7 	bl	23f22a0 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  delay(flushDelay);
 23f4532:	4620      	mov	r0, r4
 23f4534:	f003 fef2 	bl	23f831c <delay>
 23f4538:	f003 f898 	bl	23f766c <HAL_Timer_Get_Milli_Seconds>
  lastRead = millis();
 23f453c:	60e8      	str	r0, [r5, #12]
}
 23f453e:	b003      	add	sp, #12
 23f4540:	bd30      	pop	{r4, r5, pc}
  int flushDelay = wait ? getIntegrationTimeValue() : 0;
 23f4542:	4614      	mov	r4, r2
 23f4544:	e7f2      	b.n	23f452c <_ZN17Adafruit_VEML770018setIntegrationTimeEhb+0x10>

023f4546 <_ZN17Adafruit_VEML77007setGainEh>:
/*!
 *    @brief Set ALS gain
 *    @param gain Can be VEML7700_GAIN_1, VEML7700_GAIN_2, VEML7700_GAIN_1_8 or
 * VEML7700_GAIN_1_4
 */
void Adafruit_VEML7700::setGain(uint8_t gain) {
 23f4546:	b510      	push	{r4, lr}
 23f4548:	4604      	mov	r4, r0
  ALS_Gain->write(gain);
 23f454a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 23f454c:	f7fd fea8 	bl	23f22a0 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
 23f4550:	f003 f88c 	bl	23f766c <HAL_Timer_Get_Milli_Seconds>
  lastRead = millis(); // reset
 23f4554:	60e0      	str	r0, [r4, #12]
}
 23f4556:	bd10      	pop	{r4, pc}

023f4558 <_ZN17Adafruit_VEML77007getGainEv>:
/*!
 *    @brief Get ALS gain setting
 *    @returns Gain index, can be VEML7700_GAIN_1, VEML7700_GAIN_2,
 * VEML7700_GAIN_1_8 or VEML7700_GAIN_1_4
 */
uint8_t Adafruit_VEML7700::getGain(void) { return ALS_Gain->read(); }
 23f4558:	b508      	push	{r3, lr}
 23f455a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 23f455c:	f7fd fe93 	bl	23f2286 <_ZN27Adafruit_BusIO_RegisterBits4readEv>
 23f4560:	b2c0      	uxtb	r0, r0
 23f4562:	bd08      	pop	{r3, pc}

023f4564 <_ZN17Adafruit_VEML770012getGainValueEv>:

/*!
 *    @brief Get ALS gain value
 *    @returns Actual gain value as float
 */
float Adafruit_VEML7700::getGainValue(void) {
 23f4564:	b508      	push	{r3, lr}
  switch (getGain()) {
 23f4566:	f7ff fff7 	bl	23f4558 <_ZN17Adafruit_VEML77007getGainEv>
 23f456a:	2803      	cmp	r0, #3
 23f456c:	bf97      	itett	ls
 23f456e:	4b04      	ldrls	r3, [pc, #16]	; (23f4580 <_ZN17Adafruit_VEML770012getGainValueEv+0x1c>)
 23f4570:	eebf 0a00 	vmovhi.f32	s0, #240	; 0xbf800000 -1.0
 23f4574:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
 23f4578:	ed90 0a00 	vldrls	s0, [r0]
  case VEML7700_GAIN_2:
    return 2;
  default:
    return -1;
  }
}
 23f457c:	bd08      	pop	{r3, pc}
 23f457e:	bf00      	nop
 23f4580:	023ff778 	.word	0x023ff778

023f4584 <_ZN17Adafruit_VEML770015powerSaveEnableEb>:
/*!
 *    @brief Enable power save mode
 *    @param enable True if power save should be enabled
 */
void Adafruit_VEML7700::powerSaveEnable(bool enable) {
  PowerSave_Enable->write(enable);
 23f4584:	6c00      	ldr	r0, [r0, #64]	; 0x40
 23f4586:	f7fd be8b 	b.w	23f22a0 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

023f458a <_ZN17Adafruit_VEML77005beginEP7TwoWire>:
bool Adafruit_VEML7700::begin(TwoWire *theWire) {
 23f458a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23f458c:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
 23f458e:	2010      	movs	r0, #16
bool Adafruit_VEML7700::begin(TwoWire *theWire) {
 23f4590:	9103      	str	r1, [sp, #12]
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
 23f4592:	f7f3 f96e 	bl	23e7872 <_Znwj>
 23f4596:	4605      	mov	r5, r0
 23f4598:	b118      	cbz	r0, 23f45a2 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x18>
 23f459a:	2110      	movs	r1, #16
 23f459c:	9a03      	ldr	r2, [sp, #12]
 23f459e:	f7fd fe98 	bl	23f22d2 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin()) {
 23f45a2:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
 23f45a4:	64a5      	str	r5, [r4, #72]	; 0x48
  if (!i2c_dev->begin()) {
 23f45a6:	2101      	movs	r1, #1
 23f45a8:	f7fd feaf 	bl	23f230a <_ZN18Adafruit_I2CDevice5beginEb>
 23f45ac:	4605      	mov	r5, r0
 23f45ae:	2800      	cmp	r0, #0
 23f45b0:	f000 80d6 	beq.w	23f4760 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x1d6>
      new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_CONFIG, 2, LSBFIRST);
 23f45b4:	2018      	movs	r0, #24
 23f45b6:	f7f3 f95c 	bl	23e7872 <_Znwj>
 23f45ba:	4606      	mov	r6, r0
 23f45bc:	b138      	cbz	r0, 23f45ce <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x44>
 23f45be:	2301      	movs	r3, #1
 23f45c0:	2200      	movs	r2, #0
 23f45c2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f45c4:	e9cd 2300 	strd	r2, r3, [sp]
 23f45c8:	2302      	movs	r3, #2
 23f45ca:	f7fd fd6d 	bl	23f20a8 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  ALS_Config =
 23f45ce:	6126      	str	r6, [r4, #16]
      i2c_dev, VEML7700_ALS_THREHOLD_HIGH, 2, LSBFIRST);
 23f45d0:	2018      	movs	r0, #24
 23f45d2:	f7f3 f94e 	bl	23e7872 <_Znwj>
 23f45d6:	4606      	mov	r6, r0
 23f45d8:	b138      	cbz	r0, 23f45ea <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x60>
 23f45da:	2300      	movs	r3, #0
 23f45dc:	2201      	movs	r2, #1
 23f45de:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f45e0:	e9cd 3200 	strd	r3, r2, [sp]
 23f45e4:	2302      	movs	r3, #2
 23f45e6:	f7fd fd5f 	bl	23f20a8 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  ALS_HighThreshold = new Adafruit_I2CRegister(
 23f45ea:	61e6      	str	r6, [r4, #28]
      new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_THREHOLD_LOW, 2, LSBFIRST);
 23f45ec:	2018      	movs	r0, #24
 23f45ee:	f7f3 f940 	bl	23e7872 <_Znwj>
 23f45f2:	4606      	mov	r6, r0
 23f45f4:	b140      	cbz	r0, 23f4608 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x7e>
 23f45f6:	2300      	movs	r3, #0
 23f45f8:	2201      	movs	r2, #1
 23f45fa:	e9cd 3200 	strd	r3, r2, [sp]
 23f45fe:	2302      	movs	r3, #2
 23f4600:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f4602:	461a      	mov	r2, r3
 23f4604:	f7fd fd50 	bl	23f20a8 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  ALS_LowThreshold =
 23f4608:	6226      	str	r6, [r4, #32]
      new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_POWER_SAVE, 2, LSBFIRST);
 23f460a:	2018      	movs	r0, #24
 23f460c:	f7f3 f931 	bl	23e7872 <_Znwj>
 23f4610:	4606      	mov	r6, r0
 23f4612:	b148      	cbz	r0, 23f4628 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x9e>
 23f4614:	2300      	movs	r3, #0
 23f4616:	f04f 0e01 	mov.w	lr, #1
 23f461a:	2203      	movs	r2, #3
 23f461c:	e9cd 3e00 	strd	r3, lr, [sp]
 23f4620:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f4622:	2302      	movs	r3, #2
 23f4624:	f7fd fd40 	bl	23f20a8 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Power_Saving =
 23f4628:	6266      	str	r6, [r4, #36]	; 0x24
  ALS_Data = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_DATA, 2, LSBFIRST);
 23f462a:	2018      	movs	r0, #24
 23f462c:	f7f3 f921 	bl	23e7872 <_Znwj>
 23f4630:	4606      	mov	r6, r0
 23f4632:	b148      	cbz	r0, 23f4648 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xbe>
 23f4634:	2300      	movs	r3, #0
 23f4636:	f04f 0c01 	mov.w	ip, #1
 23f463a:	2204      	movs	r2, #4
 23f463c:	e9cd 3c00 	strd	r3, ip, [sp]
 23f4640:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f4642:	2302      	movs	r3, #2
 23f4644:	f7fd fd30 	bl	23f20a8 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
 23f4648:	6166      	str	r6, [r4, #20]
      new Adafruit_I2CRegister(i2c_dev, VEML7700_WHITE_DATA, 2, LSBFIRST);
 23f464a:	2018      	movs	r0, #24
 23f464c:	f7f3 f911 	bl	23e7872 <_Znwj>
 23f4650:	4606      	mov	r6, r0
 23f4652:	b140      	cbz	r0, 23f4666 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xdc>
 23f4654:	2300      	movs	r3, #0
 23f4656:	2101      	movs	r1, #1
 23f4658:	2205      	movs	r2, #5
 23f465a:	e9cd 3100 	strd	r3, r1, [sp]
 23f465e:	2302      	movs	r3, #2
 23f4660:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f4662:	f7fd fd21 	bl	23f20a8 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  White_Data =
 23f4666:	61a6      	str	r6, [r4, #24]
      new Adafruit_I2CRegister(i2c_dev, VEML7700_INTERRUPTSTATUS, 2, LSBFIRST);
 23f4668:	2018      	movs	r0, #24
 23f466a:	f7f3 f902 	bl	23e7872 <_Znwj>
 23f466e:	4606      	mov	r6, r0
 23f4670:	b140      	cbz	r0, 23f4684 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xfa>
 23f4672:	2300      	movs	r3, #0
 23f4674:	2201      	movs	r2, #1
 23f4676:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f4678:	e9cd 3200 	strd	r3, r2, [sp]
 23f467c:	2302      	movs	r3, #2
 23f467e:	2206      	movs	r2, #6
 23f4680:	f7fd fd12 	bl	23f20a8 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Interrupt_Status =
 23f4684:	62a6      	str	r6, [r4, #40]	; 0x28
      new Adafruit_I2CRegisterBits(ALS_Config, 1, 0); // # bits, bit_shift
 23f4686:	2008      	movs	r0, #8
 23f4688:	f7f3 f8f3 	bl	23e7872 <_Znwj>
 23f468c:	4606      	mov	r6, r0
 23f468e:	b120      	cbz	r0, 23f469a <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x110>
 23f4690:	2300      	movs	r3, #0
 23f4692:	2201      	movs	r2, #1
 23f4694:	6921      	ldr	r1, [r4, #16]
 23f4696:	f7fd fdf1 	bl	23f227c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  ALS_Shutdown =
 23f469a:	62e6      	str	r6, [r4, #44]	; 0x2c
  ALS_Interrupt_Enable = new Adafruit_I2CRegisterBits(ALS_Config, 1, 1);
 23f469c:	2008      	movs	r0, #8
 23f469e:	f7f3 f8e8 	bl	23e7872 <_Znwj>
 23f46a2:	4606      	mov	r6, r0
 23f46a4:	b120      	cbz	r0, 23f46b0 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x126>
 23f46a6:	2301      	movs	r3, #1
 23f46a8:	6921      	ldr	r1, [r4, #16]
 23f46aa:	461a      	mov	r2, r3
 23f46ac:	f7fd fde6 	bl	23f227c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
 23f46b0:	6326      	str	r6, [r4, #48]	; 0x30
  ALS_Persistence = new Adafruit_I2CRegisterBits(ALS_Config, 2, 4);
 23f46b2:	2008      	movs	r0, #8
 23f46b4:	f7f3 f8dd 	bl	23e7872 <_Znwj>
 23f46b8:	4606      	mov	r6, r0
 23f46ba:	b120      	cbz	r0, 23f46c6 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x13c>
 23f46bc:	2304      	movs	r3, #4
 23f46be:	2202      	movs	r2, #2
 23f46c0:	6921      	ldr	r1, [r4, #16]
 23f46c2:	f7fd fddb 	bl	23f227c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
 23f46c6:	6366      	str	r6, [r4, #52]	; 0x34
  ALS_Integration_Time = new Adafruit_I2CRegisterBits(ALS_Config, 4, 6);
 23f46c8:	2008      	movs	r0, #8
 23f46ca:	f7f3 f8d2 	bl	23e7872 <_Znwj>
 23f46ce:	4606      	mov	r6, r0
 23f46d0:	b120      	cbz	r0, 23f46dc <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x152>
 23f46d2:	2306      	movs	r3, #6
 23f46d4:	2204      	movs	r2, #4
 23f46d6:	6921      	ldr	r1, [r4, #16]
 23f46d8:	f7fd fdd0 	bl	23f227c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
 23f46dc:	63a6      	str	r6, [r4, #56]	; 0x38
  ALS_Gain = new Adafruit_I2CRegisterBits(ALS_Config, 2, 11);
 23f46de:	2008      	movs	r0, #8
 23f46e0:	f7f3 f8c7 	bl	23e7872 <_Znwj>
 23f46e4:	4606      	mov	r6, r0
 23f46e6:	b120      	cbz	r0, 23f46f2 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x168>
 23f46e8:	230b      	movs	r3, #11
 23f46ea:	2202      	movs	r2, #2
 23f46ec:	6921      	ldr	r1, [r4, #16]
 23f46ee:	f7fd fdc5 	bl	23f227c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
 23f46f2:	63e6      	str	r6, [r4, #60]	; 0x3c
  PowerSave_Enable = new Adafruit_I2CRegisterBits(Power_Saving, 1, 0);
 23f46f4:	2008      	movs	r0, #8
 23f46f6:	f7f3 f8bc 	bl	23e7872 <_Znwj>
 23f46fa:	4606      	mov	r6, r0
 23f46fc:	b120      	cbz	r0, 23f4708 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x17e>
 23f46fe:	2300      	movs	r3, #0
 23f4700:	2201      	movs	r2, #1
 23f4702:	6a61      	ldr	r1, [r4, #36]	; 0x24
 23f4704:	f7fd fdba 	bl	23f227c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
 23f4708:	6426      	str	r6, [r4, #64]	; 0x40
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
 23f470a:	2008      	movs	r0, #8
 23f470c:	f7f3 f8b1 	bl	23e7872 <_Znwj>
 23f4710:	4606      	mov	r6, r0
 23f4712:	b120      	cbz	r0, 23f471e <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x194>
 23f4714:	2301      	movs	r3, #1
 23f4716:	2202      	movs	r2, #2
 23f4718:	6a61      	ldr	r1, [r4, #36]	; 0x24
 23f471a:	f7fd fdaf 	bl	23f227c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  enable(false);
 23f471e:	2100      	movs	r1, #0
 23f4720:	4620      	mov	r0, r4
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
 23f4722:	6466      	str	r6, [r4, #68]	; 0x44
  enable(false);
 23f4724:	f7ff fed2 	bl	23f44cc <_ZN17Adafruit_VEML77006enableEb>
  interruptEnable(false);
 23f4728:	2100      	movs	r1, #0
 23f472a:	4620      	mov	r0, r4
 23f472c:	f7ff fedc 	bl	23f44e8 <_ZN17Adafruit_VEML770015interruptEnableEb>
  setPersistence(VEML7700_PERS_1);
 23f4730:	2100      	movs	r1, #0
 23f4732:	4620      	mov	r0, r4
 23f4734:	f7ff fedb 	bl	23f44ee <_ZN17Adafruit_VEML770014setPersistenceEh>
  setGain(VEML7700_GAIN_1_8);
 23f4738:	2102      	movs	r1, #2
 23f473a:	4620      	mov	r0, r4
 23f473c:	f7ff ff03 	bl	23f4546 <_ZN17Adafruit_VEML77007setGainEh>
  setIntegrationTime(VEML7700_IT_100MS);
 23f4740:	2201      	movs	r2, #1
 23f4742:	2100      	movs	r1, #0
 23f4744:	4620      	mov	r0, r4
 23f4746:	f7ff fee9 	bl	23f451c <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>
  powerSaveEnable(false);
 23f474a:	2100      	movs	r1, #0
 23f474c:	4620      	mov	r0, r4
 23f474e:	f7ff ff19 	bl	23f4584 <_ZN17Adafruit_VEML770015powerSaveEnableEb>
  enable(true);
 23f4752:	2101      	movs	r1, #1
 23f4754:	4620      	mov	r0, r4
 23f4756:	f7ff feb9 	bl	23f44cc <_ZN17Adafruit_VEML77006enableEb>
 23f475a:	f002 ff87 	bl	23f766c <HAL_Timer_Get_Milli_Seconds>
  lastRead = millis();
 23f475e:	60e0      	str	r0, [r4, #12]
}
 23f4760:	4628      	mov	r0, r5
 23f4762:	b004      	add	sp, #16
 23f4764:	bd70      	pop	{r4, r5, r6, pc}

023f4766 <_ZN17Adafruit_VEML770013getResolutionEv>:

/*!
 *    @brief Determines resolution for current gain and integration time
 * settings.
 */
float Adafruit_VEML7700::getResolution(void) {
 23f4766:	b510      	push	{r4, lr}
 23f4768:	ed2d 8b04 	vpush	{d8-d9}
 23f476c:	4604      	mov	r4, r0
  return MAX_RES * (IT_MAX / getIntegrationTimeValue()) *
 23f476e:	edd0 8a00 	vldr	s17, [r0]
 23f4772:	ed90 9a02 	vldr	s18, [r0, #8]
 23f4776:	f7ff fec3 	bl	23f4500 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv>
 23f477a:	ee07 0a90 	vmov	s15, r0
 23f477e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f4782:	ee89 8a27 	vdiv.f32	s16, s18, s15
         (GAIN_MAX / getGainValue());
 23f4786:	4620      	mov	r0, r4
  return MAX_RES * (IT_MAX / getIntegrationTimeValue()) *
 23f4788:	ee28 8a28 	vmul.f32	s16, s16, s17
         (GAIN_MAX / getGainValue());
 23f478c:	edd4 8a01 	vldr	s17, [r4, #4]
 23f4790:	f7ff fee8 	bl	23f4564 <_ZN17Adafruit_VEML770012getGainValueEv>
 23f4794:	eec8 7a80 	vdiv.f32	s15, s17, s0
}
 23f4798:	ee27 0a88 	vmul.f32	s0, s15, s16
 23f479c:	ecbd 8b04 	vpop	{d8-d9}
 23f47a0:	bd10      	pop	{r4, pc}
 23f47a2:	0000      	movs	r0, r0
 23f47a4:	0000      	movs	r0, r0
	...

023f47a8 <_ZN17Adafruit_VEML770010computeLuxEtb>:
 *    @brief Copmute lux from ALS reading.
 *    @param rawALS raw ALS register value
 *    @param corrected if true, apply non-linear correction
 *    @return lux value
 */
float Adafruit_VEML7700::computeLux(uint16_t rawALS, bool corrected) {
 23f47a8:	b538      	push	{r3, r4, r5, lr}
 23f47aa:	ed2d 8b02 	vpush	{d8}
 23f47ae:	ee08 1a10 	vmov	s16, r1
 23f47b2:	4614      	mov	r4, r2
  float lux = getResolution() * rawALS;
 23f47b4:	f7ff ffd7 	bl	23f4766 <_ZN17Adafruit_VEML770013getResolutionEv>
 23f47b8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 23f47bc:	ee28 0a00 	vmul.f32	s0, s16, s0
  if (corrected)
 23f47c0:	b34c      	cbz	r4, 23f4816 <_ZN17Adafruit_VEML770010computeLuxEtb+0x6e>
    lux = (((6.0135e-13 * lux - 9.3924e-9) * lux + 8.1488e-5) * lux + 1.0023) *
 23f47c2:	ee10 0a10 	vmov	r0, s0
 23f47c6:	f7f2 f997 	bl	23e6af8 <__aeabi_f2d>
 23f47ca:	a315      	add	r3, pc, #84	; (adr r3, 23f4820 <_ZN17Adafruit_VEML770010computeLuxEtb+0x78>)
 23f47cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f47d0:	4604      	mov	r4, r0
 23f47d2:	460d      	mov	r5, r1
 23f47d4:	f7f2 f9e8 	bl	23e6ba8 <__aeabi_dmul>
 23f47d8:	a313      	add	r3, pc, #76	; (adr r3, 23f4828 <_ZN17Adafruit_VEML770010computeLuxEtb+0x80>)
 23f47da:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f47de:	f7f2 f82b 	bl	23e6838 <__aeabi_dsub>
 23f47e2:	4622      	mov	r2, r4
 23f47e4:	462b      	mov	r3, r5
 23f47e6:	f7f2 f9df 	bl	23e6ba8 <__aeabi_dmul>
 23f47ea:	a311      	add	r3, pc, #68	; (adr r3, 23f4830 <_ZN17Adafruit_VEML770010computeLuxEtb+0x88>)
 23f47ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f47f0:	f7f2 f824 	bl	23e683c <__adddf3>
 23f47f4:	4622      	mov	r2, r4
 23f47f6:	462b      	mov	r3, r5
 23f47f8:	f7f2 f9d6 	bl	23e6ba8 <__aeabi_dmul>
 23f47fc:	a30e      	add	r3, pc, #56	; (adr r3, 23f4838 <_ZN17Adafruit_VEML770010computeLuxEtb+0x90>)
 23f47fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f4802:	f7f2 f81b 	bl	23e683c <__adddf3>
 23f4806:	4622      	mov	r2, r4
 23f4808:	462b      	mov	r3, r5
 23f480a:	f7f2 f9cd 	bl	23e6ba8 <__aeabi_dmul>
 23f480e:	f7f2 fcc3 	bl	23e7198 <__aeabi_d2f>
 23f4812:	ee00 0a10 	vmov	s0, r0
          lux;
  return lux;
}
 23f4816:	ecbd 8b02 	vpop	{d8}
 23f481a:	bd38      	pop	{r3, r4, r5, pc}
 23f481c:	f3af 8000 	nop.w
 23f4820:	b18f283b 	.word	0xb18f283b
 23f4824:	3d65287a 	.word	0x3d65287a
 23f4828:	c91ef46e 	.word	0xc91ef46e
 23f482c:	3e442b86 	.word	0x3e442b86
 23f4830:	2e18cab0 	.word	0x2e18cab0
 23f4834:	3f155c91 	.word	0x3f155c91
 23f4838:	b98c7e28 	.word	0xb98c7e28
 23f483c:	3ff0096b 	.word	0x3ff0096b

023f4840 <_ZN17Adafruit_VEML77008readWaitEv>:

void Adafruit_VEML7700::readWait(void) {
 23f4840:	b538      	push	{r3, r4, r5, lr}
 23f4842:	4605      	mov	r5, r0
  //   at least for the programmed integration time. For example,
  //   for ALS_IT = 100 ms a wait time of ≥ 100 ms is needed.
  //   '''
  // Based on testing, it needs more. So doubling to be sure.

  unsigned long timeToWait = 2 * getIntegrationTimeValue(); // see above
 23f4844:	f7ff fe5c 	bl	23f4500 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv>
 23f4848:	0044      	lsls	r4, r0, #1
 23f484a:	f002 ff0f 	bl	23f766c <HAL_Timer_Get_Milli_Seconds>
  unsigned long timeWaited = millis() - lastRead;
 23f484e:	68eb      	ldr	r3, [r5, #12]
 23f4850:	1ac2      	subs	r2, r0, r3

  if (timeWaited < timeToWait)
 23f4852:	4294      	cmp	r4, r2
 23f4854:	d905      	bls.n	23f4862 <_ZN17Adafruit_VEML77008readWaitEv+0x22>
    delay(timeToWait - timeWaited);
 23f4856:	1a18      	subs	r0, r3, r0
 23f4858:	4420      	add	r0, r4
}
 23f485a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    delay(timeToWait - timeWaited);
 23f485e:	f003 bd5d 	b.w	23f831c <delay>
}
 23f4862:	bd38      	pop	{r3, r4, r5, pc}

023f4864 <_ZN17Adafruit_VEML77007readALSEb>:
uint16_t Adafruit_VEML7700::readALS(bool wait) {
 23f4864:	b510      	push	{r4, lr}
 23f4866:	4604      	mov	r4, r0
  if (wait)
 23f4868:	b109      	cbz	r1, 23f486e <_ZN17Adafruit_VEML77007readALSEb+0xa>
    readWait();
 23f486a:	f7ff ffe9 	bl	23f4840 <_ZN17Adafruit_VEML77008readWaitEv>
 23f486e:	f002 fefd 	bl	23f766c <HAL_Timer_Get_Milli_Seconds>
  lastRead = millis();
 23f4872:	60e0      	str	r0, [r4, #12]
  return ALS_Data->read();
 23f4874:	6960      	ldr	r0, [r4, #20]
 23f4876:	f7fd fce5 	bl	23f2244 <_ZN23Adafruit_BusIO_Register4readEv>
}
 23f487a:	b280      	uxth	r0, r0
 23f487c:	bd10      	pop	{r4, pc}
	...

023f4880 <_ZN17Adafruit_VEML77007autoLuxEv>:
 *  @brief Implemenation of App Note "Designing the VEML7700 Into an
 * Application", Vishay Document Number: 84323, Fig. 24 Flow Chart. This will
 * automatically adjust gain and integration time as needed to obtain a good raw
 * count value. Additionally, a non-linear correction is applied if needed.
 */
float Adafruit_VEML7700::autoLux(void) {
 23f4880:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23f4882:	4604      	mov	r4, r0
  const uint8_t gains[] = {VEML7700_GAIN_1_8, VEML7700_GAIN_1_4,
 23f4884:	4b2e      	ldr	r3, [pc, #184]	; (23f4940 <_ZN17Adafruit_VEML77007autoLuxEv+0xc0>)

  uint8_t gainIndex = 0;      // start with ALS gain = 1/8
  uint8_t itIndex = 2;        // start with ALS integration time = 100ms
  bool useCorrection = false; // flag for non-linear correction

  setGain(gains[gainIndex]);
 23f4886:	2102      	movs	r1, #2
  const uint8_t gains[] = {VEML7700_GAIN_1_8, VEML7700_GAIN_1_4,
 23f4888:	9301      	str	r3, [sp, #4]
  const uint8_t intTimes[] = {VEML7700_IT_25MS,  VEML7700_IT_50MS,
 23f488a:	4b2e      	ldr	r3, [pc, #184]	; (23f4944 <_ZN17Adafruit_VEML77007autoLuxEv+0xc4>)
 23f488c:	6818      	ldr	r0, [r3, #0]
 23f488e:	889b      	ldrh	r3, [r3, #4]
 23f4890:	9002      	str	r0, [sp, #8]
  setGain(gains[gainIndex]);
 23f4892:	4620      	mov	r0, r4
  const uint8_t intTimes[] = {VEML7700_IT_25MS,  VEML7700_IT_50MS,
 23f4894:	f8ad 300c 	strh.w	r3, [sp, #12]
  setGain(gains[gainIndex]);
 23f4898:	f7ff fe55 	bl	23f4546 <_ZN17Adafruit_VEML77007setGainEh>
  setIntegrationTime(intTimes[itIndex]);
 23f489c:	2201      	movs	r2, #1
 23f489e:	2100      	movs	r1, #0
 23f48a0:	4620      	mov	r0, r4
 23f48a2:	f7ff fe3b 	bl	23f451c <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>

  uint16_t ALS = readALS(true);
 23f48a6:	2101      	movs	r1, #1
 23f48a8:	4620      	mov	r0, r4
 23f48aa:	f7ff ffdb 	bl	23f4864 <_ZN17Adafruit_VEML77007readALSEb>
  // Serial.println("** AUTO LUX DEBUG **");
  // Serial.print("ALS initial = "); Serial.println(ALS);

  if (ALS <= 100) {
 23f48ae:	2864      	cmp	r0, #100	; 0x64
 23f48b0:	d82e      	bhi.n	23f4910 <_ZN17Adafruit_VEML77007autoLuxEv+0x90>
  uint8_t itIndex = 2;        // start with ALS integration time = 100ms
 23f48b2:	2602      	movs	r6, #2
  uint8_t gainIndex = 0;      // start with ALS gain = 1/8
 23f48b4:	2500      	movs	r5, #0

    // increase first gain and then integration time as needed
    // compute lux using simple linear formula
    while ((ALS <= 100) && !((gainIndex == 3) && (itIndex == 5))) {
 23f48b6:	2d03      	cmp	r5, #3
 23f48b8:	d109      	bne.n	23f48ce <_ZN17Adafruit_VEML77007autoLuxEv+0x4e>
 23f48ba:	2e05      	cmp	r6, #5
 23f48bc:	d11a      	bne.n	23f48f4 <_ZN17Adafruit_VEML77007autoLuxEv+0x74>
  bool useCorrection = false; // flag for non-linear correction
 23f48be:	2200      	movs	r2, #0
      // Serial.print("ALS  hi lux = "); Serial.println(ALS);
    }
  }
  // Serial.println("** AUTO LUX DEBUG **");

  return computeLux(ALS, useCorrection);
 23f48c0:	4601      	mov	r1, r0
 23f48c2:	4620      	mov	r0, r4
 23f48c4:	b004      	add	sp, #16
 23f48c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return computeLux(ALS, useCorrection);
 23f48ca:	f7ff bf6d 	b.w	23f47a8 <_ZN17Adafruit_VEML770010computeLuxEtb>
      if (gainIndex < 3) {
 23f48ce:	2d02      	cmp	r5, #2
 23f48d0:	d810      	bhi.n	23f48f4 <_ZN17Adafruit_VEML77007autoLuxEv+0x74>
        setGain(gains[++gainIndex]);
 23f48d2:	1c6b      	adds	r3, r5, #1
 23f48d4:	aa04      	add	r2, sp, #16
 23f48d6:	b2dd      	uxtb	r5, r3
 23f48d8:	fa52 f383 	uxtab	r3, r2, r3
 23f48dc:	4620      	mov	r0, r4
 23f48de:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 23f48e2:	f7ff fe30 	bl	23f4546 <_ZN17Adafruit_VEML77007setGainEh>
      ALS = readALS(true);
 23f48e6:	2101      	movs	r1, #1
 23f48e8:	4620      	mov	r0, r4
 23f48ea:	f7ff ffbb 	bl	23f4864 <_ZN17Adafruit_VEML77007readALSEb>
    while ((ALS <= 100) && !((gainIndex == 3) && (itIndex == 5))) {
 23f48ee:	2864      	cmp	r0, #100	; 0x64
 23f48f0:	d9e1      	bls.n	23f48b6 <_ZN17Adafruit_VEML77007autoLuxEv+0x36>
 23f48f2:	e7e4      	b.n	23f48be <_ZN17Adafruit_VEML77007autoLuxEv+0x3e>
      } else if (itIndex < 5) {
 23f48f4:	2e04      	cmp	r6, #4
 23f48f6:	d8f6      	bhi.n	23f48e6 <_ZN17Adafruit_VEML77007autoLuxEv+0x66>
        setIntegrationTime(intTimes[++itIndex]);
 23f48f8:	aa04      	add	r2, sp, #16
 23f48fa:	1c73      	adds	r3, r6, #1
 23f48fc:	b2de      	uxtb	r6, r3
 23f48fe:	fa52 f383 	uxtab	r3, r2, r3
 23f4902:	4620      	mov	r0, r4
 23f4904:	2201      	movs	r2, #1
 23f4906:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 23f490a:	f7ff fe07 	bl	23f451c <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>
 23f490e:	e7ea      	b.n	23f48e6 <_ZN17Adafruit_VEML77007autoLuxEv+0x66>
  uint8_t itIndex = 2;        // start with ALS integration time = 100ms
 23f4910:	2502      	movs	r5, #2
    while ((ALS > 10000) && (itIndex > 0)) {
 23f4912:	f242 7610 	movw	r6, #10000	; 0x2710
 23f4916:	42b0      	cmp	r0, r6
 23f4918:	d910      	bls.n	23f493c <_ZN17Adafruit_VEML77007autoLuxEv+0xbc>
 23f491a:	b17d      	cbz	r5, 23f493c <_ZN17Adafruit_VEML77007autoLuxEv+0xbc>
      setIntegrationTime(intTimes[--itIndex]);
 23f491c:	aa04      	add	r2, sp, #16
 23f491e:	1e6b      	subs	r3, r5, #1
 23f4920:	b2dd      	uxtb	r5, r3
 23f4922:	fa52 f383 	uxtab	r3, r2, r3
 23f4926:	4620      	mov	r0, r4
 23f4928:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 23f492c:	2201      	movs	r2, #1
 23f492e:	f7ff fdf5 	bl	23f451c <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>
      ALS = readALS(true);
 23f4932:	2101      	movs	r1, #1
 23f4934:	4620      	mov	r0, r4
 23f4936:	f7ff ff95 	bl	23f4864 <_ZN17Adafruit_VEML77007readALSEb>
    while ((ALS > 10000) && (itIndex > 0)) {
 23f493a:	e7ec      	b.n	23f4916 <_ZN17Adafruit_VEML77007autoLuxEv+0x96>
    useCorrection = true;
 23f493c:	2201      	movs	r2, #1
 23f493e:	e7bf      	b.n	23f48c0 <_ZN17Adafruit_VEML77007autoLuxEv+0x40>
 23f4940:	01000302 	.word	0x01000302
 23f4944:	023fd264 	.word	0x023fd264

023f4948 <_ZN17Adafruit_VEML77007readLuxE9luxMethod>:
float Adafruit_VEML7700::readLux(luxMethod method) {
 23f4948:	b510      	push	{r4, lr}
 23f494a:	4604      	mov	r4, r0
 23f494c:	ed2d 8b02 	vpush	{d8}
 23f4950:	2904      	cmp	r1, #4
 23f4952:	d82b      	bhi.n	23f49ac <_ZN17Adafruit_VEML77007readLuxE9luxMethod+0x64>
 23f4954:	e8df f001 	tbb	[pc, r1]
 23f4958:	03242213 	.word	0x03242213
 23f495c:	15          	.byte	0x15
 23f495d:	00          	.byte	0x00
  bool wait = true;
 23f495e:	2100      	movs	r1, #0
    return computeLux(readALS(wait));
 23f4960:	4620      	mov	r0, r4
 23f4962:	f7ff ff7f 	bl	23f4864 <_ZN17Adafruit_VEML77007readALSEb>
 23f4966:	ee08 0a10 	vmov	s16, r0
  float lux = getResolution() * rawALS;
 23f496a:	4620      	mov	r0, r4
 23f496c:	f7ff fefb 	bl	23f4766 <_ZN17Adafruit_VEML770013getResolutionEv>
 23f4970:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 23f4974:	ee28 0a00 	vmul.f32	s0, s16, s0
}
 23f4978:	ecbd 8b02 	vpop	{d8}
 23f497c:	bd10      	pop	{r4, pc}
  bool wait = true;
 23f497e:	2101      	movs	r1, #1
 23f4980:	e7ee      	b.n	23f4960 <_ZN17Adafruit_VEML77007readLuxE9luxMethod+0x18>
 23f4982:	2100      	movs	r1, #0
    return computeLux(readALS(wait), true);
 23f4984:	4620      	mov	r0, r4
 23f4986:	f7ff ff6d 	bl	23f4864 <_ZN17Adafruit_VEML77007readALSEb>
}
 23f498a:	ecbd 8b02 	vpop	{d8}
    return computeLux(readALS(wait), true);
 23f498e:	4601      	mov	r1, r0
 23f4990:	2201      	movs	r2, #1
 23f4992:	4620      	mov	r0, r4
}
 23f4994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return computeLux(readALS(wait), true);
 23f4998:	f7ff bf06 	b.w	23f47a8 <_ZN17Adafruit_VEML770010computeLuxEtb>
  bool wait = true;
 23f499c:	2101      	movs	r1, #1
 23f499e:	e7f1      	b.n	23f4984 <_ZN17Adafruit_VEML77007readLuxE9luxMethod+0x3c>
}
 23f49a0:	ecbd 8b02 	vpop	{d8}
 23f49a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return autoLux();
 23f49a8:	f7ff bf6a 	b.w	23f4880 <_ZN17Adafruit_VEML77007autoLuxEv>
  bool wait = true;
 23f49ac:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 23f49b0:	e7e2      	b.n	23f4978 <_ZN17Adafruit_VEML77007readLuxE9luxMethod+0x30>

023f49b2 <_ZN7TwoWire5writeEi.isra.0>:
  inline size_t write(int n) { return write((uint8_t)n); }
 23f49b2:	6803      	ldr	r3, [r0, #0]
 23f49b4:	b2c9      	uxtb	r1, r1
 23f49b6:	689b      	ldr	r3, [r3, #8]
 23f49b8:	4718      	bx	r3

023f49ba <_ZN8LeafSensC1Ev>:
 */
#include "LeafSens.h"


LeafSens::LeafSens(){
  addr=0x61;
 23f49ba:	2361      	movs	r3, #97	; 0x61
 23f49bc:	7103      	strb	r3, [r0, #4]
}
 23f49be:	4770      	bx	lr

023f49c0 <_ZN8LeafSens4initEh>:
  _wire = the_wire;
  addr = address;
  return 0;
}

int LeafSens::init(uint8_t address){
 23f49c0:	b538      	push	{r3, r4, r5, lr}
 23f49c2:	4604      	mov	r4, r0
 23f49c4:	460d      	mov	r5, r1
  _wire = &Wire;
 23f49c6:	f005 fca5 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23f49ca:	6020      	str	r0, [r4, #0]
  _wire->begin();
 23f49cc:	f004 fa72 	bl	23f8eb4 <_ZN7TwoWire5beginEv>
  // _wire->setClock(100000L);
  addr = address;
  return 0;
}
 23f49d0:	2000      	movs	r0, #0
  addr = address;
 23f49d2:	7125      	strb	r5, [r4, #4]
}
 23f49d4:	bd38      	pop	{r3, r4, r5, pc}

023f49d6 <_ZN8LeafSens8i2cdelayEi>:


bool LeafSens::i2cdelay(int size){
 23f49d6:	b570      	push	{r4, r5, r6, lr}
 23f49d8:	4606      	mov	r6, r0
  delay(1);
 23f49da:	2001      	movs	r0, #1
bool LeafSens::i2cdelay(int size){
 23f49dc:	460d      	mov	r5, r1
  int i=0;
 23f49de:	2400      	movs	r4, #0
  delay(1);
 23f49e0:	f003 fc9c 	bl	23f831c <delay>
  for (;_wire->available() < size && i<=size;i++) {
 23f49e4:	6830      	ldr	r0, [r6, #0]
 23f49e6:	6803      	ldr	r3, [r0, #0]
 23f49e8:	691b      	ldr	r3, [r3, #16]
 23f49ea:	4798      	blx	r3
 23f49ec:	42a8      	cmp	r0, r5
 23f49ee:	da06      	bge.n	23f49fe <_ZN8LeafSens8i2cdelayEi+0x28>
 23f49f0:	42ac      	cmp	r4, r5
 23f49f2:	dc09      	bgt.n	23f4a08 <_ZN8LeafSens8i2cdelayEi+0x32>
	  delay(2);
 23f49f4:	2002      	movs	r0, #2
 23f49f6:	f003 fc91 	bl	23f831c <delay>
  for (;_wire->available() < size && i<=size;i++) {
 23f49fa:	3401      	adds	r4, #1
 23f49fc:	e7f2      	b.n	23f49e4 <_ZN8LeafSens8i2cdelayEi+0xe>
  }
  if(i>=size){
 23f49fe:	42ac      	cmp	r4, r5
 23f4a00:	bfac      	ite	ge
 23f4a02:	2000      	movge	r0, #0
 23f4a04:	2001      	movlt	r0, #1
	  return false;
  }else{
	  return true;
  }
}
 23f4a06:	bd70      	pop	{r4, r5, r6, pc}
	  return false;
 23f4a08:	2000      	movs	r0, #0
 23f4a0a:	e7fc      	b.n	23f4a06 <_ZN8LeafSens8i2cdelayEi+0x30>

023f4a0c <_ZN8LeafSens8getStateEv>:

int LeafSens::getState(){ //-1:no data, 0:err, 1:ok
 23f4a0c:	b510      	push	{r4, lr}
 23f4a0e:	4604      	mov	r4, r0
  _wire->requestFrom(addr, (uint8_t)1);
 23f4a10:	7901      	ldrb	r1, [r0, #4]
 23f4a12:	2201      	movs	r2, #1
 23f4a14:	6800      	ldr	r0, [r0, #0]
 23f4a16:	f004 fa74 	bl	23f8f02 <_ZN7TwoWire11requestFromEhj>
   if(i2cdelay(1)){
 23f4a1a:	2101      	movs	r1, #1
 23f4a1c:	4620      	mov	r0, r4
 23f4a1e:	f7ff ffda 	bl	23f49d6 <_ZN8LeafSens8i2cdelayEi>
 23f4a22:	b128      	cbz	r0, 23f4a30 <_ZN8LeafSens8getStateEv+0x24>
    return _wire->read();
 23f4a24:	6820      	ldr	r0, [r4, #0]
  }else{
    return -1;
  }
}
 23f4a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return _wire->read();
 23f4a2a:	6803      	ldr	r3, [r0, #0]
 23f4a2c:	695b      	ldr	r3, [r3, #20]
 23f4a2e:	4718      	bx	r3
}
 23f4a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23f4a34:	bd10      	pop	{r4, pc}

023f4a36 <_ZN8LeafSens6getValEh>:

int16_t LeafSens::getVal(byte reg){
 23f4a36:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f4a38:	4604      	mov	r4, r0
 23f4a3a:	460d      	mov	r5, r1

  _wire->beginTransmission(addr); // transmit to device
 23f4a3c:	7901      	ldrb	r1, [r0, #4]
 23f4a3e:	6800      	ldr	r0, [r0, #0]
 23f4a40:	f004 fa62 	bl	23f8f08 <_ZN7TwoWire17beginTransmissionEh>
  _wire->write(reg);              // sends one byte
 23f4a44:	6820      	ldr	r0, [r4, #0]
 23f4a46:	4629      	mov	r1, r5
 23f4a48:	6803      	ldr	r3, [r0, #0]
 23f4a4a:	689b      	ldr	r3, [r3, #8]
 23f4a4c:	4798      	blx	r3
  _wire->endTransmission();    // stop transmitting
 23f4a4e:	6820      	ldr	r0, [r4, #0]
 23f4a50:	f004 fa65 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>
  delay(10);
 23f4a54:	200a      	movs	r0, #10
 23f4a56:	f003 fc61 	bl	23f831c <delay>
  _wire->requestFrom(addr, (uint8_t)2);
 23f4a5a:	7921      	ldrb	r1, [r4, #4]
 23f4a5c:	2202      	movs	r2, #2
 23f4a5e:	6820      	ldr	r0, [r4, #0]
 23f4a60:	f004 fa4f 	bl	23f8f02 <_ZN7TwoWire11requestFromEhj>
  int16_t ret=0;
 23f4a64:	2300      	movs	r3, #0
  if(i2cdelay(2)){
 23f4a66:	2102      	movs	r1, #2
 23f4a68:	4620      	mov	r0, r4
  int16_t ret=0;
 23f4a6a:	f8ad 3006 	strh.w	r3, [sp, #6]
  if(i2cdelay(2)){
 23f4a6e:	f7ff ffb2 	bl	23f49d6 <_ZN8LeafSens8i2cdelayEi>
 23f4a72:	b158      	cbz	r0, 23f4a8c <_ZN8LeafSens6getValEh+0x56>
	byte *pointer = (byte *)&ret;
    pointer[0] = _wire->read();
 23f4a74:	6820      	ldr	r0, [r4, #0]
 23f4a76:	6803      	ldr	r3, [r0, #0]
 23f4a78:	695b      	ldr	r3, [r3, #20]
 23f4a7a:	4798      	blx	r3
 23f4a7c:	f88d 0006 	strb.w	r0, [sp, #6]
    pointer[1] = _wire->read();
 23f4a80:	6820      	ldr	r0, [r4, #0]
 23f4a82:	6803      	ldr	r3, [r0, #0]
 23f4a84:	695b      	ldr	r3, [r3, #20]
 23f4a86:	4798      	blx	r3
 23f4a88:	f88d 0007 	strb.w	r0, [sp, #7]
  }
  return ret;
}
 23f4a8c:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 23f4a90:	b003      	add	sp, #12
 23f4a92:	bd30      	pop	{r4, r5, pc}

023f4a94 <_ZN8LeafSens10newReadingEv>:
    return 0;
  }
  return 1;
}

int LeafSens::newReading(){
 23f4a94:	b510      	push	{r4, lr}
 23f4a96:	4604      	mov	r4, r0
  _wire->beginTransmission(addr); // transmit to device
 23f4a98:	7901      	ldrb	r1, [r0, #4]
 23f4a9a:	6800      	ldr	r0, [r0, #0]
 23f4a9c:	f004 fa34 	bl	23f8f08 <_ZN7TwoWire17beginTransmissionEh>
  _wire->write(REG_READ_ST);              // sends one byte
 23f4aa0:	2101      	movs	r1, #1
 23f4aa2:	6820      	ldr	r0, [r4, #0]
 23f4aa4:	f7ff ff85 	bl	23f49b2 <_ZN7TwoWire5writeEi.isra.0>
  _wire->endTransmission();    // stop transmitting
 23f4aa8:	6820      	ldr	r0, [r4, #0]
 23f4aaa:	f004 fa38 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>
  delay(200); // let sensor read the data
 23f4aae:	20c8      	movs	r0, #200	; 0xc8
 23f4ab0:	f003 fc34 	bl	23f831c <delay>
  return getState();
 23f4ab4:	4620      	mov	r0, r4
}
 23f4ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return getState();
 23f4aba:	f7ff bfa7 	b.w	23f4a0c <_ZN8LeafSens8getStateEv>
	...

023f4ac0 <_ZN8LeafSens6getWetEv>:

float LeafSens::getWet()
{
 23f4ac0:	b508      	push	{r3, lr}
  return getVal(REG_WET)/100.0;
 23f4ac2:	2105      	movs	r1, #5
 23f4ac4:	f7ff ffb7 	bl	23f4a36 <_ZN8LeafSens6getValEh>
 23f4ac8:	f7f2 f804 	bl	23e6ad4 <__aeabi_i2d>
 23f4acc:	2200      	movs	r2, #0
 23f4ace:	4b04      	ldr	r3, [pc, #16]	; (23f4ae0 <_ZN8LeafSens6getWetEv+0x20>)
 23f4ad0:	f7f2 f994 	bl	23e6dfc <__aeabi_ddiv>
 23f4ad4:	f7f2 fb60 	bl	23e7198 <__aeabi_d2f>
}
 23f4ad8:	ee00 0a10 	vmov	s0, r0
 23f4adc:	bd08      	pop	{r3, pc}
 23f4ade:	bf00      	nop
 23f4ae0:	40590000 	.word	0x40590000

023f4ae4 <_ZN8LeafSens7getTempEv>:

float LeafSens::getTemp()
{
 23f4ae4:	b508      	push	{r3, lr}
  return getVal(REG_TEMP)/100.0;
 23f4ae6:	2104      	movs	r1, #4
 23f4ae8:	f7ff ffa5 	bl	23f4a36 <_ZN8LeafSens6getValEh>
 23f4aec:	f7f1 fff2 	bl	23e6ad4 <__aeabi_i2d>
 23f4af0:	2200      	movs	r2, #0
 23f4af2:	4b04      	ldr	r3, [pc, #16]	; (23f4b04 <_ZN8LeafSens7getTempEv+0x20>)
 23f4af4:	f7f2 f982 	bl	23e6dfc <__aeabi_ddiv>
 23f4af8:	f7f2 fb4e 	bl	23e7198 <__aeabi_d2f>
}
 23f4afc:	ee00 0a10 	vmov	s0, r0
 23f4b00:	bd08      	pop	{r3, pc}
 23f4b02:	bf00      	nop
 23f4b04:	40590000 	.word	0x40590000

023f4b08 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
 23f4b08:	2001      	movs	r0, #1
 23f4b0a:	4770      	bx	lr

023f4b0c <_ZN15RHGenericDriver13waitAvailableEv>:

// Blocks until a valid message is received
void RHGenericDriver::waitAvailable()
{
 23f4b0c:	b510      	push	{r4, lr}
 23f4b0e:	4604      	mov	r4, r0
    while (!available())
 23f4b10:	6823      	ldr	r3, [r4, #0]
 23f4b12:	4620      	mov	r0, r4
 23f4b14:	685b      	ldr	r3, [r3, #4]
 23f4b16:	4798      	blx	r3
 23f4b18:	2800      	cmp	r0, #0
 23f4b1a:	d0f9      	beq.n	23f4b10 <_ZN15RHGenericDriver13waitAvailableEv+0x4>
	YIELD;
}
 23f4b1c:	bd10      	pop	{r4, pc}

023f4b1e <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
 23f4b1e:	7903      	ldrb	r3, [r0, #4]
 23f4b20:	2b03      	cmp	r3, #3
 23f4b22:	d0fc      	beq.n	23f4b1e <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
 23f4b24:	2001      	movs	r0, #1
 23f4b26:	4770      	bx	lr

023f4b28 <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
 23f4b28:	2000      	movs	r0, #0
 23f4b2a:	4770      	bx	lr

023f4b2c <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
 23f4b2c:	7181      	strb	r1, [r0, #6]
}
 23f4b2e:	4770      	bx	lr

023f4b30 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
 23f4b30:	7141      	strb	r1, [r0, #5]
}
 23f4b32:	4770      	bx	lr

023f4b34 <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
 23f4b34:	72c1      	strb	r1, [r0, #11]
}
 23f4b36:	4770      	bx	lr

023f4b38 <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
 23f4b38:	7301      	strb	r1, [r0, #12]
}
 23f4b3a:	4770      	bx	lr

023f4b3c <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
 23f4b3c:	7341      	strb	r1, [r0, #13]
}
 23f4b3e:	4770      	bx	lr

023f4b40 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
 23f4b40:	7b83      	ldrb	r3, [r0, #14]
 23f4b42:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
 23f4b46:	4311      	orrs	r1, r2
 23f4b48:	7381      	strb	r1, [r0, #14]
}
 23f4b4a:	4770      	bx	lr

023f4b4c <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
 23f4b4c:	79c0      	ldrb	r0, [r0, #7]
}
 23f4b4e:	4770      	bx	lr

023f4b50 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
 23f4b50:	7a00      	ldrb	r0, [r0, #8]
}
 23f4b52:	4770      	bx	lr

023f4b54 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
 23f4b54:	7a40      	ldrb	r0, [r0, #9]
}
 23f4b56:	4770      	bx	lr

023f4b58 <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
 23f4b58:	7a80      	ldrb	r0, [r0, #10]
}
 23f4b5a:	4770      	bx	lr

023f4b5c <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
 23f4b5c:	8a00      	ldrh	r0, [r0, #16]
}
 23f4b5e:	b200      	sxth	r0, r0
 23f4b60:	4770      	bx	lr

023f4b62 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
 23f4b62:	7900      	ldrb	r0, [r0, #4]
}
 23f4b64:	4770      	bx	lr

023f4b66 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
 23f4b66:	7101      	strb	r1, [r0, #4]
}
 23f4b68:	4770      	bx	lr

023f4b6a <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
 23f4b6a:	8a40      	ldrh	r0, [r0, #18]
}
 23f4b6c:	b280      	uxth	r0, r0
 23f4b6e:	4770      	bx	lr

023f4b70 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
 23f4b70:	8a80      	ldrh	r0, [r0, #20]
}
 23f4b72:	b280      	uxth	r0, r0
 23f4b74:	4770      	bx	lr

023f4b76 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
 23f4b76:	8ac0      	ldrh	r0, [r0, #22]
}
 23f4b78:	b280      	uxth	r0, r0
 23f4b7a:	4770      	bx	lr

023f4b7c <_ZN15RHGenericDriver20waitAvailableTimeoutEt>:
{
 23f4b7c:	b570      	push	{r4, r5, r6, lr}
 23f4b7e:	4604      	mov	r4, r0
 23f4b80:	460e      	mov	r6, r1
 23f4b82:	f002 fd73 	bl	23f766c <HAL_Timer_Get_Milli_Seconds>
 23f4b86:	4605      	mov	r5, r0
 23f4b88:	f002 fd70 	bl	23f766c <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
 23f4b8c:	1b40      	subs	r0, r0, r5
 23f4b8e:	42b0      	cmp	r0, r6
 23f4b90:	d206      	bcs.n	23f4ba0 <_ZN15RHGenericDriver20waitAvailableTimeoutEt+0x24>
        if (available())
 23f4b92:	6823      	ldr	r3, [r4, #0]
 23f4b94:	4620      	mov	r0, r4
 23f4b96:	685b      	ldr	r3, [r3, #4]
 23f4b98:	4798      	blx	r3
 23f4b9a:	2800      	cmp	r0, #0
 23f4b9c:	d0f4      	beq.n	23f4b88 <_ZN15RHGenericDriver20waitAvailableTimeoutEt+0xc>
}
 23f4b9e:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 23f4ba0:	2000      	movs	r0, #0
 23f4ba2:	e7fc      	b.n	23f4b9e <_ZN15RHGenericDriver20waitAvailableTimeoutEt+0x22>

023f4ba4 <_ZN15RHGenericDriver14waitPacketSentEt>:
{
 23f4ba4:	b570      	push	{r4, r5, r6, lr}
 23f4ba6:	4604      	mov	r4, r0
 23f4ba8:	460e      	mov	r6, r1
 23f4baa:	f002 fd5f 	bl	23f766c <HAL_Timer_Get_Milli_Seconds>
 23f4bae:	4605      	mov	r5, r0
 23f4bb0:	f002 fd5c 	bl	23f766c <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
 23f4bb4:	1b40      	subs	r0, r0, r5
 23f4bb6:	42b0      	cmp	r0, r6
 23f4bb8:	d204      	bcs.n	23f4bc4 <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
 23f4bba:	7923      	ldrb	r3, [r4, #4]
 23f4bbc:	2b03      	cmp	r3, #3
 23f4bbe:	d0f7      	beq.n	23f4bb0 <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
 23f4bc0:	2001      	movs	r0, #1
}
 23f4bc2:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 23f4bc4:	2000      	movs	r0, #0
 23f4bc6:	e7fc      	b.n	23f4bc2 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

023f4bc8 <_ZN15RHGenericDriver7waitCADEv>:
{
 23f4bc8:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
 23f4bca:	69c3      	ldr	r3, [r0, #28]
{
 23f4bcc:	4604      	mov	r4, r0
    if (!_cad_timeout)
 23f4bce:	b1b3      	cbz	r3, 23f4bfe <_ZN15RHGenericDriver7waitCADEv+0x36>
 23f4bd0:	f002 fd4c 	bl	23f766c <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
 23f4bd4:	2664      	movs	r6, #100	; 0x64
 23f4bd6:	4605      	mov	r5, r0
    while (isChannelActive())
 23f4bd8:	6823      	ldr	r3, [r4, #0]
 23f4bda:	4620      	mov	r0, r4
 23f4bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f4bde:	4798      	blx	r3
 23f4be0:	b168      	cbz	r0, 23f4bfe <_ZN15RHGenericDriver7waitCADEv+0x36>
 23f4be2:	f002 fd43 	bl	23f766c <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
 23f4be6:	69e3      	ldr	r3, [r4, #28]
 23f4be8:	1b40      	subs	r0, r0, r5
 23f4bea:	4298      	cmp	r0, r3
 23f4bec:	d809      	bhi.n	23f4c02 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
 23f4bee:	210a      	movs	r1, #10
 23f4bf0:	2001      	movs	r0, #1
 23f4bf2:	f004 fdf5 	bl	23f97e0 <_Z6randomii>
 23f4bf6:	4370      	muls	r0, r6
 23f4bf8:	f003 fb90 	bl	23f831c <delay>
    while (isChannelActive())
 23f4bfc:	e7ec      	b.n	23f4bd8 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
 23f4bfe:	2001      	movs	r0, #1
}
 23f4c00:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
 23f4c02:	2000      	movs	r0, #0
 23f4c04:	e7fc      	b.n	23f4c00 <_ZN15RHGenericDriver7waitCADEv+0x38>
	...

023f4c08 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
 23f4c08:	4a06      	ldr	r2, [pc, #24]	; (23f4c24 <_ZN15RHGenericDriverC1Ev+0x1c>)
 23f4c0a:	21ff      	movs	r1, #255	; 0xff
 23f4c0c:	6002      	str	r2, [r0, #0]
 23f4c0e:	2200      	movs	r2, #0
 23f4c10:	7141      	strb	r1, [r0, #5]
 23f4c12:	7102      	strb	r2, [r0, #4]
 23f4c14:	72c1      	strb	r1, [r0, #11]
 23f4c16:	8242      	strh	r2, [r0, #18]
 23f4c18:	8181      	strh	r1, [r0, #12]
 23f4c1a:	8282      	strh	r2, [r0, #20]
 23f4c1c:	7382      	strb	r2, [r0, #14]
 23f4c1e:	82c2      	strh	r2, [r0, #22]
 23f4c20:	61c2      	str	r2, [r0, #28]
}
 23f4c22:	4770      	bx	lr
 23f4c24:	023ff790 	.word	0x023ff790

023f4c28 <_ZN12RHGenericSPI15attachInterruptEv>:
    virtual uint8_t transfer(uint8_t data) = 0;

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
 23f4c28:	4770      	bx	lr

023f4c2a <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
 23f4c2a:	4770      	bx	lr

023f4c2c <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
 23f4c2c:	4770      	bx	lr

023f4c2e <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
 23f4c2e:	4770      	bx	lr

023f4c30 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Tells the SPI support software that SPI transactions will occur with the interrupt
    /// handler assocated with interruptNumber
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){}
 23f4c30:	4770      	bx	lr

023f4c32 <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
 23f4c32:	7141      	strb	r1, [r0, #5]
}
 23f4c34:	4770      	bx	lr

023f4c36 <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
 23f4c36:	7181      	strb	r1, [r0, #6]
}
 23f4c38:	4770      	bx	lr

023f4c3a <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
 23f4c3a:	7101      	strb	r1, [r0, #4]
}
 23f4c3c:	4770      	bx	lr
	...

023f4c40 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
 23f4c40:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
 23f4c42:	4d03      	ldr	r5, [pc, #12]	; (23f4c50 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
 23f4c44:	7101      	strb	r1, [r0, #4]
 23f4c46:	6005      	str	r5, [r0, #0]
 23f4c48:	7142      	strb	r2, [r0, #5]
 23f4c4a:	7183      	strb	r3, [r0, #6]
}
 23f4c4c:	bd30      	pop	{r4, r5, pc}
 23f4c4e:	bf00      	nop
 23f4c50:	023ff808 	.word	0x023ff808

023f4c54 <_ZN13RHHardwareSPI14usingInterruptEh>:
void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
#if defined(SPI_HAS_TRANSACTION)

#endif
}
 23f4c54:	4770      	bx	lr
	...

023f4c58 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
 23f4c58:	b510      	push	{r4, lr}
 23f4c5a:	4604      	mov	r4, r0
    RHGenericSPI(frequency, bitOrder, dataMode)
 23f4c5c:	f7ff fff0 	bl	23f4c40 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
 23f4c60:	4b05      	ldr	r3, [pc, #20]	; (23f4c78 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
}
 23f4c62:	4620      	mov	r0, r4
    RHGenericSPI(frequency, bitOrder, dataMode)
 23f4c64:	6023      	str	r3, [r4, #0]
 23f4c66:	4b05      	ldr	r3, [pc, #20]	; (23f4c7c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
 23f4c68:	60a3      	str	r3, [r4, #8]
 23f4c6a:	2301      	movs	r3, #1
 23f4c6c:	7323      	strb	r3, [r4, #12]
 23f4c6e:	2300      	movs	r3, #0
 23f4c70:	6123      	str	r3, [r4, #16]
 23f4c72:	82a3      	strh	r3, [r4, #20]
}
 23f4c74:	bd10      	pop	{r4, pc}
 23f4c76:	bf00      	nop
 23f4c78:	023ff83c 	.word	0x023ff83c
 23f4c7c:	023fea50 	.word	0x023fea50

023f4c80 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>:
    static SPIClass& instance() {
 23f4c80:	b510      	push	{r4, lr}
        static SPIClass instance(Interface);
 23f4c82:	4c09      	ldr	r4, [pc, #36]	; (23f4ca8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x28>)
 23f4c84:	e8d4 3f8f 	ldab	r3, [r4]
 23f4c88:	07db      	lsls	r3, r3, #31
 23f4c8a:	d40a      	bmi.n	23f4ca2 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x22>
 23f4c8c:	4620      	mov	r0, r4
 23f4c8e:	f003 fb29 	bl	23f82e4 <__cxa_guard_acquire>
 23f4c92:	b130      	cbz	r0, 23f4ca2 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x22>
 23f4c94:	2101      	movs	r1, #1
 23f4c96:	4805      	ldr	r0, [pc, #20]	; (23f4cac <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x2c>)
 23f4c98:	f004 fdb8 	bl	23f980c <_ZN8SPIClassC1E19hal_spi_interface_t>
 23f4c9c:	4620      	mov	r0, r4
 23f4c9e:	f003 fb2f 	bl	23f8300 <__cxa_guard_release>
        return instance;
    }
 23f4ca2:	4802      	ldr	r0, [pc, #8]	; (23f4cac <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x2c>)
 23f4ca4:	bd10      	pop	{r4, pc}
 23f4ca6:	bf00      	nop
 23f4ca8:	1007ae70 	.word	0x1007ae70
 23f4cac:	1007ae74 	.word	0x1007ae74

023f4cb0 <_ZN13RHHardwareSPI8transferEh>:
{
 23f4cb0:	b507      	push	{r0, r1, r2, lr}
 23f4cb2:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 23f4cb4:	f7ff ffe4 	bl	23f4c80 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
 23f4cb8:	9901      	ldr	r1, [sp, #4]
}
 23f4cba:	b003      	add	sp, #12
 23f4cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 23f4cc0:	f004 be70 	b.w	23f99a4 <_ZN8SPIClass8transferEh>

023f4cc4 <_ZN13RHHardwareSPI15attachInterruptEv>:
{
 23f4cc4:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
 23f4cc6:	f7ff ffdb 	bl	23f4c80 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
 23f4cca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 23f4cce:	f004 be82 	b.w	23f99d6 <_ZN8SPIClass15attachInterruptEv>

023f4cd2 <_ZN13RHHardwareSPI15detachInterruptEv>:
{
 23f4cd2:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
 23f4cd4:	f7ff ffd4 	bl	23f4c80 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
 23f4cd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 23f4cdc:	f004 be7c 	b.w	23f99d8 <_ZN8SPIClass15detachInterruptEv>

023f4ce0 <_ZN13RHHardwareSPI5beginEv>:
{
 23f4ce0:	b510      	push	{r4, lr}
   if (_frequency == Frequency16MHz)
 23f4ce2:	7903      	ldrb	r3, [r0, #4]
 23f4ce4:	2b04      	cmp	r3, #4
 23f4ce6:	d021      	beq.n	23f4d2c <_ZN13RHHardwareSPI5beginEv+0x4c>
   else if (_frequency == Frequency8MHz)
 23f4ce8:	2b03      	cmp	r3, #3
 23f4cea:	d021      	beq.n	23f4d30 <_ZN13RHHardwareSPI5beginEv+0x50>
   else if (_frequency == Frequency4MHz)
 23f4cec:	2b02      	cmp	r3, #2
 23f4cee:	d021      	beq.n	23f4d34 <_ZN13RHHardwareSPI5beginEv+0x54>
       frequency = 1000000;
 23f4cf0:	4a11      	ldr	r2, [pc, #68]	; (23f4d38 <_ZN13RHHardwareSPI5beginEv+0x58>)
 23f4cf2:	4912      	ldr	r1, [pc, #72]	; (23f4d3c <_ZN13RHHardwareSPI5beginEv+0x5c>)
 23f4cf4:	2b01      	cmp	r3, #1
 23f4cf6:	bf18      	it	ne
 23f4cf8:	460a      	movne	r2, r1
   if (_bitOrder == BitOrderLSBFirst)
 23f4cfa:	7941      	ldrb	r1, [r0, #5]
    if (_dataMode == DataMode0)
 23f4cfc:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
 23f4cfe:	3901      	subs	r1, #1
 23f4d00:	bf18      	it	ne
 23f4d02:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
 23f4d04:	b133      	cbz	r3, 23f4d14 <_ZN13RHHardwareSPI5beginEv+0x34>
    else if (_dataMode == DataMode1)
 23f4d06:	2b01      	cmp	r3, #1
 23f4d08:	d004      	beq.n	23f4d14 <_ZN13RHHardwareSPI5beginEv+0x34>
    else if (_dataMode == DataMode2)
 23f4d0a:	2b02      	cmp	r3, #2
 23f4d0c:	d002      	beq.n	23f4d14 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
 23f4d0e:	2b03      	cmp	r3, #3
 23f4d10:	bf18      	it	ne
 23f4d12:	2300      	movne	r3, #0
class SPISettings : public Printable {
 23f4d14:	2400      	movs	r4, #0
 23f4d16:	7501      	strb	r1, [r0, #20]
 23f4d18:	7304      	strb	r4, [r0, #12]
 23f4d1a:	6102      	str	r2, [r0, #16]
 23f4d1c:	7543      	strb	r3, [r0, #21]
        instance().begin(ss_pin);
 23f4d1e:	f7ff ffaf 	bl	23f4c80 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
 23f4d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f4d26:	21ff      	movs	r1, #255	; 0xff
 23f4d28:	f004 bd8e 	b.w	23f9848 <_ZN8SPIClass5beginEt>
       frequency = 16000000;
 23f4d2c:	4a04      	ldr	r2, [pc, #16]	; (23f4d40 <_ZN13RHHardwareSPI5beginEv+0x60>)
 23f4d2e:	e7e4      	b.n	23f4cfa <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
 23f4d30:	4a04      	ldr	r2, [pc, #16]	; (23f4d44 <_ZN13RHHardwareSPI5beginEv+0x64>)
 23f4d32:	e7e2      	b.n	23f4cfa <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
 23f4d34:	4a04      	ldr	r2, [pc, #16]	; (23f4d48 <_ZN13RHHardwareSPI5beginEv+0x68>)
 23f4d36:	e7e0      	b.n	23f4cfa <_ZN13RHHardwareSPI5beginEv+0x1a>
 23f4d38:	001e8480 	.word	0x001e8480
 23f4d3c:	000f4240 	.word	0x000f4240
 23f4d40:	00f42400 	.word	0x00f42400
 23f4d44:	007a1200 	.word	0x007a1200
 23f4d48:	003d0900 	.word	0x003d0900

023f4d4c <_ZN13RHHardwareSPI3endEv>:
{
 23f4d4c:	b508      	push	{r3, lr}
        instance().end();
 23f4d4e:	f7ff ff97 	bl	23f4c80 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
 23f4d52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 23f4d56:	f004 bd8b 	b.w	23f9870 <_ZN8SPIClass3endEv>

023f4d5a <_ZN13RHHardwareSPI16beginTransactionEv>:
{
 23f4d5a:	b510      	push	{r4, lr}
 23f4d5c:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
 23f4d5e:	f7ff ff8f 	bl	23f4c80 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
 23f4d62:	f104 0108 	add.w	r1, r4, #8
}
 23f4d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f4d6a:	f004 bdad 	b.w	23f98c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

023f4d6e <_ZN13RHHardwareSPI14endTransactionEv>:
{
 23f4d6e:	b508      	push	{r3, lr}
        instance().endTransaction();
 23f4d70:	f7ff ff86 	bl	23f4c80 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
 23f4d74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 23f4d78:	f004 bd8c 	b.w	23f9894 <_ZN8SPIClass14endTransactionEv>

023f4d7c <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
 23f4d7c:	2300      	movs	r3, #0
 23f4d7e:	4802      	ldr	r0, [pc, #8]	; (23f4d88 <_GLOBAL__sub_I_hardware_spi+0xc>)
 23f4d80:	461a      	mov	r2, r3
 23f4d82:	4619      	mov	r1, r3
 23f4d84:	f7ff bf68 	b.w	23f4c58 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
 23f4d88:	1007ae7c 	.word	0x1007ae7c

023f4d8c <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
 23f4d8c:	b510      	push	{r4, lr}
 23f4d8e:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
 23f4d90:	6a00      	ldr	r0, [r0, #32]
 23f4d92:	6803      	ldr	r3, [r0, #0]
 23f4d94:	68db      	ldr	r3, [r3, #12]
 23f4d96:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin
    pinMode(_slaveSelectPin, OUTPUT);
 23f4d98:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f4d9c:	2101      	movs	r1, #1
 23f4d9e:	f005 fa35 	bl	23fa20c <pinMode>
    digitalWrite(_slaveSelectPin, HIGH);
 23f4da2:	2101      	movs	r1, #1
 23f4da4:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f4da8:	f005 fa41 	bl	23fa22e <digitalWrite>

    delay(100);
 23f4dac:	2064      	movs	r0, #100	; 0x64
 23f4dae:	f003 fab5 	bl	23f831c <delay>
    return true;
}
 23f4db2:	2001      	movs	r0, #1
 23f4db4:	bd10      	pop	{r4, pc}
	...

023f4db8 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
 23f4db8:	b570      	push	{r4, r5, r6, lr}
 23f4dba:	4604      	mov	r4, r0
 23f4dbc:	460d      	mov	r5, r1
 23f4dbe:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
 23f4dc0:	f7ff ff22 	bl	23f4c08 <_ZN15RHGenericDriverC1Ev>
 23f4dc4:	4b03      	ldr	r3, [pc, #12]	; (23f4dd4 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
}
 23f4dc6:	4620      	mov	r0, r4
    _slaveSelectPin(slaveSelectPin)
 23f4dc8:	6023      	str	r3, [r4, #0]
 23f4dca:	6226      	str	r6, [r4, #32]
 23f4dcc:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
 23f4dd0:	bd70      	pop	{r4, r5, r6, pc}
 23f4dd2:	bf00      	nop
 23f4dd4:	023ff870 	.word	0x023ff870

023f4dd8 <_ZN11RHSPIDriver7spiReadEh>:

uint8_t RHSPIDriver::spiRead(uint8_t reg)
{
 23f4dd8:	b538      	push	{r3, r4, r5, lr}
 23f4dda:	4604      	mov	r4, r0
 23f4ddc:	460d      	mov	r5, r1
    uint8_t val;
    ATOMIC_BLOCK_START;
    digitalWrite(_slaveSelectPin, LOW);
 23f4dde:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 23f4de2:	2100      	movs	r1, #0
 23f4de4:	f005 fa23 	bl	23fa22e <digitalWrite>
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
 23f4de8:	6a20      	ldr	r0, [r4, #32]
 23f4dea:	f005 017f 	and.w	r1, r5, #127	; 0x7f
 23f4dee:	6803      	ldr	r3, [r0, #0]
 23f4df0:	681b      	ldr	r3, [r3, #0]
 23f4df2:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
 23f4df4:	6a20      	ldr	r0, [r4, #32]
 23f4df6:	2100      	movs	r1, #0
 23f4df8:	6803      	ldr	r3, [r0, #0]
 23f4dfa:	681b      	ldr	r3, [r3, #0]
 23f4dfc:	4798      	blx	r3
 23f4dfe:	4605      	mov	r5, r0
    digitalWrite(_slaveSelectPin, HIGH);
 23f4e00:	2101      	movs	r1, #1
 23f4e02:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f4e06:	f005 fa12 	bl	23fa22e <digitalWrite>
    ATOMIC_BLOCK_END;
    return val;
}
 23f4e0a:	4628      	mov	r0, r5
 23f4e0c:	bd38      	pop	{r3, r4, r5, pc}

023f4e0e <_ZN11RHSPIDriver8spiWriteEhh>:

uint8_t RHSPIDriver::spiWrite(uint8_t reg, uint8_t val)
{
 23f4e0e:	b570      	push	{r4, r5, r6, lr}
 23f4e10:	4604      	mov	r4, r0
 23f4e12:	460d      	mov	r5, r1
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
    _spi.beginTransaction();
 23f4e14:	6a00      	ldr	r0, [r0, #32]
{
 23f4e16:	4616      	mov	r6, r2
    _spi.beginTransaction();
 23f4e18:	6803      	ldr	r3, [r0, #0]
 23f4e1a:	6a1b      	ldr	r3, [r3, #32]
 23f4e1c:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, LOW);
 23f4e1e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f4e22:	2100      	movs	r1, #0
 23f4e24:	f005 fa03 	bl	23fa22e <digitalWrite>
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
 23f4e28:	6a20      	ldr	r0, [r4, #32]
 23f4e2a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23f4e2e:	6803      	ldr	r3, [r0, #0]
 23f4e30:	681b      	ldr	r3, [r3, #0]
 23f4e32:	4798      	blx	r3
 23f4e34:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
 23f4e36:	6a20      	ldr	r0, [r4, #32]
 23f4e38:	4631      	mov	r1, r6
 23f4e3a:	6803      	ldr	r3, [r0, #0]
 23f4e3c:	681b      	ldr	r3, [r3, #0]
 23f4e3e:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, HIGH);
 23f4e40:	2101      	movs	r1, #1
 23f4e42:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f4e46:	f005 f9f2 	bl	23fa22e <digitalWrite>
    _spi.endTransaction();
 23f4e4a:	6a20      	ldr	r0, [r4, #32]
 23f4e4c:	6803      	ldr	r3, [r0, #0]
 23f4e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f4e50:	4798      	blx	r3
    ATOMIC_BLOCK_END;
    return status;
}
 23f4e52:	4628      	mov	r0, r5
 23f4e54:	bd70      	pop	{r4, r5, r6, pc}

023f4e56 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:

uint8_t RHSPIDriver::spiBurstRead(uint8_t reg, uint8_t* dest, uint8_t len)
{
 23f4e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f4e58:	4604      	mov	r4, r0
 23f4e5a:	460f      	mov	r7, r1
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
    _spi.beginTransaction();
 23f4e5c:	6a00      	ldr	r0, [r0, #32]
{
 23f4e5e:	461e      	mov	r6, r3
    _spi.beginTransaction();
 23f4e60:	6803      	ldr	r3, [r0, #0]
{
 23f4e62:	4615      	mov	r5, r2
    _spi.beginTransaction();
 23f4e64:	6a1b      	ldr	r3, [r3, #32]
 23f4e66:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, LOW);
 23f4e68:	2100      	movs	r1, #0
 23f4e6a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f4e6e:	f005 f9de 	bl	23fa22e <digitalWrite>
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
 23f4e72:	6a20      	ldr	r0, [r4, #32]
 23f4e74:	f007 017f 	and.w	r1, r7, #127	; 0x7f
 23f4e78:	6803      	ldr	r3, [r0, #0]
 23f4e7a:	442e      	add	r6, r5
 23f4e7c:	681b      	ldr	r3, [r3, #0]
 23f4e7e:	4798      	blx	r3
 23f4e80:	4607      	mov	r7, r0
    while (len--)
 23f4e82:	42b5      	cmp	r5, r6
 23f4e84:	d007      	beq.n	23f4e96 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x40>
	*dest++ = _spi.transfer(0);
 23f4e86:	6a20      	ldr	r0, [r4, #32]
 23f4e88:	2100      	movs	r1, #0
 23f4e8a:	6803      	ldr	r3, [r0, #0]
 23f4e8c:	681b      	ldr	r3, [r3, #0]
 23f4e8e:	4798      	blx	r3
 23f4e90:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
 23f4e94:	e7f5      	b.n	23f4e82 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2c>
    digitalWrite(_slaveSelectPin, HIGH);
 23f4e96:	2101      	movs	r1, #1
 23f4e98:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f4e9c:	f005 f9c7 	bl	23fa22e <digitalWrite>
    _spi.endTransaction();
 23f4ea0:	6a20      	ldr	r0, [r4, #32]
 23f4ea2:	6803      	ldr	r3, [r0, #0]
 23f4ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f4ea6:	4798      	blx	r3
    ATOMIC_BLOCK_END;
    return status;
}
 23f4ea8:	4638      	mov	r0, r7
 23f4eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f4eac <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:

uint8_t RHSPIDriver::spiBurstWrite(uint8_t reg, const uint8_t* src, uint8_t len)
{
 23f4eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f4eae:	4604      	mov	r4, r0
 23f4eb0:	460f      	mov	r7, r1
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
    _spi.beginTransaction();
 23f4eb2:	6a00      	ldr	r0, [r0, #32]
{
 23f4eb4:	461e      	mov	r6, r3
    _spi.beginTransaction();
 23f4eb6:	6803      	ldr	r3, [r0, #0]
{
 23f4eb8:	4615      	mov	r5, r2
    _spi.beginTransaction();
 23f4eba:	6a1b      	ldr	r3, [r3, #32]
 23f4ebc:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, LOW);
 23f4ebe:	2100      	movs	r1, #0
 23f4ec0:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f4ec4:	f005 f9b3 	bl	23fa22e <digitalWrite>
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
 23f4ec8:	6a20      	ldr	r0, [r4, #32]
 23f4eca:	f047 0180 	orr.w	r1, r7, #128	; 0x80
 23f4ece:	6803      	ldr	r3, [r0, #0]
 23f4ed0:	442e      	add	r6, r5
 23f4ed2:	681b      	ldr	r3, [r3, #0]
 23f4ed4:	4798      	blx	r3
 23f4ed6:	4607      	mov	r7, r0
    while (len--)
 23f4ed8:	42b5      	cmp	r5, r6
 23f4eda:	d006      	beq.n	23f4eea <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3e>
	_spi.transfer(*src++);
 23f4edc:	6a20      	ldr	r0, [r4, #32]
 23f4ede:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f4ee2:	6803      	ldr	r3, [r0, #0]
 23f4ee4:	681b      	ldr	r3, [r3, #0]
 23f4ee6:	4798      	blx	r3
    while (len--)
 23f4ee8:	e7f6      	b.n	23f4ed8 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2c>
    digitalWrite(_slaveSelectPin, HIGH);
 23f4eea:	2101      	movs	r1, #1
 23f4eec:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f4ef0:	f005 f99d 	bl	23fa22e <digitalWrite>
    _spi.endTransaction();
 23f4ef4:	6a20      	ldr	r0, [r4, #32]
 23f4ef6:	6803      	ldr	r3, [r0, #0]
 23f4ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f4efa:	4798      	blx	r3
    ATOMIC_BLOCK_END;
    return status;
}
 23f4efc:	4638      	mov	r0, r7
 23f4efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f4f00 <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _slaveSelectPin = slaveSelectPin;
}

void RHSPIDriver::spiUsingInterrupt(uint8_t interruptNumber)
{
    _spi.usingInterrupt(interruptNumber);
 23f4f00:	6a00      	ldr	r0, [r0, #32]
 23f4f02:	6803      	ldr	r3, [r0, #0]
 23f4f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f4f06:	4718      	bx	r3

023f4f08 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
 23f4f08:	20fb      	movs	r0, #251	; 0xfb
 23f4f0a:	4770      	bx	lr

023f4f0c <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
 23f4f0c:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
 23f4f0e:	7903      	ldrb	r3, [r0, #4]
{
 23f4f10:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
 23f4f12:	2b05      	cmp	r3, #5
 23f4f14:	d00a      	beq.n	23f4f2c <_ZN7RH_RF9515isChannelActiveEv+0x20>
    {
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
 23f4f16:	2207      	movs	r2, #7
 23f4f18:	2101      	movs	r1, #1
 23f4f1a:	f7ff ff78 	bl	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
 23f4f1e:	2280      	movs	r2, #128	; 0x80
 23f4f20:	2140      	movs	r1, #64	; 0x40
 23f4f22:	4620      	mov	r0, r4
 23f4f24:	f7ff ff73 	bl	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
 23f4f28:	2305      	movs	r3, #5
 23f4f2a:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
 23f4f2c:	7923      	ldrb	r3, [r4, #4]
 23f4f2e:	2b05      	cmp	r3, #5
 23f4f30:	d0fc      	beq.n	23f4f2c <_ZN7RH_RF9515isChannelActiveEv+0x20>
        YIELD;

    return _cad;
 23f4f32:	7e20      	ldrb	r0, [r4, #24]
}
 23f4f34:	bd10      	pop	{r4, pc}

023f4f36 <_ZN7RH_RF955sleepEv>:
{
 23f4f36:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
 23f4f38:	7903      	ldrb	r3, [r0, #4]
{
 23f4f3a:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
 23f4f3c:	2b01      	cmp	r3, #1
 23f4f3e:	d005      	beq.n	23f4f4c <_ZN7RH_RF955sleepEv+0x16>
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
 23f4f40:	2200      	movs	r2, #0
 23f4f42:	2101      	movs	r1, #1
 23f4f44:	f7ff ff63 	bl	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
 23f4f48:	2301      	movs	r3, #1
 23f4f4a:	7123      	strb	r3, [r4, #4]
}
 23f4f4c:	2001      	movs	r0, #1
 23f4f4e:	bd10      	pop	{r4, pc}

023f4f50 <_ZN7RH_RF954recvEPhS0_>:
{
 23f4f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
 23f4f52:	6803      	ldr	r3, [r0, #0]
{
 23f4f54:	4604      	mov	r4, r0
    if (!available())
 23f4f56:	685b      	ldr	r3, [r3, #4]
{
 23f4f58:	460f      	mov	r7, r1
 23f4f5a:	4615      	mov	r5, r2
    if (!available())
 23f4f5c:	4798      	blx	r3
 23f4f5e:	4606      	mov	r6, r0
 23f4f60:	b1b8      	cbz	r0, 23f4f92 <_ZN7RH_RF954recvEPhS0_+0x42>
    if (buf && len)
 23f4f62:	b18f      	cbz	r7, 23f4f88 <_ZN7RH_RF954recvEPhS0_+0x38>
 23f4f64:	b185      	cbz	r5, 23f4f88 <_ZN7RH_RF954recvEPhS0_+0x38>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
 23f4f66:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 23f4f6a:	782a      	ldrb	r2, [r5, #0]
 23f4f6c:	3b03      	subs	r3, #3
 23f4f6e:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
 23f4f70:	bfd8      	it	le
 23f4f72:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
 23f4f76:	4638      	mov	r0, r7
	    *len = _bufLen-RH_RF95_HEADER_LEN;
 23f4f78:	bfdc      	itt	le
 23f4f7a:	3b04      	suble	r3, #4
 23f4f7c:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
 23f4f7e:	782a      	ldrb	r2, [r5, #0]
 23f4f80:	f104 012d 	add.w	r1, r4, #45	; 0x2d
 23f4f84:	f007 ff52 	bl	23fce2c <memcpy>
    _rxBufValid = false;
 23f4f88:	2300      	movs	r3, #0
 23f4f8a:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
 23f4f8e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 23f4f92:	4630      	mov	r0, r6
 23f4f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f4f96 <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 23)
 23f4f96:	2917      	cmp	r1, #23
void RH_RF95::setTxPower(int8_t power, bool useRFO)
 23f4f98:	b538      	push	{r3, r4, r5, lr}
 23f4f9a:	4605      	mov	r5, r0
 23f4f9c:	460c      	mov	r4, r1
	if (power > 23)
 23f4f9e:	dc14      	bgt.n	23f4fca <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 5)
 23f4fa0:	2904      	cmp	r1, #4
 23f4fa2:	dd14      	ble.n	23f4fce <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 20)
 23f4fa4:	2914      	cmp	r1, #20
 23f4fa6:	dd13      	ble.n	23f4fd0 <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
 23f4fa8:	2207      	movs	r2, #7
 23f4faa:	214d      	movs	r1, #77	; 0x4d
 23f4fac:	4628      	mov	r0, r5
 23f4fae:	f7ff ff2e 	bl	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
 23f4fb2:	3c03      	subs	r4, #3
 23f4fb4:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
 23f4fb6:	1f62      	subs	r2, r4, #5
 23f4fb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 23f4fbc:	4628      	mov	r0, r5
}
 23f4fbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
 23f4fc2:	2109      	movs	r1, #9
 23f4fc4:	b2d2      	uxtb	r2, r2
 23f4fc6:	f7ff bf22 	b.w	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 23;
 23f4fca:	2417      	movs	r4, #23
 23f4fcc:	e7ec      	b.n	23f4fa8 <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 5;
 23f4fce:	2405      	movs	r4, #5
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
 23f4fd0:	2204      	movs	r2, #4
 23f4fd2:	214d      	movs	r1, #77	; 0x4d
 23f4fd4:	4628      	mov	r0, r5
 23f4fd6:	f7ff ff1a 	bl	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
 23f4fda:	e7ec      	b.n	23f4fb6 <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>

023f4fdc <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
 23f4fdc:	b538      	push	{r3, r4, r5, lr}
 23f4fde:	4604      	mov	r4, r0
 23f4fe0:	4615      	mov	r5, r2
    _rxBufValid(0)
 23f4fe2:	461a      	mov	r2, r3
 23f4fe4:	f7ff fee8 	bl	23f4db8 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
 23f4fe8:	4b05      	ldr	r3, [pc, #20]	; (23f5000 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x24>)
}
 23f4fea:	4620      	mov	r0, r4
    _rxBufValid(0)
 23f4fec:	6023      	str	r3, [r4, #0]
 23f4fee:	2300      	movs	r3, #0
 23f4ff0:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _myInterruptIndex = 0xff; // Not allocated yet
 23f4ff4:	23ff      	movs	r3, #255	; 0xff
    _interruptPin = interruptPin;
 23f4ff6:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _myInterruptIndex = 0xff; // Not allocated yet
 23f4ffa:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
}
 23f4ffe:	bd38      	pop	{r3, r4, r5, pc}
 23f5000:	023ff8f4 	.word	0x023ff8f4

023f5004 <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
 23f5004:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 23f5008:	2b03      	cmp	r3, #3
 23f500a:	d91b      	bls.n	23f5044 <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
 23f500c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 23f5010:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
 23f5012:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 23f5016:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
 23f5018:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 23f501c:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
 23f501e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 23f5022:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
 23f5024:	7983      	ldrb	r3, [r0, #6]
 23f5026:	b933      	cbnz	r3, 23f5036 <_ZN7RH_RF9513validateRxBufEv+0x32>
 23f5028:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
 23f502a:	7942      	ldrb	r2, [r0, #5]
 23f502c:	429a      	cmp	r2, r3
 23f502e:	d002      	beq.n	23f5036 <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
 23f5030:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
 23f5032:	2bff      	cmp	r3, #255	; 0xff
 23f5034:	d106      	bne.n	23f5044 <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
 23f5036:	8a83      	ldrh	r3, [r0, #20]
 23f5038:	3301      	adds	r3, #1
 23f503a:	b29b      	uxth	r3, r3
 23f503c:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
 23f503e:	2301      	movs	r3, #1
 23f5040:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
 23f5044:	4770      	bx	lr
	...

023f5048 <_ZN7RH_RF9512setFrequencyEf>:
{
 23f5048:	b538      	push	{r3, r4, r5, lr}
 23f504a:	4604      	mov	r4, r0
 23f504c:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
 23f5050:	ee10 0a10 	vmov	r0, s0
{
 23f5054:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
 23f5058:	f7f1 fd4e 	bl	23e6af8 <__aeabi_f2d>
 23f505c:	a317      	add	r3, pc, #92	; (adr r3, 23f50bc <_ZN7RH_RF9512setFrequencyEf+0x74>)
 23f505e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f5062:	f7f1 fda1 	bl	23e6ba8 <__aeabi_dmul>
 23f5066:	a317      	add	r3, pc, #92	; (adr r3, 23f50c4 <_ZN7RH_RF9512setFrequencyEf+0x7c>)
 23f5068:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f506c:	f7f1 fec6 	bl	23e6dfc <__aeabi_ddiv>
 23f5070:	f7f2 f872 	bl	23e7158 <__aeabi_d2uiz>
 23f5074:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
 23f5076:	f3c0 4207 	ubfx	r2, r0, #16, #8
 23f507a:	2106      	movs	r1, #6
 23f507c:	4620      	mov	r0, r4
 23f507e:	f7ff fec6 	bl	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
 23f5082:	2107      	movs	r1, #7
 23f5084:	f3c5 2207 	ubfx	r2, r5, #8, #8
 23f5088:	4620      	mov	r0, r4
 23f508a:	f7ff fec0 	bl	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
 23f508e:	2108      	movs	r1, #8
 23f5090:	4620      	mov	r0, r4
 23f5092:	b2ea      	uxtb	r2, r5
 23f5094:	f7ff febb 	bl	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
 23f5098:	eddf 7a07 	vldr	s15, [pc, #28]	; 23f50b8 <_ZN7RH_RF9512setFrequencyEf+0x70>
 23f509c:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
 23f50a0:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
 23f50a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f50a8:	bfac      	ite	ge
 23f50aa:	2301      	movge	r3, #1
 23f50ac:	2300      	movlt	r3, #0
}
 23f50ae:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
 23f50b0:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
 23f50b4:	bd38      	pop	{r3, r4, r5, pc}
 23f50b6:	bf00      	nop
 23f50b8:	4442c000 	.word	0x4442c000
 23f50bc:	00000000 	.word	0x00000000
 23f50c0:	412e8480 	.word	0x412e8480
 23f50c4:	00000000 	.word	0x00000000
 23f50c8:	404e8480 	.word	0x404e8480

023f50cc <_ZN7RH_RF9511setModeIdleEv>:
{
 23f50cc:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
 23f50ce:	7903      	ldrb	r3, [r0, #4]
{
 23f50d0:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
 23f50d2:	2b02      	cmp	r3, #2
 23f50d4:	d005      	beq.n	23f50e2 <_ZN7RH_RF9511setModeIdleEv+0x16>
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
 23f50d6:	2201      	movs	r2, #1
 23f50d8:	4611      	mov	r1, r2
 23f50da:	f7ff fe98 	bl	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
 23f50de:	2302      	movs	r3, #2
 23f50e0:	7123      	strb	r3, [r4, #4]
}
 23f50e2:	bd10      	pop	{r4, pc}

023f50e4 <_ZN7RH_RF9515handleInterruptEv>:
{
 23f50e4:	b538      	push	{r3, r4, r5, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
 23f50e6:	2112      	movs	r1, #18
{
 23f50e8:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
 23f50ea:	f7ff fe75 	bl	23f4dd8 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t crc_present = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
 23f50ee:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
 23f50f0:	4605      	mov	r5, r0
    uint8_t crc_present = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
 23f50f2:	4620      	mov	r0, r4
 23f50f4:	f7ff fe70 	bl	23f4dd8 <_ZN11RHSPIDriver7spiReadEh>
    if (_mode == RHModeRx
 23f50f8:	7923      	ldrb	r3, [r4, #4]
	&& ((irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
 23f50fa:	2b04      	cmp	r3, #4
 23f50fc:	d117      	bne.n	23f512e <_ZN7RH_RF9515handleInterruptEv+0x4a>
	    | !(crc_present & RH_RF95_RX_PAYLOAD_CRC_IS_ON)))
 23f50fe:	f080 0040 	eor.w	r0, r0, #64	; 0x40
 23f5102:	f3c0 1080 	ubfx	r0, r0, #6, #1
	&& ((irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
 23f5106:	f005 03a0 	and.w	r3, r5, #160	; 0xa0
 23f510a:	4303      	orrs	r3, r0
 23f510c:	d00f      	beq.n	23f512e <_ZN7RH_RF9515handleInterruptEv+0x4a>
	_rxBad++;
 23f510e:	8a63      	ldrh	r3, [r4, #18]
 23f5110:	3301      	adds	r3, #1
 23f5112:	b29b      	uxth	r3, r3
 23f5114:	8263      	strh	r3, [r4, #18]
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 23f5116:	22ff      	movs	r2, #255	; 0xff
 23f5118:	2112      	movs	r1, #18
 23f511a:	4620      	mov	r0, r4
 23f511c:	f7ff fe77 	bl	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 23f5120:	4620      	mov	r0, r4
}
 23f5122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 23f5126:	22ff      	movs	r2, #255	; 0xff
 23f5128:	2112      	movs	r1, #18
 23f512a:	f7ff be70 	b.w	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
 23f512e:	7923      	ldrb	r3, [r4, #4]
 23f5130:	2b04      	cmp	r3, #4
 23f5132:	d101      	bne.n	23f5138 <_ZN7RH_RF9515handleInterruptEv+0x54>
 23f5134:	0669      	lsls	r1, r5, #25
 23f5136:	d40d      	bmi.n	23f5154 <_ZN7RH_RF9515handleInterruptEv+0x70>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
 23f5138:	7923      	ldrb	r3, [r4, #4]
 23f513a:	2b03      	cmp	r3, #3
 23f513c:	d101      	bne.n	23f5142 <_ZN7RH_RF9515handleInterruptEv+0x5e>
 23f513e:	072a      	lsls	r2, r5, #28
 23f5140:	d459      	bmi.n	23f51f6 <_ZN7RH_RF9515handleInterruptEv+0x112>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
 23f5142:	7923      	ldrb	r3, [r4, #4]
 23f5144:	2b05      	cmp	r3, #5
 23f5146:	d1e6      	bne.n	23f5116 <_ZN7RH_RF9515handleInterruptEv+0x32>
 23f5148:	076b      	lsls	r3, r5, #29
 23f514a:	d5e4      	bpl.n	23f5116 <_ZN7RH_RF9515handleInterruptEv+0x32>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
 23f514c:	f005 0501 	and.w	r5, r5, #1
 23f5150:	7625      	strb	r5, [r4, #24]
 23f5152:	e054      	b.n	23f51fe <_ZN7RH_RF9515handleInterruptEv+0x11a>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
 23f5154:	2113      	movs	r1, #19
 23f5156:	4620      	mov	r0, r4
 23f5158:	f7ff fe3e 	bl	23f4dd8 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
 23f515c:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
 23f515e:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
 23f5160:	4620      	mov	r0, r4
 23f5162:	f7ff fe39 	bl	23f4dd8 <_ZN11RHSPIDriver7spiReadEh>
 23f5166:	210d      	movs	r1, #13
 23f5168:	4602      	mov	r2, r0
 23f516a:	4620      	mov	r0, r4
 23f516c:	f7ff fe4f 	bl	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
 23f5170:	462b      	mov	r3, r5
 23f5172:	2100      	movs	r1, #0
 23f5174:	f104 0229 	add.w	r2, r4, #41	; 0x29
 23f5178:	4620      	mov	r0, r4
 23f517a:	f7ff fe6c 	bl	23f4e56 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 23f517e:	22ff      	movs	r2, #255	; 0xff
 23f5180:	2112      	movs	r1, #18
 23f5182:	4620      	mov	r0, r4
	_bufLen = len;
 23f5184:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 23f5188:	f7ff fe41 	bl	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
 23f518c:	2119      	movs	r1, #25
 23f518e:	4620      	mov	r0, r4
 23f5190:	f7ff fe22 	bl	23f4dd8 <_ZN11RHSPIDriver7spiReadEh>
 23f5194:	b240      	sxtb	r0, r0
 23f5196:	2800      	cmp	r0, #0
 23f5198:	bfb8      	it	lt
 23f519a:	3003      	addlt	r0, #3
 23f519c:	1080      	asrs	r0, r0, #2
 23f519e:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
 23f51a2:	211a      	movs	r1, #26
 23f51a4:	4620      	mov	r0, r4
 23f51a6:	f7ff fe17 	bl	23f4dd8 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
 23f51aa:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
 23f51ae:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
 23f51b0:	2b00      	cmp	r3, #0
	    _lastRssi = (int)_lastRssi * 16 / 15;
 23f51b2:	bfa8      	it	ge
 23f51b4:	220f      	movge	r2, #15
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
 23f51b6:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
 23f51b8:	bfa9      	itett	ge
 23f51ba:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
 23f51bc:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
 23f51be:	b21b      	sxthge	r3, r3
 23f51c0:	011b      	lslge	r3, r3, #4
 23f51c2:	bfac      	ite	ge
 23f51c4:	fb93 f3f2 	sdivge	r3, r3, r2
	    _lastRssi = _lastRssi + _lastSNR;
 23f51c8:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
 23f51ca:	b21b      	sxth	r3, r3
 23f51cc:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
 23f51ce:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 23f51d2:	b16b      	cbz	r3, 23f51f0 <_ZN7RH_RF9515handleInterruptEv+0x10c>
	    _lastRssi -= 157;
 23f51d4:	8a23      	ldrh	r3, [r4, #16]
 23f51d6:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
 23f51d8:	b21b      	sxth	r3, r3
 23f51da:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
 23f51dc:	4620      	mov	r0, r4
 23f51de:	f7ff ff11 	bl	23f5004 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
 23f51e2:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 23f51e6:	2b00      	cmp	r3, #0
 23f51e8:	d095      	beq.n	23f5116 <_ZN7RH_RF9515handleInterruptEv+0x32>
        setModeIdle();
 23f51ea:	f7ff ff6f 	bl	23f50cc <_ZN7RH_RF9511setModeIdleEv>
 23f51ee:	e792      	b.n	23f5116 <_ZN7RH_RF9515handleInterruptEv+0x32>
	    _lastRssi -= 164;
 23f51f0:	8a23      	ldrh	r3, [r4, #16]
 23f51f2:	3ba4      	subs	r3, #164	; 0xa4
 23f51f4:	e7f0      	b.n	23f51d8 <_ZN7RH_RF9515handleInterruptEv+0xf4>
	_txGood++;
 23f51f6:	8ae3      	ldrh	r3, [r4, #22]
 23f51f8:	3301      	adds	r3, #1
 23f51fa:	b29b      	uxth	r3, r3
 23f51fc:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
 23f51fe:	4620      	mov	r0, r4
 23f5200:	e7f3      	b.n	23f51ea <_ZN7RH_RF9515handleInterruptEv+0x106>
	...

023f5204 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
 23f5204:	4b02      	ldr	r3, [pc, #8]	; (23f5210 <_ZN7RH_RF954isr0Ev+0xc>)
 23f5206:	6818      	ldr	r0, [r3, #0]
 23f5208:	b108      	cbz	r0, 23f520e <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
 23f520a:	f7ff bf6b 	b.w	23f50e4 <_ZN7RH_RF9515handleInterruptEv>
}
 23f520e:	4770      	bx	lr
 23f5210:	1007ae98 	.word	0x1007ae98

023f5214 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
 23f5214:	4b02      	ldr	r3, [pc, #8]	; (23f5220 <_ZN7RH_RF954isr1Ev+0xc>)
 23f5216:	6858      	ldr	r0, [r3, #4]
 23f5218:	b108      	cbz	r0, 23f521e <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
 23f521a:	f7ff bf63 	b.w	23f50e4 <_ZN7RH_RF9515handleInterruptEv>
}
 23f521e:	4770      	bx	lr
 23f5220:	1007ae98 	.word	0x1007ae98

023f5224 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
 23f5224:	4b02      	ldr	r3, [pc, #8]	; (23f5230 <_ZN7RH_RF954isr2Ev+0xc>)
 23f5226:	6898      	ldr	r0, [r3, #8]
 23f5228:	b108      	cbz	r0, 23f522e <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
 23f522a:	f7ff bf5b 	b.w	23f50e4 <_ZN7RH_RF9515handleInterruptEv>
}
 23f522e:	4770      	bx	lr
 23f5230:	1007ae98 	.word	0x1007ae98

023f5234 <_ZN7RH_RF959setModeRxEv>:
{
 23f5234:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
 23f5236:	7903      	ldrb	r3, [r0, #4]
{
 23f5238:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
 23f523a:	2b04      	cmp	r3, #4
 23f523c:	d00a      	beq.n	23f5254 <_ZN7RH_RF959setModeRxEv+0x20>
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
 23f523e:	2205      	movs	r2, #5
 23f5240:	2101      	movs	r1, #1
 23f5242:	f7ff fde4 	bl	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
 23f5246:	2200      	movs	r2, #0
 23f5248:	2140      	movs	r1, #64	; 0x40
 23f524a:	4620      	mov	r0, r4
 23f524c:	f7ff fddf 	bl	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
 23f5250:	2304      	movs	r3, #4
 23f5252:	7123      	strb	r3, [r4, #4]
}
 23f5254:	bd10      	pop	{r4, pc}

023f5256 <_ZN7RH_RF959availableEv>:
{
 23f5256:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
 23f5258:	7903      	ldrb	r3, [r0, #4]
{
 23f525a:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
 23f525c:	2b03      	cmp	r3, #3
 23f525e:	d005      	beq.n	23f526c <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
 23f5260:	f7ff ffe8 	bl	23f5234 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
 23f5264:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
 23f5268:	b2c0      	uxtb	r0, r0
}
 23f526a:	bd10      	pop	{r4, pc}
	return false;
 23f526c:	2000      	movs	r0, #0
 23f526e:	e7fc      	b.n	23f526a <_ZN7RH_RF959availableEv+0x14>

023f5270 <_ZN7RH_RF959setModeTxEv>:
{
 23f5270:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
 23f5272:	7903      	ldrb	r3, [r0, #4]
{
 23f5274:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
 23f5276:	2b03      	cmp	r3, #3
 23f5278:	d00a      	beq.n	23f5290 <_ZN7RH_RF959setModeTxEv+0x20>
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
 23f527a:	2203      	movs	r2, #3
 23f527c:	2101      	movs	r1, #1
 23f527e:	f7ff fdc6 	bl	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
 23f5282:	2240      	movs	r2, #64	; 0x40
 23f5284:	4620      	mov	r0, r4
 23f5286:	4611      	mov	r1, r2
 23f5288:	f7ff fdc1 	bl	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
 23f528c:	2303      	movs	r3, #3
 23f528e:	7123      	strb	r3, [r4, #4]
}
 23f5290:	bd10      	pop	{r4, pc}

023f5292 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
 23f5292:	2afb      	cmp	r2, #251	; 0xfb
{
 23f5294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f5296:	4604      	mov	r4, r0
 23f5298:	460f      	mov	r7, r1
 23f529a:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
 23f529c:	d902      	bls.n	23f52a4 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
 23f529e:	2600      	movs	r6, #0
}
 23f52a0:	4630      	mov	r0, r6
 23f52a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
 23f52a4:	6803      	ldr	r3, [r0, #0]
 23f52a6:	699b      	ldr	r3, [r3, #24]
 23f52a8:	4798      	blx	r3
    setModeIdle();
 23f52aa:	4620      	mov	r0, r4
 23f52ac:	f7ff ff0e 	bl	23f50cc <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
 23f52b0:	6823      	ldr	r3, [r4, #0]
 23f52b2:	4620      	mov	r0, r4
 23f52b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f52b6:	4798      	blx	r3
 23f52b8:	4606      	mov	r6, r0
 23f52ba:	2800      	cmp	r0, #0
 23f52bc:	d0ef      	beq.n	23f529e <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
 23f52be:	2200      	movs	r2, #0
 23f52c0:	210d      	movs	r1, #13
 23f52c2:	4620      	mov	r0, r4
 23f52c4:	f7ff fda3 	bl	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
 23f52c8:	7ae2      	ldrb	r2, [r4, #11]
 23f52ca:	2100      	movs	r1, #0
 23f52cc:	4620      	mov	r0, r4
 23f52ce:	f7ff fd9e 	bl	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
 23f52d2:	7b22      	ldrb	r2, [r4, #12]
 23f52d4:	2100      	movs	r1, #0
 23f52d6:	4620      	mov	r0, r4
 23f52d8:	f7ff fd99 	bl	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
 23f52dc:	7b62      	ldrb	r2, [r4, #13]
 23f52de:	2100      	movs	r1, #0
 23f52e0:	4620      	mov	r0, r4
 23f52e2:	f7ff fd94 	bl	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
 23f52e6:	7ba2      	ldrb	r2, [r4, #14]
 23f52e8:	2100      	movs	r1, #0
 23f52ea:	4620      	mov	r0, r4
 23f52ec:	f7ff fd8f 	bl	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
 23f52f0:	462b      	mov	r3, r5
 23f52f2:	463a      	mov	r2, r7
 23f52f4:	2100      	movs	r1, #0
 23f52f6:	4620      	mov	r0, r4
 23f52f8:	f7ff fdd8 	bl	23f4eac <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
 23f52fc:	1d2a      	adds	r2, r5, #4
 23f52fe:	2122      	movs	r1, #34	; 0x22
 23f5300:	4620      	mov	r0, r4
 23f5302:	b2d2      	uxtb	r2, r2
 23f5304:	f7ff fd83 	bl	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
 23f5308:	4620      	mov	r0, r4
 23f530a:	f7ff ffb1 	bl	23f5270 <_ZN7RH_RF959setModeTxEv>
    return true;
 23f530e:	e7c7      	b.n	23f52a0 <_ZN7RH_RF954sendEPKhh+0xe>

023f5310 <_ZN7RH_RF9510setTxPowerEab>:
    if (useRFO)
 23f5310:	b15a      	cbz	r2, 23f532a <_ZN7RH_RF9510setTxPowerEab+0x1a>
	if (power > 14)
 23f5312:	ea41 72e1 	orr.w	r2, r1, r1, asr #31
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | (power + 1));
 23f5316:	2a0e      	cmp	r2, #14
 23f5318:	bfa8      	it	ge
 23f531a:	220e      	movge	r2, #14
 23f531c:	3201      	adds	r2, #1
 23f531e:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 23f5322:	2109      	movs	r1, #9
 23f5324:	b2d2      	uxtb	r2, r2
 23f5326:	f7ff bd72 	b.w	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
 23f532a:	f7ff be34 	b.w	23f4f96 <_ZN7RH_RF9510setTxPowerEab.part.0>

023f532e <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
 23f532e:	b538      	push	{r3, r4, r5, lr}
 23f5330:	4605      	mov	r5, r0
 23f5332:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
 23f5334:	780a      	ldrb	r2, [r1, #0]
 23f5336:	211d      	movs	r1, #29
 23f5338:	f7ff fd69 	bl	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
 23f533c:	7862      	ldrb	r2, [r4, #1]
 23f533e:	211e      	movs	r1, #30
 23f5340:	4628      	mov	r0, r5
 23f5342:	f7ff fd64 	bl	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
 23f5346:	4628      	mov	r0, r5
 23f5348:	78a2      	ldrb	r2, [r4, #2]
 23f534a:	2126      	movs	r1, #38	; 0x26
}
 23f534c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
 23f5350:	f7ff bd5d 	b.w	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>

023f5354 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
 23f5354:	2904      	cmp	r1, #4
{
 23f5356:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
 23f5358:	d80f      	bhi.n	23f537a <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
 23f535a:	4b09      	ldr	r3, [pc, #36]	; (23f5380 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
 23f535c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 23f5360:	185c      	adds	r4, r3, r1
 23f5362:	5a5a      	ldrh	r2, [r3, r1]
 23f5364:	78a3      	ldrb	r3, [r4, #2]
    setModemRegisters(&cfg);
 23f5366:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
 23f5368:	f8ad 2004 	strh.w	r2, [sp, #4]
 23f536c:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
 23f5370:	f7ff ffdd 	bl	23f532e <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
 23f5374:	2001      	movs	r0, #1
}
 23f5376:	b002      	add	sp, #8
 23f5378:	bd10      	pop	{r4, pc}
        return false;
 23f537a:	2000      	movs	r0, #0
 23f537c:	e7fb      	b.n	23f5376 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
 23f537e:	bf00      	nop
 23f5380:	023ff8e0 	.word	0x023ff8e0

023f5384 <_ZN7RH_RF9517setPreambleLengthEt>:
{
 23f5384:	b538      	push	{r3, r4, r5, lr}
 23f5386:	4605      	mov	r5, r0
 23f5388:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
 23f538a:	0a0a      	lsrs	r2, r1, #8
 23f538c:	2120      	movs	r1, #32
 23f538e:	f7ff fd3e 	bl	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
 23f5392:	4628      	mov	r0, r5
 23f5394:	b2e2      	uxtb	r2, r4
 23f5396:	2121      	movs	r1, #33	; 0x21
}
 23f5398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
 23f539c:	f7ff bd37 	b.w	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>

023f53a0 <_ZN7RH_RF954initEv>:
{
 23f53a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f53a2:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
 23f53a4:	f7ff fcf2 	bl	23f4d8c <_ZN11RHSPIDriver4initEv>
 23f53a8:	4605      	mov	r5, r0
 23f53aa:	b918      	cbnz	r0, 23f53b4 <_ZN7RH_RF954initEv+0x14>
	return false;
 23f53ac:	2500      	movs	r5, #0
}
 23f53ae:	4628      	mov	r0, r5
 23f53b0:	b002      	add	sp, #8
 23f53b2:	bd70      	pop	{r4, r5, r6, pc}
    int interruptNumber = digitalPinToInterrupt(_interruptPin);
 23f53b4:	f894 6026 	ldrb.w	r6, [r4, #38]	; 0x26
    spiUsingInterrupt(interruptNumber);
 23f53b8:	4620      	mov	r0, r4
 23f53ba:	4631      	mov	r1, r6
 23f53bc:	f7ff fda0 	bl	23f4f00 <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
 23f53c0:	2280      	movs	r2, #128	; 0x80
 23f53c2:	2101      	movs	r1, #1
 23f53c4:	4620      	mov	r0, r4
 23f53c6:	f7ff fd22 	bl	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
 23f53ca:	200a      	movs	r0, #10
 23f53cc:	f002 ffa6 	bl	23f831c <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
 23f53d0:	2101      	movs	r1, #1
 23f53d2:	4620      	mov	r0, r4
 23f53d4:	f7ff fd00 	bl	23f4dd8 <_ZN11RHSPIDriver7spiReadEh>
 23f53d8:	2880      	cmp	r0, #128	; 0x80
 23f53da:	d1e7      	bne.n	23f53ac <_ZN7RH_RF954initEv+0xc>
    pinMode(_interruptPin, INPUT); 
 23f53dc:	2100      	movs	r1, #0
 23f53de:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 23f53e2:	f004 ff13 	bl	23fa20c <pinMode>
    if (_myInterruptIndex == 0xff)
 23f53e6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 23f53ea:	2bff      	cmp	r3, #255	; 0xff
 23f53ec:	d107      	bne.n	23f53fe <_ZN7RH_RF954initEv+0x5e>
	if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
 23f53ee:	4a23      	ldr	r2, [pc, #140]	; (23f547c <_ZN7RH_RF954initEv+0xdc>)
 23f53f0:	7813      	ldrb	r3, [r2, #0]
 23f53f2:	2b03      	cmp	r3, #3
 23f53f4:	d8da      	bhi.n	23f53ac <_ZN7RH_RF954initEv+0xc>
	    _myInterruptIndex = _interruptCount++;
 23f53f6:	1c59      	adds	r1, r3, #1
 23f53f8:	7011      	strb	r1, [r2, #0]
 23f53fa:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    _deviceForInterrupt[_myInterruptIndex] = this;
 23f53fe:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 23f5402:	4b1f      	ldr	r3, [pc, #124]	; (23f5480 <_ZN7RH_RF954initEv+0xe0>)
 23f5404:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    if (_myInterruptIndex == 0)
 23f5408:	bb32      	cbnz	r2, 23f5458 <_ZN7RH_RF954initEv+0xb8>
	attachInterrupt(interruptNumber, isr0, RISING);
 23f540a:	9200      	str	r2, [sp, #0]
 23f540c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f5410:	2201      	movs	r2, #1
 23f5412:	491c      	ldr	r1, [pc, #112]	; (23f5484 <_ZN7RH_RF954initEv+0xe4>)
	attachInterrupt(interruptNumber, isr2, RISING);
 23f5414:	4630      	mov	r0, r6
 23f5416:	f003 fdc9 	bl	23f8fac <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
 23f541a:	2200      	movs	r2, #0
 23f541c:	210e      	movs	r1, #14
 23f541e:	4620      	mov	r0, r4
 23f5420:	f7ff fcf5 	bl	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
 23f5424:	2200      	movs	r2, #0
 23f5426:	210f      	movs	r1, #15
 23f5428:	4620      	mov	r0, r4
 23f542a:	f7ff fcf0 	bl	23f4e0e <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
 23f542e:	4620      	mov	r0, r4
 23f5430:	f7ff fe4c 	bl	23f50cc <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
 23f5434:	2100      	movs	r1, #0
 23f5436:	4620      	mov	r0, r4
 23f5438:	f7ff ff8c 	bl	23f5354 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
 23f543c:	2108      	movs	r1, #8
 23f543e:	4620      	mov	r0, r4
 23f5440:	f7ff ffa0 	bl	23f5384 <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
 23f5444:	ed9f 0a10 	vldr	s0, [pc, #64]	; 23f5488 <_ZN7RH_RF954initEv+0xe8>
 23f5448:	4620      	mov	r0, r4
 23f544a:	f7ff fdfd 	bl	23f5048 <_ZN7RH_RF9512setFrequencyEf>
    if (useRFO)
 23f544e:	210d      	movs	r1, #13
 23f5450:	4620      	mov	r0, r4
 23f5452:	f7ff fda0 	bl	23f4f96 <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
 23f5456:	e7aa      	b.n	23f53ae <_ZN7RH_RF954initEv+0xe>
    else if (_myInterruptIndex == 1)
 23f5458:	2a01      	cmp	r2, #1
 23f545a:	f04f 0300 	mov.w	r3, #0
 23f545e:	d104      	bne.n	23f546a <_ZN7RH_RF954initEv+0xca>
	attachInterrupt(interruptNumber, isr1, RISING);
 23f5460:	9300      	str	r3, [sp, #0]
 23f5462:	490a      	ldr	r1, [pc, #40]	; (23f548c <_ZN7RH_RF954initEv+0xec>)
 23f5464:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f5468:	e7d4      	b.n	23f5414 <_ZN7RH_RF954initEv+0x74>
    else if (_myInterruptIndex == 2)
 23f546a:	2a02      	cmp	r2, #2
 23f546c:	d19e      	bne.n	23f53ac <_ZN7RH_RF954initEv+0xc>
	attachInterrupt(interruptNumber, isr2, RISING);
 23f546e:	9300      	str	r3, [sp, #0]
 23f5470:	2201      	movs	r2, #1
 23f5472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f5476:	4906      	ldr	r1, [pc, #24]	; (23f5490 <_ZN7RH_RF954initEv+0xf0>)
 23f5478:	e7cc      	b.n	23f5414 <_ZN7RH_RF954initEv+0x74>
 23f547a:	bf00      	nop
 23f547c:	1007ae94 	.word	0x1007ae94
 23f5480:	1007ae98 	.word	0x1007ae98
 23f5484:	023f5205 	.word	0x023f5205
 23f5488:	43d90000 	.word	0x43d90000
 23f548c:	023f5215 	.word	0x023f5215
 23f5490:	023f5225 	.word	0x023f5225

023f5494 <_ZL9date2daysthh>:
*/
/**************************************************************************/
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
  if (y >= 2000U)
    y -= 2000U;
  uint16_t days = d;
 23f5494:	2300      	movs	r3, #0
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
 23f5496:	b530      	push	{r4, r5, lr}
 23f5498:	4c0e      	ldr	r4, [pc, #56]	; (23f54d4 <_ZL9date2daysthh+0x40>)
  for (uint8_t i = 1; i < m; ++i)
 23f549a:	3301      	adds	r3, #1
 23f549c:	b2dd      	uxtb	r5, r3
 23f549e:	428d      	cmp	r5, r1
 23f54a0:	d204      	bcs.n	23f54ac <_ZL9date2daysthh+0x18>
    days += pgm_read_byte(daysInMonth + i - 1);
 23f54a2:	f814 5b01 	ldrb.w	r5, [r4], #1
 23f54a6:	442a      	add	r2, r5
 23f54a8:	b292      	uxth	r2, r2
  for (uint8_t i = 1; i < m; ++i)
 23f54aa:	e7f6      	b.n	23f549a <_ZL9date2daysthh+0x6>
  if (m > 2 && y % 4 == 0)
 23f54ac:	2902      	cmp	r1, #2
 23f54ae:	d903      	bls.n	23f54b8 <_ZL9date2daysthh+0x24>
 23f54b0:	0783      	lsls	r3, r0, #30
    ++days;
 23f54b2:	bf04      	itt	eq
 23f54b4:	3201      	addeq	r2, #1
 23f54b6:	b292      	uxtheq	r2, r2
  return days + 365 * y + (y + 3) / 4 - 1;
 23f54b8:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 23f54bc:	1cc3      	adds	r3, r0, #3
 23f54be:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 23f54c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 23f54c6:	f3c3 038d 	ubfx	r3, r3, #2, #14
 23f54ca:	3801      	subs	r0, #1
 23f54cc:	4418      	add	r0, r3
 23f54ce:	4410      	add	r0, r2
}
 23f54d0:	b280      	uxth	r0, r0
 23f54d2:	bd30      	pop	{r4, r5, pc}
 23f54d4:	023ff964 	.word	0x023ff964

023f54d8 <_ZN8DateTimeC1Em>:
    @see The `unixtime()` method is the converse of this constructor.

    @param t Time elapsed in seconds since 1970-01-01 00:00:00.
*/
/**************************************************************************/
DateTime::DateTime(uint32_t t) {
 23f54d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  t -= SECONDS_FROM_1970_TO_2000; // bring to 2000 timestamp from 1970

  ss = t % 60;
 23f54da:	243c      	movs	r4, #60	; 0x3c
  t -= SECONDS_FROM_1970_TO_2000; // bring to 2000 timestamp from 1970
 23f54dc:	4b21      	ldr	r3, [pc, #132]	; (23f5564 <_ZN8DateTimeC1Em+0x8c>)
  hh = t % 24;
  uint16_t days = t / 24;
  uint8_t leap;
  for (yOff = 0;; ++yOff) {
    leap = yOff % 4 == 0;
    if (days < 365U + leap)
 23f54de:	f240 166d 	movw	r6, #365	; 0x16d
  t -= SECONDS_FROM_1970_TO_2000; // bring to 2000 timestamp from 1970
 23f54e2:	440b      	add	r3, r1
  ss = t % 60;
 23f54e4:	fbb3 f1f4 	udiv	r1, r3, r4
  mm = t % 60;
 23f54e8:	fbb1 f2f4 	udiv	r2, r1, r4
  ss = t % 60;
 23f54ec:	fb04 3311 	mls	r3, r4, r1, r3
  mm = t % 60;
 23f54f0:	fb04 1112 	mls	r1, r4, r2, r1
 23f54f4:	7101      	strb	r1, [r0, #4]
  hh = t % 24;
 23f54f6:	2118      	movs	r1, #24
  ss = t % 60;
 23f54f8:	7143      	strb	r3, [r0, #5]
  hh = t % 24;
 23f54fa:	fbb2 f3f1 	udiv	r3, r2, r1
 23f54fe:	fb01 2213 	mls	r2, r1, r3, r2
 23f5502:	70c2      	strb	r2, [r0, #3]
  for (yOff = 0;; ++yOff) {
 23f5504:	2200      	movs	r2, #0
      break;
    days -= 365 + leap;
 23f5506:	f64f 6493 	movw	r4, #65171	; 0xfe93
  uint16_t days = t / 24;
 23f550a:	b29b      	uxth	r3, r3
  for (yOff = 0;; ++yOff) {
 23f550c:	7002      	strb	r2, [r0, #0]
    leap = yOff % 4 == 0;
 23f550e:	7802      	ldrb	r2, [r0, #0]
 23f5510:	f012 0503 	ands.w	r5, r2, #3
    if (days < 365U + leap)
 23f5514:	bf13      	iteet	ne
 23f5516:	4637      	movne	r7, r6
 23f5518:	f44f 77b7 	moveq.w	r7, #366	; 0x16e
 23f551c:	2101      	moveq	r1, #1
 23f551e:	2100      	movne	r1, #0
 23f5520:	42bb      	cmp	r3, r7
 23f5522:	d305      	bcc.n	23f5530 <_ZN8DateTimeC1Em+0x58>
    days -= 365 + leap;
 23f5524:	1a61      	subs	r1, r4, r1
 23f5526:	440b      	add	r3, r1
  for (yOff = 0;; ++yOff) {
 23f5528:	3201      	adds	r2, #1
    days -= 365 + leap;
 23f552a:	b29b      	uxth	r3, r3
  for (yOff = 0;; ++yOff) {
 23f552c:	7002      	strb	r2, [r0, #0]
    leap = yOff % 4 == 0;
 23f552e:	e7ee      	b.n	23f550e <_ZN8DateTimeC1Em+0x36>
  }
  for (m = 1; m < 12; ++m) {
 23f5530:	2201      	movs	r2, #1
    uint8_t daysPerMonth = pgm_read_byte(daysInMonth + m - 1);
 23f5532:	4e0d      	ldr	r6, [pc, #52]	; (23f5568 <_ZN8DateTimeC1Em+0x90>)
  for (m = 1; m < 12; ++m) {
 23f5534:	7042      	strb	r2, [r0, #1]
 23f5536:	7842      	ldrb	r2, [r0, #1]
 23f5538:	2a0b      	cmp	r2, #11
 23f553a:	d80f      	bhi.n	23f555c <_ZN8DateTimeC1Em+0x84>
    uint8_t daysPerMonth = pgm_read_byte(daysInMonth + m - 1);
 23f553c:	18b1      	adds	r1, r6, r2
 23f553e:	f811 1c01 	ldrb.w	r1, [r1, #-1]
    if (leap && m == 2)
 23f5542:	b91d      	cbnz	r5, 23f554c <_ZN8DateTimeC1Em+0x74>
 23f5544:	2a02      	cmp	r2, #2
      ++daysPerMonth;
 23f5546:	bf04      	itt	eq
 23f5548:	3101      	addeq	r1, #1
 23f554a:	b2c9      	uxtbeq	r1, r1
    if (days < daysPerMonth)
 23f554c:	4299      	cmp	r1, r3
 23f554e:	b28c      	uxth	r4, r1
 23f5550:	d804      	bhi.n	23f555c <_ZN8DateTimeC1Em+0x84>
      break;
    days -= daysPerMonth;
 23f5552:	1b1b      	subs	r3, r3, r4
  for (m = 1; m < 12; ++m) {
 23f5554:	3201      	adds	r2, #1
    days -= daysPerMonth;
 23f5556:	b29b      	uxth	r3, r3
  for (m = 1; m < 12; ++m) {
 23f5558:	7042      	strb	r2, [r0, #1]
 23f555a:	e7ec      	b.n	23f5536 <_ZN8DateTimeC1Em+0x5e>
  }
  d = days + 1;
 23f555c:	3301      	adds	r3, #1
 23f555e:	7083      	strb	r3, [r0, #2]
}
 23f5560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f5562:	bf00      	nop
 23f5564:	c792bc80 	.word	0xc792bc80
 23f5568:	023ff964 	.word	0x023ff964

023f556c <_ZN8DateTimeC1Ethhhhh>:
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    year -= 2000U;
  yOff = year;
  m = month;
  d = day;
 23f556c:	7083      	strb	r3, [r0, #2]
  hh = hour;
 23f556e:	f89d 3000 	ldrb.w	r3, [sp]
  if (year >= 2000U)
 23f5572:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
  hh = hour;
 23f5576:	70c3      	strb	r3, [r0, #3]
  mm = min;
 23f5578:	f89d 3004 	ldrb.w	r3, [sp, #4]
    year -= 2000U;
 23f557c:	bf28      	it	cs
 23f557e:	f5a1 61fa 	subcs.w	r1, r1, #2000	; 0x7d0
  mm = min;
 23f5582:	7103      	strb	r3, [r0, #4]
  ss = sec;
 23f5584:	f89d 3008 	ldrb.w	r3, [sp, #8]
    year -= 2000U;
 23f5588:	bf28      	it	cs
 23f558a:	b289      	uxthcs	r1, r1
  yOff = year;
 23f558c:	7001      	strb	r1, [r0, #0]
  m = month;
 23f558e:	7042      	strb	r2, [r0, #1]
  ss = sec;
 23f5590:	7143      	strb	r3, [r0, #5]
}
 23f5592:	4770      	bx	lr

023f5594 <_ZNK8DateTime8unixtimeEv>:
        this method.

    @return Number of seconds since 1970-01-01 00:00:00.
*/
/**************************************************************************/
uint32_t DateTime::unixtime(void) const {
 23f5594:	b510      	push	{r4, lr}
 23f5596:	4604      	mov	r4, r0
  uint32_t t;
  uint16_t days = date2days(yOff, m, d);
 23f5598:	7882      	ldrb	r2, [r0, #2]
 23f559a:	7841      	ldrb	r1, [r0, #1]
 23f559c:	7800      	ldrb	r0, [r0, #0]
 23f559e:	f7ff ff79 	bl	23f5494 <_ZL9date2daysthh>
  return ((days * 24UL + h) * 60 + m) * 60 + s;
 23f55a2:	2218      	movs	r2, #24
 23f55a4:	78e3      	ldrb	r3, [r4, #3]
 23f55a6:	7961      	ldrb	r1, [r4, #5]
 23f55a8:	fb02 3000 	mla	r0, r2, r0, r3
 23f55ac:	223c      	movs	r2, #60	; 0x3c
 23f55ae:	7923      	ldrb	r3, [r4, #4]
 23f55b0:	fb02 3000 	mla	r0, r2, r0, r3
  t = time2ulong(days, hh, mm, ss);
  t += SECONDS_FROM_1970_TO_2000; // seconds from 1970 to 2000
 23f55b4:	4b02      	ldr	r3, [pc, #8]	; (23f55c0 <_ZNK8DateTime8unixtimeEv+0x2c>)
 23f55b6:	440b      	add	r3, r1

  return t;
}
 23f55b8:	fb02 3000 	mla	r0, r2, r0, r3
 23f55bc:	bd10      	pop	{r4, pc}
 23f55be:	bf00      	nop
 23f55c0:	386d4380 	.word	0x386d4380

023f55c4 <_ZN11RTC_PCF85235beginEP7TwoWire>:
    @brief  Start I2C for the PCF8523 and test succesful connection
    @return True if Wire can find PCF8523 or false otherwise.
*/
/**************************************************************************/

boolean RTC_PCF8523::begin(TwoWire *wireInstance) {
 23f55c4:	b510      	push	{r4, lr}
 23f55c6:	4604      	mov	r4, r0
 23f55c8:	4608      	mov	r0, r1
  RTCWireBus = wireInstance;
 23f55ca:	6021      	str	r1, [r4, #0]
  RTCWireBus->begin();
 23f55cc:	f003 fc72 	bl	23f8eb4 <_ZN7TwoWire5beginEv>
  RTCWireBus->beginTransmission(PCF8523_ADDRESS);
 23f55d0:	2168      	movs	r1, #104	; 0x68
 23f55d2:	6820      	ldr	r0, [r4, #0]
 23f55d4:	f003 fc9c 	bl	23f8f10 <_ZN7TwoWire17beginTransmissionEi>
  if (RTCWireBus->endTransmission() == 0)
 23f55d8:	6820      	ldr	r0, [r4, #0]
 23f55da:	f003 fca0 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>
    return true;
  return false;
}
 23f55de:	fab0 f080 	clz	r0, r0
 23f55e2:	0940      	lsrs	r0, r0, #5
 23f55e4:	bd10      	pop	{r4, pc}

023f55e6 <_ZN11RTC_PCF85236adjustERK8DateTime>:
/*!
    @brief  Set the date and time, set battery switchover mode
    @param dt DateTime to set
*/
/**************************************************************************/
void RTC_PCF8523::adjust(const DateTime &dt) {
 23f55e6:	b570      	push	{r4, r5, r6, lr}
 23f55e8:	4604      	mov	r4, r0
 23f55ea:	460e      	mov	r6, r1
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 23f55ec:	250a      	movs	r5, #10
  RTCWireBus->beginTransmission(PCF8523_ADDRESS);
 23f55ee:	2168      	movs	r1, #104	; 0x68
 23f55f0:	6800      	ldr	r0, [r0, #0]
 23f55f2:	f003 fc8d 	bl	23f8f10 <_ZN7TwoWire17beginTransmissionEi>
  RTCWireBus->_I2C_WRITE((byte)3); // start at location 3
 23f55f6:	6820      	ldr	r0, [r4, #0]
 23f55f8:	2103      	movs	r1, #3
 23f55fa:	6803      	ldr	r3, [r0, #0]
 23f55fc:	689b      	ldr	r3, [r3, #8]
 23f55fe:	4798      	blx	r3
  uint8_t minute() const { return mm; }
  /*!
      @brief  Return the second.
      @return Second (0--59).
  */
  uint8_t second() const { return ss; }
 23f5600:	7971      	ldrb	r1, [r6, #5]
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.second()));
 23f5602:	6820      	ldr	r0, [r4, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 23f5604:	fbb1 f3f5 	udiv	r3, r1, r5
 23f5608:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f560c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.second()));
 23f5610:	6803      	ldr	r3, [r0, #0]
 23f5612:	b2c9      	uxtb	r1, r1
 23f5614:	689b      	ldr	r3, [r3, #8]
 23f5616:	4798      	blx	r3
  uint8_t minute() const { return mm; }
 23f5618:	7931      	ldrb	r1, [r6, #4]
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.minute()));
 23f561a:	6820      	ldr	r0, [r4, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 23f561c:	fbb1 f3f5 	udiv	r3, r1, r5
 23f5620:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f5624:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.minute()));
 23f5628:	6803      	ldr	r3, [r0, #0]
 23f562a:	b2c9      	uxtb	r1, r1
 23f562c:	689b      	ldr	r3, [r3, #8]
 23f562e:	4798      	blx	r3
  uint8_t hour() const { return hh; }
 23f5630:	78f1      	ldrb	r1, [r6, #3]
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.hour()));
 23f5632:	6820      	ldr	r0, [r4, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 23f5634:	fbb1 f3f5 	udiv	r3, r1, r5
 23f5638:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f563c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.hour()));
 23f5640:	6803      	ldr	r3, [r0, #0]
 23f5642:	b2c9      	uxtb	r1, r1
 23f5644:	689b      	ldr	r3, [r3, #8]
 23f5646:	4798      	blx	r3
  uint8_t day() const { return d; }
 23f5648:	78b1      	ldrb	r1, [r6, #2]
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.day()));
 23f564a:	6820      	ldr	r0, [r4, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 23f564c:	fbb1 f3f5 	udiv	r3, r1, r5
 23f5650:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f5654:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.day()));
 23f5658:	6803      	ldr	r3, [r0, #0]
 23f565a:	b2c9      	uxtb	r1, r1
 23f565c:	689b      	ldr	r3, [r3, #8]
 23f565e:	4798      	blx	r3
  RTCWireBus->_I2C_WRITE(bin2bcd(0)); // skip weekdays
 23f5660:	6820      	ldr	r0, [r4, #0]
 23f5662:	2100      	movs	r1, #0
 23f5664:	6803      	ldr	r3, [r0, #0]
 23f5666:	689b      	ldr	r3, [r3, #8]
 23f5668:	4798      	blx	r3
  uint8_t month() const { return m; }
 23f566a:	7871      	ldrb	r1, [r6, #1]
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.month()));
 23f566c:	6820      	ldr	r0, [r4, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 23f566e:	fbb1 f3f5 	udiv	r3, r1, r5
 23f5672:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f5676:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.month()));
 23f567a:	6803      	ldr	r3, [r0, #0]
 23f567c:	b2c9      	uxtb	r1, r1
 23f567e:	689b      	ldr	r3, [r3, #8]
 23f5680:	4798      	blx	r3
  uint16_t year() const { return 2000U + yOff; }
 23f5682:	7831      	ldrb	r1, [r6, #0]
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.year() - 2000U));
 23f5684:	6820      	ldr	r0, [r4, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 23f5686:	fbb1 f5f5 	udiv	r5, r1, r5
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.year() - 2000U));
 23f568a:	6803      	ldr	r3, [r0, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
 23f568c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 23f5690:	eb01 0145 	add.w	r1, r1, r5, lsl #1
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.year() - 2000U));
 23f5694:	689b      	ldr	r3, [r3, #8]
 23f5696:	b2c9      	uxtb	r1, r1
 23f5698:	4798      	blx	r3
  RTCWireBus->endTransmission();
 23f569a:	6820      	ldr	r0, [r4, #0]
 23f569c:	f003 fc3f 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>

  // set to battery switchover mode
  RTCWireBus->beginTransmission(PCF8523_ADDRESS);
 23f56a0:	6820      	ldr	r0, [r4, #0]
 23f56a2:	2168      	movs	r1, #104	; 0x68
 23f56a4:	f003 fc34 	bl	23f8f10 <_ZN7TwoWire17beginTransmissionEi>
  RTCWireBus->_I2C_WRITE((byte)PCF8523_CONTROL_3);
 23f56a8:	6820      	ldr	r0, [r4, #0]
 23f56aa:	2102      	movs	r1, #2
 23f56ac:	6803      	ldr	r3, [r0, #0]
 23f56ae:	689b      	ldr	r3, [r3, #8]
 23f56b0:	4798      	blx	r3
  RTCWireBus->_I2C_WRITE((byte)0x00);
 23f56b2:	6820      	ldr	r0, [r4, #0]
 23f56b4:	2100      	movs	r1, #0
 23f56b6:	6803      	ldr	r3, [r0, #0]
 23f56b8:	689b      	ldr	r3, [r3, #8]
 23f56ba:	4798      	blx	r3
  RTCWireBus->endTransmission();
 23f56bc:	6820      	ldr	r0, [r4, #0]
}
 23f56be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  RTCWireBus->endTransmission();
 23f56c2:	f003 bc2c 	b.w	23f8f1e <_ZN7TwoWire15endTransmissionEv>

023f56c6 <_ZN11RTC_PCF85233nowEv>:
/*!
    @brief  Get the current date/time
    @return DateTime object containing the current date/time
*/
/**************************************************************************/
DateTime RTC_PCF8523::now() {
 23f56c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f56ca:	460c      	mov	r4, r1
 23f56cc:	4605      	mov	r5, r0
  RTCWireBus->beginTransmission(PCF8523_ADDRESS);
 23f56ce:	2168      	movs	r1, #104	; 0x68
 23f56d0:	6820      	ldr	r0, [r4, #0]
 23f56d2:	f003 fc1d 	bl	23f8f10 <_ZN7TwoWire17beginTransmissionEi>
  RTCWireBus->_I2C_WRITE((byte)3);
 23f56d6:	6820      	ldr	r0, [r4, #0]
 23f56d8:	2103      	movs	r1, #3
 23f56da:	6803      	ldr	r3, [r0, #0]
 23f56dc:	689b      	ldr	r3, [r3, #8]
 23f56de:	4798      	blx	r3
  RTCWireBus->endTransmission();
 23f56e0:	6820      	ldr	r0, [r4, #0]
 23f56e2:	f003 fc1c 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>

  RTCWireBus->requestFrom(PCF8523_ADDRESS, 7);
 23f56e6:	2207      	movs	r2, #7
 23f56e8:	2168      	movs	r1, #104	; 0x68
 23f56ea:	6820      	ldr	r0, [r4, #0]
 23f56ec:	f003 fc09 	bl	23f8f02 <_ZN7TwoWire11requestFromEhj>
  uint8_t ss = bcd2bin(RTCWireBus->_I2C_READ() & 0x7F);
 23f56f0:	6820      	ldr	r0, [r4, #0]
 23f56f2:	6803      	ldr	r3, [r0, #0]
 23f56f4:	695b      	ldr	r3, [r3, #20]
 23f56f6:	4798      	blx	r3
 23f56f8:	f000 097f 	and.w	r9, r0, #127	; 0x7f
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
 23f56fc:	f3c0 1002 	ubfx	r0, r0, #4, #3
 23f5700:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
 23f5704:	eb09 0040 	add.w	r0, r9, r0, lsl #1
 23f5708:	fa5f f980 	uxtb.w	r9, r0
  uint8_t mm = bcd2bin(RTCWireBus->_I2C_READ());
 23f570c:	6820      	ldr	r0, [r4, #0]
 23f570e:	6803      	ldr	r3, [r0, #0]
 23f5710:	695b      	ldr	r3, [r3, #20]
 23f5712:	4798      	blx	r3
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
 23f5714:	f3c0 1603 	ubfx	r6, r0, #4, #4
 23f5718:	eba6 0686 	sub.w	r6, r6, r6, lsl #2
 23f571c:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 23f5720:	f000 06ff 	and.w	r6, r0, #255	; 0xff
  uint8_t hh = bcd2bin(RTCWireBus->_I2C_READ());
 23f5724:	6820      	ldr	r0, [r4, #0]
 23f5726:	6803      	ldr	r3, [r0, #0]
 23f5728:	695b      	ldr	r3, [r3, #20]
 23f572a:	4798      	blx	r3
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
 23f572c:	f3c0 1703 	ubfx	r7, r0, #4, #4
 23f5730:	eba7 0787 	sub.w	r7, r7, r7, lsl #2
 23f5734:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 23f5738:	f000 07ff 	and.w	r7, r0, #255	; 0xff
  uint8_t d = bcd2bin(RTCWireBus->_I2C_READ());
 23f573c:	6820      	ldr	r0, [r4, #0]
 23f573e:	6803      	ldr	r3, [r0, #0]
 23f5740:	695b      	ldr	r3, [r3, #20]
 23f5742:	4798      	blx	r3
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
 23f5744:	f3c0 1803 	ubfx	r8, r0, #4, #4
 23f5748:	eba8 0888 	sub.w	r8, r8, r8, lsl #2
 23f574c:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 23f5750:	f000 08ff 	and.w	r8, r0, #255	; 0xff
  RTCWireBus->_I2C_READ(); // skip 'weekdays'
 23f5754:	6820      	ldr	r0, [r4, #0]
 23f5756:	6803      	ldr	r3, [r0, #0]
 23f5758:	695b      	ldr	r3, [r3, #20]
 23f575a:	4798      	blx	r3
  uint8_t m = bcd2bin(RTCWireBus->_I2C_READ());
 23f575c:	6820      	ldr	r0, [r4, #0]
 23f575e:	6803      	ldr	r3, [r0, #0]
 23f5760:	695b      	ldr	r3, [r3, #20]
 23f5762:	4798      	blx	r3
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
 23f5764:	f3c0 1a03 	ubfx	sl, r0, #4, #4
 23f5768:	ebaa 0a8a 	sub.w	sl, sl, sl, lsl #2
 23f576c:	eb00 004a 	add.w	r0, r0, sl, lsl #1
 23f5770:	f000 0aff 	and.w	sl, r0, #255	; 0xff
  uint16_t y = bcd2bin(RTCWireBus->_I2C_READ()) + 2000U;
 23f5774:	6820      	ldr	r0, [r4, #0]
 23f5776:	6803      	ldr	r3, [r0, #0]
 23f5778:	695b      	ldr	r3, [r3, #20]
 23f577a:	4798      	blx	r3
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
 23f577c:	f3c0 1303 	ubfx	r3, r0, #4, #4
 23f5780:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 23f5784:	eb00 0043 	add.w	r0, r0, r3, lsl #1
  yOff = year;
 23f5788:	7028      	strb	r0, [r5, #0]
  m = month;
 23f578a:	f885 a001 	strb.w	sl, [r5, #1]

  return DateTime(y, m, d, hh, mm, ss);
}
 23f578e:	4628      	mov	r0, r5
  d = day;
 23f5790:	f885 8002 	strb.w	r8, [r5, #2]
  hh = hour;
 23f5794:	70ef      	strb	r7, [r5, #3]
  mm = min;
 23f5796:	712e      	strb	r6, [r5, #4]
  ss = sec;
 23f5798:	f885 9005 	strb.w	r9, [r5, #5]
}
 23f579c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023f57a0 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 23f57a0:	b538      	push	{r3, r4, r5, lr}
 23f57a2:	460d      	mov	r5, r1
 23f57a4:	4604      	mov	r4, r0
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 23f57a6:	2224      	movs	r2, #36	; 0x24
 23f57a8:	2100      	movs	r1, #0
 23f57aa:	f007 fb4c 	bl	23fce46 <memset>

  m_vol = vol;
 23f57ae:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartBlock() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
 23f57b0:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
 23f57b2:	2b10      	cmp	r3, #16
 23f57b4:	d003      	beq.n	23f57be <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
 23f57b6:	2b20      	cmp	r3, #32
 23f57b8:	d006      	beq.n	23f57c8 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
 23f57ba:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
 23f57bc:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
 23f57be:	2320      	movs	r3, #32
  m_flags = F_READ;
 23f57c0:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
 23f57c2:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
 23f57c4:	70a0      	strb	r0, [r4, #2]
  return true;
 23f57c6:	e7f9      	b.n	23f57bc <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
 23f57c8:	2340      	movs	r3, #64	; 0x40
 23f57ca:	e7f9      	b.n	23f57c0 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

023f57cc <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 23f57cc:	b510      	push	{r4, lr}
 23f57ce:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
 23f57d0:	3024      	adds	r0, #36	; 0x24
 23f57d2:	f001 f871 	bl	23f68b8 <_ZN8FatCache4syncEv>
 23f57d6:	b128      	cbz	r0, 23f57e4 <_ZN9FatVolume9cacheSyncEv+0x18>
 23f57d8:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
 23f57dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
 23f57e0:	f001 b86a 	b.w	23f68b8 <_ZN8FatCache4syncEv>
  }
 23f57e4:	bd10      	pop	{r4, pc}

023f57e6 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
 23f57e6:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 23f57e8:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
 23f57ea:	f043 0304 	orr.w	r3, r3, #4
 23f57ee:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 23f57f0:	f100 0210 	add.w	r2, r0, #16
 23f57f4:	6880      	ldr	r0, [r0, #8]
 23f57f6:	f001 b915 	b.w	23f6a24 <_ZN9FatVolume15allocateClusterEmPm>
	...

023f57fc <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
 23f57fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
 23f5800:	7801      	ldrb	r1, [r0, #0]
bool FatFile::addDirCluster() {
 23f5802:	4604      	mov	r4, r0
  if (isRootFixed()) {
 23f5804:	f011 0520 	ands.w	r5, r1, #32
 23f5808:	d003      	beq.n	23f5812 <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
 23f580a:	2600      	movs	r6, #0
}
 23f580c:	4630      	mov	r0, r6
 23f580e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
 23f5812:	6942      	ldr	r2, [r0, #20]
 23f5814:	4b17      	ldr	r3, [pc, #92]	; (23f5874 <_ZN7FatFile13addDirClusterEv+0x78>)
 23f5816:	429a      	cmp	r2, r3
 23f5818:	d2f7      	bcs.n	23f580a <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
 23f581a:	f7ff ffe4 	bl	23f57e6 <_ZN7FatFile10addClusterEv>
 23f581e:	4606      	mov	r6, r0
 23f5820:	2800      	cmp	r0, #0
 23f5822:	d0f2      	beq.n	23f580a <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
 23f5824:	6921      	ldr	r1, [r4, #16]
 23f5826:	68a0      	ldr	r0, [r4, #8]
 23f5828:	f001 f891 	bl	23f694e <_ZNK9FatVolume17clusterFirstBlockEm>
 23f582c:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 23f582e:	68a0      	ldr	r0, [r4, #8]
 23f5830:	2205      	movs	r2, #5
 23f5832:	4639      	mov	r1, r7
 23f5834:	3024      	adds	r0, #36	; 0x24
 23f5836:	f001 f867 	bl	23f6908 <_ZN8FatCache4readEmh>
  if (!pc) {
 23f583a:	4680      	mov	r8, r0
 23f583c:	2800      	cmp	r0, #0
 23f583e:	d0e4      	beq.n	23f580a <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
 23f5840:	4629      	mov	r1, r5
 23f5842:	f44f 7200 	mov.w	r2, #512	; 0x200
 23f5846:	f007 fafe 	bl	23fce46 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 23f584a:	2501      	movs	r5, #1
 23f584c:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
 23f584e:	791a      	ldrb	r2, [r3, #4]
 23f5850:	42aa      	cmp	r2, r5
 23f5852:	d909      	bls.n	23f5868 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
 23f5854:	4642      	mov	r2, r8
 23f5856:	6818      	ldr	r0, [r3, #0]
 23f5858:	19e9      	adds	r1, r5, r7
 23f585a:	f001 fbc4 	bl	23f6fe6 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 23f585e:	2800      	cmp	r0, #0
 23f5860:	d0d3      	beq.n	23f580a <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 23f5862:	3501      	adds	r5, #1
 23f5864:	b2ed      	uxtb	r5, r5
 23f5866:	e7f1      	b.n	23f584c <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 23f5868:	6963      	ldr	r3, [r4, #20]
 23f586a:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 23f586e:	6163      	str	r3, [r4, #20]
  return true;
 23f5870:	e7cc      	b.n	23f580c <_ZN7FatFile13addDirClusterEv+0x10>
 23f5872:	bf00      	nop
 23f5874:	001ffe00 	.word	0x001ffe00

023f5878 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 23f5878:	b510      	push	{r4, lr}
 23f587a:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
 23f587c:	6880      	ldr	r0, [r0, #8]
 23f587e:	460a      	mov	r2, r1
 23f5880:	3024      	adds	r0, #36	; 0x24
 23f5882:	69a1      	ldr	r1, [r4, #24]
 23f5884:	f001 f840 	bl	23f6908 <_ZN8FatCache4readEmh>
  if (!pc) {
 23f5888:	b120      	cbz	r0, 23f5894 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
 23f588a:	88a3      	ldrh	r3, [r4, #4]
 23f588c:	f003 030f 	and.w	r3, r3, #15
 23f5890:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
 23f5894:	bd10      	pop	{r4, pc}

023f5896 <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
 23f5896:	7803      	ldrb	r3, [r0, #0]
 23f5898:	b90b      	cbnz	r3, 23f589e <_ZN7FatFile8openRootEP9FatVolume+0x8>
 23f589a:	f7ff bf81 	b.w	23f57a0 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
 23f589e:	2000      	movs	r0, #0
 23f58a0:	4770      	bx	lr

023f58a2 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 23f58a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
 23f58a6:	7803      	ldrb	r3, [r0, #0]
 23f58a8:	4604      	mov	r4, r0
 23f58aa:	4688      	mov	r8, r1
 23f58ac:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
 23f58ae:	2b00      	cmp	r3, #0
 23f58b0:	d05d      	beq.n	23f596e <_ZN7FatFile4readEPvj+0xcc>
 23f58b2:	7882      	ldrb	r2, [r0, #2]
 23f58b4:	07d1      	lsls	r1, r2, #31
 23f58b6:	d55a      	bpl.n	23f596e <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 23f58b8:	071a      	lsls	r2, r3, #28
 23f58ba:	d52d      	bpl.n	23f5918 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 23f58bc:	69c3      	ldr	r3, [r0, #28]
 23f58be:	6942      	ldr	r2, [r0, #20]
 23f58c0:	1a9b      	subs	r3, r3, r2
 23f58c2:	429d      	cmp	r5, r3
 23f58c4:	bf28      	it	cs
 23f58c6:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 23f58c8:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
 23f58ca:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f58ce:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
 23f58d2:	2e00      	cmp	r6, #0
 23f58d4:	f000 808f 	beq.w	23f59f6 <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
 23f58d8:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
 23f58da:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 23f58dc:	0697      	lsls	r7, r2, #26
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 23f58de:	68a0      	ldr	r0, [r4, #8]
    offset = m_curPosition & 0X1FF;  // offset in block
 23f58e0:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 23f58e4:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 23f58e8:	d51f      	bpl.n	23f592a <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 23f58ea:	6a00      	ldr	r0, [r0, #32]
 23f58ec:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 23f58ee:	68a0      	ldr	r0, [r4, #8]
 23f58f0:	f1ba 0f00 	cmp.w	sl, #0
 23f58f4:	d142      	bne.n	23f597c <_ZN7FatFile4readEPvj+0xda>
 23f58f6:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23f58fa:	d33f      	bcc.n	23f597c <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
 23f58fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 23f58fe:	4299      	cmp	r1, r3
 23f5900:	d03c      	beq.n	23f597c <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 23f5902:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 23f5906:	d252      	bcs.n	23f59ae <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
 23f5908:	4642      	mov	r2, r8
 23f590a:	6800      	ldr	r0, [r0, #0]
 23f590c:	f001 fae2 	bl	23f6ed4 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 23f5910:	b368      	cbz	r0, 23f596e <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
 23f5912:	f44f 7700 	mov.w	r7, #512	; 0x200
 23f5916:	e044      	b.n	23f59a2 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
 23f5918:	069b      	lsls	r3, r3, #26
 23f591a:	d5d5      	bpl.n	23f58c8 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 23f591c:	6883      	ldr	r3, [r0, #8]
 23f591e:	891a      	ldrh	r2, [r3, #8]
 23f5920:	6943      	ldr	r3, [r0, #20]
 23f5922:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
 23f5926:	b29b      	uxth	r3, r3
 23f5928:	e7cb      	b.n	23f58c2 <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 23f592a:	f890 9005 	ldrb.w	r9, [r0, #5]
 23f592e:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
 23f5932:	f1ba 0f00 	cmp.w	sl, #0
 23f5936:	d108      	bne.n	23f594a <_ZN7FatFile4readEPvj+0xa8>
 23f5938:	f1b9 0f00 	cmp.w	r9, #0
 23f593c:	d105      	bne.n	23f594a <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
 23f593e:	b95b      	cbnz	r3, 23f5958 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 23f5940:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
 23f5942:	bf4c      	ite	mi
 23f5944:	6a03      	ldrmi	r3, [r0, #32]
 23f5946:	6a23      	ldrpl	r3, [r4, #32]
 23f5948:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 23f594a:	6921      	ldr	r1, [r4, #16]
 23f594c:	68a0      	ldr	r0, [r4, #8]
 23f594e:	f000 fffe 	bl	23f694e <_ZNK9FatVolume17clusterFirstBlockEm>
 23f5952:	eb09 0100 	add.w	r1, r9, r0
 23f5956:	e7ca      	b.n	23f58ee <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f5958:	465a      	mov	r2, fp
 23f595a:	6921      	ldr	r1, [r4, #16]
 23f595c:	f000 fffd 	bl	23f695a <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 23f5960:	2800      	cmp	r0, #0
 23f5962:	db04      	blt.n	23f596e <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
 23f5964:	d1f1      	bne.n	23f594a <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
 23f5966:	7823      	ldrb	r3, [r4, #0]
 23f5968:	f013 0f70 	tst.w	r3, #112	; 0x70
 23f596c:	d143      	bne.n	23f59f6 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 23f596e:	7863      	ldrb	r3, [r4, #1]
  return -1;
 23f5970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  m_error |= READ_ERROR;
 23f5974:	f043 0302 	orr.w	r3, r3, #2
 23f5978:	7063      	strb	r3, [r4, #1]
  return -1;
 23f597a:	e03d      	b.n	23f59f8 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
 23f597c:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
 23f5980:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
 23f5982:	f04f 0200 	mov.w	r2, #0
 23f5986:	f100 0024 	add.w	r0, r0, #36	; 0x24
 23f598a:	bf28      	it	cs
 23f598c:	4637      	movcs	r7, r6
 23f598e:	f000 ffbb 	bl	23f6908 <_ZN8FatCache4readEmh>
      if (!pc) {
 23f5992:	2800      	cmp	r0, #0
 23f5994:	d0eb      	beq.n	23f596e <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
 23f5996:	eb00 010a 	add.w	r1, r0, sl
 23f599a:	463a      	mov	r2, r7
 23f599c:	4640      	mov	r0, r8
 23f599e:	f007 fa45 	bl	23fce2c <memcpy>
    m_curPosition += n;
 23f59a2:	6963      	ldr	r3, [r4, #20]
    dst += n;
 23f59a4:	44b8      	add	r8, r7
    m_curPosition += n;
 23f59a6:	443b      	add	r3, r7
 23f59a8:	6163      	str	r3, [r4, #20]
    toRead -= n;
 23f59aa:	1bf6      	subs	r6, r6, r7
  while (toRead) {
 23f59ac:	e791      	b.n	23f58d2 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
 23f59ae:	7822      	ldrb	r2, [r4, #0]
      size_t nb = toRead >> 9;
 23f59b0:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
 23f59b4:	0692      	lsls	r2, r2, #26
 23f59b6:	d406      	bmi.n	23f59c6 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
 23f59b8:	7902      	ldrb	r2, [r0, #4]
 23f59ba:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
 23f59be:	b2d2      	uxtb	r2, r2
 23f59c0:	4592      	cmp	sl, r2
 23f59c2:	bf28      	it	cs
 23f59c4:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
 23f59c6:	4299      	cmp	r1, r3
      n = 512*nb;
 23f59c8:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
 23f59cc:	d208      	bcs.n	23f59e0 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
 23f59ce:	68a0      	ldr	r0, [r4, #8]
 23f59d0:	4653      	mov	r3, sl
 23f59d2:	4642      	mov	r2, r8
 23f59d4:	6800      	ldr	r0, [r0, #0]
 23f59d6:	f001 fac5 	bl	23f6f64 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
 23f59da:	2800      	cmp	r0, #0
 23f59dc:	d1e1      	bne.n	23f59a2 <_ZN7FatFile4readEPvj+0x100>
 23f59de:	e7c6      	b.n	23f596e <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
 23f59e0:	4453      	add	r3, sl
 23f59e2:	428b      	cmp	r3, r1
 23f59e4:	d9f3      	bls.n	23f59ce <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
 23f59e6:	3024      	adds	r0, #36	; 0x24
 23f59e8:	9101      	str	r1, [sp, #4]
 23f59ea:	f000 ff65 	bl	23f68b8 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
 23f59ee:	9901      	ldr	r1, [sp, #4]
 23f59f0:	2800      	cmp	r0, #0
 23f59f2:	d1ec      	bne.n	23f59ce <_ZN7FatFile4readEPvj+0x12c>
 23f59f4:	e7bb      	b.n	23f596e <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
 23f59f6:	1ba8      	subs	r0, r5, r6
}
 23f59f8:	b003      	add	sp, #12
 23f59fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023f59fe <_ZN7FatFile4peekEv>:
int FatFile::peek() {
 23f59fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
 23f5a00:	2201      	movs	r2, #1
  pos->cluster = m_curCluster;
 23f5a02:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23f5a06:	f10d 0107 	add.w	r1, sp, #7
int FatFile::peek() {
 23f5a0a:	4604      	mov	r4, r0
 23f5a0c:	f7ff ff49 	bl	23f58a2 <_ZN7FatFile4readEPvj>
 23f5a10:	2801      	cmp	r0, #1
 23f5a12:	bf12      	itee	ne
 23f5a14:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23f5a18:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
 23f5a1c:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
 23f5a20:	b002      	add	sp, #8
 23f5a22:	bd70      	pop	{r4, r5, r6, pc}

023f5a24 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
 23f5a24:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
 23f5a26:	6943      	ldr	r3, [r0, #20]
dir_t* FatFile::readDirCache(bool skipReadOk) {
 23f5a28:	4604      	mov	r4, r0
  if (i == 0 || !skipReadOk) {
 23f5a2a:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
 23f5a2e:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
 23f5a32:	d000      	beq.n	23f5a36 <_ZN7FatFile12readDirCacheEb+0x12>
 23f5a34:	b999      	cbnz	r1, 23f5a5e <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
 23f5a36:	2201      	movs	r2, #1
 23f5a38:	4620      	mov	r0, r4
 23f5a3a:	f10d 0107 	add.w	r1, sp, #7
 23f5a3e:	f7ff ff30 	bl	23f58a2 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
 23f5a42:	b240      	sxtb	r0, r0
 23f5a44:	2801      	cmp	r0, #1
 23f5a46:	d002      	beq.n	23f5a4e <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
 23f5a48:	2000      	movs	r0, #0
}
 23f5a4a:	b003      	add	sp, #12
 23f5a4c:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
 23f5a4e:	6963      	ldr	r3, [r4, #20]
 23f5a50:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
 23f5a52:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
 23f5a54:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
 23f5a56:	3030      	adds	r0, #48	; 0x30
 23f5a58:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 23f5a5c:	e7f5      	b.n	23f5a4a <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
 23f5a5e:	3320      	adds	r3, #32
 23f5a60:	e7f7      	b.n	23f5a52 <_ZN7FatFile12readDirCacheEb+0x2e>

023f5a62 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
 23f5a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
 23f5a66:	7802      	ldrb	r2, [r0, #0]
 23f5a68:	4604      	mov	r4, r0
 23f5a6a:	460d      	mov	r5, r1
  uint32_t tmp = m_curCluster;
 23f5a6c:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
 23f5a6e:	b162      	cbz	r2, 23f5a8a <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
 23f5a70:	6940      	ldr	r0, [r0, #20]
 23f5a72:	4288      	cmp	r0, r1
 23f5a74:	d002      	beq.n	23f5a7c <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
 23f5a76:	b919      	cbnz	r1, 23f5a80 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
 23f5a78:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
 23f5a7a:	6165      	str	r5, [r4, #20]
    return true;
 23f5a7c:	2001      	movs	r0, #1
 23f5a7e:	e006      	b.n	23f5a8e <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
 23f5a80:	0716      	lsls	r6, r2, #28
 23f5a82:	d506      	bpl.n	23f5a92 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
 23f5a84:	69e3      	ldr	r3, [r4, #28]
 23f5a86:	428b      	cmp	r3, r1
 23f5a88:	d20b      	bcs.n	23f5aa2 <_ZN7FatFile7seekSetEm+0x40>
  return false;
 23f5a8a:	2000      	movs	r0, #0
  m_curCluster = tmp;
 23f5a8c:	6127      	str	r7, [r4, #16]
}
 23f5a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
 23f5a92:	0691      	lsls	r1, r2, #26
 23f5a94:	d505      	bpl.n	23f5aa2 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
 23f5a96:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 23f5a98:	891b      	ldrh	r3, [r3, #8]
 23f5a9a:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
 23f5a9e:	d9ec      	bls.n	23f5a7a <_ZN7FatFile7seekSetEm+0x18>
 23f5aa0:	e7f3      	b.n	23f5a8a <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 23f5aa2:	f8d4 c008 	ldr.w	ip, [r4, #8]
 23f5aa6:	1e43      	subs	r3, r0, #1
 23f5aa8:	f89c 6006 	ldrb.w	r6, [ip, #6]
 23f5aac:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 23f5ab0:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 23f5ab2:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 23f5ab4:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
 23f5ab6:	42b3      	cmp	r3, r6
 23f5ab8:	d800      	bhi.n	23f5abc <_ZN7FatFile7seekSetEm+0x5a>
 23f5aba:	b998      	cbnz	r0, 23f5ae4 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 23f5abc:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
 23f5abe:	bf4c      	ite	mi
 23f5ac0:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
 23f5ac4:	6a23      	ldrpl	r3, [r4, #32]
 23f5ac6:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 23f5ac8:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
 23f5acc:	2e00      	cmp	r6, #0
 23f5ace:	d0d4      	beq.n	23f5a7a <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 23f5ad0:	4642      	mov	r2, r8
 23f5ad2:	6921      	ldr	r1, [r4, #16]
 23f5ad4:	68a0      	ldr	r0, [r4, #8]
 23f5ad6:	f000 ff40 	bl	23f695a <_ZN9FatVolume6fatGetEmPm>
 23f5ada:	2800      	cmp	r0, #0
 23f5adc:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 23f5ae0:	dcf4      	bgt.n	23f5acc <_ZN7FatFile7seekSetEm+0x6a>
 23f5ae2:	e7d2      	b.n	23f5a8a <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
 23f5ae4:	1af6      	subs	r6, r6, r3
 23f5ae6:	e7ef      	b.n	23f5ac8 <_ZN7FatFile7seekSetEm+0x66>

023f5ae8 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
 23f5ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f5aea:	460f      	mov	r7, r1
 23f5aec:	4604      	mov	r4, r0
 23f5aee:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
 23f5af0:	2100      	movs	r1, #0
 23f5af2:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
 23f5af4:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
 23f5af6:	f007 f9a6 	bl	23fce46 <memset>
  m_vol = dirFile->m_vol;
 23f5afa:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 23f5afc:	80a5      	strh	r5, [r4, #4]
  m_vol = dirFile->m_vol;
 23f5afe:	60a0      	str	r0, [r4, #8]
  m_dirCluster = dirFile->m_firstCluster;
 23f5b00:	6a3b      	ldr	r3, [r7, #32]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 23f5b02:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
 23f5b06:	60e3      	str	r3, [r4, #12]
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
 23f5b08:	016a      	lsls	r2, r5, #5
 23f5b0a:	eb00 1545 	add.w	r5, r0, r5, lsl #5
 23f5b0e:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 23f5b12:	071f      	lsls	r7, r3, #28
 23f5b14:	d444      	bmi.n	23f5ba0 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
 23f5b16:	f003 0317 	and.w	r3, r3, #23
 23f5b1a:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 23f5b1c:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
 23f5b20:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
 23f5b24:	bf04      	itt	eq
 23f5b26:	f043 0308 	orreq.w	r3, r3, #8
 23f5b2a:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
 23f5b2c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 23f5b30:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
 23f5b32:	f006 0303 	and.w	r3, r6, #3
 23f5b36:	2b01      	cmp	r3, #1
 23f5b38:	d02c      	beq.n	23f5b94 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
 23f5b3a:	2b02      	cmp	r3, #2
 23f5b3c:	d028      	beq.n	23f5b90 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
 23f5b3e:	bb7b      	cbnz	r3, 23f5ba0 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
 23f5b40:	0571      	lsls	r1, r6, #21
 23f5b42:	d42d      	bmi.n	23f5ba0 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
 23f5b44:	2301      	movs	r3, #1
      m_flags = F_WRITE;
 23f5b46:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
 23f5b48:	78a1      	ldrb	r1, [r4, #2]
 23f5b4a:	078b      	lsls	r3, r1, #30
 23f5b4c:	d504      	bpl.n	23f5b58 <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
 23f5b4e:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
 23f5b50:	06df      	lsls	r7, r3, #27
 23f5b52:	d425      	bmi.n	23f5ba0 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
 23f5b54:	07dd      	lsls	r5, r3, #31
 23f5b56:	d423      	bmi.n	23f5ba0 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
 23f5b58:	11b3      	asrs	r3, r6, #6
 23f5b5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 23f5b5e:	f006 0508 	and.w	r5, r6, #8
 23f5b62:	432b      	orrs	r3, r5
 23f5b64:	430b      	orrs	r3, r1
 23f5b66:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
 23f5b68:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
 23f5b6a:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 23f5b6c:	1883      	adds	r3, r0, r2
 23f5b6e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
 23f5b72:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 23f5b76:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
 23f5b7a:	0572      	lsls	r2, r6, #21
 23f5b7c:	d513      	bpl.n	23f5ba6 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 23f5b7e:	b959      	cbnz	r1, 23f5b98 <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
 23f5b80:	78a3      	ldrb	r3, [r4, #2]
 23f5b82:	f043 0304 	orr.w	r3, r3, #4
 23f5b86:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 23f5b88:	0473      	lsls	r3, r6, #17
 23f5b8a:	d410      	bmi.n	23f5bae <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
 23f5b8c:	2001      	movs	r0, #1
}
 23f5b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
 23f5b90:	2303      	movs	r3, #3
 23f5b92:	e7d8      	b.n	23f5b46 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
 23f5b94:	2302      	movs	r3, #2
 23f5b96:	e7d6      	b.n	23f5b46 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 23f5b98:	f000 ff7f 	bl	23f6a9a <_ZN9FatVolume9freeChainEm>
 23f5b9c:	2800      	cmp	r0, #0
 23f5b9e:	d1ef      	bne.n	23f5b80 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
 23f5ba0:	2000      	movs	r0, #0
 23f5ba2:	7020      	strb	r0, [r4, #0]
  return false;
 23f5ba4:	e7f3      	b.n	23f5b8e <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
 23f5ba6:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 23f5ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f5baa:	61e3      	str	r3, [r4, #28]
 23f5bac:	e7ec      	b.n	23f5b88 <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 23f5bae:	4620      	mov	r0, r4
 23f5bb0:	69e1      	ldr	r1, [r4, #28]
 23f5bb2:	f7ff ff56 	bl	23f5a62 <_ZN7FatFile7seekSetEm>
 23f5bb6:	2800      	cmp	r0, #0
 23f5bb8:	d1e8      	bne.n	23f5b8c <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
 23f5bba:	e7f1      	b.n	23f5ba0 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

023f5bbc <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 23f5bbc:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 23f5bbe:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
 23f5bc0:	4604      	mov	r4, r0
  if (!isOpen()) {
 23f5bc2:	b90b      	cbnz	r3, 23f5bc8 <_ZN7FatFile4syncEv+0xc>
    return true;
 23f5bc4:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
 23f5bc6:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
 23f5bc8:	7883      	ldrb	r3, [r0, #2]
 23f5bca:	075a      	lsls	r2, r3, #29
 23f5bcc:	d523      	bpl.n	23f5c16 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 23f5bce:	2101      	movs	r1, #1
 23f5bd0:	f7ff fe52 	bl	23f5878 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 23f5bd4:	4605      	mov	r5, r0
 23f5bd6:	b928      	cbnz	r0, 23f5be4 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
 23f5bd8:	7863      	ldrb	r3, [r4, #1]
  return false;
 23f5bda:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
 23f5bdc:	f043 0301 	orr.w	r3, r3, #1
 23f5be0:	7063      	strb	r3, [r4, #1]
  return false;
 23f5be2:	e7f0      	b.n	23f5bc6 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 23f5be4:	7803      	ldrb	r3, [r0, #0]
 23f5be6:	2be5      	cmp	r3, #229	; 0xe5
 23f5be8:	d0f6      	beq.n	23f5bd8 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
 23f5bea:	7823      	ldrb	r3, [r4, #0]
 23f5bec:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 23f5bee:	bf44      	itt	mi
 23f5bf0:	69e3      	ldrmi	r3, [r4, #28]
 23f5bf2:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 23f5bf4:	6a23      	ldr	r3, [r4, #32]
 23f5bf6:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 23f5bf8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 23f5bfa:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
 23f5bfc:	4b09      	ldr	r3, [pc, #36]	; (23f5c24 <_ZN7FatFile4syncEv+0x68>)
 23f5bfe:	681b      	ldr	r3, [r3, #0]
 23f5c00:	b12b      	cbz	r3, 23f5c0e <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 23f5c02:	f100 0116 	add.w	r1, r0, #22
 23f5c06:	3018      	adds	r0, #24
 23f5c08:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 23f5c0a:	8b2b      	ldrh	r3, [r5, #24]
 23f5c0c:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
 23f5c0e:	78a3      	ldrb	r3, [r4, #2]
 23f5c10:	f023 0304 	bic.w	r3, r3, #4
 23f5c14:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
 23f5c16:	68a0      	ldr	r0, [r4, #8]
 23f5c18:	f7ff fdd8 	bl	23f57cc <_ZN9FatVolume9cacheSyncEv>
 23f5c1c:	2800      	cmp	r0, #0
 23f5c1e:	d0db      	beq.n	23f5bd8 <_ZN7FatFile4syncEv+0x1c>
 23f5c20:	e7d0      	b.n	23f5bc4 <_ZN7FatFile4syncEv+0x8>
 23f5c22:	bf00      	nop
 23f5c24:	1007aea4 	.word	0x1007aea4

023f5c28 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
 23f5c28:	b510      	push	{r4, lr}
 23f5c2a:	4604      	mov	r4, r0
  bool rtn = sync();
 23f5c2c:	f7ff ffc6 	bl	23f5bbc <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 23f5c30:	2300      	movs	r3, #0
 23f5c32:	7023      	strb	r3, [r4, #0]
}
 23f5c34:	bd10      	pop	{r4, pc}

023f5c36 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 23f5c36:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f5c38:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 23f5c3a:	2300      	movs	r3, #0
 23f5c3c:	b093      	sub	sp, #76	; 0x4c
 23f5c3e:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
 23f5c40:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 23f5c42:	4606      	mov	r6, r0
 23f5c44:	460c      	mov	r4, r1
 23f5c46:	9201      	str	r2, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
 23f5c48:	b113      	cbz	r3, 23f5c50 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
 23f5c4a:	2000      	movs	r0, #0
}
 23f5c4c:	b013      	add	sp, #76	; 0x4c
 23f5c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
 23f5c50:	780b      	ldrb	r3, [r1, #0]
 23f5c52:	f013 0f70 	tst.w	r3, #112	; 0x70
 23f5c56:	d0f8      	beq.n	23f5c4a <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
 23f5c58:	7813      	ldrb	r3, [r2, #0]
 23f5c5a:	2b2f      	cmp	r3, #47	; 0x2f
 23f5c5c:	d112      	bne.n	23f5c84 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
 23f5c5e:	9a01      	ldr	r2, [sp, #4]
 23f5c60:	7813      	ldrb	r3, [r2, #0]
 23f5c62:	2b2f      	cmp	r3, #47	; 0x2f
 23f5c64:	d102      	bne.n	23f5c6c <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
 23f5c66:	3201      	adds	r2, #1
 23f5c68:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
 23f5c6a:	e7f8      	b.n	23f5c5e <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
 23f5c6c:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
 23f5c6e:	b91b      	cbnz	r3, 23f5c78 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
 23f5c70:	4630      	mov	r0, r6
 23f5c72:	f7ff fe10 	bl	23f5896 <_ZN7FatFile8openRootEP9FatVolume>
 23f5c76:	e7e9      	b.n	23f5c4c <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
 23f5c78:	a809      	add	r0, sp, #36	; 0x24
 23f5c7a:	f7ff fd91 	bl	23f57a0 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 23f5c7e:	2800      	cmp	r0, #0
 23f5c80:	d0e3      	beq.n	23f5c4a <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
 23f5c82:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
 23f5c84:	9801      	ldr	r0, [sp, #4]
 23f5c86:	aa01      	add	r2, sp, #4
 23f5c88:	a903      	add	r1, sp, #12
 23f5c8a:	f000 fab7 	bl	23f61fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 23f5c8e:	2800      	cmp	r0, #0
 23f5c90:	d0db      	beq.n	23f5c4a <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
 23f5c92:	9b01      	ldr	r3, [sp, #4]
 23f5c94:	781b      	ldrb	r3, [r3, #0]
 23f5c96:	b19b      	cbz	r3, 23f5cc0 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
 23f5c98:	2300      	movs	r3, #0
 23f5c9a:	4621      	mov	r1, r4
 23f5c9c:	4630      	mov	r0, r6
 23f5c9e:	aa03      	add	r2, sp, #12
 23f5ca0:	f000 fc3e 	bl	23f6520 <_ZN7FatFile4openEPS_P7fname_ti>
 23f5ca4:	2800      	cmp	r0, #0
 23f5ca6:	d0d0      	beq.n	23f5c4a <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
 23f5ca8:	4635      	mov	r5, r6
 23f5caa:	ac09      	add	r4, sp, #36	; 0x24
 23f5cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f5cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f5cb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f5cb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f5cb4:	682b      	ldr	r3, [r5, #0]
    close();
 23f5cb6:	4630      	mov	r0, r6
    tmpDir = *this;
 23f5cb8:	6023      	str	r3, [r4, #0]
    close();
 23f5cba:	f7ff ffb5 	bl	23f5c28 <_ZN7FatFile5closeEv>
  while (1) {
 23f5cbe:	e7e0      	b.n	23f5c82 <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
 23f5cc0:	463b      	mov	r3, r7
 23f5cc2:	4621      	mov	r1, r4
 23f5cc4:	4630      	mov	r0, r6
 23f5cc6:	aa03      	add	r2, sp, #12
 23f5cc8:	f000 fc2a 	bl	23f6520 <_ZN7FatFile4openEPS_P7fname_ti>
 23f5ccc:	e7be      	b.n	23f5c4c <_ZN7FatFile4openEPS_PKci+0x16>

023f5cce <_ZN7FatFile6removeEPS_PKc>:
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 23f5cce:	2300      	movs	r3, #0
bool FatFile::remove(FatFile* dirFile, const char* path) {
 23f5cd0:	b500      	push	{lr}
 23f5cd2:	b08b      	sub	sp, #44	; 0x2c
 23f5cd4:	460a      	mov	r2, r1
 23f5cd6:	9301      	str	r3, [sp, #4]
  if (!file.open(dirFile, path, O_WRONLY)) {
 23f5cd8:	4601      	mov	r1, r0
 23f5cda:	2301      	movs	r3, #1
 23f5cdc:	a801      	add	r0, sp, #4
 23f5cde:	f7ff ffaa 	bl	23f5c36 <_ZN7FatFile4openEPS_PKci>
 23f5ce2:	b110      	cbz	r0, 23f5cea <_ZN7FatFile6removeEPS_PKc+0x1c>
  return file.remove();
 23f5ce4:	a801      	add	r0, sp, #4
 23f5ce6:	f000 fb67 	bl	23f63b8 <_ZN7FatFile6removeEv>
}
 23f5cea:	b00b      	add	sp, #44	; 0x2c
 23f5cec:	f85d fb04 	ldr.w	pc, [sp], #4

023f5cf0 <_ZN7FatFile5mkdirEPS_P7fname_t>:
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
 23f5cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!parent->isDir()) {
 23f5cf2:	780b      	ldrb	r3, [r1, #0]
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
 23f5cf4:	4604      	mov	r4, r0
  if (!parent->isDir()) {
 23f5cf6:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
 23f5cfa:	460e      	mov	r6, r1
 23f5cfc:	b089      	sub	sp, #36	; 0x24
  if (!parent->isDir()) {
 23f5cfe:	d102      	bne.n	23f5d06 <_ZN7FatFile5mkdirEPS_P7fname_t+0x16>
  return false;
 23f5d00:	2000      	movs	r0, #0
}
 23f5d02:	b009      	add	sp, #36	; 0x24
 23f5d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!open(parent, fname, O_RDWR | O_CREAT | O_EXCL)) {
 23f5d06:	f640 2302 	movw	r3, #2562	; 0xa02
 23f5d0a:	f000 fc09 	bl	23f6520 <_ZN7FatFile4openEPS_P7fname_ti>
 23f5d0e:	2800      	cmp	r0, #0
 23f5d10:	d0f6      	beq.n	23f5d00 <_ZN7FatFile5mkdirEPS_P7fname_t+0x10>
  m_flags = F_READ;
 23f5d12:	2701      	movs	r7, #1
  m_attr = FILE_ATTR_SUBDIR;
 23f5d14:	2510      	movs	r5, #16
  if (!addDirCluster()) {
 23f5d16:	4620      	mov	r0, r4
  m_flags = F_READ;
 23f5d18:	70a7      	strb	r7, [r4, #2]
  m_attr = FILE_ATTR_SUBDIR;
 23f5d1a:	7025      	strb	r5, [r4, #0]
  if (!addDirCluster()) {
 23f5d1c:	f7ff fd6e 	bl	23f57fc <_ZN7FatFile13addDirClusterEv>
 23f5d20:	2800      	cmp	r0, #0
 23f5d22:	d0ed      	beq.n	23f5d00 <_ZN7FatFile5mkdirEPS_P7fname_t+0x10>
  m_firstCluster = m_curCluster;
 23f5d24:	6923      	ldr	r3, [r4, #16]
    seekSet(0);
 23f5d26:	2100      	movs	r1, #0
 23f5d28:	4620      	mov	r0, r4
 23f5d2a:	6223      	str	r3, [r4, #32]
 23f5d2c:	f7ff fe99 	bl	23f5a62 <_ZN7FatFile7seekSetEm>
  if (!sync()) {
 23f5d30:	4620      	mov	r0, r4
 23f5d32:	f7ff ff43 	bl	23f5bbc <_ZN7FatFile4syncEv>
 23f5d36:	2800      	cmp	r0, #0
 23f5d38:	d0e2      	beq.n	23f5d00 <_ZN7FatFile5mkdirEPS_P7fname_t+0x10>
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 23f5d3a:	4639      	mov	r1, r7
 23f5d3c:	4620      	mov	r0, r4
 23f5d3e:	f7ff fd9b 	bl	23f5878 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
 23f5d42:	2800      	cmp	r0, #0
 23f5d44:	d0dc      	beq.n	23f5d00 <_ZN7FatFile5mkdirEPS_P7fname_t+0x10>
  memcpy(&dot, dir, sizeof(dot));
 23f5d46:	466a      	mov	r2, sp
  dir->attributes = DIR_ATT_DIRECTORY;
 23f5d48:	72c5      	strb	r5, [r0, #11]
  memcpy(&dot, dir, sizeof(dot));
 23f5d4a:	4603      	mov	r3, r0
 23f5d4c:	4615      	mov	r5, r2
 23f5d4e:	f100 0c20 	add.w	ip, r0, #32
 23f5d52:	4617      	mov	r7, r2
 23f5d54:	6818      	ldr	r0, [r3, #0]
 23f5d56:	6859      	ldr	r1, [r3, #4]
 23f5d58:	3308      	adds	r3, #8
 23f5d5a:	c703      	stmia	r7!, {r0, r1}
 23f5d5c:	4563      	cmp	r3, ip
 23f5d5e:	463a      	mov	r2, r7
 23f5d60:	d1f7      	bne.n	23f5d52 <_ZN7FatFile5mkdirEPS_P7fname_t+0x62>
    dot.name[i] = ' ';
 23f5d62:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
  block = m_vol->clusterFirstBlock(m_firstCluster);
 23f5d66:	6a21      	ldr	r1, [r4, #32]
 23f5d68:	68a0      	ldr	r0, [r4, #8]
    dot.name[i] = ' ';
 23f5d6a:	f8cd 3001 	str.w	r3, [sp, #1]
 23f5d6e:	f8cd 3005 	str.w	r3, [sp, #5]
 23f5d72:	f8ad 3009 	strh.w	r3, [sp, #9]
  block = m_vol->clusterFirstBlock(m_firstCluster);
 23f5d76:	f000 fdea 	bl	23f694e <_ZNK9FatVolume17clusterFirstBlockEm>
 23f5d7a:	4601      	mov	r1, r0
    return m_cache.read(blockNumber, options);
 23f5d7c:	68a0      	ldr	r0, [r4, #8]
 23f5d7e:	2201      	movs	r2, #1
 23f5d80:	3024      	adds	r0, #36	; 0x24
 23f5d82:	f000 fdc1 	bl	23f6908 <_ZN8FatCache4readEmh>
  if (!pc) {
 23f5d86:	4603      	mov	r3, r0
 23f5d88:	2800      	cmp	r0, #0
 23f5d8a:	d0b9      	beq.n	23f5d00 <_ZN7FatFile5mkdirEPS_P7fname_t+0x10>
  memcpy(&pc->dir[0], &dot, sizeof(dot));
 23f5d8c:	222e      	movs	r2, #46	; 0x2e
 23f5d8e:	46ac      	mov	ip, r5
 23f5d90:	4607      	mov	r7, r0
 23f5d92:	f88d 2000 	strb.w	r2, [sp]
 23f5d96:	f10d 0e20 	add.w	lr, sp, #32
 23f5d9a:	4662      	mov	r2, ip
 23f5d9c:	ca03      	ldmia	r2!, {r0, r1}
 23f5d9e:	4572      	cmp	r2, lr
 23f5da0:	6038      	str	r0, [r7, #0]
 23f5da2:	6079      	str	r1, [r7, #4]
 23f5da4:	4694      	mov	ip, r2
 23f5da6:	f107 0708 	add.w	r7, r7, #8
 23f5daa:	d1f6      	bne.n	23f5d9a <_ZN7FatFile5mkdirEPS_P7fname_t+0xaa>
  dot.name[1] = '.';
 23f5dac:	222e      	movs	r2, #46	; 0x2e
 23f5dae:	f88d 2001 	strb.w	r2, [sp, #1]
  dot.firstClusterLow = parent->m_firstCluster & 0XFFFF;
 23f5db2:	6a32      	ldr	r2, [r6, #32]
  memcpy(&pc->dir[1], &dot, sizeof(dot));
 23f5db4:	3320      	adds	r3, #32
  dot.firstClusterHigh = parent->m_firstCluster >> 16;
 23f5db6:	0c11      	lsrs	r1, r2, #16
  dot.firstClusterLow = parent->m_firstCluster & 0XFFFF;
 23f5db8:	f8ad 201a 	strh.w	r2, [sp, #26]
  memcpy(&pc->dir[1], &dot, sizeof(dot));
 23f5dbc:	462a      	mov	r2, r5
  dot.firstClusterHigh = parent->m_firstCluster >> 16;
 23f5dbe:	f8ad 1014 	strh.w	r1, [sp, #20]
  memcpy(&pc->dir[1], &dot, sizeof(dot));
 23f5dc2:	ae08      	add	r6, sp, #32
 23f5dc4:	4615      	mov	r5, r2
 23f5dc6:	cd03      	ldmia	r5!, {r0, r1}
 23f5dc8:	42b5      	cmp	r5, r6
 23f5dca:	6018      	str	r0, [r3, #0]
 23f5dcc:	6059      	str	r1, [r3, #4]
 23f5dce:	462a      	mov	r2, r5
 23f5dd0:	f103 0308 	add.w	r3, r3, #8
 23f5dd4:	d1f6      	bne.n	23f5dc4 <_ZN7FatFile5mkdirEPS_P7fname_t+0xd4>
  return m_vol->cacheSync();
 23f5dd6:	68a0      	ldr	r0, [r4, #8]
 23f5dd8:	f7ff fcf8 	bl	23f57cc <_ZN9FatVolume9cacheSyncEv>
 23f5ddc:	e791      	b.n	23f5d02 <_ZN7FatFile5mkdirEPS_P7fname_t+0x12>

023f5dde <_ZN7FatFile5mkdirEPS_PKcb>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
 23f5dde:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f5de0:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 23f5de2:	2300      	movs	r3, #0
 23f5de4:	b093      	sub	sp, #76	; 0x4c
 23f5de6:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !parent->isDir()) {
 23f5de8:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
 23f5dea:	4606      	mov	r6, r0
 23f5dec:	460c      	mov	r4, r1
 23f5dee:	9201      	str	r2, [sp, #4]
  if (isOpen() || !parent->isDir()) {
 23f5df0:	b113      	cbz	r3, 23f5df8 <_ZN7FatFile5mkdirEPS_PKcb+0x1a>
  return false;
 23f5df2:	2000      	movs	r0, #0
}
 23f5df4:	b013      	add	sp, #76	; 0x4c
 23f5df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !parent->isDir()) {
 23f5df8:	780b      	ldrb	r3, [r1, #0]
 23f5dfa:	f013 0f70 	tst.w	r3, #112	; 0x70
 23f5dfe:	d0f8      	beq.n	23f5df2 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
  if (isDirSeparator(*path)) {
 23f5e00:	7813      	ldrb	r3, [r2, #0]
 23f5e02:	2b2f      	cmp	r3, #47	; 0x2f
 23f5e04:	d10d      	bne.n	23f5e22 <_ZN7FatFile5mkdirEPS_PKcb+0x44>
    while (isDirSeparator(*path)) {
 23f5e06:	9a01      	ldr	r2, [sp, #4]
 23f5e08:	7813      	ldrb	r3, [r2, #0]
 23f5e0a:	2b2f      	cmp	r3, #47	; 0x2f
 23f5e0c:	d102      	bne.n	23f5e14 <_ZN7FatFile5mkdirEPS_PKcb+0x36>
      path++;
 23f5e0e:	3201      	adds	r2, #1
 23f5e10:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
 23f5e12:	e7f8      	b.n	23f5e06 <_ZN7FatFile5mkdirEPS_PKcb+0x28>
    return m_attr;
 23f5e14:	68a1      	ldr	r1, [r4, #8]
 23f5e16:	a809      	add	r0, sp, #36	; 0x24
 23f5e18:	f7ff fcc2 	bl	23f57a0 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(parent->m_vol)) {
 23f5e1c:	2800      	cmp	r0, #0
 23f5e1e:	d0e8      	beq.n	23f5df2 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
    parent = &tmpDir;
 23f5e20:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
 23f5e22:	9801      	ldr	r0, [sp, #4]
 23f5e24:	aa01      	add	r2, sp, #4
 23f5e26:	a903      	add	r1, sp, #12
 23f5e28:	f000 f9e8 	bl	23f61fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 23f5e2c:	2800      	cmp	r0, #0
 23f5e2e:	d0e0      	beq.n	23f5df2 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
    if (!*path) {
 23f5e30:	9b01      	ldr	r3, [sp, #4]
 23f5e32:	781b      	ldrb	r3, [r3, #0]
 23f5e34:	b1e3      	cbz	r3, 23f5e70 <_ZN7FatFile5mkdirEPS_PKcb+0x92>
    if (!open(parent, &fname, O_RDONLY)) {
 23f5e36:	2300      	movs	r3, #0
 23f5e38:	4621      	mov	r1, r4
 23f5e3a:	4630      	mov	r0, r6
 23f5e3c:	aa03      	add	r2, sp, #12
 23f5e3e:	f000 fb6f 	bl	23f6520 <_ZN7FatFile4openEPS_P7fname_ti>
 23f5e42:	b158      	cbz	r0, 23f5e5c <_ZN7FatFile5mkdirEPS_PKcb+0x7e>
    tmpDir = *this;
 23f5e44:	4635      	mov	r5, r6
 23f5e46:	ac09      	add	r4, sp, #36	; 0x24
 23f5e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f5e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f5e4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f5e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f5e50:	682b      	ldr	r3, [r5, #0]
    close();
 23f5e52:	4630      	mov	r0, r6
    tmpDir = *this;
 23f5e54:	6023      	str	r3, [r4, #0]
    close();
 23f5e56:	f7ff fee7 	bl	23f5c28 <_ZN7FatFile5closeEv>
  while (1) {
 23f5e5a:	e7e1      	b.n	23f5e20 <_ZN7FatFile5mkdirEPS_PKcb+0x42>
      if (!pFlag || !mkdir(parent, &fname)) {
 23f5e5c:	2f00      	cmp	r7, #0
 23f5e5e:	d0c8      	beq.n	23f5df2 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
 23f5e60:	4621      	mov	r1, r4
 23f5e62:	4630      	mov	r0, r6
 23f5e64:	aa03      	add	r2, sp, #12
 23f5e66:	f7ff ff43 	bl	23f5cf0 <_ZN7FatFile5mkdirEPS_P7fname_t>
 23f5e6a:	2800      	cmp	r0, #0
 23f5e6c:	d1ea      	bne.n	23f5e44 <_ZN7FatFile5mkdirEPS_PKcb+0x66>
 23f5e6e:	e7c0      	b.n	23f5df2 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
  return mkdir(parent, &fname);
 23f5e70:	4621      	mov	r1, r4
 23f5e72:	4630      	mov	r0, r6
 23f5e74:	aa03      	add	r2, sp, #12
 23f5e76:	f7ff ff3b 	bl	23f5cf0 <_ZN7FatFile5mkdirEPS_P7fname_t>
 23f5e7a:	e7bb      	b.n	23f5df4 <_ZN7FatFile5mkdirEPS_PKcb+0x16>

023f5e7c <_ZN7FatFile6renameEPS_PKc>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
 23f5e7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 23f5e80:	f04f 0900 	mov.w	r9, #0
  if (!(isFile() || isSubDir())) {
 23f5e84:	7803      	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
 23f5e86:	b09b      	sub	sp, #108	; 0x6c
  if (!(isFile() || isSubDir())) {
 23f5e88:	f013 0f18 	tst.w	r3, #24
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
 23f5e8c:	4604      	mov	r4, r0
 23f5e8e:	460f      	mov	r7, r1
 23f5e90:	4690      	mov	r8, r2
 23f5e92:	f8cd 9020 	str.w	r9, [sp, #32]
 23f5e96:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  if (!(isFile() || isSubDir())) {
 23f5e9a:	d103      	bne.n	23f5ea4 <_ZN7FatFile6renameEPS_PKc+0x28>
  return false;
 23f5e9c:	2000      	movs	r0, #0
}
 23f5e9e:	b01b      	add	sp, #108	; 0x6c
 23f5ea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (m_vol != dirFile->m_vol) {
 23f5ea4:	6882      	ldr	r2, [r0, #8]
 23f5ea6:	688b      	ldr	r3, [r1, #8]
 23f5ea8:	429a      	cmp	r2, r3
 23f5eaa:	d1f7      	bne.n	23f5e9c <_ZN7FatFile6renameEPS_PKc+0x20>
  oldFile = *this;
 23f5eac:	4626      	mov	r6, r4
 23f5eae:	ad11      	add	r5, sp, #68	; 0x44
  sync();
 23f5eb0:	f7ff fe84 	bl	23f5bbc <_ZN7FatFile4syncEv>
  oldFile = *this;
 23f5eb4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 23f5eb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f5eb8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 23f5eba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f5ebc:	6833      	ldr	r3, [r6, #0]
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
 23f5ebe:	4649      	mov	r1, r9
 23f5ec0:	4620      	mov	r0, r4
  oldFile = *this;
 23f5ec2:	602b      	str	r3, [r5, #0]
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
 23f5ec4:	f7ff fcd8 	bl	23f5878 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
 23f5ec8:	2800      	cmp	r0, #0
 23f5eca:	d0e7      	beq.n	23f5e9c <_ZN7FatFile6renameEPS_PKc+0x20>
  memcpy(&entry, dir, sizeof(entry));
 23f5ecc:	466a      	mov	r2, sp
 23f5ece:	4603      	mov	r3, r0
 23f5ed0:	4615      	mov	r5, r2
 23f5ed2:	f100 0c20 	add.w	ip, r0, #32
 23f5ed6:	4616      	mov	r6, r2
 23f5ed8:	6818      	ldr	r0, [r3, #0]
 23f5eda:	6859      	ldr	r1, [r3, #4]
 23f5edc:	3308      	adds	r3, #8
 23f5ede:	c603      	stmia	r6!, {r0, r1}
 23f5ee0:	4563      	cmp	r3, ip
 23f5ee2:	4632      	mov	r2, r6
 23f5ee4:	d1f7      	bne.n	23f5ed6 <_ZN7FatFile6renameEPS_PKc+0x5a>
  if (isFile()) {
 23f5ee6:	7823      	ldrb	r3, [r4, #0]
 23f5ee8:	ae08      	add	r6, sp, #32
 23f5eea:	f013 0308 	ands.w	r3, r3, #8
 23f5eee:	d00a      	beq.n	23f5f06 <_ZN7FatFile6renameEPS_PKc+0x8a>
    if (!file.open(dirFile, newPath, O_WRONLY | O_CREAT | O_EXCL)) {
 23f5ef0:	f640 2301 	movw	r3, #2561	; 0xa01
 23f5ef4:	4642      	mov	r2, r8
 23f5ef6:	4639      	mov	r1, r7
 23f5ef8:	4630      	mov	r0, r6
 23f5efa:	f7ff fe9c 	bl	23f5c36 <_ZN7FatFile4openEPS_PKci>
 23f5efe:	2800      	cmp	r0, #0
 23f5f00:	d0cc      	beq.n	23f5e9c <_ZN7FatFile6renameEPS_PKc+0x20>
  uint32_t dirCluster = 0;
 23f5f02:	2700      	movs	r7, #0
 23f5f04:	e007      	b.n	23f5f16 <_ZN7FatFile6renameEPS_PKc+0x9a>
    if (!file.mkdir(dirFile, newPath, false)) {
 23f5f06:	4642      	mov	r2, r8
 23f5f08:	4639      	mov	r1, r7
 23f5f0a:	4630      	mov	r0, r6
 23f5f0c:	f7ff ff67 	bl	23f5dde <_ZN7FatFile5mkdirEPS_PKcb>
 23f5f10:	2800      	cmp	r0, #0
 23f5f12:	d0c3      	beq.n	23f5e9c <_ZN7FatFile6renameEPS_PKc+0x20>
    dirCluster = file.m_firstCluster;
 23f5f14:	9f10      	ldr	r7, [sp, #64]	; 0x40
  m_dirBlock = file.m_dirBlock;
 23f5f16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 23f5f18:	2101      	movs	r1, #1
  m_dirBlock = file.m_dirBlock;
 23f5f1a:	61a3      	str	r3, [r4, #24]
  m_dirIndex = file.m_dirIndex;
 23f5f1c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 23f5f20:	4620      	mov	r0, r4
  m_dirIndex = file.m_dirIndex;
 23f5f22:	80a3      	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
 23f5f24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 23f5f28:	70e3      	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
 23f5f2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f5f2c:	60e3      	str	r3, [r4, #12]
  file.m_attr = FILE_ATTR_CLOSED;
 23f5f2e:	2300      	movs	r3, #0
 23f5f30:	f88d 3020 	strb.w	r3, [sp, #32]
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 23f5f34:	f7ff fca0 	bl	23f5878 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
 23f5f38:	2800      	cmp	r0, #0
 23f5f3a:	d0af      	beq.n	23f5e9c <_ZN7FatFile6renameEPS_PKc+0x20>
  memcpy(&dir->creationTimeTenths, &entry.creationTimeTenths,
 23f5f3c:	f10d 030d 	add.w	r3, sp, #13
 23f5f40:	f100 020d 	add.w	r2, r0, #13
 23f5f44:	f10d 011d 	add.w	r1, sp, #29
 23f5f48:	f853 cb04 	ldr.w	ip, [r3], #4
 23f5f4c:	428b      	cmp	r3, r1
 23f5f4e:	f842 cb04 	str.w	ip, [r2], #4
 23f5f52:	d1f9      	bne.n	23f5f48 <_ZN7FatFile6renameEPS_PKc+0xcc>
 23f5f54:	8819      	ldrh	r1, [r3, #0]
 23f5f56:	8011      	strh	r1, [r2, #0]
 23f5f58:	789b      	ldrb	r3, [r3, #2]
 23f5f5a:	7093      	strb	r3, [r2, #2]
  dir->attributes = entry.attributes;
 23f5f5c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23f5f60:	72c3      	strb	r3, [r0, #11]
  if (dirCluster) {
 23f5f62:	2f00      	cmp	r7, #0
 23f5f64:	d038      	beq.n	23f5fd8 <_ZN7FatFile6renameEPS_PKc+0x15c>
    uint32_t block = m_vol->clusterFirstBlock(dirCluster);
 23f5f66:	4639      	mov	r1, r7
 23f5f68:	68a0      	ldr	r0, [r4, #8]
 23f5f6a:	f000 fcf0 	bl	23f694e <_ZNK9FatVolume17clusterFirstBlockEm>
 23f5f6e:	4601      	mov	r1, r0
 23f5f70:	68a0      	ldr	r0, [r4, #8]
 23f5f72:	2200      	movs	r2, #0
 23f5f74:	3024      	adds	r0, #36	; 0x24
 23f5f76:	f000 fcc7 	bl	23f6908 <_ZN8FatCache4readEmh>
    if (!pc) {
 23f5f7a:	2800      	cmp	r0, #0
 23f5f7c:	d08e      	beq.n	23f5e9c <_ZN7FatFile6renameEPS_PKc+0x20>
    memcpy(&entry, &pc->dir[1], sizeof(entry));
 23f5f7e:	46ae      	mov	lr, r5
 23f5f80:	f100 0220 	add.w	r2, r0, #32
 23f5f84:	f100 0340 	add.w	r3, r0, #64	; 0x40
 23f5f88:	46f4      	mov	ip, lr
 23f5f8a:	6810      	ldr	r0, [r2, #0]
 23f5f8c:	6851      	ldr	r1, [r2, #4]
 23f5f8e:	3208      	adds	r2, #8
 23f5f90:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 23f5f94:	429a      	cmp	r2, r3
 23f5f96:	46e6      	mov	lr, ip
 23f5f98:	d1f6      	bne.n	23f5f88 <_ZN7FatFile6renameEPS_PKc+0x10c>
    if (!m_vol->freeChain(dirCluster)) {
 23f5f9a:	4639      	mov	r1, r7
 23f5f9c:	68a0      	ldr	r0, [r4, #8]
 23f5f9e:	f000 fd7c 	bl	23f6a9a <_ZN9FatVolume9freeChainEm>
 23f5fa2:	2800      	cmp	r0, #0
 23f5fa4:	f43f af7a 	beq.w	23f5e9c <_ZN7FatFile6renameEPS_PKc+0x20>
    block = m_vol->clusterFirstBlock(m_firstCluster);
 23f5fa8:	6a21      	ldr	r1, [r4, #32]
 23f5faa:	68a0      	ldr	r0, [r4, #8]
 23f5fac:	f000 fccf 	bl	23f694e <_ZNK9FatVolume17clusterFirstBlockEm>
 23f5fb0:	4601      	mov	r1, r0
 23f5fb2:	68a0      	ldr	r0, [r4, #8]
 23f5fb4:	2201      	movs	r2, #1
 23f5fb6:	3024      	adds	r0, #36	; 0x24
 23f5fb8:	f000 fca6 	bl	23f6908 <_ZN8FatCache4readEmh>
    if (!pc) {
 23f5fbc:	2800      	cmp	r0, #0
 23f5fbe:	f43f af6d 	beq.w	23f5e9c <_ZN7FatFile6renameEPS_PKc+0x20>
    memcpy(&pc->dir[1], &entry, sizeof(entry));
 23f5fc2:	f100 0320 	add.w	r3, r0, #32
 23f5fc6:	462a      	mov	r2, r5
 23f5fc8:	ca03      	ldmia	r2!, {r0, r1}
 23f5fca:	42b2      	cmp	r2, r6
 23f5fcc:	6018      	str	r0, [r3, #0]
 23f5fce:	6059      	str	r1, [r3, #4]
 23f5fd0:	4615      	mov	r5, r2
 23f5fd2:	f103 0308 	add.w	r3, r3, #8
 23f5fd6:	d1f6      	bne.n	23f5fc6 <_ZN7FatFile6renameEPS_PKc+0x14a>
  oldFile.m_firstCluster = 0;
 23f5fd8:	2300      	movs	r3, #0
 23f5fda:	9319      	str	r3, [sp, #100]	; 0x64
  oldFile.m_flags = F_WRITE;
 23f5fdc:	2302      	movs	r3, #2
 23f5fde:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
  oldFile.m_attr = FILE_ATTR_FILE;
 23f5fe2:	2308      	movs	r3, #8
  if (!oldFile.remove()) {
 23f5fe4:	a811      	add	r0, sp, #68	; 0x44
  oldFile.m_attr = FILE_ATTR_FILE;
 23f5fe6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
 23f5fea:	f000 f9e5 	bl	23f63b8 <_ZN7FatFile6removeEv>
 23f5fee:	2800      	cmp	r0, #0
 23f5ff0:	f43f af54 	beq.w	23f5e9c <_ZN7FatFile6renameEPS_PKc+0x20>
  return m_vol->cacheSync();
 23f5ff4:	68a0      	ldr	r0, [r4, #8]
 23f5ff6:	f7ff fbe9 	bl	23f57cc <_ZN9FatVolume9cacheSyncEv>
 23f5ffa:	e750      	b.n	23f5e9e <_ZN7FatFile6renameEPS_PKc+0x22>

023f5ffc <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 23f5ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 23f6000:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
 23f6002:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
 23f6004:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
 23f6006:	4604      	mov	r4, r0
 23f6008:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
 23f600a:	d55b      	bpl.n	23f60c4 <_ZN7FatFile5writeEPKvj+0xc8>
 23f600c:	7883      	ldrb	r3, [r0, #2]
 23f600e:	079a      	lsls	r2, r3, #30
 23f6010:	d558      	bpl.n	23f60c4 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
 23f6012:	071b      	lsls	r3, r3, #28
 23f6014:	d451      	bmi.n	23f60ba <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 23f6016:	6963      	ldr	r3, [r4, #20]
 23f6018:	43db      	mvns	r3, r3
 23f601a:	42bb      	cmp	r3, r7
 23f601c:	d352      	bcc.n	23f60c4 <_ZN7FatFile5writeEPKvj+0xc8>
 23f601e:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f6020:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 23f6024:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
 23f6026:	f1b8 0f00 	cmp.w	r8, #0
 23f602a:	f000 8091 	beq.w	23f6150 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 23f602e:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 23f6030:	f3c6 0508 	ubfx	r5, r6, #0, #9
    return (position >> 9) & m_clusterBlockMask;
 23f6034:	7943      	ldrb	r3, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 23f6036:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
 23f603a:	d10e      	bne.n	23f605a <_ZN7FatFile5writeEPKvj+0x5e>
 23f603c:	b96d      	cbnz	r5, 23f605a <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
 23f603e:	6921      	ldr	r1, [r4, #16]
 23f6040:	2900      	cmp	r1, #0
 23f6042:	d046      	beq.n	23f60d2 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f6044:	4652      	mov	r2, sl
 23f6046:	f000 fc88 	bl	23f695a <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 23f604a:	2800      	cmp	r0, #0
 23f604c:	db3a      	blt.n	23f60c4 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 23f604e:	d104      	bne.n	23f605a <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
 23f6050:	4620      	mov	r0, r4
 23f6052:	f7ff fbc8 	bl	23f57e6 <_ZN7FatFile10addClusterEv>
 23f6056:	2800      	cmp	r0, #0
 23f6058:	d034      	beq.n	23f60c4 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 23f605a:	6921      	ldr	r1, [r4, #16]
 23f605c:	68a0      	ldr	r0, [r4, #8]
 23f605e:	f000 fc76 	bl	23f694e <_ZNK9FatVolume17clusterFirstBlockEm>
 23f6062:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
 23f6064:	68a0      	ldr	r0, [r4, #8]
 23f6066:	b915      	cbnz	r5, 23f606e <_ZN7FatFile5writeEPKvj+0x72>
 23f6068:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 23f606c:	d23f      	bcs.n	23f60ee <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 23f606e:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
 23f6072:	4546      	cmp	r6, r8
 23f6074:	bf28      	it	cs
 23f6076:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 23f6078:	2d00      	cmp	r5, #0
 23f607a:	d136      	bne.n	23f60ea <_ZN7FatFile5writeEPKvj+0xee>
 23f607c:	6962      	ldr	r2, [r4, #20]
 23f607e:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 23f6080:	429a      	cmp	r2, r3
 23f6082:	bf34      	ite	cc
 23f6084:	2201      	movcc	r2, #1
 23f6086:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
 23f6088:	3024      	adds	r0, #36	; 0x24
 23f608a:	f000 fc3d 	bl	23f6908 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 23f608e:	b1c8      	cbz	r0, 23f60c4 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 23f6090:	4428      	add	r0, r5
 23f6092:	4632      	mov	r2, r6
 23f6094:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 23f6096:	4435      	add	r5, r6
      memcpy(dst, src, n);
 23f6098:	f006 fec8 	bl	23fce2c <memcpy>
      if (512 == (n + blockOffset)) {
 23f609c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 23f60a0:	d104      	bne.n	23f60ac <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
 23f60a2:	68a0      	ldr	r0, [r4, #8]
 23f60a4:	3024      	adds	r0, #36	; 0x24
 23f60a6:	f000 fc07 	bl	23f68b8 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
 23f60aa:	b158      	cbz	r0, 23f60c4 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 23f60ac:	6963      	ldr	r3, [r4, #20]
    src += n;
 23f60ae:	44b1      	add	r9, r6
    m_curPosition += n;
 23f60b0:	4433      	add	r3, r6
 23f60b2:	6163      	str	r3, [r4, #20]
    nToWrite -= n;
 23f60b4:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
 23f60b8:	e7b4      	b.n	23f6024 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
 23f60ba:	69c1      	ldr	r1, [r0, #28]
 23f60bc:	f7ff fcd1 	bl	23f5a62 <_ZN7FatFile7seekSetEm>
 23f60c0:	2800      	cmp	r0, #0
 23f60c2:	d1a8      	bne.n	23f6016 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 23f60c4:	7863      	ldrb	r3, [r4, #1]
  return -1;
 23f60c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  m_error |= WRITE_ERROR;
 23f60ca:	f043 0301 	orr.w	r3, r3, #1
 23f60ce:	7063      	strb	r3, [r4, #1]
  return -1;
 23f60d0:	e050      	b.n	23f6174 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
 23f60d2:	6a23      	ldr	r3, [r4, #32]
 23f60d4:	b93b      	cbnz	r3, 23f60e6 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
 23f60d6:	4620      	mov	r0, r4
 23f60d8:	f7ff fb85 	bl	23f57e6 <_ZN7FatFile10addClusterEv>
 23f60dc:	2800      	cmp	r0, #0
 23f60de:	d0f1      	beq.n	23f60c4 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
 23f60e0:	6923      	ldr	r3, [r4, #16]
 23f60e2:	6223      	str	r3, [r4, #32]
 23f60e4:	e7b9      	b.n	23f605a <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
 23f60e6:	6123      	str	r3, [r4, #16]
 23f60e8:	e7b7      	b.n	23f605a <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
 23f60ea:	2201      	movs	r2, #1
 23f60ec:	e7cc      	b.n	23f6088 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
 23f60ee:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
 23f60f2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 23f60f4:	d31b      	bcc.n	23f612e <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 23f60f6:	f890 c004 	ldrb.w	ip, [r0, #4]
      size_t nb = nToWrite >> 9;
 23f60fa:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 23f60fe:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
 23f6102:	b2f3      	uxtb	r3, r6
 23f6104:	4573      	cmp	r3, lr
 23f6106:	bf28      	it	cs
 23f6108:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
 23f610a:	4291      	cmp	r1, r2
      n = 512*nb;
 23f610c:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
 23f6110:	d307      	bcc.n	23f6122 <_ZN7FatFile5writeEPKvj+0x126>
 23f6112:	441a      	add	r2, r3
 23f6114:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
 23f6116:	bf82      	ittt	hi
 23f6118:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
 23f611c:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 23f6120:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
 23f6122:	68a5      	ldr	r5, [r4, #8]
 23f6124:	464a      	mov	r2, r9
 23f6126:	6828      	ldr	r0, [r5, #0]
 23f6128:	f000 ffd3 	bl	23f70d2 <_ZN9SdSpiCard11writeBlocksEmPKhj>
 23f612c:	e7bd      	b.n	23f60aa <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
 23f612e:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
 23f6130:	bf02      	ittt	eq
 23f6132:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
 23f6136:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 23f613a:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
 23f613c:	68a3      	ldr	r3, [r4, #8]
 23f613e:	464a      	mov	r2, r9
 23f6140:	6818      	ldr	r0, [r3, #0]
 23f6142:	f000 ff50 	bl	23f6fe6 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
 23f6146:	2800      	cmp	r0, #0
 23f6148:	d0bc      	beq.n	23f60c4 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
 23f614a:	f44f 7600 	mov.w	r6, #512	; 0x200
 23f614e:	e7ad      	b.n	23f60ac <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
 23f6150:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
 23f6152:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
 23f6154:	42b2      	cmp	r2, r6
 23f6156:	d204      	bcs.n	23f6162 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
 23f6158:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
 23f615a:	f043 0304 	orr.w	r3, r3, #4
 23f615e:	70a3      	strb	r3, [r4, #2]
 23f6160:	e003      	b.n	23f616a <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
 23f6162:	4a08      	ldr	r2, [pc, #32]	; (23f6184 <_ZN7FatFile5writeEPKvj+0x188>)
 23f6164:	6812      	ldr	r2, [r2, #0]
 23f6166:	2a00      	cmp	r2, #0
 23f6168:	d1f7      	bne.n	23f615a <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
 23f616a:	f994 3002 	ldrsb.w	r3, [r4, #2]
 23f616e:	2b00      	cmp	r3, #0
 23f6170:	db02      	blt.n	23f6178 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
 23f6172:	4638      	mov	r0, r7
}
 23f6174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
 23f6178:	4620      	mov	r0, r4
 23f617a:	f7ff fd1f 	bl	23f5bbc <_ZN7FatFile4syncEv>
 23f617e:	2800      	cmp	r0, #0
 23f6180:	d1f7      	bne.n	23f6172 <_ZN7FatFile5writeEPKvj+0x176>
 23f6182:	e79f      	b.n	23f60c4 <_ZN7FatFile5writeEPKvj+0xc8>
 23f6184:	1007aea4 	.word	0x1007aea4

023f6188 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
 23f6188:	2904      	cmp	r1, #4
 23f618a:	d804      	bhi.n	23f6196 <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
 23f618c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 23f6190:	f8b0 0001 	ldrh.w	r0, [r0, #1]
 23f6194:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 23f6196:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 23f6198:	bf9b      	ittet	ls
 23f619a:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
 23f619e:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 23f61a2:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
 23f61a4:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 23f61a6:	bf84      	itt	hi
 23f61a8:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 23f61ac:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
 23f61ae:	4770      	bx	lr

023f61b0 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
 23f61b0:	1e41      	subs	r1, r0, #1
 23f61b2:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
 23f61b6:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 23f61b8:	0842      	lsrs	r2, r0, #1
 23f61ba:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
 23f61be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23f61c2:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
 23f61c6:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 23f61c8:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
 23f61ca:	d1f5      	bne.n	23f61b8 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
 23f61cc:	4770      	bx	lr

023f61ce <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
 23f61ce:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
 23f61d0:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
 23f61d2:	4604      	mov	r4, r0
 23f61d4:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
 23f61d6:	b923      	cbnz	r3, 23f61e2 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
 23f61d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
 23f61dc:	6889      	ldr	r1, [r1, #8]
 23f61de:	f7ff bb5a 	b.w	23f5896 <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
 23f61e2:	2224      	movs	r2, #36	; 0x24
 23f61e4:	2100      	movs	r1, #0
 23f61e6:	f006 fe2e 	bl	23fce46 <memset>
  m_attr = FILE_ATTR_SUBDIR;
 23f61ea:	2310      	movs	r3, #16
  m_flags = F_READ;
 23f61ec:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
 23f61ee:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
 23f61f0:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
 23f61f2:	68ab      	ldr	r3, [r5, #8]
 23f61f4:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
 23f61f6:	68eb      	ldr	r3, [r5, #12]
 23f61f8:	6223      	str	r3, [r4, #32]
}
 23f61fa:	bd38      	pop	{r3, r4, r5, pc}

023f61fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 23f61fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f6200:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 23f6202:	f810 3b01 	ldrb.w	r3, [r0], #1
 23f6206:	2b20      	cmp	r3, #32
 23f6208:	d0fa      	beq.n	23f6200 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
 23f620a:	2400      	movs	r4, #0
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 23f620c:	4d69      	ldr	r5, [pc, #420]	; (23f63b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
  fname->lfn = path;
 23f620e:	608e      	str	r6, [r1, #8]
    c = path[len];
 23f6210:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
 23f6212:	b1c3      	cbz	r3, 23f6246 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
 23f6214:	2b2f      	cmp	r3, #47	; 0x2f
 23f6216:	d016      	beq.n	23f6246 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 23f6218:	2b5c      	cmp	r3, #92	; 0x5c
 23f621a:	d102      	bne.n	23f6222 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 23f621c:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
 23f621e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 23f6222:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
 23f6226:	b2c0      	uxtb	r0, r0
 23f6228:	281d      	cmp	r0, #29
 23f622a:	d803      	bhi.n	23f6234 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
 23f622c:	fa25 f000 	lsr.w	r0, r5, r0
 23f6230:	07c0      	lsls	r0, r0, #31
 23f6232:	d4f3      	bmi.n	23f621c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 23f6234:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
 23f6238:	283c      	cmp	r0, #60	; 0x3c
 23f623a:	d0ef      	beq.n	23f621c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
 23f623c:	3b20      	subs	r3, #32
 23f623e:	2b5e      	cmp	r3, #94	; 0x5e
 23f6240:	d8ec      	bhi.n	23f621c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
 23f6242:	3401      	adds	r4, #1
    c = path[len];
 23f6244:	e7e4      	b.n	23f6210 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
 23f6246:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
 23f6248:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 23f624a:	4607      	mov	r7, r0
 23f624c:	f810 5b01 	ldrb.w	r5, [r0], #1
 23f6250:	2d20      	cmp	r5, #32
 23f6252:	d0fa      	beq.n	23f624a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
 23f6254:	2d2f      	cmp	r5, #47	; 0x2f
 23f6256:	d0f8      	beq.n	23f624a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
 23f6258:	6017      	str	r7, [r2, #0]
  while (len) {
 23f625a:	b14c      	cbz	r4, 23f6270 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
 23f625c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 23f6260:	2a2e      	cmp	r2, #46	; 0x2e
 23f6262:	d001      	beq.n	23f6268 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
 23f6264:	2a20      	cmp	r2, #32
 23f6266:	d101      	bne.n	23f626c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
 23f6268:	3c01      	subs	r4, #1
  while (len) {
 23f626a:	e7f6      	b.n	23f625a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
 23f626c:	2cff      	cmp	r4, #255	; 0xff
 23f626e:	dcd5      	bgt.n	23f621c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
 23f6270:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 23f6274:	f04f 0800 	mov.w	r8, #0
    fname->sfn[k] = ' ';
 23f6278:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
 23f627c:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
 23f627e:	f8c1 300d 	str.w	r3, [r1, #13]
 23f6282:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 23f6284:	f816 3008 	ldrb.w	r3, [r6, r8]
 23f6288:	2b2e      	cmp	r3, #46	; 0x2e
 23f628a:	d001      	beq.n	23f6290 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
 23f628c:	2b20      	cmp	r3, #32
 23f628e:	d102      	bne.n	23f6296 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
 23f6290:	f108 0801 	add.w	r8, r8, #1
 23f6294:	e7f6      	b.n	23f6284 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
 23f6296:	fab8 f088 	clz	r0, r8
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 23f629a:	1e65      	subs	r5, r4, #1
  is83 = !si;
 23f629c:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 23f629e:	1c6b      	adds	r3, r5, #1
 23f62a0:	d002      	beq.n	23f62a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
 23f62a2:	5d73      	ldrb	r3, [r6, r5]
 23f62a4:	2b2e      	cmp	r3, #46	; 0x2e
 23f62a6:	d114      	bne.n	23f62d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 23f62a8:	f04f 0900 	mov.w	r9, #0
 23f62ac:	2707      	movs	r7, #7
 23f62ae:	464a      	mov	r2, r9
 23f62b0:	46ca      	mov	sl, r9
 23f62b2:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
 23f62b6:	45a0      	cmp	r8, r4
 23f62b8:	da68      	bge.n	23f638c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
 23f62ba:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
 23f62be:	2b20      	cmp	r3, #32
 23f62c0:	d003      	beq.n	23f62ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
 23f62c2:	2b2e      	cmp	r3, #46	; 0x2e
 23f62c4:	d107      	bne.n	23f62d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
 23f62c6:	45a8      	cmp	r8, r5
 23f62c8:	d012      	beq.n	23f62f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
 23f62ca:	2000      	movs	r0, #0
  for (; si < len; si++) {
 23f62cc:	f108 0801 	add.w	r8, r8, #1
 23f62d0:	e7f1      	b.n	23f62b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 23f62d2:	3d01      	subs	r5, #1
 23f62d4:	e7e3      	b.n	23f629e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
 23f62d6:	2b22      	cmp	r3, #34	; 0x22
 23f62d8:	d008      	beq.n	23f62ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
 23f62da:	2b7c      	cmp	r3, #124	; 0x7c
 23f62dc:	d006      	beq.n	23f62ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 23f62de:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 23f62e2:	f1bc 0f05 	cmp.w	ip, #5
 23f62e6:	d80a      	bhi.n	23f62fe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
 23f62e8:	2b2d      	cmp	r3, #45	; 0x2d
 23f62ea:	d012      	beq.n	23f6312 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
 23f62ec:	45a8      	cmp	r8, r5
 23f62ee:	d15b      	bne.n	23f63a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
 23f62f0:	2f0a      	cmp	r7, #10
 23f62f2:	d04a      	beq.n	23f638a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
 23f62f4:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
 23f62f6:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 23f62f8:	f04f 0e10 	mov.w	lr, #16
 23f62fc:	e7e6      	b.n	23f62cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
 23f62fe:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 23f6302:	f1bc 0f05 	cmp.w	ip, #5
 23f6306:	d9f1      	bls.n	23f62ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
 23f6308:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 23f630c:	f1bc 0f02 	cmp.w	ip, #2
 23f6310:	d9ec      	bls.n	23f62ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
 23f6312:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 23f6316:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 23f631a:	d8e7      	bhi.n	23f62ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
 23f631c:	45a8      	cmp	r8, r5
 23f631e:	d0e7      	beq.n	23f62f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
 23f6320:	42ba      	cmp	r2, r7
 23f6322:	d830      	bhi.n	23f6386 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
 23f6324:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 23f6328:	f1bc 0f19 	cmp.w	ip, #25
 23f632c:	d81a      	bhi.n	23f6364 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
 23f632e:	3b20      	subs	r3, #32
        lc |= bit;
 23f6330:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
 23f6334:	b2db      	uxtb	r3, r3
        lc |= bit;
 23f6336:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
 23f633a:	f102 0c01 	add.w	ip, r2, #1
 23f633e:	fa5f fc8c 	uxtb.w	ip, ip
 23f6342:	440a      	add	r2, r1
      if (i < 7) {
 23f6344:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
 23f6348:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
 23f634a:	d801      	bhi.n	23f6350 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
 23f634c:	f881 c00c 	strb.w	ip, [r1, #12]
 23f6350:	4662      	mov	r2, ip
 23f6352:	e7bb      	b.n	23f62cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
 23f6354:	45a8      	cmp	r8, r5
 23f6356:	dc18      	bgt.n	23f638a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
 23f6358:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
 23f635a:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
 23f635c:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 23f635e:	f04f 0e10 	mov.w	lr, #16
 23f6362:	e7b2      	b.n	23f62ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
 23f6364:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 23f6368:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 23f636c:	bf98      	it	ls
 23f636e:	ea4e 0a0a 	orrls.w	sl, lr, sl
 23f6372:	e7e2      	b.n	23f633a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->flags = FNAME_FLAG_LOST_CHARS;
 23f6374:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
 23f6376:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
 23f6378:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 23f637a:	4419      	add	r1, r3
 23f637c:	237e      	movs	r3, #126	; 0x7e
 23f637e:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 23f6380:	2331      	movs	r3, #49	; 0x31
 23f6382:	738b      	strb	r3, [r1, #14]
 23f6384:	e74b      	b.n	23f621e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
 23f6386:	2f0a      	cmp	r7, #10
 23f6388:	d1e4      	bne.n	23f6354 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
 23f638a:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
 23f638c:	7b4b      	ldrb	r3, [r1, #13]
 23f638e:	2b20      	cmp	r3, #32
 23f6390:	f43f af44 	beq.w	23f621c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
 23f6394:	2800      	cmp	r0, #0
 23f6396:	d0ed      	beq.n	23f6374 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 23f6398:	ea1a 0f09 	tst.w	sl, r9
 23f639c:	bf18      	it	ne
 23f639e:	f04f 0902 	movne.w	r9, #2
 23f63a2:	f881 9000 	strb.w	r9, [r1]
 23f63a6:	e73a      	b.n	23f621e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
 23f63a8:	42ba      	cmp	r2, r7
 23f63aa:	d8ec      	bhi.n	23f6386 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
 23f63ac:	2000      	movs	r0, #0
      c = '_';
 23f63ae:	235f      	movs	r3, #95	; 0x5f
 23f63b0:	e7c3      	b.n	23f633a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
 23f63b2:	bf00      	nop
 23f63b4:	31000101 	.word	0x31000101

023f63b8 <_ZN7FatFile6removeEv>:
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 23f63b8:	2300      	movs	r3, #0

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
 23f63ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f63be:	b08a      	sub	sp, #40	; 0x28
 23f63c0:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
 23f63c2:	7803      	ldrb	r3, [r0, #0]
bool FatFile::remove() {
 23f63c4:	4604      	mov	r4, r0
  if (!isFile() || !(m_flags & F_WRITE)) {
 23f63c6:	0719      	lsls	r1, r3, #28
 23f63c8:	d50a      	bpl.n	23f63e0 <_ZN7FatFile6removeEv+0x28>
 23f63ca:	7883      	ldrb	r3, [r0, #2]
 23f63cc:	079a      	lsls	r2, r3, #30
 23f63ce:	d507      	bpl.n	23f63e0 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
 23f63d0:	6a01      	ldr	r1, [r0, #32]
 23f63d2:	b939      	cbnz	r1, 23f63e4 <_ZN7FatFile6removeEv+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 23f63d4:	2101      	movs	r1, #1
 23f63d6:	4620      	mov	r0, r4
 23f63d8:	f7ff fa4e 	bl	23f5878 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
 23f63dc:	4605      	mov	r5, r0
 23f63de:	b938      	cbnz	r0, 23f63f0 <_ZN7FatFile6removeEv+0x38>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
 23f63e0:	2000      	movs	r0, #0
 23f63e2:	e047      	b.n	23f6474 <_ZN7FatFile6removeEv+0xbc>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
 23f63e4:	6880      	ldr	r0, [r0, #8]
 23f63e6:	f000 fb58 	bl	23f6a9a <_ZN9FatVolume9freeChainEm>
 23f63ea:	2800      	cmp	r0, #0
 23f63ec:	d1f2      	bne.n	23f63d4 <_ZN7FatFile6removeEv+0x1c>
 23f63ee:	e7f7      	b.n	23f63e0 <_ZN7FatFile6removeEv+0x28>
  dir->name[0] = DIR_NAME_DELETED;
 23f63f0:	27e5      	movs	r7, #229	; 0xe5
  chksum = lfnChecksum(dir->name);
 23f63f2:	f7ff fedd 	bl	23f61b0 <_ZN7FatFile11lfnChecksumEPh>
  m_attr = FILE_ATTR_CLOSED;
 23f63f6:	2300      	movs	r3, #0
  dir->name[0] = DIR_NAME_DELETED;
 23f63f8:	702f      	strb	r7, [r5, #0]
  chksum = lfnChecksum(dir->name);
 23f63fa:	4606      	mov	r6, r0
  m_attr = FILE_ATTR_CLOSED;
 23f63fc:	7023      	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
 23f63fe:	68a0      	ldr	r0, [r4, #8]
 23f6400:	f7ff f9e4 	bl	23f57cc <_ZN9FatVolume9cacheSyncEv>
 23f6404:	2800      	cmp	r0, #0
 23f6406:	d0eb      	beq.n	23f63e0 <_ZN7FatFile6removeEv+0x28>
  if (!isLFN()) {
 23f6408:	78e3      	ldrb	r3, [r4, #3]
 23f640a:	2b00      	cmp	r3, #0
 23f640c:	d032      	beq.n	23f6474 <_ZN7FatFile6removeEv+0xbc>
  if (!dirFile.openCluster(this)) {
 23f640e:	4621      	mov	r1, r4
 23f6410:	a801      	add	r0, sp, #4
 23f6412:	f7ff fedc 	bl	23f61ce <_ZN7FatFile11openClusterEPS_>
 23f6416:	2800      	cmp	r0, #0
 23f6418:	d0e2      	beq.n	23f63e0 <_ZN7FatFile6removeEv+0x28>
 23f641a:	2501      	movs	r5, #1
  for (ord = 1; ord <= m_lfnOrd; ord++) {
 23f641c:	78e3      	ldrb	r3, [r4, #3]
 23f641e:	fa5f f885 	uxtb.w	r8, r5
 23f6422:	4543      	cmp	r3, r8
 23f6424:	d3dc      	bcc.n	23f63e0 <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
 23f6426:	88a1      	ldrh	r1, [r4, #4]
 23f6428:	a801      	add	r0, sp, #4
 23f642a:	1b49      	subs	r1, r1, r5
 23f642c:	0149      	lsls	r1, r1, #5
 23f642e:	f7ff fb18 	bl	23f5a62 <_ZN7FatFile7seekSetEm>
 23f6432:	2800      	cmp	r0, #0
 23f6434:	d0d4      	beq.n	23f63e0 <_ZN7FatFile6removeEv+0x28>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
 23f6436:	2100      	movs	r1, #0
 23f6438:	a801      	add	r0, sp, #4
 23f643a:	f7ff faf3 	bl	23f5a24 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 23f643e:	2800      	cmp	r0, #0
 23f6440:	d0ce      	beq.n	23f63e0 <_ZN7FatFile6removeEv+0x28>
    if (ldir->attr != DIR_ATT_LONG_NAME ||
 23f6442:	7ac3      	ldrb	r3, [r0, #11]
 23f6444:	2b0f      	cmp	r3, #15
 23f6446:	d1cb      	bne.n	23f63e0 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
 23f6448:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attr != DIR_ATT_LONG_NAME ||
 23f644a:	f002 031f 	and.w	r3, r2, #31
 23f644e:	4543      	cmp	r3, r8
 23f6450:	d1c6      	bne.n	23f63e0 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
 23f6452:	7b43      	ldrb	r3, [r0, #13]
 23f6454:	42b3      	cmp	r3, r6
 23f6456:	d1c3      	bne.n	23f63e0 <_ZN7FatFile6removeEv+0x28>
    ldir->ord = DIR_NAME_DELETED;
 23f6458:	7007      	strb	r7, [r0, #0]
    m_vol->cacheDirty();
 23f645a:	68a1      	ldr	r1, [r4, #8]
    if (last) {
 23f645c:	3501      	adds	r5, #1
    m_status |= CACHE_STATUS_DIRTY;
 23f645e:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
 23f6462:	f043 0301 	orr.w	r3, r3, #1
 23f6466:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
 23f646a:	0653      	lsls	r3, r2, #25
 23f646c:	d5d6      	bpl.n	23f641c <_ZN7FatFile6removeEv+0x64>
      if (!m_vol->cacheSync()) {
 23f646e:	68a0      	ldr	r0, [r4, #8]
 23f6470:	f7ff f9ac 	bl	23f57cc <_ZN9FatVolume9cacheSyncEv>
}
 23f6474:	b00a      	add	sp, #40	; 0x28
 23f6476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f647a <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 23f647a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23f647e:	4606      	mov	r6, r0
 23f6480:	460c      	mov	r4, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 23f6482:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 23f6484:	277e      	movs	r7, #126	; 0x7e
  uint8_t pos = fname->seqPos;;
 23f6486:	f891 900c 	ldrb.w	r9, [r1, #12]
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 23f648a:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 23f648e:	6861      	ldr	r1, [r4, #4]
 23f6490:	68a2      	ldr	r2, [r4, #8]
 23f6492:	186b      	adds	r3, r5, r1
 23f6494:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
 23f6496:	4411      	add	r1, r2
 23f6498:	4291      	cmp	r1, r2
 23f649a:	d006      	beq.n	23f64aa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
 23f649c:	f812 0b01 	ldrb.w	r0, [r2], #1
 23f64a0:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 23f64a4:	4043      	eors	r3, r0
 23f64a6:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
 23f64a8:	e7f6      	b.n	23f6498 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
 23f64aa:	f1b9 0f03 	cmp.w	r9, #3
 23f64ae:	bf28      	it	cs
 23f64b0:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 23f64b4:	f109 0204 	add.w	r2, r9, #4
 23f64b8:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 23f64ba:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 23f64be:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 23f64c0:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 23f64c2:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 23f64c4:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 23f64c6:	bf94      	ite	ls
 23f64c8:	3130      	addls	r1, #48	; 0x30
 23f64ca:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 23f64cc:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 23f64ce:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 23f64d0:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 23f64d4:	d1f1      	bne.n	23f64ba <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
 23f64d6:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
 23f64da:	2100      	movs	r1, #0
 23f64dc:	4630      	mov	r0, r6
 23f64de:	735f      	strb	r7, [r3, #13]
 23f64e0:	f7ff fabf 	bl	23f5a62 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
 23f64e4:	2101      	movs	r1, #1
 23f64e6:	4630      	mov	r0, r6
 23f64e8:	f7ff fa9c 	bl	23f5a24 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 23f64ec:	4601      	mov	r1, r0
 23f64ee:	b928      	cbnz	r0, 23f64fc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 23f64f0:	7870      	ldrb	r0, [r6, #1]
 23f64f2:	fab0 f080 	clz	r0, r0
 23f64f6:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
 23f64f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
 23f64fc:	7803      	ldrb	r3, [r0, #0]
 23f64fe:	b16b      	cbz	r3, 23f651c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 23f6500:	7ac3      	ldrb	r3, [r0, #11]
 23f6502:	071b      	lsls	r3, r3, #28
 23f6504:	d4ee      	bmi.n	23f64e4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 23f6506:	220b      	movs	r2, #11
 23f6508:	4640      	mov	r0, r8
 23f650a:	f006 fc7f 	bl	23fce0c <memcmp>
 23f650e:	2800      	cmp	r0, #0
 23f6510:	d1e8      	bne.n	23f64e4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
 23f6512:	3501      	adds	r5, #1
 23f6514:	b2ad      	uxth	r5, r5
 23f6516:	2d64      	cmp	r5, #100	; 0x64
 23f6518:	d1b9      	bne.n	23f648e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
 23f651a:	e7ed      	b.n	23f64f8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
 23f651c:	2001      	movs	r0, #1
 23f651e:	e7eb      	b.n	23f64f8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>

023f6520 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 23f6520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f6524:	ed2d 8b02 	vpush	{d8}
 23f6528:	b08b      	sub	sp, #44	; 0x2c
 23f652a:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
 23f652c:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 23f652e:	460d      	mov	r5, r1
  if (!dirFile->isDir() || isOpen()) {
 23f6530:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 23f6534:	4617      	mov	r7, r2
 23f6536:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
 23f6538:	d105      	bne.n	23f6546 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
 23f653a:	2000      	movs	r0, #0
}
 23f653c:	b00b      	add	sp, #44	; 0x2c
 23f653e:	ecbd 8b02 	vpop	{d8}
 23f6542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
 23f6546:	9b07      	ldr	r3, [sp, #28]
 23f6548:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
 23f654a:	2b00      	cmp	r3, #0
 23f654c:	d1f5      	bne.n	23f653a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
 23f654e:	6853      	ldr	r3, [r2, #4]
  }
 23f6550:	f04f 0b00 	mov.w	fp, #0
 23f6554:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 23f6556:	7813      	ldrb	r3, [r2, #0]
    seekSet(0);
 23f6558:	2100      	movs	r1, #0
 23f655a:	079c      	lsls	r4, r3, #30
 23f655c:	bf1b      	ittet	ne
 23f655e:	220d      	movne	r2, #13
 23f6560:	9b05      	ldrne	r3, [sp, #20]
 23f6562:	2301      	moveq	r3, #1
 23f6564:	330c      	addne	r3, #12
 23f6566:	bf1e      	ittt	ne
 23f6568:	fbb3 f3f2 	udivne	r3, r3, r2
 23f656c:	3301      	addne	r3, #1
 23f656e:	b2db      	uxtbne	r3, r3
 23f6570:	4628      	mov	r0, r5
 23f6572:	9303      	str	r3, [sp, #12]
 23f6574:	f7ff fa75 	bl	23f5a62 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 23f6578:	f107 030d 	add.w	r3, r7, #13
  }
 23f657c:	46da      	mov	sl, fp
 23f657e:	465c      	mov	r4, fp
 23f6580:	465e      	mov	r6, fp
 23f6582:	46d9      	mov	r9, fp
 23f6584:	ee08 3a10 	vmov	s16, r3
 23f6588:	f8cd b010 	str.w	fp, [sp, #16]
    curIndex = dirFile->m_curPosition/32;
 23f658c:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
 23f658e:	2101      	movs	r1, #1
 23f6590:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
 23f6592:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
 23f6596:	f7ff fa45 	bl	23f5a24 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 23f659a:	4603      	mov	r3, r0
 23f659c:	2800      	cmp	r0, #0
 23f659e:	d172      	bne.n	23f6686 <_ZN7FatFile4openEPS_P7fname_ti+0x166>
      if (dirFile->getError()) {
 23f65a0:	786b      	ldrb	r3, [r5, #1]
 23f65a2:	2b00      	cmp	r3, #0
 23f65a4:	d1c9      	bne.n	23f653a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
 23f65a6:	9b06      	ldr	r3, [sp, #24]
 23f65a8:	059a      	lsls	r2, r3, #22
 23f65aa:	d5c6      	bpl.n	23f653a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
 23f65ac:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
 23f65b0:	3b01      	subs	r3, #1
 23f65b2:	2b01      	cmp	r3, #1
 23f65b4:	d8c1      	bhi.n	23f653a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
 23f65b6:	9b04      	ldr	r3, [sp, #16]
 23f65b8:	2c00      	cmp	r4, #0
 23f65ba:	bf08      	it	eq
 23f65bc:	4643      	moveq	r3, r8
 23f65be:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
 23f65c0:	9b03      	ldr	r3, [sp, #12]
 23f65c2:	429c      	cmp	r4, r3
 23f65c4:	f0c0 80f3 	bcc.w	23f67ae <_ZN7FatFile4openEPS_P7fname_ti+0x28e>
  if (fnameFound) {
 23f65c8:	f1b9 0f00 	cmp.w	r9, #0
 23f65cc:	f040 810c 	bne.w	23f67e8 <_ZN7FatFile4openEPS_P7fname_ti+0x2c8>
  if (!dirFile->seekSet(32UL*freeIndex)) {
 23f65d0:	9b04      	ldr	r3, [sp, #16]
 23f65d2:	4628      	mov	r0, r5
 23f65d4:	0159      	lsls	r1, r3, #5
 23f65d6:	f7ff fa44 	bl	23f5a62 <_ZN7FatFile7seekSetEm>
 23f65da:	2800      	cmp	r0, #0
 23f65dc:	d0ad      	beq.n	23f653a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
 23f65de:	9b03      	ldr	r3, [sp, #12]
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 23f65e0:	f04f 0a00 	mov.w	sl, #0
  lfnOrd = freeNeed - 1;
 23f65e4:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 23f65e8:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 23f65ec:	464e      	mov	r6, r9
    ldir->attr = DIR_ATT_LONG_NAME;
 23f65ee:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 23f65f2:	2e00      	cmp	r6, #0
 23f65f4:	f000 810f 	beq.w	23f6816 <_ZN7FatFile4openEPS_P7fname_ti+0x2f6>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 23f65f8:	2100      	movs	r1, #0
 23f65fa:	4628      	mov	r0, r5
 23f65fc:	f7ff fa12 	bl	23f5a24 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 23f6600:	4604      	mov	r4, r0
 23f6602:	2800      	cmp	r0, #0
 23f6604:	d099      	beq.n	23f653a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 23f6606:	454e      	cmp	r6, r9
 23f6608:	bf18      	it	ne
 23f660a:	46b3      	movne	fp, r6
    dirFile->m_vol->cacheDirty();
 23f660c:	68aa      	ldr	r2, [r5, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 23f660e:	bf08      	it	eq
 23f6610:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
 23f6614:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 23f6618:	f043 0301 	orr.w	r3, r3, #1
 23f661c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 23f6620:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
 23f6624:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
 23f6628:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 23f662c:	f107 000d 	add.w	r0, r7, #13
 23f6630:	f7ff fdbe 	bl	23f61b0 <_ZN7FatFile11lfnChecksumEPh>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 23f6634:	220d      	movs	r2, #13
 23f6636:	f00b 031f 	and.w	r3, fp, #31
 23f663a:	3b01      	subs	r3, #1
 23f663c:	4353      	muls	r3, r2
 23f663e:	2200      	movs	r2, #0
    ldir->chksum = lfnChecksum(fname->sfn);
 23f6640:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
 23f6642:	f884 a01a 	strb.w	sl, [r4, #26]
 23f6646:	f884 a01b 	strb.w	sl, [r4, #27]
    lfnPutName(ldir, fname->lfn, len);
 23f664a:	f8d7 c008 	ldr.w	ip, [r7, #8]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 23f664e:	9905      	ldr	r1, [sp, #20]
 23f6650:	4299      	cmp	r1, r3
 23f6652:	f240 80d1 	bls.w	23f67f8 <_ZN7FatFile4openEPS_P7fname_ti+0x2d8>
 23f6656:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
 23f665a:	2a04      	cmp	r2, #4
 23f665c:	fa5f fe82 	uxtb.w	lr, r2
 23f6660:	f102 0001 	add.w	r0, r2, #1
 23f6664:	f200 80ce 	bhi.w	23f6804 <_ZN7FatFile4openEPS_P7fname_ti+0x2e4>
    ldir->name1[i] = c;
 23f6668:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 23f666c:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
 23f6670:	280d      	cmp	r0, #13
 23f6672:	4602      	mov	r2, r0
 23f6674:	f103 0301 	add.w	r3, r3, #1
 23f6678:	d1e9      	bne.n	23f664e <_ZN7FatFile4openEPS_P7fname_ti+0x12e>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 23f667a:	3e01      	subs	r6, #1
 23f667c:	b2f6      	uxtb	r6, r6
 23f667e:	e7b8      	b.n	23f65f2 <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
 23f6680:	f04f 0901 	mov.w	r9, #1
 23f6684:	e782      	b.n	23f658c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 23f6686:	7802      	ldrb	r2, [r0, #0]
 23f6688:	2ae5      	cmp	r2, #229	; 0xe5
 23f668a:	d000      	beq.n	23f668e <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
 23f668c:	b982      	cbnz	r2, 23f66b0 <_ZN7FatFile4openEPS_P7fname_ti+0x190>
    curIndex = dirFile->m_curPosition/32;
 23f668e:	9904      	ldr	r1, [sp, #16]
 23f6690:	2c00      	cmp	r4, #0
 23f6692:	bf08      	it	eq
 23f6694:	4641      	moveq	r1, r8
 23f6696:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
 23f6698:	9903      	ldr	r1, [sp, #12]
 23f669a:	428c      	cmp	r4, r1
        freeFound++;
 23f669c:	bf3c      	itt	cc
 23f669e:	3401      	addcc	r4, #1
 23f66a0:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
 23f66a2:	2a00      	cmp	r2, #0
 23f66a4:	f43f af7f 	beq.w	23f65a6 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 23f66a8:	2ae5      	cmp	r2, #229	; 0xe5
 23f66aa:	d105      	bne.n	23f66b8 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
      lfnOrd = 0;
 23f66ac:	2600      	movs	r6, #0
 23f66ae:	e76d      	b.n	23f658c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
 23f66b0:	9903      	ldr	r1, [sp, #12]
 23f66b2:	428c      	cmp	r4, r1
 23f66b4:	bf38      	it	cc
 23f66b6:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 23f66b8:	2a2e      	cmp	r2, #46	; 0x2e
 23f66ba:	d0f7      	beq.n	23f66ac <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
 23f66bc:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
 23f66be:	290f      	cmp	r1, #15
 23f66c0:	d14a      	bne.n	23f6758 <_ZN7FatFile4openEPS_P7fname_ti+0x238>
      if (!lfnOrd) {
 23f66c2:	bb16      	cbnz	r6, 23f670a <_ZN7FatFile4openEPS_P7fname_ti+0x1ea>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 23f66c4:	f012 0640 	ands.w	r6, r2, #64	; 0x40
 23f66c8:	f43f af60 	beq.w	23f658c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
 23f66cc:	f002 061f 	and.w	r6, r2, #31
 23f66d0:	46b2      	mov	sl, r6
        chksum = ldir->chksum;
 23f66d2:	f893 b00d 	ldrb.w	fp, [r3, #13]
      size_t k = 13*(ord - 1);
 23f66d6:	220d      	movs	r2, #13
 23f66d8:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 23f66dc:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
 23f66e0:	9a05      	ldr	r2, [sp, #20]
 23f66e2:	4542      	cmp	r2, r8
 23f66e4:	d9e2      	bls.n	23f66ac <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
 23f66e6:	eba2 0208 	sub.w	r2, r2, r8
 23f66ea:	9208      	str	r2, [sp, #32]
 23f66ec:	2200      	movs	r2, #0
 23f66ee:	eb02 0108 	add.w	r1, r2, r8
 23f66f2:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
 23f66f4:	4618      	mov	r0, r3
 23f66f6:	b2d1      	uxtb	r1, r2
 23f66f8:	f7ff fd46 	bl	23f6188 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
 23f66fc:	9908      	ldr	r1, [sp, #32]
 23f66fe:	428a      	cmp	r2, r1
 23f6700:	d10d      	bne.n	23f671e <_ZN7FatFile4openEPS_P7fname_ti+0x1fe>
            lfnOrd = 0;
 23f6702:	2800      	cmp	r0, #0
 23f6704:	bf18      	it	ne
 23f6706:	2600      	movne	r6, #0
 23f6708:	e740      	b.n	23f658c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 23f670a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 23f670e:	fa5f fa8a 	uxtb.w	sl, sl
 23f6712:	4552      	cmp	r2, sl
 23f6714:	d1ca      	bne.n	23f66ac <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
 23f6716:	7b5a      	ldrb	r2, [r3, #13]
 23f6718:	455a      	cmp	r2, fp
 23f671a:	d0dc      	beq.n	23f66d6 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
 23f671c:	e7c6      	b.n	23f66ac <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 23f671e:	28ff      	cmp	r0, #255	; 0xff
 23f6720:	d8c4      	bhi.n	23f66ac <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
 23f6722:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 23f6726:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
 23f672a:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 23f672c:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 23f672e:	bf9c      	itt	ls
 23f6730:	f10e 0020 	addls.w	r0, lr, #32
 23f6734:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 23f6738:	4608      	mov	r0, r1
 23f673a:	9909      	ldr	r1, [sp, #36]	; 0x24
 23f673c:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 23f673e:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 23f6742:	f1bc 0f19 	cmp.w	ip, #25
 23f6746:	bf9c      	itt	ls
 23f6748:	3120      	addls	r1, #32
 23f674a:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 23f674c:	4571      	cmp	r1, lr
 23f674e:	d1ad      	bne.n	23f66ac <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
      for (uint8_t i = 0; i < 13; i++) {
 23f6750:	3201      	adds	r2, #1
 23f6752:	2a0d      	cmp	r2, #13
 23f6754:	d1cb      	bne.n	23f66ee <_ZN7FatFile4openEPS_P7fname_ti+0x1ce>
 23f6756:	e719      	b.n	23f658c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 23f6758:	0708      	lsls	r0, r1, #28
 23f675a:	d4a7      	bmi.n	23f66ac <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
      if (lfnOrd) {
 23f675c:	b15e      	cbz	r6, 23f6776 <_ZN7FatFile4openEPS_P7fname_ti+0x256>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 23f675e:	f1ba 0f01 	cmp.w	sl, #1
 23f6762:	f47f aeea 	bne.w	23f653a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
 23f6766:	4618      	mov	r0, r3
 23f6768:	f7ff fd22 	bl	23f61b0 <_ZN7FatFile11lfnChecksumEPh>
 23f676c:	4558      	cmp	r0, fp
 23f676e:	f47f aee4 	bne.w	23f653a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
 23f6772:	46b1      	mov	r9, r6
 23f6774:	e00e      	b.n	23f6794 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 23f6776:	220b      	movs	r2, #11
 23f6778:	ee18 1a10 	vmov	r1, s16
 23f677c:	4618      	mov	r0, r3
 23f677e:	f006 fb45 	bl	23fce0c <memcmp>
 23f6782:	2800      	cmp	r0, #0
 23f6784:	f47f af02 	bne.w	23f658c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 23f6788:	f897 9000 	ldrb.w	r9, [r7]
 23f678c:	f019 0901 	ands.w	r9, r9, #1
 23f6790:	f47f af76 	bne.w	23f6680 <_ZN7FatFile4openEPS_P7fname_ti+0x160>
  if (oflag & O_EXCL) {
 23f6794:	9b06      	ldr	r3, [sp, #24]
 23f6796:	0519      	lsls	r1, r3, #20
 23f6798:	f53f aecf 	bmi.w	23f653a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 23f679c:	4642      	mov	r2, r8
 23f679e:	4629      	mov	r1, r5
 23f67a0:	9b06      	ldr	r3, [sp, #24]
 23f67a2:	9807      	ldr	r0, [sp, #28]
 23f67a4:	f8cd 9000 	str.w	r9, [sp]
 23f67a8:	f7ff f99e 	bl	23f5ae8 <_ZN7FatFile15openCachedEntryEPS_tih>
 23f67ac:	e6c6      	b.n	23f653c <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
 23f67ae:	2100      	movs	r1, #0
 23f67b0:	4628      	mov	r0, r5
 23f67b2:	f7ff f937 	bl	23f5a24 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 23f67b6:	b9a0      	cbnz	r0, 23f67e2 <_ZN7FatFile4openEPS_P7fname_ti+0x2c2>
      if (dirFile->getError()) {
 23f67b8:	786b      	ldrb	r3, [r5, #1]
 23f67ba:	2b00      	cmp	r3, #0
 23f67bc:	f47f aebd 	bne.w	23f653a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
 23f67c0:	4628      	mov	r0, r5
 23f67c2:	f7ff f81b 	bl	23f57fc <_ZN7FatFile13addDirClusterEv>
 23f67c6:	2800      	cmp	r0, #0
 23f67c8:	f43f aeb7 	beq.w	23f653a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
 23f67cc:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 23f67ce:	791b      	ldrb	r3, [r3, #4]
 23f67d0:	2b01      	cmp	r3, #1
 23f67d2:	f63f aef9 	bhi.w	23f65c8 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
 23f67d6:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
 23f67d8:	3410      	adds	r4, #16
 23f67da:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
 23f67dc:	42a3      	cmp	r3, r4
 23f67de:	d8ef      	bhi.n	23f67c0 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
 23f67e0:	e6f2      	b.n	23f65c8 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
 23f67e2:	3401      	adds	r4, #1
 23f67e4:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
 23f67e6:	e6eb      	b.n	23f65c0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
 23f67e8:	4639      	mov	r1, r7
 23f67ea:	4628      	mov	r0, r5
 23f67ec:	f7ff fe45 	bl	23f647a <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 23f67f0:	2800      	cmp	r0, #0
 23f67f2:	f47f aeed 	bne.w	23f65d0 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
 23f67f6:	e6a0      	b.n	23f653a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 23f67f8:	bf14      	ite	ne
 23f67fa:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 23f67fe:	2100      	moveq	r1, #0
 23f6800:	b289      	uxth	r1, r1
 23f6802:	e72a      	b.n	23f665a <_ZN7FatFile4openEPS_P7fname_ti+0x13a>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 23f6804:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 23f6808:	bf94      	ite	ls
 23f680a:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 23f680e:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
 23f6812:	8091      	strh	r1, [r2, #4]
 23f6814:	e72c      	b.n	23f6670 <_ZN7FatFile4openEPS_P7fname_ti+0x150>
  dir = dirFile->readDirCache();
 23f6816:	4631      	mov	r1, r6
 23f6818:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
 23f681a:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
 23f681e:	f7ff f901 	bl	23f5a24 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 23f6822:	4604      	mov	r4, r0
 23f6824:	2800      	cmp	r0, #0
 23f6826:	f43f ae88 	beq.w	23f653a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
 23f682a:	2220      	movs	r2, #32
 23f682c:	4631      	mov	r1, r6
 23f682e:	f006 fb0a 	bl	23fce46 <memset>
  memcpy(dir->name, fname->sfn, 11);
 23f6832:	f8d7 300d 	ldr.w	r3, [r7, #13]
 23f6836:	6023      	str	r3, [r4, #0]
 23f6838:	f8d7 3011 	ldr.w	r3, [r7, #17]
 23f683c:	6063      	str	r3, [r4, #4]
 23f683e:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 23f6842:	8123      	strh	r3, [r4, #8]
 23f6844:	7dfb      	ldrb	r3, [r7, #23]
 23f6846:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 23f6848:	783b      	ldrb	r3, [r7, #0]
 23f684a:	f003 0318 	and.w	r3, r3, #24
 23f684e:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
 23f6850:	4b0f      	ldr	r3, [pc, #60]	; (23f6890 <_ZN7FatFile4openEPS_P7fname_ti+0x370>)
 23f6852:	681b      	ldr	r3, [r3, #0]
 23f6854:	b19b      	cbz	r3, 23f687e <_ZN7FatFile4openEPS_P7fname_ti+0x35e>
    m_dateTime(&dir->creationDate, &dir->creationTime);
 23f6856:	f104 010e 	add.w	r1, r4, #14
 23f685a:	f104 0010 	add.w	r0, r4, #16
 23f685e:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
 23f6860:	8a23      	ldrh	r3, [r4, #16]
  curIndex = dirFile->m_curPosition/32;
 23f6862:	f3c8 184f 	ubfx	r8, r8, #5, #16
  dir->lastAccessDate = dir->creationDate;
 23f6866:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
 23f6868:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
 23f686a:	89e3      	ldrh	r3, [r4, #14]
 23f686c:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
 23f686e:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
 23f6870:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 23f6874:	f043 0301 	orr.w	r3, r3, #1
 23f6878:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
 23f687c:	e78e      	b.n	23f679c <_ZN7FatFile4openEPS_P7fname_ti+0x27c>
    dir->creationDate = FAT_DEFAULT_DATE;
 23f687e:	2321      	movs	r3, #33	; 0x21
 23f6880:	7423      	strb	r3, [r4, #16]
 23f6882:	2328      	movs	r3, #40	; 0x28
 23f6884:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 23f6886:	2308      	movs	r3, #8
 23f6888:	73a6      	strb	r6, [r4, #14]
 23f688a:	73e3      	strb	r3, [r4, #15]
 23f688c:	e7e8      	b.n	23f6860 <_ZN7FatFile4openEPS_P7fname_ti+0x340>
 23f688e:	bf00      	nop
 23f6890:	1007aea4 	.word	0x1007aea4

023f6894 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23f6894:	b513      	push	{r0, r1, r4, lr}
 23f6896:	4604      	mov	r4, r0
    }
 23f6898:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23f689a:	b159      	cbz	r1, 23f68b4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23f689c:	9101      	str	r1, [sp, #4]
 23f689e:	f7f0 ffc3 	bl	23e7828 <strlen>
 23f68a2:	4602      	mov	r2, r0
 23f68a4:	4620      	mov	r0, r4
 23f68a6:	6823      	ldr	r3, [r4, #0]
 23f68a8:	9901      	ldr	r1, [sp, #4]
 23f68aa:	68db      	ldr	r3, [r3, #12]
    }
 23f68ac:	b002      	add	sp, #8
 23f68ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23f68b2:	4718      	bx	r3
    }
 23f68b4:	b002      	add	sp, #8
 23f68b6:	bd10      	pop	{r4, pc}

023f68b8 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 23f68b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 23f68ba:	7803      	ldrb	r3, [r0, #0]
bool FatCache::sync() {
 23f68bc:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 23f68be:	07da      	lsls	r2, r3, #31
 23f68c0:	d520      	bpl.n	23f6904 <_ZN8FatCache4syncEv+0x4c>
    return m_blockDev->writeBlock(block, src);
 23f68c2:	6843      	ldr	r3, [r0, #4]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 23f68c4:	f100 020c 	add.w	r2, r0, #12
 23f68c8:	6881      	ldr	r1, [r0, #8]
 23f68ca:	6818      	ldr	r0, [r3, #0]
 23f68cc:	9201      	str	r2, [sp, #4]
 23f68ce:	f000 fb8a 	bl	23f6fe6 <_ZN9SdSpiCard10writeBlockEmPKh>
 23f68d2:	9a01      	ldr	r2, [sp, #4]
 23f68d4:	4605      	mov	r5, r0
 23f68d6:	b918      	cbnz	r0, 23f68e0 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 23f68d8:	2500      	movs	r5, #0
}
 23f68da:	4628      	mov	r0, r5
 23f68dc:	b003      	add	sp, #12
 23f68de:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 23f68e0:	7823      	ldrb	r3, [r4, #0]
 23f68e2:	079b      	lsls	r3, r3, #30
 23f68e4:	d404      	bmi.n	23f68f0 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
 23f68e6:	7823      	ldrb	r3, [r4, #0]
 23f68e8:	f023 0301 	bic.w	r3, r3, #1
 23f68ec:	7023      	strb	r3, [r4, #0]
 23f68ee:	e7f4      	b.n	23f68da <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 23f68f0:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 23f68f4:	6919      	ldr	r1, [r3, #16]
 23f68f6:	4401      	add	r1, r0
 23f68f8:	6818      	ldr	r0, [r3, #0]
 23f68fa:	f000 fb74 	bl	23f6fe6 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 23f68fe:	2800      	cmp	r0, #0
 23f6900:	d1f1      	bne.n	23f68e6 <_ZN8FatCache4syncEv+0x2e>
 23f6902:	e7e9      	b.n	23f68d8 <_ZN8FatCache4syncEv+0x20>
  return true;
 23f6904:	2501      	movs	r5, #1
 23f6906:	e7e8      	b.n	23f68da <_ZN8FatCache4syncEv+0x22>

023f6908 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 23f6908:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 23f690a:	6883      	ldr	r3, [r0, #8]
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 23f690c:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 23f690e:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 23f6910:	460e      	mov	r6, r1
 23f6912:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 23f6914:	d009      	beq.n	23f692a <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
 23f6916:	f7ff ffcf 	bl	23f68b8 <_ZN8FatCache4syncEv>
 23f691a:	b908      	cbnz	r0, 23f6920 <_ZN8FatCache4readEmh+0x18>
  return 0;
 23f691c:	2000      	movs	r0, #0
}
 23f691e:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
 23f6920:	076b      	lsls	r3, r5, #29
 23f6922:	d50a      	bpl.n	23f693a <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
 23f6924:	2300      	movs	r3, #0
    m_lbn = lbn;
 23f6926:	60a6      	str	r6, [r4, #8]
    m_status = 0;
 23f6928:	7023      	strb	r3, [r4, #0]
  m_status |= option & CACHE_STATUS_MASK;
 23f692a:	4620      	mov	r0, r4
 23f692c:	7822      	ldrb	r2, [r4, #0]
 23f692e:	f005 0503 	and.w	r5, r5, #3
 23f6932:	4315      	orrs	r5, r2
 23f6934:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
 23f6938:	e7f1      	b.n	23f691e <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
 23f693a:	6863      	ldr	r3, [r4, #4]
 23f693c:	4631      	mov	r1, r6
 23f693e:	6818      	ldr	r0, [r3, #0]
 23f6940:	f104 020c 	add.w	r2, r4, #12
 23f6944:	f000 fac6 	bl	23f6ed4 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
 23f6948:	2800      	cmp	r0, #0
 23f694a:	d1eb      	bne.n	23f6924 <_ZN8FatCache4readEmh+0x1c>
 23f694c:	e7e6      	b.n	23f691c <_ZN8FatCache4readEmh+0x14>

023f694e <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 23f694e:	7983      	ldrb	r3, [r0, #6]
 23f6950:	3902      	subs	r1, #2
 23f6952:	6940      	ldr	r0, [r0, #20]
 23f6954:	4099      	lsls	r1, r3
}
 23f6956:	4408      	add	r0, r1
 23f6958:	4770      	bx	lr

023f695a <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 23f695a:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 23f695c:	b570      	push	{r4, r5, r6, lr}
 23f695e:	4605      	mov	r5, r0
 23f6960:	460c      	mov	r4, r1
 23f6962:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
 23f6964:	d802      	bhi.n	23f696c <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
 23f6966:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23f696a:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
 23f696c:	69c3      	ldr	r3, [r0, #28]
 23f696e:	428b      	cmp	r3, r1
 23f6970:	d3f9      	bcc.n	23f6966 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
 23f6972:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
 23f6974:	2b20      	cmp	r3, #32
 23f6976:	d116      	bne.n	23f69a6 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
 23f6978:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
 23f697a:	2202      	movs	r2, #2
 23f697c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 23f6980:	f500 700c 	add.w	r0, r0, #560	; 0x230
 23f6984:	f7ff ffc0 	bl	23f6908 <_ZN8FatCache4readEmh>
    if (!pc) {
 23f6988:	2800      	cmp	r0, #0
 23f698a:	d0ec      	beq.n	23f6966 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 23f698c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 23f6990:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 23f6994:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
 23f6998:	69ea      	ldr	r2, [r5, #28]
 23f699a:	429a      	cmp	r2, r3
  return 1;
 23f699c:	bf2a      	itet	cs
 23f699e:	2001      	movcs	r0, #1
    return 0;
 23f69a0:	2000      	movcc	r0, #0
  *value = next;
 23f69a2:	6033      	strcs	r3, [r6, #0]
  return 1;
 23f69a4:	e7e1      	b.n	23f696a <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
 23f69a6:	2b10      	cmp	r3, #16
 23f69a8:	d1dd      	bne.n	23f6966 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
 23f69aa:	f3c1 2307 	ubfx	r3, r1, #8, #8
 23f69ae:	6981      	ldr	r1, [r0, #24]
 23f69b0:	2202      	movs	r2, #2
 23f69b2:	4419      	add	r1, r3
 23f69b4:	f500 700c 	add.w	r0, r0, #560	; 0x230
 23f69b8:	f7ff ffa6 	bl	23f6908 <_ZN8FatCache4readEmh>
    if (!pc) {
 23f69bc:	2800      	cmp	r0, #0
 23f69be:	d0d2      	beq.n	23f6966 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
 23f69c0:	b2e4      	uxtb	r4, r4
 23f69c2:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
 23f69c6:	e7e7      	b.n	23f6998 <_ZN9FatVolume6fatGetEmPm+0x3e>

023f69c8 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 23f69c8:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 23f69ca:	b538      	push	{r3, r4, r5, lr}
 23f69cc:	460c      	mov	r4, r1
 23f69ce:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
 23f69d0:	d801      	bhi.n	23f69d6 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 23f69d2:	2000      	movs	r0, #0
}
 23f69d4:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
 23f69d6:	69c3      	ldr	r3, [r0, #28]
 23f69d8:	428b      	cmp	r3, r1
 23f69da:	d3fa      	bcc.n	23f69d2 <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
 23f69dc:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
 23f69de:	2b20      	cmp	r3, #32
 23f69e0:	d10f      	bne.n	23f6a02 <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
 23f69e2:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
 23f69e4:	2203      	movs	r2, #3
 23f69e6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 23f69ea:	f500 700c 	add.w	r0, r0, #560	; 0x230
 23f69ee:	f7ff ff8b 	bl	23f6908 <_ZN8FatCache4readEmh>
    if (!pc) {
 23f69f2:	2800      	cmp	r0, #0
 23f69f4:	d0ed      	beq.n	23f69d2 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
 23f69f6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 23f69fa:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
 23f69fe:	2001      	movs	r0, #1
 23f6a00:	e7e8      	b.n	23f69d4 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
 23f6a02:	2b10      	cmp	r3, #16
 23f6a04:	d1e5      	bne.n	23f69d2 <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
 23f6a06:	f3c1 2307 	ubfx	r3, r1, #8, #8
 23f6a0a:	6981      	ldr	r1, [r0, #24]
 23f6a0c:	2203      	movs	r2, #3
 23f6a0e:	4419      	add	r1, r3
 23f6a10:	f500 700c 	add.w	r0, r0, #560	; 0x230
 23f6a14:	f7ff ff78 	bl	23f6908 <_ZN8FatCache4readEmh>
    if (!pc) {
 23f6a18:	2800      	cmp	r0, #0
 23f6a1a:	d0da      	beq.n	23f69d2 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
 23f6a1c:	b2e4      	uxtb	r4, r4
 23f6a1e:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
 23f6a22:	e7ec      	b.n	23f69fe <_ZN9FatVolume6fatPutEmm+0x36>

023f6a24 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 23f6a24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
 23f6a28:	68c4      	ldr	r4, [r0, #12]
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 23f6a2a:	4605      	mov	r5, r0
  if (m_allocSearchStart < current) {
 23f6a2c:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 23f6a2e:	460e      	mov	r6, r1
 23f6a30:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
 23f6a32:	d301      	bcc.n	23f6a38 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
 23f6a34:	2701      	movs	r7, #1
 23f6a36:	e001      	b.n	23f6a3c <_ZN9FatVolume15allocateClusterEmPm+0x18>
 23f6a38:	460c      	mov	r4, r1
    setStart = false;
 23f6a3a:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
 23f6a3c:	69eb      	ldr	r3, [r5, #28]
    find++;
 23f6a3e:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
 23f6a40:	42a3      	cmp	r3, r4
 23f6a42:	d202      	bcs.n	23f6a4a <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
 23f6a44:	b9c7      	cbnz	r7, 23f6a78 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
 23f6a46:	68ec      	ldr	r4, [r5, #12]
 23f6a48:	e7f4      	b.n	23f6a34 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
 23f6a4a:	42a6      	cmp	r6, r4
 23f6a4c:	d014      	beq.n	23f6a78 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
 23f6a4e:	4621      	mov	r1, r4
 23f6a50:	4628      	mov	r0, r5
 23f6a52:	aa01      	add	r2, sp, #4
 23f6a54:	f7ff ff81 	bl	23f695a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 23f6a58:	2800      	cmp	r0, #0
 23f6a5a:	db0d      	blt.n	23f6a78 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
 23f6a5c:	d0ee      	beq.n	23f6a3c <_ZN9FatVolume15allocateClusterEmPm+0x18>
 23f6a5e:	9b01      	ldr	r3, [sp, #4]
 23f6a60:	2b00      	cmp	r3, #0
 23f6a62:	d1eb      	bne.n	23f6a3c <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
 23f6a64:	b107      	cbz	r7, 23f6a68 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
 23f6a66:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 23f6a68:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 23f6a6c:	4621      	mov	r1, r4
 23f6a6e:	4628      	mov	r0, r5
 23f6a70:	f7ff ffaa 	bl	23f69c8 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
 23f6a74:	4607      	mov	r7, r0
 23f6a76:	b920      	cbnz	r0, 23f6a82 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
 23f6a78:	2700      	movs	r7, #0
}
 23f6a7a:	4638      	mov	r0, r7
 23f6a7c:	b002      	add	sp, #8
 23f6a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
 23f6a82:	b916      	cbnz	r6, 23f6a8a <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
 23f6a84:	f8c8 4000 	str.w	r4, [r8]
  return true;
 23f6a88:	e7f7      	b.n	23f6a7a <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
 23f6a8a:	4622      	mov	r2, r4
 23f6a8c:	4631      	mov	r1, r6
 23f6a8e:	4628      	mov	r0, r5
 23f6a90:	f7ff ff9a 	bl	23f69c8 <_ZN9FatVolume6fatPutEmm>
 23f6a94:	2800      	cmp	r0, #0
 23f6a96:	d1f5      	bne.n	23f6a84 <_ZN9FatVolume15allocateClusterEmPm+0x60>
 23f6a98:	e7ee      	b.n	23f6a78 <_ZN9FatVolume15allocateClusterEmPm+0x54>

023f6a9a <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 23f6a9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f6a9c:	4605      	mov	r5, r0
 23f6a9e:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 23f6aa0:	4621      	mov	r1, r4
 23f6aa2:	4628      	mov	r0, r5
 23f6aa4:	aa01      	add	r2, sp, #4
 23f6aa6:	f7ff ff58 	bl	23f695a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 23f6aaa:	1e06      	subs	r6, r0, #0
 23f6aac:	db10      	blt.n	23f6ad0 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 23f6aae:	2200      	movs	r2, #0
 23f6ab0:	4621      	mov	r1, r4
 23f6ab2:	4628      	mov	r0, r5
 23f6ab4:	f7ff ff88 	bl	23f69c8 <_ZN9FatVolume6fatPutEmm>
 23f6ab8:	b150      	cbz	r0, 23f6ad0 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
 23f6aba:	68eb      	ldr	r3, [r5, #12]
 23f6abc:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
 23f6abe:	bf24      	itt	cs
 23f6ac0:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
 23f6ac4:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
 23f6ac6:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
 23f6ac8:	2e00      	cmp	r6, #0
 23f6aca:	d1e9      	bne.n	23f6aa0 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 23f6acc:	b002      	add	sp, #8
 23f6ace:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 23f6ad0:	2000      	movs	r0, #0
 23f6ad2:	e7fb      	b.n	23f6acc <_ZN9FatVolume9freeChainEm+0x32>

023f6ad4 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 23f6ad4:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
 23f6ad6:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
 23f6ad8:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 23f6ada:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
 23f6adc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
 23f6ae0:	4604      	mov	r4, r0
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 23f6ae2:	460d      	mov	r5, r1
  m_fatType = 0;
 23f6ae4:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
 23f6ae6:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
 23f6aea:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
 23f6aec:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 23f6af0:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
 23f6af2:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
 23f6af6:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
 23f6afa:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
  if (part) {
 23f6afe:	b1b9      	cbz	r1, 23f6b30 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
 23f6b00:	2904      	cmp	r1, #4
 23f6b02:	d901      	bls.n	23f6b08 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 23f6b04:	2000      	movs	r0, #0
}
 23f6b06:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
 23f6b08:	4611      	mov	r1, r2
 23f6b0a:	4630      	mov	r0, r6
 23f6b0c:	f7ff fefc 	bl	23f6908 <_ZN8FatCache4readEmh>
    if (!pc) {
 23f6b10:	2800      	cmp	r0, #0
 23f6b12:	d0f7      	beq.n	23f6b04 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 23f6b14:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 23f6b18:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 23f6b1c:	065b      	lsls	r3, r3, #25
 23f6b1e:	d1f1      	bne.n	23f6b04 <_ZN9FatVolume4initEh+0x30>
 23f6b20:	f105 011b 	add.w	r1, r5, #27
 23f6b24:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 23f6b28:	f8d0 5006 	ldr.w	r5, [r0, #6]
 23f6b2c:	2d00      	cmp	r5, #0
 23f6b2e:	d0e9      	beq.n	23f6b04 <_ZN9FatVolume4initEh+0x30>
 23f6b30:	2200      	movs	r2, #0
 23f6b32:	4629      	mov	r1, r5
 23f6b34:	4630      	mov	r0, r6
 23f6b36:	f7ff fee7 	bl	23f6908 <_ZN8FatCache4readEmh>
  if (!pc) {
 23f6b3a:	2800      	cmp	r0, #0
 23f6b3c:	d0e2      	beq.n	23f6b04 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
 23f6b3e:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 23f6b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 23f6b46:	d1dd      	bne.n	23f6b04 <_ZN9FatVolume4initEh+0x30>
 23f6b48:	7c03      	ldrb	r3, [r0, #16]
 23f6b4a:	2b02      	cmp	r3, #2
 23f6b4c:	d1da      	bne.n	23f6b04 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
 23f6b4e:	89c3      	ldrh	r3, [r0, #14]
 23f6b50:	2b00      	cmp	r3, #0
 23f6b52:	d0d7      	beq.n	23f6b04 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
 23f6b54:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSizeShift = 0;
 23f6b56:	2609      	movs	r6, #9
  m_clusterBlockMask = m_blocksPerCluster - 1;
 23f6b58:	1e4b      	subs	r3, r1, #1
 23f6b5a:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
 23f6b5c:	2300      	movs	r3, #0
 23f6b5e:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 23f6b60:	2301      	movs	r3, #1
  m_blocksPerCluster = fbs->sectorsPerCluster;
 23f6b62:	7121      	strb	r1, [r4, #4]
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 23f6b64:	4299      	cmp	r1, r3
 23f6b66:	d007      	beq.n	23f6b78 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
 23f6b68:	3e01      	subs	r6, #1
 23f6b6a:	d0cb      	beq.n	23f6b04 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 23f6b6c:	79a2      	ldrb	r2, [r4, #6]
 23f6b6e:	005b      	lsls	r3, r3, #1
 23f6b70:	3201      	adds	r2, #1
 23f6b72:	b2db      	uxtb	r3, r3
 23f6b74:	71a2      	strb	r2, [r4, #6]
 23f6b76:	e7f5      	b.n	23f6b64 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
 23f6b78:	8ac1      	ldrh	r1, [r0, #22]
 23f6b7a:	b901      	cbnz	r1, 23f6b7e <_ZN9FatVolume4initEh+0xaa>
 23f6b7c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 23f6b7e:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 23f6b80:	89c3      	ldrh	r3, [r0, #14]
 23f6b82:	442b      	add	r3, r5
 23f6b84:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 23f6b86:	f8b0 2011 	ldrh.w	r2, [r0, #17]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 23f6b8a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 23f6b8e:	6223      	str	r3, [r4, #32]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 23f6b90:	8122      	strh	r2, [r4, #8]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 23f6b92:	f8b0 1011 	ldrh.w	r1, [r0, #17]
 23f6b96:	0149      	lsls	r1, r1, #5
 23f6b98:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 23f6b9c:	eb03 2351 	add.w	r3, r3, r1, lsr #9
 23f6ba0:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
 23f6ba2:	f8b0 2013 	ldrh.w	r2, [r0, #19]
 23f6ba6:	b902      	cbnz	r2, 23f6baa <_ZN9FatVolume4initEh+0xd6>
 23f6ba8:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 23f6baa:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
 23f6bac:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 23f6bae:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
 23f6bb0:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
 23f6bb2:	1c4b      	adds	r3, r1, #1
 23f6bb4:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
 23f6bb6:	f640 73f4 	movw	r3, #4084	; 0xff4
 23f6bba:	4299      	cmp	r1, r3
 23f6bbc:	d802      	bhi.n	23f6bc4 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
 23f6bbe:	230c      	movs	r3, #12
 23f6bc0:	71e3      	strb	r3, [r4, #7]
 23f6bc2:	e79f      	b.n	23f6b04 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
 23f6bc4:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 23f6bc8:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
 23f6bca:	bf89      	itett	hi
 23f6bcc:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
 23f6bce:	2310      	movls	r3, #16
    m_rootDirStart = fbs->fat32RootCluster;
 23f6bd0:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 23f6bd2:	2320      	movhi	r3, #32
  return true;
 23f6bd4:	2001      	movs	r0, #1
    m_fatType = 32;
 23f6bd6:	71e3      	strb	r3, [r4, #7]
 23f6bd8:	e795      	b.n	23f6b06 <_ZN9FatVolume4initEh+0x32>

023f6bda <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 23f6bda:	f000 bacd 	b.w	23f7178 <_ZN14SdSpiAltDriver4sendEh>

023f6bde <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
 23f6bde:	f000 bab0 	b.w	23f7142 <_ZN14SdSpiAltDriver7receiveEv>
	...

023f6be4 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
 23f6be4:	b570      	push	{r4, r5, r6, lr}
 23f6be6:	460d      	mov	r5, r1
 23f6be8:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 23f6bea:	f000 fd31 	bl	23f7650 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
 23f6bee:	4e0c      	ldr	r6, [pc, #48]	; (23f6c20 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
 23f6bf0:	6833      	ldr	r3, [r6, #0]
 23f6bf2:	1ac0      	subs	r0, r0, r3
 23f6bf4:	4b0b      	ldr	r3, [pc, #44]	; (23f6c24 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
 23f6bf6:	4298      	cmp	r0, r3
 23f6bf8:	d908      	bls.n	23f6c0c <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23f6bfa:	f000 fd37 	bl	23f766c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23f6bfe:	4b0a      	ldr	r3, [pc, #40]	; (23f6c28 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
 23f6c00:	6018      	str	r0, [r3, #0]
            return spark_process();
 23f6c02:	f001 f985 	bl	23f7f10 <spark_process>
 23f6c06:	f000 fd23 	bl	23f7650 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
 23f6c0a:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23f6c0c:	f000 fd2e 	bl	23f766c <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
 23f6c10:	b280      	uxth	r0, r0
 23f6c12:	1b40      	subs	r0, r0, r5
}
 23f6c14:	42a0      	cmp	r0, r4
 23f6c16:	bfd4      	ite	le
 23f6c18:	2000      	movle	r0, #0
 23f6c1a:	2001      	movgt	r0, #1
 23f6c1c:	bd70      	pop	{r4, r5, r6, pc}
 23f6c1e:	bf00      	nop
 23f6c20:	1007aeac 	.word	0x1007aeac
 23f6c24:	000186a0 	.word	0x000186a0
 23f6c28:	1007afa8 	.word	0x1007afa8

023f6c2c <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
 23f6c2c:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
 23f6c2e:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
 23f6c30:	4604      	mov	r4, r0
  if (!m_spiActive) {
 23f6c32:	b94d      	cbnz	r5, 23f6c48 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
 23f6c34:	6840      	ldr	r0, [r0, #4]
 23f6c36:	f000 fa6d 	bl	23f7114 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
 23f6c3a:	6863      	ldr	r3, [r4, #4]
 23f6c3c:	4629      	mov	r1, r5
 23f6c3e:	7d18      	ldrb	r0, [r3, #20]
 23f6c40:	f003 faf5 	bl	23fa22e <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
 23f6c44:	2301      	movs	r3, #1
 23f6c46:	7223      	strb	r3, [r4, #8]
  }
}
 23f6c48:	bd38      	pop	{r3, r4, r5, pc}

023f6c4a <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
 23f6c4a:	b510      	push	{r4, lr}
  if (m_spiActive) {
 23f6c4c:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
 23f6c4e:	4604      	mov	r4, r0
  if (m_spiActive) {
 23f6c50:	b16b      	cbz	r3, 23f6c6e <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
 23f6c52:	6843      	ldr	r3, [r0, #4]
 23f6c54:	2101      	movs	r1, #1
 23f6c56:	7d18      	ldrb	r0, [r3, #20]
 23f6c58:	f003 fae9 	bl	23fa22e <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
 23f6c5c:	21ff      	movs	r1, #255	; 0xff
 23f6c5e:	6860      	ldr	r0, [r4, #4]
 23f6c60:	f7ff ffbb 	bl	23f6bda <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
 23f6c64:	6860      	ldr	r0, [r4, #4]
 23f6c66:	f000 fa69 	bl	23f713c <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
 23f6c6a:	2300      	movs	r3, #0
 23f6c6c:	7223      	strb	r3, [r4, #8]
  }
}
 23f6c6e:	bd10      	pop	{r4, pc}

023f6c70 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 23f6c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f6c72:	4604      	mov	r4, r0
 23f6c74:	460d      	mov	r5, r1
 23f6c76:	4616      	mov	r6, r2
 23f6c78:	f000 fcf8 	bl	23f766c <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
 23f6c7c:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
 23f6c7e:	6860      	ldr	r0, [r4, #4]
 23f6c80:	f7ff ffad 	bl	23f6bde <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 23f6c84:	28ff      	cmp	r0, #255	; 0xff
 23f6c86:	7260      	strb	r0, [r4, #9]
 23f6c88:	d10e      	bne.n	23f6ca8 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
 23f6c8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23f6c8e:	4639      	mov	r1, r7
 23f6c90:	4620      	mov	r0, r4
 23f6c92:	f7ff ffa7 	bl	23f6be4 <_ZN9SdSpiCard10isTimedOutEtt>
 23f6c96:	2800      	cmp	r0, #0
 23f6c98:	d0f1      	beq.n	23f6c7e <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
 23f6c9a:	2355      	movs	r3, #85	; 0x55
  spiStop();
 23f6c9c:	4620      	mov	r0, r4
 23f6c9e:	7023      	strb	r3, [r4, #0]
 23f6ca0:	f7ff ffd3 	bl	23f6c4a <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f6ca4:	2000      	movs	r0, #0
}
 23f6ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
 23f6ca8:	28fe      	cmp	r0, #254	; 0xfe
 23f6caa:	d001      	beq.n	23f6cb0 <_ZN9SdSpiCard8readDataEPhj+0x40>
 23f6cac:	2350      	movs	r3, #80	; 0x50
 23f6cae:	e7f5      	b.n	23f6c9c <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
 23f6cb0:	4632      	mov	r2, r6
 23f6cb2:	4629      	mov	r1, r5
 23f6cb4:	6860      	ldr	r0, [r4, #4]
 23f6cb6:	f000 fa49 	bl	23f714c <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
 23f6cba:	7260      	strb	r0, [r4, #9]
 23f6cbc:	b108      	cbz	r0, 23f6cc2 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
 23f6cbe:	2360      	movs	r3, #96	; 0x60
 23f6cc0:	e7ec      	b.n	23f6c9c <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
 23f6cc2:	6860      	ldr	r0, [r4, #4]
 23f6cc4:	f7ff ff8b 	bl	23f6bde <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
 23f6cc8:	6860      	ldr	r0, [r4, #4]
 23f6cca:	f7ff ff88 	bl	23f6bde <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
 23f6cce:	2001      	movs	r0, #1
 23f6cd0:	e7e9      	b.n	23f6ca6 <_ZN9SdSpiCard8readDataEPhj+0x36>

023f6cd2 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
 23f6cd2:	b570      	push	{r4, r5, r6, lr}
 23f6cd4:	4604      	mov	r4, r0
 23f6cd6:	460e      	mov	r6, r1
 23f6cd8:	f000 fcc8 	bl	23f766c <HAL_Timer_Get_Milli_Seconds>
 23f6cdc:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
 23f6cde:	4632      	mov	r2, r6
 23f6ce0:	4629      	mov	r1, r5
 23f6ce2:	4620      	mov	r0, r4
 23f6ce4:	f7ff ff7e 	bl	23f6be4 <_ZN9SdSpiCard10isTimedOutEtt>
 23f6ce8:	b930      	cbnz	r0, 23f6cf8 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
 23f6cea:	6860      	ldr	r0, [r4, #4]
 23f6cec:	f7ff ff77 	bl	23f6bde <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 23f6cf0:	28ff      	cmp	r0, #255	; 0xff
 23f6cf2:	d1f4      	bne.n	23f6cde <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
 23f6cf4:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
 23f6cf6:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 23f6cf8:	2000      	movs	r0, #0
 23f6cfa:	e7fc      	b.n	23f6cf6 <_ZN9SdSpiCard11waitNotBusyEt+0x24>

023f6cfc <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 23f6cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
 23f6cfe:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 23f6d00:	4604      	mov	r4, r0
 23f6d02:	460d      	mov	r5, r1
 23f6d04:	9201      	str	r2, [sp, #4]
  if (!m_spiActive) {
 23f6d06:	b90b      	cbnz	r3, 23f6d0c <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
 23f6d08:	f7ff ff90 	bl	23f6c2c <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
 23f6d0c:	b125      	cbz	r5, 23f6d18 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
 23f6d0e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 23f6d12:	4620      	mov	r0, r4
 23f6d14:	f7ff ffdd 	bl	23f6cd2 <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
 23f6d18:	6860      	ldr	r0, [r4, #4]
 23f6d1a:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 23f6d1e:	f7ff ff5c 	bl	23f6bda <_ZN9SdSpiCard7spiSendEh.isra.0>
 23f6d22:	2603      	movs	r6, #3
    spiSend(pa[i]);
 23f6d24:	af01      	add	r7, sp, #4
 23f6d26:	5db9      	ldrb	r1, [r7, r6]
 23f6d28:	6860      	ldr	r0, [r4, #4]
 23f6d2a:	f7ff ff56 	bl	23f6bda <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
 23f6d2e:	3e01      	subs	r6, #1
 23f6d30:	d2f9      	bcs.n	23f6d26 <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 23f6d32:	2d00      	cmp	r5, #0
 23f6d34:	bf0c      	ite	eq
 23f6d36:	2195      	moveq	r1, #149	; 0x95
 23f6d38:	2187      	movne	r1, #135	; 0x87
 23f6d3a:	6860      	ldr	r0, [r4, #4]
 23f6d3c:	f7ff ff4d 	bl	23f6bda <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
 23f6d40:	6860      	ldr	r0, [r4, #4]
 23f6d42:	f7ff ff4c 	bl	23f6bde <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 23f6d46:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
 23f6d48:	6860      	ldr	r0, [r4, #4]
 23f6d4a:	f7ff ff48 	bl	23f6bde <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 23f6d4e:	0603      	lsls	r3, r0, #24
 23f6d50:	7260      	strb	r0, [r4, #9]
 23f6d52:	d503      	bpl.n	23f6d5c <_ZN9SdSpiCard11cardCommandEhm+0x60>
 23f6d54:	3d01      	subs	r5, #1
 23f6d56:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 23f6d5a:	d1f5      	bne.n	23f6d48 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
 23f6d5c:	b003      	add	sp, #12
 23f6d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f6d60 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
 23f6d60:	b570      	push	{r4, r5, r6, lr}
 23f6d62:	4604      	mov	r4, r0
 23f6d64:	460d      	mov	r5, r1
 23f6d66:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
 23f6d68:	2137      	movs	r1, #55	; 0x37
 23f6d6a:	2200      	movs	r2, #0
 23f6d6c:	f7ff ffc6 	bl	23f6cfc <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 23f6d70:	4632      	mov	r2, r6
 23f6d72:	4629      	mov	r1, r5
 23f6d74:	4620      	mov	r0, r4
  }
 23f6d76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
 23f6d7a:	f7ff bfbf 	b.w	23f6cfc <_ZN9SdSpiCard11cardCommandEhm>
	...

023f6d80 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
 23f6d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
 23f6d84:	2500      	movs	r5, #0
  m_spiDriver = spi;
 23f6d86:	6041      	str	r1, [r0, #4]
  m_spiActive = false;
 23f6d88:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
 23f6d8a:	7005      	strb	r5, [r0, #0]
  m_type = 0;
 23f6d8c:	7285      	strb	r5, [r0, #10]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
 23f6d8e:	4604      	mov	r4, r0
 23f6d90:	4690      	mov	r8, r2
 23f6d92:	461e      	mov	r6, r3
 23f6d94:	f000 fc6a 	bl	23f766c <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
 23f6d98:	4641      	mov	r1, r8
 23f6d9a:	4607      	mov	r7, r0
 23f6d9c:	6860      	ldr	r0, [r4, #4]
 23f6d9e:	f000 f9bd 	bl	23f711c <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
 23f6da2:	6863      	ldr	r3, [r4, #4]
 23f6da4:	4a4a      	ldr	r2, [pc, #296]	; (23f6ed0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x150>)
 23f6da6:	721d      	strb	r5, [r3, #8]
 23f6da8:	2501      	movs	r5, #1
 23f6daa:	60da      	str	r2, [r3, #12]
 23f6dac:	821d      	strh	r5, [r3, #16]
  spiStart();
 23f6dae:	4620      	mov	r0, r4
 23f6db0:	f7ff ff3c 	bl	23f6c2c <_ZN9SdSpiCard8spiStartEv>
 23f6db4:	6863      	ldr	r3, [r4, #4]
 23f6db6:	4629      	mov	r1, r5
 23f6db8:	7d18      	ldrb	r0, [r3, #20]
 23f6dba:	f003 fa38 	bl	23fa22e <digitalWrite>
 23f6dbe:	250a      	movs	r5, #10
    spiSend(0XFF);
 23f6dc0:	21ff      	movs	r1, #255	; 0xff
 23f6dc2:	6860      	ldr	r0, [r4, #4]
  for (uint8_t i = 0; i < 10; i++) {
 23f6dc4:	3d01      	subs	r5, #1
    spiSend(0XFF);
 23f6dc6:	f7ff ff08 	bl	23f6bda <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
 23f6dca:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 23f6dce:	d1f7      	bne.n	23f6dc0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
 23f6dd0:	6863      	ldr	r3, [r4, #4]
 23f6dd2:	4629      	mov	r1, r5
 23f6dd4:	7d18      	ldrb	r0, [r3, #20]
 23f6dd6:	f003 fa2a 	bl	23fa22e <digitalWrite>
  }
 23f6dda:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
 23f6ddc:	2200      	movs	r2, #0
 23f6dde:	4620      	mov	r0, r4
 23f6de0:	4611      	mov	r1, r2
 23f6de2:	f7ff ff8b 	bl	23f6cfc <_ZN9SdSpiCard11cardCommandEhm>
 23f6de6:	2801      	cmp	r0, #1
 23f6de8:	4680      	mov	r8, r0
 23f6dea:	d018      	beq.n	23f6e1e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
 23f6dec:	3d01      	subs	r5, #1
 23f6dee:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 23f6df2:	d107      	bne.n	23f6e04 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
 23f6df4:	2320      	movs	r3, #32
  spiStop();
 23f6df6:	4620      	mov	r0, r4
 23f6df8:	7023      	strb	r3, [r4, #0]
 23f6dfa:	f7ff ff26 	bl	23f6c4a <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f6dfe:	2000      	movs	r0, #0
}
 23f6e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
 23f6e04:	21fd      	movs	r1, #253	; 0xfd
 23f6e06:	6860      	ldr	r0, [r4, #4]
 23f6e08:	f7ff fee7 	bl	23f6bda <_ZN9SdSpiCard7spiSendEh.isra.0>
 23f6e0c:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
 23f6e10:	6860      	ldr	r0, [r4, #4]
 23f6e12:	f7ff fee4 	bl	23f6bde <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
 23f6e16:	f1b8 0801 	subs.w	r8, r8, #1
 23f6e1a:	d1f9      	bne.n	23f6e10 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
 23f6e1c:	e7de      	b.n	23f6ddc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 23f6e1e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 23f6e22:	2108      	movs	r1, #8
 23f6e24:	4620      	mov	r0, r4
 23f6e26:	f7ff ff69 	bl	23f6cfc <_ZN9SdSpiCard11cardCommandEhm>
 23f6e2a:	2805      	cmp	r0, #5
 23f6e2c:	d114      	bne.n	23f6e58 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 23f6e2e:	2500      	movs	r5, #0
    m_type = value;
 23f6e30:	f884 800a 	strb.w	r8, [r4, #10]
 23f6e34:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 23f6e36:	462a      	mov	r2, r5
 23f6e38:	2129      	movs	r1, #41	; 0x29
 23f6e3a:	4620      	mov	r0, r4
 23f6e3c:	f7ff ff90 	bl	23f6d60 <_ZN9SdSpiCard8cardAcmdEhm>
 23f6e40:	4602      	mov	r2, r0
 23f6e42:	b1d8      	cbz	r0, 23f6e7c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
 23f6e44:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 23f6e48:	4639      	mov	r1, r7
 23f6e4a:	4620      	mov	r0, r4
 23f6e4c:	f7ff feca 	bl	23f6be4 <_ZN9SdSpiCard10isTimedOutEtt>
 23f6e50:	2800      	cmp	r0, #0
 23f6e52:	d0f0      	beq.n	23f6e36 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
 23f6e54:	2343      	movs	r3, #67	; 0x43
 23f6e56:	e7ce      	b.n	23f6df6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
 23f6e58:	2504      	movs	r5, #4
      m_status = spiReceive();
 23f6e5a:	6860      	ldr	r0, [r4, #4]
 23f6e5c:	f7ff febf 	bl	23f6bde <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
 23f6e60:	3d01      	subs	r5, #1
 23f6e62:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
 23f6e66:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
 23f6e68:	d1f7      	bne.n	23f6e5a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
 23f6e6a:	28aa      	cmp	r0, #170	; 0xaa
 23f6e6c:	d104      	bne.n	23f6e78 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
 23f6e6e:	2302      	movs	r3, #2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 23f6e70:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 23f6e74:	72a3      	strb	r3, [r4, #10]
    return m_type;
 23f6e76:	e7dd      	b.n	23f6e34 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
 23f6e78:	2325      	movs	r3, #37	; 0x25
 23f6e7a:	e7bc      	b.n	23f6df6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
 23f6e7c:	7aa3      	ldrb	r3, [r4, #10]
 23f6e7e:	2b02      	cmp	r3, #2
 23f6e80:	d119      	bne.n	23f6eb6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x136>
    if (cardCommand(CMD58, 0)) {
 23f6e82:	213a      	movs	r1, #58	; 0x3a
 23f6e84:	4620      	mov	r0, r4
 23f6e86:	f7ff ff39 	bl	23f6cfc <_ZN9SdSpiCard11cardCommandEhm>
 23f6e8a:	b108      	cbz	r0, 23f6e90 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
 23f6e8c:	2337      	movs	r3, #55	; 0x37
 23f6e8e:	e7b2      	b.n	23f6df6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
 23f6e90:	6860      	ldr	r0, [r4, #4]
 23f6e92:	f7ff fea4 	bl	23f6bde <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 23f6e96:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 23f6e9a:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
 23f6e9c:	bf08      	it	eq
 23f6e9e:	2303      	moveq	r3, #3
      spiReceive();
 23f6ea0:	6860      	ldr	r0, [r4, #4]
 23f6ea2:	bf08      	it	eq
 23f6ea4:	72a3      	strbeq	r3, [r4, #10]
 23f6ea6:	f7ff fe9a 	bl	23f6bde <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 23f6eaa:	6860      	ldr	r0, [r4, #4]
 23f6eac:	f7ff fe97 	bl	23f6bde <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 23f6eb0:	6860      	ldr	r0, [r4, #4]
 23f6eb2:	f7ff fe94 	bl	23f6bde <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
 23f6eb6:	4620      	mov	r0, r4
 23f6eb8:	f7ff fec7 	bl	23f6c4a <_ZN9SdSpiCard7spiStopEv>
 23f6ebc:	7930      	ldrb	r0, [r6, #4]
  m_spiDriver->setSpiSettings(settings);
 23f6ebe:	6863      	ldr	r3, [r4, #4]
 23f6ec0:	68b1      	ldr	r1, [r6, #8]
 23f6ec2:	89b2      	ldrh	r2, [r6, #12]
 23f6ec4:	7218      	strb	r0, [r3, #8]
 23f6ec6:	60d9      	str	r1, [r3, #12]
  return true;
 23f6ec8:	2001      	movs	r0, #1
 23f6eca:	821a      	strh	r2, [r3, #16]
 23f6ecc:	e798      	b.n	23f6e00 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
 23f6ece:	bf00      	nop
 23f6ed0:	0003d090 	.word	0x0003d090

023f6ed4 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 23f6ed4:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 23f6ed6:	7a83      	ldrb	r3, [r0, #10]
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 23f6ed8:	4615      	mov	r5, r2
  if (type() != SD_CARD_TYPE_SDHC) {
 23f6eda:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 23f6edc:	bf18      	it	ne
 23f6ede:	0249      	lslne	r1, r1, #9
  if (cardCommand(CMD17, blockNumber)) {
 23f6ee0:	460a      	mov	r2, r1
 23f6ee2:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 23f6ee4:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
 23f6ee6:	f7ff ff09 	bl	23f6cfc <_ZN9SdSpiCard11cardCommandEhm>
 23f6eea:	b130      	cbz	r0, 23f6efa <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
 23f6eec:	2330      	movs	r3, #48	; 0x30
 23f6eee:	7023      	strb	r3, [r4, #0]
  spiStop();
 23f6ef0:	4620      	mov	r0, r4
 23f6ef2:	f7ff feaa 	bl	23f6c4a <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f6ef6:	2500      	movs	r5, #0
 23f6ef8:	e00b      	b.n	23f6f12 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
 23f6efa:	4629      	mov	r1, r5
 23f6efc:	f44f 7200 	mov.w	r2, #512	; 0x200
 23f6f00:	4620      	mov	r0, r4
 23f6f02:	f7ff feb5 	bl	23f6c70 <_ZN9SdSpiCard8readDataEPhj>
 23f6f06:	4605      	mov	r5, r0
 23f6f08:	2800      	cmp	r0, #0
 23f6f0a:	d0f1      	beq.n	23f6ef0 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
 23f6f0c:	4620      	mov	r0, r4
 23f6f0e:	f7ff fe9c 	bl	23f6c4a <_ZN9SdSpiCard7spiStopEv>
}
 23f6f12:	4628      	mov	r0, r5
 23f6f14:	bd38      	pop	{r3, r4, r5, pc}

023f6f16 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
 23f6f16:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 23f6f18:	7a83      	ldrb	r3, [r0, #10]
bool SdSpiCard::readStart(uint32_t blockNumber) {
 23f6f1a:	460a      	mov	r2, r1
  if (type() != SD_CARD_TYPE_SDHC) {
 23f6f1c:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 23f6f1e:	bf18      	it	ne
 23f6f20:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
 23f6f22:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
 23f6f24:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
 23f6f26:	f7ff fee9 	bl	23f6cfc <_ZN9SdSpiCard11cardCommandEhm>
 23f6f2a:	b130      	cbz	r0, 23f6f3a <_ZN9SdSpiCard9readStartEm+0x24>
 23f6f2c:	2331      	movs	r3, #49	; 0x31
  spiStop();
 23f6f2e:	4620      	mov	r0, r4
 23f6f30:	7023      	strb	r3, [r4, #0]
 23f6f32:	f7ff fe8a 	bl	23f6c4a <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f6f36:	2000      	movs	r0, #0
}
 23f6f38:	bd10      	pop	{r4, pc}
  return true;
 23f6f3a:	2001      	movs	r0, #1
 23f6f3c:	e7fc      	b.n	23f6f38 <_ZN9SdSpiCard9readStartEm+0x22>

023f6f3e <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
 23f6f3e:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 23f6f40:	2200      	movs	r2, #0
 23f6f42:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
 23f6f44:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 23f6f46:	f7ff fed9 	bl	23f6cfc <_ZN9SdSpiCard11cardCommandEhm>
 23f6f4a:	b130      	cbz	r0, 23f6f5a <_ZN9SdSpiCard8readStopEv+0x1c>
 23f6f4c:	2328      	movs	r3, #40	; 0x28
  spiStop();
 23f6f4e:	4620      	mov	r0, r4
 23f6f50:	7023      	strb	r3, [r4, #0]
 23f6f52:	f7ff fe7a 	bl	23f6c4a <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f6f56:	2000      	movs	r0, #0
}
 23f6f58:	bd10      	pop	{r4, pc}
  spiStop();
 23f6f5a:	4620      	mov	r0, r4
 23f6f5c:	f7ff fe75 	bl	23f6c4a <_ZN9SdSpiCard7spiStopEv>
  return true;
 23f6f60:	2001      	movs	r0, #1
 23f6f62:	e7f9      	b.n	23f6f58 <_ZN9SdSpiCard8readStopEv+0x1a>

023f6f64 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 23f6f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f6f66:	4604      	mov	r4, r0
 23f6f68:	4616      	mov	r6, r2
 23f6f6a:	461f      	mov	r7, r3
  if (!readStart(block)) {
 23f6f6c:	f7ff ffd3 	bl	23f6f16 <_ZN9SdSpiCard9readStartEm>
 23f6f70:	b168      	cbz	r0, 23f6f8e <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
 23f6f72:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 23f6f74:	b2ab      	uxth	r3, r5
 23f6f76:	429f      	cmp	r7, r3
 23f6f78:	eb06 2145 	add.w	r1, r6, r5, lsl #9
 23f6f7c:	d909      	bls.n	23f6f92 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
 23f6f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 23f6f82:	4620      	mov	r0, r4
 23f6f84:	f7ff fe74 	bl	23f6c70 <_ZN9SdSpiCard8readDataEPhj>
 23f6f88:	3501      	adds	r5, #1
 23f6f8a:	2800      	cmp	r0, #0
 23f6f8c:	d1f2      	bne.n	23f6f74 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
 23f6f8e:	2000      	movs	r0, #0
 23f6f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
 23f6f92:	4620      	mov	r0, r4
}
 23f6f94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
 23f6f98:	f7ff bfd1 	b.w	23f6f3e <_ZN9SdSpiCard8readStopEv>

023f6f9c <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 23f6f9c:	b538      	push	{r3, r4, r5, lr}
 23f6f9e:	4604      	mov	r4, r0
 23f6fa0:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
 23f6fa2:	6840      	ldr	r0, [r0, #4]
 23f6fa4:	f7ff fe19 	bl	23f6bda <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
 23f6fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 23f6fac:	4629      	mov	r1, r5
 23f6fae:	6860      	ldr	r0, [r4, #4]
 23f6fb0:	f000 f8e6 	bl	23f7180 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
 23f6fb4:	21ff      	movs	r1, #255	; 0xff
 23f6fb6:	6860      	ldr	r0, [r4, #4]
 23f6fb8:	f7ff fe0f 	bl	23f6bda <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
 23f6fbc:	21ff      	movs	r1, #255	; 0xff
 23f6fbe:	6860      	ldr	r0, [r4, #4]
 23f6fc0:	f7ff fe0b 	bl	23f6bda <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
 23f6fc4:	6860      	ldr	r0, [r4, #4]
 23f6fc6:	f7ff fe0a 	bl	23f6bde <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 23f6fca:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 23f6fcc:	f000 001f 	and.w	r0, r0, #31
 23f6fd0:	2805      	cmp	r0, #5
 23f6fd2:	d006      	beq.n	23f6fe2 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
 23f6fd4:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
 23f6fd6:	4620      	mov	r0, r4
 23f6fd8:	7023      	strb	r3, [r4, #0]
 23f6fda:	f7ff fe36 	bl	23f6c4a <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f6fde:	2000      	movs	r0, #0
}
 23f6fe0:	bd38      	pop	{r3, r4, r5, pc}
  return true;
 23f6fe2:	2001      	movs	r0, #1
 23f6fe4:	e7fc      	b.n	23f6fe0 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

023f6fe6 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 23f6fe6:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 23f6fe8:	7a83      	ldrb	r3, [r0, #10]
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 23f6fea:	4615      	mov	r5, r2
  if (type() != SD_CARD_TYPE_SDHC) {
 23f6fec:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 23f6fee:	bf18      	it	ne
 23f6ff0:	0249      	lslne	r1, r1, #9
  if (cardCommand(CMD24, blockNumber)) {
 23f6ff2:	460a      	mov	r2, r1
 23f6ff4:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 23f6ff6:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
 23f6ff8:	f7ff fe80 	bl	23f6cfc <_ZN9SdSpiCard11cardCommandEhm>
 23f6ffc:	4606      	mov	r6, r0
 23f6ffe:	b130      	cbz	r0, 23f700e <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
 23f7000:	2332      	movs	r3, #50	; 0x32
 23f7002:	7023      	strb	r3, [r4, #0]
  spiStop();
 23f7004:	4620      	mov	r0, r4
 23f7006:	f7ff fe20 	bl	23f6c4a <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f700a:	2500      	movs	r5, #0
 23f700c:	e01f      	b.n	23f704e <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
 23f700e:	462a      	mov	r2, r5
 23f7010:	21fe      	movs	r1, #254	; 0xfe
 23f7012:	4620      	mov	r0, r4
 23f7014:	f7ff ffc2 	bl	23f6f9c <_ZN9SdSpiCard9writeDataEhPKh>
 23f7018:	2800      	cmp	r0, #0
 23f701a:	d0f3      	beq.n	23f7004 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 23f701c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 23f7020:	4620      	mov	r0, r4
 23f7022:	f7ff fe56 	bl	23f6cd2 <_ZN9SdSpiCard11waitNotBusyEt>
 23f7026:	4605      	mov	r5, r0
 23f7028:	b908      	cbnz	r0, 23f702e <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
 23f702a:	235a      	movs	r3, #90	; 0x5a
 23f702c:	e7e9      	b.n	23f7002 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
 23f702e:	4632      	mov	r2, r6
 23f7030:	210d      	movs	r1, #13
 23f7032:	4620      	mov	r0, r4
 23f7034:	f7ff fe62 	bl	23f6cfc <_ZN9SdSpiCard11cardCommandEhm>
 23f7038:	b108      	cbz	r0, 23f703e <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
 23f703a:	2329      	movs	r3, #41	; 0x29
 23f703c:	e7e1      	b.n	23f7002 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
 23f703e:	6860      	ldr	r0, [r4, #4]
 23f7040:	f7ff fdcd 	bl	23f6bde <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 23f7044:	2800      	cmp	r0, #0
 23f7046:	d1f8      	bne.n	23f703a <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
 23f7048:	4620      	mov	r0, r4
 23f704a:	f7ff fdfe 	bl	23f6c4a <_ZN9SdSpiCard7spiStopEv>
}
 23f704e:	4628      	mov	r0, r5
 23f7050:	bd70      	pop	{r4, r5, r6, pc}

023f7052 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
 23f7052:	b513      	push	{r0, r1, r4, lr}
 23f7054:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 23f7056:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
 23f705a:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 23f705c:	f7ff fe39 	bl	23f6cd2 <_ZN9SdSpiCard11waitNotBusyEt>
 23f7060:	9a01      	ldr	r2, [sp, #4]
 23f7062:	b930      	cbnz	r0, 23f7072 <_ZN9SdSpiCard9writeDataEPKh+0x20>
 23f7064:	235b      	movs	r3, #91	; 0x5b
 23f7066:	7023      	strb	r3, [r4, #0]
  spiStop();
 23f7068:	4620      	mov	r0, r4
 23f706a:	f7ff fdee 	bl	23f6c4a <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f706e:	2000      	movs	r0, #0
 23f7070:	e005      	b.n	23f707e <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 23f7072:	21fc      	movs	r1, #252	; 0xfc
 23f7074:	4620      	mov	r0, r4
 23f7076:	f7ff ff91 	bl	23f6f9c <_ZN9SdSpiCard9writeDataEhPKh>
 23f707a:	2800      	cmp	r0, #0
 23f707c:	d0f4      	beq.n	23f7068 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
 23f707e:	b002      	add	sp, #8
 23f7080:	bd10      	pop	{r4, pc}

023f7082 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 23f7082:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 23f7084:	7a83      	ldrb	r3, [r0, #10]
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 23f7086:	460a      	mov	r2, r1
  if (type() != SD_CARD_TYPE_SDHC) {
 23f7088:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 23f708a:	bf18      	it	ne
 23f708c:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
 23f708e:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 23f7090:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
 23f7092:	f7ff fe33 	bl	23f6cfc <_ZN9SdSpiCard11cardCommandEhm>
 23f7096:	b130      	cbz	r0, 23f70a6 <_ZN9SdSpiCard10writeStartEm+0x24>
 23f7098:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
 23f709a:	4620      	mov	r0, r4
 23f709c:	7023      	strb	r3, [r4, #0]
 23f709e:	f7ff fdd4 	bl	23f6c4a <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f70a2:	2000      	movs	r0, #0
}
 23f70a4:	bd10      	pop	{r4, pc}
  return true;
 23f70a6:	2001      	movs	r0, #1
 23f70a8:	e7fc      	b.n	23f70a4 <_ZN9SdSpiCard10writeStartEm+0x22>

023f70aa <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 23f70aa:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 23f70ac:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
 23f70b0:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 23f70b2:	f7ff fe0e 	bl	23f6cd2 <_ZN9SdSpiCard11waitNotBusyEt>
 23f70b6:	4605      	mov	r5, r0
 23f70b8:	b930      	cbnz	r0, 23f70c8 <_ZN9SdSpiCard9writeStopEv+0x1e>
 23f70ba:	2356      	movs	r3, #86	; 0x56
 23f70bc:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
 23f70be:	4620      	mov	r0, r4
 23f70c0:	f7ff fdc3 	bl	23f6c4a <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
 23f70c4:	4628      	mov	r0, r5
 23f70c6:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
 23f70c8:	21fd      	movs	r1, #253	; 0xfd
 23f70ca:	6860      	ldr	r0, [r4, #4]
 23f70cc:	f7ff fd85 	bl	23f6bda <_ZN9SdSpiCard7spiSendEh.isra.0>
 23f70d0:	e7f5      	b.n	23f70be <_ZN9SdSpiCard9writeStopEv+0x14>

023f70d2 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 23f70d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f70d4:	4604      	mov	r4, r0
 23f70d6:	4616      	mov	r6, r2
 23f70d8:	461f      	mov	r7, r3
  if (!writeStart(block)) {
 23f70da:	f7ff ffd2 	bl	23f7082 <_ZN9SdSpiCard10writeStartEm>
 23f70de:	b170      	cbz	r0, 23f70fe <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
 23f70e0:	2500      	movs	r5, #0
 23f70e2:	42bd      	cmp	r5, r7
  return writeStop();
 23f70e4:	4620      	mov	r0, r4
 23f70e6:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  for (size_t b = 0; b < count; b++, src += 512) {
 23f70ea:	d004      	beq.n	23f70f6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
 23f70ec:	f7ff ffb1 	bl	23f7052 <_ZN9SdSpiCard9writeDataEPKh>
 23f70f0:	b128      	cbz	r0, 23f70fe <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
 23f70f2:	3501      	adds	r5, #1
 23f70f4:	e7f5      	b.n	23f70e2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
 23f70f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
 23f70fa:	f7ff bfd6 	b.w	23f70aa <_ZN9SdSpiCard9writeStopEv>
  spiStop();
 23f70fe:	4620      	mov	r0, r4
 23f7100:	f7ff fda3 	bl	23f6c4a <_ZN9SdSpiCard7spiStopEv>
}
 23f7104:	2000      	movs	r0, #0
 23f7106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f7108 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 23f7108:	2201      	movs	r2, #1
 23f710a:	4b01      	ldr	r3, [pc, #4]	; (23f7110 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 23f710c:	701a      	strb	r2, [r3, #0]
}
 23f710e:	4770      	bx	lr
 23f7110:	1007aeb0 	.word	0x1007aeb0

023f7114 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
 23f7114:	1d01      	adds	r1, r0, #4
 23f7116:	6800      	ldr	r0, [r0, #0]
 23f7118:	f002 bbd6 	b.w	23f98c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

023f711c <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
 23f711c:	b510      	push	{r4, lr}
 23f711e:	4604      	mov	r4, r0
  m_csPin = csPin;
 23f7120:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
 23f7122:	6800      	ldr	r0, [r0, #0]
 23f7124:	f002 fb7c 	bl	23f9820 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
 23f7128:	7d20      	ldrb	r0, [r4, #20]
 23f712a:	2101      	movs	r1, #1
 23f712c:	f003 f86e 	bl	23fa20c <pinMode>
  digitalWrite(m_csPin, HIGH);
 23f7130:	7d20      	ldrb	r0, [r4, #20]
 23f7132:	2101      	movs	r1, #1
}
 23f7134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
 23f7138:	f003 b879 	b.w	23fa22e <digitalWrite>

023f713c <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
 23f713c:	6800      	ldr	r0, [r0, #0]
 23f713e:	f002 bba9 	b.w	23f9894 <_ZN8SPIClass14endTransactionEv>

023f7142 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
 23f7142:	21ff      	movs	r1, #255	; 0xff
 23f7144:	6800      	ldr	r0, [r0, #0]
 23f7146:	f002 bc2d 	b.w	23f99a4 <_ZN8SPIClass8transferEh>
	...

023f714c <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
 23f714c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
 23f714e:	2500      	movs	r5, #0
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
 23f7150:	4613      	mov	r3, r2
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 23f7152:	4a07      	ldr	r2, [pc, #28]	; (23f7170 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
  SPI_DMA_TransferCompleted = false;
 23f7154:	4c07      	ldr	r4, [pc, #28]	; (23f7174 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 23f7156:	9200      	str	r2, [sp, #0]
 23f7158:	6800      	ldr	r0, [r0, #0]
 23f715a:	460a      	mov	r2, r1
 23f715c:	4629      	mov	r1, r5
  SPI_DMA_TransferCompleted = false;
 23f715e:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 23f7160:	f002 fc26 	bl	23f99b0 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 23f7164:	7823      	ldrb	r3, [r4, #0]
 23f7166:	2b00      	cmp	r3, #0
 23f7168:	d0fc      	beq.n	23f7164 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
 23f716a:	2000      	movs	r0, #0
 23f716c:	b003      	add	sp, #12
 23f716e:	bd30      	pop	{r4, r5, pc}
 23f7170:	023f7109 	.word	0x023f7109
 23f7174:	1007aeb0 	.word	0x1007aeb0

023f7178 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
 23f7178:	6800      	ldr	r0, [r0, #0]
 23f717a:	f002 bc13 	b.w	23f99a4 <_ZN8SPIClass8transferEh>
	...

023f7180 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
 23f7180:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
 23f7182:	2500      	movs	r5, #0
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
 23f7184:	4613      	mov	r3, r2

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
 23f7186:	4a06      	ldr	r2, [pc, #24]	; (23f71a0 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
  SPI_DMA_TransferCompleted = false;
 23f7188:	4c06      	ldr	r4, [pc, #24]	; (23f71a4 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
 23f718a:	9200      	str	r2, [sp, #0]
 23f718c:	6800      	ldr	r0, [r0, #0]
 23f718e:	462a      	mov	r2, r5
  SPI_DMA_TransferCompleted = false;
 23f7190:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
 23f7192:	f002 fc0d 	bl	23f99b0 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
 23f7196:	7823      	ldrb	r3, [r4, #0]
 23f7198:	2b00      	cmp	r3, #0
 23f719a:	d0fc      	beq.n	23f7196 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
 23f719c:	b003      	add	sp, #12
 23f719e:	bd30      	pop	{r4, r5, pc}
 23f71a0:	023f7109 	.word	0x023f7109
 23f71a4:	1007aeb0 	.word	0x1007aeb0

023f71a8 <_ZN7TwoWire5writeEi.isra.0>:
 23f71a8:	6803      	ldr	r3, [r0, #0]
 23f71aa:	b2c9      	uxtb	r1, r1
 23f71ac:	689b      	ldr	r3, [r3, #8]
 23f71ae:	4718      	bx	r3

023f71b0 <_ZN5SVCS3C1Ev>:
 */
#include "i2cArduino.h"


SVCS3::SVCS3(){
  addr=0x63;
 23f71b0:	2363      	movs	r3, #99	; 0x63
 23f71b2:	7103      	strb	r3, [r0, #4]
}
 23f71b4:	4770      	bx	lr

023f71b6 <_ZN5SVCS34initEi>:
  _wire = the_wire;
  addr = address;
  return 0;
}

int SVCS3::init(int address){
 23f71b6:	b538      	push	{r3, r4, r5, lr}
 23f71b8:	4604      	mov	r4, r0
 23f71ba:	460d      	mov	r5, r1
  _wire = &Wire;
 23f71bc:	f003 f8aa 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23f71c0:	6020      	str	r0, [r4, #0]
  _wire->begin();
 23f71c2:	f001 fe77 	bl	23f8eb4 <_ZN7TwoWire5beginEv>
  addr = address;
  return 0;
}
 23f71c6:	2000      	movs	r0, #0
  addr = address;
 23f71c8:	7125      	strb	r5, [r4, #4]
}
 23f71ca:	bd38      	pop	{r3, r4, r5, pc}

023f71cc <_ZN5SVCS38i2cdelayEi>:


bool SVCS3::i2cdelay(int size){
 23f71cc:	b570      	push	{r4, r5, r6, lr}
 23f71ce:	4606      	mov	r6, r0
 23f71d0:	460d      	mov	r5, r1
  int i=0;
 23f71d2:	2400      	movs	r4, #0
  for (;_wire->available() < size && i<=size;i++) {
 23f71d4:	6830      	ldr	r0, [r6, #0]
 23f71d6:	6803      	ldr	r3, [r0, #0]
 23f71d8:	691b      	ldr	r3, [r3, #16]
 23f71da:	4798      	blx	r3
 23f71dc:	42a8      	cmp	r0, r5
 23f71de:	da06      	bge.n	23f71ee <_ZN5SVCS38i2cdelayEi+0x22>
 23f71e0:	42ac      	cmp	r4, r5
 23f71e2:	dc09      	bgt.n	23f71f8 <_ZN5SVCS38i2cdelayEi+0x2c>
	  delay(2);
 23f71e4:	2002      	movs	r0, #2
 23f71e6:	f001 f899 	bl	23f831c <delay>
  for (;_wire->available() < size && i<=size;i++) {
 23f71ea:	3401      	adds	r4, #1
 23f71ec:	e7f2      	b.n	23f71d4 <_ZN5SVCS38i2cdelayEi+0x8>
  }
  if(i>=size){
 23f71ee:	42ac      	cmp	r4, r5
 23f71f0:	bfac      	ite	ge
 23f71f2:	2000      	movge	r0, #0
 23f71f4:	2001      	movlt	r0, #1
	  return false;
  }else{
	  return true;
  }
}
 23f71f6:	bd70      	pop	{r4, r5, r6, pc}
	  return false;
 23f71f8:	2000      	movs	r0, #0
 23f71fa:	e7fc      	b.n	23f71f6 <_ZN5SVCS38i2cdelayEi+0x2a>

023f71fc <_ZN5SVCS38getStateEv>:

int SVCS3::getState(){ //-1:no data, 0:err, 1:ok
 23f71fc:	b510      	push	{r4, lr}
 23f71fe:	4604      	mov	r4, r0
  _wire->requestFrom(addr, (uint8_t)1);
 23f7200:	7901      	ldrb	r1, [r0, #4]
 23f7202:	2201      	movs	r2, #1
 23f7204:	6800      	ldr	r0, [r0, #0]
 23f7206:	f001 fe7c 	bl	23f8f02 <_ZN7TwoWire11requestFromEhj>
   if(i2cdelay(1)){
 23f720a:	2101      	movs	r1, #1
 23f720c:	4620      	mov	r0, r4
 23f720e:	f7ff ffdd 	bl	23f71cc <_ZN5SVCS38i2cdelayEi>
 23f7212:	b128      	cbz	r0, 23f7220 <_ZN5SVCS38getStateEv+0x24>
    return _wire->read();
 23f7214:	6820      	ldr	r0, [r4, #0]
  }else{
    return -1;
  }
}
 23f7216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return _wire->read();
 23f721a:	6803      	ldr	r3, [r0, #0]
 23f721c:	695b      	ldr	r3, [r3, #20]
 23f721e:	4718      	bx	r3
}
 23f7220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23f7224:	bd10      	pop	{r4, pc}

023f7226 <_ZN5SVCS36getValEh>:

int16_t SVCS3::getVal(byte reg){
 23f7226:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f7228:	4604      	mov	r4, r0
 23f722a:	460d      	mov	r5, r1

  _wire->beginTransmission(addr); // transmit to device
 23f722c:	7901      	ldrb	r1, [r0, #4]
 23f722e:	6800      	ldr	r0, [r0, #0]
 23f7230:	f001 fe6a 	bl	23f8f08 <_ZN7TwoWire17beginTransmissionEh>
  _wire->write(reg);              // sends one byte
 23f7234:	6820      	ldr	r0, [r4, #0]
 23f7236:	4629      	mov	r1, r5
 23f7238:	6803      	ldr	r3, [r0, #0]
 23f723a:	689b      	ldr	r3, [r3, #8]
 23f723c:	4798      	blx	r3
  _wire->endTransmission();    // stop transmitting
 23f723e:	6820      	ldr	r0, [r4, #0]
 23f7240:	f001 fe6d 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>
 
  _wire->requestFrom(addr, (uint8_t)2);
 23f7244:	7921      	ldrb	r1, [r4, #4]
 23f7246:	2202      	movs	r2, #2
 23f7248:	6820      	ldr	r0, [r4, #0]
 23f724a:	f001 fe5a 	bl	23f8f02 <_ZN7TwoWire11requestFromEhj>
  int16_t ret=0;
 23f724e:	2300      	movs	r3, #0
  if(i2cdelay(2)){
 23f7250:	2102      	movs	r1, #2
 23f7252:	4620      	mov	r0, r4
  int16_t ret=0;
 23f7254:	f8ad 3006 	strh.w	r3, [sp, #6]
  if(i2cdelay(2)){
 23f7258:	f7ff ffb8 	bl	23f71cc <_ZN5SVCS38i2cdelayEi>
 23f725c:	b158      	cbz	r0, 23f7276 <_ZN5SVCS36getValEh+0x50>
	byte *pointer = (byte *)&ret;
    pointer[0] = _wire->read();
 23f725e:	6820      	ldr	r0, [r4, #0]
 23f7260:	6803      	ldr	r3, [r0, #0]
 23f7262:	695b      	ldr	r3, [r3, #20]
 23f7264:	4798      	blx	r3
 23f7266:	f88d 0006 	strb.w	r0, [sp, #6]
    pointer[1] = _wire->read();
 23f726a:	6820      	ldr	r0, [r4, #0]
 23f726c:	6803      	ldr	r3, [r0, #0]
 23f726e:	695b      	ldr	r3, [r3, #20]
 23f7270:	4798      	blx	r3
 23f7272:	f88d 0007 	strb.w	r0, [sp, #7]
  }
  return ret;
}
 23f7276:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 23f727a:	b003      	add	sp, #12
 23f727c:	bd30      	pop	{r4, r5, pc}

023f727e <_ZN5SVCS310newReadingEv>:
    return 0;
  }
  return 1;
}

int SVCS3::newReading(){
 23f727e:	b510      	push	{r4, lr}
 23f7280:	4604      	mov	r4, r0
  _wire->beginTransmission(addr); // transmit to device
 23f7282:	7901      	ldrb	r1, [r0, #4]
 23f7284:	6800      	ldr	r0, [r0, #0]
 23f7286:	f001 fe3f 	bl	23f8f08 <_ZN7TwoWire17beginTransmissionEh>
  _wire->write(REG_READ_START);              // sends one byte
 23f728a:	2101      	movs	r1, #1
 23f728c:	6820      	ldr	r0, [r4, #0]
 23f728e:	f7ff ff8b 	bl	23f71a8 <_ZN7TwoWire5writeEi.isra.0>
  _wire->endTransmission();    // stop transmitting
 23f7292:	6820      	ldr	r0, [r4, #0]
 23f7294:	f001 fe43 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>
  delay(300);
 23f7298:	f44f 7096 	mov.w	r0, #300	; 0x12c
 23f729c:	f001 f83e 	bl	23f831c <delay>
  return getState();
 23f72a0:	4620      	mov	r0, r4
}
 23f72a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return getState();
 23f72a6:	f7ff bfa9 	b.w	23f71fc <_ZN5SVCS38getStateEv>
	...

023f72ac <_ZN5SVCS36getE25Ev>:

float SVCS3::getE25()
{
 23f72ac:	b508      	push	{r3, lr}
  return getVal(REG_READ_E25)/100.0;
 23f72ae:	2102      	movs	r1, #2
 23f72b0:	f7ff ffb9 	bl	23f7226 <_ZN5SVCS36getValEh>
 23f72b4:	f7ef fc0e 	bl	23e6ad4 <__aeabi_i2d>
 23f72b8:	2200      	movs	r2, #0
 23f72ba:	4b04      	ldr	r3, [pc, #16]	; (23f72cc <_ZN5SVCS36getE25Ev+0x20>)
 23f72bc:	f7ef fd9e 	bl	23e6dfc <__aeabi_ddiv>
 23f72c0:	f7ef ff6a 	bl	23e7198 <__aeabi_d2f>
}
 23f72c4:	ee00 0a10 	vmov	s0, r0
 23f72c8:	bd08      	pop	{r3, pc}
 23f72ca:	bf00      	nop
 23f72cc:	40590000 	.word	0x40590000

023f72d0 <_ZN5SVCS35getECEv>:

float SVCS3::getEC()
{
 23f72d0:	b508      	push	{r3, lr}
  return getVal(REG_READ_EC)/10.0;
 23f72d2:	2103      	movs	r1, #3
 23f72d4:	f7ff ffa7 	bl	23f7226 <_ZN5SVCS36getValEh>
 23f72d8:	f7ef fbfc 	bl	23e6ad4 <__aeabi_i2d>
 23f72dc:	2200      	movs	r2, #0
 23f72de:	4b04      	ldr	r3, [pc, #16]	; (23f72f0 <_ZN5SVCS35getECEv+0x20>)
 23f72e0:	f7ef fd8c 	bl	23e6dfc <__aeabi_ddiv>
 23f72e4:	f7ef ff58 	bl	23e7198 <__aeabi_d2f>
}
 23f72e8:	ee00 0a10 	vmov	s0, r0
 23f72ec:	bd08      	pop	{r3, pc}
 23f72ee:	bf00      	nop
 23f72f0:	40240000 	.word	0x40240000

023f72f4 <_ZN5SVCS37getTempEv>:

float SVCS3::getTemp()
{
 23f72f4:	b508      	push	{r3, lr}
  return getVal(REG_READ_TEMP)/100.0;
 23f72f6:	2104      	movs	r1, #4
 23f72f8:	f7ff ff95 	bl	23f7226 <_ZN5SVCS36getValEh>
 23f72fc:	f7ef fbea 	bl	23e6ad4 <__aeabi_i2d>
 23f7300:	2200      	movs	r2, #0
 23f7302:	4b04      	ldr	r3, [pc, #16]	; (23f7314 <_ZN5SVCS37getTempEv+0x20>)
 23f7304:	f7ef fd7a 	bl	23e6dfc <__aeabi_ddiv>
 23f7308:	f7ef ff46 	bl	23e7198 <__aeabi_d2f>
}
 23f730c:	ee00 0a10 	vmov	s0, r0
 23f7310:	bd08      	pop	{r3, pc}
 23f7312:	bf00      	nop
 23f7314:	40590000 	.word	0x40590000

023f7318 <_ZN5SVCS36getVWCEv>:

float SVCS3::getVWC()
{
 23f7318:	b508      	push	{r3, lr}
  return getVal(REG_READ_VWC)/10.0;
 23f731a:	2105      	movs	r1, #5
 23f731c:	f7ff ff83 	bl	23f7226 <_ZN5SVCS36getValEh>
 23f7320:	f7ef fbd8 	bl	23e6ad4 <__aeabi_i2d>
 23f7324:	2200      	movs	r2, #0
 23f7326:	4b04      	ldr	r3, [pc, #16]	; (23f7338 <_ZN5SVCS36getVWCEv+0x20>)
 23f7328:	f7ef fd68 	bl	23e6dfc <__aeabi_ddiv>
 23f732c:	f7ef ff34 	bl	23e7198 <__aeabi_d2f>
}
 23f7330:	ee00 0a10 	vmov	s0, r0
 23f7334:	bd08      	pop	{r3, pc}
 23f7336:	bf00      	nop
 23f7338:	40240000 	.word	0x40240000

023f733c <_ZN7SVMULTIC1Ev>:
 */
#include "i2cMultiSm.h"


SVMULTI::SVMULTI(){
  addr=101;
 23f733c:	2365      	movs	r3, #101	; 0x65
 23f733e:	8083      	strh	r3, [r0, #4]
}
 23f7340:	4770      	bx	lr

023f7342 <_ZN7SVMULTI4initEi>:
  _wire = the_wire;
  addr = address;
  return 0;
}

int SVMULTI::init(int address){
 23f7342:	b538      	push	{r3, r4, r5, lr}
 23f7344:	4604      	mov	r4, r0
 23f7346:	460d      	mov	r5, r1
  _wire = &Wire;
 23f7348:	f002 ffe4 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23f734c:	6020      	str	r0, [r4, #0]
  _wire->begin();
 23f734e:	f001 fdb1 	bl	23f8eb4 <_ZN7TwoWire5beginEv>
  addr = address;
  return 0;
}
 23f7352:	2000      	movs	r0, #0
  addr = address;
 23f7354:	80a5      	strh	r5, [r4, #4]
}
 23f7356:	bd38      	pop	{r3, r4, r5, pc}

023f7358 <_ZN7SVMULTI8i2cdelayEi>:


bool SVMULTI::i2cdelay(int size){
 23f7358:	b570      	push	{r4, r5, r6, lr}
 23f735a:	4606      	mov	r6, r0
 23f735c:	460d      	mov	r5, r1
  int i=0;
 23f735e:	2400      	movs	r4, #0
  for (;_wire->available() < size && i<=size;i++) {
 23f7360:	6830      	ldr	r0, [r6, #0]
 23f7362:	6803      	ldr	r3, [r0, #0]
 23f7364:	691b      	ldr	r3, [r3, #16]
 23f7366:	4798      	blx	r3
 23f7368:	42a8      	cmp	r0, r5
 23f736a:	da06      	bge.n	23f737a <_ZN7SVMULTI8i2cdelayEi+0x22>
 23f736c:	42ac      	cmp	r4, r5
 23f736e:	dc09      	bgt.n	23f7384 <_ZN7SVMULTI8i2cdelayEi+0x2c>
	  delay(2);
 23f7370:	2002      	movs	r0, #2
 23f7372:	f000 ffd3 	bl	23f831c <delay>
  for (;_wire->available() < size && i<=size;i++) {
 23f7376:	3401      	adds	r4, #1
 23f7378:	e7f2      	b.n	23f7360 <_ZN7SVMULTI8i2cdelayEi+0x8>
  }
  if(i>=size){
 23f737a:	42ac      	cmp	r4, r5
 23f737c:	bfac      	ite	ge
 23f737e:	2000      	movge	r0, #0
 23f7380:	2001      	movlt	r0, #1
	  return false;
  }else{
	  return true;
  }
}
 23f7382:	bd70      	pop	{r4, r5, r6, pc}
	  return false;
 23f7384:	2000      	movs	r0, #0
 23f7386:	e7fc      	b.n	23f7382 <_ZN7SVMULTI8i2cdelayEi+0x2a>

023f7388 <_ZN7SVMULTI8getStateEv>:

int SVMULTI::getState(){ //-1:no data, 0:err, 1:ok
 23f7388:	b510      	push	{r4, lr}
 23f738a:	4604      	mov	r4, r0
  _wire->requestFrom(addr, (uint8_t)1);
 23f738c:	7901      	ldrb	r1, [r0, #4]
 23f738e:	2201      	movs	r2, #1
 23f7390:	6800      	ldr	r0, [r0, #0]
 23f7392:	f001 fdb6 	bl	23f8f02 <_ZN7TwoWire11requestFromEhj>
   if(i2cdelay(1)){
 23f7396:	2101      	movs	r1, #1
 23f7398:	4620      	mov	r0, r4
 23f739a:	f7ff ffdd 	bl	23f7358 <_ZN7SVMULTI8i2cdelayEi>
 23f739e:	b128      	cbz	r0, 23f73ac <_ZN7SVMULTI8getStateEv+0x24>
    return _wire->read();
 23f73a0:	6820      	ldr	r0, [r4, #0]
  }else{
    return -1;
  }
}
 23f73a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return _wire->read();
 23f73a6:	6803      	ldr	r3, [r0, #0]
 23f73a8:	695b      	ldr	r3, [r3, #20]
 23f73aa:	4718      	bx	r3
}
 23f73ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23f73b0:	bd10      	pop	{r4, pc}

023f73b2 <_ZN7SVMULTI10newReadingEv>:
    return 0;
  }
  return 1;
}

int SVMULTI::newReading(){
 23f73b2:	b510      	push	{r4, lr}
 23f73b4:	4604      	mov	r4, r0
  _wire->beginTransmission(addr); // transmit to device
 23f73b6:	8881      	ldrh	r1, [r0, #4]
 23f73b8:	6800      	ldr	r0, [r0, #0]
 23f73ba:	f001 fda9 	bl	23f8f10 <_ZN7TwoWire17beginTransmissionEi>
  _wire->write(REG_READ_START);              // sends one byte
 23f73be:	6820      	ldr	r0, [r4, #0]
 23f73c0:	2101      	movs	r1, #1
 23f73c2:	6803      	ldr	r3, [r0, #0]
 23f73c4:	689b      	ldr	r3, [r3, #8]
 23f73c6:	4798      	blx	r3
  _wire->endTransmission();    // stop transmitting
 23f73c8:	6820      	ldr	r0, [r4, #0]
 23f73ca:	f001 fda8 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>
  delay(300);
 23f73ce:	f44f 7096 	mov.w	r0, #300	; 0x12c
 23f73d2:	f000 ffa3 	bl	23f831c <delay>
  return getState();
 23f73d6:	4620      	mov	r0, r4
}
 23f73d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return getState();
 23f73dc:	f7ff bfd4 	b.w	23f7388 <_ZN7SVMULTI8getStateEv>

023f73e0 <_ZN7SVMULTI6getRawEP6vals_t>:
	}

}


void SVMULTI::getRaw(vals_t *vals){
 23f73e0:	b570      	push	{r4, r5, r6, lr}
 23f73e2:	4604      	mov	r4, r0
 23f73e4:	460d      	mov	r5, r1
  _wire->beginTransmission(addr); // transmit to device
 23f73e6:	8881      	ldrh	r1, [r0, #4]
 23f73e8:	6800      	ldr	r0, [r0, #0]
 23f73ea:	f001 fd91 	bl	23f8f10 <_ZN7TwoWire17beginTransmissionEi>
  _wire->write(REG_GET_DATA);              // sends one byte
 23f73ee:	6820      	ldr	r0, [r4, #0]
 23f73f0:	2109      	movs	r1, #9
 23f73f2:	6803      	ldr	r3, [r0, #0]
 23f73f4:	689b      	ldr	r3, [r3, #8]
 23f73f6:	4798      	blx	r3
  _wire->endTransmission();    // stop transmitting
 23f73f8:	6820      	ldr	r0, [r4, #0]
 23f73fa:	f001 fd90 	bl	23f8f1e <_ZN7TwoWire15endTransmissionEv>
  _wire->requestFrom(addr, (uint8_t)14);
 23f73fe:	7921      	ldrb	r1, [r4, #4]
 23f7400:	220e      	movs	r2, #14
 23f7402:	6820      	ldr	r0, [r4, #0]
 23f7404:	f001 fd7d 	bl	23f8f02 <_ZN7TwoWire11requestFromEhj>
   byte *p1 = (byte*)vals;
  if(i2cdelay(14)){
 23f7408:	210e      	movs	r1, #14
 23f740a:	4620      	mov	r0, r4
 23f740c:	f7ff ffa4 	bl	23f7358 <_ZN7SVMULTI8i2cdelayEi>
 23f7410:	b148      	cbz	r0, 23f7426 <_ZN7SVMULTI6getRawEP6vals_t+0x46>
 23f7412:	1e6e      	subs	r6, r5, #1
 23f7414:	350d      	adds	r5, #13
    // Wire.readBytes((byte*)&vals, 14);
	  for(int i = 0; i<14; i++){
		  p1[i] = _wire->read();
 23f7416:	6820      	ldr	r0, [r4, #0]
 23f7418:	6803      	ldr	r3, [r0, #0]
 23f741a:	695b      	ldr	r3, [r3, #20]
 23f741c:	4798      	blx	r3
 23f741e:	f806 0f01 	strb.w	r0, [r6, #1]!
	  for(int i = 0; i<14; i++){
 23f7422:	42ae      	cmp	r6, r5
 23f7424:	d1f7      	bne.n	23f7416 <_ZN7SVMULTI6getRawEP6vals_t+0x36>
	  }
  }
}
 23f7426:	bd70      	pop	{r4, r5, r6, pc}

023f7428 <_ZN7SVMULTI7getDataEP10soil_ret_t>:
void SVMULTI::getData(soil_ret_t *data){
 23f7428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f742c:	ed2d 8b02 	vpush	{d8}
 23f7430:	b085      	sub	sp, #20
 23f7432:	460c      	mov	r4, r1
  getRaw(&vals);
 23f7434:	4669      	mov	r1, sp
 23f7436:	f7ff ffd3 	bl	23f73e0 <_ZN7SVMULTI6getRawEP6vals_t>
 23f743a:	ed9f 8b3b 	vldr	d8, [pc, #236]	; 23f7528 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x100>
 23f743e:	f10d 0a04 	add.w	sl, sp, #4
 23f7442:	f104 0508 	add.w	r5, r4, #8
 23f7446:	f104 0b1c 	add.w	fp, r4, #28
		  data->dp[a] = vals.dp[a]/100.0;
 23f744a:	f93a 0b02 	ldrsh.w	r0, [sl], #2
 23f744e:	f7ef fb41 	bl	23e6ad4 <__aeabi_i2d>
 23f7452:	2200      	movs	r2, #0
 23f7454:	4b3e      	ldr	r3, [pc, #248]	; (23f7550 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x128>)
 23f7456:	f7ef fcd1 	bl	23e6dfc <__aeabi_ddiv>
 23f745a:	f7ef fe9d 	bl	23e7198 <__aeabi_d2f>
 23f745e:	6028      	str	r0, [r5, #0]
 23f7460:	f7ef fb4a 	bl	23e6af8 <__aeabi_f2d>
 23f7464:	eeb0 1a48 	vmov.f32	s2, s16
 23f7468:	eef0 1a68 	vmov.f32	s3, s17
 23f746c:	ec41 0b10 	vmov	d0, r0, r1
 23f7470:	f003 fafe 	bl	23faa70 <pow>
 23f7474:	f855 0b04 	ldr.w	r0, [r5], #4
 23f7478:	ec59 8b10 	vmov	r8, r9, d0
 23f747c:	f7ef fb3c 	bl	23e6af8 <__aeabi_f2d>
		  data->vwc[a] = (4.3e-6 * pow(data->dp[a],3) - 5.5e-4*pow(data->dp[a],2) + 2.92e-2*data->dp[a] - 5.3e-2)* 100.0;
 23f7480:	a32b      	add	r3, pc, #172	; (adr r3, 23f7530 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x108>)
 23f7482:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f7486:	4606      	mov	r6, r0
 23f7488:	460f      	mov	r7, r1
 23f748a:	4640      	mov	r0, r8
 23f748c:	4649      	mov	r1, r9
 23f748e:	f7ef fb8b 	bl	23e6ba8 <__aeabi_dmul>
 23f7492:	4632      	mov	r2, r6
 23f7494:	4680      	mov	r8, r0
 23f7496:	4689      	mov	r9, r1
 23f7498:	463b      	mov	r3, r7
 23f749a:	4630      	mov	r0, r6
 23f749c:	4639      	mov	r1, r7
 23f749e:	f7ef fb83 	bl	23e6ba8 <__aeabi_dmul>
 23f74a2:	a325      	add	r3, pc, #148	; (adr r3, 23f7538 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x110>)
 23f74a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f74a8:	f7ef fb7e 	bl	23e6ba8 <__aeabi_dmul>
 23f74ac:	4602      	mov	r2, r0
 23f74ae:	460b      	mov	r3, r1
 23f74b0:	4640      	mov	r0, r8
 23f74b2:	4649      	mov	r1, r9
 23f74b4:	f7ef f9c0 	bl	23e6838 <__aeabi_dsub>
 23f74b8:	a321      	add	r3, pc, #132	; (adr r3, 23f7540 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x118>)
 23f74ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f74be:	4680      	mov	r8, r0
 23f74c0:	4689      	mov	r9, r1
 23f74c2:	4630      	mov	r0, r6
 23f74c4:	4639      	mov	r1, r7
 23f74c6:	f7ef fb6f 	bl	23e6ba8 <__aeabi_dmul>
 23f74ca:	4602      	mov	r2, r0
 23f74cc:	460b      	mov	r3, r1
 23f74ce:	4640      	mov	r0, r8
 23f74d0:	4649      	mov	r1, r9
 23f74d2:	f7ef f9b3 	bl	23e683c <__adddf3>
 23f74d6:	a31c      	add	r3, pc, #112	; (adr r3, 23f7548 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x120>)
 23f74d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f74dc:	f7ef f9ac 	bl	23e6838 <__aeabi_dsub>
 23f74e0:	2200      	movs	r2, #0
 23f74e2:	4b1b      	ldr	r3, [pc, #108]	; (23f7550 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x128>)
 23f74e4:	f7ef fb60 	bl	23e6ba8 <__aeabi_dmul>
 23f74e8:	f7ef fe56 	bl	23e7198 <__aeabi_d2f>
  for(int a=0;a<MULTI_ZONES;a++){
 23f74ec:	45ab      	cmp	fp, r5
		  data->vwc[a] = (4.3e-6 * pow(data->dp[a],3) - 5.5e-4*pow(data->dp[a],2) + 2.92e-2*data->dp[a] - 5.3e-2)* 100.0;
 23f74ee:	6128      	str	r0, [r5, #16]
  for(int a=0;a<MULTI_ZONES;a++){
 23f74f0:	d1ab      	bne.n	23f744a <_ZN7SVMULTI7getDataEP10soil_ret_t+0x22>
		  data->temp[a] = vals.temp[a]/100.0;
 23f74f2:	f9bd 0000 	ldrsh.w	r0, [sp]
 23f74f6:	f7ef faed 	bl	23e6ad4 <__aeabi_i2d>
 23f74fa:	2200      	movs	r2, #0
 23f74fc:	4b14      	ldr	r3, [pc, #80]	; (23f7550 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x128>)
 23f74fe:	f7ef fc7d 	bl	23e6dfc <__aeabi_ddiv>
 23f7502:	f7ef fe49 	bl	23e7198 <__aeabi_d2f>
 23f7506:	6020      	str	r0, [r4, #0]
 23f7508:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 23f750c:	f7ef fae2 	bl	23e6ad4 <__aeabi_i2d>
 23f7510:	2200      	movs	r2, #0
 23f7512:	4b0f      	ldr	r3, [pc, #60]	; (23f7550 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x128>)
 23f7514:	f7ef fc72 	bl	23e6dfc <__aeabi_ddiv>
 23f7518:	f7ef fe3e 	bl	23e7198 <__aeabi_d2f>
 23f751c:	6060      	str	r0, [r4, #4]
}
 23f751e:	b005      	add	sp, #20
 23f7520:	ecbd 8b02 	vpop	{d8}
 23f7524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f7528:	00000000 	.word	0x00000000
 23f752c:	40080000 	.word	0x40080000
 23f7530:	fff6c5c5 	.word	0xfff6c5c5
 23f7534:	3ed20916 	.word	0x3ed20916
 23f7538:	01a36e2f 	.word	0x01a36e2f
 23f753c:	3f4205bc 	.word	0x3f4205bc
 23f7540:	d42c3c9f 	.word	0xd42c3c9f
 23f7544:	3f9de69a 	.word	0x3f9de69a
 23f7548:	e5604189 	.word	0xe5604189
 23f754c:	3fab22d0 	.word	0x3fab22d0
 23f7550:	40590000 	.word	0x40590000

023f7554 <cellular_credentials_set>:
DYNALIB_FN(5, hal_cellular, cellular_pdp_deactivate, cellular_result_t(void*))
DYNALIB_FN(6, hal_cellular, cellular_gprs_attach, cellular_result_t(CellularCredentials*, void*))
DYNALIB_FN(7, hal_cellular, cellular_gprs_detach, cellular_result_t(void*))
DYNALIB_FN(8, hal_cellular, cellular_fetch_ipconfig, cellular_result_t(CellularConfig*, void*))
DYNALIB_FN(9, hal_cellular, cellular_device_info, cellular_result_t(CellularDevice*, void*))
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
 23f7554:	b509      	push	{r0, r3, lr}
 23f7556:	4804      	ldr	r0, [pc, #16]	; (23f7568 <cellular_credentials_set+0x14>)
 23f7558:	6800      	ldr	r0, [r0, #0]
 23f755a:	4b04      	ldr	r3, [pc, #16]	; (23f756c <cellular_credentials_set+0x18>)
 23f755c:	4403      	add	r3, r0
 23f755e:	681b      	ldr	r3, [r3, #0]
 23f7560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f7562:	9302      	str	r3, [sp, #8]
 23f7564:	bd09      	pop	{r0, r3, pc}
 23f7566:	0000      	.short	0x0000
 23f7568:	1006a198 	.word	0x1006a198
 23f756c:	0000006c 	.word	0x0000006c

023f7570 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
 23f7570:	b509      	push	{r0, r3, lr}
 23f7572:	4804      	ldr	r0, [pc, #16]	; (23f7584 <cellular_signal+0x14>)
 23f7574:	6800      	ldr	r0, [r0, #0]
 23f7576:	4b04      	ldr	r3, [pc, #16]	; (23f7588 <cellular_signal+0x18>)
 23f7578:	4403      	add	r3, r0
 23f757a:	681b      	ldr	r3, [r3, #0]
 23f757c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f757e:	9302      	str	r3, [sp, #8]
 23f7580:	bd09      	pop	{r0, r3, pc}
 23f7582:	0000      	.short	0x0000
 23f7584:	1006a198 	.word	0x1006a198
 23f7588:	0000006c 	.word	0x0000006c

023f758c <cellular_set_active_sim>:
DYNALIB_FN(29, hal_cellular, cellular_sim_to_network_provider, cellular_result_t(void*))
DYNALIB_FN(30, hal_cellular, cellular_network_provider_data_get, CellularNetProvData(void*))
DYNALIB_FN(31, hal_cellular, cellular_lock, int(void*))
DYNALIB_FN(32, hal_cellular, cellular_unlock, void(void*))
DYNALIB_FN(33, hal_cellular, cellular_set_power_mode, void(int mode, void* reserved))
DYNALIB_FN(34, hal_cellular, cellular_set_active_sim, cellular_result_t(int, void*))
 23f758c:	b509      	push	{r0, r3, lr}
 23f758e:	4804      	ldr	r0, [pc, #16]	; (23f75a0 <cellular_set_active_sim+0x14>)
 23f7590:	6800      	ldr	r0, [r0, #0]
 23f7592:	4b04      	ldr	r3, [pc, #16]	; (23f75a4 <cellular_set_active_sim+0x18>)
 23f7594:	4403      	add	r3, r0
 23f7596:	681b      	ldr	r3, [r3, #0]
 23f7598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23f759c:	9302      	str	r3, [sp, #8]
 23f759e:	bd09      	pop	{r0, r3, pc}
 23f75a0:	1006a198 	.word	0x1006a198
 23f75a4:	0000006c 	.word	0x0000006c

023f75a8 <cellular_get_active_sim>:
DYNALIB_FN(35, hal_cellular, cellular_get_active_sim, cellular_result_t(int*, void*))
 23f75a8:	b509      	push	{r0, r3, lr}
 23f75aa:	4804      	ldr	r0, [pc, #16]	; (23f75bc <cellular_get_active_sim+0x14>)
 23f75ac:	6800      	ldr	r0, [r0, #0]
 23f75ae:	4b04      	ldr	r3, [pc, #16]	; (23f75c0 <cellular_get_active_sim+0x18>)
 23f75b0:	4403      	add	r3, r0
 23f75b2:	681b      	ldr	r3, [r3, #0]
 23f75b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 23f75b8:	9302      	str	r3, [sp, #8]
 23f75ba:	bd09      	pop	{r0, r3, pc}
 23f75bc:	1006a198 	.word	0x1006a198
 23f75c0:	0000006c 	.word	0x0000006c

023f75c4 <cellular_credentials_clear>:
DYNALIB_FN(36, hal_cellular, cellular_credentials_clear, int(void*))
 23f75c4:	b509      	push	{r0, r3, lr}
 23f75c6:	4804      	ldr	r0, [pc, #16]	; (23f75d8 <cellular_credentials_clear+0x14>)
 23f75c8:	6800      	ldr	r0, [r0, #0]
 23f75ca:	4b04      	ldr	r3, [pc, #16]	; (23f75dc <cellular_credentials_clear+0x18>)
 23f75cc:	4403      	add	r3, r0
 23f75ce:	681b      	ldr	r3, [r3, #0]
 23f75d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 23f75d4:	9302      	str	r3, [sp, #8]
 23f75d6:	bd09      	pop	{r0, r3, pc}
 23f75d8:	1006a198 	.word	0x1006a198
 23f75dc:	0000006c 	.word	0x0000006c

023f75e0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23f75e0:	b509      	push	{r0, r3, lr}
 23f75e2:	4804      	ldr	r0, [pc, #16]	; (23f75f4 <os_mutex_recursive_create+0x14>)
 23f75e4:	6800      	ldr	r0, [r0, #0]
 23f75e6:	4b04      	ldr	r3, [pc, #16]	; (23f75f8 <os_mutex_recursive_create+0x18>)
 23f75e8:	4403      	add	r3, r0
 23f75ea:	681b      	ldr	r3, [r3, #0]
 23f75ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f75ee:	9302      	str	r3, [sp, #8]
 23f75f0:	bd09      	pop	{r0, r3, pc}
 23f75f2:	0000      	.short	0x0000
 23f75f4:	1006a198 	.word	0x1006a198
 23f75f8:	00000030 	.word	0x00000030

023f75fc <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, hal_watchdog_reset_flagged_deprecated, bool(void))
DYNALIB_FN(17, hal_core, hal_watchdog_refresh_deprecated, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
 23f75fc:	b509      	push	{r0, r3, lr}
 23f75fe:	4804      	ldr	r0, [pc, #16]	; (23f7610 <HAL_Core_Runtime_Info+0x14>)
 23f7600:	6800      	ldr	r0, [r0, #0]
 23f7602:	4b04      	ldr	r3, [pc, #16]	; (23f7614 <HAL_Core_Runtime_Info+0x18>)
 23f7604:	4403      	add	r3, r0
 23f7606:	681b      	ldr	r3, [r3, #0]
 23f7608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f760a:	9302      	str	r3, [sp, #8]
 23f760c:	bd09      	pop	{r0, r3, pc}
 23f760e:	0000      	.short	0x0000
 23f7610:	1006a198 	.word	0x1006a198
 23f7614:	0000001c 	.word	0x0000001c

023f7618 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23f7618:	b509      	push	{r0, r3, lr}
 23f761a:	4804      	ldr	r0, [pc, #16]	; (23f762c <HAL_RNG_GetRandomNumber+0x14>)
 23f761c:	6800      	ldr	r0, [r0, #0]
 23f761e:	4b04      	ldr	r3, [pc, #16]	; (23f7630 <HAL_RNG_GetRandomNumber+0x18>)
 23f7620:	4403      	add	r3, r0
 23f7622:	681b      	ldr	r3, [r3, #0]
 23f7624:	685b      	ldr	r3, [r3, #4]
 23f7626:	9302      	str	r3, [sp, #8]
 23f7628:	bd09      	pop	{r0, r3, pc}
 23f762a:	0000      	.short	0x0000
 23f762c:	1006a198 	.word	0x1006a198
 23f7630:	00000000 	.word	0x00000000

023f7634 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23f7634:	b509      	push	{r0, r3, lr}
 23f7636:	4804      	ldr	r0, [pc, #16]	; (23f7648 <HAL_Delay_Microseconds+0x14>)
 23f7638:	6800      	ldr	r0, [r0, #0]
 23f763a:	4b04      	ldr	r3, [pc, #16]	; (23f764c <HAL_Delay_Microseconds+0x18>)
 23f763c:	4403      	add	r3, r0
 23f763e:	681b      	ldr	r3, [r3, #0]
 23f7640:	68db      	ldr	r3, [r3, #12]
 23f7642:	9302      	str	r3, [sp, #8]
 23f7644:	bd09      	pop	{r0, r3, pc}
 23f7646:	0000      	.short	0x0000
 23f7648:	1006a198 	.word	0x1006a198
 23f764c:	00000000 	.word	0x00000000

023f7650 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 23f7650:	b509      	push	{r0, r3, lr}
 23f7652:	4804      	ldr	r0, [pc, #16]	; (23f7664 <HAL_Timer_Get_Micro_Seconds+0x14>)
 23f7654:	6800      	ldr	r0, [r0, #0]
 23f7656:	4b04      	ldr	r3, [pc, #16]	; (23f7668 <HAL_Timer_Get_Micro_Seconds+0x18>)
 23f7658:	4403      	add	r3, r0
 23f765a:	681b      	ldr	r3, [r3, #0]
 23f765c:	691b      	ldr	r3, [r3, #16]
 23f765e:	9302      	str	r3, [sp, #8]
 23f7660:	bd09      	pop	{r0, r3, pc}
 23f7662:	0000      	.short	0x0000
 23f7664:	1006a198 	.word	0x1006a198
 23f7668:	00000000 	.word	0x00000000

023f766c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23f766c:	b509      	push	{r0, r3, lr}
 23f766e:	4804      	ldr	r0, [pc, #16]	; (23f7680 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23f7670:	6800      	ldr	r0, [r0, #0]
 23f7672:	4b04      	ldr	r3, [pc, #16]	; (23f7684 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23f7674:	4403      	add	r3, r0
 23f7676:	681b      	ldr	r3, [r3, #0]
 23f7678:	695b      	ldr	r3, [r3, #20]
 23f767a:	9302      	str	r3, [sp, #8]
 23f767c:	bd09      	pop	{r0, r3, pc}
 23f767e:	0000      	.short	0x0000
 23f7680:	1006a198 	.word	0x1006a198
 23f7684:	00000000 	.word	0x00000000

023f7688 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 23f7688:	b509      	push	{r0, r3, lr}
 23f768a:	4804      	ldr	r0, [pc, #16]	; (23f769c <HAL_EEPROM_Init+0x14>)
 23f768c:	6800      	ldr	r0, [r0, #0]
 23f768e:	4b04      	ldr	r3, [pc, #16]	; (23f76a0 <HAL_EEPROM_Init+0x18>)
 23f7690:	4403      	add	r3, r0
 23f7692:	681b      	ldr	r3, [r3, #0]
 23f7694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f7696:	9302      	str	r3, [sp, #8]
 23f7698:	bd09      	pop	{r0, r3, pc}
 23f769a:	0000      	.short	0x0000
 23f769c:	1006a198 	.word	0x1006a198
 23f76a0:	00000000 	.word	0x00000000

023f76a4 <HAL_EEPROM_Length>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))
 23f76a4:	b509      	push	{r0, r3, lr}
 23f76a6:	4804      	ldr	r0, [pc, #16]	; (23f76b8 <HAL_EEPROM_Length+0x14>)
 23f76a8:	6800      	ldr	r0, [r0, #0]
 23f76aa:	4b04      	ldr	r3, [pc, #16]	; (23f76bc <HAL_EEPROM_Length+0x18>)
 23f76ac:	4403      	add	r3, r0
 23f76ae:	681b      	ldr	r3, [r3, #0]
 23f76b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f76b2:	9302      	str	r3, [sp, #8]
 23f76b4:	bd09      	pop	{r0, r3, pc}
 23f76b6:	0000      	.short	0x0000
 23f76b8:	1006a198 	.word	0x1006a198
 23f76bc:	00000000 	.word	0x00000000

023f76c0 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 23f76c0:	b509      	push	{r0, r3, lr}
 23f76c2:	4804      	ldr	r0, [pc, #16]	; (23f76d4 <HAL_EEPROM_Get+0x14>)
 23f76c4:	6800      	ldr	r0, [r0, #0]
 23f76c6:	4b04      	ldr	r3, [pc, #16]	; (23f76d8 <HAL_EEPROM_Get+0x18>)
 23f76c8:	4403      	add	r3, r0
 23f76ca:	681b      	ldr	r3, [r3, #0]
 23f76cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f76ce:	9302      	str	r3, [sp, #8]
 23f76d0:	bd09      	pop	{r0, r3, pc}
 23f76d2:	0000      	.short	0x0000
 23f76d4:	1006a198 	.word	0x1006a198
 23f76d8:	00000000 	.word	0x00000000

023f76dc <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 23f76dc:	b509      	push	{r0, r3, lr}
 23f76de:	4804      	ldr	r0, [pc, #16]	; (23f76f0 <HAL_EEPROM_Put+0x14>)
 23f76e0:	6800      	ldr	r0, [r0, #0]
 23f76e2:	4b04      	ldr	r3, [pc, #16]	; (23f76f4 <HAL_EEPROM_Put+0x18>)
 23f76e4:	4403      	add	r3, r0
 23f76e6:	681b      	ldr	r3, [r3, #0]
 23f76e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f76ea:	9302      	str	r3, [sp, #8]
 23f76ec:	bd09      	pop	{r0, r3, pc}
 23f76ee:	0000      	.short	0x0000
 23f76f0:	1006a198 	.word	0x1006a198
 23f76f4:	00000000 	.word	0x00000000

023f76f8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 23f76f8:	b509      	push	{r0, r3, lr}
 23f76fa:	4804      	ldr	r0, [pc, #16]	; (23f770c <hal_rtc_time_is_valid+0x14>)
 23f76fc:	6800      	ldr	r0, [r0, #0]
 23f76fe:	4b04      	ldr	r3, [pc, #16]	; (23f7710 <hal_rtc_time_is_valid+0x18>)
 23f7700:	4403      	add	r3, r0
 23f7702:	681b      	ldr	r3, [r3, #0]
 23f7704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f7706:	9302      	str	r3, [sp, #8]
 23f7708:	bd09      	pop	{r0, r3, pc}
 23f770a:	0000      	.short	0x0000
 23f770c:	1006a198 	.word	0x1006a198
 23f7710:	00000000 	.word	0x00000000

023f7714 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 23f7714:	b509      	push	{r0, r3, lr}
 23f7716:	4804      	ldr	r0, [pc, #16]	; (23f7728 <hal_timer_millis+0x14>)
 23f7718:	6800      	ldr	r0, [r0, #0]
 23f771a:	4b04      	ldr	r3, [pc, #16]	; (23f772c <hal_timer_millis+0x18>)
 23f771c:	4403      	add	r3, r0
 23f771e:	681b      	ldr	r3, [r3, #0]
 23f7720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23f7722:	9302      	str	r3, [sp, #8]
 23f7724:	bd09      	pop	{r0, r3, pc}
 23f7726:	0000      	.short	0x0000
 23f7728:	1006a198 	.word	0x1006a198
 23f772c:	00000000 	.word	0x00000000

023f7730 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 23f7730:	b509      	push	{r0, r3, lr}
 23f7732:	4804      	ldr	r0, [pc, #16]	; (23f7744 <hal_rtc_get_time+0x14>)
 23f7734:	6800      	ldr	r0, [r0, #0]
 23f7736:	4b04      	ldr	r3, [pc, #16]	; (23f7748 <hal_rtc_get_time+0x18>)
 23f7738:	4403      	add	r3, r0
 23f773a:	681b      	ldr	r3, [r3, #0]
 23f773c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 23f773e:	9302      	str	r3, [sp, #8]
 23f7740:	bd09      	pop	{r0, r3, pc}
 23f7742:	0000      	.short	0x0000
 23f7744:	1006a198 	.word	0x1006a198
 23f7748:	00000000 	.word	0x00000000

023f774c <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
 23f774c:	b509      	push	{r0, r3, lr}
 23f774e:	4804      	ldr	r0, [pc, #16]	; (23f7760 <hal_rtc_set_time+0x14>)
 23f7750:	6800      	ldr	r0, [r0, #0]
 23f7752:	4b04      	ldr	r3, [pc, #16]	; (23f7764 <hal_rtc_set_time+0x18>)
 23f7754:	4403      	add	r3, r0
 23f7756:	681b      	ldr	r3, [r3, #0]
 23f7758:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 23f775a:	9302      	str	r3, [sp, #8]
 23f775c:	bd09      	pop	{r0, r3, pc}
 23f775e:	0000      	.short	0x0000
 23f7760:	1006a198 	.word	0x1006a198
 23f7764:	00000000 	.word	0x00000000

023f7768 <hal_pin_map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
 23f7768:	b509      	push	{r0, r3, lr}
 23f776a:	4804      	ldr	r0, [pc, #16]	; (23f777c <hal_pin_map+0x14>)
 23f776c:	6800      	ldr	r0, [r0, #0]
 23f776e:	4b04      	ldr	r3, [pc, #16]	; (23f7780 <hal_pin_map+0x18>)
 23f7770:	4403      	add	r3, r0
 23f7772:	681b      	ldr	r3, [r3, #0]
 23f7774:	681b      	ldr	r3, [r3, #0]
 23f7776:	9302      	str	r3, [sp, #8]
 23f7778:	bd09      	pop	{r0, r3, pc}
 23f777a:	0000      	.short	0x0000
 23f777c:	1006a198 	.word	0x1006a198
 23f7780:	00000014 	.word	0x00000014

023f7784 <hal_pin_validate_function>:
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
 23f7784:	b509      	push	{r0, r3, lr}
 23f7786:	4804      	ldr	r0, [pc, #16]	; (23f7798 <hal_pin_validate_function+0x14>)
 23f7788:	6800      	ldr	r0, [r0, #0]
 23f778a:	4b04      	ldr	r3, [pc, #16]	; (23f779c <hal_pin_validate_function+0x18>)
 23f778c:	4403      	add	r3, r0
 23f778e:	681b      	ldr	r3, [r3, #0]
 23f7790:	685b      	ldr	r3, [r3, #4]
 23f7792:	9302      	str	r3, [sp, #8]
 23f7794:	bd09      	pop	{r0, r3, pc}
 23f7796:	0000      	.short	0x0000
 23f7798:	1006a198 	.word	0x1006a198
 23f779c:	00000014 	.word	0x00000014

023f77a0 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23f77a0:	b509      	push	{r0, r3, lr}
 23f77a2:	4804      	ldr	r0, [pc, #16]	; (23f77b4 <hal_gpio_mode+0x14>)
 23f77a4:	6800      	ldr	r0, [r0, #0]
 23f77a6:	4b04      	ldr	r3, [pc, #16]	; (23f77b8 <hal_gpio_mode+0x18>)
 23f77a8:	4403      	add	r3, r0
 23f77aa:	681b      	ldr	r3, [r3, #0]
 23f77ac:	689b      	ldr	r3, [r3, #8]
 23f77ae:	9302      	str	r3, [sp, #8]
 23f77b0:	bd09      	pop	{r0, r3, pc}
 23f77b2:	0000      	.short	0x0000
 23f77b4:	1006a198 	.word	0x1006a198
 23f77b8:	00000014 	.word	0x00000014

023f77bc <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23f77bc:	b509      	push	{r0, r3, lr}
 23f77be:	4804      	ldr	r0, [pc, #16]	; (23f77d0 <hal_gpio_get_mode+0x14>)
 23f77c0:	6800      	ldr	r0, [r0, #0]
 23f77c2:	4b04      	ldr	r3, [pc, #16]	; (23f77d4 <hal_gpio_get_mode+0x18>)
 23f77c4:	4403      	add	r3, r0
 23f77c6:	681b      	ldr	r3, [r3, #0]
 23f77c8:	68db      	ldr	r3, [r3, #12]
 23f77ca:	9302      	str	r3, [sp, #8]
 23f77cc:	bd09      	pop	{r0, r3, pc}
 23f77ce:	0000      	.short	0x0000
 23f77d0:	1006a198 	.word	0x1006a198
 23f77d4:	00000014 	.word	0x00000014

023f77d8 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23f77d8:	b509      	push	{r0, r3, lr}
 23f77da:	4804      	ldr	r0, [pc, #16]	; (23f77ec <hal_gpio_write+0x14>)
 23f77dc:	6800      	ldr	r0, [r0, #0]
 23f77de:	4b04      	ldr	r3, [pc, #16]	; (23f77f0 <hal_gpio_write+0x18>)
 23f77e0:	4403      	add	r3, r0
 23f77e2:	681b      	ldr	r3, [r3, #0]
 23f77e4:	691b      	ldr	r3, [r3, #16]
 23f77e6:	9302      	str	r3, [sp, #8]
 23f77e8:	bd09      	pop	{r0, r3, pc}
 23f77ea:	0000      	.short	0x0000
 23f77ec:	1006a198 	.word	0x1006a198
 23f77f0:	00000014 	.word	0x00000014

023f77f4 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
 23f77f4:	b509      	push	{r0, r3, lr}
 23f77f6:	4804      	ldr	r0, [pc, #16]	; (23f7808 <hal_gpio_read+0x14>)
 23f77f8:	6800      	ldr	r0, [r0, #0]
 23f77fa:	4b04      	ldr	r3, [pc, #16]	; (23f780c <hal_gpio_read+0x18>)
 23f77fc:	4403      	add	r3, r0
 23f77fe:	681b      	ldr	r3, [r3, #0]
 23f7800:	695b      	ldr	r3, [r3, #20]
 23f7802:	9302      	str	r3, [sp, #8]
 23f7804:	bd09      	pop	{r0, r3, pc}
 23f7806:	0000      	.short	0x0000
 23f7808:	1006a198 	.word	0x1006a198
 23f780c:	00000014 	.word	0x00000014

023f7810 <hal_interrupt_attach>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
 23f7810:	b509      	push	{r0, r3, lr}
 23f7812:	4804      	ldr	r0, [pc, #16]	; (23f7824 <hal_interrupt_attach+0x14>)
 23f7814:	6800      	ldr	r0, [r0, #0]
 23f7816:	4b04      	ldr	r3, [pc, #16]	; (23f7828 <hal_interrupt_attach+0x18>)
 23f7818:	4403      	add	r3, r0
 23f781a:	681b      	ldr	r3, [r3, #0]
 23f781c:	699b      	ldr	r3, [r3, #24]
 23f781e:	9302      	str	r3, [sp, #8]
 23f7820:	bd09      	pop	{r0, r3, pc}
 23f7822:	0000      	.short	0x0000
 23f7824:	1006a198 	.word	0x1006a198
 23f7828:	00000014 	.word	0x00000014

023f782c <hal_interrupt_detach>:
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
 23f782c:	b509      	push	{r0, r3, lr}
 23f782e:	4804      	ldr	r0, [pc, #16]	; (23f7840 <hal_interrupt_detach+0x14>)
 23f7830:	6800      	ldr	r0, [r0, #0]
 23f7832:	4b04      	ldr	r3, [pc, #16]	; (23f7844 <hal_interrupt_detach+0x18>)
 23f7834:	4403      	add	r3, r0
 23f7836:	681b      	ldr	r3, [r3, #0]
 23f7838:	69db      	ldr	r3, [r3, #28]
 23f783a:	9302      	str	r3, [sp, #8]
 23f783c:	bd09      	pop	{r0, r3, pc}
 23f783e:	0000      	.short	0x0000
 23f7840:	1006a198 	.word	0x1006a198
 23f7844:	00000014 	.word	0x00000014

023f7848 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 23f7848:	b509      	push	{r0, r3, lr}
 23f784a:	4804      	ldr	r0, [pc, #16]	; (23f785c <hal_adc_read+0x14>)
 23f784c:	6800      	ldr	r0, [r0, #0]
 23f784e:	4b04      	ldr	r3, [pc, #16]	; (23f7860 <hal_adc_read+0x18>)
 23f7850:	4403      	add	r3, r0
 23f7852:	681b      	ldr	r3, [r3, #0]
 23f7854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f7856:	9302      	str	r3, [sp, #8]
 23f7858:	bd09      	pop	{r0, r3, pc}
 23f785a:	0000      	.short	0x0000
 23f785c:	1006a198 	.word	0x1006a198
 23f7860:	00000014 	.word	0x00000014

023f7864 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 23f7864:	b509      	push	{r0, r3, lr}
 23f7866:	4804      	ldr	r0, [pc, #16]	; (23f7878 <hal_i2c_set_speed+0x14>)
 23f7868:	6800      	ldr	r0, [r0, #0]
 23f786a:	4b04      	ldr	r3, [pc, #16]	; (23f787c <hal_i2c_set_speed+0x18>)
 23f786c:	4403      	add	r3, r0
 23f786e:	681b      	ldr	r3, [r3, #0]
 23f7870:	681b      	ldr	r3, [r3, #0]
 23f7872:	9302      	str	r3, [sp, #8]
 23f7874:	bd09      	pop	{r0, r3, pc}
 23f7876:	0000      	.short	0x0000
 23f7878:	1006a198 	.word	0x1006a198
 23f787c:	00000010 	.word	0x00000010

023f7880 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23f7880:	b509      	push	{r0, r3, lr}
 23f7882:	4804      	ldr	r0, [pc, #16]	; (23f7894 <hal_i2c_begin+0x14>)
 23f7884:	6800      	ldr	r0, [r0, #0]
 23f7886:	4b04      	ldr	r3, [pc, #16]	; (23f7898 <hal_i2c_begin+0x18>)
 23f7888:	4403      	add	r3, r0
 23f788a:	681b      	ldr	r3, [r3, #0]
 23f788c:	68db      	ldr	r3, [r3, #12]
 23f788e:	9302      	str	r3, [sp, #8]
 23f7890:	bd09      	pop	{r0, r3, pc}
 23f7892:	0000      	.short	0x0000
 23f7894:	1006a198 	.word	0x1006a198
 23f7898:	00000010 	.word	0x00000010

023f789c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23f789c:	b509      	push	{r0, r3, lr}
 23f789e:	4804      	ldr	r0, [pc, #16]	; (23f78b0 <hal_i2c_begin_transmission+0x14>)
 23f78a0:	6800      	ldr	r0, [r0, #0]
 23f78a2:	4b04      	ldr	r3, [pc, #16]	; (23f78b4 <hal_i2c_begin_transmission+0x18>)
 23f78a4:	4403      	add	r3, r0
 23f78a6:	681b      	ldr	r3, [r3, #0]
 23f78a8:	699b      	ldr	r3, [r3, #24]
 23f78aa:	9302      	str	r3, [sp, #8]
 23f78ac:	bd09      	pop	{r0, r3, pc}
 23f78ae:	0000      	.short	0x0000
 23f78b0:	1006a198 	.word	0x1006a198
 23f78b4:	00000010 	.word	0x00000010

023f78b8 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23f78b8:	b509      	push	{r0, r3, lr}
 23f78ba:	4804      	ldr	r0, [pc, #16]	; (23f78cc <hal_i2c_end_transmission+0x14>)
 23f78bc:	6800      	ldr	r0, [r0, #0]
 23f78be:	4b04      	ldr	r3, [pc, #16]	; (23f78d0 <hal_i2c_end_transmission+0x18>)
 23f78c0:	4403      	add	r3, r0
 23f78c2:	681b      	ldr	r3, [r3, #0]
 23f78c4:	69db      	ldr	r3, [r3, #28]
 23f78c6:	9302      	str	r3, [sp, #8]
 23f78c8:	bd09      	pop	{r0, r3, pc}
 23f78ca:	0000      	.short	0x0000
 23f78cc:	1006a198 	.word	0x1006a198
 23f78d0:	00000010 	.word	0x00000010

023f78d4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23f78d4:	b509      	push	{r0, r3, lr}
 23f78d6:	4804      	ldr	r0, [pc, #16]	; (23f78e8 <hal_i2c_write+0x14>)
 23f78d8:	6800      	ldr	r0, [r0, #0]
 23f78da:	4b04      	ldr	r3, [pc, #16]	; (23f78ec <hal_i2c_write+0x18>)
 23f78dc:	4403      	add	r3, r0
 23f78de:	681b      	ldr	r3, [r3, #0]
 23f78e0:	6a1b      	ldr	r3, [r3, #32]
 23f78e2:	9302      	str	r3, [sp, #8]
 23f78e4:	bd09      	pop	{r0, r3, pc}
 23f78e6:	0000      	.short	0x0000
 23f78e8:	1006a198 	.word	0x1006a198
 23f78ec:	00000010 	.word	0x00000010

023f78f0 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23f78f0:	b509      	push	{r0, r3, lr}
 23f78f2:	4804      	ldr	r0, [pc, #16]	; (23f7904 <hal_i2c_available+0x14>)
 23f78f4:	6800      	ldr	r0, [r0, #0]
 23f78f6:	4b04      	ldr	r3, [pc, #16]	; (23f7908 <hal_i2c_available+0x18>)
 23f78f8:	4403      	add	r3, r0
 23f78fa:	681b      	ldr	r3, [r3, #0]
 23f78fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f78fe:	9302      	str	r3, [sp, #8]
 23f7900:	bd09      	pop	{r0, r3, pc}
 23f7902:	0000      	.short	0x0000
 23f7904:	1006a198 	.word	0x1006a198
 23f7908:	00000010 	.word	0x00000010

023f790c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23f790c:	b509      	push	{r0, r3, lr}
 23f790e:	4804      	ldr	r0, [pc, #16]	; (23f7920 <hal_i2c_read+0x14>)
 23f7910:	6800      	ldr	r0, [r0, #0]
 23f7912:	4b04      	ldr	r3, [pc, #16]	; (23f7924 <hal_i2c_read+0x18>)
 23f7914:	4403      	add	r3, r0
 23f7916:	681b      	ldr	r3, [r3, #0]
 23f7918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f791a:	9302      	str	r3, [sp, #8]
 23f791c:	bd09      	pop	{r0, r3, pc}
 23f791e:	0000      	.short	0x0000
 23f7920:	1006a198 	.word	0x1006a198
 23f7924:	00000010 	.word	0x00000010

023f7928 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23f7928:	b509      	push	{r0, r3, lr}
 23f792a:	4804      	ldr	r0, [pc, #16]	; (23f793c <hal_i2c_peek+0x14>)
 23f792c:	6800      	ldr	r0, [r0, #0]
 23f792e:	4b04      	ldr	r3, [pc, #16]	; (23f7940 <hal_i2c_peek+0x18>)
 23f7930:	4403      	add	r3, r0
 23f7932:	681b      	ldr	r3, [r3, #0]
 23f7934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f7936:	9302      	str	r3, [sp, #8]
 23f7938:	bd09      	pop	{r0, r3, pc}
 23f793a:	0000      	.short	0x0000
 23f793c:	1006a198 	.word	0x1006a198
 23f7940:	00000010 	.word	0x00000010

023f7944 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23f7944:	b509      	push	{r0, r3, lr}
 23f7946:	4804      	ldr	r0, [pc, #16]	; (23f7958 <hal_i2c_flush+0x14>)
 23f7948:	6800      	ldr	r0, [r0, #0]
 23f794a:	4b04      	ldr	r3, [pc, #16]	; (23f795c <hal_i2c_flush+0x18>)
 23f794c:	4403      	add	r3, r0
 23f794e:	681b      	ldr	r3, [r3, #0]
 23f7950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f7952:	9302      	str	r3, [sp, #8]
 23f7954:	bd09      	pop	{r0, r3, pc}
 23f7956:	0000      	.short	0x0000
 23f7958:	1006a198 	.word	0x1006a198
 23f795c:	00000010 	.word	0x00000010

023f7960 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23f7960:	b509      	push	{r0, r3, lr}
 23f7962:	4804      	ldr	r0, [pc, #16]	; (23f7974 <hal_i2c_is_enabled+0x14>)
 23f7964:	6800      	ldr	r0, [r0, #0]
 23f7966:	4b04      	ldr	r3, [pc, #16]	; (23f7978 <hal_i2c_is_enabled+0x18>)
 23f7968:	4403      	add	r3, r0
 23f796a:	681b      	ldr	r3, [r3, #0]
 23f796c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f796e:	9302      	str	r3, [sp, #8]
 23f7970:	bd09      	pop	{r0, r3, pc}
 23f7972:	0000      	.short	0x0000
 23f7974:	1006a198 	.word	0x1006a198
 23f7978:	00000010 	.word	0x00000010

023f797c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23f797c:	b509      	push	{r0, r3, lr}
 23f797e:	4804      	ldr	r0, [pc, #16]	; (23f7990 <hal_i2c_init+0x14>)
 23f7980:	6800      	ldr	r0, [r0, #0]
 23f7982:	4b04      	ldr	r3, [pc, #16]	; (23f7994 <hal_i2c_init+0x18>)
 23f7984:	4403      	add	r3, r0
 23f7986:	681b      	ldr	r3, [r3, #0]
 23f7988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f798a:	9302      	str	r3, [sp, #8]
 23f798c:	bd09      	pop	{r0, r3, pc}
 23f798e:	0000      	.short	0x0000
 23f7990:	1006a198 	.word	0x1006a198
 23f7994:	00000010 	.word	0x00000010

023f7998 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
 23f7998:	b509      	push	{r0, r3, lr}
 23f799a:	4804      	ldr	r0, [pc, #16]	; (23f79ac <hal_i2c_lock+0x14>)
 23f799c:	6800      	ldr	r0, [r0, #0]
 23f799e:	4b04      	ldr	r3, [pc, #16]	; (23f79b0 <hal_i2c_lock+0x18>)
 23f79a0:	4403      	add	r3, r0
 23f79a2:	681b      	ldr	r3, [r3, #0]
 23f79a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f79a6:	9302      	str	r3, [sp, #8]
 23f79a8:	bd09      	pop	{r0, r3, pc}
 23f79aa:	0000      	.short	0x0000
 23f79ac:	1006a198 	.word	0x1006a198
 23f79b0:	00000010 	.word	0x00000010

023f79b4 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
 23f79b4:	b509      	push	{r0, r3, lr}
 23f79b6:	4804      	ldr	r0, [pc, #16]	; (23f79c8 <hal_i2c_unlock+0x14>)
 23f79b8:	6800      	ldr	r0, [r0, #0]
 23f79ba:	4b04      	ldr	r3, [pc, #16]	; (23f79cc <hal_i2c_unlock+0x18>)
 23f79bc:	4403      	add	r3, r0
 23f79be:	681b      	ldr	r3, [r3, #0]
 23f79c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f79c2:	9302      	str	r3, [sp, #8]
 23f79c4:	bd09      	pop	{r0, r3, pc}
 23f79c6:	0000      	.short	0x0000
 23f79c8:	1006a198 	.word	0x1006a198
 23f79cc:	00000010 	.word	0x00000010

023f79d0 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 23f79d0:	b509      	push	{r0, r3, lr}
 23f79d2:	4804      	ldr	r0, [pc, #16]	; (23f79e4 <hal_i2c_request_ex+0x14>)
 23f79d4:	6800      	ldr	r0, [r0, #0]
 23f79d6:	4b04      	ldr	r3, [pc, #16]	; (23f79e8 <hal_i2c_request_ex+0x18>)
 23f79d8:	4403      	add	r3, r0
 23f79da:	681b      	ldr	r3, [r3, #0]
 23f79dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23f79de:	9302      	str	r3, [sp, #8]
 23f79e0:	bd09      	pop	{r0, r3, pc}
 23f79e2:	0000      	.short	0x0000
 23f79e4:	1006a198 	.word	0x1006a198
 23f79e8:	00000010 	.word	0x00000010

023f79ec <hal_i2c_transaction>:
DYNALIB_FN(21, hal_i2c, hal_i2c_sleep, int(hal_i2c_interface_t i2c, bool sleep, void* reserved))
DYNALIB_FN(22, hal_i2c, hal_i2c_end_transmission_ext, int(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(23, hal_i2c, hal_i2c_transaction, int(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, const hal_i2c_transmission_config_t*, void*))
 23f79ec:	b509      	push	{r0, r3, lr}
 23f79ee:	4804      	ldr	r0, [pc, #16]	; (23f7a00 <hal_i2c_transaction+0x14>)
 23f79f0:	6800      	ldr	r0, [r0, #0]
 23f79f2:	4b04      	ldr	r3, [pc, #16]	; (23f7a04 <hal_i2c_transaction+0x18>)
 23f79f4:	4403      	add	r3, r0
 23f79f6:	681b      	ldr	r3, [r3, #0]
 23f79f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23f79fa:	9302      	str	r3, [sp, #8]
 23f79fc:	bd09      	pop	{r0, r3, pc}
 23f79fe:	0000      	.short	0x0000
 23f7a00:	1006a198 	.word	0x1006a198
 23f7a04:	00000010 	.word	0x00000010

023f7a08 <if_get_by_index>:
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
 23f7a08:	b509      	push	{r0, r3, lr}
 23f7a0a:	4804      	ldr	r0, [pc, #16]	; (23f7a1c <if_get_by_index+0x14>)
 23f7a0c:	6800      	ldr	r0, [r0, #0]
 23f7a0e:	4b04      	ldr	r3, [pc, #16]	; (23f7a20 <if_get_by_index+0x18>)
 23f7a10:	4403      	add	r3, r0
 23f7a12:	681b      	ldr	r3, [r3, #0]
 23f7a14:	699b      	ldr	r3, [r3, #24]
 23f7a16:	9302      	str	r3, [sp, #8]
 23f7a18:	bd09      	pop	{r0, r3, pc}
 23f7a1a:	0000      	.short	0x0000
 23f7a1c:	1006a198 	.word	0x1006a198
 23f7a20:	00000054 	.word	0x00000054

023f7a24 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23f7a24:	b509      	push	{r0, r3, lr}
 23f7a26:	4804      	ldr	r0, [pc, #16]	; (23f7a38 <inet_inet_ntop+0x14>)
 23f7a28:	6800      	ldr	r0, [r0, #0]
 23f7a2a:	4b04      	ldr	r3, [pc, #16]	; (23f7a3c <inet_inet_ntop+0x18>)
 23f7a2c:	4403      	add	r3, r0
 23f7a2e:	681b      	ldr	r3, [r3, #0]
 23f7a30:	695b      	ldr	r3, [r3, #20]
 23f7a32:	9302      	str	r3, [sp, #8]
 23f7a34:	bd09      	pop	{r0, r3, pc}
 23f7a36:	0000      	.short	0x0000
 23f7a38:	1006a198 	.word	0x1006a198
 23f7a3c:	0000004c 	.word	0x0000004c

023f7a40 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23f7a40:	b509      	push	{r0, r3, lr}
 23f7a42:	4804      	ldr	r0, [pc, #16]	; (23f7a54 <netdb_freeaddrinfo+0x14>)
 23f7a44:	6800      	ldr	r0, [r0, #0]
 23f7a46:	4b04      	ldr	r3, [pc, #16]	; (23f7a58 <netdb_freeaddrinfo+0x18>)
 23f7a48:	4403      	add	r3, r0
 23f7a4a:	681b      	ldr	r3, [r3, #0]
 23f7a4c:	689b      	ldr	r3, [r3, #8]
 23f7a4e:	9302      	str	r3, [sp, #8]
 23f7a50:	bd09      	pop	{r0, r3, pc}
 23f7a52:	0000      	.short	0x0000
 23f7a54:	1006a198 	.word	0x1006a198
 23f7a58:	00000050 	.word	0x00000050

023f7a5c <netdb_getaddrinfo_ex>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
DYNALIB_FN(4, hal_netdb, netdb_getnameinfo, int(const struct sockaddr*, socklen_t, char*, socklen_t, char*, socklen_t, int))
DYNALIB_FN(5, hal_netdb, netdb_getaddrinfo_ex, int(const char*, const char*, const struct addrinfo*, struct addrinfo**, if_t))
 23f7a5c:	b509      	push	{r0, r3, lr}
 23f7a5e:	4804      	ldr	r0, [pc, #16]	; (23f7a70 <netdb_getaddrinfo_ex+0x14>)
 23f7a60:	6800      	ldr	r0, [r0, #0]
 23f7a62:	4b04      	ldr	r3, [pc, #16]	; (23f7a74 <netdb_getaddrinfo_ex+0x18>)
 23f7a64:	4403      	add	r3, r0
 23f7a66:	681b      	ldr	r3, [r3, #0]
 23f7a68:	695b      	ldr	r3, [r3, #20]
 23f7a6a:	9302      	str	r3, [sp, #8]
 23f7a6c:	bd09      	pop	{r0, r3, pc}
 23f7a6e:	0000      	.short	0x0000
 23f7a70:	1006a198 	.word	0x1006a198
 23f7a74:	00000050 	.word	0x00000050

023f7a78 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 23f7a78:	b509      	push	{r0, r3, lr}
 23f7a7a:	4804      	ldr	r0, [pc, #16]	; (23f7a8c <hal_spi_begin+0x14>)
 23f7a7c:	6800      	ldr	r0, [r0, #0]
 23f7a7e:	4b04      	ldr	r3, [pc, #16]	; (23f7a90 <hal_spi_begin+0x18>)
 23f7a80:	4403      	add	r3, r0
 23f7a82:	681b      	ldr	r3, [r3, #0]
 23f7a84:	681b      	ldr	r3, [r3, #0]
 23f7a86:	9302      	str	r3, [sp, #8]
 23f7a88:	bd09      	pop	{r0, r3, pc}
 23f7a8a:	0000      	.short	0x0000
 23f7a8c:	1006a198 	.word	0x1006a198
 23f7a90:	00000018 	.word	0x00000018

023f7a94 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
 23f7a94:	b509      	push	{r0, r3, lr}
 23f7a96:	4804      	ldr	r0, [pc, #16]	; (23f7aa8 <hal_spi_end+0x14>)
 23f7a98:	6800      	ldr	r0, [r0, #0]
 23f7a9a:	4b04      	ldr	r3, [pc, #16]	; (23f7aac <hal_spi_end+0x18>)
 23f7a9c:	4403      	add	r3, r0
 23f7a9e:	681b      	ldr	r3, [r3, #0]
 23f7aa0:	685b      	ldr	r3, [r3, #4]
 23f7aa2:	9302      	str	r3, [sp, #8]
 23f7aa4:	bd09      	pop	{r0, r3, pc}
 23f7aa6:	0000      	.short	0x0000
 23f7aa8:	1006a198 	.word	0x1006a198
 23f7aac:	00000018 	.word	0x00000018

023f7ab0 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 23f7ab0:	b509      	push	{r0, r3, lr}
 23f7ab2:	4804      	ldr	r0, [pc, #16]	; (23f7ac4 <hal_spi_transfer+0x14>)
 23f7ab4:	6800      	ldr	r0, [r0, #0]
 23f7ab6:	4b04      	ldr	r3, [pc, #16]	; (23f7ac8 <hal_spi_transfer+0x18>)
 23f7ab8:	4403      	add	r3, r0
 23f7aba:	681b      	ldr	r3, [r3, #0]
 23f7abc:	695b      	ldr	r3, [r3, #20]
 23f7abe:	9302      	str	r3, [sp, #8]
 23f7ac0:	bd09      	pop	{r0, r3, pc}
 23f7ac2:	0000      	.short	0x0000
 23f7ac4:	1006a198 	.word	0x1006a198
 23f7ac8:	00000018 	.word	0x00000018

023f7acc <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23f7acc:	b509      	push	{r0, r3, lr}
 23f7ace:	4804      	ldr	r0, [pc, #16]	; (23f7ae0 <hal_spi_init+0x14>)
 23f7ad0:	6800      	ldr	r0, [r0, #0]
 23f7ad2:	4b04      	ldr	r3, [pc, #16]	; (23f7ae4 <hal_spi_init+0x18>)
 23f7ad4:	4403      	add	r3, r0
 23f7ad6:	681b      	ldr	r3, [r3, #0]
 23f7ad8:	69db      	ldr	r3, [r3, #28]
 23f7ada:	9302      	str	r3, [sp, #8]
 23f7adc:	bd09      	pop	{r0, r3, pc}
 23f7ade:	0000      	.short	0x0000
 23f7ae0:	1006a198 	.word	0x1006a198
 23f7ae4:	00000018 	.word	0x00000018

023f7ae8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23f7ae8:	b509      	push	{r0, r3, lr}
 23f7aea:	4804      	ldr	r0, [pc, #16]	; (23f7afc <hal_spi_is_enabled+0x14>)
 23f7aec:	6800      	ldr	r0, [r0, #0]
 23f7aee:	4b04      	ldr	r3, [pc, #16]	; (23f7b00 <hal_spi_is_enabled+0x18>)
 23f7af0:	4403      	add	r3, r0
 23f7af2:	681b      	ldr	r3, [r3, #0]
 23f7af4:	6a1b      	ldr	r3, [r3, #32]
 23f7af6:	9302      	str	r3, [sp, #8]
 23f7af8:	bd09      	pop	{r0, r3, pc}
 23f7afa:	0000      	.short	0x0000
 23f7afc:	1006a198 	.word	0x1006a198
 23f7b00:	00000018 	.word	0x00000018

023f7b04 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 23f7b04:	b509      	push	{r0, r3, lr}
 23f7b06:	4804      	ldr	r0, [pc, #16]	; (23f7b18 <hal_spi_info+0x14>)
 23f7b08:	6800      	ldr	r0, [r0, #0]
 23f7b0a:	4b04      	ldr	r3, [pc, #16]	; (23f7b1c <hal_spi_info+0x18>)
 23f7b0c:	4403      	add	r3, r0
 23f7b0e:	681b      	ldr	r3, [r3, #0]
 23f7b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f7b12:	9302      	str	r3, [sp, #8]
 23f7b14:	bd09      	pop	{r0, r3, pc}
 23f7b16:	0000      	.short	0x0000
 23f7b18:	1006a198 	.word	0x1006a198
 23f7b1c:	00000018 	.word	0x00000018

023f7b20 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
 23f7b20:	b509      	push	{r0, r3, lr}
 23f7b22:	4804      	ldr	r0, [pc, #16]	; (23f7b34 <hal_spi_transfer_dma+0x14>)
 23f7b24:	6800      	ldr	r0, [r0, #0]
 23f7b26:	4b04      	ldr	r3, [pc, #16]	; (23f7b38 <hal_spi_transfer_dma+0x18>)
 23f7b28:	4403      	add	r3, r0
 23f7b2a:	681b      	ldr	r3, [r3, #0]
 23f7b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f7b2e:	9302      	str	r3, [sp, #8]
 23f7b30:	bd09      	pop	{r0, r3, pc}
 23f7b32:	0000      	.short	0x0000
 23f7b34:	1006a198 	.word	0x1006a198
 23f7b38:	00000018 	.word	0x00000018

023f7b3c <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 23f7b3c:	b509      	push	{r0, r3, lr}
 23f7b3e:	4804      	ldr	r0, [pc, #16]	; (23f7b50 <hal_spi_transfer_dma_status+0x14>)
 23f7b40:	6800      	ldr	r0, [r0, #0]
 23f7b42:	4b04      	ldr	r3, [pc, #16]	; (23f7b54 <hal_spi_transfer_dma_status+0x18>)
 23f7b44:	4403      	add	r3, r0
 23f7b46:	681b      	ldr	r3, [r3, #0]
 23f7b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23f7b4a:	9302      	str	r3, [sp, #8]
 23f7b4c:	bd09      	pop	{r0, r3, pc}
 23f7b4e:	0000      	.short	0x0000
 23f7b50:	1006a198 	.word	0x1006a198
 23f7b54:	00000018 	.word	0x00000018

023f7b58 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 23f7b58:	b509      	push	{r0, r3, lr}
 23f7b5a:	4804      	ldr	r0, [pc, #16]	; (23f7b6c <hal_spi_set_settings+0x14>)
 23f7b5c:	6800      	ldr	r0, [r0, #0]
 23f7b5e:	4b04      	ldr	r3, [pc, #16]	; (23f7b70 <hal_spi_set_settings+0x18>)
 23f7b60:	4403      	add	r3, r0
 23f7b62:	681b      	ldr	r3, [r3, #0]
 23f7b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f7b66:	9302      	str	r3, [sp, #8]
 23f7b68:	bd09      	pop	{r0, r3, pc}
 23f7b6a:	0000      	.short	0x0000
 23f7b6c:	1006a198 	.word	0x1006a198
 23f7b70:	00000018 	.word	0x00000018

023f7b74 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23f7b74:	b509      	push	{r0, r3, lr}
 23f7b76:	4804      	ldr	r0, [pc, #16]	; (23f7b88 <hal_spi_acquire+0x14>)
 23f7b78:	6800      	ldr	r0, [r0, #0]
 23f7b7a:	4b04      	ldr	r3, [pc, #16]	; (23f7b8c <hal_spi_acquire+0x18>)
 23f7b7c:	4403      	add	r3, r0
 23f7b7e:	681b      	ldr	r3, [r3, #0]
 23f7b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f7b82:	9302      	str	r3, [sp, #8]
 23f7b84:	bd09      	pop	{r0, r3, pc}
 23f7b86:	0000      	.short	0x0000
 23f7b88:	1006a198 	.word	0x1006a198
 23f7b8c:	00000018 	.word	0x00000018

023f7b90 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23f7b90:	b509      	push	{r0, r3, lr}
 23f7b92:	4804      	ldr	r0, [pc, #16]	; (23f7ba4 <hal_spi_release+0x14>)
 23f7b94:	6800      	ldr	r0, [r0, #0]
 23f7b96:	4b04      	ldr	r3, [pc, #16]	; (23f7ba8 <hal_spi_release+0x18>)
 23f7b98:	4403      	add	r3, r0
 23f7b9a:	681b      	ldr	r3, [r3, #0]
 23f7b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f7b9e:	9302      	str	r3, [sp, #8]
 23f7ba0:	bd09      	pop	{r0, r3, pc}
 23f7ba2:	0000      	.short	0x0000
 23f7ba4:	1006a198 	.word	0x1006a198
 23f7ba8:	00000018 	.word	0x00000018

023f7bac <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23f7bac:	b509      	push	{r0, r3, lr}
 23f7bae:	4804      	ldr	r0, [pc, #16]	; (23f7bc0 <hal_usart_write+0x14>)
 23f7bb0:	6800      	ldr	r0, [r0, #0]
 23f7bb2:	4b04      	ldr	r3, [pc, #16]	; (23f7bc4 <hal_usart_write+0x18>)
 23f7bb4:	4403      	add	r3, r0
 23f7bb6:	681b      	ldr	r3, [r3, #0]
 23f7bb8:	68db      	ldr	r3, [r3, #12]
 23f7bba:	9302      	str	r3, [sp, #8]
 23f7bbc:	bd09      	pop	{r0, r3, pc}
 23f7bbe:	0000      	.short	0x0000
 23f7bc0:	1006a198 	.word	0x1006a198
 23f7bc4:	00000024 	.word	0x00000024

023f7bc8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23f7bc8:	b509      	push	{r0, r3, lr}
 23f7bca:	4804      	ldr	r0, [pc, #16]	; (23f7bdc <hal_usart_available+0x14>)
 23f7bcc:	6800      	ldr	r0, [r0, #0]
 23f7bce:	4b04      	ldr	r3, [pc, #16]	; (23f7be0 <hal_usart_available+0x18>)
 23f7bd0:	4403      	add	r3, r0
 23f7bd2:	681b      	ldr	r3, [r3, #0]
 23f7bd4:	691b      	ldr	r3, [r3, #16]
 23f7bd6:	9302      	str	r3, [sp, #8]
 23f7bd8:	bd09      	pop	{r0, r3, pc}
 23f7bda:	0000      	.short	0x0000
 23f7bdc:	1006a198 	.word	0x1006a198
 23f7be0:	00000024 	.word	0x00000024

023f7be4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23f7be4:	b509      	push	{r0, r3, lr}
 23f7be6:	4804      	ldr	r0, [pc, #16]	; (23f7bf8 <hal_usart_read+0x14>)
 23f7be8:	6800      	ldr	r0, [r0, #0]
 23f7bea:	4b04      	ldr	r3, [pc, #16]	; (23f7bfc <hal_usart_read+0x18>)
 23f7bec:	4403      	add	r3, r0
 23f7bee:	681b      	ldr	r3, [r3, #0]
 23f7bf0:	695b      	ldr	r3, [r3, #20]
 23f7bf2:	9302      	str	r3, [sp, #8]
 23f7bf4:	bd09      	pop	{r0, r3, pc}
 23f7bf6:	0000      	.short	0x0000
 23f7bf8:	1006a198 	.word	0x1006a198
 23f7bfc:	00000024 	.word	0x00000024

023f7c00 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23f7c00:	b509      	push	{r0, r3, lr}
 23f7c02:	4804      	ldr	r0, [pc, #16]	; (23f7c14 <hal_usart_peek+0x14>)
 23f7c04:	6800      	ldr	r0, [r0, #0]
 23f7c06:	4b04      	ldr	r3, [pc, #16]	; (23f7c18 <hal_usart_peek+0x18>)
 23f7c08:	4403      	add	r3, r0
 23f7c0a:	681b      	ldr	r3, [r3, #0]
 23f7c0c:	699b      	ldr	r3, [r3, #24]
 23f7c0e:	9302      	str	r3, [sp, #8]
 23f7c10:	bd09      	pop	{r0, r3, pc}
 23f7c12:	0000      	.short	0x0000
 23f7c14:	1006a198 	.word	0x1006a198
 23f7c18:	00000024 	.word	0x00000024

023f7c1c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23f7c1c:	b509      	push	{r0, r3, lr}
 23f7c1e:	4804      	ldr	r0, [pc, #16]	; (23f7c30 <hal_usart_flush+0x14>)
 23f7c20:	6800      	ldr	r0, [r0, #0]
 23f7c22:	4b04      	ldr	r3, [pc, #16]	; (23f7c34 <hal_usart_flush+0x18>)
 23f7c24:	4403      	add	r3, r0
 23f7c26:	681b      	ldr	r3, [r3, #0]
 23f7c28:	69db      	ldr	r3, [r3, #28]
 23f7c2a:	9302      	str	r3, [sp, #8]
 23f7c2c:	bd09      	pop	{r0, r3, pc}
 23f7c2e:	0000      	.short	0x0000
 23f7c30:	1006a198 	.word	0x1006a198
 23f7c34:	00000024 	.word	0x00000024

023f7c38 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23f7c38:	b509      	push	{r0, r3, lr}
 23f7c3a:	4804      	ldr	r0, [pc, #16]	; (23f7c4c <hal_usart_is_enabled+0x14>)
 23f7c3c:	6800      	ldr	r0, [r0, #0]
 23f7c3e:	4b04      	ldr	r3, [pc, #16]	; (23f7c50 <hal_usart_is_enabled+0x18>)
 23f7c40:	4403      	add	r3, r0
 23f7c42:	681b      	ldr	r3, [r3, #0]
 23f7c44:	6a1b      	ldr	r3, [r3, #32]
 23f7c46:	9302      	str	r3, [sp, #8]
 23f7c48:	bd09      	pop	{r0, r3, pc}
 23f7c4a:	0000      	.short	0x0000
 23f7c4c:	1006a198 	.word	0x1006a198
 23f7c50:	00000024 	.word	0x00000024

023f7c54 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23f7c54:	b509      	push	{r0, r3, lr}
 23f7c56:	4804      	ldr	r0, [pc, #16]	; (23f7c68 <hal_usart_available_data_for_write+0x14>)
 23f7c58:	6800      	ldr	r0, [r0, #0]
 23f7c5a:	4b04      	ldr	r3, [pc, #16]	; (23f7c6c <hal_usart_available_data_for_write+0x18>)
 23f7c5c:	4403      	add	r3, r0
 23f7c5e:	681b      	ldr	r3, [r3, #0]
 23f7c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f7c62:	9302      	str	r3, [sp, #8]
 23f7c64:	bd09      	pop	{r0, r3, pc}
 23f7c66:	0000      	.short	0x0000
 23f7c68:	1006a198 	.word	0x1006a198
 23f7c6c:	00000024 	.word	0x00000024

023f7c70 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23f7c70:	b509      	push	{r0, r3, lr}
 23f7c72:	4804      	ldr	r0, [pc, #16]	; (23f7c84 <hal_usart_init_ex+0x14>)
 23f7c74:	6800      	ldr	r0, [r0, #0]
 23f7c76:	4b04      	ldr	r3, [pc, #16]	; (23f7c88 <hal_usart_init_ex+0x18>)
 23f7c78:	4403      	add	r3, r0
 23f7c7a:	681b      	ldr	r3, [r3, #0]
 23f7c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f7c7e:	9302      	str	r3, [sp, #8]
 23f7c80:	bd09      	pop	{r0, r3, pc}
 23f7c82:	0000      	.short	0x0000
 23f7c84:	1006a198 	.word	0x1006a198
 23f7c88:	00000024 	.word	0x00000024

023f7c8c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23f7c8c:	b509      	push	{r0, r3, lr}
 23f7c8e:	4804      	ldr	r0, [pc, #16]	; (23f7ca0 <HAL_USB_USART_Init+0x14>)
 23f7c90:	6800      	ldr	r0, [r0, #0]
 23f7c92:	4b04      	ldr	r3, [pc, #16]	; (23f7ca4 <HAL_USB_USART_Init+0x18>)
 23f7c94:	4403      	add	r3, r0
 23f7c96:	681b      	ldr	r3, [r3, #0]
 23f7c98:	681b      	ldr	r3, [r3, #0]
 23f7c9a:	9302      	str	r3, [sp, #8]
 23f7c9c:	bd09      	pop	{r0, r3, pc}
 23f7c9e:	0000      	.short	0x0000
 23f7ca0:	1006a198 	.word	0x1006a198
 23f7ca4:	00000034 	.word	0x00000034

023f7ca8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23f7ca8:	b509      	push	{r0, r3, lr}
 23f7caa:	4804      	ldr	r0, [pc, #16]	; (23f7cbc <HAL_USB_USART_Begin+0x14>)
 23f7cac:	6800      	ldr	r0, [r0, #0]
 23f7cae:	4b04      	ldr	r3, [pc, #16]	; (23f7cc0 <HAL_USB_USART_Begin+0x18>)
 23f7cb0:	4403      	add	r3, r0
 23f7cb2:	681b      	ldr	r3, [r3, #0]
 23f7cb4:	685b      	ldr	r3, [r3, #4]
 23f7cb6:	9302      	str	r3, [sp, #8]
 23f7cb8:	bd09      	pop	{r0, r3, pc}
 23f7cba:	0000      	.short	0x0000
 23f7cbc:	1006a198 	.word	0x1006a198
 23f7cc0:	00000034 	.word	0x00000034

023f7cc4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN_WRAP(4, hal_usb, HAL_USB_USART_Available_Data, protected, int32_t(HAL_USB_USART_Serial))
 23f7cc4:	b509      	push	{r0, r3, lr}
 23f7cc6:	4804      	ldr	r0, [pc, #16]	; (23f7cd8 <HAL_USB_USART_Available_Data+0x14>)
 23f7cc8:	6800      	ldr	r0, [r0, #0]
 23f7cca:	4b04      	ldr	r3, [pc, #16]	; (23f7cdc <HAL_USB_USART_Available_Data+0x18>)
 23f7ccc:	4403      	add	r3, r0
 23f7cce:	681b      	ldr	r3, [r3, #0]
 23f7cd0:	691b      	ldr	r3, [r3, #16]
 23f7cd2:	9302      	str	r3, [sp, #8]
 23f7cd4:	bd09      	pop	{r0, r3, pc}
 23f7cd6:	0000      	.short	0x0000
 23f7cd8:	1006a198 	.word	0x1006a198
 23f7cdc:	00000034 	.word	0x00000034

023f7ce0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN_WRAP(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, protected, int32_t(HAL_USB_USART_Serial))
 23f7ce0:	b509      	push	{r0, r3, lr}
 23f7ce2:	4804      	ldr	r0, [pc, #16]	; (23f7cf4 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23f7ce4:	6800      	ldr	r0, [r0, #0]
 23f7ce6:	4b04      	ldr	r3, [pc, #16]	; (23f7cf8 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23f7ce8:	4403      	add	r3, r0
 23f7cea:	681b      	ldr	r3, [r3, #0]
 23f7cec:	695b      	ldr	r3, [r3, #20]
 23f7cee:	9302      	str	r3, [sp, #8]
 23f7cf0:	bd09      	pop	{r0, r3, pc}
 23f7cf2:	0000      	.short	0x0000
 23f7cf4:	1006a198 	.word	0x1006a198
 23f7cf8:	00000034 	.word	0x00000034

023f7cfc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN_WRAP(6, hal_usb, HAL_USB_USART_Receive_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f7cfc:	b509      	push	{r0, r3, lr}
 23f7cfe:	4804      	ldr	r0, [pc, #16]	; (23f7d10 <HAL_USB_USART_Receive_Data+0x14>)
 23f7d00:	6800      	ldr	r0, [r0, #0]
 23f7d02:	4b04      	ldr	r3, [pc, #16]	; (23f7d14 <HAL_USB_USART_Receive_Data+0x18>)
 23f7d04:	4403      	add	r3, r0
 23f7d06:	681b      	ldr	r3, [r3, #0]
 23f7d08:	699b      	ldr	r3, [r3, #24]
 23f7d0a:	9302      	str	r3, [sp, #8]
 23f7d0c:	bd09      	pop	{r0, r3, pc}
 23f7d0e:	0000      	.short	0x0000
 23f7d10:	1006a198 	.word	0x1006a198
 23f7d14:	00000034 	.word	0x00000034

023f7d18 <HAL_USB_USART_Send_Data>:
DYNALIB_FN_WRAP(7, hal_usb, HAL_USB_USART_Send_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f7d18:	b509      	push	{r0, r3, lr}
 23f7d1a:	4804      	ldr	r0, [pc, #16]	; (23f7d2c <HAL_USB_USART_Send_Data+0x14>)
 23f7d1c:	6800      	ldr	r0, [r0, #0]
 23f7d1e:	4b04      	ldr	r3, [pc, #16]	; (23f7d30 <HAL_USB_USART_Send_Data+0x18>)
 23f7d20:	4403      	add	r3, r0
 23f7d22:	681b      	ldr	r3, [r3, #0]
 23f7d24:	69db      	ldr	r3, [r3, #28]
 23f7d26:	9302      	str	r3, [sp, #8]
 23f7d28:	bd09      	pop	{r0, r3, pc}
 23f7d2a:	0000      	.short	0x0000
 23f7d2c:	1006a198 	.word	0x1006a198
 23f7d30:	00000034 	.word	0x00000034

023f7d34 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN_WRAP(8, hal_usb, HAL_USB_USART_Flush_Data, protected, void(HAL_USB_USART_Serial))
 23f7d34:	b509      	push	{r0, r3, lr}
 23f7d36:	4804      	ldr	r0, [pc, #16]	; (23f7d48 <HAL_USB_USART_Flush_Data+0x14>)
 23f7d38:	6800      	ldr	r0, [r0, #0]
 23f7d3a:	4b04      	ldr	r3, [pc, #16]	; (23f7d4c <HAL_USB_USART_Flush_Data+0x18>)
 23f7d3c:	4403      	add	r3, r0
 23f7d3e:	681b      	ldr	r3, [r3, #0]
 23f7d40:	6a1b      	ldr	r3, [r3, #32]
 23f7d42:	9302      	str	r3, [sp, #8]
 23f7d44:	bd09      	pop	{r0, r3, pc}
 23f7d46:	0000      	.short	0x0000
 23f7d48:	1006a198 	.word	0x1006a198
 23f7d4c:	00000034 	.word	0x00000034

023f7d50 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 23f7d50:	b509      	push	{r0, r3, lr}
 23f7d52:	4804      	ldr	r0, [pc, #16]	; (23f7d64 <HAL_USB_USART_Is_Connected+0x14>)
 23f7d54:	6800      	ldr	r0, [r0, #0]
 23f7d56:	4b04      	ldr	r3, [pc, #16]	; (23f7d68 <HAL_USB_USART_Is_Connected+0x18>)
 23f7d58:	4403      	add	r3, r0
 23f7d5a:	681b      	ldr	r3, [r3, #0]
 23f7d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f7d5e:	9302      	str	r3, [sp, #8]
 23f7d60:	bd09      	pop	{r0, r3, pc}
 23f7d62:	0000      	.short	0x0000
 23f7d64:	1006a198 	.word	0x1006a198
 23f7d68:	00000034 	.word	0x00000034

023f7d6c <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
 23f7d6c:	b509      	push	{r0, r3, lr}
 23f7d6e:	4804      	ldr	r0, [pc, #16]	; (23f7d80 <diag_get_source+0x14>)
 23f7d70:	6800      	ldr	r0, [r0, #0]
 23f7d72:	4b04      	ldr	r3, [pc, #16]	; (23f7d84 <diag_get_source+0x18>)
 23f7d74:	4403      	add	r3, r0
 23f7d76:	681b      	ldr	r3, [r3, #0]
 23f7d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 23f7d7c:	9302      	str	r3, [sp, #8]
 23f7d7e:	bd09      	pop	{r0, r3, pc}
 23f7d80:	1006a198 	.word	0x1006a198
 23f7d84:	00000048 	.word	0x00000048

023f7d88 <panic_ext>:
DYNALIB_FN(48, services, devicetree_tree_lock, int(void*))
DYNALIB_FN(49, services, devicetree_tree_get, int(void*, uint32_t, void*))
DYNALIB_FN(50, services, devicetree_string_dictionary_lookup, const char*(uint32_t, void*))
DYNALIB_FN(51, services, devicetree_hash_string, uint32_t(const char*, size_t))
DYNALIB_FN(52, services, security_mode_get, int(void*))
DYNALIB_FN(53, services, panic_ext, void(const PanicData*, void*))
 23f7d88:	b509      	push	{r0, r3, lr}
 23f7d8a:	4804      	ldr	r0, [pc, #16]	; (23f7d9c <panic_ext+0x14>)
 23f7d8c:	6800      	ldr	r0, [r0, #0]
 23f7d8e:	4b04      	ldr	r3, [pc, #16]	; (23f7da0 <panic_ext+0x18>)
 23f7d90:	4403      	add	r3, r0
 23f7d92:	681b      	ldr	r3, [r3, #0]
 23f7d94:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 23f7d98:	9302      	str	r3, [sp, #8]
 23f7d9a:	bd09      	pop	{r0, r3, pc}
 23f7d9c:	1006a198 	.word	0x1006a198
 23f7da0:	00000048 	.word	0x00000048

023f7da4 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 23f7da4:	b509      	push	{r0, r3, lr}
 23f7da6:	4804      	ldr	r0, [pc, #16]	; (23f7db8 <system_mode+0x14>)
 23f7da8:	6800      	ldr	r0, [r0, #0]
 23f7daa:	4b04      	ldr	r3, [pc, #16]	; (23f7dbc <system_mode+0x18>)
 23f7dac:	4403      	add	r3, r0
 23f7dae:	681b      	ldr	r3, [r3, #0]
 23f7db0:	681b      	ldr	r3, [r3, #0]
 23f7db2:	9302      	str	r3, [sp, #8]
 23f7db4:	bd09      	pop	{r0, r3, pc}
 23f7db6:	0000      	.short	0x0000
 23f7db8:	1006a198 	.word	0x1006a198
 23f7dbc:	00000008 	.word	0x00000008

023f7dc0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23f7dc0:	b509      	push	{r0, r3, lr}
 23f7dc2:	4804      	ldr	r0, [pc, #16]	; (23f7dd4 <set_system_mode+0x14>)
 23f7dc4:	6800      	ldr	r0, [r0, #0]
 23f7dc6:	4b04      	ldr	r3, [pc, #16]	; (23f7dd8 <set_system_mode+0x18>)
 23f7dc8:	4403      	add	r3, r0
 23f7dca:	681b      	ldr	r3, [r3, #0]
 23f7dcc:	685b      	ldr	r3, [r3, #4]
 23f7dce:	9302      	str	r3, [sp, #8]
 23f7dd0:	bd09      	pop	{r0, r3, pc}
 23f7dd2:	0000      	.short	0x0000
 23f7dd4:	1006a198 	.word	0x1006a198
 23f7dd8:	00000008 	.word	0x00000008

023f7ddc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler_deprecated, void(void*))
DYNALIB_FN(3, system, system_firmwareUpdate_deprecated, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer_deprecated, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23f7ddc:	b509      	push	{r0, r3, lr}
 23f7dde:	4804      	ldr	r0, [pc, #16]	; (23f7df0 <system_delay_ms+0x14>)
 23f7de0:	6800      	ldr	r0, [r0, #0]
 23f7de2:	4b04      	ldr	r3, [pc, #16]	; (23f7df4 <system_delay_ms+0x18>)
 23f7de4:	4403      	add	r3, r0
 23f7de6:	681b      	ldr	r3, [r3, #0]
 23f7de8:	695b      	ldr	r3, [r3, #20]
 23f7dea:	9302      	str	r3, [sp, #8]
 23f7dec:	bd09      	pop	{r0, r3, pc}
 23f7dee:	0000      	.short	0x0000
 23f7df0:	1006a198 	.word	0x1006a198
 23f7df4:	00000008 	.word	0x00000008

023f7df8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23f7df8:	b509      	push	{r0, r3, lr}
 23f7dfa:	4804      	ldr	r0, [pc, #16]	; (23f7e0c <system_thread_set_state+0x14>)
 23f7dfc:	6800      	ldr	r0, [r0, #0]
 23f7dfe:	4b04      	ldr	r3, [pc, #16]	; (23f7e10 <system_thread_set_state+0x18>)
 23f7e00:	4403      	add	r3, r0
 23f7e02:	681b      	ldr	r3, [r3, #0]
 23f7e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f7e06:	9302      	str	r3, [sp, #8]
 23f7e08:	bd09      	pop	{r0, r3, pc}
 23f7e0a:	0000      	.short	0x0000
 23f7e0c:	1006a198 	.word	0x1006a198
 23f7e10:	00000008 	.word	0x00000008

023f7e14 <system_version_info>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
 23f7e14:	b509      	push	{r0, r3, lr}
 23f7e16:	4804      	ldr	r0, [pc, #16]	; (23f7e28 <system_version_info+0x14>)
 23f7e18:	6800      	ldr	r0, [r0, #0]
 23f7e1a:	4b04      	ldr	r3, [pc, #16]	; (23f7e2c <system_version_info+0x18>)
 23f7e1c:	4403      	add	r3, r0
 23f7e1e:	681b      	ldr	r3, [r3, #0]
 23f7e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f7e22:	9302      	str	r3, [sp, #8]
 23f7e24:	bd09      	pop	{r0, r3, pc}
 23f7e26:	0000      	.short	0x0000
 23f7e28:	1006a198 	.word	0x1006a198
 23f7e2c:	00000008 	.word	0x00000008

023f7e30 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN_WRAP(16, system, Spark_Prepare_For_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN_WRAP(17, system, Spark_Save_Firmware_Chunk, protected, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN_WRAP(18, system, Spark_Finish_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 23f7e30:	b509      	push	{r0, r3, lr}
 23f7e32:	4804      	ldr	r0, [pc, #16]	; (23f7e44 <application_thread_current+0x14>)
 23f7e34:	6800      	ldr	r0, [r0, #0]
 23f7e36:	4b04      	ldr	r3, [pc, #16]	; (23f7e48 <application_thread_current+0x18>)
 23f7e38:	4403      	add	r3, r0
 23f7e3a:	681b      	ldr	r3, [r3, #0]
 23f7e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f7e3e:	9302      	str	r3, [sp, #8]
 23f7e40:	bd09      	pop	{r0, r3, pc}
 23f7e42:	0000      	.short	0x0000
 23f7e44:	1006a198 	.word	0x1006a198
 23f7e48:	00000008 	.word	0x00000008

023f7e4c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 23f7e4c:	b509      	push	{r0, r3, lr}
 23f7e4e:	4804      	ldr	r0, [pc, #16]	; (23f7e60 <application_thread_invoke+0x14>)
 23f7e50:	6800      	ldr	r0, [r0, #0]
 23f7e52:	4b04      	ldr	r3, [pc, #16]	; (23f7e64 <application_thread_invoke+0x18>)
 23f7e54:	4403      	add	r3, r0
 23f7e56:	681b      	ldr	r3, [r3, #0]
 23f7e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f7e5a:	9302      	str	r3, [sp, #8]
 23f7e5c:	bd09      	pop	{r0, r3, pc}
 23f7e5e:	0000      	.short	0x0000
 23f7e60:	1006a198 	.word	0x1006a198
 23f7e64:	00000008 	.word	0x00000008

023f7e68 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 23f7e68:	b509      	push	{r0, r3, lr}
 23f7e6a:	4804      	ldr	r0, [pc, #16]	; (23f7e7c <system_thread_get_state+0x14>)
 23f7e6c:	6800      	ldr	r0, [r0, #0]
 23f7e6e:	4b04      	ldr	r3, [pc, #16]	; (23f7e80 <system_thread_get_state+0x18>)
 23f7e70:	4403      	add	r3, r0
 23f7e72:	681b      	ldr	r3, [r3, #0]
 23f7e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f7e76:	9302      	str	r3, [sp, #8]
 23f7e78:	bd09      	pop	{r0, r3, pc}
 23f7e7a:	0000      	.short	0x0000
 23f7e7c:	1006a198 	.word	0x1006a198
 23f7e80:	00000008 	.word	0x00000008

023f7e84 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
 23f7e84:	b509      	push	{r0, r3, lr}
 23f7e86:	4804      	ldr	r0, [pc, #16]	; (23f7e98 <system_notify_time_changed+0x14>)
 23f7e88:	6800      	ldr	r0, [r0, #0]
 23f7e8a:	4b04      	ldr	r3, [pc, #16]	; (23f7e9c <system_notify_time_changed+0x18>)
 23f7e8c:	4403      	add	r3, r0
 23f7e8e:	681b      	ldr	r3, [r3, #0]
 23f7e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23f7e92:	9302      	str	r3, [sp, #8]
 23f7e94:	bd09      	pop	{r0, r3, pc}
 23f7e96:	0000      	.short	0x0000
 23f7e98:	1006a198 	.word	0x1006a198
 23f7e9c:	00000008 	.word	0x00000008

023f7ea0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23f7ea0:	b509      	push	{r0, r3, lr}
 23f7ea2:	4804      	ldr	r0, [pc, #16]	; (23f7eb4 <system_ctrl_set_app_request_handler+0x14>)
 23f7ea4:	6800      	ldr	r0, [r0, #0]
 23f7ea6:	4b04      	ldr	r3, [pc, #16]	; (23f7eb8 <system_ctrl_set_app_request_handler+0x18>)
 23f7ea8:	4403      	add	r3, r0
 23f7eaa:	681b      	ldr	r3, [r3, #0]
 23f7eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23f7eb0:	9302      	str	r3, [sp, #8]
 23f7eb2:	bd09      	pop	{r0, r3, pc}
 23f7eb4:	1006a198 	.word	0x1006a198
 23f7eb8:	00000008 	.word	0x00000008

023f7ebc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23f7ebc:	b509      	push	{r0, r3, lr}
 23f7ebe:	4804      	ldr	r0, [pc, #16]	; (23f7ed0 <system_ctrl_set_result+0x14>)
 23f7ec0:	6800      	ldr	r0, [r0, #0]
 23f7ec2:	4b04      	ldr	r3, [pc, #16]	; (23f7ed4 <system_ctrl_set_result+0x18>)
 23f7ec4:	4403      	add	r3, r0
 23f7ec6:	681b      	ldr	r3, [r3, #0]
 23f7ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23f7ecc:	9302      	str	r3, [sp, #8]
 23f7ece:	bd09      	pop	{r0, r3, pc}
 23f7ed0:	1006a198 	.word	0x1006a198
 23f7ed4:	00000008 	.word	0x00000008

023f7ed8 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 23f7ed8:	b509      	push	{r0, r3, lr}
 23f7eda:	4804      	ldr	r0, [pc, #16]	; (23f7eec <system_reset+0x14>)
 23f7edc:	6800      	ldr	r0, [r0, #0]
 23f7ede:	4b04      	ldr	r3, [pc, #16]	; (23f7ef0 <system_reset+0x18>)
 23f7ee0:	4403      	add	r3, r0
 23f7ee2:	681b      	ldr	r3, [r3, #0]
 23f7ee4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 23f7ee8:	9302      	str	r3, [sp, #8]
 23f7eea:	bd09      	pop	{r0, r3, pc}
 23f7eec:	1006a198 	.word	0x1006a198
 23f7ef0:	00000008 	.word	0x00000008

023f7ef4 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 23f7ef4:	b509      	push	{r0, r3, lr}
 23f7ef6:	4804      	ldr	r0, [pc, #16]	; (23f7f08 <spark_function+0x14>)
 23f7ef8:	6800      	ldr	r0, [r0, #0]
 23f7efa:	4b04      	ldr	r3, [pc, #16]	; (23f7f0c <spark_function+0x18>)
 23f7efc:	4403      	add	r3, r0
 23f7efe:	681b      	ldr	r3, [r3, #0]
 23f7f00:	685b      	ldr	r3, [r3, #4]
 23f7f02:	9302      	str	r3, [sp, #8]
 23f7f04:	bd09      	pop	{r0, r3, pc}
 23f7f06:	0000      	.short	0x0000
 23f7f08:	1006a198 	.word	0x1006a198
 23f7f0c:	0000002c 	.word	0x0000002c

023f7f10 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23f7f10:	b509      	push	{r0, r3, lr}
 23f7f12:	4804      	ldr	r0, [pc, #16]	; (23f7f24 <spark_process+0x14>)
 23f7f14:	6800      	ldr	r0, [r0, #0]
 23f7f16:	4b04      	ldr	r3, [pc, #16]	; (23f7f28 <spark_process+0x18>)
 23f7f18:	4403      	add	r3, r0
 23f7f1a:	681b      	ldr	r3, [r3, #0]
 23f7f1c:	689b      	ldr	r3, [r3, #8]
 23f7f1e:	9302      	str	r3, [sp, #8]
 23f7f20:	bd09      	pop	{r0, r3, pc}
 23f7f22:	0000      	.short	0x0000
 23f7f24:	1006a198 	.word	0x1006a198
 23f7f28:	0000002c 	.word	0x0000002c

023f7f2c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 23f7f2c:	b509      	push	{r0, r3, lr}
 23f7f2e:	4804      	ldr	r0, [pc, #16]	; (23f7f40 <spark_cloud_flag_connect+0x14>)
 23f7f30:	6800      	ldr	r0, [r0, #0]
 23f7f32:	4b04      	ldr	r3, [pc, #16]	; (23f7f44 <spark_cloud_flag_connect+0x18>)
 23f7f34:	4403      	add	r3, r0
 23f7f36:	681b      	ldr	r3, [r3, #0]
 23f7f38:	68db      	ldr	r3, [r3, #12]
 23f7f3a:	9302      	str	r3, [sp, #8]
 23f7f3c:	bd09      	pop	{r0, r3, pc}
 23f7f3e:	0000      	.short	0x0000
 23f7f40:	1006a198 	.word	0x1006a198
 23f7f44:	0000002c 	.word	0x0000002c

023f7f48 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 23f7f48:	b509      	push	{r0, r3, lr}
 23f7f4a:	4804      	ldr	r0, [pc, #16]	; (23f7f5c <spark_cloud_flag_connected+0x14>)
 23f7f4c:	6800      	ldr	r0, [r0, #0]
 23f7f4e:	4b04      	ldr	r3, [pc, #16]	; (23f7f60 <spark_cloud_flag_connected+0x18>)
 23f7f50:	4403      	add	r3, r0
 23f7f52:	681b      	ldr	r3, [r3, #0]
 23f7f54:	695b      	ldr	r3, [r3, #20]
 23f7f56:	9302      	str	r3, [sp, #8]
 23f7f58:	bd09      	pop	{r0, r3, pc}
 23f7f5a:	0000      	.short	0x0000
 23f7f5c:	1006a198 	.word	0x1006a198
 23f7f60:	0000002c 	.word	0x0000002c

023f7f64 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 23f7f64:	b509      	push	{r0, r3, lr}
 23f7f66:	4804      	ldr	r0, [pc, #16]	; (23f7f78 <spark_deviceID+0x14>)
 23f7f68:	6800      	ldr	r0, [r0, #0]
 23f7f6a:	4b04      	ldr	r3, [pc, #16]	; (23f7f7c <spark_deviceID+0x18>)
 23f7f6c:	4403      	add	r3, r0
 23f7f6e:	681b      	ldr	r3, [r3, #0]
 23f7f70:	69db      	ldr	r3, [r3, #28]
 23f7f72:	9302      	str	r3, [sp, #8]
 23f7f74:	bd09      	pop	{r0, r3, pc}
 23f7f76:	0000      	.short	0x0000
 23f7f78:	1006a198 	.word	0x1006a198
 23f7f7c:	0000002c 	.word	0x0000002c

023f7f80 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 23f7f80:	b509      	push	{r0, r3, lr}
 23f7f82:	4804      	ldr	r0, [pc, #16]	; (23f7f94 <spark_send_event+0x14>)
 23f7f84:	6800      	ldr	r0, [r0, #0]
 23f7f86:	4b04      	ldr	r3, [pc, #16]	; (23f7f98 <spark_send_event+0x18>)
 23f7f88:	4403      	add	r3, r0
 23f7f8a:	681b      	ldr	r3, [r3, #0]
 23f7f8c:	6a1b      	ldr	r3, [r3, #32]
 23f7f8e:	9302      	str	r3, [sp, #8]
 23f7f90:	bd09      	pop	{r0, r3, pc}
 23f7f92:	0000      	.short	0x0000
 23f7f94:	1006a198 	.word	0x1006a198
 23f7f98:	0000002c 	.word	0x0000002c

023f7f9c <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, spark_subscribe_param*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 23f7f9c:	b509      	push	{r0, r3, lr}
 23f7f9e:	4804      	ldr	r0, [pc, #16]	; (23f7fb0 <spark_sync_time+0x14>)
 23f7fa0:	6800      	ldr	r0, [r0, #0]
 23f7fa2:	4b04      	ldr	r3, [pc, #16]	; (23f7fb4 <spark_sync_time+0x18>)
 23f7fa4:	4403      	add	r3, r0
 23f7fa6:	681b      	ldr	r3, [r3, #0]
 23f7fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f7faa:	9302      	str	r3, [sp, #8]
 23f7fac:	bd09      	pop	{r0, r3, pc}
 23f7fae:	0000      	.short	0x0000
 23f7fb0:	1006a198 	.word	0x1006a198
 23f7fb4:	0000002c 	.word	0x0000002c

023f7fb8 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 23f7fb8:	b509      	push	{r0, r3, lr}
 23f7fba:	4804      	ldr	r0, [pc, #16]	; (23f7fcc <spark_sync_time_pending+0x14>)
 23f7fbc:	6800      	ldr	r0, [r0, #0]
 23f7fbe:	4b04      	ldr	r3, [pc, #16]	; (23f7fd0 <spark_sync_time_pending+0x18>)
 23f7fc0:	4403      	add	r3, r0
 23f7fc2:	681b      	ldr	r3, [r3, #0]
 23f7fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f7fc6:	9302      	str	r3, [sp, #8]
 23f7fc8:	bd09      	pop	{r0, r3, pc}
 23f7fca:	0000      	.short	0x0000
 23f7fcc:	1006a198 	.word	0x1006a198
 23f7fd0:	0000002c 	.word	0x0000002c

023f7fd4 <spark_set_connection_property>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
 23f7fd4:	b509      	push	{r0, r3, lr}
 23f7fd6:	4804      	ldr	r0, [pc, #16]	; (23f7fe8 <spark_set_connection_property+0x14>)
 23f7fd8:	6800      	ldr	r0, [r0, #0]
 23f7fda:	4b04      	ldr	r3, [pc, #16]	; (23f7fec <spark_set_connection_property+0x18>)
 23f7fdc:	4403      	add	r3, r0
 23f7fde:	681b      	ldr	r3, [r3, #0]
 23f7fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23f7fe2:	9302      	str	r3, [sp, #8]
 23f7fe4:	bd09      	pop	{r0, r3, pc}
 23f7fe6:	0000      	.short	0x0000
 23f7fe8:	1006a198 	.word	0x1006a198
 23f7fec:	0000002c 	.word	0x0000002c

023f7ff0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23f7ff0:	b509      	push	{r0, r3, lr}
 23f7ff2:	4804      	ldr	r0, [pc, #16]	; (23f8004 <spark_set_random_seed_from_cloud_handler+0x14>)
 23f7ff4:	6800      	ldr	r0, [r0, #0]
 23f7ff6:	4b04      	ldr	r3, [pc, #16]	; (23f8008 <spark_set_random_seed_from_cloud_handler+0x18>)
 23f7ff8:	4403      	add	r3, r0
 23f7ffa:	681b      	ldr	r3, [r3, #0]
 23f7ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f7ffe:	9302      	str	r3, [sp, #8]
 23f8000:	bd09      	pop	{r0, r3, pc}
 23f8002:	0000      	.short	0x0000
 23f8004:	1006a198 	.word	0x1006a198
 23f8008:	0000002c 	.word	0x0000002c

023f800c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 23f800c:	b509      	push	{r0, r3, lr}
 23f800e:	4804      	ldr	r0, [pc, #16]	; (23f8020 <spark_cloud_disconnect+0x14>)
 23f8010:	6800      	ldr	r0, [r0, #0]
 23f8012:	4b04      	ldr	r3, [pc, #16]	; (23f8024 <spark_cloud_disconnect+0x18>)
 23f8014:	4403      	add	r3, r0
 23f8016:	681b      	ldr	r3, [r3, #0]
 23f8018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f801a:	9302      	str	r3, [sp, #8]
 23f801c:	bd09      	pop	{r0, r3, pc}
 23f801e:	0000      	.short	0x0000
 23f8020:	1006a198 	.word	0x1006a198
 23f8024:	0000002c 	.word	0x0000002c

023f8028 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23f8028:	b509      	push	{r0, r3, lr}
 23f802a:	4804      	ldr	r0, [pc, #16]	; (23f803c <network_connect+0x14>)
 23f802c:	6800      	ldr	r0, [r0, #0]
 23f802e:	4b04      	ldr	r3, [pc, #16]	; (23f8040 <network_connect+0x18>)
 23f8030:	4403      	add	r3, r0
 23f8032:	681b      	ldr	r3, [r3, #0]
 23f8034:	685b      	ldr	r3, [r3, #4]
 23f8036:	9302      	str	r3, [sp, #8]
 23f8038:	bd09      	pop	{r0, r3, pc}
 23f803a:	0000      	.short	0x0000
 23f803c:	1006a198 	.word	0x1006a198
 23f8040:	00000028 	.word	0x00000028

023f8044 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23f8044:	b509      	push	{r0, r3, lr}
 23f8046:	4804      	ldr	r0, [pc, #16]	; (23f8058 <network_connecting+0x14>)
 23f8048:	6800      	ldr	r0, [r0, #0]
 23f804a:	4b04      	ldr	r3, [pc, #16]	; (23f805c <network_connecting+0x18>)
 23f804c:	4403      	add	r3, r0
 23f804e:	681b      	ldr	r3, [r3, #0]
 23f8050:	689b      	ldr	r3, [r3, #8]
 23f8052:	9302      	str	r3, [sp, #8]
 23f8054:	bd09      	pop	{r0, r3, pc}
 23f8056:	0000      	.short	0x0000
 23f8058:	1006a198 	.word	0x1006a198
 23f805c:	00000028 	.word	0x00000028

023f8060 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23f8060:	b509      	push	{r0, r3, lr}
 23f8062:	4804      	ldr	r0, [pc, #16]	; (23f8074 <network_disconnect+0x14>)
 23f8064:	6800      	ldr	r0, [r0, #0]
 23f8066:	4b04      	ldr	r3, [pc, #16]	; (23f8078 <network_disconnect+0x18>)
 23f8068:	4403      	add	r3, r0
 23f806a:	681b      	ldr	r3, [r3, #0]
 23f806c:	68db      	ldr	r3, [r3, #12]
 23f806e:	9302      	str	r3, [sp, #8]
 23f8070:	bd09      	pop	{r0, r3, pc}
 23f8072:	0000      	.short	0x0000
 23f8074:	1006a198 	.word	0x1006a198
 23f8078:	00000028 	.word	0x00000028

023f807c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23f807c:	b509      	push	{r0, r3, lr}
 23f807e:	4804      	ldr	r0, [pc, #16]	; (23f8090 <network_ready+0x14>)
 23f8080:	6800      	ldr	r0, [r0, #0]
 23f8082:	4b04      	ldr	r3, [pc, #16]	; (23f8094 <network_ready+0x18>)
 23f8084:	4403      	add	r3, r0
 23f8086:	681b      	ldr	r3, [r3, #0]
 23f8088:	691b      	ldr	r3, [r3, #16]
 23f808a:	9302      	str	r3, [sp, #8]
 23f808c:	bd09      	pop	{r0, r3, pc}
 23f808e:	0000      	.short	0x0000
 23f8090:	1006a198 	.word	0x1006a198
 23f8094:	00000028 	.word	0x00000028

023f8098 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23f8098:	b509      	push	{r0, r3, lr}
 23f809a:	4804      	ldr	r0, [pc, #16]	; (23f80ac <network_on+0x14>)
 23f809c:	6800      	ldr	r0, [r0, #0]
 23f809e:	4b04      	ldr	r3, [pc, #16]	; (23f80b0 <network_on+0x18>)
 23f80a0:	4403      	add	r3, r0
 23f80a2:	681b      	ldr	r3, [r3, #0]
 23f80a4:	695b      	ldr	r3, [r3, #20]
 23f80a6:	9302      	str	r3, [sp, #8]
 23f80a8:	bd09      	pop	{r0, r3, pc}
 23f80aa:	0000      	.short	0x0000
 23f80ac:	1006a198 	.word	0x1006a198
 23f80b0:	00000028 	.word	0x00000028

023f80b4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23f80b4:	b509      	push	{r0, r3, lr}
 23f80b6:	4804      	ldr	r0, [pc, #16]	; (23f80c8 <network_off+0x14>)
 23f80b8:	6800      	ldr	r0, [r0, #0]
 23f80ba:	4b04      	ldr	r3, [pc, #16]	; (23f80cc <network_off+0x18>)
 23f80bc:	4403      	add	r3, r0
 23f80be:	681b      	ldr	r3, [r3, #0]
 23f80c0:	699b      	ldr	r3, [r3, #24]
 23f80c2:	9302      	str	r3, [sp, #8]
 23f80c4:	bd09      	pop	{r0, r3, pc}
 23f80c6:	0000      	.short	0x0000
 23f80c8:	1006a198 	.word	0x1006a198
 23f80cc:	00000028 	.word	0x00000028

023f80d0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23f80d0:	b509      	push	{r0, r3, lr}
 23f80d2:	4804      	ldr	r0, [pc, #16]	; (23f80e4 <network_listen+0x14>)
 23f80d4:	6800      	ldr	r0, [r0, #0]
 23f80d6:	4b04      	ldr	r3, [pc, #16]	; (23f80e8 <network_listen+0x18>)
 23f80d8:	4403      	add	r3, r0
 23f80da:	681b      	ldr	r3, [r3, #0]
 23f80dc:	69db      	ldr	r3, [r3, #28]
 23f80de:	9302      	str	r3, [sp, #8]
 23f80e0:	bd09      	pop	{r0, r3, pc}
 23f80e2:	0000      	.short	0x0000
 23f80e4:	1006a198 	.word	0x1006a198
 23f80e8:	00000028 	.word	0x00000028

023f80ec <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23f80ec:	b509      	push	{r0, r3, lr}
 23f80ee:	4804      	ldr	r0, [pc, #16]	; (23f8100 <network_listening+0x14>)
 23f80f0:	6800      	ldr	r0, [r0, #0]
 23f80f2:	4b04      	ldr	r3, [pc, #16]	; (23f8104 <network_listening+0x18>)
 23f80f4:	4403      	add	r3, r0
 23f80f6:	681b      	ldr	r3, [r3, #0]
 23f80f8:	6a1b      	ldr	r3, [r3, #32]
 23f80fa:	9302      	str	r3, [sp, #8]
 23f80fc:	bd09      	pop	{r0, r3, pc}
 23f80fe:	0000      	.short	0x0000
 23f8100:	1006a198 	.word	0x1006a198
 23f8104:	00000028 	.word	0x00000028

023f8108 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23f8108:	b509      	push	{r0, r3, lr}
 23f810a:	4804      	ldr	r0, [pc, #16]	; (23f811c <network_set_listen_timeout+0x14>)
 23f810c:	6800      	ldr	r0, [r0, #0]
 23f810e:	4b04      	ldr	r3, [pc, #16]	; (23f8120 <network_set_listen_timeout+0x18>)
 23f8110:	4403      	add	r3, r0
 23f8112:	681b      	ldr	r3, [r3, #0]
 23f8114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f8116:	9302      	str	r3, [sp, #8]
 23f8118:	bd09      	pop	{r0, r3, pc}
 23f811a:	0000      	.short	0x0000
 23f811c:	1006a198 	.word	0x1006a198
 23f8120:	00000028 	.word	0x00000028

023f8124 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23f8124:	b509      	push	{r0, r3, lr}
 23f8126:	4804      	ldr	r0, [pc, #16]	; (23f8138 <network_get_listen_timeout+0x14>)
 23f8128:	6800      	ldr	r0, [r0, #0]
 23f812a:	4b04      	ldr	r3, [pc, #16]	; (23f813c <network_get_listen_timeout+0x18>)
 23f812c:	4403      	add	r3, r0
 23f812e:	681b      	ldr	r3, [r3, #0]
 23f8130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f8132:	9302      	str	r3, [sp, #8]
 23f8134:	bd09      	pop	{r0, r3, pc}
 23f8136:	0000      	.short	0x0000
 23f8138:	1006a198 	.word	0x1006a198
 23f813c:	00000028 	.word	0x00000028

023f8140 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23f8140:	b509      	push	{r0, r3, lr}
 23f8142:	4804      	ldr	r0, [pc, #16]	; (23f8154 <network_is_on+0x14>)
 23f8144:	6800      	ldr	r0, [r0, #0]
 23f8146:	4b04      	ldr	r3, [pc, #16]	; (23f8158 <network_is_on+0x18>)
 23f8148:	4403      	add	r3, r0
 23f814a:	681b      	ldr	r3, [r3, #0]
 23f814c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f814e:	9302      	str	r3, [sp, #8]
 23f8150:	bd09      	pop	{r0, r3, pc}
 23f8152:	0000      	.short	0x0000
 23f8154:	1006a198 	.word	0x1006a198
 23f8158:	00000028 	.word	0x00000028

023f815c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23f815c:	b509      	push	{r0, r3, lr}
 23f815e:	4804      	ldr	r0, [pc, #16]	; (23f8170 <network_is_off+0x14>)
 23f8160:	6800      	ldr	r0, [r0, #0]
 23f8162:	4b04      	ldr	r3, [pc, #16]	; (23f8174 <network_is_off+0x18>)
 23f8164:	4403      	add	r3, r0
 23f8166:	681b      	ldr	r3, [r3, #0]
 23f8168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f816a:	9302      	str	r3, [sp, #8]
 23f816c:	bd09      	pop	{r0, r3, pc}
 23f816e:	0000      	.short	0x0000
 23f8170:	1006a198 	.word	0x1006a198
 23f8174:	00000028 	.word	0x00000028

023f8178 <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
 23f8178:	b509      	push	{r0, r3, lr}
 23f817a:	4804      	ldr	r0, [pc, #16]	; (23f818c <network_prefer+0x14>)
 23f817c:	6800      	ldr	r0, [r0, #0]
 23f817e:	4b04      	ldr	r3, [pc, #16]	; (23f8190 <network_prefer+0x18>)
 23f8180:	4403      	add	r3, r0
 23f8182:	681b      	ldr	r3, [r3, #0]
 23f8184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f8186:	9302      	str	r3, [sp, #8]
 23f8188:	bd09      	pop	{r0, r3, pc}
 23f818a:	0000      	.short	0x0000
 23f818c:	1006a198 	.word	0x1006a198
 23f8190:	00000028 	.word	0x00000028

023f8194 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
 23f8194:	b509      	push	{r0, r3, lr}
 23f8196:	4804      	ldr	r0, [pc, #16]	; (23f81a8 <network_is_preferred+0x14>)
 23f8198:	6800      	ldr	r0, [r0, #0]
 23f819a:	4b04      	ldr	r3, [pc, #16]	; (23f81ac <network_is_preferred+0x18>)
 23f819c:	4403      	add	r3, r0
 23f819e:	681b      	ldr	r3, [r3, #0]
 23f81a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f81a2:	9302      	str	r3, [sp, #8]
 23f81a4:	bd09      	pop	{r0, r3, pc}
 23f81a6:	0000      	.short	0x0000
 23f81a8:	1006a198 	.word	0x1006a198
 23f81ac:	00000028 	.word	0x00000028

023f81b0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || defined(DYNALIB_IMPORT)

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23f81b0:	b509      	push	{r0, r3, lr}
 23f81b2:	4804      	ldr	r0, [pc, #16]	; (23f81c4 <malloc+0x14>)
 23f81b4:	6800      	ldr	r0, [r0, #0]
 23f81b6:	4b04      	ldr	r3, [pc, #16]	; (23f81c8 <malloc+0x18>)
 23f81b8:	4403      	add	r3, r0
 23f81ba:	681b      	ldr	r3, [r3, #0]
 23f81bc:	681b      	ldr	r3, [r3, #0]
 23f81be:	9302      	str	r3, [sp, #8]
 23f81c0:	bd09      	pop	{r0, r3, pc}
 23f81c2:	0000      	.short	0x0000
 23f81c4:	1006a198 	.word	0x1006a198
 23f81c8:	00000004 	.word	0x00000004

023f81cc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23f81cc:	b509      	push	{r0, r3, lr}
 23f81ce:	4804      	ldr	r0, [pc, #16]	; (23f81e0 <free+0x14>)
 23f81d0:	6800      	ldr	r0, [r0, #0]
 23f81d2:	4b04      	ldr	r3, [pc, #16]	; (23f81e4 <free+0x18>)
 23f81d4:	4403      	add	r3, r0
 23f81d6:	681b      	ldr	r3, [r3, #0]
 23f81d8:	685b      	ldr	r3, [r3, #4]
 23f81da:	9302      	str	r3, [sp, #8]
 23f81dc:	bd09      	pop	{r0, r3, pc}
 23f81de:	0000      	.short	0x0000
 23f81e0:	1006a198 	.word	0x1006a198
 23f81e4:	00000004 	.word	0x00000004

023f81e8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23f81e8:	b509      	push	{r0, r3, lr}
 23f81ea:	4804      	ldr	r0, [pc, #16]	; (23f81fc <realloc+0x14>)
 23f81ec:	6800      	ldr	r0, [r0, #0]
 23f81ee:	4b04      	ldr	r3, [pc, #16]	; (23f8200 <realloc+0x18>)
 23f81f0:	4403      	add	r3, r0
 23f81f2:	681b      	ldr	r3, [r3, #0]
 23f81f4:	689b      	ldr	r3, [r3, #8]
 23f81f6:	9302      	str	r3, [sp, #8]
 23f81f8:	bd09      	pop	{r0, r3, pc}
 23f81fa:	0000      	.short	0x0000
 23f81fc:	1006a198 	.word	0x1006a198
 23f8200:	00000004 	.word	0x00000004

023f8204 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 23f8204:	b509      	push	{r0, r3, lr}
 23f8206:	4804      	ldr	r0, [pc, #16]	; (23f8218 <sprintf+0x14>)
 23f8208:	6800      	ldr	r0, [r0, #0]
 23f820a:	4b04      	ldr	r3, [pc, #16]	; (23f821c <sprintf+0x18>)
 23f820c:	4403      	add	r3, r0
 23f820e:	681b      	ldr	r3, [r3, #0]
 23f8210:	68db      	ldr	r3, [r3, #12]
 23f8212:	9302      	str	r3, [sp, #8]
 23f8214:	bd09      	pop	{r0, r3, pc}
 23f8216:	0000      	.short	0x0000
 23f8218:	1006a198 	.word	0x1006a198
 23f821c:	00000004 	.word	0x00000004

023f8220 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23f8220:	b509      	push	{r0, r3, lr}
 23f8222:	4804      	ldr	r0, [pc, #16]	; (23f8234 <vsnprintf+0x14>)
 23f8224:	6800      	ldr	r0, [r0, #0]
 23f8226:	4b04      	ldr	r3, [pc, #16]	; (23f8238 <vsnprintf+0x18>)
 23f8228:	4403      	add	r3, r0
 23f822a:	681b      	ldr	r3, [r3, #0]
 23f822c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f822e:	9302      	str	r3, [sp, #8]
 23f8230:	bd09      	pop	{r0, r3, pc}
 23f8232:	0000      	.short	0x0000
 23f8234:	1006a198 	.word	0x1006a198
 23f8238:	00000004 	.word	0x00000004

023f823c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23f823c:	b509      	push	{r0, r3, lr}
 23f823e:	4804      	ldr	r0, [pc, #16]	; (23f8250 <abort+0x14>)
 23f8240:	6800      	ldr	r0, [r0, #0]
 23f8242:	4b04      	ldr	r3, [pc, #16]	; (23f8254 <abort+0x18>)
 23f8244:	4403      	add	r3, r0
 23f8246:	681b      	ldr	r3, [r3, #0]
 23f8248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f824a:	9302      	str	r3, [sp, #8]
 23f824c:	bd09      	pop	{r0, r3, pc}
 23f824e:	0000      	.short	0x0000
 23f8250:	1006a198 	.word	0x1006a198
 23f8254:	00000004 	.word	0x00000004

023f8258 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23f8258:	b509      	push	{r0, r3, lr}
 23f825a:	4804      	ldr	r0, [pc, #16]	; (23f826c <_malloc_r+0x14>)
 23f825c:	6800      	ldr	r0, [r0, #0]
 23f825e:	4b04      	ldr	r3, [pc, #16]	; (23f8270 <_malloc_r+0x18>)
 23f8260:	4403      	add	r3, r0
 23f8262:	681b      	ldr	r3, [r3, #0]
 23f8264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f8266:	9302      	str	r3, [sp, #8]
 23f8268:	bd09      	pop	{r0, r3, pc}
 23f826a:	0000      	.short	0x0000
 23f826c:	1006a198 	.word	0x1006a198
 23f8270:	00000004 	.word	0x00000004

023f8274 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23f8274:	b509      	push	{r0, r3, lr}
 23f8276:	4804      	ldr	r0, [pc, #16]	; (23f8288 <__errno+0x14>)
 23f8278:	6800      	ldr	r0, [r0, #0]
 23f827a:	4b04      	ldr	r3, [pc, #16]	; (23f828c <__errno+0x18>)
 23f827c:	4403      	add	r3, r0
 23f827e:	681b      	ldr	r3, [r3, #0]
 23f8280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f8282:	9302      	str	r3, [sp, #8]
 23f8284:	bd09      	pop	{r0, r3, pc}
 23f8286:	0000      	.short	0x0000
 23f8288:	1006a198 	.word	0x1006a198
 23f828c:	00000004 	.word	0x00000004

023f8290 <__assert_func>:

#if defined(DYNALIB_EXPORT) || defined(DYNALIB_IMPORT)
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23f8290:	b509      	push	{r0, r3, lr}
 23f8292:	4804      	ldr	r0, [pc, #16]	; (23f82a4 <__assert_func+0x14>)
 23f8294:	6800      	ldr	r0, [r0, #0]
 23f8296:	4b04      	ldr	r3, [pc, #16]	; (23f82a8 <__assert_func+0x18>)
 23f8298:	4403      	add	r3, r0
 23f829a:	681b      	ldr	r3, [r3, #0]
 23f829c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f829e:	9302      	str	r3, [sp, #8]
 23f82a0:	bd09      	pop	{r0, r3, pc}
 23f82a2:	0000      	.short	0x0000
 23f82a4:	1006a198 	.word	0x1006a198
 23f82a8:	00000004 	.word	0x00000004

023f82ac <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23f82ac:	b509      	push	{r0, r3, lr}
 23f82ae:	4804      	ldr	r0, [pc, #16]	; (23f82c0 <newlib_impure_ptr_callback+0x14>)
 23f82b0:	6800      	ldr	r0, [r0, #0]
 23f82b2:	4b04      	ldr	r3, [pc, #16]	; (23f82c4 <newlib_impure_ptr_callback+0x18>)
 23f82b4:	4403      	add	r3, r0
 23f82b6:	681b      	ldr	r3, [r3, #0]
 23f82b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f82ba:	9302      	str	r3, [sp, #8]
 23f82bc:	bd09      	pop	{r0, r3, pc}
 23f82be:	0000      	.short	0x0000
 23f82c0:	1006a198 	.word	0x1006a198
 23f82c4:	00000004 	.word	0x00000004

023f82c8 <localtime_r>:

DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
 23f82c8:	b509      	push	{r0, r3, lr}
 23f82ca:	4804      	ldr	r0, [pc, #16]	; (23f82dc <localtime_r+0x14>)
 23f82cc:	6800      	ldr	r0, [r0, #0]
 23f82ce:	4b04      	ldr	r3, [pc, #16]	; (23f82e0 <localtime_r+0x18>)
 23f82d0:	4403      	add	r3, r0
 23f82d2:	681b      	ldr	r3, [r3, #0]
 23f82d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f82d6:	9302      	str	r3, [sp, #8]
 23f82d8:	bd09      	pop	{r0, r3, pc}
 23f82da:	0000      	.short	0x0000
 23f82dc:	1006a198 	.word	0x1006a198
 23f82e0:	00000004 	.word	0x00000004

023f82e4 <__cxa_guard_acquire>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
DYNALIB_FN(22, rt, __cxa_guard_acquire, int(__guard*))
 23f82e4:	b509      	push	{r0, r3, lr}
 23f82e6:	4804      	ldr	r0, [pc, #16]	; (23f82f8 <__cxa_guard_acquire+0x14>)
 23f82e8:	6800      	ldr	r0, [r0, #0]
 23f82ea:	4b04      	ldr	r3, [pc, #16]	; (23f82fc <__cxa_guard_acquire+0x18>)
 23f82ec:	4403      	add	r3, r0
 23f82ee:	681b      	ldr	r3, [r3, #0]
 23f82f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f82f2:	9302      	str	r3, [sp, #8]
 23f82f4:	bd09      	pop	{r0, r3, pc}
 23f82f6:	0000      	.short	0x0000
 23f82f8:	1006a198 	.word	0x1006a198
 23f82fc:	00000004 	.word	0x00000004

023f8300 <__cxa_guard_release>:
DYNALIB_FN(23, rt, __cxa_guard_release, void(__guard*))
 23f8300:	b509      	push	{r0, r3, lr}
 23f8302:	4804      	ldr	r0, [pc, #16]	; (23f8314 <__cxa_guard_release+0x14>)
 23f8304:	6800      	ldr	r0, [r0, #0]
 23f8306:	4b04      	ldr	r3, [pc, #16]	; (23f8318 <__cxa_guard_release+0x18>)
 23f8308:	4403      	add	r3, r0
 23f830a:	681b      	ldr	r3, [r3, #0]
 23f830c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23f830e:	9302      	str	r3, [sp, #8]
 23f8310:	bd09      	pop	{r0, r3, pc}
 23f8312:	0000      	.short	0x0000
 23f8314:	1006a198 	.word	0x1006a198
 23f8318:	00000004 	.word	0x00000004

023f831c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23f831c:	2100      	movs	r1, #0
 23f831e:	f7ff bd5d 	b.w	23f7ddc <system_delay_ms>

023f8322 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 23f8322:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 23f8324:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23f8326:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23f8328:	b17c      	cbz	r4, 23f834a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23f832a:	6863      	ldr	r3, [r4, #4]
 23f832c:	3b01      	subs	r3, #1
 23f832e:	6063      	str	r3, [r4, #4]
 23f8330:	b95b      	cbnz	r3, 23f834a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23f8332:	6823      	ldr	r3, [r4, #0]
 23f8334:	4620      	mov	r0, r4
 23f8336:	689b      	ldr	r3, [r3, #8]
 23f8338:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23f833a:	68a3      	ldr	r3, [r4, #8]
 23f833c:	3b01      	subs	r3, #1
 23f833e:	60a3      	str	r3, [r4, #8]
 23f8340:	b91b      	cbnz	r3, 23f834a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23f8342:	6823      	ldr	r3, [r4, #0]
 23f8344:	4620      	mov	r0, r4
 23f8346:	68db      	ldr	r3, [r3, #12]
 23f8348:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23f834a:	4628      	mov	r0, r5
 23f834c:	bd38      	pop	{r3, r4, r5, pc}

023f834e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 23f834e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 23f8350:	6883      	ldr	r3, [r0, #8]
 23f8352:	4604      	mov	r4, r0
 23f8354:	b90b      	cbnz	r3, 23f835a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 23f8356:	f002 f893 	bl	23fa480 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f835a:	68c3      	ldr	r3, [r0, #12]
 23f835c:	4798      	blx	r3
      if (_M_manager)
 23f835e:	68a3      	ldr	r3, [r4, #8]
 23f8360:	b11b      	cbz	r3, 23f836a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23f8362:	2203      	movs	r2, #3
 23f8364:	4621      	mov	r1, r4
 23f8366:	4620      	mov	r0, r4
 23f8368:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 23f836a:	4620      	mov	r0, r4
}
 23f836c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 23f8370:	2110      	movs	r1, #16
 23f8372:	f7ef ba82 	b.w	23e787a <_ZdlPvj>

023f8376 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23f8376:	b510      	push	{r4, lr}
      if (_M_manager)
 23f8378:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23f837a:	4604      	mov	r4, r0
      if (_M_manager)
 23f837c:	b113      	cbz	r3, 23f8384 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23f837e:	2203      	movs	r2, #3
 23f8380:	4601      	mov	r1, r0
 23f8382:	4798      	blx	r3
    }
 23f8384:	4620      	mov	r0, r4
 23f8386:	bd10      	pop	{r4, pc}

023f8388 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 23f8388:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f838a:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 23f838c:	460b      	mov	r3, r1
 23f838e:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f8390:	e9d0 0100 	ldrd	r0, r1, [r0]
 23f8394:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23f8398:	e893 0003 	ldmia.w	r3, {r0, r1}
 23f839c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23f83a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 23f83a4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 23f83a8:	b002      	add	sp, #8
 23f83aa:	bd10      	pop	{r4, pc}

023f83ac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23f83ac:	2300      	movs	r3, #0
 23f83ae:	4802      	ldr	r0, [pc, #8]	; (23f83b8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23f83b0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23f83b2:	f7ff b915 	b.w	23f75e0 <os_mutex_recursive_create>
 23f83b6:	bf00      	nop
 23f83b8:	1007aeb4 	.word	0x1007aeb4

023f83bc <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 23f83bc:	2200      	movs	r2, #0
 23f83be:	6840      	ldr	r0, [r0, #4]
 23f83c0:	4611      	mov	r1, r2
 23f83c2:	f7ff be5b 	b.w	23f807c <network_ready>

023f83c6 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 23f83c6:	2200      	movs	r2, #0
 23f83c8:	6840      	ldr	r0, [r0, #4]
 23f83ca:	4611      	mov	r1, r2
 23f83cc:	f7ff be8e 	b.w	23f80ec <network_listening>

023f83d0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23f83d0:	2200      	movs	r2, #0
 23f83d2:	6840      	ldr	r0, [r0, #4]
 23f83d4:	4611      	mov	r1, r2
 23f83d6:	f7ff bea5 	b.w	23f8124 <network_get_listen_timeout>

023f83da <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23f83da:	2200      	movs	r2, #0
 23f83dc:	6840      	ldr	r0, [r0, #4]
 23f83de:	f7ff be93 	b.w	23f8108 <network_set_listen_timeout>

023f83e2 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23f83e2:	2200      	movs	r2, #0
 23f83e4:	6840      	ldr	r0, [r0, #4]
 23f83e6:	f081 0101 	eor.w	r1, r1, #1
 23f83ea:	f7ff be71 	b.w	23f80d0 <network_listen>

023f83ee <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23f83ee:	2200      	movs	r2, #0
 23f83f0:	6840      	ldr	r0, [r0, #4]
 23f83f2:	4611      	mov	r1, r2
 23f83f4:	f7ff be26 	b.w	23f8044 <network_connecting>

023f83f8 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23f83f8:	2200      	movs	r2, #0
 23f83fa:	2102      	movs	r1, #2
 23f83fc:	6840      	ldr	r0, [r0, #4]
 23f83fe:	f7ff be2f 	b.w	23f8060 <network_disconnect>

023f8402 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23f8402:	2300      	movs	r3, #0
 23f8404:	6840      	ldr	r0, [r0, #4]
 23f8406:	461a      	mov	r2, r3
 23f8408:	f7ff be0e 	b.w	23f8028 <network_connect>

023f840c <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 23f840c:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
 23f840e:	2518      	movs	r5, #24
 23f8410:	4b12      	ldr	r3, [pc, #72]	; (23f845c <_ZN5spark13CellularClass4RSSIEv+0x50>)
 23f8412:	460e      	mov	r6, r1
 23f8414:	6003      	str	r3, [r0, #0]
 23f8416:	3330      	adds	r3, #48	; 0x30
 23f8418:	462a      	mov	r2, r5
 23f841a:	2100      	movs	r1, #0
 23f841c:	b086      	sub	sp, #24
 23f841e:	6043      	str	r3, [r0, #4]
 23f8420:	4604      	mov	r4, r0
 23f8422:	3008      	adds	r0, #8
 23f8424:	f004 fd0f 	bl	23fce46 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 23f8428:	2200      	movs	r2, #0
 23f842a:	6870      	ldr	r0, [r6, #4]
 23f842c:	4611      	mov	r1, r2
 23f842e:	f7ff fe25 	bl	23f807c <network_ready>
 23f8432:	b178      	cbz	r0, 23f8454 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
 23f8434:	2100      	movs	r1, #0
 23f8436:	462a      	mov	r2, r5
 23f8438:	4668      	mov	r0, sp
 23f843a:	f004 fd04 	bl	23fce46 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
 23f843e:	4669      	mov	r1, sp
 23f8440:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
 23f8442:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
 23f8446:	f7ff f893 	bl	23f7570 <cellular_signal>
 23f844a:	b918      	cbnz	r0, 23f8454 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
 23f844c:	4669      	mov	r1, sp
 23f844e:	4620      	mov	r0, r4
 23f8450:	f000 f990 	bl	23f8774 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
 23f8454:	4620      	mov	r0, r4
 23f8456:	b006      	add	sp, #24
 23f8458:	bd70      	pop	{r4, r5, r6, pc}
 23f845a:	bf00      	nop
 23f845c:	023ff9c8 	.word	0x023ff9c8

023f8460 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 23f8460:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 23f8462:	2428      	movs	r4, #40	; 0x28
 23f8464:	4b07      	ldr	r3, [pc, #28]	; (23f8484 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 23f8466:	4622      	mov	r2, r4
 23f8468:	4618      	mov	r0, r3
 23f846a:	2100      	movs	r1, #0
 23f846c:	f004 fceb 	bl	23fce46 <memset>
        cid = -1;
 23f8470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f8474:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name, bool flushCache = false);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23f8476:	2204      	movs	r2, #4
 23f8478:	4b03      	ldr	r3, [pc, #12]	; (23f8488 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 23f847a:	8004      	strh	r4, [r0, #0]
 23f847c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 23f847e:	4a03      	ldr	r2, [pc, #12]	; (23f848c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 23f8480:	601a      	str	r2, [r3, #0]
 23f8482:	bd10      	pop	{r4, pc}
 23f8484:	1007aec0 	.word	0x1007aec0
 23f8488:	1007aeb8 	.word	0x1007aeb8
 23f848c:	023ff978 	.word	0x023ff978

023f8490 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 23f8490:	4770      	bx	lr

023f8492 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 23f8492:	7b00      	ldrb	r0, [r0, #12]
 23f8494:	4770      	bx	lr

023f8496 <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
 23f8496:	7b03      	ldrb	r3, [r0, #12]
 23f8498:	b14b      	cbz	r3, 23f84ae <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
 23f849a:	6903      	ldr	r3, [r0, #16]
 23f849c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23f84a0:	d005      	beq.n	23f84ae <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
 23f84a2:	6980      	ldr	r0, [r0, #24]
 23f84a4:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
 23f84a8:	bf18      	it	ne
 23f84aa:	2001      	movne	r0, #1
 23f84ac:	4770      	bx	lr
 23f84ae:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
 23f84b0:	4770      	bx	lr

023f84b2 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
 23f84b2:	6803      	ldr	r3, [r0, #0]
 23f84b4:	6a1b      	ldr	r3, [r3, #32]
 23f84b6:	4718      	bx	r3

023f84b8 <_ZN14CellularSignalD0Ev>:
 23f84b8:	b510      	push	{r4, lr}
 23f84ba:	4604      	mov	r4, r0
 23f84bc:	2120      	movs	r1, #32
 23f84be:	f7ef f9dc 	bl	23e787a <_ZdlPvj>
 23f84c2:	4620      	mov	r0, r4
 23f84c4:	bd10      	pop	{r4, pc}
	...

023f84c8 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 23f84c8:	7b03      	ldrb	r3, [r0, #12]
 23f84ca:	b17b      	cbz	r3, 23f84ec <_ZNK14CellularSignal11getStrengthEv+0x24>
 23f84cc:	6943      	ldr	r3, [r0, #20]
 23f84ce:	2b00      	cmp	r3, #0
 23f84d0:	db0c      	blt.n	23f84ec <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
 23f84d2:	ee07 3a90 	vmov	s15, r3
 23f84d6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 23f84f4 <_ZNK14CellularSignal11getStrengthEv+0x2c>
 23f84da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f84de:	ee87 0a87 	vdiv.f32	s0, s15, s14
 23f84e2:	eddf 7a05 	vldr	s15, [pc, #20]	; 23f84f8 <_ZNK14CellularSignal11getStrengthEv+0x30>
 23f84e6:	ee20 0a27 	vmul.f32	s0, s0, s15
 23f84ea:	4770      	bx	lr
    return -1.0f;
 23f84ec:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
 23f84f0:	4770      	bx	lr
 23f84f2:	bf00      	nop
 23f84f4:	477fff00 	.word	0x477fff00
 23f84f8:	42c80000 	.word	0x42c80000

023f84fc <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 23f84fc:	7b03      	ldrb	r3, [r0, #12]
 23f84fe:	b163      	cbz	r3, 23f851a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
 23f8500:	6903      	ldr	r3, [r0, #16]
 23f8502:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23f8506:	d008      	beq.n	23f851a <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
 23f8508:	ee07 3a90 	vmov	s15, r3
 23f850c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 23f8520 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
 23f8510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f8514:	ee87 0a87 	vdiv.f32	s0, s15, s14
 23f8518:	4770      	bx	lr
    return 0.0f;
 23f851a:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23f8524 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
 23f851e:	4770      	bx	lr
 23f8520:	42c80000 	.word	0x42c80000
 23f8524:	00000000 	.word	0x00000000

023f8528 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 23f8528:	7b03      	ldrb	r3, [r0, #12]
 23f852a:	b17b      	cbz	r3, 23f854c <_ZNK14CellularSignal10getQualityEv+0x24>
 23f852c:	69c3      	ldr	r3, [r0, #28]
 23f852e:	2b00      	cmp	r3, #0
 23f8530:	db0c      	blt.n	23f854c <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
 23f8532:	ee07 3a90 	vmov	s15, r3
 23f8536:	ed9f 7a07 	vldr	s14, [pc, #28]	; 23f8554 <_ZNK14CellularSignal10getQualityEv+0x2c>
 23f853a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f853e:	ee87 0a87 	vdiv.f32	s0, s15, s14
 23f8542:	eddf 7a05 	vldr	s15, [pc, #20]	; 23f8558 <_ZNK14CellularSignal10getQualityEv+0x30>
 23f8546:	ee20 0a27 	vmul.f32	s0, s0, s15
 23f854a:	4770      	bx	lr
    return -1.0f;
 23f854c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
 23f8550:	4770      	bx	lr
 23f8552:	bf00      	nop
 23f8554:	477fff00 	.word	0x477fff00
 23f8558:	42c80000 	.word	0x42c80000

023f855c <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 23f855c:	7b03      	ldrb	r3, [r0, #12]
 23f855e:	b163      	cbz	r3, 23f857a <_ZNK14CellularSignal15getQualityValueEv+0x1e>
 23f8560:	6983      	ldr	r3, [r0, #24]
 23f8562:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23f8566:	d008      	beq.n	23f857a <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
 23f8568:	ee07 3a90 	vmov	s15, r3
 23f856c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 23f8580 <_ZNK14CellularSignal15getQualityValueEv+0x24>
 23f8570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f8574:	ee87 0a87 	vdiv.f32	s0, s15, s14
 23f8578:	4770      	bx	lr
    return 0.0f;
 23f857a:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23f8584 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
 23f857e:	4770      	bx	lr
 23f8580:	42c80000 	.word	0x42c80000
 23f8584:	00000000 	.word	0x00000000

023f8588 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:

} // namespace particle

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
inline size_t Print::print(T n, int base)
 23f8588:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 23f858a:	1e0c      	subs	r4, r1, #0
inline size_t Print::print(T n, int base)
 23f858c:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
 23f858e:	da0a      	bge.n	23f85a6 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
 23f8590:	212d      	movs	r1, #45	; 0x2d
 23f8592:	f001 f8ae 	bl	23f96f2 <_ZN5Print5printEc>
 23f8596:	4605      	mov	r5, r0
            val = -n;
 23f8598:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23f859a:	220a      	movs	r2, #10
 23f859c:	4630      	mov	r0, r6
 23f859e:	f001 f8c5 	bl	23f972c <_ZN5Print11printNumberEmh>
    }
}
 23f85a2:	4428      	add	r0, r5
 23f85a4:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
 23f85a6:	4621      	mov	r1, r4
        size_t t = 0;
 23f85a8:	2500      	movs	r5, #0
 23f85aa:	e7f6      	b.n	23f859a <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

023f85ac <_ZN5Print10printFloatEdh>:
    size_t printFloat(double number, uint8_t digits) {
 23f85ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f85b0:	ec55 4b10 	vmov	r4, r5, d0
 23f85b4:	4607      	mov	r7, r0
 23f85b6:	460e      	mov	r6, r1
        if (std::isnan(number)) {
 23f85b8:	ee10 2a10 	vmov	r2, s0
 23f85bc:	462b      	mov	r3, r5
 23f85be:	ee10 0a10 	vmov	r0, s0
 23f85c2:	4629      	mov	r1, r5
 23f85c4:	f7ee fd8a 	bl	23e70dc <__aeabi_dcmpun>
 23f85c8:	b128      	cbz	r0, 23f85d6 <_ZN5Print10printFloatEdh+0x2a>
            return print("nan");
 23f85ca:	494c      	ldr	r1, [pc, #304]	; (23f86fc <_ZN5Print10printFloatEdh+0x150>)
            return print ("ovf"); // constant determined empirically
 23f85cc:	4638      	mov	r0, r7
    }
 23f85ce:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            return print ("ovf"); // constant determined empirically
 23f85d2:	f001 b88a 	b.w	23f96ea <_ZN5Print5printEPKc>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 23f85d6:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
        if (std::isinf(number)) {
 23f85da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f85de:	4620      	mov	r0, r4
 23f85e0:	4649      	mov	r1, r9
 23f85e2:	4b47      	ldr	r3, [pc, #284]	; (23f8700 <_ZN5Print10printFloatEdh+0x154>)
 23f85e4:	f7ee fd7a 	bl	23e70dc <__aeabi_dcmpun>
 23f85e8:	b948      	cbnz	r0, 23f85fe <_ZN5Print10printFloatEdh+0x52>
 23f85ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f85ee:	4620      	mov	r0, r4
 23f85f0:	4649      	mov	r1, r9
 23f85f2:	4b43      	ldr	r3, [pc, #268]	; (23f8700 <_ZN5Print10printFloatEdh+0x154>)
 23f85f4:	f7ee fd54 	bl	23e70a0 <__aeabi_dcmple>
 23f85f8:	b908      	cbnz	r0, 23f85fe <_ZN5Print10printFloatEdh+0x52>
            return print("inf");
 23f85fa:	4942      	ldr	r1, [pc, #264]	; (23f8704 <_ZN5Print10printFloatEdh+0x158>)
 23f85fc:	e7e6      	b.n	23f85cc <_ZN5Print10printFloatEdh+0x20>
        if (number > 4294967040.0) {
 23f85fe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23f8602:	4620      	mov	r0, r4
 23f8604:	4629      	mov	r1, r5
 23f8606:	4b40      	ldr	r3, [pc, #256]	; (23f8708 <_ZN5Print10printFloatEdh+0x15c>)
 23f8608:	f7ee fd5e 	bl	23e70c8 <__aeabi_dcmpgt>
 23f860c:	b108      	cbz	r0, 23f8612 <_ZN5Print10printFloatEdh+0x66>
            return print ("ovf"); // constant determined empirically
 23f860e:	493f      	ldr	r1, [pc, #252]	; (23f870c <_ZN5Print10printFloatEdh+0x160>)
 23f8610:	e7dc      	b.n	23f85cc <_ZN5Print10printFloatEdh+0x20>
        if (number <-4294967040.0) {
 23f8612:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23f8616:	4620      	mov	r0, r4
 23f8618:	4629      	mov	r1, r5
 23f861a:	4b3d      	ldr	r3, [pc, #244]	; (23f8710 <_ZN5Print10printFloatEdh+0x164>)
 23f861c:	f7ee fd36 	bl	23e708c <__aeabi_dcmplt>
 23f8620:	2800      	cmp	r0, #0
 23f8622:	d1f4      	bne.n	23f860e <_ZN5Print10printFloatEdh+0x62>
        if (number < 0.0) {
 23f8624:	2200      	movs	r2, #0
 23f8626:	2300      	movs	r3, #0
 23f8628:	4620      	mov	r0, r4
 23f862a:	4629      	mov	r1, r5
 23f862c:	f7ee fd2e 	bl	23e708c <__aeabi_dcmplt>
 23f8630:	b1d0      	cbz	r0, 23f8668 <_ZN5Print10printFloatEdh+0xbc>
            n += print('-');
 23f8632:	212d      	movs	r1, #45	; 0x2d
 23f8634:	4638      	mov	r0, r7
 23f8636:	f001 f85c 	bl	23f96f2 <_ZN5Print5printEc>
            number = -number;
 23f863a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
            n += print('-');
 23f863e:	4682      	mov	sl, r0
            number = -number;
 23f8640:	461d      	mov	r5, r3
        size_t n = 0;
 23f8642:	f04f 0b00 	mov.w	fp, #0
        double rounding = 0.5;
 23f8646:	2000      	movs	r0, #0
            rounding /= 10.0;
 23f8648:	f04f 0800 	mov.w	r8, #0
        double rounding = 0.5;
 23f864c:	4931      	ldr	r1, [pc, #196]	; (23f8714 <_ZN5Print10printFloatEdh+0x168>)
            rounding /= 10.0;
 23f864e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 23f871c <_ZN5Print10printFloatEdh+0x170>
        for (uint8_t i = 0; i < digits; ++i) {
 23f8652:	fa5f f38b 	uxtb.w	r3, fp
 23f8656:	429e      	cmp	r6, r3
 23f8658:	d908      	bls.n	23f866c <_ZN5Print10printFloatEdh+0xc0>
            rounding /= 10.0;
 23f865a:	4642      	mov	r2, r8
 23f865c:	464b      	mov	r3, r9
 23f865e:	f7ee fbcd 	bl	23e6dfc <__aeabi_ddiv>
        for (uint8_t i = 0; i < digits; ++i) {
 23f8662:	f10b 0b01 	add.w	fp, fp, #1
 23f8666:	e7f4      	b.n	23f8652 <_ZN5Print10printFloatEdh+0xa6>
        size_t n = 0;
 23f8668:	4682      	mov	sl, r0
 23f866a:	e7ea      	b.n	23f8642 <_ZN5Print10printFloatEdh+0x96>
        number += rounding;
 23f866c:	4602      	mov	r2, r0
 23f866e:	460b      	mov	r3, r1
 23f8670:	4620      	mov	r0, r4
 23f8672:	4629      	mov	r1, r5
 23f8674:	f7ee f8e2 	bl	23e683c <__adddf3>
 23f8678:	460d      	mov	r5, r1
 23f867a:	4604      	mov	r4, r0
        unsigned long int_part = (unsigned long)number;
 23f867c:	f7ee fd6c 	bl	23e7158 <__aeabi_d2uiz>
 23f8680:	4680      	mov	r8, r0
        double remainder = number - (double)int_part;
 23f8682:	f7ee fa17 	bl	23e6ab4 <__aeabi_ui2d>
 23f8686:	4602      	mov	r2, r0
 23f8688:	460b      	mov	r3, r1
 23f868a:	4620      	mov	r0, r4
 23f868c:	4629      	mov	r1, r5
 23f868e:	f7ee f8d3 	bl	23e6838 <__aeabi_dsub>
        return printNumber(val, base) + t;
 23f8692:	220a      	movs	r2, #10
        double remainder = number - (double)int_part;
 23f8694:	4604      	mov	r4, r0
 23f8696:	460d      	mov	r5, r1
        return printNumber(val, base) + t;
 23f8698:	4638      	mov	r0, r7
 23f869a:	4641      	mov	r1, r8
 23f869c:	f001 f846 	bl	23f972c <_ZN5Print11printNumberEmh>
        n += print(int_part);
 23f86a0:	4482      	add	sl, r0
        if (digits > 0) {
 23f86a2:	b33e      	cbz	r6, 23f86f4 <_ZN5Print10printFloatEdh+0x148>
            n += print(".");
 23f86a4:	4638      	mov	r0, r7
 23f86a6:	491c      	ldr	r1, [pc, #112]	; (23f8718 <_ZN5Print10printFloatEdh+0x16c>)
 23f86a8:	f001 f81f 	bl	23f96ea <_ZN5Print5printEPKc>
            remainder *= 10.0;
 23f86ac:	f04f 0800 	mov.w	r8, #0
 23f86b0:	f8df 9068 	ldr.w	r9, [pc, #104]	; 23f871c <_ZN5Print10printFloatEdh+0x170>
            n += print(".");
 23f86b4:	4482      	add	sl, r0
        while (digits-- > 0) {
 23f86b6:	b1ee      	cbz	r6, 23f86f4 <_ZN5Print10printFloatEdh+0x148>
            remainder *= 10.0;
 23f86b8:	4642      	mov	r2, r8
 23f86ba:	464b      	mov	r3, r9
 23f86bc:	4620      	mov	r0, r4
 23f86be:	4629      	mov	r1, r5
 23f86c0:	f7ee fa72 	bl	23e6ba8 <__aeabi_dmul>
 23f86c4:	460d      	mov	r5, r1
 23f86c6:	4604      	mov	r4, r0
            int toPrint = int(remainder);
 23f86c8:	f7ee fd1e 	bl	23e7108 <__aeabi_d2iz>
 23f86cc:	4601      	mov	r1, r0
 23f86ce:	4683      	mov	fp, r0
inline size_t Print::print(T n, int base)
 23f86d0:	4638      	mov	r0, r7
 23f86d2:	f7ff ff59 	bl	23f8588 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
            n += print(toPrint);
 23f86d6:	4482      	add	sl, r0
            remainder -= toPrint;
 23f86d8:	4658      	mov	r0, fp
 23f86da:	f7ee f9fb 	bl	23e6ad4 <__aeabi_i2d>
 23f86de:	4602      	mov	r2, r0
 23f86e0:	460b      	mov	r3, r1
 23f86e2:	4620      	mov	r0, r4
 23f86e4:	4629      	mov	r1, r5
 23f86e6:	f7ee f8a7 	bl	23e6838 <__aeabi_dsub>
 23f86ea:	3e01      	subs	r6, #1
 23f86ec:	4604      	mov	r4, r0
 23f86ee:	460d      	mov	r5, r1
 23f86f0:	b2f6      	uxtb	r6, r6
        while (digits-- > 0) {
 23f86f2:	e7e0      	b.n	23f86b6 <_ZN5Print10printFloatEdh+0x10a>
    }
 23f86f4:	4650      	mov	r0, sl
 23f86f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f86fa:	bf00      	nop
 23f86fc:	023ff9b4 	.word	0x023ff9b4
 23f8700:	7fefffff 	.word	0x7fefffff
 23f8704:	023ff9b8 	.word	0x023ff9b8
 23f8708:	41efffff 	.word	0x41efffff
 23f870c:	023ff9bc 	.word	0x023ff9bc
 23f8710:	c1efffff 	.word	0xc1efffff
 23f8714:	3fe00000 	.word	0x3fe00000
 23f8718:	023fe653 	.word	0x023fe653
 23f871c:	40240000 	.word	0x40240000

023f8720 <_ZNK14CellularSignal7printToER5Print>:
{
 23f8720:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
 23f8722:	6803      	ldr	r3, [r0, #0]
{
 23f8724:	460c      	mov	r4, r1
    n += p.print(this->getStrengthValue(), 2);
 23f8726:	691b      	ldr	r3, [r3, #16]
{
 23f8728:	4605      	mov	r5, r0
    n += p.print(this->getStrengthValue(), 2);
 23f872a:	4798      	blx	r3
 23f872c:	ee10 0a10 	vmov	r0, s0
        return printFloat((double)n, digits);
 23f8730:	f7ee f9e2 	bl	23e6af8 <__aeabi_f2d>
 23f8734:	ec41 0b10 	vmov	d0, r0, r1
 23f8738:	2102      	movs	r1, #2
 23f873a:	4620      	mov	r0, r4
 23f873c:	f7ff ff36 	bl	23f85ac <_ZN5Print10printFloatEdh>
    n += p.print(',');
 23f8740:	212c      	movs	r1, #44	; 0x2c
 23f8742:	4606      	mov	r6, r0
 23f8744:	4620      	mov	r0, r4
 23f8746:	f000 ffd4 	bl	23f96f2 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
 23f874a:	682b      	ldr	r3, [r5, #0]
    n += p.print(',');
 23f874c:	4406      	add	r6, r0
    n += p.print(this->getQualityValue(), 2);
 23f874e:	699b      	ldr	r3, [r3, #24]
 23f8750:	4628      	mov	r0, r5
 23f8752:	4798      	blx	r3
 23f8754:	ee10 0a10 	vmov	r0, s0
 23f8758:	f7ee f9ce 	bl	23e6af8 <__aeabi_f2d>
 23f875c:	ec41 0b10 	vmov	d0, r0, r1
 23f8760:	2102      	movs	r1, #2
 23f8762:	4620      	mov	r0, r4
 23f8764:	f7ff ff22 	bl	23f85ac <_ZN5Print10printFloatEdh>
}
 23f8768:	4430      	add	r0, r6
 23f876a:	bd70      	pop	{r4, r5, r6, pc}

023f876c <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 23f876c:	f1a0 0004 	sub.w	r0, r0, #4
 23f8770:	f7ff bfd6 	b.w	23f8720 <_ZNK14CellularSignal7printToER5Print>

023f8774 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
 23f8774:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 23f8776:	460d      	mov	r5, r1
 23f8778:	f100 0408 	add.w	r4, r0, #8
 23f877c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f877e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f8780:	e895 0003 	ldmia.w	r5, {r0, r1}
 23f8784:	e884 0003 	stmia.w	r4, {r0, r1}
}
 23f8788:	2001      	movs	r0, #1
 23f878a:	bd30      	pop	{r4, r5, pc}

023f878c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23f878c:	4770      	bx	lr

023f878e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 23f878e:	2000      	movs	r0, #0
 23f8790:	4770      	bx	lr

023f8792 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23f8792:	b510      	push	{r4, lr}
 23f8794:	4604      	mov	r4, r0
 23f8796:	2110      	movs	r1, #16
 23f8798:	f7ef f86f 	bl	23e787a <_ZdlPvj>
 23f879c:	4620      	mov	r0, r4
 23f879e:	bd10      	pop	{r4, pc}

023f87a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 23f87a0:	b508      	push	{r3, lr}
      { delete this; }
 23f87a2:	f7ff fff6 	bl	23f8792 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 23f87a6:	bd08      	pop	{r3, pc}

023f87a8 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 23f87a8:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 23f87aa:	b530      	push	{r4, r5, lr}
        type_(type) {
 23f87ac:	f64f 749c 	movw	r4, #65436	; 0xff9c
 23f87b0:	6002      	str	r2, [r0, #0]
 23f87b2:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 23f87b4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23f87b6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23f87b8:	680c      	ldr	r4, [r1, #0]
 23f87ba:	8085      	strh	r5, [r0, #4]
 23f87bc:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23f87be:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 23f87c0:	bd30      	pop	{r4, r5, pc}

023f87c2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 23f87c2:	b510      	push	{r4, lr}
 23f87c4:	4604      	mov	r4, r0
    free((void*)msg_);
 23f87c6:	6800      	ldr	r0, [r0, #0]
 23f87c8:	f7ff fd00 	bl	23f81cc <free>
}
 23f87cc:	4620      	mov	r0, r4
 23f87ce:	bd10      	pop	{r4, pc}

023f87d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23f87d0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 23f87d2:	68c4      	ldr	r4, [r0, #12]
 23f87d4:	b314      	cbz	r4, 23f881c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x4c>
 23f87d6:	7823      	ldrb	r3, [r4, #0]
 23f87d8:	b2db      	uxtb	r3, r3
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 23f87da:	2b02      	cmp	r3, #2
 23f87dc:	d103      	bne.n	23f87e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x16>
            error_.~Error();
 23f87de:	f104 000c 	add.w	r0, r4, #12
 23f87e2:	f7ff ffee 	bl	23f87c2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 23f87e6:	1d23      	adds	r3, r4, #4
 23f87e8:	681d      	ldr	r5, [r3, #0]
        delete onSuccess_.load(std::memory_order_relaxed);
 23f87ea:	b135      	cbz	r5, 23f87fa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x2a>
    class function<_Res(_ArgTypes...)>
 23f87ec:	4628      	mov	r0, r5
 23f87ee:	f7ff fdc2 	bl	23f8376 <_ZNSt14_Function_baseD1Ev>
 23f87f2:	2110      	movs	r1, #16
 23f87f4:	4628      	mov	r0, r5
 23f87f6:	f7ef f840 	bl	23e787a <_ZdlPvj>
 23f87fa:	f104 0308 	add.w	r3, r4, #8
 23f87fe:	681d      	ldr	r5, [r3, #0]
        delete onError_.load(std::memory_order_relaxed);
 23f8800:	b135      	cbz	r5, 23f8810 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x40>
 23f8802:	4628      	mov	r0, r5
 23f8804:	f7ff fdb7 	bl	23f8376 <_ZNSt14_Function_baseD1Ev>
 23f8808:	2110      	movs	r1, #16
 23f880a:	4628      	mov	r0, r5
 23f880c:	f7ef f835 	bl	23e787a <_ZdlPvj>
 23f8810:	4620      	mov	r0, r4
 23f8812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23f8816:	2114      	movs	r1, #20
 23f8818:	f7ef b82f 	b.w	23e787a <_ZdlPvj>
 23f881c:	bd38      	pop	{r3, r4, r5, pc}

023f881e <_ZNK22CloudDisconnectOptions15toSystemOptionsEv>:

} // namespace

spark_cloud_disconnect_options CloudDisconnectOptions::toSystemOptions() const
{
    spark_cloud_disconnect_options opts = {};
 23f881e:	2200      	movs	r2, #0
 23f8820:	8142      	strh	r2, [r0, #10]
    opts.size = sizeof(opts);
 23f8822:	220c      	movs	r2, #12
 23f8824:	8002      	strh	r2, [r0, #0]
    opts.flags = flags_;
 23f8826:	680a      	ldr	r2, [r1, #0]
 23f8828:	7082      	strb	r2, [r0, #2]
    opts.graceful = graceful_;
 23f882a:	7a0a      	ldrb	r2, [r1, #8]
 23f882c:	70c2      	strb	r2, [r0, #3]
    opts.timeout = timeout_;
 23f882e:	684a      	ldr	r2, [r1, #4]
 23f8830:	6042      	str	r2, [r0, #4]
    opts.clear_session = clearSession_;
 23f8832:	7a4a      	ldrb	r2, [r1, #9]
 23f8834:	7202      	strb	r2, [r0, #8]
    opts.reconnect_immediately = reconnect_;
 23f8836:	7a8a      	ldrb	r2, [r1, #10]
 23f8838:	7242      	strb	r2, [r0, #9]
    return opts;
}
 23f883a:	4770      	bx	lr

023f883c <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession, options->reconnect_immediately);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 23f883c:	b510      	push	{r4, lr}
 23f883e:	b088      	sub	sp, #32
 23f8840:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 23f8842:	4668      	mov	r0, sp
 23f8844:	f001 f956 	bl	23f9af4 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 23f8848:	4669      	mov	r1, sp
 23f884a:	a804      	add	r0, sp, #16
 23f884c:	f001 f975 	bl	23f9b3a <_ZN6StringC1ERKS_>
 23f8850:	a804      	add	r0, sp, #16
 23f8852:	47a0      	blx	r4
 23f8854:	4604      	mov	r4, r0
 23f8856:	a804      	add	r0, sp, #16
 23f8858:	f001 f901 	bl	23f9a5e <_ZN6StringD1Ev>
    String p(param);
 23f885c:	4668      	mov	r0, sp
 23f885e:	f001 f8fe 	bl	23f9a5e <_ZN6StringD1Ev>
}
 23f8862:	4620      	mov	r0, r4
 23f8864:	b008      	add	sp, #32
 23f8866:	bd10      	pop	{r4, pc}

023f8868 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 23f8868:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 23f886a:	2300      	movs	r3, #0
         size = sizeof(*this);
 23f886c:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 23f886e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 23f8872:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 23f8874:	4669      	mov	r1, sp
 23f8876:	461a      	mov	r2, r3
 23f8878:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 23f887a:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 23f887e:	f8ad 4000 	strh.w	r4, [sp]
 23f8882:	f7ff fb37 	bl	23f7ef4 <spark_function>
}
 23f8886:	b004      	add	sp, #16
 23f8888:	bd10      	pop	{r4, pc}

023f888a <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 23f888a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f888c:	4601      	mov	r1, r0
    const auto opts = options.toSystemOptions();
 23f888e:	a801      	add	r0, sp, #4
 23f8890:	f7ff ffc5 	bl	23f881e <_ZNK22CloudDisconnectOptions15toSystemOptionsEv>
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 23f8894:	2100      	movs	r1, #0
 23f8896:	f7ff fbb9 	bl	23f800c <spark_cloud_disconnect>
}
 23f889a:	b005      	add	sp, #20
 23f889c:	f85d fb04 	ldr.w	pc, [sp], #4

023f88a0 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>:

void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
 23f88a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const auto opts = options.toSystemOptions();
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
 23f88a2:	2300      	movs	r3, #0
void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
 23f88a4:	4601      	mov	r1, r0
    const auto opts = options.toSystemOptions();
 23f88a6:	a801      	add	r0, sp, #4
 23f88a8:	f7ff ffb9 	bl	23f881e <_ZNK22CloudDisconnectOptions15toSystemOptionsEv>
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
 23f88ac:	4602      	mov	r2, r0
 23f88ae:	4619      	mov	r1, r3
 23f88b0:	2002      	movs	r0, #2
 23f88b2:	f7ff fb8f 	bl	23f7fd4 <spark_set_connection_property>
}
 23f88b6:	b005      	add	sp, #20
 23f88b8:	f85d fb04 	ldr.w	pc, [sp], #4

023f88bc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
 23f88bc:	680b      	ldr	r3, [r1, #0]
 23f88be:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23f88c0:	684b      	ldr	r3, [r1, #4]
 23f88c2:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23f88c4:	b113      	cbz	r3, 23f88cc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 23f88c6:	685a      	ldr	r2, [r3, #4]
 23f88c8:	3201      	adds	r2, #1
 23f88ca:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23f88cc:	4770      	bx	lr

023f88ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 23f88ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f88d0:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23f88d2:	4668      	mov	r0, sp
 23f88d4:	460d      	mov	r5, r1
 23f88d6:	f7ff fff1 	bl	23f88bc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 23f88da:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23f88dc:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23f88de:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 23f88e0:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23f88e2:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 23f88e4:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 23f88e6:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 23f88e8:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 23f88ea:	f7ff fd1a 	bl	23f8322 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 23f88ee:	b135      	cbz	r5, 23f88fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 23f88f0:	1d28      	adds	r0, r5, #4
 23f88f2:	f7ff fd16 	bl	23f8322 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f88f6:	2108      	movs	r1, #8
 23f88f8:	4628      	mov	r0, r5
 23f88fa:	f7ee ffbe 	bl	23e787a <_ZdlPvj>
        return p;
    }
 23f88fe:	4620      	mov	r0, r4
 23f8900:	b003      	add	sp, #12
 23f8902:	bd30      	pop	{r4, r5, pc}

023f8904 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 23f8904:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23f8906:	b510      	push	{r4, lr}
      if (_M_empty())
 23f8908:	b90a      	cbnz	r2, 23f890e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 23f890a:	f001 fdb9 	bl	23fa480 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f890e:	68c3      	ldr	r3, [r0, #12]
    }
 23f8910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f8914:	4718      	bx	r3

023f8916 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f8916:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23f8918:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23f891a:	f100 0110 	add.w	r1, r0, #16
 23f891e:	f7ff fff1 	bl	23f8904 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 23f8922:	bd08      	pop	{r3, pc}

023f8924 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 23f8924:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23f8926:	b510      	push	{r4, lr}
      if (_M_empty())
 23f8928:	b90a      	cbnz	r2, 23f892e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 23f892a:	f001 fda9 	bl	23fa480 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f892e:	68c3      	ldr	r3, [r0, #12]
    }
 23f8930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f8934:	4718      	bx	r3

023f8936 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f8936:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23f8938:	6800      	ldr	r0, [r0, #0]
 23f893a:	f100 0110 	add.w	r1, r0, #16
 23f893e:	f7ff fff1 	bl	23f8924 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 23f8942:	bd08      	pop	{r3, pc}

023f8944 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 23f8944:	b538      	push	{r3, r4, r5, lr}
 23f8946:	2300      	movs	r3, #0
 23f8948:	4604      	mov	r4, r0
 23f894a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23f894c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 23f894e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23f8950:	f7ee ff8f 	bl	23e7872 <_Znwj>
 23f8954:	b128      	cbz	r0, 23f8962 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 23f8956:	2301      	movs	r3, #1
 23f8958:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 23f895c:	4b02      	ldr	r3, [pc, #8]	; (23f8968 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 23f895e:	60c5      	str	r5, [r0, #12]
 23f8960:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23f8962:	6020      	str	r0, [r4, #0]
	}
 23f8964:	4620      	mov	r0, r4
 23f8966:	bd38      	pop	{r3, r4, r5, pc}
 23f8968:	023ffa04 	.word	0x023ffa04

023f896c <_ZN8particle10FutureBaseIbNS_6detail13FutureContextEEC1ENS_5Error4TypeE>:
    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
    }

    explicit FutureBase(Error::Type error) :
 23f896c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        type_(type) {
 23f896e:	2600      	movs	r6, #0
 23f8970:	f8ad 1004 	strh.w	r1, [sp, #4]
 23f8974:	4605      	mov	r5, r0
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23f8976:	4669      	mov	r1, sp
 23f8978:	a802      	add	r0, sp, #8
 23f897a:	9600      	str	r6, [sp, #0]
 23f897c:	f7ff ff14 	bl	23f87a8 <_ZN8particle5ErrorC1EOS0_>
 23f8980:	2014      	movs	r0, #20
 23f8982:	f7ee ff76 	bl	23e7872 <_Znwj>
 23f8986:	4604      	mov	r4, r0
 23f8988:	b148      	cbz	r0, 23f899e <_ZN8particle10FutureBaseIbNS_6detail13FutureContextEEC1ENS_5Error4TypeE+0x32>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 23f898a:	2302      	movs	r3, #2
 23f898c:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23f898e:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23f8990:	e9c0 6601 	strd	r6, r6, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23f8994:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 23f8996:	a902      	add	r1, sp, #8
 23f8998:	300c      	adds	r0, #12
 23f899a:	f7ff ff05 	bl	23f87a8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23f899e:	4628      	mov	r0, r5
	: __shared_count(__p)
 23f89a0:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23f89a2:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 23f89a6:	f7ff ffcd 	bl	23f8944 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23f89aa:	a802      	add	r0, sp, #8
 23f89ac:	f7ff ff09 	bl	23f87c2 <_ZN8particle5ErrorD1Ev>
            FutureBase(Error(error)) {
 23f89b0:	4668      	mov	r0, sp
 23f89b2:	f7ff ff06 	bl	23f87c2 <_ZN8particle5ErrorD1Ev>
    }
 23f89b6:	4628      	mov	r0, r5
 23f89b8:	b004      	add	sp, #16
 23f89ba:	bd70      	pop	{r4, r5, r6, pc}

023f89bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 23f89bc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23f89be:	2300      	movs	r3, #0
 23f89c0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23f89c2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23f89c4:	4604      	mov	r4, r0
 23f89c6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23f89c8:	b12b      	cbz	r3, 23f89d6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f89ca:	2202      	movs	r2, #2
 23f89cc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f89ce:	68eb      	ldr	r3, [r5, #12]
 23f89d0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23f89d2:	68ab      	ldr	r3, [r5, #8]
 23f89d4:	60a3      	str	r3, [r4, #8]
    }
 23f89d6:	4620      	mov	r0, r4
 23f89d8:	bd38      	pop	{r3, r4, r5, pc}
	...

023f89dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 23f89dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f89de:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23f89e0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 23f89e2:	4668      	mov	r0, sp
 23f89e4:	f7ff fee0 	bl	23f87a8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23f89e8:	f04f 0302 	mov.w	r3, #2
 23f89ec:	e8d4 2f4f 	ldrexb	r2, [r4]
 23f89f0:	2a00      	cmp	r2, #0
 23f89f2:	d103      	bne.n	23f89fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 23f89f4:	e8c4 3f41 	strexb	r1, r3, [r4]
 23f89f8:	2900      	cmp	r1, #0
 23f89fa:	d1f7      	bne.n	23f89ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 23f89fc:	d121      	bne.n	23f8a42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
            new(&error_) Error(std::move(error));
 23f89fe:	f104 050c 	add.w	r5, r4, #12
 23f8a02:	4669      	mov	r1, sp
 23f8a04:	4628      	mov	r0, r5
 23f8a06:	f7ff fecf 	bl	23f87a8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 23f8a0a:	2201      	movs	r2, #1
 23f8a0c:	1c63      	adds	r3, r4, #1
 23f8a0e:	e8c3 2f8f 	stlb	r2, [r3]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23f8a12:	2000      	movs	r0, #0
 23f8a14:	f104 0308 	add.w	r3, r4, #8
 23f8a18:	e8d3 6fef 	ldaex	r6, [r3]
 23f8a1c:	e8c3 0fe2 	stlex	r2, r0, [r3]
 23f8a20:	2a00      	cmp	r2, #0
 23f8a22:	d1f9      	bne.n	23f8a18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
        if (callbackPtr) {
 23f8a24:	b16e      	cbz	r6, 23f8a42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
        return (application_thread_current(nullptr) != 0);
 23f8a26:	f7ff fa03 	bl	23f7e30 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23f8a2a:	b178      	cbz	r0, 23f8a4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x70>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23f8a2c:	4629      	mov	r1, r5
 23f8a2e:	4630      	mov	r0, r6
 23f8a30:	f7ff ff68 	bl	23f8904 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 23f8a34:	4630      	mov	r0, r6
 23f8a36:	f7ff fc9e 	bl	23f8376 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23f8a3a:	2110      	movs	r1, #16
 23f8a3c:	4630      	mov	r0, r6
 23f8a3e:	f7ee ff1c 	bl	23e787a <_ZdlPvj>
        p_->setError(std::move(error));
 23f8a42:	4668      	mov	r0, sp
 23f8a44:	f7ff febd 	bl	23f87c2 <_ZN8particle5ErrorD1Ev>
    }
 23f8a48:	b009      	add	sp, #36	; 0x24
 23f8a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23f8a4c:	4631      	mov	r1, r6
 23f8a4e:	a802      	add	r0, sp, #8
 23f8a50:	f7ff ffb4 	bl	23f89bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23f8a54:	68e0      	ldr	r0, [r4, #12]
 23f8a56:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23f8a5a:	b108      	cbz	r0, 23f8a60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x84>
 23f8a5c:	f004 fa70 	bl	23fcf40 <strdup>
        type_(type) {
 23f8a60:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23f8a62:	2010      	movs	r0, #16
 23f8a64:	f8ad 501c 	strh.w	r5, [sp, #28]
 23f8a68:	f7ee ff03 	bl	23e7872 <_Znwj>
 23f8a6c:	4605      	mov	r5, r0
 23f8a6e:	b1e8      	cbz	r0, 23f8aac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd0>
    _Function_base() : _M_manager(nullptr) { }
 23f8a70:	2700      	movs	r7, #0
 23f8a72:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f8a74:	2018      	movs	r0, #24
 23f8a76:	f7ee fefc 	bl	23e7872 <_Znwj>
 23f8a7a:	4604      	mov	r4, r0
 23f8a7c:	b188      	cbz	r0, 23f8aa2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc6>
	std::swap(_M_functor, __x._M_functor);
 23f8a7e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23f8a80:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23f8a82:	a802      	add	r0, sp, #8
 23f8a84:	f7ff fc80 	bl	23f8388 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f8a88:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 23f8a8a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f8a8c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f8a8e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23f8a90:	9204      	str	r2, [sp, #16]
 23f8a92:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23f8a94:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 23f8a96:	60e3      	str	r3, [r4, #12]
 23f8a98:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 23f8a9c:	9205      	str	r2, [sp, #20]
 23f8a9e:	f7ff fe83 	bl	23f87a8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 23f8aa2:	4b08      	ldr	r3, [pc, #32]	; (23f8ac4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f8aa4:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23f8aa6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23f8aa8:	4b07      	ldr	r3, [pc, #28]	; (23f8ac8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>)
 23f8aaa:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 23f8aac:	a806      	add	r0, sp, #24
 23f8aae:	f7ff fe88 	bl	23f87c2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23f8ab2:	a802      	add	r0, sp, #8
 23f8ab4:	f7ff fc5f 	bl	23f8376 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23f8ab8:	2200      	movs	r2, #0
 23f8aba:	4629      	mov	r1, r5
 23f8abc:	4803      	ldr	r0, [pc, #12]	; (23f8acc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
 23f8abe:	f7ff f9c5 	bl	23f7e4c <application_thread_invoke>
 23f8ac2:	e7b7      	b.n	23f8a34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 23f8ac4:	023f8917 	.word	0x023f8917
 23f8ac8:	023f8ba9 	.word	0x023f8ba9
 23f8acc:	023f834f 	.word	0x023f834f

023f8ad0 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE>:
        PublishFlags flags) {
 23f8ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f8ad4:	b08d      	sub	sp, #52	; 0x34
 23f8ad6:	4604      	mov	r4, r0
 23f8ad8:	460e      	mov	r6, r1
 23f8ada:	4617      	mov	r7, r2
 23f8adc:	4699      	mov	r9, r3
 23f8ade:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23f8ae2:	f7ff fa31 	bl	23f7f48 <spark_cloud_flag_connected>
    if (!connected()) {
 23f8ae6:	b940      	cbnz	r0, 23f8afa <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0x2a>
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 23f8ae8:	f06f 01d1 	mvn.w	r1, #209	; 0xd1
 23f8aec:	4620      	mov	r0, r4
 23f8aee:	f7ff ff3d 	bl	23f896c <_ZN8particle10FutureBaseIbNS_6detail13FutureContextEEC1ENS_5Error4TypeE>
}
 23f8af2:	4620      	mov	r0, r4
 23f8af4:	b00d      	add	sp, #52	; 0x34
 23f8af6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d.size = sizeof(spark_send_event_data);
 23f8afa:	2014      	movs	r0, #20
    spark_send_event_data d = {};
 23f8afc:	2500      	movs	r5, #0
    d.content_type = static_cast<int>(type);
 23f8afe:	9b14      	ldr	r3, [sp, #80]	; 0x50
    spark_send_event_data d = {};
 23f8b00:	e9cd 5508 	strd	r5, r5, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 23f8b04:	9007      	str	r0, [sp, #28]
    d.data_size = size;
 23f8b06:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    d.content_type = static_cast<int>(type);
 23f8b0a:	930b      	str	r3, [sp, #44]	; 0x2c
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 23f8b0c:	f7ee feb1 	bl	23e7872 <_Znwj>
 23f8b10:	4601      	mov	r1, r0
 23f8b12:	b118      	cbz	r0, 23f8b1c <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23f8b14:	e9c0 5501 	strd	r5, r5, [r0, #4]
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 23f8b18:	7005      	strb	r5, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23f8b1a:	7045      	strb	r5, [r0, #1]
	: __shared_count(__p)
 23f8b1c:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23f8b1e:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 23f8b20:	f7ff ff10 	bl	23f8944 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 23f8b24:	4b1f      	ldr	r3, [pc, #124]	; (23f8ba4 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0xd4>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 23f8b26:	2008      	movs	r0, #8
 23f8b28:	9308      	str	r3, [sp, #32]
 23f8b2a:	f7ee fea2 	bl	23e7872 <_Znwj>
 23f8b2e:	4605      	mov	r5, r0
 23f8b30:	b110      	cbz	r0, 23f8b38 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0x68>
 23f8b32:	a903      	add	r1, sp, #12
 23f8b34:	f7ff fec2 	bl	23f88bc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(name, data, ttl, flags.value(), &d) && !p.isDone()) {
 23f8b38:	ab07      	add	r3, sp, #28
 23f8b3a:	9300      	str	r3, [sp, #0]
 23f8b3c:	4639      	mov	r1, r7
 23f8b3e:	4630      	mov	r0, r6
 23f8b40:	9a15      	ldr	r2, [sp, #84]	; 0x54
 23f8b42:	fa5f f388 	uxtb.w	r3, r8
    d.handler_data = p.dataPtr();
 23f8b46:	9509      	str	r5, [sp, #36]	; 0x24
    if (!spark_send_event(name, data, ttl, flags.value(), &d) && !p.isDone()) {
 23f8b48:	f7ff fa1a 	bl	23f7f80 <spark_send_event>
 23f8b4c:	b9b8      	cbnz	r0, 23f8b7e <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0xae>
	return __atomic_load_n(&_M_i, int(__m));
 23f8b4e:	9b03      	ldr	r3, [sp, #12]
 23f8b50:	3301      	adds	r3, #1
 23f8b52:	781b      	ldrb	r3, [r3, #0]
 23f8b54:	b2db      	uxtb	r3, r3
 23f8b56:	b993      	cbnz	r3, 23f8b7e <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0xae>
        type_(type) {
 23f8b58:	9305      	str	r3, [sp, #20]
 23f8b5a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 23f8b5e:	a905      	add	r1, sp, #20
 23f8b60:	a803      	add	r0, sp, #12
 23f8b62:	f8ad 3018 	strh.w	r3, [sp, #24]
 23f8b66:	f7ff ff39 	bl	23f89dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23f8b6a:	a805      	add	r0, sp, #20
 23f8b6c:	f7ff fe29 	bl	23f87c2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 23f8b70:	a805      	add	r0, sp, #20
 23f8b72:	9909      	ldr	r1, [sp, #36]	; 0x24
 23f8b74:	f7ff feab 	bl	23f88ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 23f8b78:	a806      	add	r0, sp, #24
 23f8b7a:	f7ff fbd2 	bl	23f8322 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f8b7e:	a903      	add	r1, sp, #12
 23f8b80:	a805      	add	r0, sp, #20
 23f8b82:	f7ff fe9b 	bl	23f88bc <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 23f8b86:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23f8b88:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23f8b8a:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 23f8b8c:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23f8b8e:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 23f8b90:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 23f8b92:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 23f8b94:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 23f8b96:	f7ff fbc4 	bl	23f8322 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f8b9a:	a804      	add	r0, sp, #16
 23f8b9c:	f7ff fbc1 	bl	23f8322 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 23f8ba0:	e7a7      	b.n	23f8af2 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0x22>
 23f8ba2:	bf00      	nop
 23f8ba4:	023f8c6d 	.word	0x023f8c6d

023f8ba8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 23f8ba8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23f8baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f8bac:	4605      	mov	r5, r0
	switch (__op)
 23f8bae:	d103      	bne.n	23f8bb8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23f8bb0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f8bb2:	6003      	str	r3, [r0, #0]
      }
 23f8bb4:	2000      	movs	r0, #0
 23f8bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 23f8bb8:	2a02      	cmp	r2, #2
 23f8bba:	d010      	beq.n	23f8bde <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 23f8bbc:	2a03      	cmp	r2, #3
 23f8bbe:	d1f9      	bne.n	23f8bb4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23f8bc0:	6804      	ldr	r4, [r0, #0]
 23f8bc2:	2c00      	cmp	r4, #0
 23f8bc4:	d0f6      	beq.n	23f8bb4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 23f8bc6:	f104 0010 	add.w	r0, r4, #16
 23f8bca:	f7ff fdfa 	bl	23f87c2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23f8bce:	4620      	mov	r0, r4
 23f8bd0:	f7ff fbd1 	bl	23f8376 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23f8bd4:	2118      	movs	r1, #24
 23f8bd6:	4620      	mov	r0, r4
 23f8bd8:	f7ee fe4f 	bl	23e787a <_ZdlPvj>
 23f8bdc:	e7ea      	b.n	23f8bb4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23f8bde:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 23f8be0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23f8be2:	f7ee fe46 	bl	23e7872 <_Znwj>
 23f8be6:	4604      	mov	r4, r0
 23f8be8:	b150      	cbz	r0, 23f8c00 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 23f8bea:	4631      	mov	r1, r6
 23f8bec:	f7ff fee6 	bl	23f89bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23f8bf0:	6930      	ldr	r0, [r6, #16]
 23f8bf2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23f8bf6:	b108      	cbz	r0, 23f8bfc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 23f8bf8:	f004 f9a2 	bl	23fcf40 <strdup>
        type_(type) {
 23f8bfc:	6120      	str	r0, [r4, #16]
 23f8bfe:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 23f8c00:	602c      	str	r4, [r5, #0]
	}
 23f8c02:	e7d7      	b.n	23f8bb4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

023f8c04 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 23f8c04:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23f8c06:	2300      	movs	r3, #0
 23f8c08:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23f8c0a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23f8c0c:	4604      	mov	r4, r0
 23f8c0e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23f8c10:	b12b      	cbz	r3, 23f8c1e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f8c12:	2202      	movs	r2, #2
 23f8c14:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f8c16:	68eb      	ldr	r3, [r5, #12]
 23f8c18:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23f8c1a:	68ab      	ldr	r3, [r5, #8]
 23f8c1c:	60a3      	str	r3, [r4, #8]
    }
 23f8c1e:	4620      	mov	r0, r4
 23f8c20:	bd38      	pop	{r3, r4, r5, pc}

023f8c22 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 23f8c22:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23f8c24:	b570      	push	{r4, r5, r6, lr}
 23f8c26:	4604      	mov	r4, r0
	switch (__op)
 23f8c28:	d103      	bne.n	23f8c32 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23f8c2a:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f8c2c:	6003      	str	r3, [r0, #0]
      }
 23f8c2e:	2000      	movs	r0, #0
 23f8c30:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 23f8c32:	2a02      	cmp	r2, #2
 23f8c34:	d00c      	beq.n	23f8c50 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 23f8c36:	2a03      	cmp	r2, #3
 23f8c38:	d1f9      	bne.n	23f8c2e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23f8c3a:	6804      	ldr	r4, [r0, #0]
 23f8c3c:	2c00      	cmp	r4, #0
 23f8c3e:	d0f6      	beq.n	23f8c2e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23f8c40:	4620      	mov	r0, r4
 23f8c42:	f7ff fb98 	bl	23f8376 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23f8c46:	2114      	movs	r1, #20
 23f8c48:	4620      	mov	r0, r4
 23f8c4a:	f7ee fe16 	bl	23e787a <_ZdlPvj>
 23f8c4e:	e7ee      	b.n	23f8c2e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23f8c50:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 23f8c52:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23f8c54:	f7ee fe0d 	bl	23e7872 <_Znwj>
 23f8c58:	4605      	mov	r5, r0
 23f8c5a:	b120      	cbz	r0, 23f8c66 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
 23f8c5c:	4631      	mov	r1, r6
 23f8c5e:	f7ff ffd1 	bl	23f8c04 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 23f8c62:	7c33      	ldrb	r3, [r6, #16]
 23f8c64:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 23f8c66:	6025      	str	r5, [r4, #0]
	}
 23f8c68:	e7e1      	b.n	23f8c2e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	...

023f8c6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 23f8c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f8c6e:	4604      	mov	r4, r0
 23f8c70:	b089      	sub	sp, #36	; 0x24
 23f8c72:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 23f8c74:	a801      	add	r0, sp, #4
 23f8c76:	4611      	mov	r1, r2
 23f8c78:	f7ff fe29 	bl	23f88ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 23f8c7c:	b1a4      	cbz	r4, 23f8ca8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 23f8c7e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23f8c80:	b11d      	cbz	r5, 23f8c8a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 23f8c82:	4628      	mov	r0, r5
 23f8c84:	f004 f95c 	bl	23fcf40 <strdup>
 23f8c88:	4605      	mov	r5, r0
 23f8c8a:	a801      	add	r0, sp, #4
 23f8c8c:	a903      	add	r1, sp, #12
        type_(type) {
 23f8c8e:	9503      	str	r5, [sp, #12]
 23f8c90:	f8ad 4010 	strh.w	r4, [sp, #16]
 23f8c94:	f7ff fea2 	bl	23f89dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23f8c98:	a803      	add	r0, sp, #12
 23f8c9a:	f7ff fd92 	bl	23f87c2 <_ZN8particle5ErrorD1Ev>
 23f8c9e:	a802      	add	r0, sp, #8
 23f8ca0:	f7ff fb3f 	bl	23f8322 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f8ca4:	b009      	add	sp, #36	; 0x24
 23f8ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23f8ca8:	2301      	movs	r3, #1
      { return _M_ptr; }
 23f8caa:	9d01      	ldr	r5, [sp, #4]
 23f8cac:	e8d5 2f4f 	ldrexb	r2, [r5]
 23f8cb0:	2a00      	cmp	r2, #0
 23f8cb2:	d103      	bne.n	23f8cbc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 23f8cb4:	e8c5 3f41 	strexb	r1, r3, [r5]
 23f8cb8:	2900      	cmp	r1, #0
 23f8cba:	d1f7      	bne.n	23f8cac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 23f8cbc:	d1ef      	bne.n	23f8c9e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 23f8cbe:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 23f8cc0:	2201      	movs	r2, #1
 23f8cc2:	18eb      	adds	r3, r5, r3
 23f8cc4:	e8c3 2f8f 	stlb	r2, [r3]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23f8cc8:	1d2b      	adds	r3, r5, #4
 23f8cca:	e8d3 6fef 	ldaex	r6, [r3]
 23f8cce:	e8c3 4fe2 	stlex	r2, r4, [r3]
 23f8cd2:	2a00      	cmp	r2, #0
 23f8cd4:	d1f9      	bne.n	23f8cca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x5e>
        if (callbackPtr) {
 23f8cd6:	2e00      	cmp	r6, #0
 23f8cd8:	d0e1      	beq.n	23f8c9e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 23f8cda:	4620      	mov	r0, r4
 23f8cdc:	f7ff f8a8 	bl	23f7e30 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23f8ce0:	4607      	mov	r7, r0
 23f8ce2:	b160      	cbz	r0, 23f8cfe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x92>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23f8ce4:	4630      	mov	r0, r6
 23f8ce6:	f105 010c 	add.w	r1, r5, #12
 23f8cea:	f7ff fe1b 	bl	23f8924 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 23f8cee:	4630      	mov	r0, r6
 23f8cf0:	f7ff fb41 	bl	23f8376 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23f8cf4:	2110      	movs	r1, #16
 23f8cf6:	4630      	mov	r0, r6
 23f8cf8:	f7ee fdbf 	bl	23e787a <_ZdlPvj>
 23f8cfc:	e7cf      	b.n	23f8c9e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23f8cfe:	4631      	mov	r1, r6
 23f8d00:	a803      	add	r0, sp, #12
 23f8d02:	f7ff ff7f 	bl	23f8c04 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23f8d06:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23f8d08:	2010      	movs	r0, #16
 23f8d0a:	f88d 301c 	strb.w	r3, [sp, #28]
 23f8d0e:	f7ee fdb0 	bl	23e7872 <_Znwj>
 23f8d12:	4605      	mov	r5, r0
 23f8d14:	b1d0      	cbz	r0, 23f8d4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe0>
    _Function_base() : _M_manager(nullptr) { }
 23f8d16:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f8d18:	2014      	movs	r0, #20
 23f8d1a:	f7ee fdaa 	bl	23e7872 <_Znwj>
 23f8d1e:	4604      	mov	r4, r0
 23f8d20:	b178      	cbz	r0, 23f8d42 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xd6>
	std::swap(_M_functor, __x._M_functor);
 23f8d22:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23f8d24:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23f8d26:	a803      	add	r0, sp, #12
 23f8d28:	f7ff fb2e 	bl	23f8388 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f8d2c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23f8d2e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f8d30:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f8d32:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 23f8d34:	9205      	str	r2, [sp, #20]
 23f8d36:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f8d38:	60e3      	str	r3, [r4, #12]
 23f8d3a:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 23f8d3e:	9206      	str	r2, [sp, #24]
 23f8d40:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 23f8d42:	4b07      	ldr	r3, [pc, #28]	; (23f8d60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f8d44:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23f8d46:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23f8d48:	4b06      	ldr	r3, [pc, #24]	; (23f8d64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
 23f8d4a:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 23f8d4c:	a803      	add	r0, sp, #12
 23f8d4e:	f7ff fb12 	bl	23f8376 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23f8d52:	2200      	movs	r2, #0
 23f8d54:	4629      	mov	r1, r5
 23f8d56:	4804      	ldr	r0, [pc, #16]	; (23f8d68 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 23f8d58:	f7ff f878 	bl	23f7e4c <application_thread_invoke>
 23f8d5c:	e7c7      	b.n	23f8cee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x82>
 23f8d5e:	bf00      	nop
 23f8d60:	023f8937 	.word	0x023f8937
 23f8d64:	023f8c23 	.word	0x023f8c23
 23f8d68:	023f834f 	.word	0x023f834f

023f8d6c <_GLOBAL__sub_I__ZN8particle10CloudEvent15s_subscriptionsE>:
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 23f8d6c:	2200      	movs	r2, #0
 23f8d6e:	4b02      	ldr	r3, [pc, #8]	; (23f8d78 <_GLOBAL__sub_I__ZN8particle10CloudEvent15s_subscriptionsE+0xc>)
 23f8d70:	e9c3 2200 	strd	r2, r2, [r3]
 23f8d74:	609a      	str	r2, [r3, #8]
        // Keep the reference around until the application callback is called
        d.unwrap();
    }
}

} // namespace particle
 23f8d76:	4770      	bx	lr
 23f8d78:	1007aee8 	.word	0x1007aee8

023f8d7c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23f8d7c:	2200      	movs	r2, #0
 23f8d7e:	6840      	ldr	r0, [r0, #4]
 23f8d80:	4611      	mov	r1, r2
 23f8d82:	f7ff b9b3 	b.w	23f80ec <network_listening>

023f8d86 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23f8d86:	2200      	movs	r2, #0
 23f8d88:	6840      	ldr	r0, [r0, #4]
 23f8d8a:	4611      	mov	r1, r2
 23f8d8c:	f7ff b9ca 	b.w	23f8124 <network_get_listen_timeout>

023f8d90 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23f8d90:	2200      	movs	r2, #0
 23f8d92:	6840      	ldr	r0, [r0, #4]
 23f8d94:	f7ff b9b8 	b.w	23f8108 <network_set_listen_timeout>

023f8d98 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23f8d98:	2200      	movs	r2, #0
 23f8d9a:	6840      	ldr	r0, [r0, #4]
 23f8d9c:	f081 0101 	eor.w	r1, r1, #1
 23f8da0:	f7ff b996 	b.w	23f80d0 <network_listen>

023f8da4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23f8da4:	2300      	movs	r3, #0
 23f8da6:	6840      	ldr	r0, [r0, #4]
 23f8da8:	461a      	mov	r2, r3
 23f8daa:	4619      	mov	r1, r3
 23f8dac:	f7ff b982 	b.w	23f80b4 <network_off>

023f8db0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23f8db0:	2300      	movs	r3, #0
 23f8db2:	6840      	ldr	r0, [r0, #4]
 23f8db4:	461a      	mov	r2, r3
 23f8db6:	4619      	mov	r1, r3
 23f8db8:	f7ff b96e 	b.w	23f8098 <network_on>

023f8dbc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23f8dbc:	2200      	movs	r2, #0
 23f8dbe:	6840      	ldr	r0, [r0, #4]
 23f8dc0:	4611      	mov	r1, r2
 23f8dc2:	f7ff b95b 	b.w	23f807c <network_ready>

023f8dc6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23f8dc6:	2200      	movs	r2, #0
 23f8dc8:	6840      	ldr	r0, [r0, #4]
 23f8dca:	4611      	mov	r1, r2
 23f8dcc:	f7ff b93a 	b.w	23f8044 <network_connecting>

023f8dd0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23f8dd0:	2200      	movs	r2, #0
 23f8dd2:	2102      	movs	r1, #2
 23f8dd4:	6840      	ldr	r0, [r0, #4]
 23f8dd6:	f7ff b943 	b.w	23f8060 <network_disconnect>

023f8dda <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23f8dda:	2300      	movs	r3, #0
 23f8ddc:	6840      	ldr	r0, [r0, #4]
 23f8dde:	461a      	mov	r2, r3
 23f8de0:	f7ff b922 	b.w	23f8028 <network_connect>

023f8de4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
 23f8de4:	2203      	movs	r2, #3
 23f8de6:	4b02      	ldr	r3, [pc, #8]	; (23f8df0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23f8de8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23f8dea:	4a02      	ldr	r2, [pc, #8]	; (23f8df4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23f8dec:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23f8dee:	4770      	bx	lr
 23f8df0:	1007aef4 	.word	0x1007aef4
 23f8df4:	023ffa20 	.word	0x023ffa20

023f8df8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23f8df8:	4770      	bx	lr

023f8dfa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23f8dfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f8dfc:	4606      	mov	r6, r0
 23f8dfe:	4615      	mov	r5, r2
 23f8e00:	460c      	mov	r4, r1
 23f8e02:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23f8e04:	42bc      	cmp	r4, r7
 23f8e06:	d006      	beq.n	23f8e16 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23f8e08:	6833      	ldr	r3, [r6, #0]
 23f8e0a:	4630      	mov	r0, r6
 23f8e0c:	689b      	ldr	r3, [r3, #8]
 23f8e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 23f8e12:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23f8e14:	e7f6      	b.n	23f8e04 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23f8e16:	4628      	mov	r0, r5
 23f8e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f8e1a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23f8e1a:	2200      	movs	r2, #0
 23f8e1c:	7c00      	ldrb	r0, [r0, #16]
 23f8e1e:	f7fe bd59 	b.w	23f78d4 <hal_i2c_write>

023f8e22 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23f8e22:	2100      	movs	r1, #0
 23f8e24:	7c00      	ldrb	r0, [r0, #16]
 23f8e26:	f7fe bd63 	b.w	23f78f0 <hal_i2c_available>

023f8e2a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23f8e2a:	2100      	movs	r1, #0
 23f8e2c:	7c00      	ldrb	r0, [r0, #16]
 23f8e2e:	f7fe bd6d 	b.w	23f790c <hal_i2c_read>

023f8e32 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23f8e32:	2100      	movs	r1, #0
 23f8e34:	7c00      	ldrb	r0, [r0, #16]
 23f8e36:	f7fe bd77 	b.w	23f7928 <hal_i2c_peek>

023f8e3a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23f8e3a:	2100      	movs	r1, #0
 23f8e3c:	7c00      	ldrb	r0, [r0, #16]
 23f8e3e:	f7fe bd81 	b.w	23f7944 <hal_i2c_flush>

023f8e42 <_ZN7TwoWireD0Ev>:
 23f8e42:	b510      	push	{r4, lr}
 23f8e44:	4604      	mov	r4, r0
 23f8e46:	2114      	movs	r1, #20
 23f8e48:	f7ee fd17 	bl	23e787a <_ZdlPvj>
 23f8e4c:	4620      	mov	r0, r4
 23f8e4e:	bd10      	pop	{r4, pc}

023f8e50 <_ZNK16WireTransmission9halConfigEv>:
    hal_i2c_transmission_config_t conf = {
 23f8e50:	2200      	movs	r2, #0
 23f8e52:	e9c0 2200 	strd	r2, r2, [r0]
 23f8e56:	2218      	movs	r2, #24
 23f8e58:	8002      	strh	r2, [r0, #0]
    };
 23f8e5a:	780a      	ldrb	r2, [r1, #0]
 23f8e5c:	7102      	strb	r2, [r0, #4]
 23f8e5e:	684a      	ldr	r2, [r1, #4]
 23f8e60:	6082      	str	r2, [r0, #8]
 23f8e62:	68ca      	ldr	r2, [r1, #12]
 23f8e64:	60c2      	str	r2, [r0, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0),
 23f8e66:	7a0a      	ldrb	r2, [r1, #8]
 23f8e68:	6102      	str	r2, [r0, #16]
    };
 23f8e6a:	690a      	ldr	r2, [r1, #16]
 23f8e6c:	6142      	str	r2, [r0, #20]
  }
 23f8e6e:	4770      	bx	lr

023f8e70 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23f8e70:	b538      	push	{r3, r4, r5, lr}
 23f8e72:	4604      	mov	r4, r0
 23f8e74:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23f8e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f8e7a:	2200      	movs	r2, #0
 23f8e7c:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23f8e80:	4b09      	ldr	r3, [pc, #36]	; (23f8ea8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23f8e82:	4608      	mov	r0, r1
  _i2c = i2c;
 23f8e84:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23f8e86:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23f8e88:	4629      	mov	r1, r5
 23f8e8a:	f7fe fd77 	bl	23f797c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23f8e8e:	30bf      	adds	r0, #191	; 0xbf
 23f8e90:	d108      	bne.n	23f8ea4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23f8e92:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23f8e94:	07db      	lsls	r3, r3, #31
 23f8e96:	d505      	bpl.n	23f8ea4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23f8e98:	6868      	ldr	r0, [r5, #4]
 23f8e9a:	f7ff f997 	bl	23f81cc <free>
    free(conf.tx_buffer);
 23f8e9e:	68e8      	ldr	r0, [r5, #12]
 23f8ea0:	f7ff f994 	bl	23f81cc <free>
}
 23f8ea4:	4620      	mov	r0, r4
 23f8ea6:	bd38      	pop	{r3, r4, r5, pc}
 23f8ea8:	023ffa64 	.word	0x023ffa64

023f8eac <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 23f8eac:	2200      	movs	r2, #0
 23f8eae:	7c00      	ldrb	r0, [r0, #16]
 23f8eb0:	f7fe bcd8 	b.w	23f7864 <hal_i2c_set_speed>

023f8eb4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23f8eb4:	2300      	movs	r3, #0
 23f8eb6:	7c00      	ldrb	r0, [r0, #16]
 23f8eb8:	461a      	mov	r2, r3
 23f8eba:	4619      	mov	r1, r3
 23f8ebc:	f7fe bce0 	b.w	23f7880 <hal_i2c_begin>

023f8ec0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 23f8ec0:	b510      	push	{r4, lr}
 23f8ec2:	4604      	mov	r4, r0
 23f8ec4:	b086      	sub	sp, #24
  auto conf = transfer.halConfig();
 23f8ec6:	4668      	mov	r0, sp
 23f8ec8:	f7ff ffc2 	bl	23f8e50 <_ZNK16WireTransmission9halConfigEv>
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 23f8ecc:	2200      	movs	r2, #0
 23f8ece:	4669      	mov	r1, sp
 23f8ed0:	7c20      	ldrb	r0, [r4, #16]
 23f8ed2:	f7fe fd7d 	bl	23f79d0 <hal_i2c_request_ex>
}
 23f8ed6:	b006      	add	sp, #24
 23f8ed8:	bd10      	pop	{r4, pc}

023f8eda <_ZN7TwoWire11requestFromEhjh>:
{
 23f8eda:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        buffer_(nullptr) {
 23f8edc:	f88d 1004 	strb.w	r1, [sp, #4]
 23f8ee0:	2100      	movs	r1, #0
 23f8ee2:	f04f 0c64 	mov.w	ip, #100	; 0x64
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 23f8ee6:	1a5b      	subs	r3, r3, r1
 23f8ee8:	bf18      	it	ne
 23f8eea:	2301      	movne	r3, #1
 23f8eec:	e9cd c104 	strd	ip, r1, [sp, #16]
 23f8ef0:	a901      	add	r1, sp, #4
    size_ = size;
 23f8ef2:	9202      	str	r2, [sp, #8]
 23f8ef4:	f88d 300c 	strb.w	r3, [sp, #12]
 23f8ef8:	f7ff ffe2 	bl	23f8ec0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 23f8efc:	b007      	add	sp, #28
 23f8efe:	f85d fb04 	ldr.w	pc, [sp], #4

023f8f02 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 23f8f02:	2301      	movs	r3, #1
 23f8f04:	f7ff bfe9 	b.w	23f8eda <_ZN7TwoWire11requestFromEhjh>

023f8f08 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23f8f08:	2200      	movs	r2, #0
 23f8f0a:	7c00      	ldrb	r0, [r0, #16]
 23f8f0c:	f7fe bcc6 	b.w	23f789c <hal_i2c_begin_transmission>

023f8f10 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 23f8f10:	b2c9      	uxtb	r1, r1
 23f8f12:	f7ff bff9 	b.w	23f8f08 <_ZN7TwoWire17beginTransmissionEh>

023f8f16 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23f8f16:	2200      	movs	r2, #0
 23f8f18:	7c00      	ldrb	r0, [r0, #16]
 23f8f1a:	f7fe bccd 	b.w	23f78b8 <hal_i2c_end_transmission>

023f8f1e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 23f8f1e:	2101      	movs	r1, #1
 23f8f20:	f7ff bff9 	b.w	23f8f16 <_ZN7TwoWire15endTransmissionEh>

023f8f24 <_ZN7TwoWire4lockEv>:
{
  return hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 23f8f24:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
 23f8f26:	2100      	movs	r1, #0
 23f8f28:	7c00      	ldrb	r0, [r0, #16]
 23f8f2a:	f7fe fd35 	bl	23f7998 <hal_i2c_lock>
}
 23f8f2e:	fab0 f080 	clz	r0, r0
 23f8f32:	0940      	lsrs	r0, r0, #5
 23f8f34:	bd08      	pop	{r3, pc}

023f8f36 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 23f8f36:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
 23f8f38:	2100      	movs	r1, #0
 23f8f3a:	7c00      	ldrb	r0, [r0, #16]
 23f8f3c:	f7fe fd3a 	bl	23f79b4 <hal_i2c_unlock>
}
 23f8f40:	fab0 f080 	clz	r0, r0
 23f8f44:	0940      	lsrs	r0, r0, #5
 23f8f46:	bd08      	pop	{r3, pc}

023f8f48 <_ZN7TwoWire11transactionERK16WireTransmissionS2_>:

#if HAL_PLATFORM_I2C_NUM == 1
int TwoWire::transaction(const WireTransmission& tx, const WireTransmission& rx)
{
 23f8f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f8f4c:	b08c      	sub	sp, #48	; 0x30
  auto txConf = tx.halConfig();
 23f8f4e:	466c      	mov	r4, sp
{
 23f8f50:	4615      	mov	r5, r2
 23f8f52:	460f      	mov	r7, r1
 23f8f54:	4606      	mov	r6, r0
  auto rxConf = rx.halConfig();
 23f8f56:	f10d 0818 	add.w	r8, sp, #24
  auto txConf = tx.halConfig();
 23f8f5a:	4620      	mov	r0, r4
 23f8f5c:	f7ff ff78 	bl	23f8e50 <_ZNK16WireTransmission9halConfigEv>
  auto rxConf = rx.halConfig();
 23f8f60:	4629      	mov	r1, r5
 23f8f62:	4640      	mov	r0, r8
 23f8f64:	f7ff ff74 	bl	23f8e50 <_ZNK16WireTransmission9halConfigEv>
  return hal_i2c_transaction(_i2c, tx.isValid() ? &txConf : nullptr, rx.isValid() ? &rxConf : nullptr, nullptr);
 23f8f68:	783b      	ldrb	r3, [r7, #0]
 23f8f6a:	7c30      	ldrb	r0, [r6, #16]
 23f8f6c:	2bff      	cmp	r3, #255	; 0xff
 23f8f6e:	782b      	ldrb	r3, [r5, #0]
 23f8f70:	bf14      	ite	ne
 23f8f72:	4621      	movne	r1, r4
 23f8f74:	2100      	moveq	r1, #0
 23f8f76:	2bff      	cmp	r3, #255	; 0xff
 23f8f78:	f04f 0300 	mov.w	r3, #0
 23f8f7c:	bf14      	ite	ne
 23f8f7e:	4642      	movne	r2, r8
 23f8f80:	461a      	moveq	r2, r3
 23f8f82:	f7fe fd33 	bl	23f79ec <hal_i2c_transaction>
}
 23f8f86:	b00c      	add	sp, #48	; 0x30
 23f8f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f8f8c <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t>:
        buffer_(nullptr) {
 23f8f8c:	21ff      	movs	r1, #255	; 0xff
 23f8f8e:	2200      	movs	r2, #0
      : address_{address},
 23f8f90:	4b04      	ldr	r3, [pc, #16]	; (23f8fa4 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t+0x18>)
        buffer_(nullptr) {
 23f8f92:	2001      	movs	r0, #1
 23f8f94:	e9c3 1200 	strd	r1, r2, [r3]
 23f8f98:	2164      	movs	r1, #100	; 0x64
 23f8f9a:	611a      	str	r2, [r3, #16]
 23f8f9c:	e9c3 0102 	strd	r0, r1, [r3, #8]

namespace particle {
namespace detail {
const WireTransmission WIRE_INVALID_TRANSMISSION(0xff);
} // detail
} // particle
 23f8fa0:	4770      	bx	lr
 23f8fa2:	bf00      	nop
 23f8fa4:	1007aefc 	.word	0x1007aefc

023f8fa8 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 23f8fa8:	4700      	bx	r0
	...

023f8fac <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 23f8fac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 23f8fb0:	461d      	mov	r5, r3
    hal_interrupt_detach(pin);
    hal_interrupt_extra_configuration_t extra = {};
 23f8fb2:	2400      	movs	r4, #0
{
 23f8fb4:	460f      	mov	r7, r1
 23f8fb6:	4690      	mov	r8, r2
 23f8fb8:	4606      	mov	r6, r0
    hal_interrupt_detach(pin);
 23f8fba:	f7fe fc37 	bl	23f782c <hal_interrupt_detach>
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 23f8fbe:	2304      	movs	r3, #4
  if (priority >= 0) {
 23f8fc0:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 23f8fc2:	f88d 3008 	strb.w	r3, [sp, #8]
    extra.IRQChannelSubPriority = subpriority;
 23f8fc6:	bfa8      	it	ge
 23f8fc8:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    hal_interrupt_extra_configuration_t extra = {};
 23f8fcc:	f8cd 4009 	str.w	r4, [sp, #9]
    return &extra;
 23f8fd0:	bfa4      	itt	ge
 23f8fd2:	ac02      	addge	r4, sp, #8
    extra.IRQChannelSubPriority = subpriority;
 23f8fd4:	f88d 300a 	strbge.w	r3, [sp, #10]
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 23f8fd8:	463a      	mov	r2, r7
 23f8fda:	4643      	mov	r3, r8
 23f8fdc:	4630      	mov	r0, r6
 23f8fde:	4906      	ldr	r1, [pc, #24]	; (23f8ff8 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)
 23f8fe0:	9400      	str	r4, [sp, #0]
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 23f8fe2:	bfa8      	it	ge
 23f8fe4:	f88d 5009 	strbge.w	r5, [sp, #9]
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 23f8fe8:	f7fe fc12 	bl	23f7810 <hal_interrupt_attach>
        return false;
    }
    return true;
}
 23f8fec:	fab0 f080 	clz	r0, r0
 23f8ff0:	0940      	lsrs	r0, r0, #5
 23f8ff2:	b004      	add	sp, #16
 23f8ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f8ff8:	023f8fa9 	.word	0x023f8fa9

023f8ffc <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23f8ffc:	4770      	bx	lr

023f8ffe <_ZN9IPAddressD0Ev>:
 23f8ffe:	b510      	push	{r4, lr}
 23f9000:	4604      	mov	r4, r0
 23f9002:	2118      	movs	r1, #24
 23f9004:	f7ee fc39 	bl	23e787a <_ZdlPvj>
 23f9008:	4620      	mov	r0, r4
 23f900a:	bd10      	pop	{r4, pc}

023f900c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23f900c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23f900e:	7d03      	ldrb	r3, [r0, #20]
{
 23f9010:	460e      	mov	r6, r1
	if (address.v==6) {
 23f9012:	2b06      	cmp	r3, #6
 23f9014:	f04f 0400 	mov.w	r4, #0
{
 23f9018:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f901a:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23f901e:	d012      	beq.n	23f9046 <_ZNK9IPAddress7printToER5Print+0x3a>
 23f9020:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
 23f9024:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23f9028:	220a      	movs	r2, #10
 23f902a:	4630      	mov	r0, r6
 23f902c:	f000 fb7e 	bl	23f972c <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23f9030:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23f9032:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23f9034:	d019      	beq.n	23f906a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23f9036:	2c00      	cmp	r4, #0
 23f9038:	d0f4      	beq.n	23f9024 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23f903a:	212e      	movs	r1, #46	; 0x2e
 23f903c:	4630      	mov	r0, r6
 23f903e:	f000 fb58 	bl	23f96f2 <_ZN5Print5printEc>
 23f9042:	4404      	add	r4, r0
 23f9044:	e7ee      	b.n	23f9024 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f9046:	232f      	movs	r3, #47	; 0x2f
 23f9048:	466a      	mov	r2, sp
 23f904a:	4639      	mov	r1, r7
 23f904c:	200a      	movs	r0, #10
		buf[0] = 0;
 23f904e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f9052:	f7fe fce7 	bl	23f7a24 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23f9056:	4668      	mov	r0, sp
 23f9058:	f7ee fbe6 	bl	23e7828 <strlen>
 23f905c:	6833      	ldr	r3, [r6, #0]
 23f905e:	4602      	mov	r2, r0
 23f9060:	4669      	mov	r1, sp
 23f9062:	4630      	mov	r0, r6
 23f9064:	68db      	ldr	r3, [r3, #12]
 23f9066:	4798      	blx	r3
 23f9068:	4604      	mov	r4, r0
    }
    return n;
}
 23f906a:	4620      	mov	r0, r4
 23f906c:	b00d      	add	sp, #52	; 0x34
 23f906e:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f9070 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23f9070:	b510      	push	{r4, lr}
 23f9072:	4604      	mov	r4, r0
 23f9074:	4b04      	ldr	r3, [pc, #16]	; (23f9088 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23f9076:	2211      	movs	r2, #17
 23f9078:	2100      	movs	r1, #0
 23f907a:	f840 3b04 	str.w	r3, [r0], #4
 23f907e:	f003 fee2 	bl	23fce46 <memset>
}
 23f9082:	4620      	mov	r0, r4
 23f9084:	bd10      	pop	{r4, pc}
 23f9086:	bf00      	nop
 23f9088:	023ffa90 	.word	0x023ffa90

023f908c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23f908c:	4603      	mov	r3, r0
 23f908e:	4a07      	ldr	r2, [pc, #28]	; (23f90ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23f9090:	b510      	push	{r4, lr}
 23f9092:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23f9096:	f101 0210 	add.w	r2, r1, #16
 23f909a:	f851 4b04 	ldr.w	r4, [r1], #4
 23f909e:	4291      	cmp	r1, r2
 23f90a0:	f843 4b04 	str.w	r4, [r3], #4
 23f90a4:	d1f9      	bne.n	23f909a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23f90a6:	780a      	ldrb	r2, [r1, #0]
 23f90a8:	701a      	strb	r2, [r3, #0]
}
 23f90aa:	bd10      	pop	{r4, pc}
 23f90ac:	023ffa90 	.word	0x023ffa90

023f90b0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23f90b0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23f90b2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23f90b6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23f90ba:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23f90be:	2304      	movs	r3, #4
 23f90c0:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23f90c4:	6041      	str	r1, [r0, #4]
 23f90c6:	7503      	strb	r3, [r0, #20]
}
 23f90c8:	bd10      	pop	{r4, pc}
	...

023f90cc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23f90cc:	b507      	push	{r0, r1, r2, lr}
 23f90ce:	4b06      	ldr	r3, [pc, #24]	; (23f90e8 <_ZN9IPAddressC1EPKh+0x1c>)
 23f90d0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23f90d2:	78cb      	ldrb	r3, [r1, #3]
 23f90d4:	9300      	str	r3, [sp, #0]
 23f90d6:	788b      	ldrb	r3, [r1, #2]
 23f90d8:	784a      	ldrb	r2, [r1, #1]
 23f90da:	7809      	ldrb	r1, [r1, #0]
 23f90dc:	f7ff ffe8 	bl	23f90b0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23f90e0:	b003      	add	sp, #12
 23f90e2:	f85d fb04 	ldr.w	pc, [sp], #4
 23f90e6:	bf00      	nop
 23f90e8:	023ffa90 	.word	0x023ffa90

023f90ec <_ZN5spark16JSONBufferWriterD1Ev>:
private:
    Print &strm_;
    size_t bytesWritten_;
};

class JSONBufferWriter: public JSONWriter {
 23f90ec:	4770      	bx	lr

023f90ee <_ZN5spark16JSONBufferWriterD0Ev>:
 23f90ee:	b510      	push	{r4, lr}
 23f90f0:	4604      	mov	r4, r0
 23f90f2:	2114      	movs	r1, #20
 23f90f4:	f7ee fbc1 	bl	23e787a <_ZdlPvj>
 23f90f8:	4620      	mov	r0, r4
 23f90fa:	bd10      	pop	{r4, pc}

023f90fc <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 23f90fc:	b538      	push	{r3, r4, r5, lr}
 23f90fe:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
 23f9100:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 23f9104:	4293      	cmp	r3, r2
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 23f9106:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
 23f9108:	d207      	bcs.n	23f911a <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
 23f910a:	1ad2      	subs	r2, r2, r3
 23f910c:	6880      	ldr	r0, [r0, #8]
 23f910e:	42aa      	cmp	r2, r5
 23f9110:	bf28      	it	cs
 23f9112:	462a      	movcs	r2, r5
 23f9114:	4418      	add	r0, r3
 23f9116:	f003 fe89 	bl	23fce2c <memcpy>
    }
    n_ += size;
 23f911a:	6922      	ldr	r2, [r4, #16]
 23f911c:	442a      	add	r2, r5
 23f911e:	6122      	str	r2, [r4, #16]
}
 23f9120:	bd38      	pop	{r3, r4, r5, pc}

023f9122 <_ZN5spark16JSONBufferWriter6printfEPKcz>:

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
 23f9122:	b40e      	push	{r1, r2, r3}
 23f9124:	b517      	push	{r0, r1, r2, r4, lr}
 23f9126:	4604      	mov	r4, r0
 23f9128:	ab05      	add	r3, sp, #20
 23f912a:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 23f912e:	68e1      	ldr	r1, [r4, #12]
    va_start(args, fmt);
 23f9130:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 23f9132:	6903      	ldr	r3, [r0, #16]
 23f9134:	6880      	ldr	r0, [r0, #8]
 23f9136:	428b      	cmp	r3, r1
 23f9138:	bf34      	ite	cc
 23f913a:	1ac9      	subcc	r1, r1, r3
 23f913c:	2100      	movcs	r1, #0
 23f913e:	4418      	add	r0, r3
 23f9140:	9b01      	ldr	r3, [sp, #4]
 23f9142:	f7ff f86d 	bl	23f8220 <vsnprintf>
    va_end(args);
    n_ += n;
 23f9146:	6923      	ldr	r3, [r4, #16]
 23f9148:	4418      	add	r0, r3
 23f914a:	6120      	str	r0, [r4, #16]
}
 23f914c:	b003      	add	sp, #12
 23f914e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f9152:	b003      	add	sp, #12
 23f9154:	4770      	bx	lr

023f9156 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23f9156:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23f9158:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23f915a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23f915e:	2201      	movs	r2, #1
 23f9160:	689b      	ldr	r3, [r3, #8]
 23f9162:	f10d 0107 	add.w	r1, sp, #7
 23f9166:	4798      	blx	r3
}
 23f9168:	b003      	add	sp, #12
 23f916a:	f85d fb04 	ldr.w	pc, [sp], #4

023f916e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23f916e:	b510      	push	{r4, lr}
    write('}');
 23f9170:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23f9172:	4604      	mov	r4, r0
    write('}');
 23f9174:	f7ff ffef 	bl	23f9156 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23f9178:	2301      	movs	r3, #1
}
 23f917a:	4620      	mov	r0, r4
    state_ = NEXT;
 23f917c:	7123      	strb	r3, [r4, #4]
}
 23f917e:	bd10      	pop	{r4, pc}

023f9180 <_ZN5spark10JSONWriter14writeSeparatorEv>:
void spark::JSONWriter::writeSeparator() {
 23f9180:	b508      	push	{r3, lr}
    switch (state_) {
 23f9182:	7903      	ldrb	r3, [r0, #4]
 23f9184:	2b01      	cmp	r3, #1
 23f9186:	d002      	beq.n	23f918e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23f9188:	2b02      	cmp	r3, #2
 23f918a:	d004      	beq.n	23f9196 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
}
 23f918c:	bd08      	pop	{r3, pc}
        write(',');
 23f918e:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23f9190:	f7ff ffe1 	bl	23f9156 <_ZN5spark10JSONWriter5writeEc>
}
 23f9194:	e7fa      	b.n	23f918c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23f9196:	213a      	movs	r1, #58	; 0x3a
 23f9198:	e7fa      	b.n	23f9190 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023f919a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23f919a:	b510      	push	{r4, lr}
 23f919c:	4604      	mov	r4, r0
    writeSeparator();
 23f919e:	f7ff ffef 	bl	23f9180 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23f91a2:	4620      	mov	r0, r4
 23f91a4:	217b      	movs	r1, #123	; 0x7b
 23f91a6:	f7ff ffd6 	bl	23f9156 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23f91aa:	2300      	movs	r3, #0
}
 23f91ac:	4620      	mov	r0, r4
    state_ = BEGIN;
 23f91ae:	7123      	strb	r3, [r4, #4]
}
 23f91b0:	bd10      	pop	{r4, pc}
	...

023f91b4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23f91b4:	b513      	push	{r0, r1, r4, lr}
 23f91b6:	4604      	mov	r4, r0
 23f91b8:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23f91ba:	f7ff ffe1 	bl	23f9180 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23f91be:	6823      	ldr	r3, [r4, #0]
 23f91c0:	4620      	mov	r0, r4
 23f91c2:	68db      	ldr	r3, [r3, #12]
 23f91c4:	9a01      	ldr	r2, [sp, #4]
 23f91c6:	4903      	ldr	r1, [pc, #12]	; (23f91d4 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23f91c8:	4798      	blx	r3
    state_ = NEXT;
 23f91ca:	2301      	movs	r3, #1
}
 23f91cc:	4620      	mov	r0, r4
    state_ = NEXT;
 23f91ce:	7123      	strb	r3, [r4, #4]
}
 23f91d0:	b002      	add	sp, #8
 23f91d2:	bd10      	pop	{r4, pc}
 23f91d4:	023fda41 	.word	0x023fda41

023f91d8 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23f91d8:	b513      	push	{r0, r1, r4, lr}
 23f91da:	4604      	mov	r4, r0
 23f91dc:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23f91de:	f7ff ffcf 	bl	23f9180 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23f91e2:	6823      	ldr	r3, [r4, #0]
 23f91e4:	4620      	mov	r0, r4
 23f91e6:	68db      	ldr	r3, [r3, #12]
 23f91e8:	9a01      	ldr	r2, [sp, #4]
 23f91ea:	4903      	ldr	r1, [pc, #12]	; (23f91f8 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23f91ec:	4798      	blx	r3
    state_ = NEXT;
 23f91ee:	2301      	movs	r3, #1
}
 23f91f0:	4620      	mov	r0, r4
    state_ = NEXT;
 23f91f2:	7123      	strb	r3, [r4, #4]
}
 23f91f4:	b002      	add	sp, #8
 23f91f6:	bd10      	pop	{r4, pc}
 23f91f8:	023ffa9c 	.word	0x023ffa9c

023f91fc <_ZN5spark10JSONWriter5valueEm>:
spark::JSONWriter& spark::JSONWriter::value(unsigned long val) {
 23f91fc:	b513      	push	{r0, r1, r4, lr}
 23f91fe:	4604      	mov	r4, r0
 23f9200:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23f9202:	f7ff ffbd 	bl	23f9180 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%lu", val);
 23f9206:	6823      	ldr	r3, [r4, #0]
 23f9208:	4620      	mov	r0, r4
 23f920a:	68db      	ldr	r3, [r3, #12]
 23f920c:	9a01      	ldr	r2, [sp, #4]
 23f920e:	4903      	ldr	r1, [pc, #12]	; (23f921c <_ZN5spark10JSONWriter5valueEm+0x20>)
 23f9210:	4798      	blx	r3
    state_ = NEXT;
 23f9212:	2301      	movs	r3, #1
}
 23f9214:	4620      	mov	r0, r4
    state_ = NEXT;
 23f9216:	7123      	strb	r3, [r4, #4]
}
 23f9218:	b002      	add	sp, #8
 23f921a:	bd10      	pop	{r4, pc}
 23f921c:	023fda9a 	.word	0x023fda9a

023f9220 <_ZN5spark10JSONWriter5valueEdi>:
spark::JSONWriter& spark::JSONWriter::value(double val, int precision) {
 23f9220:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f9224:	4606      	mov	r6, r0
 23f9226:	ec55 4b10 	vmov	r4, r5, d0
 23f922a:	460f      	mov	r7, r1
    writeSeparator();
 23f922c:	f7ff ffa8 	bl	23f9180 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%.*lf", precision, toFinite(val)); // NaN and infinite values are not permitted by the spec
 23f9230:	6833      	ldr	r3, [r6, #0]
    if (std::isnan(val)) {
 23f9232:	4622      	mov	r2, r4
    printf("%.*lf", precision, toFinite(val)); // NaN and infinite values are not permitted by the spec
 23f9234:	f8d3 a00c 	ldr.w	sl, [r3, #12]
    if (std::isnan(val)) {
 23f9238:	4620      	mov	r0, r4
 23f923a:	462b      	mov	r3, r5
 23f923c:	4629      	mov	r1, r5
 23f923e:	f7ed ff4d 	bl	23e70dc <__aeabi_dcmpun>
 23f9242:	bb38      	cbnz	r0, 23f9294 <_ZN5spark10JSONWriter5valueEdi+0x74>
 23f9244:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
    if (std::isinf(val)) {
 23f9248:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f924c:	4620      	mov	r0, r4
 23f924e:	4649      	mov	r1, r9
 23f9250:	4b13      	ldr	r3, [pc, #76]	; (23f92a0 <_ZN5spark10JSONWriter5valueEdi+0x80>)
 23f9252:	f7ed ff43 	bl	23e70dc <__aeabi_dcmpun>
 23f9256:	b988      	cbnz	r0, 23f927c <_ZN5spark10JSONWriter5valueEdi+0x5c>
 23f9258:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f925c:	4620      	mov	r0, r4
 23f925e:	4649      	mov	r1, r9
 23f9260:	4b0f      	ldr	r3, [pc, #60]	; (23f92a0 <_ZN5spark10JSONWriter5valueEdi+0x80>)
 23f9262:	f7ed ff1d 	bl	23e70a0 <__aeabi_dcmple>
 23f9266:	b948      	cbnz	r0, 23f927c <_ZN5spark10JSONWriter5valueEdi+0x5c>
        return (val < 0) ? std::numeric_limits<double>::lowest() : std::numeric_limits<double>::max();
 23f9268:	4620      	mov	r0, r4
 23f926a:	2200      	movs	r2, #0
 23f926c:	2300      	movs	r3, #0
 23f926e:	4629      	mov	r1, r5
 23f9270:	f7ed ff0c 	bl	23e708c <__aeabi_dcmplt>
 23f9274:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 23f9278:	b978      	cbnz	r0, 23f929a <_ZN5spark10JSONWriter5valueEdi+0x7a>
 23f927a:	4d09      	ldr	r5, [pc, #36]	; (23f92a0 <_ZN5spark10JSONWriter5valueEdi+0x80>)
    printf("%.*lf", precision, toFinite(val)); // NaN and infinite values are not permitted by the spec
 23f927c:	4630      	mov	r0, r6
 23f927e:	463a      	mov	r2, r7
 23f9280:	e9cd 4500 	strd	r4, r5, [sp]
 23f9284:	4907      	ldr	r1, [pc, #28]	; (23f92a4 <_ZN5spark10JSONWriter5valueEdi+0x84>)
 23f9286:	47d0      	blx	sl
    state_ = NEXT;
 23f9288:	2301      	movs	r3, #1
}
 23f928a:	4630      	mov	r0, r6
    state_ = NEXT;
 23f928c:	7133      	strb	r3, [r6, #4]
}
 23f928e:	b002      	add	sp, #8
 23f9290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return 0;
 23f9294:	2400      	movs	r4, #0
 23f9296:	2500      	movs	r5, #0
 23f9298:	e7f0      	b.n	23f927c <_ZN5spark10JSONWriter5valueEdi+0x5c>
        return (val < 0) ? std::numeric_limits<double>::lowest() : std::numeric_limits<double>::max();
 23f929a:	f46f 1580 	mvn.w	r5, #1048576	; 0x100000
 23f929e:	e7ed      	b.n	23f927c <_ZN5spark10JSONWriter5valueEdi+0x5c>
 23f92a0:	7fefffff 	.word	0x7fefffff
 23f92a4:	023ffa9f 	.word	0x023ffa9f

023f92a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23f92a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f92ac:	460d      	mov	r5, r1
 23f92ae:	4690      	mov	r8, r2
    write('"');
 23f92b0:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23f92b2:	4604      	mov	r4, r0
 23f92b4:	462f      	mov	r7, r5
    write('"');
 23f92b6:	f7ff ff4e 	bl	23f9156 <_ZN5spark10JSONWriter5writeEc>
                printf("u%04x", (unsigned)c);
 23f92ba:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23f9360 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23f92be:	44a8      	add	r8, r5
    while (s != end) {
 23f92c0:	4547      	cmp	r7, r8
 23f92c2:	46ba      	mov	sl, r7
 23f92c4:	d03d      	beq.n	23f9342 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23f92c6:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23f92ca:	2e22      	cmp	r6, #34	; 0x22
 23f92cc:	d006      	beq.n	23f92dc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23f92ce:	2e5c      	cmp	r6, #92	; 0x5c
 23f92d0:	d004      	beq.n	23f92dc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23f92d2:	4630      	mov	r0, r6
 23f92d4:	f003 fd92 	bl	23fcdfc <isprint>
 23f92d8:	2800      	cmp	r0, #0
 23f92da:	d1f1      	bne.n	23f92c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23f92dc:	6823      	ldr	r3, [r4, #0]
 23f92de:	4629      	mov	r1, r5
 23f92e0:	4620      	mov	r0, r4
 23f92e2:	689b      	ldr	r3, [r3, #8]
 23f92e4:	ebaa 0205 	sub.w	r2, sl, r5
 23f92e8:	4798      	blx	r3
            write('\\');
 23f92ea:	215c      	movs	r1, #92	; 0x5c
 23f92ec:	4620      	mov	r0, r4
 23f92ee:	f7ff ff32 	bl	23f9156 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23f92f2:	2e0d      	cmp	r6, #13
 23f92f4:	d80a      	bhi.n	23f930c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23f92f6:	2e07      	cmp	r6, #7
 23f92f8:	d91c      	bls.n	23f9334 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23f92fa:	f1a6 0308 	sub.w	r3, r6, #8
 23f92fe:	2b05      	cmp	r3, #5
 23f9300:	d818      	bhi.n	23f9334 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23f9302:	e8df f003 	tbb	[pc, r3]
 23f9306:	0f0d      	.short	0x0f0d
 23f9308:	15131711 	.word	0x15131711
 23f930c:	2e22      	cmp	r6, #34	; 0x22
 23f930e:	d001      	beq.n	23f9314 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23f9310:	2e5c      	cmp	r6, #92	; 0x5c
 23f9312:	d10f      	bne.n	23f9334 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23f9314:	4631      	mov	r1, r6
                write('b');
 23f9316:	4620      	mov	r0, r4
 23f9318:	f7ff ff1d 	bl	23f9156 <_ZN5spark10JSONWriter5writeEc>
            str = s + 1;
 23f931c:	463d      	mov	r5, r7
    while (s != end) {
 23f931e:	e7cf      	b.n	23f92c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23f9320:	2162      	movs	r1, #98	; 0x62
 23f9322:	e7f8      	b.n	23f9316 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23f9324:	2174      	movs	r1, #116	; 0x74
 23f9326:	e7f6      	b.n	23f9316 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23f9328:	216e      	movs	r1, #110	; 0x6e
 23f932a:	e7f4      	b.n	23f9316 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23f932c:	2166      	movs	r1, #102	; 0x66
 23f932e:	e7f2      	b.n	23f9316 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23f9330:	2172      	movs	r1, #114	; 0x72
 23f9332:	e7f0      	b.n	23f9316 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23f9334:	6823      	ldr	r3, [r4, #0]
 23f9336:	4632      	mov	r2, r6
 23f9338:	4649      	mov	r1, r9
 23f933a:	4620      	mov	r0, r4
 23f933c:	68db      	ldr	r3, [r3, #12]
 23f933e:	4798      	blx	r3
                break;
 23f9340:	e7ec      	b.n	23f931c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
    if (s != str) {
 23f9342:	42bd      	cmp	r5, r7
 23f9344:	d005      	beq.n	23f9352 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23f9346:	6823      	ldr	r3, [r4, #0]
 23f9348:	4629      	mov	r1, r5
 23f934a:	4620      	mov	r0, r4
 23f934c:	689b      	ldr	r3, [r3, #8]
 23f934e:	1b7a      	subs	r2, r7, r5
 23f9350:	4798      	blx	r3
    write('"');
 23f9352:	2122      	movs	r1, #34	; 0x22
 23f9354:	4620      	mov	r0, r4
 23f9356:	f7ff fefe 	bl	23f9156 <_ZN5spark10JSONWriter5writeEc>
}
 23f935a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f935e:	bf00      	nop
 23f9360:	023ffaa5 	.word	0x023ffaa5

023f9364 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23f9364:	b513      	push	{r0, r1, r4, lr}
 23f9366:	4604      	mov	r4, r0
 23f9368:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23f936c:	f7ff ff08 	bl	23f9180 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23f9370:	e9dd 2100 	ldrd	r2, r1, [sp]
 23f9374:	4620      	mov	r0, r4
 23f9376:	f7ff ff97 	bl	23f92a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23f937a:	2302      	movs	r3, #2
}
 23f937c:	4620      	mov	r0, r4
    state_ = VALUE;
 23f937e:	7123      	strb	r3, [r4, #4]
}
 23f9380:	b002      	add	sp, #8
 23f9382:	bd10      	pop	{r4, pc}

023f9384 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23f9384:	b513      	push	{r0, r1, r4, lr}
 23f9386:	4604      	mov	r4, r0
 23f9388:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23f938c:	f7ff fef8 	bl	23f9180 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23f9390:	e9dd 2100 	ldrd	r2, r1, [sp]
 23f9394:	4620      	mov	r0, r4
 23f9396:	f7ff ff87 	bl	23f92a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23f939a:	2301      	movs	r3, #1
}
 23f939c:	4620      	mov	r0, r4
    state_ = NEXT;
 23f939e:	7123      	strb	r3, [r4, #4]
}
 23f93a0:	b002      	add	sp, #8
 23f93a2:	bd10      	pop	{r4, pc}

023f93a4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23f93a4:	4b01      	ldr	r3, [pc, #4]	; (23f93ac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23f93a6:	4a02      	ldr	r2, [pc, #8]	; (23f93b0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23f93a8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23f93aa:	4770      	bx	lr
 23f93ac:	1007af10 	.word	0x1007af10
 23f93b0:	023ffac4 	.word	0x023ffac4

023f93b4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23f93b4:	2300      	movs	r3, #0
 23f93b6:	6840      	ldr	r0, [r0, #4]
 23f93b8:	461a      	mov	r2, r3
 23f93ba:	f7fe be35 	b.w	23f8028 <network_connect>

023f93be <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23f93be:	2200      	movs	r2, #0
 23f93c0:	2102      	movs	r1, #2
 23f93c2:	6840      	ldr	r0, [r0, #4]
 23f93c4:	f7fe be4c 	b.w	23f8060 <network_disconnect>

023f93c8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23f93c8:	2200      	movs	r2, #0
 23f93ca:	6840      	ldr	r0, [r0, #4]
 23f93cc:	4611      	mov	r1, r2
 23f93ce:	f7fe be39 	b.w	23f8044 <network_connecting>

023f93d2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23f93d2:	2200      	movs	r2, #0
 23f93d4:	6840      	ldr	r0, [r0, #4]
 23f93d6:	4611      	mov	r1, r2
 23f93d8:	f7fe be50 	b.w	23f807c <network_ready>

023f93dc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23f93dc:	2300      	movs	r3, #0
 23f93de:	6840      	ldr	r0, [r0, #4]
 23f93e0:	461a      	mov	r2, r3
 23f93e2:	4619      	mov	r1, r3
 23f93e4:	f7fe be58 	b.w	23f8098 <network_on>

023f93e8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23f93e8:	2300      	movs	r3, #0
 23f93ea:	6840      	ldr	r0, [r0, #4]
 23f93ec:	461a      	mov	r2, r3
 23f93ee:	4619      	mov	r1, r3
 23f93f0:	f7fe be60 	b.w	23f80b4 <network_off>

023f93f4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23f93f4:	2100      	movs	r1, #0
 23f93f6:	6840      	ldr	r0, [r0, #4]
 23f93f8:	f7fe bea2 	b.w	23f8140 <network_is_on>

023f93fc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23f93fc:	2100      	movs	r1, #0
 23f93fe:	6840      	ldr	r0, [r0, #4]
 23f9400:	f7fe beac 	b.w	23f815c <network_is_off>

023f9404 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23f9404:	2200      	movs	r2, #0
 23f9406:	6840      	ldr	r0, [r0, #4]
 23f9408:	f081 0101 	eor.w	r1, r1, #1
 23f940c:	f7fe be60 	b.w	23f80d0 <network_listen>

023f9410 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23f9410:	2200      	movs	r2, #0
 23f9412:	6840      	ldr	r0, [r0, #4]
 23f9414:	f7fe be78 	b.w	23f8108 <network_set_listen_timeout>

023f9418 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23f9418:	2200      	movs	r2, #0
 23f941a:	6840      	ldr	r0, [r0, #4]
 23f941c:	4611      	mov	r1, r2
 23f941e:	f7fe be81 	b.w	23f8124 <network_get_listen_timeout>

023f9422 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23f9422:	2200      	movs	r2, #0
 23f9424:	6840      	ldr	r0, [r0, #4]
 23f9426:	4611      	mov	r1, r2
 23f9428:	f7fe be60 	b.w	23f80ec <network_listening>

023f942c <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
 23f942c:	2100      	movs	r1, #0
 23f942e:	6840      	ldr	r0, [r0, #4]
 23f9430:	f7fe beb0 	b.w	23f8194 <network_is_preferred>

023f9434 <_ZN5spark12NetworkClass7resolveEPKcb>:
}

IPAddress NetworkClass::resolve(const char* name, bool flushCache) {
 23f9434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23f9438:	2600      	movs	r6, #0
IPAddress NetworkClass::resolve(const char* name, bool flushCache) {
 23f943a:	4698      	mov	r8, r3
 23f943c:	b099      	sub	sp, #100	; 0x64
 23f943e:	460d      	mov	r5, r1
 23f9440:	4614      	mov	r4, r2
 23f9442:	4607      	mov	r7, r0
    IPAddress addr;
 23f9444:	f7ff fe14 	bl	23f9070 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
 23f9448:	221c      	movs	r2, #28
 23f944a:	4631      	mov	r1, r6
 23f944c:	a811      	add	r0, sp, #68	; 0x44
    struct addrinfo *ai = nullptr;
 23f944e:	9603      	str	r6, [sp, #12]
    struct addrinfo hints = {};
 23f9450:	f003 fcf9 	bl	23fce46 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
    if (flushCache) {
 23f9454:	f1b8 0f00 	cmp.w	r8, #0
 23f9458:	d12c      	bne.n	23f94b4 <_ZN5spark12NetworkClass7resolveEPKcb+0x80>
    hints.ai_flags = AI_ADDRCONFIG;
 23f945a:	2340      	movs	r3, #64	; 0x40
        return iface_;
 23f945c:	6868      	ldr	r0, [r5, #4]
        hints.ai_flags |= AI_FLUSHCACHE;
 23f945e:	9310      	str	r3, [sp, #64]	; 0x40
    }
    hints.ai_family = AF_UNSPEC;
    if_t iface = nullptr;
 23f9460:	9604      	str	r6, [sp, #16]
    if ((network_interface_t)*this != NETWORK_INTERFACE_ALL) {
 23f9462:	b118      	cbz	r0, 23f946c <_ZN5spark12NetworkClass7resolveEPKcb+0x38>
        if_get_by_index((network_interface_t)*this, &iface);
 23f9464:	a904      	add	r1, sp, #16
 23f9466:	b2c0      	uxtb	r0, r0
 23f9468:	f7fe face 	bl	23f7a08 <if_get_by_index>
    }
    const int r = netdb_getaddrinfo_ex(name, nullptr, &hints, &ai, iface);
 23f946c:	9b04      	ldr	r3, [sp, #16]
 23f946e:	4620      	mov	r0, r4
 23f9470:	9300      	str	r3, [sp, #0]
 23f9472:	2100      	movs	r1, #0
 23f9474:	ab03      	add	r3, sp, #12
 23f9476:	aa10      	add	r2, sp, #64	; 0x40
 23f9478:	f7fe faf0 	bl	23f7a5c <netdb_getaddrinfo_ex>
    if (!r) {
 23f947c:	4604      	mov	r4, r0
 23f947e:	2800      	cmp	r0, #0
 23f9480:	d14d      	bne.n	23f951e <_ZN5spark12NetworkClass7resolveEPKcb+0xea>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23f9482:	4602      	mov	r2, r0
 23f9484:	2101      	movs	r1, #1
 23f9486:	6868      	ldr	r0, [r5, #4]
 23f9488:	f7fe fdf8 	bl	23f807c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f948c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23f948e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f9490:	4622      	mov	r2, r4
 23f9492:	6868      	ldr	r0, [r5, #4]
 23f9494:	f7fe fdf2 	bl	23f807c <network_ready>
        bool ok = false;
 23f9498:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f949a:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23f949c:	9e03      	ldr	r6, [sp, #12]
 23f949e:	2e00      	cmp	r6, #0
 23f94a0:	d03d      	beq.n	23f951e <_ZN5spark12NetworkClass7resolveEPKcb+0xea>
 23f94a2:	2900      	cmp	r1, #0
 23f94a4:	d13b      	bne.n	23f951e <_ZN5spark12NetworkClass7resolveEPKcb+0xea>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23f94a6:	6873      	ldr	r3, [r6, #4]
 23f94a8:	2b02      	cmp	r3, #2
 23f94aa:	d005      	beq.n	23f94b8 <_ZN5spark12NetworkClass7resolveEPKcb+0x84>
 23f94ac:	2b0a      	cmp	r3, #10
 23f94ae:	d013      	beq.n	23f94d8 <_ZN5spark12NetworkClass7resolveEPKcb+0xa4>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23f94b0:	69f6      	ldr	r6, [r6, #28]
 23f94b2:	e7f4      	b.n	23f949e <_ZN5spark12NetworkClass7resolveEPKcb+0x6a>
        hints.ai_flags |= AI_FLUSHCACHE;
 23f94b4:	4b1d      	ldr	r3, [pc, #116]	; (23f952c <_ZN5spark12NetworkClass7resolveEPKcb+0xf8>)
 23f94b6:	e7d1      	b.n	23f945c <_ZN5spark12NetworkClass7resolveEPKcb+0x28>
                case AF_INET: {
                    if (!ipv4) {
 23f94b8:	f1b8 0f00 	cmp.w	r8, #0
 23f94bc:	d0f8      	beq.n	23f94b0 <_ZN5spark12NetworkClass7resolveEPKcb+0x7c>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23f94be:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23f94c0:	a80a      	add	r0, sp, #40	; 0x28
 23f94c2:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23f94c4:	1d3c      	adds	r4, r7, #4
 23f94c6:	ad0b      	add	r5, sp, #44	; 0x2c
        return *this = IPAddress(address);
 23f94c8:	f7ff fe00 	bl	23f90cc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23f94cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f94ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f94d0:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23f94d2:	4641      	mov	r1, r8
 23f94d4:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23f94d6:	e7eb      	b.n	23f94b0 <_ZN5spark12NetworkClass7resolveEPKcb+0x7c>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23f94d8:	f1b9 0f00 	cmp.w	r9, #0
 23f94dc:	d0e8      	beq.n	23f94b0 <_ZN5spark12NetworkClass7resolveEPKcb+0x7c>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23f94de:	2210      	movs	r2, #16
 23f94e0:	a805      	add	r0, sp, #20
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23f94e2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23f94e4:	f003 fcaf 	bl	23fce46 <memset>
                    a.v = 6;
 23f94e8:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23f94ea:	ad05      	add	r5, sp, #20
                    a.v = 6;
 23f94ec:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23f94f0:	f104 0308 	add.w	r3, r4, #8
 23f94f4:	3418      	adds	r4, #24
 23f94f6:	462a      	mov	r2, r5
 23f94f8:	6818      	ldr	r0, [r3, #0]
 23f94fa:	6859      	ldr	r1, [r3, #4]
 23f94fc:	3308      	adds	r3, #8
 23f94fe:	c203      	stmia	r2!, {r0, r1}
 23f9500:	42a3      	cmp	r3, r4
 23f9502:	4615      	mov	r5, r2
 23f9504:	d1f7      	bne.n	23f94f6 <_ZN5spark12NetworkClass7resolveEPKcb+0xc2>
                    addr = IPAddress(a);
 23f9506:	a905      	add	r1, sp, #20
 23f9508:	a80a      	add	r0, sp, #40	; 0x28
class IPAddress : public Printable {
 23f950a:	1d3c      	adds	r4, r7, #4
 23f950c:	ad0b      	add	r5, sp, #44	; 0x2c
 23f950e:	f7ff fdbd 	bl	23f908c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23f9512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f9514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f9516:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23f9518:	4649      	mov	r1, r9
 23f951a:	7023      	strb	r3, [r4, #0]
                    break;
 23f951c:	e7c8      	b.n	23f94b0 <_ZN5spark12NetworkClass7resolveEPKcb+0x7c>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23f951e:	9803      	ldr	r0, [sp, #12]
 23f9520:	f7fe fa8e 	bl	23f7a40 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23f9524:	4638      	mov	r0, r7
 23f9526:	b019      	add	sp, #100	; 0x64
 23f9528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23f952c:	40000040 	.word	0x40000040

023f9530 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
 23f9530:	3803      	subs	r0, #3
 23f9532:	2803      	cmp	r0, #3
 23f9534:	bf9a      	itte	ls
 23f9536:	4b02      	ldrls	r3, [pc, #8]	; (23f9540 <_ZN5spark12NetworkClass4fromEm+0x10>)
 23f9538:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
 23f953c:	4801      	ldrhi	r0, [pc, #4]	; (23f9544 <_ZN5spark12NetworkClass4fromEm+0x14>)
}
 23f953e:	4770      	bx	lr
 23f9540:	023ffac8 	.word	0x023ffac8
 23f9544:	1007af14 	.word	0x1007af14

023f9548 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
 23f9548:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
 23f954a:	2200      	movs	r2, #0
 23f954c:	6840      	ldr	r0, [r0, #4]
 23f954e:	f7fe fe13 	bl	23f8178 <network_prefer>
}
 23f9552:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
 23f9556:	f7ff bfeb 	b.w	23f9530 <_ZN5spark12NetworkClass4fromEm>
	...

023f955c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
            : iface_(iface) {
 23f955c:	4b02      	ldr	r3, [pc, #8]	; (23f9568 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23f955e:	4a03      	ldr	r2, [pc, #12]	; (23f956c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23f9560:	601a      	str	r2, [r3, #0]
 23f9562:	2200      	movs	r2, #0
 23f9564:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23f9566:	4770      	bx	lr
 23f9568:	1007af14 	.word	0x1007af14
 23f956c:	023ffae0 	.word	0x023ffae0

023f9570 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    config.quantity(sizeof(buf));
    pmicWireInstance()->transaction(config);
#endif // (HAL_PLATFORM_I2C_NUM != 1)
}

bool PMIC::lock() {
 23f9570:	b508      	push	{r3, lr}
            return &Wire;
 23f9572:	f000 fecf 	bl	23fa314 <_Z19__fetch_global_Wirev>
    return pmicWireInstance()->lock();
}
 23f9576:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
 23f957a:	f7ff bcd3 	b.w	23f8f24 <_ZN7TwoWire4lockEv>

023f957e <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
 23f957e:	b510      	push	{r4, lr}
 23f9580:	4604      	mov	r4, r0
    lock_(_lock)
 23f9582:	7001      	strb	r1, [r0, #0]
    if (lock_) {
 23f9584:	b109      	cbz	r1, 23f958a <_ZN4PMICC1Eb+0xc>
        lock();
 23f9586:	f7ff fff3 	bl	23f9570 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
 23f958a:	4620      	mov	r0, r4
 23f958c:	bd10      	pop	{r4, pc}

023f958e <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
 23f958e:	b508      	push	{r3, lr}
            return &Wire;
 23f9590:	f000 fec0 	bl	23fa314 <_Z19__fetch_global_Wirev>
    return pmicWireInstance()->unlock();
}
 23f9594:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
 23f9598:	f7ff bccd 	b.w	23f8f36 <_ZN7TwoWire6unlockEv>

023f959c <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23f959c:	b510      	push	{r4, lr}
 23f959e:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 23f95a0:	6800      	ldr	r0, [r0, #0]
 23f95a2:	f7ff fff4 	bl	23f958e <_ZN4PMIC6unlockEv>
 23f95a6:	4620      	mov	r0, r4
 23f95a8:	bd10      	pop	{r4, pc}

023f95aa <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
 23f95aa:	b510      	push	{r4, lr}
 23f95ac:	b08e      	sub	sp, #56	; 0x38
 23f95ae:	f88d 1007 	strb.w	r1, [sp, #7]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f95b2:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
 23f95b4:	f7ff ffdc 	bl	23f9570 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    buffer_ = buf;
 23f95b8:	f10d 0307 	add.w	r3, sp, #7
 23f95bc:	9308      	str	r3, [sp, #32]
    size_ = size;
 23f95be:	2301      	movs	r3, #1
    byte DATA = 0;
 23f95c0:	2400      	movs	r4, #0
        buffer_(nullptr) {
 23f95c2:	216b      	movs	r1, #107	; 0x6b
    timeout_ = ms;
 23f95c4:	220a      	movs	r2, #10
    size_ = size;
 23f95c6:	9305      	str	r3, [sp, #20]
        buffer_(nullptr) {
 23f95c8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    size_ = size;
 23f95cc:	930a      	str	r3, [sp, #40]	; 0x28
    buffer_ = buf;
 23f95ce:	f10d 030b 	add.w	r3, sp, #11
 23f95d2:	930d      	str	r3, [sp, #52]	; 0x34
 23f95d4:	f88d 400b 	strb.w	r4, [sp, #11]
        buffer_(nullptr) {
 23f95d8:	f88d 1010 	strb.w	r1, [sp, #16]
    timeout_ = ms;
 23f95dc:	9207      	str	r2, [sp, #28]
    stop_ = stop;
 23f95de:	f88d 4018 	strb.w	r4, [sp, #24]
        buffer_(nullptr) {
 23f95e2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
    timeout_ = ms;
 23f95e6:	920c      	str	r2, [sp, #48]	; 0x30
            return &Wire;
 23f95e8:	f000 fe94 	bl	23fa314 <_Z19__fetch_global_Wirev>
    auto r = pmicWireInstance()->transaction(config, rxConfig);
 23f95ec:	aa09      	add	r2, sp, #36	; 0x24
 23f95ee:	a904      	add	r1, sp, #16
 23f95f0:	f7ff fcaa 	bl	23f8f48 <_ZN7TwoWire11transactionERK16WireTransmissionS2_>
    if (r != 1) {
 23f95f4:	2801      	cmp	r0, #1
        DATA = 0;
 23f95f6:	bf18      	it	ne
 23f95f8:	f88d 400b 	strbne.w	r4, [sp, #11]
    return DATA;
 23f95fc:	f89d 400b 	ldrb.w	r4, [sp, #11]
    std::lock_guard<PMIC> l(*this);
 23f9600:	a803      	add	r0, sp, #12
 23f9602:	f7ff ffcb 	bl	23f959c <_ZNSt10lock_guardI4PMICED1Ev>
}
 23f9606:	4620      	mov	r0, r4
 23f9608:	b00e      	add	sp, #56	; 0x38
 23f960a:	bd10      	pop	{r4, pc}

023f960c <_ZN4PMIC11isPowerGoodEv>:
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 23f960c:	2108      	movs	r1, #8
bool PMIC::isPowerGood(void) {
 23f960e:	b508      	push	{r3, lr}
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 23f9610:	f7ff ffcb 	bl	23f95aa <_ZN4PMIC12readRegisterEh>
}
 23f9614:	f3c0 0080 	ubfx	r0, r0, #2, #1
 23f9618:	bd08      	pop	{r3, pc}

023f961a <_ZN4PMIC8getFaultEv>:
    DATA = readRegister(FAULT_REGISTER);
 23f961a:	2109      	movs	r1, #9
 23f961c:	f7ff bfc5 	b.w	23f95aa <_ZN4PMIC12readRegisterEh>

023f9620 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
 23f9620:	b530      	push	{r4, r5, lr}
 23f9622:	b089      	sub	sp, #36	; 0x24
 23f9624:	460d      	mov	r5, r1
 23f9626:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f9628:	9002      	str	r0, [sp, #8]
      { _M_device.lock(); }
 23f962a:	f7ff ffa1 	bl	23f9570 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        buffer_(nullptr) {
 23f962e:	236b      	movs	r3, #107	; 0x6b
 23f9630:	f88d 300c 	strb.w	r3, [sp, #12]
 23f9634:	2301      	movs	r3, #1
 23f9636:	f88d 3014 	strb.w	r3, [sp, #20]
    timeout_ = ms;
 23f963a:	230a      	movs	r3, #10
 23f963c:	9306      	str	r3, [sp, #24]
    buffer_ = buf;
 23f963e:	ab01      	add	r3, sp, #4
 23f9640:	9307      	str	r3, [sp, #28]
    size_ = size;
 23f9642:	2302      	movs	r3, #2
    uint8_t buf[2] = {address, DATA};
 23f9644:	f88d 5004 	strb.w	r5, [sp, #4]
 23f9648:	9304      	str	r3, [sp, #16]
 23f964a:	f88d 4005 	strb.w	r4, [sp, #5]
            return &Wire;
 23f964e:	f000 fe61 	bl	23fa314 <_Z19__fetch_global_Wirev>
    pmicWireInstance()->transaction(config);
 23f9652:	4a04      	ldr	r2, [pc, #16]	; (23f9664 <_ZN4PMIC13writeRegisterEhh+0x44>)
 23f9654:	a903      	add	r1, sp, #12
 23f9656:	f7ff fc77 	bl	23f8f48 <_ZN7TwoWire11transactionERK16WireTransmissionS2_>
    std::lock_guard<PMIC> l(*this);
 23f965a:	a802      	add	r0, sp, #8
 23f965c:	f7ff ff9e 	bl	23f959c <_ZNSt10lock_guardI4PMICED1Ev>
}
 23f9660:	b009      	add	sp, #36	; 0x24
 23f9662:	bd30      	pop	{r4, r5, pc}
 23f9664:	1007aefc 	.word	0x1007aefc

023f9668 <_ZN4PMIC12enableBATFETEv>:
bool PMIC::enableBATFET(void) {
 23f9668:	b513      	push	{r0, r1, r4, lr}
 23f966a:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f966c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 23f966e:	f7ff ff7f 	bl	23f9570 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(MISC_CONTROL_REGISTER);
 23f9672:	2107      	movs	r1, #7
 23f9674:	4620      	mov	r0, r4
 23f9676:	f7ff ff98 	bl	23f95aa <_ZN4PMIC12readRegisterEh>
    writeRegister(MISC_CONTROL_REGISTER, (DATA & 0b11011111));
 23f967a:	2107      	movs	r1, #7
 23f967c:	f000 02df 	and.w	r2, r0, #223	; 0xdf
 23f9680:	4620      	mov	r0, r4
 23f9682:	f7ff ffcd 	bl	23f9620 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 23f9686:	a801      	add	r0, sp, #4
 23f9688:	f7ff ff88 	bl	23f959c <_ZNSt10lock_guardI4PMICED1Ev>
}
 23f968c:	2001      	movs	r0, #1
 23f968e:	b002      	add	sp, #8
 23f9690:	bd10      	pop	{r4, pc}

023f9692 <_ZN4PMIC13disableBATFETEv>:
bool PMIC::disableBATFET(void) {
 23f9692:	b513      	push	{r0, r1, r4, lr}
 23f9694:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f9696:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 23f9698:	f7ff ff6a 	bl	23f9570 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(MISC_CONTROL_REGISTER);
 23f969c:	2107      	movs	r1, #7
 23f969e:	4620      	mov	r0, r4
 23f96a0:	f7ff ff83 	bl	23f95aa <_ZN4PMIC12readRegisterEh>
    writeRegister(MISC_CONTROL_REGISTER, (DATA | 0b00100000));
 23f96a4:	f040 0020 	orr.w	r0, r0, #32
 23f96a8:	b2c2      	uxtb	r2, r0
 23f96aa:	2107      	movs	r1, #7
 23f96ac:	4620      	mov	r0, r4
 23f96ae:	f7ff ffb7 	bl	23f9620 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 23f96b2:	a801      	add	r0, sp, #4
 23f96b4:	f7ff ff72 	bl	23f959c <_ZNSt10lock_guardI4PMICED1Ev>
}
 23f96b8:	2001      	movs	r0, #1
 23f96ba:	b002      	add	sp, #8
 23f96bc:	bd10      	pop	{r4, pc}

023f96be <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23f96be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f96c0:	4606      	mov	r6, r0
 23f96c2:	460d      	mov	r5, r1
  size_t n = 0;
 23f96c4:	2400      	movs	r4, #0
 23f96c6:	188f      	adds	r7, r1, r2
  while (size--) {
 23f96c8:	42bd      	cmp	r5, r7
 23f96ca:	d00c      	beq.n	23f96e6 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23f96cc:	6833      	ldr	r3, [r6, #0]
 23f96ce:	4630      	mov	r0, r6
 23f96d0:	689b      	ldr	r3, [r3, #8]
 23f96d2:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f96d6:	4798      	blx	r3
     if (chunk>=0)
 23f96d8:	1e03      	subs	r3, r0, #0
 23f96da:	db01      	blt.n	23f96e0 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23f96dc:	441c      	add	r4, r3
  while (size--) {
 23f96de:	e7f3      	b.n	23f96c8 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23f96e0:	2c00      	cmp	r4, #0
 23f96e2:	bf08      	it	eq
 23f96e4:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23f96e6:	4620      	mov	r0, r4
 23f96e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f96ea <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 23f96ea:	b508      	push	{r3, lr}
  return write(str);
 23f96ec:	f7fd f8d2 	bl	23f6894 <_ZN5Print5writeEPKc>
}
 23f96f0:	bd08      	pop	{r3, pc}

023f96f2 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 23f96f2:	6803      	ldr	r3, [r0, #0]
 23f96f4:	689b      	ldr	r3, [r3, #8]
 23f96f6:	4718      	bx	r3

023f96f8 <_ZN5Print5printEPK19__FlashStringHelper>:
 23f96f8:	b508      	push	{r3, lr}
 23f96fa:	f7fd f8cb 	bl	23f6894 <_ZN5Print5writeEPKc>
 23f96fe:	bd08      	pop	{r3, pc}

023f9700 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23f9700:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23f9702:	210d      	movs	r1, #13
{
 23f9704:	4605      	mov	r5, r0
  size_t n = print('\r');
 23f9706:	f7ff fff4 	bl	23f96f2 <_ZN5Print5printEc>
  n += print('\n');
 23f970a:	210a      	movs	r1, #10
  size_t n = print('\r');
 23f970c:	4604      	mov	r4, r0
  n += print('\n');
 23f970e:	4628      	mov	r0, r5
 23f9710:	f7ff ffef 	bl	23f96f2 <_ZN5Print5printEc>
  return n;
}
 23f9714:	4420      	add	r0, r4
 23f9716:	bd38      	pop	{r3, r4, r5, pc}

023f9718 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 23f9718:	b538      	push	{r3, r4, r5, lr}
 23f971a:	4605      	mov	r5, r0
  return write(str);
 23f971c:	f7fd f8ba 	bl	23f6894 <_ZN5Print5writeEPKc>
 23f9720:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 23f9722:	4628      	mov	r0, r5
 23f9724:	f7ff ffec 	bl	23f9700 <_ZN5Print7printlnEv>
  return n;
}
 23f9728:	4420      	add	r0, r4
 23f972a:	bd38      	pop	{r3, r4, r5, pc}

023f972c <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23f972c:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23f972e:	2a01      	cmp	r2, #1
 23f9730:	bf98      	it	ls
 23f9732:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23f9734:	b530      	push	{r4, r5, lr}
 23f9736:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23f9738:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23f973c:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23f973e:	460d      	mov	r5, r1
 23f9740:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23f9744:	fb01 5312 	mls	r3, r1, r2, r5
 23f9748:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23f974c:	2b09      	cmp	r3, #9
 23f974e:	bf94      	ite	ls
 23f9750:	3330      	addls	r3, #48	; 0x30
 23f9752:	3337      	addhi	r3, #55	; 0x37
 23f9754:	b2db      	uxtb	r3, r3
  } while(n);
 23f9756:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23f9758:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23f975c:	d9ef      	bls.n	23f973e <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23f975e:	4621      	mov	r1, r4
 23f9760:	f7fd f898 	bl	23f6894 <_ZN5Print5writeEPKc>
}
 23f9764:	b00b      	add	sp, #44	; 0x2c
 23f9766:	bd30      	pop	{r4, r5, pc}

023f9768 <_ZN5Print7vprintfEbPKcSt9__va_list>:
    writeVariant(var, writer);
    return writer.bytesWritten();
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 23f9768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f976c:	b086      	sub	sp, #24
 23f976e:	af00      	add	r7, sp, #0
 23f9770:	4605      	mov	r5, r0
 23f9772:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 23f9774:	1d38      	adds	r0, r7, #4
 23f9776:	2114      	movs	r1, #20
{
 23f9778:	4614      	mov	r4, r2
    va_copy(args2, args);
 23f977a:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 23f977c:	f7fe fd50 	bl	23f8220 <vsnprintf>

    if (n<bufsize)
 23f9780:	2813      	cmp	r0, #19
 23f9782:	d80e      	bhi.n	23f97a2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 23f9784:	4628      	mov	r0, r5
 23f9786:	1d39      	adds	r1, r7, #4
 23f9788:	f7fd f884 	bl	23f6894 <_ZN5Print5writeEPKc>
 23f978c:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 23f978e:	b11e      	cbz	r6, 23f9798 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 23f9790:	4628      	mov	r0, r5
 23f9792:	f7ff ffb5 	bl	23f9700 <_ZN5Print7printlnEv>
 23f9796:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 23f9798:	4620      	mov	r0, r4
 23f979a:	3718      	adds	r7, #24
 23f979c:	46bd      	mov	sp, r7
 23f979e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 23f97a2:	f100 0308 	add.w	r3, r0, #8
 23f97a6:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 23f97aa:	46e8      	mov	r8, sp
        char bigger[n+1];
 23f97ac:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 23f97b0:	4622      	mov	r2, r4
 23f97b2:	1c41      	adds	r1, r0, #1
 23f97b4:	683b      	ldr	r3, [r7, #0]
 23f97b6:	4668      	mov	r0, sp
 23f97b8:	f7fe fd32 	bl	23f8220 <vsnprintf>
  return write(str);
 23f97bc:	4669      	mov	r1, sp
 23f97be:	4628      	mov	r0, r5
 23f97c0:	f7fd f868 	bl	23f6894 <_ZN5Print5writeEPKc>
 23f97c4:	4604      	mov	r4, r0
 23f97c6:	46c5      	mov	sp, r8
 23f97c8:	e7e1      	b.n	23f978e <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

023f97ca <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
 23f97ca:	b510      	push	{r4, lr}
  if (0 == max) {
 23f97cc:	4604      	mov	r4, r0
 23f97ce:	b128      	cbz	r0, 23f97dc <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
 23f97d0:	f003 fb70 	bl	23fceb4 <rand>
 23f97d4:	fb90 f3f4 	sdiv	r3, r0, r4
 23f97d8:	fb03 0414 	mls	r4, r3, r4, r0
}
 23f97dc:	4620      	mov	r0, r4
 23f97de:	bd10      	pop	{r4, pc}

023f97e0 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
 23f97e0:	4288      	cmp	r0, r1
{
 23f97e2:	b510      	push	{r4, lr}
 23f97e4:	4604      	mov	r4, r0
  if (min >= max) {
 23f97e6:	da03      	bge.n	23f97f0 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
 23f97e8:	1a08      	subs	r0, r1, r0
 23f97ea:	f7ff ffee 	bl	23f97ca <_Z6randomi>
 23f97ee:	4404      	add	r4, r0
}
 23f97f0:	4620      	mov	r0, r4
 23f97f2:	bd10      	pop	{r4, pc}

023f97f4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23f97f4:	2200      	movs	r2, #0
 23f97f6:	4b01      	ldr	r3, [pc, #4]	; (23f97fc <_GLOBAL__sub_I_RGB+0x8>)
 23f97f8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23f97fa:	4770      	bx	lr
 23f97fc:	1007af1c 	.word	0x1007af1c

023f9800 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23f9800:	2100      	movs	r1, #0
 23f9802:	f7fe b9c5 	b.w	23f7b90 <hal_spi_release>

023f9806 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23f9806:	2100      	movs	r1, #0
 23f9808:	f7fe b9b4 	b.w	23f7b74 <hal_spi_acquire>

023f980c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23f980c:	b510      	push	{r4, lr}
 23f980e:	4604      	mov	r4, r0
 23f9810:	4608      	mov	r0, r1
{
    _spi = spi;
 23f9812:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23f9814:	f7fe f95a 	bl	23f7acc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23f9818:	2300      	movs	r3, #0
}
 23f981a:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23f981c:	6063      	str	r3, [r4, #4]
}
 23f981e:	bd10      	pop	{r4, pc}

023f9820 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 23f9820:	b513      	push	{r0, r1, r4, lr}
 23f9822:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
 23f9824:	7800      	ldrb	r0, [r0, #0]
 23f9826:	f7ff ffee 	bl	23f9806 <_ZN8SPIClass4lockEv.isra.0>
 23f982a:	b958      	cbnz	r0, 23f9844 <_ZN8SPIClass5beginEv+0x24>
 23f982c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 23f982e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23f9832:	9001      	str	r0, [sp, #4]
 23f9834:	f7fe f920 	bl	23f7a78 <hal_spi_begin>
        unlock();
 23f9838:	9801      	ldr	r0, [sp, #4]
    }
}
 23f983a:	b002      	add	sp, #8
 23f983c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f9840:	f7ff bfde 	b.w	23f9800 <_ZN8SPIClass6unlockEv.isra.0>
 23f9844:	b002      	add	sp, #8
 23f9846:	bd10      	pop	{r4, pc}

023f9848 <_ZN8SPIClass5beginEt>:

void SPIClass::begin(uint16_t ss_pin)
{
 23f9848:	b513      	push	{r0, r1, r4, lr}
 23f984a:	4604      	mov	r4, r0
    if (!lock())
 23f984c:	7800      	ldrb	r0, [r0, #0]
{
 23f984e:	9101      	str	r1, [sp, #4]
    if (!lock())
 23f9850:	f7ff ffd9 	bl	23f9806 <_ZN8SPIClass4lockEv.isra.0>
 23f9854:	9901      	ldr	r1, [sp, #4]
 23f9856:	b948      	cbnz	r0, 23f986c <_ZN8SPIClass5beginEt+0x24>
 23f9858:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, ss_pin);
 23f985a:	9001      	str	r0, [sp, #4]
 23f985c:	f7fe f90c 	bl	23f7a78 <hal_spi_begin>
        unlock();
 23f9860:	9801      	ldr	r0, [sp, #4]
    }
}
 23f9862:	b002      	add	sp, #8
 23f9864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f9868:	f7ff bfca 	b.w	23f9800 <_ZN8SPIClass6unlockEv.isra.0>
 23f986c:	b002      	add	sp, #8
 23f986e:	bd10      	pop	{r4, pc}

023f9870 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
 23f9870:	b513      	push	{r0, r1, r4, lr}
 23f9872:	4604      	mov	r4, r0
    if (!lock())
 23f9874:	7800      	ldrb	r0, [r0, #0]
 23f9876:	f7ff ffc6 	bl	23f9806 <_ZN8SPIClass4lockEv.isra.0>
 23f987a:	b948      	cbnz	r0, 23f9890 <_ZN8SPIClass3endEv+0x20>
 23f987c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
 23f987e:	9001      	str	r0, [sp, #4]
 23f9880:	f7fe f908 	bl	23f7a94 <hal_spi_end>
        unlock();
 23f9884:	9801      	ldr	r0, [sp, #4]
    }
}
 23f9886:	b002      	add	sp, #8
 23f9888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f988c:	f7ff bfb8 	b.w	23f9800 <_ZN8SPIClass6unlockEv.isra.0>
 23f9890:	b002      	add	sp, #8
 23f9892:	bd10      	pop	{r4, pc}

023f9894 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
 23f9894:	7800      	ldrb	r0, [r0, #0]
 23f9896:	f7ff bfb3 	b.w	23f9800 <_ZN8SPIClass6unlockEv.isra.0>
	...

023f989c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 23f989c:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 23f989e:	2400      	movs	r4, #0
 23f98a0:	0840      	lsrs	r0, r0, #1
 23f98a2:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23f98a4:	6818      	ldr	r0, [r3, #0]
 23f98a6:	b2e5      	uxtb	r5, r4
 23f98a8:	4288      	cmp	r0, r1
 23f98aa:	d906      	bls.n	23f98ba <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 23f98ac:	3401      	adds	r4, #1
 23f98ae:	2c08      	cmp	r4, #8
 23f98b0:	d002      	beq.n	23f98b8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 23f98b2:	0840      	lsrs	r0, r0, #1
 23f98b4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23f98b6:	e7f5      	b.n	23f98a4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 23f98b8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 23f98ba:	4b02      	ldr	r3, [pc, #8]	; (23f98c4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 23f98bc:	5d5b      	ldrb	r3, [r3, r5]
 23f98be:	7013      	strb	r3, [r2, #0]
}
 23f98c0:	bd30      	pop	{r4, r5, pc}
 23f98c2:	bf00      	nop
 23f98c4:	023ffb1c 	.word	0x023ffb1c

023f98c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 23f98c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f98cc:	4606      	mov	r6, r0
 23f98ce:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
 23f98d0:	7800      	ldrb	r0, [r0, #0]
{
 23f98d2:	460c      	mov	r4, r1
    CHECK(lock());
 23f98d4:	f7ff ff97 	bl	23f9806 <_ZN8SPIClass4lockEv.isra.0>
 23f98d8:	2800      	cmp	r0, #0
 23f98da:	db1b      	blt.n	23f9914 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23f98dc:	2214      	movs	r2, #20
 23f98de:	2100      	movs	r1, #0
 23f98e0:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 23f98e2:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 23f98e4:	f003 faaf 	bl	23fce46 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23f98e8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23f98ea:	2200      	movs	r2, #0
 23f98ec:	4628      	mov	r0, r5
 23f98ee:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 23f98f0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 23f98f4:	f7fe f906 	bl	23f7b04 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 23f98f8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 23f98fc:	b113      	cbz	r3, 23f9904 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
 23f98fe:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 23f9902:	b155      	cbz	r5, 23f991a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
 23f9904:	2700      	movs	r7, #0
 23f9906:	2501      	movs	r5, #1
 23f9908:	46b9      	mov	r9, r7
 23f990a:	46b8      	mov	r8, r7
    if (default_ && other.default_)
 23f990c:	7923      	ldrb	r3, [r4, #4]
 23f990e:	b15d      	cbz	r5, 23f9928 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
 23f9910:	b1c3      	cbz	r3, 23f9944 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
 23f9912:	2000      	movs	r0, #0
}
 23f9914:	b00f      	add	sp, #60	; 0x3c
 23f9916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 23f991a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 23f991e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 23f9922:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 23f9926:	e7f1      	b.n	23f990c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
 23f9928:	2b00      	cmp	r3, #0
 23f992a:	d135      	bne.n	23f9998 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
 23f992c:	68a3      	ldr	r3, [r4, #8]
 23f992e:	4543      	cmp	r3, r8
 23f9930:	d108      	bne.n	23f9944 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
 23f9932:	f88d 9020 	strb.w	r9, [sp, #32]
 23f9936:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23f993a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23f993e:	89a3      	ldrh	r3, [r4, #12]
 23f9940:	429a      	cmp	r2, r3
 23f9942:	d0e6      	beq.n	23f9912 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
 23f9944:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23f9946:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 23f9948:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23f994c:	980a      	ldr	r0, [sp, #40]	; 0x28
 23f994e:	ab04      	add	r3, sp, #16
 23f9950:	f10d 020f 	add.w	r2, sp, #15
 23f9954:	f7ff ffa2 	bl	23f989c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
 23f9958:	7921      	ldrb	r1, [r4, #4]
 23f995a:	b985      	cbnz	r5, 23f997e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
 23f995c:	b989      	cbnz	r1, 23f9982 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23f995e:	68a3      	ldr	r3, [r4, #8]
 23f9960:	4543      	cmp	r3, r8
 23f9962:	d30e      	bcc.n	23f9982 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
 23f9964:	f88d 9020 	strb.w	r9, [sp, #32]
 23f9968:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23f996c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23f9970:	89a3      	ldrh	r3, [r4, #12]
 23f9972:	429a      	cmp	r2, r3
 23f9974:	d105      	bne.n	23f9982 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 23f9976:	9b04      	ldr	r3, [sp, #16]
 23f9978:	4543      	cmp	r3, r8
 23f997a:	d102      	bne.n	23f9982 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23f997c:	e7c9      	b.n	23f9912 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
 23f997e:	2900      	cmp	r1, #0
 23f9980:	d1f9      	bne.n	23f9976 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 23f9982:	2300      	movs	r3, #0
 23f9984:	9301      	str	r3, [sp, #4]
 23f9986:	7b63      	ldrb	r3, [r4, #13]
 23f9988:	f89d 200f 	ldrb.w	r2, [sp, #15]
 23f998c:	9300      	str	r3, [sp, #0]
 23f998e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 23f9990:	7830      	ldrb	r0, [r6, #0]
 23f9992:	f7fe f8e1 	bl	23f7b58 <hal_spi_set_settings>
 23f9996:	e7bc      	b.n	23f9912 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
 23f9998:	462b      	mov	r3, r5
 23f999a:	462a      	mov	r2, r5
 23f999c:	2101      	movs	r1, #1
 23f999e:	e9cd 5500 	strd	r5, r5, [sp]
 23f99a2:	e7f5      	b.n	23f9990 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

023f99a4 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 23f99a4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 23f99a6:	7800      	ldrb	r0, [r0, #0]
 23f99a8:	f7fe f882 	bl	23f7ab0 <hal_spi_transfer>
}
 23f99ac:	b2c0      	uxtb	r0, r0
 23f99ae:	bd08      	pop	{r3, pc}

023f99b0 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 23f99b0:	b530      	push	{r4, r5, lr}
 23f99b2:	b087      	sub	sp, #28
 23f99b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 23f99b6:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 23f99b8:	9500      	str	r5, [sp, #0]
 23f99ba:	7800      	ldrb	r0, [r0, #0]
 23f99bc:	f7fe f8b0 	bl	23f7b20 <hal_spi_transfer_dma>
    if (user_callback == NULL)
 23f99c0:	b93d      	cbnz	r5, 23f99d2 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 23f99c2:	7820      	ldrb	r0, [r4, #0]
 23f99c4:	a902      	add	r1, sp, #8
 23f99c6:	f7fe f8b9 	bl	23f7b3c <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 23f99ca:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23f99ce:	07db      	lsls	r3, r3, #31
 23f99d0:	d4f7      	bmi.n	23f99c2 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
 23f99d2:	b007      	add	sp, #28
 23f99d4:	bd30      	pop	{r4, r5, pc}

023f99d6 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
 23f99d6:	4770      	bx	lr

023f99d8 <_ZN8SPIClass15detachInterruptEv>:
 23f99d8:	4770      	bx	lr

023f99da <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 23f99da:	b510      	push	{r4, lr}
 23f99dc:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23f99de:	f7fd fe45 	bl	23f766c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 23f99e2:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 23f99e4:	6823      	ldr	r3, [r4, #0]
 23f99e6:	4620      	mov	r0, r4
 23f99e8:	695b      	ldr	r3, [r3, #20]
 23f99ea:	4798      	blx	r3
    if (c >= 0) return c;
 23f99ec:	2800      	cmp	r0, #0
 23f99ee:	da08      	bge.n	23f9a02 <_ZN6Stream9timedReadEv+0x28>
 23f99f0:	f7fd fe3c 	bl	23f766c <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
 23f99f4:	68e3      	ldr	r3, [r4, #12]
 23f99f6:	1ac0      	subs	r0, r0, r3
 23f99f8:	68a3      	ldr	r3, [r4, #8]
 23f99fa:	4298      	cmp	r0, r3
 23f99fc:	d3f2      	bcc.n	23f99e4 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 23f99fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23f9a02:	bd10      	pop	{r4, pc}

023f9a04 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 23f9a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f9a08:	4607      	mov	r7, r0
 23f9a0a:	460c      	mov	r4, r1
 23f9a0c:	460d      	mov	r5, r1
 23f9a0e:	188e      	adds	r6, r1, r2
  size_t count = 0;
  while (count < length) {
 23f9a10:	42b5      	cmp	r5, r6
 23f9a12:	eba5 0804 	sub.w	r8, r5, r4
 23f9a16:	d007      	beq.n	23f9a28 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 23f9a18:	4638      	mov	r0, r7
 23f9a1a:	f7ff ffde 	bl	23f99da <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 23f9a1e:	1e03      	subs	r3, r0, #0
 23f9a20:	db02      	blt.n	23f9a28 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
 23f9a22:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
 23f9a26:	e7f3      	b.n	23f9a10 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
 23f9a28:	4640      	mov	r0, r8
 23f9a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f9a2e <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
 23f9a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f9a32:	4607      	mov	r7, r0
 23f9a34:	4688      	mov	r8, r1
 23f9a36:	4616      	mov	r6, r2
  if (length < 1) return 0;
 23f9a38:	461d      	mov	r5, r3
 23f9a3a:	b173      	cbz	r3, 23f9a5a <_ZN6Stream14readBytesUntilEcPcj+0x2c>
  size_t index = 0;
 23f9a3c:	2400      	movs	r4, #0
  while (index < length) {
    int c = timedRead();
 23f9a3e:	4638      	mov	r0, r7
 23f9a40:	f7ff ffcb 	bl	23f99da <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
 23f9a44:	1e03      	subs	r3, r0, #0
 23f9a46:	db05      	blt.n	23f9a54 <_ZN6Stream14readBytesUntilEcPcj+0x26>
 23f9a48:	4543      	cmp	r3, r8
 23f9a4a:	d003      	beq.n	23f9a54 <_ZN6Stream14readBytesUntilEcPcj+0x26>
    *buffer++ = (char)c;
 23f9a4c:	5533      	strb	r3, [r6, r4]
    index++;
 23f9a4e:	3401      	adds	r4, #1
  while (index < length) {
 23f9a50:	42a5      	cmp	r5, r4
 23f9a52:	d1f4      	bne.n	23f9a3e <_ZN6Stream14readBytesUntilEcPcj+0x10>
  }
  return index; // return number of characters, not including null terminator
}
 23f9a54:	4620      	mov	r0, r4
 23f9a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (length < 1) return 0;
 23f9a5a:	461c      	mov	r4, r3
 23f9a5c:	e7fa      	b.n	23f9a54 <_ZN6Stream14readBytesUntilEcPcj+0x26>

023f9a5e <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
 23f9a5e:	b510      	push	{r4, lr}
 23f9a60:	4604      	mov	r4, r0
{
    free(buffer);
 23f9a62:	6800      	ldr	r0, [r0, #0]
 23f9a64:	f7fe fbb2 	bl	23f81cc <free>
}
 23f9a68:	4620      	mov	r0, r4
 23f9a6a:	bd10      	pop	{r4, pc}

023f9a6c <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
 23f9a6c:	b510      	push	{r4, lr}
 23f9a6e:	4604      	mov	r4, r0
    if (buffer) {
 23f9a70:	6800      	ldr	r0, [r0, #0]
 23f9a72:	b108      	cbz	r0, 23f9a78 <_ZN6String10invalidateEv+0xc>
        free(buffer);
 23f9a74:	f7fe fbaa 	bl	23f81cc <free>
    }
    buffer = nullptr;
 23f9a78:	2300      	movs	r3, #0
    capacity_ = len = 0;
 23f9a7a:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
 23f9a7e:	6023      	str	r3, [r4, #0]
}
 23f9a80:	bd10      	pop	{r4, pc}

023f9a82 <_ZN6String12changeBufferEj>:
    len = size;
    return true;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23f9a82:	b538      	push	{r3, r4, r5, lr}
 23f9a84:	4604      	mov	r4, r0
 23f9a86:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23f9a88:	6800      	ldr	r0, [r0, #0]
 23f9a8a:	3101      	adds	r1, #1
 23f9a8c:	f7fe fbac 	bl	23f81e8 <realloc>
    if (newbuffer) {
 23f9a90:	b110      	cbz	r0, 23f9a98 <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
 23f9a92:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
 23f9a96:	2001      	movs	r0, #1
    }
    return 0;
}
 23f9a98:	bd38      	pop	{r3, r4, r5, pc}

023f9a9a <_ZN6String7reserveEj>:
{
 23f9a9a:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
 23f9a9c:	6803      	ldr	r3, [r0, #0]
{
 23f9a9e:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
 23f9aa0:	b123      	cbz	r3, 23f9aac <_ZN6String7reserveEj+0x12>
 23f9aa2:	6843      	ldr	r3, [r0, #4]
 23f9aa4:	428b      	cmp	r3, r1
 23f9aa6:	d301      	bcc.n	23f9aac <_ZN6String7reserveEj+0x12>
 23f9aa8:	2001      	movs	r0, #1
}
 23f9aaa:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
 23f9aac:	4620      	mov	r0, r4
 23f9aae:	f7ff ffe8 	bl	23f9a82 <_ZN6String12changeBufferEj>
 23f9ab2:	2800      	cmp	r0, #0
 23f9ab4:	d0f9      	beq.n	23f9aaa <_ZN6String7reserveEj+0x10>
        if (len == 0) {
 23f9ab6:	68a3      	ldr	r3, [r4, #8]
 23f9ab8:	2b00      	cmp	r3, #0
 23f9aba:	d1f5      	bne.n	23f9aa8 <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
 23f9abc:	6822      	ldr	r2, [r4, #0]
 23f9abe:	7013      	strb	r3, [r2, #0]
 23f9ac0:	e7f2      	b.n	23f9aa8 <_ZN6String7reserveEj+0xe>

023f9ac2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23f9ac2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f9ac4:	460d      	mov	r5, r1
    if (!reserve(length)) {
 23f9ac6:	4611      	mov	r1, r2
 23f9ac8:	9201      	str	r2, [sp, #4]
{
 23f9aca:	4604      	mov	r4, r0
    if (!reserve(length)) {
 23f9acc:	f7ff ffe5 	bl	23f9a9a <_ZN6String7reserveEj>
 23f9ad0:	9a01      	ldr	r2, [sp, #4]
 23f9ad2:	b928      	cbnz	r0, 23f9ae0 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
 23f9ad4:	4620      	mov	r0, r4
 23f9ad6:	f7ff ffc9 	bl	23f9a6c <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
 23f9ada:	4620      	mov	r0, r4
 23f9adc:	b003      	add	sp, #12
 23f9ade:	bd30      	pop	{r4, r5, pc}
    memcpy(buffer, cstr, length);
 23f9ae0:	4629      	mov	r1, r5
    len = length;
 23f9ae2:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
 23f9ae4:	6820      	ldr	r0, [r4, #0]
 23f9ae6:	f003 f9a1 	bl	23fce2c <memcpy>
    buffer[len] = 0;
 23f9aea:	2100      	movs	r1, #0
 23f9aec:	6822      	ldr	r2, [r4, #0]
 23f9aee:	68a3      	ldr	r3, [r4, #8]
 23f9af0:	54d1      	strb	r1, [r2, r3]
    return *this;
 23f9af2:	e7f2      	b.n	23f9ada <_ZN6String4copyEPKcj+0x18>

023f9af4 <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
 23f9af4:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23f9af6:	b513      	push	{r0, r1, r4, lr}
 23f9af8:	4604      	mov	r4, r0
    capacity_ = 0;
 23f9afa:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23f9afe:	6083      	str	r3, [r0, #8]
    flags = 0;
 23f9b00:	7303      	strb	r3, [r0, #12]
    if (cstr) {
 23f9b02:	b141      	cbz	r1, 23f9b16 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
 23f9b04:	4608      	mov	r0, r1
 23f9b06:	9101      	str	r1, [sp, #4]
 23f9b08:	f7ed fe8e 	bl	23e7828 <strlen>
 23f9b0c:	9901      	ldr	r1, [sp, #4]
 23f9b0e:	4602      	mov	r2, r0
 23f9b10:	4620      	mov	r0, r4
 23f9b12:	f7ff ffd6 	bl	23f9ac2 <_ZN6String4copyEPKcj>
}
 23f9b16:	4620      	mov	r0, r4
 23f9b18:	b002      	add	sp, #8
 23f9b1a:	bd10      	pop	{r4, pc}

023f9b1c <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
 23f9b1c:	4288      	cmp	r0, r1
{
 23f9b1e:	b510      	push	{r4, lr}
 23f9b20:	4604      	mov	r4, r0
    if (this == &rhs) {
 23f9b22:	d005      	beq.n	23f9b30 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
 23f9b24:	680b      	ldr	r3, [r1, #0]
 23f9b26:	b12b      	cbz	r3, 23f9b34 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
 23f9b28:	688a      	ldr	r2, [r1, #8]
 23f9b2a:	4619      	mov	r1, r3
 23f9b2c:	f7ff ffc9 	bl	23f9ac2 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
 23f9b30:	4620      	mov	r0, r4
 23f9b32:	bd10      	pop	{r4, pc}
        invalidate();
 23f9b34:	f7ff ff9a 	bl	23f9a6c <_ZN6String10invalidateEv>
 23f9b38:	e7fa      	b.n	23f9b30 <_ZN6StringaSERKS_+0x14>

023f9b3a <_ZN6StringC1ERKS_>:
    buffer = nullptr;
 23f9b3a:	2300      	movs	r3, #0
String::String(const String &value)
 23f9b3c:	b510      	push	{r4, lr}
 23f9b3e:	4604      	mov	r4, r0
    capacity_ = 0;
 23f9b40:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23f9b44:	6083      	str	r3, [r0, #8]
    flags = 0;
 23f9b46:	7303      	strb	r3, [r0, #12]
    *this = value;
 23f9b48:	f7ff ffe8 	bl	23f9b1c <_ZN6StringaSERKS_>
}
 23f9b4c:	4620      	mov	r0, r4
 23f9b4e:	bd10      	pop	{r4, pc}

023f9b50 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 23f9b50:	b507      	push	{r0, r1, r2, lr}
 23f9b52:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 23f9b54:	2100      	movs	r1, #0
{
 23f9b56:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 23f9b58:	9100      	str	r1, [sp, #0]
 23f9b5a:	2001      	movs	r0, #1
 23f9b5c:	218c      	movs	r1, #140	; 0x8c
 23f9b5e:	f7fe f9bb 	bl	23f7ed8 <system_reset>
}
 23f9b62:	b003      	add	sp, #12
 23f9b64:	f85d fb04 	ldr.w	pc, [sp], #4

023f9b68 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 23f9b68:	4601      	mov	r1, r0
    reset(0, flags);
 23f9b6a:	2000      	movs	r0, #0
 23f9b6c:	f7ff bff0 	b.w	23f9b50 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

023f9b70 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 23f9b70:	2000      	movs	r0, #0
 23f9b72:	f7ff bff9 	b.w	23f9b68 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

023f9b76 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
 23f9b76:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
 23f9b78:	2420      	movs	r4, #32
{
 23f9b7a:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
 23f9b7c:	4622      	mov	r2, r4
 23f9b7e:	2100      	movs	r1, #0
 23f9b80:	4668      	mov	r0, sp
 23f9b82:	f003 f960 	bl	23fce46 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
 23f9b86:	2100      	movs	r1, #0
 23f9b88:	4668      	mov	r0, sp
    info.size = sizeof(info);
 23f9b8a:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
 23f9b8e:	f7fd fd35 	bl	23f75fc <HAL_Core_Runtime_Info>
    return info.freeheap;
}
 23f9b92:	9801      	ldr	r0, [sp, #4]
 23f9b94:	b008      	add	sp, #32
 23f9b96:	bd10      	pop	{r4, pc}

023f9b98 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23f9b98:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23f9b9a:	2000      	movs	r0, #0
 23f9b9c:	4b04      	ldr	r3, [pc, #16]	; (23f9bb0 <_GLOBAL__sub_I_System+0x18>)
 23f9b9e:	601a      	str	r2, [r3, #0]
 23f9ba0:	4b04      	ldr	r3, [pc, #16]	; (23f9bb4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23f9ba2:	4a05      	ldr	r2, [pc, #20]	; (23f9bb8 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23f9ba4:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23f9ba8:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23f9baa:	f7fe b909 	b.w	23f7dc0 <set_system_mode>
 23f9bae:	bf00      	nop
 23f9bb0:	1007af38 	.word	0x1007af38
 23f9bb4:	1007af2c 	.word	0x1007af2c
 23f9bb8:	ffff0000 	.word	0xffff0000

023f9bbc <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 23f9bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 23f9bc0:	4a15      	ldr	r2, [pc, #84]	; (23f9c18 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 23f9bc2:	f8df 8060 	ldr.w	r8, [pc, #96]	; 23f9c24 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 23f9bc6:	e9d2 6300 	ldrd	r6, r3, [r2]
 23f9bca:	1980      	adds	r0, r0, r6
 23f9bcc:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
 23f9bd0:	4b12      	ldr	r3, [pc, #72]	; (23f9c1c <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 23f9bd2:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 23f9bd4:	e9d3 6700 	ldrd	r6, r7, [r3]
 23f9bd8:	1986      	adds	r6, r0, r6
 23f9bda:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
 23f9bde:	e9d8 2300 	ldrd	r2, r3, [r8]
 23f9be2:	42bb      	cmp	r3, r7
 23f9be4:	bf08      	it	eq
 23f9be6:	42b2      	cmpeq	r2, r6
 23f9be8:	d013      	beq.n	23f9c12 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 23f9bea:	a903      	add	r1, sp, #12
 23f9bec:	4668      	mov	r0, sp
 23f9bee:	e9cd 6700 	strd	r6, r7, [sp]
 23f9bf2:	f7fe fb69 	bl	23f82c8 <localtime_r>
	calendar_time.tm_year += 1900;
 23f9bf6:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23f9bf8:	4d09      	ldr	r5, [pc, #36]	; (23f9c20 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 23f9bfa:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23f9bfe:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 23f9c00:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23f9c02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f9c04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f9c06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f9c08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 23f9c0a:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23f9c0e:	6823      	ldr	r3, [r4, #0]
 23f9c10:	602b      	str	r3, [r5, #0]
    }
}
 23f9c12:	b00c      	add	sp, #48	; 0x30
 23f9c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f9c18:	1007af70 	.word	0x1007af70
 23f9c1c:	1007af68 	.word	0x1007af68
 23f9c20:	1007af40 	.word	0x1007af40
 23f9c24:	1007af78 	.word	0x1007af78

023f9c28 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
 23f9c28:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
 23f9c2a:	2000      	movs	r0, #0
 23f9c2c:	f7fe f9c4 	bl	23f7fb8 <spark_sync_time_pending>
 23f9c30:	b128      	cbz	r0, 23f9c3e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23f9c32:	f7fe f989 	bl	23f7f48 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 23f9c36:	f080 0001 	eor.w	r0, r0, #1
 23f9c3a:	b2c0      	uxtb	r0, r0
    }
 23f9c3c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 23f9c3e:	2001      	movs	r0, #1
 23f9c40:	e7fc      	b.n	23f9c3c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

023f9c44 <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
 23f9c44:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f9c46:	f7ff ffb9 	bl	23f9bbc <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
 23f9c4a:	4b01      	ldr	r3, [pc, #4]	; (23f9c50 <_ZN9TimeClass4hourEx+0xc>)
 23f9c4c:	6898      	ldr	r0, [r3, #8]
 23f9c4e:	bd08      	pop	{r3, pc}
 23f9c50:	1007af40 	.word	0x1007af40

023f9c54 <_ZN9TimeClass6minuteEx>:
	return minute(now());
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
 23f9c54:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f9c56:	f7ff ffb1 	bl	23f9bbc <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_min;
}
 23f9c5a:	4b01      	ldr	r3, [pc, #4]	; (23f9c60 <_ZN9TimeClass6minuteEx+0xc>)
 23f9c5c:	6858      	ldr	r0, [r3, #4]
 23f9c5e:	bd08      	pop	{r3, pc}
 23f9c60:	1007af40 	.word	0x1007af40

023f9c64 <_ZN9TimeClass6secondEx>:
	return second(now());
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
 23f9c64:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f9c66:	f7ff ffa9 	bl	23f9bbc <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_sec;
}
 23f9c6a:	4b01      	ldr	r3, [pc, #4]	; (23f9c70 <_ZN9TimeClass6secondEx+0xc>)
 23f9c6c:	6818      	ldr	r0, [r3, #0]
 23f9c6e:	bd08      	pop	{r3, pc}
 23f9c70:	1007af40 	.word	0x1007af40

023f9c74 <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
 23f9c74:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f9c76:	f7ff ffa1 	bl	23f9bbc <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
 23f9c7a:	4b01      	ldr	r3, [pc, #4]	; (23f9c80 <_ZN9TimeClass3dayEx+0xc>)
 23f9c7c:	68d8      	ldr	r0, [r3, #12]
 23f9c7e:	bd08      	pop	{r3, pc}
 23f9c80:	1007af40 	.word	0x1007af40

023f9c84 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 23f9c84:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f9c86:	f7ff ff99 	bl	23f9bbc <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 23f9c8a:	4b02      	ldr	r3, [pc, #8]	; (23f9c94 <_ZN9TimeClass5monthEx+0x10>)
 23f9c8c:	6918      	ldr	r0, [r3, #16]
}
 23f9c8e:	3001      	adds	r0, #1
 23f9c90:	bd08      	pop	{r3, pc}
 23f9c92:	bf00      	nop
 23f9c94:	1007af40 	.word	0x1007af40

023f9c98 <_ZN9TimeClass4yearEx>:
	return year(now());
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
 23f9c98:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f9c9a:	f7ff ff8f 	bl	23f9bbc <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_year;
}
 23f9c9e:	4b01      	ldr	r3, [pc, #4]	; (23f9ca4 <_ZN9TimeClass4yearEx+0xc>)
 23f9ca0:	6958      	ldr	r0, [r3, #20]
 23f9ca2:	bd08      	pop	{r3, pc}
 23f9ca4:	1007af40 	.word	0x1007af40

023f9ca8 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
 23f9ca8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f9caa:	4602      	mov	r2, r0
 23f9cac:	460b      	mov	r3, r1
    struct timeval tv = {
 23f9cae:	2100      	movs	r1, #0
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
 23f9cb0:	4668      	mov	r0, sp
    };
 23f9cb2:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
 23f9cb6:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
 23f9cba:	f7fd fd47 	bl	23f774c <hal_rtc_set_time>
 23f9cbe:	4602      	mov	r2, r0
 23f9cc0:	b910      	cbnz	r0, 23f9cc8 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
 23f9cc2:	4601      	mov	r1, r0
 23f9cc4:	f7fe f8de 	bl	23f7e84 <system_notify_time_changed>
    }
}
 23f9cc8:	b005      	add	sp, #20
 23f9cca:	f85d fb04 	ldr.w	pc, [sp], #4

023f9cce <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 23f9cce:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 23f9cd0:	2000      	movs	r0, #0
 23f9cd2:	f7fd fd11 	bl	23f76f8 <hal_rtc_time_is_valid>
    if (rtcstate)
 23f9cd6:	4604      	mov	r4, r0
 23f9cd8:	b9a0      	cbnz	r0, 23f9d04 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 23f9cda:	f7fe f863 	bl	23f7da4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 23f9cde:	2801      	cmp	r0, #1
 23f9ce0:	d110      	bne.n	23f9d04 <_ZN9TimeClass7isValidEv+0x36>
 23f9ce2:	4620      	mov	r0, r4
 23f9ce4:	f7fe f8c0 	bl	23f7e68 <system_thread_get_state>
 23f9ce8:	b960      	cbnz	r0, 23f9d04 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 23f9cea:	f7ff ff9d 	bl	23f9c28 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 23f9cee:	b910      	cbnz	r0, 23f9cf6 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 23f9cf0:	f7fe f90e 	bl	23f7f10 <spark_process>
        while (_while() && !_condition()) {
 23f9cf4:	e7f9      	b.n	23f9cea <_ZN9TimeClass7isValidEv+0x1c>
 23f9cf6:	f7ff ff97 	bl	23f9c28 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 23f9cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 23f9cfe:	2000      	movs	r0, #0
 23f9d00:	f7fd bcfa 	b.w	23f76f8 <hal_rtc_time_is_valid>
}
 23f9d04:	4620      	mov	r0, r4
 23f9d06:	bd10      	pop	{r4, pc}

023f9d08 <_ZN9TimeClass3nowEv>:
{
 23f9d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 23f9d0a:	f7ff ffe0 	bl	23f9cce <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 23f9d0e:	2210      	movs	r2, #16
 23f9d10:	2100      	movs	r1, #0
 23f9d12:	4668      	mov	r0, sp
 23f9d14:	f003 f897 	bl	23fce46 <memset>
    hal_rtc_get_time(&tv, nullptr);
 23f9d18:	2100      	movs	r1, #0
 23f9d1a:	4668      	mov	r0, sp
 23f9d1c:	f7fd fd08 	bl	23f7730 <hal_rtc_get_time>
}
 23f9d20:	9800      	ldr	r0, [sp, #0]
 23f9d22:	b005      	add	sp, #20
 23f9d24:	f85d fb04 	ldr.w	pc, [sp], #4

023f9d28 <_ZN9TimeClass4hourEv>:
{
 23f9d28:	b508      	push	{r3, lr}
	return hour(now());
 23f9d2a:	f7ff ffed 	bl	23f9d08 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23f9d2e:	17c1      	asrs	r1, r0, #31
 23f9d30:	f7ff ff44 	bl	23f9bbc <_ZL22Refresh_UnixTime_Cachex>
}
 23f9d34:	4b01      	ldr	r3, [pc, #4]	; (23f9d3c <_ZN9TimeClass4hourEv+0x14>)
 23f9d36:	6898      	ldr	r0, [r3, #8]
 23f9d38:	bd08      	pop	{r3, pc}
 23f9d3a:	bf00      	nop
 23f9d3c:	1007af40 	.word	0x1007af40

023f9d40 <_ZN9TimeClass6minuteEv>:
{
 23f9d40:	b508      	push	{r3, lr}
	return minute(now());
 23f9d42:	f7ff ffe1 	bl	23f9d08 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23f9d46:	17c1      	asrs	r1, r0, #31
 23f9d48:	f7ff ff38 	bl	23f9bbc <_ZL22Refresh_UnixTime_Cachex>
}
 23f9d4c:	4b01      	ldr	r3, [pc, #4]	; (23f9d54 <_ZN9TimeClass6minuteEv+0x14>)
 23f9d4e:	6858      	ldr	r0, [r3, #4]
 23f9d50:	bd08      	pop	{r3, pc}
 23f9d52:	bf00      	nop
 23f9d54:	1007af40 	.word	0x1007af40

023f9d58 <_ZN9TimeClass6secondEv>:
{
 23f9d58:	b508      	push	{r3, lr}
	return second(now());
 23f9d5a:	f7ff ffd5 	bl	23f9d08 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23f9d5e:	17c1      	asrs	r1, r0, #31
 23f9d60:	f7ff ff2c 	bl	23f9bbc <_ZL22Refresh_UnixTime_Cachex>
}
 23f9d64:	4b01      	ldr	r3, [pc, #4]	; (23f9d6c <_ZN9TimeClass6secondEv+0x14>)
 23f9d66:	6818      	ldr	r0, [r3, #0]
 23f9d68:	bd08      	pop	{r3, pc}
 23f9d6a:	bf00      	nop
 23f9d6c:	1007af40 	.word	0x1007af40

023f9d70 <_ZN9TimeClass3dayEv>:
{
 23f9d70:	b508      	push	{r3, lr}
	return day(now());
 23f9d72:	f7ff ffc9 	bl	23f9d08 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23f9d76:	17c1      	asrs	r1, r0, #31
 23f9d78:	f7ff ff20 	bl	23f9bbc <_ZL22Refresh_UnixTime_Cachex>
}
 23f9d7c:	4b01      	ldr	r3, [pc, #4]	; (23f9d84 <_ZN9TimeClass3dayEv+0x14>)
 23f9d7e:	68d8      	ldr	r0, [r3, #12]
 23f9d80:	bd08      	pop	{r3, pc}
 23f9d82:	bf00      	nop
 23f9d84:	1007af40 	.word	0x1007af40

023f9d88 <_ZN9TimeClass5monthEv>:
{
 23f9d88:	b508      	push	{r3, lr}
	return month(now());
 23f9d8a:	f7ff ffbd 	bl	23f9d08 <_ZN9TimeClass3nowEv>
}
 23f9d8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 23f9d92:	17c1      	asrs	r1, r0, #31
 23f9d94:	f7ff bf76 	b.w	23f9c84 <_ZN9TimeClass5monthEx>

023f9d98 <_ZN9TimeClass4yearEv>:
{
 23f9d98:	b508      	push	{r3, lr}
	return year(now());
 23f9d9a:	f7ff ffb5 	bl	23f9d08 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23f9d9e:	17c1      	asrs	r1, r0, #31
 23f9da0:	f7ff ff0c 	bl	23f9bbc <_ZL22Refresh_UnixTime_Cachex>
}
 23f9da4:	4b01      	ldr	r3, [pc, #4]	; (23f9dac <_ZN9TimeClass4yearEv+0x14>)
 23f9da6:	6958      	ldr	r0, [r3, #20]
 23f9da8:	bd08      	pop	{r3, pc}
 23f9daa:	bf00      	nop
 23f9dac:	1007af40 	.word	0x1007af40

023f9db0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23f9db0:	4b02      	ldr	r3, [pc, #8]	; (23f9dbc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23f9db2:	681a      	ldr	r2, [r3, #0]
 23f9db4:	4b02      	ldr	r3, [pc, #8]	; (23f9dc0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23f9db6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23f9db8:	4770      	bx	lr
 23f9dba:	bf00      	nop
 23f9dbc:	1006a274 	.word	0x1006a274
 23f9dc0:	1007af3c 	.word	0x1007af3c

023f9dc4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23f9dc4:	4770      	bx	lr

023f9dc6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23f9dc6:	7441      	strb	r1, [r0, #17]
}
 23f9dc8:	4770      	bx	lr

023f9dca <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23f9dca:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23f9dcc:	7c00      	ldrb	r0, [r0, #16]
 23f9dce:	f7fd ff41 	bl	23f7c54 <hal_usart_available_data_for_write>
}
 23f9dd2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f9dd6:	bd08      	pop	{r3, pc}

023f9dd8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23f9dd8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23f9dda:	7c00      	ldrb	r0, [r0, #16]
 23f9ddc:	f7fd fef4 	bl	23f7bc8 <hal_usart_available>
}
 23f9de0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f9de4:	bd08      	pop	{r3, pc}

023f9de6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23f9de6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23f9de8:	7c00      	ldrb	r0, [r0, #16]
 23f9dea:	f7fd ff09 	bl	23f7c00 <hal_usart_peek>
}
 23f9dee:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f9df2:	bd08      	pop	{r3, pc}

023f9df4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23f9df4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23f9df6:	7c00      	ldrb	r0, [r0, #16]
 23f9df8:	f7fd fef4 	bl	23f7be4 <hal_usart_read>
}
 23f9dfc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f9e00:	bd08      	pop	{r3, pc}

023f9e02 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23f9e02:	7c00      	ldrb	r0, [r0, #16]
 23f9e04:	f7fd bf0a 	b.w	23f7c1c <hal_usart_flush>

023f9e08 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23f9e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f9e0a:	7c45      	ldrb	r5, [r0, #17]
{
 23f9e0c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f9e0e:	b12d      	cbz	r5, 23f9e1c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23f9e10:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23f9e12:	b003      	add	sp, #12
 23f9e14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23f9e18:	f7fd bec8 	b.w	23f7bac <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f9e1c:	7c00      	ldrb	r0, [r0, #16]
 23f9e1e:	9101      	str	r1, [sp, #4]
 23f9e20:	f7fd ff18 	bl	23f7c54 <hal_usart_available_data_for_write>
 23f9e24:	2800      	cmp	r0, #0
 23f9e26:	9901      	ldr	r1, [sp, #4]
 23f9e28:	dcf2      	bgt.n	23f9e10 <_ZN11USARTSerial5writeEh+0x8>
}
 23f9e2a:	4628      	mov	r0, r5
 23f9e2c:	b003      	add	sp, #12
 23f9e2e:	bd30      	pop	{r4, r5, pc}

023f9e30 <_ZN11USARTSerialD0Ev>:
 23f9e30:	b510      	push	{r4, lr}
 23f9e32:	4604      	mov	r4, r0
 23f9e34:	2114      	movs	r1, #20
 23f9e36:	f7ed fd20 	bl	23e787a <_ZdlPvj>
 23f9e3a:	4620      	mov	r0, r4
 23f9e3c:	bd10      	pop	{r4, pc}
	...

023f9e40 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23f9e40:	b510      	push	{r4, lr}
 23f9e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f9e46:	4604      	mov	r4, r0
 23f9e48:	4608      	mov	r0, r1
 23f9e4a:	4611      	mov	r1, r2
 23f9e4c:	2200      	movs	r2, #0
 23f9e4e:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23f9e52:	4b04      	ldr	r3, [pc, #16]	; (23f9e64 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23f9e54:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23f9e56:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23f9e58:	2301      	movs	r3, #1
 23f9e5a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23f9e5c:	f7fd ff08 	bl	23f7c70 <hal_usart_init_ex>
}
 23f9e60:	4620      	mov	r0, r4
 23f9e62:	bd10      	pop	{r4, pc}
 23f9e64:	023ffb48 	.word	0x023ffb48

023f9e68 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23f9e68:	7c00      	ldrb	r0, [r0, #16]
 23f9e6a:	f7fd bee5 	b.w	23f7c38 <hal_usart_is_enabled>

023f9e6e <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23f9e6e:	7441      	strb	r1, [r0, #17]
}
 23f9e70:	4770      	bx	lr

023f9e72 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23f9e72:	4770      	bx	lr

023f9e74 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23f9e74:	4770      	bx	lr

023f9e76 <_ZN9USBSerial4readEv>:
{
 23f9e76:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23f9e78:	2100      	movs	r1, #0
 23f9e7a:	7c00      	ldrb	r0, [r0, #16]
 23f9e7c:	f7fd ff3e 	bl	23f7cfc <HAL_USB_USART_Receive_Data>
}
 23f9e80:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f9e84:	bd08      	pop	{r3, pc}

023f9e86 <_ZN9USBSerial4peekEv>:
{
 23f9e86:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23f9e88:	2101      	movs	r1, #1
 23f9e8a:	7c00      	ldrb	r0, [r0, #16]
 23f9e8c:	f7fd ff36 	bl	23f7cfc <HAL_USB_USART_Receive_Data>
}
 23f9e90:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f9e94:	bd08      	pop	{r3, pc}

023f9e96 <_ZN9USBSerial17availableForWriteEv>:
{
 23f9e96:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23f9e98:	7c00      	ldrb	r0, [r0, #16]
 23f9e9a:	f7fd ff21 	bl	23f7ce0 <HAL_USB_USART_Available_Data_For_Write>
}
 23f9e9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f9ea2:	bd08      	pop	{r3, pc}

023f9ea4 <_ZN9USBSerial9availableEv>:
{
 23f9ea4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23f9ea6:	7c00      	ldrb	r0, [r0, #16]
 23f9ea8:	f7fd ff0c 	bl	23f7cc4 <HAL_USB_USART_Available_Data>
}
 23f9eac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f9eb0:	bd08      	pop	{r3, pc}

023f9eb2 <_ZN9USBSerial5writeEh>:
{
 23f9eb2:	b513      	push	{r0, r1, r4, lr}
 23f9eb4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23f9eb6:	7c00      	ldrb	r0, [r0, #16]
{
 23f9eb8:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23f9eba:	f7fd ff11 	bl	23f7ce0 <HAL_USB_USART_Available_Data_For_Write>
 23f9ebe:	2800      	cmp	r0, #0
 23f9ec0:	9901      	ldr	r1, [sp, #4]
 23f9ec2:	dc01      	bgt.n	23f9ec8 <_ZN9USBSerial5writeEh+0x16>
 23f9ec4:	7c60      	ldrb	r0, [r4, #17]
 23f9ec6:	b120      	cbz	r0, 23f9ed2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23f9ec8:	7c20      	ldrb	r0, [r4, #16]
 23f9eca:	f7fd ff25 	bl	23f7d18 <HAL_USB_USART_Send_Data>
 23f9ece:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23f9ed2:	b002      	add	sp, #8
 23f9ed4:	bd10      	pop	{r4, pc}

023f9ed6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23f9ed6:	7c00      	ldrb	r0, [r0, #16]
 23f9ed8:	f7fd bf2c 	b.w	23f7d34 <HAL_USB_USART_Flush_Data>

023f9edc <_ZN9USBSerialD0Ev>:
 23f9edc:	b510      	push	{r4, lr}
 23f9ede:	4604      	mov	r4, r0
 23f9ee0:	2114      	movs	r1, #20
 23f9ee2:	f7ed fcca 	bl	23e787a <_ZdlPvj>
 23f9ee6:	4620      	mov	r0, r4
 23f9ee8:	bd10      	pop	{r4, pc}
	...

023f9eec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23f9eec:	b510      	push	{r4, lr}
 23f9eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f9ef2:	4604      	mov	r4, r0
 23f9ef4:	4608      	mov	r0, r1
 23f9ef6:	2100      	movs	r1, #0
 23f9ef8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23f9efc:	4b04      	ldr	r3, [pc, #16]	; (23f9f10 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23f9efe:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23f9f00:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23f9f02:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23f9f04:	4611      	mov	r1, r2
  _blocking = true;
 23f9f06:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23f9f08:	f7fd fec0 	bl	23f7c8c <HAL_USB_USART_Init>
}
 23f9f0c:	4620      	mov	r0, r4
 23f9f0e:	bd10      	pop	{r4, pc}
 23f9f10:	023ffb7c 	.word	0x023ffb7c

023f9f14 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23f9f14:	2200      	movs	r2, #0
 23f9f16:	7c00      	ldrb	r0, [r0, #16]
 23f9f18:	f7fd bec6 	b.w	23f7ca8 <HAL_USB_USART_Begin>

023f9f1c <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
 23f9f1c:	7c00      	ldrb	r0, [r0, #16]
 23f9f1e:	f7fd bf17 	b.w	23f7d50 <HAL_USB_USART_Is_Connected>

023f9f22 <_Z19acquireSerialBufferv>:
{
 23f9f22:	b510      	push	{r4, lr}
 23f9f24:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23f9f26:	2214      	movs	r2, #20
 23f9f28:	2100      	movs	r1, #0
 23f9f2a:	f002 ff8c 	bl	23fce46 <memset>
}
 23f9f2e:	4620      	mov	r0, r4
 23f9f30:	bd10      	pop	{r4, pc}
	...

023f9f34 <_Z16_fetch_usbserialv>:
{
 23f9f34:	b510      	push	{r4, lr}
 23f9f36:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23f9f38:	a803      	add	r0, sp, #12
 23f9f3a:	f7ff fff2 	bl	23f9f22 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23f9f3e:	4c0c      	ldr	r4, [pc, #48]	; (23f9f70 <_Z16_fetch_usbserialv+0x3c>)
 23f9f40:	e8d4 1f8f 	ldab	r1, [r4]
 23f9f44:	f011 0101 	ands.w	r1, r1, #1
 23f9f48:	d10f      	bne.n	23f9f6a <_Z16_fetch_usbserialv+0x36>
 23f9f4a:	4620      	mov	r0, r4
 23f9f4c:	9101      	str	r1, [sp, #4]
 23f9f4e:	f7fe f9c9 	bl	23f82e4 <__cxa_guard_acquire>
 23f9f52:	9901      	ldr	r1, [sp, #4]
 23f9f54:	b148      	cbz	r0, 23f9f6a <_Z16_fetch_usbserialv+0x36>
 23f9f56:	aa03      	add	r2, sp, #12
 23f9f58:	4806      	ldr	r0, [pc, #24]	; (23f9f74 <_Z16_fetch_usbserialv+0x40>)
 23f9f5a:	f7ff ffc7 	bl	23f9eec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23f9f5e:	4620      	mov	r0, r4
 23f9f60:	f7fe f9ce 	bl	23f8300 <__cxa_guard_release>
 23f9f64:	4804      	ldr	r0, [pc, #16]	; (23f9f78 <_Z16_fetch_usbserialv+0x44>)
 23f9f66:	f002 ff3f 	bl	23fcde8 <atexit>
	return _usbserial;
}
 23f9f6a:	4802      	ldr	r0, [pc, #8]	; (23f9f74 <_Z16_fetch_usbserialv+0x40>)
 23f9f6c:	b008      	add	sp, #32
 23f9f6e:	bd10      	pop	{r4, pc}
 23f9f70:	1007af80 	.word	0x1007af80
 23f9f74:	1007af84 	.word	0x1007af84
 23f9f78:	023f9e73 	.word	0x023f9e73

023f9f7c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23f9f7c:	2200      	movs	r2, #0
 23f9f7e:	6840      	ldr	r0, [r0, #4]
 23f9f80:	4611      	mov	r1, r2
 23f9f82:	f7fe b87b 	b.w	23f807c <network_ready>

023f9f86 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23f9f86:	2200      	movs	r2, #0
 23f9f88:	6840      	ldr	r0, [r0, #4]
 23f9f8a:	4611      	mov	r1, r2
 23f9f8c:	f7fe b8ae 	b.w	23f80ec <network_listening>

023f9f90 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23f9f90:	2200      	movs	r2, #0
 23f9f92:	6840      	ldr	r0, [r0, #4]
 23f9f94:	4611      	mov	r1, r2
 23f9f96:	f7fe b8c5 	b.w	23f8124 <network_get_listen_timeout>

023f9f9a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23f9f9a:	2200      	movs	r2, #0
 23f9f9c:	6840      	ldr	r0, [r0, #4]
 23f9f9e:	f7fe b8b3 	b.w	23f8108 <network_set_listen_timeout>

023f9fa2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23f9fa2:	2200      	movs	r2, #0
 23f9fa4:	6840      	ldr	r0, [r0, #4]
 23f9fa6:	f081 0101 	eor.w	r1, r1, #1
 23f9faa:	f7fe b891 	b.w	23f80d0 <network_listen>

023f9fae <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23f9fae:	2300      	movs	r3, #0
 23f9fb0:	6840      	ldr	r0, [r0, #4]
 23f9fb2:	461a      	mov	r2, r3
 23f9fb4:	4619      	mov	r1, r3
 23f9fb6:	f7fe b87d 	b.w	23f80b4 <network_off>

023f9fba <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23f9fba:	2300      	movs	r3, #0
 23f9fbc:	6840      	ldr	r0, [r0, #4]
 23f9fbe:	461a      	mov	r2, r3
 23f9fc0:	4619      	mov	r1, r3
 23f9fc2:	f7fe b869 	b.w	23f8098 <network_on>

023f9fc6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23f9fc6:	2200      	movs	r2, #0
 23f9fc8:	6840      	ldr	r0, [r0, #4]
 23f9fca:	4611      	mov	r1, r2
 23f9fcc:	f7fe b83a 	b.w	23f8044 <network_connecting>

023f9fd0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23f9fd0:	2200      	movs	r2, #0
 23f9fd2:	2102      	movs	r1, #2
 23f9fd4:	6840      	ldr	r0, [r0, #4]
 23f9fd6:	f7fe b843 	b.w	23f8060 <network_disconnect>

023f9fda <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23f9fda:	2300      	movs	r3, #0
 23f9fdc:	6840      	ldr	r0, [r0, #4]
 23f9fde:	461a      	mov	r2, r3
 23f9fe0:	f7fe b822 	b.w	23f8028 <network_connect>

023f9fe4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23f9fe4:	2205      	movs	r2, #5
 23f9fe6:	4b02      	ldr	r3, [pc, #8]	; (23f9ff0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23f9fe8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23f9fea:	4a02      	ldr	r2, [pc, #8]	; (23f9ff4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23f9fec:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23f9fee:	4770      	bx	lr
 23f9ff0:	1007af98 	.word	0x1007af98
 23f9ff4:	023ffbb0 	.word	0x023ffbb0

023f9ff8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23f9ff8:	4b01      	ldr	r3, [pc, #4]	; (23fa000 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23f9ffa:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23f9ffc:	4770      	bx	lr
 23f9ffe:	bf00      	nop
 23fa000:	1006a280 	.word	0x1006a280

023fa004 <serialEventRun>:
{
 23fa004:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fa006:	4b0d      	ldr	r3, [pc, #52]	; (23fa03c <serialEventRun+0x38>)
 23fa008:	b143      	cbz	r3, 23fa01c <serialEventRun+0x18>
 23fa00a:	f7ff ff93 	bl	23f9f34 <_Z16_fetch_usbserialv>
 23fa00e:	6803      	ldr	r3, [r0, #0]
 23fa010:	691b      	ldr	r3, [r3, #16]
 23fa012:	4798      	blx	r3
 23fa014:	2800      	cmp	r0, #0
 23fa016:	dd01      	ble.n	23fa01c <serialEventRun+0x18>
        serialEvent();
 23fa018:	e000      	b.n	23fa01c <serialEventRun+0x18>
 23fa01a:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fa01c:	4b08      	ldr	r3, [pc, #32]	; (23fa040 <serialEventRun+0x3c>)
 23fa01e:	b143      	cbz	r3, 23fa032 <serialEventRun+0x2e>
 23fa020:	f000 f9d2 	bl	23fa3c8 <_Z22__fetch_global_Serial1v>
 23fa024:	6803      	ldr	r3, [r0, #0]
 23fa026:	691b      	ldr	r3, [r3, #16]
 23fa028:	4798      	blx	r3
 23fa02a:	2800      	cmp	r0, #0
 23fa02c:	dd01      	ble.n	23fa032 <serialEventRun+0x2e>
        serialEvent1();
 23fa02e:	e000      	b.n	23fa032 <serialEventRun+0x2e>
 23fa030:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fa032:	4b04      	ldr	r3, [pc, #16]	; (23fa044 <serialEventRun+0x40>)
 23fa034:	b10b      	cbz	r3, 23fa03a <serialEventRun+0x36>
 23fa036:	f000 fa0d 	bl	23fa454 <_Z15serialEventRun2v>
}
 23fa03a:	bd08      	pop	{r3, pc}
	...

023fa048 <_post_loop>:
{
 23fa048:	b508      	push	{r3, lr}
	serialEventRun();
 23fa04a:	f7ff ffdb 	bl	23fa004 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fa04e:	f7fd fb0d 	bl	23f766c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fa052:	4b01      	ldr	r3, [pc, #4]	; (23fa058 <_post_loop+0x10>)
 23fa054:	6018      	str	r0, [r3, #0]
}
 23fa056:	bd08      	pop	{r3, pc}
 23fa058:	1007afa8 	.word	0x1007afa8

023fa05c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fa05c:	4805      	ldr	r0, [pc, #20]	; (23fa074 <_Z33system_initialize_user_backup_ramv+0x18>)
 23fa05e:	4a06      	ldr	r2, [pc, #24]	; (23fa078 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fa060:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fa062:	1a12      	subs	r2, r2, r0
 23fa064:	4905      	ldr	r1, [pc, #20]	; (23fa07c <_Z33system_initialize_user_backup_ramv+0x20>)
 23fa066:	f002 fee1 	bl	23fce2c <memcpy>
    __backup_sram_signature = signature;
 23fa06a:	4b05      	ldr	r3, [pc, #20]	; (23fa080 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fa06c:	4a05      	ldr	r2, [pc, #20]	; (23fa084 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fa06e:	601a      	str	r2, [r3, #0]
}
 23fa070:	bd08      	pop	{r3, pc}
 23fa072:	bf00      	nop
 23fa074:	1007b400 	.word	0x1007b400
 23fa078:	1007b404 	.word	0x1007b404
 23fa07c:	085ff9cc 	.word	0x085ff9cc
 23fa080:	1007b400 	.word	0x1007b400
 23fa084:	9a271c1e 	.word	0x9a271c1e

023fa088 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fa088:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fa08a:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fa08c:	461a      	mov	r2, r3
 23fa08e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fa092:	9300      	str	r3, [sp, #0]
 23fa094:	f7fd ff12 	bl	23f7ebc <system_ctrl_set_result>
}
 23fa098:	b003      	add	sp, #12
 23fa09a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fa0a0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fa0a0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fa0a2:	8843      	ldrh	r3, [r0, #2]
 23fa0a4:	2b0a      	cmp	r3, #10
 23fa0a6:	d008      	beq.n	23fa0ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fa0a8:	2b50      	cmp	r3, #80	; 0x50
 23fa0aa:	d10b      	bne.n	23fa0c4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fa0ac:	4b09      	ldr	r3, [pc, #36]	; (23fa0d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fa0ae:	681b      	ldr	r3, [r3, #0]
 23fa0b0:	b14b      	cbz	r3, 23fa0c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fa0b2:	b003      	add	sp, #12
 23fa0b4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fa0b8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fa0ba:	f7ff ffe5 	bl	23fa088 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fa0be:	b003      	add	sp, #12
 23fa0c0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fa0c4:	2300      	movs	r3, #0
 23fa0c6:	461a      	mov	r2, r3
 23fa0c8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fa0cc:	9300      	str	r3, [sp, #0]
 23fa0ce:	f7fd fef5 	bl	23f7ebc <system_ctrl_set_result>
}
 23fa0d2:	e7f4      	b.n	23fa0be <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fa0d4:	1007afa4 	.word	0x1007afa4

023fa0d8 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fa0d8:	2100      	movs	r1, #0
{
 23fa0da:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fa0dc:	4811      	ldr	r0, [pc, #68]	; (23fa124 <module_user_init_hook+0x4c>)
 23fa0de:	f7fe f8e5 	bl	23f82ac <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fa0e2:	4b11      	ldr	r3, [pc, #68]	; (23fa128 <module_user_init_hook+0x50>)
 23fa0e4:	681a      	ldr	r2, [r3, #0]
 23fa0e6:	4b11      	ldr	r3, [pc, #68]	; (23fa12c <module_user_init_hook+0x54>)
 23fa0e8:	429a      	cmp	r2, r3
 23fa0ea:	bf0c      	ite	eq
 23fa0ec:	2201      	moveq	r2, #1
 23fa0ee:	2200      	movne	r2, #0
 23fa0f0:	4b0f      	ldr	r3, [pc, #60]	; (23fa130 <module_user_init_hook+0x58>)
 23fa0f2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fa0f4:	d001      	beq.n	23fa0fa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fa0f6:	f7ff ffb1 	bl	23fa05c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fa0fa:	f7fd fa8d 	bl	23f7618 <HAL_RNG_GetRandomNumber>
 23fa0fe:	4604      	mov	r4, r0
    srand(seed);
 23fa100:	f002 feaa 	bl	23fce58 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fa104:	4b0b      	ldr	r3, [pc, #44]	; (23fa134 <module_user_init_hook+0x5c>)
 23fa106:	b113      	cbz	r3, 23fa10e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fa108:	4620      	mov	r0, r4
 23fa10a:	e000      	b.n	23fa10e <module_user_init_hook+0x36>
 23fa10c:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fa10e:	2100      	movs	r1, #0
 23fa110:	4808      	ldr	r0, [pc, #32]	; (23fa134 <module_user_init_hook+0x5c>)
 23fa112:	f7fd ff6d 	bl	23f7ff0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fa116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fa11a:	2100      	movs	r1, #0
 23fa11c:	4806      	ldr	r0, [pc, #24]	; (23fa138 <module_user_init_hook+0x60>)
 23fa11e:	f7fd bebf 	b.w	23f7ea0 <system_ctrl_set_app_request_handler>
 23fa122:	bf00      	nop
 23fa124:	023f9ff9 	.word	0x023f9ff9
 23fa128:	1007b400 	.word	0x1007b400
 23fa12c:	9a271c1e 	.word	0x9a271c1e
 23fa130:	1007afa0 	.word	0x1007afa0
 23fa134:	00000000 	.word	0x00000000
 23fa138:	023fa0a1 	.word	0x023fa0a1

023fa13c <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
 23fa13c:	b509      	push	{r0, r3, lr}
 23fa13e:	4804      	ldr	r0, [pc, #16]	; (23fa150 <spark_protocol_instance+0x14>)
 23fa140:	6800      	ldr	r0, [r0, #0]
 23fa142:	4b04      	ldr	r3, [pc, #16]	; (23fa154 <spark_protocol_instance+0x18>)
 23fa144:	4403      	add	r3, r0
 23fa146:	681b      	ldr	r3, [r3, #0]
 23fa148:	681b      	ldr	r3, [r3, #0]
 23fa14a:	9302      	str	r3, [sp, #8]
 23fa14c:	bd09      	pop	{r0, r3, pc}
 23fa14e:	0000      	.short	0x0000
 23fa150:	1006a198 	.word	0x1006a198
 23fa154:	00000044 	.word	0x00000044

023fa158 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
 23fa158:	b509      	push	{r0, r3, lr}
 23fa15a:	4804      	ldr	r0, [pc, #16]	; (23fa16c <spark_protocol_set_product_id+0x14>)
 23fa15c:	6800      	ldr	r0, [r0, #0]
 23fa15e:	4b04      	ldr	r3, [pc, #16]	; (23fa170 <spark_protocol_set_product_id+0x18>)
 23fa160:	4403      	add	r3, r0
 23fa162:	681b      	ldr	r3, [r3, #0]
 23fa164:	685b      	ldr	r3, [r3, #4]
 23fa166:	9302      	str	r3, [sp, #8]
 23fa168:	bd09      	pop	{r0, r3, pc}
 23fa16a:	0000      	.short	0x0000
 23fa16c:	1006a198 	.word	0x1006a198
 23fa170:	00000044 	.word	0x00000044

023fa174 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
 23fa174:	b509      	push	{r0, r3, lr}
 23fa176:	4804      	ldr	r0, [pc, #16]	; (23fa188 <spark_protocol_set_product_firmware_version+0x14>)
 23fa178:	6800      	ldr	r0, [r0, #0]
 23fa17a:	4b04      	ldr	r3, [pc, #16]	; (23fa18c <spark_protocol_set_product_firmware_version+0x18>)
 23fa17c:	4403      	add	r3, r0
 23fa17e:	681b      	ldr	r3, [r3, #0]
 23fa180:	689b      	ldr	r3, [r3, #8]
 23fa182:	9302      	str	r3, [sp, #8]
 23fa184:	bd09      	pop	{r0, r3, pc}
 23fa186:	0000      	.short	0x0000
 23fa188:	1006a198 	.word	0x1006a198
 23fa18c:	00000044 	.word	0x00000044

023fa190 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23fa190:	282c      	cmp	r0, #44	; 0x2c
bool pinAvailable(uint16_t pin) {
 23fa192:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
 23fa194:	d902      	bls.n	23fa19c <pinAvailable+0xc>
    return false;
 23fa196:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23fa198:	b002      	add	sp, #8
 23fa19a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fa19c:	f1a0 030b 	sub.w	r3, r0, #11
 23fa1a0:	2b02      	cmp	r3, #2
 23fa1a2:	d819      	bhi.n	23fa1d8 <pinAvailable+0x48>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fa1a4:	4c17      	ldr	r4, [pc, #92]	; (23fa204 <pinAvailable+0x74>)
 23fa1a6:	e8d4 1f8f 	ldab	r1, [r4]
 23fa1aa:	f011 0101 	ands.w	r1, r1, #1
 23fa1ae:	d10b      	bne.n	23fa1c8 <pinAvailable+0x38>
 23fa1b0:	4620      	mov	r0, r4
 23fa1b2:	9101      	str	r1, [sp, #4]
 23fa1b4:	f7fe f896 	bl	23f82e4 <__cxa_guard_acquire>
 23fa1b8:	9901      	ldr	r1, [sp, #4]
 23fa1ba:	b128      	cbz	r0, 23fa1c8 <pinAvailable+0x38>
 23fa1bc:	4812      	ldr	r0, [pc, #72]	; (23fa208 <pinAvailable+0x78>)
 23fa1be:	f7ff fb25 	bl	23f980c <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fa1c2:	4620      	mov	r0, r4
 23fa1c4:	f7fe f89c 	bl	23f8300 <__cxa_guard_release>
 23fa1c8:	4b0f      	ldr	r3, [pc, #60]	; (23fa208 <pinAvailable+0x78>)
 23fa1ca:	7818      	ldrb	r0, [r3, #0]
 23fa1cc:	f7fd fc8c 	bl	23f7ae8 <hal_spi_is_enabled>
 23fa1d0:	2800      	cmp	r0, #0
 23fa1d2:	d1e0      	bne.n	23fa196 <pinAvailable+0x6>
  return true; // 'pin' is available
 23fa1d4:	2001      	movs	r0, #1
 23fa1d6:	e7df      	b.n	23fa198 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23fa1d8:	2801      	cmp	r0, #1
 23fa1da:	d809      	bhi.n	23fa1f0 <pinAvailable+0x60>
 23fa1dc:	f000 f89a 	bl	23fa314 <_Z19__fetch_global_Wirev>
 23fa1e0:	2100      	movs	r1, #0
 23fa1e2:	7c00      	ldrb	r0, [r0, #16]
 23fa1e4:	f7fd fbbc 	bl	23f7960 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fa1e8:	f080 0001 	eor.w	r0, r0, #1
 23fa1ec:	b2c0      	uxtb	r0, r0
 23fa1ee:	e7d3      	b.n	23fa198 <pinAvailable+0x8>
 23fa1f0:	3809      	subs	r0, #9
 23fa1f2:	2801      	cmp	r0, #1
 23fa1f4:	d8ee      	bhi.n	23fa1d4 <pinAvailable+0x44>
 23fa1f6:	f000 f8e7 	bl	23fa3c8 <_Z22__fetch_global_Serial1v>
 23fa1fa:	7c00      	ldrb	r0, [r0, #16]
 23fa1fc:	f7fd fd1c 	bl	23f7c38 <hal_usart_is_enabled>
 23fa200:	e7f2      	b.n	23fa1e8 <pinAvailable+0x58>
 23fa202:	bf00      	nop
 23fa204:	1006a2e8 	.word	0x1006a2e8
 23fa208:	1006a2ec 	.word	0x1006a2ec

023fa20c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fa20c:	282c      	cmp	r0, #44	; 0x2c
{
 23fa20e:	b538      	push	{r3, r4, r5, lr}
 23fa210:	4604      	mov	r4, r0
 23fa212:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fa214:	d80a      	bhi.n	23fa22c <pinMode+0x20>
 23fa216:	29ff      	cmp	r1, #255	; 0xff
 23fa218:	d008      	beq.n	23fa22c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23fa21a:	f7ff ffb9 	bl	23fa190 <pinAvailable>
 23fa21e:	b128      	cbz	r0, 23fa22c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23fa220:	4629      	mov	r1, r5
 23fa222:	4620      	mov	r0, r4
}
 23fa224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23fa228:	f7fd baba 	b.w	23f77a0 <hal_gpio_mode>
}
 23fa22c:	bd38      	pop	{r3, r4, r5, pc}

023fa22e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23fa22e:	b538      	push	{r3, r4, r5, lr}
 23fa230:	4604      	mov	r4, r0
 23fa232:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23fa234:	f7fd fac2 	bl	23f77bc <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23fa238:	28ff      	cmp	r0, #255	; 0xff
 23fa23a:	d010      	beq.n	23fa25e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23fa23c:	2806      	cmp	r0, #6
 23fa23e:	d804      	bhi.n	23fa24a <digitalWrite+0x1c>
 23fa240:	234d      	movs	r3, #77	; 0x4d
 23fa242:	fa23 f000 	lsr.w	r0, r3, r0
 23fa246:	07c3      	lsls	r3, r0, #31
 23fa248:	d409      	bmi.n	23fa25e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23fa24a:	4620      	mov	r0, r4
 23fa24c:	f7ff ffa0 	bl	23fa190 <pinAvailable>
 23fa250:	b128      	cbz	r0, 23fa25e <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23fa252:	4629      	mov	r1, r5
 23fa254:	4620      	mov	r0, r4
}
 23fa256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23fa25a:	f7fd babd 	b.w	23f77d8 <hal_gpio_write>
}
 23fa25e:	bd38      	pop	{r3, r4, r5, pc}

023fa260 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
 23fa260:	b510      	push	{r4, lr}
 23fa262:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
 23fa264:	f7fd faaa 	bl	23f77bc <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 23fa268:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 23fa26a:	b2db      	uxtb	r3, r3
 23fa26c:	2b01      	cmp	r3, #1
 23fa26e:	d908      	bls.n	23fa282 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 23fa270:	4620      	mov	r0, r4
 23fa272:	f7ff ff8d 	bl	23fa190 <pinAvailable>
 23fa276:	b120      	cbz	r0, 23fa282 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
 23fa278:	4620      	mov	r0, r4
}
 23fa27a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
 23fa27e:	f7fd bab9 	b.w	23f77f4 <hal_gpio_read>
}
 23fa282:	2000      	movs	r0, #0
 23fa284:	bd10      	pop	{r4, pc}

023fa286 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(hal_pin_t pin)
{
 23fa286:	b510      	push	{r4, lr}
 23fa288:	4604      	mov	r4, r0
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
 23fa28a:	f7ff ff81 	bl	23fa190 <pinAvailable>
 23fa28e:	b150      	cbz	r0, 23fa2a6 <analogRead+0x20>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
 23fa290:	2103      	movs	r1, #3
 23fa292:	4620      	mov	r0, r4
 23fa294:	f7fd fa76 	bl	23f7784 <hal_pin_validate_function>
 23fa298:	2803      	cmp	r0, #3
 23fa29a:	d104      	bne.n	23fa2a6 <analogRead+0x20>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 23fa29c:	4620      	mov	r0, r4
}
 23fa29e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 23fa2a2:	f7fd bad1 	b.w	23f7848 <hal_adc_read>
}
 23fa2a6:	2000      	movs	r0, #0
 23fa2a8:	bd10      	pop	{r4, pc}
	...

023fa2ac <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 23fa2ac:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 23fa2ae:	4c08      	ldr	r4, [pc, #32]	; (23fa2d0 <_Z21__fetch_global_EEPROMv+0x24>)
 23fa2b0:	e8d4 3f8f 	ldab	r3, [r4]
 23fa2b4:	07db      	lsls	r3, r3, #31
 23fa2b6:	d408      	bmi.n	23fa2ca <_Z21__fetch_global_EEPROMv+0x1e>
 23fa2b8:	4620      	mov	r0, r4
 23fa2ba:	f7fe f813 	bl	23f82e4 <__cxa_guard_acquire>
 23fa2be:	b120      	cbz	r0, 23fa2ca <_Z21__fetch_global_EEPROMv+0x1e>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 23fa2c0:	f7fd f9e2 	bl	23f7688 <HAL_EEPROM_Init>
 23fa2c4:	4620      	mov	r0, r4
 23fa2c6:	f7fe f81b 	bl	23f8300 <__cxa_guard_release>
	return eeprom;
}
 23fa2ca:	4802      	ldr	r0, [pc, #8]	; (23fa2d4 <_Z21__fetch_global_EEPROMv+0x28>)
 23fa2cc:	bd10      	pop	{r4, pc}
 23fa2ce:	bf00      	nop
 23fa2d0:	1007afac 	.word	0x1007afac
 23fa2d4:	1007afb0 	.word	0x1007afb0

023fa2d8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fa2d8:	4770      	bx	lr
	...

023fa2dc <_Z17acquireWireBufferv>:
{
 23fa2dc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23fa2de:	4b0b      	ldr	r3, [pc, #44]	; (23fa30c <_Z17acquireWireBufferv+0x30>)
{
 23fa2e0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23fa2e2:	6003      	str	r3, [r0, #0]
 23fa2e4:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fa2e6:	490a      	ldr	r1, [pc, #40]	; (23fa310 <_Z17acquireWireBufferv+0x34>)
	hal_i2c_config_t config = {
 23fa2e8:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fa2ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 23fa2ee:	f000 f8c5 	bl	23fa47c <_ZnajRKSt9nothrow_t>
	};
 23fa2f2:	f44f 7500 	mov.w	r5, #512	; 0x200
 23fa2f6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fa2f8:	4905      	ldr	r1, [pc, #20]	; (23fa310 <_Z17acquireWireBufferv+0x34>)
 23fa2fa:	4628      	mov	r0, r5
	};
 23fa2fc:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fa2fe:	f000 f8bd 	bl	23fa47c <_ZnajRKSt9nothrow_t>
	};
 23fa302:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23fa306:	4620      	mov	r0, r4
 23fa308:	bd38      	pop	{r3, r4, r5, pc}
 23fa30a:	bf00      	nop
 23fa30c:	00010018 	.word	0x00010018
 23fa310:	023ffbec 	.word	0x023ffbec

023fa314 <_Z19__fetch_global_Wirev>:
{
 23fa314:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fa316:	4d0e      	ldr	r5, [pc, #56]	; (23fa350 <_Z19__fetch_global_Wirev+0x3c>)
{
 23fa318:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fa31a:	e8d5 1f8f 	ldab	r1, [r5]
 23fa31e:	f011 0401 	ands.w	r4, r1, #1
 23fa322:	d111      	bne.n	23fa348 <_Z19__fetch_global_Wirev+0x34>
 23fa324:	4628      	mov	r0, r5
 23fa326:	f7fd ffdd 	bl	23f82e4 <__cxa_guard_acquire>
 23fa32a:	b168      	cbz	r0, 23fa348 <_Z19__fetch_global_Wirev+0x34>
 23fa32c:	4668      	mov	r0, sp
 23fa32e:	f7ff ffd5 	bl	23fa2dc <_Z17acquireWireBufferv>
 23fa332:	466a      	mov	r2, sp
 23fa334:	4621      	mov	r1, r4
 23fa336:	4807      	ldr	r0, [pc, #28]	; (23fa354 <_Z19__fetch_global_Wirev+0x40>)
 23fa338:	f7fe fd9a 	bl	23f8e70 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23fa33c:	4628      	mov	r0, r5
 23fa33e:	f7fd ffdf 	bl	23f8300 <__cxa_guard_release>
 23fa342:	4805      	ldr	r0, [pc, #20]	; (23fa358 <_Z19__fetch_global_Wirev+0x44>)
 23fa344:	f002 fd50 	bl	23fcde8 <atexit>
	return wire;
}
 23fa348:	4802      	ldr	r0, [pc, #8]	; (23fa354 <_Z19__fetch_global_Wirev+0x40>)
 23fa34a:	b007      	add	sp, #28
 23fa34c:	bd30      	pop	{r4, r5, pc}
 23fa34e:	bf00      	nop
 23fa350:	1007afb4 	.word	0x1007afb4
 23fa354:	1007afb8 	.word	0x1007afb8
 23fa358:	023fa2d9 	.word	0x023fa2d9

023fa35c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fa35c:	4770      	bx	lr

023fa35e <__tcf_1>:
 23fa35e:	4770      	bx	lr

023fa360 <_Z20acquireSerial1Bufferv>:
{
 23fa360:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23fa362:	2514      	movs	r5, #20
{
 23fa364:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23fa366:	462a      	mov	r2, r5
 23fa368:	2100      	movs	r1, #0
 23fa36a:	f002 fd6c 	bl	23fce46 <memset>
 23fa36e:	8025      	strh	r5, [r4, #0]
 23fa370:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fa372:	4907      	ldr	r1, [pc, #28]	; (23fa390 <_Z20acquireSerial1Bufferv+0x30>)
 23fa374:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fa376:	8125      	strh	r5, [r4, #8]
 23fa378:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fa37a:	f000 f87f 	bl	23fa47c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fa37e:	4904      	ldr	r1, [pc, #16]	; (23fa390 <_Z20acquireSerial1Bufferv+0x30>)
    };
 23fa380:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fa382:	4628      	mov	r0, r5
 23fa384:	f000 f87a 	bl	23fa47c <_ZnajRKSt9nothrow_t>
    };
 23fa388:	60e0      	str	r0, [r4, #12]
}
 23fa38a:	4620      	mov	r0, r4
 23fa38c:	bd38      	pop	{r3, r4, r5, pc}
 23fa38e:	bf00      	nop
 23fa390:	023ffbec 	.word	0x023ffbec

023fa394 <_Z20acquireSerial2Bufferv>:
 23fa394:	b538      	push	{r3, r4, r5, lr}
 23fa396:	2514      	movs	r5, #20
 23fa398:	4604      	mov	r4, r0
 23fa39a:	462a      	mov	r2, r5
 23fa39c:	2100      	movs	r1, #0
 23fa39e:	f002 fd52 	bl	23fce46 <memset>
 23fa3a2:	8025      	strh	r5, [r4, #0]
 23fa3a4:	2540      	movs	r5, #64	; 0x40
 23fa3a6:	4907      	ldr	r1, [pc, #28]	; (23fa3c4 <_Z20acquireSerial2Bufferv+0x30>)
 23fa3a8:	4628      	mov	r0, r5
 23fa3aa:	8125      	strh	r5, [r4, #8]
 23fa3ac:	8225      	strh	r5, [r4, #16]
 23fa3ae:	f000 f865 	bl	23fa47c <_ZnajRKSt9nothrow_t>
 23fa3b2:	4904      	ldr	r1, [pc, #16]	; (23fa3c4 <_Z20acquireSerial2Bufferv+0x30>)
 23fa3b4:	6060      	str	r0, [r4, #4]
 23fa3b6:	4628      	mov	r0, r5
 23fa3b8:	f000 f860 	bl	23fa47c <_ZnajRKSt9nothrow_t>
 23fa3bc:	60e0      	str	r0, [r4, #12]
 23fa3be:	4620      	mov	r0, r4
 23fa3c0:	bd38      	pop	{r3, r4, r5, pc}
 23fa3c2:	bf00      	nop
 23fa3c4:	023ffbec 	.word	0x023ffbec

023fa3c8 <_Z22__fetch_global_Serial1v>:
{
 23fa3c8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fa3ca:	4d0e      	ldr	r5, [pc, #56]	; (23fa404 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23fa3cc:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fa3ce:	e8d5 1f8f 	ldab	r1, [r5]
 23fa3d2:	f011 0401 	ands.w	r4, r1, #1
 23fa3d6:	d111      	bne.n	23fa3fc <_Z22__fetch_global_Serial1v+0x34>
 23fa3d8:	4628      	mov	r0, r5
 23fa3da:	f7fd ff83 	bl	23f82e4 <__cxa_guard_acquire>
 23fa3de:	b168      	cbz	r0, 23fa3fc <_Z22__fetch_global_Serial1v+0x34>
 23fa3e0:	a801      	add	r0, sp, #4
 23fa3e2:	f7ff ffbd 	bl	23fa360 <_Z20acquireSerial1Bufferv>
 23fa3e6:	4621      	mov	r1, r4
 23fa3e8:	aa01      	add	r2, sp, #4
 23fa3ea:	4807      	ldr	r0, [pc, #28]	; (23fa408 <_Z22__fetch_global_Serial1v+0x40>)
 23fa3ec:	f7ff fd28 	bl	23f9e40 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fa3f0:	4628      	mov	r0, r5
 23fa3f2:	f7fd ff85 	bl	23f8300 <__cxa_guard_release>
 23fa3f6:	4805      	ldr	r0, [pc, #20]	; (23fa40c <_Z22__fetch_global_Serial1v+0x44>)
 23fa3f8:	f002 fcf6 	bl	23fcde8 <atexit>
    return serial1;
}
 23fa3fc:	4802      	ldr	r0, [pc, #8]	; (23fa408 <_Z22__fetch_global_Serial1v+0x40>)
 23fa3fe:	b007      	add	sp, #28
 23fa400:	bd30      	pop	{r4, r5, pc}
 23fa402:	bf00      	nop
 23fa404:	1007afcc 	.word	0x1007afcc
 23fa408:	1007afd4 	.word	0x1007afd4
 23fa40c:	023fa35d 	.word	0x023fa35d

023fa410 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23fa410:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fa412:	4c0d      	ldr	r4, [pc, #52]	; (23fa448 <_Z22__fetch_global_Serial2v+0x38>)
{
 23fa414:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fa416:	e8d4 3f8f 	ldab	r3, [r4]
 23fa41a:	07db      	lsls	r3, r3, #31
 23fa41c:	d411      	bmi.n	23fa442 <_Z22__fetch_global_Serial2v+0x32>
 23fa41e:	4620      	mov	r0, r4
 23fa420:	f7fd ff60 	bl	23f82e4 <__cxa_guard_acquire>
 23fa424:	b168      	cbz	r0, 23fa442 <_Z22__fetch_global_Serial2v+0x32>
 23fa426:	a801      	add	r0, sp, #4
 23fa428:	f7ff ffb4 	bl	23fa394 <_Z20acquireSerial2Bufferv>
 23fa42c:	2101      	movs	r1, #1
 23fa42e:	aa01      	add	r2, sp, #4
 23fa430:	4806      	ldr	r0, [pc, #24]	; (23fa44c <_Z22__fetch_global_Serial2v+0x3c>)
 23fa432:	f7ff fd05 	bl	23f9e40 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fa436:	4620      	mov	r0, r4
 23fa438:	f7fd ff62 	bl	23f8300 <__cxa_guard_release>
 23fa43c:	4804      	ldr	r0, [pc, #16]	; (23fa450 <_Z22__fetch_global_Serial2v+0x40>)
 23fa43e:	f002 fcd3 	bl	23fcde8 <atexit>
	return serial2;
}
 23fa442:	4802      	ldr	r0, [pc, #8]	; (23fa44c <_Z22__fetch_global_Serial2v+0x3c>)
 23fa444:	b006      	add	sp, #24
 23fa446:	bd10      	pop	{r4, pc}
 23fa448:	1007afd0 	.word	0x1007afd0
 23fa44c:	1007afe8 	.word	0x1007afe8
 23fa450:	023fa35f 	.word	0x023fa35f

023fa454 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23fa454:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23fa456:	f7ff ffdb 	bl	23fa410 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23fa45a:	4b07      	ldr	r3, [pc, #28]	; (23fa478 <_Z15serialEventRun2v+0x24>)
 23fa45c:	4604      	mov	r4, r0
 23fa45e:	b153      	cbz	r3, 23fa476 <_Z15serialEventRun2v+0x22>
 23fa460:	f7ff fd02 	bl	23f9e68 <_ZN11USARTSerial9isEnabledEv>
 23fa464:	b138      	cbz	r0, 23fa476 <_Z15serialEventRun2v+0x22>
 23fa466:	6823      	ldr	r3, [r4, #0]
 23fa468:	4620      	mov	r0, r4
 23fa46a:	691b      	ldr	r3, [r3, #16]
 23fa46c:	4798      	blx	r3
 23fa46e:	2800      	cmp	r0, #0
 23fa470:	dd01      	ble.n	23fa476 <_Z15serialEventRun2v+0x22>
        handler();
 23fa472:	e000      	b.n	23fa476 <_Z15serialEventRun2v+0x22>
 23fa474:	bf00      	nop
}
 23fa476:	bd10      	pop	{r4, pc}
 23fa478:	00000000 	.word	0x00000000

023fa47c <_ZnajRKSt9nothrow_t>:
 23fa47c:	f7ed b9fb 	b.w	23e7876 <_Znaj>

023fa480 <_ZSt25__throw_bad_function_callv>:
 23fa480:	b508      	push	{r3, lr}
 23fa482:	f7fd fedb 	bl	23f823c <abort>
	...

023fa488 <atan>:
 23fa488:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa48c:	ec55 4b10 	vmov	r4, r5, d0
 23fa490:	4bc7      	ldr	r3, [pc, #796]	; (23fa7b0 <atan+0x328>)
 23fa492:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 23fa496:	46aa      	mov	sl, r5
 23fa498:	429e      	cmp	r6, r3
 23fa49a:	dd16      	ble.n	23fa4ca <atan+0x42>
 23fa49c:	4bc5      	ldr	r3, [pc, #788]	; (23fa7b4 <atan+0x32c>)
 23fa49e:	429e      	cmp	r6, r3
 23fa4a0:	dc01      	bgt.n	23fa4a6 <atan+0x1e>
 23fa4a2:	d10a      	bne.n	23fa4ba <atan+0x32>
 23fa4a4:	b14c      	cbz	r4, 23fa4ba <atan+0x32>
 23fa4a6:	4622      	mov	r2, r4
 23fa4a8:	462b      	mov	r3, r5
 23fa4aa:	4620      	mov	r0, r4
 23fa4ac:	4629      	mov	r1, r5
 23fa4ae:	f7ec f9c5 	bl	23e683c <__adddf3>
 23fa4b2:	ec41 0b10 	vmov	d0, r0, r1
 23fa4b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa4ba:	f1ba 0f00 	cmp.w	sl, #0
 23fa4be:	f340 80bf 	ble.w	23fa640 <atan+0x1b8>
 23fa4c2:	ed9f 0b9f 	vldr	d0, [pc, #636]	; 23fa740 <atan+0x2b8>
 23fa4c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa4ca:	4bbb      	ldr	r3, [pc, #748]	; (23fa7b8 <atan+0x330>)
 23fa4cc:	429e      	cmp	r6, r3
 23fa4ce:	f300 80ba 	bgt.w	23fa646 <atan+0x1be>
 23fa4d2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 23fa4d6:	429e      	cmp	r6, r3
 23fa4d8:	f340 80a0 	ble.w	23fa61c <atan+0x194>
 23fa4dc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 23fa4e0:	4622      	mov	r2, r4
 23fa4e2:	462b      	mov	r3, r5
 23fa4e4:	4620      	mov	r0, r4
 23fa4e6:	4629      	mov	r1, r5
 23fa4e8:	f7ec fb5e 	bl	23e6ba8 <__aeabi_dmul>
 23fa4ec:	4602      	mov	r2, r0
 23fa4ee:	460b      	mov	r3, r1
 23fa4f0:	4680      	mov	r8, r0
 23fa4f2:	4689      	mov	r9, r1
 23fa4f4:	f7ec fb58 	bl	23e6ba8 <__aeabi_dmul>
 23fa4f8:	4606      	mov	r6, r0
 23fa4fa:	460f      	mov	r7, r1
 23fa4fc:	a392      	add	r3, pc, #584	; (adr r3, 23fa748 <atan+0x2c0>)
 23fa4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa502:	f7ec fb51 	bl	23e6ba8 <__aeabi_dmul>
 23fa506:	a392      	add	r3, pc, #584	; (adr r3, 23fa750 <atan+0x2c8>)
 23fa508:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa50c:	f7ec f996 	bl	23e683c <__adddf3>
 23fa510:	4632      	mov	r2, r6
 23fa512:	463b      	mov	r3, r7
 23fa514:	f7ec fb48 	bl	23e6ba8 <__aeabi_dmul>
 23fa518:	a38f      	add	r3, pc, #572	; (adr r3, 23fa758 <atan+0x2d0>)
 23fa51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa51e:	f7ec f98d 	bl	23e683c <__adddf3>
 23fa522:	4632      	mov	r2, r6
 23fa524:	463b      	mov	r3, r7
 23fa526:	f7ec fb3f 	bl	23e6ba8 <__aeabi_dmul>
 23fa52a:	a38d      	add	r3, pc, #564	; (adr r3, 23fa760 <atan+0x2d8>)
 23fa52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa530:	f7ec f984 	bl	23e683c <__adddf3>
 23fa534:	4632      	mov	r2, r6
 23fa536:	463b      	mov	r3, r7
 23fa538:	f7ec fb36 	bl	23e6ba8 <__aeabi_dmul>
 23fa53c:	a38a      	add	r3, pc, #552	; (adr r3, 23fa768 <atan+0x2e0>)
 23fa53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa542:	f7ec f97b 	bl	23e683c <__adddf3>
 23fa546:	4632      	mov	r2, r6
 23fa548:	463b      	mov	r3, r7
 23fa54a:	f7ec fb2d 	bl	23e6ba8 <__aeabi_dmul>
 23fa54e:	a388      	add	r3, pc, #544	; (adr r3, 23fa770 <atan+0x2e8>)
 23fa550:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa554:	f7ec f972 	bl	23e683c <__adddf3>
 23fa558:	4642      	mov	r2, r8
 23fa55a:	464b      	mov	r3, r9
 23fa55c:	f7ec fb24 	bl	23e6ba8 <__aeabi_dmul>
 23fa560:	4680      	mov	r8, r0
 23fa562:	4689      	mov	r9, r1
 23fa564:	4630      	mov	r0, r6
 23fa566:	4639      	mov	r1, r7
 23fa568:	a383      	add	r3, pc, #524	; (adr r3, 23fa778 <atan+0x2f0>)
 23fa56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa56e:	f7ec fb1b 	bl	23e6ba8 <__aeabi_dmul>
 23fa572:	a383      	add	r3, pc, #524	; (adr r3, 23fa780 <atan+0x2f8>)
 23fa574:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa578:	f7ec f95e 	bl	23e6838 <__aeabi_dsub>
 23fa57c:	4632      	mov	r2, r6
 23fa57e:	463b      	mov	r3, r7
 23fa580:	f7ec fb12 	bl	23e6ba8 <__aeabi_dmul>
 23fa584:	a380      	add	r3, pc, #512	; (adr r3, 23fa788 <atan+0x300>)
 23fa586:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa58a:	f7ec f955 	bl	23e6838 <__aeabi_dsub>
 23fa58e:	4632      	mov	r2, r6
 23fa590:	463b      	mov	r3, r7
 23fa592:	f7ec fb09 	bl	23e6ba8 <__aeabi_dmul>
 23fa596:	a37e      	add	r3, pc, #504	; (adr r3, 23fa790 <atan+0x308>)
 23fa598:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa59c:	f7ec f94c 	bl	23e6838 <__aeabi_dsub>
 23fa5a0:	4632      	mov	r2, r6
 23fa5a2:	463b      	mov	r3, r7
 23fa5a4:	f7ec fb00 	bl	23e6ba8 <__aeabi_dmul>
 23fa5a8:	a37b      	add	r3, pc, #492	; (adr r3, 23fa798 <atan+0x310>)
 23fa5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa5ae:	f7ec f943 	bl	23e6838 <__aeabi_dsub>
 23fa5b2:	4632      	mov	r2, r6
 23fa5b4:	463b      	mov	r3, r7
 23fa5b6:	f7ec faf7 	bl	23e6ba8 <__aeabi_dmul>
 23fa5ba:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 23fa5be:	4602      	mov	r2, r0
 23fa5c0:	460b      	mov	r3, r1
 23fa5c2:	4640      	mov	r0, r8
 23fa5c4:	4649      	mov	r1, r9
 23fa5c6:	d063      	beq.n	23fa690 <atan+0x208>
 23fa5c8:	4e7c      	ldr	r6, [pc, #496]	; (23fa7bc <atan+0x334>)
 23fa5ca:	f7ec f937 	bl	23e683c <__adddf3>
 23fa5ce:	4622      	mov	r2, r4
 23fa5d0:	462b      	mov	r3, r5
 23fa5d2:	f7ec fae9 	bl	23e6ba8 <__aeabi_dmul>
 23fa5d6:	4b7a      	ldr	r3, [pc, #488]	; (23fa7c0 <atan+0x338>)
 23fa5d8:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
 23fa5dc:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 23fa5e0:	449b      	add	fp, r3
 23fa5e2:	e9db 2300 	ldrd	r2, r3, [fp]
 23fa5e6:	f7ec f927 	bl	23e6838 <__aeabi_dsub>
 23fa5ea:	4622      	mov	r2, r4
 23fa5ec:	462b      	mov	r3, r5
 23fa5ee:	f7ec f923 	bl	23e6838 <__aeabi_dsub>
 23fa5f2:	4602      	mov	r2, r0
 23fa5f4:	460b      	mov	r3, r1
 23fa5f6:	e9d6 0100 	ldrd	r0, r1, [r6]
 23fa5fa:	f7ec f91d 	bl	23e6838 <__aeabi_dsub>
 23fa5fe:	f1ba 0f00 	cmp.w	sl, #0
 23fa602:	ec41 0b10 	vmov	d0, r0, r1
 23fa606:	f6bf af56 	bge.w	23fa4b6 <atan+0x2e>
 23fa60a:	ee10 1a90 	vmov	r1, s1
 23fa60e:	4602      	mov	r2, r0
 23fa610:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fa614:	ec43 2b10 	vmov	d0, r2, r3
 23fa618:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa61c:	a360      	add	r3, pc, #384	; (adr r3, 23fa7a0 <atan+0x318>)
 23fa61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa622:	ee10 0a10 	vmov	r0, s0
 23fa626:	4629      	mov	r1, r5
 23fa628:	f7ec f908 	bl	23e683c <__adddf3>
 23fa62c:	2200      	movs	r2, #0
 23fa62e:	4b65      	ldr	r3, [pc, #404]	; (23fa7c4 <atan+0x33c>)
 23fa630:	f7ec fd4a 	bl	23e70c8 <__aeabi_dcmpgt>
 23fa634:	2800      	cmp	r0, #0
 23fa636:	f43f af51 	beq.w	23fa4dc <atan+0x54>
 23fa63a:	ec45 4b10 	vmov	d0, r4, r5
 23fa63e:	e73a      	b.n	23fa4b6 <atan+0x2e>
 23fa640:	ed9f 0b59 	vldr	d0, [pc, #356]	; 23fa7a8 <atan+0x320>
 23fa644:	e737      	b.n	23fa4b6 <atan+0x2e>
 23fa646:	f000 f91b 	bl	23fa880 <fabs>
 23fa64a:	4b5f      	ldr	r3, [pc, #380]	; (23fa7c8 <atan+0x340>)
 23fa64c:	429e      	cmp	r6, r3
 23fa64e:	ec55 4b10 	vmov	r4, r5, d0
 23fa652:	dc2d      	bgt.n	23fa6b0 <atan+0x228>
 23fa654:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 23fa658:	429e      	cmp	r6, r3
 23fa65a:	dd58      	ble.n	23fa70e <atan+0x286>
 23fa65c:	2200      	movs	r2, #0
 23fa65e:	4b59      	ldr	r3, [pc, #356]	; (23fa7c4 <atan+0x33c>)
 23fa660:	ee10 0a10 	vmov	r0, s0
 23fa664:	4629      	mov	r1, r5
 23fa666:	f7ec f8e7 	bl	23e6838 <__aeabi_dsub>
 23fa66a:	f04f 0b01 	mov.w	fp, #1
 23fa66e:	4606      	mov	r6, r0
 23fa670:	460f      	mov	r7, r1
 23fa672:	4620      	mov	r0, r4
 23fa674:	4629      	mov	r1, r5
 23fa676:	2200      	movs	r2, #0
 23fa678:	4b52      	ldr	r3, [pc, #328]	; (23fa7c4 <atan+0x33c>)
 23fa67a:	f7ec f8df 	bl	23e683c <__adddf3>
 23fa67e:	4602      	mov	r2, r0
 23fa680:	460b      	mov	r3, r1
 23fa682:	4630      	mov	r0, r6
 23fa684:	4639      	mov	r1, r7
 23fa686:	f7ec fbb9 	bl	23e6dfc <__aeabi_ddiv>
 23fa68a:	4604      	mov	r4, r0
 23fa68c:	460d      	mov	r5, r1
 23fa68e:	e727      	b.n	23fa4e0 <atan+0x58>
 23fa690:	f7ec f8d4 	bl	23e683c <__adddf3>
 23fa694:	4622      	mov	r2, r4
 23fa696:	462b      	mov	r3, r5
 23fa698:	f7ec fa86 	bl	23e6ba8 <__aeabi_dmul>
 23fa69c:	4602      	mov	r2, r0
 23fa69e:	460b      	mov	r3, r1
 23fa6a0:	4620      	mov	r0, r4
 23fa6a2:	4629      	mov	r1, r5
 23fa6a4:	f7ec f8c8 	bl	23e6838 <__aeabi_dsub>
 23fa6a8:	ec41 0b10 	vmov	d0, r0, r1
 23fa6ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa6b0:	4b46      	ldr	r3, [pc, #280]	; (23fa7cc <atan+0x344>)
 23fa6b2:	429e      	cmp	r6, r3
 23fa6b4:	da1f      	bge.n	23fa6f6 <atan+0x26e>
 23fa6b6:	ee10 0a10 	vmov	r0, s0
 23fa6ba:	2200      	movs	r2, #0
 23fa6bc:	4b44      	ldr	r3, [pc, #272]	; (23fa7d0 <atan+0x348>)
 23fa6be:	4629      	mov	r1, r5
 23fa6c0:	f7ec f8ba 	bl	23e6838 <__aeabi_dsub>
 23fa6c4:	4602      	mov	r2, r0
 23fa6c6:	460b      	mov	r3, r1
 23fa6c8:	4620      	mov	r0, r4
 23fa6ca:	4629      	mov	r1, r5
 23fa6cc:	4614      	mov	r4, r2
 23fa6ce:	461d      	mov	r5, r3
 23fa6d0:	2200      	movs	r2, #0
 23fa6d2:	4b3f      	ldr	r3, [pc, #252]	; (23fa7d0 <atan+0x348>)
 23fa6d4:	f04f 0b02 	mov.w	fp, #2
 23fa6d8:	f7ec fa66 	bl	23e6ba8 <__aeabi_dmul>
 23fa6dc:	2200      	movs	r2, #0
 23fa6de:	4b39      	ldr	r3, [pc, #228]	; (23fa7c4 <atan+0x33c>)
 23fa6e0:	f7ec f8ac 	bl	23e683c <__adddf3>
 23fa6e4:	4602      	mov	r2, r0
 23fa6e6:	460b      	mov	r3, r1
 23fa6e8:	4620      	mov	r0, r4
 23fa6ea:	4629      	mov	r1, r5
 23fa6ec:	f7ec fb86 	bl	23e6dfc <__aeabi_ddiv>
 23fa6f0:	4604      	mov	r4, r0
 23fa6f2:	460d      	mov	r5, r1
 23fa6f4:	e6f4      	b.n	23fa4e0 <atan+0x58>
 23fa6f6:	462b      	mov	r3, r5
 23fa6f8:	2000      	movs	r0, #0
 23fa6fa:	4936      	ldr	r1, [pc, #216]	; (23fa7d4 <atan+0x34c>)
 23fa6fc:	ee10 2a10 	vmov	r2, s0
 23fa700:	f7ec fb7c 	bl	23e6dfc <__aeabi_ddiv>
 23fa704:	f04f 0b03 	mov.w	fp, #3
 23fa708:	4604      	mov	r4, r0
 23fa70a:	460d      	mov	r5, r1
 23fa70c:	e6e8      	b.n	23fa4e0 <atan+0x58>
 23fa70e:	ee10 2a10 	vmov	r2, s0
 23fa712:	462b      	mov	r3, r5
 23fa714:	ee10 0a10 	vmov	r0, s0
 23fa718:	4629      	mov	r1, r5
 23fa71a:	f7ec f88f 	bl	23e683c <__adddf3>
 23fa71e:	2200      	movs	r2, #0
 23fa720:	4b28      	ldr	r3, [pc, #160]	; (23fa7c4 <atan+0x33c>)
 23fa722:	f04f 0b00 	mov.w	fp, #0
 23fa726:	f7ec f887 	bl	23e6838 <__aeabi_dsub>
 23fa72a:	2200      	movs	r2, #0
 23fa72c:	4606      	mov	r6, r0
 23fa72e:	460f      	mov	r7, r1
 23fa730:	4620      	mov	r0, r4
 23fa732:	4629      	mov	r1, r5
 23fa734:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 23fa738:	e79f      	b.n	23fa67a <atan+0x1f2>
 23fa73a:	bf00      	nop
 23fa73c:	f3af 8000 	nop.w
 23fa740:	54442d18 	.word	0x54442d18
 23fa744:	3ff921fb 	.word	0x3ff921fb
 23fa748:	e322da11 	.word	0xe322da11
 23fa74c:	3f90ad3a 	.word	0x3f90ad3a
 23fa750:	24760deb 	.word	0x24760deb
 23fa754:	3fa97b4b 	.word	0x3fa97b4b
 23fa758:	a0d03d51 	.word	0xa0d03d51
 23fa75c:	3fb10d66 	.word	0x3fb10d66
 23fa760:	c54c206e 	.word	0xc54c206e
 23fa764:	3fb745cd 	.word	0x3fb745cd
 23fa768:	920083ff 	.word	0x920083ff
 23fa76c:	3fc24924 	.word	0x3fc24924
 23fa770:	5555550d 	.word	0x5555550d
 23fa774:	3fd55555 	.word	0x3fd55555
 23fa778:	2c6a6c2f 	.word	0x2c6a6c2f
 23fa77c:	bfa2b444 	.word	0xbfa2b444
 23fa780:	52defd9a 	.word	0x52defd9a
 23fa784:	3fadde2d 	.word	0x3fadde2d
 23fa788:	af749a6d 	.word	0xaf749a6d
 23fa78c:	3fb3b0f2 	.word	0x3fb3b0f2
 23fa790:	fe231671 	.word	0xfe231671
 23fa794:	3fbc71c6 	.word	0x3fbc71c6
 23fa798:	9998ebc4 	.word	0x9998ebc4
 23fa79c:	3fc99999 	.word	0x3fc99999
 23fa7a0:	8800759c 	.word	0x8800759c
 23fa7a4:	7e37e43c 	.word	0x7e37e43c
 23fa7a8:	54442d18 	.word	0x54442d18
 23fa7ac:	bff921fb 	.word	0xbff921fb
 23fa7b0:	440fffff 	.word	0x440fffff
 23fa7b4:	7ff00000 	.word	0x7ff00000
 23fa7b8:	3fdbffff 	.word	0x3fdbffff
 23fa7bc:	023ffbf0 	.word	0x023ffbf0
 23fa7c0:	023ffc10 	.word	0x023ffc10
 23fa7c4:	3ff00000 	.word	0x3ff00000
 23fa7c8:	3ff2ffff 	.word	0x3ff2ffff
 23fa7cc:	40038000 	.word	0x40038000
 23fa7d0:	3ff80000 	.word	0x3ff80000
 23fa7d4:	bff00000 	.word	0xbff00000

023fa7d8 <cos>:
 23fa7d8:	ec51 0b10 	vmov	r0, r1, d0
 23fa7dc:	4a26      	ldr	r2, [pc, #152]	; (23fa878 <cos+0xa0>)
 23fa7de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23fa7e2:	4293      	cmp	r3, r2
 23fa7e4:	dd20      	ble.n	23fa828 <cos+0x50>
 23fa7e6:	4a25      	ldr	r2, [pc, #148]	; (23fa87c <cos+0xa4>)
 23fa7e8:	4293      	cmp	r3, r2
 23fa7ea:	b500      	push	{lr}
 23fa7ec:	b085      	sub	sp, #20
 23fa7ee:	dd09      	ble.n	23fa804 <cos+0x2c>
 23fa7f0:	ee10 2a10 	vmov	r2, s0
 23fa7f4:	460b      	mov	r3, r1
 23fa7f6:	f7ec f81f 	bl	23e6838 <__aeabi_dsub>
 23fa7fa:	ec41 0b10 	vmov	d0, r0, r1
 23fa7fe:	b005      	add	sp, #20
 23fa800:	f85d fb04 	ldr.w	pc, [sp], #4
 23fa804:	4668      	mov	r0, sp
 23fa806:	f001 f8a7 	bl	23fb958 <__ieee754_rem_pio2>
 23fa80a:	f000 0003 	and.w	r0, r0, #3
 23fa80e:	2801      	cmp	r0, #1
 23fa810:	d00e      	beq.n	23fa830 <cos+0x58>
 23fa812:	2802      	cmp	r0, #2
 23fa814:	d022      	beq.n	23fa85c <cos+0x84>
 23fa816:	b1d0      	cbz	r0, 23fa84e <cos+0x76>
 23fa818:	2001      	movs	r0, #1
 23fa81a:	ed9d 1b02 	vldr	d1, [sp, #8]
 23fa81e:	ed9d 0b00 	vldr	d0, [sp]
 23fa822:	f002 f8e5 	bl	23fc9f0 <__kernel_sin>
 23fa826:	e7ea      	b.n	23fa7fe <cos+0x26>
 23fa828:	ed9f 1b11 	vldr	d1, [pc, #68]	; 23fa870 <cos+0x98>
 23fa82c:	f001 bb7c 	b.w	23fbf28 <__kernel_cos>
 23fa830:	ed9d 1b02 	vldr	d1, [sp, #8]
 23fa834:	ed9d 0b00 	vldr	d0, [sp]
 23fa838:	f002 f8da 	bl	23fc9f0 <__kernel_sin>
 23fa83c:	ec53 2b10 	vmov	r2, r3, d0
 23fa840:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 23fa844:	ee00 3a90 	vmov	s1, r3
 23fa848:	b005      	add	sp, #20
 23fa84a:	f85d fb04 	ldr.w	pc, [sp], #4
 23fa84e:	ed9d 1b02 	vldr	d1, [sp, #8]
 23fa852:	ed9d 0b00 	vldr	d0, [sp]
 23fa856:	f001 fb67 	bl	23fbf28 <__kernel_cos>
 23fa85a:	e7d0      	b.n	23fa7fe <cos+0x26>
 23fa85c:	ed9d 1b02 	vldr	d1, [sp, #8]
 23fa860:	ed9d 0b00 	vldr	d0, [sp]
 23fa864:	f001 fb60 	bl	23fbf28 <__kernel_cos>
 23fa868:	e7e8      	b.n	23fa83c <cos+0x64>
 23fa86a:	bf00      	nop
 23fa86c:	f3af 8000 	nop.w
	...
 23fa878:	3fe921fb 	.word	0x3fe921fb
 23fa87c:	7fefffff 	.word	0x7fefffff

023fa880 <fabs>:
 23fa880:	ec51 0b10 	vmov	r0, r1, d0
 23fa884:	ee10 2a10 	vmov	r2, s0
 23fa888:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23fa88c:	ec43 2b10 	vmov	d0, r2, r3
 23fa890:	4770      	bx	lr
 23fa892:	bf00      	nop
 23fa894:	0000      	movs	r0, r0
	...

023fa898 <scalbn>:
 23fa898:	b538      	push	{r3, r4, r5, lr}
 23fa89a:	ec53 2b10 	vmov	r2, r3, d0
 23fa89e:	f3c3 510a 	ubfx	r1, r3, #20, #11
 23fa8a2:	469c      	mov	ip, r3
 23fa8a4:	4604      	mov	r4, r0
 23fa8a6:	bb89      	cbnz	r1, 23fa90c <scalbn+0x74>
 23fa8a8:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 23fa8ac:	ee10 1a10 	vmov	r1, s0
 23fa8b0:	ea5c 0101 	orrs.w	r1, ip, r1
 23fa8b4:	d029      	beq.n	23fa90a <scalbn+0x72>
 23fa8b6:	4d3e      	ldr	r5, [pc, #248]	; (23fa9b0 <scalbn+0x118>)
 23fa8b8:	4619      	mov	r1, r3
 23fa8ba:	2200      	movs	r2, #0
 23fa8bc:	4b3d      	ldr	r3, [pc, #244]	; (23fa9b4 <scalbn+0x11c>)
 23fa8be:	ee10 0a10 	vmov	r0, s0
 23fa8c2:	f7ec f971 	bl	23e6ba8 <__aeabi_dmul>
 23fa8c6:	42ac      	cmp	r4, r5
 23fa8c8:	4602      	mov	r2, r0
 23fa8ca:	460b      	mov	r3, r1
 23fa8cc:	db16      	blt.n	23fa8fc <scalbn+0x64>
 23fa8ce:	468c      	mov	ip, r1
 23fa8d0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 23fa8d4:	3936      	subs	r1, #54	; 0x36
 23fa8d6:	4421      	add	r1, r4
 23fa8d8:	f240 70fe 	movw	r0, #2046	; 0x7fe
 23fa8dc:	4281      	cmp	r1, r0
 23fa8de:	dc21      	bgt.n	23fa924 <scalbn+0x8c>
 23fa8e0:	2900      	cmp	r1, #0
 23fa8e2:	dc47      	bgt.n	23fa974 <scalbn+0xdc>
 23fa8e4:	f111 0f35 	cmn.w	r1, #53	; 0x35
 23fa8e8:	da34      	bge.n	23fa954 <scalbn+0xbc>
 23fa8ea:	f24c 3150 	movw	r1, #50000	; 0xc350
 23fa8ee:	428c      	cmp	r4, r1
 23fa8f0:	dc18      	bgt.n	23fa924 <scalbn+0x8c>
 23fa8f2:	2b00      	cmp	r3, #0
 23fa8f4:	a126      	add	r1, pc, #152	; (adr r1, 23fa990 <scalbn+0xf8>)
 23fa8f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fa8fa:	db43      	blt.n	23fa984 <scalbn+0xec>
 23fa8fc:	a324      	add	r3, pc, #144	; (adr r3, 23fa990 <scalbn+0xf8>)
 23fa8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa902:	f7ec f951 	bl	23e6ba8 <__aeabi_dmul>
 23fa906:	ec41 0b10 	vmov	d0, r0, r1
 23fa90a:	bd38      	pop	{r3, r4, r5, pc}
 23fa90c:	f240 7eff 	movw	lr, #2047	; 0x7ff
 23fa910:	4571      	cmp	r1, lr
 23fa912:	d1e0      	bne.n	23fa8d6 <scalbn+0x3e>
 23fa914:	ee10 0a10 	vmov	r0, s0
 23fa918:	4619      	mov	r1, r3
 23fa91a:	f7eb ff8f 	bl	23e683c <__adddf3>
 23fa91e:	ec41 0b10 	vmov	d0, r0, r1
 23fa922:	bd38      	pop	{r3, r4, r5, pc}
 23fa924:	2b00      	cmp	r3, #0
 23fa926:	a11c      	add	r1, pc, #112	; (adr r1, 23fa998 <scalbn+0x100>)
 23fa928:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fa92c:	db07      	blt.n	23fa93e <scalbn+0xa6>
 23fa92e:	a31a      	add	r3, pc, #104	; (adr r3, 23fa998 <scalbn+0x100>)
 23fa930:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa934:	f7ec f938 	bl	23e6ba8 <__aeabi_dmul>
 23fa938:	ec41 0b10 	vmov	d0, r0, r1
 23fa93c:	bd38      	pop	{r3, r4, r5, pc}
 23fa93e:	a118      	add	r1, pc, #96	; (adr r1, 23fa9a0 <scalbn+0x108>)
 23fa940:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fa944:	a314      	add	r3, pc, #80	; (adr r3, 23fa998 <scalbn+0x100>)
 23fa946:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa94a:	f7ec f92d 	bl	23e6ba8 <__aeabi_dmul>
 23fa94e:	ec41 0b10 	vmov	d0, r0, r1
 23fa952:	e7f3      	b.n	23fa93c <scalbn+0xa4>
 23fa954:	4818      	ldr	r0, [pc, #96]	; (23fa9b8 <scalbn+0x120>)
 23fa956:	3136      	adds	r1, #54	; 0x36
 23fa958:	4614      	mov	r4, r2
 23fa95a:	4b18      	ldr	r3, [pc, #96]	; (23fa9bc <scalbn+0x124>)
 23fa95c:	ea0c 0000 	and.w	r0, ip, r0
 23fa960:	2200      	movs	r2, #0
 23fa962:	ea40 5501 	orr.w	r5, r0, r1, lsl #20
 23fa966:	4620      	mov	r0, r4
 23fa968:	4629      	mov	r1, r5
 23fa96a:	f7ec f91d 	bl	23e6ba8 <__aeabi_dmul>
 23fa96e:	ec41 0b10 	vmov	d0, r0, r1
 23fa972:	bd38      	pop	{r3, r4, r5, pc}
 23fa974:	4810      	ldr	r0, [pc, #64]	; (23fa9b8 <scalbn+0x120>)
 23fa976:	ea0c 0000 	and.w	r0, ip, r0
 23fa97a:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
 23fa97e:	ec43 2b10 	vmov	d0, r2, r3
 23fa982:	bd38      	pop	{r3, r4, r5, pc}
 23fa984:	a108      	add	r1, pc, #32	; (adr r1, 23fa9a8 <scalbn+0x110>)
 23fa986:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fa98a:	e7b7      	b.n	23fa8fc <scalbn+0x64>
 23fa98c:	f3af 8000 	nop.w
 23fa990:	c2f8f359 	.word	0xc2f8f359
 23fa994:	01a56e1f 	.word	0x01a56e1f
 23fa998:	8800759c 	.word	0x8800759c
 23fa99c:	7e37e43c 	.word	0x7e37e43c
 23fa9a0:	8800759c 	.word	0x8800759c
 23fa9a4:	fe37e43c 	.word	0xfe37e43c
 23fa9a8:	c2f8f359 	.word	0xc2f8f359
 23fa9ac:	81a56e1f 	.word	0x81a56e1f
 23fa9b0:	ffff3cb0 	.word	0xffff3cb0
 23fa9b4:	43500000 	.word	0x43500000
 23fa9b8:	800fffff 	.word	0x800fffff
 23fa9bc:	3c900000 	.word	0x3c900000

023fa9c0 <sin>:
 23fa9c0:	ec51 0b10 	vmov	r0, r1, d0
 23fa9c4:	4a26      	ldr	r2, [pc, #152]	; (23faa60 <sin+0xa0>)
 23fa9c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23fa9ca:	4293      	cmp	r3, r2
 23fa9cc:	dd27      	ble.n	23faa1e <sin+0x5e>
 23fa9ce:	4a25      	ldr	r2, [pc, #148]	; (23faa64 <sin+0xa4>)
 23fa9d0:	4293      	cmp	r3, r2
 23fa9d2:	b500      	push	{lr}
 23fa9d4:	b085      	sub	sp, #20
 23fa9d6:	dd09      	ble.n	23fa9ec <sin+0x2c>
 23fa9d8:	ee10 2a10 	vmov	r2, s0
 23fa9dc:	460b      	mov	r3, r1
 23fa9de:	f7eb ff2b 	bl	23e6838 <__aeabi_dsub>
 23fa9e2:	ec41 0b10 	vmov	d0, r0, r1
 23fa9e6:	b005      	add	sp, #20
 23fa9e8:	f85d fb04 	ldr.w	pc, [sp], #4
 23fa9ec:	4668      	mov	r0, sp
 23fa9ee:	f000 ffb3 	bl	23fb958 <__ieee754_rem_pio2>
 23fa9f2:	f000 0003 	and.w	r0, r0, #3
 23fa9f6:	2801      	cmp	r0, #1
 23fa9f8:	d016      	beq.n	23faa28 <sin+0x68>
 23fa9fa:	2802      	cmp	r0, #2
 23fa9fc:	d023      	beq.n	23faa46 <sin+0x86>
 23fa9fe:	b1d0      	cbz	r0, 23faa36 <sin+0x76>
 23faa00:	ed9d 1b02 	vldr	d1, [sp, #8]
 23faa04:	ed9d 0b00 	vldr	d0, [sp]
 23faa08:	f001 fa8e 	bl	23fbf28 <__kernel_cos>
 23faa0c:	ec53 2b10 	vmov	r2, r3, d0
 23faa10:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 23faa14:	ee00 3a90 	vmov	s1, r3
 23faa18:	b005      	add	sp, #20
 23faa1a:	f85d fb04 	ldr.w	pc, [sp], #4
 23faa1e:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 23faa58 <sin+0x98>
 23faa22:	2000      	movs	r0, #0
 23faa24:	f001 bfe4 	b.w	23fc9f0 <__kernel_sin>
 23faa28:	ed9d 1b02 	vldr	d1, [sp, #8]
 23faa2c:	ed9d 0b00 	vldr	d0, [sp]
 23faa30:	f001 fa7a 	bl	23fbf28 <__kernel_cos>
 23faa34:	e7d7      	b.n	23fa9e6 <sin+0x26>
 23faa36:	ed9d 1b02 	vldr	d1, [sp, #8]
 23faa3a:	ed9d 0b00 	vldr	d0, [sp]
 23faa3e:	2001      	movs	r0, #1
 23faa40:	f001 ffd6 	bl	23fc9f0 <__kernel_sin>
 23faa44:	e7cf      	b.n	23fa9e6 <sin+0x26>
 23faa46:	ed9d 1b02 	vldr	d1, [sp, #8]
 23faa4a:	ed9d 0b00 	vldr	d0, [sp]
 23faa4e:	2001      	movs	r0, #1
 23faa50:	f001 ffce 	bl	23fc9f0 <__kernel_sin>
 23faa54:	e7da      	b.n	23faa0c <sin+0x4c>
 23faa56:	bf00      	nop
	...
 23faa60:	3fe921fb 	.word	0x3fe921fb
 23faa64:	7fefffff 	.word	0x7fefffff

023faa68 <atan2>:
 23faa68:	f000 b90e 	b.w	23fac88 <__ieee754_atan2>
 23faa6c:	0000      	movs	r0, r0
	...

023faa70 <pow>:
 23faa70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23faa72:	ed2d 8b02 	vpush	{d8}
 23faa76:	ec57 6b10 	vmov	r6, r7, d0
 23faa7a:	ec55 4b11 	vmov	r4, r5, d1
 23faa7e:	f000 f9d7 	bl	23fae30 <__ieee754_pow>
 23faa82:	4b63      	ldr	r3, [pc, #396]	; (23fac10 <pow+0x1a0>)
 23faa84:	eeb0 8a40 	vmov.f32	s16, s0
 23faa88:	eef0 8a60 	vmov.f32	s17, s1
 23faa8c:	f993 3000 	ldrsb.w	r3, [r3]
 23faa90:	3301      	adds	r3, #1
 23faa92:	d02a      	beq.n	23faaea <pow+0x7a>
 23faa94:	4622      	mov	r2, r4
 23faa96:	462b      	mov	r3, r5
 23faa98:	4620      	mov	r0, r4
 23faa9a:	4629      	mov	r1, r5
 23faa9c:	f7ec fb1e 	bl	23e70dc <__aeabi_dcmpun>
 23faaa0:	bb18      	cbnz	r0, 23faaea <pow+0x7a>
 23faaa2:	4632      	mov	r2, r6
 23faaa4:	463b      	mov	r3, r7
 23faaa6:	4630      	mov	r0, r6
 23faaa8:	4639      	mov	r1, r7
 23faaaa:	f7ec fb17 	bl	23e70dc <__aeabi_dcmpun>
 23faaae:	2800      	cmp	r0, #0
 23faab0:	d144      	bne.n	23fab3c <pow+0xcc>
 23faab2:	2200      	movs	r2, #0
 23faab4:	2300      	movs	r3, #0
 23faab6:	4630      	mov	r0, r6
 23faab8:	4639      	mov	r1, r7
 23faaba:	f7ec fadd 	bl	23e7078 <__aeabi_dcmpeq>
 23faabe:	b1d8      	cbz	r0, 23faaf8 <pow+0x88>
 23faac0:	2200      	movs	r2, #0
 23faac2:	2300      	movs	r3, #0
 23faac4:	4620      	mov	r0, r4
 23faac6:	4629      	mov	r1, r5
 23faac8:	f7ec fad6 	bl	23e7078 <__aeabi_dcmpeq>
 23faacc:	2800      	cmp	r0, #0
 23faace:	d13d      	bne.n	23fab4c <pow+0xdc>
 23faad0:	ec45 4b10 	vmov	d0, r4, r5
 23faad4:	f002 f852 	bl	23fcb7c <finite>
 23faad8:	b138      	cbz	r0, 23faaea <pow+0x7a>
 23faada:	4620      	mov	r0, r4
 23faadc:	4629      	mov	r1, r5
 23faade:	2200      	movs	r2, #0
 23faae0:	2300      	movs	r3, #0
 23faae2:	f7ec fad3 	bl	23e708c <__aeabi_dcmplt>
 23faae6:	2800      	cmp	r0, #0
 23faae8:	d15c      	bne.n	23faba4 <pow+0x134>
 23faaea:	eeb0 0a48 	vmov.f32	s0, s16
 23faaee:	eef0 0a68 	vmov.f32	s1, s17
 23faaf2:	ecbd 8b02 	vpop	{d8}
 23faaf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23faaf8:	eeb0 0a48 	vmov.f32	s0, s16
 23faafc:	eef0 0a68 	vmov.f32	s1, s17
 23fab00:	f002 f83c 	bl	23fcb7c <finite>
 23fab04:	b358      	cbz	r0, 23fab5e <pow+0xee>
 23fab06:	2200      	movs	r2, #0
 23fab08:	2300      	movs	r3, #0
 23fab0a:	ec51 0b18 	vmov	r0, r1, d8
 23fab0e:	f7ec fab3 	bl	23e7078 <__aeabi_dcmpeq>
 23fab12:	2800      	cmp	r0, #0
 23fab14:	d0e9      	beq.n	23faaea <pow+0x7a>
 23fab16:	ec47 6b10 	vmov	d0, r6, r7
 23fab1a:	f002 f82f 	bl	23fcb7c <finite>
 23fab1e:	2800      	cmp	r0, #0
 23fab20:	d0e3      	beq.n	23faaea <pow+0x7a>
 23fab22:	ec45 4b10 	vmov	d0, r4, r5
 23fab26:	f002 f829 	bl	23fcb7c <finite>
 23fab2a:	2800      	cmp	r0, #0
 23fab2c:	d0dd      	beq.n	23faaea <pow+0x7a>
 23fab2e:	f7fd fba1 	bl	23f8274 <__errno>
 23fab32:	2322      	movs	r3, #34	; 0x22
 23fab34:	ed9f 8b2e 	vldr	d8, [pc, #184]	; 23fabf0 <pow+0x180>
 23fab38:	6003      	str	r3, [r0, #0]
 23fab3a:	e7d6      	b.n	23faaea <pow+0x7a>
 23fab3c:	4620      	mov	r0, r4
 23fab3e:	4629      	mov	r1, r5
 23fab40:	2200      	movs	r2, #0
 23fab42:	2300      	movs	r3, #0
 23fab44:	f7ec fa98 	bl	23e7078 <__aeabi_dcmpeq>
 23fab48:	2800      	cmp	r0, #0
 23fab4a:	d0ce      	beq.n	23faaea <pow+0x7a>
 23fab4c:	ed9f 8b2a 	vldr	d8, [pc, #168]	; 23fabf8 <pow+0x188>
 23fab50:	eeb0 0a48 	vmov.f32	s0, s16
 23fab54:	eef0 0a68 	vmov.f32	s1, s17
 23fab58:	ecbd 8b02 	vpop	{d8}
 23fab5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fab5e:	ec47 6b10 	vmov	d0, r6, r7
 23fab62:	f002 f80b 	bl	23fcb7c <finite>
 23fab66:	2800      	cmp	r0, #0
 23fab68:	d0cd      	beq.n	23fab06 <pow+0x96>
 23fab6a:	ec45 4b10 	vmov	d0, r4, r5
 23fab6e:	f002 f805 	bl	23fcb7c <finite>
 23fab72:	2800      	cmp	r0, #0
 23fab74:	d0c7      	beq.n	23fab06 <pow+0x96>
 23fab76:	ee18 0a10 	vmov	r0, s16
 23fab7a:	ec53 2b18 	vmov	r2, r3, d8
 23fab7e:	4619      	mov	r1, r3
 23fab80:	f7ec faac 	bl	23e70dc <__aeabi_dcmpun>
 23fab84:	bb20      	cbnz	r0, 23fabd0 <pow+0x160>
 23fab86:	f7fd fb75 	bl	23f8274 <__errno>
 23fab8a:	2222      	movs	r2, #34	; 0x22
 23fab8c:	4603      	mov	r3, r0
 23fab8e:	4639      	mov	r1, r7
 23fab90:	4630      	mov	r0, r6
 23fab92:	601a      	str	r2, [r3, #0]
 23fab94:	2200      	movs	r2, #0
 23fab96:	2300      	movs	r3, #0
 23fab98:	f7ec fa78 	bl	23e708c <__aeabi_dcmplt>
 23fab9c:	b948      	cbnz	r0, 23fabb2 <pow+0x142>
 23fab9e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 23fac00 <pow+0x190>
 23faba2:	e7a2      	b.n	23faaea <pow+0x7a>
 23faba4:	f7fd fb66 	bl	23f8274 <__errno>
 23faba8:	2321      	movs	r3, #33	; 0x21
 23fabaa:	ed9f 8b17 	vldr	d8, [pc, #92]	; 23fac08 <pow+0x198>
 23fabae:	6003      	str	r3, [r0, #0]
 23fabb0:	e79b      	b.n	23faaea <pow+0x7a>
 23fabb2:	ec45 4b10 	vmov	d0, r4, r5
 23fabb6:	f002 f87b 	bl	23fccb0 <rint>
 23fabba:	4622      	mov	r2, r4
 23fabbc:	462b      	mov	r3, r5
 23fabbe:	ec51 0b10 	vmov	r0, r1, d0
 23fabc2:	f7ec fa59 	bl	23e7078 <__aeabi_dcmpeq>
 23fabc6:	2800      	cmp	r0, #0
 23fabc8:	d1e9      	bne.n	23fab9e <pow+0x12e>
 23fabca:	ed9f 8b0f 	vldr	d8, [pc, #60]	; 23fac08 <pow+0x198>
 23fabce:	e78c      	b.n	23faaea <pow+0x7a>
 23fabd0:	f7fd fb50 	bl	23f8274 <__errno>
 23fabd4:	2200      	movs	r2, #0
 23fabd6:	2300      	movs	r3, #0
 23fabd8:	2121      	movs	r1, #33	; 0x21
 23fabda:	6001      	str	r1, [r0, #0]
 23fabdc:	4610      	mov	r0, r2
 23fabde:	4619      	mov	r1, r3
 23fabe0:	f7ec f90c 	bl	23e6dfc <__aeabi_ddiv>
 23fabe4:	ec41 0b18 	vmov	d8, r0, r1
 23fabe8:	e77f      	b.n	23faaea <pow+0x7a>
 23fabea:	bf00      	nop
 23fabec:	f3af 8000 	nop.w
	...
 23fabfc:	3ff00000 	.word	0x3ff00000
 23fac00:	00000000 	.word	0x00000000
 23fac04:	7ff00000 	.word	0x7ff00000
 23fac08:	00000000 	.word	0x00000000
 23fac0c:	fff00000 	.word	0xfff00000
 23fac10:	1006a27c 	.word	0x1006a27c

023fac14 <sqrt>:
 23fac14:	b538      	push	{r3, r4, r5, lr}
 23fac16:	ed2d 8b02 	vpush	{d8}
 23fac1a:	ec55 4b10 	vmov	r4, r5, d0
 23fac1e:	f001 f8c1 	bl	23fbda4 <__ieee754_sqrt>
 23fac22:	4b18      	ldr	r3, [pc, #96]	; (23fac84 <sqrt+0x70>)
 23fac24:	eeb0 8a40 	vmov.f32	s16, s0
 23fac28:	eef0 8a60 	vmov.f32	s17, s1
 23fac2c:	f993 3000 	ldrsb.w	r3, [r3]
 23fac30:	3301      	adds	r3, #1
 23fac32:	d00d      	beq.n	23fac50 <sqrt+0x3c>
 23fac34:	4622      	mov	r2, r4
 23fac36:	462b      	mov	r3, r5
 23fac38:	4620      	mov	r0, r4
 23fac3a:	4629      	mov	r1, r5
 23fac3c:	f7ec fa4e 	bl	23e70dc <__aeabi_dcmpun>
 23fac40:	b930      	cbnz	r0, 23fac50 <sqrt+0x3c>
 23fac42:	2200      	movs	r2, #0
 23fac44:	2300      	movs	r3, #0
 23fac46:	4620      	mov	r0, r4
 23fac48:	4629      	mov	r1, r5
 23fac4a:	f7ec fa1f 	bl	23e708c <__aeabi_dcmplt>
 23fac4e:	b930      	cbnz	r0, 23fac5e <sqrt+0x4a>
 23fac50:	eeb0 0a48 	vmov.f32	s0, s16
 23fac54:	eef0 0a68 	vmov.f32	s1, s17
 23fac58:	ecbd 8b02 	vpop	{d8}
 23fac5c:	bd38      	pop	{r3, r4, r5, pc}
 23fac5e:	f7fd fb09 	bl	23f8274 <__errno>
 23fac62:	2200      	movs	r2, #0
 23fac64:	2300      	movs	r3, #0
 23fac66:	2121      	movs	r1, #33	; 0x21
 23fac68:	6001      	str	r1, [r0, #0]
 23fac6a:	4610      	mov	r0, r2
 23fac6c:	4619      	mov	r1, r3
 23fac6e:	f7ec f8c5 	bl	23e6dfc <__aeabi_ddiv>
 23fac72:	ec41 0b18 	vmov	d8, r0, r1
 23fac76:	eeb0 0a48 	vmov.f32	s0, s16
 23fac7a:	eef0 0a68 	vmov.f32	s1, s17
 23fac7e:	ecbd 8b02 	vpop	{d8}
 23fac82:	bd38      	pop	{r3, r4, r5, pc}
 23fac84:	1006a27c 	.word	0x1006a27c

023fac88 <__ieee754_atan2>:
 23fac88:	ec51 0b11 	vmov	r0, r1, d1
 23fac8c:	4243      	negs	r3, r0
 23fac8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fac92:	4303      	orrs	r3, r0
 23fac94:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 23fac98:	4e61      	ldr	r6, [pc, #388]	; (23fae20 <__ieee754_atan2+0x198>)
 23fac9a:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
 23fac9e:	42b3      	cmp	r3, r6
 23faca0:	ec55 4b10 	vmov	r4, r5, d0
 23faca4:	d83c      	bhi.n	23fad20 <__ieee754_atan2+0x98>
 23faca6:	4263      	negs	r3, r4
 23faca8:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
 23facac:	46a9      	mov	r9, r5
 23facae:	4323      	orrs	r3, r4
 23facb0:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
 23facb4:	42b3      	cmp	r3, r6
 23facb6:	d833      	bhi.n	23fad20 <__ieee754_atan2+0x98>
 23facb8:	4b5a      	ldr	r3, [pc, #360]	; (23fae24 <__ieee754_atan2+0x19c>)
 23facba:	440b      	add	r3, r1
 23facbc:	4303      	orrs	r3, r0
 23facbe:	d03e      	beq.n	23fad3e <__ieee754_atan2+0xb6>
 23facc0:	178f      	asrs	r7, r1, #30
 23facc2:	ea5a 0304 	orrs.w	r3, sl, r4
 23facc6:	f007 0702 	and.w	r7, r7, #2
 23facca:	ea47 77d5 	orr.w	r7, r7, r5, lsr #31
 23facce:	d02f      	beq.n	23fad30 <__ieee754_atan2+0xa8>
 23facd0:	ea5e 0300 	orrs.w	r3, lr, r0
 23facd4:	d037      	beq.n	23fad46 <__ieee754_atan2+0xbe>
 23facd6:	45b6      	cmp	lr, r6
 23facd8:	d044      	beq.n	23fad64 <__ieee754_atan2+0xdc>
 23facda:	45b2      	cmp	sl, r6
 23facdc:	d033      	beq.n	23fad46 <__ieee754_atan2+0xbe>
 23facde:	ebaa 0e0e 	sub.w	lr, sl, lr
 23face2:	f1be 7f74 	cmp.w	lr, #63963136	; 0x3d00000
 23face6:	ea4f 532e 	mov.w	r3, lr, asr #20
 23facea:	da38      	bge.n	23fad5e <__ieee754_atan2+0xd6>
 23facec:	2900      	cmp	r1, #0
 23facee:	da6a      	bge.n	23fadc6 <__ieee754_atan2+0x13e>
 23facf0:	333c      	adds	r3, #60	; 0x3c
 23facf2:	da68      	bge.n	23fadc6 <__ieee754_atan2+0x13e>
 23facf4:	ed9f 0b3c 	vldr	d0, [pc, #240]	; 23fade8 <__ieee754_atan2+0x160>
 23facf8:	2f01      	cmp	r7, #1
 23facfa:	d050      	beq.n	23fad9e <__ieee754_atan2+0x116>
 23facfc:	2f02      	cmp	r7, #2
 23facfe:	d03d      	beq.n	23fad7c <__ieee754_atan2+0xf4>
 23fad00:	b1a7      	cbz	r7, 23fad2c <__ieee754_atan2+0xa4>
 23fad02:	ec51 0b10 	vmov	r0, r1, d0
 23fad06:	a33a      	add	r3, pc, #232	; (adr r3, 23fadf0 <__ieee754_atan2+0x168>)
 23fad08:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fad0c:	f7eb fd94 	bl	23e6838 <__aeabi_dsub>
 23fad10:	a339      	add	r3, pc, #228	; (adr r3, 23fadf8 <__ieee754_atan2+0x170>)
 23fad12:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fad16:	f7eb fd8f 	bl	23e6838 <__aeabi_dsub>
 23fad1a:	ec41 0b10 	vmov	d0, r0, r1
 23fad1e:	e005      	b.n	23fad2c <__ieee754_atan2+0xa4>
 23fad20:	4622      	mov	r2, r4
 23fad22:	462b      	mov	r3, r5
 23fad24:	f7eb fd8a 	bl	23e683c <__adddf3>
 23fad28:	ec41 0b10 	vmov	d0, r0, r1
 23fad2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fad30:	2f02      	cmp	r7, #2
 23fad32:	d00e      	beq.n	23fad52 <__ieee754_atan2+0xca>
 23fad34:	2f03      	cmp	r7, #3
 23fad36:	d1f9      	bne.n	23fad2c <__ieee754_atan2+0xa4>
 23fad38:	ed9f 0b31 	vldr	d0, [pc, #196]	; 23fae00 <__ieee754_atan2+0x178>
 23fad3c:	e7f6      	b.n	23fad2c <__ieee754_atan2+0xa4>
 23fad3e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fad42:	f7ff bba1 	b.w	23fa488 <atan>
 23fad46:	f1b9 0f00 	cmp.w	r9, #0
 23fad4a:	db05      	blt.n	23fad58 <__ieee754_atan2+0xd0>
 23fad4c:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 23fae08 <__ieee754_atan2+0x180>
 23fad50:	e7ec      	b.n	23fad2c <__ieee754_atan2+0xa4>
 23fad52:	ed9f 0b29 	vldr	d0, [pc, #164]	; 23fadf8 <__ieee754_atan2+0x170>
 23fad56:	e7e9      	b.n	23fad2c <__ieee754_atan2+0xa4>
 23fad58:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 23fae10 <__ieee754_atan2+0x188>
 23fad5c:	e7e6      	b.n	23fad2c <__ieee754_atan2+0xa4>
 23fad5e:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 23fae08 <__ieee754_atan2+0x180>
 23fad62:	e7c9      	b.n	23facf8 <__ieee754_atan2+0x70>
 23fad64:	45f2      	cmp	sl, lr
 23fad66:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 23fad6a:	d021      	beq.n	23fadb0 <__ieee754_atan2+0x128>
 23fad6c:	2f02      	cmp	r7, #2
 23fad6e:	d827      	bhi.n	23fadc0 <__ieee754_atan2+0x138>
 23fad70:	4b2d      	ldr	r3, [pc, #180]	; (23fae28 <__ieee754_atan2+0x1a0>)
 23fad72:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 23fad76:	ed97 0b00 	vldr	d0, [r7]
 23fad7a:	e7d7      	b.n	23fad2c <__ieee754_atan2+0xa4>
 23fad7c:	a31c      	add	r3, pc, #112	; (adr r3, 23fadf0 <__ieee754_atan2+0x168>)
 23fad7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fad82:	ec51 0b10 	vmov	r0, r1, d0
 23fad86:	f7eb fd57 	bl	23e6838 <__aeabi_dsub>
 23fad8a:	4602      	mov	r2, r0
 23fad8c:	460b      	mov	r3, r1
 23fad8e:	a11a      	add	r1, pc, #104	; (adr r1, 23fadf8 <__ieee754_atan2+0x170>)
 23fad90:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fad94:	f7eb fd50 	bl	23e6838 <__aeabi_dsub>
 23fad98:	ec41 0b10 	vmov	d0, r0, r1
 23fad9c:	e7c6      	b.n	23fad2c <__ieee754_atan2+0xa4>
 23fad9e:	ee10 1a90 	vmov	r1, s1
 23fada2:	ec53 2b10 	vmov	r2, r3, d0
 23fada6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fadaa:	ec43 2b10 	vmov	d0, r2, r3
 23fadae:	e7bd      	b.n	23fad2c <__ieee754_atan2+0xa4>
 23fadb0:	2f02      	cmp	r7, #2
 23fadb2:	d815      	bhi.n	23fade0 <__ieee754_atan2+0x158>
 23fadb4:	4b1d      	ldr	r3, [pc, #116]	; (23fae2c <__ieee754_atan2+0x1a4>)
 23fadb6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 23fadba:	ed97 0b00 	vldr	d0, [r7]
 23fadbe:	e7b5      	b.n	23fad2c <__ieee754_atan2+0xa4>
 23fadc0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 23fade8 <__ieee754_atan2+0x160>
 23fadc4:	e7b2      	b.n	23fad2c <__ieee754_atan2+0xa4>
 23fadc6:	4602      	mov	r2, r0
 23fadc8:	460b      	mov	r3, r1
 23fadca:	4620      	mov	r0, r4
 23fadcc:	4629      	mov	r1, r5
 23fadce:	f7ec f815 	bl	23e6dfc <__aeabi_ddiv>
 23fadd2:	ec41 0b10 	vmov	d0, r0, r1
 23fadd6:	f7ff fd53 	bl	23fa880 <fabs>
 23fadda:	f7ff fb55 	bl	23fa488 <atan>
 23fadde:	e78b      	b.n	23facf8 <__ieee754_atan2+0x70>
 23fade0:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 23fae18 <__ieee754_atan2+0x190>
 23fade4:	e7a2      	b.n	23fad2c <__ieee754_atan2+0xa4>
 23fade6:	bf00      	nop
	...
 23fadf0:	33145c07 	.word	0x33145c07
 23fadf4:	3ca1a626 	.word	0x3ca1a626
 23fadf8:	54442d18 	.word	0x54442d18
 23fadfc:	400921fb 	.word	0x400921fb
 23fae00:	54442d18 	.word	0x54442d18
 23fae04:	c00921fb 	.word	0xc00921fb
 23fae08:	54442d18 	.word	0x54442d18
 23fae0c:	3ff921fb 	.word	0x3ff921fb
 23fae10:	54442d18 	.word	0x54442d18
 23fae14:	bff921fb 	.word	0xbff921fb
 23fae18:	54442d18 	.word	0x54442d18
 23fae1c:	3fe921fb 	.word	0x3fe921fb
 23fae20:	7ff00000 	.word	0x7ff00000
 23fae24:	c0100000 	.word	0xc0100000
 23fae28:	023ffc48 	.word	0x023ffc48
 23fae2c:	023ffc30 	.word	0x023ffc30

023fae30 <__ieee754_pow>:
 23fae30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fae34:	ec55 4b11 	vmov	r4, r5, d1
 23fae38:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
 23fae3c:	ea5a 0204 	orrs.w	r2, sl, r4
 23fae40:	ed2d 8b0c 	vpush	{d8-d13}
 23fae44:	b087      	sub	sp, #28
 23fae46:	d01f      	beq.n	23fae88 <__ieee754_pow+0x58>
 23fae48:	495d      	ldr	r1, [pc, #372]	; (23fafc0 <__ieee754_pow+0x190>)
 23fae4a:	ee10 2a10 	vmov	r2, s0
 23fae4e:	ec57 6b10 	vmov	r6, r7, d0
 23fae52:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 23fae56:	46b9      	mov	r9, r7
 23fae58:	4588      	cmp	r8, r1
 23fae5a:	dc11      	bgt.n	23fae80 <__ieee754_pow+0x50>
 23fae5c:	46ab      	mov	fp, r5
 23fae5e:	ee11 3a10 	vmov	r3, s2
 23fae62:	d108      	bne.n	23fae76 <__ieee754_pow+0x46>
 23fae64:	b13e      	cbz	r6, 23fae76 <__ieee754_pow+0x46>
 23fae66:	4857      	ldr	r0, [pc, #348]	; (23fafc4 <__ieee754_pow+0x194>)
 23fae68:	b007      	add	sp, #28
 23fae6a:	ecbd 8b0c 	vpop	{d8-d13}
 23fae6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fae72:	f001 bf15 	b.w	23fcca0 <nan>
 23fae76:	4952      	ldr	r1, [pc, #328]	; (23fafc0 <__ieee754_pow+0x190>)
 23fae78:	458a      	cmp	sl, r1
 23fae7a:	dc01      	bgt.n	23fae80 <__ieee754_pow+0x50>
 23fae7c:	d10b      	bne.n	23fae96 <__ieee754_pow+0x66>
 23fae7e:	b153      	cbz	r3, 23fae96 <__ieee754_pow+0x66>
 23fae80:	4b51      	ldr	r3, [pc, #324]	; (23fafc8 <__ieee754_pow+0x198>)
 23fae82:	4443      	add	r3, r8
 23fae84:	4313      	orrs	r3, r2
 23fae86:	d1ee      	bne.n	23fae66 <__ieee754_pow+0x36>
 23fae88:	ed9f 0b49 	vldr	d0, [pc, #292]	; 23fafb0 <__ieee754_pow+0x180>
 23fae8c:	b007      	add	sp, #28
 23fae8e:	ecbd 8b0c 	vpop	{d8-d13}
 23fae92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fae96:	f1b9 0f00 	cmp.w	r9, #0
 23fae9a:	db45      	blt.n	23faf28 <__ieee754_pow+0xf8>
 23fae9c:	2100      	movs	r1, #0
 23fae9e:	9100      	str	r1, [sp, #0]
 23faea0:	b983      	cbnz	r3, 23faec4 <__ieee754_pow+0x94>
 23faea2:	4b47      	ldr	r3, [pc, #284]	; (23fafc0 <__ieee754_pow+0x190>)
 23faea4:	459a      	cmp	sl, r3
 23faea6:	d05b      	beq.n	23faf60 <__ieee754_pow+0x130>
 23faea8:	4b48      	ldr	r3, [pc, #288]	; (23fafcc <__ieee754_pow+0x19c>)
 23faeaa:	459a      	cmp	sl, r3
 23faeac:	d06a      	beq.n	23faf84 <__ieee754_pow+0x154>
 23faeae:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
 23faeb2:	f000 84b0 	beq.w	23fb816 <__ieee754_pow+0x9e6>
 23faeb6:	4b46      	ldr	r3, [pc, #280]	; (23fafd0 <__ieee754_pow+0x1a0>)
 23faeb8:	459b      	cmp	fp, r3
 23faeba:	d103      	bne.n	23faec4 <__ieee754_pow+0x94>
 23faebc:	f1b9 0f00 	cmp.w	r9, #0
 23faec0:	f280 850d 	bge.w	23fb8de <__ieee754_pow+0xaae>
 23faec4:	9202      	str	r2, [sp, #8]
 23faec6:	ec47 6b10 	vmov	d0, r6, r7
 23faeca:	f7ff fcd9 	bl	23fa880 <fabs>
 23faece:	9a02      	ldr	r2, [sp, #8]
 23faed0:	b94a      	cbnz	r2, 23faee6 <__ieee754_pow+0xb6>
 23faed2:	f029 4340 	bic.w	r3, r9, #3221225472	; 0xc0000000
 23faed6:	4a3d      	ldr	r2, [pc, #244]	; (23fafcc <__ieee754_pow+0x19c>)
 23faed8:	4293      	cmp	r3, r2
 23faeda:	f000 83a8 	beq.w	23fb62e <__ieee754_pow+0x7fe>
 23faede:	f1b8 0f00 	cmp.w	r8, #0
 23faee2:	f000 83a4 	beq.w	23fb62e <__ieee754_pow+0x7fe>
 23faee6:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 23faeea:	9a00      	ldr	r2, [sp, #0]
 23faeec:	3b01      	subs	r3, #1
 23faeee:	9304      	str	r3, [sp, #16]
 23faef0:	4313      	orrs	r3, r2
 23faef2:	d04e      	beq.n	23faf92 <__ieee754_pow+0x162>
 23faef4:	4b37      	ldr	r3, [pc, #220]	; (23fafd4 <__ieee754_pow+0x1a4>)
 23faef6:	459a      	cmp	sl, r3
 23faef8:	dd72      	ble.n	23fafe0 <__ieee754_pow+0x1b0>
 23faefa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 23faefe:	459a      	cmp	sl, r3
 23faf00:	4b35      	ldr	r3, [pc, #212]	; (23fafd8 <__ieee754_pow+0x1a8>)
 23faf02:	f340 842b 	ble.w	23fb75c <__ieee754_pow+0x92c>
 23faf06:	4598      	cmp	r8, r3
 23faf08:	f340 83a9 	ble.w	23fb65e <__ieee754_pow+0x82e>
 23faf0c:	f1bb 0f00 	cmp.w	fp, #0
 23faf10:	f340 83a9 	ble.w	23fb666 <__ieee754_pow+0x836>
 23faf14:	a328      	add	r3, pc, #160	; (adr r3, 23fafb8 <__ieee754_pow+0x188>)
 23faf16:	e9d3 2300 	ldrd	r2, r3, [r3]
 23faf1a:	4610      	mov	r0, r2
 23faf1c:	4619      	mov	r1, r3
 23faf1e:	f7eb fe43 	bl	23e6ba8 <__aeabi_dmul>
 23faf22:	ec41 0b10 	vmov	d0, r0, r1
 23faf26:	e7b1      	b.n	23fae8c <__ieee754_pow+0x5c>
 23faf28:	492c      	ldr	r1, [pc, #176]	; (23fafdc <__ieee754_pow+0x1ac>)
 23faf2a:	458a      	cmp	sl, r1
 23faf2c:	dc27      	bgt.n	23faf7e <__ieee754_pow+0x14e>
 23faf2e:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 23faf32:	458a      	cmp	sl, r1
 23faf34:	ddb2      	ble.n	23fae9c <__ieee754_pow+0x6c>
 23faf36:	ea4f 512a 	mov.w	r1, sl, asr #20
 23faf3a:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 23faf3e:	2914      	cmp	r1, #20
 23faf40:	f340 847d 	ble.w	23fb83e <__ieee754_pow+0xa0e>
 23faf44:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 23faf48:	fa23 f001 	lsr.w	r0, r3, r1
 23faf4c:	fa00 f101 	lsl.w	r1, r0, r1
 23faf50:	4299      	cmp	r1, r3
 23faf52:	d1a3      	bne.n	23fae9c <__ieee754_pow+0x6c>
 23faf54:	f000 0001 	and.w	r0, r0, #1
 23faf58:	f1c0 0102 	rsb	r1, r0, #2
 23faf5c:	9100      	str	r1, [sp, #0]
 23faf5e:	e79f      	b.n	23faea0 <__ieee754_pow+0x70>
 23faf60:	4b19      	ldr	r3, [pc, #100]	; (23fafc8 <__ieee754_pow+0x198>)
 23faf62:	4443      	add	r3, r8
 23faf64:	4313      	orrs	r3, r2
 23faf66:	d08f      	beq.n	23fae88 <__ieee754_pow+0x58>
 23faf68:	4b1b      	ldr	r3, [pc, #108]	; (23fafd8 <__ieee754_pow+0x1a8>)
 23faf6a:	4598      	cmp	r8, r3
 23faf6c:	f340 83ab 	ble.w	23fb6c6 <__ieee754_pow+0x896>
 23faf70:	f1bb 0f00 	cmp.w	fp, #0
 23faf74:	f2c0 8377 	blt.w	23fb666 <__ieee754_pow+0x836>
 23faf78:	ec45 4b10 	vmov	d0, r4, r5
 23faf7c:	e786      	b.n	23fae8c <__ieee754_pow+0x5c>
 23faf7e:	2102      	movs	r1, #2
 23faf80:	9100      	str	r1, [sp, #0]
 23faf82:	e78d      	b.n	23faea0 <__ieee754_pow+0x70>
 23faf84:	f1bb 0f00 	cmp.w	fp, #0
 23faf88:	f2c0 844f 	blt.w	23fb82a <__ieee754_pow+0x9fa>
 23faf8c:	ec47 6b10 	vmov	d0, r6, r7
 23faf90:	e77c      	b.n	23fae8c <__ieee754_pow+0x5c>
 23faf92:	4632      	mov	r2, r6
 23faf94:	463b      	mov	r3, r7
 23faf96:	4610      	mov	r0, r2
 23faf98:	4619      	mov	r1, r3
 23faf9a:	f7eb fc4d 	bl	23e6838 <__aeabi_dsub>
 23faf9e:	4602      	mov	r2, r0
 23fafa0:	460b      	mov	r3, r1
 23fafa2:	f7eb ff2b 	bl	23e6dfc <__aeabi_ddiv>
 23fafa6:	ec41 0b10 	vmov	d0, r0, r1
 23fafaa:	e76f      	b.n	23fae8c <__ieee754_pow+0x5c>
 23fafac:	f3af 8000 	nop.w
 23fafb0:	00000000 	.word	0x00000000
 23fafb4:	3ff00000 	.word	0x3ff00000
 23fafb8:	8800759c 	.word	0x8800759c
 23fafbc:	7e37e43c 	.word	0x7e37e43c
 23fafc0:	7ff00000 	.word	0x7ff00000
 23fafc4:	023ffc60 	.word	0x023ffc60
 23fafc8:	c0100000 	.word	0xc0100000
 23fafcc:	3ff00000 	.word	0x3ff00000
 23fafd0:	3fe00000 	.word	0x3fe00000
 23fafd4:	41e00000 	.word	0x41e00000
 23fafd8:	3fefffff 	.word	0x3fefffff
 23fafdc:	433fffff 	.word	0x433fffff
 23fafe0:	4be3      	ldr	r3, [pc, #908]	; (23fb370 <__ieee754_pow+0x540>)
 23fafe2:	2200      	movs	r2, #0
 23fafe4:	ea09 0303 	and.w	r3, r9, r3
 23fafe8:	b953      	cbnz	r3, 23fb000 <__ieee754_pow+0x1d0>
 23fafea:	4be2      	ldr	r3, [pc, #904]	; (23fb374 <__ieee754_pow+0x544>)
 23fafec:	ec51 0b10 	vmov	r0, r1, d0
 23faff0:	f7eb fdda 	bl	23e6ba8 <__aeabi_dmul>
 23faff4:	f06f 0234 	mvn.w	r2, #52	; 0x34
 23faff8:	ec41 0b10 	vmov	d0, r0, r1
 23faffc:	ee10 8a90 	vmov	r8, s1
 23fb000:	ea4f 5328 	mov.w	r3, r8, asr #20
 23fb004:	f3c8 0813 	ubfx	r8, r8, #0, #20
 23fb008:	4edb      	ldr	r6, [pc, #876]	; (23fb378 <__ieee754_pow+0x548>)
 23fb00a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 23fb00e:	ea48 0606 	orr.w	r6, r8, r6
 23fb012:	189a      	adds	r2, r3, r2
 23fb014:	4bd9      	ldr	r3, [pc, #868]	; (23fb37c <__ieee754_pow+0x54c>)
 23fb016:	4598      	cmp	r8, r3
 23fb018:	9205      	str	r2, [sp, #20]
 23fb01a:	dd07      	ble.n	23fb02c <__ieee754_pow+0x1fc>
 23fb01c:	4bd8      	ldr	r3, [pc, #864]	; (23fb380 <__ieee754_pow+0x550>)
 23fb01e:	4598      	cmp	r8, r3
 23fb020:	f340 8433 	ble.w	23fb88a <__ieee754_pow+0xa5a>
 23fb024:	3201      	adds	r2, #1
 23fb026:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 23fb02a:	9205      	str	r2, [sp, #20]
 23fb02c:	2700      	movs	r7, #0
 23fb02e:	ed9f 7bb8 	vldr	d7, [pc, #736]	; 23fb310 <__ieee754_pow+0x4e0>
 23fb032:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 23fb318 <__ieee754_pow+0x4e8>
 23fb036:	eeb0 da47 	vmov.f32	s26, s14
 23fb03a:	eef0 da67 	vmov.f32	s27, s15
 23fb03e:	eeb0 ca47 	vmov.f32	s24, s14
 23fb042:	eef0 ca67 	vmov.f32	s25, s15
 23fb046:	ec51 0b16 	vmov	r0, r1, d6
 23fb04a:	ec53 2b10 	vmov	r2, r3, d0
 23fb04e:	4633      	mov	r3, r6
 23fb050:	1076      	asrs	r6, r6, #1
 23fb052:	ec43 2b19 	vmov	d9, r2, r3
 23fb056:	ec41 0b1a 	vmov	d10, r0, r1
 23fb05a:	4602      	mov	r2, r0
 23fb05c:	460b      	mov	r3, r1
 23fb05e:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 23fb062:	ec51 0b19 	vmov	r0, r1, d9
 23fb066:	f7eb fbe7 	bl	23e6838 <__aeabi_dsub>
 23fb06a:	4680      	mov	r8, r0
 23fb06c:	4689      	mov	r9, r1
 23fb06e:	ec53 2b1a 	vmov	r2, r3, d10
 23fb072:	ec51 0b19 	vmov	r0, r1, d9
 23fb076:	f7eb fbe1 	bl	23e683c <__adddf3>
 23fb07a:	4602      	mov	r2, r0
 23fb07c:	460b      	mov	r3, r1
 23fb07e:	2000      	movs	r0, #0
 23fb080:	49bd      	ldr	r1, [pc, #756]	; (23fb378 <__ieee754_pow+0x548>)
 23fb082:	f7eb febb 	bl	23e6dfc <__aeabi_ddiv>
 23fb086:	ec41 0b1b 	vmov	d11, r0, r1
 23fb08a:	ec53 2b1b 	vmov	r2, r3, d11
 23fb08e:	4640      	mov	r0, r8
 23fb090:	4649      	mov	r1, r9
 23fb092:	f7eb fd89 	bl	23e6ba8 <__aeabi_dmul>
 23fb096:	460a      	mov	r2, r1
 23fb098:	f506 2300 	add.w	r3, r6, #524288	; 0x80000
 23fb09c:	ec41 0b18 	vmov	d8, r0, r1
 23fb0a0:	4601      	mov	r1, r0
 23fb0a2:	2000      	movs	r0, #0
 23fb0a4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 23fb0a8:	2100      	movs	r1, #0
 23fb0aa:	4606      	mov	r6, r0
 23fb0ac:	4602      	mov	r2, r0
 23fb0ae:	9102      	str	r1, [sp, #8]
 23fb0b0:	19d9      	adds	r1, r3, r7
 23fb0b2:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 23fb0b6:	460f      	mov	r7, r1
 23fb0b8:	460b      	mov	r3, r1
 23fb0ba:	4650      	mov	r0, sl
 23fb0bc:	4659      	mov	r1, fp
 23fb0be:	f7eb fd73 	bl	23e6ba8 <__aeabi_dmul>
 23fb0c2:	4602      	mov	r2, r0
 23fb0c4:	460b      	mov	r3, r1
 23fb0c6:	4640      	mov	r0, r8
 23fb0c8:	4649      	mov	r1, r9
 23fb0ca:	f7eb fbb5 	bl	23e6838 <__aeabi_dsub>
 23fb0ce:	4680      	mov	r8, r0
 23fb0d0:	4689      	mov	r9, r1
 23fb0d2:	4630      	mov	r0, r6
 23fb0d4:	4639      	mov	r1, r7
 23fb0d6:	ec53 2b1a 	vmov	r2, r3, d10
 23fb0da:	f7eb fbad 	bl	23e6838 <__aeabi_dsub>
 23fb0de:	4602      	mov	r2, r0
 23fb0e0:	460b      	mov	r3, r1
 23fb0e2:	ec51 0b19 	vmov	r0, r1, d9
 23fb0e6:	f7eb fba7 	bl	23e6838 <__aeabi_dsub>
 23fb0ea:	4652      	mov	r2, sl
 23fb0ec:	465b      	mov	r3, fp
 23fb0ee:	f7eb fd5b 	bl	23e6ba8 <__aeabi_dmul>
 23fb0f2:	4602      	mov	r2, r0
 23fb0f4:	460b      	mov	r3, r1
 23fb0f6:	4640      	mov	r0, r8
 23fb0f8:	4649      	mov	r1, r9
 23fb0fa:	f7eb fb9d 	bl	23e6838 <__aeabi_dsub>
 23fb0fe:	ec53 2b1b 	vmov	r2, r3, d11
 23fb102:	f7eb fd51 	bl	23e6ba8 <__aeabi_dmul>
 23fb106:	ec53 2b18 	vmov	r2, r3, d8
 23fb10a:	ec41 0b1a 	vmov	d10, r0, r1
 23fb10e:	ec51 0b18 	vmov	r0, r1, d8
 23fb112:	f7eb fd49 	bl	23e6ba8 <__aeabi_dmul>
 23fb116:	4606      	mov	r6, r0
 23fb118:	460f      	mov	r7, r1
 23fb11a:	a381      	add	r3, pc, #516	; (adr r3, 23fb320 <__ieee754_pow+0x4f0>)
 23fb11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb120:	f7eb fd42 	bl	23e6ba8 <__aeabi_dmul>
 23fb124:	a380      	add	r3, pc, #512	; (adr r3, 23fb328 <__ieee754_pow+0x4f8>)
 23fb126:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb12a:	f7eb fb87 	bl	23e683c <__adddf3>
 23fb12e:	4632      	mov	r2, r6
 23fb130:	463b      	mov	r3, r7
 23fb132:	f7eb fd39 	bl	23e6ba8 <__aeabi_dmul>
 23fb136:	a37e      	add	r3, pc, #504	; (adr r3, 23fb330 <__ieee754_pow+0x500>)
 23fb138:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb13c:	f7eb fb7e 	bl	23e683c <__adddf3>
 23fb140:	4632      	mov	r2, r6
 23fb142:	463b      	mov	r3, r7
 23fb144:	f7eb fd30 	bl	23e6ba8 <__aeabi_dmul>
 23fb148:	a37b      	add	r3, pc, #492	; (adr r3, 23fb338 <__ieee754_pow+0x508>)
 23fb14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb14e:	f7eb fb75 	bl	23e683c <__adddf3>
 23fb152:	4632      	mov	r2, r6
 23fb154:	463b      	mov	r3, r7
 23fb156:	f7eb fd27 	bl	23e6ba8 <__aeabi_dmul>
 23fb15a:	a379      	add	r3, pc, #484	; (adr r3, 23fb340 <__ieee754_pow+0x510>)
 23fb15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb160:	f7eb fb6c 	bl	23e683c <__adddf3>
 23fb164:	4632      	mov	r2, r6
 23fb166:	463b      	mov	r3, r7
 23fb168:	f7eb fd1e 	bl	23e6ba8 <__aeabi_dmul>
 23fb16c:	a376      	add	r3, pc, #472	; (adr r3, 23fb348 <__ieee754_pow+0x518>)
 23fb16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb172:	f7eb fb63 	bl	23e683c <__adddf3>
 23fb176:	4680      	mov	r8, r0
 23fb178:	4689      	mov	r9, r1
 23fb17a:	4632      	mov	r2, r6
 23fb17c:	463b      	mov	r3, r7
 23fb17e:	4630      	mov	r0, r6
 23fb180:	4639      	mov	r1, r7
 23fb182:	f7eb fd11 	bl	23e6ba8 <__aeabi_dmul>
 23fb186:	4602      	mov	r2, r0
 23fb188:	460b      	mov	r3, r1
 23fb18a:	4640      	mov	r0, r8
 23fb18c:	4649      	mov	r1, r9
 23fb18e:	f04f 0800 	mov.w	r8, #0
 23fb192:	f7eb fd09 	bl	23e6ba8 <__aeabi_dmul>
 23fb196:	4652      	mov	r2, sl
 23fb198:	4606      	mov	r6, r0
 23fb19a:	460f      	mov	r7, r1
 23fb19c:	465b      	mov	r3, fp
 23fb19e:	ec51 0b18 	vmov	r0, r1, d8
 23fb1a2:	f7eb fb4b 	bl	23e683c <__adddf3>
 23fb1a6:	ec53 2b1a 	vmov	r2, r3, d10
 23fb1aa:	f7eb fcfd 	bl	23e6ba8 <__aeabi_dmul>
 23fb1ae:	4632      	mov	r2, r6
 23fb1b0:	463b      	mov	r3, r7
 23fb1b2:	f7eb fb43 	bl	23e683c <__adddf3>
 23fb1b6:	4652      	mov	r2, sl
 23fb1b8:	465b      	mov	r3, fp
 23fb1ba:	ec41 0b19 	vmov	d9, r0, r1
 23fb1be:	4650      	mov	r0, sl
 23fb1c0:	4659      	mov	r1, fp
 23fb1c2:	f7eb fcf1 	bl	23e6ba8 <__aeabi_dmul>
 23fb1c6:	2200      	movs	r2, #0
 23fb1c8:	4b6e      	ldr	r3, [pc, #440]	; (23fb384 <__ieee754_pow+0x554>)
 23fb1ca:	4606      	mov	r6, r0
 23fb1cc:	460f      	mov	r7, r1
 23fb1ce:	f7eb fb35 	bl	23e683c <__adddf3>
 23fb1d2:	ec53 2b19 	vmov	r2, r3, d9
 23fb1d6:	f7eb fb31 	bl	23e683c <__adddf3>
 23fb1da:	4689      	mov	r9, r1
 23fb1dc:	4642      	mov	r2, r8
 23fb1de:	4650      	mov	r0, sl
 23fb1e0:	464b      	mov	r3, r9
 23fb1e2:	4659      	mov	r1, fp
 23fb1e4:	f7eb fce0 	bl	23e6ba8 <__aeabi_dmul>
 23fb1e8:	2200      	movs	r2, #0
 23fb1ea:	4682      	mov	sl, r0
 23fb1ec:	468b      	mov	fp, r1
 23fb1ee:	4b65      	ldr	r3, [pc, #404]	; (23fb384 <__ieee754_pow+0x554>)
 23fb1f0:	4640      	mov	r0, r8
 23fb1f2:	4649      	mov	r1, r9
 23fb1f4:	f7eb fb20 	bl	23e6838 <__aeabi_dsub>
 23fb1f8:	4632      	mov	r2, r6
 23fb1fa:	463b      	mov	r3, r7
 23fb1fc:	f7eb fb1c 	bl	23e6838 <__aeabi_dsub>
 23fb200:	4602      	mov	r2, r0
 23fb202:	460b      	mov	r3, r1
 23fb204:	ec51 0b19 	vmov	r0, r1, d9
 23fb208:	f7eb fb16 	bl	23e6838 <__aeabi_dsub>
 23fb20c:	ec53 2b18 	vmov	r2, r3, d8
 23fb210:	f7eb fcca 	bl	23e6ba8 <__aeabi_dmul>
 23fb214:	4606      	mov	r6, r0
 23fb216:	460f      	mov	r7, r1
 23fb218:	4642      	mov	r2, r8
 23fb21a:	464b      	mov	r3, r9
 23fb21c:	ec51 0b1a 	vmov	r0, r1, d10
 23fb220:	f7eb fcc2 	bl	23e6ba8 <__aeabi_dmul>
 23fb224:	4602      	mov	r2, r0
 23fb226:	460b      	mov	r3, r1
 23fb228:	4630      	mov	r0, r6
 23fb22a:	4639      	mov	r1, r7
 23fb22c:	f7eb fb06 	bl	23e683c <__adddf3>
 23fb230:	4680      	mov	r8, r0
 23fb232:	4689      	mov	r9, r1
 23fb234:	4650      	mov	r0, sl
 23fb236:	4642      	mov	r2, r8
 23fb238:	4659      	mov	r1, fp
 23fb23a:	464b      	mov	r3, r9
 23fb23c:	f7eb fafe 	bl	23e683c <__adddf3>
 23fb240:	2000      	movs	r0, #0
 23fb242:	460f      	mov	r7, r1
 23fb244:	4606      	mov	r6, r0
 23fb246:	a342      	add	r3, pc, #264	; (adr r3, 23fb350 <__ieee754_pow+0x520>)
 23fb248:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb24c:	f7eb fcac 	bl	23e6ba8 <__aeabi_dmul>
 23fb250:	4652      	mov	r2, sl
 23fb252:	465b      	mov	r3, fp
 23fb254:	ec41 0b19 	vmov	d9, r0, r1
 23fb258:	4630      	mov	r0, r6
 23fb25a:	4639      	mov	r1, r7
 23fb25c:	f7eb faec 	bl	23e6838 <__aeabi_dsub>
 23fb260:	4602      	mov	r2, r0
 23fb262:	460b      	mov	r3, r1
 23fb264:	4640      	mov	r0, r8
 23fb266:	4649      	mov	r1, r9
 23fb268:	f7eb fae6 	bl	23e6838 <__aeabi_dsub>
 23fb26c:	a33a      	add	r3, pc, #232	; (adr r3, 23fb358 <__ieee754_pow+0x528>)
 23fb26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb272:	f7eb fc99 	bl	23e6ba8 <__aeabi_dmul>
 23fb276:	4680      	mov	r8, r0
 23fb278:	4689      	mov	r9, r1
 23fb27a:	4630      	mov	r0, r6
 23fb27c:	4639      	mov	r1, r7
 23fb27e:	a338      	add	r3, pc, #224	; (adr r3, 23fb360 <__ieee754_pow+0x530>)
 23fb280:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb284:	f7eb fc90 	bl	23e6ba8 <__aeabi_dmul>
 23fb288:	4602      	mov	r2, r0
 23fb28a:	460b      	mov	r3, r1
 23fb28c:	4640      	mov	r0, r8
 23fb28e:	4649      	mov	r1, r9
 23fb290:	f7eb fad4 	bl	23e683c <__adddf3>
 23fb294:	ec53 2b1c 	vmov	r2, r3, d12
 23fb298:	f7eb fad0 	bl	23e683c <__adddf3>
 23fb29c:	4606      	mov	r6, r0
 23fb29e:	460f      	mov	r7, r1
 23fb2a0:	9805      	ldr	r0, [sp, #20]
 23fb2a2:	f7eb fc17 	bl	23e6ad4 <__aeabi_i2d>
 23fb2a6:	4632      	mov	r2, r6
 23fb2a8:	4680      	mov	r8, r0
 23fb2aa:	4689      	mov	r9, r1
 23fb2ac:	463b      	mov	r3, r7
 23fb2ae:	ec51 0b19 	vmov	r0, r1, d9
 23fb2b2:	f7eb fac3 	bl	23e683c <__adddf3>
 23fb2b6:	ec53 2b1d 	vmov	r2, r3, d13
 23fb2ba:	f7eb fabf 	bl	23e683c <__adddf3>
 23fb2be:	4642      	mov	r2, r8
 23fb2c0:	464b      	mov	r3, r9
 23fb2c2:	f7eb fabb 	bl	23e683c <__adddf3>
 23fb2c6:	2000      	movs	r0, #0
 23fb2c8:	4642      	mov	r2, r8
 23fb2ca:	464b      	mov	r3, r9
 23fb2cc:	4682      	mov	sl, r0
 23fb2ce:	468b      	mov	fp, r1
 23fb2d0:	f7eb fab2 	bl	23e6838 <__aeabi_dsub>
 23fb2d4:	ec53 2b1d 	vmov	r2, r3, d13
 23fb2d8:	f7eb faae 	bl	23e6838 <__aeabi_dsub>
 23fb2dc:	ec53 2b19 	vmov	r2, r3, d9
 23fb2e0:	f7eb faaa 	bl	23e6838 <__aeabi_dsub>
 23fb2e4:	4602      	mov	r2, r0
 23fb2e6:	460b      	mov	r3, r1
 23fb2e8:	4630      	mov	r0, r6
 23fb2ea:	4639      	mov	r1, r7
 23fb2ec:	f7eb faa4 	bl	23e6838 <__aeabi_dsub>
 23fb2f0:	9b00      	ldr	r3, [sp, #0]
 23fb2f2:	9a04      	ldr	r2, [sp, #16]
 23fb2f4:	3b01      	subs	r3, #1
 23fb2f6:	4313      	orrs	r3, r2
 23fb2f8:	ec41 0b18 	vmov	d8, r0, r1
 23fb2fc:	f040 81dc 	bne.w	23fb6b8 <__ieee754_pow+0x888>
 23fb300:	ed9f 7b19 	vldr	d7, [pc, #100]	; 23fb368 <__ieee754_pow+0x538>
 23fb304:	eeb0 9a47 	vmov.f32	s18, s14
 23fb308:	eef0 9a67 	vmov.f32	s19, s15
 23fb30c:	e03c      	b.n	23fb388 <__ieee754_pow+0x558>
 23fb30e:	bf00      	nop
	...
 23fb31c:	3ff00000 	.word	0x3ff00000
 23fb320:	4a454eef 	.word	0x4a454eef
 23fb324:	3fca7e28 	.word	0x3fca7e28
 23fb328:	93c9db65 	.word	0x93c9db65
 23fb32c:	3fcd864a 	.word	0x3fcd864a
 23fb330:	a91d4101 	.word	0xa91d4101
 23fb334:	3fd17460 	.word	0x3fd17460
 23fb338:	518f264d 	.word	0x518f264d
 23fb33c:	3fd55555 	.word	0x3fd55555
 23fb340:	db6fabff 	.word	0xdb6fabff
 23fb344:	3fdb6db6 	.word	0x3fdb6db6
 23fb348:	33333303 	.word	0x33333303
 23fb34c:	3fe33333 	.word	0x3fe33333
 23fb350:	e0000000 	.word	0xe0000000
 23fb354:	3feec709 	.word	0x3feec709
 23fb358:	dc3a03fd 	.word	0xdc3a03fd
 23fb35c:	3feec709 	.word	0x3feec709
 23fb360:	145b01f5 	.word	0x145b01f5
 23fb364:	be3e2fe0 	.word	0xbe3e2fe0
 23fb368:	00000000 	.word	0x00000000
 23fb36c:	bff00000 	.word	0xbff00000
 23fb370:	7ff00000 	.word	0x7ff00000
 23fb374:	43400000 	.word	0x43400000
 23fb378:	3ff00000 	.word	0x3ff00000
 23fb37c:	0003988e 	.word	0x0003988e
 23fb380:	000bb679 	.word	0x000bb679
 23fb384:	40080000 	.word	0x40080000
 23fb388:	2300      	movs	r3, #0
 23fb38a:	4620      	mov	r0, r4
 23fb38c:	4629      	mov	r1, r5
 23fb38e:	e9cd 4500 	strd	r4, r5, [sp]
 23fb392:	9300      	str	r3, [sp, #0]
 23fb394:	e9dd 8900 	ldrd	r8, r9, [sp]
 23fb398:	4642      	mov	r2, r8
 23fb39a:	464b      	mov	r3, r9
 23fb39c:	f7eb fa4c 	bl	23e6838 <__aeabi_dsub>
 23fb3a0:	465b      	mov	r3, fp
 23fb3a2:	4652      	mov	r2, sl
 23fb3a4:	f7eb fc00 	bl	23e6ba8 <__aeabi_dmul>
 23fb3a8:	4606      	mov	r6, r0
 23fb3aa:	460f      	mov	r7, r1
 23fb3ac:	4622      	mov	r2, r4
 23fb3ae:	462b      	mov	r3, r5
 23fb3b0:	ec51 0b18 	vmov	r0, r1, d8
 23fb3b4:	f7eb fbf8 	bl	23e6ba8 <__aeabi_dmul>
 23fb3b8:	4602      	mov	r2, r0
 23fb3ba:	460b      	mov	r3, r1
 23fb3bc:	4630      	mov	r0, r6
 23fb3be:	4639      	mov	r1, r7
 23fb3c0:	f7eb fa3c 	bl	23e683c <__adddf3>
 23fb3c4:	4642      	mov	r2, r8
 23fb3c6:	4604      	mov	r4, r0
 23fb3c8:	460d      	mov	r5, r1
 23fb3ca:	464b      	mov	r3, r9
 23fb3cc:	4659      	mov	r1, fp
 23fb3ce:	4650      	mov	r0, sl
 23fb3d0:	46a0      	mov	r8, r4
 23fb3d2:	f7eb fbe9 	bl	23e6ba8 <__aeabi_dmul>
 23fb3d6:	4606      	mov	r6, r0
 23fb3d8:	460f      	mov	r7, r1
 23fb3da:	4620      	mov	r0, r4
 23fb3dc:	4629      	mov	r1, r5
 23fb3de:	4632      	mov	r2, r6
 23fb3e0:	463b      	mov	r3, r7
 23fb3e2:	46a9      	mov	r9, r5
 23fb3e4:	f7eb fa2a 	bl	23e683c <__adddf3>
 23fb3e8:	4bd5      	ldr	r3, [pc, #852]	; (23fb740 <__ieee754_pow+0x910>)
 23fb3ea:	4604      	mov	r4, r0
 23fb3ec:	460d      	mov	r5, r1
 23fb3ee:	4299      	cmp	r1, r3
 23fb3f0:	468b      	mov	fp, r1
 23fb3f2:	f340 813b 	ble.w	23fb66c <__ieee754_pow+0x83c>
 23fb3f6:	4bd3      	ldr	r3, [pc, #844]	; (23fb744 <__ieee754_pow+0x914>)
 23fb3f8:	440b      	add	r3, r1
 23fb3fa:	4303      	orrs	r3, r0
 23fb3fc:	f040 8235 	bne.w	23fb86a <__ieee754_pow+0xa3a>
 23fb400:	4640      	mov	r0, r8
 23fb402:	4649      	mov	r1, r9
 23fb404:	a3b6      	add	r3, pc, #728	; (adr r3, 23fb6e0 <__ieee754_pow+0x8b0>)
 23fb406:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb40a:	f7eb fa17 	bl	23e683c <__adddf3>
 23fb40e:	4632      	mov	r2, r6
 23fb410:	463b      	mov	r3, r7
 23fb412:	ec41 0b18 	vmov	d8, r0, r1
 23fb416:	4620      	mov	r0, r4
 23fb418:	4629      	mov	r1, r5
 23fb41a:	f7eb fa0d 	bl	23e6838 <__aeabi_dsub>
 23fb41e:	4602      	mov	r2, r0
 23fb420:	460b      	mov	r3, r1
 23fb422:	ec51 0b18 	vmov	r0, r1, d8
 23fb426:	f7eb fe4f 	bl	23e70c8 <__aeabi_dcmpgt>
 23fb42a:	2800      	cmp	r0, #0
 23fb42c:	f040 821d 	bne.w	23fb86a <__ieee754_pow+0xa3a>
 23fb430:	f3cb 530a 	ubfx	r3, fp, #20, #11
 23fb434:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 23fb438:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 23fb43c:	4cc2      	ldr	r4, [pc, #776]	; (23fb748 <__ieee754_pow+0x918>)
 23fb43e:	f1bb 0f00 	cmp.w	fp, #0
 23fb442:	fa42 f303 	asr.w	r3, r2, r3
 23fb446:	f04f 0000 	mov.w	r0, #0
 23fb44a:	445b      	add	r3, fp
 23fb44c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 23fb450:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 23fb454:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 23fb458:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 23fb45c:	fa44 f402 	asr.w	r4, r4, r2
 23fb460:	f1c2 0214 	rsb	r2, r2, #20
 23fb464:	ea23 0104 	bic.w	r1, r3, r4
 23fb468:	fa4a fa02 	asr.w	sl, sl, r2
 23fb46c:	4602      	mov	r2, r0
 23fb46e:	4630      	mov	r0, r6
 23fb470:	460b      	mov	r3, r1
 23fb472:	bfb8      	it	lt
 23fb474:	f1ca 0a00 	rsblt	sl, sl, #0
 23fb478:	4639      	mov	r1, r7
 23fb47a:	f7eb f9dd 	bl	23e6838 <__aeabi_dsub>
 23fb47e:	4602      	mov	r2, r0
 23fb480:	460b      	mov	r3, r1
 23fb482:	4606      	mov	r6, r0
 23fb484:	460f      	mov	r7, r1
 23fb486:	4640      	mov	r0, r8
 23fb488:	4649      	mov	r1, r9
 23fb48a:	ea4f 5b0a 	mov.w	fp, sl, lsl #20
 23fb48e:	f7eb f9d5 	bl	23e683c <__adddf3>
 23fb492:	460d      	mov	r5, r1
 23fb494:	2400      	movs	r4, #0
 23fb496:	4629      	mov	r1, r5
 23fb498:	a393      	add	r3, pc, #588	; (adr r3, 23fb6e8 <__ieee754_pow+0x8b8>)
 23fb49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb49e:	4620      	mov	r0, r4
 23fb4a0:	f7eb fb82 	bl	23e6ba8 <__aeabi_dmul>
 23fb4a4:	4632      	mov	r2, r6
 23fb4a6:	463b      	mov	r3, r7
 23fb4a8:	4606      	mov	r6, r0
 23fb4aa:	460f      	mov	r7, r1
 23fb4ac:	4620      	mov	r0, r4
 23fb4ae:	4629      	mov	r1, r5
 23fb4b0:	f7eb f9c2 	bl	23e6838 <__aeabi_dsub>
 23fb4b4:	4602      	mov	r2, r0
 23fb4b6:	460b      	mov	r3, r1
 23fb4b8:	4640      	mov	r0, r8
 23fb4ba:	4649      	mov	r1, r9
 23fb4bc:	f7eb f9bc 	bl	23e6838 <__aeabi_dsub>
 23fb4c0:	a38b      	add	r3, pc, #556	; (adr r3, 23fb6f0 <__ieee754_pow+0x8c0>)
 23fb4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb4c6:	f7eb fb6f 	bl	23e6ba8 <__aeabi_dmul>
 23fb4ca:	4680      	mov	r8, r0
 23fb4cc:	4689      	mov	r9, r1
 23fb4ce:	4620      	mov	r0, r4
 23fb4d0:	4629      	mov	r1, r5
 23fb4d2:	a389      	add	r3, pc, #548	; (adr r3, 23fb6f8 <__ieee754_pow+0x8c8>)
 23fb4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb4d8:	f7eb fb66 	bl	23e6ba8 <__aeabi_dmul>
 23fb4dc:	4602      	mov	r2, r0
 23fb4de:	460b      	mov	r3, r1
 23fb4e0:	4640      	mov	r0, r8
 23fb4e2:	4649      	mov	r1, r9
 23fb4e4:	f7eb f9aa 	bl	23e683c <__adddf3>
 23fb4e8:	4680      	mov	r8, r0
 23fb4ea:	4689      	mov	r9, r1
 23fb4ec:	4630      	mov	r0, r6
 23fb4ee:	4642      	mov	r2, r8
 23fb4f0:	4639      	mov	r1, r7
 23fb4f2:	464b      	mov	r3, r9
 23fb4f4:	f7eb f9a2 	bl	23e683c <__adddf3>
 23fb4f8:	4632      	mov	r2, r6
 23fb4fa:	4604      	mov	r4, r0
 23fb4fc:	460d      	mov	r5, r1
 23fb4fe:	463b      	mov	r3, r7
 23fb500:	f7eb f99a 	bl	23e6838 <__aeabi_dsub>
 23fb504:	4602      	mov	r2, r0
 23fb506:	460b      	mov	r3, r1
 23fb508:	4640      	mov	r0, r8
 23fb50a:	4649      	mov	r1, r9
 23fb50c:	f7eb f994 	bl	23e6838 <__aeabi_dsub>
 23fb510:	4622      	mov	r2, r4
 23fb512:	4680      	mov	r8, r0
 23fb514:	4689      	mov	r9, r1
 23fb516:	462b      	mov	r3, r5
 23fb518:	4620      	mov	r0, r4
 23fb51a:	4629      	mov	r1, r5
 23fb51c:	f7eb fb44 	bl	23e6ba8 <__aeabi_dmul>
 23fb520:	4606      	mov	r6, r0
 23fb522:	460f      	mov	r7, r1
 23fb524:	a376      	add	r3, pc, #472	; (adr r3, 23fb700 <__ieee754_pow+0x8d0>)
 23fb526:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb52a:	f7eb fb3d 	bl	23e6ba8 <__aeabi_dmul>
 23fb52e:	a376      	add	r3, pc, #472	; (adr r3, 23fb708 <__ieee754_pow+0x8d8>)
 23fb530:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb534:	f7eb f980 	bl	23e6838 <__aeabi_dsub>
 23fb538:	4632      	mov	r2, r6
 23fb53a:	463b      	mov	r3, r7
 23fb53c:	f7eb fb34 	bl	23e6ba8 <__aeabi_dmul>
 23fb540:	a373      	add	r3, pc, #460	; (adr r3, 23fb710 <__ieee754_pow+0x8e0>)
 23fb542:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb546:	f7eb f979 	bl	23e683c <__adddf3>
 23fb54a:	4632      	mov	r2, r6
 23fb54c:	463b      	mov	r3, r7
 23fb54e:	f7eb fb2b 	bl	23e6ba8 <__aeabi_dmul>
 23fb552:	a371      	add	r3, pc, #452	; (adr r3, 23fb718 <__ieee754_pow+0x8e8>)
 23fb554:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb558:	f7eb f96e 	bl	23e6838 <__aeabi_dsub>
 23fb55c:	4632      	mov	r2, r6
 23fb55e:	463b      	mov	r3, r7
 23fb560:	f7eb fb22 	bl	23e6ba8 <__aeabi_dmul>
 23fb564:	a36e      	add	r3, pc, #440	; (adr r3, 23fb720 <__ieee754_pow+0x8f0>)
 23fb566:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb56a:	f7eb f967 	bl	23e683c <__adddf3>
 23fb56e:	4632      	mov	r2, r6
 23fb570:	463b      	mov	r3, r7
 23fb572:	f7eb fb19 	bl	23e6ba8 <__aeabi_dmul>
 23fb576:	4602      	mov	r2, r0
 23fb578:	460b      	mov	r3, r1
 23fb57a:	4620      	mov	r0, r4
 23fb57c:	4629      	mov	r1, r5
 23fb57e:	f7eb f95b 	bl	23e6838 <__aeabi_dsub>
 23fb582:	4606      	mov	r6, r0
 23fb584:	460f      	mov	r7, r1
 23fb586:	4620      	mov	r0, r4
 23fb588:	4632      	mov	r2, r6
 23fb58a:	4629      	mov	r1, r5
 23fb58c:	463b      	mov	r3, r7
 23fb58e:	f7eb fb0b 	bl	23e6ba8 <__aeabi_dmul>
 23fb592:	2200      	movs	r2, #0
 23fb594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 23fb598:	ec41 0b18 	vmov	d8, r0, r1
 23fb59c:	4630      	mov	r0, r6
 23fb59e:	4639      	mov	r1, r7
 23fb5a0:	f7eb f94a 	bl	23e6838 <__aeabi_dsub>
 23fb5a4:	4602      	mov	r2, r0
 23fb5a6:	460b      	mov	r3, r1
 23fb5a8:	ec51 0b18 	vmov	r0, r1, d8
 23fb5ac:	f7eb fc26 	bl	23e6dfc <__aeabi_ddiv>
 23fb5b0:	4642      	mov	r2, r8
 23fb5b2:	4606      	mov	r6, r0
 23fb5b4:	460f      	mov	r7, r1
 23fb5b6:	464b      	mov	r3, r9
 23fb5b8:	4620      	mov	r0, r4
 23fb5ba:	4629      	mov	r1, r5
 23fb5bc:	f7eb faf4 	bl	23e6ba8 <__aeabi_dmul>
 23fb5c0:	4642      	mov	r2, r8
 23fb5c2:	464b      	mov	r3, r9
 23fb5c4:	f7eb f93a 	bl	23e683c <__adddf3>
 23fb5c8:	4602      	mov	r2, r0
 23fb5ca:	460b      	mov	r3, r1
 23fb5cc:	4630      	mov	r0, r6
 23fb5ce:	4639      	mov	r1, r7
 23fb5d0:	f7eb f932 	bl	23e6838 <__aeabi_dsub>
 23fb5d4:	4622      	mov	r2, r4
 23fb5d6:	462b      	mov	r3, r5
 23fb5d8:	f7eb f92e 	bl	23e6838 <__aeabi_dsub>
 23fb5dc:	4602      	mov	r2, r0
 23fb5de:	460b      	mov	r3, r1
 23fb5e0:	2000      	movs	r0, #0
 23fb5e2:	495a      	ldr	r1, [pc, #360]	; (23fb74c <__ieee754_pow+0x91c>)
 23fb5e4:	f7eb f928 	bl	23e6838 <__aeabi_dsub>
 23fb5e8:	448b      	add	fp, r1
 23fb5ea:	4602      	mov	r2, r0
 23fb5ec:	460b      	mov	r3, r1
 23fb5ee:	f5bb 1f80 	cmp.w	fp, #1048576	; 0x100000
 23fb5f2:	f2c0 816c 	blt.w	23fb8ce <__ieee754_pow+0xa9e>
 23fb5f6:	4659      	mov	r1, fp
 23fb5f8:	ec53 2b19 	vmov	r2, r3, d9
 23fb5fc:	f7eb fad4 	bl	23e6ba8 <__aeabi_dmul>
 23fb600:	ec41 0b10 	vmov	d0, r0, r1
 23fb604:	e442      	b.n	23fae8c <__ieee754_pow+0x5c>
 23fb606:	ec47 6b10 	vmov	d0, r6, r7
 23fb60a:	9200      	str	r2, [sp, #0]
 23fb60c:	f7ff f938 	bl	23fa880 <fabs>
 23fb610:	9a00      	ldr	r2, [sp, #0]
 23fb612:	2a00      	cmp	r2, #0
 23fb614:	f47f acbd 	bne.w	23faf92 <__ieee754_pow+0x162>
 23fb618:	f029 4340 	bic.w	r3, r9, #3221225472	; 0xc0000000
 23fb61c:	4a4b      	ldr	r2, [pc, #300]	; (23fb74c <__ieee754_pow+0x91c>)
 23fb61e:	4293      	cmp	r3, r2
 23fb620:	d003      	beq.n	23fb62a <__ieee754_pow+0x7fa>
 23fb622:	f1b8 0f00 	cmp.w	r8, #0
 23fb626:	f47f acb4 	bne.w	23faf92 <__ieee754_pow+0x162>
 23fb62a:	2300      	movs	r3, #0
 23fb62c:	9300      	str	r3, [sp, #0]
 23fb62e:	f1bb 0f00 	cmp.w	fp, #0
 23fb632:	da07      	bge.n	23fb644 <__ieee754_pow+0x814>
 23fb634:	2000      	movs	r0, #0
 23fb636:	4945      	ldr	r1, [pc, #276]	; (23fb74c <__ieee754_pow+0x91c>)
 23fb638:	ec53 2b10 	vmov	r2, r3, d0
 23fb63c:	f7eb fbde 	bl	23e6dfc <__aeabi_ddiv>
 23fb640:	ec41 0b10 	vmov	d0, r0, r1
 23fb644:	f1b9 0f00 	cmp.w	r9, #0
 23fb648:	f6bf ac20 	bge.w	23fae8c <__ieee754_pow+0x5c>
 23fb64c:	4b40      	ldr	r3, [pc, #256]	; (23fb750 <__ieee754_pow+0x920>)
 23fb64e:	9a00      	ldr	r2, [sp, #0]
 23fb650:	4443      	add	r3, r8
 23fb652:	4313      	orrs	r3, r2
 23fb654:	f040 812d 	bne.w	23fb8b2 <__ieee754_pow+0xa82>
 23fb658:	ec53 2b10 	vmov	r2, r3, d0
 23fb65c:	e49b      	b.n	23faf96 <__ieee754_pow+0x166>
 23fb65e:	f1bb 0f00 	cmp.w	fp, #0
 23fb662:	f6ff ac57 	blt.w	23faf14 <__ieee754_pow+0xe4>
 23fb666:	ed9f 0b30 	vldr	d0, [pc, #192]	; 23fb728 <__ieee754_pow+0x8f8>
 23fb66a:	e40f      	b.n	23fae8c <__ieee754_pow+0x5c>
 23fb66c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23fb670:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 23fb758 <__ieee754_pow+0x928>
 23fb674:	4563      	cmp	r3, ip
 23fb676:	f340 80f0 	ble.w	23fb85a <__ieee754_pow+0xa2a>
 23fb67a:	4b36      	ldr	r3, [pc, #216]	; (23fb754 <__ieee754_pow+0x924>)
 23fb67c:	440b      	add	r3, r1
 23fb67e:	4303      	orrs	r3, r0
 23fb680:	d10a      	bne.n	23fb698 <__ieee754_pow+0x868>
 23fb682:	4632      	mov	r2, r6
 23fb684:	463b      	mov	r3, r7
 23fb686:	f7eb f8d7 	bl	23e6838 <__aeabi_dsub>
 23fb68a:	4642      	mov	r2, r8
 23fb68c:	464b      	mov	r3, r9
 23fb68e:	f7eb fd11 	bl	23e70b4 <__aeabi_dcmpge>
 23fb692:	2800      	cmp	r0, #0
 23fb694:	f43f aecc 	beq.w	23fb430 <__ieee754_pow+0x600>
 23fb698:	a325      	add	r3, pc, #148	; (adr r3, 23fb730 <__ieee754_pow+0x900>)
 23fb69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb69e:	ec51 0b19 	vmov	r0, r1, d9
 23fb6a2:	f7eb fa81 	bl	23e6ba8 <__aeabi_dmul>
 23fb6a6:	a322      	add	r3, pc, #136	; (adr r3, 23fb730 <__ieee754_pow+0x900>)
 23fb6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb6ac:	f7eb fa7c 	bl	23e6ba8 <__aeabi_dmul>
 23fb6b0:	ec41 0b10 	vmov	d0, r0, r1
 23fb6b4:	f7ff bbea 	b.w	23fae8c <__ieee754_pow+0x5c>
 23fb6b8:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 23fb738 <__ieee754_pow+0x908>
 23fb6bc:	eeb0 9a47 	vmov.f32	s18, s14
 23fb6c0:	eef0 9a67 	vmov.f32	s19, s15
 23fb6c4:	e660      	b.n	23fb388 <__ieee754_pow+0x558>
 23fb6c6:	f1bb 0f00 	cmp.w	fp, #0
 23fb6ca:	dacc      	bge.n	23fb666 <__ieee754_pow+0x836>
 23fb6cc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 23fb6d0:	ee00 4a10 	vmov	s0, r4
 23fb6d4:	ee00 3a90 	vmov	s1, r3
 23fb6d8:	f7ff bbd8 	b.w	23fae8c <__ieee754_pow+0x5c>
 23fb6dc:	f3af 8000 	nop.w
 23fb6e0:	652b82fe 	.word	0x652b82fe
 23fb6e4:	3c971547 	.word	0x3c971547
 23fb6e8:	00000000 	.word	0x00000000
 23fb6ec:	3fe62e43 	.word	0x3fe62e43
 23fb6f0:	fefa39ef 	.word	0xfefa39ef
 23fb6f4:	3fe62e42 	.word	0x3fe62e42
 23fb6f8:	0ca86c39 	.word	0x0ca86c39
 23fb6fc:	be205c61 	.word	0xbe205c61
 23fb700:	72bea4d0 	.word	0x72bea4d0
 23fb704:	3e663769 	.word	0x3e663769
 23fb708:	c5d26bf1 	.word	0xc5d26bf1
 23fb70c:	3ebbbd41 	.word	0x3ebbbd41
 23fb710:	af25de2c 	.word	0xaf25de2c
 23fb714:	3f11566a 	.word	0x3f11566a
 23fb718:	16bebd93 	.word	0x16bebd93
 23fb71c:	3f66c16c 	.word	0x3f66c16c
 23fb720:	5555553e 	.word	0x5555553e
 23fb724:	3fc55555 	.word	0x3fc55555
	...
 23fb730:	c2f8f359 	.word	0xc2f8f359
 23fb734:	01a56e1f 	.word	0x01a56e1f
 23fb738:	00000000 	.word	0x00000000
 23fb73c:	3ff00000 	.word	0x3ff00000
 23fb740:	408fffff 	.word	0x408fffff
 23fb744:	bf700000 	.word	0xbf700000
 23fb748:	000fffff 	.word	0x000fffff
 23fb74c:	3ff00000 	.word	0x3ff00000
 23fb750:	c0100000 	.word	0xc0100000
 23fb754:	3f6f3400 	.word	0x3f6f3400
 23fb758:	4090cbff 	.word	0x4090cbff
 23fb75c:	4598      	cmp	r8, r3
 23fb75e:	f6ff af7e 	blt.w	23fb65e <__ieee754_pow+0x82e>
 23fb762:	4b79      	ldr	r3, [pc, #484]	; (23fb948 <__ieee754_pow+0xb18>)
 23fb764:	4598      	cmp	r8, r3
 23fb766:	f73f abd1 	bgt.w	23faf0c <__ieee754_pow+0xdc>
 23fb76a:	2200      	movs	r2, #0
 23fb76c:	4b76      	ldr	r3, [pc, #472]	; (23fb948 <__ieee754_pow+0xb18>)
 23fb76e:	ec51 0b10 	vmov	r0, r1, d0
 23fb772:	f7eb f861 	bl	23e6838 <__aeabi_dsub>
 23fb776:	4606      	mov	r6, r0
 23fb778:	460f      	mov	r7, r1
 23fb77a:	a363      	add	r3, pc, #396	; (adr r3, 23fb908 <__ieee754_pow+0xad8>)
 23fb77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb780:	f7eb fa12 	bl	23e6ba8 <__aeabi_dmul>
 23fb784:	4682      	mov	sl, r0
 23fb786:	468b      	mov	fp, r1
 23fb788:	4630      	mov	r0, r6
 23fb78a:	4639      	mov	r1, r7
 23fb78c:	a360      	add	r3, pc, #384	; (adr r3, 23fb910 <__ieee754_pow+0xae0>)
 23fb78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb792:	f7eb fa09 	bl	23e6ba8 <__aeabi_dmul>
 23fb796:	2200      	movs	r2, #0
 23fb798:	4b6c      	ldr	r3, [pc, #432]	; (23fb94c <__ieee754_pow+0xb1c>)
 23fb79a:	ec41 0b18 	vmov	d8, r0, r1
 23fb79e:	4630      	mov	r0, r6
 23fb7a0:	4639      	mov	r1, r7
 23fb7a2:	f7eb fa01 	bl	23e6ba8 <__aeabi_dmul>
 23fb7a6:	4602      	mov	r2, r0
 23fb7a8:	460b      	mov	r3, r1
 23fb7aa:	a15b      	add	r1, pc, #364	; (adr r1, 23fb918 <__ieee754_pow+0xae8>)
 23fb7ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fb7b0:	f7eb f842 	bl	23e6838 <__aeabi_dsub>
 23fb7b4:	4632      	mov	r2, r6
 23fb7b6:	463b      	mov	r3, r7
 23fb7b8:	f7eb f9f6 	bl	23e6ba8 <__aeabi_dmul>
 23fb7bc:	4602      	mov	r2, r0
 23fb7be:	460b      	mov	r3, r1
 23fb7c0:	2000      	movs	r0, #0
 23fb7c2:	4963      	ldr	r1, [pc, #396]	; (23fb950 <__ieee754_pow+0xb20>)
 23fb7c4:	f7eb f838 	bl	23e6838 <__aeabi_dsub>
 23fb7c8:	4680      	mov	r8, r0
 23fb7ca:	4689      	mov	r9, r1
 23fb7cc:	4632      	mov	r2, r6
 23fb7ce:	463b      	mov	r3, r7
 23fb7d0:	4630      	mov	r0, r6
 23fb7d2:	4639      	mov	r1, r7
 23fb7d4:	f7eb f9e8 	bl	23e6ba8 <__aeabi_dmul>
 23fb7d8:	4602      	mov	r2, r0
 23fb7da:	460b      	mov	r3, r1
 23fb7dc:	4640      	mov	r0, r8
 23fb7de:	4649      	mov	r1, r9
 23fb7e0:	f7eb f9e2 	bl	23e6ba8 <__aeabi_dmul>
 23fb7e4:	a34e      	add	r3, pc, #312	; (adr r3, 23fb920 <__ieee754_pow+0xaf0>)
 23fb7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb7ea:	f7eb f9dd 	bl	23e6ba8 <__aeabi_dmul>
 23fb7ee:	4602      	mov	r2, r0
 23fb7f0:	460b      	mov	r3, r1
 23fb7f2:	ec51 0b18 	vmov	r0, r1, d8
 23fb7f6:	f7eb f81f 	bl	23e6838 <__aeabi_dsub>
 23fb7fa:	4606      	mov	r6, r0
 23fb7fc:	460f      	mov	r7, r1
 23fb7fe:	4650      	mov	r0, sl
 23fb800:	4659      	mov	r1, fp
 23fb802:	4632      	mov	r2, r6
 23fb804:	463b      	mov	r3, r7
 23fb806:	f7eb f819 	bl	23e683c <__adddf3>
 23fb80a:	2000      	movs	r0, #0
 23fb80c:	4652      	mov	r2, sl
 23fb80e:	465b      	mov	r3, fp
 23fb810:	4682      	mov	sl, r0
 23fb812:	468b      	mov	fp, r1
 23fb814:	e564      	b.n	23fb2e0 <__ieee754_pow+0x4b0>
 23fb816:	4632      	mov	r2, r6
 23fb818:	463b      	mov	r3, r7
 23fb81a:	4630      	mov	r0, r6
 23fb81c:	4639      	mov	r1, r7
 23fb81e:	f7eb f9c3 	bl	23e6ba8 <__aeabi_dmul>
 23fb822:	ec41 0b10 	vmov	d0, r0, r1
 23fb826:	f7ff bb31 	b.w	23fae8c <__ieee754_pow+0x5c>
 23fb82a:	2000      	movs	r0, #0
 23fb82c:	4946      	ldr	r1, [pc, #280]	; (23fb948 <__ieee754_pow+0xb18>)
 23fb82e:	4632      	mov	r2, r6
 23fb830:	463b      	mov	r3, r7
 23fb832:	f7eb fae3 	bl	23e6dfc <__aeabi_ddiv>
 23fb836:	ec41 0b10 	vmov	d0, r0, r1
 23fb83a:	f7ff bb27 	b.w	23fae8c <__ieee754_pow+0x5c>
 23fb83e:	2b00      	cmp	r3, #0
 23fb840:	f47f aee1 	bne.w	23fb606 <__ieee754_pow+0x7d6>
 23fb844:	f1c1 0114 	rsb	r1, r1, #20
 23fb848:	fa4a f001 	asr.w	r0, sl, r1
 23fb84c:	fa00 f101 	lsl.w	r1, r0, r1
 23fb850:	4551      	cmp	r1, sl
 23fb852:	d04d      	beq.n	23fb8f0 <__ieee754_pow+0xac0>
 23fb854:	9300      	str	r3, [sp, #0]
 23fb856:	f7ff bb27 	b.w	23faea8 <__ieee754_pow+0x78>
 23fb85a:	4a3d      	ldr	r2, [pc, #244]	; (23fb950 <__ieee754_pow+0xb20>)
 23fb85c:	4293      	cmp	r3, r2
 23fb85e:	dc4e      	bgt.n	23fb8fe <__ieee754_pow+0xace>
 23fb860:	e9dd 2300 	ldrd	r2, r3, [sp]
 23fb864:	4693      	mov	fp, r2
 23fb866:	4692      	mov	sl, r2
 23fb868:	e614      	b.n	23fb494 <__ieee754_pow+0x664>
 23fb86a:	a32f      	add	r3, pc, #188	; (adr r3, 23fb928 <__ieee754_pow+0xaf8>)
 23fb86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb870:	ec51 0b19 	vmov	r0, r1, d9
 23fb874:	f7eb f998 	bl	23e6ba8 <__aeabi_dmul>
 23fb878:	a32b      	add	r3, pc, #172	; (adr r3, 23fb928 <__ieee754_pow+0xaf8>)
 23fb87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb87e:	f7eb f993 	bl	23e6ba8 <__aeabi_dmul>
 23fb882:	ec41 0b10 	vmov	d0, r0, r1
 23fb886:	f7ff bb01 	b.w	23fae8c <__ieee754_pow+0x5c>
 23fb88a:	ed9f 7b29 	vldr	d7, [pc, #164]	; 23fb930 <__ieee754_pow+0xb00>
 23fb88e:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 23fb892:	eeb0 da47 	vmov.f32	s26, s14
 23fb896:	eef0 da67 	vmov.f32	s27, s15
 23fb89a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 23fb938 <__ieee754_pow+0xb08>
 23fb89e:	eeb0 ca47 	vmov.f32	s24, s14
 23fb8a2:	eef0 ca67 	vmov.f32	s25, s15
 23fb8a6:	ed9f 7b26 	vldr	d7, [pc, #152]	; 23fb940 <__ieee754_pow+0xb10>
 23fb8aa:	ec51 0b17 	vmov	r0, r1, d7
 23fb8ae:	f7ff bbcc 	b.w	23fb04a <__ieee754_pow+0x21a>
 23fb8b2:	9b00      	ldr	r3, [sp, #0]
 23fb8b4:	2b01      	cmp	r3, #1
 23fb8b6:	f47f aae9 	bne.w	23fae8c <__ieee754_pow+0x5c>
 23fb8ba:	ee10 1a90 	vmov	r1, s1
 23fb8be:	ee10 2a10 	vmov	r2, s0
 23fb8c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fb8c6:	ec43 2b10 	vmov	d0, r2, r3
 23fb8ca:	f7ff badf 	b.w	23fae8c <__ieee754_pow+0x5c>
 23fb8ce:	4650      	mov	r0, sl
 23fb8d0:	ec43 2b10 	vmov	d0, r2, r3
 23fb8d4:	f7fe ffe0 	bl	23fa898 <scalbn>
 23fb8d8:	ec51 0b10 	vmov	r0, r1, d0
 23fb8dc:	e68c      	b.n	23fb5f8 <__ieee754_pow+0x7c8>
 23fb8de:	ec47 6b10 	vmov	d0, r6, r7
 23fb8e2:	b007      	add	sp, #28
 23fb8e4:	ecbd 8b0c 	vpop	{d8-d13}
 23fb8e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb8ec:	f000 ba5a 	b.w	23fbda4 <__ieee754_sqrt>
 23fb8f0:	f000 0001 	and.w	r0, r0, #1
 23fb8f4:	f1c0 0302 	rsb	r3, r0, #2
 23fb8f8:	9300      	str	r3, [sp, #0]
 23fb8fa:	f7ff bad5 	b.w	23faea8 <__ieee754_pow+0x78>
 23fb8fe:	151b      	asrs	r3, r3, #20
 23fb900:	e598      	b.n	23fb434 <__ieee754_pow+0x604>
 23fb902:	bf00      	nop
 23fb904:	f3af 8000 	nop.w
 23fb908:	60000000 	.word	0x60000000
 23fb90c:	3ff71547 	.word	0x3ff71547
 23fb910:	f85ddf44 	.word	0xf85ddf44
 23fb914:	3e54ae0b 	.word	0x3e54ae0b
 23fb918:	55555555 	.word	0x55555555
 23fb91c:	3fd55555 	.word	0x3fd55555
 23fb920:	652b82fe 	.word	0x652b82fe
 23fb924:	3ff71547 	.word	0x3ff71547
 23fb928:	8800759c 	.word	0x8800759c
 23fb92c:	7e37e43c 	.word	0x7e37e43c
 23fb930:	40000000 	.word	0x40000000
 23fb934:	3fe2b803 	.word	0x3fe2b803
 23fb938:	43cfd006 	.word	0x43cfd006
 23fb93c:	3e4cfdeb 	.word	0x3e4cfdeb
 23fb940:	00000000 	.word	0x00000000
 23fb944:	3ff80000 	.word	0x3ff80000
 23fb948:	3ff00000 	.word	0x3ff00000
 23fb94c:	3fd00000 	.word	0x3fd00000
 23fb950:	3fe00000 	.word	0x3fe00000
 23fb954:	00000000 	.word	0x00000000

023fb958 <__ieee754_rem_pio2>:
 23fb958:	ec53 2b10 	vmov	r2, r3, d0
 23fb95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb960:	4991      	ldr	r1, [pc, #580]	; (23fbba8 <__ieee754_rem_pio2+0x250>)
 23fb962:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 23fb966:	4604      	mov	r4, r0
 23fb968:	428d      	cmp	r5, r1
 23fb96a:	ed2d 8b06 	vpush	{d8-d10}
 23fb96e:	b08b      	sub	sp, #44	; 0x2c
 23fb970:	f340 808c 	ble.w	23fba8c <__ieee754_rem_pio2+0x134>
 23fb974:	498d      	ldr	r1, [pc, #564]	; (23fbbac <__ieee754_rem_pio2+0x254>)
 23fb976:	461f      	mov	r7, r3
 23fb978:	428d      	cmp	r5, r1
 23fb97a:	dc2b      	bgt.n	23fb9d4 <__ieee754_rem_pio2+0x7c>
 23fb97c:	2f00      	cmp	r7, #0
 23fb97e:	4619      	mov	r1, r3
 23fb980:	ee10 0a10 	vmov	r0, s0
 23fb984:	a37e      	add	r3, pc, #504	; (adr r3, 23fbb80 <__ieee754_rem_pio2+0x228>)
 23fb986:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb98a:	f340 81b8 	ble.w	23fbcfe <__ieee754_rem_pio2+0x3a6>
 23fb98e:	f7ea ff53 	bl	23e6838 <__aeabi_dsub>
 23fb992:	4b87      	ldr	r3, [pc, #540]	; (23fbbb0 <__ieee754_rem_pio2+0x258>)
 23fb994:	4680      	mov	r8, r0
 23fb996:	4689      	mov	r9, r1
 23fb998:	429d      	cmp	r5, r3
 23fb99a:	f000 808f 	beq.w	23fbabc <__ieee754_rem_pio2+0x164>
 23fb99e:	2601      	movs	r6, #1
 23fb9a0:	a379      	add	r3, pc, #484	; (adr r3, 23fbb88 <__ieee754_rem_pio2+0x230>)
 23fb9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb9a6:	f7ea ff47 	bl	23e6838 <__aeabi_dsub>
 23fb9aa:	4602      	mov	r2, r0
 23fb9ac:	460b      	mov	r3, r1
 23fb9ae:	4640      	mov	r0, r8
 23fb9b0:	4649      	mov	r1, r9
 23fb9b2:	e9c4 2300 	strd	r2, r3, [r4]
 23fb9b6:	f7ea ff3f 	bl	23e6838 <__aeabi_dsub>
 23fb9ba:	a373      	add	r3, pc, #460	; (adr r3, 23fbb88 <__ieee754_rem_pio2+0x230>)
 23fb9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb9c0:	f7ea ff3a 	bl	23e6838 <__aeabi_dsub>
 23fb9c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fb9c8:	4630      	mov	r0, r6
 23fb9ca:	b00b      	add	sp, #44	; 0x2c
 23fb9cc:	ecbd 8b06 	vpop	{d8-d10}
 23fb9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb9d4:	4977      	ldr	r1, [pc, #476]	; (23fbbb4 <__ieee754_rem_pio2+0x25c>)
 23fb9d6:	428d      	cmp	r5, r1
 23fb9d8:	f340 8092 	ble.w	23fbb00 <__ieee754_rem_pio2+0x1a8>
 23fb9dc:	4976      	ldr	r1, [pc, #472]	; (23fbbb8 <__ieee754_rem_pio2+0x260>)
 23fb9de:	428d      	cmp	r5, r1
 23fb9e0:	dc61      	bgt.n	23fbaa6 <__ieee754_rem_pio2+0x14e>
 23fb9e2:	152e      	asrs	r6, r5, #20
 23fb9e4:	ee10 0a10 	vmov	r0, s0
 23fb9e8:	4690      	mov	r8, r2
 23fb9ea:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 23fb9ee:	eba5 5106 	sub.w	r1, r5, r6, lsl #20
 23fb9f2:	4689      	mov	r9, r1
 23fb9f4:	f7eb fb88 	bl	23e7108 <__aeabi_d2iz>
 23fb9f8:	f7eb f86c 	bl	23e6ad4 <__aeabi_i2d>
 23fb9fc:	4602      	mov	r2, r0
 23fb9fe:	460b      	mov	r3, r1
 23fba00:	4640      	mov	r0, r8
 23fba02:	4649      	mov	r1, r9
 23fba04:	e9cd 2304 	strd	r2, r3, [sp, #16]
 23fba08:	f7ea ff16 	bl	23e6838 <__aeabi_dsub>
 23fba0c:	2200      	movs	r2, #0
 23fba0e:	4b6b      	ldr	r3, [pc, #428]	; (23fbbbc <__ieee754_rem_pio2+0x264>)
 23fba10:	f7eb f8ca 	bl	23e6ba8 <__aeabi_dmul>
 23fba14:	4689      	mov	r9, r1
 23fba16:	4680      	mov	r8, r0
 23fba18:	f7eb fb76 	bl	23e7108 <__aeabi_d2iz>
 23fba1c:	4605      	mov	r5, r0
 23fba1e:	f7eb f859 	bl	23e6ad4 <__aeabi_i2d>
 23fba22:	4602      	mov	r2, r0
 23fba24:	460b      	mov	r3, r1
 23fba26:	4640      	mov	r0, r8
 23fba28:	4649      	mov	r1, r9
 23fba2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 23fba2e:	f7ea ff03 	bl	23e6838 <__aeabi_dsub>
 23fba32:	2200      	movs	r2, #0
 23fba34:	4b61      	ldr	r3, [pc, #388]	; (23fbbbc <__ieee754_rem_pio2+0x264>)
 23fba36:	f7eb f8b7 	bl	23e6ba8 <__aeabi_dmul>
 23fba3a:	4602      	mov	r2, r0
 23fba3c:	460b      	mov	r3, r1
 23fba3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23fba42:	2200      	movs	r2, #0
 23fba44:	2300      	movs	r3, #0
 23fba46:	f7eb fb17 	bl	23e7078 <__aeabi_dcmpeq>
 23fba4a:	2800      	cmp	r0, #0
 23fba4c:	f000 8155 	beq.w	23fbcfa <__ieee754_rem_pio2+0x3a2>
 23fba50:	2d00      	cmp	r5, #0
 23fba52:	bf0c      	ite	eq
 23fba54:	2301      	moveq	r3, #1
 23fba56:	2302      	movne	r3, #2
 23fba58:	4959      	ldr	r1, [pc, #356]	; (23fbbc0 <__ieee754_rem_pio2+0x268>)
 23fba5a:	4632      	mov	r2, r6
 23fba5c:	a804      	add	r0, sp, #16
 23fba5e:	9101      	str	r1, [sp, #4]
 23fba60:	2102      	movs	r1, #2
 23fba62:	9100      	str	r1, [sp, #0]
 23fba64:	4621      	mov	r1, r4
 23fba66:	f000 fb9f 	bl	23fc1a8 <__kernel_rem_pio2>
 23fba6a:	2f00      	cmp	r7, #0
 23fba6c:	4606      	mov	r6, r0
 23fba6e:	daab      	bge.n	23fb9c8 <__ieee754_rem_pio2+0x70>
 23fba70:	6861      	ldr	r1, [r4, #4]
 23fba72:	4246      	negs	r6, r0
 23fba74:	6822      	ldr	r2, [r4, #0]
 23fba76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fba7a:	68e1      	ldr	r1, [r4, #12]
 23fba7c:	e9c4 2300 	strd	r2, r3, [r4]
 23fba80:	68a2      	ldr	r2, [r4, #8]
 23fba82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fba86:	e9c4 2302 	strd	r2, r3, [r4, #8]
 23fba8a:	e79d      	b.n	23fb9c8 <__ieee754_rem_pio2+0x70>
 23fba8c:	2000      	movs	r0, #0
 23fba8e:	2100      	movs	r1, #0
 23fba90:	2600      	movs	r6, #0
 23fba92:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fba96:	4630      	mov	r0, r6
 23fba98:	ed84 0b00 	vstr	d0, [r4]
 23fba9c:	b00b      	add	sp, #44	; 0x2c
 23fba9e:	ecbd 8b06 	vpop	{d8-d10}
 23fbaa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fbaa6:	ee10 0a10 	vmov	r0, s0
 23fbaaa:	4619      	mov	r1, r3
 23fbaac:	f7ea fec4 	bl	23e6838 <__aeabi_dsub>
 23fbab0:	2600      	movs	r6, #0
 23fbab2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fbab6:	e9c4 0100 	strd	r0, r1, [r4]
 23fbaba:	e785      	b.n	23fb9c8 <__ieee754_rem_pio2+0x70>
 23fbabc:	a334      	add	r3, pc, #208	; (adr r3, 23fbb90 <__ieee754_rem_pio2+0x238>)
 23fbabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbac2:	f7ea feb9 	bl	23e6838 <__aeabi_dsub>
 23fbac6:	4680      	mov	r8, r0
 23fbac8:	4689      	mov	r9, r1
 23fbaca:	2601      	movs	r6, #1
 23fbacc:	a332      	add	r3, pc, #200	; (adr r3, 23fbb98 <__ieee754_rem_pio2+0x240>)
 23fbace:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbad2:	f7ea feb1 	bl	23e6838 <__aeabi_dsub>
 23fbad6:	4602      	mov	r2, r0
 23fbad8:	460b      	mov	r3, r1
 23fbada:	4640      	mov	r0, r8
 23fbadc:	4649      	mov	r1, r9
 23fbade:	e9c4 2300 	strd	r2, r3, [r4]
 23fbae2:	f7ea fea9 	bl	23e6838 <__aeabi_dsub>
 23fbae6:	a32c      	add	r3, pc, #176	; (adr r3, 23fbb98 <__ieee754_rem_pio2+0x240>)
 23fbae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbaec:	f7ea fea4 	bl	23e6838 <__aeabi_dsub>
 23fbaf0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fbaf4:	4630      	mov	r0, r6
 23fbaf6:	b00b      	add	sp, #44	; 0x2c
 23fbaf8:	ecbd 8b06 	vpop	{d8-d10}
 23fbafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fbb00:	f7fe febe 	bl	23fa880 <fabs>
 23fbb04:	ee10 0a10 	vmov	r0, s0
 23fbb08:	ec59 8b10 	vmov	r8, r9, d0
 23fbb0c:	a324      	add	r3, pc, #144	; (adr r3, 23fbba0 <__ieee754_rem_pio2+0x248>)
 23fbb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbb12:	4649      	mov	r1, r9
 23fbb14:	f7eb f848 	bl	23e6ba8 <__aeabi_dmul>
 23fbb18:	2200      	movs	r2, #0
 23fbb1a:	4b2a      	ldr	r3, [pc, #168]	; (23fbbc4 <__ieee754_rem_pio2+0x26c>)
 23fbb1c:	f7ea fe8e 	bl	23e683c <__adddf3>
 23fbb20:	f7eb faf2 	bl	23e7108 <__aeabi_d2iz>
 23fbb24:	4606      	mov	r6, r0
 23fbb26:	f7ea ffd5 	bl	23e6ad4 <__aeabi_i2d>
 23fbb2a:	4602      	mov	r2, r0
 23fbb2c:	460b      	mov	r3, r1
 23fbb2e:	ec43 2b18 	vmov	d8, r2, r3
 23fbb32:	a313      	add	r3, pc, #76	; (adr r3, 23fbb80 <__ieee754_rem_pio2+0x228>)
 23fbb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbb38:	f7eb f836 	bl	23e6ba8 <__aeabi_dmul>
 23fbb3c:	4602      	mov	r2, r0
 23fbb3e:	460b      	mov	r3, r1
 23fbb40:	4640      	mov	r0, r8
 23fbb42:	4649      	mov	r1, r9
 23fbb44:	eeb0 9a48 	vmov.f32	s18, s16
 23fbb48:	eef0 9a68 	vmov.f32	s19, s17
 23fbb4c:	f7ea fe74 	bl	23e6838 <__aeabi_dsub>
 23fbb50:	4682      	mov	sl, r0
 23fbb52:	468b      	mov	fp, r1
 23fbb54:	a30c      	add	r3, pc, #48	; (adr r3, 23fbb88 <__ieee754_rem_pio2+0x230>)
 23fbb56:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbb5a:	ec51 0b18 	vmov	r0, r1, d8
 23fbb5e:	f7eb f823 	bl	23e6ba8 <__aeabi_dmul>
 23fbb62:	2e1f      	cmp	r6, #31
 23fbb64:	ec41 0b18 	vmov	d8, r0, r1
 23fbb68:	dc30      	bgt.n	23fbbcc <__ieee754_rem_pio2+0x274>
 23fbb6a:	4b17      	ldr	r3, [pc, #92]	; (23fbbc8 <__ieee754_rem_pio2+0x270>)
 23fbb6c:	1e72      	subs	r2, r6, #1
 23fbb6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23fbb72:	42ab      	cmp	r3, r5
 23fbb74:	d02a      	beq.n	23fbbcc <__ieee754_rem_pio2+0x274>
 23fbb76:	4602      	mov	r2, r0
 23fbb78:	460b      	mov	r3, r1
 23fbb7a:	e09d      	b.n	23fbcb8 <__ieee754_rem_pio2+0x360>
 23fbb7c:	f3af 8000 	nop.w
 23fbb80:	54400000 	.word	0x54400000
 23fbb84:	3ff921fb 	.word	0x3ff921fb
 23fbb88:	1a626331 	.word	0x1a626331
 23fbb8c:	3dd0b461 	.word	0x3dd0b461
 23fbb90:	1a600000 	.word	0x1a600000
 23fbb94:	3dd0b461 	.word	0x3dd0b461
 23fbb98:	2e037073 	.word	0x2e037073
 23fbb9c:	3ba3198a 	.word	0x3ba3198a
 23fbba0:	6dc9c883 	.word	0x6dc9c883
 23fbba4:	3fe45f30 	.word	0x3fe45f30
 23fbba8:	3fe921fb 	.word	0x3fe921fb
 23fbbac:	4002d97b 	.word	0x4002d97b
 23fbbb0:	3ff921fb 	.word	0x3ff921fb
 23fbbb4:	413921fb 	.word	0x413921fb
 23fbbb8:	7fefffff 	.word	0x7fefffff
 23fbbbc:	41700000 	.word	0x41700000
 23fbbc0:	023ffce4 	.word	0x023ffce4
 23fbbc4:	3fe00000 	.word	0x3fe00000
 23fbbc8:	023ffc64 	.word	0x023ffc64
 23fbbcc:	152b      	asrs	r3, r5, #20
 23fbbce:	4650      	mov	r0, sl
 23fbbd0:	4659      	mov	r1, fp
 23fbbd2:	9303      	str	r3, [sp, #12]
 23fbbd4:	ec53 2b18 	vmov	r2, r3, d8
 23fbbd8:	f7ea fe2e 	bl	23e6838 <__aeabi_dsub>
 23fbbdc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 23fbbe0:	4680      	mov	r8, r0
 23fbbe2:	4689      	mov	r9, r1
 23fbbe4:	ebc3 5515 	rsb	r5, r3, r5, lsr #20
 23fbbe8:	2d10      	cmp	r5, #16
 23fbbea:	dd6b      	ble.n	23fbcc4 <__ieee754_rem_pio2+0x36c>
 23fbbec:	a364      	add	r3, pc, #400	; (adr r3, 23fbd80 <__ieee754_rem_pio2+0x428>)
 23fbbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbbf2:	ec51 0b19 	vmov	r0, r1, d9
 23fbbf6:	f7ea ffd7 	bl	23e6ba8 <__aeabi_dmul>
 23fbbfa:	4680      	mov	r8, r0
 23fbbfc:	4689      	mov	r9, r1
 23fbbfe:	4650      	mov	r0, sl
 23fbc00:	4642      	mov	r2, r8
 23fbc02:	4659      	mov	r1, fp
 23fbc04:	464b      	mov	r3, r9
 23fbc06:	f7ea fe17 	bl	23e6838 <__aeabi_dsub>
 23fbc0a:	4602      	mov	r2, r0
 23fbc0c:	460b      	mov	r3, r1
 23fbc0e:	4650      	mov	r0, sl
 23fbc10:	4659      	mov	r1, fp
 23fbc12:	4692      	mov	sl, r2
 23fbc14:	469b      	mov	fp, r3
 23fbc16:	ec43 2b1a 	vmov	d10, r2, r3
 23fbc1a:	f7ea fe0d 	bl	23e6838 <__aeabi_dsub>
 23fbc1e:	4642      	mov	r2, r8
 23fbc20:	464b      	mov	r3, r9
 23fbc22:	f7ea fe09 	bl	23e6838 <__aeabi_dsub>
 23fbc26:	4680      	mov	r8, r0
 23fbc28:	4689      	mov	r9, r1
 23fbc2a:	a357      	add	r3, pc, #348	; (adr r3, 23fbd88 <__ieee754_rem_pio2+0x430>)
 23fbc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbc30:	ec51 0b19 	vmov	r0, r1, d9
 23fbc34:	f7ea ffb8 	bl	23e6ba8 <__aeabi_dmul>
 23fbc38:	4642      	mov	r2, r8
 23fbc3a:	464b      	mov	r3, r9
 23fbc3c:	f7ea fdfc 	bl	23e6838 <__aeabi_dsub>
 23fbc40:	4602      	mov	r2, r0
 23fbc42:	460b      	mov	r3, r1
 23fbc44:	4650      	mov	r0, sl
 23fbc46:	4659      	mov	r1, fp
 23fbc48:	ec43 2b18 	vmov	d8, r2, r3
 23fbc4c:	f7ea fdf4 	bl	23e6838 <__aeabi_dsub>
 23fbc50:	9a03      	ldr	r2, [sp, #12]
 23fbc52:	f3c1 530a 	ubfx	r3, r1, #20, #11
 23fbc56:	4680      	mov	r8, r0
 23fbc58:	4689      	mov	r9, r1
 23fbc5a:	1ad3      	subs	r3, r2, r3
 23fbc5c:	2b31      	cmp	r3, #49	; 0x31
 23fbc5e:	dd31      	ble.n	23fbcc4 <__ieee754_rem_pio2+0x36c>
 23fbc60:	a34c      	add	r3, pc, #304	; (adr r3, 23fbd94 <__ieee754_rem_pio2+0x43c>)
 23fbc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbc66:	ec51 0b19 	vmov	r0, r1, d9
 23fbc6a:	f7ea ff9d 	bl	23e6ba8 <__aeabi_dmul>
 23fbc6e:	4680      	mov	r8, r0
 23fbc70:	4689      	mov	r9, r1
 23fbc72:	4642      	mov	r2, r8
 23fbc74:	464b      	mov	r3, r9
 23fbc76:	ec51 0b1a 	vmov	r0, r1, d10
 23fbc7a:	f7ea fddd 	bl	23e6838 <__aeabi_dsub>
 23fbc7e:	4682      	mov	sl, r0
 23fbc80:	468b      	mov	fp, r1
 23fbc82:	4652      	mov	r2, sl
 23fbc84:	465b      	mov	r3, fp
 23fbc86:	ec51 0b1a 	vmov	r0, r1, d10
 23fbc8a:	f7ea fdd5 	bl	23e6838 <__aeabi_dsub>
 23fbc8e:	4642      	mov	r2, r8
 23fbc90:	464b      	mov	r3, r9
 23fbc92:	f7ea fdd1 	bl	23e6838 <__aeabi_dsub>
 23fbc96:	4680      	mov	r8, r0
 23fbc98:	4689      	mov	r9, r1
 23fbc9a:	a340      	add	r3, pc, #256	; (adr r3, 23fbd9c <__ieee754_rem_pio2+0x444>)
 23fbc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbca0:	ec51 0b19 	vmov	r0, r1, d9
 23fbca4:	f7ea ff80 	bl	23e6ba8 <__aeabi_dmul>
 23fbca8:	4642      	mov	r2, r8
 23fbcaa:	464b      	mov	r3, r9
 23fbcac:	f7ea fdc4 	bl	23e6838 <__aeabi_dsub>
 23fbcb0:	4602      	mov	r2, r0
 23fbcb2:	460b      	mov	r3, r1
 23fbcb4:	ec43 2b18 	vmov	d8, r2, r3
 23fbcb8:	4650      	mov	r0, sl
 23fbcba:	4659      	mov	r1, fp
 23fbcbc:	f7ea fdbc 	bl	23e6838 <__aeabi_dsub>
 23fbcc0:	4680      	mov	r8, r0
 23fbcc2:	4689      	mov	r9, r1
 23fbcc4:	4642      	mov	r2, r8
 23fbcc6:	464b      	mov	r3, r9
 23fbcc8:	4650      	mov	r0, sl
 23fbcca:	4659      	mov	r1, fp
 23fbccc:	e9c4 8900 	strd	r8, r9, [r4]
 23fbcd0:	f7ea fdb2 	bl	23e6838 <__aeabi_dsub>
 23fbcd4:	ec53 2b18 	vmov	r2, r3, d8
 23fbcd8:	f7ea fdae 	bl	23e6838 <__aeabi_dsub>
 23fbcdc:	2f00      	cmp	r7, #0
 23fbcde:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fbce2:	f6bf ae71 	bge.w	23fb9c8 <__ieee754_rem_pio2+0x70>
 23fbce6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 23fbcea:	4276      	negs	r6, r6
 23fbcec:	e9c4 8300 	strd	r8, r3, [r4]
 23fbcf0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fbcf4:	e9c4 0302 	strd	r0, r3, [r4, #8]
 23fbcf8:	e666      	b.n	23fb9c8 <__ieee754_rem_pio2+0x70>
 23fbcfa:	2303      	movs	r3, #3
 23fbcfc:	e6ac      	b.n	23fba58 <__ieee754_rem_pio2+0x100>
 23fbcfe:	f7ea fd9d 	bl	23e683c <__adddf3>
 23fbd02:	4b23      	ldr	r3, [pc, #140]	; (23fbd90 <__ieee754_rem_pio2+0x438>)
 23fbd04:	4680      	mov	r8, r0
 23fbd06:	4689      	mov	r9, r1
 23fbd08:	429d      	cmp	r5, r3
 23fbd0a:	d016      	beq.n	23fbd3a <__ieee754_rem_pio2+0x3e2>
 23fbd0c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 23fbd10:	a319      	add	r3, pc, #100	; (adr r3, 23fbd78 <__ieee754_rem_pio2+0x420>)
 23fbd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbd16:	f7ea fd91 	bl	23e683c <__adddf3>
 23fbd1a:	4602      	mov	r2, r0
 23fbd1c:	460b      	mov	r3, r1
 23fbd1e:	4640      	mov	r0, r8
 23fbd20:	4649      	mov	r1, r9
 23fbd22:	e9c4 2300 	strd	r2, r3, [r4]
 23fbd26:	f7ea fd87 	bl	23e6838 <__aeabi_dsub>
 23fbd2a:	a313      	add	r3, pc, #76	; (adr r3, 23fbd78 <__ieee754_rem_pio2+0x420>)
 23fbd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbd30:	f7ea fd84 	bl	23e683c <__adddf3>
 23fbd34:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fbd38:	e646      	b.n	23fb9c8 <__ieee754_rem_pio2+0x70>
 23fbd3a:	a311      	add	r3, pc, #68	; (adr r3, 23fbd80 <__ieee754_rem_pio2+0x428>)
 23fbd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbd40:	f7ea fd7c 	bl	23e683c <__adddf3>
 23fbd44:	4680      	mov	r8, r0
 23fbd46:	4689      	mov	r9, r1
 23fbd48:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 23fbd4c:	a30e      	add	r3, pc, #56	; (adr r3, 23fbd88 <__ieee754_rem_pio2+0x430>)
 23fbd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbd52:	f7ea fd73 	bl	23e683c <__adddf3>
 23fbd56:	4602      	mov	r2, r0
 23fbd58:	460b      	mov	r3, r1
 23fbd5a:	4640      	mov	r0, r8
 23fbd5c:	4649      	mov	r1, r9
 23fbd5e:	e9c4 2300 	strd	r2, r3, [r4]
 23fbd62:	f7ea fd69 	bl	23e6838 <__aeabi_dsub>
 23fbd66:	a308      	add	r3, pc, #32	; (adr r3, 23fbd88 <__ieee754_rem_pio2+0x430>)
 23fbd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbd6c:	f7ea fd66 	bl	23e683c <__adddf3>
 23fbd70:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fbd74:	e628      	b.n	23fb9c8 <__ieee754_rem_pio2+0x70>
 23fbd76:	bf00      	nop
 23fbd78:	1a626331 	.word	0x1a626331
 23fbd7c:	3dd0b461 	.word	0x3dd0b461
 23fbd80:	1a600000 	.word	0x1a600000
 23fbd84:	3dd0b461 	.word	0x3dd0b461
 23fbd88:	2e037073 	.word	0x2e037073
 23fbd8c:	3ba3198a 	.word	0x3ba3198a
 23fbd90:	3ff921fb 	.word	0x3ff921fb
 23fbd94:	2e000000 	.word	0x2e000000
 23fbd98:	3ba3198a 	.word	0x3ba3198a
 23fbd9c:	252049c1 	.word	0x252049c1
 23fbda0:	397b839a 	.word	0x397b839a

023fbda4 <__ieee754_sqrt>:
 23fbda4:	495e      	ldr	r1, [pc, #376]	; (23fbf20 <__ieee754_sqrt+0x17c>)
 23fbda6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fbdaa:	ec55 4b10 	vmov	r4, r5, d0
 23fbdae:	43a9      	bics	r1, r5
 23fbdb0:	f000 8094 	beq.w	23fbedc <__ieee754_sqrt+0x138>
 23fbdb4:	2d00      	cmp	r5, #0
 23fbdb6:	462b      	mov	r3, r5
 23fbdb8:	ee10 2a10 	vmov	r2, s0
 23fbdbc:	dd5a      	ble.n	23fbe74 <__ieee754_sqrt+0xd0>
 23fbdbe:	1528      	asrs	r0, r5, #20
 23fbdc0:	d067      	beq.n	23fbe92 <__ieee754_sqrt+0xee>
 23fbdc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 23fbdc6:	07c1      	lsls	r1, r0, #31
 23fbdc8:	f2a0 37ff 	subw	r7, r0, #1023	; 0x3ff
 23fbdcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fbdd0:	d403      	bmi.n	23fbdda <__ieee754_sqrt+0x36>
 23fbdd2:	005b      	lsls	r3, r3, #1
 23fbdd4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23fbdd8:	0052      	lsls	r2, r2, #1
 23fbdda:	0fd1      	lsrs	r1, r2, #31
 23fbddc:	2600      	movs	r6, #0
 23fbdde:	107f      	asrs	r7, r7, #1
 23fbde0:	f04f 0c16 	mov.w	ip, #22
 23fbde4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 23fbde8:	46b6      	mov	lr, r6
 23fbdea:	0052      	lsls	r2, r2, #1
 23fbdec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 23fbdf0:	eb0e 0001 	add.w	r0, lr, r1
 23fbdf4:	4298      	cmp	r0, r3
 23fbdf6:	dc03      	bgt.n	23fbe00 <__ieee754_sqrt+0x5c>
 23fbdf8:	1a1b      	subs	r3, r3, r0
 23fbdfa:	eb00 0e01 	add.w	lr, r0, r1
 23fbdfe:	440e      	add	r6, r1
 23fbe00:	005b      	lsls	r3, r3, #1
 23fbe02:	f1bc 0c01 	subs.w	ip, ip, #1
 23fbe06:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23fbe0a:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23fbe0e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23fbe12:	d1ed      	bne.n	23fbdf0 <__ieee754_sqrt+0x4c>
 23fbe14:	4665      	mov	r5, ip
 23fbe16:	2420      	movs	r4, #32
 23fbe18:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 23fbe1c:	e014      	b.n	23fbe48 <__ieee754_sqrt+0xa4>
 23fbe1e:	d10a      	bne.n	23fbe36 <__ieee754_sqrt+0x92>
 23fbe20:	4290      	cmp	r0, r2
 23fbe22:	d808      	bhi.n	23fbe36 <__ieee754_sqrt+0x92>
 23fbe24:	2800      	cmp	r0, #0
 23fbe26:	eb00 0c01 	add.w	ip, r0, r1
 23fbe2a:	db1d      	blt.n	23fbe68 <__ieee754_sqrt+0xc4>
 23fbe2c:	46f0      	mov	r8, lr
 23fbe2e:	2300      	movs	r3, #0
 23fbe30:	1a12      	subs	r2, r2, r0
 23fbe32:	440d      	add	r5, r1
 23fbe34:	46c6      	mov	lr, r8
 23fbe36:	0fd0      	lsrs	r0, r2, #31
 23fbe38:	3c01      	subs	r4, #1
 23fbe3a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23fbe3e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 23fbe42:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23fbe46:	d033      	beq.n	23fbeb0 <__ieee754_sqrt+0x10c>
 23fbe48:	4573      	cmp	r3, lr
 23fbe4a:	eb01 000c 	add.w	r0, r1, ip
 23fbe4e:	dde6      	ble.n	23fbe1e <__ieee754_sqrt+0x7a>
 23fbe50:	2800      	cmp	r0, #0
 23fbe52:	eb00 0c01 	add.w	ip, r0, r1
 23fbe56:	db07      	blt.n	23fbe68 <__ieee754_sqrt+0xc4>
 23fbe58:	46f0      	mov	r8, lr
 23fbe5a:	eba3 030e 	sub.w	r3, r3, lr
 23fbe5e:	4290      	cmp	r0, r2
 23fbe60:	bf88      	it	hi
 23fbe62:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 23fbe66:	e7e3      	b.n	23fbe30 <__ieee754_sqrt+0x8c>
 23fbe68:	f1bc 0f00 	cmp.w	ip, #0
 23fbe6c:	dbf4      	blt.n	23fbe58 <__ieee754_sqrt+0xb4>
 23fbe6e:	f10e 0801 	add.w	r8, lr, #1
 23fbe72:	e7f2      	b.n	23fbe5a <__ieee754_sqrt+0xb6>
 23fbe74:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 23fbe78:	4321      	orrs	r1, r4
 23fbe7a:	d028      	beq.n	23fbece <__ieee754_sqrt+0x12a>
 23fbe7c:	2d00      	cmp	r5, #0
 23fbe7e:	d13d      	bne.n	23fbefc <__ieee754_sqrt+0x158>
 23fbe80:	4628      	mov	r0, r5
 23fbe82:	0ad1      	lsrs	r1, r2, #11
 23fbe84:	3815      	subs	r0, #21
 23fbe86:	0552      	lsls	r2, r2, #21
 23fbe88:	460b      	mov	r3, r1
 23fbe8a:	2900      	cmp	r1, #0
 23fbe8c:	d0f9      	beq.n	23fbe82 <__ieee754_sqrt+0xde>
 23fbe8e:	02cf      	lsls	r7, r1, #11
 23fbe90:	d441      	bmi.n	23fbf16 <__ieee754_sqrt+0x172>
 23fbe92:	2400      	movs	r4, #0
 23fbe94:	005b      	lsls	r3, r3, #1
 23fbe96:	4625      	mov	r5, r4
 23fbe98:	3401      	adds	r4, #1
 23fbe9a:	02de      	lsls	r6, r3, #11
 23fbe9c:	d5fa      	bpl.n	23fbe94 <__ieee754_sqrt+0xf0>
 23fbe9e:	4619      	mov	r1, r3
 23fbea0:	4613      	mov	r3, r2
 23fbea2:	40a2      	lsls	r2, r4
 23fbea4:	f1c4 0420 	rsb	r4, r4, #32
 23fbea8:	40e3      	lsrs	r3, r4
 23fbeaa:	1b40      	subs	r0, r0, r5
 23fbeac:	430b      	orrs	r3, r1
 23fbeae:	e788      	b.n	23fbdc2 <__ieee754_sqrt+0x1e>
 23fbeb0:	4313      	orrs	r3, r2
 23fbeb2:	d10e      	bne.n	23fbed2 <__ieee754_sqrt+0x12e>
 23fbeb4:	086c      	lsrs	r4, r5, #1
 23fbeb6:	07f3      	lsls	r3, r6, #31
 23fbeb8:	491a      	ldr	r1, [pc, #104]	; (23fbf24 <__ieee754_sqrt+0x180>)
 23fbeba:	bf48      	it	mi
 23fbebc:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 23fbec0:	eb01 0166 	add.w	r1, r1, r6, asr #1
 23fbec4:	4622      	mov	r2, r4
 23fbec6:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 23fbeca:	ec43 2b10 	vmov	d0, r2, r3
 23fbece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fbed2:	1c6a      	adds	r2, r5, #1
 23fbed4:	d01d      	beq.n	23fbf12 <__ieee754_sqrt+0x16e>
 23fbed6:	1c6c      	adds	r4, r5, #1
 23fbed8:	0864      	lsrs	r4, r4, #1
 23fbeda:	e7ec      	b.n	23fbeb6 <__ieee754_sqrt+0x112>
 23fbedc:	ee10 2a10 	vmov	r2, s0
 23fbee0:	462b      	mov	r3, r5
 23fbee2:	ee10 0a10 	vmov	r0, s0
 23fbee6:	4629      	mov	r1, r5
 23fbee8:	f7ea fe5e 	bl	23e6ba8 <__aeabi_dmul>
 23fbeec:	4622      	mov	r2, r4
 23fbeee:	462b      	mov	r3, r5
 23fbef0:	f7ea fca4 	bl	23e683c <__adddf3>
 23fbef4:	ec41 0b10 	vmov	d0, r0, r1
 23fbef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fbefc:	4620      	mov	r0, r4
 23fbefe:	4629      	mov	r1, r5
 23fbf00:	f7ea fc9a 	bl	23e6838 <__aeabi_dsub>
 23fbf04:	4602      	mov	r2, r0
 23fbf06:	460b      	mov	r3, r1
 23fbf08:	f7ea ff78 	bl	23e6dfc <__aeabi_ddiv>
 23fbf0c:	ec41 0b10 	vmov	d0, r0, r1
 23fbf10:	e7dd      	b.n	23fbece <__ieee754_sqrt+0x12a>
 23fbf12:	3601      	adds	r6, #1
 23fbf14:	e7cf      	b.n	23fbeb6 <__ieee754_sqrt+0x112>
 23fbf16:	4613      	mov	r3, r2
 23fbf18:	2420      	movs	r4, #32
 23fbf1a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 23fbf1e:	e7c3      	b.n	23fbea8 <__ieee754_sqrt+0x104>
 23fbf20:	7ff00000 	.word	0x7ff00000
 23fbf24:	3fe00000 	.word	0x3fe00000

023fbf28 <__kernel_cos>:
 23fbf28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fbf2c:	ec57 6b10 	vmov	r6, r7, d0
 23fbf30:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
 23fbf34:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
 23fbf38:	ec5b ab11 	vmov	sl, fp, d1
 23fbf3c:	ed2d 8b04 	vpush	{d8-d9}
 23fbf40:	da71      	bge.n	23fc026 <__kernel_cos+0xfe>
 23fbf42:	ee10 0a10 	vmov	r0, s0
 23fbf46:	4639      	mov	r1, r7
 23fbf48:	f7eb f8de 	bl	23e7108 <__aeabi_d2iz>
 23fbf4c:	2800      	cmp	r0, #0
 23fbf4e:	f000 80f6 	beq.w	23fc13e <__kernel_cos+0x216>
 23fbf52:	4632      	mov	r2, r6
 23fbf54:	463b      	mov	r3, r7
 23fbf56:	4630      	mov	r0, r6
 23fbf58:	4639      	mov	r1, r7
 23fbf5a:	f7ea fe25 	bl	23e6ba8 <__aeabi_dmul>
 23fbf5e:	4604      	mov	r4, r0
 23fbf60:	460d      	mov	r5, r1
 23fbf62:	a37b      	add	r3, pc, #492	; (adr r3, 23fc150 <__kernel_cos+0x228>)
 23fbf64:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbf68:	f7ea fe1e 	bl	23e6ba8 <__aeabi_dmul>
 23fbf6c:	a37a      	add	r3, pc, #488	; (adr r3, 23fc158 <__kernel_cos+0x230>)
 23fbf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbf72:	f7ea fc63 	bl	23e683c <__adddf3>
 23fbf76:	4622      	mov	r2, r4
 23fbf78:	462b      	mov	r3, r5
 23fbf7a:	f7ea fe15 	bl	23e6ba8 <__aeabi_dmul>
 23fbf7e:	a378      	add	r3, pc, #480	; (adr r3, 23fc160 <__kernel_cos+0x238>)
 23fbf80:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbf84:	f7ea fc58 	bl	23e6838 <__aeabi_dsub>
 23fbf88:	4622      	mov	r2, r4
 23fbf8a:	462b      	mov	r3, r5
 23fbf8c:	f7ea fe0c 	bl	23e6ba8 <__aeabi_dmul>
 23fbf90:	a375      	add	r3, pc, #468	; (adr r3, 23fc168 <__kernel_cos+0x240>)
 23fbf92:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbf96:	f7ea fc51 	bl	23e683c <__adddf3>
 23fbf9a:	4622      	mov	r2, r4
 23fbf9c:	462b      	mov	r3, r5
 23fbf9e:	f7ea fe03 	bl	23e6ba8 <__aeabi_dmul>
 23fbfa2:	a373      	add	r3, pc, #460	; (adr r3, 23fc170 <__kernel_cos+0x248>)
 23fbfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbfa8:	f7ea fc46 	bl	23e6838 <__aeabi_dsub>
 23fbfac:	4622      	mov	r2, r4
 23fbfae:	462b      	mov	r3, r5
 23fbfb0:	f7ea fdfa 	bl	23e6ba8 <__aeabi_dmul>
 23fbfb4:	a370      	add	r3, pc, #448	; (adr r3, 23fc178 <__kernel_cos+0x250>)
 23fbfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbfba:	f7ea fc3f 	bl	23e683c <__adddf3>
 23fbfbe:	4622      	mov	r2, r4
 23fbfc0:	462b      	mov	r3, r5
 23fbfc2:	f7ea fdf1 	bl	23e6ba8 <__aeabi_dmul>
 23fbfc6:	ec41 0b18 	vmov	d8, r0, r1
 23fbfca:	2200      	movs	r2, #0
 23fbfcc:	4b70      	ldr	r3, [pc, #448]	; (23fc190 <__kernel_cos+0x268>)
 23fbfce:	4620      	mov	r0, r4
 23fbfd0:	4629      	mov	r1, r5
 23fbfd2:	f7ea fde9 	bl	23e6ba8 <__aeabi_dmul>
 23fbfd6:	4680      	mov	r8, r0
 23fbfd8:	4689      	mov	r9, r1
 23fbfda:	4620      	mov	r0, r4
 23fbfdc:	4629      	mov	r1, r5
 23fbfde:	ec53 2b18 	vmov	r2, r3, d8
 23fbfe2:	f7ea fde1 	bl	23e6ba8 <__aeabi_dmul>
 23fbfe6:	4604      	mov	r4, r0
 23fbfe8:	460d      	mov	r5, r1
 23fbfea:	4652      	mov	r2, sl
 23fbfec:	465b      	mov	r3, fp
 23fbfee:	4630      	mov	r0, r6
 23fbff0:	4639      	mov	r1, r7
 23fbff2:	f7ea fdd9 	bl	23e6ba8 <__aeabi_dmul>
 23fbff6:	4602      	mov	r2, r0
 23fbff8:	460b      	mov	r3, r1
 23fbffa:	4620      	mov	r0, r4
 23fbffc:	4629      	mov	r1, r5
 23fbffe:	f7ea fc1b 	bl	23e6838 <__aeabi_dsub>
 23fc002:	4602      	mov	r2, r0
 23fc004:	460b      	mov	r3, r1
 23fc006:	4640      	mov	r0, r8
 23fc008:	4649      	mov	r1, r9
 23fc00a:	f7ea fc15 	bl	23e6838 <__aeabi_dsub>
 23fc00e:	4602      	mov	r2, r0
 23fc010:	460b      	mov	r3, r1
 23fc012:	2000      	movs	r0, #0
 23fc014:	495f      	ldr	r1, [pc, #380]	; (23fc194 <__kernel_cos+0x26c>)
 23fc016:	f7ea fc0f 	bl	23e6838 <__aeabi_dsub>
 23fc01a:	ecbd 8b04 	vpop	{d8-d9}
 23fc01e:	ec41 0b10 	vmov	d0, r0, r1
 23fc022:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc026:	ee10 2a10 	vmov	r2, s0
 23fc02a:	ee10 0a10 	vmov	r0, s0
 23fc02e:	463b      	mov	r3, r7
 23fc030:	4639      	mov	r1, r7
 23fc032:	f7ea fdb9 	bl	23e6ba8 <__aeabi_dmul>
 23fc036:	4604      	mov	r4, r0
 23fc038:	460d      	mov	r5, r1
 23fc03a:	a345      	add	r3, pc, #276	; (adr r3, 23fc150 <__kernel_cos+0x228>)
 23fc03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc040:	f7ea fdb2 	bl	23e6ba8 <__aeabi_dmul>
 23fc044:	a344      	add	r3, pc, #272	; (adr r3, 23fc158 <__kernel_cos+0x230>)
 23fc046:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc04a:	f7ea fbf7 	bl	23e683c <__adddf3>
 23fc04e:	4622      	mov	r2, r4
 23fc050:	462b      	mov	r3, r5
 23fc052:	f7ea fda9 	bl	23e6ba8 <__aeabi_dmul>
 23fc056:	a342      	add	r3, pc, #264	; (adr r3, 23fc160 <__kernel_cos+0x238>)
 23fc058:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc05c:	f7ea fbec 	bl	23e6838 <__aeabi_dsub>
 23fc060:	4622      	mov	r2, r4
 23fc062:	462b      	mov	r3, r5
 23fc064:	f7ea fda0 	bl	23e6ba8 <__aeabi_dmul>
 23fc068:	a33f      	add	r3, pc, #252	; (adr r3, 23fc168 <__kernel_cos+0x240>)
 23fc06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc06e:	f7ea fbe5 	bl	23e683c <__adddf3>
 23fc072:	4622      	mov	r2, r4
 23fc074:	462b      	mov	r3, r5
 23fc076:	f7ea fd97 	bl	23e6ba8 <__aeabi_dmul>
 23fc07a:	a33d      	add	r3, pc, #244	; (adr r3, 23fc170 <__kernel_cos+0x248>)
 23fc07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc080:	f7ea fbda 	bl	23e6838 <__aeabi_dsub>
 23fc084:	4622      	mov	r2, r4
 23fc086:	462b      	mov	r3, r5
 23fc088:	f7ea fd8e 	bl	23e6ba8 <__aeabi_dmul>
 23fc08c:	a33a      	add	r3, pc, #232	; (adr r3, 23fc178 <__kernel_cos+0x250>)
 23fc08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc092:	f7ea fbd3 	bl	23e683c <__adddf3>
 23fc096:	462b      	mov	r3, r5
 23fc098:	4622      	mov	r2, r4
 23fc09a:	f7ea fd85 	bl	23e6ba8 <__aeabi_dmul>
 23fc09e:	4b3e      	ldr	r3, [pc, #248]	; (23fc198 <__kernel_cos+0x270>)
 23fc0a0:	4599      	cmp	r9, r3
 23fc0a2:	ec41 0b18 	vmov	d8, r0, r1
 23fc0a6:	dd90      	ble.n	23fbfca <__kernel_cos+0xa2>
 23fc0a8:	4b3c      	ldr	r3, [pc, #240]	; (23fc19c <__kernel_cos+0x274>)
 23fc0aa:	4599      	cmp	r9, r3
 23fc0ac:	dc3c      	bgt.n	23fc128 <__kernel_cos+0x200>
 23fc0ae:	2200      	movs	r2, #0
 23fc0b0:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
 23fc0b4:	2000      	movs	r0, #0
 23fc0b6:	4937      	ldr	r1, [pc, #220]	; (23fc194 <__kernel_cos+0x26c>)
 23fc0b8:	4690      	mov	r8, r2
 23fc0ba:	4699      	mov	r9, r3
 23fc0bc:	f7ea fbbc 	bl	23e6838 <__aeabi_dsub>
 23fc0c0:	ec41 0b19 	vmov	d9, r0, r1
 23fc0c4:	2200      	movs	r2, #0
 23fc0c6:	4b32      	ldr	r3, [pc, #200]	; (23fc190 <__kernel_cos+0x268>)
 23fc0c8:	4620      	mov	r0, r4
 23fc0ca:	4629      	mov	r1, r5
 23fc0cc:	f7ea fd6c 	bl	23e6ba8 <__aeabi_dmul>
 23fc0d0:	4642      	mov	r2, r8
 23fc0d2:	464b      	mov	r3, r9
 23fc0d4:	f7ea fbb0 	bl	23e6838 <__aeabi_dsub>
 23fc0d8:	4680      	mov	r8, r0
 23fc0da:	4689      	mov	r9, r1
 23fc0dc:	4620      	mov	r0, r4
 23fc0de:	4629      	mov	r1, r5
 23fc0e0:	ec53 2b18 	vmov	r2, r3, d8
 23fc0e4:	f7ea fd60 	bl	23e6ba8 <__aeabi_dmul>
 23fc0e8:	4604      	mov	r4, r0
 23fc0ea:	460d      	mov	r5, r1
 23fc0ec:	4652      	mov	r2, sl
 23fc0ee:	465b      	mov	r3, fp
 23fc0f0:	4630      	mov	r0, r6
 23fc0f2:	4639      	mov	r1, r7
 23fc0f4:	f7ea fd58 	bl	23e6ba8 <__aeabi_dmul>
 23fc0f8:	4602      	mov	r2, r0
 23fc0fa:	460b      	mov	r3, r1
 23fc0fc:	4620      	mov	r0, r4
 23fc0fe:	4629      	mov	r1, r5
 23fc100:	f7ea fb9a 	bl	23e6838 <__aeabi_dsub>
 23fc104:	4602      	mov	r2, r0
 23fc106:	460b      	mov	r3, r1
 23fc108:	4640      	mov	r0, r8
 23fc10a:	4649      	mov	r1, r9
 23fc10c:	f7ea fb94 	bl	23e6838 <__aeabi_dsub>
 23fc110:	4602      	mov	r2, r0
 23fc112:	460b      	mov	r3, r1
 23fc114:	ec51 0b19 	vmov	r0, r1, d9
 23fc118:	f7ea fb8e 	bl	23e6838 <__aeabi_dsub>
 23fc11c:	ecbd 8b04 	vpop	{d8-d9}
 23fc120:	ec41 0b10 	vmov	d0, r0, r1
 23fc124:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc128:	ed9f 7b15 	vldr	d7, [pc, #84]	; 23fc180 <__kernel_cos+0x258>
 23fc12c:	f04f 0800 	mov.w	r8, #0
 23fc130:	f8df 906c 	ldr.w	r9, [pc, #108]	; 23fc1a0 <__kernel_cos+0x278>
 23fc134:	eeb0 9a47 	vmov.f32	s18, s14
 23fc138:	eef0 9a67 	vmov.f32	s19, s15
 23fc13c:	e7c2      	b.n	23fc0c4 <__kernel_cos+0x19c>
 23fc13e:	ecbd 8b04 	vpop	{d8-d9}
 23fc142:	ed9f 0b11 	vldr	d0, [pc, #68]	; 23fc188 <__kernel_cos+0x260>
 23fc146:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc14a:	bf00      	nop
 23fc14c:	f3af 8000 	nop.w
 23fc150:	be8838d4 	.word	0xbe8838d4
 23fc154:	bda8fae9 	.word	0xbda8fae9
 23fc158:	bdb4b1c4 	.word	0xbdb4b1c4
 23fc15c:	3e21ee9e 	.word	0x3e21ee9e
 23fc160:	809c52ad 	.word	0x809c52ad
 23fc164:	3e927e4f 	.word	0x3e927e4f
 23fc168:	19cb1590 	.word	0x19cb1590
 23fc16c:	3efa01a0 	.word	0x3efa01a0
 23fc170:	16c15177 	.word	0x16c15177
 23fc174:	3f56c16c 	.word	0x3f56c16c
 23fc178:	5555554c 	.word	0x5555554c
 23fc17c:	3fa55555 	.word	0x3fa55555
 23fc180:	00000000 	.word	0x00000000
 23fc184:	3fe70000 	.word	0x3fe70000
 23fc188:	00000000 	.word	0x00000000
 23fc18c:	3ff00000 	.word	0x3ff00000
 23fc190:	3fe00000 	.word	0x3fe00000
 23fc194:	3ff00000 	.word	0x3ff00000
 23fc198:	3fd33332 	.word	0x3fd33332
 23fc19c:	3fe90000 	.word	0x3fe90000
 23fc1a0:	3fd20000 	.word	0x3fd20000
 23fc1a4:	00000000 	.word	0x00000000

023fc1a8 <__kernel_rem_pio2>:
 23fc1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fc1ac:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 23fc1b0:	461c      	mov	r4, r3
 23fc1b2:	f112 0f14 	cmn.w	r2, #20
 23fc1b6:	9308      	str	r3, [sp, #32]
 23fc1b8:	910b      	str	r1, [sp, #44]	; 0x2c
 23fc1ba:	4bb6      	ldr	r3, [pc, #728]	; (23fc494 <__kernel_rem_pio2+0x2ec>)
 23fc1bc:	99a2      	ldr	r1, [sp, #648]	; 0x288
 23fc1be:	9004      	str	r0, [sp, #16]
 23fc1c0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 23fc1c4:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
 23fc1c8:	9105      	str	r1, [sp, #20]
 23fc1ca:	9303      	str	r3, [sp, #12]
 23fc1cc:	f2c0 833a 	blt.w	23fc844 <__kernel_rem_pio2+0x69c>
 23fc1d0:	1ed3      	subs	r3, r2, #3
 23fc1d2:	49b1      	ldr	r1, [pc, #708]	; (23fc498 <__kernel_rem_pio2+0x2f0>)
 23fc1d4:	fb81 0103 	smull	r0, r1, r1, r3
 23fc1d8:	17db      	asrs	r3, r3, #31
 23fc1da:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 23fc1de:	9307      	str	r3, [sp, #28]
 23fc1e0:	3301      	adds	r3, #1
 23fc1e2:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 23fc1e6:	00db      	lsls	r3, r3, #3
 23fc1e8:	18d3      	adds	r3, r2, r3
 23fc1ea:	9a07      	ldr	r2, [sp, #28]
 23fc1ec:	9306      	str	r3, [sp, #24]
 23fc1ee:	9b03      	ldr	r3, [sp, #12]
 23fc1f0:	1ad4      	subs	r4, r2, r3
 23fc1f2:	9a05      	ldr	r2, [sp, #20]
 23fc1f4:	18d6      	adds	r6, r2, r3
 23fc1f6:	d414      	bmi.n	23fc222 <__kernel_rem_pio2+0x7a>
 23fc1f8:	3601      	adds	r6, #1
 23fc1fa:	ad20      	add	r5, sp, #128	; 0x80
 23fc1fc:	f04f 0800 	mov.w	r8, #0
 23fc200:	f04f 0900 	mov.w	r9, #0
 23fc204:	4426      	add	r6, r4
 23fc206:	9fa3      	ldr	r7, [sp, #652]	; 0x28c
 23fc208:	2c00      	cmp	r4, #0
 23fc20a:	4640      	mov	r0, r8
 23fc20c:	4649      	mov	r1, r9
 23fc20e:	db03      	blt.n	23fc218 <__kernel_rem_pio2+0x70>
 23fc210:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 23fc214:	f7ea fc5e 	bl	23e6ad4 <__aeabi_i2d>
 23fc218:	3401      	adds	r4, #1
 23fc21a:	42b4      	cmp	r4, r6
 23fc21c:	e8e5 0102 	strd	r0, r1, [r5], #8
 23fc220:	d1f2      	bne.n	23fc208 <__kernel_rem_pio2+0x60>
 23fc222:	9b05      	ldr	r3, [sp, #20]
 23fc224:	2b00      	cmp	r3, #0
 23fc226:	f2c0 83c7 	blt.w	23fc9b8 <__kernel_rem_pio2+0x810>
 23fc22a:	9b08      	ldr	r3, [sp, #32]
 23fc22c:	a920      	add	r1, sp, #128	; 0x80
 23fc22e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 23fc232:	f8dd 900c 	ldr.w	r9, [sp, #12]
 23fc236:	00da      	lsls	r2, r3, #3
 23fc238:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
 23fc23c:	9202      	str	r2, [sp, #8]
 23fc23e:	9a05      	ldr	r2, [sp, #20]
 23fc240:	441a      	add	r2, r3
 23fc242:	9201      	str	r2, [sp, #4]
 23fc244:	9a04      	ldr	r2, [sp, #16]
 23fc246:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
 23fc24a:	9b03      	ldr	r3, [sp, #12]
 23fc24c:	2b00      	cmp	r3, #0
 23fc24e:	f2c0 81a6 	blt.w	23fc59e <__kernel_rem_pio2+0x3f6>
 23fc252:	4657      	mov	r7, sl
 23fc254:	9e04      	ldr	r6, [sp, #16]
 23fc256:	2400      	movs	r4, #0
 23fc258:	2500      	movs	r5, #0
 23fc25a:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 23fc25e:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 23fc262:	f7ea fca1 	bl	23e6ba8 <__aeabi_dmul>
 23fc266:	4602      	mov	r2, r0
 23fc268:	460b      	mov	r3, r1
 23fc26a:	4620      	mov	r0, r4
 23fc26c:	4629      	mov	r1, r5
 23fc26e:	f7ea fae5 	bl	23e683c <__adddf3>
 23fc272:	4546      	cmp	r6, r8
 23fc274:	4604      	mov	r4, r0
 23fc276:	460d      	mov	r5, r1
 23fc278:	d1ef      	bne.n	23fc25a <__kernel_rem_pio2+0xb2>
 23fc27a:	f109 0901 	add.w	r9, r9, #1
 23fc27e:	9b01      	ldr	r3, [sp, #4]
 23fc280:	f10a 0a08 	add.w	sl, sl, #8
 23fc284:	4599      	cmp	r9, r3
 23fc286:	e8eb 4502 	strd	r4, r5, [fp], #8
 23fc28a:	d1de      	bne.n	23fc24a <__kernel_rem_pio2+0xa2>
 23fc28c:	9a04      	ldr	r2, [sp, #16]
 23fc28e:	a90b      	add	r1, sp, #44	; 0x2c
 23fc290:	9b02      	ldr	r3, [sp, #8]
 23fc292:	4413      	add	r3, r2
 23fc294:	469b      	mov	fp, r3
 23fc296:	9b05      	ldr	r3, [sp, #20]
 23fc298:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 23fc29c:	a90c      	add	r1, sp, #48	; 0x30
 23fc29e:	920a      	str	r2, [sp, #40]	; 0x28
 23fc2a0:	461a      	mov	r2, r3
 23fc2a2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 23fc2a6:	9201      	str	r2, [sp, #4]
 23fc2a8:	3b08      	subs	r3, #8
 23fc2aa:	9309      	str	r3, [sp, #36]	; 0x24
 23fc2ac:	9a01      	ldr	r2, [sp, #4]
 23fc2ae:	a998      	add	r1, sp, #608	; 0x260
 23fc2b0:	2a00      	cmp	r2, #0
 23fc2b2:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 23fc2b6:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 23fc2ba:	dd29      	ble.n	23fc310 <__kernel_rem_pio2+0x168>
 23fc2bc:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 23fc2c0:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 23fc2c4:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
 23fc2c8:	2200      	movs	r2, #0
 23fc2ca:	4b74      	ldr	r3, [pc, #464]	; (23fc49c <__kernel_rem_pio2+0x2f4>)
 23fc2cc:	4620      	mov	r0, r4
 23fc2ce:	4629      	mov	r1, r5
 23fc2d0:	f7ea fc6a 	bl	23e6ba8 <__aeabi_dmul>
 23fc2d4:	f7ea ff18 	bl	23e7108 <__aeabi_d2iz>
 23fc2d8:	f7ea fbfc 	bl	23e6ad4 <__aeabi_i2d>
 23fc2dc:	2200      	movs	r2, #0
 23fc2de:	4b70      	ldr	r3, [pc, #448]	; (23fc4a0 <__kernel_rem_pio2+0x2f8>)
 23fc2e0:	4606      	mov	r6, r0
 23fc2e2:	460f      	mov	r7, r1
 23fc2e4:	f7ea fc60 	bl	23e6ba8 <__aeabi_dmul>
 23fc2e8:	4602      	mov	r2, r0
 23fc2ea:	460b      	mov	r3, r1
 23fc2ec:	4620      	mov	r0, r4
 23fc2ee:	4629      	mov	r1, r5
 23fc2f0:	f7ea faa2 	bl	23e6838 <__aeabi_dsub>
 23fc2f4:	f7ea ff08 	bl	23e7108 <__aeabi_d2iz>
 23fc2f8:	4639      	mov	r1, r7
 23fc2fa:	f849 0b04 	str.w	r0, [r9], #4
 23fc2fe:	4630      	mov	r0, r6
 23fc300:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 23fc304:	f7ea fa9a 	bl	23e683c <__adddf3>
 23fc308:	4604      	mov	r4, r0
 23fc30a:	45d0      	cmp	r8, sl
 23fc30c:	460d      	mov	r5, r1
 23fc30e:	d1db      	bne.n	23fc2c8 <__kernel_rem_pio2+0x120>
 23fc310:	f8dd 9018 	ldr.w	r9, [sp, #24]
 23fc314:	ec45 4b10 	vmov	d0, r4, r5
 23fc318:	4648      	mov	r0, r9
 23fc31a:	f7fe fabd 	bl	23fa898 <scalbn>
 23fc31e:	2200      	movs	r2, #0
 23fc320:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 23fc324:	ee10 0a10 	vmov	r0, s0
 23fc328:	ec55 4b10 	vmov	r4, r5, d0
 23fc32c:	4629      	mov	r1, r5
 23fc32e:	f7ea fc3b 	bl	23e6ba8 <__aeabi_dmul>
 23fc332:	ec41 0b10 	vmov	d0, r0, r1
 23fc336:	f000 fc2f 	bl	23fcb98 <floor>
 23fc33a:	2200      	movs	r2, #0
 23fc33c:	4b59      	ldr	r3, [pc, #356]	; (23fc4a4 <__kernel_rem_pio2+0x2fc>)
 23fc33e:	ec51 0b10 	vmov	r0, r1, d0
 23fc342:	f7ea fc31 	bl	23e6ba8 <__aeabi_dmul>
 23fc346:	4602      	mov	r2, r0
 23fc348:	460b      	mov	r3, r1
 23fc34a:	4620      	mov	r0, r4
 23fc34c:	4629      	mov	r1, r5
 23fc34e:	f7ea fa73 	bl	23e6838 <__aeabi_dsub>
 23fc352:	460d      	mov	r5, r1
 23fc354:	4604      	mov	r4, r0
 23fc356:	f7ea fed7 	bl	23e7108 <__aeabi_d2iz>
 23fc35a:	4680      	mov	r8, r0
 23fc35c:	f7ea fbba 	bl	23e6ad4 <__aeabi_i2d>
 23fc360:	460b      	mov	r3, r1
 23fc362:	4602      	mov	r2, r0
 23fc364:	4629      	mov	r1, r5
 23fc366:	4620      	mov	r0, r4
 23fc368:	f7ea fa66 	bl	23e6838 <__aeabi_dsub>
 23fc36c:	464b      	mov	r3, r9
 23fc36e:	4606      	mov	r6, r0
 23fc370:	460f      	mov	r7, r1
 23fc372:	2b00      	cmp	r3, #0
 23fc374:	f340 8098 	ble.w	23fc4a8 <__kernel_rem_pio2+0x300>
 23fc378:	9a01      	ldr	r2, [sp, #4]
 23fc37a:	a90c      	add	r1, sp, #48	; 0x30
 23fc37c:	f1c9 0318 	rsb	r3, r9, #24
 23fc380:	f1c9 0517 	rsb	r5, r9, #23
 23fc384:	3a01      	subs	r2, #1
 23fc386:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 23fc38a:	fa41 f003 	asr.w	r0, r1, r3
 23fc38e:	fa00 f303 	lsl.w	r3, r0, r3
 23fc392:	4480      	add	r8, r0
 23fc394:	1acb      	subs	r3, r1, r3
 23fc396:	a90c      	add	r1, sp, #48	; 0x30
 23fc398:	fa43 f505 	asr.w	r5, r3, r5
 23fc39c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 23fc3a0:	2d00      	cmp	r5, #0
 23fc3a2:	f300 808b 	bgt.w	23fc4bc <__kernel_rem_pio2+0x314>
 23fc3a6:	2200      	movs	r2, #0
 23fc3a8:	2300      	movs	r3, #0
 23fc3aa:	4630      	mov	r0, r6
 23fc3ac:	4639      	mov	r1, r7
 23fc3ae:	f7ea fe63 	bl	23e7078 <__aeabi_dcmpeq>
 23fc3b2:	2800      	cmp	r0, #0
 23fc3b4:	f000 824d 	beq.w	23fc852 <__kernel_rem_pio2+0x6aa>
 23fc3b8:	9a01      	ldr	r2, [sp, #4]
 23fc3ba:	9b05      	ldr	r3, [sp, #20]
 23fc3bc:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
 23fc3c0:	4553      	cmp	r3, sl
 23fc3c2:	dc10      	bgt.n	23fc3e6 <__kernel_rem_pio2+0x23e>
 23fc3c4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 23fc3c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 23fc3ca:	4413      	add	r3, r2
 23fc3cc:	aa0c      	add	r2, sp, #48	; 0x30
 23fc3ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 23fc3d2:	2200      	movs	r2, #0
 23fc3d4:	f853 1904 	ldr.w	r1, [r3], #-4
 23fc3d8:	4283      	cmp	r3, r0
 23fc3da:	ea42 0201 	orr.w	r2, r2, r1
 23fc3de:	d1f9      	bne.n	23fc3d4 <__kernel_rem_pio2+0x22c>
 23fc3e0:	2a00      	cmp	r2, #0
 23fc3e2:	f040 80df 	bne.w	23fc5a4 <__kernel_rem_pio2+0x3fc>
 23fc3e6:	9b05      	ldr	r3, [sp, #20]
 23fc3e8:	aa0c      	add	r2, sp, #48	; 0x30
 23fc3ea:	3b01      	subs	r3, #1
 23fc3ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 23fc3f0:	2b00      	cmp	r3, #0
 23fc3f2:	f040 80cf 	bne.w	23fc594 <__kernel_rem_pio2+0x3ec>
 23fc3f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23fc3f8:	2301      	movs	r3, #1
 23fc3fa:	f852 1904 	ldr.w	r1, [r2], #-4
 23fc3fe:	3301      	adds	r3, #1
 23fc400:	2900      	cmp	r1, #0
 23fc402:	d0fa      	beq.n	23fc3fa <__kernel_rem_pio2+0x252>
 23fc404:	9a01      	ldr	r2, [sp, #4]
 23fc406:	18d3      	adds	r3, r2, r3
 23fc408:	9302      	str	r3, [sp, #8]
 23fc40a:	1c53      	adds	r3, r2, #1
 23fc40c:	4699      	mov	r9, r3
 23fc40e:	9a01      	ldr	r2, [sp, #4]
 23fc410:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 23fc414:	9908      	ldr	r1, [sp, #32]
 23fc416:	440a      	add	r2, r1
 23fc418:	4690      	mov	r8, r2
 23fc41a:	9a07      	ldr	r2, [sp, #28]
 23fc41c:	441a      	add	r2, r3
 23fc41e:	4492      	add	sl, r2
 23fc420:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 23fc422:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 23fc426:	aa20      	add	r2, sp, #128	; 0x80
 23fc428:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
 23fc42c:	aa70      	add	r2, sp, #448	; 0x1c0
 23fc42e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 23fc432:	9301      	str	r3, [sp, #4]
 23fc434:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 23fc438:	4647      	mov	r7, r8
 23fc43a:	f7ea fb4b 	bl	23e6ad4 <__aeabi_i2d>
 23fc43e:	460b      	mov	r3, r1
 23fc440:	9903      	ldr	r1, [sp, #12]
 23fc442:	4602      	mov	r2, r0
 23fc444:	f108 0808 	add.w	r8, r8, #8
 23fc448:	2900      	cmp	r1, #0
 23fc44a:	e948 2302 	strd	r2, r3, [r8, #-8]
 23fc44e:	db1e      	blt.n	23fc48e <__kernel_rem_pio2+0x2e6>
 23fc450:	9e04      	ldr	r6, [sp, #16]
 23fc452:	2400      	movs	r4, #0
 23fc454:	2500      	movs	r5, #0
 23fc456:	e001      	b.n	23fc45c <__kernel_rem_pio2+0x2b4>
 23fc458:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 23fc45c:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 23fc460:	f7ea fba2 	bl	23e6ba8 <__aeabi_dmul>
 23fc464:	4602      	mov	r2, r0
 23fc466:	460b      	mov	r3, r1
 23fc468:	4620      	mov	r0, r4
 23fc46a:	4629      	mov	r1, r5
 23fc46c:	f7ea f9e6 	bl	23e683c <__adddf3>
 23fc470:	455e      	cmp	r6, fp
 23fc472:	4604      	mov	r4, r0
 23fc474:	460d      	mov	r5, r1
 23fc476:	d1ef      	bne.n	23fc458 <__kernel_rem_pio2+0x2b0>
 23fc478:	9b01      	ldr	r3, [sp, #4]
 23fc47a:	f109 0901 	add.w	r9, r9, #1
 23fc47e:	e8e3 4502 	strd	r4, r5, [r3], #8
 23fc482:	9301      	str	r3, [sp, #4]
 23fc484:	9b02      	ldr	r3, [sp, #8]
 23fc486:	4599      	cmp	r9, r3
 23fc488:	ddd4      	ble.n	23fc434 <__kernel_rem_pio2+0x28c>
 23fc48a:	9301      	str	r3, [sp, #4]
 23fc48c:	e70e      	b.n	23fc2ac <__kernel_rem_pio2+0x104>
 23fc48e:	2400      	movs	r4, #0
 23fc490:	2500      	movs	r5, #0
 23fc492:	e7f1      	b.n	23fc478 <__kernel_rem_pio2+0x2d0>
 23fc494:	023ffe30 	.word	0x023ffe30
 23fc498:	2aaaaaab 	.word	0x2aaaaaab
 23fc49c:	3e700000 	.word	0x3e700000
 23fc4a0:	41700000 	.word	0x41700000
 23fc4a4:	40200000 	.word	0x40200000
 23fc4a8:	d16b      	bne.n	23fc582 <__kernel_rem_pio2+0x3da>
 23fc4aa:	9b01      	ldr	r3, [sp, #4]
 23fc4ac:	aa0c      	add	r2, sp, #48	; 0x30
 23fc4ae:	3b01      	subs	r3, #1
 23fc4b0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 23fc4b4:	15ed      	asrs	r5, r5, #23
 23fc4b6:	2d00      	cmp	r5, #0
 23fc4b8:	f77f af75 	ble.w	23fc3a6 <__kernel_rem_pio2+0x1fe>
 23fc4bc:	9b01      	ldr	r3, [sp, #4]
 23fc4be:	f108 0801 	add.w	r8, r8, #1
 23fc4c2:	2b00      	cmp	r3, #0
 23fc4c4:	f340 81c3 	ble.w	23fc84e <__kernel_rem_pio2+0x6a6>
 23fc4c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 23fc4ca:	2c00      	cmp	r4, #0
 23fc4cc:	d151      	bne.n	23fc572 <__kernel_rem_pio2+0x3ca>
 23fc4ce:	9b01      	ldr	r3, [sp, #4]
 23fc4d0:	2b01      	cmp	r3, #1
 23fc4d2:	d020      	beq.n	23fc516 <__kernel_rem_pio2+0x36e>
 23fc4d4:	ab0c      	add	r3, sp, #48	; 0x30
 23fc4d6:	2201      	movs	r2, #1
 23fc4d8:	f853 4f04 	ldr.w	r4, [r3, #4]!
 23fc4dc:	2c00      	cmp	r4, #0
 23fc4de:	d04b      	beq.n	23fc578 <__kernel_rem_pio2+0x3d0>
 23fc4e0:	1c53      	adds	r3, r2, #1
 23fc4e2:	a90c      	add	r1, sp, #48	; 0x30
 23fc4e4:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
 23fc4e8:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
 23fc4ec:	9901      	ldr	r1, [sp, #4]
 23fc4ee:	4299      	cmp	r1, r3
 23fc4f0:	dd10      	ble.n	23fc514 <__kernel_rem_pio2+0x36c>
 23fc4f2:	a80c      	add	r0, sp, #48	; 0x30
 23fc4f4:	aa0c      	add	r2, sp, #48	; 0x30
 23fc4f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 23fc4fa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 23fc4fe:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 23fc502:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 23fc506:	e000      	b.n	23fc50a <__kernel_rem_pio2+0x362>
 23fc508:	681a      	ldr	r2, [r3, #0]
 23fc50a:	1a8a      	subs	r2, r1, r2
 23fc50c:	f843 2b04 	str.w	r2, [r3], #4
 23fc510:	4283      	cmp	r3, r0
 23fc512:	d1f9      	bne.n	23fc508 <__kernel_rem_pio2+0x360>
 23fc514:	2401      	movs	r4, #1
 23fc516:	9b06      	ldr	r3, [sp, #24]
 23fc518:	2b00      	cmp	r3, #0
 23fc51a:	dd0e      	ble.n	23fc53a <__kernel_rem_pio2+0x392>
 23fc51c:	2b01      	cmp	r3, #1
 23fc51e:	f000 816b 	beq.w	23fc7f8 <__kernel_rem_pio2+0x650>
 23fc522:	2b02      	cmp	r3, #2
 23fc524:	d109      	bne.n	23fc53a <__kernel_rem_pio2+0x392>
 23fc526:	9b01      	ldr	r3, [sp, #4]
 23fc528:	a90c      	add	r1, sp, #48	; 0x30
 23fc52a:	1e5a      	subs	r2, r3, #1
 23fc52c:	ab0c      	add	r3, sp, #48	; 0x30
 23fc52e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23fc532:	f3c3 0315 	ubfx	r3, r3, #0, #22
 23fc536:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 23fc53a:	2d02      	cmp	r5, #2
 23fc53c:	f47f af33 	bne.w	23fc3a6 <__kernel_rem_pio2+0x1fe>
 23fc540:	4632      	mov	r2, r6
 23fc542:	463b      	mov	r3, r7
 23fc544:	2000      	movs	r0, #0
 23fc546:	49b6      	ldr	r1, [pc, #728]	; (23fc820 <__kernel_rem_pio2+0x678>)
 23fc548:	f7ea f976 	bl	23e6838 <__aeabi_dsub>
 23fc54c:	4606      	mov	r6, r0
 23fc54e:	460f      	mov	r7, r1
 23fc550:	2c00      	cmp	r4, #0
 23fc552:	f43f af28 	beq.w	23fc3a6 <__kernel_rem_pio2+0x1fe>
 23fc556:	9806      	ldr	r0, [sp, #24]
 23fc558:	ed9f 0bad 	vldr	d0, [pc, #692]	; 23fc810 <__kernel_rem_pio2+0x668>
 23fc55c:	f7fe f99c 	bl	23fa898 <scalbn>
 23fc560:	4630      	mov	r0, r6
 23fc562:	4639      	mov	r1, r7
 23fc564:	ec53 2b10 	vmov	r2, r3, d0
 23fc568:	f7ea f966 	bl	23e6838 <__aeabi_dsub>
 23fc56c:	4606      	mov	r6, r0
 23fc56e:	460f      	mov	r7, r1
 23fc570:	e719      	b.n	23fc3a6 <__kernel_rem_pio2+0x1fe>
 23fc572:	2301      	movs	r3, #1
 23fc574:	2200      	movs	r2, #0
 23fc576:	e7b4      	b.n	23fc4e2 <__kernel_rem_pio2+0x33a>
 23fc578:	3201      	adds	r2, #1
 23fc57a:	9901      	ldr	r1, [sp, #4]
 23fc57c:	428a      	cmp	r2, r1
 23fc57e:	d1ab      	bne.n	23fc4d8 <__kernel_rem_pio2+0x330>
 23fc580:	e7c9      	b.n	23fc516 <__kernel_rem_pio2+0x36e>
 23fc582:	2200      	movs	r2, #0
 23fc584:	4ba7      	ldr	r3, [pc, #668]	; (23fc824 <__kernel_rem_pio2+0x67c>)
 23fc586:	f7ea fd95 	bl	23e70b4 <__aeabi_dcmpge>
 23fc58a:	2800      	cmp	r0, #0
 23fc58c:	f040 8152 	bne.w	23fc834 <__kernel_rem_pio2+0x68c>
 23fc590:	4605      	mov	r5, r0
 23fc592:	e708      	b.n	23fc3a6 <__kernel_rem_pio2+0x1fe>
 23fc594:	9b01      	ldr	r3, [sp, #4]
 23fc596:	3301      	adds	r3, #1
 23fc598:	4699      	mov	r9, r3
 23fc59a:	9302      	str	r3, [sp, #8]
 23fc59c:	e737      	b.n	23fc40e <__kernel_rem_pio2+0x266>
 23fc59e:	2400      	movs	r4, #0
 23fc5a0:	2500      	movs	r5, #0
 23fc5a2:	e66a      	b.n	23fc27a <__kernel_rem_pio2+0xd2>
 23fc5a4:	9b06      	ldr	r3, [sp, #24]
 23fc5a6:	9503      	str	r5, [sp, #12]
 23fc5a8:	f1a3 0218 	sub.w	r2, r3, #24
 23fc5ac:	ab0c      	add	r3, sp, #48	; 0x30
 23fc5ae:	f8cd 801c 	str.w	r8, [sp, #28]
 23fc5b2:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 23fc5b6:	9206      	str	r2, [sp, #24]
 23fc5b8:	b973      	cbnz	r3, 23fc5d8 <__kernel_rem_pio2+0x430>
 23fc5ba:	4b9b      	ldr	r3, [pc, #620]	; (23fc828 <__kernel_rem_pio2+0x680>)
 23fc5bc:	9901      	ldr	r1, [sp, #4]
 23fc5be:	4419      	add	r1, r3
 23fc5c0:	460b      	mov	r3, r1
 23fc5c2:	a90c      	add	r1, sp, #48	; 0x30
 23fc5c4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 23fc5c8:	f853 1904 	ldr.w	r1, [r3], #-4
 23fc5cc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 23fc5d0:	3a18      	subs	r2, #24
 23fc5d2:	2900      	cmp	r1, #0
 23fc5d4:	d0f8      	beq.n	23fc5c8 <__kernel_rem_pio2+0x420>
 23fc5d6:	9206      	str	r2, [sp, #24]
 23fc5d8:	9806      	ldr	r0, [sp, #24]
 23fc5da:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 23fc810 <__kernel_rem_pio2+0x668>
 23fc5de:	f7fe f95b 	bl	23fa898 <scalbn>
 23fc5e2:	f1ba 0f00 	cmp.w	sl, #0
 23fc5e6:	ec55 4b10 	vmov	r4, r5, d0
 23fc5ea:	f2c0 81db 	blt.w	23fc9a4 <__kernel_rem_pio2+0x7fc>
 23fc5ee:	ab70      	add	r3, sp, #448	; 0x1c0
 23fc5f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 23fc5f4:	f04f 0800 	mov.w	r8, #0
 23fc5f8:	f8df 9230 	ldr.w	r9, [pc, #560]	; 23fc82c <__kernel_rem_pio2+0x684>
 23fc5fc:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
 23fc600:	9204      	str	r2, [sp, #16]
 23fc602:	f10a 0301 	add.w	r3, sl, #1
 23fc606:	aa0c      	add	r2, sp, #48	; 0x30
 23fc608:	f10b 0708 	add.w	r7, fp, #8
 23fc60c:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 23fc610:	9306      	str	r3, [sp, #24]
 23fc612:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 23fc616:	f7ea fa5d 	bl	23e6ad4 <__aeabi_i2d>
 23fc61a:	4622      	mov	r2, r4
 23fc61c:	462b      	mov	r3, r5
 23fc61e:	f7ea fac3 	bl	23e6ba8 <__aeabi_dmul>
 23fc622:	464b      	mov	r3, r9
 23fc624:	4642      	mov	r2, r8
 23fc626:	e967 0102 	strd	r0, r1, [r7, #-8]!
 23fc62a:	4620      	mov	r0, r4
 23fc62c:	4629      	mov	r1, r5
 23fc62e:	f7ea fabb 	bl	23e6ba8 <__aeabi_dmul>
 23fc632:	ab0c      	add	r3, sp, #48	; 0x30
 23fc634:	4604      	mov	r4, r0
 23fc636:	460d      	mov	r5, r1
 23fc638:	429e      	cmp	r6, r3
 23fc63a:	d1ea      	bne.n	23fc612 <__kernel_rem_pio2+0x46a>
 23fc63c:	ab48      	add	r3, sp, #288	; 0x120
 23fc63e:	f04f 0900 	mov.w	r9, #0
 23fc642:	e9cd 3a01 	strd	r3, sl, [sp, #4]
 23fc646:	f8dd a014 	ldr.w	sl, [sp, #20]
 23fc64a:	f1ba 0f00 	cmp.w	sl, #0
 23fc64e:	db2c      	blt.n	23fc6aa <__kernel_rem_pio2+0x502>
 23fc650:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 23fc830 <__kernel_rem_pio2+0x688>
 23fc654:	465f      	mov	r7, fp
 23fc656:	2600      	movs	r6, #0
 23fc658:	2400      	movs	r4, #0
 23fc65a:	2500      	movs	r5, #0
 23fc65c:	a36e      	add	r3, pc, #440	; (adr r3, 23fc818 <__kernel_rem_pio2+0x670>)
 23fc65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc662:	e003      	b.n	23fc66c <__kernel_rem_pio2+0x4c4>
 23fc664:	45b1      	cmp	r9, r6
 23fc666:	db10      	blt.n	23fc68a <__kernel_rem_pio2+0x4e2>
 23fc668:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 23fc66c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 23fc670:	3601      	adds	r6, #1
 23fc672:	f7ea fa99 	bl	23e6ba8 <__aeabi_dmul>
 23fc676:	4602      	mov	r2, r0
 23fc678:	460b      	mov	r3, r1
 23fc67a:	4620      	mov	r0, r4
 23fc67c:	4629      	mov	r1, r5
 23fc67e:	f7ea f8dd 	bl	23e683c <__adddf3>
 23fc682:	45b2      	cmp	sl, r6
 23fc684:	4604      	mov	r4, r0
 23fc686:	460d      	mov	r5, r1
 23fc688:	daec      	bge.n	23fc664 <__kernel_rem_pio2+0x4bc>
 23fc68a:	9b01      	ldr	r3, [sp, #4]
 23fc68c:	f1ab 0b08 	sub.w	fp, fp, #8
 23fc690:	9a02      	ldr	r2, [sp, #8]
 23fc692:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 23fc696:	454a      	cmp	r2, r9
 23fc698:	e9c3 4500 	strd	r4, r5, [r3]
 23fc69c:	f109 0301 	add.w	r3, r9, #1
 23fc6a0:	d006      	beq.n	23fc6b0 <__kernel_rem_pio2+0x508>
 23fc6a2:	f1ba 0f00 	cmp.w	sl, #0
 23fc6a6:	4699      	mov	r9, r3
 23fc6a8:	dad2      	bge.n	23fc650 <__kernel_rem_pio2+0x4a8>
 23fc6aa:	2400      	movs	r4, #0
 23fc6ac:	2500      	movs	r5, #0
 23fc6ae:	e7ec      	b.n	23fc68a <__kernel_rem_pio2+0x4e2>
 23fc6b0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23fc6b2:	f8dd a008 	ldr.w	sl, [sp, #8]
 23fc6b6:	2b02      	cmp	r3, #2
 23fc6b8:	dc1e      	bgt.n	23fc6f8 <__kernel_rem_pio2+0x550>
 23fc6ba:	2b00      	cmp	r3, #0
 23fc6bc:	f300 80ff 	bgt.w	23fc8be <__kernel_rem_pio2+0x716>
 23fc6c0:	d113      	bne.n	23fc6ea <__kernel_rem_pio2+0x542>
 23fc6c2:	9c04      	ldr	r4, [sp, #16]
 23fc6c4:	2000      	movs	r0, #0
 23fc6c6:	9d01      	ldr	r5, [sp, #4]
 23fc6c8:	2100      	movs	r1, #0
 23fc6ca:	3408      	adds	r4, #8
 23fc6cc:	442c      	add	r4, r5
 23fc6ce:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 23fc6d2:	f7ea f8b3 	bl	23e683c <__adddf3>
 23fc6d6:	42a5      	cmp	r5, r4
 23fc6d8:	d1f9      	bne.n	23fc6ce <__kernel_rem_pio2+0x526>
 23fc6da:	9b03      	ldr	r3, [sp, #12]
 23fc6dc:	b113      	cbz	r3, 23fc6e4 <__kernel_rem_pio2+0x53c>
 23fc6de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fc6e2:	4619      	mov	r1, r3
 23fc6e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fc6e6:	e9c3 0100 	strd	r0, r1, [r3]
 23fc6ea:	9b07      	ldr	r3, [sp, #28]
 23fc6ec:	f003 0007 	and.w	r0, r3, #7
 23fc6f0:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23fc6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc6f8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23fc6fa:	2b03      	cmp	r3, #3
 23fc6fc:	d1f5      	bne.n	23fc6ea <__kernel_rem_pio2+0x542>
 23fc6fe:	f1ba 0f00 	cmp.w	sl, #0
 23fc702:	f000 816b 	beq.w	23fc9dc <__kernel_rem_pio2+0x834>
 23fc706:	9a01      	ldr	r2, [sp, #4]
 23fc708:	9b04      	ldr	r3, [sp, #16]
 23fc70a:	eb02 0bca 	add.w	fp, r2, sl, lsl #3
 23fc70e:	18d3      	adds	r3, r2, r3
 23fc710:	e9d3 4500 	ldrd	r4, r5, [r3]
 23fc714:	e97b 6702 	ldrd	r6, r7, [fp, #-8]!
 23fc718:	4620      	mov	r0, r4
 23fc71a:	4629      	mov	r1, r5
 23fc71c:	4632      	mov	r2, r6
 23fc71e:	463b      	mov	r3, r7
 23fc720:	f7ea f88c 	bl	23e683c <__adddf3>
 23fc724:	46a0      	mov	r8, r4
 23fc726:	46a9      	mov	r9, r5
 23fc728:	4604      	mov	r4, r0
 23fc72a:	460d      	mov	r5, r1
 23fc72c:	4630      	mov	r0, r6
 23fc72e:	4622      	mov	r2, r4
 23fc730:	4639      	mov	r1, r7
 23fc732:	462b      	mov	r3, r5
 23fc734:	f7ea f880 	bl	23e6838 <__aeabi_dsub>
 23fc738:	464b      	mov	r3, r9
 23fc73a:	4642      	mov	r2, r8
 23fc73c:	f7ea f87e 	bl	23e683c <__adddf3>
 23fc740:	9b01      	ldr	r3, [sp, #4]
 23fc742:	455b      	cmp	r3, fp
 23fc744:	e9cb 0102 	strd	r0, r1, [fp, #8]
 23fc748:	e9cb 4500 	strd	r4, r5, [fp]
 23fc74c:	d1e2      	bne.n	23fc714 <__kernel_rem_pio2+0x56c>
 23fc74e:	f1ba 0f01 	cmp.w	sl, #1
 23fc752:	f340 8143 	ble.w	23fc9dc <__kernel_rem_pio2+0x834>
 23fc756:	9b04      	ldr	r3, [sp, #16]
 23fc758:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 23fc75c:	9901      	ldr	r1, [sp, #4]
 23fc75e:	461a      	mov	r2, r3
 23fc760:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 23fc764:	4453      	add	r3, sl
 23fc766:	440a      	add	r2, r1
 23fc768:	00db      	lsls	r3, r3, #3
 23fc76a:	f103 0a08 	add.w	sl, r3, #8
 23fc76e:	9302      	str	r3, [sp, #8]
 23fc770:	e9d2 4500 	ldrd	r4, r5, [r2]
 23fc774:	448a      	add	sl, r1
 23fc776:	4620      	mov	r0, r4
 23fc778:	4629      	mov	r1, r5
 23fc77a:	46a0      	mov	r8, r4
 23fc77c:	46a9      	mov	r9, r5
 23fc77e:	e97a 6702 	ldrd	r6, r7, [sl, #-8]!
 23fc782:	4632      	mov	r2, r6
 23fc784:	463b      	mov	r3, r7
 23fc786:	f7ea f859 	bl	23e683c <__adddf3>
 23fc78a:	4604      	mov	r4, r0
 23fc78c:	460d      	mov	r5, r1
 23fc78e:	4630      	mov	r0, r6
 23fc790:	4622      	mov	r2, r4
 23fc792:	4639      	mov	r1, r7
 23fc794:	462b      	mov	r3, r5
 23fc796:	f7ea f84f 	bl	23e6838 <__aeabi_dsub>
 23fc79a:	4642      	mov	r2, r8
 23fc79c:	464b      	mov	r3, r9
 23fc79e:	f7ea f84d 	bl	23e683c <__adddf3>
 23fc7a2:	45d3      	cmp	fp, sl
 23fc7a4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 23fc7a8:	e9ca 4500 	strd	r4, r5, [sl]
 23fc7ac:	d1e3      	bne.n	23fc776 <__kernel_rem_pio2+0x5ce>
 23fc7ae:	9c02      	ldr	r4, [sp, #8]
 23fc7b0:	2000      	movs	r0, #0
 23fc7b2:	9b01      	ldr	r3, [sp, #4]
 23fc7b4:	2100      	movs	r1, #0
 23fc7b6:	3410      	adds	r4, #16
 23fc7b8:	f103 0510 	add.w	r5, r3, #16
 23fc7bc:	441c      	add	r4, r3
 23fc7be:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 23fc7c2:	f7ea f83b 	bl	23e683c <__adddf3>
 23fc7c6:	42a5      	cmp	r5, r4
 23fc7c8:	d1f9      	bne.n	23fc7be <__kernel_rem_pio2+0x616>
 23fc7ca:	9b03      	ldr	r3, [sp, #12]
 23fc7cc:	2b00      	cmp	r3, #0
 23fc7ce:	f040 80b4 	bne.w	23fc93a <__kernel_rem_pio2+0x792>
 23fc7d2:	9d01      	ldr	r5, [sp, #4]
 23fc7d4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 23fc7d6:	e9d5 2300 	ldrd	r2, r3, [r5]
 23fc7da:	e9c4 0104 	strd	r0, r1, [r4, #16]
 23fc7de:	e9c4 2300 	strd	r2, r3, [r4]
 23fc7e2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 23fc7e6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 23fc7ea:	9b07      	ldr	r3, [sp, #28]
 23fc7ec:	f003 0007 	and.w	r0, r3, #7
 23fc7f0:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23fc7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc7f8:	9b01      	ldr	r3, [sp, #4]
 23fc7fa:	a90c      	add	r1, sp, #48	; 0x30
 23fc7fc:	1e5a      	subs	r2, r3, #1
 23fc7fe:	ab0c      	add	r3, sp, #48	; 0x30
 23fc800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23fc804:	f3c3 0316 	ubfx	r3, r3, #0, #23
 23fc808:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 23fc80c:	e695      	b.n	23fc53a <__kernel_rem_pio2+0x392>
 23fc80e:	bf00      	nop
 23fc810:	00000000 	.word	0x00000000
 23fc814:	3ff00000 	.word	0x3ff00000
 23fc818:	40000000 	.word	0x40000000
 23fc81c:	3ff921fb 	.word	0x3ff921fb
 23fc820:	3ff00000 	.word	0x3ff00000
 23fc824:	3fe00000 	.word	0x3fe00000
 23fc828:	3ffffffe 	.word	0x3ffffffe
 23fc82c:	3e700000 	.word	0x3e700000
 23fc830:	023ffdf8 	.word	0x023ffdf8
 23fc834:	9b01      	ldr	r3, [sp, #4]
 23fc836:	f108 0801 	add.w	r8, r8, #1
 23fc83a:	2b00      	cmp	r3, #0
 23fc83c:	f340 80a8 	ble.w	23fc990 <__kernel_rem_pio2+0x7e8>
 23fc840:	2502      	movs	r5, #2
 23fc842:	e641      	b.n	23fc4c8 <__kernel_rem_pio2+0x320>
 23fc844:	2100      	movs	r1, #0
 23fc846:	f06f 0317 	mvn.w	r3, #23
 23fc84a:	9107      	str	r1, [sp, #28]
 23fc84c:	e4cc      	b.n	23fc1e8 <__kernel_rem_pio2+0x40>
 23fc84e:	2400      	movs	r4, #0
 23fc850:	e661      	b.n	23fc516 <__kernel_rem_pio2+0x36e>
 23fc852:	ec47 6b10 	vmov	d0, r6, r7
 23fc856:	9e06      	ldr	r6, [sp, #24]
 23fc858:	9503      	str	r5, [sp, #12]
 23fc85a:	4270      	negs	r0, r6
 23fc85c:	f8cd 801c 	str.w	r8, [sp, #28]
 23fc860:	f7fe f81a 	bl	23fa898 <scalbn>
 23fc864:	2200      	movs	r2, #0
 23fc866:	4b5f      	ldr	r3, [pc, #380]	; (23fc9e4 <__kernel_rem_pio2+0x83c>)
 23fc868:	ee10 0a10 	vmov	r0, s0
 23fc86c:	ec55 4b10 	vmov	r4, r5, d0
 23fc870:	4629      	mov	r1, r5
 23fc872:	f7ea fc1f 	bl	23e70b4 <__aeabi_dcmpge>
 23fc876:	2800      	cmp	r0, #0
 23fc878:	d055      	beq.n	23fc926 <__kernel_rem_pio2+0x77e>
 23fc87a:	3618      	adds	r6, #24
 23fc87c:	2200      	movs	r2, #0
 23fc87e:	4b5a      	ldr	r3, [pc, #360]	; (23fc9e8 <__kernel_rem_pio2+0x840>)
 23fc880:	4620      	mov	r0, r4
 23fc882:	4629      	mov	r1, r5
 23fc884:	9606      	str	r6, [sp, #24]
 23fc886:	f7ea f98f 	bl	23e6ba8 <__aeabi_dmul>
 23fc88a:	9f01      	ldr	r7, [sp, #4]
 23fc88c:	f7ea fc3c 	bl	23e7108 <__aeabi_d2iz>
 23fc890:	4606      	mov	r6, r0
 23fc892:	f7ea f91f 	bl	23e6ad4 <__aeabi_i2d>
 23fc896:	2200      	movs	r2, #0
 23fc898:	4b52      	ldr	r3, [pc, #328]	; (23fc9e4 <__kernel_rem_pio2+0x83c>)
 23fc89a:	f107 0a01 	add.w	sl, r7, #1
 23fc89e:	f7ea f983 	bl	23e6ba8 <__aeabi_dmul>
 23fc8a2:	460b      	mov	r3, r1
 23fc8a4:	4602      	mov	r2, r0
 23fc8a6:	4629      	mov	r1, r5
 23fc8a8:	4620      	mov	r0, r4
 23fc8aa:	f7e9 ffc5 	bl	23e6838 <__aeabi_dsub>
 23fc8ae:	f7ea fc2b 	bl	23e7108 <__aeabi_d2iz>
 23fc8b2:	ab0c      	add	r3, sp, #48	; 0x30
 23fc8b4:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 23fc8b8:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 23fc8bc:	e68c      	b.n	23fc5d8 <__kernel_rem_pio2+0x430>
 23fc8be:	9d01      	ldr	r5, [sp, #4]
 23fc8c0:	2000      	movs	r0, #0
 23fc8c2:	9a06      	ldr	r2, [sp, #24]
 23fc8c4:	2100      	movs	r1, #0
 23fc8c6:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
 23fc8ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 23fc8ce:	f7e9 ffb5 	bl	23e683c <__adddf3>
 23fc8d2:	42a5      	cmp	r5, r4
 23fc8d4:	d1f9      	bne.n	23fc8ca <__kernel_rem_pio2+0x722>
 23fc8d6:	9b03      	ldr	r3, [sp, #12]
 23fc8d8:	2b00      	cmp	r3, #0
 23fc8da:	d149      	bne.n	23fc970 <__kernel_rem_pio2+0x7c8>
 23fc8dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fc8de:	4602      	mov	r2, r0
 23fc8e0:	e9c3 0100 	strd	r0, r1, [r3]
 23fc8e4:	460b      	mov	r3, r1
 23fc8e6:	9901      	ldr	r1, [sp, #4]
 23fc8e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fc8ec:	f7e9 ffa4 	bl	23e6838 <__aeabi_dsub>
 23fc8f0:	f1ba 0f00 	cmp.w	sl, #0
 23fc8f4:	dd0d      	ble.n	23fc912 <__kernel_rem_pio2+0x76a>
 23fc8f6:	ad4a      	add	r5, sp, #296	; 0x128
 23fc8f8:	2401      	movs	r4, #1
 23fc8fa:	3401      	adds	r4, #1
 23fc8fc:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 23fc900:	f7e9 ff9c 	bl	23e683c <__adddf3>
 23fc904:	45a2      	cmp	sl, r4
 23fc906:	daf8      	bge.n	23fc8fa <__kernel_rem_pio2+0x752>
 23fc908:	9b03      	ldr	r3, [sp, #12]
 23fc90a:	b113      	cbz	r3, 23fc912 <__kernel_rem_pio2+0x76a>
 23fc90c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fc910:	4619      	mov	r1, r3
 23fc912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fc914:	e9c3 0102 	strd	r0, r1, [r3, #8]
 23fc918:	9b07      	ldr	r3, [sp, #28]
 23fc91a:	f003 0007 	and.w	r0, r3, #7
 23fc91e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23fc922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc926:	4620      	mov	r0, r4
 23fc928:	4629      	mov	r1, r5
 23fc92a:	f7ea fbed 	bl	23e7108 <__aeabi_d2iz>
 23fc92e:	9b01      	ldr	r3, [sp, #4]
 23fc930:	aa0c      	add	r2, sp, #48	; 0x30
 23fc932:	469a      	mov	sl, r3
 23fc934:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 23fc938:	e64e      	b.n	23fc5d8 <__kernel_rem_pio2+0x430>
 23fc93a:	9b01      	ldr	r3, [sp, #4]
 23fc93c:	4602      	mov	r2, r0
 23fc93e:	461e      	mov	r6, r3
 23fc940:	685c      	ldr	r4, [r3, #4]
 23fc942:	68dd      	ldr	r5, [r3, #12]
 23fc944:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fc948:	990b      	ldr	r1, [sp, #44]	; 0x2c
 23fc94a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 23fc94e:	6832      	ldr	r2, [r6, #0]
 23fc950:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 23fc954:	e9c1 2300 	strd	r2, r3, [r1]
 23fc958:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 23fc95c:	68b2      	ldr	r2, [r6, #8]
 23fc95e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 23fc962:	9b07      	ldr	r3, [sp, #28]
 23fc964:	f003 0007 	and.w	r0, r3, #7
 23fc968:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23fc96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc970:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fc972:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fc976:	6053      	str	r3, [r2, #4]
 23fc978:	460b      	mov	r3, r1
 23fc97a:	9901      	ldr	r1, [sp, #4]
 23fc97c:	6010      	str	r0, [r2, #0]
 23fc97e:	4602      	mov	r2, r0
 23fc980:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fc984:	f7e9 ff58 	bl	23e6838 <__aeabi_dsub>
 23fc988:	f1ba 0f00 	cmp.w	sl, #0
 23fc98c:	dcb3      	bgt.n	23fc8f6 <__kernel_rem_pio2+0x74e>
 23fc98e:	e7bd      	b.n	23fc90c <__kernel_rem_pio2+0x764>
 23fc990:	4632      	mov	r2, r6
 23fc992:	463b      	mov	r3, r7
 23fc994:	2000      	movs	r0, #0
 23fc996:	4915      	ldr	r1, [pc, #84]	; (23fc9ec <__kernel_rem_pio2+0x844>)
 23fc998:	f7e9 ff4e 	bl	23e6838 <__aeabi_dsub>
 23fc99c:	2502      	movs	r5, #2
 23fc99e:	4606      	mov	r6, r0
 23fc9a0:	460f      	mov	r7, r1
 23fc9a2:	e500      	b.n	23fc3a6 <__kernel_rem_pio2+0x1fe>
 23fc9a4:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23fc9a6:	2b02      	cmp	r3, #2
 23fc9a8:	dc0a      	bgt.n	23fc9c0 <__kernel_rem_pio2+0x818>
 23fc9aa:	2b00      	cmp	r3, #0
 23fc9ac:	dc11      	bgt.n	23fc9d2 <__kernel_rem_pio2+0x82a>
 23fc9ae:	f47f ae9c 	bne.w	23fc6ea <__kernel_rem_pio2+0x542>
 23fc9b2:	2000      	movs	r0, #0
 23fc9b4:	2100      	movs	r1, #0
 23fc9b6:	e690      	b.n	23fc6da <__kernel_rem_pio2+0x532>
 23fc9b8:	9b08      	ldr	r3, [sp, #32]
 23fc9ba:	00db      	lsls	r3, r3, #3
 23fc9bc:	9302      	str	r3, [sp, #8]
 23fc9be:	e465      	b.n	23fc28c <__kernel_rem_pio2+0xe4>
 23fc9c0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23fc9c2:	2b03      	cmp	r3, #3
 23fc9c4:	f47f ae91 	bne.w	23fc6ea <__kernel_rem_pio2+0x542>
 23fc9c8:	ab48      	add	r3, sp, #288	; 0x120
 23fc9ca:	2000      	movs	r0, #0
 23fc9cc:	2100      	movs	r1, #0
 23fc9ce:	9301      	str	r3, [sp, #4]
 23fc9d0:	e6fb      	b.n	23fc7ca <__kernel_rem_pio2+0x622>
 23fc9d2:	ab48      	add	r3, sp, #288	; 0x120
 23fc9d4:	2000      	movs	r0, #0
 23fc9d6:	2100      	movs	r1, #0
 23fc9d8:	9301      	str	r3, [sp, #4]
 23fc9da:	e77c      	b.n	23fc8d6 <__kernel_rem_pio2+0x72e>
 23fc9dc:	2000      	movs	r0, #0
 23fc9de:	2100      	movs	r1, #0
 23fc9e0:	e6f3      	b.n	23fc7ca <__kernel_rem_pio2+0x622>
 23fc9e2:	bf00      	nop
 23fc9e4:	41700000 	.word	0x41700000
 23fc9e8:	3e700000 	.word	0x3e700000
 23fc9ec:	3ff00000 	.word	0x3ff00000

023fc9f0 <__kernel_sin>:
 23fc9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fc9f4:	ec5b ab10 	vmov	sl, fp, d0
 23fc9f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 23fc9fc:	4680      	mov	r8, r0
 23fc9fe:	ed2d 8b02 	vpush	{d8}
 23fca02:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 23fca06:	b083      	sub	sp, #12
 23fca08:	ed8d 1b00 	vstr	d1, [sp]
 23fca0c:	da07      	bge.n	23fca1e <__kernel_sin+0x2e>
 23fca0e:	ee10 0a10 	vmov	r0, s0
 23fca12:	4659      	mov	r1, fp
 23fca14:	f7ea fb78 	bl	23e7108 <__aeabi_d2iz>
 23fca18:	2800      	cmp	r0, #0
 23fca1a:	f000 808e 	beq.w	23fcb3a <__kernel_sin+0x14a>
 23fca1e:	4652      	mov	r2, sl
 23fca20:	465b      	mov	r3, fp
 23fca22:	4650      	mov	r0, sl
 23fca24:	4659      	mov	r1, fp
 23fca26:	f7ea f8bf 	bl	23e6ba8 <__aeabi_dmul>
 23fca2a:	4604      	mov	r4, r0
 23fca2c:	460d      	mov	r5, r1
 23fca2e:	4650      	mov	r0, sl
 23fca30:	4622      	mov	r2, r4
 23fca32:	4659      	mov	r1, fp
 23fca34:	462b      	mov	r3, r5
 23fca36:	f7ea f8b7 	bl	23e6ba8 <__aeabi_dmul>
 23fca3a:	4606      	mov	r6, r0
 23fca3c:	460f      	mov	r7, r1
 23fca3e:	4620      	mov	r0, r4
 23fca40:	4629      	mov	r1, r5
 23fca42:	a344      	add	r3, pc, #272	; (adr r3, 23fcb54 <__kernel_sin+0x164>)
 23fca44:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fca48:	f7ea f8ae 	bl	23e6ba8 <__aeabi_dmul>
 23fca4c:	a343      	add	r3, pc, #268	; (adr r3, 23fcb5c <__kernel_sin+0x16c>)
 23fca4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fca52:	f7e9 fef1 	bl	23e6838 <__aeabi_dsub>
 23fca56:	4622      	mov	r2, r4
 23fca58:	462b      	mov	r3, r5
 23fca5a:	f7ea f8a5 	bl	23e6ba8 <__aeabi_dmul>
 23fca5e:	a341      	add	r3, pc, #260	; (adr r3, 23fcb64 <__kernel_sin+0x174>)
 23fca60:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fca64:	f7e9 feea 	bl	23e683c <__adddf3>
 23fca68:	4622      	mov	r2, r4
 23fca6a:	462b      	mov	r3, r5
 23fca6c:	f7ea f89c 	bl	23e6ba8 <__aeabi_dmul>
 23fca70:	a33e      	add	r3, pc, #248	; (adr r3, 23fcb6c <__kernel_sin+0x17c>)
 23fca72:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fca76:	f7e9 fedf 	bl	23e6838 <__aeabi_dsub>
 23fca7a:	4622      	mov	r2, r4
 23fca7c:	462b      	mov	r3, r5
 23fca7e:	f7ea f893 	bl	23e6ba8 <__aeabi_dmul>
 23fca82:	a33c      	add	r3, pc, #240	; (adr r3, 23fcb74 <__kernel_sin+0x184>)
 23fca84:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fca88:	f7e9 fed8 	bl	23e683c <__adddf3>
 23fca8c:	ec41 0b18 	vmov	d8, r0, r1
 23fca90:	f1b8 0f00 	cmp.w	r8, #0
 23fca94:	d037      	beq.n	23fcb06 <__kernel_sin+0x116>
 23fca96:	2200      	movs	r2, #0
 23fca98:	4b2d      	ldr	r3, [pc, #180]	; (23fcb50 <__kernel_sin+0x160>)
 23fca9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 23fca9e:	f7ea f883 	bl	23e6ba8 <__aeabi_dmul>
 23fcaa2:	4680      	mov	r8, r0
 23fcaa4:	4689      	mov	r9, r1
 23fcaa6:	4630      	mov	r0, r6
 23fcaa8:	4639      	mov	r1, r7
 23fcaaa:	ec53 2b18 	vmov	r2, r3, d8
 23fcaae:	f7ea f87b 	bl	23e6ba8 <__aeabi_dmul>
 23fcab2:	4602      	mov	r2, r0
 23fcab4:	460b      	mov	r3, r1
 23fcab6:	4640      	mov	r0, r8
 23fcab8:	4649      	mov	r1, r9
 23fcaba:	f7e9 febd 	bl	23e6838 <__aeabi_dsub>
 23fcabe:	4622      	mov	r2, r4
 23fcac0:	462b      	mov	r3, r5
 23fcac2:	f7ea f871 	bl	23e6ba8 <__aeabi_dmul>
 23fcac6:	e9dd 2300 	ldrd	r2, r3, [sp]
 23fcaca:	f7e9 feb5 	bl	23e6838 <__aeabi_dsub>
 23fcace:	4604      	mov	r4, r0
 23fcad0:	460d      	mov	r5, r1
 23fcad2:	4630      	mov	r0, r6
 23fcad4:	4639      	mov	r1, r7
 23fcad6:	a31c      	add	r3, pc, #112	; (adr r3, 23fcb48 <__kernel_sin+0x158>)
 23fcad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fcadc:	f7ea f864 	bl	23e6ba8 <__aeabi_dmul>
 23fcae0:	4602      	mov	r2, r0
 23fcae2:	460b      	mov	r3, r1
 23fcae4:	4620      	mov	r0, r4
 23fcae6:	4629      	mov	r1, r5
 23fcae8:	f7e9 fea8 	bl	23e683c <__adddf3>
 23fcaec:	4602      	mov	r2, r0
 23fcaee:	460b      	mov	r3, r1
 23fcaf0:	4650      	mov	r0, sl
 23fcaf2:	4659      	mov	r1, fp
 23fcaf4:	f7e9 fea0 	bl	23e6838 <__aeabi_dsub>
 23fcaf8:	ec41 0b10 	vmov	d0, r0, r1
 23fcafc:	b003      	add	sp, #12
 23fcafe:	ecbd 8b02 	vpop	{d8}
 23fcb02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fcb06:	4602      	mov	r2, r0
 23fcb08:	460b      	mov	r3, r1
 23fcb0a:	4620      	mov	r0, r4
 23fcb0c:	4629      	mov	r1, r5
 23fcb0e:	f7ea f84b 	bl	23e6ba8 <__aeabi_dmul>
 23fcb12:	a30d      	add	r3, pc, #52	; (adr r3, 23fcb48 <__kernel_sin+0x158>)
 23fcb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fcb18:	f7e9 fe8e 	bl	23e6838 <__aeabi_dsub>
 23fcb1c:	4632      	mov	r2, r6
 23fcb1e:	463b      	mov	r3, r7
 23fcb20:	f7ea f842 	bl	23e6ba8 <__aeabi_dmul>
 23fcb24:	4652      	mov	r2, sl
 23fcb26:	465b      	mov	r3, fp
 23fcb28:	f7e9 fe88 	bl	23e683c <__adddf3>
 23fcb2c:	ec41 0b10 	vmov	d0, r0, r1
 23fcb30:	b003      	add	sp, #12
 23fcb32:	ecbd 8b02 	vpop	{d8}
 23fcb36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fcb3a:	ec4b ab10 	vmov	d0, sl, fp
 23fcb3e:	b003      	add	sp, #12
 23fcb40:	ecbd 8b02 	vpop	{d8}
 23fcb44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fcb48:	55555549 	.word	0x55555549
 23fcb4c:	3fc55555 	.word	0x3fc55555
 23fcb50:	3fe00000 	.word	0x3fe00000
 23fcb54:	5acfd57c 	.word	0x5acfd57c
 23fcb58:	3de5d93a 	.word	0x3de5d93a
 23fcb5c:	8a2b9ceb 	.word	0x8a2b9ceb
 23fcb60:	3e5ae5e6 	.word	0x3e5ae5e6
 23fcb64:	57b1fe7d 	.word	0x57b1fe7d
 23fcb68:	3ec71de3 	.word	0x3ec71de3
 23fcb6c:	19c161d5 	.word	0x19c161d5
 23fcb70:	3f2a01a0 	.word	0x3f2a01a0
 23fcb74:	1110f8a6 	.word	0x1110f8a6
 23fcb78:	3f811111 	.word	0x3f811111

023fcb7c <finite>:
 23fcb7c:	b082      	sub	sp, #8
 23fcb7e:	4805      	ldr	r0, [pc, #20]	; (23fcb94 <finite+0x18>)
 23fcb80:	ed8d 0b00 	vstr	d0, [sp]
 23fcb84:	9b01      	ldr	r3, [sp, #4]
 23fcb86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 23fcb8a:	4418      	add	r0, r3
 23fcb8c:	0fc0      	lsrs	r0, r0, #31
 23fcb8e:	b002      	add	sp, #8
 23fcb90:	4770      	bx	lr
 23fcb92:	bf00      	nop
 23fcb94:	80100000 	.word	0x80100000

023fcb98 <floor>:
 23fcb98:	ec51 0b10 	vmov	r0, r1, d0
 23fcb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fcb9e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 23fcba2:	460c      	mov	r4, r1
 23fcba4:	ee10 6a10 	vmov	r6, s0
 23fcba8:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
 23fcbac:	2d13      	cmp	r5, #19
 23fcbae:	dc30      	bgt.n	23fcc12 <floor+0x7a>
 23fcbb0:	2d00      	cmp	r5, #0
 23fcbb2:	db1e      	blt.n	23fcbf2 <floor+0x5a>
 23fcbb4:	4f38      	ldr	r7, [pc, #224]	; (23fcc98 <floor+0x100>)
 23fcbb6:	412f      	asrs	r7, r5
 23fcbb8:	ea01 0307 	and.w	r3, r1, r7
 23fcbbc:	4303      	orrs	r3, r0
 23fcbbe:	d02d      	beq.n	23fcc1c <floor+0x84>
 23fcbc0:	a333      	add	r3, pc, #204	; (adr r3, 23fcc90 <floor+0xf8>)
 23fcbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fcbc6:	f7e9 fe39 	bl	23e683c <__adddf3>
 23fcbca:	2200      	movs	r2, #0
 23fcbcc:	2300      	movs	r3, #0
 23fcbce:	f7ea fa7b 	bl	23e70c8 <__aeabi_dcmpgt>
 23fcbd2:	b148      	cbz	r0, 23fcbe8 <floor+0x50>
 23fcbd4:	2c00      	cmp	r4, #0
 23fcbd6:	da04      	bge.n	23fcbe2 <floor+0x4a>
 23fcbd8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 23fcbdc:	fa43 f505 	asr.w	r5, r3, r5
 23fcbe0:	442c      	add	r4, r5
 23fcbe2:	ea24 0407 	bic.w	r4, r4, r7
 23fcbe6:	2600      	movs	r6, #0
 23fcbe8:	4623      	mov	r3, r4
 23fcbea:	4632      	mov	r2, r6
 23fcbec:	ec43 2b10 	vmov	d0, r2, r3
 23fcbf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fcbf2:	a327      	add	r3, pc, #156	; (adr r3, 23fcc90 <floor+0xf8>)
 23fcbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fcbf8:	f7e9 fe20 	bl	23e683c <__adddf3>
 23fcbfc:	2200      	movs	r2, #0
 23fcbfe:	2300      	movs	r3, #0
 23fcc00:	f7ea fa62 	bl	23e70c8 <__aeabi_dcmpgt>
 23fcc04:	2800      	cmp	r0, #0
 23fcc06:	d0ef      	beq.n	23fcbe8 <floor+0x50>
 23fcc08:	2c00      	cmp	r4, #0
 23fcc0a:	db29      	blt.n	23fcc60 <floor+0xc8>
 23fcc0c:	2600      	movs	r6, #0
 23fcc0e:	4634      	mov	r4, r6
 23fcc10:	e7ea      	b.n	23fcbe8 <floor+0x50>
 23fcc12:	2d33      	cmp	r5, #51	; 0x33
 23fcc14:	dd05      	ble.n	23fcc22 <floor+0x8a>
 23fcc16:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 23fcc1a:	d019      	beq.n	23fcc50 <floor+0xb8>
 23fcc1c:	ec41 0b10 	vmov	d0, r0, r1
 23fcc20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fcc22:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 23fcc26:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 23fcc2a:	40df      	lsrs	r7, r3
 23fcc2c:	4207      	tst	r7, r0
 23fcc2e:	d0f5      	beq.n	23fcc1c <floor+0x84>
 23fcc30:	a317      	add	r3, pc, #92	; (adr r3, 23fcc90 <floor+0xf8>)
 23fcc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fcc36:	f7e9 fe01 	bl	23e683c <__adddf3>
 23fcc3a:	2200      	movs	r2, #0
 23fcc3c:	2300      	movs	r3, #0
 23fcc3e:	f7ea fa43 	bl	23e70c8 <__aeabi_dcmpgt>
 23fcc42:	2800      	cmp	r0, #0
 23fcc44:	d0d0      	beq.n	23fcbe8 <floor+0x50>
 23fcc46:	2c00      	cmp	r4, #0
 23fcc48:	db13      	blt.n	23fcc72 <floor+0xda>
 23fcc4a:	ea26 0607 	bic.w	r6, r6, r7
 23fcc4e:	e7cb      	b.n	23fcbe8 <floor+0x50>
 23fcc50:	ee10 2a10 	vmov	r2, s0
 23fcc54:	460b      	mov	r3, r1
 23fcc56:	f7e9 fdf1 	bl	23e683c <__adddf3>
 23fcc5a:	ec41 0b10 	vmov	d0, r0, r1
 23fcc5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fcc60:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 23fcc64:	4a0d      	ldr	r2, [pc, #52]	; (23fcc9c <floor+0x104>)
 23fcc66:	4333      	orrs	r3, r6
 23fcc68:	2600      	movs	r6, #0
 23fcc6a:	42b3      	cmp	r3, r6
 23fcc6c:	bf18      	it	ne
 23fcc6e:	4614      	movne	r4, r2
 23fcc70:	e7ba      	b.n	23fcbe8 <floor+0x50>
 23fcc72:	2d14      	cmp	r5, #20
 23fcc74:	d008      	beq.n	23fcc88 <floor+0xf0>
 23fcc76:	2301      	movs	r3, #1
 23fcc78:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 23fcc7c:	fa03 f505 	lsl.w	r5, r3, r5
 23fcc80:	19ae      	adds	r6, r5, r6
 23fcc82:	bf28      	it	cs
 23fcc84:	18e4      	addcs	r4, r4, r3
 23fcc86:	e7e0      	b.n	23fcc4a <floor+0xb2>
 23fcc88:	3401      	adds	r4, #1
 23fcc8a:	e7de      	b.n	23fcc4a <floor+0xb2>
 23fcc8c:	f3af 8000 	nop.w
 23fcc90:	8800759c 	.word	0x8800759c
 23fcc94:	7e37e43c 	.word	0x7e37e43c
 23fcc98:	000fffff 	.word	0x000fffff
 23fcc9c:	bff00000 	.word	0xbff00000

023fcca0 <nan>:
 23fcca0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 23fcca8 <nan+0x8>
 23fcca4:	4770      	bx	lr
 23fcca6:	bf00      	nop
 23fcca8:	00000000 	.word	0x00000000
 23fccac:	7ff80000 	.word	0x7ff80000

023fccb0 <rint>:
 23fccb0:	ec53 2b10 	vmov	r2, r3, d0
 23fccb4:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
 23fccb8:	ee10 0a10 	vmov	r0, s0
 23fccbc:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
 23fccc0:	2913      	cmp	r1, #19
 23fccc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fccc4:	461c      	mov	r4, r3
 23fccc6:	b083      	sub	sp, #12
 23fccc8:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
 23fcccc:	dc3a      	bgt.n	23fcd44 <rint+0x94>
 23fccce:	2900      	cmp	r1, #0
 23fccd0:	db30      	blt.n	23fcd34 <rint+0x84>
 23fccd2:	4d42      	ldr	r5, [pc, #264]	; (23fcddc <rint+0x12c>)
 23fccd4:	fa45 fc01 	asr.w	ip, r5, r1
 23fccd8:	ea03 050c 	and.w	r5, r3, ip
 23fccdc:	4315      	orrs	r5, r2
 23fccde:	d02d      	beq.n	23fcd3c <rint+0x8c>
 23fcce0:	ea03 035c 	and.w	r3, r3, ip, lsr #1
 23fcce4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 23fcce8:	4318      	orrs	r0, r3
 23fccea:	d00c      	beq.n	23fcd06 <rint+0x56>
 23fccec:	ea24 0c0c 	bic.w	ip, r4, ip
 23fccf0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 23fccf4:	2913      	cmp	r1, #19
 23fccf6:	fa44 f101 	asr.w	r1, r4, r1
 23fccfa:	bf0c      	ite	eq
 23fccfc:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
 23fcd00:	2000      	movne	r0, #0
 23fcd02:	ea4c 0401 	orr.w	r4, ip, r1
 23fcd06:	4936      	ldr	r1, [pc, #216]	; (23fcde0 <rint+0x130>)
 23fcd08:	4623      	mov	r3, r4
 23fcd0a:	4602      	mov	r2, r0
 23fcd0c:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
 23fcd10:	e9de 4500 	ldrd	r4, r5, [lr]
 23fcd14:	4620      	mov	r0, r4
 23fcd16:	4629      	mov	r1, r5
 23fcd18:	f7e9 fd90 	bl	23e683c <__adddf3>
 23fcd1c:	4622      	mov	r2, r4
 23fcd1e:	462b      	mov	r3, r5
 23fcd20:	e9cd 0100 	strd	r0, r1, [sp]
 23fcd24:	e9dd 0100 	ldrd	r0, r1, [sp]
 23fcd28:	f7e9 fd86 	bl	23e6838 <__aeabi_dsub>
 23fcd2c:	ec41 0b10 	vmov	d0, r0, r1
 23fcd30:	b003      	add	sp, #12
 23fcd32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fcd34:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 23fcd38:	4311      	orrs	r1, r2
 23fcd3a:	d124      	bne.n	23fcd86 <rint+0xd6>
 23fcd3c:	ec43 2b10 	vmov	d0, r2, r3
 23fcd40:	b003      	add	sp, #12
 23fcd42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fcd44:	2933      	cmp	r1, #51	; 0x33
 23fcd46:	dd08      	ble.n	23fcd5a <rint+0xaa>
 23fcd48:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 23fcd4c:	d1f6      	bne.n	23fcd3c <rint+0x8c>
 23fcd4e:	4619      	mov	r1, r3
 23fcd50:	f7e9 fd74 	bl	23e683c <__adddf3>
 23fcd54:	ec41 0b10 	vmov	d0, r0, r1
 23fcd58:	e7f2      	b.n	23fcd40 <rint+0x90>
 23fcd5a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 23fcd5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 23fcd62:	fa21 f10c 	lsr.w	r1, r1, ip
 23fcd66:	420a      	tst	r2, r1
 23fcd68:	d0e8      	beq.n	23fcd3c <rint+0x8c>
 23fcd6a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 23fcd6e:	ea4f 0351 	mov.w	r3, r1, lsr #1
 23fcd72:	d0c8      	beq.n	23fcd06 <rint+0x56>
 23fcd74:	ea20 0303 	bic.w	r3, r0, r3
 23fcd78:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 23fcd7c:	fa40 fc0c 	asr.w	ip, r0, ip
 23fcd80:	ea43 000c 	orr.w	r0, r3, ip
 23fcd84:	e7bf      	b.n	23fcd06 <rint+0x56>
 23fcd86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 23fcd8a:	4a16      	ldr	r2, [pc, #88]	; (23fcde4 <rint+0x134>)
 23fcd8c:	4318      	orrs	r0, r3
 23fcd8e:	4022      	ands	r2, r4
 23fcd90:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 23fcd94:	4243      	negs	r3, r0
 23fcd96:	4303      	orrs	r3, r0
 23fcd98:	0b1b      	lsrs	r3, r3, #12
 23fcd9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 23fcd9e:	ea43 0702 	orr.w	r7, r3, r2
 23fcda2:	4b0f      	ldr	r3, [pc, #60]	; (23fcde0 <rint+0x130>)
 23fcda4:	ee10 2a10 	vmov	r2, s0
 23fcda8:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
 23fcdac:	463b      	mov	r3, r7
 23fcdae:	e9de 6700 	ldrd	r6, r7, [lr]
 23fcdb2:	4630      	mov	r0, r6
 23fcdb4:	4639      	mov	r1, r7
 23fcdb6:	f7e9 fd41 	bl	23e683c <__adddf3>
 23fcdba:	4632      	mov	r2, r6
 23fcdbc:	463b      	mov	r3, r7
 23fcdbe:	e9cd 0100 	strd	r0, r1, [sp]
 23fcdc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 23fcdc6:	f7e9 fd37 	bl	23e6838 <__aeabi_dsub>
 23fcdca:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fcdce:	4602      	mov	r2, r0
 23fcdd0:	ea41 0304 	orr.w	r3, r1, r4
 23fcdd4:	ec43 2b10 	vmov	d0, r2, r3
 23fcdd8:	b003      	add	sp, #12
 23fcdda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fcddc:	000fffff 	.word	0x000fffff
 23fcde0:	023ffe40 	.word	0x023ffe40
 23fcde4:	fffe0000 	.word	0xfffe0000

023fcde8 <atexit>:
 23fcde8:	2300      	movs	r3, #0
 23fcdea:	4601      	mov	r1, r0
 23fcdec:	461a      	mov	r2, r3
 23fcdee:	4618      	mov	r0, r3
 23fcdf0:	f7ea bd5e 	b.w	23e78b0 <__register_exitproc>

023fcdf4 <atoi>:
 23fcdf4:	220a      	movs	r2, #10
 23fcdf6:	2100      	movs	r1, #0
 23fcdf8:	f000 b980 	b.w	23fd0fc <strtol>

023fcdfc <isprint>:
 23fcdfc:	4b02      	ldr	r3, [pc, #8]	; (23fce08 <isprint+0xc>)
 23fcdfe:	4418      	add	r0, r3
 23fce00:	7840      	ldrb	r0, [r0, #1]
 23fce02:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23fce06:	4770      	bx	lr
 23fce08:	023ffec0 	.word	0x023ffec0

023fce0c <memcmp>:
 23fce0c:	3901      	subs	r1, #1
 23fce0e:	4402      	add	r2, r0
 23fce10:	b510      	push	{r4, lr}
 23fce12:	4290      	cmp	r0, r2
 23fce14:	d101      	bne.n	23fce1a <memcmp+0xe>
 23fce16:	2000      	movs	r0, #0
 23fce18:	e005      	b.n	23fce26 <memcmp+0x1a>
 23fce1a:	7803      	ldrb	r3, [r0, #0]
 23fce1c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 23fce20:	42a3      	cmp	r3, r4
 23fce22:	d001      	beq.n	23fce28 <memcmp+0x1c>
 23fce24:	1b18      	subs	r0, r3, r4
 23fce26:	bd10      	pop	{r4, pc}
 23fce28:	3001      	adds	r0, #1
 23fce2a:	e7f2      	b.n	23fce12 <memcmp+0x6>

023fce2c <memcpy>:
 23fce2c:	440a      	add	r2, r1
 23fce2e:	1e43      	subs	r3, r0, #1
 23fce30:	4291      	cmp	r1, r2
 23fce32:	d100      	bne.n	23fce36 <memcpy+0xa>
 23fce34:	4770      	bx	lr
 23fce36:	b510      	push	{r4, lr}
 23fce38:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fce3c:	4291      	cmp	r1, r2
 23fce3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 23fce42:	d1f9      	bne.n	23fce38 <memcpy+0xc>
 23fce44:	bd10      	pop	{r4, pc}

023fce46 <memset>:
 23fce46:	4402      	add	r2, r0
 23fce48:	4603      	mov	r3, r0
 23fce4a:	4293      	cmp	r3, r2
 23fce4c:	d100      	bne.n	23fce50 <memset+0xa>
 23fce4e:	4770      	bx	lr
 23fce50:	f803 1b01 	strb.w	r1, [r3], #1
 23fce54:	e7f9      	b.n	23fce4a <memset+0x4>
	...

023fce58 <srand>:
 23fce58:	b538      	push	{r3, r4, r5, lr}
 23fce5a:	4b10      	ldr	r3, [pc, #64]	; (23fce9c <srand+0x44>)
 23fce5c:	4604      	mov	r4, r0
 23fce5e:	681d      	ldr	r5, [r3, #0]
 23fce60:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fce62:	b9b3      	cbnz	r3, 23fce92 <srand+0x3a>
 23fce64:	2018      	movs	r0, #24
 23fce66:	f7fb f9a3 	bl	23f81b0 <malloc>
 23fce6a:	4602      	mov	r2, r0
 23fce6c:	63a8      	str	r0, [r5, #56]	; 0x38
 23fce6e:	b920      	cbnz	r0, 23fce7a <srand+0x22>
 23fce70:	4b0b      	ldr	r3, [pc, #44]	; (23fcea0 <srand+0x48>)
 23fce72:	2142      	movs	r1, #66	; 0x42
 23fce74:	480b      	ldr	r0, [pc, #44]	; (23fcea4 <srand+0x4c>)
 23fce76:	f7fb fa0b 	bl	23f8290 <__assert_func>
 23fce7a:	490b      	ldr	r1, [pc, #44]	; (23fcea8 <srand+0x50>)
 23fce7c:	4b0b      	ldr	r3, [pc, #44]	; (23fceac <srand+0x54>)
 23fce7e:	e9c0 1300 	strd	r1, r3, [r0]
 23fce82:	4b0b      	ldr	r3, [pc, #44]	; (23fceb0 <srand+0x58>)
 23fce84:	2100      	movs	r1, #0
 23fce86:	6083      	str	r3, [r0, #8]
 23fce88:	230b      	movs	r3, #11
 23fce8a:	8183      	strh	r3, [r0, #12]
 23fce8c:	2001      	movs	r0, #1
 23fce8e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23fce92:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fce94:	2200      	movs	r2, #0
 23fce96:	611c      	str	r4, [r3, #16]
 23fce98:	615a      	str	r2, [r3, #20]
 23fce9a:	bd38      	pop	{r3, r4, r5, pc}
 23fce9c:	1006a280 	.word	0x1006a280
 23fcea0:	023ffe50 	.word	0x023ffe50
 23fcea4:	023ffe67 	.word	0x023ffe67
 23fcea8:	abcd330e 	.word	0xabcd330e
 23fceac:	e66d1234 	.word	0xe66d1234
 23fceb0:	0005deec 	.word	0x0005deec

023fceb4 <rand>:
 23fceb4:	4b16      	ldr	r3, [pc, #88]	; (23fcf10 <rand+0x5c>)
 23fceb6:	b510      	push	{r4, lr}
 23fceb8:	681c      	ldr	r4, [r3, #0]
 23fceba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23fcebc:	b9b3      	cbnz	r3, 23fceec <rand+0x38>
 23fcebe:	2018      	movs	r0, #24
 23fcec0:	f7fb f976 	bl	23f81b0 <malloc>
 23fcec4:	63a0      	str	r0, [r4, #56]	; 0x38
 23fcec6:	b928      	cbnz	r0, 23fced4 <rand+0x20>
 23fcec8:	4602      	mov	r2, r0
 23fceca:	4b12      	ldr	r3, [pc, #72]	; (23fcf14 <rand+0x60>)
 23fcecc:	214e      	movs	r1, #78	; 0x4e
 23fcece:	4812      	ldr	r0, [pc, #72]	; (23fcf18 <rand+0x64>)
 23fced0:	f7fb f9de 	bl	23f8290 <__assert_func>
 23fced4:	4a11      	ldr	r2, [pc, #68]	; (23fcf1c <rand+0x68>)
 23fced6:	4b12      	ldr	r3, [pc, #72]	; (23fcf20 <rand+0x6c>)
 23fced8:	e9c0 2300 	strd	r2, r3, [r0]
 23fcedc:	4b11      	ldr	r3, [pc, #68]	; (23fcf24 <rand+0x70>)
 23fcede:	2201      	movs	r2, #1
 23fcee0:	6083      	str	r3, [r0, #8]
 23fcee2:	230b      	movs	r3, #11
 23fcee4:	8183      	strh	r3, [r0, #12]
 23fcee6:	2300      	movs	r3, #0
 23fcee8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 23fceec:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 23fceee:	4a0e      	ldr	r2, [pc, #56]	; (23fcf28 <rand+0x74>)
 23fcef0:	6920      	ldr	r0, [r4, #16]
 23fcef2:	6963      	ldr	r3, [r4, #20]
 23fcef4:	490d      	ldr	r1, [pc, #52]	; (23fcf2c <rand+0x78>)
 23fcef6:	4342      	muls	r2, r0
 23fcef8:	fb01 2203 	mla	r2, r1, r3, r2
 23fcefc:	fba0 0101 	umull	r0, r1, r0, r1
 23fcf00:	1c43      	adds	r3, r0, #1
 23fcf02:	eb42 0001 	adc.w	r0, r2, r1
 23fcf06:	e9c4 3004 	strd	r3, r0, [r4, #16]
 23fcf0a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 23fcf0e:	bd10      	pop	{r4, pc}
 23fcf10:	1006a280 	.word	0x1006a280
 23fcf14:	023ffe50 	.word	0x023ffe50
 23fcf18:	023ffe67 	.word	0x023ffe67
 23fcf1c:	abcd330e 	.word	0xabcd330e
 23fcf20:	e66d1234 	.word	0xe66d1234
 23fcf24:	0005deec 	.word	0x0005deec
 23fcf28:	5851f42d 	.word	0x5851f42d
 23fcf2c:	4c957f2d 	.word	0x4c957f2d

023fcf30 <strcpy>:
 23fcf30:	4603      	mov	r3, r0
 23fcf32:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fcf36:	f803 2b01 	strb.w	r2, [r3], #1
 23fcf3a:	2a00      	cmp	r2, #0
 23fcf3c:	d1f9      	bne.n	23fcf32 <strcpy+0x2>
 23fcf3e:	4770      	bx	lr

023fcf40 <strdup>:
 23fcf40:	4b02      	ldr	r3, [pc, #8]	; (23fcf4c <strdup+0xc>)
 23fcf42:	4601      	mov	r1, r0
 23fcf44:	6818      	ldr	r0, [r3, #0]
 23fcf46:	f000 b803 	b.w	23fcf50 <_strdup_r>
 23fcf4a:	bf00      	nop
 23fcf4c:	1006a280 	.word	0x1006a280

023fcf50 <_strdup_r>:
 23fcf50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcf52:	4604      	mov	r4, r0
 23fcf54:	4608      	mov	r0, r1
 23fcf56:	460d      	mov	r5, r1
 23fcf58:	f7ea fc66 	bl	23e7828 <strlen>
 23fcf5c:	1c42      	adds	r2, r0, #1
 23fcf5e:	4620      	mov	r0, r4
 23fcf60:	4611      	mov	r1, r2
 23fcf62:	9201      	str	r2, [sp, #4]
 23fcf64:	f7fb f978 	bl	23f8258 <_malloc_r>
 23fcf68:	4604      	mov	r4, r0
 23fcf6a:	b118      	cbz	r0, 23fcf74 <_strdup_r+0x24>
 23fcf6c:	9a01      	ldr	r2, [sp, #4]
 23fcf6e:	4629      	mov	r1, r5
 23fcf70:	f7ff ff5c 	bl	23fce2c <memcpy>
 23fcf74:	4620      	mov	r0, r4
 23fcf76:	b003      	add	sp, #12
 23fcf78:	bd30      	pop	{r4, r5, pc}

023fcf7a <strncpy>:
 23fcf7a:	3901      	subs	r1, #1
 23fcf7c:	4603      	mov	r3, r0
 23fcf7e:	b510      	push	{r4, lr}
 23fcf80:	b132      	cbz	r2, 23fcf90 <strncpy+0x16>
 23fcf82:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 23fcf86:	3a01      	subs	r2, #1
 23fcf88:	f803 4b01 	strb.w	r4, [r3], #1
 23fcf8c:	2c00      	cmp	r4, #0
 23fcf8e:	d1f7      	bne.n	23fcf80 <strncpy+0x6>
 23fcf90:	441a      	add	r2, r3
 23fcf92:	2100      	movs	r1, #0
 23fcf94:	4293      	cmp	r3, r2
 23fcf96:	d100      	bne.n	23fcf9a <strncpy+0x20>
 23fcf98:	bd10      	pop	{r4, pc}
 23fcf9a:	f803 1b01 	strb.w	r1, [r3], #1
 23fcf9e:	e7f9      	b.n	23fcf94 <strncpy+0x1a>

023fcfa0 <__strtok_r>:
 23fcfa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fcfa2:	b908      	cbnz	r0, 23fcfa8 <__strtok_r+0x8>
 23fcfa4:	6810      	ldr	r0, [r2, #0]
 23fcfa6:	b188      	cbz	r0, 23fcfcc <__strtok_r+0x2c>
 23fcfa8:	4604      	mov	r4, r0
 23fcfaa:	4620      	mov	r0, r4
 23fcfac:	460f      	mov	r7, r1
 23fcfae:	f814 5b01 	ldrb.w	r5, [r4], #1
 23fcfb2:	f817 6b01 	ldrb.w	r6, [r7], #1
 23fcfb6:	b91e      	cbnz	r6, 23fcfc0 <__strtok_r+0x20>
 23fcfb8:	b965      	cbnz	r5, 23fcfd4 <__strtok_r+0x34>
 23fcfba:	4628      	mov	r0, r5
 23fcfbc:	6015      	str	r5, [r2, #0]
 23fcfbe:	e005      	b.n	23fcfcc <__strtok_r+0x2c>
 23fcfc0:	42b5      	cmp	r5, r6
 23fcfc2:	d1f6      	bne.n	23fcfb2 <__strtok_r+0x12>
 23fcfc4:	2b00      	cmp	r3, #0
 23fcfc6:	d1f0      	bne.n	23fcfaa <__strtok_r+0xa>
 23fcfc8:	6014      	str	r4, [r2, #0]
 23fcfca:	7003      	strb	r3, [r0, #0]
 23fcfcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fcfce:	461c      	mov	r4, r3
 23fcfd0:	e00c      	b.n	23fcfec <__strtok_r+0x4c>
 23fcfd2:	b915      	cbnz	r5, 23fcfda <__strtok_r+0x3a>
 23fcfd4:	f814 3b01 	ldrb.w	r3, [r4], #1
 23fcfd8:	460e      	mov	r6, r1
 23fcfda:	f816 5b01 	ldrb.w	r5, [r6], #1
 23fcfde:	42ab      	cmp	r3, r5
 23fcfe0:	d1f7      	bne.n	23fcfd2 <__strtok_r+0x32>
 23fcfe2:	2b00      	cmp	r3, #0
 23fcfe4:	d0f3      	beq.n	23fcfce <__strtok_r+0x2e>
 23fcfe6:	2300      	movs	r3, #0
 23fcfe8:	f804 3c01 	strb.w	r3, [r4, #-1]
 23fcfec:	6014      	str	r4, [r2, #0]
 23fcfee:	e7ed      	b.n	23fcfcc <__strtok_r+0x2c>

023fcff0 <strtok_r>:
 23fcff0:	2301      	movs	r3, #1
 23fcff2:	f7ff bfd5 	b.w	23fcfa0 <__strtok_r>
	...

023fcff8 <_strtol_l.constprop.0>:
 23fcff8:	2b01      	cmp	r3, #1
 23fcffa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fcffe:	d001      	beq.n	23fd004 <_strtol_l.constprop.0+0xc>
 23fd000:	2b24      	cmp	r3, #36	; 0x24
 23fd002:	d906      	bls.n	23fd012 <_strtol_l.constprop.0+0x1a>
 23fd004:	f7fb f936 	bl	23f8274 <__errno>
 23fd008:	2316      	movs	r3, #22
 23fd00a:	6003      	str	r3, [r0, #0]
 23fd00c:	2000      	movs	r0, #0
 23fd00e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fd012:	460d      	mov	r5, r1
 23fd014:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23fd0f8 <_strtol_l.constprop.0+0x100>
 23fd018:	462e      	mov	r6, r5
 23fd01a:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fd01e:	f814 700c 	ldrb.w	r7, [r4, ip]
 23fd022:	f017 0708 	ands.w	r7, r7, #8
 23fd026:	d1f7      	bne.n	23fd018 <_strtol_l.constprop.0+0x20>
 23fd028:	2c2d      	cmp	r4, #45	; 0x2d
 23fd02a:	d132      	bne.n	23fd092 <_strtol_l.constprop.0+0x9a>
 23fd02c:	782c      	ldrb	r4, [r5, #0]
 23fd02e:	2701      	movs	r7, #1
 23fd030:	1cb5      	adds	r5, r6, #2
 23fd032:	2b00      	cmp	r3, #0
 23fd034:	d05b      	beq.n	23fd0ee <_strtol_l.constprop.0+0xf6>
 23fd036:	2b10      	cmp	r3, #16
 23fd038:	d109      	bne.n	23fd04e <_strtol_l.constprop.0+0x56>
 23fd03a:	2c30      	cmp	r4, #48	; 0x30
 23fd03c:	d107      	bne.n	23fd04e <_strtol_l.constprop.0+0x56>
 23fd03e:	782c      	ldrb	r4, [r5, #0]
 23fd040:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23fd044:	2c58      	cmp	r4, #88	; 0x58
 23fd046:	d14d      	bne.n	23fd0e4 <_strtol_l.constprop.0+0xec>
 23fd048:	786c      	ldrb	r4, [r5, #1]
 23fd04a:	2310      	movs	r3, #16
 23fd04c:	3502      	adds	r5, #2
 23fd04e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23fd052:	f04f 0c00 	mov.w	ip, #0
 23fd056:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23fd05a:	4666      	mov	r6, ip
 23fd05c:	fbb8 f9f3 	udiv	r9, r8, r3
 23fd060:	fb03 8a19 	mls	sl, r3, r9, r8
 23fd064:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23fd068:	f1be 0f09 	cmp.w	lr, #9
 23fd06c:	d816      	bhi.n	23fd09c <_strtol_l.constprop.0+0xa4>
 23fd06e:	4674      	mov	r4, lr
 23fd070:	42a3      	cmp	r3, r4
 23fd072:	dd24      	ble.n	23fd0be <_strtol_l.constprop.0+0xc6>
 23fd074:	f1bc 0f00 	cmp.w	ip, #0
 23fd078:	db1e      	blt.n	23fd0b8 <_strtol_l.constprop.0+0xc0>
 23fd07a:	45b1      	cmp	r9, r6
 23fd07c:	d31c      	bcc.n	23fd0b8 <_strtol_l.constprop.0+0xc0>
 23fd07e:	d101      	bne.n	23fd084 <_strtol_l.constprop.0+0x8c>
 23fd080:	45a2      	cmp	sl, r4
 23fd082:	db19      	blt.n	23fd0b8 <_strtol_l.constprop.0+0xc0>
 23fd084:	fb06 4603 	mla	r6, r6, r3, r4
 23fd088:	f04f 0c01 	mov.w	ip, #1
 23fd08c:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fd090:	e7e8      	b.n	23fd064 <_strtol_l.constprop.0+0x6c>
 23fd092:	2c2b      	cmp	r4, #43	; 0x2b
 23fd094:	bf04      	itt	eq
 23fd096:	782c      	ldrbeq	r4, [r5, #0]
 23fd098:	1cb5      	addeq	r5, r6, #2
 23fd09a:	e7ca      	b.n	23fd032 <_strtol_l.constprop.0+0x3a>
 23fd09c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23fd0a0:	f1be 0f19 	cmp.w	lr, #25
 23fd0a4:	d801      	bhi.n	23fd0aa <_strtol_l.constprop.0+0xb2>
 23fd0a6:	3c37      	subs	r4, #55	; 0x37
 23fd0a8:	e7e2      	b.n	23fd070 <_strtol_l.constprop.0+0x78>
 23fd0aa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23fd0ae:	f1be 0f19 	cmp.w	lr, #25
 23fd0b2:	d804      	bhi.n	23fd0be <_strtol_l.constprop.0+0xc6>
 23fd0b4:	3c57      	subs	r4, #87	; 0x57
 23fd0b6:	e7db      	b.n	23fd070 <_strtol_l.constprop.0+0x78>
 23fd0b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fd0bc:	e7e6      	b.n	23fd08c <_strtol_l.constprop.0+0x94>
 23fd0be:	f1bc 0f00 	cmp.w	ip, #0
 23fd0c2:	da05      	bge.n	23fd0d0 <_strtol_l.constprop.0+0xd8>
 23fd0c4:	2322      	movs	r3, #34	; 0x22
 23fd0c6:	4646      	mov	r6, r8
 23fd0c8:	6003      	str	r3, [r0, #0]
 23fd0ca:	b942      	cbnz	r2, 23fd0de <_strtol_l.constprop.0+0xe6>
 23fd0cc:	4630      	mov	r0, r6
 23fd0ce:	e79e      	b.n	23fd00e <_strtol_l.constprop.0+0x16>
 23fd0d0:	b107      	cbz	r7, 23fd0d4 <_strtol_l.constprop.0+0xdc>
 23fd0d2:	4276      	negs	r6, r6
 23fd0d4:	2a00      	cmp	r2, #0
 23fd0d6:	d0f9      	beq.n	23fd0cc <_strtol_l.constprop.0+0xd4>
 23fd0d8:	f1bc 0f00 	cmp.w	ip, #0
 23fd0dc:	d000      	beq.n	23fd0e0 <_strtol_l.constprop.0+0xe8>
 23fd0de:	1e69      	subs	r1, r5, #1
 23fd0e0:	6011      	str	r1, [r2, #0]
 23fd0e2:	e7f3      	b.n	23fd0cc <_strtol_l.constprop.0+0xd4>
 23fd0e4:	2430      	movs	r4, #48	; 0x30
 23fd0e6:	2b00      	cmp	r3, #0
 23fd0e8:	d1b1      	bne.n	23fd04e <_strtol_l.constprop.0+0x56>
 23fd0ea:	2308      	movs	r3, #8
 23fd0ec:	e7af      	b.n	23fd04e <_strtol_l.constprop.0+0x56>
 23fd0ee:	2c30      	cmp	r4, #48	; 0x30
 23fd0f0:	d0a5      	beq.n	23fd03e <_strtol_l.constprop.0+0x46>
 23fd0f2:	230a      	movs	r3, #10
 23fd0f4:	e7ab      	b.n	23fd04e <_strtol_l.constprop.0+0x56>
 23fd0f6:	bf00      	nop
 23fd0f8:	023ffec1 	.word	0x023ffec1

023fd0fc <strtol>:
 23fd0fc:	4613      	mov	r3, r2
 23fd0fe:	460a      	mov	r2, r1
 23fd100:	4601      	mov	r1, r0
 23fd102:	4802      	ldr	r0, [pc, #8]	; (23fd10c <strtol+0x10>)
 23fd104:	6800      	ldr	r0, [r0, #0]
 23fd106:	f7ff bf77 	b.w	23fcff8 <_strtol_l.constprop.0>
 23fd10a:	bf00      	nop
 23fd10c:	1006a280 	.word	0x1006a280

023fd110 <link_const_data_start>:
 23fd110:	00001388 	.word	0x00001388
 23fd114:	00002710 	.word	0x00002710
 23fd118:	00004e20 	.word	0x00004e20
 23fd11c:	00009c40 	.word	0x00009c40
 23fd120:	00013880 	.word	0x00013880
 23fd124:	00027100 	.word	0x00027100
 23fd128:	0004e200 	.word	0x0004e200
 23fd12c:	0009c400 	.word	0x0009c400
 23fd130:	00138800 	.word	0x00138800
 23fd134:	00271000 	.word	0x00271000
 23fd138:	004e2000 	.word	0x004e2000
 23fd13c:	009c4000 	.word	0x009c4000
 23fd140:	01388000 	.word	0x01388000
 23fd144:	02710000 	.word	0x02710000
 23fd148:	04e20000 	.word	0x04e20000
 23fd14c:	09c40000 	.word	0x09c40000
 23fd150:	13880000 	.word	0x13880000
 23fd154:	27100000 	.word	0x27100000
 23fd158:	00000000 	.word	0x00000000
 23fd15c:	00000013 	.word	0x00000013
 23fd160:	023fd291 	.word	0x023fd291
 23fd164:	00000012 	.word	0x00000012
 23fd168:	023fd294 	.word	0x023fd294
 23fd16c:	00000011 	.word	0x00000011
 23fd170:	023fd297 	.word	0x023fd297
 23fd174:	00000010 	.word	0x00000010
 23fd178:	023fd29a 	.word	0x023fd29a
 23fd17c:	0000000f 	.word	0x0000000f
 23fd180:	023fd29d 	.word	0x023fd29d
 23fd184:	0000000e 	.word	0x0000000e
 23fd188:	023fd2a0 	.word	0x023fd2a0
 23fd18c:	00000000 	.word	0x00000000
 23fd190:	023fd2a3 	.word	0x023fd2a3
 23fd194:	00000001 	.word	0x00000001
 23fd198:	023fd2a6 	.word	0x023fd2a6
 23fd19c:	00000002 	.word	0x00000002
 23fd1a0:	023fd2a9 	.word	0x023fd2a9
 23fd1a4:	00000003 	.word	0x00000003
 23fd1a8:	023fd2ac 	.word	0x023fd2ac
 23fd1ac:	00000004 	.word	0x00000004
 23fd1b0:	023fd2af 	.word	0x023fd2af
 23fd1b4:	00000005 	.word	0x00000005
 23fd1b8:	023fd2b2 	.word	0x023fd2b2
 23fd1bc:	00000006 	.word	0x00000006
 23fd1c0:	023fd2b5 	.word	0x023fd2b5
 23fd1c4:	00000007 	.word	0x00000007
 23fd1c8:	023fd2b8 	.word	0x023fd2b8
 23fd1cc:	00000008 	.word	0x00000008
 23fd1d0:	023fd2bb 	.word	0x023fd2bb
 23fd1d4:	00000009 	.word	0x00000009
 23fd1d8:	023fd2be 	.word	0x023fd2be
 23fd1dc:	0000000a 	.word	0x0000000a
 23fd1e0:	023fd2c1 	.word	0x023fd2c1
 23fd1e4:	0000000b 	.word	0x0000000b
 23fd1e8:	023fd2c5 	.word	0x023fd2c5
 23fd1ec:	0000000c 	.word	0x0000000c
 23fd1f0:	023fd2c9 	.word	0x023fd2c9
 23fd1f4:	0000000d 	.word	0x0000000d
 23fd1f8:	023fd2cd 	.word	0x023fd2cd
 23fd1fc:	0000000e 	.word	0x0000000e
 23fd200:	023fd2d1 	.word	0x023fd2d1
 23fd204:	0000000f 	.word	0x0000000f
 23fd208:	023fd2d5 	.word	0x023fd2d5
 23fd20c:	00000009 	.word	0x00000009
 23fd210:	023fd2d9 	.word	0x023fd2d9
 23fd214:	0000000a 	.word	0x0000000a
 23fd218:	023fd2dc 	.word	0x023fd2dc
 23fd21c:	00000000 	.word	0x00000000
 23fd220:	023fd2df 	.word	0x023fd2df
 23fd224:	00000001 	.word	0x00000001
 23fd228:	023fd2e3 	.word	0x023fd2e3
 23fd22c:	0000000c 	.word	0x0000000c
 23fd230:	023fd2e7 	.word	0x023fd2e7
 23fd234:	0000000b 	.word	0x0000000b
 23fd238:	023fd2ec 	.word	0x023fd2ec
 23fd23c:	0000000d 	.word	0x0000000d
 23fd240:	023fd2f1 	.word	0x023fd2f1
 23fd244:	00000008 	.word	0x00000008
 23fd248:	023fd2f5 	.word	0x023fd2f5
 23fd24c:	04030201 	.word	0x04030201
 23fd250:	08070605 	.word	0x08070605
 23fd254:	0c0b0a09 	.word	0x0c0b0a09
 23fd258:	100f0e0d 	.word	0x100f0e0d
 23fd25c:	00000000 	.word	0x00000000
 23fd260:	01000000 	.word	0x01000000
 23fd264:	0100080c 	.word	0x0100080c
 23fd268:	00000302 	.word	0x00000302

023fd26c <dynalib_user>:
 23fd26c:	023e7839 023e7861 023e7865 00000000     9x>.ax>.ex>.....
 23fd27c:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23fd28c:	6c617574 00304100 41003141 33410032     tual.A0.A1.A2.A3
 23fd29c:	00344100 44003541 31440030 00324400     .A4.A5.D0.D1.D2.
 23fd2ac:	44003344 35440034 00364400 44003744     D3.D4.D5.D6.D7.D
 23fd2bc:	39440038 30314400 31314400 32314400     8.D9.D10.D11.D12
 23fd2cc:	33314400 34314400 35314400 00585400     .D13.D14.D15.TX.
 23fd2dc:	53005852 53004144 4d004c43 0049534f     RX.SDA.SCL.MOSI.
 23fd2ec:	4f53494d 4b435300 00535300 4e4b4e55     MISO.SCK.SS.UNKN
 23fd2fc:	454d4200 00303832 33504d42 64003039     .BME280.BMP390.d
 23fd30c:	75616665 0020746c 0042534d 0042534c     efault .MSB.LSB.
 23fd31c:	4950533c 74746553 73676e69 66656420     <SPISettings def
 23fd32c:	746c7561 533c003e 65534950 6e697474     ault>.<SPISettin
 23fd33c:	25207367 20752573 4d207325 2545444f     gs %s%u %s MODE%
 23fd34c:	7c003e75 2d002f00 4f005c00 3344454c     u>.|./.-.\.OLED3
 23fd35c:	4b4f3a32 454c4f00 3a343644 25004b4f     2:OK.OLED64:OK.%
 23fd36c:	30252d64 252d6432 54643230 64323025     d-%02d-%02dT%02d
 23fd37c:	3230253a 30253a64 45006432 523a5252     :%02d:%02d.ERR:R
 23fd38c:	4e204354 4620544f 444e554f 52524500     TC NOT FOUND.ERR
 23fd39c:	4354523a 4332492d 544f4e20 4e554f46     :RTC-I2C NOTFOUN
 23fd3ac:	73250044 5452002a 41563a43 0044494c     D.%s*.RTC:VALID.
 23fd3bc:	4445454e 4d534720 4d495420 523e2d45     NEED GSM TIME->R
 23fd3cc:	52004354 203a4354 00746553 3a435452     TC.RTC: Set.RTC:
 23fd3dc:	54533120 4e595320 54520043 32203a43      1ST SYNC.RTC: 2
 23fd3ec:	53205248 00434e59 20534541 59454b50     HR SYNC.AES PKEY
 23fd3fc:	45532120 45410054 4b502053 21205945      !SET.AES PKEY !
 23fd40c:	42203631 73657479 53454100 49594d20     16 Bytes.AES MYI
 23fd41c:	53212056 4c005445 2041524f 20525750     V !SET.LORA PWR 
 23fd42c:	00525245 41524f4c 45524620 52452051     ERR.LORA FREQ ER
 23fd43c:	4f4c0052 41204152 20524444 00525245     R.LORA ADDR ERR.
 23fd44c:	5f534541 5b59454b 005d7325 5f534541     AES_KEY[%s].AES_
 23fd45c:	5649594d 5d75255b 524f4c00 46432041     MYIV[%u].LORA CF
 23fd46c:	4b4f2056 74656700 736f425f 435f6863     V OK.get_Bosch_C
 23fd47c:	49706968 00292844 32492020 30253a43     hipID().  I2C:%0
 23fd48c:	52205832 253a6765 00583230 52452020     2X Reg:%02X.  ER
 23fd49c:	54455f52 0064253a 48432020 44495049     R_ET:%d.  CHIPID
 23fd4ac:	3230253a 4d422058 30383250 43202000     :%02X BMP280.  C
 23fd4bc:	49504948 30253a44 42205832 3833504d     HIPID:%02X BMP38
 23fd4cc:	20200038 50494843 253a4449 20583230     8.  CHIPID:%02X 
 23fd4dc:	2f454d42 00303933 48432020 44495049     BME/390.  CHIPID
 23fd4ec:	3230253a 6e492058 696c6156 20200064     :%02X InValid.  
 23fd4fc:	5f525245 303a4652 584d4200 494e493a     ERR_RF:0.BMX:INI
 23fd50c:	4d420054 45203150 42005252 2031504d     T.BMP1 ERR.BMP1 
 23fd51c:	42004b4f 2031584d 00525245 33504d42     OK.BMX1 ERR.BMP3
 23fd52c:	315f3039 004b4f20 32454d42 315f3038     90_1 OK.BME280_1
 23fd53c:	004b4f20 31334d42 52524520 334d4200      OK.BM31 ERR.BM3
 23fd54c:	4b4f2031 584d4200 4e20315f 4d420046     1 OK.BMX_1 NF.BM
 23fd55c:	45203250 42005252 2032504d 42004b4f     P2 ERR.BMP2 OK.B
 23fd56c:	2032584d 00525245 33504d42 325f3039     MX2 ERR.BMP390_2
 23fd57c:	004b4f20 32454d42 325f3038 004b4f20      OK.BME280_2 OK.
 23fd58c:	32334d42 52524520 334d4200 4b4f2032     BM32 ERR.BM32 OK
 23fd59c:	584d4200 4e20325f 54480046 44313255     .BMX_2 NF.HTU21D
 23fd5ac:	494e493a 54480054 464e2055 55544800     :INIT.HTU NF.HTU
 23fd5bc:	004b4f20 3950434d 3a383038 54494e49      OK.MCP9808:INIT
 23fd5cc:	50434d00 464e2031 50434d00 4b4f2031     .MCP1 NF.MCP1 OK
 23fd5dc:	50434d00 464e2032 50434d00 4b4f2032     .MCP2 NF.MCP2 OK
 23fd5ec:	50434d00 464e2033 50434d00 4b4f2033     .MCP3 NF.MCP3 OK
 23fd5fc:	50434d00 464e2034 50434d00 4b4f2034     .MCP4 NF.MCP4 OK
 23fd60c:	54485300 494e493a 48530054 4e203154     .SHT:INIT.SHT1 N
 23fd61c:	48530046 4f203154 4853004b 4e203254     F.SHT1 OK.SHT2 N
 23fd62c:	48530046 4f203254 4948004b 493a3848     F.SHT2 OK.HIH8:I
 23fd63c:	0054494e 38484948 004b4f20 38484948     NIT.HIH8 OK.HIH8
 23fd64c:	00464e20 3a544257 54494e49 54425700      NF.WBT:INIT.WBT
 23fd65c:	004b4f3a 3a544257 4800464e 4e493a49     :OK.WBT:NF.HI:IN
 23fd66c:	48005449 4b4f3a49 3a494800 5700464e     IT.HI:OK.HI:NF.W
 23fd67c:	3a544742 54494e49 47425700 4b4f3a54     BGT:INIT.WBGT:OK
 23fd68c:	472f7720 65626f6c 47425700 4b4f3a54      w/Globe.WBGT:OK
 23fd69c:	2f6f7720 626f6c47 42570065 4e3a5447      wo/Globe.WBGT:N
 23fd6ac:	49530046 35343131 494e493a 49530054     F.SI1145:INIT.SI
 23fd6bc:	00464e3a 4f3a4953 4953004b 5b49563a     :NF.SI:OK.SI:VI[
 23fd6cc:	252e6425 5d643230 3a495300 255b5249     %d.%02d].SI:IR[%
 23fd6dc:	30252e64 005d6432 553a4953 64255b56     d.%02d].SI:UV[%d
 23fd6ec:	3230252e 56005d64 493a584c 0054494e     .%02d].VLX:INIT.
 23fd6fc:	20584c56 56004b4f 4e20584c 4c420046     VLX OK.VLX NF.BL
 23fd70c:	4e493a58 42005449 4f3a584c 4c42004b     X:INIT.BLX:OK.BL
 23fd71c:	464e3a58 324d5000 49514135 494e493a     X:NF.PM25AQI:INI
 23fd72c:	4d500054 00464e3a 423a4d50 6e696765     T.PM:NF.PM:Begin
 23fd73c:	00464e20 4f3a4d50 4d50004b 46464f20      NF.PM:OK.PM OFF
 23fd74c:	454e494c 43444800 494e493a 44480054     LINE.HDC:INIT.HD
 23fd75c:	4e203143 44480046 4f203143 4448004b     C1 NF.HDC1 OK.HD
 23fd76c:	4e203243 44480046 4f203243 504c004b     C2 NF.HDC2 OK.LP
 23fd77c:	4e493a53 4c005449 20315350 4c00464e     S:INIT.LPS1 NF.L
 23fd78c:	20315350 4c004b4f 20325350 4c00464e     PS1 OK.LPS2 NF.L
 23fd79c:	20325350 54004b4f 493a574c 0054494e     PS2 OK.TLW:INIT.
 23fd7ac:	20574c54 5400464e 4f20574c 5354004b     TLW NF.TLW OK.TS
 23fd7bc:	4e493a4d 54005449 4e204d53 53540046     M:INIT.TSM NF.TS
 23fd7cc:	4b4f204d 534d5400 4e493a4d 54005449     M OK.TMSM:INIT.T
 23fd7dc:	204d534d 5400464e 204d534d 41004b4f     MSM NF.TMSM OK.A
 23fd7ec:	30363553 4e493a30 57005449 464e3a44     S5600:INIT.WD:NF
 23fd7fc:	3a445700 41004b4f 4e493a34 41005449     .WD:OK.A4:INIT.A
 23fd80c:	49443d34 44005453 3d545349 44004d35     4=DIST.DIST=5M.D
 23fd81c:	3d545349 004d3031 523d3441 004e4941     IST=10M.A4=RAIN.
 23fd82c:	523d3441 41005741 554e3d34 41004c4c     A4=RAW.A4=NULL.A
 23fd83c:	554e3d34 532c4c4c 464e2044 3a354100     4=NULL,SD NF.A5:
 23fd84c:	54494e49 3d354100 00574152 4e3d3541     INIT.A5=RAW.A5=N
 23fd85c:	004c4c55 4e3d3541 2c4c4c55 4e204453     ULL.A5=NULL,SD N
 23fd86c:	44570046 66664f20 656e696c 57004c5f     F.WD Offline_L.W
 23fd87c:	664f2044 6e696c66 00485f65 4f204457     D Offline_H.WD O
 23fd88c:	6e696c6e 4d420065 4f203150 4e494c4e     nline.BMP1 ONLIN
 23fd89c:	4d420045 4f203145 4e494c4e 4d420045     E.BME1 ONLINE.BM
 23fd8ac:	30393350 4f20315f 4e494c4e 4d420045     P390_1 ONLINE.BM
 23fd8bc:	4f203133 4e494c4e 4d420045 4f203158     31 ONLINE.BMX1 O
 23fd8cc:	494c4646 4200454e 2032504d 494c4e4f     FFLINE.BMP2 ONLI
 23fd8dc:	4200454e 2032454d 494c4e4f 4200454e     NE.BME2 ONLINE.B
 23fd8ec:	2032334d 494c4e4f 4200454e 2032584d     M32 ONLINE.BMX2 
 23fd8fc:	4c46464f 00454e49 20555448 494c4e4f     OFFLINE.HTU ONLI
 23fd90c:	4800454e 4f205554 494c4646 5300454e     NE.HTU OFFLINE.S
 23fd91c:	4e4f2049 454e494c 20495300 4c46464f     I ONLINE.SI OFFL
 23fd92c:	00454e49 4f204457 4e494c4e 44570045     INE.WD ONLINE.WD
 23fd93c:	46464f20 454e494c 584c5600 4c4e4f20      OFFLINE.VLX ONL
 23fd94c:	00454e49 20584c56 4c46464f 00454e49     INE.VLX OFFLINE.
 23fd95c:	4f204d50 4e494c4e 45450045 4d4f5250     PM ONLINE.EEPROM
 23fd96c:	454c4320 45205241 524f5252 363e5400      CLEAR ERROR.T>6
 23fd97c:	5452202c 2d20363e 004b4f20 2c363e54     , RT>6 - OK.T>6,
 23fd98c:	3c545220 2620363d 52202026 59363e54      RT<=6 &&  RT>6Y
 23fd99c:	6f4d202d 54006576 202c363c 363c5452     - Move.T<6, RT<6
 23fd9ac:	52202620 20363e54 74736559 61647265      & RT>6 Yesterda
 23fd9bc:	202d2079 54004b4f 202c363c 363c5452     y - OK.T<6, RT<6
 23fd9cc:	20262620 363e5452 2064322d 6f4d202d      && RT>6-2d - Mo
 23fd9dc:	54006576 202c363c 363c5452 20262620     ve.T<6, RT<6 && 
 23fd9ec:	3d3c5452 64322d36 43202d20 7261656c     RT<=6-2d - Clear
 23fd9fc:	50454500 204d4f52 54494e49 52524520     .EEPROM INIT ERR
 23fda0c:	4500524f 4f525045 5452204d 44505520     OR.EEPROM RT UPD
 23fda1c:	44455441 50454500 204d4f52 41445055     ATED.EEPROM UPDA
 23fda2c:	00444554 52504545 44204d4f 00504d55     TED.EEPROM DUMP.
 23fda3c:	4e454c20 0064253a 31545220 2e64253a      LEN:%d. RT1:%d.
 23fda4c:	64323025 50522000 64253a31 3230252e     %02d. RP1:%d.%02
 23fda5c:	52200064 253a3254 30252e64 20006432     d. RT2:%d.%02d. 
 23fda6c:	3a325052 252e6425 00643230 54475220     RP2:%d.%02d. RGT
 23fda7c:	6c253a53 4e200075 50465332 756c253a     S:%lu. N2SFP:%lu
 23fda8c:	53432000 756c253a 53432000 6c253a43     . CS:%lu. CSC:%l
 23fda9c:	44530075 00464e3a 4d3a4453 5249444b     u.SD:NF.SD:MKDIR
 23fdaac:	53424f20 004b4f20 4f3a4453 6e696c6e      OBS OK.SD:Onlin
 23fdabc:	44530065 444b4d3a 4f205249 45205342     e.SD:MKDIR OBS E
 23fdacc:	53005252 664f3a44 6e696c66 44530065     RR.SD:Offline.SD
 23fdadc:	53424f3a 52494420 69784520 00737473     :OBS DIR Exists.
 23fdaec:	252f7325 30256434 30256432 6c2e6432     %s/%4d%02d%02d.l
 23fdafc:	5300676f 704f3a44 4c286e65 4529676f     og.SD:Open(Log)E
 23fdb0c:	4e005252 3e2d5332 3a4c4544 4e00464e     RR.N2S->DEL:NF.N
 23fdb1c:	3e2d5332 3a4c4544 4e004b4f 3e2d5332     2S->DEL:OK.N2S->
 23fdb2c:	3a4c4544 00525245 3a53324e 6c6c7546     DEL:ERR.N2S:Full
 23fdb3c:	53324e00 53424f3a 64644120 4e006465     .N2S:OBS Added.N
 23fdb4c:	4f3a5332 206e6570 6f727245 73250072     2S:Open Error.%s
 23fdb5c:	0073252c 61526f4c 5b67734d 2d5d6425     ,%s.LoRaMsg[%d]-
 23fdb6c:	53324e3e 524f4c00 65522041 2079616c     >N2S.LORA Relay 
 23fdb7c:	63256325 6b6e5520 002c006e 616c6552     %c%c Unkn.,.Rela
 23fdb8c:	73252079 3a444920 43206425 253a544e     y %s ID:%d CNT:%
 23fdb9c:	4f4c0064 52204152 79616c65 536f4e20     d.LORA Relay NoS
 23fdbac:	65636170 524f4c00 65522041 2079616c     pace.LORA Relay 
 23fdbbc:	4c67734d 0074736f 41524f4c 6c655220     MsgLost.LORA Rel
 23fdbcc:	25207961 3e2d2073 65755120 3a646575     ay %s -> Queued:
 23fdbdc:	43006425 49464e4f 58542e47 44530054     %d.CONFIG.TXT.SD
 23fdbec:	72614320 65203a64 726f7272 206e6f20      Card: error on 
 23fdbfc:	6e65706f 20676e69 656c6966 65610020     opening file .ae
 23fdc0c:	6b705f73 43007965 65613a46 6b705f73     s_pkey.CF:aes_pk
 23fdc1c:	5b3d7965 005d7325 5f736561 7669796d     ey=[%s].aes_myiv
 23fdc2c:	3a464300 5f736561 7669796d 6c255b3d     .CF:aes_myiv=[%l
 23fdc3c:	6c005d75 5f61726f 74696e75 43006469     u].lora_unitid.C
 23fdc4c:	6f6c3a46 755f6172 6974696e 255b3d64     F:lora_unitid=[%
 23fdc5c:	6c005d64 5f61726f 6f707874 00726577     d].lora_txpower.
 23fdc6c:	6c3a4643 5f61726f 6f707874 3d726577     CF:lora_txpower=
 23fdc7c:	5d64255b 726f6c00 72665f61 43007165     [%d].lora_freq.C
 23fdc8c:	6f6c3a46 665f6172 3d716572 5d64255b     F:lora_freq=[%d]
 23fdc9c:	00746100 00737363 00687468 41796857     .at.css.hth.WhyA
 23fdcac:	6548496d 003f6572 0053462c 2d53424f     mIHere?.,FS.OBS-
 23fdcbc:	2064253e 20646441 0053324e 5b53424f     >%d Add N2S.OBS[
 23fdccc:	2d5d6425 0044533e 7325202c 2d524c00     %d]->SD., %s.LR-
 23fdcdc:	53324e3e 53424f00 4c4c415b 4e3e2d5d     >N2S.OBS[ALL]->N
 23fdcec:	44005332 7463416f 3a6e6f69 4f424552     2S.DoAction:REBO
 23fdcfc:	4400544f 7463416f 3a6e6f69 4f464e49     OT.DoAction:INFO
 23fdd0c:	416f4400 6f697463 45533a6e 4400444e     .DoAction:SEND.D
 23fdd1c:	7463416f 3a6e6f69 00545243 63416f44     oAction:CRT.DoAc
 23fdd2c:	6e6f6974 4434413a 00545349 443d3441     tion:A4DIST.A4=D
 23fdd3c:	2c545349 4c454420 49415220 4b4f3a4e     IST, DEL RAIN:OK
 23fdd4c:	3d344100 54534944 4544202c 4152204c     .A4=DIST, DEL RA
 23fdd5c:	453a4e49 41005252 49443d34 202c5453     IN:ERR.A4=DIST, 
 23fdd6c:	45524c41 20594441 53495845 41005354     ALREADY EXISTS.A
 23fdd7c:	49443d34 202c5453 00544553 443d3441     4=DIST, SET.A4=D
 23fdd8c:	2c545349 45504f20 5245204e 34410052     IST, OPEN ERR.A4
 23fdd9c:	5349443d 44202c54 35204c45 4b4f3a4d     =DIST, DEL 5M:OK
 23fddac:	3031202c 4553204d 34410054 5349443d     , 10M SET.A4=DIS
 23fddbc:	44202c54 35204c45 52453a4d 34410052     T, DEL 5M:ERR.A4
 23fddcc:	5349443d 31202c54 41004d30 49443d34     =DIST, 10M.A4=DI
 23fdddc:	202c5453 4e204453 6f440046 69746341     ST, SD NF.DoActi
 23fddec:	413a6e6f 49415234 3441004e 4941523d     on:A4RAIN.A4=RAI
 23fddfc:	44202c4e 44204c45 3a545349 41004b4f     N, DEL DIST:OK.A
 23fde0c:	41523d34 202c4e49 204c4544 54534944     4=RAIN, DEL DIST
 23fde1c:	5252453a 3d344100 4e494152 4544202c     :ERR.A4=RAIN, DE
 23fde2c:	4d35204c 004b4f3a 523d3441 2c4e4941     L 5M:OK.A4=RAIN,
 23fde3c:	4c454420 3a4d3520 00525245 523d3441      DEL 5M:ERR.A4=R
 23fde4c:	2c4e4941 524c4120 59444145 49584520     AIN, ALREADY EXI
 23fde5c:	00535453 523d3441 2c4e4941 54455320     STS.A4=RAIN, SET
 23fde6c:	3d344100 4e494152 504f202c 45204e45     .A4=RAIN, OPEN E
 23fde7c:	41005252 41523d34 202c4e49 4e204453     RR.A4=RAIN, SD N
 23fde8c:	6f440046 69746341 353a6e6f 5349444d     F.DoAction:5MDIS
 23fde9c:	4d350054 54534944 4c41202c 44414552     T.5MDIST, ALREAD
 23fdeac:	58452059 53545349 444d3500 20545349     Y EXISTS.5MDIST 
 23fdebc:	00544553 49444d35 4f205453 204e4550     SET.5MDIST OPEN 
 23fdecc:	00525245 49444d35 202c5453 4e204453     ERR.5MDIST, SD N
 23fdedc:	6f440046 69746341 413a6e6f 57415234     F.DoAction:A4RAW
 23fdeec:	3d344100 54534944 4544202c 4944204c     .A4=DIST, DEL DI
 23fdefc:	4f3a5453 3441004b 5349443d 44202c54     ST:OK.A4=DIST, D
 23fdf0c:	44204c45 3a545349 00525245 443d3441     EL DIST:ERR.A4=D
 23fdf1c:	2c545349 4c454420 3a4d3520 41004b4f     IST, DEL 5M:OK.A
 23fdf2c:	41523d34 41202c57 4145524c 45205944     4=RAW, ALREADY E
 23fdf3c:	54534958 34410053 5741523d 4553202c     XISTS.A4=RAW, SE
 23fdf4c:	34410054 5741523d 504f202c 45204e45     T.A4=RAW, OPEN E
 23fdf5c:	41005252 41523d34 53202c57 464e2044     RR.A4=RAW, SD NF
 23fdf6c:	416f4400 6f697463 34413a6e 00524c43     .DoAction:A4CLR.
 23fdf7c:	433d3441 202c524c 204c4544 54534944     A4=CLR, DEL DIST
 23fdf8c:	004b4f3a 433d3441 202c524c 204c4544     :OK.A4=CLR, DEL 
 23fdf9c:	54534944 5252453a 3d344100 2c524c43     DIST:ERR.A4=CLR,
 23fdfac:	4c454420 49415220 464e3a4e 3d344100      DEL RAIN:NF.A4=
 23fdfbc:	2c524c43 4c454420 49415220 4b4f3a4e     CLR, DEL RAIN:OK
 23fdfcc:	3d344100 2c524c43 4c454420 49415220     .A4=CLR, DEL RAI
 23fdfdc:	52453a4e 34410052 524c433d 4544202c     N:ERR.A4=CLR, DE
 23fdfec:	4152204c 4b4f3a57 3d344100 2c524c43     L RAW:OK.A4=CLR,
 23fdffc:	4c454420 57415220 5252453a 3d344100      DEL RAW:ERR.A4=
 23fe00c:	2c524c43 4c454420 3a4d3520 41004b4f     CLR, DEL 5M:OK.A
 23fe01c:	4c433d34 44202c52 35204c45 52453a4d     4=CLR, DEL 5M:ER
 23fe02c:	34410052 524c433d 4453202c 00464e20     R.A4=CLR, SD NF.
 23fe03c:	63416f44 6e6f6974 5235413a 41005741     DoAction:A5RAW.A
 23fe04c:	41523d35 41202c57 4145524c 45205944     5=RAW, ALREADY E
 23fe05c:	54534958 35410053 5741523d 4553202c     XISTS.A5=RAW, SE
 23fe06c:	35410054 5741523d 504f202c 45204e45     T.A5=RAW, OPEN E
 23fe07c:	41005252 41523d35 53202c57 464e2044     RR.A5=RAW, SD NF
 23fe08c:	416f4400 6f697463 35413a6e 00524c43     .DoAction:A5CLR.
 23fe09c:	433d3541 202c524c 204c4544 3a574152     A5=CLR, DEL RAW:
 23fe0ac:	41004b4f 4c433d35 44202c52 52204c45     OK.A5=CLR, DEL R
 23fe0bc:	453a5741 41005252 4c433d35 44202c52     AW:ERR.A5=CLR, D
 23fe0cc:	41204c45 57415235 00464e3a 433d3541     EL A5RAW:NF.A5=C
 23fe0dc:	202c524c 4e204453 6f440046 69746341     LR, SD NF.DoActi
 23fe0ec:	543a6e6f 4d354958 49585400 202c4d35     on:TXI5M.TXI5M, 
 23fe0fc:	45524c41 20594441 00544553 35495854     ALREADY SET.TXI5
 23fe10c:	4553204d 58540054 204d3549 4e45504f     M SET.TXI5M OPEN
 23fe11c:	52524520 49585400 203a4d35 6f6d6552      ERR.TXI5M: Remo
 23fe12c:	20646576 30315854 6946204d 5400656c     ved TX10M File.T
 23fe13c:	4d354958 4453202c 00464e20 63416f44     XI5M, SD NF.DoAc
 23fe14c:	6e6f6974 4958543a 004d3031 31495854     tion:TXI10M.TXI1
 23fe15c:	202c4d30 45524c41 20594441 00544553     0M, ALREADY SET.
 23fe16c:	31495854 53204d30 54005445 30314958     TXI10M SET.TXI10
 23fe17c:	504f204d 45204e45 54005252 4d354958     M OPEN ERR.TXI5M
 23fe18c:	6552203a 65766f6d 58542064 46204d35     : Removed TX5M F
 23fe19c:	00656c69 31495854 202c4d30 4e204453     ile.TXI10M, SD N
 23fe1ac:	6f440046 69746341 543a6e6f 35314958     F.DoAction:TXI15
 23fe1bc:	5854004d 4d353149 4c41202c 44414552     M.TXI15M, ALREAD
 23fe1cc:	45532059 58540054 4d353149 6552203a     Y SET.TXI15M: Re
 23fe1dc:	65766f6d 58542064 46204d35 00656c69     moved TX5M File.
 23fe1ec:	31495854 203a4d35 6f6d6552 20646576     TXI15M: Removed 
 23fe1fc:	30315854 6946204d 5400656c 35314958     TX10M File.TXI15
 23fe20c:	4553204d 58540054 4d353149 4453202c     M SET.TXI15M, SD
 23fe21c:	00464e20 63416f44 6e6f6974 4e4b553a      NF.DoAction:UKN
 23fe22c:	4d495300 746e493a 616e7265 4953006c     .SIM:Internal.SI
 23fe23c:	78453a4d 6e726574 53006c61 553a4d49     M:External.SIM:U
 23fe24c:	6f6e6b6e 255b6e77 53005d64 3a464d49     nknown[%d].SIMF:
 23fe25c:	61766e49 2064696c 53005a53 3a464d49     Invalid SZ.SIMF:
 23fe26c:	6e65704f 4d495300 443e2d46 4f3a6c65     Open.SIMF->Del:O
 23fe27c:	4953004b 3e2d464d 3a6c6544 00727245     K.SIMF->Del:Err.
 23fe28c:	464d4953 5b44493a 005d7325 45544e49     SIMF:ID[%s].INTE
 23fe29c:	4c414e52 4d495300 50413a46 754e3d4e     RNAL.SIMF:APN=Nu
 23fe2ac:	45206c6c 53007272 533a4d49 45207465     ll Err.SIM:Set E
 23fe2bc:	72657478 2d6c616e 004e5041 3a4d4953     xternal-APN.SIM:
 23fe2cc:	20746553 64657243 69746e65 00736c61     Set Credentials.
 23fe2dc:	4e504120 5d73255b 50552000 4d495300      APN[%s]. UP.SIM
 23fe2ec:	73553a46 616e7265 4e3d656d 206c6c75     F:Username=Null 
 23fe2fc:	00727245 464d4953 7361503a 3d647773     Err.SIMF:Passwd=
 23fe30c:	6c6c754e 72724520 4d495300 7465533a     Null Err.SIM:Set
 23fe31c:	74784520 616e7265 50552d6c 4d495300      External-UP.SIM
 23fe32c:	7465533a 74784520 616e7265 55412d6c     :Set External-AU
 23fe33c:	20200050 255b4e55 20005d73 5b575020     P.  UN[%s].  PW[
 23fe34c:	005d7325 464d4953 5b44493a 205d7325     %s].SIMF:ID[%s] 
 23fe35c:	00727245 464d4953 4c45443a 4d495320     Err.SIMF:DEL SIM
 23fe36c:	00444c4f 464d4953 4e45523a 20454d41     OLD.SIMF:RENAME 
 23fe37c:	4f525245 49530052 523a464d 4d414e45     ERROR.SIMF:RENAM
 23fe38c:	4b4f2045 21212100 42455220 20544f4f     E OK.!!! REBOOT 
 23fe39c:	00212121 3d3d3d3d 3d3d3d3d 3d3d3d3d     !!!.============
 23fe3ac:	3d3d3d3d 3d3d3d3d 2121003d 45532021     =========.!!! SE
 23fe3bc:	49532054 5245204d 20524f52 00212121     T SIM ERROR !!!.
 23fe3cc:	464d4953 45504f3a 5245204e 00524f52     SIMF:OPEN ERROR.
 23fe3dc:	3a4d4953 55204f4e 54414450 49462045     SIM:NO UPDATE FI
 23fe3ec:	5400454c 493a4958 0054494e 35495854     LE.TXI:INIT.TXI5
 23fe3fc:	6f46204d 00646e75 3a495854 31204d52     M Found.TXI:RM 1
 23fe40c:	54004d30 30314958 6f46204d 00646e75     0M.TXI10M Found.
 23fe41c:	3a495854 35204d52 5854004d 64253d49     TXI:RM 5M.TXI=%d
 23fe42c:	6157004d 20347469 69726553 43206c61     M.Wait4 Serial C
 23fe43c:	6f736e6f 4f00656c 3a44454c 62616e45     onsole.OLED:Enab
 23fe44c:	0064656c 44454c4f 7369443a 656c6261     led.OLED:Disable
 23fe45c:	43530064 616e453a 64656c62 52455300     d.SC:Enabled.SER
 23fe46c:	696e493a 45530074 4b4f3a52 4d534600     :Init.SER:OK.FSM
 23fe47c:	7070632e 3231363a 63727320 20262620     .cpp:612 src && 
 23fe48c:	2d637273 6c61633e 6361626c 424f006b     src->callback.OB
 23fe49c:	6f445f53 6954203a 4e20656d 63620056     S_Do: Time NV.bc
 23fe4ac:	70620073 66630063 67720072 74677200     s.bpc.cfr.rg.rgt
 23fe4bc:	70677200 00737700 77006477 67770067     .rgp.ws.wd.wg.wg
 23fe4cc:	70620064 74620031 68620031 70620031     d.bp1.bt1.bh1.bp
 23fe4dc:	74620032 68620032 68680032 74680031     2.bt2.bh2.hh1.ht
 23fe4ec:	74730031 68730031 74730031 68730032     1.st1.sh1.st2.sh
 23fe4fc:	52450032 44483a52 52203143 00646165     2.ERR:HDC1 Read.
 23fe50c:	31746468 68646800 64680031 68003274     hdt1.hdh1.hdt2.h
 23fe51c:	00326864 3174706c 70706c00 706c0031     dh2.lpt1.lpp1.lp
 23fe52c:	6c003274 00327070 00327468 00326868     t2.lpp2.ht2.hh2.
 23fe53c:	52204953 54455345 31767300 31697300     SI RESET.sv1.si1
 23fe54c:	31757300 786c7600 786c6200 00677300     .su1.vlx.blx.sg.
 23fe55c:	00723461 00326772 32746772 70677200     a4r.rg2.rgt2.rgp
 23fe56c:	35610032 6d700072 30317331 316d7000     2.a5r.pm1s10.pm1
 23fe57c:	00353273 73316d70 00303031 65316d70     s25.pm1s100.pm1e
 23fe58c:	70003031 3265316d 6d700035 30316531     10.pm1e25.pm1e10
 23fe59c:	69680030 74627700 67627700 6c740074     0.hi.wbt.wbgt.tl
 23fe5ac:	74007777 0074776c 656d7374 74003532     ww.tlwt.tsme25.t
 23fe5bc:	63656d73 6d737400 00637776 746d7374     smec.tsmvwc.tsmt
 23fe5cc:	736d7400 0031736d 6d736d74 74003273     .tmsms1.tmsms2.t
 23fe5dc:	736d736d 6d740033 34736d73 736d7400     msms3.tmsms4.tms
 23fe5ec:	0031746d 6d736d74 43003274 64253a53     mt1.tmsmt2.CS:%d
 23fe5fc:	3230252e 3a422064 252c6425 30252e64     .%02d B:%d,%d.%0
 23fe60c:	4c006432 2041524f 4c004b4f 2041524f     2d.LORA OK.LORA 
 23fe61c:	4c00464e 2041524f 54494e49 52524520     NF.LORA INIT ERR
 23fe62c:	524f4c00 53432041 5252452d 524f4c00     .LORA CS-ERR.LOR
 23fe63c:	6e492041 57007469 44646e69 20747369     A Init.WindDist 
 23fe64c:	74696e49 2e002928 72615000 6c636974     Init()...Particl
 23fe65c:	6f4e3a65 61655274 46007964 64255b53     e:NotReady.FS[%d
 23fe66c:	503e2d5d 4f204255 64255b4b 5346005d     ]->PUB OK[%d].FS
 23fe67c:	5d64255b 55503e2d 52452042 45520052     [%d]->PUB ERR.RE
 23fe68c:	5b59414c 2d5d7325 4255503e 004b4f20     LAY[%s]->PUB OK.
 23fe69c:	414c4552 73255b59 503e2d5d 45204255     RELAY[%s]->PUB E
 23fe6ac:	52005252 59414c45 50595420 64255b45     RR.RELAY TYPE[%d
 23fe6bc:	4e49205d 494c4156 32330044 00343600     ] INVALID.32.64.
 23fe6cc:	41534944 44454c42 414e4500 44454c42     DISABLED.ENABLED
 23fe6dc:	55525400 41460045 0045534c 4f464e49     .TRUE.FALSE.INFO
 23fe6ec:	284f445f 65640029 00646976 6f766564     _DO().devid.devo
 23fe6fc:	72660073 656d6565 7075006d 656d6974     s.freemem.uptime
 23fe70c:	72657600 4d534600 3035322d 76313237     .ver.FSM-250721v
 23fe71c:	64250031 626f0073 25006973 6f006d64     1.%ds.obsi.%dm.o
 23fe72c:	69747362 6e327400 72640074 6e007463     bsti.t2nt.drct.n
 23fe73c:	61007332 49440034 35205453 4944004d     2s.a4.DIST 5M.DI
 23fe74c:	31205453 52004d30 4e003247 35610053     ST 10M.RG2.NS.a5
 23fe75c:	42732500 2831584d 00297325 4d427325     .%sBMX1(%s).%sBM
 23fe76c:	25283258 25002973 50434d73 73250031     X2(%s).%sMCP1.%s
 23fe77c:	3250434d 4d732500 2f335043 00317467     MCP2.%sMCP3/gt1.
 23fe78c:	434d7325 672f3450 25003274 54485373     %sMCP4/gt2.%sSHT
 23fe79c:	73250031 32544853 48732500 00314344     1.%sSHT2.%sHDC1.
 23fe7ac:	44487325 25003243 53504c73 73250031     %sHDC2.%sLPS1.%s
 23fe7bc:	3253504c 48732500 00384849 49537325     LPS2.%sHIH8.%sSI
 23fe7cc:	56732500 004c4d45 4c427325 73250058     .%sVEML.%sBLX.%s
 23fe7dc:	36355341 25003030 574c5473 54732500     AS5600.%sTLW.%sT
 23fe7ec:	25004d53 534d5473 7325004d 25004948     SM.%sTMSM.%sHI.%
 23fe7fc:	54425773 57732500 20544742 4c472f57     sWBT.%sWBGT W/GL
 23fe80c:	0045424f 42577325 57205447 4c472f4f     OBE.%sWBGT WO/GL
 23fe81c:	0045424f 4d507325 51413532 52732500     OBE.%sPM25AQ.%sR
 23fe82c:	73252847 65730029 726f736e 64250073     G(%s).sensors.%d
 23fe83c:	2c64252c 484d6425 6f6c007a 6f006172     ,%d,%dMHz.lora.o
 23fe84c:	0064656c 70656373 25286e69 73002973     led.scepin(%s).s
 23fe85c:	53006563 704f3a44 49286e65 296f666e     ce.SD:Open(Info)
 23fe86c:	00525245 4f464e49 55503e2d 4b4f2042     ERR.INFO->PUB OK
 23fe87c:	5d64255b 464e4900 503e2d4f 45204255     [%d].INFO->PUB E
 23fe88c:	4e005252 503a5332 696c6275 4e006873     RR.N2S:Publish.N
 23fe89c:	453a5332 7974706d 53324e00 5d64255b     2S:Empty.N2S[%d]
 23fe8ac:	3e2d7325 3a425550 4e004b4f 255b5332     %s->PUB:OK.N2S[%
 23fe8bc:	73255d64 55503e2d 45523a42 00595254     d]%s->PUB:RETRY.
 23fe8cc:	5b53324e 255d6425 503e2d73 453a4255     N2S[%d]%s->PUB:E
 23fe8dc:	4e005252 4f3a5332 4e205342 65646565     RR.N2S:OBS Neede
 23fe8ec:	324e0064 424f3a53 55462053 4e004c4c     d.N2S:OBS FULL.N
 23fe8fc:	255b5332 3e2d5d64 3a524f42 00525245     2S[%d]->BOR:ERR.
 23fe90c:	2d53324e 45504f3e 52453a4e 45520052     N2S->OPEN:ERR.RE
 23fe91c:	2d59414c 53324e3e 706f4300 67697279     LAY->N2S.Copyrig
 23fe92c:	5b207468 35323032 555b205d 6576696e     ht [2025] [Unive
 23fe93c:	74697372 6f432079 726f7072 6f697461     rsity Corporatio
 23fe94c:	6f66206e 74412072 70736f6d 69726568     n for Atmospheri
 23fe95c:	65522063 72616573 005d6863 3a53324e     c Research].N2S:
 23fe96c:	73697845 4e007374 4e3a5332 00656e6f     Exists.N2S:None.
 23fe97c:	4e3a4643 7325204f 2b732500 43545300     CF:NO %s.%s+.STC
 23fe98c:	6156203a 0064696c 3a435453 746f4e20     : Valid.STC: Not
 23fe99c:	6c615620 25006469 44003d73 7463416f      Valid.%s=.DoAct
 23fe9ac:	006e6f69 63416f44 6e6f6974 004b4f3a     ion.DoAction:OK.
 23fe9bc:	63416f44 6e6f6974 5252453a 6e6f4300     DoAction:ERR.Con
 23fe9cc:	7463656e 57006465 65522053 73657266     nected.WS Refres
 23fe9dc:	65522068 72697571 45006465 203a5252     h Required.ERR: 
 23fe9ec:	43206f4e 6b636f6c 69614400 5220796c     No Clock.Daily R
 23fe9fc:	6f6f6265 65520074 746f6f62 00676e69     eboot.Rebooting.
 23fea0c:	206d2749 76696c41 57202165 003f7968     I'm Alive! Why?.
 23fea1c:	20776f4c 65776f50 50002172 7265776f     Low Power!.Power
 23fea2c:	20676e69 6e776f44 776f5000 52207265     ing Down.Power R
 23fea3c:	70612d65 65696c70 00000064              e-applied...

023fea48 <_ZTVN8particle11SPISettingsE>:
	...
 23fea50:	023e83b5 023e82ff 023e832f              ..>...>./.>.

023fea5c <_ZTV4File>:
	...
 23fea64:	023e832d 023e833d 023e835d 023e8357     -.>.=.>.].>.W.>.
 23fea74:	023e8301 023e851b 023e8351 023e834b     ..>...>.Q.>.K.>.
 23fea84:	023f9a05                                ..?.

023fea88 <_ZL5s_fwd>:
 23fea88:	7b777c63 c56f6bf2 2b670130 76abd7fe     c|w{.ko.0.g+...v
 23fea98:	7dc982ca f04759fa afa2d4ad c072a49c     ...}.YG.......r.
 23feaa8:	2693fdb7 ccf73f36 f1e5a534 1531d871     ...&6?..4...q.1.
 23feab8:	c323c704 9a059618 e2801207 75b227eb     ..#..........'.u
 23feac8:	1a2c8309 a05a6e1b b3d63b52 842fe329     ..,..nZ.R;..)./.
 23fead8:	ed00d153 5bb1fc20 39becb6a cf584c4a     S... ..[j..9JLX.
 23feae8:	fbaaefd0 85334d43 7f02f945 a89f3c50     ....CM3.E...P<..
 23feaf8:	8f40a351 f5389d92 21dab6bc d2f3ff10     Q.@...8....!....
 23feb08:	ec130ccd 1744975f 3d7ea7c4 73195d64     ...._.D...~=d].s
 23feb18:	dc4f8160 88902a22 14b8ee46 db0b5ede     `.O."*..F....^..
 23feb28:	0a3a32e0 5c240649 62acd3c2 79e49591     .2:.I.$\...b...y
 23feb38:	6d37c8e7 a94ed58d eaf4566c 08ae7a65     ..7m..N.lV..ez..
 23feb48:	2e2578ba c6b4a61c 1f74dde8 8a8bbd4b     .x%.......t.K...
 23feb58:	66b53e70 0ef60348 b9573561 9e1dc186     p>.fH...a5W.....
 23feb68:	1198f8e1 948ed969 e9871e9b df2855ce     ....i........U(.
 23feb78:	0d89a18c 6842e6bf 0f2d9941 16bb54b0     ......BhA.-..T..

023feb88 <_ZL5s_inv>:
 23feb88:	d56a0952 38a53630 9ea340bf fbd7f381     R.j.06.8.@......
 23feb98:	8239e37c 87ff2f9b 44438e34 cbe9dec4     |.9../..4.CD....
 23feba8:	32947b54 3d23c2a6 0b954cee 4ec3fa42     T{.2..#=.L..B..N
 23febb8:	66a12e08 b224d928 49a25b76 25d18b6d     ...f(.$.v[.Im..%
 23febc8:	64f6f872 16986886 cc5ca4d4 92b6655d     r..d.h....\.]e..
 23febd8:	5048706c dab9edfd 5746155e 849d8da7     lpHP....^.FW....
 23febe8:	00abd890 0ad3bc8c 0558e4f7 0645b3b8     ..........X...E.
 23febf8:	8f1e2cd0 020f3fca 03bdafc1 6b8a1301     .,...?.........k
 23fec08:	4111913a eadc674f cecff297 73e6b4f0     :..AOg.........s
 23fec18:	2274ac96 8535ade7 e837f9e2 6edf751c     ..t"..5...7..u.n
 23fec28:	711af147 89c5291d 0e62b76f 1bbe18aa     G..q.)..o.b.....
 23fec38:	4b3e56fc 2079d2c6 fec0db9a f45acd78     .V>K..y ....x.Z.
 23fec48:	33a8dd1f 31c70788 591012b1 5fec8027     ...3...1...Y'.._
 23fec58:	a97f5160 0d4ab519 9f7ae52d ef9cc993     `Q....J.-.z.....
 23fec68:	4d3be0a0 b0f52aae 3cbbebc8 61995383     ..;M.*.....<.S.a
 23fec78:	7e042b17 26d677ba 631469e1 7d0c2155     .+.~.w.&.i.cU!.}

023fec88 <_ZTV20Adafruit_BMP280_Temp>:
	...
 23fec90:	023f1623 023f1625 023f0dbb 023f1c4d     #.?.%.?...?.M.?.
 23feca0:	023f1641                                A.?.

023feca4 <_ZTV24Adafruit_BMP280_Pressure>:
	...
 23fecac:	023f1621 023f1633 023f0dbb 023f1e0d     !.?.3.?...?...?.
 23fecbc:	023f1689                                ..?.

023fecc0 <_ZL4font>:
 23fecc0:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
 23fecd0:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
 23fece0:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
 23fecf0:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
 23fed00:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
 23fed10:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
 23fed20:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
 23fed30:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
 23fed40:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
 23fed50:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
 23fed60:	00000000 5f000000 07000000 14000700     ......._........
 23fed70:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
 23fed80:	00502056 00030708 41221c00 22410000     V P......."A..A"
 23fed90:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
 23feda0:	08080800 00000808 20006060 02040810     ........``. ....
 23fedb0:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
 23fedc0:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
 23fedd0:	41314949 07091121 49494936 49494636     II1A!...6III6FII
 23fede0:	00001e29 00000014 00003440 22140800     ).......@4....."
 23fedf0:	14141441 41001414 02081422 06095901     A......A"....Y..
 23fee00:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
 23fee10:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
 23fee20:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
 23fee30:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
 23fee40:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
 23fee50:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
 23fee60:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
 23fee70:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
 23fee80:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
 23fee90:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
 23feea0:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
 23feeb0:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
 23feec0:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
 23feed0:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
 23feee0:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
 23feef0:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
 23fef00:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
 23fef10:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
 23fef20:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
 23fef30:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
 23fef40:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
 23fef50:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
 23fef60:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
 23fef70:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
 23fef80:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
 23fef90:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
 23fefa0:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
 23fefb0:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
 23fefc0:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
 23fefd0:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
 23fefe0:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
 23feff0:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
 23ff000:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
 23ff010:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
 23ff020:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
 23ff030:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
 23ff040:	00ff0000 ff101010 14141400 101000ff     ................
 23ff050:	10ff00ff f010f010 fc141414 f7141400     ................
 23ff060:	0000ff00 14ff00ff fc04f414 10171414     ................
 23ff070:	1f10101f 14141f10 10001f14 00f01010     ................
 23ff080:	1f000000 10101010 1010101f 0010f010     ................
 23ff090:	10ff0000 10101010 10101010 000010ff     ................
 23ff0a0:	0014ff00 ff00ff00 101f0000 fc000017     ................
 23ff0b0:	1414f404 14171017 f404f414 00ff0000     ................
 23ff0c0:	141414f7 14141414 14f700f7 14171414     ................
 23ff0d0:	101f1010 1414141f 101014f4 00f010f0     ................
 23ff0e0:	1f101f00 1f000000 00000014 000014fc     ................
 23ff0f0:	10f010f0 ff10ff10 ff141414 10101014     ................
 23ff100:	0000001f ff10f000 ffffffff f0f0f0f0     ................
 23ff110:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
 23ff120:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
 23ff130:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
 23ff140:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
 23ff150:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
 23ff160:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
 23ff170:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
 23ff180:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
 23ff190:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
 23ff1a0:	00000018 30001010 0101ff40 01011f00     .......0@.......
 23ff1b0:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....

023ff1c0 <_ZTV12Adafruit_GFX>:
	...
 23ff1d0:	023f2cf1 023f96bf 023e7881 023f26f9     .,?...?..x>..&?.
 23ff1e0:	023f26fb 023f272d 023f2709 023f271b     .&?.-'?..'?..'?.
 23ff1f0:	023f263b 023f26f9 023f2923 023f2921     ;&?..&?.#)?.!)?.
 23ff200:	023f2745 023f2783 023f27bd 023f2803     E'?..'?..'?..(?.
 23ff210:	023f281f 023f28a1 3950434d 00383038     .(?..(?.MCP9808.

023ff220 <_ZTV16Adafruit_MCP9808>:
	...
 23ff228:	023f33b5 023f33b7 023f0dbb 023f3525     .3?..3?...?.%5?.
 23ff238:	023f33c5                                .3?.

023ff23c <_ZL12splash1_data>:
 23ff23c:	00000000 00800100 00000000 00000000     ................
 23ff24c:	00008003 00000000 07000000 000000c0     ................
 23ff25c:	00000000 c0070000 00000000 00000000     ................
 23ff26c:	00c00f00 00000000 00000000 0000e01f     ................
 23ff27c:	00000000 1f000000 000000e0 00000000     ................
 23ff28c:	e03f0000 00000000 00000000 00f03f00     ..?..........?..
	...
 23ff2a4:	0000f07f 00000000 7ff81f00 000000f0     ................
 23ff2b4:	00000000 f07ffe3f 00000000 3f000000     ....?..........?
 23ff2c4:	00f07fff 00000000 ff1f0000 0000e0fb     ................
 23ff2d4:	00000000 f9ff0f00 0000c0ff 00000000     ................
 23ff2e4:	fff9ff0f 000000f8 07000000 fffff1ff     ................
 23ff2f4:	00000000 fc030000 80ffff73 00000000     ........s.......
 23ff304:	3ffe0100 0080ffff 00000000 0f1eff00     ...?............
 23ff314:	000000ff 00000000 fc1ffe7f 00000000     ................
 23ff324:	3f000000 00f8ffff 00000000 df0f0000     ...?............
 23ff334:	0000e0ff 00000000 ff191f00 000000c0     ................
 23ff344:	00000000 00ff3c3f 00000000 7e000000     ....?<.........~
 23ff354:	0000f87c 00000000 fe7f0000 0000007c     |...........|...
 23ff364:	00000000 fcffff00 00000000 00000000     ................
 23ff374:	00feffff 00000000 ff000000 0000feff     ................
 23ff384:	00000000 efff0100 000000fe 00000000     ................
 23ff394:	fecfff01 00000000 03000000 00fe07ff     ................
 23ff3a4:	00000000 fc030000 0000fe07 00000000     ................
 23ff3b4:	03f00300 000000fe 00000000 fe008001     ................
	...
 23ff3cc:	007e0000 00000000 00000000 00003e00     ..~..........>..
	...
 23ff3e4:	0000000c 07000000 00fc0080 00c00300     ................
 23ff3f4:	80070000 0000fc01 0000c003 01800700     ................
 23ff404:	030000fc 000000c0 e0018007 1e000000     ................
 23ff414:	07000000 00e00180 001e0000 9ff7e37f     ................
 23ff424:	78e7fdf9 ffc0df7b fdbffff7 7b78fffd     ...x{.........x{
 23ff434:	f7ffc0df fdfdbfff df7b78ff 87f7f0c0     .........x{.....
 23ff444:	ffe13dbc 00de7b78 bc87f7f0 78f0e13d     .=..x{......=..x
 23ff454:	0000de7b 3d8087f7 7b78e0e1 f77f00de     {......=..x{....
 23ff464:	e1fd9f87 de7b78e0 87f7ff00 e0e1fdbf     .....x{.........
 23ff474:	00de7b78 bc87f7f0 78e0e13d f000de7b     x{......=..x{...
 23ff484:	3dbc87f7 7b78e0e1 f7f000de e13dbc87     ...=..x{......=.
 23ff494:	de7b78e0 fff7ff00 e0e1fdbf c0dffb7f     .x{.............
 23ff4a4:	bffff7ff 7fe0e1fd 7cc0dffb 3d9ff3f3     ...........|...=
 23ff4b4:	7b3ee0e1 0000c0cf 00000000 00000000     ..>{............
 23ff4c4:	ffffff00 ffffffff c0ffffff ffffffff     ................
 23ff4d4:	11db68fd ffc0311a fdffffff 6afb5a2b     .h...1......+Z.j
 23ff4e4:	ffffc0ef 4bfdffff 331a3b5b ffffffc0     .......K[;.3....
 23ff4f4:	5b6bfdff c0fd6adb                       ..k[.j..

023ff4fc <_ZL12splash2_data>:
 23ff4fc:	00600000 00000000 00000000 00000000     ..`.............
 23ff50c:	0000e000 00000000 00000000 01000000     ................
 23ff51c:	000000e0 00000000 00000000 f0010000     ................
	...
 23ff538:	00f00300 00000000 00000000 00000000     ................
 23ff548:	0000f007 00000000 00000000 07000000     ................
 23ff558:	000000f8 00000000 00000000 f80f0000     ................
 23ff568:	03000000 007e00c0 00e00100 00f80f7f     ......~.........
 23ff578:	c0030000 0000fe00 ff00e001 0000f8ef     ................
 23ff588:	00c00300 010000fe ffff00e0 000000f8     ................
 23ff598:	f000c003 0f000000 7ffe7f00 030000c0     ................
 23ff5a8:	00f000c0 000f0000 f87ffe3f cffbf13f     ........?...?...
 23ff5b8:	bcf3fefc 1fe0ef3d 7fff7ffe fedffffb     ....=...........
 23ff5c8:	3dbcfffe c61fe0ef fb7fffff fefedfff     ...=............
 23ff5d8:	ef3dbcff c7e30fe0 c37b78fe fff01ede     ..=......x{.....
 23ff5e8:	00ef3dbc fc87ff07 dec37b78 3cf8f01e     .=......x{.....<
 23ff5f8:	0100ef3d 00f0ffff 1ec0c37b 3d3cf0f0     =.......{.....<=
 23ff608:	f30100ef fb3fe07f f0fecfc3 ef3d3cf0     ......?......<=.
 23ff618:	3fe30300 c3fb7f80 f0f0fedf 00ef3d3c     ...?........<=..
 23ff628:	003ce707 dec37b78 3cf0f01e 0700ef3d     ..<.x{.....<=...
 23ff638:	7800beff 1edec37b 3d3cf0f0 ff0700ef     ...x{.....<=....
 23ff648:	7b7800fe f01edec3 ef3d3cf0 feff0f00     ..x{.....<=.....
 23ff658:	fffb7f00 f0f0fedf e0effd3f 00ffff0f     ........?.......
 23ff668:	dffffb7f 3ff0f0fe 0fe0effd 3e00fff9     .......?.......>
 23ff678:	9ecff979 3d1ff0f0 f11fe0e7 000000ff     y......=........
	...
 23ff690:	ff801f00 ffff7f00 ffffffff e0ffffff     ................
 23ff6a0:	007f001c ffffff7f 886db4fe 00e0188d     ..........m.....
 23ff6b0:	7f001f00 feffffff b57dad95 0000e077     ..........}.w...
 23ff6c0:	ff7f000f a5feffff 198d9dad 060000e0     ................
 23ff6d0:	ffff7f00 adb5feff e07eb5ed              ..........~.

023ff6dc <_ZTV16Adafruit_SSD1306>:
	...
 23ff6e4:	023f3aa9 023f3ac1 023f2cf1 023f96bf     .:?..:?..,?...?.
 23ff6f4:	023f3ad5 023f26f9 023f26fb 023f272d     .:?..&?..&?.-'?.
 23ff704:	023f2709 023f271b 023f263b 023f26f9     .'?..'?.;&?..&?.
 23ff714:	023f2923 023f3c73 023f432f 023f42e1     #)?.s<?./C?..B?.
 23ff724:	023f27bd 023f2803 023f281f 023f28a1     .'?..(?..(?..(?.

023ff734 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
 23ff734:	e0c08000 fefcf8f0                       ........

023ff73c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
 23ff73c:	07030100 7f3f1f0f                       ......?.

023ff744 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
 23ff744:	a880d5ae                                ....

023ff748 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
 23ff748:	8d4000d3                                ..@.

023ff74c <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
 23ff74c:	c8a10020                                 ...

023ff750 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
 23ff750:	a6a440db                                 .@....

023ff756 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
 23ff756:	21ff0022                                 "..!..

023ff75c <CSWTCH.30>:
 23ff75c:	00c80064 03200190 ffffffff ffffffff     d..... .........
 23ff76c:	ffff0032 ffffffff 00000019              2...........

023ff778 <CSWTCH.35>:
 23ff778:	3f800000 40000000 3e000000 3e800000     ...?...@...>...>

023ff788 <_ZTV15RHGenericDriver>:
	...
 23ff790:	023f4b09 023e7881 023e7881 023e7881     .K?..x>..x>..x>.
 23ff7a0:	023e7881 023f4b0d 023f4b1f 023f4ba5     .x>..K?..K?..K?.
 23ff7b0:	023f4b7d 023f4bc9 023f4b29 023f4b31     }K?..K?.)K?.1K?.
 23ff7c0:	023f4b35 023f4b39 023f4b3d 023f4b41     5K?.9K?.=K?.AK?.
 23ff7d0:	023f4b2d 023f4b4d 023f4b51 023f4b55     -K?.MK?.QK?.UK?.
 23ff7e0:	023f4b59 023f4b5d 023f4b63 023f4b67     YK?.]K?.cK?.gK?.
 23ff7f0:	023f4b29 023f4b6b 023f4b71 023f4b77     )K?.kK?.qK?.wK?.

023ff800 <_ZTV12RHGenericSPI>:
	...
 23ff808:	023e7881 023f4c29 023f4c2b 023e7881     .x>.)L?.+L?..x>.
 23ff818:	023e7881 023f4c33 023f4c37 023f4c3b     .x>.3L?.7L?.;L?.
 23ff828:	023f4c2d 023f4c2f 023f4c31              -L?./L?.1L?.

023ff834 <_ZTV13RHHardwareSPI>:
	...
 23ff83c:	023f4cb1 023f4cc5 023f4cd3 023f4ce1     .L?..L?..L?..L?.
 23ff84c:	023f4d4d 023f4c33 023f4c37 023f4c3b     MM?.3L?.7L?.;L?.
 23ff85c:	023f4d5b 023f4d6f 023f4c55              [M?.oM?.UL?.

023ff868 <_ZTV11RHSPIDriver>:
	...
 23ff870:	023f4d8d 023e7881 023e7881 023e7881     .M?..x>..x>..x>.
 23ff880:	023e7881 023f4b0d 023f4b1f 023f4ba5     .x>..K?..K?..K?.
 23ff890:	023f4b7d 023f4bc9 023f4b29 023f4b31     }K?..K?.)K?.1K?.
 23ff8a0:	023f4b35 023f4b39 023f4b3d 023f4b41     5K?.9K?.=K?.AK?.
 23ff8b0:	023f4b2d 023f4b4d 023f4b51 023f4b55     -K?.MK?.QK?.UK?.
 23ff8c0:	023f4b59 023f4b5d 023f4b63 023f4b67     YK?.]K?.cK?.gK?.
 23ff8d0:	023f4b29 023f4b6b 023f4b71 023f4b77     )K?.kK?.qK?.wK?.

023ff8e0 <_ZL18MODEM_CONFIG_TABLE>:
 23ff8e0:	92047472 94480474 0cc47804              rt..t.H..x..

023ff8ec <_ZTV7RH_RF95>:
	...
 23ff8f4:	023f53a1 023f5257 023f4f51 023f5293     .S?.WR?.QO?..R?.
 23ff904:	023f4f09 023f4b0d 023f4b1f 023f4ba5     .O?..K?..K?..K?.
 23ff914:	023f4b7d 023f4bc9 023f4f0d 023f4b31     }K?..K?..O?.1K?.
 23ff924:	023f4b35 023f4b39 023f4b3d 023f4b41     5K?.9K?.=K?.AK?.
 23ff934:	023f4b2d 023f4b4d 023f4b51 023f4b55     -K?.MK?.QK?.UK?.
 23ff944:	023f4b59 023f4b5d 023f4b63 023f4b67     YK?.]K?.cK?.gK?.
 23ff954:	023f4f37 023f4b6b 023f4b71 023f4b77     7O?.kK?.qK?.wK?.

023ff964 <_ZL11daysInMonth>:
 23ff964:	1e1f1c1f 1f1f1e1f 001e1f1e              ............

023ff970 <_ZTVN5spark13CellularClassE>:
	...
 23ff978:	023f8403 023f83f9 023f83ef 023f83bd     ..?...?...?...?.
 23ff988:	023e8409 023e8415 023f93f5 023f93fd     ..>...>...?...?.
 23ff998:	023f83e3 023f83db 023f83d1 023f83c7     ..?...?...?...?.
 23ff9a8:	023f9549 023f942d 023f9435 006e616e     I.?.-.?.5.?.nan.
 23ff9b8:	00666e69 0066766f                       inf.ovf.

023ff9c0 <_ZTV14CellularSignal>:
	...
 23ff9c8:	023f8491 023f84b9 023f8493 023f84c9     ..?...?...?...?.
 23ff9d8:	023f84fd 023f8529 023f855d 023f8721     ..?.).?.].?.!.?.
 23ff9e8:	023f8497 023f84b3 fffffffc 00000000     ..?...?.........
 23ff9f8:	023f876d                                m.?.

023ff9fc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffa04:	023f878d 023f8793 023f87d1 023f87a1     ..?...?...?...?.
 23ffa14:	023f878f                                ..?.

023ffa18 <_ZTVN5spark13EthernetClassE>:
	...
 23ffa20:	023f8ddb 023f8dd1 023f8dc7 023f8dbd     ..?...?...?...?.
 23ffa30:	023f8db1 023f8da5 023f93f5 023f93fd     ..?...?...?...?.
 23ffa40:	023f8d99 023f8d91 023f8d87 023f8d7d     ..?...?...?.}.?.
 23ffa50:	023f9549 023f942d 023f9435              I.?.-.?.5.?.

023ffa5c <_ZTV7TwoWire>:
	...
 23ffa64:	023f8df9 023f8e43 023f8e1b 023f8dfb     ..?.C.?...?...?.
 23ffa74:	023f8e23 023f8e2b 023f8e33 023f8e3b     #.?.+.?.3.?.;.?.
 23ffa84:	023f9a05                                ..?.

023ffa88 <_ZTV9IPAddress>:
	...
 23ffa90:	023f900d 023f8ffd 023f8fff 25007525     ..?...?...?.%u.%
 23ffaa0:	666c2a2e 30257500 00007834              .*lf.u%04x..

023ffaac <_ZTVN5spark16JSONBufferWriterE>:
	...
 23ffab4:	023f90ed 023f90ef 023f90fd 023f9123     ..?...?...?.#.?.
 23ffac4:	00707061                                app.

023ffac8 <CSWTCH.165>:
 23ffac8:	1007aef4 1007aeb8 1007af98 1007af14     ................

023ffad8 <_ZTVN5spark12NetworkClassE>:
	...
 23ffae0:	023f93b5 023f93bf 023f93c9 023f93d3     ..?...?...?...?.
 23ffaf0:	023f93dd 023f93e9 023f93f5 023f93fd     ..?...?...?...?.
 23ffb00:	023f9405 023f9411 023f9419 023f9423     ..?...?...?.#.?.
 23ffb10:	023f9549 023f942d 023f9435              I.?.-.?.5.?.

023ffb1c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 23ffb1c:	18100800 38302820 252d5925 64252d6d     .... (08%Y-%m-%d
 23ffb2c:	3a482554 253a4d25 007a2553 74637361     T%H:%M:%S%z.asct
 23ffb3c:	00656d69                                ime.

023ffb40 <_ZTV11USARTSerial>:
	...
 23ffb48:	023f9dc5 023f9e31 023f9e09 023f96bf     ..?.1.?...?...?.
 23ffb58:	023f9dd9 023f9df5 023f9de7 023f9e03     ..?...?...?...?.
 23ffb68:	023f9a05 023f9dc7 023f9dcb              ..?...?...?.

023ffb74 <_ZTV9USBSerial>:
	...
 23ffb7c:	023f9e75 023f9edd 023f9eb3 023f96bf     u.?...?...?...?.
 23ffb8c:	023f9ea5 023f9e77 023f9e87 023f9ed7     ..?.w.?...?...?.
 23ffb9c:	023f9a05 023f9e97 023f9e6f              ..?...?.o.?.

023ffba8 <_ZTVN5spark9WiFiClassE>:
	...
 23ffbb0:	023f9fdb 023f9fd1 023f9fc7 023f9f7d     ..?...?...?.}.?.
 23ffbc0:	023f9fbb 023f9faf 023f93f5 023f93fd     ..?...?...?...?.
 23ffbd0:	023f9fa3 023f9f9b 023f9f91 023f9f87     ..?...?...?...?.
 23ffbe0:	023f9549 023f942d 023f9435              I.?.-.?.5.?.

023ffbec <_ZSt7nothrow>:
 23ffbec:	00000000                                ....

023ffbf0 <atanhi>:
 23ffbf0:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
 23ffc00:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

023ffc10 <atanlo>:
 23ffc10:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
 23ffc20:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

023ffc30 <CSWTCH.8>:
 23ffc30:	54442d18 bfe921fb 7f3321d2 4002d97c     .-DT.!...!3.|..@
 23ffc40:	7f3321d2 c002d97c                       .!3.|...

023ffc48 <CSWTCH.9>:
 23ffc48:	00000000 80000000 54442d18 400921fb     .........-DT.!.@
 23ffc58:	54442d18 c00921fb 00000000              .-DT.!......

023ffc64 <npio2_hw>:
 23ffc64:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
 23ffc74:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
 23ffc84:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
 23ffc94:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
 23ffca4:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
 23ffcb4:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
 23ffcc4:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
 23ffcd4:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

023ffce4 <two_over_pi>:
 23ffce4:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
 23ffcf4:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
 23ffd04:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
 23ffd14:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
 23ffd24:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
 23ffd34:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
 23ffd44:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
 23ffd54:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
 23ffd64:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
 23ffd74:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
 23ffd84:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
 23ffd94:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
 23ffda4:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
 23ffdb4:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
 23ffdc4:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
 23ffdd4:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
 23ffde4:	0060e27b 00c08c6b 00000000              {.`.k.......

023ffdf0 <PIo2>:
 23ffdf0:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
 23ffe00:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
 23ffe10:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
 23ffe20:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

023ffe30 <init_jk>:
 23ffe30:	00000002 00000003 00000004 00000006     ................

023ffe40 <TWO52>:
 23ffe40:	00000000 43300000 00000000 c3300000     ......0C......0.
 23ffe50:	4e454552 616d2054 636f6c6c 63757320     REENT malloc suc
 23ffe60:	64656563 2f006465 2f706d74 6b6e656a     ceeded./tmp/jenk
 23ffe70:	2d736e69 2d434347 702d3031 6c657069     ins-GCC-10-pipel
 23ffe80:	2d656e69 325f3834 31303230 5f343231     ine-48_20201124_
 23ffe90:	36303631 36303831 732f3933 6e2f6372     1606180639/src/n
 23ffea0:	696c7765 656e2f62 62696c77 62696c2f     ewlib/newlib/lib
 23ffeb0:	74732f63 62696c64 6e61722f 00632e64     c/stdlib/rand.c.

023ffec0 <_ctype_>:
 23ffec0:	20202000 20202020 28282020 20282828     .         ((((( 
 23ffed0:	20202020 20202020 20202020 20202020                     
 23ffee0:	10108820 10101010 10101010 10101010      ...............
 23ffef0:	04040410 04040404 10040404 10101010     ................
 23fff00:	41411010 41414141 01010101 01010101     ..AAAAAA........
 23fff10:	01010101 01010101 01010101 10101010     ................
 23fff20:	42421010 42424242 02020202 02020202     ..BBBBBB........
 23fff30:	02020202 02020202 02020202 10101010     ................
 23fff40:	00000020 00000000 00000000 00000000      ...............
	...

023fffc1 <link_const_data_end>:
 23fffc1:	00          	.byte	0x00
	...

023fffc4 <link_constructors_location>:
 23fffc4:	023eeed9 	.word	0x023eeed9
 23fffc8:	023f4d7d 	.word	0x023f4d7d
 23fffcc:	023f83ad 	.word	0x023f83ad
 23fffd0:	023f8461 	.word	0x023f8461
 23fffd4:	023f8d6d 	.word	0x023f8d6d
 23fffd8:	023f8de5 	.word	0x023f8de5
 23fffdc:	023f8f8d 	.word	0x023f8f8d
 23fffe0:	023f93a5 	.word	0x023f93a5
 23fffe4:	023f955d 	.word	0x023f955d
 23fffe8:	023f97f5 	.word	0x023f97f5
 23fffec:	023f9b99 	.word	0x023f9b99
 23ffff0:	023f9db1 	.word	0x023f9db1
 23ffff4:	023f9fe5 	.word	0x023f9fe5
