
/Users/rjbubon/Documents/Particle/3D-PAWS-Muon-FullStation/target/6.3.3/msom/3D-PAWS-Muon-FullStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085e2000  085e2000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085e2018  085e2018  00002018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  085e20a4  085e20a4  000020a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .dynalib      00000008  023e22b0  085e20b0  000022b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .psram_text   0001dd40  023e22b8  085e20b8  000022b8  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  5 .data_alt     00000000  023ffff8  023ffff8  00030000  2**0
                  CONTENTS
  6 .bss_alt      00000000  023ffff8  023ffff8  00030000  2**0
                  CONTENTS
  7 .data         00000144  1006a0e0  085ffdf8  0002a0e0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00010dd4  1006a228  1006a228  0003a228  2**3
                  ALLOC
  9 .secure_ram_text 00000000  1007d000  1007d000  00030000  2**0
                  CONTENTS
 10 .backup       00000004  1007b400  085fff3c  0002b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .module_info_suffix_align 00000078  085fff40  085fff40  0002ff40  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0002ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0002fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   004a9bb9  00000000  00000000  00030000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00046a17  00000000  00000000  004d9bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    000ad28b  00000000  00000000  005205d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00006b48  00000000  00000000  005cd85b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0001a8a0  00000000  00000000  005d43a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000c39d9  00000000  00000000  005eec43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00100adb  00000000  00000000  006b261c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0016794e  00000000  00000000  007b30f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00014d48  00000000  00000000  0091aa48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085e2018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85e2018:	4813      	ldr	r0, [pc, #76]	; (85e2068 <module_user_pre_init+0x50>)
 85e201a:	4914      	ldr	r1, [pc, #80]	; (85e206c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85e201c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85e201e:	4288      	cmp	r0, r1
 85e2020:	d005      	beq.n	85e202e <module_user_pre_init+0x16>
 85e2022:	4a13      	ldr	r2, [pc, #76]	; (85e2070 <module_user_pre_init+0x58>)
 85e2024:	4282      	cmp	r2, r0
 85e2026:	d002      	beq.n	85e202e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85e2028:	4b12      	ldr	r3, [pc, #72]	; (85e2074 <module_user_pre_init+0x5c>)
 85e202a:	1a12      	subs	r2, r2, r0
 85e202c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85e202e:	4812      	ldr	r0, [pc, #72]	; (85e2078 <module_user_pre_init+0x60>)
 85e2030:	4a12      	ldr	r2, [pc, #72]	; (85e207c <module_user_pre_init+0x64>)
 85e2032:	2100      	movs	r1, #0
 85e2034:	4b12      	ldr	r3, [pc, #72]	; (85e2080 <module_user_pre_init+0x68>)
 85e2036:	1a12      	subs	r2, r2, r0
 85e2038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85e203a:	4812      	ldr	r0, [pc, #72]	; (85e2084 <module_user_pre_init+0x6c>)
 85e203c:	4912      	ldr	r1, [pc, #72]	; (85e2088 <module_user_pre_init+0x70>)
 85e203e:	4288      	cmp	r0, r1
 85e2040:	d005      	beq.n	85e204e <module_user_pre_init+0x36>
 85e2042:	4a12      	ldr	r2, [pc, #72]	; (85e208c <module_user_pre_init+0x74>)
 85e2044:	4282      	cmp	r2, r0
 85e2046:	d002      	beq.n	85e204e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85e2048:	4b0a      	ldr	r3, [pc, #40]	; (85e2074 <module_user_pre_init+0x5c>)
 85e204a:	1a12      	subs	r2, r2, r0
 85e204c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85e204e:	4810      	ldr	r0, [pc, #64]	; (85e2090 <module_user_pre_init+0x78>)
 85e2050:	4910      	ldr	r1, [pc, #64]	; (85e2094 <module_user_pre_init+0x7c>)
 85e2052:	4288      	cmp	r0, r1
 85e2054:	d005      	beq.n	85e2062 <module_user_pre_init+0x4a>
 85e2056:	4a10      	ldr	r2, [pc, #64]	; (85e2098 <module_user_pre_init+0x80>)
 85e2058:	4282      	cmp	r2, r0
 85e205a:	d002      	beq.n	85e2062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85e205c:	4b05      	ldr	r3, [pc, #20]	; (85e2074 <module_user_pre_init+0x5c>)
 85e205e:	1a12      	subs	r2, r2, r0
 85e2060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85e2062:	4801      	ldr	r0, [pc, #4]	; (85e2068 <module_user_pre_init+0x50>)
 85e2064:	bd08      	pop	{r3, pc}
 85e2066:	bf00      	nop
 85e2068:	1006a0e0 	.word	0x1006a0e0
 85e206c:	085ffdf8 	.word	0x085ffdf8
 85e2070:	1006a224 	.word	0x1006a224
 85e2074:	10110d2d 	.word	0x10110d2d
 85e2078:	1006a228 	.word	0x1006a228
 85e207c:	1007affc 	.word	0x1007affc
 85e2080:	10110ea1 	.word	0x10110ea1
 85e2084:	023e22b0 	.word	0x023e22b0
 85e2088:	085e20b0 	.word	0x085e20b0
 85e208c:	023e22b8 	.word	0x023e22b8
 85e2090:	023e22b8 	.word	0x023e22b8
 85e2094:	085e20b8 	.word	0x085e20b8
 85e2098:	023ffff8 	.word	0x023ffff8

085e209c <dynalib_preinit>:
 85e209c:	085e2019 00000000                       . ^.....

Disassembly of section .psram_text:

023e22b8 <__aeabi_drsub>:
 23e22b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23e22bc:	e002      	b.n	23e22c4 <__adddf3>
 23e22be:	bf00      	nop

023e22c0 <__aeabi_dsub>:
 23e22c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023e22c4 <__adddf3>:
 23e22c4:	b530      	push	{r4, r5, lr}
 23e22c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23e22ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23e22ce:	ea94 0f05 	teq	r4, r5
 23e22d2:	bf08      	it	eq
 23e22d4:	ea90 0f02 	teqeq	r0, r2
 23e22d8:	bf1f      	itttt	ne
 23e22da:	ea54 0c00 	orrsne.w	ip, r4, r0
 23e22de:	ea55 0c02 	orrsne.w	ip, r5, r2
 23e22e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23e22e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23e22ea:	f000 80e2 	beq.w	23e24b2 <__adddf3+0x1ee>
 23e22ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23e22f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23e22f6:	bfb8      	it	lt
 23e22f8:	426d      	neglt	r5, r5
 23e22fa:	dd0c      	ble.n	23e2316 <__adddf3+0x52>
 23e22fc:	442c      	add	r4, r5
 23e22fe:	ea80 0202 	eor.w	r2, r0, r2
 23e2302:	ea81 0303 	eor.w	r3, r1, r3
 23e2306:	ea82 0000 	eor.w	r0, r2, r0
 23e230a:	ea83 0101 	eor.w	r1, r3, r1
 23e230e:	ea80 0202 	eor.w	r2, r0, r2
 23e2312:	ea81 0303 	eor.w	r3, r1, r3
 23e2316:	2d36      	cmp	r5, #54	; 0x36
 23e2318:	bf88      	it	hi
 23e231a:	bd30      	pophi	{r4, r5, pc}
 23e231c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23e2320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23e2324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23e2328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23e232c:	d002      	beq.n	23e2334 <__adddf3+0x70>
 23e232e:	4240      	negs	r0, r0
 23e2330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e2334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23e2338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23e233c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23e2340:	d002      	beq.n	23e2348 <__adddf3+0x84>
 23e2342:	4252      	negs	r2, r2
 23e2344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e2348:	ea94 0f05 	teq	r4, r5
 23e234c:	f000 80a7 	beq.w	23e249e <__adddf3+0x1da>
 23e2350:	f1a4 0401 	sub.w	r4, r4, #1
 23e2354:	f1d5 0e20 	rsbs	lr, r5, #32
 23e2358:	db0d      	blt.n	23e2376 <__adddf3+0xb2>
 23e235a:	fa02 fc0e 	lsl.w	ip, r2, lr
 23e235e:	fa22 f205 	lsr.w	r2, r2, r5
 23e2362:	1880      	adds	r0, r0, r2
 23e2364:	f141 0100 	adc.w	r1, r1, #0
 23e2368:	fa03 f20e 	lsl.w	r2, r3, lr
 23e236c:	1880      	adds	r0, r0, r2
 23e236e:	fa43 f305 	asr.w	r3, r3, r5
 23e2372:	4159      	adcs	r1, r3
 23e2374:	e00e      	b.n	23e2394 <__adddf3+0xd0>
 23e2376:	f1a5 0520 	sub.w	r5, r5, #32
 23e237a:	f10e 0e20 	add.w	lr, lr, #32
 23e237e:	2a01      	cmp	r2, #1
 23e2380:	fa03 fc0e 	lsl.w	ip, r3, lr
 23e2384:	bf28      	it	cs
 23e2386:	f04c 0c02 	orrcs.w	ip, ip, #2
 23e238a:	fa43 f305 	asr.w	r3, r3, r5
 23e238e:	18c0      	adds	r0, r0, r3
 23e2390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23e2394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23e2398:	d507      	bpl.n	23e23aa <__adddf3+0xe6>
 23e239a:	f04f 0e00 	mov.w	lr, #0
 23e239e:	f1dc 0c00 	rsbs	ip, ip, #0
 23e23a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 23e23a6:	eb6e 0101 	sbc.w	r1, lr, r1
 23e23aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23e23ae:	d31b      	bcc.n	23e23e8 <__adddf3+0x124>
 23e23b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23e23b4:	d30c      	bcc.n	23e23d0 <__adddf3+0x10c>
 23e23b6:	0849      	lsrs	r1, r1, #1
 23e23b8:	ea5f 0030 	movs.w	r0, r0, rrx
 23e23bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23e23c0:	f104 0401 	add.w	r4, r4, #1
 23e23c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23e23c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23e23cc:	f080 809a 	bcs.w	23e2504 <__adddf3+0x240>
 23e23d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23e23d4:	bf08      	it	eq
 23e23d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23e23da:	f150 0000 	adcs.w	r0, r0, #0
 23e23de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23e23e2:	ea41 0105 	orr.w	r1, r1, r5
 23e23e6:	bd30      	pop	{r4, r5, pc}
 23e23e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23e23ec:	4140      	adcs	r0, r0
 23e23ee:	eb41 0101 	adc.w	r1, r1, r1
 23e23f2:	3c01      	subs	r4, #1
 23e23f4:	bf28      	it	cs
 23e23f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23e23fa:	d2e9      	bcs.n	23e23d0 <__adddf3+0x10c>
 23e23fc:	f091 0f00 	teq	r1, #0
 23e2400:	bf04      	itt	eq
 23e2402:	4601      	moveq	r1, r0
 23e2404:	2000      	moveq	r0, #0
 23e2406:	fab1 f381 	clz	r3, r1
 23e240a:	bf08      	it	eq
 23e240c:	3320      	addeq	r3, #32
 23e240e:	f1a3 030b 	sub.w	r3, r3, #11
 23e2412:	f1b3 0220 	subs.w	r2, r3, #32
 23e2416:	da0c      	bge.n	23e2432 <__adddf3+0x16e>
 23e2418:	320c      	adds	r2, #12
 23e241a:	dd08      	ble.n	23e242e <__adddf3+0x16a>
 23e241c:	f102 0c14 	add.w	ip, r2, #20
 23e2420:	f1c2 020c 	rsb	r2, r2, #12
 23e2424:	fa01 f00c 	lsl.w	r0, r1, ip
 23e2428:	fa21 f102 	lsr.w	r1, r1, r2
 23e242c:	e00c      	b.n	23e2448 <__adddf3+0x184>
 23e242e:	f102 0214 	add.w	r2, r2, #20
 23e2432:	bfd8      	it	le
 23e2434:	f1c2 0c20 	rsble	ip, r2, #32
 23e2438:	fa01 f102 	lsl.w	r1, r1, r2
 23e243c:	fa20 fc0c 	lsr.w	ip, r0, ip
 23e2440:	bfdc      	itt	le
 23e2442:	ea41 010c 	orrle.w	r1, r1, ip
 23e2446:	4090      	lslle	r0, r2
 23e2448:	1ae4      	subs	r4, r4, r3
 23e244a:	bfa2      	ittt	ge
 23e244c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23e2450:	4329      	orrge	r1, r5
 23e2452:	bd30      	popge	{r4, r5, pc}
 23e2454:	ea6f 0404 	mvn.w	r4, r4
 23e2458:	3c1f      	subs	r4, #31
 23e245a:	da1c      	bge.n	23e2496 <__adddf3+0x1d2>
 23e245c:	340c      	adds	r4, #12
 23e245e:	dc0e      	bgt.n	23e247e <__adddf3+0x1ba>
 23e2460:	f104 0414 	add.w	r4, r4, #20
 23e2464:	f1c4 0220 	rsb	r2, r4, #32
 23e2468:	fa20 f004 	lsr.w	r0, r0, r4
 23e246c:	fa01 f302 	lsl.w	r3, r1, r2
 23e2470:	ea40 0003 	orr.w	r0, r0, r3
 23e2474:	fa21 f304 	lsr.w	r3, r1, r4
 23e2478:	ea45 0103 	orr.w	r1, r5, r3
 23e247c:	bd30      	pop	{r4, r5, pc}
 23e247e:	f1c4 040c 	rsb	r4, r4, #12
 23e2482:	f1c4 0220 	rsb	r2, r4, #32
 23e2486:	fa20 f002 	lsr.w	r0, r0, r2
 23e248a:	fa01 f304 	lsl.w	r3, r1, r4
 23e248e:	ea40 0003 	orr.w	r0, r0, r3
 23e2492:	4629      	mov	r1, r5
 23e2494:	bd30      	pop	{r4, r5, pc}
 23e2496:	fa21 f004 	lsr.w	r0, r1, r4
 23e249a:	4629      	mov	r1, r5
 23e249c:	bd30      	pop	{r4, r5, pc}
 23e249e:	f094 0f00 	teq	r4, #0
 23e24a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23e24a6:	bf06      	itte	eq
 23e24a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23e24ac:	3401      	addeq	r4, #1
 23e24ae:	3d01      	subne	r5, #1
 23e24b0:	e74e      	b.n	23e2350 <__adddf3+0x8c>
 23e24b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23e24b6:	bf18      	it	ne
 23e24b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23e24bc:	d029      	beq.n	23e2512 <__adddf3+0x24e>
 23e24be:	ea94 0f05 	teq	r4, r5
 23e24c2:	bf08      	it	eq
 23e24c4:	ea90 0f02 	teqeq	r0, r2
 23e24c8:	d005      	beq.n	23e24d6 <__adddf3+0x212>
 23e24ca:	ea54 0c00 	orrs.w	ip, r4, r0
 23e24ce:	bf04      	itt	eq
 23e24d0:	4619      	moveq	r1, r3
 23e24d2:	4610      	moveq	r0, r2
 23e24d4:	bd30      	pop	{r4, r5, pc}
 23e24d6:	ea91 0f03 	teq	r1, r3
 23e24da:	bf1e      	ittt	ne
 23e24dc:	2100      	movne	r1, #0
 23e24de:	2000      	movne	r0, #0
 23e24e0:	bd30      	popne	{r4, r5, pc}
 23e24e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23e24e6:	d105      	bne.n	23e24f4 <__adddf3+0x230>
 23e24e8:	0040      	lsls	r0, r0, #1
 23e24ea:	4149      	adcs	r1, r1
 23e24ec:	bf28      	it	cs
 23e24ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23e24f2:	bd30      	pop	{r4, r5, pc}
 23e24f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23e24f8:	bf3c      	itt	cc
 23e24fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23e24fe:	bd30      	popcc	{r4, r5, pc}
 23e2500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23e2504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23e2508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23e250c:	f04f 0000 	mov.w	r0, #0
 23e2510:	bd30      	pop	{r4, r5, pc}
 23e2512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23e2516:	bf1a      	itte	ne
 23e2518:	4619      	movne	r1, r3
 23e251a:	4610      	movne	r0, r2
 23e251c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23e2520:	bf1c      	itt	ne
 23e2522:	460b      	movne	r3, r1
 23e2524:	4602      	movne	r2, r0
 23e2526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23e252a:	bf06      	itte	eq
 23e252c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23e2530:	ea91 0f03 	teqeq	r1, r3
 23e2534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23e2538:	bd30      	pop	{r4, r5, pc}
 23e253a:	bf00      	nop

023e253c <__aeabi_ui2d>:
 23e253c:	f090 0f00 	teq	r0, #0
 23e2540:	bf04      	itt	eq
 23e2542:	2100      	moveq	r1, #0
 23e2544:	4770      	bxeq	lr
 23e2546:	b530      	push	{r4, r5, lr}
 23e2548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23e254c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23e2550:	f04f 0500 	mov.w	r5, #0
 23e2554:	f04f 0100 	mov.w	r1, #0
 23e2558:	e750      	b.n	23e23fc <__adddf3+0x138>
 23e255a:	bf00      	nop

023e255c <__aeabi_i2d>:
 23e255c:	f090 0f00 	teq	r0, #0
 23e2560:	bf04      	itt	eq
 23e2562:	2100      	moveq	r1, #0
 23e2564:	4770      	bxeq	lr
 23e2566:	b530      	push	{r4, r5, lr}
 23e2568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23e256c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23e2570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23e2574:	bf48      	it	mi
 23e2576:	4240      	negmi	r0, r0
 23e2578:	f04f 0100 	mov.w	r1, #0
 23e257c:	e73e      	b.n	23e23fc <__adddf3+0x138>
 23e257e:	bf00      	nop

023e2580 <__aeabi_f2d>:
 23e2580:	0042      	lsls	r2, r0, #1
 23e2582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23e2586:	ea4f 0131 	mov.w	r1, r1, rrx
 23e258a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23e258e:	bf1f      	itttt	ne
 23e2590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23e2594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23e2598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23e259c:	4770      	bxne	lr
 23e259e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23e25a2:	bf08      	it	eq
 23e25a4:	4770      	bxeq	lr
 23e25a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23e25aa:	bf04      	itt	eq
 23e25ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23e25b0:	4770      	bxeq	lr
 23e25b2:	b530      	push	{r4, r5, lr}
 23e25b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 23e25b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23e25bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23e25c0:	e71c      	b.n	23e23fc <__adddf3+0x138>
 23e25c2:	bf00      	nop

023e25c4 <__aeabi_ul2d>:
 23e25c4:	ea50 0201 	orrs.w	r2, r0, r1
 23e25c8:	bf08      	it	eq
 23e25ca:	4770      	bxeq	lr
 23e25cc:	b530      	push	{r4, r5, lr}
 23e25ce:	f04f 0500 	mov.w	r5, #0
 23e25d2:	e00a      	b.n	23e25ea <__aeabi_l2d+0x16>

023e25d4 <__aeabi_l2d>:
 23e25d4:	ea50 0201 	orrs.w	r2, r0, r1
 23e25d8:	bf08      	it	eq
 23e25da:	4770      	bxeq	lr
 23e25dc:	b530      	push	{r4, r5, lr}
 23e25de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23e25e2:	d502      	bpl.n	23e25ea <__aeabi_l2d+0x16>
 23e25e4:	4240      	negs	r0, r0
 23e25e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e25ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23e25ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23e25f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23e25f6:	f43f aed8 	beq.w	23e23aa <__adddf3+0xe6>
 23e25fa:	f04f 0203 	mov.w	r2, #3
 23e25fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23e2602:	bf18      	it	ne
 23e2604:	3203      	addne	r2, #3
 23e2606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23e260a:	bf18      	it	ne
 23e260c:	3203      	addne	r2, #3
 23e260e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23e2612:	f1c2 0320 	rsb	r3, r2, #32
 23e2616:	fa00 fc03 	lsl.w	ip, r0, r3
 23e261a:	fa20 f002 	lsr.w	r0, r0, r2
 23e261e:	fa01 fe03 	lsl.w	lr, r1, r3
 23e2622:	ea40 000e 	orr.w	r0, r0, lr
 23e2626:	fa21 f102 	lsr.w	r1, r1, r2
 23e262a:	4414      	add	r4, r2
 23e262c:	e6bd      	b.n	23e23aa <__adddf3+0xe6>
 23e262e:	bf00      	nop

023e2630 <__aeabi_dmul>:
 23e2630:	b570      	push	{r4, r5, r6, lr}
 23e2632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23e2636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23e263a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23e263e:	bf1d      	ittte	ne
 23e2640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23e2644:	ea94 0f0c 	teqne	r4, ip
 23e2648:	ea95 0f0c 	teqne	r5, ip
 23e264c:	f000 f8de 	bleq	23e280c <__aeabi_dmul+0x1dc>
 23e2650:	442c      	add	r4, r5
 23e2652:	ea81 0603 	eor.w	r6, r1, r3
 23e2656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23e265a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23e265e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23e2662:	bf18      	it	ne
 23e2664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23e2668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23e266c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23e2670:	d038      	beq.n	23e26e4 <__aeabi_dmul+0xb4>
 23e2672:	fba0 ce02 	umull	ip, lr, r0, r2
 23e2676:	f04f 0500 	mov.w	r5, #0
 23e267a:	fbe1 e502 	umlal	lr, r5, r1, r2
 23e267e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23e2682:	fbe0 e503 	umlal	lr, r5, r0, r3
 23e2686:	f04f 0600 	mov.w	r6, #0
 23e268a:	fbe1 5603 	umlal	r5, r6, r1, r3
 23e268e:	f09c 0f00 	teq	ip, #0
 23e2692:	bf18      	it	ne
 23e2694:	f04e 0e01 	orrne.w	lr, lr, #1
 23e2698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23e269c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23e26a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23e26a4:	d204      	bcs.n	23e26b0 <__aeabi_dmul+0x80>
 23e26a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23e26aa:	416d      	adcs	r5, r5
 23e26ac:	eb46 0606 	adc.w	r6, r6, r6
 23e26b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23e26b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23e26b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23e26bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23e26c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23e26c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23e26c8:	bf88      	it	hi
 23e26ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23e26ce:	d81e      	bhi.n	23e270e <__aeabi_dmul+0xde>
 23e26d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23e26d4:	bf08      	it	eq
 23e26d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23e26da:	f150 0000 	adcs.w	r0, r0, #0
 23e26de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23e26e2:	bd70      	pop	{r4, r5, r6, pc}
 23e26e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23e26e8:	ea46 0101 	orr.w	r1, r6, r1
 23e26ec:	ea40 0002 	orr.w	r0, r0, r2
 23e26f0:	ea81 0103 	eor.w	r1, r1, r3
 23e26f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23e26f8:	bfc2      	ittt	gt
 23e26fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 23e26fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23e2702:	bd70      	popgt	{r4, r5, r6, pc}
 23e2704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23e2708:	f04f 0e00 	mov.w	lr, #0
 23e270c:	3c01      	subs	r4, #1
 23e270e:	f300 80ab 	bgt.w	23e2868 <__aeabi_dmul+0x238>
 23e2712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23e2716:	bfde      	ittt	le
 23e2718:	2000      	movle	r0, #0
 23e271a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23e271e:	bd70      	pople	{r4, r5, r6, pc}
 23e2720:	f1c4 0400 	rsb	r4, r4, #0
 23e2724:	3c20      	subs	r4, #32
 23e2726:	da35      	bge.n	23e2794 <__aeabi_dmul+0x164>
 23e2728:	340c      	adds	r4, #12
 23e272a:	dc1b      	bgt.n	23e2764 <__aeabi_dmul+0x134>
 23e272c:	f104 0414 	add.w	r4, r4, #20
 23e2730:	f1c4 0520 	rsb	r5, r4, #32
 23e2734:	fa00 f305 	lsl.w	r3, r0, r5
 23e2738:	fa20 f004 	lsr.w	r0, r0, r4
 23e273c:	fa01 f205 	lsl.w	r2, r1, r5
 23e2740:	ea40 0002 	orr.w	r0, r0, r2
 23e2744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23e2748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23e274c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23e2750:	fa21 f604 	lsr.w	r6, r1, r4
 23e2754:	eb42 0106 	adc.w	r1, r2, r6
 23e2758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23e275c:	bf08      	it	eq
 23e275e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23e2762:	bd70      	pop	{r4, r5, r6, pc}
 23e2764:	f1c4 040c 	rsb	r4, r4, #12
 23e2768:	f1c4 0520 	rsb	r5, r4, #32
 23e276c:	fa00 f304 	lsl.w	r3, r0, r4
 23e2770:	fa20 f005 	lsr.w	r0, r0, r5
 23e2774:	fa01 f204 	lsl.w	r2, r1, r4
 23e2778:	ea40 0002 	orr.w	r0, r0, r2
 23e277c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23e2780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23e2784:	f141 0100 	adc.w	r1, r1, #0
 23e2788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23e278c:	bf08      	it	eq
 23e278e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23e2792:	bd70      	pop	{r4, r5, r6, pc}
 23e2794:	f1c4 0520 	rsb	r5, r4, #32
 23e2798:	fa00 f205 	lsl.w	r2, r0, r5
 23e279c:	ea4e 0e02 	orr.w	lr, lr, r2
 23e27a0:	fa20 f304 	lsr.w	r3, r0, r4
 23e27a4:	fa01 f205 	lsl.w	r2, r1, r5
 23e27a8:	ea43 0302 	orr.w	r3, r3, r2
 23e27ac:	fa21 f004 	lsr.w	r0, r1, r4
 23e27b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23e27b4:	fa21 f204 	lsr.w	r2, r1, r4
 23e27b8:	ea20 0002 	bic.w	r0, r0, r2
 23e27bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23e27c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23e27c4:	bf08      	it	eq
 23e27c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23e27ca:	bd70      	pop	{r4, r5, r6, pc}
 23e27cc:	f094 0f00 	teq	r4, #0
 23e27d0:	d10f      	bne.n	23e27f2 <__aeabi_dmul+0x1c2>
 23e27d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23e27d6:	0040      	lsls	r0, r0, #1
 23e27d8:	eb41 0101 	adc.w	r1, r1, r1
 23e27dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23e27e0:	bf08      	it	eq
 23e27e2:	3c01      	subeq	r4, #1
 23e27e4:	d0f7      	beq.n	23e27d6 <__aeabi_dmul+0x1a6>
 23e27e6:	ea41 0106 	orr.w	r1, r1, r6
 23e27ea:	f095 0f00 	teq	r5, #0
 23e27ee:	bf18      	it	ne
 23e27f0:	4770      	bxne	lr
 23e27f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23e27f6:	0052      	lsls	r2, r2, #1
 23e27f8:	eb43 0303 	adc.w	r3, r3, r3
 23e27fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23e2800:	bf08      	it	eq
 23e2802:	3d01      	subeq	r5, #1
 23e2804:	d0f7      	beq.n	23e27f6 <__aeabi_dmul+0x1c6>
 23e2806:	ea43 0306 	orr.w	r3, r3, r6
 23e280a:	4770      	bx	lr
 23e280c:	ea94 0f0c 	teq	r4, ip
 23e2810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23e2814:	bf18      	it	ne
 23e2816:	ea95 0f0c 	teqne	r5, ip
 23e281a:	d00c      	beq.n	23e2836 <__aeabi_dmul+0x206>
 23e281c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23e2820:	bf18      	it	ne
 23e2822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23e2826:	d1d1      	bne.n	23e27cc <__aeabi_dmul+0x19c>
 23e2828:	ea81 0103 	eor.w	r1, r1, r3
 23e282c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23e2830:	f04f 0000 	mov.w	r0, #0
 23e2834:	bd70      	pop	{r4, r5, r6, pc}
 23e2836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23e283a:	bf06      	itte	eq
 23e283c:	4610      	moveq	r0, r2
 23e283e:	4619      	moveq	r1, r3
 23e2840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23e2844:	d019      	beq.n	23e287a <__aeabi_dmul+0x24a>
 23e2846:	ea94 0f0c 	teq	r4, ip
 23e284a:	d102      	bne.n	23e2852 <__aeabi_dmul+0x222>
 23e284c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23e2850:	d113      	bne.n	23e287a <__aeabi_dmul+0x24a>
 23e2852:	ea95 0f0c 	teq	r5, ip
 23e2856:	d105      	bne.n	23e2864 <__aeabi_dmul+0x234>
 23e2858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23e285c:	bf1c      	itt	ne
 23e285e:	4610      	movne	r0, r2
 23e2860:	4619      	movne	r1, r3
 23e2862:	d10a      	bne.n	23e287a <__aeabi_dmul+0x24a>
 23e2864:	ea81 0103 	eor.w	r1, r1, r3
 23e2868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23e286c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23e2870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23e2874:	f04f 0000 	mov.w	r0, #0
 23e2878:	bd70      	pop	{r4, r5, r6, pc}
 23e287a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23e287e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23e2882:	bd70      	pop	{r4, r5, r6, pc}

023e2884 <__aeabi_ddiv>:
 23e2884:	b570      	push	{r4, r5, r6, lr}
 23e2886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23e288a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23e288e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23e2892:	bf1d      	ittte	ne
 23e2894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23e2898:	ea94 0f0c 	teqne	r4, ip
 23e289c:	ea95 0f0c 	teqne	r5, ip
 23e28a0:	f000 f8a7 	bleq	23e29f2 <__aeabi_ddiv+0x16e>
 23e28a4:	eba4 0405 	sub.w	r4, r4, r5
 23e28a8:	ea81 0e03 	eor.w	lr, r1, r3
 23e28ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23e28b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23e28b4:	f000 8088 	beq.w	23e29c8 <__aeabi_ddiv+0x144>
 23e28b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23e28bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23e28c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23e28c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23e28c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23e28cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23e28d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23e28d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23e28d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23e28dc:	429d      	cmp	r5, r3
 23e28de:	bf08      	it	eq
 23e28e0:	4296      	cmpeq	r6, r2
 23e28e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23e28e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23e28ea:	d202      	bcs.n	23e28f2 <__aeabi_ddiv+0x6e>
 23e28ec:	085b      	lsrs	r3, r3, #1
 23e28ee:	ea4f 0232 	mov.w	r2, r2, rrx
 23e28f2:	1ab6      	subs	r6, r6, r2
 23e28f4:	eb65 0503 	sbc.w	r5, r5, r3
 23e28f8:	085b      	lsrs	r3, r3, #1
 23e28fa:	ea4f 0232 	mov.w	r2, r2, rrx
 23e28fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23e2902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23e2906:	ebb6 0e02 	subs.w	lr, r6, r2
 23e290a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23e290e:	bf22      	ittt	cs
 23e2910:	1ab6      	subcs	r6, r6, r2
 23e2912:	4675      	movcs	r5, lr
 23e2914:	ea40 000c 	orrcs.w	r0, r0, ip
 23e2918:	085b      	lsrs	r3, r3, #1
 23e291a:	ea4f 0232 	mov.w	r2, r2, rrx
 23e291e:	ebb6 0e02 	subs.w	lr, r6, r2
 23e2922:	eb75 0e03 	sbcs.w	lr, r5, r3
 23e2926:	bf22      	ittt	cs
 23e2928:	1ab6      	subcs	r6, r6, r2
 23e292a:	4675      	movcs	r5, lr
 23e292c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23e2930:	085b      	lsrs	r3, r3, #1
 23e2932:	ea4f 0232 	mov.w	r2, r2, rrx
 23e2936:	ebb6 0e02 	subs.w	lr, r6, r2
 23e293a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23e293e:	bf22      	ittt	cs
 23e2940:	1ab6      	subcs	r6, r6, r2
 23e2942:	4675      	movcs	r5, lr
 23e2944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23e2948:	085b      	lsrs	r3, r3, #1
 23e294a:	ea4f 0232 	mov.w	r2, r2, rrx
 23e294e:	ebb6 0e02 	subs.w	lr, r6, r2
 23e2952:	eb75 0e03 	sbcs.w	lr, r5, r3
 23e2956:	bf22      	ittt	cs
 23e2958:	1ab6      	subcs	r6, r6, r2
 23e295a:	4675      	movcs	r5, lr
 23e295c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23e2960:	ea55 0e06 	orrs.w	lr, r5, r6
 23e2964:	d018      	beq.n	23e2998 <__aeabi_ddiv+0x114>
 23e2966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23e296a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23e296e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23e2972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23e2976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23e297a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23e297e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23e2982:	d1c0      	bne.n	23e2906 <__aeabi_ddiv+0x82>
 23e2984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23e2988:	d10b      	bne.n	23e29a2 <__aeabi_ddiv+0x11e>
 23e298a:	ea41 0100 	orr.w	r1, r1, r0
 23e298e:	f04f 0000 	mov.w	r0, #0
 23e2992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23e2996:	e7b6      	b.n	23e2906 <__aeabi_ddiv+0x82>
 23e2998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23e299c:	bf04      	itt	eq
 23e299e:	4301      	orreq	r1, r0
 23e29a0:	2000      	moveq	r0, #0
 23e29a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23e29a6:	bf88      	it	hi
 23e29a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23e29ac:	f63f aeaf 	bhi.w	23e270e <__aeabi_dmul+0xde>
 23e29b0:	ebb5 0c03 	subs.w	ip, r5, r3
 23e29b4:	bf04      	itt	eq
 23e29b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 23e29ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23e29be:	f150 0000 	adcs.w	r0, r0, #0
 23e29c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23e29c6:	bd70      	pop	{r4, r5, r6, pc}
 23e29c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23e29cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23e29d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23e29d4:	bfc2      	ittt	gt
 23e29d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 23e29da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23e29de:	bd70      	popgt	{r4, r5, r6, pc}
 23e29e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23e29e4:	f04f 0e00 	mov.w	lr, #0
 23e29e8:	3c01      	subs	r4, #1
 23e29ea:	e690      	b.n	23e270e <__aeabi_dmul+0xde>
 23e29ec:	ea45 0e06 	orr.w	lr, r5, r6
 23e29f0:	e68d      	b.n	23e270e <__aeabi_dmul+0xde>
 23e29f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23e29f6:	ea94 0f0c 	teq	r4, ip
 23e29fa:	bf08      	it	eq
 23e29fc:	ea95 0f0c 	teqeq	r5, ip
 23e2a00:	f43f af3b 	beq.w	23e287a <__aeabi_dmul+0x24a>
 23e2a04:	ea94 0f0c 	teq	r4, ip
 23e2a08:	d10a      	bne.n	23e2a20 <__aeabi_ddiv+0x19c>
 23e2a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23e2a0e:	f47f af34 	bne.w	23e287a <__aeabi_dmul+0x24a>
 23e2a12:	ea95 0f0c 	teq	r5, ip
 23e2a16:	f47f af25 	bne.w	23e2864 <__aeabi_dmul+0x234>
 23e2a1a:	4610      	mov	r0, r2
 23e2a1c:	4619      	mov	r1, r3
 23e2a1e:	e72c      	b.n	23e287a <__aeabi_dmul+0x24a>
 23e2a20:	ea95 0f0c 	teq	r5, ip
 23e2a24:	d106      	bne.n	23e2a34 <__aeabi_ddiv+0x1b0>
 23e2a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23e2a2a:	f43f aefd 	beq.w	23e2828 <__aeabi_dmul+0x1f8>
 23e2a2e:	4610      	mov	r0, r2
 23e2a30:	4619      	mov	r1, r3
 23e2a32:	e722      	b.n	23e287a <__aeabi_dmul+0x24a>
 23e2a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23e2a38:	bf18      	it	ne
 23e2a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23e2a3e:	f47f aec5 	bne.w	23e27cc <__aeabi_dmul+0x19c>
 23e2a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23e2a46:	f47f af0d 	bne.w	23e2864 <__aeabi_dmul+0x234>
 23e2a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23e2a4e:	f47f aeeb 	bne.w	23e2828 <__aeabi_dmul+0x1f8>
 23e2a52:	e712      	b.n	23e287a <__aeabi_dmul+0x24a>

023e2a54 <__gedf2>:
 23e2a54:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23e2a58:	e006      	b.n	23e2a68 <__cmpdf2+0x4>
 23e2a5a:	bf00      	nop

023e2a5c <__ledf2>:
 23e2a5c:	f04f 0c01 	mov.w	ip, #1
 23e2a60:	e002      	b.n	23e2a68 <__cmpdf2+0x4>
 23e2a62:	bf00      	nop

023e2a64 <__cmpdf2>:
 23e2a64:	f04f 0c01 	mov.w	ip, #1
 23e2a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 23e2a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23e2a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e2a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23e2a78:	bf18      	it	ne
 23e2a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23e2a7e:	d01b      	beq.n	23e2ab8 <__cmpdf2+0x54>
 23e2a80:	b001      	add	sp, #4
 23e2a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23e2a86:	bf0c      	ite	eq
 23e2a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23e2a8c:	ea91 0f03 	teqne	r1, r3
 23e2a90:	bf02      	ittt	eq
 23e2a92:	ea90 0f02 	teqeq	r0, r2
 23e2a96:	2000      	moveq	r0, #0
 23e2a98:	4770      	bxeq	lr
 23e2a9a:	f110 0f00 	cmn.w	r0, #0
 23e2a9e:	ea91 0f03 	teq	r1, r3
 23e2aa2:	bf58      	it	pl
 23e2aa4:	4299      	cmppl	r1, r3
 23e2aa6:	bf08      	it	eq
 23e2aa8:	4290      	cmpeq	r0, r2
 23e2aaa:	bf2c      	ite	cs
 23e2aac:	17d8      	asrcs	r0, r3, #31
 23e2aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23e2ab2:	f040 0001 	orr.w	r0, r0, #1
 23e2ab6:	4770      	bx	lr
 23e2ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23e2abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e2ac0:	d102      	bne.n	23e2ac8 <__cmpdf2+0x64>
 23e2ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23e2ac6:	d107      	bne.n	23e2ad8 <__cmpdf2+0x74>
 23e2ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23e2acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e2ad0:	d1d6      	bne.n	23e2a80 <__cmpdf2+0x1c>
 23e2ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23e2ad6:	d0d3      	beq.n	23e2a80 <__cmpdf2+0x1c>
 23e2ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 23e2adc:	4770      	bx	lr
 23e2ade:	bf00      	nop

023e2ae0 <__aeabi_cdrcmple>:
 23e2ae0:	4684      	mov	ip, r0
 23e2ae2:	4610      	mov	r0, r2
 23e2ae4:	4662      	mov	r2, ip
 23e2ae6:	468c      	mov	ip, r1
 23e2ae8:	4619      	mov	r1, r3
 23e2aea:	4663      	mov	r3, ip
 23e2aec:	e000      	b.n	23e2af0 <__aeabi_cdcmpeq>
 23e2aee:	bf00      	nop

023e2af0 <__aeabi_cdcmpeq>:
 23e2af0:	b501      	push	{r0, lr}
 23e2af2:	f7ff ffb7 	bl	23e2a64 <__cmpdf2>
 23e2af6:	2800      	cmp	r0, #0
 23e2af8:	bf48      	it	mi
 23e2afa:	f110 0f00 	cmnmi.w	r0, #0
 23e2afe:	bd01      	pop	{r0, pc}

023e2b00 <__aeabi_dcmpeq>:
 23e2b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e2b04:	f7ff fff4 	bl	23e2af0 <__aeabi_cdcmpeq>
 23e2b08:	bf0c      	ite	eq
 23e2b0a:	2001      	moveq	r0, #1
 23e2b0c:	2000      	movne	r0, #0
 23e2b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 23e2b12:	bf00      	nop

023e2b14 <__aeabi_dcmplt>:
 23e2b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e2b18:	f7ff ffea 	bl	23e2af0 <__aeabi_cdcmpeq>
 23e2b1c:	bf34      	ite	cc
 23e2b1e:	2001      	movcc	r0, #1
 23e2b20:	2000      	movcs	r0, #0
 23e2b22:	f85d fb08 	ldr.w	pc, [sp], #8
 23e2b26:	bf00      	nop

023e2b28 <__aeabi_dcmple>:
 23e2b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e2b2c:	f7ff ffe0 	bl	23e2af0 <__aeabi_cdcmpeq>
 23e2b30:	bf94      	ite	ls
 23e2b32:	2001      	movls	r0, #1
 23e2b34:	2000      	movhi	r0, #0
 23e2b36:	f85d fb08 	ldr.w	pc, [sp], #8
 23e2b3a:	bf00      	nop

023e2b3c <__aeabi_dcmpge>:
 23e2b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e2b40:	f7ff ffce 	bl	23e2ae0 <__aeabi_cdrcmple>
 23e2b44:	bf94      	ite	ls
 23e2b46:	2001      	movls	r0, #1
 23e2b48:	2000      	movhi	r0, #0
 23e2b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 23e2b4e:	bf00      	nop

023e2b50 <__aeabi_dcmpgt>:
 23e2b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e2b54:	f7ff ffc4 	bl	23e2ae0 <__aeabi_cdrcmple>
 23e2b58:	bf34      	ite	cc
 23e2b5a:	2001      	movcc	r0, #1
 23e2b5c:	2000      	movcs	r0, #0
 23e2b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 23e2b62:	bf00      	nop

023e2b64 <__aeabi_dcmpun>:
 23e2b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23e2b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e2b6c:	d102      	bne.n	23e2b74 <__aeabi_dcmpun+0x10>
 23e2b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23e2b72:	d10a      	bne.n	23e2b8a <__aeabi_dcmpun+0x26>
 23e2b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23e2b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e2b7c:	d102      	bne.n	23e2b84 <__aeabi_dcmpun+0x20>
 23e2b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23e2b82:	d102      	bne.n	23e2b8a <__aeabi_dcmpun+0x26>
 23e2b84:	f04f 0000 	mov.w	r0, #0
 23e2b88:	4770      	bx	lr
 23e2b8a:	f04f 0001 	mov.w	r0, #1
 23e2b8e:	4770      	bx	lr

023e2b90 <__aeabi_d2iz>:
 23e2b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23e2b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23e2b98:	d215      	bcs.n	23e2bc6 <__aeabi_d2iz+0x36>
 23e2b9a:	d511      	bpl.n	23e2bc0 <__aeabi_d2iz+0x30>
 23e2b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23e2ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23e2ba4:	d912      	bls.n	23e2bcc <__aeabi_d2iz+0x3c>
 23e2ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23e2baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23e2bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23e2bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23e2bb6:	fa23 f002 	lsr.w	r0, r3, r2
 23e2bba:	bf18      	it	ne
 23e2bbc:	4240      	negne	r0, r0
 23e2bbe:	4770      	bx	lr
 23e2bc0:	f04f 0000 	mov.w	r0, #0
 23e2bc4:	4770      	bx	lr
 23e2bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23e2bca:	d105      	bne.n	23e2bd8 <__aeabi_d2iz+0x48>
 23e2bcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 23e2bd0:	bf08      	it	eq
 23e2bd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 23e2bd6:	4770      	bx	lr
 23e2bd8:	f04f 0000 	mov.w	r0, #0
 23e2bdc:	4770      	bx	lr
 23e2bde:	bf00      	nop

023e2be0 <__aeabi_d2uiz>:
 23e2be0:	004a      	lsls	r2, r1, #1
 23e2be2:	d211      	bcs.n	23e2c08 <__aeabi_d2uiz+0x28>
 23e2be4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23e2be8:	d211      	bcs.n	23e2c0e <__aeabi_d2uiz+0x2e>
 23e2bea:	d50d      	bpl.n	23e2c08 <__aeabi_d2uiz+0x28>
 23e2bec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23e2bf0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23e2bf4:	d40e      	bmi.n	23e2c14 <__aeabi_d2uiz+0x34>
 23e2bf6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23e2bfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23e2bfe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23e2c02:	fa23 f002 	lsr.w	r0, r3, r2
 23e2c06:	4770      	bx	lr
 23e2c08:	f04f 0000 	mov.w	r0, #0
 23e2c0c:	4770      	bx	lr
 23e2c0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23e2c12:	d102      	bne.n	23e2c1a <__aeabi_d2uiz+0x3a>
 23e2c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e2c18:	4770      	bx	lr
 23e2c1a:	f04f 0000 	mov.w	r0, #0
 23e2c1e:	4770      	bx	lr

023e2c20 <__aeabi_d2f>:
 23e2c20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23e2c24:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23e2c28:	bf24      	itt	cs
 23e2c2a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23e2c2e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23e2c32:	d90d      	bls.n	23e2c50 <__aeabi_d2f+0x30>
 23e2c34:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23e2c38:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23e2c3c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23e2c40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23e2c44:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23e2c48:	bf08      	it	eq
 23e2c4a:	f020 0001 	biceq.w	r0, r0, #1
 23e2c4e:	4770      	bx	lr
 23e2c50:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23e2c54:	d121      	bne.n	23e2c9a <__aeabi_d2f+0x7a>
 23e2c56:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23e2c5a:	bfbc      	itt	lt
 23e2c5c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23e2c60:	4770      	bxlt	lr
 23e2c62:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23e2c66:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23e2c6a:	f1c2 0218 	rsb	r2, r2, #24
 23e2c6e:	f1c2 0c20 	rsb	ip, r2, #32
 23e2c72:	fa10 f30c 	lsls.w	r3, r0, ip
 23e2c76:	fa20 f002 	lsr.w	r0, r0, r2
 23e2c7a:	bf18      	it	ne
 23e2c7c:	f040 0001 	orrne.w	r0, r0, #1
 23e2c80:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23e2c84:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23e2c88:	fa03 fc0c 	lsl.w	ip, r3, ip
 23e2c8c:	ea40 000c 	orr.w	r0, r0, ip
 23e2c90:	fa23 f302 	lsr.w	r3, r3, r2
 23e2c94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23e2c98:	e7cc      	b.n	23e2c34 <__aeabi_d2f+0x14>
 23e2c9a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23e2c9e:	d107      	bne.n	23e2cb0 <__aeabi_d2f+0x90>
 23e2ca0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23e2ca4:	bf1e      	ittt	ne
 23e2ca6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23e2caa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23e2cae:	4770      	bxne	lr
 23e2cb0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23e2cb4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23e2cb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23e2cbc:	4770      	bx	lr
 23e2cbe:	bf00      	nop

023e2cc0 <__aeabi_frsub>:
 23e2cc0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 23e2cc4:	e002      	b.n	23e2ccc <__addsf3>
 23e2cc6:	bf00      	nop

023e2cc8 <__aeabi_fsub>:
 23e2cc8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

023e2ccc <__addsf3>:
 23e2ccc:	0042      	lsls	r2, r0, #1
 23e2cce:	bf1f      	itttt	ne
 23e2cd0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 23e2cd4:	ea92 0f03 	teqne	r2, r3
 23e2cd8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 23e2cdc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 23e2ce0:	d06a      	beq.n	23e2db8 <__addsf3+0xec>
 23e2ce2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 23e2ce6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 23e2cea:	bfc1      	itttt	gt
 23e2cec:	18d2      	addgt	r2, r2, r3
 23e2cee:	4041      	eorgt	r1, r0
 23e2cf0:	4048      	eorgt	r0, r1
 23e2cf2:	4041      	eorgt	r1, r0
 23e2cf4:	bfb8      	it	lt
 23e2cf6:	425b      	neglt	r3, r3
 23e2cf8:	2b19      	cmp	r3, #25
 23e2cfa:	bf88      	it	hi
 23e2cfc:	4770      	bxhi	lr
 23e2cfe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 23e2d02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23e2d06:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 23e2d0a:	bf18      	it	ne
 23e2d0c:	4240      	negne	r0, r0
 23e2d0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23e2d12:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 23e2d16:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 23e2d1a:	bf18      	it	ne
 23e2d1c:	4249      	negne	r1, r1
 23e2d1e:	ea92 0f03 	teq	r2, r3
 23e2d22:	d03f      	beq.n	23e2da4 <__addsf3+0xd8>
 23e2d24:	f1a2 0201 	sub.w	r2, r2, #1
 23e2d28:	fa41 fc03 	asr.w	ip, r1, r3
 23e2d2c:	eb10 000c 	adds.w	r0, r0, ip
 23e2d30:	f1c3 0320 	rsb	r3, r3, #32
 23e2d34:	fa01 f103 	lsl.w	r1, r1, r3
 23e2d38:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 23e2d3c:	d502      	bpl.n	23e2d44 <__addsf3+0x78>
 23e2d3e:	4249      	negs	r1, r1
 23e2d40:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 23e2d44:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 23e2d48:	d313      	bcc.n	23e2d72 <__addsf3+0xa6>
 23e2d4a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 23e2d4e:	d306      	bcc.n	23e2d5e <__addsf3+0x92>
 23e2d50:	0840      	lsrs	r0, r0, #1
 23e2d52:	ea4f 0131 	mov.w	r1, r1, rrx
 23e2d56:	f102 0201 	add.w	r2, r2, #1
 23e2d5a:	2afe      	cmp	r2, #254	; 0xfe
 23e2d5c:	d251      	bcs.n	23e2e02 <__addsf3+0x136>
 23e2d5e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 23e2d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 23e2d66:	bf08      	it	eq
 23e2d68:	f020 0001 	biceq.w	r0, r0, #1
 23e2d6c:	ea40 0003 	orr.w	r0, r0, r3
 23e2d70:	4770      	bx	lr
 23e2d72:	0049      	lsls	r1, r1, #1
 23e2d74:	eb40 0000 	adc.w	r0, r0, r0
 23e2d78:	3a01      	subs	r2, #1
 23e2d7a:	bf28      	it	cs
 23e2d7c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 23e2d80:	d2ed      	bcs.n	23e2d5e <__addsf3+0x92>
 23e2d82:	fab0 fc80 	clz	ip, r0
 23e2d86:	f1ac 0c08 	sub.w	ip, ip, #8
 23e2d8a:	ebb2 020c 	subs.w	r2, r2, ip
 23e2d8e:	fa00 f00c 	lsl.w	r0, r0, ip
 23e2d92:	bfaa      	itet	ge
 23e2d94:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 23e2d98:	4252      	neglt	r2, r2
 23e2d9a:	4318      	orrge	r0, r3
 23e2d9c:	bfbc      	itt	lt
 23e2d9e:	40d0      	lsrlt	r0, r2
 23e2da0:	4318      	orrlt	r0, r3
 23e2da2:	4770      	bx	lr
 23e2da4:	f092 0f00 	teq	r2, #0
 23e2da8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 23e2dac:	bf06      	itte	eq
 23e2dae:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 23e2db2:	3201      	addeq	r2, #1
 23e2db4:	3b01      	subne	r3, #1
 23e2db6:	e7b5      	b.n	23e2d24 <__addsf3+0x58>
 23e2db8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 23e2dbc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 23e2dc0:	bf18      	it	ne
 23e2dc2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 23e2dc6:	d021      	beq.n	23e2e0c <__addsf3+0x140>
 23e2dc8:	ea92 0f03 	teq	r2, r3
 23e2dcc:	d004      	beq.n	23e2dd8 <__addsf3+0x10c>
 23e2dce:	f092 0f00 	teq	r2, #0
 23e2dd2:	bf08      	it	eq
 23e2dd4:	4608      	moveq	r0, r1
 23e2dd6:	4770      	bx	lr
 23e2dd8:	ea90 0f01 	teq	r0, r1
 23e2ddc:	bf1c      	itt	ne
 23e2dde:	2000      	movne	r0, #0
 23e2de0:	4770      	bxne	lr
 23e2de2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 23e2de6:	d104      	bne.n	23e2df2 <__addsf3+0x126>
 23e2de8:	0040      	lsls	r0, r0, #1
 23e2dea:	bf28      	it	cs
 23e2dec:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 23e2df0:	4770      	bx	lr
 23e2df2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 23e2df6:	bf3c      	itt	cc
 23e2df8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 23e2dfc:	4770      	bxcc	lr
 23e2dfe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 23e2e02:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 23e2e06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23e2e0a:	4770      	bx	lr
 23e2e0c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 23e2e10:	bf16      	itet	ne
 23e2e12:	4608      	movne	r0, r1
 23e2e14:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 23e2e18:	4601      	movne	r1, r0
 23e2e1a:	0242      	lsls	r2, r0, #9
 23e2e1c:	bf06      	itte	eq
 23e2e1e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 23e2e22:	ea90 0f01 	teqeq	r0, r1
 23e2e26:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 23e2e2a:	4770      	bx	lr

023e2e2c <__aeabi_ui2f>:
 23e2e2c:	f04f 0300 	mov.w	r3, #0
 23e2e30:	e004      	b.n	23e2e3c <__aeabi_i2f+0x8>
 23e2e32:	bf00      	nop

023e2e34 <__aeabi_i2f>:
 23e2e34:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 23e2e38:	bf48      	it	mi
 23e2e3a:	4240      	negmi	r0, r0
 23e2e3c:	ea5f 0c00 	movs.w	ip, r0
 23e2e40:	bf08      	it	eq
 23e2e42:	4770      	bxeq	lr
 23e2e44:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 23e2e48:	4601      	mov	r1, r0
 23e2e4a:	f04f 0000 	mov.w	r0, #0
 23e2e4e:	e01c      	b.n	23e2e8a <__aeabi_l2f+0x2a>

023e2e50 <__aeabi_ul2f>:
 23e2e50:	ea50 0201 	orrs.w	r2, r0, r1
 23e2e54:	bf08      	it	eq
 23e2e56:	4770      	bxeq	lr
 23e2e58:	f04f 0300 	mov.w	r3, #0
 23e2e5c:	e00a      	b.n	23e2e74 <__aeabi_l2f+0x14>
 23e2e5e:	bf00      	nop

023e2e60 <__aeabi_l2f>:
 23e2e60:	ea50 0201 	orrs.w	r2, r0, r1
 23e2e64:	bf08      	it	eq
 23e2e66:	4770      	bxeq	lr
 23e2e68:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 23e2e6c:	d502      	bpl.n	23e2e74 <__aeabi_l2f+0x14>
 23e2e6e:	4240      	negs	r0, r0
 23e2e70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e2e74:	ea5f 0c01 	movs.w	ip, r1
 23e2e78:	bf02      	ittt	eq
 23e2e7a:	4684      	moveq	ip, r0
 23e2e7c:	4601      	moveq	r1, r0
 23e2e7e:	2000      	moveq	r0, #0
 23e2e80:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 23e2e84:	bf08      	it	eq
 23e2e86:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 23e2e8a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 23e2e8e:	fabc f28c 	clz	r2, ip
 23e2e92:	3a08      	subs	r2, #8
 23e2e94:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 23e2e98:	db10      	blt.n	23e2ebc <__aeabi_l2f+0x5c>
 23e2e9a:	fa01 fc02 	lsl.w	ip, r1, r2
 23e2e9e:	4463      	add	r3, ip
 23e2ea0:	fa00 fc02 	lsl.w	ip, r0, r2
 23e2ea4:	f1c2 0220 	rsb	r2, r2, #32
 23e2ea8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23e2eac:	fa20 f202 	lsr.w	r2, r0, r2
 23e2eb0:	eb43 0002 	adc.w	r0, r3, r2
 23e2eb4:	bf08      	it	eq
 23e2eb6:	f020 0001 	biceq.w	r0, r0, #1
 23e2eba:	4770      	bx	lr
 23e2ebc:	f102 0220 	add.w	r2, r2, #32
 23e2ec0:	fa01 fc02 	lsl.w	ip, r1, r2
 23e2ec4:	f1c2 0220 	rsb	r2, r2, #32
 23e2ec8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 23e2ecc:	fa21 f202 	lsr.w	r2, r1, r2
 23e2ed0:	eb43 0002 	adc.w	r0, r3, r2
 23e2ed4:	bf08      	it	eq
 23e2ed6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 23e2eda:	4770      	bx	lr

023e2edc <__aeabi_ldivmod>:
 23e2edc:	b97b      	cbnz	r3, 23e2efe <__aeabi_ldivmod+0x22>
 23e2ede:	b972      	cbnz	r2, 23e2efe <__aeabi_ldivmod+0x22>
 23e2ee0:	2900      	cmp	r1, #0
 23e2ee2:	bfbe      	ittt	lt
 23e2ee4:	2000      	movlt	r0, #0
 23e2ee6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 23e2eea:	e006      	blt.n	23e2efa <__aeabi_ldivmod+0x1e>
 23e2eec:	bf08      	it	eq
 23e2eee:	2800      	cmpeq	r0, #0
 23e2ef0:	bf1c      	itt	ne
 23e2ef2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 23e2ef6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23e2efa:	f000 b9cd 	b.w	23e3298 <__aeabi_idiv0>
 23e2efe:	f1ad 0c08 	sub.w	ip, sp, #8
 23e2f02:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 23e2f06:	2900      	cmp	r1, #0
 23e2f08:	db09      	blt.n	23e2f1e <__aeabi_ldivmod+0x42>
 23e2f0a:	2b00      	cmp	r3, #0
 23e2f0c:	db1a      	blt.n	23e2f44 <__aeabi_ldivmod+0x68>
 23e2f0e:	f000 f84d 	bl	23e2fac <__udivmoddi4>
 23e2f12:	f8dd e004 	ldr.w	lr, [sp, #4]
 23e2f16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23e2f1a:	b004      	add	sp, #16
 23e2f1c:	4770      	bx	lr
 23e2f1e:	4240      	negs	r0, r0
 23e2f20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e2f24:	2b00      	cmp	r3, #0
 23e2f26:	db1b      	blt.n	23e2f60 <__aeabi_ldivmod+0x84>
 23e2f28:	f000 f840 	bl	23e2fac <__udivmoddi4>
 23e2f2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 23e2f30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23e2f34:	b004      	add	sp, #16
 23e2f36:	4240      	negs	r0, r0
 23e2f38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e2f3c:	4252      	negs	r2, r2
 23e2f3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e2f42:	4770      	bx	lr
 23e2f44:	4252      	negs	r2, r2
 23e2f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e2f4a:	f000 f82f 	bl	23e2fac <__udivmoddi4>
 23e2f4e:	f8dd e004 	ldr.w	lr, [sp, #4]
 23e2f52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23e2f56:	b004      	add	sp, #16
 23e2f58:	4240      	negs	r0, r0
 23e2f5a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e2f5e:	4770      	bx	lr
 23e2f60:	4252      	negs	r2, r2
 23e2f62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e2f66:	f000 f821 	bl	23e2fac <__udivmoddi4>
 23e2f6a:	f8dd e004 	ldr.w	lr, [sp, #4]
 23e2f6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23e2f72:	b004      	add	sp, #16
 23e2f74:	4252      	negs	r2, r2
 23e2f76:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e2f7a:	4770      	bx	lr

023e2f7c <__aeabi_uldivmod>:
 23e2f7c:	b953      	cbnz	r3, 23e2f94 <__aeabi_uldivmod+0x18>
 23e2f7e:	b94a      	cbnz	r2, 23e2f94 <__aeabi_uldivmod+0x18>
 23e2f80:	2900      	cmp	r1, #0
 23e2f82:	bf08      	it	eq
 23e2f84:	2800      	cmpeq	r0, #0
 23e2f86:	bf1c      	itt	ne
 23e2f88:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 23e2f8c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23e2f90:	f000 b982 	b.w	23e3298 <__aeabi_idiv0>
 23e2f94:	f1ad 0c08 	sub.w	ip, sp, #8
 23e2f98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 23e2f9c:	f000 f806 	bl	23e2fac <__udivmoddi4>
 23e2fa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 23e2fa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23e2fa8:	b004      	add	sp, #16
 23e2faa:	4770      	bx	lr

023e2fac <__udivmoddi4>:
 23e2fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23e2fb0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 23e2fb2:	4604      	mov	r4, r0
 23e2fb4:	460f      	mov	r7, r1
 23e2fb6:	2b00      	cmp	r3, #0
 23e2fb8:	d148      	bne.n	23e304c <__udivmoddi4+0xa0>
 23e2fba:	428a      	cmp	r2, r1
 23e2fbc:	4694      	mov	ip, r2
 23e2fbe:	d961      	bls.n	23e3084 <__udivmoddi4+0xd8>
 23e2fc0:	fab2 f382 	clz	r3, r2
 23e2fc4:	b143      	cbz	r3, 23e2fd8 <__udivmoddi4+0x2c>
 23e2fc6:	f1c3 0120 	rsb	r1, r3, #32
 23e2fca:	409f      	lsls	r7, r3
 23e2fcc:	fa02 fc03 	lsl.w	ip, r2, r3
 23e2fd0:	409c      	lsls	r4, r3
 23e2fd2:	fa20 f101 	lsr.w	r1, r0, r1
 23e2fd6:	430f      	orrs	r7, r1
 23e2fd8:	ea4f 411c 	mov.w	r1, ip, lsr #16
 23e2fdc:	fa1f fe8c 	uxth.w	lr, ip
 23e2fe0:	0c22      	lsrs	r2, r4, #16
 23e2fe2:	fbb7 f6f1 	udiv	r6, r7, r1
 23e2fe6:	fb01 7716 	mls	r7, r1, r6, r7
 23e2fea:	fb06 f00e 	mul.w	r0, r6, lr
 23e2fee:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 23e2ff2:	4290      	cmp	r0, r2
 23e2ff4:	d908      	bls.n	23e3008 <__udivmoddi4+0x5c>
 23e2ff6:	eb1c 0202 	adds.w	r2, ip, r2
 23e2ffa:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 23e2ffe:	d202      	bcs.n	23e3006 <__udivmoddi4+0x5a>
 23e3000:	4290      	cmp	r0, r2
 23e3002:	f200 8137 	bhi.w	23e3274 <__udivmoddi4+0x2c8>
 23e3006:	463e      	mov	r6, r7
 23e3008:	1a12      	subs	r2, r2, r0
 23e300a:	b2a4      	uxth	r4, r4
 23e300c:	fbb2 f0f1 	udiv	r0, r2, r1
 23e3010:	fb01 2210 	mls	r2, r1, r0, r2
 23e3014:	fb00 fe0e 	mul.w	lr, r0, lr
 23e3018:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 23e301c:	45a6      	cmp	lr, r4
 23e301e:	d908      	bls.n	23e3032 <__udivmoddi4+0x86>
 23e3020:	eb1c 0404 	adds.w	r4, ip, r4
 23e3024:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 23e3028:	d202      	bcs.n	23e3030 <__udivmoddi4+0x84>
 23e302a:	45a6      	cmp	lr, r4
 23e302c:	f200 811c 	bhi.w	23e3268 <__udivmoddi4+0x2bc>
 23e3030:	4610      	mov	r0, r2
 23e3032:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 23e3036:	eba4 040e 	sub.w	r4, r4, lr
 23e303a:	2600      	movs	r6, #0
 23e303c:	b11d      	cbz	r5, 23e3046 <__udivmoddi4+0x9a>
 23e303e:	40dc      	lsrs	r4, r3
 23e3040:	2300      	movs	r3, #0
 23e3042:	e9c5 4300 	strd	r4, r3, [r5]
 23e3046:	4631      	mov	r1, r6
 23e3048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23e304c:	428b      	cmp	r3, r1
 23e304e:	d909      	bls.n	23e3064 <__udivmoddi4+0xb8>
 23e3050:	2d00      	cmp	r5, #0
 23e3052:	f000 80fd 	beq.w	23e3250 <__udivmoddi4+0x2a4>
 23e3056:	2600      	movs	r6, #0
 23e3058:	e9c5 0100 	strd	r0, r1, [r5]
 23e305c:	4630      	mov	r0, r6
 23e305e:	4631      	mov	r1, r6
 23e3060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23e3064:	fab3 f683 	clz	r6, r3
 23e3068:	2e00      	cmp	r6, #0
 23e306a:	d14b      	bne.n	23e3104 <__udivmoddi4+0x158>
 23e306c:	428b      	cmp	r3, r1
 23e306e:	f0c0 80f2 	bcc.w	23e3256 <__udivmoddi4+0x2aa>
 23e3072:	4282      	cmp	r2, r0
 23e3074:	f240 80ef 	bls.w	23e3256 <__udivmoddi4+0x2aa>
 23e3078:	4630      	mov	r0, r6
 23e307a:	2d00      	cmp	r5, #0
 23e307c:	d0e3      	beq.n	23e3046 <__udivmoddi4+0x9a>
 23e307e:	e9c5 4700 	strd	r4, r7, [r5]
 23e3082:	e7e0      	b.n	23e3046 <__udivmoddi4+0x9a>
 23e3084:	b902      	cbnz	r2, 23e3088 <__udivmoddi4+0xdc>
 23e3086:	deff      	udf	#255	; 0xff
 23e3088:	fab2 f382 	clz	r3, r2
 23e308c:	2b00      	cmp	r3, #0
 23e308e:	f040 809d 	bne.w	23e31cc <__udivmoddi4+0x220>
 23e3092:	1a89      	subs	r1, r1, r2
 23e3094:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 23e3098:	b297      	uxth	r7, r2
 23e309a:	2601      	movs	r6, #1
 23e309c:	0c20      	lsrs	r0, r4, #16
 23e309e:	fbb1 f2fe 	udiv	r2, r1, lr
 23e30a2:	fb0e 1112 	mls	r1, lr, r2, r1
 23e30a6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23e30aa:	fb07 f002 	mul.w	r0, r7, r2
 23e30ae:	4288      	cmp	r0, r1
 23e30b0:	d90f      	bls.n	23e30d2 <__udivmoddi4+0x126>
 23e30b2:	eb1c 0101 	adds.w	r1, ip, r1
 23e30b6:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 23e30ba:	bf2c      	ite	cs
 23e30bc:	f04f 0901 	movcs.w	r9, #1
 23e30c0:	f04f 0900 	movcc.w	r9, #0
 23e30c4:	4288      	cmp	r0, r1
 23e30c6:	d903      	bls.n	23e30d0 <__udivmoddi4+0x124>
 23e30c8:	f1b9 0f00 	cmp.w	r9, #0
 23e30cc:	f000 80cf 	beq.w	23e326e <__udivmoddi4+0x2c2>
 23e30d0:	4642      	mov	r2, r8
 23e30d2:	1a09      	subs	r1, r1, r0
 23e30d4:	b2a4      	uxth	r4, r4
 23e30d6:	fbb1 f0fe 	udiv	r0, r1, lr
 23e30da:	fb0e 1110 	mls	r1, lr, r0, r1
 23e30de:	fb00 f707 	mul.w	r7, r0, r7
 23e30e2:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 23e30e6:	42a7      	cmp	r7, r4
 23e30e8:	d908      	bls.n	23e30fc <__udivmoddi4+0x150>
 23e30ea:	eb1c 0404 	adds.w	r4, ip, r4
 23e30ee:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 23e30f2:	d202      	bcs.n	23e30fa <__udivmoddi4+0x14e>
 23e30f4:	42a7      	cmp	r7, r4
 23e30f6:	f200 80b4 	bhi.w	23e3262 <__udivmoddi4+0x2b6>
 23e30fa:	4608      	mov	r0, r1
 23e30fc:	1be4      	subs	r4, r4, r7
 23e30fe:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 23e3102:	e79b      	b.n	23e303c <__udivmoddi4+0x90>
 23e3104:	f1c6 0720 	rsb	r7, r6, #32
 23e3108:	40b3      	lsls	r3, r6
 23e310a:	fa01 f406 	lsl.w	r4, r1, r6
 23e310e:	fa22 fc07 	lsr.w	ip, r2, r7
 23e3112:	40f9      	lsrs	r1, r7
 23e3114:	40b2      	lsls	r2, r6
 23e3116:	ea4c 0c03 	orr.w	ip, ip, r3
 23e311a:	fa20 f307 	lsr.w	r3, r0, r7
 23e311e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 23e3122:	431c      	orrs	r4, r3
 23e3124:	fa1f fe8c 	uxth.w	lr, ip
 23e3128:	fa00 f306 	lsl.w	r3, r0, r6
 23e312c:	0c20      	lsrs	r0, r4, #16
 23e312e:	fbb1 f8f9 	udiv	r8, r1, r9
 23e3132:	fb09 1118 	mls	r1, r9, r8, r1
 23e3136:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23e313a:	fb08 f00e 	mul.w	r0, r8, lr
 23e313e:	4288      	cmp	r0, r1
 23e3140:	d90f      	bls.n	23e3162 <__udivmoddi4+0x1b6>
 23e3142:	eb1c 0101 	adds.w	r1, ip, r1
 23e3146:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 23e314a:	bf2c      	ite	cs
 23e314c:	f04f 0b01 	movcs.w	fp, #1
 23e3150:	f04f 0b00 	movcc.w	fp, #0
 23e3154:	4288      	cmp	r0, r1
 23e3156:	d903      	bls.n	23e3160 <__udivmoddi4+0x1b4>
 23e3158:	f1bb 0f00 	cmp.w	fp, #0
 23e315c:	f000 808d 	beq.w	23e327a <__udivmoddi4+0x2ce>
 23e3160:	46d0      	mov	r8, sl
 23e3162:	1a09      	subs	r1, r1, r0
 23e3164:	b2a4      	uxth	r4, r4
 23e3166:	fbb1 f0f9 	udiv	r0, r1, r9
 23e316a:	fb09 1110 	mls	r1, r9, r0, r1
 23e316e:	fb00 fe0e 	mul.w	lr, r0, lr
 23e3172:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 23e3176:	458e      	cmp	lr, r1
 23e3178:	d907      	bls.n	23e318a <__udivmoddi4+0x1de>
 23e317a:	eb1c 0101 	adds.w	r1, ip, r1
 23e317e:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 23e3182:	d201      	bcs.n	23e3188 <__udivmoddi4+0x1dc>
 23e3184:	458e      	cmp	lr, r1
 23e3186:	d87f      	bhi.n	23e3288 <__udivmoddi4+0x2dc>
 23e3188:	4620      	mov	r0, r4
 23e318a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 23e318e:	eba1 010e 	sub.w	r1, r1, lr
 23e3192:	fba0 9802 	umull	r9, r8, r0, r2
 23e3196:	4541      	cmp	r1, r8
 23e3198:	464c      	mov	r4, r9
 23e319a:	46c6      	mov	lr, r8
 23e319c:	d302      	bcc.n	23e31a4 <__udivmoddi4+0x1f8>
 23e319e:	d106      	bne.n	23e31ae <__udivmoddi4+0x202>
 23e31a0:	454b      	cmp	r3, r9
 23e31a2:	d204      	bcs.n	23e31ae <__udivmoddi4+0x202>
 23e31a4:	3801      	subs	r0, #1
 23e31a6:	ebb9 0402 	subs.w	r4, r9, r2
 23e31aa:	eb68 0e0c 	sbc.w	lr, r8, ip
 23e31ae:	2d00      	cmp	r5, #0
 23e31b0:	d070      	beq.n	23e3294 <__udivmoddi4+0x2e8>
 23e31b2:	1b1a      	subs	r2, r3, r4
 23e31b4:	eb61 010e 	sbc.w	r1, r1, lr
 23e31b8:	fa22 f306 	lsr.w	r3, r2, r6
 23e31bc:	fa01 f707 	lsl.w	r7, r1, r7
 23e31c0:	40f1      	lsrs	r1, r6
 23e31c2:	2600      	movs	r6, #0
 23e31c4:	431f      	orrs	r7, r3
 23e31c6:	e9c5 7100 	strd	r7, r1, [r5]
 23e31ca:	e73c      	b.n	23e3046 <__udivmoddi4+0x9a>
 23e31cc:	fa02 fc03 	lsl.w	ip, r2, r3
 23e31d0:	f1c3 0020 	rsb	r0, r3, #32
 23e31d4:	fa01 f203 	lsl.w	r2, r1, r3
 23e31d8:	fa21 f600 	lsr.w	r6, r1, r0
 23e31dc:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 23e31e0:	fa24 f100 	lsr.w	r1, r4, r0
 23e31e4:	fa1f f78c 	uxth.w	r7, ip
 23e31e8:	409c      	lsls	r4, r3
 23e31ea:	4311      	orrs	r1, r2
 23e31ec:	fbb6 f0fe 	udiv	r0, r6, lr
 23e31f0:	0c0a      	lsrs	r2, r1, #16
 23e31f2:	fb0e 6610 	mls	r6, lr, r0, r6
 23e31f6:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 23e31fa:	fb00 f607 	mul.w	r6, r0, r7
 23e31fe:	4296      	cmp	r6, r2
 23e3200:	d90e      	bls.n	23e3220 <__udivmoddi4+0x274>
 23e3202:	eb1c 0202 	adds.w	r2, ip, r2
 23e3206:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 23e320a:	bf2c      	ite	cs
 23e320c:	f04f 0901 	movcs.w	r9, #1
 23e3210:	f04f 0900 	movcc.w	r9, #0
 23e3214:	4296      	cmp	r6, r2
 23e3216:	d902      	bls.n	23e321e <__udivmoddi4+0x272>
 23e3218:	f1b9 0f00 	cmp.w	r9, #0
 23e321c:	d031      	beq.n	23e3282 <__udivmoddi4+0x2d6>
 23e321e:	4640      	mov	r0, r8
 23e3220:	1b92      	subs	r2, r2, r6
 23e3222:	b289      	uxth	r1, r1
 23e3224:	fbb2 f6fe 	udiv	r6, r2, lr
 23e3228:	fb0e 2216 	mls	r2, lr, r6, r2
 23e322c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 23e3230:	fb06 f207 	mul.w	r2, r6, r7
 23e3234:	428a      	cmp	r2, r1
 23e3236:	d907      	bls.n	23e3248 <__udivmoddi4+0x29c>
 23e3238:	eb1c 0101 	adds.w	r1, ip, r1
 23e323c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 23e3240:	d201      	bcs.n	23e3246 <__udivmoddi4+0x29a>
 23e3242:	428a      	cmp	r2, r1
 23e3244:	d823      	bhi.n	23e328e <__udivmoddi4+0x2e2>
 23e3246:	4646      	mov	r6, r8
 23e3248:	1a89      	subs	r1, r1, r2
 23e324a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 23e324e:	e725      	b.n	23e309c <__udivmoddi4+0xf0>
 23e3250:	462e      	mov	r6, r5
 23e3252:	4628      	mov	r0, r5
 23e3254:	e6f7      	b.n	23e3046 <__udivmoddi4+0x9a>
 23e3256:	1a84      	subs	r4, r0, r2
 23e3258:	eb61 0303 	sbc.w	r3, r1, r3
 23e325c:	2001      	movs	r0, #1
 23e325e:	461f      	mov	r7, r3
 23e3260:	e70b      	b.n	23e307a <__udivmoddi4+0xce>
 23e3262:	4464      	add	r4, ip
 23e3264:	3802      	subs	r0, #2
 23e3266:	e749      	b.n	23e30fc <__udivmoddi4+0x150>
 23e3268:	4464      	add	r4, ip
 23e326a:	3802      	subs	r0, #2
 23e326c:	e6e1      	b.n	23e3032 <__udivmoddi4+0x86>
 23e326e:	3a02      	subs	r2, #2
 23e3270:	4461      	add	r1, ip
 23e3272:	e72e      	b.n	23e30d2 <__udivmoddi4+0x126>
 23e3274:	3e02      	subs	r6, #2
 23e3276:	4462      	add	r2, ip
 23e3278:	e6c6      	b.n	23e3008 <__udivmoddi4+0x5c>
 23e327a:	f1a8 0802 	sub.w	r8, r8, #2
 23e327e:	4461      	add	r1, ip
 23e3280:	e76f      	b.n	23e3162 <__udivmoddi4+0x1b6>
 23e3282:	3802      	subs	r0, #2
 23e3284:	4462      	add	r2, ip
 23e3286:	e7cb      	b.n	23e3220 <__udivmoddi4+0x274>
 23e3288:	3802      	subs	r0, #2
 23e328a:	4461      	add	r1, ip
 23e328c:	e77d      	b.n	23e318a <__udivmoddi4+0x1de>
 23e328e:	3e02      	subs	r6, #2
 23e3290:	4461      	add	r1, ip
 23e3292:	e7d9      	b.n	23e3248 <__udivmoddi4+0x29c>
 23e3294:	462e      	mov	r6, r5
 23e3296:	e6d6      	b.n	23e3046 <__udivmoddi4+0x9a>

023e3298 <__aeabi_idiv0>:
 23e3298:	4770      	bx	lr
 23e329a:	bf00      	nop

023e329c <strcmp>:
 23e329c:	f810 2b01 	ldrb.w	r2, [r0], #1
 23e32a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 23e32a4:	2a01      	cmp	r2, #1
 23e32a6:	bf28      	it	cs
 23e32a8:	429a      	cmpcs	r2, r3
 23e32aa:	d0f7      	beq.n	23e329c <strcmp>
 23e32ac:	1ad0      	subs	r0, r2, r3
 23e32ae:	4770      	bx	lr

023e32b0 <strlen>:
 23e32b0:	4603      	mov	r3, r0
 23e32b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 23e32b6:	2a00      	cmp	r2, #0
 23e32b8:	d1fb      	bne.n	23e32b2 <strlen+0x2>
 23e32ba:	1a18      	subs	r0, r3, r0
 23e32bc:	3801      	subs	r0, #1
 23e32be:	4770      	bx	lr

023e32c0 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23e32c0:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23e32c2:	f016 f991 	bl	23f95e8 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23e32c6:	2500      	movs	r5, #0
 23e32c8:	4e05      	ldr	r6, [pc, #20]	; (23e32e0 <module_user_init+0x20>)
 23e32ca:	4c06      	ldr	r4, [pc, #24]	; (23e32e4 <module_user_init+0x24>)
 23e32cc:	1ba4      	subs	r4, r4, r6
 23e32ce:	08a4      	lsrs	r4, r4, #2
 23e32d0:	42ac      	cmp	r4, r5
 23e32d2:	d100      	bne.n	23e32d6 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23e32d4:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23e32d6:	f856 3b04 	ldr.w	r3, [r6], #4
 23e32da:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23e32dc:	3501      	adds	r5, #1
 23e32de:	e7f7      	b.n	23e32d0 <module_user_init+0x10>
 23e32e0:	023fffbc 	.word	0x023fffbc
 23e32e4:	023ffff8 	.word	0x023ffff8

023e32e8 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23e32e8:	f009 b8f2 	b.w	23ec4d0 <setup>

023e32ec <module_user_loop>:
}

void module_user_loop() {
 23e32ec:	b508      	push	{r3, lr}
    loop();
 23e32ee:	f009 faeb 	bl	23ec8c8 <loop>
    _post_loop();
}
 23e32f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23e32f6:	f016 b92f 	b.w	23f9558 <_post_loop>

023e32fa <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23e32fa:	f013 bf23 	b.w	23f7144 <malloc>

023e32fe <_Znaj>:
 23e32fe:	f013 bf21 	b.w	23f7144 <malloc>

023e3302 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23e3302:	f013 bf2d 	b.w	23f7160 <free>
	...

023e3308 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23e3308:	4674      	mov	r4, lr
void __cxa_pure_virtual() {
 23e330a:	b500      	push	{lr}
 23e330c:	b08d      	sub	sp, #52	; 0x34
  PANIC(PureVirtualCall,"Call on pure virtual");
 23e330e:	222c      	movs	r2, #44	; 0x2c
 23e3310:	2100      	movs	r1, #0
 23e3312:	a801      	add	r0, sp, #4
 23e3314:	f019 f867 	bl	23fc3e6 <memset>
 23e3318:	4b05      	ldr	r3, [pc, #20]	; (23e3330 <__cxa_pure_virtual+0x28>)
 23e331a:	9404      	str	r4, [sp, #16]
 23e331c:	9301      	str	r3, [sp, #4]
 23e331e:	4b05      	ldr	r3, [pc, #20]	; (23e3334 <__cxa_pure_virtual+0x2c>)
 23e3320:	9302      	str	r3, [sp, #8]
}

__attribute__((always_inline)) static inline uint32_t __get_PC(void) { 
    uint32_t result; 

    asm volatile ("mov %0, pc\n" : "=r" (result) ); 
 23e3322:	467b      	mov	r3, pc
 23e3324:	2100      	movs	r1, #0
 23e3326:	a801      	add	r0, sp, #4
 23e3328:	9303      	str	r3, [sp, #12]
 23e332a:	f013 fca3 	bl	23f6c74 <panic_ext>
  while (1);
 23e332e:	e7fe      	b.n	23e332e <__cxa_pure_virtual+0x26>
 23e3330:	000c002c 	.word	0x000c002c
 23e3334:	023fc8e8 	.word	0x023fc8e8

023e3338 <__register_exitproc>:
int __cxa_atexit(void (*f)(void *), void *p, void *d) {
    return 0;
}

void __register_exitproc(int type, void (*fn)(void), void* arg, void* d) {
}
 23e3338:	4770      	bx	lr

023e333a <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 23e333a:	b158      	cbz	r0, 23e3354 <null_ptr_check+0x1a>
 23e333c:	68c3      	ldr	r3, [r0, #12]
 23e333e:	b14b      	cbz	r3, 23e3354 <null_ptr_check+0x1a>
 23e3340:	6903      	ldr	r3, [r0, #16]
 23e3342:	b13b      	cbz	r3, 23e3354 <null_ptr_check+0x1a>
 23e3344:	6943      	ldr	r3, [r0, #20]
 23e3346:	b12b      	cbz	r3, 23e3354 <null_ptr_check+0x1a>
 23e3348:	6840      	ldr	r0, [r0, #4]
 23e334a:	fab0 f080 	clz	r0, r0
 23e334e:	0940      	lsrs	r0, r0, #5
 23e3350:	4240      	negs	r0, r0
 23e3352:	4770      	bx	lr
        (dev->intf_ptr == NULL))
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 23e3354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        /* Device structure is fine */
        rslt = BMP3_OK;
    }

    return rslt;
}
 23e3358:	4770      	bx	lr

023e335a <compensate_data>:
{
 23e335a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23e335e:	4682      	mov	sl, r0
 23e3360:	ed2d 8b06 	vpush	{d8-d10}
 23e3364:	4688      	mov	r8, r1
 23e3366:	461c      	mov	r4, r3
    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 23e3368:	4615      	mov	r5, r2
 23e336a:	2a00      	cmp	r2, #0
 23e336c:	f000 80dd 	beq.w	23e352a <compensate_data+0x1d0>
        if (sensor_comp & (BMP3_PRESS | BMP3_TEMP))
 23e3370:	f010 0f03 	tst.w	r0, #3
 23e3374:	d022      	beq.n	23e33bc <compensate_data+0x62>
    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 23e3376:	6848      	ldr	r0, [r1, #4]
 23e3378:	f7ff f8e0 	bl	23e253c <__aeabi_ui2d>
 23e337c:	e9d4 2300 	ldrd	r2, r3, [r4]
 23e3380:	f7fe ff9e 	bl	23e22c0 <__aeabi_dsub>
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 23e3384:	4602      	mov	r2, r0
 23e3386:	460b      	mov	r3, r1
    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 23e3388:	4606      	mov	r6, r0
 23e338a:	460f      	mov	r7, r1
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 23e338c:	f7ff f950 	bl	23e2630 <__aeabi_dmul>
 23e3390:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 23e3394:	f7ff f94c 	bl	23e2630 <__aeabi_dmul>
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 23e3398:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 23e339c:	ec41 0b18 	vmov	d8, r0, r1
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 23e33a0:	4630      	mov	r0, r6
 23e33a2:	4639      	mov	r1, r7
 23e33a4:	f7ff f944 	bl	23e2630 <__aeabi_dmul>
 23e33a8:	4602      	mov	r2, r0
 23e33aa:	460b      	mov	r3, r1
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 23e33ac:	ec51 0b18 	vmov	r0, r1, d8
 23e33b0:	f7fe ff88 	bl	23e22c4 <__adddf3>
 23e33b4:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 23e33b8:	e9c5 0100 	strd	r0, r1, [r5]
        if (sensor_comp & BMP3_PRESS)
 23e33bc:	f01a 0001 	ands.w	r0, sl, #1
 23e33c0:	f000 80af 	beq.w	23e3522 <compensate_data+0x1c8>
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 23e33c4:	e9d4 ab1c 	ldrd	sl, fp, [r4, #112]	; 0x70
        pow_output = (float) base * pow_output;
 23e33c8:	4659      	mov	r1, fp
 23e33ca:	4650      	mov	r0, sl
 23e33cc:	f7ff fc28 	bl	23e2c20 <__aeabi_d2f>
 23e33d0:	ee08 0a10 	vmov	s16, r0
 23e33d4:	ee68 8a08 	vmul.f32	s17, s16, s16
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e33d8:	ee18 0a90 	vmov	r0, s17
 23e33dc:	f7ff f8d0 	bl	23e2580 <__aeabi_f2d>
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e33e0:	ee68 7a28 	vmul.f32	s15, s16, s17
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e33e4:	ec41 0b19 	vmov	d9, r0, r1
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e33e8:	ee17 0a90 	vmov	r0, s15
 23e33ec:	f7ff f8c8 	bl	23e2580 <__aeabi_f2d>
 23e33f0:	ec41 0b1a 	vmov	d10, r0, r1
    partial_out2 = uncomp_data->pressure *
 23e33f4:	f8d8 0000 	ldr.w	r0, [r8]
 23e33f8:	f7ff f8a0 	bl	23e253c <__aeabi_ui2d>
 23e33fc:	4689      	mov	r9, r1
 23e33fe:	4680      	mov	r8, r0
        pow_output = (float) base * pow_output;
 23e3400:	f7ff fc0e 	bl	23e2c20 <__aeabi_d2f>
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 23e3404:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
        pow_output = (float) base * pow_output;
 23e3408:	ee08 0a10 	vmov	s16, r0
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 23e340c:	4659      	mov	r1, fp
 23e340e:	4650      	mov	r0, sl
 23e3410:	f7ff f90e 	bl	23e2630 <__aeabi_dmul>
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 23e3414:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 23e3418:	f7fe ff54 	bl	23e22c4 <__adddf3>
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e341c:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 23e3420:	4606      	mov	r6, r0
 23e3422:	460f      	mov	r7, r1
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e3424:	ec51 0b19 	vmov	r0, r1, d9
 23e3428:	f7ff f902 	bl	23e2630 <__aeabi_dmul>
 23e342c:	4602      	mov	r2, r0
 23e342e:	460b      	mov	r3, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 23e3430:	4630      	mov	r0, r6
 23e3432:	4639      	mov	r1, r7
 23e3434:	f7fe ff46 	bl	23e22c4 <__adddf3>
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e3438:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 23e343c:	4606      	mov	r6, r0
 23e343e:	460f      	mov	r7, r1
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e3440:	ec51 0b1a 	vmov	r0, r1, d10
 23e3444:	f7ff f8f4 	bl	23e2630 <__aeabi_dmul>
 23e3448:	4602      	mov	r2, r0
 23e344a:	460b      	mov	r3, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 23e344c:	4630      	mov	r0, r6
 23e344e:	4639      	mov	r1, r7
 23e3450:	f7fe ff38 	bl	23e22c4 <__adddf3>
    partial_out2 = uncomp_data->pressure *
 23e3454:	4642      	mov	r2, r8
 23e3456:	464b      	mov	r3, r9
 23e3458:	f7ff f8ea 	bl	23e2630 <__aeabi_dmul>
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 23e345c:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
    partial_out2 = uncomp_data->pressure *
 23e3460:	4606      	mov	r6, r0
 23e3462:	460f      	mov	r7, r1
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 23e3464:	4650      	mov	r0, sl
 23e3466:	4659      	mov	r1, fp
 23e3468:	f7ff f8e2 	bl	23e2630 <__aeabi_dmul>
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 23e346c:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 23e3470:	f7fe ff28 	bl	23e22c4 <__adddf3>
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e3474:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 23e3478:	4680      	mov	r8, r0
 23e347a:	4689      	mov	r9, r1
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e347c:	ec51 0b19 	vmov	r0, r1, d9
 23e3480:	f7ff f8d6 	bl	23e2630 <__aeabi_dmul>
 23e3484:	4602      	mov	r2, r0
 23e3486:	460b      	mov	r3, r1
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 23e3488:	4640      	mov	r0, r8
 23e348a:	4649      	mov	r1, r9
 23e348c:	f7fe ff1a 	bl	23e22c4 <__adddf3>
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e3490:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 23e3494:	4680      	mov	r8, r0
 23e3496:	4689      	mov	r9, r1
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e3498:	ec51 0b1a 	vmov	r0, r1, d10
 23e349c:	f7ff f8c8 	bl	23e2630 <__aeabi_dmul>
 23e34a0:	4602      	mov	r2, r0
 23e34a2:	460b      	mov	r3, r1
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 23e34a4:	4640      	mov	r0, r8
 23e34a6:	4649      	mov	r1, r9
 23e34a8:	f7fe ff0c 	bl	23e22c4 <__adddf3>
 23e34ac:	4602      	mov	r2, r0
 23e34ae:	460b      	mov	r3, r1
    comp_press = partial_out1 + partial_out2 + partial_data4;
 23e34b0:	4630      	mov	r0, r6
 23e34b2:	4639      	mov	r1, r7
 23e34b4:	f7fe ff06 	bl	23e22c4 <__adddf3>
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 23e34b8:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    comp_press = partial_out1 + partial_out2 + partial_data4;
 23e34bc:	4606      	mov	r6, r0
 23e34be:	460f      	mov	r7, r1
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 23e34c0:	4650      	mov	r0, sl
 23e34c2:	4659      	mov	r1, fp
 23e34c4:	f7ff f8b4 	bl	23e2630 <__aeabi_dmul>
 23e34c8:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
 23e34cc:	f7fe fefa 	bl	23e22c4 <__adddf3>
        pow_output = (float) base * pow_output;
 23e34d0:	ee68 8a08 	vmul.f32	s17, s16, s16
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 23e34d4:	4680      	mov	r8, r0
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 23e34d6:	ee18 0a90 	vmov	r0, s17
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 23e34da:	4689      	mov	r9, r1
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 23e34dc:	f7ff f850 	bl	23e2580 <__aeabi_f2d>
 23e34e0:	4602      	mov	r2, r0
 23e34e2:	460b      	mov	r3, r1
    partial_data3 = partial_data1 * partial_data2;
 23e34e4:	4640      	mov	r0, r8
 23e34e6:	4649      	mov	r1, r9
 23e34e8:	f7ff f8a2 	bl	23e2630 <__aeabi_dmul>
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 23e34ec:	ee68 7a28 	vmul.f32	s15, s16, s17
    partial_data3 = partial_data1 * partial_data2;
 23e34f0:	4680      	mov	r8, r0
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 23e34f2:	ee17 0a90 	vmov	r0, s15
    partial_data3 = partial_data1 * partial_data2;
 23e34f6:	4689      	mov	r9, r1
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 23e34f8:	f7ff f842 	bl	23e2580 <__aeabi_f2d>
 23e34fc:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
 23e3500:	f7ff f896 	bl	23e2630 <__aeabi_dmul>
 23e3504:	4602      	mov	r2, r0
 23e3506:	460b      	mov	r3, r1
 23e3508:	4640      	mov	r0, r8
 23e350a:	4649      	mov	r1, r9
 23e350c:	f7fe feda 	bl	23e22c4 <__adddf3>
 23e3510:	4602      	mov	r2, r0
 23e3512:	460b      	mov	r3, r1
    comp_press = partial_out1 + partial_out2 + partial_data4;
 23e3514:	4630      	mov	r0, r6
 23e3516:	4639      	mov	r1, r7
 23e3518:	f7fe fed4 	bl	23e22c4 <__adddf3>
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 23e351c:	e9c5 0102 	strd	r0, r1, [r5, #8]
    int8_t rslt = BMP3_OK;
 23e3520:	2000      	movs	r0, #0
}
 23e3522:	ecbd 8b06 	vpop	{d8-d10}
 23e3526:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rslt = BMP3_E_NULL_PTR;
 23e352a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e352e:	e7f8      	b.n	23e3522 <compensate_data+0x1c8>

023e3530 <validate_osr_and_odr_settings>:
{
 23e3530:	b510      	push	{r4, lr}
 23e3532:	4604      	mov	r4, r0
 23e3534:	b092      	sub	sp, #72	; 0x48
    uint32_t odr[18] = {
 23e3536:	2248      	movs	r2, #72	; 0x48
 23e3538:	4668      	mov	r0, sp
 23e353a:	4920      	ldr	r1, [pc, #128]	; (23e35bc <validate_osr_and_odr_settings+0x8c>)
 23e353c:	f018 ff46 	bl	23fc3cc <memcpy>
    if (dev->settings.press_en)
 23e3540:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 23e3544:	b173      	cbz	r3, 23e3564 <validate_osr_and_odr_settings+0x34>
    float pow_output = 1;
 23e3546:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 23e354a:	f894 30b3 	ldrb.w	r3, [r4, #179]	; 0xb3
    while (power != 0)
 23e354e:	bb5b      	cbnz	r3, 23e35a8 <validate_osr_and_odr_settings+0x78>
    press_meas_t = (BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 23e3550:	eddf 6a1b 	vldr	s13, [pc, #108]	; 23e35c0 <validate_osr_and_odr_settings+0x90>
 23e3554:	eddf 7a1b 	vldr	s15, [pc, #108]	; 23e35c4 <validate_osr_and_odr_settings+0x94>
 23e3558:	eee7 7a26 	vfma.f32	s15, s14, s13
 23e355c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23e3560:	ee17 3a90 	vmov	r3, s15
    if (dev->settings.temp_en)
 23e3564:	f894 20b2 	ldrb.w	r2, [r4, #178]	; 0xb2
 23e3568:	b17a      	cbz	r2, 23e358a <validate_osr_and_odr_settings+0x5a>
    float pow_output = 1;
 23e356a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 23e356e:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
    while (power != 0)
 23e3572:	b9f2      	cbnz	r2, 23e35b2 <validate_osr_and_odr_settings+0x82>
    temp_meas_t = (BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 23e3574:	eddf 6a12 	vldr	s13, [pc, #72]	; 23e35c0 <validate_osr_and_odr_settings+0x90>
 23e3578:	eddf 7a13 	vldr	s15, [pc, #76]	; 23e35c8 <validate_osr_and_odr_settings+0x98>
 23e357c:	eee7 7a26 	vfma.f32	s15, s14, s13
 23e3580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
        meas_t_p += calculate_temp_meas_time(dev);
 23e3584:	ee17 2a90 	vmov	r2, s15
 23e3588:	4413      	add	r3, r2
    rslt = verify_meas_time_and_odr_duration(meas_t, odr[dev->settings.odr_filter.odr]);
 23e358a:	f894 20b6 	ldrb.w	r2, [r4, #182]	; 0xb6
 23e358e:	a912      	add	r1, sp, #72	; 0x48
 23e3590:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    if (meas_t < odr_duration)
 23e3594:	f852 2c48 	ldr.w	r2, [r2, #-72]
    meas_t += meas_t_p;
 23e3598:	33ea      	adds	r3, #234	; 0xea
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 23e359a:	429a      	cmp	r2, r3
}
 23e359c:	bf94      	ite	ls
 23e359e:	f06f 0002 	mvnls.w	r0, #2
 23e35a2:	2000      	movhi	r0, #0
 23e35a4:	b012      	add	sp, #72	; 0x48
 23e35a6:	bd10      	pop	{r4, pc}
        power--;
 23e35a8:	3b01      	subs	r3, #1
        pow_output = (float) base * pow_output;
 23e35aa:	ee37 7a07 	vadd.f32	s14, s14, s14
        power--;
 23e35ae:	b2db      	uxtb	r3, r3
 23e35b0:	e7cd      	b.n	23e354e <validate_osr_and_odr_settings+0x1e>
 23e35b2:	3a01      	subs	r2, #1
        pow_output = (float) base * pow_output;
 23e35b4:	ee37 7a07 	vadd.f32	s14, s14, s14
        power--;
 23e35b8:	b2d2      	uxtb	r2, r2
 23e35ba:	e7da      	b.n	23e3572 <validate_osr_and_odr_settings+0x42>
 23e35bc:	023fc700 	.word	0x023fc700
 23e35c0:	44fa0000 	.word	0x44fa0000
 23e35c4:	43c40000 	.word	0x43c40000
 23e35c8:	439c8000 	.word	0x439c8000

023e35cc <bmp3_get_regs>:
{
 23e35cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23e35d0:	4606      	mov	r6, r0
 23e35d2:	af00      	add	r7, sp, #0
    rslt = null_ptr_check(dev);
 23e35d4:	4618      	mov	r0, r3
{
 23e35d6:	461c      	mov	r4, r3
    rslt = null_ptr_check(dev);
 23e35d8:	f7ff feaf 	bl	23e333a <null_ptr_check>
{
 23e35dc:	4688      	mov	r8, r1
 23e35de:	4691      	mov	r9, r2
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 23e35e0:	4605      	mov	r5, r0
 23e35e2:	bb88      	cbnz	r0, 23e3648 <bmp3_get_regs+0x7c>
 23e35e4:	b381      	cbz	r1, 23e3648 <bmp3_get_regs+0x7c>
        uint32_t temp_len = len + dev->dummy_byte;
 23e35e6:	7aa0      	ldrb	r0, [r4, #10]
        if (dev->intf != BMP3_I2C_INTF)
 23e35e8:	f894 c008 	ldrb.w	ip, [r4, #8]
        uint32_t temp_len = len + dev->dummy_byte;
 23e35ec:	4410      	add	r0, r2
        uint8_t temp_buff[len + dev->dummy_byte];
 23e35ee:	1dc3      	adds	r3, r0, #7
 23e35f0:	f023 0307 	bic.w	r3, r3, #7
    {
 23e35f4:	46ea      	mov	sl, sp
        uint8_t temp_buff[len + dev->dummy_byte];
 23e35f6:	ebad 0d03 	sub.w	sp, sp, r3
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 23e35fa:	68e3      	ldr	r3, [r4, #12]
        if (dev->intf != BMP3_I2C_INTF)
 23e35fc:	f1bc 0f01 	cmp.w	ip, #1
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 23e3600:	469e      	mov	lr, r3
        uint8_t temp_buff[len + dev->dummy_byte];
 23e3602:	46eb      	mov	fp, sp
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 23e3604:	6863      	ldr	r3, [r4, #4]
        if (dev->intf != BMP3_I2C_INTF)
 23e3606:	d01a      	beq.n	23e363e <bmp3_get_regs+0x72>
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 23e3608:	4602      	mov	r2, r0
 23e360a:	4669      	mov	r1, sp
 23e360c:	f046 0080 	orr.w	r0, r6, #128	; 0x80
 23e3610:	4676      	mov	r6, lr
 23e3612:	47b0      	blx	r6
 23e3614:	7260      	strb	r0, [r4, #9]
            for (idx = 0; idx < len; idx++)
 23e3616:	454d      	cmp	r5, r9
 23e3618:	d109      	bne.n	23e362e <bmp3_get_regs+0x62>
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 23e361a:	f994 0009 	ldrsb.w	r0, [r4, #9]
 23e361e:	46d5      	mov	sp, sl
            rslt = BMP3_E_COMM_FAIL;
 23e3620:	2800      	cmp	r0, #0
 23e3622:	bf18      	it	ne
 23e3624:	f06f 0006 	mvnne.w	r0, #6
}
 23e3628:	46bd      	mov	sp, r7
 23e362a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 23e362e:	7aa3      	ldrb	r3, [r4, #10]
 23e3630:	eb0b 0205 	add.w	r2, fp, r5
 23e3634:	5cd3      	ldrb	r3, [r2, r3]
 23e3636:	f808 3005 	strb.w	r3, [r8, r5]
            for (idx = 0; idx < len; idx++)
 23e363a:	3501      	adds	r5, #1
 23e363c:	e7eb      	b.n	23e3616 <bmp3_get_regs+0x4a>
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 23e363e:	4630      	mov	r0, r6
 23e3640:	4675      	mov	r5, lr
 23e3642:	47a8      	blx	r5
 23e3644:	7260      	strb	r0, [r4, #9]
 23e3646:	e7e8      	b.n	23e361a <bmp3_get_regs+0x4e>
        rslt = BMP3_E_NULL_PTR;
 23e3648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e364c:	e7ec      	b.n	23e3628 <bmp3_get_regs+0x5c>

023e364e <bmp3_set_regs>:
{
 23e364e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23e3652:	461c      	mov	r4, r3
    uint8_t temp_buff[len * 2];
 23e3654:	ea4f 0842 	mov.w	r8, r2, lsl #1
 23e3658:	f108 0307 	add.w	r3, r8, #7
 23e365c:	f023 0307 	bic.w	r3, r3, #7
{
 23e3660:	af00      	add	r7, sp, #0
 23e3662:	4606      	mov	r6, r0
    uint8_t temp_buff[len * 2];
 23e3664:	ebad 0d03 	sub.w	sp, sp, r3
    rslt = null_ptr_check(dev);
 23e3668:	4620      	mov	r0, r4
{
 23e366a:	460d      	mov	r5, r1
    uint8_t temp_buff[len * 2];
 23e366c:	4669      	mov	r1, sp
    rslt = null_ptr_check(dev);
 23e366e:	f7ff fe64 	bl	23e333a <null_ptr_check>
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 23e3672:	bb70      	cbnz	r0, 23e36d2 <bmp3_set_regs+0x84>
 23e3674:	b36e      	cbz	r6, 23e36d2 <bmp3_set_regs+0x84>
 23e3676:	b365      	cbz	r5, 23e36d2 <bmp3_set_regs+0x84>
        if (len != 0)
 23e3678:	b372      	cbz	r2, 23e36d8 <bmp3_set_regs+0x8a>
            temp_buff[0] = reg_data[0];
 23e367a:	782b      	ldrb	r3, [r5, #0]
 23e367c:	f88d 3000 	strb.w	r3, [sp]
            if (dev->intf == BMP3_SPI_INTF)
 23e3680:	7a23      	ldrb	r3, [r4, #8]
 23e3682:	b303      	cbz	r3, 23e36c6 <bmp3_set_regs+0x78>
            if (len > 1)
 23e3684:	2a01      	cmp	r2, #1
 23e3686:	d00c      	beq.n	23e36a2 <bmp3_set_regs+0x54>
    for (index = 1; index < len; index++)
 23e3688:	2301      	movs	r3, #1
        temp_buff[(index * 2) - 1] = reg_addr[index];
 23e368a:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 23e368e:	5cf0      	ldrb	r0, [r6, r3]
 23e3690:	f80c 0013 	strb.w	r0, [ip, r3, lsl #1]
        temp_buff[index * 2] = reg_data[index];
 23e3694:	5ce8      	ldrb	r0, [r5, r3]
 23e3696:	f801 0013 	strb.w	r0, [r1, r3, lsl #1]
    for (index = 1; index < len; index++)
 23e369a:	3301      	adds	r3, #1
 23e369c:	429a      	cmp	r2, r3
 23e369e:	d8f6      	bhi.n	23e368e <bmp3_set_regs+0x40>
                temp_len = len * 2;
 23e36a0:	4642      	mov	r2, r8
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 23e36a2:	6925      	ldr	r5, [r4, #16]
 23e36a4:	6863      	ldr	r3, [r4, #4]
 23e36a6:	7830      	ldrb	r0, [r6, #0]
 23e36a8:	47a8      	blx	r5
                rslt = BMP3_E_COMM_FAIL;
 23e36aa:	2800      	cmp	r0, #0
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 23e36ac:	7260      	strb	r0, [r4, #9]
                rslt = BMP3_E_COMM_FAIL;
 23e36ae:	bf18      	it	ne
 23e36b0:	f06f 0006 	mvnne.w	r0, #6
}
 23e36b4:	46bd      	mov	sp, r7
 23e36b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 23e36ba:	f816 c000 	ldrb.w	ip, [r6, r0]
 23e36be:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
 23e36c2:	f806 c000 	strb.w	ip, [r6, r0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 23e36c6:	b2d8      	uxtb	r0, r3
 23e36c8:	4282      	cmp	r2, r0
 23e36ca:	f103 0301 	add.w	r3, r3, #1
 23e36ce:	d8f4      	bhi.n	23e36ba <bmp3_set_regs+0x6c>
 23e36d0:	e7d8      	b.n	23e3684 <bmp3_set_regs+0x36>
        rslt = BMP3_E_NULL_PTR;
 23e36d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e36d6:	e7ed      	b.n	23e36b4 <bmp3_set_regs+0x66>
            rslt = BMP3_E_INVALID_LEN;
 23e36d8:	f06f 0005 	mvn.w	r0, #5
 23e36dc:	e7ea      	b.n	23e36b4 <bmp3_set_regs+0x66>

023e36de <write_power_mode>:
{
 23e36de:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23e36e0:	4603      	mov	r3, r0
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e36e2:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 23e36e4:	2201      	movs	r2, #1
 23e36e6:	f10d 010f 	add.w	r1, sp, #15
    uint8_t op_mode = dev->settings.op_mode;
 23e36ea:	f893 40b0 	ldrb.w	r4, [r3, #176]	; 0xb0
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 23e36ee:	9301      	str	r3, [sp, #4]
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e36f0:	f88d 000e 	strb.w	r0, [sp, #14]
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 23e36f4:	f7ff ff6a 	bl	23e35cc <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e36f8:	9b01      	ldr	r3, [sp, #4]
 23e36fa:	b980      	cbnz	r0, 23e371e <write_power_mode+0x40>
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 23e36fc:	f89d 200f 	ldrb.w	r2, [sp, #15]
 23e3700:	0124      	lsls	r4, r4, #4
 23e3702:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 23e3706:	f004 0430 	and.w	r4, r4, #48	; 0x30
 23e370a:	4322      	orrs	r2, r4
 23e370c:	f88d 200f 	strb.w	r2, [sp, #15]
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 23e3710:	f10d 010f 	add.w	r1, sp, #15
 23e3714:	2201      	movs	r2, #1
 23e3716:	f10d 000e 	add.w	r0, sp, #14
 23e371a:	f7ff ff98 	bl	23e364e <bmp3_set_regs>
}
 23e371e:	b004      	add	sp, #16
 23e3720:	bd10      	pop	{r4, pc}
	...

023e3724 <bmp3_set_sensor_settings>:
{
 23e3724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23e3726:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
 23e3728:	4608      	mov	r0, r1
{
 23e372a:	460d      	mov	r5, r1
    rslt = null_ptr_check(dev);
 23e372c:	f7ff fe05 	bl	23e333a <null_ptr_check>
    if (rslt == BMP3_OK)
 23e3730:	2800      	cmp	r0, #0
 23e3732:	f040 811e 	bne.w	23e3972 <bmp3_set_sensor_settings+0x24e>
    if (sub_settings & desired_settings)
 23e3736:	f014 0f06 	tst.w	r4, #6
 23e373a:	d029      	beq.n	23e3790 <bmp3_set_sensor_settings+0x6c>
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e373c:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e373e:	460b      	mov	r3, r1
 23e3740:	2201      	movs	r2, #1
 23e3742:	a901      	add	r1, sp, #4
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e3744:	f88d 0000 	strb.w	r0, [sp]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e3748:	f7ff ff40 	bl	23e35cc <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e374c:	bb00      	cbnz	r0, 23e3790 <bmp3_set_sensor_settings+0x6c>
        if (desired_settings & BMP3_SEL_PRESS_EN)
 23e374e:	07a7      	lsls	r7, r4, #30
 23e3750:	d50a      	bpl.n	23e3768 <bmp3_set_sensor_settings+0x44>
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, dev->settings.press_en);
 23e3752:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23e3756:	f895 20b1 	ldrb.w	r2, [r5, #177]	; 0xb1
 23e375a:	f023 0301 	bic.w	r3, r3, #1
 23e375e:	f002 0201 	and.w	r2, r2, #1
 23e3762:	4313      	orrs	r3, r2
 23e3764:	f88d 3004 	strb.w	r3, [sp, #4]
        if (desired_settings & BMP3_SEL_TEMP_EN)
 23e3768:	0766      	lsls	r6, r4, #29
 23e376a:	d50b      	bpl.n	23e3784 <bmp3_set_sensor_settings+0x60>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, dev->settings.temp_en);
 23e376c:	f895 30b2 	ldrb.w	r3, [r5, #178]	; 0xb2
 23e3770:	f89d 2004 	ldrb.w	r2, [sp, #4]
 23e3774:	005b      	lsls	r3, r3, #1
 23e3776:	f003 0302 	and.w	r3, r3, #2
 23e377a:	f022 0202 	bic.w	r2, r2, #2
 23e377e:	4313      	orrs	r3, r2
 23e3780:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 23e3784:	462b      	mov	r3, r5
 23e3786:	2201      	movs	r2, #1
 23e3788:	4668      	mov	r0, sp
 23e378a:	a901      	add	r1, sp, #4
 23e378c:	f7ff ff5f 	bl	23e364e <bmp3_set_regs>
    if (sub_settings & desired_settings)
 23e3790:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 23e3794:	d072      	beq.n	23e387c <bmp3_set_sensor_settings+0x158>
        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings) && (!rslt))
 23e3796:	2800      	cmp	r0, #0
 23e3798:	d170      	bne.n	23e387c <bmp3_set_sensor_settings+0x158>
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 23e379a:	2204      	movs	r2, #4
    uint8_t reg_addr[3] = { 0 };
 23e379c:	4b77      	ldr	r3, [pc, #476]	; (23e397c <bmp3_set_sensor_settings+0x258>)
 23e379e:	f88d 0002 	strb.w	r0, [sp, #2]
 23e37a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 23e37a6:	201c      	movs	r0, #28
    uint8_t reg_addr[3] = { 0 };
 23e37a8:	f8ad 3000 	strh.w	r3, [sp]
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 23e37ac:	eb0d 0102 	add.w	r1, sp, r2
 23e37b0:	462b      	mov	r3, r5
 23e37b2:	f7ff ff0b 	bl	23e35cc <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e37b6:	2800      	cmp	r0, #0
 23e37b8:	d160      	bne.n	23e387c <bmp3_set_sensor_settings+0x158>
    if (sub_settings & desired_settings)
 23e37ba:	f014 0f30 	tst.w	r4, #48	; 0x30
 23e37be:	f000 80da 	beq.w	23e3976 <bmp3_set_sensor_settings+0x252>
        if (settings & BMP3_SEL_PRESS_OS)
 23e37c2:	06e0      	lsls	r0, r4, #27
 23e37c4:	f895 20b4 	ldrb.w	r2, [r5, #180]	; 0xb4
 23e37c8:	d50a      	bpl.n	23e37e0 <bmp3_set_sensor_settings+0xbc>
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 23e37ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23e37ce:	f895 10b3 	ldrb.w	r1, [r5, #179]	; 0xb3
 23e37d2:	f023 0307 	bic.w	r3, r3, #7
 23e37d6:	f001 0107 	and.w	r1, r1, #7
 23e37da:	430b      	orrs	r3, r1
 23e37dc:	f88d 3004 	strb.w	r3, [sp, #4]
        if (settings & BMP3_SEL_TEMP_OS)
 23e37e0:	06a1      	lsls	r1, r4, #26
 23e37e2:	d509      	bpl.n	23e37f8 <bmp3_set_sensor_settings+0xd4>
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 23e37e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23e37e8:	00d2      	lsls	r2, r2, #3
 23e37ea:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 23e37ee:	f002 0238 	and.w	r2, r2, #56	; 0x38
 23e37f2:	4313      	orrs	r3, r2
 23e37f4:	f88d 3004 	strb.w	r3, [sp, #4]
        addr[*len] = BMP3_REG_OSR;
 23e37f8:	231c      	movs	r3, #28
}
 23e37fa:	2601      	movs	r6, #1
        addr[*len] = BMP3_REG_OSR;
 23e37fc:	f88d 3000 	strb.w	r3, [sp]
    if (sub_settings & desired_settings)
 23e3800:	0622      	lsls	r2, r4, #24
 23e3802:	d518      	bpl.n	23e3836 <bmp3_set_sensor_settings+0x112>
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 23e3804:	f895 30b6 	ldrb.w	r3, [r5, #182]	; 0xb6
 23e3808:	2b11      	cmp	r3, #17
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 23e380a:	bf84      	itt	hi
 23e380c:	2311      	movhi	r3, #17
 23e380e:	f885 30b6 	strbhi.w	r3, [r5, #182]	; 0xb6
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 23e3812:	ab02      	add	r3, sp, #8
 23e3814:	1999      	adds	r1, r3, r6
 23e3816:	f895 20b6 	ldrb.w	r2, [r5, #182]	; 0xb6
 23e381a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 23e381e:	f002 021f 	and.w	r2, r2, #31
 23e3822:	f023 031f 	bic.w	r3, r3, #31
 23e3826:	4313      	orrs	r3, r2
 23e3828:	f801 3c04 	strb.w	r3, [r1, #-4]
    addr[*len] = BMP3_REG_ODR;
 23e382c:	231d      	movs	r3, #29
    (*len)++;
 23e382e:	3601      	adds	r6, #1
    addr[*len] = BMP3_REG_ODR;
 23e3830:	f801 3c08 	strb.w	r3, [r1, #-8]
    (*len)++;
 23e3834:	b2f6      	uxtb	r6, r6
    if (sub_settings & desired_settings)
 23e3836:	0663      	lsls	r3, r4, #25
 23e3838:	d512      	bpl.n	23e3860 <bmp3_set_sensor_settings+0x13c>
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 23e383a:	ab02      	add	r3, sp, #8
 23e383c:	1999      	adds	r1, r3, r6
 23e383e:	f895 30b5 	ldrb.w	r3, [r5, #181]	; 0xb5
 23e3842:	f89d 2007 	ldrb.w	r2, [sp, #7]
 23e3846:	005b      	lsls	r3, r3, #1
 23e3848:	f003 030e 	and.w	r3, r3, #14
 23e384c:	f022 020e 	bic.w	r2, r2, #14
 23e3850:	4313      	orrs	r3, r2
 23e3852:	f801 3c04 	strb.w	r3, [r1, #-4]
    addr[*len] = BMP3_REG_CONFIG;
 23e3856:	231f      	movs	r3, #31
    (*len)++;
 23e3858:	3601      	adds	r6, #1
    addr[*len] = BMP3_REG_CONFIG;
 23e385a:	f801 3c08 	strb.w	r3, [r1, #-8]
    (*len)++;
 23e385e:	b2f6      	uxtb	r6, r6
        if (dev->settings.op_mode == BMP3_MODE_NORMAL)
 23e3860:	f895 30b0 	ldrb.w	r3, [r5, #176]	; 0xb0
 23e3864:	2b03      	cmp	r3, #3
 23e3866:	d103      	bne.n	23e3870 <bmp3_set_sensor_settings+0x14c>
            rslt = validate_osr_and_odr_settings(dev);
 23e3868:	4628      	mov	r0, r5
 23e386a:	f7ff fe61 	bl	23e3530 <validate_osr_and_odr_settings>
        if (rslt == BMP3_OK)
 23e386e:	b928      	cbnz	r0, 23e387c <bmp3_set_sensor_settings+0x158>
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 23e3870:	462b      	mov	r3, r5
 23e3872:	4632      	mov	r2, r6
 23e3874:	4668      	mov	r0, sp
 23e3876:	a901      	add	r1, sp, #4
 23e3878:	f7ff fee9 	bl	23e364e <bmp3_set_regs>
    if (sub_settings & desired_settings)
 23e387c:	f414 6fe1 	tst.w	r4, #1800	; 0x708
 23e3880:	d048      	beq.n	23e3914 <bmp3_set_sensor_settings+0x1f0>
        if (are_settings_changed(BMP3_INT_CTRL, desired_settings) && (!rslt))
 23e3882:	2800      	cmp	r0, #0
 23e3884:	d146      	bne.n	23e3914 <bmp3_set_sensor_settings+0x1f0>
    reg_addr = BMP3_REG_INT_CTRL;
 23e3886:	2019      	movs	r0, #25
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e3888:	462b      	mov	r3, r5
 23e388a:	2201      	movs	r2, #1
 23e388c:	4669      	mov	r1, sp
    reg_addr = BMP3_REG_INT_CTRL;
 23e388e:	f88d 0004 	strb.w	r0, [sp, #4]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e3892:	f7ff fe9b 	bl	23e35cc <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e3896:	2800      	cmp	r0, #0
 23e3898:	d13c      	bne.n	23e3914 <bmp3_set_sensor_settings+0x1f0>
        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 23e389a:	05e7      	lsls	r7, r4, #23
        int_settings = dev->settings.int_settings;
 23e389c:	f895 00b8 	ldrb.w	r0, [r5, #184]	; 0xb8
 23e38a0:	f895 10b9 	ldrb.w	r1, [r5, #185]	; 0xb9
 23e38a4:	f895 20ba 	ldrb.w	r2, [r5, #186]	; 0xba
        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 23e38a8:	d50a      	bpl.n	23e38c0 <bmp3_set_sensor_settings+0x19c>
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 23e38aa:	f89d 3000 	ldrb.w	r3, [sp]
 23e38ae:	f895 60b7 	ldrb.w	r6, [r5, #183]	; 0xb7
 23e38b2:	f023 0301 	bic.w	r3, r3, #1
 23e38b6:	f006 0601 	and.w	r6, r6, #1
 23e38ba:	4333      	orrs	r3, r6
 23e38bc:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_LEVEL)
 23e38c0:	05a6      	lsls	r6, r4, #22
 23e38c2:	d509      	bpl.n	23e38d8 <bmp3_set_sensor_settings+0x1b4>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 23e38c4:	f89d 3000 	ldrb.w	r3, [sp]
 23e38c8:	0040      	lsls	r0, r0, #1
 23e38ca:	f023 0302 	bic.w	r3, r3, #2
 23e38ce:	f000 0002 	and.w	r0, r0, #2
 23e38d2:	4303      	orrs	r3, r0
 23e38d4:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_LATCH)
 23e38d8:	0560      	lsls	r0, r4, #21
 23e38da:	d509      	bpl.n	23e38f0 <bmp3_set_sensor_settings+0x1cc>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 23e38dc:	f89d 3000 	ldrb.w	r3, [sp]
 23e38e0:	0089      	lsls	r1, r1, #2
 23e38e2:	f023 0304 	bic.w	r3, r3, #4
 23e38e6:	f001 0104 	and.w	r1, r1, #4
 23e38ea:	430b      	orrs	r3, r1
 23e38ec:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_DRDY_EN)
 23e38f0:	0721      	lsls	r1, r4, #28
 23e38f2:	d509      	bpl.n	23e3908 <bmp3_set_sensor_settings+0x1e4>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 23e38f4:	f89d 3000 	ldrb.w	r3, [sp]
 23e38f8:	0192      	lsls	r2, r2, #6
 23e38fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 23e38fe:	f002 0240 	and.w	r2, r2, #64	; 0x40
 23e3902:	4313      	orrs	r3, r2
 23e3904:	f88d 3000 	strb.w	r3, [sp]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 23e3908:	462b      	mov	r3, r5
 23e390a:	2201      	movs	r2, #1
 23e390c:	4669      	mov	r1, sp
 23e390e:	a801      	add	r0, sp, #4
 23e3910:	f7ff fe9d 	bl	23e364e <bmp3_set_regs>
    if (sub_settings & desired_settings)
 23e3914:	f414 5fc0 	tst.w	r4, #6144	; 0x1800
 23e3918:	d02b      	beq.n	23e3972 <bmp3_set_sensor_settings+0x24e>
        if (are_settings_changed(BMP3_ADV_SETT, desired_settings) && (!rslt))
 23e391a:	bb50      	cbnz	r0, 23e3972 <bmp3_set_sensor_settings+0x24e>
    reg_addr = BMP3_REG_IF_CONF;
 23e391c:	201a      	movs	r0, #26
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e391e:	462b      	mov	r3, r5
 23e3920:	2201      	movs	r2, #1
 23e3922:	a901      	add	r1, sp, #4
    struct bmp3_adv_settings adv_settings = dev->settings.adv_settings;
 23e3924:	f895 70bb 	ldrb.w	r7, [r5, #187]	; 0xbb
 23e3928:	f895 60bc 	ldrb.w	r6, [r5, #188]	; 0xbc
    reg_addr = BMP3_REG_IF_CONF;
 23e392c:	f88d 0000 	strb.w	r0, [sp]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e3930:	f7ff fe4c 	bl	23e35cc <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e3934:	b9e8      	cbnz	r0, 23e3972 <bmp3_set_sensor_settings+0x24e>
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 23e3936:	0522      	lsls	r2, r4, #20
 23e3938:	d509      	bpl.n	23e394e <bmp3_set_sensor_settings+0x22a>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 23e393a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23e393e:	007f      	lsls	r7, r7, #1
 23e3940:	f023 0302 	bic.w	r3, r3, #2
 23e3944:	f007 0702 	and.w	r7, r7, #2
 23e3948:	433b      	orrs	r3, r7
 23e394a:	f88d 3004 	strb.w	r3, [sp, #4]
        if (desired_settings & BMP3_SEL_I2C_WDT)
 23e394e:	04e3      	lsls	r3, r4, #19
 23e3950:	d509      	bpl.n	23e3966 <bmp3_set_sensor_settings+0x242>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 23e3952:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23e3956:	00b6      	lsls	r6, r6, #2
 23e3958:	f023 0304 	bic.w	r3, r3, #4
 23e395c:	f006 0604 	and.w	r6, r6, #4
 23e3960:	4333      	orrs	r3, r6
 23e3962:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 23e3966:	462b      	mov	r3, r5
 23e3968:	2201      	movs	r2, #1
 23e396a:	4668      	mov	r0, sp
 23e396c:	a901      	add	r1, sp, #4
 23e396e:	f7ff fe6e 	bl	23e364e <bmp3_set_regs>
}
 23e3972:	b003      	add	sp, #12
 23e3974:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t len = 0;
 23e3976:	4606      	mov	r6, r0
 23e3978:	e742      	b.n	23e3800 <bmp3_set_sensor_settings+0xdc>
 23e397a:	bf00      	nop
 23e397c:	023fc700 	.word	0x023fc700

023e3980 <bmp3_soft_reset>:
    uint8_t reg_addr = BMP3_REG_CMD;
 23e3980:	237e      	movs	r3, #126	; 0x7e
{
 23e3982:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t reg_addr = BMP3_REG_CMD;
 23e3984:	f88d 3004 	strb.w	r3, [sp, #4]
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 23e3988:	23b6      	movs	r3, #182	; 0xb6
{
 23e398a:	4605      	mov	r5, r0
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 23e398c:	f88d 3005 	strb.w	r3, [sp, #5]
    rslt = null_ptr_check(dev);
 23e3990:	f7ff fcd3 	bl	23e333a <null_ptr_check>
    if (rslt == BMP3_OK)
 23e3994:	4604      	mov	r4, r0
 23e3996:	b960      	cbnz	r0, 23e39b2 <bmp3_soft_reset+0x32>
        rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 23e3998:	462b      	mov	r3, r5
 23e399a:	2201      	movs	r2, #1
 23e399c:	2003      	movs	r0, #3
 23e399e:	f10d 0106 	add.w	r1, sp, #6
 23e39a2:	f7ff fe13 	bl	23e35cc <bmp3_get_regs>
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 23e39a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 23e39aa:	06db      	lsls	r3, r3, #27
 23e39ac:	d404      	bmi.n	23e39b8 <bmp3_soft_reset+0x38>
            rslt = BMP3_E_CMD_EXEC_FAILED;
 23e39ae:	f06f 0403 	mvn.w	r4, #3
}
 23e39b2:	4620      	mov	r0, r4
 23e39b4:	b003      	add	sp, #12
 23e39b6:	bd30      	pop	{r4, r5, pc}
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 23e39b8:	2800      	cmp	r0, #0
 23e39ba:	d1f8      	bne.n	23e39ae <bmp3_soft_reset+0x2e>
            rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 23e39bc:	462b      	mov	r3, r5
 23e39be:	2201      	movs	r2, #1
 23e39c0:	f10d 0105 	add.w	r1, sp, #5
 23e39c4:	a801      	add	r0, sp, #4
 23e39c6:	f7ff fe42 	bl	23e364e <bmp3_set_regs>
            if (rslt == BMP3_OK)
 23e39ca:	4604      	mov	r4, r0
 23e39cc:	2800      	cmp	r0, #0
 23e39ce:	d1f0      	bne.n	23e39b2 <bmp3_soft_reset+0x32>
                dev->delay_us(2000, dev->intf_ptr);
 23e39d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23e39d4:	696b      	ldr	r3, [r5, #20]
 23e39d6:	6869      	ldr	r1, [r5, #4]
 23e39d8:	4798      	blx	r3
                rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 23e39da:	462b      	mov	r3, r5
 23e39dc:	2201      	movs	r2, #1
 23e39de:	2002      	movs	r0, #2
 23e39e0:	f10d 0107 	add.w	r1, sp, #7
 23e39e4:	f7ff fdf2 	bl	23e35cc <bmp3_get_regs>
                if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 23e39e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23e39ec:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 23e39f0:	4318      	orrs	r0, r3
 23e39f2:	b2c0      	uxtb	r0, r0
 23e39f4:	2800      	cmp	r0, #0
 23e39f6:	d0dc      	beq.n	23e39b2 <bmp3_soft_reset+0x32>
 23e39f8:	e7d9      	b.n	23e39ae <bmp3_soft_reset+0x2e>
	...

023e39fc <bmp3_init>:
    uint8_t chip_id = 0;
 23e39fc:	2300      	movs	r3, #0
{
 23e39fe:	b530      	push	{r4, r5, lr}
 23e3a00:	b089      	sub	sp, #36	; 0x24
 23e3a02:	4604      	mov	r4, r0
    uint8_t chip_id = 0;
 23e3a04:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_ptr_check(dev);
 23e3a08:	f7ff fc97 	bl	23e333a <null_ptr_check>
    if (rslt == BMP3_OK)
 23e3a0c:	4605      	mov	r5, r0
 23e3a0e:	2800      	cmp	r0, #0
 23e3a10:	f040 80d8 	bne.w	23e3bc4 <bmp3_init+0x1c8>
        if (dev->intf != BMP3_I2C_INTF)
 23e3a14:	7a23      	ldrb	r3, [r4, #8]
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 23e3a16:	2201      	movs	r2, #1
        if (dev->intf != BMP3_I2C_INTF)
 23e3a18:	3b01      	subs	r3, #1
 23e3a1a:	bf18      	it	ne
 23e3a1c:	2301      	movne	r3, #1
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 23e3a1e:	f10d 0107 	add.w	r1, sp, #7
        if (dev->intf != BMP3_I2C_INTF)
 23e3a22:	72a3      	strb	r3, [r4, #10]
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 23e3a24:	4623      	mov	r3, r4
 23e3a26:	f7ff fdd1 	bl	23e35cc <bmp3_get_regs>
        if (rslt == BMP3_OK)
 23e3a2a:	4605      	mov	r5, r0
 23e3a2c:	2800      	cmp	r0, #0
 23e3a2e:	f040 80c9 	bne.w	23e3bc4 <bmp3_init+0x1c8>
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 23e3a32:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23e3a36:	2b50      	cmp	r3, #80	; 0x50
 23e3a38:	d002      	beq.n	23e3a40 <bmp3_init+0x44>
 23e3a3a:	2b60      	cmp	r3, #96	; 0x60
 23e3a3c:	f040 80c5 	bne.w	23e3bca <bmp3_init+0x1ce>
                rslt = bmp3_soft_reset(dev);
 23e3a40:	4620      	mov	r0, r4
                dev->chip_id = chip_id;
 23e3a42:	7023      	strb	r3, [r4, #0]
                rslt = bmp3_soft_reset(dev);
 23e3a44:	f7ff ff9c 	bl	23e3980 <bmp3_soft_reset>
                if (rslt == BMP3_OK)
 23e3a48:	4605      	mov	r5, r0
 23e3a4a:	2800      	cmp	r0, #0
 23e3a4c:	f040 80ba 	bne.w	23e3bc4 <bmp3_init+0x1c8>
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 23e3a50:	4601      	mov	r1, r0
 23e3a52:	2211      	movs	r2, #17
 23e3a54:	9002      	str	r0, [sp, #8]
 23e3a56:	a803      	add	r0, sp, #12
 23e3a58:	f018 fcc5 	bl	23fc3e6 <memset>
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 23e3a5c:	4623      	mov	r3, r4
 23e3a5e:	2215      	movs	r2, #21
 23e3a60:	a902      	add	r1, sp, #8
 23e3a62:	2031      	movs	r0, #49	; 0x31
 23e3a64:	f7ff fdb2 	bl	23e35cc <bmp3_get_regs>
 23e3a68:	4605      	mov	r5, r0
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 23e3a6a:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 23e3a6e:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 23e3a72:	f7fe fd63 	bl	23e253c <__aeabi_ui2d>
 23e3a76:	2200      	movs	r2, #0
 23e3a78:	4b55      	ldr	r3, [pc, #340]	; (23e3bd0 <bmp3_init+0x1d4>)
 23e3a7a:	f7fe fdd9 	bl	23e2630 <__aeabi_dmul>
 23e3a7e:	e9c4 0106 	strd	r0, r1, [r4, #24]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 23e3a82:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 23e3a86:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 23e3a8a:	f7fe fd57 	bl	23e253c <__aeabi_ui2d>
 23e3a8e:	2200      	movs	r2, #0
 23e3a90:	4b50      	ldr	r3, [pc, #320]	; (23e3bd4 <bmp3_init+0x1d8>)
 23e3a92:	f7fe fdcd 	bl	23e2630 <__aeabi_dmul>
 23e3a96:	e9c4 0108 	strd	r0, r1, [r4, #32]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 23e3a9a:	f99d 000c 	ldrsb.w	r0, [sp, #12]
 23e3a9e:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 23e3aa2:	f7fe fd5b 	bl	23e255c <__aeabi_i2d>
 23e3aa6:	2200      	movs	r2, #0
 23e3aa8:	4b4b      	ldr	r3, [pc, #300]	; (23e3bd8 <bmp3_init+0x1dc>)
 23e3aaa:	f7fe fdc1 	bl	23e2630 <__aeabi_dmul>
 23e3aae:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 23e3ab2:	f9bd 000d 	ldrsh.w	r0, [sp, #13]
 23e3ab6:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 23e3aba:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 23e3abe:	f7fe fd4d 	bl	23e255c <__aeabi_i2d>
 23e3ac2:	2200      	movs	r2, #0
 23e3ac4:	4b45      	ldr	r3, [pc, #276]	; (23e3bdc <bmp3_init+0x1e0>)
 23e3ac6:	f7fe fdb3 	bl	23e2630 <__aeabi_dmul>
 23e3aca:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 23e3ace:	f9bd 000f 	ldrsh.w	r0, [sp, #15]
 23e3ad2:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 23e3ad6:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 23e3ada:	f7fe fd3f 	bl	23e255c <__aeabi_i2d>
 23e3ade:	2200      	movs	r2, #0
 23e3ae0:	4b3f      	ldr	r3, [pc, #252]	; (23e3be0 <bmp3_init+0x1e4>)
 23e3ae2:	f7fe fda5 	bl	23e2630 <__aeabi_dmul>
 23e3ae6:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 23e3aea:	f99d 0011 	ldrsb.w	r0, [sp, #17]
 23e3aee:	f884 009a 	strb.w	r0, [r4, #154]	; 0x9a
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 23e3af2:	f7fe fd33 	bl	23e255c <__aeabi_i2d>
 23e3af6:	2200      	movs	r2, #0
 23e3af8:	4b3a      	ldr	r3, [pc, #232]	; (23e3be4 <bmp3_init+0x1e8>)
 23e3afa:	f7fe fd99 	bl	23e2630 <__aeabi_dmul>
 23e3afe:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 23e3b02:	f99d 0012 	ldrsb.w	r0, [sp, #18]
 23e3b06:	f884 009b 	strb.w	r0, [r4, #155]	; 0x9b
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 23e3b0a:	f7fe fd27 	bl	23e255c <__aeabi_i2d>
 23e3b0e:	2200      	movs	r2, #0
 23e3b10:	4b35      	ldr	r3, [pc, #212]	; (23e3be8 <bmp3_init+0x1ec>)
 23e3b12:	f7fe fd8d 	bl	23e2630 <__aeabi_dmul>
 23e3b16:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 23e3b1a:	f8bd 0013 	ldrh.w	r0, [sp, #19]
 23e3b1e:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 23e3b22:	f7fe fd0b 	bl	23e253c <__aeabi_ui2d>
 23e3b26:	2200      	movs	r2, #0
 23e3b28:	4b30      	ldr	r3, [pc, #192]	; (23e3bec <bmp3_init+0x1f0>)
 23e3b2a:	f7fe fd81 	bl	23e2630 <__aeabi_dmul>
 23e3b2e:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 23e3b32:	f8bd 0015 	ldrh.w	r0, [sp, #21]
 23e3b36:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 23e3b3a:	f7fe fcff 	bl	23e253c <__aeabi_ui2d>
 23e3b3e:	2200      	movs	r2, #0
 23e3b40:	4b2b      	ldr	r3, [pc, #172]	; (23e3bf0 <bmp3_init+0x1f4>)
 23e3b42:	f7fe fd75 	bl	23e2630 <__aeabi_dmul>
 23e3b46:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 23e3b4a:	f99d 0017 	ldrsb.w	r0, [sp, #23]
 23e3b4e:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 23e3b52:	f7fe fd03 	bl	23e255c <__aeabi_i2d>
 23e3b56:	2200      	movs	r2, #0
 23e3b58:	4b26      	ldr	r3, [pc, #152]	; (23e3bf4 <bmp3_init+0x1f8>)
 23e3b5a:	f7fe fd69 	bl	23e2630 <__aeabi_dmul>
 23e3b5e:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 23e3b62:	f99d 0018 	ldrsb.w	r0, [sp, #24]
 23e3b66:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 23e3b6a:	f7fe fcf7 	bl	23e255c <__aeabi_i2d>
 23e3b6e:	2200      	movs	r2, #0
 23e3b70:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 23e3b74:	f7fe fd5c 	bl	23e2630 <__aeabi_dmul>
 23e3b78:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 23e3b7c:	f9bd 0019 	ldrsh.w	r0, [sp, #25]
 23e3b80:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 23e3b84:	f7fe fcea 	bl	23e255c <__aeabi_i2d>
 23e3b88:	2200      	movs	r2, #0
 23e3b8a:	4b13      	ldr	r3, [pc, #76]	; (23e3bd8 <bmp3_init+0x1dc>)
 23e3b8c:	f7fe fd50 	bl	23e2630 <__aeabi_dmul>
 23e3b90:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 23e3b94:	f99d 001b 	ldrsb.w	r0, [sp, #27]
 23e3b98:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 23e3b9c:	f7fe fcde 	bl	23e255c <__aeabi_i2d>
 23e3ba0:	2200      	movs	r2, #0
 23e3ba2:	4b0d      	ldr	r3, [pc, #52]	; (23e3bd8 <bmp3_init+0x1dc>)
 23e3ba4:	f7fe fd44 	bl	23e2630 <__aeabi_dmul>
 23e3ba8:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 23e3bac:	f99d 001c 	ldrsb.w	r0, [sp, #28]
 23e3bb0:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 23e3bb4:	f7fe fcd2 	bl	23e255c <__aeabi_i2d>
 23e3bb8:	2200      	movs	r2, #0
 23e3bba:	4b0f      	ldr	r3, [pc, #60]	; (23e3bf8 <bmp3_init+0x1fc>)
 23e3bbc:	f7fe fd38 	bl	23e2630 <__aeabi_dmul>
 23e3bc0:	e9c4 0120 	strd	r0, r1, [r4, #128]	; 0x80
}
 23e3bc4:	4628      	mov	r0, r5
 23e3bc6:	b009      	add	sp, #36	; 0x24
 23e3bc8:	bd30      	pop	{r4, r5, pc}
                rslt = BMP3_E_DEV_NOT_FOUND;
 23e3bca:	f06f 0501 	mvn.w	r5, #1
 23e3bce:	e7f9      	b.n	23e3bc4 <bmp3_init+0x1c8>
 23e3bd0:	40700000 	.word	0x40700000
 23e3bd4:	3e100000 	.word	0x3e100000
 23e3bd8:	3cf00000 	.word	0x3cf00000
 23e3bdc:	3eb00000 	.word	0x3eb00000
 23e3be0:	3e200000 	.word	0x3e200000
 23e3be4:	3df00000 	.word	0x3df00000
 23e3be8:	3da00000 	.word	0x3da00000
 23e3bec:	40200000 	.word	0x40200000
 23e3bf0:	3f900000 	.word	0x3f900000
 23e3bf4:	3f700000 	.word	0x3f700000
 23e3bf8:	3be00000 	.word	0x3be00000

023e3bfc <bmp3_get_op_mode>:
{
 23e3bfc:	b513      	push	{r0, r1, r4, lr}
 23e3bfe:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
 23e3c00:	4608      	mov	r0, r1
 23e3c02:	9101      	str	r1, [sp, #4]
 23e3c04:	f7ff fb99 	bl	23e333a <null_ptr_check>
    if ((rslt == BMP3_OK) && (op_mode != NULL))
 23e3c08:	b960      	cbnz	r0, 23e3c24 <bmp3_get_op_mode+0x28>
 23e3c0a:	b15c      	cbz	r4, 23e3c24 <bmp3_get_op_mode+0x28>
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 23e3c0c:	460b      	mov	r3, r1
 23e3c0e:	2201      	movs	r2, #1
 23e3c10:	4621      	mov	r1, r4
 23e3c12:	201b      	movs	r0, #27
 23e3c14:	f7ff fcda 	bl	23e35cc <bmp3_get_regs>
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 23e3c18:	7823      	ldrb	r3, [r4, #0]
 23e3c1a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 23e3c1e:	7023      	strb	r3, [r4, #0]
}
 23e3c20:	b002      	add	sp, #8
 23e3c22:	bd10      	pop	{r4, pc}
        rslt = BMP3_E_NULL_PTR;
 23e3c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e3c28:	e7fa      	b.n	23e3c20 <bmp3_get_op_mode+0x24>

023e3c2a <bmp3_set_op_mode>:
{
 23e3c2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23e3c2c:	4605      	mov	r5, r0
    rslt = null_ptr_check(dev);
 23e3c2e:	f7ff fb84 	bl	23e333a <null_ptr_check>
    if (rslt == BMP3_OK)
 23e3c32:	4604      	mov	r4, r0
 23e3c34:	2800      	cmp	r0, #0
 23e3c36:	d163      	bne.n	23e3d00 <bmp3_set_op_mode+0xd6>
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 23e3c38:	4629      	mov	r1, r5
 23e3c3a:	f10d 0002 	add.w	r0, sp, #2
        uint8_t curr_mode = dev->settings.op_mode;
 23e3c3e:	f895 60b0 	ldrb.w	r6, [r5, #176]	; 0xb0
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 23e3c42:	f7ff ffdb 	bl	23e3bfc <bmp3_get_op_mode>
        if (last_set_mode != BMP3_MODE_SLEEP)
 23e3c46:	f89d 3002 	ldrb.w	r3, [sp, #2]
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 23e3c4a:	4604      	mov	r4, r0
        if (last_set_mode != BMP3_MODE_SLEEP)
 23e3c4c:	b1e3      	cbz	r3, 23e3c88 <bmp3_set_op_mode+0x5e>
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e3c4e:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 23e3c50:	462b      	mov	r3, r5
 23e3c52:	2201      	movs	r2, #1
 23e3c54:	a901      	add	r1, sp, #4
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e3c56:	f88d 0003 	strb.w	r0, [sp, #3]
    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 23e3c5a:	f7ff fcb7 	bl	23e35cc <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e3c5e:	4604      	mov	r4, r0
 23e3c60:	b968      	cbnz	r0, 23e3c7e <bmp3_set_op_mode+0x54>
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 23e3c62:	f89d 3004 	ldrb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 23e3c66:	2201      	movs	r2, #1
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 23e3c68:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 23e3c6c:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 23e3c70:	a901      	add	r1, sp, #4
 23e3c72:	462b      	mov	r3, r5
 23e3c74:	f10d 0003 	add.w	r0, sp, #3
 23e3c78:	f7ff fce9 	bl	23e364e <bmp3_set_regs>
 23e3c7c:	4604      	mov	r4, r0
            dev->delay_us(5000, dev->intf_ptr);
 23e3c7e:	f241 3088 	movw	r0, #5000	; 0x1388
 23e3c82:	696b      	ldr	r3, [r5, #20]
 23e3c84:	6869      	ldr	r1, [r5, #4]
 23e3c86:	4798      	blx	r3
        if (rslt == BMP3_OK)
 23e3c88:	bbd4      	cbnz	r4, 23e3d00 <bmp3_set_op_mode+0xd6>
            if (curr_mode == BMP3_MODE_NORMAL)
 23e3c8a:	2e03      	cmp	r6, #3
 23e3c8c:	d13b      	bne.n	23e3d06 <bmp3_set_op_mode+0xdc>
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 23e3c8e:	2204      	movs	r2, #4
 23e3c90:	462b      	mov	r3, r5
 23e3c92:	eb0d 0102 	add.w	r1, sp, r2
 23e3c96:	201c      	movs	r0, #28
 23e3c98:	f7ff fc98 	bl	23e35cc <bmp3_get_regs>
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 23e3c9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if (rslt == BMP3_OK)
 23e3ca0:	4604      	mov	r4, r0
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 23e3ca2:	f003 0207 	and.w	r2, r3, #7
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 23e3ca6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 23e3caa:	f885 30b4 	strb.w	r3, [r5, #180]	; 0xb4
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 23e3cae:	f89d 3005 	ldrb.w	r3, [sp, #5]
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 23e3cb2:	f885 20b3 	strb.w	r2, [r5, #179]	; 0xb3
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 23e3cb6:	f003 031f 	and.w	r3, r3, #31
 23e3cba:	f885 30b6 	strb.w	r3, [r5, #182]	; 0xb6
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 23e3cbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23e3cc2:	f3c3 0342 	ubfx	r3, r3, #1, #3
 23e3cc6:	f885 30b5 	strb.w	r3, [r5, #181]	; 0xb5
    if (rslt == BMP3_OK)
 23e3cca:	b9c8      	cbnz	r0, 23e3d00 <bmp3_set_op_mode+0xd6>
        rslt = validate_osr_and_odr_settings(dev);
 23e3ccc:	4628      	mov	r0, r5
 23e3cce:	f7ff fc2f 	bl	23e3530 <validate_osr_and_odr_settings>
    if (rslt == BMP3_OK)
 23e3cd2:	4604      	mov	r4, r0
 23e3cd4:	b9a0      	cbnz	r0, 23e3d00 <bmp3_set_op_mode+0xd6>
        rslt = write_power_mode(dev);
 23e3cd6:	4628      	mov	r0, r5
 23e3cd8:	f7ff fd01 	bl	23e36de <write_power_mode>
        if (rslt == BMP3_OK)
 23e3cdc:	4604      	mov	r4, r0
 23e3cde:	b978      	cbnz	r0, 23e3d00 <bmp3_set_op_mode+0xd6>
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 23e3ce0:	462b      	mov	r3, r5
 23e3ce2:	2201      	movs	r2, #1
 23e3ce4:	2002      	movs	r0, #2
 23e3ce6:	a901      	add	r1, sp, #4
 23e3ce8:	f7ff fc70 	bl	23e35cc <bmp3_get_regs>
            if (rslt == BMP3_OK)
 23e3cec:	4604      	mov	r4, r0
 23e3cee:	b938      	cbnz	r0, 23e3d00 <bmp3_set_op_mode+0xd6>
                if (conf_err_status & BMP3_ERR_CONF)
 23e3cf0:	f89d 3004 	ldrb.w	r3, [sp, #4]
                    rslt = BMP3_E_CONFIGURATION_ERR;
 23e3cf4:	f013 0f04 	tst.w	r3, #4
 23e3cf8:	bf0c      	ite	eq
 23e3cfa:	4604      	moveq	r4, r0
 23e3cfc:	f06f 0404 	mvnne.w	r4, #4
}
 23e3d00:	4620      	mov	r0, r4
 23e3d02:	b002      	add	sp, #8
 23e3d04:	bd70      	pop	{r4, r5, r6, pc}
            else if (curr_mode == BMP3_MODE_FORCED)
 23e3d06:	2e01      	cmp	r6, #1
 23e3d08:	d1fa      	bne.n	23e3d00 <bmp3_set_op_mode+0xd6>
                rslt = write_power_mode(dev);
 23e3d0a:	4628      	mov	r0, r5
 23e3d0c:	f7ff fce7 	bl	23e36de <write_power_mode>
 23e3d10:	4604      	mov	r4, r0
    return rslt;
 23e3d12:	e7f5      	b.n	23e3d00 <bmp3_set_op_mode+0xd6>

023e3d14 <bmp3_get_sensor_data>:
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 23e3d14:	2300      	movs	r3, #0
{
 23e3d16:	b5f0      	push	{r4, r5, r6, r7, lr}
 23e3d18:	4606      	mov	r6, r0
 23e3d1a:	b085      	sub	sp, #20
    rslt = null_ptr_check(dev);
 23e3d1c:	4610      	mov	r0, r2
{
 23e3d1e:	460d      	mov	r5, r1
 23e3d20:	4617      	mov	r7, r2
    struct bmp3_uncomp_data uncomp_data = { 0 };
 23e3d22:	e9cd 3302 	strd	r3, r3, [sp, #8]
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 23e3d26:	9300      	str	r3, [sp, #0]
 23e3d28:	f8ad 3004 	strh.w	r3, [sp, #4]
    rslt = null_ptr_check(dev);
 23e3d2c:	f7ff fb05 	bl	23e333a <null_ptr_check>
    if ((rslt == BMP3_OK) && (comp_data != NULL))
 23e3d30:	bb30      	cbnz	r0, 23e3d80 <bmp3_get_sensor_data+0x6c>
 23e3d32:	b329      	cbz	r1, 23e3d80 <bmp3_get_sensor_data+0x6c>
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 23e3d34:	4613      	mov	r3, r2
 23e3d36:	4669      	mov	r1, sp
 23e3d38:	2206      	movs	r2, #6
 23e3d3a:	2004      	movs	r0, #4
 23e3d3c:	f7ff fc46 	bl	23e35cc <bmp3_get_regs>
        if (rslt == BMP3_OK)
 23e3d40:	b9e0      	cbnz	r0, 23e3d7c <bmp3_get_sensor_data+0x68>
    data_msb = (uint32_t)reg_data[2] << 16;
 23e3d42:	f89d 3002 	ldrb.w	r3, [sp, #2]
    data_lsb = (uint32_t)reg_data[1] << 8;
 23e3d46:	f89d 2001 	ldrb.w	r2, [sp, #1]
    data_msb = (uint32_t)reg_data[2] << 16;
 23e3d4a:	041b      	lsls	r3, r3, #16
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 23e3d4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    data_xlsb = (uint32_t)reg_data[0];
 23e3d50:	f89d 2000 	ldrb.w	r2, [sp]
    data_msb = (uint32_t)reg_data[5] << 16;
 23e3d54:	f89d 4005 	ldrb.w	r4, [sp, #5]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 23e3d58:	4313      	orrs	r3, r2
 23e3d5a:	9302      	str	r3, [sp, #8]
    data_lsb = (uint32_t)reg_data[4] << 8;
 23e3d5c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    data_msb = (uint32_t)reg_data[5] << 16;
 23e3d60:	0424      	lsls	r4, r4, #16
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 23e3d62:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    data_xlsb = (uint32_t)reg_data[3];
 23e3d66:	f89d 3003 	ldrb.w	r3, [sp, #3]
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 23e3d6a:	462a      	mov	r2, r5
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 23e3d6c:	431c      	orrs	r4, r3
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 23e3d6e:	4630      	mov	r0, r6
 23e3d70:	f107 0318 	add.w	r3, r7, #24
 23e3d74:	a902      	add	r1, sp, #8
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 23e3d76:	9403      	str	r4, [sp, #12]
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 23e3d78:	f7ff faef 	bl	23e335a <compensate_data>
}
 23e3d7c:	b005      	add	sp, #20
 23e3d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rslt = BMP3_E_NULL_PTR;
 23e3d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e3d84:	e7fa      	b.n	23e3d7c <bmp3_get_sensor_data+0x68>
	...

023e3d88 <__tcf_1>:

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 23e3d88:	4903      	ldr	r1, [pc, #12]	; (23e3d98 <__tcf_1+0x10>)
 23e3d8a:	688b      	ldr	r3, [r1, #8]
 23e3d8c:	b113      	cbz	r3, 23e3d94 <__tcf_1+0xc>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23e3d8e:	2203      	movs	r2, #3
 23e3d90:	4608      	mov	r0, r1
 23e3d92:	4718      	bx	r3
     * @brief Get the hardware watchdog instance.
     * 
     * @return The hardware watchdog singlton.
     */
    static WatchdogClass& getInstance() {
        static WatchdogClass watchdog;
 23e3d94:	4770      	bx	lr
 23e3d96:	bf00      	nop
 23e3d98:	1006a238 	.word	0x1006a238

023e3d9c <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
 23e3d9c:	4770      	bx	lr
	...

023e3da0 <_Z28anemometer_interrupt_handlerv>:
 * ======================================================================================================================
 */
#define ANEMOMETER_IRQ_PIN  A2
void anemometer_interrupt_handler()
{
  anemometer_interrupt_count++;
 23e3da0:	4a02      	ldr	r2, [pc, #8]	; (23e3dac <_Z28anemometer_interrupt_handlerv+0xc>)
 23e3da2:	6813      	ldr	r3, [r2, #0]
 23e3da4:	3301      	adds	r3, #1
 23e3da6:	6013      	str	r3, [r2, #0]
}
 23e3da8:	4770      	bx	lr
 23e3daa:	bf00      	nop
 23e3dac:	1006a928 	.word	0x1006a928

023e3db0 <_ZN6FsFileD1Ev>:
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23e3db0:	4770      	bx	lr

023e3db2 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
 23e3db2:	b510      	push	{r4, lr}
 23e3db4:	4604      	mov	r4, r0
  }
 23e3db6:	2110      	movs	r1, #16
 23e3db8:	f7ff faa3 	bl	23e3302 <_ZdlPvj>
 23e3dbc:	4620      	mov	r0, r4
 23e3dbe:	bd10      	pop	{r4, pc}

023e3dc0 <_ZN6FsFileD0Ev>:
 23e3dc0:	b510      	push	{r4, lr}
 23e3dc2:	4604      	mov	r4, r0
 23e3dc4:	2150      	movs	r1, #80	; 0x50
 23e3dc6:	f7ff fa9c 	bl	23e3302 <_ZdlPvj>
 23e3dca:	4620      	mov	r0, r4
 23e3dcc:	bd10      	pop	{r4, pc}

023e3dce <_ZN10StreamFileI10FsBaseFileyE5flushEv>:
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
 23e3dce:	6c83      	ldr	r3, [r0, #72]	; 0x48
 23e3dd0:	b113      	cbz	r3, 23e3dd8 <_ZN10StreamFileI10FsBaseFileyE5flushEv+0xa>
 23e3dd2:	4618      	mov	r0, r3
 23e3dd4:	f00e b802 	b.w	23f1ddc <_ZN7FatFile4syncEv>
 23e3dd8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 23e3dda:	b108      	cbz	r0, 23e3de0 <_ZN10StreamFileI10FsBaseFileyE5flushEv+0x12>
 23e3ddc:	f00f bf90 	b.w	23f3d00 <_ZN9ExFatFile4syncEv>
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() override { return BaseFile::available(); }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() override { BaseFile::sync(); }
 23e3de0:	4770      	bx	lr
	...

023e3de4 <_Z13callback_imsiiPKciPc>:
 * 
 * COMMAND: AT+CIMI   Note: Each line returned is a call to this callback function
 * SEE https://docs.particle.io/reference/device-os/api/cellular/command/
 * ======================================================================================================================
 */
int callback_imsi(int type, const char* buf, int len, char* cimi) {
 23e3de4:	b510      	push	{r4, lr}
 23e3de6:	4604      	mov	r4, r0
 23e3de8:	461a      	mov	r2, r3
 23e3dea:	4608      	mov	r0, r1
  // sprintf (msgbuf, "AT+CIMI:%X [%s]", type, buf); Output (msgbuf);     

  if ((type == TYPE_UNKNOWN) && cimi) {
 23e3dec:	b934      	cbnz	r4, 23e3dfc <_Z13callback_imsiiPKciPc+0x18>
 23e3dee:	b113      	cbz	r3, 23e3df6 <_Z13callback_imsiiPKciPc+0x12>
    if (sscanf(buf, "\r\n%[^\r]\r\n", cimi) == 1)
 23e3df0:	4906      	ldr	r1, [pc, #24]	; (23e3e0c <_Z13callback_imsiiPKciPc+0x28>)
 23e3df2:	f013 f9ed 	bl	23f71d0 <sscanf>
  }

  if (type == TYPE_OK) {
    return (RESP_OK);
  }
  return (WAIT);
 23e3df6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e3dfa:	e006      	b.n	23e3e0a <_Z13callback_imsiiPKciPc+0x26>
    return (RESP_OK);
 23e3dfc:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
 23e3e00:	bf14      	ite	ne
 23e3e02:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23e3e06:	f06f 0001 	mvneq.w	r0, #1
}
 23e3e0a:	bd10      	pop	{r4, pc}
 23e3e0c:	023fcb0e 	.word	0x023fcb0e

023e3e10 <_ZN10StreamFileI10FsBaseFileyE4peekEv>:
    return m_fFile ? m_fFile->peek() : m_xFile ? m_xFile->peek() : -1;
 23e3e10:	6c83      	ldr	r3, [r0, #72]	; 0x48
 23e3e12:	b113      	cbz	r3, 23e3e1a <_ZN10StreamFileI10FsBaseFileyE4peekEv+0xa>
 23e3e14:	4618      	mov	r0, r3
 23e3e16:	f00d bef8 	b.w	23f1c0a <_ZN7FatFile4peekEv>
 23e3e1a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 23e3e1c:	b108      	cbz	r0, 23e3e22 <_ZN10StreamFileI10FsBaseFileyE4peekEv+0x12>
 23e3e1e:	f00f bbb7 	b.w	23f3590 <_ZN9ExFatFile4peekEv>

  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() override { return BaseFile::peek(); }
 23e3e22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e3e26:	4770      	bx	lr

023e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23e3e28:	b513      	push	{r0, r1, r4, lr}
 23e3e2a:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23e3e2c:	4608      	mov	r0, r1
 23e3e2e:	9101      	str	r1, [sp, #4]
 23e3e30:	f7ff fa3e 	bl	23e32b0 <strlen>
 23e3e34:	4602      	mov	r2, r0
 23e3e36:	4620      	mov	r0, r4
 23e3e38:	9901      	ldr	r1, [sp, #4]
}
 23e3e3a:	b002      	add	sp, #8
 23e3e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23e3e40:	f014 baa2 	b.w	23f8388 <_ZN5spark10JSONWriter5valueEPKcj>

023e3e44 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 23e3e44:	6803      	ldr	r3, [r0, #0]
 23e3e46:	b2c9      	uxtb	r1, r1
 23e3e48:	689b      	ldr	r3, [r3, #8]
 23e3e4a:	4718      	bx	r3

023e3e4c <_ZN5Print6printfEPKcz>:

    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 23e3e4c:	b40e      	push	{r1, r2, r3}
 23e3e4e:	b503      	push	{r0, r1, lr}
 23e3e50:	ab03      	add	r3, sp, #12
 23e3e52:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 23e3e56:	2100      	movs	r1, #0
        va_start(args, format);
 23e3e58:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 23e3e5a:	f014 fcd6 	bl	23f880a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 23e3e5e:	b002      	add	sp, #8
 23e3e60:	f85d eb04 	ldr.w	lr, [sp], #4
 23e3e64:	b003      	add	sp, #12
 23e3e66:	4770      	bx	lr

023e3e68 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 23e3e68:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23e3e6a:	4604      	mov	r4, r0
  {
    if (default_ && clock_ == 0)
 23e3e6c:	7922      	ldrb	r2, [r4, #4]
  virtual size_t printTo(Print& p) const
 23e3e6e:	4608      	mov	r0, r1
    if (default_ && clock_ == 0)
 23e3e70:	68a3      	ldr	r3, [r4, #8]
 23e3e72:	b132      	cbz	r2, 23e3e82 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
 23e3e74:	b9a3      	cbnz	r3, 23e3ea0 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
 23e3e76:	490b      	ldr	r1, [pc, #44]	; (23e3ea4 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
 23e3e78:	b002      	add	sp, #8
 23e3e7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
 23e3e7e:	f014 bc85 	b.w	23f878c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 23e3e82:	4a09      	ldr	r2, [pc, #36]	; (23e3ea8 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
 23e3e84:	7b26      	ldrb	r6, [r4, #12]
 23e3e86:	4d09      	ldr	r5, [pc, #36]	; (23e3eac <_ZNK8particle11SPISettings7printToER5Print+0x44>)
 23e3e88:	4909      	ldr	r1, [pc, #36]	; (23e3eb0 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
 23e3e8a:	7b64      	ldrb	r4, [r4, #13]
 23e3e8c:	2e01      	cmp	r6, #1
 23e3e8e:	bf18      	it	ne
 23e3e90:	4629      	movne	r1, r5
 23e3e92:	e9cd 1400 	strd	r1, r4, [sp]
 23e3e96:	4907      	ldr	r1, [pc, #28]	; (23e3eb4 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
 23e3e98:	f7ff ffd8 	bl	23e3e4c <_ZN5Print6printfEPKcz>
  }
 23e3e9c:	b002      	add	sp, #8
 23e3e9e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 23e3ea0:	4a05      	ldr	r2, [pc, #20]	; (23e3eb8 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
 23e3ea2:	e7ef      	b.n	23e3e84 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
 23e3ea4:	023fcb29 	.word	0x023fcb29
 23e3ea8:	023fe413 	.word	0x023fe413
 23e3eac:	023fcb25 	.word	0x023fcb25
 23e3eb0:	023fcb21 	.word	0x023fcb21
 23e3eb4:	023fcb3f 	.word	0x023fcb3f
 23e3eb8:	023fcb18 	.word	0x023fcb18

023e3ebc <_ZN5spark9WiFiClass11wifi_configEv>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 23e3ebc:	2200      	movs	r2, #0
 23e3ebe:	6840      	ldr	r0, [r0, #4]
 23e3ec0:	4611      	mov	r1, r2
 23e3ec2:	f013 b851 	b.w	23f6f68 <network_config>

023e3ec6 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 23e3ec6:	2300      	movs	r3, #0
 23e3ec8:	6840      	ldr	r0, [r0, #4]
 23e3eca:	461a      	mov	r2, r3
 23e3ecc:	4619      	mov	r1, r3
 23e3ece:	f013 b891 	b.w	23f6ff4 <network_on>

023e3ed2 <_ZN5spark13CellularClass3offEv>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 23e3ed2:	2300      	movs	r3, #0
 23e3ed4:	6840      	ldr	r0, [r0, #4]
 23e3ed6:	461a      	mov	r2, r3
 23e3ed8:	4619      	mov	r1, r3
 23e3eda:	f013 b899 	b.w	23f7010 <network_off>

023e3ede <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 23e3ede:	2000      	movs	r0, #0
 23e3ee0:	f012 bb3a 	b.w	23f6558 <hal_timer_millis>

023e3ee4 <_Z28raingauge1_interrupt_handlerv>:
 *  raingauge1_interrupt_handler() - This function is called whenever a magnet/interrupt is detected by the arduino
 * ======================================================================================================================
 */
#define RAINGAUGE1_IRQ_PIN A3
void raingauge1_interrupt_handler()
{
 23e3ee4:	b510      	push	{r4, lr}
  if ((System.millis() - raingauge1_interrupt_ltime) > 500) { // Count tip if a half second has gone by since last interrupt
 23e3ee6:	f7ff fffa 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23e3eea:	4c0e      	ldr	r4, [pc, #56]	; (23e3f24 <_Z28raingauge1_interrupt_handlerv+0x40>)
 23e3eec:	e9d4 3200 	ldrd	r3, r2, [r4]
 23e3ef0:	1ac0      	subs	r0, r0, r3
 23e3ef2:	f240 13f5 	movw	r3, #501	; 0x1f5
 23e3ef6:	eb61 0102 	sbc.w	r1, r1, r2
 23e3efa:	4298      	cmp	r0, r3
 23e3efc:	f171 0300 	sbcs.w	r3, r1, #0
 23e3f00:	d30f      	bcc.n	23e3f22 <_Z28raingauge1_interrupt_handlerv+0x3e>
    raingauge1_interrupt_ltime = System.millis();
 23e3f02:	f7ff ffec 	bl	23e3ede <_ZN11SystemClass6millisEv>
    raingauge1_interrupt_count++;
 23e3f06:	4a08      	ldr	r2, [pc, #32]	; (23e3f28 <_Z28raingauge1_interrupt_handlerv+0x44>)
    raingauge1_interrupt_ltime = System.millis();
 23e3f08:	e9c4 0100 	strd	r0, r1, [r4]
    raingauge1_interrupt_count++;
 23e3f0c:	6813      	ldr	r3, [r2, #0]
    digitalWrite(LED_PIN, HIGH);
 23e3f0e:	2101      	movs	r1, #1
    raingauge1_interrupt_count++;
 23e3f10:	3301      	adds	r3, #1
 23e3f12:	6013      	str	r3, [r2, #0]
    digitalWrite(LED_PIN, HIGH);
 23e3f14:	4b05      	ldr	r3, [pc, #20]	; (23e3f2c <_Z28raingauge1_interrupt_handlerv+0x48>)
 23e3f16:	8818      	ldrh	r0, [r3, #0]
 23e3f18:	f015 fc11 	bl	23f973e <digitalWrite>
    TurnLedOff = true;
 23e3f1c:	2201      	movs	r2, #1
 23e3f1e:	4b04      	ldr	r3, [pc, #16]	; (23e3f30 <_Z28raingauge1_interrupt_handlerv+0x4c>)
 23e3f20:	701a      	strb	r2, [r3, #0]
  }   
}
 23e3f22:	bd10      	pop	{r4, pc}
 23e3f24:	1007aa50 	.word	0x1007aa50
 23e3f28:	1007aa4c 	.word	0x1007aa4c
 23e3f2c:	1006a0ec 	.word	0x1006a0ec
 23e3f30:	1006a7d7 	.word	0x1006a7d7

023e3f34 <_Z28raingauge2_interrupt_handlerv>:
 *  raingauge2_interrupt_handler() - This function is called whenever a magnet/interrupt is detected by the arduino
 * ======================================================================================================================
 */
#define RAINGAUGE2_IRQ_PIN   A4
void raingauge2_interrupt_handler()
{
 23e3f34:	b510      	push	{r4, lr}
  if ((System.millis() - raingauge2_interrupt_ltime) > 500) { // Count tip if a half second has gone by since last interrupt
 23e3f36:	f7ff ffd2 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23e3f3a:	4c0e      	ldr	r4, [pc, #56]	; (23e3f74 <_Z28raingauge2_interrupt_handlerv+0x40>)
 23e3f3c:	e9d4 3200 	ldrd	r3, r2, [r4]
 23e3f40:	1ac0      	subs	r0, r0, r3
 23e3f42:	f240 13f5 	movw	r3, #501	; 0x1f5
 23e3f46:	eb61 0102 	sbc.w	r1, r1, r2
 23e3f4a:	4298      	cmp	r0, r3
 23e3f4c:	f171 0300 	sbcs.w	r3, r1, #0
 23e3f50:	d30f      	bcc.n	23e3f72 <_Z28raingauge2_interrupt_handlerv+0x3e>
    raingauge2_interrupt_ltime = System.millis();
 23e3f52:	f7ff ffc4 	bl	23e3ede <_ZN11SystemClass6millisEv>
    raingauge2_interrupt_count++;
 23e3f56:	4a08      	ldr	r2, [pc, #32]	; (23e3f78 <_Z28raingauge2_interrupt_handlerv+0x44>)
    raingauge2_interrupt_ltime = System.millis();
 23e3f58:	e9c4 0100 	strd	r0, r1, [r4]
    raingauge2_interrupt_count++;
 23e3f5c:	6813      	ldr	r3, [r2, #0]
    digitalWrite(LED_PIN, HIGH);
 23e3f5e:	2101      	movs	r1, #1
    raingauge2_interrupt_count++;
 23e3f60:	3301      	adds	r3, #1
 23e3f62:	6013      	str	r3, [r2, #0]
    digitalWrite(LED_PIN, HIGH);
 23e3f64:	4b05      	ldr	r3, [pc, #20]	; (23e3f7c <_Z28raingauge2_interrupt_handlerv+0x48>)
 23e3f66:	8818      	ldrh	r0, [r3, #0]
 23e3f68:	f015 fbe9 	bl	23f973e <digitalWrite>
    TurnLedOff = true;
 23e3f6c:	2201      	movs	r2, #1
 23e3f6e:	4b04      	ldr	r3, [pc, #16]	; (23e3f80 <_Z28raingauge2_interrupt_handlerv+0x4c>)
 23e3f70:	701a      	strb	r2, [r3, #0]
  }   
}
 23e3f72:	bd10      	pop	{r4, pc}
 23e3f74:	1007aa68 	.word	0x1007aa68
 23e3f78:	1007aa60 	.word	0x1007aa60
 23e3f7c:	1006a0ec 	.word	0x1006a0ec
 23e3f80:	1006a7d7 	.word	0x1006a7d7

023e3f84 <_ZN8particle13WatchdogClass11getInstanceEv>:
    static WatchdogClass& getInstance() {
 23e3f84:	b538      	push	{r3, r4, r5, lr}
        static WatchdogClass watchdog;
 23e3f86:	4d0a      	ldr	r5, [pc, #40]	; (23e3fb0 <_ZN8particle13WatchdogClass11getInstanceEv+0x2c>)
 23e3f88:	e8d5 4f8f 	ldab	r4, [r5]
 23e3f8c:	f014 0401 	ands.w	r4, r4, #1
 23e3f90:	d10c      	bne.n	23e3fac <_ZN8particle13WatchdogClass11getInstanceEv+0x28>
 23e3f92:	4628      	mov	r0, r5
 23e3f94:	f013 f9c4 	bl	23f7320 <__cxa_guard_acquire>
 23e3f98:	b140      	cbz	r0, 23e3fac <_ZN8particle13WatchdogClass11getInstanceEv+0x28>
    _Function_base() : _M_manager(nullptr) { }
 23e3f9a:	4b06      	ldr	r3, [pc, #24]	; (23e3fb4 <_ZN8particle13WatchdogClass11getInstanceEv+0x30>)
 23e3f9c:	4628      	mov	r0, r5
 23e3f9e:	609c      	str	r4, [r3, #8]
    }

private:
    WatchdogClass()
            : callback_(nullptr),
              instance_(HAL_WATCHDOG_INSTANCE1) {
 23e3fa0:	741c      	strb	r4, [r3, #16]
        static WatchdogClass watchdog;
 23e3fa2:	f013 f9cb 	bl	23f733c <__cxa_guard_release>
 23e3fa6:	4804      	ldr	r0, [pc, #16]	; (23e3fb8 <_ZN8particle13WatchdogClass11getInstanceEv+0x34>)
 23e3fa8:	f018 f9d0 	bl	23fc34c <atexit>
    }
 23e3fac:	4801      	ldr	r0, [pc, #4]	; (23e3fb4 <_ZN8particle13WatchdogClass11getInstanceEv+0x30>)
 23e3fae:	bd38      	pop	{r3, r4, r5, pc}
 23e3fb0:	1006a234 	.word	0x1006a234
 23e3fb4:	1006a238 	.word	0x1006a238
 23e3fb8:	023e3d89 	.word	0x023e3d89

023e3fbc <_ZN5spark10JSONWriter4nameEPKc>:
inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
 23e3fbc:	b513      	push	{r0, r1, r4, lr}
 23e3fbe:	4604      	mov	r4, r0
    return this->name(name, strlen(name));
 23e3fc0:	4608      	mov	r0, r1
 23e3fc2:	9101      	str	r1, [sp, #4]
 23e3fc4:	f7ff f974 	bl	23e32b0 <strlen>
 23e3fc8:	4602      	mov	r2, r0
 23e3fca:	4620      	mov	r0, r4
 23e3fcc:	9901      	ldr	r1, [sp, #4]
}
 23e3fce:	b002      	add	sp, #8
 23e3fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->name(name, strlen(name));
 23e3fd4:	f014 b9c8 	b.w	23f8368 <_ZN5spark10JSONWriter4nameEPKcj>

023e3fd8 <_ZN11SomLocation8instanceEv>:
    /**
     * @brief Singleton class instance for SomLocation
     *
     * @return SomLocation&
     */
    static SomLocation& instance()
 23e3fd8:	b538      	push	{r3, r4, r5, lr}
    {
        if(!_instance)
 23e3fda:	4d07      	ldr	r5, [pc, #28]	; (23e3ff8 <_ZN11SomLocation8instanceEv+0x20>)
 23e3fdc:	682b      	ldr	r3, [r5, #0]
 23e3fde:	b943      	cbnz	r3, 23e3ff2 <_ZN11SomLocation8instanceEv+0x1a>
        {
            _instance = new SomLocation();
 23e3fe0:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 23e3fe4:	f7ff f989 	bl	23e32fa <_Znwj>
 23e3fe8:	4604      	mov	r4, r0
 23e3fea:	b108      	cbz	r0, 23e3ff0 <_ZN11SomLocation8instanceEv+0x18>
 23e3fec:	f011 febe 	bl	23f5d6c <_ZN11SomLocationC1Ev>
 23e3ff0:	602c      	str	r4, [r5, #0]
        }
        return *_instance;
    }
 23e3ff2:	6828      	ldr	r0, [r5, #0]
 23e3ff4:	bd38      	pop	{r3, r4, r5, pc}
 23e3ff6:	bf00      	nop
 23e3ff8:	1007aea8 	.word	0x1007aea8

023e3ffc <_ZN8FsVolume6existsEPKc>:
   *
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
 23e3ffc:	b500      	push	{lr}
 23e3ffe:	460a      	mov	r2, r1
    return m_fVol   ? m_fVol->exists(path)
 23e4000:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
  bool exists(const char* path) {
 23e4004:	b08f      	sub	sp, #60	; 0x3c
    return m_fVol   ? m_fVol->exists(path)
 23e4006:	b149      	cbz	r1, 23e401c <_ZN8FsVolume6existsEPKc+0x20>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
 23e4008:	2300      	movs	r3, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
 23e400a:	4668      	mov	r0, sp
 23e400c:	9300      	str	r3, [sp, #0]
 23e400e:	f00d ff7a 	bl	23f1f06 <_ZN7FatFile4openEP9FatVolumePKci>
           : m_xVol ? m_xVol->exists(path)
                    : false;
  }
 23e4012:	f000 0001 	and.w	r0, r0, #1
 23e4016:	b00f      	add	sp, #60	; 0x3c
 23e4018:	f85d fb04 	ldr.w	pc, [sp], #4
           : m_xVol ? m_xVol->exists(path)
 23e401c:	f8d0 0484 	ldr.w	r0, [r0, #1156]	; 0x484
 23e4020:	2800      	cmp	r0, #0
 23e4022:	d0f6      	beq.n	23e4012 <_ZN8FsVolume6existsEPKc+0x16>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
 23e4024:	460b      	mov	r3, r1
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
 23e4026:	910c      	str	r1, [sp, #48]	; 0x30
 23e4028:	4601      	mov	r1, r0
 23e402a:	4668      	mov	r0, sp
 23e402c:	f00f fd38 	bl	23f3aa0 <_ZN9ExFatFile4openEP11ExFatVolumePKci>
 23e4030:	e7ef      	b.n	23e4012 <_ZN8FsVolume6existsEPKc+0x16>

023e4032 <_ZN8FsVolume6removeEPKc>:
   *
   * \param[in] path A path with a valid 8.3 DOS name for the file.
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
 23e4032:	b500      	push	{lr}
 23e4034:	460a      	mov	r2, r1
    return m_fVol   ? m_fVol->remove(path)
 23e4036:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
  bool remove(const char* path) {
 23e403a:	b08f      	sub	sp, #60	; 0x3c
    return m_fVol   ? m_fVol->remove(path)
 23e403c:	b171      	cbz	r1, 23e405c <_ZN8FsVolume6removeEPKc+0x2a>
 23e403e:	2300      	movs	r3, #0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
 23e4040:	4668      	mov	r0, sp
 23e4042:	9300      	str	r3, [sp, #0]
 23e4044:	2301      	movs	r3, #1
 23e4046:	f00d ff5e 	bl	23f1f06 <_ZN7FatFile4openEP9FatVolumePKci>
 23e404a:	b110      	cbz	r0, 23e4052 <_ZN8FsVolume6removeEPKc+0x20>
 23e404c:	4668      	mov	r0, sp
 23e404e:	f00e fc17 	bl	23f2880 <_ZN7FatFile6removeEv>
           : m_xVol ? m_xVol->remove(path)
                    : false;
  }
 23e4052:	f000 0001 	and.w	r0, r0, #1
 23e4056:	b00f      	add	sp, #60	; 0x3c
 23e4058:	f85d fb04 	ldr.w	pc, [sp], #4
           : m_xVol ? m_xVol->remove(path)
 23e405c:	f8d0 0484 	ldr.w	r0, [r0, #1156]	; 0x484
 23e4060:	2800      	cmp	r0, #0
 23e4062:	d0f6      	beq.n	23e4052 <_ZN8FsVolume6removeEPKc+0x20>
 23e4064:	910c      	str	r1, [sp, #48]	; 0x30
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
 23e4066:	2301      	movs	r3, #1
 23e4068:	4601      	mov	r1, r0
 23e406a:	4668      	mov	r0, sp
 23e406c:	f00f fd18 	bl	23f3aa0 <_ZN9ExFatFile4openEP11ExFatVolumePKci>
 23e4070:	2800      	cmp	r0, #0
 23e4072:	d0ee      	beq.n	23e4052 <_ZN8FsVolume6removeEPKc+0x20>
 23e4074:	4668      	mov	r0, sp
 23e4076:	f00f fd8d 	bl	23f3b94 <_ZN9ExFatFile6removeEv>
 23e407a:	e7ea      	b.n	23e4052 <_ZN8FsVolume6removeEPKc+0x20>

023e407c <_ZNK10FsBaseFile9availableEv>:
  int available() const {
 23e407c:	b510      	push	{r4, lr}
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
 23e407e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 23e4080:	b15b      	cbz	r3, 23e409a <_ZNK10FsBaseFile9availableEv+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
 23e4082:	7818      	ldrb	r0, [r3, #0]
 23e4084:	f010 0008 	ands.w	r0, r0, #8
 23e4088:	bf1e      	ittt	ne
 23e408a:	69d8      	ldrne	r0, [r3, #28]
 23e408c:	695b      	ldrne	r3, [r3, #20]
 23e408e:	1ac0      	subne	r0, r0, r3
    return n > INT_MAX ? INT_MAX : n;
 23e4090:	2800      	cmp	r0, #0
 23e4092:	bfb8      	it	lt
 23e4094:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
  }
 23e4098:	bd10      	pop	{r4, pc}
 23e409a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
 23e409c:	2800      	cmp	r0, #0
 23e409e:	d0fb      	beq.n	23e4098 <_ZNK10FsBaseFile9availableEv+0x1c>
    return n > INT_MAX ? INT_MAX : n;
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
 23e40a0:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 23e40a4:	f013 0308 	ands.w	r3, r3, #8
 23e40a8:	d00e      	beq.n	23e40c8 <_ZNK10FsBaseFile9availableEv+0x4c>
 23e40aa:	e9d0 1304 	ldrd	r1, r3, [r0, #16]
 23e40ae:	e9d0 2400 	ldrd	r2, r4, [r0]
 23e40b2:	1a88      	subs	r0, r1, r2
 23e40b4:	eb63 0304 	sbc.w	r3, r3, r4
    return n > INT_MAX ? INT_MAX : n;
 23e40b8:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 23e40bc:	f173 0300 	sbcs.w	r3, r3, #0
 23e40c0:	bf28      	it	cs
 23e40c2:	f06f 4000 	mvncs.w	r0, #2147483648	; 0x80000000
 23e40c6:	e7e7      	b.n	23e4098 <_ZNK10FsBaseFile9availableEv+0x1c>
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
 23e40c8:	4618      	mov	r0, r3
 23e40ca:	e7f5      	b.n	23e40b8 <_ZNK10FsBaseFile9availableEv+0x3c>

023e40cc <_ZN10StreamFileI10FsBaseFileyE9availableEv>:
  int available() override { return BaseFile::available(); }
 23e40cc:	b508      	push	{r3, lr}
 23e40ce:	3010      	adds	r0, #16
 23e40d0:	f7ff ffd4 	bl	23e407c <_ZNK10FsBaseFile9availableEv>
 23e40d4:	bd08      	pop	{r3, pc}

023e40d6 <_ZNK10FsBaseFile8fileSizeEv>:
    return m_fFile ? m_fFile->fileSize() : m_xFile ? m_xFile->fileSize() : 0;
 23e40d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 23e40d8:	b113      	cbz	r3, 23e40e0 <_ZNK10FsBaseFile8fileSizeEv+0xa>
 23e40da:	69d8      	ldr	r0, [r3, #28]
 23e40dc:	2100      	movs	r1, #0
 23e40de:	4770      	bx	lr
 23e40e0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 23e40e2:	b113      	cbz	r3, 23e40ea <_ZNK10FsBaseFile8fileSizeEv+0x14>
   * If no data is read, fgets() returns zero for EOF or -1 if an error
   * occurred.
   */
  int fgets(char* str, int num, const char* delim = nullptr);
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const { return m_validLength; }
 23e40e4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 23e40e8:	4770      	bx	lr
 23e40ea:	4618      	mov	r0, r3
 23e40ec:	e7f6      	b.n	23e40dc <_ZNK10FsBaseFile8fileSizeEv+0x6>

023e40ee <_ZNK10FsBaseFile6isOpenEv>:
  bool isOpen() const { return m_fFile || m_xFile; }
 23e40ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
 23e40f0:	b923      	cbnz	r3, 23e40fc <_ZNK10FsBaseFile6isOpenEv+0xe>
 23e40f2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 23e40f4:	3800      	subs	r0, #0
 23e40f6:	bf18      	it	ne
 23e40f8:	2001      	movne	r0, #1
 23e40fa:	4770      	bx	lr
 23e40fc:	2001      	movs	r0, #1
 23e40fe:	4770      	bx	lr

023e4100 <_ZN10FsBaseFile4readEv>:
  int read() {
 23e4100:	b507      	push	{r0, r1, r2, lr}
    return m_fFile   ? m_fFile->read(buf, count)
 23e4102:	6b83      	ldr	r3, [r0, #56]	; 0x38
 23e4104:	b153      	cbz	r3, 23e411c <_ZN10FsBaseFile4readEv+0x1c>
 23e4106:	2201      	movs	r2, #1
 23e4108:	4618      	mov	r0, r3
 23e410a:	f10d 0107 	add.w	r1, sp, #7
 23e410e:	f00d fcb9 	bl	23f1a84 <_ZN7FatFile4readEPvj>
    return read(&b, 1) == 1 ? b : -1;
 23e4112:	2801      	cmp	r0, #1
 23e4114:	d104      	bne.n	23e4120 <_ZN10FsBaseFile4readEv+0x20>
 23e4116:	f89d 0007 	ldrb.w	r0, [sp, #7]
 23e411a:	e003      	b.n	23e4124 <_ZN10FsBaseFile4readEv+0x24>
 23e411c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
           : m_xFile ? m_xFile->read(buf, count)
 23e411e:	b920      	cbnz	r0, 23e412a <_ZN10FsBaseFile4readEv+0x2a>
    return read(&b, 1) == 1 ? b : -1;
 23e4120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
 23e4124:	b003      	add	sp, #12
 23e4126:	f85d fb04 	ldr.w	pc, [sp], #4
           : m_xFile ? m_xFile->read(buf, count)
 23e412a:	2201      	movs	r2, #1
 23e412c:	f10d 0107 	add.w	r1, sp, #7
 23e4130:	f00f f968 	bl	23f3404 <_ZN9ExFatFile4readEPvj>
 23e4134:	e7ed      	b.n	23e4112 <_ZN10FsBaseFile4readEv+0x12>

023e4136 <_ZN10StreamFileI10FsBaseFileyE4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() override { return BaseFile::read(); }
 23e4136:	b508      	push	{r3, lr}
 23e4138:	3010      	adds	r0, #16
 23e413a:	f7ff ffe1 	bl	23e4100 <_ZN10FsBaseFile4readEv>
 23e413e:	bd08      	pop	{r3, pc}

023e4140 <_ZN10FsBaseFile5writeEPKvj>:
    return m_fFile   ? m_fFile->write(buf, count)
 23e4140:	6b83      	ldr	r3, [r0, #56]	; 0x38
 23e4142:	b113      	cbz	r3, 23e414a <_ZN10FsBaseFile5writeEPKvj+0xa>
 23e4144:	4618      	mov	r0, r3
 23e4146:	f00d bfa9 	b.w	23f209c <_ZN7FatFile5writeEPKvj>
 23e414a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
           : m_xFile ? m_xFile->write(buf, count)
 23e414c:	b108      	cbz	r0, 23e4152 <_ZN10FsBaseFile5writeEPKvj+0x12>
 23e414e:	f00f bf37 	b.w	23f3fc0 <_ZN9ExFatFile5writeEPKvj>
  }
 23e4152:	4770      	bx	lr

023e4154 <_ZN10StreamFileI10FsBaseFileyE5writeEPKhj>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) override {
 23e4154:	b508      	push	{r3, lr}
    return BaseFile::write(buffer, size);
 23e4156:	3010      	adds	r0, #16
 23e4158:	f7ff fff2 	bl	23e4140 <_ZN10FsBaseFile5writeEPKvj>
  }
 23e415c:	bd08      	pop	{r3, pc}

023e415e <_ZN10StreamFileI10FsBaseFileyE5writeEh>:
  size_t write(uint8_t b) override { return BaseFile::write(b); }
 23e415e:	b507      	push	{r0, r1, r2, lr}
  size_t write(uint8_t b) { return write(&b, 1); }
 23e4160:	2201      	movs	r2, #1
 23e4162:	f88d 1007 	strb.w	r1, [sp, #7]
 23e4166:	3010      	adds	r0, #16
 23e4168:	f10d 0107 	add.w	r1, sp, #7
 23e416c:	f7ff ffe8 	bl	23e4140 <_ZN10FsBaseFile5writeEPKvj>
 23e4170:	b003      	add	sp, #12
 23e4172:	f85d fb04 	ldr.w	pc, [sp], #4

023e4176 <_Z16I2C_Device_Existh>:
 * 
 *  The i2c_scanner uses the return value of the Write.endTransmisstion to see 
 *  if a device did acknowledge to the address.
 *=======================================================================================================================
 */
bool I2C_Device_Exist(byte address) {
 23e4176:	b507      	push	{r0, r1, r2, lr}
 23e4178:	9001      	str	r0, [sp, #4]
  byte error;

  Wire.begin();                     // Connect to I2C as Master (no addess is passed to signal being a slave)
 23e417a:	f015 fb53 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e417e:	f013 fe87 	bl	23f7e90 <_ZN7TwoWire5beginEv>

  Wire.beginTransmission(address);  // Begin a transmission to the I2C slave device with the given address. 
 23e4182:	f015 fb4f 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e4186:	9901      	ldr	r1, [sp, #4]
 23e4188:	f013 feac 	bl	23f7ee4 <_ZN7TwoWire17beginTransmissionEh>
                                    // Subsequently, queue bytes for transmission with the write() function 
                                    // and transmit them by calling endTransmission(). 

  error = Wire.endTransmission();   // Ends a transmission to a slave device that was begun by beginTransmission() 
 23e418c:	f015 fb4a 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e4190:	f013 feb3 	bl	23f7efa <_ZN7TwoWire15endTransmissionEv>
  else {
    // sprintf (msgbuf, "I2CERR: %d", error);
    // Output (msgbuf);
    return (false);
  }
}
 23e4194:	fab0 f080 	clz	r0, r0
 23e4198:	0940      	lsrs	r0, r0, #5
 23e419a:	b003      	add	sp, #12
 23e419c:	f85d fb04 	ldr.w	pc, [sp], #4

023e41a0 <_Z5Blinkii>:
 * ======================================================================================================================
 * Blink() - Count, delay between, delay at end
 * ======================================================================================================================
 */
void Blink(int count, int between)
{
 23e41a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23e41a2:	4606      	mov	r6, r0
 23e41a4:	460c      	mov	r4, r1
  int c;

  for (c=0; c<count; c++) {
 23e41a6:	2500      	movs	r5, #0
    digitalWrite(LED_PIN, HIGH);
 23e41a8:	4f09      	ldr	r7, [pc, #36]	; (23e41d0 <_Z5Blinkii+0x30>)
  for (c=0; c<count; c++) {
 23e41aa:	42b5      	cmp	r5, r6
 23e41ac:	da0f      	bge.n	23e41ce <_Z5Blinkii+0x2e>
    digitalWrite(LED_PIN, HIGH);
 23e41ae:	2101      	movs	r1, #1
 23e41b0:	8838      	ldrh	r0, [r7, #0]
 23e41b2:	f015 fac4 	bl	23f973e <digitalWrite>
    delay(between);
 23e41b6:	4620      	mov	r0, r4
 23e41b8:	f013 f8ce 	bl	23f7358 <delay>
    digitalWrite(LED_PIN, LOW);
 23e41bc:	2100      	movs	r1, #0
 23e41be:	8838      	ldrh	r0, [r7, #0]
 23e41c0:	f015 fabd 	bl	23f973e <digitalWrite>
    delay(between);
 23e41c4:	4620      	mov	r0, r4
 23e41c6:	f013 f8c7 	bl	23f7358 <delay>
  for (c=0; c<count; c++) {
 23e41ca:	3501      	adds	r5, #1
 23e41cc:	e7ed      	b.n	23e41aa <_Z5Blinkii+0xa>
  }
}
 23e41ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23e41d0:	1006a0ec 	.word	0x1006a0ec

023e41d4 <_Z6mysortPjj>:
/*
 * ======================================================================================================================
 * mysort()
 * ======================================================================================================================
 */
void mysort(unsigned int a[], unsigned int n) { 
 23e41d4:	b530      	push	{r4, r5, lr}
  unsigned int i, j;

  for(i = 0;i < n-1;i++) {
 23e41d6:	3901      	subs	r1, #1
 23e41d8:	b169      	cbz	r1, 23e41f6 <_Z6mysortPjj+0x22>
 23e41da:	4603      	mov	r3, r0
    for(j = 0;j < n-i-1;j++) {
 23e41dc:	2200      	movs	r2, #0
      if(a[j] > a[j+1])
 23e41de:	681c      	ldr	r4, [r3, #0]
 23e41e0:	685d      	ldr	r5, [r3, #4]
 23e41e2:	3201      	adds	r2, #1
 23e41e4:	42ac      	cmp	r4, r5
 23e41e6:	d901      	bls.n	23e41ec <_Z6mysortPjj+0x18>
  *q=t;
 23e41e8:	e9c3 5400 	strd	r5, r4, [r3]
    for(j = 0;j < n-i-1;j++) {
 23e41ec:	428a      	cmp	r2, r1
 23e41ee:	f103 0304 	add.w	r3, r3, #4
 23e41f2:	d3f4      	bcc.n	23e41de <_Z6mysortPjj+0xa>
 23e41f4:	e7ef      	b.n	23e41d6 <_Z6mysortPjj+0x2>
        myswap(&a[j],&a[j+1]);
    }
  }
}
 23e41f6:	bd30      	pop	{r4, r5, pc}

023e41f8 <_Z13JPO_ClearBitsv>:
 * ======================================================================================================================
 * JPO_ClearBits() - Clear System Status Bits related to initialization
 * ======================================================================================================================
 */
void JPO_ClearBits() {
  if (JustPoweredOn) {
 23e41f8:	4b08      	ldr	r3, [pc, #32]	; (23e421c <_Z13JPO_ClearBitsv+0x24>)
 23e41fa:	781a      	ldrb	r2, [r3, #0]
 23e41fc:	b162      	cbz	r2, 23e4218 <_Z13JPO_ClearBitsv+0x20>
    JustPoweredOn = false;
 23e41fe:	2200      	movs	r2, #0
 23e4200:	701a      	strb	r2, [r3, #0]
    SystemStatusBits &= ~SSB_BLX;     // Turn Off BLUX30 Not Found Bit
    SystemStatusBits &= ~SSB_LPS_1;   // Turn Off LPS35HW Not Found Bit
    SystemStatusBits &= ~SSB_LPS_2;   // Turn Off LPS35HW Not Found Bit
    SystemStatusBits &= ~SSB_TLW;     // Turn Off Tinovi Leaf Wetness Not Found Bit
    SystemStatusBits &= ~SSB_TSM;     // Turn Off Tinovi Soil Moisture Not Found Bit
    SystemStatusBits &= ~SSB_TMSM;    // Turn Off Tinovi MultiLevel Soil Moisture Not Found Bit
 23e4202:	4a07      	ldr	r2, [pc, #28]	; (23e4220 <_Z13JPO_ClearBitsv+0x28>)
 23e4204:	6813      	ldr	r3, [r2, #0]
 23e4206:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 23e420a:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 23e420e:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
 23e4212:	f023 0309 	bic.w	r3, r3, #9
 23e4216:	6013      	str	r3, [r2, #0]
  }
}
 23e4218:	4770      	bx	lr
 23e421a:	bf00      	nop
 23e421c:	1006a0ea 	.word	0x1006a0ea
 23e4220:	1006a168 	.word	0x1006a168

023e4224 <_Z17OLED_sleepDisplayv>:
 * ======================================================================================================================
 * OLED_sleepDisplay()
 * ======================================================================================================================
 */
void OLED_sleepDisplay() {
  if (DisplayEnabled) {
 23e4224:	4b06      	ldr	r3, [pc, #24]	; (23e4240 <_Z17OLED_sleepDisplayv+0x1c>)
 23e4226:	781b      	ldrb	r3, [r3, #0]
 23e4228:	b143      	cbz	r3, 23e423c <_Z17OLED_sleepDisplayv+0x18>
    if (OLED32) {
 23e422a:	4b06      	ldr	r3, [pc, #24]	; (23e4244 <_Z17OLED_sleepDisplayv+0x20>)
      display32.ssd1306_command(SSD1306_DISPLAYOFF);
 23e422c:	21ae      	movs	r1, #174	; 0xae
    if (OLED32) {
 23e422e:	681b      	ldr	r3, [r3, #0]
 23e4230:	2b3c      	cmp	r3, #60	; 0x3c
      display32.ssd1306_command(SSD1306_DISPLAYOFF);
 23e4232:	bf0c      	ite	eq
 23e4234:	4804      	ldreq	r0, [pc, #16]	; (23e4248 <_Z17OLED_sleepDisplayv+0x24>)
    }
    else {
      display64.ssd1306_command(SSD1306_DISPLAYOFF);
 23e4236:	4805      	ldrne	r0, [pc, #20]	; (23e424c <_Z17OLED_sleepDisplayv+0x28>)
 23e4238:	f00b bfed 	b.w	23f0216 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    }
  }
}
 23e423c:	4770      	bx	lr
 23e423e:	bf00      	nop
 23e4240:	1006a0e9 	.word	0x1006a0e9
 23e4244:	1007aa10 	.word	0x1007aa10
 23e4248:	1006ad64 	.word	0x1006ad64
 23e424c:	1006add8 	.word	0x1006add8

023e4250 <_Z16OLED_wakeDisplayv>:
 * ======================================================================================================================
 * OLED_wakeDisplay()
 * ======================================================================================================================
 */
void OLED_wakeDisplay() {
  if (DisplayEnabled) {
 23e4250:	4b06      	ldr	r3, [pc, #24]	; (23e426c <_Z16OLED_wakeDisplayv+0x1c>)
 23e4252:	781b      	ldrb	r3, [r3, #0]
 23e4254:	b143      	cbz	r3, 23e4268 <_Z16OLED_wakeDisplayv+0x18>
    if (OLED32) {
 23e4256:	4b06      	ldr	r3, [pc, #24]	; (23e4270 <_Z16OLED_wakeDisplayv+0x20>)
      display32.ssd1306_command(SSD1306_DISPLAYON);
 23e4258:	21af      	movs	r1, #175	; 0xaf
    if (OLED32) {
 23e425a:	681b      	ldr	r3, [r3, #0]
 23e425c:	2b3c      	cmp	r3, #60	; 0x3c
      display32.ssd1306_command(SSD1306_DISPLAYON);
 23e425e:	bf0c      	ite	eq
 23e4260:	4804      	ldreq	r0, [pc, #16]	; (23e4274 <_Z16OLED_wakeDisplayv+0x24>)
    }
    else {
      display64.ssd1306_command(SSD1306_DISPLAYON);
 23e4262:	4805      	ldrne	r0, [pc, #20]	; (23e4278 <_Z16OLED_wakeDisplayv+0x28>)
 23e4264:	f00b bfd7 	b.w	23f0216 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    }
  }
}
 23e4268:	4770      	bx	lr
 23e426a:	bf00      	nop
 23e426c:	1006a0e9 	.word	0x1006a0e9
 23e4270:	1007aa10 	.word	0x1007aa10
 23e4274:	1006ad64 	.word	0x1006ad64
 23e4278:	1006add8 	.word	0x1006add8

023e427c <_Z9OLED_spinv>:
/*
 * ======================================================================================================================
 * OLED_spin() 
 * ======================================================================================================================
 */
void OLED_spin() {
 23e427c:	b570      	push	{r4, r5, r6, lr}
  static int spin=0;
    
  if (DisplayEnabled) {
 23e427e:	4b24      	ldr	r3, [pc, #144]	; (23e4310 <_Z9OLED_spinv+0x94>)
 23e4280:	781b      	ldrb	r3, [r3, #0]
 23e4282:	2b00      	cmp	r3, #0
 23e4284:	d038      	beq.n	23e42f8 <_Z9OLED_spinv+0x7c>
    if (OLED32) {
 23e4286:	4e23      	ldr	r6, [pc, #140]	; (23e4314 <_Z9OLED_spinv+0x98>)
 23e4288:	4d23      	ldr	r5, [pc, #140]	; (23e4318 <_Z9OLED_spinv+0x9c>)
 23e428a:	6833      	ldr	r3, [r6, #0]
 23e428c:	2b3c      	cmp	r3, #60	; 0x3c
 23e428e:	f04f 0301 	mov.w	r3, #1
 23e4292:	d112      	bne.n	23e42ba <_Z9OLED_spinv+0x3e>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
 23e4294:	4c21      	ldr	r4, [pc, #132]	; (23e431c <_Z9OLED_spinv+0xa0>)
    @param   c   16-bit 5-6-5 Color to draw text with
    @param   bg  16-bit 5-6-5 Color to draw background/fill with
  */
  /**********************************************************************/
  void setTextColor(uint16_t c, uint16_t bg) {
    textcolor = c;
 23e4296:	e9c4 5304 	strd	r5, r3, [r4, #16]
      display64.setTextColor(WHITE, BLACK); // Draw 'inverse' text
      display64.setCursor(120,24);
      display64.print(" ");
      display64.setCursor(120,24);
      display64.setCursor(120,56);
      display64.print(" ");
 23e429a:	4620      	mov	r0, r4
 23e429c:	4920      	ldr	r1, [pc, #128]	; (23e4320 <_Z9OLED_spinv+0xa4>)
 23e429e:	f014 fa75 	bl	23f878c <_ZN5Print5printEPKc>
    cursor_x = x;
 23e42a2:	6125      	str	r5, [r4, #16]
      display64.setCursor(120,56);       
    } 
    switch (spin++) {
 23e42a4:	4c1f      	ldr	r4, [pc, #124]	; (23e4324 <_Z9OLED_spinv+0xa8>)
 23e42a6:	6822      	ldr	r2, [r4, #0]
 23e42a8:	1c53      	adds	r3, r2, #1
 23e42aa:	6023      	str	r3, [r4, #0]
 23e42ac:	4b1e      	ldr	r3, [pc, #120]	; (23e4328 <_Z9OLED_spinv+0xac>)
 23e42ae:	2a03      	cmp	r2, #3
 23e42b0:	d80f      	bhi.n	23e42d2 <_Z9OLED_spinv+0x56>
 23e42b2:	e8df f002 	tbb	[pc, r2]
 23e42b6:	220c      	.short	0x220c
 23e42b8:	2624      	.short	0x2624
 23e42ba:	4c1c      	ldr	r4, [pc, #112]	; (23e432c <_Z9OLED_spinv+0xb0>)
      display64.print(" ");
 23e42bc:	4918      	ldr	r1, [pc, #96]	; (23e4320 <_Z9OLED_spinv+0xa4>)
    textcolor = c;
 23e42be:	e9c4 5304 	strd	r5, r3, [r4, #16]
    cursor_x = x;
 23e42c2:	4d1b      	ldr	r5, [pc, #108]	; (23e4330 <_Z9OLED_spinv+0xb4>)
 23e42c4:	4620      	mov	r0, r4
 23e42c6:	f014 fa61 	bl	23f878c <_ZN5Print5printEPKc>
 23e42ca:	6125      	str	r5, [r4, #16]
 23e42cc:	e7e5      	b.n	23e429a <_Z9OLED_spinv+0x1e>
      case 0 : msgp = (char *) "|"; break;
 23e42ce:	4a19      	ldr	r2, [pc, #100]	; (23e4334 <_Z9OLED_spinv+0xb8>)
      case 1 : msgp = (char *) "/"; break;
      case 2 : msgp = (char *) "-"; break;
      case 3 : msgp = (char *) "\\"; break;
 23e42d0:	601a      	str	r2, [r3, #0]
    }
    if (OLED32) {
      display32.print(msgp);
 23e42d2:	6819      	ldr	r1, [r3, #0]
    if (OLED32) {
 23e42d4:	6833      	ldr	r3, [r6, #0]
 23e42d6:	2b3c      	cmp	r3, #60	; 0x3c
 23e42d8:	d115      	bne.n	23e4306 <_Z9OLED_spinv+0x8a>
      display32.print(msgp);
 23e42da:	4810      	ldr	r0, [pc, #64]	; (23e431c <_Z9OLED_spinv+0xa0>)
 23e42dc:	f014 fa56 	bl	23f878c <_ZN5Print5printEPKc>
      display32.display();
 23e42e0:	480e      	ldr	r0, [pc, #56]	; (23e431c <_Z9OLED_spinv+0xa0>)
    }
    else {
      display64.print(msgp);
      display64.display();
 23e42e2:	f00c fa8f 	bl	23f0804 <_ZN16Adafruit_SSD13067displayEv>
    }
    spin %= 4;
 23e42e6:	6823      	ldr	r3, [r4, #0]
 23e42e8:	425a      	negs	r2, r3
 23e42ea:	f002 0203 	and.w	r2, r2, #3
 23e42ee:	f003 0303 	and.w	r3, r3, #3
 23e42f2:	bf58      	it	pl
 23e42f4:	4253      	negpl	r3, r2
 23e42f6:	6023      	str	r3, [r4, #0]
  }
}
 23e42f8:	bd70      	pop	{r4, r5, r6, pc}
      case 1 : msgp = (char *) "/"; break;
 23e42fa:	4a0f      	ldr	r2, [pc, #60]	; (23e4338 <_Z9OLED_spinv+0xbc>)
 23e42fc:	e7e8      	b.n	23e42d0 <_Z9OLED_spinv+0x54>
      case 2 : msgp = (char *) "-"; break;
 23e42fe:	4a0f      	ldr	r2, [pc, #60]	; (23e433c <_Z9OLED_spinv+0xc0>)
 23e4300:	e7e6      	b.n	23e42d0 <_Z9OLED_spinv+0x54>
      case 3 : msgp = (char *) "\\"; break;
 23e4302:	4a0f      	ldr	r2, [pc, #60]	; (23e4340 <_Z9OLED_spinv+0xc4>)
 23e4304:	e7e4      	b.n	23e42d0 <_Z9OLED_spinv+0x54>
      display64.print(msgp);
 23e4306:	4809      	ldr	r0, [pc, #36]	; (23e432c <_Z9OLED_spinv+0xb0>)
 23e4308:	f014 fa40 	bl	23f878c <_ZN5Print5printEPKc>
      display64.display();
 23e430c:	4807      	ldr	r0, [pc, #28]	; (23e432c <_Z9OLED_spinv+0xb0>)
 23e430e:	e7e8      	b.n	23e42e2 <_Z9OLED_spinv+0x66>
 23e4310:	1006a0e9 	.word	0x1006a0e9
 23e4314:	1007aa10 	.word	0x1007aa10
 23e4318:	00180078 	.word	0x00180078
 23e431c:	1006ad64 	.word	0x1006ad64
 23e4320:	023fd432 	.word	0x023fd432
 23e4324:	1006a7dc 	.word	0x1006a7dc
 23e4328:	1006f518 	.word	0x1006f518
 23e432c:	1006add8 	.word	0x1006add8
 23e4330:	00380078 	.word	0x00380078
 23e4334:	023fcb5c 	.word	0x023fcb5c
 23e4338:	023fcb5e 	.word	0x023fcb5e
 23e433c:	023fcb60 	.word	0x023fcb60
 23e4340:	023fcb62 	.word	0x023fcb62

023e4344 <_Z11OLED_updatev>:
/*
 * ======================================================================================================================
 * OLED_update() -- Output oled in memory map to display
 * ======================================================================================================================
 */
void OLED_update() {  
 23e4344:	b538      	push	{r3, r4, r5, lr}
  if (DisplayEnabled) {
 23e4346:	4b32      	ldr	r3, [pc, #200]	; (23e4410 <_Z11OLED_updatev+0xcc>)
 23e4348:	781b      	ldrb	r3, [r3, #0]
 23e434a:	2b00      	cmp	r3, #0
 23e434c:	d05f      	beq.n	23e440e <_Z11OLED_updatev+0xca>
    if (OLED32) {
 23e434e:	4b31      	ldr	r3, [pc, #196]	; (23e4414 <_Z11OLED_updatev+0xd0>)
 23e4350:	2500      	movs	r5, #0
 23e4352:	681b      	ldr	r3, [r3, #0]
 23e4354:	2b3c      	cmp	r3, #60	; 0x3c
 23e4356:	d122      	bne.n	23e439e <_Z11OLED_updatev+0x5a>
      display32.clearDisplay();
 23e4358:	4c2f      	ldr	r4, [pc, #188]	; (23e4418 <_Z11OLED_updatev+0xd4>)
 23e435a:	4620      	mov	r0, r4
 23e435c:	f00b ff87 	bl	23f026e <_ZN16Adafruit_SSD130612clearDisplayEv>
      display32.setCursor(0,0);             // Start at top-left corner
      display32.print(oled_lines [0]);
 23e4360:	492e      	ldr	r1, [pc, #184]	; (23e441c <_Z11OLED_updatev+0xd8>)
 23e4362:	4620      	mov	r0, r4
 23e4364:	6125      	str	r5, [r4, #16]
 23e4366:	f014 fa11 	bl	23f878c <_ZN5Print5printEPKc>
 23e436a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
      display32.setCursor(0,8);
      display32.print(oled_lines [1]);
 23e436e:	492c      	ldr	r1, [pc, #176]	; (23e4420 <_Z11OLED_updatev+0xdc>)
 23e4370:	6123      	str	r3, [r4, #16]
 23e4372:	4620      	mov	r0, r4
 23e4374:	f014 fa0a 	bl	23f878c <_ZN5Print5printEPKc>
 23e4378:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
      display32.setCursor(0,16);
      display32.print(oled_lines [2]);
 23e437c:	4929      	ldr	r1, [pc, #164]	; (23e4424 <_Z11OLED_updatev+0xe0>)
 23e437e:	6123      	str	r3, [r4, #16]
 23e4380:	4620      	mov	r0, r4
 23e4382:	f014 fa03 	bl	23f878c <_ZN5Print5printEPKc>
 23e4386:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
      display32.setCursor(0,24);  
      display32.print(oled_lines [3]);
 23e438a:	4927      	ldr	r1, [pc, #156]	; (23e4428 <_Z11OLED_updatev+0xe4>)
 23e438c:	6123      	str	r3, [r4, #16]
      display64.setCursor(0,40);  
      display64.print(oled_lines [5]);
      display64.setCursor(0,48);  
      display64.print(oled_lines [6]);
      display64.setCursor(0,56);  
      display64.print(oled_lines [7]);
 23e438e:	4620      	mov	r0, r4
 23e4390:	f014 f9fc 	bl	23f878c <_ZN5Print5printEPKc>
      display64.display();
 23e4394:	4620      	mov	r0, r4
     
    }
  }
}
 23e4396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      display64.display();
 23e439a:	f00c ba33 	b.w	23f0804 <_ZN16Adafruit_SSD13067displayEv>
      display64.clearDisplay();
 23e439e:	4c23      	ldr	r4, [pc, #140]	; (23e442c <_Z11OLED_updatev+0xe8>)
 23e43a0:	4620      	mov	r0, r4
 23e43a2:	f00b ff64 	bl	23f026e <_ZN16Adafruit_SSD130612clearDisplayEv>
      display64.print(oled_lines [0]);
 23e43a6:	491d      	ldr	r1, [pc, #116]	; (23e441c <_Z11OLED_updatev+0xd8>)
 23e43a8:	4620      	mov	r0, r4
 23e43aa:	6125      	str	r5, [r4, #16]
 23e43ac:	f014 f9ee 	bl	23f878c <_ZN5Print5printEPKc>
 23e43b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
      display64.print(oled_lines [1]);
 23e43b4:	491a      	ldr	r1, [pc, #104]	; (23e4420 <_Z11OLED_updatev+0xdc>)
 23e43b6:	6123      	str	r3, [r4, #16]
 23e43b8:	4620      	mov	r0, r4
 23e43ba:	f014 f9e7 	bl	23f878c <_ZN5Print5printEPKc>
 23e43be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
      display64.print(oled_lines [2]);
 23e43c2:	4918      	ldr	r1, [pc, #96]	; (23e4424 <_Z11OLED_updatev+0xe0>)
 23e43c4:	6123      	str	r3, [r4, #16]
 23e43c6:	4620      	mov	r0, r4
 23e43c8:	f014 f9e0 	bl	23f878c <_ZN5Print5printEPKc>
 23e43cc:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
      display64.print(oled_lines [3]);
 23e43d0:	4915      	ldr	r1, [pc, #84]	; (23e4428 <_Z11OLED_updatev+0xe4>)
 23e43d2:	6123      	str	r3, [r4, #16]
 23e43d4:	4620      	mov	r0, r4
 23e43d6:	f014 f9d9 	bl	23f878c <_ZN5Print5printEPKc>
 23e43da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
      display64.print(oled_lines [4]);
 23e43de:	4914      	ldr	r1, [pc, #80]	; (23e4430 <_Z11OLED_updatev+0xec>)
 23e43e0:	6123      	str	r3, [r4, #16]
 23e43e2:	4620      	mov	r0, r4
 23e43e4:	f014 f9d2 	bl	23f878c <_ZN5Print5printEPKc>
 23e43e8:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
      display64.print(oled_lines [5]);
 23e43ec:	4911      	ldr	r1, [pc, #68]	; (23e4434 <_Z11OLED_updatev+0xf0>)
 23e43ee:	6123      	str	r3, [r4, #16]
 23e43f0:	4620      	mov	r0, r4
 23e43f2:	f014 f9cb 	bl	23f878c <_ZN5Print5printEPKc>
 23e43f6:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
      display64.print(oled_lines [6]);
 23e43fa:	490f      	ldr	r1, [pc, #60]	; (23e4438 <_Z11OLED_updatev+0xf4>)
 23e43fc:	6123      	str	r3, [r4, #16]
 23e43fe:	4620      	mov	r0, r4
 23e4400:	f014 f9c4 	bl	23f878c <_ZN5Print5printEPKc>
 23e4404:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
      display64.print(oled_lines [7]);
 23e4408:	490c      	ldr	r1, [pc, #48]	; (23e443c <_Z11OLED_updatev+0xf8>)
 23e440a:	6123      	str	r3, [r4, #16]
 23e440c:	e7bf      	b.n	23e438e <_Z11OLED_updatev+0x4a>
}
 23e440e:	bd38      	pop	{r3, r4, r5, pc}
 23e4410:	1006a0e9 	.word	0x1006a0e9
 23e4414:	1007aa10 	.word	0x1007aa10
 23e4418:	1006ad64 	.word	0x1006ad64
 23e441c:	1007a958 	.word	0x1007a958
 23e4420:	1007a96f 	.word	0x1007a96f
 23e4424:	1007a986 	.word	0x1007a986
 23e4428:	1007a99d 	.word	0x1007a99d
 23e442c:	1006add8 	.word	0x1006add8
 23e4430:	1007a9b4 	.word	0x1007a9b4
 23e4434:	1007a9cb 	.word	0x1007a9cb
 23e4438:	1007a9e2 	.word	0x1007a9e2
 23e443c:	1007a9f9 	.word	0x1007a9f9

023e4440 <_Z10OLED_writePKc>:
/*
 * ======================================================================================================================
 * OLED_write() 
 * ======================================================================================================================
 */
void OLED_write(const char *str) {
 23e4440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int c, len, bottom_line = 3;
  
  if (DisplayEnabled) {
 23e4442:	4b36      	ldr	r3, [pc, #216]	; (23e451c <_Z10OLED_writePKc+0xdc>)
void OLED_write(const char *str) {
 23e4444:	4604      	mov	r4, r0
  if (DisplayEnabled) {
 23e4446:	781b      	ldrb	r3, [r3, #0]
 23e4448:	2b00      	cmp	r3, #0
 23e444a:	d066      	beq.n	23e451a <_Z10OLED_writePKc+0xda>
    // move lines up
    for (c=0; c<=21; c++) {
      oled_lines [0][c] = oled_lines [1][c];
      oled_lines [1][c] = oled_lines [2][c];
      oled_lines [2][c] = oled_lines [3][c];
      if (OLED64) {
 23e444c:	4b34      	ldr	r3, [pc, #208]	; (23e4520 <_Z10OLED_writePKc+0xe0>)
 23e444e:	6819      	ldr	r1, [r3, #0]
      oled_lines [0][c] = oled_lines [1][c];
 23e4450:	4b34      	ldr	r3, [pc, #208]	; (23e4524 <_Z10OLED_writePKc+0xe4>)
 23e4452:	f1a3 0217 	sub.w	r2, r3, #23
 23e4456:	4615      	mov	r5, r2
 23e4458:	f103 0014 	add.w	r0, r3, #20
 23e445c:	f853 6b04 	ldr.w	r6, [r3], #4
 23e4460:	4283      	cmp	r3, r0
 23e4462:	f842 6b04 	str.w	r6, [r2], #4
 23e4466:	d1f9      	bne.n	23e445c <_Z10OLED_writePKc+0x1c>
 23e4468:	881b      	ldrh	r3, [r3, #0]
 23e446a:	8013      	strh	r3, [r2, #0]
      oled_lines [1][c] = oled_lines [2][c];
 23e446c:	4b2e      	ldr	r3, [pc, #184]	; (23e4528 <_Z10OLED_writePKc+0xe8>)
 23e446e:	f1a3 0217 	sub.w	r2, r3, #23
 23e4472:	f103 0014 	add.w	r0, r3, #20
 23e4476:	f853 6b04 	ldr.w	r6, [r3], #4
 23e447a:	4283      	cmp	r3, r0
 23e447c:	f842 6b04 	str.w	r6, [r2], #4
 23e4480:	d1f9      	bne.n	23e4476 <_Z10OLED_writePKc+0x36>
 23e4482:	881b      	ldrh	r3, [r3, #0]
 23e4484:	8013      	strh	r3, [r2, #0]
      oled_lines [2][c] = oled_lines [3][c];
 23e4486:	4b29      	ldr	r3, [pc, #164]	; (23e452c <_Z10OLED_writePKc+0xec>)
 23e4488:	f1a3 0217 	sub.w	r2, r3, #23
 23e448c:	f103 0014 	add.w	r0, r3, #20
 23e4490:	f853 6b04 	ldr.w	r6, [r3], #4
 23e4494:	4283      	cmp	r3, r0
 23e4496:	f842 6b04 	str.w	r6, [r2], #4
 23e449a:	d1f9      	bne.n	23e4490 <_Z10OLED_writePKc+0x50>
 23e449c:	881b      	ldrh	r3, [r3, #0]
  int c, len, bottom_line = 3;
 23e449e:	2603      	movs	r6, #3
      oled_lines [2][c] = oled_lines [3][c];
 23e44a0:	8013      	strh	r3, [r2, #0]
    for (c=0; c<=21; c++) {
 23e44a2:	2200      	movs	r2, #0
 23e44a4:	4b22      	ldr	r3, [pc, #136]	; (23e4530 <_Z10OLED_writePKc+0xf0>)
      if (OLED64) {
 23e44a6:	293d      	cmp	r1, #61	; 0x3d
 23e44a8:	d110      	bne.n	23e44cc <_Z10OLED_writePKc+0x8c>
        oled_lines [3][c] = oled_lines [4][c];
        oled_lines [4][c] = oled_lines [5][c];
        oled_lines [5][c] = oled_lines [6][c];  
        oled_lines [6][c] = oled_lines [7][c];  
        bottom_line = 7;          
 23e44aa:	2607      	movs	r6, #7
        oled_lines [3][c] = oled_lines [4][c];
 23e44ac:	f893 005c 	ldrb.w	r0, [r3, #92]	; 0x5c
 23e44b0:	f883 0045 	strb.w	r0, [r3, #69]	; 0x45
        oled_lines [4][c] = oled_lines [5][c];
 23e44b4:	f893 0073 	ldrb.w	r0, [r3, #115]	; 0x73
 23e44b8:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
        oled_lines [5][c] = oled_lines [6][c];  
 23e44bc:	f893 008a 	ldrb.w	r0, [r3, #138]	; 0x8a
 23e44c0:	f883 0073 	strb.w	r0, [r3, #115]	; 0x73
        oled_lines [6][c] = oled_lines [7][c];  
 23e44c4:	f893 00a1 	ldrb.w	r0, [r3, #161]	; 0xa1
 23e44c8:	f883 008a 	strb.w	r0, [r3, #138]	; 0x8a
    for (c=0; c<=21; c++) {
 23e44cc:	3201      	adds	r2, #1
 23e44ce:	2a16      	cmp	r2, #22
 23e44d0:	f103 0301 	add.w	r3, r3, #1
 23e44d4:	d1e7      	bne.n	23e44a6 <_Z10OLED_writePKc+0x66>
      }
    }

    // check length on new output line string
    len = strlen (str);
 23e44d6:	4620      	mov	r0, r4
 23e44d8:	f7fe feea 	bl	23e32b0 <strlen>
    if (len>21) {
 23e44dc:	2217      	movs	r2, #23
 23e44de:	2815      	cmp	r0, #21
 23e44e0:	bfa8      	it	ge
 23e44e2:	2015      	movge	r0, #21
      len = 21;
    }
    for (c=0; c<=len; c++) {
 23e44e4:	4372      	muls	r2, r6
 23e44e6:	1e63      	subs	r3, r4, #1
 23e44e8:	18a9      	adds	r1, r5, r2
 23e44ea:	4404      	add	r4, r0
      oled_lines [bottom_line][c] = *(str+c);
 23e44ec:	f813 7f01 	ldrb.w	r7, [r3, #1]!
    for (c=0; c<=len; c++) {
 23e44f0:	42a3      	cmp	r3, r4
      oled_lines [bottom_line][c] = *(str+c);
 23e44f2:	f801 7b01 	strb.w	r7, [r1], #1
    for (c=0; c<=len; c++) {
 23e44f6:	d1f9      	bne.n	23e44ec <_Z10OLED_writePKc+0xac>
 23e44f8:	1c43      	adds	r3, r0, #1
    }

    // Adding Padding
    for (;c<=21; c++) {
      oled_lines [bottom_line][c] = ' ';
 23e44fa:	4413      	add	r3, r2
 23e44fc:	2120      	movs	r1, #32
 23e44fe:	f1c0 0215 	rsb	r2, r0, #21
 23e4502:	18e8      	adds	r0, r5, r3
 23e4504:	f017 ff6f 	bl	23fc3e6 <memset>
    }
    oled_lines [bottom_line][22] = (char) NULL;
 23e4508:	2317      	movs	r3, #23
 23e450a:	2200      	movs	r2, #0
 23e450c:	fb03 5306 	mla	r3, r3, r6, r5
 23e4510:	759a      	strb	r2, [r3, #22]
    
    OLED_update();
  }
}
 23e4512:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    OLED_update();
 23e4516:	f7ff bf15 	b.w	23e4344 <_Z11OLED_updatev>
}
 23e451a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23e451c:	1006a0e9 	.word	0x1006a0e9
 23e4520:	1007aa10 	.word	0x1007aa10
 23e4524:	1007a96f 	.word	0x1007a96f
 23e4528:	1007a986 	.word	0x1007a986
 23e452c:	1007a99d 	.word	0x1007a99d
 23e4530:	1007a958 	.word	0x1007a958

023e4534 <_Z12Serial_writePKc>:
/*
 * ======================================================================================================================
 * Serial_write() 
 * ======================================================================================================================
 */
void Serial_write(const char *str) {
 23e4534:	b507      	push	{r0, r1, r2, lr}
  if (SerialConsoleEnabled) {
 23e4536:	4b07      	ldr	r3, [pc, #28]	; (23e4554 <_Z12Serial_writePKc+0x20>)
 23e4538:	781b      	ldrb	r3, [r3, #0]
 23e453a:	b143      	cbz	r3, 23e454e <_Z12Serial_writePKc+0x1a>
 23e453c:	9001      	str	r0, [sp, #4]
    Serial.println(str);
 23e453e:	f014 fe8f 	bl	23f9260 <_Z16_fetch_usbserialv>
 23e4542:	9901      	ldr	r1, [sp, #4]
  }
}
 23e4544:	b003      	add	sp, #12
 23e4546:	f85d eb04 	ldr.w	lr, [sp], #4
    Serial.println(str);
 23e454a:	f014 b936 	b.w	23f87ba <_ZN5Print7printlnEPKc>
}
 23e454e:	b003      	add	sp, #12
 23e4550:	f85d fb04 	ldr.w	pc, [sp], #4
 23e4554:	1006a7c7 	.word	0x1006a7c7

023e4558 <_Z14Serial_writelnPKc>:
/*
 * ======================================================================================================================
 * Serial_writeln() 
 * ======================================================================================================================
 */
void Serial_writeln(const char *str) {
 23e4558:	b507      	push	{r0, r1, r2, lr}
  if (SerialConsoleEnabled) {
 23e455a:	4b0a      	ldr	r3, [pc, #40]	; (23e4584 <_Z14Serial_writelnPKc+0x2c>)
 23e455c:	781b      	ldrb	r3, [r3, #0]
 23e455e:	b16b      	cbz	r3, 23e457c <_Z14Serial_writelnPKc+0x24>
 23e4560:	9001      	str	r0, [sp, #4]
    Serial.println(str);
 23e4562:	f014 fe7d 	bl	23f9260 <_Z16_fetch_usbserialv>
 23e4566:	9901      	ldr	r1, [sp, #4]
 23e4568:	f014 f927 	bl	23f87ba <_ZN5Print7printlnEPKc>
    Serial.flush();
 23e456c:	f014 fe78 	bl	23f9260 <_Z16_fetch_usbserialv>
 23e4570:	6803      	ldr	r3, [r0, #0]
 23e4572:	69db      	ldr	r3, [r3, #28]
  }
}
 23e4574:	b003      	add	sp, #12
 23e4576:	f85d eb04 	ldr.w	lr, [sp], #4
    Serial.flush();
 23e457a:	4718      	bx	r3
}
 23e457c:	b003      	add	sp, #12
 23e457e:	f85d fb04 	ldr.w	pc, [sp], #4
 23e4582:	bf00      	nop
 23e4584:	1006a7c7 	.word	0x1006a7c7

023e4588 <_Z6OutputPKc>:
/*
 * ======================================================================================================================
 * Output()
 * ======================================================================================================================
 */
void Output(const char *str) {
 23e4588:	b510      	push	{r4, lr}
 23e458a:	4604      	mov	r4, r0
  OLED_write(str);
 23e458c:	f7ff ff58 	bl	23e4440 <_Z10OLED_writePKc>
  Serial_write(str);
 23e4590:	4620      	mov	r0, r4
}
 23e4592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial_write(str);
 23e4596:	f7ff bfcd 	b.w	23e4534 <_Z12Serial_writePKc>
	...

023e459c <_Z15OLED_initializev>:
/*
 * ======================================================================================================================
 * OLED_initialize() -- Initialize oled if enabled
 * ======================================================================================================================
 */
void OLED_initialize() {
 23e459c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (DisplayEnabled) {
 23e459e:	4d30      	ldr	r5, [pc, #192]	; (23e4660 <_Z15OLED_initializev+0xc4>)
 23e45a0:	782b      	ldrb	r3, [r5, #0]
 23e45a2:	2b00      	cmp	r3, #0
 23e45a4:	d059      	beq.n	23e465a <_Z15OLED_initializev+0xbe>
    if (I2C_Device_Exist (OLED32_I2C_ADDRESS)) {
 23e45a6:	203c      	movs	r0, #60	; 0x3c
 23e45a8:	f7ff fde5 	bl	23e4176 <_Z16I2C_Device_Existh>
 23e45ac:	4604      	mov	r4, r0
 23e45ae:	b318      	cbz	r0, 23e45f8 <_Z15OLED_initializev+0x5c>
      oled_type = OLED32_I2C_ADDRESS;
 23e45b0:	223c      	movs	r2, #60	; 0x3c
      display32.begin(SSD1306_SWITCHCAPVCC, OLED32_I2C_ADDRESS);
 23e45b2:	2501      	movs	r5, #1
 23e45b4:	4c2b      	ldr	r4, [pc, #172]	; (23e4664 <_Z15OLED_initializev+0xc8>)
      oled_type = OLED32_I2C_ADDRESS;
 23e45b6:	4b2c      	ldr	r3, [pc, #176]	; (23e4668 <_Z15OLED_initializev+0xcc>)
      display32.begin(SSD1306_SWITCHCAPVCC, OLED32_I2C_ADDRESS);
 23e45b8:	2102      	movs	r1, #2
      oled_type = OLED32_I2C_ADDRESS;
 23e45ba:	601a      	str	r2, [r3, #0]
      display32.begin(SSD1306_SWITCHCAPVCC, OLED32_I2C_ADDRESS);
 23e45bc:	4620      	mov	r0, r4
 23e45be:	462b      	mov	r3, r5
 23e45c0:	9500      	str	r5, [sp, #0]
 23e45c2:	f00b fe63 	bl	23f028c <_ZN16Adafruit_SSD13065beginEhhbb>
      display32.clearDisplay();
 23e45c6:	4620      	mov	r0, r4
 23e45c8:	f00b fe51 	bl	23f026e <_ZN16Adafruit_SSD130612clearDisplayEv>
      display32.setTextSize(1); // Draw 2X-scale text
 23e45cc:	4620      	mov	r0, r4
 23e45ce:	4629      	mov	r1, r5
 23e45d0:	f00a fe53 	bl	23ef27a <_ZN12Adafruit_GFX11setTextSizeEh>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23e45d4:	2300      	movs	r3, #0
 23e45d6:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 23e45da:	e9c4 3204 	strd	r3, r2, [r4, #16]
      display32.setTextColor(WHITE);
      display32.setCursor(0, 0);
      for (int r=0; r<4; r++) {
        oled_lines[r][0]=0;
 23e45de:	4a23      	ldr	r2, [pc, #140]	; (23e466c <_Z15OLED_initializev+0xd0>)
      }
      OLED_write("OLED32:OK");
 23e45e0:	4823      	ldr	r0, [pc, #140]	; (23e4670 <_Z15OLED_initializev+0xd4>)
        oled_lines[r][0]=0;
 23e45e2:	7013      	strb	r3, [r2, #0]
 23e45e4:	75d3      	strb	r3, [r2, #23]
 23e45e6:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
 23e45ea:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
    else {
      DisplayEnabled = false;
      SystemStatusBits |= SSB_OLED; // Turn on Bit
    }
  }
}
 23e45ee:	b002      	add	sp, #8
 23e45f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      OLED_write("OLED64:OK");
 23e45f4:	f7ff bf24 	b.w	23e4440 <_Z10OLED_writePKc>
    else if (I2C_Device_Exist (OLED64_I2C_ADDRESS)) {
 23e45f8:	203d      	movs	r0, #61	; 0x3d
 23e45fa:	f7ff fdbc 	bl	23e4176 <_Z16I2C_Device_Existh>
 23e45fe:	b330      	cbz	r0, 23e464e <_Z15OLED_initializev+0xb2>
      oled_type = OLED64_I2C_ADDRESS;
 23e4600:	223d      	movs	r2, #61	; 0x3d
      display64.begin(SSD1306_SWITCHCAPVCC, OLED64_I2C_ADDRESS);
 23e4602:	2601      	movs	r6, #1
 23e4604:	4d1b      	ldr	r5, [pc, #108]	; (23e4674 <_Z15OLED_initializev+0xd8>)
      oled_type = OLED64_I2C_ADDRESS;
 23e4606:	4b18      	ldr	r3, [pc, #96]	; (23e4668 <_Z15OLED_initializev+0xcc>)
      display64.begin(SSD1306_SWITCHCAPVCC, OLED64_I2C_ADDRESS);
 23e4608:	2102      	movs	r1, #2
      oled_type = OLED64_I2C_ADDRESS;
 23e460a:	601a      	str	r2, [r3, #0]
      display64.begin(SSD1306_SWITCHCAPVCC, OLED64_I2C_ADDRESS);
 23e460c:	4628      	mov	r0, r5
 23e460e:	4633      	mov	r3, r6
 23e4610:	9600      	str	r6, [sp, #0]
 23e4612:	f00b fe3b 	bl	23f028c <_ZN16Adafruit_SSD13065beginEhhbb>
      display64.clearDisplay();
 23e4616:	4628      	mov	r0, r5
 23e4618:	f00b fe29 	bl	23f026e <_ZN16Adafruit_SSD130612clearDisplayEv>
      display64.setTextSize(1); // Draw 2X-scale text
 23e461c:	4628      	mov	r0, r5
 23e461e:	4631      	mov	r1, r6
 23e4620:	f00a fe2b 	bl	23ef27a <_ZN12Adafruit_GFX11setTextSizeEh>
 23e4624:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 23e4628:	616b      	str	r3, [r5, #20]
        oled_lines[r][0]=0;
 23e462a:	4b10      	ldr	r3, [pc, #64]	; (23e466c <_Z15OLED_initializev+0xd0>)
      OLED_write("OLED64:OK");
 23e462c:	4812      	ldr	r0, [pc, #72]	; (23e4678 <_Z15OLED_initializev+0xdc>)
    cursor_x = x;
 23e462e:	612c      	str	r4, [r5, #16]
        oled_lines[r][0]=0;
 23e4630:	701c      	strb	r4, [r3, #0]
 23e4632:	75dc      	strb	r4, [r3, #23]
 23e4634:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
 23e4638:	f883 4045 	strb.w	r4, [r3, #69]	; 0x45
 23e463c:	f883 405c 	strb.w	r4, [r3, #92]	; 0x5c
 23e4640:	f883 4073 	strb.w	r4, [r3, #115]	; 0x73
 23e4644:	f883 408a 	strb.w	r4, [r3, #138]	; 0x8a
 23e4648:	f883 40a1 	strb.w	r4, [r3, #161]	; 0xa1
      OLED_write("OLED64:OK");
 23e464c:	e7cf      	b.n	23e45ee <_Z15OLED_initializev+0x52>
      SystemStatusBits |= SSB_OLED; // Turn on Bit
 23e464e:	4a0b      	ldr	r2, [pc, #44]	; (23e467c <_Z15OLED_initializev+0xe0>)
      DisplayEnabled = false;
 23e4650:	7028      	strb	r0, [r5, #0]
      SystemStatusBits |= SSB_OLED; // Turn on Bit
 23e4652:	6813      	ldr	r3, [r2, #0]
 23e4654:	f043 0308 	orr.w	r3, r3, #8
 23e4658:	6013      	str	r3, [r2, #0]
}
 23e465a:	b002      	add	sp, #8
 23e465c:	bd70      	pop	{r4, r5, r6, pc}
 23e465e:	bf00      	nop
 23e4660:	1006a0e9 	.word	0x1006a0e9
 23e4664:	1006ad64 	.word	0x1006ad64
 23e4668:	1007aa10 	.word	0x1007aa10
 23e466c:	1007a958 	.word	0x1007a958
 23e4670:	023fcb64 	.word	0x023fcb64
 23e4674:	1006add8 	.word	0x1006add8
 23e4678:	023fcb6e 	.word	0x023fcb6e
 23e467c:	1006a168 	.word	0x1006a168

023e4680 <_Z13stc_timestampv>:
/* 
 *=======================================================================================================================
 * stc_timestamp() - Read from System Time Clock and set timestamp string
 *=======================================================================================================================
 */
void stc_timestamp() {
 23e4680:	b570      	push	{r4, r5, r6, lr}
 23e4682:	b086      	sub	sp, #24

  // ISO_8601 Time Format
  sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
 23e4684:	f014 fd1e 	bl	23f90c4 <_ZN9TimeClass4yearEv>
 23e4688:	9005      	str	r0, [sp, #20]
 23e468a:	f014 fd13 	bl	23f90b4 <_ZN9TimeClass5monthEv>
 23e468e:	9004      	str	r0, [sp, #16]
 23e4690:	f014 fd04 	bl	23f909c <_ZN9TimeClass3dayEv>
 23e4694:	4604      	mov	r4, r0
 23e4696:	f014 fcdd 	bl	23f9054 <_ZN9TimeClass4hourEv>
 23e469a:	4605      	mov	r5, r0
 23e469c:	f014 fce6 	bl	23f906c <_ZN9TimeClass6minuteEv>
 23e46a0:	4606      	mov	r6, r0
 23e46a2:	f014 fcef 	bl	23f9084 <_ZN9TimeClass6secondEv>
 23e46a6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 23e46aa:	e9cd 6002 	strd	r6, r0, [sp, #8]
 23e46ae:	e9cd 4500 	strd	r4, r5, [sp]
 23e46b2:	4903      	ldr	r1, [pc, #12]	; (23e46c0 <_Z13stc_timestampv+0x40>)
 23e46b4:	4803      	ldr	r0, [pc, #12]	; (23e46c4 <_Z13stc_timestampv+0x44>)
 23e46b6:	f012 fd6f 	bl	23f7198 <sprintf>
    Time.year(), Time.month(), Time.day(),
    Time.hour(), Time.minute(), Time.second());
}
 23e46ba:	b006      	add	sp, #24
 23e46bc:	bd70      	pop	{r4, r5, r6, pc}
 23e46be:	bf00      	nop
 23e46c0:	023fcb78 	.word	0x023fcb78
 23e46c4:	1007abd0 	.word	0x1007abd0

023e46c8 <_Z13rtc_timestampv>:
/* 
 *=======================================================================================================================
 * rtc_timestamp() - Read from RTC and set timestamp string
 *=======================================================================================================================
 */
void rtc_timestamp() {
 23e46c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#if (PLATFORM_ID == PLATFORM_MSOM)
  if (ab1805.getRtcAsTm(&now)) {
 23e46ca:	4c11      	ldr	r4, [pc, #68]	; (23e4710 <_Z13rtc_timestampv+0x48>)
 23e46cc:	4811      	ldr	r0, [pc, #68]	; (23e4714 <_Z13rtc_timestampv+0x4c>)
 23e46ce:	4621      	mov	r1, r4
 23e46d0:	f010 fdce 	bl	23f5270 <_ZN6AB180510getRtcAsTmEP2tm>
 23e46d4:	b1a0      	cbz	r0, 23e4700 <_Z13rtc_timestampv+0x38>
    now.tm_year += 1900;
    now.tm_mon += 1;
    sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
 23e46d6:	6821      	ldr	r1, [r4, #0]
    now.tm_year += 1900;
 23e46d8:	6962      	ldr	r2, [r4, #20]
    sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
 23e46da:	9103      	str	r1, [sp, #12]
 23e46dc:	6861      	ldr	r1, [r4, #4]
    now.tm_mon += 1;
 23e46de:	6923      	ldr	r3, [r4, #16]
    sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
 23e46e0:	9102      	str	r1, [sp, #8]
 23e46e2:	68a1      	ldr	r1, [r4, #8]
    now.tm_year += 1900;
 23e46e4:	f202 726c 	addw	r2, r2, #1900	; 0x76c
    sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
 23e46e8:	9101      	str	r1, [sp, #4]
 23e46ea:	68e1      	ldr	r1, [r4, #12]
    now.tm_mon += 1;
 23e46ec:	3301      	adds	r3, #1
    sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
 23e46ee:	9100      	str	r1, [sp, #0]
 23e46f0:	4809      	ldr	r0, [pc, #36]	; (23e4718 <_Z13rtc_timestampv+0x50>)
 23e46f2:	490a      	ldr	r1, [pc, #40]	; (23e471c <_Z13rtc_timestampv+0x54>)
    now.tm_year += 1900;
 23e46f4:	6162      	str	r2, [r4, #20]
    now.tm_mon += 1;
 23e46f6:	6123      	str	r3, [r4, #16]
    sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
 23e46f8:	f012 fd4e 	bl	23f7198 <sprintf>
  // ISO_8601 Time Format
  sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
    now.year(), now.month(), now.day(),
    now.hour(), now.minute(), now.second());
#endif
}
 23e46fc:	b004      	add	sp, #16
 23e46fe:	bd10      	pop	{r4, pc}
    sprintf (timestamp, "0000-00-00T00:00:00"); 
 23e4700:	4907      	ldr	r1, [pc, #28]	; (23e4720 <_Z13rtc_timestampv+0x58>)
 23e4702:	4805      	ldr	r0, [pc, #20]	; (23e4718 <_Z13rtc_timestampv+0x50>)
}
 23e4704:	b004      	add	sp, #16
 23e4706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sprintf (timestamp, "0000-00-00T00:00:00"); 
 23e470a:	f017 bee1 	b.w	23fc4d0 <strcpy>
 23e470e:	bf00      	nop
 23e4710:	1006f51c 	.word	0x1006f51c
 23e4714:	1006a7e0 	.word	0x1006a7e0
 23e4718:	1007abd0 	.word	0x1007abd0
 23e471c:	023fcb78 	.word	0x023fcb78
 23e4720:	023fcb94 	.word	0x023fcb94

023e4724 <_Z14rtc_initializev>:
/* 
 *=======================================================================================================================
 * rtc_initialize()
 *=======================================================================================================================
 */
void rtc_initialize() {
 23e4724:	b513      	push	{r0, r1, r4, lr}

#if (PLATFORM_ID == PLATFORM_MSOM)
  // Note: If the RTC is valid ParticleOS will see this and set the System Clock with it.
  if (!I2C_Device_Exist(AB1805_ADDRESS)) {
 23e4726:	2069      	movs	r0, #105	; 0x69
 23e4728:	f7ff fd25 	bl	23e4176 <_Z16I2C_Device_Existh>
 23e472c:	b970      	cbnz	r0, 23e474c <_Z14rtc_initializev+0x28>
    Output("RTC:I2C NOTFOUND");
 23e472e:	4821      	ldr	r0, [pc, #132]	; (23e47b4 <_Z14rtc_initializev+0x90>)
 23e4730:	f7ff ff2a 	bl	23e4588 <_Z6OutputPKc>
    SystemStatusBits |= SSB_RTC; // Turn on Bit
    delay (5000);
 23e4734:	f241 3088 	movw	r0, #5000	; 0x1388
    SystemStatusBits |= SSB_RTC; // Turn on Bit
 23e4738:	4a1f      	ldr	r2, [pc, #124]	; (23e47b8 <_Z14rtc_initializev+0x94>)
 23e473a:	6813      	ldr	r3, [r2, #0]
 23e473c:	f043 0304 	orr.w	r3, r3, #4
 23e4740:	6013      	str	r3, [r2, #0]
  else {
    Output ("RTC:NEEDS GSM TIME");
    delay (2000); // Give the user some time to see this problem.
  }
#endif
}
 23e4742:	b002      	add	sp, #8
 23e4744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay (2000); // Give the user some time to see this problem.
 23e4748:	f012 be06 	b.w	23f7358 <delay>
  RTC_exists = true; // We have a clock hardware connected
 23e474c:	2401      	movs	r4, #1
  ab1805.setup(); // Initialize AB1805
 23e474e:	2101      	movs	r1, #1
 23e4750:	481a      	ldr	r0, [pc, #104]	; (23e47bc <_Z14rtc_initializev+0x98>)
 23e4752:	f010 ff07 	bl	23f5564 <_ZN6AB18055setupEb>
  RTC_exists = true; // We have a clock hardware connected
 23e4756:	4b1a      	ldr	r3, [pc, #104]	; (23e47c0 <_Z14rtc_initializev+0x9c>)
 23e4758:	701c      	strb	r4, [r3, #0]
  rtc_timestamp();
 23e475a:	f7ff ffb5 	bl	23e46c8 <_Z13rtc_timestampv>
  sprintf (msgbuf, "%sR", timestamp); // Lets show the clock before we test it
 23e475e:	4a19      	ldr	r2, [pc, #100]	; (23e47c4 <_Z14rtc_initializev+0xa0>)
 23e4760:	4919      	ldr	r1, [pc, #100]	; (23e47c8 <_Z14rtc_initializev+0xa4>)
 23e4762:	481a      	ldr	r0, [pc, #104]	; (23e47cc <_Z14rtc_initializev+0xa8>)
 23e4764:	f012 fd18 	bl	23f7198 <sprintf>
  Output (msgbuf);
 23e4768:	4818      	ldr	r0, [pc, #96]	; (23e47cc <_Z14rtc_initializev+0xa8>)
 23e476a:	f7ff ff0d 	bl	23e4588 <_Z6OutputPKc>
    /**
     * @brief Returns true if the RTC has been set
     * 
     * On cold power-up before cloud connecting, this will be false. Note that
     */
    bool isRTCSet() { return isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC); };
 23e476e:	4623      	mov	r3, r4
 23e4770:	4622      	mov	r2, r4
 23e4772:	2110      	movs	r1, #16
 23e4774:	4811      	ldr	r0, [pc, #68]	; (23e47bc <_Z14rtc_initializev+0x98>)
 23e4776:	f010 fc26 	bl	23f4fc6 <_ZN6AB180510isBitClearEhhb>
  if (ab1805.isRTCSet() && (now.tm_year >= 2025) && (now.tm_year <= 2035)) {
 23e477a:	b1a8      	cbz	r0, 23e47a8 <_Z14rtc_initializev+0x84>
 23e477c:	f46f 62fd 	mvn.w	r2, #2024	; 0x7e8
 23e4780:	4b13      	ldr	r3, [pc, #76]	; (23e47d0 <_Z14rtc_initializev+0xac>)
 23e4782:	695b      	ldr	r3, [r3, #20]
 23e4784:	4413      	add	r3, r2
 23e4786:	2b0a      	cmp	r3, #10
 23e4788:	d80e      	bhi.n	23e47a8 <_Z14rtc_initializev+0x84>
    Output("RTC:VALID");
 23e478a:	4812      	ldr	r0, [pc, #72]	; (23e47d4 <_Z14rtc_initializev+0xb0>)
 23e478c:	f7ff fefc 	bl	23e4588 <_Z6OutputPKc>
    ab1805.getRtcAsTime(t);
 23e4790:	4669      	mov	r1, sp
 23e4792:	480a      	ldr	r0, [pc, #40]	; (23e47bc <_Z14rtc_initializev+0x98>)
 23e4794:	f010 fda0 	bl	23f52d8 <_ZN6AB180512getRtcAsTimeERx>
    Time.setTime(t);        
 23e4798:	e9dd 0100 	ldrd	r0, r1, [sp]
 23e479c:	f014 fb30 	bl	23f8e00 <_ZN9TimeClass7setTimeEx>
    RTC_valid = true;
 23e47a0:	4b0d      	ldr	r3, [pc, #52]	; (23e47d8 <_Z14rtc_initializev+0xb4>)
 23e47a2:	701c      	strb	r4, [r3, #0]
}
 23e47a4:	b002      	add	sp, #8
 23e47a6:	bd10      	pop	{r4, pc}
    Output ("RTC:NEEDS GSM TIME");
 23e47a8:	480c      	ldr	r0, [pc, #48]	; (23e47dc <_Z14rtc_initializev+0xb8>)
 23e47aa:	f7ff feed 	bl	23e4588 <_Z6OutputPKc>
    delay (2000); // Give the user some time to see this problem.
 23e47ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23e47b2:	e7c6      	b.n	23e4742 <_Z14rtc_initializev+0x1e>
 23e47b4:	023fcba8 	.word	0x023fcba8
 23e47b8:	1006a168 	.word	0x1006a168
 23e47bc:	1006a7e0 	.word	0x1006a7e0
 23e47c0:	1006a2bf 	.word	0x1006a2bf
 23e47c4:	1007abd0 	.word	0x1007abd0
 23e47c8:	023fcbb9 	.word	0x023fcbb9
 23e47cc:	1006f118 	.word	0x1006f118
 23e47d0:	1006f51c 	.word	0x1006f51c
 23e47d4:	023fcbbd 	.word	0x023fcbbd
 23e47d8:	1006a2c0 	.word	0x1006a2c0
 23e47dc:	023fcbc7 	.word	0x023fcbc7

023e47e0 <_Z15RTC_UpdateCheckv>:
/*
 * ======================================================================================================================
 * RTC_UpdateCheck() - Check if we need to Set or Update the RTC clock from the Cell Network   
 * ======================================================================================================================
 */
void RTC_UpdateCheck() {
 23e47e0:	b510      	push	{r4, lr}
  if (RTC_exists && Particle.connected()) { 
 23e47e2:	4b23      	ldr	r3, [pc, #140]	; (23e4870 <_Z15RTC_UpdateCheckv+0x90>)
 23e47e4:	781b      	ldrb	r3, [r3, #0]
 23e47e6:	b1bb      	cbz	r3, 23e4818 <_Z15RTC_UpdateCheckv+0x38>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23e47e8:	f012 fb4e 	bl	23f6e88 <spark_cloud_flag_connected>
 23e47ec:	b1a0      	cbz	r0, 23e4818 <_Z15RTC_UpdateCheckv+0x38>
    // We have a RTC and We have connected to the Cell network at some point
    if (!RTC_valid) {
 23e47ee:	4c21      	ldr	r4, [pc, #132]	; (23e4874 <_Z15RTC_UpdateCheckv+0x94>)
 23e47f0:	7823      	ldrb	r3, [r4, #0]
 23e47f2:	b993      	cbnz	r3, 23e481a <_Z15RTC_UpdateCheckv+0x3a>
      // Set Uninitialized RTC from STC. Which has been set from the Cloud
#if (PLATFORM_ID == PLATFORM_MSOM)
      ab1805.setRtcFromSystem();
 23e47f4:	4820      	ldr	r0, [pc, #128]	; (23e4878 <_Z15RTC_UpdateCheckv+0x98>)
 23e47f6:	f010 fe12 	bl	23f541e <_ZN6AB180516setRtcFromSystemEv>
#else
      rtc.adjust(DateTime(Time.year(), Time.month(), Time.day(), Time.hour(), Time.minute(), Time.second() ));
#endif
      Output("RTC:SET");
 23e47fa:	4820      	ldr	r0, [pc, #128]	; (23e487c <_Z15RTC_UpdateCheckv+0x9c>)
 23e47fc:	f7ff fec4 	bl	23e4588 <_Z6OutputPKc>
      rtc_timestamp();
 23e4800:	f7ff ff62 	bl	23e46c8 <_Z13rtc_timestampv>
      sprintf (msgbuf, "%sR", timestamp);
 23e4804:	4a1e      	ldr	r2, [pc, #120]	; (23e4880 <_Z15RTC_UpdateCheckv+0xa0>)
 23e4806:	491f      	ldr	r1, [pc, #124]	; (23e4884 <_Z15RTC_UpdateCheckv+0xa4>)
 23e4808:	481f      	ldr	r0, [pc, #124]	; (23e4888 <_Z15RTC_UpdateCheckv+0xa8>)
 23e480a:	f012 fcc5 	bl	23f7198 <sprintf>
      Output (msgbuf);
 23e480e:	481e      	ldr	r0, [pc, #120]	; (23e4888 <_Z15RTC_UpdateCheckv+0xa8>)
 23e4810:	f7ff feba 	bl	23e4588 <_Z6OutputPKc>
      RTC_valid = true;
 23e4814:	2301      	movs	r3, #1
 23e4816:	7023      	strb	r3, [r4, #0]
      sprintf (msgbuf, "%sR", timestamp);
      Output (msgbuf);
      LastTimeUpdate = System.millis();
    }
  }
 23e4818:	bd10      	pop	{r4, pc}
    else if (LastTimeUpdate == 0){
 23e481a:	4c1c      	ldr	r4, [pc, #112]	; (23e488c <_Z15RTC_UpdateCheckv+0xac>)
 23e481c:	e9d4 2300 	ldrd	r2, r3, [r4]
 23e4820:	4313      	orrs	r3, r2
 23e4822:	d114      	bne.n	23e484e <_Z15RTC_UpdateCheckv+0x6e>
      ab1805.setRtcFromSystem();
 23e4824:	4814      	ldr	r0, [pc, #80]	; (23e4878 <_Z15RTC_UpdateCheckv+0x98>)
 23e4826:	f010 fdfa 	bl	23f541e <_ZN6AB180516setRtcFromSystemEv>
      Output("RTC:1ST SYNC");
 23e482a:	4819      	ldr	r0, [pc, #100]	; (23e4890 <_Z15RTC_UpdateCheckv+0xb0>)
      Output("RTC:2HR SYNC");
 23e482c:	f7ff feac 	bl	23e4588 <_Z6OutputPKc>
      rtc_timestamp();
 23e4830:	f7ff ff4a 	bl	23e46c8 <_Z13rtc_timestampv>
      sprintf (msgbuf, "%sR", timestamp);
 23e4834:	4a12      	ldr	r2, [pc, #72]	; (23e4880 <_Z15RTC_UpdateCheckv+0xa0>)
 23e4836:	4913      	ldr	r1, [pc, #76]	; (23e4884 <_Z15RTC_UpdateCheckv+0xa4>)
 23e4838:	4813      	ldr	r0, [pc, #76]	; (23e4888 <_Z15RTC_UpdateCheckv+0xa8>)
 23e483a:	f012 fcad 	bl	23f7198 <sprintf>
      Output (msgbuf);
 23e483e:	4812      	ldr	r0, [pc, #72]	; (23e4888 <_Z15RTC_UpdateCheckv+0xa8>)
 23e4840:	f7ff fea2 	bl	23e4588 <_Z6OutputPKc>
      LastTimeUpdate = System.millis();
 23e4844:	f7ff fb4b 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23e4848:	e9c4 0100 	strd	r0, r1, [r4]
 23e484c:	e7e4      	b.n	23e4818 <_Z15RTC_UpdateCheckv+0x38>
    else if ((System.millis() - LastTimeUpdate) >= 2*3600*1000) {  // It's been 2 hours since last RTC update
 23e484e:	f7ff fb46 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23e4852:	e9d4 3200 	ldrd	r3, r2, [r4]
 23e4856:	1ac0      	subs	r0, r0, r3
 23e4858:	4b0e      	ldr	r3, [pc, #56]	; (23e4894 <_Z15RTC_UpdateCheckv+0xb4>)
 23e485a:	eb61 0102 	sbc.w	r1, r1, r2
 23e485e:	4298      	cmp	r0, r3
 23e4860:	f171 0300 	sbcs.w	r3, r1, #0
 23e4864:	d3d8      	bcc.n	23e4818 <_Z15RTC_UpdateCheckv+0x38>
      ab1805.setRtcFromSystem();
 23e4866:	4804      	ldr	r0, [pc, #16]	; (23e4878 <_Z15RTC_UpdateCheckv+0x98>)
 23e4868:	f010 fdd9 	bl	23f541e <_ZN6AB180516setRtcFromSystemEv>
      Output("RTC:2HR SYNC");
 23e486c:	480a      	ldr	r0, [pc, #40]	; (23e4898 <_Z15RTC_UpdateCheckv+0xb8>)
 23e486e:	e7dd      	b.n	23e482c <_Z15RTC_UpdateCheckv+0x4c>
 23e4870:	1006a2bf 	.word	0x1006a2bf
 23e4874:	1006a2c0 	.word	0x1006a2c0
 23e4878:	1006a7e0 	.word	0x1006a7e0
 23e487c:	023fcbda 	.word	0x023fcbda
 23e4880:	1007abd0 	.word	0x1007abd0
 23e4884:	023fcbb9 	.word	0x023fcbb9
 23e4888:	1006f118 	.word	0x1006f118
 23e488c:	1006a2a8 	.word	0x1006a2a8
 23e4890:	023fcbe2 	.word	0x023fcbe2
 23e4894:	006ddd00 	.word	0x006ddd00
 23e4898:	023fcbef 	.word	0x023fcbef

023e489c <_Z19lora_relay_msg_freeP18LORA_MSG_RELAY_STR>:
 *=======================================================================================================================
 * lora_relay_msg_free()
 *=======================================================================================================================
 */
void lora_relay_msg_free(LORA_MSG_RELAY_STR *m) {
  m->need2log = false;
 23e489c:	2100      	movs	r1, #0
  m->message_type = 0;
  memset (m->message, 0, LORA_RELAY_MSG_LENGTH);
 23e489e:	f44f 7280 	mov.w	r2, #256	; 0x100
  m->need2log = false;
 23e48a2:	7001      	strb	r1, [r0, #0]
  m->message_type = 0;
 23e48a4:	6041      	str	r1, [r0, #4]
  memset (m->message, 0, LORA_RELAY_MSG_LENGTH);
 23e48a6:	3008      	adds	r0, #8
 23e48a8:	f017 bd9d 	b.w	23fc3e6 <memset>

023e48ac <_Z19lora_relay_need2logv>:
 *=======================================================================================================================
 * lora_relay_need2log() - Return true if we have a relay that needs to be logged
 *=======================================================================================================================
 */
bool lora_relay_need2log() {
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e48ac:	2300      	movs	r3, #0
    if (lora_msg_relay[i].need2log) {
 23e48ae:	f44f 7284 	mov.w	r2, #264	; 0x108
 23e48b2:	4904      	ldr	r1, [pc, #16]	; (23e48c4 <_Z19lora_relay_need2logv+0x18>)
 23e48b4:	fb02 f003 	mul.w	r0, r2, r3
 23e48b8:	5c40      	ldrb	r0, [r0, r1]
 23e48ba:	b910      	cbnz	r0, 23e48c2 <_Z19lora_relay_need2logv+0x16>
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e48bc:	3301      	adds	r3, #1
 23e48be:	2b40      	cmp	r3, #64	; 0x40
 23e48c0:	d1f8      	bne.n	23e48b4 <_Z19lora_relay_need2logv+0x8>
      return (true);
    }
  }
  return(false);
}
 23e48c2:	4770      	bx	lr
 23e48c4:	1006aeb0 	.word	0x1006aeb0

023e48c8 <_Z19lora_relay_notinusev>:
 *=======================================================================================================================
 * lora_relay_notinuse() - return first open spot or -1 if full
 *=======================================================================================================================
 */
int lora_relay_notinuse() {
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e48c8:	2000      	movs	r0, #0
    if (!lora_msg_relay[i].need2log) {
 23e48ca:	f44f 7384 	mov.w	r3, #264	; 0x108
 23e48ce:	4a05      	ldr	r2, [pc, #20]	; (23e48e4 <_Z19lora_relay_notinusev+0x1c>)
 23e48d0:	fb03 f100 	mul.w	r1, r3, r0
 23e48d4:	5c89      	ldrb	r1, [r1, r2]
 23e48d6:	b121      	cbz	r1, 23e48e2 <_Z19lora_relay_notinusev+0x1a>
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e48d8:	3001      	adds	r0, #1
 23e48da:	2840      	cmp	r0, #64	; 0x40
 23e48dc:	d1f8      	bne.n	23e48d0 <_Z19lora_relay_notinusev+0x8>
      return (i);
    }
  }
  return(-1);
 23e48de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23e48e2:	4770      	bx	lr
 23e48e4:	1006aeb0 	.word	0x1006aeb0

023e48e8 <_Z23lora_relay_need2log_idxv>:
 *=======================================================================================================================
 * lora_relay_need2log_idx() - return first need2log spot or -1 if none
 *=======================================================================================================================
 */
int lora_relay_need2log_idx() {
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e48e8:	2000      	movs	r0, #0
    if (lora_msg_relay[i].need2log) {
 23e48ea:	f44f 7384 	mov.w	r3, #264	; 0x108
 23e48ee:	4a05      	ldr	r2, [pc, #20]	; (23e4904 <_Z23lora_relay_need2log_idxv+0x1c>)
 23e48f0:	fb03 f100 	mul.w	r1, r3, r0
 23e48f4:	5c89      	ldrb	r1, [r1, r2]
 23e48f6:	b921      	cbnz	r1, 23e4902 <_Z23lora_relay_need2log_idxv+0x1a>
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e48f8:	3001      	adds	r0, #1
 23e48fa:	2840      	cmp	r0, #64	; 0x40
 23e48fc:	d1f8      	bne.n	23e48f0 <_Z23lora_relay_need2log_idxv+0x8>
      return (i);
    }
  }
  return(-1);
 23e48fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23e4902:	4770      	bx	lr
 23e4904:	1006aeb0 	.word	0x1006aeb0

023e4908 <_Z22lora_device_initializev>:
/* 
 *=======================================================================================================================
 * lora_device_initialize()
 *=======================================================================================================================
 */
void lora_device_initialize() {
 23e4908:	b538      	push	{r3, r4, r5, lr}
  if (LORA_exists) {
 23e490a:	4b07      	ldr	r3, [pc, #28]	; (23e4928 <_Z22lora_device_initializev+0x20>)
 23e490c:	781b      	ldrb	r3, [r3, #0]
 23e490e:	b14b      	cbz	r3, 23e4924 <_Z22lora_device_initializev+0x1c>
    // Init LoRa Relay Message structure
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e4910:	2400      	movs	r4, #0
 23e4912:	4d06      	ldr	r5, [pc, #24]	; (23e492c <_Z22lora_device_initializev+0x24>)
      lora_relay_msg_free(&lora_msg_relay[i]);
 23e4914:	4628      	mov	r0, r5
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e4916:	3401      	adds	r4, #1
      lora_relay_msg_free(&lora_msg_relay[i]);
 23e4918:	f7ff ffc0 	bl	23e489c <_Z19lora_relay_msg_freeP18LORA_MSG_RELAY_STR>
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e491c:	2c40      	cmp	r4, #64	; 0x40
 23e491e:	f505 7584 	add.w	r5, r5, #264	; 0x108
 23e4922:	d1f7      	bne.n	23e4914 <_Z22lora_device_initializev+0xc>
    }
  }
}
 23e4924:	bd38      	pop	{r3, r4, r5, pc}
 23e4926:	bf00      	nop
 23e4928:	1006a2a1 	.word	0x1006a2a1
 23e492c:	1006aeb0 	.word	0x1006aeb0

023e4930 <_Z16lora_cf_validatev>:
/* 
 *=======================================================================================================================
 * lora_cf_validate() - Validate LoRa variables from CONFIG.TXT
 *=======================================================================================================================
 */
bool lora_cf_validate() {
 23e4930:	b570      	push	{r4, r5, r6, lr}
  if (cf_aes_pkey == NULL) {
 23e4932:	4b2a      	ldr	r3, [pc, #168]	; (23e49dc <_Z16lora_cf_validatev+0xac>)
 23e4934:	681d      	ldr	r5, [r3, #0]
 23e4936:	b925      	cbnz	r5, 23e4942 <_Z16lora_cf_validatev+0x12>
    Output ("AES PKEY !SET");
 23e4938:	4829      	ldr	r0, [pc, #164]	; (23e49e0 <_Z16lora_cf_validatev+0xb0>)
    return (false);
  }
  else if (strlen (cf_aes_pkey) != 16) {
    Output ("AES PKEY !16 Bytes");
 23e493a:	f7ff fe25 	bl	23e4588 <_Z6OutputPKc>
    return (false);    
 23e493e:	2000      	movs	r0, #0
    sprintf(msgbuf, "AES_MYIV[%u]", AES_MYIV); Output (msgbuf);

    Output ("LORA CFV OK");
    return (true);
  }
}
 23e4940:	bd70      	pop	{r4, r5, r6, pc}
  else if (strlen (cf_aes_pkey) != 16) {
 23e4942:	4628      	mov	r0, r5
 23e4944:	f7fe fcb4 	bl	23e32b0 <strlen>
 23e4948:	2810      	cmp	r0, #16
 23e494a:	d001      	beq.n	23e4950 <_Z16lora_cf_validatev+0x20>
    Output ("AES PKEY !16 Bytes");
 23e494c:	4825      	ldr	r0, [pc, #148]	; (23e49e4 <_Z16lora_cf_validatev+0xb4>)
 23e494e:	e7f4      	b.n	23e493a <_Z16lora_cf_validatev+0xa>
  else if (cf_aes_myiv == 0) {
 23e4950:	4e25      	ldr	r6, [pc, #148]	; (23e49e8 <_Z16lora_cf_validatev+0xb8>)
 23e4952:	6834      	ldr	r4, [r6, #0]
 23e4954:	b90c      	cbnz	r4, 23e495a <_Z16lora_cf_validatev+0x2a>
    Output ("AES MYIV !SET");
 23e4956:	4825      	ldr	r0, [pc, #148]	; (23e49ec <_Z16lora_cf_validatev+0xbc>)
 23e4958:	e7ef      	b.n	23e493a <_Z16lora_cf_validatev+0xa>
  else if ((cf_lora_txpower<5) || (cf_lora_txpower>23)) {
 23e495a:	4b25      	ldr	r3, [pc, #148]	; (23e49f0 <_Z16lora_cf_validatev+0xc0>)
 23e495c:	681b      	ldr	r3, [r3, #0]
 23e495e:	3b05      	subs	r3, #5
 23e4960:	2b12      	cmp	r3, #18
 23e4962:	d901      	bls.n	23e4968 <_Z16lora_cf_validatev+0x38>
    Output ("LORA PWR ERR");
 23e4964:	4823      	ldr	r0, [pc, #140]	; (23e49f4 <_Z16lora_cf_validatev+0xc4>)
 23e4966:	e7e8      	b.n	23e493a <_Z16lora_cf_validatev+0xa>
  else if ((cf_lora_freq!=915) && (cf_lora_freq!=866) && (cf_lora_freq!=433)) {
 23e4968:	f240 3293 	movw	r2, #915	; 0x393
 23e496c:	4b22      	ldr	r3, [pc, #136]	; (23e49f8 <_Z16lora_cf_validatev+0xc8>)
 23e496e:	681b      	ldr	r3, [r3, #0]
 23e4970:	4293      	cmp	r3, r2
 23e4972:	d009      	beq.n	23e4988 <_Z16lora_cf_validatev+0x58>
 23e4974:	f240 3262 	movw	r2, #866	; 0x362
 23e4978:	4293      	cmp	r3, r2
 23e497a:	d005      	beq.n	23e4988 <_Z16lora_cf_validatev+0x58>
 23e497c:	f240 12b1 	movw	r2, #433	; 0x1b1
 23e4980:	4293      	cmp	r3, r2
 23e4982:	d001      	beq.n	23e4988 <_Z16lora_cf_validatev+0x58>
    Output ("LORA FREQ ERR");
 23e4984:	481d      	ldr	r0, [pc, #116]	; (23e49fc <_Z16lora_cf_validatev+0xcc>)
 23e4986:	e7d8      	b.n	23e493a <_Z16lora_cf_validatev+0xa>
  else if ((cf_lora_unitid<0) || (cf_lora_unitid>254)) {
 23e4988:	4b1d      	ldr	r3, [pc, #116]	; (23e4a00 <_Z16lora_cf_validatev+0xd0>)
 23e498a:	681b      	ldr	r3, [r3, #0]
 23e498c:	2bfe      	cmp	r3, #254	; 0xfe
 23e498e:	d901      	bls.n	23e4994 <_Z16lora_cf_validatev+0x64>
    Output ("LORA ADDR ERR");
 23e4990:	481c      	ldr	r0, [pc, #112]	; (23e4a04 <_Z16lora_cf_validatev+0xd4>)
 23e4992:	e7d2      	b.n	23e493a <_Z16lora_cf_validatev+0xa>
    memcpy ((char *)AES_KEY, cf_aes_pkey, 16);
 23e4994:	462b      	mov	r3, r5
 23e4996:	4a1c      	ldr	r2, [pc, #112]	; (23e4a08 <_Z16lora_cf_validatev+0xd8>)
 23e4998:	f105 0110 	add.w	r1, r5, #16
 23e499c:	f853 0b04 	ldr.w	r0, [r3], #4
 23e49a0:	428b      	cmp	r3, r1
 23e49a2:	f842 0b04 	str.w	r0, [r2], #4
 23e49a6:	d1f9      	bne.n	23e499c <_Z16lora_cf_validatev+0x6c>
    sprintf(msgbuf, "AES_KEY[%s]", cf_aes_pkey); Output (msgbuf);
 23e49a8:	462a      	mov	r2, r5
 23e49aa:	4918      	ldr	r1, [pc, #96]	; (23e4a0c <_Z16lora_cf_validatev+0xdc>)
 23e49ac:	4818      	ldr	r0, [pc, #96]	; (23e4a10 <_Z16lora_cf_validatev+0xe0>)
 23e49ae:	f012 fbf3 	bl	23f7198 <sprintf>
 23e49b2:	4817      	ldr	r0, [pc, #92]	; (23e4a10 <_Z16lora_cf_validatev+0xe0>)
 23e49b4:	f7ff fde8 	bl	23e4588 <_Z6OutputPKc>
    AES_MYIV=cf_aes_myiv;
 23e49b8:	6832      	ldr	r2, [r6, #0]
 23e49ba:	4916      	ldr	r1, [pc, #88]	; (23e4a14 <_Z16lora_cf_validatev+0xe4>)
 23e49bc:	17d3      	asrs	r3, r2, #31
 23e49be:	e9c1 2300 	strd	r2, r3, [r1]
    sprintf(msgbuf, "AES_MYIV[%u]", AES_MYIV); Output (msgbuf);
 23e49c2:	4813      	ldr	r0, [pc, #76]	; (23e4a10 <_Z16lora_cf_validatev+0xe0>)
 23e49c4:	4914      	ldr	r1, [pc, #80]	; (23e4a18 <_Z16lora_cf_validatev+0xe8>)
 23e49c6:	f012 fbe7 	bl	23f7198 <sprintf>
 23e49ca:	4811      	ldr	r0, [pc, #68]	; (23e4a10 <_Z16lora_cf_validatev+0xe0>)
 23e49cc:	f7ff fddc 	bl	23e4588 <_Z6OutputPKc>
    Output ("LORA CFV OK");
 23e49d0:	4812      	ldr	r0, [pc, #72]	; (23e4a1c <_Z16lora_cf_validatev+0xec>)
 23e49d2:	f7ff fdd9 	bl	23e4588 <_Z6OutputPKc>
    return (true);
 23e49d6:	2001      	movs	r0, #1
 23e49d8:	e7b2      	b.n	23e4940 <_Z16lora_cf_validatev+0x10>
 23e49da:	bf00      	nop
 23e49dc:	1006ac6c 	.word	0x1006ac6c
 23e49e0:	023fcbfc 	.word	0x023fcbfc
 23e49e4:	023fcc0a 	.word	0x023fcc0a
 23e49e8:	1006ac68 	.word	0x1006ac68
 23e49ec:	023fcc1d 	.word	0x023fcc1d
 23e49f0:	1006a184 	.word	0x1006a184
 23e49f4:	023fcc2b 	.word	0x023fcc2b
 23e49f8:	1006a180 	.word	0x1006a180
 23e49fc:	023fcc38 	.word	0x023fcc38
 23e4a00:	1006a188 	.word	0x1006a188
 23e4a04:	023fcc46 	.word	0x023fcc46
 23e4a08:	1006a254 	.word	0x1006a254
 23e4a0c:	023fcc54 	.word	0x023fcc54
 23e4a10:	1006f118 	.word	0x1006f118
 23e4a14:	1006a268 	.word	0x1006a268
 23e4a18:	023fcc60 	.word	0x023fcc60
 23e4a1c:	023fcc6d 	.word	0x023fcc6d

023e4a20 <_Z16get_Bosch_ChipIDh>:
 *   Chip ID BME280 = 0x60 temp, pressure, humidity - I2C ADDRESS 0x77  (SD0 to GND = 0x76)  Register 0xE0 = Reset
 *   Chip ID BMP388 = 0x50 temp, pressure           - I2C ADDRESS 0x77  (SD0 to GND = 0x76)
 *   Chip ID BMP390 = 0x60 temp, pressure           - I2C ADDRESS 0x77  (SD0 to GND = 0x76)
 *=======================================================================================================================
 */
byte get_Bosch_ChipID (byte address) {
 23e4a20:	b570      	push	{r4, r5, r6, lr}
 23e4a22:	4605      	mov	r5, r0
  byte chip_id = 0;
  byte error;

  Output ("get_Bosch_ChipID()");
 23e4a24:	4848      	ldr	r0, [pc, #288]	; (23e4b48 <_Z16get_Bosch_ChipIDh+0x128>)
 23e4a26:	f7ff fdaf 	bl	23e4588 <_Z6OutputPKc>

  // Important! Need to check the 0x00 register first. Doing a 0x0D (not chip id loaction) on a bmp388 
  // will return a value that could match one of the IDs 

  // Check Register 0x00
  sprintf (msgbuf, "  I2C:%02X Reg:%02X", address, 0x00);
 23e4a2a:	462a      	mov	r2, r5
 23e4a2c:	2300      	movs	r3, #0
 23e4a2e:	4947      	ldr	r1, [pc, #284]	; (23e4b4c <_Z16get_Bosch_ChipIDh+0x12c>)
 23e4a30:	4847      	ldr	r0, [pc, #284]	; (23e4b50 <_Z16get_Bosch_ChipIDh+0x130>)
 23e4a32:	f012 fbb1 	bl	23f7198 <sprintf>
  Output (msgbuf);
 23e4a36:	4846      	ldr	r0, [pc, #280]	; (23e4b50 <_Z16get_Bosch_ChipIDh+0x130>)
 23e4a38:	f7ff fda6 	bl	23e4588 <_Z6OutputPKc>
  Wire.begin();
 23e4a3c:	f014 fef2 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e4a40:	f013 fa26 	bl	23f7e90 <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(address);
 23e4a44:	f014 feee 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e4a48:	4629      	mov	r1, r5
 23e4a4a:	f013 fa4b 	bl	23f7ee4 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(0x00);  // BM3 CHIPID REGISTER
 23e4a4e:	f014 fee9 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e4a52:	2100      	movs	r1, #0
 23e4a54:	f7ff f9f6 	bl	23e3e44 <_ZN7TwoWire5writeEi.isra.0>
  error = Wire.endTransmission();
 23e4a58:	f014 fee4 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e4a5c:	f013 fa4d 	bl	23f7efa <_ZN7TwoWire15endTransmissionEv>
    //  0:success
    //  1:data too long to fit in transmit buffer
    //  2:received NACK on transmit of address
    //  3:received NACK on transmit of data
    //  4:other error 
  if (error) {
 23e4a60:	4602      	mov	r2, r0
 23e4a62:	b370      	cbz	r0, 23e4ac2 <_Z16get_Bosch_ChipIDh+0xa2>
    sprintf (msgbuf, "  ERR_ET:%d", error);
 23e4a64:	493b      	ldr	r1, [pc, #236]	; (23e4b54 <_Z16get_Bosch_ChipIDh+0x134>)
      sprintf (msgbuf, "  CHIPID:%02X BME/390", chip_id);
      Output (msgbuf);
      return (chip_id); // Found a Sensor!   
    }
    else {
      sprintf (msgbuf, "  CHIPID:%02X InValid", chip_id);
 23e4a66:	483a      	ldr	r0, [pc, #232]	; (23e4b50 <_Z16get_Bosch_ChipIDh+0x130>)
 23e4a68:	f012 fb96 	bl	23f7198 <sprintf>
      Output (msgbuf);      
    }
  }
  else {
    sprintf (msgbuf, "  ERR_RF:0");
    Output (msgbuf);
 23e4a6c:	4838      	ldr	r0, [pc, #224]	; (23e4b50 <_Z16get_Bosch_ChipIDh+0x130>)
 23e4a6e:	f7ff fd8b 	bl	23e4588 <_Z6OutputPKc>
  }

  // Check Register 0xD0
  chip_id = 0;
  sprintf (msgbuf, "  I2C:%02X Reg:%02X", address, 0xD0);
 23e4a72:	23d0      	movs	r3, #208	; 0xd0
 23e4a74:	462a      	mov	r2, r5
 23e4a76:	4935      	ldr	r1, [pc, #212]	; (23e4b4c <_Z16get_Bosch_ChipIDh+0x12c>)
 23e4a78:	4835      	ldr	r0, [pc, #212]	; (23e4b50 <_Z16get_Bosch_ChipIDh+0x130>)
 23e4a7a:	f012 fb8d 	bl	23f7198 <sprintf>
  Output (msgbuf);
 23e4a7e:	4834      	ldr	r0, [pc, #208]	; (23e4b50 <_Z16get_Bosch_ChipIDh+0x130>)
 23e4a80:	f7ff fd82 	bl	23e4588 <_Z6OutputPKc>
  Wire.begin();
 23e4a84:	f014 fece 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e4a88:	f013 fa02 	bl	23f7e90 <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(address);
 23e4a8c:	f014 feca 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e4a90:	4629      	mov	r1, r5
 23e4a92:	f013 fa27 	bl	23f7ee4 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(0xD0);  // BM2 CHIPID REGISTER
 23e4a96:	f014 fec5 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e4a9a:	21d0      	movs	r1, #208	; 0xd0
 23e4a9c:	f7ff f9d2 	bl	23e3e44 <_ZN7TwoWire5writeEi.isra.0>
  error = Wire.endTransmission();
 23e4aa0:	f014 fec0 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e4aa4:	f013 fa29 	bl	23f7efa <_ZN7TwoWire15endTransmissionEv>
    //  0:success
    //  1:data too long to fit in transmit buffer
    //  2:received NACK on transmit of address
    //  3:received NACK on transmit of data
    //  4:other error 
  if (error) {
 23e4aa8:	2800      	cmp	r0, #0
 23e4aaa:	d031      	beq.n	23e4b10 <_Z16get_Bosch_ChipIDh+0xf0>
    sprintf (msgbuf, "  ERR_ET:%d", error);
 23e4aac:	4602      	mov	r2, r0
 23e4aae:	4929      	ldr	r1, [pc, #164]	; (23e4b54 <_Z16get_Bosch_ChipIDh+0x134>)
 23e4ab0:	4827      	ldr	r0, [pc, #156]	; (23e4b50 <_Z16get_Bosch_ChipIDh+0x130>)
 23e4ab2:	f012 fb71 	bl	23f7198 <sprintf>
    Output (msgbuf);
 23e4ab6:	4826      	ldr	r0, [pc, #152]	; (23e4b50 <_Z16get_Bosch_ChipIDh+0x130>)
 23e4ab8:	f7ff fd66 	bl	23e4588 <_Z6OutputPKc>
  }
  else {
    sprintf (msgbuf, "  ERR_RF:0");
    Output (msgbuf);
  }
  return(0);
 23e4abc:	2400      	movs	r4, #0
}
 23e4abe:	4620      	mov	r0, r4
 23e4ac0:	bd70      	pop	{r4, r5, r6, pc}
  else if (Wire.requestFrom(address, 1)) {  // Returns the number of bytes returned from the slave device 
 23e4ac2:	f014 feaf 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e4ac6:	2201      	movs	r2, #1
 23e4ac8:	4629      	mov	r1, r5
 23e4aca:	f013 fa08 	bl	23f7ede <_ZN7TwoWire11requestFromEhj>
 23e4ace:	b1d0      	cbz	r0, 23e4b06 <_Z16get_Bosch_ChipIDh+0xe6>
    chip_id = Wire.read();
 23e4ad0:	f014 fea8 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e4ad4:	6803      	ldr	r3, [r0, #0]
 23e4ad6:	695b      	ldr	r3, [r3, #20]
 23e4ad8:	4798      	blx	r3
 23e4ada:	b2c4      	uxtb	r4, r0
    if (chip_id == BMP280_CHIP_ID) { // 0x58
 23e4adc:	2c58      	cmp	r4, #88	; 0x58
      sprintf (msgbuf, "  CHIPID:%02X BMP280", chip_id);
 23e4ade:	4622      	mov	r2, r4
    if (chip_id == BMP280_CHIP_ID) { // 0x58
 23e4ae0:	d101      	bne.n	23e4ae6 <_Z16get_Bosch_ChipIDh+0xc6>
      sprintf (msgbuf, "  CHIPID:%02X BMP280", chip_id);
 23e4ae2:	491d      	ldr	r1, [pc, #116]	; (23e4b58 <_Z16get_Bosch_ChipIDh+0x138>)
 23e4ae4:	e002      	b.n	23e4aec <_Z16get_Bosch_ChipIDh+0xcc>
    else if (chip_id == BMP388_CHIP_ID) {  // 0x50
 23e4ae6:	2c50      	cmp	r4, #80	; 0x50
 23e4ae8:	d107      	bne.n	23e4afa <_Z16get_Bosch_ChipIDh+0xda>
      sprintf (msgbuf, "  CHIPID:%02X BMP388", chip_id);
 23e4aea:	491c      	ldr	r1, [pc, #112]	; (23e4b5c <_Z16get_Bosch_ChipIDh+0x13c>)
 23e4aec:	4818      	ldr	r0, [pc, #96]	; (23e4b50 <_Z16get_Bosch_ChipIDh+0x130>)
 23e4aee:	f012 fb53 	bl	23f7198 <sprintf>
    Output (msgbuf);
 23e4af2:	4817      	ldr	r0, [pc, #92]	; (23e4b50 <_Z16get_Bosch_ChipIDh+0x130>)
 23e4af4:	f7ff fd48 	bl	23e4588 <_Z6OutputPKc>
 23e4af8:	e7e1      	b.n	23e4abe <_Z16get_Bosch_ChipIDh+0x9e>
    else if (chip_id == BME280_BMP390_CHIP_ID) {  // 0x60
 23e4afa:	2c60      	cmp	r4, #96	; 0x60
 23e4afc:	d101      	bne.n	23e4b02 <_Z16get_Bosch_ChipIDh+0xe2>
      sprintf (msgbuf, "  CHIPID:%02X BME/390", chip_id);
 23e4afe:	4918      	ldr	r1, [pc, #96]	; (23e4b60 <_Z16get_Bosch_ChipIDh+0x140>)
 23e4b00:	e7f4      	b.n	23e4aec <_Z16get_Bosch_ChipIDh+0xcc>
      sprintf (msgbuf, "  CHIPID:%02X InValid", chip_id);
 23e4b02:	4918      	ldr	r1, [pc, #96]	; (23e4b64 <_Z16get_Bosch_ChipIDh+0x144>)
 23e4b04:	e7af      	b.n	23e4a66 <_Z16get_Bosch_ChipIDh+0x46>
    sprintf (msgbuf, "  ERR_RF:0");
 23e4b06:	4918      	ldr	r1, [pc, #96]	; (23e4b68 <_Z16get_Bosch_ChipIDh+0x148>)
 23e4b08:	4811      	ldr	r0, [pc, #68]	; (23e4b50 <_Z16get_Bosch_ChipIDh+0x130>)
 23e4b0a:	f017 fce1 	bl	23fc4d0 <strcpy>
 23e4b0e:	e7ad      	b.n	23e4a6c <_Z16get_Bosch_ChipIDh+0x4c>
  else if (Wire.requestFrom(address, 1)) {  // Returns the number of bytes returned from the slave device 
 23e4b10:	f014 fe88 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e4b14:	2201      	movs	r2, #1
 23e4b16:	4629      	mov	r1, r5
 23e4b18:	f013 f9e1 	bl	23f7ede <_ZN7TwoWire11requestFromEhj>
 23e4b1c:	4604      	mov	r4, r0
 23e4b1e:	b170      	cbz	r0, 23e4b3e <_Z16get_Bosch_ChipIDh+0x11e>
    chip_id = Wire.read(); 
 23e4b20:	f014 fe80 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e4b24:	6803      	ldr	r3, [r0, #0]
 23e4b26:	695b      	ldr	r3, [r3, #20]
 23e4b28:	4798      	blx	r3
 23e4b2a:	b2c4      	uxtb	r4, r0
    if (chip_id == BMP280_CHIP_ID) { // 0x58
 23e4b2c:	2c58      	cmp	r4, #88	; 0x58
      sprintf (msgbuf, "  CHIPID:%02X BMP280", chip_id);
 23e4b2e:	4622      	mov	r2, r4
    if (chip_id == BMP280_CHIP_ID) { // 0x58
 23e4b30:	d0d7      	beq.n	23e4ae2 <_Z16get_Bosch_ChipIDh+0xc2>
    else if (chip_id == BMP388_CHIP_ID) {  // 0x50
 23e4b32:	2c50      	cmp	r4, #80	; 0x50
 23e4b34:	d0d9      	beq.n	23e4aea <_Z16get_Bosch_ChipIDh+0xca>
    else if (chip_id == BME280_BMP390_CHIP_ID) {  // 0x60
 23e4b36:	2c60      	cmp	r4, #96	; 0x60
 23e4b38:	d0e1      	beq.n	23e4afe <_Z16get_Bosch_ChipIDh+0xde>
      sprintf (msgbuf, "  CHIPID:%02X InValid", chip_id);
 23e4b3a:	490a      	ldr	r1, [pc, #40]	; (23e4b64 <_Z16get_Bosch_ChipIDh+0x144>)
 23e4b3c:	e7b8      	b.n	23e4ab0 <_Z16get_Bosch_ChipIDh+0x90>
    sprintf (msgbuf, "  ERR_RF:0");
 23e4b3e:	490a      	ldr	r1, [pc, #40]	; (23e4b68 <_Z16get_Bosch_ChipIDh+0x148>)
 23e4b40:	4803      	ldr	r0, [pc, #12]	; (23e4b50 <_Z16get_Bosch_ChipIDh+0x130>)
 23e4b42:	f017 fcc5 	bl	23fc4d0 <strcpy>
 23e4b46:	e7d4      	b.n	23e4af2 <_Z16get_Bosch_ChipIDh+0xd2>
 23e4b48:	023fcc79 	.word	0x023fcc79
 23e4b4c:	023fcc8c 	.word	0x023fcc8c
 23e4b50:	1006f118 	.word	0x1006f118
 23e4b54:	023fcca0 	.word	0x023fcca0
 23e4b58:	023fccac 	.word	0x023fccac
 23e4b5c:	023fccc1 	.word	0x023fccc1
 23e4b60:	023fccd6 	.word	0x023fccd6
 23e4b64:	023fccec 	.word	0x023fccec
 23e4b68:	023fcd02 	.word	0x023fcd02

023e4b6c <_Z14bmx_initializev>:
/* 
 *=======================================================================================================================
 * bmx_initialize() - Bosch sensor initialize
 *=======================================================================================================================
 */
void bmx_initialize() {
 23e4b6c:	b538      	push	{r3, r4, r5, lr}
  Output("BMX:INIT");
 23e4b6e:	486e      	ldr	r0, [pc, #440]	; (23e4d28 <_Z14bmx_initializev+0x1bc>)
 23e4b70:	f7ff fd0a 	bl	23e4588 <_Z6OutputPKc>
  
  // 1st Bosch Sensor - Need to see which (BMP, BME, BM3) is plugged in
  BMX_1_chip_id = get_Bosch_ChipID(BMX_ADDRESS_1);
 23e4b74:	2077      	movs	r0, #119	; 0x77
 23e4b76:	f7ff ff53 	bl	23e4a20 <_Z16get_Bosch_ChipIDh>
 23e4b7a:	4b6c      	ldr	r3, [pc, #432]	; (23e4d2c <_Z14bmx_initializev+0x1c0>)

  switch (BMX_1_chip_id) {
 23e4b7c:	2858      	cmp	r0, #88	; 0x58
  BMX_1_chip_id = get_Bosch_ChipID(BMX_ADDRESS_1);
 23e4b7e:	4602      	mov	r2, r0
 23e4b80:	4c6b      	ldr	r4, [pc, #428]	; (23e4d30 <_Z14bmx_initializev+0x1c4>)
 23e4b82:	7018      	strb	r0, [r3, #0]
  switch (BMX_1_chip_id) {
 23e4b84:	d011      	beq.n	23e4baa <_Z14bmx_initializev+0x3e>
 23e4b86:	2860      	cmp	r0, #96	; 0x60
 23e4b88:	d046      	beq.n	23e4c18 <_Z14bmx_initializev+0xac>
 23e4b8a:	2850      	cmp	r0, #80	; 0x50
 23e4b8c:	d176      	bne.n	23e4c7c <_Z14bmx_initializev+0x110>
        float p = bme1.readPressure();
      }
    break;

    case BMP388_CHIP_ID :
      if (!bm31.begin_I2C(BMX_ADDRESS_1)) { 
 23e4b8e:	f014 fe49 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e4b92:	2177      	movs	r1, #119	; 0x77
 23e4b94:	4602      	mov	r2, r0
 23e4b96:	4867      	ldr	r0, [pc, #412]	; (23e4d34 <_Z14bmx_initializev+0x1c8>)
 23e4b98:	f009 fc2c 	bl	23ee3f4 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e4b9c:	4b66      	ldr	r3, [pc, #408]	; (23e4d38 <_Z14bmx_initializev+0x1cc>)
 23e4b9e:	2800      	cmp	r0, #0
 23e4ba0:	d165      	bne.n	23e4c6e <_Z14bmx_initializev+0x102>
        msgp = (char *) "BM31 ERR";
 23e4ba2:	4a66      	ldr	r2, [pc, #408]	; (23e4d3c <_Z14bmx_initializev+0x1d0>)
        BMX_1_exists = false;
 23e4ba4:	7018      	strb	r0, [r3, #0]
        msgp = (char *) "BM31 ERR";
 23e4ba6:	6022      	str	r2, [r4, #0]
        BMX_1_exists = false;
 23e4ba8:	e008      	b.n	23e4bbc <_Z14bmx_initializev+0x50>
      if (!bmp1.begin(BMX_ADDRESS_1)) { 
 23e4baa:	2177      	movs	r1, #119	; 0x77
 23e4bac:	4864      	ldr	r0, [pc, #400]	; (23e4d40 <_Z14bmx_initializev+0x1d4>)
 23e4bae:	f009 fa1f 	bl	23edff0 <_ZN15Adafruit_BMP2805beginEhh>
 23e4bb2:	4a61      	ldr	r2, [pc, #388]	; (23e4d38 <_Z14bmx_initializev+0x1cc>)
 23e4bb4:	b940      	cbnz	r0, 23e4bc8 <_Z14bmx_initializev+0x5c>
        msgp = (char *) "BMP1 ERR";
 23e4bb6:	4b63      	ldr	r3, [pc, #396]	; (23e4d44 <_Z14bmx_initializev+0x1d8>)
        BMX_1_exists = false;
 23e4bb8:	7010      	strb	r0, [r2, #0]
        msgp = (char *) "BMP1 ERR";
 23e4bba:	6023      	str	r3, [r4, #0]
        SystemStatusBits |= SSB_BMX_1;  // Turn On Bit          
 23e4bbc:	4a62      	ldr	r2, [pc, #392]	; (23e4d48 <_Z14bmx_initializev+0x1dc>)
 23e4bbe:	6813      	ldr	r3, [r2, #0]
 23e4bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 23e4bc4:	6013      	str	r3, [r2, #0]
 23e4bc6:	e008      	b.n	23e4bda <_Z14bmx_initializev+0x6e>
        BMX_1_exists = true;
 23e4bc8:	2301      	movs	r3, #1
 23e4bca:	7013      	strb	r3, [r2, #0]
        BMX_1_type = BMX_TYPE_BMP280;
 23e4bcc:	4a5f      	ldr	r2, [pc, #380]	; (23e4d4c <_Z14bmx_initializev+0x1e0>)
        float p = bmp1.readPressure();
 23e4bce:	485c      	ldr	r0, [pc, #368]	; (23e4d40 <_Z14bmx_initializev+0x1d4>)
        BMX_1_type = BMX_TYPE_BMP280;
 23e4bd0:	7013      	strb	r3, [r2, #0]
        msgp = (char *) "BMP1 OK";
 23e4bd2:	4b5f      	ldr	r3, [pc, #380]	; (23e4d50 <_Z14bmx_initializev+0x1e4>)
 23e4bd4:	6023      	str	r3, [r4, #0]
        float p = bmp1.readPressure();
 23e4bd6:	f009 fa95 	bl	23ee104 <_ZN15Adafruit_BMP28012readPressureEv>

    default:
      msgp = (char *) "BMX_1 NF";
    break;
  }
  Output (msgp);
 23e4bda:	6820      	ldr	r0, [r4, #0]
 23e4bdc:	f7ff fcd4 	bl	23e4588 <_Z6OutputPKc>

  // 2nd Bosch Sensor - Need to see which (BMP, BME, BM3) is plugged in
  BMX_2_chip_id = get_Bosch_ChipID(BMX_ADDRESS_2);
 23e4be0:	2076      	movs	r0, #118	; 0x76
 23e4be2:	f7ff ff1d 	bl	23e4a20 <_Z16get_Bosch_ChipIDh>
 23e4be6:	4b5b      	ldr	r3, [pc, #364]	; (23e4d54 <_Z14bmx_initializev+0x1e8>)
  switch (BMX_2_chip_id) {
 23e4be8:	2858      	cmp	r0, #88	; 0x58
  BMX_2_chip_id = get_Bosch_ChipID(BMX_ADDRESS_2);
 23e4bea:	4602      	mov	r2, r0
 23e4bec:	7018      	strb	r0, [r3, #0]
  switch (BMX_2_chip_id) {
 23e4bee:	d048      	beq.n	23e4c82 <_Z14bmx_initializev+0x116>
 23e4bf0:	2860      	cmp	r0, #96	; 0x60
 23e4bf2:	d063      	beq.n	23e4cbc <_Z14bmx_initializev+0x150>
 23e4bf4:	2850      	cmp	r0, #80	; 0x50
 23e4bf6:	f040 8093 	bne.w	23e4d20 <_Z14bmx_initializev+0x1b4>
        float p = bme2.readPressure();
      }
    break;

    case BMP388_CHIP_ID :
      if (!bm32.begin_I2C(BMX_ADDRESS_2)) { 
 23e4bfa:	f014 fe13 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e4bfe:	2176      	movs	r1, #118	; 0x76
 23e4c00:	4602      	mov	r2, r0
 23e4c02:	4855      	ldr	r0, [pc, #340]	; (23e4d58 <_Z14bmx_initializev+0x1ec>)
 23e4c04:	f009 fbf6 	bl	23ee3f4 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e4c08:	4b54      	ldr	r3, [pc, #336]	; (23e4d5c <_Z14bmx_initializev+0x1f0>)
 23e4c0a:	2800      	cmp	r0, #0
 23e4c0c:	f040 8081 	bne.w	23e4d12 <_Z14bmx_initializev+0x1a6>
        msgp = (char *) "BM32 ERR";
 23e4c10:	4a53      	ldr	r2, [pc, #332]	; (23e4d60 <_Z14bmx_initializev+0x1f4>)
        BMX_2_exists = false;
 23e4c12:	7018      	strb	r0, [r3, #0]
        msgp = (char *) "BM32 ERR";
 23e4c14:	6022      	str	r2, [r4, #0]
        BMX_2_exists = false;
 23e4c16:	e03d      	b.n	23e4c94 <_Z14bmx_initializev+0x128>
      if (!bme1.begin(BMX_ADDRESS_1)) { 
 23e4c18:	f014 fe04 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e4c1c:	2177      	movs	r1, #119	; 0x77
 23e4c1e:	4602      	mov	r2, r0
 23e4c20:	4850      	ldr	r0, [pc, #320]	; (23e4d64 <_Z14bmx_initializev+0x1f8>)
 23e4c22:	f008 fdf0 	bl	23ed806 <_ZN15Adafruit_BME2805beginEhP7TwoWire>
 23e4c26:	4d44      	ldr	r5, [pc, #272]	; (23e4d38 <_Z14bmx_initializev+0x1cc>)
 23e4c28:	b9b0      	cbnz	r0, 23e4c58 <_Z14bmx_initializev+0xec>
        if (!bm31.begin_I2C(BMX_ADDRESS_1)) {  // Perhaps it is a BMP390
 23e4c2a:	f014 fdfb 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e4c2e:	2177      	movs	r1, #119	; 0x77
 23e4c30:	4602      	mov	r2, r0
 23e4c32:	4840      	ldr	r0, [pc, #256]	; (23e4d34 <_Z14bmx_initializev+0x1c8>)
 23e4c34:	f009 fbde 	bl	23ee3f4 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e4c38:	b918      	cbnz	r0, 23e4c42 <_Z14bmx_initializev+0xd6>
          msgp = (char *) "BMX1 ERR";
 23e4c3a:	4b4b      	ldr	r3, [pc, #300]	; (23e4d68 <_Z14bmx_initializev+0x1fc>)
          BMX_1_exists = false;
 23e4c3c:	7028      	strb	r0, [r5, #0]
          msgp = (char *) "BMX1 ERR";
 23e4c3e:	6023      	str	r3, [r4, #0]
          SystemStatusBits |= SSB_BMX_1;  // Turn On Bit          
 23e4c40:	e7bc      	b.n	23e4bbc <_Z14bmx_initializev+0x50>
          BMX_1_exists = true;
 23e4c42:	2301      	movs	r3, #1
          BMX_1_type = BMX_TYPE_BMP390;
 23e4c44:	2204      	movs	r2, #4
          BMX_1_exists = true;
 23e4c46:	702b      	strb	r3, [r5, #0]
          BMX_1_type = BMX_TYPE_BMP390;
 23e4c48:	4b40      	ldr	r3, [pc, #256]	; (23e4d4c <_Z14bmx_initializev+0x1e0>)
 23e4c4a:	701a      	strb	r2, [r3, #0]
          msgp = (char *) "BMP390_1 OK"; 
 23e4c4c:	4b47      	ldr	r3, [pc, #284]	; (23e4d6c <_Z14bmx_initializev+0x200>)
        float p = bm31.readPressure();
 23e4c4e:	4839      	ldr	r0, [pc, #228]	; (23e4d34 <_Z14bmx_initializev+0x1c8>)
        msgp = (char *) "BM31 OK";
 23e4c50:	6023      	str	r3, [r4, #0]
        float p = bm31.readPressure();
 23e4c52:	f009 fc62 	bl	23ee51a <_ZN15Adafruit_BMP3XX12readPressureEv>
 23e4c56:	e7c0      	b.n	23e4bda <_Z14bmx_initializev+0x6e>
        BMX_1_exists = true;
 23e4c58:	2301      	movs	r3, #1
        BMX_1_type = BMX_TYPE_BME280;
 23e4c5a:	2202      	movs	r2, #2
        BMX_1_exists = true;
 23e4c5c:	702b      	strb	r3, [r5, #0]
        BMX_1_type = BMX_TYPE_BME280;
 23e4c5e:	4b3b      	ldr	r3, [pc, #236]	; (23e4d4c <_Z14bmx_initializev+0x1e0>)
        float p = bme1.readPressure();
 23e4c60:	4840      	ldr	r0, [pc, #256]	; (23e4d64 <_Z14bmx_initializev+0x1f8>)
        BMX_1_type = BMX_TYPE_BME280;
 23e4c62:	701a      	strb	r2, [r3, #0]
        msgp = (char *) "BME280_1 OK";
 23e4c64:	4b42      	ldr	r3, [pc, #264]	; (23e4d70 <_Z14bmx_initializev+0x204>)
 23e4c66:	6023      	str	r3, [r4, #0]
        float p = bme1.readPressure();
 23e4c68:	f008 fe04 	bl	23ed874 <_ZN15Adafruit_BME28012readPressureEv>
 23e4c6c:	e7b5      	b.n	23e4bda <_Z14bmx_initializev+0x6e>
        BMX_1_exists = true;
 23e4c6e:	2201      	movs	r2, #1
 23e4c70:	701a      	strb	r2, [r3, #0]
        BMX_1_type = BMX_TYPE_BMP388;
 23e4c72:	2203      	movs	r2, #3
 23e4c74:	4b35      	ldr	r3, [pc, #212]	; (23e4d4c <_Z14bmx_initializev+0x1e0>)
 23e4c76:	701a      	strb	r2, [r3, #0]
        msgp = (char *) "BM31 OK";
 23e4c78:	4b3e      	ldr	r3, [pc, #248]	; (23e4d74 <_Z14bmx_initializev+0x208>)
 23e4c7a:	e7e8      	b.n	23e4c4e <_Z14bmx_initializev+0xe2>
      msgp = (char *) "BMX_1 NF";
 23e4c7c:	4b3e      	ldr	r3, [pc, #248]	; (23e4d78 <_Z14bmx_initializev+0x20c>)
 23e4c7e:	6023      	str	r3, [r4, #0]
    break;
 23e4c80:	e7ab      	b.n	23e4bda <_Z14bmx_initializev+0x6e>
      if (!bmp2.begin(BMX_ADDRESS_2)) { 
 23e4c82:	2176      	movs	r1, #118	; 0x76
 23e4c84:	483d      	ldr	r0, [pc, #244]	; (23e4d7c <_Z14bmx_initializev+0x210>)
 23e4c86:	f009 f9b3 	bl	23edff0 <_ZN15Adafruit_BMP2805beginEhh>
 23e4c8a:	4a34      	ldr	r2, [pc, #208]	; (23e4d5c <_Z14bmx_initializev+0x1f0>)
 23e4c8c:	b940      	cbnz	r0, 23e4ca0 <_Z14bmx_initializev+0x134>
        msgp = (char *) "BMP2 ERR";
 23e4c8e:	4b3c      	ldr	r3, [pc, #240]	; (23e4d80 <_Z14bmx_initializev+0x214>)
        BMX_2_exists = false;
 23e4c90:	7010      	strb	r0, [r2, #0]
        msgp = (char *) "BMP2 ERR";
 23e4c92:	6023      	str	r3, [r4, #0]
        SystemStatusBits |= SSB_BMX_2;  // Turn On Bit          
 23e4c94:	4a2c      	ldr	r2, [pc, #176]	; (23e4d48 <_Z14bmx_initializev+0x1dc>)
 23e4c96:	6813      	ldr	r3, [r2, #0]
 23e4c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 23e4c9c:	6013      	str	r3, [r2, #0]
 23e4c9e:	e008      	b.n	23e4cb2 <_Z14bmx_initializev+0x146>
        BMX_2_exists = true;
 23e4ca0:	2301      	movs	r3, #1
 23e4ca2:	7013      	strb	r3, [r2, #0]
        BMX_2_type = BMX_TYPE_BMP280;
 23e4ca4:	4a37      	ldr	r2, [pc, #220]	; (23e4d84 <_Z14bmx_initializev+0x218>)
        float p = bmp2.readPressure();
 23e4ca6:	4835      	ldr	r0, [pc, #212]	; (23e4d7c <_Z14bmx_initializev+0x210>)
        BMX_2_type = BMX_TYPE_BMP280;
 23e4ca8:	7013      	strb	r3, [r2, #0]
        msgp = (char *) "BMP2 OK";
 23e4caa:	4b37      	ldr	r3, [pc, #220]	; (23e4d88 <_Z14bmx_initializev+0x21c>)
 23e4cac:	6023      	str	r3, [r4, #0]
        float p = bmp2.readPressure();
 23e4cae:	f009 fa29 	bl	23ee104 <_ZN15Adafruit_BMP28012readPressureEv>

    default:
      msgp = (char *) "BMX_2 NF";
    break;
  }
  Output (msgp);
 23e4cb2:	6820      	ldr	r0, [r4, #0]
}
 23e4cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
 23e4cb8:	f7ff bc66 	b.w	23e4588 <_Z6OutputPKc>
      if (!bme2.begin(BMX_ADDRESS_2)) { 
 23e4cbc:	f014 fdb2 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e4cc0:	2176      	movs	r1, #118	; 0x76
 23e4cc2:	4602      	mov	r2, r0
 23e4cc4:	4831      	ldr	r0, [pc, #196]	; (23e4d8c <_Z14bmx_initializev+0x220>)
 23e4cc6:	f008 fd9e 	bl	23ed806 <_ZN15Adafruit_BME2805beginEhP7TwoWire>
 23e4cca:	4d24      	ldr	r5, [pc, #144]	; (23e4d5c <_Z14bmx_initializev+0x1f0>)
 23e4ccc:	b9b0      	cbnz	r0, 23e4cfc <_Z14bmx_initializev+0x190>
        if (!bm32.begin_I2C(BMX_ADDRESS_2)) {  // Perhaps it is a BMP390
 23e4cce:	f014 fda9 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e4cd2:	2176      	movs	r1, #118	; 0x76
 23e4cd4:	4602      	mov	r2, r0
 23e4cd6:	4820      	ldr	r0, [pc, #128]	; (23e4d58 <_Z14bmx_initializev+0x1ec>)
 23e4cd8:	f009 fb8c 	bl	23ee3f4 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e4cdc:	b918      	cbnz	r0, 23e4ce6 <_Z14bmx_initializev+0x17a>
          msgp = (char *) "BMX2 ERR";
 23e4cde:	4b2c      	ldr	r3, [pc, #176]	; (23e4d90 <_Z14bmx_initializev+0x224>)
          BMX_2_exists = false;
 23e4ce0:	7028      	strb	r0, [r5, #0]
          msgp = (char *) "BMX2 ERR";
 23e4ce2:	6023      	str	r3, [r4, #0]
          SystemStatusBits |= SSB_BMX_2;  // Turn On Bit          
 23e4ce4:	e7d6      	b.n	23e4c94 <_Z14bmx_initializev+0x128>
          BMX_2_exists = true;
 23e4ce6:	2301      	movs	r3, #1
          BMX_2_type = BMX_TYPE_BMP390;
 23e4ce8:	2204      	movs	r2, #4
          BMX_2_exists = true;
 23e4cea:	702b      	strb	r3, [r5, #0]
          BMX_2_type = BMX_TYPE_BMP390;
 23e4cec:	4b25      	ldr	r3, [pc, #148]	; (23e4d84 <_Z14bmx_initializev+0x218>)
 23e4cee:	701a      	strb	r2, [r3, #0]
          msgp = (char *) "BMP390_2 OK"; 
 23e4cf0:	4b28      	ldr	r3, [pc, #160]	; (23e4d94 <_Z14bmx_initializev+0x228>)
        float p = bm32.readPressure();
 23e4cf2:	4819      	ldr	r0, [pc, #100]	; (23e4d58 <_Z14bmx_initializev+0x1ec>)
        msgp = (char *) "BM32 OK";
 23e4cf4:	6023      	str	r3, [r4, #0]
        float p = bm32.readPressure();
 23e4cf6:	f009 fc10 	bl	23ee51a <_ZN15Adafruit_BMP3XX12readPressureEv>
 23e4cfa:	e7da      	b.n	23e4cb2 <_Z14bmx_initializev+0x146>
        BMX_2_exists = true;
 23e4cfc:	2301      	movs	r3, #1
        BMX_2_type = BMX_TYPE_BME280;
 23e4cfe:	2202      	movs	r2, #2
        BMX_2_exists = true;
 23e4d00:	702b      	strb	r3, [r5, #0]
        BMX_2_type = BMX_TYPE_BME280;
 23e4d02:	4b20      	ldr	r3, [pc, #128]	; (23e4d84 <_Z14bmx_initializev+0x218>)
        float p = bme2.readPressure();
 23e4d04:	4821      	ldr	r0, [pc, #132]	; (23e4d8c <_Z14bmx_initializev+0x220>)
        BMX_2_type = BMX_TYPE_BME280;
 23e4d06:	701a      	strb	r2, [r3, #0]
        msgp = (char *) "BME280_2 OK";
 23e4d08:	4b23      	ldr	r3, [pc, #140]	; (23e4d98 <_Z14bmx_initializev+0x22c>)
 23e4d0a:	6023      	str	r3, [r4, #0]
        float p = bme2.readPressure();
 23e4d0c:	f008 fdb2 	bl	23ed874 <_ZN15Adafruit_BME28012readPressureEv>
 23e4d10:	e7cf      	b.n	23e4cb2 <_Z14bmx_initializev+0x146>
        BMX_2_exists = true;
 23e4d12:	2201      	movs	r2, #1
 23e4d14:	701a      	strb	r2, [r3, #0]
        BMX_2_type = BMX_TYPE_BMP388;
 23e4d16:	2203      	movs	r2, #3
 23e4d18:	4b1a      	ldr	r3, [pc, #104]	; (23e4d84 <_Z14bmx_initializev+0x218>)
 23e4d1a:	701a      	strb	r2, [r3, #0]
        msgp = (char *) "BM32 OK";
 23e4d1c:	4b1f      	ldr	r3, [pc, #124]	; (23e4d9c <_Z14bmx_initializev+0x230>)
 23e4d1e:	e7e8      	b.n	23e4cf2 <_Z14bmx_initializev+0x186>
      msgp = (char *) "BMX_2 NF";
 23e4d20:	4b1f      	ldr	r3, [pc, #124]	; (23e4da0 <_Z14bmx_initializev+0x234>)
 23e4d22:	6023      	str	r3, [r4, #0]
    break;
 23e4d24:	e7c5      	b.n	23e4cb2 <_Z14bmx_initializev+0x146>
 23e4d26:	bf00      	nop
 23e4d28:	023fcd0d 	.word	0x023fcd0d
 23e4d2c:	1006a271 	.word	0x1006a271
 23e4d30:	1006f518 	.word	0x1006f518
 23e4d34:	1006a938 	.word	0x1006a938
 23e4d38:	1006a272 	.word	0x1006a272
 23e4d3c:	023fcd48 	.word	0x023fcd48
 23e4d40:	1006abe8 	.word	0x1006abe8
 23e4d44:	023fcd16 	.word	0x023fcd16
 23e4d48:	1006a168 	.word	0x1006a168
 23e4d4c:	1006a273 	.word	0x1006a273
 23e4d50:	023fcd1f 	.word	0x023fcd1f
 23e4d54:	1006a274 	.word	0x1006a274
 23e4d58:	1006aa38 	.word	0x1006aa38
 23e4d5c:	1006a275 	.word	0x1006a275
 23e4d60:	023fcd94 	.word	0x023fcd94
 23e4d64:	1006ab38 	.word	0x1006ab38
 23e4d68:	023fcd27 	.word	0x023fcd27
 23e4d6c:	023fcd30 	.word	0x023fcd30
 23e4d70:	023fcd3c 	.word	0x023fcd3c
 23e4d74:	023fcd51 	.word	0x023fcd51
 23e4d78:	023fcd59 	.word	0x023fcd59
 23e4d7c:	1006ac28 	.word	0x1006ac28
 23e4d80:	023fcd62 	.word	0x023fcd62
 23e4d84:	1006a276 	.word	0x1006a276
 23e4d88:	023fcd6b 	.word	0x023fcd6b
 23e4d8c:	1006ab90 	.word	0x1006ab90
 23e4d90:	023fcd73 	.word	0x023fcd73
 23e4d94:	023fcd7c 	.word	0x023fcd7c
 23e4d98:	023fcd88 	.word	0x023fcd88
 23e4d9c:	023fcd9d 	.word	0x023fcd9d
 23e4da0:	023fcda5 	.word	0x023fcda5

023e4da4 <_Z17htu21d_initializev>:
/* 
 *=======================================================================================================================
 * htu21d_initialize() - HTU21D sensor initialize
 *=======================================================================================================================
 */
void htu21d_initialize() {
 23e4da4:	b508      	push	{r3, lr}
  Output("HTU21D:INIT");
 23e4da6:	480f      	ldr	r0, [pc, #60]	; (23e4de4 <_Z17htu21d_initializev+0x40>)
 23e4da8:	f7ff fbee 	bl	23e4588 <_Z6OutputPKc>
  
  // HTU21DF Humidity & Temp Sensor (I2C ADDRESS = 0x40)
  if (!htu.begin()) {
 23e4dac:	f014 fd3a 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e4db0:	4601      	mov	r1, r0
 23e4db2:	480d      	ldr	r0, [pc, #52]	; (23e4de8 <_Z17htu21d_initializev+0x44>)
 23e4db4:	f00a fb8e 	bl	23ef4d4 <_ZN16Adafruit_HTU21DF5beginEP7TwoWire>
 23e4db8:	4b0c      	ldr	r3, [pc, #48]	; (23e4dec <_Z17htu21d_initializev+0x48>)
 23e4dba:	4a0d      	ldr	r2, [pc, #52]	; (23e4df0 <_Z17htu21d_initializev+0x4c>)
 23e4dbc:	b960      	cbnz	r0, 23e4dd8 <_Z17htu21d_initializev+0x34>
    msgp = (char *) "HTU NF";
 23e4dbe:	490d      	ldr	r1, [pc, #52]	; (23e4df4 <_Z17htu21d_initializev+0x50>)
    HTU21DF_exists = false;
 23e4dc0:	7010      	strb	r0, [r2, #0]
    msgp = (char *) "HTU NF";
 23e4dc2:	6019      	str	r1, [r3, #0]
    SystemStatusBits |= SSB_HTU21DF;  // Turn On Bit
 23e4dc4:	490c      	ldr	r1, [pc, #48]	; (23e4df8 <_Z17htu21d_initializev+0x54>)
 23e4dc6:	680a      	ldr	r2, [r1, #0]
 23e4dc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 23e4dcc:	600a      	str	r2, [r1, #0]
  }
  else {
    HTU21DF_exists = true;
    msgp = (char *) "HTU OK";
  }
  Output (msgp);
 23e4dce:	6818      	ldr	r0, [r3, #0]
}
 23e4dd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
 23e4dd4:	f7ff bbd8 	b.w	23e4588 <_Z6OutputPKc>
    HTU21DF_exists = true;
 23e4dd8:	2101      	movs	r1, #1
 23e4dda:	7011      	strb	r1, [r2, #0]
    msgp = (char *) "HTU OK";
 23e4ddc:	4a07      	ldr	r2, [pc, #28]	; (23e4dfc <_Z17htu21d_initializev+0x58>)
 23e4dde:	601a      	str	r2, [r3, #0]
 23e4de0:	e7f5      	b.n	23e4dce <_Z17htu21d_initializev+0x2a>
 23e4de2:	bf00      	nop
 23e4de4:	023fcdae 	.word	0x023fcdae
 23e4de8:	1006ae80 	.word	0x1006ae80
 23e4dec:	1006f518 	.word	0x1006f518
 23e4df0:	1006a2a0 	.word	0x1006a2a0
 23e4df4:	023fcdba 	.word	0x023fcdba
 23e4df8:	1006a168 	.word	0x1006a168
 23e4dfc:	023fcdc1 	.word	0x023fcdc1

023e4e00 <_Z18mcp9808_initializev>:
/* 
 *=======================================================================================================================
 * mcp9808_initialize() - MCP9808 sensor initialize
 *=======================================================================================================================
 */
void mcp9808_initialize() {
 23e4e00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Output("MCP9808:INIT");
 23e4e02:	4844      	ldr	r0, [pc, #272]	; (23e4f14 <_Z18mcp9808_initializev+0x114>)
 23e4e04:	f7ff fbc0 	bl	23e4588 <_Z6OutputPKc>
  
  // 1st MCP9808 Precision I2C Temperature Sensor (I2C ADDRESS = 0x18)
  mcp1 = Adafruit_MCP9808();
 23e4e08:	a801      	add	r0, sp, #4
 23e4e0a:	f00a fd41 	bl	23ef890 <_ZN16Adafruit_MCP9808C1Ev>

/** @brief Common sensor interface to unify various sensors.
 * Intentionally modeled after sensors.h in the Android API:
 * https://github.com/android/platform_hardware_libhardware/blob/master/include/hardware/sensors.h
 */
class Adafruit_Sensor {
 23e4e0e:	4842      	ldr	r0, [pc, #264]	; (23e4f18 <_Z18mcp9808_initializev+0x118>)
 23e4e10:	f89d 3008 	ldrb.w	r3, [sp, #8]
  if (!mcp1.begin(MCP_ADDRESS_1)) {
 23e4e14:	2118      	movs	r1, #24
 23e4e16:	7103      	strb	r3, [r0, #4]

/*!
 *    @brief  Class that stores state and functions for interacting with
 *            MCP9808 Temp Sensor
 */
class Adafruit_MCP9808 : public Adafruit_Sensor {
 23e4e18:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 23e4e1c:	4c3f      	ldr	r4, [pc, #252]	; (23e4f1c <_Z18mcp9808_initializev+0x11c>)
 23e4e1e:	80c3      	strh	r3, [r0, #6]
 23e4e20:	9b03      	ldr	r3, [sp, #12]
 23e4e22:	6083      	str	r3, [r0, #8]
 23e4e24:	f00a fd99 	bl	23ef95a <_ZN16Adafruit_MCP98085beginEh>
 23e4e28:	4b3d      	ldr	r3, [pc, #244]	; (23e4f20 <_Z18mcp9808_initializev+0x120>)
 23e4e2a:	2800      	cmp	r0, #0
 23e4e2c:	d15e      	bne.n	23e4eec <_Z18mcp9808_initializev+0xec>
    msgp = (char *) "MCP1 NF";
 23e4e2e:	4a3d      	ldr	r2, [pc, #244]	; (23e4f24 <_Z18mcp9808_initializev+0x124>)
    MCP_1_exists = false;
 23e4e30:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "MCP1 NF";
 23e4e32:	6022      	str	r2, [r4, #0]
    SystemStatusBits |= SSB_MCP_1;  // Turn On Bit
 23e4e34:	4a3c      	ldr	r2, [pc, #240]	; (23e4f28 <_Z18mcp9808_initializev+0x128>)
 23e4e36:	6813      	ldr	r3, [r2, #0]
 23e4e38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 23e4e3c:	6013      	str	r3, [r2, #0]
  }
  else {
    MCP_1_exists = true;
    msgp = (char *) "MCP1 OK";
  }
  Output (msgp);
 23e4e3e:	6820      	ldr	r0, [r4, #0]
 23e4e40:	f7ff fba2 	bl	23e4588 <_Z6OutputPKc>

  // 2nd MCP9808 Precision I2C Temperature Sensor (I2C ADDRESS = 0x19)
  mcp2 = Adafruit_MCP9808();
 23e4e44:	a801      	add	r0, sp, #4
 23e4e46:	f00a fd23 	bl	23ef890 <_ZN16Adafruit_MCP9808C1Ev>
 23e4e4a:	4838      	ldr	r0, [pc, #224]	; (23e4f2c <_Z18mcp9808_initializev+0x12c>)
 23e4e4c:	f89d 3008 	ldrb.w	r3, [sp, #8]
  if (!mcp2.begin(MCP_ADDRESS_2)) {
 23e4e50:	2119      	movs	r1, #25
 23e4e52:	7103      	strb	r3, [r0, #4]
 23e4e54:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 23e4e58:	80c3      	strh	r3, [r0, #6]
 23e4e5a:	9b03      	ldr	r3, [sp, #12]
 23e4e5c:	6083      	str	r3, [r0, #8]
 23e4e5e:	f00a fd7c 	bl	23ef95a <_ZN16Adafruit_MCP98085beginEh>
 23e4e62:	4b33      	ldr	r3, [pc, #204]	; (23e4f30 <_Z18mcp9808_initializev+0x130>)
 23e4e64:	2800      	cmp	r0, #0
 23e4e66:	d146      	bne.n	23e4ef6 <_Z18mcp9808_initializev+0xf6>
    msgp = (char *) "MCP2 NF";
 23e4e68:	4a32      	ldr	r2, [pc, #200]	; (23e4f34 <_Z18mcp9808_initializev+0x134>)
    MCP_2_exists = false;
 23e4e6a:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "MCP2 NF";
 23e4e6c:	6022      	str	r2, [r4, #0]
    SystemStatusBits |= SSB_MCP_2;  // Turn On Bit
 23e4e6e:	4a2e      	ldr	r2, [pc, #184]	; (23e4f28 <_Z18mcp9808_initializev+0x128>)
 23e4e70:	6813      	ldr	r3, [r2, #0]
 23e4e72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 23e4e76:	6013      	str	r3, [r2, #0]
  }
  else {
    MCP_2_exists = true;
    msgp = (char *) "MCP2 OK";
  }
  Output (msgp);
 23e4e78:	6820      	ldr	r0, [r4, #0]
 23e4e7a:	f7ff fb85 	bl	23e4588 <_Z6OutputPKc>

  // 3rd MCP9808 Precision I2C Temperature Sensor (I2C ADDRESS = 0x20)
  mcp3 = Adafruit_MCP9808();
 23e4e7e:	a801      	add	r0, sp, #4
 23e4e80:	f00a fd06 	bl	23ef890 <_ZN16Adafruit_MCP9808C1Ev>
 23e4e84:	482c      	ldr	r0, [pc, #176]	; (23e4f38 <_Z18mcp9808_initializev+0x138>)
 23e4e86:	f89d 3008 	ldrb.w	r3, [sp, #8]
  if (!mcp3.begin(MCP_ADDRESS_3)) {
 23e4e8a:	211a      	movs	r1, #26
 23e4e8c:	7103      	strb	r3, [r0, #4]
 23e4e8e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 23e4e92:	80c3      	strh	r3, [r0, #6]
 23e4e94:	9b03      	ldr	r3, [sp, #12]
 23e4e96:	6083      	str	r3, [r0, #8]
 23e4e98:	f00a fd5f 	bl	23ef95a <_ZN16Adafruit_MCP98085beginEh>
 23e4e9c:	4b27      	ldr	r3, [pc, #156]	; (23e4f3c <_Z18mcp9808_initializev+0x13c>)
 23e4e9e:	2800      	cmp	r0, #0
 23e4ea0:	d12e      	bne.n	23e4f00 <_Z18mcp9808_initializev+0x100>
    msgp = (char *) "MCP3 NF";
 23e4ea2:	4a27      	ldr	r2, [pc, #156]	; (23e4f40 <_Z18mcp9808_initializev+0x140>)
    MCP_3_exists = false;
 23e4ea4:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "MCP3 NF";
 23e4ea6:	6022      	str	r2, [r4, #0]
    SystemStatusBits |= SSB_MCP_3;  // Turn On Bit
 23e4ea8:	4a1f      	ldr	r2, [pc, #124]	; (23e4f28 <_Z18mcp9808_initializev+0x128>)
 23e4eaa:	6813      	ldr	r3, [r2, #0]
 23e4eac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 23e4eb0:	6013      	str	r3, [r2, #0]
  }
  else {
    MCP_3_exists = true;
    msgp = (char *) "MCP3 OK";
  }
  Output (msgp);
 23e4eb2:	6820      	ldr	r0, [r4, #0]
 23e4eb4:	f7ff fb68 	bl	23e4588 <_Z6OutputPKc>

  // 4rd MCP9808 Precision I2C Temperature Sensor (I2C ADDRESS = 0x21)
  mcp4 = Adafruit_MCP9808();
 23e4eb8:	a801      	add	r0, sp, #4
 23e4eba:	f00a fce9 	bl	23ef890 <_ZN16Adafruit_MCP9808C1Ev>
 23e4ebe:	4821      	ldr	r0, [pc, #132]	; (23e4f44 <_Z18mcp9808_initializev+0x144>)
 23e4ec0:	f89d 3008 	ldrb.w	r3, [sp, #8]
  if (!mcp4.begin(MCP_ADDRESS_4)) {
 23e4ec4:	211b      	movs	r1, #27
 23e4ec6:	7103      	strb	r3, [r0, #4]
 23e4ec8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 23e4ecc:	80c3      	strh	r3, [r0, #6]
 23e4ece:	9b03      	ldr	r3, [sp, #12]
 23e4ed0:	6083      	str	r3, [r0, #8]
 23e4ed2:	f00a fd42 	bl	23ef95a <_ZN16Adafruit_MCP98085beginEh>
 23e4ed6:	4b1c      	ldr	r3, [pc, #112]	; (23e4f48 <_Z18mcp9808_initializev+0x148>)
 23e4ed8:	b9b8      	cbnz	r0, 23e4f0a <_Z18mcp9808_initializev+0x10a>
    msgp = (char *) "MCP4 NF";
 23e4eda:	4a1c      	ldr	r2, [pc, #112]	; (23e4f4c <_Z18mcp9808_initializev+0x14c>)
    MCP_4_exists = false;
 23e4edc:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "MCP4 NF";
 23e4ede:	6022      	str	r2, [r4, #0]
  }
  else {
    MCP_4_exists = true;
    msgp = (char *) "MCP4 OK";
  }
  Output (msgp);
 23e4ee0:	6820      	ldr	r0, [r4, #0]
}
 23e4ee2:	b004      	add	sp, #16
 23e4ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Output (msgp);
 23e4ee8:	f7ff bb4e 	b.w	23e4588 <_Z6OutputPKc>
    MCP_1_exists = true;
 23e4eec:	2201      	movs	r2, #1
 23e4eee:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "MCP1 OK";
 23e4ef0:	4b17      	ldr	r3, [pc, #92]	; (23e4f50 <_Z18mcp9808_initializev+0x150>)
 23e4ef2:	6023      	str	r3, [r4, #0]
 23e4ef4:	e7a3      	b.n	23e4e3e <_Z18mcp9808_initializev+0x3e>
    MCP_2_exists = true;
 23e4ef6:	2201      	movs	r2, #1
 23e4ef8:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "MCP2 OK";
 23e4efa:	4b16      	ldr	r3, [pc, #88]	; (23e4f54 <_Z18mcp9808_initializev+0x154>)
 23e4efc:	6023      	str	r3, [r4, #0]
 23e4efe:	e7bb      	b.n	23e4e78 <_Z18mcp9808_initializev+0x78>
    MCP_3_exists = true;
 23e4f00:	2201      	movs	r2, #1
 23e4f02:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "MCP3 OK";
 23e4f04:	4b14      	ldr	r3, [pc, #80]	; (23e4f58 <_Z18mcp9808_initializev+0x158>)
 23e4f06:	6023      	str	r3, [r4, #0]
 23e4f08:	e7d3      	b.n	23e4eb2 <_Z18mcp9808_initializev+0xb2>
    MCP_4_exists = true;
 23e4f0a:	2201      	movs	r2, #1
 23e4f0c:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "MCP4 OK";
 23e4f0e:	4b13      	ldr	r3, [pc, #76]	; (23e4f5c <_Z18mcp9808_initializev+0x15c>)
 23e4f10:	6023      	str	r3, [r4, #0]
 23e4f12:	e7e5      	b.n	23e4ee0 <_Z18mcp9808_initializev+0xe0>
 23e4f14:	023fcdc8 	.word	0x023fcdc8
 23e4f18:	1006f0e8 	.word	0x1006f0e8
 23e4f1c:	1006f518 	.word	0x1006f518
 23e4f20:	1006a2b8 	.word	0x1006a2b8
 23e4f24:	023fcdd5 	.word	0x023fcdd5
 23e4f28:	1006a168 	.word	0x1006a168
 23e4f2c:	1006f0f4 	.word	0x1006f0f4
 23e4f30:	1006a2b9 	.word	0x1006a2b9
 23e4f34:	023fcde5 	.word	0x023fcde5
 23e4f38:	1006f100 	.word	0x1006f100
 23e4f3c:	1006a2ba 	.word	0x1006a2ba
 23e4f40:	023fcdf5 	.word	0x023fcdf5
 23e4f44:	1006f10c 	.word	0x1006f10c
 23e4f48:	1006a2bb 	.word	0x1006a2bb
 23e4f4c:	023fce05 	.word	0x023fce05
 23e4f50:	023fcddd 	.word	0x023fcddd
 23e4f54:	023fcded 	.word	0x023fcded
 23e4f58:	023fcdfd 	.word	0x023fcdfd
 23e4f5c:	023fce0d 	.word	0x023fce0d

023e4f60 <_Z14sht_initializev>:
/* 
 *=======================================================================================================================
 * sht_initialize() - SHT31 sensor initialize
 *=======================================================================================================================
 */
void sht_initialize() {
 23e4f60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  Output("SHT:INIT");
 23e4f62:	4828      	ldr	r0, [pc, #160]	; (23e5004 <_Z14sht_initializev+0xa4>)
 23e4f64:	f7ff fb10 	bl	23e4588 <_Z6OutputPKc>
  
  // 1st SHT31 I2C Temperature/Humidity Sensor (I2C ADDRESS = 0x44)
  sht1 = Adafruit_SHT31();
 23e4f68:	466c      	mov	r4, sp
 23e4f6a:	f014 fc5b 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e4f6e:	4d26      	ldr	r5, [pc, #152]	; (23e5008 <_Z14sht_initializev+0xa8>)
 23e4f70:	4601      	mov	r1, r0
 23e4f72:	4620      	mov	r0, r4
 23e4f74:	f00a fde0 	bl	23efb38 <_ZN14Adafruit_SHT31C1EP7TwoWire>
 23e4f78:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 23e4f7c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 23e4f80:	4620      	mov	r0, r4
 23e4f82:	f00a fde3 	bl	23efb4c <_ZN14Adafruit_SHT31D1Ev>
  if (!sht1.begin(SHT_ADDRESS_1)) {
 23e4f86:	4628      	mov	r0, r5
 23e4f88:	2144      	movs	r1, #68	; 0x44
 23e4f8a:	f00a fe16 	bl	23efbba <_ZN14Adafruit_SHT315beginEh>
 23e4f8e:	4d1f      	ldr	r5, [pc, #124]	; (23e500c <_Z14sht_initializev+0xac>)
 23e4f90:	4b1f      	ldr	r3, [pc, #124]	; (23e5010 <_Z14sht_initializev+0xb0>)
 23e4f92:	bb60      	cbnz	r0, 23e4fee <_Z14sht_initializev+0x8e>
    msgp = (char *) "SHT1 NF";
 23e4f94:	4a1f      	ldr	r2, [pc, #124]	; (23e5014 <_Z14sht_initializev+0xb4>)
    SHT_1_exists = false;
 23e4f96:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "SHT1 NF";
 23e4f98:	602a      	str	r2, [r5, #0]
    SystemStatusBits |= SSB_SHT_1;  // Turn On Bit
 23e4f9a:	4a1f      	ldr	r2, [pc, #124]	; (23e5018 <_Z14sht_initializev+0xb8>)
 23e4f9c:	6813      	ldr	r3, [r2, #0]
 23e4f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 23e4fa2:	6013      	str	r3, [r2, #0]
  }
  else {
    SHT_1_exists = true;
    msgp = (char *) "SHT1 OK";
  }
  Output (msgp);
 23e4fa4:	6828      	ldr	r0, [r5, #0]
 23e4fa6:	f7ff faef 	bl	23e4588 <_Z6OutputPKc>

  // 2nd SHT31 I2C Temperature/Humidity Sensor (I2C ADDRESS = 0x45)
  sht2 = Adafruit_SHT31();
 23e4faa:	f014 fc3b 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e4fae:	4e1b      	ldr	r6, [pc, #108]	; (23e501c <_Z14sht_initializev+0xbc>)
 23e4fb0:	4601      	mov	r1, r0
 23e4fb2:	4620      	mov	r0, r4
 23e4fb4:	f00a fdc0 	bl	23efb38 <_ZN14Adafruit_SHT31C1EP7TwoWire>
 23e4fb8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 23e4fbc:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 23e4fc0:	4620      	mov	r0, r4
 23e4fc2:	f00a fdc3 	bl	23efb4c <_ZN14Adafruit_SHT31D1Ev>
  if (!sht2.begin(SHT_ADDRESS_2)) {
 23e4fc6:	2145      	movs	r1, #69	; 0x45
 23e4fc8:	4630      	mov	r0, r6
 23e4fca:	f00a fdf6 	bl	23efbba <_ZN14Adafruit_SHT315beginEh>
 23e4fce:	4b14      	ldr	r3, [pc, #80]	; (23e5020 <_Z14sht_initializev+0xc0>)
 23e4fd0:	b990      	cbnz	r0, 23e4ff8 <_Z14sht_initializev+0x98>
    msgp = (char *) "SHT2 NF";
 23e4fd2:	4a14      	ldr	r2, [pc, #80]	; (23e5024 <_Z14sht_initializev+0xc4>)
    SHT_2_exists = false;
 23e4fd4:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "SHT2 NF";
 23e4fd6:	602a      	str	r2, [r5, #0]
    SystemStatusBits |= SSB_SHT_2;  // Turn On Bit
 23e4fd8:	4a0f      	ldr	r2, [pc, #60]	; (23e5018 <_Z14sht_initializev+0xb8>)
 23e4fda:	6813      	ldr	r3, [r2, #0]
 23e4fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 23e4fe0:	6013      	str	r3, [r2, #0]
  }
  else {
    SHT_2_exists = true;
    msgp = (char *) "SHT2 OK";
  }
  Output (msgp);
 23e4fe2:	6828      	ldr	r0, [r5, #0]
}
 23e4fe4:	b004      	add	sp, #16
 23e4fe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Output (msgp);
 23e4fea:	f7ff bacd 	b.w	23e4588 <_Z6OutputPKc>
    SHT_1_exists = true;
 23e4fee:	2201      	movs	r2, #1
 23e4ff0:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "SHT1 OK";
 23e4ff2:	4b0d      	ldr	r3, [pc, #52]	; (23e5028 <_Z14sht_initializev+0xc8>)
 23e4ff4:	602b      	str	r3, [r5, #0]
 23e4ff6:	e7d5      	b.n	23e4fa4 <_Z14sht_initializev+0x44>
    SHT_2_exists = true;
 23e4ff8:	2201      	movs	r2, #1
 23e4ffa:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "SHT2 OK";
 23e4ffc:	4b0b      	ldr	r3, [pc, #44]	; (23e502c <_Z14sht_initializev+0xcc>)
 23e4ffe:	602b      	str	r3, [r5, #0]
 23e5000:	e7ef      	b.n	23e4fe2 <_Z14sht_initializev+0x82>
 23e5002:	bf00      	nop
 23e5004:	023fce15 	.word	0x023fce15
 23e5008:	1007aba4 	.word	0x1007aba4
 23e500c:	1006f518 	.word	0x1006f518
 23e5010:	1006a7c4 	.word	0x1006a7c4
 23e5014:	023fce1e 	.word	0x023fce1e
 23e5018:	1006a168 	.word	0x1006a168
 23e501c:	1007abb4 	.word	0x1007abb4
 23e5020:	1006a7c5 	.word	0x1006a7c5
 23e5024:	023fce2e 	.word	0x023fce2e
 23e5028:	023fce26 	.word	0x023fce26
 23e502c:	023fce36 	.word	0x023fce36

023e5030 <_Z15hih8_initializev>:
/* 
 *=======================================================================================================================
 * hih8_initialize() - HIH8000 sensor initialize
 *=======================================================================================================================
 */
void hih8_initialize() {
 23e5030:	b508      	push	{r3, lr}
  Output("HIH8:INIT");
 23e5032:	480d      	ldr	r0, [pc, #52]	; (23e5068 <_Z15hih8_initializev+0x38>)
 23e5034:	f7ff faa8 	bl	23e4588 <_Z6OutputPKc>

  if (I2C_Device_Exist(HIH8000_ADDRESS)) {
 23e5038:	2027      	movs	r0, #39	; 0x27
 23e503a:	f7ff f89c 	bl	23e4176 <_Z16I2C_Device_Existh>
 23e503e:	4a0b      	ldr	r2, [pc, #44]	; (23e506c <_Z15hih8_initializev+0x3c>)
 23e5040:	4b0b      	ldr	r3, [pc, #44]	; (23e5070 <_Z15hih8_initializev+0x40>)
 23e5042:	b140      	cbz	r0, 23e5056 <_Z15hih8_initializev+0x26>
    HIH8_exists = true;
 23e5044:	2101      	movs	r1, #1
 23e5046:	7011      	strb	r1, [r2, #0]
    msgp = (char *) "HIH8 OK";
 23e5048:	4a0a      	ldr	r2, [pc, #40]	; (23e5074 <_Z15hih8_initializev+0x44>)
 23e504a:	601a      	str	r2, [r3, #0]
  else {
    msgp = (char *) "HIH8 NF";
    HIH8_exists = false;
    SystemStatusBits |= SSB_HIH8;  // Turn On Bit
  }
  Output (msgp);
 23e504c:	6818      	ldr	r0, [r3, #0]
}
 23e504e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
 23e5052:	f7ff ba99 	b.w	23e4588 <_Z6OutputPKc>
    msgp = (char *) "HIH8 NF";
 23e5056:	4908      	ldr	r1, [pc, #32]	; (23e5078 <_Z15hih8_initializev+0x48>)
    HIH8_exists = false;
 23e5058:	7010      	strb	r0, [r2, #0]
    msgp = (char *) "HIH8 NF";
 23e505a:	6019      	str	r1, [r3, #0]
    SystemStatusBits |= SSB_HIH8;  // Turn On Bit
 23e505c:	4907      	ldr	r1, [pc, #28]	; (23e507c <_Z15hih8_initializev+0x4c>)
 23e505e:	680a      	ldr	r2, [r1, #0]
 23e5060:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 23e5064:	600a      	str	r2, [r1, #0]
 23e5066:	e7f1      	b.n	23e504c <_Z15hih8_initializev+0x1c>
 23e5068:	023fce3e 	.word	0x023fce3e
 23e506c:	1006a29e 	.word	0x1006a29e
 23e5070:	1006f518 	.word	0x1006f518
 23e5074:	023fce48 	.word	0x023fce48
 23e5078:	023fce50 	.word	0x023fce50
 23e507c:	1006a168 	.word	0x1006a168

023e5080 <_Z17hih8_getTempHumidPfS_>:
 *=======================================================================================================================
 * hih8_getTempHumid() - Get Temp and Humidity
 *   Call example:  status = hih8_getTempHumid(&t, &h);
 *=======================================================================================================================
 */
bool hih8_getTempHumid(float *t, float *h) {
 23e5080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (HIH8_exists) {
 23e5084:	4b54      	ldr	r3, [pc, #336]	; (23e51d8 <_Z17hih8_getTempHumidPfS_+0x158>)
bool hih8_getTempHumid(float *t, float *h) {
 23e5086:	4604      	mov	r4, r0
  if (HIH8_exists) {
 23e5088:	f893 8000 	ldrb.w	r8, [r3]
bool hih8_getTempHumid(float *t, float *h) {
 23e508c:	460d      	mov	r5, r1
  if (HIH8_exists) {
 23e508e:	f1b8 0f00 	cmp.w	r8, #0
 23e5092:	f000 8086 	beq.w	23e51a2 <_Z17hih8_getTempHumidPfS_+0x122>
    uint16_t humidityBuffer    = 0;
    uint16_t temperatureBuffer = 0;
  
    Wire.begin();
 23e5096:	f014 fbc5 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e509a:	f012 fef9 	bl	23f7e90 <_ZN7TwoWire5beginEv>
    Wire.beginTransmission(HIH8000_ADDRESS);
 23e509e:	f014 fbc1 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e50a2:	2127      	movs	r1, #39	; 0x27
 23e50a4:	f012 ff22 	bl	23f7eec <_ZN7TwoWire17beginTransmissionEi>

    Wire.write(0x00); // set the register location for read request
 23e50a8:	f014 fbbc 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e50ac:	2100      	movs	r1, #0
 23e50ae:	f7fe fec9 	bl	23e3e44 <_ZN7TwoWire5writeEi.isra.0>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 23e50b2:	20c8      	movs	r0, #200	; 0xc8
 23e50b4:	f011 f9ee 	bl	23f6494 <HAL_Delay_Microseconds>

    delayMicroseconds(200); // give some time for sensor to process request

    if (Wire.requestFrom(HIH8000_ADDRESS, 4) == 4) {
 23e50b8:	f014 fbb4 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e50bc:	2204      	movs	r2, #4
 23e50be:	2127      	movs	r1, #39	; 0x27
 23e50c0:	f012 ff0d 	bl	23f7ede <_ZN7TwoWire11requestFromEhj>
 23e50c4:	2804      	cmp	r0, #4
 23e50c6:	d175      	bne.n	23e51b4 <_Z17hih8_getTempHumidPfS_+0x134>

      // Get raw humidity data
      humidityBuffer = Wire.read();
 23e50c8:	f014 fbac 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e50cc:	6803      	ldr	r3, [r0, #0]
 23e50ce:	695b      	ldr	r3, [r3, #20]
 23e50d0:	4798      	blx	r3
 23e50d2:	b287      	uxth	r7, r0
      humidityBuffer <<= 8;
      humidityBuffer |= Wire.read();
 23e50d4:	f014 fba6 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e50d8:	6803      	ldr	r3, [r0, #0]
 23e50da:	695b      	ldr	r3, [r3, #20]
 23e50dc:	4798      	blx	r3
 23e50de:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
 23e50e2:	b287      	uxth	r7, r0
      humidityBuffer &= 0x3FFF;   // 14bit value, get rid of the upper 2 status bits

      // Get raw temperature data
      temperatureBuffer = Wire.read();
 23e50e4:	f014 fb9e 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e50e8:	6803      	ldr	r3, [r0, #0]
 23e50ea:	695b      	ldr	r3, [r3, #20]
 23e50ec:	4798      	blx	r3
 23e50ee:	b286      	uxth	r6, r0
      temperatureBuffer <<= 8;
      temperatureBuffer |= Wire.read();
 23e50f0:	f014 fb98 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e50f4:	6803      	ldr	r3, [r0, #0]
 23e50f6:	695b      	ldr	r3, [r3, #20]
 23e50f8:	4798      	blx	r3
 23e50fa:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 23e50fe:	b286      	uxth	r6, r0
      temperatureBuffer >>= 2;  // Remove the last two "Do Not Care" bits (shift left is same as divide by 4)

      Wire.endTransmission();
 23e5100:	f014 fb90 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e5104:	f012 fef9 	bl	23f7efa <_ZN7TwoWire15endTransmissionEv>

      *h = humidityBuffer * 6.10e-3;
 23e5108:	f3c7 000d 	ubfx	r0, r7, #0, #14
 23e510c:	f7fd fa26 	bl	23e255c <__aeabi_i2d>
 23e5110:	a32d      	add	r3, pc, #180	; (adr r3, 23e51c8 <_Z17hih8_getTempHumidPfS_+0x148>)
 23e5112:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e5116:	f7fd fa8b 	bl	23e2630 <__aeabi_dmul>
 23e511a:	f7fd fd81 	bl	23e2c20 <__aeabi_d2f>
 23e511e:	6028      	str	r0, [r5, #0]
      *t = temperatureBuffer * 1.007e-2 - 40.0;
 23e5120:	08b0      	lsrs	r0, r6, #2
 23e5122:	f7fd fa1b 	bl	23e255c <__aeabi_i2d>
 23e5126:	a32a      	add	r3, pc, #168	; (adr r3, 23e51d0 <_Z17hih8_getTempHumidPfS_+0x150>)
 23e5128:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e512c:	f7fd fa80 	bl	23e2630 <__aeabi_dmul>
 23e5130:	2200      	movs	r2, #0
 23e5132:	4b2a      	ldr	r3, [pc, #168]	; (23e51dc <_Z17hih8_getTempHumidPfS_+0x15c>)
 23e5134:	f7fd f8c4 	bl	23e22c0 <__aeabi_dsub>
 23e5138:	f7fd fd72 	bl	23e2c20 <__aeabi_d2f>
 23e513c:	6020      	str	r0, [r4, #0]

      // QC Check
      *h = (isnan(*h) || (*h < QC_MIN_RH) || (*h >QC_MAX_RH)) ? QC_ERR_RH : *h;
 23e513e:	edd5 7a00 	vldr	s15, [r5]
 23e5142:	eef4 7a67 	vcmp.f32	s15, s15
 23e5146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e514a:	d62d      	bvs.n	23e51a8 <_Z17hih8_getTempHumidPfS_+0x128>
 23e514c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23e5150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e5154:	d428      	bmi.n	23e51a8 <_Z17hih8_getTempHumidPfS_+0x128>
 23e5156:	ed9f 7a22 	vldr	s14, [pc, #136]	; 23e51e0 <_Z17hih8_getTempHumidPfS_+0x160>
 23e515a:	eef4 7a47 	vcmp.f32	s15, s14
 23e515e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 23e51e4 <_Z17hih8_getTempHumidPfS_+0x164>
 23e5162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e5166:	fe77 7a27 	vselgt.f32	s15, s14, s15
 23e516a:	edc5 7a00 	vstr	s15, [r5]
      *t = (isnan(*t) || (*t < QC_MIN_T)  || (*t >QC_MAX_T))  ? QC_ERR_T  : *t;
 23e516e:	edd4 7a00 	vldr	s15, [r4]
 23e5172:	eef4 7a67 	vcmp.f32	s15, s15
 23e5176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e517a:	d618      	bvs.n	23e51ae <_Z17hih8_getTempHumidPfS_+0x12e>
 23e517c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 23e51e8 <_Z17hih8_getTempHumidPfS_+0x168>
 23e5180:	eef4 7ac7 	vcmpe.f32	s15, s14
 23e5184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e5188:	d411      	bmi.n	23e51ae <_Z17hih8_getTempHumidPfS_+0x12e>
 23e518a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 23e51ec <_Z17hih8_getTempHumidPfS_+0x16c>
 23e518e:	eef4 7a47 	vcmp.f32	s15, s14
 23e5192:	ed9f 7a14 	vldr	s14, [pc, #80]	; 23e51e4 <_Z17hih8_getTempHumidPfS_+0x164>
 23e5196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e519a:	fe77 7a27 	vselgt.f32	s15, s14, s15
 23e519e:	edc4 7a00 	vstr	s15, [r4]
    }
  }
  else {
    return (false);
  }
}
 23e51a2:	4640      	mov	r0, r8
 23e51a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *h = (isnan(*h) || (*h < QC_MIN_RH) || (*h >QC_MAX_RH)) ? QC_ERR_RH : *h;
 23e51a8:	eddf 7a0e 	vldr	s15, [pc, #56]	; 23e51e4 <_Z17hih8_getTempHumidPfS_+0x164>
 23e51ac:	e7dd      	b.n	23e516a <_Z17hih8_getTempHumidPfS_+0xea>
      *t = (isnan(*t) || (*t < QC_MIN_T)  || (*t >QC_MAX_T))  ? QC_ERR_T  : *t;
 23e51ae:	eddf 7a0d 	vldr	s15, [pc, #52]	; 23e51e4 <_Z17hih8_getTempHumidPfS_+0x164>
 23e51b2:	e7f4      	b.n	23e519e <_Z17hih8_getTempHumidPfS_+0x11e>
      Wire.endTransmission();
 23e51b4:	f014 fb36 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e51b8:	f012 fe9f 	bl	23f7efa <_ZN7TwoWire15endTransmissionEv>
      return(false);
 23e51bc:	f04f 0800 	mov.w	r8, #0
 23e51c0:	e7ef      	b.n	23e51a2 <_Z17hih8_getTempHumidPfS_+0x122>
 23e51c2:	bf00      	nop
 23e51c4:	f3af 8000 	nop.w
 23e51c8:	4816f007 	.word	0x4816f007
 23e51cc:	3f78fc50 	.word	0x3f78fc50
 23e51d0:	855da273 	.word	0x855da273
 23e51d4:	3f849f94 	.word	0x3f849f94
 23e51d8:	1006a29e 	.word	0x1006a29e
 23e51dc:	40440000 	.word	0x40440000
 23e51e0:	42c80000 	.word	0x42c80000
 23e51e4:	c479f99a 	.word	0xc479f99a
 23e51e8:	c2200000 	.word	0xc2200000
 23e51ec:	42700000 	.word	0x42700000

023e51f0 <_Z14wbt_initializev>:
/* 
 *=======================================================================================================================
 * wbt_initialize() - Wet Bulb Temperature
 *=======================================================================================================================
 */
void wbt_initialize() {
 23e51f0:	b508      	push	{r3, lr}
  Output("WBT:INIT");
 23e51f2:	4809      	ldr	r0, [pc, #36]	; (23e5218 <_Z14wbt_initializev+0x28>)
 23e51f4:	f7ff f9c8 	bl	23e4588 <_Z6OutputPKc>
  if (MCP_1_exists && SHT_1_exists) {
 23e51f8:	4b08      	ldr	r3, [pc, #32]	; (23e521c <_Z14wbt_initializev+0x2c>)
 23e51fa:	781b      	ldrb	r3, [r3, #0]
 23e51fc:	b153      	cbz	r3, 23e5214 <_Z14wbt_initializev+0x24>
 23e51fe:	4b08      	ldr	r3, [pc, #32]	; (23e5220 <_Z14wbt_initializev+0x30>)
 23e5200:	781b      	ldrb	r3, [r3, #0]
 23e5202:	b13b      	cbz	r3, 23e5214 <_Z14wbt_initializev+0x24>
    WBT_exists = true;
 23e5204:	2201      	movs	r2, #1
 23e5206:	4b07      	ldr	r3, [pc, #28]	; (23e5224 <_Z14wbt_initializev+0x34>)
    Output ("WBT:OK");
 23e5208:	4807      	ldr	r0, [pc, #28]	; (23e5228 <_Z14wbt_initializev+0x38>)
    WBT_exists = true;
 23e520a:	701a      	strb	r2, [r3, #0]
  }
  else {
    Output ("WBT:NF");
  }
}
 23e520c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Output ("WBT:NF");
 23e5210:	f7ff b9ba 	b.w	23e4588 <_Z6OutputPKc>
 23e5214:	4805      	ldr	r0, [pc, #20]	; (23e522c <_Z14wbt_initializev+0x3c>)
 23e5216:	e7f9      	b.n	23e520c <_Z14wbt_initializev+0x1c>
 23e5218:	023fce58 	.word	0x023fce58
 23e521c:	1006a2b8 	.word	0x1006a2b8
 23e5220:	1006a7c4 	.word	0x1006a7c4
 23e5224:	1006a7da 	.word	0x1006a7da
 23e5228:	023fce61 	.word	0x023fce61
 23e522c:	023fce68 	.word	0x023fce68

023e5230 <_Z13wbt_calculatedd>:
 *     In Arduino code, square brackets are not used for mathematical operations. Instead, parentheses ( ).
 * sqrt(x) computes the square root of x, which is x to the 1/2.
 * pow(RH, 1.5) calculates RH to the 3/2, which is the relative humidity raised to the power of 1.5.
 *=======================================================================================================================
 */
double wbt_calculate(double T, double RH) {
 23e5230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((T == -999.9) || (RH == -999.9)) {
 23e5234:	a354      	add	r3, pc, #336	; (adr r3, 23e5388 <_Z13wbt_calculatedd+0x158>)
 23e5236:	e9d3 2300 	ldrd	r2, r3, [r3]
double wbt_calculate(double T, double RH) {
 23e523a:	ec57 6b10 	vmov	r6, r7, d0
 23e523e:	b085      	sub	sp, #20
  if ((T == -999.9) || (RH == -999.9)) {
 23e5240:	ee10 0a10 	vmov	r0, s0
 23e5244:	4639      	mov	r1, r7
double wbt_calculate(double T, double RH) {
 23e5246:	ec55 4b11 	vmov	r4, r5, d1
  if ((T == -999.9) || (RH == -999.9)) {
 23e524a:	f7fd fc59 	bl	23e2b00 <__aeabi_dcmpeq>
 23e524e:	2800      	cmp	r0, #0
 23e5250:	f040 808b 	bne.w	23e536a <_Z13wbt_calculatedd+0x13a>
 23e5254:	a34c      	add	r3, pc, #304	; (adr r3, 23e5388 <_Z13wbt_calculatedd+0x158>)
 23e5256:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e525a:	4620      	mov	r0, r4
 23e525c:	4629      	mov	r1, r5
 23e525e:	f7fd fc4f 	bl	23e2b00 <__aeabi_dcmpeq>
 23e5262:	2800      	cmp	r0, #0
 23e5264:	f040 8081 	bne.w	23e536a <_Z13wbt_calculatedd+0x13a>
  }

  // Output("WBT:CALC");

  // Equation components
  double term1 = T * atan(0.151977 * sqrt(RH + 8.313659));
 23e5268:	a34b      	add	r3, pc, #300	; (adr r3, 23e5398 <_Z13wbt_calculatedd+0x168>)
 23e526a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e526e:	4620      	mov	r0, r4
 23e5270:	4629      	mov	r1, r5
 23e5272:	f7fd f827 	bl	23e22c4 <__adddf3>
 23e5276:	ec41 0b10 	vmov	d0, r0, r1
 23e527a:	f014 ff57 	bl	23fa12c <sqrt>
 23e527e:	a348      	add	r3, pc, #288	; (adr r3, 23e53a0 <_Z13wbt_calculatedd+0x170>)
 23e5280:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e5284:	ec51 0b10 	vmov	r0, r1, d0
 23e5288:	f7fd f9d2 	bl	23e2630 <__aeabi_dmul>
 23e528c:	ec41 0b10 	vmov	d0, r0, r1
 23e5290:	f014 fb86 	bl	23f99a0 <atan>
  double term2 = atan(T + RH);
 23e5294:	4622      	mov	r2, r4
 23e5296:	462b      	mov	r3, r5
 23e5298:	4630      	mov	r0, r6
 23e529a:	4639      	mov	r1, r7
  double term1 = T * atan(0.151977 * sqrt(RH + 8.313659));
 23e529c:	ec59 8b10 	vmov	r8, r9, d0
  double term2 = atan(T + RH);
 23e52a0:	f7fd f810 	bl	23e22c4 <__adddf3>
 23e52a4:	ec41 0b10 	vmov	d0, r0, r1
 23e52a8:	f014 fb7a 	bl	23f99a0 <atan>
  double term3 = atan(RH - 1.676311);
 23e52ac:	a33e      	add	r3, pc, #248	; (adr r3, 23e53a8 <_Z13wbt_calculatedd+0x178>)
 23e52ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e52b2:	4620      	mov	r0, r4
 23e52b4:	4629      	mov	r1, r5
  double term2 = atan(T + RH);
 23e52b6:	ec5b ab10 	vmov	sl, fp, d0
  double term3 = atan(RH - 1.676311);
 23e52ba:	f7fd f801 	bl	23e22c0 <__aeabi_dsub>
 23e52be:	ec41 0b10 	vmov	d0, r0, r1
 23e52c2:	f014 fb6d 	bl	23f99a0 <atan>
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
 23e52c6:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 23e5380 <_Z13wbt_calculatedd+0x150>
  double term3 = atan(RH - 1.676311);
 23e52ca:	ed8d 0b00 	vstr	d0, [sp]
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
 23e52ce:	ec45 4b10 	vmov	d0, r4, r5
 23e52d2:	f014 fe59 	bl	23f9f88 <pow>
 23e52d6:	a336      	add	r3, pc, #216	; (adr r3, 23e53b0 <_Z13wbt_calculatedd+0x180>)
 23e52d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e52dc:	4620      	mov	r0, r4
 23e52de:	4629      	mov	r1, r5
 23e52e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 23e52e4:	f7fd f9a4 	bl	23e2630 <__aeabi_dmul>
 23e52e8:	ec41 0b10 	vmov	d0, r0, r1
 23e52ec:	f014 fb58 	bl	23f99a0 <atan>
  double term1 = T * atan(0.151977 * sqrt(RH + 8.313659));
 23e52f0:	4642      	mov	r2, r8
 23e52f2:	464b      	mov	r3, r9
 23e52f4:	4630      	mov	r0, r6
 23e52f6:	4639      	mov	r1, r7
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
 23e52f8:	ec55 4b10 	vmov	r4, r5, d0
  double term1 = T * atan(0.151977 * sqrt(RH + 8.313659));
 23e52fc:	f7fd f998 	bl	23e2630 <__aeabi_dmul>
  double constant = 4.686035;

  // Wet bulb temperature calculation
  double Tw = term1 + term2 - term3 + term4 - constant;
 23e5300:	4652      	mov	r2, sl
 23e5302:	465b      	mov	r3, fp
 23e5304:	f7fc ffde 	bl	23e22c4 <__adddf3>
 23e5308:	e9dd 2300 	ldrd	r2, r3, [sp]
 23e530c:	f7fc ffd8 	bl	23e22c0 <__aeabi_dsub>
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
 23e5310:	a329      	add	r3, pc, #164	; (adr r3, 23e53b8 <_Z13wbt_calculatedd+0x188>)
 23e5312:	e9d3 2300 	ldrd	r2, r3, [r3]
  double Tw = term1 + term2 - term3 + term4 - constant;
 23e5316:	4606      	mov	r6, r0
 23e5318:	460f      	mov	r7, r1
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
 23e531a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 23e531e:	f7fd f987 	bl	23e2630 <__aeabi_dmul>
 23e5322:	4622      	mov	r2, r4
 23e5324:	462b      	mov	r3, r5
 23e5326:	f7fd f983 	bl	23e2630 <__aeabi_dmul>
 23e532a:	4602      	mov	r2, r0
 23e532c:	460b      	mov	r3, r1
  double Tw = term1 + term2 - term3 + term4 - constant;
 23e532e:	4630      	mov	r0, r6
 23e5330:	4639      	mov	r1, r7
 23e5332:	f7fc ffc7 	bl	23e22c4 <__adddf3>
 23e5336:	a322      	add	r3, pc, #136	; (adr r3, 23e53c0 <_Z13wbt_calculatedd+0x190>)
 23e5338:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e533c:	f7fc ffc0 	bl	23e22c0 <__aeabi_dsub>

  Tw = (isnan(Tw) || (Tw < QC_MIN_T)  || (Tw >QC_MAX_T))  ? QC_ERR_T  : Tw;
 23e5340:	4602      	mov	r2, r0
 23e5342:	460b      	mov	r3, r1
  double Tw = term1 + term2 - term3 + term4 - constant;
 23e5344:	4604      	mov	r4, r0
 23e5346:	460d      	mov	r5, r1
  Tw = (isnan(Tw) || (Tw < QC_MIN_T)  || (Tw >QC_MAX_T))  ? QC_ERR_T  : Tw;
 23e5348:	f7fd fc0c 	bl	23e2b64 <__aeabi_dcmpun>
 23e534c:	b968      	cbnz	r0, 23e536a <_Z13wbt_calculatedd+0x13a>
 23e534e:	2200      	movs	r2, #0
 23e5350:	4620      	mov	r0, r4
 23e5352:	4629      	mov	r1, r5
 23e5354:	4b0e      	ldr	r3, [pc, #56]	; (23e5390 <_Z13wbt_calculatedd+0x160>)
 23e5356:	f7fd fbdd 	bl	23e2b14 <__aeabi_dcmplt>
 23e535a:	b930      	cbnz	r0, 23e536a <_Z13wbt_calculatedd+0x13a>
 23e535c:	2200      	movs	r2, #0
 23e535e:	4620      	mov	r0, r4
 23e5360:	4629      	mov	r1, r5
 23e5362:	4b0c      	ldr	r3, [pc, #48]	; (23e5394 <_Z13wbt_calculatedd+0x164>)
 23e5364:	f7fd fbf4 	bl	23e2b50 <__aeabi_dcmpgt>
 23e5368:	b110      	cbz	r0, 23e5370 <_Z13wbt_calculatedd+0x140>
 23e536a:	a507      	add	r5, pc, #28	; (adr r5, 23e5388 <_Z13wbt_calculatedd+0x158>)
 23e536c:	e9d5 4500 	ldrd	r4, r5, [r5]
  return (Tw);
}
 23e5370:	ec45 4b10 	vmov	d0, r4, r5
 23e5374:	b005      	add	sp, #20
 23e5376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23e537a:	bf00      	nop
 23e537c:	f3af 8000 	nop.w
 23e5380:	00000000 	.word	0x00000000
 23e5384:	3ff80000 	.word	0x3ff80000
 23e5388:	33333333 	.word	0x33333333
 23e538c:	c08f3f33 	.word	0xc08f3f33
 23e5390:	c0440000 	.word	0xc0440000
 23e5394:	404e0000 	.word	0x404e0000
 23e5398:	e996312f 	.word	0xe996312f
 23e539c:	4020a097 	.word	0x4020a097
 23e53a0:	7a5f41af 	.word	0x7a5f41af
 23e53a4:	3fc373fb 	.word	0x3fc373fb
 23e53a8:	7baecd08 	.word	0x7baecd08
 23e53ac:	3ffad22b 	.word	0x3ffad22b
 23e53b0:	de050375 	.word	0xde050375
 23e53b4:	3f97a7c9 	.word	0x3f97a7c9
 23e53b8:	1f40b801 	.word	0x1f40b801
 23e53bc:	3f700cb8 	.word	0x3f700cb8
 23e53c0:	f583a53c 	.word	0xf583a53c
 23e53c4:	4012be7f 	.word	0x4012be7f

023e53c8 <_Z13hi_initializev>:
/* 
 *=======================================================================================================================
 * hi_initialize() - Heat Index Temperature
 *=======================================================================================================================
 */
void hi_initialize() {
 23e53c8:	b508      	push	{r3, lr}
  Output("HI:INIT");
 23e53ca:	4808      	ldr	r0, [pc, #32]	; (23e53ec <_Z13hi_initializev+0x24>)
 23e53cc:	f7ff f8dc 	bl	23e4588 <_Z6OutputPKc>
  if (SHT_1_exists) {
 23e53d0:	4b07      	ldr	r3, [pc, #28]	; (23e53f0 <_Z13hi_initializev+0x28>)
 23e53d2:	781b      	ldrb	r3, [r3, #0]
 23e53d4:	b13b      	cbz	r3, 23e53e6 <_Z13hi_initializev+0x1e>
    HI_exists = true;
 23e53d6:	2201      	movs	r2, #1
 23e53d8:	4b06      	ldr	r3, [pc, #24]	; (23e53f4 <_Z13hi_initializev+0x2c>)
    Output ("HI:OK");
 23e53da:	4807      	ldr	r0, [pc, #28]	; (23e53f8 <_Z13hi_initializev+0x30>)
    HI_exists = true;
 23e53dc:	701a      	strb	r2, [r3, #0]
  }
  else {
    Output ("HI:NF");
  }
}
 23e53de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Output ("HI:NF");
 23e53e2:	f7ff b8d1 	b.w	23e4588 <_Z6OutputPKc>
 23e53e6:	4805      	ldr	r0, [pc, #20]	; (23e53fc <_Z13hi_initializev+0x34>)
 23e53e8:	e7f9      	b.n	23e53de <_Z13hi_initializev+0x16>
 23e53ea:	bf00      	nop
 23e53ec:	023fce6f 	.word	0x023fce6f
 23e53f0:	1006a7c4 	.word	0x1006a7c4
 23e53f4:	1006a29f 	.word	0x1006a29f
 23e53f8:	023fce77 	.word	0x023fce77
 23e53fc:	023fce7d 	.word	0x023fce7d

023e5400 <_Z12hi_calculateff>:
 * warrant a heat index value below about 80 degrees F. In those cases, a simpler formula 
 * is applied to calculate values consistent with Steadman's results:
 * HI = 0.5 * {T + 61.0 + [(T-68.0)*1.2] + (RH*0.094)} 
 *=======================================================================================================================
 */
float hi_calculate(float T, float RH) {
 23e5400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23e5404:	ee10 0a10 	vmov	r0, s0
 23e5408:	ed2d 8b04 	vpush	{d8-d9}
 23e540c:	eef0 8a60 	vmov.f32	s17, s1
  float HI;
  float HI_f;

  if ((T == -999.9) || (RH == -999.9)) {
 23e5410:	f7fd f8b6 	bl	23e2580 <__aeabi_f2d>
 23e5414:	a3c1      	add	r3, pc, #772	; (adr r3, 23e571c <_Z12hi_calculateff+0x31c>)
 23e5416:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e541a:	4604      	mov	r4, r0
 23e541c:	460d      	mov	r5, r1
 23e541e:	f7fd fb6f 	bl	23e2b00 <__aeabi_dcmpeq>
 23e5422:	2800      	cmp	r0, #0
 23e5424:	f040 80fa 	bne.w	23e561c <_Z12hi_calculateff+0x21c>
 23e5428:	ee18 0a90 	vmov	r0, s17
 23e542c:	f7fd f8a8 	bl	23e2580 <__aeabi_f2d>
 23e5430:	a3ba      	add	r3, pc, #744	; (adr r3, 23e571c <_Z12hi_calculateff+0x31c>)
 23e5432:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e5436:	4680      	mov	r8, r0
 23e5438:	4689      	mov	r9, r1
 23e543a:	f7fd fb61 	bl	23e2b00 <__aeabi_dcmpeq>
 23e543e:	2800      	cmp	r0, #0
 23e5440:	f040 80ec 	bne.w	23e561c <_Z12hi_calculateff+0x21c>
    return (-999.9);
  }

  // Convert temperature from Celsius to Fahrenheit
  float T_f = T * 9.0 / 5.0 + 32.0;
 23e5444:	2200      	movs	r2, #0
 23e5446:	4620      	mov	r0, r4
 23e5448:	4629      	mov	r1, r5
 23e544a:	4b9d      	ldr	r3, [pc, #628]	; (23e56c0 <_Z12hi_calculateff+0x2c0>)
 23e544c:	f7fd f8f0 	bl	23e2630 <__aeabi_dmul>
 23e5450:	2200      	movs	r2, #0
 23e5452:	4b9c      	ldr	r3, [pc, #624]	; (23e56c4 <_Z12hi_calculateff+0x2c4>)
 23e5454:	f7fd fa16 	bl	23e2884 <__aeabi_ddiv>
 23e5458:	2200      	movs	r2, #0
 23e545a:	4b9b      	ldr	r3, [pc, #620]	; (23e56c8 <_Z12hi_calculateff+0x2c8>)
 23e545c:	f7fc ff32 	bl	23e22c4 <__adddf3>
 23e5460:	f7fd fbde 	bl	23e2c20 <__aeabi_d2f>
 23e5464:	ee09 0a10 	vmov	s18, r0

  // Steadman's equation
  HI_f = 0.5 * (T_f + 61.0 + ((T_f - 68.0)*1.2) + (RH * 0.094));
 23e5468:	f7fd f88a 	bl	23e2580 <__aeabi_f2d>
 23e546c:	2200      	movs	r2, #0
 23e546e:	4b97      	ldr	r3, [pc, #604]	; (23e56cc <_Z12hi_calculateff+0x2cc>)
 23e5470:	4604      	mov	r4, r0
 23e5472:	460d      	mov	r5, r1
 23e5474:	f7fc ff24 	bl	23e22c0 <__aeabi_dsub>
 23e5478:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 23e547c:	4b94      	ldr	r3, [pc, #592]	; (23e56d0 <_Z12hi_calculateff+0x2d0>)
 23e547e:	f7fd f8d7 	bl	23e2630 <__aeabi_dmul>
 23e5482:	2200      	movs	r2, #0
 23e5484:	4606      	mov	r6, r0
 23e5486:	460f      	mov	r7, r1
 23e5488:	4b92      	ldr	r3, [pc, #584]	; (23e56d4 <_Z12hi_calculateff+0x2d4>)
 23e548a:	4620      	mov	r0, r4
 23e548c:	4629      	mov	r1, r5
 23e548e:	f7fc ff19 	bl	23e22c4 <__adddf3>
 23e5492:	4602      	mov	r2, r0
 23e5494:	460b      	mov	r3, r1
 23e5496:	4630      	mov	r0, r6
 23e5498:	4639      	mov	r1, r7
 23e549a:	f7fc ff13 	bl	23e22c4 <__adddf3>
 23e549e:	a382      	add	r3, pc, #520	; (adr r3, 23e56a8 <_Z12hi_calculateff+0x2a8>)
 23e54a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e54a4:	4606      	mov	r6, r0
 23e54a6:	460f      	mov	r7, r1
 23e54a8:	4640      	mov	r0, r8
 23e54aa:	4649      	mov	r1, r9
 23e54ac:	f7fd f8c0 	bl	23e2630 <__aeabi_dmul>
 23e54b0:	4602      	mov	r2, r0
 23e54b2:	460b      	mov	r3, r1
 23e54b4:	4630      	mov	r0, r6
 23e54b6:	4639      	mov	r1, r7
 23e54b8:	f7fc ff04 	bl	23e22c4 <__adddf3>
 23e54bc:	2200      	movs	r2, #0
 23e54be:	4b86      	ldr	r3, [pc, #536]	; (23e56d8 <_Z12hi_calculateff+0x2d8>)
 23e54c0:	f7fd f8b6 	bl	23e2630 <__aeabi_dmul>
 23e54c4:	f7fd fbac 	bl	23e2c20 <__aeabi_d2f>

  // Compute the average of the simple HI with the actual temperature [deg F]
  HI_f = (HI_f + T_f) / 2;
 23e54c8:	ee07 0a90 	vmov	s15, r0
 23e54cc:	ee37 8a89 	vadd.f32	s16, s15, s18
 23e54d0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5

  if (HI_f >= 80.0) { 
 23e54d4:	ed9f 7a81 	vldr	s14, [pc, #516]	; 23e56dc <_Z12hi_calculateff+0x2dc>
  HI_f = (HI_f + T_f) / 2;
 23e54d8:	ee28 8a27 	vmul.f32	s16, s16, s15
  if (HI_f >= 80.0) { 
 23e54dc:	eeb4 8ac7 	vcmpe.f32	s16, s14
 23e54e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e54e4:	db75      	blt.n	23e55d2 <_Z12hi_calculateff+0x1d2>
    float c7 = 0.00122874;
    float c8 = 0.00085282;
    float c9 = -0.00000199;
    
    // Heat Index calculation
    HI_f = c1 + (c2 * T_f) + (c3 * RH) + (c4 * T_f * RH) +
 23e54e6:	eddf 7a7e 	vldr	s15, [pc, #504]	; 23e56e0 <_Z12hi_calculateff+0x2e0>
 23e54ea:	ed9f 8a7e 	vldr	s16, [pc, #504]	; 23e56e4 <_Z12hi_calculateff+0x2e4>
 23e54ee:	eea9 8a27 	vfma.f32	s16, s18, s15
 23e54f2:	eddf 7a7d 	vldr	s15, [pc, #500]	; 23e56e8 <_Z12hi_calculateff+0x2e8>
 23e54f6:	eea8 8aa7 	vfma.f32	s16, s17, s15
 23e54fa:	eddf 7a7c 	vldr	s15, [pc, #496]	; 23e56ec <_Z12hi_calculateff+0x2ec>
 23e54fe:	ee69 7a27 	vmul.f32	s15, s18, s15
 23e5502:	eea7 8aa8 	vfma.f32	s16, s15, s17
                (c5 * T_f * T_f) + (c6 * RH * RH) + 
 23e5506:	eddf 7a7a 	vldr	s15, [pc, #488]	; 23e56f0 <_Z12hi_calculateff+0x2f0>
 23e550a:	ee69 7a27 	vmul.f32	s15, s18, s15
    HI_f = c1 + (c2 * T_f) + (c3 * RH) + (c4 * T_f * RH) +
 23e550e:	eea7 8a89 	vfma.f32	s16, s15, s18
                (c5 * T_f * T_f) + (c6 * RH * RH) + 
 23e5512:	eddf 7a78 	vldr	s15, [pc, #480]	; 23e56f4 <_Z12hi_calculateff+0x2f4>
 23e5516:	ee68 7aa7 	vmul.f32	s15, s17, s15
 23e551a:	eea7 8aa8 	vfma.f32	s16, s15, s17
                (c7 * T_f * T_f * RH) + (c8 * T_f * RH * RH) +
 23e551e:	eddf 7a76 	vldr	s15, [pc, #472]	; 23e56f8 <_Z12hi_calculateff+0x2f8>
 23e5522:	ee69 7a27 	vmul.f32	s15, s18, s15
 23e5526:	ee67 7a89 	vmul.f32	s15, s15, s18
                (c5 * T_f * T_f) + (c6 * RH * RH) + 
 23e552a:	eea7 8aa8 	vfma.f32	s16, s15, s17
                (c7 * T_f * T_f * RH) + (c8 * T_f * RH * RH) +
 23e552e:	eddf 7a73 	vldr	s15, [pc, #460]	; 23e56fc <_Z12hi_calculateff+0x2fc>
 23e5532:	ee69 7a27 	vmul.f32	s15, s18, s15
 23e5536:	ee67 7aa8 	vmul.f32	s15, s15, s17
 23e553a:	eea7 8aa8 	vfma.f32	s16, s15, s17
                (c9 * T_f * T_f * RH * RH);
 23e553e:	eddf 7a70 	vldr	s15, [pc, #448]	; 23e5700 <_Z12hi_calculateff+0x300>

    if ((RH < 13.0) && ((T_f > 80.0) && (T_f < 112.0)) ) {
 23e5542:	eef2 9a0a 	vmov.f32	s19, #42	; 0x41500000  13.0
                (c9 * T_f * T_f * RH * RH);
 23e5546:	ee69 7a27 	vmul.f32	s15, s18, s15
    if ((RH < 13.0) && ((T_f > 80.0) && (T_f < 112.0)) ) {
 23e554a:	eef4 8ae9 	vcmpe.f32	s17, s19
                (c9 * T_f * T_f * RH * RH);
 23e554e:	ee67 7a89 	vmul.f32	s15, s15, s18
    if ((RH < 13.0) && ((T_f > 80.0) && (T_f < 112.0)) ) {
 23e5552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                (c9 * T_f * T_f * RH * RH);
 23e5556:	ee67 7aa8 	vmul.f32	s15, s15, s17
    HI_f = c1 + (c2 * T_f) + (c3 * RH) + (c4 * T_f * RH) +
 23e555a:	eea7 8aa8 	vfma.f32	s16, s15, s17
    if ((RH < 13.0) && ((T_f > 80.0) && (T_f < 112.0)) ) {
 23e555e:	d563      	bpl.n	23e5628 <_Z12hi_calculateff+0x228>
 23e5560:	eeb4 9ac7 	vcmpe.f32	s18, s14
 23e5564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e5568:	dd5e      	ble.n	23e5628 <_Z12hi_calculateff+0x228>
 23e556a:	eddf 7a66 	vldr	s15, [pc, #408]	; 23e5704 <_Z12hi_calculateff+0x304>
 23e556e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 23e5572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e5576:	f140 8090 	bpl.w	23e569a <_Z12hi_calculateff+0x29a>
      // If the RH is less than 13% and the temperature is between 80 and 112 degrees F, 
      // then the following adjustment is subtracted from HI: 
      // ADJUSTMENT = [(13-RH)/4]*SQRT{[17-ABS(T-95.)]/17}

      float Adjustment = ( (13 - RH) / 4 ) * sqrt( (17 - abs(T_f - 95.0) ) / 17 );
 23e557a:	a34d      	add	r3, pc, #308	; (adr r3, 23e56b0 <_Z12hi_calculateff+0x2b0>)
 23e557c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e5580:	4620      	mov	r0, r4
 23e5582:	4629      	mov	r1, r5
 23e5584:	f7fc fe9c 	bl	23e22c0 <__aeabi_dsub>
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 23e5588:	4602      	mov	r2, r0
 23e558a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23e558e:	2000      	movs	r0, #0
 23e5590:	495d      	ldr	r1, [pc, #372]	; (23e5708 <_Z12hi_calculateff+0x308>)
 23e5592:	f7fc fe95 	bl	23e22c0 <__aeabi_dsub>
 23e5596:	2200      	movs	r2, #0
 23e5598:	4b5b      	ldr	r3, [pc, #364]	; (23e5708 <_Z12hi_calculateff+0x308>)
 23e559a:	f7fd f973 	bl	23e2884 <__aeabi_ddiv>
 23e559e:	ec41 0b10 	vmov	d0, r0, r1
 23e55a2:	f014 fdc3 	bl	23fa12c <sqrt>
 23e55a6:	ee79 8ae8 	vsub.f32	s17, s19, s17
 23e55aa:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 23e55ae:	ee68 7aa7 	vmul.f32	s15, s17, s15
 23e55b2:	ec55 4b10 	vmov	r4, r5, d0
 23e55b6:	ee17 0a90 	vmov	r0, s15
 23e55ba:	f7fc ffe1 	bl	23e2580 <__aeabi_f2d>
 23e55be:	4622      	mov	r2, r4
 23e55c0:	462b      	mov	r3, r5
 23e55c2:	f7fd f835 	bl	23e2630 <__aeabi_dmul>
 23e55c6:	f7fd fb2b 	bl	23e2c20 <__aeabi_d2f>

      HI_f = HI_f - Adjustment;
 23e55ca:	ee07 0a90 	vmov	s15, r0
 23e55ce:	ee38 8a67 	vsub.f32	s16, s16, s15
      HI_f = HI_f + Adjustment;
    }
  }

  // Convert Heat Index from Fahrenheit to Celsius
  HI = (HI_f - 32.0) * 5.0 / 9.0;
 23e55d2:	ee18 0a10 	vmov	r0, s16
 23e55d6:	f7fc ffd3 	bl	23e2580 <__aeabi_f2d>
 23e55da:	2200      	movs	r2, #0
 23e55dc:	4b3a      	ldr	r3, [pc, #232]	; (23e56c8 <_Z12hi_calculateff+0x2c8>)
 23e55de:	f7fc fe6f 	bl	23e22c0 <__aeabi_dsub>
 23e55e2:	2200      	movs	r2, #0
 23e55e4:	4b37      	ldr	r3, [pc, #220]	; (23e56c4 <_Z12hi_calculateff+0x2c4>)
 23e55e6:	f7fd f823 	bl	23e2630 <__aeabi_dmul>
 23e55ea:	2200      	movs	r2, #0
 23e55ec:	4b34      	ldr	r3, [pc, #208]	; (23e56c0 <_Z12hi_calculateff+0x2c0>)
 23e55ee:	f7fd f949 	bl	23e2884 <__aeabi_ddiv>
 23e55f2:	f7fd fb15 	bl	23e2c20 <__aeabi_d2f>
 23e55f6:	ee00 0a10 	vmov	s0, r0

  // Quality Control Check
  HI = (isnan(HI) || (HI < QC_MIN_HI)  || (HI >QC_MAX_HI))  ? QC_ERR_HI  : HI;
 23e55fa:	eeb4 0a40 	vcmp.f32	s0, s0
 23e55fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e5602:	d60b      	bvs.n	23e561c <_Z12hi_calculateff+0x21c>
 23e5604:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23e5608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e560c:	d406      	bmi.n	23e561c <_Z12hi_calculateff+0x21c>
 23e560e:	eddf 7a3f 	vldr	s15, [pc, #252]	; 23e570c <_Z12hi_calculateff+0x30c>
 23e5612:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23e5616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e561a:	dd01      	ble.n	23e5620 <_Z12hi_calculateff+0x220>
 23e561c:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 23e5710 <_Z12hi_calculateff+0x310>

  return (HI);
}
 23e5620:	ecbd 8b04 	vpop	{d8-d9}
 23e5624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if ((RH > 85.0) && ((T_f > 80.0) && (T_f < 87.0)) ) {
 23e5628:	eddf 7a3a 	vldr	s15, [pc, #232]	; 23e5714 <_Z12hi_calculateff+0x314>
 23e562c:	eef4 8ae7 	vcmpe.f32	s17, s15
 23e5630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e5634:	ddcd      	ble.n	23e55d2 <_Z12hi_calculateff+0x1d2>
 23e5636:	eeb4 9ac7 	vcmpe.f32	s18, s14
 23e563a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e563e:	ddc8      	ble.n	23e55d2 <_Z12hi_calculateff+0x1d2>
 23e5640:	eddf 7a35 	vldr	s15, [pc, #212]	; 23e5718 <_Z12hi_calculateff+0x318>
 23e5644:	eeb4 9ae7 	vcmpe.f32	s18, s15
 23e5648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e564c:	d5c1      	bpl.n	23e55d2 <_Z12hi_calculateff+0x1d2>
      float Adjustment = ( (RH - 85) / 10 ) * ( (87.0 - T_f) / 5 );
 23e564e:	eddf 0a31 	vldr	s1, [pc, #196]	; 23e5714 <_Z12hi_calculateff+0x314>
 23e5652:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 23e5656:	ee78 8ae0 	vsub.f32	s17, s17, s1
 23e565a:	eec8 7aa7 	vdiv.f32	s15, s17, s15
 23e565e:	ee17 0a90 	vmov	r0, s15
 23e5662:	f7fc ff8d 	bl	23e2580 <__aeabi_f2d>
 23e5666:	4622      	mov	r2, r4
 23e5668:	4606      	mov	r6, r0
 23e566a:	460f      	mov	r7, r1
 23e566c:	a112      	add	r1, pc, #72	; (adr r1, 23e56b8 <_Z12hi_calculateff+0x2b8>)
 23e566e:	e9d1 0100 	ldrd	r0, r1, [r1]
 23e5672:	462b      	mov	r3, r5
 23e5674:	f7fc fe24 	bl	23e22c0 <__aeabi_dsub>
 23e5678:	2200      	movs	r2, #0
 23e567a:	4b12      	ldr	r3, [pc, #72]	; (23e56c4 <_Z12hi_calculateff+0x2c4>)
 23e567c:	f7fd f902 	bl	23e2884 <__aeabi_ddiv>
 23e5680:	4602      	mov	r2, r0
 23e5682:	460b      	mov	r3, r1
 23e5684:	4630      	mov	r0, r6
 23e5686:	4639      	mov	r1, r7
 23e5688:	f7fc ffd2 	bl	23e2630 <__aeabi_dmul>
 23e568c:	f7fd fac8 	bl	23e2c20 <__aeabi_d2f>
      HI_f = HI_f + Adjustment;
 23e5690:	ee07 0a90 	vmov	s15, r0
 23e5694:	ee38 8a27 	vadd.f32	s16, s16, s15
 23e5698:	e79b      	b.n	23e55d2 <_Z12hi_calculateff+0x1d2>
    else if ((RH > 85.0) && ((T_f > 80.0) && (T_f < 87.0)) ) {
 23e569a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 23e5714 <_Z12hi_calculateff+0x314>
 23e569e:	eef4 8ae7 	vcmpe.f32	s17, s15
 23e56a2:	e7ca      	b.n	23e563a <_Z12hi_calculateff+0x23a>
 23e56a4:	f3af 8000 	nop.w
 23e56a8:	4dd2f1aa 	.word	0x4dd2f1aa
 23e56ac:	3fb81062 	.word	0x3fb81062
 23e56b0:	00000000 	.word	0x00000000
 23e56b4:	4057c000 	.word	0x4057c000
 23e56b8:	00000000 	.word	0x00000000
 23e56bc:	4055c000 	.word	0x4055c000
 23e56c0:	40220000 	.word	0x40220000
 23e56c4:	40140000 	.word	0x40140000
 23e56c8:	40400000 	.word	0x40400000
 23e56cc:	40510000 	.word	0x40510000
 23e56d0:	3ff33333 	.word	0x3ff33333
 23e56d4:	404e8000 	.word	0x404e8000
 23e56d8:	3fe00000 	.word	0x3fe00000
 23e56dc:	42a00000 	.word	0x42a00000
 23e56e0:	40032311 	.word	0x40032311
 23e56e4:	c2298419 	.word	0xc2298419
 23e56e8:	41224b16 	.word	0x41224b16
 23e56ec:	be662648 	.word	0xbe662648
 23e56f0:	bbe00fe0 	.word	0xbbe00fe0
 23e56f4:	bd6087f8 	.word	0xbd6087f8
 23e56f8:	3aa10dac 	.word	0x3aa10dac
 23e56fc:	3a5f8fc8 	.word	0x3a5f8fc8
 23e5700:	b6058bf1 	.word	0xb6058bf1
 23e5704:	42e00000 	.word	0x42e00000
 23e5708:	40310000 	.word	0x40310000
 23e570c:	42700000 	.word	0x42700000
 23e5710:	c479f99a 	.word	0xc479f99a
 23e5714:	42aa0000 	.word	0x42aa0000
 23e5718:	42ae0000 	.word	0x42ae0000
 23e571c:	33333333 	.word	0x33333333
 23e5720:	c08f3f33 	.word	0xc08f3f33

023e5724 <_Z15wbgt_initializev>:
/* 
 *=======================================================================================================================
 * wbgt_initialize() - Wet Bulb Globe Temperature
 *=======================================================================================================================
 */
void wbgt_initialize() {
 23e5724:	b508      	push	{r3, lr}
  Output("WBGT:INIT");
 23e5726:	480c      	ldr	r0, [pc, #48]	; (23e5758 <_Z15wbgt_initializev+0x34>)
 23e5728:	f7fe ff2e 	bl	23e4588 <_Z6OutputPKc>
  if (MCP_1_exists && SHT_1_exists) {
 23e572c:	4b0b      	ldr	r3, [pc, #44]	; (23e575c <_Z15wbgt_initializev+0x38>)
 23e572e:	781b      	ldrb	r3, [r3, #0]
 23e5730:	b17b      	cbz	r3, 23e5752 <_Z15wbgt_initializev+0x2e>
 23e5732:	4b0b      	ldr	r3, [pc, #44]	; (23e5760 <_Z15wbgt_initializev+0x3c>)
 23e5734:	781b      	ldrb	r3, [r3, #0]
 23e5736:	b163      	cbz	r3, 23e5752 <_Z15wbgt_initializev+0x2e>
    WBGT_exists = true;
 23e5738:	2201      	movs	r2, #1
 23e573a:	4b0a      	ldr	r3, [pc, #40]	; (23e5764 <_Z15wbgt_initializev+0x40>)
 23e573c:	701a      	strb	r2, [r3, #0]
    if (MCP_3_exists) {
 23e573e:	4b0a      	ldr	r3, [pc, #40]	; (23e5768 <_Z15wbgt_initializev+0x44>)
 23e5740:	781b      	ldrb	r3, [r3, #0]
 23e5742:	b123      	cbz	r3, 23e574e <_Z15wbgt_initializev+0x2a>
      Output ("WBGT:OK w/Globe");
 23e5744:	4809      	ldr	r0, [pc, #36]	; (23e576c <_Z15wbgt_initializev+0x48>)
    }
  }
  else {
    Output ("WBGT:NF");
  }
}
 23e5746:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Output ("WBGT:NF");
 23e574a:	f7fe bf1d 	b.w	23e4588 <_Z6OutputPKc>
      Output ("WBGT:OK wo/Globe");
 23e574e:	4808      	ldr	r0, [pc, #32]	; (23e5770 <_Z15wbgt_initializev+0x4c>)
 23e5750:	e7f9      	b.n	23e5746 <_Z15wbgt_initializev+0x22>
    Output ("WBGT:NF");
 23e5752:	4808      	ldr	r0, [pc, #32]	; (23e5774 <_Z15wbgt_initializev+0x50>)
 23e5754:	e7f7      	b.n	23e5746 <_Z15wbgt_initializev+0x22>
 23e5756:	bf00      	nop
 23e5758:	023fce83 	.word	0x023fce83
 23e575c:	1006a2b8 	.word	0x1006a2b8
 23e5760:	1006a7c4 	.word	0x1006a7c4
 23e5764:	1006a7d9 	.word	0x1006a7d9
 23e5768:	1006a2ba 	.word	0x1006a2ba
 23e576c:	023fce8d 	.word	0x023fce8d
 23e5770:	023fce9d 	.word	0x023fce9d
 23e5774:	023fceae 	.word	0x023fceae

023e5778 <_Z13wbgt_using_hid>:
/* 
 *=======================================================================================================================
 * wbgt_using_hi() - Compute Web Bulb Globe Temperature using Heat Index
 *=======================================================================================================================
 */
double wbgt_using_hi(double HIc) {
 23e5778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  if (HIc == -999.9) {
 23e577a:	a32f      	add	r3, pc, #188	; (adr r3, 23e5838 <_Z13wbgt_using_hid+0xc0>)
 23e577c:	e9d3 2300 	ldrd	r2, r3, [r3]
double wbgt_using_hi(double HIc) {
 23e5780:	ec55 4b10 	vmov	r4, r5, d0
  if (HIc == -999.9) {
 23e5784:	ee10 0a10 	vmov	r0, s0
 23e5788:	4629      	mov	r1, r5
 23e578a:	f7fd f9b9 	bl	23e2b00 <__aeabi_dcmpeq>
 23e578e:	2800      	cmp	r0, #0
 23e5790:	d140      	bne.n	23e5814 <_Z13wbgt_using_hid+0x9c>
    return (-999.9);
  }

  double HIf = HIc * 9.0 / 5.0 + 32.0;
 23e5792:	2200      	movs	r2, #0
 23e5794:	4620      	mov	r0, r4
 23e5796:	4629      	mov	r1, r5
 23e5798:	4b29      	ldr	r3, [pc, #164]	; (23e5840 <_Z13wbgt_using_hid+0xc8>)
 23e579a:	f7fc ff49 	bl	23e2630 <__aeabi_dmul>
 23e579e:	2200      	movs	r2, #0
 23e57a0:	4b28      	ldr	r3, [pc, #160]	; (23e5844 <_Z13wbgt_using_hid+0xcc>)
 23e57a2:	f7fd f86f 	bl	23e2884 <__aeabi_ddiv>
 23e57a6:	2200      	movs	r2, #0
 23e57a8:	4b27      	ldr	r3, [pc, #156]	; (23e5848 <_Z13wbgt_using_hid+0xd0>)
 23e57aa:	f7fc fd8b 	bl	23e22c4 <__adddf3>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 23e57ae:	4602      	mov	r2, r0
 23e57b0:	460b      	mov	r3, r1
 23e57b2:	4604      	mov	r4, r0
 23e57b4:	460d      	mov	r5, r1
 23e57b6:	f7fc ff3b 	bl	23e2630 <__aeabi_dmul>

  // Below produces Wet Bulb Globe Temperature in Celsius
  double TWc = -0.0034 * pow(HIf, 2) + 0.96 * HIf - 34;
 23e57ba:	a31b      	add	r3, pc, #108	; (adr r3, 23e5828 <_Z13wbgt_using_hid+0xb0>)
 23e57bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e57c0:	f7fc ff36 	bl	23e2630 <__aeabi_dmul>
 23e57c4:	a31a      	add	r3, pc, #104	; (adr r3, 23e5830 <_Z13wbgt_using_hid+0xb8>)
 23e57c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e57ca:	4606      	mov	r6, r0
 23e57cc:	460f      	mov	r7, r1
 23e57ce:	4620      	mov	r0, r4
 23e57d0:	4629      	mov	r1, r5
 23e57d2:	f7fc ff2d 	bl	23e2630 <__aeabi_dmul>
 23e57d6:	4602      	mov	r2, r0
 23e57d8:	460b      	mov	r3, r1
 23e57da:	4630      	mov	r0, r6
 23e57dc:	4639      	mov	r1, r7
 23e57de:	f7fc fd71 	bl	23e22c4 <__adddf3>
 23e57e2:	2200      	movs	r2, #0
 23e57e4:	4b19      	ldr	r3, [pc, #100]	; (23e584c <_Z13wbgt_using_hid+0xd4>)
 23e57e6:	f7fc fd6b 	bl	23e22c0 <__aeabi_dsub>

  TWc = (isnan(TWc) || (TWc < QC_MIN_T)  || (TWc >QC_MAX_T))  ? QC_ERR_T  : TWc;
 23e57ea:	4602      	mov	r2, r0
 23e57ec:	460b      	mov	r3, r1
  double TWc = -0.0034 * pow(HIf, 2) + 0.96 * HIf - 34;
 23e57ee:	4604      	mov	r4, r0
 23e57f0:	460d      	mov	r5, r1
  TWc = (isnan(TWc) || (TWc < QC_MIN_T)  || (TWc >QC_MAX_T))  ? QC_ERR_T  : TWc;
 23e57f2:	f7fd f9b7 	bl	23e2b64 <__aeabi_dcmpun>
 23e57f6:	b980      	cbnz	r0, 23e581a <_Z13wbgt_using_hid+0xa2>
 23e57f8:	2200      	movs	r2, #0
 23e57fa:	4620      	mov	r0, r4
 23e57fc:	4629      	mov	r1, r5
 23e57fe:	4b14      	ldr	r3, [pc, #80]	; (23e5850 <_Z13wbgt_using_hid+0xd8>)
 23e5800:	f7fd f988 	bl	23e2b14 <__aeabi_dcmplt>
 23e5804:	b948      	cbnz	r0, 23e581a <_Z13wbgt_using_hid+0xa2>
 23e5806:	2200      	movs	r2, #0
 23e5808:	4620      	mov	r0, r4
 23e580a:	4629      	mov	r1, r5
 23e580c:	4b11      	ldr	r3, [pc, #68]	; (23e5854 <_Z13wbgt_using_hid+0xdc>)
 23e580e:	f7fd f99f 	bl	23e2b50 <__aeabi_dcmpgt>
 23e5812:	b910      	cbnz	r0, 23e581a <_Z13wbgt_using_hid+0xa2>
  return (TWc);
}
 23e5814:	ec45 4b10 	vmov	d0, r4, r5
 23e5818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TWc = (isnan(TWc) || (TWc < QC_MIN_T)  || (TWc >QC_MAX_T))  ? QC_ERR_T  : TWc;
 23e581a:	a507      	add	r5, pc, #28	; (adr r5, 23e5838 <_Z13wbgt_using_hid+0xc0>)
 23e581c:	e9d5 4500 	ldrd	r4, r5, [r5]
 23e5820:	e7f8      	b.n	23e5814 <_Z13wbgt_using_hid+0x9c>
 23e5822:	bf00      	nop
 23e5824:	f3af 8000 	nop.w
 23e5828:	19ce075f 	.word	0x19ce075f
 23e582c:	bf6bda51 	.word	0xbf6bda51
 23e5830:	eb851eb8 	.word	0xeb851eb8
 23e5834:	3feeb851 	.word	0x3feeb851
 23e5838:	33333333 	.word	0x33333333
 23e583c:	c08f3f33 	.word	0xc08f3f33
 23e5840:	40220000 	.word	0x40220000
 23e5844:	40140000 	.word	0x40140000
 23e5848:	40400000 	.word	0x40400000
 23e584c:	40410000 	.word	0x40410000
 23e5850:	c0440000 	.word	0xc0440000
 23e5854:	404e0000 	.word	0x404e0000

023e5858 <_Z14wbgt_using_wbtddd>:
/* 
 *=======================================================================================================================
 * wbgt_using_wbt() - Compute Web Bulb Globe Temperature using web bulb temperature
 *=======================================================================================================================
 */
double wbgt_using_wbt(double Ta, double Tg, double Tw) {
 23e5858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  // Ta = mcp1 temp
  // Tg = mcp3 temp
  // Tw = wbt_calculate(Ta, RH)

  double wbgt = (0.7 * Tw) + (0.2 * Tg) + (0.1 * Ta);  // This will be Celsius
 23e585c:	a326      	add	r3, pc, #152	; (adr r3, 23e58f8 <_Z14wbgt_using_wbtddd+0xa0>)
 23e585e:	e9d3 2300 	ldrd	r2, r3, [r3]
double wbgt_using_wbt(double Ta, double Tg, double Tw) {
 23e5862:	ec51 0b12 	vmov	r0, r1, d2
 23e5866:	ec57 6b10 	vmov	r6, r7, d0
 23e586a:	ec59 8b11 	vmov	r8, r9, d1
  double wbgt = (0.7 * Tw) + (0.2 * Tg) + (0.1 * Ta);  // This will be Celsius
 23e586e:	f7fc fedf 	bl	23e2630 <__aeabi_dmul>
 23e5872:	a323      	add	r3, pc, #140	; (adr r3, 23e5900 <_Z14wbgt_using_wbtddd+0xa8>)
 23e5874:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e5878:	4604      	mov	r4, r0
 23e587a:	460d      	mov	r5, r1
 23e587c:	4640      	mov	r0, r8
 23e587e:	4649      	mov	r1, r9
 23e5880:	f7fc fed6 	bl	23e2630 <__aeabi_dmul>
 23e5884:	4602      	mov	r2, r0
 23e5886:	460b      	mov	r3, r1
 23e5888:	4620      	mov	r0, r4
 23e588a:	4629      	mov	r1, r5
 23e588c:	f7fc fd1a 	bl	23e22c4 <__adddf3>
 23e5890:	a31d      	add	r3, pc, #116	; (adr r3, 23e5908 <_Z14wbgt_using_wbtddd+0xb0>)
 23e5892:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e5896:	4604      	mov	r4, r0
 23e5898:	460d      	mov	r5, r1
 23e589a:	4630      	mov	r0, r6
 23e589c:	4639      	mov	r1, r7
 23e589e:	f7fc fec7 	bl	23e2630 <__aeabi_dmul>
 23e58a2:	4602      	mov	r2, r0
 23e58a4:	460b      	mov	r3, r1
 23e58a6:	4620      	mov	r0, r4
 23e58a8:	4629      	mov	r1, r5
 23e58aa:	f7fc fd0b 	bl	23e22c4 <__adddf3>

  wbgt = (isnan(wbgt) || (wbgt < QC_MIN_T)  || (wbgt >QC_MAX_T))  ? QC_ERR_T  : wbgt;
 23e58ae:	4602      	mov	r2, r0
 23e58b0:	460b      	mov	r3, r1
  double wbgt = (0.7 * Tw) + (0.2 * Tg) + (0.1 * Ta);  // This will be Celsius
 23e58b2:	4604      	mov	r4, r0
 23e58b4:	460d      	mov	r5, r1
  wbgt = (isnan(wbgt) || (wbgt < QC_MIN_T)  || (wbgt >QC_MAX_T))  ? QC_ERR_T  : wbgt;
 23e58b6:	f7fd f955 	bl	23e2b64 <__aeabi_dcmpun>
 23e58ba:	b988      	cbnz	r0, 23e58e0 <_Z14wbgt_using_wbtddd+0x88>
 23e58bc:	2200      	movs	r2, #0
 23e58be:	4620      	mov	r0, r4
 23e58c0:	4629      	mov	r1, r5
 23e58c2:	4b0b      	ldr	r3, [pc, #44]	; (23e58f0 <_Z14wbgt_using_wbtddd+0x98>)
 23e58c4:	f7fd f926 	bl	23e2b14 <__aeabi_dcmplt>
 23e58c8:	b950      	cbnz	r0, 23e58e0 <_Z14wbgt_using_wbtddd+0x88>
 23e58ca:	2200      	movs	r2, #0
 23e58cc:	4620      	mov	r0, r4
 23e58ce:	4629      	mov	r1, r5
 23e58d0:	4b08      	ldr	r3, [pc, #32]	; (23e58f4 <_Z14wbgt_using_wbtddd+0x9c>)
 23e58d2:	f7fd f93d 	bl	23e2b50 <__aeabi_dcmpgt>
 23e58d6:	b918      	cbnz	r0, 23e58e0 <_Z14wbgt_using_wbtddd+0x88>

  return (wbgt);
}
 23e58d8:	ec45 4b10 	vmov	d0, r4, r5
 23e58dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  wbgt = (isnan(wbgt) || (wbgt < QC_MIN_T)  || (wbgt >QC_MAX_T))  ? QC_ERR_T  : wbgt;
 23e58e0:	a501      	add	r5, pc, #4	; (adr r5, 23e58e8 <_Z14wbgt_using_wbtddd+0x90>)
 23e58e2:	e9d5 4500 	ldrd	r4, r5, [r5]
  return (wbgt);
 23e58e6:	e7f7      	b.n	23e58d8 <_Z14wbgt_using_wbtddd+0x80>
 23e58e8:	33333333 	.word	0x33333333
 23e58ec:	c08f3f33 	.word	0xc08f3f33
 23e58f0:	c0440000 	.word	0xc0440000
 23e58f4:	404e0000 	.word	0x404e0000
 23e58f8:	66666666 	.word	0x66666666
 23e58fc:	3fe66666 	.word	0x3fe66666
 23e5900:	9999999a 	.word	0x9999999a
 23e5904:	3fc99999 	.word	0x3fc99999
 23e5908:	9999999a 	.word	0x9999999a
 23e590c:	3fb99999 	.word	0x3fb99999

023e5910 <_Z17si1145_initializev>:
/* 
 *=======================================================================================================================
 * si1145_initialize() - SI1145 sensor initialize
 *=======================================================================================================================
 */
void si1145_initialize() {
 23e5910:	b570      	push	{r4, r5, r6, lr}
  Output("SI1145:INIT");
 23e5912:	484b      	ldr	r0, [pc, #300]	; (23e5a40 <_Z17si1145_initializev+0x130>)
void si1145_initialize() {
 23e5914:	ed2d 8b02 	vpush	{d8}
  Output("SI1145:INIT");
 23e5918:	f7fe fe36 	bl	23e4588 <_Z6OutputPKc>
  
  // SSB_SI1145 UV index & IR & Visible Sensor (I2C ADDRESS = 0x60)
  if (! uv.begin(&Wire)) {
 23e591c:	f013 ff82 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e5920:	4601      	mov	r1, r0
 23e5922:	4848      	ldr	r0, [pc, #288]	; (23e5a44 <_Z17si1145_initializev+0x134>)
 23e5924:	f00a fb00 	bl	23eff28 <_ZN15Adafruit_SI11455beginEP7TwoWire>
 23e5928:	4d47      	ldr	r5, [pc, #284]	; (23e5a48 <_Z17si1145_initializev+0x138>)
 23e592a:	4604      	mov	r4, r0
 23e592c:	b958      	cbnz	r0, 23e5946 <_Z17si1145_initializev+0x36>
    Output ("SI:NF");
 23e592e:	4847      	ldr	r0, [pc, #284]	; (23e5a4c <_Z17si1145_initializev+0x13c>)
 23e5930:	f7fe fe2a 	bl	23e4588 <_Z6OutputPKc>
    SI1145_exists = false;
    SystemStatusBits |= SSB_SI1145;  // Turn On Bit
 23e5934:	4a46      	ldr	r2, [pc, #280]	; (23e5a50 <_Z17si1145_initializev+0x140>)
    SI1145_exists = false;
 23e5936:	702c      	strb	r4, [r5, #0]
    SystemStatusBits |= SSB_SI1145;  // Turn On Bit
 23e5938:	6813      	ldr	r3, [r2, #0]
 23e593a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 23e593e:	6013      	str	r3, [r2, #0]
    sprintf (msgbuf, "SI:IR[%d.%02d]", (int)si_last_ir, (int)(si_last_ir*100.0)%100); 
    Output (msgbuf);
    sprintf (msgbuf, "SI:UV[%d.%02d]", (int)si_last_uv, (int)(si_last_uv*100.0)%100); 
    Output (msgbuf);
  }
}
 23e5940:	ecbd 8b02 	vpop	{d8}
 23e5944:	bd70      	pop	{r4, r5, r6, pc}
    SI1145_exists = true;
 23e5946:	2301      	movs	r3, #1
    Output ("SI:OK");
 23e5948:	4842      	ldr	r0, [pc, #264]	; (23e5a54 <_Z17si1145_initializev+0x144>)
    SI1145_exists = true;
 23e594a:	702b      	strb	r3, [r5, #0]
    Output ("SI:OK");
 23e594c:	f7fe fe1c 	bl	23e4588 <_Z6OutputPKc>
    si_last_vis = uv.readVisible();
 23e5950:	483c      	ldr	r0, [pc, #240]	; (23e5a44 <_Z17si1145_initializev+0x134>)
 23e5952:	f00a fa02 	bl	23efd5a <_ZN15Adafruit_SI114511readVisibleEv>
 23e5956:	ee07 0a90 	vmov	s15, r0
 23e595a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23e595e:	4c3e      	ldr	r4, [pc, #248]	; (23e5a58 <_Z17si1145_initializev+0x148>)
    si_last_ir = uv.readIR();
 23e5960:	4838      	ldr	r0, [pc, #224]	; (23e5a44 <_Z17si1145_initializev+0x134>)
    si_last_vis = uv.readVisible();
 23e5962:	edc4 7a00 	vstr	s15, [r4]
    si_last_ir = uv.readIR();
 23e5966:	f00a f9fb 	bl	23efd60 <_ZN15Adafruit_SI11456readIREv>
 23e596a:	ee07 0a90 	vmov	s15, r0
 23e596e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23e5972:	4e3a      	ldr	r6, [pc, #232]	; (23e5a5c <_Z17si1145_initializev+0x14c>)
    si_last_uv = uv.readUV()/100.0;
 23e5974:	4833      	ldr	r0, [pc, #204]	; (23e5a44 <_Z17si1145_initializev+0x134>)
    si_last_ir = uv.readIR();
 23e5976:	edc6 7a00 	vstr	s15, [r6]
    si_last_uv = uv.readUV()/100.0;
 23e597a:	f00a f9eb 	bl	23efd54 <_ZN15Adafruit_SI11456readUVEv>
 23e597e:	f7fc fded 	bl	23e255c <__aeabi_i2d>
 23e5982:	2200      	movs	r2, #0
 23e5984:	4b36      	ldr	r3, [pc, #216]	; (23e5a60 <_Z17si1145_initializev+0x150>)
 23e5986:	f7fc ff7d 	bl	23e2884 <__aeabi_ddiv>
 23e598a:	f7fd f949 	bl	23e2c20 <__aeabi_d2f>
    sprintf (msgbuf, "SI:VI[%d.%02d]", (int)si_last_vis, (int)(si_last_vis*100.0)%100); 
 23e598e:	ed94 8a00 	vldr	s16, [r4]
    si_last_uv = uv.readUV()/100.0;
 23e5992:	4d34      	ldr	r5, [pc, #208]	; (23e5a64 <_Z17si1145_initializev+0x154>)
    sprintf (msgbuf, "SI:VI[%d.%02d]", (int)si_last_vis, (int)(si_last_vis*100.0)%100); 
 23e5994:	2464      	movs	r4, #100	; 0x64
    si_last_uv = uv.readUV()/100.0;
 23e5996:	6028      	str	r0, [r5, #0]
    sprintf (msgbuf, "SI:VI[%d.%02d]", (int)si_last_vis, (int)(si_last_vis*100.0)%100); 
 23e5998:	ee18 0a10 	vmov	r0, s16
 23e599c:	f7fc fdf0 	bl	23e2580 <__aeabi_f2d>
 23e59a0:	2200      	movs	r2, #0
 23e59a2:	4b2f      	ldr	r3, [pc, #188]	; (23e5a60 <_Z17si1145_initializev+0x150>)
 23e59a4:	f7fc fe44 	bl	23e2630 <__aeabi_dmul>
 23e59a8:	f7fd f8f2 	bl	23e2b90 <__aeabi_d2iz>
 23e59ac:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 23e59b0:	fb90 f3f4 	sdiv	r3, r0, r4
 23e59b4:	ee17 2a90 	vmov	r2, s15
 23e59b8:	fb03 0314 	mls	r3, r3, r4, r0
 23e59bc:	492a      	ldr	r1, [pc, #168]	; (23e5a68 <_Z17si1145_initializev+0x158>)
 23e59be:	482b      	ldr	r0, [pc, #172]	; (23e5a6c <_Z17si1145_initializev+0x15c>)
 23e59c0:	f011 fbea 	bl	23f7198 <sprintf>
    Output (msgbuf);
 23e59c4:	4829      	ldr	r0, [pc, #164]	; (23e5a6c <_Z17si1145_initializev+0x15c>)
 23e59c6:	f7fe fddf 	bl	23e4588 <_Z6OutputPKc>
    sprintf (msgbuf, "SI:IR[%d.%02d]", (int)si_last_ir, (int)(si_last_ir*100.0)%100); 
 23e59ca:	ed96 8a00 	vldr	s16, [r6]
 23e59ce:	ee18 0a10 	vmov	r0, s16
 23e59d2:	f7fc fdd5 	bl	23e2580 <__aeabi_f2d>
 23e59d6:	2200      	movs	r2, #0
 23e59d8:	4b21      	ldr	r3, [pc, #132]	; (23e5a60 <_Z17si1145_initializev+0x150>)
 23e59da:	f7fc fe29 	bl	23e2630 <__aeabi_dmul>
 23e59de:	f7fd f8d7 	bl	23e2b90 <__aeabi_d2iz>
 23e59e2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 23e59e6:	fb90 f3f4 	sdiv	r3, r0, r4
 23e59ea:	ee17 2a90 	vmov	r2, s15
 23e59ee:	fb03 0314 	mls	r3, r3, r4, r0
 23e59f2:	491f      	ldr	r1, [pc, #124]	; (23e5a70 <_Z17si1145_initializev+0x160>)
 23e59f4:	481d      	ldr	r0, [pc, #116]	; (23e5a6c <_Z17si1145_initializev+0x15c>)
 23e59f6:	f011 fbcf 	bl	23f7198 <sprintf>
    Output (msgbuf);
 23e59fa:	481c      	ldr	r0, [pc, #112]	; (23e5a6c <_Z17si1145_initializev+0x15c>)
 23e59fc:	f7fe fdc4 	bl	23e4588 <_Z6OutputPKc>
    sprintf (msgbuf, "SI:UV[%d.%02d]", (int)si_last_uv, (int)(si_last_uv*100.0)%100); 
 23e5a00:	ed95 8a00 	vldr	s16, [r5]
 23e5a04:	ee18 0a10 	vmov	r0, s16
 23e5a08:	f7fc fdba 	bl	23e2580 <__aeabi_f2d>
 23e5a0c:	2200      	movs	r2, #0
 23e5a0e:	4b14      	ldr	r3, [pc, #80]	; (23e5a60 <_Z17si1145_initializev+0x150>)
 23e5a10:	f7fc fe0e 	bl	23e2630 <__aeabi_dmul>
 23e5a14:	f7fd f8bc 	bl	23e2b90 <__aeabi_d2iz>
 23e5a18:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 23e5a1c:	fb90 f3f4 	sdiv	r3, r0, r4
 23e5a20:	ee17 2a90 	vmov	r2, s15
 23e5a24:	fb03 0314 	mls	r3, r3, r4, r0
 23e5a28:	4912      	ldr	r1, [pc, #72]	; (23e5a74 <_Z17si1145_initializev+0x164>)
 23e5a2a:	4810      	ldr	r0, [pc, #64]	; (23e5a6c <_Z17si1145_initializev+0x15c>)
 23e5a2c:	f011 fbb4 	bl	23f7198 <sprintf>
}
 23e5a30:	ecbd 8b02 	vpop	{d8}
 23e5a34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Output (msgbuf);
 23e5a38:	480c      	ldr	r0, [pc, #48]	; (23e5a6c <_Z17si1145_initializev+0x15c>)
 23e5a3a:	f7fe bda5 	b.w	23e4588 <_Z6OutputPKc>
 23e5a3e:	bf00      	nop
 23e5a40:	023fceb6 	.word	0x023fceb6
 23e5a44:	1007ac08 	.word	0x1007ac08
 23e5a48:	1006a7c6 	.word	0x1006a7c6
 23e5a4c:	023fe416 	.word	0x023fe416
 23e5a50:	1006a168 	.word	0x1006a168
 23e5a54:	023fcec2 	.word	0x023fcec2
 23e5a58:	1007abcc 	.word	0x1007abcc
 23e5a5c:	1007abc4 	.word	0x1007abc4
 23e5a60:	40590000 	.word	0x40590000
 23e5a64:	1007abc8 	.word	0x1007abc8
 23e5a68:	023fcec8 	.word	0x023fcec8
 23e5a6c:	1006f118 	.word	0x1006f118
 23e5a70:	023fced7 	.word	0x023fced7
 23e5a74:	023fcee6 	.word	0x023fcee6

023e5a78 <_Z14vlx_initializev>:
 * 400  lx Sunrise or sunset on a clear day
 * 1000 lx Overcast day; typical TV studio lighting
 * 
 *=======================================================================================================================
 */
void vlx_initialize() {
 23e5a78:	b508      	push	{r3, lr}
  Output("VLX:INIT");
 23e5a7a:	480f      	ldr	r0, [pc, #60]	; (23e5ab8 <_Z14vlx_initializev+0x40>)
 23e5a7c:	f7fe fd84 	bl	23e4588 <_Z6OutputPKc>

  if (veml.begin()) {
 23e5a80:	f013 fed0 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e5a84:	4601      	mov	r1, r0
 23e5a86:	480d      	ldr	r0, [pc, #52]	; (23e5abc <_Z14vlx_initializev+0x44>)
 23e5a88:	f00a ffc3 	bl	23f0a12 <_ZN17Adafruit_VEML77005beginEP7TwoWire>
 23e5a8c:	4a0c      	ldr	r2, [pc, #48]	; (23e5ac0 <_Z14vlx_initializev+0x48>)
 23e5a8e:	4b0d      	ldr	r3, [pc, #52]	; (23e5ac4 <_Z14vlx_initializev+0x4c>)
 23e5a90:	b140      	cbz	r0, 23e5aa4 <_Z14vlx_initializev+0x2c>
    VEML7700_exists = true;
 23e5a92:	2101      	movs	r1, #1
 23e5a94:	7011      	strb	r1, [r2, #0]
    msgp = (char *) "VLX OK";
 23e5a96:	4a0c      	ldr	r2, [pc, #48]	; (23e5ac8 <_Z14vlx_initializev+0x50>)
 23e5a98:	601a      	str	r2, [r3, #0]
  else {
    msgp = (char *) "VLX NF";
    VEML7700_exists = false;
    SystemStatusBits |= SSB_VLX;  // Turn On Bit
  }
  Output (msgp);
 23e5a9a:	6818      	ldr	r0, [r3, #0]
}
 23e5a9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
 23e5aa0:	f7fe bd72 	b.w	23e4588 <_Z6OutputPKc>
    msgp = (char *) "VLX NF";
 23e5aa4:	4909      	ldr	r1, [pc, #36]	; (23e5acc <_Z14vlx_initializev+0x54>)
    VEML7700_exists = false;
 23e5aa6:	7010      	strb	r0, [r2, #0]
    msgp = (char *) "VLX NF";
 23e5aa8:	6019      	str	r1, [r3, #0]
    SystemStatusBits |= SSB_VLX;  // Turn On Bit
 23e5aaa:	4909      	ldr	r1, [pc, #36]	; (23e5ad0 <_Z14vlx_initializev+0x58>)
 23e5aac:	680a      	ldr	r2, [r1, #0]
 23e5aae:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 23e5ab2:	600a      	str	r2, [r1, #0]
 23e5ab4:	e7f1      	b.n	23e5a9a <_Z14vlx_initializev+0x22>
 23e5ab6:	bf00      	nop
 23e5ab8:	023fcef5 	.word	0x023fcef5
 23e5abc:	1007ac10 	.word	0x1007ac10
 23e5ac0:	1006a7d8 	.word	0x1006a7d8
 23e5ac4:	1006f518 	.word	0x1006f518
 23e5ac8:	023fcefe 	.word	0x023fcefe
 23e5acc:	023fcf05 	.word	0x023fcf05
 23e5ad0:	1006a168 	.word	0x1006a168

023e5ad4 <_Z14blx_initializev>:
/* 
 *=======================================================================================================================
 * blx_initialize() - DFRobot_B_LUX_V30B sensor
 *=======================================================================================================================
 */
void blx_initialize() {
 23e5ad4:	b508      	push	{r3, lr}
  Output("BLX:INIT");
 23e5ad6:	480d      	ldr	r0, [pc, #52]	; (23e5b0c <_Z14blx_initializev+0x38>)
 23e5ad8:	f7fe fd56 	bl	23e4588 <_Z6OutputPKc>

  if (I2C_Device_Exist(BLX_ADDRESS)) {
 23e5adc:	204a      	movs	r0, #74	; 0x4a
 23e5ade:	f7fe fb4a 	bl	23e4176 <_Z16I2C_Device_Existh>
 23e5ae2:	4a0b      	ldr	r2, [pc, #44]	; (23e5b10 <_Z14blx_initializev+0x3c>)
 23e5ae4:	4b0b      	ldr	r3, [pc, #44]	; (23e5b14 <_Z14blx_initializev+0x40>)
 23e5ae6:	b140      	cbz	r0, 23e5afa <_Z14blx_initializev+0x26>
    BLX_exists = true;
 23e5ae8:	2101      	movs	r1, #1
 23e5aea:	7011      	strb	r1, [r2, #0]
    msgp = (char *) "BLX:OK";
 23e5aec:	4a0a      	ldr	r2, [pc, #40]	; (23e5b18 <_Z14blx_initializev+0x44>)
 23e5aee:	601a      	str	r2, [r3, #0]
  else {
    BLX_exists = false;
    msgp = (char *) "BLX:NF";
    SystemStatusBits |= SSB_BLX;  // Turn On Bit
  }
  Output (msgp);
 23e5af0:	6818      	ldr	r0, [r3, #0]
}
 23e5af2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
 23e5af6:	f7fe bd47 	b.w	23e4588 <_Z6OutputPKc>
    SystemStatusBits |= SSB_BLX;  // Turn On Bit
 23e5afa:	4908      	ldr	r1, [pc, #32]	; (23e5b1c <_Z14blx_initializev+0x48>)
    BLX_exists = false;
 23e5afc:	7010      	strb	r0, [r2, #0]
    msgp = (char *) "BLX:NF";
 23e5afe:	4a08      	ldr	r2, [pc, #32]	; (23e5b20 <_Z14blx_initializev+0x4c>)
 23e5b00:	601a      	str	r2, [r3, #0]
    SystemStatusBits |= SSB_BLX;  // Turn On Bit
 23e5b02:	680a      	ldr	r2, [r1, #0]
 23e5b04:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 23e5b08:	600a      	str	r2, [r1, #0]
 23e5b0a:	e7f1      	b.n	23e5af0 <_Z14blx_initializev+0x1c>
 23e5b0c:	023fcf0c 	.word	0x023fcf0c
 23e5b10:	1006a270 	.word	0x1006a270
 23e5b14:	1006f518 	.word	0x1006f518
 23e5b18:	023fcf15 	.word	0x023fcf15
 23e5b1c:	1006a168 	.word	0x1006a168
 23e5b20:	023fcf1c 	.word	0x023fcf1c
 23e5b24:	00000000 	.word	0x00000000

023e5b28 <_Z15blx_takereadingv>:
/* 
 *=======================================================================================================================
 * blx_takereading() - DFRobot_B_LUX_V30B sensor reading
 *=======================================================================================================================
 */
float blx_takereading() {
 23e5b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t raw;
  uint8_t data[4]; // Array to hold the 4 bytes of data
  const unsigned long timeout = 1000; // Timeout in milliseconds
  unsigned long startTime;

  Wire.beginTransmission(BLX_ADDRESS);
 23e5b2a:	f013 fe7b 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e5b2e:	214a      	movs	r1, #74	; 0x4a
 23e5b30:	f012 f9dc 	bl	23f7eec <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x00); // Point to the data register address
 23e5b34:	f013 fe76 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e5b38:	2100      	movs	r1, #0
 23e5b3a:	f7fe f983 	bl	23e3e44 <_ZN7TwoWire5writeEi.isra.0>
  Wire.endTransmission(false); // false tells the I2C master to not release the bus between the write and read operations
 23e5b3e:	f013 fe71 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e5b42:	2100      	movs	r1, #0
 23e5b44:	f012 f9d5 	bl	23f7ef2 <_ZN7TwoWire15endTransmissionEh>

  // Request 4 bytes from the device
  Wire.requestFrom(BLX_ADDRESS, 4);
 23e5b48:	f013 fe6c 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e5b4c:	2204      	movs	r2, #4
 23e5b4e:	214a      	movs	r1, #74	; 0x4a
 23e5b50:	f012 f9c5 	bl	23f7ede <_ZN7TwoWire11requestFromEhj>
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23e5b54:	f010 fcac 	bl	23f64b0 <HAL_Timer_Get_Milli_Seconds>
 23e5b58:	4604      	mov	r4, r0

  startTime = millis(); // Record the start time
  while (Wire.available() < 4) { // Wait for all bytes to be received
 23e5b5a:	f013 fe63 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e5b5e:	6803      	ldr	r3, [r0, #0]
 23e5b60:	691b      	ldr	r3, [r3, #16]
 23e5b62:	4798      	blx	r3
 23e5b64:	2803      	cmp	r0, #3
 23e5b66:	dc09      	bgt.n	23e5b7c <_Z15blx_takereadingv+0x54>
 23e5b68:	f010 fca2 	bl	23f64b0 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - startTime > timeout) { // Check if timeout has been reached
 23e5b6c:	1b00      	subs	r0, r0, r4
 23e5b6e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 23e5b72:	d826      	bhi.n	23e5bc2 <_Z15blx_takereadingv+0x9a>
      return -1; // Return error code if timeout occurs
    }
    delay(1); // Short delay to prevent busy-waiting
 23e5b74:	2001      	movs	r0, #1
 23e5b76:	f011 fbef 	bl	23f7358 <delay>
  while (Wire.available() < 4) { // Wait for all bytes to be received
 23e5b7a:	e7ee      	b.n	23e5b5a <_Z15blx_takereadingv+0x32>
  }

  for (int i = 0; i < 4; i++) {
 23e5b7c:	2400      	movs	r4, #0
 23e5b7e:	ad01      	add	r5, sp, #4
    data[i] = Wire.read(); // Read each byte into the array
 23e5b80:	f013 fe50 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e5b84:	6803      	ldr	r3, [r0, #0]
  for (int i = 0; i < 4; i++) {
 23e5b86:	3401      	adds	r4, #1
    data[i] = Wire.read(); // Read each byte into the array
 23e5b88:	695b      	ldr	r3, [r3, #20]
 23e5b8a:	4798      	blx	r3
  for (int i = 0; i < 4; i++) {
 23e5b8c:	2c04      	cmp	r4, #4
    data[i] = Wire.read(); // Read each byte into the array
 23e5b8e:	f805 0b01 	strb.w	r0, [r5], #1
  for (int i = 0; i < 4; i++) {
 23e5b92:	d1f5      	bne.n	23e5b80 <_Z15blx_takereadingv+0x58>
  raw = data[3];
  raw = (raw<<8)|data[2];
  raw = (raw<<8)|data[1];
  raw = (raw<<8)|data[0];

  lux = ((float)raw*1.4) / 1000;  // Is 1.4 scaling multiplier based on the sensor's internal calibration ?
 23e5b94:	eddd 7a01 	vldr	s15, [sp, #4]
 23e5b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23e5b9c:	ee17 0a90 	vmov	r0, s15
 23e5ba0:	f7fc fcee 	bl	23e2580 <__aeabi_f2d>
 23e5ba4:	a309      	add	r3, pc, #36	; (adr r3, 23e5bcc <_Z15blx_takereadingv+0xa4>)
 23e5ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e5baa:	f7fc fd41 	bl	23e2630 <__aeabi_dmul>
 23e5bae:	2200      	movs	r2, #0
 23e5bb0:	4b05      	ldr	r3, [pc, #20]	; (23e5bc8 <_Z15blx_takereadingv+0xa0>)
 23e5bb2:	f7fc fe67 	bl	23e2884 <__aeabi_ddiv>
 23e5bb6:	f7fd f833 	bl	23e2c20 <__aeabi_d2f>
 23e5bba:	ee00 0a10 	vmov	s0, r0
                                    // Is divide by 1000 converting from millilux ?

  // sprintf (msgbuf, "BLUX30 LUX %f RAW %lu\n", lux, raw);
  // Output (msgbuf);
  return(lux);
}
 23e5bbe:	b003      	add	sp, #12
 23e5bc0:	bd30      	pop	{r4, r5, pc}
      return -1; // Return error code if timeout occurs
 23e5bc2:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 23e5bc6:	e7fa      	b.n	23e5bbe <_Z15blx_takereadingv+0x96>
 23e5bc8:	408f4000 	.word	0x408f4000
 23e5bcc:	66666666 	.word	0x66666666
 23e5bd0:	3ff66666 	.word	0x3ff66666

023e5bd4 <_Z13pm25aqi_clearv>:
 *=======================================================================================================================
 * pm25aqi_clear() - clear observation
 *=======================================================================================================================
 */
void pm25aqi_clear() {
  pm25aqi_obs.max_s10 = 0;
 23e5bd4:	2200      	movs	r2, #0
 23e5bd6:	4b04      	ldr	r3, [pc, #16]	; (23e5be8 <_Z13pm25aqi_clearv+0x14>)
 23e5bd8:	801a      	strh	r2, [r3, #0]
  pm25aqi_obs.max_s25 = 0;
 23e5bda:	805a      	strh	r2, [r3, #2]
  pm25aqi_obs.max_s100 = 0;
 23e5bdc:	809a      	strh	r2, [r3, #4]
  pm25aqi_obs.max_e10 = 0;
 23e5bde:	80da      	strh	r2, [r3, #6]
  pm25aqi_obs.max_e25 = 0;
 23e5be0:	811a      	strh	r2, [r3, #8]
  pm25aqi_obs.max_e100 = 0;
 23e5be2:	815a      	strh	r2, [r3, #10]
}
 23e5be4:	4770      	bx	lr
 23e5be6:	bf00      	nop
 23e5be8:	1007aa14 	.word	0x1007aa14

023e5bec <_Z18pm25aqi_initializev>:
/* 
 *=======================================================================================================================
 * pm25aqi_initialize() - air quality sensor
 *=======================================================================================================================
 */
void pm25aqi_initialize() {
 23e5bec:	b538      	push	{r3, r4, r5, lr}
  Output("PM25AQI:INIT");
 23e5bee:	4817      	ldr	r0, [pc, #92]	; (23e5c4c <_Z18pm25aqi_initializev+0x60>)
 23e5bf0:	f7fe fcca 	bl	23e4588 <_Z6OutputPKc>
  Wire.beginTransmission(PM25AQI_ADDRESS);
 23e5bf4:	f013 fe16 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e5bf8:	2112      	movs	r1, #18
 23e5bfa:	f012 f977 	bl	23f7eec <_ZN7TwoWire17beginTransmissionEi>
  if (Wire.endTransmission()) {
 23e5bfe:	f013 fe11 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e5c02:	f012 f97a 	bl	23f7efa <_ZN7TwoWire15endTransmissionEv>
 23e5c06:	4c12      	ldr	r4, [pc, #72]	; (23e5c50 <_Z18pm25aqi_initializev+0x64>)
 23e5c08:	4d12      	ldr	r5, [pc, #72]	; (23e5c54 <_Z18pm25aqi_initializev+0x68>)
 23e5c0a:	b168      	cbz	r0, 23e5c28 <_Z18pm25aqi_initializev+0x3c>
    msgp = (char *) "PM:NF";
 23e5c0c:	4b12      	ldr	r3, [pc, #72]	; (23e5c58 <_Z18pm25aqi_initializev+0x6c>)
    PM25AQI_exists = false;
    SystemStatusBits |= SSB_PM25AQI;  // Turn On Bit
 23e5c0e:	4a13      	ldr	r2, [pc, #76]	; (23e5c5c <_Z18pm25aqi_initializev+0x70>)
    msgp = (char *) "PM:NF";
 23e5c10:	6023      	str	r3, [r4, #0]
    PM25AQI_exists = false;
 23e5c12:	2300      	movs	r3, #0
 23e5c14:	702b      	strb	r3, [r5, #0]
    SystemStatusBits |= SSB_PM25AQI;  // Turn On Bit
 23e5c16:	6813      	ldr	r3, [r2, #0]
 23e5c18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 23e5c1c:	6013      	str	r3, [r2, #0]
      msgp = (char *) "PM:OK";
      PM25AQI_exists = true;
      pm25aqi_clear();
    }
  }
  Output (msgp);
 23e5c1e:	6820      	ldr	r0, [r4, #0]
}
 23e5c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
 23e5c24:	f7fe bcb0 	b.w	23e4588 <_Z6OutputPKc>
    if (! pmaq.begin_I2C()) {      // connect to the sensor over I2C
 23e5c28:	f013 fdfc 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e5c2c:	4601      	mov	r1, r0
 23e5c2e:	480c      	ldr	r0, [pc, #48]	; (23e5c60 <_Z18pm25aqi_initializev+0x74>)
 23e5c30:	f009 fed9 	bl	23ef9e6 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>
 23e5c34:	b918      	cbnz	r0, 23e5c3e <_Z18pm25aqi_initializev+0x52>
      msgp = (char *) "PM:Begin NF";
 23e5c36:	4b0b      	ldr	r3, [pc, #44]	; (23e5c64 <_Z18pm25aqi_initializev+0x78>)
      PM25AQI_exists = false;
 23e5c38:	7028      	strb	r0, [r5, #0]
      msgp = (char *) "PM:Begin NF";
 23e5c3a:	6023      	str	r3, [r4, #0]
      PM25AQI_exists = false;
 23e5c3c:	e7ef      	b.n	23e5c1e <_Z18pm25aqi_initializev+0x32>
      msgp = (char *) "PM:OK";
 23e5c3e:	4b0a      	ldr	r3, [pc, #40]	; (23e5c68 <_Z18pm25aqi_initializev+0x7c>)
 23e5c40:	6023      	str	r3, [r4, #0]
      PM25AQI_exists = true;
 23e5c42:	2301      	movs	r3, #1
 23e5c44:	702b      	strb	r3, [r5, #0]
      pm25aqi_clear();
 23e5c46:	f7ff ffc5 	bl	23e5bd4 <_Z13pm25aqi_clearv>
 23e5c4a:	e7e8      	b.n	23e5c1e <_Z18pm25aqi_initializev+0x32>
 23e5c4c:	023fcf23 	.word	0x023fcf23
 23e5c50:	1006f518 	.word	0x1006f518
 23e5c54:	1006a2bd 	.word	0x1006a2bd
 23e5c58:	023fcf30 	.word	0x023fcf30
 23e5c5c:	1006a168 	.word	0x1006a168
 23e5c60:	1007aa20 	.word	0x1007aa20
 23e5c64:	023fcf36 	.word	0x023fcf36
 23e5c68:	023fcf42 	.word	0x023fcf42

023e5c6c <_Z19pm25aqi_TakeReadingv>:
/* 
 *=======================================================================================================================
 * pm25aqi_TakeReading() - take air quality reading - keep the larger value
 *=======================================================================================================================
 */
void pm25aqi_TakeReading() {
 23e5c6c:	b510      	push	{r4, lr}
  if (PM25AQI_exists) {
 23e5c6e:	4c1d      	ldr	r4, [pc, #116]	; (23e5ce4 <_Z19pm25aqi_TakeReadingv+0x78>)
void pm25aqi_TakeReading() {
 23e5c70:	b088      	sub	sp, #32
  if (PM25AQI_exists) {
 23e5c72:	7823      	ldrb	r3, [r4, #0]
 23e5c74:	b34b      	cbz	r3, 23e5cca <_Z19pm25aqi_TakeReadingv+0x5e>
    PM25_AQI_Data aqid;

    if (pmaq.read(&aqid)) {
 23e5c76:	4669      	mov	r1, sp
 23e5c78:	481b      	ldr	r0, [pc, #108]	; (23e5ce8 <_Z19pm25aqi_TakeReadingv+0x7c>)
 23e5c7a:	f009 feca 	bl	23efa12 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata>
 23e5c7e:	b330      	cbz	r0, 23e5cce <_Z19pm25aqi_TakeReadingv+0x62>
      if (aqid.pm10_standard  > pm25aqi_obs.max_s10)  { pm25aqi_obs.max_s10  = aqid.pm10_standard;  }
 23e5c80:	4b1a      	ldr	r3, [pc, #104]	; (23e5cec <_Z19pm25aqi_TakeReadingv+0x80>)
 23e5c82:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 23e5c86:	8819      	ldrh	r1, [r3, #0]
 23e5c88:	4291      	cmp	r1, r2
 23e5c8a:	bf38      	it	cc
 23e5c8c:	801a      	strhcc	r2, [r3, #0]
      if (aqid.pm25_standard  > pm25aqi_obs.max_s25)  { pm25aqi_obs.max_s25  = aqid.pm25_standard;  }
 23e5c8e:	8859      	ldrh	r1, [r3, #2]
 23e5c90:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 23e5c94:	4291      	cmp	r1, r2
 23e5c96:	bf38      	it	cc
 23e5c98:	805a      	strhcc	r2, [r3, #2]
      if (aqid.pm100_standard > pm25aqi_obs.max_s100) { pm25aqi_obs.max_s100 = aqid.pm100_standard; }
 23e5c9a:	8899      	ldrh	r1, [r3, #4]
 23e5c9c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 23e5ca0:	4291      	cmp	r1, r2
 23e5ca2:	bf38      	it	cc
 23e5ca4:	809a      	strhcc	r2, [r3, #4]

      if (aqid.pm10_env  > pm25aqi_obs.max_e10)  { pm25aqi_obs.max_e10  = aqid.pm10_env;  }
 23e5ca6:	88d9      	ldrh	r1, [r3, #6]
 23e5ca8:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 23e5cac:	4291      	cmp	r1, r2
 23e5cae:	bf38      	it	cc
 23e5cb0:	80da      	strhcc	r2, [r3, #6]
      if (aqid.pm25_env  > pm25aqi_obs.max_e25)  { pm25aqi_obs.max_e25  = aqid.pm25_env;  }
 23e5cb2:	8919      	ldrh	r1, [r3, #8]
 23e5cb4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 23e5cb8:	4291      	cmp	r1, r2
 23e5cba:	bf38      	it	cc
 23e5cbc:	811a      	strhcc	r2, [r3, #8]
      if (aqid.pm100_env > pm25aqi_obs.max_e100) { pm25aqi_obs.max_e100 = aqid.pm100_env; }
 23e5cbe:	8959      	ldrh	r1, [r3, #10]
 23e5cc0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 23e5cc4:	4291      	cmp	r1, r2
 23e5cc6:	d200      	bcs.n	23e5cca <_Z19pm25aqi_TakeReadingv+0x5e>
 23e5cc8:	815a      	strh	r2, [r3, #10]
      SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
      PM25AQI_exists = false;
      Output ("PM OFFLINE");
    }
  }
}
 23e5cca:	b008      	add	sp, #32
 23e5ccc:	bd10      	pop	{r4, pc}
      SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
 23e5cce:	4a08      	ldr	r2, [pc, #32]	; (23e5cf0 <_Z19pm25aqi_TakeReadingv+0x84>)
      PM25AQI_exists = false;
 23e5cd0:	7020      	strb	r0, [r4, #0]
      SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
 23e5cd2:	6813      	ldr	r3, [r2, #0]
      Output ("PM OFFLINE");
 23e5cd4:	4807      	ldr	r0, [pc, #28]	; (23e5cf4 <_Z19pm25aqi_TakeReadingv+0x88>)
      SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
 23e5cd6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 23e5cda:	6013      	str	r3, [r2, #0]
      Output ("PM OFFLINE");
 23e5cdc:	f7fe fc54 	bl	23e4588 <_Z6OutputPKc>
}
 23e5ce0:	e7f3      	b.n	23e5cca <_Z19pm25aqi_TakeReadingv+0x5e>
 23e5ce2:	bf00      	nop
 23e5ce4:	1006a2bd 	.word	0x1006a2bd
 23e5ce8:	1007aa20 	.word	0x1007aa20
 23e5cec:	1007aa14 	.word	0x1007aa14
 23e5cf0:	1006a168 	.word	0x1006a168
 23e5cf4:	023fcf48 	.word	0x023fcf48

023e5cf8 <_Z14hdc_initializev>:
/* 
 *=======================================================================================================================
 * hdc_initialize() - HDC3002c sensor initialize
 *=======================================================================================================================
 */
void hdc_initialize() {
 23e5cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23e5cfa:	b085      	sub	sp, #20
  Output("HDC:INIT");
  
  // 1st HDC I2C Temperature/Humidity Sensor (I2C ADDRESS = 0x44)
  hdc1 = Adafruit_HDC302x();
 23e5cfc:	4e2b      	ldr	r6, [pc, #172]	; (23e5dac <_Z14hdc_initializev+0xb4>)
  Output("HDC:INIT");
 23e5cfe:	482c      	ldr	r0, [pc, #176]	; (23e5db0 <_Z14hdc_initializev+0xb8>)
  hdc1 = Adafruit_HDC302x();
 23e5d00:	ac02      	add	r4, sp, #8
  Output("HDC:INIT");
 23e5d02:	f7fe fc41 	bl	23e4588 <_Z6OutputPKc>
  hdc1 = Adafruit_HDC302x();
 23e5d06:	4620      	mov	r0, r4
 23e5d08:	f009 fabd 	bl	23ef286 <_ZN16Adafruit_HDC302xC1Ev>
 23e5d0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 23e5d10:	80b1      	strh	r1, [r6, #4]
 23e5d12:	6030      	str	r0, [r6, #0]
  if (!hdc1.begin(HDC_ADDRESS_1, &Wire)) {
 23e5d14:	f013 fd86 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e5d18:	2146      	movs	r1, #70	; 0x46
 23e5d1a:	4602      	mov	r2, r0
 23e5d1c:	4630      	mov	r0, r6
 23e5d1e:	f009 fb83 	bl	23ef428 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire>
 23e5d22:	4d24      	ldr	r5, [pc, #144]	; (23e5db4 <_Z14hdc_initializev+0xbc>)
 23e5d24:	4f24      	ldr	r7, [pc, #144]	; (23e5db8 <_Z14hdc_initializev+0xc0>)
 23e5d26:	bb48      	cbnz	r0, 23e5d7c <_Z14hdc_initializev+0x84>
    msgp = (char *) "HDC1 NF";
 23e5d28:	4b24      	ldr	r3, [pc, #144]	; (23e5dbc <_Z14hdc_initializev+0xc4>)
    HDC_1_exists = false;
    SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
 23e5d2a:	4a25      	ldr	r2, [pc, #148]	; (23e5dc0 <_Z14hdc_initializev+0xc8>)
    msgp = (char *) "HDC1 NF";
 23e5d2c:	602b      	str	r3, [r5, #0]
    SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
 23e5d2e:	6813      	ldr	r3, [r2, #0]
    HDC_1_exists = false;
 23e5d30:	7038      	strb	r0, [r7, #0]
    SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
 23e5d32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23e5d36:	6013      	str	r3, [r2, #0]
    msgp = (char *) "HDC1 OK";
  }
  Output (msgp);

  // 2nd HDC I2C Temperature/Humidity Sensor (I2C ADDRESS = 0x45)
  hdc2 = Adafruit_HDC302x();
 23e5d38:	4e22      	ldr	r6, [pc, #136]	; (23e5dc4 <_Z14hdc_initializev+0xcc>)
  Output (msgp);
 23e5d3a:	6828      	ldr	r0, [r5, #0]
 23e5d3c:	f7fe fc24 	bl	23e4588 <_Z6OutputPKc>
  hdc2 = Adafruit_HDC302x();
 23e5d40:	4620      	mov	r0, r4
 23e5d42:	f009 faa0 	bl	23ef286 <_ZN16Adafruit_HDC302xC1Ev>
 23e5d46:	e894 0003 	ldmia.w	r4, {r0, r1}
 23e5d4a:	80b1      	strh	r1, [r6, #4]
 23e5d4c:	6030      	str	r0, [r6, #0]
  if (!hdc2.begin(HDC_ADDRESS_2, &Wire)) {
 23e5d4e:	f013 fd69 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e5d52:	2147      	movs	r1, #71	; 0x47
 23e5d54:	4602      	mov	r2, r0
 23e5d56:	4630      	mov	r0, r6
 23e5d58:	f009 fb66 	bl	23ef428 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire>
 23e5d5c:	4f1a      	ldr	r7, [pc, #104]	; (23e5dc8 <_Z14hdc_initializev+0xd0>)
 23e5d5e:	b9c8      	cbnz	r0, 23e5d94 <_Z14hdc_initializev+0x9c>
    msgp = (char *) "HDC2 NF";
 23e5d60:	4b1a      	ldr	r3, [pc, #104]	; (23e5dcc <_Z14hdc_initializev+0xd4>)
    HDC_2_exists = false;
    SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
 23e5d62:	4a17      	ldr	r2, [pc, #92]	; (23e5dc0 <_Z14hdc_initializev+0xc8>)
    msgp = (char *) "HDC2 NF";
 23e5d64:	602b      	str	r3, [r5, #0]
    SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
 23e5d66:	6813      	ldr	r3, [r2, #0]
    HDC_2_exists = false;
 23e5d68:	7038      	strb	r0, [r7, #0]
    SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
 23e5d6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 23e5d6e:	6013      	str	r3, [r2, #0]
    double t,h;
    hdc2.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0);
    HDC_2_exists = true;
    msgp = (char *) "HDC2 OK";
  }
  Output (msgp);
 23e5d70:	6828      	ldr	r0, [r5, #0]
}
 23e5d72:	b005      	add	sp, #20
 23e5d74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  Output (msgp);
 23e5d78:	f7fe bc06 	b.w	23e4588 <_Z6OutputPKc>
    hdc1.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0);
 23e5d7c:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 23e5d80:	4622      	mov	r2, r4
 23e5d82:	4669      	mov	r1, sp
 23e5d84:	4630      	mov	r0, r6
 23e5d86:	f009 fb1f 	bl	23ef3c8 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>
    HDC_1_exists = true;
 23e5d8a:	2301      	movs	r3, #1
 23e5d8c:	703b      	strb	r3, [r7, #0]
    msgp = (char *) "HDC1 OK";
 23e5d8e:	4b10      	ldr	r3, [pc, #64]	; (23e5dd0 <_Z14hdc_initializev+0xd8>)
 23e5d90:	602b      	str	r3, [r5, #0]
 23e5d92:	e7d1      	b.n	23e5d38 <_Z14hdc_initializev+0x40>
    hdc2.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0);
 23e5d94:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 23e5d98:	4622      	mov	r2, r4
 23e5d9a:	4669      	mov	r1, sp
 23e5d9c:	4630      	mov	r0, r6
 23e5d9e:	f009 fb13 	bl	23ef3c8 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>
    HDC_2_exists = true;
 23e5da2:	2301      	movs	r3, #1
 23e5da4:	703b      	strb	r3, [r7, #0]
    msgp = (char *) "HDC2 OK";
 23e5da6:	4b0b      	ldr	r3, [pc, #44]	; (23e5dd4 <_Z14hdc_initializev+0xdc>)
 23e5da8:	602b      	str	r3, [r5, #0]
 23e5daa:	e7e1      	b.n	23e5d70 <_Z14hdc_initializev+0x78>
 23e5dac:	1006ae70 	.word	0x1006ae70
 23e5db0:	023fcf53 	.word	0x023fcf53
 23e5db4:	1006f518 	.word	0x1006f518
 23e5db8:	1006a29c 	.word	0x1006a29c
 23e5dbc:	023fcf5c 	.word	0x023fcf5c
 23e5dc0:	1006a168 	.word	0x1006a168
 23e5dc4:	1006ae78 	.word	0x1006ae78
 23e5dc8:	1006a29d 	.word	0x1006a29d
 23e5dcc:	023fcf6c 	.word	0x023fcf6c
 23e5dd0:	023fcf64 	.word	0x023fcf64
 23e5dd4:	023fcf74 	.word	0x023fcf74

023e5dd8 <_Z14lps_initializev>:
/* 
 *=======================================================================================================================
 * lps_initialize() - LPS35HW Pressure and Temperature initialize
 *=======================================================================================================================
 */
void lps_initialize() {
 23e5dd8:	b570      	push	{r4, r5, r6, lr}
  Output("LPS:INIT");
 23e5dda:	4831      	ldr	r0, [pc, #196]	; (23e5ea0 <_Z14lps_initializev+0xc8>)
void lps_initialize() {
 23e5ddc:	b088      	sub	sp, #32
  
  // 1st LPS I2C Pressure/Temperature Sensor (I2C ADDRESS = 0x5D)
  lps1 = Adafruit_LPS35HW();
 23e5dde:	4c31      	ldr	r4, [pc, #196]	; (23e5ea4 <_Z14lps_initializev+0xcc>)
  Output("LPS:INIT");
 23e5de0:	f7fe fbd2 	bl	23e4588 <_Z6OutputPKc>
  lps1 = Adafruit_LPS35HW();
 23e5de4:	ad01      	add	r5, sp, #4
 23e5de6:	a801      	add	r0, sp, #4
 23e5de8:	f009 fc1e 	bl	23ef628 <_ZN16Adafruit_LPS35HWC1Ev>
 23e5dec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23e5dee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23e5df0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 23e5df4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  if (!lps1.begin_I2C(LPS_ADDRESS_1, &Wire)) {
 23e5df8:	f013 fd14 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e5dfc:	215d      	movs	r1, #93	; 0x5d
 23e5dfe:	4602      	mov	r2, r0
 23e5e00:	f1a4 0010 	sub.w	r0, r4, #16
 23e5e04:	f009 fcfd 	bl	23ef802 <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire>
 23e5e08:	4e27      	ldr	r6, [pc, #156]	; (23e5ea8 <_Z14lps_initializev+0xd0>)
 23e5e0a:	4d28      	ldr	r5, [pc, #160]	; (23e5eac <_Z14lps_initializev+0xd4>)
 23e5e0c:	2800      	cmp	r0, #0
 23e5e0e:	d12d      	bne.n	23e5e6c <_Z14lps_initializev+0x94>
    msgp = (char *) "LPS1 NF";
 23e5e10:	4b27      	ldr	r3, [pc, #156]	; (23e5eb0 <_Z14lps_initializev+0xd8>)
    LPS_1_exists = false;
    SystemStatusBits |= SSB_LPS_1;  // Turn On Bit
 23e5e12:	4a28      	ldr	r2, [pc, #160]	; (23e5eb4 <_Z14lps_initializev+0xdc>)
    msgp = (char *) "LPS1 NF";
 23e5e14:	6033      	str	r3, [r6, #0]
    SystemStatusBits |= SSB_LPS_1;  // Turn On Bit
 23e5e16:	6813      	ldr	r3, [r2, #0]
    LPS_1_exists = false;
 23e5e18:	7028      	strb	r0, [r5, #0]
    SystemStatusBits |= SSB_LPS_1;  // Turn On Bit
 23e5e1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 23e5e1e:	6013      	str	r3, [r2, #0]
    t = lps1.readTemperature();
    p = lps1.readPressure();
    LPS_1_exists = true;
    msgp = (char *) "LPS1 OK";
  }
  Output (msgp);
 23e5e20:	6830      	ldr	r0, [r6, #0]

  // 2nd LPS I2C Pressure/Temperature Sensor (I2C ADDRESS = 0x5C)
  lps2 = Adafruit_LPS35HW();
 23e5e22:	4d25      	ldr	r5, [pc, #148]	; (23e5eb8 <_Z14lps_initializev+0xe0>)
  Output (msgp);
 23e5e24:	f7fe fbb0 	bl	23e4588 <_Z6OutputPKc>
  lps2 = Adafruit_LPS35HW();
 23e5e28:	ac01      	add	r4, sp, #4
 23e5e2a:	a801      	add	r0, sp, #4
 23e5e2c:	f009 fbfc 	bl	23ef628 <_ZN16Adafruit_LPS35HWC1Ev>
 23e5e30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23e5e32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23e5e34:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 23e5e38:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (!lps2.begin_I2C(LPS_ADDRESS_2, &Wire)) {
 23e5e3c:	f013 fcf2 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e5e40:	215c      	movs	r1, #92	; 0x5c
 23e5e42:	4602      	mov	r2, r0
 23e5e44:	f1a5 0010 	sub.w	r0, r5, #16
 23e5e48:	f009 fcdb 	bl	23ef802 <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire>
 23e5e4c:	4c1b      	ldr	r4, [pc, #108]	; (23e5ebc <_Z14lps_initializev+0xe4>)
 23e5e4e:	b9d0      	cbnz	r0, 23e5e86 <_Z14lps_initializev+0xae>
    msgp = (char *) "LPS2 NF";
 23e5e50:	4b1b      	ldr	r3, [pc, #108]	; (23e5ec0 <_Z14lps_initializev+0xe8>)
    LPS_2_exists = false;
    SystemStatusBits |= SSB_LPS_2;  // Turn On Bit
 23e5e52:	4a18      	ldr	r2, [pc, #96]	; (23e5eb4 <_Z14lps_initializev+0xdc>)
    msgp = (char *) "LPS2 NF";
 23e5e54:	6033      	str	r3, [r6, #0]
    SystemStatusBits |= SSB_LPS_2;  // Turn On Bit
 23e5e56:	6813      	ldr	r3, [r2, #0]
    LPS_2_exists = false;
 23e5e58:	7020      	strb	r0, [r4, #0]
    SystemStatusBits |= SSB_LPS_2;  // Turn On Bit
 23e5e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 23e5e5e:	6013      	str	r3, [r2, #0]
    t = lps2.readTemperature();
    p = lps2.readPressure();
    LPS_2_exists = true;
    msgp = (char *) "LPS2 OK";
  }
  Output (msgp);
 23e5e60:	6830      	ldr	r0, [r6, #0]
}
 23e5e62:	b008      	add	sp, #32
 23e5e64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Output (msgp);
 23e5e68:	f7fe bb8e 	b.w	23e4588 <_Z6OutputPKc>
    t = lps1.readTemperature();
 23e5e6c:	f1a4 0010 	sub.w	r0, r4, #16
 23e5e70:	f009 fbf2 	bl	23ef658 <_ZN16Adafruit_LPS35HW15readTemperatureEv>
    p = lps1.readPressure();
 23e5e74:	f1a4 0010 	sub.w	r0, r4, #16
 23e5e78:	f009 fc10 	bl	23ef69c <_ZN16Adafruit_LPS35HW12readPressureEv>
    LPS_1_exists = true;
 23e5e7c:	2301      	movs	r3, #1
 23e5e7e:	702b      	strb	r3, [r5, #0]
    msgp = (char *) "LPS1 OK";
 23e5e80:	4b10      	ldr	r3, [pc, #64]	; (23e5ec4 <_Z14lps_initializev+0xec>)
 23e5e82:	6033      	str	r3, [r6, #0]
 23e5e84:	e7cc      	b.n	23e5e20 <_Z14lps_initializev+0x48>
    t = lps2.readTemperature();
 23e5e86:	f1a5 0010 	sub.w	r0, r5, #16
 23e5e8a:	f009 fbe5 	bl	23ef658 <_ZN16Adafruit_LPS35HW15readTemperatureEv>
    p = lps2.readPressure();
 23e5e8e:	f1a5 0010 	sub.w	r0, r5, #16
 23e5e92:	f009 fc03 	bl	23ef69c <_ZN16Adafruit_LPS35HW12readPressureEv>
    LPS_2_exists = true;
 23e5e96:	2301      	movs	r3, #1
 23e5e98:	7023      	strb	r3, [r4, #0]
    msgp = (char *) "LPS2 OK";
 23e5e9a:	4b0b      	ldr	r3, [pc, #44]	; (23e5ec8 <_Z14lps_initializev+0xf0>)
 23e5e9c:	6033      	str	r3, [r6, #0]
 23e5e9e:	e7df      	b.n	23e5e60 <_Z14lps_initializev+0x88>
 23e5ea0:	023fcf7c 	.word	0x023fcf7c
 23e5ea4:	1006f0b0 	.word	0x1006f0b0
 23e5ea8:	1006f518 	.word	0x1006f518
 23e5eac:	1006a2a2 	.word	0x1006a2a2
 23e5eb0:	023fcf85 	.word	0x023fcf85
 23e5eb4:	1006a168 	.word	0x1006a168
 23e5eb8:	1006f0cc 	.word	0x1006f0cc
 23e5ebc:	1006a2a3 	.word	0x1006a2a3
 23e5ec0:	023fcf95 	.word	0x023fcf95
 23e5ec4:	023fcf8d 	.word	0x023fcf8d
 23e5ec8:	023fcf9d 	.word	0x023fcf9d

023e5ecc <_Z14tlw_initializev>:
/* 
 *=======================================================================================================================
 * tlw_initialize() -  Tinovi Leaf Wetness initialize
 *=======================================================================================================================
 */
void tlw_initialize() {
 23e5ecc:	b538      	push	{r3, r4, r5, lr}
  Output("TLW:INIT");
 23e5ece:	480f      	ldr	r0, [pc, #60]	; (23e5f0c <_Z14tlw_initializev+0x40>)
 23e5ed0:	f7fe fb5a 	bl	23e4588 <_Z6OutputPKc>
  
  // Tinovi Leaf Wetness initialize (I2C ADDRESS = 0x61)
  if (!I2C_Device_Exist(TLW_ADDRESS)) { 
 23e5ed4:	2061      	movs	r0, #97	; 0x61
 23e5ed6:	f7fe f94e 	bl	23e4176 <_Z16I2C_Device_Existh>
 23e5eda:	4c0d      	ldr	r4, [pc, #52]	; (23e5f10 <_Z14tlw_initializev+0x44>)
 23e5edc:	4d0d      	ldr	r5, [pc, #52]	; (23e5f14 <_Z14tlw_initializev+0x48>)
 23e5ede:	b938      	cbnz	r0, 23e5ef0 <_Z14tlw_initializev+0x24>
    msgp = (char *) "TLW NF";
 23e5ee0:	4b0d      	ldr	r3, [pc, #52]	; (23e5f18 <_Z14tlw_initializev+0x4c>)
    TLW_exists = false;
 23e5ee2:	7028      	strb	r0, [r5, #0]
    msgp = (char *) "TLW NF";
 23e5ee4:	6023      	str	r3, [r4, #0]
    tlw.init(TLW_ADDRESS);
    msgp = (char *) "TLW OK";
    TLW_exists = true;
    SystemStatusBits |= SSB_TLW;  // Turn On Bit
  }
  Output (msgp);
 23e5ee6:	6820      	ldr	r0, [r4, #0]
}
 23e5ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
 23e5eec:	f7fe bb4c 	b.w	23e4588 <_Z6OutputPKc>
    tlw.init(TLW_ADDRESS);
 23e5ef0:	2161      	movs	r1, #97	; 0x61
 23e5ef2:	480a      	ldr	r0, [pc, #40]	; (23e5f1c <_Z14tlw_initializev+0x50>)
 23e5ef4:	f00a ffa8 	bl	23f0e48 <_ZN8LeafSens4initEh>
    msgp = (char *) "TLW OK";
 23e5ef8:	4b09      	ldr	r3, [pc, #36]	; (23e5f20 <_Z14tlw_initializev+0x54>)
    SystemStatusBits |= SSB_TLW;  // Turn On Bit
 23e5efa:	4a0a      	ldr	r2, [pc, #40]	; (23e5f24 <_Z14tlw_initializev+0x58>)
    msgp = (char *) "TLW OK";
 23e5efc:	6023      	str	r3, [r4, #0]
    TLW_exists = true;
 23e5efe:	2301      	movs	r3, #1
 23e5f00:	702b      	strb	r3, [r5, #0]
    SystemStatusBits |= SSB_TLW;  // Turn On Bit
 23e5f02:	6813      	ldr	r3, [r2, #0]
 23e5f04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 23e5f08:	6013      	str	r3, [r2, #0]
 23e5f0a:	e7ec      	b.n	23e5ee6 <_Z14tlw_initializev+0x1a>
 23e5f0c:	023fcfa5 	.word	0x023fcfa5
 23e5f10:	1006f518 	.word	0x1006f518
 23e5f14:	1006a7d4 	.word	0x1006a7d4
 23e5f18:	023fcfae 	.word	0x023fcfae
 23e5f1c:	1007abf0 	.word	0x1007abf0
 23e5f20:	023fcfb5 	.word	0x023fcfb5
 23e5f24:	1006a168 	.word	0x1006a168

023e5f28 <_Z14tsm_initializev>:
/* 
 *=======================================================================================================================
 * tsm_initialize() -  Tinovi Soil Moisture initialize
 *=======================================================================================================================
 */
void tsm_initialize() {
 23e5f28:	b538      	push	{r3, r4, r5, lr}
  Output("TSM:INIT");
 23e5f2a:	480f      	ldr	r0, [pc, #60]	; (23e5f68 <_Z14tsm_initializev+0x40>)
 23e5f2c:	f7fe fb2c 	bl	23e4588 <_Z6OutputPKc>
  
  // Tinovi Soil Moisture initialize (I2C ADDRESS = 0x63)
  if (!I2C_Device_Exist(TSM_ADDRESS)) { 
 23e5f30:	2063      	movs	r0, #99	; 0x63
 23e5f32:	f7fe f920 	bl	23e4176 <_Z16I2C_Device_Existh>
 23e5f36:	4c0d      	ldr	r4, [pc, #52]	; (23e5f6c <_Z14tsm_initializev+0x44>)
 23e5f38:	4d0d      	ldr	r5, [pc, #52]	; (23e5f70 <_Z14tsm_initializev+0x48>)
 23e5f3a:	b938      	cbnz	r0, 23e5f4c <_Z14tsm_initializev+0x24>
    msgp = (char *) "TSM NF";
 23e5f3c:	4b0d      	ldr	r3, [pc, #52]	; (23e5f74 <_Z14tsm_initializev+0x4c>)
    TSM_exists = false;
 23e5f3e:	7028      	strb	r0, [r5, #0]
    msgp = (char *) "TSM NF";
 23e5f40:	6023      	str	r3, [r4, #0]
    tsm.init(TSM_ADDRESS);
    msgp = (char *) "TSM OK";
    TSM_exists = true;
    SystemStatusBits |= SSB_TSM;  // Turn On Bit
  }
  Output (msgp);
 23e5f42:	6820      	ldr	r0, [r4, #0]
}
 23e5f44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
 23e5f48:	f7fe bb1e 	b.w	23e4588 <_Z6OutputPKc>
    tsm.init(TSM_ADDRESS);
 23e5f4c:	2163      	movs	r1, #99	; 0x63
 23e5f4e:	480a      	ldr	r0, [pc, #40]	; (23e5f78 <_Z14tsm_initializev+0x50>)
 23e5f50:	f00d f815 	bl	23f2f7e <_ZN5SVCS34initEi>
    msgp = (char *) "TSM OK";
 23e5f54:	4b09      	ldr	r3, [pc, #36]	; (23e5f7c <_Z14tsm_initializev+0x54>)
    SystemStatusBits |= SSB_TSM;  // Turn On Bit
 23e5f56:	4a0a      	ldr	r2, [pc, #40]	; (23e5f80 <_Z14tsm_initializev+0x58>)
    msgp = (char *) "TSM OK";
 23e5f58:	6023      	str	r3, [r4, #0]
    TSM_exists = true;
 23e5f5a:	2301      	movs	r3, #1
 23e5f5c:	702b      	strb	r3, [r5, #0]
    SystemStatusBits |= SSB_TSM;  // Turn On Bit
 23e5f5e:	6813      	ldr	r3, [r2, #0]
 23e5f60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 23e5f64:	6013      	str	r3, [r2, #0]
 23e5f66:	e7ec      	b.n	23e5f42 <_Z14tsm_initializev+0x1a>
 23e5f68:	023fcfbc 	.word	0x023fcfbc
 23e5f6c:	1006f518 	.word	0x1006f518
 23e5f70:	1006a7d6 	.word	0x1006a7d6
 23e5f74:	023fcfc5 	.word	0x023fcfc5
 23e5f78:	1007ac00 	.word	0x1007ac00
 23e5f7c:	023fcfcc 	.word	0x023fcfcc
 23e5f80:	1006a168 	.word	0x1006a168

023e5f84 <_Z15tmsm_initializev>:
/* 
 *=======================================================================================================================
 * tmsm_initialize() -  Tinovi MultiLevel Soil Moisture initialize
 *=======================================================================================================================
 */
void tmsm_initialize() {
 23e5f84:	b538      	push	{r3, r4, r5, lr}
  Output("TMSM:INIT");
 23e5f86:	480f      	ldr	r0, [pc, #60]	; (23e5fc4 <_Z15tmsm_initializev+0x40>)
 23e5f88:	f7fe fafe 	bl	23e4588 <_Z6OutputPKc>
  
  // Tinovi MultiLevel Soil Moisture initialize (I2C ADDRESS = 0x65)
  if (!I2C_Device_Exist(TMSM_ADDRESS)) { 
 23e5f8c:	2065      	movs	r0, #101	; 0x65
 23e5f8e:	f7fe f8f2 	bl	23e4176 <_Z16I2C_Device_Existh>
 23e5f92:	4c0d      	ldr	r4, [pc, #52]	; (23e5fc8 <_Z15tmsm_initializev+0x44>)
 23e5f94:	4d0d      	ldr	r5, [pc, #52]	; (23e5fcc <_Z15tmsm_initializev+0x48>)
 23e5f96:	b938      	cbnz	r0, 23e5fa8 <_Z15tmsm_initializev+0x24>
    msgp = (char *) "TMSM NF";
 23e5f98:	4b0d      	ldr	r3, [pc, #52]	; (23e5fd0 <_Z15tmsm_initializev+0x4c>)
    TMSM_exists = false;
 23e5f9a:	7028      	strb	r0, [r5, #0]
    msgp = (char *) "TMSM NF";
 23e5f9c:	6023      	str	r3, [r4, #0]
    tmsm.init(TMSM_ADDRESS);
    msgp = (char *) "TMSM OK";
    TMSM_exists = true;
    SystemStatusBits |= SSB_TMSM;  // Turn On Bit
  }
  Output (msgp);
 23e5f9e:	6820      	ldr	r0, [r4, #0]
}
 23e5fa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
 23e5fa4:	f7fe baf0 	b.w	23e4588 <_Z6OutputPKc>
    tmsm.init(TMSM_ADDRESS);
 23e5fa8:	2165      	movs	r1, #101	; 0x65
 23e5faa:	480a      	ldr	r0, [pc, #40]	; (23e5fd4 <_Z15tmsm_initializev+0x50>)
 23e5fac:	f00d f8ad 	bl	23f310a <_ZN7SVMULTI4initEi>
    msgp = (char *) "TMSM OK";
 23e5fb0:	4b09      	ldr	r3, [pc, #36]	; (23e5fd8 <_Z15tmsm_initializev+0x54>)
    SystemStatusBits |= SSB_TMSM;  // Turn On Bit
 23e5fb2:	4a0a      	ldr	r2, [pc, #40]	; (23e5fdc <_Z15tmsm_initializev+0x58>)
    msgp = (char *) "TMSM OK";
 23e5fb4:	6023      	str	r3, [r4, #0]
    TMSM_exists = true;
 23e5fb6:	2301      	movs	r3, #1
 23e5fb8:	702b      	strb	r3, [r5, #0]
    SystemStatusBits |= SSB_TMSM;  // Turn On Bit
 23e5fba:	6813      	ldr	r3, [r2, #0]
 23e5fbc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 23e5fc0:	6013      	str	r3, [r2, #0]
 23e5fc2:	e7ec      	b.n	23e5f9e <_Z15tmsm_initializev+0x1a>
 23e5fc4:	023fcfd3 	.word	0x023fcfd3
 23e5fc8:	1006f518 	.word	0x1006f518
 23e5fcc:	1006a7d5 	.word	0x1006a7d5
 23e5fd0:	023fcfdd 	.word	0x023fcfdd
 23e5fd4:	1007abf8 	.word	0x1007abf8
 23e5fd8:	023fcfe5 	.word	0x023fcfe5
 23e5fdc:	1006a168 	.word	0x1006a168

023e5fe0 <_Z14ptms_readtempcv>:
/*
 * ======================================================================================================================
 *  ptms_readtempc() - Read Particle Muon on board temperature sensor (TMP112A) Celsius
 * ======================================================================================================================
 */
float ptms_readtempc() {
 23e5fe0:	b510      	push	{r4, lr}
  unsigned data[2] = {0, 0};
  Wire.beginTransmission(0x48);
 23e5fe2:	f013 fc1f 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e5fe6:	2148      	movs	r1, #72	; 0x48
 23e5fe8:	f011 ff80 	bl	23f7eec <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x00);  // Select temperature register
 23e5fec:	f013 fc1a 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e5ff0:	2100      	movs	r1, #0
 23e5ff2:	f7fd ff27 	bl	23e3e44 <_ZN7TwoWire5writeEi.isra.0>
  Wire.endTransmission();
 23e5ff6:	f013 fc15 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e5ffa:	f011 ff7e 	bl	23f7efa <_ZN7TwoWire15endTransmissionEv>
  delay(300);
 23e5ffe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 23e6002:	f011 f9a9 	bl	23f7358 <delay>
  Wire.requestFrom(0x48, 2);
 23e6006:	f013 fc0d 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e600a:	2202      	movs	r2, #2
 23e600c:	2148      	movs	r1, #72	; 0x48
 23e600e:	f011 ff66 	bl	23f7ede <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() == 2) {
 23e6012:	f013 fc07 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e6016:	6803      	ldr	r3, [r0, #0]
 23e6018:	691b      	ldr	r3, [r3, #16]
 23e601a:	4798      	blx	r3
 23e601c:	2802      	cmp	r0, #2
 23e601e:	d11e      	bne.n	23e605e <_Z14ptms_readtempcv+0x7e>
    data[0] = Wire.read();
 23e6020:	f013 fc00 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e6024:	6803      	ldr	r3, [r0, #0]
 23e6026:	695b      	ldr	r3, [r3, #20]
 23e6028:	4798      	blx	r3
 23e602a:	4604      	mov	r4, r0
    data[1] = Wire.read();
 23e602c:	f013 fbfa 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e6030:	6803      	ldr	r3, [r0, #0]
 23e6032:	695b      	ldr	r3, [r3, #20]
 23e6034:	4798      	blx	r3
    int temp = ((data[0] << 8) + data[1]) >> 4;
 23e6036:	eb00 2304 	add.w	r3, r0, r4, lsl #8
    if (temp > 2047) {
 23e603a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    int temp = ((data[0] << 8) + data[1]) >> 4;
 23e603e:	ea4f 1013 	mov.w	r0, r3, lsr #4
        temp -= 4096;
 23e6042:	bf28      	it	cs
 23e6044:	f5a0 5080 	subcs.w	r0, r0, #4096	; 0x1000
    }
    float cTemp = temp * 0.0625;      // Celsius
 23e6048:	f7fc fa88 	bl	23e255c <__aeabi_i2d>
 23e604c:	2200      	movs	r2, #0
 23e604e:	4b05      	ldr	r3, [pc, #20]	; (23e6064 <_Z14ptms_readtempcv+0x84>)
 23e6050:	f7fc faee 	bl	23e2630 <__aeabi_dmul>
 23e6054:	f7fc fde4 	bl	23e2c20 <__aeabi_d2f>
 23e6058:	ee00 0a10 	vmov	s0, r0
    //float fTemp = cTemp * 1.8 + 32; // Fahrenheit
    return (cTemp);
  }
  return (-999.99);
}
 23e605c:	bd10      	pop	{r4, pc}
  return (-999.99);
 23e605e:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23e6068 <_Z14ptms_readtempcv+0x88>
 23e6062:	e7fb      	b.n	23e605c <_Z14ptms_readtempcv+0x7c>
 23e6064:	3fb00000 	.word	0x3fb00000
 23e6068:	c479ff5c 	.word	0xc479ff5c
 23e606c:	00000000 	.word	0x00000000

023e6070 <_Z15pmts_initializev>:
/*
 * ======================================================================================================================
 *  pmts_initialize() - Initialize Particle Muon on board temperature sensor (TMP112A)
 * ======================================================================================================================
 */
void pmts_initialize() {
 23e6070:	b538      	push	{r3, r4, r5, lr}
  Output("PMTS:INIT");
 23e6072:	481f      	ldr	r0, [pc, #124]	; (23e60f0 <_Z15pmts_initializev+0x80>)
void pmts_initialize() {
 23e6074:	ed2d 8b02 	vpush	{d8}
  Output("PMTS:INIT");
 23e6078:	f7fe fa86 	bl	23e4588 <_Z6OutputPKc>
  float t = ptms_readtempc();
 23e607c:	f7ff ffb0 	bl	23e5fe0 <_Z14ptms_readtempcv>

  if (t == -999.99) {
 23e6080:	ee10 0a10 	vmov	r0, s0
  float t = ptms_readtempc();
 23e6084:	eeb0 8a40 	vmov.f32	s16, s0
  if (t == -999.99) {
 23e6088:	f7fc fa7a 	bl	23e2580 <__aeabi_f2d>
 23e608c:	a316      	add	r3, pc, #88	; (adr r3, 23e60e8 <_Z15pmts_initializev+0x78>)
 23e608e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e6092:	4604      	mov	r4, r0
 23e6094:	460d      	mov	r5, r1
 23e6096:	f7fc fd33 	bl	23e2b00 <__aeabi_dcmpeq>
 23e609a:	4b16      	ldr	r3, [pc, #88]	; (23e60f4 <_Z15pmts_initializev+0x84>)
 23e609c:	b140      	cbz	r0, 23e60b0 <_Z15pmts_initializev+0x40>
    PMTS_exists = false;
 23e609e:	2200      	movs	r2, #0
    Output ("PMTS NF");
 23e60a0:	4815      	ldr	r0, [pc, #84]	; (23e60f8 <_Z15pmts_initializev+0x88>)
    PMTS_exists = false;
 23e60a2:	701a      	strb	r2, [r3, #0]
  else {
    PMTS_exists = true;
    sprintf (msgbuf, "PMTS OK T=%d.%02d", (int)t, (int)(t*100.0)%100);
    Output (msgbuf);
  }
}
 23e60a4:	ecbd 8b02 	vpop	{d8}
 23e60a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Output (msgbuf);
 23e60ac:	f7fe ba6c 	b.w	23e4588 <_Z6OutputPKc>
    PMTS_exists = true;
 23e60b0:	2201      	movs	r2, #1
    sprintf (msgbuf, "PMTS OK T=%d.%02d", (int)t, (int)(t*100.0)%100);
 23e60b2:	4620      	mov	r0, r4
    PMTS_exists = true;
 23e60b4:	701a      	strb	r2, [r3, #0]
    sprintf (msgbuf, "PMTS OK T=%d.%02d", (int)t, (int)(t*100.0)%100);
 23e60b6:	4629      	mov	r1, r5
 23e60b8:	2200      	movs	r2, #0
 23e60ba:	4b10      	ldr	r3, [pc, #64]	; (23e60fc <_Z15pmts_initializev+0x8c>)
 23e60bc:	f7fc fab8 	bl	23e2630 <__aeabi_dmul>
 23e60c0:	f7fc fd66 	bl	23e2b90 <__aeabi_d2iz>
 23e60c4:	2264      	movs	r2, #100	; 0x64
 23e60c6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 23e60ca:	fb90 f3f2 	sdiv	r3, r0, r2
 23e60ce:	490c      	ldr	r1, [pc, #48]	; (23e6100 <_Z15pmts_initializev+0x90>)
 23e60d0:	fb03 0312 	mls	r3, r3, r2, r0
 23e60d4:	ee17 2a90 	vmov	r2, s15
 23e60d8:	480a      	ldr	r0, [pc, #40]	; (23e6104 <_Z15pmts_initializev+0x94>)
 23e60da:	f011 f85d 	bl	23f7198 <sprintf>
    Output (msgbuf);
 23e60de:	4809      	ldr	r0, [pc, #36]	; (23e6104 <_Z15pmts_initializev+0x94>)
 23e60e0:	e7e0      	b.n	23e60a4 <_Z15pmts_initializev+0x34>
 23e60e2:	bf00      	nop
 23e60e4:	f3af 8000 	nop.w
 23e60e8:	851eb852 	.word	0x851eb852
 23e60ec:	c08f3feb 	.word	0xc08f3feb
 23e60f0:	023fcfed 	.word	0x023fcfed
 23e60f4:	1006a2be 	.word	0x1006a2be
 23e60f8:	023fcff7 	.word	0x023fcff7
 23e60fc:	40590000 	.word	0x40590000
 23e6100:	023fcfff 	.word	0x023fcfff
 23e6104:	1006f118 	.word	0x1006f118

023e6108 <_Z17as5600_initializev>:
/* 
 *=======================================================================================================================
 * as5600_initialize() - wind direction sensor I2C 0x36
 *=======================================================================================================================
 */
void as5600_initialize() {
 23e6108:	b508      	push	{r3, lr}
  Output("AS5600:INIT");
 23e610a:	4810      	ldr	r0, [pc, #64]	; (23e614c <_Z17as5600_initializev+0x44>)
 23e610c:	f7fe fa3c 	bl	23e4588 <_Z6OutputPKc>
  Wire.beginTransmission(AS5600_ADR);
 23e6110:	f013 fb88 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e6114:	4b0e      	ldr	r3, [pc, #56]	; (23e6150 <_Z17as5600_initializev+0x48>)
 23e6116:	6819      	ldr	r1, [r3, #0]
 23e6118:	f011 fee8 	bl	23f7eec <_ZN7TwoWire17beginTransmissionEi>
  if (Wire.endTransmission()) {
 23e611c:	f013 fb82 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e6120:	f011 feeb 	bl	23f7efa <_ZN7TwoWire15endTransmissionEv>
 23e6124:	4b0b      	ldr	r3, [pc, #44]	; (23e6154 <_Z17as5600_initializev+0x4c>)
 23e6126:	b170      	cbz	r0, 23e6146 <_Z17as5600_initializev+0x3e>
    msgp = (char *) "WD:NF";
    AS5600_exists = false;
 23e6128:	2100      	movs	r1, #0
    msgp = (char *) "WD:NF";
 23e612a:	4a0b      	ldr	r2, [pc, #44]	; (23e6158 <_Z17as5600_initializev+0x50>)
 23e612c:	601a      	str	r2, [r3, #0]
    AS5600_exists = false;
 23e612e:	4a0b      	ldr	r2, [pc, #44]	; (23e615c <_Z17as5600_initializev+0x54>)
 23e6130:	7011      	strb	r1, [r2, #0]
    SystemStatusBits |= SSB_AS5600;  // Turn On Bit
 23e6132:	490b      	ldr	r1, [pc, #44]	; (23e6160 <_Z17as5600_initializev+0x58>)
 23e6134:	680a      	ldr	r2, [r1, #0]
 23e6136:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 23e613a:	600a      	str	r2, [r1, #0]
  }
  else {
    msgp = (char *) "WD:OK";
  }
  Output (msgp);
 23e613c:	6818      	ldr	r0, [r3, #0]
}
 23e613e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
 23e6142:	f7fe ba21 	b.w	23e4588 <_Z6OutputPKc>
    msgp = (char *) "WD:OK";
 23e6146:	4a07      	ldr	r2, [pc, #28]	; (23e6164 <_Z17as5600_initializev+0x5c>)
 23e6148:	601a      	str	r2, [r3, #0]
 23e614a:	e7f7      	b.n	23e613c <_Z17as5600_initializev+0x34>
 23e614c:	023fd011 	.word	0x023fd011
 23e6150:	1006a0e4 	.word	0x1006a0e4
 23e6154:	1006f518 	.word	0x1006f518
 23e6158:	023fd01d 	.word	0x023fd01d
 23e615c:	1006a0e8 	.word	0x1006a0e8
 23e6160:	1006a168 	.word	0x1006a168
 23e6164:	023fd023 	.word	0x023fd023

023e6168 <_Z13A4_Initializev>:
/* 
 *=======================================================================================================================
 * A4_Initialize()
 *=======================================================================================================================
 */
void A4_Initialize() {
 23e6168:	b537      	push	{r0, r1, r2, r4, r5, lr}
  Output ("A4:INIT");
 23e616a:	482b      	ldr	r0, [pc, #172]	; (23e6218 <_Z13A4_Initializev+0xb0>)
 23e616c:	f7fe fa0c 	bl	23e4588 <_Z6OutputPKc>
  if (SD_exists) {
 23e6170:	4b2a      	ldr	r3, [pc, #168]	; (23e621c <_Z13A4_Initializev+0xb4>)
 23e6172:	781b      	ldrb	r3, [r3, #0]
 23e6174:	2b00      	cmp	r3, #0
 23e6176:	d04c      	beq.n	23e6212 <_Z13A4_Initializev+0xaa>
    if (SD.exists(SD_A4_DIST_FILE)) {
 23e6178:	4929      	ldr	r1, [pc, #164]	; (23e6220 <_Z13A4_Initializev+0xb8>)
 23e617a:	482a      	ldr	r0, [pc, #168]	; (23e6224 <_Z13A4_Initializev+0xbc>)
 23e617c:	f7fd ff3e 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e6180:	4604      	mov	r4, r0
 23e6182:	b1b8      	cbz	r0, 23e61b4 <_Z13A4_Initializev+0x4c>
      Output ("A4=DIST");
 23e6184:	4828      	ldr	r0, [pc, #160]	; (23e6228 <_Z13A4_Initializev+0xc0>)
 23e6186:	f7fe f9ff 	bl	23e4588 <_Z6OutputPKc>
      A4_State = A4_STATE_DISTANCE;
 23e618a:	2201      	movs	r2, #1
 23e618c:	4b27      	ldr	r3, [pc, #156]	; (23e622c <_Z13A4_Initializev+0xc4>)
      if (SD.exists(SD_5M_DIST_FILE)) {
 23e618e:	4928      	ldr	r1, [pc, #160]	; (23e6230 <_Z13A4_Initializev+0xc8>)
 23e6190:	4824      	ldr	r0, [pc, #144]	; (23e6224 <_Z13A4_Initializev+0xbc>)
      A4_State = A4_STATE_DISTANCE;
 23e6192:	601a      	str	r2, [r3, #0]
      if (SD.exists(SD_5M_DIST_FILE)) {
 23e6194:	f7fd ff32 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e6198:	4b26      	ldr	r3, [pc, #152]	; (23e6234 <_Z13A4_Initializev+0xcc>)
 23e619a:	b138      	cbz	r0, 23e61ac <_Z13A4_Initializev+0x44>
        dg_adjustment = 1.25;
 23e619c:	4a26      	ldr	r2, [pc, #152]	; (23e6238 <_Z13A4_Initializev+0xd0>)
        Output ("DIST=5M");
 23e619e:	4827      	ldr	r0, [pc, #156]	; (23e623c <_Z13A4_Initializev+0xd4>)
        dg_adjustment = 1.25;
 23e61a0:	601a      	str	r2, [r3, #0]
    }
  }
  else {
    Output ("A4=NULL,SD NF");
  }
}
 23e61a2:	b003      	add	sp, #12
 23e61a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    Output ("A4=NULL,SD NF");
 23e61a8:	f7fe b9ee 	b.w	23e4588 <_Z6OutputPKc>
        dg_adjustment = 2.5;
 23e61ac:	4a24      	ldr	r2, [pc, #144]	; (23e6240 <_Z13A4_Initializev+0xd8>)
        Output ("DIST=10M");
 23e61ae:	4825      	ldr	r0, [pc, #148]	; (23e6244 <_Z13A4_Initializev+0xdc>)
        dg_adjustment = 2.5;
 23e61b0:	601a      	str	r2, [r3, #0]
        Output ("DIST=10M");
 23e61b2:	e7f6      	b.n	23e61a2 <_Z13A4_Initializev+0x3a>
    else if (SD.exists(SD_A4_RAIN_FILE)) {
 23e61b4:	4924      	ldr	r1, [pc, #144]	; (23e6248 <_Z13A4_Initializev+0xe0>)
 23e61b6:	481b      	ldr	r0, [pc, #108]	; (23e6224 <_Z13A4_Initializev+0xbc>)
 23e61b8:	f7fd ff20 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e61bc:	b1d8      	cbz	r0, 23e61f6 <_Z13A4_Initializev+0x8e>
      A4_State = A4_STATE_RAIN;
 23e61be:	2502      	movs	r5, #2
      Output ("A4=RAIN");
 23e61c0:	4822      	ldr	r0, [pc, #136]	; (23e624c <_Z13A4_Initializev+0xe4>)
 23e61c2:	f7fe f9e1 	bl	23e4588 <_Z6OutputPKc>
      A4_State = A4_STATE_RAIN;
 23e61c6:	4b19      	ldr	r3, [pc, #100]	; (23e622c <_Z13A4_Initializev+0xc4>)
 23e61c8:	601d      	str	r5, [r3, #0]
      raingauge2_interrupt_count = 0;
 23e61ca:	4b21      	ldr	r3, [pc, #132]	; (23e6250 <_Z13A4_Initializev+0xe8>)
 23e61cc:	601c      	str	r4, [r3, #0]
      raingauge2_interrupt_stime = System.millis();
 23e61ce:	f7fd fe86 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23e61d2:	4b20      	ldr	r3, [pc, #128]	; (23e6254 <_Z13A4_Initializev+0xec>)
      attachInterrupt(RAINGAUGE2_IRQ_PIN, raingauge2_interrupt_handler, FALLING);
 23e61d4:	462a      	mov	r2, r5
      raingauge2_interrupt_stime = System.millis();
 23e61d6:	e9c3 0100 	strd	r0, r1, [r3]
      raingauge2_interrupt_ltime = 0;  // used to debounce the tip
 23e61da:	2000      	movs	r0, #0
 23e61dc:	2100      	movs	r1, #0
 23e61de:	4b1e      	ldr	r3, [pc, #120]	; (23e6258 <_Z13A4_Initializev+0xf0>)
 23e61e0:	e9c3 0100 	strd	r0, r1, [r3]
      attachInterrupt(RAINGAUGE2_IRQ_PIN, raingauge2_interrupt_handler, FALLING);
 23e61e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23e61e8:	200f      	movs	r0, #15
 23e61ea:	491c      	ldr	r1, [pc, #112]	; (23e625c <_Z13A4_Initializev+0xf4>)
 23e61ec:	9400      	str	r4, [sp, #0]
 23e61ee:	f011 fecb 	bl	23f7f88 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
 23e61f2:	b003      	add	sp, #12
 23e61f4:	bd30      	pop	{r4, r5, pc}
    else if (SD.exists(SD_A4_RAW_FILE)) {
 23e61f6:	491a      	ldr	r1, [pc, #104]	; (23e6260 <_Z13A4_Initializev+0xf8>)
 23e61f8:	480a      	ldr	r0, [pc, #40]	; (23e6224 <_Z13A4_Initializev+0xbc>)
 23e61fa:	f7fd feff 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e61fe:	b130      	cbz	r0, 23e620e <_Z13A4_Initializev+0xa6>
      Output ("A4=RAW");
 23e6200:	4818      	ldr	r0, [pc, #96]	; (23e6264 <_Z13A4_Initializev+0xfc>)
 23e6202:	f7fe f9c1 	bl	23e4588 <_Z6OutputPKc>
      A4_State = A4_STATE_RAW;
 23e6206:	2203      	movs	r2, #3
 23e6208:	4b08      	ldr	r3, [pc, #32]	; (23e622c <_Z13A4_Initializev+0xc4>)
 23e620a:	601a      	str	r2, [r3, #0]
 23e620c:	e7f1      	b.n	23e61f2 <_Z13A4_Initializev+0x8a>
      Output ("A4=NULL");
 23e620e:	4816      	ldr	r0, [pc, #88]	; (23e6268 <_Z13A4_Initializev+0x100>)
 23e6210:	e7c7      	b.n	23e61a2 <_Z13A4_Initializev+0x3a>
    Output ("A4=NULL,SD NF");
 23e6212:	4816      	ldr	r0, [pc, #88]	; (23e626c <_Z13A4_Initializev+0x104>)
 23e6214:	e7c5      	b.n	23e61a2 <_Z13A4_Initializev+0x3a>
 23e6216:	bf00      	nop
 23e6218:	023fd029 	.word	0x023fd029
 23e621c:	1006a770 	.word	0x1006a770
 23e6220:	1006a0ff 	.word	0x1006a0ff
 23e6224:	1006a2c4 	.word	0x1006a2c4
 23e6228:	023fd031 	.word	0x023fd031
 23e622c:	1006a24c 	.word	0x1006a24c
 23e6230:	1006a0f4 	.word	0x1006a0f4
 23e6234:	1006a190 	.word	0x1006a190
 23e6238:	3fa00000 	.word	0x3fa00000
 23e623c:	023fd039 	.word	0x023fd039
 23e6240:	40200000 	.word	0x40200000
 23e6244:	023fd041 	.word	0x023fd041
 23e6248:	1006a10a 	.word	0x1006a10a
 23e624c:	023fd04a 	.word	0x023fd04a
 23e6250:	1007aa60 	.word	0x1007aa60
 23e6254:	1007aa70 	.word	0x1007aa70
 23e6258:	1007aa68 	.word	0x1007aa68
 23e625c:	023e3f35 	.word	0x023e3f35
 23e6260:	1006a115 	.word	0x1006a115
 23e6264:	023fd052 	.word	0x023fd052
 23e6268:	023fd059 	.word	0x023fd059
 23e626c:	023fd061 	.word	0x023fd061

023e6270 <_Z13A5_Initializev>:
/* 
 *=======================================================================================================================
 * A5_Initialize()
 *=======================================================================================================================
 */
void A5_Initialize() {
 23e6270:	b508      	push	{r3, lr}
  Output ("A5:INIT");
 23e6272:	480c      	ldr	r0, [pc, #48]	; (23e62a4 <_Z13A5_Initializev+0x34>)
 23e6274:	f7fe f988 	bl	23e4588 <_Z6OutputPKc>
  if (SD_exists) {
 23e6278:	4b0b      	ldr	r3, [pc, #44]	; (23e62a8 <_Z13A5_Initializev+0x38>)
 23e627a:	781b      	ldrb	r3, [r3, #0]
 23e627c:	b183      	cbz	r3, 23e62a0 <_Z13A5_Initializev+0x30>
    if (SD.exists(SD_A5_RAW_FILE)) {
 23e627e:	490b      	ldr	r1, [pc, #44]	; (23e62ac <_Z13A5_Initializev+0x3c>)
 23e6280:	480b      	ldr	r0, [pc, #44]	; (23e62b0 <_Z13A5_Initializev+0x40>)
 23e6282:	f7fd febb 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e6286:	b130      	cbz	r0, 23e6296 <_Z13A5_Initializev+0x26>
      Output ("A5=RAW");
 23e6288:	480a      	ldr	r0, [pc, #40]	; (23e62b4 <_Z13A5_Initializev+0x44>)
 23e628a:	f7fe f97d 	bl	23e4588 <_Z6OutputPKc>
      A5_State = A5_STATE_RAW;
 23e628e:	2201      	movs	r2, #1
 23e6290:	4b09      	ldr	r3, [pc, #36]	; (23e62b8 <_Z13A5_Initializev+0x48>)
 23e6292:	601a      	str	r2, [r3, #0]
    }
  }
  else {
    Output ("A5=NULL,SD NF");
  }
}
 23e6294:	bd08      	pop	{r3, pc}
      Output ("A5=NULL");
 23e6296:	4809      	ldr	r0, [pc, #36]	; (23e62bc <_Z13A5_Initializev+0x4c>)
}
 23e6298:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Output ("A5=NULL,SD NF");
 23e629c:	f7fe b974 	b.w	23e4588 <_Z6OutputPKc>
 23e62a0:	4807      	ldr	r0, [pc, #28]	; (23e62c0 <_Z13A5_Initializev+0x50>)
 23e62a2:	e7f9      	b.n	23e6298 <_Z13A5_Initializev+0x28>
 23e62a4:	023fd06f 	.word	0x023fd06f
 23e62a8:	1006a770 	.word	0x1006a770
 23e62ac:	1006a11f 	.word	0x1006a11f
 23e62b0:	1006a2c4 	.word	0x1006a2c4
 23e62b4:	023fd077 	.word	0x023fd077
 23e62b8:	1006a250 	.word	0x1006a250
 23e62bc:	023fd07e 	.word	0x023fd07e
 23e62c0:	023fd086 	.word	0x023fd086

023e62c4 <_Z11Pin_ReadAvgi>:
/* 
 *=======================================================================================================================
 * Pin_ReadAvg()
 *=======================================================================================================================
 */
float Pin_ReadAvg(int pin) {
 23e62c4:	b570      	push	{r4, r5, r6, lr}
 23e62c6:	2505      	movs	r5, #5
  int numReadings = 5;
  int totalValue = 0;
 23e62c8:	2400      	movs	r4, #0
  for (int i = 0; i < numReadings; i++) {
    totalValue += analogRead(pin);
 23e62ca:	b286      	uxth	r6, r0
 23e62cc:	4630      	mov	r0, r6
 23e62ce:	f013 fa62 	bl	23f9796 <analogRead>
 23e62d2:	4404      	add	r4, r0
    delay(10);  // Short delay between readings
 23e62d4:	200a      	movs	r0, #10
 23e62d6:	f011 f83f 	bl	23f7358 <delay>
  for (int i = 0; i < numReadings; i++) {
 23e62da:	3d01      	subs	r5, #1
 23e62dc:	d1f6      	bne.n	23e62cc <_Z11Pin_ReadAvgi+0x8>
  }
  return(totalValue / numReadings);
 23e62de:	2305      	movs	r3, #5
 23e62e0:	fb94 f3f3 	sdiv	r3, r4, r3
 23e62e4:	ee00 3a10 	vmov	s0, r3
}
 23e62e8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 23e62ec:	bd70      	pop	{r4, r5, r6, pc}
	...

023e62f0 <_Z25DistanceGauge_TakeReadingv>:
/*
 * ======================================================================================================================
 * DistanceGauge_TakeReading() - measure every second             
 * ======================================================================================================================
 */
void DistanceGauge_TakeReading() {
 23e62f0:	b508      	push	{r3, lr}
  dg_buckets[dg_bucket] = (int) analogRead(DISTANCE_GAUGE_PIN) * dg_adjustment;
 23e62f2:	200f      	movs	r0, #15
 23e62f4:	f013 fa4f 	bl	23f9796 <analogRead>
 23e62f8:	ee07 0a90 	vmov	s15, r0
 23e62fc:	490b      	ldr	r1, [pc, #44]	; (23e632c <_Z25DistanceGauge_TakeReadingv+0x3c>)
 23e62fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23e6302:	ed91 7a00 	vldr	s14, [r1]
 23e6306:	ee67 7a87 	vmul.f32	s15, s15, s14
 23e630a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23e630e:	ee17 0a90 	vmov	r0, s15
 23e6312:	4a07      	ldr	r2, [pc, #28]	; (23e6330 <_Z25DistanceGauge_TakeReadingv+0x40>)
 23e6314:	4907      	ldr	r1, [pc, #28]	; (23e6334 <_Z25DistanceGauge_TakeReadingv+0x44>)
 23e6316:	6813      	ldr	r3, [r2, #0]
 23e6318:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  dg_bucket = (++dg_bucket) % DG_BUCKETS; // Advance bucket index for next reading
 23e631c:	213c      	movs	r1, #60	; 0x3c
 23e631e:	3301      	adds	r3, #1
 23e6320:	fbb3 f0f1 	udiv	r0, r3, r1
 23e6324:	fb01 3310 	mls	r3, r1, r0, r3
 23e6328:	6013      	str	r3, [r2, #0]
}
 23e632a:	bd08      	pop	{r3, pc}
 23e632c:	1006a190 	.word	0x1006a190
 23e6330:	1006ac70 	.word	0x1006ac70
 23e6334:	1006ac74 	.word	0x1006ac74

023e6338 <_Z20DistanceGauge_Medianv>:
 *=======================================================================================================================
 */
float DistanceGauge_Median() {
  int i;
  
  mysort(dg_buckets, DG_BUCKETS);
 23e6338:	4804      	ldr	r0, [pc, #16]	; (23e634c <_Z20DistanceGauge_Medianv+0x14>)
 23e633a:	213c      	movs	r1, #60	; 0x3c
float DistanceGauge_Median() {
 23e633c:	b508      	push	{r3, lr}
  mysort(dg_buckets, DG_BUCKETS);
 23e633e:	f7fd ff49 	bl	23e41d4 <_Z6mysortPjj>
  i = (DG_BUCKETS+1) / 2 - 1; // -1 as array indexing in C starts from 0
  
  return (dg_buckets[i]); 
 23e6342:	ed90 0a1d 	vldr	s0, [r0, #116]	; 0x74
}
 23e6346:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 23e634a:	bd08      	pop	{r3, pc}
 23e634c:	1006ac74 	.word	0x1006ac74

023e6350 <_Z16Wind_SampleSpeedv>:
 * Optipolar Hall Effect Sensor SS451A - Anemometer
 * speed  = (( (signals/2) * (2 * pi * radius) ) / time) * calibration_factor
 * speed in m/s =  (   ( (interrupts/2) * (2 * 3.14156 * 0.079) )  / (time_period in ms / 1000)  )  * 2.64
 *=======================================================================================================================
 */
float Wind_SampleSpeed() {
 23e6350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23e6354:	ed2d 8b02 	vpush	{d8}
  uint64_t delta_ms;
  float wind_speed;
  
  delta_ms = System.millis()-anemometer_interrupt_stime;
 23e6358:	f7fd fdc1 	bl	23e3ede <_ZN11SystemClass6millisEv>

  if (anemometer_interrupt_count) {
 23e635c:	4f2c      	ldr	r7, [pc, #176]	; (23e6410 <_Z16Wind_SampleSpeedv+0xc0>)
  delta_ms = System.millis()-anemometer_interrupt_stime;
 23e635e:	4604      	mov	r4, r0
  if (anemometer_interrupt_count) {
 23e6360:	683b      	ldr	r3, [r7, #0]
  delta_ms = System.millis()-anemometer_interrupt_stime;
 23e6362:	460d      	mov	r5, r1
  if (anemometer_interrupt_count) {
 23e6364:	4e2b      	ldr	r6, [pc, #172]	; (23e6414 <_Z16Wind_SampleSpeedv+0xc4>)
 23e6366:	2b00      	cmp	r3, #0
 23e6368:	d048      	beq.n	23e63fc <_Z16Wind_SampleSpeedv+0xac>
    // wind_speed = (  ( (anemometer_interrupt_count/2) * (2 * 3.14156 * ws_radius) )  / 
    //  (float)( (float)delta_ms / 1000)  )  * ws_calibration;

    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
 23e636a:	6838      	ldr	r0, [r7, #0]
 23e636c:	f7fc f8e6 	bl	23e253c <__aeabi_ui2d>
 23e6370:	a325      	add	r3, pc, #148	; (adr r3, 23e6408 <_Z16Wind_SampleSpeedv+0xb8>)
 23e6372:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e6376:	f7fc f95b 	bl	23e2630 <__aeabi_dmul>
 23e637a:	4b27      	ldr	r3, [pc, #156]	; (23e6418 <_Z16Wind_SampleSpeedv+0xc8>)
 23e637c:	4680      	mov	r8, r0
 23e637e:	6818      	ldr	r0, [r3, #0]
 23e6380:	4689      	mov	r9, r1
 23e6382:	f7fc f8fd 	bl	23e2580 <__aeabi_f2d>
 23e6386:	4602      	mov	r2, r0
 23e6388:	460b      	mov	r3, r1
 23e638a:	4640      	mov	r0, r8
 23e638c:	4649      	mov	r1, r9
 23e638e:	f7fc f94f 	bl	23e2630 <__aeabi_dmul>
 23e6392:	4680      	mov	r8, r0
 23e6394:	4689      	mov	r9, r1
  delta_ms = System.millis()-anemometer_interrupt_stime;
 23e6396:	e9d6 0100 	ldrd	r0, r1, [r6]
 23e639a:	1a20      	subs	r0, r4, r0
 23e639c:	eb65 0101 	sbc.w	r1, r5, r1
        (float)( (float)delta_ms / 1000) )  * ws_calibration;
 23e63a0:	f7fc fd56 	bl	23e2e50 <__aeabi_ul2f>
 23e63a4:	eddf 7a1d 	vldr	s15, [pc, #116]	; 23e641c <_Z16Wind_SampleSpeedv+0xcc>
 23e63a8:	ee07 0a10 	vmov	s14, r0
 23e63ac:	eec7 7a27 	vdiv.f32	s15, s14, s15
 23e63b0:	ee17 0a90 	vmov	r0, s15
 23e63b4:	f7fc f8e4 	bl	23e2580 <__aeabi_f2d>
 23e63b8:	4602      	mov	r2, r0
 23e63ba:	460b      	mov	r3, r1
    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
 23e63bc:	4640      	mov	r0, r8
 23e63be:	4649      	mov	r1, r9
 23e63c0:	f7fc fa60 	bl	23e2884 <__aeabi_ddiv>
        (float)( (float)delta_ms / 1000) )  * ws_calibration;
 23e63c4:	4b16      	ldr	r3, [pc, #88]	; (23e6420 <_Z16Wind_SampleSpeedv+0xd0>)
    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
 23e63c6:	4604      	mov	r4, r0
        (float)( (float)delta_ms / 1000) )  * ws_calibration;
 23e63c8:	6818      	ldr	r0, [r3, #0]
    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
 23e63ca:	460d      	mov	r5, r1
        (float)( (float)delta_ms / 1000) )  * ws_calibration;
 23e63cc:	f7fc f8d8 	bl	23e2580 <__aeabi_f2d>
 23e63d0:	4602      	mov	r2, r0
 23e63d2:	460b      	mov	r3, r1
 23e63d4:	4620      	mov	r0, r4
 23e63d6:	4629      	mov	r1, r5
 23e63d8:	f7fc f92a 	bl	23e2630 <__aeabi_dmul>
    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
 23e63dc:	f7fc fc20 	bl	23e2c20 <__aeabi_d2f>
 23e63e0:	ee08 0a10 	vmov	s16, r0
  }
  else {
    wind_speed = 0.0;
  }

  anemometer_interrupt_count = 0;
 23e63e4:	2300      	movs	r3, #0
 23e63e6:	603b      	str	r3, [r7, #0]
  anemometer_interrupt_stime = System.millis();
 23e63e8:	f7fd fd79 	bl	23e3ede <_ZN11SystemClass6millisEv>
  
  return (wind_speed);
} 
 23e63ec:	eeb0 0a48 	vmov.f32	s0, s16
 23e63f0:	ecbd 8b02 	vpop	{d8}
  anemometer_interrupt_stime = System.millis();
 23e63f4:	e9c6 0100 	strd	r0, r1, [r6]
} 
 23e63f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    wind_speed = 0.0;
 23e63fc:	ed9f 8a09 	vldr	s16, [pc, #36]	; 23e6424 <_Z16Wind_SampleSpeedv+0xd4>
 23e6400:	e7f0      	b.n	23e63e4 <_Z16Wind_SampleSpeedv+0x94>
 23e6402:	bf00      	nop
 23e6404:	f3af 8000 	nop.w
 23e6408:	35935fc4 	.word	0x35935fc4
 23e640c:	400921ea 	.word	0x400921ea
 23e6410:	1006a928 	.word	0x1006a928
 23e6414:	1006a930 	.word	0x1006a930
 23e6418:	1006a1b0 	.word	0x1006a1b0
 23e641c:	447a0000 	.word	0x447a0000
 23e6420:	1006a1ac 	.word	0x1006a1ac
 23e6424:	00000000 	.word	0x00000000

023e6428 <_Z20Wind_SampleDirectionv>:
/* 
 *=======================================================================================================================
 * Wind_SampleDirection() -- Talk i2c to the AS5600 sensor and get direction
 *=======================================================================================================================
 */
int Wind_SampleDirection() {
 23e6428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int degree;
  
  // Read Raw Angle Low Byte
  Wire.beginTransmission(AS5600_ADR);
 23e642a:	4d39      	ldr	r5, [pc, #228]	; (23e6510 <_Z20Wind_SampleDirectionv+0xe8>)
 23e642c:	f013 f9fa 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e6430:	6829      	ldr	r1, [r5, #0]
 23e6432:	f011 fd5b 	bl	23f7eec <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(AS5600_raw_ang_lo);
 23e6436:	f013 f9f5 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e643a:	210d      	movs	r1, #13
 23e643c:	f7fd fd02 	bl	23e3e44 <_ZN7TwoWire5writeEi.isra.0>
  if (Wire.endTransmission()) {
 23e6440:	f013 f9f0 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e6444:	f011 fd59 	bl	23f7efa <_ZN7TwoWire15endTransmissionEv>
 23e6448:	4c32      	ldr	r4, [pc, #200]	; (23e6514 <_Z20Wind_SampleDirectionv+0xec>)
 23e644a:	b178      	cbz	r0, 23e646c <_Z20Wind_SampleDirectionv+0x44>
    if (AS5600_exists) {
 23e644c:	4b32      	ldr	r3, [pc, #200]	; (23e6518 <_Z20Wind_SampleDirectionv+0xf0>)
 23e644e:	781b      	ldrb	r3, [r3, #0]
 23e6450:	b113      	cbz	r3, 23e6458 <_Z20Wind_SampleDirectionv+0x30>
      Output ("WD Offline_L");
 23e6452:	4832      	ldr	r0, [pc, #200]	; (23e651c <_Z20Wind_SampleDirectionv+0xf4>)
 23e6454:	f7fe f898 	bl	23e4588 <_Z6OutputPKc>
    }
    AS5600_exists = false;
 23e6458:	2200      	movs	r2, #0
 23e645a:	4b2f      	ldr	r3, [pc, #188]	; (23e6518 <_Z20Wind_SampleDirectionv+0xf0>)
 23e645c:	701a      	strb	r2, [r3, #0]
      else {
        return (-1);
      }
    }
  }
  SystemStatusBits |= SSB_AS5600;  // Turn On Bit
 23e645e:	6823      	ldr	r3, [r4, #0]
  return (-1); // Not the best value to return 
 23e6460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  SystemStatusBits |= SSB_AS5600;  // Turn On Bit
 23e6464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 23e6468:	6023      	str	r3, [r4, #0]
  return (-1); // Not the best value to return 
 23e646a:	e04c      	b.n	23e6506 <_Z20Wind_SampleDirectionv+0xde>
  else if (Wire.requestFrom(AS5600_ADR, 1)) {
 23e646c:	f013 f9da 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e6470:	2201      	movs	r2, #1
 23e6472:	7829      	ldrb	r1, [r5, #0]
 23e6474:	f011 fd33 	bl	23f7ede <_ZN7TwoWire11requestFromEhj>
 23e6478:	2800      	cmp	r0, #0
 23e647a:	d0f0      	beq.n	23e645e <_Z20Wind_SampleDirectionv+0x36>
    int AS5600_lo_raw = Wire.read();
 23e647c:	f013 f9d2 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e6480:	6803      	ldr	r3, [r0, #0]
 23e6482:	695b      	ldr	r3, [r3, #20]
 23e6484:	4798      	blx	r3
 23e6486:	4606      	mov	r6, r0
    Wire.beginTransmission(AS5600_ADR);
 23e6488:	f013 f9cc 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e648c:	6829      	ldr	r1, [r5, #0]
 23e648e:	f011 fd2d 	bl	23f7eec <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(AS5600_raw_ang_hi);
 23e6492:	f013 f9c7 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e6496:	210c      	movs	r1, #12
 23e6498:	f7fd fcd4 	bl	23e3e44 <_ZN7TwoWire5writeEi.isra.0>
    if (Wire.endTransmission()) {
 23e649c:	f013 f9c2 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e64a0:	f011 fd2b 	bl	23f7efa <_ZN7TwoWire15endTransmissionEv>
 23e64a4:	b128      	cbz	r0, 23e64b2 <_Z20Wind_SampleDirectionv+0x8a>
      if (AS5600_exists) {
 23e64a6:	4b1c      	ldr	r3, [pc, #112]	; (23e6518 <_Z20Wind_SampleDirectionv+0xf0>)
 23e64a8:	781b      	ldrb	r3, [r3, #0]
 23e64aa:	2b00      	cmp	r3, #0
 23e64ac:	d0d4      	beq.n	23e6458 <_Z20Wind_SampleDirectionv+0x30>
        Output ("WD Offline_H");
 23e64ae:	481c      	ldr	r0, [pc, #112]	; (23e6520 <_Z20Wind_SampleDirectionv+0xf8>)
 23e64b0:	e7d0      	b.n	23e6454 <_Z20Wind_SampleDirectionv+0x2c>
    else if (Wire.requestFrom(AS5600_ADR, 1)) {
 23e64b2:	f013 f9b7 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e64b6:	2201      	movs	r2, #1
 23e64b8:	7829      	ldrb	r1, [r5, #0]
 23e64ba:	f011 fd10 	bl	23f7ede <_ZN7TwoWire11requestFromEhj>
 23e64be:	2800      	cmp	r0, #0
 23e64c0:	d0cd      	beq.n	23e645e <_Z20Wind_SampleDirectionv+0x36>
      word AS5600_hi_raw = Wire.read();
 23e64c2:	f013 f9af 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e64c6:	6803      	ldr	r3, [r0, #0]
      if (!AS5600_exists) {
 23e64c8:	4f13      	ldr	r7, [pc, #76]	; (23e6518 <_Z20Wind_SampleDirectionv+0xf0>)
      word AS5600_hi_raw = Wire.read();
 23e64ca:	695b      	ldr	r3, [r3, #20]
 23e64cc:	4798      	blx	r3
      if (!AS5600_exists) {
 23e64ce:	783b      	ldrb	r3, [r7, #0]
      word AS5600_hi_raw = Wire.read();
 23e64d0:	4605      	mov	r5, r0
      if (!AS5600_exists) {
 23e64d2:	b913      	cbnz	r3, 23e64da <_Z20Wind_SampleDirectionv+0xb2>
        Output ("WD Online");
 23e64d4:	4813      	ldr	r0, [pc, #76]	; (23e6524 <_Z20Wind_SampleDirectionv+0xfc>)
 23e64d6:	f7fe f857 	bl	23e4588 <_Z6OutputPKc>
      AS5600_exists = true;           // We made it 
 23e64da:	2301      	movs	r3, #1
 23e64dc:	703b      	strb	r3, [r7, #0]
      SystemStatusBits &= ~SSB_AS5600; // Turn Off Bit
 23e64de:	6823      	ldr	r3, [r4, #0]
      degree = (int) AS5600_hi_raw * 0.0879;
 23e64e0:	ea46 2005 	orr.w	r0, r6, r5, lsl #8
      SystemStatusBits &= ~SSB_AS5600; // Turn Off Bit
 23e64e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 23e64e8:	6023      	str	r3, [r4, #0]
      degree = (int) AS5600_hi_raw * 0.0879;
 23e64ea:	f7fc f837 	bl	23e255c <__aeabi_i2d>
 23e64ee:	a306      	add	r3, pc, #24	; (adr r3, 23e6508 <_Z20Wind_SampleDirectionv+0xe0>)
 23e64f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e64f4:	f7fc f89c 	bl	23e2630 <__aeabi_dmul>
 23e64f8:	f7fc fb4a 	bl	23e2b90 <__aeabi_d2iz>
        return (-1);
 23e64fc:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
 23e6500:	bf88      	it	hi
 23e6502:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
 23e6506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23e6508:	495182aa 	.word	0x495182aa
 23e650c:	3fb6809d 	.word	0x3fb6809d
 23e6510:	1006a0e4 	.word	0x1006a0e4
 23e6514:	1006a168 	.word	0x1006a168
 23e6518:	1006a0e8 	.word	0x1006a0e8
 23e651c:	023fd094 	.word	0x023fd094
 23e6520:	023fd0a1 	.word	0x023fd0a1
 23e6524:	023fd0ae 	.word	0x023fd0ae

023e6528 <_Z20Wind_DirectionVectorv>:
/* 
 *=======================================================================================================================
 * Wind_DirectionVector()
 *=======================================================================================================================
 */
int Wind_DirectionVector() {
 23e6528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    // Flag we have wind speed
    if (s > 0) {
      ws_zero = false;  
    }
    r = (d * 71) / 4068.0;
 23e652c:	f20f 1910 	addw	r9, pc, #272	; 0x110
 23e6530:	e9d9 8900 	ldrd	r8, r9, [r9]
int Wind_DirectionVector() {
 23e6534:	ed2d 8b08 	vpush	{d8-d11}
  double EW_vector_sum = 0.0;
 23e6538:	ed9f 8b3f 	vldr	d8, [pc, #252]	; 23e6638 <_Z20Wind_DirectionVectorv+0x110>
  bool ws_zero = true;
 23e653c:	2501      	movs	r5, #1
  for (i=0; i<WIND_READINGS; i++) {
 23e653e:	f04f 0a00 	mov.w	sl, #0
  double NS_vector_sum = 0.0;
 23e6542:	eeb0 9a48 	vmov.f32	s18, s16
 23e6546:	eef0 9a68 	vmov.f32	s19, s17
    r = (d * 71) / 4068.0;
 23e654a:	f04f 0b47 	mov.w	fp, #71	; 0x47
 23e654e:	4c40      	ldr	r4, [pc, #256]	; (23e6650 <_Z20Wind_DirectionVectorv+0x128>)
int Wind_DirectionVector() {
 23e6550:	b083      	sub	sp, #12
    d = wind.bucket[i].direction;
 23e6552:	6820      	ldr	r0, [r4, #0]
    if (d == -1) {
 23e6554:	1c43      	adds	r3, r0, #1
 23e6556:	d068      	beq.n	23e662a <_Z20Wind_DirectionVectorv+0x102>
    s = wind.bucket[i].speed;
 23e6558:	ed94 ba01 	vldr	s22, [r4, #4]
      ws_zero = false;  
 23e655c:	eeb5 ba40 	vcmp.f32	s22, #0.0
 23e6560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    r = (d * 71) / 4068.0;
 23e6564:	fb0b f000 	mul.w	r0, fp, r0
      ws_zero = false;  
 23e6568:	bfc8      	it	gt
 23e656a:	2500      	movgt	r5, #0
    r = (d * 71) / 4068.0;
 23e656c:	f7fb fff6 	bl	23e255c <__aeabi_i2d>
 23e6570:	4642      	mov	r2, r8
 23e6572:	464b      	mov	r3, r9
 23e6574:	f7fc f986 	bl	23e2884 <__aeabi_ddiv>
    
    // North South Direction 
    NS_vector_sum += cos(r) * s;
 23e6578:	ec41 0b10 	vmov	d0, r0, r1
    r = (d * 71) / 4068.0;
 23e657c:	ec41 0b1a 	vmov	d10, r0, r1
    NS_vector_sum += cos(r) * s;
 23e6580:	f013 fbb6 	bl	23f9cf0 <cos>
 23e6584:	ee1b 0a10 	vmov	r0, s22
 23e6588:	ed8d 0b00 	vstr	d0, [sp]
 23e658c:	f7fb fff8 	bl	23e2580 <__aeabi_f2d>
 23e6590:	4602      	mov	r2, r0
 23e6592:	460b      	mov	r3, r1
 23e6594:	4606      	mov	r6, r0
 23e6596:	460f      	mov	r7, r1
 23e6598:	e9dd 0100 	ldrd	r0, r1, [sp]
 23e659c:	f7fc f848 	bl	23e2630 <__aeabi_dmul>
 23e65a0:	4602      	mov	r2, r0
 23e65a2:	460b      	mov	r3, r1
 23e65a4:	ec51 0b19 	vmov	r0, r1, d9
 23e65a8:	f7fb fe8c 	bl	23e22c4 <__adddf3>
    EW_vector_sum += sin(r) * s;
 23e65ac:	eeb0 0a4a 	vmov.f32	s0, s20
 23e65b0:	eef0 0a6a 	vmov.f32	s1, s21
    NS_vector_sum += cos(r) * s;
 23e65b4:	ec41 0b19 	vmov	d9, r0, r1
    EW_vector_sum += sin(r) * s;
 23e65b8:	f013 fc8e 	bl	23f9ed8 <sin>
 23e65bc:	4630      	mov	r0, r6
 23e65be:	ec53 2b10 	vmov	r2, r3, d0
 23e65c2:	4639      	mov	r1, r7
 23e65c4:	f7fc f834 	bl	23e2630 <__aeabi_dmul>
 23e65c8:	4602      	mov	r2, r0
 23e65ca:	460b      	mov	r3, r1
 23e65cc:	ec51 0b18 	vmov	r0, r1, d8
 23e65d0:	f7fb fe78 	bl	23e22c4 <__adddf3>
  for (i=0; i<WIND_READINGS; i++) {
 23e65d4:	f10a 0a01 	add.w	sl, sl, #1
 23e65d8:	f1ba 0f3c 	cmp.w	sl, #60	; 0x3c
    EW_vector_sum += sin(r) * s;
 23e65dc:	ec41 0b18 	vmov	d8, r0, r1
  for (i=0; i<WIND_READINGS; i++) {
 23e65e0:	f104 0408 	add.w	r4, r4, #8
 23e65e4:	d1b5      	bne.n	23e6552 <_Z20Wind_DirectionVectorv+0x2a>
  }
  rtod = (atan2(EW_vector_sum, NS_vector_sum)*4068.0)/71.0;
 23e65e6:	eeb0 1a49 	vmov.f32	s2, s18
 23e65ea:	eef0 1a69 	vmov.f32	s3, s19
 23e65ee:	ec41 0b10 	vmov	d0, r0, r1
 23e65f2:	f013 fcc5 	bl	23f9f80 <atan2>
 23e65f6:	a312      	add	r3, pc, #72	; (adr r3, 23e6640 <_Z20Wind_DirectionVectorv+0x118>)
 23e65f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e65fc:	ec51 0b10 	vmov	r0, r1, d0
 23e6600:	f7fc f816 	bl	23e2630 <__aeabi_dmul>
 23e6604:	a310      	add	r3, pc, #64	; (adr r3, 23e6648 <_Z20Wind_DirectionVectorv+0x120>)
 23e6606:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e660a:	f7fc f93b 	bl	23e2884 <__aeabi_ddiv>
 23e660e:	f7fc fabf 	bl	23e2b90 <__aeabi_d2iz>
  if (rtod<0) {
 23e6612:	2800      	cmp	r0, #0
    rtod = 360 + rtod;
 23e6614:	bfb8      	it	lt
 23e6616:	f500 70b4 	addlt.w	r0, r0, #360	; 0x168
  }

  // If all the winds speeds are 0 then we return current wind direction or 0 on failure of that.
  if (ws_zero) {
 23e661a:	b135      	cbz	r5, 23e662a <_Z20Wind_DirectionVectorv+0x102>
    return (Wind_SampleDirection()); // Can return -1
  }
  else {
    return (rtod);
  }
}
 23e661c:	b003      	add	sp, #12
 23e661e:	ecbd 8b08 	vpop	{d8-d11}
 23e6622:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (Wind_SampleDirection()); // Can return -1
 23e6626:	f7ff beff 	b.w	23e6428 <_Z20Wind_SampleDirectionv>
}
 23e662a:	b003      	add	sp, #12
 23e662c:	ecbd 8b08 	vpop	{d8-d11}
 23e6630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23e6634:	f3af 8000 	nop.w
	...
 23e6644:	40afc800 	.word	0x40afc800
 23e6648:	00000000 	.word	0x00000000
 23e664c:	4051c000 	.word	0x4051c000
 23e6650:	1007ac5c 	.word	0x1007ac5c

023e6654 <_Z17Wind_SpeedAveragev>:
 * Wind_SpeedAverage()
 *=======================================================================================================================
 */
float Wind_SpeedAverage() {
  float wind_speed = 0.0;
  for (int i=0; i<WIND_READINGS; i++) {
 23e6654:	2300      	movs	r3, #0
  float wind_speed = 0.0;
 23e6656:	eddf 7a08 	vldr	s15, [pc, #32]	; 23e6678 <_Z17Wind_SpeedAveragev+0x24>
 23e665a:	4a08      	ldr	r2, [pc, #32]	; (23e667c <_Z17Wind_SpeedAveragev+0x28>)
    // sum wind speeds for later average
    wind_speed += wind.bucket[i].speed;
 23e665c:	ed92 7a01 	vldr	s14, [r2, #4]
  for (int i=0; i<WIND_READINGS; i++) {
 23e6660:	3301      	adds	r3, #1
 23e6662:	2b3c      	cmp	r3, #60	; 0x3c
    wind_speed += wind.bucket[i].speed;
 23e6664:	ee77 7a87 	vadd.f32	s15, s15, s14
  for (int i=0; i<WIND_READINGS; i++) {
 23e6668:	f102 0208 	add.w	r2, r2, #8
 23e666c:	d1f6      	bne.n	23e665c <_Z17Wind_SpeedAveragev+0x8>
  }
  return( wind_speed / (float) WIND_READINGS);
}
 23e666e:	ed9f 0a04 	vldr	s0, [pc, #16]	; 23e6680 <_Z17Wind_SpeedAveragev+0x2c>
 23e6672:	ee87 0a80 	vdiv.f32	s0, s15, s0
 23e6676:	4770      	bx	lr
 23e6678:	00000000 	.word	0x00000000
 23e667c:	1007ac5c 	.word	0x1007ac5c
 23e6680:	42700000 	.word	0x42700000
 23e6684:	00000000 	.word	0x00000000

023e6688 <_Z15Wind_GustUpdatev>:
 *     Sum this reading with next 2.
 *     If greater than last, update last 
 * 
 *=======================================================================================================================
 */
void Wind_GustUpdate() {
 23e6688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23e668c:	ed2d 8b08 	vpush	{d8-d11}
  int bucket = wind.bucket_idx; // Start at next bucket to fill (aka oldest reading)
 23e6690:	4963      	ldr	r1, [pc, #396]	; (23e6820 <_Z15Wind_GustUpdatev+0x198>)
 23e6692:	253a      	movs	r5, #58	; 0x3a
 23e6694:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
  float ws_sum = 0.0;
 23e6698:	ed9f 7a62 	vldr	s14, [pc, #392]	; 23e6824 <_Z15Wind_GustUpdatev+0x19c>
  int ws_bucket = bucket;
 23e669c:	461c      	mov	r4, r3
  float sum;

  for (int i=0; i<(WIND_READINGS-2); i++) {  // subtract 2 because we are looking ahead at the next 2 buckets
    // sum wind speeds 
    sum = wind.bucket[bucket].speed +
          wind.bucket[(bucket+1) % WIND_READINGS].speed +
 23e669e:	203c      	movs	r0, #60	; 0x3c
void Wind_GustUpdate() {
 23e66a0:	b083      	sub	sp, #12
    sum = wind.bucket[bucket].speed +
 23e66a2:	461e      	mov	r6, r3
 23e66a4:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
          wind.bucket[(bucket+1) % WIND_READINGS].speed +
 23e66a8:	3301      	adds	r3, #1
    sum = wind.bucket[bucket].speed +
 23e66aa:	edd2 7a01 	vldr	s15, [r2, #4]
          wind.bucket[(bucket+1) % WIND_READINGS].speed +
 23e66ae:	fb93 f2f0 	sdiv	r2, r3, r0
 23e66b2:	fb00 3312 	mls	r3, r0, r2, r3
          wind.bucket[(bucket+2) % WIND_READINGS].speed;
 23e66b6:	1cb2      	adds	r2, r6, #2
 23e66b8:	fb92 f7f0 	sdiv	r7, r2, r0
 23e66bc:	fb00 2217 	mls	r2, r0, r7, r2
          wind.bucket[(bucket+1) % WIND_READINGS].speed +
 23e66c0:	eb01 07c3 	add.w	r7, r1, r3, lsl #3
    sum = wind.bucket[bucket].speed +
 23e66c4:	edd7 6a01 	vldr	s13, [r7, #4]
          wind.bucket[(bucket+2) % WIND_READINGS].speed;
 23e66c8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    sum = wind.bucket[bucket].speed +
 23e66cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 23e66d0:	edd2 6a01 	vldr	s13, [r2, #4]
 23e66d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
    if (sum >= ws_sum) {
 23e66d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 23e66dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e66e0:	bfa4      	itt	ge
 23e66e2:	4634      	movge	r4, r6
      ws_sum = sum;
 23e66e4:	eeb0 7a67 	vmovge.f32	s14, s15
  for (int i=0; i<(WIND_READINGS-2); i++) {  // subtract 2 because we are looking ahead at the next 2 buckets
 23e66e8:	3d01      	subs	r5, #1
 23e66ea:	d1da      	bne.n	23e66a2 <_Z15Wind_GustUpdatev+0x1a>
      ws_bucket = bucket;
    }
    bucket = (++bucket) % WIND_READINGS;
  }
  wind.gust = ws_sum/3;
 23e66ec:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
  
  // Determine Gust Direction 
  double NS_vector_sum = 0.0;
  double EW_vector_sum = 0.0;
 23e66f0:	ed9f 8b45 	vldr	d8, [pc, #276]	; 23e6808 <_Z15Wind_GustUpdatev+0x180>
  wind.gust = ws_sum/3;
 23e66f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 23e66f8:	f04f 0803 	mov.w	r8, #3
 23e66fc:	edc1 7a79 	vstr	s15, [r1, #484]	; 0x1e4
  double r;
  float s;
  int d, i, rtod;
  bool ws_zero = true;
 23e6700:	2501      	movs	r5, #1
  double NS_vector_sum = 0.0;
 23e6702:	eeb0 9a48 	vmov.f32	s18, s16
 23e6706:	eef0 9a68 	vmov.f32	s19, s17

    // Flag we have wind speed
    if (s > 0) {
      ws_zero = false;  
    }
    r = (d * 71) / 4068.0;
 23e670a:	f04f 0b47 	mov.w	fp, #71	; 0x47
    
    // North South Direction 
    NS_vector_sum += cos(r) * s;
    EW_vector_sum += sin(r) * s;

    bucket = (++bucket) % WIND_READINGS;
 23e670e:	f04f 093c 	mov.w	r9, #60	; 0x3c
    d = wind.bucket[bucket].direction;
 23e6712:	f8df a10c 	ldr.w	sl, [pc, #268]	; 23e6820 <_Z15Wind_GustUpdatev+0x198>
 23e6716:	f85a 0034 	ldr.w	r0, [sl, r4, lsl #3]
    if (d == -1) {
 23e671a:	1c43      	adds	r3, r0, #1
 23e671c:	d072      	beq.n	23e6804 <_Z15Wind_GustUpdatev+0x17c>
    s = wind.bucket[bucket].speed;
 23e671e:	eb0a 03c4 	add.w	r3, sl, r4, lsl #3
 23e6722:	ed93 ba01 	vldr	s22, [r3, #4]
      ws_zero = false;  
 23e6726:	eeb5 ba40 	vcmp.f32	s22, #0.0
 23e672a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    r = (d * 71) / 4068.0;
 23e672e:	fb0b f000 	mul.w	r0, fp, r0
      ws_zero = false;  
 23e6732:	bfc8      	it	gt
 23e6734:	2500      	movgt	r5, #0
    r = (d * 71) / 4068.0;
 23e6736:	f7fb ff11 	bl	23e255c <__aeabi_i2d>
 23e673a:	a335      	add	r3, pc, #212	; (adr r3, 23e6810 <_Z15Wind_GustUpdatev+0x188>)
 23e673c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e6740:	f7fc f8a0 	bl	23e2884 <__aeabi_ddiv>
    NS_vector_sum += cos(r) * s;
 23e6744:	ec41 0b10 	vmov	d0, r0, r1
    r = (d * 71) / 4068.0;
 23e6748:	ec41 0b1a 	vmov	d10, r0, r1
    NS_vector_sum += cos(r) * s;
 23e674c:	f013 fad0 	bl	23f9cf0 <cos>
 23e6750:	ee1b 0a10 	vmov	r0, s22
 23e6754:	ed8d 0b00 	vstr	d0, [sp]
 23e6758:	f7fb ff12 	bl	23e2580 <__aeabi_f2d>
 23e675c:	4602      	mov	r2, r0
 23e675e:	460b      	mov	r3, r1
 23e6760:	4606      	mov	r6, r0
 23e6762:	460f      	mov	r7, r1
 23e6764:	e9dd 0100 	ldrd	r0, r1, [sp]
 23e6768:	f7fb ff62 	bl	23e2630 <__aeabi_dmul>
 23e676c:	4602      	mov	r2, r0
 23e676e:	460b      	mov	r3, r1
 23e6770:	ec51 0b19 	vmov	r0, r1, d9
 23e6774:	f7fb fda6 	bl	23e22c4 <__adddf3>
    EW_vector_sum += sin(r) * s;
 23e6778:	eeb0 0a4a 	vmov.f32	s0, s20
 23e677c:	eef0 0a6a 	vmov.f32	s1, s21
    NS_vector_sum += cos(r) * s;
 23e6780:	ec41 0b19 	vmov	d9, r0, r1
    EW_vector_sum += sin(r) * s;
 23e6784:	f013 fba8 	bl	23f9ed8 <sin>
 23e6788:	4630      	mov	r0, r6
 23e678a:	ec53 2b10 	vmov	r2, r3, d0
 23e678e:	4639      	mov	r1, r7
 23e6790:	f7fb ff4e 	bl	23e2630 <__aeabi_dmul>
    bucket = (++bucket) % WIND_READINGS;
 23e6794:	3401      	adds	r4, #1
    EW_vector_sum += sin(r) * s;
 23e6796:	460b      	mov	r3, r1
 23e6798:	4602      	mov	r2, r0
 23e679a:	ec51 0b18 	vmov	r0, r1, d8
 23e679e:	f7fb fd91 	bl	23e22c4 <__adddf3>
    bucket = (++bucket) % WIND_READINGS;
 23e67a2:	fb94 f3f9 	sdiv	r3, r4, r9
  for (i=0; i<3; i++) {
 23e67a6:	f1b8 0801 	subs.w	r8, r8, #1
    EW_vector_sum += sin(r) * s;
 23e67aa:	ec41 0b18 	vmov	d8, r0, r1
    bucket = (++bucket) % WIND_READINGS;
 23e67ae:	fb09 4413 	mls	r4, r9, r3, r4
  for (i=0; i<3; i++) {
 23e67b2:	d1b0      	bne.n	23e6716 <_Z15Wind_GustUpdatev+0x8e>
  }

  rtod = (atan2(EW_vector_sum, NS_vector_sum)*4068.0)/71.0;
 23e67b4:	eeb0 1a49 	vmov.f32	s2, s18
 23e67b8:	eef0 1a69 	vmov.f32	s3, s19
 23e67bc:	eeb0 0a48 	vmov.f32	s0, s16
 23e67c0:	eef0 0a68 	vmov.f32	s1, s17
 23e67c4:	f013 fbdc 	bl	23f9f80 <atan2>
 23e67c8:	a311      	add	r3, pc, #68	; (adr r3, 23e6810 <_Z15Wind_GustUpdatev+0x188>)
 23e67ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e67ce:	ec51 0b10 	vmov	r0, r1, d0
 23e67d2:	f7fb ff2d 	bl	23e2630 <__aeabi_dmul>
 23e67d6:	a310      	add	r3, pc, #64	; (adr r3, 23e6818 <_Z15Wind_GustUpdatev+0x190>)
 23e67d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e67dc:	f7fc f852 	bl	23e2884 <__aeabi_ddiv>
 23e67e0:	f7fc f9d6 	bl	23e2b90 <__aeabi_d2iz>
  if (rtod<0) {
 23e67e4:	2800      	cmp	r0, #0
    rtod = 360 + rtod;
 23e67e6:	bfb8      	it	lt
 23e67e8:	f500 70b4 	addlt.w	r0, r0, #360	; 0x168
  }

  // If all the winds speeds are 0 or we have a -1 direction then set -1 for direction.
  if (ws_zero) {
    wind.gust_direction = -1;
 23e67ec:	2d00      	cmp	r5, #0
 23e67ee:	bf18      	it	ne
 23e67f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23e67f4:	4b0a      	ldr	r3, [pc, #40]	; (23e6820 <_Z15Wind_GustUpdatev+0x198>)
 23e67f6:	f8c3 01e8 	str.w	r0, [r3, #488]	; 0x1e8
  }
  else {
    wind.gust_direction = rtod;
  }
}
 23e67fa:	b003      	add	sp, #12
 23e67fc:	ecbd 8b08 	vpop	{d8-d11}
 23e6800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ws_zero = true;
 23e6804:	2501      	movs	r5, #1
 23e6806:	e7d5      	b.n	23e67b4 <_Z15Wind_GustUpdatev+0x12c>
	...
 23e6814:	40afc800 	.word	0x40afc800
 23e6818:	00000000 	.word	0x00000000
 23e681c:	4051c000 	.word	0x4051c000
 23e6820:	1007ac5c 	.word	0x1007ac5c
 23e6824:	00000000 	.word	0x00000000

023e6828 <_Z16Wind_TakeReadingv>:
/*
 * ======================================================================================================================
 * Wind_TakeReading() - Wind direction and speed, measure every second             
 * ======================================================================================================================
 */
void Wind_TakeReading() {
 23e6828:	b538      	push	{r3, r4, r5, lr}
  wind.bucket[wind.bucket_idx].direction = (int) Wind_SampleDirection();
 23e682a:	4c0d      	ldr	r4, [pc, #52]	; (23e6860 <_Z16Wind_TakeReadingv+0x38>)
 23e682c:	f8d4 51e0 	ldr.w	r5, [r4, #480]	; 0x1e0
 23e6830:	f7ff fdfa 	bl	23e6428 <_Z20Wind_SampleDirectionv>
 23e6834:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
  wind.bucket[wind.bucket_idx].speed = Wind_SampleSpeed();
 23e6838:	f8d4 51e0 	ldr.w	r5, [r4, #480]	; 0x1e0
 23e683c:	f7ff fd88 	bl	23e6350 <_Z16Wind_SampleSpeedv>
  wind.bucket_idx = (++wind.bucket_idx) % WIND_READINGS; // Advance bucket index for next reading
 23e6840:	223c      	movs	r2, #60	; 0x3c
 23e6842:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
  wind.bucket[wind.bucket_idx].speed = Wind_SampleSpeed();
 23e6846:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
  wind.bucket_idx = (++wind.bucket_idx) % WIND_READINGS; // Advance bucket index for next reading
 23e684a:	3301      	adds	r3, #1
 23e684c:	fb93 f1f2 	sdiv	r1, r3, r2
  wind.bucket[wind.bucket_idx].speed = Wind_SampleSpeed();
 23e6850:	ed85 0a01 	vstr	s0, [r5, #4]
  wind.bucket_idx = (++wind.bucket_idx) % WIND_READINGS; // Advance bucket index for next reading
 23e6854:	fb02 3311 	mls	r3, r2, r1, r3
 23e6858:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
}
 23e685c:	bd38      	pop	{r3, r4, r5, pc}
 23e685e:	bf00      	nop
 23e6860:	1007ac5c 	.word	0x1007ac5c

023e6864 <_Z17I2C_Check_Sensorsv>:
/*
 * ======================================================================================================================
 * I2C_Check_Sensors() - See if each I2C sensor responds on the bus and take action accordingly             
 * ======================================================================================================================
 */
void I2C_Check_Sensors() {
 23e6864:	b570      	push	{r4, r5, r6, lr}

  // BMX_1 Barometric Pressure 
  if (I2C_Device_Exist (BMX_ADDRESS_1)) {
 23e6866:	2077      	movs	r0, #119	; 0x77
 23e6868:	f7fd fc85 	bl	23e4176 <_Z16I2C_Device_Existh>
 23e686c:	4ca7      	ldr	r4, [pc, #668]	; (23e6b0c <_Z17I2C_Check_Sensorsv+0x2a8>)
    // Sensor online but our state had it offline
    if (BMX_1_exists == false) {
 23e686e:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (BMX_ADDRESS_1)) {
 23e6870:	2800      	cmp	r0, #0
 23e6872:	f000 80ef 	beq.w	23e6a54 <_Z17I2C_Check_Sensorsv+0x1f0>
    if (BMX_1_exists == false) {
 23e6876:	b99b      	cbnz	r3, 23e68a0 <_Z17I2C_Check_Sensorsv+0x3c>
      if (BMX_1_chip_id == BMP280_CHIP_ID) {
 23e6878:	4ba5      	ldr	r3, [pc, #660]	; (23e6b10 <_Z17I2C_Check_Sensorsv+0x2ac>)
 23e687a:	781a      	ldrb	r2, [r3, #0]
 23e687c:	2a58      	cmp	r2, #88	; 0x58
 23e687e:	f040 80b1 	bne.w	23e69e4 <_Z17I2C_Check_Sensorsv+0x180>
        if (bmp1.begin(BMX_ADDRESS_1)) { 
 23e6882:	2177      	movs	r1, #119	; 0x77
 23e6884:	48a3      	ldr	r0, [pc, #652]	; (23e6b14 <_Z17I2C_Check_Sensorsv+0x2b0>)
 23e6886:	f007 fbb3 	bl	23edff0 <_ZN15Adafruit_BMP2805beginEhh>
 23e688a:	b148      	cbz	r0, 23e68a0 <_Z17I2C_Check_Sensorsv+0x3c>
          BMX_1_exists = true;
 23e688c:	2301      	movs	r3, #1
          Output ("BMP1 ONLINE");
 23e688e:	48a2      	ldr	r0, [pc, #648]	; (23e6b18 <_Z17I2C_Check_Sensorsv+0x2b4>)
          BMX_1_exists = true;
 23e6890:	7023      	strb	r3, [r4, #0]
        }        
      }
      else {
        if (bm31.begin_I2C(BMX_ADDRESS_1)) { 
          BMX_1_exists = true;
          Output ("BM31 ONLINE");
 23e6892:	f7fd fe79 	bl	23e4588 <_Z6OutputPKc>
          SystemStatusBits &= ~SSB_BMX_1; // Turn Off Bit
 23e6896:	4aa1      	ldr	r2, [pc, #644]	; (23e6b1c <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e6898:	6813      	ldr	r3, [r2, #0]
 23e689a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  else {
    // Sensor offline but our state has it online
    if (BMX_1_exists == true) {
      BMX_1_exists = false;
      Output ("BMX1 OFFLINE");
      SystemStatusBits |= SSB_BMX_1;  // Turn On Bit 
 23e689e:	6013      	str	r3, [r2, #0]
    }    
  }

  // BMX_2 Barometric Pressure 
  if (I2C_Device_Exist (BMX_ADDRESS_2)) {
 23e68a0:	2076      	movs	r0, #118	; 0x76
 23e68a2:	f7fd fc68 	bl	23e4176 <_Z16I2C_Device_Existh>
 23e68a6:	4d9e      	ldr	r5, [pc, #632]	; (23e6b20 <_Z17I2C_Check_Sensorsv+0x2bc>)
    // Sensor online but our state had it offline
    if (BMX_2_exists == false) {
 23e68a8:	782b      	ldrb	r3, [r5, #0]
  if (I2C_Device_Exist (BMX_ADDRESS_2)) {
 23e68aa:	2800      	cmp	r0, #0
 23e68ac:	f000 8116 	beq.w	23e6adc <_Z17I2C_Check_Sensorsv+0x278>
    if (BMX_2_exists == false) {
 23e68b0:	b99b      	cbnz	r3, 23e68da <_Z17I2C_Check_Sensorsv+0x76>
      if (BMX_2_chip_id == BMP280_CHIP_ID) {
 23e68b2:	4b9c      	ldr	r3, [pc, #624]	; (23e6b24 <_Z17I2C_Check_Sensorsv+0x2c0>)
 23e68b4:	781a      	ldrb	r2, [r3, #0]
 23e68b6:	2a58      	cmp	r2, #88	; 0x58
 23e68b8:	f040 80d8 	bne.w	23e6a6c <_Z17I2C_Check_Sensorsv+0x208>
        if (bmp2.begin(BMX_ADDRESS_2)) { 
 23e68bc:	2176      	movs	r1, #118	; 0x76
 23e68be:	489a      	ldr	r0, [pc, #616]	; (23e6b28 <_Z17I2C_Check_Sensorsv+0x2c4>)
 23e68c0:	f007 fb96 	bl	23edff0 <_ZN15Adafruit_BMP2805beginEhh>
 23e68c4:	b148      	cbz	r0, 23e68da <_Z17I2C_Check_Sensorsv+0x76>
          BMX_2_exists = true;
 23e68c6:	2301      	movs	r3, #1
          Output ("BMP2 ONLINE");
 23e68c8:	4898      	ldr	r0, [pc, #608]	; (23e6b2c <_Z17I2C_Check_Sensorsv+0x2c8>)
          BMX_2_exists = true;
 23e68ca:	702b      	strb	r3, [r5, #0]
        }        
      }
      else {
         if (bm32.begin_I2C(BMX_ADDRESS_2)) { 
          BMX_2_exists = true;
          Output ("BM32 ONLINE");
 23e68cc:	f7fd fe5c 	bl	23e4588 <_Z6OutputPKc>
          SystemStatusBits &= ~SSB_BMX_2; // Turn Off Bit
 23e68d0:	4a92      	ldr	r2, [pc, #584]	; (23e6b1c <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e68d2:	6813      	ldr	r3, [r2, #0]
 23e68d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  else {
    // Sensor offline but we our state has it online
    if (BMX_2_exists == true) {
      BMX_2_exists = false;
      Output ("BMX2 OFFLINE");
      SystemStatusBits |= SSB_BMX_2;  // Turn On Bit 
 23e68d8:	6013      	str	r3, [r2, #0]
    }    
  }

  // HTU21DF Humidity & Temp Sensor
  if (I2C_Device_Exist (HTU21DF_I2CADDR)) {
 23e68da:	2040      	movs	r0, #64	; 0x40
 23e68dc:	f7fd fc4b 	bl	23e4176 <_Z16I2C_Device_Existh>
 23e68e0:	4c93      	ldr	r4, [pc, #588]	; (23e6b30 <_Z17I2C_Check_Sensorsv+0x2cc>)
    // Sensor online but our state had it offline
    if (HTU21DF_exists == false) {
 23e68e2:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (HTU21DF_I2CADDR)) {
 23e68e4:	2800      	cmp	r0, #0
 23e68e6:	f000 8105 	beq.w	23e6af4 <_Z17I2C_Check_Sensorsv+0x290>
    if (HTU21DF_exists == false) {
 23e68ea:	b983      	cbnz	r3, 23e690e <_Z17I2C_Check_Sensorsv+0xaa>
      // See if we can bring sensor online
      if (htu.begin()) {
 23e68ec:	f012 ff9a 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e68f0:	4601      	mov	r1, r0
 23e68f2:	4890      	ldr	r0, [pc, #576]	; (23e6b34 <_Z17I2C_Check_Sensorsv+0x2d0>)
 23e68f4:	f008 fdee 	bl	23ef4d4 <_ZN16Adafruit_HTU21DF5beginEP7TwoWire>
 23e68f8:	b148      	cbz	r0, 23e690e <_Z17I2C_Check_Sensorsv+0xaa>
        HTU21DF_exists = true;
 23e68fa:	2301      	movs	r3, #1
        Output ("HTU ONLINE");
 23e68fc:	488e      	ldr	r0, [pc, #568]	; (23e6b38 <_Z17I2C_Check_Sensorsv+0x2d4>)
        HTU21DF_exists = true;
 23e68fe:	7023      	strb	r3, [r4, #0]
        Output ("HTU ONLINE");
 23e6900:	f7fd fe42 	bl	23e4588 <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_HTU21DF; // Turn Off Bit
 23e6904:	4a85      	ldr	r2, [pc, #532]	; (23e6b1c <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e6906:	6813      	ldr	r3, [r2, #0]
 23e6908:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  else {
    // Sensor offline but we our state has it online
    if (HTU21DF_exists == true) {
      HTU21DF_exists = false;
      Output ("HTU OFFLINE");
      SystemStatusBits |= SSB_HTU21DF;  // Turn On Bit
 23e690c:	6013      	str	r3, [r2, #0]
    }   
  }
#endif

  // SI1145 UV index & IR & Visible Sensor
  if (I2C_Device_Exist (SI1145_ADDR)) {
 23e690e:	2060      	movs	r0, #96	; 0x60
 23e6910:	f7fd fc31 	bl	23e4176 <_Z16I2C_Device_Existh>
 23e6914:	4c89      	ldr	r4, [pc, #548]	; (23e6b3c <_Z17I2C_Check_Sensorsv+0x2d8>)
    // Sensor online but our state had it offline
    if (SI1145_exists == false) {
 23e6916:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (SI1145_ADDR)) {
 23e6918:	2800      	cmp	r0, #0
 23e691a:	f000 8141 	beq.w	23e6ba0 <_Z17I2C_Check_Sensorsv+0x33c>
    if (SI1145_exists == false) {
 23e691e:	b98b      	cbnz	r3, 23e6944 <_Z17I2C_Check_Sensorsv+0xe0>
      // See if we can bring sensore online
      if (uv.begin()) {
 23e6920:	f012 ff80 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e6924:	2160      	movs	r1, #96	; 0x60
 23e6926:	4602      	mov	r2, r0
 23e6928:	4885      	ldr	r0, [pc, #532]	; (23e6b40 <_Z17I2C_Check_Sensorsv+0x2dc>)
 23e692a:	f009 fa7b 	bl	23efe24 <_ZN15Adafruit_SI11455beginEhP7TwoWire>
 23e692e:	b148      	cbz	r0, 23e6944 <_Z17I2C_Check_Sensorsv+0xe0>
        SI1145_exists = true;
 23e6930:	2301      	movs	r3, #1
        Output ("SI ONLINE");
 23e6932:	4884      	ldr	r0, [pc, #528]	; (23e6b44 <_Z17I2C_Check_Sensorsv+0x2e0>)
        SI1145_exists = true;
 23e6934:	7023      	strb	r3, [r4, #0]
        Output ("SI ONLINE");
 23e6936:	f7fd fe27 	bl	23e4588 <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_SI1145; // Turn Off Bit
 23e693a:	4a78      	ldr	r2, [pc, #480]	; (23e6b1c <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e693c:	6813      	ldr	r3, [r2, #0]
 23e693e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  else {
    // Sensor offline but we our state has it online
    if (SI1145_exists == true) {
      SI1145_exists = false;
      Output ("SI OFFLINE");
      SystemStatusBits |= SSB_SI1145;  // Turn On Bit
 23e6942:	6013      	str	r3, [r2, #0]
    }   
  }

  // AS5600 Wind Direction
  if (I2C_Device_Exist (AS5600_ADR)) {
 23e6944:	4b80      	ldr	r3, [pc, #512]	; (23e6b48 <_Z17I2C_Check_Sensorsv+0x2e4>)
 23e6946:	7818      	ldrb	r0, [r3, #0]
 23e6948:	f7fd fc15 	bl	23e4176 <_Z16I2C_Device_Existh>
 23e694c:	4b7f      	ldr	r3, [pc, #508]	; (23e6b4c <_Z17I2C_Check_Sensorsv+0x2e8>)
    // Sensor online but our state had it offline
    if (AS5600_exists == false) {
 23e694e:	781a      	ldrb	r2, [r3, #0]
  if (I2C_Device_Exist (AS5600_ADR)) {
 23e6950:	2800      	cmp	r0, #0
 23e6952:	f000 8131 	beq.w	23e6bb8 <_Z17I2C_Check_Sensorsv+0x354>
    if (AS5600_exists == false) {
 23e6956:	b94a      	cbnz	r2, 23e696c <_Z17I2C_Check_Sensorsv+0x108>
      AS5600_exists = true;
 23e6958:	2201      	movs	r2, #1
      Output ("WD ONLINE");
 23e695a:	487d      	ldr	r0, [pc, #500]	; (23e6b50 <_Z17I2C_Check_Sensorsv+0x2ec>)
      AS5600_exists = true;
 23e695c:	701a      	strb	r2, [r3, #0]
      Output ("WD ONLINE");
 23e695e:	f7fd fe13 	bl	23e4588 <_Z6OutputPKc>
      SystemStatusBits &= ~SSB_AS5600; // Turn Off Bit
 23e6962:	4a6e      	ldr	r2, [pc, #440]	; (23e6b1c <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e6964:	6813      	ldr	r3, [r2, #0]
 23e6966:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  else {
    // Sensor offline but we our state has it online
    if (AS5600_exists == true) {
      AS5600_exists = false;
      Output ("WD OFFLINE");
      SystemStatusBits |= SSB_AS5600;  // Turn On Bit
 23e696a:	6013      	str	r3, [r2, #0]
    }   
  }

  // VEML7700 Lux 
  if (I2C_Device_Exist (VEML7700_ADDRESS)) {
 23e696c:	2010      	movs	r0, #16
 23e696e:	f7fd fc02 	bl	23e4176 <_Z16I2C_Device_Existh>
 23e6972:	4c78      	ldr	r4, [pc, #480]	; (23e6b54 <_Z17I2C_Check_Sensorsv+0x2f0>)
    // Sensor online but our state had it offline
    if (VEML7700_exists == false) {
 23e6974:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (VEML7700_ADDRESS)) {
 23e6976:	2800      	cmp	r0, #0
 23e6978:	f000 812a 	beq.w	23e6bd0 <_Z17I2C_Check_Sensorsv+0x36c>
    if (VEML7700_exists == false) {
 23e697c:	b983      	cbnz	r3, 23e69a0 <_Z17I2C_Check_Sensorsv+0x13c>
      // See if we can bring sensor online
      if (veml.begin()) {
 23e697e:	f012 ff51 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e6982:	4601      	mov	r1, r0
 23e6984:	4874      	ldr	r0, [pc, #464]	; (23e6b58 <_Z17I2C_Check_Sensorsv+0x2f4>)
 23e6986:	f00a f844 	bl	23f0a12 <_ZN17Adafruit_VEML77005beginEP7TwoWire>
 23e698a:	b148      	cbz	r0, 23e69a0 <_Z17I2C_Check_Sensorsv+0x13c>
        VEML7700_exists = true;
 23e698c:	2301      	movs	r3, #1
        Output ("VLX ONLINE");
 23e698e:	4873      	ldr	r0, [pc, #460]	; (23e6b5c <_Z17I2C_Check_Sensorsv+0x2f8>)
        VEML7700_exists = true;
 23e6990:	7023      	strb	r3, [r4, #0]
        Output ("VLX ONLINE");
 23e6992:	f7fd fdf9 	bl	23e4588 <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_VLX; // Turn Off Bit
 23e6996:	4a61      	ldr	r2, [pc, #388]	; (23e6b1c <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e6998:	6813      	ldr	r3, [r2, #0]
 23e699a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
  else {
    // Sensor offline but we our state has it online
    if (VEML7700_exists == true) {
      VEML7700_exists = false;
      Output ("VLX OFFLINE");
      SystemStatusBits |= SSB_VLX;  // Turn On Bit
 23e699e:	6013      	str	r3, [r2, #0]
    }   
  }

  // PM25AQI
  if (I2C_Device_Exist (PM25AQI_ADDRESS)) {
 23e69a0:	2012      	movs	r0, #18
 23e69a2:	f7fd fbe8 	bl	23e4176 <_Z16I2C_Device_Existh>
 23e69a6:	4c6e      	ldr	r4, [pc, #440]	; (23e6b60 <_Z17I2C_Check_Sensorsv+0x2fc>)
    // Sensor online but our state had it offline
    if (PM25AQI_exists == false) {
 23e69a8:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (PM25AQI_ADDRESS)) {
 23e69aa:	2800      	cmp	r0, #0
 23e69ac:	f000 811c 	beq.w	23e6be8 <_Z17I2C_Check_Sensorsv+0x384>
    if (PM25AQI_exists == false) {
 23e69b0:	2b00      	cmp	r3, #0
 23e69b2:	f040 8123 	bne.w	23e6bfc <_Z17I2C_Check_Sensorsv+0x398>
      // See if we can bring sensor online
      if (pmaq.begin_I2C()) {
 23e69b6:	f012 ff35 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e69ba:	4601      	mov	r1, r0
 23e69bc:	4869      	ldr	r0, [pc, #420]	; (23e6b64 <_Z17I2C_Check_Sensorsv+0x300>)
 23e69be:	f009 f812 	bl	23ef9e6 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>
 23e69c2:	2800      	cmp	r0, #0
 23e69c4:	f000 811a 	beq.w	23e6bfc <_Z17I2C_Check_Sensorsv+0x398>
        PM25AQI_exists = true;
 23e69c8:	2301      	movs	r3, #1
        Output ("PM ONLINE");
 23e69ca:	4867      	ldr	r0, [pc, #412]	; (23e6b68 <_Z17I2C_Check_Sensorsv+0x304>)
        PM25AQI_exists = true;
 23e69cc:	7023      	strb	r3, [r4, #0]
        Output ("PM ONLINE");
 23e69ce:	f7fd fddb 	bl	23e4588 <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
 23e69d2:	4a52      	ldr	r2, [pc, #328]	; (23e6b1c <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e69d4:	6813      	ldr	r3, [r2, #0]
 23e69d6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 23e69da:	6013      	str	r3, [r2, #0]
      PM25AQI_exists = false;
      Output ("PM OFFLINE");
      SystemStatusBits |= SSB_PM25AQI;  // Turn On Bit
    }   
  }
}
 23e69dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pm25aqi_clear();
 23e69e0:	f7ff b8f8 	b.w	23e5bd4 <_Z13pm25aqi_clearv>
      else if (BMX_1_chip_id == BME280_BMP390_CHIP_ID) {
 23e69e4:	2a60      	cmp	r2, #96	; 0x60
 23e69e6:	d127      	bne.n	23e6a38 <_Z17I2C_Check_Sensorsv+0x1d4>
        if (BMX_1_type == BMX_TYPE_BME280) {
 23e69e8:	4d60      	ldr	r5, [pc, #384]	; (23e6b6c <_Z17I2C_Check_Sensorsv+0x308>)
 23e69ea:	782b      	ldrb	r3, [r5, #0]
 23e69ec:	2b02      	cmp	r3, #2
 23e69ee:	d111      	bne.n	23e6a14 <_Z17I2C_Check_Sensorsv+0x1b0>
          if (bme1.begin(BMX_ADDRESS_1)) { 
 23e69f0:	f012 ff18 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e69f4:	2177      	movs	r1, #119	; 0x77
 23e69f6:	4602      	mov	r2, r0
 23e69f8:	485d      	ldr	r0, [pc, #372]	; (23e6b70 <_Z17I2C_Check_Sensorsv+0x30c>)
 23e69fa:	f006 ff04 	bl	23ed806 <_ZN15Adafruit_BME2805beginEhP7TwoWire>
 23e69fe:	b148      	cbz	r0, 23e6a14 <_Z17I2C_Check_Sensorsv+0x1b0>
            BMX_1_exists = true;
 23e6a00:	2301      	movs	r3, #1
            Output ("BME1 ONLINE");
 23e6a02:	485c      	ldr	r0, [pc, #368]	; (23e6b74 <_Z17I2C_Check_Sensorsv+0x310>)
            BMX_1_exists = true;
 23e6a04:	7023      	strb	r3, [r4, #0]
            Output ("BME1 ONLINE");
 23e6a06:	f7fd fdbf 	bl	23e4588 <_Z6OutputPKc>
            SystemStatusBits &= ~SSB_BMX_1; // Turn Off Bit
 23e6a0a:	4a44      	ldr	r2, [pc, #272]	; (23e6b1c <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e6a0c:	6813      	ldr	r3, [r2, #0]
 23e6a0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 23e6a12:	6013      	str	r3, [r2, #0]
        if (BMX_1_type == BMX_TYPE_BMP390) {
 23e6a14:	782b      	ldrb	r3, [r5, #0]
 23e6a16:	2b04      	cmp	r3, #4
 23e6a18:	f47f af42 	bne.w	23e68a0 <_Z17I2C_Check_Sensorsv+0x3c>
          if (bm31.begin_I2C(BMX_ADDRESS_1)) {
 23e6a1c:	f012 ff02 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e6a20:	2177      	movs	r1, #119	; 0x77
 23e6a22:	4602      	mov	r2, r0
 23e6a24:	4854      	ldr	r0, [pc, #336]	; (23e6b78 <_Z17I2C_Check_Sensorsv+0x314>)
 23e6a26:	f007 fce5 	bl	23ee3f4 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e6a2a:	2800      	cmp	r0, #0
 23e6a2c:	f43f af38 	beq.w	23e68a0 <_Z17I2C_Check_Sensorsv+0x3c>
            BMX_1_exists = true;
 23e6a30:	2301      	movs	r3, #1
            Output ("BMP390_1 ONLINE");
 23e6a32:	4852      	ldr	r0, [pc, #328]	; (23e6b7c <_Z17I2C_Check_Sensorsv+0x318>)
            BMX_1_exists = true;
 23e6a34:	7023      	strb	r3, [r4, #0]
            Output ("BMP390_1 ONLINE");
 23e6a36:	e72c      	b.n	23e6892 <_Z17I2C_Check_Sensorsv+0x2e>
        if (bm31.begin_I2C(BMX_ADDRESS_1)) { 
 23e6a38:	f012 fef4 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e6a3c:	2177      	movs	r1, #119	; 0x77
 23e6a3e:	4602      	mov	r2, r0
 23e6a40:	484d      	ldr	r0, [pc, #308]	; (23e6b78 <_Z17I2C_Check_Sensorsv+0x314>)
 23e6a42:	f007 fcd7 	bl	23ee3f4 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e6a46:	2800      	cmp	r0, #0
 23e6a48:	f43f af2a 	beq.w	23e68a0 <_Z17I2C_Check_Sensorsv+0x3c>
          BMX_1_exists = true;
 23e6a4c:	2301      	movs	r3, #1
          Output ("BM31 ONLINE");
 23e6a4e:	484c      	ldr	r0, [pc, #304]	; (23e6b80 <_Z17I2C_Check_Sensorsv+0x31c>)
          BMX_1_exists = true;
 23e6a50:	7023      	strb	r3, [r4, #0]
          Output ("BM31 ONLINE");
 23e6a52:	e71e      	b.n	23e6892 <_Z17I2C_Check_Sensorsv+0x2e>
    if (BMX_1_exists == true) {
 23e6a54:	2b00      	cmp	r3, #0
 23e6a56:	f43f af23 	beq.w	23e68a0 <_Z17I2C_Check_Sensorsv+0x3c>
      BMX_1_exists = false;
 23e6a5a:	7020      	strb	r0, [r4, #0]
      Output ("BMX1 OFFLINE");
 23e6a5c:	4849      	ldr	r0, [pc, #292]	; (23e6b84 <_Z17I2C_Check_Sensorsv+0x320>)
 23e6a5e:	f7fd fd93 	bl	23e4588 <_Z6OutputPKc>
      SystemStatusBits |= SSB_BMX_1;  // Turn On Bit 
 23e6a62:	4a2e      	ldr	r2, [pc, #184]	; (23e6b1c <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e6a64:	6813      	ldr	r3, [r2, #0]
 23e6a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 23e6a6a:	e718      	b.n	23e689e <_Z17I2C_Check_Sensorsv+0x3a>
      else if (BMX_2_chip_id == BME280_BMP390_CHIP_ID) {
 23e6a6c:	2a60      	cmp	r2, #96	; 0x60
 23e6a6e:	d127      	bne.n	23e6ac0 <_Z17I2C_Check_Sensorsv+0x25c>
        if (BMX_2_type == BMX_TYPE_BME280) {
 23e6a70:	4e45      	ldr	r6, [pc, #276]	; (23e6b88 <_Z17I2C_Check_Sensorsv+0x324>)
 23e6a72:	7833      	ldrb	r3, [r6, #0]
 23e6a74:	2b02      	cmp	r3, #2
 23e6a76:	d111      	bne.n	23e6a9c <_Z17I2C_Check_Sensorsv+0x238>
          if (bme1.begin(BMX_ADDRESS_2)) { 
 23e6a78:	f012 fed4 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e6a7c:	2176      	movs	r1, #118	; 0x76
 23e6a7e:	4602      	mov	r2, r0
 23e6a80:	483b      	ldr	r0, [pc, #236]	; (23e6b70 <_Z17I2C_Check_Sensorsv+0x30c>)
 23e6a82:	f006 fec0 	bl	23ed806 <_ZN15Adafruit_BME2805beginEhP7TwoWire>
 23e6a86:	b148      	cbz	r0, 23e6a9c <_Z17I2C_Check_Sensorsv+0x238>
            BMX_2_exists = true;
 23e6a88:	2301      	movs	r3, #1
            Output ("BME2 ONLINE");
 23e6a8a:	4840      	ldr	r0, [pc, #256]	; (23e6b8c <_Z17I2C_Check_Sensorsv+0x328>)
            BMX_2_exists = true;
 23e6a8c:	702b      	strb	r3, [r5, #0]
            Output ("BME2 ONLINE");
 23e6a8e:	f7fd fd7b 	bl	23e4588 <_Z6OutputPKc>
            SystemStatusBits &= ~SSB_BMX_2; // Turn Off Bit
 23e6a92:	4a22      	ldr	r2, [pc, #136]	; (23e6b1c <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e6a94:	6813      	ldr	r3, [r2, #0]
 23e6a96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 23e6a9a:	6013      	str	r3, [r2, #0]
        if (BMX_2_type == BMX_TYPE_BMP390) {
 23e6a9c:	7833      	ldrb	r3, [r6, #0]
 23e6a9e:	2b04      	cmp	r3, #4
 23e6aa0:	f47f af1b 	bne.w	23e68da <_Z17I2C_Check_Sensorsv+0x76>
          if (bm31.begin_I2C(BMX_ADDRESS_2)) {
 23e6aa4:	f012 febe 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e6aa8:	2176      	movs	r1, #118	; 0x76
 23e6aaa:	4602      	mov	r2, r0
 23e6aac:	4832      	ldr	r0, [pc, #200]	; (23e6b78 <_Z17I2C_Check_Sensorsv+0x314>)
 23e6aae:	f007 fca1 	bl	23ee3f4 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e6ab2:	2800      	cmp	r0, #0
 23e6ab4:	f43f af11 	beq.w	23e68da <_Z17I2C_Check_Sensorsv+0x76>
            BMX_1_exists = true;
 23e6ab8:	2301      	movs	r3, #1
            Output ("BMP390_1 ONLINE");
 23e6aba:	4830      	ldr	r0, [pc, #192]	; (23e6b7c <_Z17I2C_Check_Sensorsv+0x318>)
            BMX_1_exists = true;
 23e6abc:	7023      	strb	r3, [r4, #0]
            Output ("BMP390_1 ONLINE");
 23e6abe:	e705      	b.n	23e68cc <_Z17I2C_Check_Sensorsv+0x68>
         if (bm32.begin_I2C(BMX_ADDRESS_2)) { 
 23e6ac0:	f012 feb0 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e6ac4:	2176      	movs	r1, #118	; 0x76
 23e6ac6:	4602      	mov	r2, r0
 23e6ac8:	4831      	ldr	r0, [pc, #196]	; (23e6b90 <_Z17I2C_Check_Sensorsv+0x32c>)
 23e6aca:	f007 fc93 	bl	23ee3f4 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e6ace:	2800      	cmp	r0, #0
 23e6ad0:	f43f af03 	beq.w	23e68da <_Z17I2C_Check_Sensorsv+0x76>
          BMX_2_exists = true;
 23e6ad4:	2301      	movs	r3, #1
          Output ("BM32 ONLINE");
 23e6ad6:	482f      	ldr	r0, [pc, #188]	; (23e6b94 <_Z17I2C_Check_Sensorsv+0x330>)
          BMX_2_exists = true;
 23e6ad8:	702b      	strb	r3, [r5, #0]
          Output ("BM32 ONLINE");
 23e6ada:	e6f7      	b.n	23e68cc <_Z17I2C_Check_Sensorsv+0x68>
    if (BMX_2_exists == true) {
 23e6adc:	2b00      	cmp	r3, #0
 23e6ade:	f43f aefc 	beq.w	23e68da <_Z17I2C_Check_Sensorsv+0x76>
      BMX_2_exists = false;
 23e6ae2:	7028      	strb	r0, [r5, #0]
      Output ("BMX2 OFFLINE");
 23e6ae4:	482c      	ldr	r0, [pc, #176]	; (23e6b98 <_Z17I2C_Check_Sensorsv+0x334>)
 23e6ae6:	f7fd fd4f 	bl	23e4588 <_Z6OutputPKc>
      SystemStatusBits |= SSB_BMX_2;  // Turn On Bit 
 23e6aea:	4a0c      	ldr	r2, [pc, #48]	; (23e6b1c <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e6aec:	6813      	ldr	r3, [r2, #0]
 23e6aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 23e6af2:	e6f1      	b.n	23e68d8 <_Z17I2C_Check_Sensorsv+0x74>
    if (HTU21DF_exists == true) {
 23e6af4:	2b00      	cmp	r3, #0
 23e6af6:	f43f af0a 	beq.w	23e690e <_Z17I2C_Check_Sensorsv+0xaa>
      HTU21DF_exists = false;
 23e6afa:	7020      	strb	r0, [r4, #0]
      Output ("HTU OFFLINE");
 23e6afc:	4827      	ldr	r0, [pc, #156]	; (23e6b9c <_Z17I2C_Check_Sensorsv+0x338>)
 23e6afe:	f7fd fd43 	bl	23e4588 <_Z6OutputPKc>
      SystemStatusBits |= SSB_HTU21DF;  // Turn On Bit
 23e6b02:	4a06      	ldr	r2, [pc, #24]	; (23e6b1c <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e6b04:	6813      	ldr	r3, [r2, #0]
 23e6b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 23e6b0a:	e6ff      	b.n	23e690c <_Z17I2C_Check_Sensorsv+0xa8>
 23e6b0c:	1006a272 	.word	0x1006a272
 23e6b10:	1006a271 	.word	0x1006a271
 23e6b14:	1006abe8 	.word	0x1006abe8
 23e6b18:	023fd0b8 	.word	0x023fd0b8
 23e6b1c:	1006a168 	.word	0x1006a168
 23e6b20:	1006a275 	.word	0x1006a275
 23e6b24:	1006a274 	.word	0x1006a274
 23e6b28:	1006ac28 	.word	0x1006ac28
 23e6b2c:	023fd0f9 	.word	0x023fd0f9
 23e6b30:	1006a2a0 	.word	0x1006a2a0
 23e6b34:	1006ae80 	.word	0x1006ae80
 23e6b38:	023fd12a 	.word	0x023fd12a
 23e6b3c:	1006a7c6 	.word	0x1006a7c6
 23e6b40:	1007ac08 	.word	0x1007ac08
 23e6b44:	023fd141 	.word	0x023fd141
 23e6b48:	1006a0e4 	.word	0x1006a0e4
 23e6b4c:	1006a0e8 	.word	0x1006a0e8
 23e6b50:	023fd156 	.word	0x023fd156
 23e6b54:	1006a7d8 	.word	0x1006a7d8
 23e6b58:	1007ac10 	.word	0x1007ac10
 23e6b5c:	023fd16b 	.word	0x023fd16b
 23e6b60:	1006a2bd 	.word	0x1006a2bd
 23e6b64:	1007aa20 	.word	0x1007aa20
 23e6b68:	023fd182 	.word	0x023fd182
 23e6b6c:	1006a273 	.word	0x1006a273
 23e6b70:	1006ab38 	.word	0x1006ab38
 23e6b74:	023fd0c4 	.word	0x023fd0c4
 23e6b78:	1006a938 	.word	0x1006a938
 23e6b7c:	023fd0d0 	.word	0x023fd0d0
 23e6b80:	023fd0e0 	.word	0x023fd0e0
 23e6b84:	023fd0ec 	.word	0x023fd0ec
 23e6b88:	1006a276 	.word	0x1006a276
 23e6b8c:	023fd105 	.word	0x023fd105
 23e6b90:	1006aa38 	.word	0x1006aa38
 23e6b94:	023fd111 	.word	0x023fd111
 23e6b98:	023fd11d 	.word	0x023fd11d
 23e6b9c:	023fd135 	.word	0x023fd135
    if (SI1145_exists == true) {
 23e6ba0:	2b00      	cmp	r3, #0
 23e6ba2:	f43f aecf 	beq.w	23e6944 <_Z17I2C_Check_Sensorsv+0xe0>
      SI1145_exists = false;
 23e6ba6:	7020      	strb	r0, [r4, #0]
      Output ("SI OFFLINE");
 23e6ba8:	4815      	ldr	r0, [pc, #84]	; (23e6c00 <_Z17I2C_Check_Sensorsv+0x39c>)
 23e6baa:	f7fd fced 	bl	23e4588 <_Z6OutputPKc>
      SystemStatusBits |= SSB_SI1145;  // Turn On Bit
 23e6bae:	4a15      	ldr	r2, [pc, #84]	; (23e6c04 <_Z17I2C_Check_Sensorsv+0x3a0>)
 23e6bb0:	6813      	ldr	r3, [r2, #0]
 23e6bb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 23e6bb6:	e6c4      	b.n	23e6942 <_Z17I2C_Check_Sensorsv+0xde>
    if (AS5600_exists == true) {
 23e6bb8:	2a00      	cmp	r2, #0
 23e6bba:	f43f aed7 	beq.w	23e696c <_Z17I2C_Check_Sensorsv+0x108>
      AS5600_exists = false;
 23e6bbe:	7018      	strb	r0, [r3, #0]
      Output ("WD OFFLINE");
 23e6bc0:	4811      	ldr	r0, [pc, #68]	; (23e6c08 <_Z17I2C_Check_Sensorsv+0x3a4>)
 23e6bc2:	f7fd fce1 	bl	23e4588 <_Z6OutputPKc>
      SystemStatusBits |= SSB_AS5600;  // Turn On Bit
 23e6bc6:	4a0f      	ldr	r2, [pc, #60]	; (23e6c04 <_Z17I2C_Check_Sensorsv+0x3a0>)
 23e6bc8:	6813      	ldr	r3, [r2, #0]
 23e6bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 23e6bce:	e6cc      	b.n	23e696a <_Z17I2C_Check_Sensorsv+0x106>
    if (VEML7700_exists == true) {
 23e6bd0:	2b00      	cmp	r3, #0
 23e6bd2:	f43f aee5 	beq.w	23e69a0 <_Z17I2C_Check_Sensorsv+0x13c>
      VEML7700_exists = false;
 23e6bd6:	7020      	strb	r0, [r4, #0]
      Output ("VLX OFFLINE");
 23e6bd8:	480c      	ldr	r0, [pc, #48]	; (23e6c0c <_Z17I2C_Check_Sensorsv+0x3a8>)
 23e6bda:	f7fd fcd5 	bl	23e4588 <_Z6OutputPKc>
      SystemStatusBits |= SSB_VLX;  // Turn On Bit
 23e6bde:	4a09      	ldr	r2, [pc, #36]	; (23e6c04 <_Z17I2C_Check_Sensorsv+0x3a0>)
 23e6be0:	6813      	ldr	r3, [r2, #0]
 23e6be2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 23e6be6:	e6da      	b.n	23e699e <_Z17I2C_Check_Sensorsv+0x13a>
    if (PM25AQI_exists == true) {
 23e6be8:	b143      	cbz	r3, 23e6bfc <_Z17I2C_Check_Sensorsv+0x398>
      PM25AQI_exists = false;
 23e6bea:	7020      	strb	r0, [r4, #0]
      Output ("PM OFFLINE");
 23e6bec:	4808      	ldr	r0, [pc, #32]	; (23e6c10 <_Z17I2C_Check_Sensorsv+0x3ac>)
 23e6bee:	f7fd fccb 	bl	23e4588 <_Z6OutputPKc>
      SystemStatusBits |= SSB_PM25AQI;  // Turn On Bit
 23e6bf2:	4a04      	ldr	r2, [pc, #16]	; (23e6c04 <_Z17I2C_Check_Sensorsv+0x3a0>)
 23e6bf4:	6813      	ldr	r3, [r2, #0]
 23e6bf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 23e6bfa:	6013      	str	r3, [r2, #0]
}
 23e6bfc:	bd70      	pop	{r4, r5, r6, pc}
 23e6bfe:	bf00      	nop
 23e6c00:	023fd14b 	.word	0x023fd14b
 23e6c04:	1006a168 	.word	0x1006a168
 23e6c08:	023fd160 	.word	0x023fd160
 23e6c0c:	023fd176 	.word	0x023fd176
 23e6c10:	023fcf48 	.word	0x023fcf48

023e6c14 <_Z22EEPROM_ChecksumComputev>:
 *=======================================================================================================================
 */
unsigned long EEPROM_ChecksumCompute() {
  unsigned long checksum=0;

  checksum += (unsigned long) eeprom.rgt1;
 23e6c14:	4910      	ldr	r1, [pc, #64]	; (23e6c58 <_Z22EEPROM_ChecksumComputev+0x44>)
 23e6c16:	edd1 7a00 	vldr	s15, [r1]
 23e6c1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23e6c1e:	ee17 0a90 	vmov	r0, s15
  checksum += (unsigned long) eeprom.rgp1;
 23e6c22:	edd1 7a01 	vldr	s15, [r1, #4]
 23e6c26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23e6c2a:	ee17 2a90 	vmov	r2, s15
  checksum += (unsigned long) eeprom.rgt2;
 23e6c2e:	edd1 7a02 	vldr	s15, [r1, #8]
 23e6c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  checksum += (unsigned long) eeprom.rgp1;
 23e6c36:	4410      	add	r0, r2
 23e6c38:	694a      	ldr	r2, [r1, #20]
 23e6c3a:	4402      	add	r2, r0
  checksum += (unsigned long) eeprom.rgt2;
 23e6c3c:	ee17 0a90 	vmov	r0, s15
  checksum += (unsigned long) eeprom.rgp2;
 23e6c40:	edd1 7a03 	vldr	s15, [r1, #12]
 23e6c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23e6c48:	ee17 3a90 	vmov	r3, s15
 23e6c4c:	4410      	add	r0, r2
 23e6c4e:	4403      	add	r3, r0
  checksum += (unsigned long) eeprom.rgts;
  checksum += (unsigned long) eeprom.n2sfp;
 23e6c50:	6908      	ldr	r0, [r1, #16]
  return (checksum);
}
 23e6c52:	4418      	add	r0, r3
 23e6c54:	4770      	bx	lr
 23e6c56:	bf00      	nop
 23e6c58:	1006ae4c 	.word	0x1006ae4c

023e6c5c <_Z21EEPROM_ChecksumUpdatev>:
/* 
 *=======================================================================================================================
 * EEPROM_ChecksumUpdate()
 *=======================================================================================================================
 */
void EEPROM_ChecksumUpdate() {
 23e6c5c:	b508      	push	{r3, lr}
  eeprom.checksum = EEPROM_ChecksumCompute();
 23e6c5e:	f7ff ffd9 	bl	23e6c14 <_Z22EEPROM_ChecksumComputev>
 23e6c62:	4b01      	ldr	r3, [pc, #4]	; (23e6c68 <_Z21EEPROM_ChecksumUpdatev+0xc>)
 23e6c64:	6198      	str	r0, [r3, #24]
}
 23e6c66:	bd08      	pop	{r3, pc}
 23e6c68:	1006ae4c 	.word	0x1006ae4c

023e6c6c <_Z12EEPROM_Resetl.part.0>:
 *                  Requires system clock to be valid
 *=======================================================================================================================
 */
void EEPROM_Reset(time32_t current_time) {
  if (Time.isValid()) {
    eeprom.rgt1 = 0.0;
 23e6c6c:	2300      	movs	r3, #0
void EEPROM_Reset(time32_t current_time) {
 23e6c6e:	b510      	push	{r4, lr}
    eeprom.rgt1 = 0.0;
 23e6c70:	4c09      	ldr	r4, [pc, #36]	; (23e6c98 <_Z12EEPROM_Resetl.part.0+0x2c>)
 23e6c72:	6023      	str	r3, [r4, #0]
    eeprom.rgp1 = 0.0;
 23e6c74:	6063      	str	r3, [r4, #4]
    eeprom.rgt2 = 0.0;
 23e6c76:	60a3      	str	r3, [r4, #8]
    eeprom.rgp2 = 0.0;
 23e6c78:	60e3      	str	r3, [r4, #12]
    eeprom.rgts = current_time;
    eeprom.n2sfp = 0;
 23e6c7a:	2300      	movs	r3, #0
    eeprom.rgts = current_time;
 23e6c7c:	6120      	str	r0, [r4, #16]
    eeprom.n2sfp = 0;
 23e6c7e:	6163      	str	r3, [r4, #20]
    EEPROM_ChecksumUpdate();
 23e6c80:	f7ff ffec 	bl	23e6c5c <_Z21EEPROM_ChecksumUpdatev>
    EEPROM.put(eeprom_address, eeprom);
 23e6c84:	f012 fd9a 	bl	23f97bc <_Z21__fetch_global_EEPROMv>
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        static_assert(!std::is_base_of_v<String, T>, "String class cannot be used with EEPROM, use char[] array");
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 23e6c88:	4b04      	ldr	r3, [pc, #16]	; (23e6c9c <_Z12EEPROM_Resetl.part.0+0x30>)
 23e6c8a:	4621      	mov	r1, r4
  }
  else {
    Output("EEPROM RESET ERROR");
  }
}
 23e6c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23e6c90:	221c      	movs	r2, #28
 23e6c92:	6818      	ldr	r0, [r3, #0]
 23e6c94:	f00f bc44 	b.w	23f6520 <HAL_EEPROM_Put>
 23e6c98:	1006ae4c 	.word	0x1006ae4c
 23e6c9c:	1006ae68 	.word	0x1006ae68

023e6ca0 <_Z20EEPROM_ChecksumValidv>:
bool EEPROM_ChecksumValid() {
 23e6ca0:	b508      	push	{r3, lr}
  unsigned long checksum = EEPROM_ChecksumCompute();
 23e6ca2:	f7ff ffb7 	bl	23e6c14 <_Z22EEPROM_ChecksumComputev>
  if (checksum == eeprom.checksum) {
 23e6ca6:	4b03      	ldr	r3, [pc, #12]	; (23e6cb4 <_Z20EEPROM_ChecksumValidv+0x14>)
 23e6ca8:	699b      	ldr	r3, [r3, #24]
}
 23e6caa:	1a1b      	subs	r3, r3, r0
 23e6cac:	4258      	negs	r0, r3
 23e6cae:	4158      	adcs	r0, r3
 23e6cb0:	bd08      	pop	{r3, pc}
 23e6cb2:	bf00      	nop
 23e6cb4:	1006ae4c 	.word	0x1006ae4c

023e6cb8 <_Z22EEPROM_ClearRainTotalsl>:
 *=======================================================================================================================
 * EEPROM_ClearRainTotals() - Reset to default values
 *                           Requires system clock to be valid
 *=======================================================================================================================
 */
void EEPROM_ClearRainTotals(time32_t current_time) {
 23e6cb8:	b510      	push	{r4, lr}
 23e6cba:	4604      	mov	r4, r0
  if (Time.isValid()) {
 23e6cbc:	f012 f99c 	bl	23f8ff8 <_ZN9TimeClass7isValidEv>
 23e6cc0:	b120      	cbz	r0, 23e6ccc <_Z22EEPROM_ClearRainTotalsl+0x14>
 23e6cc2:	4620      	mov	r0, r4
    EEPROM.put(eeprom_address, eeprom);
  }
  else {
    Output("EEPROM CLEAR ERROR");
  }
}
 23e6cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23e6cc8:	f7ff bfd0 	b.w	23e6c6c <_Z12EEPROM_Resetl.part.0>
    Output("EEPROM CLEAR ERROR");
 23e6ccc:	4802      	ldr	r0, [pc, #8]	; (23e6cd8 <_Z22EEPROM_ClearRainTotalsl+0x20>)
}
 23e6cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Output("EEPROM CLEAR ERROR");
 23e6cd2:	f7fd bc59 	b.w	23e4588 <_Z6OutputPKc>
 23e6cd6:	bf00      	nop
 23e6cd8:	023fd18c 	.word	0x023fd18c

023e6cdc <_Z23EEPROM_ClearRain2Totalsv>:
 * EEPROM_ClearRain2Totals() - Reset Rain 2 Totals
 *                             Requires system clock to be valid
 *=======================================================================================================================
 */
void EEPROM_ClearRain2Totals() {
  eeprom.rgt2 = 0.0;
 23e6cdc:	2300      	movs	r3, #0
void EEPROM_ClearRain2Totals() {
 23e6cde:	b510      	push	{r4, lr}
  eeprom.rgt2 = 0.0;
 23e6ce0:	4c07      	ldr	r4, [pc, #28]	; (23e6d00 <_Z23EEPROM_ClearRain2Totalsv+0x24>)
 23e6ce2:	60a3      	str	r3, [r4, #8]
  eeprom.rgp2 = 0.0;
 23e6ce4:	60e3      	str	r3, [r4, #12]
  EEPROM_ChecksumUpdate();
 23e6ce6:	f7ff ffb9 	bl	23e6c5c <_Z21EEPROM_ChecksumUpdatev>
  EEPROM.put(eeprom_address, eeprom);
 23e6cea:	f012 fd67 	bl	23f97bc <_Z21__fetch_global_EEPROMv>
 23e6cee:	4b05      	ldr	r3, [pc, #20]	; (23e6d04 <_Z23EEPROM_ClearRain2Totalsv+0x28>)
 23e6cf0:	4621      	mov	r1, r4
}
 23e6cf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23e6cf6:	221c      	movs	r2, #28
 23e6cf8:	6818      	ldr	r0, [r3, #0]
 23e6cfa:	f00f bc11 	b.w	23f6520 <HAL_EEPROM_Put>
 23e6cfe:	bf00      	nop
 23e6d00:	1006ae4c 	.word	0x1006ae4c
 23e6d04:	1006ae68 	.word	0x1006ae68

023e6d08 <_Z17EEPROM_Initializev>:
 *=======================================================================================================================
 * EEPROM_Initialize() - Check status of EEPROM information and determine status
 *                       Requires system clock to be valid
 *=======================================================================================================================
 */
void EEPROM_Initialize() {
 23e6d08:	b570      	push	{r4, r5, r6, lr}
  if (Time.isValid()) {
 23e6d0a:	f012 f975 	bl	23f8ff8 <_ZN9TimeClass7isValidEv>
 23e6d0e:	2800      	cmp	r0, #0
 23e6d10:	d062      	beq.n	23e6dd8 <_Z17EEPROM_Initializev+0xd0>
    time32_t current_time = Time.now();
 23e6d12:	f012 f98e 	bl	23f9032 <_ZN9TimeClass3nowEv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 23e6d16:	4c33      	ldr	r4, [pc, #204]	; (23e6de4 <_Z17EEPROM_Initializev+0xdc>)

    EEPROM.get(eeprom_address, eeprom);
 23e6d18:	4e33      	ldr	r6, [pc, #204]	; (23e6de8 <_Z17EEPROM_Initializev+0xe0>)
    time32_t current_time = Time.now();
 23e6d1a:	4605      	mov	r5, r0
    EEPROM.get(eeprom_address, eeprom);
 23e6d1c:	f012 fd4e 	bl	23f97bc <_Z21__fetch_global_EEPROMv>
 23e6d20:	221c      	movs	r2, #28
 23e6d22:	4621      	mov	r1, r4
 23e6d24:	6830      	ldr	r0, [r6, #0]
 23e6d26:	f00f fbed 	bl	23f6504 <HAL_EEPROM_Get>

    if (!EEPROM_ChecksumValid()) {
 23e6d2a:	f7ff ffb9 	bl	23e6ca0 <_Z20EEPROM_ChecksumValidv>
 23e6d2e:	b918      	cbnz	r0, 23e6d38 <_Z17EEPROM_Initializev+0x30>
          EEPROM.put(eeprom_address, eeprom);
        }
        else {
          // if current time is before 6am and RT time before 6am 2 days ago - EEPROM has no valid data - clear EEPROM
          Output("T<6, RT<6 && RT<=6-2d - Clear");  
          EEPROM_ClearRainTotals(current_time);
 23e6d30:	4628      	mov	r0, r5
 23e6d32:	f7ff ffc1 	bl	23e6cb8 <_Z22EEPROM_ClearRainTotalsl>
 23e6d36:	e02b      	b.n	23e6d90 <_Z17EEPROM_Initializev+0x88>
      time32_t seconds_today        = current_time % 86400;
 23e6d38:	4a2c      	ldr	r2, [pc, #176]	; (23e6dec <_Z17EEPROM_Initializev+0xe4>)
 23e6d3a:	fb95 f3f2 	sdiv	r3, r5, r2
 23e6d3e:	fb02 5313 	mls	r3, r2, r3, r5
      time32_t seconds_at_0000      = current_time - seconds_today;
 23e6d42:	1aeb      	subs	r3, r5, r3
      time32_t seconds_at_0600      = seconds_at_0000 + 21600;
 23e6d44:	f503 40a8 	add.w	r0, r3, #21504	; 0x5400
 23e6d48:	3060      	adds	r0, #96	; 0x60
      time32_t seconds_yesterday_at_0600 = seconds_at_0600 - 86400;
 23e6d4a:	f5a3 417d 	sub.w	r1, r3, #64768	; 0xfd00
      if ((current_time > seconds_at_0600) && (eeprom.rgts > seconds_at_0600)) {
 23e6d4e:	4285      	cmp	r5, r0
 23e6d50:	6922      	ldr	r2, [r4, #16]
      time32_t seconds_yesterday_at_0600 = seconds_at_0600 - 86400;
 23e6d52:	f1a1 0120 	sub.w	r1, r1, #32
      if ((current_time > seconds_at_0600) && (eeprom.rgts > seconds_at_0600)) {
 23e6d56:	dd1f      	ble.n	23e6d98 <_Z17EEPROM_Initializev+0x90>
 23e6d58:	4290      	cmp	r0, r2
 23e6d5a:	da03      	bge.n	23e6d64 <_Z17EEPROM_Initializev+0x5c>
        Output("T>6, RT>6 - OK");
 23e6d5c:	4824      	ldr	r0, [pc, #144]	; (23e6df0 <_Z17EEPROM_Initializev+0xe8>)
          Output("T<6, RT<6 & RT>6 Yesterday - OK");
 23e6d5e:	f7fd fc13 	bl	23e4588 <_Z6OutputPKc>
 23e6d62:	e00b      	b.n	23e6d7c <_Z17EEPROM_Initializev+0x74>
      else if ((current_time > seconds_at_0600) && (eeprom.rgts <= seconds_at_0600) && (eeprom.rgts > seconds_yesterday_at_0600)){
 23e6d64:	4291      	cmp	r1, r2
 23e6d66:	da1b      	bge.n	23e6da0 <_Z17EEPROM_Initializev+0x98>
          Output("T>6, RT<=6 &&  RT>6Y- Move");  
 23e6d68:	4822      	ldr	r0, [pc, #136]	; (23e6df4 <_Z17EEPROM_Initializev+0xec>)
 23e6d6a:	f7fd fc0d 	bl	23e4588 <_Z6OutputPKc>
          eeprom.rgp1 = eeprom.rgt1;
 23e6d6e:	6823      	ldr	r3, [r4, #0]
          eeprom.rgp2 = eeprom.rgt2;
 23e6d70:	68a2      	ldr	r2, [r4, #8]
          eeprom.rgp1 = eeprom.rgt1;
 23e6d72:	6063      	str	r3, [r4, #4]
          eeprom.rgt1 = 0.0;
 23e6d74:	2300      	movs	r3, #0
          eeprom.rgp2 = eeprom.rgt2;
 23e6d76:	60e2      	str	r2, [r4, #12]
          eeprom.rgt1 = 0.0;
 23e6d78:	6023      	str	r3, [r4, #0]
          eeprom.rgt2 = 0.0;
 23e6d7a:	60a3      	str	r3, [r4, #8]
          eeprom.rgts = current_time;
 23e6d7c:	6125      	str	r5, [r4, #16]
          EEPROM_ChecksumUpdate();
 23e6d7e:	f7ff ff6d 	bl	23e6c5c <_Z21EEPROM_ChecksumUpdatev>
          EEPROM.put(eeprom_address, eeprom);          
 23e6d82:	f012 fd1b 	bl	23f97bc <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 23e6d86:	221c      	movs	r2, #28
 23e6d88:	4621      	mov	r1, r4
 23e6d8a:	6830      	ldr	r0, [r6, #0]
 23e6d8c:	f00f fbc8 	bl	23f6520 <HAL_EEPROM_Put>
        }
      }
    }
    eeprom_valid = true;
 23e6d90:	2201      	movs	r2, #1
 23e6d92:	4b19      	ldr	r3, [pc, #100]	; (23e6df8 <_Z17EEPROM_Initializev+0xf0>)
 23e6d94:	701a      	strb	r2, [r3, #0]
  }
  else {
    Output("EEPROM INIT ERROR");
  }
}
 23e6d96:	bd70      	pop	{r4, r5, r6, pc}
        if (eeprom.rgts > seconds_yesterday_at_0600) {
 23e6d98:	4291      	cmp	r1, r2
 23e6d9a:	da01      	bge.n	23e6da0 <_Z17EEPROM_Initializev+0x98>
          Output("T<6, RT<6 & RT>6 Yesterday - OK");
 23e6d9c:	4817      	ldr	r0, [pc, #92]	; (23e6dfc <_Z17EEPROM_Initializev+0xf4>)
 23e6d9e:	e7de      	b.n	23e6d5e <_Z17EEPROM_Initializev+0x56>
        else if (eeprom.rgts > (seconds_yesterday_at_0600 - 84600)) { 
 23e6da0:	f5a3 3311 	sub.w	r3, r3, #148480	; 0x24400
 23e6da4:	f2a3 3397 	subw	r3, r3, #919	; 0x397
 23e6da8:	429a      	cmp	r2, r3
 23e6daa:	db11      	blt.n	23e6dd0 <_Z17EEPROM_Initializev+0xc8>
          Output("T<6, RT<6 && RT>6-2d - Move");  
 23e6dac:	4814      	ldr	r0, [pc, #80]	; (23e6e00 <_Z17EEPROM_Initializev+0xf8>)
 23e6dae:	f7fd fbeb 	bl	23e4588 <_Z6OutputPKc>
          eeprom.rgp1 = eeprom.rgt1;
 23e6db2:	6823      	ldr	r3, [r4, #0]
          eeprom.rgp2 = eeprom.rgt2;
 23e6db4:	68a2      	ldr	r2, [r4, #8]
          eeprom.rgp1 = eeprom.rgt1;
 23e6db6:	6063      	str	r3, [r4, #4]
          eeprom.rgt1 = 0.0;
 23e6db8:	2300      	movs	r3, #0
          eeprom.rgp2 = eeprom.rgt2;
 23e6dba:	60e2      	str	r2, [r4, #12]
          eeprom.rgt1 = 0.0;
 23e6dbc:	6023      	str	r3, [r4, #0]
          eeprom.rgt2 = 0.0;
 23e6dbe:	60a3      	str	r3, [r4, #8]
          eeprom.rgts = current_time;
 23e6dc0:	6125      	str	r5, [r4, #16]
          EEPROM_ChecksumUpdate();
 23e6dc2:	f7ff ff4b 	bl	23e6c5c <_Z21EEPROM_ChecksumUpdatev>
          EEPROM.put(eeprom_address, eeprom);
 23e6dc6:	f012 fcf9 	bl	23f97bc <_Z21__fetch_global_EEPROMv>
 23e6dca:	221c      	movs	r2, #28
 23e6dcc:	4905      	ldr	r1, [pc, #20]	; (23e6de4 <_Z17EEPROM_Initializev+0xdc>)
 23e6dce:	e7dc      	b.n	23e6d8a <_Z17EEPROM_Initializev+0x82>
          Output("T<6, RT<6 && RT<=6-2d - Clear");  
 23e6dd0:	480c      	ldr	r0, [pc, #48]	; (23e6e04 <_Z17EEPROM_Initializev+0xfc>)
 23e6dd2:	f7fd fbd9 	bl	23e4588 <_Z6OutputPKc>
 23e6dd6:	e7ab      	b.n	23e6d30 <_Z17EEPROM_Initializev+0x28>
    Output("EEPROM INIT ERROR");
 23e6dd8:	480b      	ldr	r0, [pc, #44]	; (23e6e08 <_Z17EEPROM_Initializev+0x100>)
}
 23e6dda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Output("EEPROM INIT ERROR");
 23e6dde:	f7fd bbd3 	b.w	23e4588 <_Z6OutputPKc>
 23e6de2:	bf00      	nop
 23e6de4:	1006ae4c 	.word	0x1006ae4c
 23e6de8:	1006ae68 	.word	0x1006ae68
 23e6dec:	00015180 	.word	0x00015180
 23e6df0:	023fd19f 	.word	0x023fd19f
 23e6df4:	023fd1ae 	.word	0x023fd1ae
 23e6df8:	1006ae6c 	.word	0x1006ae6c
 23e6dfc:	023fd1c9 	.word	0x023fd1c9
 23e6e00:	023fd1e9 	.word	0x023fd1e9
 23e6e04:	023fd205 	.word	0x023fd205
 23e6e08:	023fd223 	.word	0x023fd223

023e6e0c <_Z23EEPROM_UpdateRainTotalsff>:
/* 
 *=======================================================================================================================
 * EEPROM_UpdateRainTotals() - 
 *=======================================================================================================================
 */
void EEPROM_UpdateRainTotals(float rgt1, float rgt2) {
 23e6e0c:	b510      	push	{r4, lr}
 23e6e0e:	ed2d 8b02 	vpush	{d8}
  if (eeprom_valid) {
 23e6e12:	4b2f      	ldr	r3, [pc, #188]	; (23e6ed0 <_Z23EEPROM_UpdateRainTotalsff+0xc4>)
void EEPROM_UpdateRainTotals(float rgt1, float rgt2) {
 23e6e14:	eeb0 8a40 	vmov.f32	s16, s0
  if (eeprom_valid) {
 23e6e18:	781b      	ldrb	r3, [r3, #0]
void EEPROM_UpdateRainTotals(float rgt1, float rgt2) {
 23e6e1a:	eef0 8a60 	vmov.f32	s17, s1
  if (eeprom_valid) {
 23e6e1e:	2b00      	cmp	r3, #0
 23e6e20:	d053      	beq.n	23e6eca <_Z23EEPROM_UpdateRainTotalsff+0xbe>
    time32_t current_time     = Time.now();
 23e6e22:	f012 f906 	bl	23f9032 <_ZN9TimeClass3nowEv>
    time32_t seconds_at_0600  = current_time - (current_time % 86400) + 21600; // time - seconds so far today + seconds to 0600
 23e6e26:	4b2b      	ldr	r3, [pc, #172]	; (23e6ed4 <_Z23EEPROM_UpdateRainTotalsff+0xc8>)
 23e6e28:	492b      	ldr	r1, [pc, #172]	; (23e6ed8 <_Z23EEPROM_UpdateRainTotalsff+0xcc>)
 23e6e2a:	fb90 f2f3 	sdiv	r2, r0, r3
 23e6e2e:	fb03 0212 	mls	r2, r3, r2, r0
 23e6e32:	1a82      	subs	r2, r0, r2
 23e6e34:	f502 42a8 	add.w	r2, r2, #21504	; 0x5400
 23e6e38:	3260      	adds	r2, #96	; 0x60

    if ((current_time > seconds_at_0600) && (eeprom.rgts <= seconds_at_0600)) {
 23e6e3a:	4290      	cmp	r0, r2
 23e6e3c:	4b27      	ldr	r3, [pc, #156]	; (23e6edc <_Z23EEPROM_UpdateRainTotalsff+0xd0>)
 23e6e3e:	dd28      	ble.n	23e6e92 <_Z23EEPROM_UpdateRainTotalsff+0x86>
 23e6e40:	691c      	ldr	r4, [r3, #16]
 23e6e42:	42a2      	cmp	r2, r4
 23e6e44:	db25      	blt.n	23e6e92 <_Z23EEPROM_UpdateRainTotalsff+0x86>
      // if rgts is before 0600 then we need to move today's totals to prior day
      eeprom.rgp1 = eeprom.rgt1;
 23e6e46:	681a      	ldr	r2, [r3, #0]
      eeprom.rgt1 = 0;

      if (A4_State == A4_STATE_RAIN) {
 23e6e48:	680c      	ldr	r4, [r1, #0]
      eeprom.rgp1 = eeprom.rgt1;
 23e6e4a:	605a      	str	r2, [r3, #4]
      eeprom.rgt1 = 0;
 23e6e4c:	2200      	movs	r2, #0
      if (A4_State == A4_STATE_RAIN) {
 23e6e4e:	2c02      	cmp	r4, #2
      eeprom.rgt1 = 0;
 23e6e50:	601a      	str	r2, [r3, #0]
      if (A4_State == A4_STATE_RAIN) {
 23e6e52:	d134      	bne.n	23e6ebe <_Z23EEPROM_UpdateRainTotalsff+0xb2>
        eeprom.rgt2 = 0;
      }
    }

    // Only add valid rain to the total
    if (rgt1>0) {
 23e6e54:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 23e6e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        eeprom.rgp2 = eeprom.rgt2;
 23e6e5c:	689c      	ldr	r4, [r3, #8]
        eeprom.rgt2 = 0;
 23e6e5e:	609a      	str	r2, [r3, #8]
        eeprom.rgp2 = eeprom.rgt2;
 23e6e60:	60dc      	str	r4, [r3, #12]
    if (rgt1>0) {
 23e6e62:	dc1b      	bgt.n	23e6e9c <_Z23EEPROM_UpdateRainTotalsff+0x90>
      eeprom.rgt1 += rgt1;
    }
    if ((A4_State == A4_STATE_RAIN) && (rgt2>0)) {
 23e6e64:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 23e6e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e6e6c:	dc20      	bgt.n	23e6eb0 <_Z23EEPROM_UpdateRainTotalsff+0xa4>
      eeprom.rgt2 += rgt2;
    }

    eeprom.rgts = current_time;
 23e6e6e:	6118      	str	r0, [r3, #16]
    EEPROM_ChecksumUpdate();
 23e6e70:	f7ff fef4 	bl	23e6c5c <_Z21EEPROM_ChecksumUpdatev>
    EEPROM.put(eeprom_address, eeprom);
 23e6e74:	f012 fca2 	bl	23f97bc <_Z21__fetch_global_EEPROMv>
 23e6e78:	4b19      	ldr	r3, [pc, #100]	; (23e6ee0 <_Z23EEPROM_UpdateRainTotalsff+0xd4>)
 23e6e7a:	221c      	movs	r2, #28
 23e6e7c:	6818      	ldr	r0, [r3, #0]
 23e6e7e:	4917      	ldr	r1, [pc, #92]	; (23e6edc <_Z23EEPROM_UpdateRainTotalsff+0xd0>)
 23e6e80:	f00f fb4e 	bl	23f6520 <HAL_EEPROM_Put>
    Output("EEPROM RT UPDATED");
  }
}
 23e6e84:	ecbd 8b02 	vpop	{d8}
 23e6e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Output("EEPROM RT UPDATED");
 23e6e8c:	4815      	ldr	r0, [pc, #84]	; (23e6ee4 <_Z23EEPROM_UpdateRainTotalsff+0xd8>)
 23e6e8e:	f7fd bb7b 	b.w	23e4588 <_Z6OutputPKc>
    if (rgt1>0) {
 23e6e92:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 23e6e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e6e9a:	dd05      	ble.n	23e6ea8 <_Z23EEPROM_UpdateRainTotalsff+0x9c>
      eeprom.rgt1 += rgt1;
 23e6e9c:	ed93 0a00 	vldr	s0, [r3]
 23e6ea0:	ee30 8a08 	vadd.f32	s16, s0, s16
 23e6ea4:	ed83 8a00 	vstr	s16, [r3]
    if ((A4_State == A4_STATE_RAIN) && (rgt2>0)) {
 23e6ea8:	680a      	ldr	r2, [r1, #0]
 23e6eaa:	2a02      	cmp	r2, #2
 23e6eac:	d1df      	bne.n	23e6e6e <_Z23EEPROM_UpdateRainTotalsff+0x62>
 23e6eae:	e7d9      	b.n	23e6e64 <_Z23EEPROM_UpdateRainTotalsff+0x58>
      eeprom.rgt2 += rgt2;
 23e6eb0:	edd3 0a02 	vldr	s1, [r3, #8]
 23e6eb4:	ee70 8aa8 	vadd.f32	s17, s1, s17
 23e6eb8:	edc3 8a02 	vstr	s17, [r3, #8]
 23e6ebc:	e7d7      	b.n	23e6e6e <_Z23EEPROM_UpdateRainTotalsff+0x62>
    if (rgt1>0) {
 23e6ebe:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 23e6ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e6ec6:	dce9      	bgt.n	23e6e9c <_Z23EEPROM_UpdateRainTotalsff+0x90>
 23e6ec8:	e7d1      	b.n	23e6e6e <_Z23EEPROM_UpdateRainTotalsff+0x62>
}
 23e6eca:	ecbd 8b02 	vpop	{d8}
 23e6ece:	bd10      	pop	{r4, pc}
 23e6ed0:	1006ae6c 	.word	0x1006ae6c
 23e6ed4:	00015180 	.word	0x00015180
 23e6ed8:	1006a24c 	.word	0x1006a24c
 23e6edc:	1006ae4c 	.word	0x1006ae4c
 23e6ee0:	1006ae68 	.word	0x1006ae68
 23e6ee4:	023fd235 	.word	0x023fd235

023e6ee8 <_Z25EEPROM_SaveUnreportedRainv>:
/* 
 *=======================================================================================================================
 * EEPROM_SaveUnreportedRain() - 
 *=======================================================================================================================
 */
void EEPROM_SaveUnreportedRain() {
 23e6ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23e6eea:	ed2d 8b02 	vpush	{d8}
  if (raingauge1_interrupt_count || ((A4_State == A4_STATE_RAIN) && raingauge2_interrupt_count)) {
 23e6eee:	4b4e      	ldr	r3, [pc, #312]	; (23e7028 <_Z25EEPROM_SaveUnreportedRainv+0x140>)
 23e6ef0:	4f4e      	ldr	r7, [pc, #312]	; (23e702c <_Z25EEPROM_SaveUnreportedRainv+0x144>)
 23e6ef2:	681a      	ldr	r2, [r3, #0]
 23e6ef4:	b942      	cbnz	r2, 23e6f08 <_Z25EEPROM_SaveUnreportedRainv+0x20>
 23e6ef6:	683a      	ldr	r2, [r7, #0]
 23e6ef8:	2a02      	cmp	r2, #2
 23e6efa:	f040 808e 	bne.w	23e701a <_Z25EEPROM_SaveUnreportedRainv+0x132>
 23e6efe:	4a4c      	ldr	r2, [pc, #304]	; (23e7030 <_Z25EEPROM_SaveUnreportedRainv+0x148>)
 23e6f00:	6812      	ldr	r2, [r2, #0]
 23e6f02:	2a00      	cmp	r2, #0
 23e6f04:	f000 8089 	beq.w	23e701a <_Z25EEPROM_SaveUnreportedRainv+0x132>
    unsigned long rgds;     // rain gauge delta seconds, seconds since last rain gauge observation logged
    unsigned long rg2ds = 0;     // rain gauge delta seconds, seconds since last rain gauge observation logged
    float rain2 = 0.0;

    float rain = raingauge1_interrupt_count * 0.2;
 23e6f08:	6818      	ldr	r0, [r3, #0]
 23e6f0a:	f7fb fb17 	bl	23e253c <__aeabi_ui2d>
 23e6f0e:	a344      	add	r3, pc, #272	; (adr r3, 23e7020 <_Z25EEPROM_SaveUnreportedRainv+0x138>)
 23e6f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e6f14:	f7fb fb8c 	bl	23e2630 <__aeabi_dmul>
 23e6f18:	f7fb fe82 	bl	23e2c20 <__aeabi_d2f>
 23e6f1c:	ee08 0a90 	vmov	s17, r0
    rgds = (System.millis()-raingauge1_interrupt_stime)/1000;  // seconds since last rain gauge observation logged
 23e6f20:	f7fc ffdd 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23e6f24:	4a43      	ldr	r2, [pc, #268]	; (23e7034 <_Z25EEPROM_SaveUnreportedRainv+0x14c>)
 23e6f26:	e9d2 3400 	ldrd	r3, r4, [r2]
 23e6f2a:	1ac0      	subs	r0, r0, r3
 23e6f2c:	eb61 0104 	sbc.w	r1, r1, r4
 23e6f30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23e6f34:	2300      	movs	r3, #0
 23e6f36:	f7fc f821 	bl	23e2f7c <__aeabi_uldivmod>
    rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
 23e6f3a:	eef4 8a68 	vcmp.f32	s17, s17
 23e6f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    rgds = (System.millis()-raingauge1_interrupt_stime)/1000;  // seconds since last rain gauge observation logged
 23e6f42:	4606      	mov	r6, r0
    rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
 23e6f44:	d660      	bvs.n	23e7008 <_Z25EEPROM_SaveUnreportedRainv+0x120>
 23e6f46:	ee18 0a90 	vmov	r0, s17
 23e6f4a:	f7fb fb19 	bl	23e2580 <__aeabi_f2d>
 23e6f4e:	4604      	mov	r4, r0
 23e6f50:	203c      	movs	r0, #60	; 0x3c
 23e6f52:	fbb6 f0f0 	udiv	r0, r6, r0
 23e6f56:	460d      	mov	r5, r1
 23e6f58:	f7fb faf0 	bl	23e253c <__aeabi_ui2d>
 23e6f5c:	2200      	movs	r2, #0
 23e6f5e:	4b36      	ldr	r3, [pc, #216]	; (23e7038 <_Z25EEPROM_SaveUnreportedRainv+0x150>)
 23e6f60:	f7fb fb66 	bl	23e2630 <__aeabi_dmul>
 23e6f64:	4602      	mov	r2, r0
 23e6f66:	460b      	mov	r3, r1
 23e6f68:	4620      	mov	r0, r4
 23e6f6a:	4629      	mov	r1, r5
 23e6f6c:	f7fb fdf0 	bl	23e2b50 <__aeabi_dcmpgt>
 23e6f70:	eddf 7a32 	vldr	s15, [pc, #200]	; 23e703c <_Z25EEPROM_SaveUnreportedRainv+0x154>
 23e6f74:	2800      	cmp	r0, #0
 23e6f76:	fe48 8aa7 	vseleq.f32	s17, s17, s15
    
    if (A4_State == A4_STATE_RAIN) {
 23e6f7a:	683b      	ldr	r3, [r7, #0]
 23e6f7c:	2b02      	cmp	r3, #2
 23e6f7e:	d146      	bne.n	23e700e <_Z25EEPROM_SaveUnreportedRainv+0x126>
      rain2 = raingauge2_interrupt_count * 0.2;
 23e6f80:	4b2b      	ldr	r3, [pc, #172]	; (23e7030 <_Z25EEPROM_SaveUnreportedRainv+0x148>)
 23e6f82:	6818      	ldr	r0, [r3, #0]
 23e6f84:	f7fb fada 	bl	23e253c <__aeabi_ui2d>
 23e6f88:	a325      	add	r3, pc, #148	; (adr r3, 23e7020 <_Z25EEPROM_SaveUnreportedRainv+0x138>)
 23e6f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e6f8e:	f7fb fb4f 	bl	23e2630 <__aeabi_dmul>
 23e6f92:	f7fb fe45 	bl	23e2c20 <__aeabi_d2f>
 23e6f96:	ee08 0a10 	vmov	s16, r0
      rg2ds = (System.millis()-raingauge2_interrupt_stime)/1000;  // seconds since last rain gauge observation logged
 23e6f9a:	f7fc ffa0 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23e6f9e:	4a28      	ldr	r2, [pc, #160]	; (23e7040 <_Z25EEPROM_SaveUnreportedRainv+0x158>)
 23e6fa0:	e9d2 3400 	ldrd	r3, r4, [r2]
 23e6fa4:	1ac0      	subs	r0, r0, r3
 23e6fa6:	eb61 0104 	sbc.w	r1, r1, r4
 23e6faa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23e6fae:	2300      	movs	r3, #0
 23e6fb0:	f7fb ffe4 	bl	23e2f7c <__aeabi_uldivmod>
      rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
 23e6fb4:	eeb4 8a48 	vcmp.f32	s16, s16
 23e6fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      rg2ds = (System.millis()-raingauge2_interrupt_stime)/1000;  // seconds since last rain gauge observation logged
 23e6fbc:	4606      	mov	r6, r0
      rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
 23e6fbe:	d629      	bvs.n	23e7014 <_Z25EEPROM_SaveUnreportedRainv+0x12c>
 23e6fc0:	ee18 0a10 	vmov	r0, s16
 23e6fc4:	f7fb fadc 	bl	23e2580 <__aeabi_f2d>
 23e6fc8:	4604      	mov	r4, r0
 23e6fca:	203c      	movs	r0, #60	; 0x3c
 23e6fcc:	fbb6 f0f0 	udiv	r0, r6, r0
 23e6fd0:	460d      	mov	r5, r1
 23e6fd2:	f7fb fab3 	bl	23e253c <__aeabi_ui2d>
 23e6fd6:	2200      	movs	r2, #0
 23e6fd8:	4b17      	ldr	r3, [pc, #92]	; (23e7038 <_Z25EEPROM_SaveUnreportedRainv+0x150>)
 23e6fda:	f7fb fb29 	bl	23e2630 <__aeabi_dmul>
 23e6fde:	4602      	mov	r2, r0
 23e6fe0:	460b      	mov	r3, r1
 23e6fe2:	4620      	mov	r0, r4
 23e6fe4:	4629      	mov	r1, r5
 23e6fe6:	f7fb fdb3 	bl	23e2b50 <__aeabi_dcmpgt>
 23e6fea:	eddf 7a14 	vldr	s15, [pc, #80]	; 23e703c <_Z25EEPROM_SaveUnreportedRainv+0x154>
 23e6fee:	2800      	cmp	r0, #0
 23e6ff0:	fe08 8a27 	vseleq.f32	s16, s16, s15
    }

    EEPROM_UpdateRainTotals(rain, rain2);
 23e6ff4:	eef0 0a48 	vmov.f32	s1, s16
 23e6ff8:	eeb0 0a68 	vmov.f32	s0, s17
  }
}
 23e6ffc:	ecbd 8b02 	vpop	{d8}
 23e7000:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    EEPROM_UpdateRainTotals(rain, rain2);
 23e7004:	f7ff bf02 	b.w	23e6e0c <_Z23EEPROM_UpdateRainTotalsff>
    rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
 23e7008:	eddf 8a0c 	vldr	s17, [pc, #48]	; 23e703c <_Z25EEPROM_SaveUnreportedRainv+0x154>
 23e700c:	e7b5      	b.n	23e6f7a <_Z25EEPROM_SaveUnreportedRainv+0x92>
    float rain2 = 0.0;
 23e700e:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 23e7044 <_Z25EEPROM_SaveUnreportedRainv+0x15c>
 23e7012:	e7ef      	b.n	23e6ff4 <_Z25EEPROM_SaveUnreportedRainv+0x10c>
      rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
 23e7014:	ed9f 8a09 	vldr	s16, [pc, #36]	; 23e703c <_Z25EEPROM_SaveUnreportedRainv+0x154>
 23e7018:	e7ec      	b.n	23e6ff4 <_Z25EEPROM_SaveUnreportedRainv+0x10c>
}
 23e701a:	ecbd 8b02 	vpop	{d8}
 23e701e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23e7020:	9999999a 	.word	0x9999999a
 23e7024:	3fc99999 	.word	0x3fc99999
 23e7028:	1007aa4c 	.word	0x1007aa4c
 23e702c:	1006a24c 	.word	0x1006a24c
 23e7030:	1007aa60 	.word	0x1007aa60
 23e7034:	1007aa58 	.word	0x1007aa58
 23e7038:	403e0000 	.word	0x403e0000
 23e703c:	c479f99a 	.word	0xc479f99a
 23e7040:	1007aa70 	.word	0x1007aa70
 23e7044:	00000000 	.word	0x00000000

023e7048 <_Z13EEPROM_Updatev>:
/* 
 *=======================================================================================================================
 * EEPROM_Update() - Check status of EEPROM information and determine status
 *=======================================================================================================================
 */
void EEPROM_Update() {
 23e7048:	b510      	push	{r4, lr}
  if (eeprom_valid && Time.isValid()) {
 23e704a:	4b0d      	ldr	r3, [pc, #52]	; (23e7080 <_Z13EEPROM_Updatev+0x38>)
 23e704c:	781b      	ldrb	r3, [r3, #0]
 23e704e:	b1ab      	cbz	r3, 23e707c <_Z13EEPROM_Updatev+0x34>
 23e7050:	f011 ffd2 	bl	23f8ff8 <_ZN9TimeClass7isValidEv>
 23e7054:	b190      	cbz	r0, 23e707c <_Z13EEPROM_Updatev+0x34>
    eeprom.rgts = Time.now();
 23e7056:	f011 ffec 	bl	23f9032 <_ZN9TimeClass3nowEv>
 23e705a:	4c0a      	ldr	r4, [pc, #40]	; (23e7084 <_Z13EEPROM_Updatev+0x3c>)
 23e705c:	6120      	str	r0, [r4, #16]
    EEPROM_ChecksumUpdate();
 23e705e:	f7ff fdfd 	bl	23e6c5c <_Z21EEPROM_ChecksumUpdatev>
    EEPROM.put(eeprom_address, eeprom);
 23e7062:	f012 fbab 	bl	23f97bc <_Z21__fetch_global_EEPROMv>
 23e7066:	4b08      	ldr	r3, [pc, #32]	; (23e7088 <_Z13EEPROM_Updatev+0x40>)
 23e7068:	4621      	mov	r1, r4
 23e706a:	6818      	ldr	r0, [r3, #0]
 23e706c:	221c      	movs	r2, #28
 23e706e:	f00f fa57 	bl	23f6520 <HAL_EEPROM_Put>
    Output("EEPROM UPDATED");
  }
}
 23e7072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Output("EEPROM UPDATED");
 23e7076:	4805      	ldr	r0, [pc, #20]	; (23e708c <_Z13EEPROM_Updatev+0x44>)
 23e7078:	f7fd ba86 	b.w	23e4588 <_Z6OutputPKc>
}
 23e707c:	bd10      	pop	{r4, pc}
 23e707e:	bf00      	nop
 23e7080:	1006ae6c 	.word	0x1006ae6c
 23e7084:	1006ae4c 	.word	0x1006ae4c
 23e7088:	1006ae68 	.word	0x1006ae68
 23e708c:	023fd247 	.word	0x023fd247

023e7090 <_Z11EEPROM_Dumpv>:
/* 
 *=======================================================================================================================
 * EEPROM_Dump() - 
 *=======================================================================================================================
 */
void EEPROM_Dump() {
 23e7090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23e7092:	ed2d 8b02 	vpush	{d8}
  size_t EEPROM_length = EEPROM.length();
 23e7096:	f012 fb91 	bl	23f97bc <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }
 23e709a:	f00f fa25 	bl	23f64e8 <HAL_EEPROM_Length>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 23e709e:	4d4e      	ldr	r5, [pc, #312]	; (23e71d8 <_Z11EEPROM_Dumpv+0x148>)
    uint16_t length()                    { return HAL_EEPROM_Length(); }
 23e70a0:	4604      	mov	r4, r0

  EEPROM.get(eeprom_address, eeprom);
 23e70a2:	f012 fb8b 	bl	23f97bc <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 23e70a6:	4b4d      	ldr	r3, [pc, #308]	; (23e71dc <_Z11EEPROM_Dumpv+0x14c>)
 23e70a8:	4629      	mov	r1, r5
 23e70aa:	6818      	ldr	r0, [r3, #0]
 23e70ac:	221c      	movs	r2, #28
 23e70ae:	f00f fa29 	bl	23f6504 <HAL_EEPROM_Get>

  unsigned long checksum = EEPROM_ChecksumCompute();
 23e70b2:	f7ff fdaf 	bl	23e6c14 <_Z22EEPROM_ChecksumComputev>

  Output("EEPROM DUMP");

  sprintf (msgbuf, " LEN:%d", EEPROM_length);
 23e70b6:	4e4a      	ldr	r6, [pc, #296]	; (23e71e0 <_Z11EEPROM_Dumpv+0x150>)
  unsigned long checksum = EEPROM_ChecksumCompute();
 23e70b8:	4607      	mov	r7, r0
  Output("EEPROM DUMP");
 23e70ba:	484a      	ldr	r0, [pc, #296]	; (23e71e4 <_Z11EEPROM_Dumpv+0x154>)
 23e70bc:	f7fd fa64 	bl	23e4588 <_Z6OutputPKc>
  sprintf (msgbuf, " LEN:%d", EEPROM_length);
 23e70c0:	b2a2      	uxth	r2, r4
 23e70c2:	4949      	ldr	r1, [pc, #292]	; (23e71e8 <_Z11EEPROM_Dumpv+0x158>)
 23e70c4:	4630      	mov	r0, r6
 23e70c6:	f010 f867 	bl	23f7198 <sprintf>
  Output(msgbuf);
 23e70ca:	4630      	mov	r0, r6
 23e70cc:	f7fd fa5c 	bl	23e4588 <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " RT1:%d.%02d", 
    (int)eeprom.rgt1, (int)(eeprom.rgt1*100)%100); 
 23e70d0:	ed9f 8a46 	vldr	s16, [pc, #280]	; 23e71ec <_Z11EEPROM_Dumpv+0x15c>
 23e70d4:	ed95 7a00 	vldr	s14, [r5]
 23e70d8:	ee67 7a08 	vmul.f32	s15, s14, s16
 23e70dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  sprintf (Buffer32Bytes, " RT1:%d.%02d", 
 23e70e0:	2664      	movs	r6, #100	; 0x64
    (int)eeprom.rgt1, (int)(eeprom.rgt1*100)%100); 
 23e70e2:	ee17 3a90 	vmov	r3, s15
  sprintf (Buffer32Bytes, " RT1:%d.%02d", 
 23e70e6:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 23e70ea:	fb93 f2f6 	sdiv	r2, r3, r6
 23e70ee:	4c40      	ldr	r4, [pc, #256]	; (23e71f0 <_Z11EEPROM_Dumpv+0x160>)
 23e70f0:	fb06 3312 	mls	r3, r6, r2, r3
 23e70f4:	493f      	ldr	r1, [pc, #252]	; (23e71f4 <_Z11EEPROM_Dumpv+0x164>)
 23e70f6:	ee17 2a90 	vmov	r2, s15
 23e70fa:	4620      	mov	r0, r4
 23e70fc:	f010 f84c 	bl	23f7198 <sprintf>
  Output (Buffer32Bytes);
 23e7100:	4620      	mov	r0, r4
 23e7102:	f7fd fa41 	bl	23e4588 <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " RP1:%d.%02d", 
  (int)eeprom.rgp1, (int)(eeprom.rgp1*100)%100); 
 23e7106:	ed95 7a01 	vldr	s14, [r5, #4]
 23e710a:	ee67 7a08 	vmul.f32	s15, s14, s16
 23e710e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23e7112:	ee17 3a90 	vmov	r3, s15
  sprintf (Buffer32Bytes, " RP1:%d.%02d", 
 23e7116:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 23e711a:	fb93 f2f6 	sdiv	r2, r3, r6
 23e711e:	4936      	ldr	r1, [pc, #216]	; (23e71f8 <_Z11EEPROM_Dumpv+0x168>)
 23e7120:	fb06 3312 	mls	r3, r6, r2, r3
 23e7124:	4620      	mov	r0, r4
 23e7126:	ee17 2a90 	vmov	r2, s15
 23e712a:	f010 f835 	bl	23f7198 <sprintf>
  Output (Buffer32Bytes);
 23e712e:	4620      	mov	r0, r4
 23e7130:	f7fd fa2a 	bl	23e4588 <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " RT2:%d.%02d", 
    (int)eeprom.rgt2, (int)(eeprom.rgt2*100)%100); 
 23e7134:	ed95 7a02 	vldr	s14, [r5, #8]
 23e7138:	ee67 7a08 	vmul.f32	s15, s14, s16
 23e713c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23e7140:	ee17 3a90 	vmov	r3, s15
  sprintf (Buffer32Bytes, " RT2:%d.%02d", 
 23e7144:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 23e7148:	fb93 f2f6 	sdiv	r2, r3, r6
 23e714c:	492b      	ldr	r1, [pc, #172]	; (23e71fc <_Z11EEPROM_Dumpv+0x16c>)
 23e714e:	fb06 3312 	mls	r3, r6, r2, r3
 23e7152:	4620      	mov	r0, r4
 23e7154:	ee17 2a90 	vmov	r2, s15
 23e7158:	f010 f81e 	bl	23f7198 <sprintf>
  Output (Buffer32Bytes);
 23e715c:	4620      	mov	r0, r4
 23e715e:	f7fd fa13 	bl	23e4588 <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " RP2:%d.%02d", 
  (int)eeprom.rgp2, (int)(eeprom.rgp2*100)%100); 
 23e7162:	edd5 7a03 	vldr	s15, [r5, #12]
 23e7166:	ee27 8a88 	vmul.f32	s16, s15, s16
 23e716a:	eebd 7ac8 	vcvt.s32.f32	s14, s16
 23e716e:	ee17 3a10 	vmov	r3, s14
  sprintf (Buffer32Bytes, " RP2:%d.%02d", 
 23e7172:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23e7176:	fb93 f2f6 	sdiv	r2, r3, r6
 23e717a:	4921      	ldr	r1, [pc, #132]	; (23e7200 <_Z11EEPROM_Dumpv+0x170>)
 23e717c:	fb06 3312 	mls	r3, r6, r2, r3
 23e7180:	4620      	mov	r0, r4
 23e7182:	ee17 2a90 	vmov	r2, s15
 23e7186:	f010 f807 	bl	23f7198 <sprintf>
  Output (Buffer32Bytes);
 23e718a:	4620      	mov	r0, r4
 23e718c:	f7fd f9fc 	bl	23e4588 <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " RGTS:%lu", eeprom.rgts);
 23e7190:	692a      	ldr	r2, [r5, #16]
 23e7192:	491c      	ldr	r1, [pc, #112]	; (23e7204 <_Z11EEPROM_Dumpv+0x174>)
 23e7194:	4620      	mov	r0, r4
 23e7196:	f00f ffff 	bl	23f7198 <sprintf>
  Output (Buffer32Bytes);
 23e719a:	4620      	mov	r0, r4
 23e719c:	f7fd f9f4 	bl	23e4588 <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " N2SFP:%lu", eeprom.n2sfp);
 23e71a0:	696a      	ldr	r2, [r5, #20]
 23e71a2:	4919      	ldr	r1, [pc, #100]	; (23e7208 <_Z11EEPROM_Dumpv+0x178>)
 23e71a4:	4620      	mov	r0, r4
 23e71a6:	f00f fff7 	bl	23f7198 <sprintf>
  Output (Buffer32Bytes);
 23e71aa:	4620      	mov	r0, r4
 23e71ac:	f7fd f9ec 	bl	23e4588 <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " CS:%lu", eeprom.checksum);
 23e71b0:	69aa      	ldr	r2, [r5, #24]
 23e71b2:	4916      	ldr	r1, [pc, #88]	; (23e720c <_Z11EEPROM_Dumpv+0x17c>)
 23e71b4:	4620      	mov	r0, r4
 23e71b6:	f00f ffef 	bl	23f7198 <sprintf>
  Output (Buffer32Bytes);
 23e71ba:	4620      	mov	r0, r4
 23e71bc:	f7fd f9e4 	bl	23e4588 <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " CSC:%lu", checksum);
 23e71c0:	463a      	mov	r2, r7
 23e71c2:	4620      	mov	r0, r4
 23e71c4:	4912      	ldr	r1, [pc, #72]	; (23e7210 <_Z11EEPROM_Dumpv+0x180>)
 23e71c6:	f00f ffe7 	bl	23f7198 <sprintf>
  Output (Buffer32Bytes);
}
 23e71ca:	ecbd 8b02 	vpop	{d8}
  Output (Buffer32Bytes);
 23e71ce:	4620      	mov	r0, r4
}
 23e71d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  Output (Buffer32Bytes);
 23e71d4:	f7fd b9d8 	b.w	23e4588 <_Z6OutputPKc>
 23e71d8:	1006ae4c 	.word	0x1006ae4c
 23e71dc:	1006ae68 	.word	0x1006ae68
 23e71e0:	1006f118 	.word	0x1006f118
 23e71e4:	023fd256 	.word	0x023fd256
 23e71e8:	023fd262 	.word	0x023fd262
 23e71ec:	42c80000 	.word	0x42c80000
 23e71f0:	1006a277 	.word	0x1006a277
 23e71f4:	023fd26a 	.word	0x023fd26a
 23e71f8:	023fd277 	.word	0x023fd277
 23e71fc:	023fd284 	.word	0x023fd284
 23e7200:	023fd291 	.word	0x023fd291
 23e7204:	023fd29e 	.word	0x023fd29e
 23e7208:	023fd2a8 	.word	0x023fd2a8
 23e720c:	023fd2b3 	.word	0x023fd2b3
 23e7210:	023fd2bb 	.word	0x023fd2bb

023e7214 <_Z13SD_initializev>:
/* 
 *=======================================================================================================================
 * SD_initialize()
 *=======================================================================================================================
 */
void SD_initialize() {
 23e7214:	b570      	push	{r4, r5, r6, lr}

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23e7216:	4c41      	ldr	r4, [pc, #260]	; (23e731c <_Z13SD_initializev+0x108>)
 23e7218:	b092      	sub	sp, #72	; 0x48
 23e721a:	e8d4 1f8f 	ldab	r1, [r4]
 23e721e:	f011 0101 	ands.w	r1, r1, #1
 23e7222:	d10b      	bne.n	23e723c <_Z13SD_initializev+0x28>
 23e7224:	4620      	mov	r0, r4
 23e7226:	9103      	str	r1, [sp, #12]
 23e7228:	f010 f87a 	bl	23f7320 <__cxa_guard_acquire>
 23e722c:	9903      	ldr	r1, [sp, #12]
 23e722e:	b128      	cbz	r0, 23e723c <_Z13SD_initializev+0x28>
 23e7230:	483b      	ldr	r0, [pc, #236]	; (23e7320 <_Z13SD_initializev+0x10c>)
 23e7232:	f011 fb3d 	bl	23f88b0 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23e7236:	4620      	mov	r0, r4
 23e7238:	f010 f880 	bl	23f733c <__cxa_guard_release>
  /** Initialize SD card in SPI mode.
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
 23e723c:	2305      	movs	r3, #5
 23e723e:	f8ad 3010 	strh.w	r3, [sp, #16]
 23e7242:	4b38      	ldr	r3, [pc, #224]	; (23e7324 <_Z13SD_initializev+0x110>)
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer or nullptr if failure.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
 23e7244:	4c38      	ldr	r4, [pc, #224]	; (23e7328 <_Z13SD_initializev+0x114>)
 23e7246:	9305      	str	r3, [sp, #20]
 23e7248:	4b35      	ldr	r3, [pc, #212]	; (23e7320 <_Z13SD_initializev+0x10c>)
 23e724a:	f204 468c 	addw	r6, r4, #1164	; 0x48c
 23e724e:	9306      	str	r3, [sp, #24]
 23e7250:	ad04      	add	r5, sp, #16
 23e7252:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 23e7256:	4630      	mov	r0, r6
 23e7258:	f00b fc92 	bl	23f2b80 <_ZN9SdSpiCard5beginE11SdSpiConfig>
    m_card = m_cardFactory.newCard(spiConfig);
    return m_card && !m_card->errorCode();
 23e725c:	f894 34a7 	ldrb.w	r3, [r4, #1191]	; 0x4a7
    m_card = m_cardFactory.newCard(spiConfig);
 23e7260:	f8c4 6488 	str.w	r6, [r4, #1160]	; 0x488
    return m_card && !m_card->errorCode();
 23e7264:	bb63      	cbnz	r3, 23e72c0 <_Z13SD_initializev+0xac>
  /** Initialize file system after call to cardBegin.
   *
   * \return true for success or false for failure.
   */
  bool volumeBegin() {
    return Vol::begin(m_card) || Vol::begin(m_card, true, 0);
 23e7266:	9300      	str	r3, [sp, #0]
 23e7268:	2301      	movs	r3, #1
 23e726a:	4631      	mov	r1, r6
 23e726c:	461a      	mov	r2, r3
 23e726e:	4620      	mov	r0, r4
 23e7270:	f00d fbc4 	bl	23f49fc <_ZN8FsVolume5beginEP9SdSpiCardbhm>
 23e7274:	4603      	mov	r3, r0
 23e7276:	b938      	cbnz	r0, 23e7288 <_Z13SD_initializev+0x74>
 23e7278:	9000      	str	r0, [sp, #0]
 23e727a:	2201      	movs	r2, #1
 23e727c:	4620      	mov	r0, r4
 23e727e:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
 23e7282:	f00d fbbb 	bl	23f49fc <_ZN8FsVolume5beginEP9SdSpiCardbhm>
 23e7286:	b1d8      	cbz	r0, 23e72c0 <_Z13SD_initializev+0xac>
    Output ("SD:NF");
    SystemStatusBits |= SSB_SD;
    delay (5000);
  }
  else {
    if (!SD.exists(SD_obsdir)) {
 23e7288:	4928      	ldr	r1, [pc, #160]	; (23e732c <_Z13SD_initializev+0x118>)
 23e728a:	4827      	ldr	r0, [pc, #156]	; (23e7328 <_Z13SD_initializev+0x114>)
 23e728c:	f7fc feb6 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e7290:	2800      	cmp	r0, #0
 23e7292:	d13d      	bne.n	23e7310 <_Z13SD_initializev+0xfc>
    return m_fVol   ? m_fVol->mkdir(path, pFlag)
 23e7294:	f8d4 1480 	ldr.w	r1, [r4, #1152]	; 0x480
 23e7298:	b309      	cbz	r1, 23e72de <_Z13SD_initializev+0xca>
  FatFile() {}
 23e729a:	9004      	str	r0, [sp, #16]
    return sub.mkdir(vwd(), path, pFlag);
 23e729c:	2301      	movs	r3, #1
 23e729e:	4628      	mov	r0, r5
 23e72a0:	4a22      	ldr	r2, [pc, #136]	; (23e732c <_Z13SD_initializev+0x118>)
 23e72a2:	f201 4144 	addw	r1, r1, #1092	; 0x444
 23e72a6:	f00a fead 	bl	23f2004 <_ZN7FatFile5mkdirEPS_PKcb>
      if (SD.mkdir(SD_obsdir)) {
 23e72aa:	b320      	cbz	r0, 23e72f6 <_Z13SD_initializev+0xe2>
        Output ("SD:MKDIR OBS OK");
 23e72ac:	4820      	ldr	r0, [pc, #128]	; (23e7330 <_Z13SD_initializev+0x11c>)
 23e72ae:	f7fd f96b 	bl	23e4588 <_Z6OutputPKc>
        Output ("SD:Online");
 23e72b2:	4820      	ldr	r0, [pc, #128]	; (23e7334 <_Z13SD_initializev+0x120>)
        SystemStatusBits |= SSB_SD;  // Turn On Bit     
      } 
    }
    else {
      Output ("SD:Online");
      Output ("SD:OBS DIR Exists");
 23e72b4:	f7fd f968 	bl	23e4588 <_Z6OutputPKc>
      SD_exists = true;
 23e72b8:	2201      	movs	r2, #1
 23e72ba:	4b1f      	ldr	r3, [pc, #124]	; (23e7338 <_Z13SD_initializev+0x124>)
 23e72bc:	701a      	strb	r2, [r3, #0]
    }
  }
}
 23e72be:	e025      	b.n	23e730c <_Z13SD_initializev+0xf8>
    Output ("SD:NF");
 23e72c0:	481e      	ldr	r0, [pc, #120]	; (23e733c <_Z13SD_initializev+0x128>)
 23e72c2:	f7fd f961 	bl	23e4588 <_Z6OutputPKc>
    delay (5000);
 23e72c6:	f241 3088 	movw	r0, #5000	; 0x1388
    SystemStatusBits |= SSB_SD;
 23e72ca:	4a1d      	ldr	r2, [pc, #116]	; (23e7340 <_Z13SD_initializev+0x12c>)
 23e72cc:	6813      	ldr	r3, [r2, #0]
 23e72ce:	f043 0302 	orr.w	r3, r3, #2
 23e72d2:	6013      	str	r3, [r2, #0]
}
 23e72d4:	b012      	add	sp, #72	; 0x48
 23e72d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    delay (5000);
 23e72da:	f010 b83d 	b.w	23f7358 <delay>
           : m_xVol ? m_xVol->mkdir(path, pFlag)
 23e72de:	f8d4 0484 	ldr.w	r0, [r4, #1156]	; 0x484
 23e72e2:	b140      	cbz	r0, 23e72f6 <_Z13SD_initializev+0xe2>
  ExFatFile() {}
 23e72e4:	9110      	str	r1, [sp, #64]	; 0x40
    return sub.mkdir(vwd(), path, pFlag);
 23e72e6:	2301      	movs	r3, #1
 23e72e8:	f500 6189 	add.w	r1, r0, #1096	; 0x448
 23e72ec:	4a0f      	ldr	r2, [pc, #60]	; (23e732c <_Z13SD_initializev+0x118>)
 23e72ee:	4628      	mov	r0, r5
 23e72f0:	f00c fda5 	bl	23f3e3e <_ZN9ExFatFile5mkdirEPS_PKcb>
 23e72f4:	e7d9      	b.n	23e72aa <_Z13SD_initializev+0x96>
        Output ("SD:MKDIR OBS ERR");
 23e72f6:	4813      	ldr	r0, [pc, #76]	; (23e7344 <_Z13SD_initializev+0x130>)
 23e72f8:	f7fd f946 	bl	23e4588 <_Z6OutputPKc>
        Output ("SD:Offline");
 23e72fc:	4812      	ldr	r0, [pc, #72]	; (23e7348 <_Z13SD_initializev+0x134>)
 23e72fe:	f7fd f943 	bl	23e4588 <_Z6OutputPKc>
        SystemStatusBits |= SSB_SD;  // Turn On Bit     
 23e7302:	4a0f      	ldr	r2, [pc, #60]	; (23e7340 <_Z13SD_initializev+0x12c>)
 23e7304:	6813      	ldr	r3, [r2, #0]
 23e7306:	f043 0302 	orr.w	r3, r3, #2
 23e730a:	6013      	str	r3, [r2, #0]
}
 23e730c:	b012      	add	sp, #72	; 0x48
 23e730e:	bd70      	pop	{r4, r5, r6, pc}
      Output ("SD:Online");
 23e7310:	4808      	ldr	r0, [pc, #32]	; (23e7334 <_Z13SD_initializev+0x120>)
 23e7312:	f7fd f939 	bl	23e4588 <_Z6OutputPKc>
      Output ("SD:OBS DIR Exists");
 23e7316:	480d      	ldr	r0, [pc, #52]	; (23e734c <_Z13SD_initializev+0x138>)
 23e7318:	e7cc      	b.n	23e72b4 <_Z13SD_initializev+0xa0>
 23e731a:	bf00      	nop
 23e731c:	1006a228 	.word	0x1006a228
 23e7320:	1006a22c 	.word	0x1006a22c
 23e7324:	00989680 	.word	0x00989680
 23e7328:	1006a2c4 	.word	0x1006a2c4
 23e732c:	1006a158 	.word	0x1006a158
 23e7330:	023fd2ca 	.word	0x023fd2ca
 23e7334:	023fd2da 	.word	0x023fd2da
 23e7338:	1006a770 	.word	0x1006a770
 23e733c:	023fd2c4 	.word	0x023fd2c4
 23e7340:	1006a168 	.word	0x1006a168
 23e7344:	023fd2e4 	.word	0x023fd2e4
 23e7348:	023fd2f5 	.word	0x023fd2f5
 23e734c:	023fd300 	.word	0x023fd300

023e7350 <_Z17SD_LogObservationPc>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23e7350:	2300      	movs	r3, #0
 23e7352:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
/* 
 *=======================================================================================================================
 * SD_LogObservation()
 *=======================================================================================================================
 */
void SD_LogObservation(char *observations) {
 23e7356:	b530      	push	{r4, r5, lr}
 23e7358:	b0b3      	sub	sp, #204	; 0xcc
 23e735a:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
  FsBaseFile() = default;  // cppcheck-suppress uninitMemberVar
 23e735e:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23e7362:	4b23      	ldr	r3, [pc, #140]	; (23e73f0 <_Z17SD_LogObservationPc+0xa0>)
 23e7364:	4605      	mov	r5, r0
 23e7366:	930a      	str	r3, [sp, #40]	; 0x28
  char SD_logfile[24];
  File fp;

  if (!SD_exists) {
 23e7368:	4b22      	ldr	r3, [pc, #136]	; (23e73f4 <_Z17SD_LogObservationPc+0xa4>)
 23e736a:	781b      	ldrb	r3, [r3, #0]
 23e736c:	2b00      	cmp	r3, #0
 23e736e:	d034      	beq.n	23e73da <_Z17SD_LogObservationPc+0x8a>
    return;
  }

  if (!Time.isValid()) {
 23e7370:	f011 fe42 	bl	23f8ff8 <_ZN9TimeClass7isValidEv>
 23e7374:	2800      	cmp	r0, #0
 23e7376:	d030      	beq.n	23e73da <_Z17SD_LogObservationPc+0x8a>
    return;
  }
  
  sprintf (SD_logfile, "%s/%4d%02d%02d.log", SD_obsdir, Time.year(), Time.month(), Time.day());
 23e7378:	f011 fea4 	bl	23f90c4 <_ZN9TimeClass4yearEv>
 23e737c:	9003      	str	r0, [sp, #12]
 23e737e:	f011 fe99 	bl	23f90b4 <_ZN9TimeClass5monthEv>
 23e7382:	4604      	mov	r4, r0
 23e7384:	f011 fe8a 	bl	23f909c <_ZN9TimeClass3dayEv>
 23e7388:	9b03      	ldr	r3, [sp, #12]
 23e738a:	e9cd 4000 	strd	r4, r0, [sp]
 23e738e:	4a1a      	ldr	r2, [pc, #104]	; (23e73f8 <_Z17SD_LogObservationPc+0xa8>)
 23e7390:	491a      	ldr	r1, [pc, #104]	; (23e73fc <_Z17SD_LogObservationPc+0xac>)
 23e7392:	a804      	add	r0, sp, #16
 23e7394:	f00f ff00 	bl	23f7198 <sprintf>
  
  fp = SD.open(SD_logfile, FILE_WRITE); 
 23e7398:	aa04      	add	r2, sp, #16
 23e739a:	f244 2302 	movw	r3, #16898	; 0x4202
 23e739e:	4918      	ldr	r1, [pc, #96]	; (23e7400 <_Z17SD_LogObservationPc+0xb0>)
 23e73a0:	a81e      	add	r0, sp, #120	; 0x78
 23e73a2:	f00d fbab 	bl	23f4afc <_ZN8FsVolume4openEPKci>
class Print
 23e73a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    move(&from);
 23e73a8:	a922      	add	r1, sp, #136	; 0x88
 23e73aa:	930b      	str	r3, [sp, #44]	; 0x2c
class Stream : public Print
 23e73ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 23e73ae:	a80e      	add	r0, sp, #56	; 0x38
 23e73b0:	930c      	str	r3, [sp, #48]	; 0x30
 23e73b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 23e73b4:	4c13      	ldr	r4, [pc, #76]	; (23e7404 <_Z17SD_LogObservationPc+0xb4>)
 23e73b6:	930d      	str	r3, [sp, #52]	; 0x34
 23e73b8:	f00d fabd 	bl	23f4936 <_ZN10FsBaseFile4moveEPS_>
  operator bool() const { return isOpen(); }
 23e73bc:	a80e      	add	r0, sp, #56	; 0x38
 23e73be:	f7fc fe96 	bl	23e40ee <_ZNK10FsBaseFile6isOpenEv>
  if (fp) {
 23e73c2:	b160      	cbz	r0, 23e73de <_Z17SD_LogObservationPc+0x8e>
    fp.println(observations);
 23e73c4:	4629      	mov	r1, r5
 23e73c6:	a80a      	add	r0, sp, #40	; 0x28
 23e73c8:	f011 f9f7 	bl	23f87ba <_ZN5Print7printlnEPKc>
    fp.close();
 23e73cc:	a80e      	add	r0, sp, #56	; 0x38
 23e73ce:	f00d fabc 	bl	23f494a <_ZN10FsBaseFile5closeEv>
    SystemStatusBits &= ~SSB_SD;  // Turn Off Bit
 23e73d2:	6823      	ldr	r3, [r4, #0]
 23e73d4:	f023 0302 	bic.w	r3, r3, #2
 23e73d8:	6023      	str	r3, [r4, #0]
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
    Output ("SD:Open(Log)ERR");
    // At thins point we could set SD_exists to false and/or set a status bit to report it
    // sd_initialize();  // Reports SD NOT Found. Library bug with SD
  }
}
 23e73da:	b033      	add	sp, #204	; 0xcc
 23e73dc:	bd30      	pop	{r4, r5, pc}
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23e73de:	6823      	ldr	r3, [r4, #0]
    Output ("SD:Open(Log)ERR");
 23e73e0:	4809      	ldr	r0, [pc, #36]	; (23e7408 <_Z17SD_LogObservationPc+0xb8>)
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23e73e2:	f043 0302 	orr.w	r3, r3, #2
 23e73e6:	6023      	str	r3, [r4, #0]
    Output ("SD:Open(Log)ERR");
 23e73e8:	f7fd f8ce 	bl	23e4588 <_Z6OutputPKc>
    virtual ~Print() {}
 23e73ec:	e7f5      	b.n	23e73da <_Z17SD_LogObservationPc+0x8a>
 23e73ee:	bf00      	nop
 23e73f0:	023fe4c0 	.word	0x023fe4c0
 23e73f4:	1006a770 	.word	0x1006a770
 23e73f8:	1006a158 	.word	0x1006a158
 23e73fc:	023fd312 	.word	0x023fd312
 23e7400:	1006a2c4 	.word	0x1006a2c4
 23e7404:	1006a168 	.word	0x1006a168
 23e7408:	023fd325 	.word	0x023fd325

023e740c <_Z13SD_N2S_Deletev>:
/* 
 *=======================================================================================================================
 * SD_N2S_Delete()
 *=======================================================================================================================
 */
bool SD_N2S_Delete() {
 23e740c:	b538      	push	{r3, r4, r5, lr}
  bool result;

  if (SD_exists && SD.exists(SD_n2s_file)) {
 23e740e:	4b17      	ldr	r3, [pc, #92]	; (23e746c <_Z13SD_N2S_Deletev+0x60>)
 23e7410:	4c17      	ldr	r4, [pc, #92]	; (23e7470 <_Z13SD_N2S_Deletev+0x64>)
 23e7412:	781b      	ldrb	r3, [r3, #0]
 23e7414:	b193      	cbz	r3, 23e743c <_Z13SD_N2S_Deletev+0x30>
 23e7416:	4917      	ldr	r1, [pc, #92]	; (23e7474 <_Z13SD_N2S_Deletev+0x68>)
 23e7418:	4817      	ldr	r0, [pc, #92]	; (23e7478 <_Z13SD_N2S_Deletev+0x6c>)
 23e741a:	f7fc fdef 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e741e:	b168      	cbz	r0, 23e743c <_Z13SD_N2S_Deletev+0x30>
    if (SD.remove (SD_n2s_file)) {
 23e7420:	4914      	ldr	r1, [pc, #80]	; (23e7474 <_Z13SD_N2S_Deletev+0x68>)
 23e7422:	4815      	ldr	r0, [pc, #84]	; (23e7478 <_Z13SD_N2S_Deletev+0x6c>)
 23e7424:	f7fc fe05 	bl	23e4032 <_ZN8FsVolume6removeEPKc>
 23e7428:	4605      	mov	r5, r0
 23e742a:	b9b0      	cbnz	r0, 23e745a <_Z13SD_N2S_Deletev+0x4e>
      SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
      Output ("N2S->DEL:OK");
      result = true;
    }
    else {
      Output ("N2S->DEL:ERR");
 23e742c:	4813      	ldr	r0, [pc, #76]	; (23e747c <_Z13SD_N2S_Deletev+0x70>)
 23e742e:	f7fd f8ab 	bl	23e4588 <_Z6OutputPKc>
      SystemStatusBits |= SSB_SD; // Turn On Bit
 23e7432:	6823      	ldr	r3, [r4, #0]
 23e7434:	f043 0302 	orr.w	r3, r3, #2
 23e7438:	6023      	str	r3, [r4, #0]
      result = false;
 23e743a:	e007      	b.n	23e744c <_Z13SD_N2S_Deletev+0x40>
    }
  }
  else {
    SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23e743c:	6823      	ldr	r3, [r4, #0]
    Output ("N2S->DEL:NF");
 23e743e:	4810      	ldr	r0, [pc, #64]	; (23e7480 <_Z13SD_N2S_Deletev+0x74>)
    SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23e7440:	f023 0310 	bic.w	r3, r3, #16
 23e7444:	6023      	str	r3, [r4, #0]
    result = true;
 23e7446:	2501      	movs	r5, #1
    Output ("N2S->DEL:NF");
 23e7448:	f7fd f89e 	bl	23e4588 <_Z6OutputPKc>
  }
  eeprom.n2sfp = 0;
 23e744c:	2200      	movs	r2, #0
 23e744e:	4b0d      	ldr	r3, [pc, #52]	; (23e7484 <_Z13SD_N2S_Deletev+0x78>)
 23e7450:	615a      	str	r2, [r3, #20]
  EEPROM_Update();
 23e7452:	f7ff fdf9 	bl	23e7048 <_Z13EEPROM_Updatev>
  return (result);
}
 23e7456:	4628      	mov	r0, r5
 23e7458:	bd38      	pop	{r3, r4, r5, pc}
      SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23e745a:	6823      	ldr	r3, [r4, #0]
      Output ("N2S->DEL:OK");
 23e745c:	480a      	ldr	r0, [pc, #40]	; (23e7488 <_Z13SD_N2S_Deletev+0x7c>)
      SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23e745e:	f023 0310 	bic.w	r3, r3, #16
 23e7462:	6023      	str	r3, [r4, #0]
      Output ("N2S->DEL:OK");
 23e7464:	f7fd f890 	bl	23e4588 <_Z6OutputPKc>
      result = true;
 23e7468:	e7f0      	b.n	23e744c <_Z13SD_N2S_Deletev+0x40>
 23e746a:	bf00      	nop
 23e746c:	1006a770 	.word	0x1006a770
 23e7470:	1006a168 	.word	0x1006a168
 23e7474:	1006a147 	.word	0x1006a147
 23e7478:	1006a2c4 	.word	0x1006a2c4
 23e747c:	023fd34d 	.word	0x023fd34d
 23e7480:	023fd335 	.word	0x023fd335
 23e7484:	1006ae4c 	.word	0x1006ae4c
 23e7488:	023fd341 	.word	0x023fd341

023e748c <_Z17SD_NeedToSend_AddPc>:
/* 
 *=======================================================================================================================
 * SD_NeedToSend_Add()
 *=======================================================================================================================
 */
void SD_NeedToSend_Add(char *observation) {
 23e748c:	b530      	push	{r4, r5, lr}
    Stream() {_timeout=1000;}
 23e748e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23e7492:	2500      	movs	r5, #0
 23e7494:	b0a9      	sub	sp, #164	; 0xa4
 23e7496:	e9cd 5301 	strd	r5, r3, [sp, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23e749a:	4b26      	ldr	r3, [pc, #152]	; (23e7534 <_Z17SD_NeedToSend_AddPc+0xa8>)
 23e749c:	4604      	mov	r4, r0
 23e749e:	9300      	str	r3, [sp, #0]
  File fp;

  if (!SD_exists) {
 23e74a0:	4b25      	ldr	r3, [pc, #148]	; (23e7538 <_Z17SD_NeedToSend_AddPc+0xac>)
  FsBaseFile() = default;  // cppcheck-suppress uninitMemberVar
 23e74a2:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
 23e74a6:	781b      	ldrb	r3, [r3, #0]
 23e74a8:	b34b      	cbz	r3, 23e74fe <_Z17SD_NeedToSend_AddPc+0x72>
    return;
  }
  
  fp = SD.open(SD_n2s_file, FILE_WRITE); // Open the file for reading and writing, starting at the end of the file.
 23e74aa:	f244 2302 	movw	r3, #16898	; 0x4202
 23e74ae:	4a23      	ldr	r2, [pc, #140]	; (23e753c <_Z17SD_NeedToSend_AddPc+0xb0>)
 23e74b0:	4923      	ldr	r1, [pc, #140]	; (23e7540 <_Z17SD_NeedToSend_AddPc+0xb4>)
 23e74b2:	a814      	add	r0, sp, #80	; 0x50
 23e74b4:	f00d fb22 	bl	23f4afc <_ZN8FsVolume4openEPKci>
class Print
 23e74b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    move(&from);
 23e74ba:	a804      	add	r0, sp, #16
 23e74bc:	9301      	str	r3, [sp, #4]
class Stream : public Print
 23e74be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 23e74c0:	a918      	add	r1, sp, #96	; 0x60
 23e74c2:	9302      	str	r3, [sp, #8]
 23e74c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23e74c6:	9303      	str	r3, [sp, #12]
 23e74c8:	f00d fa35 	bl	23f4936 <_ZN10FsBaseFile4moveEPS_>
  operator bool() const { return isOpen(); }
 23e74cc:	a804      	add	r0, sp, #16
 23e74ce:	f7fc fe0e 	bl	23e40ee <_ZNK10FsBaseFile6isOpenEv>
                                         // It will be created if it doesn't already exist.
  if (fp) {  
 23e74d2:	b340      	cbz	r0, 23e7526 <_Z17SD_NeedToSend_AddPc+0x9a>
  PosType size() { return BaseFile::fileSize(); }
 23e74d4:	a804      	add	r0, sp, #16
 23e74d6:	f7fc fdfe 	bl	23e40d6 <_ZNK10FsBaseFile8fileSizeEv>
    if (fp.size() > SD_n2s_max_filesz) {
 23e74da:	4b1a      	ldr	r3, [pc, #104]	; (23e7544 <_Z17SD_NeedToSend_AddPc+0xb8>)
 23e74dc:	681b      	ldr	r3, [r3, #0]
 23e74de:	4283      	cmp	r3, r0
 23e74e0:	eb75 0301 	sbcs.w	r3, r5, r1
 23e74e4:	d20d      	bcs.n	23e7502 <_Z17SD_NeedToSend_AddPc+0x76>
      fp.close();
 23e74e6:	a804      	add	r0, sp, #16
 23e74e8:	f00d fa2f 	bl	23f494a <_ZN10FsBaseFile5closeEv>
      Output ("N2S:Full");
 23e74ec:	4816      	ldr	r0, [pc, #88]	; (23e7548 <_Z17SD_NeedToSend_AddPc+0xbc>)
 23e74ee:	f7fd f84b 	bl	23e4588 <_Z6OutputPKc>
      if (SD_N2S_Delete()) {
 23e74f2:	f7ff ff8b 	bl	23e740c <_Z13SD_N2S_Deletev>
 23e74f6:	b110      	cbz	r0, 23e74fe <_Z17SD_NeedToSend_AddPc+0x72>
        // Only call ourself again if we truely deleted the file. Otherwise infinate loop.
        SD_NeedToSend_Add(observation); // Now go and log the data
 23e74f8:	4620      	mov	r0, r4
 23e74fa:	f7ff ffc7 	bl	23e748c <_Z17SD_NeedToSend_AddPc>
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
    Output ("N2S:Open Error");
    // At thins point we could set SD_exists to false and/or set a status bit to report it
    // sd_initialize();  // Reports SD NOT Found. Library bug with SD
  }
}
 23e74fe:	b029      	add	sp, #164	; 0xa4
 23e7500:	bd30      	pop	{r4, r5, pc}
      fp.println(observation); //Print data, followed by a carriage return and newline, to the File
 23e7502:	4621      	mov	r1, r4
 23e7504:	4668      	mov	r0, sp
 23e7506:	f011 f958 	bl	23f87ba <_ZN5Print7printlnEPKc>
      fp.close();
 23e750a:	a804      	add	r0, sp, #16
 23e750c:	f00d fa1d 	bl	23f494a <_ZN10FsBaseFile5closeEv>
      SystemStatusBits |= SSB_N2S; // Turn on Bit that says there are entries in the N2S File
 23e7510:	4a0e      	ldr	r2, [pc, #56]	; (23e754c <_Z17SD_NeedToSend_AddPc+0xc0>)
      Output ("N2S:OBS Added");
 23e7512:	480f      	ldr	r0, [pc, #60]	; (23e7550 <_Z17SD_NeedToSend_AddPc+0xc4>)
      SystemStatusBits &= ~SSB_SD;  // Turn Off Bit
 23e7514:	6813      	ldr	r3, [r2, #0]
 23e7516:	f023 0302 	bic.w	r3, r3, #2
      SystemStatusBits |= SSB_N2S; // Turn on Bit that says there are entries in the N2S File
 23e751a:	f043 0310 	orr.w	r3, r3, #16
 23e751e:	6013      	str	r3, [r2, #0]
    Output ("N2S:Open Error");
 23e7520:	f7fd f832 	bl	23e4588 <_Z6OutputPKc>
 23e7524:	e7eb      	b.n	23e74fe <_Z17SD_NeedToSend_AddPc+0x72>
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23e7526:	4a09      	ldr	r2, [pc, #36]	; (23e754c <_Z17SD_NeedToSend_AddPc+0xc0>)
    Output ("N2S:Open Error");
 23e7528:	480a      	ldr	r0, [pc, #40]	; (23e7554 <_Z17SD_NeedToSend_AddPc+0xc8>)
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23e752a:	6813      	ldr	r3, [r2, #0]
 23e752c:	f043 0302 	orr.w	r3, r3, #2
 23e7530:	6013      	str	r3, [r2, #0]
    Output ("N2S:Open Error");
 23e7532:	e7f5      	b.n	23e7520 <_Z17SD_NeedToSend_AddPc+0x94>
 23e7534:	023fe4c0 	.word	0x023fe4c0
 23e7538:	1006a770 	.word	0x1006a770
 23e753c:	1006a147 	.word	0x1006a147
 23e7540:	1006a2c4 	.word	0x1006a2c4
 23e7544:	1006a154 	.word	0x1006a154
 23e7548:	023fd35a 	.word	0x023fd35a
 23e754c:	1006a168 	.word	0x1006a168
 23e7550:	023fd363 	.word	0x023fd363
 23e7554:	023fd371 	.word	0x023fd371

023e7558 <_Z16lora_msgs_to_n2sv>:
void lora_msgs_to_n2s() {
 23e7558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (LORA_exists) {
 23e755c:	4b14      	ldr	r3, [pc, #80]	; (23e75b0 <_Z16lora_msgs_to_n2sv+0x58>)
 23e755e:	781b      	ldrb	r3, [r3, #0]
 23e7560:	b31b      	cbz	r3, 23e75aa <_Z16lora_msgs_to_n2sv+0x52>
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e7562:	2500      	movs	r5, #0
 23e7564:	4c13      	ldr	r4, [pc, #76]	; (23e75b4 <_Z16lora_msgs_to_n2sv+0x5c>)
        sprintf (msgbuf, "%s,%s", m->message, relay_msgtypes[m->message_type]);
 23e7566:	4f14      	ldr	r7, [pc, #80]	; (23e75b8 <_Z16lora_msgs_to_n2sv+0x60>)
 23e7568:	f8df 805c 	ldr.w	r8, [pc, #92]	; 23e75c8 <_Z16lora_msgs_to_n2sv+0x70>
 23e756c:	4e13      	ldr	r6, [pc, #76]	; (23e75bc <_Z16lora_msgs_to_n2sv+0x64>)
      if (m->need2log) {
 23e756e:	7823      	ldrb	r3, [r4, #0]
 23e7570:	b1b3      	cbz	r3, 23e75a0 <_Z16lora_msgs_to_n2sv+0x48>
        sprintf (msgbuf, "%s,%s", m->message, relay_msgtypes[m->message_type]);
 23e7572:	6863      	ldr	r3, [r4, #4]
 23e7574:	4641      	mov	r1, r8
 23e7576:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 23e757a:	f104 0208 	add.w	r2, r4, #8
 23e757e:	4630      	mov	r0, r6
 23e7580:	f00f fe0a 	bl	23f7198 <sprintf>
        SD_NeedToSend_Add(msgbuf); // Save to N2F File
 23e7584:	4630      	mov	r0, r6
 23e7586:	f7ff ff81 	bl	23e748c <_Z17SD_NeedToSend_AddPc>
        lora_relay_msg_free(m);
 23e758a:	4620      	mov	r0, r4
 23e758c:	f7fd f986 	bl	23e489c <_Z19lora_relay_msg_freeP18LORA_MSG_RELAY_STR>
        sprintf (Buffer32Bytes, "LoRaMsg[%d]->N2S", i);
 23e7590:	462a      	mov	r2, r5
 23e7592:	490b      	ldr	r1, [pc, #44]	; (23e75c0 <_Z16lora_msgs_to_n2sv+0x68>)
 23e7594:	480b      	ldr	r0, [pc, #44]	; (23e75c4 <_Z16lora_msgs_to_n2sv+0x6c>)
 23e7596:	f00f fdff 	bl	23f7198 <sprintf>
        Output (Buffer32Bytes);
 23e759a:	480a      	ldr	r0, [pc, #40]	; (23e75c4 <_Z16lora_msgs_to_n2sv+0x6c>)
 23e759c:	f7fc fff4 	bl	23e4588 <_Z6OutputPKc>
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e75a0:	3501      	adds	r5, #1
 23e75a2:	2d40      	cmp	r5, #64	; 0x40
 23e75a4:	f504 7484 	add.w	r4, r4, #264	; 0x108
 23e75a8:	d1e1      	bne.n	23e756e <_Z16lora_msgs_to_n2sv+0x16>
}
 23e75aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23e75ae:	bf00      	nop
 23e75b0:	1006a2a1 	.word	0x1006a2a1
 23e75b4:	1006aeb0 	.word	0x1006aeb0
 23e75b8:	1006a1a0 	.word	0x1006a1a0
 23e75bc:	1006f118 	.word	0x1006f118
 23e75c0:	023fd386 	.word	0x023fd386
 23e75c4:	1006a277 	.word	0x1006a277
 23e75c8:	023fd380 	.word	0x023fd380

023e75cc <_Z14lora_relay_msgPc>:
 *   INT,   Station ID
 *   INT,   Message Counter
 *   OBS    JSON Observation
 *=======================================================================================================================
 */
void lora_relay_msg(char *obs) {
 23e75cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  int unit_id = 0;
  unsigned int message_counter = 0;
  char *message;
  char *p;

  if ((obs[0] == 'I') && (obs[1] == 'F')) {
 23e75ce:	7802      	ldrb	r2, [r0, #0]
 23e75d0:	7843      	ldrb	r3, [r0, #1]
 23e75d2:	2a49      	cmp	r2, #73	; 0x49
void lora_relay_msg(char *obs) {
 23e75d4:	b087      	sub	sp, #28
  if ((obs[0] == 'I') && (obs[1] == 'F')) {
 23e75d6:	d133      	bne.n	23e7640 <_Z14lora_relay_msgPc+0x74>
 23e75d8:	2b46      	cmp	r3, #70	; 0x46
 23e75da:	d135      	bne.n	23e7648 <_Z14lora_relay_msgPc+0x7c>
    message_type = 1;
 23e75dc:	2501      	movs	r5, #1
    Output (Buffer32Bytes);
    return;
  }

  p = &obs[2]; // Start after message type 
  unit_id = atoi (strtok_r(p, ",", &p));
 23e75de:	492c      	ldr	r1, [pc, #176]	; (23e7690 <_Z14lora_relay_msgPc+0xc4>)
 23e75e0:	aa05      	add	r2, sp, #20
  p = &obs[2]; // Start after message type 
 23e75e2:	3002      	adds	r0, #2
 23e75e4:	9005      	str	r0, [sp, #20]
  unit_id = atoi (strtok_r(p, ",", &p));
 23e75e6:	f014 fffc 	bl	23fc5e2 <strtok_r>
 23e75ea:	f014 feb5 	bl	23fc358 <atoi>
  message_counter = atoi (strtok_r(p, ",", &p));
 23e75ee:	4928      	ldr	r1, [pc, #160]	; (23e7690 <_Z14lora_relay_msgPc+0xc4>)
 23e75f0:	aa05      	add	r2, sp, #20
  unit_id = atoi (strtok_r(p, ",", &p));
 23e75f2:	9003      	str	r0, [sp, #12]
  message_counter = atoi (strtok_r(p, ",", &p));
 23e75f4:	9805      	ldr	r0, [sp, #20]
 23e75f6:	f014 fff4 	bl	23fc5e2 <strtok_r>
 23e75fa:	f014 fead 	bl	23fc358 <atoi>
  message = p;

  sprintf (Buffer32Bytes, "LORA TYPE:%s ID:%d CNT:%d", relay_msgtypes[message_type], unit_id, message_counter);
 23e75fe:	4e25      	ldr	r6, [pc, #148]	; (23e7694 <_Z14lora_relay_msgPc+0xc8>)
 23e7600:	9b03      	ldr	r3, [sp, #12]
 23e7602:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 23e7606:	4924      	ldr	r1, [pc, #144]	; (23e7698 <_Z14lora_relay_msgPc+0xcc>)
 23e7608:	9000      	str	r0, [sp, #0]
 23e760a:	4824      	ldr	r0, [pc, #144]	; (23e769c <_Z14lora_relay_msgPc+0xd0>)
  message = p;
 23e760c:	9f05      	ldr	r7, [sp, #20]
  sprintf (Buffer32Bytes, "LORA TYPE:%s ID:%d CNT:%d", relay_msgtypes[message_type], unit_id, message_counter);
 23e760e:	f00f fdc3 	bl	23f7198 <sprintf>
  Output (Buffer32Bytes);
 23e7612:	4822      	ldr	r0, [pc, #136]	; (23e769c <_Z14lora_relay_msgPc+0xd0>)
 23e7614:	f7fc ffb8 	bl	23e4588 <_Z6OutputPKc>
  // Output (message);

  // Locate storage index
  int idx = lora_relay_notinuse();
 23e7618:	f7fd f956 	bl	23e48c8 <_Z19lora_relay_notinusev>

  if (idx == -1) {
 23e761c:	1c42      	adds	r2, r0, #1
  int idx = lora_relay_notinuse();
 23e761e:	4604      	mov	r4, r0
  if (idx == -1) {
 23e7620:	d11e      	bne.n	23e7660 <_Z14lora_relay_msgPc+0x94>
    Output ("LORA Relay NoSpace");
 23e7622:	481f      	ldr	r0, [pc, #124]	; (23e76a0 <_Z14lora_relay_msgPc+0xd4>)
 23e7624:	f7fc ffb0 	bl	23e4588 <_Z6OutputPKc>

    // Dump all LoRA messages to N2S
    lora_msgs_to_n2s();  // No Space - Dump all LoRA messages to N2S, then save new message
 23e7628:	f7ff ff96 	bl	23e7558 <_Z16lora_msgs_to_n2sv>

    idx = lora_relay_notinuse(); // This better not be -1 after freeing
 23e762c:	f7fd f94c 	bl	23e48c8 <_Z19lora_relay_notinusev>
    if (idx == -1) {
 23e7630:	1c43      	adds	r3, r0, #1
    idx = lora_relay_notinuse(); // This better not be -1 after freeing
 23e7632:	4604      	mov	r4, r0
    if (idx == -1) {
 23e7634:	d114      	bne.n	23e7660 <_Z14lora_relay_msgPc+0x94>
      Output ("LORA Relay MsgLost");
 23e7636:	481b      	ldr	r0, [pc, #108]	; (23e76a4 <_Z14lora_relay_msgPc+0xd8>)
  m = &lora_msg_relay[idx]; // Lets work with a pointer and not the index
  m->need2log = true;
  m->message_type = message_type;
  strncpy (m->message, message, LORA_RELAY_MSG_LENGTH-1); // minus 1 so last byte in array will always be null
  sprintf (Buffer32Bytes, "LORA Relay %s -> Queued:%d", relay_msgtypes[message_type], idx);
  Output (Buffer32Bytes);
 23e7638:	f7fc ffa6 	bl	23e4588 <_Z6OutputPKc>
}
 23e763c:	b007      	add	sp, #28
 23e763e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((obs[0] == 'L') && (obs[1] == 'R')) {
 23e7640:	2a4c      	cmp	r2, #76	; 0x4c
 23e7642:	d101      	bne.n	23e7648 <_Z14lora_relay_msgPc+0x7c>
 23e7644:	2b52      	cmp	r3, #82	; 0x52
 23e7646:	d009      	beq.n	23e765c <_Z14lora_relay_msgPc+0x90>
    sprintf (Buffer32Bytes, "LORA Relay %c%c Unkn", obs[0], obs[1]);
 23e7648:	4917      	ldr	r1, [pc, #92]	; (23e76a8 <_Z14lora_relay_msgPc+0xdc>)
 23e764a:	4814      	ldr	r0, [pc, #80]	; (23e769c <_Z14lora_relay_msgPc+0xd0>)
 23e764c:	f00f fda4 	bl	23f7198 <sprintf>
    Output (Buffer32Bytes);
 23e7650:	4812      	ldr	r0, [pc, #72]	; (23e769c <_Z14lora_relay_msgPc+0xd0>)
}
 23e7652:	b007      	add	sp, #28
 23e7654:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    Output (Buffer32Bytes);
 23e7658:	f7fc bf96 	b.w	23e4588 <_Z6OutputPKc>
    message_type = 2; 
 23e765c:	2502      	movs	r5, #2
 23e765e:	e7be      	b.n	23e75de <_Z14lora_relay_msgPc+0x12>
  m->need2log = true;
 23e7660:	f44f 7384 	mov.w	r3, #264	; 0x108
 23e7664:	2101      	movs	r1, #1
 23e7666:	4363      	muls	r3, r4
 23e7668:	4810      	ldr	r0, [pc, #64]	; (23e76ac <_Z14lora_relay_msgPc+0xe0>)
 23e766a:	18c2      	adds	r2, r0, r3
 23e766c:	54c1      	strb	r1, [r0, r3]
  strncpy (m->message, message, LORA_RELAY_MSG_LENGTH-1); // minus 1 so last byte in array will always be null
 23e766e:	3308      	adds	r3, #8
 23e7670:	4639      	mov	r1, r7
  m->message_type = message_type;
 23e7672:	6055      	str	r5, [r2, #4]
  strncpy (m->message, message, LORA_RELAY_MSG_LENGTH-1); // minus 1 so last byte in array will always be null
 23e7674:	4418      	add	r0, r3
 23e7676:	22ff      	movs	r2, #255	; 0xff
 23e7678:	f014 ff78 	bl	23fc56c <strncpy>
  sprintf (Buffer32Bytes, "LORA Relay %s -> Queued:%d", relay_msgtypes[message_type], idx);
 23e767c:	4623      	mov	r3, r4
 23e767e:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 23e7682:	490b      	ldr	r1, [pc, #44]	; (23e76b0 <_Z14lora_relay_msgPc+0xe4>)
 23e7684:	4805      	ldr	r0, [pc, #20]	; (23e769c <_Z14lora_relay_msgPc+0xd0>)
 23e7686:	f00f fd87 	bl	23f7198 <sprintf>
  Output (Buffer32Bytes);
 23e768a:	4804      	ldr	r0, [pc, #16]	; (23e769c <_Z14lora_relay_msgPc+0xd0>)
 23e768c:	e7d4      	b.n	23e7638 <_Z14lora_relay_msgPc+0x6c>
 23e768e:	bf00      	nop
 23e7690:	023fd3ac 	.word	0x023fd3ac
 23e7694:	1006a1a0 	.word	0x1006a1a0
 23e7698:	023fd3ae 	.word	0x023fd3ae
 23e769c:	1006a277 	.word	0x1006a277
 23e76a0:	023fd3c8 	.word	0x023fd3c8
 23e76a4:	023fd3db 	.word	0x023fd3db
 23e76a8:	023fd397 	.word	0x023fd397
 23e76ac:	1006aeb0 	.word	0x1006aeb0
 23e76b0:	023fd3ee 	.word	0x023fd3ee

023e76b4 <_Z10SD_findKeyPK19__FlashStringHelperPc>:
 *  myInt_1=2
 *  myFloat_1=0.74
 * =======================================================================================================================
 */

int SD_findKey(const __FlashStringHelper * key, char * value) {
 23e76b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23e76b8:	4607      	mov	r7, r0
 23e76ba:	b0ac      	sub	sp, #176	; 0xb0
  
  // Disable LoRA SPI0 Chip Select
  pinMode(LORA_SS, OUTPUT);
 23e76bc:	2003      	movs	r0, #3
int SD_findKey(const __FlashStringHelper * key, char * value) {
 23e76be:	460e      	mov	r6, r1
  pinMode(LORA_SS, OUTPUT);
 23e76c0:	2101      	movs	r1, #1
 23e76c2:	f012 f82b 	bl	23f971c <pinMode>
  digitalWrite(LORA_SS, HIGH);
 23e76c6:	2101      	movs	r1, #1
 23e76c8:	2003      	movs	r0, #3
 23e76ca:	f012 f838 	bl	23f973e <digitalWrite>
  
  File configFile = SD.open(CF_NAME);
 23e76ce:	2300      	movs	r3, #0
 23e76d0:	4a29      	ldr	r2, [pc, #164]	; (23e7778 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xc4>)
 23e76d2:	492a      	ldr	r1, [pc, #168]	; (23e777c <_Z10SD_findKeyPK19__FlashStringHelperPc+0xc8>)
 23e76d4:	a818      	add	r0, sp, #96	; 0x60
 23e76d6:	f00d fa11 	bl	23f4afc <_ZN8FsVolume4openEPKci>
 23e76da:	a81c      	add	r0, sp, #112	; 0x70
 23e76dc:	f7fc fd07 	bl	23e40ee <_ZNK10FsBaseFile6isOpenEv>

  if (!configFile) {
 23e76e0:	4604      	mov	r4, r0
 23e76e2:	2800      	cmp	r0, #0
 23e76e4:	d035      	beq.n	23e7752 <_Z10SD_findKeyPK19__FlashStringHelperPc+0x9e>
 23e76e6:	466b      	mov	r3, sp
    return(0);
  }

  char key_string[KEY_MAX_LENGTH];
  char SD_buffer[KEY_MAX_LENGTH + VALUE_MAX_LENGTH + 1]; // 1 is = character
  int key_length = 0;
 23e76e8:	2500      	movs	r5, #0
 23e76ea:	4698      	mov	r8, r3
  // Flash string to string
  PGM_P keyPoiter;
  keyPoiter = reinterpret_cast<PGM_P>(key);
  byte ch;
  do {
    ch = pgm_read_byte(keyPoiter++);
 23e76ec:	5d7a      	ldrb	r2, [r7, r5]
    if (ch != 0)
 23e76ee:	2a00      	cmp	r2, #0
 23e76f0:	d13d      	bne.n	23e776e <_Z10SD_findKeyPK19__FlashStringHelperPc+0xba>
    // WINDOWS uses CFLF = \r\n
    int buffer_length = configFile.readBytesUntil('\n', SD_buffer, LINE_MAX_LENGTH);
    if (SD_buffer[buffer_length - 1] == '\r')
      buffer_length--; // trim the \r

    if (buffer_length > (key_length + 1)) { // 1 is = character
 23e76f2:	1c6f      	adds	r7, r5, #1
  int available() override { return BaseFile::available(); }
 23e76f4:	a81c      	add	r0, sp, #112	; 0x70
 23e76f6:	f7fc fcc1 	bl	23e407c <_ZNK10FsBaseFile9availableEv>
  while (configFile.available()) {
 23e76fa:	4604      	mov	r4, r0
 23e76fc:	b328      	cbz	r0, 23e774a <_Z10SD_findKeyPK19__FlashStringHelperPc+0x96>
    int buffer_length = configFile.readBytesUntil('\n', SD_buffer, LINE_MAX_LENGTH);
 23e76fe:	233f      	movs	r3, #63	; 0x3f
 23e7700:	aa08      	add	r2, sp, #32
 23e7702:	210a      	movs	r1, #10
 23e7704:	a818      	add	r0, sp, #96	; 0x60
 23e7706:	f011 f9e4 	bl	23f8ad2 <_ZN6Stream14readBytesUntilEcPcj>
 23e770a:	4604      	mov	r4, r0
    if (SD_buffer[buffer_length - 1] == '\r')
 23e770c:	1e43      	subs	r3, r0, #1
 23e770e:	aa2c      	add	r2, sp, #176	; 0xb0
 23e7710:	441a      	add	r2, r3
 23e7712:	f812 2c90 	ldrb.w	r2, [r2, #-144]
      buffer_length--; // trim the \r
 23e7716:	2a0d      	cmp	r2, #13
 23e7718:	bf08      	it	eq
 23e771a:	461c      	moveq	r4, r3
    if (buffer_length > (key_length + 1)) { // 1 is = character
 23e771c:	42a7      	cmp	r7, r4
 23e771e:	dae9      	bge.n	23e76f4 <_Z10SD_findKeyPK19__FlashStringHelperPc+0x40>
      if (memcmp(SD_buffer, key_string, key_length) == 0) { // equal
 23e7720:	462a      	mov	r2, r5
 23e7722:	4641      	mov	r1, r8
 23e7724:	a808      	add	r0, sp, #32
 23e7726:	f014 fe41 	bl	23fc3ac <memcmp>
 23e772a:	2800      	cmp	r0, #0
 23e772c:	d1e2      	bne.n	23e76f4 <_Z10SD_findKeyPK19__FlashStringHelperPc+0x40>
        if (SD_buffer[key_length] == '=') {
 23e772e:	ab2c      	add	r3, sp, #176	; 0xb0
 23e7730:	442b      	add	r3, r5
 23e7732:	f813 3c90 	ldrb.w	r3, [r3, #-144]
 23e7736:	2b3d      	cmp	r3, #61	; 0x3d
 23e7738:	d1dc      	bne.n	23e76f4 <_Z10SD_findKeyPK19__FlashStringHelperPc+0x40>
          value_length = buffer_length - key_length - 1;
 23e773a:	1b64      	subs	r4, r4, r5
 23e773c:	3c01      	subs	r4, #1
          memcpy(value, SD_buffer + key_length + 1, value_length);
 23e773e:	ab08      	add	r3, sp, #32
 23e7740:	4622      	mov	r2, r4
 23e7742:	4630      	mov	r0, r6
 23e7744:	19d9      	adds	r1, r3, r7
 23e7746:	f014 fe41 	bl	23fc3cc <memcpy>
        }
      }
    }
  }

  configFile.close();  // close the file
 23e774a:	a81c      	add	r0, sp, #112	; 0x70
 23e774c:	f00d f8fd 	bl	23f494a <_ZN10FsBaseFile5closeEv>
  return value_length;
 23e7750:	e009      	b.n	23e7766 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xb2>
    Serial.print(F("SD Card: error on opening file "));
 23e7752:	f011 fd85 	bl	23f9260 <_Z16_fetch_usbserialv>
 23e7756:	490a      	ldr	r1, [pc, #40]	; (23e7780 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xcc>)
 23e7758:	f011 f81f 	bl	23f879a <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println(CF_NAME);
 23e775c:	f011 fd80 	bl	23f9260 <_Z16_fetch_usbserialv>
 23e7760:	4905      	ldr	r1, [pc, #20]	; (23e7778 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xc4>)
 23e7762:	f011 f82a 	bl	23f87ba <_ZN5Print7printlnEPKc>
}
 23e7766:	4620      	mov	r0, r4
 23e7768:	b02c      	add	sp, #176	; 0xb0
 23e776a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      key_string[key_length++] = ch;
 23e776e:	3501      	adds	r5, #1
 23e7770:	f803 2b01 	strb.w	r2, [r3], #1
  } while (ch != 0);
 23e7774:	e7ba      	b.n	23e76ec <_Z10SD_findKeyPK19__FlashStringHelperPc+0x38>
 23e7776:	bf00      	nop
 23e7778:	023fd409 	.word	0x023fd409
 23e777c:	1006a2c4 	.word	0x1006a2c4
 23e7780:	023fd414 	.word	0x023fd414

023e7784 <_Z16HELPER_ascii2IntPci>:

int HELPER_ascii2Int(char *ascii, int length) {
  int sign = 1;
  int number = 0;

  for (int i = 0; i < length; i++) {
 23e7784:	2300      	movs	r3, #0
int HELPER_ascii2Int(char *ascii, int length) {
 23e7786:	b5f0      	push	{r4, r5, r6, r7, lr}
  int number = 0;
 23e7788:	461c      	mov	r4, r3
  int sign = 1;
 23e778a:	2501      	movs	r5, #1
    char c = *(ascii + i);
    if (i == 0 && c == '-')
      sign = -1;
    else {
      if (c >= '0' && c <= '9')
        number = number * 10 + (c - '0');
 23e778c:	260a      	movs	r6, #10
  for (int i = 0; i < length; i++) {
 23e778e:	428b      	cmp	r3, r1
 23e7790:	da0e      	bge.n	23e77b0 <_Z16HELPER_ascii2IntPci+0x2c>
    char c = *(ascii + i);
 23e7792:	5cc2      	ldrb	r2, [r0, r3]
    if (i == 0 && c == '-')
 23e7794:	b90b      	cbnz	r3, 23e779a <_Z16HELPER_ascii2IntPci+0x16>
 23e7796:	2a2d      	cmp	r2, #45	; 0x2d
 23e7798:	d007      	beq.n	23e77aa <_Z16HELPER_ascii2IntPci+0x26>
      if (c >= '0' && c <= '9')
 23e779a:	3a30      	subs	r2, #48	; 0x30
 23e779c:	b2d7      	uxtb	r7, r2
 23e779e:	2f09      	cmp	r7, #9
 23e77a0:	d801      	bhi.n	23e77a6 <_Z16HELPER_ascii2IntPci+0x22>
        number = number * 10 + (c - '0');
 23e77a2:	fb06 2404 	mla	r4, r6, r4, r2
  for (int i = 0; i < length; i++) {
 23e77a6:	3301      	adds	r3, #1
 23e77a8:	e7f1      	b.n	23e778e <_Z16HELPER_ascii2IntPci+0xa>
      sign = -1;
 23e77aa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 23e77ae:	e7fa      	b.n	23e77a6 <_Z16HELPER_ascii2IntPci+0x22>
    }
  }

  return number * sign;
}
 23e77b0:	fb04 f005 	mul.w	r0, r4, r5
 23e77b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

023e77b6 <_Z20HELPER_ascii2CharStrPci>:
    str += String(c);
  }
  return str;
}

char* HELPER_ascii2CharStr(char *ascii, int length) {
 23e77b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23e77b8:	4606      	mov	r6, r0
  char *str;
  str = (char *) malloc (length+1);
 23e77ba:	1c48      	adds	r0, r1, #1
char* HELPER_ascii2CharStr(char *ascii, int length) {
 23e77bc:	460c      	mov	r4, r1
  str = (char *) malloc (length+1);
 23e77be:	f00f fcc1 	bl	23f7144 <malloc>
  str[0] = 0;
 23e77c2:	2100      	movs	r1, #0
  str = (char *) malloc (length+1);
 23e77c4:	4605      	mov	r5, r0
  for (int i = 0; i < length; i++) {
    char c = *(ascii + i);
    str[i] = c;
    str[i+1] = 0;
 23e77c6:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
  str[0] = 0;
 23e77ca:	f800 1b01 	strb.w	r1, [r0], #1
    str[i+1] = 0;
 23e77ce:	9201      	str	r2, [sp, #4]
 23e77d0:	f014 fe09 	bl	23fc3e6 <memset>
    str[i] = c;
 23e77d4:	4631      	mov	r1, r6
 23e77d6:	4628      	mov	r0, r5
 23e77d8:	9a01      	ldr	r2, [sp, #4]
 23e77da:	f014 fdf7 	bl	23fc3cc <memcpy>
  }
  return str;
}
 23e77de:	4628      	mov	r0, r5
 23e77e0:	b002      	add	sp, #8
 23e77e2:	bd70      	pop	{r4, r5, r6, pc}

023e77e4 <_Z10SD_findIntPK19__FlashStringHelper>:
  char value_string[VALUE_MAX_LENGTH];
  int value_length = SD_findKey(key, value_string);
  return value_length > 0;
}

int SD_findInt(const __FlashStringHelper * key) {
 23e77e4:	b500      	push	{lr}
 23e77e6:	b089      	sub	sp, #36	; 0x24
  char value_string[VALUE_MAX_LENGTH];
  int value_length = SD_findKey(key, value_string);
 23e77e8:	4669      	mov	r1, sp
 23e77ea:	f7ff ff63 	bl	23e76b4 <_Z10SD_findKeyPK19__FlashStringHelperPc>
 23e77ee:	4601      	mov	r1, r0
  return HELPER_ascii2Int(value_string, value_length);
 23e77f0:	4668      	mov	r0, sp
 23e77f2:	f7ff ffc7 	bl	23e7784 <_Z16HELPER_ascii2IntPci>
}
 23e77f6:	b009      	add	sp, #36	; 0x24
 23e77f8:	f85d fb04 	ldr.w	pc, [sp], #4

023e77fc <_Z14SD_findCharStrPK19__FlashStringHelper>:
  char value_string[VALUE_MAX_LENGTH];
  int value_length = SD_findKey(key, value_string);
  return HELPER_ascii2String(value_string, value_length);
}

char* SD_findCharStr(const __FlashStringHelper * key) {
 23e77fc:	b500      	push	{lr}
 23e77fe:	b089      	sub	sp, #36	; 0x24
  char value_string[VALUE_MAX_LENGTH];
  int value_length = SD_findKey(key, value_string);
 23e7800:	4669      	mov	r1, sp
 23e7802:	f7ff ff57 	bl	23e76b4 <_Z10SD_findKeyPK19__FlashStringHelperPc>
 23e7806:	4601      	mov	r1, r0
  return HELPER_ascii2CharStr(value_string, value_length);
 23e7808:	4668      	mov	r0, sp
 23e780a:	f7ff ffd4 	bl	23e77b6 <_Z20HELPER_ascii2CharStrPci>
}
 23e780e:	b009      	add	sp, #36	; 0x24
 23e7810:	f85d fb04 	ldr.w	pc, [sp], #4

023e7814 <_Z17SD_ReadConfigFilev>:
/* 
 * =======================================================================================================================
 * SD_ReadConfigFile()
 * =======================================================================================================================
 */
void SD_ReadConfigFile() {
 23e7814:	b510      	push	{r4, lr}
  cf_aes_pkey     = SD_findCharStr(F("aes_pkey"));
 23e7816:	4822      	ldr	r0, [pc, #136]	; (23e78a0 <_Z17SD_ReadConfigFilev+0x8c>)
 23e7818:	f7ff fff0 	bl	23e77fc <_Z14SD_findCharStrPK19__FlashStringHelper>
  sprintf(msgbuf, "CF:aes_pkey=[%s]", cf_aes_pkey); Output (msgbuf);
 23e781c:	4c21      	ldr	r4, [pc, #132]	; (23e78a4 <_Z17SD_ReadConfigFilev+0x90>)
  cf_aes_pkey     = SD_findCharStr(F("aes_pkey"));
 23e781e:	4b22      	ldr	r3, [pc, #136]	; (23e78a8 <_Z17SD_ReadConfigFilev+0x94>)
 23e7820:	4602      	mov	r2, r0
 23e7822:	6018      	str	r0, [r3, #0]
  sprintf(msgbuf, "CF:aes_pkey=[%s]", cf_aes_pkey); Output (msgbuf);
 23e7824:	4921      	ldr	r1, [pc, #132]	; (23e78ac <_Z17SD_ReadConfigFilev+0x98>)
 23e7826:	4620      	mov	r0, r4
 23e7828:	f00f fcb6 	bl	23f7198 <sprintf>
 23e782c:	4620      	mov	r0, r4
 23e782e:	f7fc feab 	bl	23e4588 <_Z6OutputPKc>

  cf_aes_myiv     = SD_findLong(F("aes_myiv"));
 23e7832:	481f      	ldr	r0, [pc, #124]	; (23e78b0 <_Z17SD_ReadConfigFilev+0x9c>)
 23e7834:	f7ff ffd6 	bl	23e77e4 <_Z10SD_findIntPK19__FlashStringHelper>
 23e7838:	4b1e      	ldr	r3, [pc, #120]	; (23e78b4 <_Z17SD_ReadConfigFilev+0xa0>)
 23e783a:	4602      	mov	r2, r0
 23e783c:	6018      	str	r0, [r3, #0]
  sprintf(msgbuf, "CF:aes_myiv=[%lu]", cf_aes_myiv);   Output (msgbuf);
 23e783e:	491e      	ldr	r1, [pc, #120]	; (23e78b8 <_Z17SD_ReadConfigFilev+0xa4>)
 23e7840:	4620      	mov	r0, r4
 23e7842:	f00f fca9 	bl	23f7198 <sprintf>
 23e7846:	4620      	mov	r0, r4
 23e7848:	f7fc fe9e 	bl	23e4588 <_Z6OutputPKc>

  cf_lora_unitid  = SD_findInt(F("lora_unitid"));
 23e784c:	481b      	ldr	r0, [pc, #108]	; (23e78bc <_Z17SD_ReadConfigFilev+0xa8>)
 23e784e:	f7ff ffc9 	bl	23e77e4 <_Z10SD_findIntPK19__FlashStringHelper>
 23e7852:	4b1b      	ldr	r3, [pc, #108]	; (23e78c0 <_Z17SD_ReadConfigFilev+0xac>)
 23e7854:	4602      	mov	r2, r0
 23e7856:	6018      	str	r0, [r3, #0]
  sprintf(msgbuf, "CF:lora_unitid=[%d]", cf_lora_unitid); Output (msgbuf);
 23e7858:	491a      	ldr	r1, [pc, #104]	; (23e78c4 <_Z17SD_ReadConfigFilev+0xb0>)
 23e785a:	4620      	mov	r0, r4
 23e785c:	f00f fc9c 	bl	23f7198 <sprintf>
 23e7860:	4620      	mov	r0, r4
 23e7862:	f7fc fe91 	bl	23e4588 <_Z6OutputPKc>

  cf_lora_txpower = SD_findInt(F("lora_txpower"));
 23e7866:	4818      	ldr	r0, [pc, #96]	; (23e78c8 <_Z17SD_ReadConfigFilev+0xb4>)
 23e7868:	f7ff ffbc 	bl	23e77e4 <_Z10SD_findIntPK19__FlashStringHelper>
 23e786c:	4b17      	ldr	r3, [pc, #92]	; (23e78cc <_Z17SD_ReadConfigFilev+0xb8>)
 23e786e:	4602      	mov	r2, r0
 23e7870:	6018      	str	r0, [r3, #0]
  sprintf(msgbuf, "CF:lora_txpower=[%d]", cf_lora_txpower); Output (msgbuf);
 23e7872:	4917      	ldr	r1, [pc, #92]	; (23e78d0 <_Z17SD_ReadConfigFilev+0xbc>)
 23e7874:	4620      	mov	r0, r4
 23e7876:	f00f fc8f 	bl	23f7198 <sprintf>
 23e787a:	4620      	mov	r0, r4
 23e787c:	f7fc fe84 	bl	23e4588 <_Z6OutputPKc>

  cf_lora_freq   = SD_findInt(F("lora_freq"));
 23e7880:	4814      	ldr	r0, [pc, #80]	; (23e78d4 <_Z17SD_ReadConfigFilev+0xc0>)
 23e7882:	f7ff ffaf 	bl	23e77e4 <_Z10SD_findIntPK19__FlashStringHelper>
 23e7886:	4b14      	ldr	r3, [pc, #80]	; (23e78d8 <_Z17SD_ReadConfigFilev+0xc4>)
 23e7888:	4602      	mov	r2, r0
 23e788a:	6018      	str	r0, [r3, #0]
  sprintf(msgbuf, "CF:lora_freq=[%d]", cf_lora_freq); Output (msgbuf);
 23e788c:	4913      	ldr	r1, [pc, #76]	; (23e78dc <_Z17SD_ReadConfigFilev+0xc8>)
 23e788e:	4620      	mov	r0, r4
 23e7890:	f00f fc82 	bl	23f7198 <sprintf>
 23e7894:	4620      	mov	r0, r4
 23e7896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sprintf(msgbuf, "CF:lora_freq=[%d]", cf_lora_freq); Output (msgbuf);
 23e789a:	f7fc be75 	b.w	23e4588 <_Z6OutputPKc>
 23e789e:	bf00      	nop
 23e78a0:	023fd434 	.word	0x023fd434
 23e78a4:	1006f118 	.word	0x1006f118
 23e78a8:	1006ac6c 	.word	0x1006ac6c
 23e78ac:	023fd43d 	.word	0x023fd43d
 23e78b0:	023fd44e 	.word	0x023fd44e
 23e78b4:	1006ac68 	.word	0x1006ac68
 23e78b8:	023fd457 	.word	0x023fd457
 23e78bc:	023fd469 	.word	0x023fd469
 23e78c0:	1006a188 	.word	0x1006a188
 23e78c4:	023fd475 	.word	0x023fd475
 23e78c8:	023fd489 	.word	0x023fd489
 23e78cc:	1006a184 	.word	0x1006a184
 23e78d0:	023fd496 	.word	0x023fd496
 23e78d4:	023fd4ab 	.word	0x023fd4ab
 23e78d8:	1006a180 	.word	0x1006a180
 23e78dc:	023fd4b5 	.word	0x023fd4b5

023e78e0 <_Z9OBS_Cleari>:
 * ======================================================================================================================
 * OBS_Clear() - Set OBS to not in use
 * ======================================================================================================================
 */
void OBS_Clear(int i) {
  obs[i].inuse =false;
 23e78e0:	f640 2398 	movw	r3, #2712	; 0xa98
 23e78e4:	4358      	muls	r0, r3
 23e78e6:	2300      	movs	r3, #0
 23e78e8:	4a05      	ldr	r2, [pc, #20]	; (23e7900 <_Z9OBS_Cleari+0x20>)
 23e78ea:	5413      	strb	r3, [r2, r0]
  for (int s=0; s<MAX_SENSORS; s++) {
 23e78ec:	4410      	add	r0, r2
    obs[i].sensor[s].inuse = false;
 23e78ee:	461a      	mov	r2, r3
  for (int s=0; s<MAX_SENSORS; s++) {
 23e78f0:	3301      	adds	r3, #1
 23e78f2:	2b60      	cmp	r3, #96	; 0x60
    obs[i].sensor[s].inuse = false;
 23e78f4:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  for (int s=0; s<MAX_SENSORS; s++) {
 23e78f8:	f100 001c 	add.w	r0, r0, #28
 23e78fc:	d1f8      	bne.n	23e78f0 <_Z9OBS_Cleari+0x10>
  }
}
 23e78fe:	4770      	bx	lr
 23e7900:	1006f540 	.word	0x1006f540

023e7904 <_Z11OBS_N2S_Addi>:
/*
 * ======================================================================================================================
 * OBS_N2S_Add() - Save OBS to N2S file
 * ======================================================================================================================
 */
void OBS_N2S_Add(int i) {
 23e7904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (obs[i].inuse) {     // Sanity check
 23e7908:	f640 2598 	movw	r5, #2712	; 0xa98
 23e790c:	4345      	muls	r5, r0
 23e790e:	f8df 9198 	ldr.w	r9, [pc, #408]	; 23e7aa8 <_Z11OBS_N2S_Addi+0x1a4>
void OBS_N2S_Add(int i) {
 23e7912:	4607      	mov	r7, r0
  if (obs[i].inuse) {     // Sanity check
 23e7914:	f819 3005 	ldrb.w	r3, [r9, r5]
void OBS_N2S_Add(int i) {
 23e7918:	b097      	sub	sp, #92	; 0x5c
  if (obs[i].inuse) {     // Sanity check
 23e791a:	eb09 0405 	add.w	r4, r9, r5
 23e791e:	2b00      	cmp	r3, #0
 23e7920:	f000 809a 	beq.w	23e7a58 <_Z11OBS_N2S_Addi+0x154>
    char ts[32];
    
    memset(msgbuf, 0, sizeof(msgbuf));
 23e7924:	f8df 8170 	ldr.w	r8, [pc, #368]	; 23e7a98 <_Z11OBS_N2S_Addi+0x194>
 23e7928:	f44f 6280 	mov.w	r2, #1024	; 0x400
 23e792c:	2100      	movs	r1, #0
 23e792e:	4640      	mov	r0, r8
 23e7930:	f014 fd59 	bl	23fc3e6 <memset>

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
 23e7934:	4b53      	ldr	r3, [pc, #332]	; (23e7a84 <_Z11OBS_N2S_Addi+0x180>)
        state_(BEGIN) {
 23e7936:	2600      	movs	r6, #0
        n_(0) {
 23e7938:	9309      	str	r3, [sp, #36]	; 0x24
 23e793a:	f240 33ff 	movw	r3, #1023	; 0x3ff

    JSONBufferWriter writer(msgbuf, sizeof(msgbuf)-1);
    writer.beginObject();
 23e793e:	a809      	add	r0, sp, #36	; 0x24
 23e7940:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
        state_(BEGIN) {
 23e7944:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
        n_(0) {
 23e7948:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 23e794c:	f010 fc13 	bl	23f8176 <_ZN5spark10JSONWriter11beginObjectEv>

    sprintf (ts, "%d-%02d-%02dT%02d:%02d:%02d",
 23e7950:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23e7954:	f011 fa4c 	bl	23f8df0 <_ZN9TimeClass4yearEx>
 23e7958:	9007      	str	r0, [sp, #28]
 23e795a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23e795e:	f011 fa3d 	bl	23f8ddc <_ZN9TimeClass5monthEx>
 23e7962:	9006      	str	r0, [sp, #24]
 23e7964:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23e7968:	f011 fa30 	bl	23f8dcc <_ZN9TimeClass3dayEx>
 23e796c:	9005      	str	r0, [sp, #20]
 23e796e:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23e7972:	f011 fa13 	bl	23f8d9c <_ZN9TimeClass4hourEx>
 23e7976:	4682      	mov	sl, r0
 23e7978:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23e797c:	f011 fa16 	bl	23f8dac <_ZN9TimeClass6minuteEx>
 23e7980:	4683      	mov	fp, r0
 23e7982:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23e7986:	f011 fa19 	bl	23f8dbc <_ZN9TimeClass6secondEx>
 23e798a:	9b05      	ldr	r3, [sp, #20]
 23e798c:	e9cd b002 	strd	fp, r0, [sp, #8]
 23e7990:	493d      	ldr	r1, [pc, #244]	; (23e7a88 <_Z11OBS_N2S_Addi+0x184>)
 23e7992:	f8cd a004 	str.w	sl, [sp, #4]
 23e7996:	9300      	str	r3, [sp, #0]
 23e7998:	a80e      	add	r0, sp, #56	; 0x38
 23e799a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 23e799e:	f00f fbfb 	bl	23f7198 <sprintf>
      Time.year(obs[i].ts), Time.month(obs[i].ts), Time.day(obs[i].ts),
      Time.hour(obs[i].ts), Time.minute(obs[i].ts), Time.second(obs[i].ts));

    writer.name("at").value(ts);
 23e79a2:	493a      	ldr	r1, [pc, #232]	; (23e7a8c <_Z11OBS_N2S_Addi+0x188>)
 23e79a4:	a809      	add	r0, sp, #36	; 0x24
 23e79a6:	f7fc fb09 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23e79aa:	a90e      	add	r1, sp, #56	; 0x38
 23e79ac:	f7fc fa3c 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    writer.name("css").value(obs[i].css, 4);
 23e79b0:	4937      	ldr	r1, [pc, #220]	; (23e7a90 <_Z11OBS_N2S_Addi+0x18c>)
 23e79b2:	a809      	add	r0, sp, #36	; 0x24
 23e79b4:	f7fc fb02 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23e79b8:	4682      	mov	sl, r0
 23e79ba:	6920      	ldr	r0, [r4, #16]
 23e79bc:	f7fa fde0 	bl	23e2580 <__aeabi_f2d>
 23e79c0:	ec41 0b10 	vmov	d0, r0, r1
 23e79c4:	2104      	movs	r1, #4
 23e79c6:	4650      	mov	r0, sl
 23e79c8:	f010 fc2c 	bl	23f8224 <_ZN5spark10JSONWriter5valueEdi>

    // Modify System Status and Set From Need to Send file bit
    obs[i].hth |= SSB_FROM_N2S; // Turn On Bit
 23e79cc:	6963      	ldr	r3, [r4, #20]
    writer.name("hth").value((int) obs[i].hth);
 23e79ce:	4931      	ldr	r1, [pc, #196]	; (23e7a94 <_Z11OBS_N2S_Addi+0x190>)
    obs[i].hth |= SSB_FROM_N2S; // Turn On Bit
 23e79d0:	f043 0320 	orr.w	r3, r3, #32
 23e79d4:	6163      	str	r3, [r4, #20]
    writer.name("hth").value((int) obs[i].hth);
 23e79d6:	a809      	add	r0, sp, #36	; 0x24
 23e79d8:	f7fc faf0 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23e79dc:	6961      	ldr	r1, [r4, #20]
 23e79de:	f010 fbd7 	bl	23f8190 <_ZN5spark10JSONWriter5valueEi>

    for (int s=0; s<MAX_SENSORS; s++) {
 23e79e2:	3518      	adds	r5, #24
            break;
          case U_OBS :
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
            break;
          default : // Should never happen
            Output ("WhyAmIHere?");
 23e79e4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 23e7aac <_Z11OBS_N2S_Addi+0x1a8>
 23e79e8:	44a9      	add	r9, r5
      if (obs[i].sensor[s].inuse) {
 23e79ea:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 23e79ee:	b1a3      	cbz	r3, 23e7a1a <_Z11OBS_N2S_Addi+0x116>
        switch (obs[i].sensor[s].type) {
 23e79f0:	6a23      	ldr	r3, [r4, #32]
 23e79f2:	2b01      	cmp	r3, #1
 23e79f4:	d033      	beq.n	23e7a5e <_Z11OBS_N2S_Addi+0x15a>
 23e79f6:	2b02      	cmp	r3, #2
 23e79f8:	d039      	beq.n	23e7a6e <_Z11OBS_N2S_Addi+0x16a>
 23e79fa:	2b00      	cmp	r3, #0
 23e79fc:	d13d      	bne.n	23e7a7a <_Z11OBS_N2S_Addi+0x176>
            writer.name(obs[i].sensor[s].id).value(obs[i].sensor[s].f_obs, 1);
 23e79fe:	4649      	mov	r1, r9
 23e7a00:	a809      	add	r0, sp, #36	; 0x24
 23e7a02:	f7fc fadb 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23e7a06:	4605      	mov	r5, r0
 23e7a08:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23e7a0a:	f7fa fdb9 	bl	23e2580 <__aeabi_f2d>
 23e7a0e:	ec41 0b10 	vmov	d0, r0, r1
 23e7a12:	2101      	movs	r1, #1
 23e7a14:	4628      	mov	r0, r5
 23e7a16:	f010 fc05 	bl	23f8224 <_ZN5spark10JSONWriter5valueEdi>
    for (int s=0; s<MAX_SENSORS; s++) {
 23e7a1a:	3601      	adds	r6, #1
 23e7a1c:	2e60      	cmp	r6, #96	; 0x60
 23e7a1e:	f104 041c 	add.w	r4, r4, #28
 23e7a22:	f109 091c 	add.w	r9, r9, #28
 23e7a26:	d1e0      	bne.n	23e79ea <_Z11OBS_N2S_Addi+0xe6>
            break;
        }
      }
    }
    writer.endObject();
 23e7a28:	a809      	add	r0, sp, #36	; 0x24
 23e7a2a:	f010 fb8e 	bl	23f814a <_ZN5spark10JSONWriter9endObjectEv>

    sprintf (msgbuf+strlen(msgbuf), ",FS");  // Add Particle Event Type after JSON structure
 23e7a2e:	481a      	ldr	r0, [pc, #104]	; (23e7a98 <_Z11OBS_N2S_Addi+0x194>)
 23e7a30:	f7fb fc3e 	bl	23e32b0 <strlen>
 23e7a34:	4919      	ldr	r1, [pc, #100]	; (23e7a9c <_Z11OBS_N2S_Addi+0x198>)
 23e7a36:	4440      	add	r0, r8
 23e7a38:	f014 fd4a 	bl	23fc4d0 <strcpy>
    SD_NeedToSend_Add(msgbuf); // Save to N2F File
 23e7a3c:	4816      	ldr	r0, [pc, #88]	; (23e7a98 <_Z11OBS_N2S_Addi+0x194>)
 23e7a3e:	f7ff fd25 	bl	23e748c <_Z17SD_NeedToSend_AddPc>
    sprintf (Buffer32Bytes, "OBS->%d Add N2S", i);
 23e7a42:	463a      	mov	r2, r7
 23e7a44:	4916      	ldr	r1, [pc, #88]	; (23e7aa0 <_Z11OBS_N2S_Addi+0x19c>)
 23e7a46:	4817      	ldr	r0, [pc, #92]	; (23e7aa4 <_Z11OBS_N2S_Addi+0x1a0>)
 23e7a48:	f00f fba6 	bl	23f7198 <sprintf>
    Output(Buffer32Bytes);
 23e7a4c:	4815      	ldr	r0, [pc, #84]	; (23e7aa4 <_Z11OBS_N2S_Addi+0x1a0>)
 23e7a4e:	f7fc fd9b 	bl	23e4588 <_Z6OutputPKc>
    Serial_write (msgbuf);
 23e7a52:	4811      	ldr	r0, [pc, #68]	; (23e7a98 <_Z11OBS_N2S_Addi+0x194>)
 23e7a54:	f7fc fd6e 	bl	23e4534 <_Z12Serial_writePKc>
  }
}
 23e7a58:	b017      	add	sp, #92	; 0x5c
 23e7a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            writer.name(obs[i].sensor[s].id).value(obs[i].sensor[s].i_obs);
 23e7a5e:	4649      	mov	r1, r9
 23e7a60:	a809      	add	r0, sp, #36	; 0x24
 23e7a62:	f7fc faab 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23e7a66:	6aa1      	ldr	r1, [r4, #40]	; 0x28
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
 23e7a68:	f010 fb92 	bl	23f8190 <_ZN5spark10JSONWriter5valueEi>
            break;
 23e7a6c:	e7d5      	b.n	23e7a1a <_Z11OBS_N2S_Addi+0x116>
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
 23e7a6e:	4649      	mov	r1, r9
 23e7a70:	a809      	add	r0, sp, #36	; 0x24
 23e7a72:	f7fc faa3 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23e7a76:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 23e7a78:	e7f6      	b.n	23e7a68 <_Z11OBS_N2S_Addi+0x164>
            Output ("WhyAmIHere?");
 23e7a7a:	4650      	mov	r0, sl
 23e7a7c:	f7fc fd84 	bl	23e4588 <_Z6OutputPKc>
            break;
 23e7a80:	e7cb      	b.n	23e7a1a <_Z11OBS_N2S_Addi+0x116>
 23e7a82:	bf00      	nop
 23e7a84:	023ff9b4 	.word	0x023ff9b4
 23e7a88:	023fcb78 	.word	0x023fcb78
 23e7a8c:	023fe025 	.word	0x023fe025
 23e7a90:	023fd4c7 	.word	0x023fd4c7
 23e7a94:	023fd4cb 	.word	0x023fd4cb
 23e7a98:	1006f118 	.word	0x1006f118
 23e7a9c:	023fd4db 	.word	0x023fd4db
 23e7aa0:	023fd4df 	.word	0x023fd4df
 23e7aa4:	1006a277 	.word	0x1006a277
 23e7aa8:	1006f540 	.word	0x1006f540
 23e7aac:	023fd4cf 	.word	0x023fd4cf

023e7ab0 <_Z17OBS_FS_Build_JSONi>:
/*
 * ======================================================================================================================
 * OBS_FS_Build_JSON() - Create JSON observation in msgbuf
 * ======================================================================================================================
 */
bool OBS_FS_Build_JSON(int i) {
 23e7ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (obs[i].inuse) {     // Sanity check
 23e7ab4:	f640 2498 	movw	r4, #2712	; 0xa98
 23e7ab8:	4344      	muls	r4, r0
 23e7aba:	f8df 814c 	ldr.w	r8, [pc, #332]	; 23e7c08 <_Z17OBS_FS_Build_JSONi+0x158>
bool OBS_FS_Build_JSON(int i) {
 23e7abe:	b095      	sub	sp, #84	; 0x54
  if (obs[i].inuse) {     // Sanity check
 23e7ac0:	f818 7004 	ldrb.w	r7, [r8, r4]
 23e7ac4:	eb08 0504 	add.w	r5, r8, r4
 23e7ac8:	2f00      	cmp	r7, #0
 23e7aca:	d07b      	beq.n	23e7bc4 <_Z17OBS_FS_Build_JSONi+0x114>
    char ts[32];
    
    memset(msgbuf, 0, sizeof(msgbuf));
 23e7acc:	4b48      	ldr	r3, [pc, #288]	; (23e7bf0 <_Z17OBS_FS_Build_JSONi+0x140>)
 23e7ace:	2100      	movs	r1, #0
 23e7ad0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 23e7ad4:	4618      	mov	r0, r3
 23e7ad6:	f014 fc86 	bl	23fc3e6 <memset>
        state_(BEGIN) {
 23e7ada:	2600      	movs	r6, #0
        n_(0) {
 23e7adc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 23e7ae0:	4a44      	ldr	r2, [pc, #272]	; (23e7bf4 <_Z17OBS_FS_Build_JSONi+0x144>)
 23e7ae2:	9009      	str	r0, [sp, #36]	; 0x24

    JSONBufferWriter writer(msgbuf, sizeof(msgbuf)-1);
    writer.beginObject();
 23e7ae4:	a807      	add	r0, sp, #28
 23e7ae6:	e9cd 360a 	strd	r3, r6, [sp, #40]	; 0x28
 23e7aea:	9207      	str	r2, [sp, #28]
        state_(BEGIN) {
 23e7aec:	f88d 6020 	strb.w	r6, [sp, #32]
 23e7af0:	f010 fb41 	bl	23f8176 <_ZN5spark10JSONWriter11beginObjectEv>

    sprintf (ts, "%d-%02d-%02dT%02d:%02d:%02d",
 23e7af4:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23e7af8:	f011 f97a 	bl	23f8df0 <_ZN9TimeClass4yearEx>
 23e7afc:	9005      	str	r0, [sp, #20]
 23e7afe:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23e7b02:	f011 f96b 	bl	23f8ddc <_ZN9TimeClass5monthEx>
 23e7b06:	9004      	str	r0, [sp, #16]
 23e7b08:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23e7b0c:	f011 f95e 	bl	23f8dcc <_ZN9TimeClass3dayEx>
 23e7b10:	4681      	mov	r9, r0
 23e7b12:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23e7b16:	f011 f941 	bl	23f8d9c <_ZN9TimeClass4hourEx>
 23e7b1a:	4682      	mov	sl, r0
 23e7b1c:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23e7b20:	f011 f944 	bl	23f8dac <_ZN9TimeClass6minuteEx>
 23e7b24:	4683      	mov	fp, r0
 23e7b26:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23e7b2a:	f011 f947 	bl	23f8dbc <_ZN9TimeClass6secondEx>
 23e7b2e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 23e7b32:	e9cd b002 	strd	fp, r0, [sp, #8]
 23e7b36:	e9cd 9a00 	strd	r9, sl, [sp]
 23e7b3a:	492f      	ldr	r1, [pc, #188]	; (23e7bf8 <_Z17OBS_FS_Build_JSONi+0x148>)
 23e7b3c:	a80c      	add	r0, sp, #48	; 0x30
 23e7b3e:	f00f fb2b 	bl	23f7198 <sprintf>
      Time.year(obs[i].ts), Time.month(obs[i].ts), Time.day(obs[i].ts),
      Time.hour(obs[i].ts), Time.minute(obs[i].ts), Time.second(obs[i].ts));

    writer.name("at").value(ts);
 23e7b42:	492e      	ldr	r1, [pc, #184]	; (23e7bfc <_Z17OBS_FS_Build_JSONi+0x14c>)
 23e7b44:	a807      	add	r0, sp, #28
 23e7b46:	f7fc fa39 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23e7b4a:	a90c      	add	r1, sp, #48	; 0x30
 23e7b4c:	f7fc f96c 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    writer.name("css").value(obs[i].css, 4);
 23e7b50:	492b      	ldr	r1, [pc, #172]	; (23e7c00 <_Z17OBS_FS_Build_JSONi+0x150>)
 23e7b52:	a807      	add	r0, sp, #28
 23e7b54:	f7fc fa32 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23e7b58:	4681      	mov	r9, r0
 23e7b5a:	6928      	ldr	r0, [r5, #16]
 23e7b5c:	f7fa fd10 	bl	23e2580 <__aeabi_f2d>
 23e7b60:	ec41 0b10 	vmov	d0, r0, r1
 23e7b64:	2104      	movs	r1, #4
 23e7b66:	4648      	mov	r0, r9
 23e7b68:	f010 fb5c 	bl	23f8224 <_ZN5spark10JSONWriter5valueEdi>
    writer.name("hth").value((int) obs[i].hth);
 23e7b6c:	4925      	ldr	r1, [pc, #148]	; (23e7c04 <_Z17OBS_FS_Build_JSONi+0x154>)
 23e7b6e:	a807      	add	r0, sp, #28
 23e7b70:	f7fc fa24 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23e7b74:	6969      	ldr	r1, [r5, #20]
 23e7b76:	f010 fb0b 	bl	23f8190 <_ZN5spark10JSONWriter5valueEi>

    for (int s=0; s<MAX_SENSORS; s++) {
 23e7b7a:	3418      	adds	r4, #24
            break;
          case U_OBS :
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
            break;
          default : // Should never happen
            Output ("WhyAmIHere?");
 23e7b7c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 23e7c0c <_Z17OBS_FS_Build_JSONi+0x15c>
 23e7b80:	4444      	add	r4, r8
      if (obs[i].sensor[s].inuse) {
 23e7b82:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 23e7b86:	b19b      	cbz	r3, 23e7bb0 <_Z17OBS_FS_Build_JSONi+0x100>
        switch (obs[i].sensor[s].type) {
 23e7b88:	6a2b      	ldr	r3, [r5, #32]
 23e7b8a:	2b01      	cmp	r3, #1
 23e7b8c:	d01e      	beq.n	23e7bcc <_Z17OBS_FS_Build_JSONi+0x11c>
 23e7b8e:	2b02      	cmp	r3, #2
 23e7b90:	d024      	beq.n	23e7bdc <_Z17OBS_FS_Build_JSONi+0x12c>
 23e7b92:	bb4b      	cbnz	r3, 23e7be8 <_Z17OBS_FS_Build_JSONi+0x138>
            writer.name(obs[i].sensor[s].id).value(obs[i].sensor[s].f_obs, 1);
 23e7b94:	4621      	mov	r1, r4
 23e7b96:	a807      	add	r0, sp, #28
 23e7b98:	f7fc fa10 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23e7b9c:	4680      	mov	r8, r0
 23e7b9e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 23e7ba0:	f7fa fcee 	bl	23e2580 <__aeabi_f2d>
 23e7ba4:	ec41 0b10 	vmov	d0, r0, r1
 23e7ba8:	2101      	movs	r1, #1
 23e7baa:	4640      	mov	r0, r8
 23e7bac:	f010 fb3a 	bl	23f8224 <_ZN5spark10JSONWriter5valueEdi>
    for (int s=0; s<MAX_SENSORS; s++) {
 23e7bb0:	3601      	adds	r6, #1
 23e7bb2:	2e60      	cmp	r6, #96	; 0x60
 23e7bb4:	f105 051c 	add.w	r5, r5, #28
 23e7bb8:	f104 041c 	add.w	r4, r4, #28
 23e7bbc:	d1e1      	bne.n	23e7b82 <_Z17OBS_FS_Build_JSONi+0xd2>
            break;
        }
      }
    }
    writer.endObject();
 23e7bbe:	a807      	add	r0, sp, #28
 23e7bc0:	f010 fac3 	bl	23f814a <_ZN5spark10JSONWriter9endObjectEv>
    return (true);
  }
  else {
    return (false);
  }
}
 23e7bc4:	4638      	mov	r0, r7
 23e7bc6:	b015      	add	sp, #84	; 0x54
 23e7bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            writer.name(obs[i].sensor[s].id).value(obs[i].sensor[s].i_obs);
 23e7bcc:	4621      	mov	r1, r4
 23e7bce:	a807      	add	r0, sp, #28
 23e7bd0:	f7fc f9f4 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23e7bd4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
 23e7bd6:	f010 fadb 	bl	23f8190 <_ZN5spark10JSONWriter5valueEi>
            break;
 23e7bda:	e7e9      	b.n	23e7bb0 <_Z17OBS_FS_Build_JSONi+0x100>
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
 23e7bdc:	4621      	mov	r1, r4
 23e7bde:	a807      	add	r0, sp, #28
 23e7be0:	f7fc f9ec 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23e7be4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 23e7be6:	e7f6      	b.n	23e7bd6 <_Z17OBS_FS_Build_JSONi+0x126>
            Output ("WhyAmIHere?");
 23e7be8:	4648      	mov	r0, r9
 23e7bea:	f7fc fccd 	bl	23e4588 <_Z6OutputPKc>
            break;
 23e7bee:	e7df      	b.n	23e7bb0 <_Z17OBS_FS_Build_JSONi+0x100>
 23e7bf0:	1006f118 	.word	0x1006f118
 23e7bf4:	023ff9b4 	.word	0x023ff9b4
 23e7bf8:	023fcb78 	.word	0x023fcb78
 23e7bfc:	023fe025 	.word	0x023fe025
 23e7c00:	023fd4c7 	.word	0x023fd4c7
 23e7c04:	023fd4cb 	.word	0x023fd4cb
 23e7c08:	1006f540 	.word	0x1006f540
 23e7c0c:	023fd4cf 	.word	0x023fd4cf

023e7c10 <_Z20OBS_Relay_Build_JSONv>:
 */
int OBS_Relay_Build_JSON() {
  LORA_MSG_RELAY_STR *m;
  int relay_type = 0;

  memset(msgbuf, 0, sizeof(msgbuf));
 23e7c10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 23e7c14:	2100      	movs	r1, #0
int OBS_Relay_Build_JSON() {
 23e7c16:	b538      	push	{r3, r4, r5, lr}
  memset(msgbuf, 0, sizeof(msgbuf));
 23e7c18:	480c      	ldr	r0, [pc, #48]	; (23e7c4c <_Z20OBS_Relay_Build_JSONv+0x3c>)
 23e7c1a:	f014 fbe4 	bl	23fc3e6 <memset>
  JSONBufferWriter writer(msgbuf, sizeof(msgbuf)-1);

  // Locate message we need to log
  int i = lora_relay_need2log_idx();
 23e7c1e:	f7fc fe63 	bl	23e48e8 <_Z23lora_relay_need2log_idxv>
  if (i >= 0) {
 23e7c22:	2800      	cmp	r0, #0
 23e7c24:	db10      	blt.n	23e7c48 <_Z20OBS_Relay_Build_JSONv+0x38>
    m = &lora_msg_relay[i];
 23e7c26:	f44f 7484 	mov.w	r4, #264	; 0x108
 23e7c2a:	4344      	muls	r4, r0
    strncpy (msgbuf, m->message, LORA_RELAY_MSG_LENGTH-1); // minus 1 so last byte in array will always be null
 23e7c2c:	4d08      	ldr	r5, [pc, #32]	; (23e7c50 <_Z20OBS_Relay_Build_JSONv+0x40>)
 23e7c2e:	f104 0108 	add.w	r1, r4, #8
 23e7c32:	22ff      	movs	r2, #255	; 0xff
 23e7c34:	4805      	ldr	r0, [pc, #20]	; (23e7c4c <_Z20OBS_Relay_Build_JSONv+0x3c>)
 23e7c36:	4429      	add	r1, r5
 23e7c38:	f014 fc98 	bl	23fc56c <strncpy>
    relay_type = m->message_type;
 23e7c3c:	1928      	adds	r0, r5, r4
 23e7c3e:	6844      	ldr	r4, [r0, #4]
    lora_relay_msg_free(m);
 23e7c40:	f7fc fe2c 	bl	23e489c <_Z19lora_relay_msg_freeP18LORA_MSG_RELAY_STR>
  }
  return (relay_type);
}
 23e7c44:	4620      	mov	r0, r4
 23e7c46:	bd38      	pop	{r3, r4, r5, pc}
  int relay_type = 0;
 23e7c48:	2400      	movs	r4, #0
  return (relay_type);
 23e7c4a:	e7fb      	b.n	23e7c44 <_Z20OBS_Relay_Build_JSONv+0x34>
 23e7c4c:	1006f118 	.word	0x1006f118
 23e7c50:	1006aeb0 	.word	0x1006aeb0

023e7c54 <_Z7OBS_Logi>:
/*
 * ======================================================================================================================
 * OBS_Log() - Save OBS to Log file
 * ======================================================================================================================
 */
void OBS_Log(int i) {
 23e7c54:	b507      	push	{r0, r1, r2, lr}
 23e7c56:	9001      	str	r0, [sp, #4]
  if (OBS_FS_Build_JSON(i)) {
 23e7c58:	f7ff ff2a 	bl	23e7ab0 <_Z17OBS_FS_Build_JSONi>
 23e7c5c:	9a01      	ldr	r2, [sp, #4]
 23e7c5e:	b178      	cbz	r0, 23e7c80 <_Z7OBS_Logi+0x2c>
    sprintf (Buffer32Bytes, "OBS[%d]->SD", i);
 23e7c60:	4909      	ldr	r1, [pc, #36]	; (23e7c88 <_Z7OBS_Logi+0x34>)
 23e7c62:	480a      	ldr	r0, [pc, #40]	; (23e7c8c <_Z7OBS_Logi+0x38>)
 23e7c64:	f00f fa98 	bl	23f7198 <sprintf>
    Output(Buffer32Bytes);
 23e7c68:	4808      	ldr	r0, [pc, #32]	; (23e7c8c <_Z7OBS_Logi+0x38>)
 23e7c6a:	f7fc fc8d 	bl	23e4588 <_Z6OutputPKc>
    Serial_write (msgbuf);
 23e7c6e:	4808      	ldr	r0, [pc, #32]	; (23e7c90 <_Z7OBS_Logi+0x3c>)
 23e7c70:	f7fc fc60 	bl	23e4534 <_Z12Serial_writePKc>

    SD_LogObservation(msgbuf);
 23e7c74:	4806      	ldr	r0, [pc, #24]	; (23e7c90 <_Z7OBS_Logi+0x3c>)
  }
}
 23e7c76:	b003      	add	sp, #12
 23e7c78:	f85d eb04 	ldr.w	lr, [sp], #4
    SD_LogObservation(msgbuf);
 23e7c7c:	f7ff bb68 	b.w	23e7350 <_Z17SD_LogObservationPc>
}
 23e7c80:	b003      	add	sp, #12
 23e7c82:	f85d fb04 	ldr.w	pc, [sp], #4
 23e7c86:	bf00      	nop
 23e7c88:	023fd4ef 	.word	0x023fd4ef
 23e7c8c:	1006a277 	.word	0x1006a277
 23e7c90:	1006f118 	.word	0x1006f118

023e7c94 <_Z15OBS_N2S_SaveAllv>:
/*
 * ======================================================================================================================
 * OBS_N2S_SaveAll() - Save All N Observations to Need2Send File
 * ======================================================================================================================
 */
void OBS_N2S_SaveAll() {
 23e7c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int relay_type;

  // Save All Station Observations to N2S file
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
 23e7c96:	2400      	movs	r4, #0
    OBS_N2S_Add (i);
 23e7c98:	4620      	mov	r0, r4
 23e7c9a:	f7ff fe33 	bl	23e7904 <_Z11OBS_N2S_Addi>
    OBS_Clear(i);
 23e7c9e:	4620      	mov	r0, r4
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
 23e7ca0:	3401      	adds	r4, #1
    OBS_Clear(i);
 23e7ca2:	f7ff fe1d 	bl	23e78e0 <_Z9OBS_Cleari>
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
 23e7ca6:	2c11      	cmp	r4, #17
 23e7ca8:	d1f6      	bne.n	23e7c98 <_Z15OBS_N2S_SaveAllv+0x4>
  }

  // Save All Rain and Soil LoRa Observations to N2S file
  while (lora_relay_need2log()) {
   relay_type = OBS_Relay_Build_JSON(); // This removed msg from relay structure and places it in msgbuf
    sprintf (msgbuf+strlen(msgbuf), ", %s", relay_msgtypes[relay_type]);  // Add Particle Event Type after JSON structure
 23e7caa:	4d0e      	ldr	r5, [pc, #56]	; (23e7ce4 <_Z15OBS_N2S_SaveAllv+0x50>)
 23e7cac:	4f0e      	ldr	r7, [pc, #56]	; (23e7ce8 <_Z15OBS_N2S_SaveAllv+0x54>)
 23e7cae:	4e0f      	ldr	r6, [pc, #60]	; (23e7cec <_Z15OBS_N2S_SaveAllv+0x58>)
  while (lora_relay_need2log()) {
 23e7cb0:	f7fc fdfc 	bl	23e48ac <_Z19lora_relay_need2logv>
 23e7cb4:	b1a8      	cbz	r0, 23e7ce2 <_Z15OBS_N2S_SaveAllv+0x4e>
   relay_type = OBS_Relay_Build_JSON(); // This removed msg from relay structure and places it in msgbuf
 23e7cb6:	f7ff ffab 	bl	23e7c10 <_Z20OBS_Relay_Build_JSONv>
 23e7cba:	4604      	mov	r4, r0
    sprintf (msgbuf+strlen(msgbuf), ", %s", relay_msgtypes[relay_type]);  // Add Particle Event Type after JSON structure
 23e7cbc:	4809      	ldr	r0, [pc, #36]	; (23e7ce4 <_Z15OBS_N2S_SaveAllv+0x50>)
 23e7cbe:	f7fb faf7 	bl	23e32b0 <strlen>
 23e7cc2:	4631      	mov	r1, r6
 23e7cc4:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
 23e7cc8:	4428      	add	r0, r5
 23e7cca:	f00f fa65 	bl	23f7198 <sprintf>
    SD_NeedToSend_Add(msgbuf); // Save to N2F File
 23e7cce:	4805      	ldr	r0, [pc, #20]	; (23e7ce4 <_Z15OBS_N2S_SaveAllv+0x50>)
 23e7cd0:	f7ff fbdc 	bl	23e748c <_Z17SD_NeedToSend_AddPc>
    Output("LR->N2S");
 23e7cd4:	4806      	ldr	r0, [pc, #24]	; (23e7cf0 <_Z15OBS_N2S_SaveAllv+0x5c>)
 23e7cd6:	f7fc fc57 	bl	23e4588 <_Z6OutputPKc>
    Serial_write (msgbuf); 
 23e7cda:	4802      	ldr	r0, [pc, #8]	; (23e7ce4 <_Z15OBS_N2S_SaveAllv+0x50>)
 23e7cdc:	f7fc fc2a 	bl	23e4534 <_Z12Serial_writePKc>
  while (lora_relay_need2log()) {
 23e7ce0:	e7e6      	b.n	23e7cb0 <_Z15OBS_N2S_SaveAllv+0x1c>
  }
}
 23e7ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23e7ce4:	1006f118 	.word	0x1006f118
 23e7ce8:	1006a1a0 	.word	0x1006a1a0
 23e7cec:	023fd4fb 	.word	0x023fd4fb
 23e7cf0:	023fd500 	.word	0x023fd500

023e7cf4 <_Z8OBS_Lastv>:
 * OBS_Last() - Find Last OBS and return index or -1 if empty
 * ======================================================================================================================
 */
int OBS_Last() {
  // Scan OBS for free spot
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23e7cf4:	2000      	movs	r0, #0
    if (obs[i].inuse == false) {
 23e7cf6:	f640 2398 	movw	r3, #2712	; 0xa98
 23e7cfa:	4a06      	ldr	r2, [pc, #24]	; (23e7d14 <_Z8OBS_Lastv+0x20>)
 23e7cfc:	fb03 f100 	mul.w	r1, r3, r0
 23e7d00:	5c89      	ldrb	r1, [r1, r2]
 23e7d02:	b909      	cbnz	r1, 23e7d08 <_Z8OBS_Lastv+0x14>
      if (i == 0) {
        return (-1);
      }
      else {
        return (i-1);
 23e7d04:	3801      	subs	r0, #1
 23e7d06:	4770      	bx	lr
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23e7d08:	3001      	adds	r0, #1
 23e7d0a:	2811      	cmp	r0, #17
 23e7d0c:	d1f6      	bne.n	23e7cfc <_Z8OBS_Lastv+0x8>
      }
    }
  }
  // Arrary full, Never found an empty, return last in Array
  return (MAX_ONE_MINUTE_OBS-1);
 23e7d0e:	2010      	movs	r0, #16
}
 23e7d10:	4770      	bx	lr
 23e7d12:	bf00      	nop
 23e7d14:	1006f540 	.word	0x1006f540

023e7d18 <_Z8OBS_Fullv>:
 * OBS_Full() - Return true if there are open spots
 * ======================================================================================================================
 */
bool OBS_Full() {
  // Scan OBS for free spot
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23e7d18:	2300      	movs	r3, #0
    if (obs[i].inuse == false) {
 23e7d1a:	f640 2298 	movw	r2, #2712	; 0xa98
 23e7d1e:	4904      	ldr	r1, [pc, #16]	; (23e7d30 <_Z8OBS_Fullv+0x18>)
 23e7d20:	fb02 f003 	mul.w	r0, r2, r3
 23e7d24:	5c40      	ldrb	r0, [r0, r1]
 23e7d26:	b110      	cbz	r0, 23e7d2e <_Z8OBS_Fullv+0x16>
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23e7d28:	3301      	adds	r3, #1
 23e7d2a:	2b11      	cmp	r3, #17
 23e7d2c:	d1f8      	bne.n	23e7d20 <_Z8OBS_Fullv+0x8>
      return (false);
    }
  }
  return (true);
}
 23e7d2e:	4770      	bx	lr
 23e7d30:	1006f540 	.word	0x1006f540

023e7d34 <_Z8OBS_Openv>:
/*
 * ======================================================================================================================
 * OBS_Open() - Find a free OBS and return index
 * ======================================================================================================================
 */
int OBS_Open() {
 23e7d34:	b508      	push	{r3, lr}
  // Scan OBS for free spot
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23e7d36:	2000      	movs	r0, #0
    if (obs[i].inuse == false) {
 23e7d38:	f640 2398 	movw	r3, #2712	; 0xa98
 23e7d3c:	4a07      	ldr	r2, [pc, #28]	; (23e7d5c <_Z8OBS_Openv+0x28>)
 23e7d3e:	fb03 f100 	mul.w	r1, r3, r0
 23e7d42:	5c89      	ldrb	r1, [r1, r2]
 23e7d44:	b141      	cbz	r1, 23e7d58 <_Z8OBS_Openv+0x24>
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23e7d46:	3001      	adds	r0, #1
 23e7d48:	2811      	cmp	r0, #17
 23e7d4a:	d1f8      	bne.n	23e7d3e <_Z8OBS_Openv+0xa>
      return (i);
    }
  }

  // All Observations are inuse
  Output ("OBS[ALL]->N2S");
 23e7d4c:	4804      	ldr	r0, [pc, #16]	; (23e7d60 <_Z8OBS_Openv+0x2c>)
 23e7d4e:	f7fc fc1b 	bl	23e4588 <_Z6OutputPKc>

  // Save All N Observations to Need2Send File
  OBS_N2S_SaveAll();
 23e7d52:	f7ff ff9f 	bl	23e7c94 <_Z15OBS_N2S_SaveAllv>
 23e7d56:	2000      	movs	r0, #0

  // All OBS are Clear so return the first OBS 
  return (0);
}
 23e7d58:	bd08      	pop	{r3, pc}
 23e7d5a:	bf00      	nop
 23e7d5c:	1006f540 	.word	0x1006f540
 23e7d60:	023fd508 	.word	0x023fd508

023e7d64 <_Z10GetPinNametPc>:
void GetPinName(pin_t pin, char *pinname) {
 23e7d64:	b530      	push	{r4, r5, lr}
 23e7d66:	b0b1      	sub	sp, #196	; 0xc4
 23e7d68:	4605      	mov	r5, r0
 23e7d6a:	460c      	mov	r4, r1
  const PinMap pinTable[] = {
 23e7d6c:	22c0      	movs	r2, #192	; 0xc0
 23e7d6e:	4668      	mov	r0, sp
 23e7d70:	490b      	ldr	r1, [pc, #44]	; (23e7da0 <_Z10GetPinNametPc+0x3c>)
 23e7d72:	f014 fb2b 	bl	23fc3cc <memcpy>
  for (size_t i = 0; i < sizeof(pinTable) / sizeof(pinTable[0]); ++i) {
 23e7d76:	2300      	movs	r3, #0
      if (pin == pinTable[i].pin) {
 23e7d78:	f83d 2033 	ldrh.w	r2, [sp, r3, lsl #3]
 23e7d7c:	42aa      	cmp	r2, r5
 23e7d7e:	d10a      	bne.n	23e7d96 <_Z10GetPinNametPc+0x32>
          strcpy(pinname, pinTable[i].name);
 23e7d80:	aa30      	add	r2, sp, #192	; 0xc0
 23e7d82:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 23e7d86:	f853 1cbc 	ldr.w	r1, [r3, #-188]
  strcpy(pinname, "NF");
 23e7d8a:	4620      	mov	r0, r4
}
 23e7d8c:	b031      	add	sp, #196	; 0xc4
 23e7d8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  strcpy(pinname, "NF");
 23e7d92:	f014 bb9d 	b.w	23fc4d0 <strcpy>
  for (size_t i = 0; i < sizeof(pinTable) / sizeof(pinTable[0]); ++i) {
 23e7d96:	3301      	adds	r3, #1
 23e7d98:	2b18      	cmp	r3, #24
 23e7d9a:	d1ed      	bne.n	23e7d78 <_Z10GetPinNametPc+0x14>
  strcpy(pinname, "NF");
 23e7d9c:	4901      	ldr	r1, [pc, #4]	; (23e7da4 <_Z10GetPinNametPc+0x40>)
 23e7d9e:	e7f4      	b.n	23e7d8a <_Z10GetPinNametPc+0x26>
 23e7da0:	023fc74c 	.word	0x023fc74c
 23e7da4:	023fcf61 	.word	0x023fcf61

023e7da8 <_Z17OutputResetReasonv>:
void OutputResetReason() {
 23e7da8:	b570      	push	{r4, r5, r6, lr}
        int reason = RESET_REASON_NONE;
 23e7daa:	2400      	movs	r4, #0
 23e7dac:	b0a2      	sub	sp, #136	; 0x88
  const ResetReasonEntry resetReasonTable[] = {
 23e7dae:	ae04      	add	r6, sp, #16
 23e7db0:	2278      	movs	r2, #120	; 0x78
 23e7db2:	4916      	ldr	r1, [pc, #88]	; (23e7e0c <_Z17OutputResetReasonv+0x64>)
 23e7db4:	4630      	mov	r0, r6
 23e7db6:	f014 fb09 	bl	23fc3cc <memcpy>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 23e7dba:	4622      	mov	r2, r4
 23e7dbc:	4621      	mov	r1, r4
 23e7dbe:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
 23e7dc0:	9403      	str	r4, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 23e7dc2:	f00e fb3d 	bl	23f6440 <HAL_Core_Get_Last_Reset_Info>
        HAL_Core_Get_Last_Reset_Info(nullptr, &data, nullptr);
 23e7dc6:	4622      	mov	r2, r4
 23e7dc8:	4620      	mov	r0, r4
 23e7dca:	a903      	add	r1, sp, #12
        return reason;
 23e7dcc:	9d03      	ldr	r5, [sp, #12]
        uint32_t data = 0;
 23e7dce:	9403      	str	r4, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(nullptr, &data, nullptr);
 23e7dd0:	f00e fb36 	bl	23f6440 <HAL_Core_Get_Last_Reset_Info>
        return data;
 23e7dd4:	9b03      	ldr	r3, [sp, #12]
    if (resetReasonTable[i].code == resetReason) {
 23e7dd6:	f856 2034 	ldr.w	r2, [r6, r4, lsl #3]
 23e7dda:	42aa      	cmp	r2, r5
 23e7ddc:	d110      	bne.n	23e7e00 <_Z17OutputResetReasonv+0x58>
        reasonText = resetReasonTable[i].description;
 23e7dde:	aa22      	add	r2, sp, #136	; 0x88
 23e7de0:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 23e7de4:	f854 2c74 	ldr.w	r2, [r4, #-116]
  sprintf(msgbuf, "RR:%s (%d,%lu)", reasonText, resetReason, resetData);
 23e7de8:	9300      	str	r3, [sp, #0]
 23e7dea:	4909      	ldr	r1, [pc, #36]	; (23e7e10 <_Z17OutputResetReasonv+0x68>)
 23e7dec:	462b      	mov	r3, r5
 23e7dee:	4809      	ldr	r0, [pc, #36]	; (23e7e14 <_Z17OutputResetReasonv+0x6c>)
 23e7df0:	f00f f9d2 	bl	23f7198 <sprintf>
  Output(msgbuf);
 23e7df4:	4807      	ldr	r0, [pc, #28]	; (23e7e14 <_Z17OutputResetReasonv+0x6c>)
}
 23e7df6:	b022      	add	sp, #136	; 0x88
 23e7df8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Output(msgbuf);
 23e7dfc:	f7fc bbc4 	b.w	23e4588 <_Z6OutputPKc>
  for (unsigned int i = 0; i < sizeof(resetReasonTable) / sizeof(resetReasonTable[0]); i++) {
 23e7e00:	3401      	adds	r4, #1
 23e7e02:	2c0f      	cmp	r4, #15
 23e7e04:	d1e7      	bne.n	23e7dd6 <_Z17OutputResetReasonv+0x2e>
  const char* reasonText = "Unknown Reset Reason";
 23e7e06:	4a04      	ldr	r2, [pc, #16]	; (23e7e18 <_Z17OutputResetReasonv+0x70>)
 23e7e08:	e7ee      	b.n	23e7de8 <_Z17OutputResetReasonv+0x40>
 23e7e0a:	bf00      	nop
 23e7e0c:	023fc80c 	.word	0x023fc80c
 23e7e10:	023fd516 	.word	0x023fd516
 23e7e14:	1006f118 	.word	0x1006f118
 23e7e18:	023fc95c 	.word	0x023fc95c

023e7e1c <_Z11DeviceResetv>:
void DeviceReset() {
 23e7e1c:	b508      	push	{r3, lr}
  digitalWrite(REBOOT_PIN, HIGH);
 23e7e1e:	2101      	movs	r1, #1
 23e7e20:	2006      	movs	r0, #6
 23e7e22:	f011 fc8c 	bl	23f973e <digitalWrite>
  delay(5000);
 23e7e26:	f241 3088 	movw	r0, #5000	; 0x1388
 23e7e2a:	f00f fa95 	bl	23f7358 <delay>
  digitalWrite(REBOOT_PIN, LOW);
 23e7e2e:	2100      	movs	r1, #0
 23e7e30:	2006      	movs	r0, #6
 23e7e32:	f011 fc84 	bl	23f973e <digitalWrite>
  delay(2000); 
 23e7e36:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23e7e3a:	f00f fa8d 	bl	23f7358 <delay>
}
 23e7e3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  System.reset();
 23e7e42:	f010 bf41 	b.w	23f8cc8 <_ZN11SystemClass5resetEv>
	...

023e7e48 <_Z17Function_DoAction6String>:
int Function_DoAction(String s) {
 23e7e48:	b530      	push	{r4, r5, lr}
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
 23e7e4a:	6805      	ldr	r5, [r0, #0]
  if (strcmp (s,"REBOOT") == 0) {  // Reboot - We loose untransmitted observations. But they are save to SD.
 23e7e4c:	498c      	ldr	r1, [pc, #560]	; (23e8080 <_Z17Function_DoAction6String+0x238>)
 23e7e4e:	4628      	mov	r0, r5
int Function_DoAction(String s) {
 23e7e50:	b095      	sub	sp, #84	; 0x54
  if (strcmp (s,"REBOOT") == 0) {  // Reboot - We loose untransmitted observations. But they are save to SD.
 23e7e52:	f7fb fa23 	bl	23e329c <strcmp>
 23e7e56:	4604      	mov	r4, r0
 23e7e58:	b968      	cbnz	r0, 23e7e76 <_Z17Function_DoAction6String+0x2e>
    Output("DoAction:REBOOT");     // Do a SEND before a REBOOT to address the abive issue.
 23e7e5a:	488a      	ldr	r0, [pc, #552]	; (23e8084 <_Z17Function_DoAction6String+0x23c>)
 23e7e5c:	f7fc fb94 	bl	23e4588 <_Z6OutputPKc>
    EEPROM_SaveUnreportedRain();
 23e7e60:	f7ff f842 	bl	23e6ee8 <_Z25EEPROM_SaveUnreportedRainv>
    delay(1000);
 23e7e64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23e7e68:	f00f fa76 	bl	23f7358 <delay>
    DeviceReset();
 23e7e6c:	f7ff ffd6 	bl	23e7e1c <_Z11DeviceResetv>
}
 23e7e70:	4620      	mov	r0, r4
 23e7e72:	b015      	add	sp, #84	; 0x54
 23e7e74:	bd30      	pop	{r4, r5, pc}
  else if (strcmp (s,"INFO") == 0) {  // Send System Information
 23e7e76:	4628      	mov	r0, r5
 23e7e78:	4983      	ldr	r1, [pc, #524]	; (23e8088 <_Z17Function_DoAction6String+0x240>)
 23e7e7a:	f7fb fa0f 	bl	23e329c <strcmp>
 23e7e7e:	4604      	mov	r4, r0
 23e7e80:	b930      	cbnz	r0, 23e7e90 <_Z17Function_DoAction6String+0x48>
    Output("DoAction:INFO");
 23e7e82:	4882      	ldr	r0, [pc, #520]	; (23e808c <_Z17Function_DoAction6String+0x244>)
 23e7e84:	f7fc fb80 	bl	23e4588 <_Z6OutputPKc>
    SendSystemInformation=true;
 23e7e88:	2201      	movs	r2, #1
 23e7e8a:	4b81      	ldr	r3, [pc, #516]	; (23e8090 <_Z17Function_DoAction6String+0x248>)
 23e7e8c:	701a      	strb	r2, [r3, #0]
    return(0);  
 23e7e8e:	e7ef      	b.n	23e7e70 <_Z17Function_DoAction6String+0x28>
  else if (strcmp (s,"SEND") == 0) {  // Send OBS Now
 23e7e90:	4628      	mov	r0, r5
 23e7e92:	4980      	ldr	r1, [pc, #512]	; (23e8094 <_Z17Function_DoAction6String+0x24c>)
 23e7e94:	f7fb fa02 	bl	23e329c <strcmp>
 23e7e98:	4604      	mov	r4, r0
 23e7e9a:	b940      	cbnz	r0, 23e7eae <_Z17Function_DoAction6String+0x66>
    Output("DoAction:SEND");
 23e7e9c:	487e      	ldr	r0, [pc, #504]	; (23e8098 <_Z17Function_DoAction6String+0x250>)
 23e7e9e:	f7fc fb73 	bl	23e4588 <_Z6OutputPKc>
    LastTransmitTime=0;
 23e7ea2:	2000      	movs	r0, #0
 23e7ea4:	2100      	movs	r1, #0
 23e7ea6:	4b7d      	ldr	r3, [pc, #500]	; (23e809c <_Z17Function_DoAction6String+0x254>)
 23e7ea8:	e9c3 0100 	strd	r0, r1, [r3]
    return(0);  
 23e7eac:	e7e0      	b.n	23e7e70 <_Z17Function_DoAction6String+0x28>
  else if (strcmp (s,"CRT") == 0) { // Clear Rain Totals
 23e7eae:	4628      	mov	r0, r5
 23e7eb0:	497b      	ldr	r1, [pc, #492]	; (23e80a0 <_Z17Function_DoAction6String+0x258>)
 23e7eb2:	f7fb f9f3 	bl	23e329c <strcmp>
 23e7eb6:	4604      	mov	r4, r0
 23e7eb8:	b948      	cbnz	r0, 23e7ece <_Z17Function_DoAction6String+0x86>
    time32_t current_time = Time.now();
 23e7eba:	f011 f8ba 	bl	23f9032 <_ZN9TimeClass3nowEv>
 23e7ebe:	4605      	mov	r5, r0
    Output("DoAction:CRT");
 23e7ec0:	4878      	ldr	r0, [pc, #480]	; (23e80a4 <_Z17Function_DoAction6String+0x25c>)
 23e7ec2:	f7fc fb61 	bl	23e4588 <_Z6OutputPKc>
    EEPROM_ClearRainTotals(current_time);
 23e7ec6:	4628      	mov	r0, r5
 23e7ec8:	f7fe fef6 	bl	23e6cb8 <_Z22EEPROM_ClearRainTotalsl>
    return(0);
 23e7ecc:	e7d0      	b.n	23e7e70 <_Z17Function_DoAction6String+0x28>
  else if (strcmp (s,"A4DIST") == 0) { // Set A4 State File to Distance
 23e7ece:	4628      	mov	r0, r5
 23e7ed0:	4975      	ldr	r1, [pc, #468]	; (23e80a8 <_Z17Function_DoAction6String+0x260>)
 23e7ed2:	f7fb f9e3 	bl	23e329c <strcmp>
 23e7ed6:	4604      	mov	r4, r0
 23e7ed8:	2800      	cmp	r0, #0
 23e7eda:	d158      	bne.n	23e7f8e <_Z17Function_DoAction6String+0x146>
    Output("DoAction:A4DIST");
 23e7edc:	4873      	ldr	r0, [pc, #460]	; (23e80ac <_Z17Function_DoAction6String+0x264>)
 23e7ede:	f7fc fb53 	bl	23e4588 <_Z6OutputPKc>
    if (SD_exists) {
 23e7ee2:	4b73      	ldr	r3, [pc, #460]	; (23e80b0 <_Z17Function_DoAction6String+0x268>)
 23e7ee4:	781b      	ldrb	r3, [r3, #0]
 23e7ee6:	2b00      	cmp	r3, #0
 23e7ee8:	d04b      	beq.n	23e7f82 <_Z17Function_DoAction6String+0x13a>
      if (SD.exists(SD_A4_RAIN_FILE)) {
 23e7eea:	4972      	ldr	r1, [pc, #456]	; (23e80b4 <_Z17Function_DoAction6String+0x26c>)
 23e7eec:	4872      	ldr	r0, [pc, #456]	; (23e80b8 <_Z17Function_DoAction6String+0x270>)
 23e7eee:	f7fc f885 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e7ef2:	b148      	cbz	r0, 23e7f08 <_Z17Function_DoAction6String+0xc0>
        EEPROM_ClearRain2Totals();
 23e7ef4:	f7fe fef2 	bl	23e6cdc <_Z23EEPROM_ClearRain2Totalsv>
        if (SD.remove (SD_A4_RAIN_FILE)) {
 23e7ef8:	496e      	ldr	r1, [pc, #440]	; (23e80b4 <_Z17Function_DoAction6String+0x26c>)
 23e7efa:	486f      	ldr	r0, [pc, #444]	; (23e80b8 <_Z17Function_DoAction6String+0x270>)
 23e7efc:	f7fc f899 	bl	23e4032 <_ZN8FsVolume6removeEPKc>
 23e7f00:	b1d8      	cbz	r0, 23e7f3a <_Z17Function_DoAction6String+0xf2>
          Output ("A4=DIST, DEL RAIN:OK");
 23e7f02:	486e      	ldr	r0, [pc, #440]	; (23e80bc <_Z17Function_DoAction6String+0x274>)
 23e7f04:	f7fc fb40 	bl	23e4588 <_Z6OutputPKc>
      if (SD.exists(SD_A4_DIST_FILE)) {
 23e7f08:	496d      	ldr	r1, [pc, #436]	; (23e80c0 <_Z17Function_DoAction6String+0x278>)
 23e7f0a:	486b      	ldr	r0, [pc, #428]	; (23e80b8 <_Z17Function_DoAction6String+0x270>)
 23e7f0c:	f7fc f876 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e7f10:	b1c8      	cbz	r0, 23e7f46 <_Z17Function_DoAction6String+0xfe>
        Output ("A4=DIST, ALREADY EXISTS");    
 23e7f12:	486c      	ldr	r0, [pc, #432]	; (23e80c4 <_Z17Function_DoAction6String+0x27c>)
          Output ("A4=DIST, SET");
 23e7f14:	f7fc fb38 	bl	23e4588 <_Z6OutputPKc>
      dg_adjustment = 2.5;
 23e7f18:	4b6b      	ldr	r3, [pc, #428]	; (23e80c8 <_Z17Function_DoAction6String+0x280>)
 23e7f1a:	4a6c      	ldr	r2, [pc, #432]	; (23e80cc <_Z17Function_DoAction6String+0x284>)
      if (SD.exists(SD_5M_DIST_FILE)) {
 23e7f1c:	496c      	ldr	r1, [pc, #432]	; (23e80d0 <_Z17Function_DoAction6String+0x288>)
 23e7f1e:	4866      	ldr	r0, [pc, #408]	; (23e80b8 <_Z17Function_DoAction6String+0x270>)
      dg_adjustment = 2.5;
 23e7f20:	601a      	str	r2, [r3, #0]
      if (SD.exists(SD_5M_DIST_FILE)) {
 23e7f22:	f7fc f86b 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e7f26:	b350      	cbz	r0, 23e7f7e <_Z17Function_DoAction6String+0x136>
        if (SD.remove (SD_5M_DIST_FILE)) {
 23e7f28:	4969      	ldr	r1, [pc, #420]	; (23e80d0 <_Z17Function_DoAction6String+0x288>)
 23e7f2a:	4863      	ldr	r0, [pc, #396]	; (23e80b8 <_Z17Function_DoAction6String+0x270>)
 23e7f2c:	f7fc f881 	bl	23e4032 <_ZN8FsVolume6removeEPKc>
 23e7f30:	b1f8      	cbz	r0, 23e7f72 <_Z17Function_DoAction6String+0x12a>
          Output ("A4=DIST, DEL 5M:OK, 10M SET");
 23e7f32:	4868      	ldr	r0, [pc, #416]	; (23e80d4 <_Z17Function_DoAction6String+0x28c>)
        Output ("TXI15M SET"); 
 23e7f34:	f7fc fb28 	bl	23e4588 <_Z6OutputPKc>
 23e7f38:	e79a      	b.n	23e7e70 <_Z17Function_DoAction6String+0x28>
          Output ("A4=DIST, DEL RAIN:ERR");
 23e7f3a:	4867      	ldr	r0, [pc, #412]	; (23e80d8 <_Z17Function_DoAction6String+0x290>)
          Output ("A4=RAIN, DEL DIST:ERR");
 23e7f3c:	f7fc fb24 	bl	23e4588 <_Z6OutputPKc>
          return(-2);
 23e7f40:	f06f 0401 	mvn.w	r4, #1
 23e7f44:	e794      	b.n	23e7e70 <_Z17Function_DoAction6String+0x28>
        File fp = SD.open(SD_A4_DIST_FILE, FILE_WRITE);
 23e7f46:	4668      	mov	r0, sp
 23e7f48:	f244 2302 	movw	r3, #16898	; 0x4202
 23e7f4c:	4a5c      	ldr	r2, [pc, #368]	; (23e80c0 <_Z17Function_DoAction6String+0x278>)
 23e7f4e:	495a      	ldr	r1, [pc, #360]	; (23e80b8 <_Z17Function_DoAction6String+0x270>)
 23e7f50:	f00c fdd4 	bl	23f4afc <_ZN8FsVolume4openEPKci>
 23e7f54:	a804      	add	r0, sp, #16
 23e7f56:	f7fc f8ca 	bl	23e40ee <_ZNK10FsBaseFile6isOpenEv>
        if (fp) {
 23e7f5a:	b120      	cbz	r0, 23e7f66 <_Z17Function_DoAction6String+0x11e>
          fp.close();
 23e7f5c:	a804      	add	r0, sp, #16
 23e7f5e:	f00c fcf4 	bl	23f494a <_ZN10FsBaseFile5closeEv>
          Output ("A4=DIST, SET");
 23e7f62:	485e      	ldr	r0, [pc, #376]	; (23e80dc <_Z17Function_DoAction6String+0x294>)
 23e7f64:	e7d6      	b.n	23e7f14 <_Z17Function_DoAction6String+0xcc>
          Output ("A4=DIST, OPEN ERR");
 23e7f66:	485e      	ldr	r0, [pc, #376]	; (23e80e0 <_Z17Function_DoAction6String+0x298>)
          Output ("A4=RAIN, OPEN ERR");
 23e7f68:	f7fc fb0e 	bl	23e4588 <_Z6OutputPKc>
          return(-3);
 23e7f6c:	f06f 0402 	mvn.w	r4, #2
 23e7f70:	e77e      	b.n	23e7e70 <_Z17Function_DoAction6String+0x28>
          Output ("A4=DIST, DEL 5M:ERR");
 23e7f72:	485c      	ldr	r0, [pc, #368]	; (23e80e4 <_Z17Function_DoAction6String+0x29c>)
          Output ("A4=RAIN, DEL 5M:ERR");
 23e7f74:	f7fc fb08 	bl	23e4588 <_Z6OutputPKc>
          return(-4);
 23e7f78:	f06f 0403 	mvn.w	r4, #3
 23e7f7c:	e778      	b.n	23e7e70 <_Z17Function_DoAction6String+0x28>
        Output ("A4=DIST, 10M");
 23e7f7e:	485a      	ldr	r0, [pc, #360]	; (23e80e8 <_Z17Function_DoAction6String+0x2a0>)
 23e7f80:	e7d8      	b.n	23e7f34 <_Z17Function_DoAction6String+0xec>
      Output("A4=DIST, SD NF"); 
 23e7f82:	485a      	ldr	r0, [pc, #360]	; (23e80ec <_Z17Function_DoAction6String+0x2a4>)
    Output("DoAction:UKN"); 
 23e7f84:	f7fc fb00 	bl	23e4588 <_Z6OutputPKc>
    return(-1);
 23e7f88:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 23e7f8c:	e770      	b.n	23e7e70 <_Z17Function_DoAction6String+0x28>
  else if (strcmp (s,"A4RAIN") == 0) { // Set A4 State File to Rain
 23e7f8e:	4628      	mov	r0, r5
 23e7f90:	4957      	ldr	r1, [pc, #348]	; (23e80f0 <_Z17Function_DoAction6String+0x2a8>)
 23e7f92:	f7fb f983 	bl	23e329c <strcmp>
 23e7f96:	4604      	mov	r4, r0
 23e7f98:	2800      	cmp	r0, #0
 23e7f9a:	d141      	bne.n	23e8020 <_Z17Function_DoAction6String+0x1d8>
    Output("DoAction:A4RAIN");
 23e7f9c:	4855      	ldr	r0, [pc, #340]	; (23e80f4 <_Z17Function_DoAction6String+0x2ac>)
 23e7f9e:	f7fc faf3 	bl	23e4588 <_Z6OutputPKc>
    if (SD_exists) {
 23e7fa2:	4b43      	ldr	r3, [pc, #268]	; (23e80b0 <_Z17Function_DoAction6String+0x268>)
 23e7fa4:	781b      	ldrb	r3, [r3, #0]
 23e7fa6:	2b00      	cmp	r3, #0
 23e7fa8:	d038      	beq.n	23e801c <_Z17Function_DoAction6String+0x1d4>
      if (SD.exists(SD_A4_DIST_FILE)) {
 23e7faa:	4945      	ldr	r1, [pc, #276]	; (23e80c0 <_Z17Function_DoAction6String+0x278>)
 23e7fac:	4842      	ldr	r0, [pc, #264]	; (23e80b8 <_Z17Function_DoAction6String+0x270>)
 23e7fae:	f7fc f825 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e7fb2:	b138      	cbz	r0, 23e7fc4 <_Z17Function_DoAction6String+0x17c>
        if (SD.remove (SD_A4_DIST_FILE)) {
 23e7fb4:	4942      	ldr	r1, [pc, #264]	; (23e80c0 <_Z17Function_DoAction6String+0x278>)
 23e7fb6:	4840      	ldr	r0, [pc, #256]	; (23e80b8 <_Z17Function_DoAction6String+0x270>)
 23e7fb8:	f7fc f83b 	bl	23e4032 <_ZN8FsVolume6removeEPKc>
 23e7fbc:	b1b0      	cbz	r0, 23e7fec <_Z17Function_DoAction6String+0x1a4>
          Output ("A4=RAIN, DEL DIST:OK");
 23e7fbe:	484e      	ldr	r0, [pc, #312]	; (23e80f8 <_Z17Function_DoAction6String+0x2b0>)
 23e7fc0:	f7fc fae2 	bl	23e4588 <_Z6OutputPKc>
      if (SD.exists(SD_5M_DIST_FILE)) {
 23e7fc4:	4942      	ldr	r1, [pc, #264]	; (23e80d0 <_Z17Function_DoAction6String+0x288>)
 23e7fc6:	483c      	ldr	r0, [pc, #240]	; (23e80b8 <_Z17Function_DoAction6String+0x270>)
 23e7fc8:	f7fc f818 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e7fcc:	b138      	cbz	r0, 23e7fde <_Z17Function_DoAction6String+0x196>
        if (SD.remove (SD_5M_DIST_FILE)) {
 23e7fce:	4940      	ldr	r1, [pc, #256]	; (23e80d0 <_Z17Function_DoAction6String+0x288>)
 23e7fd0:	4839      	ldr	r0, [pc, #228]	; (23e80b8 <_Z17Function_DoAction6String+0x270>)
 23e7fd2:	f7fc f82e 	bl	23e4032 <_ZN8FsVolume6removeEPKc>
 23e7fd6:	b158      	cbz	r0, 23e7ff0 <_Z17Function_DoAction6String+0x1a8>
          Output ("A4=RAIN, DEL 5M:OK");
 23e7fd8:	4848      	ldr	r0, [pc, #288]	; (23e80fc <_Z17Function_DoAction6String+0x2b4>)
 23e7fda:	f7fc fad5 	bl	23e4588 <_Z6OutputPKc>
      if (SD.exists(SD_A4_RAIN_FILE)) {
 23e7fde:	4935      	ldr	r1, [pc, #212]	; (23e80b4 <_Z17Function_DoAction6String+0x26c>)
 23e7fe0:	4835      	ldr	r0, [pc, #212]	; (23e80b8 <_Z17Function_DoAction6String+0x270>)
 23e7fe2:	f7fc f80b 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e7fe6:	b128      	cbz	r0, 23e7ff4 <_Z17Function_DoAction6String+0x1ac>
        Output ("A4=RAIN, ALREADY EXISTS");      
 23e7fe8:	4845      	ldr	r0, [pc, #276]	; (23e8100 <_Z17Function_DoAction6String+0x2b8>)
 23e7fea:	e7a3      	b.n	23e7f34 <_Z17Function_DoAction6String+0xec>
          Output ("A4=RAIN, DEL DIST:ERR");
 23e7fec:	4845      	ldr	r0, [pc, #276]	; (23e8104 <_Z17Function_DoAction6String+0x2bc>)
 23e7fee:	e7a5      	b.n	23e7f3c <_Z17Function_DoAction6String+0xf4>
          Output ("A4=RAIN, DEL 5M:ERR");
 23e7ff0:	4845      	ldr	r0, [pc, #276]	; (23e8108 <_Z17Function_DoAction6String+0x2c0>)
 23e7ff2:	e7bf      	b.n	23e7f74 <_Z17Function_DoAction6String+0x12c>
        EEPROM_ClearRain2Totals(); // Just a good thing to do.
 23e7ff4:	f7fe fe72 	bl	23e6cdc <_Z23EEPROM_ClearRain2Totalsv>
        File fp = SD.open(SD_A4_RAIN_FILE, FILE_WRITE);
 23e7ff8:	4668      	mov	r0, sp
 23e7ffa:	f244 2302 	movw	r3, #16898	; 0x4202
 23e7ffe:	4a2d      	ldr	r2, [pc, #180]	; (23e80b4 <_Z17Function_DoAction6String+0x26c>)
 23e8000:	492d      	ldr	r1, [pc, #180]	; (23e80b8 <_Z17Function_DoAction6String+0x270>)
 23e8002:	f00c fd7b 	bl	23f4afc <_ZN8FsVolume4openEPKci>
 23e8006:	a804      	add	r0, sp, #16
 23e8008:	f7fc f871 	bl	23e40ee <_ZNK10FsBaseFile6isOpenEv>
        if (fp) {
 23e800c:	b120      	cbz	r0, 23e8018 <_Z17Function_DoAction6String+0x1d0>
          fp.close();
 23e800e:	a804      	add	r0, sp, #16
 23e8010:	f00c fc9b 	bl	23f494a <_ZN10FsBaseFile5closeEv>
          Output ("A4=RAIN, SET");
 23e8014:	483d      	ldr	r0, [pc, #244]	; (23e810c <_Z17Function_DoAction6String+0x2c4>)
 23e8016:	e78d      	b.n	23e7f34 <_Z17Function_DoAction6String+0xec>
          Output ("A4=RAIN, OPEN ERR");
 23e8018:	483d      	ldr	r0, [pc, #244]	; (23e8110 <_Z17Function_DoAction6String+0x2c8>)
 23e801a:	e7a5      	b.n	23e7f68 <_Z17Function_DoAction6String+0x120>
      Output("A4=RAIN, SD NF"); 
 23e801c:	483d      	ldr	r0, [pc, #244]	; (23e8114 <_Z17Function_DoAction6String+0x2cc>)
 23e801e:	e7b1      	b.n	23e7f84 <_Z17Function_DoAction6String+0x13c>
  else if (strcmp (s,"5MDIST") == 0) { // Set 5M Distance Sensor State File
 23e8020:	4628      	mov	r0, r5
 23e8022:	493d      	ldr	r1, [pc, #244]	; (23e8118 <_Z17Function_DoAction6String+0x2d0>)
 23e8024:	f7fb f93a 	bl	23e329c <strcmp>
 23e8028:	4604      	mov	r4, r0
 23e802a:	2800      	cmp	r0, #0
 23e802c:	f040 8082 	bne.w	23e8134 <_Z17Function_DoAction6String+0x2ec>
    Output("DoAction:5MDIST");
 23e8030:	483a      	ldr	r0, [pc, #232]	; (23e811c <_Z17Function_DoAction6String+0x2d4>)
 23e8032:	f7fc faa9 	bl	23e4588 <_Z6OutputPKc>
    if (SD_exists) {
 23e8036:	4b1e      	ldr	r3, [pc, #120]	; (23e80b0 <_Z17Function_DoAction6String+0x268>)
 23e8038:	781b      	ldrb	r3, [r3, #0]
 23e803a:	b1fb      	cbz	r3, 23e807c <_Z17Function_DoAction6String+0x234>
      if (SD.exists(SD_5M_DIST_FILE)) {
 23e803c:	4924      	ldr	r1, [pc, #144]	; (23e80d0 <_Z17Function_DoAction6String+0x288>)
 23e803e:	481e      	ldr	r0, [pc, #120]	; (23e80b8 <_Z17Function_DoAction6String+0x270>)
 23e8040:	f7fb ffdc 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e8044:	b108      	cbz	r0, 23e804a <_Z17Function_DoAction6String+0x202>
        Output ("5MDIST, ALREADY EXISTS");      
 23e8046:	4836      	ldr	r0, [pc, #216]	; (23e8120 <_Z17Function_DoAction6String+0x2d8>)
 23e8048:	e774      	b.n	23e7f34 <_Z17Function_DoAction6String+0xec>
        File fp = SD.open(SD_5M_DIST_FILE, FILE_WRITE);
 23e804a:	4668      	mov	r0, sp
 23e804c:	f244 2302 	movw	r3, #16898	; 0x4202
 23e8050:	4a1f      	ldr	r2, [pc, #124]	; (23e80d0 <_Z17Function_DoAction6String+0x288>)
 23e8052:	4919      	ldr	r1, [pc, #100]	; (23e80b8 <_Z17Function_DoAction6String+0x270>)
 23e8054:	f00c fd52 	bl	23f4afc <_ZN8FsVolume4openEPKci>
 23e8058:	a804      	add	r0, sp, #16
 23e805a:	f7fc f848 	bl	23e40ee <_ZNK10FsBaseFile6isOpenEv>
        if (fp) {
 23e805e:	b138      	cbz	r0, 23e8070 <_Z17Function_DoAction6String+0x228>
          fp.close();
 23e8060:	a804      	add	r0, sp, #16
 23e8062:	f00c fc72 	bl	23f494a <_ZN10FsBaseFile5closeEv>
          dg_adjustment = 1.25;
 23e8066:	4b18      	ldr	r3, [pc, #96]	; (23e80c8 <_Z17Function_DoAction6String+0x280>)
 23e8068:	4a2e      	ldr	r2, [pc, #184]	; (23e8124 <_Z17Function_DoAction6String+0x2dc>)
          Output ("5MDIST SET");
 23e806a:	482f      	ldr	r0, [pc, #188]	; (23e8128 <_Z17Function_DoAction6String+0x2e0>)
          dg_adjustment = 1.25;
 23e806c:	601a      	str	r2, [r3, #0]
          Output ("5MDIST SET");
 23e806e:	e761      	b.n	23e7f34 <_Z17Function_DoAction6String+0xec>
          Output ("5MDIST OPEN ERR");
 23e8070:	482e      	ldr	r0, [pc, #184]	; (23e812c <_Z17Function_DoAction6String+0x2e4>)
          Output ("A4=RAW, OPEN ERR");
 23e8072:	f7fc fa89 	bl	23e4588 <_Z6OutputPKc>
          return(-5);
 23e8076:	f06f 0404 	mvn.w	r4, #4
 23e807a:	e6f9      	b.n	23e7e70 <_Z17Function_DoAction6String+0x28>
      Output("5MDIST, SD NF"); 
 23e807c:	482c      	ldr	r0, [pc, #176]	; (23e8130 <_Z17Function_DoAction6String+0x2e8>)
 23e807e:	e781      	b.n	23e7f84 <_Z17Function_DoAction6String+0x13c>
 23e8080:	023fd52e 	.word	0x023fd52e
 23e8084:	023fd525 	.word	0x023fd525
 23e8088:	023fd53e 	.word	0x023fd53e
 23e808c:	023fd535 	.word	0x023fd535
 23e8090:	1006a166 	.word	0x1006a166
 23e8094:	023fd54c 	.word	0x023fd54c
 23e8098:	023fd543 	.word	0x023fd543
 23e809c:	1006a2b0 	.word	0x1006a2b0
 23e80a0:	023fd55a 	.word	0x023fd55a
 23e80a4:	023fd551 	.word	0x023fd551
 23e80a8:	023fd567 	.word	0x023fd567
 23e80ac:	023fd55e 	.word	0x023fd55e
 23e80b0:	1006a770 	.word	0x1006a770
 23e80b4:	1006a10a 	.word	0x1006a10a
 23e80b8:	1006a2c4 	.word	0x1006a2c4
 23e80bc:	023fd56e 	.word	0x023fd56e
 23e80c0:	1006a0ff 	.word	0x1006a0ff
 23e80c4:	023fd599 	.word	0x023fd599
 23e80c8:	1006a190 	.word	0x1006a190
 23e80cc:	40200000 	.word	0x40200000
 23e80d0:	1006a0f4 	.word	0x1006a0f4
 23e80d4:	023fd5d0 	.word	0x023fd5d0
 23e80d8:	023fd583 	.word	0x023fd583
 23e80dc:	023fd5b1 	.word	0x023fd5b1
 23e80e0:	023fd5be 	.word	0x023fd5be
 23e80e4:	023fd5ec 	.word	0x023fd5ec
 23e80e8:	023fd600 	.word	0x023fd600
 23e80ec:	023fd60d 	.word	0x023fd60d
 23e80f0:	023fd625 	.word	0x023fd625
 23e80f4:	023fd61c 	.word	0x023fd61c
 23e80f8:	023fd62c 	.word	0x023fd62c
 23e80fc:	023fd657 	.word	0x023fd657
 23e8100:	023fd67e 	.word	0x023fd67e
 23e8104:	023fd641 	.word	0x023fd641
 23e8108:	023fd66a 	.word	0x023fd66a
 23e810c:	023fd696 	.word	0x023fd696
 23e8110:	023fd6a3 	.word	0x023fd6a3
 23e8114:	023fd6b5 	.word	0x023fd6b5
 23e8118:	023fd6cd 	.word	0x023fd6cd
 23e811c:	023fd6c4 	.word	0x023fd6c4
 23e8120:	023fd6d4 	.word	0x023fd6d4
 23e8124:	3fa00000 	.word	0x3fa00000
 23e8128:	023fd6eb 	.word	0x023fd6eb
 23e812c:	023fd6f6 	.word	0x023fd6f6
 23e8130:	023fd706 	.word	0x023fd706
  else if (strcmp (s,"A4RAW") == 0) { // Set A4 State File to Raw
 23e8134:	4628      	mov	r0, r5
 23e8136:	4989      	ldr	r1, [pc, #548]	; (23e835c <_Z17Function_DoAction6String+0x514>)
 23e8138:	f7fb f8b0 	bl	23e329c <strcmp>
 23e813c:	4604      	mov	r4, r0
 23e813e:	2800      	cmp	r0, #0
 23e8140:	d153      	bne.n	23e81ea <_Z17Function_DoAction6String+0x3a2>
    Output("DoAction:A4RAW");
 23e8142:	4887      	ldr	r0, [pc, #540]	; (23e8360 <_Z17Function_DoAction6String+0x518>)
 23e8144:	f7fc fa20 	bl	23e4588 <_Z6OutputPKc>
    if (SD_exists) {
 23e8148:	4b86      	ldr	r3, [pc, #536]	; (23e8364 <_Z17Function_DoAction6String+0x51c>)
 23e814a:	781b      	ldrb	r3, [r3, #0]
 23e814c:	2b00      	cmp	r3, #0
 23e814e:	d04a      	beq.n	23e81e6 <_Z17Function_DoAction6String+0x39e>
      if (SD.exists(SD_A4_RAIN_FILE)) {
 23e8150:	4985      	ldr	r1, [pc, #532]	; (23e8368 <_Z17Function_DoAction6String+0x520>)
 23e8152:	4886      	ldr	r0, [pc, #536]	; (23e836c <_Z17Function_DoAction6String+0x524>)
 23e8154:	f7fb ff52 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e8158:	b158      	cbz	r0, 23e8172 <_Z17Function_DoAction6String+0x32a>
        EEPROM_ClearRain2Totals();
 23e815a:	f7fe fdbf 	bl	23e6cdc <_Z23EEPROM_ClearRain2Totalsv>
        if (SD.remove (SD_A4_RAIN_FILE)) {
 23e815e:	4982      	ldr	r1, [pc, #520]	; (23e8368 <_Z17Function_DoAction6String+0x520>)
 23e8160:	4882      	ldr	r0, [pc, #520]	; (23e836c <_Z17Function_DoAction6String+0x524>)
 23e8162:	f7fb ff66 	bl	23e4032 <_ZN8FsVolume6removeEPKc>
 23e8166:	2800      	cmp	r0, #0
 23e8168:	f43f aee7 	beq.w	23e7f3a <_Z17Function_DoAction6String+0xf2>
          Output ("A4=DIST, DEL RAIN:OK");
 23e816c:	4880      	ldr	r0, [pc, #512]	; (23e8370 <_Z17Function_DoAction6String+0x528>)
 23e816e:	f7fc fa0b 	bl	23e4588 <_Z6OutputPKc>
      if (SD.exists(SD_A4_DIST_FILE)) {
 23e8172:	4980      	ldr	r1, [pc, #512]	; (23e8374 <_Z17Function_DoAction6String+0x52c>)
 23e8174:	487d      	ldr	r0, [pc, #500]	; (23e836c <_Z17Function_DoAction6String+0x524>)
 23e8176:	f7fb ff41 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e817a:	b138      	cbz	r0, 23e818c <_Z17Function_DoAction6String+0x344>
        if (SD.remove (SD_A4_DIST_FILE)) {
 23e817c:	497d      	ldr	r1, [pc, #500]	; (23e8374 <_Z17Function_DoAction6String+0x52c>)
 23e817e:	487b      	ldr	r0, [pc, #492]	; (23e836c <_Z17Function_DoAction6String+0x524>)
 23e8180:	f7fb ff57 	bl	23e4032 <_ZN8FsVolume6removeEPKc>
 23e8184:	b1d8      	cbz	r0, 23e81be <_Z17Function_DoAction6String+0x376>
          Output ("A4=DIST, DEL DIST:OK");
 23e8186:	487c      	ldr	r0, [pc, #496]	; (23e8378 <_Z17Function_DoAction6String+0x530>)
 23e8188:	f7fc f9fe 	bl	23e4588 <_Z6OutputPKc>
      dg_adjustment = 2.5;
 23e818c:	4b7b      	ldr	r3, [pc, #492]	; (23e837c <_Z17Function_DoAction6String+0x534>)
 23e818e:	4a7c      	ldr	r2, [pc, #496]	; (23e8380 <_Z17Function_DoAction6String+0x538>)
      if (SD.exists(SD_5M_DIST_FILE)) {
 23e8190:	497c      	ldr	r1, [pc, #496]	; (23e8384 <_Z17Function_DoAction6String+0x53c>)
 23e8192:	4876      	ldr	r0, [pc, #472]	; (23e836c <_Z17Function_DoAction6String+0x524>)
      dg_adjustment = 2.5;
 23e8194:	601a      	str	r2, [r3, #0]
      if (SD.exists(SD_5M_DIST_FILE)) {
 23e8196:	f7fb ff31 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e819a:	b148      	cbz	r0, 23e81b0 <_Z17Function_DoAction6String+0x368>
        if (SD.remove (SD_5M_DIST_FILE)) {
 23e819c:	4979      	ldr	r1, [pc, #484]	; (23e8384 <_Z17Function_DoAction6String+0x53c>)
 23e819e:	4873      	ldr	r0, [pc, #460]	; (23e836c <_Z17Function_DoAction6String+0x524>)
 23e81a0:	f7fb ff47 	bl	23e4032 <_ZN8FsVolume6removeEPKc>
 23e81a4:	2800      	cmp	r0, #0
 23e81a6:	f43f aee4 	beq.w	23e7f72 <_Z17Function_DoAction6String+0x12a>
          Output ("A4=DIST, DEL 5M:OK");
 23e81aa:	4877      	ldr	r0, [pc, #476]	; (23e8388 <_Z17Function_DoAction6String+0x540>)
 23e81ac:	f7fc f9ec 	bl	23e4588 <_Z6OutputPKc>
      if (SD.exists(SD_A4_RAW_FILE)) {
 23e81b0:	4976      	ldr	r1, [pc, #472]	; (23e838c <_Z17Function_DoAction6String+0x544>)
 23e81b2:	486e      	ldr	r0, [pc, #440]	; (23e836c <_Z17Function_DoAction6String+0x524>)
 23e81b4:	f7fb ff22 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e81b8:	b118      	cbz	r0, 23e81c2 <_Z17Function_DoAction6String+0x37a>
        Output ("A4=RAW, ALREADY EXISTS");    
 23e81ba:	4875      	ldr	r0, [pc, #468]	; (23e8390 <_Z17Function_DoAction6String+0x548>)
 23e81bc:	e6ba      	b.n	23e7f34 <_Z17Function_DoAction6String+0xec>
          Output ("A4=DIST, DEL DIST:ERR");
 23e81be:	4875      	ldr	r0, [pc, #468]	; (23e8394 <_Z17Function_DoAction6String+0x54c>)
 23e81c0:	e6d2      	b.n	23e7f68 <_Z17Function_DoAction6String+0x120>
        File fp = SD.open(SD_A4_RAW_FILE, FILE_WRITE);
 23e81c2:	4668      	mov	r0, sp
 23e81c4:	f244 2302 	movw	r3, #16898	; 0x4202
 23e81c8:	4a70      	ldr	r2, [pc, #448]	; (23e838c <_Z17Function_DoAction6String+0x544>)
 23e81ca:	4968      	ldr	r1, [pc, #416]	; (23e836c <_Z17Function_DoAction6String+0x524>)
 23e81cc:	f00c fc96 	bl	23f4afc <_ZN8FsVolume4openEPKci>
 23e81d0:	a804      	add	r0, sp, #16
 23e81d2:	f7fb ff8c 	bl	23e40ee <_ZNK10FsBaseFile6isOpenEv>
        if (fp) {
 23e81d6:	b120      	cbz	r0, 23e81e2 <_Z17Function_DoAction6String+0x39a>
          fp.close();
 23e81d8:	a804      	add	r0, sp, #16
 23e81da:	f00c fbb6 	bl	23f494a <_ZN10FsBaseFile5closeEv>
          Output ("A4=RAW, SET");
 23e81de:	486e      	ldr	r0, [pc, #440]	; (23e8398 <_Z17Function_DoAction6String+0x550>)
 23e81e0:	e6a8      	b.n	23e7f34 <_Z17Function_DoAction6String+0xec>
          Output ("A4=RAW, OPEN ERR");
 23e81e2:	486e      	ldr	r0, [pc, #440]	; (23e839c <_Z17Function_DoAction6String+0x554>)
 23e81e4:	e745      	b.n	23e8072 <_Z17Function_DoAction6String+0x22a>
      Output("A4=RAW, SD NF"); 
 23e81e6:	486e      	ldr	r0, [pc, #440]	; (23e83a0 <_Z17Function_DoAction6String+0x558>)
 23e81e8:	e6cc      	b.n	23e7f84 <_Z17Function_DoAction6String+0x13c>
  else if (strcmp (s,"A4CLR") == 0) { // Clear A4 State Files
 23e81ea:	4628      	mov	r0, r5
 23e81ec:	496d      	ldr	r1, [pc, #436]	; (23e83a4 <_Z17Function_DoAction6String+0x55c>)
 23e81ee:	f7fb f855 	bl	23e329c <strcmp>
 23e81f2:	4604      	mov	r4, r0
 23e81f4:	2800      	cmp	r0, #0
 23e81f6:	d166      	bne.n	23e82c6 <_Z17Function_DoAction6String+0x47e>
    Output("DoAction:A4CLR");
 23e81f8:	486b      	ldr	r0, [pc, #428]	; (23e83a8 <_Z17Function_DoAction6String+0x560>)
 23e81fa:	f7fc f9c5 	bl	23e4588 <_Z6OutputPKc>
    if (SD_exists) {
 23e81fe:	4b59      	ldr	r3, [pc, #356]	; (23e8364 <_Z17Function_DoAction6String+0x51c>)
 23e8200:	781b      	ldrb	r3, [r3, #0]
 23e8202:	2b00      	cmp	r3, #0
 23e8204:	d05d      	beq.n	23e82c2 <_Z17Function_DoAction6String+0x47a>
      if (SD.exists(SD_A4_DIST_FILE)) {
 23e8206:	495b      	ldr	r1, [pc, #364]	; (23e8374 <_Z17Function_DoAction6String+0x52c>)
 23e8208:	4858      	ldr	r0, [pc, #352]	; (23e836c <_Z17Function_DoAction6String+0x524>)
 23e820a:	f7fb fef7 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e820e:	b308      	cbz	r0, 23e8254 <_Z17Function_DoAction6String+0x40c>
        if (SD.remove (SD_A4_DIST_FILE)) {
 23e8210:	4958      	ldr	r1, [pc, #352]	; (23e8374 <_Z17Function_DoAction6String+0x52c>)
 23e8212:	4856      	ldr	r0, [pc, #344]	; (23e836c <_Z17Function_DoAction6String+0x524>)
 23e8214:	f7fb ff0d 	bl	23e4032 <_ZN8FsVolume6removeEPKc>
 23e8218:	b130      	cbz	r0, 23e8228 <_Z17Function_DoAction6String+0x3e0>
          A4_State = A4_STATE_NULL;
 23e821a:	2200      	movs	r2, #0
 23e821c:	4b63      	ldr	r3, [pc, #396]	; (23e83ac <_Z17Function_DoAction6String+0x564>)
          Output ("A4=CLR, DEL DIST:OK");
 23e821e:	4864      	ldr	r0, [pc, #400]	; (23e83b0 <_Z17Function_DoAction6String+0x568>)
          A4_State = A4_STATE_NULL;
 23e8220:	601a      	str	r2, [r3, #0]
        Output ("A4=CLR, DEL RAIN:NF");
 23e8222:	f7fc f9b1 	bl	23e4588 <_Z6OutputPKc>
 23e8226:	e004      	b.n	23e8232 <_Z17Function_DoAction6String+0x3ea>
          Output ("A4=CLR, DEL DIST:ERR");
 23e8228:	4862      	ldr	r0, [pc, #392]	; (23e83b4 <_Z17Function_DoAction6String+0x56c>)
 23e822a:	f7fc f9ad 	bl	23e4588 <_Z6OutputPKc>
          state=-2;
 23e822e:	f06f 0401 	mvn.w	r4, #1
      if (SD.exists(SD_A4_RAIN_FILE)) {
 23e8232:	494d      	ldr	r1, [pc, #308]	; (23e8368 <_Z17Function_DoAction6String+0x520>)
 23e8234:	484d      	ldr	r0, [pc, #308]	; (23e836c <_Z17Function_DoAction6String+0x524>)
 23e8236:	f7fb fee1 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e823a:	b310      	cbz	r0, 23e8282 <_Z17Function_DoAction6String+0x43a>
        if (SD.remove (SD_A4_RAIN_FILE)) {
 23e823c:	494a      	ldr	r1, [pc, #296]	; (23e8368 <_Z17Function_DoAction6String+0x520>)
 23e823e:	484b      	ldr	r0, [pc, #300]	; (23e836c <_Z17Function_DoAction6String+0x524>)
 23e8240:	f7fb fef7 	bl	23e4032 <_ZN8FsVolume6removeEPKc>
 23e8244:	b140      	cbz	r0, 23e8258 <_Z17Function_DoAction6String+0x410>
          A4_State = A4_STATE_NULL;      // We still need a reboot to get rid of ISR
 23e8246:	2200      	movs	r2, #0
 23e8248:	4b58      	ldr	r3, [pc, #352]	; (23e83ac <_Z17Function_DoAction6String+0x564>)
          Output ("A4=CLR, DEL RAIN:OK");
 23e824a:	485b      	ldr	r0, [pc, #364]	; (23e83b8 <_Z17Function_DoAction6String+0x570>)
          A4_State = A4_STATE_NULL;      // We still need a reboot to get rid of ISR
 23e824c:	601a      	str	r2, [r3, #0]
        Output ("A4=CLR, DEL RAIN:NF");
 23e824e:	f7fc f99b 	bl	23e4588 <_Z6OutputPKc>
 23e8252:	e005      	b.n	23e8260 <_Z17Function_DoAction6String+0x418>
        Output ("A4=CLR, DEL RAIN:NF");
 23e8254:	4859      	ldr	r0, [pc, #356]	; (23e83bc <_Z17Function_DoAction6String+0x574>)
 23e8256:	e7e4      	b.n	23e8222 <_Z17Function_DoAction6String+0x3da>
          Output ("A4=CLR, DEL RAIN:ERR");
 23e8258:	4859      	ldr	r0, [pc, #356]	; (23e83c0 <_Z17Function_DoAction6String+0x578>)
 23e825a:	f7fc f995 	bl	23e4588 <_Z6OutputPKc>
          state+=-3; // returns a -3 if also failed removing DIST file
 23e825e:	3c03      	subs	r4, #3
      if (SD.exists(SD_A4_RAW_FILE)) {
 23e8260:	494a      	ldr	r1, [pc, #296]	; (23e838c <_Z17Function_DoAction6String+0x544>)
 23e8262:	4842      	ldr	r0, [pc, #264]	; (23e836c <_Z17Function_DoAction6String+0x524>)
 23e8264:	f7fb feca 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e8268:	b320      	cbz	r0, 23e82b4 <_Z17Function_DoAction6String+0x46c>
        if (SD.remove (SD_A4_RAW_FILE)) {
 23e826a:	4948      	ldr	r1, [pc, #288]	; (23e838c <_Z17Function_DoAction6String+0x544>)
 23e826c:	483f      	ldr	r0, [pc, #252]	; (23e836c <_Z17Function_DoAction6String+0x524>)
 23e826e:	f7fb fee0 	bl	23e4032 <_ZN8FsVolume6removeEPKc>
 23e8272:	b140      	cbz	r0, 23e8286 <_Z17Function_DoAction6String+0x43e>
          A4_State = A4_STATE_NULL;
 23e8274:	2200      	movs	r2, #0
 23e8276:	4b4d      	ldr	r3, [pc, #308]	; (23e83ac <_Z17Function_DoAction6String+0x564>)
          Output ("A4=CLR, DEL RAW:OK");
 23e8278:	4852      	ldr	r0, [pc, #328]	; (23e83c4 <_Z17Function_DoAction6String+0x57c>)
          A4_State = A4_STATE_NULL;
 23e827a:	601a      	str	r2, [r3, #0]
        Output ("A4=CLR, DEL RAIN:NF");
 23e827c:	f7fc f984 	bl	23e4588 <_Z6OutputPKc>
 23e8280:	e005      	b.n	23e828e <_Z17Function_DoAction6String+0x446>
        Output ("A4=CLR, DEL RAIN:NF");
 23e8282:	484e      	ldr	r0, [pc, #312]	; (23e83bc <_Z17Function_DoAction6String+0x574>)
 23e8284:	e7e3      	b.n	23e824e <_Z17Function_DoAction6String+0x406>
          Output ("A4=CLR, DEL RAW:ERR");
 23e8286:	4850      	ldr	r0, [pc, #320]	; (23e83c8 <_Z17Function_DoAction6String+0x580>)
 23e8288:	f7fc f97e 	bl	23e4588 <_Z6OutputPKc>
          state+=-4; // returns a -4 if also failed removing RAW file
 23e828c:	3c04      	subs	r4, #4
      if (SD.exists(SD_5M_DIST_FILE)) {
 23e828e:	493d      	ldr	r1, [pc, #244]	; (23e8384 <_Z17Function_DoAction6String+0x53c>)
 23e8290:	4836      	ldr	r0, [pc, #216]	; (23e836c <_Z17Function_DoAction6String+0x524>)
 23e8292:	f7fb feb3 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e8296:	2800      	cmp	r0, #0
 23e8298:	f43f adea 	beq.w	23e7e70 <_Z17Function_DoAction6String+0x28>
        if (SD.remove (SD_5M_DIST_FILE)) {
 23e829c:	4939      	ldr	r1, [pc, #228]	; (23e8384 <_Z17Function_DoAction6String+0x53c>)
 23e829e:	4833      	ldr	r0, [pc, #204]	; (23e836c <_Z17Function_DoAction6String+0x524>)
 23e82a0:	f7fb fec7 	bl	23e4032 <_ZN8FsVolume6removeEPKc>
 23e82a4:	b140      	cbz	r0, 23e82b8 <_Z17Function_DoAction6String+0x470>
          Output ("A4=CLR, DEL 5M:OK");
 23e82a6:	4849      	ldr	r0, [pc, #292]	; (23e83cc <_Z17Function_DoAction6String+0x584>)
 23e82a8:	f7fc f96e 	bl	23e4588 <_Z6OutputPKc>
          dg_adjustment = 2.5;
 23e82ac:	4b33      	ldr	r3, [pc, #204]	; (23e837c <_Z17Function_DoAction6String+0x534>)
 23e82ae:	4a34      	ldr	r2, [pc, #208]	; (23e8380 <_Z17Function_DoAction6String+0x538>)
 23e82b0:	601a      	str	r2, [r3, #0]
 23e82b2:	e5dd      	b.n	23e7e70 <_Z17Function_DoAction6String+0x28>
        Output ("A4=CLR, DEL RAIN:NF");
 23e82b4:	4841      	ldr	r0, [pc, #260]	; (23e83bc <_Z17Function_DoAction6String+0x574>)
 23e82b6:	e7e1      	b.n	23e827c <_Z17Function_DoAction6String+0x434>
          Output ("A4=CLR, DEL 5M:ERR");
 23e82b8:	4845      	ldr	r0, [pc, #276]	; (23e83d0 <_Z17Function_DoAction6String+0x588>)
 23e82ba:	f7fc f965 	bl	23e4588 <_Z6OutputPKc>
          state+=-5;
 23e82be:	3c05      	subs	r4, #5
 23e82c0:	e5d6      	b.n	23e7e70 <_Z17Function_DoAction6String+0x28>
      Output("A4=CLR, SD NF"); 
 23e82c2:	4844      	ldr	r0, [pc, #272]	; (23e83d4 <_Z17Function_DoAction6String+0x58c>)
 23e82c4:	e65e      	b.n	23e7f84 <_Z17Function_DoAction6String+0x13c>
  else if (strcmp (s,"A5RAW") == 0) { // Set A5 State File to Raw
 23e82c6:	4628      	mov	r0, r5
 23e82c8:	4943      	ldr	r1, [pc, #268]	; (23e83d8 <_Z17Function_DoAction6String+0x590>)
 23e82ca:	f7fa ffe7 	bl	23e329c <strcmp>
 23e82ce:	4604      	mov	r4, r0
 23e82d0:	bb18      	cbnz	r0, 23e831a <_Z17Function_DoAction6String+0x4d2>
    Output("DoAction:A5RAW");
 23e82d2:	4842      	ldr	r0, [pc, #264]	; (23e83dc <_Z17Function_DoAction6String+0x594>)
 23e82d4:	f7fc f958 	bl	23e4588 <_Z6OutputPKc>
    if (SD_exists) {
 23e82d8:	4b22      	ldr	r3, [pc, #136]	; (23e8364 <_Z17Function_DoAction6String+0x51c>)
 23e82da:	781b      	ldrb	r3, [r3, #0]
 23e82dc:	b1db      	cbz	r3, 23e8316 <_Z17Function_DoAction6String+0x4ce>
      if (SD.exists(SD_A5_RAW_FILE)) {
 23e82de:	4940      	ldr	r1, [pc, #256]	; (23e83e0 <_Z17Function_DoAction6String+0x598>)
 23e82e0:	4822      	ldr	r0, [pc, #136]	; (23e836c <_Z17Function_DoAction6String+0x524>)
 23e82e2:	f7fb fe8b 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e82e6:	b108      	cbz	r0, 23e82ec <_Z17Function_DoAction6String+0x4a4>
        Output ("A5=RAW, ALREADY EXISTS");    
 23e82e8:	483e      	ldr	r0, [pc, #248]	; (23e83e4 <_Z17Function_DoAction6String+0x59c>)
 23e82ea:	e623      	b.n	23e7f34 <_Z17Function_DoAction6String+0xec>
        File fp = SD.open(SD_A5_RAW_FILE, FILE_WRITE);
 23e82ec:	4668      	mov	r0, sp
 23e82ee:	f244 2302 	movw	r3, #16898	; 0x4202
 23e82f2:	4a3b      	ldr	r2, [pc, #236]	; (23e83e0 <_Z17Function_DoAction6String+0x598>)
 23e82f4:	491d      	ldr	r1, [pc, #116]	; (23e836c <_Z17Function_DoAction6String+0x524>)
 23e82f6:	f00c fc01 	bl	23f4afc <_ZN8FsVolume4openEPKci>
 23e82fa:	a804      	add	r0, sp, #16
 23e82fc:	f7fb fef7 	bl	23e40ee <_ZNK10FsBaseFile6isOpenEv>
        if (fp) {
 23e8300:	b138      	cbz	r0, 23e8312 <_Z17Function_DoAction6String+0x4ca>
          fp.close();
 23e8302:	a804      	add	r0, sp, #16
 23e8304:	f00c fb21 	bl	23f494a <_ZN10FsBaseFile5closeEv>
          A5_State = A5_STATE_RAW;
 23e8308:	2201      	movs	r2, #1
 23e830a:	4b37      	ldr	r3, [pc, #220]	; (23e83e8 <_Z17Function_DoAction6String+0x5a0>)
          Output ("A5=RAW, SET");
 23e830c:	4837      	ldr	r0, [pc, #220]	; (23e83ec <_Z17Function_DoAction6String+0x5a4>)
          A5_State = A5_STATE_RAW;
 23e830e:	601a      	str	r2, [r3, #0]
          Output ("A5=RAW, SET");
 23e8310:	e610      	b.n	23e7f34 <_Z17Function_DoAction6String+0xec>
          Output ("A5=RAW, OPEN ERR");
 23e8312:	4837      	ldr	r0, [pc, #220]	; (23e83f0 <_Z17Function_DoAction6String+0x5a8>)
 23e8314:	e612      	b.n	23e7f3c <_Z17Function_DoAction6String+0xf4>
      Output("A5=RAW, SD NF"); 
 23e8316:	4837      	ldr	r0, [pc, #220]	; (23e83f4 <_Z17Function_DoAction6String+0x5ac>)
 23e8318:	e634      	b.n	23e7f84 <_Z17Function_DoAction6String+0x13c>
  else if (strcmp (s,"A5CLR") == 0) { // Clear A5 State Files
 23e831a:	4628      	mov	r0, r5
 23e831c:	4936      	ldr	r1, [pc, #216]	; (23e83f8 <_Z17Function_DoAction6String+0x5b0>)
 23e831e:	f7fa ffbd 	bl	23e329c <strcmp>
 23e8322:	4604      	mov	r4, r0
 23e8324:	2800      	cmp	r0, #0
 23e8326:	d173      	bne.n	23e8410 <_Z17Function_DoAction6String+0x5c8>
    Output("DoAction:A5CLR");
 23e8328:	4834      	ldr	r0, [pc, #208]	; (23e83fc <_Z17Function_DoAction6String+0x5b4>)
 23e832a:	f7fc f92d 	bl	23e4588 <_Z6OutputPKc>
    if (SD_exists) {
 23e832e:	4b0d      	ldr	r3, [pc, #52]	; (23e8364 <_Z17Function_DoAction6String+0x51c>)
 23e8330:	781b      	ldrb	r3, [r3, #0]
 23e8332:	b18b      	cbz	r3, 23e8358 <_Z17Function_DoAction6String+0x510>
      if (SD.exists(SD_A5_RAW_FILE)) {
 23e8334:	492a      	ldr	r1, [pc, #168]	; (23e83e0 <_Z17Function_DoAction6String+0x598>)
 23e8336:	480d      	ldr	r0, [pc, #52]	; (23e836c <_Z17Function_DoAction6String+0x524>)
 23e8338:	f7fb fe60 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e833c:	b150      	cbz	r0, 23e8354 <_Z17Function_DoAction6String+0x50c>
        if (SD.remove (SD_A4_RAW_FILE)) {
 23e833e:	4913      	ldr	r1, [pc, #76]	; (23e838c <_Z17Function_DoAction6String+0x544>)
 23e8340:	480a      	ldr	r0, [pc, #40]	; (23e836c <_Z17Function_DoAction6String+0x524>)
 23e8342:	f7fb fe76 	bl	23e4032 <_ZN8FsVolume6removeEPKc>
 23e8346:	b118      	cbz	r0, 23e8350 <_Z17Function_DoAction6String+0x508>
          A5_State = A5_STATE_NULL;
 23e8348:	4b27      	ldr	r3, [pc, #156]	; (23e83e8 <_Z17Function_DoAction6String+0x5a0>)
          Output ("A5=CLR, DEL RAW:OK");
 23e834a:	482d      	ldr	r0, [pc, #180]	; (23e8400 <_Z17Function_DoAction6String+0x5b8>)
          A5_State = A5_STATE_NULL;
 23e834c:	601c      	str	r4, [r3, #0]
          Output ("A5=CLR, DEL RAW:OK");
 23e834e:	e5f1      	b.n	23e7f34 <_Z17Function_DoAction6String+0xec>
          Output ("A5=CLR, DEL RAW:ERR");
 23e8350:	482c      	ldr	r0, [pc, #176]	; (23e8404 <_Z17Function_DoAction6String+0x5bc>)
 23e8352:	e5f3      	b.n	23e7f3c <_Z17Function_DoAction6String+0xf4>
        Output ("A5=CLR, DEL A5RAW:NF");
 23e8354:	482c      	ldr	r0, [pc, #176]	; (23e8408 <_Z17Function_DoAction6String+0x5c0>)
 23e8356:	e5ed      	b.n	23e7f34 <_Z17Function_DoAction6String+0xec>
      Output("A5=CLR, SD NF"); 
 23e8358:	482c      	ldr	r0, [pc, #176]	; (23e840c <_Z17Function_DoAction6String+0x5c4>)
 23e835a:	e613      	b.n	23e7f84 <_Z17Function_DoAction6String+0x13c>
 23e835c:	023fd71d 	.word	0x023fd71d
 23e8360:	023fd714 	.word	0x023fd714
 23e8364:	1006a770 	.word	0x1006a770
 23e8368:	1006a10a 	.word	0x1006a10a
 23e836c:	1006a2c4 	.word	0x1006a2c4
 23e8370:	023fd56e 	.word	0x023fd56e
 23e8374:	1006a0ff 	.word	0x1006a0ff
 23e8378:	023fd723 	.word	0x023fd723
 23e837c:	1006a190 	.word	0x1006a190
 23e8380:	40200000 	.word	0x40200000
 23e8384:	1006a0f4 	.word	0x1006a0f4
 23e8388:	023fd74e 	.word	0x023fd74e
 23e838c:	1006a115 	.word	0x1006a115
 23e8390:	023fd761 	.word	0x023fd761
 23e8394:	023fd738 	.word	0x023fd738
 23e8398:	023fd778 	.word	0x023fd778
 23e839c:	023fd784 	.word	0x023fd784
 23e83a0:	023fd795 	.word	0x023fd795
 23e83a4:	023fd7ac 	.word	0x023fd7ac
 23e83a8:	023fd7a3 	.word	0x023fd7a3
 23e83ac:	1006a24c 	.word	0x1006a24c
 23e83b0:	023fd7b2 	.word	0x023fd7b2
 23e83b4:	023fd7c6 	.word	0x023fd7c6
 23e83b8:	023fd7ef 	.word	0x023fd7ef
 23e83bc:	023fd7db 	.word	0x023fd7db
 23e83c0:	023fd803 	.word	0x023fd803
 23e83c4:	023fd818 	.word	0x023fd818
 23e83c8:	023fd82b 	.word	0x023fd82b
 23e83cc:	023fd83f 	.word	0x023fd83f
 23e83d0:	023fd851 	.word	0x023fd851
 23e83d4:	023fd864 	.word	0x023fd864
 23e83d8:	023fd87b 	.word	0x023fd87b
 23e83dc:	023fd872 	.word	0x023fd872
 23e83e0:	1006a11f 	.word	0x1006a11f
 23e83e4:	023fd881 	.word	0x023fd881
 23e83e8:	1006a250 	.word	0x1006a250
 23e83ec:	023fd898 	.word	0x023fd898
 23e83f0:	023fd8a4 	.word	0x023fd8a4
 23e83f4:	023fd8b5 	.word	0x023fd8b5
 23e83f8:	023fd8cc 	.word	0x023fd8cc
 23e83fc:	023fd8c3 	.word	0x023fd8c3
 23e8400:	023fd8d2 	.word	0x023fd8d2
 23e8404:	023fd8e5 	.word	0x023fd8e5
 23e8408:	023fd8f9 	.word	0x023fd8f9
 23e840c:	023fd90e 	.word	0x023fd90e
  else if (strcmp (s,"TXI5M") == 0) { // SetTransmit Interval to 5 Minutes
 23e8410:	4628      	mov	r0, r5
 23e8412:	4966      	ldr	r1, [pc, #408]	; (23e85ac <_Z17Function_DoAction6String+0x764>)
 23e8414:	f7fa ff42 	bl	23e329c <strcmp>
 23e8418:	4604      	mov	r4, r0
 23e841a:	2800      	cmp	r0, #0
 23e841c:	d13d      	bne.n	23e849a <_Z17Function_DoAction6String+0x652>
    Output("DoAction:TXI5M");
 23e841e:	4864      	ldr	r0, [pc, #400]	; (23e85b0 <_Z17Function_DoAction6String+0x768>)
 23e8420:	f7fc f8b2 	bl	23e4588 <_Z6OutputPKc>
    if (SD_exists) {
 23e8424:	4b63      	ldr	r3, [pc, #396]	; (23e85b4 <_Z17Function_DoAction6String+0x76c>)
 23e8426:	781b      	ldrb	r3, [r3, #0]
 23e8428:	2b00      	cmp	r3, #0
 23e842a:	d034      	beq.n	23e8496 <_Z17Function_DoAction6String+0x64e>
      if (SD.exists(SD_TX5M_FILE)) {
 23e842c:	4962      	ldr	r1, [pc, #392]	; (23e85b8 <_Z17Function_DoAction6String+0x770>)
 23e842e:	4863      	ldr	r0, [pc, #396]	; (23e85bc <_Z17Function_DoAction6String+0x774>)
 23e8430:	f7fb fde4 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e8434:	b170      	cbz	r0, 23e8454 <_Z17Function_DoAction6String+0x60c>
        Output ("TXI5M, ALREADY SET"); 
 23e8436:	4862      	ldr	r0, [pc, #392]	; (23e85c0 <_Z17Function_DoAction6String+0x778>)
 23e8438:	f7fc f8a6 	bl	23e4588 <_Z6OutputPKc>
        obs_tx_interval = 5;     
 23e843c:	2005      	movs	r0, #5
 23e843e:	2100      	movs	r1, #0
 23e8440:	4b60      	ldr	r3, [pc, #384]	; (23e85c4 <_Z17Function_DoAction6String+0x77c>)
 23e8442:	e9c3 0100 	strd	r0, r1, [r3]
      if (SD.exists(SD_TX10M_FILE)) {
 23e8446:	4960      	ldr	r1, [pc, #384]	; (23e85c8 <_Z17Function_DoAction6String+0x780>)
 23e8448:	485c      	ldr	r0, [pc, #368]	; (23e85bc <_Z17Function_DoAction6String+0x774>)
 23e844a:	f7fb fdd7 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e844e:	b9d0      	cbnz	r0, 23e8486 <_Z17Function_DoAction6String+0x63e>
    return(0);
 23e8450:	2400      	movs	r4, #0
 23e8452:	e50d      	b.n	23e7e70 <_Z17Function_DoAction6String+0x28>
        File fp = SD.open(SD_TX5M_FILE, FILE_WRITE);
 23e8454:	4668      	mov	r0, sp
 23e8456:	f244 2302 	movw	r3, #16898	; 0x4202
 23e845a:	4a57      	ldr	r2, [pc, #348]	; (23e85b8 <_Z17Function_DoAction6String+0x770>)
 23e845c:	4957      	ldr	r1, [pc, #348]	; (23e85bc <_Z17Function_DoAction6String+0x774>)
 23e845e:	f00c fb4d 	bl	23f4afc <_ZN8FsVolume4openEPKci>
 23e8462:	a804      	add	r0, sp, #16
 23e8464:	f7fb fe43 	bl	23e40ee <_ZNK10FsBaseFile6isOpenEv>
        if (fp) {
 23e8468:	b158      	cbz	r0, 23e8482 <_Z17Function_DoAction6String+0x63a>
          fp.close();
 23e846a:	a804      	add	r0, sp, #16
 23e846c:	f00c fa6d 	bl	23f494a <_ZN10FsBaseFile5closeEv>
          obs_tx_interval = 5;
 23e8470:	2005      	movs	r0, #5
 23e8472:	2100      	movs	r1, #0
 23e8474:	4b53      	ldr	r3, [pc, #332]	; (23e85c4 <_Z17Function_DoAction6String+0x77c>)
 23e8476:	e9c3 0100 	strd	r0, r1, [r3]
          Output ("TXI5M SET");
 23e847a:	4854      	ldr	r0, [pc, #336]	; (23e85cc <_Z17Function_DoAction6String+0x784>)
 23e847c:	f7fc f884 	bl	23e4588 <_Z6OutputPKc>
    virtual ~Print() {}
 23e8480:	e7e1      	b.n	23e8446 <_Z17Function_DoAction6String+0x5fe>
          Output ("TXI5M OPEN ERR");
 23e8482:	4853      	ldr	r0, [pc, #332]	; (23e85d0 <_Z17Function_DoAction6String+0x788>)
 23e8484:	e55a      	b.n	23e7f3c <_Z17Function_DoAction6String+0xf4>
        if (SD.remove (SD_TX10M_FILE)) {
 23e8486:	4950      	ldr	r1, [pc, #320]	; (23e85c8 <_Z17Function_DoAction6String+0x780>)
 23e8488:	484c      	ldr	r0, [pc, #304]	; (23e85bc <_Z17Function_DoAction6String+0x774>)
 23e848a:	f7fb fdd2 	bl	23e4032 <_ZN8FsVolume6removeEPKc>
 23e848e:	2800      	cmp	r0, #0
 23e8490:	d0de      	beq.n	23e8450 <_Z17Function_DoAction6String+0x608>
          Output ("TXI5M: Removed TX10M File");
 23e8492:	4850      	ldr	r0, [pc, #320]	; (23e85d4 <_Z17Function_DoAction6String+0x78c>)
 23e8494:	e54e      	b.n	23e7f34 <_Z17Function_DoAction6String+0xec>
      Output("TXI5M, SD NF"); 
 23e8496:	4850      	ldr	r0, [pc, #320]	; (23e85d8 <_Z17Function_DoAction6String+0x790>)
 23e8498:	e574      	b.n	23e7f84 <_Z17Function_DoAction6String+0x13c>
  else if (strcmp (s,"TXI10M") == 0) { // SetTransmit Interval to 10 Minutes
 23e849a:	4628      	mov	r0, r5
 23e849c:	494f      	ldr	r1, [pc, #316]	; (23e85dc <_Z17Function_DoAction6String+0x794>)
 23e849e:	f7fa fefd 	bl	23e329c <strcmp>
 23e84a2:	4604      	mov	r4, r0
 23e84a4:	2800      	cmp	r0, #0
 23e84a6:	d13c      	bne.n	23e8522 <_Z17Function_DoAction6String+0x6da>
    Output("DoAction:TXI10M");
 23e84a8:	484d      	ldr	r0, [pc, #308]	; (23e85e0 <_Z17Function_DoAction6String+0x798>)
 23e84aa:	f7fc f86d 	bl	23e4588 <_Z6OutputPKc>
    if (SD_exists) {
 23e84ae:	4b41      	ldr	r3, [pc, #260]	; (23e85b4 <_Z17Function_DoAction6String+0x76c>)
 23e84b0:	781b      	ldrb	r3, [r3, #0]
 23e84b2:	2b00      	cmp	r3, #0
 23e84b4:	d033      	beq.n	23e851e <_Z17Function_DoAction6String+0x6d6>
      if (SD.exists(SD_TX10M_FILE)) {
 23e84b6:	4944      	ldr	r1, [pc, #272]	; (23e85c8 <_Z17Function_DoAction6String+0x780>)
 23e84b8:	4840      	ldr	r0, [pc, #256]	; (23e85bc <_Z17Function_DoAction6String+0x774>)
 23e84ba:	f7fb fd9f 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e84be:	b1a8      	cbz	r0, 23e84ec <_Z17Function_DoAction6String+0x6a4>
        Output ("TXI10M, ALREADY SET"); 
 23e84c0:	4848      	ldr	r0, [pc, #288]	; (23e85e4 <_Z17Function_DoAction6String+0x79c>)
 23e84c2:	f7fc f861 	bl	23e4588 <_Z6OutputPKc>
        obs_tx_interval = 10;     
 23e84c6:	200a      	movs	r0, #10
 23e84c8:	2100      	movs	r1, #0
 23e84ca:	4b3e      	ldr	r3, [pc, #248]	; (23e85c4 <_Z17Function_DoAction6String+0x77c>)
 23e84cc:	e9c3 0100 	strd	r0, r1, [r3]
      if (SD.exists(SD_TX5M_FILE)) {
 23e84d0:	4939      	ldr	r1, [pc, #228]	; (23e85b8 <_Z17Function_DoAction6String+0x770>)
 23e84d2:	483a      	ldr	r0, [pc, #232]	; (23e85bc <_Z17Function_DoAction6String+0x774>)
 23e84d4:	f7fb fd92 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e84d8:	2800      	cmp	r0, #0
 23e84da:	d0b9      	beq.n	23e8450 <_Z17Function_DoAction6String+0x608>
        if (SD.remove (SD_TX5M_FILE)) {
 23e84dc:	4936      	ldr	r1, [pc, #216]	; (23e85b8 <_Z17Function_DoAction6String+0x770>)
 23e84de:	4837      	ldr	r0, [pc, #220]	; (23e85bc <_Z17Function_DoAction6String+0x774>)
 23e84e0:	f7fb fda7 	bl	23e4032 <_ZN8FsVolume6removeEPKc>
 23e84e4:	2800      	cmp	r0, #0
 23e84e6:	d0b3      	beq.n	23e8450 <_Z17Function_DoAction6String+0x608>
          Output ("TXI5M: Removed TX5M File");
 23e84e8:	483f      	ldr	r0, [pc, #252]	; (23e85e8 <_Z17Function_DoAction6String+0x7a0>)
 23e84ea:	e523      	b.n	23e7f34 <_Z17Function_DoAction6String+0xec>
        File fp = SD.open(SD_TX10M_FILE, FILE_WRITE);
 23e84ec:	4668      	mov	r0, sp
 23e84ee:	f244 2302 	movw	r3, #16898	; 0x4202
 23e84f2:	4a35      	ldr	r2, [pc, #212]	; (23e85c8 <_Z17Function_DoAction6String+0x780>)
 23e84f4:	4931      	ldr	r1, [pc, #196]	; (23e85bc <_Z17Function_DoAction6String+0x774>)
 23e84f6:	f00c fb01 	bl	23f4afc <_ZN8FsVolume4openEPKci>
 23e84fa:	a804      	add	r0, sp, #16
 23e84fc:	f7fb fdf7 	bl	23e40ee <_ZNK10FsBaseFile6isOpenEv>
        if (fp) {
 23e8500:	b158      	cbz	r0, 23e851a <_Z17Function_DoAction6String+0x6d2>
          fp.close();
 23e8502:	a804      	add	r0, sp, #16
 23e8504:	f00c fa21 	bl	23f494a <_ZN10FsBaseFile5closeEv>
          obs_tx_interval = 10;
 23e8508:	200a      	movs	r0, #10
 23e850a:	2100      	movs	r1, #0
 23e850c:	4b2d      	ldr	r3, [pc, #180]	; (23e85c4 <_Z17Function_DoAction6String+0x77c>)
 23e850e:	e9c3 0100 	strd	r0, r1, [r3]
          Output ("TXI10M SET");
 23e8512:	4836      	ldr	r0, [pc, #216]	; (23e85ec <_Z17Function_DoAction6String+0x7a4>)
 23e8514:	f7fc f838 	bl	23e4588 <_Z6OutputPKc>
 23e8518:	e7da      	b.n	23e84d0 <_Z17Function_DoAction6String+0x688>
          Output ("TXI10M OPEN ERR");
 23e851a:	4835      	ldr	r0, [pc, #212]	; (23e85f0 <_Z17Function_DoAction6String+0x7a8>)
 23e851c:	e50e      	b.n	23e7f3c <_Z17Function_DoAction6String+0xf4>
      Output("TXI10M, SD NF"); 
 23e851e:	4835      	ldr	r0, [pc, #212]	; (23e85f4 <_Z17Function_DoAction6String+0x7ac>)
 23e8520:	e530      	b.n	23e7f84 <_Z17Function_DoAction6String+0x13c>
  else if (strcmp (s,"TXI15M") == 0) { // SetTransmit Interval to 15 Minutes
 23e8522:	4628      	mov	r0, r5
 23e8524:	4934      	ldr	r1, [pc, #208]	; (23e85f8 <_Z17Function_DoAction6String+0x7b0>)
 23e8526:	f7fa feb9 	bl	23e329c <strcmp>
 23e852a:	4604      	mov	r4, r0
 23e852c:	2800      	cmp	r0, #0
 23e852e:	d13b      	bne.n	23e85a8 <_Z17Function_DoAction6String+0x760>
    Output("DoAction:TXI15M");
 23e8530:	4832      	ldr	r0, [pc, #200]	; (23e85fc <_Z17Function_DoAction6String+0x7b4>)
 23e8532:	f7fc f829 	bl	23e4588 <_Z6OutputPKc>
    if (SD_exists) {
 23e8536:	4b1f      	ldr	r3, [pc, #124]	; (23e85b4 <_Z17Function_DoAction6String+0x76c>)
 23e8538:	781b      	ldrb	r3, [r3, #0]
 23e853a:	2b00      	cmp	r3, #0
 23e853c:	d032      	beq.n	23e85a4 <_Z17Function_DoAction6String+0x75c>
      if (!SD.exists(SD_TX5M_FILE) && !SD.exists(SD_TX10M_FILE)) {
 23e853e:	491e      	ldr	r1, [pc, #120]	; (23e85b8 <_Z17Function_DoAction6String+0x770>)
 23e8540:	481e      	ldr	r0, [pc, #120]	; (23e85bc <_Z17Function_DoAction6String+0x774>)
 23e8542:	f7fb fd5b 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e8546:	4d1f      	ldr	r5, [pc, #124]	; (23e85c4 <_Z17Function_DoAction6String+0x77c>)
 23e8548:	b960      	cbnz	r0, 23e8564 <_Z17Function_DoAction6String+0x71c>
 23e854a:	491f      	ldr	r1, [pc, #124]	; (23e85c8 <_Z17Function_DoAction6String+0x780>)
 23e854c:	481b      	ldr	r0, [pc, #108]	; (23e85bc <_Z17Function_DoAction6String+0x774>)
 23e854e:	f7fb fd55 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e8552:	b938      	cbnz	r0, 23e8564 <_Z17Function_DoAction6String+0x71c>
        Output ("TXI15M, ALREADY SET"); 
 23e8554:	482a      	ldr	r0, [pc, #168]	; (23e8600 <_Z17Function_DoAction6String+0x7b8>)
 23e8556:	f7fc f817 	bl	23e4588 <_Z6OutputPKc>
        obs_tx_interval = 15;     
 23e855a:	220f      	movs	r2, #15
 23e855c:	2300      	movs	r3, #0
 23e855e:	e9c5 2300 	strd	r2, r3, [r5]
 23e8562:	e485      	b.n	23e7e70 <_Z17Function_DoAction6String+0x28>
        if (SD.exists(SD_TX5M_FILE)) {
 23e8564:	4914      	ldr	r1, [pc, #80]	; (23e85b8 <_Z17Function_DoAction6String+0x770>)
 23e8566:	4815      	ldr	r0, [pc, #84]	; (23e85bc <_Z17Function_DoAction6String+0x774>)
 23e8568:	f7fb fd48 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e856c:	b138      	cbz	r0, 23e857e <_Z17Function_DoAction6String+0x736>
          if (SD.remove (SD_TX5M_FILE)) {
 23e856e:	4912      	ldr	r1, [pc, #72]	; (23e85b8 <_Z17Function_DoAction6String+0x770>)
 23e8570:	4812      	ldr	r0, [pc, #72]	; (23e85bc <_Z17Function_DoAction6String+0x774>)
 23e8572:	f7fb fd5e 	bl	23e4032 <_ZN8FsVolume6removeEPKc>
 23e8576:	b110      	cbz	r0, 23e857e <_Z17Function_DoAction6String+0x736>
            Output ("TXI15M: Removed TX5M File");
 23e8578:	4822      	ldr	r0, [pc, #136]	; (23e8604 <_Z17Function_DoAction6String+0x7bc>)
 23e857a:	f7fc f805 	bl	23e4588 <_Z6OutputPKc>
        if (SD.exists(SD_TX10M_FILE)) {
 23e857e:	4912      	ldr	r1, [pc, #72]	; (23e85c8 <_Z17Function_DoAction6String+0x780>)
 23e8580:	480e      	ldr	r0, [pc, #56]	; (23e85bc <_Z17Function_DoAction6String+0x774>)
 23e8582:	f7fb fd3b 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e8586:	b138      	cbz	r0, 23e8598 <_Z17Function_DoAction6String+0x750>
          if (SD.remove (SD_TX10M_FILE)) {
 23e8588:	490f      	ldr	r1, [pc, #60]	; (23e85c8 <_Z17Function_DoAction6String+0x780>)
 23e858a:	480c      	ldr	r0, [pc, #48]	; (23e85bc <_Z17Function_DoAction6String+0x774>)
 23e858c:	f7fb fd51 	bl	23e4032 <_ZN8FsVolume6removeEPKc>
 23e8590:	b110      	cbz	r0, 23e8598 <_Z17Function_DoAction6String+0x750>
            Output ("TXI15M: Removed TX10M File");
 23e8592:	481d      	ldr	r0, [pc, #116]	; (23e8608 <_Z17Function_DoAction6String+0x7c0>)
 23e8594:	f7fb fff8 	bl	23e4588 <_Z6OutputPKc>
        obs_tx_interval = 15;
 23e8598:	220f      	movs	r2, #15
 23e859a:	2300      	movs	r3, #0
        Output ("TXI15M SET"); 
 23e859c:	481b      	ldr	r0, [pc, #108]	; (23e860c <_Z17Function_DoAction6String+0x7c4>)
        obs_tx_interval = 15;
 23e859e:	e9c5 2300 	strd	r2, r3, [r5]
        Output ("TXI15M SET"); 
 23e85a2:	e4c7      	b.n	23e7f34 <_Z17Function_DoAction6String+0xec>
      Output("TXI15M, SD NF"); 
 23e85a4:	481a      	ldr	r0, [pc, #104]	; (23e8610 <_Z17Function_DoAction6String+0x7c8>)
 23e85a6:	e4ed      	b.n	23e7f84 <_Z17Function_DoAction6String+0x13c>
    Output("DoAction:UKN"); 
 23e85a8:	481a      	ldr	r0, [pc, #104]	; (23e8614 <_Z17Function_DoAction6String+0x7cc>)
 23e85aa:	e4eb      	b.n	23e7f84 <_Z17Function_DoAction6String+0x13c>
 23e85ac:	023fd925 	.word	0x023fd925
 23e85b0:	023fd91c 	.word	0x023fd91c
 23e85b4:	1006a770 	.word	0x1006a770
 23e85b8:	1006a13d 	.word	0x1006a13d
 23e85bc:	1006a2c4 	.word	0x1006a2c4
 23e85c0:	023fd92b 	.word	0x023fd92b
 23e85c4:	1006a198 	.word	0x1006a198
 23e85c8:	1006a132 	.word	0x1006a132
 23e85cc:	023fd93e 	.word	0x023fd93e
 23e85d0:	023fd948 	.word	0x023fd948
 23e85d4:	023fd957 	.word	0x023fd957
 23e85d8:	023fd971 	.word	0x023fd971
 23e85dc:	023fd987 	.word	0x023fd987
 23e85e0:	023fd97e 	.word	0x023fd97e
 23e85e4:	023fd98e 	.word	0x023fd98e
 23e85e8:	023fd9bd 	.word	0x023fd9bd
 23e85ec:	023fd9a2 	.word	0x023fd9a2
 23e85f0:	023fd9ad 	.word	0x023fd9ad
 23e85f4:	023fd9d6 	.word	0x023fd9d6
 23e85f8:	023fd9ed 	.word	0x023fd9ed
 23e85fc:	023fd9e4 	.word	0x023fd9e4
 23e8600:	023fd9f4 	.word	0x023fd9f4
 23e8604:	023fda08 	.word	0x023fda08
 23e8608:	023fda22 	.word	0x023fda22
 23e860c:	023fda3d 	.word	0x023fda3d
 23e8610:	023fda48 	.word	0x023fda48
 23e8614:	023fda56 	.word	0x023fda56

023e8618 <_Z20WiFiPrintCredentialsv>:
void WiFiPrintCredentials() {
 23e8618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     * Retrieves a 6-octet MAC address
     * @param mac
     * @return
     */
    uint8_t* macAddress(uint8_t *mac) {
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
 23e861c:	484c      	ldr	r0, [pc, #304]	; (23e8750 <_Z20WiFiPrintCredentialsv+0x138>)
 23e861e:	b0ca      	sub	sp, #296	; 0x128
 23e8620:	f7fb fc4c 	bl	23e3ebc <_ZN5spark9WiFiClass11wifi_configEv>
  sprintf (msgbuf, "WIFI MAC[%02x:%02x:%02x:%02x:%02x:%02x]", mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 23e8624:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
 23e8628:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 23e862c:	f890 2057 	ldrb.w	r2, [r0, #87]	; 0x57
 23e8630:	9103      	str	r1, [sp, #12]
 23e8632:	f890 105b 	ldrb.w	r1, [r0, #91]	; 0x5b
 23e8636:	ac04      	add	r4, sp, #16
 23e8638:	9102      	str	r1, [sp, #8]
 23e863a:	f890 105a 	ldrb.w	r1, [r0, #90]	; 0x5a
  Output(msgbuf);
 23e863e:	4626      	mov	r6, r4
  sprintf (msgbuf, "WIFI MAC[%02x:%02x:%02x:%02x:%02x:%02x]", mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 23e8640:	9101      	str	r1, [sp, #4]
 23e8642:	f890 1059 	ldrb.w	r1, [r0, #89]	; 0x59
 23e8646:	4843      	ldr	r0, [pc, #268]	; (23e8754 <_Z20WiFiPrintCredentialsv+0x13c>)
 23e8648:	9100      	str	r1, [sp, #0]
 23e864a:	4943      	ldr	r1, [pc, #268]	; (23e8758 <_Z20WiFiPrintCredentialsv+0x140>)
 23e864c:	f00e fda4 	bl	23f7198 <sprintf>
  Output(msgbuf);
 23e8650:	4840      	ldr	r0, [pc, #256]	; (23e8754 <_Z20WiFiPrintCredentialsv+0x13c>)
 23e8652:	f7fb ff99 	bl	23e4588 <_Z6OutputPKc>
 23e8656:	2505      	movs	r5, #5
#ifdef __cplusplus

   WiFiAccessPoint()
   {
       memset(this, 0, sizeof(*this));
       size = sizeof(*this);
 23e8658:	2738      	movs	r7, #56	; 0x38
       memset(this, 0, sizeof(*this));
 23e865a:	1d30      	adds	r0, r6, #4
 23e865c:	2234      	movs	r2, #52	; 0x34
 23e865e:	2100      	movs	r1, #0
 23e8660:	f013 fec1 	bl	23fc3e6 <memset>
  WiFiAccessPoint ap[5];
 23e8664:	3d01      	subs	r5, #1
       size = sizeof(*this);
 23e8666:	f846 7b38 	str.w	r7, [r6], #56
 23e866a:	d1f6      	bne.n	23e865a <_Z20WiFiPrintCredentialsv+0x42>
  WiFi.getCredentials(ap, 5);
 23e866c:	2205      	movs	r2, #5
 23e866e:	4621      	mov	r1, r4
 23e8670:	4837      	ldr	r0, [pc, #220]	; (23e8750 <_Z20WiFiPrintCredentialsv+0x138>)
 23e8672:	f010 fefb 	bl	23f946c <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>
  int found = 0;
 23e8676:	462e      	mov	r6, r5
      sprintf (msgbuf, "IDX[%d]", i);
 23e8678:	f8df 8110 	ldr.w	r8, [pc, #272]	; 23e878c <_Z20WiFiPrintCredentialsv+0x174>
 23e867c:	4f35      	ldr	r7, [pc, #212]	; (23e8754 <_Z20WiFiPrintCredentialsv+0x13c>)
      sprintf (msgbuf, " SSID[%s]", ap[i].ssid);
 23e867e:	f8df 9110 	ldr.w	r9, [pc, #272]	; 23e8790 <_Z20WiFiPrintCredentialsv+0x178>
    if (strlen(ap[i].ssid) != 0) {
 23e8682:	7923      	ldrb	r3, [r4, #4]
 23e8684:	f104 0a04 	add.w	sl, r4, #4
 23e8688:	2b00      	cmp	r3, #0
 23e868a:	d049      	beq.n	23e8720 <_Z20WiFiPrintCredentialsv+0x108>
      found++;
 23e868c:	3601      	adds	r6, #1
      if (found == 1) {
 23e868e:	2e01      	cmp	r6, #1
 23e8690:	d102      	bne.n	23e8698 <_Z20WiFiPrintCredentialsv+0x80>
        Output("WIFI Creds:");
 23e8692:	4832      	ldr	r0, [pc, #200]	; (23e875c <_Z20WiFiPrintCredentialsv+0x144>)
 23e8694:	f7fb ff78 	bl	23e4588 <_Z6OutputPKc>
      sprintf (msgbuf, "IDX[%d]", i);
 23e8698:	462a      	mov	r2, r5
 23e869a:	4641      	mov	r1, r8
 23e869c:	4638      	mov	r0, r7
 23e869e:	f00e fd7b 	bl	23f7198 <sprintf>
      Output(msgbuf);
 23e86a2:	4638      	mov	r0, r7
 23e86a4:	f7fb ff70 	bl	23e4588 <_Z6OutputPKc>
      sprintf (msgbuf, " SSID[%s]", ap[i].ssid);
 23e86a8:	4652      	mov	r2, sl
 23e86aa:	4649      	mov	r1, r9
 23e86ac:	4638      	mov	r0, r7
 23e86ae:	f00e fd73 	bl	23f7198 <sprintf>
      Output(msgbuf);
 23e86b2:	4638      	mov	r0, r7
 23e86b4:	f7fb ff68 	bl	23e4588 <_Z6OutputPKc>
      switch (ap[i].security) {
 23e86b8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 23e86bc:	2b05      	cmp	r3, #5
 23e86be:	d845      	bhi.n	23e874c <_Z20WiFiPrintCredentialsv+0x134>
 23e86c0:	e8df f003 	tbb	[pc, r3]
 23e86c4:	3e3c3a03 	.word	0x3e3c3a03
 23e86c8:	4240      	.short	0x4240
          Output(" Type:Unsecured");
 23e86ca:	4825      	ldr	r0, [pc, #148]	; (23e8760 <_Z20WiFiPrintCredentialsv+0x148>)
          Output(" Type:Unknown");
 23e86cc:	f7fb ff5c 	bl	23e4588 <_Z6OutputPKc>
      sprintf (msgbuf, " SigStr[%d]", ap[i].rssi);
 23e86d0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 23e86d2:	4924      	ldr	r1, [pc, #144]	; (23e8764 <_Z20WiFiPrintCredentialsv+0x14c>)
 23e86d4:	4638      	mov	r0, r7
 23e86d6:	f00e fd5f 	bl	23f7198 <sprintf>
      Output(msgbuf);
 23e86da:	4638      	mov	r0, r7
 23e86dc:	f7fb ff54 	bl	23e4588 <_Z6OutputPKc>
      sprintf (msgbuf, " Channel[%d]", ap[i].channel);
 23e86e0:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 23e86e4:	4920      	ldr	r1, [pc, #128]	; (23e8768 <_Z20WiFiPrintCredentialsv+0x150>)
 23e86e6:	4638      	mov	r0, r7
 23e86e8:	f00e fd56 	bl	23f7198 <sprintf>
      Output(msgbuf);
 23e86ec:	4638      	mov	r0, r7
 23e86ee:	f7fb ff4b 	bl	23e4588 <_Z6OutputPKc>
      sprintf (msgbuf, " BMAC[%02x:%02x:%02x:%02x:%02x:%02x]", 
 23e86f2:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 23e86f6:	4638      	mov	r0, r7
 23e86f8:	9303      	str	r3, [sp, #12]
 23e86fa:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 23e86fe:	491b      	ldr	r1, [pc, #108]	; (23e876c <_Z20WiFiPrintCredentialsv+0x154>)
 23e8700:	9302      	str	r3, [sp, #8]
 23e8702:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 23e8706:	9301      	str	r3, [sp, #4]
 23e8708:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 23e870c:	9300      	str	r3, [sp, #0]
 23e870e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 23e8712:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 23e8716:	f00e fd3f 	bl	23f7198 <sprintf>
      Output(msgbuf);
 23e871a:	4638      	mov	r0, r7
 23e871c:	f7fb ff34 	bl	23e4588 <_Z6OutputPKc>
  for (int i = 0; i < 5; i++) {
 23e8720:	3501      	adds	r5, #1
 23e8722:	2d05      	cmp	r5, #5
 23e8724:	f104 0438 	add.w	r4, r4, #56	; 0x38
 23e8728:	d1ab      	bne.n	23e8682 <_Z20WiFiPrintCredentialsv+0x6a>
  if (!found) {
 23e872a:	b916      	cbnz	r6, 23e8732 <_Z20WiFiPrintCredentialsv+0x11a>
    Output("WIFI Creds:NF");
 23e872c:	4810      	ldr	r0, [pc, #64]	; (23e8770 <_Z20WiFiPrintCredentialsv+0x158>)
 23e872e:	f7fb ff2b 	bl	23e4588 <_Z6OutputPKc>
}
 23e8732:	b04a      	add	sp, #296	; 0x128
 23e8734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          Output(" Type:WEP");
 23e8738:	480e      	ldr	r0, [pc, #56]	; (23e8774 <_Z20WiFiPrintCredentialsv+0x15c>)
 23e873a:	e7c7      	b.n	23e86cc <_Z20WiFiPrintCredentialsv+0xb4>
          Output(" Type:WPA");
 23e873c:	480e      	ldr	r0, [pc, #56]	; (23e8778 <_Z20WiFiPrintCredentialsv+0x160>)
 23e873e:	e7c5      	b.n	23e86cc <_Z20WiFiPrintCredentialsv+0xb4>
          Output(" Type:WPA2");
 23e8740:	480e      	ldr	r0, [pc, #56]	; (23e877c <_Z20WiFiPrintCredentialsv+0x164>)
 23e8742:	e7c3      	b.n	23e86cc <_Z20WiFiPrintCredentialsv+0xb4>
          Output(" Type:WPA Ent");
 23e8744:	480e      	ldr	r0, [pc, #56]	; (23e8780 <_Z20WiFiPrintCredentialsv+0x168>)
 23e8746:	e7c1      	b.n	23e86cc <_Z20WiFiPrintCredentialsv+0xb4>
          Output(" Type:WPA2 Ent");
 23e8748:	480e      	ldr	r0, [pc, #56]	; (23e8784 <_Z20WiFiPrintCredentialsv+0x16c>)
 23e874a:	e7bf      	b.n	23e86cc <_Z20WiFiPrintCredentialsv+0xb4>
          Output(" Type:Unknown");
 23e874c:	480e      	ldr	r0, [pc, #56]	; (23e8788 <_Z20WiFiPrintCredentialsv+0x170>)
 23e874e:	e7bd      	b.n	23e86cc <_Z20WiFiPrintCredentialsv+0xb4>
 23e8750:	1007af98 	.word	0x1007af98
 23e8754:	1006f118 	.word	0x1006f118
 23e8758:	023fda63 	.word	0x023fda63
 23e875c:	023fda8b 	.word	0x023fda8b
 23e8760:	023fdaa9 	.word	0x023fdaa9
 23e8764:	023fdb03 	.word	0x023fdb03
 23e8768:	023fdb0f 	.word	0x023fdb0f
 23e876c:	023fdb1c 	.word	0x023fdb1c
 23e8770:	023fdb41 	.word	0x023fdb41
 23e8774:	023fdab9 	.word	0x023fdab9
 23e8778:	023fdac3 	.word	0x023fdac3
 23e877c:	023fdacd 	.word	0x023fdacd
 23e8780:	023fdad8 	.word	0x023fdad8
 23e8784:	023fdae6 	.word	0x023fdae6
 23e8788:	023fdaf5 	.word	0x023fdaf5
 23e878c:	023fda97 	.word	0x023fda97
 23e8790:	023fda9f 	.word	0x023fda9f

023e8794 <_Z14TXI_Initializev>:
/* 
 *=======================================================================================================================
 * TXI_Initialize() - Transmit Interval 5, 10 or 15 minutes
 *=======================================================================================================================
 */
void TXI_Initialize() {
 23e8794:	b510      	push	{r4, lr}
  Output ("TXI:INIT");
 23e8796:	4822      	ldr	r0, [pc, #136]	; (23e8820 <_Z14TXI_Initializev+0x8c>)
 23e8798:	f7fb fef6 	bl	23e4588 <_Z6OutputPKc>
  if (SD_exists) {
 23e879c:	4b21      	ldr	r3, [pc, #132]	; (23e8824 <_Z14TXI_Initializev+0x90>)
 23e879e:	4c22      	ldr	r4, [pc, #136]	; (23e8828 <_Z14TXI_Initializev+0x94>)
 23e87a0:	781b      	ldrb	r3, [r3, #0]
 23e87a2:	b1c3      	cbz	r3, 23e87d6 <_Z14TXI_Initializev+0x42>
    if (SD.exists(SD_TX5M_FILE)) {
 23e87a4:	4921      	ldr	r1, [pc, #132]	; (23e882c <_Z14TXI_Initializev+0x98>)
 23e87a6:	4822      	ldr	r0, [pc, #136]	; (23e8830 <_Z14TXI_Initializev+0x9c>)
 23e87a8:	f7fb fc28 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e87ac:	b1e8      	cbz	r0, 23e87ea <_Z14TXI_Initializev+0x56>
      Output ("TXI5M Found");
 23e87ae:	4821      	ldr	r0, [pc, #132]	; (23e8834 <_Z14TXI_Initializev+0xa0>)
 23e87b0:	f7fb feea 	bl	23e4588 <_Z6OutputPKc>
      obs_tx_interval = 5;
 23e87b4:	2205      	movs	r2, #5
 23e87b6:	2300      	movs	r3, #0
      if (SD.exists(SD_TX10M_FILE)) {
 23e87b8:	491f      	ldr	r1, [pc, #124]	; (23e8838 <_Z14TXI_Initializev+0xa4>)
 23e87ba:	481d      	ldr	r0, [pc, #116]	; (23e8830 <_Z14TXI_Initializev+0x9c>)
      obs_tx_interval = 5;
 23e87bc:	e9c4 2300 	strd	r2, r3, [r4]
      if (SD.exists(SD_TX10M_FILE)) {
 23e87c0:	f7fb fc1c 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e87c4:	b138      	cbz	r0, 23e87d6 <_Z14TXI_Initializev+0x42>
        if (SD.remove (SD_TX10M_FILE)) {
 23e87c6:	491c      	ldr	r1, [pc, #112]	; (23e8838 <_Z14TXI_Initializev+0xa4>)
 23e87c8:	4819      	ldr	r0, [pc, #100]	; (23e8830 <_Z14TXI_Initializev+0x9c>)
 23e87ca:	f7fb fc32 	bl	23e4032 <_ZN8FsVolume6removeEPKc>
 23e87ce:	b110      	cbz	r0, 23e87d6 <_Z14TXI_Initializev+0x42>
          Output ("TXI:RM 10M");
 23e87d0:	481a      	ldr	r0, [pc, #104]	; (23e883c <_Z14TXI_Initializev+0xa8>)
    else if (SD.exists(SD_TX10M_FILE)) {
      Output ("TXI10M Found");
      obs_tx_interval = 10;
      if (SD.exists(SD_TX5M_FILE)) {
        if (SD.remove (SD_TX5M_FILE)) {
          Output ("TXI:RM 5M");
 23e87d2:	f7fb fed9 	bl	23e4588 <_Z6OutputPKc>
        }
      }
    }
  }
  sprintf (msgbuf, "TXI=%dM", (int) obs_tx_interval);
 23e87d6:	6822      	ldr	r2, [r4, #0]
 23e87d8:	4919      	ldr	r1, [pc, #100]	; (23e8840 <_Z14TXI_Initializev+0xac>)
 23e87da:	481a      	ldr	r0, [pc, #104]	; (23e8844 <_Z14TXI_Initializev+0xb0>)
 23e87dc:	f00e fcdc 	bl	23f7198 <sprintf>
  Output(msgbuf);  
 23e87e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Output(msgbuf);  
 23e87e4:	4817      	ldr	r0, [pc, #92]	; (23e8844 <_Z14TXI_Initializev+0xb0>)
 23e87e6:	f7fb becf 	b.w	23e4588 <_Z6OutputPKc>
    else if (SD.exists(SD_TX10M_FILE)) {
 23e87ea:	4913      	ldr	r1, [pc, #76]	; (23e8838 <_Z14TXI_Initializev+0xa4>)
 23e87ec:	4810      	ldr	r0, [pc, #64]	; (23e8830 <_Z14TXI_Initializev+0x9c>)
 23e87ee:	f7fb fc05 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e87f2:	2800      	cmp	r0, #0
 23e87f4:	d0ef      	beq.n	23e87d6 <_Z14TXI_Initializev+0x42>
      Output ("TXI10M Found");
 23e87f6:	4814      	ldr	r0, [pc, #80]	; (23e8848 <_Z14TXI_Initializev+0xb4>)
 23e87f8:	f7fb fec6 	bl	23e4588 <_Z6OutputPKc>
      obs_tx_interval = 10;
 23e87fc:	220a      	movs	r2, #10
 23e87fe:	2300      	movs	r3, #0
      if (SD.exists(SD_TX5M_FILE)) {
 23e8800:	490a      	ldr	r1, [pc, #40]	; (23e882c <_Z14TXI_Initializev+0x98>)
 23e8802:	480b      	ldr	r0, [pc, #44]	; (23e8830 <_Z14TXI_Initializev+0x9c>)
      obs_tx_interval = 10;
 23e8804:	e9c4 2300 	strd	r2, r3, [r4]
      if (SD.exists(SD_TX5M_FILE)) {
 23e8808:	f7fb fbf8 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23e880c:	2800      	cmp	r0, #0
 23e880e:	d0e2      	beq.n	23e87d6 <_Z14TXI_Initializev+0x42>
        if (SD.remove (SD_TX5M_FILE)) {
 23e8810:	4906      	ldr	r1, [pc, #24]	; (23e882c <_Z14TXI_Initializev+0x98>)
 23e8812:	4807      	ldr	r0, [pc, #28]	; (23e8830 <_Z14TXI_Initializev+0x9c>)
 23e8814:	f7fb fc0d 	bl	23e4032 <_ZN8FsVolume6removeEPKc>
 23e8818:	2800      	cmp	r0, #0
 23e881a:	d0dc      	beq.n	23e87d6 <_Z14TXI_Initializev+0x42>
          Output ("TXI:RM 5M");
 23e881c:	480b      	ldr	r0, [pc, #44]	; (23e884c <_Z14TXI_Initializev+0xb8>)
 23e881e:	e7d8      	b.n	23e87d2 <_Z14TXI_Initializev+0x3e>
 23e8820:	023fdb4f 	.word	0x023fdb4f
 23e8824:	1006a770 	.word	0x1006a770
 23e8828:	1006a198 	.word	0x1006a198
 23e882c:	1006a13d 	.word	0x1006a13d
 23e8830:	1006a2c4 	.word	0x1006a2c4
 23e8834:	023fdb58 	.word	0x023fdb58
 23e8838:	1006a132 	.word	0x1006a132
 23e883c:	023fdb64 	.word	0x023fdb64
 23e8840:	023fdb86 	.word	0x023fdb86
 23e8844:	1006f118 	.word	0x1006f118
 23e8848:	023fdb6f 	.word	0x023fdb6f
 23e884c:	023fdb7c 	.word	0x023fdb7c

023e8850 <_Z9HeartBeatv>:
/*
 * ======================================================================================================================
 * HeartBeat() - Burns 250 ms and part of our loop delay timing
 * ======================================================================================================================
 */
void HeartBeat() {
 23e8850:	b510      	push	{r4, lr}
#if (PLATFORM_ID == PLATFORM_MSOM)
  uint64_t MsFromNow = System.millis() + 250;
 23e8852:	f7fb fb44 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23e8856:	4604      	mov	r4, r0
  Watchdog.refresh();
 23e8858:	f7fb fb94 	bl	23e3f84 <_ZN8particle13WatchdogClass11getInstanceEv>
 23e885c:	f010 fd2d 	bl	23f92ba <_ZN8particle13WatchdogClass7refreshEv>
  delay((int64_t)(MsFromNow - System.millis()));
 23e8860:	f7fb fb3d 	bl	23e3ede <_ZN11SystemClass6millisEv>
  uint64_t MsFromNow = System.millis() + 250;
 23e8864:	34fa      	adds	r4, #250	; 0xfa
  delay((int64_t)(MsFromNow - System.millis()));
 23e8866:	1a20      	subs	r0, r4, r0
#else
  digitalWrite(HEARTBEAT_PIN, HIGH);
  delay(250);
  digitalWrite(HEARTBEAT_PIN, LOW);
#endif
}
 23e8868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay((int64_t)(MsFromNow - System.millis()));
 23e886c:	f00e bd74 	b.w	23f7358 <delay>

023e8870 <_Z17Serial_Initializev>:
/*
 * ======================================================================================================================
 * Serial_Initialize() -
 * ======================================================================================================================
 */
void Serial_Initialize() {
 23e8870:	b510      	push	{r4, lr}
  // serial console enable pin
  pinMode(SCE_PIN, INPUT_PULLUP);   // Internal pullup resistor biases the pin to supply voltage.
 23e8872:	4c20      	ldr	r4, [pc, #128]	; (23e88f4 <_Z17Serial_Initializev+0x84>)
 23e8874:	2102      	movs	r1, #2
 23e8876:	8820      	ldrh	r0, [r4, #0]
 23e8878:	f010 ff50 	bl	23f971c <pinMode>
                                    // If jumper set to ground, we enable serial console (low = enable)
  if (digitalRead(SCE_PIN) == LOW) {
 23e887c:	8820      	ldrh	r0, [r4, #0]
 23e887e:	f010 ff77 	bl	23f9770 <digitalRead>
 23e8882:	4c1d      	ldr	r4, [pc, #116]	; (23e88f8 <_Z17Serial_Initializev+0x88>)
 23e8884:	b908      	cbnz	r0, 23e888a <_Z17Serial_Initializev+0x1a>
    SerialConsoleEnabled = true;
 23e8886:	2301      	movs	r3, #1
 23e8888:	7023      	strb	r3, [r4, #0]
  }

  // There are libraries that print to Serial Console so we need to initialize no mater what the jumper is set to.
  Serial.begin(9600);
 23e888a:	f010 fce9 	bl	23f9260 <_Z16_fetch_usbserialv>
 23e888e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23e8892:	f010 fcd5 	bl	23f9240 <_ZN9USBSerial5beginEl>
  delay(1000); // prevents usb driver crash on startup, do not omit this
 23e8896:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23e889a:	f00e fd5d 	bl	23f7358 <delay>

  if (SerialConsoleEnabled) {
 23e889e:	7823      	ldrb	r3, [r4, #0]
 23e88a0:	b33b      	cbz	r3, 23e88f2 <_Z17Serial_Initializev+0x82>
    // Wait for serial port to be available
    if (!Serial.isConnected()) {
 23e88a2:	f010 fcdd 	bl	23f9260 <_Z16_fetch_usbserialv>
 23e88a6:	f010 fccf 	bl	23f9248 <_ZN9USBSerial11isConnectedEv>
 23e88aa:	b910      	cbnz	r0, 23e88b2 <_Z17Serial_Initializev+0x42>
      OLED_write("Wait4 Serial Console");
 23e88ac:	4813      	ldr	r0, [pc, #76]	; (23e88fc <_Z17Serial_Initializev+0x8c>)
 23e88ae:	f7fb fdc7 	bl	23e4440 <_Z10OLED_writePKc>
void Serial_Initialize() {
 23e88b2:	243d      	movs	r4, #61	; 0x3d
    }
    int countdown=60; // Wait N seconds for serial connection, then move on.
    while (!Serial.isConnected() && countdown) {
 23e88b4:	f010 fcd4 	bl	23f9260 <_Z16_fetch_usbserialv>
 23e88b8:	f010 fcc6 	bl	23f9248 <_ZN9USBSerial11isConnectedEv>
 23e88bc:	b948      	cbnz	r0, 23e88d2 <_Z17Serial_Initializev+0x62>
 23e88be:	3c01      	subs	r4, #1
 23e88c0:	d007      	beq.n	23e88d2 <_Z17Serial_Initializev+0x62>
      HeartBeat(); // Provices 250ms delay
 23e88c2:	f7ff ffc5 	bl	23e8850 <_Z9HeartBeatv>
      Blink(1, 750);
 23e88c6:	f240 21ee 	movw	r1, #750	; 0x2ee
 23e88ca:	2001      	movs	r0, #1
 23e88cc:	f7fb fc68 	bl	23e41a0 <_Z5Blinkii>
    while (!Serial.isConnected() && countdown) {
 23e88d0:	e7f0      	b.n	23e88b4 <_Z17Serial_Initializev+0x44>
      countdown--;
    }

    Serial_writeln(""); // Send carriage return and linefeed
 23e88d2:	480b      	ldr	r0, [pc, #44]	; (23e8900 <_Z17Serial_Initializev+0x90>)
 23e88d4:	f7fb fe40 	bl	23e4558 <_Z14Serial_writelnPKc>
    
    if (DisplayEnabled) {
 23e88d8:	4b0a      	ldr	r3, [pc, #40]	; (23e8904 <_Z17Serial_Initializev+0x94>)
 23e88da:	781b      	ldrb	r3, [r3, #0]
 23e88dc:	b13b      	cbz	r3, 23e88ee <_Z17Serial_Initializev+0x7e>
      Serial_writeln ("OLED:Enabled");
 23e88de:	480a      	ldr	r0, [pc, #40]	; (23e8908 <_Z17Serial_Initializev+0x98>)
    }
    else {
      Serial_writeln ("OLED:Disabled");
 23e88e0:	f7fb fe3a 	bl	23e4558 <_Z14Serial_writelnPKc>
    }
    Output ("SC:Enabled");
  }
}
 23e88e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Output ("SC:Enabled");
 23e88e8:	4808      	ldr	r0, [pc, #32]	; (23e890c <_Z17Serial_Initializev+0x9c>)
 23e88ea:	f7fb be4d 	b.w	23e4588 <_Z6OutputPKc>
      Serial_writeln ("OLED:Disabled");
 23e88ee:	4808      	ldr	r0, [pc, #32]	; (23e8910 <_Z17Serial_Initializev+0xa0>)
 23e88f0:	e7f6      	b.n	23e88e0 <_Z17Serial_Initializev+0x70>
}
 23e88f2:	bd10      	pop	{r4, pc}
 23e88f4:	1006a0f0 	.word	0x1006a0f0
 23e88f8:	1006a7c7 	.word	0x1006a7c7
 23e88fc:	023fdb8e 	.word	0x023fdb8e
 23e8900:	023fe413 	.word	0x023fe413
 23e8904:	1006a0e9 	.word	0x1006a0e9
 23e8908:	023fdba3 	.word	0x023fdba3
 23e890c:	023fdbbe 	.word	0x023fdbbe
 23e8910:	023fdbb0 	.word	0x023fdbb0

023e8914 <_Z17Output_Initializev>:
/*
 * ======================================================================================================================
 * Output_Initialize() -
 * ======================================================================================================================
 */
void Output_Initialize() {
 23e8914:	b508      	push	{r3, lr}
  OLED_initialize();
 23e8916:	f7fb fe41 	bl	23e459c <_Z15OLED_initializev>
  Output("SER:Init");
 23e891a:	4805      	ldr	r0, [pc, #20]	; (23e8930 <_Z17Output_Initializev+0x1c>)
 23e891c:	f7fb fe34 	bl	23e4588 <_Z6OutputPKc>
  Serial_Initialize();
 23e8920:	f7ff ffa6 	bl	23e8870 <_Z17Serial_Initializev>
  Output("SER:OK");
 23e8924:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output("SER:OK");
 23e8928:	4802      	ldr	r0, [pc, #8]	; (23e8934 <_Z17Output_Initializev+0x20>)
 23e892a:	f7fb be2d 	b.w	23e4588 <_Z6OutputPKc>
 23e892e:	bf00      	nop
 23e8930:	023fdbc9 	.word	0x023fdbc9
 23e8934:	023fdbd2 	.word	0x023fdbd2

023e8938 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
 23e8938:	2200      	movs	r2, #0
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
 23e893a:	b570      	push	{r4, r5, r6, lr}
 23e893c:	b08c      	sub	sp, #48	; 0x30
 23e893e:	460d      	mov	r5, r1
    const int ret = diag_get_source(id, &src, nullptr);
 23e8940:	4669      	mov	r1, sp
 23e8942:	4676      	mov	r6, lr
    const diag_source* src = nullptr;
 23e8944:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
 23e8946:	f00e f987 	bl	23f6c58 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
 23e894a:	b9e8      	cbnz	r0, 23e8988 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x50>
        return ret;
    }
    return get(src, val);
 23e894c:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
 23e894e:	b10c      	cbz	r4, 23e8954 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1c>
 23e8950:	6923      	ldr	r3, [r4, #16]
 23e8952:	b97b      	cbnz	r3, 23e8974 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>
 23e8954:	222c      	movs	r2, #44	; 0x2c
 23e8956:	2100      	movs	r1, #0
 23e8958:	a801      	add	r0, sp, #4
 23e895a:	f013 fd44 	bl	23fc3e6 <memset>
 23e895e:	4b0b      	ldr	r3, [pc, #44]	; (23e898c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x54>)
 23e8960:	9604      	str	r6, [sp, #16]
 23e8962:	9301      	str	r3, [sp, #4]
 23e8964:	4b0a      	ldr	r3, [pc, #40]	; (23e8990 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x58>)
 23e8966:	9302      	str	r3, [sp, #8]
}

__attribute__((always_inline)) static inline uint32_t __get_PC(void) { 
    uint32_t result; 

    asm volatile ("mov %0, pc\n" : "=r" (result) ); 
 23e8968:	467b      	mov	r3, pc
 23e896a:	2100      	movs	r1, #0
 23e896c:	a801      	add	r0, sp, #4
 23e896e:	9303      	str	r3, [sp, #12]
 23e8970:	f00e f980 	bl	23f6c74 <panic_ext>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
 23e8974:	230c      	movs	r3, #12
 23e8976:	e9cd 3501 	strd	r3, r5, [sp, #4]
 23e897a:	2304      	movs	r3, #4
 23e897c:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
 23e897e:	2101      	movs	r1, #1
 23e8980:	4620      	mov	r0, r4
 23e8982:	6923      	ldr	r3, [r4, #16]
 23e8984:	aa01      	add	r2, sp, #4
 23e8986:	4798      	blx	r3
}
 23e8988:	b00c      	add	sp, #48	; 0x30
 23e898a:	bd70      	pop	{r4, r5, r6, pc}
 23e898c:	000a002c 	.word	0x000a002c
 23e8990:	023fdbd9 	.word	0x023fdbd9

023e8994 <_ZNK11SystemClass13batteryChargeEv.isra.0>:
            return r;
        }
        return val;
    }

    float batteryCharge() const {
 23e8994:	b507      	push	{r0, r1, r2, lr}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
 23e8996:	2003      	movs	r0, #3
 23e8998:	a901      	add	r1, sp, #4
 23e899a:	f7ff ffcd 	bl	23e8938 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
 23e899e:	b940      	cbnz	r0, 23e89b2 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x1e>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
 23e89a0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 23e89a4:	ee00 3a10 	vmov	s0, r3
 23e89a8:	eebb 0acc 	vcvt.f32.u32	s0, s0, #8

        using SocFixedPointT = particle::FixedPointUQ<8, 8>;

        SocFixedPointT soc(static_cast<typename SocFixedPointT::type>(val));
        return soc.toFloat();
    }
 23e89ac:	b003      	add	sp, #12
 23e89ae:	f85d fb04 	ldr.w	pc, [sp], #4
            return -1.0f;
 23e89b2:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 23e89b6:	e7f9      	b.n	23e89ac <_ZNK11SystemClass13batteryChargeEv.isra.0+0x18>

023e89b8 <_ZNK11SystemClass12batteryStateEv.isra.0>:
    int batteryState() const {
 23e89b8:	b507      	push	{r0, r1, r2, lr}
 23e89ba:	2007      	movs	r0, #7
 23e89bc:	a901      	add	r1, sp, #4
 23e89be:	f7ff ffbb 	bl	23e8938 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
 23e89c2:	2800      	cmp	r0, #0
        return val;
 23e89c4:	bfa8      	it	ge
 23e89c6:	9801      	ldrge	r0, [sp, #4]
    }
 23e89c8:	b003      	add	sp, #12
 23e89ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023e89d0 <_Z6OBS_Dov>:
/*
 * ======================================================================================================================
 * OBS_Do() - Get Observations - Should be called once a minute
 * ======================================================================================================================
 */
void OBS_Do() {
 23e89d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23e89d4:	ed2d 8b06 	vpush	{d8-d10}
 23e89d8:	b099      	sub	sp, #100	; 0x64

// Output("DB:OBS_Start");


  // Safty Check for Vaild Time
  if (!Time.isValid()) {
 23e89da:	f010 fb0d 	bl	23f8ff8 <_ZN9TimeClass7isValidEv>
 23e89de:	b948      	cbnz	r0, 23e89f4 <_Z6OBS_Dov+0x24>
    Output ("OBS_Do: Time NV");
 23e89e0:	4803      	ldr	r0, [pc, #12]	; (23e89f0 <_Z6OBS_Dov+0x20>)
  // Save Observation to SD Card
  OBS_Log(oidx);

  lastOBS = System.millis();
// Output("DB:OBS_Exit");
}
 23e89e2:	b019      	add	sp, #100	; 0x64
 23e89e4:	ecbd 8b06 	vpop	{d8-d10}
 23e89e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Output ("OBS_Do: Time NV");
 23e89ec:	f7fb bdcc 	b.w	23e4588 <_Z6OutputPKc>
 23e89f0:	023fdbfa 	.word	0x023fdbfa
  Wind_GustUpdate(); // Update Gust and Gust Direction readings
 23e89f4:	f7fd fe48 	bl	23e6688 <_Z15Wind_GustUpdatev>
  int BatteryState = System.batteryState();
 23e89f8:	f7ff ffde 	bl	23e89b8 <_ZNK11SystemClass12batteryStateEv.isra.0>
  CellularSignal sig = Cellular.RSSI();
 23e89fc:	49de      	ldr	r1, [pc, #888]	; (23e8d78 <_Z6OBS_Dov+0x3a8>)
  int BatteryState = System.batteryState();
 23e89fe:	4681      	mov	r9, r0
  CellularSignal sig = Cellular.RSSI();
 23e8a00:	a804      	add	r0, sp, #16
 23e8a02:	f00e fcf1 	bl	23f73e8 <_ZN5spark13CellularClass4RSSIEv>
  byte cfr = pmic.getFault(); // Get Battery Charger Failt Register
 23e8a06:	48dd      	ldr	r0, [pc, #884]	; (23e8d7c <_Z6OBS_Dov+0x3ac>)
 23e8a08:	f00f fe02 	bl	23f8610 <_ZN4PMIC8getFaultEv>
  if (BatteryState>0 && BatteryState<6) {
 23e8a0c:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 23e8a10:	2b04      	cmp	r3, #4
  byte cfr = pmic.getFault(); // Get Battery Charger Failt Register
 23e8a12:	4682      	mov	sl, r0
  if (BatteryState>0 && BatteryState<6) {
 23e8a14:	f200 81f8 	bhi.w	23e8e08 <_Z6OBS_Dov+0x438>
    BatteryPoC = System.batteryCharge();
 23e8a18:	f7ff ffbc 	bl	23e8994 <_ZNK11SystemClass13batteryChargeEv.isra.0>
 23e8a1c:	eeb0 8a40 	vmov.f32	s16, s0
  oidx = OBS_Open();    // Get a free observation spot
 23e8a20:	f7ff f988 	bl	23e7d34 <_Z8OBS_Openv>
  obs[oidx].inuse = true;
 23e8a24:	f640 2698 	movw	r6, #2712	; 0xa98
 23e8a28:	f04f 0801 	mov.w	r8, #1
 23e8a2c:	4346      	muls	r6, r0
 23e8a2e:	4cd4      	ldr	r4, [pc, #848]	; (23e8d80 <_Z6OBS_Dov+0x3b0>)
  oidx = OBS_Open();    // Get a free observation spot
 23e8a30:	9000      	str	r0, [sp, #0]
  obs[oidx].inuse = true;
 23e8a32:	f804 8006 	strb.w	r8, [r4, r6]
  obs[oidx].ts = Time.now();
 23e8a36:	f010 fafc 	bl	23f9032 <_ZN9TimeClass3nowEv>
  obs[oidx].inuse = true;
 23e8a3a:	19a7      	adds	r7, r4, r6
  obs[oidx].ts = Time.now();
 23e8a3c:	17c3      	asrs	r3, r0, #31
 23e8a3e:	e9c7 0302 	strd	r0, r3, [r7, #8]
  obs[oidx].css = sig.getStrength();
 23e8a42:	a804      	add	r0, sp, #16
 23e8a44:	f00e fd2e 	bl	23f74a4 <_ZNK14CellularSignal11getStrengthEv>
 23e8a48:	f106 0518 	add.w	r5, r6, #24
 23e8a4c:	ed87 0a04 	vstr	s0, [r7, #16]
  strcpy (obs[oidx].sensor[sidx].id, "bcs");
 23e8a50:	49cc      	ldr	r1, [pc, #816]	; (23e8d84 <_Z6OBS_Dov+0x3b4>)
 23e8a52:	1960      	adds	r0, r4, r5
 23e8a54:	f013 fd3c 	bl	23fc4d0 <strcpy>
  strcpy (obs[oidx].sensor[sidx].id, "bpc");
 23e8a58:	f106 0034 	add.w	r0, r6, #52	; 0x34
 23e8a5c:	49ca      	ldr	r1, [pc, #808]	; (23e8d88 <_Z6OBS_Dov+0x3b8>)
  obs[oidx].sensor[sidx].type = I_OBS;
 23e8a5e:	f8c7 8020 	str.w	r8, [r7, #32]
  obs[oidx].sensor[sidx].i_obs = BatteryState;
 23e8a62:	f8c7 9028 	str.w	r9, [r7, #40]	; 0x28
  obs[oidx].sensor[sidx++].inuse = true;
 23e8a66:	f887 8030 	strb.w	r8, [r7, #48]	; 0x30
  strcpy (obs[oidx].sensor[sidx].id, "bpc");
 23e8a6a:	4420      	add	r0, r4
 23e8a6c:	f013 fd30 	bl	23fc4d0 <strcpy>
  obs[oidx].sensor[sidx].type = F_OBS;
 23e8a70:	2300      	movs	r3, #0
  strcpy (obs[oidx].sensor[sidx].id, "cfr");
 23e8a72:	f106 0050 	add.w	r0, r6, #80	; 0x50
  obs[oidx].sensor[sidx].type = F_OBS;
 23e8a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  obs[oidx].sensor[sidx].f_obs = BatteryPoC;
 23e8a78:	ed87 8a10 	vstr	s16, [r7, #64]	; 0x40
  strcpy (obs[oidx].sensor[sidx].id, "cfr");
 23e8a7c:	49c3      	ldr	r1, [pc, #780]	; (23e8d8c <_Z6OBS_Dov+0x3bc>)
  obs[oidx].sensor[sidx++].inuse = true;
 23e8a7e:	f887 804c 	strb.w	r8, [r7, #76]	; 0x4c
  strcpy (obs[oidx].sensor[sidx].id, "cfr");
 23e8a82:	4420      	add	r0, r4
 23e8a84:	f013 fd24 	bl	23fc4d0 <strcpy>
  obs[oidx].sensor[sidx].i_obs = cfr;
 23e8a88:	f8c7 a060 	str.w	sl, [r7, #96]	; 0x60
  obs[oidx].sensor[sidx].type = I_OBS;
 23e8a8c:	f8c7 8058 	str.w	r8, [r7, #88]	; 0x58
  obs[oidx].sensor[sidx++].inuse = true;
 23e8a90:	f887 8068 	strb.w	r8, [r7, #104]	; 0x68
  rgds = (System.millis()-raingauge1_interrupt_stime)/1000;
 23e8a94:	f7fb fa23 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23e8a98:	468c      	mov	ip, r1
 23e8a9a:	4fbd      	ldr	r7, [pc, #756]	; (23e8d90 <_Z6OBS_Dov+0x3c0>)
 23e8a9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23e8aa0:	683b      	ldr	r3, [r7, #0]
 23e8aa2:	6879      	ldr	r1, [r7, #4]
 23e8aa4:	1ac0      	subs	r0, r0, r3
 23e8aa6:	eb6c 0101 	sbc.w	r1, ip, r1
 23e8aaa:	2300      	movs	r3, #0
 23e8aac:	f7fa fa66 	bl	23e2f7c <__aeabi_uldivmod>
  rain = raingauge1_interrupt_count * 0.2;
 23e8ab0:	f8df b32c 	ldr.w	fp, [pc, #812]	; 23e8de0 <_Z6OBS_Dov+0x410>
  rgds = (System.millis()-raingauge1_interrupt_stime)/1000;
 23e8ab4:	4682      	mov	sl, r0
  rain = raingauge1_interrupt_count * 0.2;
 23e8ab6:	f8db 0000 	ldr.w	r0, [fp]
 23e8aba:	f7f9 fd3f 	bl	23e253c <__aeabi_ui2d>
 23e8abe:	a3ac      	add	r3, pc, #688	; (adr r3, 23e8d70 <_Z6OBS_Dov+0x3a0>)
 23e8ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e8ac4:	f7f9 fdb4 	bl	23e2630 <__aeabi_dmul>
 23e8ac8:	f7fa f8aa 	bl	23e2c20 <__aeabi_d2f>
 23e8acc:	ee08 0a10 	vmov	s16, r0
  rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
 23e8ad0:	eeb4 8a48 	vcmp.f32	s16, s16
 23e8ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e8ad8:	f180 8199 	bvs.w	23e8e0e <_Z6OBS_Dov+0x43e>
 23e8adc:	f7f9 fd50 	bl	23e2580 <__aeabi_f2d>
 23e8ae0:	4680      	mov	r8, r0
 23e8ae2:	203c      	movs	r0, #60	; 0x3c
 23e8ae4:	fbba f0f0 	udiv	r0, sl, r0
 23e8ae8:	4689      	mov	r9, r1
 23e8aea:	f7f9 fd27 	bl	23e253c <__aeabi_ui2d>
 23e8aee:	2200      	movs	r2, #0
 23e8af0:	4ba8      	ldr	r3, [pc, #672]	; (23e8d94 <_Z6OBS_Dov+0x3c4>)
 23e8af2:	f7f9 fd9d 	bl	23e2630 <__aeabi_dmul>
 23e8af6:	4602      	mov	r2, r0
 23e8af8:	460b      	mov	r3, r1
 23e8afa:	4640      	mov	r0, r8
 23e8afc:	4649      	mov	r1, r9
 23e8afe:	f7fa f827 	bl	23e2b50 <__aeabi_dcmpgt>
 23e8b02:	eddf 7aa5 	vldr	s15, [pc, #660]	; 23e8d98 <_Z6OBS_Dov+0x3c8>
 23e8b06:	2800      	cmp	r0, #0
 23e8b08:	fe08 8a27 	vseleq.f32	s16, s16, s15
  raingauge1_interrupt_count = 0;
 23e8b0c:	2300      	movs	r3, #0
 23e8b0e:	f8cb 3000 	str.w	r3, [fp]
  raingauge1_interrupt_stime = System.millis();
 23e8b12:	f7fb f9e4 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23e8b16:	e9c7 0100 	strd	r0, r1, [r7]
  raingauge1_interrupt_ltime = 0; // used to debounce the tip
 23e8b1a:	2000      	movs	r0, #0
 23e8b1c:	2100      	movs	r1, #0
 23e8b1e:	4b9f      	ldr	r3, [pc, #636]	; (23e8d9c <_Z6OBS_Dov+0x3cc>)
 23e8b20:	e9c3 0100 	strd	r0, r1, [r3]
  if (A4_State == A4_STATE_RAIN) {
 23e8b24:	4b9e      	ldr	r3, [pc, #632]	; (23e8da0 <_Z6OBS_Dov+0x3d0>)
 23e8b26:	681b      	ldr	r3, [r3, #0]
 23e8b28:	2b02      	cmp	r3, #2
 23e8b2a:	f040 8176 	bne.w	23e8e1a <_Z6OBS_Dov+0x44a>
    rg2ds = (System.millis()-raingauge2_interrupt_stime)/1000;
 23e8b2e:	f7fb f9d6 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23e8b32:	468c      	mov	ip, r1
 23e8b34:	4f9b      	ldr	r7, [pc, #620]	; (23e8da4 <_Z6OBS_Dov+0x3d4>)
 23e8b36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23e8b3a:	683b      	ldr	r3, [r7, #0]
 23e8b3c:	6879      	ldr	r1, [r7, #4]
 23e8b3e:	1ac0      	subs	r0, r0, r3
 23e8b40:	eb6c 0101 	sbc.w	r1, ip, r1
 23e8b44:	2300      	movs	r3, #0
 23e8b46:	f7fa fa19 	bl	23e2f7c <__aeabi_uldivmod>
    rain2 = raingauge2_interrupt_count * 0.2;
 23e8b4a:	f8df 9298 	ldr.w	r9, [pc, #664]	; 23e8de4 <_Z6OBS_Dov+0x414>
    rg2ds = (System.millis()-raingauge2_interrupt_stime)/1000;
 23e8b4e:	4680      	mov	r8, r0
    rain2 = raingauge2_interrupt_count * 0.2;
 23e8b50:	f8d9 0000 	ldr.w	r0, [r9]
 23e8b54:	f7f9 fcf2 	bl	23e253c <__aeabi_ui2d>
 23e8b58:	a385      	add	r3, pc, #532	; (adr r3, 23e8d70 <_Z6OBS_Dov+0x3a0>)
 23e8b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e8b5e:	f7f9 fd67 	bl	23e2630 <__aeabi_dmul>
 23e8b62:	f7fa f85d 	bl	23e2c20 <__aeabi_d2f>
 23e8b66:	ee09 0a10 	vmov	s18, r0
    rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
 23e8b6a:	eeb4 9a49 	vcmp.f32	s18, s18
 23e8b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e8b72:	f180 814f 	bvs.w	23e8e14 <_Z6OBS_Dov+0x444>
 23e8b76:	f7f9 fd03 	bl	23e2580 <__aeabi_f2d>
 23e8b7a:	4682      	mov	sl, r0
 23e8b7c:	203c      	movs	r0, #60	; 0x3c
 23e8b7e:	fbb8 f0f0 	udiv	r0, r8, r0
 23e8b82:	468b      	mov	fp, r1
 23e8b84:	f7f9 fcda 	bl	23e253c <__aeabi_ui2d>
 23e8b88:	2200      	movs	r2, #0
 23e8b8a:	4b82      	ldr	r3, [pc, #520]	; (23e8d94 <_Z6OBS_Dov+0x3c4>)
 23e8b8c:	f7f9 fd50 	bl	23e2630 <__aeabi_dmul>
 23e8b90:	4602      	mov	r2, r0
 23e8b92:	460b      	mov	r3, r1
 23e8b94:	4650      	mov	r0, sl
 23e8b96:	4659      	mov	r1, fp
 23e8b98:	f7f9 ffda 	bl	23e2b50 <__aeabi_dcmpgt>
 23e8b9c:	eddf 7a7e 	vldr	s15, [pc, #504]	; 23e8d98 <_Z6OBS_Dov+0x3c8>
 23e8ba0:	2800      	cmp	r0, #0
 23e8ba2:	fe09 9a27 	vseleq.f32	s18, s18, s15
    raingauge2_interrupt_count = 0;
 23e8ba6:	2300      	movs	r3, #0
 23e8ba8:	f8c9 3000 	str.w	r3, [r9]
    raingauge2_interrupt_stime = System.millis();
 23e8bac:	f7fb f997 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23e8bb0:	e9c7 0100 	strd	r0, r1, [r7]
    raingauge2_interrupt_ltime = 0; // used to debounce the tip
 23e8bb4:	2000      	movs	r0, #0
 23e8bb6:	2100      	movs	r1, #0
 23e8bb8:	4b7b      	ldr	r3, [pc, #492]	; (23e8da8 <_Z6OBS_Dov+0x3d8>)
 23e8bba:	e9c3 0100 	strd	r0, r1, [r3]
  obs[oidx].sensor[sidx].type = F_OBS;
 23e8bbe:	f640 2798 	movw	r7, #2712	; 0xa98
 23e8bc2:	f04f 0800 	mov.w	r8, #0
  obs[oidx].sensor[sidx++].inuse = true;
 23e8bc6:	f04f 0901 	mov.w	r9, #1
  EEPROM_UpdateRainTotals(rain, rain2);
 23e8bca:	eeb0 0a48 	vmov.f32	s0, s16
 23e8bce:	eef0 0a49 	vmov.f32	s1, s18
 23e8bd2:	f7fe f91b 	bl	23e6e0c <_Z23EEPROM_UpdateRainTotalsff>
  strcpy (obs[oidx].sensor[sidx].id, "rg");
 23e8bd6:	f106 006c 	add.w	r0, r6, #108	; 0x6c
 23e8bda:	4974      	ldr	r1, [pc, #464]	; (23e8dac <_Z6OBS_Dov+0x3dc>)
 23e8bdc:	4420      	add	r0, r4
 23e8bde:	f013 fc77 	bl	23fc4d0 <strcpy>
  obs[oidx].sensor[sidx].type = F_OBS;
 23e8be2:	9b00      	ldr	r3, [sp, #0]
  obs[oidx].sensor[sidx].f_obs = eeprom.rgt1;
 23e8be4:	f8df a200 	ldr.w	sl, [pc, #512]	; 23e8de8 <_Z6OBS_Dov+0x418>
  obs[oidx].sensor[sidx].type = F_OBS;
 23e8be8:	fb07 4703 	mla	r7, r7, r3, r4
  strcpy (obs[oidx].sensor[sidx].id, "rgt");
 23e8bec:	f106 0088 	add.w	r0, r6, #136	; 0x88
 23e8bf0:	496f      	ldr	r1, [pc, #444]	; (23e8db0 <_Z6OBS_Dov+0x3e0>)
  obs[oidx].sensor[sidx].f_obs = rain;
 23e8bf2:	ed87 8a1e 	vstr	s16, [r7, #120]	; 0x78
  obs[oidx].sensor[sidx].type = F_OBS;
 23e8bf6:	f8c7 8074 	str.w	r8, [r7, #116]	; 0x74
  obs[oidx].sensor[sidx++].inuse = true;
 23e8bfa:	f887 9084 	strb.w	r9, [r7, #132]	; 0x84
  strcpy (obs[oidx].sensor[sidx].id, "rgt");
 23e8bfe:	4420      	add	r0, r4
 23e8c00:	f013 fc66 	bl	23fc4d0 <strcpy>
  obs[oidx].sensor[sidx].f_obs = eeprom.rgt1;
 23e8c04:	f8da 3000 	ldr.w	r3, [sl]
  strcpy (obs[oidx].sensor[sidx].id, "rgp");
 23e8c08:	f106 00a4 	add.w	r0, r6, #164	; 0xa4
 23e8c0c:	4969      	ldr	r1, [pc, #420]	; (23e8db4 <_Z6OBS_Dov+0x3e4>)
  obs[oidx].sensor[sidx].f_obs = eeprom.rgt1;
 23e8c0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  obs[oidx].sensor[sidx].type = F_OBS;
 23e8c12:	f8c7 8090 	str.w	r8, [r7, #144]	; 0x90
  obs[oidx].sensor[sidx++].inuse = true;
 23e8c16:	f887 90a0 	strb.w	r9, [r7, #160]	; 0xa0
  strcpy (obs[oidx].sensor[sidx].id, "rgp");
 23e8c1a:	4420      	add	r0, r4
 23e8c1c:	f013 fc58 	bl	23fc4d0 <strcpy>
  obs[oidx].sensor[sidx].f_obs = eeprom.rgp1;
 23e8c20:	f8da 3004 	ldr.w	r3, [sl, #4]
  strcpy (obs[oidx].sensor[sidx].id, "ws");
 23e8c24:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
  obs[oidx].sensor[sidx].f_obs = eeprom.rgp1;
 23e8c28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  strcpy (obs[oidx].sensor[sidx].id, "ws");
 23e8c2c:	4962      	ldr	r1, [pc, #392]	; (23e8db8 <_Z6OBS_Dov+0x3e8>)
  obs[oidx].sensor[sidx].type = F_OBS;
 23e8c2e:	f8c7 80ac 	str.w	r8, [r7, #172]	; 0xac
  obs[oidx].sensor[sidx++].inuse = true;
 23e8c32:	f887 90bc 	strb.w	r9, [r7, #188]	; 0xbc
  strcpy (obs[oidx].sensor[sidx].id, "ws");
 23e8c36:	4420      	add	r0, r4
 23e8c38:	f013 fc4a 	bl	23fc4d0 <strcpy>
  obs[oidx].sensor[sidx].type = F_OBS;
 23e8c3c:	f8c7 80c8 	str.w	r8, [r7, #200]	; 0xc8
  ws = Wind_SpeedAverage();
 23e8c40:	f7fd fd08 	bl	23e6654 <_Z17Wind_SpeedAveragev>
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23e8c44:	eeb4 0a40 	vcmp.f32	s0, s0
 23e8c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e8c4c:	f180 80e8 	bvs.w	23e8e20 <_Z6OBS_Dov+0x450>
 23e8c50:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23e8c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e8c58:	f100 80e2 	bmi.w	23e8e20 <_Z6OBS_Dov+0x450>
 23e8c5c:	eddf 7a57 	vldr	s15, [pc, #348]	; 23e8dbc <_Z6OBS_Dov+0x3ec>
 23e8c60:	eeb4 0a67 	vcmp.f32	s0, s15
 23e8c64:	eddf 7a4c 	vldr	s15, [pc, #304]	; 23e8d98 <_Z6OBS_Dov+0x3c8>
 23e8c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e8c6c:	fe37 0a80 	vselgt.f32	s0, s15, s0
  obs[oidx].sensor[sidx].f_obs = ws;
 23e8c70:	f640 2798 	movw	r7, #2712	; 0xa98
  obs[oidx].sensor[sidx++].inuse = true;
 23e8c74:	f04f 0901 	mov.w	r9, #1
  obs[oidx].sensor[sidx].f_obs = ws;
 23e8c78:	9b00      	ldr	r3, [sp, #0]
  strcpy (obs[oidx].sensor[sidx].id, "wd");
 23e8c7a:	f106 00dc 	add.w	r0, r6, #220	; 0xdc
  obs[oidx].sensor[sidx].f_obs = ws;
 23e8c7e:	fb07 4803 	mla	r8, r7, r3, r4
  strcpy (obs[oidx].sensor[sidx].id, "wd");
 23e8c82:	494f      	ldr	r1, [pc, #316]	; (23e8dc0 <_Z6OBS_Dov+0x3f0>)
  obs[oidx].sensor[sidx].f_obs = ws;
 23e8c84:	ed88 0a33 	vstr	s0, [r8, #204]	; 0xcc
  obs[oidx].sensor[sidx++].inuse = true;
 23e8c88:	f888 90d8 	strb.w	r9, [r8, #216]	; 0xd8
  strcpy (obs[oidx].sensor[sidx].id, "wd");
 23e8c8c:	4420      	add	r0, r4
 23e8c8e:	f013 fc1f 	bl	23fc4d0 <strcpy>
  obs[oidx].sensor[sidx].type = I_OBS;
 23e8c92:	f8c8 90e4 	str.w	r9, [r8, #228]	; 0xe4
  wd = Wind_DirectionVector();
 23e8c96:	f7fd fc47 	bl	23e6528 <_Z20Wind_DirectionVectorv>
  wd = (isnan(wd) || (wd < QC_MIN_WD) || (wd > QC_MAX_WD)) ? QC_ERR_WD : wd;
 23e8c9a:	2800      	cmp	r0, #0
 23e8c9c:	f2c0 80c3 	blt.w	23e8e26 <_Z6OBS_Dov+0x456>
 23e8ca0:	4b48      	ldr	r3, [pc, #288]	; (23e8dc4 <_Z6OBS_Dov+0x3f4>)
 23e8ca2:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
 23e8ca6:	bfc8      	it	gt
 23e8ca8:	4618      	movgt	r0, r3
  obs[oidx].sensor[sidx].i_obs = wd;
 23e8caa:	9b00      	ldr	r3, [sp, #0]
  return(wind.gust);
 23e8cac:	f8df 913c 	ldr.w	r9, [pc, #316]	; 23e8dec <_Z6OBS_Dov+0x41c>
 23e8cb0:	fb07 4703 	mla	r7, r7, r3, r4
  obs[oidx].sensor[sidx++].inuse = true;
 23e8cb4:	2301      	movs	r3, #1
  obs[oidx].sensor[sidx].i_obs = wd;
 23e8cb6:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
  strcpy (obs[oidx].sensor[sidx].id, "wg");
 23e8cba:	f106 00f8 	add.w	r0, r6, #248	; 0xf8
  obs[oidx].sensor[sidx++].inuse = true;
 23e8cbe:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
  strcpy (obs[oidx].sensor[sidx].id, "wg");
 23e8cc2:	4941      	ldr	r1, [pc, #260]	; (23e8dc8 <_Z6OBS_Dov+0x3f8>)
 23e8cc4:	4420      	add	r0, r4
 23e8cc6:	f013 fc03 	bl	23fc4d0 <strcpy>
 23e8cca:	edd9 7a79 	vldr	s15, [r9, #484]	; 0x1e4
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23e8cce:	eef4 7a67 	vcmp.f32	s15, s15
  obs[oidx].sensor[sidx].type = F_OBS;
 23e8cd2:	2300      	movs	r3, #0
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23e8cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  obs[oidx].sensor[sidx].type = F_OBS;
 23e8cd8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23e8cdc:	f180 80a5 	bvs.w	23e8e2a <_Z6OBS_Dov+0x45a>
 23e8ce0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23e8ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e8ce8:	f100 809f 	bmi.w	23e8e2a <_Z6OBS_Dov+0x45a>
 23e8cec:	ed9f 7a33 	vldr	s14, [pc, #204]	; 23e8dbc <_Z6OBS_Dov+0x3ec>
 23e8cf0:	eef4 7a47 	vcmp.f32	s15, s14
 23e8cf4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 23e8d98 <_Z6OBS_Dov+0x3c8>
 23e8cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e8cfc:	fe77 7a27 	vselgt.f32	s15, s14, s15
  obs[oidx].sensor[sidx].f_obs = ws;
 23e8d00:	f640 2798 	movw	r7, #2712	; 0xa98
  obs[oidx].sensor[sidx++].inuse = true;
 23e8d04:	f04f 0a01 	mov.w	sl, #1
  obs[oidx].sensor[sidx].f_obs = ws;
 23e8d08:	9b00      	ldr	r3, [sp, #0]
  strcpy (obs[oidx].sensor[sidx].id, "wgd");
 23e8d0a:	f506 708a 	add.w	r0, r6, #276	; 0x114
  obs[oidx].sensor[sidx].f_obs = ws;
 23e8d0e:	fb07 4803 	mla	r8, r7, r3, r4
  strcpy (obs[oidx].sensor[sidx].id, "wgd");
 23e8d12:	492e      	ldr	r1, [pc, #184]	; (23e8dcc <_Z6OBS_Dov+0x3fc>)
  obs[oidx].sensor[sidx].f_obs = ws;
 23e8d14:	edc8 7a41 	vstr	s15, [r8, #260]	; 0x104
  obs[oidx].sensor[sidx++].inuse = true;
 23e8d18:	f888 a110 	strb.w	sl, [r8, #272]	; 0x110
  strcpy (obs[oidx].sensor[sidx].id, "wgd");
 23e8d1c:	4420      	add	r0, r4
 23e8d1e:	f013 fbd7 	bl	23fc4d0 <strcpy>
  return(wind.gust_direction);
 23e8d22:	f8d9 31e8 	ldr.w	r3, [r9, #488]	; 0x1e8
  obs[oidx].sensor[sidx].type = I_OBS;
 23e8d26:	f8c8 a11c 	str.w	sl, [r8, #284]	; 0x11c
  wd = (isnan(wd) || (wd < QC_MIN_WD) || (wd > QC_MAX_WD)) ? QC_ERR_WD : wd;
 23e8d2a:	2b00      	cmp	r3, #0
 23e8d2c:	f2c0 8080 	blt.w	23e8e30 <_Z6OBS_Dov+0x460>
 23e8d30:	4a24      	ldr	r2, [pc, #144]	; (23e8dc4 <_Z6OBS_Dov+0x3f4>)
 23e8d32:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 23e8d36:	bfc8      	it	gt
 23e8d38:	4613      	movgt	r3, r2
  obs[oidx].sensor[sidx].i_obs = wd;
 23e8d3a:	9a00      	ldr	r2, [sp, #0]
 23e8d3c:	fb07 4702 	mla	r7, r7, r2, r4
 23e8d40:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  obs[oidx].sensor[sidx++].inuse = true;
 23e8d44:	2301      	movs	r3, #1
 23e8d46:	f887 312c 	strb.w	r3, [r7, #300]	; 0x12c
  if (BMX_1_exists) {
 23e8d4a:	4b21      	ldr	r3, [pc, #132]	; (23e8dd0 <_Z6OBS_Dov+0x400>)
 23e8d4c:	781b      	ldrb	r3, [r3, #0]
 23e8d4e:	2b00      	cmp	r3, #0
 23e8d50:	f000 8142 	beq.w	23e8fd8 <_Z6OBS_Dov+0x608>
    if (BMX_1_chip_id == BMP280_CHIP_ID) {
 23e8d54:	4b1f      	ldr	r3, [pc, #124]	; (23e8dd4 <_Z6OBS_Dov+0x404>)
 23e8d56:	f8df 9098 	ldr.w	r9, [pc, #152]	; 23e8df0 <_Z6OBS_Dov+0x420>
 23e8d5a:	781b      	ldrb	r3, [r3, #0]
 23e8d5c:	2b58      	cmp	r3, #88	; 0x58
 23e8d5e:	d169      	bne.n	23e8e34 <_Z6OBS_Dov+0x464>
      p = bmp1.readPressure()/100.0F;       // bp1 hPa
 23e8d60:	481d      	ldr	r0, [pc, #116]	; (23e8dd8 <_Z6OBS_Dov+0x408>)
 23e8d62:	f005 f9cf 	bl	23ee104 <_ZN15Adafruit_BMP28012readPressureEv>
 23e8d66:	eddf 7a1d 	vldr	s15, [pc, #116]	; 23e8ddc <_Z6OBS_Dov+0x40c>
 23e8d6a:	e043      	b.n	23e8df4 <_Z6OBS_Dov+0x424>
 23e8d6c:	f3af 8000 	nop.w
 23e8d70:	9999999a 	.word	0x9999999a
 23e8d74:	3fc99999 	.word	0x3fc99999
 23e8d78:	1007aeb4 	.word	0x1007aeb4
 23e8d7c:	1007aa48 	.word	0x1007aa48
 23e8d80:	1006f540 	.word	0x1006f540
 23e8d84:	023fdc0a 	.word	0x023fdc0a
 23e8d88:	023fdc0e 	.word	0x023fdc0e
 23e8d8c:	023fdc12 	.word	0x023fdc12
 23e8d90:	1007aa58 	.word	0x1007aa58
 23e8d94:	403e0000 	.word	0x403e0000
 23e8d98:	c479f99a 	.word	0xc479f99a
 23e8d9c:	1007aa50 	.word	0x1007aa50
 23e8da0:	1006a24c 	.word	0x1006a24c
 23e8da4:	1007aa70 	.word	0x1007aa70
 23e8da8:	1007aa68 	.word	0x1007aa68
 23e8dac:	023fdc16 	.word	0x023fdc16
 23e8db0:	023fdc19 	.word	0x023fdc19
 23e8db4:	023fdc1d 	.word	0x023fdc1d
 23e8db8:	023fdc21 	.word	0x023fdc21
 23e8dbc:	42ce0000 	.word	0x42ce0000
 23e8dc0:	023fdc24 	.word	0x023fdc24
 23e8dc4:	fffffc19 	.word	0xfffffc19
 23e8dc8:	023fdc27 	.word	0x023fdc27
 23e8dcc:	023fdc2a 	.word	0x023fdc2a
 23e8dd0:	1006a272 	.word	0x1006a272
 23e8dd4:	1006a271 	.word	0x1006a271
 23e8dd8:	1006abe8 	.word	0x1006abe8
 23e8ddc:	42c80000 	.word	0x42c80000
 23e8de0:	1007aa4c 	.word	0x1007aa4c
 23e8de4:	1007aa60 	.word	0x1007aa60
 23e8de8:	1006ae4c 	.word	0x1006ae4c
 23e8dec:	1007ac5c 	.word	0x1007ac5c
 23e8df0:	1006a273 	.word	0x1006a273
      t = bmp1.readTemperature();           // bt1
 23e8df4:	487b      	ldr	r0, [pc, #492]	; (23e8fe4 <_Z6OBS_Dov+0x614>)
      p = bmp1.readPressure()/100.0F;       // bp1 hPa
 23e8df6:	eec0 9a27 	vdiv.f32	s19, s0, s15
      t = bmp1.readTemperature();           // bt1
 23e8dfa:	f005 f943 	bl	23ee084 <_ZN15Adafruit_BMP28015readTemperatureEv>
      t = bm31.readTemperature();           // bt1
 23e8dfe:	eeb0 8a40 	vmov.f32	s16, s0
    float h = 0.0;
 23e8e02:	eddf 8a79 	vldr	s17, [pc, #484]	; 23e8fe8 <_Z6OBS_Dov+0x618>
 23e8e06:	e03e      	b.n	23e8e86 <_Z6OBS_Dov+0x4b6>
  float BatteryPoC = 0.0; // Battery Percent of Charge
 23e8e08:	ed9f 8a77 	vldr	s16, [pc, #476]	; 23e8fe8 <_Z6OBS_Dov+0x618>
 23e8e0c:	e608      	b.n	23e8a20 <_Z6OBS_Dov+0x50>
  rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
 23e8e0e:	ed9f 8a77 	vldr	s16, [pc, #476]	; 23e8fec <_Z6OBS_Dov+0x61c>
 23e8e12:	e67b      	b.n	23e8b0c <_Z6OBS_Dov+0x13c>
    rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
 23e8e14:	ed9f 9a75 	vldr	s18, [pc, #468]	; 23e8fec <_Z6OBS_Dov+0x61c>
 23e8e18:	e6c5      	b.n	23e8ba6 <_Z6OBS_Dov+0x1d6>
  float rain2 = 0.0;
 23e8e1a:	ed9f 9a73 	vldr	s18, [pc, #460]	; 23e8fe8 <_Z6OBS_Dov+0x618>
 23e8e1e:	e6ce      	b.n	23e8bbe <_Z6OBS_Dov+0x1ee>
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23e8e20:	ed9f 0a72 	vldr	s0, [pc, #456]	; 23e8fec <_Z6OBS_Dov+0x61c>
 23e8e24:	e724      	b.n	23e8c70 <_Z6OBS_Dov+0x2a0>
  wd = (isnan(wd) || (wd < QC_MIN_WD) || (wd > QC_MAX_WD)) ? QC_ERR_WD : wd;
 23e8e26:	4872      	ldr	r0, [pc, #456]	; (23e8ff0 <_Z6OBS_Dov+0x620>)
 23e8e28:	e73f      	b.n	23e8caa <_Z6OBS_Dov+0x2da>
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23e8e2a:	eddf 7a70 	vldr	s15, [pc, #448]	; 23e8fec <_Z6OBS_Dov+0x61c>
 23e8e2e:	e767      	b.n	23e8d00 <_Z6OBS_Dov+0x330>
  wd = (isnan(wd) || (wd < QC_MIN_WD) || (wd > QC_MAX_WD)) ? QC_ERR_WD : wd;
 23e8e30:	4b6f      	ldr	r3, [pc, #444]	; (23e8ff0 <_Z6OBS_Dov+0x620>)
 23e8e32:	e782      	b.n	23e8d3a <_Z6OBS_Dov+0x36a>
    else if (BMX_1_chip_id == BME280_BMP390_CHIP_ID) {
 23e8e34:	2b60      	cmp	r3, #96	; 0x60
 23e8e36:	f040 80bb 	bne.w	23e8fb0 <_Z6OBS_Dov+0x5e0>
      if (BMX_1_type == BMX_TYPE_BME280) {
 23e8e3a:	f899 3000 	ldrb.w	r3, [r9]
 23e8e3e:	2b02      	cmp	r3, #2
 23e8e40:	f040 80af 	bne.w	23e8fa2 <_Z6OBS_Dov+0x5d2>
        p = bme1.readPressure()/100.0F;     // bp1 hPa
 23e8e44:	486b      	ldr	r0, [pc, #428]	; (23e8ff4 <_Z6OBS_Dov+0x624>)
 23e8e46:	f004 fd15 	bl	23ed874 <_ZN15Adafruit_BME28012readPressureEv>
 23e8e4a:	eddf 7a6b 	vldr	s15, [pc, #428]	; 23e8ff8 <_Z6OBS_Dov+0x628>
        t = bme1.readTemperature();         // bt1
 23e8e4e:	4869      	ldr	r0, [pc, #420]	; (23e8ff4 <_Z6OBS_Dov+0x624>)
        p = bme1.readPressure()/100.0F;     // bp1 hPa
 23e8e50:	eec0 9a27 	vdiv.f32	s19, s0, s15
        t = bme1.readTemperature();         // bt1
 23e8e54:	f004 fcdc 	bl	23ed810 <_ZN15Adafruit_BME28015readTemperatureEv>
        h = bme1.readHumidity();            // bh1 
 23e8e58:	4866      	ldr	r0, [pc, #408]	; (23e8ff4 <_Z6OBS_Dov+0x624>)
        t = bme1.readTemperature();         // bt1
 23e8e5a:	eeb0 8a40 	vmov.f32	s16, s0
        h = bme1.readHumidity();            // bh1 
 23e8e5e:	f004 fdd9 	bl	23eda14 <_ZN15Adafruit_BME28012readHumidityEv>
 23e8e62:	eef0 8a40 	vmov.f32	s17, s0
      if (BMX_1_type == BMX_TYPE_BMP390) {
 23e8e66:	f899 3000 	ldrb.w	r3, [r9]
 23e8e6a:	2b04      	cmp	r3, #4
 23e8e6c:	d10b      	bne.n	23e8e86 <_Z6OBS_Dov+0x4b6>
        p = bm31.readPressure()/100.0F;     // bp1 hPa
 23e8e6e:	4863      	ldr	r0, [pc, #396]	; (23e8ffc <_Z6OBS_Dov+0x62c>)
 23e8e70:	f005 fb53 	bl	23ee51a <_ZN15Adafruit_BMP3XX12readPressureEv>
 23e8e74:	eddf 7a60 	vldr	s15, [pc, #384]	; 23e8ff8 <_Z6OBS_Dov+0x628>
        t = bm31.readTemperature();         // bt1 
 23e8e78:	4860      	ldr	r0, [pc, #384]	; (23e8ffc <_Z6OBS_Dov+0x62c>)
        p = bm31.readPressure()/100.0F;     // bp1 hPa
 23e8e7a:	eec0 9a27 	vdiv.f32	s19, s0, s15
        t = bm31.readTemperature();         // bt1 
 23e8e7e:	f005 fb41 	bl	23ee504 <_ZN15Adafruit_BMP3XX15readTemperatureEv>
 23e8e82:	eeb0 8a40 	vmov.f32	s16, s0
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23e8e86:	eef4 9a69 	vcmp.f32	s19, s19
 23e8e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e8e8e:	f180 809a 	bvs.w	23e8fc6 <_Z6OBS_Dov+0x5f6>
 23e8e92:	eddf 7a5b 	vldr	s15, [pc, #364]	; 23e9000 <_Z6OBS_Dov+0x630>
 23e8e96:	eef4 9ae7 	vcmpe.f32	s19, s15
 23e8e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e8e9e:	f100 8092 	bmi.w	23e8fc6 <_Z6OBS_Dov+0x5f6>
 23e8ea2:	eddf 7a58 	vldr	s15, [pc, #352]	; 23e9004 <_Z6OBS_Dov+0x634>
 23e8ea6:	eef4 9a67 	vcmp.f32	s19, s15
 23e8eaa:	eddf 7a50 	vldr	s15, [pc, #320]	; 23e8fec <_Z6OBS_Dov+0x61c>
 23e8eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e8eb2:	fe77 9aa9 	vselgt.f32	s19, s15, s19
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23e8eb6:	eeb4 8a48 	vcmp.f32	s16, s16
 23e8eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e8ebe:	f180 8085 	bvs.w	23e8fcc <_Z6OBS_Dov+0x5fc>
 23e8ec2:	eddf 7a51 	vldr	s15, [pc, #324]	; 23e9008 <_Z6OBS_Dov+0x638>
 23e8ec6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23e8eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e8ece:	d47d      	bmi.n	23e8fcc <_Z6OBS_Dov+0x5fc>
 23e8ed0:	eddf 7a4e 	vldr	s15, [pc, #312]	; 23e900c <_Z6OBS_Dov+0x63c>
 23e8ed4:	eeb4 8a67 	vcmp.f32	s16, s15
 23e8ed8:	eddf 7a44 	vldr	s15, [pc, #272]	; 23e8fec <_Z6OBS_Dov+0x61c>
 23e8edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e8ee0:	fe37 8a88 	vselgt.f32	s16, s15, s16
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23e8ee4:	eef4 8a68 	vcmp.f32	s17, s17
 23e8ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e8eec:	d671      	bvs.n	23e8fd2 <_Z6OBS_Dov+0x602>
 23e8eee:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 23e8ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e8ef6:	d46c      	bmi.n	23e8fd2 <_Z6OBS_Dov+0x602>
 23e8ef8:	eddf 7a3f 	vldr	s15, [pc, #252]	; 23e8ff8 <_Z6OBS_Dov+0x628>
 23e8efc:	eef4 8a67 	vcmp.f32	s17, s15
 23e8f00:	eddf 7a3a 	vldr	s15, [pc, #232]	; 23e8fec <_Z6OBS_Dov+0x61c>
 23e8f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e8f08:	fe77 8aa8 	vselgt.f32	s17, s15, s17
    obs[oidx].sensor[sidx].type = F_OBS;
 23e8f0c:	f640 2798 	movw	r7, #2712	; 0xa98
 23e8f10:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23e8f14:	f04f 0801 	mov.w	r8, #1
    strcpy (obs[oidx].sensor[sidx].id, "bp1");
 23e8f18:	f506 7098 	add.w	r0, r6, #304	; 0x130
 23e8f1c:	493c      	ldr	r1, [pc, #240]	; (23e9010 <_Z6OBS_Dov+0x640>)
 23e8f1e:	4420      	add	r0, r4
 23e8f20:	f013 fad6 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23e8f24:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "bt1");
 23e8f26:	f506 70a6 	add.w	r0, r6, #332	; 0x14c
    obs[oidx].sensor[sidx].type = F_OBS;
 23e8f2a:	fb07 4703 	mla	r7, r7, r3, r4
    strcpy (obs[oidx].sensor[sidx].id, "bt1");
 23e8f2e:	4939      	ldr	r1, [pc, #228]	; (23e9014 <_Z6OBS_Dov+0x644>)
    obs[oidx].sensor[sidx].f_obs = p;
 23e8f30:	edc7 9a4f 	vstr	s19, [r7, #316]	; 0x13c
    obs[oidx].sensor[sidx].type = F_OBS;
 23e8f34:	f8c7 a138 	str.w	sl, [r7, #312]	; 0x138
    obs[oidx].sensor[sidx++].inuse = true;
 23e8f38:	f887 8148 	strb.w	r8, [r7, #328]	; 0x148
    strcpy (obs[oidx].sensor[sidx].id, "bt1");
 23e8f3c:	4420      	add	r0, r4
 23e8f3e:	f013 fac7 	bl	23fc4d0 <strcpy>
    if (BMX_1_type == BMX_TYPE_BME280) {
 23e8f42:	f899 3000 	ldrb.w	r3, [r9]
    obs[oidx].sensor[sidx].f_obs = t;
 23e8f46:	ed87 8a56 	vstr	s16, [r7, #344]	; 0x158
    if (BMX_1_type == BMX_TYPE_BME280) {
 23e8f4a:	2b02      	cmp	r3, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23e8f4c:	f8c7 a154 	str.w	sl, [r7, #340]	; 0x154
    obs[oidx].sensor[sidx++].inuse = true;
 23e8f50:	f887 8164 	strb.w	r8, [r7, #356]	; 0x164
    if (BMX_1_type == BMX_TYPE_BME280) {
 23e8f54:	d143      	bne.n	23e8fde <_Z6OBS_Dov+0x60e>
      strcpy (obs[oidx].sensor[sidx].id, "bh1");
 23e8f56:	f506 70b4 	add.w	r0, r6, #360	; 0x168
 23e8f5a:	492f      	ldr	r1, [pc, #188]	; (23e9018 <_Z6OBS_Dov+0x648>)
 23e8f5c:	4420      	add	r0, r4
 23e8f5e:	f013 fab7 	bl	23fc4d0 <strcpy>
      obs[oidx].sensor[sidx++].inuse = true;
 23e8f62:	f887 8180 	strb.w	r8, [r7, #384]	; 0x180
      obs[oidx].sensor[sidx].f_obs = h;
 23e8f66:	edc7 8a5d 	vstr	s17, [r7, #372]	; 0x174
      obs[oidx].sensor[sidx++].inuse = true;
 23e8f6a:	f04f 080d 	mov.w	r8, #13
      obs[oidx].sensor[sidx].type = F_OBS;
 23e8f6e:	f8c7 a170 	str.w	sl, [r7, #368]	; 0x170
  if (BMX_2_exists) {
 23e8f72:	4b2a      	ldr	r3, [pc, #168]	; (23e901c <_Z6OBS_Dov+0x64c>)
 23e8f74:	781b      	ldrb	r3, [r3, #0]
 23e8f76:	2b00      	cmp	r3, #0
 23e8f78:	f000 8108 	beq.w	23e918c <_Z6OBS_Dov+0x7bc>
    if (BMX_2_chip_id == BMP280_CHIP_ID) {
 23e8f7c:	4b28      	ldr	r3, [pc, #160]	; (23e9020 <_Z6OBS_Dov+0x650>)
 23e8f7e:	781b      	ldrb	r3, [r3, #0]
 23e8f80:	2b58      	cmp	r3, #88	; 0x58
 23e8f82:	d151      	bne.n	23e9028 <_Z6OBS_Dov+0x658>
      p = bmp2.readPressure()/100.0F;       // bp2 hPa
 23e8f84:	4827      	ldr	r0, [pc, #156]	; (23e9024 <_Z6OBS_Dov+0x654>)
 23e8f86:	f005 f8bd 	bl	23ee104 <_ZN15Adafruit_BMP28012readPressureEv>
 23e8f8a:	eddf 7a1b 	vldr	s15, [pc, #108]	; 23e8ff8 <_Z6OBS_Dov+0x628>
      t = bmp2.readTemperature();           // bt2
 23e8f8e:	4825      	ldr	r0, [pc, #148]	; (23e9024 <_Z6OBS_Dov+0x654>)
      p = bmp2.readPressure()/100.0F;       // bp2 hPa
 23e8f90:	eec0 9a27 	vdiv.f32	s19, s0, s15
      t = bmp2.readTemperature();           // bt2
 23e8f94:	f005 f876 	bl	23ee084 <_ZN15Adafruit_BMP28015readTemperatureEv>
      t = bm32.readTemperature();           // bt2
 23e8f98:	eeb0 8a40 	vmov.f32	s16, s0
    float h = 0.0;
 23e8f9c:	eddf 8a12 	vldr	s17, [pc, #72]	; 23e8fe8 <_Z6OBS_Dov+0x618>
 23e8fa0:	e06a      	b.n	23e9078 <_Z6OBS_Dov+0x6a8>
    float h = 0.0;
 23e8fa2:	eddf 8a11 	vldr	s17, [pc, #68]	; 23e8fe8 <_Z6OBS_Dov+0x618>
    float t = 0.0;
 23e8fa6:	eeb0 8a68 	vmov.f32	s16, s17
    float p = 0.0;
 23e8faa:	eef0 9a68 	vmov.f32	s19, s17
 23e8fae:	e75a      	b.n	23e8e66 <_Z6OBS_Dov+0x496>
      p = bm31.readPressure()/100.0F;       // bp1 hPa
 23e8fb0:	4812      	ldr	r0, [pc, #72]	; (23e8ffc <_Z6OBS_Dov+0x62c>)
 23e8fb2:	f005 fab2 	bl	23ee51a <_ZN15Adafruit_BMP3XX12readPressureEv>
 23e8fb6:	eddf 7a10 	vldr	s15, [pc, #64]	; 23e8ff8 <_Z6OBS_Dov+0x628>
      t = bm31.readTemperature();           // bt1
 23e8fba:	4810      	ldr	r0, [pc, #64]	; (23e8ffc <_Z6OBS_Dov+0x62c>)
      p = bm31.readPressure()/100.0F;       // bp1 hPa
 23e8fbc:	eec0 9a27 	vdiv.f32	s19, s0, s15
      t = bm31.readTemperature();           // bt1
 23e8fc0:	f005 faa0 	bl	23ee504 <_ZN15Adafruit_BMP3XX15readTemperatureEv>
 23e8fc4:	e71b      	b.n	23e8dfe <_Z6OBS_Dov+0x42e>
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23e8fc6:	eddf 9a09 	vldr	s19, [pc, #36]	; 23e8fec <_Z6OBS_Dov+0x61c>
 23e8fca:	e774      	b.n	23e8eb6 <_Z6OBS_Dov+0x4e6>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23e8fcc:	ed9f 8a07 	vldr	s16, [pc, #28]	; 23e8fec <_Z6OBS_Dov+0x61c>
 23e8fd0:	e788      	b.n	23e8ee4 <_Z6OBS_Dov+0x514>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23e8fd2:	eddf 8a06 	vldr	s17, [pc, #24]	; 23e8fec <_Z6OBS_Dov+0x61c>
 23e8fd6:	e799      	b.n	23e8f0c <_Z6OBS_Dov+0x53c>
  obs[oidx].sensor[sidx++].inuse = true;
 23e8fd8:	f04f 080a 	mov.w	r8, #10
 23e8fdc:	e7c9      	b.n	23e8f72 <_Z6OBS_Dov+0x5a2>
    obs[oidx].sensor[sidx++].inuse = true;
 23e8fde:	f04f 080c 	mov.w	r8, #12
 23e8fe2:	e7c6      	b.n	23e8f72 <_Z6OBS_Dov+0x5a2>
 23e8fe4:	1006abe8 	.word	0x1006abe8
 23e8fe8:	00000000 	.word	0x00000000
 23e8fec:	c479f99a 	.word	0xc479f99a
 23e8ff0:	fffffc19 	.word	0xfffffc19
 23e8ff4:	1006ab38 	.word	0x1006ab38
 23e8ff8:	42c80000 	.word	0x42c80000
 23e8ffc:	1006a938 	.word	0x1006a938
 23e9000:	43960000 	.word	0x43960000
 23e9004:	44898000 	.word	0x44898000
 23e9008:	c2200000 	.word	0xc2200000
 23e900c:	42700000 	.word	0x42700000
 23e9010:	023fdc2e 	.word	0x023fdc2e
 23e9014:	023fdc32 	.word	0x023fdc32
 23e9018:	023fdc36 	.word	0x023fdc36
 23e901c:	1006a275 	.word	0x1006a275
 23e9020:	1006a274 	.word	0x1006a274
 23e9024:	1006ac28 	.word	0x1006ac28
    else if (BMX_2_chip_id == BME280_BMP390_CHIP_ID) {
 23e9028:	2b60      	cmp	r3, #96	; 0x60
 23e902a:	f041 8325 	bne.w	23ea678 <_Z6OBS_Dov+0x1ca8>
      if (BMX_2_type == BMX_TYPE_BME280) {
 23e902e:	4edc      	ldr	r6, [pc, #880]	; (23e93a0 <_Z6OBS_Dov+0x9d0>)
 23e9030:	7833      	ldrb	r3, [r6, #0]
 23e9032:	2b02      	cmp	r3, #2
 23e9034:	f041 8318 	bne.w	23ea668 <_Z6OBS_Dov+0x1c98>
        p = bme2.readPressure()/100.0F;     // bp2 hPa
 23e9038:	48da      	ldr	r0, [pc, #872]	; (23e93a4 <_Z6OBS_Dov+0x9d4>)
 23e903a:	f004 fc1b 	bl	23ed874 <_ZN15Adafruit_BME28012readPressureEv>
 23e903e:	eddf 7ada 	vldr	s15, [pc, #872]	; 23e93a8 <_Z6OBS_Dov+0x9d8>
        t = bme2.readTemperature();         // bt2
 23e9042:	48d8      	ldr	r0, [pc, #864]	; (23e93a4 <_Z6OBS_Dov+0x9d4>)
        p = bme2.readPressure()/100.0F;     // bp2 hPa
 23e9044:	eec0 9a27 	vdiv.f32	s19, s0, s15
        t = bme2.readTemperature();         // bt2
 23e9048:	f004 fbe2 	bl	23ed810 <_ZN15Adafruit_BME28015readTemperatureEv>
        h = bme2.readHumidity();            // bh2 
 23e904c:	48d5      	ldr	r0, [pc, #852]	; (23e93a4 <_Z6OBS_Dov+0x9d4>)
        t = bme2.readTemperature();         // bt2
 23e904e:	eeb0 8a40 	vmov.f32	s16, s0
        h = bme2.readHumidity();            // bh2 
 23e9052:	f004 fcdf 	bl	23eda14 <_ZN15Adafruit_BME28012readHumidityEv>
 23e9056:	eef0 8a40 	vmov.f32	s17, s0
      if (BMX_2_type == BMX_TYPE_BMP390) {
 23e905a:	7833      	ldrb	r3, [r6, #0]
 23e905c:	2b04      	cmp	r3, #4
 23e905e:	d10b      	bne.n	23e9078 <_Z6OBS_Dov+0x6a8>
        p = bm32.readPressure()/100.0F;     // bp2 hPa
 23e9060:	48d2      	ldr	r0, [pc, #840]	; (23e93ac <_Z6OBS_Dov+0x9dc>)
 23e9062:	f005 fa5a 	bl	23ee51a <_ZN15Adafruit_BMP3XX12readPressureEv>
 23e9066:	eddf 7ad0 	vldr	s15, [pc, #832]	; 23e93a8 <_Z6OBS_Dov+0x9d8>
        t = bm32.readTemperature();         // bt2       
 23e906a:	48d0      	ldr	r0, [pc, #832]	; (23e93ac <_Z6OBS_Dov+0x9dc>)
        p = bm32.readPressure()/100.0F;     // bp2 hPa
 23e906c:	eec0 9a27 	vdiv.f32	s19, s0, s15
        t = bm32.readTemperature();         // bt2       
 23e9070:	f005 fa48 	bl	23ee504 <_ZN15Adafruit_BMP3XX15readTemperatureEv>
 23e9074:	eeb0 8a40 	vmov.f32	s16, s0
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23e9078:	eef4 9a69 	vcmp.f32	s19, s19
 23e907c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9080:	f181 8306 	bvs.w	23ea690 <_Z6OBS_Dov+0x1cc0>
 23e9084:	eddf 7aca 	vldr	s15, [pc, #808]	; 23e93b0 <_Z6OBS_Dov+0x9e0>
 23e9088:	eef4 9ae7 	vcmpe.f32	s19, s15
 23e908c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9090:	f101 82fe 	bmi.w	23ea690 <_Z6OBS_Dov+0x1cc0>
 23e9094:	eddf 7ac7 	vldr	s15, [pc, #796]	; 23e93b4 <_Z6OBS_Dov+0x9e4>
 23e9098:	eef4 9a67 	vcmp.f32	s19, s15
 23e909c:	eddf 7ad6 	vldr	s15, [pc, #856]	; 23e93f8 <_Z6OBS_Dov+0xa28>
 23e90a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e90a4:	fe77 9aa9 	vselgt.f32	s19, s15, s19
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23e90a8:	eeb4 8a48 	vcmp.f32	s16, s16
 23e90ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e90b0:	f181 82f2 	bvs.w	23ea698 <_Z6OBS_Dov+0x1cc8>
 23e90b4:	eddf 7ace 	vldr	s15, [pc, #824]	; 23e93f0 <_Z6OBS_Dov+0xa20>
 23e90b8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23e90bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e90c0:	f101 82ea 	bmi.w	23ea698 <_Z6OBS_Dov+0x1cc8>
 23e90c4:	eddf 7acb 	vldr	s15, [pc, #812]	; 23e93f4 <_Z6OBS_Dov+0xa24>
 23e90c8:	eeb4 8a67 	vcmp.f32	s16, s15
 23e90cc:	eddf 7aca 	vldr	s15, [pc, #808]	; 23e93f8 <_Z6OBS_Dov+0xa28>
 23e90d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e90d4:	fe37 8a88 	vselgt.f32	s16, s15, s16
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23e90d8:	eef4 8a68 	vcmp.f32	s17, s17
 23e90dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e90e0:	f181 82de 	bvs.w	23ea6a0 <_Z6OBS_Dov+0x1cd0>
 23e90e4:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 23e90e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e90ec:	f101 82d8 	bmi.w	23ea6a0 <_Z6OBS_Dov+0x1cd0>
 23e90f0:	eddf 7aad 	vldr	s15, [pc, #692]	; 23e93a8 <_Z6OBS_Dov+0x9d8>
 23e90f4:	eef4 8a67 	vcmp.f32	s17, s15
 23e90f8:	eddf 7abf 	vldr	s15, [pc, #764]	; 23e93f8 <_Z6OBS_Dov+0xa28>
 23e90fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9100:	fe77 8aa8 	vselgt.f32	s17, s15, s17
    strcpy (obs[oidx].sensor[sidx].id, "bp2");
 23e9104:	f04f 0b1c 	mov.w	fp, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9108:	f640 2698 	movw	r6, #2712	; 0xa98
 23e910c:	fb0b f908 	mul.w	r9, fp, r8
    strcpy (obs[oidx].sensor[sidx].id, "bp2");
 23e9110:	eb05 0009 	add.w	r0, r5, r9
 23e9114:	49a8      	ldr	r1, [pc, #672]	; (23e93b8 <_Z6OBS_Dov+0x9e8>)
 23e9116:	4420      	add	r0, r4
 23e9118:	f013 f9da 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23e911c:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23e911e:	f04f 0a01 	mov.w	sl, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9122:	435e      	muls	r6, r3
 23e9124:	2300      	movs	r3, #0
 23e9126:	eb09 0206 	add.w	r2, r9, r6
    strcpy (obs[oidx].sensor[sidx].id, "bt2");
 23e912a:	eb09 000b 	add.w	r0, r9, fp
    obs[oidx].sensor[sidx].type = F_OBS;
 23e912e:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "bt2");
 23e9130:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9132:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = p;
 23e9134:	edc2 9a09 	vstr	s19, [r2, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23e9138:	f882 a030 	strb.w	sl, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "bt2");
 23e913c:	499f      	ldr	r1, [pc, #636]	; (23e93bc <_Z6OBS_Dov+0x9ec>)
 23e913e:	4420      	add	r0, r4
 23e9140:	f013 f9c6 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9144:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23e9146:	f108 0701 	add.w	r7, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23e914a:	fb0b 6207 	mla	r2, fp, r7, r6
 23e914e:	4422      	add	r2, r4
    obs[oidx].sensor[sidx].f_obs = t;
 23e9150:	ed82 8a09 	vstr	s16, [r2, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9154:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23e9156:	f882 a030 	strb.w	sl, [r2, #48]	; 0x30
    if (BMX_2_type == BMX_TYPE_BME280) {
 23e915a:	4a91      	ldr	r2, [pc, #580]	; (23e93a0 <_Z6OBS_Dov+0x9d0>)
    obs[oidx].sensor[sidx++].inuse = true;
 23e915c:	f108 0702 	add.w	r7, r8, #2
    if (BMX_2_type == BMX_TYPE_BME280) {
 23e9160:	7812      	ldrb	r2, [r2, #0]
 23e9162:	2a02      	cmp	r2, #2
 23e9164:	f041 82a0 	bne.w	23ea6a8 <_Z6OBS_Dov+0x1cd8>
      obs[oidx].sensor[sidx].type = F_OBS;
 23e9168:	fb0b 6607 	mla	r6, fp, r7, r6
      strcpy (obs[oidx].sensor[sidx].id, "bh2");
 23e916c:	f109 0038 	add.w	r0, r9, #56	; 0x38
 23e9170:	4428      	add	r0, r5
 23e9172:	4993      	ldr	r1, [pc, #588]	; (23e93c0 <_Z6OBS_Dov+0x9f0>)
 23e9174:	4420      	add	r0, r4
 23e9176:	f013 f9ab 	bl	23fc4d0 <strcpy>
      obs[oidx].sensor[sidx].type = F_OBS;
 23e917a:	4426      	add	r6, r4
 23e917c:	2300      	movs	r3, #0
      obs[oidx].sensor[sidx].f_obs = h;
 23e917e:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
      obs[oidx].sensor[sidx].type = F_OBS;
 23e9182:	6233      	str	r3, [r6, #32]
      obs[oidx].sensor[sidx++].inuse = true;
 23e9184:	f108 0803 	add.w	r8, r8, #3
 23e9188:	f886 a030 	strb.w	sl, [r6, #48]	; 0x30
  if (HTU21DF_exists) {
 23e918c:	4b8d      	ldr	r3, [pc, #564]	; (23e93c4 <_Z6OBS_Dov+0x9f4>)
 23e918e:	781b      	ldrb	r3, [r3, #0]
 23e9190:	2b00      	cmp	r3, #0
 23e9192:	d070      	beq.n	23e9276 <_Z6OBS_Dov+0x8a6>
    strcpy (obs[oidx].sensor[sidx].id, "hh1");
 23e9194:	261c      	movs	r6, #28
 23e9196:	fb06 f608 	mul.w	r6, r6, r8
 23e919a:	19a8      	adds	r0, r5, r6
 23e919c:	498a      	ldr	r1, [pc, #552]	; (23e93c8 <_Z6OBS_Dov+0x9f8>)
 23e919e:	4420      	add	r0, r4
 23e91a0:	f013 f996 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23e91a4:	f640 2398 	movw	r3, #2712	; 0xa98
 23e91a8:	9a00      	ldr	r2, [sp, #0]
    h = htu.readHumidity();
 23e91aa:	4888      	ldr	r0, [pc, #544]	; (23e93cc <_Z6OBS_Dov+0x9fc>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23e91ac:	fb03 6302 	mla	r3, r3, r2, r6
 23e91b0:	2200      	movs	r2, #0
 23e91b2:	4423      	add	r3, r4
 23e91b4:	621a      	str	r2, [r3, #32]
    h = htu.readHumidity();
 23e91b6:	f006 f9f9 	bl	23ef5ac <_ZN16Adafruit_HTU21DF12readHumidityEv>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23e91ba:	eeb4 0a40 	vcmp.f32	s0, s0
 23e91be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e91c2:	f181 8274 	bvs.w	23ea6ae <_Z6OBS_Dov+0x1cde>
 23e91c6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23e91ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e91ce:	f101 826e 	bmi.w	23ea6ae <_Z6OBS_Dov+0x1cde>
 23e91d2:	eddf 7a75 	vldr	s15, [pc, #468]	; 23e93a8 <_Z6OBS_Dov+0x9d8>
 23e91d6:	eeb4 0a67 	vcmp.f32	s0, s15
 23e91da:	eddf 7a87 	vldr	s15, [pc, #540]	; 23e93f8 <_Z6OBS_Dov+0xa28>
 23e91de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e91e2:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = h;
 23e91e6:	f640 2998 	movw	r9, #2712	; 0xa98
 23e91ea:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx++].inuse = true;
 23e91ee:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = h;
 23e91f0:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "ht1");
 23e91f2:	eb06 000a 	add.w	r0, r6, sl
    obs[oidx].sensor[sidx].f_obs = h;
 23e91f6:	fb09 f903 	mul.w	r9, r9, r3
 23e91fa:	fb0a 9308 	mla	r3, sl, r8, r9
    strcpy (obs[oidx].sensor[sidx].id, "ht1");
 23e91fe:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = h;
 23e9200:	4423      	add	r3, r4
 23e9202:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23e9206:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "ht1");
 23e920a:	4971      	ldr	r1, [pc, #452]	; (23e93d0 <_Z6OBS_Dov+0xa00>)
 23e920c:	4420      	add	r0, r4
 23e920e:	f013 f95f 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9212:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23e9214:	f108 0701 	add.w	r7, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9218:	fb0a 9907 	mla	r9, sl, r7, r9
 23e921c:	44a1      	add	r9, r4
    t = htu.readTemperature();
 23e921e:	486b      	ldr	r0, [pc, #428]	; (23e93cc <_Z6OBS_Dov+0x9fc>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9220:	f8c9 3020 	str.w	r3, [r9, #32]
    t = htu.readTemperature();
 23e9224:	f006 f982 	bl	23ef52c <_ZN16Adafruit_HTU21DF15readTemperatureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23e9228:	eeb4 0a40 	vcmp.f32	s0, s0
 23e922c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9230:	f181 8241 	bvs.w	23ea6b6 <_Z6OBS_Dov+0x1ce6>
 23e9234:	eddf 7a6e 	vldr	s15, [pc, #440]	; 23e93f0 <_Z6OBS_Dov+0xa20>
 23e9238:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23e923c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9240:	f101 8239 	bmi.w	23ea6b6 <_Z6OBS_Dov+0x1ce6>
 23e9244:	eddf 7a6b 	vldr	s15, [pc, #428]	; 23e93f4 <_Z6OBS_Dov+0xa24>
 23e9248:	eeb4 0a67 	vcmp.f32	s0, s15
 23e924c:	eddf 7a6a 	vldr	s15, [pc, #424]	; 23e93f8 <_Z6OBS_Dov+0xa28>
 23e9250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9254:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23e9258:	f640 2398 	movw	r3, #2712	; 0xa98
 23e925c:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23e925e:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].f_obs = t;
 23e9262:	4353      	muls	r3, r2
 23e9264:	221c      	movs	r2, #28
 23e9266:	fb02 3307 	mla	r3, r2, r7, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23e926a:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23e926c:	4423      	add	r3, r4
 23e926e:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23e9272:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  if (SHT_1_exists) {
 23e9276:	4b57      	ldr	r3, [pc, #348]	; (23e93d4 <_Z6OBS_Dov+0xa04>)
 23e9278:	781b      	ldrb	r3, [r3, #0]
 23e927a:	2b00      	cmp	r3, #0
 23e927c:	f001 825a 	beq.w	23ea734 <_Z6OBS_Dov+0x1d64>
    strcpy (obs[oidx].sensor[sidx].id, "st1");
 23e9280:	261c      	movs	r6, #28
 23e9282:	fb06 f608 	mul.w	r6, r6, r8
 23e9286:	19a8      	adds	r0, r5, r6
 23e9288:	4953      	ldr	r1, [pc, #332]	; (23e93d8 <_Z6OBS_Dov+0xa08>)
 23e928a:	4420      	add	r0, r4
 23e928c:	f013 f920 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9290:	f640 2398 	movw	r3, #2712	; 0xa98
 23e9294:	9a00      	ldr	r2, [sp, #0]
    t = sht1.readTemperature();
 23e9296:	4851      	ldr	r0, [pc, #324]	; (23e93dc <_Z6OBS_Dov+0xa0c>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9298:	fb03 6302 	mla	r3, r3, r2, r6
 23e929c:	2200      	movs	r2, #0
 23e929e:	4423      	add	r3, r4
 23e92a0:	621a      	str	r2, [r3, #32]
    t = sht1.readTemperature();
 23e92a2:	f006 fcf7 	bl	23efc94 <_ZN14Adafruit_SHT3115readTemperatureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23e92a6:	eeb4 0a40 	vcmp.f32	s0, s0
 23e92aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e92ae:	f181 8239 	bvs.w	23ea724 <_Z6OBS_Dov+0x1d54>
 23e92b2:	eddf 7a4f 	vldr	s15, [pc, #316]	; 23e93f0 <_Z6OBS_Dov+0xa20>
 23e92b6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23e92ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e92be:	f101 8231 	bmi.w	23ea724 <_Z6OBS_Dov+0x1d54>
 23e92c2:	eddf 7a4c 	vldr	s15, [pc, #304]	; 23e93f4 <_Z6OBS_Dov+0xa24>
 23e92c6:	eeb4 0a67 	vcmp.f32	s0, s15
 23e92ca:	eddf 7a4b 	vldr	s15, [pc, #300]	; 23e93f8 <_Z6OBS_Dov+0xa28>
 23e92ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e92d2:	fe37 8a80 	vselgt.f32	s16, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23e92d6:	f640 2998 	movw	r9, #2712	; 0xa98
 23e92da:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx++].inuse = true;
 23e92de:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23e92e0:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "sh1");
 23e92e2:	eb06 000a 	add.w	r0, r6, sl
    obs[oidx].sensor[sidx].f_obs = t;
 23e92e6:	fb09 f903 	mul.w	r9, r9, r3
 23e92ea:	fb0a 9308 	mla	r3, sl, r8, r9
    strcpy (obs[oidx].sensor[sidx].id, "sh1");
 23e92ee:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = t;
 23e92f0:	4423      	add	r3, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23e92f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    obs[oidx].sensor[sidx].f_obs = t;
 23e92f6:	ed83 8a09 	vstr	s16, [r3, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "sh1");
 23e92fa:	4939      	ldr	r1, [pc, #228]	; (23e93e0 <_Z6OBS_Dov+0xa10>)
 23e92fc:	4420      	add	r0, r4
 23e92fe:	f013 f8e7 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9302:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23e9304:	f108 0701 	add.w	r7, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9308:	fb0a 9907 	mla	r9, sl, r7, r9
 23e930c:	44a1      	add	r9, r4
    h = sht1.readHumidity();
 23e930e:	4833      	ldr	r0, [pc, #204]	; (23e93dc <_Z6OBS_Dov+0xa0c>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9310:	f8c9 3020 	str.w	r3, [r9, #32]
    h = sht1.readHumidity();
 23e9314:	f006 fccc 	bl	23efcb0 <_ZN14Adafruit_SHT3112readHumidityEv>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23e9318:	eeb4 0a40 	vcmp.f32	s0, s0
 23e931c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9320:	f181 8204 	bvs.w	23ea72c <_Z6OBS_Dov+0x1d5c>
 23e9324:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23e9328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e932c:	f101 81fe 	bmi.w	23ea72c <_Z6OBS_Dov+0x1d5c>
 23e9330:	eddf 7a1d 	vldr	s15, [pc, #116]	; 23e93a8 <_Z6OBS_Dov+0x9d8>
 23e9334:	eeb4 0a67 	vcmp.f32	s0, s15
 23e9338:	eddf 7a2f 	vldr	s15, [pc, #188]	; 23e93f8 <_Z6OBS_Dov+0xa28>
 23e933c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9340:	fe77 9a80 	vselgt.f32	s19, s15, s0
    obs[oidx].sensor[sidx].f_obs = h;
 23e9344:	f640 2398 	movw	r3, #2712	; 0xa98
 23e9348:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23e934a:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].f_obs = h;
 23e934e:	4353      	muls	r3, r2
 23e9350:	221c      	movs	r2, #28
 23e9352:	fb02 3307 	mla	r3, r2, r7, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23e9356:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = h;
 23e9358:	4423      	add	r3, r4
 23e935a:	edc3 9a09 	vstr	s19, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23e935e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  if (SHT_2_exists) {
 23e9362:	4b20      	ldr	r3, [pc, #128]	; (23e93e4 <_Z6OBS_Dov+0xa14>)
 23e9364:	781b      	ldrb	r3, [r3, #0]
 23e9366:	2b00      	cmp	r3, #0
 23e9368:	f000 80a0 	beq.w	23e94ac <_Z6OBS_Dov+0xadc>
    strcpy (obs[oidx].sensor[sidx].id, "st2");
 23e936c:	261c      	movs	r6, #28
 23e936e:	fb06 f608 	mul.w	r6, r6, r8
 23e9372:	19a8      	adds	r0, r5, r6
 23e9374:	491c      	ldr	r1, [pc, #112]	; (23e93e8 <_Z6OBS_Dov+0xa18>)
 23e9376:	4420      	add	r0, r4
 23e9378:	f013 f8aa 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23e937c:	f640 2398 	movw	r3, #2712	; 0xa98
 23e9380:	9a00      	ldr	r2, [sp, #0]
    t = sht2.readTemperature();
 23e9382:	481a      	ldr	r0, [pc, #104]	; (23e93ec <_Z6OBS_Dov+0xa1c>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9384:	fb03 6302 	mla	r3, r3, r2, r6
 23e9388:	2200      	movs	r2, #0
 23e938a:	4423      	add	r3, r4
 23e938c:	621a      	str	r2, [r3, #32]
    t = sht2.readTemperature();
 23e938e:	f006 fc81 	bl	23efc94 <_ZN14Adafruit_SHT3115readTemperatureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23e9392:	eeb4 0a40 	vcmp.f32	s0, s0
 23e9396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e939a:	f181 81d1 	bvs.w	23ea740 <_Z6OBS_Dov+0x1d70>
 23e939e:	e02d      	b.n	23e93fc <_Z6OBS_Dov+0xa2c>
 23e93a0:	1006a276 	.word	0x1006a276
 23e93a4:	1006ab90 	.word	0x1006ab90
 23e93a8:	42c80000 	.word	0x42c80000
 23e93ac:	1006aa38 	.word	0x1006aa38
 23e93b0:	43960000 	.word	0x43960000
 23e93b4:	44898000 	.word	0x44898000
 23e93b8:	023fdc3a 	.word	0x023fdc3a
 23e93bc:	023fdc3e 	.word	0x023fdc3e
 23e93c0:	023fdc42 	.word	0x023fdc42
 23e93c4:	1006a2a0 	.word	0x1006a2a0
 23e93c8:	023fdc46 	.word	0x023fdc46
 23e93cc:	1006ae80 	.word	0x1006ae80
 23e93d0:	023fdc4a 	.word	0x023fdc4a
 23e93d4:	1006a7c4 	.word	0x1006a7c4
 23e93d8:	023fdc4e 	.word	0x023fdc4e
 23e93dc:	1007aba4 	.word	0x1007aba4
 23e93e0:	023fdc52 	.word	0x023fdc52
 23e93e4:	1006a7c5 	.word	0x1006a7c5
 23e93e8:	023fdc56 	.word	0x023fdc56
 23e93ec:	1007abb4 	.word	0x1007abb4
 23e93f0:	c2200000 	.word	0xc2200000
 23e93f4:	42700000 	.word	0x42700000
 23e93f8:	c479f99a 	.word	0xc479f99a
 23e93fc:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 23e93f0 <_Z6OBS_Dov+0xa20>
 23e9400:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23e9404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9408:	f101 819a 	bmi.w	23ea740 <_Z6OBS_Dov+0x1d70>
 23e940c:	ed5f 7a07 	vldr	s15, [pc, #-28]	; 23e93f4 <_Z6OBS_Dov+0xa24>
 23e9410:	eeb4 0a67 	vcmp.f32	s0, s15
 23e9414:	ed5f 7a08 	vldr	s15, [pc, #-32]	; 23e93f8 <_Z6OBS_Dov+0xa28>
 23e9418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e941c:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23e9420:	f640 2998 	movw	r9, #2712	; 0xa98
 23e9424:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx++].inuse = true;
 23e9428:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23e942a:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "sh2");
 23e942c:	eb06 000a 	add.w	r0, r6, sl
    obs[oidx].sensor[sidx].f_obs = t;
 23e9430:	fb09 f903 	mul.w	r9, r9, r3
 23e9434:	fb0a 9308 	mla	r3, sl, r8, r9
    strcpy (obs[oidx].sensor[sidx].id, "sh2");
 23e9438:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = t;
 23e943a:	4423      	add	r3, r4
 23e943c:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23e9440:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "sh2");
 23e9444:	49ce      	ldr	r1, [pc, #824]	; (23e9780 <_Z6OBS_Dov+0xdb0>)
 23e9446:	4420      	add	r0, r4
 23e9448:	f013 f842 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23e944c:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23e944e:	f108 0701 	add.w	r7, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9452:	fb0a 9907 	mla	r9, sl, r7, r9
 23e9456:	44a1      	add	r9, r4
    h = sht2.readHumidity();
 23e9458:	48ca      	ldr	r0, [pc, #808]	; (23e9784 <_Z6OBS_Dov+0xdb4>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23e945a:	f8c9 3020 	str.w	r3, [r9, #32]
    h = sht2.readHumidity();
 23e945e:	f006 fc27 	bl	23efcb0 <_ZN14Adafruit_SHT3112readHumidityEv>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23e9462:	eeb4 0a40 	vcmp.f32	s0, s0
 23e9466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e946a:	f181 816d 	bvs.w	23ea748 <_Z6OBS_Dov+0x1d78>
 23e946e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23e9472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9476:	f101 8167 	bmi.w	23ea748 <_Z6OBS_Dov+0x1d78>
 23e947a:	eddf 7ac3 	vldr	s15, [pc, #780]	; 23e9788 <_Z6OBS_Dov+0xdb8>
 23e947e:	eeb4 0a67 	vcmp.f32	s0, s15
 23e9482:	eddf 7ac2 	vldr	s15, [pc, #776]	; 23e978c <_Z6OBS_Dov+0xdbc>
 23e9486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e948a:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = h;
 23e948e:	f640 2398 	movw	r3, #2712	; 0xa98
 23e9492:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23e9494:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].f_obs = h;
 23e9498:	4353      	muls	r3, r2
 23e949a:	221c      	movs	r2, #28
 23e949c:	fb02 3307 	mla	r3, r2, r7, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23e94a0:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = h;
 23e94a2:	4423      	add	r3, r4
 23e94a4:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23e94a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  if (HDC_1_exists) {
 23e94ac:	4bb8      	ldr	r3, [pc, #736]	; (23e9790 <_Z6OBS_Dov+0xdc0>)
 23e94ae:	f8df b324 	ldr.w	fp, [pc, #804]	; 23e97d4 <_Z6OBS_Dov+0xe04>
 23e94b2:	781b      	ldrb	r3, [r3, #0]
 23e94b4:	2b00      	cmp	r3, #0
 23e94b6:	f000 808d 	beq.w	23e95d4 <_Z6OBS_Dov+0xc04>
    double t = -999.9;
 23e94ba:	f20f 2abc 	addw	sl, pc, #700	; 0x2bc
 23e94be:	e9da 9a00 	ldrd	r9, sl, [sl]
    if (hdc1.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0)) {
 23e94c2:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 23e94c6:	48b3      	ldr	r0, [pc, #716]	; (23e9794 <_Z6OBS_Dov+0xdc4>)
 23e94c8:	aa0c      	add	r2, sp, #48	; 0x30
 23e94ca:	a902      	add	r1, sp, #8
    double t = -999.9;
 23e94cc:	e9cd 9a02 	strd	r9, sl, [sp, #8]
    double h = -999.9;
 23e94d0:	e9cd 9a0c 	strd	r9, sl, [sp, #48]	; 0x30
    if (hdc1.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0)) {
 23e94d4:	f005 ff78 	bl	23ef3c8 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>
 23e94d8:	2800      	cmp	r0, #0
 23e94da:	f001 8142 	beq.w	23ea762 <_Z6OBS_Dov+0x1d92>
      t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23e94de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 23e94e2:	4632      	mov	r2, r6
 23e94e4:	463b      	mov	r3, r7
 23e94e6:	4630      	mov	r0, r6
 23e94e8:	4639      	mov	r1, r7
 23e94ea:	f7f9 fb3b 	bl	23e2b64 <__aeabi_dcmpun>
 23e94ee:	2800      	cmp	r0, #0
 23e94f0:	f041 812e 	bne.w	23ea750 <_Z6OBS_Dov+0x1d80>
 23e94f4:	2200      	movs	r2, #0
 23e94f6:	4630      	mov	r0, r6
 23e94f8:	4639      	mov	r1, r7
 23e94fa:	4ba7      	ldr	r3, [pc, #668]	; (23e9798 <_Z6OBS_Dov+0xdc8>)
 23e94fc:	f7f9 fb0a 	bl	23e2b14 <__aeabi_dcmplt>
 23e9500:	2800      	cmp	r0, #0
 23e9502:	f041 8125 	bne.w	23ea750 <_Z6OBS_Dov+0x1d80>
 23e9506:	2200      	movs	r2, #0
 23e9508:	4630      	mov	r0, r6
 23e950a:	4639      	mov	r1, r7
 23e950c:	4ba3      	ldr	r3, [pc, #652]	; (23e979c <_Z6OBS_Dov+0xdcc>)
 23e950e:	f7f9 fb1f 	bl	23e2b50 <__aeabi_dcmpgt>
 23e9512:	2800      	cmp	r0, #0
 23e9514:	f041 811c 	bne.w	23ea750 <_Z6OBS_Dov+0x1d80>
 23e9518:	e9cd 6702 	strd	r6, r7, [sp, #8]
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23e951c:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 23e9520:	4632      	mov	r2, r6
 23e9522:	463b      	mov	r3, r7
 23e9524:	4630      	mov	r0, r6
 23e9526:	4639      	mov	r1, r7
 23e9528:	f7f9 fb1c 	bl	23e2b64 <__aeabi_dcmpun>
 23e952c:	2800      	cmp	r0, #0
 23e952e:	f041 8113 	bne.w	23ea758 <_Z6OBS_Dov+0x1d88>
 23e9532:	2200      	movs	r2, #0
 23e9534:	2300      	movs	r3, #0
 23e9536:	4630      	mov	r0, r6
 23e9538:	4639      	mov	r1, r7
 23e953a:	f7f9 faeb 	bl	23e2b14 <__aeabi_dcmplt>
 23e953e:	2800      	cmp	r0, #0
 23e9540:	f041 810a 	bne.w	23ea758 <_Z6OBS_Dov+0x1d88>
 23e9544:	2200      	movs	r2, #0
 23e9546:	4630      	mov	r0, r6
 23e9548:	4639      	mov	r1, r7
 23e954a:	4b95      	ldr	r3, [pc, #596]	; (23e97a0 <_Z6OBS_Dov+0xdd0>)
 23e954c:	f7f9 fb00 	bl	23e2b50 <__aeabi_dcmpgt>
 23e9550:	2800      	cmp	r0, #0
 23e9552:	f041 8101 	bne.w	23ea758 <_Z6OBS_Dov+0x1d88>
      SystemStatusBits &= ~ SSB_HDC_1;  // Turn Off Bit
 23e9556:	f8db 3000 	ldr.w	r3, [fp]
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23e955a:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
      SystemStatusBits &= ~ SSB_HDC_1;  // Turn Off Bit
 23e955e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
      SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
 23e9562:	f8cb 3000 	str.w	r3, [fp]
    strcpy (obs[oidx].sensor[sidx].id, "hdt1");
 23e9566:	231c      	movs	r3, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9568:	f640 2698 	movw	r6, #2712	; 0xa98
 23e956c:	fb03 f708 	mul.w	r7, r3, r8
    strcpy (obs[oidx].sensor[sidx].id, "hdt1");
 23e9570:	19e8      	adds	r0, r5, r7
 23e9572:	498c      	ldr	r1, [pc, #560]	; (23e97a4 <_Z6OBS_Dov+0xdd4>)
 23e9574:	4420      	add	r0, r4
 23e9576:	f012 ffab 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23e957a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    obs[oidx].sensor[sidx].type = F_OBS;
 23e957e:	2200      	movs	r2, #0
 23e9580:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23e9582:	f04f 0a01 	mov.w	sl, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9586:	435e      	muls	r6, r3
 23e9588:	eb07 0906 	add.w	r9, r7, r6
 23e958c:	44a1      	add	r9, r4
 23e958e:	f8c9 2020 	str.w	r2, [r9, #32]
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23e9592:	f7f9 fb45 	bl	23e2c20 <__aeabi_d2f>
 23e9596:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "hdh1");
 23e959a:	f107 001c 	add.w	r0, r7, #28
 23e959e:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23e95a0:	f108 0301 	add.w	r3, r8, #1
    strcpy (obs[oidx].sensor[sidx].id, "hdh1");
 23e95a4:	4980      	ldr	r1, [pc, #512]	; (23e97a8 <_Z6OBS_Dov+0xdd8>)
    obs[oidx].sensor[sidx++].inuse = true;
 23e95a6:	f889 a030 	strb.w	sl, [r9, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "hdh1");
 23e95aa:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23e95ac:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "hdh1");
 23e95ae:	f012 ff8f 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23e95b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    obs[oidx].sensor[sidx].type = F_OBS;
 23e95b6:	9b01      	ldr	r3, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23e95b8:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23e95bc:	461a      	mov	r2, r3
 23e95be:	231c      	movs	r3, #28
 23e95c0:	fb03 6602 	mla	r6, r3, r2, r6
 23e95c4:	2200      	movs	r2, #0
 23e95c6:	4426      	add	r6, r4
 23e95c8:	6232      	str	r2, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23e95ca:	f7f9 fb29 	bl	23e2c20 <__aeabi_d2f>
    obs[oidx].sensor[sidx++].inuse = true;
 23e95ce:	f886 a030 	strb.w	sl, [r6, #48]	; 0x30
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23e95d2:	6270      	str	r0, [r6, #36]	; 0x24
  if (HDC_2_exists) {
 23e95d4:	4b75      	ldr	r3, [pc, #468]	; (23e97ac <_Z6OBS_Dov+0xddc>)
 23e95d6:	781b      	ldrb	r3, [r3, #0]
 23e95d8:	2b00      	cmp	r3, #0
 23e95da:	f000 808d 	beq.w	23e96f8 <_Z6OBS_Dov+0xd28>
    double t = -999.9;
 23e95de:	f20f 1a98 	addw	sl, pc, #408	; 0x198
 23e95e2:	e9da 9a00 	ldrd	r9, sl, [sl]
    if (hdc2.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0)) {
 23e95e6:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 23e95ea:	4871      	ldr	r0, [pc, #452]	; (23e97b0 <_Z6OBS_Dov+0xde0>)
 23e95ec:	aa0c      	add	r2, sp, #48	; 0x30
 23e95ee:	a902      	add	r1, sp, #8
    double t = -999.9;
 23e95f0:	e9cd 9a02 	strd	r9, sl, [sp, #8]
    double h = -999.9;
 23e95f4:	e9cd 9a0c 	strd	r9, sl, [sp, #48]	; 0x30
    if (hdc2.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0)) {
 23e95f8:	f005 fee6 	bl	23ef3c8 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>
 23e95fc:	2800      	cmp	r0, #0
 23e95fe:	f001 80c2 	beq.w	23ea786 <_Z6OBS_Dov+0x1db6>
      t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23e9602:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 23e9606:	4632      	mov	r2, r6
 23e9608:	463b      	mov	r3, r7
 23e960a:	4630      	mov	r0, r6
 23e960c:	4639      	mov	r1, r7
 23e960e:	f7f9 faa9 	bl	23e2b64 <__aeabi_dcmpun>
 23e9612:	2800      	cmp	r0, #0
 23e9614:	f041 80ae 	bne.w	23ea774 <_Z6OBS_Dov+0x1da4>
 23e9618:	2200      	movs	r2, #0
 23e961a:	4630      	mov	r0, r6
 23e961c:	4639      	mov	r1, r7
 23e961e:	4b5e      	ldr	r3, [pc, #376]	; (23e9798 <_Z6OBS_Dov+0xdc8>)
 23e9620:	f7f9 fa78 	bl	23e2b14 <__aeabi_dcmplt>
 23e9624:	2800      	cmp	r0, #0
 23e9626:	f041 80a5 	bne.w	23ea774 <_Z6OBS_Dov+0x1da4>
 23e962a:	2200      	movs	r2, #0
 23e962c:	4630      	mov	r0, r6
 23e962e:	4639      	mov	r1, r7
 23e9630:	4b5a      	ldr	r3, [pc, #360]	; (23e979c <_Z6OBS_Dov+0xdcc>)
 23e9632:	f7f9 fa8d 	bl	23e2b50 <__aeabi_dcmpgt>
 23e9636:	2800      	cmp	r0, #0
 23e9638:	f041 809c 	bne.w	23ea774 <_Z6OBS_Dov+0x1da4>
 23e963c:	e9cd 6702 	strd	r6, r7, [sp, #8]
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23e9640:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 23e9644:	4632      	mov	r2, r6
 23e9646:	463b      	mov	r3, r7
 23e9648:	4630      	mov	r0, r6
 23e964a:	4639      	mov	r1, r7
 23e964c:	f7f9 fa8a 	bl	23e2b64 <__aeabi_dcmpun>
 23e9650:	2800      	cmp	r0, #0
 23e9652:	f041 8093 	bne.w	23ea77c <_Z6OBS_Dov+0x1dac>
 23e9656:	2200      	movs	r2, #0
 23e9658:	2300      	movs	r3, #0
 23e965a:	4630      	mov	r0, r6
 23e965c:	4639      	mov	r1, r7
 23e965e:	f7f9 fa59 	bl	23e2b14 <__aeabi_dcmplt>
 23e9662:	2800      	cmp	r0, #0
 23e9664:	f041 808a 	bne.w	23ea77c <_Z6OBS_Dov+0x1dac>
 23e9668:	2200      	movs	r2, #0
 23e966a:	4630      	mov	r0, r6
 23e966c:	4639      	mov	r1, r7
 23e966e:	4b4c      	ldr	r3, [pc, #304]	; (23e97a0 <_Z6OBS_Dov+0xdd0>)
 23e9670:	f7f9 fa6e 	bl	23e2b50 <__aeabi_dcmpgt>
 23e9674:	2800      	cmp	r0, #0
 23e9676:	f041 8081 	bne.w	23ea77c <_Z6OBS_Dov+0x1dac>
      SystemStatusBits &= ~ SSB_HDC_2;  // Turn Off Bit
 23e967a:	f8db 3000 	ldr.w	r3, [fp]
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23e967e:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
      SystemStatusBits &= ~ SSB_HDC_2;  // Turn Off Bit
 23e9682:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
      SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
 23e9686:	f8cb 3000 	str.w	r3, [fp]
    strcpy (obs[oidx].sensor[sidx].id, "hdt2");
 23e968a:	231c      	movs	r3, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23e968c:	f640 2698 	movw	r6, #2712	; 0xa98
 23e9690:	fb03 f708 	mul.w	r7, r3, r8
    strcpy (obs[oidx].sensor[sidx].id, "hdt2");
 23e9694:	19e8      	adds	r0, r5, r7
 23e9696:	4947      	ldr	r1, [pc, #284]	; (23e97b4 <_Z6OBS_Dov+0xde4>)
 23e9698:	4420      	add	r0, r4
 23e969a:	f012 ff19 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23e969e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    obs[oidx].sensor[sidx].type = F_OBS;
 23e96a2:	2200      	movs	r2, #0
 23e96a4:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23e96a6:	f04f 0a01 	mov.w	sl, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23e96aa:	435e      	muls	r6, r3
 23e96ac:	eb07 0906 	add.w	r9, r7, r6
 23e96b0:	44a1      	add	r9, r4
 23e96b2:	f8c9 2020 	str.w	r2, [r9, #32]
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23e96b6:	f7f9 fab3 	bl	23e2c20 <__aeabi_d2f>
 23e96ba:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "hdh2");
 23e96be:	f107 001c 	add.w	r0, r7, #28
 23e96c2:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23e96c4:	f108 0301 	add.w	r3, r8, #1
    strcpy (obs[oidx].sensor[sidx].id, "hdh2");
 23e96c8:	493b      	ldr	r1, [pc, #236]	; (23e97b8 <_Z6OBS_Dov+0xde8>)
    obs[oidx].sensor[sidx++].inuse = true;
 23e96ca:	f889 a030 	strb.w	sl, [r9, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "hdh2");
 23e96ce:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23e96d0:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "hdh2");
 23e96d2:	f012 fefd 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23e96d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    obs[oidx].sensor[sidx].type = F_OBS;
 23e96da:	9b01      	ldr	r3, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23e96dc:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23e96e0:	461a      	mov	r2, r3
 23e96e2:	231c      	movs	r3, #28
 23e96e4:	fb03 6602 	mla	r6, r3, r2, r6
 23e96e8:	2200      	movs	r2, #0
 23e96ea:	4426      	add	r6, r4
 23e96ec:	6232      	str	r2, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23e96ee:	f7f9 fa97 	bl	23e2c20 <__aeabi_d2f>
    obs[oidx].sensor[sidx++].inuse = true;
 23e96f2:	f886 a030 	strb.w	sl, [r6, #48]	; 0x30
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23e96f6:	6270      	str	r0, [r6, #36]	; 0x24
  if (LPS_1_exists) {
 23e96f8:	4b30      	ldr	r3, [pc, #192]	; (23e97bc <_Z6OBS_Dov+0xdec>)
 23e96fa:	781b      	ldrb	r3, [r3, #0]
 23e96fc:	2b00      	cmp	r3, #0
 23e96fe:	f000 809a 	beq.w	23e9836 <_Z6OBS_Dov+0xe66>
    float t = lps1.readTemperature();
 23e9702:	482f      	ldr	r0, [pc, #188]	; (23e97c0 <_Z6OBS_Dov+0xdf0>)
 23e9704:	f005 ffa8 	bl	23ef658 <_ZN16Adafruit_LPS35HW15readTemperatureEv>
 23e9708:	eeb0 aa40 	vmov.f32	s20, s0
    float p = lps1.readPressure();
 23e970c:	482c      	ldr	r0, [pc, #176]	; (23e97c0 <_Z6OBS_Dov+0xdf0>)
 23e970e:	f005 ffc5 	bl	23ef69c <_ZN16Adafruit_LPS35HW12readPressureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23e9712:	eeb4 aa4a 	vcmp.f32	s20, s20
 23e9716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float p = lps1.readPressure();
 23e971a:	eef0 8a40 	vmov.f32	s17, s0
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23e971e:	f181 803b 	bvs.w	23ea798 <_Z6OBS_Dov+0x1dc8>
 23e9722:	eddf 7a28 	vldr	s15, [pc, #160]	; 23e97c4 <_Z6OBS_Dov+0xdf4>
 23e9726:	eeb4 aae7 	vcmpe.f32	s20, s15
 23e972a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e972e:	f101 8033 	bmi.w	23ea798 <_Z6OBS_Dov+0x1dc8>
 23e9732:	eddf 7a25 	vldr	s15, [pc, #148]	; 23e97c8 <_Z6OBS_Dov+0xdf8>
 23e9736:	eeb4 aa67 	vcmp.f32	s20, s15
 23e973a:	eddf 7a14 	vldr	s15, [pc, #80]	; 23e978c <_Z6OBS_Dov+0xdbc>
 23e973e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9742:	fe37 aa8a 	vselgt.f32	s20, s15, s20
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23e9746:	eef4 8a68 	vcmp.f32	s17, s17
 23e974a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e974e:	f181 8027 	bvs.w	23ea7a0 <_Z6OBS_Dov+0x1dd0>
 23e9752:	eddf 7a1e 	vldr	s15, [pc, #120]	; 23e97cc <_Z6OBS_Dov+0xdfc>
 23e9756:	eef4 8ae7 	vcmpe.f32	s17, s15
 23e975a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e975e:	f101 801f 	bmi.w	23ea7a0 <_Z6OBS_Dov+0x1dd0>
 23e9762:	eddf 7a1b 	vldr	s15, [pc, #108]	; 23e97d0 <_Z6OBS_Dov+0xe00>
 23e9766:	eef4 8a67 	vcmp.f32	s17, s15
 23e976a:	eddf 7a08 	vldr	s15, [pc, #32]	; 23e978c <_Z6OBS_Dov+0xdbc>
 23e976e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9772:	fe77 8aa8 	vselgt.f32	s17, s15, s17
 23e9776:	e02f      	b.n	23e97d8 <_Z6OBS_Dov+0xe08>
 23e9778:	33333333 	.word	0x33333333
 23e977c:	c08f3f33 	.word	0xc08f3f33
 23e9780:	023fdc5a 	.word	0x023fdc5a
 23e9784:	1007abb4 	.word	0x1007abb4
 23e9788:	42c80000 	.word	0x42c80000
 23e978c:	c479f99a 	.word	0xc479f99a
 23e9790:	1006a29c 	.word	0x1006a29c
 23e9794:	1006ae70 	.word	0x1006ae70
 23e9798:	c0440000 	.word	0xc0440000
 23e979c:	404e0000 	.word	0x404e0000
 23e97a0:	40590000 	.word	0x40590000
 23e97a4:	023fdc6c 	.word	0x023fdc6c
 23e97a8:	023fdc71 	.word	0x023fdc71
 23e97ac:	1006a29d 	.word	0x1006a29d
 23e97b0:	1006ae78 	.word	0x1006ae78
 23e97b4:	023fdc76 	.word	0x023fdc76
 23e97b8:	023fdc7b 	.word	0x023fdc7b
 23e97bc:	1006a2a2 	.word	0x1006a2a2
 23e97c0:	1006f0b0 	.word	0x1006f0b0
 23e97c4:	c2200000 	.word	0xc2200000
 23e97c8:	42700000 	.word	0x42700000
 23e97cc:	43960000 	.word	0x43960000
 23e97d0:	44898000 	.word	0x44898000
 23e97d4:	1006a168 	.word	0x1006a168
    strcpy (obs[oidx].sensor[sidx].id, "lpt1");
 23e97d8:	231c      	movs	r3, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23e97da:	f640 2698 	movw	r6, #2712	; 0xa98
 23e97de:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23e97e2:	f04f 0901 	mov.w	r9, #1
 23e97e6:	fb03 f708 	mul.w	r7, r3, r8
    strcpy (obs[oidx].sensor[sidx].id, "lpt1");
 23e97ea:	19e8      	adds	r0, r5, r7
 23e97ec:	49d7      	ldr	r1, [pc, #860]	; (23e9b4c <_Z6OBS_Dov+0x117c>)
 23e97ee:	4420      	add	r0, r4
 23e97f0:	f012 fe6e 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23e97f4:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "lpp1");
 23e97f6:	f107 001c 	add.w	r0, r7, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23e97fa:	435e      	muls	r6, r3
 23e97fc:	19b9      	adds	r1, r7, r6
 23e97fe:	4421      	add	r1, r4
    strcpy (obs[oidx].sensor[sidx].id, "lpp1");
 23e9800:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23e9802:	f108 0201 	add.w	r2, r8, #1
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23e9806:	ed81 aa09 	vstr	s20, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23e980a:	f8c1 a020 	str.w	sl, [r1, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23e980e:	f881 9030 	strb.w	r9, [r1, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "lpp1");
 23e9812:	4420      	add	r0, r4
 23e9814:	49ce      	ldr	r1, [pc, #824]	; (23e9b50 <_Z6OBS_Dov+0x1180>)
    obs[oidx].sensor[sidx++].inuse = true;
 23e9816:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "lpp1");
 23e9818:	f012 fe5a 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23e981c:	231c      	movs	r3, #28
 23e981e:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23e9820:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9824:	fb03 6602 	mla	r6, r3, r2, r6
 23e9828:	4426      	add	r6, r4
    obs[oidx].sensor[sidx].f_obs = (float) p;
 23e982a:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23e982e:	f8c6 a020 	str.w	sl, [r6, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23e9832:	f886 9030 	strb.w	r9, [r6, #48]	; 0x30
  if (LPS_2_exists) {
 23e9836:	4bc7      	ldr	r3, [pc, #796]	; (23e9b54 <_Z6OBS_Dov+0x1184>)
 23e9838:	781b      	ldrb	r3, [r3, #0]
 23e983a:	2b00      	cmp	r3, #0
 23e983c:	d068      	beq.n	23e9910 <_Z6OBS_Dov+0xf40>
    float t = lps2.readTemperature();
 23e983e:	48c6      	ldr	r0, [pc, #792]	; (23e9b58 <_Z6OBS_Dov+0x1188>)
 23e9840:	f005 ff0a 	bl	23ef658 <_ZN16Adafruit_LPS35HW15readTemperatureEv>
 23e9844:	eeb0 aa40 	vmov.f32	s20, s0
    float p = lps2.readPressure();
 23e9848:	48c3      	ldr	r0, [pc, #780]	; (23e9b58 <_Z6OBS_Dov+0x1188>)
 23e984a:	f005 ff27 	bl	23ef69c <_ZN16Adafruit_LPS35HW12readPressureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23e984e:	eeb4 aa4a 	vcmp.f32	s20, s20
 23e9852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float p = lps2.readPressure();
 23e9856:	eef0 8a40 	vmov.f32	s17, s0
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23e985a:	f180 87a5 	bvs.w	23ea7a8 <_Z6OBS_Dov+0x1dd8>
 23e985e:	eddf 7abf 	vldr	s15, [pc, #764]	; 23e9b5c <_Z6OBS_Dov+0x118c>
 23e9862:	eeb4 aae7 	vcmpe.f32	s20, s15
 23e9866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e986a:	f100 879d 	bmi.w	23ea7a8 <_Z6OBS_Dov+0x1dd8>
 23e986e:	eddf 7abc 	vldr	s15, [pc, #752]	; 23e9b60 <_Z6OBS_Dov+0x1190>
 23e9872:	eeb4 aa67 	vcmp.f32	s20, s15
 23e9876:	eddf 7abb 	vldr	s15, [pc, #748]	; 23e9b64 <_Z6OBS_Dov+0x1194>
 23e987a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e987e:	fe37 aa8a 	vselgt.f32	s20, s15, s20
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23e9882:	eef4 8a68 	vcmp.f32	s17, s17
 23e9886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e988a:	f180 8791 	bvs.w	23ea7b0 <_Z6OBS_Dov+0x1de0>
 23e988e:	eddf 7ab6 	vldr	s15, [pc, #728]	; 23e9b68 <_Z6OBS_Dov+0x1198>
 23e9892:	eef4 8ae7 	vcmpe.f32	s17, s15
 23e9896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e989a:	f100 8789 	bmi.w	23ea7b0 <_Z6OBS_Dov+0x1de0>
 23e989e:	eddf 7ab3 	vldr	s15, [pc, #716]	; 23e9b6c <_Z6OBS_Dov+0x119c>
 23e98a2:	eef4 8a67 	vcmp.f32	s17, s15
 23e98a6:	eddf 7aaf 	vldr	s15, [pc, #700]	; 23e9b64 <_Z6OBS_Dov+0x1194>
 23e98aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e98ae:	fe77 8aa8 	vselgt.f32	s17, s15, s17
    strcpy (obs[oidx].sensor[sidx].id, "lpt2");
 23e98b2:	231c      	movs	r3, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23e98b4:	f640 2698 	movw	r6, #2712	; 0xa98
 23e98b8:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23e98bc:	f04f 0901 	mov.w	r9, #1
 23e98c0:	fb03 f708 	mul.w	r7, r3, r8
    strcpy (obs[oidx].sensor[sidx].id, "lpt2");
 23e98c4:	19e8      	adds	r0, r5, r7
 23e98c6:	49aa      	ldr	r1, [pc, #680]	; (23e9b70 <_Z6OBS_Dov+0x11a0>)
 23e98c8:	4420      	add	r0, r4
 23e98ca:	f012 fe01 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23e98ce:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "lpp2");
 23e98d0:	f107 001c 	add.w	r0, r7, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23e98d4:	435e      	muls	r6, r3
 23e98d6:	19b9      	adds	r1, r7, r6
 23e98d8:	4421      	add	r1, r4
    strcpy (obs[oidx].sensor[sidx].id, "lpp2");
 23e98da:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23e98dc:	f108 0201 	add.w	r2, r8, #1
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23e98e0:	ed81 aa09 	vstr	s20, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23e98e4:	f8c1 a020 	str.w	sl, [r1, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23e98e8:	f881 9030 	strb.w	r9, [r1, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "lpp2");
 23e98ec:	4420      	add	r0, r4
 23e98ee:	49a1      	ldr	r1, [pc, #644]	; (23e9b74 <_Z6OBS_Dov+0x11a4>)
    obs[oidx].sensor[sidx++].inuse = true;
 23e98f0:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "lpp2");
 23e98f2:	f012 fded 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23e98f6:	231c      	movs	r3, #28
 23e98f8:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23e98fa:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23e98fe:	fb03 6602 	mla	r6, r3, r2, r6
 23e9902:	4426      	add	r6, r4
    obs[oidx].sensor[sidx].f_obs = (float) p;
 23e9904:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9908:	f8c6 a020 	str.w	sl, [r6, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23e990c:	f886 9030 	strb.w	r9, [r6, #48]	; 0x30
  if (HIH8_exists) {
 23e9910:	4b99      	ldr	r3, [pc, #612]	; (23e9b78 <_Z6OBS_Dov+0x11a8>)
 23e9912:	781b      	ldrb	r3, [r3, #0]
 23e9914:	2b00      	cmp	r3, #0
 23e9916:	d06b      	beq.n	23e99f0 <_Z6OBS_Dov+0x1020>
    float t = 0.0;
 23e9918:	2600      	movs	r6, #0
    bool status = hih8_getTempHumid(&t, &h);
 23e991a:	a90c      	add	r1, sp, #48	; 0x30
 23e991c:	a802      	add	r0, sp, #8
    float t = 0.0;
 23e991e:	9602      	str	r6, [sp, #8]
    float h = 0.0;
 23e9920:	960c      	str	r6, [sp, #48]	; 0x30
    bool status = hih8_getTempHumid(&t, &h);
 23e9922:	f7fb fbad 	bl	23e5080 <_Z17hih8_getTempHumidPfS_>
    if (!status) {
 23e9926:	b910      	cbnz	r0, 23e992e <_Z6OBS_Dov+0xf5e>
      t = -999.99;
 23e9928:	4b94      	ldr	r3, [pc, #592]	; (23e9b7c <_Z6OBS_Dov+0x11ac>)
      h = 0.0;
 23e992a:	960c      	str	r6, [sp, #48]	; 0x30
      t = -999.99;
 23e992c:	9302      	str	r3, [sp, #8]
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23e992e:	ed9d aa02 	vldr	s20, [sp, #8]
 23e9932:	eeb4 aa4a 	vcmp.f32	s20, s20
 23e9936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e993a:	f180 873d 	bvs.w	23ea7b8 <_Z6OBS_Dov+0x1de8>
 23e993e:	eddf 7a87 	vldr	s15, [pc, #540]	; 23e9b5c <_Z6OBS_Dov+0x118c>
 23e9942:	eeb4 aae7 	vcmpe.f32	s20, s15
 23e9946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e994a:	f100 8735 	bmi.w	23ea7b8 <_Z6OBS_Dov+0x1de8>
 23e994e:	eddf 7a84 	vldr	s15, [pc, #528]	; 23e9b60 <_Z6OBS_Dov+0x1190>
 23e9952:	eeb4 aa67 	vcmp.f32	s20, s15
 23e9956:	eddf 7a83 	vldr	s15, [pc, #524]	; 23e9b64 <_Z6OBS_Dov+0x1194>
 23e995a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e995e:	fe37 aa8a 	vselgt.f32	s20, s15, s20
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23e9962:	eddd 8a0c 	vldr	s17, [sp, #48]	; 0x30
 23e9966:	eef4 8a68 	vcmp.f32	s17, s17
 23e996a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e996e:	f180 8727 	bvs.w	23ea7c0 <_Z6OBS_Dov+0x1df0>
 23e9972:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 23e9976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e997a:	f100 8721 	bmi.w	23ea7c0 <_Z6OBS_Dov+0x1df0>
 23e997e:	eddf 7a80 	vldr	s15, [pc, #512]	; 23e9b80 <_Z6OBS_Dov+0x11b0>
 23e9982:	eef4 8a67 	vcmp.f32	s17, s15
 23e9986:	eddf 7a77 	vldr	s15, [pc, #476]	; 23e9b64 <_Z6OBS_Dov+0x1194>
 23e998a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e998e:	fe77 8aa8 	vselgt.f32	s17, s15, s17
    strcpy (obs[oidx].sensor[sidx].id, "ht2");
 23e9992:	231c      	movs	r3, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9994:	f640 2698 	movw	r6, #2712	; 0xa98
 23e9998:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23e999c:	f04f 0901 	mov.w	r9, #1
 23e99a0:	fb03 f708 	mul.w	r7, r3, r8
    strcpy (obs[oidx].sensor[sidx].id, "ht2");
 23e99a4:	19e8      	adds	r0, r5, r7
 23e99a6:	4977      	ldr	r1, [pc, #476]	; (23e9b84 <_Z6OBS_Dov+0x11b4>)
 23e99a8:	4420      	add	r0, r4
 23e99aa:	f012 fd91 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23e99ae:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "hh2");
 23e99b0:	f107 001c 	add.w	r0, r7, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23e99b4:	435e      	muls	r6, r3
 23e99b6:	19b9      	adds	r1, r7, r6
 23e99b8:	4421      	add	r1, r4
    strcpy (obs[oidx].sensor[sidx].id, "hh2");
 23e99ba:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23e99bc:	f108 0201 	add.w	r2, r8, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23e99c0:	ed81 aa09 	vstr	s20, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23e99c4:	f8c1 a020 	str.w	sl, [r1, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23e99c8:	f881 9030 	strb.w	r9, [r1, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "hh2");
 23e99cc:	4420      	add	r0, r4
 23e99ce:	496e      	ldr	r1, [pc, #440]	; (23e9b88 <_Z6OBS_Dov+0x11b8>)
    obs[oidx].sensor[sidx++].inuse = true;
 23e99d0:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "hh2");
 23e99d2:	f012 fd7d 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23e99d6:	231c      	movs	r3, #28
 23e99d8:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23e99da:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23e99de:	fb03 6602 	mla	r6, r3, r2, r6
 23e99e2:	4426      	add	r6, r4
    obs[oidx].sensor[sidx].f_obs = h;
 23e99e4:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23e99e8:	f8c6 a020 	str.w	sl, [r6, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23e99ec:	f886 9030 	strb.w	r9, [r6, #48]	; 0x30
  if (SI1145_exists) {
 23e99f0:	4e66      	ldr	r6, [pc, #408]	; (23e9b8c <_Z6OBS_Dov+0x11bc>)
 23e99f2:	7833      	ldrb	r3, [r6, #0]
 23e99f4:	2b00      	cmp	r3, #0
 23e99f6:	f000 811d 	beq.w	23e9c34 <_Z6OBS_Dov+0x1264>
    float si_vis = uv.readVisible();
 23e99fa:	4865      	ldr	r0, [pc, #404]	; (23e9b90 <_Z6OBS_Dov+0x11c0>)
 23e99fc:	f006 f9ad 	bl	23efd5a <_ZN15Adafruit_SI114511readVisibleEv>
 23e9a00:	ee07 0a90 	vmov	s15, r0
    float si_ir = uv.readIR();
 23e9a04:	4862      	ldr	r0, [pc, #392]	; (23e9b90 <_Z6OBS_Dov+0x11c0>)
    float si_vis = uv.readVisible();
 23e9a06:	eef8 aa67 	vcvt.f32.u32	s21, s15
    float si_ir = uv.readIR();
 23e9a0a:	f006 f9a9 	bl	23efd60 <_ZN15Adafruit_SI11456readIREv>
 23e9a0e:	ee07 0a90 	vmov	s15, r0
    float si_uv = uv.readUV()/100.0;
 23e9a12:	485f      	ldr	r0, [pc, #380]	; (23e9b90 <_Z6OBS_Dov+0x11c0>)
    float si_ir = uv.readIR();
 23e9a14:	eeb8 aa67 	vcvt.f32.u32	s20, s15
    float si_uv = uv.readUV()/100.0;
 23e9a18:	f006 f99c 	bl	23efd54 <_ZN15Adafruit_SI11456readUVEv>
 23e9a1c:	f7f8 fd9e 	bl	23e255c <__aeabi_i2d>
 23e9a20:	2200      	movs	r2, #0
 23e9a22:	4b5c      	ldr	r3, [pc, #368]	; (23e9b94 <_Z6OBS_Dov+0x11c4>)
 23e9a24:	f7f8 ff2e 	bl	23e2884 <__aeabi_ddiv>
 23e9a28:	f7f9 f8fa 	bl	23e2c20 <__aeabi_d2f>
    if ( ((si_vis+si_ir+si_uv) == 0.0) && ((si_last_vis+si_last_ir+si_last_uv) != 0.0) ) {
 23e9a2c:	ee7a 7a8a 	vadd.f32	s15, s21, s20
    float si_uv = uv.readUV()/100.0;
 23e9a30:	ee08 0a90 	vmov	s17, r0
    if ( ((si_vis+si_ir+si_uv) == 0.0) && ((si_last_vis+si_last_ir+si_last_uv) != 0.0) ) {
 23e9a34:	ee77 7aa8 	vadd.f32	s15, s15, s17
 23e9a38:	eef5 7a40 	vcmp.f32	s15, #0.0
 23e9a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9a40:	f8df a16c 	ldr.w	sl, [pc, #364]	; 23e9bb0 <_Z6OBS_Dov+0x11e0>
 23e9a44:	f8df 916c 	ldr.w	r9, [pc, #364]	; 23e9bb4 <_Z6OBS_Dov+0x11e4>
 23e9a48:	4f53      	ldr	r7, [pc, #332]	; (23e9b98 <_Z6OBS_Dov+0x11c8>)
 23e9a4a:	d141      	bne.n	23e9ad0 <_Z6OBS_Dov+0x1100>
 23e9a4c:	ed99 7a00 	vldr	s14, [r9]
 23e9a50:	edda 7a00 	vldr	s15, [sl]
 23e9a54:	ee77 7a87 	vadd.f32	s15, s15, s14
 23e9a58:	ed97 7a00 	vldr	s14, [r7]
 23e9a5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 23e9a60:	eef5 7a40 	vcmp.f32	s15, #0.0
 23e9a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9a68:	d032      	beq.n	23e9ad0 <_Z6OBS_Dov+0x1100>
      Output ("SI RESET");
 23e9a6a:	484c      	ldr	r0, [pc, #304]	; (23e9b9c <_Z6OBS_Dov+0x11cc>)
 23e9a6c:	f7fa fd8c 	bl	23e4588 <_Z6OutputPKc>
      if (uv.begin()) {
 23e9a70:	f00f fed8 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23e9a74:	2160      	movs	r1, #96	; 0x60
 23e9a76:	4602      	mov	r2, r0
 23e9a78:	4845      	ldr	r0, [pc, #276]	; (23e9b90 <_Z6OBS_Dov+0x11c0>)
 23e9a7a:	f006 f9d3 	bl	23efe24 <_ZN15Adafruit_SI11455beginEhP7TwoWire>
 23e9a7e:	2800      	cmp	r0, #0
 23e9a80:	f000 86a2 	beq.w	23ea7c8 <_Z6OBS_Dov+0x1df8>
        SI1145_exists = true;
 23e9a84:	2301      	movs	r3, #1
        Output ("SI ONLINE");
 23e9a86:	4846      	ldr	r0, [pc, #280]	; (23e9ba0 <_Z6OBS_Dov+0x11d0>)
        SI1145_exists = true;
 23e9a88:	7033      	strb	r3, [r6, #0]
        Output ("SI ONLINE");
 23e9a8a:	f7fa fd7d 	bl	23e4588 <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_SI1145; // Turn Off Bit
 23e9a8e:	f8db 3000 	ldr.w	r3, [fp]
        si_vis = uv.readVisible();
 23e9a92:	483f      	ldr	r0, [pc, #252]	; (23e9b90 <_Z6OBS_Dov+0x11c0>)
        SystemStatusBits &= ~SSB_SI1145; // Turn Off Bit
 23e9a94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 23e9a98:	f8cb 3000 	str.w	r3, [fp]
        si_vis = uv.readVisible();
 23e9a9c:	f006 f95d 	bl	23efd5a <_ZN15Adafruit_SI114511readVisibleEv>
 23e9aa0:	ee07 0a90 	vmov	s15, r0
        si_ir = uv.readIR();
 23e9aa4:	483a      	ldr	r0, [pc, #232]	; (23e9b90 <_Z6OBS_Dov+0x11c0>)
        si_vis = uv.readVisible();
 23e9aa6:	eef8 aa67 	vcvt.f32.u32	s21, s15
        si_ir = uv.readIR();
 23e9aaa:	f006 f959 	bl	23efd60 <_ZN15Adafruit_SI11456readIREv>
 23e9aae:	ee07 0a90 	vmov	s15, r0
        si_uv = uv.readUV()/100.0;
 23e9ab2:	4837      	ldr	r0, [pc, #220]	; (23e9b90 <_Z6OBS_Dov+0x11c0>)
        si_ir = uv.readIR();
 23e9ab4:	eeb8 aa67 	vcvt.f32.u32	s20, s15
        si_uv = uv.readUV()/100.0;
 23e9ab8:	f006 f94c 	bl	23efd54 <_ZN15Adafruit_SI11456readUVEv>
 23e9abc:	f7f8 fd4e 	bl	23e255c <__aeabi_i2d>
 23e9ac0:	2200      	movs	r2, #0
 23e9ac2:	4b34      	ldr	r3, [pc, #208]	; (23e9b94 <_Z6OBS_Dov+0x11c4>)
 23e9ac4:	f7f8 fede 	bl	23e2884 <__aeabi_ddiv>
 23e9ac8:	f7f9 f8aa 	bl	23e2c20 <__aeabi_d2f>
 23e9acc:	ee08 0a90 	vmov	s17, r0
    si_vis = (isnan(si_vis) || (si_vis < QC_MIN_VI)  || (si_vis > QC_MAX_VI)) ? QC_ERR_VI  : si_vis;
 23e9ad0:	eef4 aa6a 	vcmp.f32	s21, s21
 23e9ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    si_last_vis = si_vis;
 23e9ad8:	edca aa00 	vstr	s21, [sl]
    si_last_ir = si_ir;
 23e9adc:	ed89 aa00 	vstr	s20, [r9]
    si_last_uv = si_uv;
 23e9ae0:	edc7 8a00 	vstr	s17, [r7]
    si_vis = (isnan(si_vis) || (si_vis < QC_MIN_VI)  || (si_vis > QC_MAX_VI)) ? QC_ERR_VI  : si_vis;
 23e9ae4:	f180 867c 	bvs.w	23ea7e0 <_Z6OBS_Dov+0x1e10>
 23e9ae8:	eddf 7a2e 	vldr	s15, [pc, #184]	; 23e9ba4 <_Z6OBS_Dov+0x11d4>
 23e9aec:	eef4 aa67 	vcmp.f32	s21, s15
 23e9af0:	eddf 7a1c 	vldr	s15, [pc, #112]	; 23e9b64 <_Z6OBS_Dov+0x1194>
 23e9af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9af8:	fe77 aaaa 	vselgt.f32	s21, s15, s21
    si_ir  = (isnan(si_ir)  || (si_ir  < QC_MIN_IR)  || (si_ir  > QC_MAX_IR)) ? QC_ERR_IR  : si_ir;
 23e9afc:	eeb4 aa4a 	vcmp.f32	s20, s20
 23e9b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9b04:	f180 8670 	bvs.w	23ea7e8 <_Z6OBS_Dov+0x1e18>
 23e9b08:	eddf 7a27 	vldr	s15, [pc, #156]	; 23e9ba8 <_Z6OBS_Dov+0x11d8>
 23e9b0c:	eeb4 aa67 	vcmp.f32	s20, s15
 23e9b10:	eddf 7a14 	vldr	s15, [pc, #80]	; 23e9b64 <_Z6OBS_Dov+0x1194>
 23e9b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9b18:	fe37 aa8a 	vselgt.f32	s20, s15, s20
    si_uv  = (isnan(si_uv)  || (si_uv  < QC_MIN_UV)  || (si_uv  > QC_MAX_UV)) ? QC_ERR_UV  : si_uv;
 23e9b1c:	eef4 8a68 	vcmp.f32	s17, s17
 23e9b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9b24:	f180 8664 	bvs.w	23ea7f0 <_Z6OBS_Dov+0x1e20>
 23e9b28:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 23e9b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9b30:	f100 865e 	bmi.w	23ea7f0 <_Z6OBS_Dov+0x1e20>
 23e9b34:	eddf 7a1d 	vldr	s15, [pc, #116]	; 23e9bac <_Z6OBS_Dov+0x11dc>
 23e9b38:	eef4 8a67 	vcmp.f32	s17, s15
 23e9b3c:	eddf 7a09 	vldr	s15, [pc, #36]	; 23e9b64 <_Z6OBS_Dov+0x1194>
 23e9b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9b44:	fe77 8aa8 	vselgt.f32	s17, s15, s17
 23e9b48:	e036      	b.n	23e9bb8 <_Z6OBS_Dov+0x11e8>
 23e9b4a:	bf00      	nop
 23e9b4c:	023fdc80 	.word	0x023fdc80
 23e9b50:	023fdc85 	.word	0x023fdc85
 23e9b54:	1006a2a3 	.word	0x1006a2a3
 23e9b58:	1006f0cc 	.word	0x1006f0cc
 23e9b5c:	c2200000 	.word	0xc2200000
 23e9b60:	42700000 	.word	0x42700000
 23e9b64:	c479f99a 	.word	0xc479f99a
 23e9b68:	43960000 	.word	0x43960000
 23e9b6c:	44898000 	.word	0x44898000
 23e9b70:	023fdc8a 	.word	0x023fdc8a
 23e9b74:	023fdc8f 	.word	0x023fdc8f
 23e9b78:	1006a29e 	.word	0x1006a29e
 23e9b7c:	c479ff5c 	.word	0xc479ff5c
 23e9b80:	42c80000 	.word	0x42c80000
 23e9b84:	023fdc94 	.word	0x023fdc94
 23e9b88:	023fdc98 	.word	0x023fdc98
 23e9b8c:	1006a7c6 	.word	0x1006a7c6
 23e9b90:	1007ac08 	.word	0x1007ac08
 23e9b94:	40590000 	.word	0x40590000
 23e9b98:	1007abc8 	.word	0x1007abc8
 23e9b9c:	023fdc9c 	.word	0x023fdc9c
 23e9ba0:	023fd141 	.word	0x023fd141
 23e9ba4:	44fa0000 	.word	0x44fa0000
 23e9ba8:	467a0000 	.word	0x467a0000
 23e9bac:	447a0000 	.word	0x447a0000
 23e9bb0:	1007abcc 	.word	0x1007abcc
 23e9bb4:	1007abc4 	.word	0x1007abc4
    strcpy (obs[oidx].sensor[sidx].id, "sv1");
 23e9bb8:	f04f 0b1c 	mov.w	fp, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9bbc:	f640 2698 	movw	r6, #2712	; 0xa98
 23e9bc0:	fb0b f708 	mul.w	r7, fp, r8
    strcpy (obs[oidx].sensor[sidx].id, "sv1");
 23e9bc4:	19e8      	adds	r0, r5, r7
 23e9bc6:	49d5      	ldr	r1, [pc, #852]	; (23e9f1c <_Z6OBS_Dov+0x154c>)
 23e9bc8:	4420      	add	r0, r4
 23e9bca:	f012 fc81 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9bce:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23e9bd0:	f04f 0a01 	mov.w	sl, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9bd4:	435e      	muls	r6, r3
 23e9bd6:	2300      	movs	r3, #0
 23e9bd8:	19ba      	adds	r2, r7, r6
    strcpy (obs[oidx].sensor[sidx].id, "si1");
 23e9bda:	eb07 000b 	add.w	r0, r7, fp
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9bde:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "si1");
 23e9be0:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9be2:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = si_vis;
 23e9be4:	edc2 aa09 	vstr	s21, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "si1");
 23e9be8:	49cd      	ldr	r1, [pc, #820]	; (23e9f20 <_Z6OBS_Dov+0x1550>)
    obs[oidx].sensor[sidx++].inuse = true;
 23e9bea:	f882 a030 	strb.w	sl, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "si1");
 23e9bee:	4420      	add	r0, r4
 23e9bf0:	f012 fc6e 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9bf4:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23e9bf6:	f108 0901 	add.w	r9, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9bfa:	fb0b 6909 	mla	r9, fp, r9, r6
 23e9bfe:	eb04 0209 	add.w	r2, r4, r9
    obs[oidx].sensor[sidx++].inuse = true;
 23e9c02:	f108 0902 	add.w	r9, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9c06:	fb0b 6609 	mla	r6, fp, r9, r6
    strcpy (obs[oidx].sensor[sidx].id, "su1");
 23e9c0a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 23e9c0e:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9c10:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = si_ir;
 23e9c12:	ed82 aa09 	vstr	s20, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "su1");
 23e9c16:	49c3      	ldr	r1, [pc, #780]	; (23e9f24 <_Z6OBS_Dov+0x1554>)
    obs[oidx].sensor[sidx++].inuse = true;
 23e9c18:	f882 a030 	strb.w	sl, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "su1");
 23e9c1c:	4420      	add	r0, r4
 23e9c1e:	f012 fc57 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9c22:	4426      	add	r6, r4
 23e9c24:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx].f_obs = si_uv;
 23e9c26:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9c2a:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23e9c2c:	f108 0803 	add.w	r8, r8, #3
 23e9c30:	f886 a030 	strb.w	sl, [r6, #48]	; 0x30
  if (MCP_1_exists) {
 23e9c34:	4bbc      	ldr	r3, [pc, #752]	; (23e9f28 <_Z6OBS_Dov+0x1558>)
 23e9c36:	781b      	ldrb	r3, [r3, #0]
 23e9c38:	b3c3      	cbz	r3, 23e9cac <_Z6OBS_Dov+0x12dc>
    strcpy (obs[oidx].sensor[sidx].id, "mt1");
 23e9c3a:	261c      	movs	r6, #28
 23e9c3c:	fb06 f608 	mul.w	r6, r6, r8
 23e9c40:	1970      	adds	r0, r6, r5
 23e9c42:	49ba      	ldr	r1, [pc, #744]	; (23e9f2c <_Z6OBS_Dov+0x155c>)
 23e9c44:	4420      	add	r0, r4
 23e9c46:	f012 fc43 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9c4a:	f640 2398 	movw	r3, #2712	; 0xa98
 23e9c4e:	9a00      	ldr	r2, [sp, #0]
    t = mcp1.readTempC();
 23e9c50:	48b7      	ldr	r0, [pc, #732]	; (23e9f30 <_Z6OBS_Dov+0x1560>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9c52:	fb03 6602 	mla	r6, r3, r2, r6
 23e9c56:	2300      	movs	r3, #0
 23e9c58:	4426      	add	r6, r4
 23e9c5a:	6233      	str	r3, [r6, #32]
    t = mcp1.readTempC();
 23e9c5c:	f005 fe8a 	bl	23ef974 <_ZN16Adafruit_MCP98089readTempCEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23e9c60:	eeb4 0a40 	vcmp.f32	s0, s0
 23e9c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9c68:	f180 85c6 	bvs.w	23ea7f8 <_Z6OBS_Dov+0x1e28>
 23e9c6c:	eddf 7ab1 	vldr	s15, [pc, #708]	; 23e9f34 <_Z6OBS_Dov+0x1564>
 23e9c70:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23e9c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9c78:	f100 85be 	bmi.w	23ea7f8 <_Z6OBS_Dov+0x1e28>
 23e9c7c:	eddf 7aae 	vldr	s15, [pc, #696]	; 23e9f38 <_Z6OBS_Dov+0x1568>
 23e9c80:	eeb4 0a67 	vcmp.f32	s0, s15
 23e9c84:	eddf 7aad 	vldr	s15, [pc, #692]	; 23e9f3c <_Z6OBS_Dov+0x156c>
 23e9c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9c8c:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23e9c90:	f640 2398 	movw	r3, #2712	; 0xa98
 23e9c94:	9a00      	ldr	r2, [sp, #0]
 23e9c96:	4353      	muls	r3, r2
 23e9c98:	221c      	movs	r2, #28
 23e9c9a:	fb02 3308 	mla	r3, r2, r8, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23e9c9e:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23e9ca0:	4423      	add	r3, r4
 23e9ca2:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23e9ca6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23e9caa:	4490      	add	r8, r2
  if (MCP_2_exists) {
 23e9cac:	4ba4      	ldr	r3, [pc, #656]	; (23e9f40 <_Z6OBS_Dov+0x1570>)
 23e9cae:	781b      	ldrb	r3, [r3, #0]
 23e9cb0:	b3c3      	cbz	r3, 23e9d24 <_Z6OBS_Dov+0x1354>
    strcpy (obs[oidx].sensor[sidx].id, "mt2");
 23e9cb2:	261c      	movs	r6, #28
 23e9cb4:	fb06 f608 	mul.w	r6, r6, r8
 23e9cb8:	1970      	adds	r0, r6, r5
 23e9cba:	49a2      	ldr	r1, [pc, #648]	; (23e9f44 <_Z6OBS_Dov+0x1574>)
 23e9cbc:	4420      	add	r0, r4
 23e9cbe:	f012 fc07 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9cc2:	f640 2398 	movw	r3, #2712	; 0xa98
 23e9cc6:	9a00      	ldr	r2, [sp, #0]
    t = mcp2.readTempC();
 23e9cc8:	489f      	ldr	r0, [pc, #636]	; (23e9f48 <_Z6OBS_Dov+0x1578>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9cca:	fb03 6602 	mla	r6, r3, r2, r6
 23e9cce:	2300      	movs	r3, #0
 23e9cd0:	4426      	add	r6, r4
 23e9cd2:	6233      	str	r3, [r6, #32]
    t = mcp2.readTempC();
 23e9cd4:	f005 fe4e 	bl	23ef974 <_ZN16Adafruit_MCP98089readTempCEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23e9cd8:	eeb4 0a40 	vcmp.f32	s0, s0
 23e9cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9ce0:	f180 858e 	bvs.w	23ea800 <_Z6OBS_Dov+0x1e30>
 23e9ce4:	eddf 7a93 	vldr	s15, [pc, #588]	; 23e9f34 <_Z6OBS_Dov+0x1564>
 23e9ce8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23e9cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9cf0:	f100 8586 	bmi.w	23ea800 <_Z6OBS_Dov+0x1e30>
 23e9cf4:	eddf 7a90 	vldr	s15, [pc, #576]	; 23e9f38 <_Z6OBS_Dov+0x1568>
 23e9cf8:	eeb4 0a67 	vcmp.f32	s0, s15
 23e9cfc:	eddf 7a8f 	vldr	s15, [pc, #572]	; 23e9f3c <_Z6OBS_Dov+0x156c>
 23e9d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9d04:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23e9d08:	f640 2398 	movw	r3, #2712	; 0xa98
 23e9d0c:	9a00      	ldr	r2, [sp, #0]
 23e9d0e:	4353      	muls	r3, r2
 23e9d10:	221c      	movs	r2, #28
 23e9d12:	fb02 3308 	mla	r3, r2, r8, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23e9d16:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23e9d18:	4423      	add	r3, r4
 23e9d1a:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23e9d1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23e9d22:	4490      	add	r8, r2
  if (MCP_3_exists) {
 23e9d24:	4b89      	ldr	r3, [pc, #548]	; (23e9f4c <_Z6OBS_Dov+0x157c>)
 23e9d26:	781b      	ldrb	r3, [r3, #0]
 23e9d28:	2b00      	cmp	r3, #0
 23e9d2a:	f000 8571 	beq.w	23ea810 <_Z6OBS_Dov+0x1e40>
    strcpy (obs[oidx].sensor[sidx].id, "gt1");
 23e9d2e:	261c      	movs	r6, #28
 23e9d30:	fb06 f608 	mul.w	r6, r6, r8
 23e9d34:	1970      	adds	r0, r6, r5
 23e9d36:	4986      	ldr	r1, [pc, #536]	; (23e9f50 <_Z6OBS_Dov+0x1580>)
 23e9d38:	4420      	add	r0, r4
 23e9d3a:	f012 fbc9 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9d3e:	f640 2398 	movw	r3, #2712	; 0xa98
 23e9d42:	9a00      	ldr	r2, [sp, #0]
    t = mcp3.readTempC();
 23e9d44:	4883      	ldr	r0, [pc, #524]	; (23e9f54 <_Z6OBS_Dov+0x1584>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9d46:	fb03 6602 	mla	r6, r3, r2, r6
 23e9d4a:	2300      	movs	r3, #0
 23e9d4c:	4426      	add	r6, r4
 23e9d4e:	6233      	str	r3, [r6, #32]
    t = mcp3.readTempC();
 23e9d50:	f005 fe10 	bl	23ef974 <_ZN16Adafruit_MCP98089readTempCEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23e9d54:	eeb4 0a40 	vcmp.f32	s0, s0
 23e9d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9d5c:	f180 8554 	bvs.w	23ea808 <_Z6OBS_Dov+0x1e38>
 23e9d60:	eddf 7a74 	vldr	s15, [pc, #464]	; 23e9f34 <_Z6OBS_Dov+0x1564>
 23e9d64:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23e9d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9d6c:	f100 854c 	bmi.w	23ea808 <_Z6OBS_Dov+0x1e38>
 23e9d70:	eddf 7a71 	vldr	s15, [pc, #452]	; 23e9f38 <_Z6OBS_Dov+0x1568>
 23e9d74:	eeb4 0a67 	vcmp.f32	s0, s15
 23e9d78:	eddf 7a70 	vldr	s15, [pc, #448]	; 23e9f3c <_Z6OBS_Dov+0x156c>
 23e9d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9d80:	fe77 8a80 	vselgt.f32	s17, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23e9d84:	f640 2398 	movw	r3, #2712	; 0xa98
 23e9d88:	9a00      	ldr	r2, [sp, #0]
 23e9d8a:	4353      	muls	r3, r2
 23e9d8c:	221c      	movs	r2, #28
 23e9d8e:	fb02 3308 	mla	r3, r2, r8, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23e9d92:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23e9d94:	4423      	add	r3, r4
 23e9d96:	edc3 8a09 	vstr	s17, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23e9d9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23e9d9e:	4490      	add	r8, r2
  if (MCP_4_exists) {
 23e9da0:	4b6d      	ldr	r3, [pc, #436]	; (23e9f58 <_Z6OBS_Dov+0x1588>)
 23e9da2:	781b      	ldrb	r3, [r3, #0]
 23e9da4:	b3c3      	cbz	r3, 23e9e18 <_Z6OBS_Dov+0x1448>
    strcpy (obs[oidx].sensor[sidx].id, "gt2");
 23e9da6:	261c      	movs	r6, #28
 23e9da8:	fb06 f608 	mul.w	r6, r6, r8
 23e9dac:	1970      	adds	r0, r6, r5
 23e9dae:	496b      	ldr	r1, [pc, #428]	; (23e9f5c <_Z6OBS_Dov+0x158c>)
 23e9db0:	4420      	add	r0, r4
 23e9db2:	f012 fb8d 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9db6:	f640 2398 	movw	r3, #2712	; 0xa98
 23e9dba:	9a00      	ldr	r2, [sp, #0]
    t = mcp4.readTempC();
 23e9dbc:	4868      	ldr	r0, [pc, #416]	; (23e9f60 <_Z6OBS_Dov+0x1590>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9dbe:	fb03 6602 	mla	r6, r3, r2, r6
 23e9dc2:	2300      	movs	r3, #0
 23e9dc4:	4426      	add	r6, r4
 23e9dc6:	6233      	str	r3, [r6, #32]
    t = mcp4.readTempC();
 23e9dc8:	f005 fdd4 	bl	23ef974 <_ZN16Adafruit_MCP98089readTempCEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23e9dcc:	eeb4 0a40 	vcmp.f32	s0, s0
 23e9dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9dd4:	f180 8520 	bvs.w	23ea818 <_Z6OBS_Dov+0x1e48>
 23e9dd8:	eddf 7a56 	vldr	s15, [pc, #344]	; 23e9f34 <_Z6OBS_Dov+0x1564>
 23e9ddc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23e9de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9de4:	f100 8518 	bmi.w	23ea818 <_Z6OBS_Dov+0x1e48>
 23e9de8:	eddf 7a53 	vldr	s15, [pc, #332]	; 23e9f38 <_Z6OBS_Dov+0x1568>
 23e9dec:	eeb4 0a67 	vcmp.f32	s0, s15
 23e9df0:	eddf 7a52 	vldr	s15, [pc, #328]	; 23e9f3c <_Z6OBS_Dov+0x156c>
 23e9df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9df8:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23e9dfc:	f640 2398 	movw	r3, #2712	; 0xa98
 23e9e00:	9a00      	ldr	r2, [sp, #0]
 23e9e02:	4353      	muls	r3, r2
 23e9e04:	221c      	movs	r2, #28
 23e9e06:	fb02 3308 	mla	r3, r2, r8, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23e9e0a:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23e9e0c:	4423      	add	r3, r4
 23e9e0e:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23e9e12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23e9e16:	4490      	add	r8, r2
  if (VEML7700_exists) {
 23e9e18:	4b52      	ldr	r3, [pc, #328]	; (23e9f64 <_Z6OBS_Dov+0x1594>)
 23e9e1a:	781b      	ldrb	r3, [r3, #0]
 23e9e1c:	b37b      	cbz	r3, 23e9e7e <_Z6OBS_Dov+0x14ae>
    float lux = veml.readLux(VEML_LUX_AUTO);
 23e9e1e:	2102      	movs	r1, #2
 23e9e20:	4851      	ldr	r0, [pc, #324]	; (23e9f68 <_Z6OBS_Dov+0x1598>)
 23e9e22:	f006 ffd5 	bl	23f0dd0 <_ZN17Adafruit_VEML77007readLuxE9luxMethod>
    lux = (isnan(lux) || (lux < QC_MIN_VLX)  || (lux > QC_MAX_VLX))  ? QC_ERR_VLX  : lux;
 23e9e26:	eeb4 0a40 	vcmp.f32	s0, s0
 23e9e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9e2e:	f180 84f7 	bvs.w	23ea820 <_Z6OBS_Dov+0x1e50>
 23e9e32:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23e9e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9e3a:	f100 84f1 	bmi.w	23ea820 <_Z6OBS_Dov+0x1e50>
 23e9e3e:	eddf 7a4b 	vldr	s15, [pc, #300]	; 23e9f6c <_Z6OBS_Dov+0x159c>
 23e9e42:	eeb4 0a67 	vcmp.f32	s0, s15
 23e9e46:	eddf 7a4a 	vldr	s15, [pc, #296]	; 23e9f70 <_Z6OBS_Dov+0x15a0>
 23e9e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9e4e:	fe37 aa80 	vselgt.f32	s20, s15, s0
    strcpy (obs[oidx].sensor[sidx].id, "vlx");
 23e9e52:	261c      	movs	r6, #28
 23e9e54:	fb06 f608 	mul.w	r6, r6, r8
 23e9e58:	1970      	adds	r0, r6, r5
 23e9e5a:	4946      	ldr	r1, [pc, #280]	; (23e9f74 <_Z6OBS_Dov+0x15a4>)
 23e9e5c:	4420      	add	r0, r4
 23e9e5e:	f012 fb37 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9e62:	f640 2398 	movw	r3, #2712	; 0xa98
 23e9e66:	9a00      	ldr	r2, [sp, #0]
 23e9e68:	fb03 6302 	mla	r3, r3, r2, r6
 23e9e6c:	2200      	movs	r2, #0
 23e9e6e:	4423      	add	r3, r4
 23e9e70:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23e9e72:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = lux;
 23e9e74:	ed83 aa09 	vstr	s20, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23e9e78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23e9e7c:	4490      	add	r8, r2
  if (BLX_exists) {
 23e9e7e:	4b3e      	ldr	r3, [pc, #248]	; (23e9f78 <_Z6OBS_Dov+0x15a8>)
 23e9e80:	781b      	ldrb	r3, [r3, #0]
 23e9e82:	b36b      	cbz	r3, 23e9ee0 <_Z6OBS_Dov+0x1510>
    float lux=blx_takereading();
 23e9e84:	f7fb fe50 	bl	23e5b28 <_Z15blx_takereadingv>
    lux = (isnan(lux) || (lux < QC_MIN_BLX)  || (lux > QC_MAX_BLX))  ? QC_ERR_BLX  : lux;
 23e9e88:	eeb4 0a40 	vcmp.f32	s0, s0
 23e9e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9e90:	f180 84ca 	bvs.w	23ea828 <_Z6OBS_Dov+0x1e58>
 23e9e94:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23e9e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9e9c:	f100 84c4 	bmi.w	23ea828 <_Z6OBS_Dov+0x1e58>
 23e9ea0:	eddf 7a36 	vldr	s15, [pc, #216]	; 23e9f7c <_Z6OBS_Dov+0x15ac>
 23e9ea4:	eeb4 0a67 	vcmp.f32	s0, s15
 23e9ea8:	eddf 7a24 	vldr	s15, [pc, #144]	; 23e9f3c <_Z6OBS_Dov+0x156c>
 23e9eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9eb0:	fe37 aa80 	vselgt.f32	s20, s15, s0
    strcpy (obs[oidx].sensor[sidx].id, "blx");
 23e9eb4:	261c      	movs	r6, #28
 23e9eb6:	fb06 f608 	mul.w	r6, r6, r8
 23e9eba:	1970      	adds	r0, r6, r5
 23e9ebc:	4930      	ldr	r1, [pc, #192]	; (23e9f80 <_Z6OBS_Dov+0x15b0>)
 23e9ebe:	4420      	add	r0, r4
 23e9ec0:	f012 fb06 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9ec4:	f640 2398 	movw	r3, #2712	; 0xa98
 23e9ec8:	9a00      	ldr	r2, [sp, #0]
 23e9eca:	fb03 6302 	mla	r3, r3, r2, r6
 23e9ece:	2200      	movs	r2, #0
 23e9ed0:	4423      	add	r3, r4
 23e9ed2:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23e9ed4:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = lux;
 23e9ed6:	ed83 aa09 	vstr	s20, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23e9eda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23e9ede:	4490      	add	r8, r2
  if (A4_State == A4_STATE_DISTANCE) {
 23e9ee0:	4b28      	ldr	r3, [pc, #160]	; (23e9f84 <_Z6OBS_Dov+0x15b4>)
 23e9ee2:	681f      	ldr	r7, [r3, #0]
 23e9ee4:	2f01      	cmp	r7, #1
 23e9ee6:	d151      	bne.n	23e9f8c <_Z6OBS_Dov+0x15bc>
    strcpy (obs[oidx].sensor[sidx].id, "sg"); // sg = snow or stream
 23e9ee8:	261c      	movs	r6, #28
 23e9eea:	fb06 f608 	mul.w	r6, r6, r8
 23e9eee:	1970      	adds	r0, r6, r5
 23e9ef0:	4925      	ldr	r1, [pc, #148]	; (23e9f88 <_Z6OBS_Dov+0x15b8>)
 23e9ef2:	4420      	add	r0, r4
 23e9ef4:	f012 faec 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9ef8:	f640 2398 	movw	r3, #2712	; 0xa98
 23e9efc:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23e9efe:	f108 0801 	add.w	r8, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9f02:	fb03 6602 	mla	r6, r3, r2, r6
 23e9f06:	2300      	movs	r3, #0
 23e9f08:	4426      	add	r6, r4
 23e9f0a:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = DistanceGauge_Median();
 23e9f0c:	f7fc fa14 	bl	23e6338 <_Z20DistanceGauge_Medianv>
 23e9f10:	ed86 0a09 	vstr	s0, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23e9f14:	f886 7030 	strb.w	r7, [r6, #48]	; 0x30
 23e9f18:	e038      	b.n	23e9f8c <_Z6OBS_Dov+0x15bc>
 23e9f1a:	bf00      	nop
 23e9f1c:	023fdca5 	.word	0x023fdca5
 23e9f20:	023fdca9 	.word	0x023fdca9
 23e9f24:	023fdcad 	.word	0x023fdcad
 23e9f28:	1006a2b8 	.word	0x1006a2b8
 23e9f2c:	023fdd4c 	.word	0x023fdd4c
 23e9f30:	1006f0e8 	.word	0x1006f0e8
 23e9f34:	c2200000 	.word	0xc2200000
 23e9f38:	42700000 	.word	0x42700000
 23e9f3c:	c479f99a 	.word	0xc479f99a
 23e9f40:	1006a2b9 	.word	0x1006a2b9
 23e9f44:	023fdd53 	.word	0x023fdd53
 23e9f48:	1006f0f4 	.word	0x1006f0f4
 23e9f4c:	1006a2ba 	.word	0x1006a2ba
 23e9f50:	023fdf4d 	.word	0x023fdf4d
 23e9f54:	1006f100 	.word	0x1006f100
 23e9f58:	1006a2bb 	.word	0x1006a2bb
 23e9f5c:	023fdf58 	.word	0x023fdf58
 23e9f60:	1006f10c 	.word	0x1006f10c
 23e9f64:	1006a7d8 	.word	0x1006a7d8
 23e9f68:	1007ac10 	.word	0x1007ac10
 23e9f6c:	47ea6000 	.word	0x47ea6000
 23e9f70:	c479c000 	.word	0xc479c000
 23e9f74:	023fdcb1 	.word	0x023fdcb1
 23e9f78:	1006a270 	.word	0x1006a270
 23e9f7c:	48438200 	.word	0x48438200
 23e9f80:	023fdcb5 	.word	0x023fdcb5
 23e9f84:	1006a24c 	.word	0x1006a24c
 23e9f88:	023fdcb9 	.word	0x023fdcb9
  if (A4_State == A4_STATE_RAW) {
 23e9f8c:	4bd5      	ldr	r3, [pc, #852]	; (23ea2e4 <_Z6OBS_Dov+0x1914>)
 23e9f8e:	681b      	ldr	r3, [r3, #0]
 23e9f90:	2b03      	cmp	r3, #3
 23e9f92:	f040 844d 	bne.w	23ea830 <_Z6OBS_Dov+0x1e60>
    strcpy (obs[oidx].sensor[sidx].id, "a4r");
 23e9f96:	261c      	movs	r6, #28
 23e9f98:	fb06 f608 	mul.w	r6, r6, r8
 23e9f9c:	1970      	adds	r0, r6, r5
 23e9f9e:	49d2      	ldr	r1, [pc, #840]	; (23ea2e8 <_Z6OBS_Dov+0x1918>)
 23e9fa0:	4420      	add	r0, r4
 23e9fa2:	f012 fa95 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9fa6:	f640 2398 	movw	r3, #2712	; 0xa98
 23e9faa:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx].f_obs = Pin_ReadAvg(A4);
 23e9fac:	200f      	movs	r0, #15
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9fae:	fb03 6602 	mla	r6, r3, r2, r6
 23e9fb2:	2300      	movs	r3, #0
 23e9fb4:	4426      	add	r6, r4
 23e9fb6:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = Pin_ReadAvg(A4);
 23e9fb8:	f7fc f984 	bl	23e62c4 <_Z11Pin_ReadAvgi>
    obs[oidx].sensor[sidx++].inuse = true;
 23e9fbc:	2301      	movs	r3, #1
    obs[oidx].sensor[sidx].f_obs = Pin_ReadAvg(A4);
 23e9fbe:	ed86 0a09 	vstr	s0, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23e9fc2:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
 23e9fc6:	4498      	add	r8, r3
  if (A5_State == A5_STATE_RAW) {
 23e9fc8:	4bc8      	ldr	r3, [pc, #800]	; (23ea2ec <_Z6OBS_Dov+0x191c>)
 23e9fca:	681f      	ldr	r7, [r3, #0]
 23e9fcc:	2f01      	cmp	r7, #1
 23e9fce:	d118      	bne.n	23ea002 <_Z6OBS_Dov+0x1632>
    strcpy (obs[oidx].sensor[sidx].id, "a5r");
 23e9fd0:	261c      	movs	r6, #28
 23e9fd2:	fb06 f608 	mul.w	r6, r6, r8
 23e9fd6:	1970      	adds	r0, r6, r5
 23e9fd8:	49c5      	ldr	r1, [pc, #788]	; (23ea2f0 <_Z6OBS_Dov+0x1920>)
 23e9fda:	4420      	add	r0, r4
 23e9fdc:	f012 fa78 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9fe0:	f640 2398 	movw	r3, #2712	; 0xa98
 23e9fe4:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx].f_obs = Pin_ReadAvg(A5);
 23e9fe6:	200e      	movs	r0, #14
    obs[oidx].sensor[sidx].type = F_OBS;
 23e9fe8:	fb03 6602 	mla	r6, r3, r2, r6
 23e9fec:	2300      	movs	r3, #0
 23e9fee:	4426      	add	r6, r4
 23e9ff0:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = Pin_ReadAvg(A5);
 23e9ff2:	f7fc f967 	bl	23e62c4 <_Z11Pin_ReadAvgi>
 23e9ff6:	ed86 0a09 	vstr	s0, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23e9ffa:	f886 7030 	strb.w	r7, [r6, #48]	; 0x30
 23e9ffe:	f108 0801 	add.w	r8, r8, #1
  if (PM25AQI_exists) {
 23ea002:	4bbc      	ldr	r3, [pc, #752]	; (23ea2f4 <_Z6OBS_Dov+0x1924>)
 23ea004:	781b      	ldrb	r3, [r3, #0]
 23ea006:	2b00      	cmp	r3, #0
 23ea008:	f000 8087 	beq.w	23ea11a <_Z6OBS_Dov+0x174a>
    strcpy (obs[oidx].sensor[sidx].id, "pm1s10");
 23ea00c:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx].type = I_OBS;
 23ea010:	f640 2698 	movw	r6, #2712	; 0xa98
 23ea014:	f04f 0b01 	mov.w	fp, #1
 23ea018:	fb0a f708 	mul.w	r7, sl, r8
    strcpy (obs[oidx].sensor[sidx].id, "pm1s10");
 23ea01c:	19e8      	adds	r0, r5, r7
 23ea01e:	49b6      	ldr	r1, [pc, #728]	; (23ea2f8 <_Z6OBS_Dov+0x1928>)
 23ea020:	4420      	add	r0, r4
 23ea022:	f012 fa55 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23ea026:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s10;
 23ea028:	f8df 9320 	ldr.w	r9, [pc, #800]	; 23ea34c <_Z6OBS_Dov+0x197c>
    obs[oidx].sensor[sidx].type = I_OBS;
 23ea02c:	435e      	muls	r6, r3
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
 23ea02e:	eb07 000a 	add.w	r0, r7, sl
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s10;
 23ea032:	f8b9 3000 	ldrh.w	r3, [r9]
    obs[oidx].sensor[sidx].type = I_OBS;
 23ea036:	19ba      	adds	r2, r7, r6
 23ea038:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
 23ea03a:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s10;
 23ea03c:	6293      	str	r3, [r2, #40]	; 0x28
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
 23ea03e:	49af      	ldr	r1, [pc, #700]	; (23ea2fc <_Z6OBS_Dov+0x192c>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ea040:	eb08 030b 	add.w	r3, r8, fp
    obs[oidx].sensor[sidx].type = I_OBS;
 23ea044:	f8c2 b020 	str.w	fp, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ea048:	f882 b030 	strb.w	fp, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
 23ea04c:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ea04e:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
 23ea050:	f012 fa3e 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23ea054:	9b01      	ldr	r3, [sp, #4]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s25;
 23ea056:	f8b9 2002 	ldrh.w	r2, [r9, #2]
    obs[oidx].sensor[sidx].type = I_OBS;
 23ea05a:	fb0a 6303 	mla	r3, sl, r3, r6
    strcpy (obs[oidx].sensor[sidx].id, "pm1s100");
 23ea05e:	f107 0038 	add.w	r0, r7, #56	; 0x38
    obs[oidx].sensor[sidx].type = I_OBS;
 23ea062:	4423      	add	r3, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1s100");
 23ea064:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s25;
 23ea066:	629a      	str	r2, [r3, #40]	; 0x28
    strcpy (obs[oidx].sensor[sidx].id, "pm1s100");
 23ea068:	49a5      	ldr	r1, [pc, #660]	; (23ea300 <_Z6OBS_Dov+0x1930>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ea06a:	f108 0202 	add.w	r2, r8, #2
    obs[oidx].sensor[sidx].type = I_OBS;
 23ea06e:	f8c3 b020 	str.w	fp, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ea072:	f883 b030 	strb.w	fp, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1s100");
 23ea076:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ea078:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1s100");
 23ea07a:	f012 fa29 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23ea07e:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s100;
 23ea080:	f8b9 3004 	ldrh.w	r3, [r9, #4]
    obs[oidx].sensor[sidx].type = I_OBS;
 23ea084:	fb0a 6202 	mla	r2, sl, r2, r6
    strcpy (obs[oidx].sensor[sidx].id, "pm1e10");
 23ea088:	f107 0054 	add.w	r0, r7, #84	; 0x54
    obs[oidx].sensor[sidx].type = I_OBS;
 23ea08c:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1e10");
 23ea08e:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s100;
 23ea090:	6293      	str	r3, [r2, #40]	; 0x28
    strcpy (obs[oidx].sensor[sidx].id, "pm1e10");
 23ea092:	499c      	ldr	r1, [pc, #624]	; (23ea304 <_Z6OBS_Dov+0x1934>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ea094:	f108 0303 	add.w	r3, r8, #3
    obs[oidx].sensor[sidx].type = I_OBS;
 23ea098:	f8c2 b020 	str.w	fp, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ea09c:	f882 b030 	strb.w	fp, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1e10");
 23ea0a0:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ea0a2:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1e10");
 23ea0a4:	f012 fa14 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23ea0a8:	9b01      	ldr	r3, [sp, #4]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e10;
 23ea0aa:	f8b9 2006 	ldrh.w	r2, [r9, #6]
    obs[oidx].sensor[sidx].type = I_OBS;
 23ea0ae:	fb0a 6303 	mla	r3, sl, r3, r6
    strcpy (obs[oidx].sensor[sidx].id, "pm1e25");
 23ea0b2:	f107 0070 	add.w	r0, r7, #112	; 0x70
    obs[oidx].sensor[sidx].type = I_OBS;
 23ea0b6:	4423      	add	r3, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1e25");
 23ea0b8:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e10;
 23ea0ba:	629a      	str	r2, [r3, #40]	; 0x28
    strcpy (obs[oidx].sensor[sidx].id, "pm1e25");
 23ea0bc:	4992      	ldr	r1, [pc, #584]	; (23ea308 <_Z6OBS_Dov+0x1938>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ea0be:	f108 0204 	add.w	r2, r8, #4
    obs[oidx].sensor[sidx].type = I_OBS;
 23ea0c2:	f8c3 b020 	str.w	fp, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ea0c6:	f883 b030 	strb.w	fp, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1e25");
 23ea0ca:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ea0cc:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1e25");
 23ea0ce:	f012 f9ff 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23ea0d2:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e25;
 23ea0d4:	f8b9 3008 	ldrh.w	r3, [r9, #8]
    obs[oidx].sensor[sidx].type = I_OBS;
 23ea0d8:	fb0a 6202 	mla	r2, sl, r2, r6
    strcpy (obs[oidx].sensor[sidx].id, "pm1e100");
 23ea0dc:	f107 008c 	add.w	r0, r7, #140	; 0x8c
    obs[oidx].sensor[sidx].type = I_OBS;
 23ea0e0:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1e100");
 23ea0e2:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e25;
 23ea0e4:	6293      	str	r3, [r2, #40]	; 0x28
    strcpy (obs[oidx].sensor[sidx].id, "pm1e100");
 23ea0e6:	4989      	ldr	r1, [pc, #548]	; (23ea30c <_Z6OBS_Dov+0x193c>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ea0e8:	f108 0305 	add.w	r3, r8, #5
    obs[oidx].sensor[sidx].type = I_OBS;
 23ea0ec:	f8c2 b020 	str.w	fp, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ea0f0:	f882 b030 	strb.w	fp, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1e100");
 23ea0f4:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ea0f6:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1e100");
 23ea0f8:	f012 f9ea 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23ea0fc:	9b01      	ldr	r3, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23ea0fe:	f108 0806 	add.w	r8, r8, #6
    obs[oidx].sensor[sidx].type = I_OBS;
 23ea102:	fb0a 6603 	mla	r6, sl, r3, r6
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e100;
 23ea106:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    obs[oidx].sensor[sidx].type = I_OBS;
 23ea10a:	4426      	add	r6, r4
 23ea10c:	f8c6 b020 	str.w	fp, [r6, #32]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e100;
 23ea110:	62b3      	str	r3, [r6, #40]	; 0x28
    obs[oidx].sensor[sidx++].inuse = true;
 23ea112:	f886 b030 	strb.w	fp, [r6, #48]	; 0x30
    pm25aqi_clear();
 23ea116:	f7fb fd5d 	bl	23e5bd4 <_Z13pm25aqi_clearv>
  if (HI_exists) {
 23ea11a:	4b7d      	ldr	r3, [pc, #500]	; (23ea310 <_Z6OBS_Dov+0x1940>)
 23ea11c:	781b      	ldrb	r3, [r3, #0]
 23ea11e:	2b00      	cmp	r3, #0
 23ea120:	f000 83d0 	beq.w	23ea8c4 <_Z6OBS_Dov+0x1ef4>
    strcpy (obs[oidx].sensor[sidx].id, "hi");
 23ea124:	261c      	movs	r6, #28
    heat_index = hi_calculate(sht1_temp, sht1_humid);
 23ea126:	eef0 0a69 	vmov.f32	s1, s19
 23ea12a:	eeb0 0a48 	vmov.f32	s0, s16
 23ea12e:	f7fb f967 	bl	23e5400 <_Z12hi_calculateff>
    strcpy (obs[oidx].sensor[sidx].id, "hi");
 23ea132:	fb06 f608 	mul.w	r6, r6, r8
 23ea136:	1970      	adds	r0, r6, r5
 23ea138:	4976      	ldr	r1, [pc, #472]	; (23ea314 <_Z6OBS_Dov+0x1944>)
 23ea13a:	4420      	add	r0, r4
    heat_index = hi_calculate(sht1_temp, sht1_humid);
 23ea13c:	ee10 7a10 	vmov	r7, s0
    strcpy (obs[oidx].sensor[sidx].id, "hi");
 23ea140:	f012 f9c6 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea144:	f640 2398 	movw	r3, #2712	; 0xa98
 23ea148:	9a00      	ldr	r2, [sp, #0]
 23ea14a:	fb03 6302 	mla	r3, r3, r2, r6
 23ea14e:	2200      	movs	r2, #0
 23ea150:	4423      	add	r3, r4
 23ea152:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;    
 23ea154:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = (float) heat_index;
 23ea156:	625f      	str	r7, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;    
 23ea158:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23ea15c:	4490      	add	r8, r2
  if (WBT_exists) {
 23ea15e:	4b6e      	ldr	r3, [pc, #440]	; (23ea318 <_Z6OBS_Dov+0x1948>)
 23ea160:	781b      	ldrb	r3, [r3, #0]
 23ea162:	2b00      	cmp	r3, #0
 23ea164:	f000 83b0 	beq.w	23ea8c8 <_Z6OBS_Dov+0x1ef8>
    wetbulb_temp = wbt_calculate(sht1_temp, sht1_humid);
 23ea168:	ee19 0a90 	vmov	r0, s19
 23ea16c:	f7f8 fa08 	bl	23e2580 <__aeabi_f2d>
 23ea170:	ec41 0b19 	vmov	d9, r0, r1
 23ea174:	ee18 0a10 	vmov	r0, s16
 23ea178:	f7f8 fa02 	bl	23e2580 <__aeabi_f2d>
 23ea17c:	eeb0 1a49 	vmov.f32	s2, s18
 23ea180:	eef0 1a69 	vmov.f32	s3, s19
 23ea184:	ec41 0b10 	vmov	d0, r0, r1
 23ea188:	f7fb f852 	bl	23e5230 <_Z13wbt_calculatedd>
    strcpy (obs[oidx].sensor[sidx].id, "wbt");
 23ea18c:	261c      	movs	r6, #28
    wetbulb_temp = wbt_calculate(sht1_temp, sht1_humid);
 23ea18e:	ec51 0b10 	vmov	r0, r1, d0
 23ea192:	f7f8 fd45 	bl	23e2c20 <__aeabi_d2f>
    strcpy (obs[oidx].sensor[sidx].id, "wbt");
 23ea196:	fb06 f608 	mul.w	r6, r6, r8
    wetbulb_temp = wbt_calculate(sht1_temp, sht1_humid);
 23ea19a:	4681      	mov	r9, r0
    strcpy (obs[oidx].sensor[sidx].id, "wbt");
 23ea19c:	1970      	adds	r0, r6, r5
 23ea19e:	4420      	add	r0, r4
 23ea1a0:	495e      	ldr	r1, [pc, #376]	; (23ea31c <_Z6OBS_Dov+0x194c>)
 23ea1a2:	f012 f995 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea1a6:	f640 2398 	movw	r3, #2712	; 0xa98
 23ea1aa:	9a00      	ldr	r2, [sp, #0]
 23ea1ac:	fb03 6602 	mla	r6, r3, r2, r6
 23ea1b0:	2300      	movs	r3, #0
 23ea1b2:	4434      	add	r4, r6
 23ea1b4:	6223      	str	r3, [r4, #32]
    obs[oidx].sensor[sidx++].inuse = true;  
 23ea1b6:	2301      	movs	r3, #1
    obs[oidx].sensor[sidx].f_obs = (float) wetbulb_temp;
 23ea1b8:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;  
 23ea1bc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 23ea1c0:	4498      	add	r8, r3
  if (WBGT_exists) {
 23ea1c2:	4b57      	ldr	r3, [pc, #348]	; (23ea320 <_Z6OBS_Dov+0x1950>)
 23ea1c4:	4c57      	ldr	r4, [pc, #348]	; (23ea324 <_Z6OBS_Dov+0x1954>)
 23ea1c6:	781b      	ldrb	r3, [r3, #0]
 23ea1c8:	2b00      	cmp	r3, #0
 23ea1ca:	d039      	beq.n	23ea240 <_Z6OBS_Dov+0x1870>
    if (MCP_3_exists) {
 23ea1cc:	4b56      	ldr	r3, [pc, #344]	; (23ea328 <_Z6OBS_Dov+0x1958>)
 23ea1ce:	781b      	ldrb	r3, [r3, #0]
 23ea1d0:	2b00      	cmp	r3, #0
 23ea1d2:	f000 837c 	beq.w	23ea8ce <_Z6OBS_Dov+0x1efe>
      wbgt = wbgt_using_wbt(sht1_temp, mcp3_temp, wetbulb_temp); // TempAir, TempGlobe, TempWetBulb
 23ea1d6:	4648      	mov	r0, r9
 23ea1d8:	f7f8 f9d2 	bl	23e2580 <__aeabi_f2d>
 23ea1dc:	ec41 0b1a 	vmov	d10, r0, r1
 23ea1e0:	ee18 0a90 	vmov	r0, s17
 23ea1e4:	f7f8 f9cc 	bl	23e2580 <__aeabi_f2d>
 23ea1e8:	ec41 0b19 	vmov	d9, r0, r1
 23ea1ec:	ee18 0a10 	vmov	r0, s16
 23ea1f0:	f7f8 f9c6 	bl	23e2580 <__aeabi_f2d>
 23ea1f4:	eeb0 2a4a 	vmov.f32	s4, s20
 23ea1f8:	eef0 2a6a 	vmov.f32	s5, s21
 23ea1fc:	eeb0 1a49 	vmov.f32	s2, s18
 23ea200:	eef0 1a69 	vmov.f32	s3, s19
 23ea204:	ec41 0b10 	vmov	d0, r0, r1
 23ea208:	f7fb fb26 	bl	23e5858 <_Z14wbgt_using_wbtddd>
    strcpy (obs[oidx].sensor[sidx].id, "wbgt");
 23ea20c:	261c      	movs	r6, #28
      wbgt = wbgt_using_hi(heat_index);
 23ea20e:	ec51 0b10 	vmov	r0, r1, d0
 23ea212:	f7f8 fd05 	bl	23e2c20 <__aeabi_d2f>
    strcpy (obs[oidx].sensor[sidx].id, "wbgt");
 23ea216:	fb06 f608 	mul.w	r6, r6, r8
      wbgt = wbgt_using_hi(heat_index);
 23ea21a:	4607      	mov	r7, r0
    strcpy (obs[oidx].sensor[sidx].id, "wbgt");
 23ea21c:	1970      	adds	r0, r6, r5
 23ea21e:	4943      	ldr	r1, [pc, #268]	; (23ea32c <_Z6OBS_Dov+0x195c>)
 23ea220:	4420      	add	r0, r4
 23ea222:	f012 f955 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea226:	f640 2398 	movw	r3, #2712	; 0xa98
 23ea22a:	9a00      	ldr	r2, [sp, #0]
 23ea22c:	fb03 6302 	mla	r3, r3, r2, r6
 23ea230:	2200      	movs	r2, #0
 23ea232:	4423      	add	r3, r4
 23ea234:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;    
 23ea236:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = (float) wbgt;
 23ea238:	625f      	str	r7, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;    
 23ea23a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23ea23e:	4490      	add	r8, r2
  if (TLW_exists) {
 23ea240:	4b3b      	ldr	r3, [pc, #236]	; (23ea330 <_Z6OBS_Dov+0x1960>)
 23ea242:	781b      	ldrb	r3, [r3, #0]
 23ea244:	2b00      	cmp	r3, #0
 23ea246:	f000 808c 	beq.w	23ea362 <_Z6OBS_Dov+0x1992>
    tlw.newReading();
 23ea24a:	483a      	ldr	r0, [pc, #232]	; (23ea334 <_Z6OBS_Dov+0x1964>)
 23ea24c:	f006 fe66 	bl	23f0f1c <_ZN8LeafSens10newReadingEv>
    delay(100);
 23ea250:	2064      	movs	r0, #100	; 0x64
 23ea252:	f00d f881 	bl	23f7358 <delay>
    float w = tlw.getWet();
 23ea256:	4837      	ldr	r0, [pc, #220]	; (23ea334 <_Z6OBS_Dov+0x1964>)
 23ea258:	f006 fe76 	bl	23f0f48 <_ZN8LeafSens6getWetEv>
    float t = tlw.getTemp();
 23ea25c:	4835      	ldr	r0, [pc, #212]	; (23ea334 <_Z6OBS_Dov+0x1964>)
    float w = tlw.getWet();
 23ea25e:	eef0 8a40 	vmov.f32	s17, s0
    float t = tlw.getTemp();
 23ea262:	f006 fe83 	bl	23f0f6c <_ZN8LeafSens7getTempEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea266:	eeb4 0a40 	vcmp.f32	s0, s0
 23ea26a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea26e:	f180 8336 	bvs.w	23ea8de <_Z6OBS_Dov+0x1f0e>
 23ea272:	eddf 7a31 	vldr	s15, [pc, #196]	; 23ea338 <_Z6OBS_Dov+0x1968>
 23ea276:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ea27a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea27e:	f100 832e 	bmi.w	23ea8de <_Z6OBS_Dov+0x1f0e>
 23ea282:	eddf 7a2e 	vldr	s15, [pc, #184]	; 23ea33c <_Z6OBS_Dov+0x196c>
 23ea286:	eeb4 0a67 	vcmp.f32	s0, s15
 23ea28a:	eddf 7a2d 	vldr	s15, [pc, #180]	; 23ea340 <_Z6OBS_Dov+0x1970>
 23ea28e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea292:	fe37 8a80 	vselgt.f32	s16, s15, s0
    strcpy (obs[oidx].sensor[sidx].id, "tlww");
 23ea296:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea29a:	f640 2698 	movw	r6, #2712	; 0xa98
 23ea29e:	f04f 0900 	mov.w	r9, #0
    obs[oidx].sensor[sidx++].inuse = true; 
 23ea2a2:	2701      	movs	r7, #1
 23ea2a4:	fb0a f208 	mul.w	r2, sl, r8
    strcpy (obs[oidx].sensor[sidx].id, "tlww");
 23ea2a8:	18a8      	adds	r0, r5, r2
 23ea2aa:	4926      	ldr	r1, [pc, #152]	; (23ea344 <_Z6OBS_Dov+0x1974>)
 23ea2ac:	4420      	add	r0, r4
 23ea2ae:	9201      	str	r2, [sp, #4]
 23ea2b0:	f012 f90e 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea2b4:	9b00      	ldr	r3, [sp, #0]
 23ea2b6:	9a01      	ldr	r2, [sp, #4]
 23ea2b8:	435e      	muls	r6, r3
    strcpy (obs[oidx].sensor[sidx].id, "tlwt");
 23ea2ba:	eb02 000a 	add.w	r0, r2, sl
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea2be:	1993      	adds	r3, r2, r6
 23ea2c0:	4423      	add	r3, r4
    strcpy (obs[oidx].sensor[sidx].id, "tlwt");
 23ea2c2:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = (float) w;
 23ea2c4:	edc3 8a09 	vstr	s17, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea2c8:	f8c3 9020 	str.w	r9, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true; 
 23ea2cc:	f108 0b01 	add.w	fp, r8, #1
 23ea2d0:	f883 7030 	strb.w	r7, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tlwt");
 23ea2d4:	491c      	ldr	r1, [pc, #112]	; (23ea348 <_Z6OBS_Dov+0x1978>)
 23ea2d6:	4420      	add	r0, r4
 23ea2d8:	f012 f8fa 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea2dc:	fb0a 630b 	mla	r3, sl, fp, r6
 23ea2e0:	e036      	b.n	23ea350 <_Z6OBS_Dov+0x1980>
 23ea2e2:	bf00      	nop
 23ea2e4:	1006a24c 	.word	0x1006a24c
 23ea2e8:	023fdcbc 	.word	0x023fdcbc
 23ea2ec:	1006a250 	.word	0x1006a250
 23ea2f0:	023fdcce 	.word	0x023fdcce
 23ea2f4:	1006a2bd 	.word	0x1006a2bd
 23ea2f8:	023fdcd2 	.word	0x023fdcd2
 23ea2fc:	023fdcd9 	.word	0x023fdcd9
 23ea300:	023fdce0 	.word	0x023fdce0
 23ea304:	023fdce8 	.word	0x023fdce8
 23ea308:	023fdcef 	.word	0x023fdcef
 23ea30c:	023fdcf6 	.word	0x023fdcf6
 23ea310:	1006a29f 	.word	0x1006a29f
 23ea314:	023fdcfe 	.word	0x023fdcfe
 23ea318:	1006a7da 	.word	0x1006a7da
 23ea31c:	023fdd01 	.word	0x023fdd01
 23ea320:	1006a7d9 	.word	0x1006a7d9
 23ea324:	1006f540 	.word	0x1006f540
 23ea328:	1006a2ba 	.word	0x1006a2ba
 23ea32c:	023fdd05 	.word	0x023fdd05
 23ea330:	1006a7d4 	.word	0x1006a7d4
 23ea334:	1007abf0 	.word	0x1007abf0
 23ea338:	c2200000 	.word	0xc2200000
 23ea33c:	42700000 	.word	0x42700000
 23ea340:	c479f99a 	.word	0xc479f99a
 23ea344:	023fdd0a 	.word	0x023fdd0a
 23ea348:	023fdd0f 	.word	0x023fdd0f
 23ea34c:	1007aa14 	.word	0x1007aa14
 23ea350:	4423      	add	r3, r4
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23ea352:	ed83 8a09 	vstr	s16, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea356:	f8c3 9020 	str.w	r9, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ea35a:	f108 0802 	add.w	r8, r8, #2
 23ea35e:	f883 7030 	strb.w	r7, [r3, #48]	; 0x30
  if (TSM_exists) {
 23ea362:	4bd7      	ldr	r3, [pc, #860]	; (23ea6c0 <_Z6OBS_Dov+0x1cf0>)
 23ea364:	781b      	ldrb	r3, [r3, #0]
 23ea366:	2b00      	cmp	r3, #0
 23ea368:	d07f      	beq.n	23ea46a <_Z6OBS_Dov+0x1a9a>
    tsm.newReading();
 23ea36a:	48d6      	ldr	r0, [pc, #856]	; (23ea6c4 <_Z6OBS_Dov+0x1cf4>)
 23ea36c:	f008 fe6b 	bl	23f3046 <_ZN5SVCS310newReadingEv>
    delay(100);
 23ea370:	2064      	movs	r0, #100	; 0x64
 23ea372:	f00c fff1 	bl	23f7358 <delay>
    float e25 = tsm.getE25();
 23ea376:	48d3      	ldr	r0, [pc, #844]	; (23ea6c4 <_Z6OBS_Dov+0x1cf4>)
 23ea378:	f008 fe7c 	bl	23f3074 <_ZN5SVCS36getE25Ev>
    float ec = tsm.getEC();
 23ea37c:	48d1      	ldr	r0, [pc, #836]	; (23ea6c4 <_Z6OBS_Dov+0x1cf4>)
    float e25 = tsm.getE25();
 23ea37e:	eef0 9a40 	vmov.f32	s19, s0
    float ec = tsm.getEC();
 23ea382:	f008 fe89 	bl	23f3098 <_ZN5SVCS35getECEv>
    float vwc = tsm.getVWC();
 23ea386:	48cf      	ldr	r0, [pc, #828]	; (23ea6c4 <_Z6OBS_Dov+0x1cf4>)
    float ec = tsm.getEC();
 23ea388:	eeb0 9a40 	vmov.f32	s18, s0
    float vwc = tsm.getVWC();
 23ea38c:	f008 fea8 	bl	23f30e0 <_ZN5SVCS36getVWCEv>
    float t = tsm.getTemp();
 23ea390:	48cc      	ldr	r0, [pc, #816]	; (23ea6c4 <_Z6OBS_Dov+0x1cf4>)
    float vwc = tsm.getVWC();
 23ea392:	eef0 8a40 	vmov.f32	s17, s0
    float t = tsm.getTemp();
 23ea396:	f008 fe91 	bl	23f30bc <_ZN5SVCS37getTempEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea39a:	eeb4 0a40 	vcmp.f32	s0, s0
 23ea39e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea3a2:	f180 829f 	bvs.w	23ea8e4 <_Z6OBS_Dov+0x1f14>
 23ea3a6:	eddf 7ac8 	vldr	s15, [pc, #800]	; 23ea6c8 <_Z6OBS_Dov+0x1cf8>
 23ea3aa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ea3ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea3b2:	f100 8297 	bmi.w	23ea8e4 <_Z6OBS_Dov+0x1f14>
 23ea3b6:	eddf 7ac5 	vldr	s15, [pc, #788]	; 23ea6cc <_Z6OBS_Dov+0x1cfc>
 23ea3ba:	eeb4 0a67 	vcmp.f32	s0, s15
 23ea3be:	eddf 7ad8 	vldr	s15, [pc, #864]	; 23ea720 <_Z6OBS_Dov+0x1d50>
 23ea3c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea3c6:	fe37 8a80 	vselgt.f32	s16, s15, s0
    strcpy (obs[oidx].sensor[sidx].id, "tsme25");
 23ea3ca:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea3ce:	f640 2698 	movw	r6, #2712	; 0xa98
 23ea3d2:	fb0a f908 	mul.w	r9, sl, r8
    strcpy (obs[oidx].sensor[sidx].id, "tsme25");
 23ea3d6:	eb05 0009 	add.w	r0, r5, r9
 23ea3da:	49bd      	ldr	r1, [pc, #756]	; (23ea6d0 <_Z6OBS_Dov+0x1d00>)
 23ea3dc:	4420      	add	r0, r4
 23ea3de:	f012 f877 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea3e2:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ea3e4:	2701      	movs	r7, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea3e6:	435e      	muls	r6, r3
 23ea3e8:	2300      	movs	r3, #0
 23ea3ea:	eb09 0206 	add.w	r2, r9, r6
    strcpy (obs[oidx].sensor[sidx].id, "tsmec");
 23ea3ee:	eb09 000a 	add.w	r0, r9, sl
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea3f2:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "tsmec");
 23ea3f4:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea3f6:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = (float) e25;
 23ea3f8:	edc2 9a09 	vstr	s19, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "tsmec");
 23ea3fc:	49b5      	ldr	r1, [pc, #724]	; (23ea6d4 <_Z6OBS_Dov+0x1d04>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ea3fe:	f882 7030 	strb.w	r7, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tsmec");
 23ea402:	4420      	add	r0, r4
 23ea404:	f012 f864 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea408:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ea40a:	f108 0b01 	add.w	fp, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea40e:	fb0a 620b 	mla	r2, sl, fp, r6
    strcpy (obs[oidx].sensor[sidx].id, "tsmvwc");
 23ea412:	f109 0038 	add.w	r0, r9, #56	; 0x38
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea416:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "tsmvwc");
 23ea418:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea41a:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = (float) ec;
 23ea41c:	ed82 9a09 	vstr	s18, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "tsmvwc");
 23ea420:	49ad      	ldr	r1, [pc, #692]	; (23ea6d8 <_Z6OBS_Dov+0x1d08>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ea422:	f882 7030 	strb.w	r7, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tsmvwc");
 23ea426:	4420      	add	r0, r4
 23ea428:	f012 f852 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea42c:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ea42e:	f108 0b02 	add.w	fp, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea432:	fb0a 620b 	mla	r2, sl, fp, r6
    obs[oidx].sensor[sidx++].inuse = true; 
 23ea436:	f108 0b03 	add.w	fp, r8, #3
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea43a:	fb0a 660b 	mla	r6, sl, fp, r6
    strcpy (obs[oidx].sensor[sidx].id, "tsmt");
 23ea43e:	f109 0054 	add.w	r0, r9, #84	; 0x54
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea442:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "tsmt");
 23ea444:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea446:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = (float) vwc;
 23ea448:	edc2 8a09 	vstr	s17, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "tsmt");
 23ea44c:	49a3      	ldr	r1, [pc, #652]	; (23ea6dc <_Z6OBS_Dov+0x1d0c>)
    obs[oidx].sensor[sidx++].inuse = true; 
 23ea44e:	f882 7030 	strb.w	r7, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tsmt");
 23ea452:	4420      	add	r0, r4
 23ea454:	f012 f83c 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea458:	4426      	add	r6, r4
 23ea45a:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23ea45c:	ed86 8a09 	vstr	s16, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea460:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ea462:	f108 0804 	add.w	r8, r8, #4
 23ea466:	f886 7030 	strb.w	r7, [r6, #48]	; 0x30
  if (TMSM_exists) {
 23ea46a:	4b9d      	ldr	r3, [pc, #628]	; (23ea6e0 <_Z6OBS_Dov+0x1d10>)
 23ea46c:	4f9d      	ldr	r7, [pc, #628]	; (23ea6e4 <_Z6OBS_Dov+0x1d14>)
 23ea46e:	781b      	ldrb	r3, [r3, #0]
 23ea470:	2b00      	cmp	r3, #0
 23ea472:	f000 80c6 	beq.w	23ea602 <_Z6OBS_Dov+0x1c32>
    tmsm.newReading();
 23ea476:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea47a:	f640 2998 	movw	r9, #2712	; 0xa98
 23ea47e:	fb0a f608 	mul.w	r6, sl, r8
    tmsm.newReading();
 23ea482:	4899      	ldr	r0, [pc, #612]	; (23ea6e8 <_Z6OBS_Dov+0x1d18>)
 23ea484:	f008 fe79 	bl	23f317a <_ZN7SVMULTI10newReadingEv>
    delay(100);
 23ea488:	2064      	movs	r0, #100	; 0x64
 23ea48a:	f00c ff65 	bl	23f7358 <delay>
    tmsm.getData(&multi);
 23ea48e:	4896      	ldr	r0, [pc, #600]	; (23ea6e8 <_Z6OBS_Dov+0x1d18>)
 23ea490:	a90c      	add	r1, sp, #48	; 0x30
 23ea492:	f008 fead 	bl	23f31f0 <_ZN7SVMULTI7getDataEP10soil_ret_t>
    strcpy (obs[oidx].sensor[sidx].id, "tmsms1");
 23ea496:	19a8      	adds	r0, r5, r6
 23ea498:	4994      	ldr	r1, [pc, #592]	; (23ea6ec <_Z6OBS_Dov+0x1d1c>)
 23ea49a:	4420      	add	r0, r4
 23ea49c:	f012 f818 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea4a0:	2200      	movs	r2, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ea4a2:	f04f 0b01 	mov.w	fp, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea4a6:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms2");
 23ea4a8:	eb06 000a 	add.w	r0, r6, sl
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea4ac:	fb09 f903 	mul.w	r9, r9, r3
 23ea4b0:	eb06 0309 	add.w	r3, r6, r9
 23ea4b4:	4423      	add	r3, r4
 23ea4b6:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[0];
 23ea4b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    strcpy (obs[oidx].sensor[sidx].id, "tmsms2");
 23ea4ba:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[0];
 23ea4bc:	625a      	str	r2, [r3, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "tmsms2");
 23ea4be:	498c      	ldr	r1, [pc, #560]	; (23ea6f0 <_Z6OBS_Dov+0x1d20>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ea4c0:	f108 0201 	add.w	r2, r8, #1
 23ea4c4:	f883 b030 	strb.w	fp, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tmsms2");
 23ea4c8:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ea4ca:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms2");
 23ea4cc:	f012 f800 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea4d0:	2300      	movs	r3, #0
 23ea4d2:	9a01      	ldr	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms3");
 23ea4d4:	f106 0038 	add.w	r0, r6, #56	; 0x38
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea4d8:	fb0a 9202 	mla	r2, sl, r2, r9
 23ea4dc:	4422      	add	r2, r4
 23ea4de:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[1];
 23ea4e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
    strcpy (obs[oidx].sensor[sidx].id, "tmsms3");
 23ea4e2:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[1];
 23ea4e4:	6253      	str	r3, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "tmsms3");
 23ea4e6:	4983      	ldr	r1, [pc, #524]	; (23ea6f4 <_Z6OBS_Dov+0x1d24>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ea4e8:	f108 0302 	add.w	r3, r8, #2
 23ea4ec:	f882 b030 	strb.w	fp, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tmsms3");
 23ea4f0:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ea4f2:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms3");
 23ea4f4:	f011 ffec 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea4f8:	2200      	movs	r2, #0
 23ea4fa:	9b01      	ldr	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms4");
 23ea4fc:	f106 0054 	add.w	r0, r6, #84	; 0x54
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea500:	fb0a 9303 	mla	r3, sl, r3, r9
 23ea504:	4423      	add	r3, r4
 23ea506:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[2];
 23ea508:	9a15      	ldr	r2, [sp, #84]	; 0x54
    strcpy (obs[oidx].sensor[sidx].id, "tmsms4");
 23ea50a:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[2];
 23ea50c:	625a      	str	r2, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ea50e:	f883 b030 	strb.w	fp, [r3, #48]	; 0x30
 23ea512:	f108 0203 	add.w	r2, r8, #3
    strcpy (obs[oidx].sensor[sidx].id, "tmsms4");
 23ea516:	4420      	add	r0, r4
 23ea518:	4977      	ldr	r1, [pc, #476]	; (23ea6f8 <_Z6OBS_Dov+0x1d28>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ea51a:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms4");
 23ea51c:	f011 ffd8 	bl	23fc4d0 <strcpy>
    t = multi.temp[0];
 23ea520:	ed9d 8a0c 	vldr	s16, [sp, #48]	; 0x30
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea524:	eeb4 8a48 	vcmp.f32	s16, s16
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea528:	2300      	movs	r3, #0
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea52e:	9a01      	ldr	r2, [sp, #4]
 23ea530:	fb0a 9902 	mla	r9, sl, r2, r9
 23ea534:	444c      	add	r4, r9
 23ea536:	6223      	str	r3, [r4, #32]
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[3];
 23ea538:	9b16      	ldr	r3, [sp, #88]	; 0x58
    obs[oidx].sensor[sidx++].inuse = true;
 23ea53a:	f108 0904 	add.w	r9, r8, #4
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[3];
 23ea53e:	6263      	str	r3, [r4, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ea540:	f884 b030 	strb.w	fp, [r4, #48]	; 0x30
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea544:	f180 81d1 	bvs.w	23ea8ea <_Z6OBS_Dov+0x1f1a>
 23ea548:	eddf 7a5f 	vldr	s15, [pc, #380]	; 23ea6c8 <_Z6OBS_Dov+0x1cf8>
 23ea54c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23ea550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea554:	f100 81c9 	bmi.w	23ea8ea <_Z6OBS_Dov+0x1f1a>
 23ea558:	eddf 7a5c 	vldr	s15, [pc, #368]	; 23ea6cc <_Z6OBS_Dov+0x1cfc>
 23ea55c:	eeb4 8a67 	vcmp.f32	s16, s15
 23ea560:	eddf 7a6f 	vldr	s15, [pc, #444]	; 23ea720 <_Z6OBS_Dov+0x1d50>
 23ea564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea568:	fe37 8a88 	vselgt.f32	s16, s15, s16
    strcpy (obs[oidx].sensor[sidx].id, "tmsmt1");
 23ea56c:	f106 0070 	add.w	r0, r6, #112	; 0x70
 23ea570:	4428      	add	r0, r5
 23ea572:	4962      	ldr	r1, [pc, #392]	; (23ea6fc <_Z6OBS_Dov+0x1d2c>)
 23ea574:	4438      	add	r0, r7
 23ea576:	f011 ffab 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea57a:	f640 2398 	movw	r3, #2712	; 0xa98
 23ea57e:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ea580:	f108 0405 	add.w	r4, r8, #5
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea584:	4353      	muls	r3, r2
 23ea586:	221c      	movs	r2, #28
 23ea588:	fb02 3309 	mla	r3, r2, r9, r3
 23ea58c:	443b      	add	r3, r7
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23ea58e:	ed83 8a09 	vstr	s16, [r3, #36]	; 0x24
    t = multi.temp[1];
 23ea592:	ed9d 8a0d 	vldr	s16, [sp, #52]	; 0x34
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea596:	2200      	movs	r2, #0
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea598:	eeb4 8a48 	vcmp.f32	s16, s16
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea59c:	621a      	str	r2, [r3, #32]
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea59e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    obs[oidx].sensor[sidx++].inuse = true;
 23ea5a2:	f04f 0201 	mov.w	r2, #1
 23ea5a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea5aa:	f180 81a1 	bvs.w	23ea8f0 <_Z6OBS_Dov+0x1f20>
 23ea5ae:	eddf 7a46 	vldr	s15, [pc, #280]	; 23ea6c8 <_Z6OBS_Dov+0x1cf8>
 23ea5b2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23ea5b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea5ba:	f100 8199 	bmi.w	23ea8f0 <_Z6OBS_Dov+0x1f20>
 23ea5be:	eddf 7a43 	vldr	s15, [pc, #268]	; 23ea6cc <_Z6OBS_Dov+0x1cfc>
 23ea5c2:	eeb4 8a67 	vcmp.f32	s16, s15
 23ea5c6:	eddf 7a56 	vldr	s15, [pc, #344]	; 23ea720 <_Z6OBS_Dov+0x1d50>
 23ea5ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea5ce:	fe37 8a88 	vselgt.f32	s16, s15, s16
    strcpy (obs[oidx].sensor[sidx].id, "tmsmt2");
 23ea5d2:	f106 008c 	add.w	r0, r6, #140	; 0x8c
 23ea5d6:	4428      	add	r0, r5
 23ea5d8:	4949      	ldr	r1, [pc, #292]	; (23ea700 <_Z6OBS_Dov+0x1d30>)
 23ea5da:	4438      	add	r0, r7
 23ea5dc:	f011 ff78 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea5e0:	f640 2398 	movw	r3, #2712	; 0xa98
 23ea5e4:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ea5e6:	f108 0806 	add.w	r8, r8, #6
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea5ea:	4353      	muls	r3, r2
 23ea5ec:	221c      	movs	r2, #28
 23ea5ee:	fb02 3304 	mla	r3, r2, r4, r3
 23ea5f2:	2200      	movs	r2, #0
 23ea5f4:	443b      	add	r3, r7
 23ea5f6:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ea5f8:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23ea5fa:	ed83 8a09 	vstr	s16, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ea5fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  if (PMTS_exists) {
 23ea602:	4b40      	ldr	r3, [pc, #256]	; (23ea704 <_Z6OBS_Dov+0x1d34>)
 23ea604:	781b      	ldrb	r3, [r3, #0]
 23ea606:	b1d3      	cbz	r3, 23ea63e <_Z6OBS_Dov+0x1c6e>
    float t = ptms_readtempc();
 23ea608:	f7fb fcea 	bl	23e5fe0 <_Z14ptms_readtempcv>
    strcpy (obs[oidx].sensor[sidx].id, "pmts");
 23ea60c:	231c      	movs	r3, #28
 23ea60e:	fb03 f808 	mul.w	r8, r3, r8
 23ea612:	eb08 0005 	add.w	r0, r8, r5
 23ea616:	493c      	ldr	r1, [pc, #240]	; (23ea708 <_Z6OBS_Dov+0x1d38>)
 23ea618:	4438      	add	r0, r7
    float t = ptms_readtempc();
 23ea61a:	eeb0 8a40 	vmov.f32	s16, s0
    strcpy (obs[oidx].sensor[sidx].id, "pmts");
 23ea61e:	f011 ff57 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea622:	f640 2398 	movw	r3, #2712	; 0xa98
 23ea626:	9a00      	ldr	r2, [sp, #0]
 23ea628:	fb03 8802 	mla	r8, r3, r2, r8
 23ea62c:	2300      	movs	r3, #0
 23ea62e:	44b8      	add	r8, r7
 23ea630:	f8c8 3020 	str.w	r3, [r8, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ea634:	2301      	movs	r3, #1
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23ea636:	ed88 8a09 	vstr	s16, [r8, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ea63a:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
  obs[oidx].hth = SystemStatusBits;
 23ea63e:	f640 2398 	movw	r3, #2712	; 0xa98
 23ea642:	9a00      	ldr	r2, [sp, #0]
 23ea644:	fb03 7702 	mla	r7, r3, r2, r7
 23ea648:	4b30      	ldr	r3, [pc, #192]	; (23ea70c <_Z6OBS_Dov+0x1d3c>)
  OBS_Log(oidx);
 23ea64a:	4610      	mov	r0, r2
  obs[oidx].hth = SystemStatusBits;
 23ea64c:	681b      	ldr	r3, [r3, #0]
 23ea64e:	617b      	str	r3, [r7, #20]
  OBS_Log(oidx);
 23ea650:	f7fd fb00 	bl	23e7c54 <_Z7OBS_Logi>
  lastOBS = System.millis();
 23ea654:	f7f9 fc43 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23ea658:	4b2d      	ldr	r3, [pc, #180]	; (23ea710 <_Z6OBS_Dov+0x1d40>)
 23ea65a:	e9c3 0100 	strd	r0, r1, [r3]
}
 23ea65e:	b019      	add	sp, #100	; 0x64
 23ea660:	ecbd 8b06 	vpop	{d8-d10}
 23ea664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    float h = 0.0;
 23ea668:	eddf 8a2c 	vldr	s17, [pc, #176]	; 23ea71c <_Z6OBS_Dov+0x1d4c>
    float t = 0.0;
 23ea66c:	eeb0 8a68 	vmov.f32	s16, s17
    float p = 0.0;
 23ea670:	eef0 9a68 	vmov.f32	s19, s17
 23ea674:	f7fe bcf1 	b.w	23e905a <_Z6OBS_Dov+0x68a>
      p = bm32.readPressure()/100.0F;       // bp2 hPa
 23ea678:	4826      	ldr	r0, [pc, #152]	; (23ea714 <_Z6OBS_Dov+0x1d44>)
 23ea67a:	f003 ff4e 	bl	23ee51a <_ZN15Adafruit_BMP3XX12readPressureEv>
 23ea67e:	eddf 7a26 	vldr	s15, [pc, #152]	; 23ea718 <_Z6OBS_Dov+0x1d48>
      t = bm32.readTemperature();           // bt2
 23ea682:	4824      	ldr	r0, [pc, #144]	; (23ea714 <_Z6OBS_Dov+0x1d44>)
      p = bm32.readPressure()/100.0F;       // bp2 hPa
 23ea684:	eec0 9a27 	vdiv.f32	s19, s0, s15
      t = bm32.readTemperature();           // bt2
 23ea688:	f003 ff3c 	bl	23ee504 <_ZN15Adafruit_BMP3XX15readTemperatureEv>
 23ea68c:	f7fe bc84 	b.w	23e8f98 <_Z6OBS_Dov+0x5c8>
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23ea690:	eddf 9a23 	vldr	s19, [pc, #140]	; 23ea720 <_Z6OBS_Dov+0x1d50>
 23ea694:	f7fe bd08 	b.w	23e90a8 <_Z6OBS_Dov+0x6d8>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea698:	ed9f 8a21 	vldr	s16, [pc, #132]	; 23ea720 <_Z6OBS_Dov+0x1d50>
 23ea69c:	f7fe bd1c 	b.w	23e90d8 <_Z6OBS_Dov+0x708>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ea6a0:	eddf 8a1f 	vldr	s17, [pc, #124]	; 23ea720 <_Z6OBS_Dov+0x1d50>
 23ea6a4:	f7fe bd2e 	b.w	23e9104 <_Z6OBS_Dov+0x734>
    obs[oidx].sensor[sidx++].inuse = true;
 23ea6a8:	46b8      	mov	r8, r7
 23ea6aa:	f7fe bd6f 	b.w	23e918c <_Z6OBS_Dov+0x7bc>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ea6ae:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 23ea720 <_Z6OBS_Dov+0x1d50>
 23ea6b2:	f7fe bd98 	b.w	23e91e6 <_Z6OBS_Dov+0x816>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea6b6:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 23ea720 <_Z6OBS_Dov+0x1d50>
 23ea6ba:	f7fe bdcd 	b.w	23e9258 <_Z6OBS_Dov+0x888>
 23ea6be:	bf00      	nop
 23ea6c0:	1006a7d6 	.word	0x1006a7d6
 23ea6c4:	1007ac00 	.word	0x1007ac00
 23ea6c8:	c2200000 	.word	0xc2200000
 23ea6cc:	42700000 	.word	0x42700000
 23ea6d0:	023fdd14 	.word	0x023fdd14
 23ea6d4:	023fdd1b 	.word	0x023fdd1b
 23ea6d8:	023fdd21 	.word	0x023fdd21
 23ea6dc:	023fdd28 	.word	0x023fdd28
 23ea6e0:	1006a7d5 	.word	0x1006a7d5
 23ea6e4:	1006f540 	.word	0x1006f540
 23ea6e8:	1007abf8 	.word	0x1007abf8
 23ea6ec:	023fdd2d 	.word	0x023fdd2d
 23ea6f0:	023fdd34 	.word	0x023fdd34
 23ea6f4:	023fdd3b 	.word	0x023fdd3b
 23ea6f8:	023fdd42 	.word	0x023fdd42
 23ea6fc:	023fdd49 	.word	0x023fdd49
 23ea700:	023fdd50 	.word	0x023fdd50
 23ea704:	1006a2be 	.word	0x1006a2be
 23ea708:	023fdd57 	.word	0x023fdd57
 23ea70c:	1006a168 	.word	0x1006a168
 23ea710:	1006aea0 	.word	0x1006aea0
 23ea714:	1006aa38 	.word	0x1006aa38
 23ea718:	42c80000 	.word	0x42c80000
 23ea71c:	00000000 	.word	0x00000000
 23ea720:	c479f99a 	.word	0xc479f99a
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea724:	ed1f 8a02 	vldr	s16, [pc, #-8]	; 23ea720 <_Z6OBS_Dov+0x1d50>
 23ea728:	f7fe bdd5 	b.w	23e92d6 <_Z6OBS_Dov+0x906>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ea72c:	ed5f 9a04 	vldr	s19, [pc, #-16]	; 23ea720 <_Z6OBS_Dov+0x1d50>
 23ea730:	f7fe be08 	b.w	23e9344 <_Z6OBS_Dov+0x974>
  float sht1_temp = 0.0;
 23ea734:	ed1f 8a07 	vldr	s16, [pc, #-28]	; 23ea71c <_Z6OBS_Dov+0x1d4c>
  float sht1_humid = 0.0;
 23ea738:	eef0 9a48 	vmov.f32	s19, s16
 23ea73c:	f7fe be11 	b.w	23e9362 <_Z6OBS_Dov+0x992>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea740:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 23ea720 <_Z6OBS_Dov+0x1d50>
 23ea744:	f7fe be6c 	b.w	23e9420 <_Z6OBS_Dov+0xa50>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ea748:	ed1f 0a0b 	vldr	s0, [pc, #-44]	; 23ea720 <_Z6OBS_Dov+0x1d50>
 23ea74c:	f7fe be9f 	b.w	23e948e <_Z6OBS_Dov+0xabe>
      t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea750:	464e      	mov	r6, r9
 23ea752:	4657      	mov	r7, sl
 23ea754:	f7fe bee0 	b.w	23e9518 <_Z6OBS_Dov+0xb48>
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ea758:	a767      	add	r7, pc, #412	; (adr r7, 23ea8f8 <_Z6OBS_Dov+0x1f28>)
 23ea75a:	e9d7 6700 	ldrd	r6, r7, [r7]
 23ea75e:	f7fe befa 	b.w	23e9556 <_Z6OBS_Dov+0xb86>
      Output ("ERR:HDC1 Read");
 23ea762:	4867      	ldr	r0, [pc, #412]	; (23ea900 <_Z6OBS_Dov+0x1f30>)
 23ea764:	f7f9 ff10 	bl	23e4588 <_Z6OutputPKc>
      SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
 23ea768:	f8db 3000 	ldr.w	r3, [fp]
 23ea76c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23ea770:	f7fe bef7 	b.w	23e9562 <_Z6OBS_Dov+0xb92>
      t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea774:	464e      	mov	r6, r9
 23ea776:	4657      	mov	r7, sl
 23ea778:	f7fe bf60 	b.w	23e963c <_Z6OBS_Dov+0xc6c>
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ea77c:	a75e      	add	r7, pc, #376	; (adr r7, 23ea8f8 <_Z6OBS_Dov+0x1f28>)
 23ea77e:	e9d7 6700 	ldrd	r6, r7, [r7]
 23ea782:	f7fe bf7a 	b.w	23e967a <_Z6OBS_Dov+0xcaa>
      Output ("ERR:HDC1 Read");
 23ea786:	485e      	ldr	r0, [pc, #376]	; (23ea900 <_Z6OBS_Dov+0x1f30>)
 23ea788:	f7f9 fefe 	bl	23e4588 <_Z6OutputPKc>
      SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
 23ea78c:	f8db 3000 	ldr.w	r3, [fp]
 23ea790:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 23ea794:	f7fe bf77 	b.w	23e9686 <_Z6OBS_Dov+0xcb6>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea798:	ed9f aa5a 	vldr	s20, [pc, #360]	; 23ea904 <_Z6OBS_Dov+0x1f34>
 23ea79c:	f7fe bfd3 	b.w	23e9746 <_Z6OBS_Dov+0xd76>
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23ea7a0:	eddf 8a58 	vldr	s17, [pc, #352]	; 23ea904 <_Z6OBS_Dov+0x1f34>
 23ea7a4:	f7ff b818 	b.w	23e97d8 <_Z6OBS_Dov+0xe08>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea7a8:	ed9f aa56 	vldr	s20, [pc, #344]	; 23ea904 <_Z6OBS_Dov+0x1f34>
 23ea7ac:	f7ff b869 	b.w	23e9882 <_Z6OBS_Dov+0xeb2>
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23ea7b0:	eddf 8a54 	vldr	s17, [pc, #336]	; 23ea904 <_Z6OBS_Dov+0x1f34>
 23ea7b4:	f7ff b87d 	b.w	23e98b2 <_Z6OBS_Dov+0xee2>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea7b8:	ed9f aa52 	vldr	s20, [pc, #328]	; 23ea904 <_Z6OBS_Dov+0x1f34>
 23ea7bc:	f7ff b8d1 	b.w	23e9962 <_Z6OBS_Dov+0xf92>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ea7c0:	eddf 8a50 	vldr	s17, [pc, #320]	; 23ea904 <_Z6OBS_Dov+0x1f34>
 23ea7c4:	f7ff b8e5 	b.w	23e9992 <_Z6OBS_Dov+0xfc2>
        SI1145_exists = false;
 23ea7c8:	7030      	strb	r0, [r6, #0]
        Output ("SI OFFLINE");
 23ea7ca:	484f      	ldr	r0, [pc, #316]	; (23ea908 <_Z6OBS_Dov+0x1f38>)
 23ea7cc:	f7f9 fedc 	bl	23e4588 <_Z6OutputPKc>
        SystemStatusBits |= SSB_SI1145;  // Turn On Bit    
 23ea7d0:	f8db 3000 	ldr.w	r3, [fp]
 23ea7d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 23ea7d8:	f8cb 3000 	str.w	r3, [fp]
 23ea7dc:	f7ff b978 	b.w	23e9ad0 <_Z6OBS_Dov+0x1100>
    si_vis = (isnan(si_vis) || (si_vis < QC_MIN_VI)  || (si_vis > QC_MAX_VI)) ? QC_ERR_VI  : si_vis;
 23ea7e0:	eddf aa48 	vldr	s21, [pc, #288]	; 23ea904 <_Z6OBS_Dov+0x1f34>
 23ea7e4:	f7ff b98a 	b.w	23e9afc <_Z6OBS_Dov+0x112c>
    si_ir  = (isnan(si_ir)  || (si_ir  < QC_MIN_IR)  || (si_ir  > QC_MAX_IR)) ? QC_ERR_IR  : si_ir;
 23ea7e8:	ed9f aa46 	vldr	s20, [pc, #280]	; 23ea904 <_Z6OBS_Dov+0x1f34>
 23ea7ec:	f7ff b996 	b.w	23e9b1c <_Z6OBS_Dov+0x114c>
    si_uv  = (isnan(si_uv)  || (si_uv  < QC_MIN_UV)  || (si_uv  > QC_MAX_UV)) ? QC_ERR_UV  : si_uv;
 23ea7f0:	eddf 8a44 	vldr	s17, [pc, #272]	; 23ea904 <_Z6OBS_Dov+0x1f34>
 23ea7f4:	f7ff b9e0 	b.w	23e9bb8 <_Z6OBS_Dov+0x11e8>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea7f8:	ed9f 0a42 	vldr	s0, [pc, #264]	; 23ea904 <_Z6OBS_Dov+0x1f34>
 23ea7fc:	f7ff ba48 	b.w	23e9c90 <_Z6OBS_Dov+0x12c0>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea800:	ed9f 0a40 	vldr	s0, [pc, #256]	; 23ea904 <_Z6OBS_Dov+0x1f34>
 23ea804:	f7ff ba80 	b.w	23e9d08 <_Z6OBS_Dov+0x1338>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea808:	eddf 8a3e 	vldr	s17, [pc, #248]	; 23ea904 <_Z6OBS_Dov+0x1f34>
 23ea80c:	f7ff baba 	b.w	23e9d84 <_Z6OBS_Dov+0x13b4>
  float mcp3_temp = 0.0;  // globe temperature
 23ea810:	eddf 8a3e 	vldr	s17, [pc, #248]	; 23ea90c <_Z6OBS_Dov+0x1f3c>
 23ea814:	f7ff bac4 	b.w	23e9da0 <_Z6OBS_Dov+0x13d0>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea818:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 23ea904 <_Z6OBS_Dov+0x1f34>
 23ea81c:	f7ff baee 	b.w	23e9dfc <_Z6OBS_Dov+0x142c>
    lux = (isnan(lux) || (lux < QC_MIN_VLX)  || (lux > QC_MAX_VLX))  ? QC_ERR_VLX  : lux;
 23ea820:	ed9f aa3b 	vldr	s20, [pc, #236]	; 23ea910 <_Z6OBS_Dov+0x1f40>
 23ea824:	f7ff bb15 	b.w	23e9e52 <_Z6OBS_Dov+0x1482>
    lux = (isnan(lux) || (lux < QC_MIN_BLX)  || (lux > QC_MAX_BLX))  ? QC_ERR_BLX  : lux;
 23ea828:	ed9f aa36 	vldr	s20, [pc, #216]	; 23ea904 <_Z6OBS_Dov+0x1f34>
 23ea82c:	f7ff bb42 	b.w	23e9eb4 <_Z6OBS_Dov+0x14e4>
  else if (A4_State == A4_STATE_RAIN) {
 23ea830:	2b02      	cmp	r3, #2
 23ea832:	f47f abc9 	bne.w	23e9fc8 <_Z6OBS_Dov+0x15f8>
    strcpy (obs[oidx].sensor[sidx].id, "rg2");
 23ea836:	f04f 0b1c 	mov.w	fp, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea83a:	f640 2698 	movw	r6, #2712	; 0xa98
 23ea83e:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ea842:	f04f 0901 	mov.w	r9, #1
 23ea846:	fb0b f708 	mul.w	r7, fp, r8
    strcpy (obs[oidx].sensor[sidx].id, "rg2");
 23ea84a:	19e8      	adds	r0, r5, r7
 23ea84c:	4931      	ldr	r1, [pc, #196]	; (23ea914 <_Z6OBS_Dov+0x1f44>)
 23ea84e:	4420      	add	r0, r4
 23ea850:	f011 fe3e 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea854:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
 23ea856:	eb07 000b 	add.w	r0, r7, fp
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea85a:	435e      	muls	r6, r3
 23ea85c:	19ba      	adds	r2, r7, r6
 23ea85e:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
 23ea860:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23ea862:	f108 0301 	add.w	r3, r8, #1
    obs[oidx].sensor[sidx].f_obs = rain2;
 23ea866:	ed82 9a09 	vstr	s18, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
 23ea86a:	492b      	ldr	r1, [pc, #172]	; (23ea918 <_Z6OBS_Dov+0x1f48>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea86c:	f8c2 a020 	str.w	sl, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ea870:	f882 9030 	strb.w	r9, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
 23ea874:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ea876:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
 23ea878:	f011 fe2a 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea87c:	9b01      	ldr	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "rgp2");
 23ea87e:	f107 0038 	add.w	r0, r7, #56	; 0x38
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea882:	fb0b 6303 	mla	r3, fp, r3, r6
 23ea886:	18e1      	adds	r1, r4, r3
    obs[oidx].sensor[sidx].f_obs = eeprom.rgt2;
 23ea888:	4b24      	ldr	r3, [pc, #144]	; (23ea91c <_Z6OBS_Dov+0x1f4c>)
    strcpy (obs[oidx].sensor[sidx].id, "rgp2");
 23ea88a:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = eeprom.rgt2;
 23ea88c:	689a      	ldr	r2, [r3, #8]
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea88e:	f8c1 a020 	str.w	sl, [r1, #32]
    obs[oidx].sensor[sidx].f_obs = eeprom.rgt2;
 23ea892:	624a      	str	r2, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ea894:	f881 9030 	strb.w	r9, [r1, #48]	; 0x30
 23ea898:	f108 0202 	add.w	r2, r8, #2
    strcpy (obs[oidx].sensor[sidx].id, "rgp2");
 23ea89c:	4920      	ldr	r1, [pc, #128]	; (23ea920 <_Z6OBS_Dov+0x1f50>)
 23ea89e:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ea8a0:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "rgp2");
 23ea8a2:	f011 fe15 	bl	23fc4d0 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea8a6:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx].f_obs = eeprom.rgp2;
 23ea8a8:	4b1c      	ldr	r3, [pc, #112]	; (23ea91c <_Z6OBS_Dov+0x1f4c>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea8aa:	fb0b 6602 	mla	r6, fp, r2, r6
    obs[oidx].sensor[sidx].f_obs = eeprom.rgp2;
 23ea8ae:	68db      	ldr	r3, [r3, #12]
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea8b0:	4426      	add	r6, r4
 23ea8b2:	f8c6 a020 	str.w	sl, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = eeprom.rgp2;
 23ea8b6:	6273      	str	r3, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ea8b8:	f108 0803 	add.w	r8, r8, #3
 23ea8bc:	f886 9030 	strb.w	r9, [r6, #48]	; 0x30
 23ea8c0:	f7ff bb82 	b.w	23e9fc8 <_Z6OBS_Dov+0x15f8>
  float heat_index = 0.0;
 23ea8c4:	2700      	movs	r7, #0
 23ea8c6:	e44a      	b.n	23ea15e <_Z6OBS_Dov+0x178e>
  float wetbulb_temp = 0.0;
 23ea8c8:	f04f 0900 	mov.w	r9, #0
 23ea8cc:	e479      	b.n	23ea1c2 <_Z6OBS_Dov+0x17f2>
      wbgt = wbgt_using_hi(heat_index);
 23ea8ce:	4638      	mov	r0, r7
 23ea8d0:	f7f7 fe56 	bl	23e2580 <__aeabi_f2d>
 23ea8d4:	ec41 0b10 	vmov	d0, r0, r1
 23ea8d8:	f7fa ff4e 	bl	23e5778 <_Z13wbgt_using_hid>
 23ea8dc:	e496      	b.n	23ea20c <_Z6OBS_Dov+0x183c>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea8de:	ed9f 8a09 	vldr	s16, [pc, #36]	; 23ea904 <_Z6OBS_Dov+0x1f34>
 23ea8e2:	e4d8      	b.n	23ea296 <_Z6OBS_Dov+0x18c6>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea8e4:	ed9f 8a07 	vldr	s16, [pc, #28]	; 23ea904 <_Z6OBS_Dov+0x1f34>
 23ea8e8:	e56f      	b.n	23ea3ca <_Z6OBS_Dov+0x19fa>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea8ea:	ed9f 8a06 	vldr	s16, [pc, #24]	; 23ea904 <_Z6OBS_Dov+0x1f34>
 23ea8ee:	e63d      	b.n	23ea56c <_Z6OBS_Dov+0x1b9c>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea8f0:	ed9f 8a04 	vldr	s16, [pc, #16]	; 23ea904 <_Z6OBS_Dov+0x1f34>
 23ea8f4:	e66d      	b.n	23ea5d2 <_Z6OBS_Dov+0x1c02>
 23ea8f6:	bf00      	nop
 23ea8f8:	33333333 	.word	0x33333333
 23ea8fc:	c08f3f33 	.word	0xc08f3f33
 23ea900:	023fdc5e 	.word	0x023fdc5e
 23ea904:	c479f99a 	.word	0xc479f99a
 23ea908:	023fd14b 	.word	0x023fd14b
 23ea90c:	00000000 	.word	0x00000000
 23ea910:	c479c000 	.word	0xc479c000
 23ea914:	023fdcc0 	.word	0x023fdcc0
 23ea918:	023fdcc4 	.word	0x023fdcc4
 23ea91c:	1006ae4c 	.word	0x1006ae4c
 23ea920:	023fdcc9 	.word	0x023fdcc9

023ea924 <_Z22Output_CellBatteryInfov>:
void Output_CellBatteryInfo() {
 23ea924:	b530      	push	{r4, r5, lr}
 23ea926:	ed2d 8b02 	vpush	{d8}
 23ea92a:	b08d      	sub	sp, #52	; 0x34
  CellularSignal sig = Cellular.RSSI();
 23ea92c:	491f      	ldr	r1, [pc, #124]	; (23ea9ac <_Z22Output_CellBatteryInfov+0x88>)
 23ea92e:	a804      	add	r0, sp, #16
 23ea930:	f00c fd5a 	bl	23f73e8 <_ZN5spark13CellularClass4RSSIEv>
  float SignalStrength = sig.getStrength();
 23ea934:	a804      	add	r0, sp, #16
 23ea936:	f00c fdb5 	bl	23f74a4 <_ZNK14CellularSignal11getStrengthEv>
 23ea93a:	eeb0 8a40 	vmov.f32	s16, s0
  int BatteryState = System.batteryState();
 23ea93e:	f7fe f83b 	bl	23e89b8 <_ZNK11SystemClass12batteryStateEv.isra.0>
  if (BatteryState>0 && BatteryState<6) {
 23ea942:	1e43      	subs	r3, r0, #1
 23ea944:	2b04      	cmp	r3, #4
  int BatteryState = System.batteryState();
 23ea946:	4604      	mov	r4, r0
  if (BatteryState>0 && BatteryState<6) {
 23ea948:	d82d      	bhi.n	23ea9a6 <_Z22Output_CellBatteryInfov+0x82>
    BatteryPoC = System.batteryCharge();
 23ea94a:	f7fe f823 	bl	23e8994 <_ZNK11SystemClass13batteryChargeEv.isra.0>
    (int)SignalStrength, (int)(SignalStrength*100)%100,
 23ea94e:	eddf 7a18 	vldr	s15, [pc, #96]	; 23ea9b0 <_Z22Output_CellBatteryInfov+0x8c>
 23ea952:	ee28 7a27 	vmul.f32	s14, s16, s15
    BatteryState, (int)BatteryPoC, (int)(BatteryPoC*100)%100);
 23ea956:	ee60 7a27 	vmul.f32	s15, s0, s15
 23ea95a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    (int)SignalStrength, (int)(SignalStrength*100)%100,
 23ea95e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  sprintf (Buffer32Bytes, "CS:%d.%02d B:%d,%d.%02d", 
 23ea962:	2164      	movs	r1, #100	; 0x64
    BatteryState, (int)BatteryPoC, (int)(BatteryPoC*100)%100);
 23ea964:	ee17 2a90 	vmov	r2, s15
    (int)SignalStrength, (int)(SignalStrength*100)%100,
 23ea968:	ee17 3a10 	vmov	r3, s14
  sprintf (Buffer32Bytes, "CS:%d.%02d B:%d,%d.%02d", 
 23ea96c:	fb92 f5f1 	sdiv	r5, r2, r1
 23ea970:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 23ea974:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 23ea978:	fb93 f0f1 	sdiv	r0, r3, r1
 23ea97c:	fb01 2215 	mls	r2, r1, r5, r2
 23ea980:	fb01 3310 	mls	r3, r1, r0, r3
 23ea984:	ed8d 0a01 	vstr	s0, [sp, #4]
 23ea988:	490a      	ldr	r1, [pc, #40]	; (23ea9b4 <_Z22Output_CellBatteryInfov+0x90>)
 23ea98a:	9202      	str	r2, [sp, #8]
 23ea98c:	9400      	str	r4, [sp, #0]
 23ea98e:	ee17 2a90 	vmov	r2, s15
 23ea992:	4809      	ldr	r0, [pc, #36]	; (23ea9b8 <_Z22Output_CellBatteryInfov+0x94>)
 23ea994:	f00c fc00 	bl	23f7198 <sprintf>
  Output(Buffer32Bytes);
 23ea998:	4807      	ldr	r0, [pc, #28]	; (23ea9b8 <_Z22Output_CellBatteryInfov+0x94>)
 23ea99a:	f7f9 fdf5 	bl	23e4588 <_Z6OutputPKc>
}
 23ea99e:	b00d      	add	sp, #52	; 0x34
 23ea9a0:	ecbd 8b02 	vpop	{d8}
 23ea9a4:	bd30      	pop	{r4, r5, pc}
  float BatteryPoC = 0.0;                 // Battery Percent of Charge
 23ea9a6:	ed9f 0a05 	vldr	s0, [pc, #20]	; 23ea9bc <_Z22Output_CellBatteryInfov+0x98>
 23ea9aa:	e7d0      	b.n	23ea94e <_Z22Output_CellBatteryInfov+0x2a>
 23ea9ac:	1007aeb4 	.word	0x1007aeb4
 23ea9b0:	42c80000 	.word	0x42c80000
 23ea9b4:	023fdd5c 	.word	0x023fdd5c
 23ea9b8:	1006a277 	.word	0x1006a277
 23ea9bc:	00000000 	.word	0x00000000

023ea9c0 <_ZNK11SystemClass11powerSourceEv.isra.0>:
    int powerSource() const {
 23ea9c0:	b507      	push	{r0, r1, r2, lr}
 23ea9c2:	2018      	movs	r0, #24
 23ea9c4:	a901      	add	r1, sp, #4
 23ea9c6:	f7fd ffb7 	bl	23e8938 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
 23ea9ca:	2800      	cmp	r0, #0
        return val;
 23ea9cc:	bfa8      	it	ge
 23ea9ce:	9801      	ldrge	r0, [sp, #4]
    }
 23ea9d0:	b003      	add	sp, #12
 23ea9d2:	f85d fb04 	ldr.w	pc, [sp], #4

023ea9d6 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb>:
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
 23ea9d6:	b570      	push	{r4, r5, r6, lr}
 23ea9d8:	4604      	mov	r4, r0
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 23ea9da:	2000      	movs	r0, #0
    ResultT result(ResultT defaultValue = ResultT()) const {
 23ea9dc:	460d      	mov	r5, r1
        return (application_thread_current(nullptr) != 0);
 23ea9de:	f00c f9ab 	bl	23f6d38 <application_thread_current>
 23ea9e2:	1c66      	adds	r6, r4, #1
        if (ContextT::isApplicationThreadCurrent()) {
 23ea9e4:	b128      	cbz	r0, 23ea9f2 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x1c>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
 23ea9e6:	7833      	ldrb	r3, [r6, #0]
 23ea9e8:	b2db      	uxtb	r3, r3
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 23ea9ea:	b913      	cbnz	r3, 23ea9f2 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x1c>
        spark_process();
 23ea9ec:	f00c fa30 	bl	23f6e50 <spark_process>
    }
 23ea9f0:	e7f9      	b.n	23ea9e6 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x10>
 23ea9f2:	e8d6 3f8f 	ldab	r3, [r6]
 23ea9f6:	b2db      	uxtb	r3, r3
        if (this->acquireDone() && this->isSucceeded()) {
 23ea9f8:	b90b      	cbnz	r3, 23ea9fe <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x28>
        return std::move(defaultValue);
 23ea9fa:	4628      	mov	r0, r5
    }
 23ea9fc:	bd70      	pop	{r4, r5, r6, pc}
        return (application_thread_current(nullptr) != 0);
 23ea9fe:	2000      	movs	r0, #0
 23eaa00:	f00c f99a 	bl	23f6d38 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23eaa04:	b128      	cbz	r0, 23eaa12 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x3c>
 23eaa06:	7833      	ldrb	r3, [r6, #0]
 23eaa08:	b2db      	uxtb	r3, r3
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 23eaa0a:	b913      	cbnz	r3, 23eaa12 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x3c>
        spark_process();
 23eaa0c:	f00c fa20 	bl	23f6e50 <spark_process>
    }
 23eaa10:	e7f9      	b.n	23eaa06 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x30>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 23eaa12:	7823      	ldrb	r3, [r4, #0]
 23eaa14:	b2db      	uxtb	r3, r3
        if (this->acquireDone() && this->isSucceeded()) {
 23eaa16:	2b01      	cmp	r3, #1
 23eaa18:	d1ef      	bne.n	23ea9fa <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x24>
            return result_;
 23eaa1a:	7b20      	ldrb	r0, [r4, #12]
 23eaa1c:	e7ee      	b.n	23ea9fc <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x26>
	...

023eaa20 <_GLOBAL__sub_I___appProductVersion>:
      // We need to reinitialize our wind readings before we can move on.
      Wind_Distance_Air_Initialize();
    }
#endif
  }
}
 23eaa20:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23eaa24:	2208      	movs	r2, #8
 23eaa26:	4b62      	ldr	r3, [pc, #392]	; (23eabb0 <_GLOBAL__sub_I___appProductVersion+0x190>)
  FsVolume() = default;  // cppcheck-suppress uninitMemberVar
 23eaa28:	2400      	movs	r4, #0
 23eaa2a:	701a      	strb	r2, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
 23eaa2c:	f00e fe0e 	bl	23f964c <spark_protocol_instance>
 23eaa30:	2300      	movs	r3, #0
 23eaa32:	2101      	movs	r1, #1
 23eaa34:	461a      	mov	r2, r3
 23eaa36:	f00e fe25 	bl	23f9684 <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
 23eaa3a:	f00e fe07 	bl	23f964c <spark_protocol_instance>
 23eaa3e:	2300      	movs	r3, #0
 23eaa40:	2123      	movs	r1, #35	; 0x23
 23eaa42:	461a      	mov	r2, r3
 23eaa44:	f00e fe10 	bl	23f9668 <spark_protocol_set_product_id>
 23eaa48:	4b5a      	ldr	r3, [pc, #360]	; (23eabb4 <_GLOBAL__sub_I___appProductVersion+0x194>)
  {
 23eaa4a:	4a5b      	ldr	r2, [pc, #364]	; (23eabb8 <_GLOBAL__sub_I___appProductVersion+0x198>)
 23eaa4c:	2501      	movs	r5, #1
 23eaa4e:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() { initSharedSpiCard(); }
 23eaa52:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 23eaa56:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
    Stream() {_timeout=1000;}
 23eaa5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23eaa5e:	f8c3 4480 	str.w	r4, [r3, #1152]	; 0x480
 23eaa62:	f8c3 4484 	str.w	r4, [r3, #1156]	; 0x484
class SdBase : public Vol {
 23eaa66:	f8c3 4488 	str.w	r4, [r3, #1160]	; 0x488
 * \brief Optimized SPI class for access to SD and SDHC flash memory cards.
 */
class SdSpiArduinoDriver {
 public:
  /** Constructor. */
  SdSpiArduinoDriver() = default;
 23eaa6a:	f8c3 448c 	str.w	r4, [r3, #1164]	; 0x48c
 23eaa6e:	f883 5494 	strb.w	r5, [r3, #1172]	; 0x494
 23eaa72:	f8c3 4498 	str.w	r4, [r3, #1176]	; 0x498
 23eaa76:	f8a3 449c 	strh.w	r4, [r3, #1180]	; 0x49c
 23eaa7a:	f8c3 44a0 	str.w	r4, [r3, #1184]	; 0x4a0
#endif  // SPI_DRIVER_SELECT < 2
  void initSharedSpiCard() {
    m_beginCalled = false;
    m_csPin = 0;
    m_errorCode = SD_CARD_ERROR_INIT_NOT_CALLED;
    m_spiActive = false;
 23eaa7e:	f8c3 44a8 	str.w	r4, [r3, #1192]	; 0x4a8
    Print() : write_error(0) {}
 23eaa82:	4b4e      	ldr	r3, [pc, #312]	; (23eabbc <_GLOBAL__sub_I___appProductVersion+0x19c>)
PMIC pmic;
 23eaa84:	4621      	mov	r1, r4
 23eaa86:	609a      	str	r2, [r3, #8]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23eaa88:	4a4d      	ldr	r2, [pc, #308]	; (23eabc0 <_GLOBAL__sub_I___appProductVersion+0x1a0>)
  FsBaseFile() = default;  // cppcheck-suppress uninitMemberVar
 23eaa8a:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
 23eaa8e:	605c      	str	r4, [r3, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23eaa90:	601a      	str	r2, [r3, #0]
 23eaa92:	484c      	ldr	r0, [pc, #304]	; (23eabc4 <_GLOBAL__sub_I___appProductVersion+0x1a4>)
 23eaa94:	f00d fd75 	bl	23f8582 <_ZN4PMICC1Eb>
Adafruit_SSD1306 display32(SCREEN_WIDTH, 32, &Wire, OLED_RESET);
 23eaa98:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 23eaa9c:	f00e fec2 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23eaaa0:	4f49      	ldr	r7, [pc, #292]	; (23eabc8 <_GLOBAL__sub_I___appProductVersion+0x1a8>)
 23eaaa2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 23eac48 <_GLOBAL__sub_I___appProductVersion+0x228>
 23eaaa6:	4603      	mov	r3, r0
 23eaaa8:	2220      	movs	r2, #32
 23eaaaa:	2180      	movs	r1, #128	; 0x80
 23eaaac:	e9cd 7801 	strd	r7, r8, [sp, #4]
 23eaab0:	9600      	str	r6, [sp, #0]
 23eaab2:	4846      	ldr	r0, [pc, #280]	; (23eabcc <_GLOBAL__sub_I___appProductVersion+0x1ac>)
 23eaab4:	f005 fab4 	bl	23f0020 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
Adafruit_SSD1306 display64(SCREEN_WIDTH, 64, &Wire, OLED_RESET);
 23eaab8:	f00e feb4 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23eaabc:	2240      	movs	r2, #64	; 0x40
 23eaabe:	4603      	mov	r3, r0
 23eaac0:	2180      	movs	r1, #128	; 0x80
 23eaac2:	e9cd 7801 	strd	r7, r8, [sp, #4]
 23eaac6:	9600      	str	r6, [sp, #0]
 23eaac8:	4841      	ldr	r0, [pc, #260]	; (23eabd0 <_GLOBAL__sub_I___appProductVersion+0x1b0>)
 23eaaca:	f005 faa9 	bl	23f0020 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
AB1805 ab1805(Wire);
 23eaace:	f00e fea9 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23eaad2:	2269      	movs	r2, #105	; 0x69
 23eaad4:	4601      	mov	r1, r0
 23eaad6:	483f      	ldr	r0, [pc, #252]	; (23eabd4 <_GLOBAL__sub_I___appProductVersion+0x1b4>)
 23eaad8:	f00a f904 	bl	23f4ce4 <_ZN6AB1805C1ER7TwoWireh>
RH_RF95 rf95(LORA_SS, LORA_IRQ_PIN, hardware_spi); // SPI1
 23eaadc:	2214      	movs	r2, #20
 23eaade:	4b3e      	ldr	r3, [pc, #248]	; (23eabd8 <_GLOBAL__sub_I___appProductVersion+0x1b8>)
 23eaae0:	2103      	movs	r1, #3
 23eaae2:	483e      	ldr	r0, [pc, #248]	; (23eabdc <_GLOBAL__sub_I___appProductVersion+0x1bc>)
 23eaae4:	f006 fcbe 	bl	23f1464 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
AES aes;
 23eaae8:	483d      	ldr	r0, [pc, #244]	; (23eabe0 <_GLOBAL__sub_I___appProductVersion+0x1c0>)
 23eaaea:	f002 f8c1 	bl	23ecc70 <_ZN3AESC1Ev>
Adafruit_BMP280 bmp1;
 23eaaee:	f00e fe99 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23eaaf2:	4601      	mov	r1, r0
 23eaaf4:	483b      	ldr	r0, [pc, #236]	; (23eabe4 <_GLOBAL__sub_I___appProductVersion+0x1c4>)
 23eaaf6:	f003 f82f 	bl	23edb58 <_ZN15Adafruit_BMP280C1EP7TwoWire>
Adafruit_BMP280 bmp2;
 23eaafa:	f00e fe93 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23eaafe:	4601      	mov	r1, r0
 23eab00:	4839      	ldr	r0, [pc, #228]	; (23eabe8 <_GLOBAL__sub_I___appProductVersion+0x1c8>)
 23eab02:	f003 f829 	bl	23edb58 <_ZN15Adafruit_BMP280C1EP7TwoWire>
Adafruit_BME280 bme1;
 23eab06:	4839      	ldr	r0, [pc, #228]	; (23eabec <_GLOBAL__sub_I___appProductVersion+0x1cc>)
 23eab08:	f002 fb9c 	bl	23ed244 <_ZN15Adafruit_BME280C1Ev>
Adafruit_BME280 bme2;
 23eab0c:	4838      	ldr	r0, [pc, #224]	; (23eabf0 <_GLOBAL__sub_I___appProductVersion+0x1d0>)
 23eab0e:	f002 fb99 	bl	23ed244 <_ZN15Adafruit_BME280C1Ev>
Adafruit_BMP3XX bm31;
 23eab12:	4838      	ldr	r0, [pc, #224]	; (23eabf4 <_GLOBAL__sub_I___appProductVersion+0x1d4>)
 23eab14:	f003 fc08 	bl	23ee328 <_ZN15Adafruit_BMP3XXC1Ev>
Adafruit_BMP3XX bm32;
 23eab18:	4837      	ldr	r0, [pc, #220]	; (23eabf8 <_GLOBAL__sub_I___appProductVersion+0x1d8>)
 23eab1a:	f003 fc05 	bl	23ee328 <_ZN15Adafruit_BMP3XXC1Ev>
Adafruit_HTU21DF htu = Adafruit_HTU21DF();
 23eab1e:	4837      	ldr	r0, [pc, #220]	; (23eabfc <_GLOBAL__sub_I___appProductVersion+0x1dc>)
 23eab20:	f004 fcbe 	bl	23ef4a0 <_ZN16Adafruit_HTU21DFC1Ev>
Adafruit_MCP9808 mcp1;
 23eab24:	4836      	ldr	r0, [pc, #216]	; (23eac00 <_GLOBAL__sub_I___appProductVersion+0x1e0>)
 23eab26:	f004 feb3 	bl	23ef890 <_ZN16Adafruit_MCP9808C1Ev>
Adafruit_MCP9808 mcp2;
 23eab2a:	4836      	ldr	r0, [pc, #216]	; (23eac04 <_GLOBAL__sub_I___appProductVersion+0x1e4>)
 23eab2c:	f004 feb0 	bl	23ef890 <_ZN16Adafruit_MCP9808C1Ev>
Adafruit_MCP9808 mcp3;
 23eab30:	4835      	ldr	r0, [pc, #212]	; (23eac08 <_GLOBAL__sub_I___appProductVersion+0x1e8>)
 23eab32:	f004 fead 	bl	23ef890 <_ZN16Adafruit_MCP9808C1Ev>
Adafruit_MCP9808 mcp4;
 23eab36:	4835      	ldr	r0, [pc, #212]	; (23eac0c <_GLOBAL__sub_I___appProductVersion+0x1ec>)
 23eab38:	f004 feaa 	bl	23ef890 <_ZN16Adafruit_MCP9808C1Ev>
Adafruit_SHT31 sht1;
 23eab3c:	f00e fe72 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23eab40:	4601      	mov	r1, r0
 23eab42:	4833      	ldr	r0, [pc, #204]	; (23eac10 <_GLOBAL__sub_I___appProductVersion+0x1f0>)
 23eab44:	f004 fff8 	bl	23efb38 <_ZN14Adafruit_SHT31C1EP7TwoWire>
Adafruit_SHT31 sht2;
 23eab48:	f00e fe6c 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23eab4c:	4601      	mov	r1, r0
 23eab4e:	4831      	ldr	r0, [pc, #196]	; (23eac14 <_GLOBAL__sub_I___appProductVersion+0x1f4>)
 23eab50:	f004 fff2 	bl	23efb38 <_ZN14Adafruit_SHT31C1EP7TwoWire>
Adafruit_SI1145 uv = Adafruit_SI1145();
 23eab54:	4830      	ldr	r0, [pc, #192]	; (23eac18 <_GLOBAL__sub_I___appProductVersion+0x1f8>)
 23eab56:	f005 f8b9 	bl	23efccc <_ZN15Adafruit_SI1145C1Ev>
Adafruit_VEML7700 veml = Adafruit_VEML7700();
 23eab5a:	4830      	ldr	r0, [pc, #192]	; (23eac1c <_GLOBAL__sub_I___appProductVersion+0x1fc>)
 23eab5c:	f005 feee 	bl	23f093c <_ZN17Adafruit_VEML7700C1Ev>
Adafruit_PM25AQI pmaq = Adafruit_PM25AQI();
 23eab60:	482f      	ldr	r0, [pc, #188]	; (23eac20 <_GLOBAL__sub_I___appProductVersion+0x200>)
 23eab62:	f004 ff3c 	bl	23ef9de <_ZN16Adafruit_PM25AQIC1Ev>
Adafruit_HDC302x hdc1;
 23eab66:	482f      	ldr	r0, [pc, #188]	; (23eac24 <_GLOBAL__sub_I___appProductVersion+0x204>)
 23eab68:	f004 fb8d 	bl	23ef286 <_ZN16Adafruit_HDC302xC1Ev>
Adafruit_HDC302x hdc2;
 23eab6c:	482e      	ldr	r0, [pc, #184]	; (23eac28 <_GLOBAL__sub_I___appProductVersion+0x208>)
 23eab6e:	f004 fb8a 	bl	23ef286 <_ZN16Adafruit_HDC302xC1Ev>
Adafruit_LPS35HW lps1;
 23eab72:	482e      	ldr	r0, [pc, #184]	; (23eac2c <_GLOBAL__sub_I___appProductVersion+0x20c>)
 23eab74:	f004 fd58 	bl	23ef628 <_ZN16Adafruit_LPS35HWC1Ev>
Adafruit_LPS35HW lps2;
 23eab78:	482d      	ldr	r0, [pc, #180]	; (23eac30 <_GLOBAL__sub_I___appProductVersion+0x210>)
 23eab7a:	f004 fd55 	bl	23ef628 <_ZN16Adafruit_LPS35HWC1Ev>
LeafSens tlw;
 23eab7e:	482d      	ldr	r0, [pc, #180]	; (23eac34 <_GLOBAL__sub_I___appProductVersion+0x214>)
 23eab80:	f006 f95f 	bl	23f0e42 <_ZN8LeafSensC1Ev>
SVCS3 tsm;
 23eab84:	482c      	ldr	r0, [pc, #176]	; (23eac38 <_GLOBAL__sub_I___appProductVersion+0x218>)
 23eab86:	f008 f9f7 	bl	23f2f78 <_ZN5SVCS3C1Ev>
SVMULTI tmsm;
 23eab8a:	482c      	ldr	r0, [pc, #176]	; (23eac3c <_GLOBAL__sub_I___appProductVersion+0x21c>)
 23eab8c:	f008 faba 	bl	23f3104 <_ZN7SVMULTIC1Ev>
              error_(SYSTEM_ERROR_NONE) {
 23eab90:	4b2b      	ldr	r3, [pc, #172]	; (23eac40 <_GLOBAL__sub_I___appProductVersion+0x220>)
    SleepResult() {}
 23eab92:	4a2c      	ldr	r2, [pc, #176]	; (23eac44 <_GLOBAL__sub_I___appProductVersion+0x224>)
        set_system_mode(mode);
 23eab94:	2002      	movs	r0, #2
              error_(SYSTEM_ERROR_NONE) {
 23eab96:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
 23eab9a:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 23eab9c:	f00c f886 	bl	23f6cac <set_system_mode>
SYSTEM_THREAD(ENABLED);
 23eaba0:	4621      	mov	r1, r4
 23eaba2:	4628      	mov	r0, r5
}
 23eaba4:	b004      	add	sp, #16
 23eaba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
SYSTEM_THREAD(ENABLED);
 23eabaa:	f00c b8a9 	b.w	23f6d00 <system_thread_set_state>
 23eabae:	bf00      	nop
 23eabb0:	1006a7db 	.word	0x1006a7db
 23eabb4:	1006a2c4 	.word	0x1006a2c4
 23eabb8:	023fe4ac 	.word	0x023fe4ac
 23eabbc:	1006a774 	.word	0x1006a774
 23eabc0:	023fe4c0 	.word	0x023fe4c0
 23eabc4:	1007aa48 	.word	0x1007aa48
 23eabc8:	00061a80 	.word	0x00061a80
 23eabcc:	1006ad64 	.word	0x1006ad64
 23eabd0:	1006add8 	.word	0x1006add8
 23eabd4:	1006a7e0 	.word	0x1006a7e0
 23eabd8:	1007ae60 	.word	0x1007ae60
 23eabdc:	1007aa78 	.word	0x1007aa78
 23eabe0:	1006a800 	.word	0x1006a800
 23eabe4:	1006abe8 	.word	0x1006abe8
 23eabe8:	1006ac28 	.word	0x1006ac28
 23eabec:	1006ab38 	.word	0x1006ab38
 23eabf0:	1006ab90 	.word	0x1006ab90
 23eabf4:	1006a938 	.word	0x1006a938
 23eabf8:	1006aa38 	.word	0x1006aa38
 23eabfc:	1006ae80 	.word	0x1006ae80
 23eac00:	1006f0e8 	.word	0x1006f0e8
 23eac04:	1006f0f4 	.word	0x1006f0f4
 23eac08:	1006f100 	.word	0x1006f100
 23eac0c:	1006f10c 	.word	0x1006f10c
 23eac10:	1007aba4 	.word	0x1007aba4
 23eac14:	1007abb4 	.word	0x1007abb4
 23eac18:	1007ac08 	.word	0x1007ac08
 23eac1c:	1007ac10 	.word	0x1007ac10
 23eac20:	1007aa20 	.word	0x1007aa20
 23eac24:	1006ae70 	.word	0x1006ae70
 23eac28:	1006ae78 	.word	0x1006ae78
 23eac2c:	1006f0b0 	.word	0x1006f0b0
 23eac30:	1006f0cc 	.word	0x1006f0cc
 23eac34:	1007abf0 	.word	0x1007abf0
 23eac38:	1007ac00 	.word	0x1007ac00
 23eac3c:	1007abf8 	.word	0x1007abf8
 23eac40:	1006a7c8 	.word	0x1006a7c8
 23eac44:	ffff0000 	.word	0xffff0000
 23eac48:	000186a0 	.word	0x000186a0

023eac4c <_Z15lora_initializev>:
void lora_initialize() {
 23eac4c:	b510      	push	{r4, lr}
  if (lora_cf_validate()) {
 23eac4e:	f7f9 fe6f 	bl	23e4930 <_Z16lora_cf_validatev>
 23eac52:	2800      	cmp	r0, #0
 23eac54:	d04b      	beq.n	23eacee <_Z15lora_initializev+0xa2>
    pinMode(LORA_RESET, OUTPUT);
 23eac56:	2101      	movs	r1, #1
 23eac58:	2015      	movs	r0, #21
 23eac5a:	f00e fd5f 	bl	23f971c <pinMode>
    digitalWrite(LORA_RESET, LOW);
 23eac5e:	2100      	movs	r1, #0
 23eac60:	2015      	movs	r0, #21
 23eac62:	f00e fd6c 	bl	23f973e <digitalWrite>
    delay(100);
 23eac66:	2064      	movs	r0, #100	; 0x64
 23eac68:	f00c fb76 	bl	23f7358 <delay>
    digitalWrite(LORA_RESET, HIGH);
 23eac6c:	2101      	movs	r1, #1
 23eac6e:	2015      	movs	r0, #21
 23eac70:	f00e fd65 	bl	23f973e <digitalWrite>
    delay(100);
 23eac74:	2064      	movs	r0, #100	; 0x64
 23eac76:	f00c fb6f 	bl	23f7358 <delay>
    if (rf95.init()) {
 23eac7a:	481e      	ldr	r0, [pc, #120]	; (23eacf4 <_Z15lora_initializev+0xa8>)
 23eac7c:	f006 fdd4 	bl	23f1828 <_ZN7RH_RF954initEv>
 23eac80:	b370      	cbz	r0, 23eace0 <_Z15lora_initializev+0x94>
      rf95.setTxPower(cf_lora_txpower, false);
 23eac82:	4b1d      	ldr	r3, [pc, #116]	; (23eacf8 <_Z15lora_initializev+0xac>)
 23eac84:	2200      	movs	r2, #0
 23eac86:	f993 1000 	ldrsb.w	r1, [r3]
 23eac8a:	481a      	ldr	r0, [pc, #104]	; (23eacf4 <_Z15lora_initializev+0xa8>)
 23eac8c:	f006 fd84 	bl	23f1798 <_ZN7RH_RF9510setTxPowerEab>
      rf95.setFrequency(cf_lora_freq);
 23eac90:	4b1a      	ldr	r3, [pc, #104]	; (23eacfc <_Z15lora_initializev+0xb0>)
      rf95.setThisAddress(cf_lora_unitid);
 23eac92:	4c1b      	ldr	r4, [pc, #108]	; (23ead00 <_Z15lora_initializev+0xb4>)
      rf95.setFrequency(cf_lora_freq);
 23eac94:	ed93 0a00 	vldr	s0, [r3]
 23eac98:	4816      	ldr	r0, [pc, #88]	; (23eacf4 <_Z15lora_initializev+0xa8>)
 23eac9a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 23eac9e:	f006 fc17 	bl	23f14d0 <_ZN7RH_RF9512setFrequencyEf>
      rf95.setThisAddress(cf_lora_unitid);
 23eaca2:	7821      	ldrb	r1, [r4, #0]
 23eaca4:	4813      	ldr	r0, [pc, #76]	; (23eacf4 <_Z15lora_initializev+0xa8>)
 23eaca6:	f006 f987 	bl	23f0fb8 <_ZN15RHGenericDriver14setThisAddressEh>
      rf95.setHeaderFrom(cf_lora_unitid);
 23eacaa:	7821      	ldrb	r1, [r4, #0]
 23eacac:	4811      	ldr	r0, [pc, #68]	; (23eacf4 <_Z15lora_initializev+0xa8>)
 23eacae:	f006 f987 	bl	23f0fc0 <_ZN15RHGenericDriver13setHeaderFromEh>
      rf95.setPromiscuous(true);
 23eacb2:	2101      	movs	r1, #1
 23eacb4:	480f      	ldr	r0, [pc, #60]	; (23eacf4 <_Z15lora_initializev+0xa8>)
 23eacb6:	f006 f97d 	bl	23f0fb4 <_ZN15RHGenericDriver14setPromiscuousEb>
      rf95.setModeRx();
 23eacba:	480e      	ldr	r0, [pc, #56]	; (23eacf4 <_Z15lora_initializev+0xa8>)
 23eacbc:	f006 fcfe 	bl	23f16bc <_ZN7RH_RF959setModeRxEv>
      LORA_exists=true;
 23eacc0:	2201      	movs	r2, #1
 23eacc2:	4b10      	ldr	r3, [pc, #64]	; (23ead04 <_Z15lora_initializev+0xb8>)
      Output ("LORA OK");
 23eacc4:	4810      	ldr	r0, [pc, #64]	; (23ead08 <_Z15lora_initializev+0xbc>)
      LORA_exists=true;
 23eacc6:	701a      	strb	r2, [r3, #0]
    Output ("LORA INIT ERR");
 23eacc8:	f7f9 fc5e 	bl	23e4588 <_Z6OutputPKc>
  lora_alarm_timer = System.millis() + (LORA_RESET_NOACTIVITY * 60000);  // Minutes * 60 seconds
 23eaccc:	f7f9 f907 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23eacd0:	4a0e      	ldr	r2, [pc, #56]	; (23ead0c <_Z15lora_initializev+0xc0>)
 23eacd2:	4b0f      	ldr	r3, [pc, #60]	; (23ead10 <_Z15lora_initializev+0xc4>)
 23eacd4:	1880      	adds	r0, r0, r2
 23eacd6:	f141 0100 	adc.w	r1, r1, #0
 23eacda:	e9c3 0100 	strd	r0, r1, [r3]
}
 23eacde:	bd10      	pop	{r4, pc}
      SystemStatusBits |= SSB_LORA;  // Turn On Bit
 23eace0:	4a0c      	ldr	r2, [pc, #48]	; (23ead14 <_Z15lora_initializev+0xc8>)
      Output ("LORA NF");
 23eace2:	480d      	ldr	r0, [pc, #52]	; (23ead18 <_Z15lora_initializev+0xcc>)
      SystemStatusBits |= SSB_LORA;  // Turn On Bit
 23eace4:	6813      	ldr	r3, [r2, #0]
 23eace6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 23eacea:	6013      	str	r3, [r2, #0]
      Output ("LORA NF");
 23eacec:	e7ec      	b.n	23eacc8 <_Z15lora_initializev+0x7c>
    Output ("LORA INIT ERR");
 23eacee:	480b      	ldr	r0, [pc, #44]	; (23ead1c <_Z15lora_initializev+0xd0>)
 23eacf0:	e7ea      	b.n	23eacc8 <_Z15lora_initializev+0x7c>
 23eacf2:	bf00      	nop
 23eacf4:	1007aa78 	.word	0x1007aa78
 23eacf8:	1006a184 	.word	0x1006a184
 23eacfc:	1006a180 	.word	0x1006a180
 23ead00:	1006a188 	.word	0x1006a188
 23ead04:	1006a2a1 	.word	0x1006a2a1
 23ead08:	023fdd74 	.word	0x023fdd74
 23ead0c:	001b7740 	.word	0x001b7740
 23ead10:	1006aea8 	.word	0x1006aea8
 23ead14:	1006a168 	.word	0x1006a168
 23ead18:	023fdd7c 	.word	0x023fdd7c
 23ead1c:	023fdd84 	.word	0x023fdd84

023ead20 <_Z14lora_msg_checkv.part.0>:
/* 
 *=======================================================================================================================
 * lora_msg_check()
 *=======================================================================================================================
 */
void lora_msg_check() {
 23ead20:	b570      	push	{r4, r5, r6, lr}
    if (rf95.available()) {
      byte iv [N_BLOCK];
    
      // Should be a message for us now
      uint8_t buf[RH_RF95_MAX_MESSAGE_LEN]; // 251 Bytes
      uint8_t len  = sizeof(buf);
 23ead22:	24fb      	movs	r4, #251	; 0xfb
void lora_msg_check() {
 23ead24:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
      uint8_t from = rf95.headerFrom();
 23ead28:	483b      	ldr	r0, [pc, #236]	; (23eae18 <_Z14lora_msg_checkv.part.0+0xf8>)
      uint8_t len  = sizeof(buf);
 23ead2a:	f88d 4013 	strb.w	r4, [sp, #19]
      uint8_t from = rf95.headerFrom();
 23ead2e:	f006 f953 	bl	23f0fd8 <_ZN15RHGenericDriver10headerFromEv>
      uint8_t to   = rf95.headerTo();
 23ead32:	4839      	ldr	r0, [pc, #228]	; (23eae18 <_Z14lora_msg_checkv.part.0+0xf8>)
 23ead34:	f006 f94e 	bl	23f0fd4 <_ZN15RHGenericDriver8headerToEv>
      uint8_t id   = rf95.headerId();
 23ead38:	4837      	ldr	r0, [pc, #220]	; (23eae18 <_Z14lora_msg_checkv.part.0+0xf8>)
 23ead3a:	f006 f94f 	bl	23f0fdc <_ZN15RHGenericDriver8headerIdEv>
      uint8_t flags= rf95.headerFlags();
 23ead3e:	4836      	ldr	r0, [pc, #216]	; (23eae18 <_Z14lora_msg_checkv.part.0+0xf8>)
 23ead40:	f006 f94e 	bl	23f0fe0 <_ZN15RHGenericDriver11headerFlagsEv>
      int8_t  rssi = rf95.lastRssi(); 
 23ead44:	4834      	ldr	r0, [pc, #208]	; (23eae18 <_Z14lora_msg_checkv.part.0+0xf8>)
 23ead46:	f006 f94d 	bl	23f0fe4 <_ZN15RHGenericDriver8lastRssiEv>
      uint8_t byte2;
      uint8_t i;
      uint8_t msglen = 0;
      char msg[256];             // Used to hold decrypted lora messages

      memset(buf, 0, RH_RF95_MAX_MESSAGE_LEN);
 23ead4a:	4622      	mov	r2, r4
 23ead4c:	2100      	movs	r1, #0
 23ead4e:	a809      	add	r0, sp, #36	; 0x24
      memset(msg, 0, RH_RF95_MAX_MESSAGE_LEN+1);
 23ead50:	ac48      	add	r4, sp, #288	; 0x120
      memset(buf, 0, RH_RF95_MAX_MESSAGE_LEN);
 23ead52:	f011 fb48 	bl	23fc3e6 <memset>
      memset(msg, 0, RH_RF95_MAX_MESSAGE_LEN+1);
 23ead56:	22fc      	movs	r2, #252	; 0xfc
 23ead58:	2100      	movs	r1, #0
 23ead5a:	4620      	mov	r0, r4
 23ead5c:	f011 fb43 	bl	23fc3e6 <memset>
    
      if (rf95.recv(buf, &len)) {
 23ead60:	482d      	ldr	r0, [pc, #180]	; (23eae18 <_Z14lora_msg_checkv.part.0+0xf8>)
 23ead62:	f10d 0213 	add.w	r2, sp, #19
 23ead66:	a909      	add	r1, sp, #36	; 0x24
 23ead68:	f006 fb36 	bl	23f13d8 <_ZN7RH_RF954recvEPhS0_>
 23ead6c:	2800      	cmp	r0, #0
 23ead6e:	d043      	beq.n	23eadf8 <_Z14lora_msg_checkv.part.0+0xd8>
        // memcpy (msg, &buf[3], buf[0]);
        // Output (msg);
        // Serial_write ("LoRa Msg");
     
        aes.iv_inc();
 23ead70:	482a      	ldr	r0, [pc, #168]	; (23eae1c <_Z14lora_msg_checkv.part.0+0xfc>)
 23ead72:	f002 fa26 	bl	23ed1c2 <_ZN3AES6iv_incEv>
        aes.set_IV(AES_MYIV);
 23ead76:	4b2a      	ldr	r3, [pc, #168]	; (23eae20 <_Z14lora_msg_checkv.part.0+0x100>)
 23ead78:	4828      	ldr	r0, [pc, #160]	; (23eae1c <_Z14lora_msg_checkv.part.0+0xfc>)
 23ead7a:	e9d3 2300 	ldrd	r2, r3, [r3]
        aes.get_IV(iv);
 23ead7e:	ad05      	add	r5, sp, #20
        aes.set_IV(AES_MYIV);
 23ead80:	f002 fa0b 	bl	23ed19a <_ZN3AES6set_IVEy>
        aes.get_IV(iv);
 23ead84:	4629      	mov	r1, r5
 23ead86:	4825      	ldr	r0, [pc, #148]	; (23eae1c <_Z14lora_msg_checkv.part.0+0xfc>)
 23ead88:	f002 fa33 	bl	23ed1f2 <_ZN3AES6get_IVEPh>
        aes.do_aes_decrypt(buf, len, (byte *) msg, AES_KEY, 128, iv);
 23ead8c:	2380      	movs	r3, #128	; 0x80
 23ead8e:	9301      	str	r3, [sp, #4]
 23ead90:	4b24      	ldr	r3, [pc, #144]	; (23eae24 <_Z14lora_msg_checkv.part.0+0x104>)
 23ead92:	f89d 2013 	ldrb.w	r2, [sp, #19]
 23ead96:	9300      	str	r3, [sp, #0]
 23ead98:	4820      	ldr	r0, [pc, #128]	; (23eae1c <_Z14lora_msg_checkv.part.0+0xfc>)
 23ead9a:	4623      	mov	r3, r4
 23ead9c:	9502      	str	r5, [sp, #8]
 23ead9e:	a909      	add	r1, sp, #36	; 0x24
 23eada0:	f002 fa34 	bl	23ed20c <_ZN3AES14do_aes_decryptEPhiS0_S0_iS0_>
      
        if ( ( msg[3] == 'I' && msg[4] == 'F') ||
 23eada4:	78e3      	ldrb	r3, [r4, #3]
 23eada6:	2b49      	cmp	r3, #73	; 0x49
 23eada8:	d111      	bne.n	23eadce <_Z14lora_msg_checkv.part.0+0xae>
 23eadaa:	7923      	ldrb	r3, [r4, #4]
 23eadac:	2b46      	cmp	r3, #70	; 0x46
             ( msg[3] == 'L' && msg[4] == 'R')) {
 23eadae:	d123      	bne.n	23eadf8 <_Z14lora_msg_checkv.part.0+0xd8>

          // Get length of what follows
          msglen = msg[0];
 23eadb0:	f20d 1123 	addw	r1, sp, #291	; 0x123

          // Compute Checksum
          checksum=0;
          for (i=3; i<msglen; i++) {
 23eadb4:	2203      	movs	r2, #3
          checksum=0;
 23eadb6:	2300      	movs	r3, #0
 23eadb8:	4608      	mov	r0, r1
          msglen = msg[0];
 23eadba:	7825      	ldrb	r5, [r4, #0]
          for (i=3; i<msglen; i++) {
 23eadbc:	4295      	cmp	r5, r2
 23eadbe:	d90b      	bls.n	23eadd8 <_Z14lora_msg_checkv.part.0+0xb8>
            checksum += msg[i];
 23eadc0:	f811 6b01 	ldrb.w	r6, [r1], #1
          for (i=3; i<msglen; i++) {
 23eadc4:	3201      	adds	r2, #1
            checksum += msg[i];
 23eadc6:	4433      	add	r3, r6
 23eadc8:	b29b      	uxth	r3, r3
          for (i=3; i<msglen; i++) {
 23eadca:	b2d2      	uxtb	r2, r2
 23eadcc:	e7f6      	b.n	23eadbc <_Z14lora_msg_checkv.part.0+0x9c>
        if ( ( msg[3] == 'I' && msg[4] == 'F') ||
 23eadce:	2b4c      	cmp	r3, #76	; 0x4c
 23eadd0:	d112      	bne.n	23eadf8 <_Z14lora_msg_checkv.part.0+0xd8>
             ( msg[3] == 'L' && msg[4] == 'R')) {
 23eadd2:	7923      	ldrb	r3, [r4, #4]
 23eadd4:	2b52      	cmp	r3, #82	; 0x52
 23eadd6:	e7ea      	b.n	23eadae <_Z14lora_msg_checkv.part.0+0x8e>
          }
          byte1 = checksum>>8;
          byte2 = checksum%256;

          // Validate Checksum against sent checksum
          if ((byte1 == msg[1]) && (byte2 == msg[2])) {
 23eadd8:	7862      	ldrb	r2, [r4, #1]
 23eadda:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
 23eadde:	d117      	bne.n	23eae10 <_Z14lora_msg_checkv.part.0+0xf0>
 23eade0:	78a2      	ldrb	r2, [r4, #2]
 23eade2:	b2db      	uxtb	r3, r3
 23eade4:	429a      	cmp	r2, r3
 23eade6:	d113      	bne.n	23eae10 <_Z14lora_msg_checkv.part.0+0xf0>
            // Make what follows a string
            msg[msglen]=0;
 23eade8:	2300      	movs	r3, #0
 23eadea:	5563      	strb	r3, [r4, r5]

            char *payload = (char*)(msg+3); // After length and 2 checksum bytes

            // Display LoRa Message on Serial Console           
            Serial_write (payload);
 23eadec:	f7f9 fba2 	bl	23e4534 <_Z12Serial_writePKc>

            lora_relay_msg (payload);
 23eadf0:	f20d 1023 	addw	r0, sp, #291	; 0x123
 23eadf4:	f7fc fbea 	bl	23e75cc <_Z14lora_relay_msgPc>
            Output ("LORA CS-ERR");
          }
        }
      }
      // Received LoRa Signal, Reset alarm
      lora_alarm_timer = System.millis() + (LORA_RESET_NOACTIVITY * 60000);
 23eadf8:	f7f9 f871 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23eadfc:	4a0a      	ldr	r2, [pc, #40]	; (23eae28 <_Z14lora_msg_checkv.part.0+0x108>)
 23eadfe:	4b0b      	ldr	r3, [pc, #44]	; (23eae2c <_Z14lora_msg_checkv.part.0+0x10c>)
 23eae00:	1880      	adds	r0, r0, r2
 23eae02:	f141 0100 	adc.w	r1, r1, #0
 23eae06:	e9c3 0100 	strd	r0, r1, [r3]
        // Need to set some system status bit here too
        lora_initialize();
      }
    }
  }
}
 23eae0a:	f50d 7d08 	add.w	sp, sp, #544	; 0x220
 23eae0e:	bd70      	pop	{r4, r5, r6, pc}
            Output ("LORA CS-ERR");
 23eae10:	4807      	ldr	r0, [pc, #28]	; (23eae30 <_Z14lora_msg_checkv.part.0+0x110>)
 23eae12:	f7f9 fbb9 	bl	23e4588 <_Z6OutputPKc>
 23eae16:	e7ef      	b.n	23eadf8 <_Z14lora_msg_checkv.part.0+0xd8>
 23eae18:	1007aa78 	.word	0x1007aa78
 23eae1c:	1006a800 	.word	0x1006a800
 23eae20:	1006a268 	.word	0x1006a268
 23eae24:	1006a254 	.word	0x1006a254
 23eae28:	001b7740 	.word	0x001b7740
 23eae2c:	1006aea8 	.word	0x1006aea8
 23eae30:	023fdd92 	.word	0x023fdd92

023eae34 <_Z14lora_msg_checkv>:
void lora_msg_check() {
 23eae34:	b508      	push	{r3, lr}
  if (LORA_exists) {
 23eae36:	4b0e      	ldr	r3, [pc, #56]	; (23eae70 <_Z14lora_msg_checkv+0x3c>)
 23eae38:	781b      	ldrb	r3, [r3, #0]
 23eae3a:	b1bb      	cbz	r3, 23eae6c <_Z14lora_msg_checkv+0x38>
    if (rf95.available()) {
 23eae3c:	480d      	ldr	r0, [pc, #52]	; (23eae74 <_Z14lora_msg_checkv+0x40>)
 23eae3e:	f006 fc4e 	bl	23f16de <_ZN7RH_RF959availableEv>
 23eae42:	b118      	cbz	r0, 23eae4c <_Z14lora_msg_checkv+0x18>
}
 23eae44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 23eae48:	f7ff bf6a 	b.w	23ead20 <_Z14lora_msg_checkv.part.0>
      if (System.millis() >= lora_alarm_timer) {
 23eae4c:	f7f9 f847 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23eae50:	4b09      	ldr	r3, [pc, #36]	; (23eae78 <_Z14lora_msg_checkv+0x44>)
 23eae52:	e9d3 2300 	ldrd	r2, r3, [r3]
 23eae56:	4290      	cmp	r0, r2
 23eae58:	eb71 0303 	sbcs.w	r3, r1, r3
 23eae5c:	d306      	bcc.n	23eae6c <_Z14lora_msg_checkv+0x38>
        Output ("LORA Init");
 23eae5e:	4807      	ldr	r0, [pc, #28]	; (23eae7c <_Z14lora_msg_checkv+0x48>)
 23eae60:	f7f9 fb92 	bl	23e4588 <_Z6OutputPKc>
}
 23eae64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        lora_initialize();
 23eae68:	f7ff bef0 	b.w	23eac4c <_Z15lora_initializev>
}
 23eae6c:	bd08      	pop	{r3, pc}
 23eae6e:	bf00      	nop
 23eae70:	1006a2a1 	.word	0x1006a2a1
 23eae74:	1007aa78 	.word	0x1007aa78
 23eae78:	1006aea8 	.word	0x1006aea8
 23eae7c:	023fdd9e 	.word	0x023fdd9e

023eae80 <_Z13lora_msg_pollv>:
/* 
 *=======================================================================================================================
 * lora_msg_poll() -- Spend 750ms looking for LoRa Messages
 *=======================================================================================================================
 */
void lora_msg_poll() {
 23eae80:	b508      	push	{r3, lr}
  for (int i=0; i<3; i++) {
    lora_msg_check();
 23eae82:	f7ff ffd7 	bl	23eae34 <_Z14lora_msg_checkv>
    delay (250);
 23eae86:	20fa      	movs	r0, #250	; 0xfa
 23eae88:	f00c fa66 	bl	23f7358 <delay>
    lora_msg_check();
 23eae8c:	f7ff ffd2 	bl	23eae34 <_Z14lora_msg_checkv>
    delay (250);
 23eae90:	20fa      	movs	r0, #250	; 0xfa
 23eae92:	f00c fa61 	bl	23f7358 <delay>
    lora_msg_check();
 23eae96:	f7ff ffcd 	bl	23eae34 <_Z14lora_msg_checkv>
  }
 23eae9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay (250);
 23eae9e:	20fa      	movs	r0, #250	; 0xfa
 23eaea0:	f00c ba5a 	b.w	23f7358 <delay>

023eaea4 <_Z28Wind_Distance_Air_Initializev>:
void Wind_Distance_Air_Initialize() {
 23eaea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  anemometer_interrupt_count = 0;
 23eaea6:	2400      	movs	r4, #0
  Output ("WindDist Init()");
 23eaea8:	4821      	ldr	r0, [pc, #132]	; (23eaf30 <_Z28Wind_Distance_Air_Initializev+0x8c>)
 23eaeaa:	f7f9 fb6d 	bl	23e4588 <_Z6OutputPKc>
  anemometer_interrupt_count = 0;
 23eaeae:	4b21      	ldr	r3, [pc, #132]	; (23eaf34 <_Z28Wind_Distance_Air_Initializev+0x90>)
    if (A4_State == A4_STATE_DISTANCE) {
 23eaeb0:	4e21      	ldr	r6, [pc, #132]	; (23eaf38 <_Z28Wind_Distance_Air_Initializev+0x94>)
  anemometer_interrupt_count = 0;
 23eaeb2:	601c      	str	r4, [r3, #0]
  anemometer_interrupt_stime = System.millis();
 23eaeb4:	f7f9 f813 	bl	23e3ede <_ZN11SystemClass6millisEv>
  wind.gust = 0.0;
 23eaeb8:	2200      	movs	r2, #0
  anemometer_interrupt_stime = System.millis();
 23eaeba:	4b20      	ldr	r3, [pc, #128]	; (23eaf3c <_Z28Wind_Distance_Air_Initializev+0x98>)
    if (PM25AQI_exists) {
 23eaebc:	4f20      	ldr	r7, [pc, #128]	; (23eaf40 <_Z28Wind_Distance_Air_Initializev+0x9c>)
  anemometer_interrupt_stime = System.millis();
 23eaebe:	e9c3 0100 	strd	r0, r1, [r3]
  wind.gust = 0.0;
 23eaec2:	4b20      	ldr	r3, [pc, #128]	; (23eaf44 <_Z28Wind_Distance_Air_Initializev+0xa0>)
 23eaec4:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
  wind.gust_direction = -1;
 23eaec8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  wind.bucket_idx = 0;
 23eaecc:	f8c3 41e0 	str.w	r4, [r3, #480]	; 0x1e0
 23eaed0:	243c      	movs	r4, #60	; 0x3c
  wind.gust_direction = -1;
 23eaed2:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
    lora_msg_poll(); // 750ms Second Delay
 23eaed6:	f7ff ffd3 	bl	23eae80 <_Z13lora_msg_pollv>
    HeartBeat();     // Provides a 250ms delay
 23eaeda:	f7fd fcb9 	bl	23e8850 <_Z9HeartBeatv>
    Wind_TakeReading();
 23eaede:	f7fb fca3 	bl	23e6828 <_Z16Wind_TakeReadingv>
    if (A4_State == A4_STATE_DISTANCE) {
 23eaee2:	6833      	ldr	r3, [r6, #0]
 23eaee4:	2b01      	cmp	r3, #1
 23eaee6:	d101      	bne.n	23eaeec <_Z28Wind_Distance_Air_Initializev+0x48>
      DistanceGauge_TakeReading();
 23eaee8:	f7fb fa02 	bl	23e62f0 <_Z25DistanceGauge_TakeReadingv>
    if (PM25AQI_exists) {
 23eaeec:	783b      	ldrb	r3, [r7, #0]
 23eaeee:	b10b      	cbz	r3, 23eaef4 <_Z28Wind_Distance_Air_Initializev+0x50>
      pm25aqi_TakeReading();
 23eaef0:	f7fa febc 	bl	23e5c6c <_Z19pm25aqi_TakeReadingv>
    if (SerialConsoleEnabled) Serial.print(".");  // Provide Serial Console some feedback as we loop and wait til next observation
 23eaef4:	4d14      	ldr	r5, [pc, #80]	; (23eaf48 <_Z28Wind_Distance_Air_Initializev+0xa4>)
 23eaef6:	782b      	ldrb	r3, [r5, #0]
 23eaef8:	b123      	cbz	r3, 23eaf04 <_Z28Wind_Distance_Air_Initializev+0x60>
 23eaefa:	f00e f9b1 	bl	23f9260 <_Z16_fetch_usbserialv>
 23eaefe:	4913      	ldr	r1, [pc, #76]	; (23eaf4c <_Z28Wind_Distance_Air_Initializev+0xa8>)
 23eaf00:	f00d fc44 	bl	23f878c <_ZN5Print5printEPKc>
    OLED_spin();
 23eaf04:	f7f9 f9ba 	bl	23e427c <_Z9OLED_spinv>
  for (int i=0; i< WIND_READINGS; i++) {
 23eaf08:	3c01      	subs	r4, #1
 23eaf0a:	d1e4      	bne.n	23eaed6 <_Z28Wind_Distance_Air_Initializev+0x32>
  Wind_TakeReading();
 23eaf0c:	f7fb fc8c 	bl	23e6828 <_Z16Wind_TakeReadingv>
  if (A4_State == A4_STATE_DISTANCE) {
 23eaf10:	6833      	ldr	r3, [r6, #0]
 23eaf12:	2b01      	cmp	r3, #1
 23eaf14:	d101      	bne.n	23eaf1a <_Z28Wind_Distance_Air_Initializev+0x76>
    DistanceGauge_TakeReading();
 23eaf16:	f7fb f9eb 	bl	23e62f0 <_Z25DistanceGauge_TakeReadingv>
  if (SerialConsoleEnabled) Serial.println();  // Send a newline out to cleanup after all the periods we have been logging
 23eaf1a:	782b      	ldrb	r3, [r5, #0]
 23eaf1c:	b11b      	cbz	r3, 23eaf26 <_Z28Wind_Distance_Air_Initializev+0x82>
 23eaf1e:	f00e f99f 	bl	23f9260 <_Z16_fetch_usbserialv>
 23eaf22:	f00d fc3e 	bl	23f87a2 <_ZN5Print7printlnEv>
  ws_refresh = false; // Set to false since we have just initialized wind speed data.
 23eaf26:	2200      	movs	r2, #0
 23eaf28:	4b09      	ldr	r3, [pc, #36]	; (23eaf50 <_Z28Wind_Distance_Air_Initializev+0xac>)
 23eaf2a:	701a      	strb	r2, [r3, #0]
}
 23eaf2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23eaf2e:	bf00      	nop
 23eaf30:	023fdda8 	.word	0x023fdda8
 23eaf34:	1006a928 	.word	0x1006a928
 23eaf38:	1006a24c 	.word	0x1006a24c
 23eaf3c:	1006a930 	.word	0x1006a930
 23eaf40:	1006a2bd 	.word	0x1006a2bd
 23eaf44:	1007ac5c 	.word	0x1007ac5c
 23eaf48:	1006a7c7 	.word	0x1006a7c7
 23eaf4c:	023fddb8 	.word	0x023fddb8
 23eaf50:	1007ae48 	.word	0x1007ae48

023eaf54 <_Z14BackGroundWorkv>:
void BackGroundWork() {
 23eaf54:	b538      	push	{r3, r4, r5, lr}
  uint64_t OneSecondFromNow = System.millis() + 1000;
 23eaf56:	f7f8 ffc2 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23eaf5a:	f510 747a 	adds.w	r4, r0, #1000	; 0x3e8
 23eaf5e:	f141 0500 	adc.w	r5, r1, #0
  Wind_TakeReading();
 23eaf62:	f7fb fc61 	bl	23e6828 <_Z16Wind_TakeReadingv>
  if (A4_State == A4_STATE_DISTANCE) {
 23eaf66:	4b16      	ldr	r3, [pc, #88]	; (23eafc0 <_Z14BackGroundWorkv+0x6c>)
 23eaf68:	681b      	ldr	r3, [r3, #0]
 23eaf6a:	2b01      	cmp	r3, #1
 23eaf6c:	d101      	bne.n	23eaf72 <_Z14BackGroundWorkv+0x1e>
    DistanceGauge_TakeReading();
 23eaf6e:	f7fb f9bf 	bl	23e62f0 <_Z25DistanceGauge_TakeReadingv>
  if (PM25AQI_exists) {
 23eaf72:	4b14      	ldr	r3, [pc, #80]	; (23eafc4 <_Z14BackGroundWorkv+0x70>)
 23eaf74:	781b      	ldrb	r3, [r3, #0]
 23eaf76:	b10b      	cbz	r3, 23eaf7c <_Z14BackGroundWorkv+0x28>
    pm25aqi_TakeReading();
 23eaf78:	f7fa fe78 	bl	23e5c6c <_Z19pm25aqi_TakeReadingv>
  HeartBeat();  // Provides a 250ms delay
 23eaf7c:	f7fd fc68 	bl	23e8850 <_Z9HeartBeatv>
  if (LORA_exists) {
 23eaf80:	4b11      	ldr	r3, [pc, #68]	; (23eafc8 <_Z14BackGroundWorkv+0x74>)
 23eaf82:	781b      	ldrb	r3, [r3, #0]
 23eaf84:	b10b      	cbz	r3, 23eaf8a <_Z14BackGroundWorkv+0x36>
    lora_msg_poll(); // Provides a 750ms delay
 23eaf86:	f7ff ff7b 	bl	23eae80 <_Z13lora_msg_pollv>
  int64_t TimeRemaining = (OneSecondFromNow - System.millis());
 23eaf8a:	f7f8 ffa8 	bl	23e3ede <_ZN11SystemClass6millisEv>
  if ((TimeRemaining > 0) && (TimeRemaining < 1000)) {
 23eaf8e:	f240 33e7 	movw	r3, #999	; 0x3e7
  int64_t TimeRemaining = (OneSecondFromNow - System.millis());
 23eaf92:	1a20      	subs	r0, r4, r0
 23eaf94:	eb65 0101 	sbc.w	r1, r5, r1
  if ((TimeRemaining > 0) && (TimeRemaining < 1000)) {
 23eaf98:	1e42      	subs	r2, r0, #1
 23eaf9a:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 23eaf9e:	429a      	cmp	r2, r3
 23eafa0:	f171 0300 	sbcs.w	r3, r1, #0
 23eafa4:	d201      	bcs.n	23eafaa <_Z14BackGroundWorkv+0x56>
    delay (TimeRemaining);
 23eafa6:	f00c f9d7 	bl	23f7358 <delay>
  if (TurnLedOff) {   // Turned on by rain gauge interrupt handler
 23eafaa:	4c08      	ldr	r4, [pc, #32]	; (23eafcc <_Z14BackGroundWorkv+0x78>)
 23eafac:	7823      	ldrb	r3, [r4, #0]
 23eafae:	b133      	cbz	r3, 23eafbe <_Z14BackGroundWorkv+0x6a>
    digitalWrite(LED_PIN, LOW);  
 23eafb0:	4b07      	ldr	r3, [pc, #28]	; (23eafd0 <_Z14BackGroundWorkv+0x7c>)
 23eafb2:	2100      	movs	r1, #0
 23eafb4:	8818      	ldrh	r0, [r3, #0]
 23eafb6:	f00e fbc2 	bl	23f973e <digitalWrite>
    TurnLedOff = false;
 23eafba:	2300      	movs	r3, #0
 23eafbc:	7023      	strb	r3, [r4, #0]
}
 23eafbe:	bd38      	pop	{r3, r4, r5, pc}
 23eafc0:	1006a24c 	.word	0x1006a24c
 23eafc4:	1006a2bd 	.word	0x1006a2bd
 23eafc8:	1006a2a1 	.word	0x1006a2a1
 23eafcc:	1006a7d7 	.word	0x1006a7d7
 23eafd0:	1006a0ec 	.word	0x1006a0ec

023eafd4 <_Z16Particle_PublishPc>:
/*
 * ======================================================================================================================
 * Particle_Publish() - Publish to Particle what is in msgbuf
 * ======================================================================================================================
 */
bool Particle_Publish(char *EventName) {
 23eafd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23eafd6:	b087      	sub	sp, #28
 23eafd8:	4604      	mov	r4, r0
 23eafda:	f00b ff55 	bl	23f6e88 <spark_cloud_flag_connected>
  // Calling Particle.publish() when the cloud connection has been turned off will not publish an event. 
  // This is indicated by the return success code of false. If the cloud connection is turned on and 
  // trying to connect to the cloud unsuccessfully, Particle.publish() may block for up to 20 seconds 
  // (normal conditions) to 10 minutes (unusual conditions). Checking Particle.connected() 
  // before calling Particle.publish() can help prevent this.
  if (Particle.connected()) {
 23eafde:	4605      	mov	r5, r0
 23eafe0:	2800      	cmp	r0, #0
 23eafe2:	d03e      	beq.n	23eb062 <_Z16Particle_PublishPc+0x8e>
    uint64_t start_ts = System.millis();
 23eafe4:	f7f8 ff7b 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23eafe8:	4606      	mov	r6, r0
        return publish_event(eventName, eventData, eventData ? std::strlen(eventData) : 0, static_cast<int>(particle::ContentType::TEXT), ttl, flags1 | flags2);
 23eafea:	4820      	ldr	r0, [pc, #128]	; (23eb06c <_Z16Particle_PublishPc+0x98>)
 23eafec:	460f      	mov	r7, r1
 23eafee:	f7f8 f95f 	bl	23e32b0 <strlen>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 23eaff2:	4a1f      	ldr	r2, [pc, #124]	; (23eb070 <_Z16Particle_PublishPc+0x9c>)
 23eaff4:	2500      	movs	r5, #0
 23eaff6:	7812      	ldrb	r2, [r2, #0]
 23eaff8:	4603      	mov	r3, r0
 23eaffa:	f88d 2008 	strb.w	r2, [sp, #8]
 23eaffe:	223c      	movs	r2, #60	; 0x3c
 23eb000:	4621      	mov	r1, r4
 23eb002:	e9cd 5200 	strd	r5, r2, [sp]
 23eb006:	a804      	add	r0, sp, #16
 23eb008:	4a18      	ldr	r2, [pc, #96]	; (23eb06c <_Z16Particle_PublishPc+0x98>)
 23eb00a:	f00c fd4f 	bl	23f7aac <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE>
    explicit Future(ResultT result = ResultT()) :
            FutureBase<ResultT, ContextT>(std::make_shared<detail::FutureImpl<ResultT, ContextT>>(std::move(result))) {
    }

    ResultT result() const {
        return this->p_->result();
 23eb00e:	4629      	mov	r1, r5
 23eb010:	9804      	ldr	r0, [sp, #16]
 23eb012:	f7ff fce0 	bl	23ea9d6 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 23eb016:	9c05      	ldr	r4, [sp, #20]
 23eb018:	4605      	mov	r5, r0
 23eb01a:	b17c      	cbz	r4, 23eb03c <_Z16Particle_PublishPc+0x68>
      if (--_M_use_count == 0)
 23eb01c:	6863      	ldr	r3, [r4, #4]
 23eb01e:	3b01      	subs	r3, #1
 23eb020:	6063      	str	r3, [r4, #4]
 23eb022:	b95b      	cbnz	r3, 23eb03c <_Z16Particle_PublishPc+0x68>
          _M_dispose();
 23eb024:	6823      	ldr	r3, [r4, #0]
 23eb026:	4620      	mov	r0, r4
 23eb028:	689b      	ldr	r3, [r3, #8]
 23eb02a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23eb02c:	68a3      	ldr	r3, [r4, #8]
 23eb02e:	3b01      	subs	r3, #1
 23eb030:	60a3      	str	r3, [r4, #8]
 23eb032:	b91b      	cbnz	r3, 23eb03c <_Z16Particle_PublishPc+0x68>
            _M_destroy();
 23eb034:	6823      	ldr	r3, [r4, #0]
 23eb036:	4620      	mov	r0, r4
 23eb038:	68db      	ldr	r3, [r3, #12]
 23eb03a:	4798      	blx	r3
    if (Particle.publish(EventName, msgbuf, WITH_ACK)) {  // PRIVATE flag is always used even when not specified
 23eb03c:	b175      	cbz	r5, 23eb05c <_Z16Particle_PublishPc+0x88>

      // A safty check, If we got hung up for N seconds or more sending, 
      // let's invalidate our wind data and force a reinit in the main loop()
      if ((System.millis() - start_ts) >= 2000) {
 23eb03e:	f7f8 ff4e 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23eb042:	1b80      	subs	r0, r0, r6
 23eb044:	eb61 0107 	sbc.w	r1, r1, r7
 23eb048:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 23eb04c:	f171 0300 	sbcs.w	r3, r1, #0
        ws_refresh = true;
 23eb050:	bf22      	ittt	cs
 23eb052:	2201      	movcs	r2, #1
 23eb054:	4b07      	ldrcs	r3, [pc, #28]	; (23eb074 <_Z16Particle_PublishPc+0xa0>)
 23eb056:	701a      	strbcs	r2, [r3, #0]
      }
      // Currently, a device can publish at rate of about 1 event/sec, with bursts of up to 4 allowed in 1 second. 
      // Back to back burst of 4 messages will take 4 seconds to recover.
      // Our BackGroundWork() provides a delay between observations of 1 second 
      BackGroundWork();
 23eb058:	f7ff ff7c 	bl	23eaf54 <_Z14BackGroundWorkv>
  }
  else {
    Output ("Particle:NotReady");
  }
  return(false);
}
 23eb05c:	4628      	mov	r0, r5
 23eb05e:	b007      	add	sp, #28
 23eb060:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Output ("Particle:NotReady");
 23eb062:	4805      	ldr	r0, [pc, #20]	; (23eb078 <_Z16Particle_PublishPc+0xa4>)
 23eb064:	f7f9 fa90 	bl	23e4588 <_Z6OutputPKc>
 23eb068:	e7f8      	b.n	23eb05c <_Z16Particle_PublishPc+0x88>
 23eb06a:	bf00      	nop
 23eb06c:	1006f118 	.word	0x1006f118
 23eb070:	1006a7db 	.word	0x1006a7db
 23eb074:	1007ae48 	.word	0x1007ae48
 23eb078:	023fddba 	.word	0x023fddba

023eb07c <_Z14OBS_FS_Publishi>:
/*
 * ======================================================================================================================
 * OBS_FS_Publish() - obs[i].inuse for this observation must be true prior to calling
 * ======================================================================================================================
 */
bool OBS_FS_Publish(int i) {
 23eb07c:	b513      	push	{r0, r1, r4, lr}
 23eb07e:	9001      	str	r0, [sp, #4]
  OBS_FS_Build_JSON(i);  
 23eb080:	f7fc fd16 	bl	23e7ab0 <_Z17OBS_FS_Build_JSONi>
  if (Particle_Publish((char *) "FS")) {
 23eb084:	480e      	ldr	r0, [pc, #56]	; (23eb0c0 <_Z14OBS_FS_Publishi+0x44>)
 23eb086:	f7ff ffa5 	bl	23eafd4 <_Z16Particle_PublishPc>
 23eb08a:	9a01      	ldr	r2, [sp, #4]
 23eb08c:	4604      	mov	r4, r0
 23eb08e:	b188      	cbz	r0, 23eb0b4 <_Z14OBS_FS_Publishi+0x38>
    Serial_write (msgbuf);
 23eb090:	480c      	ldr	r0, [pc, #48]	; (23eb0c4 <_Z14OBS_FS_Publishi+0x48>)
 23eb092:	f7f9 fa4f 	bl	23e4534 <_Z12Serial_writePKc>
    sprintf (Buffer32Bytes, "FS[%d]->PUB OK[%d]", i, strlen(msgbuf)+1);
 23eb096:	480b      	ldr	r0, [pc, #44]	; (23eb0c4 <_Z14OBS_FS_Publishi+0x48>)
 23eb098:	f7f8 f90a 	bl	23e32b0 <strlen>
 23eb09c:	9a01      	ldr	r2, [sp, #4]
 23eb09e:	1c43      	adds	r3, r0, #1
 23eb0a0:	4909      	ldr	r1, [pc, #36]	; (23eb0c8 <_Z14OBS_FS_Publishi+0x4c>)
 23eb0a2:	480a      	ldr	r0, [pc, #40]	; (23eb0cc <_Z14OBS_FS_Publishi+0x50>)
 23eb0a4:	f00c f878 	bl	23f7198 <sprintf>
    Output(Buffer32Bytes);
    return(true);
  }
  else {
    sprintf (Buffer32Bytes, "FS[%d]->PUB ERR", i);
    Output(Buffer32Bytes);
 23eb0a8:	4808      	ldr	r0, [pc, #32]	; (23eb0cc <_Z14OBS_FS_Publishi+0x50>)
 23eb0aa:	f7f9 fa6d 	bl	23e4588 <_Z6OutputPKc>
    return(false);
  }
}
 23eb0ae:	4620      	mov	r0, r4
 23eb0b0:	b002      	add	sp, #8
 23eb0b2:	bd10      	pop	{r4, pc}
    sprintf (Buffer32Bytes, "FS[%d]->PUB ERR", i);
 23eb0b4:	4906      	ldr	r1, [pc, #24]	; (23eb0d0 <_Z14OBS_FS_Publishi+0x54>)
 23eb0b6:	4805      	ldr	r0, [pc, #20]	; (23eb0cc <_Z14OBS_FS_Publishi+0x50>)
 23eb0b8:	f00c f86e 	bl	23f7198 <sprintf>
 23eb0bc:	e7f4      	b.n	23eb0a8 <_Z14OBS_FS_Publishi+0x2c>
 23eb0be:	bf00      	nop
 23eb0c0:	023fd4dc 	.word	0x023fd4dc
 23eb0c4:	1006f118 	.word	0x1006f118
 23eb0c8:	023fddcc 	.word	0x023fddcc
 23eb0cc:	1006a277 	.word	0x1006a277
 23eb0d0:	023fdddf 	.word	0x023fdddf

023eb0d4 <_Z17OBS_Relay_Publishi>:
/*
 * ======================================================================================================================
 * OBS_Relay_Publish()
 * ======================================================================================================================
 */
bool OBS_Relay_Publish(int relay_type) {
 23eb0d4:	b570      	push	{r4, r5, r6, lr}
  if (relay_type > 0) {  // little safty check. Should not be 0
 23eb0d6:	1e04      	subs	r4, r0, #0
 23eb0d8:	dd16      	ble.n	23eb108 <_Z17OBS_Relay_Publishi+0x34>
    Serial_write (msgbuf);
    if (Particle_Publish((char *) relay_msgtypes[relay_type])) {
 23eb0da:	4e10      	ldr	r6, [pc, #64]	; (23eb11c <_Z17OBS_Relay_Publishi+0x48>)
    Serial_write (msgbuf);
 23eb0dc:	4810      	ldr	r0, [pc, #64]	; (23eb120 <_Z17OBS_Relay_Publishi+0x4c>)
 23eb0de:	f7f9 fa29 	bl	23e4534 <_Z12Serial_writePKc>
    if (Particle_Publish((char *) relay_msgtypes[relay_type])) {
 23eb0e2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 23eb0e6:	f7ff ff75 	bl	23eafd4 <_Z16Particle_PublishPc>
      sprintf (Buffer32Bytes, "RELAY[%s]->PUB OK", relay_msgtypes[relay_type]);
 23eb0ea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    if (Particle_Publish((char *) relay_msgtypes[relay_type])) {
 23eb0ee:	4605      	mov	r5, r0
 23eb0f0:	b140      	cbz	r0, 23eb104 <_Z17OBS_Relay_Publishi+0x30>
      sprintf (Buffer32Bytes, "RELAY[%s]->PUB OK", relay_msgtypes[relay_type]);
 23eb0f2:	490c      	ldr	r1, [pc, #48]	; (23eb124 <_Z17OBS_Relay_Publishi+0x50>)
      Output(Buffer32Bytes);
      return(true);
    }
    else {
      sprintf (Buffer32Bytes, "RELAY[%s]->PUB ERR", relay_msgtypes[relay_type]);
 23eb0f4:	480c      	ldr	r0, [pc, #48]	; (23eb128 <_Z17OBS_Relay_Publishi+0x54>)
 23eb0f6:	f00c f84f 	bl	23f7198 <sprintf>
      Output(Buffer32Bytes);       
 23eb0fa:	480b      	ldr	r0, [pc, #44]	; (23eb128 <_Z17OBS_Relay_Publishi+0x54>)
 23eb0fc:	f7f9 fa44 	bl	23e4588 <_Z6OutputPKc>
  else {
    sprintf (Buffer32Bytes, "RELAY TYPE[%d] INVALID", relay_type);
    Output(Buffer32Bytes);
    return(false);
  }
}
 23eb100:	4628      	mov	r0, r5
 23eb102:	bd70      	pop	{r4, r5, r6, pc}
      sprintf (Buffer32Bytes, "RELAY[%s]->PUB ERR", relay_msgtypes[relay_type]);
 23eb104:	4909      	ldr	r1, [pc, #36]	; (23eb12c <_Z17OBS_Relay_Publishi+0x58>)
 23eb106:	e7f5      	b.n	23eb0f4 <_Z17OBS_Relay_Publishi+0x20>
    sprintf (Buffer32Bytes, "RELAY TYPE[%d] INVALID", relay_type);
 23eb108:	4622      	mov	r2, r4
 23eb10a:	4909      	ldr	r1, [pc, #36]	; (23eb130 <_Z17OBS_Relay_Publishi+0x5c>)
 23eb10c:	4806      	ldr	r0, [pc, #24]	; (23eb128 <_Z17OBS_Relay_Publishi+0x54>)
 23eb10e:	f00c f843 	bl	23f7198 <sprintf>
    Output(Buffer32Bytes);
 23eb112:	4805      	ldr	r0, [pc, #20]	; (23eb128 <_Z17OBS_Relay_Publishi+0x54>)
 23eb114:	f7f9 fa38 	bl	23e4588 <_Z6OutputPKc>
    return(false);
 23eb118:	2500      	movs	r5, #0
 23eb11a:	e7f1      	b.n	23eb100 <_Z17OBS_Relay_Publishi+0x2c>
 23eb11c:	1006a1a0 	.word	0x1006a1a0
 23eb120:	1006f118 	.word	0x1006f118
 23eb124:	023fddef 	.word	0x023fddef
 23eb128:	1006a277 	.word	0x1006a277
 23eb12c:	023fde01 	.word	0x023fde01
 23eb130:	023fde14 	.word	0x023fde14

023eb134 <_Z7INFO_Dov>:
/*
 * ======================================================================================================================
 * INFO_Do() - Get and Send System Information to Particle Cloud
 * ======================================================================================================================
 */
bool INFO_Do() {
 23eb134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23eb138:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
  char buf[256];
  const char *comma = "";
  time_t ts = Time.now();
 23eb13c:	f00d ff79 	bl	23f9032 <_ZN9TimeClass3nowEv>
  bool result;

  Output("INFO_DO()");

  SendSystemInformation = false;
 23eb140:	2400      	movs	r4, #0
  time_t ts = Time.now();
 23eb142:	17c6      	asrs	r6, r0, #31
 23eb144:	4605      	mov	r5, r0
  Output("INFO_DO()");
 23eb146:	48c3      	ldr	r0, [pc, #780]	; (23eb454 <_Z7INFO_Dov+0x320>)
 23eb148:	f7f9 fa1e 	bl	23e4588 <_Z6OutputPKc>
  SendSystemInformation = false;
 23eb14c:	4bc2      	ldr	r3, [pc, #776]	; (23eb458 <_Z7INFO_Dov+0x324>)

  memset(buf, 0, sizeof(buf));        // holds string of found sensors 
 23eb14e:	4621      	mov	r1, r4
 23eb150:	f44f 7280 	mov.w	r2, #256	; 0x100
 23eb154:	a844      	add	r0, sp, #272	; 0x110
  SendSystemInformation = false;
 23eb156:	701c      	strb	r4, [r3, #0]
  memset(buf, 0, sizeof(buf));        // holds string of found sensors 
 23eb158:	f011 f945 	bl	23fc3e6 <memset>
  memset(msgbuf, 0, sizeof(msgbuf));  // hold the json formatted message we are building for sending.
 23eb15c:	4bbf      	ldr	r3, [pc, #764]	; (23eb45c <_Z7INFO_Dov+0x328>)
 23eb15e:	4621      	mov	r1, r4
 23eb160:	f44f 6280 	mov.w	r2, #1024	; 0x400
 23eb164:	4618      	mov	r0, r3
 23eb166:	f011 f93e 	bl	23fc3e6 <memset>
        n_(0) {
 23eb16a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 23eb16e:	4abc      	ldr	r2, [pc, #752]	; (23eb460 <_Z7INFO_Dov+0x32c>)
 23eb170:	900c      	str	r0, [sp, #48]	; 0x30

  JSONBufferWriter writer(msgbuf, sizeof(msgbuf)-1);
  writer.beginObject();
 23eb172:	a80a      	add	r0, sp, #40	; 0x28
 23eb174:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 23eb178:	920a      	str	r2, [sp, #40]	; 0x28
        state_(BEGIN) {
 23eb17a:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
 23eb17e:	f00c fffa 	bl	23f8176 <_ZN5spark10JSONWriter11beginObjectEv>

  writer.name("devid").value(System.deviceID());
 23eb182:	49b8      	ldr	r1, [pc, #736]	; (23eb464 <_Z7INFO_Dov+0x330>)
 23eb184:	a80a      	add	r0, sp, #40	; 0x28
 23eb186:	f7f8 ff19 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb18a:	4607      	mov	r7, r0
        return spark_deviceID();
 23eb18c:	a830      	add	r0, sp, #192	; 0xc0
 23eb18e:	f00b fe89 	bl	23f6ea4 <spark_deviceID>
    return value(val.c_str(), val.length());
 23eb192:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 23eb194:	9930      	ldr	r1, [sp, #192]	; 0xc0
 23eb196:	4638      	mov	r0, r7
 23eb198:	f00d f8f6 	bl	23f8388 <_ZN5spark10JSONWriter5valueEPKcj>
 23eb19c:	a830      	add	r0, sp, #192	; 0xc0
 23eb19e:	f00d fcb0 	bl	23f8b02 <_ZN6StringD1Ev>
  writer.name("devos").value(System.version());
 23eb1a2:	49b1      	ldr	r1, [pc, #708]	; (23eb468 <_Z7INFO_Dov+0x334>)
 23eb1a4:	a80a      	add	r0, sp, #40	; 0x28
 23eb1a6:	f7f8 ff09 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
        SystemVersionInfo info = {};
 23eb1aa:	f04f 081c 	mov.w	r8, #28
 23eb1ae:	4607      	mov	r7, r0
 23eb1b0:	4642      	mov	r2, r8
 23eb1b2:	4621      	mov	r1, r4
 23eb1b4:	a830      	add	r0, sp, #192	; 0xc0
 23eb1b6:	f011 f916 	bl	23fc3e6 <memset>
        system_version_info(&info, nullptr);
 23eb1ba:	4621      	mov	r1, r4
 23eb1bc:	a830      	add	r0, sp, #192	; 0xc0
        info.size = sizeof(SystemVersionInfo);
 23eb1be:	f8ad 80c0 	strh.w	r8, [sp, #192]	; 0xc0
        system_version_info(&info, nullptr);
 23eb1c2:	f00b fdab 	bl	23f6d1c <system_version_info>
        return String(info.versionString);
 23eb1c6:	a932      	add	r1, sp, #200	; 0xc8
 23eb1c8:	a81c      	add	r0, sp, #112	; 0x70
 23eb1ca:	f00d fce5 	bl	23f8b98 <_ZN6StringC1EPK19__FlashStringHelper>
 23eb1ce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 23eb1d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 23eb1d2:	4638      	mov	r0, r7
 23eb1d4:	f00d f8d8 	bl	23f8388 <_ZN5spark10JSONWriter5valueEPKcj>
 23eb1d8:	a81c      	add	r0, sp, #112	; 0x70
 23eb1da:	f00d fc92 	bl	23f8b02 <_ZN6StringD1Ev>
  writer.name("freemem").value(System.freeMemory());
 23eb1de:	49a3      	ldr	r1, [pc, #652]	; (23eb46c <_Z7INFO_Dov+0x338>)
 23eb1e0:	a80a      	add	r0, sp, #40	; 0x28
 23eb1e2:	f7f8 feeb 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb1e6:	4607      	mov	r7, r0
 23eb1e8:	f00d fd71 	bl	23f8cce <_ZN11SystemClass10freeMemoryEv>
 23eb1ec:	4601      	mov	r1, r0
 23eb1ee:	4638      	mov	r0, r7
 23eb1f0:	f00c fff2 	bl	23f81d8 <_ZN5spark10JSONWriter5valueEm>
  writer.name("uptime").value(System.uptime());
 23eb1f4:	499e      	ldr	r1, [pc, #632]	; (23eb470 <_Z7INFO_Dov+0x33c>)
 23eb1f6:	a80a      	add	r0, sp, #40	; 0x28
 23eb1f8:	f7f8 fee0 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb1fc:	4607      	mov	r7, r0
        return (hal_timer_millis(nullptr) / 1000);
 23eb1fe:	4620      	mov	r0, r4
 23eb200:	f00b f9aa 	bl	23f6558 <hal_timer_millis>
 23eb204:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23eb208:	2300      	movs	r3, #0
 23eb20a:	f7f7 feb7 	bl	23e2f7c <__aeabi_uldivmod>
 23eb20e:	4601      	mov	r1, r0
 23eb210:	4638      	mov	r0, r7
 23eb212:	f00c ffcf 	bl	23f81b4 <_ZN5spark10JSONWriter5valueEj>
#endif
#if PLATFORM_ID == PLATFORM_BORON
  writer.name("type").value("boron");
#endif
#if PLATFORM_ID == PLATFORM_MSOM
  writer.name("type").value("muon");
 23eb216:	4997      	ldr	r1, [pc, #604]	; (23eb474 <_Z7INFO_Dov+0x340>)
 23eb218:	a80a      	add	r0, sp, #40	; 0x28
 23eb21a:	f7f8 fecf 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb21e:	4996      	ldr	r1, [pc, #600]	; (23eb478 <_Z7INFO_Dov+0x344>)
 23eb220:	f7f8 fe02 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
#endif

  sprintf (Buffer32Bytes, "%d-%02d-%02dT%02d:%02d:%02d",
 23eb224:	4631      	mov	r1, r6
 23eb226:	4628      	mov	r0, r5
 23eb228:	f00d fde2 	bl	23f8df0 <_ZN9TimeClass4yearEx>
 23eb22c:	4631      	mov	r1, r6
 23eb22e:	9005      	str	r0, [sp, #20]
 23eb230:	4628      	mov	r0, r5
 23eb232:	f00d fdd3 	bl	23f8ddc <_ZN9TimeClass5monthEx>
 23eb236:	4631      	mov	r1, r6
 23eb238:	9004      	str	r0, [sp, #16]
 23eb23a:	4628      	mov	r0, r5
 23eb23c:	f00d fdc6 	bl	23f8dcc <_ZN9TimeClass3dayEx>
 23eb240:	4631      	mov	r1, r6
 23eb242:	4607      	mov	r7, r0
 23eb244:	4628      	mov	r0, r5
 23eb246:	f00d fda9 	bl	23f8d9c <_ZN9TimeClass4hourEx>
 23eb24a:	4631      	mov	r1, r6
 23eb24c:	4680      	mov	r8, r0
 23eb24e:	4628      	mov	r0, r5
 23eb250:	f00d fdac 	bl	23f8dac <_ZN9TimeClass6minuteEx>
 23eb254:	4631      	mov	r1, r6
 23eb256:	4681      	mov	r9, r0
 23eb258:	4628      	mov	r0, r5
 23eb25a:	f00d fdaf 	bl	23f8dbc <_ZN9TimeClass6secondEx>
 23eb25e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 23eb262:	e9cd 9002 	strd	r9, r0, [sp, #8]
 23eb266:	4985      	ldr	r1, [pc, #532]	; (23eb47c <_Z7INFO_Dov+0x348>)
 23eb268:	e9cd 7800 	strd	r7, r8, [sp]
 23eb26c:	4884      	ldr	r0, [pc, #528]	; (23eb480 <_Z7INFO_Dov+0x34c>)
 23eb26e:	f00b ff93 	bl	23f7198 <sprintf>
    Time.year(ts), Time.month(ts), Time.day(ts),
    Time.hour(ts), Time.minute(ts), Time.second(ts));
  writer.name("at").value(Buffer32Bytes);
 23eb272:	4984      	ldr	r1, [pc, #528]	; (23eb484 <_Z7INFO_Dov+0x350>)
 23eb274:	a80a      	add	r0, sp, #40	; 0x28
 23eb276:	f7f8 fea1 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb27a:	4981      	ldr	r1, [pc, #516]	; (23eb480 <_Z7INFO_Dov+0x34c>)
 23eb27c:	f7f8 fdd4 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  writer.name("ver").value(VERSION_INFO);
 23eb280:	4981      	ldr	r1, [pc, #516]	; (23eb488 <_Z7INFO_Dov+0x354>)
 23eb282:	a80a      	add	r0, sp, #40	; 0x28
 23eb284:	f7f8 fe9a 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb288:	4980      	ldr	r1, [pc, #512]	; (23eb48c <_Z7INFO_Dov+0x358>)
 23eb28a:	f7f8 fdcd 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  writer.name("hth").value((int) SystemStatusBits);
 23eb28e:	4980      	ldr	r1, [pc, #512]	; (23eb490 <_Z7INFO_Dov+0x35c>)
 23eb290:	a80a      	add	r0, sp, #40	; 0x28
 23eb292:	f7f8 fe93 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb296:	4b7f      	ldr	r3, [pc, #508]	; (23eb494 <_Z7INFO_Dov+0x360>)
 23eb298:	6819      	ldr	r1, [r3, #0]
 23eb29a:	f00c ff79 	bl	23f8190 <_ZN5spark10JSONWriter5valueEi>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 23eb29e:	4622      	mov	r2, r4
 23eb2a0:	4621      	mov	r1, r4
 23eb2a2:	a830      	add	r0, sp, #192	; 0xc0
        int reason = RESET_REASON_NONE;
 23eb2a4:	9430      	str	r4, [sp, #192]	; 0xc0
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 23eb2a6:	f00b f8cb 	bl	23f6440 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 23eb2aa:	9e30      	ldr	r6, [sp, #192]	; 0xc0
        HAL_Core_Get_Last_Reset_Info(nullptr, &data, nullptr);
 23eb2ac:	4622      	mov	r2, r4
 23eb2ae:	4620      	mov	r0, r4
 23eb2b0:	a930      	add	r1, sp, #192	; 0xc0
        uint32_t data = 0;
 23eb2b2:	9430      	str	r4, [sp, #192]	; 0xc0
        HAL_Core_Get_Last_Reset_Info(nullptr, &data, nullptr);
 23eb2b4:	f00b f8c4 	bl	23f6440 <HAL_Core_Get_Last_Reset_Info>

  // Reboot/Reset Reason and data
  sprintf (Buffer32Bytes,"%d-%d", System.resetReason(), System.resetReasonData());
 23eb2b8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 23eb2ba:	4632      	mov	r2, r6
 23eb2bc:	4976      	ldr	r1, [pc, #472]	; (23eb498 <_Z7INFO_Dov+0x364>)
 23eb2be:	4870      	ldr	r0, [pc, #448]	; (23eb480 <_Z7INFO_Dov+0x34c>)
 23eb2c0:	f00b ff6a 	bl	23f7198 <sprintf>
  writer.name("rr").value(Buffer32Bytes);;
 23eb2c4:	4975      	ldr	r1, [pc, #468]	; (23eb49c <_Z7INFO_Dov+0x368>)
 23eb2c6:	a80a      	add	r0, sp, #40	; 0x28
 23eb2c8:	f7f8 fe78 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb2cc:	496c      	ldr	r1, [pc, #432]	; (23eb480 <_Z7INFO_Dov+0x34c>)
 23eb2ce:	f7f8 fdab 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  sprintf (Buffer32Bytes,"%ds", OBSERVATION_INTERVAL/1000);
 23eb2d2:	223c      	movs	r2, #60	; 0x3c
 23eb2d4:	4972      	ldr	r1, [pc, #456]	; (23eb4a0 <_Z7INFO_Dov+0x36c>)
 23eb2d6:	486a      	ldr	r0, [pc, #424]	; (23eb480 <_Z7INFO_Dov+0x34c>)
 23eb2d8:	f00b ff5e 	bl	23f7198 <sprintf>
  writer.name("obsi").value(Buffer32Bytes);
  sprintf (Buffer32Bytes,"%dm", (int) obs_tx_interval);
 23eb2dc:	4c71      	ldr	r4, [pc, #452]	; (23eb4a4 <_Z7INFO_Dov+0x370>)
  writer.name("obsi").value(Buffer32Bytes);
 23eb2de:	4972      	ldr	r1, [pc, #456]	; (23eb4a8 <_Z7INFO_Dov+0x374>)
 23eb2e0:	a80a      	add	r0, sp, #40	; 0x28
 23eb2e2:	f7f8 fe6b 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb2e6:	4966      	ldr	r1, [pc, #408]	; (23eb480 <_Z7INFO_Dov+0x34c>)
 23eb2e8:	f7f8 fd9e 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  sprintf (Buffer32Bytes,"%dm", (int) obs_tx_interval);
 23eb2ec:	6822      	ldr	r2, [r4, #0]
 23eb2ee:	496f      	ldr	r1, [pc, #444]	; (23eb4ac <_Z7INFO_Dov+0x378>)
 23eb2f0:	4863      	ldr	r0, [pc, #396]	; (23eb480 <_Z7INFO_Dov+0x34c>)
 23eb2f2:	f00b ff51 	bl	23f7198 <sprintf>
  writer.name("obsti").value(Buffer32Bytes);
 23eb2f6:	496e      	ldr	r1, [pc, #440]	; (23eb4b0 <_Z7INFO_Dov+0x37c>)
 23eb2f8:	a80a      	add	r0, sp, #40	; 0x28
 23eb2fa:	f7f8 fe5f 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb2fe:	4960      	ldr	r1, [pc, #384]	; (23eb480 <_Z7INFO_Dov+0x34c>)
 23eb300:	f7f8 fd92 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  // Time 2 Next Transmit in Seconds
  sprintf (Buffer32Bytes, "%ds", (int) ((obs_tx_interval * 60) - ((System.millis() - LastTransmitTime)/1000)));
 23eb304:	233c      	movs	r3, #60	; 0x3c
 23eb306:	6824      	ldr	r4, [r4, #0]
 23eb308:	435c      	muls	r4, r3
 23eb30a:	f7f8 fde8 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23eb30e:	4a69      	ldr	r2, [pc, #420]	; (23eb4b4 <_Z7INFO_Dov+0x380>)
 23eb310:	e9d2 3600 	ldrd	r3, r6, [r2]
 23eb314:	1ac0      	subs	r0, r0, r3
 23eb316:	eb61 0106 	sbc.w	r1, r1, r6
 23eb31a:	2300      	movs	r3, #0
 23eb31c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23eb320:	f7f7 fe2c 	bl	23e2f7c <__aeabi_uldivmod>
 23eb324:	495e      	ldr	r1, [pc, #376]	; (23eb4a0 <_Z7INFO_Dov+0x36c>)
 23eb326:	1a22      	subs	r2, r4, r0
 23eb328:	4855      	ldr	r0, [pc, #340]	; (23eb480 <_Z7INFO_Dov+0x34c>)
 23eb32a:	f00b ff35 	bl	23f7198 <sprintf>
  writer.name("t2nt").value(Buffer32Bytes);
 23eb32e:	4962      	ldr	r1, [pc, #392]	; (23eb4b8 <_Z7INFO_Dov+0x384>)
 23eb330:	a80a      	add	r0, sp, #40	; 0x28
 23eb332:	f7f8 fe43 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb336:	4952      	ldr	r1, [pc, #328]	; (23eb480 <_Z7INFO_Dov+0x34c>)
 23eb338:	f7f8 fd76 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  // Daily Reboot Countdown Timer
  writer.name("drct").value(DailyRebootCountDownTimer);
 23eb33c:	495f      	ldr	r1, [pc, #380]	; (23eb4bc <_Z7INFO_Dov+0x388>)
 23eb33e:	a80a      	add	r0, sp, #40	; 0x28
 23eb340:	f7f8 fe3c 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb344:	4b5e      	ldr	r3, [pc, #376]	; (23eb4c0 <_Z7INFO_Dov+0x38c>)
 23eb346:	6819      	ldr	r1, [r3, #0]
 23eb348:	f00c ff22 	bl	23f8190 <_ZN5spark10JSONWriter5valueEi>

  // Need 2 Send File
  if (SD.exists(SD_n2s_file)) {
 23eb34c:	495d      	ldr	r1, [pc, #372]	; (23eb4c4 <_Z7INFO_Dov+0x390>)
 23eb34e:	485e      	ldr	r0, [pc, #376]	; (23eb4c8 <_Z7INFO_Dov+0x394>)
 23eb350:	f7f8 fe54 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23eb354:	2800      	cmp	r0, #0
 23eb356:	f000 84c7 	beq.w	23ebce8 <_Z7INFO_Dov+0xbb4>
    File fp = SD.open(SD_n2s_file, FILE_WRITE);
 23eb35a:	495b      	ldr	r1, [pc, #364]	; (23eb4c8 <_Z7INFO_Dov+0x394>)
 23eb35c:	f244 2302 	movw	r3, #16898	; 0x4202
 23eb360:	4a58      	ldr	r2, [pc, #352]	; (23eb4c4 <_Z7INFO_Dov+0x390>)
 23eb362:	a830      	add	r0, sp, #192	; 0xc0
 23eb364:	f009 fbca 	bl	23f4afc <_ZN8FsVolume4openEPKci>
  operator bool() const { return isOpen(); }
 23eb368:	a834      	add	r0, sp, #208	; 0xd0
 23eb36a:	f7f8 fec0 	bl	23e40ee <_ZNK10FsBaseFile6isOpenEv>
    if (fp) {
      writer.name("n2s").value(fp.size());
 23eb36e:	4957      	ldr	r1, [pc, #348]	; (23eb4cc <_Z7INFO_Dov+0x398>)
    if (fp) {
 23eb370:	2800      	cmp	r0, #0
 23eb372:	f000 84b0 	beq.w	23ebcd6 <_Z7INFO_Dov+0xba2>
      writer.name("n2s").value(fp.size());
 23eb376:	a80a      	add	r0, sp, #40	; 0x28
 23eb378:	f7f8 fe20 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb37c:	4604      	mov	r4, r0
  PosType size() { return BaseFile::fileSize(); }
 23eb37e:	a834      	add	r0, sp, #208	; 0xd0
 23eb380:	f7f8 fea9 	bl	23e40d6 <_ZNK10FsBaseFile8fileSizeEv>
 23eb384:	4602      	mov	r2, r0
 23eb386:	460b      	mov	r3, r1
 23eb388:	4620      	mov	r0, r4
 23eb38a:	f00c ff37 	bl	23f81fc <_ZN5spark10JSONWriter5valueEy>
      fp.close();
 23eb38e:	a834      	add	r0, sp, #208	; 0xd0
 23eb390:	f009 fadb 	bl	23f494a <_ZN10FsBaseFile5closeEv>
  writer.name("bcs").value((digitalRead(PWR) && !digitalRead(CHG)) ? "CHARGING" : "!CHARGING"); // Battery Charger State
#endif

#if (PLATFORM_ID == PLATFORM_BORON) || (PLATFORM_ID == PLATFORM_MSOM)
  // Power Source
  const char *ps[] = {"UNKN", "VIN", "USB_HOST", "USB_ADAPTER", "USB_OTG", "BATTERY"};
 23eb394:	af0f      	add	r7, sp, #60	; 0x3c
 23eb396:	463c      	mov	r4, r7
 23eb398:	4e4d      	ldr	r6, [pc, #308]	; (23eb4d0 <_Z7INFO_Dov+0x39c>)
 23eb39a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 23eb39c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23eb39e:	e896 0003 	ldmia.w	r6, {r0, r1}
 23eb3a2:	e884 0003 	stmia.w	r4, {r0, r1}
  int sps = System.powerSource();
 23eb3a6:	f7ff fb0b 	bl	23ea9c0 <_ZNK11SystemClass11powerSourceEv.isra.0>
 23eb3aa:	4604      	mov	r4, r0
  if ((sps>=0) && (sps<=5)) {
 23eb3ac:	2c05      	cmp	r4, #5
    writer.name("ps").value(ps[sps]);
 23eb3ae:	4949      	ldr	r1, [pc, #292]	; (23eb4d4 <_Z7INFO_Dov+0x3a0>)
 23eb3b0:	a80a      	add	r0, sp, #40	; 0x28
  if ((sps>=0) && (sps<=5)) {
 23eb3b2:	f200 84a2 	bhi.w	23ebcfa <_Z7INFO_Dov+0xbc6>
    writer.name("ps").value(ps[sps]);
 23eb3b6:	f7f8 fe01 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb3ba:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 23eb3be:	f7f8 fd33 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  else {
    writer.name("ps").value(sps);
  }

  // Battery Charge State
  const char *bs[] = {"UNKN", "!CHARGING", "CHARGING", "CHARGED", "DISCHARGING", "FAULT", "MISSING"};
 23eb3c2:	af15      	add	r7, sp, #84	; 0x54
 23eb3c4:	463c      	mov	r4, r7
 23eb3c6:	4e44      	ldr	r6, [pc, #272]	; (23eb4d8 <_Z7INFO_Dov+0x3a4>)
 23eb3c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 23eb3ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23eb3cc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 23eb3d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  int sbs = System.batteryState();
 23eb3d4:	f7fd faf0 	bl	23e89b8 <_ZNK11SystemClass12batteryStateEv.isra.0>
 23eb3d8:	4604      	mov	r4, r0
  if ((sbs>=0) && (sbs<=6)) {
 23eb3da:	2c06      	cmp	r4, #6
    writer.name("bcs").value(bs[sbs]);     
 23eb3dc:	493f      	ldr	r1, [pc, #252]	; (23eb4dc <_Z7INFO_Dov+0x3a8>)
 23eb3de:	a80a      	add	r0, sp, #40	; 0x28
  if ((sbs>=0) && (sbs<=6)) {
 23eb3e0:	f200 8492 	bhi.w	23ebd08 <_Z7INFO_Dov+0xbd4>
    writer.name("bcs").value(bs[sbs]);     
 23eb3e4:	f7f8 fdea 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb3e8:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 23eb3ec:	f7f8 fd1c 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  }
  else {
    writer.name("bcs").value(sbs);
  }
  writer.name("bpc").value(System.batteryCharge(), 1);   // Battery Percent Charge
 23eb3f0:	493b      	ldr	r1, [pc, #236]	; (23eb4e0 <_Z7INFO_Dov+0x3ac>)
 23eb3f2:	a80a      	add	r0, sp, #40	; 0x28
 23eb3f4:	f7f8 fde2 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb3f8:	4604      	mov	r4, r0
 23eb3fa:	f7fd facb 	bl	23e8994 <_ZNK11SystemClass13batteryChargeEv.isra.0>
 23eb3fe:	ee10 0a10 	vmov	r0, s0
 23eb402:	f7f7 f8bd 	bl	23e2580 <__aeabi_f2d>
 23eb406:	ec41 0b10 	vmov	d0, r0, r1
 23eb40a:	2101      	movs	r1, #1
 23eb40c:	4620      	mov	r0, r4
 23eb40e:	f00c ff09 	bl	23f8224 <_ZN5spark10JSONWriter5valueEdi>
  writer.name("csq").value(sig.getQuality(), 4);
  writer.name("imsi").value(imsi); // International Mobile Subscriber Identity
#endif

#if PLATFORM_ID == PLATFORM_MSOM
  if (MuonWifiEnabled) {
 23eb412:	4b34      	ldr	r3, [pc, #208]	; (23eb4e4 <_Z7INFO_Dov+0x3b0>)
    writer.name("nw").value("WIFI");
 23eb414:	4934      	ldr	r1, [pc, #208]	; (23eb4e8 <_Z7INFO_Dov+0x3b4>)
  if (MuonWifiEnabled) {
 23eb416:	781b      	ldrb	r3, [r3, #0]
    writer.name("nw").value("WIFI");
 23eb418:	a80a      	add	r0, sp, #40	; 0x28
  if (MuonWifiEnabled) {
 23eb41a:	2b00      	cmp	r3, #0
 23eb41c:	f000 847b 	beq.w	23ebd16 <_Z7INFO_Dov+0xbe2>
    writer.name("nw").value("WIFI");
 23eb420:	f7f8 fdcc 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb424:	4931      	ldr	r1, [pc, #196]	; (23eb4ec <_Z7INFO_Dov+0x3b8>)
 23eb426:	f7f8 fcff 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    WiFiSignal sig = WiFi.RSSI();
 23eb42a:	4931      	ldr	r1, [pc, #196]	; (23eb4f0 <_Z7INFO_Dov+0x3bc>)
 23eb42c:	a830      	add	r0, sp, #192	; 0xc0
 23eb42e:	f00e f82f 	bl	23f9490 <_ZN5spark9WiFiClass4RSSIEv>
    writer.name("wss").value(sig.getStrength(), 4);
 23eb432:	4930      	ldr	r1, [pc, #192]	; (23eb4f4 <_Z7INFO_Dov+0x3c0>)
 23eb434:	a80a      	add	r0, sp, #40	; 0x28
 23eb436:	f7f8 fdc1 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb43a:	4604      	mov	r4, r0
 23eb43c:	a830      	add	r0, sp, #192	; 0xc0
 23eb43e:	f00d ff95 	bl	23f936c <_ZNK10WiFiSignal11getStrengthEv>
 23eb442:	ee10 0a10 	vmov	r0, s0
 23eb446:	f7f7 f89b 	bl	23e2580 <__aeabi_f2d>
 23eb44a:	ec41 0b10 	vmov	d0, r0, r1
 23eb44e:	2104      	movs	r1, #4
 23eb450:	4620      	mov	r0, r4
 23eb452:	e051      	b.n	23eb4f8 <_Z7INFO_Dov+0x3c4>
 23eb454:	023fde4d 	.word	0x023fde4d
 23eb458:	1006a166 	.word	0x1006a166
 23eb45c:	1006f118 	.word	0x1006f118
 23eb460:	023ff9b4 	.word	0x023ff9b4
 23eb464:	023fde57 	.word	0x023fde57
 23eb468:	023fde5d 	.word	0x023fde5d
 23eb46c:	023fde63 	.word	0x023fde63
 23eb470:	023fde6b 	.word	0x023fde6b
 23eb474:	023ff73f 	.word	0x023ff73f
 23eb478:	023fde72 	.word	0x023fde72
 23eb47c:	023fcb78 	.word	0x023fcb78
 23eb480:	1006a277 	.word	0x1006a277
 23eb484:	023fe025 	.word	0x023fe025
 23eb488:	023fde77 	.word	0x023fde77
 23eb48c:	023fde7b 	.word	0x023fde7b
 23eb490:	023fd4cb 	.word	0x023fd4cb
 23eb494:	1006a168 	.word	0x1006a168
 23eb498:	023fde87 	.word	0x023fde87
 23eb49c:	023fe14e 	.word	0x023fe14e
 23eb4a0:	023fde8d 	.word	0x023fde8d
 23eb4a4:	1006a198 	.word	0x1006a198
 23eb4a8:	023fde91 	.word	0x023fde91
 23eb4ac:	023fde96 	.word	0x023fde96
 23eb4b0:	023fde9a 	.word	0x023fde9a
 23eb4b4:	1006a2b0 	.word	0x1006a2b0
 23eb4b8:	023fdea0 	.word	0x023fdea0
 23eb4bc:	023fdea5 	.word	0x023fdea5
 23eb4c0:	1006a298 	.word	0x1006a298
 23eb4c4:	1006a147 	.word	0x1006a147
 23eb4c8:	1006a2c4 	.word	0x1006a2c4
 23eb4cc:	023fdeaa 	.word	0x023fdeaa
 23eb4d0:	023fc884 	.word	0x023fc884
 23eb4d4:	023fdef2 	.word	0x023fdef2
 23eb4d8:	023fc89c 	.word	0x023fc89c
 23eb4dc:	023fdc0a 	.word	0x023fdc0a
 23eb4e0:	023fdc0e 	.word	0x023fdc0e
 23eb4e4:	1006a2bc 	.word	0x1006a2bc
 23eb4e8:	023fdeae 	.word	0x023fdeae
 23eb4ec:	023fe181 	.word	0x023fe181
 23eb4f0:	1007af98 	.word	0x1007af98
 23eb4f4:	023fdeb1 	.word	0x023fdeb1
 23eb4f8:	f00c fe94 	bl	23f8224 <_ZN5spark10JSONWriter5valueEdi>
    writer.name("wsq").value(sig.getQuality(), 4);
 23eb4fc:	49b3      	ldr	r1, [pc, #716]	; (23eb7cc <_Z7INFO_Dov+0x698>)
 23eb4fe:	a80a      	add	r0, sp, #40	; 0x28
 23eb500:	f7f8 fd5c 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb504:	4604      	mov	r4, r0
 23eb506:	a830      	add	r0, sp, #192	; 0xc0
 23eb508:	f00d ff60 	bl	23f93cc <_ZNK10WiFiSignal10getQualityEv>
 23eb50c:	ee10 0a10 	vmov	r0, s0
 23eb510:	f7f7 f836 	bl	23e2580 <__aeabi_f2d>
 23eb514:	ec41 0b10 	vmov	d0, r0, r1
 23eb518:	2104      	movs	r1, #4
 23eb51a:	4620      	mov	r0, r4
 23eb51c:	f00c fe82 	bl	23f8224 <_ZN5spark10JSONWriter5valueEdi>
 23eb520:	48ab      	ldr	r0, [pc, #684]	; (23eb7d0 <_Z7INFO_Dov+0x69c>)
 23eb522:	f7f8 fccb 	bl	23e3ebc <_ZN5spark9WiFiClass11wifi_configEv>
    byte mac[6];
    WiFi.macAddress(mac);
    sprintf (Buffer32Bytes, "%02x:%02x:%02x:%02x:%02x:%02x", mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 23eb526:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
 23eb52a:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 23eb52e:	f890 2057 	ldrb.w	r2, [r0, #87]	; 0x57
 23eb532:	9103      	str	r1, [sp, #12]
 23eb534:	f890 105b 	ldrb.w	r1, [r0, #91]	; 0x5b
 23eb538:	9102      	str	r1, [sp, #8]
 23eb53a:	f890 105a 	ldrb.w	r1, [r0, #90]	; 0x5a
 23eb53e:	9101      	str	r1, [sp, #4]
 23eb540:	f890 1059 	ldrb.w	r1, [r0, #89]	; 0x59
 23eb544:	48a3      	ldr	r0, [pc, #652]	; (23eb7d4 <_Z7INFO_Dov+0x6a0>)
 23eb546:	9100      	str	r1, [sp, #0]
 23eb548:	49a3      	ldr	r1, [pc, #652]	; (23eb7d8 <_Z7INFO_Dov+0x6a4>)
 23eb54a:	f00b fe25 	bl	23f7198 <sprintf>
    writer.name("mac").value(Buffer32Bytes);
 23eb54e:	49a3      	ldr	r1, [pc, #652]	; (23eb7dc <_Z7INFO_Dov+0x6a8>)
 23eb550:	a80a      	add	r0, sp, #40	; 0x28
 23eb552:	f7f8 fd33 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb556:	499f      	ldr	r1, [pc, #636]	; (23eb7d4 <_Z7INFO_Dov+0x6a0>)
 23eb558:	f7f8 fc66 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    writer.name("ip").value(WiFi.localIP().toString().c_str());
 23eb55c:	49a0      	ldr	r1, [pc, #640]	; (23eb7e0 <_Z7INFO_Dov+0x6ac>)
 23eb55e:	a80a      	add	r0, sp, #40	; 0x28
 23eb560:	f7f8 fd2c 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb564:	4604      	mov	r4, r0


#if !HAL_PLATFORM_WIFI_SCAN_ONLY

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 23eb566:	489a      	ldr	r0, [pc, #616]	; (23eb7d0 <_Z7INFO_Dov+0x69c>)
 23eb568:	f7f8 fca8 	bl	23e3ebc <_ZN5spark9WiFiClass11wifi_configEv>
 23eb56c:	1c81      	adds	r1, r0, #2
 23eb56e:	a81c      	add	r0, sp, #112	; 0x70
 23eb570:	f00c fd7a 	bl	23f8068 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
 23eb574:	a91c      	add	r1, sp, #112	; 0x70
 23eb576:	a806      	add	r0, sp, #24
 23eb578:	f00d fb58 	bl	23f8c2c <_ZN6StringC1ERK9Printable>
 23eb57c:	4620      	mov	r0, r4
 23eb57e:	9906      	ldr	r1, [sp, #24]
 23eb580:	f7f8 fc52 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
 23eb584:	a806      	add	r0, sp, #24
 23eb586:	f00d fabc 	bl	23f8b02 <_ZN6StringD1Ev>
    writer.name("mask").value(WiFi.subnetMask().toString().c_str());
 23eb58a:	4996      	ldr	r1, [pc, #600]	; (23eb7e4 <_Z7INFO_Dov+0x6b0>)
 23eb58c:	a80a      	add	r0, sp, #40	; 0x28
 23eb58e:	f7f8 fd15 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb592:	4604      	mov	r4, r0
    }

    IPAddress subnetMask() {
        return IPAddress(wifi_config()->nw.aucSubnetMask);
 23eb594:	488e      	ldr	r0, [pc, #568]	; (23eb7d0 <_Z7INFO_Dov+0x69c>)
 23eb596:	f7f8 fc91 	bl	23e3ebc <_ZN5spark9WiFiClass11wifi_configEv>
 23eb59a:	f100 0113 	add.w	r1, r0, #19
 23eb59e:	a81c      	add	r0, sp, #112	; 0x70
 23eb5a0:	f00c fd62 	bl	23f8068 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23eb5a4:	a91c      	add	r1, sp, #112	; 0x70
 23eb5a6:	a806      	add	r0, sp, #24
 23eb5a8:	f00d fb40 	bl	23f8c2c <_ZN6StringC1ERK9Printable>
 23eb5ac:	4620      	mov	r0, r4
 23eb5ae:	9906      	ldr	r1, [sp, #24]
 23eb5b0:	f7f8 fc3a 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
 23eb5b4:	a806      	add	r0, sp, #24
 23eb5b6:	f00d faa4 	bl	23f8b02 <_ZN6StringD1Ev>
    writer.name("gateway").value(WiFi.gatewayIP().toString().c_str());
 23eb5ba:	498b      	ldr	r1, [pc, #556]	; (23eb7e8 <_Z7INFO_Dov+0x6b4>)
 23eb5bc:	a80a      	add	r0, sp, #40	; 0x28
 23eb5be:	f7f8 fcfd 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb5c2:	4604      	mov	r4, r0
    }

    IPAddress gatewayIP() {
        return IPAddress(wifi_config()->nw.aucDefaultGateway);
 23eb5c4:	4882      	ldr	r0, [pc, #520]	; (23eb7d0 <_Z7INFO_Dov+0x69c>)
 23eb5c6:	f7f8 fc79 	bl	23e3ebc <_ZN5spark9WiFiClass11wifi_configEv>
 23eb5ca:	f100 0124 	add.w	r1, r0, #36	; 0x24
 23eb5ce:	a81c      	add	r0, sp, #112	; 0x70
 23eb5d0:	f00c fd4a 	bl	23f8068 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23eb5d4:	a91c      	add	r1, sp, #112	; 0x70
 23eb5d6:	a806      	add	r0, sp, #24
 23eb5d8:	f00d fb28 	bl	23f8c2c <_ZN6StringC1ERK9Printable>
 23eb5dc:	4620      	mov	r0, r4
 23eb5de:	9906      	ldr	r1, [sp, #24]
 23eb5e0:	f7f8 fc22 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
 23eb5e4:	a806      	add	r0, sp, #24
 23eb5e6:	f00d fa8c 	bl	23f8b02 <_ZN6StringD1Ev>
    writer.name("dns").value(WiFi.dnsServerIP().toString().c_str());
 23eb5ea:	4980      	ldr	r1, [pc, #512]	; (23eb7ec <_Z7INFO_Dov+0x6b8>)
 23eb5ec:	a80a      	add	r0, sp, #40	; 0x28
 23eb5ee:	f7f8 fce5 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb5f2:	4604      	mov	r4, r0
    }

    IPAddress dnsServerIP() {
    	return IPAddress(wifi_config()->nw.aucDNSServer);
 23eb5f4:	4876      	ldr	r0, [pc, #472]	; (23eb7d0 <_Z7INFO_Dov+0x69c>)
 23eb5f6:	f7f8 fc61 	bl	23e3ebc <_ZN5spark9WiFiClass11wifi_configEv>
 23eb5fa:	f100 0146 	add.w	r1, r0, #70	; 0x46
 23eb5fe:	a81c      	add	r0, sp, #112	; 0x70
 23eb600:	f00c fd32 	bl	23f8068 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23eb604:	a91c      	add	r1, sp, #112	; 0x70
 23eb606:	a806      	add	r0, sp, #24
 23eb608:	f00d fb10 	bl	23f8c2c <_ZN6StringC1ERK9Printable>
 23eb60c:	4620      	mov	r0, r4
 23eb60e:	9906      	ldr	r1, [sp, #24]
 23eb610:	f7f8 fc0a 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
 23eb614:	a806      	add	r0, sp, #24
 23eb616:	f00d fa74 	bl	23f8b02 <_ZN6StringD1Ev>
    writer.name("dhcps").value(WiFi.dhcpServerIP().toString().c_str());
 23eb61a:	4975      	ldr	r1, [pc, #468]	; (23eb7f0 <_Z7INFO_Dov+0x6bc>)
 23eb61c:	a80a      	add	r0, sp, #40	; 0x28
 23eb61e:	f7f8 fccd 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb622:	4604      	mov	r4, r0
    }

    IPAddress dhcpServerIP() {
    	return IPAddress(wifi_config()->nw.aucDHCPServer);
 23eb624:	486a      	ldr	r0, [pc, #424]	; (23eb7d0 <_Z7INFO_Dov+0x69c>)
 23eb626:	f7f8 fc49 	bl	23e3ebc <_ZN5spark9WiFiClass11wifi_configEv>
 23eb62a:	f100 0135 	add.w	r1, r0, #53	; 0x35
 23eb62e:	a81c      	add	r0, sp, #112	; 0x70
 23eb630:	f00c fd1a 	bl	23f8068 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23eb634:	a91c      	add	r1, sp, #112	; 0x70
 23eb636:	a806      	add	r0, sp, #24
 23eb638:	f00d faf8 	bl	23f8c2c <_ZN6StringC1ERK9Printable>
 23eb63c:	4620      	mov	r0, r4
 23eb63e:	9906      	ldr	r1, [sp, #24]
 23eb640:	f7f8 fbf2 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
 23eb644:	a806      	add	r0, sp, #24
 23eb646:	f00d fa5c 	bl	23f8b02 <_ZN6StringD1Ev>
    writer.name("ssid").value(WiFi.SSID());
 23eb64a:	496a      	ldr	r1, [pc, #424]	; (23eb7f4 <_Z7INFO_Dov+0x6c0>)
 23eb64c:	a80a      	add	r0, sp, #40	; 0x28
 23eb64e:	f7f8 fcb5 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb652:	4604      	mov	r4, r0
    		memcpy(bssid, wifi_config()->BSSID, 6);
    		return bssid;
    }

    const char *SSID() {
        return (const char *) wifi_config()->uaSSID;
 23eb654:	485e      	ldr	r0, [pc, #376]	; (23eb7d0 <_Z7INFO_Dov+0x69c>)
 23eb656:	f7f8 fc31 	bl	23e3ebc <_ZN5spark9WiFiClass11wifi_configEv>
 23eb65a:	f100 015d 	add.w	r1, r0, #93	; 0x5d
 23eb65e:	4620      	mov	r0, r4
 23eb660:	f7f8 fbe2 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    		memcpy(bssid, wifi_config()->BSSID, 6);
 23eb664:	485a      	ldr	r0, [pc, #360]	; (23eb7d0 <_Z7INFO_Dov+0x69c>)
 23eb666:	f7f8 fc29 	bl	23e3ebc <_ZN5spark9WiFiClass11wifi_configEv>
    WiFi.BSSID(mac);
    sprintf (Buffer32Bytes, "%02x:%02x:%02x:%02x:%02x:%02x", mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 23eb66a:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
 23eb66e:	f890 307f 	ldrb.w	r3, [r0, #127]	; 0x7f
 23eb672:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
 23eb676:	9103      	str	r1, [sp, #12]
 23eb678:	f890 1082 	ldrb.w	r1, [r0, #130]	; 0x82
 23eb67c:	9102      	str	r1, [sp, #8]
 23eb67e:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 23eb682:	9101      	str	r1, [sp, #4]
 23eb684:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
 23eb688:	4852      	ldr	r0, [pc, #328]	; (23eb7d4 <_Z7INFO_Dov+0x6a0>)
 23eb68a:	9100      	str	r1, [sp, #0]
 23eb68c:	4952      	ldr	r1, [pc, #328]	; (23eb7d8 <_Z7INFO_Dov+0x6a4>)
 23eb68e:	f00b fd83 	bl	23f7198 <sprintf>
    writer.name("bssid").value(Buffer32Bytes);
 23eb692:	4959      	ldr	r1, [pc, #356]	; (23eb7f8 <_Z7INFO_Dov+0x6c4>)
 23eb694:	a80a      	add	r0, sp, #40	; 0x28
 23eb696:	f7f8 fc91 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb69a:	494e      	ldr	r1, [pc, #312]	; (23eb7d4 <_Z7INFO_Dov+0x6a0>)
  else {
    writer.name("nw").value("CELL");
    CellularSignal sig = Cellular.RSSI();
    writer.name("css").value(sig.getStrength(), 4);
    writer.name("csq").value(sig.getQuality(), 4);
    writer.name("imsi").value(imsi); // International Mobile Subscriber Identity
 23eb69c:	f7f8 fbc4 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  }
#endif

#if PLATFORM_ID == PLATFORM_MSOM
  // Particle Muon on board temperature sensor 
  if (PMTS_exists) {
 23eb6a0:	4b56      	ldr	r3, [pc, #344]	; (23eb7fc <_Z7INFO_Dov+0x6c8>)
    writer.name("pmts").value(ptms_readtempc(), 2);
 23eb6a2:	4957      	ldr	r1, [pc, #348]	; (23eb800 <_Z7INFO_Dov+0x6cc>)
  if (PMTS_exists) {
 23eb6a4:	781b      	ldrb	r3, [r3, #0]
    writer.name("pmts").value(ptms_readtempc(), 2);
 23eb6a6:	a80a      	add	r0, sp, #40	; 0x28
  if (PMTS_exists) {
 23eb6a8:	2b00      	cmp	r3, #0
 23eb6aa:	f000 8367 	beq.w	23ebd7c <_Z7INFO_Dov+0xc48>
    writer.name("pmts").value(ptms_readtempc(), 2);
 23eb6ae:	f7f8 fc85 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb6b2:	4604      	mov	r4, r0
 23eb6b4:	f7fa fc94 	bl	23e5fe0 <_Z14ptms_readtempcv>
 23eb6b8:	ee10 0a10 	vmov	r0, s0
 23eb6bc:	f7f6 ff60 	bl	23e2580 <__aeabi_f2d>
 23eb6c0:	ec41 0b10 	vmov	d0, r0, r1
 23eb6c4:	2102      	movs	r1, #2
 23eb6c6:	4620      	mov	r0, r4
 23eb6c8:	f00c fdac 	bl	23f8224 <_ZN5spark10JSONWriter5valueEdi>
    writer.name("pmts").value("NF");
  }
#endif

  // How Pin A4 is Configured
  if (A4_State == A4_STATE_DISTANCE) {
 23eb6cc:	4b4d      	ldr	r3, [pc, #308]	; (23eb804 <_Z7INFO_Dov+0x6d0>)
 23eb6ce:	681b      	ldr	r3, [r3, #0]
 23eb6d0:	2b01      	cmp	r3, #1
 23eb6d2:	f040 835d 	bne.w	23ebd90 <_Z7INFO_Dov+0xc5c>
    if (dg_adjustment == 1.25) {
 23eb6d6:	4b4c      	ldr	r3, [pc, #304]	; (23eb808 <_Z7INFO_Dov+0x6d4>)
 23eb6d8:	eef7 7a04 	vmov.f32	s15, #116	; 0x3fa00000  1.250
 23eb6dc:	ed93 7a00 	vldr	s14, [r3]
 23eb6e0:	eeb4 7a67 	vcmp.f32	s14, s15
 23eb6e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      writer.name("a4").value("DIST 5M");
 23eb6e8:	4948      	ldr	r1, [pc, #288]	; (23eb80c <_Z7INFO_Dov+0x6d8>)
 23eb6ea:	a80a      	add	r0, sp, #40	; 0x28
    if (dg_adjustment == 1.25) {
 23eb6ec:	f040 834c 	bne.w	23ebd88 <_Z7INFO_Dov+0xc54>
      writer.name("a4").value("DIST 5M");
 23eb6f0:	f7f8 fc64 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb6f4:	4946      	ldr	r1, [pc, #280]	; (23eb810 <_Z7INFO_Dov+0x6dc>)
  }
  else if (A4_State == A4_STATE_RAW){
    writer.name("a4").value("RAW");
  }
  else {
    writer.name("a4").value("NS"); // Not Set
 23eb6f6:	f7f8 fb97 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  }

  if (A5_State == A5_STATE_RAW){
 23eb6fa:	4b46      	ldr	r3, [pc, #280]	; (23eb814 <_Z7INFO_Dov+0x6e0>)
    writer.name("a5").value("RAW");
 23eb6fc:	4946      	ldr	r1, [pc, #280]	; (23eb818 <_Z7INFO_Dov+0x6e4>)
  if (A5_State == A5_STATE_RAW){
 23eb6fe:	681b      	ldr	r3, [r3, #0]
    writer.name("a5").value("RAW");
 23eb700:	a80a      	add	r0, sp, #40	; 0x28
  if (A5_State == A5_STATE_RAW){
 23eb702:	2b01      	cmp	r3, #1
 23eb704:	f040 8356 	bne.w	23ebdb4 <_Z7INFO_Dov+0xc80>
    writer.name("a5").value("RAW");
 23eb708:	f7f8 fc58 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eb70c:	4943      	ldr	r1, [pc, #268]	; (23eb81c <_Z7INFO_Dov+0x6e8>)
  }
  else {
    writer.name("a5").value("NS"); // Not Set
 23eb70e:	f7f8 fb8b 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  }

  // Sensors
  if (BMX_1_exists) {
 23eb712:	4b43      	ldr	r3, [pc, #268]	; (23eb820 <_Z7INFO_Dov+0x6ec>)
 23eb714:	781b      	ldrb	r3, [r3, #0]
 23eb716:	2b00      	cmp	r3, #0
 23eb718:	f000 8350 	beq.w	23ebdbc <_Z7INFO_Dov+0xc88>
    sprintf (buf+strlen(buf), "%sBMX1(%s)", comma, bmxtype[BMX_1_type]);
 23eb71c:	a844      	add	r0, sp, #272	; 0x110
 23eb71e:	f7f7 fdc7 	bl	23e32b0 <strlen>
 23eb722:	4b40      	ldr	r3, [pc, #256]	; (23eb824 <_Z7INFO_Dov+0x6f0>)
 23eb724:	ac44      	add	r4, sp, #272	; 0x110
 23eb726:	781a      	ldrb	r2, [r3, #0]
 23eb728:	4b3f      	ldr	r3, [pc, #252]	; (23eb828 <_Z7INFO_Dov+0x6f4>)
 23eb72a:	4420      	add	r0, r4
 23eb72c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23eb730:	493e      	ldr	r1, [pc, #248]	; (23eb82c <_Z7INFO_Dov+0x6f8>)
 23eb732:	4a3f      	ldr	r2, [pc, #252]	; (23eb830 <_Z7INFO_Dov+0x6fc>)
 23eb734:	f00b fd30 	bl	23f7198 <sprintf>
    comma=",";
 23eb738:	4c3e      	ldr	r4, [pc, #248]	; (23eb834 <_Z7INFO_Dov+0x700>)
  }
  if (BMX_2_exists) {
 23eb73a:	4b3f      	ldr	r3, [pc, #252]	; (23eb838 <_Z7INFO_Dov+0x704>)
 23eb73c:	781b      	ldrb	r3, [r3, #0]
 23eb73e:	b173      	cbz	r3, 23eb75e <_Z7INFO_Dov+0x62a>
    sprintf (buf+strlen(buf), "%sBMX2(%s)", comma, bmxtype[BMX_2_type]);
 23eb740:	a844      	add	r0, sp, #272	; 0x110
 23eb742:	f7f7 fdb5 	bl	23e32b0 <strlen>
 23eb746:	4b3d      	ldr	r3, [pc, #244]	; (23eb83c <_Z7INFO_Dov+0x708>)
 23eb748:	493d      	ldr	r1, [pc, #244]	; (23eb840 <_Z7INFO_Dov+0x70c>)
 23eb74a:	781a      	ldrb	r2, [r3, #0]
 23eb74c:	4b36      	ldr	r3, [pc, #216]	; (23eb828 <_Z7INFO_Dov+0x6f4>)
 23eb74e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23eb752:	4622      	mov	r2, r4
 23eb754:	ac44      	add	r4, sp, #272	; 0x110
 23eb756:	4420      	add	r0, r4
 23eb758:	f00b fd1e 	bl	23f7198 <sprintf>
    comma=",";
 23eb75c:	4c35      	ldr	r4, [pc, #212]	; (23eb834 <_Z7INFO_Dov+0x700>)
  }
  if (MCP_1_exists) {
 23eb75e:	4b39      	ldr	r3, [pc, #228]	; (23eb844 <_Z7INFO_Dov+0x710>)
 23eb760:	781b      	ldrb	r3, [r3, #0]
 23eb762:	b14b      	cbz	r3, 23eb778 <_Z7INFO_Dov+0x644>
    sprintf (buf+strlen(buf), "%sMCP1", comma);
 23eb764:	a844      	add	r0, sp, #272	; 0x110
 23eb766:	f7f7 fda3 	bl	23e32b0 <strlen>
 23eb76a:	ab44      	add	r3, sp, #272	; 0x110
 23eb76c:	4622      	mov	r2, r4
 23eb76e:	4936      	ldr	r1, [pc, #216]	; (23eb848 <_Z7INFO_Dov+0x714>)
 23eb770:	4418      	add	r0, r3
 23eb772:	f00b fd11 	bl	23f7198 <sprintf>
    comma=",";
 23eb776:	4c2f      	ldr	r4, [pc, #188]	; (23eb834 <_Z7INFO_Dov+0x700>)
  }
  if (MCP_2_exists) {
 23eb778:	4b34      	ldr	r3, [pc, #208]	; (23eb84c <_Z7INFO_Dov+0x718>)
 23eb77a:	781b      	ldrb	r3, [r3, #0]
 23eb77c:	b14b      	cbz	r3, 23eb792 <_Z7INFO_Dov+0x65e>
    sprintf (buf+strlen(buf), "%sMCP2", comma);
 23eb77e:	a844      	add	r0, sp, #272	; 0x110
 23eb780:	f7f7 fd96 	bl	23e32b0 <strlen>
 23eb784:	ab44      	add	r3, sp, #272	; 0x110
 23eb786:	4622      	mov	r2, r4
 23eb788:	4931      	ldr	r1, [pc, #196]	; (23eb850 <_Z7INFO_Dov+0x71c>)
 23eb78a:	4418      	add	r0, r3
 23eb78c:	f00b fd04 	bl	23f7198 <sprintf>
    comma=",";
 23eb790:	4c28      	ldr	r4, [pc, #160]	; (23eb834 <_Z7INFO_Dov+0x700>)
  }
  if (MCP_3_exists) {
 23eb792:	4e30      	ldr	r6, [pc, #192]	; (23eb854 <_Z7INFO_Dov+0x720>)
 23eb794:	7833      	ldrb	r3, [r6, #0]
 23eb796:	b14b      	cbz	r3, 23eb7ac <_Z7INFO_Dov+0x678>
    sprintf (buf+strlen(buf), "%sMCP3/gt1", comma);
 23eb798:	a844      	add	r0, sp, #272	; 0x110
 23eb79a:	f7f7 fd89 	bl	23e32b0 <strlen>
 23eb79e:	ab44      	add	r3, sp, #272	; 0x110
 23eb7a0:	4622      	mov	r2, r4
 23eb7a2:	492d      	ldr	r1, [pc, #180]	; (23eb858 <_Z7INFO_Dov+0x724>)
 23eb7a4:	4418      	add	r0, r3
 23eb7a6:	f00b fcf7 	bl	23f7198 <sprintf>
    comma=",";
 23eb7aa:	4c22      	ldr	r4, [pc, #136]	; (23eb834 <_Z7INFO_Dov+0x700>)
  }
  if (MCP_4_exists) {
 23eb7ac:	4b2b      	ldr	r3, [pc, #172]	; (23eb85c <_Z7INFO_Dov+0x728>)
 23eb7ae:	781b      	ldrb	r3, [r3, #0]
 23eb7b0:	b14b      	cbz	r3, 23eb7c6 <_Z7INFO_Dov+0x692>
    sprintf (buf+strlen(buf), "%sMCP4/gt2", comma);
 23eb7b2:	a844      	add	r0, sp, #272	; 0x110
 23eb7b4:	f7f7 fd7c 	bl	23e32b0 <strlen>
 23eb7b8:	ab44      	add	r3, sp, #272	; 0x110
 23eb7ba:	4622      	mov	r2, r4
 23eb7bc:	4928      	ldr	r1, [pc, #160]	; (23eb860 <_Z7INFO_Dov+0x72c>)
 23eb7be:	4418      	add	r0, r3
 23eb7c0:	f00b fcea 	bl	23f7198 <sprintf>
    comma=",";
 23eb7c4:	4c1b      	ldr	r4, [pc, #108]	; (23eb834 <_Z7INFO_Dov+0x700>)
  }
  if (SHT_1_exists) {
 23eb7c6:	4b27      	ldr	r3, [pc, #156]	; (23eb864 <_Z7INFO_Dov+0x730>)
 23eb7c8:	781b      	ldrb	r3, [r3, #0]
 23eb7ca:	e04d      	b.n	23eb868 <_Z7INFO_Dov+0x734>
 23eb7cc:	023fdeb5 	.word	0x023fdeb5
 23eb7d0:	1007af98 	.word	0x1007af98
 23eb7d4:	1006a277 	.word	0x1006a277
 23eb7d8:	023fdeb9 	.word	0x023fdeb9
 23eb7dc:	023fded7 	.word	0x023fded7
 23eb7e0:	023fdedb 	.word	0x023fdedb
 23eb7e4:	023fdede 	.word	0x023fdede
 23eb7e8:	023fdee3 	.word	0x023fdee3
 23eb7ec:	023fdeeb 	.word	0x023fdeeb
 23eb7f0:	023fdeef 	.word	0x023fdeef
 23eb7f4:	023fdef6 	.word	0x023fdef6
 23eb7f8:	023fdef5 	.word	0x023fdef5
 23eb7fc:	1006a2be 	.word	0x1006a2be
 23eb800:	023fdd57 	.word	0x023fdd57
 23eb804:	1006a24c 	.word	0x1006a24c
 23eb808:	1006a190 	.word	0x1006a190
 23eb80c:	023fdf04 	.word	0x023fdf04
 23eb810:	023fdf07 	.word	0x023fdf07
 23eb814:	1006a250 	.word	0x1006a250
 23eb818:	023fdf1f 	.word	0x023fdf1f
 23eb81c:	023fd71f 	.word	0x023fd71f
 23eb820:	1006a272 	.word	0x1006a272
 23eb824:	1006a273 	.word	0x1006a273
 23eb828:	1006a16c 	.word	0x1006a16c
 23eb82c:	023fdf22 	.word	0x023fdf22
 23eb830:	023fe413 	.word	0x023fe413
 23eb834:	023fd3ac 	.word	0x023fd3ac
 23eb838:	1006a275 	.word	0x1006a275
 23eb83c:	1006a276 	.word	0x1006a276
 23eb840:	023fdf2d 	.word	0x023fdf2d
 23eb844:	1006a2b8 	.word	0x1006a2b8
 23eb848:	023fdf38 	.word	0x023fdf38
 23eb84c:	1006a2b9 	.word	0x1006a2b9
 23eb850:	023fdf3f 	.word	0x023fdf3f
 23eb854:	1006a2ba 	.word	0x1006a2ba
 23eb858:	023fdf46 	.word	0x023fdf46
 23eb85c:	1006a2bb 	.word	0x1006a2bb
 23eb860:	023fdf51 	.word	0x023fdf51
 23eb864:	1006a7c4 	.word	0x1006a7c4
 23eb868:	b14b      	cbz	r3, 23eb87e <_Z7INFO_Dov+0x74a>
    sprintf (buf+strlen(buf), "%sSHT1", comma);
 23eb86a:	a844      	add	r0, sp, #272	; 0x110
 23eb86c:	f7f7 fd20 	bl	23e32b0 <strlen>
 23eb870:	ab44      	add	r3, sp, #272	; 0x110
 23eb872:	4622      	mov	r2, r4
 23eb874:	499b      	ldr	r1, [pc, #620]	; (23ebae4 <_Z7INFO_Dov+0x9b0>)
 23eb876:	4418      	add	r0, r3
 23eb878:	f00b fc8e 	bl	23f7198 <sprintf>
    comma=",";
 23eb87c:	4c9a      	ldr	r4, [pc, #616]	; (23ebae8 <_Z7INFO_Dov+0x9b4>)
  }
  if (SHT_2_exists) {
 23eb87e:	4b9b      	ldr	r3, [pc, #620]	; (23ebaec <_Z7INFO_Dov+0x9b8>)
 23eb880:	781b      	ldrb	r3, [r3, #0]
 23eb882:	b14b      	cbz	r3, 23eb898 <_Z7INFO_Dov+0x764>
    sprintf (buf+strlen(buf), "%sSHT2", comma);
 23eb884:	a844      	add	r0, sp, #272	; 0x110
 23eb886:	f7f7 fd13 	bl	23e32b0 <strlen>
 23eb88a:	ab44      	add	r3, sp, #272	; 0x110
 23eb88c:	4622      	mov	r2, r4
 23eb88e:	4998      	ldr	r1, [pc, #608]	; (23ebaf0 <_Z7INFO_Dov+0x9bc>)
 23eb890:	4418      	add	r0, r3
 23eb892:	f00b fc81 	bl	23f7198 <sprintf>
    comma=",";
 23eb896:	4c94      	ldr	r4, [pc, #592]	; (23ebae8 <_Z7INFO_Dov+0x9b4>)
  }
  if (HDC_1_exists) {
 23eb898:	4b96      	ldr	r3, [pc, #600]	; (23ebaf4 <_Z7INFO_Dov+0x9c0>)
 23eb89a:	781b      	ldrb	r3, [r3, #0]
 23eb89c:	b14b      	cbz	r3, 23eb8b2 <_Z7INFO_Dov+0x77e>
    sprintf (buf+strlen(buf), "%sHDC1", comma);
 23eb89e:	a844      	add	r0, sp, #272	; 0x110
 23eb8a0:	f7f7 fd06 	bl	23e32b0 <strlen>
 23eb8a4:	ab44      	add	r3, sp, #272	; 0x110
 23eb8a6:	4622      	mov	r2, r4
 23eb8a8:	4993      	ldr	r1, [pc, #588]	; (23ebaf8 <_Z7INFO_Dov+0x9c4>)
 23eb8aa:	4418      	add	r0, r3
 23eb8ac:	f00b fc74 	bl	23f7198 <sprintf>
    comma=",";
 23eb8b0:	4c8d      	ldr	r4, [pc, #564]	; (23ebae8 <_Z7INFO_Dov+0x9b4>)
  }
  if (HDC_2_exists) {
 23eb8b2:	4b92      	ldr	r3, [pc, #584]	; (23ebafc <_Z7INFO_Dov+0x9c8>)
 23eb8b4:	781b      	ldrb	r3, [r3, #0]
 23eb8b6:	b14b      	cbz	r3, 23eb8cc <_Z7INFO_Dov+0x798>
    sprintf (buf+strlen(buf), "%sHDC2", comma);
 23eb8b8:	a844      	add	r0, sp, #272	; 0x110
 23eb8ba:	f7f7 fcf9 	bl	23e32b0 <strlen>
 23eb8be:	ab44      	add	r3, sp, #272	; 0x110
 23eb8c0:	4622      	mov	r2, r4
 23eb8c2:	498f      	ldr	r1, [pc, #572]	; (23ebb00 <_Z7INFO_Dov+0x9cc>)
 23eb8c4:	4418      	add	r0, r3
 23eb8c6:	f00b fc67 	bl	23f7198 <sprintf>
    comma=",";
 23eb8ca:	4c87      	ldr	r4, [pc, #540]	; (23ebae8 <_Z7INFO_Dov+0x9b4>)
  }
  if (LPS_1_exists) {
 23eb8cc:	4b8d      	ldr	r3, [pc, #564]	; (23ebb04 <_Z7INFO_Dov+0x9d0>)
 23eb8ce:	781b      	ldrb	r3, [r3, #0]
 23eb8d0:	b14b      	cbz	r3, 23eb8e6 <_Z7INFO_Dov+0x7b2>
    sprintf (buf+strlen(buf), "%sLPS1", comma);
 23eb8d2:	a844      	add	r0, sp, #272	; 0x110
 23eb8d4:	f7f7 fcec 	bl	23e32b0 <strlen>
 23eb8d8:	ab44      	add	r3, sp, #272	; 0x110
 23eb8da:	4622      	mov	r2, r4
 23eb8dc:	498a      	ldr	r1, [pc, #552]	; (23ebb08 <_Z7INFO_Dov+0x9d4>)
 23eb8de:	4418      	add	r0, r3
 23eb8e0:	f00b fc5a 	bl	23f7198 <sprintf>
    comma=",";
 23eb8e4:	4c80      	ldr	r4, [pc, #512]	; (23ebae8 <_Z7INFO_Dov+0x9b4>)
  }
  if (LPS_2_exists) {
 23eb8e6:	4b89      	ldr	r3, [pc, #548]	; (23ebb0c <_Z7INFO_Dov+0x9d8>)
 23eb8e8:	781b      	ldrb	r3, [r3, #0]
 23eb8ea:	b14b      	cbz	r3, 23eb900 <_Z7INFO_Dov+0x7cc>
    sprintf (buf+strlen(buf), "%sLPS2", comma);
 23eb8ec:	a844      	add	r0, sp, #272	; 0x110
 23eb8ee:	f7f7 fcdf 	bl	23e32b0 <strlen>
 23eb8f2:	ab44      	add	r3, sp, #272	; 0x110
 23eb8f4:	4622      	mov	r2, r4
 23eb8f6:	4986      	ldr	r1, [pc, #536]	; (23ebb10 <_Z7INFO_Dov+0x9dc>)
 23eb8f8:	4418      	add	r0, r3
 23eb8fa:	f00b fc4d 	bl	23f7198 <sprintf>
    comma=",";
 23eb8fe:	4c7a      	ldr	r4, [pc, #488]	; (23ebae8 <_Z7INFO_Dov+0x9b4>)
  }
  if (HIH8_exists) {
 23eb900:	4b84      	ldr	r3, [pc, #528]	; (23ebb14 <_Z7INFO_Dov+0x9e0>)
 23eb902:	781b      	ldrb	r3, [r3, #0]
 23eb904:	b14b      	cbz	r3, 23eb91a <_Z7INFO_Dov+0x7e6>
    sprintf (buf+strlen(buf), "%sHIH8", comma);
 23eb906:	a844      	add	r0, sp, #272	; 0x110
 23eb908:	f7f7 fcd2 	bl	23e32b0 <strlen>
 23eb90c:	ab44      	add	r3, sp, #272	; 0x110
 23eb90e:	4622      	mov	r2, r4
 23eb910:	4981      	ldr	r1, [pc, #516]	; (23ebb18 <_Z7INFO_Dov+0x9e4>)
 23eb912:	4418      	add	r0, r3
 23eb914:	f00b fc40 	bl	23f7198 <sprintf>
    comma=",";
 23eb918:	4c73      	ldr	r4, [pc, #460]	; (23ebae8 <_Z7INFO_Dov+0x9b4>)
  }
  if (SI1145_exists) {
 23eb91a:	4b80      	ldr	r3, [pc, #512]	; (23ebb1c <_Z7INFO_Dov+0x9e8>)
 23eb91c:	781b      	ldrb	r3, [r3, #0]
 23eb91e:	b14b      	cbz	r3, 23eb934 <_Z7INFO_Dov+0x800>
    sprintf (buf+strlen(buf), "%sSI", comma);
 23eb920:	a844      	add	r0, sp, #272	; 0x110
 23eb922:	f7f7 fcc5 	bl	23e32b0 <strlen>
 23eb926:	ab44      	add	r3, sp, #272	; 0x110
 23eb928:	4622      	mov	r2, r4
 23eb92a:	497d      	ldr	r1, [pc, #500]	; (23ebb20 <_Z7INFO_Dov+0x9ec>)
 23eb92c:	4418      	add	r0, r3
 23eb92e:	f00b fc33 	bl	23f7198 <sprintf>
    comma=",";
 23eb932:	4c6d      	ldr	r4, [pc, #436]	; (23ebae8 <_Z7INFO_Dov+0x9b4>)
  }
  if (VEML7700_exists) {
 23eb934:	4b7b      	ldr	r3, [pc, #492]	; (23ebb24 <_Z7INFO_Dov+0x9f0>)
 23eb936:	781b      	ldrb	r3, [r3, #0]
 23eb938:	b14b      	cbz	r3, 23eb94e <_Z7INFO_Dov+0x81a>
    sprintf (buf+strlen(buf), "%sVEML", comma);
 23eb93a:	a844      	add	r0, sp, #272	; 0x110
 23eb93c:	f7f7 fcb8 	bl	23e32b0 <strlen>
 23eb940:	ab44      	add	r3, sp, #272	; 0x110
 23eb942:	4622      	mov	r2, r4
 23eb944:	4978      	ldr	r1, [pc, #480]	; (23ebb28 <_Z7INFO_Dov+0x9f4>)
 23eb946:	4418      	add	r0, r3
 23eb948:	f00b fc26 	bl	23f7198 <sprintf>
    comma=",";
 23eb94c:	4c66      	ldr	r4, [pc, #408]	; (23ebae8 <_Z7INFO_Dov+0x9b4>)
  }
  if (BLX_exists) {
 23eb94e:	4b77      	ldr	r3, [pc, #476]	; (23ebb2c <_Z7INFO_Dov+0x9f8>)
 23eb950:	781b      	ldrb	r3, [r3, #0]
 23eb952:	b14b      	cbz	r3, 23eb968 <_Z7INFO_Dov+0x834>
    sprintf (buf+strlen(buf), "%sBLX", comma);
 23eb954:	a844      	add	r0, sp, #272	; 0x110
 23eb956:	f7f7 fcab 	bl	23e32b0 <strlen>
 23eb95a:	ab44      	add	r3, sp, #272	; 0x110
 23eb95c:	4622      	mov	r2, r4
 23eb95e:	4974      	ldr	r1, [pc, #464]	; (23ebb30 <_Z7INFO_Dov+0x9fc>)
 23eb960:	4418      	add	r0, r3
 23eb962:	f00b fc19 	bl	23f7198 <sprintf>
    comma=",";
 23eb966:	4c60      	ldr	r4, [pc, #384]	; (23ebae8 <_Z7INFO_Dov+0x9b4>)
  }
  if (AS5600_exists) {
 23eb968:	4b72      	ldr	r3, [pc, #456]	; (23ebb34 <_Z7INFO_Dov+0xa00>)
 23eb96a:	781b      	ldrb	r3, [r3, #0]
 23eb96c:	b14b      	cbz	r3, 23eb982 <_Z7INFO_Dov+0x84e>
    sprintf (buf+strlen(buf), "%sAS5600", comma);
 23eb96e:	a844      	add	r0, sp, #272	; 0x110
 23eb970:	f7f7 fc9e 	bl	23e32b0 <strlen>
 23eb974:	ab44      	add	r3, sp, #272	; 0x110
 23eb976:	4622      	mov	r2, r4
 23eb978:	496f      	ldr	r1, [pc, #444]	; (23ebb38 <_Z7INFO_Dov+0xa04>)
 23eb97a:	4418      	add	r0, r3
 23eb97c:	f00b fc0c 	bl	23f7198 <sprintf>
    comma=",";
 23eb980:	4c59      	ldr	r4, [pc, #356]	; (23ebae8 <_Z7INFO_Dov+0x9b4>)
  }
  if (TLW_exists) {
 23eb982:	4b6e      	ldr	r3, [pc, #440]	; (23ebb3c <_Z7INFO_Dov+0xa08>)
 23eb984:	781b      	ldrb	r3, [r3, #0]
 23eb986:	b14b      	cbz	r3, 23eb99c <_Z7INFO_Dov+0x868>
    sprintf (buf+strlen(buf), "%sTLW", comma);
 23eb988:	a844      	add	r0, sp, #272	; 0x110
 23eb98a:	f7f7 fc91 	bl	23e32b0 <strlen>
 23eb98e:	ab44      	add	r3, sp, #272	; 0x110
 23eb990:	4622      	mov	r2, r4
 23eb992:	496b      	ldr	r1, [pc, #428]	; (23ebb40 <_Z7INFO_Dov+0xa0c>)
 23eb994:	4418      	add	r0, r3
 23eb996:	f00b fbff 	bl	23f7198 <sprintf>
    comma=",";
 23eb99a:	4c53      	ldr	r4, [pc, #332]	; (23ebae8 <_Z7INFO_Dov+0x9b4>)
  }
  if (TSM_exists) {
 23eb99c:	4b69      	ldr	r3, [pc, #420]	; (23ebb44 <_Z7INFO_Dov+0xa10>)
 23eb99e:	781b      	ldrb	r3, [r3, #0]
 23eb9a0:	b14b      	cbz	r3, 23eb9b6 <_Z7INFO_Dov+0x882>
    sprintf (buf+strlen(buf), "%sTSM", comma);
 23eb9a2:	a844      	add	r0, sp, #272	; 0x110
 23eb9a4:	f7f7 fc84 	bl	23e32b0 <strlen>
 23eb9a8:	ab44      	add	r3, sp, #272	; 0x110
 23eb9aa:	4622      	mov	r2, r4
 23eb9ac:	4966      	ldr	r1, [pc, #408]	; (23ebb48 <_Z7INFO_Dov+0xa14>)
 23eb9ae:	4418      	add	r0, r3
 23eb9b0:	f00b fbf2 	bl	23f7198 <sprintf>
    comma=",";
 23eb9b4:	4c4c      	ldr	r4, [pc, #304]	; (23ebae8 <_Z7INFO_Dov+0x9b4>)
  }
  if (TMSM_exists) {
 23eb9b6:	4b65      	ldr	r3, [pc, #404]	; (23ebb4c <_Z7INFO_Dov+0xa18>)
 23eb9b8:	781b      	ldrb	r3, [r3, #0]
 23eb9ba:	b14b      	cbz	r3, 23eb9d0 <_Z7INFO_Dov+0x89c>
    sprintf (buf+strlen(buf), "%sTMSM", comma);
 23eb9bc:	a844      	add	r0, sp, #272	; 0x110
 23eb9be:	f7f7 fc77 	bl	23e32b0 <strlen>
 23eb9c2:	ab44      	add	r3, sp, #272	; 0x110
 23eb9c4:	4622      	mov	r2, r4
 23eb9c6:	4962      	ldr	r1, [pc, #392]	; (23ebb50 <_Z7INFO_Dov+0xa1c>)
 23eb9c8:	4418      	add	r0, r3
 23eb9ca:	f00b fbe5 	bl	23f7198 <sprintf>
    comma=",";
 23eb9ce:	4c46      	ldr	r4, [pc, #280]	; (23ebae8 <_Z7INFO_Dov+0x9b4>)
  }
  if (HI_exists) {
 23eb9d0:	4b60      	ldr	r3, [pc, #384]	; (23ebb54 <_Z7INFO_Dov+0xa20>)
 23eb9d2:	781b      	ldrb	r3, [r3, #0]
 23eb9d4:	b14b      	cbz	r3, 23eb9ea <_Z7INFO_Dov+0x8b6>
    sprintf (buf+strlen(buf), "%sHI", comma);
 23eb9d6:	a844      	add	r0, sp, #272	; 0x110
 23eb9d8:	f7f7 fc6a 	bl	23e32b0 <strlen>
 23eb9dc:	ab44      	add	r3, sp, #272	; 0x110
 23eb9de:	4622      	mov	r2, r4
 23eb9e0:	495d      	ldr	r1, [pc, #372]	; (23ebb58 <_Z7INFO_Dov+0xa24>)
 23eb9e2:	4418      	add	r0, r3
 23eb9e4:	f00b fbd8 	bl	23f7198 <sprintf>
    comma=",";
 23eb9e8:	4c3f      	ldr	r4, [pc, #252]	; (23ebae8 <_Z7INFO_Dov+0x9b4>)
  }
  if (WBT_exists) {
 23eb9ea:	4b5c      	ldr	r3, [pc, #368]	; (23ebb5c <_Z7INFO_Dov+0xa28>)
 23eb9ec:	781b      	ldrb	r3, [r3, #0]
 23eb9ee:	b14b      	cbz	r3, 23eba04 <_Z7INFO_Dov+0x8d0>
    sprintf (buf+strlen(buf), "%sWBT", comma);
 23eb9f0:	a844      	add	r0, sp, #272	; 0x110
 23eb9f2:	f7f7 fc5d 	bl	23e32b0 <strlen>
 23eb9f6:	ab44      	add	r3, sp, #272	; 0x110
 23eb9f8:	4622      	mov	r2, r4
 23eb9fa:	4959      	ldr	r1, [pc, #356]	; (23ebb60 <_Z7INFO_Dov+0xa2c>)
 23eb9fc:	4418      	add	r0, r3
 23eb9fe:	f00b fbcb 	bl	23f7198 <sprintf>
    comma=",";
 23eba02:	4c39      	ldr	r4, [pc, #228]	; (23ebae8 <_Z7INFO_Dov+0x9b4>)
  }
  if (WBGT_exists) {
 23eba04:	4b57      	ldr	r3, [pc, #348]	; (23ebb64 <_Z7INFO_Dov+0xa30>)
 23eba06:	781b      	ldrb	r3, [r3, #0]
 23eba08:	b16b      	cbz	r3, 23eba26 <_Z7INFO_Dov+0x8f2>
    if (MCP_3_exists) {
      sprintf (buf+strlen(buf), "%sWBGT W/GLOBE", comma);
 23eba0a:	a844      	add	r0, sp, #272	; 0x110
 23eba0c:	f7f7 fc50 	bl	23e32b0 <strlen>
 23eba10:	ab44      	add	r3, sp, #272	; 0x110
 23eba12:	4418      	add	r0, r3
    if (MCP_3_exists) {
 23eba14:	7833      	ldrb	r3, [r6, #0]
      sprintf (buf+strlen(buf), "%sWBGT W/GLOBE", comma);
 23eba16:	4622      	mov	r2, r4
    if (MCP_3_exists) {
 23eba18:	2b00      	cmp	r3, #0
 23eba1a:	f000 81d1 	beq.w	23ebdc0 <_Z7INFO_Dov+0xc8c>
      sprintf (buf+strlen(buf), "%sWBGT W/GLOBE", comma);
 23eba1e:	4952      	ldr	r1, [pc, #328]	; (23ebb68 <_Z7INFO_Dov+0xa34>)
    }
    else {
      sprintf (buf+strlen(buf), "%sWBGT WO/GLOBE", comma);
 23eba20:	f00b fbba 	bl	23f7198 <sprintf>
    }
    comma=",";
 23eba24:	4c30      	ldr	r4, [pc, #192]	; (23ebae8 <_Z7INFO_Dov+0x9b4>)
  }
  if (PM25AQI_exists) {
 23eba26:	4b51      	ldr	r3, [pc, #324]	; (23ebb6c <_Z7INFO_Dov+0xa38>)
 23eba28:	781b      	ldrb	r3, [r3, #0]
 23eba2a:	b14b      	cbz	r3, 23eba40 <_Z7INFO_Dov+0x90c>
    sprintf (buf+strlen(buf), "%sPM25AQ", comma);
 23eba2c:	a844      	add	r0, sp, #272	; 0x110
 23eba2e:	f7f7 fc3f 	bl	23e32b0 <strlen>
 23eba32:	ab44      	add	r3, sp, #272	; 0x110
 23eba34:	4622      	mov	r2, r4
 23eba36:	494e      	ldr	r1, [pc, #312]	; (23ebb70 <_Z7INFO_Dov+0xa3c>)
 23eba38:	4418      	add	r0, r3
 23eba3a:	f00b fbad 	bl	23f7198 <sprintf>
    comma=",";
 23eba3e:	4c2a      	ldr	r4, [pc, #168]	; (23ebae8 <_Z7INFO_Dov+0x9b4>)
  }

  GetPinName(RAINGAUGE1_IRQ_PIN, Buffer32Bytes);
 23eba40:	494c      	ldr	r1, [pc, #304]	; (23ebb74 <_Z7INFO_Dov+0xa40>)
 23eba42:	2010      	movs	r0, #16
 23eba44:	f7fc f98e 	bl	23e7d64 <_Z10GetPinNametPc>
  sprintf (buf+strlen(buf), "%sRG(%s)", comma, Buffer32Bytes);
 23eba48:	a844      	add	r0, sp, #272	; 0x110
 23eba4a:	f7f7 fc31 	bl	23e32b0 <strlen>
 23eba4e:	4622      	mov	r2, r4
 23eba50:	ac44      	add	r4, sp, #272	; 0x110
 23eba52:	4b48      	ldr	r3, [pc, #288]	; (23ebb74 <_Z7INFO_Dov+0xa40>)
 23eba54:	4948      	ldr	r1, [pc, #288]	; (23ebb78 <_Z7INFO_Dov+0xa44>)
 23eba56:	4420      	add	r0, r4
 23eba58:	f00b fb9e 	bl	23f7198 <sprintf>

  writer.name("sensors").value(buf);
 23eba5c:	4947      	ldr	r1, [pc, #284]	; (23ebb7c <_Z7INFO_Dov+0xa48>)
 23eba5e:	a80a      	add	r0, sp, #40	; 0x28
 23eba60:	f7f8 faac 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eba64:	4621      	mov	r1, r4
 23eba66:	f7f8 f9df 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  // LoRa
  if (LORA_exists) {
 23eba6a:	4b45      	ldr	r3, [pc, #276]	; (23ebb80 <_Z7INFO_Dov+0xa4c>)
 23eba6c:	781b      	ldrb	r3, [r3, #0]
 23eba6e:	2b00      	cmp	r3, #0
 23eba70:	f000 81a8 	beq.w	23ebdc4 <_Z7INFO_Dov+0xc90>
    sprintf (buf, "%d,%d,%dMHz", cf_lora_unitid, cf_lora_txpower, cf_lora_freq);  
 23eba74:	4b43      	ldr	r3, [pc, #268]	; (23ebb84 <_Z7INFO_Dov+0xa50>)
 23eba76:	4a44      	ldr	r2, [pc, #272]	; (23ebb88 <_Z7INFO_Dov+0xa54>)
 23eba78:	681b      	ldr	r3, [r3, #0]
 23eba7a:	4620      	mov	r0, r4
 23eba7c:	9300      	str	r3, [sp, #0]
 23eba7e:	4b43      	ldr	r3, [pc, #268]	; (23ebb8c <_Z7INFO_Dov+0xa58>)
 23eba80:	6812      	ldr	r2, [r2, #0]
 23eba82:	681b      	ldr	r3, [r3, #0]
 23eba84:	4942      	ldr	r1, [pc, #264]	; (23ebb90 <_Z7INFO_Dov+0xa5c>)
 23eba86:	f00b fb87 	bl	23f7198 <sprintf>
  }
  else {
    sprintf (buf, "NF");
  }
  writer.name("lora").value(buf);
 23eba8a:	4942      	ldr	r1, [pc, #264]	; (23ebb94 <_Z7INFO_Dov+0xa60>)

  // Oled Display
  if (oled_type) {
 23eba8c:	4c42      	ldr	r4, [pc, #264]	; (23ebb98 <_Z7INFO_Dov+0xa64>)
  writer.name("lora").value(buf);
 23eba8e:	a80a      	add	r0, sp, #40	; 0x28
 23eba90:	f7f8 fa94 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23eba94:	a944      	add	r1, sp, #272	; 0x110
 23eba96:	f7f8 f9c7 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  if (oled_type) {
 23eba9a:	6823      	ldr	r3, [r4, #0]
    writer.name("oled").value(OLED32 ? "32" : "64");
 23eba9c:	493f      	ldr	r1, [pc, #252]	; (23ebb9c <_Z7INFO_Dov+0xa68>)
 23eba9e:	a80a      	add	r0, sp, #40	; 0x28
  if (oled_type) {
 23ebaa0:	2b00      	cmp	r3, #0
 23ebaa2:	f000 8194 	beq.w	23ebdce <_Z7INFO_Dov+0xc9a>
    writer.name("oled").value(OLED32 ? "32" : "64");
 23ebaa6:	f7f8 fa89 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23ebaaa:	6821      	ldr	r1, [r4, #0]
 23ebaac:	4a3c      	ldr	r2, [pc, #240]	; (23ebba0 <_Z7INFO_Dov+0xa6c>)
 23ebaae:	4b3d      	ldr	r3, [pc, #244]	; (23ebba4 <_Z7INFO_Dov+0xa70>)
 23ebab0:	293c      	cmp	r1, #60	; 0x3c
 23ebab2:	bf0c      	ite	eq
 23ebab4:	4611      	moveq	r1, r2
 23ebab6:	4619      	movne	r1, r3
  else {
    writer.name("oled").value("NF");
  }

  // Serial Console Enable
  GetPinName(SCE_PIN, Buffer32Bytes);
 23ebab8:	4e3b      	ldr	r6, [pc, #236]	; (23ebba8 <_Z7INFO_Dov+0xa74>)
    writer.name("oled").value("NF");
 23ebaba:	f7f8 f9b5 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  GetPinName(SCE_PIN, Buffer32Bytes);
 23ebabe:	492d      	ldr	r1, [pc, #180]	; (23ebb74 <_Z7INFO_Dov+0xa40>)
 23ebac0:	8830      	ldrh	r0, [r6, #0]
 23ebac2:	f7fc f94f 	bl	23e7d64 <_Z10GetPinNametPc>
  sprintf (buf, "scepin(%s)", Buffer32Bytes);
 23ebac6:	4a2b      	ldr	r2, [pc, #172]	; (23ebb74 <_Z7INFO_Dov+0xa40>)
 23ebac8:	4938      	ldr	r1, [pc, #224]	; (23ebbac <_Z7INFO_Dov+0xa78>)
 23ebaca:	a844      	add	r0, sp, #272	; 0x110
 23ebacc:	f00b fb64 	bl	23f7198 <sprintf>
  writer.name(buf).value((digitalRead(SCE_PIN)) ? "DISABLED" : "ENABLED");
 23ebad0:	a944      	add	r1, sp, #272	; 0x110
 23ebad2:	a80a      	add	r0, sp, #40	; 0x28
 23ebad4:	f7f8 fa72 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23ebad8:	4604      	mov	r4, r0
 23ebada:	8830      	ldrh	r0, [r6, #0]
 23ebadc:	f00d fe48 	bl	23f9770 <digitalRead>
 23ebae0:	e066      	b.n	23ebbb0 <_Z7INFO_Dov+0xa7c>
 23ebae2:	bf00      	nop
 23ebae4:	023fdf5c 	.word	0x023fdf5c
 23ebae8:	023fd3ac 	.word	0x023fd3ac
 23ebaec:	1006a7c5 	.word	0x1006a7c5
 23ebaf0:	023fdf63 	.word	0x023fdf63
 23ebaf4:	1006a29c 	.word	0x1006a29c
 23ebaf8:	023fdf6a 	.word	0x023fdf6a
 23ebafc:	1006a29d 	.word	0x1006a29d
 23ebb00:	023fdf71 	.word	0x023fdf71
 23ebb04:	1006a2a2 	.word	0x1006a2a2
 23ebb08:	023fdf78 	.word	0x023fdf78
 23ebb0c:	1006a2a3 	.word	0x1006a2a3
 23ebb10:	023fdf7f 	.word	0x023fdf7f
 23ebb14:	1006a29e 	.word	0x1006a29e
 23ebb18:	023fdf86 	.word	0x023fdf86
 23ebb1c:	1006a7c6 	.word	0x1006a7c6
 23ebb20:	023fdf8d 	.word	0x023fdf8d
 23ebb24:	1006a7d8 	.word	0x1006a7d8
 23ebb28:	023fdf92 	.word	0x023fdf92
 23ebb2c:	1006a270 	.word	0x1006a270
 23ebb30:	023fdf99 	.word	0x023fdf99
 23ebb34:	1006a0e8 	.word	0x1006a0e8
 23ebb38:	023fdf9f 	.word	0x023fdf9f
 23ebb3c:	1006a7d4 	.word	0x1006a7d4
 23ebb40:	023fdfa8 	.word	0x023fdfa8
 23ebb44:	1006a7d6 	.word	0x1006a7d6
 23ebb48:	023fdfae 	.word	0x023fdfae
 23ebb4c:	1006a7d5 	.word	0x1006a7d5
 23ebb50:	023fdfb4 	.word	0x023fdfb4
 23ebb54:	1006a29f 	.word	0x1006a29f
 23ebb58:	023fdfbb 	.word	0x023fdfbb
 23ebb5c:	1006a7da 	.word	0x1006a7da
 23ebb60:	023fdfc0 	.word	0x023fdfc0
 23ebb64:	1006a7d9 	.word	0x1006a7d9
 23ebb68:	023fdfc6 	.word	0x023fdfc6
 23ebb6c:	1006a2bd 	.word	0x1006a2bd
 23ebb70:	023fdfe5 	.word	0x023fdfe5
 23ebb74:	1006a277 	.word	0x1006a277
 23ebb78:	023fdfee 	.word	0x023fdfee
 23ebb7c:	023fdff7 	.word	0x023fdff7
 23ebb80:	1006a2a1 	.word	0x1006a2a1
 23ebb84:	1006a180 	.word	0x1006a180
 23ebb88:	1006a188 	.word	0x1006a188
 23ebb8c:	1006a184 	.word	0x1006a184
 23ebb90:	023fdfff 	.word	0x023fdfff
 23ebb94:	023fe00b 	.word	0x023fe00b
 23ebb98:	1007aa10 	.word	0x1007aa10
 23ebb9c:	023fe010 	.word	0x023fe010
 23ebba0:	023fde2b 	.word	0x023fde2b
 23ebba4:	023fde2e 	.word	0x023fde2e
 23ebba8:	1006a0f0 	.word	0x1006a0f0
 23ebbac:	023fe015 	.word	0x023fe015
 23ebbb0:	4a8f      	ldr	r2, [pc, #572]	; (23ebdf0 <_Z7INFO_Dov+0xcbc>)
 23ebbb2:	4990      	ldr	r1, [pc, #576]	; (23ebdf4 <_Z7INFO_Dov+0xcc0>)
 23ebbb4:	2800      	cmp	r0, #0
 23ebbb6:	bf18      	it	ne
 23ebbb8:	4611      	movne	r1, r2
 23ebbba:	4620      	mov	r0, r4
 23ebbbc:	f7f8 f934 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  writer.name("sce").value((SerialConsoleEnabled) ? "TRUE" : "FALSE");
 23ebbc0:	498d      	ldr	r1, [pc, #564]	; (23ebdf8 <_Z7INFO_Dov+0xcc4>)
 23ebbc2:	a80a      	add	r0, sp, #40	; 0x28
 23ebbc4:	f7f8 f9fa 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23ebbc8:	4b8c      	ldr	r3, [pc, #560]	; (23ebdfc <_Z7INFO_Dov+0xcc8>)
 23ebbca:	4a8d      	ldr	r2, [pc, #564]	; (23ebe00 <_Z7INFO_Dov+0xccc>)
 23ebbcc:	7819      	ldrb	r1, [r3, #0]
 23ebbce:	4b8d      	ldr	r3, [pc, #564]	; (23ebe04 <_Z7INFO_Dov+0xcd0>)
 23ebbd0:	2900      	cmp	r1, #0
 23ebbd2:	bf14      	ite	ne
 23ebbd4:	4611      	movne	r1, r2
 23ebbd6:	4619      	moveq	r1, r3
 23ebbd8:	f7f8 f926 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    float verticalDop;              Point vertical dilution of precision
    float timeToFirstFix;           Time-to-first-fix in seconds
    unsigned int satsInUse;         Point satellites in use
*/

  LocationPoint point = {};
 23ebbdc:	2250      	movs	r2, #80	; 0x50
 23ebbde:	2100      	movs	r1, #0
 23ebbe0:	a81c      	add	r0, sp, #112	; 0x70
 23ebbe2:	f010 fc00 	bl	23fc3e6 <memset>

  HeartBeat(); // Reset WatchDog before we make the next long running call
 23ebbe6:	f7fc fe33 	bl	23e8850 <_Z9HeartBeatv>
  auto results = Location.getLocation(point, true); // True means wait for fix up to 90 seconds !!!
 23ebbea:	f7f8 f9f5 	bl	23e3fd8 <_ZN11SomLocation8instanceEv>
 23ebbee:	2201      	movs	r2, #1
 23ebbf0:	a91c      	add	r1, sp, #112	; 0x70
 23ebbf2:	f00a f9b5 	bl	23f5f60 <_ZN11SomLocation11getLocationER13LocationPointb>
  if (results == LocationResults::Fixed) {
 23ebbf6:	2805      	cmp	r0, #5
 23ebbf8:	d126      	bne.n	23ebc48 <_Z7INFO_Dov+0xb14>
    writer.name("lat").value(point.latitude, 6);
 23ebbfa:	4983      	ldr	r1, [pc, #524]	; (23ebe08 <_Z7INFO_Dov+0xcd4>)
 23ebbfc:	a80a      	add	r0, sp, #40	; 0x28
 23ebbfe:	f7f8 f9dd 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23ebc02:	ed9d 0b22 	vldr	d0, [sp, #136]	; 0x88
 23ebc06:	2106      	movs	r1, #6
 23ebc08:	f00c fb0c 	bl	23f8224 <_ZN5spark10JSONWriter5valueEdi>
    writer.name("lon").value(point.longitude, 6);
 23ebc0c:	497f      	ldr	r1, [pc, #508]	; (23ebe0c <_Z7INFO_Dov+0xcd8>)
 23ebc0e:	a80a      	add	r0, sp, #40	; 0x28
 23ebc10:	f7f8 f9d4 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23ebc14:	ed9d 0b24 	vldr	d0, [sp, #144]	; 0x90
 23ebc18:	2106      	movs	r1, #6
 23ebc1a:	f00c fb03 	bl	23f8224 <_ZN5spark10JSONWriter5valueEdi>
    writer.name("alt").value(point.altitude, 6);
 23ebc1e:	497c      	ldr	r1, [pc, #496]	; (23ebe10 <_Z7INFO_Dov+0xcdc>)
 23ebc20:	a80a      	add	r0, sp, #40	; 0x28
 23ebc22:	f7f8 f9cb 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23ebc26:	4604      	mov	r4, r0
 23ebc28:	9826      	ldr	r0, [sp, #152]	; 0x98
 23ebc2a:	f7f6 fca9 	bl	23e2580 <__aeabi_f2d>
 23ebc2e:	ec41 0b10 	vmov	d0, r0, r1
 23ebc32:	2106      	movs	r1, #6
 23ebc34:	4620      	mov	r0, r4
 23ebc36:	f00c faf5 	bl	23f8224 <_ZN5spark10JSONWriter5valueEdi>
    writer.name("sat").value(point.satsInUse);
 23ebc3a:	4976      	ldr	r1, [pc, #472]	; (23ebe14 <_Z7INFO_Dov+0xce0>)
 23ebc3c:	a80a      	add	r0, sp, #40	; 0x28
 23ebc3e:	f7f8 f9bd 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23ebc42:	992e      	ldr	r1, [sp, #184]	; 0xb8
 23ebc44:	f00c fab6 	bl	23f81b4 <_ZN5spark10JSONWriter5valueEj>
  }
#endif

  writer.endObject();
 23ebc48:	a80a      	add	r0, sp, #40	; 0x28
 23ebc4a:	f00c fa7e 	bl	23f814a <_ZN5spark10JSONWriter9endObjectEv>

  // Done profiling system

  // Update INFO.TXT file
  if (SD_exists) {
 23ebc4e:	4b72      	ldr	r3, [pc, #456]	; (23ebe18 <_Z7INFO_Dov+0xce4>)
 23ebc50:	781b      	ldrb	r3, [r3, #0]
 23ebc52:	b1c3      	cbz	r3, 23ebc86 <_Z7INFO_Dov+0xb52>
    File fp = SD.open(SD_INFO_FILE, FILE_WRITE | O_TRUNC); 
 23ebc54:	f244 6302 	movw	r3, #17922	; 0x4602
 23ebc58:	4a70      	ldr	r2, [pc, #448]	; (23ebe1c <_Z7INFO_Dov+0xce8>)
 23ebc5a:	4971      	ldr	r1, [pc, #452]	; (23ebe20 <_Z7INFO_Dov+0xcec>)
 23ebc5c:	a830      	add	r0, sp, #192	; 0xc0
 23ebc5e:	f008 ff4d 	bl	23f4afc <_ZN8FsVolume4openEPKci>
 23ebc62:	a834      	add	r0, sp, #208	; 0xd0
 23ebc64:	f7f8 fa43 	bl	23e40ee <_ZNK10FsBaseFile6isOpenEv>
 23ebc68:	4c6e      	ldr	r4, [pc, #440]	; (23ebe24 <_Z7INFO_Dov+0xcf0>)
    if (fp) {
 23ebc6a:	2800      	cmp	r0, #0
 23ebc6c:	f000 80b3 	beq.w	23ebdd6 <_Z7INFO_Dov+0xca2>
      fp.println(msgbuf);
 23ebc70:	496d      	ldr	r1, [pc, #436]	; (23ebe28 <_Z7INFO_Dov+0xcf4>)
 23ebc72:	a830      	add	r0, sp, #192	; 0xc0
 23ebc74:	f00c fda1 	bl	23f87ba <_ZN5Print7printlnEPKc>
      fp.close();
 23ebc78:	a834      	add	r0, sp, #208	; 0xd0
 23ebc7a:	f008 fe66 	bl	23f494a <_ZN10FsBaseFile5closeEv>
      SystemStatusBits &= ~SSB_SD;  // Turn Off Bit
 23ebc7e:	6823      	ldr	r3, [r4, #0]
 23ebc80:	f023 0302 	bic.w	r3, r3, #2
 23ebc84:	6023      	str	r3, [r4, #0]
      SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
      Output ("SD:Open(Info)ERR");
    }
  }

  if (Particle_Publish((char *) "INFO")) {
 23ebc86:	4869      	ldr	r0, [pc, #420]	; (23ebe2c <_Z7INFO_Dov+0xcf8>)
 23ebc88:	f7ff f9a4 	bl	23eafd4 <_Z16Particle_PublishPc>
 23ebc8c:	4604      	mov	r4, r0
 23ebc8e:	2800      	cmp	r0, #0
 23ebc90:	f000 80a9 	beq.w	23ebde6 <_Z7INFO_Dov+0xcb2>
    Serial_write (msgbuf);
 23ebc94:	4864      	ldr	r0, [pc, #400]	; (23ebe28 <_Z7INFO_Dov+0xcf4>)
 23ebc96:	f7f8 fc4d 	bl	23e4534 <_Z12Serial_writePKc>
    sprintf (Buffer32Bytes, "INFO->PUB OK[%d]", strlen(msgbuf)+1);
 23ebc9a:	4863      	ldr	r0, [pc, #396]	; (23ebe28 <_Z7INFO_Dov+0xcf4>)
 23ebc9c:	f7f7 fb08 	bl	23e32b0 <strlen>
 23ebca0:	4963      	ldr	r1, [pc, #396]	; (23ebe30 <_Z7INFO_Dov+0xcfc>)
 23ebca2:	1c42      	adds	r2, r0, #1
 23ebca4:	4863      	ldr	r0, [pc, #396]	; (23ebe34 <_Z7INFO_Dov+0xd00>)
 23ebca6:	f00b fa77 	bl	23f7198 <sprintf>
    Output(Buffer32Bytes);
    result = true;
  }
  else {
    sprintf (Buffer32Bytes, "INFO->PUB ERR");
    Output(Buffer32Bytes);
 23ebcaa:	4862      	ldr	r0, [pc, #392]	; (23ebe34 <_Z7INFO_Dov+0xd00>)
 23ebcac:	f7f8 fc6c 	bl	23e4588 <_Z6OutputPKc>
    result = false;
  }

  // Deal with how long this took. More than likely we will always need to do a refresh of wind
  time_t endTime = Time.now();
 23ebcb0:	f00d f9bf 	bl	23f9032 <_ZN9TimeClass3nowEv>
  unsigned long delta = (unsigned long)endTime-(unsigned long)ts;
  if (delta) { // More than a second
 23ebcb4:	1b42      	subs	r2, r0, r5
 23ebcb6:	d009      	beq.n	23ebccc <_Z7INFO_Dov+0xb98>
    sprintf(buf, "INFO:EXTM=%lu,WSRefreshSet", delta);
 23ebcb8:	495f      	ldr	r1, [pc, #380]	; (23ebe38 <_Z7INFO_Dov+0xd04>)
 23ebcba:	a844      	add	r0, sp, #272	; 0x110
 23ebcbc:	f00b fa6c 	bl	23f7198 <sprintf>
    Output (buf);
 23ebcc0:	a844      	add	r0, sp, #272	; 0x110
 23ebcc2:	f7f8 fc61 	bl	23e4588 <_Z6OutputPKc>
    ws_refresh = true;
 23ebcc6:	2201      	movs	r2, #1
 23ebcc8:	4b5c      	ldr	r3, [pc, #368]	; (23ebe3c <_Z7INFO_Dov+0xd08>)
 23ebcca:	701a      	strb	r2, [r3, #0]
  }

  return(result);
 23ebccc:	4620      	mov	r0, r4
 23ebcce:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 23ebcd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      writer.name("n2s").value(-1);
 23ebcd6:	a80a      	add	r0, sp, #40	; 0x28
 23ebcd8:	f7f8 f970 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23ebcdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 23ebce0:	f00c fa56 	bl	23f8190 <_ZN5spark10JSONWriter5valueEi>
    virtual ~Print() {}
 23ebce4:	f7ff bb56 	b.w	23eb394 <_Z7INFO_Dov+0x260>
    writer.name("n2s").value("NF");
 23ebce8:	4955      	ldr	r1, [pc, #340]	; (23ebe40 <_Z7INFO_Dov+0xd0c>)
 23ebcea:	a80a      	add	r0, sp, #40	; 0x28
 23ebcec:	f7f8 f966 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23ebcf0:	4954      	ldr	r1, [pc, #336]	; (23ebe44 <_Z7INFO_Dov+0xd10>)
 23ebcf2:	f7f8 f899 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
 23ebcf6:	f7ff bb4d 	b.w	23eb394 <_Z7INFO_Dov+0x260>
    writer.name("ps").value(sps);
 23ebcfa:	f7f8 f95f 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23ebcfe:	4621      	mov	r1, r4
 23ebd00:	f00c fa46 	bl	23f8190 <_ZN5spark10JSONWriter5valueEi>
 23ebd04:	f7ff bb5d 	b.w	23eb3c2 <_Z7INFO_Dov+0x28e>
    writer.name("bcs").value(sbs);
 23ebd08:	f7f8 f958 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23ebd0c:	4621      	mov	r1, r4
 23ebd0e:	f00c fa3f 	bl	23f8190 <_ZN5spark10JSONWriter5valueEi>
 23ebd12:	f7ff bb6d 	b.w	23eb3f0 <_Z7INFO_Dov+0x2bc>
    writer.name("nw").value("CELL");
 23ebd16:	f7f8 f951 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23ebd1a:	494b      	ldr	r1, [pc, #300]	; (23ebe48 <_Z7INFO_Dov+0xd14>)
 23ebd1c:	f7f8 f884 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    CellularSignal sig = Cellular.RSSI();
 23ebd20:	494a      	ldr	r1, [pc, #296]	; (23ebe4c <_Z7INFO_Dov+0xd18>)
 23ebd22:	a830      	add	r0, sp, #192	; 0xc0
 23ebd24:	f00b fb60 	bl	23f73e8 <_ZN5spark13CellularClass4RSSIEv>
    writer.name("css").value(sig.getStrength(), 4);
 23ebd28:	4949      	ldr	r1, [pc, #292]	; (23ebe50 <_Z7INFO_Dov+0xd1c>)
 23ebd2a:	a80a      	add	r0, sp, #40	; 0x28
 23ebd2c:	f7f8 f946 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23ebd30:	4604      	mov	r4, r0
 23ebd32:	a830      	add	r0, sp, #192	; 0xc0
 23ebd34:	f00b fbb6 	bl	23f74a4 <_ZNK14CellularSignal11getStrengthEv>
 23ebd38:	ee10 0a10 	vmov	r0, s0
 23ebd3c:	f7f6 fc20 	bl	23e2580 <__aeabi_f2d>
 23ebd40:	ec41 0b10 	vmov	d0, r0, r1
 23ebd44:	2104      	movs	r1, #4
 23ebd46:	4620      	mov	r0, r4
 23ebd48:	f00c fa6c 	bl	23f8224 <_ZN5spark10JSONWriter5valueEdi>
    writer.name("csq").value(sig.getQuality(), 4);
 23ebd4c:	4941      	ldr	r1, [pc, #260]	; (23ebe54 <_Z7INFO_Dov+0xd20>)
 23ebd4e:	a80a      	add	r0, sp, #40	; 0x28
 23ebd50:	f7f8 f934 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23ebd54:	4604      	mov	r4, r0
 23ebd56:	a830      	add	r0, sp, #192	; 0xc0
 23ebd58:	f00b fbd4 	bl	23f7504 <_ZNK14CellularSignal10getQualityEv>
 23ebd5c:	ee10 0a10 	vmov	r0, s0
 23ebd60:	f7f6 fc0e 	bl	23e2580 <__aeabi_f2d>
 23ebd64:	ec41 0b10 	vmov	d0, r0, r1
 23ebd68:	2104      	movs	r1, #4
 23ebd6a:	4620      	mov	r0, r4
 23ebd6c:	f00c fa5a 	bl	23f8224 <_ZN5spark10JSONWriter5valueEdi>
    writer.name("imsi").value(imsi); // International Mobile Subscriber Identity
 23ebd70:	4939      	ldr	r1, [pc, #228]	; (23ebe58 <_Z7INFO_Dov+0xd24>)
 23ebd72:	a80a      	add	r0, sp, #40	; 0x28
 23ebd74:	f7f8 f922 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23ebd78:	4938      	ldr	r1, [pc, #224]	; (23ebe5c <_Z7INFO_Dov+0xd28>)
 23ebd7a:	e48f      	b.n	23eb69c <_Z7INFO_Dov+0x568>
    writer.name("pmts").value("NF");
 23ebd7c:	f7f8 f91e 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23ebd80:	4930      	ldr	r1, [pc, #192]	; (23ebe44 <_Z7INFO_Dov+0xd10>)
 23ebd82:	f7f8 f851 	bl	23e3e28 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
 23ebd86:	e4a1      	b.n	23eb6cc <_Z7INFO_Dov+0x598>
      writer.name("a4").value("DIST 10M");
 23ebd88:	f7f8 f918 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23ebd8c:	4934      	ldr	r1, [pc, #208]	; (23ebe60 <_Z7INFO_Dov+0xd2c>)
 23ebd8e:	e4b2      	b.n	23eb6f6 <_Z7INFO_Dov+0x5c2>
  else if (A4_State == A4_STATE_RAIN){
 23ebd90:	2b02      	cmp	r3, #2
    writer.name("a4").value("RG2");
 23ebd92:	4934      	ldr	r1, [pc, #208]	; (23ebe64 <_Z7INFO_Dov+0xd30>)
 23ebd94:	a80a      	add	r0, sp, #40	; 0x28
  else if (A4_State == A4_STATE_RAIN){
 23ebd96:	d103      	bne.n	23ebda0 <_Z7INFO_Dov+0xc6c>
    writer.name("a4").value("RG2");
 23ebd98:	f7f8 f910 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23ebd9c:	4932      	ldr	r1, [pc, #200]	; (23ebe68 <_Z7INFO_Dov+0xd34>)
 23ebd9e:	e4aa      	b.n	23eb6f6 <_Z7INFO_Dov+0x5c2>
  else if (A4_State == A4_STATE_RAW){
 23ebda0:	2b03      	cmp	r3, #3
 23ebda2:	d103      	bne.n	23ebdac <_Z7INFO_Dov+0xc78>
    writer.name("a4").value("RAW");
 23ebda4:	f7f8 f90a 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23ebda8:	4930      	ldr	r1, [pc, #192]	; (23ebe6c <_Z7INFO_Dov+0xd38>)
 23ebdaa:	e4a4      	b.n	23eb6f6 <_Z7INFO_Dov+0x5c2>
    writer.name("a4").value("NS"); // Not Set
 23ebdac:	f7f8 f906 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23ebdb0:	492f      	ldr	r1, [pc, #188]	; (23ebe70 <_Z7INFO_Dov+0xd3c>)
 23ebdb2:	e4a0      	b.n	23eb6f6 <_Z7INFO_Dov+0x5c2>
    writer.name("a5").value("NS"); // Not Set
 23ebdb4:	f7f8 f902 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23ebdb8:	492d      	ldr	r1, [pc, #180]	; (23ebe70 <_Z7INFO_Dov+0xd3c>)
 23ebdba:	e4a8      	b.n	23eb70e <_Z7INFO_Dov+0x5da>
  const char *comma = "";
 23ebdbc:	4c2d      	ldr	r4, [pc, #180]	; (23ebe74 <_Z7INFO_Dov+0xd40>)
 23ebdbe:	e4bc      	b.n	23eb73a <_Z7INFO_Dov+0x606>
      sprintf (buf+strlen(buf), "%sWBGT WO/GLOBE", comma);
 23ebdc0:	492d      	ldr	r1, [pc, #180]	; (23ebe78 <_Z7INFO_Dov+0xd44>)
 23ebdc2:	e62d      	b.n	23eba20 <_Z7INFO_Dov+0x8ec>
    sprintf (buf, "NF");
 23ebdc4:	491f      	ldr	r1, [pc, #124]	; (23ebe44 <_Z7INFO_Dov+0xd10>)
 23ebdc6:	a844      	add	r0, sp, #272	; 0x110
 23ebdc8:	f010 fb82 	bl	23fc4d0 <strcpy>
 23ebdcc:	e65d      	b.n	23eba8a <_Z7INFO_Dov+0x956>
    writer.name("oled").value("NF");
 23ebdce:	f7f8 f8f5 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23ebdd2:	491c      	ldr	r1, [pc, #112]	; (23ebe44 <_Z7INFO_Dov+0xd10>)
 23ebdd4:	e670      	b.n	23ebab8 <_Z7INFO_Dov+0x984>
      SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23ebdd6:	6823      	ldr	r3, [r4, #0]
      Output ("SD:Open(Info)ERR");
 23ebdd8:	4828      	ldr	r0, [pc, #160]	; (23ebe7c <_Z7INFO_Dov+0xd48>)
      SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23ebdda:	f043 0302 	orr.w	r3, r3, #2
 23ebdde:	6023      	str	r3, [r4, #0]
      Output ("SD:Open(Info)ERR");
 23ebde0:	f7f8 fbd2 	bl	23e4588 <_Z6OutputPKc>
 23ebde4:	e74f      	b.n	23ebc86 <_Z7INFO_Dov+0xb52>
    sprintf (Buffer32Bytes, "INFO->PUB ERR");
 23ebde6:	4926      	ldr	r1, [pc, #152]	; (23ebe80 <_Z7INFO_Dov+0xd4c>)
 23ebde8:	4812      	ldr	r0, [pc, #72]	; (23ebe34 <_Z7INFO_Dov+0xd00>)
 23ebdea:	f010 fb71 	bl	23fc4d0 <strcpy>
 23ebdee:	e75c      	b.n	23ebcaa <_Z7INFO_Dov+0xb76>
 23ebdf0:	023fde31 	.word	0x023fde31
 23ebdf4:	023fde3a 	.word	0x023fde3a
 23ebdf8:	023fe020 	.word	0x023fe020
 23ebdfc:	1006a7c7 	.word	0x1006a7c7
 23ebe00:	023fde42 	.word	0x023fde42
 23ebe04:	023fde47 	.word	0x023fde47
 23ebe08:	023fe024 	.word	0x023fe024
 23ebe0c:	023fe028 	.word	0x023fe028
 23ebe10:	023fe02c 	.word	0x023fe02c
 23ebe14:	023ff68d 	.word	0x023ff68d
 23ebe18:	1006a770 	.word	0x1006a770
 23ebe1c:	1006a129 	.word	0x1006a129
 23ebe20:	1006a2c4 	.word	0x1006a2c4
 23ebe24:	1006a168 	.word	0x1006a168
 23ebe28:	1006f118 	.word	0x1006f118
 23ebe2c:	023fd53e 	.word	0x023fd53e
 23ebe30:	023fe041 	.word	0x023fe041
 23ebe34:	1006a277 	.word	0x1006a277
 23ebe38:	023fe060 	.word	0x023fe060
 23ebe3c:	1007ae48 	.word	0x1007ae48
 23ebe40:	023fdeaa 	.word	0x023fdeaa
 23ebe44:	023fcf61 	.word	0x023fcf61
 23ebe48:	023fe2c7 	.word	0x023fe2c7
 23ebe4c:	1007aeb4 	.word	0x1007aeb4
 23ebe50:	023fd4c7 	.word	0x023fd4c7
 23ebe54:	023fdefb 	.word	0x023fdefb
 23ebe58:	023fdeff 	.word	0x023fdeff
 23ebe5c:	1006ae8c 	.word	0x1006ae8c
 23ebe60:	023fdf0f 	.word	0x023fdf0f
 23ebe64:	023fdf04 	.word	0x023fdf04
 23ebe68:	023fdf18 	.word	0x023fdf18
 23ebe6c:	023fd71f 	.word	0x023fd71f
 23ebe70:	023fdf1c 	.word	0x023fdf1c
 23ebe74:	023fe413 	.word	0x023fe413
 23ebe78:	023fdfd5 	.word	0x023fdfd5
 23ebe7c:	023fe030 	.word	0x023fe030
 23ebe80:	023fe052 	.word	0x023fe052

023ebe84 <_Z14SD_N2S_Publishv>:
void SD_N2S_Publish() {
 23ebe84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ebe88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ebe8c:	2400      	movs	r4, #0
 23ebe8e:	b0a8      	sub	sp, #160	; 0xa0
 23ebe90:	e9cd 4301 	strd	r4, r3, [sp, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23ebe94:	4b7b      	ldr	r3, [pc, #492]	; (23ec084 <_Z14SD_N2S_Publishv+0x200>)
  FsBaseFile() = default;  // cppcheck-suppress uninitMemberVar
 23ebe96:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23ebe9a:	9300      	str	r3, [sp, #0]
  if (SD_exists && SD.exists(SD_n2s_file)) {
 23ebe9c:	4b7a      	ldr	r3, [pc, #488]	; (23ec088 <_Z14SD_N2S_Publishv+0x204>)
 23ebe9e:	781b      	ldrb	r3, [r3, #0]
 23ebea0:	b363      	cbz	r3, 23ebefc <_Z14SD_N2S_Publishv+0x78>
 23ebea2:	497a      	ldr	r1, [pc, #488]	; (23ec08c <_Z14SD_N2S_Publishv+0x208>)
 23ebea4:	487a      	ldr	r0, [pc, #488]	; (23ec090 <_Z14SD_N2S_Publishv+0x20c>)
 23ebea6:	f7f8 f8a9 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23ebeaa:	b338      	cbz	r0, 23ebefc <_Z14SD_N2S_Publishv+0x78>
    Output ("N2S:Publish");
 23ebeac:	4879      	ldr	r0, [pc, #484]	; (23ec094 <_Z14SD_N2S_Publishv+0x210>)
 23ebeae:	f7f8 fb6b 	bl	23e4588 <_Z6OutputPKc>
    fp = SD.open(SD_n2s_file, FILE_READ); // Open the file for reading, starting at the beginning of the file.
 23ebeb2:	4623      	mov	r3, r4
 23ebeb4:	4a75      	ldr	r2, [pc, #468]	; (23ec08c <_Z14SD_N2S_Publishv+0x208>)
 23ebeb6:	4976      	ldr	r1, [pc, #472]	; (23ec090 <_Z14SD_N2S_Publishv+0x20c>)
 23ebeb8:	a814      	add	r0, sp, #80	; 0x50
 23ebeba:	f008 fe1f 	bl	23f4afc <_ZN8FsVolume4openEPKci>
class Print
 23ebebe:	9b15      	ldr	r3, [sp, #84]	; 0x54
    move(&from);
 23ebec0:	a804      	add	r0, sp, #16
 23ebec2:	9301      	str	r3, [sp, #4]
class Stream : public Print
 23ebec4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 23ebec6:	a918      	add	r1, sp, #96	; 0x60
 23ebec8:	9302      	str	r3, [sp, #8]
 23ebeca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23ebecc:	9303      	str	r3, [sp, #12]
 23ebece:	f008 fd32 	bl	23f4936 <_ZN10FsBaseFile4moveEPS_>
  operator bool() const { return isOpen(); }
 23ebed2:	a804      	add	r0, sp, #16
 23ebed4:	f7f8 f90b 	bl	23e40ee <_ZNK10FsBaseFile6isOpenEv>
    if (fp) {
 23ebed8:	2800      	cmp	r0, #0
 23ebeda:	f000 80cf 	beq.w	23ec07c <_Z14SD_N2S_Publishv+0x1f8>
 23ebede:	a804      	add	r0, sp, #16
 23ebee0:	f7f8 f8f9 	bl	23e40d6 <_ZNK10FsBaseFile8fileSizeEv>
      if (fp.size()<=20) {
 23ebee4:	2815      	cmp	r0, #21
 23ebee6:	f171 0300 	sbcs.w	r3, r1, #0
 23ebeea:	d20a      	bcs.n	23ebf02 <_Z14SD_N2S_Publishv+0x7e>
        fp.close();
 23ebeec:	a804      	add	r0, sp, #16
 23ebeee:	f008 fd2c 	bl	23f494a <_ZN10FsBaseFile5closeEv>
        Output ("N2S:Empty");
 23ebef2:	4869      	ldr	r0, [pc, #420]	; (23ec098 <_Z14SD_N2S_Publishv+0x214>)
 23ebef4:	f7f8 fb48 	bl	23e4588 <_Z6OutputPKc>
            SD_N2S_Delete(); // Bad data in the file so delete the file           
 23ebef8:	f7fb fa88 	bl	23e740c <_Z13SD_N2S_Deletev>
}
 23ebefc:	b028      	add	sp, #160	; 0xa0
 23ebefe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (eeprom.n2sfp) {
 23ebf02:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 23ec0bc <_Z14SD_N2S_Publishv+0x238>
 23ebf06:	f8d8 2014 	ldr.w	r2, [r8, #20]
 23ebf0a:	b12a      	cbz	r2, 23ebf18 <_Z14SD_N2S_Publishv+0x94>
          if (fp.size()<=eeprom.n2sfp) {
 23ebf0c:	4282      	cmp	r2, r0
 23ebf0e:	eb74 0301 	sbcs.w	r3, r4, r1
 23ebf12:	d310      	bcc.n	23ebf36 <_Z14SD_N2S_Publishv+0xb2>
            eeprom.n2sfp = 0; 
 23ebf14:	f8c8 4014 	str.w	r4, [r8, #20]
 23ebf18:	2400      	movs	r4, #0
 23ebf1a:	4625      	mov	r5, r4
 23ebf1c:	4f5f      	ldr	r7, [pc, #380]	; (23ec09c <_Z14SD_N2S_Publishv+0x218>)
            if ( (System.millis() - lastOBS) > OBSERVATION_INTERVAL) {
 23ebf1e:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 23ec0c0 <_Z14SD_N2S_Publishv+0x23c>
              Output ("N2S:OBS Needed");
 23ebf22:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 23ec0c4 <_Z14SD_N2S_Publishv+0x240>
  int available() override { return BaseFile::available(); }
 23ebf26:	a804      	add	r0, sp, #16
 23ebf28:	f7f8 f8a8 	bl	23e407c <_ZNK10FsBaseFile9availableEv>
        while (fp.available() && (i < MAX_MSGBUF_SIZE )) {
 23ebf2c:	b980      	cbnz	r0, 23ebf50 <_Z14SD_N2S_Publishv+0xcc>
            fp.close();
 23ebf2e:	a804      	add	r0, sp, #16
 23ebf30:	f008 fd0b 	bl	23f494a <_ZN10FsBaseFile5closeEv>
 23ebf34:	e7e0      	b.n	23ebef8 <_Z14SD_N2S_Publishv+0x74>
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet((uint32_t)pos)
 23ebf36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23ebf38:	b123      	cbz	r3, 23ebf44 <_Z14SD_N2S_Publishv+0xc0>
 23ebf3a:	4611      	mov	r1, r2
 23ebf3c:	4618      	mov	r0, r3
 23ebf3e:	f005 fe96 	bl	23f1c6e <_ZN7FatFile7seekSetEm>
 23ebf42:	e7e9      	b.n	23ebf18 <_Z14SD_N2S_Publishv+0x94>
           : m_xFile ? m_xFile->seekSet(pos)
 23ebf44:	9813      	ldr	r0, [sp, #76]	; 0x4c
 23ebf46:	2800      	cmp	r0, #0
 23ebf48:	d0e6      	beq.n	23ebf18 <_Z14SD_N2S_Publishv+0x94>
 23ebf4a:	f007 fb36 	bl	23f35ba <_ZN9ExFatFile7seekSetEy>
 23ebf4e:	e7e3      	b.n	23ebf18 <_Z14SD_N2S_Publishv+0x94>
        while (fp.available() && (i < MAX_MSGBUF_SIZE )) {
 23ebf50:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 23ebf54:	da66      	bge.n	23ec024 <_Z14SD_N2S_Publishv+0x1a0>
  int read() override { return BaseFile::read(); }
 23ebf56:	a804      	add	r0, sp, #16
 23ebf58:	f7f8 f8d2 	bl	23e4100 <_ZN10FsBaseFile4readEv>
          ch = fp.read();
 23ebf5c:	b2c3      	uxtb	r3, r0
          if (ch == 0x0A) {  // newline
 23ebf5e:	2b0a      	cmp	r3, #10
 23ebf60:	d173      	bne.n	23ec04a <_Z14SD_N2S_Publishv+0x1c6>
            if (Particle_Publish(EventType)) {
 23ebf62:	4630      	mov	r0, r6
 23ebf64:	f7ff f836 	bl	23eafd4 <_Z16Particle_PublishPc>
 23ebf68:	b348      	cbz	r0, 23ebfbe <_Z14SD_N2S_Publishv+0x13a>
              sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
 23ebf6a:	4633      	mov	r3, r6
 23ebf6c:	4622      	mov	r2, r4
 23ebf6e:	494c      	ldr	r1, [pc, #304]	; (23ec0a0 <_Z14SD_N2S_Publishv+0x21c>)
 23ebf70:	484c      	ldr	r0, [pc, #304]	; (23ec0a4 <_Z14SD_N2S_Publishv+0x220>)
 23ebf72:	f00b f911 	bl	23f7198 <sprintf>
              Output (Buffer32Bytes);
 23ebf76:	484b      	ldr	r0, [pc, #300]	; (23ec0a4 <_Z14SD_N2S_Publishv+0x220>)
 23ebf78:	f7f8 fb06 	bl	23e4588 <_Z6OutputPKc>
              Serial_write (msgbuf);
 23ebf7c:	4638      	mov	r0, r7
              sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
 23ebf7e:	1c65      	adds	r5, r4, #1
              Serial_write (msgbuf);
 23ebf80:	f7f8 fad8 	bl	23e4534 <_Z12Serial_writePKc>
    return m_fFile   ? m_fFile->curPosition()
 23ebf84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23ebf86:	2b00      	cmp	r3, #0
 23ebf88:	d03e      	beq.n	23ec008 <_Z14SD_N2S_Publishv+0x184>
 23ebf8a:	695b      	ldr	r3, [r3, #20]
                eeprom.n2sfp = fp.position();
 23ebf8c:	f8c8 3014 	str.w	r3, [r8, #20]
            if ( (System.millis() - lastOBS) > OBSERVATION_INTERVAL) {
 23ebf90:	f7f7 ffa5 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23ebf94:	e9d9 2300 	ldrd	r2, r3, [r9]
 23ebf98:	1a80      	subs	r0, r0, r2
 23ebf9a:	eb61 0103 	sbc.w	r1, r1, r3
 23ebf9e:	f64e 2361 	movw	r3, #60001	; 0xea61
 23ebfa2:	4298      	cmp	r0, r3
 23ebfa4:	f171 0300 	sbcs.w	r3, r1, #0
                sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
 23ebfa8:	462c      	mov	r4, r5
            if ( (System.millis() - lastOBS) > OBSERVATION_INTERVAL) {
 23ebfaa:	d34b      	bcc.n	23ec044 <_Z14SD_N2S_Publishv+0x1c0>
              Output ("N2S:OBS Needed");
 23ebfac:	4650      	mov	r0, sl
 23ebfae:	f7f8 faeb 	bl	23e4588 <_Z6OutputPKc>
              if (OBS_Full()) {
 23ebfb2:	f7fb feb1 	bl	23e7d18 <_Z8OBS_Fullv>
 23ebfb6:	2800      	cmp	r0, #0
 23ebfb8:	d040      	beq.n	23ec03c <_Z14SD_N2S_Publishv+0x1b8>
                Output ("N2S:OBS FULL");
 23ebfba:	483b      	ldr	r0, [pc, #236]	; (23ec0a8 <_Z14SD_N2S_Publishv+0x224>)
 23ebfbc:	e030      	b.n	23ec020 <_Z14SD_N2S_Publishv+0x19c>
              sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:RETRY", sent, EventType);
 23ebfbe:	4633      	mov	r3, r6
 23ebfc0:	4622      	mov	r2, r4
 23ebfc2:	493a      	ldr	r1, [pc, #232]	; (23ec0ac <_Z14SD_N2S_Publishv+0x228>)
 23ebfc4:	4837      	ldr	r0, [pc, #220]	; (23ec0a4 <_Z14SD_N2S_Publishv+0x220>)
 23ebfc6:	f00b f8e7 	bl	23f7198 <sprintf>
              Output (Buffer32Bytes);
 23ebfca:	4836      	ldr	r0, [pc, #216]	; (23ec0a4 <_Z14SD_N2S_Publishv+0x220>)
 23ebfcc:	f7f8 fadc 	bl	23e4588 <_Z6OutputPKc>
              Serial_write (msgbuf);
 23ebfd0:	4638      	mov	r0, r7
 23ebfd2:	f7f8 faaf 	bl	23e4534 <_Z12Serial_writePKc>
                BackGroundWork(); 
 23ebfd6:	f7fe ffbd 	bl	23eaf54 <_Z14BackGroundWorkv>
 23ebfda:	f7fe ffbb 	bl	23eaf54 <_Z14BackGroundWorkv>
 23ebfde:	f7fe ffb9 	bl	23eaf54 <_Z14BackGroundWorkv>
 23ebfe2:	f7fe ffb7 	bl	23eaf54 <_Z14BackGroundWorkv>
 23ebfe6:	f7fe ffb5 	bl	23eaf54 <_Z14BackGroundWorkv>
              if (Particle_Publish(EventType)) {
 23ebfea:	4630      	mov	r0, r6
 23ebfec:	f7fe fff2 	bl	23eafd4 <_Z16Particle_PublishPc>
 23ebff0:	b178      	cbz	r0, 23ec012 <_Z14SD_N2S_Publishv+0x18e>
                sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
 23ebff2:	4633      	mov	r3, r6
 23ebff4:	4622      	mov	r2, r4
 23ebff6:	492a      	ldr	r1, [pc, #168]	; (23ec0a0 <_Z14SD_N2S_Publishv+0x21c>)
 23ebff8:	482a      	ldr	r0, [pc, #168]	; (23ec0a4 <_Z14SD_N2S_Publishv+0x220>)
 23ebffa:	f00b f8cd 	bl	23f7198 <sprintf>
                Output (Buffer32Bytes);
 23ebffe:	4829      	ldr	r0, [pc, #164]	; (23ec0a4 <_Z14SD_N2S_Publishv+0x220>)
                sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
 23ec000:	1c65      	adds	r5, r4, #1
                Output (Buffer32Bytes);
 23ec002:	f7f8 fac1 	bl	23e4588 <_Z6OutputPKc>
 23ec006:	e7bd      	b.n	23ebf84 <_Z14SD_N2S_Publishv+0x100>
 23ec008:	9b13      	ldr	r3, [sp, #76]	; 0x4c
           : m_xFile ? m_xFile->curPosition()
 23ec00a:	2b00      	cmp	r3, #0
 23ec00c:	d0be      	beq.n	23ebf8c <_Z14SD_N2S_Publishv+0x108>
  uint64_t curPosition() const { return m_curPosition; }
 23ec00e:	681b      	ldr	r3, [r3, #0]
 23ec010:	e7bc      	b.n	23ebf8c <_Z14SD_N2S_Publishv+0x108>
                sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:ERR", sent, EventType);
 23ec012:	4633      	mov	r3, r6
 23ec014:	4622      	mov	r2, r4
 23ec016:	4926      	ldr	r1, [pc, #152]	; (23ec0b0 <_Z14SD_N2S_Publishv+0x22c>)
 23ec018:	4822      	ldr	r0, [pc, #136]	; (23ec0a4 <_Z14SD_N2S_Publishv+0x220>)
 23ec01a:	f00b f8bd 	bl	23f7198 <sprintf>
                Output (Buffer32Bytes);
 23ec01e:	4821      	ldr	r0, [pc, #132]	; (23ec0a4 <_Z14SD_N2S_Publishv+0x220>)
                Output ("N2S:OBS FULL");
 23ec020:	f7f8 fab2 	bl	23e4588 <_Z6OutputPKc>
  int available() override { return BaseFile::available(); }
 23ec024:	a804      	add	r0, sp, #16
 23ec026:	f7f8 f829 	bl	23e407c <_ZNK10FsBaseFile9availableEv>
        if (fp.available() <= 20) {
 23ec02a:	2814      	cmp	r0, #20
 23ec02c:	f77f af7f 	ble.w	23ebf2e <_Z14SD_N2S_Publishv+0xaa>
          fp.close();
 23ec030:	a804      	add	r0, sp, #16
 23ec032:	f008 fc8a 	bl	23f494a <_ZN10FsBaseFile5closeEv>
          EEPROM_Update(); // Update file postion in the eeprom.
 23ec036:	f7fb f807 	bl	23e7048 <_Z13EEPROM_Updatev>
 23ec03a:	e75f      	b.n	23ebefc <_Z14SD_N2S_Publishv+0x78>
                I2C_Check_Sensors(); // Make sure Sensors are online
 23ec03c:	f7fa fc12 	bl	23e6864 <_Z17I2C_Check_Sensorsv>
                OBS_Do();                  
 23ec040:	f7fc fcc6 	bl	23e89d0 <_Z6OBS_Dov>
 23ec044:	2000      	movs	r0, #0
 23ec046:	4605      	mov	r5, r0
 23ec048:	e76d      	b.n	23ebf26 <_Z14SD_N2S_Publishv+0xa2>
          else if (ch == 0x0D) { // CR, LF follows and will trigger the line to be processed       
 23ec04a:	2b0d      	cmp	r3, #13
 23ec04c:	d108      	bne.n	23ec060 <_Z14SD_N2S_Publishv+0x1dc>
            msgbuf[i] = 0; // null terminate then wait for newline to be read to process OBS
 23ec04e:	2300      	movs	r3, #0
            msgbuf[i-3] = 0; // Set the comma to Null so we don't transmit to Particle what follows
 23ec050:	197a      	adds	r2, r7, r5
            EventType = &msgbuf[i-2];      
 23ec052:	1eae      	subs	r6, r5, #2
            msgbuf[i] = 0; // null terminate then wait for newline to be read to process OBS
 23ec054:	557b      	strb	r3, [r7, r5]
            msgbuf[i-3] = 0; // Set the comma to Null so we don't transmit to Particle what follows
 23ec056:	4628      	mov	r0, r5
 23ec058:	f802 3c03 	strb.w	r3, [r2, #-3]
            EventType = &msgbuf[i-2];      
 23ec05c:	443e      	add	r6, r7
 23ec05e:	e7f2      	b.n	23ec046 <_Z14SD_N2S_Publishv+0x1c2>
            msgbuf[i++] = ch;
 23ec060:	1c68      	adds	r0, r5, #1
          if (i >= MAX_MSGBUF_SIZE) {
 23ec062:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
            msgbuf[i++] = ch;
 23ec066:	557b      	strb	r3, [r7, r5]
          if (i >= MAX_MSGBUF_SIZE) {
 23ec068:	d1ed      	bne.n	23ec046 <_Z14SD_N2S_Publishv+0x1c2>
            sprintf (Buffer32Bytes, "N2S[%d]->BOR:ERR", sent);
 23ec06a:	4622      	mov	r2, r4
 23ec06c:	4911      	ldr	r1, [pc, #68]	; (23ec0b4 <_Z14SD_N2S_Publishv+0x230>)
 23ec06e:	480d      	ldr	r0, [pc, #52]	; (23ec0a4 <_Z14SD_N2S_Publishv+0x220>)
 23ec070:	f00b f892 	bl	23f7198 <sprintf>
            Output (Buffer32Bytes);
 23ec074:	480b      	ldr	r0, [pc, #44]	; (23ec0a4 <_Z14SD_N2S_Publishv+0x220>)
 23ec076:	f7f8 fa87 	bl	23e4588 <_Z6OutputPKc>
 23ec07a:	e758      	b.n	23ebf2e <_Z14SD_N2S_Publishv+0xaa>
        Output ("N2S->OPEN:ERR");
 23ec07c:	480e      	ldr	r0, [pc, #56]	; (23ec0b8 <_Z14SD_N2S_Publishv+0x234>)
 23ec07e:	f7f8 fa83 	bl	23e4588 <_Z6OutputPKc>
    virtual ~Print() {}
 23ec082:	e73b      	b.n	23ebefc <_Z14SD_N2S_Publishv+0x78>
 23ec084:	023fe4c0 	.word	0x023fe4c0
 23ec088:	1006a770 	.word	0x1006a770
 23ec08c:	1006a147 	.word	0x1006a147
 23ec090:	1006a2c4 	.word	0x1006a2c4
 23ec094:	023fe07b 	.word	0x023fe07b
 23ec098:	023fe087 	.word	0x023fe087
 23ec09c:	1006f118 	.word	0x1006f118
 23ec0a0:	023fe091 	.word	0x023fe091
 23ec0a4:	1006a277 	.word	0x1006a277
 23ec0a8:	023fe0da 	.word	0x023fe0da
 23ec0ac:	023fe0a3 	.word	0x023fe0a3
 23ec0b0:	023fe0b8 	.word	0x023fe0b8
 23ec0b4:	023fe0e7 	.word	0x023fe0e7
 23ec0b8:	023fe0f8 	.word	0x023fe0f8
 23ec0bc:	1006ae4c 	.word	0x1006ae4c
 23ec0c0:	1006aea0 	.word	0x1006aea0
 23ec0c4:	023fe0cb 	.word	0x023fe0cb

023ec0c8 <_Z14OBS_PublishAllv>:
 * 
 * If sending an observation takes 2 or more seconds ws_refresh is set and 
 *   the main program loop calls Wind_Distance_Air_Initialize() 
 * ======================================================================================================================
 */
void OBS_PublishAll() {
 23ec0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ec0cc:	b088      	sub	sp, #32
  bool OK2Send=true;
  int relay_type;

  // Update Cell Signal Strength On Last (Most Current) OBS Since Cell is turned to get reading
  int last = OBS_Last();
 23ec0ce:	f7fb fe11 	bl	23e7cf4 <_Z8OBS_Lastv>
  if (last >= 0) {
 23ec0d2:	1e04      	subs	r4, r0, #0
 23ec0d4:	4f30      	ldr	r7, [pc, #192]	; (23ec198 <_Z14OBS_PublishAllv+0xd0>)
 23ec0d6:	db0c      	blt.n	23ec0f2 <_Z14OBS_PublishAllv+0x2a>
#if PLATFORM_ID == PLATFORM_ARGON
    WiFiSignal sig = WiFi.RSSI();
#else
    CellularSignal sig = Cellular.RSSI();
 23ec0d8:	4668      	mov	r0, sp
 23ec0da:	4930      	ldr	r1, [pc, #192]	; (23ec19c <_Z14OBS_PublishAllv+0xd4>)
 23ec0dc:	f00b f984 	bl	23f73e8 <_ZN5spark13CellularClass4RSSIEv>
#endif
    obs[last].css = sig.getStrength();
 23ec0e0:	4668      	mov	r0, sp
 23ec0e2:	f00b f9df 	bl	23f74a4 <_ZNK14CellularSignal11getStrengthEv>
 23ec0e6:	f640 2098 	movw	r0, #2712	; 0xa98
 23ec0ea:	fb00 7004 	mla	r0, r0, r4, r7
 23ec0ee:	ed80 0a04 	vstr	s0, [r0, #16]
void OBS_PublishAll() {
 23ec0f2:	2500      	movs	r5, #0
 23ec0f4:	2401      	movs	r4, #1
  }

  // Go through the saved 1 minute observers and send them
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
    if (obs[i].inuse) {
 23ec0f6:	f640 2898 	movw	r8, #2712	; 0xa98
 23ec0fa:	fb08 f305 	mul.w	r3, r8, r5
 23ec0fe:	5cfb      	ldrb	r3, [r7, r3]
 23ec100:	b15b      	cbz	r3, 23ec11a <_Z14OBS_PublishAllv+0x52>
      if (OBS_FS_Publish(i) == false) {
 23ec102:	4628      	mov	r0, r5
 23ec104:	f7fe ffba 	bl	23eb07c <_Z14OBS_FS_Publishi>
 23ec108:	4606      	mov	r6, r0
 23ec10a:	b918      	cbnz	r0, 23ec114 <_Z14OBS_PublishAllv+0x4c>
        OBS_N2S_Add (i);
 23ec10c:	4628      	mov	r0, r5
 23ec10e:	f7fb fbf9 	bl	23e7904 <_Z11OBS_N2S_Addi>
        // Don't try to send any N2S because we just added to the file
        OK2Send = false;
 23ec112:	4634      	mov	r4, r6
      }
      OBS_Clear(i);
 23ec114:	4628      	mov	r0, r5
 23ec116:	f7fb fbe3 	bl	23e78e0 <_Z9OBS_Cleari>
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
 23ec11a:	3501      	adds	r5, #1
 23ec11c:	2d11      	cmp	r5, #17
 23ec11e:	d1ec      	bne.n	23ec0fa <_Z14OBS_PublishAllv+0x32>
    }
  }

  // Publish LoRa Relay Observations   
  if (LORA_exists) {
 23ec120:	4b1f      	ldr	r3, [pc, #124]	; (23ec1a0 <_Z14OBS_PublishAllv+0xd8>)
 23ec122:	781b      	ldrb	r3, [r3, #0]
 23ec124:	b373      	cbz	r3, 23ec184 <_Z14OBS_PublishAllv+0xbc>
      else {
        if (OK2Send && (relay_type>0)) {
         OK2Send = OBS_Relay_Publish(relay_type);  // Note a new LoRa RS msgs could be received as we are sending    
        }
        if (!OK2Send) {
          sprintf (msgbuf+strlen(msgbuf), ",%s", relay_msgtypes[relay_type]);  // Add Particle Event Type after JSON structure
 23ec126:	4e1f      	ldr	r6, [pc, #124]	; (23ec1a4 <_Z14OBS_PublishAllv+0xdc>)
 23ec128:	4f1f      	ldr	r7, [pc, #124]	; (23ec1a8 <_Z14OBS_PublishAllv+0xe0>)
 23ec12a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 23ec1b8 <_Z14OBS_PublishAllv+0xf0>
    while (lora_relay_need2log()) {
 23ec12e:	f7f8 fbbd 	bl	23e48ac <_Z19lora_relay_need2logv>
 23ec132:	b338      	cbz	r0, 23ec184 <_Z14OBS_PublishAllv+0xbc>
      relay_type = OBS_Relay_Build_JSON(); // This removed msg from relay structure and places it in msgbuf
 23ec134:	f7fb fd6c 	bl	23e7c10 <_Z20OBS_Relay_Build_JSONv>
      if (relay_type<=0) {
 23ec138:	1e05      	subs	r5, r0, #0
 23ec13a:	dc08      	bgt.n	23ec14e <_Z14OBS_PublishAllv+0x86>
        sprintf (Buffer32Bytes, "RELAY TYPE[%d] INVALID", relay_type);
 23ec13c:	462a      	mov	r2, r5
 23ec13e:	491b      	ldr	r1, [pc, #108]	; (23ec1ac <_Z14OBS_PublishAllv+0xe4>)
 23ec140:	481b      	ldr	r0, [pc, #108]	; (23ec1b0 <_Z14OBS_PublishAllv+0xe8>)
 23ec142:	f00b f829 	bl	23f7198 <sprintf>
        Output(Buffer32Bytes);
 23ec146:	481a      	ldr	r0, [pc, #104]	; (23ec1b0 <_Z14OBS_PublishAllv+0xe8>)
 23ec148:	f7f8 fa1e 	bl	23e4588 <_Z6OutputPKc>
 23ec14c:	e7ef      	b.n	23ec12e <_Z14OBS_PublishAllv+0x66>
        if (OK2Send && (relay_type>0)) {
 23ec14e:	b99c      	cbnz	r4, 23ec178 <_Z14OBS_PublishAllv+0xb0>
          sprintf (msgbuf+strlen(msgbuf), ",%s", relay_msgtypes[relay_type]);  // Add Particle Event Type after JSON structure
 23ec150:	4814      	ldr	r0, [pc, #80]	; (23ec1a4 <_Z14OBS_PublishAllv+0xdc>)
 23ec152:	f7f7 f8ad 	bl	23e32b0 <strlen>
 23ec156:	4641      	mov	r1, r8
 23ec158:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 23ec15c:	4430      	add	r0, r6
 23ec15e:	f00b f81b 	bl	23f7198 <sprintf>
          SD_NeedToSend_Add(msgbuf); // Save to N2F File
 23ec162:	4810      	ldr	r0, [pc, #64]	; (23ec1a4 <_Z14OBS_PublishAllv+0xdc>)
 23ec164:	f7fb f992 	bl	23e748c <_Z17SD_NeedToSend_AddPc>
          Output("RELAY->N2S");
 23ec168:	4812      	ldr	r0, [pc, #72]	; (23ec1b4 <_Z14OBS_PublishAllv+0xec>)
 23ec16a:	f7f8 fa0d 	bl	23e4588 <_Z6OutputPKc>
          Serial_write (msgbuf); 
 23ec16e:	480d      	ldr	r0, [pc, #52]	; (23ec1a4 <_Z14OBS_PublishAllv+0xdc>)
 23ec170:	f7f8 f9e0 	bl	23e4534 <_Z12Serial_writePKc>
 23ec174:	2400      	movs	r4, #0
 23ec176:	e7da      	b.n	23ec12e <_Z14OBS_PublishAllv+0x66>
         OK2Send = OBS_Relay_Publish(relay_type);  // Note a new LoRa RS msgs could be received as we are sending    
 23ec178:	f7fe ffac 	bl	23eb0d4 <_Z17OBS_Relay_Publishi>
        if (!OK2Send) {
 23ec17c:	4604      	mov	r4, r0
 23ec17e:	2800      	cmp	r0, #0
 23ec180:	d1d5      	bne.n	23ec12e <_Z14OBS_PublishAllv+0x66>
 23ec182:	e7e5      	b.n	23ec150 <_Z14OBS_PublishAllv+0x88>
      }
    }
  }

  // Check if we have any N2S only if we have not added to the file while trying to send OBS
  if (OK2Send) {
 23ec184:	b124      	cbz	r4, 23ec190 <_Z14OBS_PublishAllv+0xc8>
    SD_N2S_Publish(); 
  }
}
 23ec186:	b008      	add	sp, #32
 23ec188:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    SD_N2S_Publish(); 
 23ec18c:	f7ff be7a 	b.w	23ebe84 <_Z14SD_N2S_Publishv>
}
 23ec190:	b008      	add	sp, #32
 23ec192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23ec196:	bf00      	nop
 23ec198:	1006f540 	.word	0x1006f540
 23ec19c:	1007aeb4 	.word	0x1007aeb4
 23ec1a0:	1006a2a1 	.word	0x1006a2a1
 23ec1a4:	1006f118 	.word	0x1006f118
 23ec1a8:	1006a1a0 	.word	0x1006a1a0
 23ec1ac:	023fde14 	.word	0x023fde14
 23ec1b0:	1006a277 	.word	0x1006a277
 23ec1b4:	023fe106 	.word	0x023fe106
 23ec1b8:	023fd382 	.word	0x023fd382

023ec1bc <_Z18network_initializev>:
void network_initialize() {
 23ec1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    Stream() {_timeout=1000;}
 23ec1c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ec1c4:	2400      	movs	r4, #0
 23ec1c6:	b0c8      	sub	sp, #288	; 0x120
 23ec1c8:	e9cd 4315 	strd	r4, r3, [sp, #84]	; 0x54
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23ec1cc:	4b9b      	ldr	r3, [pc, #620]	; (23ec43c <_Z18network_initializev+0x280>)
  FsBaseFile() = default;  // cppcheck-suppress uninitMemberVar
 23ec1ce:	e9cd 4426 	strd	r4, r4, [sp, #152]	; 0x98
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23ec1d2:	9314      	str	r3, [sp, #80]	; 0x50
  if (SD_exists) {
 23ec1d4:	4b9a      	ldr	r3, [pc, #616]	; (23ec440 <_Z18network_initializev+0x284>)
 23ec1d6:	781b      	ldrb	r3, [r3, #0]
 23ec1d8:	2b00      	cmp	r3, #0
 23ec1da:	f000 812b 	beq.w	23ec434 <_Z18network_initializev+0x278>
    if (SD.exists(SD_wifi_file)) {
 23ec1de:	4999      	ldr	r1, [pc, #612]	; (23ec444 <_Z18network_initializev+0x288>)
 23ec1e0:	4899      	ldr	r0, [pc, #612]	; (23ec448 <_Z18network_initializev+0x28c>)
 23ec1e2:	f7f7 ff0b 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23ec1e6:	2800      	cmp	r0, #0
 23ec1e8:	f000 8122 	beq.w	23ec430 <_Z18network_initializev+0x274>
      fp = SD.open(SD_wifi_file, FILE_READ); // Open the file for reading, starting at the beginning of the file.
 23ec1ec:	ad28      	add	r5, sp, #160	; 0xa0
 23ec1ee:	4623      	mov	r3, r4
 23ec1f0:	4628      	mov	r0, r5
 23ec1f2:	4a94      	ldr	r2, [pc, #592]	; (23ec444 <_Z18network_initializev+0x288>)
 23ec1f4:	4994      	ldr	r1, [pc, #592]	; (23ec448 <_Z18network_initializev+0x28c>)
 23ec1f6:	f008 fc81 	bl	23f4afc <_ZN8FsVolume4openEPKci>
class Print
 23ec1fa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    move(&from);
 23ec1fc:	a818      	add	r0, sp, #96	; 0x60
 23ec1fe:	9315      	str	r3, [sp, #84]	; 0x54
class Stream : public Print
 23ec200:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 23ec202:	a92c      	add	r1, sp, #176	; 0xb0
 23ec204:	9316      	str	r3, [sp, #88]	; 0x58
 23ec206:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 23ec208:	9317      	str	r3, [sp, #92]	; 0x5c
 23ec20a:	f008 fb94 	bl	23f4936 <_ZN10FsBaseFile4moveEPS_>
  operator bool() const { return isOpen(); }
 23ec20e:	a818      	add	r0, sp, #96	; 0x60
 23ec210:	f7f7 ff6d 	bl	23e40ee <_ZNK10FsBaseFile6isOpenEv>
      if (fp) {
 23ec214:	2800      	cmp	r0, #0
 23ec216:	f000 8101 	beq.w	23ec41c <_Z18network_initializev+0x260>
  PosType size() { return BaseFile::fileSize(); }
 23ec21a:	a818      	add	r0, sp, #96	; 0x60
 23ec21c:	f7f7 ff5b 	bl	23e40d6 <_ZNK10FsBaseFile8fileSizeEv>
        if (fp.size()<=7 || fp.size()>127) {
 23ec220:	3808      	subs	r0, #8
 23ec222:	f161 0100 	sbc.w	r1, r1, #0
 23ec226:	2878      	cmp	r0, #120	; 0x78
 23ec228:	f171 0300 	sbcs.w	r3, r1, #0
 23ec22c:	d306      	bcc.n	23ec23c <_Z18network_initializev+0x80>
          fp.close();
 23ec22e:	a818      	add	r0, sp, #96	; 0x60
 23ec230:	f008 fb8b 	bl	23f494a <_ZN10FsBaseFile5closeEv>
          Output ("WIFI:Invalid SZ");
 23ec234:	4885      	ldr	r0, [pc, #532]	; (23ec44c <_Z18network_initializev+0x290>)
    Output ("WIFI:NOSD USING CELLULAR");
 23ec236:	f7f8 f9a7 	bl	23e4588 <_Z6OutputPKc>
 23ec23a:	e0b7      	b.n	23ec3ac <_Z18network_initializev+0x1f0>
          Output ("WIFI:Open");
 23ec23c:	4884      	ldr	r0, [pc, #528]	; (23ec450 <_Z18network_initializev+0x294>)
 23ec23e:	f7f8 f9a3 	bl	23e4588 <_Z6OutputPKc>
 23ec242:	462e      	mov	r6, r5
  int available() override { return BaseFile::available(); }
 23ec244:	a818      	add	r0, sp, #96	; 0x60
 23ec246:	f7f7 ff19 	bl	23e407c <_ZNK10FsBaseFile9availableEv>
          while (fp.available() && (i < 127 )) {
 23ec24a:	b168      	cbz	r0, 23ec268 <_Z18network_initializev+0xac>
 23ec24c:	2c7f      	cmp	r4, #127	; 0x7f
 23ec24e:	d00b      	beq.n	23ec268 <_Z18network_initializev+0xac>
  int read() override { return BaseFile::read(); }
 23ec250:	a818      	add	r0, sp, #96	; 0x60
 23ec252:	f7f7 ff55 	bl	23e4100 <_ZN10FsBaseFile4readEv>
            ch = fp.read();
 23ec256:	b2c0      	uxtb	r0, r0
            if ((ch == 0x0A) || (ch == 0x0D) ) {  // newline or linefeed
 23ec258:	280a      	cmp	r0, #10
 23ec25a:	d005      	beq.n	23ec268 <_Z18network_initializev+0xac>
 23ec25c:	280d      	cmp	r0, #13
 23ec25e:	d003      	beq.n	23ec268 <_Z18network_initializev+0xac>
              buf[i++] = ch;
 23ec260:	3401      	adds	r4, #1
 23ec262:	f806 0b01 	strb.w	r0, [r6], #1
          while (fp.available() && (i < 127 )) {
 23ec266:	e7ed      	b.n	23ec244 <_Z18network_initializev+0x88>
          fp.close();
 23ec268:	a818      	add	r0, sp, #96	; 0x60
 23ec26a:	f008 fb6e 	bl	23f494a <_ZN10FsBaseFile5closeEv>
          buf[i] = (char) NULL;
 23ec26e:	ab48      	add	r3, sp, #288	; 0x120
 23ec270:	441c      	add	r4, r3
 23ec272:	2300      	movs	r3, #0
          id = strtok_r(p, ",", &p);
 23ec274:	4628      	mov	r0, r5
 23ec276:	466a      	mov	r2, sp
 23ec278:	4976      	ldr	r1, [pc, #472]	; (23ec454 <_Z18network_initializev+0x298>)
          buf[i] = (char) NULL;
 23ec27a:	f804 3c80 	strb.w	r3, [r4, #-128]
          p = &buf[0];
 23ec27e:	9500      	str	r5, [sp, #0]
          id = strtok_r(p, ",", &p);
 23ec280:	f010 f9af 	bl	23fc5e2 <strtok_r>
          if (id == NULL) {
 23ec284:	4605      	mov	r5, r0
 23ec286:	b908      	cbnz	r0, 23ec28c <_Z18network_initializev+0xd0>
            Output("WIFI:ID=Null Err");
 23ec288:	4873      	ldr	r0, [pc, #460]	; (23ec458 <_Z18network_initializev+0x29c>)
 23ec28a:	e7d4      	b.n	23ec236 <_Z18network_initializev+0x7a>
          else if (strcmp (id, "MUON") != 0) { 
 23ec28c:	4973      	ldr	r1, [pc, #460]	; (23ec45c <_Z18network_initializev+0x2a0>)
 23ec28e:	f7f7 f805 	bl	23e329c <strcmp>
 23ec292:	4604      	mov	r4, r0
 23ec294:	b130      	cbz	r0, 23ec2a4 <_Z18network_initializev+0xe8>
            sprintf (msgbuf, "WIFI:ID[%s] Err", id);          
 23ec296:	462a      	mov	r2, r5
 23ec298:	4971      	ldr	r1, [pc, #452]	; (23ec460 <_Z18network_initializev+0x2a4>)
 23ec29a:	4872      	ldr	r0, [pc, #456]	; (23ec464 <_Z18network_initializev+0x2a8>)
 23ec29c:	f00a ff7c 	bl	23f7198 <sprintf>
            Output(msgbuf);
 23ec2a0:	4870      	ldr	r0, [pc, #448]	; (23ec464 <_Z18network_initializev+0x2a8>)
 23ec2a2:	e7c8      	b.n	23ec236 <_Z18network_initializev+0x7a>
            ssid = strtok_r(p, ",", &p);
 23ec2a4:	466a      	mov	r2, sp
 23ec2a6:	496b      	ldr	r1, [pc, #428]	; (23ec454 <_Z18network_initializev+0x298>)
 23ec2a8:	9800      	ldr	r0, [sp, #0]
 23ec2aa:	f010 f99a 	bl	23fc5e2 <strtok_r>
            pw  = strtok_r(p, ",", &p);
 23ec2ae:	466a      	mov	r2, sp
            ssid = strtok_r(p, ",", &p);
 23ec2b0:	4606      	mov	r6, r0
            pw  = strtok_r(p, ",", &p);
 23ec2b2:	4968      	ldr	r1, [pc, #416]	; (23ec454 <_Z18network_initializev+0x298>)
 23ec2b4:	6810      	ldr	r0, [r2, #0]
 23ec2b6:	f010 f994 	bl	23fc5e2 <strtok_r>
 23ec2ba:	4605      	mov	r5, r0
            if (ssid == NULL) {
 23ec2bc:	b90e      	cbnz	r6, 23ec2c2 <_Z18network_initializev+0x106>
              Output("WIFI:SSID=Null Err");
 23ec2be:	486a      	ldr	r0, [pc, #424]	; (23ec468 <_Z18network_initializev+0x2ac>)
 23ec2c0:	e7b9      	b.n	23ec236 <_Z18network_initializev+0x7a>
            else if (pw == NULL) {
 23ec2c2:	b908      	cbnz	r0, 23ec2c8 <_Z18network_initializev+0x10c>
              Output("WIFI:PW=Null Err");
 23ec2c4:	4869      	ldr	r0, [pc, #420]	; (23ec46c <_Z18network_initializev+0x2b0>)
 23ec2c6:	e7b6      	b.n	23ec236 <_Z18network_initializev+0x7a>
              Output("NETWORK:SET WIFI");
 23ec2c8:	4869      	ldr	r0, [pc, #420]	; (23ec470 <_Z18network_initializev+0x2b4>)
 23ec2ca:	f7f8 f95d 	bl	23e4588 <_Z6OutputPKc>
              MuonWifiEnabled = true;
 23ec2ce:	2201      	movs	r2, #1
 23ec2d0:	4b68      	ldr	r3, [pc, #416]	; (23ec474 <_Z18network_initializev+0x2b8>)
              sprintf (msgbuf, "WIFI:SSID[%s]", ssid);
 23ec2d2:	4969      	ldr	r1, [pc, #420]	; (23ec478 <_Z18network_initializev+0x2bc>)
              MuonWifiEnabled = true;
 23ec2d4:	701a      	strb	r2, [r3, #0]
              sprintf (msgbuf, "WIFI:SSID[%s]", ssid);
 23ec2d6:	4863      	ldr	r0, [pc, #396]	; (23ec464 <_Z18network_initializev+0x2a8>)
 23ec2d8:	4632      	mov	r2, r6
 23ec2da:	f00a ff5d 	bl	23f7198 <sprintf>
              Output(msgbuf);
 23ec2de:	4861      	ldr	r0, [pc, #388]	; (23ec464 <_Z18network_initializev+0x2a8>)
 23ec2e0:	f7f8 f952 	bl	23e4588 <_Z6OutputPKc>
              sprintf (msgbuf, "WIFI:PW[%s]", pw);
 23ec2e4:	462a      	mov	r2, r5
 23ec2e6:	4965      	ldr	r1, [pc, #404]	; (23ec47c <_Z18network_initializev+0x2c0>)
 23ec2e8:	485e      	ldr	r0, [pc, #376]	; (23ec464 <_Z18network_initializev+0x2a8>)
 23ec2ea:	f00a ff55 	bl	23f7198 <sprintf>
              Output(msgbuf);
 23ec2ee:	485d      	ldr	r0, [pc, #372]	; (23ec464 <_Z18network_initializev+0x2a8>)
 23ec2f0:	f7f8 f94a 	bl	23e4588 <_Z6OutputPKc>
              Output("WIFI:Particle Cloud Disconnect");  // We should no be connected, but do anyway
 23ec2f4:	4862      	ldr	r0, [pc, #392]	; (23ec480 <_Z18network_initializev+0x2c4>)
 23ec2f6:	f7f8 f947 	bl	23e4588 <_Z6OutputPKc>
              Particle.disconnect();
 23ec2fa:	a801      	add	r0, sp, #4
        bool clearSession, bool reconnect) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession),
        reconnect_(reconnect) {
 23ec2fc:	e9cd 4401 	strd	r4, r4, [sp, #4]
        bool clearSession, bool reconnect) :
 23ec300:	f8ad 400c 	strh.w	r4, [sp, #12]
        reconnect_(reconnect) {
 23ec304:	f88d 400e 	strb.w	r4, [sp, #14]
 23ec308:	f00b faad 	bl	23f7866 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
              Output("WIFI:Turning Off Cellular");
 23ec30c:	485d      	ldr	r0, [pc, #372]	; (23ec484 <_Z18network_initializev+0x2c8>)
 23ec30e:	f7f8 f93b 	bl	23e4588 <_Z6OutputPKc>
              Cellular.off();    // Turn off cellular modem
 23ec312:	485d      	ldr	r0, [pc, #372]	; (23ec488 <_Z18network_initializev+0x2cc>)
 23ec314:	f7f7 fddd 	bl	23e3ed2 <_ZN5spark13CellularClass3offEv>
              waitUntil(Cellular.isOff);  // Optional: wait for cellular modem to power down
 23ec318:	4c5b      	ldr	r4, [pc, #364]	; (23ec488 <_Z18network_initializev+0x2cc>)
 23ec31a:	4620      	mov	r0, r4
 23ec31c:	f00c f870 	bl	23f8400 <_ZN5spark12NetworkClass5isOffEv>
        while (_while() && !_condition()) {
 23ec320:	b910      	cbnz	r0, 23ec328 <_Z18network_initializev+0x16c>
            spark_process();
 23ec322:	f00a fd95 	bl	23f6e50 <spark_process>
        while (_while() && !_condition()) {
 23ec326:	e7f8      	b.n	23ec31a <_Z18network_initializev+0x15e>
 23ec328:	4857      	ldr	r0, [pc, #348]	; (23ec488 <_Z18network_initializev+0x2cc>)
 23ec32a:	f00c f869 	bl	23f8400 <_ZN5spark12NetworkClass5isOffEv>
              Output("WIFI:Turning On Wifi");
 23ec32e:	4857      	ldr	r0, [pc, #348]	; (23ec48c <_Z18network_initializev+0x2d0>)
 23ec330:	f7f8 f92a 	bl	23e4588 <_Z6OutputPKc>
        network_on(*this, 0, 0, NULL);
 23ec334:	2300      	movs	r3, #0
    virtual bool listening();
    virtual NetworkClass& prefer(bool prefer = true);
    virtual bool isPreferred();

    operator network_interface_t() const {
        return iface_;
 23ec336:	4c56      	ldr	r4, [pc, #344]	; (23ec490 <_Z18network_initializev+0x2d4>)
 23ec338:	461a      	mov	r2, r3
 23ec33a:	4619      	mov	r1, r3
 23ec33c:	6860      	ldr	r0, [r4, #4]
 23ec33e:	f00a fe59 	bl	23f6ff4 <network_on>
    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
 23ec342:	2300      	movs	r3, #0
 23ec344:	6860      	ldr	r0, [r4, #4]
 23ec346:	461a      	mov	r2, r3
 23ec348:	4619      	mov	r1, r3
 23ec34a:	f00a fe99 	bl	23f7080 <network_clear_credentials>
              if (WiFi.clearCredentials()) {
 23ec34e:	2800      	cmp	r0, #0
 23ec350:	d060      	beq.n	23ec414 <_Z18network_initializev+0x258>
                Output("WIFI:Cleared Wifi Creds");
 23ec352:	4850      	ldr	r0, [pc, #320]	; (23ec494 <_Z18network_initializev+0x2d8>)
                Output("WIFI:Clear Wifi Creds Err");
 23ec354:	f7f8 f918 	bl	23e4588 <_Z6OutputPKc>
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
 23ec358:	4630      	mov	r0, r6
 23ec35a:	f7f6 ffa9 	bl	23e32b0 <strlen>
 23ec35e:	4680      	mov	r8, r0
 23ec360:	4628      	mov	r0, r5
 23ec362:	f7f6 ffa5 	bl	23e32b0 <strlen>
        memset(&creds, 0, sizeof(creds));
 23ec366:	2238      	movs	r2, #56	; 0x38
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
 23ec368:	4607      	mov	r7, r0
        memset(&creds, 0, sizeof(creds));
 23ec36a:	2100      	movs	r1, #0
 23ec36c:	a806      	add	r0, sp, #24
 23ec36e:	f010 f83a 	bl	23fc3e6 <memset>
        creds.size = sizeof(creds);
 23ec372:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
 23ec374:	e9cd 3601 	strd	r3, r6, [sp, #4]
        creds.security = WLanSecurityType(security);
 23ec378:	2303      	movs	r3, #3
 23ec37a:	f88d 3018 	strb.w	r3, [sp, #24]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
 23ec37e:	2300      	movs	r3, #0
 23ec380:	6860      	ldr	r0, [r4, #4]
 23ec382:	4619      	mov	r1, r3
 23ec384:	aa01      	add	r2, sp, #4
        creds.password = password;
 23ec386:	e9cd 8503 	strd	r8, r5, [sp, #12]
        creds.password_len = passwordLen;
 23ec38a:	9705      	str	r7, [sp, #20]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
 23ec38c:	f00a fe6a 	bl	23f7064 <network_set_credentials>
              if (WiFi.setCredentials(ssid, pw)) {
 23ec390:	2800      	cmp	r0, #0
 23ec392:	d141      	bne.n	23ec418 <_Z18network_initializev+0x25c>
                Output("WIFI:Credentials Set");
 23ec394:	4840      	ldr	r0, [pc, #256]	; (23ec498 <_Z18network_initializev+0x2dc>)
                Output("WIFI:Credentials Set Err");
 23ec396:	f7f8 f8f7 	bl	23e4588 <_Z6OutputPKc>
              Output("WIFI:Connect Called");
 23ec39a:	4840      	ldr	r0, [pc, #256]	; (23ec49c <_Z18network_initializev+0x2e0>)
 23ec39c:	f7f8 f8f4 	bl	23e4588 <_Z6OutputPKc>
        network_connect(*this, flags, 0, NULL);
 23ec3a0:	2300      	movs	r3, #0
 23ec3a2:	6860      	ldr	r0, [r4, #4]
 23ec3a4:	461a      	mov	r2, r3
 23ec3a6:	4619      	mov	r1, r3
 23ec3a8:	f00a fdec 	bl	23f6f84 <network_connect>
  if (MuonWifiEnabled == false) {
 23ec3ac:	4b31      	ldr	r3, [pc, #196]	; (23ec474 <_Z18network_initializev+0x2b8>)
 23ec3ae:	781c      	ldrb	r4, [r3, #0]
 23ec3b0:	bb6c      	cbnz	r4, 23ec40e <_Z18network_initializev+0x252>
    Output("NETWORK:SET CELL");
 23ec3b2:	483b      	ldr	r0, [pc, #236]	; (23ec4a0 <_Z18network_initializev+0x2e4>)
 23ec3b4:	f7f8 f8e8 	bl	23e4588 <_Z6OutputPKc>
    Output("CELL:Particle Cloud Disconnect");  // We should no be connected, but do anyway
 23ec3b8:	483a      	ldr	r0, [pc, #232]	; (23ec4a4 <_Z18network_initializev+0x2e8>)
 23ec3ba:	f7f8 f8e5 	bl	23e4588 <_Z6OutputPKc>
 23ec3be:	4d34      	ldr	r5, [pc, #208]	; (23ec490 <_Z18network_initializev+0x2d4>)
    Particle.disconnect();
 23ec3c0:	a801      	add	r0, sp, #4
 23ec3c2:	e9cd 4401 	strd	r4, r4, [sp, #4]
        bool clearSession, bool reconnect) :
 23ec3c6:	f8ad 400c 	strh.w	r4, [sp, #12]
        reconnect_(reconnect) {
 23ec3ca:	f88d 400e 	strb.w	r4, [sp, #14]
 23ec3ce:	f00b fa4a 	bl	23f7866 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    Output("CELL:Turning Off WiFi");
 23ec3d2:	4835      	ldr	r0, [pc, #212]	; (23ec4a8 <_Z18network_initializev+0x2ec>)
 23ec3d4:	f7f8 f8d8 	bl	23e4588 <_Z6OutputPKc>
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23ec3d8:	4622      	mov	r2, r4
 23ec3da:	2102      	movs	r1, #2
 23ec3dc:	6868      	ldr	r0, [r5, #4]
 23ec3de:	f00a fded 	bl	23f6fbc <network_disconnect>
        network_off(*this, 0, 0, NULL);
 23ec3e2:	4623      	mov	r3, r4
 23ec3e4:	4622      	mov	r2, r4
 23ec3e6:	4621      	mov	r1, r4
 23ec3e8:	6868      	ldr	r0, [r5, #4]
 23ec3ea:	f00a fe11 	bl	23f7010 <network_off>
        return network_clear_credentials(*this, 0, NULL, NULL);
 23ec3ee:	4623      	mov	r3, r4
 23ec3f0:	4622      	mov	r2, r4
 23ec3f2:	4621      	mov	r1, r4
 23ec3f4:	6868      	ldr	r0, [r5, #4]
 23ec3f6:	f00a fe43 	bl	23f7080 <network_clear_credentials>
    if (WiFi.clearCredentials()) {
 23ec3fa:	b1e8      	cbz	r0, 23ec438 <_Z18network_initializev+0x27c>
      Output("CELL:Cleared Wifi Creds");
 23ec3fc:	482b      	ldr	r0, [pc, #172]	; (23ec4ac <_Z18network_initializev+0x2f0>)
      Output("CELL:Clear Wifi Creds Err");
 23ec3fe:	f7f8 f8c3 	bl	23e4588 <_Z6OutputPKc>
    Output("CELL:Turning On Cellular");
 23ec402:	482b      	ldr	r0, [pc, #172]	; (23ec4b0 <_Z18network_initializev+0x2f4>)
 23ec404:	f7f8 f8c0 	bl	23e4588 <_Z6OutputPKc>
    Cellular.on();          // Power on cellular modem
 23ec408:	481f      	ldr	r0, [pc, #124]	; (23ec488 <_Z18network_initializev+0x2cc>)
 23ec40a:	f7f7 fd5c 	bl	23e3ec6 <_ZN5spark13CellularClass2onEv>
}
 23ec40e:	b048      	add	sp, #288	; 0x120
 23ec410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                Output("WIFI:Clear Wifi Creds Err");
 23ec414:	4827      	ldr	r0, [pc, #156]	; (23ec4b4 <_Z18network_initializev+0x2f8>)
 23ec416:	e79d      	b.n	23ec354 <_Z18network_initializev+0x198>
                Output("WIFI:Credentials Set Err");
 23ec418:	4827      	ldr	r0, [pc, #156]	; (23ec4b8 <_Z18network_initializev+0x2fc>)
 23ec41a:	e7bc      	b.n	23ec396 <_Z18network_initializev+0x1da>
        sprintf (msgbuf, "WIFI:OPENERR[%s]", SD_wifi_file);          
 23ec41c:	4a09      	ldr	r2, [pc, #36]	; (23ec444 <_Z18network_initializev+0x288>)
 23ec41e:	4927      	ldr	r1, [pc, #156]	; (23ec4bc <_Z18network_initializev+0x300>)
 23ec420:	4810      	ldr	r0, [pc, #64]	; (23ec464 <_Z18network_initializev+0x2a8>)
 23ec422:	f00a feb9 	bl	23f7198 <sprintf>
        Output(msgbuf);
 23ec426:	480f      	ldr	r0, [pc, #60]	; (23ec464 <_Z18network_initializev+0x2a8>)
 23ec428:	f7f8 f8ae 	bl	23e4588 <_Z6OutputPKc>
        Output ("WIFI:USING CELLULAR");
 23ec42c:	4824      	ldr	r0, [pc, #144]	; (23ec4c0 <_Z18network_initializev+0x304>)
 23ec42e:	e702      	b.n	23ec236 <_Z18network_initializev+0x7a>
      Output ("WIFO:NOFILE USING CELLULAR");
 23ec430:	4824      	ldr	r0, [pc, #144]	; (23ec4c4 <_Z18network_initializev+0x308>)
 23ec432:	e700      	b.n	23ec236 <_Z18network_initializev+0x7a>
    Output ("WIFI:NOSD USING CELLULAR");
 23ec434:	4824      	ldr	r0, [pc, #144]	; (23ec4c8 <_Z18network_initializev+0x30c>)
 23ec436:	e6fe      	b.n	23ec236 <_Z18network_initializev+0x7a>
      Output("CELL:Clear Wifi Creds Err");
 23ec438:	4824      	ldr	r0, [pc, #144]	; (23ec4cc <_Z18network_initializev+0x310>)
 23ec43a:	e7e0      	b.n	23ec3fe <_Z18network_initializev+0x242>
 23ec43c:	023fe4c0 	.word	0x023fe4c0
 23ec440:	1006a770 	.word	0x1006a770
 23ec444:	1006a15d 	.word	0x1006a15d
 23ec448:	1006a2c4 	.word	0x1006a2c4
 23ec44c:	023fe111 	.word	0x023fe111
 23ec450:	023fe121 	.word	0x023fe121
 23ec454:	023fd3ac 	.word	0x023fd3ac
 23ec458:	023fe12b 	.word	0x023fe12b
 23ec45c:	023fe13c 	.word	0x023fe13c
 23ec460:	023fe141 	.word	0x023fe141
 23ec464:	1006f118 	.word	0x1006f118
 23ec468:	023fe151 	.word	0x023fe151
 23ec46c:	023fe164 	.word	0x023fe164
 23ec470:	023fe175 	.word	0x023fe175
 23ec474:	1006a2bc 	.word	0x1006a2bc
 23ec478:	023fe186 	.word	0x023fe186
 23ec47c:	023fe194 	.word	0x023fe194
 23ec480:	023fe1a0 	.word	0x023fe1a0
 23ec484:	023fe1bf 	.word	0x023fe1bf
 23ec488:	1007aeb4 	.word	0x1007aeb4
 23ec48c:	023fe1d9 	.word	0x023fe1d9
 23ec490:	1007af98 	.word	0x1007af98
 23ec494:	023fe1ee 	.word	0x023fe1ee
 23ec498:	023fe220 	.word	0x023fe220
 23ec49c:	023fe24e 	.word	0x023fe24e
 23ec4a0:	023fe2bb 	.word	0x023fe2bb
 23ec4a4:	023fe2cc 	.word	0x023fe2cc
 23ec4a8:	023fe2eb 	.word	0x023fe2eb
 23ec4ac:	023fe301 	.word	0x023fe301
 23ec4b0:	023fe333 	.word	0x023fe333
 23ec4b4:	023fe206 	.word	0x023fe206
 23ec4b8:	023fe235 	.word	0x023fe235
 23ec4bc:	023fe262 	.word	0x023fe262
 23ec4c0:	023fe273 	.word	0x023fe273
 23ec4c4:	023fe287 	.word	0x023fe287
 23ec4c8:	023fe2a2 	.word	0x023fe2a2
 23ec4cc:	023fe319 	.word	0x023fe319

023ec4d0 <setup>:
void setup() {
 23ec4d0:	b530      	push	{r4, r5, lr}
        hal_power_config config = {};
 23ec4d2:	2420      	movs	r4, #32
 23ec4d4:	b097      	sub	sp, #92	; 0x5c
 23ec4d6:	4622      	mov	r2, r4
 23ec4d8:	2100      	movs	r1, #0
 23ec4da:	a80e      	add	r0, sp, #56	; 0x38
 23ec4dc:	f00f ff83 	bl	23fc3e6 <memset>
        conf_.aux_pwr_ctrl_pin = PIN_INVALID;
        conf_.int_pin = PIN_INVALID;
    }

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
 23ec4e0:	ad0e      	add	r5, sp, #56	; 0x38
        system_power_management_get_config(&config, nullptr);
 23ec4e2:	2100      	movs	r1, #0
        config.size = sizeof(config);
 23ec4e4:	f88d 403d 	strb.w	r4, [sp, #61]	; 0x3d
        system_power_management_get_config(&config, nullptr);
 23ec4e8:	a80e      	add	r0, sp, #56	; 0x38
 23ec4ea:	ac06      	add	r4, sp, #24
 23ec4ec:	f00a fc94 	bl	23f6e18 <system_power_management_get_config>
 23ec4f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ec4f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ec4f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23ec4f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
 23ec4fc:	9b06      	ldr	r3, [sp, #24]
        return conf_.soc_bits;
    }

    SystemPowerConfiguration& auxiliaryPowerControlPin(uint8_t pin, bool activeLevel = 1) {
        conf_.aux_pwr_ctrl_pin = pin;
        conf_.aux_pwr_ctrl_pin_level = activeLevel;
 23ec4fe:	2401      	movs	r4, #1
        conf_.flags |= f.value();
 23ec500:	f043 0301 	orr.w	r3, r3, #1
        conf_.aux_pwr_ctrl_pin = pin;
 23ec504:	2507      	movs	r5, #7
        conf_.flags |= f.value();
 23ec506:	9306      	str	r3, [sp, #24]
    uint8_t auxiliaryPowerControlActiveLevel() const {
        return conf_.aux_pwr_ctrl_pin_level;
    }
    
    SystemPowerConfiguration& interruptPin(uint8_t pin) {
        conf_.int_pin = pin;
 23ec508:	231c      	movs	r3, #28
        return system_power_management_set_config(conf.config(), nullptr);
 23ec50a:	2100      	movs	r1, #0
 23ec50c:	a806      	add	r0, sp, #24
 23ec50e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
        conf_.aux_pwr_ctrl_pin = pin;
 23ec512:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
        conf_.aux_pwr_ctrl_pin_level = activeLevel;
 23ec516:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
 23ec51a:	f00a fc61 	bl	23f6de0 <system_power_management_set_config>
  pinMode(D7, OUTPUT);
 23ec51e:	4621      	mov	r1, r4
 23ec520:	4628      	mov	r0, r5
 23ec522:	f00d f8fb 	bl	23f971c <pinMode>
  digitalWrite(D7, 1);
 23ec526:	4621      	mov	r1, r4
 23ec528:	4628      	mov	r0, r5
 23ec52a:	f00d f908 	bl	23f973e <digitalWrite>
	pmic.enableBATFET();
 23ec52e:	48b6      	ldr	r0, [pc, #728]	; (23ec808 <setup+0x338>)
 23ec530:	f00c f896 	bl	23f8660 <_ZN4PMIC12enableBATFETEv>
  Time.setFormat(TIME_FORMAT_ISO8601_FULL);
 23ec534:	4bb5      	ldr	r3, [pc, #724]	; (23ec80c <setup+0x33c>)
  if (SD_exists && SD.exists(SD_n2s_file)) {
 23ec536:	4db6      	ldr	r5, [pc, #728]	; (23ec810 <setup+0x340>)
            return format(now(), format_spec);
        }

        void setFormat(const char* format)
        {
            this->format_spec = format;
 23ec538:	681a      	ldr	r2, [r3, #0]
 23ec53a:	4bb6      	ldr	r3, [pc, #728]	; (23ec814 <setup+0x344>)
 23ec53c:	601a      	str	r2, [r3, #0]
  Watchdog.init(WatchdogConfiguration().timeout(120s));
 23ec53e:	f7f7 fd21 	bl	23e3f84 <_ZN8particle13WatchdogClass11getInstanceEv>
        config_.timeout_ms = ms;
 23ec542:	49b5      	ldr	r1, [pc, #724]	; (23ec818 <setup+0x348>)
 23ec544:	4bb5      	ldr	r3, [pc, #724]	; (23ec81c <setup+0x34c>)
 23ec546:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
        config_.enable_caps = HAL_WATCHDOG_CAPS_RESET | HAL_WATCHDOG_CAPS_SLEEP_RUNNING;
 23ec54a:	2321      	movs	r3, #33	; 0x21
 23ec54c:	a90e      	add	r1, sp, #56	; 0x38
 23ec54e:	9310      	str	r3, [sp, #64]	; 0x40
 23ec550:	f00c feaa 	bl	23f92a8 <_ZN8particle13WatchdogClass4initERKNS_21WatchdogConfigurationE>
  Watchdog.start();
 23ec554:	f7f7 fd16 	bl	23e3f84 <_ZN8particle13WatchdogClass11getInstanceEv>
 23ec558:	f00c feab 	bl	23f92b2 <_ZN8particle13WatchdogClass5startEv>
  pinMode (REBOOT_PIN, OUTPUT);
 23ec55c:	4621      	mov	r1, r4
 23ec55e:	2006      	movs	r0, #6
 23ec560:	f00d f8dc 	bl	23f971c <pinMode>
  pinMode (LED_PIN, OUTPUT);
 23ec564:	4bae      	ldr	r3, [pc, #696]	; (23ec820 <setup+0x350>)
 23ec566:	4621      	mov	r1, r4
 23ec568:	8818      	ldrh	r0, [r3, #0]
 23ec56a:	f00d f8d7 	bl	23f971c <pinMode>
  Output_Initialize(); // Waits for Serial if Jumper in place for 60s
 23ec56e:	f7fc f9d1 	bl	23e8914 <_Z17Output_Initializev>
  delay(2000); // Prevents usb driver crash on startup, Arduino needed this so keeping for Particle
 23ec572:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23ec576:	f00a feef 	bl	23f7358 <delay>
  Serial_write(COPYRIGHT);
 23ec57a:	48aa      	ldr	r0, [pc, #680]	; (23ec824 <setup+0x354>)
 23ec57c:	f7f7 ffda 	bl	23e4534 <_Z12Serial_writePKc>
  Output (VERSION_INFO);
 23ec580:	48a9      	ldr	r0, [pc, #676]	; (23ec828 <setup+0x358>)
 23ec582:	f7f8 f801 	bl	23e4588 <_Z6OutputPKc>
        return HAL_Feature_Set(feature, true);
 23ec586:	4621      	mov	r1, r4
 23ec588:	2004      	movs	r0, #4
 23ec58a:	f009 ff4b 	bl	23f6424 <HAL_Feature_Set>
  OutputResetReason();
 23ec58e:	f7fb fc0b 	bl	23e7da8 <_Z17OutputResetReasonv>
  delay(4000); // Give some time to see this
 23ec592:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 23ec596:	f00a fedf 	bl	23f7358 <delay>
  HeartBeat(); // Lets refresh Watchdog - just because we can
 23ec59a:	f7fc f959 	bl	23e8850 <_Z9HeartBeatv>
  DailyRebootCountDownTimer = cf_reboot_countdown_timer;
 23ec59e:	4ba3      	ldr	r3, [pc, #652]	; (23ec82c <setup+0x35c>)
 23ec5a0:	4ca3      	ldr	r4, [pc, #652]	; (23ec830 <setup+0x360>)
 23ec5a2:	681a      	ldr	r2, [r3, #0]
 23ec5a4:	4ba3      	ldr	r3, [pc, #652]	; (23ec834 <setup+0x364>)
 23ec5a6:	601a      	str	r2, [r3, #0]
  SD_initialize();
 23ec5a8:	f7fa fe34 	bl	23e7214 <_Z13SD_initializev>
  if (SD_exists && SD.exists(SD_n2s_file)) {
 23ec5ac:	782b      	ldrb	r3, [r5, #0]
 23ec5ae:	2b00      	cmp	r3, #0
 23ec5b0:	f000 810f 	beq.w	23ec7d2 <setup+0x302>
 23ec5b4:	49a0      	ldr	r1, [pc, #640]	; (23ec838 <setup+0x368>)
 23ec5b6:	48a1      	ldr	r0, [pc, #644]	; (23ec83c <setup+0x36c>)
 23ec5b8:	f7f7 fd20 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23ec5bc:	2800      	cmp	r0, #0
 23ec5be:	f000 8108 	beq.w	23ec7d2 <setup+0x302>
    SystemStatusBits |= SSB_N2S; // Turn on Bit
 23ec5c2:	6823      	ldr	r3, [r4, #0]
    Output("N2S:Exists");
 23ec5c4:	489e      	ldr	r0, [pc, #632]	; (23ec840 <setup+0x370>)
    SystemStatusBits |= SSB_N2S; // Turn on Bit
 23ec5c6:	f043 0310 	orr.w	r3, r3, #16
 23ec5ca:	6023      	str	r3, [r4, #0]
    Output("N2S:None");
 23ec5cc:	f7f7 ffdc 	bl	23e4588 <_Z6OutputPKc>
  if (SD_exists && SD.exists(CF_NAME)) {
 23ec5d0:	782b      	ldrb	r3, [r5, #0]
 23ec5d2:	2b00      	cmp	r3, #0
 23ec5d4:	f040 8103 	bne.w	23ec7de <setup+0x30e>
    sprintf(msgbuf, "CF:NO %s", CF_NAME); Output (msgbuf);
 23ec5d8:	4a9a      	ldr	r2, [pc, #616]	; (23ec844 <setup+0x374>)
 23ec5da:	499b      	ldr	r1, [pc, #620]	; (23ec848 <setup+0x378>)
 23ec5dc:	489b      	ldr	r0, [pc, #620]	; (23ec84c <setup+0x37c>)
 23ec5de:	f00a fddb 	bl	23f7198 <sprintf>
 23ec5e2:	489a      	ldr	r0, [pc, #616]	; (23ec84c <setup+0x37c>)
 23ec5e4:	f7f7 ffd0 	bl	23e4588 <_Z6OutputPKc>
    Output(msgbuf);
 23ec5e8:	4898      	ldr	r0, [pc, #608]	; (23ec84c <setup+0x37c>)
 23ec5ea:	f7f7 ffcd 	bl	23e4588 <_Z6OutputPKc>
  EEPROM_Dump();
 23ec5ee:	f7fa fd4f 	bl	23e7090 <_Z11EEPROM_Dumpv>
  stc_timestamp();
 23ec5f2:	f7f8 f845 	bl	23e4680 <_Z13stc_timestampv>
  sprintf (msgbuf, "%sS", timestamp);
 23ec5f6:	4a96      	ldr	r2, [pc, #600]	; (23ec850 <setup+0x380>)
 23ec5f8:	4996      	ldr	r1, [pc, #600]	; (23ec854 <setup+0x384>)
 23ec5fa:	4894      	ldr	r0, [pc, #592]	; (23ec84c <setup+0x37c>)
 23ec5fc:	f00a fdcc 	bl	23f7198 <sprintf>
  Output(msgbuf);
 23ec600:	4892      	ldr	r0, [pc, #584]	; (23ec84c <setup+0x37c>)
 23ec602:	f7f7 ffc1 	bl	23e4588 <_Z6OutputPKc>
  rtc_initialize();
 23ec606:	f7f8 f88d 	bl	23e4724 <_Z14rtc_initializev>
  stc_timestamp();
 23ec60a:	f7f8 f839 	bl	23e4680 <_Z13stc_timestampv>
  sprintf (msgbuf, "%sS", timestamp);
 23ec60e:	4a90      	ldr	r2, [pc, #576]	; (23ec850 <setup+0x380>)
 23ec610:	4990      	ldr	r1, [pc, #576]	; (23ec854 <setup+0x384>)
 23ec612:	488e      	ldr	r0, [pc, #568]	; (23ec84c <setup+0x37c>)
 23ec614:	f00a fdc0 	bl	23f7198 <sprintf>
  Output(msgbuf);
 23ec618:	488c      	ldr	r0, [pc, #560]	; (23ec84c <setup+0x37c>)
 23ec61a:	f7f7 ffb5 	bl	23e4588 <_Z6OutputPKc>
  if (Time.isValid()) {
 23ec61e:	f00c fceb 	bl	23f8ff8 <_ZN9TimeClass7isValidEv>
 23ec622:	2800      	cmp	r0, #0
 23ec624:	f000 80e5 	beq.w	23ec7f2 <setup+0x322>
    Output("STC:VALID");
 23ec628:	488b      	ldr	r0, [pc, #556]	; (23ec858 <setup+0x388>)
    Output("STC:!VALID");
 23ec62a:	f7f7 ffad 	bl	23e4588 <_Z6OutputPKc>
  stc_timestamp();
 23ec62e:	f7f8 f827 	bl	23e4680 <_Z13stc_timestampv>
  sprintf (msgbuf, "%sS", timestamp);
 23ec632:	4a87      	ldr	r2, [pc, #540]	; (23ec850 <setup+0x380>)
 23ec634:	4987      	ldr	r1, [pc, #540]	; (23ec854 <setup+0x384>)
 23ec636:	4885      	ldr	r0, [pc, #532]	; (23ec84c <setup+0x37c>)
 23ec638:	f00a fdae 	bl	23f7198 <sprintf>
  Output(msgbuf);
 23ec63c:	4883      	ldr	r0, [pc, #524]	; (23ec84c <setup+0x37c>)
 23ec63e:	f7f7 ffa3 	bl	23e4588 <_Z6OutputPKc>
  sprintf (msgbuf, "PS:%d", System.powerSource());
 23ec642:	f7fe f9bd 	bl	23ea9c0 <_ZNK11SystemClass11powerSourceEv.isra.0>
 23ec646:	4985      	ldr	r1, [pc, #532]	; (23ec85c <setup+0x38c>)
 23ec648:	4602      	mov	r2, r0
 23ec64a:	4880      	ldr	r0, [pc, #512]	; (23ec84c <setup+0x37c>)
 23ec64c:	f00a fda4 	bl	23f7198 <sprintf>
  Output(msgbuf);
 23ec650:	487e      	ldr	r0, [pc, #504]	; (23ec84c <setup+0x37c>)
 23ec652:	f7f7 ff99 	bl	23e4588 <_Z6OutputPKc>
  sprintf (msgbuf, "BS:%d", System.batteryState());
 23ec656:	f7fc f9af 	bl	23e89b8 <_ZNK11SystemClass12batteryStateEv.isra.0>
 23ec65a:	4981      	ldr	r1, [pc, #516]	; (23ec860 <setup+0x390>)
 23ec65c:	4602      	mov	r2, r0
 23ec65e:	487b      	ldr	r0, [pc, #492]	; (23ec84c <setup+0x37c>)
 23ec660:	f00a fd9a 	bl	23f7198 <sprintf>
  Output(msgbuf);
 23ec664:	4879      	ldr	r0, [pc, #484]	; (23ec84c <setup+0x37c>)
 23ec666:	f7f7 ff8f 	bl	23e4588 <_Z6OutputPKc>
  float bpc = System.batteryCharge();
 23ec66a:	f7fc f993 	bl	23e8994 <_ZNK11SystemClass13batteryChargeEv.isra.0>
  sprintf (msgbuf, "BPC:%d.%02d", (int)bpc, (int)(bpc*100)%100);
 23ec66e:	eddf 7a7d 	vldr	s15, [pc, #500]	; 23ec864 <setup+0x394>
 23ec672:	ee60 7a27 	vmul.f32	s15, s0, s15
 23ec676:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23ec67a:	2464      	movs	r4, #100	; 0x64
 23ec67c:	ee17 3a90 	vmov	r3, s15
 23ec680:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 23ec684:	fb93 f2f4 	sdiv	r2, r3, r4
 23ec688:	4977      	ldr	r1, [pc, #476]	; (23ec868 <setup+0x398>)
 23ec68a:	fb04 3312 	mls	r3, r4, r2, r3
 23ec68e:	486f      	ldr	r0, [pc, #444]	; (23ec84c <setup+0x37c>)
 23ec690:	ee17 2a90 	vmov	r2, s15
 23ec694:	f00a fd80 	bl	23f7198 <sprintf>
  Output(msgbuf);
 23ec698:	486c      	ldr	r0, [pc, #432]	; (23ec84c <setup+0x37c>)
 23ec69a:	f7f7 ff75 	bl	23e4588 <_Z6OutputPKc>
  network_initialize();
 23ec69e:	f7ff fd8d 	bl	23ec1bc <_Z18network_initializev>
  WiFiPrintCredentials();
 23ec6a2:	f7fb ffb9 	bl	23e8618 <_Z20WiFiPrintCredentialsv>
  Output("GPS:Enable");
 23ec6a6:	4871      	ldr	r0, [pc, #452]	; (23ec86c <setup+0x39c>)
 23ec6a8:	f7f7 ff6e 	bl	23e4588 <_Z6OutputPKc>
public:
    /**
     * @brief Construct a new Location Configuration object
     *
     */
    LocationConfiguration() :
 23ec6ac:	4b70      	ldr	r3, [pc, #448]	; (23ec870 <setup+0x3a0>)
        _constellations(LOCATION_CONST_GPS_GLONASS),
        _antennaPin(PIN_INVALID),
        _hdop(LocationHdopDefault),
        _hacc(LocationHaccDefault),
        _maxFixSeconds(LocationFixTimeDefault) {
 23ec6ae:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
 23ec6b2:	4b70      	ldr	r3, [pc, #448]	; (23ec874 <setup+0x3a4>)
  anemometer_interrupt_count = 0;
 23ec6b4:	2400      	movs	r4, #0
 23ec6b6:	9310      	str	r3, [sp, #64]	; 0x40
 23ec6b8:	235a      	movs	r3, #90	; 0x5a
 23ec6ba:	9311      	str	r3, [sp, #68]	; 0x44
  Location.begin(config);
 23ec6bc:	f7f7 fc8c 	bl	23e3fd8 <_ZN11SomLocation8instanceEv>
 23ec6c0:	a90e      	add	r1, sp, #56	; 0x38
 23ec6c2:	f009 fc03 	bl	23f5ecc <_ZN11SomLocation5beginER21LocationConfiguration>
  anemometer_interrupt_count = 0;
 23ec6c6:	4b6c      	ldr	r3, [pc, #432]	; (23ec878 <setup+0x3a8>)
 23ec6c8:	601c      	str	r4, [r3, #0]
  anemometer_interrupt_stime = System.millis();
 23ec6ca:	f7f7 fc08 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23ec6ce:	4b6b      	ldr	r3, [pc, #428]	; (23ec87c <setup+0x3ac>)
  attachInterrupt(ANEMOMETER_IRQ_PIN, anemometer_interrupt_handler, FALLING);
 23ec6d0:	2202      	movs	r2, #2
  anemometer_interrupt_stime = System.millis();
 23ec6d2:	e9c3 0100 	strd	r0, r1, [r3]
  attachInterrupt(ANEMOMETER_IRQ_PIN, anemometer_interrupt_handler, FALLING);
 23ec6d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23ec6da:	4969      	ldr	r1, [pc, #420]	; (23ec880 <setup+0x3b0>)
 23ec6dc:	2011      	movs	r0, #17
 23ec6de:	9400      	str	r4, [sp, #0]
 23ec6e0:	f00b fc52 	bl	23f7f88 <_Z15attachInterrupttPFvvE13InterruptModeah>
  raingauge1_interrupt_count = 0;
 23ec6e4:	4b67      	ldr	r3, [pc, #412]	; (23ec884 <setup+0x3b4>)
 23ec6e6:	601c      	str	r4, [r3, #0]
  raingauge1_interrupt_stime = System.millis();
 23ec6e8:	f7f7 fbf9 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23ec6ec:	4b66      	ldr	r3, [pc, #408]	; (23ec888 <setup+0x3b8>)
  attachInterrupt(RAINGAUGE1_IRQ_PIN, raingauge1_interrupt_handler, FALLING);
 23ec6ee:	2202      	movs	r2, #2
  raingauge1_interrupt_stime = System.millis();
 23ec6f0:	e9c3 0100 	strd	r0, r1, [r3]
  raingauge1_interrupt_ltime = 0;  // used to debounce the tip
 23ec6f4:	2000      	movs	r0, #0
 23ec6f6:	2100      	movs	r1, #0
 23ec6f8:	4b64      	ldr	r3, [pc, #400]	; (23ec88c <setup+0x3bc>)
 23ec6fa:	e9c3 0100 	strd	r0, r1, [r3]
  attachInterrupt(RAINGAUGE1_IRQ_PIN, raingauge1_interrupt_handler, FALLING);
 23ec6fe:	4964      	ldr	r1, [pc, #400]	; (23ec890 <setup+0x3c0>)
 23ec700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23ec704:	2010      	movs	r0, #16
 23ec706:	9400      	str	r4, [sp, #0]
 23ec708:	f00b fc3e 	bl	23f7f88 <_Z15attachInterrupttPFvvE13InterruptModeah>
  TXI_Initialize();
 23ec70c:	f7fc f842 	bl	23e8794 <_Z14TXI_Initializev>
  A4_Initialize();
 23ec710:	f7f9 fd2a 	bl	23e6168 <_Z13A4_Initializev>
  A5_Initialize();
 23ec714:	f7f9 fdac 	bl	23e6270 <_Z13A5_Initializev>
  pmts_initialize();  // Particle Muon on board temperature sensor (TMP112A)
 23ec718:	f7f9 fcaa 	bl	23e6070 <_Z15pmts_initializev>
  bmx_initialize();
 23ec71c:	f7f8 fa26 	bl	23e4b6c <_Z14bmx_initializev>
  htu21d_initialize();
 23ec720:	f7f8 fb40 	bl	23e4da4 <_Z17htu21d_initializev>
  mcp9808_initialize();
 23ec724:	f7f8 fb6c 	bl	23e4e00 <_Z18mcp9808_initializev>
  sht_initialize();
 23ec728:	f7f8 fc1a 	bl	23e4f60 <_Z14sht_initializev>
  hih8_initialize();
 23ec72c:	f7f8 fc80 	bl	23e5030 <_Z15hih8_initializev>
  si1145_initialize();
 23ec730:	f7f9 f8ee 	bl	23e5910 <_Z17si1145_initializev>
  vlx_initialize();
 23ec734:	f7f9 f9a0 	bl	23e5a78 <_Z14vlx_initializev>
  blx_initialize();
 23ec738:	f7f9 f9cc 	bl	23e5ad4 <_Z14blx_initializev>
  as5600_initialize();
 23ec73c:	f7f9 fce4 	bl	23e6108 <_Z17as5600_initializev>
  pm25aqi_initialize();
 23ec740:	f7f9 fa54 	bl	23e5bec <_Z18pm25aqi_initializev>
  hdc_initialize();
 23ec744:	f7f9 fad8 	bl	23e5cf8 <_Z14hdc_initializev>
  lps_initialize();
 23ec748:	f7f9 fb46 	bl	23e5dd8 <_Z14lps_initializev>
  tlw_initialize();
 23ec74c:	f7f9 fbbe 	bl	23e5ecc <_Z14tlw_initializev>
  tsm_initialize();
 23ec750:	f7f9 fbea 	bl	23e5f28 <_Z14tsm_initializev>
  tmsm_initialize();
 23ec754:	f7f9 fc16 	bl	23e5f84 <_Z15tmsm_initializev>
  wbt_initialize();
 23ec758:	f7f8 fd4a 	bl	23e51f0 <_Z14wbt_initializev>
  hi_initialize();
 23ec75c:	f7f8 fe34 	bl	23e53c8 <_Z13hi_initializev>
  wbgt_initialize();
 23ec760:	f7f8 ffe0 	bl	23e5724 <_Z15wbgt_initializev>
  lora_initialize();
 23ec764:	f7fe fa72 	bl	23eac4c <_Z15lora_initializev>
  lora_device_initialize();
 23ec768:	f7f8 f8ce 	bl	23e4908 <_Z22lora_device_initializev>
  lora_msg_check();
 23ec76c:	f7fe fb62 	bl	23eae34 <_Z14lora_msg_checkv>
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
 23ec770:	2203      	movs	r2, #3
 23ec772:	f241 3388 	movw	r3, #5000	; 0x1388
 23ec776:	e9cd 2303 	strd	r2, r3, [sp, #12]
        bool clearSession, bool reconnect) :
 23ec77a:	2301      	movs	r3, #1
  Particle.setDisconnectOptions(CloudDisconnectOptions().graceful(true).timeout(5s));
 23ec77c:	a803      	add	r0, sp, #12
 23ec77e:	f8ad 3014 	strh.w	r3, [sp, #20]
        reconnect_(reconnect) {
 23ec782:	f88d 4016 	strb.w	r4, [sp, #22]
 23ec786:	f00b f879 	bl	23f787c <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>
        spark_cloud_flag_connect();
 23ec78a:	f00a fb6f 	bl	23f6e6c <spark_cloud_flag_connect>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 23ec78e:	4a41      	ldr	r2, [pc, #260]	; (23ec894 <setup+0x3c4>)
 23ec790:	4941      	ldr	r1, [pc, #260]	; (23ec898 <setup+0x3c8>)
 23ec792:	4842      	ldr	r0, [pc, #264]	; (23ec89c <setup+0x3cc>)
 23ec794:	f00b f856 	bl	23f7844 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  if (Particle.function("DoAction", Function_DoAction)) {
 23ec798:	b368      	cbz	r0, 23ec7f6 <setup+0x326>
    Output ("DoAction:OK");
 23ec79a:	4841      	ldr	r0, [pc, #260]	; (23ec8a0 <setup+0x3d0>)

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 23ec79c:	4c41      	ldr	r4, [pc, #260]	; (23ec8a4 <setup+0x3d4>)
    Output ("DoAction:ERR");
 23ec79e:	f7f7 fef3 	bl	23e4588 <_Z6OutputPKc>
 23ec7a2:	f242 7210 	movw	r2, #10000	; 0x2710
 23ec7a6:	4621      	mov	r1, r4
 23ec7a8:	4b3f      	ldr	r3, [pc, #252]	; (23ec8a8 <setup+0x3d8>)
 23ec7aa:	4840      	ldr	r0, [pc, #256]	; (23ec8ac <setup+0x3dc>)
 23ec7ac:	f009 fdca 	bl	23f6344 <cellular_command>
  if ((RESP_OK == Cellular.command(callback_imsi, imsi, 10000, "AT+CIMI\r\n")) && (strcmp(imsi,"") != 0)) {
 23ec7b0:	3002      	adds	r0, #2
 23ec7b2:	d101      	bne.n	23ec7b8 <setup+0x2e8>
 23ec7b4:	7823      	ldrb	r3, [r4, #0]
 23ec7b6:	bb03      	cbnz	r3, 23ec7fa <setup+0x32a>
    Output("IMSI:NF");
 23ec7b8:	483d      	ldr	r0, [pc, #244]	; (23ec8b0 <setup+0x3e0>)
    Output (msgbuf);
 23ec7ba:	f7f7 fee5 	bl	23e4588 <_Z6OutputPKc>
  if (Time.isValid()) {
 23ec7be:	f00c fc1b 	bl	23f8ff8 <_ZN9TimeClass7isValidEv>
 23ec7c2:	b108      	cbz	r0, 23ec7c8 <setup+0x2f8>
    EEPROM_Initialize();
 23ec7c4:	f7fa faa0 	bl	23e6d08 <_Z17EEPROM_Initializev>
  ws_refresh = true;
 23ec7c8:	2201      	movs	r2, #1
 23ec7ca:	4b3a      	ldr	r3, [pc, #232]	; (23ec8b4 <setup+0x3e4>)
 23ec7cc:	701a      	strb	r2, [r3, #0]
}
 23ec7ce:	b017      	add	sp, #92	; 0x5c
 23ec7d0:	bd30      	pop	{r4, r5, pc}
    SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23ec7d2:	6823      	ldr	r3, [r4, #0]
    Output("N2S:None");
 23ec7d4:	4838      	ldr	r0, [pc, #224]	; (23ec8b8 <setup+0x3e8>)
    SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23ec7d6:	f023 0310 	bic.w	r3, r3, #16
 23ec7da:	6023      	str	r3, [r4, #0]
    Output("N2S:None");
 23ec7dc:	e6f6      	b.n	23ec5cc <setup+0xfc>
  if (SD_exists && SD.exists(CF_NAME)) {
 23ec7de:	4919      	ldr	r1, [pc, #100]	; (23ec844 <setup+0x374>)
 23ec7e0:	4816      	ldr	r0, [pc, #88]	; (23ec83c <setup+0x36c>)
 23ec7e2:	f7f7 fc0b 	bl	23e3ffc <_ZN8FsVolume6existsEPKc>
 23ec7e6:	2800      	cmp	r0, #0
 23ec7e8:	f43f aef6 	beq.w	23ec5d8 <setup+0x108>
    SD_ReadConfigFile();
 23ec7ec:	f7fb f812 	bl	23e7814 <_Z17SD_ReadConfigFilev>
 23ec7f0:	e6fd      	b.n	23ec5ee <setup+0x11e>
    Output("STC:!VALID");
 23ec7f2:	4832      	ldr	r0, [pc, #200]	; (23ec8bc <setup+0x3ec>)
 23ec7f4:	e719      	b.n	23ec62a <setup+0x15a>
    Output ("DoAction:ERR");
 23ec7f6:	4832      	ldr	r0, [pc, #200]	; (23ec8c0 <setup+0x3f0>)
 23ec7f8:	e7d0      	b.n	23ec79c <setup+0x2cc>
    sprintf (msgbuf, "IMSI:%s", imsi);
 23ec7fa:	4622      	mov	r2, r4
 23ec7fc:	4931      	ldr	r1, [pc, #196]	; (23ec8c4 <setup+0x3f4>)
 23ec7fe:	4813      	ldr	r0, [pc, #76]	; (23ec84c <setup+0x37c>)
 23ec800:	f00a fcca 	bl	23f7198 <sprintf>
    Output (msgbuf);
 23ec804:	4811      	ldr	r0, [pc, #68]	; (23ec84c <setup+0x37c>)
 23ec806:	e7d8      	b.n	23ec7ba <setup+0x2ea>
 23ec808:	1007aa48 	.word	0x1007aa48
 23ec80c:	1006a1b8 	.word	0x1006a1b8
 23ec810:	1006a770 	.word	0x1006a770
 23ec814:	1007af3c 	.word	0x1007af3c
 23ec818:	0001000c 	.word	0x0001000c
 23ec81c:	0001d4c0 	.word	0x0001d4c0
 23ec820:	1006a0ec 	.word	0x1006a0ec
 23ec824:	023fe34c 	.word	0x023fe34c
 23ec828:	023fde7b 	.word	0x023fde7b
 23ec82c:	1006a18c 	.word	0x1006a18c
 23ec830:	1006a168 	.word	0x1006a168
 23ec834:	1006a298 	.word	0x1006a298
 23ec838:	1006a147 	.word	0x1006a147
 23ec83c:	1006a2c4 	.word	0x1006a2c4
 23ec840:	023fe38f 	.word	0x023fe38f
 23ec844:	023fd409 	.word	0x023fd409
 23ec848:	023fe3a3 	.word	0x023fe3a3
 23ec84c:	1006f118 	.word	0x1006f118
 23ec850:	1007abd0 	.word	0x1007abd0
 23ec854:	023fe3ac 	.word	0x023fe3ac
 23ec858:	023fe3b0 	.word	0x023fe3b0
 23ec85c:	023fe3c5 	.word	0x023fe3c5
 23ec860:	023fe3cb 	.word	0x023fe3cb
 23ec864:	42c80000 	.word	0x42c80000
 23ec868:	023fe3d1 	.word	0x023fe3d1
 23ec86c:	023fe3dd 	.word	0x023fe3dd
 23ec870:	002a0001 	.word	0x002a0001
 23ec874:	42480000 	.word	0x42480000
 23ec878:	1006a928 	.word	0x1006a928
 23ec87c:	1006a930 	.word	0x1006a930
 23ec880:	023e3da1 	.word	0x023e3da1
 23ec884:	1007aa4c 	.word	0x1007aa4c
 23ec888:	1007aa58 	.word	0x1007aa58
 23ec88c:	1007aa50 	.word	0x1007aa50
 23ec890:	023e3ee5 	.word	0x023e3ee5
 23ec894:	023fe3e8 	.word	0x023fe3e8
 23ec898:	023e7e49 	.word	0x023e7e49
 23ec89c:	023f7819 	.word	0x023f7819
 23ec8a0:	023fe3f1 	.word	0x023fe3f1
 23ec8a4:	1006ae8c 	.word	0x1006ae8c
 23ec8a8:	023fe40a 	.word	0x023fe40a
 23ec8ac:	023e3de5 	.word	0x023e3de5
 23ec8b0:	023fe414 	.word	0x023fe414
 23ec8b4:	1007ae48 	.word	0x1007ae48
 23ec8b8:	023fe39a 	.word	0x023fe39a
 23ec8bc:	023fe3ba 	.word	0x023fe3ba
 23ec8c0:	023fe3fd 	.word	0x023fe3fd
 23ec8c4:	023fe41c 	.word	0x023fe41c

023ec8c8 <loop>:
void loop() {
 23ec8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23ec8ca:	b085      	sub	sp, #20
    if (Time.isValid()) {  
 23ec8cc:	f00c fb94 	bl	23f8ff8 <_ZN9TimeClass7isValidEv>
 23ec8d0:	2800      	cmp	r0, #0
 23ec8d2:	f000 80a8 	beq.w	23eca26 <loop+0x15e>
      RTC_UpdateCheck();
 23ec8d6:	f7f7 ff83 	bl	23e47e0 <_Z15RTC_UpdateCheckv>
      if (!eeprom_valid) {
 23ec8da:	4ba6      	ldr	r3, [pc, #664]	; (23ecb74 <loop+0x2ac>)
 23ec8dc:	781b      	ldrb	r3, [r3, #0]
 23ec8de:	b90b      	cbnz	r3, 23ec8e4 <loop+0x1c>
        EEPROM_Initialize();
 23ec8e0:	f7fa fa12 	bl	23e6d08 <_Z17EEPROM_Initializev>
      if (SendSystemInformation && Particle.connected()) {
 23ec8e4:	4ba4      	ldr	r3, [pc, #656]	; (23ecb78 <loop+0x2b0>)
 23ec8e6:	781b      	ldrb	r3, [r3, #0]
 23ec8e8:	b123      	cbz	r3, 23ec8f4 <loop+0x2c>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23ec8ea:	f00a facd 	bl	23f6e88 <spark_cloud_flag_connected>
 23ec8ee:	b108      	cbz	r0, 23ec8f4 <loop+0x2c>
        INFO_Do(); // Function sets SendSystemInformation back to false.
 23ec8f0:	f7fe fc20 	bl	23eb134 <_Z7INFO_Dov>
      if (ws_refresh) {
 23ec8f4:	4ba1      	ldr	r3, [pc, #644]	; (23ecb7c <loop+0x2b4>)
 23ec8f6:	781b      	ldrb	r3, [r3, #0]
 23ec8f8:	b123      	cbz	r3, 23ec904 <loop+0x3c>
        Output ("WS Refresh Required");
 23ec8fa:	48a1      	ldr	r0, [pc, #644]	; (23ecb80 <loop+0x2b8>)
 23ec8fc:	f7f7 fe44 	bl	23e4588 <_Z6OutputPKc>
        Wind_Distance_Air_Initialize();
 23ec900:	f7fe fad0 	bl	23eaea4 <_Z28Wind_Distance_Air_Initializev>
      if ( (System.millis() - lastOBS) > OBSERVATION_INTERVAL) {  // 1 minute
 23ec904:	f7f7 faeb 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23ec908:	4a9e      	ldr	r2, [pc, #632]	; (23ecb84 <loop+0x2bc>)
 23ec90a:	e9d2 3200 	ldrd	r3, r2, [r2]
 23ec90e:	1ac0      	subs	r0, r0, r3
 23ec910:	f64e 2361 	movw	r3, #60001	; 0xea61
 23ec914:	eb61 0102 	sbc.w	r1, r1, r2
 23ec918:	4298      	cmp	r0, r3
 23ec91a:	f171 0300 	sbcs.w	r3, r1, #0
 23ec91e:	d303      	bcc.n	23ec928 <loop+0x60>
        I2C_Check_Sensors(); // Make sure Sensors are online
 23ec920:	f7f9 ffa0 	bl	23e6864 <_Z17I2C_Check_Sensorsv>
        OBS_Do();
 23ec924:	f7fc f854 	bl	23e89d0 <_Z6OBS_Dov>
      if ( (LastTransmitTime == 0) || ((System.millis() - LastTransmitTime) > (obs_tx_interval * 60 * 1000)) ) {
 23ec928:	4c97      	ldr	r4, [pc, #604]	; (23ecb88 <loop+0x2c0>)
 23ec92a:	e9d4 2300 	ldrd	r2, r3, [r4]
 23ec92e:	4313      	orrs	r3, r2
 23ec930:	d12e      	bne.n	23ec990 <loop+0xc8>
 23ec932:	f00a faa9 	bl	23f6e88 <spark_cloud_flag_connected>
        if (Particle.connected()) {
 23ec936:	2800      	cmp	r0, #0
 23ec938:	d03e      	beq.n	23ec9b8 <loop+0xf0>
          Output ("Connected");
 23ec93a:	4894      	ldr	r0, [pc, #592]	; (23ecb8c <loop+0x2c4>)
 23ec93c:	f7f7 fe24 	bl	23e4588 <_Z6OutputPKc>
          LastTransmitTime = System.millis();
 23ec940:	f7f7 facd 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23ec944:	e9c4 0100 	strd	r0, r1, [r4]
          if ((System.millis() - LastTimeUpdate) > (4*3600*1000)) {
 23ec948:	f7f7 fac9 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23ec94c:	2500      	movs	r5, #0
 23ec94e:	4c90      	ldr	r4, [pc, #576]	; (23ecb90 <loop+0x2c8>)
 23ec950:	e9d4 3200 	ldrd	r3, r2, [r4]
 23ec954:	1ac0      	subs	r0, r0, r3
 23ec956:	4b8f      	ldr	r3, [pc, #572]	; (23ecb94 <loop+0x2cc>)
 23ec958:	eb61 0102 	sbc.w	r1, r1, r2
 23ec95c:	4283      	cmp	r3, r0
 23ec95e:	eb75 0301 	sbcs.w	r3, r5, r1
 23ec962:	d209      	bcs.n	23ec978 <loop+0xb0>
 23ec964:	f00a fa90 	bl	23f6e88 <spark_cloud_flag_connected>
        if (!connected()) {
 23ec968:	b110      	cbz	r0, 23ec970 <loop+0xa8>
        return spark_sync_time(NULL);
 23ec96a:	4628      	mov	r0, r5
 23ec96c:	f00a fab6 	bl	23f6edc <spark_sync_time>
            LastTimeUpdate = System.millis();
 23ec970:	f7f7 fab5 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23ec974:	e9c4 0100 	strd	r0, r1, [r4]
          OBS_PublishAll();
 23ec978:	f7ff fba6 	bl	23ec0c8 <_Z14OBS_PublishAllv>
          stc_timestamp();
 23ec97c:	f7f7 fe80 	bl	23e4680 <_Z13stc_timestampv>
          Output(timestamp);
 23ec980:	4885      	ldr	r0, [pc, #532]	; (23ecb98 <loop+0x2d0>)
 23ec982:	f7f7 fe01 	bl	23e4588 <_Z6OutputPKc>
          Output_CellBatteryInfo();
 23ec986:	f7fd ffcd 	bl	23ea924 <_Z22Output_CellBatteryInfov>
          JPO_ClearBits();
 23ec98a:	f7f7 fc35 	bl	23e41f8 <_Z13JPO_ClearBitsv>
 23ec98e:	e013      	b.n	23ec9b8 <loop+0xf0>
      if ( (LastTransmitTime == 0) || ((System.millis() - LastTransmitTime) > (obs_tx_interval * 60 * 1000)) ) {
 23ec990:	f7f7 faa5 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23ec994:	e9d4 3200 	ldrd	r3, r2, [r4]
 23ec998:	f64e 2560 	movw	r5, #60000	; 0xea60
 23ec99c:	4e7f      	ldr	r6, [pc, #508]	; (23ecb9c <loop+0x2d4>)
 23ec99e:	1ac0      	subs	r0, r0, r3
 23ec9a0:	6833      	ldr	r3, [r6, #0]
 23ec9a2:	eb61 0102 	sbc.w	r1, r1, r2
 23ec9a6:	fba3 3205 	umull	r3, r2, r3, r5
 23ec9aa:	6877      	ldr	r7, [r6, #4]
 23ec9ac:	4283      	cmp	r3, r0
 23ec9ae:	fb05 2207 	mla	r2, r5, r7, r2
 23ec9b2:	eb72 0301 	sbcs.w	r3, r2, r1
 23ec9b6:	d3bc      	bcc.n	23ec932 <loop+0x6a>
      BackGroundWork();
 23ec9b8:	f7fe facc 	bl	23eaf54 <_Z14BackGroundWorkv>
    if ((cf_reboot_countdown_timer>0) && (--DailyRebootCountDownTimer<=0)) {
 23ec9bc:	4e78      	ldr	r6, [pc, #480]	; (23ecba0 <loop+0x2d8>)
 23ec9be:	6833      	ldr	r3, [r6, #0]
 23ec9c0:	2b00      	cmp	r3, #0
 23ec9c2:	dd65      	ble.n	23eca90 <loop+0x1c8>
 23ec9c4:	4d77      	ldr	r5, [pc, #476]	; (23ecba4 <loop+0x2dc>)
 23ec9c6:	682b      	ldr	r3, [r5, #0]
 23ec9c8:	3b01      	subs	r3, #1
 23ec9ca:	2b00      	cmp	r3, #0
 23ec9cc:	602b      	str	r3, [r5, #0]
 23ec9ce:	dc5f      	bgt.n	23eca90 <loop+0x1c8>
      Output ("Daily Reboot");
 23ec9d0:	4875      	ldr	r0, [pc, #468]	; (23ecba8 <loop+0x2e0>)
 23ec9d2:	f7f7 fdd9 	bl	23e4588 <_Z6OutputPKc>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23ec9d6:	f00a fa57 	bl	23f6e88 <spark_cloud_flag_connected>
      if (Particle.connected()) {
 23ec9da:	b108      	cbz	r0, 23ec9e0 <loop+0x118>
        OBS_PublishAll();
 23ec9dc:	f7ff fb74 	bl	23ec0c8 <_Z14OBS_PublishAllv>
      EEPROM_SaveUnreportedRain();
 23ec9e0:	f7fa fa82 	bl	23e6ee8 <_Z25EEPROM_SaveUnreportedRainv>
      delay(1000);
 23ec9e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23ec9e8:	f00a fcb6 	bl	23f7358 <delay>
        reconnect_(reconnect) {
 23ec9ec:	2300      	movs	r3, #0
      Particle.disconnect();
 23ec9ee:	a801      	add	r0, sp, #4
 23ec9f0:	e9cd 3301 	strd	r3, r3, [sp, #4]
        bool clearSession, bool reconnect) :
 23ec9f4:	f8ad 300c 	strh.w	r3, [sp, #12]
        reconnect_(reconnect) {
 23ec9f8:	f88d 300e 	strb.w	r3, [sp, #14]
 23ec9fc:	f00a ff33 	bl	23f7866 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        const system_tick_t start = millis();
 23eca00:	f7f7 fa6d 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23eca04:	4604      	mov	r4, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23eca06:	f7f7 fa6a 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23eca0a:	1b00      	subs	r0, r0, r4
 23eca0c:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23eca10:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 23eca14:	f171 0300 	sbcs.w	r3, r1, #0
 23eca18:	d212      	bcs.n	23eca40 <loop+0x178>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23eca1a:	f00a fa35 	bl	23f6e88 <spark_cloud_flag_connected>
 23eca1e:	b178      	cbz	r0, 23eca40 <loop+0x178>
            spark_process();
 23eca20:	f00a fa16 	bl	23f6e50 <spark_process>
        while (_while() && !_condition()) {
 23eca24:	e7ef      	b.n	23eca06 <loop+0x13e>
      stc_timestamp();
 23eca26:	f7f7 fe2b 	bl	23e4680 <_Z13stc_timestampv>
      Output(timestamp);
 23eca2a:	485b      	ldr	r0, [pc, #364]	; (23ecb98 <loop+0x2d0>)
 23eca2c:	f7f7 fdac 	bl	23e4588 <_Z6OutputPKc>
      Output("ERR: No Clock");
 23eca30:	485e      	ldr	r0, [pc, #376]	; (23ecbac <loop+0x2e4>)
 23eca32:	f7f7 fda9 	bl	23e4588 <_Z6OutputPKc>
      delay (DELAY_NO_RTC);
 23eca36:	f64e 2060 	movw	r0, #60000	; 0xea60
 23eca3a:	f00a fc8d 	bl	23f7358 <delay>
 23eca3e:	e7bd      	b.n	23ec9bc <loop+0xf4>
 23eca40:	4c5b      	ldr	r4, [pc, #364]	; (23ecbb0 <loop+0x2e8>)
 23eca42:	f00a fa21 	bl	23f6e88 <spark_cloud_flag_connected>
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23eca46:	2200      	movs	r2, #0
 23eca48:	2102      	movs	r1, #2
 23eca4a:	6860      	ldr	r0, [r4, #4]
 23eca4c:	f00a fab6 	bl	23f6fbc <network_disconnect>
      delay(1000);
 23eca50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23eca54:	f00a fc80 	bl	23f7358 <delay>
      Cellular.off();
 23eca58:	4620      	mov	r0, r4
 23eca5a:	f7f7 fa3a 	bl	23e3ed2 <_ZN5spark13CellularClass3offEv>
      Output("Rebooting");  
 23eca5e:	4855      	ldr	r0, [pc, #340]	; (23ecbb4 <loop+0x2ec>)
 23eca60:	f7f7 fd92 	bl	23e4588 <_Z6OutputPKc>
      delay(1000);
 23eca64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23eca68:	f00a fc76 	bl	23f7358 <delay>
      DeviceReset();
 23eca6c:	f7fb f9d6 	bl	23e7e1c <_Z11DeviceResetv>
      Output("I'm Alive! Why?");  
 23eca70:	4851      	ldr	r0, [pc, #324]	; (23ecbb8 <loop+0x2f0>)
 23eca72:	f7f7 fd89 	bl	23e4588 <_Z6OutputPKc>
		  Cellular.on();
 23eca76:	4620      	mov	r0, r4
 23eca78:	f7f7 fa25 	bl	23e3ec6 <_ZN5spark13CellularClass2onEv>
      delay(1000);
 23eca7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23eca80:	f00a fc6a 	bl	23f7358 <delay>
        spark_cloud_flag_connect();
 23eca84:	f00a f9f2 	bl	23f6e6c <spark_cloud_flag_connect>
      DailyRebootCountDownTimer = cf_reboot_countdown_timer; // Reset count incase reboot fails
 23eca88:	6833      	ldr	r3, [r6, #0]
 23eca8a:	602b      	str	r3, [r5, #0]
      Wind_Distance_Air_Initialize();
 23eca8c:	f7fe fa0a 	bl	23eaea4 <_Z28Wind_Distance_Air_Initializev>
    if ((System.powerSource() == POWER_SOURCE_BATTERY) && (System.batteryCharge() <= 15.0)) {
 23eca90:	f7fd ff96 	bl	23ea9c0 <_ZNK11SystemClass11powerSourceEv.isra.0>
 23eca94:	2805      	cmp	r0, #5
 23eca96:	d16a      	bne.n	23ecb6e <loop+0x2a6>
 23eca98:	f7fb ff7c 	bl	23e8994 <_ZNK11SystemClass13batteryChargeEv.isra.0>
 23eca9c:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 23ecaa0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ecaa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ecaa8:	d861      	bhi.n	23ecb6e <loop+0x2a6>
      Output("Low Power!");
 23ecaaa:	4844      	ldr	r0, [pc, #272]	; (23ecbbc <loop+0x2f4>)
 23ecaac:	f7f7 fd6c 	bl	23e4588 <_Z6OutputPKc>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23ecab0:	f00a f9ea 	bl	23f6e88 <spark_cloud_flag_connected>
      if (Particle.connected()) {
 23ecab4:	b118      	cbz	r0, 23ecabe <loop+0x1f6>
        OBS_PublishAll(); 
 23ecab6:	f7ff fb07 	bl	23ec0c8 <_Z14OBS_PublishAllv>
        INFO_Do();
 23ecaba:	f7fe fb3b 	bl	23eb134 <_Z7INFO_Dov>
        reconnect_(reconnect) {
 23ecabe:	2300      	movs	r3, #0
      Particle.disconnect();
 23ecac0:	a801      	add	r0, sp, #4
 23ecac2:	e9cd 3301 	strd	r3, r3, [sp, #4]
        bool clearSession, bool reconnect) :
 23ecac6:	f8ad 300c 	strh.w	r3, [sp, #12]
        reconnect_(reconnect) {
 23ecaca:	f88d 300e 	strb.w	r3, [sp, #14]
 23ecace:	f00a feca 	bl	23f7866 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        const system_tick_t start = millis();
 23ecad2:	f7f7 fa04 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23ecad6:	4604      	mov	r4, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23ecad8:	f7f7 fa01 	bl	23e3ede <_ZN11SystemClass6millisEv>
 23ecadc:	1b00      	subs	r0, r0, r4
 23ecade:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23ecae2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 23ecae6:	f171 0300 	sbcs.w	r3, r1, #0
 23ecaea:	d205      	bcs.n	23ecaf8 <loop+0x230>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23ecaec:	f00a f9cc 	bl	23f6e88 <spark_cloud_flag_connected>
 23ecaf0:	b110      	cbz	r0, 23ecaf8 <loop+0x230>
            spark_process();
 23ecaf2:	f00a f9ad 	bl	23f6e50 <spark_process>
        while (_while() && !_condition()) {
 23ecaf6:	e7ef      	b.n	23ecad8 <loop+0x210>
 23ecaf8:	4c2d      	ldr	r4, [pc, #180]	; (23ecbb0 <loop+0x2e8>)
 23ecafa:	f00a f9c5 	bl	23f6e88 <spark_cloud_flag_connected>
 23ecafe:	2200      	movs	r2, #0
 23ecb00:	2102      	movs	r1, #2
 23ecb02:	6860      	ldr	r0, [r4, #4]
 23ecb04:	f00a fa5a 	bl	23f6fbc <network_disconnect>
      delay(1000);
 23ecb08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23ecb0c:	f00a fc24 	bl	23f7358 <delay>
      Cellular.off();
 23ecb10:	4620      	mov	r0, r4
 23ecb12:	f7f7 f9de 	bl	23e3ed2 <_ZN5spark13CellularClass3offEv>
      if (LORA_exists) {
 23ecb16:	4b2a      	ldr	r3, [pc, #168]	; (23ecbc0 <loop+0x2f8>)
 23ecb18:	781b      	ldrb	r3, [r3, #0]
 23ecb1a:	b113      	cbz	r3, 23ecb22 <loop+0x25a>
        rf95.sleep(); // Power Down LoRa. Note: it turn on when accessed
 23ecb1c:	4829      	ldr	r0, [pc, #164]	; (23ecbc4 <loop+0x2fc>)
 23ecb1e:	f004 fc4e 	bl	23f13be <_ZN7RH_RF955sleepEv>
      Output("Powering Down");
 23ecb22:	4829      	ldr	r0, [pc, #164]	; (23ecbc8 <loop+0x300>)
 23ecb24:	f7f7 fd30 	bl	23e4588 <_Z6OutputPKc>
      OLED_sleepDisplay();
 23ecb28:	f7f7 fb7c 	bl	23e4224 <_Z17OLED_sleepDisplayv>
      delay(5000);
 23ecb2c:	f241 3088 	movw	r0, #5000	; 0x1388
 23ecb30:	f00a fc12 	bl	23f7358 <delay>
		  pmic.disableBATFET();
 23ecb34:	4825      	ldr	r0, [pc, #148]	; (23ecbcc <loop+0x304>)
 23ecb36:	f00b fda8 	bl	23f868a <_ZN4PMIC13disableBATFETEv>
		  delay(2000);
 23ecb3a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23ecb3e:	f00a fc0b 	bl	23f7358 <delay>
      OLED_wakeDisplay();   // May need to toggle the Display reset pin.
 23ecb42:	f7f7 fb85 	bl	23e4250 <_Z16OLED_wakeDisplayv>
		  delay(2000);
 23ecb46:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23ecb4a:	f00a fc05 	bl	23f7358 <delay>
		  Output("Power Re-applied");
 23ecb4e:	4820      	ldr	r0, [pc, #128]	; (23ecbd0 <loop+0x308>)
 23ecb50:	f7f7 fd1a 	bl	23e4588 <_Z6OutputPKc>
		  pmic.enableBATFET();
 23ecb54:	481d      	ldr	r0, [pc, #116]	; (23ecbcc <loop+0x304>)
 23ecb56:	f00b fd83 	bl	23f8660 <_ZN4PMIC12enableBATFETEv>
		  Cellular.on();
 23ecb5a:	4815      	ldr	r0, [pc, #84]	; (23ecbb0 <loop+0x2e8>)
 23ecb5c:	f7f7 f9b3 	bl	23e3ec6 <_ZN5spark13CellularClass2onEv>
        spark_cloud_flag_connect();
 23ecb60:	f00a f984 	bl	23f6e6c <spark_cloud_flag_connect>
}
 23ecb64:	b005      	add	sp, #20
 23ecb66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      Wind_Distance_Air_Initialize();
 23ecb6a:	f7fe b99b 	b.w	23eaea4 <_Z28Wind_Distance_Air_Initializev>
}
 23ecb6e:	b005      	add	sp, #20
 23ecb70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23ecb72:	bf00      	nop
 23ecb74:	1006ae6c 	.word	0x1006ae6c
 23ecb78:	1006a166 	.word	0x1006a166
 23ecb7c:	1007ae48 	.word	0x1007ae48
 23ecb80:	023fe424 	.word	0x023fe424
 23ecb84:	1006aea0 	.word	0x1006aea0
 23ecb88:	1006a2b0 	.word	0x1006a2b0
 23ecb8c:	023fe438 	.word	0x023fe438
 23ecb90:	1006a2a8 	.word	0x1006a2a8
 23ecb94:	00dbba00 	.word	0x00dbba00
 23ecb98:	1007abd0 	.word	0x1007abd0
 23ecb9c:	1006a198 	.word	0x1006a198
 23ecba0:	1006a18c 	.word	0x1006a18c
 23ecba4:	1006a298 	.word	0x1006a298
 23ecba8:	023fe450 	.word	0x023fe450
 23ecbac:	023fe442 	.word	0x023fe442
 23ecbb0:	1007aeb4 	.word	0x1007aeb4
 23ecbb4:	023fe45d 	.word	0x023fe45d
 23ecbb8:	023fe467 	.word	0x023fe467
 23ecbbc:	023fe477 	.word	0x023fe477
 23ecbc0:	1006a2a1 	.word	0x1006a2a1
 23ecbc4:	1007aa78 	.word	0x1007aa78
 23ecbc8:	023fe482 	.word	0x023fe482
 23ecbcc:	1007aa48 	.word	0x1007aa48
 23ecbd0:	023fe490 	.word	0x023fe490

023ecbd4 <_ZL9xor_blockPhS_>:
  return pgm_read_byte (& s_inv [x]) ;
}


static void xor_block (byte * d, byte * s)
{
 23ecbd4:	b510      	push	{r4, lr}
 23ecbd6:	1d0b      	adds	r3, r1, #4
 23ecbd8:	3004      	adds	r0, #4
 23ecbda:	3114      	adds	r1, #20
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
    {
      *d++ ^= *s++ ;  // some unrolling
 23ecbdc:	f813 4c04 	ldrb.w	r4, [r3, #-4]
 23ecbe0:	f810 2c04 	ldrb.w	r2, [r0, #-4]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23ecbe4:	3304      	adds	r3, #4
      *d++ ^= *s++ ;  // some unrolling
 23ecbe6:	4062      	eors	r2, r4
 23ecbe8:	f800 2c04 	strb.w	r2, [r0, #-4]
      *d++ ^= *s++ ;
 23ecbec:	f813 4c07 	ldrb.w	r4, [r3, #-7]
 23ecbf0:	f810 2c03 	ldrb.w	r2, [r0, #-3]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23ecbf4:	3004      	adds	r0, #4
      *d++ ^= *s++ ;
 23ecbf6:	4062      	eors	r2, r4
 23ecbf8:	f800 2c07 	strb.w	r2, [r0, #-7]
      *d++ ^= *s++ ;
 23ecbfc:	f813 4c06 	ldrb.w	r4, [r3, #-6]
 23ecc00:	f810 2c06 	ldrb.w	r2, [r0, #-6]
 23ecc04:	4062      	eors	r2, r4
 23ecc06:	f800 2c06 	strb.w	r2, [r0, #-6]
      *d++ ^= *s++ ;
 23ecc0a:	f813 4c05 	ldrb.w	r4, [r3, #-5]
 23ecc0e:	f810 2c05 	ldrb.w	r2, [r0, #-5]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23ecc12:	428b      	cmp	r3, r1
      *d++ ^= *s++ ;
 23ecc14:	ea82 0204 	eor.w	r2, r2, r4
 23ecc18:	f800 2c05 	strb.w	r2, [r0, #-5]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23ecc1c:	d1de      	bne.n	23ecbdc <_ZL9xor_blockPhS_+0x8>
    }
}
 23ecc1e:	bd10      	pop	{r4, pc}

023ecc20 <_ZL12copy_and_keyPhS_S_>:

static void copy_and_key (byte * d, byte * s, byte * k)
{
 23ecc20:	b530      	push	{r4, r5, lr}
 23ecc22:	1d0b      	adds	r3, r1, #4
 23ecc24:	3204      	adds	r2, #4
 23ecc26:	3004      	adds	r0, #4
 23ecc28:	3114      	adds	r1, #20
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
    {
      *d++ = *s++ ^ *k++ ;  // some unrolling
 23ecc2a:	f813 4c04 	ldrb.w	r4, [r3, #-4]
 23ecc2e:	f812 5c04 	ldrb.w	r5, [r2, #-4]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23ecc32:	3304      	adds	r3, #4
      *d++ = *s++ ^ *k++ ;  // some unrolling
 23ecc34:	406c      	eors	r4, r5
 23ecc36:	f800 4c04 	strb.w	r4, [r0, #-4]
      *d++ = *s++ ^ *k++ ;
 23ecc3a:	f812 5c03 	ldrb.w	r5, [r2, #-3]
 23ecc3e:	f813 4c07 	ldrb.w	r4, [r3, #-7]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23ecc42:	3204      	adds	r2, #4
      *d++ = *s++ ^ *k++ ;
 23ecc44:	406c      	eors	r4, r5
 23ecc46:	f800 4c03 	strb.w	r4, [r0, #-3]
      *d++ = *s++ ^ *k++ ;
 23ecc4a:	f813 4c06 	ldrb.w	r4, [r3, #-6]
 23ecc4e:	f812 5c06 	ldrb.w	r5, [r2, #-6]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23ecc52:	3004      	adds	r0, #4
      *d++ = *s++ ^ *k++ ;
 23ecc54:	406c      	eors	r4, r5
 23ecc56:	f800 4c06 	strb.w	r4, [r0, #-6]
      *d++ = *s++ ^ *k++ ;
 23ecc5a:	f813 4c05 	ldrb.w	r4, [r3, #-5]
 23ecc5e:	f812 5c05 	ldrb.w	r5, [r2, #-5]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23ecc62:	428b      	cmp	r3, r1
      *d++ = *s++ ^ *k++ ;
 23ecc64:	ea84 0405 	eor.w	r4, r4, r5
 23ecc68:	f800 4c05 	strb.w	r4, [r0, #-5]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23ecc6c:	d1dd      	bne.n	23ecc2a <_ZL12copy_and_keyPhS_S_+0xa>
    }
}
 23ecc6e:	bd30      	pop	{r4, r5, pc}

023ecc70 <_ZN3AESC1Ev>:
    }
}

/******************************************************************************/

AES::AES(){
 23ecc70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23ecc72:	4a11      	ldr	r2, [pc, #68]	; (23eccb8 <_ZN3AESC1Ev+0x48>)
 23ecc74:	4603      	mov	r3, r0
 23ecc76:	4617      	mov	r7, r2
 23ecc78:	f500 758c 	add.w	r5, r0, #280	; 0x118
 23ecc7c:	f102 0610 	add.w	r6, r2, #16
 23ecc80:	462c      	mov	r4, r5
 23ecc82:	6810      	ldr	r0, [r2, #0]
 23ecc84:	6851      	ldr	r1, [r2, #4]
 23ecc86:	3208      	adds	r2, #8
 23ecc88:	c403      	stmia	r4!, {r0, r1}
 23ecc8a:	42b2      	cmp	r2, r6
 23ecc8c:	4625      	mov	r5, r4
 23ecc8e:	d1f7      	bne.n	23ecc80 <_ZN3AESC1Ev+0x10>
	byte ar_iv[8] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01 };
 23ecc90:	466a      	mov	r2, sp
 23ecc92:	6938      	ldr	r0, [r7, #16]
 23ecc94:	6871      	ldr	r1, [r6, #4]
 23ecc96:	c203      	stmia	r2!, {r0, r1}
	memcpy(iv,ar_iv,8);
 23ecc98:	466a      	mov	r2, sp
 23ecc9a:	ca03      	ldmia	r2!, {r0, r1}
	memcpy(iv+8,ar_iv,8);
 23ecc9c:	466a      	mov	r2, sp
	memcpy(iv,ar_iv,8);
 23ecc9e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
 23ecca2:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	memcpy(iv+8,ar_iv,8);
 23ecca6:	ca03      	ldmia	r2!, {r0, r1}
 23ecca8:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	arr_pad[11] = 0x0c;
	arr_pad[12] = 0x0d;
	arr_pad[13] = 0x0e;
	arr_pad[14] = 0x0f;
	arr_pad[15] = 0x10;
}
 23eccac:	4618      	mov	r0, r3
	memcpy(iv+8,ar_iv,8);
 23eccae:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
}
 23eccb2:	b003      	add	sp, #12
 23eccb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23eccb6:	bf00      	nop
 23eccb8:	023fc8b8 	.word	0x023fc8b8

023eccbc <_ZN3AES12copy_n_bytesEPhS0_h>:
}

/******************************************************************************/

void AES::copy_n_bytes (byte * d, byte * s, byte nn)
{
 23eccbc:	b570      	push	{r4, r5, r6, lr}
 23eccbe:	4618      	mov	r0, r3
 23eccc0:	460c      	mov	r4, r1
 23eccc2:	4615      	mov	r5, r2
  while (nn >= 4)
 23eccc4:	2803      	cmp	r0, #3
 23eccc6:	f101 0104 	add.w	r1, r1, #4
 23eccca:	f105 0504 	add.w	r5, r5, #4
 23eccce:	d811      	bhi.n	23eccf4 <_ZN3AES12copy_n_bytesEPhS0_h+0x38>
 23eccd0:	0898      	lsrs	r0, r3, #2
 23eccd2:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
 23eccd6:	440c      	add	r4, r1
 23eccd8:	4411      	add	r1, r2
 23eccda:	ebc0 1280 	rsb	r2, r0, r0, lsl #6
 23eccde:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 23ecce2:	fa51 f080 	uxtab	r0, r1, r0
      *d++ = *s++ ;
      *d++ = *s++ ;
      *d++ = *s++ ;
      nn -= 4 ;
    }
  while (nn--)
 23ecce6:	4281      	cmp	r1, r0
 23ecce8:	d017      	beq.n	23ecd1a <_ZN3AES12copy_n_bytesEPhS0_h+0x5e>
    *d++ = *s++ ;
 23eccea:	f811 3b01 	ldrb.w	r3, [r1], #1
 23eccee:	f804 3b01 	strb.w	r3, [r4], #1
  while (nn--)
 23eccf2:	e7f8      	b.n	23ecce6 <_ZN3AES12copy_n_bytesEPhS0_h+0x2a>
      *d++ = *s++ ;  // some unrolling
 23eccf4:	f815 6c04 	ldrb.w	r6, [r5, #-4]
      nn -= 4 ;
 23eccf8:	3804      	subs	r0, #4
      *d++ = *s++ ;  // some unrolling
 23eccfa:	f801 6c04 	strb.w	r6, [r1, #-4]
      *d++ = *s++ ;
 23eccfe:	f815 6c03 	ldrb.w	r6, [r5, #-3]
      nn -= 4 ;
 23ecd02:	b2c0      	uxtb	r0, r0
      *d++ = *s++ ;
 23ecd04:	f801 6c03 	strb.w	r6, [r1, #-3]
      *d++ = *s++ ;
 23ecd08:	f815 6c02 	ldrb.w	r6, [r5, #-2]
 23ecd0c:	f801 6c02 	strb.w	r6, [r1, #-2]
      *d++ = *s++ ;
 23ecd10:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 23ecd14:	f801 6c01 	strb.w	r6, [r1, #-1]
  while (nn >= 4)
 23ecd18:	e7d4      	b.n	23eccc4 <_ZN3AES12copy_n_bytesEPhS0_h+0x8>
}
 23ecd1a:	bd70      	pop	{r4, r5, r6, pc}

023ecd1c <_ZN3AES7set_keyEPhi>:
  switch (keylen)
 23ecd1c:	2a80      	cmp	r2, #128	; 0x80
{
 23ecd1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ecd22:	4604      	mov	r4, r0
 23ecd24:	4608      	mov	r0, r1
  switch (keylen)
 23ecd26:	d015      	beq.n	23ecd54 <_ZN3AES7set_keyEPhi+0x38>
 23ecd28:	dc0b      	bgt.n	23ecd42 <_ZN3AES7set_keyEPhi+0x26>
 23ecd2a:	2a18      	cmp	r2, #24
 23ecd2c:	d068      	beq.n	23ece00 <_ZN3AES7set_keyEPhi+0xe4>
 23ecd2e:	2a20      	cmp	r2, #32
 23ecd30:	d00c      	beq.n	23ecd4c <_ZN3AES7set_keyEPhi+0x30>
 23ecd32:	2a10      	cmp	r2, #16
 23ecd34:	d00e      	beq.n	23ecd54 <_ZN3AES7set_keyEPhi+0x38>
      round = 0;
 23ecd36:	2300      	movs	r3, #0
      return FAILURE;
 23ecd38:	20ff      	movs	r0, #255	; 0xff
      round = 0;
 23ecd3a:	6023      	str	r3, [r4, #0]
}
 23ecd3c:	b003      	add	sp, #12
 23ecd3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (keylen)
 23ecd42:	2ac0      	cmp	r2, #192	; 0xc0
 23ecd44:	d05c      	beq.n	23ece00 <_ZN3AES7set_keyEPhi+0xe4>
 23ecd46:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 23ecd4a:	d1f4      	bne.n	23ecd36 <_ZN3AES7set_keyEPhi+0x1a>
      round = 14 ;
 23ecd4c:	230e      	movs	r3, #14
      keylen = 32; // 14 rounds
 23ecd4e:	2620      	movs	r6, #32
      round = 14 ;
 23ecd50:	6023      	str	r3, [r4, #0]
      break;
 23ecd52:	e002      	b.n	23ecd5a <_ZN3AES7set_keyEPhi+0x3e>
      round = 10 ;
 23ecd54:	230a      	movs	r3, #10
      keylen = 16; // 10 rounds
 23ecd56:	2610      	movs	r6, #16
      round = 10 ;
 23ecd58:	6023      	str	r3, [r4, #0]
  hi = (round + 1) << 4 ;
 23ecd5a:	4621      	mov	r1, r4
  copy_n_bytes (key_sched, key, keylen) ;
 23ecd5c:	b2f7      	uxtb	r7, r6
 23ecd5e:	4602      	mov	r2, r0
  hi = (round + 1) << 4 ;
 23ecd60:	f851 5b04 	ldr.w	r5, [r1], #4
  copy_n_bytes (key_sched, key, keylen) ;
 23ecd64:	463b      	mov	r3, r7
 23ecd66:	4620      	mov	r0, r4
 23ecd68:	f7ff ffa8 	bl	23eccbc <_ZN3AES12copy_n_bytesEPhS0_h>
 23ecd6c:	463a      	mov	r2, r7
 23ecd6e:	46bc      	mov	ip, r7
  for (byte cc = keylen, rc = 1 ; cc < hi ; cc += N_COL)
 23ecd70:	2101      	movs	r1, #1
  hi = (round + 1) << 4 ;
 23ecd72:	3501      	adds	r5, #1
 23ecd74:	012d      	lsls	r5, r5, #4
  return pgm_read_byte (& s_fwd [x]) ;
 23ecd76:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 23ece34 <_ZN3AES7set_keyEPhi+0x118>
  hi = (round + 1) << 4 ;
 23ecd7a:	b2ed      	uxtb	r5, r5
  for (byte cc = keylen, rc = 1 ; cc < hi ; cc += N_COL)
 23ecd7c:	42aa      	cmp	r2, r5
 23ecd7e:	d256      	bcs.n	23ece2e <_ZN3AES7set_keyEPhi+0x112>
 23ecd80:	58a0      	ldr	r0, [r4, r2]
      if (cc == next)
 23ecd82:	4594      	cmp	ip, r2
        t[i] = key_sched [cc-4+i] ;
 23ecd84:	9001      	str	r0, [sp, #4]
      if (cc == next)
 23ecd86:	d13f      	bne.n	23ece08 <_ZN3AES7set_keyEPhi+0xec>
  return pgm_read_byte (& s_fwd [x]) ;
 23ecd88:	f3c0 2307 	ubfx	r3, r0, #8, #8
          t[0] = s_box (t[1]) ^ rc ;
 23ecd8c:	f81e 3003 	ldrb.w	r3, [lr, r3]
          rc = f2 (rc) ;
 23ecd90:	f011 0f80 	tst.w	r1, #128	; 0x80
          t[0] = s_box (t[1]) ^ rc ;
 23ecd94:	ea83 0301 	eor.w	r3, r3, r1
 23ecd98:	f88d 3004 	strb.w	r3, [sp, #4]
  return pgm_read_byte (& s_fwd [x]) ;
 23ecd9c:	f3c0 4307 	ubfx	r3, r0, #16, #8
          t[1] = s_box (t[2]) ;
 23ecda0:	f81e 3003 	ldrb.w	r3, [lr, r3]
 23ecda4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 23ecda8:	f88d 3005 	strb.w	r3, [sp, #5]
  return pgm_read_byte (& s_fwd [x]) ;
 23ecdac:	ea4f 6310 	mov.w	r3, r0, lsr #24
          t[2] = s_box (t[3]) ;
 23ecdb0:	f81e 3003 	ldrb.w	r3, [lr, r3]
  return pgm_read_byte (& s_fwd [x]) ;
 23ecdb4:	b2c0      	uxtb	r0, r0
          t[2] = s_box (t[3]) ;
 23ecdb6:	f88d 3006 	strb.w	r3, [sp, #6]
          t[3] = s_box (ttt) ;
 23ecdba:	f81e 3000 	ldrb.w	r3, [lr, r0]
          next += keylen ;
 23ecdbe:	44bc      	add	ip, r7
          rc = f2 (rc) ;
 23ecdc0:	bf18      	it	ne
 23ecdc2:	f081 011b 	eorne.w	r1, r1, #27
          next += keylen ;
 23ecdc6:	fa5f fc8c 	uxtb.w	ip, ip
          t[3] = s_box (ttt) ;
 23ecdca:	f88d 3007 	strb.w	r3, [sp, #7]
          rc = f2 (rc) ;
 23ecdce:	b2c9      	uxtb	r1, r1
      else if (keylen == 32 && (cc & 31) == 16)
 23ecdd0:	2304      	movs	r3, #4
 23ecdd2:	1bd0      	subs	r0, r2, r7
 23ecdd4:	b2c0      	uxtb	r0, r0
 23ecdd6:	3004      	adds	r0, #4
 23ecdd8:	3204      	adds	r2, #4
 23ecdda:	4420      	add	r0, r4
 23ecddc:	f10d 0904 	add.w	r9, sp, #4
 23ecde0:	eb04 0a02 	add.w	sl, r4, r2
        key_sched [cc + i] = key_sched [tt + i] ^ t[i] ;
 23ecde4:	f810 8b01 	ldrb.w	r8, [r0], #1
 23ecde8:	f819 bb01 	ldrb.w	fp, [r9], #1
      for (byte i = 0 ; i < N_COL ; i++)
 23ecdec:	3b01      	subs	r3, #1
        key_sched [cc + i] = key_sched [tt + i] ^ t[i] ;
 23ecdee:	ea88 080b 	eor.w	r8, r8, fp
      for (byte i = 0 ; i < N_COL ; i++)
 23ecdf2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
        key_sched [cc + i] = key_sched [tt + i] ^ t[i] ;
 23ecdf6:	f80a 8b01 	strb.w	r8, [sl], #1
      for (byte i = 0 ; i < N_COL ; i++)
 23ecdfa:	d1f3      	bne.n	23ecde4 <_ZN3AES7set_keyEPhi+0xc8>
  for (byte cc = keylen, rc = 1 ; cc < hi ; cc += N_COL)
 23ecdfc:	b2d2      	uxtb	r2, r2
 23ecdfe:	e7bd      	b.n	23ecd7c <_ZN3AES7set_keyEPhi+0x60>
      round = 12 ;
 23ece00:	230c      	movs	r3, #12
      keylen = 24; // 12 rounds
 23ece02:	2618      	movs	r6, #24
      round = 12 ;
 23ece04:	6023      	str	r3, [r4, #0]
      break;
 23ece06:	e7a8      	b.n	23ecd5a <_ZN3AES7set_keyEPhi+0x3e>
      else if (keylen == 32 && (cc & 31) == 16)
 23ece08:	2e20      	cmp	r6, #32
 23ece0a:	d1e1      	bne.n	23ecdd0 <_ZN3AES7set_keyEPhi+0xb4>
 23ece0c:	f002 031f 	and.w	r3, r2, #31
 23ece10:	2b10      	cmp	r3, #16
 23ece12:	d1dd      	bne.n	23ecdd0 <_ZN3AES7set_keyEPhi+0xb4>
 23ece14:	2304      	movs	r3, #4
 23ece16:	a801      	add	r0, sp, #4
            t[i] = s_box (t[i]) ;
 23ece18:	f890 8000 	ldrb.w	r8, [r0]
          for (byte i = 0 ; i < 4 ; i++)
 23ece1c:	3b01      	subs	r3, #1
            t[i] = s_box (t[i]) ;
 23ece1e:	f81e 8008 	ldrb.w	r8, [lr, r8]
          for (byte i = 0 ; i < 4 ; i++)
 23ece22:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            t[i] = s_box (t[i]) ;
 23ece26:	f800 8b01 	strb.w	r8, [r0], #1
          for (byte i = 0 ; i < 4 ; i++)
 23ece2a:	d1f5      	bne.n	23ece18 <_ZN3AES7set_keyEPhi+0xfc>
 23ece2c:	e7d0      	b.n	23ecdd0 <_ZN3AES7set_keyEPhi+0xb4>
  return SUCCESS ;
 23ece2e:	2000      	movs	r0, #0
 23ece30:	e784      	b.n	23ecd3c <_ZN3AES7set_keyEPhi+0x20>
 23ece32:	bf00      	nop
 23ece34:	023fe4e4 	.word	0x023fe4e4

023ece38 <_ZN3AES7decryptEPhS0_>:
}

/******************************************************************************/

byte AES::decrypt (byte plain [N_BLOCK], byte cipher [N_BLOCK])
{
 23ece38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ece3c:	ee07 2a10 	vmov	s14, r2
  if (round)
 23ece40:	6802      	ldr	r2, [r0, #0]
{
 23ece42:	4605      	mov	r5, r0
 23ece44:	b095      	sub	sp, #84	; 0x54
  if (round)
 23ece46:	2a00      	cmp	r2, #0
 23ece48:	f000 8179 	beq.w	23ed13e <_ZN3AES7decryptEPhS0_+0x306>
    {
      byte s1 [N_BLOCK] ;
      copy_and_key (s1, plain, (byte*) (key_sched + round * N_BLOCK)) ;
 23ece4c:	1d03      	adds	r3, r0, #4
 23ece4e:	ae0c      	add	r6, sp, #48	; 0x30
 23ece50:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23ece54:	4630      	mov	r0, r6
  return pgm_read_byte (& s_inv [x]) ;
 23ece56:	4cbb      	ldr	r4, [pc, #748]	; (23ed144 <_ZN3AES7decryptEPhS0_+0x30c>)
      copy_and_key (s1, plain, (byte*) (key_sched + round * N_BLOCK)) ;
 23ece58:	9307      	str	r3, [sp, #28]
 23ece5a:	f7ff fee1 	bl	23ecc20 <_ZL12copy_and_keyPhS_S_>
  return pgm_read_byte (& s_inv [x]) ;
 23ece5e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 23ece62:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
  st [0] = is_box (st[0]) ; st [4] = is_box (st [4]);
 23ece66:	5ce3      	ldrb	r3, [r4, r3]
  st [13] = is_box (st [9]) ; st [9] = is_box (st [5]) ;
 23ece68:	5ca2      	ldrb	r2, [r4, r2]
  st [0] = is_box (st[0]) ; st [4] = is_box (st [4]);
 23ece6a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  return pgm_read_byte (& s_inv [x]) ;
 23ece6e:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 23ece72:	ee07 6a90 	vmov	s15, r6
  st [0] = is_box (st[0]) ; st [4] = is_box (st [4]);
 23ece76:	5ce3      	ldrb	r3, [r4, r3]
 23ece78:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  return pgm_read_byte (& s_inv [x]) ;
 23ece7c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
  st [8] = is_box (st[8]) ; st [12] = is_box (st [12]);
 23ece80:	5ce3      	ldrb	r3, [r4, r3]
 23ece82:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  return pgm_read_byte (& s_inv [x]) ;
 23ece86:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
  st [8] = is_box (st[8]) ; st [12] = is_box (st [12]);
 23ece8a:	5ce3      	ldrb	r3, [r4, r3]
 23ece8c:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  byte tt = st[13] ;
 23ece90:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
  st [13] = is_box (st [9]) ; st [9] = is_box (st [5]) ;
 23ece94:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
  return pgm_read_byte (& s_inv [x]) ;
 23ece98:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
  st [5]  = is_box (st [1]) ; st [1] = is_box (tt) ;
 23ece9c:	5ce3      	ldrb	r3, [r4, r3]
  st [13] = is_box (st [9]) ; st [9] = is_box (st [5]) ;
 23ece9e:	5ca2      	ldrb	r2, [r4, r2]
 23ecea0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  return pgm_read_byte (& s_inv [x]) ;
 23ecea4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
  st [5]  = is_box (st [1]) ; st [1] = is_box (tt) ;
 23ecea8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 23eceac:	5ca2      	ldrb	r2, [r4, r2]
  tt = st [2] ; st [2] = is_box (st [10]) ; st [10] = is_box (tt) ;
 23eceae:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
  st [5]  = is_box (st [1]) ; st [1] = is_box (tt) ;
 23eceb2:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  return pgm_read_byte (& s_inv [x]) ;
 23eceb6:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
  tt = st [2] ; st [2] = is_box (st [10]) ; st [10] = is_box (tt) ;
 23eceba:	5ce3      	ldrb	r3, [r4, r3]
 23ecebc:	5ca2      	ldrb	r2, [r4, r2]
 23ecebe:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 23ecec2:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
  return pgm_read_byte (& s_inv [x]) ;
 23ecec6:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
  tt = st [6] ; st [6] = is_box (st [14]) ; st [14] = is_box (tt) ;
 23ececa:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 23ecece:	5ca2      	ldrb	r2, [r4, r2]
 23eced0:	5ce3      	ldrb	r3, [r4, r3]
 23eced2:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  return pgm_read_byte (& s_inv [x]) ;
 23eced6:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
  tt = st [6] ; st [6] = is_box (st [14]) ; st [14] = is_box (tt) ;
 23eceda:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
  st [3]  = is_box (st [7])  ; st [7]  = is_box (st [11]) ;
 23ecede:	5ca2      	ldrb	r2, [r4, r2]
  tt = st [3] ;
 23ecee0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  st [3]  = is_box (st [7])  ; st [7]  = is_box (st [11]) ;
 23ecee4:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
  return pgm_read_byte (& s_inv [x]) ;
 23ecee8:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
  st [11] = is_box (st [15]) ; st [15] = is_box (tt) ;
 23eceec:	5ce3      	ldrb	r3, [r4, r3]
  st [3]  = is_box (st [7])  ; st [7]  = is_box (st [11]) ;
 23eceee:	5ca2      	ldrb	r2, [r4, r2]
 23ecef0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  return pgm_read_byte (& s_inv [x]) ;
 23ecef4:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
  st [11] = is_box (st [15]) ; st [15] = is_box (tt) ;
 23ecef8:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
      inv_shift_sub_rows (s1) ;

      for (byte r = round ; --r ; )
 23ecefc:	682b      	ldr	r3, [r5, #0]
  st [11] = is_box (st [15]) ; st [15] = is_box (tt) ;
 23ecefe:	5ca2      	ldrb	r2, [r4, r2]
 23ecf00:	3b01      	subs	r3, #1
 23ecf02:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
      for (byte r = round ; --r ; )
 23ecf06:	b2da      	uxtb	r2, r3
 23ecf08:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 23ecf0c:	1d2b      	adds	r3, r5, #4
 23ecf0e:	9305      	str	r3, [sp, #20]
 23ecf10:	9b07      	ldr	r3, [sp, #28]
 23ecf12:	9a05      	ldr	r2, [sp, #20]
 23ecf14:	4293      	cmp	r3, r2
 23ecf16:	f000 8107 	beq.w	23ed128 <_ZN3AES7decryptEPhS0_+0x2f0>
       {
         byte s2 [N_BLOCK] ;
         copy_and_key (s2, s1, (byte*) (key_sched + r * N_BLOCK)) ;
 23ecf1a:	ee17 1a90 	vmov	r1, s15
 23ecf1e:	a810      	add	r0, sp, #64	; 0x40
 23ecf20:	f7ff fe7e 	bl	23ecc20 <_ZL12copy_and_keyPhS_S_>
 23ecf24:	ab0c      	add	r3, sp, #48	; 0x30
 23ecf26:	f04f 0b00 	mov.w	fp, #0
 23ecf2a:	ee07 3a90 	vmov	s15, r3
 23ecf2e:	f10d 0940 	add.w	r9, sp, #64	; 0x40
      byte a1 = st [i] ;
 23ecf32:	f899 3000 	ldrb.w	r3, [r9]
  for (byte i = 0 ; i < N_BLOCK ; i += N_COL)
 23ecf36:	f109 0904 	add.w	r9, r9, #4
      byte a1 = st [i] ;
 23ecf3a:	9306      	str	r3, [sp, #24]
      byte b1 = st [i+1] ;
 23ecf3c:	f819 3c03 	ldrb.w	r3, [r9, #-3]
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ecf40:	9906      	ldr	r1, [sp, #24]
      byte b1 = st [i+1] ;
 23ecf42:	9302      	str	r3, [sp, #8]
      byte c1 = st [i+2] ;
 23ecf44:	f819 3c02 	ldrb.w	r3, [r9, #-2]
 23ecf48:	9303      	str	r3, [sp, #12]
      byte d1 = st [i+3] ;
 23ecf4a:	f819 3c01 	ldrb.w	r3, [r9, #-1]
 23ecf4e:	9304      	str	r3, [sp, #16]
      byte a2 = f2(a1), b2 = f2(b1), c2 = f2(c1), d2 = f2(d1) ;
 23ecf50:	f919 3c04 	ldrsb.w	r3, [r9, #-4]
 23ecf54:	2b00      	cmp	r3, #0
 23ecf56:	9b06      	ldr	r3, [sp, #24]
 23ecf58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23ecf5c:	bfb8      	it	lt
 23ecf5e:	f083 031b 	eorlt.w	r3, r3, #27
 23ecf62:	fa5f fa83 	uxtb.w	sl, r3
 23ecf66:	9b02      	ldr	r3, [sp, #8]
 23ecf68:	ea4f 024a 	mov.w	r2, sl, lsl #1
 23ecf6c:	f013 0f80 	tst.w	r3, #128	; 0x80
 23ecf70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23ecf74:	bf18      	it	ne
 23ecf76:	f083 031b 	eorne.w	r3, r3, #27
 23ecf7a:	b2db      	uxtb	r3, r3
 23ecf7c:	9300      	str	r3, [sp, #0]
 23ecf7e:	9b03      	ldr	r3, [sp, #12]
 23ecf80:	f013 0f80 	tst.w	r3, #128	; 0x80
 23ecf84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23ecf88:	bf18      	it	ne
 23ecf8a:	f083 031b 	eorne.w	r3, r3, #27
 23ecf8e:	b2db      	uxtb	r3, r3
 23ecf90:	9301      	str	r3, [sp, #4]
 23ecf92:	9b04      	ldr	r3, [sp, #16]
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
 23ecf94:	9d01      	ldr	r5, [sp, #4]
      byte a2 = f2(a1), b2 = f2(b1), c2 = f2(c1), d2 = f2(d1) ;
 23ecf96:	f013 0f80 	tst.w	r3, #128	; 0x80
 23ecf9a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23ecf9e:	bf18      	it	ne
 23ecfa0:	f083 031b 	eorne.w	r3, r3, #27
 23ecfa4:	b2d8      	uxtb	r0, r3
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
 23ecfa6:	9b00      	ldr	r3, [sp, #0]
 23ecfa8:	f01a 0f80 	tst.w	sl, #128	; 0x80
 23ecfac:	bf18      	it	ne
 23ecfae:	f082 021b 	eorne.w	r2, r2, #27
 23ecfb2:	f013 0f80 	tst.w	r3, #128	; 0x80
 23ecfb6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23ecfba:	ea4f 0c45 	mov.w	ip, r5, lsl #1
 23ecfbe:	bf18      	it	ne
 23ecfc0:	f083 031b 	eorne.w	r3, r3, #27
 23ecfc4:	f015 0f80 	tst.w	r5, #128	; 0x80
 23ecfc8:	b2d2      	uxtb	r2, r2
 23ecfca:	ea4f 0740 	mov.w	r7, r0, lsl #1
 23ecfce:	bf18      	it	ne
 23ecfd0:	f08c 0c1b 	eorne.w	ip, ip, #27
 23ecfd4:	f010 0f80 	tst.w	r0, #128	; 0x80
 23ecfd8:	ea4f 0842 	mov.w	r8, r2, lsl #1
 23ecfdc:	bf18      	it	ne
 23ecfde:	f087 071b 	eorne.w	r7, r7, #27
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ecfe2:	f012 0f80 	tst.w	r2, #128	; 0x80
 23ecfe6:	bf18      	it	ne
 23ecfe8:	f088 081b 	eorne.w	r8, r8, #27
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
 23ecfec:	b2db      	uxtb	r3, r3
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ecfee:	fa5f f888 	uxtb.w	r8, r8
 23ecff2:	f013 0f80 	tst.w	r3, #128	; 0x80
 23ecff6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ecffa:	ea81 0108 	eor.w	r1, r1, r8
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ecffe:	bf18      	it	ne
 23ed000:	f08e 0e1b 	eorne.w	lr, lr, #27
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ed004:	9108      	str	r1, [sp, #32]
 23ed006:	9902      	ldr	r1, [sp, #8]
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
 23ed008:	fa5f fc8c 	uxtb.w	ip, ip
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ed00c:	fa5f fe8e 	uxtb.w	lr, lr
 23ed010:	f01c 0f80 	tst.w	ip, #128	; 0x80
 23ed014:	ea4f 064c 	mov.w	r6, ip, lsl #1
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ed018:	ea81 010e 	eor.w	r1, r1, lr
 23ed01c:	9109      	str	r1, [sp, #36]	; 0x24
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ed01e:	bf18      	it	ne
 23ed020:	f086 061b 	eorne.w	r6, r6, #27
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ed024:	9903      	ldr	r1, [sp, #12]
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
 23ed026:	b2ff      	uxtb	r7, r7
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ed028:	b2f6      	uxtb	r6, r6
 23ed02a:	f017 0f80 	tst.w	r7, #128	; 0x80
 23ed02e:	ea4f 0547 	mov.w	r5, r7, lsl #1
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ed032:	ea81 0106 	eor.w	r1, r1, r6
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ed036:	bf18      	it	ne
 23ed038:	f085 051b 	eorne.w	r5, r5, #27
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ed03c:	910a      	str	r1, [sp, #40]	; 0x28
 23ed03e:	9904      	ldr	r1, [sp, #16]
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ed040:	b2ed      	uxtb	r5, r5
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ed042:	4069      	eors	r1, r5
 23ed044:	910b      	str	r1, [sp, #44]	; 0x2c
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23ed046:	9903      	ldr	r1, [sp, #12]
      byte ac = a8 ^ a4,bc = b8 ^ b4,cc = c8 ^ c4,dc = d8 ^ d4 ;
 23ed048:	407d      	eors	r5, r7
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23ed04a:	ea81 070a 	eor.w	r7, r1, sl
 23ed04e:	9900      	ldr	r1, [sp, #0]
      byte ac = a8 ^ a4,bc = b8 ^ b4,cc = c8 ^ c4,dc = d8 ^ d4 ;
 23ed050:	ea82 0208 	eor.w	r2, r2, r8
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23ed054:	404f      	eors	r7, r1
 23ed056:	9909      	ldr	r1, [sp, #36]	; 0x24
 23ed058:	4057      	eors	r7, r2
      byte ac = a8 ^ a4,bc = b8 ^ b4,cc = c8 ^ c4,dc = d8 ^ d4 ;
 23ed05a:	ea8c 0606 	eor.w	r6, ip, r6
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23ed05e:	404f      	eors	r7, r1
  return pgm_read_byte (& s_inv [x]) ;
 23ed060:	990b      	ldr	r1, [sp, #44]	; 0x2c
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23ed062:	4077      	eors	r7, r6
  return pgm_read_byte (& s_inv [x]) ;
 23ed064:	404f      	eors	r7, r1
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23ed066:	ee17 1a90 	vmov	r1, s15
 23ed06a:	5de7      	ldrb	r7, [r4, r7]
      byte ac = a8 ^ a4,bc = b8 ^ b4,cc = c8 ^ c4,dc = d8 ^ d4 ;
 23ed06c:	ea83 030e 	eor.w	r3, r3, lr
  return pgm_read_byte (& s_inv [x]) ;
 23ed070:	fa5f fe8b 	uxtb.w	lr, fp
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23ed074:	f80b 7001 	strb.w	r7, [fp, r1]
      dt[(i+5)&15]  = is_box (a9     ^  bc^b2  ^  c9^c2  ^  dc^d1) ;
 23ed078:	f10e 0705 	add.w	r7, lr, #5
 23ed07c:	a914      	add	r1, sp, #80	; 0x50
 23ed07e:	f007 070f 	and.w	r7, r7, #15
 23ed082:	440f      	add	r7, r1
 23ed084:	9904      	ldr	r1, [sp, #16]
  for (byte i = 0 ; i < N_BLOCK ; i += N_COL)
 23ed086:	f10b 0b04 	add.w	fp, fp, #4
      dt[(i+5)&15]  = is_box (a9     ^  bc^b2  ^  c9^c2  ^  dc^d1) ;
 23ed08a:	468c      	mov	ip, r1
 23ed08c:	9900      	ldr	r1, [sp, #0]
  for (byte i = 0 ; i < N_BLOCK ; i += N_COL)
 23ed08e:	f1bb 0f10 	cmp.w	fp, #16
      dt[(i+5)&15]  = is_box (a9     ^  bc^b2  ^  c9^c2  ^  dc^d1) ;
 23ed092:	ea8c 0c01 	eor.w	ip, ip, r1
 23ed096:	9901      	ldr	r1, [sp, #4]
 23ed098:	ea81 0c0c 	eor.w	ip, r1, ip
 23ed09c:	9908      	ldr	r1, [sp, #32]
 23ed09e:	ea81 0c0c 	eor.w	ip, r1, ip
 23ed0a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 23ed0a4:	ea83 0c0c 	eor.w	ip, r3, ip
 23ed0a8:	ea81 0c0c 	eor.w	ip, r1, ip
  return pgm_read_byte (& s_inv [x]) ;
 23ed0ac:	ea85 0c0c 	eor.w	ip, r5, ip
      dt[(i+5)&15]  = is_box (a9     ^  bc^b2  ^  c9^c2  ^  dc^d1) ;
 23ed0b0:	f814 c00c 	ldrb.w	ip, [r4, ip]
      dt[(i+10)&15] = is_box (ac^a1  ^  b9     ^  cc^c2  ^  d9^d2) ;
 23ed0b4:	a914      	add	r1, sp, #80	; 0x50
      dt[(i+5)&15]  = is_box (a9     ^  bc^b2  ^  c9^c2  ^  dc^d1) ;
 23ed0b6:	f807 cc20 	strb.w	ip, [r7, #-32]
      dt[(i+10)&15] = is_box (ac^a1  ^  b9     ^  cc^c2  ^  d9^d2) ;
 23ed0ba:	f10e 070a 	add.w	r7, lr, #10
 23ed0be:	f007 070f 	and.w	r7, r7, #15
 23ed0c2:	440f      	add	r7, r1
 23ed0c4:	9906      	ldr	r1, [sp, #24]
 23ed0c6:	468c      	mov	ip, r1
 23ed0c8:	9901      	ldr	r1, [sp, #4]
 23ed0ca:	ea8c 0801 	eor.w	r8, ip, r1
 23ed0ce:	ea80 0808 	eor.w	r8, r0, r8
 23ed0d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 23ed0d4:	ea82 0208 	eor.w	r2, r2, r8
 23ed0d8:	ea82 0201 	eor.w	r2, r2, r1
  return pgm_read_byte (& s_inv [x]) ;
 23ed0dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
      dt[(i+10)&15] = is_box (ac^a1  ^  b9     ^  cc^c2  ^  d9^d2) ;
 23ed0de:	ea82 0206 	eor.w	r2, r2, r6
  return pgm_read_byte (& s_inv [x]) ;
 23ed0e2:	ea82 0201 	eor.w	r2, r2, r1
      dt[(i+10)&15] = is_box (ac^a1  ^  b9     ^  cc^c2  ^  d9^d2) ;
 23ed0e6:	5ca2      	ldrb	r2, [r4, r2]
      dt[(i+15)&15] = is_box (a9^a2  ^  bc^b1  ^  c9     ^  dc^d2) ;
 23ed0e8:	a914      	add	r1, sp, #80	; 0x50
      dt[(i+10)&15] = is_box (ac^a1  ^  b9     ^  cc^c2  ^  d9^d2) ;
 23ed0ea:	f807 2c20 	strb.w	r2, [r7, #-32]
      dt[(i+15)&15] = is_box (a9^a2  ^  bc^b1  ^  c9     ^  dc^d2) ;
 23ed0ee:	f10e 020f 	add.w	r2, lr, #15
 23ed0f2:	f002 020f 	and.w	r2, r2, #15
 23ed0f6:	440a      	add	r2, r1
 23ed0f8:	9902      	ldr	r1, [sp, #8]
 23ed0fa:	ea81 0e0a 	eor.w	lr, r1, sl
 23ed0fe:	9908      	ldr	r1, [sp, #32]
 23ed100:	ea80 0e0e 	eor.w	lr, r0, lr
 23ed104:	ea81 0e0e 	eor.w	lr, r1, lr
 23ed108:	990a      	ldr	r1, [sp, #40]	; 0x28
 23ed10a:	ea83 030e 	eor.w	r3, r3, lr
 23ed10e:	ea81 0003 	eor.w	r0, r1, r3
  return pgm_read_byte (& s_inv [x]) ;
 23ed112:	ea85 0500 	eor.w	r5, r5, r0
      dt[(i+15)&15] = is_box (a9^a2  ^  bc^b1  ^  c9     ^  dc^d2) ;
 23ed116:	5d63      	ldrb	r3, [r4, r5]
 23ed118:	f802 3c20 	strb.w	r3, [r2, #-32]
  for (byte i = 0 ; i < N_BLOCK ; i += N_COL)
 23ed11c:	f47f af09 	bne.w	23ecf32 <_ZN3AES7decryptEPhS0_+0xfa>
 23ed120:	9b05      	ldr	r3, [sp, #20]
 23ed122:	3b10      	subs	r3, #16
 23ed124:	9305      	str	r3, [sp, #20]
      for (byte r = round ; --r ; )
 23ed126:	e6f3      	b.n	23ecf10 <_ZN3AES7decryptEPhS0_+0xd8>
         inv_mix_sub_columns (s1, s2) ;
       }
      copy_and_key (cipher, s1, (byte*) (key_sched)) ;
 23ed128:	ee17 0a10 	vmov	r0, s14
 23ed12c:	ee17 1a90 	vmov	r1, s15
 23ed130:	9a07      	ldr	r2, [sp, #28]
 23ed132:	f7ff fd75 	bl	23ecc20 <_ZL12copy_and_keyPhS_S_>
    }
  else
    return FAILURE ;
  return SUCCESS ;
 23ed136:	2000      	movs	r0, #0
}
 23ed138:	b015      	add	sp, #84	; 0x54
 23ed13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return FAILURE ;
 23ed13e:	20ff      	movs	r0, #255	; 0xff
 23ed140:	e7fa      	b.n	23ed138 <_ZN3AES7decryptEPhS0_+0x300>
 23ed142:	bf00      	nop
 23ed144:	023fe5e4 	.word	0x023fe5e4

023ed148 <_ZN3AES11cbc_decryptEPhS0_iS0_>:

/******************************************************************************/

byte AES::cbc_decrypt (byte * cipher, byte * plain, int n_block, byte iv [N_BLOCK])
{
 23ed148:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 23ed14c:	4607      	mov	r7, r0
 23ed14e:	460d      	mov	r5, r1
 23ed150:	4616      	mov	r6, r2
 23ed152:	461c      	mov	r4, r3
 23ed154:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  while (n_block--)
 23ed158:	b1ec      	cbz	r4, 23ed196 <_ZN3AES11cbc_decryptEPhS0_iS0_+0x4e>
    {
      byte tmp [N_BLOCK] ;
      copy_n_bytes (tmp, cipher, N_BLOCK) ;
 23ed15a:	2310      	movs	r3, #16
 23ed15c:	462a      	mov	r2, r5
 23ed15e:	4669      	mov	r1, sp
 23ed160:	4638      	mov	r0, r7
 23ed162:	f7ff fdab 	bl	23eccbc <_ZN3AES12copy_n_bytesEPhS0_h>
      if (decrypt (cipher, plain) != SUCCESS)
 23ed166:	4632      	mov	r2, r6
 23ed168:	4629      	mov	r1, r5
 23ed16a:	4638      	mov	r0, r7
 23ed16c:	f7ff fe64 	bl	23ece38 <_ZN3AES7decryptEPhS0_>
 23ed170:	3c01      	subs	r4, #1
 23ed172:	b118      	cbz	r0, 23ed17c <_ZN3AES11cbc_decryptEPhS0_iS0_+0x34>
        return FAILURE ;
 23ed174:	20ff      	movs	r0, #255	; 0xff
      copy_n_bytes (iv, tmp, N_BLOCK) ;
      plain  += N_BLOCK ;
      cipher += N_BLOCK;
    }
  return SUCCESS ;
}
 23ed176:	b004      	add	sp, #16
 23ed178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      xor_block (plain, iv) ;
 23ed17c:	4630      	mov	r0, r6
 23ed17e:	4641      	mov	r1, r8
 23ed180:	f7ff fd28 	bl	23ecbd4 <_ZL9xor_blockPhS_>
      copy_n_bytes (iv, tmp, N_BLOCK) ;
 23ed184:	2310      	movs	r3, #16
 23ed186:	466a      	mov	r2, sp
 23ed188:	4641      	mov	r1, r8
 23ed18a:	4638      	mov	r0, r7
 23ed18c:	f7ff fd96 	bl	23eccbc <_ZN3AES12copy_n_bytesEPhS0_h>
      plain  += N_BLOCK ;
 23ed190:	3610      	adds	r6, #16
      cipher += N_BLOCK;
 23ed192:	3510      	adds	r5, #16
  while (n_block--)
 23ed194:	e7e0      	b.n	23ed158 <_ZN3AES11cbc_decryptEPhS0_iS0_+0x10>
  return SUCCESS ;
 23ed196:	4620      	mov	r0, r4
 23ed198:	e7ed      	b.n	23ed176 <_ZN3AES11cbc_decryptEPhS0_iS0_+0x2e>

023ed19a <_ZN3AES6set_IVEy>:
  return SUCCESS ;
}

/*****************************************************************************/

void AES::set_IV(unsigned long long int IVCl){
 23ed19a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	memcpy(iv,&IVCl,8);
 23ed19c:	466d      	mov	r5, sp
void AES::set_IV(unsigned long long int IVCl){
 23ed19e:	e9cd 2300 	strd	r2, r3, [sp]
 23ed1a2:	4604      	mov	r4, r0
	memcpy(iv,&IVCl,8);
 23ed1a4:	cd03      	ldmia	r5!, {r0, r1}
	memcpy(iv+8,&IVCl,8);
 23ed1a6:	466d      	mov	r5, sp
	memcpy(iv,&IVCl,8);
 23ed1a8:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 23ed1ac:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	IVC = IVCl;
 23ed1b0:	e9c4 233e 	strd	r2, r3, [r4, #248]	; 0xf8
	memcpy(iv+8,&IVCl,8);
 23ed1b4:	cd03      	ldmia	r5!, {r0, r1}
 23ed1b6:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
 23ed1ba:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
}
 23ed1be:	b003      	add	sp, #12
 23ed1c0:	bd30      	pop	{r4, r5, pc}

023ed1c2 <_ZN3AES6iv_incEv>:

/******************************************************************************/

void AES::iv_inc(){
	IVC += 1;
 23ed1c2:	e9d0 323e 	ldrd	r3, r2, [r0, #248]	; 0xf8
 23ed1c6:	3301      	adds	r3, #1
 23ed1c8:	f142 0200 	adc.w	r2, r2, #0
 23ed1cc:	e9c0 323e 	strd	r3, r2, [r0, #248]	; 0xf8
	memcpy(iv,&IVC,8);
 23ed1d0:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 23ed1d4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ed1d8:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
 23ed1dc:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
	memcpy(iv+8,&IVC,8);
 23ed1e0:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 23ed1e4:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 23ed1e8:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
 23ed1ec:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
}
 23ed1f0:	4770      	bx	lr

023ed1f2 <_ZN3AES6get_IVEPh>:


/******************************************************************************/

void AES::get_IV(byte *out){
	memcpy(out,&IVC,8);
 23ed1f2:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 23ed1f6:	600b      	str	r3, [r1, #0]
 23ed1f8:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
 23ed1fc:	604b      	str	r3, [r1, #4]
	memcpy(out+8,&IVC,8);
 23ed1fe:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 23ed202:	608b      	str	r3, [r1, #8]
 23ed204:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
 23ed208:	60cb      	str	r3, [r1, #12]
}
 23ed20a:	4770      	bx	lr

023ed20c <_ZN3AES14do_aes_decryptEPhiS0_S0_iS0_>:
	cbc_encrypt (plain_p, cipher, blocks);
}

/******************************************************************************/

void AES::do_aes_decrypt(byte *cipher,int size_c,byte *plain,byte *key, int bits, byte ivl [N_BLOCK]){
 23ed20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ed210:	4614      	mov	r4, r2
 23ed212:	461f      	mov	r7, r3
 23ed214:	4605      	mov	r5, r0
 23ed216:	460e      	mov	r6, r1
	size = sizel;
 23ed218:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
	set_size(size_c);
	int blocks = size_c / N_BLOCK;
	set_key (key, bits);
 23ed21c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
void AES::do_aes_decrypt(byte *cipher,int size_c,byte *plain,byte *key, int bits, byte ivl [N_BLOCK]){
 23ed220:	f8dd 8020 	ldr.w	r8, [sp, #32]
	set_key (key, bits);
 23ed224:	f7ff fd7a 	bl	23ecd1c <_ZN3AES7set_keyEPhi>
	int blocks = size_c / N_BLOCK;
 23ed228:	2c00      	cmp	r4, #0
 23ed22a:	bfb8      	it	lt
 23ed22c:	340f      	addlt	r4, #15
	cbc_decrypt (cipher,plain, blocks, ivl);
 23ed22e:	463a      	mov	r2, r7
 23ed230:	4631      	mov	r1, r6
 23ed232:	4628      	mov	r0, r5
 23ed234:	f8cd 8018 	str.w	r8, [sp, #24]
 23ed238:	1123      	asrs	r3, r4, #4
}
 23ed23a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	cbc_decrypt (cipher,plain, blocks, ivl);
 23ed23e:	f7ff bf83 	b.w	23ed148 <_ZN3AES11cbc_decryptEPhS0_iS0_>

023ed242 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  /*! @brief Whether we should automatically change the range (if possible) for
     higher precision
      @param enabled True if we will try to autorange */
  virtual void enableAutoRange(bool enabled) {
    (void)enabled; /* suppress unused warning */
  };
 23ed242:	4770      	bx	lr

023ed244 <_ZN15Adafruit_BME280C1Ev>:
#include <Wire.h>

/*!
 *  @brief  class constructor
 */
Adafruit_BME280::Adafruit_BME280() : _cs(-1), _mosi(-1), _miso(-1), _sck(-1) {}
 23ed244:	2200      	movs	r2, #0
 23ed246:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 23ed24a:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23ed24e:	e9c0 1208 	strd	r1, r2, [r0, #32]
 23ed252:	6102      	str	r2, [r0, #16]
 23ed254:	4770      	bx	lr

023ed256 <_ZN15Adafruit_BME2807spixferEh>:
 *   @brief  Encapsulate hardware and software SPI transfer into one
 * function
 *   @param x the data byte to transfer
 *   @returns the data byte read from the device
 */
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 23ed256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // hardware SPI
  if (_sck == -1)
 23ed25a:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 23ed25e:	4604      	mov	r4, r0
  if (_sck == -1)
 23ed260:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 23ed262:	460f      	mov	r7, r1
  if (_sck == -1)
 23ed264:	d104      	bne.n	23ed270 <_ZN15Adafruit_BME2807spixferEh+0x1a>
    digitalWrite(_sck, HIGH);
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
}
 23ed266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return _spi->transfer(x);
 23ed26a:	6840      	ldr	r0, [r0, #4]
 23ed26c:	f00b bbec 	b.w	23f8a48 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
 23ed270:	2500      	movs	r5, #0
  for (int i = 7; i >= 0; i--) {
 23ed272:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1 << i));
 23ed274:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
 23ed278:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
 23ed27c:	2100      	movs	r1, #0
 23ed27e:	b280      	uxth	r0, r0
 23ed280:	f00c fa5d 	bl	23f973e <digitalWrite>
    digitalWrite(_mosi, x & (1 << i));
 23ed284:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 23ed288:	fa08 f106 	lsl.w	r1, r8, r6
 23ed28c:	4039      	ands	r1, r7
 23ed28e:	b280      	uxth	r0, r0
 23ed290:	f00c fa55 	bl	23f973e <digitalWrite>
    digitalWrite(_sck, HIGH);
 23ed294:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
 23ed298:	2101      	movs	r1, #1
 23ed29a:	b280      	uxth	r0, r0
 23ed29c:	f00c fa4f 	bl	23f973e <digitalWrite>
    if (digitalRead(_miso))
 23ed2a0:	f994 0022 	ldrsb.w	r0, [r4, #34]	; 0x22
    reply <<= 1;
 23ed2a4:	006d      	lsls	r5, r5, #1
    if (digitalRead(_miso))
 23ed2a6:	b280      	uxth	r0, r0
    reply <<= 1;
 23ed2a8:	b2ed      	uxtb	r5, r5
    if (digitalRead(_miso))
 23ed2aa:	f00c fa61 	bl	23f9770 <digitalRead>
 23ed2ae:	b108      	cbz	r0, 23ed2b4 <_ZN15Adafruit_BME2807spixferEh+0x5e>
      reply |= 1;
 23ed2b0:	f045 0501 	orr.w	r5, r5, #1
  for (int i = 7; i >= 0; i--) {
 23ed2b4:	3e01      	subs	r6, #1
 23ed2b6:	d2df      	bcs.n	23ed278 <_ZN15Adafruit_BME2807spixferEh+0x22>
}
 23ed2b8:	4628      	mov	r0, r5
 23ed2ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

023ed2c0 <_ZN15Adafruit_BME2806write8Ehh>:
/*!
 *   @brief  Writes an 8 bit value over I2C or SPI
 *   @param reg the register address to write to
 *   @param value the value to write to the register
 */
void Adafruit_BME280::write8(byte reg, byte value) {
 23ed2c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (_cs == -1) {
 23ed2c2:	f990 3020 	ldrsb.w	r3, [r0, #32]
void Adafruit_BME280::write8(byte reg, byte value) {
 23ed2c6:	4604      	mov	r4, r0
  if (_cs == -1) {
 23ed2c8:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
 23ed2ca:	460e      	mov	r6, r1
 23ed2cc:	4615      	mov	r5, r2
  if (_cs == -1) {
 23ed2ce:	d113      	bne.n	23ed2f8 <_ZN15Adafruit_BME2806write8Ehh+0x38>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23ed2d0:	7d01      	ldrb	r1, [r0, #20]
 23ed2d2:	6800      	ldr	r0, [r0, #0]
 23ed2d4:	f00a fe06 	bl	23f7ee4 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23ed2d8:	6820      	ldr	r0, [r4, #0]
 23ed2da:	4631      	mov	r1, r6
 23ed2dc:	6803      	ldr	r3, [r0, #0]
 23ed2de:	689b      	ldr	r3, [r3, #8]
 23ed2e0:	4798      	blx	r3
    _wire->write((uint8_t)value);
 23ed2e2:	6820      	ldr	r0, [r4, #0]
 23ed2e4:	4629      	mov	r1, r5
 23ed2e6:	6803      	ldr	r3, [r0, #0]
 23ed2e8:	689b      	ldr	r3, [r3, #8]
 23ed2ea:	4798      	blx	r3
    _wire->endTransmission();
 23ed2ec:	6820      	ldr	r0, [r4, #0]
    spixfer(value);
    digitalWrite(_cs, HIGH);
    if (_sck == -1)
      _spi->endTransaction(); // release the SPI bus
  }
}
 23ed2ee:	b004      	add	sp, #16
 23ed2f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _wire->endTransmission();
 23ed2f4:	f00a be01 	b.w	23f7efa <_ZN7TwoWire15endTransmissionEv>
    if (_sck == -1)
 23ed2f8:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
 23ed2fc:	3301      	adds	r3, #1
 23ed2fe:	d10d      	bne.n	23ed31c <_ZN15Adafruit_BME2806write8Ehh+0x5c>
      dataMode_{dataMode}
 23ed300:	4b17      	ldr	r3, [pc, #92]	; (23ed360 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23ed302:	4669      	mov	r1, sp
 23ed304:	9300      	str	r3, [sp, #0]
 23ed306:	2300      	movs	r3, #0
 23ed308:	f88d 3004 	strb.w	r3, [sp, #4]
 23ed30c:	4b15      	ldr	r3, [pc, #84]	; (23ed364 <_ZN15Adafruit_BME2806write8Ehh+0xa4>)
 23ed30e:	6840      	ldr	r0, [r0, #4]
 23ed310:	9302      	str	r3, [sp, #8]
 23ed312:	2301      	movs	r3, #1
 23ed314:	f8ad 300c 	strh.w	r3, [sp, #12]
 23ed318:	f00b fb28 	bl	23f896c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23ed31c:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23ed320:	2100      	movs	r1, #0
 23ed322:	b280      	uxth	r0, r0
 23ed324:	f00c fa0b 	bl	23f973e <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
 23ed328:	f006 017f 	and.w	r1, r6, #127	; 0x7f
 23ed32c:	4620      	mov	r0, r4
 23ed32e:	f7ff ff92 	bl	23ed256 <_ZN15Adafruit_BME2807spixferEh>
    spixfer(value);
 23ed332:	4629      	mov	r1, r5
 23ed334:	4620      	mov	r0, r4
 23ed336:	f7ff ff8e 	bl	23ed256 <_ZN15Adafruit_BME2807spixferEh>
    digitalWrite(_cs, HIGH);
 23ed33a:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23ed33e:	2101      	movs	r1, #1
 23ed340:	b280      	uxth	r0, r0
 23ed342:	f00c f9fc 	bl	23f973e <digitalWrite>
    if (_sck == -1)
 23ed346:	f994 3023 	ldrsb.w	r3, [r4, #35]	; 0x23
 23ed34a:	3301      	adds	r3, #1
 23ed34c:	d105      	bne.n	23ed35a <_ZN15Adafruit_BME2806write8Ehh+0x9a>
      _spi->endTransaction(); // release the SPI bus
 23ed34e:	6860      	ldr	r0, [r4, #4]
}
 23ed350:	b004      	add	sp, #16
 23ed352:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      _spi->endTransaction(); // release the SPI bus
 23ed356:	f00b baef 	b.w	23f8938 <_ZN8SPIClass14endTransactionEv>
}
 23ed35a:	b004      	add	sp, #16
 23ed35c:	bd70      	pop	{r4, r5, r6, pc}
 23ed35e:	bf00      	nop
 23ed360:	023fe4ac 	.word	0x023fe4ac
 23ed364:	0007a120 	.word	0x0007a120

023ed368 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
                                  standby_duration duration) {
 23ed368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23ed36a:	4604      	mov	r4, r0
  _measReg.osrs_t = tempSampling;
 23ed36c:	00db      	lsls	r3, r3, #3
 23ed36e:	f002 0207 	and.w	r2, r2, #7
 23ed372:	f003 0338 	and.w	r3, r3, #56	; 0x38
 23ed376:	4313      	orrs	r3, r2
 23ed378:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
                                  standby_duration duration) {
 23ed37c:	f89d 7018 	ldrb.w	r7, [sp, #24]
  _measReg.osrs_t = tempSampling;
 23ed380:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  _humReg.osrs_h = humSampling;
 23ed384:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
                                  standby_duration duration) {
 23ed388:	f89d 501c 	ldrb.w	r5, [sp, #28]
 23ed38c:	f89d 6020 	ldrb.w	r6, [sp, #32]
  _humReg.osrs_h = humSampling;
 23ed390:	f367 1347 	bfi	r3, r7, #5, #3
 23ed394:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  _configReg.t_sb = duration;
 23ed398:	00ed      	lsls	r5, r5, #3
 23ed39a:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 23ed39e:	f006 0607 	and.w	r6, r6, #7
 23ed3a2:	f005 0538 	and.w	r5, r5, #56	; 0x38
 23ed3a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 23ed3aa:	4335      	orrs	r5, r6
 23ed3ac:	431d      	orrs	r5, r3
 23ed3ae:	f880 504c 	strb.w	r5, [r0, #76]	; 0x4c
  write8(BME280_REGISTER_CONTROL, MODE_SLEEP);
 23ed3b2:	2200      	movs	r2, #0
 23ed3b4:	21f4      	movs	r1, #244	; 0xf4
 23ed3b6:	f7ff ff83 	bl	23ed2c0 <_ZN15Adafruit_BME2806write8Ehh>
    // 100 = x8
    // 101 and above = x16
    unsigned int osrs_h : 3; ///< pressure oversampling

    /// @return combined ctrl hum register
    unsigned int get() { return (osrs_h); }
 23ed3ba:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
  write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
 23ed3be:	4620      	mov	r0, r4
 23ed3c0:	21f2      	movs	r1, #242	; 0xf2
 23ed3c2:	0952      	lsrs	r2, r2, #5
 23ed3c4:	f7ff ff7c 	bl	23ed2c0 <_ZN15Adafruit_BME2806write8Ehh>
    unsigned int get() { return (t_sb << 5) | (filter << 2) | spi3w_en; }
 23ed3c8:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
  write8(BME280_REGISTER_CONFIG, _configReg.get());
 23ed3cc:	4620      	mov	r0, r4
 23ed3ce:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 23ed3d2:	f002 0107 	and.w	r1, r2, #7
 23ed3d6:	009b      	lsls	r3, r3, #2
 23ed3d8:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 23ed3dc:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
 23ed3e0:	21f5      	movs	r1, #245	; 0xf5
 23ed3e2:	f7ff ff6d 	bl	23ed2c0 <_ZN15Adafruit_BME2806write8Ehh>
    unsigned int get() { return (osrs_t << 5) | (osrs_p << 2) | mode; }
 23ed3e6:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
  write8(BME280_REGISTER_CONTROL, _measReg.get());
 23ed3ea:	4620      	mov	r0, r4
 23ed3ec:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 23ed3f0:	f002 0107 	and.w	r1, r2, #7
 23ed3f4:	009b      	lsls	r3, r3, #2
 23ed3f6:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 23ed3fa:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
 23ed3fe:	21f4      	movs	r1, #244	; 0xf4
}
 23ed400:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  write8(BME280_REGISTER_CONTROL, _measReg.get());
 23ed404:	f7ff bf5c 	b.w	23ed2c0 <_ZN15Adafruit_BME2806write8Ehh>

023ed408 <_ZN15Adafruit_BME2805read8Eh>:
/*!
 *   @brief  Reads an 8 bit value over I2C or SPI
 *   @param reg the register address to read from
 *   @returns the data byte read from the device
 */
uint8_t Adafruit_BME280::read8(byte reg) {
 23ed408:	b530      	push	{r4, r5, lr}
  uint8_t value;

  if (_cs == -1) {
 23ed40a:	f990 3020 	ldrsb.w	r3, [r0, #32]
uint8_t Adafruit_BME280::read8(byte reg) {
 23ed40e:	4604      	mov	r4, r0
  if (_cs == -1) {
 23ed410:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
 23ed412:	460d      	mov	r5, r1
 23ed414:	b085      	sub	sp, #20
  if (_cs == -1) {
 23ed416:	d118      	bne.n	23ed44a <_ZN15Adafruit_BME2805read8Eh+0x42>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23ed418:	7d01      	ldrb	r1, [r0, #20]
 23ed41a:	6800      	ldr	r0, [r0, #0]
 23ed41c:	f00a fd62 	bl	23f7ee4 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23ed420:	6820      	ldr	r0, [r4, #0]
 23ed422:	4629      	mov	r1, r5
 23ed424:	6803      	ldr	r3, [r0, #0]
 23ed426:	689b      	ldr	r3, [r3, #8]
 23ed428:	4798      	blx	r3
    _wire->endTransmission();
 23ed42a:	6820      	ldr	r0, [r4, #0]
 23ed42c:	f00a fd65 	bl	23f7efa <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)1);
 23ed430:	2201      	movs	r2, #1
 23ed432:	7d21      	ldrb	r1, [r4, #20]
 23ed434:	6820      	ldr	r0, [r4, #0]
 23ed436:	f00a fd52 	bl	23f7ede <_ZN7TwoWire11requestFromEhj>
    value = _wire->read();
 23ed43a:	6820      	ldr	r0, [r4, #0]
 23ed43c:	6803      	ldr	r3, [r0, #0]
 23ed43e:	695b      	ldr	r3, [r3, #20]
 23ed440:	4798      	blx	r3
 23ed442:	b2c5      	uxtb	r5, r0
    digitalWrite(_cs, HIGH);
    if (_sck == -1)
      _spi->endTransaction(); // release the SPI bus
  }
  return value;
}
 23ed444:	4628      	mov	r0, r5
 23ed446:	b005      	add	sp, #20
 23ed448:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23ed44a:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
 23ed44e:	3301      	adds	r3, #1
 23ed450:	d10d      	bne.n	23ed46e <_ZN15Adafruit_BME2805read8Eh+0x66>
 23ed452:	4b16      	ldr	r3, [pc, #88]	; (23ed4ac <_ZN15Adafruit_BME2805read8Eh+0xa4>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23ed454:	4669      	mov	r1, sp
 23ed456:	9300      	str	r3, [sp, #0]
 23ed458:	2300      	movs	r3, #0
 23ed45a:	f88d 3004 	strb.w	r3, [sp, #4]
 23ed45e:	4b14      	ldr	r3, [pc, #80]	; (23ed4b0 <_ZN15Adafruit_BME2805read8Eh+0xa8>)
 23ed460:	6840      	ldr	r0, [r0, #4]
 23ed462:	9302      	str	r3, [sp, #8]
 23ed464:	2301      	movs	r3, #1
 23ed466:	f8ad 300c 	strh.w	r3, [sp, #12]
 23ed46a:	f00b fa7f 	bl	23f896c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23ed46e:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23ed472:	2100      	movs	r1, #0
 23ed474:	b280      	uxth	r0, r0
 23ed476:	f00c f962 	bl	23f973e <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23ed47a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23ed47e:	4620      	mov	r0, r4
 23ed480:	f7ff fee9 	bl	23ed256 <_ZN15Adafruit_BME2807spixferEh>
    value = spixfer(0);
 23ed484:	2100      	movs	r1, #0
 23ed486:	4620      	mov	r0, r4
 23ed488:	f7ff fee5 	bl	23ed256 <_ZN15Adafruit_BME2807spixferEh>
 23ed48c:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
 23ed48e:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23ed492:	2101      	movs	r1, #1
 23ed494:	b280      	uxth	r0, r0
 23ed496:	f00c f952 	bl	23f973e <digitalWrite>
    if (_sck == -1)
 23ed49a:	f994 3023 	ldrsb.w	r3, [r4, #35]	; 0x23
 23ed49e:	3301      	adds	r3, #1
 23ed4a0:	d1d0      	bne.n	23ed444 <_ZN15Adafruit_BME2805read8Eh+0x3c>
      _spi->endTransaction(); // release the SPI bus
 23ed4a2:	6860      	ldr	r0, [r4, #4]
 23ed4a4:	f00b fa48 	bl	23f8938 <_ZN8SPIClass14endTransactionEv>
 23ed4a8:	e7cc      	b.n	23ed444 <_ZN15Adafruit_BME2805read8Eh+0x3c>
 23ed4aa:	bf00      	nop
 23ed4ac:	023fe4ac 	.word	0x023fe4ac
 23ed4b0:	0007a120 	.word	0x0007a120

023ed4b4 <_ZN15Adafruit_BME2806read16Eh>:
/*!
 *   @brief  Reads a 16 bit value over I2C or SPI
 *   @param reg the register address to read from
 *   @returns the 16 bit data value read from the device
 */
uint16_t Adafruit_BME280::read16(byte reg) {
 23ed4b4:	b530      	push	{r4, r5, lr}
  uint16_t value;

  if (_cs == -1) {
 23ed4b6:	f990 3020 	ldrsb.w	r3, [r0, #32]
uint16_t Adafruit_BME280::read16(byte reg) {
 23ed4ba:	4604      	mov	r4, r0
  if (_cs == -1) {
 23ed4bc:	3301      	adds	r3, #1
uint16_t Adafruit_BME280::read16(byte reg) {
 23ed4be:	460d      	mov	r5, r1
 23ed4c0:	b085      	sub	sp, #20
  if (_cs == -1) {
 23ed4c2:	d11f      	bne.n	23ed504 <_ZN15Adafruit_BME2806read16Eh+0x50>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23ed4c4:	7d01      	ldrb	r1, [r0, #20]
 23ed4c6:	6800      	ldr	r0, [r0, #0]
 23ed4c8:	f00a fd0c 	bl	23f7ee4 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23ed4cc:	6820      	ldr	r0, [r4, #0]
 23ed4ce:	4629      	mov	r1, r5
 23ed4d0:	6803      	ldr	r3, [r0, #0]
 23ed4d2:	689b      	ldr	r3, [r3, #8]
 23ed4d4:	4798      	blx	r3
    _wire->endTransmission();
 23ed4d6:	6820      	ldr	r0, [r4, #0]
 23ed4d8:	f00a fd0f 	bl	23f7efa <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)2);
 23ed4dc:	2202      	movs	r2, #2
 23ed4de:	7d21      	ldrb	r1, [r4, #20]
 23ed4e0:	6820      	ldr	r0, [r4, #0]
 23ed4e2:	f00a fcfc 	bl	23f7ede <_ZN7TwoWire11requestFromEhj>
    value = (_wire->read() << 8) | _wire->read();
 23ed4e6:	6820      	ldr	r0, [r4, #0]
 23ed4e8:	6803      	ldr	r3, [r0, #0]
 23ed4ea:	695b      	ldr	r3, [r3, #20]
 23ed4ec:	4798      	blx	r3
 23ed4ee:	4605      	mov	r5, r0
 23ed4f0:	6820      	ldr	r0, [r4, #0]
 23ed4f2:	6803      	ldr	r3, [r0, #0]
 23ed4f4:	695b      	ldr	r3, [r3, #20]
 23ed4f6:	4798      	blx	r3
 23ed4f8:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 23ed4fc:	b285      	uxth	r5, r0
    if (_sck == -1)
      _spi->endTransaction(); // release the SPI bus
  }

  return value;
}
 23ed4fe:	4628      	mov	r0, r5
 23ed500:	b005      	add	sp, #20
 23ed502:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23ed504:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
 23ed508:	3301      	adds	r3, #1
 23ed50a:	d10d      	bne.n	23ed528 <_ZN15Adafruit_BME2806read16Eh+0x74>
 23ed50c:	4b19      	ldr	r3, [pc, #100]	; (23ed574 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23ed50e:	4669      	mov	r1, sp
 23ed510:	9300      	str	r3, [sp, #0]
 23ed512:	2300      	movs	r3, #0
 23ed514:	f88d 3004 	strb.w	r3, [sp, #4]
 23ed518:	4b17      	ldr	r3, [pc, #92]	; (23ed578 <_ZN15Adafruit_BME2806read16Eh+0xc4>)
 23ed51a:	6840      	ldr	r0, [r0, #4]
 23ed51c:	9302      	str	r3, [sp, #8]
 23ed51e:	2301      	movs	r3, #1
 23ed520:	f8ad 300c 	strh.w	r3, [sp, #12]
 23ed524:	f00b fa22 	bl	23f896c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23ed528:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23ed52c:	2100      	movs	r1, #0
 23ed52e:	b280      	uxth	r0, r0
 23ed530:	f00c f905 	bl	23f973e <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23ed534:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23ed538:	4620      	mov	r0, r4
 23ed53a:	f7ff fe8c 	bl	23ed256 <_ZN15Adafruit_BME2807spixferEh>
    value = (spixfer(0) << 8) | spixfer(0);
 23ed53e:	2100      	movs	r1, #0
 23ed540:	4620      	mov	r0, r4
 23ed542:	f7ff fe88 	bl	23ed256 <_ZN15Adafruit_BME2807spixferEh>
 23ed546:	2100      	movs	r1, #0
 23ed548:	4605      	mov	r5, r0
 23ed54a:	4620      	mov	r0, r4
 23ed54c:	f7ff fe83 	bl	23ed256 <_ZN15Adafruit_BME2807spixferEh>
 23ed550:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 23ed554:	b285      	uxth	r5, r0
    digitalWrite(_cs, HIGH);
 23ed556:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23ed55a:	2101      	movs	r1, #1
 23ed55c:	b280      	uxth	r0, r0
 23ed55e:	f00c f8ee 	bl	23f973e <digitalWrite>
    if (_sck == -1)
 23ed562:	f994 3023 	ldrsb.w	r3, [r4, #35]	; 0x23
 23ed566:	3301      	adds	r3, #1
 23ed568:	d1c9      	bne.n	23ed4fe <_ZN15Adafruit_BME2806read16Eh+0x4a>
      _spi->endTransaction(); // release the SPI bus
 23ed56a:	6860      	ldr	r0, [r4, #4]
 23ed56c:	f00b f9e4 	bl	23f8938 <_ZN8SPIClass14endTransactionEv>
 23ed570:	e7c5      	b.n	23ed4fe <_ZN15Adafruit_BME2806read16Eh+0x4a>
 23ed572:	bf00      	nop
 23ed574:	023fe4ac 	.word	0x023fe4ac
 23ed578:	0007a120 	.word	0x0007a120

023ed57c <_ZN15Adafruit_BME2809read16_LEEh>:
/*!
 *   @brief  Reads a signed 16 bit little endian value over I2C or SPI
 *   @param reg the register address to read from
 *   @returns the 16 bit data value read from the device
 */
uint16_t Adafruit_BME280::read16_LE(byte reg) {
 23ed57c:	b508      	push	{r3, lr}
  uint16_t temp = read16(reg);
 23ed57e:	f7ff ff99 	bl	23ed4b4 <_ZN15Adafruit_BME2806read16Eh>
  return (temp >> 8) | (temp << 8);
 23ed582:	ba40      	rev16	r0, r0
}
 23ed584:	b280      	uxth	r0, r0
 23ed586:	bd08      	pop	{r3, pc}

023ed588 <_ZN15Adafruit_BME2806read24Eh>:
/*!
 *   @brief  Reads a 24 bit value over I2C
 *   @param reg the register address to read from
 *   @returns the 24 bit data value read from the device
 */
uint32_t Adafruit_BME280::read24(byte reg) {
 23ed588:	b530      	push	{r4, r5, lr}
  uint32_t value;

  if (_cs == -1) {
 23ed58a:	f990 3020 	ldrsb.w	r3, [r0, #32]
uint32_t Adafruit_BME280::read24(byte reg) {
 23ed58e:	4604      	mov	r4, r0
  if (_cs == -1) {
 23ed590:	3301      	adds	r3, #1
uint32_t Adafruit_BME280::read24(byte reg) {
 23ed592:	460d      	mov	r5, r1
 23ed594:	b085      	sub	sp, #20
  if (_cs == -1) {
 23ed596:	d123      	bne.n	23ed5e0 <_ZN15Adafruit_BME2806read24Eh+0x58>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23ed598:	7d01      	ldrb	r1, [r0, #20]
 23ed59a:	6800      	ldr	r0, [r0, #0]
 23ed59c:	f00a fca2 	bl	23f7ee4 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23ed5a0:	6820      	ldr	r0, [r4, #0]
 23ed5a2:	4629      	mov	r1, r5
 23ed5a4:	6803      	ldr	r3, [r0, #0]
 23ed5a6:	689b      	ldr	r3, [r3, #8]
 23ed5a8:	4798      	blx	r3
    _wire->endTransmission();
 23ed5aa:	6820      	ldr	r0, [r4, #0]
 23ed5ac:	f00a fca5 	bl	23f7efa <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)3);
 23ed5b0:	2203      	movs	r2, #3
 23ed5b2:	7d21      	ldrb	r1, [r4, #20]
 23ed5b4:	6820      	ldr	r0, [r4, #0]
 23ed5b6:	f00a fc92 	bl	23f7ede <_ZN7TwoWire11requestFromEhj>

    value = _wire->read();
 23ed5ba:	6820      	ldr	r0, [r4, #0]
 23ed5bc:	6803      	ldr	r3, [r0, #0]
 23ed5be:	695b      	ldr	r3, [r3, #20]
 23ed5c0:	4798      	blx	r3
    value <<= 8;
 23ed5c2:	0205      	lsls	r5, r0, #8
    value |= _wire->read();
 23ed5c4:	6820      	ldr	r0, [r4, #0]
 23ed5c6:	6803      	ldr	r3, [r0, #0]
 23ed5c8:	695b      	ldr	r3, [r3, #20]
 23ed5ca:	4798      	blx	r3
 23ed5cc:	4328      	orrs	r0, r5
    value <<= 8;
 23ed5ce:	0205      	lsls	r5, r0, #8
    value |= _wire->read();
 23ed5d0:	6820      	ldr	r0, [r4, #0]
 23ed5d2:	6803      	ldr	r3, [r0, #0]
 23ed5d4:	695b      	ldr	r3, [r3, #20]
 23ed5d6:	4798      	blx	r3
 23ed5d8:	4305      	orrs	r5, r0
    if (_sck == -1)
      _spi->endTransaction(); // release the SPI bus
  }

  return value;
}
 23ed5da:	4628      	mov	r0, r5
 23ed5dc:	b005      	add	sp, #20
 23ed5de:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23ed5e0:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
 23ed5e4:	3301      	adds	r3, #1
 23ed5e6:	d10d      	bne.n	23ed604 <_ZN15Adafruit_BME2806read24Eh+0x7c>
 23ed5e8:	4b1b      	ldr	r3, [pc, #108]	; (23ed658 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23ed5ea:	4669      	mov	r1, sp
 23ed5ec:	9300      	str	r3, [sp, #0]
 23ed5ee:	2300      	movs	r3, #0
 23ed5f0:	f88d 3004 	strb.w	r3, [sp, #4]
 23ed5f4:	4b19      	ldr	r3, [pc, #100]	; (23ed65c <_ZN15Adafruit_BME2806read24Eh+0xd4>)
 23ed5f6:	6840      	ldr	r0, [r0, #4]
 23ed5f8:	9302      	str	r3, [sp, #8]
 23ed5fa:	2301      	movs	r3, #1
 23ed5fc:	f8ad 300c 	strh.w	r3, [sp, #12]
 23ed600:	f00b f9b4 	bl	23f896c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23ed604:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23ed608:	2100      	movs	r1, #0
 23ed60a:	b280      	uxth	r0, r0
 23ed60c:	f00c f897 	bl	23f973e <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23ed610:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23ed614:	4620      	mov	r0, r4
 23ed616:	f7ff fe1e 	bl	23ed256 <_ZN15Adafruit_BME2807spixferEh>
    value = spixfer(0);
 23ed61a:	2100      	movs	r1, #0
 23ed61c:	4620      	mov	r0, r4
 23ed61e:	f7ff fe1a 	bl	23ed256 <_ZN15Adafruit_BME2807spixferEh>
    value |= spixfer(0);
 23ed622:	2100      	movs	r1, #0
    value <<= 8;
 23ed624:	0205      	lsls	r5, r0, #8
    value |= spixfer(0);
 23ed626:	4620      	mov	r0, r4
 23ed628:	f7ff fe15 	bl	23ed256 <_ZN15Adafruit_BME2807spixferEh>
 23ed62c:	4328      	orrs	r0, r5
    value |= spixfer(0);
 23ed62e:	2100      	movs	r1, #0
    value <<= 8;
 23ed630:	0205      	lsls	r5, r0, #8
    value |= spixfer(0);
 23ed632:	4620      	mov	r0, r4
 23ed634:	f7ff fe0f 	bl	23ed256 <_ZN15Adafruit_BME2807spixferEh>
 23ed638:	4305      	orrs	r5, r0
    digitalWrite(_cs, HIGH);
 23ed63a:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23ed63e:	2101      	movs	r1, #1
 23ed640:	b280      	uxth	r0, r0
 23ed642:	f00c f87c 	bl	23f973e <digitalWrite>
    if (_sck == -1)
 23ed646:	f994 3023 	ldrsb.w	r3, [r4, #35]	; 0x23
 23ed64a:	3301      	adds	r3, #1
 23ed64c:	d1c5      	bne.n	23ed5da <_ZN15Adafruit_BME2806read24Eh+0x52>
      _spi->endTransaction(); // release the SPI bus
 23ed64e:	6860      	ldr	r0, [r4, #4]
 23ed650:	f00b f972 	bl	23f8938 <_ZN8SPIClass14endTransactionEv>
  return value;
 23ed654:	e7c1      	b.n	23ed5da <_ZN15Adafruit_BME2806read24Eh+0x52>
 23ed656:	bf00      	nop
 23ed658:	023fe4ac 	.word	0x023fe4ac
 23ed65c:	0007a120 	.word	0x0007a120

023ed660 <_ZN15Adafruit_BME28016readCoefficientsEv>:
}

/*!
 *   @brief  Reads the factory-set coefficients
 */
void Adafruit_BME280::readCoefficients(void) {
 23ed660:	b538      	push	{r3, r4, r5, lr}
  _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 23ed662:	2188      	movs	r1, #136	; 0x88
void Adafruit_BME280::readCoefficients(void) {
 23ed664:	4604      	mov	r4, r0
  _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 23ed666:	f7ff ff89 	bl	23ed57c <_ZN15Adafruit_BME2809read16_LEEh>
  return (int16_t)read16_LE(reg);
 23ed66a:	218a      	movs	r1, #138	; 0x8a
  _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 23ed66c:	8520      	strh	r0, [r4, #40]	; 0x28
  return (int16_t)read16_LE(reg);
 23ed66e:	4620      	mov	r0, r4
 23ed670:	f7ff ff84 	bl	23ed57c <_ZN15Adafruit_BME2809read16_LEEh>
 23ed674:	218c      	movs	r1, #140	; 0x8c
  _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
 23ed676:	8560      	strh	r0, [r4, #42]	; 0x2a
  return (int16_t)read16_LE(reg);
 23ed678:	4620      	mov	r0, r4
 23ed67a:	f7ff ff7f 	bl	23ed57c <_ZN15Adafruit_BME2809read16_LEEh>
  _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

  _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 23ed67e:	218e      	movs	r1, #142	; 0x8e
  _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
 23ed680:	85a0      	strh	r0, [r4, #44]	; 0x2c
  _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 23ed682:	4620      	mov	r0, r4
 23ed684:	f7ff ff7a 	bl	23ed57c <_ZN15Adafruit_BME2809read16_LEEh>
  return (int16_t)read16_LE(reg);
 23ed688:	2190      	movs	r1, #144	; 0x90
  _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 23ed68a:	85e0      	strh	r0, [r4, #46]	; 0x2e
  return (int16_t)read16_LE(reg);
 23ed68c:	4620      	mov	r0, r4
 23ed68e:	f7ff ff75 	bl	23ed57c <_ZN15Adafruit_BME2809read16_LEEh>
 23ed692:	2192      	movs	r1, #146	; 0x92
  _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
 23ed694:	8620      	strh	r0, [r4, #48]	; 0x30
  return (int16_t)read16_LE(reg);
 23ed696:	4620      	mov	r0, r4
 23ed698:	f7ff ff70 	bl	23ed57c <_ZN15Adafruit_BME2809read16_LEEh>
 23ed69c:	2194      	movs	r1, #148	; 0x94
  _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
 23ed69e:	8660      	strh	r0, [r4, #50]	; 0x32
  return (int16_t)read16_LE(reg);
 23ed6a0:	4620      	mov	r0, r4
 23ed6a2:	f7ff ff6b 	bl	23ed57c <_ZN15Adafruit_BME2809read16_LEEh>
 23ed6a6:	2196      	movs	r1, #150	; 0x96
  _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
 23ed6a8:	86a0      	strh	r0, [r4, #52]	; 0x34
  return (int16_t)read16_LE(reg);
 23ed6aa:	4620      	mov	r0, r4
 23ed6ac:	f7ff ff66 	bl	23ed57c <_ZN15Adafruit_BME2809read16_LEEh>
 23ed6b0:	2198      	movs	r1, #152	; 0x98
  _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
 23ed6b2:	86e0      	strh	r0, [r4, #54]	; 0x36
  return (int16_t)read16_LE(reg);
 23ed6b4:	4620      	mov	r0, r4
 23ed6b6:	f7ff ff61 	bl	23ed57c <_ZN15Adafruit_BME2809read16_LEEh>
 23ed6ba:	219a      	movs	r1, #154	; 0x9a
  _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
 23ed6bc:	8720      	strh	r0, [r4, #56]	; 0x38
  return (int16_t)read16_LE(reg);
 23ed6be:	4620      	mov	r0, r4
 23ed6c0:	f7ff ff5c 	bl	23ed57c <_ZN15Adafruit_BME2809read16_LEEh>
 23ed6c4:	219c      	movs	r1, #156	; 0x9c
  _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
 23ed6c6:	8760      	strh	r0, [r4, #58]	; 0x3a
  return (int16_t)read16_LE(reg);
 23ed6c8:	4620      	mov	r0, r4
 23ed6ca:	f7ff ff57 	bl	23ed57c <_ZN15Adafruit_BME2809read16_LEEh>
 23ed6ce:	219e      	movs	r1, #158	; 0x9e
  _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
 23ed6d0:	87a0      	strh	r0, [r4, #60]	; 0x3c
  return (int16_t)read16_LE(reg);
 23ed6d2:	4620      	mov	r0, r4
 23ed6d4:	f7ff ff52 	bl	23ed57c <_ZN15Adafruit_BME2809read16_LEEh>
  _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

  _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 23ed6d8:	21a1      	movs	r1, #161	; 0xa1
  _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
 23ed6da:	87e0      	strh	r0, [r4, #62]	; 0x3e
  _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 23ed6dc:	4620      	mov	r0, r4
 23ed6de:	f7ff fe93 	bl	23ed408 <_ZN15Adafruit_BME2805read8Eh>
  return (int16_t)read16_LE(reg);
 23ed6e2:	21e1      	movs	r1, #225	; 0xe1
  _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 23ed6e4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return (int16_t)read16_LE(reg);
 23ed6e8:	4620      	mov	r0, r4
 23ed6ea:	f7ff ff47 	bl	23ed57c <_ZN15Adafruit_BME2809read16_LEEh>
  _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
  _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 23ed6ee:	21e3      	movs	r1, #227	; 0xe3
  _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
 23ed6f0:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
  _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 23ed6f4:	4620      	mov	r0, r4
 23ed6f6:	f7ff fe87 	bl	23ed408 <_ZN15Adafruit_BME2805read8Eh>
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23ed6fa:	21e4      	movs	r1, #228	; 0xe4
  _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 23ed6fc:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23ed700:	4620      	mov	r0, r4
 23ed702:	f7ff fe81 	bl	23ed408 <_ZN15Adafruit_BME2805read8Eh>
                         (read8(BME280_REGISTER_DIG_H4 + 1) & 0xF);
 23ed706:	21e5      	movs	r1, #229	; 0xe5
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23ed708:	4605      	mov	r5, r0
                         (read8(BME280_REGISTER_DIG_H4 + 1) & 0xF);
 23ed70a:	4620      	mov	r0, r4
 23ed70c:	f7ff fe7c 	bl	23ed408 <_ZN15Adafruit_BME2805read8Eh>
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23ed710:	b26d      	sxtb	r5, r5
                         (read8(BME280_REGISTER_DIG_H4 + 1) & 0xF);
 23ed712:	f000 000f 	and.w	r0, r0, #15
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23ed716:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
  _bme280_calib.dig_H5 = ((int8_t)read8(BME280_REGISTER_DIG_H5 + 1) << 4) |
 23ed71a:	21e6      	movs	r1, #230	; 0xe6
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23ed71c:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
  _bme280_calib.dig_H5 = ((int8_t)read8(BME280_REGISTER_DIG_H5 + 1) << 4) |
 23ed720:	4620      	mov	r0, r4
 23ed722:	f7ff fe71 	bl	23ed408 <_ZN15Adafruit_BME2805read8Eh>
                         (read8(BME280_REGISTER_DIG_H5) >> 4);
 23ed726:	21e5      	movs	r1, #229	; 0xe5
  _bme280_calib.dig_H5 = ((int8_t)read8(BME280_REGISTER_DIG_H5 + 1) << 4) |
 23ed728:	4605      	mov	r5, r0
                         (read8(BME280_REGISTER_DIG_H5) >> 4);
 23ed72a:	4620      	mov	r0, r4
 23ed72c:	f7ff fe6c 	bl	23ed408 <_ZN15Adafruit_BME2805read8Eh>
  _bme280_calib.dig_H5 = ((int8_t)read8(BME280_REGISTER_DIG_H5 + 1) << 4) |
 23ed730:	b26d      	sxtb	r5, r5
                         (read8(BME280_REGISTER_DIG_H5) >> 4);
 23ed732:	f3c0 1007 	ubfx	r0, r0, #4, #8
  _bme280_calib.dig_H5 = ((int8_t)read8(BME280_REGISTER_DIG_H5 + 1) << 4) |
 23ed736:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
 23ed73a:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
  _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
 23ed73e:	21e7      	movs	r1, #231	; 0xe7
 23ed740:	4620      	mov	r0, r4
 23ed742:	f7ff fe61 	bl	23ed408 <_ZN15Adafruit_BME2805read8Eh>
 23ed746:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
}
 23ed74a:	bd38      	pop	{r3, r4, r5, pc}

023ed74c <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
/*!
 *   @brief return true if chip is busy reading cal data
 *   @returns true if reading calibration, false otherwise
 */
bool Adafruit_BME280::isReadingCalibration(void) {
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
 23ed74c:	21f3      	movs	r1, #243	; 0xf3
bool Adafruit_BME280::isReadingCalibration(void) {
 23ed74e:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
 23ed750:	f7ff fe5a 	bl	23ed408 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
 23ed754:	f000 0001 	and.w	r0, r0, #1
 23ed758:	bd08      	pop	{r3, pc}

023ed75a <_ZN15Adafruit_BME2804initEv>:
bool Adafruit_BME280::init() {
 23ed75a:	b530      	push	{r4, r5, lr}
 23ed75c:	4604      	mov	r4, r0
  if (_cs == -1) {
 23ed75e:	f990 0020 	ldrsb.w	r0, [r0, #32]
bool Adafruit_BME280::init() {
 23ed762:	b085      	sub	sp, #20
  if (_cs == -1) {
 23ed764:	1c42      	adds	r2, r0, #1
 23ed766:	d129      	bne.n	23ed7bc <_ZN15Adafruit_BME2804initEv+0x62>
    _wire->begin();
 23ed768:	6820      	ldr	r0, [r4, #0]
 23ed76a:	f00a fb91 	bl	23f7e90 <_ZN7TwoWire5beginEv>
  _sensorID = read8(BME280_REGISTER_CHIPID);
 23ed76e:	21d0      	movs	r1, #208	; 0xd0
 23ed770:	4620      	mov	r0, r4
 23ed772:	f7ff fe49 	bl	23ed408 <_ZN15Adafruit_BME2805read8Eh>
  if (_sensorID != 0x60)
 23ed776:	2860      	cmp	r0, #96	; 0x60
  _sensorID = read8(BME280_REGISTER_CHIPID);
 23ed778:	61a0      	str	r0, [r4, #24]
  if (_sensorID != 0x60)
 23ed77a:	d142      	bne.n	23ed802 <_ZN15Adafruit_BME2804initEv+0xa8>
  write8(BME280_REGISTER_SOFTRESET, 0xB6);
 23ed77c:	22b6      	movs	r2, #182	; 0xb6
 23ed77e:	21e0      	movs	r1, #224	; 0xe0
 23ed780:	4620      	mov	r0, r4
 23ed782:	f7ff fd9d 	bl	23ed2c0 <_ZN15Adafruit_BME2806write8Ehh>
  delay(10);
 23ed786:	200a      	movs	r0, #10
 23ed788:	f009 fde6 	bl	23f7358 <delay>
  while (isReadingCalibration())
 23ed78c:	4620      	mov	r0, r4
 23ed78e:	f7ff ffdd 	bl	23ed74c <_ZN15Adafruit_BME28020isReadingCalibrationEv>
 23ed792:	4605      	mov	r5, r0
 23ed794:	2800      	cmp	r0, #0
 23ed796:	d1f6      	bne.n	23ed786 <_ZN15Adafruit_BME2804initEv+0x2c>
  readCoefficients(); // read trimming parameters, see DS 4.2.2
 23ed798:	4620      	mov	r0, r4
 23ed79a:	f7ff ff61 	bl	23ed660 <_ZN15Adafruit_BME28016readCoefficientsEv>
  setSampling(); // use defaults
 23ed79e:	2305      	movs	r3, #5
 23ed7a0:	2103      	movs	r1, #3
 23ed7a2:	461a      	mov	r2, r3
 23ed7a4:	4620      	mov	r0, r4
 23ed7a6:	9300      	str	r3, [sp, #0]
 23ed7a8:	e9cd 5501 	strd	r5, r5, [sp, #4]
 23ed7ac:	f7ff fddc 	bl	23ed368 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
  delay(100);
 23ed7b0:	2064      	movs	r0, #100	; 0x64
 23ed7b2:	f009 fdd1 	bl	23f7358 <delay>
  return true;
 23ed7b6:	2001      	movs	r0, #1
}
 23ed7b8:	b005      	add	sp, #20
 23ed7ba:	bd30      	pop	{r4, r5, pc}
    digitalWrite(_cs, HIGH);
 23ed7bc:	2101      	movs	r1, #1
 23ed7be:	b280      	uxth	r0, r0
 23ed7c0:	f00b ffbd 	bl	23f973e <digitalWrite>
    pinMode(_cs, OUTPUT);
 23ed7c4:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23ed7c8:	2101      	movs	r1, #1
 23ed7ca:	b280      	uxth	r0, r0
 23ed7cc:	f00b ffa6 	bl	23f971c <pinMode>
    if (_sck == -1) {
 23ed7d0:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
 23ed7d4:	1c43      	adds	r3, r0, #1
 23ed7d6:	d103      	bne.n	23ed7e0 <_ZN15Adafruit_BME2804initEv+0x86>
      _spi->begin();
 23ed7d8:	6860      	ldr	r0, [r4, #4]
 23ed7da:	f00b f873 	bl	23f88c4 <_ZN8SPIClass5beginEv>
 23ed7de:	e7c6      	b.n	23ed76e <_ZN15Adafruit_BME2804initEv+0x14>
      pinMode(_sck, OUTPUT);
 23ed7e0:	2101      	movs	r1, #1
 23ed7e2:	b280      	uxth	r0, r0
 23ed7e4:	f00b ff9a 	bl	23f971c <pinMode>
      pinMode(_mosi, OUTPUT);
 23ed7e8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 23ed7ec:	2101      	movs	r1, #1
 23ed7ee:	b280      	uxth	r0, r0
 23ed7f0:	f00b ff94 	bl	23f971c <pinMode>
      pinMode(_miso, INPUT);
 23ed7f4:	f994 0022 	ldrsb.w	r0, [r4, #34]	; 0x22
 23ed7f8:	2100      	movs	r1, #0
 23ed7fa:	b280      	uxth	r0, r0
 23ed7fc:	f00b ff8e 	bl	23f971c <pinMode>
 23ed800:	e7b5      	b.n	23ed76e <_ZN15Adafruit_BME2804initEv+0x14>
    return false;
 23ed802:	2000      	movs	r0, #0
 23ed804:	e7d8      	b.n	23ed7b8 <_ZN15Adafruit_BME2804initEv+0x5e>

023ed806 <_ZN15Adafruit_BME2805beginEhP7TwoWire>:
  _i2caddr = addr;
 23ed806:	7501      	strb	r1, [r0, #20]
  _wire = theWire;
 23ed808:	6002      	str	r2, [r0, #0]
  status = init();
 23ed80a:	f7ff bfa6 	b.w	23ed75a <_ZN15Adafruit_BME2804initEv>
	...

023ed810 <_ZN15Adafruit_BME28015readTemperatureEv>:

/*!
 *   @brief  Returns the temperature from the sensor
 *   @returns the temperature read from the device
 */
float Adafruit_BME280::readTemperature(void) {
 23ed810:	b538      	push	{r3, r4, r5, lr}
  int32_t var1, var2;

  int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
 23ed812:	21fa      	movs	r1, #250	; 0xfa
float Adafruit_BME280::readTemperature(void) {
 23ed814:	4604      	mov	r4, r0
  int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
 23ed816:	f7ff feb7 	bl	23ed588 <_ZN15Adafruit_BME2806read24Eh>
  if (adc_T == 0x800000) // value in case temp measurement was disabled
 23ed81a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 23ed81e:	d021      	beq.n	23ed864 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>
    return NAN;
  adc_T >>= 4;

  var1 = ((((adc_T >> 3) - ((int32_t)_bme280_calib.dig_T1 << 1))) *
 23ed820:	8d21      	ldrh	r1, [r4, #40]	; 0x28
         14;

  t_fine = var1 + var2 + t_fine_adjust;

  float T = (t_fine * 5 + 128) >> 8;
  return T / 100;
 23ed822:	ed9f 7a12 	vldr	s14, [pc, #72]	; 23ed86c <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
  var2 = (((((adc_T >> 4) - ((int32_t)_bme280_calib.dig_T1)) *
 23ed826:	ebc1 2220 	rsb	r2, r1, r0, asr #8
  var1 = ((((adc_T >> 3) - ((int32_t)_bme280_calib.dig_T1 << 1))) *
 23ed82a:	004d      	lsls	r5, r1, #1
          ((int32_t)_bme280_calib.dig_T2)) >>
 23ed82c:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
  var1 = ((((adc_T >> 3) - ((int32_t)_bme280_calib.dig_T1 << 1))) *
 23ed830:	ebc5 13e0 	rsb	r3, r5, r0, asr #7
 23ed834:	4359      	muls	r1, r3
  var2 = (((((adc_T >> 4) - ((int32_t)_bme280_calib.dig_T1)) *
 23ed836:	fb02 f302 	mul.w	r3, r2, r2
          ((int32_t)_bme280_calib.dig_T3)) >>
 23ed83a:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
            ((adc_T >> 4) - ((int32_t)_bme280_calib.dig_T1))) >>
 23ed83e:	131b      	asrs	r3, r3, #12
           12) *
 23ed840:	4353      	muls	r3, r2
  t_fine = var1 + var2 + t_fine_adjust;
 23ed842:	6a62      	ldr	r2, [r4, #36]	; 0x24
  var2 = (((((adc_T >> 4) - ((int32_t)_bme280_calib.dig_T1)) *
 23ed844:	139b      	asrs	r3, r3, #14
  t_fine = var1 + var2 + t_fine_adjust;
 23ed846:	eb03 23e1 	add.w	r3, r3, r1, asr #11
 23ed84a:	4413      	add	r3, r2
 23ed84c:	61e3      	str	r3, [r4, #28]
  float T = (t_fine * 5 + 128) >> 8;
 23ed84e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 23ed852:	3380      	adds	r3, #128	; 0x80
 23ed854:	121b      	asrs	r3, r3, #8
 23ed856:	ee07 3a90 	vmov	s15, r3
 23ed85a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return T / 100;
 23ed85e:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
 23ed862:	bd38      	pop	{r3, r4, r5, pc}
    return NAN;
 23ed864:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23ed870 <_ZN15Adafruit_BME28015readTemperatureEv+0x60>
 23ed868:	e7fb      	b.n	23ed862 <_ZN15Adafruit_BME28015readTemperatureEv+0x52>
 23ed86a:	bf00      	nop
 23ed86c:	42c80000 	.word	0x42c80000
 23ed870:	7fc00000 	.word	0x7fc00000

023ed874 <_ZN15Adafruit_BME28012readPressureEv>:

/*!
 *   @brief  Returns the pressure from the sensor
 *   @returns the pressure value (in Pascal) read from the device
 */
float Adafruit_BME280::readPressure(void) {
 23ed874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ed878:	4605      	mov	r5, r0
  int64_t var1, var2, p;

  readTemperature(); // must be done first to get t_fine
 23ed87a:	f7ff ffc9 	bl	23ed810 <_ZN15Adafruit_BME28015readTemperatureEv>

  int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
 23ed87e:	21f7      	movs	r1, #247	; 0xf7
 23ed880:	4628      	mov	r0, r5
 23ed882:	f7ff fe81 	bl	23ed588 <_ZN15Adafruit_BME2806read24Eh>
  if (adc_P == 0x800000) // value in case pressure measurement was disabled
 23ed886:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 23ed88a:	f000 80b6 	beq.w	23ed9fa <_ZN15Adafruit_BME28012readPressureEv+0x186>
    return NAN;
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
 23ed88e:	69e9      	ldr	r1, [r5, #28]
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
  var2 = var2 + ((var1 * (int64_t)_bme280_calib.dig_P5) << 17);
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4) << 35);
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3) >> 8) +
         ((var1 * (int64_t)_bme280_calib.dig_P2) << 12);
 23ed890:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
  var1 = ((int64_t)t_fine) - 128000;
 23ed894:	ea4f 7ee1 	mov.w	lr, r1, asr #31
 23ed898:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
 23ed89c:	f14e 3eff 	adc.w	lr, lr, #4294967295	; 0xffffffff
         ((var1 * (int64_t)_bme280_calib.dig_P2) << 12);
 23ed8a0:	fb03 f20e 	mul.w	r2, r3, lr
 23ed8a4:	17dc      	asrs	r4, r3, #31
 23ed8a6:	fb01 2204 	mla	r2, r1, r4, r2
 23ed8aa:	fba3 3401 	umull	r3, r4, r3, r1
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 23ed8ae:	fba1 7801 	umull	r7, r8, r1, r1
 23ed8b2:	fb01 f60e 	mul.w	r6, r1, lr
         ((var1 * (int64_t)_bme280_calib.dig_P2) << 12);
 23ed8b6:	4422      	add	r2, r4
 23ed8b8:	0312      	lsls	r2, r2, #12
 23ed8ba:	031c      	lsls	r4, r3, #12
 23ed8bc:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3) >> 8) +
 23ed8c0:	f9b5 3032 	ldrsh.w	r3, [r5, #50]	; 0x32
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 23ed8c4:	eb08 0846 	add.w	r8, r8, r6, lsl #1
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3) >> 8) +
 23ed8c8:	fb03 f608 	mul.w	r6, r3, r8
 23ed8cc:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 23ed8d0:	fb07 660c 	mla	r6, r7, ip, r6
 23ed8d4:	fba3 3c07 	umull	r3, ip, r3, r7
 23ed8d8:	4466      	add	r6, ip
 23ed8da:	0a1b      	lsrs	r3, r3, #8
 23ed8dc:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 23ed8e0:	191b      	adds	r3, r3, r4
 23ed8e2:	eb42 2226 	adc.w	r2, r2, r6, asr #8
  var1 =
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bme280_calib.dig_P1) >> 33;
 23ed8e6:	8dee      	ldrh	r6, [r5, #46]	; 0x2e
 23ed8e8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 23ed8ec:	fba3 3406 	umull	r3, r4, r3, r6
 23ed8f0:	fb06 4402 	mla	r4, r6, r2, r4
  var1 =
 23ed8f4:	17e3      	asrs	r3, r4, #31
 23ed8f6:	1062      	asrs	r2, r4, #1

  if (var1 == 0) {
 23ed8f8:	ea53 0464 	orrs.w	r4, r3, r4, asr #1
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bme280_calib.dig_P1) >> 33;
 23ed8fc:	f04f 0c00 	mov.w	ip, #0
  if (var1 == 0) {
 23ed900:	d07e      	beq.n	23eda00 <_ZN15Adafruit_BME28012readPressureEv+0x18c>
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 23ed902:	f9b5 4038 	ldrsh.w	r4, [r5, #56]	; 0x38
  adc_P >>= 4;
 23ed906:	1100      	asrs	r0, r0, #4
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 23ed908:	fb04 f608 	mul.w	r6, r4, r8
 23ed90c:	ea4f 79e4 	mov.w	r9, r4, asr #31
 23ed910:	fb07 6609 	mla	r6, r7, r9, r6
 23ed914:	fba4 4707 	umull	r4, r7, r4, r7
 23ed918:	443e      	add	r6, r7
  var2 = var2 + ((var1 * (int64_t)_bme280_calib.dig_P5) << 17);
 23ed91a:	f9b5 7036 	ldrsh.w	r7, [r5, #54]	; 0x36
 23ed91e:	fb07 fe0e 	mul.w	lr, r7, lr
 23ed922:	ea4f 78e7 	mov.w	r8, r7, asr #31
 23ed926:	fb01 ee08 	mla	lr, r1, r8, lr
 23ed92a:	fba7 7101 	umull	r7, r1, r7, r1
 23ed92e:	4471      	add	r1, lr
 23ed930:	0449      	lsls	r1, r1, #17
 23ed932:	ea41 31d7 	orr.w	r1, r1, r7, lsr #15
 23ed936:	047f      	lsls	r7, r7, #17
 23ed938:	193f      	adds	r7, r7, r4
 23ed93a:	eb46 0601 	adc.w	r6, r6, r1
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4) << 35);
 23ed93e:	f9b5 1034 	ldrsh.w	r1, [r5, #52]	; 0x34
    return 0; // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
 23ed942:	f5c0 1480 	rsb	r4, r0, #1048576	; 0x100000
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4) << 35);
 23ed946:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
  p = (((p << 31) - var2) * 3125) / var1;
 23ed94a:	f640 4135 	movw	r1, #3125	; 0xc35
 23ed94e:	f004 4000 	and.w	r0, r4, #2147483648	; 0x80000000
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4) << 35);
 23ed952:	eb1c 0707 	adds.w	r7, ip, r7
  p = (((p << 31) - var2) * 3125) / var1;
 23ed956:	ea40 0054 	orr.w	r0, r0, r4, lsr #1
 23ed95a:	07e4      	lsls	r4, r4, #31
 23ed95c:	1be4      	subs	r4, r4, r7
 23ed95e:	eb60 0606 	sbc.w	r6, r0, r6
 23ed962:	fba4 0401 	umull	r0, r4, r4, r1
 23ed966:	fb01 4106 	mla	r1, r1, r6, r4
 23ed96a:	f7f5 fab7 	bl	23e2edc <__aeabi_ldivmod>
 23ed96e:	4686      	mov	lr, r0
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23ed970:	f9b5 203e 	ldrsh.w	r2, [r5, #62]	; 0x3e
 23ed974:	ea4f 3c61 	mov.w	ip, r1, asr #13
 23ed978:	fb02 f70c 	mul.w	r7, r2, ip
 23ed97c:	0b43      	lsrs	r3, r0, #13
 23ed97e:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
 23ed982:	17d4      	asrs	r4, r2, #31
 23ed984:	fb03 7704 	mla	r7, r3, r4, r7
 23ed988:	fba2 2403 	umull	r2, r4, r2, r3
 23ed98c:	443c      	add	r4, r7
 23ed98e:	fb02 f70c 	mul.w	r7, r2, ip
 23ed992:	fb03 7704 	mla	r7, r3, r4, r7
 23ed996:	fba2 2303 	umull	r2, r3, r2, r3
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 23ed99a:	f9b5 603c 	ldrsh.w	r6, [r5, #60]	; 0x3c
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23ed99e:	441f      	add	r7, r3
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 23ed9a0:	fb06 f401 	mul.w	r4, r6, r1
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23ed9a4:	0e53      	lsrs	r3, r2, #25
 23ed9a6:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7

  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7) << 4);
 23ed9aa:	181b      	adds	r3, r3, r0
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 23ed9ac:	ea4f 72e6 	mov.w	r2, r6, asr #31
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7) << 4);
 23ed9b0:	eb41 6767 	adc.w	r7, r1, r7, asr #25
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 23ed9b4:	fb02 4100 	mla	r1, r2, r0, r4
 23ed9b8:	fba6 060e 	umull	r0, r6, r6, lr
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7) << 4);
 23ed9bc:	f9b5 403a 	ldrsh.w	r4, [r5, #58]	; 0x3a
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 23ed9c0:	4431      	add	r1, r6
 23ed9c2:	0cc0      	lsrs	r0, r0, #19
 23ed9c4:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7) << 4);
 23ed9c8:	1818      	adds	r0, r3, r0
 23ed9ca:	ea4f 75e4 	mov.w	r5, r4, asr #31
 23ed9ce:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
 23ed9d2:	0a00      	lsrs	r0, r0, #8
 23ed9d4:	012d      	lsls	r5, r5, #4
 23ed9d6:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 23ed9da:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
 23ed9de:	0124      	lsls	r4, r4, #4
 23ed9e0:	1820      	adds	r0, r4, r0
  return (float)p / 256;
 23ed9e2:	eb45 2121 	adc.w	r1, r5, r1, asr #8
 23ed9e6:	f7f5 fa3b 	bl	23e2e60 <__aeabi_l2f>
 23ed9ea:	ed9f 0a07 	vldr	s0, [pc, #28]	; 23eda08 <_ZN15Adafruit_BME28012readPressureEv+0x194>
 23ed9ee:	ee07 0a90 	vmov	s15, r0
 23ed9f2:	ee27 0a80 	vmul.f32	s0, s15, s0
}
 23ed9f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NAN;
 23ed9fa:	ed9f 0a04 	vldr	s0, [pc, #16]	; 23eda0c <_ZN15Adafruit_BME28012readPressureEv+0x198>
 23ed9fe:	e7fa      	b.n	23ed9f6 <_ZN15Adafruit_BME28012readPressureEv+0x182>
    return 0; // avoid exception caused by division by zero
 23eda00:	ed9f 0a03 	vldr	s0, [pc, #12]	; 23eda10 <_ZN15Adafruit_BME28012readPressureEv+0x19c>
 23eda04:	e7f7      	b.n	23ed9f6 <_ZN15Adafruit_BME28012readPressureEv+0x182>
 23eda06:	bf00      	nop
 23eda08:	3b800000 	.word	0x3b800000
 23eda0c:	7fc00000 	.word	0x7fc00000
 23eda10:	00000000 	.word	0x00000000

023eda14 <_ZN15Adafruit_BME28012readHumidityEv>:

/*!
 *  @brief  Returns the humidity from the sensor
 *  @returns the humidity value read from the device
 */
float Adafruit_BME280::readHumidity(void) {
 23eda14:	b538      	push	{r3, r4, r5, lr}
 23eda16:	4604      	mov	r4, r0
  readTemperature(); // must be done first to get t_fine
 23eda18:	f7ff fefa 	bl	23ed810 <_ZN15Adafruit_BME28015readTemperatureEv>

  int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
 23eda1c:	21fd      	movs	r1, #253	; 0xfd
 23eda1e:	4620      	mov	r0, r4
 23eda20:	f7ff fd48 	bl	23ed4b4 <_ZN15Adafruit_BME2806read16Eh>
  if (adc_H == 0x8000) // value in case humidity measurement was disabled
 23eda24:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 23eda28:	d038      	beq.n	23eda9c <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    return NAN;

  int32_t v_x1_u32r;

  v_x1_u32r = (t_fine - ((int32_t)76800));
 23eda2a:	69e1      	ldr	r1, [r4, #28]

  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                  (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) +
 23eda2c:	f9b4 2048 	ldrsh.w	r2, [r4, #72]	; 0x48
  v_x1_u32r = (t_fine - ((int32_t)76800));
 23eda30:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
 23eda34:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
 23eda38:	0509      	lsls	r1, r1, #20
 23eda3a:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
 23eda3e:	fb05 3312 	mls	r3, r5, r2, r3
                  (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) +
 23eda42:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
                 ((int32_t)16384)) >>
 23eda46:	13da      	asrs	r2, r3, #15
                15) *
               (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                    (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) +
 23eda48:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
               (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
 23eda4c:	f994 104a 	ldrsb.w	r1, [r4, #74]	; 0x4a
                    (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) +
 23eda50:	436b      	muls	r3, r5
               (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
 23eda52:	4369      	muls	r1, r5
                    (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) +
 23eda54:	12db      	asrs	r3, r3, #11
               (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
 23eda56:	1289      	asrs	r1, r1, #10
                    (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) +
 23eda58:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
               (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
 23eda5c:	434b      	muls	r3, r1
                     ((int32_t)32768))) >>
                   10) +
                  ((int32_t)2097152)) *
                     ((int32_t)_bme280_calib.dig_H2) +
 23eda5e:	f9b4 1042 	ldrsh.w	r1, [r4, #66]	; 0x42
                     ((int32_t)32768))) >>
 23eda62:	129b      	asrs	r3, r3, #10
                   10) +
 23eda64:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                  ((int32_t)2097152)) *
 23eda68:	434b      	muls	r3, r1
                     ((int32_t)_bme280_calib.dig_H2) +
 23eda6a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
                 8192) >>
 23eda6e:	139b      	asrs	r3, r3, #14
  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
 23eda70:	4353      	muls	r3, r2
                14));

  v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 23eda72:	13da      	asrs	r2, r3, #15
 23eda74:	4352      	muls	r2, r2
                             ((int32_t)_bme280_calib.dig_H1)) >>
 23eda76:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
  v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 23eda7a:	11d2      	asrs	r2, r2, #7
 23eda7c:	434a      	muls	r2, r1
 23eda7e:	eba3 1322 	sub.w	r3, r3, r2, asr #4
                            4));

  v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 23eda82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 23eda86:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 23eda8a:	bfa8      	it	ge
 23eda8c:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
  float h = (v_x1_u32r >> 12);
 23eda90:	131b      	asrs	r3, r3, #12
 23eda92:	ee00 3a10 	vmov	s0, r3
  return h / 1024.0;
 23eda96:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
 23eda9a:	bd38      	pop	{r3, r4, r5, pc}
    return NAN;
 23eda9c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 23edaa4 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
 23edaa0:	e7fb      	b.n	23eda9a <_ZN15Adafruit_BME28012readHumidityEv+0x86>
 23edaa2:	bf00      	nop
 23edaa4:	7fc00000 	.word	0x7fc00000

023edaa8 <_ZN24Adafruit_BMP280_PressureD1Ev>:
  int _sensorID = 280;
  Adafruit_BMP280 *_theBMP280 = NULL;
};

/** Adafruit Unified Sensor interface for pressure component of BMP280 */
class Adafruit_BMP280_Pressure : public Adafruit_Sensor {
 23edaa8:	4770      	bx	lr

023edaaa <_ZN20Adafruit_BMP280_TempD1Ev>:
class Adafruit_BMP280_Temp : public Adafruit_Sensor {
 23edaaa:	4770      	bx	lr

023edaac <_ZN20Adafruit_BMP280_TempD0Ev>:
 23edaac:	b510      	push	{r4, lr}
 23edaae:	4604      	mov	r4, r0
 23edab0:	2110      	movs	r1, #16
 23edab2:	f7f5 fc26 	bl	23e3302 <_ZdlPvj>
 23edab6:	4620      	mov	r0, r4
 23edab8:	bd10      	pop	{r4, pc}

023edaba <_ZN24Adafruit_BMP280_PressureD0Ev>:
class Adafruit_BMP280_Pressure : public Adafruit_Sensor {
 23edaba:	b510      	push	{r4, lr}
 23edabc:	4604      	mov	r4, r0
 23edabe:	2110      	movs	r1, #16
 23edac0:	f7f5 fc1f 	bl	23e3302 <_ZdlPvj>
 23edac4:	4620      	mov	r0, r4
 23edac6:	bd10      	pop	{r4, pc}

023edac8 <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data for the BMP280's temperature sensor
*/
/**************************************************************************/
void Adafruit_BMP280_Temp::getSensor(sensor_t *sensor) {
 23edac8:	b538      	push	{r3, r4, r5, lr}
 23edaca:	460c      	mov	r4, r1
 23edacc:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 23edace:	2220      	movs	r2, #32
 23edad0:	2100      	movs	r1, #0
 23edad2:	f104 0008 	add.w	r0, r4, #8
 23edad6:	f00e fc86 	bl	23fc3e6 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BMP280", sizeof(sensor->name) - 1);
 23edada:	220b      	movs	r2, #11
 23edadc:	4620      	mov	r0, r4
 23edade:	4908      	ldr	r1, [pc, #32]	; (23edb00 <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t+0x38>)
 23edae0:	f00e fd44 	bl	23fc56c <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
 23edae4:	2301      	movs	r3, #1
 23edae6:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
 23edae8:	68ab      	ldr	r3, [r5, #8]
 23edaea:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 23edaec:	230d      	movs	r3, #13
 23edaee:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->min_value = -40.0; /* Temperature range -40 ~ +85 C  */
 23edaf0:	4b04      	ldr	r3, [pc, #16]	; (23edb04 <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t+0x3c>)
 23edaf2:	61e3      	str	r3, [r4, #28]
  sensor->max_value = +85.0;
 23edaf4:	4b04      	ldr	r3, [pc, #16]	; (23edb08 <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t+0x40>)
 23edaf6:	61a3      	str	r3, [r4, #24]
  sensor->resolution = 0.01; /*  0.01 C */
 23edaf8:	4b04      	ldr	r3, [pc, #16]	; (23edb0c <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t+0x44>)
 23edafa:	6223      	str	r3, [r4, #32]
}
 23edafc:	bd38      	pop	{r3, r4, r5, pc}
 23edafe:	bf00      	nop
 23edb00:	023fccba 	.word	0x023fccba
 23edb04:	c2200000 	.word	0xc2200000
 23edb08:	42aa0000 	.word	0x42aa0000
 23edb0c:	3c23d70a 	.word	0x3c23d70a

023edb10 <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data for the BMP280's pressure sensor
*/
/**************************************************************************/
void Adafruit_BMP280_Pressure::getSensor(sensor_t *sensor) {
 23edb10:	b538      	push	{r3, r4, r5, lr}
 23edb12:	460c      	mov	r4, r1
 23edb14:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 23edb16:	2220      	movs	r2, #32
 23edb18:	2100      	movs	r1, #0
 23edb1a:	f104 0008 	add.w	r0, r4, #8
 23edb1e:	f00e fc62 	bl	23fc3e6 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BMP280", sizeof(sensor->name) - 1);
 23edb22:	220b      	movs	r2, #11
 23edb24:	4620      	mov	r0, r4
 23edb26:	4908      	ldr	r1, [pc, #32]	; (23edb48 <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t+0x38>)
 23edb28:	f00e fd20 	bl	23fc56c <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
 23edb2c:	2301      	movs	r3, #1
 23edb2e:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
 23edb30:	68ab      	ldr	r3, [r5, #8]
 23edb32:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_PRESSURE;
 23edb34:	2306      	movs	r3, #6
 23edb36:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->min_value = 300.0; /* 300 ~ 1100 hPa  */
 23edb38:	4b04      	ldr	r3, [pc, #16]	; (23edb4c <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t+0x3c>)
 23edb3a:	61e3      	str	r3, [r4, #28]
  sensor->max_value = 1100.0;
 23edb3c:	4b04      	ldr	r3, [pc, #16]	; (23edb50 <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t+0x40>)
 23edb3e:	61a3      	str	r3, [r4, #24]
  sensor->resolution = 0.012; /* 0.12 hPa relative */
 23edb40:	4b04      	ldr	r3, [pc, #16]	; (23edb54 <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t+0x44>)
 23edb42:	6223      	str	r3, [r4, #32]
}
 23edb44:	bd38      	pop	{r3, r4, r5, pc}
 23edb46:	bf00      	nop
 23edb48:	023fccba 	.word	0x023fccba
 23edb4c:	43960000 	.word	0x43960000
 23edb50:	44898000 	.word	0x44898000
 23edb54:	3c449ba6 	.word	0x3c449ba6

023edb58 <_ZN15Adafruit_BMP280C1EP7TwoWire>:
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1) {
 23edb58:	2300      	movs	r3, #0
Adafruit_BMP280::Adafruit_BMP280(TwoWire *theWire)
 23edb5a:	b510      	push	{r4, lr}
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1) {
 23edb5c:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23edb60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
Adafruit_BMP280::Adafruit_BMP280(TwoWire *theWire)
 23edb64:	4604      	mov	r4, r0
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1) {
 23edb66:	61c3      	str	r3, [r0, #28]
  _wire = theWire;
 23edb68:	6001      	str	r1, [r0, #0]
  temp_sensor = new Adafruit_BMP280_Temp(this);
 23edb6a:	2010      	movs	r0, #16
 23edb6c:	f7f5 fbc5 	bl	23e32fa <_Znwj>
 23edb70:	b128      	cbz	r0, 23edb7e <_ZN15Adafruit_BMP280C1EP7TwoWire+0x26>
  Adafruit_BMP280_Temp(Adafruit_BMP280 *parent) { _theBMP280 = parent; }
 23edb72:	4b09      	ldr	r3, [pc, #36]	; (23edb98 <_ZN15Adafruit_BMP280C1EP7TwoWire+0x40>)
 23edb74:	6003      	str	r3, [r0, #0]
 23edb76:	f44f 738c 	mov.w	r3, #280	; 0x118
 23edb7a:	e9c0 3402 	strd	r3, r4, [r0, #8]
 23edb7e:	60a0      	str	r0, [r4, #8]
  pressure_sensor = new Adafruit_BMP280_Pressure(this);
 23edb80:	2010      	movs	r0, #16
 23edb82:	f7f5 fbba 	bl	23e32fa <_Znwj>
 23edb86:	b120      	cbz	r0, 23edb92 <_ZN15Adafruit_BMP280C1EP7TwoWire+0x3a>
public:
  /** @brief Create an Adafruit_Sensor compatible object for the pressure sensor
      @param parent A pointer to the BMP280 class */
  Adafruit_BMP280_Pressure(Adafruit_BMP280 *parent) { _theBMP280 = parent; }
 23edb88:	4b04      	ldr	r3, [pc, #16]	; (23edb9c <_ZN15Adafruit_BMP280C1EP7TwoWire+0x44>)
 23edb8a:	6003      	str	r3, [r0, #0]
 23edb8c:	2300      	movs	r3, #0
 23edb8e:	e9c0 3402 	strd	r3, r4, [r0, #8]
 23edb92:	60e0      	str	r0, [r4, #12]
}
 23edb94:	4620      	mov	r0, r4
 23edb96:	bd10      	pop	{r4, pc}
 23edb98:	023fe6ec 	.word	0x023fe6ec
 23edb9c:	023fe708 	.word	0x023fe708

023edba0 <_ZN15Adafruit_BMP2807spixferEh>:
uint8_t Adafruit_BMP280::spixfer(uint8_t x) {
 23edba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (_sck == -1)
 23edba4:	f990 301f 	ldrsb.w	r3, [r0, #31]
uint8_t Adafruit_BMP280::spixfer(uint8_t x) {
 23edba8:	4604      	mov	r4, r0
  if (_sck == -1)
 23edbaa:	3301      	adds	r3, #1
uint8_t Adafruit_BMP280::spixfer(uint8_t x) {
 23edbac:	460f      	mov	r7, r1
  if (_sck == -1)
 23edbae:	d104      	bne.n	23edbba <_ZN15Adafruit_BMP2807spixferEh+0x1a>
}
 23edbb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return _spi->transfer(x);
 23edbb4:	6840      	ldr	r0, [r0, #4]
 23edbb6:	f00a bf47 	b.w	23f8a48 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
 23edbba:	2500      	movs	r5, #0
  for (int i = 7; i >= 0; i--) {
 23edbbc:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1 << i));
 23edbbe:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
 23edbc2:	f994 001f 	ldrsb.w	r0, [r4, #31]
 23edbc6:	2100      	movs	r1, #0
 23edbc8:	b280      	uxth	r0, r0
 23edbca:	f00b fdb8 	bl	23f973e <digitalWrite>
    digitalWrite(_mosi, x & (1 << i));
 23edbce:	f994 001d 	ldrsb.w	r0, [r4, #29]
 23edbd2:	fa08 f106 	lsl.w	r1, r8, r6
 23edbd6:	4039      	ands	r1, r7
 23edbd8:	b280      	uxth	r0, r0
 23edbda:	f00b fdb0 	bl	23f973e <digitalWrite>
    digitalWrite(_sck, HIGH);
 23edbde:	f994 001f 	ldrsb.w	r0, [r4, #31]
 23edbe2:	2101      	movs	r1, #1
 23edbe4:	b280      	uxth	r0, r0
 23edbe6:	f00b fdaa 	bl	23f973e <digitalWrite>
    if (digitalRead(_miso))
 23edbea:	f994 001e 	ldrsb.w	r0, [r4, #30]
    reply <<= 1;
 23edbee:	006d      	lsls	r5, r5, #1
    if (digitalRead(_miso))
 23edbf0:	b280      	uxth	r0, r0
    reply <<= 1;
 23edbf2:	b2ed      	uxtb	r5, r5
    if (digitalRead(_miso))
 23edbf4:	f00b fdbc 	bl	23f9770 <digitalRead>
 23edbf8:	b108      	cbz	r0, 23edbfe <_ZN15Adafruit_BMP2807spixferEh+0x5e>
      reply |= 1;
 23edbfa:	f045 0501 	orr.w	r5, r5, #1
  for (int i = 7; i >= 0; i--) {
 23edbfe:	3e01      	subs	r6, #1
 23edc00:	d2df      	bcs.n	23edbc2 <_ZN15Adafruit_BMP2807spixferEh+0x22>
}
 23edc02:	4628      	mov	r0, r5
 23edc04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023edc08 <_ZN15Adafruit_BMP2806write8Ehh>:
void Adafruit_BMP280::write8(byte reg, byte value) {
 23edc08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (_cs == -1) {
 23edc0a:	f990 301c 	ldrsb.w	r3, [r0, #28]
void Adafruit_BMP280::write8(byte reg, byte value) {
 23edc0e:	4604      	mov	r4, r0
  if (_cs == -1) {
 23edc10:	3301      	adds	r3, #1
void Adafruit_BMP280::write8(byte reg, byte value) {
 23edc12:	460e      	mov	r6, r1
 23edc14:	4615      	mov	r5, r2
  if (_cs == -1) {
 23edc16:	d113      	bne.n	23edc40 <_ZN15Adafruit_BMP2806write8Ehh+0x38>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23edc18:	7c01      	ldrb	r1, [r0, #16]
 23edc1a:	6800      	ldr	r0, [r0, #0]
 23edc1c:	f00a f962 	bl	23f7ee4 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23edc20:	6820      	ldr	r0, [r4, #0]
 23edc22:	4631      	mov	r1, r6
 23edc24:	6803      	ldr	r3, [r0, #0]
 23edc26:	689b      	ldr	r3, [r3, #8]
 23edc28:	4798      	blx	r3
    _wire->write((uint8_t)value);
 23edc2a:	6820      	ldr	r0, [r4, #0]
 23edc2c:	4629      	mov	r1, r5
 23edc2e:	6803      	ldr	r3, [r0, #0]
 23edc30:	689b      	ldr	r3, [r3, #8]
 23edc32:	4798      	blx	r3
    _wire->endTransmission();
 23edc34:	6820      	ldr	r0, [r4, #0]
}
 23edc36:	b004      	add	sp, #16
 23edc38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _wire->endTransmission();
 23edc3c:	f00a b95d 	b.w	23f7efa <_ZN7TwoWire15endTransmissionEv>
    if (_sck == -1)
 23edc40:	f990 301f 	ldrsb.w	r3, [r0, #31]
 23edc44:	3301      	adds	r3, #1
 23edc46:	d10d      	bne.n	23edc64 <_ZN15Adafruit_BMP2806write8Ehh+0x5c>
 23edc48:	4b17      	ldr	r3, [pc, #92]	; (23edca8 <_ZN15Adafruit_BMP2806write8Ehh+0xa0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23edc4a:	4669      	mov	r1, sp
 23edc4c:	9300      	str	r3, [sp, #0]
 23edc4e:	2300      	movs	r3, #0
 23edc50:	f88d 3004 	strb.w	r3, [sp, #4]
 23edc54:	4b15      	ldr	r3, [pc, #84]	; (23edcac <_ZN15Adafruit_BMP2806write8Ehh+0xa4>)
 23edc56:	6840      	ldr	r0, [r0, #4]
 23edc58:	9302      	str	r3, [sp, #8]
 23edc5a:	2301      	movs	r3, #1
 23edc5c:	f8ad 300c 	strh.w	r3, [sp, #12]
 23edc60:	f00a fe84 	bl	23f896c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23edc64:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23edc68:	2100      	movs	r1, #0
 23edc6a:	b280      	uxth	r0, r0
 23edc6c:	f00b fd67 	bl	23f973e <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
 23edc70:	f006 017f 	and.w	r1, r6, #127	; 0x7f
 23edc74:	4620      	mov	r0, r4
 23edc76:	f7ff ff93 	bl	23edba0 <_ZN15Adafruit_BMP2807spixferEh>
    spixfer(value);
 23edc7a:	4629      	mov	r1, r5
 23edc7c:	4620      	mov	r0, r4
 23edc7e:	f7ff ff8f 	bl	23edba0 <_ZN15Adafruit_BMP2807spixferEh>
    digitalWrite(_cs, HIGH);
 23edc82:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23edc86:	2101      	movs	r1, #1
 23edc88:	b280      	uxth	r0, r0
 23edc8a:	f00b fd58 	bl	23f973e <digitalWrite>
    if (_sck == -1)
 23edc8e:	f994 301f 	ldrsb.w	r3, [r4, #31]
 23edc92:	3301      	adds	r3, #1
 23edc94:	d105      	bne.n	23edca2 <_ZN15Adafruit_BMP2806write8Ehh+0x9a>
      _spi->endTransaction(); // release the SPI bus
 23edc96:	6860      	ldr	r0, [r4, #4]
}
 23edc98:	b004      	add	sp, #16
 23edc9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      _spi->endTransaction(); // release the SPI bus
 23edc9e:	f00a be4b 	b.w	23f8938 <_ZN8SPIClass14endTransactionEv>
}
 23edca2:	b004      	add	sp, #16
 23edca4:	bd70      	pop	{r4, r5, r6, pc}
 23edca6:	bf00      	nop
 23edca8:	023fe4ac 	.word	0x023fe4ac
 23edcac:	0007a120 	.word	0x0007a120

023edcb0 <_ZN15Adafruit_BMP28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_NS_13sensor_filterENS_16standby_durationE>:
                                  standby_duration duration) {
 23edcb0:	b570      	push	{r4, r5, r6, lr}
 23edcb2:	4604      	mov	r4, r0
  _measReg.osrs_t = tempSampling;
 23edcb4:	00db      	lsls	r3, r3, #3
 23edcb6:	f002 0207 	and.w	r2, r2, #7
 23edcba:	f003 0338 	and.w	r3, r3, #56	; 0x38
                                  standby_duration duration) {
 23edcbe:	f89d 5010 	ldrb.w	r5, [sp, #16]
  _measReg.osrs_t = tempSampling;
 23edcc2:	4313      	orrs	r3, r2
                                  standby_duration duration) {
 23edcc4:	f89d 6014 	ldrb.w	r6, [sp, #20]
  _configReg.filter = filter;
 23edcc8:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
  _measReg.osrs_t = tempSampling;
 23edccc:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 23edcd0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  _configReg.filter = filter;
 23edcd4:	f005 0307 	and.w	r3, r5, #7
  _configReg.t_sb = duration;
 23edcd8:	f006 0107 	and.w	r1, r6, #7
  _configReg.filter = filter;
 23edcdc:	f363 02c5 	bfi	r2, r3, #3, #3
  _configReg.t_sb = duration;
 23edce0:	f361 0202 	bfi	r2, r1, #0, #3
    /** Unused - don't set */
    unsigned int none : 1;
    /** Enables 3-wire SPI */
    unsigned int spi3w_en : 1;
    /** Used to retrieve the assembled config register's byte value. */
    unsigned int get() { return (t_sb << 5) | (filter << 2) | spi3w_en; }
 23edce4:	009b      	lsls	r3, r3, #2
 23edce6:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 23edcea:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 23edcee:	f3c2 12c0 	ubfx	r2, r2, #7, #1
  write8(BMP280_REGISTER_CONFIG, _configReg.get());
 23edcf2:	431a      	orrs	r2, r3
 23edcf4:	21f5      	movs	r1, #245	; 0xf5
 23edcf6:	f7ff ff87 	bl	23edc08 <_ZN15Adafruit_BMP2806write8Ehh>
    /** Pressure oversampling. */
    unsigned int osrs_p : 3;
    /** Device mode */
    unsigned int mode : 2;
    /** Used to retrieve the assembled ctrl_meas register's byte value. */
    unsigned int get() { return (osrs_t << 5) | (osrs_p << 2) | mode; }
 23edcfa:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
  write8(BMP280_REGISTER_CONTROL, _measReg.get());
 23edcfe:	4620      	mov	r0, r4
}
 23edd00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23edd04:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 23edd08:	f002 0107 	and.w	r1, r2, #7
 23edd0c:	009b      	lsls	r3, r3, #2
 23edd0e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
  write8(BMP280_REGISTER_CONTROL, _measReg.get());
 23edd12:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
 23edd16:	21f4      	movs	r1, #244	; 0xf4
 23edd18:	f7ff bf76 	b.w	23edc08 <_ZN15Adafruit_BMP2806write8Ehh>

023edd1c <_ZN15Adafruit_BMP2805read8Eh>:
uint8_t Adafruit_BMP280::read8(byte reg) {
 23edd1c:	b530      	push	{r4, r5, lr}
  if (_cs == -1) {
 23edd1e:	f990 301c 	ldrsb.w	r3, [r0, #28]
uint8_t Adafruit_BMP280::read8(byte reg) {
 23edd22:	4604      	mov	r4, r0
  if (_cs == -1) {
 23edd24:	3301      	adds	r3, #1
uint8_t Adafruit_BMP280::read8(byte reg) {
 23edd26:	460d      	mov	r5, r1
 23edd28:	b085      	sub	sp, #20
  if (_cs == -1) {
 23edd2a:	d118      	bne.n	23edd5e <_ZN15Adafruit_BMP2805read8Eh+0x42>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23edd2c:	7c01      	ldrb	r1, [r0, #16]
 23edd2e:	6800      	ldr	r0, [r0, #0]
 23edd30:	f00a f8d8 	bl	23f7ee4 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23edd34:	6820      	ldr	r0, [r4, #0]
 23edd36:	4629      	mov	r1, r5
 23edd38:	6803      	ldr	r3, [r0, #0]
 23edd3a:	689b      	ldr	r3, [r3, #8]
 23edd3c:	4798      	blx	r3
    _wire->endTransmission();
 23edd3e:	6820      	ldr	r0, [r4, #0]
 23edd40:	f00a f8db 	bl	23f7efa <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)1);
 23edd44:	2201      	movs	r2, #1
 23edd46:	7c21      	ldrb	r1, [r4, #16]
 23edd48:	6820      	ldr	r0, [r4, #0]
 23edd4a:	f00a f8c8 	bl	23f7ede <_ZN7TwoWire11requestFromEhj>
    value = _wire->read();
 23edd4e:	6820      	ldr	r0, [r4, #0]
 23edd50:	6803      	ldr	r3, [r0, #0]
 23edd52:	695b      	ldr	r3, [r3, #20]
 23edd54:	4798      	blx	r3
 23edd56:	b2c5      	uxtb	r5, r0
}
 23edd58:	4628      	mov	r0, r5
 23edd5a:	b005      	add	sp, #20
 23edd5c:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23edd5e:	f990 301f 	ldrsb.w	r3, [r0, #31]
 23edd62:	3301      	adds	r3, #1
 23edd64:	d10d      	bne.n	23edd82 <_ZN15Adafruit_BMP2805read8Eh+0x66>
 23edd66:	4b16      	ldr	r3, [pc, #88]	; (23eddc0 <_ZN15Adafruit_BMP2805read8Eh+0xa4>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23edd68:	4669      	mov	r1, sp
 23edd6a:	9300      	str	r3, [sp, #0]
 23edd6c:	2300      	movs	r3, #0
 23edd6e:	f88d 3004 	strb.w	r3, [sp, #4]
 23edd72:	4b14      	ldr	r3, [pc, #80]	; (23eddc4 <_ZN15Adafruit_BMP2805read8Eh+0xa8>)
 23edd74:	6840      	ldr	r0, [r0, #4]
 23edd76:	9302      	str	r3, [sp, #8]
 23edd78:	2301      	movs	r3, #1
 23edd7a:	f8ad 300c 	strh.w	r3, [sp, #12]
 23edd7e:	f00a fdf5 	bl	23f896c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23edd82:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23edd86:	2100      	movs	r1, #0
 23edd88:	b280      	uxth	r0, r0
 23edd8a:	f00b fcd8 	bl	23f973e <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23edd8e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23edd92:	4620      	mov	r0, r4
 23edd94:	f7ff ff04 	bl	23edba0 <_ZN15Adafruit_BMP2807spixferEh>
    value = spixfer(0);
 23edd98:	2100      	movs	r1, #0
 23edd9a:	4620      	mov	r0, r4
 23edd9c:	f7ff ff00 	bl	23edba0 <_ZN15Adafruit_BMP2807spixferEh>
 23edda0:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
 23edda2:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23edda6:	2101      	movs	r1, #1
 23edda8:	b280      	uxth	r0, r0
 23eddaa:	f00b fcc8 	bl	23f973e <digitalWrite>
    if (_sck == -1)
 23eddae:	f994 301f 	ldrsb.w	r3, [r4, #31]
 23eddb2:	3301      	adds	r3, #1
 23eddb4:	d1d0      	bne.n	23edd58 <_ZN15Adafruit_BMP2805read8Eh+0x3c>
      _spi->endTransaction(); // release the SPI bus
 23eddb6:	6860      	ldr	r0, [r4, #4]
 23eddb8:	f00a fdbe 	bl	23f8938 <_ZN8SPIClass14endTransactionEv>
 23eddbc:	e7cc      	b.n	23edd58 <_ZN15Adafruit_BMP2805read8Eh+0x3c>
 23eddbe:	bf00      	nop
 23eddc0:	023fe4ac 	.word	0x023fe4ac
 23eddc4:	0007a120 	.word	0x0007a120

023eddc8 <_ZN15Adafruit_BMP2806read16Eh>:
uint16_t Adafruit_BMP280::read16(byte reg) {
 23eddc8:	b530      	push	{r4, r5, lr}
  if (_cs == -1) {
 23eddca:	f990 301c 	ldrsb.w	r3, [r0, #28]
uint16_t Adafruit_BMP280::read16(byte reg) {
 23eddce:	4604      	mov	r4, r0
  if (_cs == -1) {
 23eddd0:	3301      	adds	r3, #1
uint16_t Adafruit_BMP280::read16(byte reg) {
 23eddd2:	460d      	mov	r5, r1
 23eddd4:	b085      	sub	sp, #20
  if (_cs == -1) {
 23eddd6:	d11f      	bne.n	23ede18 <_ZN15Adafruit_BMP2806read16Eh+0x50>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23eddd8:	7c01      	ldrb	r1, [r0, #16]
 23eddda:	6800      	ldr	r0, [r0, #0]
 23edddc:	f00a f882 	bl	23f7ee4 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23edde0:	6820      	ldr	r0, [r4, #0]
 23edde2:	4629      	mov	r1, r5
 23edde4:	6803      	ldr	r3, [r0, #0]
 23edde6:	689b      	ldr	r3, [r3, #8]
 23edde8:	4798      	blx	r3
    _wire->endTransmission();
 23eddea:	6820      	ldr	r0, [r4, #0]
 23eddec:	f00a f885 	bl	23f7efa <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)2);
 23eddf0:	2202      	movs	r2, #2
 23eddf2:	7c21      	ldrb	r1, [r4, #16]
 23eddf4:	6820      	ldr	r0, [r4, #0]
 23eddf6:	f00a f872 	bl	23f7ede <_ZN7TwoWire11requestFromEhj>
    value = (_wire->read() << 8) | _wire->read();
 23eddfa:	6820      	ldr	r0, [r4, #0]
 23eddfc:	6803      	ldr	r3, [r0, #0]
 23eddfe:	695b      	ldr	r3, [r3, #20]
 23ede00:	4798      	blx	r3
 23ede02:	4605      	mov	r5, r0
 23ede04:	6820      	ldr	r0, [r4, #0]
 23ede06:	6803      	ldr	r3, [r0, #0]
 23ede08:	695b      	ldr	r3, [r3, #20]
 23ede0a:	4798      	blx	r3
 23ede0c:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 23ede10:	b285      	uxth	r5, r0
}
 23ede12:	4628      	mov	r0, r5
 23ede14:	b005      	add	sp, #20
 23ede16:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23ede18:	f990 301f 	ldrsb.w	r3, [r0, #31]
 23ede1c:	3301      	adds	r3, #1
 23ede1e:	d10d      	bne.n	23ede3c <_ZN15Adafruit_BMP2806read16Eh+0x74>
 23ede20:	4b19      	ldr	r3, [pc, #100]	; (23ede88 <_ZN15Adafruit_BMP2806read16Eh+0xc0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23ede22:	4669      	mov	r1, sp
 23ede24:	9300      	str	r3, [sp, #0]
 23ede26:	2300      	movs	r3, #0
 23ede28:	f88d 3004 	strb.w	r3, [sp, #4]
 23ede2c:	4b17      	ldr	r3, [pc, #92]	; (23ede8c <_ZN15Adafruit_BMP2806read16Eh+0xc4>)
 23ede2e:	6840      	ldr	r0, [r0, #4]
 23ede30:	9302      	str	r3, [sp, #8]
 23ede32:	2301      	movs	r3, #1
 23ede34:	f8ad 300c 	strh.w	r3, [sp, #12]
 23ede38:	f00a fd98 	bl	23f896c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23ede3c:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23ede40:	2100      	movs	r1, #0
 23ede42:	b280      	uxth	r0, r0
 23ede44:	f00b fc7b 	bl	23f973e <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23ede48:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23ede4c:	4620      	mov	r0, r4
 23ede4e:	f7ff fea7 	bl	23edba0 <_ZN15Adafruit_BMP2807spixferEh>
    value = (spixfer(0) << 8) | spixfer(0);
 23ede52:	2100      	movs	r1, #0
 23ede54:	4620      	mov	r0, r4
 23ede56:	f7ff fea3 	bl	23edba0 <_ZN15Adafruit_BMP2807spixferEh>
 23ede5a:	2100      	movs	r1, #0
 23ede5c:	4605      	mov	r5, r0
 23ede5e:	4620      	mov	r0, r4
 23ede60:	f7ff fe9e 	bl	23edba0 <_ZN15Adafruit_BMP2807spixferEh>
 23ede64:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 23ede68:	b285      	uxth	r5, r0
    digitalWrite(_cs, HIGH);
 23ede6a:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23ede6e:	2101      	movs	r1, #1
 23ede70:	b280      	uxth	r0, r0
 23ede72:	f00b fc64 	bl	23f973e <digitalWrite>
    if (_sck == -1)
 23ede76:	f994 301f 	ldrsb.w	r3, [r4, #31]
 23ede7a:	3301      	adds	r3, #1
 23ede7c:	d1c9      	bne.n	23ede12 <_ZN15Adafruit_BMP2806read16Eh+0x4a>
      _spi->endTransaction(); // release the SPI bus
 23ede7e:	6860      	ldr	r0, [r4, #4]
 23ede80:	f00a fd5a 	bl	23f8938 <_ZN8SPIClass14endTransactionEv>
 23ede84:	e7c5      	b.n	23ede12 <_ZN15Adafruit_BMP2806read16Eh+0x4a>
 23ede86:	bf00      	nop
 23ede88:	023fe4ac 	.word	0x023fe4ac
 23ede8c:	0007a120 	.word	0x0007a120

023ede90 <_ZN15Adafruit_BMP2809read16_LEEh>:
uint16_t Adafruit_BMP280::read16_LE(byte reg) {
 23ede90:	b508      	push	{r3, lr}
  uint16_t temp = read16(reg);
 23ede92:	f7ff ff99 	bl	23eddc8 <_ZN15Adafruit_BMP2806read16Eh>
  return (temp >> 8) | (temp << 8);
 23ede96:	ba40      	rev16	r0, r0
}
 23ede98:	b280      	uxth	r0, r0
 23ede9a:	bd08      	pop	{r3, pc}

023ede9c <_ZN15Adafruit_BMP2806read24Eh>:
uint32_t Adafruit_BMP280::read24(byte reg) {
 23ede9c:	b530      	push	{r4, r5, lr}
  if (_cs == -1) {
 23ede9e:	f990 301c 	ldrsb.w	r3, [r0, #28]
uint32_t Adafruit_BMP280::read24(byte reg) {
 23edea2:	4604      	mov	r4, r0
  if (_cs == -1) {
 23edea4:	3301      	adds	r3, #1
uint32_t Adafruit_BMP280::read24(byte reg) {
 23edea6:	460d      	mov	r5, r1
 23edea8:	b085      	sub	sp, #20
  if (_cs == -1) {
 23edeaa:	d123      	bne.n	23edef4 <_ZN15Adafruit_BMP2806read24Eh+0x58>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23edeac:	7c01      	ldrb	r1, [r0, #16]
 23edeae:	6800      	ldr	r0, [r0, #0]
 23edeb0:	f00a f818 	bl	23f7ee4 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23edeb4:	6820      	ldr	r0, [r4, #0]
 23edeb6:	4629      	mov	r1, r5
 23edeb8:	6803      	ldr	r3, [r0, #0]
 23edeba:	689b      	ldr	r3, [r3, #8]
 23edebc:	4798      	blx	r3
    _wire->endTransmission();
 23edebe:	6820      	ldr	r0, [r4, #0]
 23edec0:	f00a f81b 	bl	23f7efa <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)3);
 23edec4:	2203      	movs	r2, #3
 23edec6:	7c21      	ldrb	r1, [r4, #16]
 23edec8:	6820      	ldr	r0, [r4, #0]
 23edeca:	f00a f808 	bl	23f7ede <_ZN7TwoWire11requestFromEhj>
    value = _wire->read();
 23edece:	6820      	ldr	r0, [r4, #0]
 23eded0:	6803      	ldr	r3, [r0, #0]
 23eded2:	695b      	ldr	r3, [r3, #20]
 23eded4:	4798      	blx	r3
    value <<= 8;
 23eded6:	0205      	lsls	r5, r0, #8
    value |= _wire->read();
 23eded8:	6820      	ldr	r0, [r4, #0]
 23ededa:	6803      	ldr	r3, [r0, #0]
 23ededc:	695b      	ldr	r3, [r3, #20]
 23edede:	4798      	blx	r3
 23edee0:	4328      	orrs	r0, r5
    value <<= 8;
 23edee2:	0205      	lsls	r5, r0, #8
    value |= _wire->read();
 23edee4:	6820      	ldr	r0, [r4, #0]
 23edee6:	6803      	ldr	r3, [r0, #0]
 23edee8:	695b      	ldr	r3, [r3, #20]
 23edeea:	4798      	blx	r3
 23edeec:	4305      	orrs	r5, r0
}
 23edeee:	4628      	mov	r0, r5
 23edef0:	b005      	add	sp, #20
 23edef2:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23edef4:	f990 301f 	ldrsb.w	r3, [r0, #31]
 23edef8:	3301      	adds	r3, #1
 23edefa:	d10d      	bne.n	23edf18 <_ZN15Adafruit_BMP2806read24Eh+0x7c>
 23edefc:	4b1b      	ldr	r3, [pc, #108]	; (23edf6c <_ZN15Adafruit_BMP2806read24Eh+0xd0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23edefe:	4669      	mov	r1, sp
 23edf00:	9300      	str	r3, [sp, #0]
 23edf02:	2300      	movs	r3, #0
 23edf04:	f88d 3004 	strb.w	r3, [sp, #4]
 23edf08:	4b19      	ldr	r3, [pc, #100]	; (23edf70 <_ZN15Adafruit_BMP2806read24Eh+0xd4>)
 23edf0a:	6840      	ldr	r0, [r0, #4]
 23edf0c:	9302      	str	r3, [sp, #8]
 23edf0e:	2301      	movs	r3, #1
 23edf10:	f8ad 300c 	strh.w	r3, [sp, #12]
 23edf14:	f00a fd2a 	bl	23f896c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23edf18:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23edf1c:	2100      	movs	r1, #0
 23edf1e:	b280      	uxth	r0, r0
 23edf20:	f00b fc0d 	bl	23f973e <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23edf24:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23edf28:	4620      	mov	r0, r4
 23edf2a:	f7ff fe39 	bl	23edba0 <_ZN15Adafruit_BMP2807spixferEh>
    value = spixfer(0);
 23edf2e:	2100      	movs	r1, #0
 23edf30:	4620      	mov	r0, r4
 23edf32:	f7ff fe35 	bl	23edba0 <_ZN15Adafruit_BMP2807spixferEh>
    value |= spixfer(0);
 23edf36:	2100      	movs	r1, #0
    value <<= 8;
 23edf38:	0205      	lsls	r5, r0, #8
    value |= spixfer(0);
 23edf3a:	4620      	mov	r0, r4
 23edf3c:	f7ff fe30 	bl	23edba0 <_ZN15Adafruit_BMP2807spixferEh>
 23edf40:	4328      	orrs	r0, r5
    value |= spixfer(0);
 23edf42:	2100      	movs	r1, #0
    value <<= 8;
 23edf44:	0205      	lsls	r5, r0, #8
    value |= spixfer(0);
 23edf46:	4620      	mov	r0, r4
 23edf48:	f7ff fe2a 	bl	23edba0 <_ZN15Adafruit_BMP2807spixferEh>
 23edf4c:	4305      	orrs	r5, r0
    digitalWrite(_cs, HIGH);
 23edf4e:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23edf52:	2101      	movs	r1, #1
 23edf54:	b280      	uxth	r0, r0
 23edf56:	f00b fbf2 	bl	23f973e <digitalWrite>
    if (_sck == -1)
 23edf5a:	f994 301f 	ldrsb.w	r3, [r4, #31]
 23edf5e:	3301      	adds	r3, #1
 23edf60:	d1c5      	bne.n	23edeee <_ZN15Adafruit_BMP2806read24Eh+0x52>
      _spi->endTransaction(); // release the SPI bus
 23edf62:	6860      	ldr	r0, [r4, #4]
 23edf64:	f00a fce8 	bl	23f8938 <_ZN8SPIClass14endTransactionEv>
  return value;
 23edf68:	e7c1      	b.n	23edeee <_ZN15Adafruit_BMP2806read24Eh+0x52>
 23edf6a:	bf00      	nop
 23edf6c:	023fe4ac 	.word	0x023fe4ac
 23edf70:	0007a120 	.word	0x0007a120

023edf74 <_ZN15Adafruit_BMP28016readCoefficientsEv>:
void Adafruit_BMP280::readCoefficients() {
 23edf74:	b510      	push	{r4, lr}
  _bmp280_calib.dig_T1 = read16_LE(BMP280_REGISTER_DIG_T1);
 23edf76:	2188      	movs	r1, #136	; 0x88
void Adafruit_BMP280::readCoefficients() {
 23edf78:	4604      	mov	r4, r0
  _bmp280_calib.dig_T1 = read16_LE(BMP280_REGISTER_DIG_T1);
 23edf7a:	f7ff ff89 	bl	23ede90 <_ZN15Adafruit_BMP2809read16_LEEh>
  return (int16_t)read16_LE(reg);
 23edf7e:	218a      	movs	r1, #138	; 0x8a
  _bmp280_calib.dig_T1 = read16_LE(BMP280_REGISTER_DIG_T1);
 23edf80:	8420      	strh	r0, [r4, #32]
  return (int16_t)read16_LE(reg);
 23edf82:	4620      	mov	r0, r4
 23edf84:	f7ff ff84 	bl	23ede90 <_ZN15Adafruit_BMP2809read16_LEEh>
 23edf88:	218c      	movs	r1, #140	; 0x8c
  _bmp280_calib.dig_T2 = readS16_LE(BMP280_REGISTER_DIG_T2);
 23edf8a:	8460      	strh	r0, [r4, #34]	; 0x22
  return (int16_t)read16_LE(reg);
 23edf8c:	4620      	mov	r0, r4
 23edf8e:	f7ff ff7f 	bl	23ede90 <_ZN15Adafruit_BMP2809read16_LEEh>
  _bmp280_calib.dig_P1 = read16_LE(BMP280_REGISTER_DIG_P1);
 23edf92:	218e      	movs	r1, #142	; 0x8e
  _bmp280_calib.dig_T3 = readS16_LE(BMP280_REGISTER_DIG_T3);
 23edf94:	84a0      	strh	r0, [r4, #36]	; 0x24
  _bmp280_calib.dig_P1 = read16_LE(BMP280_REGISTER_DIG_P1);
 23edf96:	4620      	mov	r0, r4
 23edf98:	f7ff ff7a 	bl	23ede90 <_ZN15Adafruit_BMP2809read16_LEEh>
  return (int16_t)read16_LE(reg);
 23edf9c:	2190      	movs	r1, #144	; 0x90
  _bmp280_calib.dig_P1 = read16_LE(BMP280_REGISTER_DIG_P1);
 23edf9e:	84e0      	strh	r0, [r4, #38]	; 0x26
  return (int16_t)read16_LE(reg);
 23edfa0:	4620      	mov	r0, r4
 23edfa2:	f7ff ff75 	bl	23ede90 <_ZN15Adafruit_BMP2809read16_LEEh>
 23edfa6:	2192      	movs	r1, #146	; 0x92
  _bmp280_calib.dig_P2 = readS16_LE(BMP280_REGISTER_DIG_P2);
 23edfa8:	8520      	strh	r0, [r4, #40]	; 0x28
  return (int16_t)read16_LE(reg);
 23edfaa:	4620      	mov	r0, r4
 23edfac:	f7ff ff70 	bl	23ede90 <_ZN15Adafruit_BMP2809read16_LEEh>
 23edfb0:	2194      	movs	r1, #148	; 0x94
  _bmp280_calib.dig_P3 = readS16_LE(BMP280_REGISTER_DIG_P3);
 23edfb2:	8560      	strh	r0, [r4, #42]	; 0x2a
  return (int16_t)read16_LE(reg);
 23edfb4:	4620      	mov	r0, r4
 23edfb6:	f7ff ff6b 	bl	23ede90 <_ZN15Adafruit_BMP2809read16_LEEh>
 23edfba:	2196      	movs	r1, #150	; 0x96
  _bmp280_calib.dig_P4 = readS16_LE(BMP280_REGISTER_DIG_P4);
 23edfbc:	85a0      	strh	r0, [r4, #44]	; 0x2c
  return (int16_t)read16_LE(reg);
 23edfbe:	4620      	mov	r0, r4
 23edfc0:	f7ff ff66 	bl	23ede90 <_ZN15Adafruit_BMP2809read16_LEEh>
 23edfc4:	2198      	movs	r1, #152	; 0x98
  _bmp280_calib.dig_P5 = readS16_LE(BMP280_REGISTER_DIG_P5);
 23edfc6:	85e0      	strh	r0, [r4, #46]	; 0x2e
  return (int16_t)read16_LE(reg);
 23edfc8:	4620      	mov	r0, r4
 23edfca:	f7ff ff61 	bl	23ede90 <_ZN15Adafruit_BMP2809read16_LEEh>
 23edfce:	219a      	movs	r1, #154	; 0x9a
  _bmp280_calib.dig_P6 = readS16_LE(BMP280_REGISTER_DIG_P6);
 23edfd0:	8620      	strh	r0, [r4, #48]	; 0x30
  return (int16_t)read16_LE(reg);
 23edfd2:	4620      	mov	r0, r4
 23edfd4:	f7ff ff5c 	bl	23ede90 <_ZN15Adafruit_BMP2809read16_LEEh>
 23edfd8:	219c      	movs	r1, #156	; 0x9c
  _bmp280_calib.dig_P7 = readS16_LE(BMP280_REGISTER_DIG_P7);
 23edfda:	8660      	strh	r0, [r4, #50]	; 0x32
  return (int16_t)read16_LE(reg);
 23edfdc:	4620      	mov	r0, r4
 23edfde:	f7ff ff57 	bl	23ede90 <_ZN15Adafruit_BMP2809read16_LEEh>
 23edfe2:	219e      	movs	r1, #158	; 0x9e
  _bmp280_calib.dig_P8 = readS16_LE(BMP280_REGISTER_DIG_P8);
 23edfe4:	86a0      	strh	r0, [r4, #52]	; 0x34
  return (int16_t)read16_LE(reg);
 23edfe6:	4620      	mov	r0, r4
 23edfe8:	f7ff ff52 	bl	23ede90 <_ZN15Adafruit_BMP2809read16_LEEh>
  _bmp280_calib.dig_P9 = readS16_LE(BMP280_REGISTER_DIG_P9);
 23edfec:	86e0      	strh	r0, [r4, #54]	; 0x36
}
 23edfee:	bd10      	pop	{r4, pc}

023edff0 <_ZN15Adafruit_BMP2805beginEhh>:
bool Adafruit_BMP280::begin(uint8_t addr, uint8_t chipid) {
 23edff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23edff2:	4604      	mov	r4, r0
  _i2caddr = addr;
 23edff4:	7401      	strb	r1, [r0, #16]
  if (_cs == -1) {
 23edff6:	f990 001c 	ldrsb.w	r0, [r0, #28]
bool Adafruit_BMP280::begin(uint8_t addr, uint8_t chipid) {
 23edffa:	4615      	mov	r5, r2
  if (_cs == -1) {
 23edffc:	1c42      	adds	r2, r0, #1
 23edffe:	d11b      	bne.n	23ee038 <_ZN15Adafruit_BMP2805beginEhh+0x48>
    _wire->begin();
 23ee000:	6820      	ldr	r0, [r4, #0]
 23ee002:	f009 ff45 	bl	23f7e90 <_ZN7TwoWire5beginEv>
  if (read8(BMP280_REGISTER_CHIPID) != chipid)
 23ee006:	21d0      	movs	r1, #208	; 0xd0
 23ee008:	4620      	mov	r0, r4
 23ee00a:	f7ff fe87 	bl	23edd1c <_ZN15Adafruit_BMP2805read8Eh>
 23ee00e:	42a8      	cmp	r0, r5
 23ee010:	f04f 0500 	mov.w	r5, #0
 23ee014:	d133      	bne.n	23ee07e <_ZN15Adafruit_BMP2805beginEhh+0x8e>
  readCoefficients();
 23ee016:	4620      	mov	r0, r4
 23ee018:	f7ff ffac 	bl	23edf74 <_ZN15Adafruit_BMP28016readCoefficientsEv>
  setSampling();
 23ee01c:	2305      	movs	r3, #5
 23ee01e:	2103      	movs	r1, #3
 23ee020:	461a      	mov	r2, r3
 23ee022:	4620      	mov	r0, r4
 23ee024:	e9cd 5500 	strd	r5, r5, [sp]
 23ee028:	f7ff fe42 	bl	23edcb0 <_ZN15Adafruit_BMP28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_NS_13sensor_filterENS_16standby_durationE>
  delay(100);
 23ee02c:	2064      	movs	r0, #100	; 0x64
 23ee02e:	f009 f993 	bl	23f7358 <delay>
  return true;
 23ee032:	2001      	movs	r0, #1
}
 23ee034:	b003      	add	sp, #12
 23ee036:	bd30      	pop	{r4, r5, pc}
    digitalWrite(_cs, HIGH);
 23ee038:	2101      	movs	r1, #1
 23ee03a:	b280      	uxth	r0, r0
 23ee03c:	f00b fb7f 	bl	23f973e <digitalWrite>
    pinMode(_cs, OUTPUT);
 23ee040:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23ee044:	2101      	movs	r1, #1
 23ee046:	b280      	uxth	r0, r0
 23ee048:	f00b fb68 	bl	23f971c <pinMode>
    if (_sck == -1) {
 23ee04c:	f994 001f 	ldrsb.w	r0, [r4, #31]
 23ee050:	1c43      	adds	r3, r0, #1
 23ee052:	d103      	bne.n	23ee05c <_ZN15Adafruit_BMP2805beginEhh+0x6c>
      _spi->begin();
 23ee054:	6860      	ldr	r0, [r4, #4]
 23ee056:	f00a fc35 	bl	23f88c4 <_ZN8SPIClass5beginEv>
 23ee05a:	e7d4      	b.n	23ee006 <_ZN15Adafruit_BMP2805beginEhh+0x16>
      pinMode(_sck, OUTPUT);
 23ee05c:	2101      	movs	r1, #1
 23ee05e:	b280      	uxth	r0, r0
 23ee060:	f00b fb5c 	bl	23f971c <pinMode>
      pinMode(_mosi, OUTPUT);
 23ee064:	f994 001d 	ldrsb.w	r0, [r4, #29]
 23ee068:	2101      	movs	r1, #1
 23ee06a:	b280      	uxth	r0, r0
 23ee06c:	f00b fb56 	bl	23f971c <pinMode>
      pinMode(_miso, INPUT);
 23ee070:	f994 001e 	ldrsb.w	r0, [r4, #30]
 23ee074:	2100      	movs	r1, #0
 23ee076:	b280      	uxth	r0, r0
 23ee078:	f00b fb50 	bl	23f971c <pinMode>
 23ee07c:	e7c3      	b.n	23ee006 <_ZN15Adafruit_BMP2805beginEhh+0x16>
    return false;
 23ee07e:	4628      	mov	r0, r5
 23ee080:	e7d8      	b.n	23ee034 <_ZN15Adafruit_BMP2805beginEhh+0x44>
	...

023ee084 <_ZN15Adafruit_BMP28015readTemperatureEv>:
float Adafruit_BMP280::readTemperature() {
 23ee084:	b510      	push	{r4, lr}
 23ee086:	4604      	mov	r4, r0
  int32_t adc_T = read24(BMP280_REGISTER_TEMPDATA);
 23ee088:	21fa      	movs	r1, #250	; 0xfa
 23ee08a:	f7ff ff07 	bl	23ede9c <_ZN15Adafruit_BMP2806read24Eh>
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
 23ee08e:	8c21      	ldrh	r1, [r4, #32]
}
 23ee090:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 23ee0d0 <_ZN15Adafruit_BMP28015readTemperatureEv+0x4c>
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
 23ee094:	004b      	lsls	r3, r1, #1
  var2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) *
 23ee096:	ebc1 2220 	rsb	r2, r1, r0, asr #8
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
 23ee09a:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
          ((int32_t)_bmp280_calib.dig_T2)) >>
 23ee09e:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
 23ee0a2:	4359      	muls	r1, r3
  var2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) *
 23ee0a4:	fb02 f302 	mul.w	r3, r2, r2
          ((int32_t)_bmp280_calib.dig_T3)) >>
 23ee0a8:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
            ((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1))) >>
 23ee0ac:	131b      	asrs	r3, r3, #12
           12) *
 23ee0ae:	4353      	muls	r3, r2
  var2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) *
 23ee0b0:	139b      	asrs	r3, r3, #14
  t_fine = var1 + var2;
 23ee0b2:	eb03 23e1 	add.w	r3, r3, r1, asr #11
 23ee0b6:	61a3      	str	r3, [r4, #24]
  float T = (t_fine * 5 + 128) >> 8;
 23ee0b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 23ee0bc:	3380      	adds	r3, #128	; 0x80
 23ee0be:	121b      	asrs	r3, r3, #8
 23ee0c0:	ee07 3a90 	vmov	s15, r3
 23ee0c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 23ee0c8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 23ee0cc:	bd10      	pop	{r4, pc}
 23ee0ce:	bf00      	nop
 23ee0d0:	42c80000 	.word	0x42c80000

023ee0d4 <_ZN20Adafruit_BMP280_Temp8getEventEP15sensors_event_t>:
bool Adafruit_BMP280_Temp::getEvent(sensors_event_t *event) {
 23ee0d4:	b538      	push	{r3, r4, r5, lr}
 23ee0d6:	460c      	mov	r4, r1
 23ee0d8:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
 23ee0da:	2220      	movs	r2, #32
 23ee0dc:	2100      	movs	r1, #0
 23ee0de:	1d20      	adds	r0, r4, #4
 23ee0e0:	f00e f981 	bl	23fc3e6 <memset>
  event->version = sizeof(sensors_event_t);
 23ee0e4:	2324      	movs	r3, #36	; 0x24
 23ee0e6:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
 23ee0e8:	68ab      	ldr	r3, [r5, #8]
 23ee0ea:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 23ee0ec:	230d      	movs	r3, #13
 23ee0ee:	60a3      	str	r3, [r4, #8]
 23ee0f0:	f008 f9de 	bl	23f64b0 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
 23ee0f4:	6120      	str	r0, [r4, #16]
  event->temperature = _theBMP280->readTemperature();
 23ee0f6:	68e8      	ldr	r0, [r5, #12]
 23ee0f8:	f7ff ffc4 	bl	23ee084 <_ZN15Adafruit_BMP28015readTemperatureEv>
}
 23ee0fc:	2001      	movs	r0, #1
  event->temperature = _theBMP280->readTemperature();
 23ee0fe:	ed84 0a05 	vstr	s0, [r4, #20]
}
 23ee102:	bd38      	pop	{r3, r4, r5, pc}

023ee104 <_ZN15Adafruit_BMP28012readPressureEv>:
float Adafruit_BMP280::readPressure() {
 23ee104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ee108:	4604      	mov	r4, r0
  readTemperature();
 23ee10a:	f7ff ffbb 	bl	23ee084 <_ZN15Adafruit_BMP28015readTemperatureEv>
  int32_t adc_P = read24(BMP280_REGISTER_PRESSUREDATA);
 23ee10e:	21f7      	movs	r1, #247	; 0xf7
 23ee110:	4620      	mov	r0, r4
 23ee112:	f7ff fec3 	bl	23ede9c <_ZN15Adafruit_BMP2806read24Eh>
  var1 = ((int64_t)t_fine) - 128000;
 23ee116:	69a1      	ldr	r1, [r4, #24]
         ((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
 23ee118:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
  var1 = ((int64_t)t_fine) - 128000;
 23ee11c:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 23ee120:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
 23ee124:	f14c 3cff 	adc.w	ip, ip, #4294967295	; 0xffffffff
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
 23ee128:	fba1 6801 	umull	r6, r8, r1, r1
 23ee12c:	fb01 f50c 	mul.w	r5, r1, ip
         ((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
 23ee130:	fb03 f20c 	mul.w	r2, r3, ip
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
 23ee134:	eb08 0845 	add.w	r8, r8, r5, lsl #1
         ((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
 23ee138:	17dd      	asrs	r5, r3, #31
 23ee13a:	fb01 2205 	mla	r2, r1, r5, r2
 23ee13e:	fba3 3501 	umull	r3, r5, r3, r1
 23ee142:	442a      	add	r2, r5
 23ee144:	0312      	lsls	r2, r2, #12
 23ee146:	031d      	lsls	r5, r3, #12
 23ee148:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
  var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
 23ee14c:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
 23ee150:	fb03 f708 	mul.w	r7, r3, r8
 23ee154:	ea4f 7ee3 	mov.w	lr, r3, asr #31
 23ee158:	fb06 770e 	mla	r7, r6, lr, r7
 23ee15c:	fba3 3e06 	umull	r3, lr, r3, r6
 23ee160:	4477      	add	r7, lr
 23ee162:	0a1b      	lsrs	r3, r3, #8
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
 23ee164:	f8b4 e026 	ldrh.w	lr, [r4, #38]	; 0x26
  var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
 23ee168:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 23ee16c:	195b      	adds	r3, r3, r5
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
 23ee16e:	fba3 350e 	umull	r3, r5, r3, lr
  var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
 23ee172:	eb42 2227 	adc.w	r2, r2, r7, asr #8
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
 23ee176:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 23ee17a:	fb0e 5502 	mla	r5, lr, r2, r5
  var1 =
 23ee17e:	17eb      	asrs	r3, r5, #31
 23ee180:	106a      	asrs	r2, r5, #1
  if (var1 == 0) {
 23ee182:	ea53 0565 	orrs.w	r5, r3, r5, asr #1
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
 23ee186:	f04f 0700 	mov.w	r7, #0
  if (var1 == 0) {
 23ee18a:	d07b      	beq.n	23ee284 <_ZN15Adafruit_BMP28012readPressureEv+0x180>
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
 23ee18c:	f9b4 e030 	ldrsh.w	lr, [r4, #48]	; 0x30
  adc_P >>= 4;
 23ee190:	1100      	asrs	r0, r0, #4
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
 23ee192:	fb0e f508 	mul.w	r5, lr, r8
 23ee196:	ea4f 79ee 	mov.w	r9, lr, asr #31
 23ee19a:	fb06 5509 	mla	r5, r6, r9, r5
 23ee19e:	fbae e606 	umull	lr, r6, lr, r6
 23ee1a2:	4435      	add	r5, r6
  var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
 23ee1a4:	f9b4 602e 	ldrsh.w	r6, [r4, #46]	; 0x2e
  p = 1048576 - adc_P;
 23ee1a8:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
  var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
 23ee1ac:	fb06 fc0c 	mul.w	ip, r6, ip
 23ee1b0:	ea4f 78e6 	mov.w	r8, r6, asr #31
 23ee1b4:	fb01 cc08 	mla	ip, r1, r8, ip
 23ee1b8:	fba6 6101 	umull	r6, r1, r6, r1
 23ee1bc:	4461      	add	r1, ip
 23ee1be:	0449      	lsls	r1, r1, #17
 23ee1c0:	ea41 31d6 	orr.w	r1, r1, r6, lsr #15
 23ee1c4:	0476      	lsls	r6, r6, #17
 23ee1c6:	eb16 060e 	adds.w	r6, r6, lr
 23ee1ca:	eb45 0101 	adc.w	r1, r5, r1
  var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
 23ee1ce:	f9b4 502c 	ldrsh.w	r5, [r4, #44]	; 0x2c
  p = (((p << 31) - var2) * 3125) / var1;
 23ee1d2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
 23ee1d6:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
  p = (((p << 31) - var2) * 3125) / var1;
 23ee1da:	f640 4535 	movw	r5, #3125	; 0xc35
  var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
 23ee1de:	19be      	adds	r6, r7, r6
  p = (((p << 31) - var2) * 3125) / var1;
 23ee1e0:	ea4c 0c50 	orr.w	ip, ip, r0, lsr #1
 23ee1e4:	07c0      	lsls	r0, r0, #31
 23ee1e6:	1b80      	subs	r0, r0, r6
 23ee1e8:	eb6c 0c01 	sbc.w	ip, ip, r1
 23ee1ec:	fba0 0105 	umull	r0, r1, r0, r5
 23ee1f0:	fb05 110c 	mla	r1, r5, ip, r1
 23ee1f4:	f7f4 fe72 	bl	23e2edc <__aeabi_ldivmod>
 23ee1f8:	4686      	mov	lr, r0
  var1 = (((int64_t)_bmp280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23ee1fa:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 23ee1fe:	ea4f 3c61 	mov.w	ip, r1, asr #13
 23ee202:	fb02 f70c 	mul.w	r7, r2, ip
 23ee206:	0b43      	lsrs	r3, r0, #13
 23ee208:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
 23ee20c:	17d5      	asrs	r5, r2, #31
 23ee20e:	fb03 7705 	mla	r7, r3, r5, r7
 23ee212:	fba2 2503 	umull	r2, r5, r2, r3
 23ee216:	443d      	add	r5, r7
 23ee218:	fb02 f70c 	mul.w	r7, r2, ip
 23ee21c:	fb03 7705 	mla	r7, r3, r5, r7
 23ee220:	fba2 2303 	umull	r2, r3, r2, r3
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
 23ee224:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
  var1 = (((int64_t)_bmp280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23ee228:	441f      	add	r7, r3
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
 23ee22a:	fb06 f501 	mul.w	r5, r6, r1
  var1 = (((int64_t)_bmp280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23ee22e:	0e53      	lsrs	r3, r2, #25
 23ee230:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
 23ee234:	181b      	adds	r3, r3, r0
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
 23ee236:	ea4f 72e6 	mov.w	r2, r6, asr #31
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
 23ee23a:	eb41 6767 	adc.w	r7, r1, r7, asr #25
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
 23ee23e:	fb02 5100 	mla	r1, r2, r0, r5
 23ee242:	fba6 060e 	umull	r0, r6, r6, lr
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
 23ee246:	f9b4 4032 	ldrsh.w	r4, [r4, #50]	; 0x32
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
 23ee24a:	4431      	add	r1, r6
 23ee24c:	0cc0      	lsrs	r0, r0, #19
 23ee24e:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
 23ee252:	1818      	adds	r0, r3, r0
 23ee254:	ea4f 75e4 	mov.w	r5, r4, asr #31
 23ee258:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
 23ee25c:	0a00      	lsrs	r0, r0, #8
 23ee25e:	012d      	lsls	r5, r5, #4
 23ee260:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 23ee264:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
 23ee268:	0124      	lsls	r4, r4, #4
 23ee26a:	1820      	adds	r0, r4, r0
  return (float)p / 256;
 23ee26c:	eb45 2121 	adc.w	r1, r5, r1, asr #8
 23ee270:	f7f4 fdf6 	bl	23e2e60 <__aeabi_l2f>
 23ee274:	ed9f 0a05 	vldr	s0, [pc, #20]	; 23ee28c <_ZN15Adafruit_BMP28012readPressureEv+0x188>
 23ee278:	ee07 0a90 	vmov	s15, r0
 23ee27c:	ee27 0a80 	vmul.f32	s0, s15, s0
}
 23ee280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0; // avoid exception caused by division by zero
 23ee284:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23ee290 <_ZN15Adafruit_BMP28012readPressureEv+0x18c>
 23ee288:	e7fa      	b.n	23ee280 <_ZN15Adafruit_BMP28012readPressureEv+0x17c>
 23ee28a:	bf00      	nop
 23ee28c:	3b800000 	.word	0x3b800000
 23ee290:	00000000 	.word	0x00000000

023ee294 <_ZN24Adafruit_BMP280_Pressure8getEventEP15sensors_event_t>:
    @brief  Gets the pressure as a standard sensor event
    @param  event Sensor event object that will be populated
    @returns True
*/
/**************************************************************************/
bool Adafruit_BMP280_Pressure::getEvent(sensors_event_t *event) {
 23ee294:	b538      	push	{r3, r4, r5, lr}
 23ee296:	460c      	mov	r4, r1
 23ee298:	4605      	mov	r5, r0
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 23ee29a:	2220      	movs	r2, #32
 23ee29c:	2100      	movs	r1, #0
 23ee29e:	1d20      	adds	r0, r4, #4
 23ee2a0:	f00e f8a1 	bl	23fc3e6 <memset>

  event->version = sizeof(sensors_event_t);
 23ee2a4:	2324      	movs	r3, #36	; 0x24
 23ee2a6:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
 23ee2a8:	68ab      	ldr	r3, [r5, #8]
 23ee2aa:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_PRESSURE;
 23ee2ac:	2306      	movs	r3, #6
 23ee2ae:	60a3      	str	r3, [r4, #8]
 23ee2b0:	f008 f8fe 	bl	23f64b0 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
 23ee2b4:	6120      	str	r0, [r4, #16]
  event->pressure = _theBMP280->readPressure() / 100; // convert Pa to hPa
 23ee2b6:	68e8      	ldr	r0, [r5, #12]
 23ee2b8:	f7ff ff24 	bl	23ee104 <_ZN15Adafruit_BMP28012readPressureEv>
 23ee2bc:	ed9f 7a03 	vldr	s14, [pc, #12]	; 23ee2cc <_ZN24Adafruit_BMP280_Pressure8getEventEP15sensors_event_t+0x38>
 23ee2c0:	eec0 7a07 	vdiv.f32	s15, s0, s14
  return true;
}
 23ee2c4:	2001      	movs	r0, #1
  event->pressure = _theBMP280->readPressure() / 100; // convert Pa to hPa
 23ee2c6:	edc4 7a05 	vstr	s15, [r4, #20]
}
 23ee2ca:	bd38      	pop	{r3, r4, r5, pc}
 23ee2cc:	42c80000 	.word	0x42c80000

023ee2d0 <_ZL9i2c_writehPKhmPv>:
/*!
    @brief  Writes 8 bit values over I2C
*/
/**************************************************************************/
int8_t i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len,
                 void *intf_ptr) {
 23ee2d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Serial.print("I2C write address 0x"); Serial.print(reg_addr, HEX);
  // Serial.print(" len "); Serial.println(len, HEX);

  if (!g_i2c_dev->write((uint8_t *)reg_data, len, true, &reg_addr, 1))
 23ee2d2:	2301      	movs	r3, #1
                 void *intf_ptr) {
 23ee2d4:	f88d 000f 	strb.w	r0, [sp, #15]
  if (!g_i2c_dev->write((uint8_t *)reg_data, len, true, &reg_addr, 1))
 23ee2d8:	f10d 000f 	add.w	r0, sp, #15
 23ee2dc:	9000      	str	r0, [sp, #0]
 23ee2de:	4805      	ldr	r0, [pc, #20]	; (23ee2f4 <_ZL9i2c_writehPKhmPv+0x24>)
 23ee2e0:	9301      	str	r3, [sp, #4]
 23ee2e2:	6800      	ldr	r0, [r0, #0]
 23ee2e4:	f000 fa64 	bl	23ee7b0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 23ee2e8:	f080 0001 	eor.w	r0, r0, #1
    return 1;

  return 0;
}
 23ee2ec:	b240      	sxtb	r0, r0
 23ee2ee:	b005      	add	sp, #20
 23ee2f0:	f85d fb04 	ldr.w	pc, [sp], #4
 23ee2f4:	1007ae4c 	.word	0x1007ae4c

023ee2f8 <_ZL8i2c_readhPhmPv>:
                void *intf_ptr) {
 23ee2f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23ee2fa:	460b      	mov	r3, r1
  if (!g_i2c_dev->write_then_read(&reg_addr, 1, reg_data, len))
 23ee2fc:	2100      	movs	r1, #0
 23ee2fe:	e9cd 2100 	strd	r2, r1, [sp]
                void *intf_ptr) {
 23ee302:	f88d 000f 	strb.w	r0, [sp, #15]
  if (!g_i2c_dev->write_then_read(&reg_addr, 1, reg_data, len))
 23ee306:	4806      	ldr	r0, [pc, #24]	; (23ee320 <_ZL8i2c_readhPhmPv+0x28>)
 23ee308:	2201      	movs	r2, #1
 23ee30a:	f10d 010f 	add.w	r1, sp, #15
 23ee30e:	6800      	ldr	r0, [r0, #0]
 23ee310:	f000 faa0 	bl	23ee854 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
 23ee314:	f080 0001 	eor.w	r0, r0, #1
}
 23ee318:	b240      	sxtb	r0, r0
 23ee31a:	b005      	add	sp, #20
 23ee31c:	f85d fb04 	ldr.w	pc, [sp], #4
 23ee320:	1007ae4c 	.word	0x1007ae4c

023ee324 <_ZL10delay_usecmPv>:
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 23ee324:	f008 b8b6 	b.w	23f6494 <HAL_Delay_Microseconds>

023ee328 <_ZN15Adafruit_BMP3XXC1Ev>:
  _meas_end = 0;
 23ee328:	2200      	movs	r2, #0
Adafruit_BMP3XX::Adafruit_BMP3XX(void) {
 23ee32a:	e9c0 2204 	strd	r2, r2, [r0, #16]
  _meas_end = 0;
 23ee32e:	6282      	str	r2, [r0, #40]	; 0x28
  _filterEnabled = _tempOSEnabled = _presOSEnabled = false;
 23ee330:	8302      	strh	r2, [r0, #24]
 23ee332:	7682      	strb	r2, [r0, #26]
}
 23ee334:	4770      	bx	lr
	...

023ee338 <_ZN15Adafruit_BMP3XX5_initEv>:
bool Adafruit_BMP3XX::_init(void) {
 23ee338:	b5f0      	push	{r4, r5, r6, r7, lr}
  g_i2c_dev = i2c_dev;
 23ee33a:	4b2b      	ldr	r3, [pc, #172]	; (23ee3e8 <_ZN15Adafruit_BMP3XX5_initEv+0xb0>)
 23ee33c:	6902      	ldr	r2, [r0, #16]
  rslt = bmp3_soft_reset(&the_sensor);
 23ee33e:	f100 0730 	add.w	r7, r0, #48	; 0x30
  g_i2c_dev = i2c_dev;
 23ee342:	601a      	str	r2, [r3, #0]
  g_spi_dev = spi_dev;
 23ee344:	6942      	ldr	r2, [r0, #20]
 23ee346:	4b29      	ldr	r3, [pc, #164]	; (23ee3ec <_ZN15Adafruit_BMP3XX5_initEv+0xb4>)
bool Adafruit_BMP3XX::_init(void) {
 23ee348:	4605      	mov	r5, r0
  g_spi_dev = spi_dev;
 23ee34a:	601a      	str	r2, [r3, #0]
  the_sensor.delay_us = delay_usec;
 23ee34c:	4b28      	ldr	r3, [pc, #160]	; (23ee3f0 <_ZN15Adafruit_BMP3XX5_initEv+0xb8>)
bool Adafruit_BMP3XX::_init(void) {
 23ee34e:	b089      	sub	sp, #36	; 0x24
  the_sensor.delay_us = delay_usec;
 23ee350:	6443      	str	r3, [r0, #68]	; 0x44
  rslt = bmp3_soft_reset(&the_sensor);
 23ee352:	4638      	mov	r0, r7
 23ee354:	f7f5 fb14 	bl	23e3980 <bmp3_soft_reset>
  if (rslt != BMP3_OK)
 23ee358:	b110      	cbz	r0, 23ee360 <_ZN15Adafruit_BMP3XX5_initEv+0x28>
    return false;
 23ee35a:	2000      	movs	r0, #0
}
 23ee35c:	b009      	add	sp, #36	; 0x24
 23ee35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  rslt = bmp3_init(&the_sensor);
 23ee360:	4638      	mov	r0, r7
 23ee362:	f7f5 fb4b 	bl	23e39fc <bmp3_init>
  uint8_t crc = 0xFF;
  uint8_t stored_crc;
  uint8_t trim_param[21];
  uint8_t i;

  rslt = bmp3_get_regs(BMP3_REG_CALIB_DATA, trim_param, 21, dev);
 23ee366:	2215      	movs	r2, #21
 23ee368:	463b      	mov	r3, r7
 23ee36a:	2031      	movs	r0, #49	; 0x31
 23ee36c:	a902      	add	r1, sp, #8
 23ee36e:	f7f5 f92d 	bl	23e35cc <bmp3_get_regs>
  if (rslt == BMP3_OK) {
 23ee372:	4602      	mov	r2, r0
 23ee374:	2800      	cmp	r0, #0
 23ee376:	d1f0      	bne.n	23ee35a <_ZN15Adafruit_BMP3XX5_initEv+0x22>
  uint8_t crc = 0xFF;
 23ee378:	24ff      	movs	r4, #255	; 0xff
 23ee37a:	a902      	add	r1, sp, #8
    for (i = 0; i < 21; i++) {
      crc = (uint8_t)cal_crc(crc, trim_param[i]);
 23ee37c:	2608      	movs	r6, #8
 23ee37e:	f811 3b01 	ldrb.w	r3, [r1], #1
  int8_t poly = 0x1D;
  int8_t var2;
  uint8_t i;

  for (i = 0; i < 8; i++) {
    if ((seed & 0x80) ^ (data & 0x80)) {
 23ee382:	ea84 0003 	eor.w	r0, r4, r3
      var2 = 0;
    }

    seed = (seed & 0x7F) << 1;
    data = (data & 0x7F) << 1;
    seed = seed ^ (uint8_t)(poly * var2);
 23ee386:	f010 0f80 	tst.w	r0, #128	; 0x80
 23ee38a:	bf14      	ite	ne
 23ee38c:	201d      	movne	r0, #29
 23ee38e:	2000      	moveq	r0, #0
    seed = (seed & 0x7F) << 1;
 23ee390:	0064      	lsls	r4, r4, #1
  for (i = 0; i < 8; i++) {
 23ee392:	3e01      	subs	r6, #1
    seed = (seed & 0x7F) << 1;
 23ee394:	b2e4      	uxtb	r4, r4
    data = (data & 0x7F) << 1;
 23ee396:	005b      	lsls	r3, r3, #1
  for (i = 0; i < 8; i++) {
 23ee398:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    data = (data & 0x7F) << 1;
 23ee39c:	b2db      	uxtb	r3, r3
    seed = seed ^ (uint8_t)(poly * var2);
 23ee39e:	ea84 0400 	eor.w	r4, r4, r0
  for (i = 0; i < 8; i++) {
 23ee3a2:	d1ee      	bne.n	23ee382 <_ZN15Adafruit_BMP3XX5_initEv+0x4a>
    for (i = 0; i < 21; i++) {
 23ee3a4:	3201      	adds	r2, #1
 23ee3a6:	b2d2      	uxtb	r2, r2
 23ee3a8:	2a15      	cmp	r2, #21
 23ee3aa:	d1e7      	bne.n	23ee37c <_ZN15Adafruit_BMP3XX5_initEv+0x44>
    crc = (crc ^ 0xFF);
 23ee3ac:	43e4      	mvns	r4, r4
    rslt = bmp3_get_regs(0x30, &stored_crc, 1, dev);
 23ee3ae:	463b      	mov	r3, r7
 23ee3b0:	2201      	movs	r2, #1
 23ee3b2:	2030      	movs	r0, #48	; 0x30
 23ee3b4:	f10d 0107 	add.w	r1, sp, #7
 23ee3b8:	f7f5 f908 	bl	23e35cc <bmp3_get_regs>
    if (stored_crc != crc) {
 23ee3bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23ee3c0:	b2e4      	uxtb	r4, r4
 23ee3c2:	42a3      	cmp	r3, r4
 23ee3c4:	d1c9      	bne.n	23ee35a <_ZN15Adafruit_BMP3XX5_initEv+0x22>
  if (rslt != BMP3_OK)
 23ee3c6:	2800      	cmp	r0, #0
 23ee3c8:	d1c7      	bne.n	23ee35a <_ZN15Adafruit_BMP3XX5_initEv+0x22>
  the_sensor.settings.odr_filter.odr = odr;
 23ee3ca:	2303      	movs	r3, #3
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 23ee3cc:	2001      	movs	r0, #1
  the_sensor.settings.odr_filter.odr = odr;
 23ee3ce:	f885 30e6 	strb.w	r3, [r5, #230]	; 0xe6
    _filterEnabled = false;
 23ee3d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  the_sensor.settings.odr_filter.press_os = oversample;
 23ee3d6:	f885 60e3 	strb.w	r6, [r5, #227]	; 0xe3
  the_sensor.settings.odr_filter.temp_os = oversample;
 23ee3da:	f8a5 60e4 	strh.w	r6, [r5, #228]	; 0xe4
    _filterEnabled = false;
 23ee3de:	61ab      	str	r3, [r5, #24]
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 23ee3e0:	f885 00e0 	strb.w	r0, [r5, #224]	; 0xe0
  return true;
 23ee3e4:	e7ba      	b.n	23ee35c <_ZN15Adafruit_BMP3XX5_initEv+0x24>
 23ee3e6:	bf00      	nop
 23ee3e8:	1007ae4c 	.word	0x1007ae4c
 23ee3ec:	1007ae50 	.word	0x1007ae50
 23ee3f0:	023ee325 	.word	0x023ee325

023ee3f4 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>:
bool Adafruit_BMP3XX::begin_I2C(uint8_t addr, TwoWire *theWire) {
 23ee3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23ee3f6:	4604      	mov	r4, r0
  if (i2c_dev)
 23ee3f8:	6900      	ldr	r0, [r0, #16]
bool Adafruit_BMP3XX::begin_I2C(uint8_t addr, TwoWire *theWire) {
 23ee3fa:	460e      	mov	r6, r1
 23ee3fc:	4617      	mov	r7, r2
  if (i2c_dev)
 23ee3fe:	b110      	cbz	r0, 23ee406 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x12>
    delete i2c_dev;
 23ee400:	2110      	movs	r1, #16
 23ee402:	f7f4 ff7e 	bl	23e3302 <_ZdlPvj>
  if (spi_dev)
 23ee406:	6965      	ldr	r5, [r4, #20]
 23ee408:	b135      	cbz	r5, 23ee418 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x24>
    delete spi_dev;
 23ee40a:	4628      	mov	r0, r5
 23ee40c:	f000 fa39 	bl	23ee882 <_ZN18Adafruit_SPIDeviceD1Ev>
 23ee410:	2138      	movs	r1, #56	; 0x38
 23ee412:	4628      	mov	r0, r5
 23ee414:	f7f4 ff75 	bl	23e3302 <_ZdlPvj>
  spi_dev = NULL;
 23ee418:	2300      	movs	r3, #0
  g_i2c_dev = i2c_dev = new Adafruit_I2CDevice(addr, theWire);
 23ee41a:	2010      	movs	r0, #16
  spi_dev = NULL;
 23ee41c:	6163      	str	r3, [r4, #20]
  g_i2c_dev = i2c_dev = new Adafruit_I2CDevice(addr, theWire);
 23ee41e:	f7f4 ff6c 	bl	23e32fa <_Znwj>
 23ee422:	4605      	mov	r5, r0
 23ee424:	b118      	cbz	r0, 23ee42e <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x3a>
 23ee426:	463a      	mov	r2, r7
 23ee428:	4631      	mov	r1, r6
 23ee42a:	f000 f996 	bl	23ee75a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
 23ee42e:	4f0e      	ldr	r7, [pc, #56]	; (23ee468 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x74>)
  if (!i2c_dev->begin()) {
 23ee430:	2101      	movs	r1, #1
 23ee432:	4628      	mov	r0, r5
  g_i2c_dev = i2c_dev = new Adafruit_I2CDevice(addr, theWire);
 23ee434:	6125      	str	r5, [r4, #16]
 23ee436:	603d      	str	r5, [r7, #0]
  if (!i2c_dev->begin()) {
 23ee438:	f000 f9ab 	bl	23ee792 <_ZN18Adafruit_I2CDevice5beginEb>
 23ee43c:	b190      	cbz	r0, 23ee464 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x70>
  the_sensor.intf = BMP3_I2C_INTF;
 23ee43e:	2301      	movs	r3, #1
 23ee440:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  the_sensor.read = &i2c_read;
 23ee444:	4b09      	ldr	r3, [pc, #36]	; (23ee46c <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x78>)
  return _init();
 23ee446:	4620      	mov	r0, r4
  the_sensor.read = &i2c_read;
 23ee448:	63e3      	str	r3, [r4, #60]	; 0x3c
  the_sensor.write = &i2c_write;
 23ee44a:	4b09      	ldr	r3, [pc, #36]	; (23ee470 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x7c>)
  the_sensor.chip_id = addr;
 23ee44c:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  the_sensor.write = &i2c_write;
 23ee450:	6423      	str	r3, [r4, #64]	; 0x40
  the_sensor.intf_ptr = g_i2c_dev;
 23ee452:	683b      	ldr	r3, [r7, #0]
 23ee454:	6363      	str	r3, [r4, #52]	; 0x34
  the_sensor.dummy_byte = 0;
 23ee456:	2300      	movs	r3, #0
 23ee458:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 23ee45c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return _init();
 23ee460:	f7ff bf6a 	b.w	23ee338 <_ZN15Adafruit_BMP3XX5_initEv>
}
 23ee464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23ee466:	bf00      	nop
 23ee468:	1007ae4c 	.word	0x1007ae4c
 23ee46c:	023ee2f9 	.word	0x023ee2f9
 23ee470:	023ee2d1 	.word	0x023ee2d1

023ee474 <_ZN15Adafruit_BMP3XX14performReadingEv>:
bool Adafruit_BMP3XX::performReading(void) {
 23ee474:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  g_i2c_dev = i2c_dev;
 23ee476:	4b21      	ldr	r3, [pc, #132]	; (23ee4fc <_ZN15Adafruit_BMP3XX14performReadingEv+0x88>)
 23ee478:	6902      	ldr	r2, [r0, #16]
bool Adafruit_BMP3XX::performReading(void) {
 23ee47a:	4604      	mov	r4, r0
  g_i2c_dev = i2c_dev;
 23ee47c:	601a      	str	r2, [r3, #0]
  g_spi_dev = spi_dev;
 23ee47e:	6942      	ldr	r2, [r0, #20]
 23ee480:	4b1f      	ldr	r3, [pc, #124]	; (23ee500 <_ZN15Adafruit_BMP3XX14performReadingEv+0x8c>)
 23ee482:	601a      	str	r2, [r3, #0]
  the_sensor.settings.temp_en = BMP3_ENABLE;
 23ee484:	2301      	movs	r3, #1
  if (_tempOSEnabled) {
 23ee486:	7e42      	ldrb	r2, [r0, #25]
  the_sensor.settings.temp_en = BMP3_ENABLE;
 23ee488:	f880 30e2 	strb.w	r3, [r0, #226]	; 0xe2
  the_sensor.settings.press_en = BMP3_ENABLE;
 23ee48c:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
  if (_presOSEnabled) {
 23ee490:	7ea3      	ldrb	r3, [r4, #26]
    settings_sel |= BMP3_SEL_TEMP_OS;
 23ee492:	2a00      	cmp	r2, #0
 23ee494:	bf0c      	ite	eq
 23ee496:	2004      	moveq	r0, #4
 23ee498:	2024      	movne	r0, #36	; 0x24
  if (_presOSEnabled) {
 23ee49a:	b993      	cbnz	r3, 23ee4c2 <_ZN15Adafruit_BMP3XX14performReadingEv+0x4e>
  settings_sel |= BMP3_SEL_PRESS_EN;
 23ee49c:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled) {
 23ee4a0:	7e23      	ldrb	r3, [r4, #24]
 23ee4a2:	b10b      	cbz	r3, 23ee4a8 <_ZN15Adafruit_BMP3XX14performReadingEv+0x34>
    settings_sel |= BMP3_SEL_IIR_FILTER;
 23ee4a4:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  if (_ODREnabled) {
 23ee4a8:	7ee3      	ldrb	r3, [r4, #27]
 23ee4aa:	b10b      	cbz	r3, 23ee4b0 <_ZN15Adafruit_BMP3XX14performReadingEv+0x3c>
    settings_sel |= BMP3_SEL_ODR;
 23ee4ac:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  rslt = bmp3_set_sensor_settings(settings_sel, &the_sensor);
 23ee4b0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 23ee4b4:	4631      	mov	r1, r6
 23ee4b6:	f7f5 f935 	bl	23e3724 <bmp3_set_sensor_settings>
  if (rslt != BMP3_OK)
 23ee4ba:	b128      	cbz	r0, 23ee4c8 <_ZN15Adafruit_BMP3XX14performReadingEv+0x54>
    return false;
 23ee4bc:	2000      	movs	r0, #0
}
 23ee4be:	b004      	add	sp, #16
 23ee4c0:	bd70      	pop	{r4, r5, r6, pc}
    settings_sel |= BMP3_SEL_PRESS_OS;
 23ee4c2:	f040 0012 	orr.w	r0, r0, #18
 23ee4c6:	e7eb      	b.n	23ee4a0 <_ZN15Adafruit_BMP3XX14performReadingEv+0x2c>
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 23ee4c8:	2501      	movs	r5, #1
  rslt = bmp3_set_op_mode(&the_sensor);
 23ee4ca:	4630      	mov	r0, r6
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 23ee4cc:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
  rslt = bmp3_set_op_mode(&the_sensor);
 23ee4d0:	f7f5 fbab 	bl	23e3c2a <bmp3_set_op_mode>
  if (rslt != BMP3_OK)
 23ee4d4:	2800      	cmp	r0, #0
 23ee4d6:	d1f1      	bne.n	23ee4bc <_ZN15Adafruit_BMP3XX14performReadingEv+0x48>
  rslt = bmp3_get_sensor_data(sensor_comp, &data, &the_sensor);
 23ee4d8:	4632      	mov	r2, r6
 23ee4da:	4669      	mov	r1, sp
 23ee4dc:	2003      	movs	r0, #3
 23ee4de:	f7f5 fc19 	bl	23e3d14 <bmp3_get_sensor_data>
  if (rslt != BMP3_OK)
 23ee4e2:	2800      	cmp	r0, #0
 23ee4e4:	d1ea      	bne.n	23ee4bc <_ZN15Adafruit_BMP3XX14performReadingEv+0x48>
  temperature = data.temperature;
 23ee4e6:	e9dd 2300 	ldrd	r2, r3, [sp]
  return true;
 23ee4ea:	4628      	mov	r0, r5
  temperature = data.temperature;
 23ee4ec:	e9c4 2300 	strd	r2, r3, [r4]
  pressure = data.pressure;
 23ee4f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23ee4f4:	e9c4 2302 	strd	r2, r3, [r4, #8]
  return true;
 23ee4f8:	e7e1      	b.n	23ee4be <_ZN15Adafruit_BMP3XX14performReadingEv+0x4a>
 23ee4fa:	bf00      	nop
 23ee4fc:	1007ae4c 	.word	0x1007ae4c
 23ee500:	1007ae50 	.word	0x1007ae50

023ee504 <_ZN15Adafruit_BMP3XX15readTemperatureEv>:
float Adafruit_BMP3XX::readTemperature(void) {
 23ee504:	b510      	push	{r4, lr}
 23ee506:	4604      	mov	r4, r0
  performReading();
 23ee508:	f7ff ffb4 	bl	23ee474 <_ZN15Adafruit_BMP3XX14performReadingEv>
  return temperature;
 23ee50c:	e9d4 0100 	ldrd	r0, r1, [r4]
 23ee510:	f7f4 fb86 	bl	23e2c20 <__aeabi_d2f>
}
 23ee514:	ee00 0a10 	vmov	s0, r0
 23ee518:	bd10      	pop	{r4, pc}

023ee51a <_ZN15Adafruit_BMP3XX12readPressureEv>:
float Adafruit_BMP3XX::readPressure(void) {
 23ee51a:	b510      	push	{r4, lr}
 23ee51c:	4604      	mov	r4, r0
  performReading();
 23ee51e:	f7ff ffa9 	bl	23ee474 <_ZN15Adafruit_BMP3XX14performReadingEv>
  return pressure;
 23ee522:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23ee526:	f7f4 fb7b 	bl	23e2c20 <__aeabi_d2f>
}
 23ee52a:	ee00 0a10 	vmov	s0, r0
 23ee52e:	bd10      	pop	{r4, pc}

023ee530 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
 23ee530:	b530      	push	{r4, r5, lr}
                                                 uint16_t reg_addr,
                                                 uint8_t width,
                                                 uint8_t byteorder,
                                                 uint8_t address_width) {
 23ee532:	2500      	movs	r5, #0
  _i2cdevice = i2cdevice;
  _spidevice = NULL;
  _addrwidth = address_width;
  _address = reg_addr;
 23ee534:	8142      	strh	r2, [r0, #10]
  _spidevice = NULL;
 23ee536:	e9c0 1500 	strd	r1, r5, [r0]
  _byteorder = byteorder;
 23ee53a:	f89d 200c 	ldrb.w	r2, [sp, #12]
  _addrwidth = address_width;
 23ee53e:	f89d 1010 	ldrb.w	r1, [sp, #16]
                                                 uint8_t address_width) {
 23ee542:	6145      	str	r5, [r0, #20]
  _addrwidth = address_width;
 23ee544:	7341      	strb	r1, [r0, #13]
  _byteorder = byteorder;
 23ee546:	7382      	strb	r2, [r0, #14]
  _width = width;
 23ee548:	7303      	strb	r3, [r0, #12]
}
 23ee54a:	bd30      	pop	{r4, r5, pc}

023ee54c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(
 23ee54c:	b530      	push	{r4, r5, lr}
    Adafruit_I2CDevice *i2cdevice, Adafruit_SPIDevice *spidevice,
    Adafruit_BusIO_SPIRegType type, uint16_t reg_addr, uint8_t width,
    uint8_t byteorder, uint8_t address_width) {
 23ee54e:	2500      	movs	r5, #0
  _spidevice = spidevice;
  _i2cdevice = i2cdevice;
  _spiregtype = type;
 23ee550:	7203      	strb	r3, [r0, #8]
  _addrwidth = address_width;
 23ee552:	f89d 3018 	ldrb.w	r3, [sp, #24]
  _i2cdevice = i2cdevice;
 23ee556:	e9c0 1200 	strd	r1, r2, [r0]
  _addrwidth = address_width;
 23ee55a:	7343      	strb	r3, [r0, #13]
  _address = reg_addr;
 23ee55c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    uint8_t byteorder, uint8_t address_width) {
 23ee560:	6145      	str	r5, [r0, #20]
  _address = reg_addr;
 23ee562:	8143      	strh	r3, [r0, #10]
  _byteorder = byteorder;
 23ee564:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23ee568:	7383      	strb	r3, [r0, #14]
  _width = width;
 23ee56a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 23ee56e:	7303      	strb	r3, [r0, #12]
}
 23ee570:	bd30      	pop	{r4, r5, pc}

023ee572 <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
 23ee572:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
 23ee574:	8945      	ldrh	r5, [r0, #10]
                           (uint8_t)(_address >> 8)};
 23ee576:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
 23ee578:	4603      	mov	r3, r0

  if (_i2cdevice) {
 23ee57a:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
 23ee57c:	b085      	sub	sp, #20
                           (uint8_t)(_address >> 8)};
 23ee57e:	0a2d      	lsrs	r5, r5, #8
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
 23ee580:	460e      	mov	r6, r1
 23ee582:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
 23ee584:	f88d 400c 	strb.w	r4, [sp, #12]
 23ee588:	f88d 500d 	strb.w	r5, [sp, #13]
  if (_i2cdevice) {
 23ee58c:	b140      	cbz	r0, 23ee5a0 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2e>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
 23ee58e:	7b5b      	ldrb	r3, [r3, #13]
 23ee590:	9301      	str	r3, [sp, #4]
 23ee592:	ab03      	add	r3, sp, #12
 23ee594:	9300      	str	r3, [sp, #0]
 23ee596:	2301      	movs	r3, #1
 23ee598:	f000 f90a 	bl	23ee7b0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
 23ee59c:	b005      	add	sp, #20
 23ee59e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
 23ee5a0:	6858      	ldr	r0, [r3, #4]
 23ee5a2:	2800      	cmp	r0, #0
 23ee5a4:	d0fa      	beq.n	23ee59c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
 23ee5a6:	f893 e008 	ldrb.w	lr, [r3, #8]
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
 23ee5aa:	f893 c00d 	ldrb.w	ip, [r3, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
 23ee5ae:	f1be 0f03 	cmp.w	lr, #3
 23ee5b2:	d10c      	bne.n	23ee5ce <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5c>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
 23ee5b4:	f10c 0301 	add.w	r3, ip, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
 23ee5b8:	f025 0501 	bic.w	r5, r5, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
 23ee5bc:	9300      	str	r3, [sp, #0]
      addrbuffer[0] =
 23ee5be:	f88d 500c 	strb.w	r5, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
 23ee5c2:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
 23ee5c6:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
 23ee5c8:	f000 fa15 	bl	23ee9f6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
 23ee5cc:	e7e6      	b.n	23ee59c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
 23ee5ce:	f1be 0f00 	cmp.w	lr, #0
 23ee5d2:	d109      	bne.n	23ee5e8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x76>
      addrbuffer[0] &= ~0x80;
 23ee5d4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
 23ee5d8:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
 23ee5dc:	463a      	mov	r2, r7
 23ee5de:	4631      	mov	r1, r6
 23ee5e0:	f8cd c000 	str.w	ip, [sp]
 23ee5e4:	ab03      	add	r3, sp, #12
 23ee5e6:	e7ef      	b.n	23ee5c8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
 23ee5e8:	f1be 0f02 	cmp.w	lr, #2
 23ee5ec:	d102      	bne.n	23ee5f4 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x82>
      addrbuffer[0] |= 0x80;
 23ee5ee:	f064 047f 	orn	r4, r4, #127	; 0x7f
 23ee5f2:	e7f1      	b.n	23ee5d8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x66>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
 23ee5f4:	f1be 0f01 	cmp.w	lr, #1
      addrbuffer[0] &= ~0x80;
 23ee5f8:	bf01      	itttt	eq
 23ee5fa:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 23ee5fe:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
 23ee602:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 23ee606:	f88d 300c 	strbeq.w	r3, [sp, #12]
 23ee60a:	e7e7      	b.n	23ee5dc <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6a>

023ee60c <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
 23ee60c:	460b      	mov	r3, r1
 23ee60e:	b4f0      	push	{r4, r5, r6, r7}
  if (numbytes == 0) {
 23ee610:	b902      	cbnz	r2, 23ee614 <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
 23ee612:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
 23ee614:	2a04      	cmp	r2, #4
 23ee616:	d814      	bhi.n	23ee642 <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
 23ee618:	f100 050f 	add.w	r5, r0, #15
 23ee61c:	4629      	mov	r1, r5
 23ee61e:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
 23ee620:	1884      	adds	r4, r0, r2
 23ee622:	4284      	cmp	r4, r0
 23ee624:	d009      	beq.n	23ee63a <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
 23ee626:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
 23ee628:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
 23ee62a:	b927      	cbnz	r7, 23ee636 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
 23ee62c:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
 23ee62e:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
 23ee630:	3501      	adds	r5, #1
 23ee632:	3c01      	subs	r4, #1
 23ee634:	e7f5      	b.n	23ee622 <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
 23ee636:	73a6      	strb	r6, [r4, #14]
 23ee638:	e7f9      	b.n	23ee62e <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
 23ee63a:	4620      	mov	r0, r4
}
 23ee63c:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
 23ee63e:	f7ff bf98 	b.w	23ee572 <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
 23ee642:	2000      	movs	r0, #0
 23ee644:	bcf0      	pop	{r4, r5, r6, r7}
 23ee646:	4770      	bx	lr

023ee648 <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
 23ee648:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
 23ee64a:	8946      	ldrh	r6, [r0, #10]
                           (uint8_t)(_address >> 8)};
 23ee64c:	7a85      	ldrb	r5, [r0, #10]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
 23ee64e:	4604      	mov	r4, r0

  if (_i2cdevice) {
 23ee650:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
 23ee652:	0a36      	lsrs	r6, r6, #8
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
 23ee654:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
 23ee656:	f88d 500c 	strb.w	r5, [sp, #12]
 23ee65a:	f88d 600d 	strb.w	r6, [sp, #13]
  if (_i2cdevice) {
 23ee65e:	b140      	cbz	r0, 23ee672 <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
 23ee660:	2100      	movs	r1, #0
 23ee662:	e9cd 2100 	strd	r2, r1, [sp]
 23ee666:	a903      	add	r1, sp, #12
 23ee668:	7b62      	ldrb	r2, [r4, #13]
 23ee66a:	f000 f8f3 	bl	23ee854 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
 23ee66e:	b004      	add	sp, #16
 23ee670:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
 23ee672:	6860      	ldr	r0, [r4, #4]
 23ee674:	2800      	cmp	r0, #0
 23ee676:	d0fa      	beq.n	23ee66e <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
 23ee678:	7a21      	ldrb	r1, [r4, #8]
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
 23ee67a:	7b64      	ldrb	r4, [r4, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
 23ee67c:	2903      	cmp	r1, #3
 23ee67e:	d10d      	bne.n	23ee69c <_ZN23Adafruit_BusIO_Register4readEPhh+0x54>
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
 23ee680:	21ff      	movs	r1, #255	; 0xff
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
 23ee682:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
 23ee686:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
 23ee68a:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
 23ee68e:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
 23ee692:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
 23ee694:	a903      	add	r1, sp, #12
 23ee696:	f000 f9e0 	bl	23eea5a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
 23ee69a:	e7e8      	b.n	23ee66e <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
 23ee69c:	b941      	cbnz	r1, 23ee6b0 <_ZN23Adafruit_BusIO_Register4readEPhh+0x68>
      addrbuffer[0] |= 0x80;
 23ee69e:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
 23ee6a2:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
 23ee6a6:	21ff      	movs	r1, #255	; 0xff
 23ee6a8:	e9cd 2100 	strd	r2, r1, [sp]
 23ee6ac:	4622      	mov	r2, r4
 23ee6ae:	e7f1      	b.n	23ee694 <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
 23ee6b0:	2902      	cmp	r1, #2
 23ee6b2:	d102      	bne.n	23ee6ba <_ZN23Adafruit_BusIO_Register4readEPhh+0x72>
      addrbuffer[0] &= ~0x80;
 23ee6b4:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 23ee6b8:	e7f3      	b.n	23ee6a2 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
 23ee6ba:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
 23ee6bc:	bf02      	ittt	eq
 23ee6be:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
 23ee6c2:	f061 013f 	orneq	r1, r1, #63	; 0x3f
 23ee6c6:	f88d 100c 	strbeq.w	r1, [sp, #12]
 23ee6ca:	e7ec      	b.n	23ee6a6 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>

023ee6cc <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
 23ee6cc:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
 23ee6ce:	f100 050f 	add.w	r5, r0, #15
 23ee6d2:	4629      	mov	r1, r5
 23ee6d4:	7b02      	ldrb	r2, [r0, #12]
uint32_t Adafruit_BusIO_Register::read(void) {
 23ee6d6:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
 23ee6d8:	f7ff ffb6 	bl	23ee648 <_ZN23Adafruit_BusIO_Register4readEPhh>
 23ee6dc:	b178      	cbz	r0, 23ee6fe <_ZN23Adafruit_BusIO_Register4readEv+0x32>
 23ee6de:	4629      	mov	r1, r5
  uint32_t value = 0;
 23ee6e0:	2000      	movs	r0, #0
 23ee6e2:	7b22      	ldrb	r2, [r4, #12]
 23ee6e4:	4422      	add	r2, r4
  for (int i = 0; i < _width; i++) {
 23ee6e6:	42a2      	cmp	r2, r4
 23ee6e8:	d00b      	beq.n	23ee702 <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
 23ee6ea:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
 23ee6ec:	7ba0      	ldrb	r0, [r4, #14]
 23ee6ee:	b920      	cbnz	r0, 23ee6fa <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
 23ee6f0:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
 23ee6f2:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
 23ee6f4:	3a01      	subs	r2, #1
 23ee6f6:	3101      	adds	r1, #1
 23ee6f8:	e7f5      	b.n	23ee6e6 <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
 23ee6fa:	7808      	ldrb	r0, [r1, #0]
 23ee6fc:	e7f9      	b.n	23ee6f2 <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
 23ee6fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23ee702:	bd38      	pop	{r3, r4, r5, pc}

023ee704 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
 23ee704:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
 23ee706:	6001      	str	r1, [r0, #0]
  _bits = bits;
 23ee708:	7102      	strb	r2, [r0, #4]
  _shift = shift;
 23ee70a:	7143      	strb	r3, [r0, #5]
}
 23ee70c:	bd10      	pop	{r4, pc}

023ee70e <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
 23ee70e:	b510      	push	{r4, lr}
 23ee710:	4604      	mov	r4, r0
  uint32_t val = _register->read();
 23ee712:	6800      	ldr	r0, [r0, #0]
 23ee714:	f7ff ffda 	bl	23ee6cc <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
 23ee718:	2301      	movs	r3, #1
 23ee71a:	7922      	ldrb	r2, [r4, #4]
 23ee71c:	4093      	lsls	r3, r2
  val >>= _shift;
 23ee71e:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
 23ee720:	3b01      	subs	r3, #1
  val >>= _shift;
 23ee722:	40d0      	lsrs	r0, r2
}
 23ee724:	4018      	ands	r0, r3
 23ee726:	bd10      	pop	{r4, pc}

023ee728 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
 23ee728:	b570      	push	{r4, r5, r6, lr}
 23ee72a:	4604      	mov	r4, r0
  uint32_t val = _register->read();
 23ee72c:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
 23ee72e:	460e      	mov	r6, r1
  uint32_t val = _register->read();
 23ee730:	f7ff ffcc 	bl	23ee6cc <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
 23ee734:	2201      	movs	r2, #1
 23ee736:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
 23ee738:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits)) - 1;
 23ee73a:	409a      	lsls	r2, r3
 23ee73c:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
 23ee73e:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;          // remove the current data at that spot
 23ee742:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
 23ee746:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
 23ee748:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
 23ee74a:	fa03 f101 	lsl.w	r1, r3, r1
  return _register->write(val, _register->width());
 23ee74e:	4329      	orrs	r1, r5
 23ee750:	7b02      	ldrb	r2, [r0, #12]
}
 23ee752:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
 23ee756:	f7ff bf59 	b.w	23ee60c <_ZN23Adafruit_BusIO_Register5writeEmh>

023ee75a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
 23ee75a:	6042      	str	r2, [r0, #4]
  _begun = false;
 23ee75c:	2200      	movs	r2, #0
 23ee75e:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
 23ee760:	2220      	movs	r2, #32
  _addr = addr;
 23ee762:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
 23ee764:	60c2      	str	r2, [r0, #12]
#endif
}
 23ee766:	4770      	bx	lr

023ee768 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
 23ee768:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
 23ee76a:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
 23ee76c:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
 23ee76e:	b153      	cbz	r3, 23ee786 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
 23ee770:	7821      	ldrb	r1, [r4, #0]
 23ee772:	6860      	ldr	r0, [r4, #4]
 23ee774:	f009 fbb6 	bl	23f7ee4 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
 23ee778:	6860      	ldr	r0, [r4, #4]
 23ee77a:	f009 fbbe 	bl	23f7efa <_ZN7TwoWire15endTransmissionEv>
 23ee77e:	fab0 f080 	clz	r0, r0
 23ee782:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
 23ee784:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
 23ee786:	2101      	movs	r1, #1
 23ee788:	f000 f803 	bl	23ee792 <_ZN18Adafruit_I2CDevice5beginEb>
 23ee78c:	2800      	cmp	r0, #0
 23ee78e:	d1ef      	bne.n	23ee770 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
 23ee790:	e7f8      	b.n	23ee784 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

023ee792 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 23ee792:	b538      	push	{r3, r4, r5, lr}
 23ee794:	4604      	mov	r4, r0
  _wire->begin();
 23ee796:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 23ee798:	460d      	mov	r5, r1
  _wire->begin();
 23ee79a:	f009 fb79 	bl	23f7e90 <_ZN7TwoWire5beginEv>
  _begun = true;
 23ee79e:	2001      	movs	r0, #1
 23ee7a0:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
 23ee7a2:	b125      	cbz	r5, 23ee7ae <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
 23ee7a4:	4620      	mov	r0, r4
}
 23ee7a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
 23ee7aa:	f7ff bfdd 	b.w	23ee768 <_ZN18Adafruit_I2CDevice8detectedEv>
}
 23ee7ae:	bd38      	pop	{r3, r4, r5, pc}

023ee7b0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
 23ee7b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ee7b4:	461f      	mov	r7, r3
 23ee7b6:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
  if ((len + prefix_len) > maxBufferSize()) {
 23ee7ba:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
 23ee7bc:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
 23ee7be:	4432      	add	r2, r6
 23ee7c0:	429a      	cmp	r2, r3
                               size_t prefix_len) {
 23ee7c2:	4604      	mov	r4, r0
 23ee7c4:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
 23ee7c6:	d902      	bls.n	23ee7ce <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
 23ee7c8:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("Failed to send!");
#endif
    return false;
  }
}
 23ee7ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
 23ee7ce:	7801      	ldrb	r1, [r0, #0]
 23ee7d0:	6840      	ldr	r0, [r0, #4]
 23ee7d2:	f009 fb87 	bl	23f7ee4 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
 23ee7d6:	b97e      	cbnz	r6, 23ee7f8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
 23ee7d8:	6860      	ldr	r0, [r4, #4]
 23ee7da:	462a      	mov	r2, r5
 23ee7dc:	6803      	ldr	r3, [r0, #0]
 23ee7de:	4641      	mov	r1, r8
 23ee7e0:	68db      	ldr	r3, [r3, #12]
 23ee7e2:	4798      	blx	r3
 23ee7e4:	4285      	cmp	r5, r0
 23ee7e6:	d1ef      	bne.n	23ee7c8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
 23ee7e8:	4639      	mov	r1, r7
 23ee7ea:	6860      	ldr	r0, [r4, #4]
 23ee7ec:	f009 fb81 	bl	23f7ef2 <_ZN7TwoWire15endTransmissionEh>
 23ee7f0:	fab0 f080 	clz	r0, r0
 23ee7f4:	0940      	lsrs	r0, r0, #5
 23ee7f6:	e7e8      	b.n	23ee7ca <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
 23ee7f8:	f1b9 0f00 	cmp.w	r9, #0
 23ee7fc:	d0ec      	beq.n	23ee7d8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
 23ee7fe:	6860      	ldr	r0, [r4, #4]
 23ee800:	4632      	mov	r2, r6
 23ee802:	6803      	ldr	r3, [r0, #0]
 23ee804:	4649      	mov	r1, r9
 23ee806:	68db      	ldr	r3, [r3, #12]
 23ee808:	4798      	blx	r3
 23ee80a:	4286      	cmp	r6, r0
 23ee80c:	d1dc      	bne.n	23ee7c8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
 23ee80e:	e7e3      	b.n	23ee7d8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

023ee810 <_ZN18Adafruit_I2CDevice4readEPhjb>:
 *    @param  buffer Pointer to buffer of data to read into
 *    @param  len Number of bytes from buffer to read.
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
 23ee810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ee814:	4615      	mov	r5, r2
  if (len > maxBufferSize()) {
 23ee816:	68c2      	ldr	r2, [r0, #12]
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
 23ee818:	4604      	mov	r4, r0
  if (len > maxBufferSize()) {
 23ee81a:	42aa      	cmp	r2, r5
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
 23ee81c:	460e      	mov	r6, r1
  if (len > maxBufferSize()) {
 23ee81e:	d314      	bcc.n	23ee84a <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
  }

#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
 23ee820:	7801      	ldrb	r1, [r0, #0]
 23ee822:	b2ea      	uxtb	r2, r5
 23ee824:	6840      	ldr	r0, [r0, #4]
 23ee826:	f009 fb46 	bl	23f7eb6 <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
 23ee82a:	4285      	cmp	r5, r0
 23ee82c:	d10d      	bne.n	23ee84a <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
 23ee82e:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
 23ee830:	fa1f f887 	uxth.w	r8, r7
 23ee834:	4545      	cmp	r5, r8
 23ee836:	f107 0701 	add.w	r7, r7, #1
 23ee83a:	d909      	bls.n	23ee850 <_ZN18Adafruit_I2CDevice4readEPhjb+0x40>
    buffer[i] = _wire->read();
 23ee83c:	6860      	ldr	r0, [r4, #4]
 23ee83e:	6803      	ldr	r3, [r0, #0]
 23ee840:	695b      	ldr	r3, [r3, #20]
 23ee842:	4798      	blx	r3
 23ee844:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
 23ee848:	e7f2      	b.n	23ee830 <_ZN18Adafruit_I2CDevice4readEPhjb+0x20>
    return false;
 23ee84a:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 23ee84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23ee850:	2001      	movs	r0, #1
 23ee852:	e7fb      	b.n	23ee84c <_ZN18Adafruit_I2CDevice4readEPhjb+0x3c>

023ee854 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
 23ee854:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23ee856:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
 23ee858:	2300      	movs	r3, #0
 23ee85a:	e9cd 3300 	strd	r3, r3, [sp]
 23ee85e:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
 23ee862:	4604      	mov	r4, r0
 23ee864:	9e06      	ldr	r6, [sp, #24]
  if (!write(write_buffer, write_len, stop)) {
 23ee866:	f7ff ffa3 	bl	23ee7b0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 23ee86a:	b140      	cbz	r0, 23ee87e <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
 23ee86c:	2301      	movs	r3, #1
 23ee86e:	4632      	mov	r2, r6
 23ee870:	4629      	mov	r1, r5
 23ee872:	4620      	mov	r0, r4
}
 23ee874:	b002      	add	sp, #8
 23ee876:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
 23ee87a:	f7ff bfc9 	b.w	23ee810 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
 23ee87e:	b002      	add	sp, #8
 23ee880:	bd70      	pop	{r4, r5, r6, pc}

023ee882 <_ZN18Adafruit_SPIDeviceD1Ev>:
}

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
 23ee882:	b510      	push	{r4, lr}
 23ee884:	4604      	mov	r4, r0
  if (_spiSetting) {
 23ee886:	6840      	ldr	r0, [r0, #4]
 23ee888:	b110      	cbz	r0, 23ee890 <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
 23ee88a:	6803      	ldr	r3, [r0, #0]
 23ee88c:	689b      	ldr	r3, [r3, #8]
 23ee88e:	4798      	blx	r3
    _spiSetting = nullptr;
  }
}
 23ee890:	4620      	mov	r0, r4
 23ee892:	bd10      	pop	{r4, pc}

023ee894 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
 23ee894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ee898:	4604      	mov	r4, r0
  if (_spi) {
 23ee89a:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
 23ee89c:	460d      	mov	r5, r1
 23ee89e:	b085      	sub	sp, #20
  if (_spi) {
 23ee8a0:	b140      	cbz	r0, 23ee8b4 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
 23ee8a2:	2300      	movs	r3, #0
 23ee8a4:	9300      	str	r3, [sp, #0]
 23ee8a6:	4613      	mov	r3, r2
 23ee8a8:	460a      	mov	r2, r1
 23ee8aa:	f00a f8d3 	bl	23f8a54 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
 23ee8ae:	b005      	add	sp, #20
 23ee8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
 23ee8b4:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23ee8b6:	68a0      	ldr	r0, [r4, #8]
    startbit = 0x80;
 23ee8b8:	2b00      	cmp	r3, #0
 23ee8ba:	bf0c      	ite	eq
 23ee8bc:	f04f 0b01 	moveq.w	fp, #1
 23ee8c0:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
 23ee8c4:	780b      	ldrb	r3, [r1, #0]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23ee8c6:	4f44      	ldr	r7, [pc, #272]	; (23ee9d8 <_ZN18Adafruit_SPIDevice8transferEPhj+0x144>)
  bool towrite, lastmosi = !(buffer[0] & startbit);
 23ee8c8:	ea1b 0f03 	tst.w	fp, r3
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23ee8cc:	fbb7 f7f0 	udiv	r7, r7, r0
  bool towrite, lastmosi = !(buffer[0] & startbit);
 23ee8d0:	bf0c      	ite	eq
 23ee8d2:	f04f 0901 	moveq.w	r9, #1
 23ee8d6:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23ee8da:	188b      	adds	r3, r1, r2
 23ee8dc:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
 23ee8de:	9303      	str	r3, [sp, #12]
 23ee8e0:	9b03      	ldr	r3, [sp, #12]
 23ee8e2:	42ab      	cmp	r3, r5
 23ee8e4:	d0e3      	beq.n	23ee8ae <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    for (uint8_t b = startbit; b != 0;
 23ee8e6:	465e      	mov	r6, fp
    uint8_t reply = 0;
 23ee8e8:	f04f 0800 	mov.w	r8, #0
    uint8_t send = buffer[i];
 23ee8ec:	f895 a000 	ldrb.w	sl, [r5]
      if (bitdelay_us) {
 23ee8f0:	b117      	cbz	r7, 23ee8f8 <_ZN18Adafruit_SPIDevice8transferEPhj+0x64>
 23ee8f2:	4638      	mov	r0, r7
 23ee8f4:	f007 fdce 	bl	23f6494 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
 23ee8f8:	7b63      	ldrb	r3, [r4, #13]
 23ee8fa:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 23ee8fe:	d141      	bne.n	23ee984 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf0>
        if ((_mosi != -1) && (lastmosi != towrite)) {
 23ee900:	f994 3010 	ldrsb.w	r3, [r4, #16]
 23ee904:	1c5a      	adds	r2, r3, #1
 23ee906:	d00f      	beq.n	23ee928 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
        towrite = send & b;
 23ee908:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
 23ee90c:	bf14      	ite	ne
 23ee90e:	2301      	movne	r3, #1
 23ee910:	2300      	moveq	r3, #0
 23ee912:	454b      	cmp	r3, r9
 23ee914:	d008      	beq.n	23ee928 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
            *mosiPort |= mosiPinMask;
 23ee916:	6963      	ldr	r3, [r4, #20]
 23ee918:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23ee91a:	681a      	ldr	r2, [r3, #0]
          if (towrite)
 23ee91c:	2900      	cmp	r1, #0
 23ee91e:	d02c      	beq.n	23ee97a <_ZN18Adafruit_SPIDevice8transferEPhj+0xe6>
            *mosiPort |= mosiPinMask;
 23ee920:	f04f 0901 	mov.w	r9, #1
 23ee924:	4302      	orrs	r2, r0
 23ee926:	601a      	str	r2, [r3, #0]
        *clkPort |= clkPinMask; // Clock high
 23ee928:	69a1      	ldr	r1, [r4, #24]
 23ee92a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23ee92c:	680a      	ldr	r2, [r1, #0]
 23ee92e:	4313      	orrs	r3, r2
 23ee930:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
 23ee932:	b117      	cbz	r7, 23ee93a <_ZN18Adafruit_SPIDevice8transferEPhj+0xa6>
 23ee934:	4638      	mov	r0, r7
 23ee936:	f007 fdad 	bl	23f6494 <HAL_Delay_Microseconds>
        if (_miso != -1) {
 23ee93a:	f994 3011 	ldrsb.w	r3, [r4, #17]
 23ee93e:	3301      	adds	r3, #1
 23ee940:	d006      	beq.n	23ee950 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbc>
          if (*misoPort & misoPinMask) {
 23ee942:	69e3      	ldr	r3, [r4, #28]
 23ee944:	681a      	ldr	r2, [r3, #0]
 23ee946:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 23ee948:	421a      	tst	r2, r3
            reply |= b;
 23ee94a:	bf18      	it	ne
 23ee94c:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
 23ee950:	69a1      	ldr	r1, [r4, #24]
 23ee952:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23ee954:	680a      	ldr	r2, [r1, #0]
 23ee956:	ea22 0303 	bic.w	r3, r2, r3
 23ee95a:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
 23ee95c:	f994 3011 	ldrsb.w	r3, [r4, #17]
 23ee960:	3301      	adds	r3, #1
        buffer[i] = reply;
 23ee962:	bf18      	it	ne
 23ee964:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
 23ee968:	7b23      	ldrb	r3, [r4, #12]
 23ee96a:	2b00      	cmp	r3, #0
 23ee96c:	d132      	bne.n	23ee9d4 <_ZN18Adafruit_SPIDevice8transferEPhj+0x140>
 23ee96e:	0076      	lsls	r6, r6, #1
 23ee970:	b2f6      	uxtb	r6, r6
 23ee972:	2e00      	cmp	r6, #0
 23ee974:	d1bc      	bne.n	23ee8f0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5c>
  for (size_t i = 0; i < len; i++) {
 23ee976:	3501      	adds	r5, #1
 23ee978:	e7b2      	b.n	23ee8e0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4c>
            *mosiPort &= ~mosiPinMask;
 23ee97a:	ea22 0200 	bic.w	r2, r2, r0
 23ee97e:	4689      	mov	r9, r1
 23ee980:	601a      	str	r2, [r3, #0]
 23ee982:	e7d1      	b.n	23ee928 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
        *clkPort |= clkPinMask; // Clock high
 23ee984:	69a1      	ldr	r1, [r4, #24]
 23ee986:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23ee988:	680a      	ldr	r2, [r1, #0]
 23ee98a:	4313      	orrs	r3, r2
 23ee98c:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
 23ee98e:	b117      	cbz	r7, 23ee996 <_ZN18Adafruit_SPIDevice8transferEPhj+0x102>
 23ee990:	4638      	mov	r0, r7
 23ee992:	f007 fd7f 	bl	23f6494 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
 23ee996:	f994 3010 	ldrsb.w	r3, [r4, #16]
 23ee99a:	3301      	adds	r3, #1
 23ee99c:	d008      	beq.n	23ee9b0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11c>
            *mosiPort |= mosiPinMask;
 23ee99e:	6963      	ldr	r3, [r4, #20]
 23ee9a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 23ee9a2:	681a      	ldr	r2, [r3, #0]
          if (send & b)
 23ee9a4:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
 23ee9a8:	bf14      	ite	ne
 23ee9aa:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
 23ee9ac:	438a      	biceq	r2, r1
 23ee9ae:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
 23ee9b0:	69a1      	ldr	r1, [r4, #24]
 23ee9b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23ee9b4:	680a      	ldr	r2, [r1, #0]
 23ee9b6:	ea22 0303 	bic.w	r3, r2, r3
 23ee9ba:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
 23ee9bc:	f994 3011 	ldrsb.w	r3, [r4, #17]
 23ee9c0:	3301      	adds	r3, #1
 23ee9c2:	d0cb      	beq.n	23ee95c <_ZN18Adafruit_SPIDevice8transferEPhj+0xc8>
          if (*misoPort & misoPinMask) {
 23ee9c4:	69e3      	ldr	r3, [r4, #28]
 23ee9c6:	681a      	ldr	r2, [r3, #0]
 23ee9c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 23ee9ca:	421a      	tst	r2, r3
            reply |= b;
 23ee9cc:	bf18      	it	ne
 23ee9ce:	ea46 0808 	orrne.w	r8, r6, r8
 23ee9d2:	e7c3      	b.n	23ee95c <_ZN18Adafruit_SPIDevice8transferEPhj+0xc8>
    for (uint8_t b = startbit; b != 0;
 23ee9d4:	0876      	lsrs	r6, r6, #1
 23ee9d6:	e7cc      	b.n	23ee972 <_ZN18Adafruit_SPIDevice8transferEPhj+0xde>
 23ee9d8:	0007a120 	.word	0x0007a120

023ee9dc <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
 23ee9dc:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
 23ee9de:	2201      	movs	r2, #1
  uint8_t data = send;
 23ee9e0:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
 23ee9e4:	f10d 0107 	add.w	r1, sp, #7
 23ee9e8:	f7ff ff54 	bl	23ee894 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
 23ee9ec:	f89d 0007 	ldrb.w	r0, [sp, #7]
 23ee9f0:	b003      	add	sp, #12
 23ee9f2:	f85d fb04 	ldr.w	pc, [sp], #4

023ee9f6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
 23ee9f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ee9fa:	4604      	mov	r4, r0
  if (_spi) {
 23ee9fc:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
 23ee9fe:	460e      	mov	r6, r1
 23eea00:	4617      	mov	r7, r2
 23eea02:	461d      	mov	r5, r3
  if (_spi) {
 23eea04:	b110      	cbz	r0, 23eea0c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
 23eea06:	6861      	ldr	r1, [r4, #4]
 23eea08:	f009 ffb0 	bl	23f896c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
 23eea0c:	f994 000e 	ldrsb.w	r0, [r4, #14]
 23eea10:	2100      	movs	r1, #0
 23eea12:	b280      	uxth	r0, r0
 23eea14:	f00a fe93 	bl	23f973e <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
 23eea18:	9b06      	ldr	r3, [sp, #24]
 23eea1a:	eb05 0803 	add.w	r8, r5, r3
 23eea1e:	4545      	cmp	r5, r8
 23eea20:	d108      	bne.n	23eea34 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
 23eea22:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
 23eea24:	42b7      	cmp	r7, r6
 23eea26:	d00b      	beq.n	23eea40 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
 23eea28:	4620      	mov	r0, r4
 23eea2a:	f816 1b01 	ldrb.w	r1, [r6], #1
 23eea2e:	f7ff ffd5 	bl	23ee9dc <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
 23eea32:	e7f7      	b.n	23eea24 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
 23eea34:	4620      	mov	r0, r4
 23eea36:	f815 1b01 	ldrb.w	r1, [r5], #1
 23eea3a:	f7ff ffcf 	bl	23ee9dc <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
 23eea3e:	e7ee      	b.n	23eea1e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
 23eea40:	f994 000e 	ldrsb.w	r0, [r4, #14]
 23eea44:	2101      	movs	r1, #1
 23eea46:	b280      	uxth	r0, r0
 23eea48:	f00a fe79 	bl	23f973e <digitalWrite>

  if (_spi) {
 23eea4c:	6820      	ldr	r0, [r4, #0]
 23eea4e:	b108      	cbz	r0, 23eea54 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
 23eea50:	f009 ff72 	bl	23f8938 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 23eea54:	2001      	movs	r0, #1
 23eea56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023eea5a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
 23eea5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23eea5e:	4604      	mov	r4, r0
  if (_spi) {
 23eea60:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
 23eea62:	460e      	mov	r6, r1
 23eea64:	4617      	mov	r7, r2
 23eea66:	461d      	mov	r5, r3
 23eea68:	f89d 801c 	ldrb.w	r8, [sp, #28]
  if (_spi) {
 23eea6c:	b110      	cbz	r0, 23eea74 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
 23eea6e:	6861      	ldr	r1, [r4, #4]
 23eea70:	f009 ff7c 	bl	23f896c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
 23eea74:	f994 000e 	ldrsb.w	r0, [r4, #14]
 23eea78:	2100      	movs	r1, #0
 23eea7a:	b280      	uxth	r0, r0
 23eea7c:	f00a fe5f 	bl	23f973e <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
 23eea80:	4437      	add	r7, r6
 23eea82:	42be      	cmp	r6, r7
 23eea84:	d10a      	bne.n	23eea9c <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
 23eea86:	9b06      	ldr	r3, [sp, #24]
 23eea88:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
 23eea8a:	42ae      	cmp	r6, r5
 23eea8c:	d00c      	beq.n	23eeaa8 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
 23eea8e:	4641      	mov	r1, r8
 23eea90:	4620      	mov	r0, r4
 23eea92:	f7ff ffa3 	bl	23ee9dc <_ZN18Adafruit_SPIDevice8transferEh>
 23eea96:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
 23eea9a:	e7f6      	b.n	23eea8a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
 23eea9c:	4620      	mov	r0, r4
 23eea9e:	f816 1b01 	ldrb.w	r1, [r6], #1
 23eeaa2:	f7ff ff9b 	bl	23ee9dc <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
 23eeaa6:	e7ec      	b.n	23eea82 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
 23eeaa8:	f994 000e 	ldrsb.w	r0, [r4, #14]
 23eeaac:	2101      	movs	r1, #1
 23eeaae:	b280      	uxth	r0, r0
 23eeab0:	f00a fe45 	bl	23f973e <digitalWrite>

  if (_spi) {
 23eeab4:	6820      	ldr	r0, [r4, #0]
 23eeab6:	b108      	cbz	r0, 23eeabc <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
 23eeab8:	f009 ff3e 	bl	23f8938 <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
 23eeabc:	2001      	movs	r0, #1
 23eeabe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023eeac2 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
 23eeac2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23eeac6:	461f      	mov	r7, r3
 23eeac8:	b085      	sub	sp, #20
 23eeaca:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
#if defined(ESP8266)
  yield();
#endif
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 23eeace:	eba7 0a01 	sub.w	sl, r7, r1
 23eead2:	eba8 0902 	sub.w	r9, r8, r2
 23eead6:	f1b9 0f00 	cmp.w	r9, #0
 23eeada:	bfb8      	it	lt
 23eeadc:	f1c9 0900 	rsblt	r9, r9, #0
 23eeae0:	f1ba 0f00 	cmp.w	sl, #0
 23eeae4:	bfb8      	it	lt
 23eeae6:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
 23eeaea:	45d1      	cmp	r9, sl
                             uint16_t color) {
 23eeaec:	4683      	mov	fp, r0
 23eeaee:	460c      	mov	r4, r1
 23eeaf0:	4615      	mov	r5, r2
 23eeaf2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  if (steep) {
 23eeaf6:	dd04      	ble.n	23eeb02 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
 23eeaf8:	463a      	mov	r2, r7
    _swap_int16_t(x0, y0);
 23eeafa:	462c      	mov	r4, r5
    _swap_int16_t(x1, y1);
 23eeafc:	4647      	mov	r7, r8
    _swap_int16_t(x0, y0);
 23eeafe:	460d      	mov	r5, r1
    _swap_int16_t(x1, y1);
 23eeb00:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
 23eeb02:	42bc      	cmp	r4, r7
 23eeb04:	dd05      	ble.n	23eeb12 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
 23eeb06:	462a      	mov	r2, r5
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
 23eeb08:	4645      	mov	r5, r8
 23eeb0a:	4690      	mov	r8, r2
  if (x0 > x1) {
 23eeb0c:	4622      	mov	r2, r4
 23eeb0e:	463c      	mov	r4, r7
 23eeb10:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
 23eeb12:	1b3e      	subs	r6, r7, r4
 23eeb14:	b2b2      	uxth	r2, r6
 23eeb16:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
 23eeb18:	eba8 0205 	sub.w	r2, r8, r5
 23eeb1c:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 23eeb20:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
 23eeb24:	f3c6 32c0 	ubfx	r2, r6, #15, #1
 23eeb28:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 23eeb2c:	4545      	cmp	r5, r8
 23eeb2e:	bfb4      	ite	lt
 23eeb30:	2201      	movlt	r2, #1
 23eeb32:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
  dy = abs(y1 - y0);
 23eeb36:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
 23eeb38:	1076      	asrs	r6, r6, #1
    ystep = -1;
 23eeb3a:	9202      	str	r2, [sp, #8]
  }

  for (; x0 <= x1; x0++) {
 23eeb3c:	42bc      	cmp	r4, r7
 23eeb3e:	dc1c      	bgt.n	23eeb7a <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
    if (steep) {
      writePixel(y0, x0, color);
 23eeb40:	f8db 2000 	ldr.w	r2, [fp]
    if (steep) {
 23eeb44:	45d1      	cmp	r9, sl
      writePixel(y0, x0, color);
 23eeb46:	f8d2 8018 	ldr.w	r8, [r2, #24]
 23eeb4a:	bfc7      	ittee	gt
 23eeb4c:	4629      	movgt	r1, r5
 23eeb4e:	4622      	movgt	r2, r4
    } else {
      writePixel(x0, y0, color);
 23eeb50:	462a      	movle	r2, r5
 23eeb52:	4621      	movle	r1, r4
      writePixel(y0, x0, color);
 23eeb54:	9303      	str	r3, [sp, #12]
      writePixel(x0, y0, color);
 23eeb56:	4658      	mov	r0, fp
 23eeb58:	47c0      	blx	r8
    }
    err -= dy;
 23eeb5a:	9a01      	ldr	r2, [sp, #4]
      writePixel(x0, y0, color);
 23eeb5c:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
 23eeb5e:	1ab6      	subs	r6, r6, r2
 23eeb60:	b2b1      	uxth	r1, r6
 23eeb62:	b236      	sxth	r6, r6
    if (err < 0) {
 23eeb64:	2e00      	cmp	r6, #0
 23eeb66:	da05      	bge.n	23eeb74 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
      y0 += ystep;
 23eeb68:	9a02      	ldr	r2, [sp, #8]
 23eeb6a:	4415      	add	r5, r2
      err += dx;
 23eeb6c:	9a00      	ldr	r2, [sp, #0]
      y0 += ystep;
 23eeb6e:	b22d      	sxth	r5, r5
      err += dx;
 23eeb70:	1856      	adds	r6, r2, r1
 23eeb72:	b236      	sxth	r6, r6
  for (; x0 <= x1; x0++) {
 23eeb74:	3401      	adds	r4, #1
 23eeb76:	b224      	sxth	r4, r4
 23eeb78:	e7e0      	b.n	23eeb3c <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
    }
  }
}
 23eeb7a:	b005      	add	sp, #20
 23eeb7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023eeb80 <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
 23eeb80:	4770      	bx	lr

023eeb82 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
 23eeb82:	b410      	push	{r4}
  drawPixel(x, y, color);
 23eeb84:	6804      	ldr	r4, [r0, #0]
 23eeb86:	6924      	ldr	r4, [r4, #16]
 23eeb88:	46a4      	mov	ip, r4
}
 23eeb8a:	f85d 4b04 	ldr.w	r4, [sp], #4
  drawPixel(x, y, color);
 23eeb8e:	4760      	bx	ip

023eeb90 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
 23eeb90:	b430      	push	{r4, r5}
 23eeb92:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
 23eeb96:	6804      	ldr	r4, [r0, #0]
 23eeb98:	9502      	str	r5, [sp, #8]
 23eeb9a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 23eeb9c:	46a4      	mov	ip, r4
}
 23eeb9e:	bc30      	pop	{r4, r5}
  drawFastVLine(x, y, h, color);
 23eeba0:	4760      	bx	ip

023eeba2 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
 23eeba2:	b430      	push	{r4, r5}
 23eeba4:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
 23eeba8:	6804      	ldr	r4, [r0, #0]
 23eebaa:	9502      	str	r5, [sp, #8]
 23eebac:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 23eebae:	46a4      	mov	ip, r4
}
 23eebb0:	bc30      	pop	{r4, r5}
  drawFastHLine(x, y, w, color);
 23eebb2:	4760      	bx	ip

023eebb4 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
 23eebb4:	b470      	push	{r4, r5, r6}
 23eebb6:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 23eebba:	f8bd 6010 	ldrh.w	r6, [sp, #16]
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
 23eebbe:	6804      	ldr	r4, [r0, #0]
 23eebc0:	e9cd 5603 	strd	r5, r6, [sp, #12]
 23eebc4:	6c24      	ldr	r4, [r4, #64]	; 0x40
 23eebc6:	46a4      	mov	ip, r4
}
 23eebc8:	bc70      	pop	{r4, r5, r6}
  fillRect(x, y, w, h, color);
 23eebca:	4760      	bx	ip

023eebcc <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
 23eebcc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23eebd0:	461c      	mov	r4, r3
 23eebd2:	4616      	mov	r6, r2
 23eebd4:	4605      	mov	r5, r0
 23eebd6:	460f      	mov	r7, r1
  startWrite();
 23eebd8:	6803      	ldr	r3, [r0, #0]
  writeLine(x, y, x, y + h - 1, color);
 23eebda:	3c01      	subs	r4, #1
                                 uint16_t color) {
 23eebdc:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
 23eebe0:	695b      	ldr	r3, [r3, #20]
  writeLine(x, y, x, y + h - 1, color);
 23eebe2:	4434      	add	r4, r6
  startWrite();
 23eebe4:	4798      	blx	r3
  writeLine(x, y, x, y + h - 1, color);
 23eebe6:	b224      	sxth	r4, r4
 23eebe8:	682b      	ldr	r3, [r5, #0]
 23eebea:	f8cd 8004 	str.w	r8, [sp, #4]
 23eebee:	9400      	str	r4, [sp, #0]
 23eebf0:	4628      	mov	r0, r5
 23eebf2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 23eebf4:	4632      	mov	r2, r6
 23eebf6:	463b      	mov	r3, r7
 23eebf8:	4639      	mov	r1, r7
 23eebfa:	47a0      	blx	r4
  endWrite();
 23eebfc:	4628      	mov	r0, r5
 23eebfe:	682b      	ldr	r3, [r5, #0]
 23eec00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23eec02:	b002      	add	sp, #8
 23eec04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
 23eec08:	4718      	bx	r3

023eec0a <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
 23eec0a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23eec0e:	4617      	mov	r7, r2
 23eec10:	4604      	mov	r4, r0
 23eec12:	461d      	mov	r5, r3
 23eec14:	460e      	mov	r6, r1
  startWrite();
 23eec16:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
 23eec18:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
 23eec1c:	695b      	ldr	r3, [r3, #20]
 23eec1e:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
 23eec20:	e9cd 7800 	strd	r7, r8, [sp]
 23eec24:	6822      	ldr	r2, [r4, #0]
 23eec26:	1e6b      	subs	r3, r5, #1
 23eec28:	4433      	add	r3, r6
 23eec2a:	4620      	mov	r0, r4
 23eec2c:	6a95      	ldr	r5, [r2, #40]	; 0x28
 23eec2e:	4631      	mov	r1, r6
 23eec30:	463a      	mov	r2, r7
 23eec32:	b21b      	sxth	r3, r3
 23eec34:	47a8      	blx	r5
  endWrite();
 23eec36:	4620      	mov	r0, r4
 23eec38:	6823      	ldr	r3, [r4, #0]
 23eec3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23eec3c:	b002      	add	sp, #8
 23eec3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
 23eec42:	4718      	bx	r3

023eec44 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 23eec44:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23eec48:	461e      	mov	r6, r3
  startWrite();
 23eec4a:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
 23eec4c:	460c      	mov	r4, r1
  startWrite();
 23eec4e:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
 23eec50:	4605      	mov	r5, r0
 23eec52:	4617      	mov	r7, r2
 23eec54:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 23eec58:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  startWrite();
 23eec5c:	4798      	blx	r3
  for (int16_t i = x; i < x + w; i++) {
 23eec5e:	4426      	add	r6, r4
 23eec60:	42b4      	cmp	r4, r6
    writeFastVLine(i, y, h, color);
 23eec62:	682b      	ldr	r3, [r5, #0]
  for (int16_t i = x; i < x + w; i++) {
 23eec64:	da0b      	bge.n	23eec7e <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
    writeFastVLine(i, y, h, color);
 23eec66:	f8cd 8000 	str.w	r8, [sp]
 23eec6a:	4621      	mov	r1, r4
 23eec6c:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23eec70:	463a      	mov	r2, r7
 23eec72:	464b      	mov	r3, r9
 23eec74:	4628      	mov	r0, r5
 23eec76:	3401      	adds	r4, #1
 23eec78:	47d0      	blx	sl
  for (int16_t i = x; i < x + w; i++) {
 23eec7a:	b224      	sxth	r4, r4
 23eec7c:	e7f0      	b.n	23eec60 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
  }
  endWrite();
 23eec7e:	4628      	mov	r0, r5
 23eec80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23eec82:	b002      	add	sp, #8
 23eec84:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
 23eec88:	4718      	bx	r3

023eec8a <_ZN12Adafruit_GFX10fillScreenEt>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
 23eec8a:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 23eec8c:	9101      	str	r1, [sp, #4]
 23eec8e:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 23eec92:	6802      	ldr	r2, [r0, #0]
 23eec94:	9100      	str	r1, [sp, #0]
 23eec96:	6c14      	ldr	r4, [r2, #64]	; 0x40
 23eec98:	2200      	movs	r2, #0
 23eec9a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23eec9e:	4611      	mov	r1, r2
 23eeca0:	47a0      	blx	r4
}
 23eeca2:	b002      	add	sp, #8
 23eeca4:	bd10      	pop	{r4, pc}

023eeca6 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                            uint16_t color) {
 23eeca6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  // Update in subclasses if desired!
  if (x0 == x1) {
 23eecaa:	4299      	cmp	r1, r3
                            uint16_t color) {
 23eecac:	4616      	mov	r6, r2
 23eecae:	4680      	mov	r8, r0
 23eecb0:	460d      	mov	r5, r1
 23eecb2:	461c      	mov	r4, r3
 23eecb4:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 23eecb8:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
    if (y0 > y1)
      _swap_int16_t(y0, y1);
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23eecbc:	6802      	ldr	r2, [r0, #0]
  if (x0 == x1) {
 23eecbe:	d112      	bne.n	23eece6 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
    if (y0 > y1)
 23eecc0:	42be      	cmp	r6, r7
 23eecc2:	bfc2      	ittt	gt
 23eecc4:	4633      	movgt	r3, r6
 23eecc6:	463e      	movgt	r6, r7
 23eecc8:	461f      	movgt	r7, r3
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23eecca:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23eecce:	1c7b      	adds	r3, r7, #1
 23eecd0:	6b94      	ldr	r4, [r2, #56]	; 0x38
 23eecd2:	1b9b      	subs	r3, r3, r6
  } else if (y0 == y1) {
    if (x0 > x1)
      _swap_int16_t(x0, x1);
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23eecd4:	4632      	mov	r2, r6
 23eecd6:	4629      	mov	r1, r5
 23eecd8:	4640      	mov	r0, r8
 23eecda:	46a4      	mov	ip, r4
 23eecdc:	b21b      	sxth	r3, r3
  } else {
    startWrite();
    writeLine(x0, y0, x1, y1, color);
    endWrite();
  }
}
 23eecde:	b003      	add	sp, #12
 23eece0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23eece4:	4760      	bx	ip
  } else if (y0 == y1) {
 23eece6:	42be      	cmp	r6, r7
 23eece8:	d10a      	bne.n	23eed00 <_ZN12Adafruit_GFX8drawLineEsssst+0x5a>
    if (x0 > x1)
 23eecea:	4299      	cmp	r1, r3
 23eecec:	bfc2      	ittt	gt
 23eecee:	460b      	movgt	r3, r1
 23eecf0:	4625      	movgt	r5, r4
 23eecf2:	461c      	movgt	r4, r3
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23eecf4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23eecf8:	1c63      	adds	r3, r4, #1
 23eecfa:	1b5b      	subs	r3, r3, r5
 23eecfc:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 23eecfe:	e7e9      	b.n	23eecd4 <_ZN12Adafruit_GFX8drawLineEsssst+0x2e>
    startWrite();
 23eed00:	6953      	ldr	r3, [r2, #20]
 23eed02:	4798      	blx	r3
    writeLine(x0, y0, x1, y1, color);
 23eed04:	e9cd 7900 	strd	r7, r9, [sp]
 23eed08:	f8d8 3000 	ldr.w	r3, [r8]
 23eed0c:	4640      	mov	r0, r8
 23eed0e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 23eed10:	4632      	mov	r2, r6
 23eed12:	4623      	mov	r3, r4
 23eed14:	4629      	mov	r1, r5
 23eed16:	47b8      	blx	r7
    endWrite();
 23eed18:	4640      	mov	r0, r8
 23eed1a:	f8d8 3000 	ldr.w	r3, [r8]
 23eed1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23eed20:	b003      	add	sp, #12
 23eed22:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    endWrite();
 23eed26:	4718      	bx	r3

023eed28 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 23eed28:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23eed2c:	4604      	mov	r4, r0
 23eed2e:	460f      	mov	r7, r1
 23eed30:	4616      	mov	r6, r2
 23eed32:	461d      	mov	r5, r3
  startWrite();
 23eed34:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
 23eed36:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  startWrite();
 23eed3a:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
 23eed3c:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  startWrite();
 23eed40:	4798      	blx	r3
  writeFastHLine(x, y, w, color);
 23eed42:	6823      	ldr	r3, [r4, #0]
 23eed44:	f8cd 8000 	str.w	r8, [sp]
 23eed48:	4632      	mov	r2, r6
 23eed4a:	4639      	mov	r1, r7
 23eed4c:	4620      	mov	r0, r4
 23eed4e:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23eed52:	462b      	mov	r3, r5
 23eed54:	47d0      	blx	sl
  writeFastHLine(x, y + h - 1, w, color);
 23eed56:	6823      	ldr	r3, [r4, #0]
 23eed58:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 23eed5c:	f8cd 8000 	str.w	r8, [sp]
 23eed60:	4432      	add	r2, r6
 23eed62:	4639      	mov	r1, r7
 23eed64:	4620      	mov	r0, r4
 23eed66:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23eed6a:	b212      	sxth	r2, r2
 23eed6c:	462b      	mov	r3, r5
 23eed6e:	47d0      	blx	sl
  writeFastVLine(x, y, h, color);
 23eed70:	6823      	ldr	r3, [r4, #0]
 23eed72:	f8cd 8000 	str.w	r8, [sp]
 23eed76:	4632      	mov	r2, r6
 23eed78:	4639      	mov	r1, r7
 23eed7a:	4620      	mov	r0, r4
 23eed7c:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23eed80:	464b      	mov	r3, r9
 23eed82:	47d0      	blx	sl
  writeFastVLine(x + w - 1, y, h, color);
 23eed84:	1e6b      	subs	r3, r5, #1
 23eed86:	19d9      	adds	r1, r3, r7
 23eed88:	6823      	ldr	r3, [r4, #0]
 23eed8a:	f8cd 8000 	str.w	r8, [sp]
 23eed8e:	4620      	mov	r0, r4
 23eed90:	6a1d      	ldr	r5, [r3, #32]
 23eed92:	4632      	mov	r2, r6
 23eed94:	464b      	mov	r3, r9
 23eed96:	b209      	sxth	r1, r1
 23eed98:	47a8      	blx	r5
  endWrite();
 23eed9a:	4620      	mov	r0, r4
 23eed9c:	6823      	ldr	r3, [r4, #0]
 23eed9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23eeda0:	b002      	add	sp, #8
 23eeda2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
 23eeda6:	4718      	bx	r3

023eeda8 <_ZN12Adafruit_GFX13invertDisplayEb>:
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
 23eeda8:	4770      	bx	lr

023eedaa <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
 23eedaa:	f001 0303 	and.w	r3, r1, #3
    _height = HEIGHT;
 23eedae:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
  rotation = (x & 3);
 23eedb2:	7683      	strb	r3, [r0, #26]
    _width = WIDTH;
 23eedb4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
  switch (rotation) {
 23eedb8:	07c9      	lsls	r1, r1, #31
    _width = WIDTH;
 23eedba:	bf59      	ittee	pl
 23eedbc:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
 23eedbe:	81c2      	strhpl	r2, [r0, #14]
    _width = HEIGHT;
 23eedc0:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
 23eedc2:	81c3      	strhmi	r3, [r0, #14]
}
 23eedc4:	4770      	bx	lr
	...

023eedc8 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 23eedc8:	b530      	push	{r4, r5, lr}
 23eedca:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
 23eedcc:	2400      	movs	r4, #0
  _width = WIDTH;
 23eedce:	8181      	strh	r1, [r0, #12]
  textsize_x = textsize_y = 1;
 23eedd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 23eedd4:	4d05      	ldr	r5, [pc, #20]	; (23eedec <_ZN12Adafruit_GFXC1Ess+0x24>)
 23eedd6:	8142      	strh	r2, [r0, #10]
  _height = HEIGHT;
 23eedd8:	81c2      	strh	r2, [r0, #14]
  textsize_x = textsize_y = 1;
 23eedda:	4a05      	ldr	r2, [pc, #20]	; (23eedf0 <_ZN12Adafruit_GFXC1Ess+0x28>)
 23eeddc:	6044      	str	r4, [r0, #4]
 23eedde:	e9c0 1205 	strd	r1, r2, [r0, #20]
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 23eede2:	6005      	str	r5, [r0, #0]
  cursor_y = cursor_x = 0;
 23eede4:	6104      	str	r4, [r0, #16]
  _cp437 = false;
 23eede6:	7704      	strb	r4, [r0, #28]
  gfxFont = NULL;
 23eede8:	6204      	str	r4, [r0, #32]
}
 23eedea:	bd30      	pop	{r4, r5, pc}
 23eedec:	023fec24 	.word	0x023fec24
 23eedf0:	01000101 	.word	0x01000101

023eedf4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
                              int16_t w, int16_t h, uint16_t color) {
 23eedf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  startWrite();
 23eedf8:	2600      	movs	r6, #0
  uint8_t byte = 0;
 23eedfa:	4635      	mov	r5, r6
                              int16_t w, int16_t h, uint16_t color) {
 23eedfc:	b089      	sub	sp, #36	; 0x24
 23eedfe:	e9cd 1202 	strd	r1, r2, [sp, #8]
 23eee02:	9304      	str	r3, [sp, #16]
  startWrite();
 23eee04:	6802      	ldr	r2, [r0, #0]
                              int16_t w, int16_t h, uint16_t color) {
 23eee06:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 23eee0a:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
  startWrite();
 23eee0e:	6952      	ldr	r2, [r2, #20]
                              int16_t w, int16_t h, uint16_t color) {
 23eee10:	9305      	str	r3, [sp, #20]
 23eee12:	4604      	mov	r4, r0
 23eee14:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
  startWrite();
 23eee18:	4790      	blx	r2
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 23eee1a:	f118 0207 	adds.w	r2, r8, #7
 23eee1e:	bf48      	it	mi
 23eee20:	f108 020e 	addmi.w	r2, r8, #14
 23eee24:	ea4f 0be2 	mov.w	fp, r2, asr #3
  startWrite();
 23eee28:	9601      	str	r6, [sp, #4]
 23eee2a:	9b03      	ldr	r3, [sp, #12]
 23eee2c:	9a01      	ldr	r2, [sp, #4]
  for (int16_t j = 0; j < h; j++, y++) {
 23eee2e:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 23eee32:	189a      	adds	r2, r3, r2
 23eee34:	9b05      	ldr	r3, [sp, #20]
 23eee36:	b212      	sxth	r2, r2
 23eee38:	428b      	cmp	r3, r1
 23eee3a:	dd27      	ble.n	23eee8c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x98>
 23eee3c:	f04f 0900 	mov.w	r9, #0
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 23eee40:	9b04      	ldr	r3, [sp, #16]
 23eee42:	4433      	add	r3, r6
 23eee44:	9306      	str	r3, [sp, #24]
 23eee46:	fa0f f089 	sxth.w	r0, r9
    for (int16_t i = 0; i < w; i++) {
 23eee4a:	4580      	cmp	r8, r0
 23eee4c:	fa1f f189 	uxth.w	r1, r9
 23eee50:	dd17      	ble.n	23eee82 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8e>
      if (i & 7)
 23eee52:	074f      	lsls	r7, r1, #29
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 23eee54:	bf05      	ittet	eq
 23eee56:	9b06      	ldreq	r3, [sp, #24]
 23eee58:	10c0      	asreq	r0, r0, #3
        byte <<= 1;
 23eee5a:	006d      	lslne	r5, r5, #1
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 23eee5c:	5c1d      	ldrbeq	r5, [r3, r0]
        byte <<= 1;
 23eee5e:	bf18      	it	ne
 23eee60:	b2ed      	uxtbne	r5, r5
      if (byte & 0x80)
 23eee62:	062b      	lsls	r3, r5, #24
 23eee64:	d50a      	bpl.n	23eee7c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x88>
        writePixel(x + i, y, color);
 23eee66:	9b02      	ldr	r3, [sp, #8]
 23eee68:	6820      	ldr	r0, [r4, #0]
 23eee6a:	4419      	add	r1, r3
 23eee6c:	6983      	ldr	r3, [r0, #24]
 23eee6e:	9207      	str	r2, [sp, #28]
 23eee70:	461f      	mov	r7, r3
 23eee72:	4620      	mov	r0, r4
 23eee74:	4653      	mov	r3, sl
 23eee76:	b209      	sxth	r1, r1
 23eee78:	47b8      	blx	r7
 23eee7a:	9a07      	ldr	r2, [sp, #28]
    for (int16_t i = 0; i < w; i++) {
 23eee7c:	f109 0901 	add.w	r9, r9, #1
 23eee80:	e7e1      	b.n	23eee46 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x52>
  for (int16_t j = 0; j < h; j++, y++) {
 23eee82:	9b01      	ldr	r3, [sp, #4]
 23eee84:	445e      	add	r6, fp
 23eee86:	3301      	adds	r3, #1
 23eee88:	9301      	str	r3, [sp, #4]
 23eee8a:	e7ce      	b.n	23eee2a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x36>
  endWrite();
 23eee8c:	4620      	mov	r0, r4
 23eee8e:	6823      	ldr	r3, [r4, #0]
 23eee90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23eee92:	b009      	add	sp, #36	; 0x24
 23eee94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
 23eee98:	4718      	bx	r3
	...

023eee9c <_ZN12Adafruit_GFX8drawCharEsshtthh>:
                            uint8_t size_y) {
 23eee9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23eeea0:	ed2d 8b02 	vpush	{d8}
 23eeea4:	b091      	sub	sp, #68	; 0x44
 23eeea6:	4616      	mov	r6, r2
 23eeea8:	461f      	mov	r7, r3
  if (!gfxFont) { // 'Classic' built-in font
 23eeeaa:	6a02      	ldr	r2, [r0, #32]
                            uint8_t size_y) {
 23eeeac:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 23eeeb0:	4683      	mov	fp, r0
 23eeeb2:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
 23eeeb6:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
 23eeeba:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
 23eeebe:	9103      	str	r1, [sp, #12]
 23eeec0:	9304      	str	r3, [sp, #16]
  if (!gfxFont) { // 'Classic' built-in font
 23eeec2:	2a00      	cmp	r2, #0
 23eeec4:	f040 80c5 	bne.w	23ef052 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
    if ((x >= _width) ||              // Clip right
 23eeec8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23eeecc:	428b      	cmp	r3, r1
 23eeece:	f340 814c 	ble.w	23ef16a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
 23eeed2:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23eeed6:	42b3      	cmp	r3, r6
 23eeed8:	f340 8147 	ble.w	23ef16a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((x + 6 * size_x - 1) < 0) || // Clip left
 23eeedc:	2306      	movs	r3, #6
 23eeede:	fb13 1305 	smlabb	r3, r3, r5, r1
        (y >= _height) ||             // Clip bottom
 23eeee2:	2b00      	cmp	r3, #0
 23eeee4:	f340 8141 	ble.w	23ef16a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((y + 8 * size_y - 1) < 0))   // Clip top
 23eeee8:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
        ((x + 6 * size_x - 1) < 0) || // Clip left
 23eeeec:	2b00      	cmp	r3, #0
 23eeeee:	f340 813c 	ble.w	23ef16a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
    if (!_cp437 && (c >= 176))
 23eeef2:	7f03      	ldrb	r3, [r0, #28]
 23eeef4:	b91b      	cbnz	r3, 23eeefe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
 23eeef6:	2faf      	cmp	r7, #175	; 0xaf
      c++; // Handle 'classic' charset behavior
 23eeef8:	bf84      	itt	hi
 23eeefa:	3701      	addhi	r7, #1
 23eeefc:	b2ff      	uxtbhi	r7, r7
    startWrite();
 23eeefe:	f8db 3000 	ldr.w	r3, [fp]
 23eef02:	4658      	mov	r0, fp
 23eef04:	695b      	ldr	r3, [r3, #20]
 23eef06:	4798      	blx	r3
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23eef08:	2205      	movs	r2, #5
 23eef0a:	9209      	str	r2, [sp, #36]	; 0x24
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 23eef0c:	2200      	movs	r2, #0
 23eef0e:	9205      	str	r2, [sp, #20]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23eef10:	4a98      	ldr	r2, [pc, #608]	; (23ef174 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
 23eef12:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 23eef16:	18d3      	adds	r3, r2, r3
 23eef18:	930c      	str	r3, [sp, #48]	; 0x30
            writePixel(x + i, y + j, color);
 23eef1a:	b2b3      	uxth	r3, r6
 23eef1c:	9306      	str	r3, [sp, #24]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23eef1e:	9a05      	ldr	r2, [sp, #20]
 23eef20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23eef22:	fb02 f905 	mul.w	r9, r2, r5
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23eef26:	5c9b      	ldrb	r3, [r3, r2]
 23eef28:	9307      	str	r3, [sp, #28]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23eef2a:	b2ab      	uxth	r3, r5
 23eef2c:	930b      	str	r3, [sp, #44]	; 0x2c
 23eef2e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 23eef32:	9308      	str	r3, [sp, #32]
 23eef34:	9b03      	ldr	r3, [sp, #12]
 23eef36:	fa19 f983 	uxtah	r9, r9, r3
 23eef3a:	fa0f f389 	sxth.w	r3, r9
 23eef3e:	ee08 3a10 	vmov	s16, r3
 23eef42:	2308      	movs	r3, #8
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 23eef44:	f04f 0900 	mov.w	r9, #0
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23eef48:	930a      	str	r3, [sp, #40]	; 0x28
            writePixel(x + i, y + j, bg);
 23eef4a:	9b03      	ldr	r3, [sp, #12]
 23eef4c:	eb02 0a03 	add.w	sl, r2, r3
 23eef50:	fa0f fa8a 	sxth.w	sl, sl
        if (line & 1) {
 23eef54:	9a07      	ldr	r2, [sp, #28]
            writePixel(x + i, y + j, color);
 23eef56:	f8db 3000 	ldr.w	r3, [fp]
        if (line & 1) {
 23eef5a:	07d2      	lsls	r2, r2, #31
 23eef5c:	d552      	bpl.n	23ef004 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
          if (size_x == 1 && size_y == 1)
 23eef5e:	2d01      	cmp	r5, #1
            writePixel(x + i, y + j, color);
 23eef60:	fa1f f289 	uxth.w	r2, r9
          if (size_x == 1 && size_y == 1)
 23eef64:	d13e      	bne.n	23eefe4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
 23eef66:	2c01      	cmp	r4, #1
 23eef68:	d13c      	bne.n	23eefe4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
            writePixel(x + i, y + j, color);
 23eef6a:	699b      	ldr	r3, [r3, #24]
 23eef6c:	9906      	ldr	r1, [sp, #24]
 23eef6e:	461f      	mov	r7, r3
 23eef70:	9b04      	ldr	r3, [sp, #16]
 23eef72:	440a      	add	r2, r1
            writePixel(x + i, y + j, bg);
 23eef74:	4651      	mov	r1, sl
 23eef76:	4658      	mov	r0, fp
 23eef78:	b212      	sxth	r2, r2
 23eef7a:	47b8      	blx	r7
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 23eef7c:	f109 0301 	add.w	r3, r9, #1
 23eef80:	fa4f f983 	sxtb.w	r9, r3
 23eef84:	9b07      	ldr	r3, [sp, #28]
 23eef86:	085b      	lsrs	r3, r3, #1
 23eef88:	9307      	str	r3, [sp, #28]
 23eef8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23eef8c:	3b01      	subs	r3, #1
 23eef8e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23eef92:	930a      	str	r3, [sp, #40]	; 0x28
 23eef94:	d1de      	bne.n	23eef54 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 23eef96:	9f05      	ldr	r7, [sp, #20]
 23eef98:	3701      	adds	r7, #1
 23eef9a:	b27b      	sxtb	r3, r7
 23eef9c:	9305      	str	r3, [sp, #20]
 23eef9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23eefa0:	3b01      	subs	r3, #1
 23eefa2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23eefa6:	9309      	str	r3, [sp, #36]	; 0x24
 23eefa8:	d1b9      	bne.n	23eef1e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
    if (bg != color) { // If opaque, draw vertical line for last column
 23eefaa:	9b04      	ldr	r3, [sp, #16]
 23eefac:	4543      	cmp	r3, r8
 23eefae:	d00f      	beq.n	23eefd0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
      if (size_x == 1 && size_y == 1)
 23eefb0:	2d01      	cmp	r5, #1
        writeFastVLine(x + 5, y, 8, bg);
 23eefb2:	f8db 3000 	ldr.w	r3, [fp]
      if (size_x == 1 && size_y == 1)
 23eefb6:	d13b      	bne.n	23ef030 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
 23eefb8:	2c01      	cmp	r4, #1
 23eefba:	d139      	bne.n	23ef030 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
        writeFastVLine(x + 5, y, 8, bg);
 23eefbc:	9908      	ldr	r1, [sp, #32]
 23eefbe:	f8cd 8000 	str.w	r8, [sp]
 23eefc2:	3105      	adds	r1, #5
 23eefc4:	6a1c      	ldr	r4, [r3, #32]
 23eefc6:	4632      	mov	r2, r6
 23eefc8:	2308      	movs	r3, #8
 23eefca:	4658      	mov	r0, fp
 23eefcc:	b209      	sxth	r1, r1
 23eefce:	47a0      	blx	r4
    endWrite();
 23eefd0:	4658      	mov	r0, fp
 23eefd2:	f8db 3000 	ldr.w	r3, [fp]
 23eefd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23eefd8:	b011      	add	sp, #68	; 0x44
 23eefda:	ecbd 8b02 	vpop	{d8}
 23eefde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
 23eefe2:	4718      	bx	r3
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 23eefe4:	fb14 f202 	smulbb	r2, r4, r2
 23eefe8:	9906      	ldr	r1, [sp, #24]
 23eefea:	440a      	add	r2, r1
 23eefec:	9904      	ldr	r1, [sp, #16]
 23eefee:	9101      	str	r1, [sp, #4]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23eeff0:	9400      	str	r4, [sp, #0]
 23eeff2:	69db      	ldr	r3, [r3, #28]
 23eeff4:	ee18 1a10 	vmov	r1, s16
 23eeff8:	461f      	mov	r7, r3
 23eeffa:	4658      	mov	r0, fp
 23eeffc:	462b      	mov	r3, r5
 23eeffe:	b212      	sxth	r2, r2
 23ef000:	47b8      	blx	r7
 23ef002:	e7bb      	b.n	23eef7c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
        } else if (bg != color) {
 23ef004:	9a04      	ldr	r2, [sp, #16]
 23ef006:	4542      	cmp	r2, r8
 23ef008:	d0b8      	beq.n	23eef7c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
          if (size_x == 1 && size_y == 1)
 23ef00a:	2d01      	cmp	r5, #1
            writePixel(x + i, y + j, color);
 23ef00c:	fa1f f289 	uxth.w	r2, r9
          if (size_x == 1 && size_y == 1)
 23ef010:	d107      	bne.n	23ef022 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
 23ef012:	2c01      	cmp	r4, #1
 23ef014:	d105      	bne.n	23ef022 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
            writePixel(x + i, y + j, bg);
 23ef016:	699b      	ldr	r3, [r3, #24]
 23ef018:	9906      	ldr	r1, [sp, #24]
 23ef01a:	461f      	mov	r7, r3
 23ef01c:	440a      	add	r2, r1
 23ef01e:	4643      	mov	r3, r8
 23ef020:	e7a8      	b.n	23eef74 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23ef022:	fb14 f202 	smulbb	r2, r4, r2
 23ef026:	9906      	ldr	r1, [sp, #24]
 23ef028:	f8cd 8004 	str.w	r8, [sp, #4]
 23ef02c:	440a      	add	r2, r1
 23ef02e:	e7df      	b.n	23eeff0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 23ef030:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23ef032:	00e4      	lsls	r4, r4, #3
 23ef034:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 23ef038:	9a08      	ldr	r2, [sp, #32]
 23ef03a:	f8cd 8004 	str.w	r8, [sp, #4]
 23ef03e:	440a      	add	r2, r1
 23ef040:	4611      	mov	r1, r2
 23ef042:	9400      	str	r4, [sp, #0]
 23ef044:	69dc      	ldr	r4, [r3, #28]
 23ef046:	4632      	mov	r2, r6
 23ef048:	462b      	mov	r3, r5
 23ef04a:	4658      	mov	r0, fp
 23ef04c:	b209      	sxth	r1, r1
 23ef04e:	47a0      	blx	r4
    endWrite();
 23ef050:	e7be      	b.n	23eefd0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23ef052:	7a13      	ldrb	r3, [r2, #8]
  return gfxFont->glyph + c;
 23ef054:	6851      	ldr	r1, [r2, #4]
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23ef056:	1aff      	subs	r7, r7, r3
  return gfxFont->bitmap;
 23ef058:	6812      	ldr	r2, [r2, #0]
  return gfxFont->glyph + c;
 23ef05a:	b2ff      	uxtb	r7, r7
  return gfxFont->bitmap;
 23ef05c:	920b      	str	r2, [sp, #44]	; 0x2c
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23ef05e:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
  return gfxFont->glyph + c;
 23ef062:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23ef066:	9206      	str	r2, [sp, #24]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 23ef068:	789a      	ldrb	r2, [r3, #2]
    if (size_x > 1 || size_y > 1) {
 23ef06a:	2d01      	cmp	r5, #1
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 23ef06c:	9209      	str	r2, [sp, #36]	; 0x24
 23ef06e:	78da      	ldrb	r2, [r3, #3]
           yo = pgm_read_byte(&glyph->yOffset);
 23ef070:	f993 a006 	ldrsb.w	sl, [r3, #6]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 23ef074:	920c      	str	r2, [sp, #48]	; 0x30
    int8_t xo = pgm_read_byte(&glyph->xOffset),
 23ef076:	f993 2005 	ldrsb.w	r2, [r3, #5]
 23ef07a:	920a      	str	r2, [sp, #40]	; 0x28
    if (size_x > 1 || size_y > 1) {
 23ef07c:	d801      	bhi.n	23ef082 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
 23ef07e:	2c01      	cmp	r4, #1
 23ef080:	d957      	bls.n	23ef132 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
      xo16 = xo;
 23ef082:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 23ef086:	9308      	str	r3, [sp, #32]
      yo16 = yo;
 23ef088:	fa0f f38a 	sxth.w	r3, sl
 23ef08c:	9307      	str	r3, [sp, #28]
    uint8_t xx, yy, bits = 0, bit = 0;
 23ef08e:	f04f 0800 	mov.w	r8, #0
 23ef092:	46c1      	mov	r9, r8
    for (yy = 0; yy < h; yy++) {
 23ef094:	4647      	mov	r7, r8
    startWrite();
 23ef096:	f8db 3000 	ldr.w	r3, [fp]
 23ef09a:	4658      	mov	r0, fp
 23ef09c:	695b      	ldr	r3, [r3, #20]
 23ef09e:	4798      	blx	r3
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23ef0a0:	b2b3      	uxth	r3, r6
 23ef0a2:	930e      	str	r3, [sp, #56]	; 0x38
            writePixel(x + xo + xx, y + yo + yy, color);
 23ef0a4:	fa1a f386 	uxtah	r3, sl, r6
 23ef0a8:	930f      	str	r3, [sp, #60]	; 0x3c
    for (yy = 0; yy < h; yy++) {
 23ef0aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23ef0ac:	429f      	cmp	r7, r3
 23ef0ae:	d28f      	bcs.n	23eefd0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23ef0b0:	9b07      	ldr	r3, [sp, #28]
 23ef0b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 23ef0b4:	443b      	add	r3, r7
 23ef0b6:	fb03 2304 	mla	r3, r3, r4, r2
      for (xx = 0; xx < w; xx++) {
 23ef0ba:	2200      	movs	r2, #0
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23ef0bc:	b21b      	sxth	r3, r3
 23ef0be:	ee08 3a10 	vmov	s16, r3
 23ef0c2:	4643      	mov	r3, r8
      for (xx = 0; xx < w; xx++) {
 23ef0c4:	9205      	str	r2, [sp, #20]
            writePixel(x + xo + xx, y + yo + yy, color);
 23ef0c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 23ef0c8:	eb02 0a07 	add.w	sl, r2, r7
 23ef0cc:	fa0f fa8a 	sxth.w	sl, sl
      for (xx = 0; xx < w; xx++) {
 23ef0d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23ef0d2:	9905      	ldr	r1, [sp, #20]
 23ef0d4:	4291      	cmp	r1, r2
 23ef0d6:	d241      	bcs.n	23ef15c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
        if (!(bit++ & 7)) {
 23ef0d8:	1c5a      	adds	r2, r3, #1
 23ef0da:	b2d2      	uxtb	r2, r2
 23ef0dc:	075b      	lsls	r3, r3, #29
 23ef0de:	920d      	str	r2, [sp, #52]	; 0x34
 23ef0e0:	d107      	bne.n	23ef0f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
          bits = pgm_read_byte(&bitmap[bo++]);
 23ef0e2:	9b06      	ldr	r3, [sp, #24]
 23ef0e4:	9906      	ldr	r1, [sp, #24]
 23ef0e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23ef0e8:	3301      	adds	r3, #1
 23ef0ea:	b29b      	uxth	r3, r3
 23ef0ec:	f812 9001 	ldrb.w	r9, [r2, r1]
 23ef0f0:	9306      	str	r3, [sp, #24]
        if (bits & 0x80) {
 23ef0f2:	f019 0f80 	tst.w	r9, #128	; 0x80
 23ef0f6:	d012      	beq.n	23ef11e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
          if (size_x == 1 && size_y == 1) {
 23ef0f8:	2d01      	cmp	r5, #1
            writePixel(x + xo + xx, y + yo + yy, color);
 23ef0fa:	f8db 3000 	ldr.w	r3, [fp]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23ef0fe:	f8bd 100c 	ldrh.w	r1, [sp, #12]
          if (size_x == 1 && size_y == 1) {
 23ef102:	d11a      	bne.n	23ef13a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
 23ef104:	2c01      	cmp	r4, #1
 23ef106:	d118      	bne.n	23ef13a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
            writePixel(x + xo + xx, y + yo + yy, color);
 23ef108:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23ef10a:	699b      	ldr	r3, [r3, #24]
 23ef10c:	4411      	add	r1, r2
 23ef10e:	9a05      	ldr	r2, [sp, #20]
 23ef110:	461e      	mov	r6, r3
 23ef112:	4411      	add	r1, r2
 23ef114:	4658      	mov	r0, fp
 23ef116:	4652      	mov	r2, sl
 23ef118:	9b04      	ldr	r3, [sp, #16]
 23ef11a:	b209      	sxth	r1, r1
 23ef11c:	47b0      	blx	r6
      for (xx = 0; xx < w; xx++) {
 23ef11e:	9e05      	ldr	r6, [sp, #20]
        bits <<= 1;
 23ef120:	ea4f 0949 	mov.w	r9, r9, lsl #1
      for (xx = 0; xx < w; xx++) {
 23ef124:	3601      	adds	r6, #1
 23ef126:	b2f3      	uxtb	r3, r6
 23ef128:	9305      	str	r3, [sp, #20]
        bits <<= 1;
 23ef12a:	fa5f f989 	uxtb.w	r9, r9
        if (!(bit++ & 7)) {
 23ef12e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
      for (xx = 0; xx < w; xx++) {
 23ef130:	e7ce      	b.n	23ef0d0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
    int16_t xo16 = 0, yo16 = 0;
 23ef132:	2300      	movs	r3, #0
 23ef134:	e9cd 3307 	strd	r3, r3, [sp, #28]
 23ef138:	e7a9      	b.n	23ef08e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23ef13a:	9805      	ldr	r0, [sp, #20]
 23ef13c:	9a08      	ldr	r2, [sp, #32]
 23ef13e:	4402      	add	r2, r0
 23ef140:	fb02 1105 	mla	r1, r2, r5, r1
 23ef144:	9a04      	ldr	r2, [sp, #16]
 23ef146:	4658      	mov	r0, fp
 23ef148:	e9cd 4200 	strd	r4, r2, [sp]
 23ef14c:	69db      	ldr	r3, [r3, #28]
 23ef14e:	ee18 2a10 	vmov	r2, s16
 23ef152:	461e      	mov	r6, r3
 23ef154:	b209      	sxth	r1, r1
 23ef156:	462b      	mov	r3, r5
 23ef158:	47b0      	blx	r6
 23ef15a:	e7e0      	b.n	23ef11e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
 23ef15c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    for (yy = 0; yy < h; yy++) {
 23ef15e:	3701      	adds	r7, #1
 23ef160:	4498      	add	r8, r3
 23ef162:	fa5f f888 	uxtb.w	r8, r8
 23ef166:	b2ff      	uxtb	r7, r7
 23ef168:	e79f      	b.n	23ef0aa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
 23ef16a:	b011      	add	sp, #68	; 0x44
 23ef16c:	ecbd 8b02 	vpop	{d8}
 23ef170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ef174:	023fe71c 	.word	0x023fe71c

023ef178 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
 23ef178:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!gfxFont) { // 'Classic' built-in font
 23ef17a:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
 23ef17c:	4604      	mov	r4, r0
 23ef17e:	460b      	mov	r3, r1
 23ef180:	b085      	sub	sp, #20
  if (!gfxFont) { // 'Classic' built-in font
 23ef182:	2a00      	cmp	r2, #0
 23ef184:	d134      	bne.n	23ef1f0 <_ZN12Adafruit_GFX5writeEh+0x78>
    if (c == '\n') {              // Newline?
 23ef186:	290a      	cmp	r1, #10
 23ef188:	d108      	bne.n	23ef19c <_ZN12Adafruit_GFX5writeEh+0x24>
      cursor_y += textsize_y * 8; // advance y one line
 23ef18a:	8a43      	ldrh	r3, [r0, #18]
      cursor_x = 0;               // Reset x to zero,
 23ef18c:	8202      	strh	r2, [r0, #16]
      cursor_y += textsize_y * 8; // advance y one line
 23ef18e:	7e42      	ldrb	r2, [r0, #25]
 23ef190:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
      cursor_y +=
 23ef194:	8263      	strh	r3, [r4, #18]
}
 23ef196:	2001      	movs	r0, #1
 23ef198:	b005      	add	sp, #20
 23ef19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (c != '\r') {       // Ignore carriage returns
 23ef19c:	290d      	cmp	r1, #13
 23ef19e:	d0fa      	beq.n	23ef196 <_ZN12Adafruit_GFX5writeEh+0x1e>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23ef1a0:	7ee1      	ldrb	r1, [r4, #27]
 23ef1a2:	7e00      	ldrb	r0, [r0, #24]
      cursor_y += textsize_y * 8; // advance y one line
 23ef1a4:	7e65      	ldrb	r5, [r4, #25]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23ef1a6:	b171      	cbz	r1, 23ef1c6 <_ZN12Adafruit_GFX5writeEh+0x4e>
 23ef1a8:	2106      	movs	r1, #6
 23ef1aa:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 23ef1ae:	fb11 6100 	smlabb	r1, r1, r0, r6
 23ef1b2:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 23ef1b6:	42b1      	cmp	r1, r6
      cursor_y += textsize_y * 8; // advance y one line
 23ef1b8:	bfc1      	itttt	gt
 23ef1ba:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
        cursor_x = 0;                                       // Reset x to zero,
 23ef1be:	8222      	strhgt	r2, [r4, #16]
        cursor_y += textsize_y * 8; // advance y one line
 23ef1c0:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
 23ef1c4:	8262      	strhgt	r2, [r4, #18]
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 23ef1c6:	8ae2      	ldrh	r2, [r4, #22]
 23ef1c8:	e9cd 0502 	strd	r0, r5, [sp, #8]
 23ef1cc:	9201      	str	r2, [sp, #4]
 23ef1ce:	8aa2      	ldrh	r2, [r4, #20]
 23ef1d0:	4620      	mov	r0, r4
 23ef1d2:	9200      	str	r2, [sp, #0]
 23ef1d4:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23ef1d8:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23ef1dc:	f7ff fe5e 	bl	23eee9c <_ZN12Adafruit_GFX8drawCharEsshtthh>
      cursor_x += textsize_x * 6; // Advance x one char
 23ef1e0:	7e23      	ldrb	r3, [r4, #24]
 23ef1e2:	8a22      	ldrh	r2, [r4, #16]
 23ef1e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23ef1e8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
        cursor_x +=
 23ef1ec:	8223      	strh	r3, [r4, #16]
 23ef1ee:	e7d2      	b.n	23ef196 <_ZN12Adafruit_GFX5writeEh+0x1e>
    if (c == '\n') {
 23ef1f0:	290a      	cmp	r1, #10
 23ef1f2:	d107      	bne.n	23ef204 <_ZN12Adafruit_GFX5writeEh+0x8c>
      cursor_x = 0;
 23ef1f4:	2300      	movs	r3, #0
 23ef1f6:	8203      	strh	r3, [r0, #16]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23ef1f8:	7e41      	ldrb	r1, [r0, #25]
 23ef1fa:	7b12      	ldrb	r2, [r2, #12]
      cursor_y +=
 23ef1fc:	8a43      	ldrh	r3, [r0, #18]
 23ef1fe:	fb01 3302 	mla	r3, r1, r2, r3
 23ef202:	e7c7      	b.n	23ef194 <_ZN12Adafruit_GFX5writeEh+0x1c>
    } else if (c != '\r') {
 23ef204:	290d      	cmp	r1, #13
 23ef206:	d0c6      	beq.n	23ef196 <_ZN12Adafruit_GFX5writeEh+0x1e>
      uint8_t first = pgm_read_byte(&gfxFont->first);
 23ef208:	7a15      	ldrb	r5, [r2, #8]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 23ef20a:	42a9      	cmp	r1, r5
 23ef20c:	d3c3      	bcc.n	23ef196 <_ZN12Adafruit_GFX5writeEh+0x1e>
 23ef20e:	7a91      	ldrb	r1, [r2, #10]
 23ef210:	4299      	cmp	r1, r3
 23ef212:	d3c0      	bcc.n	23ef196 <_ZN12Adafruit_GFX5writeEh+0x1e>
  return gfxFont->glyph + c;
 23ef214:	6851      	ldr	r1, [r2, #4]
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
 23ef216:	1b5d      	subs	r5, r3, r5
  return gfxFont->glyph + c;
 23ef218:	b2ed      	uxtb	r5, r5
 23ef21a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
        uint8_t w = pgm_read_byte(&glyph->width),
 23ef21e:	78a8      	ldrb	r0, [r5, #2]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
 23ef220:	b328      	cbz	r0, 23ef26e <_ZN12Adafruit_GFX5writeEh+0xf6>
 23ef222:	78e9      	ldrb	r1, [r5, #3]
 23ef224:	b319      	cbz	r1, 23ef26e <_ZN12Adafruit_GFX5writeEh+0xf6>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23ef226:	7ee1      	ldrb	r1, [r4, #27]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23ef228:	7e26      	ldrb	r6, [r4, #24]
      cursor_y += textsize_y * 8; // advance y one line
 23ef22a:	7e67      	ldrb	r7, [r4, #25]
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23ef22c:	b191      	cbz	r1, 23ef254 <_ZN12Adafruit_GFX5writeEh+0xdc>
 23ef22e:	f995 1005 	ldrsb.w	r1, [r5, #5]
 23ef232:	4408      	add	r0, r1
 23ef234:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23ef238:	fb06 1100 	mla	r1, r6, r0, r1
 23ef23c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 23ef240:	4281      	cmp	r1, r0
 23ef242:	dd07      	ble.n	23ef254 <_ZN12Adafruit_GFX5writeEh+0xdc>
            cursor_x = 0;
 23ef244:	2000      	movs	r0, #0
 23ef246:	8220      	strh	r0, [r4, #16]
      cursor_y += textsize_y * 8; // advance y one line
 23ef248:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23ef24c:	7b12      	ldrb	r2, [r2, #12]
            cursor_y += (int16_t)textsize_y *
 23ef24e:	fb02 1207 	mla	r2, r2, r7, r1
 23ef252:	8262      	strh	r2, [r4, #18]
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 23ef254:	8ae2      	ldrh	r2, [r4, #22]
 23ef256:	4620      	mov	r0, r4
 23ef258:	9201      	str	r2, [sp, #4]
 23ef25a:	8aa2      	ldrh	r2, [r4, #20]
 23ef25c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 23ef260:	9200      	str	r2, [sp, #0]
 23ef262:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23ef266:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23ef26a:	f7ff fe17 	bl	23eee9c <_ZN12Adafruit_GFX8drawCharEsshtthh>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 23ef26e:	7929      	ldrb	r1, [r5, #4]
 23ef270:	7e22      	ldrb	r2, [r4, #24]
        cursor_x +=
 23ef272:	8a23      	ldrh	r3, [r4, #16]
 23ef274:	fb01 3302 	mla	r3, r1, r2, r3
 23ef278:	e7b8      	b.n	23ef1ec <_ZN12Adafruit_GFX5writeEh+0x74>

023ef27a <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize_x = (s_x > 0) ? s_x : 1;
 23ef27a:	2901      	cmp	r1, #1
 23ef27c:	bf38      	it	cc
 23ef27e:	2101      	movcc	r1, #1
 23ef280:	7601      	strb	r1, [r0, #24]
  textsize_y = (s_y > 0) ? s_y : 1;
 23ef282:	7641      	strb	r1, [r0, #25]
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
 23ef284:	4770      	bx	lr

023ef286 <_ZN16Adafruit_HDC302xC1Ev>:
#include "Adafruit_HDC302x.h"

/**
 * Constructor for the HDC302x sensor driver.
 */
Adafruit_HDC302x::Adafruit_HDC302x() { currentAutoMode = EXIT_AUTO_MODE; }
 23ef286:	2200      	movs	r2, #0
 23ef288:	6002      	str	r2, [r0, #0]
 23ef28a:	f243 0293 	movw	r2, #12435	; 0x3093
 23ef28e:	8082      	strh	r2, [r0, #4]
 23ef290:	4770      	bx	lr

023ef292 <_ZN16Adafruit_HDC302x12writeCommandEt>:
 * Writes a command to the HDC302x sensor.
 *
 * @param command The command to write.
 * @return true if the command was written successfully, otherwise false.
 */
bool Adafruit_HDC302x::writeCommand(uint16_t command) {
 23ef292:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[2];
  buffer[0] = (uint8_t)(command >> 8);   // High byte
 23ef294:	0a0b      	lsrs	r3, r1, #8
 23ef296:	f88d 300c 	strb.w	r3, [sp, #12]
  buffer[1] = (uint8_t)(command & 0xFF); // Low byte

  return i2c_dev->write(buffer, 2);
 23ef29a:	2300      	movs	r3, #0
 23ef29c:	e9cd 3300 	strd	r3, r3, [sp]
  buffer[1] = (uint8_t)(command & 0xFF); // Low byte
 23ef2a0:	f88d 100d 	strb.w	r1, [sp, #13]
  return i2c_dev->write(buffer, 2);
 23ef2a4:	2301      	movs	r3, #1
 23ef2a6:	2202      	movs	r2, #2
 23ef2a8:	a903      	add	r1, sp, #12
 23ef2aa:	6800      	ldr	r0, [r0, #0]
 23ef2ac:	f7ff fa80 	bl	23ee7b0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
 23ef2b0:	b005      	add	sp, #20
 23ef2b2:	f85d fb04 	ldr.w	pc, [sp], #4

023ef2b6 <_ZN16Adafruit_HDC302x11setAutoModeE13hdcAutoMode_t>:
  currentAutoMode = mode;
 23ef2b6:	8081      	strh	r1, [r0, #4]
  writeCommand(mode);
 23ef2b8:	f7ff bfeb 	b.w	23ef292 <_ZN16Adafruit_HDC302x12writeCommandEt>

023ef2bc <_ZN16Adafruit_HDC302x19clearStatusRegisterEv>:
  return writeCommand(HDC302x_Commands::CLEAR_STATUS_REGISTER);
 23ef2bc:	f243 0141 	movw	r1, #12353	; 0x3041
 23ef2c0:	f7ff bfe7 	b.w	23ef292 <_ZN16Adafruit_HDC302x12writeCommandEt>

023ef2c4 <_ZN16Adafruit_HDC302x5resetEv>:
  return writeCommand(HDC302x_Commands::SOFT_RESET);
 23ef2c4:	f243 01a2 	movw	r1, #12450	; 0x30a2
 23ef2c8:	f7ff bfe3 	b.w	23ef292 <_ZN16Adafruit_HDC302x12writeCommandEt>

023ef2cc <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi>:
 * @param len Length of the data array.
 * @return uint8_t The calculated CRC-8 value.
 */
uint8_t Adafruit_HDC302x::calculateCRC8(const uint8_t *data, int len) {
  uint8_t crc = 0xFF; // Typical initial value
  for (int i = 0; i < len; i++) {
 23ef2cc:	2300      	movs	r3, #0
  uint8_t crc = 0xFF; // Typical initial value
 23ef2ce:	20ff      	movs	r0, #255	; 0xff
uint8_t Adafruit_HDC302x::calculateCRC8(const uint8_t *data, int len) {
 23ef2d0:	b510      	push	{r4, lr}
  for (int i = 0; i < len; i++) {
 23ef2d2:	4293      	cmp	r3, r2
 23ef2d4:	da0e      	bge.n	23ef2f4 <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi+0x28>
    crc ^= data[i];               // XOR byte into least sig. byte of crc
 23ef2d6:	5ccc      	ldrb	r4, [r1, r3]
 23ef2d8:	4060      	eors	r0, r4
 23ef2da:	2408      	movs	r4, #8
    for (int j = 8; j > 0; j--) { // Loop over each bit
      if (crc & 0x80) {           // If the uppermost bit is 1...
 23ef2dc:	f010 0f80 	tst.w	r0, #128	; 0x80
 23ef2e0:	ea4f 0040 	mov.w	r0, r0, lsl #1
        crc = (crc << 1) ^ 0x31;  // Polynomial used by HDC302x
 23ef2e4:	bf18      	it	ne
 23ef2e6:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
    for (int j = 8; j > 0; j--) { // Loop over each bit
 23ef2ea:	3c01      	subs	r4, #1
      } else {
        crc = (crc << 1);
 23ef2ec:	b2c0      	uxtb	r0, r0
    for (int j = 8; j > 0; j--) { // Loop over each bit
 23ef2ee:	d1f5      	bne.n	23ef2dc <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi+0x10>
  for (int i = 0; i < len; i++) {
 23ef2f0:	3301      	adds	r3, #1
 23ef2f2:	e7ee      	b.n	23ef2d2 <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi+0x6>
      }
    }
  }
  return crc; // Final XOR value can also be applied if specified by device
}
 23ef2f4:	bd10      	pop	{r4, pc}
	...

023ef2f8 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_>:
                                          double &RH) {
 23ef2f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23ef2fc:	4605      	mov	r5, r0
 23ef2fe:	4617      	mov	r7, r2
 23ef300:	461e      	mov	r6, r3
  if (!writeCommand(command)) {
 23ef302:	f7ff ffc6 	bl	23ef292 <_ZN16Adafruit_HDC302x12writeCommandEt>
 23ef306:	4604      	mov	r4, r0
 23ef308:	2800      	cmp	r0, #0
 23ef30a:	d04a      	beq.n	23ef3a2 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xaa>
 23ef30c:	f04f 080a 	mov.w	r8, #10
  while (!i2c_dev->read(buffer, 6)) {
 23ef310:	2301      	movs	r3, #1
 23ef312:	2206      	movs	r2, #6
 23ef314:	4669      	mov	r1, sp
 23ef316:	6828      	ldr	r0, [r5, #0]
 23ef318:	f7ff fa7a 	bl	23ee810 <_ZN18Adafruit_I2CDevice4readEPhjb>
 23ef31c:	4604      	mov	r4, r0
 23ef31e:	b930      	cbnz	r0, 23ef32e <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0x36>
    if (++retries >= MAX_RETRIES) {
 23ef320:	f1b8 0801 	subs.w	r8, r8, #1
 23ef324:	d03d      	beq.n	23ef3a2 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xaa>
    delay(1); // Wait and retry if NAK received
 23ef326:	2001      	movs	r0, #1
 23ef328:	f008 f816 	bl	23f7358 <delay>
  while (!i2c_dev->read(buffer, 6)) {
 23ef32c:	e7f0      	b.n	23ef310 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0x18>
  if (calculateCRC8(buffer, 2) != buffer[2]) {
 23ef32e:	2202      	movs	r2, #2
 23ef330:	4669      	mov	r1, sp
 23ef332:	4628      	mov	r0, r5
 23ef334:	f7ff ffca 	bl	23ef2cc <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi>
 23ef338:	f89d 3002 	ldrb.w	r3, [sp, #2]
 23ef33c:	4283      	cmp	r3, r0
 23ef33e:	d134      	bne.n	23ef3aa <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xb2>
  if (calculateCRC8(buffer + 3, 2) != buffer[5]) {
 23ef340:	4628      	mov	r0, r5
 23ef342:	f10d 0103 	add.w	r1, sp, #3
 23ef346:	f7ff ffc1 	bl	23ef2cc <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi>
 23ef34a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 23ef34e:	4283      	cmp	r3, r0
 23ef350:	d12b      	bne.n	23ef3aa <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xb2>
  temp = ((rawTemperature / 65535.0) * 175.0) - 45.0;
 23ef352:	f8bd 0000 	ldrh.w	r0, [sp]
 23ef356:	f8bd 5003 	ldrh.w	r5, [sp, #3]
 23ef35a:	ba40      	rev16	r0, r0
 23ef35c:	b280      	uxth	r0, r0
 23ef35e:	f7f3 f8fd 	bl	23e255c <__aeabi_i2d>
 23ef362:	a313      	add	r3, pc, #76	; (adr r3, 23ef3b0 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xb8>)
 23ef364:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ef368:	f7f3 fa8c 	bl	23e2884 <__aeabi_ddiv>
 23ef36c:	a314      	add	r3, pc, #80	; (adr r3, 23ef3c0 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xc8>)
 23ef36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ef372:	f7f3 f95d 	bl	23e2630 <__aeabi_dmul>
 23ef376:	2200      	movs	r2, #0
 23ef378:	4b0f      	ldr	r3, [pc, #60]	; (23ef3b8 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xc0>)
 23ef37a:	f7f2 ffa1 	bl	23e22c0 <__aeabi_dsub>
 23ef37e:	ba6d      	rev16	r5, r5
 23ef380:	b2ad      	uxth	r5, r5
 23ef382:	e9c7 0100 	strd	r0, r1, [r7]
  RH = (rawHumidity / 65535.0) * 100.0;
 23ef386:	4628      	mov	r0, r5
 23ef388:	f7f3 f8e8 	bl	23e255c <__aeabi_i2d>
 23ef38c:	a308      	add	r3, pc, #32	; (adr r3, 23ef3b0 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xb8>)
 23ef38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ef392:	f7f3 fa77 	bl	23e2884 <__aeabi_ddiv>
 23ef396:	2200      	movs	r2, #0
 23ef398:	4b08      	ldr	r3, [pc, #32]	; (23ef3bc <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xc4>)
 23ef39a:	f7f3 f949 	bl	23e2630 <__aeabi_dmul>
 23ef39e:	e9c6 0100 	strd	r0, r1, [r6]
}
 23ef3a2:	4620      	mov	r0, r4
 23ef3a4:	b002      	add	sp, #8
 23ef3a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return false; // CRC check failed
 23ef3aa:	2400      	movs	r4, #0
 23ef3ac:	e7f9      	b.n	23ef3a2 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xaa>
 23ef3ae:	bf00      	nop
 23ef3b0:	00000000 	.word	0x00000000
 23ef3b4:	40efffe0 	.word	0x40efffe0
 23ef3b8:	40468000 	.word	0x40468000
 23ef3bc:	40590000 	.word	0x40590000
 23ef3c0:	00000000 	.word	0x00000000
 23ef3c4:	4065e000 	.word	0x4065e000

023ef3c8 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>:
    double &temp, double &RH, hdcTriggerMode_t mode = TRIGGERMODE_LP0) {
 23ef3c8:	b410      	push	{r4}
 23ef3ca:	460c      	mov	r4, r1
 23ef3cc:	4619      	mov	r1, r3
  return sendCommandReadTRH(static_cast<uint16_t>(mode), temp, RH);
 23ef3ce:	4613      	mov	r3, r2
 23ef3d0:	4622      	mov	r2, r4
}
 23ef3d2:	f85d 4b04 	ldr.w	r4, [sp], #4
  return sendCommandReadTRH(static_cast<uint16_t>(mode), temp, RH);
 23ef3d6:	f7ff bf8f 	b.w	23ef2f8 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_>

023ef3da <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt>:
bool Adafruit_HDC302x::writeCommandReadData(uint16_t command, uint16_t &data) {
 23ef3da:	b5f0      	push	{r4, r5, r6, r7, lr}
  cmd_buffer[0] = (uint8_t)(command >> 8);   // High byte of the command
 23ef3dc:	0a0b      	lsrs	r3, r1, #8
bool Adafruit_HDC302x::writeCommandReadData(uint16_t command, uint16_t &data) {
 23ef3de:	b085      	sub	sp, #20
  cmd_buffer[0] = (uint8_t)(command >> 8);   // High byte of the command
 23ef3e0:	f88d 3008 	strb.w	r3, [sp, #8]
  if (!i2c_dev->write_then_read(cmd_buffer, 2, data_buffer, 3)) {
 23ef3e4:	2700      	movs	r7, #0
 23ef3e6:	2303      	movs	r3, #3
 23ef3e8:	e9cd 3700 	strd	r3, r7, [sp]
  cmd_buffer[1] = (uint8_t)(command & 0xFF); // Low byte of the command
 23ef3ec:	f88d 1009 	strb.w	r1, [sp, #9]
bool Adafruit_HDC302x::writeCommandReadData(uint16_t command, uint16_t &data) {
 23ef3f0:	4605      	mov	r5, r0
 23ef3f2:	4616      	mov	r6, r2
  if (!i2c_dev->write_then_read(cmd_buffer, 2, data_buffer, 3)) {
 23ef3f4:	6800      	ldr	r0, [r0, #0]
 23ef3f6:	2202      	movs	r2, #2
 23ef3f8:	ab03      	add	r3, sp, #12
 23ef3fa:	a902      	add	r1, sp, #8
 23ef3fc:	f7ff fa2a 	bl	23ee854 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
 23ef400:	4604      	mov	r4, r0
 23ef402:	b160      	cbz	r0, 23ef41e <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt+0x44>
  uint8_t calculated_crc = calculateCRC8(data_buffer, 2);
 23ef404:	2202      	movs	r2, #2
 23ef406:	4628      	mov	r0, r5
 23ef408:	a903      	add	r1, sp, #12
 23ef40a:	f7ff ff5f 	bl	23ef2cc <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi>
  if (calculated_crc != data_buffer[2]) {
 23ef40e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 23ef412:	4283      	cmp	r3, r0
 23ef414:	d106      	bne.n	23ef424 <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt+0x4a>
  data = (uint16_t)(data_buffer[0] << 8 | data_buffer[1]);
 23ef416:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 23ef41a:	ba5b      	rev16	r3, r3
 23ef41c:	8033      	strh	r3, [r6, #0]
}
 23ef41e:	4620      	mov	r0, r4
 23ef420:	b005      	add	sp, #20
 23ef422:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return false; // Communication failed
 23ef424:	463c      	mov	r4, r7
 23ef426:	e7fa      	b.n	23ef41e <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt+0x44>

023ef428 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire>:
bool Adafruit_HDC302x::begin(uint8_t i2cAddr, TwoWire *wire) {
 23ef428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23ef42a:	4604      	mov	r4, r0
  delay(5); // wait for device to be ready
 23ef42c:	2005      	movs	r0, #5
bool Adafruit_HDC302x::begin(uint8_t i2cAddr, TwoWire *wire) {
 23ef42e:	460e      	mov	r6, r1
 23ef430:	4617      	mov	r7, r2
  delay(5); // wait for device to be ready
 23ef432:	f007 ff91 	bl	23f7358 <delay>
  if (i2c_dev) {
 23ef436:	6820      	ldr	r0, [r4, #0]
 23ef438:	b110      	cbz	r0, 23ef440 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x18>
    delete i2c_dev;
 23ef43a:	2110      	movs	r1, #16
 23ef43c:	f7f3 ff61 	bl	23e3302 <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(i2cAddr, wire);
 23ef440:	2010      	movs	r0, #16
 23ef442:	f7f3 ff5a 	bl	23e32fa <_Znwj>
 23ef446:	4605      	mov	r5, r0
 23ef448:	b118      	cbz	r0, 23ef452 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x2a>
 23ef44a:	463a      	mov	r2, r7
 23ef44c:	4631      	mov	r1, r6
 23ef44e:	f7ff f984 	bl	23ee75a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin()) {
 23ef452:	2101      	movs	r1, #1
 23ef454:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(i2cAddr, wire);
 23ef456:	6025      	str	r5, [r4, #0]
  if (!i2c_dev->begin()) {
 23ef458:	f7ff f99b 	bl	23ee792 <_ZN18Adafruit_I2CDevice5beginEb>
 23ef45c:	b918      	cbnz	r0, 23ef466 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x3e>
    return false;
 23ef45e:	2500      	movs	r5, #0
}
 23ef460:	4628      	mov	r0, r5
 23ef462:	b003      	add	sp, #12
 23ef464:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!reset()) {
 23ef466:	4620      	mov	r0, r4
 23ef468:	f7ff ff2c 	bl	23ef2c4 <_ZN16Adafruit_HDC302x5resetEv>
 23ef46c:	2800      	cmp	r0, #0
 23ef46e:	d0f6      	beq.n	23ef45e <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x36>
  clearStatusRegister();
 23ef470:	4620      	mov	r0, r4
 23ef472:	f7ff ff23 	bl	23ef2bc <_ZN16Adafruit_HDC302x19clearStatusRegisterEv>
  if (!writeCommandReadData(HDC302x_Commands::READ_MANUFACTURER_ID,
 23ef476:	f243 7181 	movw	r1, #14209	; 0x3781
 23ef47a:	4620      	mov	r0, r4
 23ef47c:	f10d 0206 	add.w	r2, sp, #6
 23ef480:	f7ff ffab 	bl	23ef3da <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt>
                            manufacturerID) ||
 23ef484:	4605      	mov	r5, r0
 23ef486:	2800      	cmp	r0, #0
 23ef488:	d0e9      	beq.n	23ef45e <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x36>
 23ef48a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 23ef48e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 23ef492:	d1e4      	bne.n	23ef45e <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x36>
  setAutoMode(EXIT_AUTO_MODE);
 23ef494:	f243 0193 	movw	r1, #12435	; 0x3093
 23ef498:	4620      	mov	r0, r4
 23ef49a:	f7ff ff0c 	bl	23ef2b6 <_ZN16Adafruit_HDC302x11setAutoModeE13hdcAutoMode_t>
  return true;
 23ef49e:	e7df      	b.n	23ef460 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x38>

023ef4a0 <_ZN16Adafruit_HTU21DFC1Ev>:
#include "Adafruit_HTU21DF.h"

/**
 * Constructor for the HTU21DF driver.
 */
Adafruit_HTU21DF::Adafruit_HTU21DF() {
 23ef4a0:	2200      	movs	r2, #0
 23ef4a2:	6002      	str	r2, [r0, #0]
  /* Assign default values to internal tracking variables. */
  _last_humidity = 0.0f;
 23ef4a4:	2200      	movs	r2, #0
 23ef4a6:	6042      	str	r2, [r0, #4]
  _last_temp = 0.0f;
 23ef4a8:	6082      	str	r2, [r0, #8]
}
 23ef4aa:	4770      	bx	lr

023ef4ac <_ZN16Adafruit_HTU21DF5resetEv>:
}

/**
 * Sends a 'reset' request to the HTU21DF, followed by a 15ms delay.
 */
void Adafruit_HTU21DF::reset(void) {
 23ef4ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t cmd = HTU21DF_RESET;
 23ef4ae:	23fe      	movs	r3, #254	; 0xfe
 23ef4b0:	f88d 300f 	strb.w	r3, [sp, #15]
  i2c_dev->write(&cmd, 1);
 23ef4b4:	2300      	movs	r3, #0
 23ef4b6:	e9cd 3300 	strd	r3, r3, [sp]
 23ef4ba:	2301      	movs	r3, #1
 23ef4bc:	f10d 010f 	add.w	r1, sp, #15
 23ef4c0:	461a      	mov	r2, r3
 23ef4c2:	6800      	ldr	r0, [r0, #0]
 23ef4c4:	f7ff f974 	bl	23ee7b0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>

  delay(15);
 23ef4c8:	200f      	movs	r0, #15
 23ef4ca:	f007 ff45 	bl	23f7358 <delay>
}
 23ef4ce:	b005      	add	sp, #20
 23ef4d0:	f85d fb04 	ldr.w	pc, [sp], #4

023ef4d4 <_ZN16Adafruit_HTU21DF5beginEP7TwoWire>:
bool Adafruit_HTU21DF::begin(TwoWire *theWire) {
 23ef4d4:	b570      	push	{r4, r5, r6, lr}
 23ef4d6:	4604      	mov	r4, r0
  if (i2c_dev) {
 23ef4d8:	6800      	ldr	r0, [r0, #0]
bool Adafruit_HTU21DF::begin(TwoWire *theWire) {
 23ef4da:	460e      	mov	r6, r1
 23ef4dc:	b088      	sub	sp, #32
  if (i2c_dev) {
 23ef4de:	b110      	cbz	r0, 23ef4e6 <_ZN16Adafruit_HTU21DF5beginEP7TwoWire+0x12>
    delete i2c_dev;
 23ef4e0:	2110      	movs	r1, #16
 23ef4e2:	f7f3 ff0e 	bl	23e3302 <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(HTU21DF_I2CADDR, theWire);
 23ef4e6:	2010      	movs	r0, #16
 23ef4e8:	f7f3 ff07 	bl	23e32fa <_Znwj>
 23ef4ec:	4605      	mov	r5, r0
 23ef4ee:	b118      	cbz	r0, 23ef4f8 <_ZN16Adafruit_HTU21DF5beginEP7TwoWire+0x24>
 23ef4f0:	4632      	mov	r2, r6
 23ef4f2:	2140      	movs	r1, #64	; 0x40
 23ef4f4:	f7ff f931 	bl	23ee75a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin()) {
 23ef4f8:	2101      	movs	r1, #1
 23ef4fa:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(HTU21DF_I2CADDR, theWire);
 23ef4fc:	6025      	str	r5, [r4, #0]
  if (!i2c_dev->begin()) {
 23ef4fe:	f7ff f948 	bl	23ee792 <_ZN18Adafruit_I2CDevice5beginEb>
 23ef502:	b188      	cbz	r0, 23ef528 <_ZN16Adafruit_HTU21DF5beginEP7TwoWire+0x54>
  reset();
 23ef504:	4620      	mov	r0, r4
 23ef506:	f7ff ffd1 	bl	23ef4ac <_ZN16Adafruit_HTU21DF5resetEv>
      Adafruit_BusIO_Register(i2c_dev, HTU21DF_READREG);
 23ef50a:	2301      	movs	r3, #1
 23ef50c:	2200      	movs	r2, #0
 23ef50e:	6821      	ldr	r1, [r4, #0]
 23ef510:	e9cd 2300 	strd	r2, r3, [sp]
 23ef514:	a802      	add	r0, sp, #8
 23ef516:	22e7      	movs	r2, #231	; 0xe7
 23ef518:	f7ff f80a 	bl	23ee530 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return (reg.read() == 0x2); // after reset should be 0x2
 23ef51c:	a802      	add	r0, sp, #8
 23ef51e:	f7ff f8d5 	bl	23ee6cc <_ZN23Adafruit_BusIO_Register4readEv>
 23ef522:	1e83      	subs	r3, r0, #2
 23ef524:	4258      	negs	r0, r3
 23ef526:	4158      	adcs	r0, r3
}
 23ef528:	b008      	add	sp, #32
 23ef52a:	bd70      	pop	{r4, r5, r6, pc}

023ef52c <_ZN16Adafruit_HTU21DF15readTemperatureEv>:
 * Performs a single temperature conversion in degrees Celsius.
 *
 * @return a single-precision (32-bit) float value indicating the measured
 *         temperature in degrees Celsius or NAN on failure.
 */
float Adafruit_HTU21DF::readTemperature(void) {
 23ef52c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // OK lets ready!
  uint8_t cmd = HTU21DF_READTEMP;
 23ef52e:	23e3      	movs	r3, #227	; 0xe3
 23ef530:	f88d 300b 	strb.w	r3, [sp, #11]
  if (!i2c_dev->write(&cmd, 1)) {
 23ef534:	2300      	movs	r3, #0
 23ef536:	e9cd 3300 	strd	r3, r3, [sp]
 23ef53a:	2301      	movs	r3, #1
float Adafruit_HTU21DF::readTemperature(void) {
 23ef53c:	4604      	mov	r4, r0
  if (!i2c_dev->write(&cmd, 1)) {
 23ef53e:	461a      	mov	r2, r3
 23ef540:	6800      	ldr	r0, [r0, #0]
 23ef542:	f10d 010b 	add.w	r1, sp, #11
 23ef546:	f7ff f933 	bl	23ee7b0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 23ef54a:	b318      	cbz	r0, 23ef594 <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x68>
    return NAN;
  }

  delay(50); // add delay between request and actual read!
 23ef54c:	2032      	movs	r0, #50	; 0x32
 23ef54e:	f007 ff03 	bl	23f7358 <delay>

  uint8_t buf[3];
  if (!i2c_dev->read(buf, 3)) {
 23ef552:	2301      	movs	r3, #1
 23ef554:	2203      	movs	r2, #3
 23ef556:	6820      	ldr	r0, [r4, #0]
 23ef558:	a903      	add	r1, sp, #12
 23ef55a:	f7ff f959 	bl	23ee810 <_ZN18Adafruit_I2CDevice4readEPhjb>
 23ef55e:	b1c8      	cbz	r0, 23ef594 <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x68>
  }

  /* Read 16 bits of data, dropping the last two status bits. */
  uint16_t t = buf[0];
  t <<= 8;
  t |= buf[1] & 0b11111100;
 23ef560:	f89d 300d 	ldrb.w	r3, [sp, #13]
  uint16_t t = buf[0];
 23ef564:	f89d 200c 	ldrb.w	r2, [sp, #12]
  t |= buf[1] & 0b11111100;
 23ef568:	f003 03fc 	and.w	r3, r3, #252	; 0xfc

  // 3rd byte is the CRC

  float temp = t;
 23ef56c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 23ef570:	ee07 3a90 	vmov	s15, r3
  temp *= 175.72f;
 23ef574:	ed9f 7a09 	vldr	s14, [pc, #36]	; 23ef59c <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x70>
  float temp = t;
 23ef578:	eef8 7a67 	vcvt.f32.u32	s15, s15
  temp /= 65536.0f;
  temp -= 46.85f;
 23ef57c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 23ef5a0 <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x74>
  temp *= 175.72f;
 23ef580:	ee67 7a87 	vmul.f32	s15, s15, s14
  temp -= 46.85f;
 23ef584:	ed9f 7a07 	vldr	s14, [pc, #28]	; 23ef5a4 <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x78>
 23ef588:	eea7 0a87 	vfma.f32	s0, s15, s14

  /* Track the value internally in case we need to access it later. */
  _last_temp = temp;
 23ef58c:	ed84 0a02 	vstr	s0, [r4, #8]

  return temp;
}
 23ef590:	b004      	add	sp, #16
 23ef592:	bd10      	pop	{r4, pc}
    return NAN;
 23ef594:	ed9f 0a04 	vldr	s0, [pc, #16]	; 23ef5a8 <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x7c>
 23ef598:	e7fa      	b.n	23ef590 <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x64>
 23ef59a:	bf00      	nop
 23ef59c:	432fb852 	.word	0x432fb852
 23ef5a0:	c23b6666 	.word	0xc23b6666
 23ef5a4:	37800000 	.word	0x37800000
 23ef5a8:	7fc00000 	.word	0x7fc00000

023ef5ac <_ZN16Adafruit_HTU21DF12readHumidityEv>:
 * Performs a single relative humidity conversion.
 *
 * @return A single-precision (32-bit) float value indicating the relative
 *         humidity in percent (0..100.0%).
 */
float Adafruit_HTU21DF::readHumidity(void) {
 23ef5ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* Prepare the I2C request. */
  uint8_t cmd = HTU21DF_READHUM;
 23ef5ae:	23e5      	movs	r3, #229	; 0xe5
 23ef5b0:	f88d 300b 	strb.w	r3, [sp, #11]
  if (!i2c_dev->write(&cmd, 1)) {
 23ef5b4:	2300      	movs	r3, #0
 23ef5b6:	e9cd 3300 	strd	r3, r3, [sp]
 23ef5ba:	2301      	movs	r3, #1
float Adafruit_HTU21DF::readHumidity(void) {
 23ef5bc:	4604      	mov	r4, r0
  if (!i2c_dev->write(&cmd, 1)) {
 23ef5be:	461a      	mov	r2, r3
 23ef5c0:	6800      	ldr	r0, [r0, #0]
 23ef5c2:	f10d 010b 	add.w	r1, sp, #11
 23ef5c6:	f7ff f8f3 	bl	23ee7b0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 23ef5ca:	b318      	cbz	r0, 23ef614 <_ZN16Adafruit_HTU21DF12readHumidityEv+0x68>
    return NAN;
  }

  /* Wait a bit for the conversion to complete. */
  delay(50);
 23ef5cc:	2032      	movs	r0, #50	; 0x32
 23ef5ce:	f007 fec3 	bl	23f7358 <delay>

  uint8_t buf[3];
  if (!i2c_dev->read(buf, 3)) {
 23ef5d2:	2301      	movs	r3, #1
 23ef5d4:	2203      	movs	r2, #3
 23ef5d6:	6820      	ldr	r0, [r4, #0]
 23ef5d8:	a903      	add	r1, sp, #12
 23ef5da:	f7ff f919 	bl	23ee810 <_ZN18Adafruit_I2CDevice4readEPhjb>
 23ef5de:	b1c8      	cbz	r0, 23ef614 <_ZN16Adafruit_HTU21DF12readHumidityEv+0x68>
  }

  /* Read 16 bits of data, dropping the last two status bits. */
  uint16_t h = buf[0];
  h <<= 8;
  h |= buf[1] & 0b11111100;
 23ef5e0:	f89d 300d 	ldrb.w	r3, [sp, #13]
  uint16_t h = buf[0];
 23ef5e4:	f89d 200c 	ldrb.w	r2, [sp, #12]
  h |= buf[1] & 0b11111100;
 23ef5e8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc

  // 3rd byte is the CRC

  float hum = h;
 23ef5ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 23ef5f0:	ee07 3a90 	vmov	s15, r3
  hum *= 125.0f;
 23ef5f4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 23ef61c <_ZN16Adafruit_HTU21DF12readHumidityEv+0x70>
  float hum = h;
 23ef5f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
  hum /= 65536.0f;
  hum -= 6.0f;
 23ef5fc:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
  hum *= 125.0f;
 23ef600:	ee67 7a87 	vmul.f32	s15, s15, s14
  hum -= 6.0f;
 23ef604:	ed9f 7a06 	vldr	s14, [pc, #24]	; 23ef620 <_ZN16Adafruit_HTU21DF12readHumidityEv+0x74>
 23ef608:	eea7 0a87 	vfma.f32	s0, s15, s14

  /* Track the value internally in case we need to access it later. */
  _last_humidity = hum;
 23ef60c:	ed84 0a01 	vstr	s0, [r4, #4]

  return hum;
}
 23ef610:	b004      	add	sp, #16
 23ef612:	bd10      	pop	{r4, pc}
    return NAN;
 23ef614:	ed9f 0a03 	vldr	s0, [pc, #12]	; 23ef624 <_ZN16Adafruit_HTU21DF12readHumidityEv+0x78>
 23ef618:	e7fa      	b.n	23ef610 <_ZN16Adafruit_HTU21DF12readHumidityEv+0x64>
 23ef61a:	bf00      	nop
 23ef61c:	42fa0000 	.word	0x42fa0000
 23ef620:	37800000 	.word	0x37800000
 23ef624:	7fc00000 	.word	0x7fc00000

023ef628 <_ZN16Adafruit_LPS35HWC1Ev>:
#include "Adafruit_LPS35HW.h"

/*!
 *    @brief  Instantiates a new LPS35HW class
 */
Adafruit_LPS35HW::Adafruit_LPS35HW(void) {}
 23ef628:	4770      	bx	lr

023ef62a <_ZN16Adafruit_LPS35HW5resetEv>:
/*!
    @brief Resets the hardware. All configuration registers are set to
            default values, the same as a power-on reset.
*/
/**************************************************************************/
void Adafruit_LPS35HW::reset(void) {
 23ef62a:	b507      	push	{r0, r1, r2, lr}
  Adafruit_BusIO_RegisterBits reset =
      Adafruit_BusIO_RegisterBits(Config2, 1, 2);
 23ef62c:	2302      	movs	r3, #2
 23ef62e:	6841      	ldr	r1, [r0, #4]
 23ef630:	2201      	movs	r2, #1
 23ef632:	4668      	mov	r0, sp
 23ef634:	f7ff f866 	bl	23ee704 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  reset.write(1);
 23ef638:	2101      	movs	r1, #1
 23ef63a:	4668      	mov	r0, sp
 23ef63c:	f7ff f874 	bl	23ee728 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  while (reset.read() == true) {
 23ef640:	4668      	mov	r0, sp
 23ef642:	f7ff f864 	bl	23ee70e <_ZN27Adafruit_BusIO_RegisterBits4readEv>
 23ef646:	2801      	cmp	r0, #1
 23ef648:	d102      	bne.n	23ef650 <_ZN16Adafruit_LPS35HW5resetEv+0x26>
    delay(1);
 23ef64a:	f007 fe85 	bl	23f7358 <delay>
  while (reset.read() == true) {
 23ef64e:	e7f7      	b.n	23ef640 <_ZN16Adafruit_LPS35HW5resetEv+0x16>
  }
}
 23ef650:	b003      	add	sp, #12
 23ef652:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023ef658 <_ZN16Adafruit_LPS35HW15readTemperatureEv>:
    @return The current temperature in degrees C
*/
/**************************************************************************/
float Adafruit_LPS35HW::readTemperature(void) {
  Adafruit_BusIO_Register temp = Adafruit_BusIO_Register(
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_TEMP_OUT_L, 2);
 23ef658:	2300      	movs	r3, #0
 23ef65a:	2201      	movs	r2, #1
float Adafruit_LPS35HW::readTemperature(void) {
 23ef65c:	b500      	push	{lr}
 23ef65e:	b08b      	sub	sp, #44	; 0x2c
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_TEMP_OUT_L, 2);
 23ef660:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23ef664:	2102      	movs	r1, #2
 23ef666:	222b      	movs	r2, #43	; 0x2b
 23ef668:	e9cd 2100 	strd	r2, r1, [sp]
 23ef66c:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 23ef670:	a804      	add	r0, sp, #16
 23ef672:	f7fe ff6b 	bl	23ee54c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  return (int16_t)temp.read() / 100.0;
 23ef676:	a804      	add	r0, sp, #16
 23ef678:	f7ff f828 	bl	23ee6cc <_ZN23Adafruit_BusIO_Register4readEv>
 23ef67c:	b200      	sxth	r0, r0
 23ef67e:	f7f2 ff6d 	bl	23e255c <__aeabi_i2d>
 23ef682:	2200      	movs	r2, #0
 23ef684:	4b04      	ldr	r3, [pc, #16]	; (23ef698 <_ZN16Adafruit_LPS35HW15readTemperatureEv+0x40>)
 23ef686:	f7f3 f8fd 	bl	23e2884 <__aeabi_ddiv>
 23ef68a:	f7f3 fac9 	bl	23e2c20 <__aeabi_d2f>
}
 23ef68e:	ee00 0a10 	vmov	s0, r0
 23ef692:	b00b      	add	sp, #44	; 0x2c
 23ef694:	f85d fb04 	ldr.w	pc, [sp], #4
 23ef698:	40590000 	.word	0x40590000

023ef69c <_ZN16Adafruit_LPS35HW12readPressureEv>:
    @return The current pressure in hPa, relative to the reference temperature
*/
/**************************************************************************/
float Adafruit_LPS35HW::readPressure(void) {
  Adafruit_BusIO_Register pressure = Adafruit_BusIO_Register(
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_PRESS_OUT_XL, 3);
 23ef69c:	2300      	movs	r3, #0
 23ef69e:	2201      	movs	r2, #1
float Adafruit_LPS35HW::readPressure(void) {
 23ef6a0:	b500      	push	{lr}
 23ef6a2:	b08b      	sub	sp, #44	; 0x2c
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_PRESS_OUT_XL, 3);
 23ef6a4:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23ef6a8:	2103      	movs	r1, #3
 23ef6aa:	2228      	movs	r2, #40	; 0x28
 23ef6ac:	e9cd 2100 	strd	r2, r1, [sp]
 23ef6b0:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 23ef6b4:	a804      	add	r0, sp, #16
 23ef6b6:	f7fe ff49 	bl	23ee54c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  int32_t raw_pressure = pressure.read();
 23ef6ba:	a804      	add	r0, sp, #16
 23ef6bc:	f7ff f806 	bl	23ee6cc <_ZN23Adafruit_BusIO_Register4readEv>
  // perform sign extension for 24 bit number if needed
  if (raw_pressure & 0x800000) {
 23ef6c0:	0203      	lsls	r3, r0, #8
    raw_pressure = (0xff000000 | raw_pressure);
 23ef6c2:	bf48      	it	mi
 23ef6c4:	f040 407f 	orrmi.w	r0, r0, #4278190080	; 0xff000000
  }

  return (raw_pressure / 4096.0);
 23ef6c8:	f7f2 ff48 	bl	23e255c <__aeabi_i2d>
 23ef6cc:	2200      	movs	r2, #0
 23ef6ce:	4b05      	ldr	r3, [pc, #20]	; (23ef6e4 <_ZN16Adafruit_LPS35HW12readPressureEv+0x48>)
 23ef6d0:	f7f2 ffae 	bl	23e2630 <__aeabi_dmul>
 23ef6d4:	f7f3 faa4 	bl	23e2c20 <__aeabi_d2f>
}
 23ef6d8:	ee00 0a10 	vmov	s0, r0
 23ef6dc:	b00b      	add	sp, #44	; 0x2c
 23ef6de:	f85d fb04 	ldr.w	pc, [sp], #4
 23ef6e2:	bf00      	nop
 23ef6e4:	3f300000 	.word	0x3f300000

023ef6e8 <_ZN16Adafruit_LPS35HW11setDataRateE10_data_rate>:
    @brief Sets a new measurement rate
    @param new_rate
          The new output data rate to be set (ODR)
*/
/**************************************************************************/
void Adafruit_LPS35HW::setDataRate(LPS35HW_DataRate new_rate) {
 23ef6e8:	b513      	push	{r0, r1, r4, lr}
 23ef6ea:	460c      	mov	r4, r1
  Adafruit_BusIO_RegisterBits data_rate =
      Adafruit_BusIO_RegisterBits(Config1, 3, 4);
 23ef6ec:	2304      	movs	r3, #4
 23ef6ee:	2203      	movs	r2, #3
 23ef6f0:	6801      	ldr	r1, [r0, #0]
 23ef6f2:	4668      	mov	r0, sp
 23ef6f4:	f7ff f806 	bl	23ee704 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  data_rate.write(new_rate);
 23ef6f8:	4621      	mov	r1, r4
 23ef6fa:	4668      	mov	r0, sp
 23ef6fc:	f7ff f814 	bl	23ee728 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
 23ef700:	b002      	add	sp, #8
 23ef702:	bd10      	pop	{r4, pc}

023ef704 <_ZN16Adafruit_LPS35HW5_initEv>:
boolean Adafruit_LPS35HW::_init(void) {
 23ef704:	b5f0      	push	{r4, r5, r6, r7, lr}
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_WHO_AM_I, 1);
 23ef706:	2500      	movs	r5, #0
 23ef708:	2701      	movs	r7, #1
 23ef70a:	230f      	movs	r3, #15
boolean Adafruit_LPS35HW::_init(void) {
 23ef70c:	b08d      	sub	sp, #52	; 0x34
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_WHO_AM_I, 1);
 23ef70e:	e9cd 5702 	strd	r5, r7, [sp, #8]
 23ef712:	9300      	str	r3, [sp, #0]
 23ef714:	9701      	str	r7, [sp, #4]
 23ef716:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 23ef71a:	462b      	mov	r3, r5
boolean Adafruit_LPS35HW::_init(void) {
 23ef71c:	4604      	mov	r4, r0
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_WHO_AM_I, 1);
 23ef71e:	a806      	add	r0, sp, #24
 23ef720:	f7fe ff14 	bl	23ee54c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  if (chip_id.read() != 0xB1) {
 23ef724:	a806      	add	r0, sp, #24
 23ef726:	f7fe ffd1 	bl	23ee6cc <_ZN23Adafruit_BusIO_Register4readEv>
 23ef72a:	28b1      	cmp	r0, #177	; 0xb1
 23ef72c:	d167      	bne.n	23ef7fe <_ZN16Adafruit_LPS35HW5_initEv+0xfa>
                                        LPS35HW_CTRL_REG1, 1);
 23ef72e:	2018      	movs	r0, #24
 23ef730:	f7f3 fde3 	bl	23e32fa <_Znwj>
 23ef734:	4606      	mov	r6, r0
 23ef736:	b148      	cbz	r0, 23ef74c <_ZN16Adafruit_LPS35HW5_initEv+0x48>
 23ef738:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 23ef73c:	2310      	movs	r3, #16
 23ef73e:	e9cd 5702 	strd	r5, r7, [sp, #8]
 23ef742:	9300      	str	r3, [sp, #0]
 23ef744:	9701      	str	r7, [sp, #4]
 23ef746:	462b      	mov	r3, r5
 23ef748:	f7fe ff00 	bl	23ee54c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
                                        LPS35HW_CTRL_REG2, 1);
 23ef74c:	2018      	movs	r0, #24
  Config1 = new Adafruit_BusIO_Register(i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD,
 23ef74e:	6026      	str	r6, [r4, #0]
                                        LPS35HW_CTRL_REG2, 1);
 23ef750:	f7f3 fdd3 	bl	23e32fa <_Znwj>
 23ef754:	4605      	mov	r5, r0
 23ef756:	b150      	cbz	r0, 23ef76e <_ZN16Adafruit_LPS35HW5_initEv+0x6a>
 23ef758:	2201      	movs	r2, #1
 23ef75a:	2300      	movs	r3, #0
 23ef75c:	9201      	str	r2, [sp, #4]
 23ef75e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23ef762:	2211      	movs	r2, #17
 23ef764:	9200      	str	r2, [sp, #0]
 23ef766:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 23ef76a:	f7fe feef 	bl	23ee54c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Config2 = new Adafruit_BusIO_Register(i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD,
 23ef76e:	6065      	str	r5, [r4, #4]
                                        LPS35HW_CTRL_REG3, 1);
 23ef770:	2018      	movs	r0, #24
 23ef772:	f7f3 fdc2 	bl	23e32fa <_Znwj>
 23ef776:	4605      	mov	r5, r0
 23ef778:	b150      	cbz	r0, 23ef790 <_ZN16Adafruit_LPS35HW5_initEv+0x8c>
 23ef77a:	2201      	movs	r2, #1
 23ef77c:	2300      	movs	r3, #0
 23ef77e:	9201      	str	r2, [sp, #4]
 23ef780:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23ef784:	2212      	movs	r2, #18
 23ef786:	9200      	str	r2, [sp, #0]
 23ef788:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 23ef78c:	f7fe fede 	bl	23ee54c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Config3 = new Adafruit_BusIO_Register(i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD,
 23ef790:	60a5      	str	r5, [r4, #8]
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_INTERRUPT_CFG, 1);
 23ef792:	2018      	movs	r0, #24
 23ef794:	f7f3 fdb1 	bl	23e32fa <_Znwj>
 23ef798:	4605      	mov	r5, r0
 23ef79a:	b150      	cbz	r0, 23ef7b2 <_ZN16Adafruit_LPS35HW5_initEv+0xae>
 23ef79c:	2201      	movs	r2, #1
 23ef79e:	2300      	movs	r3, #0
 23ef7a0:	9201      	str	r2, [sp, #4]
 23ef7a2:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23ef7a6:	220b      	movs	r2, #11
 23ef7a8:	9200      	str	r2, [sp, #0]
 23ef7aa:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 23ef7ae:	f7fe fecd 	bl	23ee54c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  InterruptCfg = new Adafruit_BusIO_Register(
 23ef7b2:	60e5      	str	r5, [r4, #12]
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_INT_SOURCE, 1);
 23ef7b4:	2018      	movs	r0, #24
 23ef7b6:	f7f3 fda0 	bl	23e32fa <_Znwj>
 23ef7ba:	4605      	mov	r5, r0
 23ef7bc:	b150      	cbz	r0, 23ef7d4 <_ZN16Adafruit_LPS35HW5_initEv+0xd0>
 23ef7be:	2201      	movs	r2, #1
 23ef7c0:	2300      	movs	r3, #0
 23ef7c2:	9201      	str	r2, [sp, #4]
 23ef7c4:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23ef7c8:	2225      	movs	r2, #37	; 0x25
 23ef7ca:	9200      	str	r2, [sp, #0]
 23ef7cc:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 23ef7d0:	f7fe febc 	bl	23ee54c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  reset();
 23ef7d4:	4620      	mov	r0, r4
  InterruptStatus = new Adafruit_BusIO_Register(
 23ef7d6:	6125      	str	r5, [r4, #16]
  reset();
 23ef7d8:	f7ff ff27 	bl	23ef62a <_ZN16Adafruit_LPS35HW5resetEv>
  setDataRate(LPS35HW_RATE_10_HZ); // default in continuous at 10 hz
 23ef7dc:	2102      	movs	r1, #2
 23ef7de:	4620      	mov	r0, r4
 23ef7e0:	f7ff ff82 	bl	23ef6e8 <_ZN16Adafruit_LPS35HW11setDataRateE10_data_rate>
      Adafruit_BusIO_RegisterBits(Config1, 1, 1);
 23ef7e4:	2301      	movs	r3, #1
 23ef7e6:	6821      	ldr	r1, [r4, #0]
 23ef7e8:	461a      	mov	r2, r3
 23ef7ea:	a804      	add	r0, sp, #16
 23ef7ec:	f7fe ff8a 	bl	23ee704 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  block_reads.write(0x1);
 23ef7f0:	2101      	movs	r1, #1
 23ef7f2:	a804      	add	r0, sp, #16
 23ef7f4:	f7fe ff98 	bl	23ee728 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  return true;
 23ef7f8:	2001      	movs	r0, #1
}
 23ef7fa:	b00d      	add	sp, #52	; 0x34
 23ef7fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return false;
 23ef7fe:	4628      	mov	r0, r5
 23ef800:	e7fb      	b.n	23ef7fa <_ZN16Adafruit_LPS35HW5_initEv+0xf6>

023ef802 <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire>:
  spi_dev = NULL;
 23ef802:	2300      	movs	r3, #0
boolean Adafruit_LPS35HW::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
 23ef804:	b537      	push	{r0, r1, r2, r4, r5, lr}
  spi_dev = NULL;
 23ef806:	6183      	str	r3, [r0, #24]
boolean Adafruit_LPS35HW::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
 23ef808:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
 23ef80a:	2010      	movs	r0, #16
boolean Adafruit_LPS35HW::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
 23ef80c:	e9cd 2100 	strd	r2, r1, [sp]
  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
 23ef810:	f7f3 fd73 	bl	23e32fa <_Znwj>
 23ef814:	4605      	mov	r5, r0
 23ef816:	b118      	cbz	r0, 23ef820 <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire+0x1e>
 23ef818:	e9dd 2100 	ldrd	r2, r1, [sp]
 23ef81c:	f7fe ff9d 	bl	23ee75a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin()) {
 23ef820:	2101      	movs	r1, #1
 23ef822:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
 23ef824:	6165      	str	r5, [r4, #20]
  if (!i2c_dev->begin()) {
 23ef826:	f7fe ffb4 	bl	23ee792 <_ZN18Adafruit_I2CDevice5beginEb>
 23ef82a:	b128      	cbz	r0, 23ef838 <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire+0x36>
  return _init();
 23ef82c:	4620      	mov	r0, r4
}
 23ef82e:	b003      	add	sp, #12
 23ef830:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return _init();
 23ef834:	f7ff bf66 	b.w	23ef704 <_ZN16Adafruit_LPS35HW5_initEv>
}
 23ef838:	b003      	add	sp, #12
 23ef83a:	bd30      	pop	{r4, r5, pc}

023ef83c <_ZN16Adafruit_MCP9808D1Ev>:
 23ef83c:	4770      	bx	lr

023ef83e <_ZN16Adafruit_MCP9808D0Ev>:
 23ef83e:	b510      	push	{r4, lr}
 23ef840:	4604      	mov	r4, r0
 23ef842:	210c      	movs	r1, #12
 23ef844:	f7f3 fd5d 	bl	23e3302 <_ZdlPvj>
 23ef848:	4620      	mov	r0, r4
 23ef84a:	bd10      	pop	{r4, pc}

023ef84c <_ZN16Adafruit_MCP98089getSensorEP8sensor_t>:
   resulution
    @param  sensor Pointer to Adafruit_Sensor sensor_t object that will be
   filled with sensor type data
*/
/**************************************************************************/
void Adafruit_MCP9808::getSensor(sensor_t *sensor) {
 23ef84c:	b538      	push	{r3, r4, r5, lr}
 23ef84e:	460c      	mov	r4, r1
 23ef850:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 23ef852:	2220      	movs	r2, #32
 23ef854:	2100      	movs	r1, #0
 23ef856:	f104 0008 	add.w	r0, r4, #8
 23ef85a:	f00c fdc4 	bl	23fc3e6 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "MCP9808", sizeof(sensor->name) - 1);
 23ef85e:	220b      	movs	r2, #11
 23ef860:	4620      	mov	r0, r4
 23ef862:	4908      	ldr	r1, [pc, #32]	; (23ef884 <_ZN16Adafruit_MCP98089getSensorEP8sensor_t+0x38>)
 23ef864:	f00c fe82 	bl	23fc56c <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
 23ef868:	2301      	movs	r3, #1
 23ef86a:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
 23ef86c:	88eb      	ldrh	r3, [r5, #6]
 23ef86e:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 23ef870:	230d      	movs	r3, #13
 23ef872:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->max_value = 100.0;
 23ef874:	4b04      	ldr	r3, [pc, #16]	; (23ef888 <_ZN16Adafruit_MCP98089getSensorEP8sensor_t+0x3c>)
 23ef876:	61a3      	str	r3, [r4, #24]
  sensor->min_value = -20.0;
 23ef878:	4b04      	ldr	r3, [pc, #16]	; (23ef88c <_ZN16Adafruit_MCP98089getSensorEP8sensor_t+0x40>)
 23ef87a:	61e3      	str	r3, [r4, #28]
  sensor->resolution = 0.0625;
 23ef87c:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 23ef880:	6223      	str	r3, [r4, #32]
}
 23ef882:	bd38      	pop	{r3, r4, r5, pc}
 23ef884:	023fec74 	.word	0x023fec74
 23ef888:	42c80000 	.word	0x42c80000
 23ef88c:	c1a00000 	.word	0xc1a00000

023ef890 <_ZN16Adafruit_MCP9808C1Ev>:
Adafruit_MCP9808::Adafruit_MCP9808() {}
 23ef890:	4a03      	ldr	r2, [pc, #12]	; (23ef8a0 <_ZN16Adafruit_MCP9808C1Ev+0x10>)
 23ef892:	6002      	str	r2, [r0, #0]
 23ef894:	f242 6250 	movw	r2, #9808	; 0x2650
 23ef898:	80c2      	strh	r2, [r0, #6]
 23ef89a:	2200      	movs	r2, #0
 23ef89c:	6082      	str	r2, [r0, #8]
 23ef89e:	4770      	bx	lr
 23ef8a0:	023fec84 	.word	0x023fec84

023ef8a4 <_ZN16Adafruit_MCP98087write16Eht>:
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
 23ef8a4:	2301      	movs	r3, #1
void Adafruit_MCP9808::write16(uint8_t reg, uint16_t value) {
 23ef8a6:	b510      	push	{r4, lr}
 23ef8a8:	4614      	mov	r4, r2
 23ef8aa:	b088      	sub	sp, #32
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
 23ef8ac:	e9cd 3300 	strd	r3, r3, [sp]
 23ef8b0:	460a      	mov	r2, r1
 23ef8b2:	2302      	movs	r3, #2
 23ef8b4:	6881      	ldr	r1, [r0, #8]
 23ef8b6:	a802      	add	r0, sp, #8
 23ef8b8:	f7fe fe3a 	bl	23ee530 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  reg16.write(value);
 23ef8bc:	2200      	movs	r2, #0
 23ef8be:	4621      	mov	r1, r4
 23ef8c0:	a802      	add	r0, sp, #8
 23ef8c2:	f7fe fea3 	bl	23ee60c <_ZN23Adafruit_BusIO_Register5writeEmh>
}
 23ef8c6:	b008      	add	sp, #32
 23ef8c8:	bd10      	pop	{r4, pc}

023ef8ca <_ZN16Adafruit_MCP98086read16Eh>:
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
 23ef8ca:	2301      	movs	r3, #1
uint16_t Adafruit_MCP9808::read16(uint8_t reg) {
 23ef8cc:	b500      	push	{lr}
 23ef8ce:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
 23ef8d0:	e9cd 3300 	strd	r3, r3, [sp]
uint16_t Adafruit_MCP9808::read16(uint8_t reg) {
 23ef8d4:	460a      	mov	r2, r1
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
 23ef8d6:	2302      	movs	r3, #2
 23ef8d8:	6881      	ldr	r1, [r0, #8]
 23ef8da:	a802      	add	r0, sp, #8
 23ef8dc:	f7fe fe28 	bl	23ee530 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return reg16.read();
 23ef8e0:	a802      	add	r0, sp, #8
 23ef8e2:	f7fe fef3 	bl	23ee6cc <_ZN23Adafruit_BusIO_Register4readEv>
}
 23ef8e6:	b280      	uxth	r0, r0
 23ef8e8:	b009      	add	sp, #36	; 0x24
 23ef8ea:	f85d fb04 	ldr.w	pc, [sp], #4

023ef8ee <_ZN16Adafruit_MCP98084initEv>:
bool Adafruit_MCP9808::init() {
 23ef8ee:	b538      	push	{r3, r4, r5, lr}
  if (!i2c_dev->begin()) {
 23ef8f0:	2101      	movs	r1, #1
bool Adafruit_MCP9808::init() {
 23ef8f2:	4604      	mov	r4, r0
  if (!i2c_dev->begin()) {
 23ef8f4:	6880      	ldr	r0, [r0, #8]
 23ef8f6:	f7fe ff4c 	bl	23ee792 <_ZN18Adafruit_I2CDevice5beginEb>
 23ef8fa:	4605      	mov	r5, r0
 23ef8fc:	b910      	cbnz	r0, 23ef904 <_ZN16Adafruit_MCP98084initEv+0x16>
    return false;
 23ef8fe:	2500      	movs	r5, #0
}
 23ef900:	4628      	mov	r0, r5
 23ef902:	bd38      	pop	{r3, r4, r5, pc}
  if (read16(MCP9808_REG_MANUF_ID) != 0x0054)
 23ef904:	2106      	movs	r1, #6
 23ef906:	4620      	mov	r0, r4
 23ef908:	f7ff ffdf 	bl	23ef8ca <_ZN16Adafruit_MCP98086read16Eh>
 23ef90c:	2854      	cmp	r0, #84	; 0x54
 23ef90e:	d1f6      	bne.n	23ef8fe <_ZN16Adafruit_MCP98084initEv+0x10>
  if (read16(MCP9808_REG_DEVICE_ID) != 0x0400)
 23ef910:	2107      	movs	r1, #7
 23ef912:	4620      	mov	r0, r4
 23ef914:	f7ff ffd9 	bl	23ef8ca <_ZN16Adafruit_MCP98086read16Eh>
 23ef918:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 23ef91c:	d1ef      	bne.n	23ef8fe <_ZN16Adafruit_MCP98084initEv+0x10>
  write16(MCP9808_REG_CONFIG, 0x0);
 23ef91e:	2200      	movs	r2, #0
 23ef920:	2101      	movs	r1, #1
 23ef922:	4620      	mov	r0, r4
 23ef924:	f7ff ffbe 	bl	23ef8a4 <_ZN16Adafruit_MCP98087write16Eht>
  return true;
 23ef928:	e7ea      	b.n	23ef900 <_ZN16Adafruit_MCP98084initEv+0x12>

023ef92a <_ZN16Adafruit_MCP98085beginEhP7TwoWire>:
bool Adafruit_MCP9808::begin(uint8_t addr, TwoWire *theWire) {
 23ef92a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23ef92c:	4604      	mov	r4, r0
  if (i2c_dev) {
 23ef92e:	6880      	ldr	r0, [r0, #8]
bool Adafruit_MCP9808::begin(uint8_t addr, TwoWire *theWire) {
 23ef930:	460e      	mov	r6, r1
 23ef932:	4617      	mov	r7, r2
  if (i2c_dev) {
 23ef934:	b110      	cbz	r0, 23ef93c <_ZN16Adafruit_MCP98085beginEhP7TwoWire+0x12>
    delete i2c_dev;
 23ef936:	2110      	movs	r1, #16
 23ef938:	f7f3 fce3 	bl	23e3302 <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
 23ef93c:	2010      	movs	r0, #16
 23ef93e:	f7f3 fcdc 	bl	23e32fa <_Znwj>
 23ef942:	4605      	mov	r5, r0
 23ef944:	b118      	cbz	r0, 23ef94e <_ZN16Adafruit_MCP98085beginEhP7TwoWire+0x24>
 23ef946:	463a      	mov	r2, r7
 23ef948:	4631      	mov	r1, r6
 23ef94a:	f7fe ff06 	bl	23ee75a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  return init();
 23ef94e:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
 23ef950:	60a5      	str	r5, [r4, #8]
}
 23ef952:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return init();
 23ef956:	f7ff bfca 	b.w	23ef8ee <_ZN16Adafruit_MCP98084initEv>

023ef95a <_ZN16Adafruit_MCP98085beginEh>:
bool Adafruit_MCP9808::begin(uint8_t addr) { return begin(addr, &Wire); }
 23ef95a:	b513      	push	{r0, r1, r4, lr}
 23ef95c:	4604      	mov	r4, r0
 23ef95e:	9101      	str	r1, [sp, #4]
 23ef960:	f009 ff60 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23ef964:	4602      	mov	r2, r0
 23ef966:	4620      	mov	r0, r4
 23ef968:	9901      	ldr	r1, [sp, #4]
 23ef96a:	b002      	add	sp, #8
 23ef96c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23ef970:	f7ff bfdb 	b.w	23ef92a <_ZN16Adafruit_MCP98085beginEhP7TwoWire>

023ef974 <_ZN16Adafruit_MCP98089readTempCEv>:
float Adafruit_MCP9808::readTempC() {
 23ef974:	b508      	push	{r3, lr}
  uint16_t t = read16(MCP9808_REG_AMBIENT_TEMP);
 23ef976:	2105      	movs	r1, #5
 23ef978:	f7ff ffa7 	bl	23ef8ca <_ZN16Adafruit_MCP98086read16Eh>
  if (t != 0xFFFF) {
 23ef97c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23ef980:	4298      	cmp	r0, r3
 23ef982:	d00c      	beq.n	23ef99e <_ZN16Adafruit_MCP98089readTempCEv+0x2a>
    temp = t & 0x0FFF;
 23ef984:	f3c0 030b 	ubfx	r3, r0, #0, #12
 23ef988:	ee00 3a10 	vmov	s0, r3
    if (t & 0x1000)
 23ef98c:	04c3      	lsls	r3, r0, #19
    temp /= 16.0;
 23ef98e:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
    if (t & 0x1000)
 23ef992:	d503      	bpl.n	23ef99c <_ZN16Adafruit_MCP98089readTempCEv+0x28>
      temp -= 256;
 23ef994:	eddf 7a03 	vldr	s15, [pc, #12]	; 23ef9a4 <_ZN16Adafruit_MCP98089readTempCEv+0x30>
 23ef998:	ee30 0a67 	vsub.f32	s0, s0, s15
}
 23ef99c:	bd08      	pop	{r3, pc}
  float temp = NAN;
 23ef99e:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23ef9a8 <_ZN16Adafruit_MCP98089readTempCEv+0x34>
  return temp;
 23ef9a2:	e7fb      	b.n	23ef99c <_ZN16Adafruit_MCP98089readTempCEv+0x28>
 23ef9a4:	43800000 	.word	0x43800000
 23ef9a8:	7fc00000 	.word	0x7fc00000

023ef9ac <_ZN16Adafruit_MCP98088getEventEP15sensors_event_t>:
bool Adafruit_MCP9808::getEvent(sensors_event_t *temp) {
 23ef9ac:	b570      	push	{r4, r5, r6, lr}
 23ef9ae:	460c      	mov	r4, r1
 23ef9b0:	4605      	mov	r5, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23ef9b2:	f006 fd7d 	bl	23f64b0 <HAL_Timer_Get_Milli_Seconds>
  memset(temp, 0, sizeof(sensors_event_t));
 23ef9b6:	2220      	movs	r2, #32
 23ef9b8:	4606      	mov	r6, r0
 23ef9ba:	2100      	movs	r1, #0
 23ef9bc:	1d20      	adds	r0, r4, #4
 23ef9be:	f00c fd12 	bl	23fc3e6 <memset>
  temp->version = sizeof(sensors_event_t);
 23ef9c2:	2324      	movs	r3, #36	; 0x24
 23ef9c4:	6023      	str	r3, [r4, #0]
  temp->sensor_id = _sensorID;
 23ef9c6:	88eb      	ldrh	r3, [r5, #6]
  temp->temperature = readTempC();
 23ef9c8:	4628      	mov	r0, r5
  temp->sensor_id = _sensorID;
 23ef9ca:	6063      	str	r3, [r4, #4]
  temp->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 23ef9cc:	230d      	movs	r3, #13
  temp->timestamp = t;
 23ef9ce:	6126      	str	r6, [r4, #16]
  temp->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 23ef9d0:	60a3      	str	r3, [r4, #8]
  temp->temperature = readTempC();
 23ef9d2:	f7ff ffcf 	bl	23ef974 <_ZN16Adafruit_MCP98089readTempCEv>
}
 23ef9d6:	2001      	movs	r0, #1
  temp->temperature = readTempC();
 23ef9d8:	ed84 0a05 	vstr	s0, [r4, #20]
}
 23ef9dc:	bd70      	pop	{r4, r5, r6, pc}

023ef9de <_ZN16Adafruit_PM25AQIC1Ev>:
#include "Adafruit_PM25AQI.h"

/*!
 *  @brief  Instantiates a new PM25AQI class
 */
Adafruit_PM25AQI::Adafruit_PM25AQI() {}
 23ef9de:	2200      	movs	r2, #0
 23ef9e0:	e9c0 2200 	strd	r2, r2, [r0]
 23ef9e4:	4770      	bx	lr

023ef9e6 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>:
 *  @brief  Setups the hardware and detects a valid PMSA003I. Initializes I2C.
 *  @param  theWire
 *          Optional pointer to I2C interface, otherwise use Wire
 *  @return True if PMSA003I found on I2C, False if something went wrong!
 */
bool Adafruit_PM25AQI::begin_I2C(TwoWire *theWire) {
 23ef9e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
 23ef9e8:	6803      	ldr	r3, [r0, #0]
bool Adafruit_PM25AQI::begin_I2C(TwoWire *theWire) {
 23ef9ea:	4604      	mov	r4, r0
  if (!i2c_dev) {
 23ef9ec:	b953      	cbnz	r3, 23efa04 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire+0x1e>
    i2c_dev = new Adafruit_I2CDevice(PMSA003I_I2CADDR_DEFAULT, theWire);
 23ef9ee:	2010      	movs	r0, #16
 23ef9f0:	9101      	str	r1, [sp, #4]
 23ef9f2:	f7f3 fc82 	bl	23e32fa <_Znwj>
 23ef9f6:	4605      	mov	r5, r0
 23ef9f8:	b118      	cbz	r0, 23efa02 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire+0x1c>
 23ef9fa:	2112      	movs	r1, #18
 23ef9fc:	9a01      	ldr	r2, [sp, #4]
 23ef9fe:	f7fe feac 	bl	23ee75a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
 23efa02:	6025      	str	r5, [r4, #0]
  }

  if (!i2c_dev->begin()) {
 23efa04:	2101      	movs	r1, #1
 23efa06:	6820      	ldr	r0, [r4, #0]
    return false;
  }

  return true;
}
 23efa08:	b003      	add	sp, #12
 23efa0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  if (!i2c_dev->begin()) {
 23efa0e:	f7fe bec0 	b.w	23ee792 <_ZN18Adafruit_I2CDevice5beginEb>

023efa12 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata>:
 *  @brief  Setups the hardware and detects a valid UART PM2.5
 *  @param  data
 *          Pointer to PM25_AQI_Data that will be filled by read()ing
 *  @return True on successful read, false if timed out or bad data
 */
bool Adafruit_PM25AQI::read(PM25_AQI_Data *data) {
 23efa12:	b5f0      	push	{r4, r5, r6, r7, lr}
 23efa14:	4604      	mov	r4, r0
  uint8_t buffer[32];
  uint16_t sum = 0;

  if (!data) {
 23efa16:	460d      	mov	r5, r1
bool Adafruit_PM25AQI::read(PM25_AQI_Data *data) {
 23efa18:	b091      	sub	sp, #68	; 0x44
  if (!data) {
 23efa1a:	b911      	cbnz	r1, 23efa22 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x10>
        return false;
      }
    }
    if (serial_dev->peek() != 0x42) {
      serial_dev->read();
      return false;
 23efa1c:	2000      	movs	r0, #0
    return false;
  }

  // success!
  return true;
}
 23efa1e:	b011      	add	sp, #68	; 0x44
 23efa20:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (i2c_dev) { // ok using i2c?
 23efa22:	6800      	ldr	r0, [r0, #0]
 23efa24:	2800      	cmp	r0, #0
 23efa26:	d039      	beq.n	23efa9c <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x8a>
    if (!i2c_dev->read(buffer, 32)) {
 23efa28:	2220      	movs	r2, #32
 23efa2a:	2301      	movs	r3, #1
 23efa2c:	eb0d 0102 	add.w	r1, sp, r2
 23efa30:	f7fe feee 	bl	23ee810 <_ZN18Adafruit_I2CDevice4readEPhjb>
 23efa34:	2800      	cmp	r0, #0
 23efa36:	d0f1      	beq.n	23efa1c <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
  if (buffer[0] != 0x42) {
 23efa38:	f89d 3020 	ldrb.w	r3, [sp, #32]
 23efa3c:	2b42      	cmp	r3, #66	; 0x42
 23efa3e:	d1ed      	bne.n	23efa1c <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
 23efa40:	aa08      	add	r2, sp, #32
 23efa42:	4611      	mov	r1, r2
 23efa44:	231e      	movs	r3, #30
  uint16_t sum = 0;
 23efa46:	2600      	movs	r6, #0
    sum += buffer[i];
 23efa48:	f811 0b01 	ldrb.w	r0, [r1], #1
  for (uint8_t i = 0; i < 30; i++) {
 23efa4c:	3b01      	subs	r3, #1
    sum += buffer[i];
 23efa4e:	4430      	add	r0, r6
  for (uint8_t i = 0; i < 30; i++) {
 23efa50:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    sum += buffer[i];
 23efa54:	b286      	uxth	r6, r0
  for (uint8_t i = 0; i < 30; i++) {
 23efa56:	d1f7      	bne.n	23efa48 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x36>
 23efa58:	4668      	mov	r0, sp
 23efa5a:	2101      	movs	r1, #1
 23efa5c:	4603      	mov	r3, r0
    buffer_u16[i] += (buffer[2 + i * 2] << 8);
 23efa5e:	7897      	ldrb	r7, [r2, #2]
    buffer_u16[i] = buffer[2 + i * 2 + 1];
 23efa60:	78d4      	ldrb	r4, [r2, #3]
  for (uint8_t i = 0; i < 15; i++) {
 23efa62:	3101      	adds	r1, #1
    buffer_u16[i] += (buffer[2 + i * 2] << 8);
 23efa64:	eb04 2407 	add.w	r4, r4, r7, lsl #8
  for (uint8_t i = 0; i < 15; i++) {
 23efa68:	2910      	cmp	r1, #16
    buffer_u16[i] += (buffer[2 + i * 2] << 8);
 23efa6a:	f820 4b02 	strh.w	r4, [r0], #2
  for (uint8_t i = 0; i < 15; i++) {
 23efa6e:	f102 0202 	add.w	r2, r2, #2
 23efa72:	d1f4      	bne.n	23efa5e <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x4c>
  memcpy((void *)data, (void *)buffer_u16, 30);
 23efa74:	462a      	mov	r2, r5
 23efa76:	af06      	add	r7, sp, #24
 23efa78:	461c      	mov	r4, r3
 23efa7a:	cc03      	ldmia	r4!, {r0, r1}
 23efa7c:	42bc      	cmp	r4, r7
 23efa7e:	6010      	str	r0, [r2, #0]
 23efa80:	6051      	str	r1, [r2, #4]
 23efa82:	4623      	mov	r3, r4
 23efa84:	f102 0208 	add.w	r2, r2, #8
 23efa88:	d1f6      	bne.n	23efa78 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x66>
 23efa8a:	6820      	ldr	r0, [r4, #0]
 23efa8c:	6010      	str	r0, [r2, #0]
 23efa8e:	88a3      	ldrh	r3, [r4, #4]
 23efa90:	8093      	strh	r3, [r2, #4]
  if (sum != data->checksum) {
 23efa92:	8ba8      	ldrh	r0, [r5, #28]
 23efa94:	1b83      	subs	r3, r0, r6
 23efa96:	4258      	negs	r0, r3
 23efa98:	4158      	adcs	r0, r3
 23efa9a:	e7c0      	b.n	23efa1e <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xc>
  } else if (serial_dev) { // ok using uart
 23efa9c:	6860      	ldr	r0, [r4, #4]
 23efa9e:	2800      	cmp	r0, #0
 23efaa0:	d0bc      	beq.n	23efa1c <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
    if (!serial_dev->available()) {
 23efaa2:	6803      	ldr	r3, [r0, #0]
 23efaa4:	691b      	ldr	r3, [r3, #16]
 23efaa6:	4798      	blx	r3
 23efaa8:	2800      	cmp	r0, #0
 23efaaa:	d0b7      	beq.n	23efa1c <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
 23efaac:	2620      	movs	r6, #32
    while ((skipped < 32) && (serial_dev->peek() != 0x42)) {
 23efaae:	6860      	ldr	r0, [r4, #4]
 23efab0:	6803      	ldr	r3, [r0, #0]
 23efab2:	699b      	ldr	r3, [r3, #24]
 23efab4:	4798      	blx	r3
 23efab6:	2842      	cmp	r0, #66	; 0x42
 23efab8:	d00b      	beq.n	23efad2 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xc0>
      serial_dev->read();
 23efaba:	6860      	ldr	r0, [r4, #4]
 23efabc:	6803      	ldr	r3, [r0, #0]
 23efabe:	695b      	ldr	r3, [r3, #20]
 23efac0:	4798      	blx	r3
      if (!serial_dev->available()) {
 23efac2:	6860      	ldr	r0, [r4, #4]
 23efac4:	6803      	ldr	r3, [r0, #0]
 23efac6:	691b      	ldr	r3, [r3, #16]
 23efac8:	4798      	blx	r3
 23efaca:	2800      	cmp	r0, #0
 23efacc:	d0a6      	beq.n	23efa1c <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
    while ((skipped < 32) && (serial_dev->peek() != 0x42)) {
 23eface:	3e01      	subs	r6, #1
 23efad0:	d1ed      	bne.n	23efaae <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x9c>
    if (serial_dev->peek() != 0x42) {
 23efad2:	6860      	ldr	r0, [r4, #4]
 23efad4:	6803      	ldr	r3, [r0, #0]
 23efad6:	699b      	ldr	r3, [r3, #24]
 23efad8:	4798      	blx	r3
 23efada:	2842      	cmp	r0, #66	; 0x42
 23efadc:	6860      	ldr	r0, [r4, #4]
      serial_dev->read();
 23efade:	6803      	ldr	r3, [r0, #0]
    if (serial_dev->peek() != 0x42) {
 23efae0:	d002      	beq.n	23efae8 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xd6>
      serial_dev->read();
 23efae2:	695b      	ldr	r3, [r3, #20]
 23efae4:	4798      	blx	r3
 23efae6:	e799      	b.n	23efa1c <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
    if (serial_dev->available() < 32) {
 23efae8:	691b      	ldr	r3, [r3, #16]
 23efaea:	4798      	blx	r3
 23efaec:	281f      	cmp	r0, #31
 23efaee:	dd95      	ble.n	23efa1c <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
    serial_dev->readBytes((char *)buffer, 32);
 23efaf0:	2220      	movs	r2, #32
 23efaf2:	6860      	ldr	r0, [r4, #4]
 23efaf4:	eb0d 0102 	add.w	r1, sp, r2
 23efaf8:	6803      	ldr	r3, [r0, #0]
 23efafa:	6a1b      	ldr	r3, [r3, #32]
 23efafc:	4798      	blx	r3
 23efafe:	e79b      	b.n	23efa38 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x26>

023efb00 <_ZL4crc8PKhi.constprop.0>:

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);

  for (int j = len; j; --j) {
    crc ^= *data++;
 23efb00:	7803      	ldrb	r3, [r0, #0]
 23efb02:	2208      	movs	r2, #8
 23efb04:	43db      	mvns	r3, r3
 23efb06:	b2db      	uxtb	r3, r3

    for (int i = 8; i; --i) {
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
 23efb08:	f013 0f80 	tst.w	r3, #128	; 0x80
 23efb0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23efb10:	d001      	beq.n	23efb16 <_ZL4crc8PKhi.constprop.0+0x16>
 23efb12:	f083 0331 	eor.w	r3, r3, #49	; 0x31
    for (int i = 8; i; --i) {
 23efb16:	3a01      	subs	r2, #1
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
 23efb18:	b2db      	uxtb	r3, r3
    for (int i = 8; i; --i) {
 23efb1a:	d1f5      	bne.n	23efb08 <_ZL4crc8PKhi.constprop.0+0x8>
    crc ^= *data++;
 23efb1c:	7840      	ldrb	r0, [r0, #1]
 23efb1e:	4058      	eors	r0, r3
 23efb20:	2308      	movs	r3, #8
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
 23efb22:	f010 0f80 	tst.w	r0, #128	; 0x80
 23efb26:	ea4f 0040 	mov.w	r0, r0, lsl #1
 23efb2a:	d001      	beq.n	23efb30 <_ZL4crc8PKhi.constprop.0+0x30>
 23efb2c:	f080 0031 	eor.w	r0, r0, #49	; 0x31
    for (int i = 8; i; --i) {
 23efb30:	3b01      	subs	r3, #1
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
 23efb32:	b2c0      	uxtb	r0, r0
    for (int i = 8; i; --i) {
 23efb34:	d1f5      	bne.n	23efb22 <_ZL4crc8PKhi.constprop.0+0x22>
 23efb36:	4770      	bx	lr

023efb38 <_ZN14Adafruit_SHT31C1EP7TwoWire>:
Adafruit_SHT31::Adafruit_SHT31(TwoWire *theWire) {
 23efb38:	2200      	movs	r2, #0
  _wire = theWire;
 23efb3a:	e9c0 1202 	strd	r1, r2, [r0, #8]
  humidity = NAN;
 23efb3e:	4a02      	ldr	r2, [pc, #8]	; (23efb48 <_ZN14Adafruit_SHT31C1EP7TwoWire+0x10>)
 23efb40:	6002      	str	r2, [r0, #0]
  temp = NAN;
 23efb42:	6042      	str	r2, [r0, #4]
}
 23efb44:	4770      	bx	lr
 23efb46:	bf00      	nop
 23efb48:	7fc00000 	.word	0x7fc00000

023efb4c <_ZN14Adafruit_SHT31D1Ev>:
Adafruit_SHT31::~Adafruit_SHT31() {
 23efb4c:	b510      	push	{r4, lr}
 23efb4e:	4604      	mov	r4, r0
  if (i2c_dev) {
 23efb50:	68c0      	ldr	r0, [r0, #12]
 23efb52:	b110      	cbz	r0, 23efb5a <_ZN14Adafruit_SHT31D1Ev+0xe>
    delete i2c_dev; // remove old interface
 23efb54:	2110      	movs	r1, #16
 23efb56:	f7f3 fbd4 	bl	23e3302 <_ZdlPvj>
}
 23efb5a:	4620      	mov	r0, r4
 23efb5c:	bd10      	pop	{r4, pc}

023efb5e <_ZN14Adafruit_SHT3112writeCommandEt>:
/**
 * Internal function to perform and I2C write.
 *
 * @param cmd   The 16-bit command ID to send.
 */
bool Adafruit_SHT31::writeCommand(uint16_t command) {
 23efb5e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t cmd[2];

  cmd[0] = command >> 8;
 23efb60:	0a0b      	lsrs	r3, r1, #8
 23efb62:	f88d 300c 	strb.w	r3, [sp, #12]
  cmd[1] = command & 0xFF;

  return i2c_dev->write(cmd, 2);
 23efb66:	2300      	movs	r3, #0
 23efb68:	e9cd 3300 	strd	r3, r3, [sp]
  cmd[1] = command & 0xFF;
 23efb6c:	f88d 100d 	strb.w	r1, [sp, #13]
  return i2c_dev->write(cmd, 2);
 23efb70:	2301      	movs	r3, #1
 23efb72:	2202      	movs	r2, #2
 23efb74:	a903      	add	r1, sp, #12
 23efb76:	68c0      	ldr	r0, [r0, #12]
 23efb78:	f7fe fe1a 	bl	23ee7b0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
 23efb7c:	b005      	add	sp, #20
 23efb7e:	f85d fb04 	ldr.w	pc, [sp], #4

023efb82 <_ZN14Adafruit_SHT3110readStatusEv>:
uint16_t Adafruit_SHT31::readStatus(void) {
 23efb82:	b513      	push	{r0, r1, r4, lr}
 23efb84:	4604      	mov	r4, r0
  writeCommand(SHT31_READSTATUS);
 23efb86:	f24f 312d 	movw	r1, #62253	; 0xf32d
 23efb8a:	f7ff ffe8 	bl	23efb5e <_ZN14Adafruit_SHT3112writeCommandEt>
  i2c_dev->read(data, 3);
 23efb8e:	2301      	movs	r3, #1
 23efb90:	2203      	movs	r2, #3
 23efb92:	68e0      	ldr	r0, [r4, #12]
 23efb94:	a901      	add	r1, sp, #4
 23efb96:	f7fe fe3b 	bl	23ee810 <_ZN18Adafruit_I2CDevice4readEPhjb>
  return stat;
 23efb9a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 23efb9e:	ba40      	rev16	r0, r0
}
 23efba0:	b280      	uxth	r0, r0
 23efba2:	b002      	add	sp, #8
 23efba4:	bd10      	pop	{r4, pc}

023efba6 <_ZN14Adafruit_SHT315resetEv>:
void Adafruit_SHT31::reset(void) {
 23efba6:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
 23efba8:	f243 01a2 	movw	r1, #12450	; 0x30a2
 23efbac:	f7ff ffd7 	bl	23efb5e <_ZN14Adafruit_SHT3112writeCommandEt>
}
 23efbb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(10);
 23efbb4:	200a      	movs	r0, #10
 23efbb6:	f007 bbcf 	b.w	23f7358 <delay>

023efbba <_ZN14Adafruit_SHT315beginEh>:
bool Adafruit_SHT31::begin(uint8_t i2caddr) {
 23efbba:	b570      	push	{r4, r5, r6, lr}
 23efbbc:	4604      	mov	r4, r0
  if (i2c_dev) {
 23efbbe:	68c0      	ldr	r0, [r0, #12]
bool Adafruit_SHT31::begin(uint8_t i2caddr) {
 23efbc0:	460e      	mov	r6, r1
  if (i2c_dev) {
 23efbc2:	b110      	cbz	r0, 23efbca <_ZN14Adafruit_SHT315beginEh+0x10>
    delete i2c_dev; // remove old interface
 23efbc4:	2110      	movs	r1, #16
 23efbc6:	f7f3 fb9c 	bl	23e3302 <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(i2caddr, _wire);
 23efbca:	2010      	movs	r0, #16
 23efbcc:	f7f3 fb95 	bl	23e32fa <_Znwj>
 23efbd0:	4605      	mov	r5, r0
 23efbd2:	b118      	cbz	r0, 23efbdc <_ZN14Adafruit_SHT315beginEh+0x22>
 23efbd4:	4631      	mov	r1, r6
 23efbd6:	68a2      	ldr	r2, [r4, #8]
 23efbd8:	f7fe fdbf 	bl	23ee75a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin()) {
 23efbdc:	2101      	movs	r1, #1
 23efbde:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(i2caddr, _wire);
 23efbe0:	60e5      	str	r5, [r4, #12]
  if (!i2c_dev->begin()) {
 23efbe2:	f7fe fdd6 	bl	23ee792 <_ZN18Adafruit_I2CDevice5beginEb>
 23efbe6:	b150      	cbz	r0, 23efbfe <_ZN14Adafruit_SHT315beginEh+0x44>
  reset();
 23efbe8:	4620      	mov	r0, r4
 23efbea:	f7ff ffdc 	bl	23efba6 <_ZN14Adafruit_SHT315resetEv>
  return readStatus() != 0xFFFF;
 23efbee:	4620      	mov	r0, r4
 23efbf0:	f7ff ffc7 	bl	23efb82 <_ZN14Adafruit_SHT3110readStatusEv>
 23efbf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23efbf8:	1ac0      	subs	r0, r0, r3
 23efbfa:	bf18      	it	ne
 23efbfc:	2001      	movne	r0, #1
}
 23efbfe:	bd70      	pop	{r4, r5, r6, pc}

023efc00 <_ZN14Adafruit_SHT3111readTempHumEv>:
bool Adafruit_SHT31::readTempHum(void) {
 23efc00:	b513      	push	{r0, r1, r4, lr}
 23efc02:	4604      	mov	r4, r0
  writeCommand(SHT31_MEAS_HIGHREP);
 23efc04:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 23efc08:	f7ff ffa9 	bl	23efb5e <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(20);
 23efc0c:	2014      	movs	r0, #20
 23efc0e:	f007 fba3 	bl	23f7358 <delay>
  i2c_dev->read(readbuffer, sizeof(readbuffer));
 23efc12:	2301      	movs	r3, #1
 23efc14:	2206      	movs	r2, #6
 23efc16:	4669      	mov	r1, sp
 23efc18:	68e0      	ldr	r0, [r4, #12]
 23efc1a:	f7fe fdf9 	bl	23ee810 <_ZN18Adafruit_I2CDevice4readEPhjb>
  if (readbuffer[2] != crc8(readbuffer, 2) ||
 23efc1e:	4668      	mov	r0, sp
 23efc20:	f7ff ff6e 	bl	23efb00 <_ZL4crc8PKhi.constprop.0>
 23efc24:	f89d 1002 	ldrb.w	r1, [sp, #2]
 23efc28:	4281      	cmp	r1, r0
 23efc2a:	d12f      	bne.n	23efc8c <_ZN14Adafruit_SHT3111readTempHumEv+0x8c>
      readbuffer[5] != crc8(readbuffer + 3, 2))
 23efc2c:	f10d 0003 	add.w	r0, sp, #3
 23efc30:	f7ff ff66 	bl	23efb00 <_ZL4crc8PKhi.constprop.0>
 23efc34:	f89d 1005 	ldrb.w	r1, [sp, #5]
  if (readbuffer[2] != crc8(readbuffer, 2) ||
 23efc38:	4281      	cmp	r1, r0
 23efc3a:	d127      	bne.n	23efc8c <_ZN14Adafruit_SHT3111readTempHumEv+0x8c>
  stemp = ((4375 * stemp) >> 14) - 4500;
 23efc3c:	f241 1217 	movw	r2, #4375	; 0x1117
  int32_t stemp = (int32_t)(((uint32_t)readbuffer[0] << 8) | readbuffer[1]);
 23efc40:	f8bd 3000 	ldrh.w	r3, [sp]
  temp = (float)stemp / 100.0f;
 23efc44:	ed9f 7a12 	vldr	s14, [pc, #72]	; 23efc90 <_ZN14Adafruit_SHT3111readTempHumEv+0x90>
  int32_t stemp = (int32_t)(((uint32_t)readbuffer[0] << 8) | readbuffer[1]);
 23efc48:	ba5b      	rev16	r3, r3
 23efc4a:	b29b      	uxth	r3, r3
  stemp = ((4375 * stemp) >> 14) - 4500;
 23efc4c:	4353      	muls	r3, r2
 23efc4e:	139b      	asrs	r3, r3, #14
 23efc50:	f5a3 538c 	sub.w	r3, r3, #4480	; 0x1180
 23efc54:	3b14      	subs	r3, #20
  temp = (float)stemp / 100.0f;
 23efc56:	ee07 3a90 	vmov	s15, r3
  shum = (625 * shum) >> 12;
 23efc5a:	f240 2271 	movw	r2, #625	; 0x271
  temp = (float)stemp / 100.0f;
 23efc5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  shum = (625 * shum) >> 12;
 23efc62:	f8bd 3003 	ldrh.w	r3, [sp, #3]
  temp = (float)stemp / 100.0f;
 23efc66:	eec7 6a87 	vdiv.f32	s13, s15, s14
  shum = (625 * shum) >> 12;
 23efc6a:	ba5b      	rev16	r3, r3
 23efc6c:	b29b      	uxth	r3, r3
 23efc6e:	4353      	muls	r3, r2
 23efc70:	0b1b      	lsrs	r3, r3, #12
  humidity = (float)shum / 100.0f;
 23efc72:	ee07 3a90 	vmov	s15, r3
 23efc76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  temp = (float)stemp / 100.0f;
 23efc7a:	edc4 6a01 	vstr	s13, [r4, #4]
  humidity = (float)shum / 100.0f;
 23efc7e:	eec7 6a87 	vdiv.f32	s13, s15, s14
  return true;
 23efc82:	2001      	movs	r0, #1
  humidity = (float)shum / 100.0f;
 23efc84:	edc4 6a00 	vstr	s13, [r4]
}
 23efc88:	b002      	add	sp, #8
 23efc8a:	bd10      	pop	{r4, pc}
    return false;
 23efc8c:	2000      	movs	r0, #0
 23efc8e:	e7fb      	b.n	23efc88 <_ZN14Adafruit_SHT3111readTempHumEv+0x88>
 23efc90:	42c80000 	.word	0x42c80000

023efc94 <_ZN14Adafruit_SHT3115readTemperatureEv>:
float Adafruit_SHT31::readTemperature(void) {
 23efc94:	b510      	push	{r4, lr}
 23efc96:	4604      	mov	r4, r0
  if (!readTempHum())
 23efc98:	f7ff ffb2 	bl	23efc00 <_ZN14Adafruit_SHT3111readTempHumEv>
 23efc9c:	b110      	cbz	r0, 23efca4 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>
  return temp;
 23efc9e:	ed94 0a01 	vldr	s0, [r4, #4]
}
 23efca2:	bd10      	pop	{r4, pc}
    return NAN;
 23efca4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 23efcac <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>
 23efca8:	e7fb      	b.n	23efca2 <_ZN14Adafruit_SHT3115readTemperatureEv+0xe>
 23efcaa:	bf00      	nop
 23efcac:	7fc00000 	.word	0x7fc00000

023efcb0 <_ZN14Adafruit_SHT3112readHumidityEv>:
float Adafruit_SHT31::readHumidity(void) {
 23efcb0:	b510      	push	{r4, lr}
 23efcb2:	4604      	mov	r4, r0
  if (!readTempHum())
 23efcb4:	f7ff ffa4 	bl	23efc00 <_ZN14Adafruit_SHT3111readTempHumEv>
 23efcb8:	b110      	cbz	r0, 23efcc0 <_ZN14Adafruit_SHT3112readHumidityEv+0x10>
  return humidity;
 23efcba:	ed94 0a00 	vldr	s0, [r4]
}
 23efcbe:	bd10      	pop	{r4, pc}
    return NAN;
 23efcc0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 23efcc8 <_ZN14Adafruit_SHT3112readHumidityEv+0x18>
 23efcc4:	e7fb      	b.n	23efcbe <_ZN14Adafruit_SHT3112readHumidityEv+0xe>
 23efcc6:	bf00      	nop
 23efcc8:	7fc00000 	.word	0x7fc00000

023efccc <_ZN15Adafruit_SI1145C1Ev>:
#include "Adafruit_SI1145.h"
/**
 * @brief Construct a new Adafruit_SI1145::Adafruit_SI1145 object
 *
 */
Adafruit_SI1145::Adafruit_SI1145() : m_pBus(&Wire), _addr(SI1145_ADDR) {}
 23efccc:	b510      	push	{r4, lr}
 23efcce:	4604      	mov	r4, r0
 23efcd0:	f009 fda8 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23efcd4:	2360      	movs	r3, #96	; 0x60
 23efcd6:	6020      	str	r0, [r4, #0]
 23efcd8:	7123      	strb	r3, [r4, #4]
 23efcda:	4620      	mov	r0, r4
 23efcdc:	bd10      	pop	{r4, pc}

023efcde <_ZN15Adafruit_SI11455read8Eh>:
  return read8(SI1145_REG_PARAMRD);
}

/*********************************************************************/

uint8_t Adafruit_SI1145::read8(uint8_t reg) {
 23efcde:	b538      	push	{r3, r4, r5, lr}
 23efce0:	4604      	mov	r4, r0
 23efce2:	460d      	mov	r5, r1
  m_pBus->beginTransmission(_addr);
 23efce4:	7901      	ldrb	r1, [r0, #4]
 23efce6:	6800      	ldr	r0, [r0, #0]
 23efce8:	f008 f8fc 	bl	23f7ee4 <_ZN7TwoWire17beginTransmissionEh>
  m_pBus->write((uint8_t)reg);
 23efcec:	6820      	ldr	r0, [r4, #0]
 23efcee:	4629      	mov	r1, r5
 23efcf0:	6803      	ldr	r3, [r0, #0]
 23efcf2:	689b      	ldr	r3, [r3, #8]
 23efcf4:	4798      	blx	r3
  m_pBus->endTransmission();
 23efcf6:	6820      	ldr	r0, [r4, #0]
 23efcf8:	f008 f8ff 	bl	23f7efa <_ZN7TwoWire15endTransmissionEv>

  m_pBus->requestFrom((uint8_t)_addr, (uint8_t)1);
 23efcfc:	2201      	movs	r2, #1
 23efcfe:	7921      	ldrb	r1, [r4, #4]
 23efd00:	6820      	ldr	r0, [r4, #0]
 23efd02:	f008 f8ec 	bl	23f7ede <_ZN7TwoWire11requestFromEhj>
  return m_pBus->read();
 23efd06:	6820      	ldr	r0, [r4, #0]
 23efd08:	6803      	ldr	r3, [r0, #0]
 23efd0a:	695b      	ldr	r3, [r3, #20]
 23efd0c:	4798      	blx	r3
}
 23efd0e:	b2c0      	uxtb	r0, r0
 23efd10:	bd38      	pop	{r3, r4, r5, pc}

023efd12 <_ZN15Adafruit_SI11456read16Eh>:

uint16_t Adafruit_SI1145::read16(uint8_t a) {
 23efd12:	b538      	push	{r3, r4, r5, lr}
 23efd14:	4604      	mov	r4, r0
 23efd16:	460d      	mov	r5, r1
  uint16_t ret;

  m_pBus->beginTransmission(_addr); // start transmission to device
 23efd18:	7901      	ldrb	r1, [r0, #4]
 23efd1a:	6800      	ldr	r0, [r0, #0]
 23efd1c:	f008 f8e2 	bl	23f7ee4 <_ZN7TwoWire17beginTransmissionEh>
  m_pBus->write(a);                 // sends register address to read from
 23efd20:	6820      	ldr	r0, [r4, #0]
 23efd22:	4629      	mov	r1, r5
 23efd24:	6803      	ldr	r3, [r0, #0]
 23efd26:	689b      	ldr	r3, [r3, #8]
 23efd28:	4798      	blx	r3
  m_pBus->endTransmission();        // end transmission
 23efd2a:	6820      	ldr	r0, [r4, #0]
 23efd2c:	f008 f8e5 	bl	23f7efa <_ZN7TwoWire15endTransmissionEv>

  m_pBus->requestFrom(_addr, (uint8_t)2); // send data n-bytes read
 23efd30:	2202      	movs	r2, #2
 23efd32:	7921      	ldrb	r1, [r4, #4]
 23efd34:	6820      	ldr	r0, [r4, #0]
 23efd36:	f008 f8d2 	bl	23f7ede <_ZN7TwoWire11requestFromEhj>
  ret = m_pBus->read();                   // receive DATA
 23efd3a:	6820      	ldr	r0, [r4, #0]
 23efd3c:	6803      	ldr	r3, [r0, #0]
 23efd3e:	695b      	ldr	r3, [r3, #20]
 23efd40:	4798      	blx	r3
 23efd42:	4605      	mov	r5, r0
  ret |= (uint16_t)m_pBus->read() << 8;   // receive DATA
 23efd44:	6820      	ldr	r0, [r4, #0]
 23efd46:	6803      	ldr	r3, [r0, #0]
 23efd48:	695b      	ldr	r3, [r3, #20]
 23efd4a:	4798      	blx	r3
 23efd4c:	ea45 2000 	orr.w	r0, r5, r0, lsl #8

  return ret;
}
 23efd50:	b280      	uxth	r0, r0
 23efd52:	bd38      	pop	{r3, r4, r5, pc}

023efd54 <_ZN15Adafruit_SI11456readUVEv>:
uint16_t Adafruit_SI1145::readUV(void) { return read16(0x2C); }
 23efd54:	212c      	movs	r1, #44	; 0x2c
 23efd56:	f7ff bfdc 	b.w	23efd12 <_ZN15Adafruit_SI11456read16Eh>

023efd5a <_ZN15Adafruit_SI114511readVisibleEv>:
uint16_t Adafruit_SI1145::readVisible(void) { return read16(0x22); }
 23efd5a:	2122      	movs	r1, #34	; 0x22
 23efd5c:	f7ff bfd9 	b.w	23efd12 <_ZN15Adafruit_SI11456read16Eh>

023efd60 <_ZN15Adafruit_SI11456readIREv>:
uint16_t Adafruit_SI1145::readIR(void) { return read16(0x24); }
 23efd60:	2124      	movs	r1, #36	; 0x24
 23efd62:	f7ff bfd6 	b.w	23efd12 <_ZN15Adafruit_SI11456read16Eh>

023efd66 <_ZN15Adafruit_SI11456write8Ehh>:

void Adafruit_SI1145::write8(uint8_t reg, uint8_t val) {
 23efd66:	b570      	push	{r4, r5, r6, lr}
 23efd68:	4604      	mov	r4, r0
 23efd6a:	460e      	mov	r6, r1
 23efd6c:	4615      	mov	r5, r2

  m_pBus->beginTransmission(_addr); // start transmission to device
 23efd6e:	7901      	ldrb	r1, [r0, #4]
 23efd70:	6800      	ldr	r0, [r0, #0]
 23efd72:	f008 f8b7 	bl	23f7ee4 <_ZN7TwoWire17beginTransmissionEh>
  m_pBus->write(reg);               // sends register address to write
 23efd76:	6820      	ldr	r0, [r4, #0]
 23efd78:	4631      	mov	r1, r6
 23efd7a:	6803      	ldr	r3, [r0, #0]
 23efd7c:	689b      	ldr	r3, [r3, #8]
 23efd7e:	4798      	blx	r3
  m_pBus->write(val);               // sends value
 23efd80:	6820      	ldr	r0, [r4, #0]
 23efd82:	4629      	mov	r1, r5
 23efd84:	6803      	ldr	r3, [r0, #0]
 23efd86:	689b      	ldr	r3, [r3, #8]
 23efd88:	4798      	blx	r3
  m_pBus->endTransmission();        // end transmission
 23efd8a:	6820      	ldr	r0, [r4, #0]
}
 23efd8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  m_pBus->endTransmission();        // end transmission
 23efd90:	f008 b8b3 	b.w	23f7efa <_ZN7TwoWire15endTransmissionEv>

023efd94 <_ZN15Adafruit_SI11455resetEv>:
void Adafruit_SI1145::reset() {
 23efd94:	b510      	push	{r4, lr}
 23efd96:	4604      	mov	r4, r0
  write8(SI1145_REG_MEASRATE0, 0);
 23efd98:	2200      	movs	r2, #0
 23efd9a:	2108      	movs	r1, #8
 23efd9c:	f7ff ffe3 	bl	23efd66 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_MEASRATE1, 0);
 23efda0:	4620      	mov	r0, r4
 23efda2:	2200      	movs	r2, #0
 23efda4:	2109      	movs	r1, #9
 23efda6:	f7ff ffde 	bl	23efd66 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQEN, 0);
 23efdaa:	4620      	mov	r0, r4
 23efdac:	2200      	movs	r2, #0
 23efdae:	2104      	movs	r1, #4
 23efdb0:	f7ff ffd9 	bl	23efd66 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQMODE1, 0);
 23efdb4:	4620      	mov	r0, r4
 23efdb6:	2200      	movs	r2, #0
 23efdb8:	2105      	movs	r1, #5
 23efdba:	f7ff ffd4 	bl	23efd66 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQMODE2, 0);
 23efdbe:	4620      	mov	r0, r4
 23efdc0:	2200      	movs	r2, #0
 23efdc2:	2106      	movs	r1, #6
 23efdc4:	f7ff ffcf 	bl	23efd66 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_INTCFG, 0);
 23efdc8:	4620      	mov	r0, r4
 23efdca:	2200      	movs	r2, #0
 23efdcc:	2103      	movs	r1, #3
 23efdce:	f7ff ffca 	bl	23efd66 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQSTAT, 0xFF);
 23efdd2:	4620      	mov	r0, r4
 23efdd4:	22ff      	movs	r2, #255	; 0xff
 23efdd6:	2121      	movs	r1, #33	; 0x21
 23efdd8:	f7ff ffc5 	bl	23efd66 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_COMMAND, SI1145_RESET);
 23efddc:	2201      	movs	r2, #1
 23efdde:	2118      	movs	r1, #24
 23efde0:	4620      	mov	r0, r4
 23efde2:	f7ff ffc0 	bl	23efd66 <_ZN15Adafruit_SI11456write8Ehh>
  delay(10);
 23efde6:	200a      	movs	r0, #10
 23efde8:	f007 fab6 	bl	23f7358 <delay>
  write8(SI1145_REG_HWKEY, 0x17);
 23efdec:	4620      	mov	r0, r4
 23efdee:	2217      	movs	r2, #23
 23efdf0:	2107      	movs	r1, #7
 23efdf2:	f7ff ffb8 	bl	23efd66 <_ZN15Adafruit_SI11456write8Ehh>
}
 23efdf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(10);
 23efdfa:	200a      	movs	r0, #10
 23efdfc:	f007 baac 	b.w	23f7358 <delay>

023efe00 <_ZN15Adafruit_SI114510writeParamEhh>:
uint8_t Adafruit_SI1145::writeParam(uint8_t p, uint8_t v) {
 23efe00:	b538      	push	{r3, r4, r5, lr}
 23efe02:	4604      	mov	r4, r0
 23efe04:	460d      	mov	r5, r1
  write8(SI1145_REG_PARAMWR, v);
 23efe06:	2117      	movs	r1, #23
 23efe08:	f7ff ffad 	bl	23efd66 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_COMMAND, p | SI1145_PARAM_SET);
 23efe0c:	4620      	mov	r0, r4
 23efe0e:	2118      	movs	r1, #24
 23efe10:	f045 02a0 	orr.w	r2, r5, #160	; 0xa0
 23efe14:	f7ff ffa7 	bl	23efd66 <_ZN15Adafruit_SI11456write8Ehh>
  return read8(SI1145_REG_PARAMRD);
 23efe18:	4620      	mov	r0, r4
}
 23efe1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return read8(SI1145_REG_PARAMRD);
 23efe1e:	212e      	movs	r1, #46	; 0x2e
 23efe20:	f7ff bf5d 	b.w	23efcde <_ZN15Adafruit_SI11455read8Eh>

023efe24 <_ZN15Adafruit_SI11455beginEhP7TwoWire>:
boolean Adafruit_SI1145::begin(uint8_t addr, TwoWire *pBus) {
 23efe24:	b510      	push	{r4, lr}
 23efe26:	4604      	mov	r4, r0
 23efe28:	4610      	mov	r0, r2
  _addr = addr;
 23efe2a:	7121      	strb	r1, [r4, #4]
  m_pBus = pBus;
 23efe2c:	6022      	str	r2, [r4, #0]
  m_pBus->begin();
 23efe2e:	f008 f82f 	bl	23f7e90 <_ZN7TwoWire5beginEv>
  uint8_t id = read8(SI1145_REG_PARTID);
 23efe32:	2100      	movs	r1, #0
 23efe34:	4620      	mov	r0, r4
 23efe36:	f7ff ff52 	bl	23efcde <_ZN15Adafruit_SI11455read8Eh>
  if (id != 0x45)
 23efe3a:	2845      	cmp	r0, #69	; 0x45
 23efe3c:	d172      	bne.n	23eff24 <_ZN15Adafruit_SI11455beginEhP7TwoWire+0x100>
  reset();
 23efe3e:	4620      	mov	r0, r4
 23efe40:	f7ff ffa8 	bl	23efd94 <_ZN15Adafruit_SI11455resetEv>
  write8(SI1145_REG_UCOEFF0, 0x29);
 23efe44:	2229      	movs	r2, #41	; 0x29
 23efe46:	2113      	movs	r1, #19
 23efe48:	4620      	mov	r0, r4
 23efe4a:	f7ff ff8c 	bl	23efd66 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF1, 0x89);
 23efe4e:	2289      	movs	r2, #137	; 0x89
 23efe50:	2114      	movs	r1, #20
 23efe52:	4620      	mov	r0, r4
 23efe54:	f7ff ff87 	bl	23efd66 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF2, 0x02);
 23efe58:	2202      	movs	r2, #2
 23efe5a:	2115      	movs	r1, #21
 23efe5c:	4620      	mov	r0, r4
 23efe5e:	f7ff ff82 	bl	23efd66 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF3, 0x00);
 23efe62:	2200      	movs	r2, #0
 23efe64:	2116      	movs	r1, #22
 23efe66:	4620      	mov	r0, r4
 23efe68:	f7ff ff7d 	bl	23efd66 <_ZN15Adafruit_SI11456write8Ehh>
  writeParam(SI1145_PARAM_CHLIST,
 23efe6c:	22b1      	movs	r2, #177	; 0xb1
 23efe6e:	2101      	movs	r1, #1
 23efe70:	4620      	mov	r0, r4
 23efe72:	f7ff ffc5 	bl	23efe00 <_ZN15Adafruit_SI114510writeParamEhh>
  write8(SI1145_REG_INTCFG, SI1145_REG_INTCFG_INTOE);
 23efe76:	2201      	movs	r2, #1
 23efe78:	2103      	movs	r1, #3
 23efe7a:	4620      	mov	r0, r4
 23efe7c:	f7ff ff73 	bl	23efd66 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQEN, SI1145_REG_IRQEN_ALSEVERYSAMPLE);
 23efe80:	2201      	movs	r2, #1
 23efe82:	2104      	movs	r1, #4
 23efe84:	4620      	mov	r0, r4
 23efe86:	f7ff ff6e 	bl	23efd66 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_PSLED21, 0x03); // 20mA for LED 1 only
 23efe8a:	2203      	movs	r2, #3
 23efe8c:	210f      	movs	r1, #15
 23efe8e:	4620      	mov	r0, r4
 23efe90:	f7ff ff69 	bl	23efd66 <_ZN15Adafruit_SI11456write8Ehh>
  writeParam(SI1145_PARAM_PS1ADCMUX, SI1145_PARAM_ADCMUX_LARGEIR);
 23efe94:	2203      	movs	r2, #3
 23efe96:	2107      	movs	r1, #7
 23efe98:	4620      	mov	r0, r4
 23efe9a:	f7ff ffb1 	bl	23efe00 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_PSLED12SEL, SI1145_PARAM_PSLED12SEL_PS1LED1);
 23efe9e:	2201      	movs	r2, #1
 23efea0:	2102      	movs	r1, #2
 23efea2:	4620      	mov	r0, r4
 23efea4:	f7ff ffac 	bl	23efe00 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_PSADCGAIN, 0);
 23efea8:	2200      	movs	r2, #0
 23efeaa:	210b      	movs	r1, #11
 23efeac:	4620      	mov	r0, r4
 23efeae:	f7ff ffa7 	bl	23efe00 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_PSADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
 23efeb2:	2270      	movs	r2, #112	; 0x70
 23efeb4:	210a      	movs	r1, #10
 23efeb6:	4620      	mov	r0, r4
 23efeb8:	f7ff ffa2 	bl	23efe00 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_PSADCMISC,
 23efebc:	2224      	movs	r2, #36	; 0x24
 23efebe:	210c      	movs	r1, #12
 23efec0:	4620      	mov	r0, r4
 23efec2:	f7ff ff9d 	bl	23efe00 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSIRADCMUX, SI1145_PARAM_ADCMUX_SMALLIR);
 23efec6:	2200      	movs	r2, #0
 23efec8:	210e      	movs	r1, #14
 23efeca:	4620      	mov	r0, r4
 23efecc:	f7ff ff98 	bl	23efe00 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSIRADCGAIN, 0);
 23efed0:	2200      	movs	r2, #0
 23efed2:	211e      	movs	r1, #30
 23efed4:	4620      	mov	r0, r4
 23efed6:	f7ff ff93 	bl	23efe00 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSIRADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
 23efeda:	2270      	movs	r2, #112	; 0x70
 23efedc:	211d      	movs	r1, #29
 23efede:	4620      	mov	r0, r4
 23efee0:	f7ff ff8e 	bl	23efe00 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSIRADCMISC, SI1145_PARAM_ALSIRADCMISC_RANGE);
 23efee4:	2220      	movs	r2, #32
 23efee6:	211f      	movs	r1, #31
 23efee8:	4620      	mov	r0, r4
 23efeea:	f7ff ff89 	bl	23efe00 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSVISADCGAIN, 0);
 23efeee:	2200      	movs	r2, #0
 23efef0:	2111      	movs	r1, #17
 23efef2:	4620      	mov	r0, r4
 23efef4:	f7ff ff84 	bl	23efe00 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSVISADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
 23efef8:	2270      	movs	r2, #112	; 0x70
 23efefa:	2110      	movs	r1, #16
 23efefc:	4620      	mov	r0, r4
 23efefe:	f7ff ff7f 	bl	23efe00 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSVISADCMISC, SI1145_PARAM_ALSVISADCMISC_VISRANGE);
 23eff02:	2220      	movs	r2, #32
 23eff04:	2112      	movs	r1, #18
 23eff06:	4620      	mov	r0, r4
 23eff08:	f7ff ff7a 	bl	23efe00 <_ZN15Adafruit_SI114510writeParamEhh>
  write8(SI1145_REG_MEASRATE0, 0xFF); // 255 * 31.25uS = 8ms
 23eff0c:	22ff      	movs	r2, #255	; 0xff
 23eff0e:	2108      	movs	r1, #8
 23eff10:	4620      	mov	r0, r4
 23eff12:	f7ff ff28 	bl	23efd66 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_COMMAND, SI1145_PSALS_AUTO);
 23eff16:	4620      	mov	r0, r4
 23eff18:	220f      	movs	r2, #15
 23eff1a:	2118      	movs	r1, #24
 23eff1c:	f7ff ff23 	bl	23efd66 <_ZN15Adafruit_SI11456write8Ehh>
 23eff20:	2001      	movs	r0, #1
}
 23eff22:	bd10      	pop	{r4, pc}
    return false; // look for SI1145
 23eff24:	2000      	movs	r0, #0
 23eff26:	e7fc      	b.n	23eff22 <_ZN15Adafruit_SI11455beginEhP7TwoWire+0xfe>

023eff28 <_ZN15Adafruit_SI11455beginEP7TwoWire>:
boolean Adafruit_SI1145::begin(TwoWire *pBus) {
 23eff28:	460a      	mov	r2, r1
  return begin(SI1145_ADDR, pBus);
 23eff2a:	2160      	movs	r1, #96	; 0x60
 23eff2c:	f7ff bf7a 	b.w	23efe24 <_ZN15Adafruit_SI11455beginEhP7TwoWire>

023eff30 <_ZN16Adafruit_SSD1306D1Ev>:
      rstPin(rst_pin) {}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
 23eff30:	b510      	push	{r4, lr}
 23eff32:	4b04      	ldr	r3, [pc, #16]	; (23eff44 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
 23eff34:	4604      	mov	r4, r0
 23eff36:	6003      	str	r3, [r0, #0]
  if (buffer) {
 23eff38:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 23eff3a:	b108      	cbz	r0, 23eff40 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
 23eff3c:	f007 f910 	bl	23f7160 <free>
    buffer = NULL;
  }
}
 23eff40:	4620      	mov	r0, r4
 23eff42:	bd10      	pop	{r4, pc}
 23eff44:	023ff140 	.word	0x023ff140

023eff48 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
 23eff48:	b510      	push	{r4, lr}
 23eff4a:	4604      	mov	r4, r0
}
 23eff4c:	f7ff fff0 	bl	23eff30 <_ZN16Adafruit_SSD1306D1Ev>
 23eff50:	4620      	mov	r0, r4
 23eff52:	2174      	movs	r1, #116	; 0x74
 23eff54:	f7f3 f9d5 	bl	23e3302 <_ZdlPvj>
 23eff58:	4620      	mov	r0, r4
 23eff5a:	bd10      	pop	{r4, pc}

023eff5c <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 23eff5c:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 23eff5e:	b510      	push	{r4, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 23eff60:	db4b      	blt.n	23efffa <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
 23eff62:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 23eff66:	428c      	cmp	r4, r1
 23eff68:	dd47      	ble.n	23efffa <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
 23eff6a:	2a00      	cmp	r2, #0
 23eff6c:	db45      	blt.n	23efffa <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
 23eff6e:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 23eff72:	4294      	cmp	r4, r2
 23eff74:	dd41      	ble.n	23efffa <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
 23eff76:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
 23eff78:	2c02      	cmp	r4, #2
 23eff7a:	d01f      	beq.n	23effbc <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
 23eff7c:	2c03      	cmp	r4, #3
 23eff7e:	d026      	beq.n	23effce <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
 23eff80:	2c01      	cmp	r4, #1
 23eff82:	d104      	bne.n	23eff8e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
    case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
 23eff84:	43d2      	mvns	r2, r2
 23eff86:	8904      	ldrh	r4, [r0, #8]
 23eff88:	4414      	add	r4, r2
      break;
 23eff8a:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
 23eff8c:	b221      	sxth	r1, r4
    case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch (color) {
 23eff8e:	2b01      	cmp	r3, #1
 23eff90:	d023      	beq.n	23effda <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
 23eff92:	2b02      	cmp	r3, #2
 23eff94:	d032      	beq.n	23efffc <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
 23eff96:	bb83      	cbnz	r3, 23efffa <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    case SSD1306_WHITE:
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
      break;
    case SSD1306_BLACK:
      buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
 23eff98:	4613      	mov	r3, r2
 23eff9a:	2a00      	cmp	r2, #0
 23eff9c:	8904      	ldrh	r4, [r0, #8]
 23eff9e:	bfb8      	it	lt
 23effa0:	1dd3      	addlt	r3, r2, #7
 23effa2:	10db      	asrs	r3, r3, #3
 23effa4:	fb13 1104 	smlabb	r1, r3, r4, r1
 23effa8:	2301      	movs	r3, #1
 23effaa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 23effac:	f002 0207 	and.w	r2, r2, #7
 23effb0:	4093      	lsls	r3, r2
 23effb2:	5c42      	ldrb	r2, [r0, r1]
 23effb4:	ea22 0203 	bic.w	r2, r2, r3
      break;
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
 23effb8:	5442      	strb	r2, [r0, r1]
      break;
    }
  }
}
 23effba:	e01e      	b.n	23efffa <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      y = HEIGHT - y - 1;
 23effbc:	43d2      	mvns	r2, r2
      x = WIDTH - x - 1;
 23effbe:	8904      	ldrh	r4, [r0, #8]
 23effc0:	3c01      	subs	r4, #1
 23effc2:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
 23effc4:	8944      	ldrh	r4, [r0, #10]
      x = WIDTH - x - 1;
 23effc6:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
 23effc8:	4422      	add	r2, r4
 23effca:	b212      	sxth	r2, r2
      break;
 23effcc:	e7df      	b.n	23eff8e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
 23effce:	8944      	ldrh	r4, [r0, #10]
 23effd0:	3c01      	subs	r4, #1
 23effd2:	1a64      	subs	r4, r4, r1
      break;
 23effd4:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
 23effd6:	b222      	sxth	r2, r4
      break;
 23effd8:	e7d9      	b.n	23eff8e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
 23effda:	4613      	mov	r3, r2
 23effdc:	2a00      	cmp	r2, #0
 23effde:	8904      	ldrh	r4, [r0, #8]
 23effe0:	bfb8      	it	lt
 23effe2:	1dd3      	addlt	r3, r2, #7
 23effe4:	10db      	asrs	r3, r3, #3
 23effe6:	fb13 1104 	smlabb	r1, r3, r4, r1
 23effea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 23effec:	f002 0007 	and.w	r0, r2, #7
 23efff0:	2201      	movs	r2, #1
 23efff2:	4082      	lsls	r2, r0
 23efff4:	5c58      	ldrb	r0, [r3, r1]
 23efff6:	4302      	orrs	r2, r0
 23efff8:	545a      	strb	r2, [r3, r1]
}
 23efffa:	bd10      	pop	{r4, pc}
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
 23efffc:	4613      	mov	r3, r2
 23efffe:	2a00      	cmp	r2, #0
 23f0000:	8904      	ldrh	r4, [r0, #8]
 23f0002:	bfb8      	it	lt
 23f0004:	1dd3      	addlt	r3, r2, #7
 23f0006:	10db      	asrs	r3, r3, #3
 23f0008:	fb13 1104 	smlabb	r1, r3, r4, r1
 23f000c:	2301      	movs	r3, #1
 23f000e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 23f0010:	f002 0207 	and.w	r2, r2, #7
 23f0014:	fa03 f202 	lsl.w	r2, r3, r2
 23f0018:	5c43      	ldrb	r3, [r0, r1]
 23f001a:	405a      	eors	r2, r3
 23f001c:	e7cc      	b.n	23effb8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

023f0020 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
 23f0020:	b570      	push	{r4, r5, r6, lr}
 23f0022:	4604      	mov	r4, r0
 23f0024:	461d      	mov	r5, r3
      wireClk(clkDuring), restoreClk(clkAfter)
 23f0026:	2600      	movs	r6, #0
 23f0028:	f7fe fece 	bl	23eedc8 <_ZN12Adafruit_GFXC1Ess>
 23f002c:	4b11      	ldr	r3, [pc, #68]	; (23f0074 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
 23f002e:	6266      	str	r6, [r4, #36]	; 0x24
 23f0030:	6023      	str	r3, [r4, #0]
    : Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
 23f0032:	b915      	cbnz	r5, 23f003a <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
 23f0034:	f009 fbf6 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23f0038:	4605      	mov	r5, r0
      wireClk(clkDuring), restoreClk(clkAfter)
 23f003a:	23ff      	movs	r3, #255	; 0xff
 23f003c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 23f0040:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 23f0044:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 23f0048:	f64f 72ff 	movw	r2, #65535	; 0xffff
 23f004c:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
 23f0050:	9b05      	ldr	r3, [sp, #20]
}
 23f0052:	4620      	mov	r0, r4
      wireClk(clkDuring), restoreClk(clkAfter)
 23f0054:	65a3      	str	r3, [r4, #88]	; 0x58
 23f0056:	9b06      	ldr	r3, [sp, #24]
 23f0058:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
 23f005c:	65e3      	str	r3, [r4, #92]	; 0x5c
  {
 23f005e:	4b06      	ldr	r3, [pc, #24]	; (23f0078 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
 23f0060:	86a2      	strh	r2, [r4, #52]	; 0x34
 23f0062:	6663      	str	r3, [r4, #100]	; 0x64
 23f0064:	2301      	movs	r3, #1
 23f0066:	66e6      	str	r6, [r4, #108]	; 0x6c
 23f0068:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 23f006c:	f8a4 6070 	strh.w	r6, [r4, #112]	; 0x70
}
 23f0070:	bd70      	pop	{r4, r5, r6, pc}
 23f0072:	bf00      	nop
 23f0074:	023ff140 	.word	0x023ff140
 23f0078:	023fe4ac 	.word	0x023fe4ac

023f007c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
 23f007c:	b570      	push	{r4, r5, r6, lr}
 23f007e:	4604      	mov	r4, r0
  if (wire) { // I2C
 23f0080:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
 23f0082:	460d      	mov	r5, r1
  if (wire) { // I2C
 23f0084:	b190      	cbz	r0, 23f00ac <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
 23f0086:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 23f008a:	f007 ff2f 	bl	23f7eec <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 23f008e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f0090:	2100      	movs	r1, #0
 23f0092:	6803      	ldr	r3, [r0, #0]
 23f0094:	689b      	ldr	r3, [r3, #8]
 23f0096:	4798      	blx	r3
    WIRE_WRITE(c);
 23f0098:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f009a:	4629      	mov	r1, r5
 23f009c:	6803      	ldr	r3, [r0, #0]
 23f009e:	689b      	ldr	r3, [r3, #8]
 23f00a0:	4798      	blx	r3
    wire->endTransmission();
 23f00a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
 23f00a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    wire->endTransmission();
 23f00a8:	f007 bf27 	b.w	23f7efa <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
 23f00ac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 23f00ae:	6d20      	ldr	r0, [r4, #80]	; 0x50
 23f00b0:	6813      	ldr	r3, [r2, #0]
 23f00b2:	ea23 0300 	bic.w	r3, r3, r0
 23f00b6:	6013      	str	r3, [r2, #0]
  if (spi) {
 23f00b8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f00ba:	b118      	cbz	r0, 23f00c4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x48>
}
 23f00bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (void)spi->transfer(d);
 23f00c0:	f008 bcc2 	b.w	23f8a48 <_ZN8SPIClass8transferEh>
 23f00c4:	2208      	movs	r2, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f00c6:	2180      	movs	r1, #128	; 0x80
        *mosiPort |= mosiPinMask;
 23f00c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23f00ca:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 23f00cc:	6818      	ldr	r0, [r3, #0]
      if (d & bit)
 23f00ce:	420d      	tst	r5, r1
        *mosiPort |= mosiPinMask;
 23f00d0:	bf14      	ite	ne
 23f00d2:	4330      	orrne	r0, r6
        *mosiPort &= ~mosiPinMask;
 23f00d4:	43b0      	biceq	r0, r6
 23f00d6:	6018      	str	r0, [r3, #0]
      *clkPort |= clkPinMask;  // Clock high
 23f00d8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 23f00da:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 23f00dc:	6803      	ldr	r3, [r0, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f00de:	3a01      	subs	r2, #1
      *clkPort |= clkPinMask;  // Clock high
 23f00e0:	ea43 0306 	orr.w	r3, r3, r6
 23f00e4:	6003      	str	r3, [r0, #0]
      *clkPort &= ~clkPinMask; // Clock low
 23f00e6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 23f00e8:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 23f00ea:	6803      	ldr	r3, [r0, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f00ec:	ea4f 0151 	mov.w	r1, r1, lsr #1
      *clkPort &= ~clkPinMask; // Clock low
 23f00f0:	ea23 0306 	bic.w	r3, r3, r6
 23f00f4:	6003      	str	r3, [r0, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f00f6:	d1e7      	bne.n	23f00c8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4c>
}
 23f00f8:	bd70      	pop	{r4, r5, r6, pc}

023f00fa <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing SSD1306_BLACK (value 0) pixels will actually draw
   white, SSD1306_WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(bool i) {
 23f00fa:	b538      	push	{r3, r4, r5, lr}
 23f00fc:	4604      	mov	r4, r0
  TRANSACTION_START
 23f00fe:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(bool i) {
 23f0100:	460d      	mov	r5, r1
  TRANSACTION_START
 23f0102:	b180      	cbz	r0, 23f0126 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>
	  setSpeed(speed);
 23f0104:	6da1      	ldr	r1, [r4, #88]	; 0x58
 23f0106:	f007 febf 	bl	23f7e88 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
 23f010a:	2d00      	cmp	r5, #0
 23f010c:	4620      	mov	r0, r4
 23f010e:	bf14      	ite	ne
 23f0110:	21a7      	movne	r1, #167	; 0xa7
 23f0112:	21a6      	moveq	r1, #166	; 0xa6
 23f0114:	f7ff ffb2 	bl	23f007c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
 23f0118:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f011a:	b188      	cbz	r0, 23f0140 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
 23f011c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
}
 23f011e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23f0122:	f007 beb1 	b.w	23f7e88 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
 23f0126:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f0128:	b118      	cbz	r0, 23f0132 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
 23f012a:	f104 0164 	add.w	r1, r4, #100	; 0x64
 23f012e:	f008 fc1d 	bl	23f896c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
 23f0132:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f0134:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f0136:	6813      	ldr	r3, [r2, #0]
 23f0138:	ea23 0301 	bic.w	r3, r3, r1
 23f013c:	6013      	str	r3, [r2, #0]
 23f013e:	e7e4      	b.n	23f010a <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
 23f0140:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f0142:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f0144:	6813      	ldr	r3, [r2, #0]
 23f0146:	430b      	orrs	r3, r1
 23f0148:	6013      	str	r3, [r2, #0]
 23f014a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f014c:	b118      	cbz	r0, 23f0156 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5c>
}
 23f014e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
 23f0152:	f008 bbf1 	b.w	23f8938 <_ZN8SPIClass14endTransactionEv>
}
 23f0156:	bd38      	pop	{r3, r4, r5, pc}

023f0158 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
 23f0158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f015a:	4604      	mov	r4, r0
  if (wire) { // I2C
 23f015c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
 23f015e:	460d      	mov	r5, r1
  if (wire) { // I2C
 23f0160:	188f      	adds	r7, r1, r2
 23f0162:	b340      	cbz	r0, 23f01b6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x5e>
    wire->beginTransmission(i2caddr);
 23f0164:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 23f0168:	f007 fec0 	bl	23f7eec <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 23f016c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f016e:	2100      	movs	r1, #0
 23f0170:	6803      	ldr	r3, [r0, #0]
    uint16_t bytesOut = 1;
 23f0172:	2601      	movs	r6, #1
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 23f0174:	689b      	ldr	r3, [r3, #8]
 23f0176:	4798      	blx	r3
    while (n--) {
 23f0178:	42bd      	cmp	r5, r7
        wire->endTransmission();
 23f017a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while (n--) {
 23f017c:	d017      	beq.n	23f01ae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x56>
      if (bytesOut >= WIRE_MAX) {
 23f017e:	2e1f      	cmp	r6, #31
 23f0180:	d90c      	bls.n	23f019c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x44>
        wire->endTransmission();
 23f0182:	f007 feba 	bl	23f7efa <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
 23f0186:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 23f018a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f018c:	f007 feae 	bl	23f7eec <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 23f0190:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f0192:	2100      	movs	r1, #0
 23f0194:	6803      	ldr	r3, [r0, #0]
        bytesOut = 1;
 23f0196:	2601      	movs	r6, #1
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 23f0198:	689b      	ldr	r3, [r3, #8]
 23f019a:	4798      	blx	r3
      WIRE_WRITE(pgm_read_byte(c++));
 23f019c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f019e:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f01a2:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
 23f01a4:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
 23f01a6:	689b      	ldr	r3, [r3, #8]
 23f01a8:	4798      	blx	r3
      bytesOut++;
 23f01aa:	b2b6      	uxth	r6, r6
    while (n--) {
 23f01ac:	e7e4      	b.n	23f0178 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x20>
}
 23f01ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
 23f01b2:	f007 bea2 	b.w	23f7efa <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
 23f01b6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 23f01b8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 23f01ba:	6813      	ldr	r3, [r2, #0]
 23f01bc:	ea23 0301 	bic.w	r3, r3, r1
 23f01c0:	6013      	str	r3, [r2, #0]
    while (n--)
 23f01c2:	42bd      	cmp	r5, r7
 23f01c4:	d026      	beq.n	23f0214 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xbc>
  if (spi) {
 23f01c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
      SPIwrite(pgm_read_byte(c++));
 23f01c8:	f815 1b01 	ldrb.w	r1, [r5], #1
  if (spi) {
 23f01cc:	b110      	cbz	r0, 23f01d4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x7c>
    (void)spi->transfer(d);
 23f01ce:	f008 fc3b 	bl	23f8a48 <_ZN8SPIClass8transferEh>
 23f01d2:	e7f6      	b.n	23f01c2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6a>
 23f01d4:	f04f 0e08 	mov.w	lr, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f01d8:	2080      	movs	r0, #128	; 0x80
        *mosiPort |= mosiPinMask;
 23f01da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23f01dc:	f8d4 c048 	ldr.w	ip, [r4, #72]	; 0x48
 23f01e0:	681e      	ldr	r6, [r3, #0]
      if (d & bit)
 23f01e2:	4201      	tst	r1, r0
        *mosiPort |= mosiPinMask;
 23f01e4:	bf14      	ite	ne
 23f01e6:	ea46 060c 	orrne.w	r6, r6, ip
        *mosiPort &= ~mosiPinMask;
 23f01ea:	ea26 060c 	biceq.w	r6, r6, ip
 23f01ee:	601e      	str	r6, [r3, #0]
      *clkPort |= clkPinMask;  // Clock high
 23f01f0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 23f01f2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 23f01f4:	6833      	ldr	r3, [r6, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f01f6:	f1be 0e01 	subs.w	lr, lr, #1
      *clkPort |= clkPinMask;  // Clock high
 23f01fa:	ea43 0302 	orr.w	r3, r3, r2
 23f01fe:	6033      	str	r3, [r6, #0]
      *clkPort &= ~clkPinMask; // Clock low
 23f0200:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 23f0202:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 23f0204:	6833      	ldr	r3, [r6, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f0206:	ea4f 0050 	mov.w	r0, r0, lsr #1
      *clkPort &= ~clkPinMask; // Clock low
 23f020a:	ea23 0302 	bic.w	r3, r3, r2
 23f020e:	6033      	str	r3, [r6, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f0210:	d1e3      	bne.n	23f01da <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x82>
 23f0212:	e7d6      	b.n	23f01c2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6a>
}
 23f0214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f0216 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) {
 23f0216:	b538      	push	{r3, r4, r5, lr}
 23f0218:	4604      	mov	r4, r0
  TRANSACTION_START
 23f021a:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command(uint8_t c) {
 23f021c:	460d      	mov	r5, r1
  TRANSACTION_START
 23f021e:	b168      	cbz	r0, 23f023c <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x26>
 23f0220:	6da1      	ldr	r1, [r4, #88]	; 0x58
 23f0222:	f007 fe31 	bl	23f7e88 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(c);
 23f0226:	4620      	mov	r0, r4
 23f0228:	4629      	mov	r1, r5
 23f022a:	f7ff ff27 	bl	23f007c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
 23f022e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f0230:	b188      	cbz	r0, 23f0256 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x40>
 23f0232:	6de1      	ldr	r1, [r4, #92]	; 0x5c
}
 23f0234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23f0238:	f007 be26 	b.w	23f7e88 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
 23f023c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f023e:	b118      	cbz	r0, 23f0248 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x32>
 23f0240:	f104 0164 	add.w	r1, r4, #100	; 0x64
 23f0244:	f008 fb92 	bl	23f896c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
 23f0248:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f024a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f024c:	6813      	ldr	r3, [r2, #0]
 23f024e:	ea23 0301 	bic.w	r3, r3, r1
 23f0252:	6013      	str	r3, [r2, #0]
 23f0254:	e7e7      	b.n	23f0226 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x10>
  TRANSACTION_END
 23f0256:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f0258:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f025a:	6813      	ldr	r3, [r2, #0]
 23f025c:	430b      	orrs	r3, r1
 23f025e:	6013      	str	r3, [r2, #0]
 23f0260:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f0262:	b118      	cbz	r0, 23f026c <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x56>
}
 23f0264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
 23f0268:	f008 bb66 	b.w	23f8938 <_ZN8SPIClass14endTransactionEv>
}
 23f026c:	bd38      	pop	{r3, r4, r5, pc}

023f026e <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
 23f026e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 23f0272:	2100      	movs	r1, #0
 23f0274:	1dda      	adds	r2, r3, #7
 23f0276:	bf48      	it	mi
 23f0278:	f103 020e 	addmi.w	r2, r3, #14
 23f027c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 23f0280:	10d2      	asrs	r2, r2, #3
 23f0282:	435a      	muls	r2, r3
 23f0284:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 23f0286:	f00c b8ae 	b.w	23fc3e6 <memset>
	...

023f028c <_ZN16Adafruit_SSD13065beginEhhbb>:
                             bool periphBegin) {
 23f028c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 23f0290:	461e      	mov	r6, r3
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
 23f0292:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
                             bool periphBegin) {
 23f0294:	4604      	mov	r4, r0
 23f0296:	460f      	mov	r7, r1
 23f0298:	4615      	mov	r5, r2
 23f029a:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
 23f029e:	b1c3      	cbz	r3, 23f02d2 <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
 23f02a0:	4620      	mov	r0, r4
 23f02a2:	f7ff ffe4 	bl	23f026e <_ZN16Adafruit_SSD130612clearDisplayEv>
  if (HEIGHT > 32) {
 23f02a6:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 23f02aa:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 23f02ae:	2820      	cmp	r0, #32
 23f02b0:	dc21      	bgt.n	23f02f6 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
 23f02b2:	2320      	movs	r3, #32
 23f02b4:	2201      	movs	r2, #1
 23f02b6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 23f02ba:	2373      	movs	r3, #115	; 0x73
 23f02bc:	3820      	subs	r0, #32
 23f02be:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 23f02c2:	3973      	subs	r1, #115	; 0x73
 23f02c4:	9300      	str	r3, [sp, #0]
 23f02c6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 23f02ca:	4bb8      	ldr	r3, [pc, #736]	; (23f05ac <_ZN16Adafruit_SSD13065beginEhhbb+0x320>)
 23f02cc:	f340 024f 	sbfx	r2, r0, #1, #16
 23f02d0:	e021      	b.n	23f0316 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
 23f02d2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 23f02d6:	1dd8      	adds	r0, r3, #7
 23f02d8:	bf48      	it	mi
 23f02da:	f103 000e 	addmi.w	r0, r3, #14
 23f02de:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 23f02e2:	10c0      	asrs	r0, r0, #3
 23f02e4:	4358      	muls	r0, r3
 23f02e6:	f006 ff2d 	bl	23f7144 <malloc>
 23f02ea:	62e0      	str	r0, [r4, #44]	; 0x2c
 23f02ec:	2800      	cmp	r0, #0
 23f02ee:	d1d7      	bne.n	23f02a0 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
 23f02f0:	b004      	add	sp, #16
 23f02f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
 23f02f6:	3840      	subs	r0, #64	; 0x40
 23f02f8:	f3c0 32c0 	ubfx	r2, r0, #15, #1
 23f02fc:	2340      	movs	r3, #64	; 0x40
 23f02fe:	fa02 f280 	sxtah	r2, r2, r0
 23f0302:	2001      	movs	r0, #1
 23f0304:	e9cd 3001 	strd	r3, r0, [sp, #4]
 23f0308:	2352      	movs	r3, #82	; 0x52
 23f030a:	3952      	subs	r1, #82	; 0x52
 23f030c:	9300      	str	r3, [sp, #0]
 23f030e:	4ba8      	ldr	r3, [pc, #672]	; (23f05b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x324>)
 23f0310:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 23f0314:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
 23f0316:	4620      	mov	r0, r4
 23f0318:	f341 014f 	sbfx	r1, r1, #1, #16
 23f031c:	f7fe fd6a 	bl	23eedf4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if (wire) { // Using I2C
 23f0320:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
 23f0322:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if (wire) { // Using I2C
 23f0326:	2800      	cmp	r0, #0
 23f0328:	f000 809a 	beq.w	23f0460 <_ZN16Adafruit_SSD13065beginEhhbb+0x1d4>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
 23f032c:	2d00      	cmp	r5, #0
 23f032e:	f040 8095 	bne.w	23f045c <_ZN16Adafruit_SSD13065beginEhhbb+0x1d0>
 23f0332:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 23f0336:	2b20      	cmp	r3, #32
 23f0338:	bf0c      	ite	eq
 23f033a:	253c      	moveq	r5, #60	; 0x3c
 23f033c:	253d      	movne	r5, #61	; 0x3d
 23f033e:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if (periphBegin)
 23f0342:	f1b8 0f00 	cmp.w	r8, #0
 23f0346:	d001      	beq.n	23f034c <_ZN16Adafruit_SSD13065beginEhhbb+0xc0>
      wire->begin();
 23f0348:	f007 fda2 	bl	23f7e90 <_ZN7TwoWire5beginEv>
  if (reset && (rstPin >= 0)) {
 23f034c:	b1fe      	cbz	r6, 23f038e <_ZN16Adafruit_SSD13065beginEhhbb+0x102>
 23f034e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 23f0352:	2800      	cmp	r0, #0
 23f0354:	db1b      	blt.n	23f038e <_ZN16Adafruit_SSD13065beginEhhbb+0x102>
    pinMode(rstPin, OUTPUT);
 23f0356:	2101      	movs	r1, #1
 23f0358:	b280      	uxth	r0, r0
 23f035a:	f009 f9df 	bl	23f971c <pinMode>
    digitalWrite(rstPin, HIGH);
 23f035e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 23f0362:	2101      	movs	r1, #1
 23f0364:	b280      	uxth	r0, r0
 23f0366:	f009 f9ea 	bl	23f973e <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
 23f036a:	2001      	movs	r0, #1
 23f036c:	f006 fff4 	bl	23f7358 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
 23f0370:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 23f0374:	2100      	movs	r1, #0
 23f0376:	b280      	uxth	r0, r0
 23f0378:	f009 f9e1 	bl	23f973e <digitalWrite>
    delay(10);                  // Wait 10 ms
 23f037c:	200a      	movs	r0, #10
 23f037e:	f006 ffeb 	bl	23f7358 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
 23f0382:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 23f0386:	2101      	movs	r1, #1
 23f0388:	b280      	uxth	r0, r0
 23f038a:	f009 f9d8 	bl	23f973e <digitalWrite>
  TRANSACTION_START
 23f038e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f0390:	2800      	cmp	r0, #0
 23f0392:	f000 80e5 	beq.w	23f0560 <_ZN16Adafruit_SSD13065beginEhhbb+0x2d4>
 23f0396:	6da1      	ldr	r1, [r4, #88]	; 0x58
 23f0398:	f007 fd76 	bl	23f7e88 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
 23f039c:	2204      	movs	r2, #4
 23f039e:	4620      	mov	r0, r4
 23f03a0:	4984      	ldr	r1, [pc, #528]	; (23f05b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x328>)
 23f03a2:	f7ff fed9 	bl	23f0158 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
 23f03a6:	8961      	ldrh	r1, [r4, #10]
 23f03a8:	4620      	mov	r0, r4
 23f03aa:	3901      	subs	r1, #1
 23f03ac:	b2c9      	uxtb	r1, r1
 23f03ae:	f7ff fe65 	bl	23f007c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
 23f03b2:	4981      	ldr	r1, [pc, #516]	; (23f05b8 <_ZN16Adafruit_SSD13065beginEhhbb+0x32c>)
 23f03b4:	2204      	movs	r2, #4
 23f03b6:	4620      	mov	r0, r4
 23f03b8:	f7ff fece 	bl	23f0158 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 23f03bc:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 23f03c0:	4620      	mov	r0, r4
 23f03c2:	2b01      	cmp	r3, #1
 23f03c4:	bf0c      	ite	eq
 23f03c6:	2110      	moveq	r1, #16
 23f03c8:	2114      	movne	r1, #20
 23f03ca:	f7ff fe57 	bl	23f007c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
 23f03ce:	2204      	movs	r2, #4
 23f03d0:	4620      	mov	r0, r4
 23f03d2:	497a      	ldr	r1, [pc, #488]	; (23f05bc <_ZN16Adafruit_SSD13065beginEhhbb+0x330>)
 23f03d4:	f7ff fec0 	bl	23f0158 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  contrast = 0x8F;
 23f03d8:	238f      	movs	r3, #143	; 0x8f
  if ((WIDTH == 128) && (HEIGHT == 32)) {
 23f03da:	4a79      	ldr	r2, [pc, #484]	; (23f05c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x334>)
  contrast = 0x8F;
 23f03dc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
  if ((WIDTH == 128) && (HEIGHT == 32)) {
 23f03e0:	68a3      	ldr	r3, [r4, #8]
 23f03e2:	4293      	cmp	r3, r2
 23f03e4:	f000 80d4 	beq.w	23f0590 <_ZN16Adafruit_SSD13065beginEhhbb+0x304>
  } else if ((WIDTH == 128) && (HEIGHT == 64)) {
 23f03e8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 23f03ec:	4293      	cmp	r3, r2
 23f03ee:	f040 80c4 	bne.w	23f057a <_ZN16Adafruit_SSD13065beginEhhbb+0x2ee>
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 23f03f2:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
    comPins = 0x12;
 23f03f6:	2512      	movs	r5, #18
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 23f03f8:	2b01      	cmp	r3, #1
 23f03fa:	bf0c      	ite	eq
 23f03fc:	239f      	moveq	r3, #159	; 0x9f
 23f03fe:	23cf      	movne	r3, #207	; 0xcf
 23f0400:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
  ssd1306_command1(SSD1306_SETCOMPINS);
 23f0404:	21da      	movs	r1, #218	; 0xda
 23f0406:	4620      	mov	r0, r4
 23f0408:	f7ff fe38 	bl	23f007c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(comPins);
 23f040c:	4629      	mov	r1, r5
 23f040e:	4620      	mov	r0, r4
 23f0410:	f7ff fe34 	bl	23f007c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(SSD1306_SETCONTRAST);
 23f0414:	2181      	movs	r1, #129	; 0x81
 23f0416:	4620      	mov	r0, r4
 23f0418:	f7ff fe30 	bl	23f007c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(contrast);
 23f041c:	4620      	mov	r0, r4
 23f041e:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
 23f0422:	f7ff fe2b 	bl	23f007c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
 23f0426:	21d9      	movs	r1, #217	; 0xd9
 23f0428:	4620      	mov	r0, r4
 23f042a:	f7ff fe27 	bl	23f007c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 23f042e:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 23f0432:	4620      	mov	r0, r4
 23f0434:	2b01      	cmp	r3, #1
 23f0436:	bf0c      	ite	eq
 23f0438:	2122      	moveq	r1, #34	; 0x22
 23f043a:	21f1      	movne	r1, #241	; 0xf1
 23f043c:	f7ff fe1e 	bl	23f007c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
 23f0440:	4620      	mov	r0, r4
 23f0442:	2206      	movs	r2, #6
 23f0444:	495f      	ldr	r1, [pc, #380]	; (23f05c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x338>)
 23f0446:	f7ff fe87 	bl	23f0158 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
 23f044a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f044c:	2800      	cmp	r0, #0
 23f044e:	f000 80a1 	beq.w	23f0594 <_ZN16Adafruit_SSD13065beginEhhbb+0x308>
 23f0452:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 23f0454:	f007 fd18 	bl	23f7e88 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
 23f0458:	2001      	movs	r0, #1
 23f045a:	e749      	b.n	23f02f0 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
 23f045c:	b26d      	sxtb	r5, r5
 23f045e:	e76e      	b.n	23f033e <_ZN16Adafruit_SSD13065beginEhhbb+0xb2>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
 23f0460:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
 23f0464:	2101      	movs	r1, #1
 23f0466:	b280      	uxth	r0, r0
 23f0468:	f009 f958 	bl	23f971c <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
 23f046c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 23f0470:	2101      	movs	r1, #1
 23f0472:	b280      	uxth	r0, r0
 23f0474:	f009 f952 	bl	23f971c <pinMode>
    dcPort = (PortReg *)portOutputRegister(digitalPinToPort(dcPin));
 23f0478:	f006 f898 	bl	23f65ac <hal_pin_map>
 23f047c:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
 23f0480:	4d51      	ldr	r5, [pc, #324]	; (23f05c8 <_ZN16Adafruit_SSD13065beginEhhbb+0x33c>)
 23f0482:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f0486:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 23f048a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 23f048e:	6423      	str	r3, [r4, #64]	; 0x40
    dcPinMask = digitalPinToBitMask(dcPin);
 23f0490:	f006 f88c 	bl	23f65ac <hal_pin_map>
 23f0494:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
 23f0498:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f049c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 23f04a0:	785b      	ldrb	r3, [r3, #1]
 23f04a2:	6523      	str	r3, [r4, #80]	; 0x50
    csPort = (PortReg *)portOutputRegister(digitalPinToPort(csPin));
 23f04a4:	f006 f882 	bl	23f65ac <hal_pin_map>
 23f04a8:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
 23f04ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f04b0:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 23f04b4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 23f04b8:	6463      	str	r3, [r4, #68]	; 0x44
    csPinMask = digitalPinToBitMask(csPin);
 23f04ba:	f006 f877 	bl	23f65ac <hal_pin_map>
 23f04be:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
    SSD1306_DESELECT
 23f04c2:	6c62      	ldr	r2, [r4, #68]	; 0x44
    csPinMask = digitalPinToBitMask(csPin);
 23f04c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f04c8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 23f04cc:	785b      	ldrb	r3, [r3, #1]
 23f04ce:	6563      	str	r3, [r4, #84]	; 0x54
    SSD1306_DESELECT
 23f04d0:	6811      	ldr	r1, [r2, #0]
 23f04d2:	430b      	orrs	r3, r1
 23f04d4:	6013      	str	r3, [r2, #0]
    if (spi) { // Hardware SPI
 23f04d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f04d8:	b130      	cbz	r0, 23f04e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x25c>
      if (periphBegin)
 23f04da:	f1b8 0f00 	cmp.w	r8, #0
 23f04de:	f43f af35 	beq.w	23f034c <_ZN16Adafruit_SSD13065beginEhhbb+0xc0>
        spi->begin();
 23f04e2:	f008 f9ef 	bl	23f88c4 <_ZN8SPIClass5beginEv>
 23f04e6:	e731      	b.n	23f034c <_ZN16Adafruit_SSD13065beginEhhbb+0xc0>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
 23f04e8:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
 23f04ec:	2101      	movs	r1, #1
 23f04ee:	b280      	uxth	r0, r0
 23f04f0:	f009 f914 	bl	23f971c <pinMode>
      pinMode(clkPin, OUTPUT);
 23f04f4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 23f04f8:	2101      	movs	r1, #1
 23f04fa:	b280      	uxth	r0, r0
 23f04fc:	f009 f90e 	bl	23f971c <pinMode>
      mosiPort = (PortReg *)portOutputRegister(digitalPinToPort(mosiPin));
 23f0500:	f006 f854 	bl	23f65ac <hal_pin_map>
 23f0504:	f994 3033 	ldrsb.w	r3, [r4, #51]	; 0x33
 23f0508:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f050c:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 23f0510:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 23f0514:	63a3      	str	r3, [r4, #56]	; 0x38
      mosiPinMask = digitalPinToBitMask(mosiPin);
 23f0516:	f006 f849 	bl	23f65ac <hal_pin_map>
 23f051a:	f994 3033 	ldrsb.w	r3, [r4, #51]	; 0x33
 23f051e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f0522:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 23f0526:	785b      	ldrb	r3, [r3, #1]
 23f0528:	64a3      	str	r3, [r4, #72]	; 0x48
      clkPort = (PortReg *)portOutputRegister(digitalPinToPort(clkPin));
 23f052a:	f006 f83f 	bl	23f65ac <hal_pin_map>
 23f052e:	f994 3034 	ldrsb.w	r3, [r4, #52]	; 0x34
 23f0532:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f0536:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 23f053a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 23f053e:	63e3      	str	r3, [r4, #60]	; 0x3c
      clkPinMask = digitalPinToBitMask(clkPin);
 23f0540:	f006 f834 	bl	23f65ac <hal_pin_map>
 23f0544:	f994 3034 	ldrsb.w	r3, [r4, #52]	; 0x34
      *clkPort &= ~clkPinMask; // Clock low
 23f0548:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      clkPinMask = digitalPinToBitMask(clkPin);
 23f054a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f054e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 23f0552:	7859      	ldrb	r1, [r3, #1]
 23f0554:	64e1      	str	r1, [r4, #76]	; 0x4c
      *clkPort &= ~clkPinMask; // Clock low
 23f0556:	6813      	ldr	r3, [r2, #0]
 23f0558:	ea23 0301 	bic.w	r3, r3, r1
 23f055c:	6013      	str	r3, [r2, #0]
 23f055e:	e6f5      	b.n	23f034c <_ZN16Adafruit_SSD13065beginEhhbb+0xc0>
  TRANSACTION_START
 23f0560:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f0562:	b118      	cbz	r0, 23f056c <_ZN16Adafruit_SSD13065beginEhhbb+0x2e0>
 23f0564:	f104 0164 	add.w	r1, r4, #100	; 0x64
 23f0568:	f008 fa00 	bl	23f896c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
 23f056c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f056e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f0570:	6813      	ldr	r3, [r2, #0]
 23f0572:	ea23 0301 	bic.w	r3, r3, r1
 23f0576:	6013      	str	r3, [r2, #0]
 23f0578:	e710      	b.n	23f039c <_ZN16Adafruit_SSD13065beginEhhbb+0x110>
  } else if ((WIDTH == 96) && (HEIGHT == 16)) {
 23f057a:	4a14      	ldr	r2, [pc, #80]	; (23f05cc <_ZN16Adafruit_SSD13065beginEhhbb+0x340>)
 23f057c:	4293      	cmp	r3, r2
 23f057e:	d107      	bne.n	23f0590 <_ZN16Adafruit_SSD13065beginEhhbb+0x304>
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
 23f0580:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 23f0584:	2b01      	cmp	r3, #1
 23f0586:	bf0c      	ite	eq
 23f0588:	2310      	moveq	r3, #16
 23f058a:	23af      	movne	r3, #175	; 0xaf
 23f058c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    comPins = 0x02;
 23f0590:	2502      	movs	r5, #2
 23f0592:	e737      	b.n	23f0404 <_ZN16Adafruit_SSD13065beginEhhbb+0x178>
  TRANSACTION_END
 23f0594:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f0596:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f0598:	6813      	ldr	r3, [r2, #0]
 23f059a:	430b      	orrs	r3, r1
 23f059c:	6013      	str	r3, [r2, #0]
 23f059e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f05a0:	2800      	cmp	r0, #0
 23f05a2:	f43f af59 	beq.w	23f0458 <_ZN16Adafruit_SSD13065beginEhhbb+0x1cc>
 23f05a6:	f008 f9c7 	bl	23f8938 <_ZN8SPIClass14endTransactionEv>
 23f05aa:	e755      	b.n	23f0458 <_ZN16Adafruit_SSD13065beginEhhbb+0x1cc>
 23f05ac:	023fef58 	.word	0x023fef58
 23f05b0:	023fec98 	.word	0x023fec98
 23f05b4:	023ff1a0 	.word	0x023ff1a0
 23f05b8:	023ff1a4 	.word	0x023ff1a4
 23f05bc:	023ff1a8 	.word	0x023ff1a8
 23f05c0:	00200080 	.word	0x00200080
 23f05c4:	023ff1ac 	.word	0x023ff1ac
 23f05c8:	101c0024 	.word	0x101c0024
 23f05cc:	00100060 	.word	0x00100060

023f05d0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
                                             uint16_t color) {
 23f05d0:	b570      	push	{r4, r5, r6, lr}
  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
 23f05d2:	2a00      	cmp	r2, #0
                                             uint16_t color) {
 23f05d4:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
 23f05d8:	db3f      	blt.n	23f065a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
 23f05da:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 23f05de:	4294      	cmp	r4, r2
 23f05e0:	dd3b      	ble.n	23f065a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
    if (x < 0) {                  // Clip left
 23f05e2:	2900      	cmp	r1, #0
      w += x;
 23f05e4:	bfbe      	ittt	lt
 23f05e6:	185b      	addlt	r3, r3, r1
      x = 0;
 23f05e8:	2100      	movlt	r1, #0
      w += x;
 23f05ea:	b21b      	sxthlt	r3, r3
    if ((x + w) > WIDTH) { // Clip right
 23f05ec:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 23f05f0:	18ce      	adds	r6, r1, r3
 23f05f2:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
 23f05f4:	bfc4      	itt	gt
 23f05f6:	1a63      	subgt	r3, r4, r1
 23f05f8:	b21b      	sxthgt	r3, r3
    if (w > 0) { // Proceed only if width is positive
 23f05fa:	2b00      	cmp	r3, #0
 23f05fc:	dd2d      	ble.n	23f065a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x], mask = 1 << (y & 7);
 23f05fe:	10d6      	asrs	r6, r2, #3
 23f0600:	fb14 1106 	smlabb	r1, r4, r6, r1
 23f0604:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
      switch (color) {
 23f0606:	2d01      	cmp	r5, #1
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x], mask = 1 << (y & 7);
 23f0608:	4401      	add	r1, r0
 23f060a:	f002 0007 	and.w	r0, r2, #7
 23f060e:	f04f 0201 	mov.w	r2, #1
 23f0612:	fa02 f200 	lsl.w	r2, r2, r0
 23f0616:	b2d2      	uxtb	r2, r2
      switch (color) {
 23f0618:	d016      	beq.n	23f0648 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x78>
 23f061a:	2d02      	cmp	r5, #2
 23f061c:	d00b      	beq.n	23f0636 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x66>
 23f061e:	b9e5      	cbnz	r5, 23f065a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
        mask = ~mask;
 23f0620:	43d2      	mvns	r2, r2
 23f0622:	440b      	add	r3, r1
 23f0624:	b2d2      	uxtb	r2, r2
        while (w--) {
 23f0626:	4299      	cmp	r1, r3
 23f0628:	d017      	beq.n	23f065a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
          *pBuf++ &= mask;
 23f062a:	f811 0b01 	ldrb.w	r0, [r1], #1
 23f062e:	4010      	ands	r0, r2
 23f0630:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
 23f0634:	e7f7      	b.n	23f0626 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x56>
 23f0636:	440b      	add	r3, r1
        while (w--) {
 23f0638:	4299      	cmp	r1, r3
 23f063a:	d00e      	beq.n	23f065a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
          *pBuf++ ^= mask;
 23f063c:	f811 0b01 	ldrb.w	r0, [r1], #1
 23f0640:	4050      	eors	r0, r2
 23f0642:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
 23f0646:	e7f7      	b.n	23f0638 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x68>
 23f0648:	440b      	add	r3, r1
        while (w--) {
 23f064a:	4299      	cmp	r1, r3
 23f064c:	d005      	beq.n	23f065a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
          *pBuf++ |= mask;
 23f064e:	f811 0b01 	ldrb.w	r0, [r1], #1
 23f0652:	4310      	orrs	r0, r2
 23f0654:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
 23f0658:	e7f7      	b.n	23f064a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x7a>
}
 23f065a:	bd70      	pop	{r4, r5, r6, pc}

023f065c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
                                             int16_t __h, uint16_t color) {
 23f065c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
 23f065e:	2900      	cmp	r1, #0
                                             int16_t __h, uint16_t color) {
 23f0660:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
 23f0664:	db77      	blt.n	23f0756 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
 23f0666:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 23f066a:	42b1      	cmp	r1, r6
 23f066c:	da73      	bge.n	23f0756 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
    if (__y < 0) {               // Clip top
 23f066e:	2a00      	cmp	r2, #0
      __h += __y;
 23f0670:	bfbe      	ittt	lt
 23f0672:	189b      	addlt	r3, r3, r2
      __y = 0;
 23f0674:	2200      	movlt	r2, #0
      __h += __y;
 23f0676:	b21b      	sxthlt	r3, r3
    if ((__y + __h) > HEIGHT) { // Clip bottom
 23f0678:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 23f067c:	18d7      	adds	r7, r2, r3
 23f067e:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
 23f0680:	bfc4      	itt	gt
 23f0682:	1aa3      	subgt	r3, r4, r2
 23f0684:	b21b      	sxthgt	r3, r3
    if (__h > 0) { // Proceed only if height is now positive
 23f0686:	2b00      	cmp	r3, #0
 23f0688:	dd65      	ble.n	23f0756 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
 23f068a:	f3c2 04c4 	ubfx	r4, r2, #3, #5
 23f068e:	fb16 1604 	smlabb	r6, r6, r4, r1
 23f0692:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
      if (mod) {
 23f0694:	f012 0207 	ands.w	r2, r2, #7
      uint8_t y = __y, h = __h;
 23f0698:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
 23f069a:	eb07 0406 	add.w	r4, r7, r6
      if (mod) {
 23f069e:	d024      	beq.n	23f06ea <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
 23f06a0:	f1c2 0208 	rsb	r2, r2, #8
 23f06a4:	b2d2      	uxtb	r2, r2
        if (h < mod)
 23f06a6:	4293      	cmp	r3, r2
          mask &= (0XFF >> (mod - h));
 23f06a8:	bf38      	it	cc
 23f06aa:	f04f 0cff 	movcc.w	ip, #255	; 0xff
        uint8_t mask = pgm_read_byte(&premask[mod]);
 23f06ae:	492c      	ldr	r1, [pc, #176]	; (23f0760 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          mask &= (0XFF >> (mod - h));
 23f06b0:	bf38      	it	cc
 23f06b2:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
 23f06b6:	5c89      	ldrb	r1, [r1, r2]
          mask &= (0XFF >> (mod - h));
 23f06b8:	bf3c      	itt	cc
 23f06ba:	fa4c fc0e 	asrcc.w	ip, ip, lr
 23f06be:	ea0c 0101 	andcc.w	r1, ip, r1
        switch (color) {
 23f06c2:	2d01      	cmp	r5, #1
 23f06c4:	d007      	beq.n	23f06d6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
 23f06c6:	2d02      	cmp	r5, #2
 23f06c8:	d02e      	beq.n	23f0728 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
 23f06ca:	b94d      	cbnz	r5, 23f06e0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
          *pBuf &= ~mask;
 23f06cc:	f817 c006 	ldrb.w	ip, [r7, r6]
 23f06d0:	ea2c 0101 	bic.w	r1, ip, r1
 23f06d4:	e003      	b.n	23f06de <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
          *pBuf |= mask;
 23f06d6:	f817 c006 	ldrb.w	ip, [r7, r6]
 23f06da:	ea41 010c 	orr.w	r1, r1, ip
          *pBuf ^= mask;
 23f06de:	55b9      	strb	r1, [r7, r6]
      if (h >= mod) { // More to go?
 23f06e0:	4293      	cmp	r3, r2
 23f06e2:	d338      	bcc.n	23f0756 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
        pBuf += WIDTH;
 23f06e4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 23f06e8:	440c      	add	r4, r1
        h -= mod;
 23f06ea:	1a9a      	subs	r2, r3, r2
 23f06ec:	b2d2      	uxtb	r2, r2
        if (h >= 8) {
 23f06ee:	2a07      	cmp	r2, #7
 23f06f0:	d90e      	bls.n	23f0710 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if (color == SSD1306_INVERSE) {
 23f06f2:	2d02      	cmp	r5, #2
 23f06f4:	d11d      	bne.n	23f0732 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
 23f06f6:	4613      	mov	r3, r2
              *pBuf ^= 0xFF; // Invert byte
 23f06f8:	7821      	ldrb	r1, [r4, #0]
              h -= 8;        // Subtract 8 rows from height
 23f06fa:	3b08      	subs	r3, #8
              *pBuf ^= 0xFF; // Invert byte
 23f06fc:	43c9      	mvns	r1, r1
 23f06fe:	7021      	strb	r1, [r4, #0]
              pBuf += WIDTH; // Advance pointer 8 rows
 23f0700:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h -= 8;        // Subtract 8 rows from height
 23f0704:	b2db      	uxtb	r3, r3
            } while (h >= 8);
 23f0706:	2b07      	cmp	r3, #7
              pBuf += WIDTH; // Advance pointer 8 rows
 23f0708:	440c      	add	r4, r1
            } while (h >= 8);
 23f070a:	d8f5      	bhi.n	23f06f8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
              h -= 8;        // Subtract 8 rows from height
 23f070c:	f002 0207 	and.w	r2, r2, #7
        if (h) { // Do the final partial byte, if necessary
 23f0710:	b30a      	cbz	r2, 23f0756 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
 23f0712:	4b14      	ldr	r3, [pc, #80]	; (23f0764 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x108>)
          switch (color) {
 23f0714:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
 23f0716:	5c9b      	ldrb	r3, [r3, r2]
          switch (color) {
 23f0718:	d01a      	beq.n	23f0750 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf4>
 23f071a:	2d02      	cmp	r5, #2
 23f071c:	d01c      	beq.n	23f0758 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfc>
 23f071e:	b9d5      	cbnz	r5, 23f0756 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
            *pBuf &= ~mask;
 23f0720:	7822      	ldrb	r2, [r4, #0]
 23f0722:	ea22 0303 	bic.w	r3, r2, r3
 23f0726:	e015      	b.n	23f0754 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          *pBuf ^= mask;
 23f0728:	f817 c006 	ldrb.w	ip, [r7, r6]
 23f072c:	ea81 010c 	eor.w	r1, r1, ip
 23f0730:	e7d5      	b.n	23f06de <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
 23f0732:	1e29      	subs	r1, r5, #0
 23f0734:	bf18      	it	ne
 23f0736:	2101      	movne	r1, #1
 23f0738:	4613      	mov	r3, r2
 23f073a:	4249      	negs	r1, r1
 23f073c:	b2c9      	uxtb	r1, r1
              *pBuf = val;   // Set byte
 23f073e:	7021      	strb	r1, [r4, #0]
              h -= 8;        // Subtract 8 rows from height
 23f0740:	3b08      	subs	r3, #8
              pBuf += WIDTH; // Advance pointer 8 rows
 23f0742:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h -= 8;        // Subtract 8 rows from height
 23f0746:	b2db      	uxtb	r3, r3
            } while (h >= 8);
 23f0748:	2b07      	cmp	r3, #7
              pBuf += WIDTH; // Advance pointer 8 rows
 23f074a:	4434      	add	r4, r6
            } while (h >= 8);
 23f074c:	d8f7      	bhi.n	23f073e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe2>
 23f074e:	e7dd      	b.n	23f070c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
            *pBuf |= mask;
 23f0750:	7822      	ldrb	r2, [r4, #0]
 23f0752:	4313      	orrs	r3, r2
            *pBuf ^= mask;
 23f0754:	7023      	strb	r3, [r4, #0]
}
 23f0756:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *pBuf ^= mask;
 23f0758:	7822      	ldrb	r2, [r4, #0]
 23f075a:	4053      	eors	r3, r2
 23f075c:	e7fa      	b.n	23f0754 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
 23f075e:	bf00      	nop
 23f0760:	023ff190 	.word	0x023ff190
 23f0764:	023ff198 	.word	0x023ff198

023f0768 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
                                     uint16_t color) {
 23f0768:	b470      	push	{r4, r5, r6}
 23f076a:	4614      	mov	r4, r2
  switch (rotation) {
 23f076c:	7e82      	ldrb	r2, [r0, #26]
                                     uint16_t color) {
 23f076e:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch (rotation) {
 23f0772:	2a02      	cmp	r2, #2
 23f0774:	d00d      	beq.n	23f0792 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
 23f0776:	2a03      	cmp	r2, #3
 23f0778:	d018      	beq.n	23f07ac <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
 23f077a:	2a01      	cmp	r2, #1
 23f077c:	d111      	bne.n	23f07a2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
 23f077e:	43e4      	mvns	r4, r4
 23f0780:	8902      	ldrh	r2, [r0, #8]
 23f0782:	4414      	add	r4, r2
 23f0784:	b224      	sxth	r4, r4
    drawFastVLineInternal(x, y, w, color);
 23f0786:	460a      	mov	r2, r1
 23f0788:	9603      	str	r6, [sp, #12]
 23f078a:	4621      	mov	r1, r4
}
 23f078c:	bc70      	pop	{r4, r5, r6}
    drawFastVLineInternal(x, y, w, color);
 23f078e:	f7ff bf65 	b.w	23f065c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
 23f0792:	43e4      	mvns	r4, r4
 23f0794:	8942      	ldrh	r2, [r0, #10]
    x -= (w - 1);
 23f0796:	8905      	ldrh	r5, [r0, #8]
 23f0798:	4419      	add	r1, r3
    y = HEIGHT - y - 1;
 23f079a:	4414      	add	r4, r2
    x -= (w - 1);
 23f079c:	1a69      	subs	r1, r5, r1
    y = HEIGHT - y - 1;
 23f079e:	b224      	sxth	r4, r4
    x -= (w - 1);
 23f07a0:	b209      	sxth	r1, r1
    drawFastHLineInternal(x, y, w, color);
 23f07a2:	4622      	mov	r2, r4
 23f07a4:	9603      	str	r6, [sp, #12]
}
 23f07a6:	bc70      	pop	{r4, r5, r6}
    drawFastHLineInternal(x, y, w, color);
 23f07a8:	f7ff bf12 	b.w	23f05d0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w - 1);
 23f07ac:	8945      	ldrh	r5, [r0, #10]
 23f07ae:	4419      	add	r1, r3
 23f07b0:	1a69      	subs	r1, r5, r1
 23f07b2:	b209      	sxth	r1, r1
    break;
 23f07b4:	e7e7      	b.n	23f0786 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

023f07b6 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
                                     uint16_t color) {
 23f07b6:	b430      	push	{r4, r5}
 23f07b8:	4614      	mov	r4, r2
  switch (rotation) {
 23f07ba:	7e82      	ldrb	r2, [r0, #26]
                                     uint16_t color) {
 23f07bc:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch (rotation) {
 23f07c0:	2a02      	cmp	r2, #2
 23f07c2:	d00d      	beq.n	23f07e0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
 23f07c4:	2a03      	cmp	r2, #3
 23f07c6:	d018      	beq.n	23f07fa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
 23f07c8:	2a01      	cmp	r2, #1
 23f07ca:	d111      	bne.n	23f07f0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h - 1);
 23f07cc:	18e2      	adds	r2, r4, r3
 23f07ce:	8904      	ldrh	r4, [r0, #8]
 23f07d0:	1aa4      	subs	r4, r4, r2
 23f07d2:	b224      	sxth	r4, r4
    drawFastHLineInternal(x, y, h, color);
 23f07d4:	460a      	mov	r2, r1
 23f07d6:	9502      	str	r5, [sp, #8]
 23f07d8:	4621      	mov	r1, r4
}
 23f07da:	bc30      	pop	{r4, r5}
    drawFastHLineInternal(x, y, h, color);
 23f07dc:	f7ff bef8 	b.w	23f05d0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH - x - 1;
 23f07e0:	43c9      	mvns	r1, r1
 23f07e2:	8902      	ldrh	r2, [r0, #8]
 23f07e4:	4411      	add	r1, r2
    y -= (h - 1);
 23f07e6:	18e2      	adds	r2, r4, r3
 23f07e8:	8944      	ldrh	r4, [r0, #10]
    x = WIDTH - x - 1;
 23f07ea:	b209      	sxth	r1, r1
    y -= (h - 1);
 23f07ec:	1aa4      	subs	r4, r4, r2
 23f07ee:	b224      	sxth	r4, r4
    drawFastVLineInternal(x, y, h, color);
 23f07f0:	4622      	mov	r2, r4
 23f07f2:	9502      	str	r5, [sp, #8]
}
 23f07f4:	bc30      	pop	{r4, r5}
    drawFastVLineInternal(x, y, h, color);
 23f07f6:	f7ff bf31 	b.w	23f065c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
 23f07fa:	43c9      	mvns	r1, r1
 23f07fc:	8942      	ldrh	r2, [r0, #10]
 23f07fe:	4411      	add	r1, r2
 23f0800:	b209      	sxth	r1, r1
    break;
 23f0802:	e7e7      	b.n	23f07d4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

023f0804 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
 23f0804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f0806:	4604      	mov	r4, r0
  TRANSACTION_START
 23f0808:	6a80      	ldr	r0, [r0, #40]	; 0x28
 23f080a:	2800      	cmp	r0, #0
 23f080c:	d042      	beq.n	23f0894 <_ZN16Adafruit_SSD13067displayEv+0x90>
 23f080e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 23f0810:	f007 fb3a 	bl	23f7e88 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
 23f0814:	2205      	movs	r2, #5
 23f0816:	4620      	mov	r0, r4
 23f0818:	4947      	ldr	r1, [pc, #284]	; (23f0938 <_ZN16Adafruit_SSD13067displayEv+0x134>)
 23f081a:	f7ff fc9d 	bl	23f0158 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
 23f081e:	8921      	ldrh	r1, [r4, #8]
 23f0820:	4620      	mov	r0, r4
 23f0822:	3901      	subs	r1, #1
 23f0824:	b2c9      	uxtb	r1, r1
 23f0826:	f7ff fc29 	bl	23f007c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  if (wire) { // I2C
 23f082a:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
 23f082e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 23f0832:	1dde      	adds	r6, r3, #7
 23f0834:	bf48      	it	mi
 23f0836:	f103 060e 	addmi.w	r6, r3, #14
 23f083a:	8923      	ldrh	r3, [r4, #8]
 23f083c:	10f6      	asrs	r6, r6, #3
 23f083e:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr = buffer;
 23f0842:	fa15 f686 	uxtah	r6, r5, r6
  if (wire) { // I2C
 23f0846:	2800      	cmp	r0, #0
 23f0848:	d03b      	beq.n	23f08c2 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
 23f084a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 23f084e:	f007 fb4d 	bl	23f7eec <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
 23f0852:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f0854:	2140      	movs	r1, #64	; 0x40
 23f0856:	6803      	ldr	r3, [r0, #0]
    uint16_t bytesOut = 1;
 23f0858:	2701      	movs	r7, #1
    WIRE_WRITE((uint8_t)0x40);
 23f085a:	689b      	ldr	r3, [r3, #8]
 23f085c:	4798      	blx	r3
    while (count--) {
 23f085e:	42ae      	cmp	r6, r5
        wire->endTransmission();
 23f0860:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while (count--) {
 23f0862:	d024      	beq.n	23f08ae <_ZN16Adafruit_SSD13067displayEv+0xaa>
      if (bytesOut >= WIRE_MAX) {
 23f0864:	2f1f      	cmp	r7, #31
 23f0866:	d90c      	bls.n	23f0882 <_ZN16Adafruit_SSD13067displayEv+0x7e>
        wire->endTransmission();
 23f0868:	f007 fb47 	bl	23f7efa <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
 23f086c:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 23f0870:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f0872:	f007 fb3b 	bl	23f7eec <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
 23f0876:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f0878:	2140      	movs	r1, #64	; 0x40
 23f087a:	6803      	ldr	r3, [r0, #0]
        bytesOut = 1;
 23f087c:	2701      	movs	r7, #1
        WIRE_WRITE((uint8_t)0x40);
 23f087e:	689b      	ldr	r3, [r3, #8]
 23f0880:	4798      	blx	r3
      WIRE_WRITE(*ptr++);
 23f0882:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f0884:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f0888:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
 23f088a:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
 23f088c:	689b      	ldr	r3, [r3, #8]
 23f088e:	4798      	blx	r3
      bytesOut++;
 23f0890:	b2bf      	uxth	r7, r7
    while (count--) {
 23f0892:	e7e4      	b.n	23f085e <_ZN16Adafruit_SSD13067displayEv+0x5a>
  TRANSACTION_START
 23f0894:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f0896:	b118      	cbz	r0, 23f08a0 <_ZN16Adafruit_SSD13067displayEv+0x9c>
 23f0898:	f104 0164 	add.w	r1, r4, #100	; 0x64
 23f089c:	f008 f866 	bl	23f896c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
 23f08a0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f08a2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f08a4:	6813      	ldr	r3, [r2, #0]
 23f08a6:	ea23 0301 	bic.w	r3, r3, r1
 23f08aa:	6013      	str	r3, [r2, #0]
 23f08ac:	e7b2      	b.n	23f0814 <_ZN16Adafruit_SSD13067displayEv+0x10>
    wire->endTransmission();
 23f08ae:	f007 fb24 	bl	23f7efa <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
 23f08b2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f08b4:	2800      	cmp	r0, #0
 23f08b6:	d032      	beq.n	23f091e <_ZN16Adafruit_SSD13067displayEv+0x11a>
 23f08b8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
}
 23f08ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 23f08be:	f007 bae3 	b.w	23f7e88 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
 23f08c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 23f08c4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 23f08c6:	6813      	ldr	r3, [r2, #0]
 23f08c8:	430b      	orrs	r3, r1
 23f08ca:	6013      	str	r3, [r2, #0]
    while (count--)
 23f08cc:	42b5      	cmp	r5, r6
 23f08ce:	d0f0      	beq.n	23f08b2 <_ZN16Adafruit_SSD13067displayEv+0xae>
  if (spi) {
 23f08d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
      SPIwrite(*ptr++);
 23f08d2:	f815 1b01 	ldrb.w	r1, [r5], #1
  if (spi) {
 23f08d6:	b110      	cbz	r0, 23f08de <_ZN16Adafruit_SSD13067displayEv+0xda>
    (void)spi->transfer(d);
 23f08d8:	f008 f8b6 	bl	23f8a48 <_ZN8SPIClass8transferEh>
 23f08dc:	e7f6      	b.n	23f08cc <_ZN16Adafruit_SSD13067displayEv+0xc8>
 23f08de:	f04f 0e08 	mov.w	lr, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f08e2:	2080      	movs	r0, #128	; 0x80
        *mosiPort |= mosiPinMask;
 23f08e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23f08e6:	f8d4 c048 	ldr.w	ip, [r4, #72]	; 0x48
 23f08ea:	681f      	ldr	r7, [r3, #0]
      if (d & bit)
 23f08ec:	4201      	tst	r1, r0
        *mosiPort |= mosiPinMask;
 23f08ee:	bf14      	ite	ne
 23f08f0:	ea47 070c 	orrne.w	r7, r7, ip
        *mosiPort &= ~mosiPinMask;
 23f08f4:	ea27 070c 	biceq.w	r7, r7, ip
 23f08f8:	601f      	str	r7, [r3, #0]
      *clkPort |= clkPinMask;  // Clock high
 23f08fa:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 23f08fc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 23f08fe:	683b      	ldr	r3, [r7, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f0900:	f1be 0e01 	subs.w	lr, lr, #1
      *clkPort |= clkPinMask;  // Clock high
 23f0904:	ea43 0302 	orr.w	r3, r3, r2
 23f0908:	603b      	str	r3, [r7, #0]
      *clkPort &= ~clkPinMask; // Clock low
 23f090a:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 23f090c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 23f090e:	683b      	ldr	r3, [r7, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f0910:	ea4f 0050 	mov.w	r0, r0, lsr #1
      *clkPort &= ~clkPinMask; // Clock low
 23f0914:	ea23 0302 	bic.w	r3, r3, r2
 23f0918:	603b      	str	r3, [r7, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f091a:	d1e3      	bne.n	23f08e4 <_ZN16Adafruit_SSD13067displayEv+0xe0>
 23f091c:	e7d6      	b.n	23f08cc <_ZN16Adafruit_SSD13067displayEv+0xc8>
  TRANSACTION_END
 23f091e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f0920:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f0922:	6813      	ldr	r3, [r2, #0]
 23f0924:	430b      	orrs	r3, r1
 23f0926:	6013      	str	r3, [r2, #0]
 23f0928:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f092a:	b118      	cbz	r0, 23f0934 <_ZN16Adafruit_SSD13067displayEv+0x130>
}
 23f092c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  TRANSACTION_END
 23f0930:	f008 b802 	b.w	23f8938 <_ZN8SPIClass14endTransactionEv>
}
 23f0934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f0936:	bf00      	nop
 23f0938:	023ff1b2 	.word	0x023ff1b2

023f093c <_ZN17Adafruit_VEML7700C1Ev>:
#include "Adafruit_VEML7700.h"

/*!
 *    @brief  Instantiates a new VEML7700 class
 */
Adafruit_VEML7700::Adafruit_VEML7700(void) {}
 23f093c:	4a03      	ldr	r2, [pc, #12]	; (23f094c <_ZN17Adafruit_VEML7700C1Ev+0x10>)
 23f093e:	6002      	str	r2, [r0, #0]
 23f0940:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 23f0944:	6042      	str	r2, [r0, #4]
 23f0946:	4a02      	ldr	r2, [pc, #8]	; (23f0950 <_ZN17Adafruit_VEML7700C1Ev+0x14>)
 23f0948:	6082      	str	r2, [r0, #8]
 23f094a:	4770      	bx	lr
 23f094c:	3b6bedfa 	.word	0x3b6bedfa
 23f0950:	44480000 	.word	0x44480000

023f0954 <_ZN17Adafruit_VEML77006enableEb>:

/*!
 *    @brief Enable or disable the sensor
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::enable(bool enable) {
 23f0954:	b510      	push	{r4, lr}
 23f0956:	460c      	mov	r4, r1
  ALS_Shutdown->write(!enable);
 23f0958:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 23f095a:	f081 0101 	eor.w	r1, r1, #1
 23f095e:	f7fd fee3 	bl	23ee728 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  //   When activating the sensor, set bit 0 of the command register
  //   to “0” with a wait time of 2.5 ms before the first measurement
  //   is needed, allowing for the correct start of the signal
  //   processor and oscillator.
  //   '''
  if (enable)
 23f0962:	b124      	cbz	r4, 23f096e <_ZN17Adafruit_VEML77006enableEb+0x1a>
    delay(5); // doubling 2.5ms spec to be sure
}
 23f0964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(5); // doubling 2.5ms spec to be sure
 23f0968:	2005      	movs	r0, #5
 23f096a:	f006 bcf5 	b.w	23f7358 <delay>
}
 23f096e:	bd10      	pop	{r4, pc}

023f0970 <_ZN17Adafruit_VEML770015interruptEnableEb>:
/*!
 *    @brief Enable or disable the interrupt
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::interruptEnable(bool enable) {
  ALS_Interrupt_Enable->write(enable);
 23f0970:	6b00      	ldr	r0, [r0, #48]	; 0x30
 23f0972:	f7fd bed9 	b.w	23ee728 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

023f0976 <_ZN17Adafruit_VEML770014setPersistenceEh>:
 *    @brief Set the ALS IRQ persistence setting
 *    @param pers Persistence constant, can be VEML7700_PERS_1, VEML7700_PERS_2,
 *    VEML7700_PERS_4 or VEML7700_PERS_8
 */
void Adafruit_VEML7700::setPersistence(uint8_t pers) {
  ALS_Persistence->write(pers);
 23f0976:	6b40      	ldr	r0, [r0, #52]	; 0x34
 23f0978:	f7fd bed6 	b.w	23ee728 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

023f097c <_ZN17Adafruit_VEML770018getIntegrationTimeEv>:
/*!
 *    @brief Get ALS integration time setting
 *    @returns IT index, can be VEML7700_IT_100MS, VEML7700_IT_200MS,
 * VEML7700_IT_400MS, VEML7700_IT_800MS, VEML7700_IT_50MS or VEML7700_IT_25MS
 */
uint8_t Adafruit_VEML7700::getIntegrationTime(void) {
 23f097c:	b508      	push	{r3, lr}
  return ALS_Integration_Time->read();
 23f097e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 23f0980:	f7fd fec5 	bl	23ee70e <_ZN27Adafruit_BusIO_RegisterBits4readEv>
}
 23f0984:	b2c0      	uxtb	r0, r0
 23f0986:	bd08      	pop	{r3, pc}

023f0988 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv>:

/*!
 *    @brief Get ALS integration time value
 *    @returns ALS integration time in milliseconds
 */
int Adafruit_VEML7700::getIntegrationTimeValue(void) {
 23f0988:	b508      	push	{r3, lr}
  switch (getIntegrationTime()) {
 23f098a:	f7ff fff7 	bl	23f097c <_ZN17Adafruit_VEML770018getIntegrationTimeEv>
 23f098e:	280c      	cmp	r0, #12
 23f0990:	bf96      	itet	ls
 23f0992:	4b03      	ldrls	r3, [pc, #12]	; (23f09a0 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv+0x18>)
 23f0994:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 23f0998:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
  case VEML7700_IT_800MS:
    return 800;
  default:
    return -1;
  }
}
 23f099c:	bd08      	pop	{r3, pc}
 23f099e:	bf00      	nop
 23f09a0:	023ff1b8 	.word	0x023ff1b8

023f09a4 <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>:
void Adafruit_VEML7700::setIntegrationTime(uint8_t it, bool wait) {
 23f09a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f09a6:	4605      	mov	r5, r0
  int flushDelay = wait ? getIntegrationTimeValue() : 0;
 23f09a8:	b17a      	cbz	r2, 23f09ca <_ZN17Adafruit_VEML770018setIntegrationTimeEhb+0x26>
 23f09aa:	9101      	str	r1, [sp, #4]
 23f09ac:	f7ff ffec 	bl	23f0988 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv>
 23f09b0:	4604      	mov	r4, r0
 23f09b2:	9901      	ldr	r1, [sp, #4]
  ALS_Integration_Time->write(it);
 23f09b4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 23f09b6:	f7fd feb7 	bl	23ee728 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  delay(flushDelay);
 23f09ba:	4620      	mov	r0, r4
 23f09bc:	f006 fccc 	bl	23f7358 <delay>
 23f09c0:	f005 fd76 	bl	23f64b0 <HAL_Timer_Get_Milli_Seconds>
  lastRead = millis();
 23f09c4:	60e8      	str	r0, [r5, #12]
}
 23f09c6:	b003      	add	sp, #12
 23f09c8:	bd30      	pop	{r4, r5, pc}
  int flushDelay = wait ? getIntegrationTimeValue() : 0;
 23f09ca:	4614      	mov	r4, r2
 23f09cc:	e7f2      	b.n	23f09b4 <_ZN17Adafruit_VEML770018setIntegrationTimeEhb+0x10>

023f09ce <_ZN17Adafruit_VEML77007setGainEh>:
/*!
 *    @brief Set ALS gain
 *    @param gain Can be VEML7700_GAIN_1, VEML7700_GAIN_2, VEML7700_GAIN_1_8 or
 * VEML7700_GAIN_1_4
 */
void Adafruit_VEML7700::setGain(uint8_t gain) {
 23f09ce:	b510      	push	{r4, lr}
 23f09d0:	4604      	mov	r4, r0
  ALS_Gain->write(gain);
 23f09d2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 23f09d4:	f7fd fea8 	bl	23ee728 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
 23f09d8:	f005 fd6a 	bl	23f64b0 <HAL_Timer_Get_Milli_Seconds>
  lastRead = millis(); // reset
 23f09dc:	60e0      	str	r0, [r4, #12]
}
 23f09de:	bd10      	pop	{r4, pc}

023f09e0 <_ZN17Adafruit_VEML77007getGainEv>:
/*!
 *    @brief Get ALS gain setting
 *    @returns Gain index, can be VEML7700_GAIN_1, VEML7700_GAIN_2,
 * VEML7700_GAIN_1_8 or VEML7700_GAIN_1_4
 */
uint8_t Adafruit_VEML7700::getGain(void) { return ALS_Gain->read(); }
 23f09e0:	b508      	push	{r3, lr}
 23f09e2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 23f09e4:	f7fd fe93 	bl	23ee70e <_ZN27Adafruit_BusIO_RegisterBits4readEv>
 23f09e8:	b2c0      	uxtb	r0, r0
 23f09ea:	bd08      	pop	{r3, pc}

023f09ec <_ZN17Adafruit_VEML770012getGainValueEv>:

/*!
 *    @brief Get ALS gain value
 *    @returns Actual gain value as float
 */
float Adafruit_VEML7700::getGainValue(void) {
 23f09ec:	b508      	push	{r3, lr}
  switch (getGain()) {
 23f09ee:	f7ff fff7 	bl	23f09e0 <_ZN17Adafruit_VEML77007getGainEv>
 23f09f2:	2803      	cmp	r0, #3
 23f09f4:	bf97      	itett	ls
 23f09f6:	4b04      	ldrls	r3, [pc, #16]	; (23f0a08 <_ZN17Adafruit_VEML770012getGainValueEv+0x1c>)
 23f09f8:	eebf 0a00 	vmovhi.f32	s0, #240	; 0xbf800000 -1.0
 23f09fc:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
 23f0a00:	ed90 0a00 	vldrls	s0, [r0]
  case VEML7700_GAIN_2:
    return 2;
  default:
    return -1;
  }
}
 23f0a04:	bd08      	pop	{r3, pc}
 23f0a06:	bf00      	nop
 23f0a08:	023ff1d4 	.word	0x023ff1d4

023f0a0c <_ZN17Adafruit_VEML770015powerSaveEnableEb>:
/*!
 *    @brief Enable power save mode
 *    @param enable True if power save should be enabled
 */
void Adafruit_VEML7700::powerSaveEnable(bool enable) {
  PowerSave_Enable->write(enable);
 23f0a0c:	6c00      	ldr	r0, [r0, #64]	; 0x40
 23f0a0e:	f7fd be8b 	b.w	23ee728 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

023f0a12 <_ZN17Adafruit_VEML77005beginEP7TwoWire>:
bool Adafruit_VEML7700::begin(TwoWire *theWire) {
 23f0a12:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23f0a14:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
 23f0a16:	2010      	movs	r0, #16
bool Adafruit_VEML7700::begin(TwoWire *theWire) {
 23f0a18:	9103      	str	r1, [sp, #12]
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
 23f0a1a:	f7f2 fc6e 	bl	23e32fa <_Znwj>
 23f0a1e:	4605      	mov	r5, r0
 23f0a20:	b118      	cbz	r0, 23f0a2a <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x18>
 23f0a22:	2110      	movs	r1, #16
 23f0a24:	9a03      	ldr	r2, [sp, #12]
 23f0a26:	f7fd fe98 	bl	23ee75a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin()) {
 23f0a2a:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
 23f0a2c:	64a5      	str	r5, [r4, #72]	; 0x48
  if (!i2c_dev->begin()) {
 23f0a2e:	2101      	movs	r1, #1
 23f0a30:	f7fd feaf 	bl	23ee792 <_ZN18Adafruit_I2CDevice5beginEb>
 23f0a34:	4605      	mov	r5, r0
 23f0a36:	2800      	cmp	r0, #0
 23f0a38:	f000 80d6 	beq.w	23f0be8 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x1d6>
      new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_CONFIG, 2, LSBFIRST);
 23f0a3c:	2018      	movs	r0, #24
 23f0a3e:	f7f2 fc5c 	bl	23e32fa <_Znwj>
 23f0a42:	4606      	mov	r6, r0
 23f0a44:	b138      	cbz	r0, 23f0a56 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x44>
 23f0a46:	2301      	movs	r3, #1
 23f0a48:	2200      	movs	r2, #0
 23f0a4a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f0a4c:	e9cd 2300 	strd	r2, r3, [sp]
 23f0a50:	2302      	movs	r3, #2
 23f0a52:	f7fd fd6d 	bl	23ee530 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  ALS_Config =
 23f0a56:	6126      	str	r6, [r4, #16]
      i2c_dev, VEML7700_ALS_THREHOLD_HIGH, 2, LSBFIRST);
 23f0a58:	2018      	movs	r0, #24
 23f0a5a:	f7f2 fc4e 	bl	23e32fa <_Znwj>
 23f0a5e:	4606      	mov	r6, r0
 23f0a60:	b138      	cbz	r0, 23f0a72 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x60>
 23f0a62:	2300      	movs	r3, #0
 23f0a64:	2201      	movs	r2, #1
 23f0a66:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f0a68:	e9cd 3200 	strd	r3, r2, [sp]
 23f0a6c:	2302      	movs	r3, #2
 23f0a6e:	f7fd fd5f 	bl	23ee530 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  ALS_HighThreshold = new Adafruit_I2CRegister(
 23f0a72:	61e6      	str	r6, [r4, #28]
      new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_THREHOLD_LOW, 2, LSBFIRST);
 23f0a74:	2018      	movs	r0, #24
 23f0a76:	f7f2 fc40 	bl	23e32fa <_Znwj>
 23f0a7a:	4606      	mov	r6, r0
 23f0a7c:	b140      	cbz	r0, 23f0a90 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x7e>
 23f0a7e:	2300      	movs	r3, #0
 23f0a80:	2201      	movs	r2, #1
 23f0a82:	e9cd 3200 	strd	r3, r2, [sp]
 23f0a86:	2302      	movs	r3, #2
 23f0a88:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f0a8a:	461a      	mov	r2, r3
 23f0a8c:	f7fd fd50 	bl	23ee530 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  ALS_LowThreshold =
 23f0a90:	6226      	str	r6, [r4, #32]
      new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_POWER_SAVE, 2, LSBFIRST);
 23f0a92:	2018      	movs	r0, #24
 23f0a94:	f7f2 fc31 	bl	23e32fa <_Znwj>
 23f0a98:	4606      	mov	r6, r0
 23f0a9a:	b148      	cbz	r0, 23f0ab0 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x9e>
 23f0a9c:	2300      	movs	r3, #0
 23f0a9e:	f04f 0e01 	mov.w	lr, #1
 23f0aa2:	2203      	movs	r2, #3
 23f0aa4:	e9cd 3e00 	strd	r3, lr, [sp]
 23f0aa8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f0aaa:	2302      	movs	r3, #2
 23f0aac:	f7fd fd40 	bl	23ee530 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Power_Saving =
 23f0ab0:	6266      	str	r6, [r4, #36]	; 0x24
  ALS_Data = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_DATA, 2, LSBFIRST);
 23f0ab2:	2018      	movs	r0, #24
 23f0ab4:	f7f2 fc21 	bl	23e32fa <_Znwj>
 23f0ab8:	4606      	mov	r6, r0
 23f0aba:	b148      	cbz	r0, 23f0ad0 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xbe>
 23f0abc:	2300      	movs	r3, #0
 23f0abe:	f04f 0c01 	mov.w	ip, #1
 23f0ac2:	2204      	movs	r2, #4
 23f0ac4:	e9cd 3c00 	strd	r3, ip, [sp]
 23f0ac8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f0aca:	2302      	movs	r3, #2
 23f0acc:	f7fd fd30 	bl	23ee530 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
 23f0ad0:	6166      	str	r6, [r4, #20]
      new Adafruit_I2CRegister(i2c_dev, VEML7700_WHITE_DATA, 2, LSBFIRST);
 23f0ad2:	2018      	movs	r0, #24
 23f0ad4:	f7f2 fc11 	bl	23e32fa <_Znwj>
 23f0ad8:	4606      	mov	r6, r0
 23f0ada:	b140      	cbz	r0, 23f0aee <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xdc>
 23f0adc:	2300      	movs	r3, #0
 23f0ade:	2101      	movs	r1, #1
 23f0ae0:	2205      	movs	r2, #5
 23f0ae2:	e9cd 3100 	strd	r3, r1, [sp]
 23f0ae6:	2302      	movs	r3, #2
 23f0ae8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f0aea:	f7fd fd21 	bl	23ee530 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  White_Data =
 23f0aee:	61a6      	str	r6, [r4, #24]
      new Adafruit_I2CRegister(i2c_dev, VEML7700_INTERRUPTSTATUS, 2, LSBFIRST);
 23f0af0:	2018      	movs	r0, #24
 23f0af2:	f7f2 fc02 	bl	23e32fa <_Znwj>
 23f0af6:	4606      	mov	r6, r0
 23f0af8:	b140      	cbz	r0, 23f0b0c <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xfa>
 23f0afa:	2300      	movs	r3, #0
 23f0afc:	2201      	movs	r2, #1
 23f0afe:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f0b00:	e9cd 3200 	strd	r3, r2, [sp]
 23f0b04:	2302      	movs	r3, #2
 23f0b06:	2206      	movs	r2, #6
 23f0b08:	f7fd fd12 	bl	23ee530 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Interrupt_Status =
 23f0b0c:	62a6      	str	r6, [r4, #40]	; 0x28
      new Adafruit_I2CRegisterBits(ALS_Config, 1, 0); // # bits, bit_shift
 23f0b0e:	2008      	movs	r0, #8
 23f0b10:	f7f2 fbf3 	bl	23e32fa <_Znwj>
 23f0b14:	4606      	mov	r6, r0
 23f0b16:	b120      	cbz	r0, 23f0b22 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x110>
 23f0b18:	2300      	movs	r3, #0
 23f0b1a:	2201      	movs	r2, #1
 23f0b1c:	6921      	ldr	r1, [r4, #16]
 23f0b1e:	f7fd fdf1 	bl	23ee704 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  ALS_Shutdown =
 23f0b22:	62e6      	str	r6, [r4, #44]	; 0x2c
  ALS_Interrupt_Enable = new Adafruit_I2CRegisterBits(ALS_Config, 1, 1);
 23f0b24:	2008      	movs	r0, #8
 23f0b26:	f7f2 fbe8 	bl	23e32fa <_Znwj>
 23f0b2a:	4606      	mov	r6, r0
 23f0b2c:	b120      	cbz	r0, 23f0b38 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x126>
 23f0b2e:	2301      	movs	r3, #1
 23f0b30:	6921      	ldr	r1, [r4, #16]
 23f0b32:	461a      	mov	r2, r3
 23f0b34:	f7fd fde6 	bl	23ee704 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
 23f0b38:	6326      	str	r6, [r4, #48]	; 0x30
  ALS_Persistence = new Adafruit_I2CRegisterBits(ALS_Config, 2, 4);
 23f0b3a:	2008      	movs	r0, #8
 23f0b3c:	f7f2 fbdd 	bl	23e32fa <_Znwj>
 23f0b40:	4606      	mov	r6, r0
 23f0b42:	b120      	cbz	r0, 23f0b4e <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x13c>
 23f0b44:	2304      	movs	r3, #4
 23f0b46:	2202      	movs	r2, #2
 23f0b48:	6921      	ldr	r1, [r4, #16]
 23f0b4a:	f7fd fddb 	bl	23ee704 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
 23f0b4e:	6366      	str	r6, [r4, #52]	; 0x34
  ALS_Integration_Time = new Adafruit_I2CRegisterBits(ALS_Config, 4, 6);
 23f0b50:	2008      	movs	r0, #8
 23f0b52:	f7f2 fbd2 	bl	23e32fa <_Znwj>
 23f0b56:	4606      	mov	r6, r0
 23f0b58:	b120      	cbz	r0, 23f0b64 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x152>
 23f0b5a:	2306      	movs	r3, #6
 23f0b5c:	2204      	movs	r2, #4
 23f0b5e:	6921      	ldr	r1, [r4, #16]
 23f0b60:	f7fd fdd0 	bl	23ee704 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
 23f0b64:	63a6      	str	r6, [r4, #56]	; 0x38
  ALS_Gain = new Adafruit_I2CRegisterBits(ALS_Config, 2, 11);
 23f0b66:	2008      	movs	r0, #8
 23f0b68:	f7f2 fbc7 	bl	23e32fa <_Znwj>
 23f0b6c:	4606      	mov	r6, r0
 23f0b6e:	b120      	cbz	r0, 23f0b7a <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x168>
 23f0b70:	230b      	movs	r3, #11
 23f0b72:	2202      	movs	r2, #2
 23f0b74:	6921      	ldr	r1, [r4, #16]
 23f0b76:	f7fd fdc5 	bl	23ee704 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
 23f0b7a:	63e6      	str	r6, [r4, #60]	; 0x3c
  PowerSave_Enable = new Adafruit_I2CRegisterBits(Power_Saving, 1, 0);
 23f0b7c:	2008      	movs	r0, #8
 23f0b7e:	f7f2 fbbc 	bl	23e32fa <_Znwj>
 23f0b82:	4606      	mov	r6, r0
 23f0b84:	b120      	cbz	r0, 23f0b90 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x17e>
 23f0b86:	2300      	movs	r3, #0
 23f0b88:	2201      	movs	r2, #1
 23f0b8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 23f0b8c:	f7fd fdba 	bl	23ee704 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
 23f0b90:	6426      	str	r6, [r4, #64]	; 0x40
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
 23f0b92:	2008      	movs	r0, #8
 23f0b94:	f7f2 fbb1 	bl	23e32fa <_Znwj>
 23f0b98:	4606      	mov	r6, r0
 23f0b9a:	b120      	cbz	r0, 23f0ba6 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x194>
 23f0b9c:	2301      	movs	r3, #1
 23f0b9e:	2202      	movs	r2, #2
 23f0ba0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 23f0ba2:	f7fd fdaf 	bl	23ee704 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  enable(false);
 23f0ba6:	2100      	movs	r1, #0
 23f0ba8:	4620      	mov	r0, r4
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
 23f0baa:	6466      	str	r6, [r4, #68]	; 0x44
  enable(false);
 23f0bac:	f7ff fed2 	bl	23f0954 <_ZN17Adafruit_VEML77006enableEb>
  interruptEnable(false);
 23f0bb0:	2100      	movs	r1, #0
 23f0bb2:	4620      	mov	r0, r4
 23f0bb4:	f7ff fedc 	bl	23f0970 <_ZN17Adafruit_VEML770015interruptEnableEb>
  setPersistence(VEML7700_PERS_1);
 23f0bb8:	2100      	movs	r1, #0
 23f0bba:	4620      	mov	r0, r4
 23f0bbc:	f7ff fedb 	bl	23f0976 <_ZN17Adafruit_VEML770014setPersistenceEh>
  setGain(VEML7700_GAIN_1_8);
 23f0bc0:	2102      	movs	r1, #2
 23f0bc2:	4620      	mov	r0, r4
 23f0bc4:	f7ff ff03 	bl	23f09ce <_ZN17Adafruit_VEML77007setGainEh>
  setIntegrationTime(VEML7700_IT_100MS);
 23f0bc8:	2201      	movs	r2, #1
 23f0bca:	2100      	movs	r1, #0
 23f0bcc:	4620      	mov	r0, r4
 23f0bce:	f7ff fee9 	bl	23f09a4 <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>
  powerSaveEnable(false);
 23f0bd2:	2100      	movs	r1, #0
 23f0bd4:	4620      	mov	r0, r4
 23f0bd6:	f7ff ff19 	bl	23f0a0c <_ZN17Adafruit_VEML770015powerSaveEnableEb>
  enable(true);
 23f0bda:	2101      	movs	r1, #1
 23f0bdc:	4620      	mov	r0, r4
 23f0bde:	f7ff feb9 	bl	23f0954 <_ZN17Adafruit_VEML77006enableEb>
 23f0be2:	f005 fc65 	bl	23f64b0 <HAL_Timer_Get_Milli_Seconds>
  lastRead = millis();
 23f0be6:	60e0      	str	r0, [r4, #12]
}
 23f0be8:	4628      	mov	r0, r5
 23f0bea:	b004      	add	sp, #16
 23f0bec:	bd70      	pop	{r4, r5, r6, pc}

023f0bee <_ZN17Adafruit_VEML770013getResolutionEv>:

/*!
 *    @brief Determines resolution for current gain and integration time
 * settings.
 */
float Adafruit_VEML7700::getResolution(void) {
 23f0bee:	b510      	push	{r4, lr}
 23f0bf0:	ed2d 8b04 	vpush	{d8-d9}
 23f0bf4:	4604      	mov	r4, r0
  return MAX_RES * (IT_MAX / getIntegrationTimeValue()) *
 23f0bf6:	edd0 8a00 	vldr	s17, [r0]
 23f0bfa:	ed90 9a02 	vldr	s18, [r0, #8]
 23f0bfe:	f7ff fec3 	bl	23f0988 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv>
 23f0c02:	ee07 0a90 	vmov	s15, r0
 23f0c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f0c0a:	ee89 8a27 	vdiv.f32	s16, s18, s15
         (GAIN_MAX / getGainValue());
 23f0c0e:	4620      	mov	r0, r4
  return MAX_RES * (IT_MAX / getIntegrationTimeValue()) *
 23f0c10:	ee28 8a28 	vmul.f32	s16, s16, s17
         (GAIN_MAX / getGainValue());
 23f0c14:	edd4 8a01 	vldr	s17, [r4, #4]
 23f0c18:	f7ff fee8 	bl	23f09ec <_ZN17Adafruit_VEML770012getGainValueEv>
 23f0c1c:	eec8 7a80 	vdiv.f32	s15, s17, s0
}
 23f0c20:	ee27 0a88 	vmul.f32	s0, s15, s16
 23f0c24:	ecbd 8b04 	vpop	{d8-d9}
 23f0c28:	bd10      	pop	{r4, pc}
 23f0c2a:	0000      	movs	r0, r0
 23f0c2c:	0000      	movs	r0, r0
	...

023f0c30 <_ZN17Adafruit_VEML770010computeLuxEtb>:
 *    @brief Copmute lux from ALS reading.
 *    @param rawALS raw ALS register value
 *    @param corrected if true, apply non-linear correction
 *    @return lux value
 */
float Adafruit_VEML7700::computeLux(uint16_t rawALS, bool corrected) {
 23f0c30:	b538      	push	{r3, r4, r5, lr}
 23f0c32:	ed2d 8b02 	vpush	{d8}
 23f0c36:	ee08 1a10 	vmov	s16, r1
 23f0c3a:	4614      	mov	r4, r2
  float lux = getResolution() * rawALS;
 23f0c3c:	f7ff ffd7 	bl	23f0bee <_ZN17Adafruit_VEML770013getResolutionEv>
 23f0c40:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 23f0c44:	ee28 0a00 	vmul.f32	s0, s16, s0
  if (corrected)
 23f0c48:	b34c      	cbz	r4, 23f0c9e <_ZN17Adafruit_VEML770010computeLuxEtb+0x6e>
    lux = (((6.0135e-13 * lux - 9.3924e-9) * lux + 8.1488e-5) * lux + 1.0023) *
 23f0c4a:	ee10 0a10 	vmov	r0, s0
 23f0c4e:	f7f1 fc97 	bl	23e2580 <__aeabi_f2d>
 23f0c52:	a315      	add	r3, pc, #84	; (adr r3, 23f0ca8 <_ZN17Adafruit_VEML770010computeLuxEtb+0x78>)
 23f0c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f0c58:	4604      	mov	r4, r0
 23f0c5a:	460d      	mov	r5, r1
 23f0c5c:	f7f1 fce8 	bl	23e2630 <__aeabi_dmul>
 23f0c60:	a313      	add	r3, pc, #76	; (adr r3, 23f0cb0 <_ZN17Adafruit_VEML770010computeLuxEtb+0x80>)
 23f0c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f0c66:	f7f1 fb2b 	bl	23e22c0 <__aeabi_dsub>
 23f0c6a:	4622      	mov	r2, r4
 23f0c6c:	462b      	mov	r3, r5
 23f0c6e:	f7f1 fcdf 	bl	23e2630 <__aeabi_dmul>
 23f0c72:	a311      	add	r3, pc, #68	; (adr r3, 23f0cb8 <_ZN17Adafruit_VEML770010computeLuxEtb+0x88>)
 23f0c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f0c78:	f7f1 fb24 	bl	23e22c4 <__adddf3>
 23f0c7c:	4622      	mov	r2, r4
 23f0c7e:	462b      	mov	r3, r5
 23f0c80:	f7f1 fcd6 	bl	23e2630 <__aeabi_dmul>
 23f0c84:	a30e      	add	r3, pc, #56	; (adr r3, 23f0cc0 <_ZN17Adafruit_VEML770010computeLuxEtb+0x90>)
 23f0c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f0c8a:	f7f1 fb1b 	bl	23e22c4 <__adddf3>
 23f0c8e:	4622      	mov	r2, r4
 23f0c90:	462b      	mov	r3, r5
 23f0c92:	f7f1 fccd 	bl	23e2630 <__aeabi_dmul>
 23f0c96:	f7f1 ffc3 	bl	23e2c20 <__aeabi_d2f>
 23f0c9a:	ee00 0a10 	vmov	s0, r0
          lux;
  return lux;
}
 23f0c9e:	ecbd 8b02 	vpop	{d8}
 23f0ca2:	bd38      	pop	{r3, r4, r5, pc}
 23f0ca4:	f3af 8000 	nop.w
 23f0ca8:	b18f283b 	.word	0xb18f283b
 23f0cac:	3d65287a 	.word	0x3d65287a
 23f0cb0:	c91ef46e 	.word	0xc91ef46e
 23f0cb4:	3e442b86 	.word	0x3e442b86
 23f0cb8:	2e18cab0 	.word	0x2e18cab0
 23f0cbc:	3f155c91 	.word	0x3f155c91
 23f0cc0:	b98c7e28 	.word	0xb98c7e28
 23f0cc4:	3ff0096b 	.word	0x3ff0096b

023f0cc8 <_ZN17Adafruit_VEML77008readWaitEv>:

void Adafruit_VEML7700::readWait(void) {
 23f0cc8:	b538      	push	{r3, r4, r5, lr}
 23f0cca:	4605      	mov	r5, r0
  //   at least for the programmed integration time. For example,
  //   for ALS_IT = 100 ms a wait time of ≥ 100 ms is needed.
  //   '''
  // Based on testing, it needs more. So doubling to be sure.

  unsigned long timeToWait = 2 * getIntegrationTimeValue(); // see above
 23f0ccc:	f7ff fe5c 	bl	23f0988 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv>
 23f0cd0:	0044      	lsls	r4, r0, #1
 23f0cd2:	f005 fbed 	bl	23f64b0 <HAL_Timer_Get_Milli_Seconds>
  unsigned long timeWaited = millis() - lastRead;
 23f0cd6:	68eb      	ldr	r3, [r5, #12]
 23f0cd8:	1ac2      	subs	r2, r0, r3

  if (timeWaited < timeToWait)
 23f0cda:	4294      	cmp	r4, r2
 23f0cdc:	d905      	bls.n	23f0cea <_ZN17Adafruit_VEML77008readWaitEv+0x22>
    delay(timeToWait - timeWaited);
 23f0cde:	1a18      	subs	r0, r3, r0
 23f0ce0:	4420      	add	r0, r4
}
 23f0ce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    delay(timeToWait - timeWaited);
 23f0ce6:	f006 bb37 	b.w	23f7358 <delay>
}
 23f0cea:	bd38      	pop	{r3, r4, r5, pc}

023f0cec <_ZN17Adafruit_VEML77007readALSEb>:
uint16_t Adafruit_VEML7700::readALS(bool wait) {
 23f0cec:	b510      	push	{r4, lr}
 23f0cee:	4604      	mov	r4, r0
  if (wait)
 23f0cf0:	b109      	cbz	r1, 23f0cf6 <_ZN17Adafruit_VEML77007readALSEb+0xa>
    readWait();
 23f0cf2:	f7ff ffe9 	bl	23f0cc8 <_ZN17Adafruit_VEML77008readWaitEv>
 23f0cf6:	f005 fbdb 	bl	23f64b0 <HAL_Timer_Get_Milli_Seconds>
  lastRead = millis();
 23f0cfa:	60e0      	str	r0, [r4, #12]
  return ALS_Data->read();
 23f0cfc:	6960      	ldr	r0, [r4, #20]
 23f0cfe:	f7fd fce5 	bl	23ee6cc <_ZN23Adafruit_BusIO_Register4readEv>
}
 23f0d02:	b280      	uxth	r0, r0
 23f0d04:	bd10      	pop	{r4, pc}
	...

023f0d08 <_ZN17Adafruit_VEML77007autoLuxEv>:
 *  @brief Implemenation of App Note "Designing the VEML7700 Into an
 * Application", Vishay Document Number: 84323, Fig. 24 Flow Chart. This will
 * automatically adjust gain and integration time as needed to obtain a good raw
 * count value. Additionally, a non-linear correction is applied if needed.
 */
float Adafruit_VEML7700::autoLux(void) {
 23f0d08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23f0d0a:	4604      	mov	r4, r0
  const uint8_t gains[] = {VEML7700_GAIN_1_8, VEML7700_GAIN_1_4,
 23f0d0c:	4b2e      	ldr	r3, [pc, #184]	; (23f0dc8 <_ZN17Adafruit_VEML77007autoLuxEv+0xc0>)

  uint8_t gainIndex = 0;      // start with ALS gain = 1/8
  uint8_t itIndex = 2;        // start with ALS integration time = 100ms
  bool useCorrection = false; // flag for non-linear correction

  setGain(gains[gainIndex]);
 23f0d0e:	2102      	movs	r1, #2
  const uint8_t gains[] = {VEML7700_GAIN_1_8, VEML7700_GAIN_1_4,
 23f0d10:	9301      	str	r3, [sp, #4]
  const uint8_t intTimes[] = {VEML7700_IT_25MS,  VEML7700_IT_50MS,
 23f0d12:	4b2e      	ldr	r3, [pc, #184]	; (23f0dcc <_ZN17Adafruit_VEML77007autoLuxEv+0xc4>)
 23f0d14:	6818      	ldr	r0, [r3, #0]
 23f0d16:	889b      	ldrh	r3, [r3, #4]
 23f0d18:	9002      	str	r0, [sp, #8]
  setGain(gains[gainIndex]);
 23f0d1a:	4620      	mov	r0, r4
  const uint8_t intTimes[] = {VEML7700_IT_25MS,  VEML7700_IT_50MS,
 23f0d1c:	f8ad 300c 	strh.w	r3, [sp, #12]
  setGain(gains[gainIndex]);
 23f0d20:	f7ff fe55 	bl	23f09ce <_ZN17Adafruit_VEML77007setGainEh>
  setIntegrationTime(intTimes[itIndex]);
 23f0d24:	2201      	movs	r2, #1
 23f0d26:	2100      	movs	r1, #0
 23f0d28:	4620      	mov	r0, r4
 23f0d2a:	f7ff fe3b 	bl	23f09a4 <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>

  uint16_t ALS = readALS(true);
 23f0d2e:	2101      	movs	r1, #1
 23f0d30:	4620      	mov	r0, r4
 23f0d32:	f7ff ffdb 	bl	23f0cec <_ZN17Adafruit_VEML77007readALSEb>
  // Serial.println("** AUTO LUX DEBUG **");
  // Serial.print("ALS initial = "); Serial.println(ALS);

  if (ALS <= 100) {
 23f0d36:	2864      	cmp	r0, #100	; 0x64
 23f0d38:	d82e      	bhi.n	23f0d98 <_ZN17Adafruit_VEML77007autoLuxEv+0x90>
  uint8_t itIndex = 2;        // start with ALS integration time = 100ms
 23f0d3a:	2602      	movs	r6, #2
  uint8_t gainIndex = 0;      // start with ALS gain = 1/8
 23f0d3c:	2500      	movs	r5, #0

    // increase first gain and then integration time as needed
    // compute lux using simple linear formula
    while ((ALS <= 100) && !((gainIndex == 3) && (itIndex == 5))) {
 23f0d3e:	2d03      	cmp	r5, #3
 23f0d40:	d109      	bne.n	23f0d56 <_ZN17Adafruit_VEML77007autoLuxEv+0x4e>
 23f0d42:	2e05      	cmp	r6, #5
 23f0d44:	d11a      	bne.n	23f0d7c <_ZN17Adafruit_VEML77007autoLuxEv+0x74>
  bool useCorrection = false; // flag for non-linear correction
 23f0d46:	2200      	movs	r2, #0
      // Serial.print("ALS  hi lux = "); Serial.println(ALS);
    }
  }
  // Serial.println("** AUTO LUX DEBUG **");

  return computeLux(ALS, useCorrection);
 23f0d48:	4601      	mov	r1, r0
 23f0d4a:	4620      	mov	r0, r4
 23f0d4c:	b004      	add	sp, #16
 23f0d4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return computeLux(ALS, useCorrection);
 23f0d52:	f7ff bf6d 	b.w	23f0c30 <_ZN17Adafruit_VEML770010computeLuxEtb>
      if (gainIndex < 3) {
 23f0d56:	2d02      	cmp	r5, #2
 23f0d58:	d810      	bhi.n	23f0d7c <_ZN17Adafruit_VEML77007autoLuxEv+0x74>
        setGain(gains[++gainIndex]);
 23f0d5a:	1c6b      	adds	r3, r5, #1
 23f0d5c:	aa04      	add	r2, sp, #16
 23f0d5e:	b2dd      	uxtb	r5, r3
 23f0d60:	fa52 f383 	uxtab	r3, r2, r3
 23f0d64:	4620      	mov	r0, r4
 23f0d66:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 23f0d6a:	f7ff fe30 	bl	23f09ce <_ZN17Adafruit_VEML77007setGainEh>
      ALS = readALS(true);
 23f0d6e:	2101      	movs	r1, #1
 23f0d70:	4620      	mov	r0, r4
 23f0d72:	f7ff ffbb 	bl	23f0cec <_ZN17Adafruit_VEML77007readALSEb>
    while ((ALS <= 100) && !((gainIndex == 3) && (itIndex == 5))) {
 23f0d76:	2864      	cmp	r0, #100	; 0x64
 23f0d78:	d9e1      	bls.n	23f0d3e <_ZN17Adafruit_VEML77007autoLuxEv+0x36>
 23f0d7a:	e7e4      	b.n	23f0d46 <_ZN17Adafruit_VEML77007autoLuxEv+0x3e>
      } else if (itIndex < 5) {
 23f0d7c:	2e04      	cmp	r6, #4
 23f0d7e:	d8f6      	bhi.n	23f0d6e <_ZN17Adafruit_VEML77007autoLuxEv+0x66>
        setIntegrationTime(intTimes[++itIndex]);
 23f0d80:	aa04      	add	r2, sp, #16
 23f0d82:	1c73      	adds	r3, r6, #1
 23f0d84:	b2de      	uxtb	r6, r3
 23f0d86:	fa52 f383 	uxtab	r3, r2, r3
 23f0d8a:	4620      	mov	r0, r4
 23f0d8c:	2201      	movs	r2, #1
 23f0d8e:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 23f0d92:	f7ff fe07 	bl	23f09a4 <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>
 23f0d96:	e7ea      	b.n	23f0d6e <_ZN17Adafruit_VEML77007autoLuxEv+0x66>
  uint8_t itIndex = 2;        // start with ALS integration time = 100ms
 23f0d98:	2502      	movs	r5, #2
    while ((ALS > 10000) && (itIndex > 0)) {
 23f0d9a:	f242 7610 	movw	r6, #10000	; 0x2710
 23f0d9e:	42b0      	cmp	r0, r6
 23f0da0:	d910      	bls.n	23f0dc4 <_ZN17Adafruit_VEML77007autoLuxEv+0xbc>
 23f0da2:	b17d      	cbz	r5, 23f0dc4 <_ZN17Adafruit_VEML77007autoLuxEv+0xbc>
      setIntegrationTime(intTimes[--itIndex]);
 23f0da4:	aa04      	add	r2, sp, #16
 23f0da6:	1e6b      	subs	r3, r5, #1
 23f0da8:	b2dd      	uxtb	r5, r3
 23f0daa:	fa52 f383 	uxtab	r3, r2, r3
 23f0dae:	4620      	mov	r0, r4
 23f0db0:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 23f0db4:	2201      	movs	r2, #1
 23f0db6:	f7ff fdf5 	bl	23f09a4 <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>
      ALS = readALS(true);
 23f0dba:	2101      	movs	r1, #1
 23f0dbc:	4620      	mov	r0, r4
 23f0dbe:	f7ff ff95 	bl	23f0cec <_ZN17Adafruit_VEML77007readALSEb>
    while ((ALS > 10000) && (itIndex > 0)) {
 23f0dc2:	e7ec      	b.n	23f0d9e <_ZN17Adafruit_VEML77007autoLuxEv+0x96>
    useCorrection = true;
 23f0dc4:	2201      	movs	r2, #1
 23f0dc6:	e7bf      	b.n	23f0d48 <_ZN17Adafruit_VEML77007autoLuxEv+0x40>
 23f0dc8:	01000302 	.word	0x01000302
 23f0dcc:	023fc8d0 	.word	0x023fc8d0

023f0dd0 <_ZN17Adafruit_VEML77007readLuxE9luxMethod>:
float Adafruit_VEML7700::readLux(luxMethod method) {
 23f0dd0:	b510      	push	{r4, lr}
 23f0dd2:	4604      	mov	r4, r0
 23f0dd4:	ed2d 8b02 	vpush	{d8}
 23f0dd8:	2904      	cmp	r1, #4
 23f0dda:	d82b      	bhi.n	23f0e34 <_ZN17Adafruit_VEML77007readLuxE9luxMethod+0x64>
 23f0ddc:	e8df f001 	tbb	[pc, r1]
 23f0de0:	03242213 	.word	0x03242213
 23f0de4:	15          	.byte	0x15
 23f0de5:	00          	.byte	0x00
  bool wait = true;
 23f0de6:	2100      	movs	r1, #0
    return computeLux(readALS(wait));
 23f0de8:	4620      	mov	r0, r4
 23f0dea:	f7ff ff7f 	bl	23f0cec <_ZN17Adafruit_VEML77007readALSEb>
 23f0dee:	ee08 0a10 	vmov	s16, r0
  float lux = getResolution() * rawALS;
 23f0df2:	4620      	mov	r0, r4
 23f0df4:	f7ff fefb 	bl	23f0bee <_ZN17Adafruit_VEML770013getResolutionEv>
 23f0df8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 23f0dfc:	ee28 0a00 	vmul.f32	s0, s16, s0
}
 23f0e00:	ecbd 8b02 	vpop	{d8}
 23f0e04:	bd10      	pop	{r4, pc}
  bool wait = true;
 23f0e06:	2101      	movs	r1, #1
 23f0e08:	e7ee      	b.n	23f0de8 <_ZN17Adafruit_VEML77007readLuxE9luxMethod+0x18>
 23f0e0a:	2100      	movs	r1, #0
    return computeLux(readALS(wait), true);
 23f0e0c:	4620      	mov	r0, r4
 23f0e0e:	f7ff ff6d 	bl	23f0cec <_ZN17Adafruit_VEML77007readALSEb>
}
 23f0e12:	ecbd 8b02 	vpop	{d8}
    return computeLux(readALS(wait), true);
 23f0e16:	4601      	mov	r1, r0
 23f0e18:	2201      	movs	r2, #1
 23f0e1a:	4620      	mov	r0, r4
}
 23f0e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return computeLux(readALS(wait), true);
 23f0e20:	f7ff bf06 	b.w	23f0c30 <_ZN17Adafruit_VEML770010computeLuxEtb>
  bool wait = true;
 23f0e24:	2101      	movs	r1, #1
 23f0e26:	e7f1      	b.n	23f0e0c <_ZN17Adafruit_VEML77007readLuxE9luxMethod+0x3c>
}
 23f0e28:	ecbd 8b02 	vpop	{d8}
 23f0e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return autoLux();
 23f0e30:	f7ff bf6a 	b.w	23f0d08 <_ZN17Adafruit_VEML77007autoLuxEv>
  bool wait = true;
 23f0e34:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 23f0e38:	e7e2      	b.n	23f0e00 <_ZN17Adafruit_VEML77007readLuxE9luxMethod+0x30>

023f0e3a <_ZN7TwoWire5writeEi.isra.0>:
  inline size_t write(int n) { return write((uint8_t)n); }
 23f0e3a:	6803      	ldr	r3, [r0, #0]
 23f0e3c:	b2c9      	uxtb	r1, r1
 23f0e3e:	689b      	ldr	r3, [r3, #8]
 23f0e40:	4718      	bx	r3

023f0e42 <_ZN8LeafSensC1Ev>:
 */
#include "LeafSens.h"


LeafSens::LeafSens(){
  addr=0x61;
 23f0e42:	2361      	movs	r3, #97	; 0x61
 23f0e44:	7103      	strb	r3, [r0, #4]
}
 23f0e46:	4770      	bx	lr

023f0e48 <_ZN8LeafSens4initEh>:
  _wire = the_wire;
  addr = address;
  return 0;
}

int LeafSens::init(uint8_t address){
 23f0e48:	b538      	push	{r3, r4, r5, lr}
 23f0e4a:	4604      	mov	r4, r0
 23f0e4c:	460d      	mov	r5, r1
  _wire = &Wire;
 23f0e4e:	f008 fce9 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23f0e52:	6020      	str	r0, [r4, #0]
  _wire->begin();
 23f0e54:	f007 f81c 	bl	23f7e90 <_ZN7TwoWire5beginEv>
  // _wire->setClock(100000L);
  addr = address;
  return 0;
}
 23f0e58:	2000      	movs	r0, #0
  addr = address;
 23f0e5a:	7125      	strb	r5, [r4, #4]
}
 23f0e5c:	bd38      	pop	{r3, r4, r5, pc}

023f0e5e <_ZN8LeafSens8i2cdelayEi>:


bool LeafSens::i2cdelay(int size){
 23f0e5e:	b570      	push	{r4, r5, r6, lr}
 23f0e60:	4606      	mov	r6, r0
  delay(1);
 23f0e62:	2001      	movs	r0, #1
bool LeafSens::i2cdelay(int size){
 23f0e64:	460d      	mov	r5, r1
  int i=0;
 23f0e66:	2400      	movs	r4, #0
  delay(1);
 23f0e68:	f006 fa76 	bl	23f7358 <delay>
  for (;_wire->available() < size && i<=size;i++) {
 23f0e6c:	6830      	ldr	r0, [r6, #0]
 23f0e6e:	6803      	ldr	r3, [r0, #0]
 23f0e70:	691b      	ldr	r3, [r3, #16]
 23f0e72:	4798      	blx	r3
 23f0e74:	42a8      	cmp	r0, r5
 23f0e76:	da06      	bge.n	23f0e86 <_ZN8LeafSens8i2cdelayEi+0x28>
 23f0e78:	42ac      	cmp	r4, r5
 23f0e7a:	dc09      	bgt.n	23f0e90 <_ZN8LeafSens8i2cdelayEi+0x32>
	  delay(2);
 23f0e7c:	2002      	movs	r0, #2
 23f0e7e:	f006 fa6b 	bl	23f7358 <delay>
  for (;_wire->available() < size && i<=size;i++) {
 23f0e82:	3401      	adds	r4, #1
 23f0e84:	e7f2      	b.n	23f0e6c <_ZN8LeafSens8i2cdelayEi+0xe>
  }
  if(i>=size){
 23f0e86:	42ac      	cmp	r4, r5
 23f0e88:	bfac      	ite	ge
 23f0e8a:	2000      	movge	r0, #0
 23f0e8c:	2001      	movlt	r0, #1
	  return false;
  }else{
	  return true;
  }
}
 23f0e8e:	bd70      	pop	{r4, r5, r6, pc}
	  return false;
 23f0e90:	2000      	movs	r0, #0
 23f0e92:	e7fc      	b.n	23f0e8e <_ZN8LeafSens8i2cdelayEi+0x30>

023f0e94 <_ZN8LeafSens8getStateEv>:

int LeafSens::getState(){ //-1:no data, 0:err, 1:ok
 23f0e94:	b510      	push	{r4, lr}
 23f0e96:	4604      	mov	r4, r0
  _wire->requestFrom(addr, (uint8_t)1);
 23f0e98:	7901      	ldrb	r1, [r0, #4]
 23f0e9a:	2201      	movs	r2, #1
 23f0e9c:	6800      	ldr	r0, [r0, #0]
 23f0e9e:	f007 f81e 	bl	23f7ede <_ZN7TwoWire11requestFromEhj>
   if(i2cdelay(1)){
 23f0ea2:	2101      	movs	r1, #1
 23f0ea4:	4620      	mov	r0, r4
 23f0ea6:	f7ff ffda 	bl	23f0e5e <_ZN8LeafSens8i2cdelayEi>
 23f0eaa:	b128      	cbz	r0, 23f0eb8 <_ZN8LeafSens8getStateEv+0x24>
    return _wire->read();
 23f0eac:	6820      	ldr	r0, [r4, #0]
  }else{
    return -1;
  }
}
 23f0eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return _wire->read();
 23f0eb2:	6803      	ldr	r3, [r0, #0]
 23f0eb4:	695b      	ldr	r3, [r3, #20]
 23f0eb6:	4718      	bx	r3
}
 23f0eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23f0ebc:	bd10      	pop	{r4, pc}

023f0ebe <_ZN8LeafSens6getValEh>:

int16_t LeafSens::getVal(byte reg){
 23f0ebe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f0ec0:	4604      	mov	r4, r0
 23f0ec2:	460d      	mov	r5, r1

  _wire->beginTransmission(addr); // transmit to device
 23f0ec4:	7901      	ldrb	r1, [r0, #4]
 23f0ec6:	6800      	ldr	r0, [r0, #0]
 23f0ec8:	f007 f80c 	bl	23f7ee4 <_ZN7TwoWire17beginTransmissionEh>
  _wire->write(reg);              // sends one byte
 23f0ecc:	6820      	ldr	r0, [r4, #0]
 23f0ece:	4629      	mov	r1, r5
 23f0ed0:	6803      	ldr	r3, [r0, #0]
 23f0ed2:	689b      	ldr	r3, [r3, #8]
 23f0ed4:	4798      	blx	r3
  _wire->endTransmission();    // stop transmitting
 23f0ed6:	6820      	ldr	r0, [r4, #0]
 23f0ed8:	f007 f80f 	bl	23f7efa <_ZN7TwoWire15endTransmissionEv>
  delay(10);
 23f0edc:	200a      	movs	r0, #10
 23f0ede:	f006 fa3b 	bl	23f7358 <delay>
  _wire->requestFrom(addr, (uint8_t)2);
 23f0ee2:	7921      	ldrb	r1, [r4, #4]
 23f0ee4:	2202      	movs	r2, #2
 23f0ee6:	6820      	ldr	r0, [r4, #0]
 23f0ee8:	f006 fff9 	bl	23f7ede <_ZN7TwoWire11requestFromEhj>
  int16_t ret=0;
 23f0eec:	2300      	movs	r3, #0
  if(i2cdelay(2)){
 23f0eee:	2102      	movs	r1, #2
 23f0ef0:	4620      	mov	r0, r4
  int16_t ret=0;
 23f0ef2:	f8ad 3006 	strh.w	r3, [sp, #6]
  if(i2cdelay(2)){
 23f0ef6:	f7ff ffb2 	bl	23f0e5e <_ZN8LeafSens8i2cdelayEi>
 23f0efa:	b158      	cbz	r0, 23f0f14 <_ZN8LeafSens6getValEh+0x56>
	byte *pointer = (byte *)&ret;
    pointer[0] = _wire->read();
 23f0efc:	6820      	ldr	r0, [r4, #0]
 23f0efe:	6803      	ldr	r3, [r0, #0]
 23f0f00:	695b      	ldr	r3, [r3, #20]
 23f0f02:	4798      	blx	r3
 23f0f04:	f88d 0006 	strb.w	r0, [sp, #6]
    pointer[1] = _wire->read();
 23f0f08:	6820      	ldr	r0, [r4, #0]
 23f0f0a:	6803      	ldr	r3, [r0, #0]
 23f0f0c:	695b      	ldr	r3, [r3, #20]
 23f0f0e:	4798      	blx	r3
 23f0f10:	f88d 0007 	strb.w	r0, [sp, #7]
  }
  return ret;
}
 23f0f14:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 23f0f18:	b003      	add	sp, #12
 23f0f1a:	bd30      	pop	{r4, r5, pc}

023f0f1c <_ZN8LeafSens10newReadingEv>:
    return 0;
  }
  return 1;
}

int LeafSens::newReading(){
 23f0f1c:	b510      	push	{r4, lr}
 23f0f1e:	4604      	mov	r4, r0
  _wire->beginTransmission(addr); // transmit to device
 23f0f20:	7901      	ldrb	r1, [r0, #4]
 23f0f22:	6800      	ldr	r0, [r0, #0]
 23f0f24:	f006 ffde 	bl	23f7ee4 <_ZN7TwoWire17beginTransmissionEh>
  _wire->write(REG_READ_ST);              // sends one byte
 23f0f28:	2101      	movs	r1, #1
 23f0f2a:	6820      	ldr	r0, [r4, #0]
 23f0f2c:	f7ff ff85 	bl	23f0e3a <_ZN7TwoWire5writeEi.isra.0>
  _wire->endTransmission();    // stop transmitting
 23f0f30:	6820      	ldr	r0, [r4, #0]
 23f0f32:	f006 ffe2 	bl	23f7efa <_ZN7TwoWire15endTransmissionEv>
  delay(200); // let sensor read the data
 23f0f36:	20c8      	movs	r0, #200	; 0xc8
 23f0f38:	f006 fa0e 	bl	23f7358 <delay>
  return getState();
 23f0f3c:	4620      	mov	r0, r4
}
 23f0f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return getState();
 23f0f42:	f7ff bfa7 	b.w	23f0e94 <_ZN8LeafSens8getStateEv>
	...

023f0f48 <_ZN8LeafSens6getWetEv>:

float LeafSens::getWet()
{
 23f0f48:	b508      	push	{r3, lr}
  return getVal(REG_WET)/100.0;
 23f0f4a:	2105      	movs	r1, #5
 23f0f4c:	f7ff ffb7 	bl	23f0ebe <_ZN8LeafSens6getValEh>
 23f0f50:	f7f1 fb04 	bl	23e255c <__aeabi_i2d>
 23f0f54:	2200      	movs	r2, #0
 23f0f56:	4b04      	ldr	r3, [pc, #16]	; (23f0f68 <_ZN8LeafSens6getWetEv+0x20>)
 23f0f58:	f7f1 fc94 	bl	23e2884 <__aeabi_ddiv>
 23f0f5c:	f7f1 fe60 	bl	23e2c20 <__aeabi_d2f>
}
 23f0f60:	ee00 0a10 	vmov	s0, r0
 23f0f64:	bd08      	pop	{r3, pc}
 23f0f66:	bf00      	nop
 23f0f68:	40590000 	.word	0x40590000

023f0f6c <_ZN8LeafSens7getTempEv>:

float LeafSens::getTemp()
{
 23f0f6c:	b508      	push	{r3, lr}
  return getVal(REG_TEMP)/100.0;
 23f0f6e:	2104      	movs	r1, #4
 23f0f70:	f7ff ffa5 	bl	23f0ebe <_ZN8LeafSens6getValEh>
 23f0f74:	f7f1 faf2 	bl	23e255c <__aeabi_i2d>
 23f0f78:	2200      	movs	r2, #0
 23f0f7a:	4b04      	ldr	r3, [pc, #16]	; (23f0f8c <_ZN8LeafSens7getTempEv+0x20>)
 23f0f7c:	f7f1 fc82 	bl	23e2884 <__aeabi_ddiv>
 23f0f80:	f7f1 fe4e 	bl	23e2c20 <__aeabi_d2f>
}
 23f0f84:	ee00 0a10 	vmov	s0, r0
 23f0f88:	bd08      	pop	{r3, pc}
 23f0f8a:	bf00      	nop
 23f0f8c:	40590000 	.word	0x40590000

023f0f90 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
 23f0f90:	2001      	movs	r0, #1
 23f0f92:	4770      	bx	lr

023f0f94 <_ZN15RHGenericDriver13waitAvailableEv>:

// Blocks until a valid message is received
void RHGenericDriver::waitAvailable()
{
 23f0f94:	b510      	push	{r4, lr}
 23f0f96:	4604      	mov	r4, r0
    while (!available())
 23f0f98:	6823      	ldr	r3, [r4, #0]
 23f0f9a:	4620      	mov	r0, r4
 23f0f9c:	685b      	ldr	r3, [r3, #4]
 23f0f9e:	4798      	blx	r3
 23f0fa0:	2800      	cmp	r0, #0
 23f0fa2:	d0f9      	beq.n	23f0f98 <_ZN15RHGenericDriver13waitAvailableEv+0x4>
	YIELD;
}
 23f0fa4:	bd10      	pop	{r4, pc}

023f0fa6 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
 23f0fa6:	7903      	ldrb	r3, [r0, #4]
 23f0fa8:	2b03      	cmp	r3, #3
 23f0faa:	d0fc      	beq.n	23f0fa6 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
 23f0fac:	2001      	movs	r0, #1
 23f0fae:	4770      	bx	lr

023f0fb0 <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
 23f0fb0:	2000      	movs	r0, #0
 23f0fb2:	4770      	bx	lr

023f0fb4 <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
 23f0fb4:	7181      	strb	r1, [r0, #6]
}
 23f0fb6:	4770      	bx	lr

023f0fb8 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
 23f0fb8:	7141      	strb	r1, [r0, #5]
}
 23f0fba:	4770      	bx	lr

023f0fbc <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
 23f0fbc:	72c1      	strb	r1, [r0, #11]
}
 23f0fbe:	4770      	bx	lr

023f0fc0 <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
 23f0fc0:	7301      	strb	r1, [r0, #12]
}
 23f0fc2:	4770      	bx	lr

023f0fc4 <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
 23f0fc4:	7341      	strb	r1, [r0, #13]
}
 23f0fc6:	4770      	bx	lr

023f0fc8 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
 23f0fc8:	7b83      	ldrb	r3, [r0, #14]
 23f0fca:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
 23f0fce:	4311      	orrs	r1, r2
 23f0fd0:	7381      	strb	r1, [r0, #14]
}
 23f0fd2:	4770      	bx	lr

023f0fd4 <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
 23f0fd4:	79c0      	ldrb	r0, [r0, #7]
}
 23f0fd6:	4770      	bx	lr

023f0fd8 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
 23f0fd8:	7a00      	ldrb	r0, [r0, #8]
}
 23f0fda:	4770      	bx	lr

023f0fdc <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
 23f0fdc:	7a40      	ldrb	r0, [r0, #9]
}
 23f0fde:	4770      	bx	lr

023f0fe0 <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
 23f0fe0:	7a80      	ldrb	r0, [r0, #10]
}
 23f0fe2:	4770      	bx	lr

023f0fe4 <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
 23f0fe4:	8a00      	ldrh	r0, [r0, #16]
}
 23f0fe6:	b200      	sxth	r0, r0
 23f0fe8:	4770      	bx	lr

023f0fea <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
 23f0fea:	7900      	ldrb	r0, [r0, #4]
}
 23f0fec:	4770      	bx	lr

023f0fee <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
 23f0fee:	7101      	strb	r1, [r0, #4]
}
 23f0ff0:	4770      	bx	lr

023f0ff2 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
 23f0ff2:	8a40      	ldrh	r0, [r0, #18]
}
 23f0ff4:	b280      	uxth	r0, r0
 23f0ff6:	4770      	bx	lr

023f0ff8 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
 23f0ff8:	8a80      	ldrh	r0, [r0, #20]
}
 23f0ffa:	b280      	uxth	r0, r0
 23f0ffc:	4770      	bx	lr

023f0ffe <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
 23f0ffe:	8ac0      	ldrh	r0, [r0, #22]
}
 23f1000:	b280      	uxth	r0, r0
 23f1002:	4770      	bx	lr

023f1004 <_ZN15RHGenericDriver20waitAvailableTimeoutEt>:
{
 23f1004:	b570      	push	{r4, r5, r6, lr}
 23f1006:	4604      	mov	r4, r0
 23f1008:	460e      	mov	r6, r1
 23f100a:	f005 fa51 	bl	23f64b0 <HAL_Timer_Get_Milli_Seconds>
 23f100e:	4605      	mov	r5, r0
 23f1010:	f005 fa4e 	bl	23f64b0 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
 23f1014:	1b40      	subs	r0, r0, r5
 23f1016:	42b0      	cmp	r0, r6
 23f1018:	d206      	bcs.n	23f1028 <_ZN15RHGenericDriver20waitAvailableTimeoutEt+0x24>
        if (available())
 23f101a:	6823      	ldr	r3, [r4, #0]
 23f101c:	4620      	mov	r0, r4
 23f101e:	685b      	ldr	r3, [r3, #4]
 23f1020:	4798      	blx	r3
 23f1022:	2800      	cmp	r0, #0
 23f1024:	d0f4      	beq.n	23f1010 <_ZN15RHGenericDriver20waitAvailableTimeoutEt+0xc>
}
 23f1026:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 23f1028:	2000      	movs	r0, #0
 23f102a:	e7fc      	b.n	23f1026 <_ZN15RHGenericDriver20waitAvailableTimeoutEt+0x22>

023f102c <_ZN15RHGenericDriver14waitPacketSentEt>:
{
 23f102c:	b570      	push	{r4, r5, r6, lr}
 23f102e:	4604      	mov	r4, r0
 23f1030:	460e      	mov	r6, r1
 23f1032:	f005 fa3d 	bl	23f64b0 <HAL_Timer_Get_Milli_Seconds>
 23f1036:	4605      	mov	r5, r0
 23f1038:	f005 fa3a 	bl	23f64b0 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
 23f103c:	1b40      	subs	r0, r0, r5
 23f103e:	42b0      	cmp	r0, r6
 23f1040:	d204      	bcs.n	23f104c <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
 23f1042:	7923      	ldrb	r3, [r4, #4]
 23f1044:	2b03      	cmp	r3, #3
 23f1046:	d0f7      	beq.n	23f1038 <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
 23f1048:	2001      	movs	r0, #1
}
 23f104a:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 23f104c:	2000      	movs	r0, #0
 23f104e:	e7fc      	b.n	23f104a <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

023f1050 <_ZN15RHGenericDriver7waitCADEv>:
{
 23f1050:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
 23f1052:	69c3      	ldr	r3, [r0, #28]
{
 23f1054:	4604      	mov	r4, r0
    if (!_cad_timeout)
 23f1056:	b1b3      	cbz	r3, 23f1086 <_ZN15RHGenericDriver7waitCADEv+0x36>
 23f1058:	f005 fa2a 	bl	23f64b0 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
 23f105c:	2664      	movs	r6, #100	; 0x64
 23f105e:	4605      	mov	r5, r0
    while (isChannelActive())
 23f1060:	6823      	ldr	r3, [r4, #0]
 23f1062:	4620      	mov	r0, r4
 23f1064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f1066:	4798      	blx	r3
 23f1068:	b168      	cbz	r0, 23f1086 <_ZN15RHGenericDriver7waitCADEv+0x36>
 23f106a:	f005 fa21 	bl	23f64b0 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
 23f106e:	69e3      	ldr	r3, [r4, #28]
 23f1070:	1b40      	subs	r0, r0, r5
 23f1072:	4298      	cmp	r0, r3
 23f1074:	d809      	bhi.n	23f108a <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
 23f1076:	210a      	movs	r1, #10
 23f1078:	2001      	movs	r0, #1
 23f107a:	f007 fc02 	bl	23f8882 <_Z6randomii>
 23f107e:	4370      	muls	r0, r6
 23f1080:	f006 f96a 	bl	23f7358 <delay>
    while (isChannelActive())
 23f1084:	e7ec      	b.n	23f1060 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
 23f1086:	2001      	movs	r0, #1
}
 23f1088:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
 23f108a:	2000      	movs	r0, #0
 23f108c:	e7fc      	b.n	23f1088 <_ZN15RHGenericDriver7waitCADEv+0x38>
	...

023f1090 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
 23f1090:	4a06      	ldr	r2, [pc, #24]	; (23f10ac <_ZN15RHGenericDriverC1Ev+0x1c>)
 23f1092:	21ff      	movs	r1, #255	; 0xff
 23f1094:	6002      	str	r2, [r0, #0]
 23f1096:	2200      	movs	r2, #0
 23f1098:	7141      	strb	r1, [r0, #5]
 23f109a:	7102      	strb	r2, [r0, #4]
 23f109c:	72c1      	strb	r1, [r0, #11]
 23f109e:	8242      	strh	r2, [r0, #18]
 23f10a0:	8181      	strh	r1, [r0, #12]
 23f10a2:	8282      	strh	r2, [r0, #20]
 23f10a4:	7382      	strb	r2, [r0, #14]
 23f10a6:	82c2      	strh	r2, [r0, #22]
 23f10a8:	61c2      	str	r2, [r0, #28]
}
 23f10aa:	4770      	bx	lr
 23f10ac:	023ff1ec 	.word	0x023ff1ec

023f10b0 <_ZN12RHGenericSPI15attachInterruptEv>:
    virtual uint8_t transfer(uint8_t data) = 0;

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
 23f10b0:	4770      	bx	lr

023f10b2 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
 23f10b2:	4770      	bx	lr

023f10b4 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
 23f10b4:	4770      	bx	lr

023f10b6 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
 23f10b6:	4770      	bx	lr

023f10b8 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Tells the SPI support software that SPI transactions will occur with the interrupt
    /// handler assocated with interruptNumber
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){}
 23f10b8:	4770      	bx	lr

023f10ba <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
 23f10ba:	7141      	strb	r1, [r0, #5]
}
 23f10bc:	4770      	bx	lr

023f10be <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
 23f10be:	7181      	strb	r1, [r0, #6]
}
 23f10c0:	4770      	bx	lr

023f10c2 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
 23f10c2:	7101      	strb	r1, [r0, #4]
}
 23f10c4:	4770      	bx	lr
	...

023f10c8 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
 23f10c8:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
 23f10ca:	4d03      	ldr	r5, [pc, #12]	; (23f10d8 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
 23f10cc:	7101      	strb	r1, [r0, #4]
 23f10ce:	6005      	str	r5, [r0, #0]
 23f10d0:	7142      	strb	r2, [r0, #5]
 23f10d2:	7183      	strb	r3, [r0, #6]
}
 23f10d4:	bd30      	pop	{r4, r5, pc}
 23f10d6:	bf00      	nop
 23f10d8:	023ff264 	.word	0x023ff264

023f10dc <_ZN13RHHardwareSPI14usingInterruptEh>:
void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
#if defined(SPI_HAS_TRANSACTION)

#endif
}
 23f10dc:	4770      	bx	lr
	...

023f10e0 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
 23f10e0:	b510      	push	{r4, lr}
 23f10e2:	4604      	mov	r4, r0
    RHGenericSPI(frequency, bitOrder, dataMode)
 23f10e4:	f7ff fff0 	bl	23f10c8 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
 23f10e8:	4b05      	ldr	r3, [pc, #20]	; (23f1100 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
}
 23f10ea:	4620      	mov	r0, r4
    RHGenericSPI(frequency, bitOrder, dataMode)
 23f10ec:	6023      	str	r3, [r4, #0]
 23f10ee:	4b05      	ldr	r3, [pc, #20]	; (23f1104 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
 23f10f0:	60a3      	str	r3, [r4, #8]
 23f10f2:	2301      	movs	r3, #1
 23f10f4:	7323      	strb	r3, [r4, #12]
 23f10f6:	2300      	movs	r3, #0
 23f10f8:	6123      	str	r3, [r4, #16]
 23f10fa:	82a3      	strh	r3, [r4, #20]
}
 23f10fc:	bd10      	pop	{r4, pc}
 23f10fe:	bf00      	nop
 23f1100:	023ff298 	.word	0x023ff298
 23f1104:	023fe4ac 	.word	0x023fe4ac

023f1108 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>:
    static SPIClass& instance() {
 23f1108:	b510      	push	{r4, lr}
        static SPIClass instance(Interface);
 23f110a:	4c09      	ldr	r4, [pc, #36]	; (23f1130 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x28>)
 23f110c:	e8d4 3f8f 	ldab	r3, [r4]
 23f1110:	07db      	lsls	r3, r3, #31
 23f1112:	d40a      	bmi.n	23f112a <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x22>
 23f1114:	4620      	mov	r0, r4
 23f1116:	f006 f903 	bl	23f7320 <__cxa_guard_acquire>
 23f111a:	b130      	cbz	r0, 23f112a <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x22>
 23f111c:	2101      	movs	r1, #1
 23f111e:	4805      	ldr	r0, [pc, #20]	; (23f1134 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x2c>)
 23f1120:	f007 fbc6 	bl	23f88b0 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23f1124:	4620      	mov	r0, r4
 23f1126:	f006 f909 	bl	23f733c <__cxa_guard_release>
        return instance;
    }
 23f112a:	4802      	ldr	r0, [pc, #8]	; (23f1134 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x2c>)
 23f112c:	bd10      	pop	{r4, pc}
 23f112e:	bf00      	nop
 23f1130:	1007ae54 	.word	0x1007ae54
 23f1134:	1007ae58 	.word	0x1007ae58

023f1138 <_ZN13RHHardwareSPI8transferEh>:
{
 23f1138:	b507      	push	{r0, r1, r2, lr}
 23f113a:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 23f113c:	f7ff ffe4 	bl	23f1108 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
 23f1140:	9901      	ldr	r1, [sp, #4]
}
 23f1142:	b003      	add	sp, #12
 23f1144:	f85d eb04 	ldr.w	lr, [sp], #4
 23f1148:	f007 bc7e 	b.w	23f8a48 <_ZN8SPIClass8transferEh>

023f114c <_ZN13RHHardwareSPI15attachInterruptEv>:
{
 23f114c:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
 23f114e:	f7ff ffdb 	bl	23f1108 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
 23f1152:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 23f1156:	f007 bc90 	b.w	23f8a7a <_ZN8SPIClass15attachInterruptEv>

023f115a <_ZN13RHHardwareSPI15detachInterruptEv>:
{
 23f115a:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
 23f115c:	f7ff ffd4 	bl	23f1108 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
 23f1160:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 23f1164:	f007 bc8a 	b.w	23f8a7c <_ZN8SPIClass15detachInterruptEv>

023f1168 <_ZN13RHHardwareSPI5beginEv>:
{
 23f1168:	b510      	push	{r4, lr}
   if (_frequency == Frequency16MHz)
 23f116a:	7903      	ldrb	r3, [r0, #4]
 23f116c:	2b04      	cmp	r3, #4
 23f116e:	d021      	beq.n	23f11b4 <_ZN13RHHardwareSPI5beginEv+0x4c>
   else if (_frequency == Frequency8MHz)
 23f1170:	2b03      	cmp	r3, #3
 23f1172:	d021      	beq.n	23f11b8 <_ZN13RHHardwareSPI5beginEv+0x50>
   else if (_frequency == Frequency4MHz)
 23f1174:	2b02      	cmp	r3, #2
 23f1176:	d021      	beq.n	23f11bc <_ZN13RHHardwareSPI5beginEv+0x54>
       frequency = 1000000;
 23f1178:	4a11      	ldr	r2, [pc, #68]	; (23f11c0 <_ZN13RHHardwareSPI5beginEv+0x58>)
 23f117a:	4912      	ldr	r1, [pc, #72]	; (23f11c4 <_ZN13RHHardwareSPI5beginEv+0x5c>)
 23f117c:	2b01      	cmp	r3, #1
 23f117e:	bf18      	it	ne
 23f1180:	460a      	movne	r2, r1
   if (_bitOrder == BitOrderLSBFirst)
 23f1182:	7941      	ldrb	r1, [r0, #5]
    if (_dataMode == DataMode0)
 23f1184:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
 23f1186:	3901      	subs	r1, #1
 23f1188:	bf18      	it	ne
 23f118a:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
 23f118c:	b133      	cbz	r3, 23f119c <_ZN13RHHardwareSPI5beginEv+0x34>
    else if (_dataMode == DataMode1)
 23f118e:	2b01      	cmp	r3, #1
 23f1190:	d004      	beq.n	23f119c <_ZN13RHHardwareSPI5beginEv+0x34>
    else if (_dataMode == DataMode2)
 23f1192:	2b02      	cmp	r3, #2
 23f1194:	d002      	beq.n	23f119c <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
 23f1196:	2b03      	cmp	r3, #3
 23f1198:	bf18      	it	ne
 23f119a:	2300      	movne	r3, #0
class SPISettings : public Printable {
 23f119c:	2400      	movs	r4, #0
 23f119e:	7501      	strb	r1, [r0, #20]
 23f11a0:	7304      	strb	r4, [r0, #12]
 23f11a2:	6102      	str	r2, [r0, #16]
 23f11a4:	7543      	strb	r3, [r0, #21]
        instance().begin(ss_pin);
 23f11a6:	f7ff ffaf 	bl	23f1108 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
 23f11aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f11ae:	21ff      	movs	r1, #255	; 0xff
 23f11b0:	f007 bb9c 	b.w	23f88ec <_ZN8SPIClass5beginEt>
       frequency = 16000000;
 23f11b4:	4a04      	ldr	r2, [pc, #16]	; (23f11c8 <_ZN13RHHardwareSPI5beginEv+0x60>)
 23f11b6:	e7e4      	b.n	23f1182 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
 23f11b8:	4a04      	ldr	r2, [pc, #16]	; (23f11cc <_ZN13RHHardwareSPI5beginEv+0x64>)
 23f11ba:	e7e2      	b.n	23f1182 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
 23f11bc:	4a04      	ldr	r2, [pc, #16]	; (23f11d0 <_ZN13RHHardwareSPI5beginEv+0x68>)
 23f11be:	e7e0      	b.n	23f1182 <_ZN13RHHardwareSPI5beginEv+0x1a>
 23f11c0:	001e8480 	.word	0x001e8480
 23f11c4:	000f4240 	.word	0x000f4240
 23f11c8:	00f42400 	.word	0x00f42400
 23f11cc:	007a1200 	.word	0x007a1200
 23f11d0:	003d0900 	.word	0x003d0900

023f11d4 <_ZN13RHHardwareSPI3endEv>:
{
 23f11d4:	b508      	push	{r3, lr}
        instance().end();
 23f11d6:	f7ff ff97 	bl	23f1108 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
 23f11da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 23f11de:	f007 bb99 	b.w	23f8914 <_ZN8SPIClass3endEv>

023f11e2 <_ZN13RHHardwareSPI16beginTransactionEv>:
{
 23f11e2:	b510      	push	{r4, lr}
 23f11e4:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
 23f11e6:	f7ff ff8f 	bl	23f1108 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
 23f11ea:	f104 0108 	add.w	r1, r4, #8
}
 23f11ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f11f2:	f007 bbbb 	b.w	23f896c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

023f11f6 <_ZN13RHHardwareSPI14endTransactionEv>:
{
 23f11f6:	b508      	push	{r3, lr}
        instance().endTransaction();
 23f11f8:	f7ff ff86 	bl	23f1108 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
 23f11fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 23f1200:	f007 bb9a 	b.w	23f8938 <_ZN8SPIClass14endTransactionEv>

023f1204 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
 23f1204:	2300      	movs	r3, #0
 23f1206:	4802      	ldr	r0, [pc, #8]	; (23f1210 <_GLOBAL__sub_I_hardware_spi+0xc>)
 23f1208:	461a      	mov	r2, r3
 23f120a:	4619      	mov	r1, r3
 23f120c:	f7ff bf68 	b.w	23f10e0 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
 23f1210:	1007ae60 	.word	0x1007ae60

023f1214 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
 23f1214:	b510      	push	{r4, lr}
 23f1216:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
 23f1218:	6a00      	ldr	r0, [r0, #32]
 23f121a:	6803      	ldr	r3, [r0, #0]
 23f121c:	68db      	ldr	r3, [r3, #12]
 23f121e:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin
    pinMode(_slaveSelectPin, OUTPUT);
 23f1220:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f1224:	2101      	movs	r1, #1
 23f1226:	f008 fa79 	bl	23f971c <pinMode>
    digitalWrite(_slaveSelectPin, HIGH);
 23f122a:	2101      	movs	r1, #1
 23f122c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f1230:	f008 fa85 	bl	23f973e <digitalWrite>

    delay(100);
 23f1234:	2064      	movs	r0, #100	; 0x64
 23f1236:	f006 f88f 	bl	23f7358 <delay>
    return true;
}
 23f123a:	2001      	movs	r0, #1
 23f123c:	bd10      	pop	{r4, pc}
	...

023f1240 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
 23f1240:	b570      	push	{r4, r5, r6, lr}
 23f1242:	4604      	mov	r4, r0
 23f1244:	460d      	mov	r5, r1
 23f1246:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
 23f1248:	f7ff ff22 	bl	23f1090 <_ZN15RHGenericDriverC1Ev>
 23f124c:	4b03      	ldr	r3, [pc, #12]	; (23f125c <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
}
 23f124e:	4620      	mov	r0, r4
    _slaveSelectPin(slaveSelectPin)
 23f1250:	6023      	str	r3, [r4, #0]
 23f1252:	6226      	str	r6, [r4, #32]
 23f1254:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
 23f1258:	bd70      	pop	{r4, r5, r6, pc}
 23f125a:	bf00      	nop
 23f125c:	023ff2cc 	.word	0x023ff2cc

023f1260 <_ZN11RHSPIDriver7spiReadEh>:

uint8_t RHSPIDriver::spiRead(uint8_t reg)
{
 23f1260:	b538      	push	{r3, r4, r5, lr}
 23f1262:	4604      	mov	r4, r0
 23f1264:	460d      	mov	r5, r1
    uint8_t val;
    ATOMIC_BLOCK_START;
    digitalWrite(_slaveSelectPin, LOW);
 23f1266:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 23f126a:	2100      	movs	r1, #0
 23f126c:	f008 fa67 	bl	23f973e <digitalWrite>
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
 23f1270:	6a20      	ldr	r0, [r4, #32]
 23f1272:	f005 017f 	and.w	r1, r5, #127	; 0x7f
 23f1276:	6803      	ldr	r3, [r0, #0]
 23f1278:	681b      	ldr	r3, [r3, #0]
 23f127a:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
 23f127c:	6a20      	ldr	r0, [r4, #32]
 23f127e:	2100      	movs	r1, #0
 23f1280:	6803      	ldr	r3, [r0, #0]
 23f1282:	681b      	ldr	r3, [r3, #0]
 23f1284:	4798      	blx	r3
 23f1286:	4605      	mov	r5, r0
    digitalWrite(_slaveSelectPin, HIGH);
 23f1288:	2101      	movs	r1, #1
 23f128a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f128e:	f008 fa56 	bl	23f973e <digitalWrite>
    ATOMIC_BLOCK_END;
    return val;
}
 23f1292:	4628      	mov	r0, r5
 23f1294:	bd38      	pop	{r3, r4, r5, pc}

023f1296 <_ZN11RHSPIDriver8spiWriteEhh>:

uint8_t RHSPIDriver::spiWrite(uint8_t reg, uint8_t val)
{
 23f1296:	b570      	push	{r4, r5, r6, lr}
 23f1298:	4604      	mov	r4, r0
 23f129a:	460d      	mov	r5, r1
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
    _spi.beginTransaction();
 23f129c:	6a00      	ldr	r0, [r0, #32]
{
 23f129e:	4616      	mov	r6, r2
    _spi.beginTransaction();
 23f12a0:	6803      	ldr	r3, [r0, #0]
 23f12a2:	6a1b      	ldr	r3, [r3, #32]
 23f12a4:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, LOW);
 23f12a6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f12aa:	2100      	movs	r1, #0
 23f12ac:	f008 fa47 	bl	23f973e <digitalWrite>
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
 23f12b0:	6a20      	ldr	r0, [r4, #32]
 23f12b2:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23f12b6:	6803      	ldr	r3, [r0, #0]
 23f12b8:	681b      	ldr	r3, [r3, #0]
 23f12ba:	4798      	blx	r3
 23f12bc:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
 23f12be:	6a20      	ldr	r0, [r4, #32]
 23f12c0:	4631      	mov	r1, r6
 23f12c2:	6803      	ldr	r3, [r0, #0]
 23f12c4:	681b      	ldr	r3, [r3, #0]
 23f12c6:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, HIGH);
 23f12c8:	2101      	movs	r1, #1
 23f12ca:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f12ce:	f008 fa36 	bl	23f973e <digitalWrite>
    _spi.endTransaction();
 23f12d2:	6a20      	ldr	r0, [r4, #32]
 23f12d4:	6803      	ldr	r3, [r0, #0]
 23f12d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f12d8:	4798      	blx	r3
    ATOMIC_BLOCK_END;
    return status;
}
 23f12da:	4628      	mov	r0, r5
 23f12dc:	bd70      	pop	{r4, r5, r6, pc}

023f12de <_ZN11RHSPIDriver12spiBurstReadEhPhh>:

uint8_t RHSPIDriver::spiBurstRead(uint8_t reg, uint8_t* dest, uint8_t len)
{
 23f12de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f12e0:	4604      	mov	r4, r0
 23f12e2:	460f      	mov	r7, r1
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
    _spi.beginTransaction();
 23f12e4:	6a00      	ldr	r0, [r0, #32]
{
 23f12e6:	461e      	mov	r6, r3
    _spi.beginTransaction();
 23f12e8:	6803      	ldr	r3, [r0, #0]
{
 23f12ea:	4615      	mov	r5, r2
    _spi.beginTransaction();
 23f12ec:	6a1b      	ldr	r3, [r3, #32]
 23f12ee:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, LOW);
 23f12f0:	2100      	movs	r1, #0
 23f12f2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f12f6:	f008 fa22 	bl	23f973e <digitalWrite>
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
 23f12fa:	6a20      	ldr	r0, [r4, #32]
 23f12fc:	f007 017f 	and.w	r1, r7, #127	; 0x7f
 23f1300:	6803      	ldr	r3, [r0, #0]
 23f1302:	442e      	add	r6, r5
 23f1304:	681b      	ldr	r3, [r3, #0]
 23f1306:	4798      	blx	r3
 23f1308:	4607      	mov	r7, r0
    while (len--)
 23f130a:	42b5      	cmp	r5, r6
 23f130c:	d007      	beq.n	23f131e <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x40>
	*dest++ = _spi.transfer(0);
 23f130e:	6a20      	ldr	r0, [r4, #32]
 23f1310:	2100      	movs	r1, #0
 23f1312:	6803      	ldr	r3, [r0, #0]
 23f1314:	681b      	ldr	r3, [r3, #0]
 23f1316:	4798      	blx	r3
 23f1318:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
 23f131c:	e7f5      	b.n	23f130a <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2c>
    digitalWrite(_slaveSelectPin, HIGH);
 23f131e:	2101      	movs	r1, #1
 23f1320:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f1324:	f008 fa0b 	bl	23f973e <digitalWrite>
    _spi.endTransaction();
 23f1328:	6a20      	ldr	r0, [r4, #32]
 23f132a:	6803      	ldr	r3, [r0, #0]
 23f132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f132e:	4798      	blx	r3
    ATOMIC_BLOCK_END;
    return status;
}
 23f1330:	4638      	mov	r0, r7
 23f1332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f1334 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:

uint8_t RHSPIDriver::spiBurstWrite(uint8_t reg, const uint8_t* src, uint8_t len)
{
 23f1334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f1336:	4604      	mov	r4, r0
 23f1338:	460f      	mov	r7, r1
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
    _spi.beginTransaction();
 23f133a:	6a00      	ldr	r0, [r0, #32]
{
 23f133c:	461e      	mov	r6, r3
    _spi.beginTransaction();
 23f133e:	6803      	ldr	r3, [r0, #0]
{
 23f1340:	4615      	mov	r5, r2
    _spi.beginTransaction();
 23f1342:	6a1b      	ldr	r3, [r3, #32]
 23f1344:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, LOW);
 23f1346:	2100      	movs	r1, #0
 23f1348:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f134c:	f008 f9f7 	bl	23f973e <digitalWrite>
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
 23f1350:	6a20      	ldr	r0, [r4, #32]
 23f1352:	f047 0180 	orr.w	r1, r7, #128	; 0x80
 23f1356:	6803      	ldr	r3, [r0, #0]
 23f1358:	442e      	add	r6, r5
 23f135a:	681b      	ldr	r3, [r3, #0]
 23f135c:	4798      	blx	r3
 23f135e:	4607      	mov	r7, r0
    while (len--)
 23f1360:	42b5      	cmp	r5, r6
 23f1362:	d006      	beq.n	23f1372 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3e>
	_spi.transfer(*src++);
 23f1364:	6a20      	ldr	r0, [r4, #32]
 23f1366:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f136a:	6803      	ldr	r3, [r0, #0]
 23f136c:	681b      	ldr	r3, [r3, #0]
 23f136e:	4798      	blx	r3
    while (len--)
 23f1370:	e7f6      	b.n	23f1360 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2c>
    digitalWrite(_slaveSelectPin, HIGH);
 23f1372:	2101      	movs	r1, #1
 23f1374:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f1378:	f008 f9e1 	bl	23f973e <digitalWrite>
    _spi.endTransaction();
 23f137c:	6a20      	ldr	r0, [r4, #32]
 23f137e:	6803      	ldr	r3, [r0, #0]
 23f1380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f1382:	4798      	blx	r3
    ATOMIC_BLOCK_END;
    return status;
}
 23f1384:	4638      	mov	r0, r7
 23f1386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f1388 <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _slaveSelectPin = slaveSelectPin;
}

void RHSPIDriver::spiUsingInterrupt(uint8_t interruptNumber)
{
    _spi.usingInterrupt(interruptNumber);
 23f1388:	6a00      	ldr	r0, [r0, #32]
 23f138a:	6803      	ldr	r3, [r0, #0]
 23f138c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f138e:	4718      	bx	r3

023f1390 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
 23f1390:	20fb      	movs	r0, #251	; 0xfb
 23f1392:	4770      	bx	lr

023f1394 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
 23f1394:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
 23f1396:	7903      	ldrb	r3, [r0, #4]
{
 23f1398:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
 23f139a:	2b05      	cmp	r3, #5
 23f139c:	d00a      	beq.n	23f13b4 <_ZN7RH_RF9515isChannelActiveEv+0x20>
    {
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
 23f139e:	2207      	movs	r2, #7
 23f13a0:	2101      	movs	r1, #1
 23f13a2:	f7ff ff78 	bl	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
 23f13a6:	2280      	movs	r2, #128	; 0x80
 23f13a8:	2140      	movs	r1, #64	; 0x40
 23f13aa:	4620      	mov	r0, r4
 23f13ac:	f7ff ff73 	bl	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
 23f13b0:	2305      	movs	r3, #5
 23f13b2:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
 23f13b4:	7923      	ldrb	r3, [r4, #4]
 23f13b6:	2b05      	cmp	r3, #5
 23f13b8:	d0fc      	beq.n	23f13b4 <_ZN7RH_RF9515isChannelActiveEv+0x20>
        YIELD;

    return _cad;
 23f13ba:	7e20      	ldrb	r0, [r4, #24]
}
 23f13bc:	bd10      	pop	{r4, pc}

023f13be <_ZN7RH_RF955sleepEv>:
{
 23f13be:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
 23f13c0:	7903      	ldrb	r3, [r0, #4]
{
 23f13c2:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
 23f13c4:	2b01      	cmp	r3, #1
 23f13c6:	d005      	beq.n	23f13d4 <_ZN7RH_RF955sleepEv+0x16>
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
 23f13c8:	2200      	movs	r2, #0
 23f13ca:	2101      	movs	r1, #1
 23f13cc:	f7ff ff63 	bl	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
 23f13d0:	2301      	movs	r3, #1
 23f13d2:	7123      	strb	r3, [r4, #4]
}
 23f13d4:	2001      	movs	r0, #1
 23f13d6:	bd10      	pop	{r4, pc}

023f13d8 <_ZN7RH_RF954recvEPhS0_>:
{
 23f13d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
 23f13da:	6803      	ldr	r3, [r0, #0]
{
 23f13dc:	4604      	mov	r4, r0
    if (!available())
 23f13de:	685b      	ldr	r3, [r3, #4]
{
 23f13e0:	460f      	mov	r7, r1
 23f13e2:	4615      	mov	r5, r2
    if (!available())
 23f13e4:	4798      	blx	r3
 23f13e6:	4606      	mov	r6, r0
 23f13e8:	b1b8      	cbz	r0, 23f141a <_ZN7RH_RF954recvEPhS0_+0x42>
    if (buf && len)
 23f13ea:	b18f      	cbz	r7, 23f1410 <_ZN7RH_RF954recvEPhS0_+0x38>
 23f13ec:	b185      	cbz	r5, 23f1410 <_ZN7RH_RF954recvEPhS0_+0x38>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
 23f13ee:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 23f13f2:	782a      	ldrb	r2, [r5, #0]
 23f13f4:	3b03      	subs	r3, #3
 23f13f6:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
 23f13f8:	bfd8      	it	le
 23f13fa:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
 23f13fe:	4638      	mov	r0, r7
	    *len = _bufLen-RH_RF95_HEADER_LEN;
 23f1400:	bfdc      	itt	le
 23f1402:	3b04      	suble	r3, #4
 23f1404:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
 23f1406:	782a      	ldrb	r2, [r5, #0]
 23f1408:	f104 012d 	add.w	r1, r4, #45	; 0x2d
 23f140c:	f00a ffde 	bl	23fc3cc <memcpy>
    _rxBufValid = false;
 23f1410:	2300      	movs	r3, #0
 23f1412:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
 23f1416:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 23f141a:	4630      	mov	r0, r6
 23f141c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f141e <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 23)
 23f141e:	2917      	cmp	r1, #23
void RH_RF95::setTxPower(int8_t power, bool useRFO)
 23f1420:	b538      	push	{r3, r4, r5, lr}
 23f1422:	4605      	mov	r5, r0
 23f1424:	460c      	mov	r4, r1
	if (power > 23)
 23f1426:	dc14      	bgt.n	23f1452 <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 5)
 23f1428:	2904      	cmp	r1, #4
 23f142a:	dd14      	ble.n	23f1456 <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 20)
 23f142c:	2914      	cmp	r1, #20
 23f142e:	dd13      	ble.n	23f1458 <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
 23f1430:	2207      	movs	r2, #7
 23f1432:	214d      	movs	r1, #77	; 0x4d
 23f1434:	4628      	mov	r0, r5
 23f1436:	f7ff ff2e 	bl	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
 23f143a:	3c03      	subs	r4, #3
 23f143c:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
 23f143e:	1f62      	subs	r2, r4, #5
 23f1440:	f062 027f 	orn	r2, r2, #127	; 0x7f
 23f1444:	4628      	mov	r0, r5
}
 23f1446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
 23f144a:	2109      	movs	r1, #9
 23f144c:	b2d2      	uxtb	r2, r2
 23f144e:	f7ff bf22 	b.w	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 23;
 23f1452:	2417      	movs	r4, #23
 23f1454:	e7ec      	b.n	23f1430 <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 5;
 23f1456:	2405      	movs	r4, #5
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
 23f1458:	2204      	movs	r2, #4
 23f145a:	214d      	movs	r1, #77	; 0x4d
 23f145c:	4628      	mov	r0, r5
 23f145e:	f7ff ff1a 	bl	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
 23f1462:	e7ec      	b.n	23f143e <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>

023f1464 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
 23f1464:	b538      	push	{r3, r4, r5, lr}
 23f1466:	4604      	mov	r4, r0
 23f1468:	4615      	mov	r5, r2
    _rxBufValid(0)
 23f146a:	461a      	mov	r2, r3
 23f146c:	f7ff fee8 	bl	23f1240 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
 23f1470:	4b05      	ldr	r3, [pc, #20]	; (23f1488 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x24>)
}
 23f1472:	4620      	mov	r0, r4
    _rxBufValid(0)
 23f1474:	6023      	str	r3, [r4, #0]
 23f1476:	2300      	movs	r3, #0
 23f1478:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _myInterruptIndex = 0xff; // Not allocated yet
 23f147c:	23ff      	movs	r3, #255	; 0xff
    _interruptPin = interruptPin;
 23f147e:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _myInterruptIndex = 0xff; // Not allocated yet
 23f1482:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
}
 23f1486:	bd38      	pop	{r3, r4, r5, pc}
 23f1488:	023ff350 	.word	0x023ff350

023f148c <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
 23f148c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 23f1490:	2b03      	cmp	r3, #3
 23f1492:	d91b      	bls.n	23f14cc <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
 23f1494:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 23f1498:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
 23f149a:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 23f149e:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
 23f14a0:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 23f14a4:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
 23f14a6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 23f14aa:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
 23f14ac:	7983      	ldrb	r3, [r0, #6]
 23f14ae:	b933      	cbnz	r3, 23f14be <_ZN7RH_RF9513validateRxBufEv+0x32>
 23f14b0:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
 23f14b2:	7942      	ldrb	r2, [r0, #5]
 23f14b4:	429a      	cmp	r2, r3
 23f14b6:	d002      	beq.n	23f14be <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
 23f14b8:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
 23f14ba:	2bff      	cmp	r3, #255	; 0xff
 23f14bc:	d106      	bne.n	23f14cc <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
 23f14be:	8a83      	ldrh	r3, [r0, #20]
 23f14c0:	3301      	adds	r3, #1
 23f14c2:	b29b      	uxth	r3, r3
 23f14c4:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
 23f14c6:	2301      	movs	r3, #1
 23f14c8:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
 23f14cc:	4770      	bx	lr
	...

023f14d0 <_ZN7RH_RF9512setFrequencyEf>:
{
 23f14d0:	b538      	push	{r3, r4, r5, lr}
 23f14d2:	4604      	mov	r4, r0
 23f14d4:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
 23f14d8:	ee10 0a10 	vmov	r0, s0
{
 23f14dc:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
 23f14e0:	f7f1 f84e 	bl	23e2580 <__aeabi_f2d>
 23f14e4:	a317      	add	r3, pc, #92	; (adr r3, 23f1544 <_ZN7RH_RF9512setFrequencyEf+0x74>)
 23f14e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f14ea:	f7f1 f8a1 	bl	23e2630 <__aeabi_dmul>
 23f14ee:	a317      	add	r3, pc, #92	; (adr r3, 23f154c <_ZN7RH_RF9512setFrequencyEf+0x7c>)
 23f14f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f14f4:	f7f1 f9c6 	bl	23e2884 <__aeabi_ddiv>
 23f14f8:	f7f1 fb72 	bl	23e2be0 <__aeabi_d2uiz>
 23f14fc:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
 23f14fe:	f3c0 4207 	ubfx	r2, r0, #16, #8
 23f1502:	2106      	movs	r1, #6
 23f1504:	4620      	mov	r0, r4
 23f1506:	f7ff fec6 	bl	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
 23f150a:	2107      	movs	r1, #7
 23f150c:	f3c5 2207 	ubfx	r2, r5, #8, #8
 23f1510:	4620      	mov	r0, r4
 23f1512:	f7ff fec0 	bl	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
 23f1516:	2108      	movs	r1, #8
 23f1518:	4620      	mov	r0, r4
 23f151a:	b2ea      	uxtb	r2, r5
 23f151c:	f7ff febb 	bl	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
 23f1520:	eddf 7a07 	vldr	s15, [pc, #28]	; 23f1540 <_ZN7RH_RF9512setFrequencyEf+0x70>
 23f1524:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
 23f1528:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
 23f152c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f1530:	bfac      	ite	ge
 23f1532:	2301      	movge	r3, #1
 23f1534:	2300      	movlt	r3, #0
}
 23f1536:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
 23f1538:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
 23f153c:	bd38      	pop	{r3, r4, r5, pc}
 23f153e:	bf00      	nop
 23f1540:	4442c000 	.word	0x4442c000
 23f1544:	00000000 	.word	0x00000000
 23f1548:	412e8480 	.word	0x412e8480
 23f154c:	00000000 	.word	0x00000000
 23f1550:	404e8480 	.word	0x404e8480

023f1554 <_ZN7RH_RF9511setModeIdleEv>:
{
 23f1554:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
 23f1556:	7903      	ldrb	r3, [r0, #4]
{
 23f1558:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
 23f155a:	2b02      	cmp	r3, #2
 23f155c:	d005      	beq.n	23f156a <_ZN7RH_RF9511setModeIdleEv+0x16>
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
 23f155e:	2201      	movs	r2, #1
 23f1560:	4611      	mov	r1, r2
 23f1562:	f7ff fe98 	bl	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
 23f1566:	2302      	movs	r3, #2
 23f1568:	7123      	strb	r3, [r4, #4]
}
 23f156a:	bd10      	pop	{r4, pc}

023f156c <_ZN7RH_RF9515handleInterruptEv>:
{
 23f156c:	b538      	push	{r3, r4, r5, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
 23f156e:	2112      	movs	r1, #18
{
 23f1570:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
 23f1572:	f7ff fe75 	bl	23f1260 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t crc_present = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
 23f1576:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
 23f1578:	4605      	mov	r5, r0
    uint8_t crc_present = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
 23f157a:	4620      	mov	r0, r4
 23f157c:	f7ff fe70 	bl	23f1260 <_ZN11RHSPIDriver7spiReadEh>
    if (_mode == RHModeRx
 23f1580:	7923      	ldrb	r3, [r4, #4]
	&& ((irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
 23f1582:	2b04      	cmp	r3, #4
 23f1584:	d117      	bne.n	23f15b6 <_ZN7RH_RF9515handleInterruptEv+0x4a>
	    | !(crc_present & RH_RF95_RX_PAYLOAD_CRC_IS_ON)))
 23f1586:	f080 0040 	eor.w	r0, r0, #64	; 0x40
 23f158a:	f3c0 1080 	ubfx	r0, r0, #6, #1
	&& ((irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
 23f158e:	f005 03a0 	and.w	r3, r5, #160	; 0xa0
 23f1592:	4303      	orrs	r3, r0
 23f1594:	d00f      	beq.n	23f15b6 <_ZN7RH_RF9515handleInterruptEv+0x4a>
	_rxBad++;
 23f1596:	8a63      	ldrh	r3, [r4, #18]
 23f1598:	3301      	adds	r3, #1
 23f159a:	b29b      	uxth	r3, r3
 23f159c:	8263      	strh	r3, [r4, #18]
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 23f159e:	22ff      	movs	r2, #255	; 0xff
 23f15a0:	2112      	movs	r1, #18
 23f15a2:	4620      	mov	r0, r4
 23f15a4:	f7ff fe77 	bl	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 23f15a8:	4620      	mov	r0, r4
}
 23f15aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 23f15ae:	22ff      	movs	r2, #255	; 0xff
 23f15b0:	2112      	movs	r1, #18
 23f15b2:	f7ff be70 	b.w	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
 23f15b6:	7923      	ldrb	r3, [r4, #4]
 23f15b8:	2b04      	cmp	r3, #4
 23f15ba:	d101      	bne.n	23f15c0 <_ZN7RH_RF9515handleInterruptEv+0x54>
 23f15bc:	0669      	lsls	r1, r5, #25
 23f15be:	d40d      	bmi.n	23f15dc <_ZN7RH_RF9515handleInterruptEv+0x70>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
 23f15c0:	7923      	ldrb	r3, [r4, #4]
 23f15c2:	2b03      	cmp	r3, #3
 23f15c4:	d101      	bne.n	23f15ca <_ZN7RH_RF9515handleInterruptEv+0x5e>
 23f15c6:	072a      	lsls	r2, r5, #28
 23f15c8:	d459      	bmi.n	23f167e <_ZN7RH_RF9515handleInterruptEv+0x112>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
 23f15ca:	7923      	ldrb	r3, [r4, #4]
 23f15cc:	2b05      	cmp	r3, #5
 23f15ce:	d1e6      	bne.n	23f159e <_ZN7RH_RF9515handleInterruptEv+0x32>
 23f15d0:	076b      	lsls	r3, r5, #29
 23f15d2:	d5e4      	bpl.n	23f159e <_ZN7RH_RF9515handleInterruptEv+0x32>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
 23f15d4:	f005 0501 	and.w	r5, r5, #1
 23f15d8:	7625      	strb	r5, [r4, #24]
 23f15da:	e054      	b.n	23f1686 <_ZN7RH_RF9515handleInterruptEv+0x11a>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
 23f15dc:	2113      	movs	r1, #19
 23f15de:	4620      	mov	r0, r4
 23f15e0:	f7ff fe3e 	bl	23f1260 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
 23f15e4:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
 23f15e6:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
 23f15e8:	4620      	mov	r0, r4
 23f15ea:	f7ff fe39 	bl	23f1260 <_ZN11RHSPIDriver7spiReadEh>
 23f15ee:	210d      	movs	r1, #13
 23f15f0:	4602      	mov	r2, r0
 23f15f2:	4620      	mov	r0, r4
 23f15f4:	f7ff fe4f 	bl	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
 23f15f8:	462b      	mov	r3, r5
 23f15fa:	2100      	movs	r1, #0
 23f15fc:	f104 0229 	add.w	r2, r4, #41	; 0x29
 23f1600:	4620      	mov	r0, r4
 23f1602:	f7ff fe6c 	bl	23f12de <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 23f1606:	22ff      	movs	r2, #255	; 0xff
 23f1608:	2112      	movs	r1, #18
 23f160a:	4620      	mov	r0, r4
	_bufLen = len;
 23f160c:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 23f1610:	f7ff fe41 	bl	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
 23f1614:	2119      	movs	r1, #25
 23f1616:	4620      	mov	r0, r4
 23f1618:	f7ff fe22 	bl	23f1260 <_ZN11RHSPIDriver7spiReadEh>
 23f161c:	b240      	sxtb	r0, r0
 23f161e:	2800      	cmp	r0, #0
 23f1620:	bfb8      	it	lt
 23f1622:	3003      	addlt	r0, #3
 23f1624:	1080      	asrs	r0, r0, #2
 23f1626:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
 23f162a:	211a      	movs	r1, #26
 23f162c:	4620      	mov	r0, r4
 23f162e:	f7ff fe17 	bl	23f1260 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
 23f1632:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
 23f1636:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
 23f1638:	2b00      	cmp	r3, #0
	    _lastRssi = (int)_lastRssi * 16 / 15;
 23f163a:	bfa8      	it	ge
 23f163c:	220f      	movge	r2, #15
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
 23f163e:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
 23f1640:	bfa9      	itett	ge
 23f1642:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
 23f1644:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
 23f1646:	b21b      	sxthge	r3, r3
 23f1648:	011b      	lslge	r3, r3, #4
 23f164a:	bfac      	ite	ge
 23f164c:	fb93 f3f2 	sdivge	r3, r3, r2
	    _lastRssi = _lastRssi + _lastSNR;
 23f1650:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
 23f1652:	b21b      	sxth	r3, r3
 23f1654:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
 23f1656:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 23f165a:	b16b      	cbz	r3, 23f1678 <_ZN7RH_RF9515handleInterruptEv+0x10c>
	    _lastRssi -= 157;
 23f165c:	8a23      	ldrh	r3, [r4, #16]
 23f165e:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
 23f1660:	b21b      	sxth	r3, r3
 23f1662:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
 23f1664:	4620      	mov	r0, r4
 23f1666:	f7ff ff11 	bl	23f148c <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
 23f166a:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 23f166e:	2b00      	cmp	r3, #0
 23f1670:	d095      	beq.n	23f159e <_ZN7RH_RF9515handleInterruptEv+0x32>
        setModeIdle();
 23f1672:	f7ff ff6f 	bl	23f1554 <_ZN7RH_RF9511setModeIdleEv>
 23f1676:	e792      	b.n	23f159e <_ZN7RH_RF9515handleInterruptEv+0x32>
	    _lastRssi -= 164;
 23f1678:	8a23      	ldrh	r3, [r4, #16]
 23f167a:	3ba4      	subs	r3, #164	; 0xa4
 23f167c:	e7f0      	b.n	23f1660 <_ZN7RH_RF9515handleInterruptEv+0xf4>
	_txGood++;
 23f167e:	8ae3      	ldrh	r3, [r4, #22]
 23f1680:	3301      	adds	r3, #1
 23f1682:	b29b      	uxth	r3, r3
 23f1684:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
 23f1686:	4620      	mov	r0, r4
 23f1688:	e7f3      	b.n	23f1672 <_ZN7RH_RF9515handleInterruptEv+0x106>
	...

023f168c <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
 23f168c:	4b02      	ldr	r3, [pc, #8]	; (23f1698 <_ZN7RH_RF954isr0Ev+0xc>)
 23f168e:	6818      	ldr	r0, [r3, #0]
 23f1690:	b108      	cbz	r0, 23f1696 <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
 23f1692:	f7ff bf6b 	b.w	23f156c <_ZN7RH_RF9515handleInterruptEv>
}
 23f1696:	4770      	bx	lr
 23f1698:	1007ae7c 	.word	0x1007ae7c

023f169c <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
 23f169c:	4b02      	ldr	r3, [pc, #8]	; (23f16a8 <_ZN7RH_RF954isr1Ev+0xc>)
 23f169e:	6858      	ldr	r0, [r3, #4]
 23f16a0:	b108      	cbz	r0, 23f16a6 <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
 23f16a2:	f7ff bf63 	b.w	23f156c <_ZN7RH_RF9515handleInterruptEv>
}
 23f16a6:	4770      	bx	lr
 23f16a8:	1007ae7c 	.word	0x1007ae7c

023f16ac <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
 23f16ac:	4b02      	ldr	r3, [pc, #8]	; (23f16b8 <_ZN7RH_RF954isr2Ev+0xc>)
 23f16ae:	6898      	ldr	r0, [r3, #8]
 23f16b0:	b108      	cbz	r0, 23f16b6 <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
 23f16b2:	f7ff bf5b 	b.w	23f156c <_ZN7RH_RF9515handleInterruptEv>
}
 23f16b6:	4770      	bx	lr
 23f16b8:	1007ae7c 	.word	0x1007ae7c

023f16bc <_ZN7RH_RF959setModeRxEv>:
{
 23f16bc:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
 23f16be:	7903      	ldrb	r3, [r0, #4]
{
 23f16c0:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
 23f16c2:	2b04      	cmp	r3, #4
 23f16c4:	d00a      	beq.n	23f16dc <_ZN7RH_RF959setModeRxEv+0x20>
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
 23f16c6:	2205      	movs	r2, #5
 23f16c8:	2101      	movs	r1, #1
 23f16ca:	f7ff fde4 	bl	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
 23f16ce:	2200      	movs	r2, #0
 23f16d0:	2140      	movs	r1, #64	; 0x40
 23f16d2:	4620      	mov	r0, r4
 23f16d4:	f7ff fddf 	bl	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
 23f16d8:	2304      	movs	r3, #4
 23f16da:	7123      	strb	r3, [r4, #4]
}
 23f16dc:	bd10      	pop	{r4, pc}

023f16de <_ZN7RH_RF959availableEv>:
{
 23f16de:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
 23f16e0:	7903      	ldrb	r3, [r0, #4]
{
 23f16e2:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
 23f16e4:	2b03      	cmp	r3, #3
 23f16e6:	d005      	beq.n	23f16f4 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
 23f16e8:	f7ff ffe8 	bl	23f16bc <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
 23f16ec:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
 23f16f0:	b2c0      	uxtb	r0, r0
}
 23f16f2:	bd10      	pop	{r4, pc}
	return false;
 23f16f4:	2000      	movs	r0, #0
 23f16f6:	e7fc      	b.n	23f16f2 <_ZN7RH_RF959availableEv+0x14>

023f16f8 <_ZN7RH_RF959setModeTxEv>:
{
 23f16f8:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
 23f16fa:	7903      	ldrb	r3, [r0, #4]
{
 23f16fc:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
 23f16fe:	2b03      	cmp	r3, #3
 23f1700:	d00a      	beq.n	23f1718 <_ZN7RH_RF959setModeTxEv+0x20>
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
 23f1702:	2203      	movs	r2, #3
 23f1704:	2101      	movs	r1, #1
 23f1706:	f7ff fdc6 	bl	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
 23f170a:	2240      	movs	r2, #64	; 0x40
 23f170c:	4620      	mov	r0, r4
 23f170e:	4611      	mov	r1, r2
 23f1710:	f7ff fdc1 	bl	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
 23f1714:	2303      	movs	r3, #3
 23f1716:	7123      	strb	r3, [r4, #4]
}
 23f1718:	bd10      	pop	{r4, pc}

023f171a <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
 23f171a:	2afb      	cmp	r2, #251	; 0xfb
{
 23f171c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f171e:	4604      	mov	r4, r0
 23f1720:	460f      	mov	r7, r1
 23f1722:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
 23f1724:	d902      	bls.n	23f172c <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
 23f1726:	2600      	movs	r6, #0
}
 23f1728:	4630      	mov	r0, r6
 23f172a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
 23f172c:	6803      	ldr	r3, [r0, #0]
 23f172e:	699b      	ldr	r3, [r3, #24]
 23f1730:	4798      	blx	r3
    setModeIdle();
 23f1732:	4620      	mov	r0, r4
 23f1734:	f7ff ff0e 	bl	23f1554 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
 23f1738:	6823      	ldr	r3, [r4, #0]
 23f173a:	4620      	mov	r0, r4
 23f173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f173e:	4798      	blx	r3
 23f1740:	4606      	mov	r6, r0
 23f1742:	2800      	cmp	r0, #0
 23f1744:	d0ef      	beq.n	23f1726 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
 23f1746:	2200      	movs	r2, #0
 23f1748:	210d      	movs	r1, #13
 23f174a:	4620      	mov	r0, r4
 23f174c:	f7ff fda3 	bl	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
 23f1750:	7ae2      	ldrb	r2, [r4, #11]
 23f1752:	2100      	movs	r1, #0
 23f1754:	4620      	mov	r0, r4
 23f1756:	f7ff fd9e 	bl	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
 23f175a:	7b22      	ldrb	r2, [r4, #12]
 23f175c:	2100      	movs	r1, #0
 23f175e:	4620      	mov	r0, r4
 23f1760:	f7ff fd99 	bl	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
 23f1764:	7b62      	ldrb	r2, [r4, #13]
 23f1766:	2100      	movs	r1, #0
 23f1768:	4620      	mov	r0, r4
 23f176a:	f7ff fd94 	bl	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
 23f176e:	7ba2      	ldrb	r2, [r4, #14]
 23f1770:	2100      	movs	r1, #0
 23f1772:	4620      	mov	r0, r4
 23f1774:	f7ff fd8f 	bl	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
 23f1778:	462b      	mov	r3, r5
 23f177a:	463a      	mov	r2, r7
 23f177c:	2100      	movs	r1, #0
 23f177e:	4620      	mov	r0, r4
 23f1780:	f7ff fdd8 	bl	23f1334 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
 23f1784:	1d2a      	adds	r2, r5, #4
 23f1786:	2122      	movs	r1, #34	; 0x22
 23f1788:	4620      	mov	r0, r4
 23f178a:	b2d2      	uxtb	r2, r2
 23f178c:	f7ff fd83 	bl	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
 23f1790:	4620      	mov	r0, r4
 23f1792:	f7ff ffb1 	bl	23f16f8 <_ZN7RH_RF959setModeTxEv>
    return true;
 23f1796:	e7c7      	b.n	23f1728 <_ZN7RH_RF954sendEPKhh+0xe>

023f1798 <_ZN7RH_RF9510setTxPowerEab>:
    if (useRFO)
 23f1798:	b15a      	cbz	r2, 23f17b2 <_ZN7RH_RF9510setTxPowerEab+0x1a>
	if (power > 14)
 23f179a:	ea41 72e1 	orr.w	r2, r1, r1, asr #31
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | (power + 1));
 23f179e:	2a0e      	cmp	r2, #14
 23f17a0:	bfa8      	it	ge
 23f17a2:	220e      	movge	r2, #14
 23f17a4:	3201      	adds	r2, #1
 23f17a6:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 23f17aa:	2109      	movs	r1, #9
 23f17ac:	b2d2      	uxtb	r2, r2
 23f17ae:	f7ff bd72 	b.w	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
 23f17b2:	f7ff be34 	b.w	23f141e <_ZN7RH_RF9510setTxPowerEab.part.0>

023f17b6 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
 23f17b6:	b538      	push	{r3, r4, r5, lr}
 23f17b8:	4605      	mov	r5, r0
 23f17ba:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
 23f17bc:	780a      	ldrb	r2, [r1, #0]
 23f17be:	211d      	movs	r1, #29
 23f17c0:	f7ff fd69 	bl	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
 23f17c4:	7862      	ldrb	r2, [r4, #1]
 23f17c6:	211e      	movs	r1, #30
 23f17c8:	4628      	mov	r0, r5
 23f17ca:	f7ff fd64 	bl	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
 23f17ce:	4628      	mov	r0, r5
 23f17d0:	78a2      	ldrb	r2, [r4, #2]
 23f17d2:	2126      	movs	r1, #38	; 0x26
}
 23f17d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
 23f17d8:	f7ff bd5d 	b.w	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>

023f17dc <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
 23f17dc:	2904      	cmp	r1, #4
{
 23f17de:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
 23f17e0:	d80f      	bhi.n	23f1802 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
 23f17e2:	4b09      	ldr	r3, [pc, #36]	; (23f1808 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
 23f17e4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 23f17e8:	185c      	adds	r4, r3, r1
 23f17ea:	5a5a      	ldrh	r2, [r3, r1]
 23f17ec:	78a3      	ldrb	r3, [r4, #2]
    setModemRegisters(&cfg);
 23f17ee:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
 23f17f0:	f8ad 2004 	strh.w	r2, [sp, #4]
 23f17f4:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
 23f17f8:	f7ff ffdd 	bl	23f17b6 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
 23f17fc:	2001      	movs	r0, #1
}
 23f17fe:	b002      	add	sp, #8
 23f1800:	bd10      	pop	{r4, pc}
        return false;
 23f1802:	2000      	movs	r0, #0
 23f1804:	e7fb      	b.n	23f17fe <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
 23f1806:	bf00      	nop
 23f1808:	023ff33c 	.word	0x023ff33c

023f180c <_ZN7RH_RF9517setPreambleLengthEt>:
{
 23f180c:	b538      	push	{r3, r4, r5, lr}
 23f180e:	4605      	mov	r5, r0
 23f1810:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
 23f1812:	0a0a      	lsrs	r2, r1, #8
 23f1814:	2120      	movs	r1, #32
 23f1816:	f7ff fd3e 	bl	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
 23f181a:	4628      	mov	r0, r5
 23f181c:	b2e2      	uxtb	r2, r4
 23f181e:	2121      	movs	r1, #33	; 0x21
}
 23f1820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
 23f1824:	f7ff bd37 	b.w	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>

023f1828 <_ZN7RH_RF954initEv>:
{
 23f1828:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f182a:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
 23f182c:	f7ff fcf2 	bl	23f1214 <_ZN11RHSPIDriver4initEv>
 23f1830:	4605      	mov	r5, r0
 23f1832:	b918      	cbnz	r0, 23f183c <_ZN7RH_RF954initEv+0x14>
	return false;
 23f1834:	2500      	movs	r5, #0
}
 23f1836:	4628      	mov	r0, r5
 23f1838:	b002      	add	sp, #8
 23f183a:	bd70      	pop	{r4, r5, r6, pc}
    int interruptNumber = digitalPinToInterrupt(_interruptPin);
 23f183c:	f894 6026 	ldrb.w	r6, [r4, #38]	; 0x26
    spiUsingInterrupt(interruptNumber);
 23f1840:	4620      	mov	r0, r4
 23f1842:	4631      	mov	r1, r6
 23f1844:	f7ff fda0 	bl	23f1388 <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
 23f1848:	2280      	movs	r2, #128	; 0x80
 23f184a:	2101      	movs	r1, #1
 23f184c:	4620      	mov	r0, r4
 23f184e:	f7ff fd22 	bl	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
 23f1852:	200a      	movs	r0, #10
 23f1854:	f005 fd80 	bl	23f7358 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
 23f1858:	2101      	movs	r1, #1
 23f185a:	4620      	mov	r0, r4
 23f185c:	f7ff fd00 	bl	23f1260 <_ZN11RHSPIDriver7spiReadEh>
 23f1860:	2880      	cmp	r0, #128	; 0x80
 23f1862:	d1e7      	bne.n	23f1834 <_ZN7RH_RF954initEv+0xc>
    pinMode(_interruptPin, INPUT); 
 23f1864:	2100      	movs	r1, #0
 23f1866:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 23f186a:	f007 ff57 	bl	23f971c <pinMode>
    if (_myInterruptIndex == 0xff)
 23f186e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 23f1872:	2bff      	cmp	r3, #255	; 0xff
 23f1874:	d107      	bne.n	23f1886 <_ZN7RH_RF954initEv+0x5e>
	if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
 23f1876:	4a23      	ldr	r2, [pc, #140]	; (23f1904 <_ZN7RH_RF954initEv+0xdc>)
 23f1878:	7813      	ldrb	r3, [r2, #0]
 23f187a:	2b03      	cmp	r3, #3
 23f187c:	d8da      	bhi.n	23f1834 <_ZN7RH_RF954initEv+0xc>
	    _myInterruptIndex = _interruptCount++;
 23f187e:	1c59      	adds	r1, r3, #1
 23f1880:	7011      	strb	r1, [r2, #0]
 23f1882:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    _deviceForInterrupt[_myInterruptIndex] = this;
 23f1886:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 23f188a:	4b1f      	ldr	r3, [pc, #124]	; (23f1908 <_ZN7RH_RF954initEv+0xe0>)
 23f188c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    if (_myInterruptIndex == 0)
 23f1890:	bb32      	cbnz	r2, 23f18e0 <_ZN7RH_RF954initEv+0xb8>
	attachInterrupt(interruptNumber, isr0, RISING);
 23f1892:	9200      	str	r2, [sp, #0]
 23f1894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f1898:	2201      	movs	r2, #1
 23f189a:	491c      	ldr	r1, [pc, #112]	; (23f190c <_ZN7RH_RF954initEv+0xe4>)
	attachInterrupt(interruptNumber, isr2, RISING);
 23f189c:	4630      	mov	r0, r6
 23f189e:	f006 fb73 	bl	23f7f88 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
 23f18a2:	2200      	movs	r2, #0
 23f18a4:	210e      	movs	r1, #14
 23f18a6:	4620      	mov	r0, r4
 23f18a8:	f7ff fcf5 	bl	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
 23f18ac:	2200      	movs	r2, #0
 23f18ae:	210f      	movs	r1, #15
 23f18b0:	4620      	mov	r0, r4
 23f18b2:	f7ff fcf0 	bl	23f1296 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
 23f18b6:	4620      	mov	r0, r4
 23f18b8:	f7ff fe4c 	bl	23f1554 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
 23f18bc:	2100      	movs	r1, #0
 23f18be:	4620      	mov	r0, r4
 23f18c0:	f7ff ff8c 	bl	23f17dc <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
 23f18c4:	2108      	movs	r1, #8
 23f18c6:	4620      	mov	r0, r4
 23f18c8:	f7ff ffa0 	bl	23f180c <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
 23f18cc:	ed9f 0a10 	vldr	s0, [pc, #64]	; 23f1910 <_ZN7RH_RF954initEv+0xe8>
 23f18d0:	4620      	mov	r0, r4
 23f18d2:	f7ff fdfd 	bl	23f14d0 <_ZN7RH_RF9512setFrequencyEf>
    if (useRFO)
 23f18d6:	210d      	movs	r1, #13
 23f18d8:	4620      	mov	r0, r4
 23f18da:	f7ff fda0 	bl	23f141e <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
 23f18de:	e7aa      	b.n	23f1836 <_ZN7RH_RF954initEv+0xe>
    else if (_myInterruptIndex == 1)
 23f18e0:	2a01      	cmp	r2, #1
 23f18e2:	f04f 0300 	mov.w	r3, #0
 23f18e6:	d104      	bne.n	23f18f2 <_ZN7RH_RF954initEv+0xca>
	attachInterrupt(interruptNumber, isr1, RISING);
 23f18e8:	9300      	str	r3, [sp, #0]
 23f18ea:	490a      	ldr	r1, [pc, #40]	; (23f1914 <_ZN7RH_RF954initEv+0xec>)
 23f18ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f18f0:	e7d4      	b.n	23f189c <_ZN7RH_RF954initEv+0x74>
    else if (_myInterruptIndex == 2)
 23f18f2:	2a02      	cmp	r2, #2
 23f18f4:	d19e      	bne.n	23f1834 <_ZN7RH_RF954initEv+0xc>
	attachInterrupt(interruptNumber, isr2, RISING);
 23f18f6:	9300      	str	r3, [sp, #0]
 23f18f8:	2201      	movs	r2, #1
 23f18fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f18fe:	4906      	ldr	r1, [pc, #24]	; (23f1918 <_ZN7RH_RF954initEv+0xf0>)
 23f1900:	e7cc      	b.n	23f189c <_ZN7RH_RF954initEv+0x74>
 23f1902:	bf00      	nop
 23f1904:	1007ae78 	.word	0x1007ae78
 23f1908:	1007ae7c 	.word	0x1007ae7c
 23f190c:	023f168d 	.word	0x023f168d
 23f1910:	43d90000 	.word	0x43d90000
 23f1914:	023f169d 	.word	0x023f169d
 23f1918:	023f16ad 	.word	0x023f16ad

023f191c <_ZN7FatFile8openRootEP9FatVolume.part.0>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 23f191c:	b538      	push	{r3, r4, r5, lr}
 23f191e:	460d      	mov	r5, r1
 23f1920:	4604      	mov	r4, r0
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 23f1922:	2224      	movs	r2, #36	; 0x24
 23f1924:	2100      	movs	r1, #0
 23f1926:	f00a fd5e 	bl	23fc3e6 <memset>

  m_vol = vol;
 23f192a:	60a5      	str	r5, [r4, #8]
  /** \return The number of File Allocation Tables. */
  uint8_t fatCount() const { return 2; }
  /** \return The logical sector number for the start of the first FAT. */
  uint32_t fatStartSector() const { return m_fatStartSector; }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const { return m_fatType; }
 23f192c:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
 23f192e:	2b10      	cmp	r3, #16
 23f1930:	d003      	beq.n	23f193a <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
 23f1932:	2b20      	cmp	r3, #32
 23f1934:	d006      	beq.n	23f1944 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
 23f1936:	2000      	movs	r0, #0
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
}
 23f1938:	bd38      	pop	{r3, r4, r5, pc}
      m_attributes = FILE_ATTR_ROOT_FIXED;
 23f193a:	2340      	movs	r3, #64	; 0x40
  m_flags = FILE_FLAG_READ;
 23f193c:	2001      	movs	r0, #1
      m_attributes = FILE_ATTR_ROOT32;
 23f193e:	7023      	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
 23f1940:	70a0      	strb	r0, [r4, #2]
  return true;
 23f1942:	e7f9      	b.n	23f1938 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
      m_attributes = FILE_ATTR_ROOT32;
 23f1944:	2380      	movs	r3, #128	; 0x80
 23f1946:	e7f9      	b.n	23f193c <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

023f1948 <_ZN12FatPartition9cacheSyncEv>:
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
 23f1948:	b510      	push	{r4, lr}
 23f194a:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
 23f194c:	3024      	adds	r0, #36	; 0x24
 23f194e:	f003 f8ee 	bl	23f4b2e <_ZN7FsCache4syncEv>
 23f1952:	b148      	cbz	r0, 23f1968 <_ZN12FatPartition9cacheSyncEv+0x20>
 23f1954:	f504 700d 	add.w	r0, r4, #564	; 0x234
 23f1958:	f003 f8e9 	bl	23f4b2e <_ZN7FsCache4syncEv>
 23f195c:	b120      	cbz	r0, 23f1968 <_ZN12FatPartition9cacheSyncEv+0x20>
  bool syncDevice() { return m_blockDev->syncDevice(); }
 23f195e:	6820      	ldr	r0, [r4, #0]
  }
 23f1960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  bool syncDevice() { return m_blockDev->syncDevice(); }
 23f1964:	f001 b8b6 	b.w	23f2ad4 <_ZN9SdSpiCard10syncDeviceEv>
  }
 23f1968:	2000      	movs	r0, #0
 23f196a:	bd10      	pop	{r4, pc}

023f196c <_ZN7FatFile4copyEPKS_>:
    if (from != this) {
 23f196c:	4281      	cmp	r1, r0
  void copy(const FatFile* from) {
 23f196e:	b530      	push	{r4, r5, lr}
    if (from != this) {
 23f1970:	d007      	beq.n	23f1982 <_ZN7FatFile4copyEPKS_+0x16>
      *this = *from;
 23f1972:	4604      	mov	r4, r0
 23f1974:	460d      	mov	r5, r1
 23f1976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f1978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f197a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f197c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f197e:	682b      	ldr	r3, [r5, #0]
 23f1980:	6023      	str	r3, [r4, #0]
  }
 23f1982:	bd30      	pop	{r4, r5, pc}

023f1984 <_ZN7FatFile10addClusterEv>:
  uint32_t cc = m_curCluster;
 23f1984:	4602      	mov	r2, r0
bool FatFile::addCluster() {
 23f1986:	b538      	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
 23f1988:	f852 5f10 	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
 23f198c:	4604      	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
 23f198e:	4629      	mov	r1, r5
 23f1990:	6880      	ldr	r0, [r0, #8]
 23f1992:	f002 febc 	bl	23f470e <_ZN12FatPartition15allocateClusterEmPm>
 23f1996:	b140      	cbz	r0, 23f19aa <_ZN7FatFile10addClusterEv+0x26>
    m_flags |= FILE_FLAG_CONTIGUOUS;
 23f1998:	78a3      	ldrb	r3, [r4, #2]
  if (cc == 0) {
 23f199a:	b93d      	cbnz	r5, 23f19ac <_ZN7FatFile10addClusterEv+0x28>
    m_flags |= FILE_FLAG_CONTIGUOUS;
 23f199c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
 23f19a0:	70a3      	strb	r3, [r4, #2]
  m_flags |= FILE_FLAG_DIR_DIRTY;
 23f19a2:	78a3      	ldrb	r3, [r4, #2]
 23f19a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 23f19a8:	70a3      	strb	r3, [r4, #2]
}
 23f19aa:	bd38      	pop	{r3, r4, r5, pc}
  } else if (m_curCluster != (cc + 1)) {
 23f19ac:	6922      	ldr	r2, [r4, #16]
 23f19ae:	3501      	adds	r5, #1
 23f19b0:	42aa      	cmp	r2, r5
 23f19b2:	d0f6      	beq.n	23f19a2 <_ZN7FatFile10addClusterEv+0x1e>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
 23f19b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 23f19b8:	e7f2      	b.n	23f19a0 <_ZN7FatFile10addClusterEv+0x1c>
	...

023f19bc <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
 23f19bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
 23f19be:	7805      	ldrb	r5, [r0, #0]
bool FatFile::addDirCluster() {
 23f19c0:	4604      	mov	r4, r0
  if (isRootFixed()) {
 23f19c2:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 23f19c6:	d002      	beq.n	23f19ce <_ZN7FatFile13addDirClusterEv+0x12>
  return false;
 23f19c8:	2600      	movs	r6, #0
}
 23f19ca:	4630      	mov	r0, r6
 23f19cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_curPosition >= 512UL * 4095) {
 23f19ce:	6942      	ldr	r2, [r0, #20]
 23f19d0:	4b15      	ldr	r3, [pc, #84]	; (23f1a28 <_ZN7FatFile13addDirClusterEv+0x6c>)
 23f19d2:	429a      	cmp	r2, r3
 23f19d4:	d2f8      	bcs.n	23f19c8 <_ZN7FatFile13addDirClusterEv+0xc>
  if (!addCluster()) {
 23f19d6:	f7ff ffd5 	bl	23f1984 <_ZN7FatFile10addClusterEv>
 23f19da:	4606      	mov	r6, r0
 23f19dc:	2800      	cmp	r0, #0
 23f19de:	d0f3      	beq.n	23f19c8 <_ZN7FatFile13addDirClusterEv+0xc>
  sector = m_vol->clusterStartSector(m_curCluster);
 23f19e0:	68a2      	ldr	r2, [r4, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
 23f19e2:	6923      	ldr	r3, [r4, #16]
 23f19e4:	7991      	ldrb	r1, [r2, #6]
 23f19e6:	6957      	ldr	r7, [r2, #20]
 23f19e8:	3b02      	subs	r3, #2
 23f19ea:	408b      	lsls	r3, r1
 23f19ec:	441f      	add	r7, r3
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
 23f19ee:	68a0      	ldr	r0, [r4, #8]
 23f19f0:	b2e9      	uxtb	r1, r5
 23f19f2:	7903      	ldrb	r3, [r0, #4]
 23f19f4:	428b      	cmp	r3, r1
 23f19f6:	d90d      	bls.n	23f1a14 <_ZN7FatFile13addDirClusterEv+0x58>
    return m_cache.prepare(sector, options);
 23f19f8:	2205      	movs	r2, #5
 23f19fa:	4439      	add	r1, r7
 23f19fc:	3024      	adds	r0, #36	; 0x24
 23f19fe:	f003 f8bc 	bl	23f4b7a <_ZN7FsCache7prepareEmh>
    if (!pc) {
 23f1a02:	3501      	adds	r5, #1
 23f1a04:	2800      	cmp	r0, #0
 23f1a06:	d0df      	beq.n	23f19c8 <_ZN7FatFile13addDirClusterEv+0xc>
    memset(pc, 0, m_vol->bytesPerSector());
 23f1a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 23f1a0c:	2100      	movs	r1, #0
 23f1a0e:	f00a fcea 	bl	23fc3e6 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
 23f1a12:	e7ec      	b.n	23f19ee <_ZN7FatFile13addDirClusterEv+0x32>
    return m_bytesPerSector << m_sectorsPerClusterShift;
 23f1a14:	f44f 7300 	mov.w	r3, #512	; 0x200
 23f1a18:	7982      	ldrb	r2, [r0, #6]
 23f1a1a:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
 23f1a1c:	6962      	ldr	r2, [r4, #20]
 23f1a1e:	fa12 f383 	uxtah	r3, r2, r3
 23f1a22:	6163      	str	r3, [r4, #20]
  return true;
 23f1a24:	e7d1      	b.n	23f19ca <_ZN7FatFile13addDirClusterEv+0xe>
 23f1a26:	bf00      	nop
 23f1a28:	001ffe00 	.word	0x001ffe00

023f1a2c <_ZN7FatFile13cacheDirEntryEh>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
 23f1a2c:	b510      	push	{r4, lr}
 23f1a2e:	4604      	mov	r4, r0
    return m_cache.prepare(sector, options);
 23f1a30:	6880      	ldr	r0, [r0, #8]
 23f1a32:	460a      	mov	r2, r1
 23f1a34:	3024      	adds	r0, #36	; 0x24
 23f1a36:	69a1      	ldr	r1, [r4, #24]
 23f1a38:	f003 f89f 	bl	23f4b7a <_ZN7FsCache7prepareEmh>
  if (!dir) {
 23f1a3c:	b120      	cbz	r0, 23f1a48 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return dir + (m_dirIndex & 0XF);
 23f1a3e:	88a3      	ldrh	r3, [r4, #4]
 23f1a40:	f003 030f 	and.w	r3, r3, #15
 23f1a44:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
 23f1a48:	bd10      	pop	{r4, pc}

023f1a4a <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
 23f1a4a:	7803      	ldrb	r3, [r0, #0]
 23f1a4c:	b90b      	cbnz	r3, 23f1a52 <_ZN7FatFile8openRootEP9FatVolume+0x8>
 23f1a4e:	f7ff bf65 	b.w	23f191c <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
 23f1a52:	2000      	movs	r0, #0
 23f1a54:	4770      	bx	lr

023f1a56 <_ZN7FatFile11openClusterEPS_>:
bool FatFile::openCluster(FatFile* file) {
 23f1a56:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
 23f1a58:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
 23f1a5a:	4604      	mov	r4, r0
 23f1a5c:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
 23f1a5e:	b923      	cbnz	r3, 23f1a6a <_ZN7FatFile11openClusterEPS_+0x14>
}
 23f1a60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
 23f1a64:	6889      	ldr	r1, [r1, #8]
 23f1a66:	f7ff bff0 	b.w	23f1a4a <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
 23f1a6a:	2224      	movs	r2, #36	; 0x24
 23f1a6c:	2100      	movs	r1, #0
 23f1a6e:	f00a fcba 	bl	23fc3e6 <memset>
  m_attributes = FILE_ATTR_SUBDIR;
 23f1a72:	2310      	movs	r3, #16
  m_flags = FILE_FLAG_READ;
 23f1a74:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
 23f1a76:	7023      	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
 23f1a78:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
 23f1a7a:	68ab      	ldr	r3, [r5, #8]
 23f1a7c:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
 23f1a7e:	68eb      	ldr	r3, [r5, #12]
 23f1a80:	6223      	str	r3, [r4, #32]
}
 23f1a82:	bd38      	pop	{r3, r4, r5, pc}

023f1a84 <_ZN7FatFile4readEPvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 23f1a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f1a88:	ed2d 8b02 	vpush	{d8}
  /** \return true if this file has a Long File Name. */
  bool isLFN() const { return m_lfnOrd; }
  /** \return True if this is an open file/directory. */
  bool isOpen() const { return m_attributes; }
  /** \return True file is readable. */
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
 23f1a8c:	7883      	ldrb	r3, [r0, #2]
 23f1a8e:	4604      	mov	r4, r0
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
 23f1a90:	07d8      	lsls	r0, r3, #31
int FatFile::read(void* buf, size_t nbyte) {
 23f1a92:	4688      	mov	r8, r1
 23f1a94:	4615      	mov	r5, r2
 23f1a96:	b083      	sub	sp, #12
  if (!isReadable()) {
 23f1a98:	d56c      	bpl.n	23f1b74 <_ZN7FatFile4readEPvj+0xf0>
  bool isFile() const { return m_attributes & FILE_ATTR_FILE; }
 23f1a9a:	7823      	ldrb	r3, [r4, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 23f1a9c:	0719      	lsls	r1, r3, #28
 23f1a9e:	d533      	bpl.n	23f1b08 <_ZN7FatFile4readEPvj+0x84>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 23f1aa0:	69e3      	ldr	r3, [r4, #28]
 23f1aa2:	6962      	ldr	r2, [r4, #20]
 23f1aa4:	1a9b      	subs	r3, r3, r2
 23f1aa6:	429d      	cmp	r5, r3
 23f1aa8:	bf28      	it	cs
 23f1aaa:	461d      	movcs	r5, r3
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f1aac:	f104 0310 	add.w	r3, r4, #16
  toRead = nbyte;
 23f1ab0:	462e      	mov	r6, r5
  uint8_t sectorOfCluster = 0;
 23f1ab2:	f04f 0900 	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f1ab6:	ee08 3a10 	vmov	s16, r3
  while (toRead) {
 23f1aba:	2e00      	cmp	r6, #0
 23f1abc:	f000 809f 	beq.w	23f1bfe <_ZN7FatFile4readEPvj+0x17a>
  /** \return True if this is the root directory. */
  bool isRoot() const { return m_attributes & FILE_ATTR_ROOT; }
  /** \return True if this is the FAT32 root directory. */
  bool isRoot32() const { return m_attributes & FILE_ATTR_ROOT32; }
  /** \return True if this is the FAT12 of FAT16 root directory. */
  bool isRootFixed() const { return m_attributes & FILE_ATTR_ROOT_FIXED; }
 23f1ac0:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
 23f1ac2:	6967      	ldr	r7, [r4, #20]
    if (isRootFixed()) {
 23f1ac4:	0653      	lsls	r3, r2, #25
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
 23f1ac6:	68a0      	ldr	r0, [r4, #8]
 23f1ac8:	f3c7 0b08 	ubfx	fp, r7, #0, #9
               (m_curPosition >> m_vol->bytesPerSectorShift());
 23f1acc:	ea4f 2157 	mov.w	r1, r7, lsr #9
    if (isRootFixed()) {
 23f1ad0:	d523      	bpl.n	23f1b1a <_ZN7FatFile4readEPvj+0x96>
      sector = m_vol->rootDirStart() +
 23f1ad2:	6a02      	ldr	r2, [r0, #32]
 23f1ad4:	4411      	add	r1, r2
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
 23f1ad6:	f8d4 a008 	ldr.w	sl, [r4, #8]
 23f1ada:	f1bb 0f00 	cmp.w	fp, #0
 23f1ade:	d150      	bne.n	23f1b82 <_ZN7FatFile4readEPvj+0xfe>
 23f1ae0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23f1ae4:	d34d      	bcc.n	23f1b82 <_ZN7FatFile4readEPvj+0xfe>
   * \param[in] option mode for cached sector.
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() { return m_sector; }
 23f1ae6:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 23f1aea:	4291      	cmp	r1, r2
 23f1aec:	d049      	beq.n	23f1b82 <_ZN7FatFile4readEPvj+0xfe>
        goto fail;
      }
      const uint8_t* src = pc + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
 23f1aee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 23f1af2:	d25f      	bcs.n	23f1bb4 <_ZN7FatFile4readEPvj+0x130>
    return m_blockDev->readSector(sector, dst);
 23f1af4:	4642      	mov	r2, r8
 23f1af6:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 23f1afa:	f001 f94b 	bl	23f2d94 <_ZN9SdSpiCard10readSectorEmPh>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
 23f1afe:	2800      	cmp	r0, #0
 23f1b00:	d038      	beq.n	23f1b74 <_ZN7FatFile4readEPvj+0xf0>
      n = m_vol->bytesPerSector();
 23f1b02:	f44f 7700 	mov.w	r7, #512	; 0x200
 23f1b06:	e04f      	b.n	23f1ba8 <_ZN7FatFile4readEPvj+0x124>
  } else if (isRootFixed()) {
 23f1b08:	065a      	lsls	r2, r3, #25
 23f1b0a:	d5cf      	bpl.n	23f1aac <_ZN7FatFile4readEPvj+0x28>
        FS_DIR_SIZE * m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 23f1b0c:	68a3      	ldr	r3, [r4, #8]
 23f1b0e:	891a      	ldrh	r2, [r3, #8]
 23f1b10:	6963      	ldr	r3, [r4, #20]
    uint16_t tmp16 =
 23f1b12:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
 23f1b16:	b29b      	uxth	r3, r3
 23f1b18:	e7c5      	b.n	23f1aa6 <_ZN7FatFile4readEPvj+0x22>
    return (position >> 9) & m_clusterSectorMask;
 23f1b1a:	f890 9005 	ldrb.w	r9, [r0, #5]
 23f1b1e:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && sectorOfCluster == 0) {
 23f1b22:	f1bb 0f00 	cmp.w	fp, #0
 23f1b26:	d108      	bne.n	23f1b3a <_ZN7FatFile4readEPvj+0xb6>
 23f1b28:	f1b9 0f00 	cmp.w	r9, #0
 23f1b2c:	d105      	bne.n	23f1b3a <_ZN7FatFile4readEPvj+0xb6>
        if (m_curPosition == 0) {
 23f1b2e:	b96f      	cbnz	r7, 23f1b4c <_ZN7FatFile4readEPvj+0xc8>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 23f1b30:	0612      	lsls	r2, r2, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
 23f1b32:	bf4c      	ite	mi
 23f1b34:	6a02      	ldrmi	r2, [r0, #32]
 23f1b36:	6a22      	ldrpl	r2, [r4, #32]
 23f1b38:	6122      	str	r2, [r4, #16]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
 23f1b3a:	68a2      	ldr	r2, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
 23f1b3c:	6921      	ldr	r1, [r4, #16]
 23f1b3e:	7990      	ldrb	r0, [r2, #6]
 23f1b40:	3902      	subs	r1, #2
 23f1b42:	6952      	ldr	r2, [r2, #20]
 23f1b44:	4081      	lsls	r1, r0
 23f1b46:	4411      	add	r1, r2
 23f1b48:	4449      	add	r1, r9
 23f1b4a:	e7c4      	b.n	23f1ad6 <_ZN7FatFile4readEPvj+0x52>
        } else if (isFile() && isContiguous()) {
 23f1b4c:	0713      	lsls	r3, r2, #28
          m_curCluster++;
 23f1b4e:	6921      	ldr	r1, [r4, #16]
        } else if (isFile() && isContiguous()) {
 23f1b50:	d505      	bpl.n	23f1b5e <_ZN7FatFile4readEPvj+0xda>
 23f1b52:	78a2      	ldrb	r2, [r4, #2]
 23f1b54:	0657      	lsls	r7, r2, #25
 23f1b56:	d502      	bpl.n	23f1b5e <_ZN7FatFile4readEPvj+0xda>
          m_curCluster++;
 23f1b58:	3101      	adds	r1, #1
 23f1b5a:	6121      	str	r1, [r4, #16]
 23f1b5c:	e7ed      	b.n	23f1b3a <_ZN7FatFile4readEPvj+0xb6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f1b5e:	ee18 2a10 	vmov	r2, s16
 23f1b62:	f002 fd6f 	bl	23f4644 <_ZN12FatPartition6fatGetEmPm>
          if (fg < 0) {
 23f1b66:	2800      	cmp	r0, #0
 23f1b68:	db04      	blt.n	23f1b74 <_ZN7FatFile4readEPvj+0xf0>
          if (fg == 0) {
 23f1b6a:	d1e6      	bne.n	23f1b3a <_ZN7FatFile4readEPvj+0xb6>
            if (isDir()) {
 23f1b6c:	7823      	ldrb	r3, [r4, #0]
 23f1b6e:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 23f1b72:	d144      	bne.n	23f1bfe <_ZN7FatFile4readEPvj+0x17a>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 23f1b74:	7863      	ldrb	r3, [r4, #1]
  return -1;
 23f1b76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  m_error |= READ_ERROR;
 23f1b7a:	f043 0302 	orr.w	r3, r3, #2
 23f1b7e:	7063      	strb	r3, [r4, #1]
  return -1;
 23f1b80:	e03e      	b.n	23f1c00 <_ZN7FatFile4readEPvj+0x17c>
      n = m_vol->bytesPerSector() - offset;
 23f1b82:	f5cb 7700 	rsb	r7, fp, #512	; 0x200
      if (n > toRead) {
 23f1b86:	42b7      	cmp	r7, r6
    return m_cache.prepare(sector, options);
 23f1b88:	f04f 0200 	mov.w	r2, #0
 23f1b8c:	f10a 0024 	add.w	r0, sl, #36	; 0x24
 23f1b90:	bf28      	it	cs
 23f1b92:	4637      	movcs	r7, r6
 23f1b94:	f002 fff1 	bl	23f4b7a <_ZN7FsCache7prepareEmh>
      if (!pc) {
 23f1b98:	2800      	cmp	r0, #0
 23f1b9a:	d0eb      	beq.n	23f1b74 <_ZN7FatFile4readEPvj+0xf0>
      memcpy(dst, src, n);
 23f1b9c:	eb00 010b 	add.w	r1, r0, fp
 23f1ba0:	463a      	mov	r2, r7
 23f1ba2:	4640      	mov	r0, r8
 23f1ba4:	f00a fc12 	bl	23fc3cc <memcpy>
    m_curPosition += n;
 23f1ba8:	6963      	ldr	r3, [r4, #20]
    dst += n;
 23f1baa:	44b8      	add	r8, r7
    m_curPosition += n;
 23f1bac:	443b      	add	r3, r7
 23f1bae:	6163      	str	r3, [r4, #20]
    toRead -= n;
 23f1bb0:	1bf6      	subs	r6, r6, r7
  while (toRead) {
 23f1bb2:	e782      	b.n	23f1aba <_ZN7FatFile4readEPvj+0x36>
      if (!isRootFixed()) {
 23f1bb4:	7820      	ldrb	r0, [r4, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
 23f1bb6:	0a73      	lsrs	r3, r6, #9
      if (!isRootFixed()) {
 23f1bb8:	0640      	lsls	r0, r0, #25
 23f1bba:	d406      	bmi.n	23f1bca <_ZN7FatFile4readEPvj+0x146>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
 23f1bbc:	f89a 0004 	ldrb.w	r0, [sl, #4]
 23f1bc0:	eba0 0009 	sub.w	r0, r0, r9
 23f1bc4:	4283      	cmp	r3, r0
 23f1bc6:	bf28      	it	cs
 23f1bc8:	4603      	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
 23f1bca:	4291      	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
 23f1bcc:	ea4f 2743 	mov.w	r7, r3, lsl #9
 23f1bd0:	d907      	bls.n	23f1be2 <_ZN7FatFile4readEPvj+0x15e>
    return m_blockDev->readSectors(sector, dst, count);
 23f1bd2:	4642      	mov	r2, r8
 23f1bd4:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 23f1bd8:	f001 f8b0 	bl	23f2d3c <_ZN9SdSpiCard11readSectorsEmPhj>
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
 23f1bdc:	2800      	cmp	r0, #0
 23f1bde:	d1e3      	bne.n	23f1ba8 <_ZN7FatFile4readEPvj+0x124>
 23f1be0:	e7c8      	b.n	23f1b74 <_ZN7FatFile4readEPvj+0xf0>
    return sector <= m_sector && m_sector < (sector + count);
 23f1be2:	18c8      	adds	r0, r1, r3
 23f1be4:	4282      	cmp	r2, r0
 23f1be6:	d2f4      	bcs.n	23f1bd2 <_ZN7FatFile4readEPvj+0x14e>
    if (isCached(sector, count) && !sync()) {
 23f1be8:	f10a 0024 	add.w	r0, sl, #36	; 0x24
 23f1bec:	e9cd 1300 	strd	r1, r3, [sp]
 23f1bf0:	f002 ff9d 	bl	23f4b2e <_ZN7FsCache4syncEv>
 23f1bf4:	e9dd 1300 	ldrd	r1, r3, [sp]
 23f1bf8:	2800      	cmp	r0, #0
 23f1bfa:	d1ea      	bne.n	23f1bd2 <_ZN7FatFile4readEPvj+0x14e>
 23f1bfc:	e7ba      	b.n	23f1b74 <_ZN7FatFile4readEPvj+0xf0>
  return nbyte - toRead;
 23f1bfe:	1ba8      	subs	r0, r5, r6
}
 23f1c00:	b003      	add	sp, #12
 23f1c02:	ecbd 8b02 	vpop	{d8}
 23f1c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023f1c0a <_ZN7FatFile4peekEv>:
int FatFile::peek() {
 23f1c0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 23f1c0c:	2201      	movs	r2, #1
  uint32_t saveCurCluster = m_curCluster;
 23f1c0e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23f1c12:	f10d 0107 	add.w	r1, sp, #7
int FatFile::peek() {
 23f1c16:	4604      	mov	r4, r0
 23f1c18:	f7ff ff34 	bl	23f1a84 <_ZN7FatFile4readEPvj>
 23f1c1c:	2801      	cmp	r0, #1
 23f1c1e:	bf14      	ite	ne
 23f1c20:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23f1c24:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = saveCurCluster;
 23f1c28:	e9c4 5604 	strd	r5, r6, [r4, #16]
}
 23f1c2c:	b002      	add	sp, #8
 23f1c2e:	bd70      	pop	{r4, r5, r6, pc}

023f1c30 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
 23f1c30:	b537      	push	{r0, r1, r2, r4, r5, lr}
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
 23f1c32:	6943      	ldr	r3, [r0, #20]
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
 23f1c34:	4604      	mov	r4, r0

  if (i == 0 || !skipReadOk) {
 23f1c36:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
 23f1c3a:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
 23f1c3e:	d000      	beq.n	23f1c42 <_ZN7FatFile12readDirCacheEb+0x12>
 23f1c40:	b999      	cbnz	r1, 23f1c6a <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
 23f1c42:	2201      	movs	r2, #1
 23f1c44:	4620      	mov	r0, r4
 23f1c46:	f10d 0107 	add.w	r1, sp, #7
 23f1c4a:	f7ff ff1b 	bl	23f1a84 <_ZN7FatFile4readEPvj>
    if (n != 1) {
 23f1c4e:	b240      	sxtb	r0, r0
 23f1c50:	2801      	cmp	r0, #1
 23f1c52:	d002      	beq.n	23f1c5a <_ZN7FatFile12readDirCacheEb+0x2a>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
 23f1c54:	2000      	movs	r0, #0
}
 23f1c56:	b003      	add	sp, #12
 23f1c58:	bd30      	pop	{r4, r5, pc}
    m_curPosition += FS_DIR_SIZE - 1;
 23f1c5a:	6963      	ldr	r3, [r4, #20]
 23f1c5c:	331f      	adds	r3, #31
  uint8_t* cacheBuffer() { return m_buffer; }
 23f1c5e:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += FS_DIR_SIZE;
 23f1c60:	6163      	str	r3, [r4, #20]
 23f1c62:	3034      	adds	r0, #52	; 0x34
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
 23f1c64:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 23f1c68:	e7f5      	b.n	23f1c56 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += FS_DIR_SIZE;
 23f1c6a:	3320      	adds	r3, #32
 23f1c6c:	e7f7      	b.n	23f1c5e <_ZN7FatFile12readDirCacheEb+0x2e>

023f1c6e <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 23f1c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f1c72:	460d      	mov	r5, r1
  bool isOpen() const { return m_attributes; }
 23f1c74:	7801      	ldrb	r1, [r0, #0]
 23f1c76:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 23f1c78:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
 23f1c7a:	b181      	cbz	r1, 23f1c9e <_ZN7FatFile7seekSetEm+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 23f1c7c:	6940      	ldr	r0, [r0, #20]
 23f1c7e:	42a8      	cmp	r0, r5
 23f1c80:	d006      	beq.n	23f1c90 <_ZN7FatFile7seekSetEm+0x22>
    return true;
  }
  if (pos == 0) {
 23f1c82:	b93d      	cbnz	r5, 23f1c94 <_ZN7FatFile7seekSetEm+0x26>
    // set position to start of file
    m_curCluster = 0;
 23f1c84:	6125      	str	r5, [r4, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
 23f1c86:	78a3      	ldrb	r3, [r4, #2]
  m_curPosition = pos;
 23f1c88:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
 23f1c8a:	f023 0320 	bic.w	r3, r3, #32
 23f1c8e:	70a3      	strb	r3, [r4, #2]
    return true;
 23f1c90:	2001      	movs	r0, #1
 23f1c92:	e006      	b.n	23f1ca2 <_ZN7FatFile7seekSetEm+0x34>
  if (isFile()) {
 23f1c94:	070b      	lsls	r3, r1, #28
 23f1c96:	d506      	bpl.n	23f1ca6 <_ZN7FatFile7seekSetEm+0x38>
    if (pos > m_fileSize) {
 23f1c98:	69e3      	ldr	r3, [r4, #28]
 23f1c9a:	42ab      	cmp	r3, r5
 23f1c9c:	d20b      	bcs.n	23f1cb6 <_ZN7FatFile7seekSetEm+0x48>
  return true;

fail:
  m_curCluster = tmp;
  return false;
 23f1c9e:	2000      	movs	r0, #0
  m_curCluster = tmp;
 23f1ca0:	6127      	str	r7, [r4, #16]
}
 23f1ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
 23f1ca6:	064e      	lsls	r6, r1, #25
 23f1ca8:	d505      	bpl.n	23f1cb6 <_ZN7FatFile7seekSetEm+0x48>
  uint16_t rootDirEntryCount() const { return m_rootDirEntryCount; }
 23f1caa:	68a3      	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE * m_vol->rootDirEntryCount()) {
 23f1cac:	891b      	ldrh	r3, [r3, #8]
 23f1cae:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
 23f1cb2:	d9e8      	bls.n	23f1c86 <_ZN7FatFile7seekSetEm+0x18>
 23f1cb4:	e7f3      	b.n	23f1c9e <_ZN7FatFile7seekSetEm+0x30>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
 23f1cb6:	f8d4 c008 	ldr.w	ip, [r4, #8]
  if (isContiguous()) {
 23f1cba:	78a2      	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
 23f1cbc:	f89c 3006 	ldrb.w	r3, [ip, #6]
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
 23f1cc0:	1e6e      	subs	r6, r5, #1
 23f1cc2:	3309      	adds	r3, #9
 23f1cc4:	b2db      	uxtb	r3, r3
  if (isContiguous()) {
 23f1cc6:	0652      	lsls	r2, r2, #25
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
 23f1cc8:	fa26 f603 	lsr.w	r6, r6, r3
  if (isContiguous()) {
 23f1ccc:	d503      	bpl.n	23f1cd6 <_ZN7FatFile7seekSetEm+0x68>
    m_curCluster = m_firstCluster + nNew;
 23f1cce:	6a23      	ldr	r3, [r4, #32]
 23f1cd0:	4433      	add	r3, r6
 23f1cd2:	6123      	str	r3, [r4, #16]
    goto done;
 23f1cd4:	e7d7      	b.n	23f1c86 <_ZN7FatFile7seekSetEm+0x18>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
 23f1cd6:	1e42      	subs	r2, r0, #1
 23f1cd8:	fa22 f303 	lsr.w	r3, r2, r3
  if (nNew < nCur || m_curPosition == 0) {
 23f1cdc:	429e      	cmp	r6, r3
 23f1cde:	d300      	bcc.n	23f1ce2 <_ZN7FatFile7seekSetEm+0x74>
 23f1ce0:	b998      	cbnz	r0, 23f1d0a <_ZN7FatFile7seekSetEm+0x9c>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 23f1ce2:	060b      	lsls	r3, r1, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
 23f1ce4:	bf4c      	ite	mi
 23f1ce6:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
 23f1cea:	6a23      	ldrpl	r3, [r4, #32]
 23f1cec:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 23f1cee:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
 23f1cf2:	2e00      	cmp	r6, #0
 23f1cf4:	d0c7      	beq.n	23f1c86 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 23f1cf6:	4642      	mov	r2, r8
 23f1cf8:	6921      	ldr	r1, [r4, #16]
 23f1cfa:	68a0      	ldr	r0, [r4, #8]
 23f1cfc:	f002 fca2 	bl	23f4644 <_ZN12FatPartition6fatGetEmPm>
 23f1d00:	2800      	cmp	r0, #0
 23f1d02:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 23f1d06:	dcf4      	bgt.n	23f1cf2 <_ZN7FatFile7seekSetEm+0x84>
 23f1d08:	e7c9      	b.n	23f1c9e <_ZN7FatFile7seekSetEm+0x30>
    nNew -= nCur;
 23f1d0a:	1af6      	subs	r6, r6, r3
 23f1d0c:	e7ef      	b.n	23f1cee <_ZN7FatFile7seekSetEm+0x80>

023f1d0e <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
 23f1d0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f1d10:	460f      	mov	r7, r1
 23f1d12:	4604      	mov	r4, r0
 23f1d14:	4616      	mov	r6, r2
  memset(this, 0, sizeof(FatFile));
 23f1d16:	2100      	movs	r1, #0
 23f1d18:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
 23f1d1a:	461d      	mov	r5, r3
  memset(this, 0, sizeof(FatFile));
 23f1d1c:	f00a fb63 	bl	23fc3e6 <memset>
  m_vol = dirFile->m_vol;
 23f1d20:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 23f1d22:	80a6      	strh	r6, [r4, #4]
  m_vol = dirFile->m_vol;
 23f1d24:	60a0      	str	r0, [r4, #8]
  m_dirCluster = dirFile->m_firstCluster;
 23f1d26:	6a3b      	ldr	r3, [r7, #32]
 23f1d28:	f100 0234 	add.w	r2, r0, #52	; 0x34
  dir += 0XF & dirIndex;
 23f1d2c:	f006 060f 	and.w	r6, r6, #15
  m_dirCluster = dirFile->m_firstCluster;
 23f1d30:	60e3      	str	r3, [r4, #12]
  dir += 0XF & dirIndex;
 23f1d32:	eb02 1246 	add.w	r2, r2, r6, lsl #5

static inline bool isFatFile(const DirFat_t* dir) {
  return (dir->attributes & (FS_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFatFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
 23f1d36:	7ad3      	ldrb	r3, [r2, #11]
  if (!isFatFileOrSubdir(dir)) {
 23f1d38:	0719      	lsls	r1, r3, #28
 23f1d3a:	d43f      	bmi.n	23f1dbc <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
  m_attributes = dir->attributes & FS_ATTRIB_COPY;
 23f1d3c:	f003 0337 	and.w	r3, r3, #55	; 0x37
 23f1d40:	7023      	strb	r3, [r4, #0]
  if (isFatFile(dir)) {
 23f1d42:	7ad1      	ldrb	r1, [r2, #11]
 23f1d44:	f011 0f18 	tst.w	r1, #24
    m_attributes |= FILE_ATTR_FILE;
 23f1d48:	bf04      	itt	eq
 23f1d4a:	f043 0308 	orreq.w	r3, r3, #8
 23f1d4e:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
 23f1d50:	f89d 3018 	ldrb.w	r3, [sp, #24]
 23f1d54:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
 23f1d56:	f005 0303 	and.w	r3, r5, #3
 23f1d5a:	2b01      	cmp	r3, #1
 23f1d5c:	d028      	beq.n	23f1db0 <_ZN7FatFile15openCachedEntryEPS_tih+0xa2>
 23f1d5e:	2b02      	cmp	r3, #2
 23f1d60:	d024      	beq.n	23f1dac <_ZN7FatFile15openCachedEntryEPS_tih+0x9e>
 23f1d62:	bb5b      	cbnz	r3, 23f1dbc <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
      if (oflag & O_TRUNC) {
 23f1d64:	056b      	lsls	r3, r5, #21
 23f1d66:	d429      	bmi.n	23f1dbc <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
      m_flags = FILE_FLAG_READ;
 23f1d68:	2301      	movs	r3, #1
      m_flags = FILE_FLAG_WRITE;
 23f1d6a:	70a3      	strb	r3, [r4, #2]
  if (m_flags & FILE_FLAG_WRITE) {
 23f1d6c:	78a1      	ldrb	r1, [r4, #2]
 23f1d6e:	078f      	lsls	r7, r1, #30
 23f1d70:	d507      	bpl.n	23f1d82 <_ZN7FatFile15openCachedEntryEPS_tih+0x74>
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
 23f1d72:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
 23f1d74:	06de      	lsls	r6, r3, #27
 23f1d76:	d421      	bmi.n	23f1dbc <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
 23f1d78:	07df      	lsls	r7, r3, #31
 23f1d7a:	d41f      	bmi.n	23f1dbc <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
    m_attributes |= FS_ATTRIB_ARCHIVE;
 23f1d7c:	f043 0320 	orr.w	r3, r3, #32
 23f1d80:	7023      	strb	r3, [r4, #0]
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
 23f1d82:	f005 0308 	and.w	r3, r5, #8
 23f1d86:	430b      	orrs	r3, r1
 23f1d88:	70a3      	strb	r3, [r4, #2]
  uint32_t sector() { return m_sector; }
 23f1d8a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if (oflag & O_TRUNC) {
 23f1d8c:	056e      	lsls	r6, r5, #21
  m_dirSector = m_vol->cacheSectorNumber();
 23f1d8e:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
 23f1d90:	8a93      	ldrh	r3, [r2, #20]
                 getLe16(dir->firstClusterLow);
 23f1d92:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
 23f1d94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  if (oflag & O_TRUNC) {
 23f1d98:	d514      	bpl.n	23f1dc4 <_ZN7FatFile15openCachedEntryEPS_tih+0xb6>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 23f1d9a:	b959      	cbnz	r1, 23f1db4 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
 23f1d9c:	78a3      	ldrb	r3, [r4, #2]
 23f1d9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 23f1da2:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 23f1da4:	046b      	lsls	r3, r5, #17
 23f1da6:	d411      	bmi.n	23f1dcc <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
  return true;
 23f1da8:	2001      	movs	r0, #1
}
 23f1daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
 23f1dac:	2303      	movs	r3, #3
 23f1dae:	e7dc      	b.n	23f1d6a <_ZN7FatFile15openCachedEntryEPS_tih+0x5c>
      m_flags = FILE_FLAG_WRITE;
 23f1db0:	2302      	movs	r3, #2
 23f1db2:	e7da      	b.n	23f1d6a <_ZN7FatFile15openCachedEntryEPS_tih+0x5c>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 23f1db4:	f002 fce6 	bl	23f4784 <_ZN12FatPartition9freeChainEm>
 23f1db8:	2800      	cmp	r0, #0
 23f1dba:	d1ef      	bne.n	23f1d9c <_ZN7FatFile15openCachedEntryEPS_tih+0x8e>
  m_attributes = FILE_ATTR_CLOSED;
 23f1dbc:	2000      	movs	r0, #0
 23f1dbe:	7020      	strb	r0, [r4, #0]
  m_flags = 0;
 23f1dc0:	70a0      	strb	r0, [r4, #2]
  return false;
 23f1dc2:	e7f2      	b.n	23f1daa <_ZN7FatFile15openCachedEntryEPS_tih+0x9c>
    m_firstCluster = firstCluster;
 23f1dc4:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
 23f1dc6:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
 23f1dc8:	61e3      	str	r3, [r4, #28]
 23f1dca:	e7eb      	b.n	23f1da4 <_ZN7FatFile15openCachedEntryEPS_tih+0x96>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 23f1dcc:	4620      	mov	r0, r4
 23f1dce:	69e1      	ldr	r1, [r4, #28]
 23f1dd0:	f7ff ff4d 	bl	23f1c6e <_ZN7FatFile7seekSetEm>
 23f1dd4:	2800      	cmp	r0, #0
 23f1dd6:	d1e7      	bne.n	23f1da8 <_ZN7FatFile15openCachedEntryEPS_tih+0x9a>
 23f1dd8:	e7f0      	b.n	23f1dbc <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
	...

023f1ddc <_ZN7FatFile4syncEv>:
//------------------------------------------------------------------------------
bool FatFile::sync() {
 23f1ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
 23f1dde:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
 23f1de0:	4604      	mov	r4, r0
  if (!isOpen()) {
 23f1de2:	2b00      	cmp	r3, #0
 23f1de4:	d039      	beq.n	23f1e5a <_ZN7FatFile4syncEv+0x7e>
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
 23f1de6:	f990 3002 	ldrsb.w	r3, [r0, #2]
 23f1dea:	2b00      	cmp	r3, #0
 23f1dec:	da2f      	bge.n	23f1e4e <_ZN7FatFile4syncEv+0x72>
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
 23f1dee:	2101      	movs	r1, #1
 23f1df0:	f7ff fe1c 	bl	23f1a2c <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
 23f1df4:	4605      	mov	r5, r0
 23f1df6:	b930      	cbnz	r0, 23f1e06 <_ZN7FatFile4syncEv+0x2a>
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
 23f1df8:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
 23f1dfa:	7863      	ldrb	r3, [r4, #1]
 23f1dfc:	f043 0301 	orr.w	r3, r3, #1
 23f1e00:	7063      	strb	r3, [r4, #1]
}
 23f1e02:	b003      	add	sp, #12
 23f1e04:	bd30      	pop	{r4, r5, pc}
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
 23f1e06:	7803      	ldrb	r3, [r0, #0]
 23f1e08:	2be5      	cmp	r3, #229	; 0xe5
 23f1e0a:	d0f5      	beq.n	23f1df8 <_ZN7FatFile4syncEv+0x1c>
    dir->attributes = m_attributes & FS_ATTRIB_COPY;
 23f1e0c:	7823      	ldrb	r3, [r4, #0]
 23f1e0e:	f003 0337 	and.w	r3, r3, #55	; 0x37
 23f1e12:	72c3      	strb	r3, [r0, #11]
    if (isFile()) {
 23f1e14:	7823      	ldrb	r3, [r4, #0]
 23f1e16:	071b      	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
 23f1e18:	bf44      	itt	mi
 23f1e1a:	69e3      	ldrmi	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
 23f1e1c:	61c3      	strmi	r3, [r0, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
 23f1e1e:	6a23      	ldr	r3, [r4, #32]
 23f1e20:	8343      	strh	r3, [r0, #26]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
 23f1e22:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 23f1e24:	8283      	strh	r3, [r0, #20]
    if (FsDateTime::callback) {
 23f1e26:	4b0e      	ldr	r3, [pc, #56]	; (23f1e60 <_ZN7FatFile4syncEv+0x84>)
 23f1e28:	681b      	ldr	r3, [r3, #0]
 23f1e2a:	b163      	cbz	r3, 23f1e46 <_ZN7FatFile4syncEv+0x6a>
      FsDateTime::callback(&date, &time, &ms10);
 23f1e2c:	f10d 0203 	add.w	r2, sp, #3
 23f1e30:	f10d 0106 	add.w	r1, sp, #6
 23f1e34:	a801      	add	r0, sp, #4
 23f1e36:	4798      	blx	r3
      setLe16(dir->modifyDate, date);
 23f1e38:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
 23f1e3c:	832b      	strh	r3, [r5, #24]
 23f1e3e:	826b      	strh	r3, [r5, #18]
 23f1e40:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 23f1e44:	82eb      	strh	r3, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
 23f1e46:	78a3      	ldrb	r3, [r4, #2]
 23f1e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 23f1e4c:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
 23f1e4e:	68a0      	ldr	r0, [r4, #8]
 23f1e50:	f7ff fd7a 	bl	23f1948 <_ZN12FatPartition9cacheSyncEv>
 23f1e54:	2800      	cmp	r0, #0
 23f1e56:	d0cf      	beq.n	23f1df8 <_ZN7FatFile4syncEv+0x1c>
 23f1e58:	e7d3      	b.n	23f1e02 <_ZN7FatFile4syncEv+0x26>
    return true;
 23f1e5a:	2001      	movs	r0, #1
 23f1e5c:	e7d1      	b.n	23f1e02 <_ZN7FatFile4syncEv+0x26>
 23f1e5e:	bf00      	nop
 23f1e60:	1007ae98 	.word	0x1007ae98

023f1e64 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
 23f1e64:	b510      	push	{r4, lr}
 23f1e66:	4604      	mov	r4, r0
  bool rtn = sync();
 23f1e68:	f7ff ffb8 	bl	23f1ddc <_ZN7FatFile4syncEv>
  m_attributes = FILE_ATTR_CLOSED;
 23f1e6c:	2300      	movs	r3, #0
 23f1e6e:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
 23f1e70:	70a3      	strb	r3, [r4, #2]
}
 23f1e72:	bd10      	pop	{r4, pc}

023f1e74 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 23f1e74:	b570      	push	{r4, r5, r6, lr}
 23f1e76:	461e      	mov	r6, r3
  FatFile() {}
 23f1e78:	2300      	movs	r3, #0
 23f1e7a:	b094      	sub	sp, #80	; 0x50
 23f1e7c:	930b      	str	r3, [sp, #44]	; 0x2c
  if (isOpen() || !dirFile->isDir()) {
 23f1e7e:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 23f1e80:	4605      	mov	r5, r0
 23f1e82:	460c      	mov	r4, r1
 23f1e84:	9201      	str	r2, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
 23f1e86:	b113      	cbz	r3, 23f1e8e <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
 23f1e88:	2000      	movs	r0, #0
}
 23f1e8a:	b014      	add	sp, #80	; 0x50
 23f1e8c:	bd70      	pop	{r4, r5, r6, pc}
  if (isOpen() || !dirFile->isDir()) {
 23f1e8e:	780b      	ldrb	r3, [r1, #0]
 23f1e90:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 23f1e94:	d0f8      	beq.n	23f1e88 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
 23f1e96:	7813      	ldrb	r3, [r2, #0]
 23f1e98:	2b2f      	cmp	r3, #47	; 0x2f
 23f1e9a:	d112      	bne.n	23f1ec2 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
 23f1e9c:	9a01      	ldr	r2, [sp, #4]
 23f1e9e:	7813      	ldrb	r3, [r2, #0]
 23f1ea0:	2b2f      	cmp	r3, #47	; 0x2f
 23f1ea2:	d102      	bne.n	23f1eaa <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
 23f1ea4:	3201      	adds	r2, #1
 23f1ea6:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
 23f1ea8:	e7f8      	b.n	23f1e9c <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
 23f1eaa:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
 23f1eac:	b91b      	cbnz	r3, 23f1eb6 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
 23f1eae:	4628      	mov	r0, r5
 23f1eb0:	f7ff fdcb 	bl	23f1a4a <_ZN7FatFile8openRootEP9FatVolume>
 23f1eb4:	e7e9      	b.n	23f1e8a <_ZN7FatFile4openEPS_PKci+0x16>
  bool isOpen() const { return m_attributes; }
 23f1eb6:	a80b      	add	r0, sp, #44	; 0x2c
 23f1eb8:	f7ff fd30 	bl	23f191c <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 23f1ebc:	2800      	cmp	r0, #0
 23f1ebe:	d0e3      	beq.n	23f1e88 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
 23f1ec0:	ac0b      	add	r4, sp, #44	; 0x2c
    if (!parsePathName(path, &fname, &path)) {
 23f1ec2:	4628      	mov	r0, r5
 23f1ec4:	9901      	ldr	r1, [sp, #4]
 23f1ec6:	ab01      	add	r3, sp, #4
 23f1ec8:	aa03      	add	r2, sp, #12
 23f1eca:	f000 fc95 	bl	23f27f8 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_>
 23f1ece:	2800      	cmp	r0, #0
 23f1ed0:	d0da      	beq.n	23f1e88 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
 23f1ed2:	9b01      	ldr	r3, [sp, #4]
 23f1ed4:	781b      	ldrb	r3, [r3, #0]
 23f1ed6:	b17b      	cbz	r3, 23f1ef8 <_ZN7FatFile4openEPS_PKci+0x84>
    if (!open(dirFile, &fname, O_RDONLY)) {
 23f1ed8:	2300      	movs	r3, #0
 23f1eda:	4621      	mov	r1, r4
 23f1edc:	4628      	mov	r0, r5
 23f1ede:	aa03      	add	r2, sp, #12
 23f1ee0:	f000 fb4a 	bl	23f2578 <_ZN7FatFile4openEPS_P8FatLfn_ti>
 23f1ee4:	2800      	cmp	r0, #0
 23f1ee6:	d0cf      	beq.n	23f1e88 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir.copy(this);
 23f1ee8:	a80b      	add	r0, sp, #44	; 0x2c
 23f1eea:	4629      	mov	r1, r5
 23f1eec:	f7ff fd3e 	bl	23f196c <_ZN7FatFile4copyEPKS_>
    close();
 23f1ef0:	4628      	mov	r0, r5
 23f1ef2:	f7ff ffb7 	bl	23f1e64 <_ZN7FatFile5closeEv>
  while (1) {
 23f1ef6:	e7e3      	b.n	23f1ec0 <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
 23f1ef8:	4633      	mov	r3, r6
 23f1efa:	4621      	mov	r1, r4
 23f1efc:	4628      	mov	r0, r5
 23f1efe:	aa03      	add	r2, sp, #12
 23f1f00:	f000 fb3a 	bl	23f2578 <_ZN7FatFile4openEPS_P8FatLfn_ti>
 23f1f04:	e7c1      	b.n	23f1e8a <_ZN7FatFile4openEPS_PKci+0x16>

023f1f06 <_ZN7FatFile4openEP9FatVolumePKci>:
  return vol && open(vol->vwd(), path, oflag);
 23f1f06:	b119      	cbz	r1, 23f1f10 <_ZN7FatFile4openEP9FatVolumePKci+0xa>
 23f1f08:	f201 4144 	addw	r1, r1, #1092	; 0x444
 23f1f0c:	f7ff bfb2 	b.w	23f1e74 <_ZN7FatFile4openEPS_PKci>
}
 23f1f10:	4608      	mov	r0, r1
 23f1f12:	4770      	bx	lr

023f1f14 <_ZN7FatFile5mkdirEPS_P8FatLfn_t>:
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
 23f1f14:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!parent->isDir()) {
 23f1f16:	780b      	ldrb	r3, [r1, #0]
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
 23f1f18:	4604      	mov	r4, r0
  if (!parent->isDir()) {
 23f1f1a:	f013 0fd0 	tst.w	r3, #208	; 0xd0
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
 23f1f1e:	460e      	mov	r6, r1
 23f1f20:	b089      	sub	sp, #36	; 0x24
  if (!parent->isDir()) {
 23f1f22:	d102      	bne.n	23f1f2a <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x16>
  return false;
 23f1f24:	2000      	movs	r0, #0
}
 23f1f26:	b009      	add	sp, #36	; 0x24
 23f1f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
 23f1f2a:	f640 2302 	movw	r3, #2562	; 0xa02
 23f1f2e:	f000 fb23 	bl	23f2578 <_ZN7FatFile4openEPS_P8FatLfn_ti>
 23f1f32:	2800      	cmp	r0, #0
 23f1f34:	d0f6      	beq.n	23f1f24 <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x10>
  m_flags = FILE_FLAG_READ;
 23f1f36:	2701      	movs	r7, #1
  m_attributes = FILE_ATTR_SUBDIR;
 23f1f38:	2510      	movs	r5, #16
  if (!addDirCluster()) {
 23f1f3a:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ;
 23f1f3c:	70a7      	strb	r7, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
 23f1f3e:	7025      	strb	r5, [r4, #0]
  if (!addDirCluster()) {
 23f1f40:	f7ff fd3c 	bl	23f19bc <_ZN7FatFile13addDirClusterEv>
 23f1f44:	2800      	cmp	r0, #0
 23f1f46:	d0ed      	beq.n	23f1f24 <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x10>
  m_firstCluster = m_curCluster;
 23f1f48:	6923      	ldr	r3, [r4, #16]
   *
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() { seekSet(0UL); }
 23f1f4a:	2100      	movs	r1, #0
 23f1f4c:	4620      	mov	r0, r4
 23f1f4e:	6223      	str	r3, [r4, #32]
 23f1f50:	f7ff fe8d 	bl	23f1c6e <_ZN7FatFile7seekSetEm>
  if (!sync()) {
 23f1f54:	4620      	mov	r0, r4
 23f1f56:	f7ff ff41 	bl	23f1ddc <_ZN7FatFile4syncEv>
 23f1f5a:	2800      	cmp	r0, #0
 23f1f5c:	d0e2      	beq.n	23f1f24 <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x10>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
 23f1f5e:	4639      	mov	r1, r7
 23f1f60:	4620      	mov	r0, r4
 23f1f62:	f7ff fd63 	bl	23f1a2c <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
 23f1f66:	2800      	cmp	r0, #0
 23f1f68:	d0dc      	beq.n	23f1f24 <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x10>
  memcpy(&dot, dir, sizeof(dot));
 23f1f6a:	466a      	mov	r2, sp
  dir->attributes = FS_ATTRIB_DIRECTORY;
 23f1f6c:	72c5      	strb	r5, [r0, #11]
  memcpy(&dot, dir, sizeof(dot));
 23f1f6e:	4603      	mov	r3, r0
 23f1f70:	4615      	mov	r5, r2
 23f1f72:	f100 0c20 	add.w	ip, r0, #32
 23f1f76:	4617      	mov	r7, r2
 23f1f78:	6818      	ldr	r0, [r3, #0]
 23f1f7a:	6859      	ldr	r1, [r3, #4]
 23f1f7c:	3308      	adds	r3, #8
 23f1f7e:	c703      	stmia	r7!, {r0, r1}
 23f1f80:	4563      	cmp	r3, ip
 23f1f82:	463a      	mov	r2, r7
 23f1f84:	d1f7      	bne.n	23f1f76 <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x62>
    dot.name[i] = ' ';
 23f1f86:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
  sector = m_vol->clusterStartSector(m_firstCluster);
 23f1f8a:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
 23f1f8c:	6a21      	ldr	r1, [r4, #32]
    dot.name[i] = ' ';
 23f1f8e:	f8cd 3001 	str.w	r3, [sp, #1]
 23f1f92:	f8cd 3005 	str.w	r3, [sp, #5]
 23f1f96:	f8ad 3009 	strh.w	r3, [sp, #9]
 23f1f9a:	7983      	ldrb	r3, [r0, #6]
 23f1f9c:	3902      	subs	r1, #2
 23f1f9e:	4099      	lsls	r1, r3
 23f1fa0:	6943      	ldr	r3, [r0, #20]
    return m_cache.prepare(sector, options);
 23f1fa2:	2201      	movs	r2, #1
 23f1fa4:	4419      	add	r1, r3
 23f1fa6:	3024      	adds	r0, #36	; 0x24
 23f1fa8:	f002 fde7 	bl	23f4b7a <_ZN7FsCache7prepareEmh>
  if (!dir) {
 23f1fac:	4603      	mov	r3, r0
 23f1fae:	2800      	cmp	r0, #0
 23f1fb0:	d0b8      	beq.n	23f1f24 <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x10>
  memcpy(&dir[0], &dot, sizeof(dot));
 23f1fb2:	222e      	movs	r2, #46	; 0x2e
 23f1fb4:	46ac      	mov	ip, r5
 23f1fb6:	4607      	mov	r7, r0
 23f1fb8:	f88d 2000 	strb.w	r2, [sp]
 23f1fbc:	f10d 0e20 	add.w	lr, sp, #32
 23f1fc0:	4662      	mov	r2, ip
 23f1fc2:	ca03      	ldmia	r2!, {r0, r1}
 23f1fc4:	4572      	cmp	r2, lr
 23f1fc6:	6038      	str	r0, [r7, #0]
 23f1fc8:	6079      	str	r1, [r7, #4]
 23f1fca:	4694      	mov	ip, r2
 23f1fcc:	f107 0708 	add.w	r7, r7, #8
 23f1fd0:	d1f6      	bne.n	23f1fc0 <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0xac>
  dot.name[1] = '.';
 23f1fd2:	222e      	movs	r2, #46	; 0x2e
 23f1fd4:	f88d 2001 	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
 23f1fd8:	6a32      	ldr	r2, [r6, #32]
  memcpy(&dir[1], &dot, sizeof(dot));
 23f1fda:	3320      	adds	r3, #32
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
 23f1fdc:	0c11      	lsrs	r1, r2, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
 23f1fde:	f8ad 201a 	strh.w	r2, [sp, #26]
  memcpy(&dir[1], &dot, sizeof(dot));
 23f1fe2:	462a      	mov	r2, r5
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
 23f1fe4:	f8ad 1014 	strh.w	r1, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
 23f1fe8:	ae08      	add	r6, sp, #32
 23f1fea:	4615      	mov	r5, r2
 23f1fec:	cd03      	ldmia	r5!, {r0, r1}
 23f1fee:	42b5      	cmp	r5, r6
 23f1ff0:	6018      	str	r0, [r3, #0]
 23f1ff2:	6059      	str	r1, [r3, #4]
 23f1ff4:	462a      	mov	r2, r5
 23f1ff6:	f103 0308 	add.w	r3, r3, #8
 23f1ffa:	d1f6      	bne.n	23f1fea <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0xd6>
  return m_vol->cacheSync();
 23f1ffc:	68a0      	ldr	r0, [r4, #8]
 23f1ffe:	f7ff fca3 	bl	23f1948 <_ZN12FatPartition9cacheSyncEv>
 23f2002:	e790      	b.n	23f1f26 <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x12>

023f2004 <_ZN7FatFile5mkdirEPS_PKcb>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
 23f2004:	b570      	push	{r4, r5, r6, lr}
 23f2006:	461e      	mov	r6, r3
  FatFile() {}
 23f2008:	2300      	movs	r3, #0
 23f200a:	b094      	sub	sp, #80	; 0x50
 23f200c:	930b      	str	r3, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
 23f200e:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
 23f2010:	4605      	mov	r5, r0
 23f2012:	460c      	mov	r4, r1
 23f2014:	9201      	str	r2, [sp, #4]
  if (isOpen() || !parent->isDir()) {
 23f2016:	b113      	cbz	r3, 23f201e <_ZN7FatFile5mkdirEPS_PKcb+0x1a>
  return false;
 23f2018:	2000      	movs	r0, #0
}
 23f201a:	b014      	add	sp, #80	; 0x50
 23f201c:	bd70      	pop	{r4, r5, r6, pc}
  if (isOpen() || !parent->isDir()) {
 23f201e:	780b      	ldrb	r3, [r1, #0]
 23f2020:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 23f2024:	d0f8      	beq.n	23f2018 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
  if (isDirSeparator(*path)) {
 23f2026:	7813      	ldrb	r3, [r2, #0]
 23f2028:	2b2f      	cmp	r3, #47	; 0x2f
 23f202a:	d10d      	bne.n	23f2048 <_ZN7FatFile5mkdirEPS_PKcb+0x44>
    while (isDirSeparator(*path)) {
 23f202c:	9a01      	ldr	r2, [sp, #4]
 23f202e:	7813      	ldrb	r3, [r2, #0]
 23f2030:	2b2f      	cmp	r3, #47	; 0x2f
 23f2032:	d102      	bne.n	23f203a <_ZN7FatFile5mkdirEPS_PKcb+0x36>
      path++;
 23f2034:	3201      	adds	r2, #1
 23f2036:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
 23f2038:	e7f8      	b.n	23f202c <_ZN7FatFile5mkdirEPS_PKcb+0x28>
  bool isOpen() const { return m_attributes; }
 23f203a:	68a1      	ldr	r1, [r4, #8]
 23f203c:	a80b      	add	r0, sp, #44	; 0x2c
 23f203e:	f7ff fc6d 	bl	23f191c <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(parent->m_vol)) {
 23f2042:	2800      	cmp	r0, #0
 23f2044:	d0e8      	beq.n	23f2018 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
    parent = &tmpDir;
 23f2046:	ac0b      	add	r4, sp, #44	; 0x2c
    if (!parsePathName(path, &fname, &path)) {
 23f2048:	4628      	mov	r0, r5
 23f204a:	9901      	ldr	r1, [sp, #4]
 23f204c:	ab01      	add	r3, sp, #4
 23f204e:	aa03      	add	r2, sp, #12
 23f2050:	f000 fbd2 	bl	23f27f8 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_>
 23f2054:	2800      	cmp	r0, #0
 23f2056:	d0df      	beq.n	23f2018 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
    if (!*path) {
 23f2058:	9b01      	ldr	r3, [sp, #4]
 23f205a:	781b      	ldrb	r3, [r3, #0]
 23f205c:	b1c3      	cbz	r3, 23f2090 <_ZN7FatFile5mkdirEPS_PKcb+0x8c>
    if (!open(parent, &fname, O_RDONLY)) {
 23f205e:	2300      	movs	r3, #0
 23f2060:	4621      	mov	r1, r4
 23f2062:	4628      	mov	r0, r5
 23f2064:	aa03      	add	r2, sp, #12
 23f2066:	f000 fa87 	bl	23f2578 <_ZN7FatFile4openEPS_P8FatLfn_ti>
 23f206a:	b138      	cbz	r0, 23f207c <_ZN7FatFile5mkdirEPS_PKcb+0x78>
    tmpDir.copy(this);
 23f206c:	a80b      	add	r0, sp, #44	; 0x2c
 23f206e:	4629      	mov	r1, r5
 23f2070:	f7ff fc7c 	bl	23f196c <_ZN7FatFile4copyEPKS_>
    close();
 23f2074:	4628      	mov	r0, r5
 23f2076:	f7ff fef5 	bl	23f1e64 <_ZN7FatFile5closeEv>
  while (1) {
 23f207a:	e7e4      	b.n	23f2046 <_ZN7FatFile5mkdirEPS_PKcb+0x42>
      if (!pFlag || !mkdir(parent, &fname)) {
 23f207c:	2e00      	cmp	r6, #0
 23f207e:	d0cb      	beq.n	23f2018 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
 23f2080:	4621      	mov	r1, r4
 23f2082:	4628      	mov	r0, r5
 23f2084:	aa03      	add	r2, sp, #12
 23f2086:	f7ff ff45 	bl	23f1f14 <_ZN7FatFile5mkdirEPS_P8FatLfn_t>
 23f208a:	2800      	cmp	r0, #0
 23f208c:	d1ee      	bne.n	23f206c <_ZN7FatFile5mkdirEPS_PKcb+0x68>
 23f208e:	e7c3      	b.n	23f2018 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
  return mkdir(parent, &fname);
 23f2090:	4621      	mov	r1, r4
 23f2092:	4628      	mov	r0, r5
 23f2094:	aa03      	add	r2, sp, #12
 23f2096:	f7ff ff3d 	bl	23f1f14 <_ZN7FatFile5mkdirEPS_P8FatLfn_t>
 23f209a:	e7be      	b.n	23f201a <_ZN7FatFile5mkdirEPS_PKcb+0x16>

023f209c <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
 23f209c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
 23f20a0:	7883      	ldrb	r3, [r0, #2]
 23f20a2:	4688      	mov	r8, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
 23f20a4:	0799      	lsls	r1, r3, #30
size_t FatFile::write(const void* buf, size_t nbyte) {
 23f20a6:	4604      	mov	r4, r0
 23f20a8:	4691      	mov	r9, r2
  if (!isWritable()) {
 23f20aa:	d544      	bpl.n	23f2136 <_ZN7FatFile5writeEPKvj+0x9a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
 23f20ac:	071a      	lsls	r2, r3, #28
 23f20ae:	d43d      	bmi.n	23f212c <_ZN7FatFile5writeEPKvj+0x90>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 23f20b0:	6963      	ldr	r3, [r4, #20]
 23f20b2:	43db      	mvns	r3, r3
 23f20b4:	454b      	cmp	r3, r9
 23f20b6:	d33e      	bcc.n	23f2136 <_ZN7FatFile5writeEPKvj+0x9a>
 23f20b8:	464f      	mov	r7, r9
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f20ba:	f104 0a10 	add.w	sl, r4, #16
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
 23f20be:	6962      	ldr	r2, [r4, #20]
  while (nToWrite) {
 23f20c0:	2f00      	cmp	r7, #0
 23f20c2:	f000 809e 	beq.w	23f2202 <_ZN7FatFile5writeEPKvj+0x166>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
 23f20c6:	68a0      	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
 23f20c8:	f3c2 0508 	ubfx	r5, r2, #0, #9
    return (position >> 9) & m_clusterSectorMask;
 23f20cc:	7946      	ldrb	r6, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
 23f20ce:	ea16 2652 	ands.w	r6, r6, r2, lsr #9
 23f20d2:	d10b      	bne.n	23f20ec <_ZN7FatFile5writeEPKvj+0x50>
 23f20d4:	b955      	cbnz	r5, 23f20ec <_ZN7FatFile5writeEPKvj+0x50>
      if (m_curCluster != 0) {
 23f20d6:	6921      	ldr	r1, [r4, #16]
 23f20d8:	2900      	cmp	r1, #0
 23f20da:	d03f      	beq.n	23f215c <_ZN7FatFile5writeEPKvj+0xc0>
        if (isContiguous() && m_fileSize > m_curPosition) {
 23f20dc:	78a3      	ldrb	r3, [r4, #2]
 23f20de:	065b      	lsls	r3, r3, #25
 23f20e0:	d530      	bpl.n	23f2144 <_ZN7FatFile5writeEPKvj+0xa8>
 23f20e2:	69e3      	ldr	r3, [r4, #28]
 23f20e4:	4293      	cmp	r3, r2
 23f20e6:	d92d      	bls.n	23f2144 <_ZN7FatFile5writeEPKvj+0xa8>
          m_curCluster++;
 23f20e8:	3101      	adds	r1, #1
 23f20ea:	6121      	str	r1, [r4, #16]
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
 23f20ec:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
 23f20ee:	6921      	ldr	r1, [r4, #16]
 23f20f0:	7983      	ldrb	r3, [r0, #6]
 23f20f2:	3902      	subs	r1, #2
 23f20f4:	4099      	lsls	r1, r3
 23f20f6:	6943      	ldr	r3, [r0, #20]
 23f20f8:	4419      	add	r1, r3
 23f20fa:	4431      	add	r1, r6

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
 23f20fc:	2d00      	cmp	r5, #0
 23f20fe:	d139      	bne.n	23f2174 <_ZN7FatFile5writeEPKvj+0xd8>
 23f2100:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 23f2104:	d336      	bcc.n	23f2174 <_ZN7FatFile5writeEPKvj+0xd8>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2 * m_vol->bytesPerSector()) {
 23f2106:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 23f210a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 23f210c:	d260      	bcs.n	23f21d0 <_ZN7FatFile5writeEPKvj+0x134>
    if (isCached(sector)) {
 23f210e:	4291      	cmp	r1, r2
    m_sector = 0XFFFFFFFF;
 23f2110:	bf02      	ittt	eq
 23f2112:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
 23f2116:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
 23f211a:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeSector(sector, src);
 23f211c:	4642      	mov	r2, r8
 23f211e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 23f2120:	f000 fe7f 	bl	23f2e22 <_ZN9SdSpiCard11writeSectorEmPKh>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
 23f2124:	b138      	cbz	r0, 23f2136 <_ZN7FatFile5writeEPKvj+0x9a>
      n = m_vol->bytesPerSector();
 23f2126:	f44f 7600 	mov.w	r6, #512	; 0x200
 23f212a:	e047      	b.n	23f21bc <_ZN7FatFile5writeEPKvj+0x120>
    if (!seekSet(m_fileSize)) {
 23f212c:	69c1      	ldr	r1, [r0, #28]
 23f212e:	f7ff fd9e 	bl	23f1c6e <_ZN7FatFile7seekSetEm>
 23f2132:	2800      	cmp	r0, #0
 23f2134:	d1bc      	bne.n	23f20b0 <_ZN7FatFile5writeEPKvj+0x14>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 23f2136:	7863      	ldrb	r3, [r4, #1]
  return 0;
 23f2138:	f04f 0900 	mov.w	r9, #0
  m_error |= WRITE_ERROR;
 23f213c:	f043 0301 	orr.w	r3, r3, #1
 23f2140:	7063      	strb	r3, [r4, #1]
  return 0;
 23f2142:	e06b      	b.n	23f221c <_ZN7FatFile5writeEPKvj+0x180>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f2144:	4652      	mov	r2, sl
 23f2146:	f002 fa7d 	bl	23f4644 <_ZN12FatPartition6fatGetEmPm>
          if (fg < 0) {
 23f214a:	2800      	cmp	r0, #0
 23f214c:	dbf3      	blt.n	23f2136 <_ZN7FatFile5writeEPKvj+0x9a>
        if (fg == 0) {
 23f214e:	d1cd      	bne.n	23f20ec <_ZN7FatFile5writeEPKvj+0x50>
          if (!addCluster()) {
 23f2150:	4620      	mov	r0, r4
 23f2152:	f7ff fc17 	bl	23f1984 <_ZN7FatFile10addClusterEv>
 23f2156:	2800      	cmp	r0, #0
 23f2158:	d1c8      	bne.n	23f20ec <_ZN7FatFile5writeEPKvj+0x50>
 23f215a:	e7ec      	b.n	23f2136 <_ZN7FatFile5writeEPKvj+0x9a>
        if (m_firstCluster == 0) {
 23f215c:	6a23      	ldr	r3, [r4, #32]
 23f215e:	b93b      	cbnz	r3, 23f2170 <_ZN7FatFile5writeEPKvj+0xd4>
          if (!addCluster()) {
 23f2160:	4620      	mov	r0, r4
 23f2162:	f7ff fc0f 	bl	23f1984 <_ZN7FatFile10addClusterEv>
 23f2166:	2800      	cmp	r0, #0
 23f2168:	d0e5      	beq.n	23f2136 <_ZN7FatFile5writeEPKvj+0x9a>
          m_firstCluster = m_curCluster;
 23f216a:	6923      	ldr	r3, [r4, #16]
 23f216c:	6223      	str	r3, [r4, #32]
 23f216e:	e7bd      	b.n	23f20ec <_ZN7FatFile5writeEPKvj+0x50>
          m_curCluster = m_firstCluster;
 23f2170:	6123      	str	r3, [r4, #16]
 23f2172:	e7bb      	b.n	23f20ec <_ZN7FatFile5writeEPKvj+0x50>
      n = m_vol->bytesPerSector() - sectorOffset;
 23f2174:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      if (n > nToWrite) {
 23f2178:	42be      	cmp	r6, r7
 23f217a:	bf28      	it	cs
 23f217c:	463e      	movcs	r6, r7
      if (sectorOffset == 0 &&
 23f217e:	bb1d      	cbnz	r5, 23f21c8 <_ZN7FatFile5writeEPKvj+0x12c>
 23f2180:	6962      	ldr	r2, [r4, #20]
 23f2182:	69e3      	ldr	r3, [r4, #28]
 23f2184:	429a      	cmp	r2, r3
 23f2186:	d221      	bcs.n	23f21cc <_ZN7FatFile5writeEPKvj+0x130>
          (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
 23f2188:	78a3      	ldrb	r3, [r4, #2]
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
 23f218a:	f013 0f20 	tst.w	r3, #32
 23f218e:	bf0c      	ite	eq
 23f2190:	2201      	moveq	r2, #1
 23f2192:	2205      	movne	r2, #5
    return m_cache.prepare(sector, options);
 23f2194:	3024      	adds	r0, #36	; 0x24
 23f2196:	f002 fcf0 	bl	23f4b7a <_ZN7FsCache7prepareEmh>
      if (!pc) {
 23f219a:	2800      	cmp	r0, #0
 23f219c:	d0cb      	beq.n	23f2136 <_ZN7FatFile5writeEPKvj+0x9a>
      memcpy(dst, src, n);
 23f219e:	4428      	add	r0, r5
 23f21a0:	4632      	mov	r2, r6
 23f21a2:	4641      	mov	r1, r8
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
 23f21a4:	4435      	add	r5, r6
      memcpy(dst, src, n);
 23f21a6:	f00a f911 	bl	23fc3cc <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
 23f21aa:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 23f21ae:	d105      	bne.n	23f21bc <_ZN7FatFile5writeEPKvj+0x120>
  bool cacheSyncData() { return m_cache.sync(); }
 23f21b0:	68a0      	ldr	r0, [r4, #8]
 23f21b2:	3024      	adds	r0, #36	; 0x24
 23f21b4:	f002 fcbb 	bl	23f4b2e <_ZN7FsCache4syncEv>
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
 23f21b8:	2800      	cmp	r0, #0
 23f21ba:	d0bc      	beq.n	23f2136 <_ZN7FatFile5writeEPKvj+0x9a>
    m_curPosition += n;
 23f21bc:	6963      	ldr	r3, [r4, #20]
    src += n;
 23f21be:	44b0      	add	r8, r6
    m_curPosition += n;
 23f21c0:	4433      	add	r3, r6
 23f21c2:	6163      	str	r3, [r4, #20]
    nToWrite -= n;
 23f21c4:	1bbf      	subs	r7, r7, r6
  while (nToWrite) {
 23f21c6:	e77a      	b.n	23f20be <_ZN7FatFile5writeEPKvj+0x22>
        cacheOption = FsCache::CACHE_FOR_WRITE;
 23f21c8:	2201      	movs	r2, #1
 23f21ca:	e7e3      	b.n	23f2194 <_ZN7FatFile5writeEPKvj+0xf8>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
 23f21cc:	2205      	movs	r2, #5
 23f21ce:	e7e1      	b.n	23f2194 <_ZN7FatFile5writeEPKvj+0xf8>
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
 23f21d0:	7903      	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
 23f21d2:	ea4f 2c57 	mov.w	ip, r7, lsr #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
 23f21d6:	1b9b      	subs	r3, r3, r6
 23f21d8:	4563      	cmp	r3, ip
 23f21da:	bf28      	it	cs
 23f21dc:	4663      	movcs	r3, ip
    return sector <= m_sector && m_sector < (sector + count);
 23f21de:	4291      	cmp	r1, r2
      n = nSector << m_vol->bytesPerSectorShift();
 23f21e0:	ea4f 2643 	mov.w	r6, r3, lsl #9
 23f21e4:	d808      	bhi.n	23f21f8 <_ZN7FatFile5writeEPKvj+0x15c>
 23f21e6:	eb01 0c03 	add.w	ip, r1, r3
 23f21ea:	4594      	cmp	ip, r2
    m_sector = 0XFFFFFFFF;
 23f21ec:	bf82      	ittt	hi
 23f21ee:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
 23f21f2:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
 23f21f6:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeSectors(sector, src, count);
 23f21f8:	4642      	mov	r2, r8
 23f21fa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 23f21fc:	f000 fde3 	bl	23f2dc6 <_ZN9SdSpiCard12writeSectorsEmPKhj>
 23f2200:	e7da      	b.n	23f21b8 <_ZN7FatFile5writeEPKvj+0x11c>
  if (m_curPosition > m_fileSize) {
 23f2202:	69e3      	ldr	r3, [r4, #28]
 23f2204:	4293      	cmp	r3, r2
 23f2206:	d205      	bcs.n	23f2214 <_ZN7FatFile5writeEPKvj+0x178>
    m_fileSize = m_curPosition;
 23f2208:	61e2      	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
 23f220a:	78a3      	ldrb	r3, [r4, #2]
 23f220c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 23f2210:	70a3      	strb	r3, [r4, #2]
 23f2212:	e003      	b.n	23f221c <_ZN7FatFile5writeEPKvj+0x180>
  } else if (FsDateTime::callback) {
 23f2214:	4b03      	ldr	r3, [pc, #12]	; (23f2224 <_ZN7FatFile5writeEPKvj+0x188>)
 23f2216:	681b      	ldr	r3, [r3, #0]
 23f2218:	2b00      	cmp	r3, #0
 23f221a:	d1f6      	bne.n	23f220a <_ZN7FatFile5writeEPKvj+0x16e>
}
 23f221c:	4648      	mov	r0, r9
 23f221e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f2222:	bf00      	nop
 23f2224:	1007ae98 	.word	0x1007ae98

023f2228 <_ZN7FatFile11lfnChecksumEPKh.isra.0>:
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(const DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(const uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
 23f2228:	1e41      	subs	r1, r0, #1
 23f222a:	f100 030a 	add.w	r3, r0, #10
    uint8_t sum = 0;
 23f222e:	2000      	movs	r0, #0
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
 23f2230:	0842      	lsrs	r2, r0, #1
 23f2232:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
 23f2236:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23f223a:	fa52 f080 	uxtab	r0, r2, r0
    for (uint8_t i = 0; i < 11; i++) {
 23f223e:	428b      	cmp	r3, r1
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
 23f2240:	b2c0      	uxtb	r0, r0
    for (uint8_t i = 0; i < 11; i++) {
 23f2242:	d1f5      	bne.n	23f2230 <_ZN7FatFile11lfnChecksumEPKh.isra.0+0x8>
    }
    return sum;
  }
 23f2244:	4770      	bx	lr

023f2246 <_ZN7FatFile8cacheDirEt>:
  DirFat_t* cacheDir(uint16_t index) {
 23f2246:	b510      	push	{r4, lr}
    return seekSet(32UL * index) ? readDirCache() : nullptr;
 23f2248:	0149      	lsls	r1, r1, #5
  DirFat_t* cacheDir(uint16_t index) {
 23f224a:	4604      	mov	r4, r0
    return seekSet(32UL * index) ? readDirCache() : nullptr;
 23f224c:	f7ff fd0f 	bl	23f1c6e <_ZN7FatFile7seekSetEm>
 23f2250:	b128      	cbz	r0, 23f225e <_ZN7FatFile8cacheDirEt+0x18>
 23f2252:	4620      	mov	r0, r4
  }
 23f2254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return seekSet(32UL * index) ? readDirCache() : nullptr;
 23f2258:	2100      	movs	r1, #0
 23f225a:	f7ff bce9 	b.w	23f1c30 <_ZN7FatFile12readDirCacheEb>
  }
 23f225e:	bd10      	pop	{r4, pc}

023f2260 <_ZN7FatFile7cmpNameEtP8FatLfn_th>:
  } else if (i < 13) {
    setLe16(ldir->unicode3 + 2 * (i - 11), c);
  }
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
 23f2260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      *this = *from;
 23f2264:	4606      	mov	r6, r0
 23f2266:	b08b      	sub	sp, #44	; 0x2c
 23f2268:	ac01      	add	r4, sp, #4
 23f226a:	4615      	mov	r5, r2
 23f226c:	4607      	mov	r7, r0
 23f226e:	4689      	mov	r9, r1
 23f2270:	469a      	mov	sl, r3
 23f2272:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 23f2274:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f2276:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 23f2278:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f227a:	6833      	ldr	r3, [r6, #0]
  FatFile dir;
  dir.copy(this);
  const DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
 23f227c:	2601      	movs	r6, #1
 23f227e:	6023      	str	r3, [r4, #0]
  const char* end;
#if !USE_UTF8_LONG_NAMES
  /** \return true if at end. */
  bool atEnd() { return next == end; }
  /** Reset to start of LFN. */
  void reset() { next = begin; }
 23f2280:	682b      	ldr	r3, [r5, #0]
 23f2282:	606b      	str	r3, [r5, #4]
 23f2284:	4556      	cmp	r6, sl
 23f2286:	d839      	bhi.n	23f22fc <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x9c>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
 23f2288:	eba9 0106 	sub.w	r1, r9, r6
 23f228c:	b289      	uxth	r1, r1
 23f228e:	a801      	add	r0, sp, #4
 23f2290:	f7ff ffd9 	bl	23f2246 <_ZN7FatFile8cacheDirEt>
    if (!ldir) {
 23f2294:	4683      	mov	fp, r0
 23f2296:	b918      	cbnz	r0, 23f22a0 <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x40>
    }
  }
  return true;

fail:
  return false;
 23f2298:	2000      	movs	r0, #0
}
 23f229a:	b00b      	add	sp, #44	; 0x2c
 23f229c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f22a0:	f04f 0800 	mov.w	r8, #0
      uint16_t u = getLfnChar(ldir, i);
 23f22a4:	fa5f f288 	uxtb.w	r2, r8
 23f22a8:	4659      	mov	r1, fp
 23f22aa:	4638      	mov	r0, r7
 23f22ac:	f002 f9b6 	bl	23f461c <_ZN7FatFile10getLfnCharEPK8DirLfn_th>
      if (fname->atEnd()) {
 23f22b0:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 23f22b4:	4293      	cmp	r3, r2
 23f22b6:	d103      	bne.n	23f22c0 <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x60>
        return u == 0;
 23f22b8:	fab0 f080 	clz	r0, r0
 23f22bc:	0940      	lsrs	r0, r0, #5
 23f22be:	e7ec      	b.n	23f229a <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x3a>
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
 23f22c0:	287f      	cmp	r0, #127	; 0x7f
 23f22c2:	d8e9      	bhi.n	23f2298 <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x38>
 23f22c4:	b2c4      	uxtb	r4, r0
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
 23f22c6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 23f22ca:	2b19      	cmp	r3, #25
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
 23f22cc:	f102 0301 	add.w	r3, r2, #1
 23f22d0:	606b      	str	r3, [r5, #4]
 23f22d2:	7813      	ldrb	r3, [r2, #0]
 23f22d4:	bf98      	it	ls
 23f22d6:	3c20      	subls	r4, #32
 23f22d8:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 23f22dc:	bf98      	it	ls
 23f22de:	b2e4      	uxtbls	r4, r4
 23f22e0:	2a19      	cmp	r2, #25
 23f22e2:	bf9c      	itt	ls
 23f22e4:	3b20      	subls	r3, #32
 23f22e6:	b2db      	uxtbls	r3, r3
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
 23f22e8:	42a3      	cmp	r3, r4
 23f22ea:	d1d5      	bne.n	23f2298 <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x38>
    for (uint8_t i = 0; i < 13; i++) {
 23f22ec:	f108 0801 	add.w	r8, r8, #1
 23f22f0:	f1b8 0f0d 	cmp.w	r8, #13
 23f22f4:	d1d6      	bne.n	23f22a4 <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x44>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
 23f22f6:	3601      	adds	r6, #1
 23f22f8:	b2f6      	uxtb	r6, r6
 23f22fa:	e7c3      	b.n	23f2284 <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x24>
  return true;
 23f22fc:	2001      	movs	r0, #1
 23f22fe:	e7cc      	b.n	23f229a <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x3a>

023f2300 <_ZN7FatFile9createLFNEtP8FatLfn_th>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
 23f2300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f2304:	4604      	mov	r4, r0
 23f2306:	4616      	mov	r6, r2
 23f2308:	b08b      	sub	sp, #44	; 0x2c
 23f230a:	ad01      	add	r5, sp, #4
 23f230c:	468a      	mov	sl, r1
 23f230e:	4698      	mov	r8, r3
 23f2310:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f2312:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f2314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f2316:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f2318:	6823      	ldr	r3, [r4, #0]
  FatFile dir;
  dir.copy(this);
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
 23f231a:	f106 0012 	add.w	r0, r6, #18
 23f231e:	602b      	str	r3, [r5, #0]
 23f2320:	f7ff ff82 	bl	23f2228 <_ZN7FatFile11lfnChecksumEPKh.isra.0>
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
 23f2324:	2501      	movs	r5, #1
  uint8_t checksum = lfnChecksum(fname->sfn);
 23f2326:	4681      	mov	r9, r0
  uint8_t fc = 0;
 23f2328:	2700      	movs	r7, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
 23f232a:	f04f 0b0f 	mov.w	fp, #15
  void reset() { next = begin; }
 23f232e:	6833      	ldr	r3, [r6, #0]
 23f2330:	6073      	str	r3, [r6, #4]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
 23f2332:	4545      	cmp	r5, r8
 23f2334:	d841      	bhi.n	23f23ba <_ZN7FatFile9createLFNEtP8FatLfn_th+0xba>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
 23f2336:	ebaa 0105 	sub.w	r1, sl, r5
 23f233a:	b289      	uxth	r1, r1
 23f233c:	a801      	add	r0, sp, #4
 23f233e:	f7ff ff82 	bl	23f2246 <_ZN7FatFile8cacheDirEt>
    if (!ldir) {
 23f2342:	2800      	cmp	r0, #0
 23f2344:	d03a      	beq.n	23f23bc <_ZN7FatFile9createLFNEtP8FatLfn_th+0xbc>
    dir.m_vol->cacheDirty();
 23f2346:	9a03      	ldr	r2, [sp, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
 23f2348:	4545      	cmp	r5, r8
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
 23f234a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 23f234e:	f100 0401 	add.w	r4, r0, #1
 23f2352:	f043 0301 	orr.w	r3, r3, #1
 23f2356:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    ldir->mustBeZero1 = 0;
 23f235a:	f04f 0200 	mov.w	r2, #0
 23f235e:	bf14      	ite	ne
 23f2360:	462b      	movne	r3, r5
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
 23f2362:	f045 0340 	orreq.w	r3, r5, #64	; 0x40
 23f2366:	7003      	strb	r3, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
 23f2368:	f880 b00b 	strb.w	fp, [r0, #11]
    ldir->mustBeZero1 = 0;
 23f236c:	7302      	strb	r2, [r0, #12]
    ldir->checksum = checksum;
 23f236e:	f880 900d 	strb.w	r9, [r0, #13]
 23f2372:	8342      	strh	r2, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t cp;
      if (fname->atEnd()) {
 23f2374:	e9d6 1301 	ldrd	r1, r3, [r6, #4]
 23f2378:	4299      	cmp	r1, r3
 23f237a:	d110      	bne.n	23f239e <_ZN7FatFile9createLFNEtP8FatLfn_th+0x9e>
        cp = fc++ ? 0XFFFF : 0;
 23f237c:	b19f      	cbz	r7, 23f23a6 <_ZN7FatFile9createLFNEtP8FatLfn_th+0xa6>
 23f237e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23f2382:	3701      	adds	r7, #1
 23f2384:	b2ff      	uxtb	r7, r7
  if (i < 5) {
 23f2386:	2a04      	cmp	r2, #4
 23f2388:	b2d1      	uxtb	r1, r2
 23f238a:	d80f      	bhi.n	23f23ac <_ZN7FatFile9createLFNEtP8FatLfn_th+0xac>
 23f238c:	8023      	strh	r3, [r4, #0]
    for (uint8_t i = 0; i < 13; i++) {
 23f238e:	3201      	adds	r2, #1
 23f2390:	2a0d      	cmp	r2, #13
 23f2392:	f104 0402 	add.w	r4, r4, #2
 23f2396:	d1ed      	bne.n	23f2374 <_ZN7FatFile9createLFNEtP8FatLfn_th+0x74>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
 23f2398:	3501      	adds	r5, #1
 23f239a:	b2ed      	uxtb	r5, r5
 23f239c:	e7c9      	b.n	23f2332 <_ZN7FatFile9createLFNEtP8FatLfn_th+0x32>
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() { return atEnd() ? 0 : *next++; }
 23f239e:	1c4b      	adds	r3, r1, #1
 23f23a0:	6073      	str	r3, [r6, #4]
 23f23a2:	780b      	ldrb	r3, [r1, #0]
 23f23a4:	e7ef      	b.n	23f2386 <_ZN7FatFile9createLFNEtP8FatLfn_th+0x86>
        cp = fc++ ? 0XFFFF : 0;
 23f23a6:	463b      	mov	r3, r7
 23f23a8:	2701      	movs	r7, #1
 23f23aa:	e7ec      	b.n	23f2386 <_ZN7FatFile9createLFNEtP8FatLfn_th+0x86>
  } else if (i < 11) {
 23f23ac:	290a      	cmp	r1, #10
 23f23ae:	bf94      	ite	ls
 23f23b0:	f8a4 3003 	strhls.w	r3, [r4, #3]
 23f23b4:	f8a4 3005 	strhhi.w	r3, [r4, #5]
}
 23f23b8:	e7e9      	b.n	23f238e <_ZN7FatFile9createLFNEtP8FatLfn_th+0x8e>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
 23f23ba:	2001      	movs	r0, #1

fail:
  return false;
}
 23f23bc:	b00b      	add	sp, #44	; 0x2c
 23f23be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023f23c2 <_ZN7FatFile7makeSFNEP8FatLfn_t>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
 23f23c2:	4602      	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
 23f23c4:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
bool FatFile::makeSFN(FatLfn_t* fname) {
 23f23c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const char* ptr = fname->begin;
 23f23cc:	f852 3b12 	ldr.w	r3, [r2], #18
  const char* end = fname->end;
 23f23d0:	6886      	ldr	r6, [r0, #8]
    fname->sfn[k] = ' ';
 23f23d2:	f8c0 1012 	str.w	r1, [r0, #18]
 23f23d6:	6051      	str	r1, [r2, #4]
 23f23d8:	f8c2 1007 	str.w	r1, [r2, #7]
bool FatFile::makeSFN(FatLfn_t* fname) {
 23f23dc:	4605      	mov	r5, r0
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
 23f23de:	7818      	ldrb	r0, [r3, #0]
 23f23e0:	382e      	subs	r0, #46	; 0x2e
 23f23e2:	bf18      	it	ne
 23f23e4:	2001      	movne	r0, #1
 23f23e6:	461f      	mov	r7, r3
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {
 23f23e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 23f23ec:	2a2e      	cmp	r2, #46	; 0x2e
 23f23ee:	d0fa      	beq.n	23f23e6 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x24>
  }
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {
 23f23f0:	1e72      	subs	r2, r6, #1
 23f23f2:	42ba      	cmp	r2, r7
 23f23f4:	4696      	mov	lr, r2
 23f23f6:	d903      	bls.n	23f2400 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x3e>
 23f23f8:	f812 3901 	ldrb.w	r3, [r2], #-1
 23f23fc:	2b2e      	cmp	r3, #46	; 0x2e
 23f23fe:	d1f8      	bne.n	23f23f2 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x30>
 23f2400:	2200      	movs	r2, #0
 23f2402:	f04f 0c07 	mov.w	ip, #7
 23f2406:	4611      	mov	r1, r2
 23f2408:	4690      	mov	r8, r2
 23f240a:	f04f 0908 	mov.w	r9, #8
  }

  for (; ptr < end; ptr++) {
 23f240e:	42b7      	cmp	r7, r6
 23f2410:	d251      	bcs.n	23f24b6 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xf4>
    c = *ptr;
 23f2412:	783b      	ldrb	r3, [r7, #0]
    if (c == '.' && ptr == dot) {
 23f2414:	2b2e      	cmp	r3, #46	; 0x2e
 23f2416:	d107      	bne.n	23f2428 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x66>
 23f2418:	45be      	cmp	lr, r7
 23f241a:	d113      	bne.n	23f2444 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x82>
      in = 10;                // Max index for full 8.3 name.
 23f241c:	f04f 0c0a 	mov.w	ip, #10
      i = 8;                  // Place for extension.
 23f2420:	2408      	movs	r4, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
 23f2422:	f04f 0910 	mov.w	r9, #16
 23f2426:	e03b      	b.n	23f24a0 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xde>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
 23f2428:	2b22      	cmp	r3, #34	; 0x22
 23f242a:	d00b      	beq.n	23f2444 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x82>
 23f242c:	2b7c      	cmp	r3, #124	; 0x7c
 23f242e:	d009      	beq.n	23f2444 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x82>
 23f2430:	f1a3 045b 	sub.w	r4, r3, #91	; 0x5b
 23f2434:	2c02      	cmp	r4, #2
 23f2436:	d905      	bls.n	23f2444 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x82>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
 23f2438:	f1a3 042a 	sub.w	r4, r3, #42	; 0x2a
 23f243c:	2c05      	cmp	r4, #5
 23f243e:	d806      	bhi.n	23f244e <_ZN7FatFile7makeSFNEP8FatLfn_t+0x8c>
 23f2440:	2b2d      	cmp	r3, #45	; 0x2d
 23f2442:	d013      	beq.n	23f246c <_ZN7FatFile7makeSFNEP8FatLfn_t+0xaa>
        if ((c & 0XC0) == 0X80) {
          continue;
        }
        c = '_';
      }
      if (i > in) {
 23f2444:	4561      	cmp	r1, ip
 23f2446:	d813      	bhi.n	23f2470 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xae>
        is83 = false;
 23f2448:	2000      	movs	r0, #0
        c = '_';
 23f244a:	235f      	movs	r3, #95	; 0x5f
 23f244c:	e021      	b.n	23f2492 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xd0>
 23f244e:	f1a3 043a 	sub.w	r4, r3, #58	; 0x3a
 23f2452:	2c05      	cmp	r4, #5
 23f2454:	d903      	bls.n	23f245e <_ZN7FatFile7makeSFNEP8FatLfn_t+0x9c>
      if (sfnReservedChar(c)) {
 23f2456:	f1a3 0421 	sub.w	r4, r3, #33	; 0x21
 23f245a:	2c5d      	cmp	r4, #93	; 0x5d
 23f245c:	d906      	bls.n	23f246c <_ZN7FatFile7makeSFNEP8FatLfn_t+0xaa>
        if ((c & 0XC0) == 0X80) {
 23f245e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 23f2462:	2b80      	cmp	r3, #128	; 0x80
 23f2464:	d1ee      	bne.n	23f2444 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x82>
 23f2466:	460c      	mov	r4, r1
        is83 = false;
 23f2468:	2000      	movs	r0, #0
 23f246a:	e019      	b.n	23f24a0 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xde>
      if (i > in) {
 23f246c:	4561      	cmp	r1, ip
 23f246e:	d907      	bls.n	23f2480 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xbe>
        is83 = false;
        if (in == 10 || ptr > dot) {
 23f2470:	f1bc 0f0a 	cmp.w	ip, #10
 23f2474:	d01e      	beq.n	23f24b4 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xf2>
 23f2476:	45be      	cmp	lr, r7
 23f2478:	d31c      	bcc.n	23f24b4 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xf2>
          // Done - extension longer than three characters or no extension.
          break;
        }
        // Skip to dot.
        ptr = dot - 1;
 23f247a:	f10e 37ff 	add.w	r7, lr, #4294967295	; 0xffffffff
        continue;
 23f247e:	e7f2      	b.n	23f2466 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xa4>
      }
      if (isLower(c)) {
 23f2480:	f1a3 0461 	sub.w	r4, r3, #97	; 0x61
 23f2484:	2c19      	cmp	r4, #25
 23f2486:	d80e      	bhi.n	23f24a6 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xe4>
        c += 'A' - 'a';
 23f2488:	3b20      	subs	r3, #32
        lc |= bit;
 23f248a:	ea49 0202 	orr.w	r2, r9, r2
        c += 'A' - 'a';
 23f248e:	b2db      	uxtb	r3, r3
        lc |= bit;
 23f2490:	b2d2      	uxtb	r2, r2
      } else if (isUpper(c)) {
        uc |= bit;
      }
      fname->sfn[i++] = c;
 23f2492:	1c4c      	adds	r4, r1, #1
 23f2494:	b2e4      	uxtb	r4, r4
 23f2496:	4429      	add	r1, r5
      if (i < 7) {
 23f2498:	2c06      	cmp	r4, #6
      fname->sfn[i++] = c;
 23f249a:	748b      	strb	r3, [r1, #18]
      if (i < 7) {
 23f249c:	d800      	bhi.n	23f24a0 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xde>
        fname->seqPos = i;
 23f249e:	742c      	strb	r4, [r5, #16]
  for (; ptr < end; ptr++) {
 23f24a0:	4621      	mov	r1, r4
 23f24a2:	3701      	adds	r7, #1
 23f24a4:	e7b3      	b.n	23f240e <_ZN7FatFile7makeSFNEP8FatLfn_t+0x4c>
      } else if (isUpper(c)) {
 23f24a6:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
 23f24aa:	2c19      	cmp	r4, #25
        uc |= bit;
 23f24ac:	bf98      	it	ls
 23f24ae:	ea49 0808 	orrls.w	r8, r9, r8
 23f24b2:	e7ee      	b.n	23f2492 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xd0>
        is83 = false;
 23f24b4:	2000      	movs	r0, #0
      }
    }
  }
  if (fname->sfn[0] == ' ') {
 23f24b6:	7cab      	ldrb	r3, [r5, #18]
 23f24b8:	2b20      	cmp	r3, #32
 23f24ba:	d011      	beq.n	23f24e0 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x11e>
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
 23f24bc:	b130      	cbz	r0, 23f24cc <_ZN7FatFile7makeSFNEP8FatLfn_t+0x10a>
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
 23f24be:	ea18 0f02 	tst.w	r8, r2
 23f24c2:	bf18      	it	ne
 23f24c4:	2202      	movne	r2, #2
 23f24c6:	746a      	strb	r2, [r5, #17]
  }
  return true;

fail:
  return false;
}
 23f24c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[fname->seqPos] = '~';
 23f24cc:	7c2a      	ldrb	r2, [r5, #16]
    fname->flags = FNAME_FLAG_LOST_CHARS;
 23f24ce:	2101      	movs	r1, #1
    fname->sfn[fname->seqPos] = '~';
 23f24d0:	18ab      	adds	r3, r5, r2
 23f24d2:	227e      	movs	r2, #126	; 0x7e
    fname->flags = FNAME_FLAG_LOST_CHARS;
 23f24d4:	7469      	strb	r1, [r5, #17]
    fname->sfn[fname->seqPos] = '~';
 23f24d6:	749a      	strb	r2, [r3, #18]
    fname->sfn[fname->seqPos + 1] = '1';
 23f24d8:	2231      	movs	r2, #49	; 0x31
  return true;
 23f24da:	4608      	mov	r0, r1
    fname->sfn[fname->seqPos + 1] = '1';
 23f24dc:	74da      	strb	r2, [r3, #19]
 23f24de:	e7f3      	b.n	23f24c8 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x106>
  return false;
 23f24e0:	2000      	movs	r0, #0
 23f24e2:	e7f1      	b.n	23f24c8 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x106>

023f24e4 <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
 23f24e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f24e8:	4680      	mov	r8, r0
 23f24ea:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
 23f24ec:	2462      	movs	r4, #98	; 0x62
  const DirFat_t* dir;
  uint16_t hex = 0;
 23f24ee:	2700      	movs	r7, #0
    for (uint8_t i = pos + 4; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
 23f24f0:	f04f 097e 	mov.w	r9, #126	; 0x7e
  uint8_t pos = fname->seqPos;
 23f24f4:	7c0e      	ldrb	r6, [r1, #16]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 23f24f6:	f101 0a12 	add.w	sl, r1, #18
 23f24fa:	f003 ffd9 	bl	23f64b0 <HAL_Timer_Get_Milli_Seconds>
 23f24fe:	2e03      	cmp	r6, #3
 23f2500:	bf28      	it	cs
 23f2502:	2603      	movcs	r6, #3
    hex += millis();
 23f2504:	4438      	add	r0, r7
    for (uint8_t i = pos + 4; i > pos; i--) {
 23f2506:	1d33      	adds	r3, r6, #4
    hex += millis();
 23f2508:	b287      	uxth	r7, r0
    for (uint8_t i = pos + 4; i > pos; i--) {
 23f250a:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
 23f250c:	f007 020f 	and.w	r2, r7, #15
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 23f2510:	18e9      	adds	r1, r5, r3
    for (uint8_t i = pos + 4; i > pos; i--) {
 23f2512:	3b01      	subs	r3, #1
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 23f2514:	2a09      	cmp	r2, #9
    for (uint8_t i = pos + 4; i > pos; i--) {
 23f2516:	b2db      	uxtb	r3, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 23f2518:	bf94      	ite	ls
 23f251a:	3230      	addls	r2, #48	; 0x30
 23f251c:	3237      	addhi	r2, #55	; 0x37
    for (uint8_t i = pos + 4; i > pos; i--) {
 23f251e:	429e      	cmp	r6, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 23f2520:	748a      	strb	r2, [r1, #18]
      hex >>= 4;
 23f2522:	ea4f 1717 	mov.w	r7, r7, lsr #4
    for (uint8_t i = pos + 4; i > pos; i--) {
 23f2526:	d1f1      	bne.n	23f250c <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x28>
    fname->sfn[pos] = '~';
 23f2528:	19ab      	adds	r3, r5, r6
  void rewind() { seekSet(0UL); }
 23f252a:	2100      	movs	r1, #0
 23f252c:	4640      	mov	r0, r8
 23f252e:	f883 9012 	strb.w	r9, [r3, #18]
 23f2532:	f7ff fb9c 	bl	23f1c6e <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
 23f2536:	2101      	movs	r1, #1
 23f2538:	4640      	mov	r0, r8
 23f253a:	f7ff fb79 	bl	23f1c30 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 23f253e:	4601      	mov	r1, r0
 23f2540:	b930      	cbnz	r0, 23f2550 <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x6c>
        if (!getError()) {
 23f2542:	f898 0001 	ldrb.w	r0, [r8, #1]
 23f2546:	fab0 f080 	clz	r0, r0
 23f254a:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
 23f254c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (dir->name[0] == FAT_NAME_FREE) {
 23f2550:	7803      	ldrb	r3, [r0, #0]
 23f2552:	b173      	cbz	r3, 23f2572 <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x8e>
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 23f2554:	7ac3      	ldrb	r3, [r0, #11]
 23f2556:	071b      	lsls	r3, r3, #28
 23f2558:	d4ed      	bmi.n	23f2536 <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x52>
 23f255a:	220b      	movs	r2, #11
 23f255c:	4650      	mov	r0, sl
 23f255e:	f009 ff25 	bl	23fc3ac <memcmp>
 23f2562:	2800      	cmp	r0, #0
 23f2564:	d1e7      	bne.n	23f2536 <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x52>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
 23f2566:	1e60      	subs	r0, r4, #1
 23f2568:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
 23f256c:	d1c5      	bne.n	23f24fa <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x16>
  return false;
 23f256e:	4620      	mov	r0, r4
fail:
 23f2570:	e7ec      	b.n	23f254c <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x68>
  return true;
 23f2572:	2001      	movs	r0, #1
 23f2574:	e7ea      	b.n	23f254c <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x68>
	...

023f2578 <_ZN7FatFile4openEPS_P8FatLfn_ti>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
 23f2578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f257c:	ed2d 8b02 	vpush	{d8}
 23f2580:	b08b      	sub	sp, #44	; 0x2c
 23f2582:	9304      	str	r3, [sp, #16]
  uint16_t time;
  DirFat_t* dir;
  const DirLfn_t* ldir;
  auto vol = dirFile->m_vol;

  if (!dirFile->isDir() || isOpen()) {
 23f2584:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
 23f2586:	460d      	mov	r5, r1
  if (!dirFile->isDir() || isOpen()) {
 23f2588:	f013 0fd0 	tst.w	r3, #208	; 0xd0
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
 23f258c:	4617      	mov	r7, r2
 23f258e:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
 23f2590:	d105      	bne.n	23f259e <_ZN7FatFile4openEPS_P8FatLfn_ti+0x26>
    goto fail;
  }
  return true;

fail:
  return false;
 23f2592:	2000      	movs	r0, #0
}
 23f2594:	b00b      	add	sp, #44	; 0x2c
 23f2596:	ecbd 8b02 	vpop	{d8}
 23f259a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool isOpen() const { return m_attributes; }
 23f259e:	9b07      	ldr	r3, [sp, #28]
 23f25a0:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
 23f25a2:	2b00      	cmp	r3, #0
 23f25a4:	d1f5      	bne.n	23f2592 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
  nameOrd = (fname->len + 12) / 13;
 23f25a6:	68d3      	ldr	r3, [r2, #12]
 23f25a8:	220d      	movs	r2, #13
 23f25aa:	330c      	adds	r3, #12
 23f25ac:	fbb3 f3f2 	udiv	r3, r3, r2
 23f25b0:	b2db      	uxtb	r3, r3
 23f25b2:	9306      	str	r3, [sp, #24]
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
 23f25b4:	7c7b      	ldrb	r3, [r7, #17]
  uint8_t checksum = 0;
 23f25b6:	f04f 0a00 	mov.w	sl, #0
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
 23f25ba:	079a      	lsls	r2, r3, #30
 23f25bc:	bf0c      	ite	eq
 23f25be:	2301      	moveq	r3, #1
 23f25c0:	9b06      	ldrne	r3, [sp, #24]
  void rewind() { seekSet(0UL); }
 23f25c2:	4628      	mov	r0, r5
 23f25c4:	bf1c      	itt	ne
 23f25c6:	f103 0901 	addne.w	r9, r3, #1
 23f25ca:	fa5f f389 	uxtbne.w	r3, r9
 23f25ce:	9302      	str	r3, [sp, #8]
  auto vol = dirFile->m_vol;
 23f25d0:	688b      	ldr	r3, [r1, #8]
 23f25d2:	2100      	movs	r1, #0
 23f25d4:	9305      	str	r3, [sp, #20]
 23f25d6:	f7ff fb4a 	bl	23f1c6e <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 23f25da:	f107 0312 	add.w	r3, r7, #18
  uint8_t order = 0;
 23f25de:	46d0      	mov	r8, sl
  uint8_t freeFound = 0;
 23f25e0:	4654      	mov	r4, sl
  uint8_t lfnOrd = 0;
 23f25e2:	46d1      	mov	r9, sl
  bool fnameFound = false;
 23f25e4:	46d3      	mov	fp, sl
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 23f25e6:	ee08 3a10 	vmov	s16, r3
  uint16_t freeIndex = 0;
 23f25ea:	f8cd a00c 	str.w	sl, [sp, #12]
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
 23f25ee:	696e      	ldr	r6, [r5, #20]
    dir = dirFile->readDirCache();
 23f25f0:	2100      	movs	r1, #0
 23f25f2:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
 23f25f4:	f3c6 164f 	ubfx	r6, r6, #5, #16
    dir = dirFile->readDirCache();
 23f25f8:	f7ff fb1a 	bl	23f1c30 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 23f25fc:	2800      	cmp	r0, #0
 23f25fe:	d12f      	bne.n	23f2660 <_ZN7FatFile4openEPS_P8FatLfn_ti+0xe8>
      if (dirFile->getError()) {
 23f2600:	786b      	ldrb	r3, [r5, #1]
 23f2602:	2b00      	cmp	r3, #0
 23f2604:	d1c5      	bne.n	23f2592 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
 23f2606:	9b04      	ldr	r3, [sp, #16]
 23f2608:	059a      	lsls	r2, r3, #22
 23f260a:	d5c2      	bpl.n	23f2592 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>

#define O_READ O_RDONLY
#define O_WRITE O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
 23f260c:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
 23f2610:	3b01      	subs	r3, #1
 23f2612:	2b01      	cmp	r3, #1
 23f2614:	d8bd      	bhi.n	23f2592 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
  if (freeFound == 0) {
 23f2616:	9b03      	ldr	r3, [sp, #12]
 23f2618:	2c00      	cmp	r4, #0
 23f261a:	bf08      	it	eq
 23f261c:	4633      	moveq	r3, r6
 23f261e:	9303      	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
 23f2620:	9b02      	ldr	r3, [sp, #8]
 23f2622:	429c      	cmp	r4, r3
 23f2624:	d209      	bcs.n	23f263a <_ZN7FatFile4openEPS_P8FatLfn_ti+0xc2>
    dir = dirFile->readDirCache();
 23f2626:	2100      	movs	r1, #0
 23f2628:	4628      	mov	r0, r5
 23f262a:	f7ff fb01 	bl	23f1c30 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 23f262e:	2800      	cmp	r0, #0
 23f2630:	f040 8085 	bne.w	23f273e <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1c6>
      if (dirFile->getError()) {
 23f2634:	786b      	ldrb	r3, [r5, #1]
 23f2636:	2b00      	cmp	r3, #0
 23f2638:	d1ab      	bne.n	23f2592 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
  while (freeTotal < freeNeed) {
 23f263a:	f8bd 6008 	ldrh.w	r6, [sp, #8]
  freeTotal = freeFound;
 23f263e:	b2a4      	uxth	r4, r4
  while (freeTotal < freeNeed) {
 23f2640:	42a6      	cmp	r6, r4
 23f2642:	d97f      	bls.n	23f2744 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1cc>
    if (!dirFile->addDirCluster()) {
 23f2644:	4628      	mov	r0, r5
 23f2646:	f7ff f9b9 	bl	23f19bc <_ZN7FatFile13addDirClusterEv>
 23f264a:	2800      	cmp	r0, #0
 23f264c:	d0a1      	beq.n	23f2592 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
    return m_sectorsPerCluster * (m_bytesPerSector / FS_DIR_SIZE);
 23f264e:	9b05      	ldr	r3, [sp, #20]
 23f2650:	791b      	ldrb	r3, [r3, #4]
    freeTotal += vol->dirEntriesPerCluster();
 23f2652:	eb04 1403 	add.w	r4, r4, r3, lsl #4
 23f2656:	b2a4      	uxth	r4, r4
  while (freeTotal < freeNeed) {
 23f2658:	e7f2      	b.n	23f2640 <_ZN7FatFile4openEPS_P8FatLfn_ti+0xc8>
        fnameFound = true;
 23f265a:	f04f 0b01 	mov.w	fp, #1
 23f265e:	e7c6      	b.n	23f25ee <_ZN7FatFile4openEPS_P8FatLfn_ti+0x76>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
 23f2660:	7802      	ldrb	r2, [r0, #0]
 23f2662:	2ae5      	cmp	r2, #229	; 0xe5
 23f2664:	d000      	beq.n	23f2668 <_ZN7FatFile4openEPS_P8FatLfn_ti+0xf0>
 23f2666:	b982      	cbnz	r2, 23f268a <_ZN7FatFile4openEPS_P8FatLfn_ti+0x112>
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
 23f2668:	9b03      	ldr	r3, [sp, #12]
 23f266a:	2c00      	cmp	r4, #0
 23f266c:	bf08      	it	eq
 23f266e:	4633      	moveq	r3, r6
 23f2670:	9303      	str	r3, [sp, #12]
      if (freeFound < freeNeed) {
 23f2672:	9b02      	ldr	r3, [sp, #8]
 23f2674:	429c      	cmp	r4, r3
        freeFound++;
 23f2676:	bf3c      	itt	cc
 23f2678:	3401      	addcc	r4, #1
 23f267a:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
 23f267c:	2a00      	cmp	r2, #0
 23f267e:	d0c2      	beq.n	23f2606 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x8e>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
 23f2680:	2ae5      	cmp	r2, #229	; 0xe5
 23f2682:	d106      	bne.n	23f2692 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x11a>
      lfnOrd = 0;
 23f2684:	f04f 0900 	mov.w	r9, #0
 23f2688:	e7b1      	b.n	23f25ee <_ZN7FatFile4openEPS_P8FatLfn_ti+0x76>
        freeFound = 0;
 23f268a:	9b02      	ldr	r3, [sp, #8]
 23f268c:	429c      	cmp	r4, r3
 23f268e:	bf38      	it	cc
 23f2690:	2400      	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
 23f2692:	2a2e      	cmp	r2, #46	; 0x2e
 23f2694:	d0f6      	beq.n	23f2684 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x10c>
}
static inline uint8_t isFatLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
 23f2696:	7ac1      	ldrb	r1, [r0, #11]
    } else if (isFatLongName(dir)) {
 23f2698:	290f      	cmp	r1, #15
 23f269a:	d126      	bne.n	23f26ea <_ZN7FatFile4openEPS_P8FatLfn_ti+0x172>
      if (!lfnOrd) {
 23f269c:	f1b9 0f00 	cmp.w	r9, #0
 23f26a0:	d119      	bne.n	23f26d6 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x15e>
        if (order != nameOrd ||
 23f26a2:	9b06      	ldr	r3, [sp, #24]
        order = ldir->order & 0X1F;
 23f26a4:	f002 081f 	and.w	r8, r2, #31
        if (order != nameOrd ||
 23f26a8:	4543      	cmp	r3, r8
 23f26aa:	d1a0      	bne.n	23f25ee <_ZN7FatFile4openEPS_P8FatLfn_ti+0x76>
 23f26ac:	f012 0940 	ands.w	r9, r2, #64	; 0x40
 23f26b0:	d09d      	beq.n	23f25ee <_ZN7FatFile4openEPS_P8FatLfn_ti+0x76>
        checksum = ldir->checksum;
 23f26b2:	4699      	mov	r9, r3
 23f26b4:	f890 a00d 	ldrb.w	sl, [r0, #13]
      if (order == 1) {
 23f26b8:	f1b8 0f01 	cmp.w	r8, #1
 23f26bc:	d197      	bne.n	23f25ee <_ZN7FatFile4openEPS_P8FatLfn_ti+0x76>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
 23f26be:	1c71      	adds	r1, r6, #1
 23f26c0:	464b      	mov	r3, r9
 23f26c2:	463a      	mov	r2, r7
 23f26c4:	4628      	mov	r0, r5
 23f26c6:	b289      	uxth	r1, r1
 23f26c8:	f7ff fdca 	bl	23f2260 <_ZN7FatFile7cmpNameEtP8FatLfn_th>
          lfnOrd = 0;
 23f26cc:	2800      	cmp	r0, #0
 23f26ce:	bf08      	it	eq
 23f26d0:	f04f 0900 	moveq.w	r9, #0
 23f26d4:	e78b      	b.n	23f25ee <_ZN7FatFile4openEPS_P8FatLfn_ti+0x76>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
 23f26d6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23f26da:	fa5f f888 	uxtb.w	r8, r8
 23f26de:	4542      	cmp	r2, r8
 23f26e0:	d1d0      	bne.n	23f2684 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x10c>
 23f26e2:	7b42      	ldrb	r2, [r0, #13]
 23f26e4:	4552      	cmp	r2, sl
 23f26e6:	d0e7      	beq.n	23f26b8 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x140>
 23f26e8:	e7cc      	b.n	23f2684 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x10c>
    } else if (isFatFileOrSubdir(dir)) {
 23f26ea:	070b      	lsls	r3, r1, #28
 23f26ec:	d4ca      	bmi.n	23f2684 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x10c>
      if (lfnOrd) {
 23f26ee:	f1b9 0f00 	cmp.w	r9, #0
 23f26f2:	d00a      	beq.n	23f270a <_ZN7FatFile4openEPS_P8FatLfn_ti+0x192>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
 23f26f4:	f1b8 0f01 	cmp.w	r8, #1
 23f26f8:	f47f af4b 	bne.w	23f2592 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
 23f26fc:	f7ff fd94 	bl	23f2228 <_ZN7FatFile11lfnChecksumEPKh.isra.0>
 23f2700:	4550      	cmp	r0, sl
 23f2702:	f47f af46 	bne.w	23f2592 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
 23f2706:	46cb      	mov	fp, r9
 23f2708:	e00c      	b.n	23f2724 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1ac>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 23f270a:	220b      	movs	r2, #11
 23f270c:	ee18 1a10 	vmov	r1, s16
 23f2710:	f009 fe4c 	bl	23fc3ac <memcmp>
 23f2714:	2800      	cmp	r0, #0
 23f2716:	f47f af6a 	bne.w	23f25ee <_ZN7FatFile4openEPS_P8FatLfn_ti+0x76>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 23f271a:	f897 b011 	ldrb.w	fp, [r7, #17]
 23f271e:	f01b 0b01 	ands.w	fp, fp, #1
 23f2722:	d19a      	bne.n	23f265a <_ZN7FatFile4openEPS_P8FatLfn_ti+0xe2>
  if (oflag & O_EXCL) {
 23f2724:	9b04      	ldr	r3, [sp, #16]
 23f2726:	0519      	lsls	r1, r3, #20
 23f2728:	f53f af33 	bmi.w	23f2592 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 23f272c:	4632      	mov	r2, r6
 23f272e:	4629      	mov	r1, r5
 23f2730:	9b04      	ldr	r3, [sp, #16]
 23f2732:	9807      	ldr	r0, [sp, #28]
 23f2734:	f8cd b000 	str.w	fp, [sp]
 23f2738:	f7ff fae9 	bl	23f1d0e <_ZN7FatFile15openCachedEntryEPS_tih>
 23f273c:	e72a      	b.n	23f2594 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1c>
    freeFound++;
 23f273e:	3401      	adds	r4, #1
 23f2740:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
 23f2742:	e76d      	b.n	23f2620 <_ZN7FatFile4openEPS_P8FatLfn_ti+0xa8>
  if (fnameFound) {
 23f2744:	f1bb 0f00 	cmp.w	fp, #0
 23f2748:	d147      	bne.n	23f27da <_ZN7FatFile4openEPS_P8FatLfn_ti+0x262>
  lfnOrd = freeNeed - 1;
 23f274a:	9b02      	ldr	r3, [sp, #8]
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
 23f274c:	463a      	mov	r2, r7
  lfnOrd = freeNeed - 1;
 23f274e:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
  curIndex = freeIndex + lfnOrd;
 23f2752:	9b03      	ldr	r3, [sp, #12]
  lfnOrd = freeNeed - 1;
 23f2754:	fa5f fb89 	uxtb.w	fp, r9
  curIndex = freeIndex + lfnOrd;
 23f2758:	fa53 f989 	uxtab	r9, r3, r9
 23f275c:	fa1f f689 	uxth.w	r6, r9
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
 23f2760:	465b      	mov	r3, fp
 23f2762:	4631      	mov	r1, r6
 23f2764:	4628      	mov	r0, r5
 23f2766:	f7ff fdcb 	bl	23f2300 <_ZN7FatFile9createLFNEtP8FatLfn_th>
 23f276a:	2800      	cmp	r0, #0
 23f276c:	f43f af11 	beq.w	23f2592 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
  dir = dirFile->cacheDir(curIndex);
 23f2770:	4631      	mov	r1, r6
 23f2772:	4628      	mov	r0, r5
 23f2774:	f7ff fd67 	bl	23f2246 <_ZN7FatFile8cacheDirEt>
  if (!dir) {
 23f2778:	4604      	mov	r4, r0
 23f277a:	2800      	cmp	r0, #0
 23f277c:	f43f af09 	beq.w	23f2592 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
  memset(dir, 0, sizeof(DirFat_t));
 23f2780:	2220      	movs	r2, #32
 23f2782:	2100      	movs	r1, #0
 23f2784:	f009 fe2f 	bl	23fc3e6 <memset>
  memcpy(dir->name, fname->sfn, 11);
 23f2788:	f8d7 3012 	ldr.w	r3, [r7, #18]
 23f278c:	6023      	str	r3, [r4, #0]
 23f278e:	f8d7 3016 	ldr.w	r3, [r7, #22]
 23f2792:	6063      	str	r3, [r4, #4]
 23f2794:	8b7b      	ldrh	r3, [r7, #26]
 23f2796:	8123      	strh	r3, [r4, #8]
 23f2798:	7f3b      	ldrb	r3, [r7, #28]
 23f279a:	72a3      	strb	r3, [r4, #10]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
 23f279c:	7c7b      	ldrb	r3, [r7, #17]
 23f279e:	f003 0318 	and.w	r3, r3, #24
 23f27a2:	7323      	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
 23f27a4:	4b13      	ldr	r3, [pc, #76]	; (23f27f4 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x27c>)
 23f27a6:	681b      	ldr	r3, [r3, #0]
 23f27a8:	b1f3      	cbz	r3, 23f27e8 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x270>
    FsDateTime::callback(&date, &time, &ms10);
 23f27aa:	f10d 0223 	add.w	r2, sp, #35	; 0x23
 23f27ae:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 23f27b2:	a809      	add	r0, sp, #36	; 0x24
 23f27b4:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
 23f27b6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 23f27ba:	8223      	strh	r3, [r4, #16]
 23f27bc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 23f27c0:	81e3      	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
 23f27c2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 23f27c6:	7363      	strb	r3, [r4, #13]
 23f27c8:	9b05      	ldr	r3, [sp, #20]
 23f27ca:	9a05      	ldr	r2, [sp, #20]
 23f27cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 23f27d0:	f043 0301 	orr.w	r3, r3, #1
 23f27d4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  void cacheDirty() { m_cache.dirty(); }
 23f27d8:	e7a8      	b.n	23f272c <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1b4>
    if (!dirFile->makeUniqueSfn(fname)) {
 23f27da:	4639      	mov	r1, r7
 23f27dc:	4628      	mov	r0, r5
 23f27de:	f7ff fe81 	bl	23f24e4 <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t>
 23f27e2:	2800      	cmp	r0, #0
 23f27e4:	d1b1      	bne.n	23f274a <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1d2>
 23f27e6:	e6d4      	b.n	23f2592 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
 23f27e8:	f645 2321 	movw	r3, #23073	; 0x5a21
 23f27ec:	8223      	strh	r3, [r4, #16]
 23f27ee:	8323      	strh	r3, [r4, #24]
 23f27f0:	8263      	strh	r3, [r4, #18]
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59
 23f27f2:	e7e9      	b.n	23f27c8 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x250>
 23f27f4:	1007ae98 	.word	0x1007ae98

023f27f8 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path, FatLfn_t* fname,
                            const char** ptr) {
 23f27f8:	b470      	push	{r4, r5, r6}
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
 23f27fa:	460d      	mov	r5, r1
 23f27fc:	f811 0b01 	ldrb.w	r0, [r1], #1
 23f2800:	2820      	cmp	r0, #32
 23f2802:	d0fa      	beq.n	23f27fa <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x2>
    path++;
  }
  fname->begin = path;
  fname->len = 0;
 23f2804:	2100      	movs	r1, #0
 23f2806:	4628      	mov	r0, r5
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':' || c == '<' ||
 23f2808:	4e1c      	ldr	r6, [pc, #112]	; (23f287c <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x84>)
  fname->begin = path;
 23f280a:	6015      	str	r5, [r2, #0]
  fname->len = 0;
 23f280c:	60d1      	str	r1, [r2, #12]
  while (*path && !isDirSeparator(*path)) {
 23f280e:	4604      	mov	r4, r0
 23f2810:	f814 1b01 	ldrb.w	r1, [r4], #1
 23f2814:	b1f1      	cbz	r1, 23f2854 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x5c>
 23f2816:	292f      	cmp	r1, #47	; 0x2f
 23f2818:	d01c      	beq.n	23f2854 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x5c>
         c == '>' || c == '?' || c == '\\' || c == '|';
 23f281a:	f1a1 0020 	sub.w	r0, r1, #32
 23f281e:	285f      	cmp	r0, #95	; 0x5f
 23f2820:	d828      	bhi.n	23f2874 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x7c>
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':' || c == '<' ||
 23f2822:	f1a1 0022 	sub.w	r0, r1, #34	; 0x22
 23f2826:	b2c0      	uxtb	r0, r0
 23f2828:	281d      	cmp	r0, #29
 23f282a:	d803      	bhi.n	23f2834 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x3c>
 23f282c:	fa26 f000 	lsr.w	r0, r6, r0
 23f2830:	07c0      	lsls	r0, r0, #31
 23f2832:	d41f      	bmi.n	23f2874 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x7c>
 23f2834:	f001 00bf 	and.w	r0, r1, #191	; 0xbf
 23f2838:	283c      	cmp	r0, #60	; 0x3c
 23f283a:	d01b      	beq.n	23f2874 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x7c>
         c == '>' || c == '?' || c == '\\' || c == '|';
 23f283c:	295c      	cmp	r1, #92	; 0x5c
 23f283e:	d019      	beq.n	23f2874 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x7c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len++;
#endif  // USE_UTF8_LONG_NAMES
    if (cp != '.' && cp != ' ') {
 23f2840:	292e      	cmp	r1, #46	; 0x2e
 23f2842:	eba4 0005 	sub.w	r0, r4, r5
 23f2846:	d003      	beq.n	23f2850 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x58>
 23f2848:	2920      	cmp	r1, #32
 23f284a:	d001      	beq.n	23f2850 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x58>
      // Need to trim trailing dots spaces.
      fname->len = len;
      fname->end = path;
 23f284c:	e9c2 4002 	strd	r4, r0, [r2, #8]
                            const char** ptr) {
 23f2850:	4620      	mov	r0, r4
 23f2852:	e7dc      	b.n	23f280e <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x16>
    }
  }
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
 23f2854:	68d1      	ldr	r1, [r2, #12]
 23f2856:	3901      	subs	r1, #1
 23f2858:	29fe      	cmp	r1, #254	; 0xfe
 23f285a:	d80b      	bhi.n	23f2874 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x7c>
 23f285c:	4604      	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {
 23f285e:	f810 1b01 	ldrb.w	r1, [r0], #1
 23f2862:	2920      	cmp	r1, #32
 23f2864:	d0fa      	beq.n	23f285c <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x64>
 23f2866:	292f      	cmp	r1, #47	; 0x2f
 23f2868:	d0f8      	beq.n	23f285c <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x64>
  }
  *ptr = path;
 23f286a:	601c      	str	r4, [r3, #0]
  return makeSFN(fname);
 23f286c:	4610      	mov	r0, r2

fail:
  return false;
}
 23f286e:	bc70      	pop	{r4, r5, r6}
  return makeSFN(fname);
 23f2870:	f7ff bda7 	b.w	23f23c2 <_ZN7FatFile7makeSFNEP8FatLfn_t>
}
 23f2874:	2000      	movs	r0, #0
 23f2876:	bc70      	pop	{r4, r5, r6}
 23f2878:	4770      	bx	lr
 23f287a:	bf00      	nop
 23f287c:	31000101 	.word	0x31000101

023f2880 <_ZN7FatFile6removeEv>:
  FatFile() {}
 23f2880:	2300      	movs	r3, #0
//------------------------------------------------------------------------------
bool FatFile::remove() {
 23f2882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f2886:	b08a      	sub	sp, #40	; 0x28
 23f2888:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
 23f288a:	7883      	ldrb	r3, [r0, #2]
bool FatFile::remove() {
 23f288c:	4604      	mov	r4, r0
  if (!isWritable()) {
 23f288e:	079a      	lsls	r2, r3, #30
 23f2890:	d507      	bpl.n	23f28a2 <_ZN7FatFile6removeEv+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
 23f2892:	6a01      	ldr	r1, [r0, #32]
 23f2894:	b939      	cbnz	r1, 23f28a6 <_ZN7FatFile6removeEv+0x26>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
 23f2896:	2101      	movs	r1, #1
 23f2898:	4620      	mov	r0, r4
 23f289a:	f7ff f8c7 	bl	23f1a2c <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
 23f289e:	4605      	mov	r5, r0
 23f28a0:	b938      	cbnz	r0, 23f28b2 <_ZN7FatFile6removeEv+0x32>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
 23f28a2:	2000      	movs	r0, #0
 23f28a4:	e042      	b.n	23f292c <_ZN7FatFile6removeEv+0xac>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
 23f28a6:	6880      	ldr	r0, [r0, #8]
 23f28a8:	f001 ff6c 	bl	23f4784 <_ZN12FatPartition9freeChainEm>
 23f28ac:	2800      	cmp	r0, #0
 23f28ae:	d1f2      	bne.n	23f2896 <_ZN7FatFile6removeEv+0x16>
 23f28b0:	e7f7      	b.n	23f28a2 <_ZN7FatFile6removeEv+0x22>
  dir->name[0] = FAT_NAME_DELETED;
 23f28b2:	27e5      	movs	r7, #229	; 0xe5
  checksum = lfnChecksum(dir->name);
 23f28b4:	f7ff fcb8 	bl	23f2228 <_ZN7FatFile11lfnChecksumEPKh.isra.0>
  m_attributes = FILE_ATTR_CLOSED;
 23f28b8:	2300      	movs	r3, #0
  dir->name[0] = FAT_NAME_DELETED;
 23f28ba:	702f      	strb	r7, [r5, #0]
  checksum = lfnChecksum(dir->name);
 23f28bc:	4606      	mov	r6, r0
  m_attributes = FILE_ATTR_CLOSED;
 23f28be:	7023      	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
 23f28c0:	68a0      	ldr	r0, [r4, #8]
  m_flags = 0;
 23f28c2:	70a3      	strb	r3, [r4, #2]
  if (!m_vol->cacheSync()) {
 23f28c4:	f7ff f840 	bl	23f1948 <_ZN12FatPartition9cacheSyncEv>
 23f28c8:	2800      	cmp	r0, #0
 23f28ca:	d0ea      	beq.n	23f28a2 <_ZN7FatFile6removeEv+0x22>
  if (!isLFN()) {
 23f28cc:	78e3      	ldrb	r3, [r4, #3]
 23f28ce:	b36b      	cbz	r3, 23f292c <_ZN7FatFile6removeEv+0xac>
  if (!dirFile.openCluster(this)) {
 23f28d0:	4621      	mov	r1, r4
 23f28d2:	a801      	add	r0, sp, #4
 23f28d4:	f7ff f8bf 	bl	23f1a56 <_ZN7FatFile11openClusterEPS_>
 23f28d8:	2800      	cmp	r0, #0
 23f28da:	d0e2      	beq.n	23f28a2 <_ZN7FatFile6removeEv+0x22>
 23f28dc:	2501      	movs	r5, #1
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
 23f28de:	78e3      	ldrb	r3, [r4, #3]
 23f28e0:	fa5f f885 	uxtb.w	r8, r5
 23f28e4:	4543      	cmp	r3, r8
 23f28e6:	d3dc      	bcc.n	23f28a2 <_ZN7FatFile6removeEv+0x22>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
 23f28e8:	88a1      	ldrh	r1, [r4, #4]
 23f28ea:	a801      	add	r0, sp, #4
 23f28ec:	1b49      	subs	r1, r1, r5
 23f28ee:	b289      	uxth	r1, r1
 23f28f0:	f7ff fca9 	bl	23f2246 <_ZN7FatFile8cacheDirEt>
    if (!ldir) {
 23f28f4:	2800      	cmp	r0, #0
 23f28f6:	d0d4      	beq.n	23f28a2 <_ZN7FatFile6removeEv+0x22>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
 23f28f8:	7ac3      	ldrb	r3, [r0, #11]
 23f28fa:	2b0f      	cmp	r3, #15
 23f28fc:	d1d1      	bne.n	23f28a2 <_ZN7FatFile6removeEv+0x22>
        order != (ldir->order & 0X1F) || checksum != ldir->checksum) {
 23f28fe:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
 23f2900:	f002 031f 	and.w	r3, r2, #31
 23f2904:	4543      	cmp	r3, r8
 23f2906:	d1cc      	bne.n	23f28a2 <_ZN7FatFile6removeEv+0x22>
        order != (ldir->order & 0X1F) || checksum != ldir->checksum) {
 23f2908:	7b43      	ldrb	r3, [r0, #13]
 23f290a:	42b3      	cmp	r3, r6
 23f290c:	d1c9      	bne.n	23f28a2 <_ZN7FatFile6removeEv+0x22>
    ldir->order = FAT_NAME_DELETED;
 23f290e:	7007      	strb	r7, [r0, #0]
    m_vol->cacheDirty();
 23f2910:	68a1      	ldr	r1, [r4, #8]
    if (last) {
 23f2912:	3501      	adds	r5, #1
 23f2914:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
 23f2918:	b2ad      	uxth	r5, r5
 23f291a:	f043 0301 	orr.w	r3, r3, #1
 23f291e:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
 23f2922:	0653      	lsls	r3, r2, #25
 23f2924:	d5db      	bpl.n	23f28de <_ZN7FatFile6removeEv+0x5e>
      if (!m_vol->cacheSync()) {
 23f2926:	68a0      	ldr	r0, [r4, #8]
 23f2928:	f7ff f80e 	bl	23f1948 <_ZN12FatPartition9cacheSyncEv>
}
 23f292c:	b00a      	add	sp, #40	; 0x28
 23f292e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f2932 <_ZN7Timeout8timedOutEv.isra.0>:
 public:
  Timeout() {}
  explicit Timeout(uint16_t ms) { set(ms); }
  uint16_t millis16() { return millis(); }
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
 23f2932:	b510      	push	{r4, lr}
 23f2934:	4604      	mov	r4, r0
 23f2936:	f003 fdbb 	bl	23f64b0 <HAL_Timer_Get_Milli_Seconds>
 23f293a:	1a20      	subs	r0, r4, r0
 23f293c:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 23f2940:	bd10      	pop	{r4, pc}

023f2942 <_ZN18SdSpiArduinoDriver11setSckSpeedEm>:
 23f2942:	2300      	movs	r3, #0
 23f2944:	7203      	strb	r3, [r0, #8]
 23f2946:	2301      	movs	r3, #1
 23f2948:	60c1      	str	r1, [r0, #12]
 23f294a:	8203      	strh	r3, [r0, #16]
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
  }
 23f294c:	4770      	bx	lr

023f294e <_ZN9SdSpiCard8spiStartEv>:
  (void)value;
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
 23f294e:	b538      	push	{r3, r4, r5, lr}
  SPI_ASSERT_NOT_ACTIVE;
  if (!m_spiActive) {
 23f2950:	7f05      	ldrb	r5, [r0, #28]
void SdSpiCard::spiStart() {
 23f2952:	4604      	mov	r4, r0
  if (!m_spiActive) {
 23f2954:	b96d      	cbnz	r5, 23f2972 <_ZN9SdSpiCard8spiStartEv+0x24>
  void spiActivate() { m_spiDriver.activate(); }
 23f2956:	f000 faab 	bl	23f2eb0 <_ZN18SdSpiArduinoDriver8activateEv>
    spiActivate();
    m_spiActive = true;
 23f295a:	2301      	movs	r3, #1
  void spiSelect() { sdCsWrite(m_csPin, false); }
 23f295c:	4629      	mov	r1, r5
 23f295e:	7ea0      	ldrb	r0, [r4, #26]
 23f2960:	7723      	strb	r3, [r4, #28]
 23f2962:	f002 f8e2 	bl	23f4b2a <_Z9sdCsWritehb>
    m_spiDriver.send(data);
 23f2966:	4620      	mov	r0, r4
    spiSelect();
    // Dummy byte to drive MISO busy status.
    spiSend(0XFF);
  }
}
 23f2968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23f296c:	21ff      	movs	r1, #255	; 0xff
 23f296e:	f000 bae7 	b.w	23f2f40 <_ZN18SdSpiArduinoDriver4sendEh>
 23f2972:	bd38      	pop	{r3, r4, r5, pc}

023f2974 <_ZN9SdSpiCard7spiStopEv>:
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
 23f2974:	b510      	push	{r4, lr}
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
 23f2976:	7f03      	ldrb	r3, [r0, #28]
void SdSpiCard::spiStop() {
 23f2978:	4604      	mov	r4, r0
  if (m_spiActive) {
 23f297a:	b163      	cbz	r3, 23f2996 <_ZN9SdSpiCard7spiStopEv+0x22>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
 23f297c:	2101      	movs	r1, #1
 23f297e:	7e80      	ldrb	r0, [r0, #26]
 23f2980:	f002 f8d3 	bl	23f4b2a <_Z9sdCsWritehb>
    m_spiDriver.send(data);
 23f2984:	21ff      	movs	r1, #255	; 0xff
 23f2986:	4620      	mov	r0, r4
 23f2988:	f000 fada 	bl	23f2f40 <_ZN18SdSpiArduinoDriver4sendEh>
  void spiDeactivate() { m_spiDriver.deactivate(); }
 23f298c:	4620      	mov	r0, r4
 23f298e:	f000 fab9 	bl	23f2f04 <_ZN18SdSpiArduinoDriver10deactivateEv>
    spiUnselect();
    // Insure MISO goes to low Z.
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
 23f2992:	2300      	movs	r3, #0
 23f2994:	7723      	strb	r3, [r4, #28]
  }
}
 23f2996:	bd10      	pop	{r4, pc}

023f2998 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 23f2998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f299a:	4604      	mov	r4, r0
 23f299c:	460e      	mov	r6, r1
 23f299e:	4617      	mov	r7, r2
 23f29a0:	f003 fd86 	bl	23f64b0 <HAL_Timer_Get_Milli_Seconds>
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
 23f29a4:	f500 7096 	add.w	r0, r0, #300	; 0x12c
 23f29a8:	b285      	uxth	r5, r0
    return m_spiDriver.receive();
 23f29aa:	4620      	mov	r0, r4
 23f29ac:	f000 faad 	bl	23f2f0a <_ZN18SdSpiArduinoDriver7receiveEv>
  while ((m_status = spiReceive()) == 0XFF) {
 23f29b0:	28ff      	cmp	r0, #255	; 0xff
 23f29b2:	77a0      	strb	r0, [r4, #30]
 23f29b4:	d10b      	bne.n	23f29ce <_ZN9SdSpiCard8readDataEPhj+0x36>
    if (timeout.timedOut()) {
 23f29b6:	4628      	mov	r0, r5
 23f29b8:	f7ff ffbb 	bl	23f2932 <_ZN7Timeout8timedOutEv.isra.0>
 23f29bc:	2800      	cmp	r0, #0
 23f29be:	d0f4      	beq.n	23f29aa <_ZN9SdSpiCard8readDataEPhj+0x12>
    m_errorCode = code;
 23f29c0:	231e      	movs	r3, #30
  spiStop();
 23f29c2:	4620      	mov	r0, r4
 23f29c4:	76e3      	strb	r3, [r4, #27]
 23f29c6:	f7ff ffd5 	bl	23f2974 <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f29ca:	2000      	movs	r0, #0
}
 23f29cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_SECTOR) {
 23f29ce:	28fe      	cmp	r0, #254	; 0xfe
 23f29d0:	d001      	beq.n	23f29d6 <_ZN9SdSpiCard8readDataEPhj+0x3e>
 23f29d2:	2319      	movs	r3, #25
 23f29d4:	e7f5      	b.n	23f29c2 <_ZN9SdSpiCard8readDataEPhj+0x2a>
    return m_spiDriver.receive(buf, n);
 23f29d6:	463a      	mov	r2, r7
 23f29d8:	4631      	mov	r1, r6
 23f29da:	4620      	mov	r0, r4
 23f29dc:	f000 fa9a 	bl	23f2f14 <_ZN18SdSpiArduinoDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
 23f29e0:	77a0      	strb	r0, [r4, #30]
 23f29e2:	b108      	cbz	r0, 23f29e8 <_ZN9SdSpiCard8readDataEPhj+0x50>
    m_errorCode = code;
 23f29e4:	2326      	movs	r3, #38	; 0x26
 23f29e6:	e7ec      	b.n	23f29c2 <_ZN9SdSpiCard8readDataEPhj+0x2a>
    return m_spiDriver.receive();
 23f29e8:	4620      	mov	r0, r4
 23f29ea:	f000 fa8e 	bl	23f2f0a <_ZN18SdSpiArduinoDriver7receiveEv>
 23f29ee:	4620      	mov	r0, r4
 23f29f0:	f000 fa8b 	bl	23f2f0a <_ZN18SdSpiArduinoDriver7receiveEv>
  return true;
 23f29f4:	2001      	movs	r0, #1
 23f29f6:	e7e9      	b.n	23f29cc <_ZN9SdSpiCard8readDataEPhj+0x34>

023f29f8 <_ZN9SdSpiCard8readDataEPh>:
bool SdSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
 23f29f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 23f29fc:	f7ff bfcc 	b.w	23f2998 <_ZN9SdSpiCard8readDataEPhj>

023f2a00 <_ZN9SdSpiCard9waitReadyEt>:
    return readStop();
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::waitReady(uint16_t ms) {
 23f2a00:	b538      	push	{r3, r4, r5, lr}
 23f2a02:	460c      	mov	r4, r1
 23f2a04:	4605      	mov	r5, r0
 23f2a06:	f003 fd53 	bl	23f64b0 <HAL_Timer_Get_Milli_Seconds>
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
 23f2a0a:	4404      	add	r4, r0
 23f2a0c:	b2a4      	uxth	r4, r4
 23f2a0e:	4628      	mov	r0, r5
 23f2a10:	f000 fa7b 	bl	23f2f0a <_ZN18SdSpiArduinoDriver7receiveEv>
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
 23f2a14:	28ff      	cmp	r0, #255	; 0xff
 23f2a16:	d006      	beq.n	23f2a26 <_ZN9SdSpiCard9waitReadyEt+0x26>
    if (timeout.timedOut()) {
 23f2a18:	4620      	mov	r0, r4
 23f2a1a:	f7ff ff8a 	bl	23f2932 <_ZN7Timeout8timedOutEv.isra.0>
 23f2a1e:	2800      	cmp	r0, #0
 23f2a20:	d0f5      	beq.n	23f2a0e <_ZN9SdSpiCard9waitReadyEt+0xe>
      return false;
 23f2a22:	2000      	movs	r0, #0
    }
  }
  return true;
}
 23f2a24:	bd38      	pop	{r3, r4, r5, pc}
  return true;
 23f2a26:	2001      	movs	r0, #1
 23f2a28:	e7fc      	b.n	23f2a24 <_ZN9SdSpiCard9waitReadyEt+0x24>

023f2a2a <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 23f2a2a:	b538      	push	{r3, r4, r5, lr}
 23f2a2c:	4604      	mov	r4, r0
 23f2a2e:	4615      	mov	r5, r2
    m_spiDriver.send(data);
 23f2a30:	f000 fa86 	bl	23f2f40 <_ZN18SdSpiArduinoDriver4sendEh>
    m_spiDriver.send(buf, n);
 23f2a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 23f2a38:	4629      	mov	r1, r5
 23f2a3a:	4620      	mov	r0, r4
 23f2a3c:	f000 fa84 	bl	23f2f48 <_ZN18SdSpiArduinoDriver4sendEPKhj>
    m_spiDriver.send(data);
 23f2a40:	21ff      	movs	r1, #255	; 0xff
 23f2a42:	4620      	mov	r0, r4
 23f2a44:	f000 fa7c 	bl	23f2f40 <_ZN18SdSpiArduinoDriver4sendEh>
 23f2a48:	21ff      	movs	r1, #255	; 0xff
 23f2a4a:	4620      	mov	r0, r4
 23f2a4c:	f000 fa78 	bl	23f2f40 <_ZN18SdSpiArduinoDriver4sendEh>
    return m_spiDriver.receive();
 23f2a50:	4620      	mov	r0, r4
 23f2a52:	f000 fa5a 	bl	23f2f0a <_ZN18SdSpiArduinoDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
 23f2a56:	77a0      	strb	r0, [r4, #30]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 23f2a58:	f000 001f 	and.w	r0, r0, #31
 23f2a5c:	2805      	cmp	r0, #5
 23f2a5e:	d006      	beq.n	23f2a6e <_ZN9SdSpiCard9writeDataEhPKh+0x44>
    m_errorCode = code;
 23f2a60:	2321      	movs	r3, #33	; 0x21
    goto fail;
  }
  return true;

fail:
  spiStop();
 23f2a62:	4620      	mov	r0, r4
 23f2a64:	76e3      	strb	r3, [r4, #27]
 23f2a66:	f7ff ff85 	bl	23f2974 <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f2a6a:	2000      	movs	r0, #0
}
 23f2a6c:	bd38      	pop	{r3, r4, r5, pc}
  return true;
 23f2a6e:	2001      	movs	r0, #1
 23f2a70:	e7fc      	b.n	23f2a6c <_ZN9SdSpiCard9writeDataEhPKh+0x42>

023f2a72 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
 23f2a72:	b513      	push	{r0, r1, r4, lr}
 23f2a74:	9101      	str	r1, [sp, #4]
  if (!waitReady(SD_WRITE_TIMEOUT)) {
 23f2a76:	f44f 7116 	mov.w	r1, #600	; 0x258
bool SdSpiCard::writeData(const uint8_t* src) {
 23f2a7a:	4604      	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
 23f2a7c:	f7ff ffc0 	bl	23f2a00 <_ZN9SdSpiCard9waitReadyEt>
 23f2a80:	9a01      	ldr	r2, [sp, #4]
 23f2a82:	b930      	cbnz	r0, 23f2a92 <_ZN9SdSpiCard9writeDataEPKh+0x20>
 23f2a84:	2325      	movs	r3, #37	; 0x25
 23f2a86:	76e3      	strb	r3, [r4, #27]
  spiStop();
 23f2a88:	4620      	mov	r0, r4
 23f2a8a:	f7ff ff73 	bl	23f2974 <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f2a8e:	2000      	movs	r0, #0
 23f2a90:	e005      	b.n	23f2a9e <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 23f2a92:	21fc      	movs	r1, #252	; 0xfc
 23f2a94:	4620      	mov	r0, r4
 23f2a96:	f7ff ffc8 	bl	23f2a2a <_ZN9SdSpiCard9writeDataEhPKh>
 23f2a9a:	2800      	cmp	r0, #0
 23f2a9c:	d0f4      	beq.n	23f2a88 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
 23f2a9e:	b002      	add	sp, #8
 23f2aa0:	bd10      	pop	{r4, pc}

023f2aa2 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 23f2aa2:	b538      	push	{r3, r4, r5, lr}
  if (!waitReady(SD_WRITE_TIMEOUT)) {
 23f2aa4:	f44f 7116 	mov.w	r1, #600	; 0x258
bool SdSpiCard::writeStop() {
 23f2aa8:	4604      	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
 23f2aaa:	f7ff ffa9 	bl	23f2a00 <_ZN9SdSpiCard9waitReadyEt>
 23f2aae:	4605      	mov	r5, r0
 23f2ab0:	b930      	cbnz	r0, 23f2ac0 <_ZN9SdSpiCard9writeStopEv+0x1e>
 23f2ab2:	231f      	movs	r3, #31
  m_state = IDLE_STATE;
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
 23f2ab4:	4620      	mov	r0, r4
 23f2ab6:	76e3      	strb	r3, [r4, #27]
 23f2ab8:	f7ff ff5c 	bl	23f2974 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
 23f2abc:	4628      	mov	r0, r5
 23f2abe:	bd38      	pop	{r3, r4, r5, pc}
    m_spiDriver.send(data);
 23f2ac0:	21fd      	movs	r1, #253	; 0xfd
 23f2ac2:	4620      	mov	r0, r4
 23f2ac4:	f000 fa3c 	bl	23f2f40 <_ZN18SdSpiArduinoDriver4sendEh>
  spiStop();
 23f2ac8:	4620      	mov	r0, r4
 23f2aca:	f7ff ff53 	bl	23f2974 <_ZN9SdSpiCard7spiStopEv>
  m_state = IDLE_STATE;
 23f2ace:	2300      	movs	r3, #0
 23f2ad0:	7763      	strb	r3, [r4, #29]
  return true;
 23f2ad2:	e7f3      	b.n	23f2abc <_ZN9SdSpiCard9writeStopEv+0x1a>

023f2ad4 <_ZN9SdSpiCard10syncDeviceEv>:
  if (m_state == WRITE_STATE) {
 23f2ad4:	7f43      	ldrb	r3, [r0, #29]
 23f2ad6:	2b02      	cmp	r3, #2
 23f2ad8:	d101      	bne.n	23f2ade <_ZN9SdSpiCard10syncDeviceEv+0xa>
    return writeStop();
 23f2ada:	f7ff bfe2 	b.w	23f2aa2 <_ZN9SdSpiCard9writeStopEv>
  if (m_state == READ_STATE) {
 23f2ade:	2b01      	cmp	r3, #1
 23f2ae0:	d101      	bne.n	23f2ae6 <_ZN9SdSpiCard10syncDeviceEv+0x12>
    return readStop();
 23f2ae2:	f000 b916 	b.w	23f2d12 <_ZN9SdSpiCard8readStopEv>
}
 23f2ae6:	2001      	movs	r0, #1
 23f2ae8:	4770      	bx	lr

023f2aea <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 23f2aea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23f2aec:	4604      	mov	r4, r0
 23f2aee:	460d      	mov	r5, r1
 23f2af0:	9201      	str	r2, [sp, #4]
  if (!syncDevice()) {
 23f2af2:	f7ff ffef 	bl	23f2ad4 <_ZN9SdSpiCard10syncDeviceEv>
 23f2af6:	b390      	cbz	r0, 23f2b5e <_ZN9SdSpiCard11cardCommandEhm+0x74>
  if (!m_spiActive) {
 23f2af8:	7f23      	ldrb	r3, [r4, #28]
 23f2afa:	b913      	cbnz	r3, 23f2b02 <_ZN9SdSpiCard11cardCommandEhm+0x18>
    spiStart();
 23f2afc:	4620      	mov	r0, r4
 23f2afe:	f7ff ff26 	bl	23f294e <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0 && cmd != CMD12 && !waitReady(SD_CMD_TIMEOUT)) {
 23f2b02:	bb1d      	cbnz	r5, 23f2b4c <_ZN9SdSpiCard11cardCommandEhm+0x62>
 23f2b04:	4620      	mov	r0, r4
 23f2b06:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 23f2b0a:	f000 fa19 	bl	23f2f40 <_ZN18SdSpiArduinoDriver4sendEh>
 23f2b0e:	2603      	movs	r6, #3
    spiSend(pa[i]);
 23f2b10:	af01      	add	r7, sp, #4
 23f2b12:	5db9      	ldrb	r1, [r7, r6]
 23f2b14:	4620      	mov	r0, r4
 23f2b16:	f000 fa13 	bl	23f2f40 <_ZN18SdSpiArduinoDriver4sendEh>
  for (int8_t i = 3; i >= 0; i--) {
 23f2b1a:	3e01      	subs	r6, #1
 23f2b1c:	d2f9      	bcs.n	23f2b12 <_ZN9SdSpiCard11cardCommandEhm+0x28>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 23f2b1e:	2d00      	cmp	r5, #0
 23f2b20:	bf0c      	ite	eq
 23f2b22:	2195      	moveq	r1, #149	; 0x95
 23f2b24:	2187      	movne	r1, #135	; 0x87
 23f2b26:	4620      	mov	r0, r4
 23f2b28:	f000 fa0a 	bl	23f2f40 <_ZN18SdSpiArduinoDriver4sendEh>
    return m_spiDriver.receive();
 23f2b2c:	4620      	mov	r0, r4
 23f2b2e:	f000 f9ec 	bl	23f2f0a <_ZN18SdSpiArduinoDriver7receiveEv>
 23f2b32:	250a      	movs	r5, #10
 23f2b34:	4620      	mov	r0, r4
 23f2b36:	f000 f9e8 	bl	23f2f0a <_ZN18SdSpiArduinoDriver7receiveEv>
  } while (m_status & 0X80 && ++n < 10);
 23f2b3a:	0603      	lsls	r3, r0, #24
    m_status = spiReceive();
 23f2b3c:	77a0      	strb	r0, [r4, #30]
  } while (m_status & 0X80 && ++n < 10);
 23f2b3e:	d503      	bpl.n	23f2b48 <_ZN9SdSpiCard11cardCommandEhm+0x5e>
 23f2b40:	3d01      	subs	r5, #1
 23f2b42:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 23f2b46:	d1f5      	bne.n	23f2b34 <_ZN9SdSpiCard11cardCommandEhm+0x4a>
}
 23f2b48:	b003      	add	sp, #12
 23f2b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (cmd != CMD0 && cmd != CMD12 && !waitReady(SD_CMD_TIMEOUT)) {
 23f2b4c:	2d0c      	cmp	r5, #12
 23f2b4e:	d0d9      	beq.n	23f2b04 <_ZN9SdSpiCard11cardCommandEhm+0x1a>
 23f2b50:	f44f 7196 	mov.w	r1, #300	; 0x12c
 23f2b54:	4620      	mov	r0, r4
 23f2b56:	f7ff ff53 	bl	23f2a00 <_ZN9SdSpiCard9waitReadyEt>
 23f2b5a:	2800      	cmp	r0, #0
 23f2b5c:	d1d2      	bne.n	23f2b04 <_ZN9SdSpiCard11cardCommandEhm+0x1a>
    return 0XFF;
 23f2b5e:	20ff      	movs	r0, #255	; 0xff
 23f2b60:	e7f2      	b.n	23f2b48 <_ZN9SdSpiCard11cardCommandEhm+0x5e>

023f2b62 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
 23f2b62:	b570      	push	{r4, r5, r6, lr}
 23f2b64:	4604      	mov	r4, r0
 23f2b66:	460d      	mov	r5, r1
 23f2b68:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
 23f2b6a:	2137      	movs	r1, #55	; 0x37
 23f2b6c:	2200      	movs	r2, #0
 23f2b6e:	f7ff ffbc 	bl	23f2aea <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 23f2b72:	4632      	mov	r2, r6
 23f2b74:	4629      	mov	r1, r5
 23f2b76:	4620      	mov	r0, r4
  }
 23f2b78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
 23f2b7c:	f7ff bfb5 	b.w	23f2aea <_ZN9SdSpiCard11cardCommandEhm>

023f2b80 <_ZN9SdSpiCard5beginE11SdSpiConfig>:
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
 23f2b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f2b84:	b088      	sub	sp, #32
 23f2b86:	ad01      	add	r5, sp, #4
 23f2b88:	4604      	mov	r4, r0
 23f2b8a:	e885 000e 	stmia.w	r5, {r1, r2, r3}
    m_beginCalled = false;
 23f2b8e:	2300      	movs	r3, #0
 23f2b90:	f89d 0004 	ldrb.w	r0, [sp, #4]
 23f2b94:	7663      	strb	r3, [r4, #25]
  m_errorCode = SD_CARD_ERROR_NONE;
 23f2b96:	76e3      	strb	r3, [r4, #27]
    m_spiActive = false;
 23f2b98:	61e3      	str	r3, [r4, #28]
  m_csPin = spiConfig.csPin;
 23f2b9a:	76a0      	strb	r0, [r4, #26]
 23f2b9c:	4617      	mov	r7, r2
 23f2b9e:	f89d 6005 	ldrb.w	r6, [sp, #5]
  sdCsInit(m_csPin);
 23f2ba2:	f001 ffbf 	bl	23f4b24 <_Z8sdCsInith>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
 23f2ba6:	2101      	movs	r1, #1
 23f2ba8:	7ea0      	ldrb	r0, [r4, #26]
 23f2baa:	f001 ffbe 	bl	23f4b2a <_Z9sdCsWritehb>
  void spiSetSckSpeed(uint32_t maxSck) { m_spiDriver.setSckSpeed(maxSck); }
 23f2bae:	4620      	mov	r0, r4
 23f2bb0:	494c      	ldr	r1, [pc, #304]	; (23f2ce4 <_ZN9SdSpiCard5beginE11SdSpiConfig+0x164>)
 23f2bb2:	f7ff fec6 	bl	23f2942 <_ZN18SdSpiArduinoDriver11setSckSpeedEm>
  spiBegin(spiConfig);
 23f2bb6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  m_beginCalled = true;
 23f2bba:	2501      	movs	r5, #1
 23f2bbc:	ab05      	add	r3, sp, #20
 23f2bbe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
 23f2bc2:	4620      	mov	r0, r4
 23f2bc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 23f2bc6:	f000 f977 	bl	23f2eb8 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig>
  spiStart();
 23f2bca:	4620      	mov	r0, r4
  m_beginCalled = true;
 23f2bcc:	7665      	strb	r5, [r4, #25]
  spiStart();
 23f2bce:	f7ff febe 	bl	23f294e <_ZN9SdSpiCard8spiStartEv>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
 23f2bd2:	4629      	mov	r1, r5
 23f2bd4:	7ea0      	ldrb	r0, [r4, #26]
 23f2bd6:	f001 ffa8 	bl	23f4b2a <_Z9sdCsWritehb>
 23f2bda:	250a      	movs	r5, #10
    return m_spiDriver.receive();
 23f2bdc:	4620      	mov	r0, r4
  for (uint8_t i = 0; i < 10; i++) {
 23f2bde:	3d01      	subs	r5, #1
 23f2be0:	f000 f993 	bl	23f2f0a <_ZN18SdSpiArduinoDriver7receiveEv>
 23f2be4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 23f2be8:	d1f8      	bne.n	23f2bdc <_ZN9SdSpiCard5beginE11SdSpiConfig+0x5c>
  void spiSelect() { sdCsWrite(m_csPin, false); }
 23f2bea:	4629      	mov	r1, r5
 23f2bec:	7ea0      	ldrb	r0, [r4, #26]
 23f2bee:	f001 ff9c 	bl	23f4b2a <_Z9sdCsWritehb>
 23f2bf2:	f003 fc5d 	bl	23f64b0 <HAL_Timer_Get_Milli_Seconds>
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
 23f2bf6:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 23f2bfa:	b285      	uxth	r5, r0
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
 23f2bfc:	2200      	movs	r2, #0
 23f2bfe:	4620      	mov	r0, r4
 23f2c00:	4611      	mov	r1, r2
 23f2c02:	f7ff ff72 	bl	23f2aea <_ZN9SdSpiCard11cardCommandEhm>
 23f2c06:	2801      	cmp	r0, #1
 23f2c08:	4680      	mov	r8, r0
 23f2c0a:	d00d      	beq.n	23f2c28 <_ZN9SdSpiCard5beginE11SdSpiConfig+0xa8>
    if (timeout.timedOut()) {
 23f2c0c:	4628      	mov	r0, r5
 23f2c0e:	f7ff fe90 	bl	23f2932 <_ZN7Timeout8timedOutEv.isra.0>
 23f2c12:	2800      	cmp	r0, #0
 23f2c14:	d0f2      	beq.n	23f2bfc <_ZN9SdSpiCard5beginE11SdSpiConfig+0x7c>
    m_errorCode = code;
 23f2c16:	2301      	movs	r3, #1
  spiStop();
 23f2c18:	4620      	mov	r0, r4
 23f2c1a:	76e3      	strb	r3, [r4, #27]
 23f2c1c:	f7ff feaa 	bl	23f2974 <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f2c20:	2000      	movs	r0, #0
}
 23f2c22:	b008      	add	sp, #32
 23f2c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND) {
 23f2c28:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 23f2c2c:	2108      	movs	r1, #8
 23f2c2e:	4620      	mov	r0, r4
 23f2c30:	f7ff ff5b 	bl	23f2aea <_ZN9SdSpiCard11cardCommandEhm>
 23f2c34:	0743      	lsls	r3, r0, #29
 23f2c36:	d413      	bmi.n	23f2c60 <_ZN9SdSpiCard5beginE11SdSpiConfig+0xe0>
 23f2c38:	f04f 0904 	mov.w	r9, #4
    return m_spiDriver.receive();
 23f2c3c:	4620      	mov	r0, r4
 23f2c3e:	f000 f964 	bl	23f2f0a <_ZN18SdSpiArduinoDriver7receiveEv>
    for (uint8_t i = 0; i < 4; i++) {
 23f2c42:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 23f2c46:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
      m_status = spiReceive();
 23f2c4a:	77a0      	strb	r0, [r4, #30]
    for (uint8_t i = 0; i < 4; i++) {
 23f2c4c:	d1f6      	bne.n	23f2c3c <_ZN9SdSpiCard5beginE11SdSpiConfig+0xbc>
    if (m_status == 0XAA) {
 23f2c4e:	28aa      	cmp	r0, #170	; 0xaa
 23f2c50:	d018      	beq.n	23f2c84 <_ZN9SdSpiCard5beginE11SdSpiConfig+0x104>
    if (timeout.timedOut()) {
 23f2c52:	4628      	mov	r0, r5
 23f2c54:	f7ff fe6d 	bl	23f2932 <_ZN7Timeout8timedOutEv.isra.0>
 23f2c58:	2800      	cmp	r0, #0
 23f2c5a:	d0e5      	beq.n	23f2c28 <_ZN9SdSpiCard5beginE11SdSpiConfig+0xa8>
    m_errorCode = code;
 23f2c5c:	2306      	movs	r3, #6
 23f2c5e:	e7db      	b.n	23f2c18 <_ZN9SdSpiCard5beginE11SdSpiConfig+0x98>
      cardType = SD_CARD_TYPE_SD1;
 23f2c60:	f04f 0901 	mov.w	r9, #1
  arg = cardType == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 23f2c64:	f04f 0a00 	mov.w	sl, #0
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 23f2c68:	4652      	mov	r2, sl
 23f2c6a:	2129      	movs	r1, #41	; 0x29
 23f2c6c:	4620      	mov	r0, r4
 23f2c6e:	f7ff ff78 	bl	23f2b62 <_ZN9SdSpiCard8cardAcmdEhm>
 23f2c72:	4602      	mov	r2, r0
 23f2c74:	b158      	cbz	r0, 23f2c8e <_ZN9SdSpiCard5beginE11SdSpiConfig+0x10e>
    if (timeout.timedOut()) {
 23f2c76:	4628      	mov	r0, r5
 23f2c78:	f7ff fe5b 	bl	23f2932 <_ZN7Timeout8timedOutEv.isra.0>
 23f2c7c:	2800      	cmp	r0, #0
 23f2c7e:	d0f3      	beq.n	23f2c68 <_ZN9SdSpiCard5beginE11SdSpiConfig+0xe8>
 23f2c80:	2317      	movs	r3, #23
 23f2c82:	e7c9      	b.n	23f2c18 <_ZN9SdSpiCard5beginE11SdSpiConfig+0x98>
      cardType = SD_CARD_TYPE_SD2;
 23f2c84:	f04f 0902 	mov.w	r9, #2
  arg = cardType == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 23f2c88:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 23f2c8c:	e7ec      	b.n	23f2c68 <_ZN9SdSpiCard5beginE11SdSpiConfig+0xe8>
  if (cardType == SD_CARD_TYPE_SD2) {
 23f2c8e:	f1b9 0f02 	cmp.w	r9, #2
 23f2c92:	d119      	bne.n	23f2cc8 <_ZN9SdSpiCard5beginE11SdSpiConfig+0x148>
    if (cardCommand(CMD58, 0)) {
 23f2c94:	213a      	movs	r1, #58	; 0x3a
 23f2c96:	4620      	mov	r0, r4
 23f2c98:	f7ff ff27 	bl	23f2aea <_ZN9SdSpiCard11cardCommandEhm>
 23f2c9c:	b108      	cbz	r0, 23f2ca2 <_ZN9SdSpiCard5beginE11SdSpiConfig+0x122>
 23f2c9e:	2312      	movs	r3, #18
 23f2ca0:	e7ba      	b.n	23f2c18 <_ZN9SdSpiCard5beginE11SdSpiConfig+0x98>
    return m_spiDriver.receive();
 23f2ca2:	4620      	mov	r0, r4
 23f2ca4:	f000 f931 	bl	23f2f0a <_ZN18SdSpiArduinoDriver7receiveEv>
    if ((spiReceive() & 0XC0) == 0XC0) {
 23f2ca8:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
      cardType = SD_CARD_TYPE_SDHC;
 23f2cac:	28c0      	cmp	r0, #192	; 0xc0
 23f2cae:	bf08      	it	eq
 23f2cb0:	f04f 0903 	moveq.w	r9, #3
 23f2cb4:	4620      	mov	r0, r4
 23f2cb6:	f000 f928 	bl	23f2f0a <_ZN18SdSpiArduinoDriver7receiveEv>
 23f2cba:	4620      	mov	r0, r4
 23f2cbc:	f000 f925 	bl	23f2f0a <_ZN18SdSpiArduinoDriver7receiveEv>
 23f2cc0:	4620      	mov	r0, r4
 23f2cc2:	f000 f922 	bl	23f2f0a <_ZN18SdSpiArduinoDriver7receiveEv>
    for (uint8_t i = 0; i < 3; i++) {
 23f2cc6:	46c8      	mov	r8, r9
  spiStop();
 23f2cc8:	4620      	mov	r0, r4
 23f2cca:	f7ff fe53 	bl	23f2974 <_ZN9SdSpiCard7spiStopEv>
const uint8_t DEDICATED_SPI = 1;
/**
 * \param[in] opt option field of SdSpiConfig.
 * \return true for dedicated SPI.
 */
inline bool spiOptionDedicated(uint8_t opt) { return opt & DEDICATED_SPI; }
 23f2cce:	f006 0601 	and.w	r6, r6, #1
  void spiSetSckSpeed(uint32_t maxSck) { m_spiDriver.setSckSpeed(maxSck); }
 23f2cd2:	4620      	mov	r0, r4
 23f2cd4:	4639      	mov	r1, r7
 23f2cd6:	f7ff fe34 	bl	23f2942 <_ZN18SdSpiArduinoDriver11setSckSpeedEm>
  return true;
 23f2cda:	2001      	movs	r0, #1
  m_type = cardType;
 23f2cdc:	f884 801f 	strb.w	r8, [r4, #31]
 23f2ce0:	7626      	strb	r6, [r4, #24]
  return true;
 23f2ce2:	e79e      	b.n	23f2c22 <_ZN9SdSpiCard5beginE11SdSpiConfig+0xa2>
 23f2ce4:	00061a80 	.word	0x00061a80

023f2ce8 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t sector) {
 23f2ce8:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 23f2cea:	7fc3      	ldrb	r3, [r0, #31]
bool SdSpiCard::readStart(uint32_t sector) {
 23f2cec:	460a      	mov	r2, r1
  if (type() != SD_CARD_TYPE_SDHC) {
 23f2cee:	2b03      	cmp	r3, #3
    sector <<= 9;
 23f2cf0:	bf18      	it	ne
 23f2cf2:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, sector)) {
 23f2cf4:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t sector) {
 23f2cf6:	4604      	mov	r4, r0
  if (cardCommand(CMD18, sector)) {
 23f2cf8:	f7ff fef7 	bl	23f2aea <_ZN9SdSpiCard11cardCommandEhm>
 23f2cfc:	b130      	cbz	r0, 23f2d0c <_ZN9SdSpiCard9readStartEm+0x24>
    m_errorCode = code;
 23f2cfe:	230c      	movs	r3, #12
  spiStop();
 23f2d00:	4620      	mov	r0, r4
 23f2d02:	76e3      	strb	r3, [r4, #27]
 23f2d04:	f7ff fe36 	bl	23f2974 <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f2d08:	2000      	movs	r0, #0
}
 23f2d0a:	bd10      	pop	{r4, pc}
  m_state = READ_STATE;
 23f2d0c:	2001      	movs	r0, #1
 23f2d0e:	7760      	strb	r0, [r4, #29]
  return true;
 23f2d10:	e7fb      	b.n	23f2d0a <_ZN9SdSpiCard9readStartEm+0x22>

023f2d12 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
 23f2d12:	b538      	push	{r3, r4, r5, lr}
  m_state = IDLE_STATE;
 23f2d14:	2400      	movs	r4, #0
  if (cardCommand(CMD12, 0)) {
 23f2d16:	210c      	movs	r1, #12
 23f2d18:	4622      	mov	r2, r4
  m_state = IDLE_STATE;
 23f2d1a:	7744      	strb	r4, [r0, #29]
bool SdSpiCard::readStop() {
 23f2d1c:	4605      	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
 23f2d1e:	f7ff fee4 	bl	23f2aea <_ZN9SdSpiCard11cardCommandEhm>
 23f2d22:	b130      	cbz	r0, 23f2d32 <_ZN9SdSpiCard8readStopEv+0x20>
 23f2d24:	2309      	movs	r3, #9
  spiStop();
 23f2d26:	4628      	mov	r0, r5
 23f2d28:	76eb      	strb	r3, [r5, #27]
 23f2d2a:	f7ff fe23 	bl	23f2974 <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f2d2e:	4620      	mov	r0, r4
}
 23f2d30:	bd38      	pop	{r3, r4, r5, pc}
  spiStop();
 23f2d32:	4628      	mov	r0, r5
 23f2d34:	f7ff fe1e 	bl	23f2974 <_ZN9SdSpiCard7spiStopEv>
  return true;
 23f2d38:	2001      	movs	r0, #1
 23f2d3a:	e7f9      	b.n	23f2d30 <_ZN9SdSpiCard8readStopEv+0x1e>

023f2d3c <_ZN9SdSpiCard11readSectorsEmPhj>:
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
 23f2d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f2d3e:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
 23f2d40:	7f43      	ldrb	r3, [r0, #29]
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
 23f2d42:	4604      	mov	r4, r0
  if (sdState() != READ_STATE || sector != m_curSector) {
 23f2d44:	2b01      	cmp	r3, #1
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
 23f2d46:	460d      	mov	r5, r1
 23f2d48:	4616      	mov	r6, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
 23f2d4a:	d102      	bne.n	23f2d52 <_ZN9SdSpiCard11readSectorsEmPhj+0x16>
 23f2d4c:	6943      	ldr	r3, [r0, #20]
 23f2d4e:	428b      	cmp	r3, r1
 23f2d50:	d007      	beq.n	23f2d62 <_ZN9SdSpiCard11readSectorsEmPhj+0x26>
    if (!readStart(sector)) {
 23f2d52:	4629      	mov	r1, r5
 23f2d54:	4620      	mov	r0, r4
 23f2d56:	f7ff ffc7 	bl	23f2ce8 <_ZN9SdSpiCard9readStartEm>
 23f2d5a:	b908      	cbnz	r0, 23f2d60 <_ZN9SdSpiCard11readSectorsEmPhj+0x24>
  return false;
 23f2d5c:	2000      	movs	r0, #0
}
 23f2d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_curSector = sector;
 23f2d60:	6165      	str	r5, [r4, #20]
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
 23f2d62:	2500      	movs	r5, #0
  for (size_t i = 0; i < ns; i++, dst += 512) {
 23f2d64:	42bd      	cmp	r5, r7
 23f2d66:	eb06 2145 	add.w	r1, r6, r5, lsl #9
 23f2d6a:	d006      	beq.n	23f2d7a <_ZN9SdSpiCard11readSectorsEmPhj+0x3e>
    if (!readData(dst)) {
 23f2d6c:	4620      	mov	r0, r4
 23f2d6e:	f7ff fe43 	bl	23f29f8 <_ZN9SdSpiCard8readDataEPh>
 23f2d72:	2800      	cmp	r0, #0
 23f2d74:	d0f2      	beq.n	23f2d5c <_ZN9SdSpiCard11readSectorsEmPhj+0x20>
  for (size_t i = 0; i < ns; i++, dst += 512) {
 23f2d76:	3501      	adds	r5, #1
 23f2d78:	e7f4      	b.n	23f2d64 <_ZN9SdSpiCard11readSectorsEmPhj+0x28>
  m_curSector += ns;
 23f2d7a:	6963      	ldr	r3, [r4, #20]
 23f2d7c:	442b      	add	r3, r5
 23f2d7e:	6163      	str	r3, [r4, #20]
  return m_dedicatedSpi ? true : readStop();
 23f2d80:	7e23      	ldrb	r3, [r4, #24]
 23f2d82:	b92b      	cbnz	r3, 23f2d90 <_ZN9SdSpiCard11readSectorsEmPhj+0x54>
 23f2d84:	4620      	mov	r0, r4
 23f2d86:	f7ff ffc4 	bl	23f2d12 <_ZN9SdSpiCard8readStopEv>
 23f2d8a:	f000 0001 	and.w	r0, r0, #1
 23f2d8e:	e7e6      	b.n	23f2d5e <_ZN9SdSpiCard11readSectorsEmPhj+0x22>
 23f2d90:	2001      	movs	r0, #1
 23f2d92:	e7fa      	b.n	23f2d8a <_ZN9SdSpiCard11readSectorsEmPhj+0x4e>

023f2d94 <_ZN9SdSpiCard10readSectorEmPh>:
  return readSectors(sector, dst, 1);
 23f2d94:	2301      	movs	r3, #1
 23f2d96:	f7ff bfd1 	b.w	23f2d3c <_ZN9SdSpiCard11readSectorsEmPhj>

023f2d9a <_ZN9SdSpiCard10writeStartEm>:
bool SdSpiCard::writeStart(uint32_t sector) {
 23f2d9a:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 23f2d9c:	7fc3      	ldrb	r3, [r0, #31]
bool SdSpiCard::writeStart(uint32_t sector) {
 23f2d9e:	460a      	mov	r2, r1
  if (type() != SD_CARD_TYPE_SDHC) {
 23f2da0:	2b03      	cmp	r3, #3
    sector <<= 9;
 23f2da2:	bf18      	it	ne
 23f2da4:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD25, sector)) {
 23f2da6:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t sector) {
 23f2da8:	4604      	mov	r4, r0
  if (cardCommand(CMD25, sector)) {
 23f2daa:	f7ff fe9e 	bl	23f2aea <_ZN9SdSpiCard11cardCommandEhm>
 23f2dae:	b130      	cbz	r0, 23f2dbe <_ZN9SdSpiCard10writeStartEm+0x24>
 23f2db0:	230e      	movs	r3, #14
  spiStop();
 23f2db2:	4620      	mov	r0, r4
 23f2db4:	76e3      	strb	r3, [r4, #27]
 23f2db6:	f7ff fddd 	bl	23f2974 <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f2dba:	2000      	movs	r0, #0
}
 23f2dbc:	bd10      	pop	{r4, pc}
  m_state = WRITE_STATE;
 23f2dbe:	2302      	movs	r3, #2
  return true;
 23f2dc0:	2001      	movs	r0, #1
  m_state = WRITE_STATE;
 23f2dc2:	7763      	strb	r3, [r4, #29]
  return true;
 23f2dc4:	e7fa      	b.n	23f2dbc <_ZN9SdSpiCard10writeStartEm+0x22>

023f2dc6 <_ZN9SdSpiCard12writeSectorsEmPKhj>:
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
 23f2dc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f2dc8:	461f      	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
 23f2dca:	7f43      	ldrb	r3, [r0, #29]
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
 23f2dcc:	4604      	mov	r4, r0
  if (sdState() != WRITE_STATE || m_curSector != sector) {
 23f2dce:	2b02      	cmp	r3, #2
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
 23f2dd0:	460d      	mov	r5, r1
 23f2dd2:	4616      	mov	r6, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
 23f2dd4:	d102      	bne.n	23f2ddc <_ZN9SdSpiCard12writeSectorsEmPKhj+0x16>
 23f2dd6:	6943      	ldr	r3, [r0, #20]
 23f2dd8:	428b      	cmp	r3, r1
 23f2dda:	d005      	beq.n	23f2de8 <_ZN9SdSpiCard12writeSectorsEmPKhj+0x22>
    if (!writeStart(sector)) {
 23f2ddc:	4629      	mov	r1, r5
 23f2dde:	4620      	mov	r0, r4
 23f2de0:	f7ff ffdb 	bl	23f2d9a <_ZN9SdSpiCard10writeStartEm>
 23f2de4:	b1c0      	cbz	r0, 23f2e18 <_ZN9SdSpiCard12writeSectorsEmPKhj+0x52>
    m_curSector = sector;
 23f2de6:	6165      	str	r5, [r4, #20]
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
 23f2de8:	2500      	movs	r5, #0
  for (size_t i = 0; i < ns; i++, src += 512) {
 23f2dea:	42bd      	cmp	r5, r7
 23f2dec:	eb06 2145 	add.w	r1, r6, r5, lsl #9
 23f2df0:	d005      	beq.n	23f2dfe <_ZN9SdSpiCard12writeSectorsEmPKhj+0x38>
    if (!writeData(src)) {
 23f2df2:	4620      	mov	r0, r4
 23f2df4:	f7ff fe3d 	bl	23f2a72 <_ZN9SdSpiCard9writeDataEPKh>
 23f2df8:	b170      	cbz	r0, 23f2e18 <_ZN9SdSpiCard12writeSectorsEmPKhj+0x52>
  for (size_t i = 0; i < ns; i++, src += 512) {
 23f2dfa:	3501      	adds	r5, #1
 23f2dfc:	e7f5      	b.n	23f2dea <_ZN9SdSpiCard12writeSectorsEmPKhj+0x24>
  m_curSector += ns;
 23f2dfe:	6963      	ldr	r3, [r4, #20]
 23f2e00:	442b      	add	r3, r5
 23f2e02:	6163      	str	r3, [r4, #20]
  return m_dedicatedSpi ? true : writeStop();
 23f2e04:	7e23      	ldrb	r3, [r4, #24]
 23f2e06:	b92b      	cbnz	r3, 23f2e14 <_ZN9SdSpiCard12writeSectorsEmPKhj+0x4e>
 23f2e08:	4620      	mov	r0, r4
 23f2e0a:	f7ff fe4a 	bl	23f2aa2 <_ZN9SdSpiCard9writeStopEv>
 23f2e0e:	f000 0001 	and.w	r0, r0, #1
}
 23f2e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return m_dedicatedSpi ? true : writeStop();
 23f2e14:	2001      	movs	r0, #1
 23f2e16:	e7fa      	b.n	23f2e0e <_ZN9SdSpiCard12writeSectorsEmPKhj+0x48>
  spiStop();
 23f2e18:	4620      	mov	r0, r4
 23f2e1a:	f7ff fdab 	bl	23f2974 <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f2e1e:	2000      	movs	r0, #0
 23f2e20:	e7f7      	b.n	23f2e12 <_ZN9SdSpiCard12writeSectorsEmPKhj+0x4c>

023f2e22 <_ZN9SdSpiCard11writeSectorEmPKh>:
bool SdSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
 23f2e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_dedicatedSpi) {
 23f2e26:	7e07      	ldrb	r7, [r0, #24]
bool SdSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
 23f2e28:	4604      	mov	r4, r0
 23f2e2a:	460b      	mov	r3, r1
 23f2e2c:	4615      	mov	r5, r2
  if (m_dedicatedSpi) {
 23f2e2e:	b127      	cbz	r7, 23f2e3a <_ZN9SdSpiCard11writeSectorEmPKh+0x18>
}
 23f2e30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return writeSectors(sector, src, 1);
 23f2e34:	2301      	movs	r3, #1
 23f2e36:	f7ff bfc6 	b.w	23f2dc6 <_ZN9SdSpiCard12writeSectorsEmPKhj>
  if (type() != SD_CARD_TYPE_SDHC) {
 23f2e3a:	7fc2      	ldrb	r2, [r0, #31]
 23f2e3c:	2a03      	cmp	r2, #3
    sector <<= 9;
 23f2e3e:	bf18      	it	ne
 23f2e40:	024b      	lslne	r3, r1, #9
  if (cardCommand(CMD24, sector)) {
 23f2e42:	461a      	mov	r2, r3
 23f2e44:	2118      	movs	r1, #24
 23f2e46:	f7ff fe50 	bl	23f2aea <_ZN9SdSpiCard11cardCommandEhm>
 23f2e4a:	4606      	mov	r6, r0
 23f2e4c:	b128      	cbz	r0, 23f2e5a <_ZN9SdSpiCard11writeSectorEmPKh+0x38>
 23f2e4e:	230d      	movs	r3, #13
 23f2e50:	76e3      	strb	r3, [r4, #27]
  spiStop();
 23f2e52:	4620      	mov	r0, r4
 23f2e54:	f7ff fd8e 	bl	23f2974 <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f2e58:	e020      	b.n	23f2e9c <_ZN9SdSpiCard11writeSectorEmPKh+0x7a>
  if (!writeData(DATA_START_SECTOR, src)) {
 23f2e5a:	462a      	mov	r2, r5
 23f2e5c:	21fe      	movs	r1, #254	; 0xfe
 23f2e5e:	4620      	mov	r0, r4
 23f2e60:	f7ff fde3 	bl	23f2a2a <_ZN9SdSpiCard9writeDataEhPKh>
 23f2e64:	2800      	cmp	r0, #0
 23f2e66:	d0f4      	beq.n	23f2e52 <_ZN9SdSpiCard11writeSectorEmPKh+0x30>
  if (!waitReady(SD_WRITE_TIMEOUT)) {
 23f2e68:	f44f 7116 	mov.w	r1, #600	; 0x258
 23f2e6c:	4620      	mov	r0, r4
 23f2e6e:	f7ff fdc7 	bl	23f2a00 <_ZN9SdSpiCard9waitReadyEt>
 23f2e72:	4605      	mov	r5, r0
 23f2e74:	b908      	cbnz	r0, 23f2e7a <_ZN9SdSpiCard11writeSectorEmPKh+0x58>
 23f2e76:	2324      	movs	r3, #36	; 0x24
 23f2e78:	e7ea      	b.n	23f2e50 <_ZN9SdSpiCard11writeSectorEmPKh+0x2e>
  if (cardCommand(CMD13, 0) || spiReceive()) {
 23f2e7a:	4632      	mov	r2, r6
 23f2e7c:	210d      	movs	r1, #13
 23f2e7e:	4620      	mov	r0, r4
 23f2e80:	f7ff fe33 	bl	23f2aea <_ZN9SdSpiCard11cardCommandEhm>
 23f2e84:	b108      	cbz	r0, 23f2e8a <_ZN9SdSpiCard11writeSectorEmPKh+0x68>
 23f2e86:	230a      	movs	r3, #10
 23f2e88:	e7e2      	b.n	23f2e50 <_ZN9SdSpiCard11writeSectorEmPKh+0x2e>
    return m_spiDriver.receive();
 23f2e8a:	4620      	mov	r0, r4
 23f2e8c:	f000 f83d 	bl	23f2f0a <_ZN18SdSpiArduinoDriver7receiveEv>
 23f2e90:	2800      	cmp	r0, #0
 23f2e92:	d1f8      	bne.n	23f2e86 <_ZN9SdSpiCard11writeSectorEmPKh+0x64>
  spiStop();
 23f2e94:	4620      	mov	r0, r4
 23f2e96:	f7ff fd6d 	bl	23f2974 <_ZN9SdSpiCard7spiStopEv>
  return true;
 23f2e9a:	462f      	mov	r7, r5
}
 23f2e9c:	4638      	mov	r0, r7
 23f2e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

023f2ea4 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) && defined(PLATFORM_ID)
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback() {
  SPI_DMA_TransferCompleted = true;
 23f2ea4:	2201      	movs	r2, #1
 23f2ea6:	4b01      	ldr	r3, [pc, #4]	; (23f2eac <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 23f2ea8:	701a      	strb	r2, [r3, #0]
}
 23f2eaa:	4770      	bx	lr
 23f2eac:	1007ae8c 	.word	0x1007ae8c

023f2eb0 <_ZN18SdSpiArduinoDriver8activateEv>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() { m_spi->beginTransaction(m_spiSettings); }
 23f2eb0:	1d01      	adds	r1, r0, #4
 23f2eb2:	6800      	ldr	r0, [r0, #0]
 23f2eb4:	f005 bd5a 	b.w	23f896c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

023f2eb8 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
 23f2eb8:	b530      	push	{r4, r5, lr}
 23f2eba:	b085      	sub	sp, #20
 23f2ebc:	4604      	mov	r4, r0
 23f2ebe:	a804      	add	r0, sp, #16
 23f2ec0:	e900 000e 	stmdb	r0, {r1, r2, r3}
  if (spiConfig.spiPort) {
 23f2ec4:	b133      	cbz	r3, 23f2ed4 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig+0x1c>
    m_spi = spiConfig.spiPort;
  } else {
    m_spi = &SPI;
 23f2ec6:	6023      	str	r3, [r4, #0]
  }
  m_spi->begin();
 23f2ec8:	6820      	ldr	r0, [r4, #0]
}
 23f2eca:	b005      	add	sp, #20
 23f2ecc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  m_spi->begin();
 23f2ed0:	f005 bcf8 	b.w	23f88c4 <_ZN8SPIClass5beginEv>
        static SPIClass instance(Interface);
 23f2ed4:	4d09      	ldr	r5, [pc, #36]	; (23f2efc <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig+0x44>)
 23f2ed6:	e8d5 1f8f 	ldab	r1, [r5]
 23f2eda:	f011 0101 	ands.w	r1, r1, #1
 23f2ede:	d10b      	bne.n	23f2ef8 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig+0x40>
 23f2ee0:	4628      	mov	r0, r5
 23f2ee2:	9100      	str	r1, [sp, #0]
 23f2ee4:	f004 fa1c 	bl	23f7320 <__cxa_guard_acquire>
 23f2ee8:	9900      	ldr	r1, [sp, #0]
 23f2eea:	b128      	cbz	r0, 23f2ef8 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig+0x40>
 23f2eec:	4804      	ldr	r0, [pc, #16]	; (23f2f00 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig+0x48>)
 23f2eee:	f005 fcdf 	bl	23f88b0 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23f2ef2:	4628      	mov	r0, r5
 23f2ef4:	f004 fa22 	bl	23f733c <__cxa_guard_release>
    m_spi = &SPI;
 23f2ef8:	4b01      	ldr	r3, [pc, #4]	; (23f2f00 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig+0x48>)
 23f2efa:	e7e4      	b.n	23f2ec6 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig+0xe>
 23f2efc:	1006a228 	.word	0x1006a228
 23f2f00:	1006a22c 	.word	0x1006a22c

023f2f04 <_ZN18SdSpiArduinoDriver10deactivateEv>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() { m_spi->endTransaction(); }
 23f2f04:	6800      	ldr	r0, [r0, #0]
 23f2f06:	f005 bd17 	b.w	23f8938 <_ZN8SPIClass14endTransactionEv>

023f2f0a <_ZN18SdSpiArduinoDriver7receiveEv>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() { m_spi->end(); }
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() { return m_spi->transfer(0XFF); }
 23f2f0a:	21ff      	movs	r1, #255	; 0xff
 23f2f0c:	6800      	ldr	r0, [r0, #0]
 23f2f0e:	f005 bd9b 	b.w	23f8a48 <_ZN8SPIClass8transferEh>
	...

023f2f14 <_ZN18SdSpiArduinoDriver7receiveEPhj>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
 23f2f14:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
 23f2f16:	2500      	movs	r5, #0
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
 23f2f18:	4613      	mov	r3, r2
  m_spi->transfer(nullptr, buf, count, SD_SPI_DMA_TransferComplete_Callback);
 23f2f1a:	4a07      	ldr	r2, [pc, #28]	; (23f2f38 <_ZN18SdSpiArduinoDriver7receiveEPhj+0x24>)
  SPI_DMA_TransferCompleted = false;
 23f2f1c:	4c07      	ldr	r4, [pc, #28]	; (23f2f3c <_ZN18SdSpiArduinoDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, count, SD_SPI_DMA_TransferComplete_Callback);
 23f2f1e:	9200      	str	r2, [sp, #0]
 23f2f20:	6800      	ldr	r0, [r0, #0]
 23f2f22:	460a      	mov	r2, r1
 23f2f24:	4629      	mov	r1, r5
  SPI_DMA_TransferCompleted = false;
 23f2f26:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, count, SD_SPI_DMA_TransferComplete_Callback);
 23f2f28:	f005 fd94 	bl	23f8a54 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {
 23f2f2c:	7823      	ldrb	r3, [r4, #0]
 23f2f2e:	2b00      	cmp	r3, #0
 23f2f30:	d0fc      	beq.n	23f2f2c <_ZN18SdSpiArduinoDriver7receiveEPhj+0x18>
  }
  return 0;
}
 23f2f32:	2000      	movs	r0, #0
 23f2f34:	b003      	add	sp, #12
 23f2f36:	bd30      	pop	{r4, r5, pc}
 23f2f38:	023f2ea5 	.word	0x023f2ea5
 23f2f3c:	1007ae8c 	.word	0x1007ae8c

023f2f40 <_ZN18SdSpiArduinoDriver4sendEh>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) { m_spi->transfer(data); }
 23f2f40:	6800      	ldr	r0, [r0, #0]
 23f2f42:	f005 bd81 	b.w	23f8a48 <_ZN8SPIClass8transferEh>
	...

023f2f48 <_ZN18SdSpiArduinoDriver4sendEPKhj>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
 23f2f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
 23f2f4a:	2500      	movs	r5, #0
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
 23f2f4c:	4613      	mov	r3, r2

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, count,
 23f2f4e:	4a06      	ldr	r2, [pc, #24]	; (23f2f68 <_ZN18SdSpiArduinoDriver4sendEPKhj+0x20>)
  SPI_DMA_TransferCompleted = false;
 23f2f50:	4c06      	ldr	r4, [pc, #24]	; (23f2f6c <_ZN18SdSpiArduinoDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, count,
 23f2f52:	9200      	str	r2, [sp, #0]
 23f2f54:	6800      	ldr	r0, [r0, #0]
 23f2f56:	462a      	mov	r2, r5
  SPI_DMA_TransferCompleted = false;
 23f2f58:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, count,
 23f2f5a:	f005 fd7b 	bl	23f8a54 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                  SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {
 23f2f5e:	7823      	ldrb	r3, [r4, #0]
 23f2f60:	2b00      	cmp	r3, #0
 23f2f62:	d0fc      	beq.n	23f2f5e <_ZN18SdSpiArduinoDriver4sendEPKhj+0x16>
  }
}
 23f2f64:	b003      	add	sp, #12
 23f2f66:	bd30      	pop	{r4, r5, pc}
 23f2f68:	023f2ea5 	.word	0x023f2ea5
 23f2f6c:	1007ae8c 	.word	0x1007ae8c

023f2f70 <_ZN7TwoWire5writeEi.isra.0>:
 23f2f70:	6803      	ldr	r3, [r0, #0]
 23f2f72:	b2c9      	uxtb	r1, r1
 23f2f74:	689b      	ldr	r3, [r3, #8]
 23f2f76:	4718      	bx	r3

023f2f78 <_ZN5SVCS3C1Ev>:
 */
#include "i2cArduino.h"


SVCS3::SVCS3(){
  addr=0x63;
 23f2f78:	2363      	movs	r3, #99	; 0x63
 23f2f7a:	7103      	strb	r3, [r0, #4]
}
 23f2f7c:	4770      	bx	lr

023f2f7e <_ZN5SVCS34initEi>:
  _wire = the_wire;
  addr = address;
  return 0;
}

int SVCS3::init(int address){
 23f2f7e:	b538      	push	{r3, r4, r5, lr}
 23f2f80:	4604      	mov	r4, r0
 23f2f82:	460d      	mov	r5, r1
  _wire = &Wire;
 23f2f84:	f006 fc4e 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23f2f88:	6020      	str	r0, [r4, #0]
  _wire->begin();
 23f2f8a:	f004 ff81 	bl	23f7e90 <_ZN7TwoWire5beginEv>
  addr = address;
  return 0;
}
 23f2f8e:	2000      	movs	r0, #0
  addr = address;
 23f2f90:	7125      	strb	r5, [r4, #4]
}
 23f2f92:	bd38      	pop	{r3, r4, r5, pc}

023f2f94 <_ZN5SVCS38i2cdelayEi>:


bool SVCS3::i2cdelay(int size){
 23f2f94:	b570      	push	{r4, r5, r6, lr}
 23f2f96:	4606      	mov	r6, r0
 23f2f98:	460d      	mov	r5, r1
  int i=0;
 23f2f9a:	2400      	movs	r4, #0
  for (;_wire->available() < size && i<=size;i++) {
 23f2f9c:	6830      	ldr	r0, [r6, #0]
 23f2f9e:	6803      	ldr	r3, [r0, #0]
 23f2fa0:	691b      	ldr	r3, [r3, #16]
 23f2fa2:	4798      	blx	r3
 23f2fa4:	42a8      	cmp	r0, r5
 23f2fa6:	da06      	bge.n	23f2fb6 <_ZN5SVCS38i2cdelayEi+0x22>
 23f2fa8:	42ac      	cmp	r4, r5
 23f2faa:	dc09      	bgt.n	23f2fc0 <_ZN5SVCS38i2cdelayEi+0x2c>
	  delay(2);
 23f2fac:	2002      	movs	r0, #2
 23f2fae:	f004 f9d3 	bl	23f7358 <delay>
  for (;_wire->available() < size && i<=size;i++) {
 23f2fb2:	3401      	adds	r4, #1
 23f2fb4:	e7f2      	b.n	23f2f9c <_ZN5SVCS38i2cdelayEi+0x8>
  }
  if(i>=size){
 23f2fb6:	42ac      	cmp	r4, r5
 23f2fb8:	bfac      	ite	ge
 23f2fba:	2000      	movge	r0, #0
 23f2fbc:	2001      	movlt	r0, #1
	  return false;
  }else{
	  return true;
  }
}
 23f2fbe:	bd70      	pop	{r4, r5, r6, pc}
	  return false;
 23f2fc0:	2000      	movs	r0, #0
 23f2fc2:	e7fc      	b.n	23f2fbe <_ZN5SVCS38i2cdelayEi+0x2a>

023f2fc4 <_ZN5SVCS38getStateEv>:

int SVCS3::getState(){ //-1:no data, 0:err, 1:ok
 23f2fc4:	b510      	push	{r4, lr}
 23f2fc6:	4604      	mov	r4, r0
  _wire->requestFrom(addr, (uint8_t)1);
 23f2fc8:	7901      	ldrb	r1, [r0, #4]
 23f2fca:	2201      	movs	r2, #1
 23f2fcc:	6800      	ldr	r0, [r0, #0]
 23f2fce:	f004 ff86 	bl	23f7ede <_ZN7TwoWire11requestFromEhj>
   if(i2cdelay(1)){
 23f2fd2:	2101      	movs	r1, #1
 23f2fd4:	4620      	mov	r0, r4
 23f2fd6:	f7ff ffdd 	bl	23f2f94 <_ZN5SVCS38i2cdelayEi>
 23f2fda:	b128      	cbz	r0, 23f2fe8 <_ZN5SVCS38getStateEv+0x24>
    return _wire->read();
 23f2fdc:	6820      	ldr	r0, [r4, #0]
  }else{
    return -1;
  }
}
 23f2fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return _wire->read();
 23f2fe2:	6803      	ldr	r3, [r0, #0]
 23f2fe4:	695b      	ldr	r3, [r3, #20]
 23f2fe6:	4718      	bx	r3
}
 23f2fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23f2fec:	bd10      	pop	{r4, pc}

023f2fee <_ZN5SVCS36getValEh>:

int16_t SVCS3::getVal(byte reg){
 23f2fee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f2ff0:	4604      	mov	r4, r0
 23f2ff2:	460d      	mov	r5, r1

  _wire->beginTransmission(addr); // transmit to device
 23f2ff4:	7901      	ldrb	r1, [r0, #4]
 23f2ff6:	6800      	ldr	r0, [r0, #0]
 23f2ff8:	f004 ff74 	bl	23f7ee4 <_ZN7TwoWire17beginTransmissionEh>
  _wire->write(reg);              // sends one byte
 23f2ffc:	6820      	ldr	r0, [r4, #0]
 23f2ffe:	4629      	mov	r1, r5
 23f3000:	6803      	ldr	r3, [r0, #0]
 23f3002:	689b      	ldr	r3, [r3, #8]
 23f3004:	4798      	blx	r3
  _wire->endTransmission();    // stop transmitting
 23f3006:	6820      	ldr	r0, [r4, #0]
 23f3008:	f004 ff77 	bl	23f7efa <_ZN7TwoWire15endTransmissionEv>
 
  _wire->requestFrom(addr, (uint8_t)2);
 23f300c:	7921      	ldrb	r1, [r4, #4]
 23f300e:	2202      	movs	r2, #2
 23f3010:	6820      	ldr	r0, [r4, #0]
 23f3012:	f004 ff64 	bl	23f7ede <_ZN7TwoWire11requestFromEhj>
  int16_t ret=0;
 23f3016:	2300      	movs	r3, #0
  if(i2cdelay(2)){
 23f3018:	2102      	movs	r1, #2
 23f301a:	4620      	mov	r0, r4
  int16_t ret=0;
 23f301c:	f8ad 3006 	strh.w	r3, [sp, #6]
  if(i2cdelay(2)){
 23f3020:	f7ff ffb8 	bl	23f2f94 <_ZN5SVCS38i2cdelayEi>
 23f3024:	b158      	cbz	r0, 23f303e <_ZN5SVCS36getValEh+0x50>
	byte *pointer = (byte *)&ret;
    pointer[0] = _wire->read();
 23f3026:	6820      	ldr	r0, [r4, #0]
 23f3028:	6803      	ldr	r3, [r0, #0]
 23f302a:	695b      	ldr	r3, [r3, #20]
 23f302c:	4798      	blx	r3
 23f302e:	f88d 0006 	strb.w	r0, [sp, #6]
    pointer[1] = _wire->read();
 23f3032:	6820      	ldr	r0, [r4, #0]
 23f3034:	6803      	ldr	r3, [r0, #0]
 23f3036:	695b      	ldr	r3, [r3, #20]
 23f3038:	4798      	blx	r3
 23f303a:	f88d 0007 	strb.w	r0, [sp, #7]
  }
  return ret;
}
 23f303e:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 23f3042:	b003      	add	sp, #12
 23f3044:	bd30      	pop	{r4, r5, pc}

023f3046 <_ZN5SVCS310newReadingEv>:
    return 0;
  }
  return 1;
}

int SVCS3::newReading(){
 23f3046:	b510      	push	{r4, lr}
 23f3048:	4604      	mov	r4, r0
  _wire->beginTransmission(addr); // transmit to device
 23f304a:	7901      	ldrb	r1, [r0, #4]
 23f304c:	6800      	ldr	r0, [r0, #0]
 23f304e:	f004 ff49 	bl	23f7ee4 <_ZN7TwoWire17beginTransmissionEh>
  _wire->write(REG_READ_START);              // sends one byte
 23f3052:	2101      	movs	r1, #1
 23f3054:	6820      	ldr	r0, [r4, #0]
 23f3056:	f7ff ff8b 	bl	23f2f70 <_ZN7TwoWire5writeEi.isra.0>
  _wire->endTransmission();    // stop transmitting
 23f305a:	6820      	ldr	r0, [r4, #0]
 23f305c:	f004 ff4d 	bl	23f7efa <_ZN7TwoWire15endTransmissionEv>
  delay(300);
 23f3060:	f44f 7096 	mov.w	r0, #300	; 0x12c
 23f3064:	f004 f978 	bl	23f7358 <delay>
  return getState();
 23f3068:	4620      	mov	r0, r4
}
 23f306a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return getState();
 23f306e:	f7ff bfa9 	b.w	23f2fc4 <_ZN5SVCS38getStateEv>
	...

023f3074 <_ZN5SVCS36getE25Ev>:

float SVCS3::getE25()
{
 23f3074:	b508      	push	{r3, lr}
  return getVal(REG_READ_E25)/100.0;
 23f3076:	2102      	movs	r1, #2
 23f3078:	f7ff ffb9 	bl	23f2fee <_ZN5SVCS36getValEh>
 23f307c:	f7ef fa6e 	bl	23e255c <__aeabi_i2d>
 23f3080:	2200      	movs	r2, #0
 23f3082:	4b04      	ldr	r3, [pc, #16]	; (23f3094 <_ZN5SVCS36getE25Ev+0x20>)
 23f3084:	f7ef fbfe 	bl	23e2884 <__aeabi_ddiv>
 23f3088:	f7ef fdca 	bl	23e2c20 <__aeabi_d2f>
}
 23f308c:	ee00 0a10 	vmov	s0, r0
 23f3090:	bd08      	pop	{r3, pc}
 23f3092:	bf00      	nop
 23f3094:	40590000 	.word	0x40590000

023f3098 <_ZN5SVCS35getECEv>:

float SVCS3::getEC()
{
 23f3098:	b508      	push	{r3, lr}
  return getVal(REG_READ_EC)/10.0;
 23f309a:	2103      	movs	r1, #3
 23f309c:	f7ff ffa7 	bl	23f2fee <_ZN5SVCS36getValEh>
 23f30a0:	f7ef fa5c 	bl	23e255c <__aeabi_i2d>
 23f30a4:	2200      	movs	r2, #0
 23f30a6:	4b04      	ldr	r3, [pc, #16]	; (23f30b8 <_ZN5SVCS35getECEv+0x20>)
 23f30a8:	f7ef fbec 	bl	23e2884 <__aeabi_ddiv>
 23f30ac:	f7ef fdb8 	bl	23e2c20 <__aeabi_d2f>
}
 23f30b0:	ee00 0a10 	vmov	s0, r0
 23f30b4:	bd08      	pop	{r3, pc}
 23f30b6:	bf00      	nop
 23f30b8:	40240000 	.word	0x40240000

023f30bc <_ZN5SVCS37getTempEv>:

float SVCS3::getTemp()
{
 23f30bc:	b508      	push	{r3, lr}
  return getVal(REG_READ_TEMP)/100.0;
 23f30be:	2104      	movs	r1, #4
 23f30c0:	f7ff ff95 	bl	23f2fee <_ZN5SVCS36getValEh>
 23f30c4:	f7ef fa4a 	bl	23e255c <__aeabi_i2d>
 23f30c8:	2200      	movs	r2, #0
 23f30ca:	4b04      	ldr	r3, [pc, #16]	; (23f30dc <_ZN5SVCS37getTempEv+0x20>)
 23f30cc:	f7ef fbda 	bl	23e2884 <__aeabi_ddiv>
 23f30d0:	f7ef fda6 	bl	23e2c20 <__aeabi_d2f>
}
 23f30d4:	ee00 0a10 	vmov	s0, r0
 23f30d8:	bd08      	pop	{r3, pc}
 23f30da:	bf00      	nop
 23f30dc:	40590000 	.word	0x40590000

023f30e0 <_ZN5SVCS36getVWCEv>:

float SVCS3::getVWC()
{
 23f30e0:	b508      	push	{r3, lr}
  return getVal(REG_READ_VWC)/10.0;
 23f30e2:	2105      	movs	r1, #5
 23f30e4:	f7ff ff83 	bl	23f2fee <_ZN5SVCS36getValEh>
 23f30e8:	f7ef fa38 	bl	23e255c <__aeabi_i2d>
 23f30ec:	2200      	movs	r2, #0
 23f30ee:	4b04      	ldr	r3, [pc, #16]	; (23f3100 <_ZN5SVCS36getVWCEv+0x20>)
 23f30f0:	f7ef fbc8 	bl	23e2884 <__aeabi_ddiv>
 23f30f4:	f7ef fd94 	bl	23e2c20 <__aeabi_d2f>
}
 23f30f8:	ee00 0a10 	vmov	s0, r0
 23f30fc:	bd08      	pop	{r3, pc}
 23f30fe:	bf00      	nop
 23f3100:	40240000 	.word	0x40240000

023f3104 <_ZN7SVMULTIC1Ev>:
 */
#include "i2cMultiSm.h"


SVMULTI::SVMULTI(){
  addr=101;
 23f3104:	2365      	movs	r3, #101	; 0x65
 23f3106:	8083      	strh	r3, [r0, #4]
}
 23f3108:	4770      	bx	lr

023f310a <_ZN7SVMULTI4initEi>:
  _wire = the_wire;
  addr = address;
  return 0;
}

int SVMULTI::init(int address){
 23f310a:	b538      	push	{r3, r4, r5, lr}
 23f310c:	4604      	mov	r4, r0
 23f310e:	460d      	mov	r5, r1
  _wire = &Wire;
 23f3110:	f006 fb88 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23f3114:	6020      	str	r0, [r4, #0]
  _wire->begin();
 23f3116:	f004 febb 	bl	23f7e90 <_ZN7TwoWire5beginEv>
  addr = address;
  return 0;
}
 23f311a:	2000      	movs	r0, #0
  addr = address;
 23f311c:	80a5      	strh	r5, [r4, #4]
}
 23f311e:	bd38      	pop	{r3, r4, r5, pc}

023f3120 <_ZN7SVMULTI8i2cdelayEi>:


bool SVMULTI::i2cdelay(int size){
 23f3120:	b570      	push	{r4, r5, r6, lr}
 23f3122:	4606      	mov	r6, r0
 23f3124:	460d      	mov	r5, r1
  int i=0;
 23f3126:	2400      	movs	r4, #0
  for (;_wire->available() < size && i<=size;i++) {
 23f3128:	6830      	ldr	r0, [r6, #0]
 23f312a:	6803      	ldr	r3, [r0, #0]
 23f312c:	691b      	ldr	r3, [r3, #16]
 23f312e:	4798      	blx	r3
 23f3130:	42a8      	cmp	r0, r5
 23f3132:	da06      	bge.n	23f3142 <_ZN7SVMULTI8i2cdelayEi+0x22>
 23f3134:	42ac      	cmp	r4, r5
 23f3136:	dc09      	bgt.n	23f314c <_ZN7SVMULTI8i2cdelayEi+0x2c>
	  delay(2);
 23f3138:	2002      	movs	r0, #2
 23f313a:	f004 f90d 	bl	23f7358 <delay>
  for (;_wire->available() < size && i<=size;i++) {
 23f313e:	3401      	adds	r4, #1
 23f3140:	e7f2      	b.n	23f3128 <_ZN7SVMULTI8i2cdelayEi+0x8>
  }
  if(i>=size){
 23f3142:	42ac      	cmp	r4, r5
 23f3144:	bfac      	ite	ge
 23f3146:	2000      	movge	r0, #0
 23f3148:	2001      	movlt	r0, #1
	  return false;
  }else{
	  return true;
  }
}
 23f314a:	bd70      	pop	{r4, r5, r6, pc}
	  return false;
 23f314c:	2000      	movs	r0, #0
 23f314e:	e7fc      	b.n	23f314a <_ZN7SVMULTI8i2cdelayEi+0x2a>

023f3150 <_ZN7SVMULTI8getStateEv>:

int SVMULTI::getState(){ //-1:no data, 0:err, 1:ok
 23f3150:	b510      	push	{r4, lr}
 23f3152:	4604      	mov	r4, r0
  _wire->requestFrom(addr, (uint8_t)1);
 23f3154:	7901      	ldrb	r1, [r0, #4]
 23f3156:	2201      	movs	r2, #1
 23f3158:	6800      	ldr	r0, [r0, #0]
 23f315a:	f004 fec0 	bl	23f7ede <_ZN7TwoWire11requestFromEhj>
   if(i2cdelay(1)){
 23f315e:	2101      	movs	r1, #1
 23f3160:	4620      	mov	r0, r4
 23f3162:	f7ff ffdd 	bl	23f3120 <_ZN7SVMULTI8i2cdelayEi>
 23f3166:	b128      	cbz	r0, 23f3174 <_ZN7SVMULTI8getStateEv+0x24>
    return _wire->read();
 23f3168:	6820      	ldr	r0, [r4, #0]
  }else{
    return -1;
  }
}
 23f316a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return _wire->read();
 23f316e:	6803      	ldr	r3, [r0, #0]
 23f3170:	695b      	ldr	r3, [r3, #20]
 23f3172:	4718      	bx	r3
}
 23f3174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23f3178:	bd10      	pop	{r4, pc}

023f317a <_ZN7SVMULTI10newReadingEv>:
    return 0;
  }
  return 1;
}

int SVMULTI::newReading(){
 23f317a:	b510      	push	{r4, lr}
 23f317c:	4604      	mov	r4, r0
  _wire->beginTransmission(addr); // transmit to device
 23f317e:	8881      	ldrh	r1, [r0, #4]
 23f3180:	6800      	ldr	r0, [r0, #0]
 23f3182:	f004 feb3 	bl	23f7eec <_ZN7TwoWire17beginTransmissionEi>
  _wire->write(REG_READ_START);              // sends one byte
 23f3186:	6820      	ldr	r0, [r4, #0]
 23f3188:	2101      	movs	r1, #1
 23f318a:	6803      	ldr	r3, [r0, #0]
 23f318c:	689b      	ldr	r3, [r3, #8]
 23f318e:	4798      	blx	r3
  _wire->endTransmission();    // stop transmitting
 23f3190:	6820      	ldr	r0, [r4, #0]
 23f3192:	f004 feb2 	bl	23f7efa <_ZN7TwoWire15endTransmissionEv>
  delay(300);
 23f3196:	f44f 7096 	mov.w	r0, #300	; 0x12c
 23f319a:	f004 f8dd 	bl	23f7358 <delay>
  return getState();
 23f319e:	4620      	mov	r0, r4
}
 23f31a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return getState();
 23f31a4:	f7ff bfd4 	b.w	23f3150 <_ZN7SVMULTI8getStateEv>

023f31a8 <_ZN7SVMULTI6getRawEP6vals_t>:
	}

}


void SVMULTI::getRaw(vals_t *vals){
 23f31a8:	b570      	push	{r4, r5, r6, lr}
 23f31aa:	4604      	mov	r4, r0
 23f31ac:	460d      	mov	r5, r1
  _wire->beginTransmission(addr); // transmit to device
 23f31ae:	8881      	ldrh	r1, [r0, #4]
 23f31b0:	6800      	ldr	r0, [r0, #0]
 23f31b2:	f004 fe9b 	bl	23f7eec <_ZN7TwoWire17beginTransmissionEi>
  _wire->write(REG_GET_DATA);              // sends one byte
 23f31b6:	6820      	ldr	r0, [r4, #0]
 23f31b8:	2109      	movs	r1, #9
 23f31ba:	6803      	ldr	r3, [r0, #0]
 23f31bc:	689b      	ldr	r3, [r3, #8]
 23f31be:	4798      	blx	r3
  _wire->endTransmission();    // stop transmitting
 23f31c0:	6820      	ldr	r0, [r4, #0]
 23f31c2:	f004 fe9a 	bl	23f7efa <_ZN7TwoWire15endTransmissionEv>
  _wire->requestFrom(addr, (uint8_t)14);
 23f31c6:	7921      	ldrb	r1, [r4, #4]
 23f31c8:	220e      	movs	r2, #14
 23f31ca:	6820      	ldr	r0, [r4, #0]
 23f31cc:	f004 fe87 	bl	23f7ede <_ZN7TwoWire11requestFromEhj>
   byte *p1 = (byte*)vals;
  if(i2cdelay(14)){
 23f31d0:	210e      	movs	r1, #14
 23f31d2:	4620      	mov	r0, r4
 23f31d4:	f7ff ffa4 	bl	23f3120 <_ZN7SVMULTI8i2cdelayEi>
 23f31d8:	b148      	cbz	r0, 23f31ee <_ZN7SVMULTI6getRawEP6vals_t+0x46>
 23f31da:	1e6e      	subs	r6, r5, #1
 23f31dc:	350d      	adds	r5, #13
    // Wire.readBytes((byte*)&vals, 14);
	  for(int i = 0; i<14; i++){
		  p1[i] = _wire->read();
 23f31de:	6820      	ldr	r0, [r4, #0]
 23f31e0:	6803      	ldr	r3, [r0, #0]
 23f31e2:	695b      	ldr	r3, [r3, #20]
 23f31e4:	4798      	blx	r3
 23f31e6:	f806 0f01 	strb.w	r0, [r6, #1]!
	  for(int i = 0; i<14; i++){
 23f31ea:	42ae      	cmp	r6, r5
 23f31ec:	d1f7      	bne.n	23f31de <_ZN7SVMULTI6getRawEP6vals_t+0x36>
	  }
  }
}
 23f31ee:	bd70      	pop	{r4, r5, r6, pc}

023f31f0 <_ZN7SVMULTI7getDataEP10soil_ret_t>:
void SVMULTI::getData(soil_ret_t *data){
 23f31f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f31f4:	ed2d 8b02 	vpush	{d8}
 23f31f8:	b085      	sub	sp, #20
 23f31fa:	460c      	mov	r4, r1
  getRaw(&vals);
 23f31fc:	4669      	mov	r1, sp
 23f31fe:	f7ff ffd3 	bl	23f31a8 <_ZN7SVMULTI6getRawEP6vals_t>
 23f3202:	ed9f 8b3b 	vldr	d8, [pc, #236]	; 23f32f0 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x100>
 23f3206:	f10d 0a04 	add.w	sl, sp, #4
 23f320a:	f104 0508 	add.w	r5, r4, #8
 23f320e:	f104 0b1c 	add.w	fp, r4, #28
		  data->dp[a] = vals.dp[a]/100.0;
 23f3212:	f93a 0b02 	ldrsh.w	r0, [sl], #2
 23f3216:	f7ef f9a1 	bl	23e255c <__aeabi_i2d>
 23f321a:	2200      	movs	r2, #0
 23f321c:	4b3e      	ldr	r3, [pc, #248]	; (23f3318 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x128>)
 23f321e:	f7ef fb31 	bl	23e2884 <__aeabi_ddiv>
 23f3222:	f7ef fcfd 	bl	23e2c20 <__aeabi_d2f>
 23f3226:	6028      	str	r0, [r5, #0]
 23f3228:	f7ef f9aa 	bl	23e2580 <__aeabi_f2d>
 23f322c:	eeb0 1a48 	vmov.f32	s2, s16
 23f3230:	eef0 1a68 	vmov.f32	s3, s17
 23f3234:	ec41 0b10 	vmov	d0, r0, r1
 23f3238:	f006 fea6 	bl	23f9f88 <pow>
 23f323c:	f855 0b04 	ldr.w	r0, [r5], #4
 23f3240:	ec59 8b10 	vmov	r8, r9, d0
 23f3244:	f7ef f99c 	bl	23e2580 <__aeabi_f2d>
		  data->vwc[a] = (4.3e-6 * pow(data->dp[a],3) - 5.5e-4*pow(data->dp[a],2) + 2.92e-2*data->dp[a] - 5.3e-2)* 100.0;
 23f3248:	a32b      	add	r3, pc, #172	; (adr r3, 23f32f8 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x108>)
 23f324a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f324e:	4606      	mov	r6, r0
 23f3250:	460f      	mov	r7, r1
 23f3252:	4640      	mov	r0, r8
 23f3254:	4649      	mov	r1, r9
 23f3256:	f7ef f9eb 	bl	23e2630 <__aeabi_dmul>
 23f325a:	4632      	mov	r2, r6
 23f325c:	4680      	mov	r8, r0
 23f325e:	4689      	mov	r9, r1
 23f3260:	463b      	mov	r3, r7
 23f3262:	4630      	mov	r0, r6
 23f3264:	4639      	mov	r1, r7
 23f3266:	f7ef f9e3 	bl	23e2630 <__aeabi_dmul>
 23f326a:	a325      	add	r3, pc, #148	; (adr r3, 23f3300 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x110>)
 23f326c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f3270:	f7ef f9de 	bl	23e2630 <__aeabi_dmul>
 23f3274:	4602      	mov	r2, r0
 23f3276:	460b      	mov	r3, r1
 23f3278:	4640      	mov	r0, r8
 23f327a:	4649      	mov	r1, r9
 23f327c:	f7ef f820 	bl	23e22c0 <__aeabi_dsub>
 23f3280:	a321      	add	r3, pc, #132	; (adr r3, 23f3308 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x118>)
 23f3282:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f3286:	4680      	mov	r8, r0
 23f3288:	4689      	mov	r9, r1
 23f328a:	4630      	mov	r0, r6
 23f328c:	4639      	mov	r1, r7
 23f328e:	f7ef f9cf 	bl	23e2630 <__aeabi_dmul>
 23f3292:	4602      	mov	r2, r0
 23f3294:	460b      	mov	r3, r1
 23f3296:	4640      	mov	r0, r8
 23f3298:	4649      	mov	r1, r9
 23f329a:	f7ef f813 	bl	23e22c4 <__adddf3>
 23f329e:	a31c      	add	r3, pc, #112	; (adr r3, 23f3310 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x120>)
 23f32a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f32a4:	f7ef f80c 	bl	23e22c0 <__aeabi_dsub>
 23f32a8:	2200      	movs	r2, #0
 23f32aa:	4b1b      	ldr	r3, [pc, #108]	; (23f3318 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x128>)
 23f32ac:	f7ef f9c0 	bl	23e2630 <__aeabi_dmul>
 23f32b0:	f7ef fcb6 	bl	23e2c20 <__aeabi_d2f>
  for(int a=0;a<MULTI_ZONES;a++){
 23f32b4:	45ab      	cmp	fp, r5
		  data->vwc[a] = (4.3e-6 * pow(data->dp[a],3) - 5.5e-4*pow(data->dp[a],2) + 2.92e-2*data->dp[a] - 5.3e-2)* 100.0;
 23f32b6:	6128      	str	r0, [r5, #16]
  for(int a=0;a<MULTI_ZONES;a++){
 23f32b8:	d1ab      	bne.n	23f3212 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x22>
		  data->temp[a] = vals.temp[a]/100.0;
 23f32ba:	f9bd 0000 	ldrsh.w	r0, [sp]
 23f32be:	f7ef f94d 	bl	23e255c <__aeabi_i2d>
 23f32c2:	2200      	movs	r2, #0
 23f32c4:	4b14      	ldr	r3, [pc, #80]	; (23f3318 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x128>)
 23f32c6:	f7ef fadd 	bl	23e2884 <__aeabi_ddiv>
 23f32ca:	f7ef fca9 	bl	23e2c20 <__aeabi_d2f>
 23f32ce:	6020      	str	r0, [r4, #0]
 23f32d0:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 23f32d4:	f7ef f942 	bl	23e255c <__aeabi_i2d>
 23f32d8:	2200      	movs	r2, #0
 23f32da:	4b0f      	ldr	r3, [pc, #60]	; (23f3318 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x128>)
 23f32dc:	f7ef fad2 	bl	23e2884 <__aeabi_ddiv>
 23f32e0:	f7ef fc9e 	bl	23e2c20 <__aeabi_d2f>
 23f32e4:	6060      	str	r0, [r4, #4]
}
 23f32e6:	b005      	add	sp, #20
 23f32e8:	ecbd 8b02 	vpop	{d8}
 23f32ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f32f0:	00000000 	.word	0x00000000
 23f32f4:	40080000 	.word	0x40080000
 23f32f8:	fff6c5c5 	.word	0xfff6c5c5
 23f32fc:	3ed20916 	.word	0x3ed20916
 23f3300:	01a36e2f 	.word	0x01a36e2f
 23f3304:	3f4205bc 	.word	0x3f4205bc
 23f3308:	d42c3c9f 	.word	0xd42c3c9f
 23f330c:	3f9de69a 	.word	0x3f9de69a
 23f3310:	e5604189 	.word	0xe5604189
 23f3314:	3fab22d0 	.word	0x3fab22d0
 23f3318:	40590000 	.word	0x40590000

023f331c <_ZN9ExFatFile8dirCacheEhh>:

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
 23f331c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f331e:	4604      	mov	r4, r0
 23f3320:	460f      	mov	r7, r1
 23f3322:	b085      	sub	sp, #20
  DirPos_t pos = m_dirPos;
 23f3324:	ad01      	add	r5, sp, #4
 23f3326:	f100 0324 	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
 23f332a:	4616      	mov	r6, r2
  DirPos_t pos = m_dirPos;
 23f332c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 23f3330:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE * set) != 1) {
 23f3334:	4629      	mov	r1, r5
 23f3336:	6a20      	ldr	r0, [r4, #32]
 23f3338:	017a      	lsls	r2, r7, #5
 23f333a:	f001 f888 	bl	23f444e <_ZN14ExFatPartition7dirSeekEP8DirPos_tm>
 23f333e:	2801      	cmp	r0, #1
 23f3340:	d106      	bne.n	23f3350 <_ZN9ExFatFile8dirCacheEhh+0x34>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
 23f3342:	4632      	mov	r2, r6
 23f3344:	4629      	mov	r1, r5
 23f3346:	6a20      	ldr	r0, [r4, #32]
 23f3348:	f001 f834 	bl	23f43b4 <_ZN14ExFatPartition8dirCacheEPK8DirPos_th>
}
 23f334c:	b005      	add	sp, #20
 23f334e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return nullptr;
 23f3350:	2000      	movs	r0, #0
 23f3352:	e7fb      	b.n	23f334c <_ZN9ExFatFile8dirCacheEhh+0x30>

023f3354 <_ZN9ExFatFile5closeEv>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
 23f3354:	b510      	push	{r4, lr}
 23f3356:	4604      	mov	r4, r0
  bool rtn = sync();
 23f3358:	f000 fcd2 	bl	23f3d00 <_ZN9ExFatFile4syncEv>
  m_attributes = FILE_ATTR_CLOSED;
 23f335c:	2300      	movs	r3, #0
 23f335e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
 23f3362:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
 23f3366:	bd10      	pop	{r4, pc}

023f3368 <_ZN9ExFatFile8openRootEP11ExFatVolume>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
 23f3368:	b538      	push	{r3, r4, r5, lr}
 23f336a:	460d      	mov	r5, r1
  if (isOpen()) {
 23f336c:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
bool ExFatFile::openRoot(ExFatVolume* vol) {
 23f3370:	4604      	mov	r4, r0
  if (isOpen()) {
 23f3372:	b951      	cbnz	r1, 23f338a <_ZN9ExFatFile8openRootEP11ExFatVolume+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
 23f3374:	2238      	movs	r2, #56	; 0x38
 23f3376:	f009 f836 	bl	23fc3e6 <memset>
  m_attributes = FILE_ATTR_ROOT;
 23f337a:	2340      	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
 23f337c:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_ROOT;
 23f337e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
 23f3382:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
 23f3384:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
  return true;

fail:
  return false;
}
 23f3388:	bd38      	pop	{r3, r4, r5, pc}
  return false;
 23f338a:	2000      	movs	r0, #0
 23f338c:	e7fc      	b.n	23f3388 <_ZN9ExFatFile8openRootEP11ExFatVolume+0x20>
	...

023f3390 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path, ExName_t* fname,
                              const char** ptr) {
 23f3390:	b4f0      	push	{r4, r5, r6, r7}
  // Skip leading spaces.
  while (*path == ' ') {
 23f3392:	460c      	mov	r4, r1
 23f3394:	f811 5b01 	ldrb.w	r5, [r1], #1
 23f3398:	2d20      	cmp	r5, #32
 23f339a:	d0fa      	beq.n	23f3392 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x2>
// Size of FAT and exFAT directory structures.
const size_t FS_DIR_SIZE = 32;
//------------------------------------------------------------------------------
// Reserved characters for exFAT names and FAT LFN.
inline bool lfnReservedChar(uint8_t c) {
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':' || c == '<' ||
 23f339c:	4f18      	ldr	r7, [pc, #96]	; (23f3400 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x70>)
    path++;
  }
  fname->begin = path;
 23f339e:	6014      	str	r4, [r2, #0]
  fname->end = path;
 23f33a0:	6094      	str	r4, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
 23f33a2:	4626      	mov	r6, r4
 23f33a4:	f816 5b01 	ldrb.w	r5, [r6], #1
 23f33a8:	b1dd      	cbz	r5, 23f33e2 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x52>
 23f33aa:	2d2f      	cmp	r5, #47	; 0x2f
 23f33ac:	d019      	beq.n	23f33e2 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x52>
         c == '>' || c == '?' || c == '\\' || c == '|';
 23f33ae:	f1a5 0120 	sub.w	r1, r5, #32
 23f33b2:	295f      	cmp	r1, #95	; 0x5f
 23f33b4:	d821      	bhi.n	23f33fa <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x6a>
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':' || c == '<' ||
 23f33b6:	f1a5 0122 	sub.w	r1, r5, #34	; 0x22
 23f33ba:	b2c9      	uxtb	r1, r1
 23f33bc:	291d      	cmp	r1, #29
 23f33be:	d803      	bhi.n	23f33c8 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x38>
 23f33c0:	fa27 f101 	lsr.w	r1, r7, r1
 23f33c4:	07c9      	lsls	r1, r1, #31
 23f33c6:	d418      	bmi.n	23f33fa <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x6a>
 23f33c8:	f005 01bf 	and.w	r1, r5, #191	; 0xbf
 23f33cc:	293c      	cmp	r1, #60	; 0x3c
 23f33ce:	d014      	beq.n	23f33fa <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x6a>
         c == '>' || c == '?' || c == '\\' || c == '|';
 23f33d0:	2d5c      	cmp	r5, #92	; 0x5c
 23f33d2:	d012      	beq.n	23f33fa <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x6a>
    uint8_t c = *path++;
    if (!lfnLegalChar(c)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (c != '.' && c != ' ') {
 23f33d4:	2d2e      	cmp	r5, #46	; 0x2e
 23f33d6:	d002      	beq.n	23f33de <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x4e>
 23f33d8:	2d20      	cmp	r5, #32
 23f33da:	d000      	beq.n	23f33de <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x4e>
      // Need to trim trailing dots spaces.
      fname->end = path;
 23f33dc:	6096      	str	r6, [r2, #8]
                              const char** ptr) {
 23f33de:	4634      	mov	r4, r6
 23f33e0:	e7df      	b.n	23f33a2 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x12>
 23f33e2:	4625      	mov	r5, r4
    }
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {
 23f33e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 23f33e8:	2920      	cmp	r1, #32
 23f33ea:	d0fa      	beq.n	23f33e2 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x52>
 23f33ec:	292f      	cmp	r1, #47	; 0x2f
 23f33ee:	d0f8      	beq.n	23f33e2 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x52>
  }
  *ptr = path;
 23f33f0:	601d      	str	r5, [r3, #0]
  return hashName(fname);
 23f33f2:	4611      	mov	r1, r2

fail:
  return false;
}
 23f33f4:	bcf0      	pop	{r4, r5, r6, r7}
  return hashName(fname);
 23f33f6:	f000 bf11 	b.w	23f421c <_ZN9ExFatFile8hashNameEP8ExName_t>
}
 23f33fa:	2000      	movs	r0, #0
 23f33fc:	bcf0      	pop	{r4, r5, r6, r7}
 23f33fe:	4770      	bx	lr
 23f3400:	31000101 	.word	0x31000101

023f3404 <_ZN9ExFatFile4readEPvj>:
  m_curPosition = saveCurPosition;
  m_curCluster = saveCurCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
 23f3404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f3408:	ed2d 8b02 	vpush	{d8}
  /** \return True if file is read-only */
  bool isReadOnly() const { return m_attributes & FS_ATTRIB_READ_ONLY; }
  /** \return True if this is the root directory. */
  bool isRoot() const { return m_attributes & FILE_ATTR_ROOT; }
  /** \return True file is readable. */
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
 23f340c:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 23f3410:	4604      	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
 23f3412:	07dd      	lsls	r5, r3, #31
int ExFatFile::read(void* buf, size_t count) {
 23f3414:	4689      	mov	r9, r1
 23f3416:	4616      	mov	r6, r2
 23f3418:	b083      	sub	sp, #12
  if (!isReadable()) {
 23f341a:	d567      	bpl.n	23f34ec <_ZN9ExFatFile4readEPvj+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
 23f341c:	0658      	lsls	r0, r3, #25
 23f341e:	d403      	bmi.n	23f3428 <_ZN9ExFatFile4readEPvj+0x24>
 23f3420:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 23f3424:	0719      	lsls	r1, r3, #28
 23f3426:	d50b      	bpl.n	23f3440 <_ZN9ExFatFile4readEPvj+0x3c>
    if ((m_curPosition + count) > m_validLength) {
 23f3428:	e9d4 3200 	ldrd	r3, r2, [r4]
 23f342c:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 23f3430:	18f5      	adds	r5, r6, r3
 23f3432:	f142 0200 	adc.w	r2, r2, #0
 23f3436:	42a9      	cmp	r1, r5
 23f3438:	eb70 0202 	sbcs.w	r2, r0, r2
      count = toRead = m_validLength - m_curPosition;
 23f343c:	bf38      	it	cc
 23f343e:	1ace      	subcc	r6, r1, r3
        m_curCluster =
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f3440:	f104 0318 	add.w	r3, r4, #24
int ExFatFile::read(void* buf, size_t count) {
 23f3444:	46b0      	mov	r8, r6
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f3446:	ee08 3a10 	vmov	s16, r3
  while (toRead) {
 23f344a:	f1b8 0f00 	cmp.w	r8, #0
 23f344e:	f000 8098 	beq.w	23f3582 <_ZN9ExFatFile4readEPvj+0x17e>
    clusterOffset = m_curPosition & m_vol->clusterMask();
 23f3452:	e9d4 3200 	ldrd	r3, r2, [r4]
 23f3456:	6a20      	ldr	r0, [r4, #32]
 23f3458:	f8d0 5438 	ldr.w	r5, [r0, #1080]	; 0x438
 23f345c:	ea05 0703 	and.w	r7, r5, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
 23f3460:	f3c7 0b08 	ubfx	fp, r7, #0, #9
    if (clusterOffset == 0) {
 23f3464:	b94f      	cbnz	r7, 23f347a <_ZN9ExFatFile4readEPvj+0x76>
      if (m_curPosition == 0) {
 23f3466:	4313      	orrs	r3, r2
 23f3468:	d12c      	bne.n	23f34c4 <_ZN9ExFatFile4readEPvj+0xc0>
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
 23f346a:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 23f346e:	065a      	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() { return m_blockDev->isBusy(); }
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
 23f3470:	bf4c      	ite	mi
 23f3472:	f8d0 3434 	ldrmi.w	r3, [r0, #1076]	; 0x434
 23f3476:	69e3      	ldrpl	r3, [r4, #28]
        m_curCluster =
 23f3478:	61a3      	str	r3, [r4, #24]
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
 23f347a:	f8d4 a020 	ldr.w	sl, [r4, #32]
  bool dataCacheSync() { return m_dataCache.sync(); }
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const { return m_clusterMask; }
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
 23f347e:	69a2      	ldr	r2, [r4, #24]
 23f3480:	f89a 0445 	ldrb.w	r0, [sl, #1093]	; 0x445
 23f3484:	1e95      	subs	r5, r2, #2
 23f3486:	f8da 142c 	ldr.w	r1, [sl, #1068]	; 0x42c
 23f348a:	4085      	lsls	r5, r0
 23f348c:	eb05 2557 	add.w	r5, r5, r7, lsr #9
             (clusterOffset >> m_vol->bytesPerSectorShift());
 23f3490:	ea4f 2c57 	mov.w	ip, r7, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
 23f3494:	440d      	add	r5, r1
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector() ||
 23f3496:	f1bb 0f00 	cmp.w	fp, #0
 23f349a:	d130      	bne.n	23f34fe <_ZN9ExFatFile4readEPvj+0xfa>
 23f349c:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 23f34a0:	d32d      	bcc.n	23f34fe <_ZN9ExFatFile4readEPvj+0xfa>
   * \param[in] option mode for cached sector.
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() { return m_sector; }
 23f34a2:	f8da 2218 	ldr.w	r2, [sl, #536]	; 0x218
 23f34a6:	4295      	cmp	r5, r2
 23f34a8:	d029      	beq.n	23f34fe <_ZN9ExFatFile4readEPvj+0xfa>
        goto fail;
      }
      const uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
 23f34aa:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 23f34ae:	d245      	bcs.n	23f353c <_ZN9ExFatFile4readEPvj+0x138>
    return m_blockDev->readSector(sector, dst);
 23f34b0:	464a      	mov	r2, r9
 23f34b2:	4629      	mov	r1, r5
 23f34b4:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
 23f34b8:	f7ff fc6c 	bl	23f2d94 <_ZN9SdSpiCard10readSectorEmPh>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
 23f34bc:	b1b0      	cbz	r0, 23f34ec <_ZN9ExFatFile4readEPvj+0xe8>
      n = m_vol->bytesPerSector();
 23f34be:	f44f 7700 	mov.w	r7, #512	; 0x200
 23f34c2:	e030      	b.n	23f3526 <_ZN9ExFatFile4readEPvj+0x122>
      } else if (isContiguous()) {
 23f34c4:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
        m_curCluster++;
 23f34c8:	69a1      	ldr	r1, [r4, #24]
      } else if (isContiguous()) {
 23f34ca:	065b      	lsls	r3, r3, #25
 23f34cc:	d502      	bpl.n	23f34d4 <_ZN9ExFatFile4readEPvj+0xd0>
        m_curCluster++;
 23f34ce:	3101      	adds	r1, #1
 23f34d0:	61a1      	str	r1, [r4, #24]
 23f34d2:	e7d2      	b.n	23f347a <_ZN9ExFatFile4readEPvj+0x76>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f34d4:	ee18 2a10 	vmov	r2, s16
 23f34d8:	f000 ff86 	bl	23f43e8 <_ZN14ExFatPartition6fatGetEmPm>
        if (fg < 0) {
 23f34dc:	2800      	cmp	r0, #0
 23f34de:	db05      	blt.n	23f34ec <_ZN9ExFatFile4readEPvj+0xe8>
        if (fg == 0) {
 23f34e0:	d1cb      	bne.n	23f347a <_ZN9ExFatFile4readEPvj+0x76>
          if (isDir()) {
 23f34e2:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 23f34e6:	f013 0f50 	tst.w	r3, #80	; 0x50
 23f34ea:	d14a      	bne.n	23f3582 <_ZN9ExFatFile4readEPvj+0x17e>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
 23f34ec:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
 23f34f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  m_error |= READ_ERROR;
 23f34f4:	f043 0302 	orr.w	r3, r3, #2
 23f34f8:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return -1;
 23f34fc:	e043      	b.n	23f3586 <_ZN9ExFatFile4readEPvj+0x182>
      n = m_vol->bytesPerSector() - sectorOffset;
 23f34fe:	f5cb 7700 	rsb	r7, fp, #512	; 0x200
      if (n > toRead) {
 23f3502:	4547      	cmp	r7, r8
    return m_dataCache.prepare(sector, option);
 23f3504:	f04f 0200 	mov.w	r2, #0
 23f3508:	4629      	mov	r1, r5
 23f350a:	f50a 7004 	add.w	r0, sl, #528	; 0x210
 23f350e:	bf28      	it	cs
 23f3510:	4647      	movcs	r7, r8
 23f3512:	f001 fb32 	bl	23f4b7a <_ZN7FsCache7prepareEmh>
      if (!cache) {
 23f3516:	2800      	cmp	r0, #0
 23f3518:	d0e8      	beq.n	23f34ec <_ZN9ExFatFile4readEPvj+0xe8>
      memcpy(dst, src, n);
 23f351a:	eb00 010b 	add.w	r1, r0, fp
 23f351e:	463a      	mov	r2, r7
 23f3520:	4648      	mov	r0, r9
 23f3522:	f008 ff53 	bl	23fc3cc <memcpy>
    m_curPosition += n;
 23f3526:	e9d4 3200 	ldrd	r3, r2, [r4]
 23f352a:	19db      	adds	r3, r3, r7
 23f352c:	f142 0200 	adc.w	r2, r2, #0
 23f3530:	e9c4 3200 	strd	r3, r2, [r4]
    dst += n;
 23f3534:	44b9      	add	r9, r7
    toRead -= n;
 23f3536:	eba8 0807 	sub.w	r8, r8, r7
  while (toRead) {
 23f353a:	e786      	b.n	23f344a <_ZN9ExFatFile4readEPvj+0x46>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
 23f353c:	2101      	movs	r1, #1
 23f353e:	fa01 f000 	lsl.w	r0, r1, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
 23f3542:	ea4f 2758 	mov.w	r7, r8, lsr #9
                       (clusterOffset >> m_vol->bytesPerSectorShift());
 23f3546:	eba0 030c 	sub.w	r3, r0, ip
 23f354a:	42bb      	cmp	r3, r7
 23f354c:	bf28      	it	cs
 23f354e:	463b      	movcs	r3, r7
    return sector <= m_sector && m_sector < (sector + count);
 23f3550:	4295      	cmp	r5, r2
      n = ns << m_vol->bytesPerSectorShift();
 23f3552:	ea4f 2743 	mov.w	r7, r3, lsl #9
 23f3556:	d908      	bls.n	23f356a <_ZN9ExFatFile4readEPvj+0x166>
    return m_blockDev->readSectors(sector, dst, count);
 23f3558:	464a      	mov	r2, r9
 23f355a:	4629      	mov	r1, r5
 23f355c:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
 23f3560:	f7ff fbec 	bl	23f2d3c <_ZN9SdSpiCard11readSectorsEmPhj>
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
 23f3564:	2800      	cmp	r0, #0
 23f3566:	d1de      	bne.n	23f3526 <_ZN9ExFatFile4readEPvj+0x122>
 23f3568:	e7c0      	b.n	23f34ec <_ZN9ExFatFile4readEPvj+0xe8>
    return sector <= m_sector && m_sector < (sector + count);
 23f356a:	18e9      	adds	r1, r5, r3
 23f356c:	428a      	cmp	r2, r1
 23f356e:	d2f3      	bcs.n	23f3558 <_ZN9ExFatFile4readEPvj+0x154>
    if (isCached(sector, count) && !sync()) {
 23f3570:	f50a 7004 	add.w	r0, sl, #528	; 0x210
 23f3574:	9301      	str	r3, [sp, #4]
 23f3576:	f001 fada 	bl	23f4b2e <_ZN7FsCache4syncEv>
 23f357a:	9b01      	ldr	r3, [sp, #4]
 23f357c:	2800      	cmp	r0, #0
 23f357e:	d1eb      	bne.n	23f3558 <_ZN9ExFatFile4readEPvj+0x154>
 23f3580:	e7b4      	b.n	23f34ec <_ZN9ExFatFile4readEPvj+0xe8>
  return count - toRead;
 23f3582:	eba6 0008 	sub.w	r0, r6, r8
}
 23f3586:	b003      	add	sp, #12
 23f3588:	ecbd 8b02 	vpop	{d8}
 23f358c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023f3590 <_ZN9ExFatFile4peekEv>:
int ExFatFile::peek() {
 23f3590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 23f3592:	2201      	movs	r2, #1
  uint64_t saveCurPosition = m_curPosition;
 23f3594:	e9d0 6700 	ldrd	r6, r7, [r0]
 23f3598:	f10d 0107 	add.w	r1, sp, #7
int ExFatFile::peek() {
 23f359c:	4604      	mov	r4, r0
  uint32_t saveCurCluster = m_curCluster;
 23f359e:	6985      	ldr	r5, [r0, #24]
 23f35a0:	f7ff ff30 	bl	23f3404 <_ZN9ExFatFile4readEPvj>
 23f35a4:	2801      	cmp	r0, #1
 23f35a6:	bf14      	ite	ne
 23f35a8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23f35ac:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curPosition = saveCurPosition;
 23f35b0:	e9c4 6700 	strd	r6, r7, [r4]
  m_curCluster = saveCurCluster;
 23f35b4:	61a5      	str	r5, [r4, #24]
}
 23f35b6:	b003      	add	sp, #12
 23f35b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f35ba <_ZN9ExFatFile7seekSetEy>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
 23f35ba:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f35be:	461f      	mov	r7, r3
  bool isOpen() const { return m_attributes; }
 23f35c0:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 23f35c4:	4604      	mov	r4, r0
 23f35c6:	4616      	mov	r6, r2
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 23f35c8:	f8d0 8018 	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
 23f35cc:	2b00      	cmp	r3, #0
 23f35ce:	d05b      	beq.n	23f3688 <_ZN9ExFatFile7seekSetEy+0xce>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 23f35d0:	e9d0 0c00 	ldrd	r0, ip, [r0]
 23f35d4:	45bc      	cmp	ip, r7
 23f35d6:	bf08      	it	eq
 23f35d8:	4290      	cmpeq	r0, r2
 23f35da:	d006      	beq.n	23f35ea <_ZN9ExFatFile7seekSetEy+0x30>
    return true;
  }
  if (pos == 0) {
 23f35dc:	ea56 0207 	orrs.w	r2, r6, r7
 23f35e0:	d105      	bne.n	23f35ee <_ZN9ExFatFile7seekSetEy+0x34>
    // set position to start of file
    m_curCluster = 0;
 23f35e2:	2300      	movs	r3, #0
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
 23f35e4:	61a3      	str	r3, [r4, #24]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 23f35e6:	e9c4 6700 	strd	r6, r7, [r4]
    return true;
 23f35ea:	2001      	movs	r0, #1
 23f35ec:	e04f      	b.n	23f368e <_ZN9ExFatFile7seekSetEy+0xd4>
  if (isFile()) {
 23f35ee:	071a      	lsls	r2, r3, #28
 23f35f0:	d504      	bpl.n	23f35fc <_ZN9ExFatFile7seekSetEy+0x42>
    if (pos > m_validLength) {
 23f35f2:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 23f35f6:	42b1      	cmp	r1, r6
 23f35f8:	41ba      	sbcs	r2, r7
 23f35fa:	d345      	bcc.n	23f3688 <_ZN9ExFatFile7seekSetEy+0xce>
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
 23f35fc:	f8d4 e020 	ldr.w	lr, [r4, #32]
 23f3600:	1e75      	subs	r5, r6, #1
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
 23f3602:	f89e 1445 	ldrb.w	r1, [lr, #1093]	; 0x445
 23f3606:	f147 3aff 	adc.w	sl, r7, #4294967295	; 0xffffffff
 23f360a:	3109      	adds	r1, #9
 23f360c:	b2c9      	uxtb	r1, r1
 23f360e:	f1c1 0920 	rsb	r9, r1, #32
 23f3612:	fa0a f909 	lsl.w	r9, sl, r9
 23f3616:	f1a1 0220 	sub.w	r2, r1, #32
 23f361a:	40cd      	lsrs	r5, r1
 23f361c:	fa2a f202 	lsr.w	r2, sl, r2
 23f3620:	ea45 0509 	orr.w	r5, r5, r9
 23f3624:	4315      	orrs	r5, r2
  if (isContiguous()) {
 23f3626:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
 23f362a:	f1c1 0920 	rsb	r9, r1, #32
 23f362e:	f012 0f40 	tst.w	r2, #64	; 0x40
 23f3632:	f1a1 0a20 	sub.w	sl, r1, #32
 23f3636:	d002      	beq.n	23f363e <_ZN9ExFatFile7seekSetEy+0x84>
    m_curCluster = m_firstCluster + nNew;
 23f3638:	69e3      	ldr	r3, [r4, #28]
 23f363a:	442b      	add	r3, r5
 23f363c:	e7d2      	b.n	23f35e4 <_ZN9ExFatFile7seekSetEy+0x2a>
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
 23f363e:	f110 3bff 	adds.w	fp, r0, #4294967295	; 0xffffffff
 23f3642:	f14c 32ff 	adc.w	r2, ip, #4294967295	; 0xffffffff
 23f3646:	fa02 f909 	lsl.w	r9, r2, r9
 23f364a:	fa2b f101 	lsr.w	r1, fp, r1
 23f364e:	ea41 0109 	orr.w	r1, r1, r9
 23f3652:	fa22 f20a 	lsr.w	r2, r2, sl
 23f3656:	4311      	orrs	r1, r2
  if (nNew < nCur || m_curPosition == 0) {
 23f3658:	428d      	cmp	r5, r1
 23f365a:	d302      	bcc.n	23f3662 <_ZN9ExFatFile7seekSetEy+0xa8>
 23f365c:	ea50 020c 	orrs.w	r2, r0, ip
 23f3660:	d117      	bne.n	23f3692 <_ZN9ExFatFile7seekSetEy+0xd8>
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
 23f3662:	065b      	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
 23f3664:	bf4c      	ite	mi
 23f3666:	f8de 3434 	ldrmi.w	r3, [lr, #1076]	; 0x434
 23f366a:	69e3      	ldrpl	r3, [r4, #28]
 23f366c:	61a3      	str	r3, [r4, #24]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 23f366e:	f104 0918 	add.w	r9, r4, #24
  while (nNew--) {
 23f3672:	2d00      	cmp	r5, #0
 23f3674:	d0b7      	beq.n	23f35e6 <_ZN9ExFatFile7seekSetEy+0x2c>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 23f3676:	464a      	mov	r2, r9
 23f3678:	69a1      	ldr	r1, [r4, #24]
 23f367a:	6a20      	ldr	r0, [r4, #32]
 23f367c:	f000 feb4 	bl	23f43e8 <_ZN14ExFatPartition6fatGetEmPm>
 23f3680:	2800      	cmp	r0, #0
 23f3682:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 23f3686:	dcf4      	bgt.n	23f3672 <_ZN9ExFatFile7seekSetEy+0xb8>
  return true;

fail:
  m_curCluster = tmp;
  return false;
 23f3688:	2000      	movs	r0, #0
  m_curCluster = tmp;
 23f368a:	f8c4 8018 	str.w	r8, [r4, #24]
}
 23f368e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
 23f3692:	1a6d      	subs	r5, r5, r1
 23f3694:	e7eb      	b.n	23f366e <_ZN9ExFatFile7seekSetEy+0xb4>
	...

023f3698 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
 23f3698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f369c:	4699      	mov	r9, r3
 23f369e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 23f36a2:	4604      	mov	r4, r0
 23f36a4:	460e      	mov	r6, r1
 23f36a6:	4615      	mov	r5, r2
 23f36a8:	b08d      	sub	sp, #52	; 0x34
  if (isOpen() || !dir->isDir()) {
 23f36aa:	2b00      	cmp	r3, #0
 23f36ac:	d141      	bne.n	23f3732 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
 23f36ae:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 23f36b2:	f013 0f50 	tst.w	r3, #80	; 0x50
 23f36b6:	d03c      	beq.n	23f3732 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
  switch (oflag & O_ACCMODE) {
 23f36b8:	f009 0303 	and.w	r3, r9, #3
 23f36bc:	2b03      	cmp	r3, #3
 23f36be:	d038      	beq.n	23f3732 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
 23f36c0:	f009 0a08 	and.w	sl, r9, #8
 23f36c4:	3301      	adds	r3, #1
 23f36c6:	ea4a 0a03 	orr.w	sl, sl, r3
  if (fname) {
 23f36ca:	2a00      	cmp	r2, #0
 23f36cc:	d038      	beq.n	23f3740 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xa8>
    freeNeed = 2 + (fname->nameLength + 14) / 15;
 23f36ce:	230f      	movs	r3, #15
 23f36d0:	68d7      	ldr	r7, [r2, #12]
   *
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() { seekSet(0); }
 23f36d2:	4608      	mov	r0, r1
 23f36d4:	370e      	adds	r7, #14
 23f36d6:	fbb7 f7f3 	udiv	r7, r7, r3
 23f36da:	2200      	movs	r2, #0
 23f36dc:	3702      	adds	r7, #2
 23f36de:	2300      	movs	r3, #0
 23f36e0:	b2ff      	uxtb	r7, r7
 23f36e2:	f7ff ff6a 	bl	23f35ba <_ZN9ExFatFile7seekSetEy>
      inSet = false;
 23f36e6:	f04f 0b00 	mov.w	fp, #0
 23f36ea:	46d8      	mov	r8, fp
    n = dir->read(buf, FS_DIR_SIZE);
 23f36ec:	2220      	movs	r2, #32
 23f36ee:	4630      	mov	r0, r6
 23f36f0:	a904      	add	r1, sp, #16
 23f36f2:	f7ff fe87 	bl	23f3404 <_ZN9ExFatFile4readEPvj>
    if (n == 0) {
 23f36f6:	2800      	cmp	r0, #0
 23f36f8:	f000 80c6 	beq.w	23f3888 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x1f0>
    if (n != FS_DIR_SIZE) {
 23f36fc:	2820      	cmp	r0, #32
 23f36fe:	d118      	bne.n	23f3732 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
    if (!(buf[0] & EXFAT_TYPE_USED)) {
 23f3700:	f99d 1010 	ldrsb.w	r1, [sp, #16]
 23f3704:	f89d 2010 	ldrb.w	r2, [sp, #16]
 23f3708:	2900      	cmp	r1, #0
 23f370a:	db1e      	blt.n	23f374a <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xb2>
      if (freeCount == 0) {
 23f370c:	f1bb 0f00 	cmp.w	fp, #0
 23f3710:	d105      	bne.n	23f371e <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x86>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
 23f3712:	6831      	ldr	r1, [r6, #0]
 23f3714:	f1a1 0320 	sub.w	r3, r1, #32
 23f3718:	9300      	str	r3, [sp, #0]
  uint32_t curCluster() const { return m_curCluster; }
 23f371a:	69b3      	ldr	r3, [r6, #24]
 23f371c:	9301      	str	r3, [sp, #4]
      if (freeCount < freeNeed) {
 23f371e:	45bb      	cmp	fp, r7
        freeCount++;
 23f3720:	bf3c      	itt	cc
 23f3722:	f10b 0301 	addcc.w	r3, fp, #1
 23f3726:	fa5f fb83 	uxtbcc.w	fp, r3
      if (buf[0] == EXFAT_TYPE_END_DIR) {
 23f372a:	b95a      	cbnz	r2, 23f3744 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xac>
        if (fname) {
 23f372c:	2d00      	cmp	r5, #0
 23f372e:	f040 80ab 	bne.w	23f3888 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x1f0>
  m_attributes = FILE_ATTR_CLOSED;
 23f3732:	f04f 0800 	mov.w	r8, #0
 23f3736:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
 23f373a:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
  return false;
 23f373e:	e06d      	b.n	23f381c <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x184>
  uint8_t freeNeed = 3;
 23f3740:	2703      	movs	r7, #3
 23f3742:	e7d0      	b.n	23f36e6 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x4e>
      inSet = false;
 23f3744:	2000      	movs	r0, #0
 23f3746:	4680      	mov	r8, r0
 23f3748:	e7d0      	b.n	23f36ec <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x54>
    } else if (!inSet) {
 23f374a:	f1b8 0f00 	cmp.w	r8, #0
 23f374e:	d127      	bne.n	23f37a0 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x108>
        freeCount = 0;
 23f3750:	45bb      	cmp	fp, r7
 23f3752:	bf38      	it	cc
 23f3754:	f04f 0b00 	movcc.w	fp, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
 23f3758:	2a85      	cmp	r2, #133	; 0x85
 23f375a:	d1f3      	bne.n	23f3744 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xac>
      memset(this, 0, sizeof(ExFatFile));
 23f375c:	2238      	movs	r2, #56	; 0x38
 23f375e:	4641      	mov	r1, r8
 23f3760:	4620      	mov	r0, r4
 23f3762:	f008 fe40 	bl	23fc3e6 <memset>
      m_setCount = dirFile->setCount;
 23f3766:	f89d 2011 	ldrb.w	r2, [sp, #17]
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
 23f376a:	f89d 1014 	ldrb.w	r1, [sp, #20]
      m_setCount = dirFile->setCount;
 23f376e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
 23f3772:	f001 0237 	and.w	r2, r1, #55	; 0x37
      if (!(m_attributes & FS_ATTRIB_DIRECTORY)) {
 23f3776:	06c9      	lsls	r1, r1, #27
        m_attributes |= FILE_ATTR_FILE;
 23f3778:	bf58      	it	pl
 23f377a:	f042 0208 	orrpl.w	r2, r2, #8
 23f377e:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
  bool hashName(ExName_t* fname);
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path, ExName_t* fname, const char** ptr);
  ExFatVolume* volume() const { return m_vol; }
 23f3782:	6a32      	ldr	r2, [r6, #32]
      inSet = true;
 23f3784:	2001      	movs	r0, #1
      m_vol = dir->volume();
 23f3786:	6222      	str	r2, [r4, #32]
  uint32_t curCluster() const { return m_curCluster; }
 23f3788:	69b2      	ldr	r2, [r6, #24]
      m_dirPos.cluster = dir->curCluster();
 23f378a:	6262      	str	r2, [r4, #36]	; 0x24
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
 23f378c:	6832      	ldr	r2, [r6, #0]
 23f378e:	3a20      	subs	r2, #32
 23f3790:	62a2      	str	r2, [r4, #40]	; 0x28
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
 23f3792:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
 23f3796:	f3c2 1280 	ubfx	r2, r2, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
 23f379a:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
 23f379e:	e7d2      	b.n	23f3746 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xae>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
 23f37a0:	2ac0      	cmp	r2, #192	; 0xc0
 23f37a2:	d150      	bne.n	23f3846 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x1ae>
      m_validLength = getLe64(dirStream->validLength);
 23f37a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
 23f37a8:	f89d 2011 	ldrb.w	r2, [sp, #17]
      m_flags = modeFlags;
 23f37ac:	f884 a033 	strb.w	sl, [r4, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
 23f37b0:	0793      	lsls	r3, r2, #30
        m_flags |= FILE_FLAG_CONTIGUOUS;
 23f37b2:	bf44      	itt	mi
 23f37b4:	f04a 0240 	orrmi.w	r2, sl, #64	; 0x40
 23f37b8:	f884 2033 	strbmi.w	r2, [r4, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
 23f37bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
      m_validLength = getLe64(dirStream->validLength);
 23f37be:	e9c4 0104 	strd	r0, r1, [r4, #16]
      m_dataLength = getLe64(dirStream->dataLength);
 23f37c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
      m_firstCluster = getLe32(dirStream->firstCluster);
 23f37c6:	61e2      	str	r2, [r4, #28]
      m_dataLength = getLe64(dirStream->dataLength);
 23f37c8:	e9c4 0102 	strd	r0, r1, [r4, #8]
      if (!fname) {
 23f37cc:	bb55      	cbnz	r5, 23f3824 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x18c>
  if (oflag & O_EXCL) {
 23f37ce:	f419 6f00 	tst.w	r9, #2048	; 0x800
 23f37d2:	d1ae      	bne.n	23f3732 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
 23f37d4:	f419 4f88 	tst.w	r9, #17408	; 0x4400
 23f37d8:	d103      	bne.n	23f37e2 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x14a>
 23f37da:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 23f37de:	079d      	lsls	r5, r3, #30
 23f37e0:	d505      	bpl.n	23f37ee <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x156>
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
 23f37e2:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
 23f37e6:	06d8      	lsls	r0, r3, #27
 23f37e8:	d4a3      	bmi.n	23f3732 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
 23f37ea:	07d9      	lsls	r1, r3, #31
 23f37ec:	d4a1      	bmi.n	23f3732 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
  if (oflag & O_TRUNC) {
 23f37ee:	f419 6f80 	tst.w	r9, #1024	; 0x400
 23f37f2:	d039      	beq.n	23f3868 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x1d0>
    if (!(m_flags & FILE_FLAG_WRITE)) {
 23f37f4:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 23f37f8:	079a      	lsls	r2, r3, #30
 23f37fa:	d59a      	bpl.n	23f3732 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
  bool truncate(uint64_t length) { return seekSet(length) && truncate(); }
 23f37fc:	2200      	movs	r2, #0
 23f37fe:	2300      	movs	r3, #0
 23f3800:	4620      	mov	r0, r4
 23f3802:	f7ff feda 	bl	23f35ba <_ZN9ExFatFile7seekSetEy>
 23f3806:	2800      	cmp	r0, #0
 23f3808:	d093      	beq.n	23f3732 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
 23f380a:	4620      	mov	r0, r4
 23f380c:	f000 fb73 	bl	23f3ef6 <_ZN9ExFatFile8truncateEv>
 23f3810:	2800      	cmp	r0, #0
 23f3812:	d08e      	beq.n	23f3732 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
  if (isWritable()) {
 23f3814:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 23f3818:	079b      	lsls	r3, r3, #30
 23f381a:	d42e      	bmi.n	23f387a <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x1e2>
}
 23f381c:	4640      	mov	r0, r8
 23f381e:	b00d      	add	sp, #52	; 0x34
 23f3820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const char* end;
#if !USE_UTF8_LONG_NAMES
  /** \return true if at end. */
  bool atEnd() { return next == end; }
  /** Reset to start of LFN. */
  void reset() { next = begin; }
 23f3824:	682a      	ldr	r2, [r5, #0]
      if (fname->nameLength != dirStream->nameLength ||
 23f3826:	68e9      	ldr	r1, [r5, #12]
 23f3828:	606a      	str	r2, [r5, #4]
 23f382a:	f89d 2013 	ldrb.w	r2, [sp, #19]
 23f382e:	4291      	cmp	r1, r2
 23f3830:	d188      	bne.n	23f3744 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xac>
 23f3832:	8a28      	ldrh	r0, [r5, #16]
 23f3834:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 23f3838:	eba0 0c02 	sub.w	ip, r0, r2
 23f383c:	f1dc 0000 	rsbs	r0, ip, #0
 23f3840:	eb40 000c 	adc.w	r0, r0, ip
 23f3844:	e77f      	b.n	23f3746 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xae>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
 23f3846:	2ac1      	cmp	r2, #193	; 0xc1
 23f3848:	f47f af7c 	bne.w	23f3744 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xac>
      if (!cmpName(dirName, fname)) {
 23f384c:	462a      	mov	r2, r5
 23f384e:	4620      	mov	r0, r4
 23f3850:	a904      	add	r1, sp, #16
 23f3852:	f000 fcbb 	bl	23f41cc <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t>
 23f3856:	2800      	cmp	r0, #0
 23f3858:	f43f af75 	beq.w	23f3746 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xae>
      if (fname->atEnd()) {
 23f385c:	e9d5 2101 	ldrd	r2, r1, [r5, #4]
 23f3860:	4291      	cmp	r1, r2
 23f3862:	f47f af70 	bne.w	23f3746 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xae>
 23f3866:	e7b2      	b.n	23f37ce <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x136>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
 23f3868:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 23f386c:	d0d2      	beq.n	23f3814 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x17c>
 23f386e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 23f3872:	4620      	mov	r0, r4
 23f3874:	f7ff fea1 	bl	23f35ba <_ZN9ExFatFile7seekSetEy>
 23f3878:	e7ca      	b.n	23f3810 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x178>
    m_attributes |= FS_ATTRIB_ARCHIVE;
 23f387a:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 23f387e:	f043 0320 	orr.w	r3, r3, #32
 23f3882:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
 23f3886:	e7c9      	b.n	23f381c <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x184>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
 23f3888:	f419 7f00 	tst.w	r9, #512	; 0x200
 23f388c:	f43f af51 	beq.w	23f3732 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
 23f3890:	f01a 0f02 	tst.w	sl, #2
 23f3894:	f43f af4d 	beq.w	23f3732 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
 23f3898:	2d00      	cmp	r5, #0
 23f389a:	f43f af4a 	beq.w	23f3732 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
  while (freeCount < freeNeed) {
 23f389e:	45bb      	cmp	fp, r7
 23f38a0:	d221      	bcs.n	23f38e6 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x24e>
    n = dir->read(buf, FS_DIR_SIZE);
 23f38a2:	2220      	movs	r2, #32
 23f38a4:	4630      	mov	r0, r6
 23f38a6:	a904      	add	r1, sp, #16
 23f38a8:	f7ff fdac 	bl	23f3404 <_ZN9ExFatFile4readEPvj>
    if (n == 0) {
 23f38ac:	b950      	cbnz	r0, 23f38c4 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x22c>
      if (!dir->addDirCluster()) {
 23f38ae:	4630      	mov	r0, r6
      uint32_t saveCurCluster = dir->m_curCluster;
 23f38b0:	f8d6 8018 	ldr.w	r8, [r6, #24]
      if (!dir->addDirCluster()) {
 23f38b4:	f000 fa45 	bl	23f3d42 <_ZN9ExFatFile13addDirClusterEv>
 23f38b8:	2800      	cmp	r0, #0
 23f38ba:	f43f af3a 	beq.w	23f3732 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
      dir->m_curCluster = saveCurCluster;
 23f38be:	f8c6 8018 	str.w	r8, [r6, #24]
      continue;
 23f38c2:	e7ec      	b.n	23f389e <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x206>
    if (n != FS_DIR_SIZE) {
 23f38c4:	2820      	cmp	r0, #32
 23f38c6:	f47f af34 	bne.w	23f3732 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
    if (freeCount == 0) {
 23f38ca:	f1bb 0f00 	cmp.w	fp, #0
 23f38ce:	d105      	bne.n	23f38dc <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x244>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
 23f38d0:	6832      	ldr	r2, [r6, #0]
 23f38d2:	f1a2 0320 	sub.w	r3, r2, #32
 23f38d6:	9300      	str	r3, [sp, #0]
  uint32_t curCluster() const { return m_curCluster; }
 23f38d8:	69b3      	ldr	r3, [r6, #24]
 23f38da:	9301      	str	r3, [sp, #4]
    freeCount++;
 23f38dc:	f10b 0301 	add.w	r3, fp, #1
 23f38e0:	fa5f fb83 	uxtb.w	fp, r3
 23f38e4:	e7db      	b.n	23f389e <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x206>
  memset(this, 0, sizeof(ExFatFile));
 23f38e6:	2238      	movs	r2, #56	; 0x38
 23f38e8:	2100      	movs	r1, #0
 23f38ea:	4620      	mov	r0, r4
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
 23f38ec:	f896 8033 	ldrb.w	r8, [r6, #51]	; 0x33
 23f38f0:	f008 fd79 	bl	23fc3e6 <memset>
  ExFatVolume* volume() const { return m_vol; }
 23f38f4:	6a33      	ldr	r3, [r6, #32]
 23f38f6:	f04f 0900 	mov.w	r9, #0
  m_vol = dir->volume();
 23f38fa:	6223      	str	r3, [r4, #32]
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
 23f38fc:	2328      	movs	r3, #40	; 0x28
 23f38fe:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_dirPos = freePos;
 23f3902:	9b01      	ldr	r3, [sp, #4]
  freePos.isContiguous = dir->isContiguous();
 23f3904:	f3c8 1880 	ubfx	r8, r8, #6, #1
  m_dirPos = freePos;
 23f3908:	6263      	str	r3, [r4, #36]	; 0x24
 23f390a:	9b00      	ldr	r3, [sp, #0]
 23f390c:	f884 802c 	strb.w	r8, [r4, #44]	; 0x2c
 23f3910:	62a3      	str	r3, [r4, #40]	; 0x28
 23f3912:	682b      	ldr	r3, [r5, #0]
      m_setCount = freeNeed - 1;
 23f3914:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
 23f3918:	606b      	str	r3, [r5, #4]
 23f391a:	fa5f f888 	uxtb.w	r8, r8
 23f391e:	fa5f fb89 	uxtb.w	fp, r9
  for (uint8_t i = 0; i < freeNeed; i++) {
 23f3922:	45bb      	cmp	fp, r7
 23f3924:	d255      	bcs.n	23f39d2 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x33a>
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
 23f3926:	2201      	movs	r2, #1
 23f3928:	4659      	mov	r1, fp
 23f392a:	4620      	mov	r0, r4
 23f392c:	f7ff fcf6 	bl	23f331c <_ZN9ExFatFile8dirCacheEhh>
    if (!cache || (cache[0] & 0x80)) {
 23f3930:	4606      	mov	r6, r0
 23f3932:	2800      	cmp	r0, #0
 23f3934:	f43f aefd 	beq.w	23f3732 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
 23f3938:	f990 2000 	ldrsb.w	r2, [r0]
 23f393c:	2a00      	cmp	r2, #0
 23f393e:	f6ff aef8 	blt.w	23f3732 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
    memset(cache, 0, FS_DIR_SIZE);
 23f3942:	2220      	movs	r2, #32
 23f3944:	2100      	movs	r1, #0
 23f3946:	f008 fd4e 	bl	23fc3e6 <memset>
    if (i == 0) {
 23f394a:	f1bb 0f00 	cmp.w	fp, #0
 23f394e:	d120      	bne.n	23f3992 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x2fa>
      dirFile->type = EXFAT_TYPE_FILE;
 23f3950:	2385      	movs	r3, #133	; 0x85
 23f3952:	7033      	strb	r3, [r6, #0]
      if (FsDateTime::callback) {
 23f3954:	4b21      	ldr	r3, [pc, #132]	; (23f39dc <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x344>)
      m_setCount = freeNeed - 1;
 23f3956:	f884 8030 	strb.w	r8, [r4, #48]	; 0x30
      dirFile->setCount = m_setCount;
 23f395a:	f886 8001 	strb.w	r8, [r6, #1]
      if (FsDateTime::callback) {
 23f395e:	681b      	ldr	r3, [r3, #0]
 23f3960:	b18b      	cbz	r3, 23f3986 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x2ee>
        FsDateTime::callback(&date, &time, &ms10);
 23f3962:	f10d 020b 	add.w	r2, sp, #11
 23f3966:	f10d 010e 	add.w	r1, sp, #14
 23f396a:	a803      	add	r0, sp, #12
 23f396c:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
 23f396e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 23f3972:	8173      	strh	r3, [r6, #10]
 23f3974:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 23f3978:	8133      	strh	r3, [r6, #8]
        dirFile->createTimeMs = ms10;
 23f397a:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23f397e:	7533      	strb	r3, [r6, #20]
  for (uint8_t i = 0; i < freeNeed; i++) {
 23f3980:	f109 0901 	add.w	r9, r9, #1
 23f3984:	e7cb      	b.n	23f391e <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x286>
 23f3986:	f645 2321 	movw	r3, #23073	; 0x5a21
 23f398a:	8173      	strh	r3, [r6, #10]
 23f398c:	81f3      	strh	r3, [r6, #14]
 23f398e:	8273      	strh	r3, [r6, #18]
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59
 23f3990:	e7f6      	b.n	23f3980 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x2e8>
    } else if (i == 1) {
 23f3992:	f1bb 0f01 	cmp.w	fp, #1
 23f3996:	d10c      	bne.n	23f39b2 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x31a>
      dirStream->type = EXFAT_TYPE_STREAM;
 23f3998:	22c0      	movs	r2, #192	; 0xc0
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
 23f399a:	f06a 037f 	orn	r3, sl, #127	; 0x7f
      dirStream->type = EXFAT_TYPE_STREAM;
 23f399e:	7032      	strb	r2, [r6, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
 23f39a0:	f886 b001 	strb.w	fp, [r6, #1]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
 23f39a4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
 23f39a8:	68eb      	ldr	r3, [r5, #12]
 23f39aa:	70f3      	strb	r3, [r6, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
 23f39ac:	8a2b      	ldrh	r3, [r5, #16]
 23f39ae:	80b3      	strh	r3, [r6, #4]
}
 23f39b0:	e7e6      	b.n	23f3980 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x2e8>
      dirName->type = EXFAT_TYPE_NAME;
 23f39b2:	23c1      	movs	r3, #193	; 0xc1
 23f39b4:	f106 021e 	add.w	r2, r6, #30
 23f39b8:	7033      	strb	r3, [r6, #0]
        if (fname->atEnd()) {
 23f39ba:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
 23f39be:	428b      	cmp	r3, r1
 23f39c0:	d0de      	beq.n	23f3980 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x2e8>
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() { return atEnd() ? 0 : *next++; }
 23f39c2:	1c59      	adds	r1, r3, #1
 23f39c4:	6069      	str	r1, [r5, #4]
 23f39c6:	781b      	ldrb	r3, [r3, #0]
 23f39c8:	f826 3f02 	strh.w	r3, [r6, #2]!
      for (size_t k = 0; k < 15; k++) {
 23f39cc:	42b2      	cmp	r2, r6
 23f39ce:	d1f4      	bne.n	23f39ba <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x322>
 23f39d0:	e7d6      	b.n	23f3980 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x2e8>
  return sync();
 23f39d2:	4620      	mov	r0, r4
 23f39d4:	f000 f994 	bl	23f3d00 <_ZN9ExFatFile4syncEv>
 23f39d8:	4680      	mov	r8, r0
 23f39da:	e71f      	b.n	23f381c <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x184>
 23f39dc:	1007ae98 	.word	0x1007ae98

023f39e0 <_ZN9ExFatFile4openEPS_PKci>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
 23f39e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f39e4:	4698      	mov	r8, r3
  ExFatFile() {}
 23f39e6:	2300      	movs	r3, #0
 23f39e8:	b096      	sub	sp, #88	; 0x58
 23f39ea:	9314      	str	r3, [sp, #80]	; 0x50
  if (isOpen() || !dirFile->isDir()) {
 23f39ec:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
 23f39f0:	4605      	mov	r5, r0
 23f39f2:	460c      	mov	r4, r1
 23f39f4:	9201      	str	r2, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
 23f39f6:	b11b      	cbz	r3, 23f3a00 <_ZN9ExFatFile4openEPS_PKci+0x20>
  return false;
 23f39f8:	2000      	movs	r0, #0
}
 23f39fa:	b016      	add	sp, #88	; 0x58
 23f39fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isOpen() || !dirFile->isDir()) {
 23f3a00:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 23f3a04:	f013 0f50 	tst.w	r3, #80	; 0x50
 23f3a08:	d0f6      	beq.n	23f39f8 <_ZN9ExFatFile4openEPS_PKci+0x18>
  if (isDirSeparator(*path)) {
 23f3a0a:	7813      	ldrb	r3, [r2, #0]
 23f3a0c:	2b2f      	cmp	r3, #47	; 0x2f
 23f3a0e:	d11a      	bne.n	23f3a46 <_ZN9ExFatFile4openEPS_PKci+0x66>
    while (isDirSeparator(*path)) {
 23f3a10:	9a01      	ldr	r2, [sp, #4]
 23f3a12:	7813      	ldrb	r3, [r2, #0]
 23f3a14:	2b2f      	cmp	r3, #47	; 0x2f
 23f3a16:	d102      	bne.n	23f3a1e <_ZN9ExFatFile4openEPS_PKci+0x3e>
      path++;
 23f3a18:	3201      	adds	r2, #1
 23f3a1a:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
 23f3a1c:	e7f8      	b.n	23f3a10 <_ZN9ExFatFile4openEPS_PKci+0x30>
      return openRoot(dirFile->m_vol);
 23f3a1e:	6a24      	ldr	r4, [r4, #32]
    if (*path == 0) {
 23f3a20:	b923      	cbnz	r3, 23f3a2c <_ZN9ExFatFile4openEPS_PKci+0x4c>
      return openRoot(dirFile->m_vol);
 23f3a22:	4621      	mov	r1, r4
 23f3a24:	4628      	mov	r0, r5
 23f3a26:	f7ff fc9f 	bl	23f3368 <_ZN9ExFatFile8openRootEP11ExFatVolume>
 23f3a2a:	e7e6      	b.n	23f39fa <_ZN9ExFatFile4openEPS_PKci+0x1a>
  memset(this, 0, sizeof(ExFatFile));
 23f3a2c:	2238      	movs	r2, #56	; 0x38
 23f3a2e:	2100      	movs	r1, #0
 23f3a30:	a808      	add	r0, sp, #32
 23f3a32:	f008 fcd8 	bl	23fc3e6 <memset>
  m_attributes = FILE_ATTR_ROOT;
 23f3a36:	2340      	movs	r3, #64	; 0x40
 23f3a38:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  m_flags = FILE_FLAG_READ;
 23f3a3c:	2301      	movs	r3, #1
  m_vol = vol;
 23f3a3e:	9410      	str	r4, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
 23f3a40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    dirFile = &tmpDir;
 23f3a44:	ac08      	add	r4, sp, #32
    if (!parsePathName(path, &fname, &path)) {
 23f3a46:	4628      	mov	r0, r5
 23f3a48:	9901      	ldr	r1, [sp, #4]
 23f3a4a:	ab01      	add	r3, sp, #4
 23f3a4c:	aa03      	add	r2, sp, #12
 23f3a4e:	f7ff fc9f 	bl	23f3390 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_>
 23f3a52:	2800      	cmp	r0, #0
 23f3a54:	d0d0      	beq.n	23f39f8 <_ZN9ExFatFile4openEPS_PKci+0x18>
    if (*path == 0) {
 23f3a56:	9b01      	ldr	r3, [sp, #4]
 23f3a58:	781b      	ldrb	r3, [r3, #0]
 23f3a5a:	b1d3      	cbz	r3, 23f3a92 <_ZN9ExFatFile4openEPS_PKci+0xb2>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
 23f3a5c:	2300      	movs	r3, #0
 23f3a5e:	4621      	mov	r1, r4
 23f3a60:	4628      	mov	r0, r5
 23f3a62:	aa03      	add	r2, sp, #12
 23f3a64:	f7ff fe18 	bl	23f3698 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti>
 23f3a68:	2800      	cmp	r0, #0
 23f3a6a:	d0c5      	beq.n	23f39f8 <_ZN9ExFatFile4openEPS_PKci+0x18>
      *this = *from;
 23f3a6c:	ae08      	add	r6, sp, #32
 23f3a6e:	462a      	mov	r2, r5
 23f3a70:	4634      	mov	r4, r6
 23f3a72:	f105 0330 	add.w	r3, r5, #48	; 0x30
 23f3a76:	4637      	mov	r7, r6
 23f3a78:	6810      	ldr	r0, [r2, #0]
 23f3a7a:	6851      	ldr	r1, [r2, #4]
 23f3a7c:	3208      	adds	r2, #8
 23f3a7e:	c703      	stmia	r7!, {r0, r1}
 23f3a80:	429a      	cmp	r2, r3
 23f3a82:	463e      	mov	r6, r7
 23f3a84:	d1f7      	bne.n	23f3a76 <_ZN9ExFatFile4openEPS_PKci+0x96>
 23f3a86:	6810      	ldr	r0, [r2, #0]
 23f3a88:	6038      	str	r0, [r7, #0]
    close();
 23f3a8a:	4628      	mov	r0, r5
 23f3a8c:	f7ff fc62 	bl	23f3354 <_ZN9ExFatFile5closeEv>
    if (!parsePathName(path, &fname, &path)) {
 23f3a90:	e7d9      	b.n	23f3a46 <_ZN9ExFatFile4openEPS_PKci+0x66>
  return openPrivate(dirFile, &fname, oflag);
 23f3a92:	4643      	mov	r3, r8
 23f3a94:	4621      	mov	r1, r4
 23f3a96:	4628      	mov	r0, r5
 23f3a98:	aa03      	add	r2, sp, #12
 23f3a9a:	f7ff fdfd 	bl	23f3698 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti>
 23f3a9e:	e7ac      	b.n	23f39fa <_ZN9ExFatFile4openEPS_PKci+0x1a>

023f3aa0 <_ZN9ExFatFile4openEP11ExFatVolumePKci>:
  return vol && open(vol->vwd(), path, oflag);
 23f3aa0:	b119      	cbz	r1, 23f3aaa <_ZN9ExFatFile4openEP11ExFatVolumePKci+0xa>
 23f3aa2:	f501 6189 	add.w	r1, r1, #1096	; 0x448
 23f3aa6:	f7ff bf9b 	b.w	23f39e0 <_ZN9ExFatFile4openEPS_PKci>
}
 23f3aaa:	4608      	mov	r0, r1
 23f3aac:	4770      	bx	lr

023f3aae <_ZL16exFatDirChecksumPKht>:
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
 23f3aae:	2300      	movs	r3, #0
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
 23f3ab0:	b510      	push	{r4, lr}
  bool skip = data[0] == EXFAT_TYPE_FILE;
 23f3ab2:	7804      	ldrb	r4, [r0, #0]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
 23f3ab4:	084a      	lsrs	r2, r1, #1
 23f3ab6:	ea42 31c1 	orr.w	r1, r2, r1, lsl #15
 23f3aba:	5cc2      	ldrb	r2, [r0, r3]
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
 23f3abc:	2b01      	cmp	r3, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
 23f3abe:	fa12 f181 	uxtah	r1, r2, r1
 23f3ac2:	b289      	uxth	r1, r1
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
 23f3ac4:	d108      	bne.n	23f3ad8 <_ZL16exFatDirChecksumPKht+0x2a>
 23f3ac6:	2c85      	cmp	r4, #133	; 0x85
 23f3ac8:	bf14      	ite	ne
 23f3aca:	2201      	movne	r2, #1
 23f3acc:	2203      	moveq	r2, #3
 23f3ace:	4413      	add	r3, r2
 23f3ad0:	2b1f      	cmp	r3, #31
 23f3ad2:	d9ef      	bls.n	23f3ab4 <_ZL16exFatDirChecksumPKht+0x6>
  }
  return checksum;
}
 23f3ad4:	4608      	mov	r0, r1
 23f3ad6:	bd10      	pop	{r4, pc}
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
 23f3ad8:	2201      	movs	r2, #1
 23f3ada:	e7f8      	b.n	23f3ace <_ZL16exFatDirChecksumPKht+0x20>

023f3adc <_ZN14ExFatPartition9cacheSyncEv>:
  bool cacheSync() {
 23f3adc:	b510      	push	{r4, lr}
 23f3ade:	4604      	mov	r4, r0
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
 23f3ae0:	f001 f825 	bl	23f4b2e <_ZN7FsCache4syncEv>
 23f3ae4:	b150      	cbz	r0, 23f3afc <_ZN14ExFatPartition9cacheSyncEv+0x20>
 23f3ae6:	f504 7004 	add.w	r0, r4, #528	; 0x210
 23f3aea:	f001 f820 	bl	23f4b2e <_ZN7FsCache4syncEv>
 23f3aee:	b128      	cbz	r0, 23f3afc <_ZN14ExFatPartition9cacheSyncEv+0x20>
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const { return m_sectorMask; }
  bool syncDevice() { return m_blockDev->syncDevice(); }
 23f3af0:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
  }
 23f3af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  bool syncDevice() { return m_blockDev->syncDevice(); }
 23f3af8:	f7fe bfec 	b.w	23f2ad4 <_ZN9SdSpiCard10syncDeviceEv>
  }
 23f3afc:	2000      	movs	r0, #0
 23f3afe:	bd10      	pop	{r4, pc}

023f3b00 <_ZN9ExFatFile10addClusterEv>:
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
 23f3b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f3b02:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
 23f3b04:	69a1      	ldr	r1, [r4, #24]
 23f3b06:	6a00      	ldr	r0, [r0, #32]
 23f3b08:	b101      	cbz	r1, 23f3b0c <_ZN9ExFatFile10addClusterEv+0xc>
 23f3b0a:	3101      	adds	r1, #1
 23f3b0c:	2201      	movs	r2, #1
 23f3b0e:	f000 fbac 	bl	23f426a <_ZN14ExFatPartition10bitmapFindEmm>
  if (find < 2) {
 23f3b12:	2801      	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
 23f3b14:	4605      	mov	r5, r0
  if (find < 2) {
 23f3b16:	d802      	bhi.n	23f3b1e <_ZN9ExFatFile10addClusterEv+0x1e>
done:
  m_curCluster = find;
  return true;

fail:
  return false;
 23f3b18:	2600      	movs	r6, #0
}
 23f3b1a:	4630      	mov	r0, r6
 23f3b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
 23f3b1e:	2301      	movs	r3, #1
 23f3b20:	4601      	mov	r1, r0
 23f3b22:	461a      	mov	r2, r3
 23f3b24:	6a20      	ldr	r0, [r4, #32]
 23f3b26:	f000 fbf5 	bl	23f4314 <_ZN14ExFatPartition12bitmapModifyEmmb>
 23f3b2a:	4606      	mov	r6, r0
 23f3b2c:	2800      	cmp	r0, #0
 23f3b2e:	d0f3      	beq.n	23f3b18 <_ZN9ExFatFile10addClusterEv+0x18>
  if (m_curCluster == 0) {
 23f3b30:	69a2      	ldr	r2, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
 23f3b32:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  if (m_curCluster == 0) {
 23f3b36:	b92a      	cbnz	r2, 23f3b44 <_ZN9ExFatFile10addClusterEv+0x44>
    m_flags |= FILE_FLAG_CONTIGUOUS;
 23f3b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 23f3b3c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_curCluster = find;
 23f3b40:	61a5      	str	r5, [r4, #24]
  return true;
 23f3b42:	e7ea      	b.n	23f3b1a <_ZN9ExFatFile10addClusterEv+0x1a>
  if (isContiguous()) {
 23f3b44:	0659      	lsls	r1, r3, #25
 23f3b46:	d513      	bpl.n	23f3b70 <_ZN9ExFatFile10addClusterEv+0x70>
    if (find == (m_curCluster + 1)) {
 23f3b48:	3201      	adds	r2, #1
 23f3b4a:	42aa      	cmp	r2, r5
 23f3b4c:	d0f8      	beq.n	23f3b40 <_ZN9ExFatFile10addClusterEv+0x40>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
 23f3b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
 23f3b52:	69e1      	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
 23f3b54:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
 23f3b58:	69a3      	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
 23f3b5a:	6a20      	ldr	r0, [r4, #32]
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
 23f3b5c:	428b      	cmp	r3, r1
 23f3b5e:	d907      	bls.n	23f3b70 <_ZN9ExFatFile10addClusterEv+0x70>
      if (!m_vol->fatPut(c, c + 1)) {
 23f3b60:	1c4f      	adds	r7, r1, #1
 23f3b62:	463a      	mov	r2, r7
 23f3b64:	f000 fc93 	bl	23f448e <_ZN14ExFatPartition6fatPutEmm>
 23f3b68:	2800      	cmp	r0, #0
 23f3b6a:	d0d5      	beq.n	23f3b18 <_ZN9ExFatFile10addClusterEv+0x18>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
 23f3b6c:	4639      	mov	r1, r7
 23f3b6e:	e7f3      	b.n	23f3b58 <_ZN9ExFatFile10addClusterEv+0x58>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
 23f3b70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f3b74:	4629      	mov	r1, r5
 23f3b76:	6a20      	ldr	r0, [r4, #32]
 23f3b78:	f000 fc89 	bl	23f448e <_ZN14ExFatPartition6fatPutEmm>
 23f3b7c:	2800      	cmp	r0, #0
 23f3b7e:	d0cb      	beq.n	23f3b18 <_ZN9ExFatFile10addClusterEv+0x18>
  if (m_curCluster) {
 23f3b80:	69a1      	ldr	r1, [r4, #24]
 23f3b82:	2900      	cmp	r1, #0
 23f3b84:	d0dc      	beq.n	23f3b40 <_ZN9ExFatFile10addClusterEv+0x40>
    if (!m_vol->fatPut(m_curCluster, find)) {
 23f3b86:	462a      	mov	r2, r5
 23f3b88:	6a20      	ldr	r0, [r4, #32]
 23f3b8a:	f000 fc80 	bl	23f448e <_ZN14ExFatPartition6fatPutEmm>
 23f3b8e:	2800      	cmp	r0, #0
 23f3b90:	d1d6      	bne.n	23f3b40 <_ZN9ExFatFile10addClusterEv+0x40>
 23f3b92:	e7c1      	b.n	23f3b18 <_ZN9ExFatFile10addClusterEv+0x18>

023f3b94 <_ZN9ExFatFile6removeEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
 23f3b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
 23f3b96:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 23f3b9a:	4604      	mov	r4, r0
  uint8_t* cache;
  if (!isWritable()) {
 23f3b9c:	079a      	lsls	r2, r3, #30
 23f3b9e:	d401      	bmi.n	23f3ba4 <_ZN9ExFatFile6removeEv+0x10>

  // Write entry to device.
  return m_vol->cacheSync();

fail:
  return false;
 23f3ba0:	2000      	movs	r0, #0
}
 23f3ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_firstCluster) {
 23f3ba4:	69c1      	ldr	r1, [r0, #28]
 23f3ba6:	b9d1      	cbnz	r1, 23f3bde <_ZN9ExFatFile6removeEv+0x4a>
bool ExFatFile::remove() {
 23f3ba8:	2500      	movs	r5, #0
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
 23f3baa:	2201      	movs	r2, #1
 23f3bac:	4620      	mov	r0, r4
 23f3bae:	b2e9      	uxtb	r1, r5
 23f3bb0:	f7ff fbb4 	bl	23f331c <_ZN9ExFatFile8dirCacheEhh>
    if (!cache) {
 23f3bb4:	2800      	cmp	r0, #0
 23f3bb6:	d0f3      	beq.n	23f3ba0 <_ZN9ExFatFile6removeEv+0xc>
    cache[0] &= 0x7F;
 23f3bb8:	7803      	ldrb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
 23f3bba:	3501      	adds	r5, #1
    cache[0] &= 0x7F;
 23f3bbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 23f3bc0:	7003      	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
 23f3bc2:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 23f3bc6:	b2eb      	uxtb	r3, r5
 23f3bc8:	429a      	cmp	r2, r3
 23f3bca:	d2ee      	bcs.n	23f3baa <_ZN9ExFatFile6removeEv+0x16>
  m_attributes = FILE_ATTR_CLOSED;
 23f3bcc:	2300      	movs	r3, #0
  return m_vol->cacheSync();
 23f3bce:	6a20      	ldr	r0, [r4, #32]
  m_attributes = FILE_ATTR_CLOSED;
 23f3bd0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
 23f3bd4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return m_vol->cacheSync();
 23f3bd8:	f7ff ff80 	bl	23f3adc <_ZN14ExFatPartition9cacheSyncEv>
 23f3bdc:	e7e1      	b.n	23f3ba2 <_ZN9ExFatFile6removeEv+0xe>
    if (isContiguous()) {
 23f3bde:	065b      	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
 23f3be0:	6a00      	ldr	r0, [r0, #32]
    if (isContiguous()) {
 23f3be2:	d51b      	bpl.n	23f3c1c <_ZN9ExFatFile6removeEv+0x88>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
 23f3be4:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
 23f3be8:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
 23f3bec:	3a01      	subs	r2, #1
 23f3bee:	f103 0309 	add.w	r3, r3, #9
 23f3bf2:	b2db      	uxtb	r3, r3
 23f3bf4:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
 23f3bf8:	f1c3 0720 	rsb	r7, r3, #32
 23f3bfc:	f1a3 0620 	sub.w	r6, r3, #32
 23f3c00:	40da      	lsrs	r2, r3
 23f3c02:	fa05 f707 	lsl.w	r7, r5, r7
 23f3c06:	433a      	orrs	r2, r7
 23f3c08:	fa25 f606 	lsr.w	r6, r5, r6
 23f3c0c:	4332      	orrs	r2, r6
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
 23f3c0e:	2300      	movs	r3, #0
 23f3c10:	3201      	adds	r2, #1
 23f3c12:	f000 fb7f 	bl	23f4314 <_ZN14ExFatPartition12bitmapModifyEmmb>
      if (!m_vol->freeChain(m_firstCluster)) {
 23f3c16:	2800      	cmp	r0, #0
 23f3c18:	d1c6      	bne.n	23f3ba8 <_ZN9ExFatFile6removeEv+0x14>
 23f3c1a:	e7c1      	b.n	23f3ba0 <_ZN9ExFatFile6removeEv+0xc>
 23f3c1c:	f000 fc54 	bl	23f44c8 <_ZN14ExFatPartition9freeChainEm>
 23f3c20:	e7f9      	b.n	23f3c16 <_ZN9ExFatFile6removeEv+0x82>
	...

023f3c24 <_ZN9ExFatFile7syncDirEv>:
fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
 23f3c24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f3c28:	2700      	movs	r7, #0
 23f3c2a:	4604      	mov	r4, r0
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
 23f3c2c:	463e      	mov	r6, r7
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
        if (FsDateTime::callback) {
 23f3c2e:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 23f3cfc <_ZN9ExFatFile7syncDirEv+0xd8>
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
 23f3c32:	2200      	movs	r2, #0
 23f3c34:	4620      	mov	r0, r4
 23f3c36:	b2f9      	uxtb	r1, r7
 23f3c38:	f7ff fb70 	bl	23f331c <_ZN9ExFatFile8dirCacheEhh>
    if (!cache) {
 23f3c3c:	4605      	mov	r5, r0
 23f3c3e:	2800      	cmp	r0, #0
 23f3c40:	d03d      	beq.n	23f3cbe <_ZN9ExFatFile7syncDirEv+0x9a>
    switch (cache[0]) {
 23f3c42:	7803      	ldrb	r3, [r0, #0]
 23f3c44:	2bc0      	cmp	r3, #192	; 0xc0
 23f3c46:	d044      	beq.n	23f3cd2 <_ZN9ExFatFile7syncDirEv+0xae>
 23f3c48:	2bc1      	cmp	r3, #193	; 0xc1
 23f3c4a:	d021      	beq.n	23f3c90 <_ZN9ExFatFile7syncDirEv+0x6c>
 23f3c4c:	2b85      	cmp	r3, #133	; 0x85
 23f3c4e:	d136      	bne.n	23f3cbe <_ZN9ExFatFile7syncDirEv+0x9a>
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
 23f3c50:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 23f3c54:	f003 0337 	and.w	r3, r3, #55	; 0x37
 23f3c58:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
 23f3c5a:	f8d8 3000 	ldr.w	r3, [r8]
 23f3c5e:	b183      	cbz	r3, 23f3c82 <_ZN9ExFatFile7syncDirEv+0x5e>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
 23f3c60:	f10d 0203 	add.w	r2, sp, #3
 23f3c64:	f10d 0106 	add.w	r1, sp, #6
 23f3c68:	a801      	add	r0, sp, #4
 23f3c6a:	4798      	blx	r3
          df->modifyTimeMs = ms10;
 23f3c6c:	f89d 3003 	ldrb.w	r3, [sp, #3]
          setLe16(df->modifyTime, time);
 23f3c70:	f8bd 2006 	ldrh.w	r2, [sp, #6]
          df->modifyTimeMs = ms10;
 23f3c74:	756b      	strb	r3, [r5, #21]
          setLe16(df->modifyDate, date);
 23f3c76:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
 23f3c7a:	81aa      	strh	r2, [r5, #12]
 23f3c7c:	81eb      	strh	r3, [r5, #14]
 23f3c7e:	822a      	strh	r2, [r5, #16]
 23f3c80:	826b      	strh	r3, [r5, #18]
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
 23f3c82:	6a22      	ldr	r2, [r4, #32]
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
 23f3c84:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
 23f3c88:	f043 0301 	orr.w	r3, r3, #1
 23f3c8c:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
      default:
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
 23f3c90:	4631      	mov	r1, r6
 23f3c92:	4628      	mov	r0, r5
 23f3c94:	f7ff ff0b 	bl	23f3aae <_ZL16exFatDirChecksumPKht>
  for (uint8_t is = 0; is <= m_setCount; is++) {
 23f3c98:	3701      	adds	r7, #1
 23f3c9a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 23f3c9e:	b2fb      	uxtb	r3, r7
 23f3ca0:	429a      	cmp	r2, r3
    checksum = exFatDirChecksum(cache, checksum);
 23f3ca2:	4606      	mov	r6, r0
  for (uint8_t is = 0; is <= m_setCount; is++) {
 23f3ca4:	d2c5      	bcs.n	23f3c32 <_ZN9ExFatFile7syncDirEv+0xe>
  }
  df = reinterpret_cast<DirFile_t*>(
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
 23f3ca6:	2201      	movs	r2, #1
 23f3ca8:	6a20      	ldr	r0, [r4, #32]
 23f3caa:	f104 0124 	add.w	r1, r4, #36	; 0x24
 23f3cae:	f000 fb81 	bl	23f43b4 <_ZN14ExFatPartition8dirCacheEPK8DirPos_th>
  if (!df) {
 23f3cb2:	b120      	cbz	r0, 23f3cbe <_ZN9ExFatFile7syncDirEv+0x9a>
 23f3cb4:	8046      	strh	r6, [r0, #2]
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
 23f3cb6:	6a20      	ldr	r0, [r4, #32]
 23f3cb8:	f7ff ff10 	bl	23f3adc <_ZN14ExFatPartition9cacheSyncEv>
 23f3cbc:	b930      	cbnz	r0, 23f3ccc <_ZN9ExFatFile7syncDirEv+0xa8>
  }
  return true;

fail:
  m_error |= WRITE_ERROR;
  return false;
 23f3cbe:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
 23f3cc0:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 23f3cc4:	f043 0301 	orr.w	r3, r3, #1
 23f3cc8:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
 23f3ccc:	b002      	add	sp, #8
 23f3cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (isContiguous()) {
 23f3cd2:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
 23f3cd6:	7843      	ldrb	r3, [r0, #1]
        if (isContiguous()) {
 23f3cd8:	0652      	lsls	r2, r2, #25
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
 23f3cda:	bf4c      	ite	mi
 23f3cdc:	f043 0302 	orrmi.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
 23f3ce0:	f003 03fd 	andpl.w	r3, r3, #253	; 0xfd
 23f3ce4:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
 23f3ce6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
  *reinterpret_cast<uint64_t*>(dst) = src;
 23f3cea:	e9c0 2302 	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
 23f3cee:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
 23f3cf0:	6143      	str	r3, [r0, #20]
        setLe64(ds->dataLength, m_dataLength);
 23f3cf2:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
  *reinterpret_cast<uint64_t*>(dst) = src;
 23f3cf6:	e9c0 2306 	strd	r2, r3, [r0, #24]
 23f3cfa:	e7c2      	b.n	23f3c82 <_ZN9ExFatFile7syncDirEv+0x5e>
 23f3cfc:	1007ae98 	.word	0x1007ae98

023f3d00 <_ZN9ExFatFile4syncEv>:
bool ExFatFile::sync() {
 23f3d00:	b510      	push	{r4, lr}
  if (!isOpen()) {
 23f3d02:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::sync() {
 23f3d06:	4604      	mov	r4, r0
  if (!isOpen()) {
 23f3d08:	b90b      	cbnz	r3, 23f3d0e <_ZN9ExFatFile4syncEv+0xe>
    return true;
 23f3d0a:	2001      	movs	r0, #1
}
 23f3d0c:	bd10      	pop	{r4, pc}
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
 23f3d0e:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
 23f3d12:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 23f3d16:	2a00      	cmp	r2, #0
 23f3d18:	da07      	bge.n	23f3d2a <_ZN9ExFatFile4syncEv+0x2a>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
 23f3d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 23f3d1e:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
 23f3d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return syncDir();
 23f3d26:	f7ff bf7d 	b.w	23f3c24 <_ZN9ExFatFile7syncDirEv>
  if (!m_vol->cacheSync()) {
 23f3d2a:	6a00      	ldr	r0, [r0, #32]
 23f3d2c:	f7ff fed6 	bl	23f3adc <_ZN14ExFatPartition9cacheSyncEv>
 23f3d30:	2800      	cmp	r0, #0
 23f3d32:	d1ea      	bne.n	23f3d0a <_ZN9ExFatFile4syncEv+0xa>
  m_error |= WRITE_ERROR;
 23f3d34:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 23f3d38:	f043 0301 	orr.w	r3, r3, #1
 23f3d3c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return false;
 23f3d40:	e7e4      	b.n	23f3d0c <_ZN9ExFatFile4syncEv+0xc>

023f3d42 <_ZN9ExFatFile13addDirClusterEv>:
bool ExFatFile::addDirCluster() {
 23f3d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
 23f3d44:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
 23f3d48:	4604      	mov	r4, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
 23f3d4a:	065a      	lsls	r2, r3, #25
 23f3d4c:	d52e      	bpl.n	23f3dac <_ZN9ExFatFile13addDirClusterEv+0x6a>
 23f3d4e:	6a00      	ldr	r0, [r0, #32]
 23f3d50:	f000 fc58 	bl	23f4604 <_ZN14ExFatPartition10rootLengthEv>
  uint32_t bytesPerCluster() const { return m_bytesPerCluster; }
 23f3d54:	6a23      	ldr	r3, [r4, #32]
  dl += m_vol->bytesPerCluster();
 23f3d56:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 23f3d5a:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
 23f3d5c:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 23f3d60:	d247      	bcs.n	23f3df2 <_ZN9ExFatFile13addDirClusterEv+0xb0>
  if (!addCluster()) {
 23f3d62:	4620      	mov	r0, r4
 23f3d64:	f7ff fecc 	bl	23f3b00 <_ZN9ExFatFile10addClusterEv>
 23f3d68:	2800      	cmp	r0, #0
 23f3d6a:	d042      	beq.n	23f3df2 <_ZN9ExFatFile13addDirClusterEv+0xb0>
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
 23f3d6c:	2600      	movs	r6, #0
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
 23f3d6e:	2701      	movs	r7, #1
  sector = m_vol->clusterStartSector(m_curCluster);
 23f3d70:	6a23      	ldr	r3, [r4, #32]
           ((cluster - 2) << m_sectorsPerClusterShift);
 23f3d72:	69a5      	ldr	r5, [r4, #24]
 23f3d74:	f893 2445 	ldrb.w	r2, [r3, #1093]	; 0x445
 23f3d78:	3d02      	subs	r5, #2
 23f3d7a:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 23f3d7e:	4095      	lsls	r5, r2
 23f3d80:	441d      	add	r5, r3
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
 23f3d82:	6a20      	ldr	r0, [r4, #32]
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
 23f3d84:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
 23f3d88:	fa07 f303 	lsl.w	r3, r7, r3
 23f3d8c:	42b3      	cmp	r3, r6
 23f3d8e:	d90f      	bls.n	23f3db0 <_ZN9ExFatFile13addDirClusterEv+0x6e>
    return m_dataCache.prepare(sector, option);
 23f3d90:	2205      	movs	r2, #5
 23f3d92:	19a9      	adds	r1, r5, r6
 23f3d94:	f500 7004 	add.w	r0, r0, #528	; 0x210
 23f3d98:	f000 feef 	bl	23f4b7a <_ZN7FsCache7prepareEmh>
    if (!cache) {
 23f3d9c:	b348      	cbz	r0, 23f3df2 <_ZN9ExFatFile13addDirClusterEv+0xb0>
    memset(cache, 0, m_vol->bytesPerSector());
 23f3d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 23f3da2:	2100      	movs	r1, #0
 23f3da4:	f008 fb1f 	bl	23fc3e6 <memset>
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
 23f3da8:	3601      	adds	r6, #1
 23f3daa:	e7ea      	b.n	23f3d82 <_ZN9ExFatFile13addDirClusterEv+0x40>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
 23f3dac:	6880      	ldr	r0, [r0, #8]
 23f3dae:	e7d1      	b.n	23f3d54 <_ZN9ExFatFile13addDirClusterEv+0x12>
  if (!isRoot()) {
 23f3db0:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 23f3db4:	065b      	lsls	r3, r3, #25
 23f3db6:	d417      	bmi.n	23f3de8 <_ZN9ExFatFile13addDirClusterEv+0xa6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
 23f3db8:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 23f3dbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 23f3dc0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength += m_vol->bytesPerCluster();
 23f3dc4:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
 23f3dc8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 23f3dcc:	185b      	adds	r3, r3, r1
 23f3dce:	f142 0200 	adc.w	r2, r2, #0
 23f3dd2:	e9c4 3202 	strd	r3, r2, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
 23f3dd6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 23f3dda:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
 23f3dde:	185b      	adds	r3, r3, r1
 23f3de0:	f142 0200 	adc.w	r2, r2, #0
 23f3de4:	e9c4 3204 	strd	r3, r2, [r4, #16]
  return sync();
 23f3de8:	4620      	mov	r0, r4
}
 23f3dea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return sync();
 23f3dee:	f7ff bf87 	b.w	23f3d00 <_ZN9ExFatFile4syncEv>
}
 23f3df2:	2000      	movs	r0, #0
 23f3df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f3df6 <_ZN9ExFatFile5mkdirEPS_P8ExName_t>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
 23f3df6:	b510      	push	{r4, lr}
  if (!parent->isDir()) {
 23f3df8:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
 23f3dfc:	4604      	mov	r4, r0
  if (!parent->isDir()) {
 23f3dfe:	f013 0f50 	tst.w	r3, #80	; 0x50
 23f3e02:	d01a      	beq.n	23f3e3a <_ZN9ExFatFile5mkdirEPS_P8ExName_t+0x44>
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
 23f3e04:	f640 2302 	movw	r3, #2562	; 0xa02
 23f3e08:	f7ff fc46 	bl	23f3698 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti>
 23f3e0c:	b1a8      	cbz	r0, 23f3e3a <_ZN9ExFatFile5mkdirEPS_P8ExName_t+0x44>
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
 23f3e0e:	2330      	movs	r3, #48	; 0x30
  if (!addDirCluster()) {
 23f3e10:	4620      	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
 23f3e12:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
 23f3e16:	f7ff ff94 	bl	23f3d42 <_ZN9ExFatFile13addDirClusterEv>
 23f3e1a:	b170      	cbz	r0, 23f3e3a <_ZN9ExFatFile5mkdirEPS_P8ExName_t+0x44>
  m_firstCluster = m_curCluster;
 23f3e1c:	69a3      	ldr	r3, [r4, #24]
  void rewind() { seekSet(0); }
 23f3e1e:	4620      	mov	r0, r4
 23f3e20:	61e3      	str	r3, [r4, #28]
 23f3e22:	2200      	movs	r2, #0
 23f3e24:	2300      	movs	r3, #0
 23f3e26:	f7ff fbc8 	bl	23f35ba <_ZN9ExFatFile7seekSetEy>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
 23f3e2a:	23c1      	movs	r3, #193	; 0xc1
  return sync();
 23f3e2c:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
 23f3e2e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
 23f3e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return sync();
 23f3e36:	f7ff bf63 	b.w	23f3d00 <_ZN9ExFatFile4syncEv>
}
 23f3e3a:	2000      	movs	r0, #0
 23f3e3c:	bd10      	pop	{r4, pc}

023f3e3e <_ZN9ExFatFile5mkdirEPS_PKcb>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
 23f3e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f3e42:	4698      	mov	r8, r3
  ExFatFile() {}
 23f3e44:	2300      	movs	r3, #0
 23f3e46:	b096      	sub	sp, #88	; 0x58
 23f3e48:	9314      	str	r3, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
 23f3e4a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
 23f3e4e:	4605      	mov	r5, r0
 23f3e50:	460c      	mov	r4, r1
 23f3e52:	9201      	str	r2, [sp, #4]
  if (isOpen() || !parent->isDir()) {
 23f3e54:	b11b      	cbz	r3, 23f3e5e <_ZN9ExFatFile5mkdirEPS_PKcb+0x20>
  return false;
 23f3e56:	2000      	movs	r0, #0
}
 23f3e58:	b016      	add	sp, #88	; 0x58
 23f3e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isOpen() || !parent->isDir()) {
 23f3e5e:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 23f3e62:	f013 0f50 	tst.w	r3, #80	; 0x50
 23f3e66:	d0f6      	beq.n	23f3e56 <_ZN9ExFatFile5mkdirEPS_PKcb+0x18>
  if (isDirSeparator(*path)) {
 23f3e68:	7813      	ldrb	r3, [r2, #0]
 23f3e6a:	2b2f      	cmp	r3, #47	; 0x2f
 23f3e6c:	d10d      	bne.n	23f3e8a <_ZN9ExFatFile5mkdirEPS_PKcb+0x4c>
    while (isDirSeparator(*path)) {
 23f3e6e:	9a01      	ldr	r2, [sp, #4]
 23f3e70:	7813      	ldrb	r3, [r2, #0]
 23f3e72:	2b2f      	cmp	r3, #47	; 0x2f
 23f3e74:	d102      	bne.n	23f3e7c <_ZN9ExFatFile5mkdirEPS_PKcb+0x3e>
      path++;
 23f3e76:	3201      	adds	r2, #1
 23f3e78:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
 23f3e7a:	e7f8      	b.n	23f3e6e <_ZN9ExFatFile5mkdirEPS_PKcb+0x30>
    if (!tmpDir.openRoot(parent->m_vol)) {
 23f3e7c:	6a21      	ldr	r1, [r4, #32]
 23f3e7e:	a808      	add	r0, sp, #32
 23f3e80:	f7ff fa72 	bl	23f3368 <_ZN9ExFatFile8openRootEP11ExFatVolume>
 23f3e84:	2800      	cmp	r0, #0
 23f3e86:	d0e6      	beq.n	23f3e56 <_ZN9ExFatFile5mkdirEPS_PKcb+0x18>
    parent = &tmpDir;
 23f3e88:	ac08      	add	r4, sp, #32
    if (!parsePathName(path, &fname, &path)) {
 23f3e8a:	4628      	mov	r0, r5
 23f3e8c:	9901      	ldr	r1, [sp, #4]
 23f3e8e:	ab01      	add	r3, sp, #4
 23f3e90:	aa03      	add	r2, sp, #12
 23f3e92:	f7ff fa7d 	bl	23f3390 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_>
 23f3e96:	2800      	cmp	r0, #0
 23f3e98:	d0dd      	beq.n	23f3e56 <_ZN9ExFatFile5mkdirEPS_PKcb+0x18>
    if (!*path) {
 23f3e9a:	9b01      	ldr	r3, [sp, #4]
 23f3e9c:	781b      	ldrb	r3, [r3, #0]
 23f3e9e:	b323      	cbz	r3, 23f3eea <_ZN9ExFatFile5mkdirEPS_PKcb+0xac>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
 23f3ea0:	2300      	movs	r3, #0
 23f3ea2:	4621      	mov	r1, r4
 23f3ea4:	4628      	mov	r0, r5
 23f3ea6:	aa03      	add	r2, sp, #12
 23f3ea8:	f7ff fbf6 	bl	23f3698 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti>
 23f3eac:	b190      	cbz	r0, 23f3ed4 <_ZN9ExFatFile5mkdirEPS_PKcb+0x96>
      *this = *from;
 23f3eae:	ae08      	add	r6, sp, #32
 23f3eb0:	462a      	mov	r2, r5
 23f3eb2:	4634      	mov	r4, r6
 23f3eb4:	f105 0330 	add.w	r3, r5, #48	; 0x30
 23f3eb8:	4637      	mov	r7, r6
 23f3eba:	6810      	ldr	r0, [r2, #0]
 23f3ebc:	6851      	ldr	r1, [r2, #4]
 23f3ebe:	3208      	adds	r2, #8
 23f3ec0:	c703      	stmia	r7!, {r0, r1}
 23f3ec2:	429a      	cmp	r2, r3
 23f3ec4:	463e      	mov	r6, r7
 23f3ec6:	d1f7      	bne.n	23f3eb8 <_ZN9ExFatFile5mkdirEPS_PKcb+0x7a>
 23f3ec8:	6810      	ldr	r0, [r2, #0]
 23f3eca:	6038      	str	r0, [r7, #0]
    close();
 23f3ecc:	4628      	mov	r0, r5
 23f3ece:	f7ff fa41 	bl	23f3354 <_ZN9ExFatFile5closeEv>
    if (!parsePathName(path, &fname, &path)) {
 23f3ed2:	e7da      	b.n	23f3e8a <_ZN9ExFatFile5mkdirEPS_PKcb+0x4c>
      if (!pFlag || !mkdir(parent, &fname)) {
 23f3ed4:	f1b8 0f00 	cmp.w	r8, #0
 23f3ed8:	d0bd      	beq.n	23f3e56 <_ZN9ExFatFile5mkdirEPS_PKcb+0x18>
 23f3eda:	4621      	mov	r1, r4
 23f3edc:	4628      	mov	r0, r5
 23f3ede:	aa03      	add	r2, sp, #12
 23f3ee0:	f7ff ff89 	bl	23f3df6 <_ZN9ExFatFile5mkdirEPS_P8ExName_t>
 23f3ee4:	2800      	cmp	r0, #0
 23f3ee6:	d1e2      	bne.n	23f3eae <_ZN9ExFatFile5mkdirEPS_PKcb+0x70>
 23f3ee8:	e7b5      	b.n	23f3e56 <_ZN9ExFatFile5mkdirEPS_PKcb+0x18>
  return mkdir(parent, &fname);
 23f3eea:	4621      	mov	r1, r4
 23f3eec:	4628      	mov	r0, r5
 23f3eee:	aa03      	add	r2, sp, #12
 23f3ef0:	f7ff ff81 	bl	23f3df6 <_ZN9ExFatFile5mkdirEPS_P8ExName_t>
 23f3ef4:	e7b0      	b.n	23f3e58 <_ZN9ExFatFile5mkdirEPS_PKcb+0x1a>

023f3ef6 <_ZN9ExFatFile8truncateEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
 23f3ef6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
 23f3ef8:	f890 2033 	ldrb.w	r2, [r0, #51]	; 0x33
 23f3efc:	4604      	mov	r4, r0
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
 23f3efe:	0793      	lsls	r3, r2, #30
 23f3f00:	d402      	bmi.n	23f3f08 <_ZN9ExFatFile8truncateEv+0x12>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
 23f3f02:	2000      	movs	r0, #0
}
 23f3f04:	b003      	add	sp, #12
 23f3f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (m_firstCluster == 0) {
 23f3f08:	69c3      	ldr	r3, [r0, #28]
 23f3f0a:	2b00      	cmp	r3, #0
 23f3f0c:	d056      	beq.n	23f3fbc <_ZN9ExFatFile8truncateEv+0xc6>
  if (isContiguous()) {
 23f3f0e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    if (m_curCluster) {
 23f3f12:	6981      	ldr	r1, [r0, #24]
  if (isContiguous()) {
 23f3f14:	d037      	beq.n	23f3f86 <_ZN9ExFatFile8truncateEv+0x90>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
 23f3f16:	e9d4 2602 	ldrd	r2, r6, [r4, #8]
 23f3f1a:	6a00      	ldr	r0, [r0, #32]
 23f3f1c:	3a01      	subs	r2, #1
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
 23f3f1e:	f890 5445 	ldrb.w	r5, [r0, #1093]	; 0x445
 23f3f22:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
 23f3f26:	3509      	adds	r5, #9
 23f3f28:	b2ed      	uxtb	r5, r5
 23f3f2a:	f1c5 0c20 	rsb	ip, r5, #32
 23f3f2e:	f1a5 0720 	sub.w	r7, r5, #32
 23f3f32:	40ea      	lsrs	r2, r5
 23f3f34:	fa06 fc0c 	lsl.w	ip, r6, ip
 23f3f38:	ea42 020c 	orr.w	r2, r2, ip
 23f3f3c:	fa26 f707 	lsr.w	r7, r6, r7
 23f3f40:	433a      	orrs	r2, r7
 23f3f42:	3201      	adds	r2, #1
    if (m_curCluster) {
 23f3f44:	b1a9      	cbz	r1, 23f3f72 <_ZN9ExFatFile8truncateEv+0x7c>
      nc -= 1 + m_curCluster - m_firstCluster;
 23f3f46:	3b01      	subs	r3, #1
      toFree = m_curCluster + 1;
 23f3f48:	1c4d      	adds	r5, r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
 23f3f4a:	1a5b      	subs	r3, r3, r1
      toFree = m_curCluster + 1;
 23f3f4c:	9501      	str	r5, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
 23f3f4e:	441a      	add	r2, r3
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
 23f3f50:	b992      	cbnz	r2, 23f3f78 <_ZN9ExFatFile8truncateEv+0x82>
  m_dataLength = m_curPosition;
 23f3f52:	e9d4 2300 	ldrd	r2, r3, [r4]
 23f3f56:	e9c4 2302 	strd	r2, r3, [r4, #8]
  m_validLength = m_curPosition;
 23f3f5a:	e9c4 2304 	strd	r2, r3, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
 23f3f5e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  return sync();
 23f3f62:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_DIR_DIRTY;
 23f3f64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 23f3f68:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return sync();
 23f3f6c:	f7ff fec8 	bl	23f3d00 <_ZN9ExFatFile4syncEv>
 23f3f70:	e7c8      	b.n	23f3f04 <_ZN9ExFatFile8truncateEv+0xe>
      toFree = m_firstCluster;
 23f3f72:	9301      	str	r3, [sp, #4]
      m_firstCluster = 0;
 23f3f74:	61e1      	str	r1, [r4, #28]
 23f3f76:	e7eb      	b.n	23f3f50 <_ZN9ExFatFile8truncateEv+0x5a>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
 23f3f78:	2300      	movs	r3, #0
 23f3f7a:	9901      	ldr	r1, [sp, #4]
 23f3f7c:	f000 f9ca 	bl	23f4314 <_ZN14ExFatPartition12bitmapModifyEmmb>
      if (!m_vol->freeChain(toFree)) {
 23f3f80:	2800      	cmp	r0, #0
 23f3f82:	d1e6      	bne.n	23f3f52 <_ZN9ExFatFile8truncateEv+0x5c>
 23f3f84:	e7bd      	b.n	23f3f02 <_ZN9ExFatFile8truncateEv+0xc>
    if (m_curCluster) {
 23f3f86:	b1b1      	cbz	r1, 23f3fb6 <_ZN9ExFatFile8truncateEv+0xc0>
      toFree = 0;
 23f3f88:	9201      	str	r2, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
 23f3f8a:	6a00      	ldr	r0, [r0, #32]
 23f3f8c:	aa01      	add	r2, sp, #4
 23f3f8e:	f000 fa2b 	bl	23f43e8 <_ZN14ExFatPartition6fatGetEmPm>
      if (fg < 0) {
 23f3f92:	2800      	cmp	r0, #0
 23f3f94:	dbb5      	blt.n	23f3f02 <_ZN9ExFatFile8truncateEv+0xc>
      if (fg) {
 23f3f96:	d007      	beq.n	23f3fa8 <_ZN9ExFatFile8truncateEv+0xb2>
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
 23f3f98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f3f9c:	69a1      	ldr	r1, [r4, #24]
 23f3f9e:	6a20      	ldr	r0, [r4, #32]
 23f3fa0:	f000 fa75 	bl	23f448e <_ZN14ExFatPartition6fatPutEmm>
 23f3fa4:	2800      	cmp	r0, #0
 23f3fa6:	d0ac      	beq.n	23f3f02 <_ZN9ExFatFile8truncateEv+0xc>
    if (toFree) {
 23f3fa8:	9901      	ldr	r1, [sp, #4]
 23f3faa:	2900      	cmp	r1, #0
 23f3fac:	d0d1      	beq.n	23f3f52 <_ZN9ExFatFile8truncateEv+0x5c>
      if (!m_vol->freeChain(toFree)) {
 23f3fae:	6a20      	ldr	r0, [r4, #32]
 23f3fb0:	f000 fa8a 	bl	23f44c8 <_ZN14ExFatPartition9freeChainEm>
 23f3fb4:	e7e4      	b.n	23f3f80 <_ZN9ExFatFile8truncateEv+0x8a>
      toFree = m_firstCluster;
 23f3fb6:	9301      	str	r3, [sp, #4]
      m_firstCluster = 0;
 23f3fb8:	61c1      	str	r1, [r0, #28]
 23f3fba:	e7f5      	b.n	23f3fa8 <_ZN9ExFatFile8truncateEv+0xb2>
    return true;
 23f3fbc:	2001      	movs	r0, #1
 23f3fbe:	e7a1      	b.n	23f3f04 <_ZN9ExFatFile8truncateEv+0xe>

023f3fc0 <_ZN9ExFatFile5writeEPKvj>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
 23f3fc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f3fc4:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 23f3fc8:	4688      	mov	r8, r1

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
 23f3fca:	0799      	lsls	r1, r3, #30
size_t ExFatFile::write(const void* buf, size_t nbyte) {
 23f3fcc:	4604      	mov	r4, r0
 23f3fce:	4691      	mov	r9, r2
  if (!isWritable()) {
 23f3fd0:	d566      	bpl.n	23f40a0 <_ZN9ExFatFile5writeEPKvj+0xe0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
 23f3fd2:	071a      	lsls	r2, r3, #28
 23f3fd4:	d45e      	bmi.n	23f4094 <_ZN9ExFatFile5writeEPKvj+0xd4>
size_t ExFatFile::write(const void* buf, size_t nbyte) {
 23f3fd6:	464f      	mov	r7, r9
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
 23f3fd8:	f04f 0b01 	mov.w	fp, #1
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f3fdc:	f104 0a18 	add.w	sl, r4, #24
    clusterOffset = m_curPosition & m_vol->clusterMask();
 23f3fe0:	e9d4 5300 	ldrd	r5, r3, [r4]
  while (toWrite) {
 23f3fe4:	2f00      	cmp	r7, #0
 23f3fe6:	f000 80d9 	beq.w	23f419c <_ZN9ExFatFile5writeEPKvj+0x1dc>
    clusterOffset = m_curPosition & m_vol->clusterMask();
 23f3fea:	6a20      	ldr	r0, [r4, #32]
 23f3fec:	f8d0 1438 	ldr.w	r1, [r0, #1080]	; 0x438
 23f3ff0:	400d      	ands	r5, r1
    sectorOffset = clusterOffset & m_vol->sectorMask();
 23f3ff2:	f3c5 0608 	ubfx	r6, r5, #0, #9
    if (clusterOffset == 0) {
 23f3ff6:	bb2d      	cbnz	r5, 23f4044 <_ZN9ExFatFile5writeEPKvj+0x84>
      if (m_curCluster != 0) {
 23f3ff8:	69a1      	ldr	r1, [r4, #24]
 23f3ffa:	2900      	cmp	r1, #0
 23f3ffc:	d063      	beq.n	23f40c6 <_ZN9ExFatFile5writeEPKvj+0x106>
        if (isContiguous()) {
 23f3ffe:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 23f4002:	065b      	lsls	r3, r3, #25
 23f4004:	d558      	bpl.n	23f40b8 <_ZN9ExFatFile5writeEPKvj+0xf8>
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
 23f4006:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 23f400a:	f890 0445 	ldrb.w	r0, [r0, #1093]	; 0x445
 23f400e:	3b01      	subs	r3, #1
 23f4010:	f100 0009 	add.w	r0, r0, #9
 23f4014:	b2c0      	uxtb	r0, r0
 23f4016:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
 23f401a:	f1c0 0e20 	rsb	lr, r0, #32
 23f401e:	fa02 fe0e 	lsl.w	lr, r2, lr
 23f4022:	f1a0 0c20 	sub.w	ip, r0, #32
 23f4026:	40c3      	lsrs	r3, r0
 23f4028:	fa22 fc0c 	lsr.w	ip, r2, ip
 23f402c:	ea43 030e 	orr.w	r3, r3, lr
 23f4030:	69e2      	ldr	r2, [r4, #28]
 23f4032:	ea43 030c 	orr.w	r3, r3, ip
 23f4036:	4413      	add	r3, r2
          if (m_curCluster < lc) {
 23f4038:	428b      	cmp	r3, r1
 23f403a:	d83a      	bhi.n	23f40b2 <_ZN9ExFatFile5writeEPKvj+0xf2>
          if (!addCluster()) {
 23f403c:	4620      	mov	r0, r4
 23f403e:	f7ff fd5f 	bl	23f3b00 <_ZN9ExFatFile10addClusterEv>
 23f4042:	b368      	cbz	r0, 23f40a0 <_ZN9ExFatFile5writeEPKvj+0xe0>
    sector = m_vol->clusterStartSector(m_curCluster) +
 23f4044:	6a20      	ldr	r0, [r4, #32]
           ((cluster - 2) << m_sectorsPerClusterShift);
 23f4046:	69a1      	ldr	r1, [r4, #24]
 23f4048:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
 23f404c:	3902      	subs	r1, #2
 23f404e:	4091      	lsls	r1, r2
             (clusterOffset >> m_vol->bytesPerSectorShift());
 23f4050:	ea4f 2e55 	mov.w	lr, r5, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
 23f4054:	eb01 2555 	add.w	r5, r1, r5, lsr #9
 23f4058:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
 23f405c:	4429      	add	r1, r5
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
 23f405e:	2e00      	cmp	r6, #0
 23f4060:	d13d      	bne.n	23f40de <_ZN9ExFatFile5writeEPKvj+0x11e>
 23f4062:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 23f4066:	d33a      	bcc.n	23f40de <_ZN9ExFatFile5writeEPKvj+0x11e>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2 * m_vol->bytesPerSector()) {
 23f4068:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 23f406c:	f8d0 c218 	ldr.w	ip, [r0, #536]	; 0x218
 23f4070:	d279      	bcs.n	23f4166 <_ZN9ExFatFile5writeEPKvj+0x1a6>
    if (isCached(sector)) {
 23f4072:	4561      	cmp	r1, ip
    m_sector = 0XFFFFFFFF;
 23f4074:	bf02      	ittt	eq
 23f4076:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
 23f407a:	f880 6210 	strbeq.w	r6, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
 23f407e:	f8c0 3218 	streq.w	r3, [r0, #536]	; 0x218
    return m_blockDev->writeSector(sector, src);
 23f4082:	4642      	mov	r2, r8
 23f4084:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 23f4088:	f7fe fecb 	bl	23f2e22 <_ZN9SdSpiCard11writeSectorEmPKh>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
 23f408c:	b140      	cbz	r0, 23f40a0 <_ZN9ExFatFile5writeEPKvj+0xe0>
      n = m_vol->bytesPerSector();
 23f408e:	f44f 7500 	mov.w	r5, #512	; 0x200
 23f4092:	e04d      	b.n	23f4130 <_ZN9ExFatFile5writeEPKvj+0x170>
    if (!seekSet(m_validLength)) {
 23f4094:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 23f4098:	f7ff fa8f 	bl	23f35ba <_ZN9ExFatFile7seekSetEy>
 23f409c:	2800      	cmp	r0, #0
 23f409e:	d19a      	bne.n	23f3fd6 <_ZN9ExFatFile5writeEPKvj+0x16>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 23f40a0:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
 23f40a4:	f04f 0900 	mov.w	r9, #0
  m_error |= WRITE_ERROR;
 23f40a8:	f043 0301 	orr.w	r3, r3, #1
 23f40ac:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return 0;
 23f40b0:	e086      	b.n	23f41c0 <_ZN9ExFatFile5writeEPKvj+0x200>
            m_curCluster++;
 23f40b2:	3101      	adds	r1, #1
 23f40b4:	61a1      	str	r1, [r4, #24]
        if (fg == 0) {
 23f40b6:	e7c5      	b.n	23f4044 <_ZN9ExFatFile5writeEPKvj+0x84>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f40b8:	4652      	mov	r2, sl
 23f40ba:	f000 f995 	bl	23f43e8 <_ZN14ExFatPartition6fatGetEmPm>
          if (fg < 0) {
 23f40be:	2800      	cmp	r0, #0
 23f40c0:	dbee      	blt.n	23f40a0 <_ZN9ExFatFile5writeEPKvj+0xe0>
        if (fg == 0) {
 23f40c2:	d0bb      	beq.n	23f403c <_ZN9ExFatFile5writeEPKvj+0x7c>
 23f40c4:	e7be      	b.n	23f4044 <_ZN9ExFatFile5writeEPKvj+0x84>
        if (m_firstCluster == 0) {
 23f40c6:	69e3      	ldr	r3, [r4, #28]
 23f40c8:	b93b      	cbnz	r3, 23f40da <_ZN9ExFatFile5writeEPKvj+0x11a>
          if (!addCluster()) {
 23f40ca:	4620      	mov	r0, r4
 23f40cc:	f7ff fd18 	bl	23f3b00 <_ZN9ExFatFile10addClusterEv>
 23f40d0:	2800      	cmp	r0, #0
 23f40d2:	d0e5      	beq.n	23f40a0 <_ZN9ExFatFile5writeEPKvj+0xe0>
          m_firstCluster = m_curCluster;
 23f40d4:	69a3      	ldr	r3, [r4, #24]
 23f40d6:	61e3      	str	r3, [r4, #28]
 23f40d8:	e7b4      	b.n	23f4044 <_ZN9ExFatFile5writeEPKvj+0x84>
          m_curCluster = m_firstCluster;
 23f40da:	61a3      	str	r3, [r4, #24]
 23f40dc:	e7b2      	b.n	23f4044 <_ZN9ExFatFile5writeEPKvj+0x84>
      n = m_vol->bytesPerSector() - sectorOffset;
 23f40de:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
      if (n > toWrite) {
 23f40e2:	42bd      	cmp	r5, r7
 23f40e4:	bf28      	it	cs
 23f40e6:	463d      	movcs	r5, r7
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
 23f40e8:	2e00      	cmp	r6, #0
 23f40ea:	d13a      	bne.n	23f4162 <_ZN9ExFatFile5writeEPKvj+0x1a2>
 23f40ec:	6963      	ldr	r3, [r4, #20]
 23f40ee:	6862      	ldr	r2, [r4, #4]
 23f40f0:	9301      	str	r3, [sp, #4]
 23f40f2:	6823      	ldr	r3, [r4, #0]
 23f40f4:	469c      	mov	ip, r3
 23f40f6:	6923      	ldr	r3, [r4, #16]
 23f40f8:	459c      	cmp	ip, r3
 23f40fa:	9b01      	ldr	r3, [sp, #4]
 23f40fc:	eb72 0303 	sbcs.w	r3, r2, r3
 23f4100:	d32f      	bcc.n	23f4162 <_ZN9ExFatFile5writeEPKvj+0x1a2>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
 23f4102:	2205      	movs	r2, #5
    return m_dataCache.prepare(sector, option);
 23f4104:	f500 7004 	add.w	r0, r0, #528	; 0x210
 23f4108:	f000 fd37 	bl	23f4b7a <_ZN7FsCache7prepareEmh>
      if (!cache) {
 23f410c:	2800      	cmp	r0, #0
 23f410e:	d0c7      	beq.n	23f40a0 <_ZN9ExFatFile5writeEPKvj+0xe0>
      memcpy(dst, src, n);
 23f4110:	4430      	add	r0, r6
 23f4112:	462a      	mov	r2, r5
 23f4114:	4641      	mov	r1, r8
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
 23f4116:	442e      	add	r6, r5
      memcpy(dst, src, n);
 23f4118:	f008 f958 	bl	23fc3cc <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
 23f411c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23f4120:	d106      	bne.n	23f4130 <_ZN9ExFatFile5writeEPKvj+0x170>
  bool dataCacheSync() { return m_dataCache.sync(); }
 23f4122:	6a20      	ldr	r0, [r4, #32]
 23f4124:	f500 7004 	add.w	r0, r0, #528	; 0x210
 23f4128:	f000 fd01 	bl	23f4b2e <_ZN7FsCache4syncEv>
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
 23f412c:	2800      	cmp	r0, #0
 23f412e:	d0b7      	beq.n	23f40a0 <_ZN9ExFatFile5writeEPKvj+0xe0>
    m_curPosition += n;
 23f4130:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
 23f4134:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
 23f4138:	18eb      	adds	r3, r5, r3
 23f413a:	f142 0200 	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
 23f413e:	4298      	cmp	r0, r3
 23f4140:	4191      	sbcs	r1, r2
    m_curPosition += n;
 23f4142:	e9c4 3200 	strd	r3, r2, [r4]
    src += n;
 23f4146:	44a8      	add	r8, r5
    toWrite -= n;
 23f4148:	eba7 0705 	sub.w	r7, r7, r5
    if (m_curPosition > m_validLength) {
 23f414c:	f4bf af48 	bcs.w	23f3fe0 <_ZN9ExFatFile5writeEPKvj+0x20>
      m_flags |= FILE_FLAG_DIR_DIRTY;
 23f4150:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
 23f4154:	e9c4 3204 	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
 23f4158:	f061 017f 	orn	r1, r1, #127	; 0x7f
 23f415c:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
 23f4160:	e73e      	b.n	23f3fe0 <_ZN9ExFatFile5writeEPKvj+0x20>
        cacheOption = FsCache::CACHE_FOR_WRITE;
 23f4162:	2201      	movs	r2, #1
 23f4164:	e7ce      	b.n	23f4104 <_ZN9ExFatFile5writeEPKvj+0x144>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
 23f4166:	fa0b f302 	lsl.w	r3, fp, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
 23f416a:	0a7d      	lsrs	r5, r7, #9
                       (clusterOffset >> m_vol->bytesPerSectorShift());
 23f416c:	eba3 030e 	sub.w	r3, r3, lr
 23f4170:	42ab      	cmp	r3, r5
 23f4172:	bf28      	it	cs
 23f4174:	462b      	movcs	r3, r5
    return sector <= m_sector && m_sector < (sector + count);
 23f4176:	4561      	cmp	r1, ip
      n = ns << m_vol->bytesPerSectorShift();
 23f4178:	ea4f 2543 	mov.w	r5, r3, lsl #9
 23f417c:	d808      	bhi.n	23f4190 <_ZN9ExFatFile5writeEPKvj+0x1d0>
 23f417e:	18ca      	adds	r2, r1, r3
 23f4180:	4562      	cmp	r2, ip
    m_sector = 0XFFFFFFFF;
 23f4182:	bf82      	ittt	hi
 23f4184:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
 23f4188:	f880 6210 	strbhi.w	r6, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
 23f418c:	f8c0 2218 	strhi.w	r2, [r0, #536]	; 0x218
    return m_blockDev->writeSectors(sector, src, count);
 23f4190:	4642      	mov	r2, r8
 23f4192:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 23f4196:	f7fe fe16 	bl	23f2dc6 <_ZN9SdSpiCard12writeSectorsEmPKhj>
 23f419a:	e7c7      	b.n	23f412c <_ZN9ExFatFile5writeEPKvj+0x16c>
  if (m_curPosition > m_dataLength) {
 23f419c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 23f41a0:	42a9      	cmp	r1, r5
 23f41a2:	419a      	sbcs	r2, r3
 23f41a4:	d208      	bcs.n	23f41b8 <_ZN9ExFatFile5writeEPKvj+0x1f8>
    m_dataLength = m_curPosition;
 23f41a6:	e9c4 5302 	strd	r5, r3, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
 23f41aa:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 23f41ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 23f41b2:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 23f41b6:	e003      	b.n	23f41c0 <_ZN9ExFatFile5writeEPKvj+0x200>
  } else if (FsDateTime::callback) {
 23f41b8:	4b03      	ldr	r3, [pc, #12]	; (23f41c8 <_ZN9ExFatFile5writeEPKvj+0x208>)
 23f41ba:	681b      	ldr	r3, [r3, #0]
 23f41bc:	2b00      	cmp	r3, #0
 23f41be:	d1f4      	bne.n	23f41aa <_ZN9ExFatFile5writeEPKvj+0x1ea>
}
 23f41c0:	4648      	mov	r0, r9
 23f41c2:	b003      	add	sp, #12
 23f41c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f41c8:	1007ae98 	.word	0x1007ae98

023f41cc <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
 23f41cc:	b570      	push	{r4, r5, r6, lr}
  bool atEnd() { return next == end; }
 23f41ce:	6895      	ldr	r5, [r2, #8]
 23f41d0:	f101 041e 	add.w	r4, r1, #30
 23f41d4:	6853      	ldr	r3, [r2, #4]
  return *reinterpret_cast<const uint16_t*>(src);
 23f41d6:	f831 0f02 	ldrh.w	r0, [r1, #2]!
  for (uint8_t i = 0; i < 15; i++) {
    uint16_t u = getLe16(dirName->unicode + 2 * i);
    if (fname->atEnd()) {
 23f41da:	429d      	cmp	r5, r3
 23f41dc:	d103      	bne.n	23f41e6 <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t+0x1a>
      return u == 0;
 23f41de:	fab0 f080 	clz	r0, r0
 23f41e2:	0940      	lsrs	r0, r0, #5
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
}
 23f41e4:	bd70      	pop	{r4, r5, r6, pc}
  char getch() { return atEnd() ? 0 : *next++; }
 23f41e6:	1c5e      	adds	r6, r3, #1
 23f41e8:	6056      	str	r6, [r2, #4]
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
 23f41ea:	287e      	cmp	r0, #126	; 0x7e
 23f41ec:	781b      	ldrb	r3, [r3, #0]
 23f41ee:	d813      	bhi.n	23f4218 <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t+0x4c>
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
 23f41f0:	f1a3 0661 	sub.w	r6, r3, #97	; 0x61
 23f41f4:	2e19      	cmp	r6, #25
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
 23f41f6:	b2c0      	uxtb	r0, r0
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
 23f41f8:	bf98      	it	ls
 23f41fa:	3b20      	subls	r3, #32
 23f41fc:	f1a0 0661 	sub.w	r6, r0, #97	; 0x61
 23f4200:	bf98      	it	ls
 23f4202:	b2db      	uxtbls	r3, r3
 23f4204:	2e19      	cmp	r6, #25
 23f4206:	bf9c      	itt	ls
 23f4208:	3820      	subls	r0, #32
 23f420a:	b2c0      	uxtbls	r0, r0
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
 23f420c:	4298      	cmp	r0, r3
 23f420e:	d103      	bne.n	23f4218 <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t+0x4c>
  for (uint8_t i = 0; i < 15; i++) {
 23f4210:	42a1      	cmp	r1, r4
 23f4212:	d1df      	bne.n	23f41d4 <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t+0x8>
  return true;
 23f4214:	2001      	movs	r0, #1
 23f4216:	e7e5      	b.n	23f41e4 <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t+0x18>
      return false;
 23f4218:	2000      	movs	r0, #0
 23f421a:	e7e3      	b.n	23f41e4 <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t+0x18>

023f421c <_ZN9ExFatFile8hashNameEP8ExName_t>:
fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
 23f421c:	b530      	push	{r4, r5, lr}
  uint16_t hash = 0;
 23f421e:	2400      	movs	r4, #0
  void reset() { next = begin; }
 23f4220:	680d      	ldr	r5, [r1, #0]
  bool atEnd() { return next == end; }
 23f4222:	6888      	ldr	r0, [r1, #8]
  void reset() { next = begin; }
 23f4224:	604d      	str	r5, [r1, #4]
  bool atEnd() { return next == end; }
 23f4226:	684b      	ldr	r3, [r1, #4]
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
  }
#else   // USE_UTF8_LONG_NAMES
  while (!fname->atEnd()) {
 23f4228:	4283      	cmp	r3, r0
 23f422a:	d015      	beq.n	23f4258 <_ZN9ExFatFile8hashNameEP8ExName_t+0x3c>
  char getch() { return atEnd() ? 0 : *next++; }
 23f422c:	1c5a      	adds	r2, r3, #1
 23f422e:	604a      	str	r2, [r1, #4]
 23f4230:	781a      	ldrb	r2, [r3, #0]
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
 23f4232:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 23f4236:	2b19      	cmp	r3, #25
 23f4238:	bf98      	it	ls
 23f423a:	3a20      	subls	r2, #32
  hash = ((hash << 15) | (hash >> 1)) + u;
 23f423c:	ea4f 0354 	mov.w	r3, r4, lsr #1
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
 23f4240:	bf98      	it	ls
 23f4242:	b2d2      	uxtbls	r2, r2
  hash = ((hash << 15) | (hash >> 1)) + u;
 23f4244:	ea43 33c4 	orr.w	r3, r3, r4, lsl #15
 23f4248:	4413      	add	r3, r2
 23f424a:	b29a      	uxth	r2, r3
  hash = ((hash << 15) | (hash >> 1));
 23f424c:	f3c3 034e 	ubfx	r3, r3, #1, #15
 23f4250:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
 23f4254:	b29c      	uxth	r4, r3
  while (!fname->atEnd()) {
 23f4256:	e7e6      	b.n	23f4226 <_ZN9ExFatFile8hashNameEP8ExName_t+0xa>
    // Convert to byte for smaller exFatHash.
    char c = fname->getch();
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
 23f4258:	1b40      	subs	r0, r0, r5
 23f425a:	60c8      	str	r0, [r1, #12]
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
 23f425c:	3801      	subs	r0, #1
  }
  return true;

fail:
  return false;
}
 23f425e:	28fe      	cmp	r0, #254	; 0xfe
 23f4260:	bf8c      	ite	hi
 23f4262:	2000      	movhi	r0, #0
 23f4264:	2001      	movls	r0, #1
  fname->nameHash = hash;
 23f4266:	820c      	strh	r4, [r1, #16]
}
 23f4268:	bd30      	pop	{r4, r5, pc}

023f426a <_ZN14ExFatPartition10bitmapFindEmm>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
 23f426a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f426e:	4607      	mov	r7, r0
 23f4270:	4693      	mov	fp, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
 23f4272:	468a      	mov	sl, r1
 23f4274:	b369      	cbz	r1, 23f42d2 <_ZN14ExFatPartition10bitmapFindEmm+0x68>
 23f4276:	1e8d      	subs	r5, r1, #2
  if (start >= m_clusterCount) {
 23f4278:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  const uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
 23f427c:	2401      	movs	r4, #1
    start = 0;
 23f427e:	42ab      	cmp	r3, r5
 23f4280:	bf98      	it	ls
 23f4282:	2500      	movls	r5, #0
  uint32_t bgnAlloc = start;
 23f4284:	46a8      	mov	r8, r5
  uint32_t endAlloc = start;
 23f4286:	462e      	mov	r6, r5
  uint8_t mask = 1 << (start & 7);
 23f4288:	f005 0307 	and.w	r3, r5, #7
 23f428c:	409c      	lsls	r4, r3
  size_t i = (start >> 3) & (sectorSize - 1);
 23f428e:	f3c5 09c8 	ubfx	r9, r5, #3, #9
  uint8_t mask = 1 << (start & 7);
 23f4292:	b2e4      	uxtb	r4, r4
  while (true) {
    uint32_t sector =
 23f4294:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
 23f4298:	2200      	movs	r2, #0
 23f429a:	4638      	mov	r0, r7
 23f429c:	eb01 3116 	add.w	r1, r1, r6, lsr #12
 23f42a0:	f000 fc6b 	bl	23f4b7a <_ZN7FsCache7prepareEmh>
        m_clusterHeapStartSector + (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
 23f42a4:	b198      	cbz	r0, 23f42ce <_ZN14ExFatPartition10bitmapFindEmm+0x64>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
 23f42a6:	f810 3009 	ldrb.w	r3, [r0, r9]
 23f42aa:	4223      	tst	r3, r4
        endAlloc++;
 23f42ac:	f106 0601 	add.w	r6, r6, #1
        if (!(mask & cache[i])) {
 23f42b0:	d112      	bne.n	23f42d8 <_ZN14ExFatPartition10bitmapFindEmm+0x6e>
          if ((endAlloc - bgnAlloc) == count) {
 23f42b2:	eba6 0208 	sub.w	r2, r6, r8
 23f42b6:	455a      	cmp	r2, fp
 23f42b8:	d10f      	bne.n	23f42da <_ZN14ExFatPartition10bitmapFindEmm+0x70>
            if (cluster == 0 && count == 1) {
 23f42ba:	f1ba 0f00 	cmp.w	sl, #0
 23f42be:	d104      	bne.n	23f42ca <_ZN14ExFatPartition10bitmapFindEmm+0x60>
 23f42c0:	f1bb 0f01 	cmp.w	fp, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
 23f42c4:	bf08      	it	eq
 23f42c6:	f8c7 8420 	streq.w	r8, [r7, #1056]	; 0x420
            }
            return bgnAlloc + 2;
 23f42ca:	f108 0002 	add.w	r0, r8, #2
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
 23f42ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
 23f42d2:	f8d0 5420 	ldr.w	r5, [r0, #1056]	; 0x420
 23f42d6:	e7cf      	b.n	23f4278 <_ZN14ExFatPartition10bitmapFindEmm+0xe>
        endAlloc++;
 23f42d8:	46b0      	mov	r8, r6
        if (endAlloc == start) {
 23f42da:	42b5      	cmp	r5, r6
 23f42dc:	d018      	beq.n	23f4310 <_ZN14ExFatPartition10bitmapFindEmm+0xa6>
        if (endAlloc >= m_clusterCount) {
 23f42de:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 23f42e2:	42b2      	cmp	r2, r6
 23f42e4:	d90e      	bls.n	23f4304 <_ZN14ExFatPartition10bitmapFindEmm+0x9a>
      for (; mask; mask <<= 1) {
 23f42e6:	0064      	lsls	r4, r4, #1
 23f42e8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 23f42ec:	d1dd      	bne.n	23f42aa <_ZN14ExFatPartition10bitmapFindEmm+0x40>
    for (; i < sectorSize; i++) {
 23f42ee:	f109 0301 	add.w	r3, r9, #1
 23f42f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    i = 0;
 23f42f6:	f04f 0900 	mov.w	r9, #0
 23f42fa:	f04f 0401 	mov.w	r4, #1
    for (; i < sectorSize; i++) {
 23f42fe:	d2c9      	bcs.n	23f4294 <_ZN14ExFatPartition10bitmapFindEmm+0x2a>
 23f4300:	4699      	mov	r9, r3
 23f4302:	e7d0      	b.n	23f42a6 <_ZN14ExFatPartition10bitmapFindEmm+0x3c>
          endAlloc = bgnAlloc = 0;
 23f4304:	f04f 0800 	mov.w	r8, #0
          i = sectorSize;
 23f4308:	f44f 7900 	mov.w	r9, #512	; 0x200
          endAlloc = bgnAlloc = 0;
 23f430c:	4646      	mov	r6, r8
 23f430e:	e7ee      	b.n	23f42ee <_ZN14ExFatPartition10bitmapFindEmm+0x84>
          return 1;
 23f4310:	2001      	movs	r0, #1
 23f4312:	e7dc      	b.n	23f42ce <_ZN14ExFatPartition10bitmapFindEmm+0x64>

023f4314 <_ZN14ExFatPartition12bitmapModifyEmmb>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster, uint32_t count,
                                  bool value) {
 23f4314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
 23f4318:	3902      	subs	r1, #2
                                  bool value) {
 23f431a:	4605      	mov	r5, r0
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
 23f431c:	f8d0 0430 	ldr.w	r0, [r0, #1072]	; 0x430
                                  bool value) {
 23f4320:	461f      	mov	r7, r3
  if ((start + count) > m_clusterCount) {
 23f4322:	188b      	adds	r3, r1, r2
 23f4324:	4283      	cmp	r3, r0
                                  bool value) {
 23f4326:	4616      	mov	r6, r2
  if ((start + count) > m_clusterCount) {
 23f4328:	d83f      	bhi.n	23f43aa <_ZN14ExFatPartition12bitmapModifyEmmb+0x96>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
 23f432a:	f8d5 2420 	ldr.w	r2, [r5, #1056]	; 0x420
  if (value) {
 23f432e:	b3bf      	cbz	r7, 23f43a0 <_ZN14ExFatPartition12bitmapModifyEmmb+0x8c>
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
 23f4330:	4291      	cmp	r1, r2
 23f4332:	d806      	bhi.n	23f4342 <_ZN14ExFatPartition12bitmapModifyEmmb+0x2e>
 23f4334:	4293      	cmp	r3, r2
 23f4336:	d904      	bls.n	23f4342 <_ZN14ExFatPartition12bitmapModifyEmmb+0x2e>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
 23f4338:	4283      	cmp	r3, r0
 23f433a:	bf28      	it	cs
 23f433c:	2300      	movcs	r3, #0
 23f433e:	f8c5 3420 	str.w	r3, [r5, #1056]	; 0x420
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
 23f4342:	f04f 0901 	mov.w	r9, #1
 23f4346:	f001 0307 	and.w	r3, r1, #7
 23f434a:	fa09 f903 	lsl.w	r9, r9, r3
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
 23f434e:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
  mask = 1 << (start & 7);
 23f4352:	fa5f f989 	uxtb.w	r9, r9
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
 23f4356:	eb03 3811 	add.w	r8, r3, r1, lsr #12
  i = (start >> 3) & m_sectorMask;
 23f435a:	f3c1 04c8 	ubfx	r4, r1, #3, #9
 23f435e:	2201      	movs	r2, #1
 23f4360:	4641      	mov	r1, r8
 23f4362:	4628      	mov	r0, r5
 23f4364:	4490      	add	r8, r2
 23f4366:	f000 fc08 	bl	23f4b7a <_ZN7FsCache7prepareEmh>
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
 23f436a:	b1f0      	cbz	r0, 23f43aa <_ZN14ExFatPartition12bitmapModifyEmmb+0x96>
 23f436c:	4649      	mov	r1, r9
 23f436e:	1903      	adds	r3, r0, r4
 23f4370:	f500 7000 	add.w	r0, r0, #512	; 0x200
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
 23f4374:	781a      	ldrb	r2, [r3, #0]
 23f4376:	420a      	tst	r2, r1
 23f4378:	bf14      	ite	ne
 23f437a:	2401      	movne	r4, #1
 23f437c:	2400      	moveq	r4, #0
 23f437e:	42bc      	cmp	r4, r7
 23f4380:	d013      	beq.n	23f43aa <_ZN14ExFatPartition12bitmapModifyEmmb+0x96>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
 23f4382:	404a      	eors	r2, r1
        if (--count == 0) {
 23f4384:	3e01      	subs	r6, #1
        cache[i] ^= mask;
 23f4386:	701a      	strb	r2, [r3, #0]
        if (--count == 0) {
 23f4388:	d012      	beq.n	23f43b0 <_ZN14ExFatPartition12bitmapModifyEmmb+0x9c>
      for (; mask; mask <<= 1) {
 23f438a:	0049      	lsls	r1, r1, #1
 23f438c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 23f4390:	d1f0      	bne.n	23f4374 <_ZN14ExFatPartition12bitmapModifyEmmb+0x60>
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
 23f4392:	460c      	mov	r4, r1
 23f4394:	2101      	movs	r1, #1
    for (; i < m_bytesPerSector; i++) {
 23f4396:	3301      	adds	r3, #1
 23f4398:	4298      	cmp	r0, r3
      mask = 1;
 23f439a:	4689      	mov	r9, r1
    for (; i < m_bytesPerSector; i++) {
 23f439c:	d1ea      	bne.n	23f4374 <_ZN14ExFatPartition12bitmapModifyEmmb+0x60>
 23f439e:	e7de      	b.n	23f435e <_ZN14ExFatPartition12bitmapModifyEmmb+0x4a>
    if (start < m_bitmapStart) {
 23f43a0:	4291      	cmp	r1, r2
      m_bitmapStart = start;
 23f43a2:	bf38      	it	cc
 23f43a4:	f8c5 1420 	strcc.w	r1, [r5, #1056]	; 0x420
 23f43a8:	e7cb      	b.n	23f4342 <_ZN14ExFatPartition12bitmapModifyEmmb+0x2e>
  }

fail:
  return false;
 23f43aa:	2000      	movs	r0, #0
}
 23f43ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          return true;
 23f43b0:	2001      	movs	r0, #1
 23f43b2:	e7fb      	b.n	23f43ac <_ZN14ExFatPartition12bitmapModifyEmmb+0x98>

023f43b4 <_ZN14ExFatPartition8dirCacheEPK8DirPos_th>:
    n++;
  } while (status);
  return n;
}
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(const DirPos_t* pos, uint8_t options) {
 23f43b4:	b538      	push	{r3, r4, r5, lr}
 23f43b6:	460c      	mov	r4, r1
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
 23f43b8:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
 23f43bc:	6849      	ldr	r1, [r1, #4]
           ((cluster - 2) << m_sectorsPerClusterShift);
 23f43be:	f890 5445 	ldrb.w	r5, [r0, #1093]	; 0x445
 23f43c2:	4019      	ands	r1, r3
 23f43c4:	6823      	ldr	r3, [r4, #0]
    return m_dataCache.prepare(sector, option);
 23f43c6:	f500 7004 	add.w	r0, r0, #528	; 0x210
           ((cluster - 2) << m_sectorsPerClusterShift);
 23f43ca:	3b02      	subs	r3, #2
 23f43cc:	40ab      	lsls	r3, r5
 23f43ce:	eb03 2351 	add.w	r3, r3, r1, lsr #9
 23f43d2:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
 23f43d6:	4419      	add	r1, r3
 23f43d8:	f000 fbcf 	bl	23f4b7a <_ZN7FsCache7prepareEmh>
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
 23f43dc:	b118      	cbz	r0, 23f43e6 <_ZN14ExFatPartition8dirCacheEPK8DirPos_th+0x32>
 23f43de:	6863      	ldr	r3, [r4, #4]
 23f43e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23f43e4:	4418      	add	r0, r3
}
 23f43e6:	bd38      	pop	{r3, r4, r5, pc}

023f43e8 <_ZN14ExFatPartition6fatGetEmPm>:
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
 23f43e8:	b538      	push	{r3, r4, r5, lr}
  const uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
 23f43ea:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
 23f43ee:	460c      	mov	r4, r1
  if (cluster > (m_clusterCount + 1)) {
 23f43f0:	3301      	adds	r3, #1
 23f43f2:	428b      	cmp	r3, r1
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
 23f43f4:	4615      	mov	r5, r2
  if (cluster > (m_clusterCount + 1)) {
 23f43f6:	d202      	bcs.n	23f43fe <_ZN14ExFatPartition6fatGetEmPm+0x16>
    DBG_FAIL_MACRO;
    return -1;
 23f43f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
 23f43fc:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
 23f43fe:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
 23f4402:	2200      	movs	r2, #0
 23f4404:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 23f4408:	f500 7004 	add.w	r0, r0, #528	; 0x210
 23f440c:	f000 fbb5 	bl	23f4b7a <_ZN7FsCache7prepareEmh>
  if (!cache) {
 23f4410:	2800      	cmp	r0, #0
 23f4412:	d0f1      	beq.n	23f43f8 <_ZN14ExFatPartition6fatGetEmPm+0x10>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
 23f4414:	00a4      	lsls	r4, r4, #2
 23f4416:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
 23f441a:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
 23f441c:	1c5a      	adds	r2, r3, #1
  return 1;
 23f441e:	bf16      	itet	ne
 23f4420:	2001      	movne	r0, #1
    return 0;
 23f4422:	2000      	moveq	r0, #0
  *value = next;
 23f4424:	602b      	strne	r3, [r5, #0]
  return 1;
 23f4426:	e7e9      	b.n	23f43fc <_ZN14ExFatPartition6fatGetEmPm+0x14>

023f4428 <_ZN14ExFatPartition9chainSizeEm>:
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
 23f4428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f442a:	4605      	mov	r5, r0
  uint32_t n = 0;
 23f442c:	2400      	movs	r4, #0
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
 23f442e:	9101      	str	r1, [sp, #4]
    status = fatGet(cluster, &cluster);
 23f4430:	4628      	mov	r0, r5
 23f4432:	9901      	ldr	r1, [sp, #4]
 23f4434:	aa01      	add	r2, sp, #4
 23f4436:	f7ff ffd7 	bl	23f43e8 <_ZN14ExFatPartition6fatGetEmPm>
    if (status < 0) return 0;
 23f443a:	2800      	cmp	r0, #0
 23f443c:	db05      	blt.n	23f444a <_ZN14ExFatPartition9chainSizeEm+0x22>
    n++;
 23f443e:	f104 0401 	add.w	r4, r4, #1
  } while (status);
 23f4442:	d1f5      	bne.n	23f4430 <_ZN14ExFatPartition9chainSizeEm+0x8>
}
 23f4444:	4620      	mov	r0, r4
 23f4446:	b003      	add	sp, #12
 23f4448:	bd30      	pop	{r4, r5, pc}
    if (status < 0) return 0;
 23f444a:	2400      	movs	r4, #0
 23f444c:	e7fa      	b.n	23f4444 <_ZN14ExFatPartition9chainSizeEm+0x1c>

023f444e <_ZN14ExFatPartition7dirSeekEP8DirPos_tm>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
 23f444e:	b570      	push	{r4, r5, r6, lr}
 23f4450:	4606      	mov	r6, r0
 23f4452:	460d      	mov	r5, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
 23f4454:	684b      	ldr	r3, [r1, #4]
 23f4456:	f8d0 4438 	ldr.w	r4, [r0, #1080]	; 0x438
 23f445a:	401c      	ands	r4, r3
  pos->position += offset;
 23f445c:	4413      	add	r3, r2
 23f445e:	604b      	str	r3, [r1, #4]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
 23f4460:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
 23f4464:	4414      	add	r4, r2
 23f4466:	3309      	adds	r3, #9
  tmp >>= bytesPerClusterShift();
 23f4468:	b2db      	uxtb	r3, r3
 23f446a:	40dc      	lsrs	r4, r3
  while (tmp--) {
 23f446c:	b16c      	cbz	r4, 23f448a <_ZN14ExFatPartition7dirSeekEP8DirPos_tm+0x3c>
    if (pos->isContiguous) {
 23f446e:	7a2b      	ldrb	r3, [r5, #8]
      pos->cluster++;
 23f4470:	6829      	ldr	r1, [r5, #0]
    if (pos->isContiguous) {
 23f4472:	b11b      	cbz	r3, 23f447c <_ZN14ExFatPartition7dirSeekEP8DirPos_tm+0x2e>
      pos->cluster++;
 23f4474:	3101      	adds	r1, #1
 23f4476:	6029      	str	r1, [r5, #0]
 23f4478:	3c01      	subs	r4, #1
 23f447a:	e7f7      	b.n	23f446c <_ZN14ExFatPartition7dirSeekEP8DirPos_tm+0x1e>
      status = fatGet(pos->cluster, &pos->cluster);
 23f447c:	462a      	mov	r2, r5
 23f447e:	4630      	mov	r0, r6
 23f4480:	f7ff ffb2 	bl	23f43e8 <_ZN14ExFatPartition6fatGetEmPm>
      if (status != 1) {
 23f4484:	2801      	cmp	r0, #1
 23f4486:	d0f7      	beq.n	23f4478 <_ZN14ExFatPartition7dirSeekEP8DirPos_tm+0x2a>
}
 23f4488:	bd70      	pop	{r4, r5, r6, pc}
  return 1;
 23f448a:	2001      	movs	r0, #1
 23f448c:	e7fc      	b.n	23f4488 <_ZN14ExFatPartition7dirSeekEP8DirPos_tm+0x3a>

023f448e <_ZN14ExFatPartition6fatPutEmm>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
 23f448e:	2901      	cmp	r1, #1
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
 23f4490:	b538      	push	{r3, r4, r5, lr}
 23f4492:	460c      	mov	r4, r1
 23f4494:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
 23f4496:	d801      	bhi.n	23f449c <_ZN14ExFatPartition6fatPutEmm+0xe>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

fail:
  return false;
 23f4498:	2000      	movs	r0, #0
}
 23f449a:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
 23f449c:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
 23f44a0:	3301      	adds	r3, #1
 23f44a2:	428b      	cmp	r3, r1
 23f44a4:	d3f8      	bcc.n	23f4498 <_ZN14ExFatPartition6fatPutEmm+0xa>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
 23f44a6:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    return m_dataCache.prepare(sector, option);
 23f44aa:	2201      	movs	r2, #1
 23f44ac:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 23f44b0:	f500 7004 	add.w	r0, r0, #528	; 0x210
 23f44b4:	f000 fb61 	bl	23f4b7a <_ZN7FsCache7prepareEmh>
  if (!cache) {
 23f44b8:	2800      	cmp	r0, #0
 23f44ba:	d0ed      	beq.n	23f4498 <_ZN14ExFatPartition6fatPutEmm+0xa>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
 23f44bc:	00a4      	lsls	r4, r4, #2
 23f44be:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
 23f44c2:	5105      	str	r5, [r0, r4]
  return true;
 23f44c4:	2001      	movs	r0, #1
 23f44c6:	e7e8      	b.n	23f449a <_ZN14ExFatPartition6fatPutEmm+0xc>

023f44c8 <_ZN14ExFatPartition9freeChainEm>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
 23f44c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f44cc:	4607      	mov	r7, r0
 23f44ce:	460c      	mov	r4, r1
  uint32_t next;
  uint32_t start = cluster;
 23f44d0:	4688      	mov	r8, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
 23f44d2:	4621      	mov	r1, r4
 23f44d4:	4638      	mov	r0, r7
 23f44d6:	aa01      	add	r2, sp, #4
 23f44d8:	f7ff ff86 	bl	23f43e8 <_ZN14ExFatPartition6fatGetEmPm>
    if (status < 0) {
 23f44dc:	1e06      	subs	r6, r0, #0
 23f44de:	da04      	bge.n	23f44ea <_ZN14ExFatPartition9freeChainEm+0x22>
  } while (status);

  return true;

fail:
  return false;
 23f44e0:	2500      	movs	r5, #0
}
 23f44e2:	4628      	mov	r0, r5
 23f44e4:	b002      	add	sp, #8
 23f44e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!fatPut(cluster, 0)) {
 23f44ea:	2200      	movs	r2, #0
 23f44ec:	4621      	mov	r1, r4
 23f44ee:	4638      	mov	r0, r7
 23f44f0:	f7ff ffcd 	bl	23f448e <_ZN14ExFatPartition6fatPutEmm>
 23f44f4:	4605      	mov	r5, r0
 23f44f6:	2800      	cmp	r0, #0
 23f44f8:	d0f2      	beq.n	23f44e0 <_ZN14ExFatPartition9freeChainEm+0x18>
    if (status == 0 || (cluster + 1) != next) {
 23f44fa:	1c62      	adds	r2, r4, #1
 23f44fc:	b116      	cbz	r6, 23f4504 <_ZN14ExFatPartition9freeChainEm+0x3c>
 23f44fe:	9b01      	ldr	r3, [sp, #4]
 23f4500:	4293      	cmp	r3, r2
 23f4502:	d00a      	beq.n	23f451a <_ZN14ExFatPartition9freeChainEm+0x52>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
 23f4504:	2300      	movs	r3, #0
 23f4506:	4641      	mov	r1, r8
 23f4508:	4638      	mov	r0, r7
 23f450a:	eba2 0208 	sub.w	r2, r2, r8
 23f450e:	f7ff ff01 	bl	23f4314 <_ZN14ExFatPartition12bitmapModifyEmmb>
 23f4512:	2800      	cmp	r0, #0
 23f4514:	d0e4      	beq.n	23f44e0 <_ZN14ExFatPartition9freeChainEm+0x18>
      start = next;
 23f4516:	f8dd 8004 	ldr.w	r8, [sp, #4]
    cluster = next;
 23f451a:	9c01      	ldr	r4, [sp, #4]
  } while (status);
 23f451c:	2e00      	cmp	r6, #0
 23f451e:	d1d8      	bne.n	23f44d2 <_ZN14ExFatPartition9freeChainEm+0xa>
 23f4520:	e7df      	b.n	23f44e2 <_ZN14ExFatPartition9freeChainEm+0x1a>
	...

023f4524 <_ZN14ExFatPartition4initEP9SdSpiCardhm>:
      }
    }
  }
}
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
 23f4524:	b570      	push	{r4, r5, r6, lr}
 23f4526:	461e      	mov	r6, r3
  pbs_t* pbs;
  const BpbExFat_t* bpb;
  const MbrSector_t* mbr;
  m_fatType = 0;
 23f4528:	2300      	movs	r3, #0
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
 23f452a:	4604      	mov	r4, r0
  m_fatType = 0;
 23f452c:	f880 3444 	strb.w	r3, [r0, #1092]	; 0x444
  m_blockDev = dev;
 23f4530:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
    m_blockDev = blockDev;
 23f4534:	6041      	str	r1, [r0, #4]
    m_status = 0;
 23f4536:	7003      	strb	r3, [r0, #0]
    m_sector = 0XFFFFFFFF;
 23f4538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  cacheInit(m_blockDev);
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 23f453c:	4615      	mov	r5, r2
 23f453e:	60a0      	str	r0, [r4, #8]
    m_blockDev = blockDev;
 23f4540:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
    m_status = 0;
 23f4544:	f884 3210 	strb.w	r3, [r4, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
 23f4548:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
 23f454c:	b1d2      	cbz	r2, 23f4584 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x60>
    if (part > 4) {
 23f454e:	2a04      	cmp	r2, #4
 23f4550:	d901      	bls.n	23f4556 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x32>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

fail:
  return false;
 23f4552:	2000      	movs	r0, #0
}
 23f4554:	bd70      	pop	{r4, r5, r6, pc}
 23f4556:	461a      	mov	r2, r3
 23f4558:	4619      	mov	r1, r3
 23f455a:	f504 7004 	add.w	r0, r4, #528	; 0x210
 23f455e:	f000 fb0c 	bl	23f4b7a <_ZN7FsCache7prepareEmh>
    if (!mbr) {
 23f4562:	2800      	cmp	r0, #0
 23f4564:	d0f5      	beq.n	23f4552 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x2e>
    const MbrPart_t* mp = mbr->part + part - 1;
 23f4566:	f105 5280 	add.w	r2, r5, #268435456	; 0x10000000
 23f456a:	3a01      	subs	r2, #1
 23f456c:	f500 70df 	add.w	r0, r0, #446	; 0x1be
 23f4570:	0113      	lsls	r3, r2, #4
 23f4572:	eb00 1202 	add.w	r2, r0, r2, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
 23f4576:	7911      	ldrb	r1, [r2, #4]
 23f4578:	2900      	cmp	r1, #0
 23f457a:	d0ea      	beq.n	23f4552 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x2e>
 23f457c:	5cc3      	ldrb	r3, [r0, r3]
 23f457e:	065b      	lsls	r3, r3, #25
 23f4580:	d1e7      	bne.n	23f4552 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x2e>
  return *reinterpret_cast<const uint32_t*>(src);
 23f4582:	6896      	ldr	r6, [r2, #8]
 23f4584:	2200      	movs	r2, #0
 23f4586:	4631      	mov	r1, r6
 23f4588:	f504 7004 	add.w	r0, r4, #528	; 0x210
 23f458c:	f000 faf5 	bl	23f4b7a <_ZN7FsCache7prepareEmh>
  if (!pbs) {
 23f4590:	4605      	mov	r5, r0
 23f4592:	2800      	cmp	r0, #0
 23f4594:	d0dd      	beq.n	23f4552 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x2e>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
 23f4596:	491a      	ldr	r1, [pc, #104]	; (23f4600 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0xdc>)
 23f4598:	2205      	movs	r2, #5
 23f459a:	3003      	adds	r0, #3
 23f459c:	f007 ffd2 	bl	23fc544 <strncmp>
 23f45a0:	4601      	mov	r1, r0
 23f45a2:	2800      	cmp	r0, #0
 23f45a4:	d1d5      	bne.n	23f4552 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x2e>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
 23f45a6:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
 23f45aa:	2b09      	cmp	r3, #9
 23f45ac:	d1d1      	bne.n	23f4552 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x2e>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
 23f45ae:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 23f45b0:	4433      	add	r3, r6
 23f45b2:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
 23f45b6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
 23f45b8:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
 23f45bc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 23f45be:	4433      	add	r3, r6
 23f45c0:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
 23f45c4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
 23f45c6:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
 23f45ca:	6e2b      	ldr	r3, [r5, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
 23f45cc:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
 23f45d0:	f895 306d 	ldrb.w	r3, [r5, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
 23f45d4:	2501      	movs	r5, #1
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
 23f45d6:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
 23f45da:	3309      	adds	r3, #9
 23f45dc:	fa05 f303 	lsl.w	r3, r5, r3
 23f45e0:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
 23f45e4:	3b01      	subs	r3, #1
 23f45e6:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
  m_bitmapStart = 0;
 23f45ea:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
 23f45ee:	462a      	mov	r2, r5
 23f45f0:	4620      	mov	r0, r4
 23f45f2:	f7ff fe3a 	bl	23f426a <_ZN14ExFatPartition10bitmapFindEmm>
  m_fatType = FAT_TYPE_EXFAT;
 23f45f6:	2340      	movs	r3, #64	; 0x40
  return true;
 23f45f8:	4628      	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
 23f45fa:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
  return true;
 23f45fe:	e7a9      	b.n	23f4554 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x30>
 23f4600:	023ff3c0 	.word	0x023ff3c0

023f4604 <_ZN14ExFatPartition10rootLengthEv>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
 23f4604:	b510      	push	{r4, lr}
 23f4606:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
 23f4608:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
 23f460c:	f7ff ff0c 	bl	23f4428 <_ZN14ExFatPartition9chainSizeEm>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
 23f4610:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
 23f4614:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
 23f4616:	b2db      	uxtb	r3, r3
}
 23f4618:	4098      	lsls	r0, r3
 23f461a:	bd10      	pop	{r4, pc}

023f461c <_ZN7FatFile10getLfnCharEPK8DirLfn_th>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(const DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
 23f461c:	2a04      	cmp	r2, #4
 23f461e:	d804      	bhi.n	23f462a <_ZN7FatFile10getLfnCharEPK8DirLfn_th+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
 23f4620:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 23f4624:	f8b2 0001 	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2 * i);
 23f4628:	4770      	bx	lr
  } else if (i < 11) {
 23f462a:	2a0a      	cmp	r2, #10
 23f462c:	d803      	bhi.n	23f4636 <_ZN7FatFile10getLfnCharEPK8DirLfn_th+0x1a>
 23f462e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 23f4632:	8888      	ldrh	r0, [r1, #4]
    return getLe16(ldir->unicode2 + 2 * (i - 5));
 23f4634:	4770      	bx	lr
  } else if (i < 13) {
 23f4636:	2a0c      	cmp	r2, #12
 23f4638:	bf9a      	itte	ls
 23f463a:	eb01 0142 	addls.w	r1, r1, r2, lsl #1
 23f463e:	88c8      	ldrhls	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2 * (i - 11));
  }
  DBG_HALT_IF(i >= 13);
  return 0;
 23f4640:	2000      	movhi	r0, #0
}
 23f4642:	4770      	bx	lr

023f4644 <_ZN12FatPartition6fatGetEmPm>:
  uint32_t sector;
  uint32_t next;
  const uint8_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 23f4644:	2901      	cmp	r1, #1
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
 23f4646:	b570      	push	{r4, r5, r6, lr}
 23f4648:	4605      	mov	r5, r0
 23f464a:	460c      	mov	r4, r1
 23f464c:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
 23f464e:	d802      	bhi.n	23f4656 <_ZN12FatPartition6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
 23f4650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23f4654:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
 23f4656:	69c3      	ldr	r3, [r0, #28]
 23f4658:	428b      	cmp	r3, r1
 23f465a:	d3f9      	bcc.n	23f4650 <_ZN12FatPartition6fatGetEmPm+0xc>
  uint8_t fatType() const { return m_fatType; }
 23f465c:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
 23f465e:	2b20      	cmp	r3, #32
 23f4660:	d114      	bne.n	23f468c <_ZN12FatPartition6fatGetEmPm+0x48>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
 23f4662:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
 23f4664:	2202      	movs	r2, #2
 23f4666:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 23f466a:	f500 700d 	add.w	r0, r0, #564	; 0x234
 23f466e:	f000 fa84 	bl	23f4b7a <_ZN7FsCache7prepareEmh>
    if (!pc) {
 23f4672:	2800      	cmp	r0, #0
 23f4674:	d0ec      	beq.n	23f4650 <_ZN12FatPartition6fatGetEmPm+0xc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
 23f4676:	00a4      	lsls	r4, r4, #2
    next = getLe32(pc + offset);
 23f4678:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
 23f467c:	5903      	ldr	r3, [r0, r4]
  if (isEOC(next)) {
 23f467e:	69ea      	ldr	r2, [r5, #28]
 23f4680:	429a      	cmp	r2, r3
  return 1;
 23f4682:	bf2a      	itet	cs
 23f4684:	2001      	movcs	r0, #1
    return 0;
 23f4686:	2000      	movcc	r0, #0
  *value = next;
 23f4688:	6033      	strcs	r3, [r6, #0]
  return 1;
 23f468a:	e7e3      	b.n	23f4654 <_ZN12FatPartition6fatGetEmPm+0x10>
  } else if (fatType() == 16) {
 23f468c:	2b10      	cmp	r3, #16
 23f468e:	d1df      	bne.n	23f4650 <_ZN12FatPartition6fatGetEmPm+0xc>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
 23f4690:	f3c1 2307 	ubfx	r3, r1, #8, #8
 23f4694:	6981      	ldr	r1, [r0, #24]
 23f4696:	2202      	movs	r2, #2
 23f4698:	4419      	add	r1, r3
 23f469a:	f500 700d 	add.w	r0, r0, #564	; 0x234
 23f469e:	f000 fa6c 	bl	23f4b7a <_ZN7FsCache7prepareEmh>
    if (!pc) {
 23f46a2:	2800      	cmp	r0, #0
 23f46a4:	d0d4      	beq.n	23f4650 <_ZN12FatPartition6fatGetEmPm+0xc>
    uint16_t offset = (cluster << 1) & m_sectorMask;
 23f46a6:	0064      	lsls	r4, r4, #1
    next = getLe16(pc + offset);
 23f46a8:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 23f46ac:	5b03      	ldrh	r3, [r0, r4]
 23f46ae:	e7e6      	b.n	23f467e <_ZN12FatPartition6fatGetEmPm+0x3a>

023f46b0 <_ZN12FatPartition6fatPutEmm>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 23f46b0:	2901      	cmp	r1, #1
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
 23f46b2:	b538      	push	{r3, r4, r5, lr}
 23f46b4:	460c      	mov	r4, r1
 23f46b6:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
 23f46b8:	d801      	bhi.n	23f46be <_ZN12FatPartition6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 23f46ba:	2000      	movs	r0, #0
}
 23f46bc:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
 23f46be:	69c3      	ldr	r3, [r0, #28]
 23f46c0:	428b      	cmp	r3, r1
 23f46c2:	d3fa      	bcc.n	23f46ba <_ZN12FatPartition6fatPutEmm+0xa>
  uint8_t fatType() const { return m_fatType; }
 23f46c4:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
 23f46c6:	2b20      	cmp	r3, #32
 23f46c8:	d10f      	bne.n	23f46ea <_ZN12FatPartition6fatPutEmm+0x3a>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
 23f46ca:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
 23f46cc:	2203      	movs	r2, #3
 23f46ce:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 23f46d2:	f500 700d 	add.w	r0, r0, #564	; 0x234
 23f46d6:	f000 fa50 	bl	23f4b7a <_ZN7FsCache7prepareEmh>
    if (!pc) {
 23f46da:	2800      	cmp	r0, #0
 23f46dc:	d0ed      	beq.n	23f46ba <_ZN12FatPartition6fatPutEmm+0xa>
    uint16_t offset = (cluster << 2) & m_sectorMask;
 23f46de:	00a4      	lsls	r4, r4, #2
    setLe32(pc + offset, value);
 23f46e0:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
 23f46e4:	5105      	str	r5, [r0, r4]
    return true;
 23f46e6:	2001      	movs	r0, #1
 23f46e8:	e7e8      	b.n	23f46bc <_ZN12FatPartition6fatPutEmm+0xc>
  if (fatType() == 16) {
 23f46ea:	2b10      	cmp	r3, #16
 23f46ec:	d1e5      	bne.n	23f46ba <_ZN12FatPartition6fatPutEmm+0xa>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
 23f46ee:	f3c1 2307 	ubfx	r3, r1, #8, #8
 23f46f2:	6981      	ldr	r1, [r0, #24]
 23f46f4:	2203      	movs	r2, #3
 23f46f6:	4419      	add	r1, r3
 23f46f8:	f500 700d 	add.w	r0, r0, #564	; 0x234
 23f46fc:	f000 fa3d 	bl	23f4b7a <_ZN7FsCache7prepareEmh>
    if (!pc) {
 23f4700:	2800      	cmp	r0, #0
 23f4702:	d0da      	beq.n	23f46ba <_ZN12FatPartition6fatPutEmm+0xa>
    uint16_t offset = (cluster << 1) & m_sectorMask;
 23f4704:	0064      	lsls	r4, r4, #1
    setLe16(pc + offset, value);
 23f4706:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 23f470a:	5305      	strh	r5, [r0, r4]
 23f470c:	e7eb      	b.n	23f46e6 <_ZN12FatPartition6fatPutEmm+0x36>

023f470e <_ZN12FatPartition15allocateClusterEmPm>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
 23f470e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
 23f4712:	68c4      	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
 23f4714:	4605      	mov	r5, r0
  if (m_allocSearchStart < current) {
 23f4716:	428c      	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
 23f4718:	460e      	mov	r6, r1
 23f471a:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
 23f471c:	d301      	bcc.n	23f4722 <_ZN12FatPartition15allocateClusterEmPm+0x14>
      setStart = true;
 23f471e:	2701      	movs	r7, #1
 23f4720:	e001      	b.n	23f4726 <_ZN12FatPartition15allocateClusterEmPm+0x18>
 23f4722:	460c      	mov	r4, r1
    setStart = false;
 23f4724:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
 23f4726:	69eb      	ldr	r3, [r5, #28]
    find++;
 23f4728:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
 23f472a:	42a3      	cmp	r3, r4
 23f472c:	d202      	bcs.n	23f4734 <_ZN12FatPartition15allocateClusterEmPm+0x26>
      if (setStart) {
 23f472e:	b9c7      	cbnz	r7, 23f4762 <_ZN12FatPartition15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
 23f4730:	68ec      	ldr	r4, [r5, #12]
 23f4732:	e7f4      	b.n	23f471e <_ZN12FatPartition15allocateClusterEmPm+0x10>
    if (find == current) {
 23f4734:	42a6      	cmp	r6, r4
 23f4736:	d014      	beq.n	23f4762 <_ZN12FatPartition15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
 23f4738:	4621      	mov	r1, r4
 23f473a:	4628      	mov	r0, r5
 23f473c:	aa01      	add	r2, sp, #4
 23f473e:	f7ff ff81 	bl	23f4644 <_ZN12FatPartition6fatGetEmPm>
    if (fg < 0) {
 23f4742:	2800      	cmp	r0, #0
 23f4744:	db0d      	blt.n	23f4762 <_ZN12FatPartition15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
 23f4746:	d0ee      	beq.n	23f4726 <_ZN12FatPartition15allocateClusterEmPm+0x18>
 23f4748:	9b01      	ldr	r3, [sp, #4]
 23f474a:	2b00      	cmp	r3, #0
 23f474c:	d1eb      	bne.n	23f4726 <_ZN12FatPartition15allocateClusterEmPm+0x18>
  if (setStart) {
 23f474e:	b107      	cbz	r7, 23f4752 <_ZN12FatPartition15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
 23f4750:	60ec      	str	r4, [r5, #12]
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) { return fatPut(cluster, 0x0FFFFFFF); }
 23f4752:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 23f4756:	4621      	mov	r1, r4
 23f4758:	4628      	mov	r0, r5
 23f475a:	f7ff ffa9 	bl	23f46b0 <_ZN12FatPartition6fatPutEmm>
  if (!fatPutEOC(find)) {
 23f475e:	4607      	mov	r7, r0
 23f4760:	b920      	cbnz	r0, 23f476c <_ZN12FatPartition15allocateClusterEmPm+0x5e>
  return false;
 23f4762:	2700      	movs	r7, #0
}
 23f4764:	4638      	mov	r0, r7
 23f4766:	b002      	add	sp, #8
 23f4768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
 23f476c:	b916      	cbnz	r6, 23f4774 <_ZN12FatPartition15allocateClusterEmPm+0x66>
  *next = find;
 23f476e:	f8c8 4000 	str.w	r4, [r8]
  return true;
 23f4772:	e7f7      	b.n	23f4764 <_ZN12FatPartition15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
 23f4774:	4622      	mov	r2, r4
 23f4776:	4631      	mov	r1, r6
 23f4778:	4628      	mov	r0, r5
 23f477a:	f7ff ff99 	bl	23f46b0 <_ZN12FatPartition6fatPutEmm>
 23f477e:	2800      	cmp	r0, #0
 23f4780:	d1f5      	bne.n	23f476e <_ZN12FatPartition15allocateClusterEmPm+0x60>
 23f4782:	e7ee      	b.n	23f4762 <_ZN12FatPartition15allocateClusterEmPm+0x54>

023f4784 <_ZN12FatPartition9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
 23f4784:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f4786:	4605      	mov	r5, r0
 23f4788:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 23f478a:	4621      	mov	r1, r4
 23f478c:	4628      	mov	r0, r5
 23f478e:	aa01      	add	r2, sp, #4
 23f4790:	f7ff ff58 	bl	23f4644 <_ZN12FatPartition6fatGetEmPm>
    if (fg < 0) {
 23f4794:	1e06      	subs	r6, r0, #0
 23f4796:	db10      	blt.n	23f47ba <_ZN12FatPartition9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 23f4798:	2200      	movs	r2, #0
 23f479a:	4621      	mov	r1, r4
 23f479c:	4628      	mov	r0, r5
 23f479e:	f7ff ff87 	bl	23f46b0 <_ZN12FatPartition6fatPutEmm>
 23f47a2:	b150      	cbz	r0, 23f47ba <_ZN12FatPartition9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
 23f47a4:	68eb      	ldr	r3, [r5, #12]
 23f47a6:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
 23f47a8:	bf84      	itt	hi
 23f47aa:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 23f47ae:	60ec      	strhi	r4, [r5, #12]
    }
    cluster = next;
 23f47b0:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
 23f47b2:	2e00      	cmp	r6, #0
 23f47b4:	d1e9      	bne.n	23f478a <_ZN12FatPartition9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 23f47b6:	b002      	add	sp, #8
 23f47b8:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 23f47ba:	2000      	movs	r0, #0
 23f47bc:	e7fb      	b.n	23f47b6 <_ZN12FatPartition9freeChainEm+0x32>

023f47be <_ZN12FatPartition4initEP9SdSpiCardhm>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
 23f47be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f47c0:	461d      	mov	r5, r3
  m_blockDev = dev;
  pbs_t* pbs;
  const BpbFat32_t* bpb;
  const MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
 23f47c2:	2300      	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
 23f47c4:	4604      	mov	r4, r0
  m_blockDev = dev;
 23f47c6:	6001      	str	r1, [r0, #0]
  m_fatType = 0;
 23f47c8:	71c3      	strb	r3, [r0, #7]
  m_allocSearchStart = 1;
 23f47ca:	2001      	movs	r0, #1
 23f47cc:	60e0      	str	r0, [r4, #12]
    m_sector = 0XFFFFFFFF;
 23f47ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 23f47d2:	4616      	mov	r6, r2
  m_cache.init(dev);
 23f47d4:	f104 0724 	add.w	r7, r4, #36	; 0x24
    m_blockDev = blockDev;
 23f47d8:	62a1      	str	r1, [r4, #40]	; 0x28
    m_status = 0;
 23f47da:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
 23f47de:	62e0      	str	r0, [r4, #44]	; 0x2c
    m_blockDev = blockDev;
 23f47e0:	f8c4 1238 	str.w	r1, [r4, #568]	; 0x238
    m_status = 0;
 23f47e4:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
    m_sector = 0XFFFFFFFF;
 23f47e8:	f8c4 023c 	str.w	r0, [r4, #572]	; 0x23c
  if (part) {
 23f47ec:	b1ca      	cbz	r2, 23f4822 <_ZN12FatPartition4initEP9SdSpiCardhm+0x64>
    if (part > 4) {
 23f47ee:	2a04      	cmp	r2, #4
 23f47f0:	d901      	bls.n	23f47f6 <_ZN12FatPartition4initEP9SdSpiCardhm+0x38>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

fail:
  return false;
 23f47f2:	2000      	movs	r0, #0
}
 23f47f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return m_cache.prepare(sector, options);
 23f47f6:	461a      	mov	r2, r3
 23f47f8:	4619      	mov	r1, r3
 23f47fa:	4638      	mov	r0, r7
 23f47fc:	f000 f9bd 	bl	23f4b7a <_ZN7FsCache7prepareEmh>
    if (!mbr) {
 23f4800:	2800      	cmp	r0, #0
 23f4802:	d0f6      	beq.n	23f47f2 <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
    const MbrPart_t* mp = mbr->part + part - 1;
 23f4804:	f106 5280 	add.w	r2, r6, #268435456	; 0x10000000
 23f4808:	3a01      	subs	r2, #1
 23f480a:	f500 70df 	add.w	r0, r0, #446	; 0x1be
 23f480e:	0113      	lsls	r3, r2, #4
 23f4810:	eb00 1202 	add.w	r2, r0, r2, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
 23f4814:	7911      	ldrb	r1, [r2, #4]
 23f4816:	2900      	cmp	r1, #0
 23f4818:	d0eb      	beq.n	23f47f2 <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
 23f481a:	5cc3      	ldrb	r3, [r0, r3]
 23f481c:	065b      	lsls	r3, r3, #25
 23f481e:	d1e8      	bne.n	23f47f2 <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
  return *reinterpret_cast<const uint32_t*>(src);
 23f4820:	6895      	ldr	r5, [r2, #8]
 23f4822:	2200      	movs	r2, #0
 23f4824:	4629      	mov	r1, r5
 23f4826:	4638      	mov	r0, r7
 23f4828:	f000 f9a7 	bl	23f4b7a <_ZN7FsCache7prepareEmh>
  if (!pbs) {
 23f482c:	2800      	cmp	r0, #0
 23f482e:	d0e0      	beq.n	23f47f2 <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
  if (bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
 23f4830:	7c03      	ldrb	r3, [r0, #16]
 23f4832:	2b02      	cmp	r3, #2
 23f4834:	d1dd      	bne.n	23f47f2 <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
 23f4836:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 23f483a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 23f483e:	d1d8      	bne.n	23f47f2 <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
 23f4840:	7b41      	ldrb	r1, [r0, #13]
  m_sectorsPerClusterShift = 0;
 23f4842:	2609      	movs	r6, #9
  m_clusterSectorMask = m_sectorsPerCluster - 1;
 23f4844:	1e4b      	subs	r3, r1, #1
 23f4846:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
 23f4848:	2300      	movs	r3, #0
 23f484a:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
 23f484c:	2301      	movs	r3, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
 23f484e:	7121      	strb	r1, [r4, #4]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
 23f4850:	4299      	cmp	r1, r3
 23f4852:	d007      	beq.n	23f4864 <_ZN12FatPartition4initEP9SdSpiCardhm+0xa6>
    if (tmp == 0) {
 23f4854:	3e01      	subs	r6, #1
 23f4856:	d0cc      	beq.n	23f47f2 <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
    m_sectorsPerClusterShift++;
 23f4858:	79a2      	ldrb	r2, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
 23f485a:	005b      	lsls	r3, r3, #1
    m_sectorsPerClusterShift++;
 23f485c:	3201      	adds	r2, #1
 23f485e:	71a2      	strb	r2, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
 23f4860:	b2db      	uxtb	r3, r3
 23f4862:	e7f5      	b.n	23f4850 <_ZN12FatPartition4initEP9SdSpiCardhm+0x92>
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
 23f4864:	8ac3      	ldrh	r3, [r0, #22]
 23f4866:	6123      	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
 23f4868:	b90b      	cbnz	r3, 23f486e <_ZN12FatPartition4initEP9SdSpiCardhm+0xb0>
 23f486a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
 23f486c:	6123      	str	r3, [r4, #16]
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
 23f486e:	89c1      	ldrh	r1, [r0, #14]
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
 23f4870:	6922      	ldr	r2, [r4, #16]
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
 23f4872:	4429      	add	r1, r5
 23f4874:	61a1      	str	r1, [r4, #24]
  return *reinterpret_cast<const uint16_t*>(src);
 23f4876:	f8b0 3011 	ldrh.w	r3, [r0, #17]
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
 23f487a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
 23f487e:	8123      	strh	r3, [r4, #8]
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
 23f4880:	015b      	lsls	r3, r3, #5
 23f4882:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
 23f4886:	6221      	str	r1, [r4, #32]
      m_rootDirStart +
 23f4888:	eb01 2153 	add.w	r1, r1, r3, lsr #9
  m_dataStartSector =
 23f488c:	6161      	str	r1, [r4, #20]
  totalSectors = getLe16(bpb->totalSectors16);
 23f488e:	f8b0 3013 	ldrh.w	r3, [r0, #19]
  if (totalSectors == 0) {
 23f4892:	b903      	cbnz	r3, 23f4896 <_ZN12FatPartition4initEP9SdSpiCardhm+0xd8>
  return *reinterpret_cast<const uint32_t*>(src);
 23f4894:	6a03      	ldr	r3, [r0, #32]
  countOfClusters = totalSectors - (m_dataStartSector - volStart);
 23f4896:	1a6d      	subs	r5, r5, r1
  countOfClusters >>= m_sectorsPerClusterShift;
 23f4898:	79a1      	ldrb	r1, [r4, #6]
  countOfClusters = totalSectors - (m_dataStartSector - volStart);
 23f489a:	441d      	add	r5, r3
  countOfClusters >>= m_sectorsPerClusterShift;
 23f489c:	40cd      	lsrs	r5, r1
  m_lastCluster = countOfClusters + 1;
 23f489e:	1c6b      	adds	r3, r5, #1
 23f48a0:	61e3      	str	r3, [r4, #28]
  if (countOfClusters < 4085) {
 23f48a2:	f640 73f4 	movw	r3, #4084	; 0xff4
 23f48a6:	429d      	cmp	r5, r3
 23f48a8:	d802      	bhi.n	23f48b0 <_ZN12FatPartition4initEP9SdSpiCardhm+0xf2>
    m_fatType = 12;
 23f48aa:	230c      	movs	r3, #12
 23f48ac:	71e3      	strb	r3, [r4, #7]
 23f48ae:	e7a0      	b.n	23f47f2 <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
  } else if (countOfClusters < 65525) {
 23f48b0:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 23f48b4:	429d      	cmp	r5, r3
 23f48b6:	bf89      	itett	hi
 23f48b8:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
 23f48ba:	2310      	movls	r3, #16
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
 23f48bc:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 23f48be:	2320      	movhi	r3, #32
  return true;
 23f48c0:	2001      	movs	r0, #1
    m_fatType = 32;
 23f48c2:	71e3      	strb	r3, [r4, #7]
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) { m_mirrorOffset = offset; }
 23f48c4:	6322      	str	r2, [r4, #48]	; 0x30
 23f48c6:	f8c4 2240 	str.w	r2, [r4, #576]	; 0x240
  return true;
 23f48ca:	e793      	b.n	23f47f4 <_ZN12FatPartition4initEP9SdSpiCardhm+0x36>

023f48cc <_ZN10FsBaseFile4copyEPKS_>:
  return *this;
}
#endif  // FILE_COPY_CONSTRUCTOR_SELECT
//------------------------------------------------------------------------------
void FsBaseFile::copy(const FsBaseFile* from) {
  if (from != this) {
 23f48cc:	4281      	cmp	r1, r0
void FsBaseFile::copy(const FsBaseFile* from) {
 23f48ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f48d0:	4605      	mov	r5, r0
 23f48d2:	460e      	mov	r6, r1
  if (from != this) {
 23f48d4:	d016      	beq.n	23f4904 <_ZN10FsBaseFile4copyEPKS_+0x38>
    m_fFile = nullptr;
 23f48d6:	2700      	movs	r7, #0
    m_xFile = nullptr;
 23f48d8:	e9c0 770e 	strd	r7, r7, [r0, #56]	; 0x38
    if (from->m_fFile) {
 23f48dc:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 23f48de:	b194      	cbz	r4, 23f4906 <_ZN10FsBaseFile4copyEPKS_+0x3a>
      m_fFile = new (m_fileMem) FatFile;
 23f48e0:	4601      	mov	r1, r0
 23f48e2:	2024      	movs	r0, #36	; 0x24
 23f48e4:	f000 f887 	bl	23f49f6 <_ZnwjPm>
 23f48e8:	4604      	mov	r4, r0
 23f48ea:	b108      	cbz	r0, 23f48f0 <_ZN10FsBaseFile4copyEPKS_+0x24>
 23f48ec:	8007      	strh	r7, [r0, #0]
 23f48ee:	7087      	strb	r7, [r0, #2]
 23f48f0:	63ac      	str	r4, [r5, #56]	; 0x38
      m_fFile->copy(from->m_fFile);
 23f48f2:	6bb5      	ldr	r5, [r6, #56]	; 0x38
    if (from != this) {
 23f48f4:	42a5      	cmp	r5, r4
 23f48f6:	d005      	beq.n	23f4904 <_ZN10FsBaseFile4copyEPKS_+0x38>
      *this = *from;
 23f48f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f48fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f48fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f48fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f4900:	682b      	ldr	r3, [r5, #0]
 23f4902:	6023      	str	r3, [r4, #0]
    } else if (from->m_xFile) {
      m_xFile = new (m_fileMem) ExFatFile;
      m_xFile->copy(from->m_xFile);
    }
  }
}
 23f4904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (from->m_xFile) {
 23f4906:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 23f4908:	2b00      	cmp	r3, #0
 23f490a:	d0fb      	beq.n	23f4904 <_ZN10FsBaseFile4copyEPKS_+0x38>
      m_xFile = new (m_fileMem) ExFatFile;
 23f490c:	4601      	mov	r1, r0
 23f490e:	2038      	movs	r0, #56	; 0x38
 23f4910:	f000 f871 	bl	23f49f6 <_ZnwjPm>
 23f4914:	b110      	cbz	r0, 23f491c <_ZN10FsBaseFile4copyEPKS_+0x50>
  ExFatFile() {}
 23f4916:	f880 4031 	strb.w	r4, [r0, #49]	; 0x31
 23f491a:	8644      	strh	r4, [r0, #50]	; 0x32
 23f491c:	63e8      	str	r0, [r5, #60]	; 0x3c
      m_xFile->copy(from->m_xFile);
 23f491e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    if (from != this) {
 23f4920:	4283      	cmp	r3, r0
 23f4922:	d0ef      	beq.n	23f4904 <_ZN10FsBaseFile4copyEPKS_+0x38>
      *this = *from;
 23f4924:	f103 0234 	add.w	r2, r3, #52	; 0x34
 23f4928:	f853 1b04 	ldr.w	r1, [r3], #4
 23f492c:	4293      	cmp	r3, r2
 23f492e:	f840 1b04 	str.w	r1, [r0], #4
 23f4932:	d1f9      	bne.n	23f4928 <_ZN10FsBaseFile4copyEPKS_+0x5c>
 23f4934:	e7e6      	b.n	23f4904 <_ZN10FsBaseFile4copyEPKS_+0x38>

023f4936 <_ZN10FsBaseFile4moveEPS_>:
//------------------------------------------------------------------------------
void FsBaseFile::move(FsBaseFile* from) {
  if (from != this) {
 23f4936:	4281      	cmp	r1, r0
void FsBaseFile::move(FsBaseFile* from) {
 23f4938:	b510      	push	{r4, lr}
 23f493a:	460c      	mov	r4, r1
  if (from != this) {
 23f493c:	d004      	beq.n	23f4948 <_ZN10FsBaseFile4moveEPS_+0x12>
    copy(from);
 23f493e:	f7ff ffc5 	bl	23f48cc <_ZN10FsBaseFile4copyEPKS_>
    from->m_fFile = nullptr;
 23f4942:	2300      	movs	r3, #0
    from->m_xFile = nullptr;
 23f4944:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
  }
}
 23f4948:	bd10      	pop	{r4, pc}

023f494a <_ZN10FsBaseFile5closeEv>:
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
 23f494a:	b510      	push	{r4, lr}
 23f494c:	4604      	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
 23f494e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 23f4950:	b138      	cbz	r0, 23f4962 <_ZN10FsBaseFile5closeEv+0x18>
 23f4952:	f7fd fa87 	bl	23f1e64 <_ZN7FatFile5closeEv>
  m_fFile = nullptr;
 23f4956:	2300      	movs	r3, #0
  m_xFile = nullptr;
  return rtn;
}
 23f4958:	f000 0001 	and.w	r0, r0, #1
  m_xFile = nullptr;
 23f495c:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
}
 23f4960:	bd10      	pop	{r4, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
 23f4962:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 23f4964:	b110      	cbz	r0, 23f496c <_ZN10FsBaseFile5closeEv+0x22>
 23f4966:	f7fe fcf5 	bl	23f3354 <_ZN9ExFatFile5closeEv>
 23f496a:	e7f4      	b.n	23f4956 <_ZN10FsBaseFile5closeEv+0xc>
 23f496c:	2001      	movs	r0, #1
 23f496e:	e7f2      	b.n	23f4956 <_ZN10FsBaseFile5closeEv+0xc>

023f4970 <_ZN10FsBaseFile4openEP8FsVolumePKci>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
 23f4970:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f4972:	4604      	mov	r4, r0
  if (!vol) {
 23f4974:	460d      	mov	r5, r1
 23f4976:	b911      	cbnz	r1, 23f497e <_ZN10FsBaseFile4openEP8FsVolumePKci+0xe>
    return false;
 23f4978:	2000      	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
 23f497a:	b002      	add	sp, #8
 23f497c:	bd70      	pop	{r4, r5, r6, pc}
 23f497e:	e9cd 2300 	strd	r2, r3, [sp]
  close();
 23f4982:	f7ff ffe2 	bl	23f494a <_ZN10FsBaseFile5closeEv>
  if (vol->m_fVol) {
 23f4986:	e9dd 2300 	ldrd	r2, r3, [sp]
 23f498a:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
 23f498e:	b1b6      	cbz	r6, 23f49be <_ZN10FsBaseFile4openEP8FsVolumePKci+0x4e>
    m_fFile = new (m_fileMem) FatFile;
 23f4990:	4621      	mov	r1, r4
 23f4992:	2024      	movs	r0, #36	; 0x24
 23f4994:	f000 f82f 	bl	23f49f6 <_ZnwjPm>
 23f4998:	e9dd 2300 	ldrd	r2, r3, [sp]
 23f499c:	b110      	cbz	r0, 23f49a4 <_ZN10FsBaseFile4openEP8FsVolumePKci+0x34>
  FatFile() {}
 23f499e:	2100      	movs	r1, #0
 23f49a0:	8001      	strh	r1, [r0, #0]
 23f49a2:	7081      	strb	r1, [r0, #2]
 23f49a4:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
 23f49a6:	b910      	cbnz	r0, 23f49ae <_ZN10FsBaseFile4openEP8FsVolumePKci+0x3e>
    m_fFile = nullptr;
 23f49a8:	2000      	movs	r0, #0
 23f49aa:	63a0      	str	r0, [r4, #56]	; 0x38
 23f49ac:	e7e5      	b.n	23f497a <_ZN10FsBaseFile4openEP8FsVolumePKci+0xa>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
 23f49ae:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
 23f49b2:	f7fd faa8 	bl	23f1f06 <_ZN7FatFile4openEP9FatVolumePKci>
 23f49b6:	2800      	cmp	r0, #0
 23f49b8:	d0f6      	beq.n	23f49a8 <_ZN10FsBaseFile4openEP8FsVolumePKci+0x38>
      return true;
 23f49ba:	2001      	movs	r0, #1
 23f49bc:	e7dd      	b.n	23f497a <_ZN10FsBaseFile4openEP8FsVolumePKci+0xa>
  } else if (vol->m_xVol) {
 23f49be:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
 23f49c2:	e9cd 2300 	strd	r2, r3, [sp]
 23f49c6:	2900      	cmp	r1, #0
 23f49c8:	d0d6      	beq.n	23f4978 <_ZN10FsBaseFile4openEP8FsVolumePKci+0x8>
    m_xFile = new (m_fileMem) ExFatFile;
 23f49ca:	4621      	mov	r1, r4
 23f49cc:	2038      	movs	r0, #56	; 0x38
 23f49ce:	f000 f812 	bl	23f49f6 <_ZnwjPm>
 23f49d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 23f49d6:	b110      	cbz	r0, 23f49de <_ZN10FsBaseFile4openEP8FsVolumePKci+0x6e>
  ExFatFile() {}
 23f49d8:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
 23f49dc:	8646      	strh	r6, [r0, #50]	; 0x32
 23f49de:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
 23f49e0:	b910      	cbnz	r0, 23f49e8 <_ZN10FsBaseFile4openEP8FsVolumePKci+0x78>
    m_xFile = nullptr;
 23f49e2:	2000      	movs	r0, #0
 23f49e4:	63e0      	str	r0, [r4, #60]	; 0x3c
 23f49e6:	e7c8      	b.n	23f497a <_ZN10FsBaseFile4openEP8FsVolumePKci+0xa>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
 23f49e8:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
 23f49ec:	f7ff f858 	bl	23f3aa0 <_ZN9ExFatFile4openEP11ExFatVolumePKci>
 23f49f0:	2800      	cmp	r0, #0
 23f49f2:	d0f6      	beq.n	23f49e2 <_ZN10FsBaseFile4openEP8FsVolumePKci+0x72>
 23f49f4:	e7e1      	b.n	23f49ba <_ZN10FsBaseFile4openEP8FsVolumePKci+0x4a>

023f49f6 <_ZnwjPm>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
 23f49f6:	4608      	mov	r0, r1
 23f49f8:	4770      	bx	lr
	...

023f49fc <_ZN8FsVolume5beginEP9SdSpiCardbhm>:
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part,
                     uint32_t volStart) {
 23f49fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_fVol = nullptr;
 23f4a00:	2600      	movs	r6, #0
                     uint32_t volStart) {
 23f4a02:	4605      	mov	r5, r0
  m_fVol = nullptr;
 23f4a04:	f8c0 6480 	str.w	r6, [r0, #1152]	; 0x480
                     uint32_t volStart) {
 23f4a08:	460f      	mov	r7, r1
  m_xVol = new (m_volMem) ExFatVolume;
 23f4a0a:	4601      	mov	r1, r0
 23f4a0c:	f44f 6090 	mov.w	r0, #1152	; 0x480
                     uint32_t volStart) {
 23f4a10:	4690      	mov	r8, r2
 23f4a12:	469a      	mov	sl, r3
 23f4a14:	f8dd 9020 	ldr.w	r9, [sp, #32]
  m_xVol = new (m_volMem) ExFatVolume;
 23f4a18:	f7ff ffed 	bl	23f49f6 <_ZnwjPm>
 23f4a1c:	4604      	mov	r4, r0
 23f4a1e:	b180      	cbz	r0, 23f4a42 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x46>
 23f4a20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    m_blockDev = blockDev;
 23f4a24:	6046      	str	r6, [r0, #4]
    m_status = 0;
 23f4a26:	7006      	strb	r6, [r0, #0]
    m_sector = 0XFFFFFFFF;
 23f4a28:	6083      	str	r3, [r0, #8]
    m_blockDev = blockDev;
 23f4a2a:	f8c0 6214 	str.w	r6, [r0, #532]	; 0x214
    m_status = 0;
 23f4a2e:	f880 6210 	strb.w	r6, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
 23f4a32:	f8c0 3218 	str.w	r3, [r0, #536]	; 0x218
  ExFatPartition() = default;  // cppcheck-suppress uninitMemberVar
 23f4a36:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
 23f4a3a:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
 23f4a3e:	f8a0 647a 	strh.w	r6, [r0, #1146]	; 0x47a
 23f4a42:	f8c5 4484 	str.w	r4, [r5, #1156]	; 0x484
  if (m_xVol && m_xVol->begin(blockDev, false, part, volStart)) {
 23f4a46:	b1ec      	cbz	r4, 23f4a84 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x88>
    if (!init(dev, part, volStart)) {
 23f4a48:	464b      	mov	r3, r9
 23f4a4a:	4652      	mov	r2, sl
 23f4a4c:	4639      	mov	r1, r7
 23f4a4e:	4620      	mov	r0, r4
 23f4a50:	f7ff fd68 	bl	23f4524 <_ZN14ExFatPartition4initEP9SdSpiCardhm>
 23f4a54:	b1b0      	cbz	r0, 23f4a84 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x88>
    m_vwd.close();
 23f4a56:	f504 6689 	add.w	r6, r4, #1096	; 0x448
 23f4a5a:	4630      	mov	r0, r6
 23f4a5c:	f7fe fc7a 	bl	23f3354 <_ZN9ExFatFile5closeEv>
    return m_vwd.openRoot(this);
 23f4a60:	4621      	mov	r1, r4
 23f4a62:	4630      	mov	r0, r6
 23f4a64:	f7fe fc80 	bl	23f3368 <_ZN9ExFatFile8openRootEP11ExFatVolume>
    if (!chdir()) {
 23f4a68:	b160      	cbz	r0, 23f4a84 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x88>
    if (setCwv || !m_cwv) {
 23f4a6a:	4b21      	ldr	r3, [pc, #132]	; (23f4af0 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xf4>)
    if (setCwv || !m_cwv) {
 23f4a6c:	681a      	ldr	r2, [r3, #0]
 23f4a6e:	b902      	cbnz	r2, 23f4a72 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x76>
      m_cwv = this;
 23f4a70:	601c      	str	r4, [r3, #0]
  }
  m_fVol = nullptr;
  return false;

done:
  if (setCwv || !m_cwv) {
 23f4a72:	4b20      	ldr	r3, [pc, #128]	; (23f4af4 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xf8>)
 23f4a74:	f1b8 0f00 	cmp.w	r8, #0
 23f4a78:	d101      	bne.n	23f4a7e <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x82>
 23f4a7a:	681a      	ldr	r2, [r3, #0]
 23f4a7c:	b902      	cbnz	r2, 23f4a80 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x84>
    m_cwv = this;
 23f4a7e:	601d      	str	r5, [r3, #0]
  }
  return true;
 23f4a80:	2001      	movs	r0, #1
 23f4a82:	e033      	b.n	23f4aec <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xf0>
  m_xVol = nullptr;
 23f4a84:	2600      	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
 23f4a86:	4629      	mov	r1, r5
 23f4a88:	f44f 608d 	mov.w	r0, #1128	; 0x468
  m_xVol = nullptr;
 23f4a8c:	f8c5 6484 	str.w	r6, [r5, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
 23f4a90:	f7ff ffb1 	bl	23f49f6 <_ZnwjPm>
 23f4a94:	4604      	mov	r4, r0
 23f4a96:	b180      	cbz	r0, 23f4aba <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xbe>
 23f4a98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  FatPartition() = default;  // cppcheck-suppress uninitMemberVar
 23f4a9c:	71c6      	strb	r6, [r0, #7]
    m_blockDev = blockDev;
 23f4a9e:	6286      	str	r6, [r0, #40]	; 0x28
    m_status = 0;
 23f4aa0:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
 23f4aa4:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_blockDev = blockDev;
 23f4aa6:	f8c0 6238 	str.w	r6, [r0, #568]	; 0x238
    m_status = 0;
 23f4aaa:	f880 6234 	strb.w	r6, [r0, #564]	; 0x234
    m_sector = 0XFFFFFFFF;
 23f4aae:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
 23f4ab2:	f8a0 6444 	strh.w	r6, [r0, #1092]	; 0x444
 23f4ab6:	f880 6446 	strb.w	r6, [r0, #1094]	; 0x446
 23f4aba:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
  if (m_fVol && m_fVol->begin(blockDev, false, part, volStart)) {
 23f4abe:	b194      	cbz	r4, 23f4ae6 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xea>
    if (!init(dev, part, volStart)) {
 23f4ac0:	464b      	mov	r3, r9
 23f4ac2:	4652      	mov	r2, sl
 23f4ac4:	4639      	mov	r1, r7
 23f4ac6:	4620      	mov	r0, r4
 23f4ac8:	f7ff fe79 	bl	23f47be <_ZN12FatPartition4initEP9SdSpiCardhm>
 23f4acc:	b158      	cbz	r0, 23f4ae6 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xea>
    m_vwd.close();
 23f4ace:	f204 4644 	addw	r6, r4, #1092	; 0x444
 23f4ad2:	4630      	mov	r0, r6
 23f4ad4:	f7fd f9c6 	bl	23f1e64 <_ZN7FatFile5closeEv>
    return m_vwd.openRoot(this);
 23f4ad8:	4621      	mov	r1, r4
 23f4ada:	4630      	mov	r0, r6
 23f4adc:	f7fc ffb5 	bl	23f1a4a <_ZN7FatFile8openRootEP9FatVolume>
    if (!chdir()) {
 23f4ae0:	b108      	cbz	r0, 23f4ae6 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xea>
    if (setCwv || !m_cwv) {
 23f4ae2:	4b05      	ldr	r3, [pc, #20]	; (23f4af8 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xfc>)
 23f4ae4:	e7c2      	b.n	23f4a6c <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x70>
  m_fVol = nullptr;
 23f4ae6:	2000      	movs	r0, #0
 23f4ae8:	f8c5 0480 	str.w	r0, [r5, #1152]	; 0x480
}
 23f4aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f4af0:	1007ae90 	.word	0x1007ae90
 23f4af4:	1007ae94 	.word	0x1007ae94
 23f4af8:	1007ae88 	.word	0x1007ae88

023f4afc <_ZN8FsVolume4openEPKci>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char* path, oflag_t oflag) {
 23f4afc:	b538      	push	{r3, r4, r5, lr}
 23f4afe:	4604      	mov	r4, r0
    Stream() {_timeout=1000;}
 23f4b00:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 23f4b04:	2000      	movs	r0, #0
 23f4b06:	e9c4 0501 	strd	r0, r5, [r4, #4]
  FsBaseFile() = default;  // cppcheck-suppress uninitMemberVar
 23f4b0a:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23f4b0e:	4620      	mov	r0, r4
 23f4b10:	4d03      	ldr	r5, [pc, #12]	; (23f4b20 <_ZN8FsVolume4openEPKci+0x24>)
 23f4b12:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
 23f4b16:	f7ff ff2b 	bl	23f4970 <_ZN10FsBaseFile4openEP8FsVolumePKci>
  return tmpFile;
}
 23f4b1a:	4620      	mov	r0, r4
 23f4b1c:	bd38      	pop	{r3, r4, r5, pc}
 23f4b1e:	bf00      	nop
 23f4b20:	023fe4c0 	.word	0x023fe4c0

023f4b24 <_Z8sdCsInith>:
 */
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) { pinMode(pin, OUTPUT); }
 23f4b24:	2101      	movs	r1, #1
 23f4b26:	f004 bdf9 	b.w	23f971c <pinMode>

023f4b2a <_Z9sdCsWritehb>:
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level ? HIGH : LOW);
 23f4b2a:	f004 be08 	b.w	23f973e <digitalWrite>

023f4b2e <_ZN7FsCache4syncEv>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
 23f4b2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 23f4b30:	7803      	ldrb	r3, [r0, #0]
bool FsCache::sync() {
 23f4b32:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 23f4b34:	07da      	lsls	r2, r3, #31
 23f4b36:	d51e      	bpl.n	23f4b76 <_ZN7FsCache4syncEv+0x48>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
 23f4b38:	f100 0210 	add.w	r2, r0, #16
 23f4b3c:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 23f4b40:	9201      	str	r2, [sp, #4]
 23f4b42:	f7fe f96e 	bl	23f2e22 <_ZN9SdSpiCard11writeSectorEmPKh>
 23f4b46:	9a01      	ldr	r2, [sp, #4]
 23f4b48:	4605      	mov	r5, r0
 23f4b4a:	b918      	cbnz	r0, 23f4b54 <_ZN7FsCache4syncEv+0x26>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 23f4b4c:	2500      	movs	r5, #0
}
 23f4b4e:	4628      	mov	r0, r5
 23f4b50:	b003      	add	sp, #12
 23f4b52:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 23f4b54:	7823      	ldrb	r3, [r4, #0]
 23f4b56:	079b      	lsls	r3, r3, #30
 23f4b58:	d404      	bmi.n	23f4b64 <_ZN7FsCache4syncEv+0x36>
    m_status &= ~CACHE_STATUS_DIRTY;
 23f4b5a:	7823      	ldrb	r3, [r4, #0]
 23f4b5c:	f023 0301 	bic.w	r3, r3, #1
 23f4b60:	7023      	strb	r3, [r4, #0]
 23f4b62:	e7f4      	b.n	23f4b4e <_ZN7FsCache4syncEv+0x20>
      if (!m_blockDev->writeSector(m_sector + m_mirrorOffset, m_buffer)) {
 23f4b64:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 23f4b68:	6860      	ldr	r0, [r4, #4]
 23f4b6a:	4419      	add	r1, r3
 23f4b6c:	f7fe f959 	bl	23f2e22 <_ZN9SdSpiCard11writeSectorEmPKh>
 23f4b70:	2800      	cmp	r0, #0
 23f4b72:	d1f2      	bne.n	23f4b5a <_ZN7FsCache4syncEv+0x2c>
 23f4b74:	e7ea      	b.n	23f4b4c <_ZN7FsCache4syncEv+0x1e>
  return true;
 23f4b76:	2501      	movs	r5, #1
 23f4b78:	e7e9      	b.n	23f4b4e <_ZN7FsCache4syncEv+0x20>

023f4b7a <_ZN7FsCache7prepareEmh>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
 23f4b7a:	b570      	push	{r4, r5, r6, lr}
  if (!m_blockDev) {
 23f4b7c:	6843      	ldr	r3, [r0, #4]
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
 23f4b7e:	4604      	mov	r4, r0
 23f4b80:	460e      	mov	r6, r1
 23f4b82:	4615      	mov	r5, r2
  if (!m_blockDev) {
 23f4b84:	b90b      	cbnz	r3, 23f4b8a <_ZN7FsCache7prepareEmh+0x10>
  return nullptr;
 23f4b86:	2000      	movs	r0, #0
}
 23f4b88:	bd70      	pop	{r4, r5, r6, pc}
  if (m_sector != sector) {
 23f4b8a:	6883      	ldr	r3, [r0, #8]
 23f4b8c:	428b      	cmp	r3, r1
 23f4b8e:	d008      	beq.n	23f4ba2 <_ZN7FsCache7prepareEmh+0x28>
    if (!sync()) {
 23f4b90:	f7ff ffcd 	bl	23f4b2e <_ZN7FsCache4syncEv>
 23f4b94:	2800      	cmp	r0, #0
 23f4b96:	d0f6      	beq.n	23f4b86 <_ZN7FsCache7prepareEmh+0xc>
    if (!(option & CACHE_OPTION_NO_READ)) {
 23f4b98:	076b      	lsls	r3, r5, #29
 23f4b9a:	d50a      	bpl.n	23f4bb2 <_ZN7FsCache7prepareEmh+0x38>
    m_status = 0;
 23f4b9c:	2300      	movs	r3, #0
    m_sector = sector;
 23f4b9e:	60a6      	str	r6, [r4, #8]
    m_status = 0;
 23f4ba0:	7023      	strb	r3, [r4, #0]
  m_status |= option & CACHE_STATUS_MASK;
 23f4ba2:	4620      	mov	r0, r4
 23f4ba4:	7822      	ldrb	r2, [r4, #0]
 23f4ba6:	f005 0503 	and.w	r5, r5, #3
 23f4baa:	4315      	orrs	r5, r2
 23f4bac:	f800 5b10 	strb.w	r5, [r0], #16
  return m_buffer;
 23f4bb0:	e7ea      	b.n	23f4b88 <_ZN7FsCache7prepareEmh+0xe>
      if (!m_blockDev->readSector(sector, m_buffer)) {
 23f4bb2:	4631      	mov	r1, r6
 23f4bb4:	6860      	ldr	r0, [r4, #4]
 23f4bb6:	f104 0210 	add.w	r2, r4, #16
 23f4bba:	f7fe f8eb 	bl	23f2d94 <_ZN9SdSpiCard10readSectorEmPh>
 23f4bbe:	2800      	cmp	r0, #0
 23f4bc0:	d1ec      	bne.n	23f4b9c <_ZN7FsCache7prepareEmh+0x22>
 23f4bc2:	e7e0      	b.n	23f4b86 <_ZN7FsCache7prepareEmh+0xc>

023f4bc4 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
 23f4bc4:	4770      	bx	lr

023f4bc6 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
 23f4bc6:	b510      	push	{r4, lr}
 23f4bc8:	4604      	mov	r4, r0
}
 23f4bca:	2120      	movs	r1, #32
 23f4bcc:	f7ee fb99 	bl	23e3302 <_ZdlPvj>
 23f4bd0:	4620      	mov	r0, r4
 23f4bd2:	bd10      	pop	{r4, pc}

023f4bd4 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
 23f4bd4:	b530      	push	{r4, r5, lr}
 23f4bd6:	b085      	sub	sp, #20
 23f4bd8:	4604      	mov	r4, r0
 23f4bda:	9808      	ldr	r0, [sp, #32]
        if (!context) {
 23f4bdc:	b160      	cbz	r0, 23f4bf8 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
 23f4bde:	6840      	ldr	r0, [r0, #4]
 23f4be0:	b150      	cbz	r0, 23f4bf8 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
 23f4be2:	6885      	ldr	r5, [r0, #8]
 23f4be4:	b145      	cbz	r5, 23f4bf8 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
 23f4be6:	e9cd 4102 	strd	r4, r1, [sp, #8]
 23f4bea:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f4bee:	68c4      	ldr	r4, [r0, #12]
 23f4bf0:	466a      	mov	r2, sp
 23f4bf2:	ab01      	add	r3, sp, #4
 23f4bf4:	a902      	add	r1, sp, #8
 23f4bf6:	47a0      	blx	r4
    }
 23f4bf8:	b005      	add	sp, #20
 23f4bfa:	bd30      	pop	{r4, r5, pc}

023f4bfc <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f4bfc:	b530      	push	{r4, r5, lr}
 23f4bfe:	6813      	ldr	r3, [r2, #0]
	    return __source._M_access<_Functor*>();
 23f4c00:	6800      	ldr	r0, [r0, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f4c02:	b085      	sub	sp, #20
 23f4c04:	9301      	str	r3, [sp, #4]
      if (_M_empty())
 23f4c06:	6883      	ldr	r3, [r0, #8]
 23f4c08:	e9d1 4500 	ldrd	r4, r5, [r1]
 23f4c0c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 23f4c10:	b90b      	cbnz	r3, 23f4c16 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
 23f4c12:	f004 febf 	bl	23f9994 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f4c16:	68c3      	ldr	r3, [r0, #12]
 23f4c18:	aa01      	add	r2, sp, #4
 23f4c1a:	a902      	add	r1, sp, #8
 23f4c1c:	4798      	blx	r3
      }
 23f4c1e:	b005      	add	sp, #20
 23f4c20:	bd30      	pop	{r4, r5, pc}

023f4c22 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
 23f4c22:	2a01      	cmp	r2, #1
 23f4c24:	d102      	bne.n	23f4c2c <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f4c26:	6001      	str	r1, [r0, #0]
      }
 23f4c28:	2000      	movs	r0, #0
 23f4c2a:	4770      	bx	lr
	  switch (__op)
 23f4c2c:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23f4c2e:	bf04      	itt	eq
 23f4c30:	680b      	ldreq	r3, [r1, #0]
 23f4c32:	6003      	streq	r3, [r0, #0]
	      break;
 23f4c34:	e7f8      	b.n	23f4c28 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

023f4c36 <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23f4c36:	6803      	ldr	r3, [r0, #0]
 23f4c38:	6812      	ldr	r2, [r2, #0]
 23f4c3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f4c3e:	4718      	bx	r3

023f4c40 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23f4c40:	b510      	push	{r4, lr}
      if (_M_manager)
 23f4c42:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23f4c44:	4604      	mov	r4, r0
      if (_M_manager)
 23f4c46:	b113      	cbz	r3, 23f4c4e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23f4c48:	2203      	movs	r2, #3
 23f4c4a:	4601      	mov	r1, r0
 23f4c4c:	4798      	blx	r3
    }
 23f4c4e:	4620      	mov	r0, r4
 23f4c50:	bd10      	pop	{r4, pc}

023f4c52 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
 23f4c52:	b510      	push	{r4, lr}
            delete callableWrapper;
 23f4c54:	4604      	mov	r4, r0
 23f4c56:	b138      	cbz	r0, 23f4c68 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
 23f4c58:	f7ff fff2 	bl	23f4c40 <_ZNSt14_Function_baseD1Ev>
 23f4c5c:	4620      	mov	r0, r4
        };
 23f4c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
 23f4c62:	2110      	movs	r1, #16
 23f4c64:	f7ee bb4d 	b.w	23e3302 <_ZdlPvj>
        };
 23f4c68:	bd10      	pop	{r4, pc}

023f4c6a <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
    va_start(args, fmt);
    log(level, fmt, args);
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
 23f4c6a:	b510      	push	{r4, lr}
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23f4c6c:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
 23f4c70:	4604      	mov	r4, r0
 23f4c72:	4608      	mov	r0, r1
    attr.flags = 0;
 23f4c74:	2100      	movs	r1, #0
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
 23f4c76:	b08a      	sub	sp, #40	; 0x28
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f4c78:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
 23f4c7c:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f4c80:	460b      	mov	r3, r1
 23f4c82:	aa02      	add	r2, sp, #8
 23f4c84:	6821      	ldr	r1, [r4, #0]
 23f4c86:	f001 ffd9 	bl	23f6c3c <log_message_v>
}
 23f4c8a:	b00a      	add	sp, #40	; 0x28
 23f4c8c:	bd10      	pop	{r4, pc}

023f4c8e <_ZNK5spark6Logger4infoEPKcz>:
inline void spark::Logger::info(const char *fmt, ...) const {
 23f4c8e:	b40e      	push	{r1, r2, r3}
 23f4c90:	b503      	push	{r0, r1, lr}
 23f4c92:	ab03      	add	r3, sp, #12
 23f4c94:	f853 2b04 	ldr.w	r2, [r3], #4
    log(LOG_LEVEL_INFO, fmt, args);
 23f4c98:	211e      	movs	r1, #30
    va_start(args, fmt);
 23f4c9a:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_INFO, fmt, args);
 23f4c9c:	f7ff ffe5 	bl	23f4c6a <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
 23f4ca0:	b002      	add	sp, #8
 23f4ca2:	f85d eb04 	ldr.w	lr, [sp], #4
 23f4ca6:	b003      	add	sp, #12
 23f4ca8:	4770      	bx	lr

023f4caa <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
 23f4caa:	b40e      	push	{r1, r2, r3}
 23f4cac:	b503      	push	{r0, r1, lr}
 23f4cae:	ab03      	add	r3, sp, #12
 23f4cb0:	f853 2b04 	ldr.w	r2, [r3], #4
    log(LOG_LEVEL_ERROR, fmt, args);
 23f4cb4:	2132      	movs	r1, #50	; 0x32
    va_start(args, fmt);
 23f4cb6:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
 23f4cb8:	f7ff ffd7 	bl	23f4c6a <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
 23f4cbc:	b002      	add	sp, #8
 23f4cbe:	f85d eb04 	ldr.w	lr, [sp], #4
 23f4cc2:	b003      	add	sp, #12
 23f4cc4:	4770      	bx	lr

023f4cc6 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
 23f4cc6:	b40e      	push	{r1, r2, r3}
 23f4cc8:	b503      	push	{r0, r1, lr}
 23f4cca:	ab03      	add	r3, sp, #12
 23f4ccc:	f853 2b04 	ldr.w	r2, [r3], #4
    log(LOG_LEVEL_TRACE, fmt, args);
 23f4cd0:	2101      	movs	r1, #1
    va_start(args, fmt);
 23f4cd2:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
 23f4cd4:	f7ff ffc9 	bl	23f4c6a <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
 23f4cd8:	b002      	add	sp, #8
 23f4cda:	f85d eb04 	ldr.w	lr, [sp], #4
 23f4cde:	b003      	add	sp, #12
 23f4ce0:	4770      	bx	lr
	...

023f4ce4 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
 23f4ce4:	7202      	strb	r2, [r0, #8]
 23f4ce6:	22ff      	movs	r2, #255	; 0xff
 23f4ce8:	8142      	strh	r2, [r0, #10]
 23f4cea:	2200      	movs	r2, #0
 23f4cec:	b510      	push	{r4, lr}
 23f4cee:	e9c0 2203 	strd	r2, r2, [r0, #12]
 23f4cf2:	6142      	str	r2, [r0, #20]
 23f4cf4:	7602      	strb	r2, [r0, #24]
 23f4cf6:	61c2      	str	r2, [r0, #28]
    instance = this;
 23f4cf8:	4a02      	ldr	r2, [pc, #8]	; (23f4d04 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
 23f4cfa:	4c03      	ldr	r4, [pc, #12]	; (23f4d08 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
 23f4cfc:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
 23f4cfe:	e9c0 4100 	strd	r4, r1, [r0]
}
 23f4d02:	bd10      	pop	{r4, pc}
 23f4d04:	1007aea0 	.word	0x1007aea0
 23f4d08:	023ff59c 	.word	0x023ff59c

023f4d0c <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
 23f4d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23f4d10:	f89d 8020 	ldrb.w	r8, [sp, #32]
 23f4d14:	4604      	mov	r4, r0
 23f4d16:	4689      	mov	r9, r1
 23f4d18:	4616      	mov	r6, r2
 23f4d1a:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
 23f4d1c:	f1b8 0f00 	cmp.w	r8, #0
 23f4d20:	d002      	beq.n	23f4d28 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
 23f4d22:	6840      	ldr	r0, [r0, #4]
 23f4d24:	f003 f8ec 	bl	23f7f00 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
 23f4d28:	7a21      	ldrb	r1, [r4, #8]
 23f4d2a:	6860      	ldr	r0, [r4, #4]
 23f4d2c:	f003 f8da 	bl	23f7ee4 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
 23f4d30:	6860      	ldr	r0, [r4, #4]
 23f4d32:	4649      	mov	r1, r9
 23f4d34:	6803      	ldr	r3, [r0, #0]
 23f4d36:	689b      	ldr	r3, [r3, #8]
 23f4d38:	4798      	blx	r3
    int stat = wire.endTransmission(false);
 23f4d3a:	2100      	movs	r1, #0
 23f4d3c:	6860      	ldr	r0, [r4, #4]
 23f4d3e:	f003 f8d8 	bl	23f7ef2 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
 23f4d42:	4605      	mov	r5, r0
 23f4d44:	bb00      	cbnz	r0, 23f4d88 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
 23f4d46:	2301      	movs	r3, #1
 23f4d48:	463a      	mov	r2, r7
 23f4d4a:	7a21      	ldrb	r1, [r4, #8]
 23f4d4c:	6860      	ldr	r0, [r4, #4]
 23f4d4e:	f003 f8b2 	bl	23f7eb6 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
 23f4d52:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
 23f4d54:	4603      	mov	r3, r0
        if (count == num) {
 23f4d56:	d109      	bne.n	23f4d6c <_ZN6AB180513readRegistersEhPhjb+0x60>
 23f4d58:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
 23f4d5a:	42be      	cmp	r6, r7
 23f4d5c:	d01c      	beq.n	23f4d98 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
 23f4d5e:	6860      	ldr	r0, [r4, #4]
 23f4d60:	6803      	ldr	r3, [r0, #0]
 23f4d62:	695b      	ldr	r3, [r3, #20]
 23f4d64:	4798      	blx	r3
 23f4d66:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
 23f4d6a:	e7f6      	b.n	23f4d5a <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
 23f4d6c:	464a      	mov	r2, r9
 23f4d6e:	490b      	ldr	r1, [pc, #44]	; (23f4d9c <_ZN6AB180513readRegistersEhPhjb+0x90>)
 23f4d70:	480b      	ldr	r0, [pc, #44]	; (23f4da0 <_ZN6AB180513readRegistersEhPhjb+0x94>)
 23f4d72:	f7ff ff9a 	bl	23f4caa <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
 23f4d76:	f1b8 0f00 	cmp.w	r8, #0
 23f4d7a:	d002      	beq.n	23f4d82 <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
 23f4d7c:	6860      	ldr	r0, [r4, #4]
 23f4d7e:	f003 f8c8 	bl	23f7f12 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
 23f4d82:	4628      	mov	r0, r5
 23f4d84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
 23f4d88:	4603      	mov	r3, r0
 23f4d8a:	464a      	mov	r2, r9
 23f4d8c:	4905      	ldr	r1, [pc, #20]	; (23f4da4 <_ZN6AB180513readRegistersEhPhjb+0x98>)
 23f4d8e:	4804      	ldr	r0, [pc, #16]	; (23f4da0 <_ZN6AB180513readRegistersEhPhjb+0x94>)
 23f4d90:	f7ff ff8b 	bl	23f4caa <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
 23f4d94:	2500      	movs	r5, #0
 23f4d96:	e7ee      	b.n	23f4d76 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
 23f4d98:	2501      	movs	r5, #1
 23f4d9a:	e7ec      	b.n	23f4d76 <_ZN6AB180513readRegistersEhPhjb+0x6a>
 23f4d9c:	023ff3c6 	.word	0x023ff3c6
 23f4da0:	1007ae9c 	.word	0x1007ae9c
 23f4da4:	023ff3eb 	.word	0x023ff3eb

023f4da8 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
 23f4da8:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
 23f4daa:	9300      	str	r3, [sp, #0]
 23f4dac:	2301      	movs	r3, #1
 23f4dae:	f7ff ffad 	bl	23f4d0c <_ZN6AB180513readRegistersEhPhjb>
}
 23f4db2:	b003      	add	sp, #12
 23f4db4:	f85d fb04 	ldr.w	pc, [sp], #4

023f4db8 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
 23f4db8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
 23f4dba:	8943      	ldrh	r3, [r0, #10]
bool AB1805::detectChip() {
 23f4dbc:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
 23f4dbe:	2bff      	cmp	r3, #255	; 0xff
 23f4dc0:	d010      	beq.n	23f4de4 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
 23f4dc2:	4e19      	ldr	r6, [pc, #100]	; (23f4e28 <_ZN6AB180510detectChipEv+0x70>)
 23f4dc4:	4d19      	ldr	r5, [pc, #100]	; (23f4e2c <_ZN6AB180510detectChipEv+0x74>)
 23f4dc6:	f001 fb73 	bl	23f64b0 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
 23f4dca:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 23f4dce:	d209      	bcs.n	23f4de4 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
 23f4dd0:	8960      	ldrh	r0, [r4, #10]
 23f4dd2:	f004 fccd 	bl	23f9770 <digitalRead>
 23f4dd6:	2801      	cmp	r0, #1
 23f4dd8:	d004      	beq.n	23f4de4 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
 23f4dda:	4631      	mov	r1, r6
 23f4ddc:	4628      	mov	r0, r5
 23f4dde:	f7ff ff56 	bl	23f4c8e <_ZNK5spark6Logger4infoEPKcz>
 23f4de2:	e7f0      	b.n	23f4dc6 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
 23f4de4:	2301      	movs	r3, #1
 23f4de6:	2128      	movs	r1, #40	; 0x28
 23f4de8:	4620      	mov	r0, r4
 23f4dea:	f10d 0207 	add.w	r2, sp, #7
 23f4dee:	f7ff ffdb 	bl	23f4da8 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
 23f4df2:	b930      	cbnz	r0, 23f4e02 <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
 23f4df4:	480d      	ldr	r0, [pc, #52]	; (23f4e2c <_ZN6AB180510detectChipEv+0x74>)
 23f4df6:	490e      	ldr	r1, [pc, #56]	; (23f4e30 <_ZN6AB180510detectChipEv+0x78>)
 23f4df8:	f7ff ff49 	bl	23f4c8e <_ZNK5spark6Logger4infoEPKcz>
 23f4dfc:	2000      	movs	r0, #0
}
 23f4dfe:	b002      	add	sp, #8
 23f4e00:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
 23f4e02:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23f4e06:	2b18      	cmp	r3, #24
 23f4e08:	d1f4      	bne.n	23f4df4 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
 23f4e0a:	2301      	movs	r3, #1
 23f4e0c:	2129      	movs	r1, #41	; 0x29
 23f4e0e:	4620      	mov	r0, r4
 23f4e10:	f10d 0207 	add.w	r2, sp, #7
 23f4e14:	f7ff ffc8 	bl	23f4da8 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
 23f4e18:	2800      	cmp	r0, #0
 23f4e1a:	d0eb      	beq.n	23f4df4 <_ZN6AB180510detectChipEv+0x3c>
 23f4e1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23f4e20:	2b05      	cmp	r3, #5
 23f4e22:	d1e7      	bne.n	23f4df4 <_ZN6AB180510detectChipEv+0x3c>
 23f4e24:	e7eb      	b.n	23f4dfe <_ZN6AB180510detectChipEv+0x46>
 23f4e26:	bf00      	nop
 23f4e28:	023ff40f 	.word	0x023ff40f
 23f4e2c:	1007ae9c 	.word	0x1007ae9c
 23f4e30:	023ff424 	.word	0x023ff424

023f4e34 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
 23f4e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f4e38:	f89d 8018 	ldrb.w	r8, [sp, #24]
 23f4e3c:	4604      	mov	r4, r0
 23f4e3e:	460f      	mov	r7, r1
 23f4e40:	4615      	mov	r5, r2
 23f4e42:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
 23f4e44:	f1b8 0f00 	cmp.w	r8, #0
 23f4e48:	d002      	beq.n	23f4e50 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
 23f4e4a:	6840      	ldr	r0, [r0, #4]
 23f4e4c:	f003 f858 	bl	23f7f00 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
 23f4e50:	7a21      	ldrb	r1, [r4, #8]
 23f4e52:	6860      	ldr	r0, [r4, #4]
 23f4e54:	f003 f846 	bl	23f7ee4 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
 23f4e58:	6860      	ldr	r0, [r4, #4]
 23f4e5a:	4639      	mov	r1, r7
 23f4e5c:	6803      	ldr	r3, [r0, #0]
 23f4e5e:	442e      	add	r6, r5
 23f4e60:	689b      	ldr	r3, [r3, #8]
 23f4e62:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
 23f4e64:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
 23f4e66:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
 23f4e68:	d005      	beq.n	23f4e76 <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
 23f4e6a:	6803      	ldr	r3, [r0, #0]
 23f4e6c:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f4e70:	689b      	ldr	r3, [r3, #8]
 23f4e72:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
 23f4e74:	e7f6      	b.n	23f4e64 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
 23f4e76:	2101      	movs	r1, #1
 23f4e78:	f003 f83b 	bl	23f7ef2 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
 23f4e7c:	4603      	mov	r3, r0
 23f4e7e:	b170      	cbz	r0, 23f4e9e <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
 23f4e80:	463a      	mov	r2, r7
 23f4e82:	4908      	ldr	r1, [pc, #32]	; (23f4ea4 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
 23f4e84:	4808      	ldr	r0, [pc, #32]	; (23f4ea8 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
 23f4e86:	f7ff ff10 	bl	23f4caa <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
 23f4e8a:	2500      	movs	r5, #0
    }

    if (lock) {
 23f4e8c:	f1b8 0f00 	cmp.w	r8, #0
 23f4e90:	d002      	beq.n	23f4e98 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
 23f4e92:	6860      	ldr	r0, [r4, #4]
 23f4e94:	f003 f83d 	bl	23f7f12 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
 23f4e98:	4628      	mov	r0, r5
 23f4e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
 23f4e9e:	2501      	movs	r5, #1
 23f4ea0:	e7f4      	b.n	23f4e8c <_ZN6AB180514writeRegistersEhPKhjb+0x58>
 23f4ea2:	bf00      	nop
 23f4ea4:	023ff431 	.word	0x023ff431
 23f4ea8:	1007ae9c 	.word	0x1007ae9c

023f4eac <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
 23f4eac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f4eae:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
 23f4eb2:	9300      	str	r3, [sp, #0]
 23f4eb4:	f10d 020f 	add.w	r2, sp, #15
 23f4eb8:	2301      	movs	r3, #1
 23f4eba:	f7ff ffbb 	bl	23f4e34 <_ZN6AB180514writeRegistersEhPKhjb>
}
 23f4ebe:	b005      	add	sp, #20
 23f4ec0:	f85d fb04 	ldr.w	pc, [sp], #4

023f4ec4 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
 23f4ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f4ec6:	460c      	mov	r4, r1
 23f4ec8:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
 23f4eca:	460a      	mov	r2, r1
 23f4ecc:	481a      	ldr	r0, [pc, #104]	; (23f4f38 <_ZN6AB18056setWDTEi+0x74>)
 23f4ece:	491b      	ldr	r1, [pc, #108]	; (23f4f3c <_ZN6AB18056setWDTEi+0x78>)
 23f4ed0:	f7ff fedd 	bl	23f4c8e <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
 23f4ed4:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
 23f4ed6:	bfb8      	it	lt
 23f4ed8:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
 23f4eda:	b97c      	cbnz	r4, 23f4efc <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
 23f4edc:	2301      	movs	r3, #1
 23f4ede:	4622      	mov	r2, r4
 23f4ee0:	211b      	movs	r1, #27
 23f4ee2:	4628      	mov	r0, r5
 23f4ee4:	f7ff ffe2 	bl	23f4eac <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
 23f4ee8:	4915      	ldr	r1, [pc, #84]	; (23f4f40 <_ZN6AB18056setWDTEi+0x7c>)
 23f4eea:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
 23f4eec:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
 23f4eee:	4812      	ldr	r0, [pc, #72]	; (23f4f38 <_ZN6AB18056setWDTEi+0x74>)
 23f4ef0:	f7ff fee9 	bl	23f4cc6 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
 23f4ef4:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
 23f4ef6:	616c      	str	r4, [r5, #20]
}
 23f4ef8:	4630      	mov	r0, r6
 23f4efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
 23f4efc:	2c03      	cmp	r4, #3
 23f4efe:	dd19      	ble.n	23f4f34 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
 23f4f00:	10a7      	asrs	r7, r4, #2
 23f4f02:	2f1f      	cmp	r7, #31
 23f4f04:	bfa8      	it	ge
 23f4f06:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
 23f4f08:	00ba      	lsls	r2, r7, #2
 23f4f0a:	f062 027c 	orn	r2, r2, #124	; 0x7c
 23f4f0e:	2301      	movs	r3, #1
 23f4f10:	211b      	movs	r1, #27
 23f4f12:	b2d2      	uxtb	r2, r2
 23f4f14:	4628      	mov	r0, r5
 23f4f16:	f7ff ffc9 	bl	23f4eac <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
 23f4f1a:	463a      	mov	r2, r7
 23f4f1c:	4603      	mov	r3, r0
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
 23f4f1e:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
 23f4f20:	4908      	ldr	r1, [pc, #32]	; (23f4f44 <_ZN6AB18056setWDTEi+0x80>)
 23f4f22:	4805      	ldr	r0, [pc, #20]	; (23f4f38 <_ZN6AB18056setWDTEi+0x74>)
 23f4f24:	f7ff fecf 	bl	23f4cc6 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
 23f4f28:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 23f4f2c:	435f      	muls	r7, r3
        watchdogSecs = seconds;
 23f4f2e:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
 23f4f30:	616f      	str	r7, [r5, #20]
 23f4f32:	e7e1      	b.n	23f4ef8 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
 23f4f34:	2701      	movs	r7, #1
 23f4f36:	e7e7      	b.n	23f4f08 <_ZN6AB18056setWDTEi+0x44>
 23f4f38:	1007ae9c 	.word	0x1007ae9c
 23f4f3c:	023ff456 	.word	0x023ff456
 23f4f40:	023ff460 	.word	0x023ff460
 23f4f44:	023ff47c 	.word	0x023ff47c

023f4f48 <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
 23f4f48:	4b06      	ldr	r3, [pc, #24]	; (23f4f64 <_ZN6AB180517systemEventStaticEyi+0x1c>)
 23f4f4a:	681a      	ldr	r2, [r3, #0]
 23f4f4c:	b14a      	cbz	r2, 23f4f62 <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
 23f4f4e:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 23f4f52:	430b      	orrs	r3, r1
 23f4f54:	d105      	bne.n	23f4f62 <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
 23f4f56:	68d3      	ldr	r3, [r2, #12]
 23f4f58:	b11b      	cbz	r3, 23f4f62 <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
 23f4f5a:	2100      	movs	r1, #0
 23f4f5c:	4610      	mov	r0, r2
 23f4f5e:	f7ff bfb1 	b.w	23f4ec4 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
 23f4f62:	4770      	bx	lr
 23f4f64:	1007aea0 	.word	0x1007aea0

023f4f68 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
 23f4f68:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 23f4f6c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 23f4f70:	4605      	mov	r5, r0
 23f4f72:	4616      	mov	r6, r2
 23f4f74:	461f      	mov	r7, r3
    if (lock) {
 23f4f76:	f1b8 0f00 	cmp.w	r8, #0
 23f4f7a:	d004      	beq.n	23f4f86 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
 23f4f7c:	6840      	ldr	r0, [r0, #4]
 23f4f7e:	9101      	str	r1, [sp, #4]
 23f4f80:	f002 ffbe 	bl	23f7f00 <_ZN7TwoWire4lockEv>
 23f4f84:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
 23f4f86:	2300      	movs	r3, #0
 23f4f88:	4628      	mov	r0, r5
 23f4f8a:	f10d 020f 	add.w	r2, sp, #15
 23f4f8e:	9101      	str	r1, [sp, #4]
 23f4f90:	f7ff ff0a 	bl	23f4da8 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
 23f4f94:	4604      	mov	r4, r0
 23f4f96:	b160      	cbz	r0, 23f4fb2 <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
 23f4f98:	f89d 300f 	ldrb.w	r3, [sp, #15]
 23f4f9c:	ea03 0206 	and.w	r2, r3, r6
 23f4fa0:	433a      	orrs	r2, r7
        if (newValue != value) {
 23f4fa2:	4293      	cmp	r3, r2
 23f4fa4:	d005      	beq.n	23f4fb2 <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
 23f4fa6:	2300      	movs	r3, #0
 23f4fa8:	4628      	mov	r0, r5
 23f4faa:	9901      	ldr	r1, [sp, #4]
 23f4fac:	f7ff ff7e 	bl	23f4eac <_ZN6AB180513writeRegisterEhhb>
 23f4fb0:	4604      	mov	r4, r0
    if (lock) {
 23f4fb2:	f1b8 0f00 	cmp.w	r8, #0
 23f4fb6:	d002      	beq.n	23f4fbe <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
 23f4fb8:	6868      	ldr	r0, [r5, #4]
 23f4fba:	f002 ffaa 	bl	23f7f12 <_ZN7TwoWire6unlockEv>
}
 23f4fbe:	4620      	mov	r0, r4
 23f4fc0:	b004      	add	sp, #16
 23f4fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f4fc6 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
 23f4fc6:	b513      	push	{r0, r1, r4, lr}
 23f4fc8:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
 23f4fca:	f10d 0207 	add.w	r2, sp, #7
 23f4fce:	f7ff feeb 	bl	23f4da8 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
 23f4fd2:	b128      	cbz	r0, 23f4fe0 <_ZN6AB180510isBitClearEhhb+0x1a>
 23f4fd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23f4fd8:	421c      	tst	r4, r3
 23f4fda:	bf0c      	ite	eq
 23f4fdc:	2001      	moveq	r0, #1
 23f4fde:	2000      	movne	r0, #0
}
 23f4fe0:	b002      	add	sp, #8
 23f4fe2:	bd10      	pop	{r4, pc}

023f4fe4 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
 23f4fe4:	b513      	push	{r0, r1, r4, lr}
 23f4fe6:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
 23f4fe8:	f10d 0207 	add.w	r2, sp, #7
 23f4fec:	f7ff fedc 	bl	23f4da8 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
 23f4ff0:	b128      	cbz	r0, 23f4ffe <_ZN6AB18058isBitSetEhhb+0x1a>
 23f4ff2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23f4ff6:	421c      	tst	r4, r3
 23f4ff8:	bf14      	ite	ne
 23f4ffa:	2001      	movne	r0, #1
 23f4ffc:	2000      	moveq	r0, #0
}
 23f4ffe:	b002      	add	sp, #8
 23f5000:	bd10      	pop	{r4, pc}

023f5002 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
 23f5002:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
 23f5004:	43d2      	mvns	r2, r2
 23f5006:	9300      	str	r3, [sp, #0]
 23f5008:	b2d2      	uxtb	r2, r2
 23f500a:	2300      	movs	r3, #0
 23f500c:	f7ff ffac 	bl	23f4f68 <_ZN6AB180512maskRegisterEhhhb>
}
 23f5010:	b003      	add	sp, #12
 23f5012:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023f5018 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
 23f5018:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
 23f501a:	2301      	movs	r3, #1
 23f501c:	210f      	movs	r1, #15
 23f501e:	f10d 0207 	add.w	r2, sp, #7
bool AB1805::updateWakeReason() {
 23f5022:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
 23f5024:	f7ff fec0 	bl	23f4da8 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
 23f5028:	4605      	mov	r5, r0
 23f502a:	b938      	cbnz	r0, 23f503c <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
 23f502c:	22af      	movs	r2, #175	; 0xaf
 23f502e:	491e      	ldr	r1, [pc, #120]	; (23f50a8 <_ZN6AB180516updateWakeReasonEv+0x90>)
 23f5030:	481e      	ldr	r0, [pc, #120]	; (23f50ac <_ZN6AB180516updateWakeReasonEv+0x94>)
 23f5032:	f7ff fe3a 	bl	23f4caa <_ZNK5spark6Logger5errorEPKcz>
}
 23f5036:	4628      	mov	r0, r5
 23f5038:	b003      	add	sp, #12
 23f503a:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
 23f503c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23f5040:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
 23f5044:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
 23f5048:	d00b      	beq.n	23f5062 <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
 23f504a:	2220      	movs	r2, #32
 23f504c:	210f      	movs	r1, #15
 23f504e:	4620      	mov	r0, r4
        wakeReason = WakeReason::WATCHDOG;
 23f5050:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
 23f5052:	f7ff ffd6 	bl	23f5002 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
 23f5056:	4a16      	ldr	r2, [pc, #88]	; (23f50b0 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
 23f5058:	4916      	ldr	r1, [pc, #88]	; (23f50b4 <_ZN6AB180516updateWakeReasonEv+0x9c>)
 23f505a:	4814      	ldr	r0, [pc, #80]	; (23f50ac <_ZN6AB180516updateWakeReasonEv+0x94>)
 23f505c:	f7ff fe17 	bl	23f4c8e <_ZNK5spark6Logger4infoEPKcz>
 23f5060:	e7e9      	b.n	23f5036 <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
 23f5062:	2208      	movs	r2, #8
 23f5064:	2117      	movs	r1, #23
 23f5066:	4620      	mov	r0, r4
 23f5068:	f7ff ffbc 	bl	23f4fe4 <_ZN6AB18058isBitSetEhhb>
 23f506c:	b118      	cbz	r0, 23f5076 <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
 23f506e:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
 23f5070:	4a11      	ldr	r2, [pc, #68]	; (23f50b8 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
 23f5072:	61e3      	str	r3, [r4, #28]
 23f5074:	e7f0      	b.n	23f5058 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
 23f5076:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23f507a:	071a      	lsls	r2, r3, #28
 23f507c:	d509      	bpl.n	23f5092 <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
 23f507e:	2303      	movs	r3, #3
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
 23f5080:	2208      	movs	r2, #8
        wakeReason = WakeReason::COUNTDOWN_TIMER;
 23f5082:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
 23f5084:	210f      	movs	r1, #15
 23f5086:	2301      	movs	r3, #1
 23f5088:	4620      	mov	r0, r4
 23f508a:	f7ff ffba 	bl	23f5002 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
 23f508e:	4a0b      	ldr	r2, [pc, #44]	; (23f50bc <_ZN6AB180516updateWakeReasonEv+0xa4>)
 23f5090:	e7e2      	b.n	23f5058 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
 23f5092:	075b      	lsls	r3, r3, #29
 23f5094:	d5cf      	bpl.n	23f5036 <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
 23f5096:	2204      	movs	r2, #4
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
 23f5098:	2301      	movs	r3, #1
        wakeReason = WakeReason::ALARM;
 23f509a:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
 23f509c:	210f      	movs	r1, #15
 23f509e:	4620      	mov	r0, r4
 23f50a0:	f7ff ffaf 	bl	23f5002 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
 23f50a4:	4a06      	ldr	r2, [pc, #24]	; (23f50c0 <_ZN6AB180516updateWakeReasonEv+0xa8>)
 23f50a6:	e7d7      	b.n	23f5058 <_ZN6AB180516updateWakeReasonEv+0x40>
 23f50a8:	023ff4cf 	.word	0x023ff4cf
 23f50ac:	1007ae9c 	.word	0x1007ae9c
 23f50b0:	023ff4a0 	.word	0x023ff4a0
 23f50b4:	023ff4ee 	.word	0x023ff4ee
 23f50b8:	023ff4a9 	.word	0x023ff4a9
 23f50bc:	023ff4b9 	.word	0x023ff4b9
 23f50c0:	023ff4c9 	.word	0x023ff4c9

023f50c4 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
 23f50c4:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
 23f50c6:	9300      	str	r3, [sp, #0]
 23f50c8:	4613      	mov	r3, r2
 23f50ca:	22ff      	movs	r2, #255	; 0xff
 23f50cc:	f7ff ff4c 	bl	23f4f68 <_ZN6AB180512maskRegisterEhhhb>
}
 23f50d0:	b003      	add	sp, #12
 23f50d2:	f85d fb04 	ldr.w	pc, [sp], #4

023f50d6 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
 23f50d6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f50da:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
 23f50de:	4605      	mov	r5, r0
 23f50e0:	460c      	mov	r4, r1
 23f50e2:	4691      	mov	r9, r2
 23f50e4:	461f      	mov	r7, r3
    if (lock) {
 23f50e6:	f1ba 0f00 	cmp.w	sl, #0
 23f50ea:	d002      	beq.n	23f50f2 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
 23f50ec:	6840      	ldr	r0, [r0, #4]
 23f50ee:	f002 ff07 	bl	23f7f00 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
 23f50f2:	b307      	cbz	r7, 23f5136 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
 23f50f4:	2f20      	cmp	r7, #32
 23f50f6:	463e      	mov	r6, r7
 23f50f8:	bf28      	it	cs
 23f50fa:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
 23f50fc:	2c7f      	cmp	r4, #127	; 0x7f
 23f50fe:	d826      	bhi.n	23f514e <_ZN6AB18057readRamEjPhjb+0x78>
 23f5100:	1933      	adds	r3, r6, r4
 23f5102:	2b80      	cmp	r3, #128	; 0x80
 23f5104:	d901      	bls.n	23f510a <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
 23f5106:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
 23f510a:	2301      	movs	r3, #1
 23f510c:	2204      	movs	r2, #4
 23f510e:	213f      	movs	r1, #63	; 0x3f
 23f5110:	4628      	mov	r0, r5
 23f5112:	f7ff ff76 	bl	23f5002 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
 23f5116:	2300      	movs	r3, #0
 23f5118:	f064 017f 	orn	r1, r4, #127	; 0x7f
 23f511c:	9300      	str	r3, [sp, #0]
 23f511e:	464a      	mov	r2, r9
 23f5120:	4633      	mov	r3, r6
 23f5122:	4628      	mov	r0, r5
 23f5124:	b2c9      	uxtb	r1, r1
 23f5126:	f7ff fdf1 	bl	23f4d0c <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
 23f512a:	4680      	mov	r8, r0
 23f512c:	b128      	cbz	r0, 23f513a <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
 23f512e:	4434      	add	r4, r6
        dataLen -= count;
 23f5130:	1bbf      	subs	r7, r7, r6
        data += count;
 23f5132:	44b1      	add	r9, r6
    while(dataLen > 0) {
 23f5134:	e7dd      	b.n	23f50f2 <_ZN6AB18057readRamEjPhjb+0x1c>
 23f5136:	f04f 0801 	mov.w	r8, #1
    if (lock) {
 23f513a:	f1ba 0f00 	cmp.w	sl, #0
 23f513e:	d002      	beq.n	23f5146 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
 23f5140:	6868      	ldr	r0, [r5, #4]
 23f5142:	f002 fee6 	bl	23f7f12 <_ZN7TwoWire6unlockEv>
}
 23f5146:	4640      	mov	r0, r8
 23f5148:	b002      	add	sp, #8
 23f514a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
 23f514e:	2301      	movs	r3, #1
 23f5150:	2204      	movs	r2, #4
 23f5152:	213f      	movs	r1, #63	; 0x3f
 23f5154:	4628      	mov	r0, r5
 23f5156:	f7ff ffb5 	bl	23f50c4 <_ZN6AB180514setRegisterBitEhhb>
 23f515a:	e7dc      	b.n	23f5116 <_ZN6AB18057readRamEjPhjb+0x40>

023f515c <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
 23f515c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f5160:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
 23f5164:	4605      	mov	r5, r0
 23f5166:	460c      	mov	r4, r1
 23f5168:	4691      	mov	r9, r2
 23f516a:	461f      	mov	r7, r3
    if (lock) {
 23f516c:	f1ba 0f00 	cmp.w	sl, #0
 23f5170:	d002      	beq.n	23f5178 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
 23f5172:	6840      	ldr	r0, [r0, #4]
 23f5174:	f002 fec4 	bl	23f7f00 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
 23f5178:	b307      	cbz	r7, 23f51bc <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
 23f517a:	2f1f      	cmp	r7, #31
 23f517c:	463e      	mov	r6, r7
 23f517e:	bf28      	it	cs
 23f5180:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
 23f5182:	2c7f      	cmp	r4, #127	; 0x7f
 23f5184:	d826      	bhi.n	23f51d4 <_ZN6AB18058writeRamEjPKhjb+0x78>
 23f5186:	1933      	adds	r3, r6, r4
 23f5188:	2b80      	cmp	r3, #128	; 0x80
 23f518a:	d901      	bls.n	23f5190 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
 23f518c:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
 23f5190:	2301      	movs	r3, #1
 23f5192:	2204      	movs	r2, #4
 23f5194:	213f      	movs	r1, #63	; 0x3f
 23f5196:	4628      	mov	r0, r5
 23f5198:	f7ff ff33 	bl	23f5002 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
 23f519c:	2300      	movs	r3, #0
 23f519e:	f064 017f 	orn	r1, r4, #127	; 0x7f
 23f51a2:	9300      	str	r3, [sp, #0]
 23f51a4:	464a      	mov	r2, r9
 23f51a6:	4633      	mov	r3, r6
 23f51a8:	4628      	mov	r0, r5
 23f51aa:	b2c9      	uxtb	r1, r1
 23f51ac:	f7ff fe42 	bl	23f4e34 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
 23f51b0:	4680      	mov	r8, r0
 23f51b2:	b128      	cbz	r0, 23f51c0 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
 23f51b4:	4434      	add	r4, r6
        dataLen -= count;
 23f51b6:	1bbf      	subs	r7, r7, r6
        data += count;
 23f51b8:	44b1      	add	r9, r6
    while(dataLen > 0) {
 23f51ba:	e7dd      	b.n	23f5178 <_ZN6AB18058writeRamEjPKhjb+0x1c>
 23f51bc:	f04f 0801 	mov.w	r8, #1
    if (lock) {
 23f51c0:	f1ba 0f00 	cmp.w	sl, #0
 23f51c4:	d002      	beq.n	23f51cc <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
 23f51c6:	6868      	ldr	r0, [r5, #4]
 23f51c8:	f002 fea3 	bl	23f7f12 <_ZN7TwoWire6unlockEv>
}
 23f51cc:	4640      	mov	r0, r8
 23f51ce:	b002      	add	sp, #8
 23f51d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
 23f51d4:	2301      	movs	r3, #1
 23f51d6:	2204      	movs	r2, #4
 23f51d8:	213f      	movs	r1, #63	; 0x3f
 23f51da:	4628      	mov	r0, r5
 23f51dc:	f7ff ff72 	bl	23f50c4 <_ZN6AB180514setRegisterBitEhhb>
 23f51e0:	e7dc      	b.n	23f519c <_ZN6AB18058writeRamEjPKhjb+0x40>
	...

023f51e4 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
 23f51e4:	b530      	push	{r4, r5, lr}
 23f51e6:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
 23f51e8:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
 23f51ec:	680d      	ldr	r5, [r1, #0]
String AB1805::tmToString(const struct tm *timeptr) {
 23f51ee:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
 23f51f0:	9503      	str	r5, [sp, #12]
 23f51f2:	684d      	ldr	r5, [r1, #4]
 23f51f4:	3301      	adds	r3, #1
 23f51f6:	9502      	str	r5, [sp, #8]
 23f51f8:	688d      	ldr	r5, [r1, #8]
 23f51fa:	f202 726c 	addw	r2, r2, #1900	; 0x76c
 23f51fe:	9501      	str	r5, [sp, #4]
 23f5200:	68c9      	ldr	r1, [r1, #12]
 23f5202:	9100      	str	r1, [sp, #0]
 23f5204:	4902      	ldr	r1, [pc, #8]	; (23f5210 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
 23f5206:	f003 fd27 	bl	23f8c58 <_ZN6String6formatEPKcz>
}
 23f520a:	4620      	mov	r0, r4
 23f520c:	b005      	add	sp, #20
 23f520e:	bd30      	pop	{r4, r5, pc}
 23f5210:	023ff4ff 	.word	0x023ff4ff

023f5214 <_ZN6AB180510bcdToValueEh>:
}
 23f5214:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
 23f5216:	0903      	lsrs	r3, r0, #4
 23f5218:	f000 000f 	and.w	r0, r0, #15
}
 23f521c:	fb02 0003 	mla	r0, r2, r3, r0
 23f5220:	4770      	bx	lr

023f5222 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
 23f5222:	b538      	push	{r3, r4, r5, lr}
 23f5224:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
 23f5226:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
 23f5228:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
 23f522a:	f7ff fff3 	bl	23f5214 <_ZN6AB180510bcdToValueEh>
 23f522e:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
 23f5230:	7860      	ldrb	r0, [r4, #1]
 23f5232:	f7ff ffef 	bl	23f5214 <_ZN6AB180510bcdToValueEh>
 23f5236:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
 23f5238:	78a0      	ldrb	r0, [r4, #2]
 23f523a:	f7ff ffeb 	bl	23f5214 <_ZN6AB180510bcdToValueEh>
 23f523e:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
 23f5240:	78e0      	ldrb	r0, [r4, #3]
 23f5242:	f7ff ffe7 	bl	23f5214 <_ZN6AB180510bcdToValueEh>
 23f5246:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
 23f5248:	7920      	ldrb	r0, [r4, #4]
 23f524a:	f7ff ffe3 	bl	23f5214 <_ZN6AB180510bcdToValueEh>
 23f524e:	3801      	subs	r0, #1
 23f5250:	6108      	str	r0, [r1, #16]
    if (includeYear) {
 23f5252:	b92d      	cbnz	r5, 23f5260 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
 23f5254:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
 23f5256:	7828      	ldrb	r0, [r5, #0]
 23f5258:	f7ff ffdc 	bl	23f5214 <_ZN6AB180510bcdToValueEh>
 23f525c:	6188      	str	r0, [r1, #24]
}
 23f525e:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
 23f5260:	7960      	ldrb	r0, [r4, #5]
 23f5262:	f7ff ffd7 	bl	23f5214 <_ZN6AB180510bcdToValueEh>
 23f5266:	3064      	adds	r0, #100	; 0x64
 23f5268:	1da5      	adds	r5, r4, #6
 23f526a:	6148      	str	r0, [r1, #20]
 23f526c:	e7f3      	b.n	23f5256 <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

023f5270 <_ZN6AB180510getRtcAsTmEP2tm>:
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
 23f5270:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
 23f5272:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
 23f5274:	461a      	mov	r2, r3
bool AB1805::getRtcAsTm(struct tm *timeptr) {
 23f5276:	460d      	mov	r5, r1
 23f5278:	b088      	sub	sp, #32
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
 23f527a:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
 23f527c:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
 23f527e:	f7ff fea2 	bl	23f4fc6 <_ZN6AB180510isBitClearEhhb>
 23f5282:	b1f0      	cbz	r0, 23f52c2 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
 23f5284:	2308      	movs	r3, #8
 23f5286:	2601      	movs	r6, #1
 23f5288:	4620      	mov	r0, r4
 23f528a:	2100      	movs	r1, #0
 23f528c:	9600      	str	r6, [sp, #0]
 23f528e:	eb0d 0203 	add.w	r2, sp, r3
 23f5292:	f7ff fd3b 	bl	23f4d0c <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
 23f5296:	4604      	mov	r4, r0
 23f5298:	b198      	cbz	r0, 23f52c2 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
 23f529a:	4632      	mov	r2, r6
 23f529c:	4629      	mov	r1, r5
 23f529e:	f10d 0009 	add.w	r0, sp, #9
 23f52a2:	f7ff ffbe 	bl	23f5222 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
 23f52a6:	a804      	add	r0, sp, #16
 23f52a8:	f7ff ff9c 	bl	23f51e4 <_ZN6AB180510tmToStringEPK2tm>
 23f52ac:	4808      	ldr	r0, [pc, #32]	; (23f52d0 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
 23f52ae:	9a04      	ldr	r2, [sp, #16]
 23f52b0:	4908      	ldr	r1, [pc, #32]	; (23f52d4 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
 23f52b2:	f7ff fcec 	bl	23f4c8e <_ZNK5spark6Logger4infoEPKcz>
 23f52b6:	a804      	add	r0, sp, #16
 23f52b8:	f003 fc23 	bl	23f8b02 <_ZN6StringD1Ev>
}
 23f52bc:	4620      	mov	r0, r4
 23f52be:	b008      	add	sp, #32
 23f52c0:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
 23f52c2:	2224      	movs	r2, #36	; 0x24
 23f52c4:	2100      	movs	r1, #0
 23f52c6:	4628      	mov	r0, r5
 23f52c8:	f007 f88d 	bl	23fc3e6 <memset>
 23f52cc:	2400      	movs	r4, #0
 23f52ce:	e7f5      	b.n	23f52bc <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
 23f52d0:	1007ae9c 	.word	0x1007ae9c
 23f52d4:	023ff51d 	.word	0x023ff51d

023f52d8 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
 23f52d8:	b530      	push	{r4, r5, lr}
 23f52da:	b08b      	sub	sp, #44	; 0x2c
 23f52dc:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
 23f52de:	a901      	add	r1, sp, #4
 23f52e0:	f7ff ffc6 	bl	23f5270 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
 23f52e4:	4604      	mov	r4, r0
 23f52e6:	b120      	cbz	r0, 23f52f2 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
 23f52e8:	a801      	add	r0, sp, #4
 23f52ea:	f002 f80b 	bl	23f7304 <mktime>
 23f52ee:	e9c5 0100 	strd	r0, r1, [r5]
}
 23f52f2:	4620      	mov	r0, r4
 23f52f4:	b00b      	add	sp, #44	; 0x2c
 23f52f6:	bd30      	pop	{r4, r5, pc}

023f52f8 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
 23f52f8:	230a      	movs	r3, #10
 23f52fa:	fb90 f1f3 	sdiv	r1, r0, r3
 23f52fe:	fb91 f2f3 	sdiv	r2, r1, r3
    int ones = value % 10;
 23f5302:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
 23f5306:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
 23f530a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
 23f530e:	b2c0      	uxtb	r0, r0
 23f5310:	4770      	bx	lr

023f5312 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
 23f5312:	b570      	push	{r4, r5, r6, lr}
 23f5314:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
 23f5316:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
 23f5318:	460c      	mov	r4, r1
 23f531a:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
 23f531c:	f7ff ffec 	bl	23f52f8 <_ZN6AB180510valueToBcdEi>
 23f5320:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
 23f5322:	6868      	ldr	r0, [r5, #4]
 23f5324:	f7ff ffe8 	bl	23f52f8 <_ZN6AB180510valueToBcdEi>
 23f5328:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
 23f532a:	68a8      	ldr	r0, [r5, #8]
 23f532c:	f7ff ffe4 	bl	23f52f8 <_ZN6AB180510valueToBcdEi>
 23f5330:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
 23f5332:	68e8      	ldr	r0, [r5, #12]
 23f5334:	f7ff ffe0 	bl	23f52f8 <_ZN6AB180510valueToBcdEi>
 23f5338:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
 23f533a:	6928      	ldr	r0, [r5, #16]
 23f533c:	3001      	adds	r0, #1
 23f533e:	f7ff ffdb 	bl	23f52f8 <_ZN6AB180510valueToBcdEi>
 23f5342:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
 23f5344:	b92e      	cbnz	r6, 23f5352 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
 23f5346:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
 23f5348:	69a8      	ldr	r0, [r5, #24]
 23f534a:	f7ff ffd5 	bl	23f52f8 <_ZN6AB180510valueToBcdEi>
 23f534e:	7030      	strb	r0, [r6, #0]
}
 23f5350:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
 23f5352:	2364      	movs	r3, #100	; 0x64
 23f5354:	696a      	ldr	r2, [r5, #20]
 23f5356:	1da6      	adds	r6, r4, #6
 23f5358:	fb92 f0f3 	sdiv	r0, r2, r3
 23f535c:	fb03 2010 	mls	r0, r3, r0, r2
 23f5360:	f7ff ffca 	bl	23f52f8 <_ZN6AB180510valueToBcdEi>
 23f5364:	7160      	strb	r0, [r4, #5]
 23f5366:	e7ef      	b.n	23f5348 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

023f5368 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
 23f5368:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f536a:	4616      	mov	r6, r2
 23f536c:	b087      	sub	sp, #28
 23f536e:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
 23f5370:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
 23f5372:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
 23f5374:	f7ff ff36 	bl	23f51e4 <_ZN6AB180510tmToStringEPK2tm>
 23f5378:	481e      	ldr	r0, [pc, #120]	; (23f53f4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
 23f537a:	9a02      	ldr	r2, [sp, #8]
 23f537c:	491e      	ldr	r1, [pc, #120]	; (23f53f8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
 23f537e:	f7ff fc86 	bl	23f4c8e <_ZNK5spark6Logger4infoEPKcz>
 23f5382:	a802      	add	r0, sp, #8
 23f5384:	f003 fbbd 	bl	23f8b02 <_ZN6StringD1Ev>
    if (lock) {
 23f5388:	b116      	cbz	r6, 23f5390 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
 23f538a:	6868      	ldr	r0, [r5, #4]
 23f538c:	f002 fdb8 	bl	23f7f00 <_ZN7TwoWire4lockEv>
    array[0] = 0x00; // hundredths
 23f5390:	2700      	movs	r7, #0
    tmToRegisters(timeptr, &array[1], true);
 23f5392:	4620      	mov	r0, r4
 23f5394:	2201      	movs	r2, #1
 23f5396:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
 23f539a:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
 23f539e:	f7ff ffb8 	bl	23f5312 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
 23f53a2:	2301      	movs	r3, #1
 23f53a4:	2110      	movs	r1, #16
 23f53a6:	461a      	mov	r2, r3
 23f53a8:	4628      	mov	r0, r5
 23f53aa:	f7ff fe8b 	bl	23f50c4 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
 23f53ae:	4604      	mov	r4, r0
 23f53b0:	b1e8      	cbz	r0, 23f53ee <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
 23f53b2:	2308      	movs	r3, #8
 23f53b4:	4639      	mov	r1, r7
 23f53b6:	4628      	mov	r0, r5
 23f53b8:	9700      	str	r7, [sp, #0]
 23f53ba:	eb0d 0203 	add.w	r2, sp, r3
 23f53be:	f7ff fd39 	bl	23f4e34 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
 23f53c2:	4604      	mov	r4, r0
 23f53c4:	b160      	cbz	r0, 23f53e0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
 23f53c6:	2301      	movs	r3, #1
 23f53c8:	2110      	movs	r1, #16
 23f53ca:	461a      	mov	r2, r3
 23f53cc:	4628      	mov	r0, r5
 23f53ce:	f7ff fe18 	bl	23f5002 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
 23f53d2:	b116      	cbz	r6, 23f53da <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
 23f53d4:	6868      	ldr	r0, [r5, #4]
 23f53d6:	f002 fd9c 	bl	23f7f12 <_ZN7TwoWire6unlockEv>
}
 23f53da:	4620      	mov	r0, r4
 23f53dc:	b007      	add	sp, #28
 23f53de:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
 23f53e0:	f44f 728e 	mov.w	r2, #284	; 0x11c
        _log.error(errorMsg, __LINE__);
 23f53e4:	4905      	ldr	r1, [pc, #20]	; (23f53fc <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
 23f53e6:	4803      	ldr	r0, [pc, #12]	; (23f53f4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
 23f53e8:	f7ff fc5f 	bl	23f4caa <_ZNK5spark6Logger5errorEPKcz>
 23f53ec:	e7f1      	b.n	23f53d2 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
 23f53ee:	f44f 7290 	mov.w	r2, #288	; 0x120
 23f53f2:	e7f7      	b.n	23f53e4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
 23f53f4:	1007ae9c 	.word	0x1007ae9c
 23f53f8:	023ff52b 	.word	0x023ff52b
 23f53fc:	023ff539 	.word	0x023ff539

023f5400 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
 23f5400:	b513      	push	{r0, r1, r4, lr}
 23f5402:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
 23f5404:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
 23f5406:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
 23f540a:	f006 ffa9 	bl	23fc360 <gmtime>
    return setRtcFromTm(tm, lock);
 23f540e:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
 23f5412:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
 23f5414:	4620      	mov	r0, r4
 23f5416:	f7ff ffa7 	bl	23f5368 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
 23f541a:	b002      	add	sp, #8
 23f541c:	bd10      	pop	{r4, pc}

023f541e <_ZN6AB180516setRtcFromSystemEv>:
bool AB1805::setRtcFromSystem() {
 23f541e:	b513      	push	{r0, r1, r4, lr}
 23f5420:	4604      	mov	r4, r0
    if (Time.isValid()) {
 23f5422:	f003 fde9 	bl	23f8ff8 <_ZN9TimeClass7isValidEv>
 23f5426:	b140      	cbz	r0, 23f543a <_ZN6AB180516setRtcFromSystemEv+0x1c>
        return setRtcFromTime(Time.now());
 23f5428:	f003 fe03 	bl	23f9032 <_ZN9TimeClass3nowEv>
 23f542c:	2301      	movs	r3, #1
 23f542e:	4602      	mov	r2, r0
 23f5430:	9300      	str	r3, [sp, #0]
 23f5432:	17c3      	asrs	r3, r0, #31
 23f5434:	4620      	mov	r0, r4
 23f5436:	f7ff ffe3 	bl	23f5400 <_ZN6AB180514setRtcFromTimeExb>
}
 23f543a:	b002      	add	sp, #8
 23f543c:	bd10      	pop	{r4, pc}

023f543e <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 23f543e:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23f5440:	2300      	movs	r3, #0
 23f5442:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23f5444:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23f5446:	4604      	mov	r4, r0
 23f5448:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23f544a:	b12b      	cbz	r3, 23f5458 <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f544c:	2202      	movs	r2, #2
 23f544e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f5450:	68eb      	ldr	r3, [r5, #12]
 23f5452:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23f5454:	68ab      	ldr	r3, [r5, #8]
 23f5456:	60a3      	str	r3, [r4, #8]
    }
 23f5458:	4620      	mov	r0, r4
 23f545a:	bd38      	pop	{r3, r4, r5, pc}

023f545c <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
 23f545c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _Function_base() : _M_manager(nullptr) { }
 23f5460:	f04f 0900 	mov.w	r9, #0
 23f5464:	b095      	sub	sp, #84	; 0x54
        };
 23f5466:	991c      	ldr	r1, [sp, #112]	; 0x70
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
 23f5468:	4605      	mov	r5, r0
        };
 23f546a:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
 23f546c:	4690      	mov	r8, r2
 23f546e:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
 23f5470:	ae0c      	add	r6, sp, #48	; 0x30
        };
 23f5472:	f7ff ffe4 	bl	23f543e <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
 23f5476:	a904      	add	r1, sp, #16
 23f5478:	a808      	add	r0, sp, #32
 23f547a:	f7ff ffe0 	bl	23f543e <_ZNSt8functionIFvyiEEC1ERKS1_>
 23f547e:	a908      	add	r1, sp, #32
 23f5480:	4630      	mov	r0, r6
 23f5482:	f7ff ffdc 	bl	23f543e <_ZNSt8functionIFvyiEEC1ERKS1_>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f5486:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
 23f5488:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f548c:	f7ed ff35 	bl	23e32fa <_Znwj>
 23f5490:	4604      	mov	r4, r0
 23f5492:	b1a0      	cbz	r0, 23f54be <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f5494:	e896 0003 	ldmia.w	r6, {r0, r1}
 23f5498:	ab01      	add	r3, sp, #4
 23f549a:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23f549e:	e894 0003 	ldmia.w	r4, {r0, r1}
 23f54a2:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23f54a6:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f54aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
 23f54ac:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f54ae:	60a3      	str	r3, [r4, #8]
 23f54b0:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f54b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
 23f54b6:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 23f54ba:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
 23f54bc:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
 23f54be:	4b24      	ldr	r3, [pc, #144]	; (23f5550 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
              callable_(callable) {
 23f54c0:	2200      	movs	r2, #0
 23f54c2:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
 23f54c4:	4b23      	ldr	r3, [pc, #140]	; (23f5554 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
 23f54c6:	f04f 0900 	mov.w	r9, #0
 23f54ca:	9312      	str	r3, [sp, #72]	; 0x48
 23f54cc:	2300      	movs	r3, #0
 23f54ce:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
 23f54d2:	4b21      	ldr	r3, [pc, #132]	; (23f5558 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
 23f54d4:	2010      	movs	r0, #16
              callable_(callable) {
 23f54d6:	f8c5 9008 	str.w	r9, [r5, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f54da:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
 23f54dc:	e9cd 3901 	strd	r3, r9, [sp, #4]
 23f54e0:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
 23f54e4:	f7ed ff09 	bl	23e32fa <_Znwj>
 23f54e8:	4604      	mov	r4, r0
 23f54ea:	b1d8      	cbz	r0, 23f5524 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
 23f54ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
 23f54ee:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
 23f54f2:	b133      	cbz	r3, 23f5502 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f54f4:	2202      	movs	r2, #2
 23f54f6:	a910      	add	r1, sp, #64	; 0x40
 23f54f8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f54fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23f54fc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23f54fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23f5500:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
 23f5502:	4b16      	ldr	r3, [pc, #88]	; (23f555c <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
 23f5504:	4640      	mov	r0, r8
        context.destructor = [](void* callable) -> void {
 23f5506:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
 23f5508:	4639      	mov	r1, r7
 23f550a:	4a15      	ldr	r2, [pc, #84]	; (23f5560 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
 23f550c:	ab01      	add	r3, sp, #4
        context.callable = wrapper;
 23f550e:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
 23f5510:	f001 fbe8 	bl	23f6ce4 <system_subscribe_event>
        if (r) {
 23f5514:	b1b0      	cbz	r0, 23f5544 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
 23f5516:	4620      	mov	r0, r4
 23f5518:	f7ff fb92 	bl	23f4c40 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
 23f551c:	2110      	movs	r1, #16
 23f551e:	4620      	mov	r0, r4
 23f5520:	f7ed feef 	bl	23e3302 <_ZdlPvj>
 23f5524:	a810      	add	r0, sp, #64	; 0x40
 23f5526:	f7ff fb8b 	bl	23f4c40 <_ZNSt14_Function_baseD1Ev>
 23f552a:	4630      	mov	r0, r6
 23f552c:	f7ff fb88 	bl	23f4c40 <_ZNSt14_Function_baseD1Ev>
 23f5530:	a808      	add	r0, sp, #32
 23f5532:	f7ff fb85 	bl	23f4c40 <_ZNSt14_Function_baseD1Ev>
 23f5536:	a804      	add	r0, sp, #16
 23f5538:	f7ff fb82 	bl	23f4c40 <_ZNSt14_Function_baseD1Ev>
    }
 23f553c:	4628      	mov	r0, r5
 23f553e:	b015      	add	sp, #84	; 0x54
 23f5540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
 23f5544:	9b02      	ldr	r3, [sp, #8]
 23f5546:	e9c5 8700 	strd	r8, r7, [r5]
 23f554a:	60ab      	str	r3, [r5, #8]
 23f554c:	e7ea      	b.n	23f5524 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
 23f554e:	bf00      	nop
 23f5550:	023f4bfd 	.word	0x023f4bfd
 23f5554:	023f5619 	.word	0x023f5619
 23f5558:	000c0002 	.word	0x000c0002
 23f555c:	023f4c53 	.word	0x023f4c53
 23f5560:	023f4bd5 	.word	0x023f4bd5

023f5564 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
 23f5564:	b530      	push	{r4, r5, lr}
 23f5566:	4604      	mov	r4, r0
 23f5568:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
 23f556a:	b111      	cbz	r1, 23f5572 <_ZN6AB18055setupEb+0xe>
        wire.begin();
 23f556c:	6840      	ldr	r0, [r0, #4]
 23f556e:	f002 fc8f 	bl	23f7e90 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
 23f5572:	4620      	mov	r0, r4
 23f5574:	f7ff fc20 	bl	23f4db8 <_ZN6AB180510detectChipEv>
 23f5578:	ad06      	add	r5, sp, #24
 23f557a:	2800      	cmp	r0, #0
 23f557c:	d037      	beq.n	23f55ee <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
 23f557e:	4620      	mov	r0, r4
 23f5580:	f7ff fd4a 	bl	23f5018 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
 23f5584:	2301      	movs	r3, #1
 23f5586:	2110      	movs	r1, #16
 23f5588:	461a      	mov	r2, r3
 23f558a:	4620      	mov	r0, r4
 23f558c:	f7ff fd1b 	bl	23f4fc6 <_ZN6AB180510isBitClearEhhb>
 23f5590:	b1d8      	cbz	r0, 23f55ca <_ZN6AB18055setupEb+0x66>
 23f5592:	f003 fd31 	bl	23f8ff8 <_ZN9TimeClass7isValidEv>
 23f5596:	b9c0      	cbnz	r0, 23f55ca <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
 23f5598:	a902      	add	r1, sp, #8
 23f559a:	4620      	mov	r0, r4
 23f559c:	f7ff fe9c 	bl	23f52d8 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
 23f55a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 23f55a4:	f003 fc2c 	bl	23f8e00 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
 23f55a8:	4b13      	ldr	r3, [pc, #76]	; (23f55f8 <_ZN6AB18055setupEb+0x94>)
 23f55aa:	4628      	mov	r0, r5
 23f55ac:	681b      	ldr	r3, [r3, #0]
 23f55ae:	4913      	ldr	r1, [pc, #76]	; (23f55fc <_ZN6AB18055setupEb+0x98>)
 23f55b0:	9300      	str	r3, [sp, #0]
 23f55b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23f55b6:	f003 fcdd 	bl	23f8f74 <_ZN9TimeClass6formatExPKc>
 23f55ba:	4811      	ldr	r0, [pc, #68]	; (23f5600 <_ZN6AB18055setupEb+0x9c>)
 23f55bc:	9a06      	ldr	r2, [sp, #24]
 23f55be:	4911      	ldr	r1, [pc, #68]	; (23f5604 <_ZN6AB18055setupEb+0xa0>)
 23f55c0:	f7ff fb65 	bl	23f4c8e <_ZNK5spark6Logger4infoEPKcz>
 23f55c4:	4628      	mov	r0, r5
 23f55c6:	f003 fa9c 	bl	23f8b02 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23f55ca:	4b0f      	ldr	r3, [pc, #60]	; (23f5608 <_ZN6AB18055setupEb+0xa4>)
    System.on(reset, systemEventStatic);
 23f55cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 23f55d0:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
 23f55d2:	4b0e      	ldr	r3, [pc, #56]	; (23f560c <_ZN6AB18055setupEb+0xa8>)
 23f55d4:	a802      	add	r0, sp, #8
 23f55d6:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
 23f55d8:	4b0d      	ldr	r3, [pc, #52]	; (23f5610 <_ZN6AB18055setupEb+0xac>)
 23f55da:	9500      	str	r5, [sp, #0]
 23f55dc:	9308      	str	r3, [sp, #32]
 23f55de:	2300      	movs	r3, #0
 23f55e0:	f7ff ff3c 	bl	23f545c <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
 23f55e4:	4628      	mov	r0, r5
 23f55e6:	f7ff fb2b 	bl	23f4c40 <_ZNSt14_Function_baseD1Ev>
}
 23f55ea:	b00b      	add	sp, #44	; 0x2c
 23f55ec:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
 23f55ee:	4909      	ldr	r1, [pc, #36]	; (23f5614 <_ZN6AB18055setupEb+0xb0>)
 23f55f0:	4803      	ldr	r0, [pc, #12]	; (23f5600 <_ZN6AB18055setupEb+0x9c>)
 23f55f2:	f7ff fb5a 	bl	23f4caa <_ZNK5spark6Logger5errorEPKcz>
 23f55f6:	e7e8      	b.n	23f55ca <_ZN6AB18055setupEb+0x66>
 23f55f8:	1006a1b4 	.word	0x1006a1b4
 23f55fc:	1007af38 	.word	0x1007af38
 23f5600:	1007ae9c 	.word	0x1007ae9c
 23f5604:	023ff554 	.word	0x023ff554
 23f5608:	023f4f49 	.word	0x023f4f49
 23f560c:	023f4c37 	.word	0x023f4c37
 23f5610:	023f4c23 	.word	0x023f4c23
 23f5614:	023ff571 	.word	0x023ff571

023f5618 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
 23f5618:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23f561a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f561c:	4604      	mov	r4, r0
	switch (__op)
 23f561e:	d104      	bne.n	23f562a <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
 23f5620:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f5622:	6003      	str	r3, [r0, #0]
      }
 23f5624:	2000      	movs	r0, #0
 23f5626:	b003      	add	sp, #12
 23f5628:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
 23f562a:	2a02      	cmp	r2, #2
 23f562c:	d00c      	beq.n	23f5648 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
 23f562e:	2a03      	cmp	r2, #3
 23f5630:	d1f8      	bne.n	23f5624 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23f5632:	6804      	ldr	r4, [r0, #0]
 23f5634:	2c00      	cmp	r4, #0
 23f5636:	d0f5      	beq.n	23f5624 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23f5638:	4620      	mov	r0, r4
 23f563a:	f7ff fb01 	bl	23f4c40 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23f563e:	2110      	movs	r1, #16
 23f5640:	4620      	mov	r0, r4
 23f5642:	f7ed fe5e 	bl	23e3302 <_ZdlPvj>
 23f5646:	e7ed      	b.n	23f5624 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
 23f5648:	6809      	ldr	r1, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23f564a:	2010      	movs	r0, #16
	  __dest._M_access<_Functor*>() =
 23f564c:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
 23f564e:	f7ed fe54 	bl	23e32fa <_Znwj>
 23f5652:	4605      	mov	r5, r0
 23f5654:	b110      	cbz	r0, 23f565c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
 23f5656:	9901      	ldr	r1, [sp, #4]
 23f5658:	f7ff fef1 	bl	23f543e <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
 23f565c:	6025      	str	r5, [r4, #0]
	}
 23f565e:	e7e1      	b.n	23f5624 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

023f5660 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
 23f5660:	4b01      	ldr	r3, [pc, #4]	; (23f5668 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
 23f5662:	4a02      	ldr	r2, [pc, #8]	; (23f566c <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
 23f5664:	601a      	str	r2, [r3, #0]
}
 23f5666:	4770      	bx	lr
 23f5668:	1007ae9c 	.word	0x1007ae9c
 23f566c:	023ff589 	.word	0x023ff589

023f5670 <_ZN6Thread3runEPv>:

private:

    static os_thread_return_t run(void* param) {
        Data* th = (Data*)param;
        th->started = true;
 23f5670:	2301      	movs	r3, #1
    static os_thread_return_t run(void* param) {
 23f5672:	b510      	push	{r4, lr}
        th->started = true;
 23f5674:	7403      	strb	r3, [r0, #16]
        if (th->func) {
 23f5676:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
 23f5678:	4604      	mov	r4, r0
        if (th->func) {
 23f567a:	b143      	cbz	r3, 23f568e <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
 23f567c:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f567e:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
 23f5680:	2301      	movs	r3, #1
        os_thread_exit(nullptr);
 23f5682:	2000      	movs	r0, #0
        th->exited = true;
 23f5684:	7463      	strb	r3, [r4, #17]
    }
 23f5686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
 23f568a:	f000 beaf 	b.w	23f63ec <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 23f568e:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
 23f5690:	2800      	cmp	r0, #0
 23f5692:	d0f5      	beq.n	23f5680 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
 23f5694:	6883      	ldr	r3, [r0, #8]
 23f5696:	b90b      	cbnz	r3, 23f569c <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
 23f5698:	f004 f97c 	bl	23f9994 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f569c:	68c3      	ldr	r3, [r0, #12]
 23f569e:	e7ee      	b.n	23f567e <_ZN6Thread3runEPv+0xe>

023f56a0 <_ZNSt17_Function_handlerIFvvEZN11SomLocationC4EvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
 23f56a0:	2a01      	cmp	r2, #1
 23f56a2:	d102      	bne.n	23f56aa <_ZNSt17_Function_handlerIFvvEZN11SomLocationC4EvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f56a4:	6001      	str	r1, [r0, #0]
      }
 23f56a6:	2000      	movs	r0, #0
 23f56a8:	4770      	bx	lr
	  switch (__op)
 23f56aa:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23f56ac:	bf04      	itt	eq
 23f56ae:	680b      	ldreq	r3, [r1, #0]
 23f56b0:	6003      	streq	r3, [r0, #0]
	      break;
 23f56b2:	e7f8      	b.n	23f56a6 <_ZNSt17_Function_handlerIFvvEZN11SomLocationC4EvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

023f56b4 <_ZN5spark13CellularClass7commandIJEEEiPKcDpT_.isra.0>:
        return cellular_command(NULL, NULL, 10000, format, Fargs...);
 23f56b4:	2100      	movs	r1, #0
    inline int command(const char* format, Targs... Fargs)
 23f56b6:	4603      	mov	r3, r0
        return cellular_command(NULL, NULL, 10000, format, Fargs...);
 23f56b8:	f242 7210 	movw	r2, #10000	; 0x2710
 23f56bc:	4608      	mov	r0, r1
 23f56be:	f000 be41 	b.w	23f6344 <cellular_command>
	...

023f56c4 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
 23f56c4:	b570      	push	{r4, r5, r6, lr}
 23f56c6:	4b0d      	ldr	r3, [pc, #52]	; (23f56fc <_ZN10CloudClass7publishEPKcS1_.isra.0+0x38>)
 23f56c8:	4605      	mov	r5, r0
        return publish_event(eventName, eventData, eventData ? std::strlen(eventData) : 0, static_cast<int>(particle::ContentType::TEXT), ttl, flags1 | flags2);
 23f56ca:	4614      	mov	r4, r2
 23f56cc:	781e      	ldrb	r6, [r3, #0]
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
 23f56ce:	b086      	sub	sp, #24
        return publish_event(eventName, eventData, eventData ? std::strlen(eventData) : 0, static_cast<int>(particle::ContentType::TEXT), ttl, flags1 | flags2);
 23f56d0:	b192      	cbz	r2, 23f56f8 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x34>
 23f56d2:	4610      	mov	r0, r2
 23f56d4:	9105      	str	r1, [sp, #20]
 23f56d6:	f7ed fdeb 	bl	23e32b0 <strlen>
 23f56da:	9905      	ldr	r1, [sp, #20]
 23f56dc:	2300      	movs	r3, #0
 23f56de:	223c      	movs	r2, #60	; 0x3c
 23f56e0:	f88d 6008 	strb.w	r6, [sp, #8]
 23f56e4:	e9cd 3200 	strd	r3, r2, [sp]
 23f56e8:	4603      	mov	r3, r0
 23f56ea:	4622      	mov	r2, r4
 23f56ec:	4628      	mov	r0, r5
 23f56ee:	f002 f9dd 	bl	23f7aac <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
 23f56f2:	4628      	mov	r0, r5
 23f56f4:	b006      	add	sp, #24
 23f56f6:	bd70      	pop	{r4, r5, r6, pc}
        return publish_event(eventName, eventData, eventData ? std::strlen(eventData) : 0, static_cast<int>(particle::ContentType::TEXT), ttl, flags1 | flags2);
 23f56f8:	4610      	mov	r0, r2
 23f56fa:	e7ef      	b.n	23f56dc <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>
 23f56fc:	1007aea4 	.word	0x1007aea4

023f5700 <_ZN11SomLocation15setAntennaPowerEv>:
    }

    return detected;
}

void SomLocation::setAntennaPower() {
 23f5700:	b508      	push	{r3, lr}
    if (PIN_INVALID != _antennaPowerPin) {
 23f5702:	f8b0 02a0 	ldrh.w	r0, [r0, #672]	; 0x2a0
 23f5706:	28ff      	cmp	r0, #255	; 0xff
 23f5708:	d007      	beq.n	23f571a <_ZN11SomLocation15setAntennaPowerEv+0x1a>
        digitalWrite(_antennaPowerPin, HIGH);
 23f570a:	2101      	movs	r1, #1
 23f570c:	f004 f817 	bl	23f973e <digitalWrite>
        delay(ANTENNA_POWER_SETTLING_MS);
    }
}
 23f5710:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        delay(ANTENNA_POWER_SETTLING_MS);
 23f5714:	2064      	movs	r0, #100	; 0x64
 23f5716:	f001 be1f 	b.w	23f7358 <delay>
}
 23f571a:	bd08      	pop	{r3, pc}

023f571c <_ZN11SomLocation17clearAntennaPowerEv>:

void SomLocation::clearAntennaPower() {
    if (PIN_INVALID != _antennaPowerPin) {
 23f571c:	f8b0 02a0 	ldrh.w	r0, [r0, #672]	; 0x2a0
 23f5720:	28ff      	cmp	r0, #255	; 0xff
 23f5722:	d002      	beq.n	23f572a <_ZN11SomLocation17clearAntennaPowerEv+0xe>
        digitalWrite(_antennaPowerPin, LOW);
 23f5724:	2100      	movs	r1, #0
 23f5726:	f004 b80a 	b.w	23f973e <digitalWrite>
    }
}
 23f572a:	4770      	bx	lr

023f572c <_ZN11SomLocation20setConstellationBg95E21LocationConstellation>:

int SomLocation::setConstellationBg95(LocationConstellation flags) {
 23f572c:	b530      	push	{r4, r5, lr}
    int configNumber = 1;
    if ((flags & LOCATION_CONST_GPS_ONLY) ||
 23f572e:	07c8      	lsls	r0, r1, #31
int SomLocation::setConstellationBg95(LocationConstellation flags) {
 23f5730:	b091      	sub	sp, #68	; 0x44
    if ((flags & LOCATION_CONST_GPS_ONLY) ||
 23f5732:	d41a      	bmi.n	23f576a <_ZN11SomLocation20setConstellationBg95E21LocationConstellation+0x3e>
        (flags & LOCATION_CONST_GPS_GLONASS)) {

        configNumber = 1; // GPS + GLONASS
    }
    else if (flags & LOCATION_CONST_GPS_BEIDOU) {
 23f5734:	078a      	lsls	r2, r1, #30
 23f5736:	d41a      	bmi.n	23f576e <_ZN11SomLocation20setConstellationBg95E21LocationConstellation+0x42>
        configNumber = 2; // GPS + BeiDou
    }
    else if (flags & LOCATION_CONST_GPS_GALILEO) {
 23f5738:	074b      	lsls	r3, r1, #29
 23f573a:	d41a      	bmi.n	23f5772 <_ZN11SomLocation20setConstellationBg95E21LocationConstellation+0x46>
        configNumber = 3; // GPS + Galileo
    }
    else if (flags & LOCATION_CONST_GPS_QZSS) {
        configNumber = 4; // GPS + QZSS
 23f573c:	f011 0f08 	tst.w	r1, #8
 23f5740:	bf0c      	ite	eq
 23f5742:	2401      	moveq	r4, #1
 23f5744:	2404      	movne	r4, #4
    }

    char command[64] = {};
 23f5746:	2500      	movs	r5, #0
 23f5748:	223c      	movs	r2, #60	; 0x3c
 23f574a:	4629      	mov	r1, r5
 23f574c:	a801      	add	r0, sp, #4
 23f574e:	9500      	str	r5, [sp, #0]
 23f5750:	f006 fe49 	bl	23fc3e6 <memset>
    sprintf(command, "AT+QGPSCFG=\"gnssconfig\",%d", configNumber);
 23f5754:	4622      	mov	r2, r4
 23f5756:	4908      	ldr	r1, [pc, #32]	; (23f5778 <_ZN11SomLocation20setConstellationBg95E21LocationConstellation+0x4c>)
 23f5758:	4668      	mov	r0, sp
 23f575a:	f001 fd1d 	bl	23f7198 <sprintf>
    Cellular.command(command);
 23f575e:	4668      	mov	r0, sp
 23f5760:	f7ff ffa8 	bl	23f56b4 <_ZN5spark13CellularClass7commandIJEEEiPKcDpT_.isra.0>
    return 0;
}
 23f5764:	4628      	mov	r0, r5
 23f5766:	b011      	add	sp, #68	; 0x44
 23f5768:	bd30      	pop	{r4, r5, pc}
        configNumber = 1; // GPS + GLONASS
 23f576a:	2401      	movs	r4, #1
 23f576c:	e7eb      	b.n	23f5746 <_ZN11SomLocation20setConstellationBg95E21LocationConstellation+0x1a>
        configNumber = 2; // GPS + BeiDou
 23f576e:	2402      	movs	r4, #2
 23f5770:	e7e9      	b.n	23f5746 <_ZN11SomLocation20setConstellationBg95E21LocationConstellation+0x1a>
        configNumber = 3; // GPS + Galileo
 23f5772:	2403      	movs	r4, #3
 23f5774:	e7e7      	b.n	23f5746 <_ZN11SomLocation20setConstellationBg95E21LocationConstellation+0x1a>
 23f5776:	bf00      	nop
 23f5778:	023ff5ac 	.word	0x023ff5ac

023f577c <_ZN11SomLocation18waitOnCommandEventEm>:
    event.publish = publish;
    os_queue_put(_commandQueue, &event, 0, nullptr);
    return LocationResults::Acquiring;
}

LocationCommandContext SomLocation::waitOnCommandEvent(system_tick_t timeout) {
 23f577c:	b570      	push	{r4, r5, r6, lr}
 23f577e:	4604      	mov	r4, r0
 23f5780:	460d      	mov	r5, r1
 23f5782:	4616      	mov	r6, r2
    LocationCommandContext event = {};
 23f5784:	2100      	movs	r1, #0
 23f5786:	2220      	movs	r2, #32
 23f5788:	f006 fe2d 	bl	23fc3e6 <memset>
    auto ret = os_queue_take(_commandQueue, &event, timeout, nullptr);
 23f578c:	2300      	movs	r3, #0
 23f578e:	4632      	mov	r2, r6
 23f5790:	4621      	mov	r1, r4
 23f5792:	6828      	ldr	r0, [r5, #0]
 23f5794:	f000 fe1c 	bl	23f63d0 <os_queue_take>
    if (ret) {
 23f5798:	b110      	cbz	r0, 23f57a0 <_ZN11SomLocation18waitOnCommandEventEm+0x24>
        event.command = LocationCommand::None;
 23f579a:	2300      	movs	r3, #0
 23f579c:	6023      	str	r3, [r4, #0]
        event.point = nullptr;
 23f579e:	61e3      	str	r3, [r4, #28]
    }

    return event;
}
 23f57a0:	4620      	mov	r0, r4
 23f57a2:	bd70      	pop	{r4, r5, r6, pc}

023f57a4 <_ZN11SomLocation19waitOnResponseEventEm>:

LocationResults SomLocation::waitOnResponseEvent(system_tick_t timeout) {
 23f57a4:	b513      	push	{r0, r1, r4, lr}
    LocationResults event = {LocationResults::Idle};
 23f57a6:	2402      	movs	r4, #2
LocationResults SomLocation::waitOnResponseEvent(system_tick_t timeout) {
 23f57a8:	460a      	mov	r2, r1
    auto ret = os_queue_take(_responseQueue, &event, timeout, nullptr);
 23f57aa:	2300      	movs	r3, #0
 23f57ac:	6840      	ldr	r0, [r0, #4]
 23f57ae:	a901      	add	r1, sp, #4
    LocationResults event = {LocationResults::Idle};
 23f57b0:	9401      	str	r4, [sp, #4]
    auto ret = os_queue_take(_responseQueue, &event, timeout, nullptr);
 23f57b2:	f000 fe0d 	bl	23f63d0 <os_queue_take>
    if (ret) {
 23f57b6:	b100      	cbz	r0, 23f57ba <_ZN11SomLocation19waitOnResponseEventEm+0x16>
        event = LocationResults::Idle;
 23f57b8:	9401      	str	r4, [sp, #4]
    }

    return event;
}
 23f57ba:	9801      	ldr	r0, [sp, #4]
 23f57bc:	b002      	add	sp, #8
 23f57be:	bd10      	pop	{r4, pc}

023f57c0 <_ZN11SomLocation9stripLfCrEPc>:

void SomLocation::stripLfCr(char* str) {
    if (!str) {
 23f57c0:	b158      	cbz	r0, 23f57da <_ZN11SomLocation9stripLfCrEPc+0x1a>
 23f57c2:	1e42      	subs	r2, r0, #1
    }

    auto read = str;
    auto write = str;

    while ('\0' != *read) {
 23f57c4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 23f57c8:	b133      	cbz	r3, 23f57d8 <_ZN11SomLocation9stripLfCrEPc+0x18>
        if (('\n' != *read) && ('\r' != *read)) {
 23f57ca:	2b0a      	cmp	r3, #10
 23f57cc:	d0fa      	beq.n	23f57c4 <_ZN11SomLocation9stripLfCrEPc+0x4>
 23f57ce:	2b0d      	cmp	r3, #13
 23f57d0:	d0f8      	beq.n	23f57c4 <_ZN11SomLocation9stripLfCrEPc+0x4>
            *write++ = *read;
 23f57d2:	f800 3b01 	strb.w	r3, [r0], #1
    while ('\0' != *read) {
 23f57d6:	e7f5      	b.n	23f57c4 <_ZN11SomLocation9stripLfCrEPc+0x4>
        }
        ++read;
    }

    // Null-terminate the resulting string
    *write = '\0';
 23f57d8:	7003      	strb	r3, [r0, #0]
}
 23f57da:	4770      	bx	lr

023f57dc <_ZN11SomLocation12glocCallbackEiPKciPc>:

int SomLocation::glocCallback(int type, const char* buf, int len, char* locBuffer) {
    switch (type) {
 23f57dc:	f5b0 1f90 	cmp.w	r0, #1179648	; 0x120000
int SomLocation::glocCallback(int type, const char* buf, int len, char* locBuffer) {
 23f57e0:	b538      	push	{r3, r4, r5, lr}
 23f57e2:	4604      	mov	r4, r0
 23f57e4:	461d      	mov	r5, r3
    switch (type) {
 23f57e6:	d002      	beq.n	23f57ee <_ZN11SomLocation12glocCallbackEiPKciPc+0x12>
 23f57e8:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 23f57ec:	d110      	bne.n	23f5810 <_ZN11SomLocation12glocCallbackEiPKciPc+0x34>
        case TYPE_PLUS:
            // fallthrough
        case TYPE_ERROR:
            strlcpy(locBuffer, buf, min((size_t)len, sizeof(SomLocation::_locBuffer)));
 23f57ee:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 23f57f2:	bf28      	it	cs
 23f57f4:	f44f 7280 	movcs.w	r2, #256	; 0x100
 23f57f8:	4628      	mov	r0, r5
 23f57fa:	f006 fe8e 	bl	23fc51a <strlcpy>
            stripLfCr(locBuffer);
 23f57fe:	4628      	mov	r0, r5
 23f5800:	f7ff ffde 	bl	23f57c0 <_ZN11SomLocation9stripLfCrEPc>
            locationLog.trace("glocCallback: (%06x) %s", type, locBuffer);
 23f5804:	4904      	ldr	r1, [pc, #16]	; (23f5818 <_ZN11SomLocation12glocCallbackEiPKciPc+0x3c>)
 23f5806:	462b      	mov	r3, r5
 23f5808:	4622      	mov	r2, r4
 23f580a:	4804      	ldr	r0, [pc, #16]	; (23f581c <_ZN11SomLocation12glocCallbackEiPKciPc+0x40>)
 23f580c:	f7ff fa5b 	bl	23f4cc6 <_ZNK5spark6Logger5traceEPKcz>
            break;
    }

    return WAIT;
}
 23f5810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23f5814:	bd38      	pop	{r3, r4, r5, pc}
 23f5816:	bf00      	nop
 23f5818:	023ff5c7 	.word	0x023ff5c7
 23f581c:	1007aeac 	.word	0x1007aeac

023f5820 <_ZN11SomLocation11epeCallbackEiPKciPc>:

int SomLocation::epeCallback(int type, const char* buf, int len, char* epeBuffer) {
    switch (type) {
 23f5820:	f5b0 1f90 	cmp.w	r0, #1179648	; 0x120000
int SomLocation::epeCallback(int type, const char* buf, int len, char* epeBuffer) {
 23f5824:	b510      	push	{r4, lr}
 23f5826:	461c      	mov	r4, r3
    switch (type) {
 23f5828:	d002      	beq.n	23f5830 <_ZN11SomLocation11epeCallbackEiPKciPc+0x10>
 23f582a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 23f582e:	d10a      	bne.n	23f5846 <_ZN11SomLocation11epeCallbackEiPKciPc+0x26>
        case TYPE_PLUS:
            // fallthrough
        case TYPE_ERROR:
            strlcpy(epeBuffer, buf, min((size_t)len, sizeof(SomLocation::_epeBuffer)));
 23f5830:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 23f5834:	bf28      	it	cs
 23f5836:	f44f 7280 	movcs.w	r2, #256	; 0x100
 23f583a:	4620      	mov	r0, r4
 23f583c:	f006 fe6d 	bl	23fc51a <strlcpy>
            stripLfCr(epeBuffer);
 23f5840:	4620      	mov	r0, r4
 23f5842:	f7ff ffbd 	bl	23f57c0 <_ZN11SomLocation9stripLfCrEPc>
            break;
    }

    return WAIT;
}
 23f5846:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23f584a:	bd10      	pop	{r4, pc}

023f584c <_ZN11SomLocation13parseCmeErrorEPKc>:

CME_Error SomLocation::parseCmeError(const char* buf) {
    unsigned int error_code = 0;
 23f584c:	2300      	movs	r3, #0
CME_Error SomLocation::parseCmeError(const char* buf) {
 23f584e:	b507      	push	{r0, r1, r2, lr}
 23f5850:	4608      	mov	r0, r1
    auto nargs = sscanf(buf," +CME ERROR: %u", &error_code);
 23f5852:	aa01      	add	r2, sp, #4
 23f5854:	490e      	ldr	r1, [pc, #56]	; (23f5890 <_ZN11SomLocation13parseCmeErrorEPKc+0x44>)
    unsigned int error_code = 0;
 23f5856:	9301      	str	r3, [sp, #4]
    auto nargs = sscanf(buf," +CME ERROR: %u", &error_code);
 23f5858:	f001 fcba 	bl	23f71d0 <sscanf>

    if (0 == nargs) {
 23f585c:	b188      	cbz	r0, 23f5882 <_ZN11SomLocation13parseCmeErrorEPKc+0x36>
        return CME_Error::NONE;
    }

    auto ret = CME_Error::UNDEFINED;

    switch (error_code) {
 23f585e:	f240 230a 	movw	r3, #522	; 0x20a
 23f5862:	9801      	ldr	r0, [sp, #4]
 23f5864:	4298      	cmp	r0, r3
 23f5866:	d00c      	beq.n	23f5882 <_ZN11SomLocation13parseCmeErrorEPKc+0x36>
 23f5868:	d80e      	bhi.n	23f5888 <_ZN11SomLocation13parseCmeErrorEPKc+0x3c>
 23f586a:	f5b0 7ffd 	cmp.w	r0, #506	; 0x1fa
 23f586e:	d805      	bhi.n	23f587c <_ZN11SomLocation13parseCmeErrorEPKc+0x30>
 23f5870:	f5b0 7ffc 	cmp.w	r0, #504	; 0x1f8
 23f5874:	d205      	bcs.n	23f5882 <_ZN11SomLocation13parseCmeErrorEPKc+0x36>
 23f5876:	f240 30e7 	movw	r0, #999	; 0x3e7
 23f587a:	e002      	b.n	23f5882 <_ZN11SomLocation13parseCmeErrorEPKc+0x36>
 23f587c:	f5b0 7f01 	cmp.w	r0, #516	; 0x204
 23f5880:	d1f9      	bne.n	23f5876 <_ZN11SomLocation13parseCmeErrorEPKc+0x2a>
            ret = static_cast<CME_Error>(error_code);
            break;
    }

    return ret;
}
 23f5882:	b003      	add	sp, #12
 23f5884:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (error_code) {
 23f5888:	f240 2325 	movw	r3, #549	; 0x225
 23f588c:	4298      	cmp	r0, r3
 23f588e:	e7f7      	b.n	23f5880 <_ZN11SomLocation13parseCmeErrorEPKc+0x34>
 23f5890:	023ff5df 	.word	0x023ff5df

023f5894 <_ZN11SomLocation9parseQlocEPKcRNS_11QlocContextER13LocationPoint>:

int SomLocation::parseQloc(const char* buf, QlocContext& context, LocationPoint& point) {
 23f5894:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f5896:	461d      	mov	r5, r3
 23f5898:	b08f      	sub	sp, #60	; 0x3c
    // The general form of the AT command response is as follows
    // <UTC HHMMSS.hh>,<latitude (-)dd.ddddd>,<longitude (-)ddd.ddddd>,<HDOP>,<altitude>,<fix>,<COG ddd.mm>,<spkm>,<spkn>,<date DDmmyy>,<nsat>
    auto nargs = sscanf(buf, " +QGPSLOC: %02u%02u%02u.%*03u,%lf,%lf,%f,%f,%u,%03u.%02u,%f,%f,%02u%02u%02u,%u",
 23f589a:	f102 0344 	add.w	r3, r2, #68	; 0x44
 23f589e:	930d      	str	r3, [sp, #52]	; 0x34
 23f58a0:	f102 0314 	add.w	r3, r2, #20
 23f58a4:	930c      	str	r3, [sp, #48]	; 0x30
 23f58a6:	f102 0310 	add.w	r3, r2, #16
 23f58aa:	930b      	str	r3, [sp, #44]	; 0x2c
 23f58ac:	f102 030c 	add.w	r3, r2, #12
 23f58b0:	930a      	str	r3, [sp, #40]	; 0x28
 23f58b2:	f102 0340 	add.w	r3, r2, #64	; 0x40
 23f58b6:	9309      	str	r3, [sp, #36]	; 0x24
 23f58b8:	f102 033c 	add.w	r3, r2, #60	; 0x3c
 23f58bc:	9308      	str	r3, [sp, #32]
 23f58be:	f102 0338 	add.w	r3, r2, #56	; 0x38
 23f58c2:	9307      	str	r3, [sp, #28]
 23f58c4:	f102 0334 	add.w	r3, r2, #52	; 0x34
 23f58c8:	9306      	str	r3, [sp, #24]
 23f58ca:	f102 0328 	add.w	r3, r2, #40	; 0x28
 23f58ce:	9305      	str	r3, [sp, #20]
 23f58d0:	f102 0330 	add.w	r3, r2, #48	; 0x30
 23f58d4:	9304      	str	r3, [sp, #16]
 23f58d6:	f102 032c 	add.w	r3, r2, #44	; 0x2c
 23f58da:	9303      	str	r3, [sp, #12]
 23f58dc:	f102 0320 	add.w	r3, r2, #32
 23f58e0:	9302      	str	r3, [sp, #8]
 23f58e2:	f102 0318 	add.w	r3, r2, #24
 23f58e6:	9301      	str	r3, [sp, #4]
 23f58e8:	f102 0308 	add.w	r3, r2, #8
int SomLocation::parseQloc(const char* buf, QlocContext& context, LocationPoint& point) {
 23f58ec:	4608      	mov	r0, r1
    auto nargs = sscanf(buf, " +QGPSLOC: %02u%02u%02u.%*03u,%lf,%lf,%f,%f,%u,%03u.%02u,%f,%f,%02u%02u%02u,%u",
 23f58ee:	9300      	str	r3, [sp, #0]
 23f58f0:	492b      	ldr	r1, [pc, #172]	; (23f59a0 <_ZN11SomLocation9parseQlocEPKcRNS_11QlocContextER13LocationPoint+0x10c>)
 23f58f2:	1d13      	adds	r3, r2, #4
int SomLocation::parseQloc(const char* buf, QlocContext& context, LocationPoint& point) {
 23f58f4:	4614      	mov	r4, r2
    auto nargs = sscanf(buf, " +QGPSLOC: %02u%02u%02u.%*03u,%lf,%lf,%f,%f,%u,%03u.%02u,%f,%f,%02u%02u%02u,%u",
 23f58f6:	f001 fc6b 	bl	23f71d0 <sscanf>
                        &context.latitude, &context.longitude, &context.hdop, &context.altitude,
                        &context.fix, &context.cogDegrees, &context.cogMinutes, &context.speedKmph, &context.speedKnots,
                        &context.tm_day, &context.tm_month, &context.tm_year,
                        &context.nsat);

    if (0 == nargs) {
 23f58fa:	2800      	cmp	r0, #0
 23f58fc:	d04d      	beq.n	23f599a <_ZN11SomLocation9parseQlocEPKcRNS_11QlocContextER13LocationPoint+0x106>
    context.timeinfo.tm_year = context.tm_year + 2000 - 1900;  // GPRMC year from 2000 and then the difference from 1900
    context.timeinfo.tm_mon = context.tm_month - 1;     // The number of months since January (0-11)
    context.timeinfo.tm_mday = context.tm_day;
    context.timeinfo.tm_hour = context.tm_hour;
    context.timeinfo.tm_min = context.tm_min;
    context.timeinfo.tm_sec = context.tm_sec;
 23f58fe:	4620      	mov	r0, r4
    context.timeinfo.tm_year = context.tm_year + 2000 - 1900;  // GPRMC year from 2000 and then the difference from 1900
 23f5900:	6963      	ldr	r3, [r4, #20]
 23f5902:	3364      	adds	r3, #100	; 0x64
 23f5904:	65e3      	str	r3, [r4, #92]	; 0x5c
    context.timeinfo.tm_mon = context.tm_month - 1;     // The number of months since January (0-11)
 23f5906:	6923      	ldr	r3, [r4, #16]
 23f5908:	3b01      	subs	r3, #1
 23f590a:	65a3      	str	r3, [r4, #88]	; 0x58
    context.timeinfo.tm_mday = context.tm_day;
 23f590c:	68e3      	ldr	r3, [r4, #12]
 23f590e:	6563      	str	r3, [r4, #84]	; 0x54
    context.timeinfo.tm_hour = context.tm_hour;
 23f5910:	6823      	ldr	r3, [r4, #0]
 23f5912:	6523      	str	r3, [r4, #80]	; 0x50
    context.timeinfo.tm_min = context.tm_min;
 23f5914:	6863      	ldr	r3, [r4, #4]
 23f5916:	64e3      	str	r3, [r4, #76]	; 0x4c
    context.timeinfo.tm_sec = context.tm_sec;
 23f5918:	68a3      	ldr	r3, [r4, #8]
 23f591a:	f840 3f48 	str.w	r3, [r0, #72]!
    point.epochTime = std::mktime(&context.timeinfo);
 23f591e:	f001 fcf1 	bl	23f7304 <mktime>
 23f5922:	e9c5 0102 	strd	r0, r1, [r5, #8]

    point.fix = context.fix;
 23f5926:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    point.latitude = context.latitude;
    point.longitude = context.longitude;
    point.altitude = context.altitude;
    point.speed = context.speedKmph * 1000.0;
 23f5928:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 23f59a4 <_ZN11SomLocation9parseQlocEPKcRNS_11QlocContextER13LocationPoint+0x110>
    point.fix = context.fix;
 23f592c:	602b      	str	r3, [r5, #0]
    point.latitude = context.latitude;
 23f592e:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 23f5932:	e9c5 2306 	strd	r2, r3, [r5, #24]
    point.longitude = context.longitude;
 23f5936:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 23f593a:	e9c5 2308 	strd	r2, r3, [r5, #32]
    point.altitude = context.altitude;
 23f593e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 23f5940:	62ab      	str	r3, [r5, #40]	; 0x28
    point.speed = context.speedKmph * 1000.0;
 23f5942:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
 23f5946:	ee67 7a87 	vmul.f32	s15, s15, s14
 23f594a:	edc5 7a0b 	vstr	s15, [r5, #44]	; 0x2c
    point.heading = (float)context.cogDegrees + (float)context.cogMinutes / 60.0;
 23f594e:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 23f5952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23f5956:	ee17 0a90 	vmov	r0, s15
 23f595a:	f7ec fe11 	bl	23e2580 <__aeabi_f2d>
 23f595e:	2200      	movs	r2, #0
 23f5960:	4b11      	ldr	r3, [pc, #68]	; (23f59a8 <_ZN11SomLocation9parseQlocEPKcRNS_11QlocContextER13LocationPoint+0x114>)
 23f5962:	f7ec ff8f 	bl	23e2884 <__aeabi_ddiv>
 23f5966:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 23f596a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23f596e:	4606      	mov	r6, r0
 23f5970:	ee17 0a90 	vmov	r0, s15
 23f5974:	460f      	mov	r7, r1
 23f5976:	f7ec fe03 	bl	23e2580 <__aeabi_f2d>
 23f597a:	460b      	mov	r3, r1
 23f597c:	4602      	mov	r2, r0
 23f597e:	4639      	mov	r1, r7
 23f5980:	4630      	mov	r0, r6
 23f5982:	f7ec fc9f 	bl	23e22c4 <__adddf3>
 23f5986:	f7ed f94b 	bl	23e2c20 <__aeabi_d2f>
 23f598a:	6328      	str	r0, [r5, #48]	; 0x30
    point.horizontalDop = context.hdop;
    point.satsInUse = context.nsat;

    return 0;
 23f598c:	2000      	movs	r0, #0
    point.horizontalDop = context.hdop;
 23f598e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23f5990:	63ab      	str	r3, [r5, #56]	; 0x38
    point.satsInUse = context.nsat;
 23f5992:	6c63      	ldr	r3, [r4, #68]	; 0x44
 23f5994:	64ab      	str	r3, [r5, #72]	; 0x48
}
 23f5996:	b00f      	add	sp, #60	; 0x3c
 23f5998:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
 23f599a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23f599e:	e7fa      	b.n	23f5996 <_ZN11SomLocation9parseQlocEPKcRNS_11QlocContextER13LocationPoint+0x102>
 23f59a0:	023ff5ef 	.word	0x023ff5ef
 23f59a4:	447a0000 	.word	0x447a0000
 23f59a8:	404e0000 	.word	0x404e0000

023f59ac <_ZN11SomLocation17parseQlocResponseEPKcRNS_11QlocContextER13LocationPoint>:

CME_Error SomLocation::parseQlocResponse(const char* buf, QlocContext& context, LocationPoint& point) {
 23f59ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f59ae:	4605      	mov	r5, r0
 23f59b0:	9201      	str	r2, [sp, #4]
 23f59b2:	460e      	mov	r6, r1
 23f59b4:	461c      	mov	r4, r3
    // Only expect the following CME error codes if present
    //   CME_Error::SESSION_IS_ONGOING - if GNSS is not enabled or ready
    //   CME_Error::SESSION_NOT_ACTIVE - if GNSS is not enabled or ready
    //   CME_Error::NO_FIX - if GNSS acquiring and not fixed
    auto result = parseCmeError(buf);
 23f59b6:	f7ff ff49 	bl	23f584c <_ZN11SomLocation13parseCmeErrorEPKc>

    if (CME_Error::NO_FIX == result) {
 23f59ba:	f5b0 7f01 	cmp.w	r0, #516	; 0x204
 23f59be:	9a01      	ldr	r2, [sp, #4]
 23f59c0:	d103      	bne.n	23f59ca <_ZN11SomLocation17parseQlocResponseEPKcRNS_11QlocContextER13LocationPoint+0x1e>
        point.fix = 0;
 23f59c2:	2300      	movs	r3, #0
 23f59c4:	6023      	str	r3, [r4, #0]
        return CME_Error::NONE;  // module just may have not been initialized
    }

    parseQloc(buf, context, point);
    return CME_Error::FIX;
}
 23f59c6:	b002      	add	sp, #8
 23f59c8:	bd70      	pop	{r4, r5, r6, pc}
    if (CME_Error::NONE != result) {
 23f59ca:	b930      	cbnz	r0, 23f59da <_ZN11SomLocation17parseQlocResponseEPKcRNS_11QlocContextER13LocationPoint+0x2e>
    parseQloc(buf, context, point);
 23f59cc:	4623      	mov	r3, r4
 23f59ce:	4631      	mov	r1, r6
 23f59d0:	4628      	mov	r0, r5
 23f59d2:	f7ff ff5f 	bl	23f5894 <_ZN11SomLocation9parseQlocEPKcRNS_11QlocContextER13LocationPoint>
    return CME_Error::FIX;
 23f59d6:	2001      	movs	r0, #1
 23f59d8:	e7f5      	b.n	23f59c6 <_ZN11SomLocation17parseQlocResponseEPKcRNS_11QlocContextER13LocationPoint+0x1a>
        return CME_Error::NONE;  // module just may have not been initialized
 23f59da:	2000      	movs	r0, #0
 23f59dc:	e7f3      	b.n	23f59c6 <_ZN11SomLocation17parseQlocResponseEPKcRNS_11QlocContextER13LocationPoint+0x1a>
	...

023f59e0 <_ZN11SomLocation16parseEpeResponseEPKcRNS_10EpeContextER13LocationPoint>:

void SomLocation::parseEpeResponse(const char* buf, EpeContext& context, LocationPoint& point) {
 23f59e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f59e2:	460e      	mov	r6, r1
 23f59e4:	4614      	mov	r4, r2
 23f59e6:	461d      	mov	r5, r3
    // Only expect the following CME error codes
    //   CME_Error::SESSION_IS_ONGOING - if GNSS is not enabled or ready
    //   CME_Error::SESSION_NOT_ACTIVE - if GNSS is not enabled or ready
    //   CME_Error::NO_FIX - if GNSS acquiring and not fixed
    auto result = parseCmeError(buf);
 23f59e8:	f7ff ff30 	bl	23f584c <_ZN11SomLocation13parseCmeErrorEPKc>

    if (CME_Error::NONE != result) {
 23f59ec:	b980      	cbnz	r0, 23f5a10 <_ZN11SomLocation16parseEpeResponseEPKcRNS_10EpeContextER13LocationPoint+0x30>
        return;  // module just may have not been initialized
    }

    auto nargs = sscanf(buf, " +QGPSCFG: \"estimation_error\",%f,%f,%f,%f",
 23f59ee:	f104 030c 	add.w	r3, r4, #12
 23f59f2:	9301      	str	r3, [sp, #4]
 23f59f4:	f104 0308 	add.w	r3, r4, #8
 23f59f8:	9300      	str	r3, [sp, #0]
 23f59fa:	4622      	mov	r2, r4
 23f59fc:	4630      	mov	r0, r6
 23f59fe:	4905      	ldr	r1, [pc, #20]	; (23f5a14 <_ZN11SomLocation16parseEpeResponseEPKcRNS_10EpeContextER13LocationPoint+0x34>)
 23f5a00:	1d23      	adds	r3, r4, #4
 23f5a02:	f001 fbe5 	bl	23f71d0 <sscanf>
                        &context.h_acc, &context.v_acc, &context.speed_acc, &context.head_acc);

    if (nargs) {
 23f5a06:	b118      	cbz	r0, 23f5a10 <_ZN11SomLocation16parseEpeResponseEPKcRNS_10EpeContextER13LocationPoint+0x30>
        point.horizontalAccuracy = context.h_acc;
 23f5a08:	6823      	ldr	r3, [r4, #0]
 23f5a0a:	636b      	str	r3, [r5, #52]	; 0x34
        point.verticalAccuracy = context.v_acc;
 23f5a0c:	6863      	ldr	r3, [r4, #4]
 23f5a0e:	63eb      	str	r3, [r5, #60]	; 0x3c
    }

    return;
}
 23f5a10:	b002      	add	sp, #8
 23f5a12:	bd70      	pop	{r4, r5, r6, pc}
 23f5a14:	023ff63e 	.word	0x023ff63e

023f5a18 <_ZN11SomLocation12buildPublishEPcjR13LocationPointj>:

    // Kill the thread if we get here
    _thread->cancel();
}

size_t SomLocation::buildPublish(char* buffer, size_t len, LocationPoint& point, unsigned int seq) {
 23f5a18:	b570      	push	{r4, r5, r6, lr}
 23f5a1a:	460d      	mov	r5, r1
 23f5a1c:	b086      	sub	sp, #24
    memset(buffer, 0, len);
 23f5a1e:	2100      	movs	r1, #0
 23f5a20:	4628      	mov	r0, r5
size_t SomLocation::buildPublish(char* buffer, size_t len, LocationPoint& point, unsigned int seq) {
 23f5a22:	4616      	mov	r6, r2
 23f5a24:	461c      	mov	r4, r3
    memset(buffer, 0, len);
 23f5a26:	f006 fcde 	bl	23fc3e6 <memset>
        state_(BEGIN) {
 23f5a2a:	2300      	movs	r3, #0
        n_(0) {
 23f5a2c:	4a68      	ldr	r2, [pc, #416]	; (23f5bd0 <_ZN11SomLocation12buildPublishEPcjR13LocationPointj+0x1b8>)
    JSONBufferWriter writer(buffer, len);
    writer.beginObject();
 23f5a2e:	a801      	add	r0, sp, #4
        state_(BEGIN) {
 23f5a30:	f88d 3008 	strb.w	r3, [sp, #8]
        n_(0) {
 23f5a34:	9305      	str	r3, [sp, #20]
 23f5a36:	9201      	str	r2, [sp, #4]
 23f5a38:	e9cd 5603 	strd	r5, r6, [sp, #12]
 23f5a3c:	f002 fb9b 	bl	23f8176 <_ZN5spark10JSONWriter11beginObjectEv>
        writer.name("cmd").value("loc");
 23f5a40:	4964      	ldr	r1, [pc, #400]	; (23f5bd4 <_ZN11SomLocation12buildPublishEPcjR13LocationPointj+0x1bc>)
 23f5a42:	a801      	add	r0, sp, #4
 23f5a44:	f7ee faba 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
    return value(val, strlen(val));
 23f5a48:	2203      	movs	r2, #3
 23f5a4a:	4963      	ldr	r1, [pc, #396]	; (23f5bd8 <_ZN11SomLocation12buildPublishEPcjR13LocationPointj+0x1c0>)
 23f5a4c:	f002 fc9c 	bl	23f8388 <_ZN5spark10JSONWriter5valueEPKcj>
        if (point.systemTime) {
 23f5a50:	6923      	ldr	r3, [r4, #16]
 23f5a52:	b133      	cbz	r3, 23f5a62 <_ZN11SomLocation12buildPublishEPcjR13LocationPointj+0x4a>
            writer.name("time").value((unsigned int)point.systemTime);
 23f5a54:	4961      	ldr	r1, [pc, #388]	; (23f5bdc <_ZN11SomLocation12buildPublishEPcjR13LocationPointj+0x1c4>)
 23f5a56:	a801      	add	r0, sp, #4
 23f5a58:	f7ee fab0 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23f5a5c:	6921      	ldr	r1, [r4, #16]
 23f5a5e:	f002 fba9 	bl	23f81b4 <_ZN5spark10JSONWriter5valueEj>
        }
        writer.name("loc");
 23f5a62:	495d      	ldr	r1, [pc, #372]	; (23f5bd8 <_ZN11SomLocation12buildPublishEPcjR13LocationPointj+0x1c0>)
 23f5a64:	a801      	add	r0, sp, #4
 23f5a66:	f7ee faa9 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
        writer.beginObject();
 23f5a6a:	a801      	add	r0, sp, #4
 23f5a6c:	f002 fb83 	bl	23f8176 <_ZN5spark10JSONWriter11beginObjectEv>
        if (0 == point.fix) {
 23f5a70:	6825      	ldr	r5, [r4, #0]
            writer.name("lck").value(0);
 23f5a72:	495b      	ldr	r1, [pc, #364]	; (23f5be0 <_ZN11SomLocation12buildPublishEPcjR13LocationPointj+0x1c8>)
 23f5a74:	a801      	add	r0, sp, #4
        if (0 == point.fix) {
 23f5a76:	b9a5      	cbnz	r5, 23f5aa2 <_ZN11SomLocation12buildPublishEPcjR13LocationPointj+0x8a>
            writer.name("lck").value(0);
 23f5a78:	f7ee faa0 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23f5a7c:	4629      	mov	r1, r5
 23f5a7e:	f002 fb87 	bl	23f8190 <_ZN5spark10JSONWriter5valueEi>
                writer.name("v_acc").value(point.verticalAccuracy, 3);
            }
            writer.name("nsat").value(point.satsInUse);
            writer.name("ttff").value(point.timeToFirstFix, 1);
        }
        writer.endObject();
 23f5a82:	a801      	add	r0, sp, #4
 23f5a84:	f002 fb61 	bl	23f814a <_ZN5spark10JSONWriter9endObjectEv>
        writer.name("req_id").value(seq);
 23f5a88:	4956      	ldr	r1, [pc, #344]	; (23f5be4 <_ZN11SomLocation12buildPublishEPcjR13LocationPointj+0x1cc>)
 23f5a8a:	a801      	add	r0, sp, #4
 23f5a8c:	f7ee fa96 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23f5a90:	990a      	ldr	r1, [sp, #40]	; 0x28
 23f5a92:	f002 fb8f 	bl	23f81b4 <_ZN5spark10JSONWriter5valueEj>
    writer.endObject();
 23f5a96:	a801      	add	r0, sp, #4
 23f5a98:	f002 fb57 	bl	23f814a <_ZN5spark10JSONWriter9endObjectEv>

    return writer.dataSize();
}
 23f5a9c:	9805      	ldr	r0, [sp, #20]
 23f5a9e:	b006      	add	sp, #24
 23f5aa0:	bd70      	pop	{r4, r5, r6, pc}
            writer.name("lck").value(1);
 23f5aa2:	f7ee fa8b 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23f5aa6:	2101      	movs	r1, #1
 23f5aa8:	f002 fb72 	bl	23f8190 <_ZN5spark10JSONWriter5valueEi>
            writer.name("time").value((unsigned int)point.epochTime);
 23f5aac:	494b      	ldr	r1, [pc, #300]	; (23f5bdc <_ZN11SomLocation12buildPublishEPcjR13LocationPointj+0x1c4>)
 23f5aae:	a801      	add	r0, sp, #4
 23f5ab0:	f7ee fa84 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23f5ab4:	68a1      	ldr	r1, [r4, #8]
 23f5ab6:	f002 fb7d 	bl	23f81b4 <_ZN5spark10JSONWriter5valueEj>
            writer.name("lat").value(point.latitude, 8);
 23f5aba:	494b      	ldr	r1, [pc, #300]	; (23f5be8 <_ZN11SomLocation12buildPublishEPcjR13LocationPointj+0x1d0>)
 23f5abc:	a801      	add	r0, sp, #4
 23f5abe:	f7ee fa7d 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23f5ac2:	ed94 0b06 	vldr	d0, [r4, #24]
 23f5ac6:	2108      	movs	r1, #8
 23f5ac8:	f002 fbac 	bl	23f8224 <_ZN5spark10JSONWriter5valueEdi>
            writer.name("lon").value(point.longitude, 8);
 23f5acc:	4947      	ldr	r1, [pc, #284]	; (23f5bec <_ZN11SomLocation12buildPublishEPcjR13LocationPointj+0x1d4>)
 23f5ace:	a801      	add	r0, sp, #4
 23f5ad0:	f7ee fa74 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23f5ad4:	ed94 0b08 	vldr	d0, [r4, #32]
 23f5ad8:	2108      	movs	r1, #8
 23f5ada:	f002 fba3 	bl	23f8224 <_ZN5spark10JSONWriter5valueEdi>
            writer.name("alt").value(point.altitude, 3);
 23f5ade:	4944      	ldr	r1, [pc, #272]	; (23f5bf0 <_ZN11SomLocation12buildPublishEPcjR13LocationPointj+0x1d8>)
 23f5ae0:	a801      	add	r0, sp, #4
 23f5ae2:	f7ee fa6b 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23f5ae6:	4605      	mov	r5, r0
 23f5ae8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f5aea:	f7ec fd49 	bl	23e2580 <__aeabi_f2d>
 23f5aee:	ec41 0b10 	vmov	d0, r0, r1
 23f5af2:	2103      	movs	r1, #3
 23f5af4:	4628      	mov	r0, r5
 23f5af6:	f002 fb95 	bl	23f8224 <_ZN5spark10JSONWriter5valueEdi>
            writer.name("hd").value(point.heading, 2);
 23f5afa:	493e      	ldr	r1, [pc, #248]	; (23f5bf4 <_ZN11SomLocation12buildPublishEPcjR13LocationPointj+0x1dc>)
 23f5afc:	a801      	add	r0, sp, #4
 23f5afe:	f7ee fa5d 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23f5b02:	4605      	mov	r5, r0
 23f5b04:	6b20      	ldr	r0, [r4, #48]	; 0x30
 23f5b06:	f7ec fd3b 	bl	23e2580 <__aeabi_f2d>
 23f5b0a:	ec41 0b10 	vmov	d0, r0, r1
 23f5b0e:	2102      	movs	r1, #2
 23f5b10:	4628      	mov	r0, r5
 23f5b12:	f002 fb87 	bl	23f8224 <_ZN5spark10JSONWriter5valueEdi>
            writer.name("spd").value(point.speed, 2);
 23f5b16:	4938      	ldr	r1, [pc, #224]	; (23f5bf8 <_ZN11SomLocation12buildPublishEPcjR13LocationPointj+0x1e0>)
 23f5b18:	a801      	add	r0, sp, #4
 23f5b1a:	f7ee fa4f 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23f5b1e:	4605      	mov	r5, r0
 23f5b20:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 23f5b22:	f7ec fd2d 	bl	23e2580 <__aeabi_f2d>
 23f5b26:	ec41 0b10 	vmov	d0, r0, r1
 23f5b2a:	2102      	movs	r1, #2
 23f5b2c:	4628      	mov	r0, r5
 23f5b2e:	f002 fb79 	bl	23f8224 <_ZN5spark10JSONWriter5valueEdi>
            writer.name("hdop").value(point.horizontalDop, 1);
 23f5b32:	4932      	ldr	r1, [pc, #200]	; (23f5bfc <_ZN11SomLocation12buildPublishEPcjR13LocationPointj+0x1e4>)
 23f5b34:	a801      	add	r0, sp, #4
 23f5b36:	f7ee fa41 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23f5b3a:	4605      	mov	r5, r0
 23f5b3c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 23f5b3e:	f7ec fd1f 	bl	23e2580 <__aeabi_f2d>
 23f5b42:	ec41 0b10 	vmov	d0, r0, r1
 23f5b46:	2101      	movs	r1, #1
 23f5b48:	4628      	mov	r0, r5
 23f5b4a:	f002 fb6b 	bl	23f8224 <_ZN5spark10JSONWriter5valueEdi>
            if (0.0 < point.horizontalAccuracy) {
 23f5b4e:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 23f5b52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23f5b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f5b5a:	dd0d      	ble.n	23f5b78 <_ZN11SomLocation12buildPublishEPcjR13LocationPointj+0x160>
                writer.name("h_acc").value(point.horizontalAccuracy, 3);
 23f5b5c:	4928      	ldr	r1, [pc, #160]	; (23f5c00 <_ZN11SomLocation12buildPublishEPcjR13LocationPointj+0x1e8>)
 23f5b5e:	a801      	add	r0, sp, #4
 23f5b60:	f7ee fa2c 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23f5b64:	4605      	mov	r5, r0
 23f5b66:	6b60      	ldr	r0, [r4, #52]	; 0x34
 23f5b68:	f7ec fd0a 	bl	23e2580 <__aeabi_f2d>
 23f5b6c:	ec41 0b10 	vmov	d0, r0, r1
 23f5b70:	2103      	movs	r1, #3
 23f5b72:	4628      	mov	r0, r5
 23f5b74:	f002 fb56 	bl	23f8224 <_ZN5spark10JSONWriter5valueEdi>
            if (0.0 < point.verticalAccuracy) {
 23f5b78:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
 23f5b7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23f5b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f5b84:	dd0d      	ble.n	23f5ba2 <_ZN11SomLocation12buildPublishEPcjR13LocationPointj+0x18a>
                writer.name("v_acc").value(point.verticalAccuracy, 3);
 23f5b86:	491f      	ldr	r1, [pc, #124]	; (23f5c04 <_ZN11SomLocation12buildPublishEPcjR13LocationPointj+0x1ec>)
 23f5b88:	a801      	add	r0, sp, #4
 23f5b8a:	f7ee fa17 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23f5b8e:	4605      	mov	r5, r0
 23f5b90:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 23f5b92:	f7ec fcf5 	bl	23e2580 <__aeabi_f2d>
 23f5b96:	ec41 0b10 	vmov	d0, r0, r1
 23f5b9a:	2103      	movs	r1, #3
 23f5b9c:	4628      	mov	r0, r5
 23f5b9e:	f002 fb41 	bl	23f8224 <_ZN5spark10JSONWriter5valueEdi>
            writer.name("nsat").value(point.satsInUse);
 23f5ba2:	4919      	ldr	r1, [pc, #100]	; (23f5c08 <_ZN11SomLocation12buildPublishEPcjR13LocationPointj+0x1f0>)
 23f5ba4:	a801      	add	r0, sp, #4
 23f5ba6:	f7ee fa09 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23f5baa:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f5bac:	f002 fb02 	bl	23f81b4 <_ZN5spark10JSONWriter5valueEj>
            writer.name("ttff").value(point.timeToFirstFix, 1);
 23f5bb0:	4916      	ldr	r1, [pc, #88]	; (23f5c0c <_ZN11SomLocation12buildPublishEPcjR13LocationPointj+0x1f4>)
 23f5bb2:	a801      	add	r0, sp, #4
 23f5bb4:	f7ee fa02 	bl	23e3fbc <_ZN5spark10JSONWriter4nameEPKc>
 23f5bb8:	4605      	mov	r5, r0
 23f5bba:	6c60      	ldr	r0, [r4, #68]	; 0x44
 23f5bbc:	f7ec fce0 	bl	23e2580 <__aeabi_f2d>
 23f5bc0:	ec41 0b10 	vmov	d0, r0, r1
 23f5bc4:	2101      	movs	r1, #1
 23f5bc6:	4628      	mov	r0, r5
 23f5bc8:	f002 fb2c 	bl	23f8224 <_ZN5spark10JSONWriter5valueEdi>
 23f5bcc:	e759      	b.n	23f5a82 <_ZN11SomLocation12buildPublishEPcjR13LocationPointj+0x6a>
 23f5bce:	bf00      	nop
 23f5bd0:	023ff9b4 	.word	0x023ff9b4
 23f5bd4:	023ff668 	.word	0x023ff668
 23f5bd8:	023ff66c 	.word	0x023ff66c
 23f5bdc:	023ffa5e 	.word	0x023ffa5e
 23f5be0:	023ff670 	.word	0x023ff670
 23f5be4:	023ff696 	.word	0x023ff696
 23f5be8:	023fe024 	.word	0x023fe024
 23f5bec:	023fe028 	.word	0x023fe028
 23f5bf0:	023fe02c 	.word	0x023fe02c
 23f5bf4:	023ff674 	.word	0x023ff674
 23f5bf8:	023ff677 	.word	0x023ff677
 23f5bfc:	023ff67b 	.word	0x023ff67b
 23f5c00:	023ff680 	.word	0x023ff680
 23f5c04:	023ff686 	.word	0x023ff686
 23f5c08:	023ff68c 	.word	0x023ff68c
 23f5c0c:	023ff691 	.word	0x023ff691

023f5c10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 23f5c10:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 23f5c12:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23f5c14:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23f5c16:	b17c      	cbz	r4, 23f5c38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23f5c18:	6863      	ldr	r3, [r4, #4]
 23f5c1a:	3b01      	subs	r3, #1
 23f5c1c:	6063      	str	r3, [r4, #4]
 23f5c1e:	b95b      	cbnz	r3, 23f5c38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23f5c20:	6823      	ldr	r3, [r4, #0]
 23f5c22:	4620      	mov	r0, r4
 23f5c24:	689b      	ldr	r3, [r3, #8]
 23f5c26:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23f5c28:	68a3      	ldr	r3, [r4, #8]
 23f5c2a:	3b01      	subs	r3, #1
 23f5c2c:	60a3      	str	r3, [r4, #8]
 23f5c2e:	b91b      	cbnz	r3, 23f5c38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23f5c30:	6823      	ldr	r3, [r4, #0]
 23f5c32:	4620      	mov	r0, r4
 23f5c34:	68db      	ldr	r3, [r3, #12]
 23f5c36:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23f5c38:	4628      	mov	r0, r5
 23f5c3a:	bd38      	pop	{r3, r4, r5, pc}

023f5c3c <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>:
    ResultT result() const {
 23f5c3c:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23f5c3e:	6804      	ldr	r4, [r0, #0]
        return (application_thread_current(nullptr) != 0);
 23f5c40:	2000      	movs	r0, #0
 23f5c42:	f001 f879 	bl	23f6d38 <application_thread_current>
 23f5c46:	1c65      	adds	r5, r4, #1
        if (ContextT::isApplicationThreadCurrent()) {
 23f5c48:	b128      	cbz	r0, 23f5c56 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x1a>
 23f5c4a:	782b      	ldrb	r3, [r5, #0]
 23f5c4c:	b2db      	uxtb	r3, r3
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 23f5c4e:	b913      	cbnz	r3, 23f5c56 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x1a>
        spark_process();
 23f5c50:	f001 f8fe 	bl	23f6e50 <spark_process>
    }
 23f5c54:	e7f9      	b.n	23f5c4a <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0xe>
 23f5c56:	e8d5 3f8f 	ldab	r3, [r5]
 23f5c5a:	b2db      	uxtb	r3, r3
        if (this->acquireDone() && this->isSucceeded()) {
 23f5c5c:	b90b      	cbnz	r3, 23f5c62 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x26>
        return std::move(defaultValue);
 23f5c5e:	2000      	movs	r0, #0
    }
 23f5c60:	bd38      	pop	{r3, r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
 23f5c62:	2000      	movs	r0, #0
 23f5c64:	f001 f868 	bl	23f6d38 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23f5c68:	b128      	cbz	r0, 23f5c76 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x3a>
 23f5c6a:	782b      	ldrb	r3, [r5, #0]
 23f5c6c:	b2db      	uxtb	r3, r3
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 23f5c6e:	b913      	cbnz	r3, 23f5c76 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x3a>
        spark_process();
 23f5c70:	f001 f8ee 	bl	23f6e50 <spark_process>
    }
 23f5c74:	e7f9      	b.n	23f5c6a <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x2e>
 23f5c76:	7823      	ldrb	r3, [r4, #0]
 23f5c78:	b2db      	uxtb	r3, r3
        if (this->acquireDone() && this->isSucceeded()) {
 23f5c7a:	2b01      	cmp	r3, #1
 23f5c7c:	d1ef      	bne.n	23f5c5e <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x22>
            return result_;
 23f5c7e:	7b20      	ldrb	r0, [r4, #12]
 23f5c80:	e7ee      	b.n	23f5c60 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x24>

023f5c82 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 23f5c82:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f5c84:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 23f5c86:	460b      	mov	r3, r1
 23f5c88:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f5c8a:	e9d0 0100 	ldrd	r0, r1, [r0]
 23f5c8e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23f5c92:	e893 0003 	ldmia.w	r3, {r0, r1}
 23f5c96:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23f5c9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 23f5c9e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 23f5ca2:	b002      	add	sp, #8
 23f5ca4:	bd10      	pop	{r4, pc}
	...

023f5ca8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
 23f5ca8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23f5cac:	4606      	mov	r6, r0
 23f5cae:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
 23f5cb0:	2014      	movs	r0, #20
 23f5cb2:	492c      	ldr	r1, [pc, #176]	; (23f5d64 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xbc>)
    Thread(const char *name, wiring_thread_fn_t function,
 23f5cb4:	4617      	mov	r7, r2
 23f5cb6:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
 23f5cb8:	f003 fe68 	bl	23f998c <_ZnwjRKSt9nothrow_t>
 23f5cbc:	4604      	mov	r4, r0
 23f5cbe:	b130      	cbz	r0, 23f5cce <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 23f5cc0:	2000      	movs	r0, #0
            exited(false) {
 23f5cc2:	e9c4 0000 	strd	r0, r0, [r4]
 23f5cc6:	e9c4 0002 	strd	r0, r0, [r4, #8]
 23f5cca:	7420      	strb	r0, [r4, #16]
 23f5ccc:	7460      	strb	r0, [r4, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 23f5cce:	6034      	str	r4, [r6, #0]
        if (!d_) {
 23f5cd0:	2c00      	cmp	r4, #0
 23f5cd2:	d031      	beq.n	23f5d38 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
 23f5cd4:	2010      	movs	r0, #16
 23f5cd6:	4923      	ldr	r1, [pc, #140]	; (23f5d64 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xbc>)
 23f5cd8:	f003 fe58 	bl	23f998c <_ZnwjRKSt9nothrow_t>
 23f5cdc:	4605      	mov	r5, r0
 23f5cde:	b168      	cbz	r0, 23f5cfc <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
 23f5ce0:	2300      	movs	r3, #0
	std::swap(_M_functor, __x._M_functor);
 23f5ce2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23f5ce4:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23f5ce6:	4638      	mov	r0, r7
 23f5ce8:	f7ff ffcb 	bl	23f5c82 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f5cec:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f5cee:	68aa      	ldr	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f5cf0:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f5cf2:	60ba      	str	r2, [r7, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f5cf4:	68fb      	ldr	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 23f5cf6:	68ea      	ldr	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f5cf8:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
 23f5cfa:	60fa      	str	r2, [r7, #12]
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
      const _Dp& _M_deleter() const { return std::get<1>(_M_t); }

      void reset(pointer __p) noexcept
      {
	const pointer __old_p = _M_ptr();
 23f5cfc:	6827      	ldr	r7, [r4, #0]
	_M_ptr() = __p;
 23f5cfe:	6025      	str	r5, [r4, #0]
	if (__old_p)
 23f5d00:	b137      	cbz	r7, 23f5d10 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
 23f5d02:	4638      	mov	r0, r7
 23f5d04:	f7fe ff9c 	bl	23f4c40 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
 23f5d08:	2110      	movs	r1, #16
 23f5d0a:	4638      	mov	r0, r7
 23f5d0c:	f7ed faf9 	bl	23e3302 <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 23f5d10:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
 23f5d12:	6803      	ldr	r3, [r0, #0]
 23f5d14:	b183      	cbz	r3, 23f5d38 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 23f5d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23f5d18:	464a      	mov	r2, r9
 23f5d1a:	e9cd 0300 	strd	r0, r3, [sp]
 23f5d1e:	4641      	mov	r1, r8
 23f5d20:	4b11      	ldr	r3, [pc, #68]	; (23f5d68 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xc0>)
 23f5d22:	3004      	adds	r0, #4
 23f5d24:	f000 fb1c 	bl	23f6360 <os_thread_create>
 23f5d28:	b930      	cbnz	r0, 23f5d38 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
 23f5d2a:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
 23f5d2c:	7c1b      	ldrb	r3, [r3, #16]
 23f5d2e:	b9a3      	cbnz	r3, 23f5d5a <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb2>
            HAL_Delay_Milliseconds(1);
 23f5d30:	2001      	movs	r0, #1
 23f5d32:	f000 fba1 	bl	23f6478 <HAL_Delay_Milliseconds>
        while (!d_->started) {
 23f5d36:	e7f8      	b.n	23f5d2a <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
	_M_ptr() = __p;
 23f5d38:	2300      	movs	r3, #0
	const pointer __old_p = _M_ptr();
 23f5d3a:	6834      	ldr	r4, [r6, #0]
	_M_ptr() = __p;
 23f5d3c:	6033      	str	r3, [r6, #0]
	if (__old_p)
 23f5d3e:	b164      	cbz	r4, 23f5d5a <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb2>
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
 23f5d40:	6825      	ldr	r5, [r4, #0]
 23f5d42:	b135      	cbz	r5, 23f5d52 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xaa>
 23f5d44:	4628      	mov	r0, r5
 23f5d46:	f7fe ff7b 	bl	23f4c40 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
 23f5d4a:	2110      	movs	r1, #16
 23f5d4c:	4628      	mov	r0, r5
 23f5d4e:	f7ed fad8 	bl	23e3302 <_ZdlPvj>
 23f5d52:	2114      	movs	r1, #20
 23f5d54:	4620      	mov	r0, r4
 23f5d56:	f7ed fad4 	bl	23e3302 <_ZdlPvj>
    }
 23f5d5a:	4630      	mov	r0, r6
 23f5d5c:	b003      	add	sp, #12
 23f5d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23f5d62:	bf00      	nop
 23f5d64:	023ffb34 	.word	0x023ffb34
 23f5d68:	023f5671 	.word	0x023f5671

023f5d6c <_ZN11SomLocationC1Ev>:
SomLocation::SomLocation() {
 23f5d6c:	b570      	push	{r4, r5, r6, lr}
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23f5d6e:	2500      	movs	r5, #0
 23f5d70:	4604      	mov	r4, r0
 23f5d72:	b086      	sub	sp, #24
 23f5d74:	4629      	mov	r1, r5
 23f5d76:	7305      	strb	r5, [r0, #12]
 23f5d78:	2270      	movs	r2, #112	; 0x70
 23f5d7a:	f500 7004 	add.w	r0, r0, #528	; 0x210
 23f5d7e:	f006 fb32 	bl	23fc3e6 <memset>
 23f5d82:	4629      	mov	r1, r5
 23f5d84:	2210      	movs	r2, #16
 23f5d86:	f504 7020 	add.w	r0, r4, #640	; 0x280
 23f5d8a:	f006 fb2c 	bl	23fc3e6 <memset>
 23f5d8e:	2264      	movs	r2, #100	; 0x64
 23f5d90:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
 23f5d94:	4a1b      	ldr	r2, [pc, #108]	; (23f5e04 <_ZN11SomLocationC1Ev+0x98>)
 23f5d96:	2601      	movs	r6, #1
 23f5d98:	23ff      	movs	r3, #255	; 0xff
 23f5d9a:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
 23f5d9e:	225a      	movs	r2, #90	; 0x5a
    os_queue_create(&_commandQueue, sizeof(LocationCommandContext), 1, nullptr);
 23f5da0:	2120      	movs	r1, #32
 23f5da2:	f8a4 3292 	strh.w	r3, [r4, #658]	; 0x292
 23f5da6:	f8c4 229c 	str.w	r2, [r4, #668]	; 0x29c
SomLocation::SomLocation() {
 23f5daa:	f8a4 32a0 	strh.w	r3, [r4, #672]	; 0x2a0
    os_queue_create(&_commandQueue, sizeof(LocationCommandContext), 1, nullptr);
 23f5dae:	4632      	mov	r2, r6
 23f5db0:	462b      	mov	r3, r5
SomLocation::SomLocation() {
 23f5db2:	f8c4 52a4 	str.w	r5, [r4, #676]	; 0x2a4
    os_queue_create(&_commandQueue, sizeof(LocationCommandContext), 1, nullptr);
 23f5db6:	4620      	mov	r0, r4
 23f5db8:	f884 6290 	strb.w	r6, [r4, #656]	; 0x290
SomLocation::SomLocation() {
 23f5dbc:	f8c4 66a8 	str.w	r6, [r4, #1704]	; 0x6a8
    os_queue_create(&_commandQueue, sizeof(LocationCommandContext), 1, nullptr);
 23f5dc0:	f000 faea 	bl	23f6398 <os_queue_create>
    os_queue_create(&_responseQueue, sizeof(LocationResults), 1, nullptr);
 23f5dc4:	2104      	movs	r1, #4
 23f5dc6:	462b      	mov	r3, r5
 23f5dc8:	4632      	mov	r2, r6
 23f5dca:	1860      	adds	r0, r4, r1
 23f5dcc:	f000 fae4 	bl	23f6398 <os_queue_create>
	    _M_invoker = &_My_handler::_M_invoke;
 23f5dd0:	4b0d      	ldr	r3, [pc, #52]	; (23f5e08 <_ZN11SomLocationC1Ev+0x9c>)
    _thread = new Thread("gnss_cellular", [this]() {SomLocation::threadLoop();}, OS_THREAD_PRIORITY_DEFAULT);
 23f5dd2:	2004      	movs	r0, #4
 23f5dd4:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 23f5dd6:	4b0d      	ldr	r3, [pc, #52]	; (23f5e0c <_ZN11SomLocationC1Ev+0xa0>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23f5dd8:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
 23f5dda:	9304      	str	r3, [sp, #16]
 23f5ddc:	f7ed fa8d 	bl	23e32fa <_Znwj>
 23f5de0:	4605      	mov	r5, r0
 23f5de2:	b138      	cbz	r0, 23f5df4 <_ZN11SomLocationC1Ev+0x88>
 23f5de4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 23f5de8:	4909      	ldr	r1, [pc, #36]	; (23f5e10 <_ZN11SomLocationC1Ev+0xa4>)
 23f5dea:	9300      	str	r3, [sp, #0]
 23f5dec:	aa02      	add	r2, sp, #8
 23f5dee:	2302      	movs	r3, #2
 23f5df0:	f7ff ff5a 	bl	23f5ca8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
 23f5df4:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
 23f5df6:	a802      	add	r0, sp, #8
 23f5df8:	f7fe ff22 	bl	23f4c40 <_ZNSt14_Function_baseD1Ev>
}
 23f5dfc:	4620      	mov	r0, r4
 23f5dfe:	b006      	add	sp, #24
 23f5e00:	bd70      	pop	{r4, r5, r6, pc}
 23f5e02:	bf00      	nop
 23f5e04:	42480000 	.word	0x42480000
 23f5e08:	023f6305 	.word	0x023f6305
 23f5e0c:	023f56a1 	.word	0x023f56a1
 23f5e10:	023ff69d 	.word	0x023ff69d

023f5e14 <_GLOBAL__sub_I_locationLog>:
        val_(val) {
 23f5e14:	2200      	movs	r2, #0
 23f5e16:	4b03      	ldr	r3, [pc, #12]	; (23f5e24 <_GLOBAL__sub_I_locationLog+0x10>)
 23f5e18:	701a      	strb	r2, [r3, #0]
 23f5e1a:	4b03      	ldr	r3, [pc, #12]	; (23f5e28 <_GLOBAL__sub_I_locationLog+0x14>)
 23f5e1c:	4a03      	ldr	r2, [pc, #12]	; (23f5e2c <_GLOBAL__sub_I_locationLog+0x18>)
 23f5e1e:	601a      	str	r2, [r3, #0]
}
 23f5e20:	4770      	bx	lr
 23f5e22:	bf00      	nop
 23f5e24:	1007aea4 	.word	0x1007aea4
 23f5e28:	1007aeac 	.word	0x1007aeac
 23f5e2c:	023ff66c 	.word	0x023ff66c

023f5e30 <_ZN11SomLocation15detectModemTypeEv>:
bool SomLocation::detectModemType() {
 23f5e30:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (modemNotDetected() && isModemOn()) {
 23f5e32:	f8d0 62a4 	ldr.w	r6, [r0, #676]	; 0x2a4
bool SomLocation::detectModemType() {
 23f5e36:	4605      	mov	r5, r0
 23f5e38:	b093      	sub	sp, #76	; 0x4c
    if (modemNotDetected() && isModemOn()) {
 23f5e3a:	bb9e      	cbnz	r6, 23f5ea4 <_ZN11SomLocation15detectModemTypeEv+0x74>
    bool detectModemType();
    void setAntennaPower();
    void clearAntennaPower();

    bool isModemOn() const {
        return Cellular.isOn();
 23f5e3c:	481d      	ldr	r0, [pc, #116]	; (23f5eb4 <_ZN11SomLocation15detectModemTypeEv+0x84>)
 23f5e3e:	f002 fadb 	bl	23f83f8 <_ZN5spark12NetworkClass4isOnEv>
 23f5e42:	4604      	mov	r4, r0
 23f5e44:	b370      	cbz	r0, 23f5ea4 <_ZN11SomLocation15detectModemTypeEv+0x74>
    int dev;
    char radiofw[25];

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 23f5e46:	2748      	movs	r7, #72	; 0x48
 23f5e48:	4631      	mov	r1, r6
 23f5e4a:	463a      	mov	r2, r7
 23f5e4c:	4668      	mov	r0, sp
 23f5e4e:	f006 faca 	bl	23fc3e6 <memset>
        cellular_device_info(&celldev, nullptr);
 23f5e52:	4631      	mov	r1, r6
 23f5e54:	4668      	mov	r0, sp
        size = sizeof(*this);
 23f5e56:	f8ad 7000 	strh.w	r7, [sp]
 23f5e5a:	f000 fa57 	bl	23f630c <cellular_device_info>
        locationLog.trace("Modem ID is %d", celldev.dev);
 23f5e5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23f5e60:	4915      	ldr	r1, [pc, #84]	; (23f5eb8 <_ZN11SomLocation15detectModemTypeEv+0x88>)
 23f5e62:	4816      	ldr	r0, [pc, #88]	; (23f5ebc <_ZN11SomLocation15detectModemTypeEv+0x8c>)
 23f5e64:	f7fe ff2f 	bl	23f4cc6 <_ZNK5spark6Logger5traceEPKcz>
        switch (celldev.dev) {
 23f5e68:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 23f5e6a:	b15f      	cbz	r7, 23f5e84 <_ZN11SomLocation15detectModemTypeEv+0x54>
 23f5e6c:	2f13      	cmp	r7, #19
 23f5e6e:	d011      	beq.n	23f5e94 <_ZN11SomLocation15detectModemTypeEv+0x64>
            _modemType = _ModemType::Unsupported;
 23f5e70:	2301      	movs	r3, #1
            locationLog.trace("Modem type %d not supported", celldev.dev);
 23f5e72:	463a      	mov	r2, r7
 23f5e74:	4912      	ldr	r1, [pc, #72]	; (23f5ec0 <_ZN11SomLocation15detectModemTypeEv+0x90>)
 23f5e76:	4811      	ldr	r0, [pc, #68]	; (23f5ebc <_ZN11SomLocation15detectModemTypeEv+0x8c>)
            _modemType = _ModemType::Unsupported;
 23f5e78:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
            locationLog.trace("Modem type %d not supported", celldev.dev);
 23f5e7c:	f7fe ff23 	bl	23f4cc6 <_ZNK5spark6Logger5traceEPKcz>
    bool detected = false;
 23f5e80:	4634      	mov	r4, r6
            break;
 23f5e82:	e004      	b.n	23f5e8e <_ZN11SomLocation15detectModemTypeEv+0x5e>
            locationLog.trace("Modem not cached yet");
 23f5e84:	490f      	ldr	r1, [pc, #60]	; (23f5ec4 <_ZN11SomLocation15detectModemTypeEv+0x94>)
 23f5e86:	480d      	ldr	r0, [pc, #52]	; (23f5ebc <_ZN11SomLocation15detectModemTypeEv+0x8c>)
 23f5e88:	f7fe ff1d 	bl	23f4cc6 <_ZNK5spark6Logger5traceEPKcz>
    bool detected = false;
 23f5e8c:	463c      	mov	r4, r7
}
 23f5e8e:	4620      	mov	r0, r4
 23f5e90:	b013      	add	sp, #76	; 0x4c
 23f5e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _modemType = _ModemType::BG95_M5;
 23f5e94:	2302      	movs	r3, #2
            locationLog.trace("BG95-M5 detected");
 23f5e96:	490c      	ldr	r1, [pc, #48]	; (23f5ec8 <_ZN11SomLocation15detectModemTypeEv+0x98>)
 23f5e98:	4808      	ldr	r0, [pc, #32]	; (23f5ebc <_ZN11SomLocation15detectModemTypeEv+0x8c>)
            _modemType = _ModemType::BG95_M5;
 23f5e9a:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
            locationLog.trace("BG95-M5 detected");
 23f5e9e:	f7fe ff12 	bl	23f4cc6 <_ZNK5spark6Logger5traceEPKcz>
            break;
 23f5ea2:	e7f4      	b.n	23f5e8e <_ZN11SomLocation15detectModemTypeEv+0x5e>
    else if (!modemNotDetected() && (_ModemType::Unsupported != _modemType)) {
 23f5ea4:	f8d5 42a4 	ldr.w	r4, [r5, #676]	; 0x2a4
 23f5ea8:	2c01      	cmp	r4, #1
 23f5eaa:	bf94      	ite	ls
 23f5eac:	2400      	movls	r4, #0
 23f5eae:	2401      	movhi	r4, #1
 23f5eb0:	e7ed      	b.n	23f5e8e <_ZN11SomLocation15detectModemTypeEv+0x5e>
 23f5eb2:	bf00      	nop
 23f5eb4:	1007aeb4 	.word	0x1007aeb4
 23f5eb8:	023ff6ab 	.word	0x023ff6ab
 23f5ebc:	1007aeac 	.word	0x1007aeac
 23f5ec0:	023ff6e0 	.word	0x023ff6e0
 23f5ec4:	023ff6ba 	.word	0x023ff6ba
 23f5ec8:	023ff6cf 	.word	0x023ff6cf

023f5ecc <_ZN11SomLocation5beginER21LocationConfiguration>:
int SomLocation::begin(LocationConfiguration& configuration) {
 23f5ecc:	b538      	push	{r3, r4, r5, lr}
 23f5ece:	4604      	mov	r4, r0
 23f5ed0:	460d      	mov	r5, r1
    locationLog.info("Beginning location library");
 23f5ed2:	481e      	ldr	r0, [pc, #120]	; (23f5f4c <_ZN11SomLocation5beginER21LocationConfiguration+0x80>)
 23f5ed4:	491e      	ldr	r1, [pc, #120]	; (23f5f50 <_ZN11SomLocation5beginER21LocationConfiguration+0x84>)
 23f5ed6:	f7fe feda 	bl	23f4c8e <_ZNK5spark6Logger4infoEPKcz>
    _conf = configuration;
 23f5eda:	f504 7324 	add.w	r3, r4, #656	; 0x290
    unsigned int maximumFixTime() const {
        return _maxFixSeconds;
    }

    LocationConfiguration& operator=(const LocationConfiguration& rhs) {
        if (this == &rhs) {
 23f5ede:	429d      	cmp	r5, r3
 23f5ee0:	d00b      	beq.n	23f5efa <_ZN11SomLocation5beginER21LocationConfiguration+0x2e>
            return *this;
        }
        this->_constellations = rhs._constellations;
 23f5ee2:	782b      	ldrb	r3, [r5, #0]
 23f5ee4:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
        this->_antennaPin = rhs._antennaPin;
 23f5ee8:	886b      	ldrh	r3, [r5, #2]
 23f5eea:	f8a4 3292 	strh.w	r3, [r4, #658]	; 0x292
        this->_hdop = rhs._hdop;
 23f5eee:	686b      	ldr	r3, [r5, #4]
 23f5ef0:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
        this->_maxFixSeconds = rhs._maxFixSeconds;
 23f5ef4:	68eb      	ldr	r3, [r5, #12]
 23f5ef6:	f8c4 329c 	str.w	r3, [r4, #668]	; 0x29c
        return _antennaPin;
 23f5efa:	f8b4 3292 	ldrh.w	r3, [r4, #658]	; 0x292
    if (PIN_INVALID != _antennaPowerPin) {
 23f5efe:	2bff      	cmp	r3, #255	; 0xff
    _antennaPowerPin = _conf.enableAntennaPower();
 23f5f00:	f8a4 32a0 	strh.w	r3, [r4, #672]	; 0x2a0
    if (PIN_INVALID != _antennaPowerPin) {
 23f5f04:	d008      	beq.n	23f5f18 <_ZN11SomLocation5beginER21LocationConfiguration+0x4c>
        locationLog.info("Configuring antenna pin");
 23f5f06:	4913      	ldr	r1, [pc, #76]	; (23f5f54 <_ZN11SomLocation5beginER21LocationConfiguration+0x88>)
 23f5f08:	4810      	ldr	r0, [pc, #64]	; (23f5f4c <_ZN11SomLocation5beginER21LocationConfiguration+0x80>)
 23f5f0a:	f7fe fec0 	bl	23f4c8e <_ZNK5spark6Logger4infoEPKcz>
        pinMode(_antennaPowerPin, OUTPUT);
 23f5f0e:	2101      	movs	r1, #1
 23f5f10:	f8b4 02a0 	ldrh.w	r0, [r4, #672]	; 0x2a0
 23f5f14:	f003 fc02 	bl	23f971c <pinMode>
 23f5f18:	480f      	ldr	r0, [pc, #60]	; (23f5f58 <_ZN11SomLocation5beginER21LocationConfiguration+0x8c>)
 23f5f1a:	f002 fa6d 	bl	23f83f8 <_ZN5spark12NetworkClass4isOnEv>
    if (isModemOn() && modemNotDetected()) {
 23f5f1e:	b190      	cbz	r0, 23f5f46 <_ZN11SomLocation5beginER21LocationConfiguration+0x7a>
 23f5f20:	f8d4 32a4 	ldr.w	r3, [r4, #676]	; 0x2a4
 23f5f24:	b97b      	cbnz	r3, 23f5f46 <_ZN11SomLocation5beginER21LocationConfiguration+0x7a>
        locationLog.info("Detecting modem type");
 23f5f26:	490d      	ldr	r1, [pc, #52]	; (23f5f5c <_ZN11SomLocation5beginER21LocationConfiguration+0x90>)
 23f5f28:	4808      	ldr	r0, [pc, #32]	; (23f5f4c <_ZN11SomLocation5beginER21LocationConfiguration+0x80>)
 23f5f2a:	f7fe feb0 	bl	23f4c8e <_ZNK5spark6Logger4infoEPKcz>
        detectModemType();
 23f5f2e:	4620      	mov	r0, r4
 23f5f30:	f7ff ff7e 	bl	23f5e30 <_ZN11SomLocation15detectModemTypeEv>
        if (_ModemType::BG95_M5 == _modemType) {
 23f5f34:	f8d4 32a4 	ldr.w	r3, [r4, #676]	; 0x2a4
 23f5f38:	2b02      	cmp	r3, #2
 23f5f3a:	d104      	bne.n	23f5f46 <_ZN11SomLocation5beginER21LocationConfiguration+0x7a>
            setConstellationBg95(_conf.constellations());
 23f5f3c:	4620      	mov	r0, r4
 23f5f3e:	f894 1290 	ldrb.w	r1, [r4, #656]	; 0x290
 23f5f42:	f7ff fbf3 	bl	23f572c <_ZN11SomLocation20setConstellationBg95E21LocationConstellation>
}
 23f5f46:	2000      	movs	r0, #0
 23f5f48:	bd38      	pop	{r3, r4, r5, pc}
 23f5f4a:	bf00      	nop
 23f5f4c:	1007aeac 	.word	0x1007aeac
 23f5f50:	023ff6fc 	.word	0x023ff6fc
 23f5f54:	023ff717 	.word	0x023ff717
 23f5f58:	1007aeb4 	.word	0x1007aeb4
 23f5f5c:	023ff72f 	.word	0x023ff72f

023f5f60 <_ZN11SomLocation11getLocationER13LocationPointb>:
LocationResults SomLocation::getLocation(LocationPoint& point, bool publish) {
 23f5f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f5f62:	4604      	mov	r4, r0
 23f5f64:	b08d      	sub	sp, #52	; 0x34
 23f5f66:	4838      	ldr	r0, [pc, #224]	; (23f6048 <_ZN11SomLocation11getLocationER13LocationPointb+0xe8>)
 23f5f68:	460f      	mov	r7, r1
 23f5f6a:	4616      	mov	r6, r2
 23f5f6c:	f002 fa44 	bl	23f83f8 <_ZN5spark12NetworkClass4isOnEv>
    if (!isModemOn()) {
 23f5f70:	4605      	mov	r5, r0
 23f5f72:	b930      	cbnz	r0, 23f5f82 <_ZN11SomLocation11getLocationER13LocationPointb+0x22>
        locationLog.trace("Modem is not on");
 23f5f74:	4935      	ldr	r1, [pc, #212]	; (23f604c <_ZN11SomLocation11getLocationER13LocationPointb+0xec>)
 23f5f76:	4836      	ldr	r0, [pc, #216]	; (23f6050 <_ZN11SomLocation11getLocationER13LocationPointb+0xf0>)
 23f5f78:	f7fe fea5 	bl	23f4cc6 <_ZNK5spark6Logger5traceEPKcz>
}
 23f5f7c:	4628      	mov	r0, r5
 23f5f7e:	b00d      	add	sp, #52	; 0x34
 23f5f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (modemNotDetected()) {
 23f5f82:	f8d4 32a4 	ldr.w	r3, [r4, #676]	; 0x2a4
 23f5f86:	b94b      	cbnz	r3, 23f5f9c <_ZN11SomLocation11getLocationER13LocationPointb+0x3c>
        auto detected = detectModemType();
 23f5f88:	4620      	mov	r0, r4
 23f5f8a:	f7ff ff51 	bl	23f5e30 <_ZN11SomLocation15detectModemTypeEv>
        if (!detected) {
 23f5f8e:	b928      	cbnz	r0, 23f5f9c <_ZN11SomLocation11getLocationER13LocationPointb+0x3c>
            locationLog.trace("Modem is not supported");
 23f5f90:	4930      	ldr	r1, [pc, #192]	; (23f6054 <_ZN11SomLocation11getLocationER13LocationPointb+0xf4>)
 23f5f92:	482f      	ldr	r0, [pc, #188]	; (23f6050 <_ZN11SomLocation11getLocationER13LocationPointb+0xf0>)
 23f5f94:	f7fe fe97 	bl	23f4cc6 <_ZNK5spark6Logger5traceEPKcz>
            return LocationResults::Unsupported;
 23f5f98:	2501      	movs	r5, #1
 23f5f9a:	e7ef      	b.n	23f5f7c <_ZN11SomLocation11getLocationER13LocationPointb+0x1c>
	return __atomic_load_n(&_M_i, int(__m));
 23f5f9c:	f104 030c 	add.w	r3, r4, #12
 23f5fa0:	e8d3 5f8f 	ldab	r5, [r3]
 23f5fa4:	b2ed      	uxtb	r5, r5
    if (_acquiring.load()) {
 23f5fa6:	b12d      	cbz	r5, 23f5fb4 <_ZN11SomLocation11getLocationER13LocationPointb+0x54>
        locationLog.trace("Aquisition is already underway");
 23f5fa8:	492b      	ldr	r1, [pc, #172]	; (23f6058 <_ZN11SomLocation11getLocationER13LocationPointb+0xf8>)
 23f5faa:	4829      	ldr	r0, [pc, #164]	; (23f6050 <_ZN11SomLocation11getLocationER13LocationPointb+0xf0>)
 23f5fac:	f7fe fe8b 	bl	23f4cc6 <_ZNK5spark6Logger5traceEPKcz>
        return LocationResults::Pending;
 23f5fb0:	2504      	movs	r5, #4
 23f5fb2:	e7e3      	b.n	23f5f7c <_ZN11SomLocation11getLocationER13LocationPointb+0x1c>
    locationLog.trace("Starting synchronous aquisition");
 23f5fb4:	4929      	ldr	r1, [pc, #164]	; (23f605c <_ZN11SomLocation11getLocationER13LocationPointb+0xfc>)
 23f5fb6:	4826      	ldr	r0, [pc, #152]	; (23f6050 <_ZN11SomLocation11getLocationER13LocationPointb+0xf0>)
 23f5fb8:	f7fe fe85 	bl	23f4cc6 <_ZNK5spark6Logger5traceEPKcz>
    LocationCommandContext event {};
 23f5fbc:	4629      	mov	r1, r5
 23f5fbe:	2218      	movs	r2, #24
 23f5fc0:	a805      	add	r0, sp, #20
 23f5fc2:	f006 fa10 	bl	23fc3e6 <memset>
    event.command = LocationCommand::Acquire;
 23f5fc6:	2301      	movs	r3, #1
    os_queue_put(_commandQueue, &event, 0, nullptr);
 23f5fc8:	462a      	mov	r2, r5
    event.command = LocationCommand::Acquire;
 23f5fca:	9304      	str	r3, [sp, #16]
    event.sendResponse = true;
 23f5fcc:	f88d 3014 	strb.w	r3, [sp, #20]
    os_queue_put(_commandQueue, &event, 0, nullptr);
 23f5fd0:	a904      	add	r1, sp, #16
 23f5fd2:	462b      	mov	r3, r5
 23f5fd4:	6820      	ldr	r0, [r4, #0]
    _Function_base() : _M_manager(nullptr) { }
 23f5fd6:	9508      	str	r5, [sp, #32]
    event.point = &point;
 23f5fd8:	970b      	str	r7, [sp, #44]	; 0x2c
    os_queue_put(_commandQueue, &event, 0, nullptr);
 23f5fda:	f000 f9eb 	bl	23f63b4 <os_queue_put>
    auto result = waitOnResponseEvent((system_tick_t)_conf.maximumFixTime() * 1000 + LOCATION_PERIOD_ACQUIRE_MS);
 23f5fde:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 23f5fe2:	f8d4 329c 	ldr.w	r3, [r4, #668]	; 0x29c
 23f5fe6:	4620      	mov	r0, r4
 23f5fe8:	fb03 1101 	mla	r1, r3, r1, r1
 23f5fec:	f7ff fbda 	bl	23f57a4 <_ZN11SomLocation19waitOnResponseEventEm>
 23f5ff0:	4605      	mov	r5, r0
    if (publish && (LocationResults::Fixed == result) && isConnected()) {
 23f5ff2:	b32e      	cbz	r6, 23f6040 <_ZN11SomLocation11getLocationER13LocationPointb+0xe0>
 23f5ff4:	2805      	cmp	r0, #5
 23f5ff6:	d123      	bne.n	23f6040 <_ZN11SomLocation11getLocationER13LocationPointb+0xe0>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23f5ff8:	f000 ff46 	bl	23f6e88 <spark_cloud_flag_connected>
 23f5ffc:	b300      	cbz	r0, 23f6040 <_ZN11SomLocation11getLocationER13LocationPointb+0xe0>
        locationLog.info("Publishing loc event");
 23f5ffe:	4918      	ldr	r1, [pc, #96]	; (23f6060 <_ZN11SomLocation11getLocationER13LocationPointb+0x100>)
 23f6000:	4813      	ldr	r0, [pc, #76]	; (23f6050 <_ZN11SomLocation11getLocationER13LocationPointb+0xf0>)
 23f6002:	f7fe fe44 	bl	23f4c8e <_ZNK5spark6Logger4infoEPKcz>
        buildPublish(_publishBuffer, sizeof(_publishBuffer), point, _reqid);
 23f6006:	f8d4 36a8 	ldr.w	r3, [r4, #1704]	; 0x6a8
 23f600a:	f504 762a 	add.w	r6, r4, #680	; 0x2a8
 23f600e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 23f6012:	4631      	mov	r1, r6
 23f6014:	9300      	str	r3, [sp, #0]
 23f6016:	4620      	mov	r0, r4
 23f6018:	463b      	mov	r3, r7
 23f601a:	f7ff fcfd 	bl	23f5a18 <_ZN11SomLocation12buildPublishEPcjR13LocationPointj>
        auto published = Particle.publish("loc", _publishBuffer);
 23f601e:	a802      	add	r0, sp, #8
 23f6020:	4632      	mov	r2, r6
 23f6022:	4910      	ldr	r1, [pc, #64]	; (23f6064 <_ZN11SomLocation11getLocationER13LocationPointb+0x104>)
 23f6024:	f7ff fb4e 	bl	23f56c4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
    ResultT result(ResultT defaultValue) const {
        return this->p_->result(std::move(defaultValue));
    }

    operator ResultT() const {
        return result();
 23f6028:	a802      	add	r0, sp, #8
 23f602a:	f7ff fe07 	bl	23f5c3c <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>
        if (published) {
 23f602e:	b120      	cbz	r0, 23f603a <_ZN11SomLocation11getLocationER13LocationPointb+0xda>
            _reqid++;
 23f6030:	f8d4 36a8 	ldr.w	r3, [r4, #1704]	; 0x6a8
 23f6034:	3301      	adds	r3, #1
 23f6036:	f8c4 36a8 	str.w	r3, [r4, #1704]	; 0x6a8
      ~__shared_ptr() = default;
 23f603a:	a803      	add	r0, sp, #12
 23f603c:	f7ff fde8 	bl	23f5c10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    class function<_Res(_ArgTypes...)>
 23f6040:	a806      	add	r0, sp, #24
 23f6042:	f7fe fdfd 	bl	23f4c40 <_ZNSt14_Function_baseD1Ev>
struct LocationCommandContext {
 23f6046:	e799      	b.n	23f5f7c <_ZN11SomLocation11getLocationER13LocationPointb+0x1c>
 23f6048:	1007aeb4 	.word	0x1007aeb4
 23f604c:	023ff744 	.word	0x023ff744
 23f6050:	1007aeac 	.word	0x1007aeac
 23f6054:	023ff754 	.word	0x023ff754
 23f6058:	023ff76b 	.word	0x023ff76b
 23f605c:	023ff78a 	.word	0x023ff78a
 23f6060:	023ff7aa 	.word	0x023ff7aa
 23f6064:	023ff66c 	.word	0x023ff66c

023f6068 <_ZN11SomLocation10threadLoopEv>:
{
 23f6068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f606c:	4604      	mov	r4, r0
                locationLog.trace("Started aquisition");
 23f606e:	f8df a290 	ldr.w	sl, [pc, #656]	; 23f6300 <_ZN11SomLocation10threadLoopEv+0x298>
{
 23f6072:	b093      	sub	sp, #76	; 0x4c
        auto event = waitOnCommandEvent(LOCATION_PERIOD_SUCCESS_MS);
 23f6074:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23f6078:	4621      	mov	r1, r4
 23f607a:	a80a      	add	r0, sp, #40	; 0x28
 23f607c:	f7ff fb7e 	bl	23f577c <_ZN11SomLocation18waitOnCommandEventEm>
        switch (event.command) {
 23f6080:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 23f6082:	2d01      	cmp	r5, #1
 23f6084:	d012      	beq.n	23f60ac <_ZN11SomLocation10threadLoopEv+0x44>
 23f6086:	3d02      	subs	r5, #2
 23f6088:	bf18      	it	ne
 23f608a:	2501      	movne	r5, #1
 23f608c:	a80c      	add	r0, sp, #48	; 0x30
 23f608e:	f7fe fdd7 	bl	23f4c40 <_ZNSt14_Function_baseD1Ev>
    while (loop) {
 23f6092:	2d00      	cmp	r5, #0
 23f6094:	d1ee      	bne.n	23f6074 <_ZN11SomLocation10threadLoopEv+0xc>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 23f6096:	68a3      	ldr	r3, [r4, #8]
 23f6098:	681b      	ldr	r3, [r3, #0]
        return isValid() && os_thread_exit(d_->handle)==0;
 23f609a:	2b00      	cmp	r3, #0
 23f609c:	f000 8110 	beq.w	23f62c0 <_ZN11SomLocation10threadLoopEv+0x258>
 23f60a0:	6858      	ldr	r0, [r3, #4]
}
 23f60a2:	b013      	add	sp, #76	; 0x4c
 23f60a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f60a8:	f000 b9a0 	b.w	23f63ec <os_thread_exit>
	__atomic_store_n(&_M_i, __i, int(__m));
 23f60ac:	2201      	movs	r2, #1
 23f60ae:	f104 030c 	add.w	r3, r4, #12
 23f60b2:	e8c3 2f8f 	stlb	r2, [r3]
                setAntennaPower();
 23f60b6:	4620      	mov	r0, r4
 23f60b8:	f7ff fb22 	bl	23f5700 <_ZN11SomLocation15setAntennaPowerEv>
                locationLog.trace("Started aquisition");
 23f60bc:	4650      	mov	r0, sl
 23f60be:	4982      	ldr	r1, [pc, #520]	; (23f62c8 <_ZN11SomLocation10threadLoopEv+0x260>)
 23f60c0:	f7fe fe01 	bl	23f4cc6 <_ZNK5spark6Logger5traceEPKcz>
                Cellular.command(R"(AT+QGPS=1)");
 23f60c4:	4881      	ldr	r0, [pc, #516]	; (23f62cc <_ZN11SomLocation10threadLoopEv+0x264>)
 23f60c6:	f7ff faf5 	bl	23f56b4 <_ZN5spark13CellularClass7commandIJEEEiPKcDpT_.isra.0>
                if (_ModemType::BG95_M5 == _modemType) {
 23f60ca:	f8d4 32a4 	ldr.w	r3, [r4, #676]	; 0x2a4
 23f60ce:	2b02      	cmp	r3, #2
 23f60d0:	d107      	bne.n	23f60e2 <_ZN11SomLocation10threadLoopEv+0x7a>
                    Cellular.command(R"(AT+QGPSCFG="nmea_epe",1)");
 23f60d2:	487f      	ldr	r0, [pc, #508]	; (23f62d0 <_ZN11SomLocation10threadLoopEv+0x268>)
 23f60d4:	f7ff faee 	bl	23f56b4 <_ZN5spark13CellularClass7commandIJEEEiPKcDpT_.isra.0>
                    setConstellationBg95(_conf.constellations());
 23f60d8:	4620      	mov	r0, r4
 23f60da:	f894 1290 	ldrb.w	r1, [r4, #656]	; 0x290
 23f60de:	f7ff fb25 	bl	23f572c <_ZN11SomLocation20setConstellationBg95E21LocationConstellation>
                auto maxTime = (uint64_t)_conf.maximumFixTime() * 1000;
 23f60e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f60e6:	f8d4 229c 	ldr.w	r2, [r4, #668]	; 0x29c
        return hal_timer_millis(nullptr);
 23f60ea:	2000      	movs	r0, #0
 23f60ec:	fba2 2303 	umull	r2, r3, r2, r3
 23f60f0:	9304      	str	r3, [sp, #16]
                LocationResults response {LocationResults::TimedOut};
 23f60f2:	2306      	movs	r3, #6
                int fixCount = {};
 23f60f4:	f04f 0900 	mov.w	r9, #0
                auto maxTime = (uint64_t)_conf.maximumFixTime() * 1000;
 23f60f8:	9203      	str	r2, [sp, #12]
                LocationResults response {LocationResults::TimedOut};
 23f60fa:	9307      	str	r3, [sp, #28]
 23f60fc:	f000 fa2c 	bl	23f6558 <hal_timer_millis>
                uint64_t firstFix = {};
 23f6100:	464d      	mov	r5, r9
 23f6102:	4607      	mov	r7, r0
 23f6104:	464e      	mov	r6, r9
 23f6106:	9102      	str	r1, [sp, #8]
        return Cellular.isOn();
 23f6108:	4872      	ldr	r0, [pc, #456]	; (23f62d4 <_ZN11SomLocation10threadLoopEv+0x26c>)
 23f610a:	f002 f975 	bl	23f83f8 <_ZN5spark12NetworkClass4isOnEv>
                while ((power = isModemOn())) {
 23f610e:	4680      	mov	r8, r0
 23f6110:	2800      	cmp	r0, #0
 23f6112:	d060      	beq.n	23f61d6 <_ZN11SomLocation10threadLoopEv+0x16e>
 23f6114:	2000      	movs	r0, #0
 23f6116:	f000 fa1f 	bl	23f6558 <hal_timer_millis>
                    if ((now - start) >= maxTime)
 23f611a:	9b02      	ldr	r3, [sp, #8]
 23f611c:	1bc0      	subs	r0, r0, r7
 23f611e:	eb61 0103 	sbc.w	r1, r1, r3
 23f6122:	9b03      	ldr	r3, [sp, #12]
 23f6124:	4298      	cmp	r0, r3
 23f6126:	9b04      	ldr	r3, [sp, #16]
 23f6128:	eb71 0303 	sbcs.w	r3, r1, r3
 23f612c:	d253      	bcs.n	23f61d6 <_ZN11SomLocation10threadLoopEv+0x16e>
                    Cellular.command(glocCallback, _locBuffer, 1000, R"(AT+QGPSLOC=2)");
 23f612e:	f104 010d 	add.w	r1, r4, #13
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 23f6132:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23f6136:	4b68      	ldr	r3, [pc, #416]	; (23f62d8 <_ZN11SomLocation10threadLoopEv+0x270>)
 23f6138:	4868      	ldr	r0, [pc, #416]	; (23f62dc <_ZN11SomLocation10threadLoopEv+0x274>)
 23f613a:	9105      	str	r1, [sp, #20]
 23f613c:	f000 f902 	bl	23f6344 <cellular_command>
                    auto ret = parseQlocResponse(_locBuffer, _qlocContext, *event.point);
 23f6140:	4620      	mov	r0, r4
 23f6142:	9b11      	ldr	r3, [sp, #68]	; 0x44
 23f6144:	9905      	ldr	r1, [sp, #20]
 23f6146:	f504 7204 	add.w	r2, r4, #528	; 0x210
 23f614a:	f7ff fc2f 	bl	23f59ac <_ZN11SomLocation17parseQlocResponseEPKcRNS_11QlocContextER13LocationPoint>
                    if (CME_Error::FIX == ret) {
 23f614e:	2801      	cmp	r0, #1
                    auto ret = parseQlocResponse(_locBuffer, _qlocContext, *event.point);
 23f6150:	4683      	mov	fp, r0
                    if (CME_Error::FIX == ret) {
 23f6152:	d10f      	bne.n	23f6174 <_ZN11SomLocation10threadLoopEv+0x10c>
                        if (0 == firstFix) {
 23f6154:	ea55 0306 	orrs.w	r3, r5, r6
                        fixCount++;
 23f6158:	f109 0901 	add.w	r9, r9, #1
                        if (0 == firstFix) {
 23f615c:	d10a      	bne.n	23f6174 <_ZN11SomLocation10threadLoopEv+0x10c>
 23f615e:	2000      	movs	r0, #0
 23f6160:	f000 f9fa 	bl	23f6558 <hal_timer_millis>
                            event.point->systemTime = Time.now();
 23f6164:	9b11      	ldr	r3, [sp, #68]	; 0x44
 23f6166:	4605      	mov	r5, r0
 23f6168:	9305      	str	r3, [sp, #20]
 23f616a:	460e      	mov	r6, r1
 23f616c:	f002 ff61 	bl	23f9032 <_ZN9TimeClass3nowEv>
 23f6170:	9b05      	ldr	r3, [sp, #20]
 23f6172:	6118      	str	r0, [r3, #16]
                    if (_ModemType::BG95_M5 == _modemType) {
 23f6174:	f8d4 32a4 	ldr.w	r3, [r4, #676]	; 0x2a4
 23f6178:	2b02      	cmp	r3, #2
 23f617a:	d10f      	bne.n	23f619c <_ZN11SomLocation10threadLoopEv+0x134>
                        Cellular.command(epeCallback, _epeBuffer, 1000, R"(AT+QGPSCFG="estimation_error")");
 23f617c:	f204 110d 	addw	r1, r4, #269	; 0x10d
 23f6180:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23f6184:	4b56      	ldr	r3, [pc, #344]	; (23f62e0 <_ZN11SomLocation10threadLoopEv+0x278>)
 23f6186:	4857      	ldr	r0, [pc, #348]	; (23f62e4 <_ZN11SomLocation10threadLoopEv+0x27c>)
 23f6188:	9105      	str	r1, [sp, #20]
 23f618a:	f000 f8db 	bl	23f6344 <cellular_command>
                        parseEpeResponse(_epeBuffer, _epeContext, *event.point);
 23f618e:	4620      	mov	r0, r4
 23f6190:	9b11      	ldr	r3, [sp, #68]	; 0x44
 23f6192:	9905      	ldr	r1, [sp, #20]
 23f6194:	f504 7220 	add.w	r2, r4, #640	; 0x280
 23f6198:	f7ff fc22 	bl	23f59e0 <_ZN11SomLocation16parseEpeResponseEPKcRNS_10EpeContextER13LocationPoint>
                        (event.point->horizontalDop <= _conf.hdopThreshold()) &&
 23f619c:	f1bb 0f01 	cmp.w	fp, #1
 23f61a0:	d14d      	bne.n	23f623e <_ZN11SomLocation10threadLoopEv+0x1d6>
                    if ((CME_Error::FIX == ret) && (LOCATION_REQUIRED_SETTLING_COUNT == fixCount) &&
 23f61a2:	f1b9 0f02 	cmp.w	r9, #2
 23f61a6:	d14a      	bne.n	23f623e <_ZN11SomLocation10threadLoopEv+0x1d6>
                        (event.point->horizontalDop <= _conf.hdopThreshold()) &&
 23f61a8:	edd4 7aa5 	vldr	s15, [r4, #660]	; 0x294
 23f61ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 23f61ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    if ((CME_Error::FIX == ret) && (LOCATION_REQUIRED_SETTLING_COUNT == fixCount) &&
 23f61b2:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 23f61b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 23f61ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f61be:	d83e      	bhi.n	23f623e <_ZN11SomLocation10threadLoopEv+0x1d6>
                        (event.point->horizontalDop <= _conf.hdopThreshold()) &&
 23f61c0:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 23f61c4:	edd4 7aa6 	vldr	s15, [r4, #664]	; 0x298
 23f61c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 23f61cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f61d0:	d835      	bhi.n	23f623e <_ZN11SomLocation10threadLoopEv+0x1d6>
                        response = LocationResults::Fixed;
 23f61d2:	2305      	movs	r3, #5
 23f61d4:	9307      	str	r3, [sp, #28]
                Cellular.command(R"(AT+QGPSEND)");
 23f61d6:	4844      	ldr	r0, [pc, #272]	; (23f62e8 <_ZN11SomLocation10threadLoopEv+0x280>)
 23f61d8:	f7ff fa6c 	bl	23f56b4 <_ZN5spark13CellularClass7commandIJEEEiPKcDpT_.isra.0>
                if (!power && (LocationResults::Fixed != response)) {
 23f61dc:	f1b8 0f00 	cmp.w	r8, #0
 23f61e0:	d104      	bne.n	23f61ec <_ZN11SomLocation10threadLoopEv+0x184>
 23f61e2:	9b07      	ldr	r3, [sp, #28]
 23f61e4:	2b05      	cmp	r3, #5
                    response = LocationResults::Unavailable;
 23f61e6:	bf18      	it	ne
 23f61e8:	f8cd 801c 	strne.w	r8, [sp, #28]
                if (firstFix)
 23f61ec:	ea55 0306 	orrs.w	r3, r5, r6
 23f61f0:	d00e      	beq.n	23f6210 <_ZN11SomLocation10threadLoopEv+0x1a8>
                    event.point->timeToFirstFix = (float)(firstFix - start) / 1000.0;
 23f61f2:	9b02      	ldr	r3, [sp, #8]
 23f61f4:	1be8      	subs	r0, r5, r7
 23f61f6:	eb66 0103 	sbc.w	r1, r6, r3
 23f61fa:	f7ec fe29 	bl	23e2e50 <__aeabi_ul2f>
 23f61fe:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 23f62ec <_ZN11SomLocation10threadLoopEv+0x284>
 23f6202:	ee07 0a90 	vmov	s15, r0
 23f6206:	eec7 7a87 	vdiv.f32	s15, s15, s14
 23f620a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 23f620c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
                if (event.sendResponse) {
 23f6210:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 23f6214:	b1c3      	cbz	r3, 23f6248 <_ZN11SomLocation10threadLoopEv+0x1e0>
                    locationLog.trace("Sending synchronous completion");
 23f6216:	4650      	mov	r0, sl
 23f6218:	4935      	ldr	r1, [pc, #212]	; (23f62f0 <_ZN11SomLocation10threadLoopEv+0x288>)
 23f621a:	f7fe fd54 	bl	23f4cc6 <_ZNK5spark6Logger5traceEPKcz>
                    os_queue_put(_responseQueue, &response, 0, nullptr);
 23f621e:	2300      	movs	r3, #0
 23f6220:	6860      	ldr	r0, [r4, #4]
 23f6222:	461a      	mov	r2, r3
 23f6224:	a907      	add	r1, sp, #28
 23f6226:	f000 f8c5 	bl	23f63b4 <os_queue_put>
 23f622a:	2200      	movs	r2, #0
 23f622c:	f104 030c 	add.w	r3, r4, #12
 23f6230:	e8c3 2f8f 	stlb	r2, [r3]
                SCOPE_GUARD({
 23f6234:	4620      	mov	r0, r4
 23f6236:	f7ff fa71 	bl	23f571c <_ZN11SomLocation17clearAntennaPowerEv>
 23f623a:	2501      	movs	r5, #1
 23f623c:	e726      	b.n	23f608c <_ZN11SomLocation10threadLoopEv+0x24>
                    delay(LOCATION_PERIOD_ACQUIRE_MS);
 23f623e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23f6242:	f001 f889 	bl	23f7358 <delay>
                while ((power = isModemOn())) {
 23f6246:	e75f      	b.n	23f6108 <_ZN11SomLocation10threadLoopEv+0xa0>
                else if (event.doneCallback) {
 23f6248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 23f624a:	2b00      	cmp	r3, #0
 23f624c:	d0ed      	beq.n	23f622a <_ZN11SomLocation10threadLoopEv+0x1c2>
                    if (event.publish && (LocationResults::Fixed == response) && isConnected()) {
 23f624e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 23f6252:	b333      	cbz	r3, 23f62a2 <_ZN11SomLocation10threadLoopEv+0x23a>
 23f6254:	9b07      	ldr	r3, [sp, #28]
 23f6256:	2b05      	cmp	r3, #5
 23f6258:	d123      	bne.n	23f62a2 <_ZN11SomLocation10threadLoopEv+0x23a>
 23f625a:	f000 fe15 	bl	23f6e88 <spark_cloud_flag_connected>
 23f625e:	b300      	cbz	r0, 23f62a2 <_ZN11SomLocation10threadLoopEv+0x23a>
                        locationLog.info("Publishing loc event");
 23f6260:	4650      	mov	r0, sl
 23f6262:	4924      	ldr	r1, [pc, #144]	; (23f62f4 <_ZN11SomLocation10threadLoopEv+0x28c>)
 23f6264:	f7fe fd13 	bl	23f4c8e <_ZNK5spark6Logger4infoEPKcz>
                        buildPublish(_publishBuffer, sizeof(_publishBuffer), *event.point, _reqid);
 23f6268:	f8d4 36a8 	ldr.w	r3, [r4, #1704]	; 0x6a8
 23f626c:	f504 752a 	add.w	r5, r4, #680	; 0x2a8
 23f6270:	f44f 6280 	mov.w	r2, #1024	; 0x400
 23f6274:	4629      	mov	r1, r5
 23f6276:	9300      	str	r3, [sp, #0]
 23f6278:	4620      	mov	r0, r4
 23f627a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 23f627c:	f7ff fbcc 	bl	23f5a18 <_ZN11SomLocation12buildPublishEPcjR13LocationPointj>
                        auto published = Particle.publish("loc", _publishBuffer);
 23f6280:	a808      	add	r0, sp, #32
 23f6282:	462a      	mov	r2, r5
 23f6284:	491c      	ldr	r1, [pc, #112]	; (23f62f8 <_ZN11SomLocation10threadLoopEv+0x290>)
 23f6286:	f7ff fa1d 	bl	23f56c4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 23f628a:	a808      	add	r0, sp, #32
 23f628c:	f7ff fcd6 	bl	23f5c3c <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>
                        if (published) {
 23f6290:	b120      	cbz	r0, 23f629c <_ZN11SomLocation10threadLoopEv+0x234>
                            _reqid++;
 23f6292:	f8d4 36a8 	ldr.w	r3, [r4, #1704]	; 0x6a8
 23f6296:	3301      	adds	r3, #1
 23f6298:	f8c4 36a8 	str.w	r3, [r4, #1704]	; 0x6a8
 23f629c:	a809      	add	r0, sp, #36	; 0x24
 23f629e:	f7ff fcb7 	bl	23f5c10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                    locationLog.trace("Sending asynchronous completion");
 23f62a2:	4650      	mov	r0, sl
 23f62a4:	4915      	ldr	r1, [pc, #84]	; (23f62fc <_ZN11SomLocation10threadLoopEv+0x294>)
 23f62a6:	f7fe fd0e 	bl	23f4cc6 <_ZNK5spark6Logger5traceEPKcz>
                    event.doneCallback(response);
 23f62aa:	9b07      	ldr	r3, [sp, #28]
 23f62ac:	9308      	str	r3, [sp, #32]
      if (_M_empty())
 23f62ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 23f62b0:	b90b      	cbnz	r3, 23f62b6 <_ZN11SomLocation10threadLoopEv+0x24e>
	__throw_bad_function_call();
 23f62b2:	f003 fb6f 	bl	23f9994 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f62b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23f62b8:	a908      	add	r1, sp, #32
 23f62ba:	a80c      	add	r0, sp, #48	; 0x30
 23f62bc:	4798      	blx	r3
 23f62be:	e7b4      	b.n	23f622a <_ZN11SomLocation10threadLoopEv+0x1c2>
}
 23f62c0:	b013      	add	sp, #76	; 0x4c
 23f62c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f62c6:	bf00      	nop
 23f62c8:	023ff7bf 	.word	0x023ff7bf
 23f62cc:	023ff7d2 	.word	0x023ff7d2
 23f62d0:	023ff7dc 	.word	0x023ff7dc
 23f62d4:	1007aeb4 	.word	0x1007aeb4
 23f62d8:	023ff7f4 	.word	0x023ff7f4
 23f62dc:	023f57dd 	.word	0x023f57dd
 23f62e0:	023ff801 	.word	0x023ff801
 23f62e4:	023f5821 	.word	0x023f5821
 23f62e8:	023ff81f 	.word	0x023ff81f
 23f62ec:	447a0000 	.word	0x447a0000
 23f62f0:	023ff82a 	.word	0x023ff82a
 23f62f4:	023ff7aa 	.word	0x023ff7aa
 23f62f8:	023ff66c 	.word	0x023ff66c
 23f62fc:	023ff849 	.word	0x023ff849
 23f6300:	1007aeac 	.word	0x1007aeac

023f6304 <_ZNSt17_Function_handlerIFvvEZN11SomLocationC4EvEUlvE_E9_M_invokeERKSt9_Any_data>:
    _thread = new Thread("gnss_cellular", [this]() {SomLocation::threadLoop();}, OS_THREAD_PRIORITY_DEFAULT);
 23f6304:	6800      	ldr	r0, [r0, #0]
 23f6306:	f7ff beaf 	b.w	23f6068 <_ZN11SomLocation10threadLoopEv>
	...

023f630c <cellular_device_info>:
DYNALIB_FN(4, hal_cellular, cellular_pdp_activate, cellular_result_t(CellularCredentials*, void*))
DYNALIB_FN(5, hal_cellular, cellular_pdp_deactivate, cellular_result_t(void*))
DYNALIB_FN(6, hal_cellular, cellular_gprs_attach, cellular_result_t(CellularCredentials*, void*))
DYNALIB_FN(7, hal_cellular, cellular_gprs_detach, cellular_result_t(void*))
DYNALIB_FN(8, hal_cellular, cellular_fetch_ipconfig, cellular_result_t(CellularConfig*, void*))
DYNALIB_FN(9, hal_cellular, cellular_device_info, cellular_result_t(CellularDevice*, void*))
 23f630c:	b509      	push	{r0, r3, lr}
 23f630e:	4804      	ldr	r0, [pc, #16]	; (23f6320 <cellular_device_info+0x14>)
 23f6310:	6800      	ldr	r0, [r0, #0]
 23f6312:	4b04      	ldr	r3, [pc, #16]	; (23f6324 <cellular_device_info+0x18>)
 23f6314:	4403      	add	r3, r0
 23f6316:	681b      	ldr	r3, [r3, #0]
 23f6318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f631a:	9302      	str	r3, [sp, #8]
 23f631c:	bd09      	pop	{r0, r3, pc}
 23f631e:	0000      	.short	0x0000
 23f6320:	1006a0e0 	.word	0x1006a0e0
 23f6324:	0000006c 	.word	0x0000006c

023f6328 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
 23f6328:	b509      	push	{r0, r3, lr}
 23f632a:	4804      	ldr	r0, [pc, #16]	; (23f633c <cellular_signal+0x14>)
 23f632c:	6800      	ldr	r0, [r0, #0]
 23f632e:	4b04      	ldr	r3, [pc, #16]	; (23f6340 <cellular_signal+0x18>)
 23f6330:	4403      	add	r3, r0
 23f6332:	681b      	ldr	r3, [r3, #0]
 23f6334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f6336:	9302      	str	r3, [sp, #8]
 23f6338:	bd09      	pop	{r0, r3, pc}
 23f633a:	0000      	.short	0x0000
 23f633c:	1006a0e0 	.word	0x1006a0e0
 23f6340:	0000006c 	.word	0x0000006c

023f6344 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 23f6344:	b509      	push	{r0, r3, lr}
 23f6346:	4804      	ldr	r0, [pc, #16]	; (23f6358 <cellular_command+0x14>)
 23f6348:	6800      	ldr	r0, [r0, #0]
 23f634a:	4b04      	ldr	r3, [pc, #16]	; (23f635c <cellular_command+0x18>)
 23f634c:	4403      	add	r3, r0
 23f634e:	681b      	ldr	r3, [r3, #0]
 23f6350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f6352:	9302      	str	r3, [sp, #8]
 23f6354:	bd09      	pop	{r0, r3, pc}
 23f6356:	0000      	.short	0x0000
 23f6358:	1006a0e0 	.word	0x1006a0e0
 23f635c:	0000006c 	.word	0x0000006c

023f6360 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 23f6360:	b509      	push	{r0, r3, lr}
 23f6362:	4804      	ldr	r0, [pc, #16]	; (23f6374 <os_thread_create+0x14>)
 23f6364:	6800      	ldr	r0, [r0, #0]
 23f6366:	4b04      	ldr	r3, [pc, #16]	; (23f6378 <os_thread_create+0x18>)
 23f6368:	4403      	add	r3, r0
 23f636a:	681b      	ldr	r3, [r3, #0]
 23f636c:	685b      	ldr	r3, [r3, #4]
 23f636e:	9302      	str	r3, [sp, #8]
 23f6370:	bd09      	pop	{r0, r3, pc}
 23f6372:	0000      	.short	0x0000
 23f6374:	1006a0e0 	.word	0x1006a0e0
 23f6378:	00000030 	.word	0x00000030

023f637c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23f637c:	b509      	push	{r0, r3, lr}
 23f637e:	4804      	ldr	r0, [pc, #16]	; (23f6390 <os_mutex_recursive_create+0x14>)
 23f6380:	6800      	ldr	r0, [r0, #0]
 23f6382:	4b04      	ldr	r3, [pc, #16]	; (23f6394 <os_mutex_recursive_create+0x18>)
 23f6384:	4403      	add	r3, r0
 23f6386:	681b      	ldr	r3, [r3, #0]
 23f6388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f638a:	9302      	str	r3, [sp, #8]
 23f638c:	bd09      	pop	{r0, r3, pc}
 23f638e:	0000      	.short	0x0000
 23f6390:	1006a0e0 	.word	0x1006a0e0
 23f6394:	00000030 	.word	0x00000030

023f6398 <os_queue_create>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))

DYNALIB_FN(22, hal_concurrent, os_timer_is_active, int(os_timer_t, void*))

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
 23f6398:	b509      	push	{r0, r3, lr}
 23f639a:	4804      	ldr	r0, [pc, #16]	; (23f63ac <os_queue_create+0x14>)
 23f639c:	6800      	ldr	r0, [r0, #0]
 23f639e:	4b04      	ldr	r3, [pc, #16]	; (23f63b0 <os_queue_create+0x18>)
 23f63a0:	4403      	add	r3, r0
 23f63a2:	681b      	ldr	r3, [r3, #0]
 23f63a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23f63a6:	9302      	str	r3, [sp, #8]
 23f63a8:	bd09      	pop	{r0, r3, pc}
 23f63aa:	0000      	.short	0x0000
 23f63ac:	1006a0e0 	.word	0x1006a0e0
 23f63b0:	00000030 	.word	0x00000030

023f63b4 <os_queue_put>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
 23f63b4:	b509      	push	{r0, r3, lr}
 23f63b6:	4804      	ldr	r0, [pc, #16]	; (23f63c8 <os_queue_put+0x14>)
 23f63b8:	6800      	ldr	r0, [r0, #0]
 23f63ba:	4b04      	ldr	r3, [pc, #16]	; (23f63cc <os_queue_put+0x18>)
 23f63bc:	4403      	add	r3, r0
 23f63be:	681b      	ldr	r3, [r3, #0]
 23f63c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 23f63c2:	9302      	str	r3, [sp, #8]
 23f63c4:	bd09      	pop	{r0, r3, pc}
 23f63c6:	0000      	.short	0x0000
 23f63c8:	1006a0e0 	.word	0x1006a0e0
 23f63cc:	00000030 	.word	0x00000030

023f63d0 <os_queue_take>:
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
 23f63d0:	b509      	push	{r0, r3, lr}
 23f63d2:	4804      	ldr	r0, [pc, #16]	; (23f63e4 <os_queue_take+0x14>)
 23f63d4:	6800      	ldr	r0, [r0, #0]
 23f63d6:	4b04      	ldr	r3, [pc, #16]	; (23f63e8 <os_queue_take+0x18>)
 23f63d8:	4403      	add	r3, r0
 23f63da:	681b      	ldr	r3, [r3, #0]
 23f63dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 23f63de:	9302      	str	r3, [sp, #8]
 23f63e0:	bd09      	pop	{r0, r3, pc}
 23f63e2:	0000      	.short	0x0000
 23f63e4:	1006a0e0 	.word	0x1006a0e0
 23f63e8:	00000030 	.word	0x00000030

023f63ec <os_thread_exit>:
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
 23f63ec:	b509      	push	{r0, r3, lr}
 23f63ee:	4804      	ldr	r0, [pc, #16]	; (23f6400 <os_thread_exit+0x14>)
 23f63f0:	6800      	ldr	r0, [r0, #0]
 23f63f2:	4b04      	ldr	r3, [pc, #16]	; (23f6404 <os_thread_exit+0x18>)
 23f63f4:	4403      	add	r3, r0
 23f63f6:	681b      	ldr	r3, [r3, #0]
 23f63f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23f63fa:	9302      	str	r3, [sp, #8]
 23f63fc:	bd09      	pop	{r0, r3, pc}
 23f63fe:	0000      	.short	0x0000
 23f6400:	1006a0e0 	.word	0x1006a0e0
 23f6404:	00000030 	.word	0x00000030

023f6408 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, hal_watchdog_reset_flagged_deprecated, bool(void))
DYNALIB_FN(17, hal_core, hal_watchdog_refresh_deprecated, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
 23f6408:	b509      	push	{r0, r3, lr}
 23f640a:	4804      	ldr	r0, [pc, #16]	; (23f641c <HAL_Core_Runtime_Info+0x14>)
 23f640c:	6800      	ldr	r0, [r0, #0]
 23f640e:	4b04      	ldr	r3, [pc, #16]	; (23f6420 <HAL_Core_Runtime_Info+0x18>)
 23f6410:	4403      	add	r3, r0
 23f6412:	681b      	ldr	r3, [r3, #0]
 23f6414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f6416:	9302      	str	r3, [sp, #8]
 23f6418:	bd09      	pop	{r0, r3, pc}
 23f641a:	0000      	.short	0x0000
 23f641c:	1006a0e0 	.word	0x1006a0e0
 23f6420:	0000001c 	.word	0x0000001c

023f6424 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 23f6424:	b509      	push	{r0, r3, lr}
 23f6426:	4804      	ldr	r0, [pc, #16]	; (23f6438 <HAL_Feature_Set+0x14>)
 23f6428:	6800      	ldr	r0, [r0, #0]
 23f642a:	4b04      	ldr	r3, [pc, #16]	; (23f643c <HAL_Feature_Set+0x18>)
 23f642c:	4403      	add	r3, r0
 23f642e:	681b      	ldr	r3, [r3, #0]
 23f6430:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 23f6432:	9302      	str	r3, [sp, #8]
 23f6434:	bd09      	pop	{r0, r3, pc}
 23f6436:	0000      	.short	0x0000
 23f6438:	1006a0e0 	.word	0x1006a0e0
 23f643c:	0000001c 	.word	0x0000001c

023f6440 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 23f6440:	b509      	push	{r0, r3, lr}
 23f6442:	4804      	ldr	r0, [pc, #16]	; (23f6454 <HAL_Core_Get_Last_Reset_Info+0x14>)
 23f6444:	6800      	ldr	r0, [r0, #0]
 23f6446:	4b04      	ldr	r3, [pc, #16]	; (23f6458 <HAL_Core_Get_Last_Reset_Info+0x18>)
 23f6448:	4403      	add	r3, r0
 23f644a:	681b      	ldr	r3, [r3, #0]
 23f644c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23f644e:	9302      	str	r3, [sp, #8]
 23f6450:	bd09      	pop	{r0, r3, pc}
 23f6452:	0000      	.short	0x0000
 23f6454:	1006a0e0 	.word	0x1006a0e0
 23f6458:	0000001c 	.word	0x0000001c

023f645c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23f645c:	b509      	push	{r0, r3, lr}
 23f645e:	4804      	ldr	r0, [pc, #16]	; (23f6470 <HAL_RNG_GetRandomNumber+0x14>)
 23f6460:	6800      	ldr	r0, [r0, #0]
 23f6462:	4b04      	ldr	r3, [pc, #16]	; (23f6474 <HAL_RNG_GetRandomNumber+0x18>)
 23f6464:	4403      	add	r3, r0
 23f6466:	681b      	ldr	r3, [r3, #0]
 23f6468:	685b      	ldr	r3, [r3, #4]
 23f646a:	9302      	str	r3, [sp, #8]
 23f646c:	bd09      	pop	{r0, r3, pc}
 23f646e:	0000      	.short	0x0000
 23f6470:	1006a0e0 	.word	0x1006a0e0
 23f6474:	00000000 	.word	0x00000000

023f6478 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
 23f6478:	b509      	push	{r0, r3, lr}
 23f647a:	4804      	ldr	r0, [pc, #16]	; (23f648c <HAL_Delay_Milliseconds+0x14>)
 23f647c:	6800      	ldr	r0, [r0, #0]
 23f647e:	4b04      	ldr	r3, [pc, #16]	; (23f6490 <HAL_Delay_Milliseconds+0x18>)
 23f6480:	4403      	add	r3, r0
 23f6482:	681b      	ldr	r3, [r3, #0]
 23f6484:	689b      	ldr	r3, [r3, #8]
 23f6486:	9302      	str	r3, [sp, #8]
 23f6488:	bd09      	pop	{r0, r3, pc}
 23f648a:	0000      	.short	0x0000
 23f648c:	1006a0e0 	.word	0x1006a0e0
 23f6490:	00000000 	.word	0x00000000

023f6494 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23f6494:	b509      	push	{r0, r3, lr}
 23f6496:	4804      	ldr	r0, [pc, #16]	; (23f64a8 <HAL_Delay_Microseconds+0x14>)
 23f6498:	6800      	ldr	r0, [r0, #0]
 23f649a:	4b04      	ldr	r3, [pc, #16]	; (23f64ac <HAL_Delay_Microseconds+0x18>)
 23f649c:	4403      	add	r3, r0
 23f649e:	681b      	ldr	r3, [r3, #0]
 23f64a0:	68db      	ldr	r3, [r3, #12]
 23f64a2:	9302      	str	r3, [sp, #8]
 23f64a4:	bd09      	pop	{r0, r3, pc}
 23f64a6:	0000      	.short	0x0000
 23f64a8:	1006a0e0 	.word	0x1006a0e0
 23f64ac:	00000000 	.word	0x00000000

023f64b0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23f64b0:	b509      	push	{r0, r3, lr}
 23f64b2:	4804      	ldr	r0, [pc, #16]	; (23f64c4 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23f64b4:	6800      	ldr	r0, [r0, #0]
 23f64b6:	4b04      	ldr	r3, [pc, #16]	; (23f64c8 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23f64b8:	4403      	add	r3, r0
 23f64ba:	681b      	ldr	r3, [r3, #0]
 23f64bc:	695b      	ldr	r3, [r3, #20]
 23f64be:	9302      	str	r3, [sp, #8]
 23f64c0:	bd09      	pop	{r0, r3, pc}
 23f64c2:	0000      	.short	0x0000
 23f64c4:	1006a0e0 	.word	0x1006a0e0
 23f64c8:	00000000 	.word	0x00000000

023f64cc <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 23f64cc:	b509      	push	{r0, r3, lr}
 23f64ce:	4804      	ldr	r0, [pc, #16]	; (23f64e0 <HAL_EEPROM_Init+0x14>)
 23f64d0:	6800      	ldr	r0, [r0, #0]
 23f64d2:	4b04      	ldr	r3, [pc, #16]	; (23f64e4 <HAL_EEPROM_Init+0x18>)
 23f64d4:	4403      	add	r3, r0
 23f64d6:	681b      	ldr	r3, [r3, #0]
 23f64d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f64da:	9302      	str	r3, [sp, #8]
 23f64dc:	bd09      	pop	{r0, r3, pc}
 23f64de:	0000      	.short	0x0000
 23f64e0:	1006a0e0 	.word	0x1006a0e0
 23f64e4:	00000000 	.word	0x00000000

023f64e8 <HAL_EEPROM_Length>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))
 23f64e8:	b509      	push	{r0, r3, lr}
 23f64ea:	4804      	ldr	r0, [pc, #16]	; (23f64fc <HAL_EEPROM_Length+0x14>)
 23f64ec:	6800      	ldr	r0, [r0, #0]
 23f64ee:	4b04      	ldr	r3, [pc, #16]	; (23f6500 <HAL_EEPROM_Length+0x18>)
 23f64f0:	4403      	add	r3, r0
 23f64f2:	681b      	ldr	r3, [r3, #0]
 23f64f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f64f6:	9302      	str	r3, [sp, #8]
 23f64f8:	bd09      	pop	{r0, r3, pc}
 23f64fa:	0000      	.short	0x0000
 23f64fc:	1006a0e0 	.word	0x1006a0e0
 23f6500:	00000000 	.word	0x00000000

023f6504 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 23f6504:	b509      	push	{r0, r3, lr}
 23f6506:	4804      	ldr	r0, [pc, #16]	; (23f6518 <HAL_EEPROM_Get+0x14>)
 23f6508:	6800      	ldr	r0, [r0, #0]
 23f650a:	4b04      	ldr	r3, [pc, #16]	; (23f651c <HAL_EEPROM_Get+0x18>)
 23f650c:	4403      	add	r3, r0
 23f650e:	681b      	ldr	r3, [r3, #0]
 23f6510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f6512:	9302      	str	r3, [sp, #8]
 23f6514:	bd09      	pop	{r0, r3, pc}
 23f6516:	0000      	.short	0x0000
 23f6518:	1006a0e0 	.word	0x1006a0e0
 23f651c:	00000000 	.word	0x00000000

023f6520 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 23f6520:	b509      	push	{r0, r3, lr}
 23f6522:	4804      	ldr	r0, [pc, #16]	; (23f6534 <HAL_EEPROM_Put+0x14>)
 23f6524:	6800      	ldr	r0, [r0, #0]
 23f6526:	4b04      	ldr	r3, [pc, #16]	; (23f6538 <HAL_EEPROM_Put+0x18>)
 23f6528:	4403      	add	r3, r0
 23f652a:	681b      	ldr	r3, [r3, #0]
 23f652c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f652e:	9302      	str	r3, [sp, #8]
 23f6530:	bd09      	pop	{r0, r3, pc}
 23f6532:	0000      	.short	0x0000
 23f6534:	1006a0e0 	.word	0x1006a0e0
 23f6538:	00000000 	.word	0x00000000

023f653c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 23f653c:	b509      	push	{r0, r3, lr}
 23f653e:	4804      	ldr	r0, [pc, #16]	; (23f6550 <hal_rtc_time_is_valid+0x14>)
 23f6540:	6800      	ldr	r0, [r0, #0]
 23f6542:	4b04      	ldr	r3, [pc, #16]	; (23f6554 <hal_rtc_time_is_valid+0x18>)
 23f6544:	4403      	add	r3, r0
 23f6546:	681b      	ldr	r3, [r3, #0]
 23f6548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f654a:	9302      	str	r3, [sp, #8]
 23f654c:	bd09      	pop	{r0, r3, pc}
 23f654e:	0000      	.short	0x0000
 23f6550:	1006a0e0 	.word	0x1006a0e0
 23f6554:	00000000 	.word	0x00000000

023f6558 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 23f6558:	b509      	push	{r0, r3, lr}
 23f655a:	4804      	ldr	r0, [pc, #16]	; (23f656c <hal_timer_millis+0x14>)
 23f655c:	6800      	ldr	r0, [r0, #0]
 23f655e:	4b04      	ldr	r3, [pc, #16]	; (23f6570 <hal_timer_millis+0x18>)
 23f6560:	4403      	add	r3, r0
 23f6562:	681b      	ldr	r3, [r3, #0]
 23f6564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23f6566:	9302      	str	r3, [sp, #8]
 23f6568:	bd09      	pop	{r0, r3, pc}
 23f656a:	0000      	.short	0x0000
 23f656c:	1006a0e0 	.word	0x1006a0e0
 23f6570:	00000000 	.word	0x00000000

023f6574 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 23f6574:	b509      	push	{r0, r3, lr}
 23f6576:	4804      	ldr	r0, [pc, #16]	; (23f6588 <hal_rtc_get_time+0x14>)
 23f6578:	6800      	ldr	r0, [r0, #0]
 23f657a:	4b04      	ldr	r3, [pc, #16]	; (23f658c <hal_rtc_get_time+0x18>)
 23f657c:	4403      	add	r3, r0
 23f657e:	681b      	ldr	r3, [r3, #0]
 23f6580:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 23f6582:	9302      	str	r3, [sp, #8]
 23f6584:	bd09      	pop	{r0, r3, pc}
 23f6586:	0000      	.short	0x0000
 23f6588:	1006a0e0 	.word	0x1006a0e0
 23f658c:	00000000 	.word	0x00000000

023f6590 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
 23f6590:	b509      	push	{r0, r3, lr}
 23f6592:	4804      	ldr	r0, [pc, #16]	; (23f65a4 <hal_rtc_set_time+0x14>)
 23f6594:	6800      	ldr	r0, [r0, #0]
 23f6596:	4b04      	ldr	r3, [pc, #16]	; (23f65a8 <hal_rtc_set_time+0x18>)
 23f6598:	4403      	add	r3, r0
 23f659a:	681b      	ldr	r3, [r3, #0]
 23f659c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 23f659e:	9302      	str	r3, [sp, #8]
 23f65a0:	bd09      	pop	{r0, r3, pc}
 23f65a2:	0000      	.short	0x0000
 23f65a4:	1006a0e0 	.word	0x1006a0e0
 23f65a8:	00000000 	.word	0x00000000

023f65ac <hal_pin_map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
 23f65ac:	b509      	push	{r0, r3, lr}
 23f65ae:	4804      	ldr	r0, [pc, #16]	; (23f65c0 <hal_pin_map+0x14>)
 23f65b0:	6800      	ldr	r0, [r0, #0]
 23f65b2:	4b04      	ldr	r3, [pc, #16]	; (23f65c4 <hal_pin_map+0x18>)
 23f65b4:	4403      	add	r3, r0
 23f65b6:	681b      	ldr	r3, [r3, #0]
 23f65b8:	681b      	ldr	r3, [r3, #0]
 23f65ba:	9302      	str	r3, [sp, #8]
 23f65bc:	bd09      	pop	{r0, r3, pc}
 23f65be:	0000      	.short	0x0000
 23f65c0:	1006a0e0 	.word	0x1006a0e0
 23f65c4:	00000014 	.word	0x00000014

023f65c8 <hal_pin_validate_function>:
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
 23f65c8:	b509      	push	{r0, r3, lr}
 23f65ca:	4804      	ldr	r0, [pc, #16]	; (23f65dc <hal_pin_validate_function+0x14>)
 23f65cc:	6800      	ldr	r0, [r0, #0]
 23f65ce:	4b04      	ldr	r3, [pc, #16]	; (23f65e0 <hal_pin_validate_function+0x18>)
 23f65d0:	4403      	add	r3, r0
 23f65d2:	681b      	ldr	r3, [r3, #0]
 23f65d4:	685b      	ldr	r3, [r3, #4]
 23f65d6:	9302      	str	r3, [sp, #8]
 23f65d8:	bd09      	pop	{r0, r3, pc}
 23f65da:	0000      	.short	0x0000
 23f65dc:	1006a0e0 	.word	0x1006a0e0
 23f65e0:	00000014 	.word	0x00000014

023f65e4 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23f65e4:	b509      	push	{r0, r3, lr}
 23f65e6:	4804      	ldr	r0, [pc, #16]	; (23f65f8 <hal_gpio_mode+0x14>)
 23f65e8:	6800      	ldr	r0, [r0, #0]
 23f65ea:	4b04      	ldr	r3, [pc, #16]	; (23f65fc <hal_gpio_mode+0x18>)
 23f65ec:	4403      	add	r3, r0
 23f65ee:	681b      	ldr	r3, [r3, #0]
 23f65f0:	689b      	ldr	r3, [r3, #8]
 23f65f2:	9302      	str	r3, [sp, #8]
 23f65f4:	bd09      	pop	{r0, r3, pc}
 23f65f6:	0000      	.short	0x0000
 23f65f8:	1006a0e0 	.word	0x1006a0e0
 23f65fc:	00000014 	.word	0x00000014

023f6600 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23f6600:	b509      	push	{r0, r3, lr}
 23f6602:	4804      	ldr	r0, [pc, #16]	; (23f6614 <hal_gpio_get_mode+0x14>)
 23f6604:	6800      	ldr	r0, [r0, #0]
 23f6606:	4b04      	ldr	r3, [pc, #16]	; (23f6618 <hal_gpio_get_mode+0x18>)
 23f6608:	4403      	add	r3, r0
 23f660a:	681b      	ldr	r3, [r3, #0]
 23f660c:	68db      	ldr	r3, [r3, #12]
 23f660e:	9302      	str	r3, [sp, #8]
 23f6610:	bd09      	pop	{r0, r3, pc}
 23f6612:	0000      	.short	0x0000
 23f6614:	1006a0e0 	.word	0x1006a0e0
 23f6618:	00000014 	.word	0x00000014

023f661c <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23f661c:	b509      	push	{r0, r3, lr}
 23f661e:	4804      	ldr	r0, [pc, #16]	; (23f6630 <hal_gpio_write+0x14>)
 23f6620:	6800      	ldr	r0, [r0, #0]
 23f6622:	4b04      	ldr	r3, [pc, #16]	; (23f6634 <hal_gpio_write+0x18>)
 23f6624:	4403      	add	r3, r0
 23f6626:	681b      	ldr	r3, [r3, #0]
 23f6628:	691b      	ldr	r3, [r3, #16]
 23f662a:	9302      	str	r3, [sp, #8]
 23f662c:	bd09      	pop	{r0, r3, pc}
 23f662e:	0000      	.short	0x0000
 23f6630:	1006a0e0 	.word	0x1006a0e0
 23f6634:	00000014 	.word	0x00000014

023f6638 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
 23f6638:	b509      	push	{r0, r3, lr}
 23f663a:	4804      	ldr	r0, [pc, #16]	; (23f664c <hal_gpio_read+0x14>)
 23f663c:	6800      	ldr	r0, [r0, #0]
 23f663e:	4b04      	ldr	r3, [pc, #16]	; (23f6650 <hal_gpio_read+0x18>)
 23f6640:	4403      	add	r3, r0
 23f6642:	681b      	ldr	r3, [r3, #0]
 23f6644:	695b      	ldr	r3, [r3, #20]
 23f6646:	9302      	str	r3, [sp, #8]
 23f6648:	bd09      	pop	{r0, r3, pc}
 23f664a:	0000      	.short	0x0000
 23f664c:	1006a0e0 	.word	0x1006a0e0
 23f6650:	00000014 	.word	0x00000014

023f6654 <hal_interrupt_attach>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
 23f6654:	b509      	push	{r0, r3, lr}
 23f6656:	4804      	ldr	r0, [pc, #16]	; (23f6668 <hal_interrupt_attach+0x14>)
 23f6658:	6800      	ldr	r0, [r0, #0]
 23f665a:	4b04      	ldr	r3, [pc, #16]	; (23f666c <hal_interrupt_attach+0x18>)
 23f665c:	4403      	add	r3, r0
 23f665e:	681b      	ldr	r3, [r3, #0]
 23f6660:	699b      	ldr	r3, [r3, #24]
 23f6662:	9302      	str	r3, [sp, #8]
 23f6664:	bd09      	pop	{r0, r3, pc}
 23f6666:	0000      	.short	0x0000
 23f6668:	1006a0e0 	.word	0x1006a0e0
 23f666c:	00000014 	.word	0x00000014

023f6670 <hal_interrupt_detach>:
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
 23f6670:	b509      	push	{r0, r3, lr}
 23f6672:	4804      	ldr	r0, [pc, #16]	; (23f6684 <hal_interrupt_detach+0x14>)
 23f6674:	6800      	ldr	r0, [r0, #0]
 23f6676:	4b04      	ldr	r3, [pc, #16]	; (23f6688 <hal_interrupt_detach+0x18>)
 23f6678:	4403      	add	r3, r0
 23f667a:	681b      	ldr	r3, [r3, #0]
 23f667c:	69db      	ldr	r3, [r3, #28]
 23f667e:	9302      	str	r3, [sp, #8]
 23f6680:	bd09      	pop	{r0, r3, pc}
 23f6682:	0000      	.short	0x0000
 23f6684:	1006a0e0 	.word	0x1006a0e0
 23f6688:	00000014 	.word	0x00000014

023f668c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 23f668c:	b509      	push	{r0, r3, lr}
 23f668e:	4804      	ldr	r0, [pc, #16]	; (23f66a0 <hal_adc_read+0x14>)
 23f6690:	6800      	ldr	r0, [r0, #0]
 23f6692:	4b04      	ldr	r3, [pc, #16]	; (23f66a4 <hal_adc_read+0x18>)
 23f6694:	4403      	add	r3, r0
 23f6696:	681b      	ldr	r3, [r3, #0]
 23f6698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f669a:	9302      	str	r3, [sp, #8]
 23f669c:	bd09      	pop	{r0, r3, pc}
 23f669e:	0000      	.short	0x0000
 23f66a0:	1006a0e0 	.word	0x1006a0e0
 23f66a4:	00000014 	.word	0x00000014

023f66a8 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 23f66a8:	b509      	push	{r0, r3, lr}
 23f66aa:	4804      	ldr	r0, [pc, #16]	; (23f66bc <hal_i2c_set_speed+0x14>)
 23f66ac:	6800      	ldr	r0, [r0, #0]
 23f66ae:	4b04      	ldr	r3, [pc, #16]	; (23f66c0 <hal_i2c_set_speed+0x18>)
 23f66b0:	4403      	add	r3, r0
 23f66b2:	681b      	ldr	r3, [r3, #0]
 23f66b4:	681b      	ldr	r3, [r3, #0]
 23f66b6:	9302      	str	r3, [sp, #8]
 23f66b8:	bd09      	pop	{r0, r3, pc}
 23f66ba:	0000      	.short	0x0000
 23f66bc:	1006a0e0 	.word	0x1006a0e0
 23f66c0:	00000010 	.word	0x00000010

023f66c4 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23f66c4:	b509      	push	{r0, r3, lr}
 23f66c6:	4804      	ldr	r0, [pc, #16]	; (23f66d8 <hal_i2c_begin+0x14>)
 23f66c8:	6800      	ldr	r0, [r0, #0]
 23f66ca:	4b04      	ldr	r3, [pc, #16]	; (23f66dc <hal_i2c_begin+0x18>)
 23f66cc:	4403      	add	r3, r0
 23f66ce:	681b      	ldr	r3, [r3, #0]
 23f66d0:	68db      	ldr	r3, [r3, #12]
 23f66d2:	9302      	str	r3, [sp, #8]
 23f66d4:	bd09      	pop	{r0, r3, pc}
 23f66d6:	0000      	.short	0x0000
 23f66d8:	1006a0e0 	.word	0x1006a0e0
 23f66dc:	00000010 	.word	0x00000010

023f66e0 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23f66e0:	b509      	push	{r0, r3, lr}
 23f66e2:	4804      	ldr	r0, [pc, #16]	; (23f66f4 <hal_i2c_begin_transmission+0x14>)
 23f66e4:	6800      	ldr	r0, [r0, #0]
 23f66e6:	4b04      	ldr	r3, [pc, #16]	; (23f66f8 <hal_i2c_begin_transmission+0x18>)
 23f66e8:	4403      	add	r3, r0
 23f66ea:	681b      	ldr	r3, [r3, #0]
 23f66ec:	699b      	ldr	r3, [r3, #24]
 23f66ee:	9302      	str	r3, [sp, #8]
 23f66f0:	bd09      	pop	{r0, r3, pc}
 23f66f2:	0000      	.short	0x0000
 23f66f4:	1006a0e0 	.word	0x1006a0e0
 23f66f8:	00000010 	.word	0x00000010

023f66fc <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23f66fc:	b509      	push	{r0, r3, lr}
 23f66fe:	4804      	ldr	r0, [pc, #16]	; (23f6710 <hal_i2c_end_transmission+0x14>)
 23f6700:	6800      	ldr	r0, [r0, #0]
 23f6702:	4b04      	ldr	r3, [pc, #16]	; (23f6714 <hal_i2c_end_transmission+0x18>)
 23f6704:	4403      	add	r3, r0
 23f6706:	681b      	ldr	r3, [r3, #0]
 23f6708:	69db      	ldr	r3, [r3, #28]
 23f670a:	9302      	str	r3, [sp, #8]
 23f670c:	bd09      	pop	{r0, r3, pc}
 23f670e:	0000      	.short	0x0000
 23f6710:	1006a0e0 	.word	0x1006a0e0
 23f6714:	00000010 	.word	0x00000010

023f6718 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23f6718:	b509      	push	{r0, r3, lr}
 23f671a:	4804      	ldr	r0, [pc, #16]	; (23f672c <hal_i2c_write+0x14>)
 23f671c:	6800      	ldr	r0, [r0, #0]
 23f671e:	4b04      	ldr	r3, [pc, #16]	; (23f6730 <hal_i2c_write+0x18>)
 23f6720:	4403      	add	r3, r0
 23f6722:	681b      	ldr	r3, [r3, #0]
 23f6724:	6a1b      	ldr	r3, [r3, #32]
 23f6726:	9302      	str	r3, [sp, #8]
 23f6728:	bd09      	pop	{r0, r3, pc}
 23f672a:	0000      	.short	0x0000
 23f672c:	1006a0e0 	.word	0x1006a0e0
 23f6730:	00000010 	.word	0x00000010

023f6734 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23f6734:	b509      	push	{r0, r3, lr}
 23f6736:	4804      	ldr	r0, [pc, #16]	; (23f6748 <hal_i2c_available+0x14>)
 23f6738:	6800      	ldr	r0, [r0, #0]
 23f673a:	4b04      	ldr	r3, [pc, #16]	; (23f674c <hal_i2c_available+0x18>)
 23f673c:	4403      	add	r3, r0
 23f673e:	681b      	ldr	r3, [r3, #0]
 23f6740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f6742:	9302      	str	r3, [sp, #8]
 23f6744:	bd09      	pop	{r0, r3, pc}
 23f6746:	0000      	.short	0x0000
 23f6748:	1006a0e0 	.word	0x1006a0e0
 23f674c:	00000010 	.word	0x00000010

023f6750 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23f6750:	b509      	push	{r0, r3, lr}
 23f6752:	4804      	ldr	r0, [pc, #16]	; (23f6764 <hal_i2c_read+0x14>)
 23f6754:	6800      	ldr	r0, [r0, #0]
 23f6756:	4b04      	ldr	r3, [pc, #16]	; (23f6768 <hal_i2c_read+0x18>)
 23f6758:	4403      	add	r3, r0
 23f675a:	681b      	ldr	r3, [r3, #0]
 23f675c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f675e:	9302      	str	r3, [sp, #8]
 23f6760:	bd09      	pop	{r0, r3, pc}
 23f6762:	0000      	.short	0x0000
 23f6764:	1006a0e0 	.word	0x1006a0e0
 23f6768:	00000010 	.word	0x00000010

023f676c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23f676c:	b509      	push	{r0, r3, lr}
 23f676e:	4804      	ldr	r0, [pc, #16]	; (23f6780 <hal_i2c_peek+0x14>)
 23f6770:	6800      	ldr	r0, [r0, #0]
 23f6772:	4b04      	ldr	r3, [pc, #16]	; (23f6784 <hal_i2c_peek+0x18>)
 23f6774:	4403      	add	r3, r0
 23f6776:	681b      	ldr	r3, [r3, #0]
 23f6778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f677a:	9302      	str	r3, [sp, #8]
 23f677c:	bd09      	pop	{r0, r3, pc}
 23f677e:	0000      	.short	0x0000
 23f6780:	1006a0e0 	.word	0x1006a0e0
 23f6784:	00000010 	.word	0x00000010

023f6788 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23f6788:	b509      	push	{r0, r3, lr}
 23f678a:	4804      	ldr	r0, [pc, #16]	; (23f679c <hal_i2c_flush+0x14>)
 23f678c:	6800      	ldr	r0, [r0, #0]
 23f678e:	4b04      	ldr	r3, [pc, #16]	; (23f67a0 <hal_i2c_flush+0x18>)
 23f6790:	4403      	add	r3, r0
 23f6792:	681b      	ldr	r3, [r3, #0]
 23f6794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f6796:	9302      	str	r3, [sp, #8]
 23f6798:	bd09      	pop	{r0, r3, pc}
 23f679a:	0000      	.short	0x0000
 23f679c:	1006a0e0 	.word	0x1006a0e0
 23f67a0:	00000010 	.word	0x00000010

023f67a4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23f67a4:	b509      	push	{r0, r3, lr}
 23f67a6:	4804      	ldr	r0, [pc, #16]	; (23f67b8 <hal_i2c_is_enabled+0x14>)
 23f67a8:	6800      	ldr	r0, [r0, #0]
 23f67aa:	4b04      	ldr	r3, [pc, #16]	; (23f67bc <hal_i2c_is_enabled+0x18>)
 23f67ac:	4403      	add	r3, r0
 23f67ae:	681b      	ldr	r3, [r3, #0]
 23f67b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f67b2:	9302      	str	r3, [sp, #8]
 23f67b4:	bd09      	pop	{r0, r3, pc}
 23f67b6:	0000      	.short	0x0000
 23f67b8:	1006a0e0 	.word	0x1006a0e0
 23f67bc:	00000010 	.word	0x00000010

023f67c0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23f67c0:	b509      	push	{r0, r3, lr}
 23f67c2:	4804      	ldr	r0, [pc, #16]	; (23f67d4 <hal_i2c_init+0x14>)
 23f67c4:	6800      	ldr	r0, [r0, #0]
 23f67c6:	4b04      	ldr	r3, [pc, #16]	; (23f67d8 <hal_i2c_init+0x18>)
 23f67c8:	4403      	add	r3, r0
 23f67ca:	681b      	ldr	r3, [r3, #0]
 23f67cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f67ce:	9302      	str	r3, [sp, #8]
 23f67d0:	bd09      	pop	{r0, r3, pc}
 23f67d2:	0000      	.short	0x0000
 23f67d4:	1006a0e0 	.word	0x1006a0e0
 23f67d8:	00000010 	.word	0x00000010

023f67dc <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
 23f67dc:	b509      	push	{r0, r3, lr}
 23f67de:	4804      	ldr	r0, [pc, #16]	; (23f67f0 <hal_i2c_lock+0x14>)
 23f67e0:	6800      	ldr	r0, [r0, #0]
 23f67e2:	4b04      	ldr	r3, [pc, #16]	; (23f67f4 <hal_i2c_lock+0x18>)
 23f67e4:	4403      	add	r3, r0
 23f67e6:	681b      	ldr	r3, [r3, #0]
 23f67e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f67ea:	9302      	str	r3, [sp, #8]
 23f67ec:	bd09      	pop	{r0, r3, pc}
 23f67ee:	0000      	.short	0x0000
 23f67f0:	1006a0e0 	.word	0x1006a0e0
 23f67f4:	00000010 	.word	0x00000010

023f67f8 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
 23f67f8:	b509      	push	{r0, r3, lr}
 23f67fa:	4804      	ldr	r0, [pc, #16]	; (23f680c <hal_i2c_unlock+0x14>)
 23f67fc:	6800      	ldr	r0, [r0, #0]
 23f67fe:	4b04      	ldr	r3, [pc, #16]	; (23f6810 <hal_i2c_unlock+0x18>)
 23f6800:	4403      	add	r3, r0
 23f6802:	681b      	ldr	r3, [r3, #0]
 23f6804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f6806:	9302      	str	r3, [sp, #8]
 23f6808:	bd09      	pop	{r0, r3, pc}
 23f680a:	0000      	.short	0x0000
 23f680c:	1006a0e0 	.word	0x1006a0e0
 23f6810:	00000010 	.word	0x00000010

023f6814 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 23f6814:	b509      	push	{r0, r3, lr}
 23f6816:	4804      	ldr	r0, [pc, #16]	; (23f6828 <hal_i2c_request_ex+0x14>)
 23f6818:	6800      	ldr	r0, [r0, #0]
 23f681a:	4b04      	ldr	r3, [pc, #16]	; (23f682c <hal_i2c_request_ex+0x18>)
 23f681c:	4403      	add	r3, r0
 23f681e:	681b      	ldr	r3, [r3, #0]
 23f6820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23f6822:	9302      	str	r3, [sp, #8]
 23f6824:	bd09      	pop	{r0, r3, pc}
 23f6826:	0000      	.short	0x0000
 23f6828:	1006a0e0 	.word	0x1006a0e0
 23f682c:	00000010 	.word	0x00000010

023f6830 <hal_i2c_transaction>:
DYNALIB_FN(21, hal_i2c, hal_i2c_sleep, int(hal_i2c_interface_t i2c, bool sleep, void* reserved))
DYNALIB_FN(22, hal_i2c, hal_i2c_end_transmission_ext, int(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(23, hal_i2c, hal_i2c_transaction, int(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, const hal_i2c_transmission_config_t*, void*))
 23f6830:	b509      	push	{r0, r3, lr}
 23f6832:	4804      	ldr	r0, [pc, #16]	; (23f6844 <hal_i2c_transaction+0x14>)
 23f6834:	6800      	ldr	r0, [r0, #0]
 23f6836:	4b04      	ldr	r3, [pc, #16]	; (23f6848 <hal_i2c_transaction+0x18>)
 23f6838:	4403      	add	r3, r0
 23f683a:	681b      	ldr	r3, [r3, #0]
 23f683c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23f683e:	9302      	str	r3, [sp, #8]
 23f6840:	bd09      	pop	{r0, r3, pc}
 23f6842:	0000      	.short	0x0000
 23f6844:	1006a0e0 	.word	0x1006a0e0
 23f6848:	00000010 	.word	0x00000010

023f684c <if_get_by_index>:
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
 23f684c:	b509      	push	{r0, r3, lr}
 23f684e:	4804      	ldr	r0, [pc, #16]	; (23f6860 <if_get_by_index+0x14>)
 23f6850:	6800      	ldr	r0, [r0, #0]
 23f6852:	4b04      	ldr	r3, [pc, #16]	; (23f6864 <if_get_by_index+0x18>)
 23f6854:	4403      	add	r3, r0
 23f6856:	681b      	ldr	r3, [r3, #0]
 23f6858:	699b      	ldr	r3, [r3, #24]
 23f685a:	9302      	str	r3, [sp, #8]
 23f685c:	bd09      	pop	{r0, r3, pc}
 23f685e:	0000      	.short	0x0000
 23f6860:	1006a0e0 	.word	0x1006a0e0
 23f6864:	00000054 	.word	0x00000054

023f6868 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23f6868:	b509      	push	{r0, r3, lr}
 23f686a:	4804      	ldr	r0, [pc, #16]	; (23f687c <inet_inet_ntop+0x14>)
 23f686c:	6800      	ldr	r0, [r0, #0]
 23f686e:	4b04      	ldr	r3, [pc, #16]	; (23f6880 <inet_inet_ntop+0x18>)
 23f6870:	4403      	add	r3, r0
 23f6872:	681b      	ldr	r3, [r3, #0]
 23f6874:	695b      	ldr	r3, [r3, #20]
 23f6876:	9302      	str	r3, [sp, #8]
 23f6878:	bd09      	pop	{r0, r3, pc}
 23f687a:	0000      	.short	0x0000
 23f687c:	1006a0e0 	.word	0x1006a0e0
 23f6880:	0000004c 	.word	0x0000004c

023f6884 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23f6884:	b509      	push	{r0, r3, lr}
 23f6886:	4804      	ldr	r0, [pc, #16]	; (23f6898 <netdb_freeaddrinfo+0x14>)
 23f6888:	6800      	ldr	r0, [r0, #0]
 23f688a:	4b04      	ldr	r3, [pc, #16]	; (23f689c <netdb_freeaddrinfo+0x18>)
 23f688c:	4403      	add	r3, r0
 23f688e:	681b      	ldr	r3, [r3, #0]
 23f6890:	689b      	ldr	r3, [r3, #8]
 23f6892:	9302      	str	r3, [sp, #8]
 23f6894:	bd09      	pop	{r0, r3, pc}
 23f6896:	0000      	.short	0x0000
 23f6898:	1006a0e0 	.word	0x1006a0e0
 23f689c:	00000050 	.word	0x00000050

023f68a0 <netdb_getaddrinfo_ex>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
DYNALIB_FN(4, hal_netdb, netdb_getnameinfo, int(const struct sockaddr*, socklen_t, char*, socklen_t, char*, socklen_t, int))
DYNALIB_FN(5, hal_netdb, netdb_getaddrinfo_ex, int(const char*, const char*, const struct addrinfo*, struct addrinfo**, if_t))
 23f68a0:	b509      	push	{r0, r3, lr}
 23f68a2:	4804      	ldr	r0, [pc, #16]	; (23f68b4 <netdb_getaddrinfo_ex+0x14>)
 23f68a4:	6800      	ldr	r0, [r0, #0]
 23f68a6:	4b04      	ldr	r3, [pc, #16]	; (23f68b8 <netdb_getaddrinfo_ex+0x18>)
 23f68a8:	4403      	add	r3, r0
 23f68aa:	681b      	ldr	r3, [r3, #0]
 23f68ac:	695b      	ldr	r3, [r3, #20]
 23f68ae:	9302      	str	r3, [sp, #8]
 23f68b0:	bd09      	pop	{r0, r3, pc}
 23f68b2:	0000      	.short	0x0000
 23f68b4:	1006a0e0 	.word	0x1006a0e0
 23f68b8:	00000050 	.word	0x00000050

023f68bc <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 23f68bc:	b509      	push	{r0, r3, lr}
 23f68be:	4804      	ldr	r0, [pc, #16]	; (23f68d0 <hal_spi_begin+0x14>)
 23f68c0:	6800      	ldr	r0, [r0, #0]
 23f68c2:	4b04      	ldr	r3, [pc, #16]	; (23f68d4 <hal_spi_begin+0x18>)
 23f68c4:	4403      	add	r3, r0
 23f68c6:	681b      	ldr	r3, [r3, #0]
 23f68c8:	681b      	ldr	r3, [r3, #0]
 23f68ca:	9302      	str	r3, [sp, #8]
 23f68cc:	bd09      	pop	{r0, r3, pc}
 23f68ce:	0000      	.short	0x0000
 23f68d0:	1006a0e0 	.word	0x1006a0e0
 23f68d4:	00000018 	.word	0x00000018

023f68d8 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
 23f68d8:	b509      	push	{r0, r3, lr}
 23f68da:	4804      	ldr	r0, [pc, #16]	; (23f68ec <hal_spi_end+0x14>)
 23f68dc:	6800      	ldr	r0, [r0, #0]
 23f68de:	4b04      	ldr	r3, [pc, #16]	; (23f68f0 <hal_spi_end+0x18>)
 23f68e0:	4403      	add	r3, r0
 23f68e2:	681b      	ldr	r3, [r3, #0]
 23f68e4:	685b      	ldr	r3, [r3, #4]
 23f68e6:	9302      	str	r3, [sp, #8]
 23f68e8:	bd09      	pop	{r0, r3, pc}
 23f68ea:	0000      	.short	0x0000
 23f68ec:	1006a0e0 	.word	0x1006a0e0
 23f68f0:	00000018 	.word	0x00000018

023f68f4 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 23f68f4:	b509      	push	{r0, r3, lr}
 23f68f6:	4804      	ldr	r0, [pc, #16]	; (23f6908 <hal_spi_transfer+0x14>)
 23f68f8:	6800      	ldr	r0, [r0, #0]
 23f68fa:	4b04      	ldr	r3, [pc, #16]	; (23f690c <hal_spi_transfer+0x18>)
 23f68fc:	4403      	add	r3, r0
 23f68fe:	681b      	ldr	r3, [r3, #0]
 23f6900:	695b      	ldr	r3, [r3, #20]
 23f6902:	9302      	str	r3, [sp, #8]
 23f6904:	bd09      	pop	{r0, r3, pc}
 23f6906:	0000      	.short	0x0000
 23f6908:	1006a0e0 	.word	0x1006a0e0
 23f690c:	00000018 	.word	0x00000018

023f6910 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23f6910:	b509      	push	{r0, r3, lr}
 23f6912:	4804      	ldr	r0, [pc, #16]	; (23f6924 <hal_spi_init+0x14>)
 23f6914:	6800      	ldr	r0, [r0, #0]
 23f6916:	4b04      	ldr	r3, [pc, #16]	; (23f6928 <hal_spi_init+0x18>)
 23f6918:	4403      	add	r3, r0
 23f691a:	681b      	ldr	r3, [r3, #0]
 23f691c:	69db      	ldr	r3, [r3, #28]
 23f691e:	9302      	str	r3, [sp, #8]
 23f6920:	bd09      	pop	{r0, r3, pc}
 23f6922:	0000      	.short	0x0000
 23f6924:	1006a0e0 	.word	0x1006a0e0
 23f6928:	00000018 	.word	0x00000018

023f692c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23f692c:	b509      	push	{r0, r3, lr}
 23f692e:	4804      	ldr	r0, [pc, #16]	; (23f6940 <hal_spi_is_enabled+0x14>)
 23f6930:	6800      	ldr	r0, [r0, #0]
 23f6932:	4b04      	ldr	r3, [pc, #16]	; (23f6944 <hal_spi_is_enabled+0x18>)
 23f6934:	4403      	add	r3, r0
 23f6936:	681b      	ldr	r3, [r3, #0]
 23f6938:	6a1b      	ldr	r3, [r3, #32]
 23f693a:	9302      	str	r3, [sp, #8]
 23f693c:	bd09      	pop	{r0, r3, pc}
 23f693e:	0000      	.short	0x0000
 23f6940:	1006a0e0 	.word	0x1006a0e0
 23f6944:	00000018 	.word	0x00000018

023f6948 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 23f6948:	b509      	push	{r0, r3, lr}
 23f694a:	4804      	ldr	r0, [pc, #16]	; (23f695c <hal_spi_info+0x14>)
 23f694c:	6800      	ldr	r0, [r0, #0]
 23f694e:	4b04      	ldr	r3, [pc, #16]	; (23f6960 <hal_spi_info+0x18>)
 23f6950:	4403      	add	r3, r0
 23f6952:	681b      	ldr	r3, [r3, #0]
 23f6954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f6956:	9302      	str	r3, [sp, #8]
 23f6958:	bd09      	pop	{r0, r3, pc}
 23f695a:	0000      	.short	0x0000
 23f695c:	1006a0e0 	.word	0x1006a0e0
 23f6960:	00000018 	.word	0x00000018

023f6964 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
 23f6964:	b509      	push	{r0, r3, lr}
 23f6966:	4804      	ldr	r0, [pc, #16]	; (23f6978 <hal_spi_transfer_dma+0x14>)
 23f6968:	6800      	ldr	r0, [r0, #0]
 23f696a:	4b04      	ldr	r3, [pc, #16]	; (23f697c <hal_spi_transfer_dma+0x18>)
 23f696c:	4403      	add	r3, r0
 23f696e:	681b      	ldr	r3, [r3, #0]
 23f6970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f6972:	9302      	str	r3, [sp, #8]
 23f6974:	bd09      	pop	{r0, r3, pc}
 23f6976:	0000      	.short	0x0000
 23f6978:	1006a0e0 	.word	0x1006a0e0
 23f697c:	00000018 	.word	0x00000018

023f6980 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 23f6980:	b509      	push	{r0, r3, lr}
 23f6982:	4804      	ldr	r0, [pc, #16]	; (23f6994 <hal_spi_transfer_dma_status+0x14>)
 23f6984:	6800      	ldr	r0, [r0, #0]
 23f6986:	4b04      	ldr	r3, [pc, #16]	; (23f6998 <hal_spi_transfer_dma_status+0x18>)
 23f6988:	4403      	add	r3, r0
 23f698a:	681b      	ldr	r3, [r3, #0]
 23f698c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23f698e:	9302      	str	r3, [sp, #8]
 23f6990:	bd09      	pop	{r0, r3, pc}
 23f6992:	0000      	.short	0x0000
 23f6994:	1006a0e0 	.word	0x1006a0e0
 23f6998:	00000018 	.word	0x00000018

023f699c <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 23f699c:	b509      	push	{r0, r3, lr}
 23f699e:	4804      	ldr	r0, [pc, #16]	; (23f69b0 <hal_spi_set_settings+0x14>)
 23f69a0:	6800      	ldr	r0, [r0, #0]
 23f69a2:	4b04      	ldr	r3, [pc, #16]	; (23f69b4 <hal_spi_set_settings+0x18>)
 23f69a4:	4403      	add	r3, r0
 23f69a6:	681b      	ldr	r3, [r3, #0]
 23f69a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f69aa:	9302      	str	r3, [sp, #8]
 23f69ac:	bd09      	pop	{r0, r3, pc}
 23f69ae:	0000      	.short	0x0000
 23f69b0:	1006a0e0 	.word	0x1006a0e0
 23f69b4:	00000018 	.word	0x00000018

023f69b8 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23f69b8:	b509      	push	{r0, r3, lr}
 23f69ba:	4804      	ldr	r0, [pc, #16]	; (23f69cc <hal_spi_acquire+0x14>)
 23f69bc:	6800      	ldr	r0, [r0, #0]
 23f69be:	4b04      	ldr	r3, [pc, #16]	; (23f69d0 <hal_spi_acquire+0x18>)
 23f69c0:	4403      	add	r3, r0
 23f69c2:	681b      	ldr	r3, [r3, #0]
 23f69c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f69c6:	9302      	str	r3, [sp, #8]
 23f69c8:	bd09      	pop	{r0, r3, pc}
 23f69ca:	0000      	.short	0x0000
 23f69cc:	1006a0e0 	.word	0x1006a0e0
 23f69d0:	00000018 	.word	0x00000018

023f69d4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23f69d4:	b509      	push	{r0, r3, lr}
 23f69d6:	4804      	ldr	r0, [pc, #16]	; (23f69e8 <hal_spi_release+0x14>)
 23f69d8:	6800      	ldr	r0, [r0, #0]
 23f69da:	4b04      	ldr	r3, [pc, #16]	; (23f69ec <hal_spi_release+0x18>)
 23f69dc:	4403      	add	r3, r0
 23f69de:	681b      	ldr	r3, [r3, #0]
 23f69e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f69e2:	9302      	str	r3, [sp, #8]
 23f69e4:	bd09      	pop	{r0, r3, pc}
 23f69e6:	0000      	.short	0x0000
 23f69e8:	1006a0e0 	.word	0x1006a0e0
 23f69ec:	00000018 	.word	0x00000018

023f69f0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23f69f0:	b509      	push	{r0, r3, lr}
 23f69f2:	4804      	ldr	r0, [pc, #16]	; (23f6a04 <hal_usart_write+0x14>)
 23f69f4:	6800      	ldr	r0, [r0, #0]
 23f69f6:	4b04      	ldr	r3, [pc, #16]	; (23f6a08 <hal_usart_write+0x18>)
 23f69f8:	4403      	add	r3, r0
 23f69fa:	681b      	ldr	r3, [r3, #0]
 23f69fc:	68db      	ldr	r3, [r3, #12]
 23f69fe:	9302      	str	r3, [sp, #8]
 23f6a00:	bd09      	pop	{r0, r3, pc}
 23f6a02:	0000      	.short	0x0000
 23f6a04:	1006a0e0 	.word	0x1006a0e0
 23f6a08:	00000024 	.word	0x00000024

023f6a0c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23f6a0c:	b509      	push	{r0, r3, lr}
 23f6a0e:	4804      	ldr	r0, [pc, #16]	; (23f6a20 <hal_usart_available+0x14>)
 23f6a10:	6800      	ldr	r0, [r0, #0]
 23f6a12:	4b04      	ldr	r3, [pc, #16]	; (23f6a24 <hal_usart_available+0x18>)
 23f6a14:	4403      	add	r3, r0
 23f6a16:	681b      	ldr	r3, [r3, #0]
 23f6a18:	691b      	ldr	r3, [r3, #16]
 23f6a1a:	9302      	str	r3, [sp, #8]
 23f6a1c:	bd09      	pop	{r0, r3, pc}
 23f6a1e:	0000      	.short	0x0000
 23f6a20:	1006a0e0 	.word	0x1006a0e0
 23f6a24:	00000024 	.word	0x00000024

023f6a28 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23f6a28:	b509      	push	{r0, r3, lr}
 23f6a2a:	4804      	ldr	r0, [pc, #16]	; (23f6a3c <hal_usart_read+0x14>)
 23f6a2c:	6800      	ldr	r0, [r0, #0]
 23f6a2e:	4b04      	ldr	r3, [pc, #16]	; (23f6a40 <hal_usart_read+0x18>)
 23f6a30:	4403      	add	r3, r0
 23f6a32:	681b      	ldr	r3, [r3, #0]
 23f6a34:	695b      	ldr	r3, [r3, #20]
 23f6a36:	9302      	str	r3, [sp, #8]
 23f6a38:	bd09      	pop	{r0, r3, pc}
 23f6a3a:	0000      	.short	0x0000
 23f6a3c:	1006a0e0 	.word	0x1006a0e0
 23f6a40:	00000024 	.word	0x00000024

023f6a44 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23f6a44:	b509      	push	{r0, r3, lr}
 23f6a46:	4804      	ldr	r0, [pc, #16]	; (23f6a58 <hal_usart_peek+0x14>)
 23f6a48:	6800      	ldr	r0, [r0, #0]
 23f6a4a:	4b04      	ldr	r3, [pc, #16]	; (23f6a5c <hal_usart_peek+0x18>)
 23f6a4c:	4403      	add	r3, r0
 23f6a4e:	681b      	ldr	r3, [r3, #0]
 23f6a50:	699b      	ldr	r3, [r3, #24]
 23f6a52:	9302      	str	r3, [sp, #8]
 23f6a54:	bd09      	pop	{r0, r3, pc}
 23f6a56:	0000      	.short	0x0000
 23f6a58:	1006a0e0 	.word	0x1006a0e0
 23f6a5c:	00000024 	.word	0x00000024

023f6a60 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23f6a60:	b509      	push	{r0, r3, lr}
 23f6a62:	4804      	ldr	r0, [pc, #16]	; (23f6a74 <hal_usart_flush+0x14>)
 23f6a64:	6800      	ldr	r0, [r0, #0]
 23f6a66:	4b04      	ldr	r3, [pc, #16]	; (23f6a78 <hal_usart_flush+0x18>)
 23f6a68:	4403      	add	r3, r0
 23f6a6a:	681b      	ldr	r3, [r3, #0]
 23f6a6c:	69db      	ldr	r3, [r3, #28]
 23f6a6e:	9302      	str	r3, [sp, #8]
 23f6a70:	bd09      	pop	{r0, r3, pc}
 23f6a72:	0000      	.short	0x0000
 23f6a74:	1006a0e0 	.word	0x1006a0e0
 23f6a78:	00000024 	.word	0x00000024

023f6a7c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23f6a7c:	b509      	push	{r0, r3, lr}
 23f6a7e:	4804      	ldr	r0, [pc, #16]	; (23f6a90 <hal_usart_is_enabled+0x14>)
 23f6a80:	6800      	ldr	r0, [r0, #0]
 23f6a82:	4b04      	ldr	r3, [pc, #16]	; (23f6a94 <hal_usart_is_enabled+0x18>)
 23f6a84:	4403      	add	r3, r0
 23f6a86:	681b      	ldr	r3, [r3, #0]
 23f6a88:	6a1b      	ldr	r3, [r3, #32]
 23f6a8a:	9302      	str	r3, [sp, #8]
 23f6a8c:	bd09      	pop	{r0, r3, pc}
 23f6a8e:	0000      	.short	0x0000
 23f6a90:	1006a0e0 	.word	0x1006a0e0
 23f6a94:	00000024 	.word	0x00000024

023f6a98 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23f6a98:	b509      	push	{r0, r3, lr}
 23f6a9a:	4804      	ldr	r0, [pc, #16]	; (23f6aac <hal_usart_available_data_for_write+0x14>)
 23f6a9c:	6800      	ldr	r0, [r0, #0]
 23f6a9e:	4b04      	ldr	r3, [pc, #16]	; (23f6ab0 <hal_usart_available_data_for_write+0x18>)
 23f6aa0:	4403      	add	r3, r0
 23f6aa2:	681b      	ldr	r3, [r3, #0]
 23f6aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f6aa6:	9302      	str	r3, [sp, #8]
 23f6aa8:	bd09      	pop	{r0, r3, pc}
 23f6aaa:	0000      	.short	0x0000
 23f6aac:	1006a0e0 	.word	0x1006a0e0
 23f6ab0:	00000024 	.word	0x00000024

023f6ab4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23f6ab4:	b509      	push	{r0, r3, lr}
 23f6ab6:	4804      	ldr	r0, [pc, #16]	; (23f6ac8 <hal_usart_init_ex+0x14>)
 23f6ab8:	6800      	ldr	r0, [r0, #0]
 23f6aba:	4b04      	ldr	r3, [pc, #16]	; (23f6acc <hal_usart_init_ex+0x18>)
 23f6abc:	4403      	add	r3, r0
 23f6abe:	681b      	ldr	r3, [r3, #0]
 23f6ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f6ac2:	9302      	str	r3, [sp, #8]
 23f6ac4:	bd09      	pop	{r0, r3, pc}
 23f6ac6:	0000      	.short	0x0000
 23f6ac8:	1006a0e0 	.word	0x1006a0e0
 23f6acc:	00000024 	.word	0x00000024

023f6ad0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23f6ad0:	b509      	push	{r0, r3, lr}
 23f6ad2:	4804      	ldr	r0, [pc, #16]	; (23f6ae4 <HAL_USB_USART_Init+0x14>)
 23f6ad4:	6800      	ldr	r0, [r0, #0]
 23f6ad6:	4b04      	ldr	r3, [pc, #16]	; (23f6ae8 <HAL_USB_USART_Init+0x18>)
 23f6ad8:	4403      	add	r3, r0
 23f6ada:	681b      	ldr	r3, [r3, #0]
 23f6adc:	681b      	ldr	r3, [r3, #0]
 23f6ade:	9302      	str	r3, [sp, #8]
 23f6ae0:	bd09      	pop	{r0, r3, pc}
 23f6ae2:	0000      	.short	0x0000
 23f6ae4:	1006a0e0 	.word	0x1006a0e0
 23f6ae8:	00000034 	.word	0x00000034

023f6aec <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23f6aec:	b509      	push	{r0, r3, lr}
 23f6aee:	4804      	ldr	r0, [pc, #16]	; (23f6b00 <HAL_USB_USART_Begin+0x14>)
 23f6af0:	6800      	ldr	r0, [r0, #0]
 23f6af2:	4b04      	ldr	r3, [pc, #16]	; (23f6b04 <HAL_USB_USART_Begin+0x18>)
 23f6af4:	4403      	add	r3, r0
 23f6af6:	681b      	ldr	r3, [r3, #0]
 23f6af8:	685b      	ldr	r3, [r3, #4]
 23f6afa:	9302      	str	r3, [sp, #8]
 23f6afc:	bd09      	pop	{r0, r3, pc}
 23f6afe:	0000      	.short	0x0000
 23f6b00:	1006a0e0 	.word	0x1006a0e0
 23f6b04:	00000034 	.word	0x00000034

023f6b08 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN_WRAP(4, hal_usb, HAL_USB_USART_Available_Data, protected, int32_t(HAL_USB_USART_Serial))
 23f6b08:	b509      	push	{r0, r3, lr}
 23f6b0a:	4804      	ldr	r0, [pc, #16]	; (23f6b1c <HAL_USB_USART_Available_Data+0x14>)
 23f6b0c:	6800      	ldr	r0, [r0, #0]
 23f6b0e:	4b04      	ldr	r3, [pc, #16]	; (23f6b20 <HAL_USB_USART_Available_Data+0x18>)
 23f6b10:	4403      	add	r3, r0
 23f6b12:	681b      	ldr	r3, [r3, #0]
 23f6b14:	691b      	ldr	r3, [r3, #16]
 23f6b16:	9302      	str	r3, [sp, #8]
 23f6b18:	bd09      	pop	{r0, r3, pc}
 23f6b1a:	0000      	.short	0x0000
 23f6b1c:	1006a0e0 	.word	0x1006a0e0
 23f6b20:	00000034 	.word	0x00000034

023f6b24 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN_WRAP(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, protected, int32_t(HAL_USB_USART_Serial))
 23f6b24:	b509      	push	{r0, r3, lr}
 23f6b26:	4804      	ldr	r0, [pc, #16]	; (23f6b38 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23f6b28:	6800      	ldr	r0, [r0, #0]
 23f6b2a:	4b04      	ldr	r3, [pc, #16]	; (23f6b3c <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23f6b2c:	4403      	add	r3, r0
 23f6b2e:	681b      	ldr	r3, [r3, #0]
 23f6b30:	695b      	ldr	r3, [r3, #20]
 23f6b32:	9302      	str	r3, [sp, #8]
 23f6b34:	bd09      	pop	{r0, r3, pc}
 23f6b36:	0000      	.short	0x0000
 23f6b38:	1006a0e0 	.word	0x1006a0e0
 23f6b3c:	00000034 	.word	0x00000034

023f6b40 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN_WRAP(6, hal_usb, HAL_USB_USART_Receive_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f6b40:	b509      	push	{r0, r3, lr}
 23f6b42:	4804      	ldr	r0, [pc, #16]	; (23f6b54 <HAL_USB_USART_Receive_Data+0x14>)
 23f6b44:	6800      	ldr	r0, [r0, #0]
 23f6b46:	4b04      	ldr	r3, [pc, #16]	; (23f6b58 <HAL_USB_USART_Receive_Data+0x18>)
 23f6b48:	4403      	add	r3, r0
 23f6b4a:	681b      	ldr	r3, [r3, #0]
 23f6b4c:	699b      	ldr	r3, [r3, #24]
 23f6b4e:	9302      	str	r3, [sp, #8]
 23f6b50:	bd09      	pop	{r0, r3, pc}
 23f6b52:	0000      	.short	0x0000
 23f6b54:	1006a0e0 	.word	0x1006a0e0
 23f6b58:	00000034 	.word	0x00000034

023f6b5c <HAL_USB_USART_Send_Data>:
DYNALIB_FN_WRAP(7, hal_usb, HAL_USB_USART_Send_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f6b5c:	b509      	push	{r0, r3, lr}
 23f6b5e:	4804      	ldr	r0, [pc, #16]	; (23f6b70 <HAL_USB_USART_Send_Data+0x14>)
 23f6b60:	6800      	ldr	r0, [r0, #0]
 23f6b62:	4b04      	ldr	r3, [pc, #16]	; (23f6b74 <HAL_USB_USART_Send_Data+0x18>)
 23f6b64:	4403      	add	r3, r0
 23f6b66:	681b      	ldr	r3, [r3, #0]
 23f6b68:	69db      	ldr	r3, [r3, #28]
 23f6b6a:	9302      	str	r3, [sp, #8]
 23f6b6c:	bd09      	pop	{r0, r3, pc}
 23f6b6e:	0000      	.short	0x0000
 23f6b70:	1006a0e0 	.word	0x1006a0e0
 23f6b74:	00000034 	.word	0x00000034

023f6b78 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN_WRAP(8, hal_usb, HAL_USB_USART_Flush_Data, protected, void(HAL_USB_USART_Serial))
 23f6b78:	b509      	push	{r0, r3, lr}
 23f6b7a:	4804      	ldr	r0, [pc, #16]	; (23f6b8c <HAL_USB_USART_Flush_Data+0x14>)
 23f6b7c:	6800      	ldr	r0, [r0, #0]
 23f6b7e:	4b04      	ldr	r3, [pc, #16]	; (23f6b90 <HAL_USB_USART_Flush_Data+0x18>)
 23f6b80:	4403      	add	r3, r0
 23f6b82:	681b      	ldr	r3, [r3, #0]
 23f6b84:	6a1b      	ldr	r3, [r3, #32]
 23f6b86:	9302      	str	r3, [sp, #8]
 23f6b88:	bd09      	pop	{r0, r3, pc}
 23f6b8a:	0000      	.short	0x0000
 23f6b8c:	1006a0e0 	.word	0x1006a0e0
 23f6b90:	00000034 	.word	0x00000034

023f6b94 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 23f6b94:	b509      	push	{r0, r3, lr}
 23f6b96:	4804      	ldr	r0, [pc, #16]	; (23f6ba8 <HAL_USB_USART_Is_Connected+0x14>)
 23f6b98:	6800      	ldr	r0, [r0, #0]
 23f6b9a:	4b04      	ldr	r3, [pc, #16]	; (23f6bac <HAL_USB_USART_Is_Connected+0x18>)
 23f6b9c:	4403      	add	r3, r0
 23f6b9e:	681b      	ldr	r3, [r3, #0]
 23f6ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f6ba2:	9302      	str	r3, [sp, #8]
 23f6ba4:	bd09      	pop	{r0, r3, pc}
 23f6ba6:	0000      	.short	0x0000
 23f6ba8:	1006a0e0 	.word	0x1006a0e0
 23f6bac:	00000034 	.word	0x00000034

023f6bb0 <hal_watchdog_set_config>:

#if HAL_PLATFORM_HW_WATCHDOG

DYNALIB_BEGIN(hal_watchdog)

DYNALIB_FN(0, hal_watchdog, hal_watchdog_set_config, int(hal_watchdog_instance_t, const hal_watchdog_config_t*, void*))
 23f6bb0:	b509      	push	{r0, r3, lr}
 23f6bb2:	4804      	ldr	r0, [pc, #16]	; (23f6bc4 <hal_watchdog_set_config+0x14>)
 23f6bb4:	6800      	ldr	r0, [r0, #0]
 23f6bb6:	4b04      	ldr	r3, [pc, #16]	; (23f6bc8 <hal_watchdog_set_config+0x18>)
 23f6bb8:	4403      	add	r3, r0
 23f6bba:	681b      	ldr	r3, [r3, #0]
 23f6bbc:	681b      	ldr	r3, [r3, #0]
 23f6bbe:	9302      	str	r3, [sp, #8]
 23f6bc0:	bd09      	pop	{r0, r3, pc}
 23f6bc2:	0000      	.short	0x0000
 23f6bc4:	1006a0e0 	.word	0x1006a0e0
 23f6bc8:	00000070 	.word	0x00000070

023f6bcc <hal_watchdog_start>:
DYNALIB_FN(1, hal_watchdog, hal_watchdog_on_expired_callback, int(hal_watchdog_instance_t, hal_watchdog_on_expired_callback_t, void*, void*))
DYNALIB_FN(2, hal_watchdog, hal_watchdog_start, int(hal_watchdog_instance_t, void*))
 23f6bcc:	b509      	push	{r0, r3, lr}
 23f6bce:	4804      	ldr	r0, [pc, #16]	; (23f6be0 <hal_watchdog_start+0x14>)
 23f6bd0:	6800      	ldr	r0, [r0, #0]
 23f6bd2:	4b04      	ldr	r3, [pc, #16]	; (23f6be4 <hal_watchdog_start+0x18>)
 23f6bd4:	4403      	add	r3, r0
 23f6bd6:	681b      	ldr	r3, [r3, #0]
 23f6bd8:	689b      	ldr	r3, [r3, #8]
 23f6bda:	9302      	str	r3, [sp, #8]
 23f6bdc:	bd09      	pop	{r0, r3, pc}
 23f6bde:	0000      	.short	0x0000
 23f6be0:	1006a0e0 	.word	0x1006a0e0
 23f6be4:	00000070 	.word	0x00000070

023f6be8 <hal_watchdog_refresh>:
DYNALIB_FN(3, hal_watchdog, hal_watchdog_stop, int(hal_watchdog_instance_t, void*))
DYNALIB_FN(4, hal_watchdog, hal_watchdog_refresh, int(hal_watchdog_instance_t, void*))
 23f6be8:	b509      	push	{r0, r3, lr}
 23f6bea:	4804      	ldr	r0, [pc, #16]	; (23f6bfc <hal_watchdog_refresh+0x14>)
 23f6bec:	6800      	ldr	r0, [r0, #0]
 23f6bee:	4b04      	ldr	r3, [pc, #16]	; (23f6c00 <hal_watchdog_refresh+0x18>)
 23f6bf0:	4403      	add	r3, r0
 23f6bf2:	681b      	ldr	r3, [r3, #0]
 23f6bf4:	691b      	ldr	r3, [r3, #16]
 23f6bf6:	9302      	str	r3, [sp, #8]
 23f6bf8:	bd09      	pop	{r0, r3, pc}
 23f6bfa:	0000      	.short	0x0000
 23f6bfc:	1006a0e0 	.word	0x1006a0e0
 23f6c00:	00000070 	.word	0x00000070

023f6c04 <wlan_get_credentials>:
#endif
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
DYNALIB_FN(21, hal_wlan, wlan_set_ipaddress, void(const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, void*))
DYNALIB_FN(22, hal_wlan, wlan_set_ipaddress_source, void(IPAddressSource, bool, void*))
DYNALIB_FN(23, hal_wlan, wlan_scan, int(wlan_scan_result_t, void*))
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
 23f6c04:	b509      	push	{r0, r3, lr}
 23f6c06:	4804      	ldr	r0, [pc, #16]	; (23f6c18 <wlan_get_credentials+0x14>)
 23f6c08:	6800      	ldr	r0, [r0, #0]
 23f6c0a:	4b04      	ldr	r3, [pc, #16]	; (23f6c1c <wlan_get_credentials+0x18>)
 23f6c0c:	4403      	add	r3, r0
 23f6c0e:	681b      	ldr	r3, [r3, #0]
 23f6c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 23f6c12:	9302      	str	r3, [sp, #8]
 23f6c14:	bd09      	pop	{r0, r3, pc}
 23f6c16:	0000      	.short	0x0000
 23f6c18:	1006a0e0 	.word	0x1006a0e0
 23f6c1c:	0000005c 	.word	0x0000005c

023f6c20 <wlan_connected_info>:
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
 23f6c20:	b509      	push	{r0, r3, lr}
 23f6c22:	4804      	ldr	r0, [pc, #16]	; (23f6c34 <wlan_connected_info+0x14>)
 23f6c24:	6800      	ldr	r0, [r0, #0]
 23f6c26:	4b04      	ldr	r3, [pc, #16]	; (23f6c38 <wlan_connected_info+0x18>)
 23f6c28:	4403      	add	r3, r0
 23f6c2a:	681b      	ldr	r3, [r3, #0]
 23f6c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 23f6c2e:	9302      	str	r3, [sp, #8]
 23f6c30:	bd09      	pop	{r0, r3, pc}
 23f6c32:	0000      	.short	0x0000
 23f6c34:	1006a0e0 	.word	0x1006a0e0
 23f6c38:	0000005c 	.word	0x0000005c

023f6c3c <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23f6c3c:	b509      	push	{r0, r3, lr}
 23f6c3e:	4804      	ldr	r0, [pc, #16]	; (23f6c50 <log_message_v+0x14>)
 23f6c40:	6800      	ldr	r0, [r0, #0]
 23f6c42:	4b04      	ldr	r3, [pc, #16]	; (23f6c54 <log_message_v+0x18>)
 23f6c44:	4403      	add	r3, r0
 23f6c46:	681b      	ldr	r3, [r3, #0]
 23f6c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f6c4a:	9302      	str	r3, [sp, #8]
 23f6c4c:	bd09      	pop	{r0, r3, pc}
 23f6c4e:	0000      	.short	0x0000
 23f6c50:	1006a0e0 	.word	0x1006a0e0
 23f6c54:	00000048 	.word	0x00000048

023f6c58 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
 23f6c58:	b509      	push	{r0, r3, lr}
 23f6c5a:	4804      	ldr	r0, [pc, #16]	; (23f6c6c <diag_get_source+0x14>)
 23f6c5c:	6800      	ldr	r0, [r0, #0]
 23f6c5e:	4b04      	ldr	r3, [pc, #16]	; (23f6c70 <diag_get_source+0x18>)
 23f6c60:	4403      	add	r3, r0
 23f6c62:	681b      	ldr	r3, [r3, #0]
 23f6c64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 23f6c68:	9302      	str	r3, [sp, #8]
 23f6c6a:	bd09      	pop	{r0, r3, pc}
 23f6c6c:	1006a0e0 	.word	0x1006a0e0
 23f6c70:	00000048 	.word	0x00000048

023f6c74 <panic_ext>:
DYNALIB_FN(48, services, devicetree_tree_lock, int(void*))
DYNALIB_FN(49, services, devicetree_tree_get, int(void*, uint32_t, void*))
DYNALIB_FN(50, services, devicetree_string_dictionary_lookup, const char*(uint32_t, void*))
DYNALIB_FN(51, services, devicetree_hash_string, uint32_t(const char*, size_t))
DYNALIB_FN(52, services, security_mode_get, int(void*))
DYNALIB_FN(53, services, panic_ext, void(const PanicData*, void*))
 23f6c74:	b509      	push	{r0, r3, lr}
 23f6c76:	4804      	ldr	r0, [pc, #16]	; (23f6c88 <panic_ext+0x14>)
 23f6c78:	6800      	ldr	r0, [r0, #0]
 23f6c7a:	4b04      	ldr	r3, [pc, #16]	; (23f6c8c <panic_ext+0x18>)
 23f6c7c:	4403      	add	r3, r0
 23f6c7e:	681b      	ldr	r3, [r3, #0]
 23f6c80:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 23f6c84:	9302      	str	r3, [sp, #8]
 23f6c86:	bd09      	pop	{r0, r3, pc}
 23f6c88:	1006a0e0 	.word	0x1006a0e0
 23f6c8c:	00000048 	.word	0x00000048

023f6c90 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 23f6c90:	b509      	push	{r0, r3, lr}
 23f6c92:	4804      	ldr	r0, [pc, #16]	; (23f6ca4 <system_mode+0x14>)
 23f6c94:	6800      	ldr	r0, [r0, #0]
 23f6c96:	4b04      	ldr	r3, [pc, #16]	; (23f6ca8 <system_mode+0x18>)
 23f6c98:	4403      	add	r3, r0
 23f6c9a:	681b      	ldr	r3, [r3, #0]
 23f6c9c:	681b      	ldr	r3, [r3, #0]
 23f6c9e:	9302      	str	r3, [sp, #8]
 23f6ca0:	bd09      	pop	{r0, r3, pc}
 23f6ca2:	0000      	.short	0x0000
 23f6ca4:	1006a0e0 	.word	0x1006a0e0
 23f6ca8:	00000008 	.word	0x00000008

023f6cac <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23f6cac:	b509      	push	{r0, r3, lr}
 23f6cae:	4804      	ldr	r0, [pc, #16]	; (23f6cc0 <set_system_mode+0x14>)
 23f6cb0:	6800      	ldr	r0, [r0, #0]
 23f6cb2:	4b04      	ldr	r3, [pc, #16]	; (23f6cc4 <set_system_mode+0x18>)
 23f6cb4:	4403      	add	r3, r0
 23f6cb6:	681b      	ldr	r3, [r3, #0]
 23f6cb8:	685b      	ldr	r3, [r3, #4]
 23f6cba:	9302      	str	r3, [sp, #8]
 23f6cbc:	bd09      	pop	{r0, r3, pc}
 23f6cbe:	0000      	.short	0x0000
 23f6cc0:	1006a0e0 	.word	0x1006a0e0
 23f6cc4:	00000008 	.word	0x00000008

023f6cc8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler_deprecated, void(void*))
DYNALIB_FN(3, system, system_firmwareUpdate_deprecated, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer_deprecated, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23f6cc8:	b509      	push	{r0, r3, lr}
 23f6cca:	4804      	ldr	r0, [pc, #16]	; (23f6cdc <system_delay_ms+0x14>)
 23f6ccc:	6800      	ldr	r0, [r0, #0]
 23f6cce:	4b04      	ldr	r3, [pc, #16]	; (23f6ce0 <system_delay_ms+0x18>)
 23f6cd0:	4403      	add	r3, r0
 23f6cd2:	681b      	ldr	r3, [r3, #0]
 23f6cd4:	695b      	ldr	r3, [r3, #20]
 23f6cd6:	9302      	str	r3, [sp, #8]
 23f6cd8:	bd09      	pop	{r0, r3, pc}
 23f6cda:	0000      	.short	0x0000
 23f6cdc:	1006a0e0 	.word	0x1006a0e0
 23f6ce0:	00000008 	.word	0x00000008

023f6ce4 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
 23f6ce4:	b509      	push	{r0, r3, lr}
 23f6ce6:	4804      	ldr	r0, [pc, #16]	; (23f6cf8 <system_subscribe_event+0x14>)
 23f6ce8:	6800      	ldr	r0, [r0, #0]
 23f6cea:	4b04      	ldr	r3, [pc, #16]	; (23f6cfc <system_subscribe_event+0x18>)
 23f6cec:	4403      	add	r3, r0
 23f6cee:	681b      	ldr	r3, [r3, #0]
 23f6cf0:	6a1b      	ldr	r3, [r3, #32]
 23f6cf2:	9302      	str	r3, [sp, #8]
 23f6cf4:	bd09      	pop	{r0, r3, pc}
 23f6cf6:	0000      	.short	0x0000
 23f6cf8:	1006a0e0 	.word	0x1006a0e0
 23f6cfc:	00000008 	.word	0x00000008

023f6d00 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23f6d00:	b509      	push	{r0, r3, lr}
 23f6d02:	4804      	ldr	r0, [pc, #16]	; (23f6d14 <system_thread_set_state+0x14>)
 23f6d04:	6800      	ldr	r0, [r0, #0]
 23f6d06:	4b04      	ldr	r3, [pc, #16]	; (23f6d18 <system_thread_set_state+0x18>)
 23f6d08:	4403      	add	r3, r0
 23f6d0a:	681b      	ldr	r3, [r3, #0]
 23f6d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f6d0e:	9302      	str	r3, [sp, #8]
 23f6d10:	bd09      	pop	{r0, r3, pc}
 23f6d12:	0000      	.short	0x0000
 23f6d14:	1006a0e0 	.word	0x1006a0e0
 23f6d18:	00000008 	.word	0x00000008

023f6d1c <system_version_info>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
 23f6d1c:	b509      	push	{r0, r3, lr}
 23f6d1e:	4804      	ldr	r0, [pc, #16]	; (23f6d30 <system_version_info+0x14>)
 23f6d20:	6800      	ldr	r0, [r0, #0]
 23f6d22:	4b04      	ldr	r3, [pc, #16]	; (23f6d34 <system_version_info+0x18>)
 23f6d24:	4403      	add	r3, r0
 23f6d26:	681b      	ldr	r3, [r3, #0]
 23f6d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f6d2a:	9302      	str	r3, [sp, #8]
 23f6d2c:	bd09      	pop	{r0, r3, pc}
 23f6d2e:	0000      	.short	0x0000
 23f6d30:	1006a0e0 	.word	0x1006a0e0
 23f6d34:	00000008 	.word	0x00000008

023f6d38 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN_WRAP(16, system, Spark_Prepare_For_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN_WRAP(17, system, Spark_Save_Firmware_Chunk, protected, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN_WRAP(18, system, Spark_Finish_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 23f6d38:	b509      	push	{r0, r3, lr}
 23f6d3a:	4804      	ldr	r0, [pc, #16]	; (23f6d4c <application_thread_current+0x14>)
 23f6d3c:	6800      	ldr	r0, [r0, #0]
 23f6d3e:	4b04      	ldr	r3, [pc, #16]	; (23f6d50 <application_thread_current+0x18>)
 23f6d40:	4403      	add	r3, r0
 23f6d42:	681b      	ldr	r3, [r3, #0]
 23f6d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f6d46:	9302      	str	r3, [sp, #8]
 23f6d48:	bd09      	pop	{r0, r3, pc}
 23f6d4a:	0000      	.short	0x0000
 23f6d4c:	1006a0e0 	.word	0x1006a0e0
 23f6d50:	00000008 	.word	0x00000008

023f6d54 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 23f6d54:	b509      	push	{r0, r3, lr}
 23f6d56:	4804      	ldr	r0, [pc, #16]	; (23f6d68 <application_thread_invoke+0x14>)
 23f6d58:	6800      	ldr	r0, [r0, #0]
 23f6d5a:	4b04      	ldr	r3, [pc, #16]	; (23f6d6c <application_thread_invoke+0x18>)
 23f6d5c:	4403      	add	r3, r0
 23f6d5e:	681b      	ldr	r3, [r3, #0]
 23f6d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f6d62:	9302      	str	r3, [sp, #8]
 23f6d64:	bd09      	pop	{r0, r3, pc}
 23f6d66:	0000      	.short	0x0000
 23f6d68:	1006a0e0 	.word	0x1006a0e0
 23f6d6c:	00000008 	.word	0x00000008

023f6d70 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 23f6d70:	b509      	push	{r0, r3, lr}
 23f6d72:	4804      	ldr	r0, [pc, #16]	; (23f6d84 <system_thread_get_state+0x14>)
 23f6d74:	6800      	ldr	r0, [r0, #0]
 23f6d76:	4b04      	ldr	r3, [pc, #16]	; (23f6d88 <system_thread_get_state+0x18>)
 23f6d78:	4403      	add	r3, r0
 23f6d7a:	681b      	ldr	r3, [r3, #0]
 23f6d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f6d7e:	9302      	str	r3, [sp, #8]
 23f6d80:	bd09      	pop	{r0, r3, pc}
 23f6d82:	0000      	.short	0x0000
 23f6d84:	1006a0e0 	.word	0x1006a0e0
 23f6d88:	00000008 	.word	0x00000008

023f6d8c <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
 23f6d8c:	b509      	push	{r0, r3, lr}
 23f6d8e:	4804      	ldr	r0, [pc, #16]	; (23f6da0 <system_notify_time_changed+0x14>)
 23f6d90:	6800      	ldr	r0, [r0, #0]
 23f6d92:	4b04      	ldr	r3, [pc, #16]	; (23f6da4 <system_notify_time_changed+0x18>)
 23f6d94:	4403      	add	r3, r0
 23f6d96:	681b      	ldr	r3, [r3, #0]
 23f6d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23f6d9a:	9302      	str	r3, [sp, #8]
 23f6d9c:	bd09      	pop	{r0, r3, pc}
 23f6d9e:	0000      	.short	0x0000
 23f6da0:	1006a0e0 	.word	0x1006a0e0
 23f6da4:	00000008 	.word	0x00000008

023f6da8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23f6da8:	b509      	push	{r0, r3, lr}
 23f6daa:	4804      	ldr	r0, [pc, #16]	; (23f6dbc <system_ctrl_set_app_request_handler+0x14>)
 23f6dac:	6800      	ldr	r0, [r0, #0]
 23f6dae:	4b04      	ldr	r3, [pc, #16]	; (23f6dc0 <system_ctrl_set_app_request_handler+0x18>)
 23f6db0:	4403      	add	r3, r0
 23f6db2:	681b      	ldr	r3, [r3, #0]
 23f6db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23f6db8:	9302      	str	r3, [sp, #8]
 23f6dba:	bd09      	pop	{r0, r3, pc}
 23f6dbc:	1006a0e0 	.word	0x1006a0e0
 23f6dc0:	00000008 	.word	0x00000008

023f6dc4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23f6dc4:	b509      	push	{r0, r3, lr}
 23f6dc6:	4804      	ldr	r0, [pc, #16]	; (23f6dd8 <system_ctrl_set_result+0x14>)
 23f6dc8:	6800      	ldr	r0, [r0, #0]
 23f6dca:	4b04      	ldr	r3, [pc, #16]	; (23f6ddc <system_ctrl_set_result+0x18>)
 23f6dcc:	4403      	add	r3, r0
 23f6dce:	681b      	ldr	r3, [r3, #0]
 23f6dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23f6dd4:	9302      	str	r3, [sp, #8]
 23f6dd6:	bd09      	pop	{r0, r3, pc}
 23f6dd8:	1006a0e0 	.word	0x1006a0e0
 23f6ddc:	00000008 	.word	0x00000008

023f6de0 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
 23f6de0:	b509      	push	{r0, r3, lr}
 23f6de2:	4804      	ldr	r0, [pc, #16]	; (23f6df4 <system_power_management_set_config+0x14>)
 23f6de4:	6800      	ldr	r0, [r0, #0]
 23f6de6:	4b04      	ldr	r3, [pc, #16]	; (23f6df8 <system_power_management_set_config+0x18>)
 23f6de8:	4403      	add	r3, r0
 23f6dea:	681b      	ldr	r3, [r3, #0]
 23f6dec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 23f6df0:	9302      	str	r3, [sp, #8]
 23f6df2:	bd09      	pop	{r0, r3, pc}
 23f6df4:	1006a0e0 	.word	0x1006a0e0
 23f6df8:	00000008 	.word	0x00000008

023f6dfc <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 23f6dfc:	b509      	push	{r0, r3, lr}
 23f6dfe:	4804      	ldr	r0, [pc, #16]	; (23f6e10 <system_reset+0x14>)
 23f6e00:	6800      	ldr	r0, [r0, #0]
 23f6e02:	4b04      	ldr	r3, [pc, #16]	; (23f6e14 <system_reset+0x18>)
 23f6e04:	4403      	add	r3, r0
 23f6e06:	681b      	ldr	r3, [r3, #0]
 23f6e08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 23f6e0c:	9302      	str	r3, [sp, #8]
 23f6e0e:	bd09      	pop	{r0, r3, pc}
 23f6e10:	1006a0e0 	.word	0x1006a0e0
 23f6e14:	00000008 	.word	0x00000008

023f6e18 <system_power_management_get_config>:

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX1 + 2, system, system_power_management_get_config, int(hal_power_config*, void*))
 23f6e18:	b509      	push	{r0, r3, lr}
 23f6e1a:	4804      	ldr	r0, [pc, #16]	; (23f6e2c <system_power_management_get_config+0x14>)
 23f6e1c:	6800      	ldr	r0, [r0, #0]
 23f6e1e:	4b04      	ldr	r3, [pc, #16]	; (23f6e30 <system_power_management_get_config+0x18>)
 23f6e20:	4403      	add	r3, r0
 23f6e22:	681b      	ldr	r3, [r3, #0]
 23f6e24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 23f6e28:	9302      	str	r3, [sp, #8]
 23f6e2a:	bd09      	pop	{r0, r3, pc}
 23f6e2c:	1006a0e0 	.word	0x1006a0e0
 23f6e30:	00000008 	.word	0x00000008

023f6e34 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 23f6e34:	b509      	push	{r0, r3, lr}
 23f6e36:	4804      	ldr	r0, [pc, #16]	; (23f6e48 <spark_function+0x14>)
 23f6e38:	6800      	ldr	r0, [r0, #0]
 23f6e3a:	4b04      	ldr	r3, [pc, #16]	; (23f6e4c <spark_function+0x18>)
 23f6e3c:	4403      	add	r3, r0
 23f6e3e:	681b      	ldr	r3, [r3, #0]
 23f6e40:	685b      	ldr	r3, [r3, #4]
 23f6e42:	9302      	str	r3, [sp, #8]
 23f6e44:	bd09      	pop	{r0, r3, pc}
 23f6e46:	0000      	.short	0x0000
 23f6e48:	1006a0e0 	.word	0x1006a0e0
 23f6e4c:	0000002c 	.word	0x0000002c

023f6e50 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23f6e50:	b509      	push	{r0, r3, lr}
 23f6e52:	4804      	ldr	r0, [pc, #16]	; (23f6e64 <spark_process+0x14>)
 23f6e54:	6800      	ldr	r0, [r0, #0]
 23f6e56:	4b04      	ldr	r3, [pc, #16]	; (23f6e68 <spark_process+0x18>)
 23f6e58:	4403      	add	r3, r0
 23f6e5a:	681b      	ldr	r3, [r3, #0]
 23f6e5c:	689b      	ldr	r3, [r3, #8]
 23f6e5e:	9302      	str	r3, [sp, #8]
 23f6e60:	bd09      	pop	{r0, r3, pc}
 23f6e62:	0000      	.short	0x0000
 23f6e64:	1006a0e0 	.word	0x1006a0e0
 23f6e68:	0000002c 	.word	0x0000002c

023f6e6c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 23f6e6c:	b509      	push	{r0, r3, lr}
 23f6e6e:	4804      	ldr	r0, [pc, #16]	; (23f6e80 <spark_cloud_flag_connect+0x14>)
 23f6e70:	6800      	ldr	r0, [r0, #0]
 23f6e72:	4b04      	ldr	r3, [pc, #16]	; (23f6e84 <spark_cloud_flag_connect+0x18>)
 23f6e74:	4403      	add	r3, r0
 23f6e76:	681b      	ldr	r3, [r3, #0]
 23f6e78:	68db      	ldr	r3, [r3, #12]
 23f6e7a:	9302      	str	r3, [sp, #8]
 23f6e7c:	bd09      	pop	{r0, r3, pc}
 23f6e7e:	0000      	.short	0x0000
 23f6e80:	1006a0e0 	.word	0x1006a0e0
 23f6e84:	0000002c 	.word	0x0000002c

023f6e88 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 23f6e88:	b509      	push	{r0, r3, lr}
 23f6e8a:	4804      	ldr	r0, [pc, #16]	; (23f6e9c <spark_cloud_flag_connected+0x14>)
 23f6e8c:	6800      	ldr	r0, [r0, #0]
 23f6e8e:	4b04      	ldr	r3, [pc, #16]	; (23f6ea0 <spark_cloud_flag_connected+0x18>)
 23f6e90:	4403      	add	r3, r0
 23f6e92:	681b      	ldr	r3, [r3, #0]
 23f6e94:	695b      	ldr	r3, [r3, #20]
 23f6e96:	9302      	str	r3, [sp, #8]
 23f6e98:	bd09      	pop	{r0, r3, pc}
 23f6e9a:	0000      	.short	0x0000
 23f6e9c:	1006a0e0 	.word	0x1006a0e0
 23f6ea0:	0000002c 	.word	0x0000002c

023f6ea4 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 23f6ea4:	b509      	push	{r0, r3, lr}
 23f6ea6:	4804      	ldr	r0, [pc, #16]	; (23f6eb8 <spark_deviceID+0x14>)
 23f6ea8:	6800      	ldr	r0, [r0, #0]
 23f6eaa:	4b04      	ldr	r3, [pc, #16]	; (23f6ebc <spark_deviceID+0x18>)
 23f6eac:	4403      	add	r3, r0
 23f6eae:	681b      	ldr	r3, [r3, #0]
 23f6eb0:	69db      	ldr	r3, [r3, #28]
 23f6eb2:	9302      	str	r3, [sp, #8]
 23f6eb4:	bd09      	pop	{r0, r3, pc}
 23f6eb6:	0000      	.short	0x0000
 23f6eb8:	1006a0e0 	.word	0x1006a0e0
 23f6ebc:	0000002c 	.word	0x0000002c

023f6ec0 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 23f6ec0:	b509      	push	{r0, r3, lr}
 23f6ec2:	4804      	ldr	r0, [pc, #16]	; (23f6ed4 <spark_send_event+0x14>)
 23f6ec4:	6800      	ldr	r0, [r0, #0]
 23f6ec6:	4b04      	ldr	r3, [pc, #16]	; (23f6ed8 <spark_send_event+0x18>)
 23f6ec8:	4403      	add	r3, r0
 23f6eca:	681b      	ldr	r3, [r3, #0]
 23f6ecc:	6a1b      	ldr	r3, [r3, #32]
 23f6ece:	9302      	str	r3, [sp, #8]
 23f6ed0:	bd09      	pop	{r0, r3, pc}
 23f6ed2:	0000      	.short	0x0000
 23f6ed4:	1006a0e0 	.word	0x1006a0e0
 23f6ed8:	0000002c 	.word	0x0000002c

023f6edc <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, spark_subscribe_param*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 23f6edc:	b509      	push	{r0, r3, lr}
 23f6ede:	4804      	ldr	r0, [pc, #16]	; (23f6ef0 <spark_sync_time+0x14>)
 23f6ee0:	6800      	ldr	r0, [r0, #0]
 23f6ee2:	4b04      	ldr	r3, [pc, #16]	; (23f6ef4 <spark_sync_time+0x18>)
 23f6ee4:	4403      	add	r3, r0
 23f6ee6:	681b      	ldr	r3, [r3, #0]
 23f6ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f6eea:	9302      	str	r3, [sp, #8]
 23f6eec:	bd09      	pop	{r0, r3, pc}
 23f6eee:	0000      	.short	0x0000
 23f6ef0:	1006a0e0 	.word	0x1006a0e0
 23f6ef4:	0000002c 	.word	0x0000002c

023f6ef8 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 23f6ef8:	b509      	push	{r0, r3, lr}
 23f6efa:	4804      	ldr	r0, [pc, #16]	; (23f6f0c <spark_sync_time_pending+0x14>)
 23f6efc:	6800      	ldr	r0, [r0, #0]
 23f6efe:	4b04      	ldr	r3, [pc, #16]	; (23f6f10 <spark_sync_time_pending+0x18>)
 23f6f00:	4403      	add	r3, r0
 23f6f02:	681b      	ldr	r3, [r3, #0]
 23f6f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f6f06:	9302      	str	r3, [sp, #8]
 23f6f08:	bd09      	pop	{r0, r3, pc}
 23f6f0a:	0000      	.short	0x0000
 23f6f0c:	1006a0e0 	.word	0x1006a0e0
 23f6f10:	0000002c 	.word	0x0000002c

023f6f14 <spark_set_connection_property>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
 23f6f14:	b509      	push	{r0, r3, lr}
 23f6f16:	4804      	ldr	r0, [pc, #16]	; (23f6f28 <spark_set_connection_property+0x14>)
 23f6f18:	6800      	ldr	r0, [r0, #0]
 23f6f1a:	4b04      	ldr	r3, [pc, #16]	; (23f6f2c <spark_set_connection_property+0x18>)
 23f6f1c:	4403      	add	r3, r0
 23f6f1e:	681b      	ldr	r3, [r3, #0]
 23f6f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23f6f22:	9302      	str	r3, [sp, #8]
 23f6f24:	bd09      	pop	{r0, r3, pc}
 23f6f26:	0000      	.short	0x0000
 23f6f28:	1006a0e0 	.word	0x1006a0e0
 23f6f2c:	0000002c 	.word	0x0000002c

023f6f30 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23f6f30:	b509      	push	{r0, r3, lr}
 23f6f32:	4804      	ldr	r0, [pc, #16]	; (23f6f44 <spark_set_random_seed_from_cloud_handler+0x14>)
 23f6f34:	6800      	ldr	r0, [r0, #0]
 23f6f36:	4b04      	ldr	r3, [pc, #16]	; (23f6f48 <spark_set_random_seed_from_cloud_handler+0x18>)
 23f6f38:	4403      	add	r3, r0
 23f6f3a:	681b      	ldr	r3, [r3, #0]
 23f6f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f6f3e:	9302      	str	r3, [sp, #8]
 23f6f40:	bd09      	pop	{r0, r3, pc}
 23f6f42:	0000      	.short	0x0000
 23f6f44:	1006a0e0 	.word	0x1006a0e0
 23f6f48:	0000002c 	.word	0x0000002c

023f6f4c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 23f6f4c:	b509      	push	{r0, r3, lr}
 23f6f4e:	4804      	ldr	r0, [pc, #16]	; (23f6f60 <spark_cloud_disconnect+0x14>)
 23f6f50:	6800      	ldr	r0, [r0, #0]
 23f6f52:	4b04      	ldr	r3, [pc, #16]	; (23f6f64 <spark_cloud_disconnect+0x18>)
 23f6f54:	4403      	add	r3, r0
 23f6f56:	681b      	ldr	r3, [r3, #0]
 23f6f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f6f5a:	9302      	str	r3, [sp, #8]
 23f6f5c:	bd09      	pop	{r0, r3, pc}
 23f6f5e:	0000      	.short	0x0000
 23f6f60:	1006a0e0 	.word	0x1006a0e0
 23f6f64:	0000002c 	.word	0x0000002c

023f6f68 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 23f6f68:	b509      	push	{r0, r3, lr}
 23f6f6a:	4804      	ldr	r0, [pc, #16]	; (23f6f7c <network_config+0x14>)
 23f6f6c:	6800      	ldr	r0, [r0, #0]
 23f6f6e:	4b04      	ldr	r3, [pc, #16]	; (23f6f80 <network_config+0x18>)
 23f6f70:	4403      	add	r3, r0
 23f6f72:	681b      	ldr	r3, [r3, #0]
 23f6f74:	681b      	ldr	r3, [r3, #0]
 23f6f76:	9302      	str	r3, [sp, #8]
 23f6f78:	bd09      	pop	{r0, r3, pc}
 23f6f7a:	0000      	.short	0x0000
 23f6f7c:	1006a0e0 	.word	0x1006a0e0
 23f6f80:	00000028 	.word	0x00000028

023f6f84 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23f6f84:	b509      	push	{r0, r3, lr}
 23f6f86:	4804      	ldr	r0, [pc, #16]	; (23f6f98 <network_connect+0x14>)
 23f6f88:	6800      	ldr	r0, [r0, #0]
 23f6f8a:	4b04      	ldr	r3, [pc, #16]	; (23f6f9c <network_connect+0x18>)
 23f6f8c:	4403      	add	r3, r0
 23f6f8e:	681b      	ldr	r3, [r3, #0]
 23f6f90:	685b      	ldr	r3, [r3, #4]
 23f6f92:	9302      	str	r3, [sp, #8]
 23f6f94:	bd09      	pop	{r0, r3, pc}
 23f6f96:	0000      	.short	0x0000
 23f6f98:	1006a0e0 	.word	0x1006a0e0
 23f6f9c:	00000028 	.word	0x00000028

023f6fa0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23f6fa0:	b509      	push	{r0, r3, lr}
 23f6fa2:	4804      	ldr	r0, [pc, #16]	; (23f6fb4 <network_connecting+0x14>)
 23f6fa4:	6800      	ldr	r0, [r0, #0]
 23f6fa6:	4b04      	ldr	r3, [pc, #16]	; (23f6fb8 <network_connecting+0x18>)
 23f6fa8:	4403      	add	r3, r0
 23f6faa:	681b      	ldr	r3, [r3, #0]
 23f6fac:	689b      	ldr	r3, [r3, #8]
 23f6fae:	9302      	str	r3, [sp, #8]
 23f6fb0:	bd09      	pop	{r0, r3, pc}
 23f6fb2:	0000      	.short	0x0000
 23f6fb4:	1006a0e0 	.word	0x1006a0e0
 23f6fb8:	00000028 	.word	0x00000028

023f6fbc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23f6fbc:	b509      	push	{r0, r3, lr}
 23f6fbe:	4804      	ldr	r0, [pc, #16]	; (23f6fd0 <network_disconnect+0x14>)
 23f6fc0:	6800      	ldr	r0, [r0, #0]
 23f6fc2:	4b04      	ldr	r3, [pc, #16]	; (23f6fd4 <network_disconnect+0x18>)
 23f6fc4:	4403      	add	r3, r0
 23f6fc6:	681b      	ldr	r3, [r3, #0]
 23f6fc8:	68db      	ldr	r3, [r3, #12]
 23f6fca:	9302      	str	r3, [sp, #8]
 23f6fcc:	bd09      	pop	{r0, r3, pc}
 23f6fce:	0000      	.short	0x0000
 23f6fd0:	1006a0e0 	.word	0x1006a0e0
 23f6fd4:	00000028 	.word	0x00000028

023f6fd8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23f6fd8:	b509      	push	{r0, r3, lr}
 23f6fda:	4804      	ldr	r0, [pc, #16]	; (23f6fec <network_ready+0x14>)
 23f6fdc:	6800      	ldr	r0, [r0, #0]
 23f6fde:	4b04      	ldr	r3, [pc, #16]	; (23f6ff0 <network_ready+0x18>)
 23f6fe0:	4403      	add	r3, r0
 23f6fe2:	681b      	ldr	r3, [r3, #0]
 23f6fe4:	691b      	ldr	r3, [r3, #16]
 23f6fe6:	9302      	str	r3, [sp, #8]
 23f6fe8:	bd09      	pop	{r0, r3, pc}
 23f6fea:	0000      	.short	0x0000
 23f6fec:	1006a0e0 	.word	0x1006a0e0
 23f6ff0:	00000028 	.word	0x00000028

023f6ff4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23f6ff4:	b509      	push	{r0, r3, lr}
 23f6ff6:	4804      	ldr	r0, [pc, #16]	; (23f7008 <network_on+0x14>)
 23f6ff8:	6800      	ldr	r0, [r0, #0]
 23f6ffa:	4b04      	ldr	r3, [pc, #16]	; (23f700c <network_on+0x18>)
 23f6ffc:	4403      	add	r3, r0
 23f6ffe:	681b      	ldr	r3, [r3, #0]
 23f7000:	695b      	ldr	r3, [r3, #20]
 23f7002:	9302      	str	r3, [sp, #8]
 23f7004:	bd09      	pop	{r0, r3, pc}
 23f7006:	0000      	.short	0x0000
 23f7008:	1006a0e0 	.word	0x1006a0e0
 23f700c:	00000028 	.word	0x00000028

023f7010 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23f7010:	b509      	push	{r0, r3, lr}
 23f7012:	4804      	ldr	r0, [pc, #16]	; (23f7024 <network_off+0x14>)
 23f7014:	6800      	ldr	r0, [r0, #0]
 23f7016:	4b04      	ldr	r3, [pc, #16]	; (23f7028 <network_off+0x18>)
 23f7018:	4403      	add	r3, r0
 23f701a:	681b      	ldr	r3, [r3, #0]
 23f701c:	699b      	ldr	r3, [r3, #24]
 23f701e:	9302      	str	r3, [sp, #8]
 23f7020:	bd09      	pop	{r0, r3, pc}
 23f7022:	0000      	.short	0x0000
 23f7024:	1006a0e0 	.word	0x1006a0e0
 23f7028:	00000028 	.word	0x00000028

023f702c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23f702c:	b509      	push	{r0, r3, lr}
 23f702e:	4804      	ldr	r0, [pc, #16]	; (23f7040 <network_listen+0x14>)
 23f7030:	6800      	ldr	r0, [r0, #0]
 23f7032:	4b04      	ldr	r3, [pc, #16]	; (23f7044 <network_listen+0x18>)
 23f7034:	4403      	add	r3, r0
 23f7036:	681b      	ldr	r3, [r3, #0]
 23f7038:	69db      	ldr	r3, [r3, #28]
 23f703a:	9302      	str	r3, [sp, #8]
 23f703c:	bd09      	pop	{r0, r3, pc}
 23f703e:	0000      	.short	0x0000
 23f7040:	1006a0e0 	.word	0x1006a0e0
 23f7044:	00000028 	.word	0x00000028

023f7048 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23f7048:	b509      	push	{r0, r3, lr}
 23f704a:	4804      	ldr	r0, [pc, #16]	; (23f705c <network_listening+0x14>)
 23f704c:	6800      	ldr	r0, [r0, #0]
 23f704e:	4b04      	ldr	r3, [pc, #16]	; (23f7060 <network_listening+0x18>)
 23f7050:	4403      	add	r3, r0
 23f7052:	681b      	ldr	r3, [r3, #0]
 23f7054:	6a1b      	ldr	r3, [r3, #32]
 23f7056:	9302      	str	r3, [sp, #8]
 23f7058:	bd09      	pop	{r0, r3, pc}
 23f705a:	0000      	.short	0x0000
 23f705c:	1006a0e0 	.word	0x1006a0e0
 23f7060:	00000028 	.word	0x00000028

023f7064 <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
 23f7064:	b509      	push	{r0, r3, lr}
 23f7066:	4804      	ldr	r0, [pc, #16]	; (23f7078 <network_set_credentials+0x14>)
 23f7068:	6800      	ldr	r0, [r0, #0]
 23f706a:	4b04      	ldr	r3, [pc, #16]	; (23f707c <network_set_credentials+0x18>)
 23f706c:	4403      	add	r3, r0
 23f706e:	681b      	ldr	r3, [r3, #0]
 23f7070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f7072:	9302      	str	r3, [sp, #8]
 23f7074:	bd09      	pop	{r0, r3, pc}
 23f7076:	0000      	.short	0x0000
 23f7078:	1006a0e0 	.word	0x1006a0e0
 23f707c:	00000028 	.word	0x00000028

023f7080 <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
 23f7080:	b509      	push	{r0, r3, lr}
 23f7082:	4804      	ldr	r0, [pc, #16]	; (23f7094 <network_clear_credentials+0x14>)
 23f7084:	6800      	ldr	r0, [r0, #0]
 23f7086:	4b04      	ldr	r3, [pc, #16]	; (23f7098 <network_clear_credentials+0x18>)
 23f7088:	4403      	add	r3, r0
 23f708a:	681b      	ldr	r3, [r3, #0]
 23f708c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f708e:	9302      	str	r3, [sp, #8]
 23f7090:	bd09      	pop	{r0, r3, pc}
 23f7092:	0000      	.short	0x0000
 23f7094:	1006a0e0 	.word	0x1006a0e0
 23f7098:	00000028 	.word	0x00000028

023f709c <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23f709c:	b509      	push	{r0, r3, lr}
 23f709e:	4804      	ldr	r0, [pc, #16]	; (23f70b0 <network_set_listen_timeout+0x14>)
 23f70a0:	6800      	ldr	r0, [r0, #0]
 23f70a2:	4b04      	ldr	r3, [pc, #16]	; (23f70b4 <network_set_listen_timeout+0x18>)
 23f70a4:	4403      	add	r3, r0
 23f70a6:	681b      	ldr	r3, [r3, #0]
 23f70a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f70aa:	9302      	str	r3, [sp, #8]
 23f70ac:	bd09      	pop	{r0, r3, pc}
 23f70ae:	0000      	.short	0x0000
 23f70b0:	1006a0e0 	.word	0x1006a0e0
 23f70b4:	00000028 	.word	0x00000028

023f70b8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23f70b8:	b509      	push	{r0, r3, lr}
 23f70ba:	4804      	ldr	r0, [pc, #16]	; (23f70cc <network_get_listen_timeout+0x14>)
 23f70bc:	6800      	ldr	r0, [r0, #0]
 23f70be:	4b04      	ldr	r3, [pc, #16]	; (23f70d0 <network_get_listen_timeout+0x18>)
 23f70c0:	4403      	add	r3, r0
 23f70c2:	681b      	ldr	r3, [r3, #0]
 23f70c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f70c6:	9302      	str	r3, [sp, #8]
 23f70c8:	bd09      	pop	{r0, r3, pc}
 23f70ca:	0000      	.short	0x0000
 23f70cc:	1006a0e0 	.word	0x1006a0e0
 23f70d0:	00000028 	.word	0x00000028

023f70d4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23f70d4:	b509      	push	{r0, r3, lr}
 23f70d6:	4804      	ldr	r0, [pc, #16]	; (23f70e8 <network_is_on+0x14>)
 23f70d8:	6800      	ldr	r0, [r0, #0]
 23f70da:	4b04      	ldr	r3, [pc, #16]	; (23f70ec <network_is_on+0x18>)
 23f70dc:	4403      	add	r3, r0
 23f70de:	681b      	ldr	r3, [r3, #0]
 23f70e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f70e2:	9302      	str	r3, [sp, #8]
 23f70e4:	bd09      	pop	{r0, r3, pc}
 23f70e6:	0000      	.short	0x0000
 23f70e8:	1006a0e0 	.word	0x1006a0e0
 23f70ec:	00000028 	.word	0x00000028

023f70f0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23f70f0:	b509      	push	{r0, r3, lr}
 23f70f2:	4804      	ldr	r0, [pc, #16]	; (23f7104 <network_is_off+0x14>)
 23f70f4:	6800      	ldr	r0, [r0, #0]
 23f70f6:	4b04      	ldr	r3, [pc, #16]	; (23f7108 <network_is_off+0x18>)
 23f70f8:	4403      	add	r3, r0
 23f70fa:	681b      	ldr	r3, [r3, #0]
 23f70fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f70fe:	9302      	str	r3, [sp, #8]
 23f7100:	bd09      	pop	{r0, r3, pc}
 23f7102:	0000      	.short	0x0000
 23f7104:	1006a0e0 	.word	0x1006a0e0
 23f7108:	00000028 	.word	0x00000028

023f710c <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
 23f710c:	b509      	push	{r0, r3, lr}
 23f710e:	4804      	ldr	r0, [pc, #16]	; (23f7120 <network_prefer+0x14>)
 23f7110:	6800      	ldr	r0, [r0, #0]
 23f7112:	4b04      	ldr	r3, [pc, #16]	; (23f7124 <network_prefer+0x18>)
 23f7114:	4403      	add	r3, r0
 23f7116:	681b      	ldr	r3, [r3, #0]
 23f7118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f711a:	9302      	str	r3, [sp, #8]
 23f711c:	bd09      	pop	{r0, r3, pc}
 23f711e:	0000      	.short	0x0000
 23f7120:	1006a0e0 	.word	0x1006a0e0
 23f7124:	00000028 	.word	0x00000028

023f7128 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
 23f7128:	b509      	push	{r0, r3, lr}
 23f712a:	4804      	ldr	r0, [pc, #16]	; (23f713c <network_is_preferred+0x14>)
 23f712c:	6800      	ldr	r0, [r0, #0]
 23f712e:	4b04      	ldr	r3, [pc, #16]	; (23f7140 <network_is_preferred+0x18>)
 23f7130:	4403      	add	r3, r0
 23f7132:	681b      	ldr	r3, [r3, #0]
 23f7134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f7136:	9302      	str	r3, [sp, #8]
 23f7138:	bd09      	pop	{r0, r3, pc}
 23f713a:	0000      	.short	0x0000
 23f713c:	1006a0e0 	.word	0x1006a0e0
 23f7140:	00000028 	.word	0x00000028

023f7144 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || defined(DYNALIB_IMPORT)

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23f7144:	b509      	push	{r0, r3, lr}
 23f7146:	4804      	ldr	r0, [pc, #16]	; (23f7158 <malloc+0x14>)
 23f7148:	6800      	ldr	r0, [r0, #0]
 23f714a:	4b04      	ldr	r3, [pc, #16]	; (23f715c <malloc+0x18>)
 23f714c:	4403      	add	r3, r0
 23f714e:	681b      	ldr	r3, [r3, #0]
 23f7150:	681b      	ldr	r3, [r3, #0]
 23f7152:	9302      	str	r3, [sp, #8]
 23f7154:	bd09      	pop	{r0, r3, pc}
 23f7156:	0000      	.short	0x0000
 23f7158:	1006a0e0 	.word	0x1006a0e0
 23f715c:	00000004 	.word	0x00000004

023f7160 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23f7160:	b509      	push	{r0, r3, lr}
 23f7162:	4804      	ldr	r0, [pc, #16]	; (23f7174 <free+0x14>)
 23f7164:	6800      	ldr	r0, [r0, #0]
 23f7166:	4b04      	ldr	r3, [pc, #16]	; (23f7178 <free+0x18>)
 23f7168:	4403      	add	r3, r0
 23f716a:	681b      	ldr	r3, [r3, #0]
 23f716c:	685b      	ldr	r3, [r3, #4]
 23f716e:	9302      	str	r3, [sp, #8]
 23f7170:	bd09      	pop	{r0, r3, pc}
 23f7172:	0000      	.short	0x0000
 23f7174:	1006a0e0 	.word	0x1006a0e0
 23f7178:	00000004 	.word	0x00000004

023f717c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23f717c:	b509      	push	{r0, r3, lr}
 23f717e:	4804      	ldr	r0, [pc, #16]	; (23f7190 <realloc+0x14>)
 23f7180:	6800      	ldr	r0, [r0, #0]
 23f7182:	4b04      	ldr	r3, [pc, #16]	; (23f7194 <realloc+0x18>)
 23f7184:	4403      	add	r3, r0
 23f7186:	681b      	ldr	r3, [r3, #0]
 23f7188:	689b      	ldr	r3, [r3, #8]
 23f718a:	9302      	str	r3, [sp, #8]
 23f718c:	bd09      	pop	{r0, r3, pc}
 23f718e:	0000      	.short	0x0000
 23f7190:	1006a0e0 	.word	0x1006a0e0
 23f7194:	00000004 	.word	0x00000004

023f7198 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 23f7198:	b509      	push	{r0, r3, lr}
 23f719a:	4804      	ldr	r0, [pc, #16]	; (23f71ac <sprintf+0x14>)
 23f719c:	6800      	ldr	r0, [r0, #0]
 23f719e:	4b04      	ldr	r3, [pc, #16]	; (23f71b0 <sprintf+0x18>)
 23f71a0:	4403      	add	r3, r0
 23f71a2:	681b      	ldr	r3, [r3, #0]
 23f71a4:	68db      	ldr	r3, [r3, #12]
 23f71a6:	9302      	str	r3, [sp, #8]
 23f71a8:	bd09      	pop	{r0, r3, pc}
 23f71aa:	0000      	.short	0x0000
 23f71ac:	1006a0e0 	.word	0x1006a0e0
 23f71b0:	00000004 	.word	0x00000004

023f71b4 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 23f71b4:	b509      	push	{r0, r3, lr}
 23f71b6:	4804      	ldr	r0, [pc, #16]	; (23f71c8 <siprintf+0x14>)
 23f71b8:	6800      	ldr	r0, [r0, #0]
 23f71ba:	4b04      	ldr	r3, [pc, #16]	; (23f71cc <siprintf+0x18>)
 23f71bc:	4403      	add	r3, r0
 23f71be:	681b      	ldr	r3, [r3, #0]
 23f71c0:	691b      	ldr	r3, [r3, #16]
 23f71c2:	9302      	str	r3, [sp, #8]
 23f71c4:	bd09      	pop	{r0, r3, pc}
 23f71c6:	0000      	.short	0x0000
 23f71c8:	1006a0e0 	.word	0x1006a0e0
 23f71cc:	00000004 	.word	0x00000004

023f71d0 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
 23f71d0:	b509      	push	{r0, r3, lr}
 23f71d2:	4804      	ldr	r0, [pc, #16]	; (23f71e4 <sscanf+0x14>)
 23f71d4:	6800      	ldr	r0, [r0, #0]
 23f71d6:	4b04      	ldr	r3, [pc, #16]	; (23f71e8 <sscanf+0x18>)
 23f71d8:	4403      	add	r3, r0
 23f71da:	681b      	ldr	r3, [r3, #0]
 23f71dc:	695b      	ldr	r3, [r3, #20]
 23f71de:	9302      	str	r3, [sp, #8]
 23f71e0:	bd09      	pop	{r0, r3, pc}
 23f71e2:	0000      	.short	0x0000
 23f71e4:	1006a0e0 	.word	0x1006a0e0
 23f71e8:	00000004 	.word	0x00000004

023f71ec <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 23f71ec:	b509      	push	{r0, r3, lr}
 23f71ee:	4804      	ldr	r0, [pc, #16]	; (23f7200 <snprintf+0x14>)
 23f71f0:	6800      	ldr	r0, [r0, #0]
 23f71f2:	4b04      	ldr	r3, [pc, #16]	; (23f7204 <snprintf+0x18>)
 23f71f4:	4403      	add	r3, r0
 23f71f6:	681b      	ldr	r3, [r3, #0]
 23f71f8:	69db      	ldr	r3, [r3, #28]
 23f71fa:	9302      	str	r3, [sp, #8]
 23f71fc:	bd09      	pop	{r0, r3, pc}
 23f71fe:	0000      	.short	0x0000
 23f7200:	1006a0e0 	.word	0x1006a0e0
 23f7204:	00000004 	.word	0x00000004

023f7208 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23f7208:	b509      	push	{r0, r3, lr}
 23f720a:	4804      	ldr	r0, [pc, #16]	; (23f721c <vsnprintf+0x14>)
 23f720c:	6800      	ldr	r0, [r0, #0]
 23f720e:	4b04      	ldr	r3, [pc, #16]	; (23f7220 <vsnprintf+0x18>)
 23f7210:	4403      	add	r3, r0
 23f7212:	681b      	ldr	r3, [r3, #0]
 23f7214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f7216:	9302      	str	r3, [sp, #8]
 23f7218:	bd09      	pop	{r0, r3, pc}
 23f721a:	0000      	.short	0x0000
 23f721c:	1006a0e0 	.word	0x1006a0e0
 23f7220:	00000004 	.word	0x00000004

023f7224 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23f7224:	b509      	push	{r0, r3, lr}
 23f7226:	4804      	ldr	r0, [pc, #16]	; (23f7238 <abort+0x14>)
 23f7228:	6800      	ldr	r0, [r0, #0]
 23f722a:	4b04      	ldr	r3, [pc, #16]	; (23f723c <abort+0x18>)
 23f722c:	4403      	add	r3, r0
 23f722e:	681b      	ldr	r3, [r3, #0]
 23f7230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f7232:	9302      	str	r3, [sp, #8]
 23f7234:	bd09      	pop	{r0, r3, pc}
 23f7236:	0000      	.short	0x0000
 23f7238:	1006a0e0 	.word	0x1006a0e0
 23f723c:	00000004 	.word	0x00000004

023f7240 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23f7240:	b509      	push	{r0, r3, lr}
 23f7242:	4804      	ldr	r0, [pc, #16]	; (23f7254 <_malloc_r+0x14>)
 23f7244:	6800      	ldr	r0, [r0, #0]
 23f7246:	4b04      	ldr	r3, [pc, #16]	; (23f7258 <_malloc_r+0x18>)
 23f7248:	4403      	add	r3, r0
 23f724a:	681b      	ldr	r3, [r3, #0]
 23f724c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f724e:	9302      	str	r3, [sp, #8]
 23f7250:	bd09      	pop	{r0, r3, pc}
 23f7252:	0000      	.short	0x0000
 23f7254:	1006a0e0 	.word	0x1006a0e0
 23f7258:	00000004 	.word	0x00000004

023f725c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23f725c:	b509      	push	{r0, r3, lr}
 23f725e:	4804      	ldr	r0, [pc, #16]	; (23f7270 <__errno+0x14>)
 23f7260:	6800      	ldr	r0, [r0, #0]
 23f7262:	4b04      	ldr	r3, [pc, #16]	; (23f7274 <__errno+0x18>)
 23f7264:	4403      	add	r3, r0
 23f7266:	681b      	ldr	r3, [r3, #0]
 23f7268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f726a:	9302      	str	r3, [sp, #8]
 23f726c:	bd09      	pop	{r0, r3, pc}
 23f726e:	0000      	.short	0x0000
 23f7270:	1006a0e0 	.word	0x1006a0e0
 23f7274:	00000004 	.word	0x00000004

023f7278 <__assert_func>:

#if defined(DYNALIB_EXPORT) || defined(DYNALIB_IMPORT)
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23f7278:	b509      	push	{r0, r3, lr}
 23f727a:	4804      	ldr	r0, [pc, #16]	; (23f728c <__assert_func+0x14>)
 23f727c:	6800      	ldr	r0, [r0, #0]
 23f727e:	4b04      	ldr	r3, [pc, #16]	; (23f7290 <__assert_func+0x18>)
 23f7280:	4403      	add	r3, r0
 23f7282:	681b      	ldr	r3, [r3, #0]
 23f7284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f7286:	9302      	str	r3, [sp, #8]
 23f7288:	bd09      	pop	{r0, r3, pc}
 23f728a:	0000      	.short	0x0000
 23f728c:	1006a0e0 	.word	0x1006a0e0
 23f7290:	00000004 	.word	0x00000004

023f7294 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23f7294:	b509      	push	{r0, r3, lr}
 23f7296:	4804      	ldr	r0, [pc, #16]	; (23f72a8 <newlib_impure_ptr_callback+0x14>)
 23f7298:	6800      	ldr	r0, [r0, #0]
 23f729a:	4b04      	ldr	r3, [pc, #16]	; (23f72ac <newlib_impure_ptr_callback+0x18>)
 23f729c:	4403      	add	r3, r0
 23f729e:	681b      	ldr	r3, [r3, #0]
 23f72a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f72a2:	9302      	str	r3, [sp, #8]
 23f72a4:	bd09      	pop	{r0, r3, pc}
 23f72a6:	0000      	.short	0x0000
 23f72a8:	1006a0e0 	.word	0x1006a0e0
 23f72ac:	00000004 	.word	0x00000004

023f72b0 <strftime>:

DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
 23f72b0:	b509      	push	{r0, r3, lr}
 23f72b2:	4804      	ldr	r0, [pc, #16]	; (23f72c4 <strftime+0x14>)
 23f72b4:	6800      	ldr	r0, [r0, #0]
 23f72b6:	4b04      	ldr	r3, [pc, #16]	; (23f72c8 <strftime+0x18>)
 23f72b8:	4403      	add	r3, r0
 23f72ba:	681b      	ldr	r3, [r3, #0]
 23f72bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f72be:	9302      	str	r3, [sp, #8]
 23f72c0:	bd09      	pop	{r0, r3, pc}
 23f72c2:	0000      	.short	0x0000
 23f72c4:	1006a0e0 	.word	0x1006a0e0
 23f72c8:	00000004 	.word	0x00000004

023f72cc <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
 23f72cc:	b509      	push	{r0, r3, lr}
 23f72ce:	4804      	ldr	r0, [pc, #16]	; (23f72e0 <localtime_r+0x14>)
 23f72d0:	6800      	ldr	r0, [r0, #0]
 23f72d2:	4b04      	ldr	r3, [pc, #16]	; (23f72e4 <localtime_r+0x18>)
 23f72d4:	4403      	add	r3, r0
 23f72d6:	681b      	ldr	r3, [r3, #0]
 23f72d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f72da:	9302      	str	r3, [sp, #8]
 23f72dc:	bd09      	pop	{r0, r3, pc}
 23f72de:	0000      	.short	0x0000
 23f72e0:	1006a0e0 	.word	0x1006a0e0
 23f72e4:	00000004 	.word	0x00000004

023f72e8 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
 23f72e8:	b509      	push	{r0, r3, lr}
 23f72ea:	4804      	ldr	r0, [pc, #16]	; (23f72fc <gmtime_r+0x14>)
 23f72ec:	6800      	ldr	r0, [r0, #0]
 23f72ee:	4b04      	ldr	r3, [pc, #16]	; (23f7300 <gmtime_r+0x18>)
 23f72f0:	4403      	add	r3, r0
 23f72f2:	681b      	ldr	r3, [r3, #0]
 23f72f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23f72f6:	9302      	str	r3, [sp, #8]
 23f72f8:	bd09      	pop	{r0, r3, pc}
 23f72fa:	0000      	.short	0x0000
 23f72fc:	1006a0e0 	.word	0x1006a0e0
 23f7300:	00000004 	.word	0x00000004

023f7304 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
 23f7304:	b509      	push	{r0, r3, lr}
 23f7306:	4804      	ldr	r0, [pc, #16]	; (23f7318 <mktime+0x14>)
 23f7308:	6800      	ldr	r0, [r0, #0]
 23f730a:	4b04      	ldr	r3, [pc, #16]	; (23f731c <mktime+0x18>)
 23f730c:	4403      	add	r3, r0
 23f730e:	681b      	ldr	r3, [r3, #0]
 23f7310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f7312:	9302      	str	r3, [sp, #8]
 23f7314:	bd09      	pop	{r0, r3, pc}
 23f7316:	0000      	.short	0x0000
 23f7318:	1006a0e0 	.word	0x1006a0e0
 23f731c:	00000004 	.word	0x00000004

023f7320 <__cxa_guard_acquire>:
DYNALIB_FN(22, rt, __cxa_guard_acquire, int(__guard*))
 23f7320:	b509      	push	{r0, r3, lr}
 23f7322:	4804      	ldr	r0, [pc, #16]	; (23f7334 <__cxa_guard_acquire+0x14>)
 23f7324:	6800      	ldr	r0, [r0, #0]
 23f7326:	4b04      	ldr	r3, [pc, #16]	; (23f7338 <__cxa_guard_acquire+0x18>)
 23f7328:	4403      	add	r3, r0
 23f732a:	681b      	ldr	r3, [r3, #0]
 23f732c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f732e:	9302      	str	r3, [sp, #8]
 23f7330:	bd09      	pop	{r0, r3, pc}
 23f7332:	0000      	.short	0x0000
 23f7334:	1006a0e0 	.word	0x1006a0e0
 23f7338:	00000004 	.word	0x00000004

023f733c <__cxa_guard_release>:
DYNALIB_FN(23, rt, __cxa_guard_release, void(__guard*))
 23f733c:	b509      	push	{r0, r3, lr}
 23f733e:	4804      	ldr	r0, [pc, #16]	; (23f7350 <__cxa_guard_release+0x14>)
 23f7340:	6800      	ldr	r0, [r0, #0]
 23f7342:	4b04      	ldr	r3, [pc, #16]	; (23f7354 <__cxa_guard_release+0x18>)
 23f7344:	4403      	add	r3, r0
 23f7346:	681b      	ldr	r3, [r3, #0]
 23f7348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23f734a:	9302      	str	r3, [sp, #8]
 23f734c:	bd09      	pop	{r0, r3, pc}
 23f734e:	0000      	.short	0x0000
 23f7350:	1006a0e0 	.word	0x1006a0e0
 23f7354:	00000004 	.word	0x00000004

023f7358 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23f7358:	2100      	movs	r1, #0
 23f735a:	f7ff bcb5 	b.w	23f6cc8 <system_delay_ms>

023f735e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 23f735e:	b510      	push	{r4, lr}
      if (_M_empty())
 23f7360:	6883      	ldr	r3, [r0, #8]
 23f7362:	4604      	mov	r4, r0
 23f7364:	b90b      	cbnz	r3, 23f736a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 23f7366:	f002 fb15 	bl	23f9994 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f736a:	68c3      	ldr	r3, [r0, #12]
 23f736c:	4798      	blx	r3
      if (_M_manager)
 23f736e:	68a3      	ldr	r3, [r4, #8]
 23f7370:	b11b      	cbz	r3, 23f737a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23f7372:	2203      	movs	r2, #3
 23f7374:	4621      	mov	r1, r4
 23f7376:	4620      	mov	r0, r4
 23f7378:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 23f737a:	4620      	mov	r0, r4
}
 23f737c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 23f7380:	2110      	movs	r1, #16
 23f7382:	f7eb bfbe 	b.w	23e3302 <_ZdlPvj>
	...

023f7388 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23f7388:	2300      	movs	r3, #0
 23f738a:	4802      	ldr	r0, [pc, #8]	; (23f7394 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23f738c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23f738e:	f7fe bff5 	b.w	23f637c <os_mutex_recursive_create>
 23f7392:	bf00      	nop
 23f7394:	1007aeb0 	.word	0x1007aeb0

023f7398 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 23f7398:	2200      	movs	r2, #0
 23f739a:	6840      	ldr	r0, [r0, #4]
 23f739c:	4611      	mov	r1, r2
 23f739e:	f7ff be1b 	b.w	23f6fd8 <network_ready>

023f73a2 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 23f73a2:	2200      	movs	r2, #0
 23f73a4:	6840      	ldr	r0, [r0, #4]
 23f73a6:	4611      	mov	r1, r2
 23f73a8:	f7ff be4e 	b.w	23f7048 <network_listening>

023f73ac <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23f73ac:	2200      	movs	r2, #0
 23f73ae:	6840      	ldr	r0, [r0, #4]
 23f73b0:	4611      	mov	r1, r2
 23f73b2:	f7ff be81 	b.w	23f70b8 <network_get_listen_timeout>

023f73b6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23f73b6:	2200      	movs	r2, #0
 23f73b8:	6840      	ldr	r0, [r0, #4]
 23f73ba:	f7ff be6f 	b.w	23f709c <network_set_listen_timeout>

023f73be <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23f73be:	2200      	movs	r2, #0
 23f73c0:	6840      	ldr	r0, [r0, #4]
 23f73c2:	f081 0101 	eor.w	r1, r1, #1
 23f73c6:	f7ff be31 	b.w	23f702c <network_listen>

023f73ca <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23f73ca:	2200      	movs	r2, #0
 23f73cc:	6840      	ldr	r0, [r0, #4]
 23f73ce:	4611      	mov	r1, r2
 23f73d0:	f7ff bde6 	b.w	23f6fa0 <network_connecting>

023f73d4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23f73d4:	2200      	movs	r2, #0
 23f73d6:	2102      	movs	r1, #2
 23f73d8:	6840      	ldr	r0, [r0, #4]
 23f73da:	f7ff bdef 	b.w	23f6fbc <network_disconnect>

023f73de <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23f73de:	2300      	movs	r3, #0
 23f73e0:	6840      	ldr	r0, [r0, #4]
 23f73e2:	461a      	mov	r2, r3
 23f73e4:	f7ff bdce 	b.w	23f6f84 <network_connect>

023f73e8 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 23f73e8:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
 23f73ea:	2518      	movs	r5, #24
 23f73ec:	4b12      	ldr	r3, [pc, #72]	; (23f7438 <_ZN5spark13CellularClass4RSSIEv+0x50>)
 23f73ee:	460e      	mov	r6, r1
 23f73f0:	6003      	str	r3, [r0, #0]
 23f73f2:	3330      	adds	r3, #48	; 0x30
 23f73f4:	462a      	mov	r2, r5
 23f73f6:	2100      	movs	r1, #0
 23f73f8:	b086      	sub	sp, #24
 23f73fa:	6043      	str	r3, [r0, #4]
 23f73fc:	4604      	mov	r4, r0
 23f73fe:	3008      	adds	r0, #8
 23f7400:	f004 fff1 	bl	23fc3e6 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 23f7404:	2200      	movs	r2, #0
 23f7406:	6870      	ldr	r0, [r6, #4]
 23f7408:	4611      	mov	r1, r2
 23f740a:	f7ff fde5 	bl	23f6fd8 <network_ready>
 23f740e:	b178      	cbz	r0, 23f7430 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
 23f7410:	2100      	movs	r1, #0
 23f7412:	462a      	mov	r2, r5
 23f7414:	4668      	mov	r0, sp
 23f7416:	f004 ffe6 	bl	23fc3e6 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
 23f741a:	4669      	mov	r1, sp
 23f741c:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
 23f741e:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
 23f7422:	f7fe ff81 	bl	23f6328 <cellular_signal>
 23f7426:	b918      	cbnz	r0, 23f7430 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
 23f7428:	4669      	mov	r1, sp
 23f742a:	4620      	mov	r0, r4
 23f742c:	f000 f990 	bl	23f7750 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
 23f7430:	4620      	mov	r0, r4
 23f7432:	b006      	add	sp, #24
 23f7434:	bd70      	pop	{r4, r5, r6, pc}
 23f7436:	bf00      	nop
 23f7438:	023ff8c4 	.word	0x023ff8c4

023f743c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 23f743c:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 23f743e:	2428      	movs	r4, #40	; 0x28
 23f7440:	4b07      	ldr	r3, [pc, #28]	; (23f7460 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 23f7442:	4622      	mov	r2, r4
 23f7444:	4618      	mov	r0, r3
 23f7446:	2100      	movs	r1, #0
 23f7448:	f004 ffcd 	bl	23fc3e6 <memset>
        cid = -1;
 23f744c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f7450:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name, bool flushCache = false);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23f7452:	2204      	movs	r2, #4
 23f7454:	4b03      	ldr	r3, [pc, #12]	; (23f7464 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 23f7456:	8004      	strh	r4, [r0, #0]
 23f7458:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 23f745a:	4a03      	ldr	r2, [pc, #12]	; (23f7468 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 23f745c:	601a      	str	r2, [r3, #0]
 23f745e:	bd10      	pop	{r4, pc}
 23f7460:	1007aebc 	.word	0x1007aebc
 23f7464:	1007aeb4 	.word	0x1007aeb4
 23f7468:	023ff874 	.word	0x023ff874

023f746c <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 23f746c:	4770      	bx	lr

023f746e <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 23f746e:	7b00      	ldrb	r0, [r0, #12]
 23f7470:	4770      	bx	lr

023f7472 <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
 23f7472:	7b03      	ldrb	r3, [r0, #12]
 23f7474:	b14b      	cbz	r3, 23f748a <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
 23f7476:	6903      	ldr	r3, [r0, #16]
 23f7478:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23f747c:	d005      	beq.n	23f748a <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
 23f747e:	6980      	ldr	r0, [r0, #24]
 23f7480:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
 23f7484:	bf18      	it	ne
 23f7486:	2001      	movne	r0, #1
 23f7488:	4770      	bx	lr
 23f748a:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
 23f748c:	4770      	bx	lr

023f748e <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
 23f748e:	6803      	ldr	r3, [r0, #0]
 23f7490:	6a1b      	ldr	r3, [r3, #32]
 23f7492:	4718      	bx	r3

023f7494 <_ZN14CellularSignalD0Ev>:
 23f7494:	b510      	push	{r4, lr}
 23f7496:	4604      	mov	r4, r0
 23f7498:	2120      	movs	r1, #32
 23f749a:	f7eb ff32 	bl	23e3302 <_ZdlPvj>
 23f749e:	4620      	mov	r0, r4
 23f74a0:	bd10      	pop	{r4, pc}
	...

023f74a4 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 23f74a4:	7b03      	ldrb	r3, [r0, #12]
 23f74a6:	b17b      	cbz	r3, 23f74c8 <_ZNK14CellularSignal11getStrengthEv+0x24>
 23f74a8:	6943      	ldr	r3, [r0, #20]
 23f74aa:	2b00      	cmp	r3, #0
 23f74ac:	db0c      	blt.n	23f74c8 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
 23f74ae:	ee07 3a90 	vmov	s15, r3
 23f74b2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 23f74d0 <_ZNK14CellularSignal11getStrengthEv+0x2c>
 23f74b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f74ba:	ee87 0a87 	vdiv.f32	s0, s15, s14
 23f74be:	eddf 7a05 	vldr	s15, [pc, #20]	; 23f74d4 <_ZNK14CellularSignal11getStrengthEv+0x30>
 23f74c2:	ee20 0a27 	vmul.f32	s0, s0, s15
 23f74c6:	4770      	bx	lr
    return -1.0f;
 23f74c8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
 23f74cc:	4770      	bx	lr
 23f74ce:	bf00      	nop
 23f74d0:	477fff00 	.word	0x477fff00
 23f74d4:	42c80000 	.word	0x42c80000

023f74d8 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 23f74d8:	7b03      	ldrb	r3, [r0, #12]
 23f74da:	b163      	cbz	r3, 23f74f6 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
 23f74dc:	6903      	ldr	r3, [r0, #16]
 23f74de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23f74e2:	d008      	beq.n	23f74f6 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
 23f74e4:	ee07 3a90 	vmov	s15, r3
 23f74e8:	ed9f 7a04 	vldr	s14, [pc, #16]	; 23f74fc <_ZNK14CellularSignal16getStrengthValueEv+0x24>
 23f74ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f74f0:	ee87 0a87 	vdiv.f32	s0, s15, s14
 23f74f4:	4770      	bx	lr
    return 0.0f;
 23f74f6:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23f7500 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
 23f74fa:	4770      	bx	lr
 23f74fc:	42c80000 	.word	0x42c80000
 23f7500:	00000000 	.word	0x00000000

023f7504 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 23f7504:	7b03      	ldrb	r3, [r0, #12]
 23f7506:	b17b      	cbz	r3, 23f7528 <_ZNK14CellularSignal10getQualityEv+0x24>
 23f7508:	69c3      	ldr	r3, [r0, #28]
 23f750a:	2b00      	cmp	r3, #0
 23f750c:	db0c      	blt.n	23f7528 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
 23f750e:	ee07 3a90 	vmov	s15, r3
 23f7512:	ed9f 7a07 	vldr	s14, [pc, #28]	; 23f7530 <_ZNK14CellularSignal10getQualityEv+0x2c>
 23f7516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f751a:	ee87 0a87 	vdiv.f32	s0, s15, s14
 23f751e:	eddf 7a05 	vldr	s15, [pc, #20]	; 23f7534 <_ZNK14CellularSignal10getQualityEv+0x30>
 23f7522:	ee20 0a27 	vmul.f32	s0, s0, s15
 23f7526:	4770      	bx	lr
    return -1.0f;
 23f7528:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
 23f752c:	4770      	bx	lr
 23f752e:	bf00      	nop
 23f7530:	477fff00 	.word	0x477fff00
 23f7534:	42c80000 	.word	0x42c80000

023f7538 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 23f7538:	7b03      	ldrb	r3, [r0, #12]
 23f753a:	b163      	cbz	r3, 23f7556 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
 23f753c:	6983      	ldr	r3, [r0, #24]
 23f753e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23f7542:	d008      	beq.n	23f7556 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
 23f7544:	ee07 3a90 	vmov	s15, r3
 23f7548:	ed9f 7a04 	vldr	s14, [pc, #16]	; 23f755c <_ZNK14CellularSignal15getQualityValueEv+0x24>
 23f754c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f7550:	ee87 0a87 	vdiv.f32	s0, s15, s14
 23f7554:	4770      	bx	lr
    return 0.0f;
 23f7556:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23f7560 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
 23f755a:	4770      	bx	lr
 23f755c:	42c80000 	.word	0x42c80000
 23f7560:	00000000 	.word	0x00000000

023f7564 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:

} // namespace particle

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
inline size_t Print::print(T n, int base)
 23f7564:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 23f7566:	1e0c      	subs	r4, r1, #0
inline size_t Print::print(T n, int base)
 23f7568:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
 23f756a:	da0a      	bge.n	23f7582 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
 23f756c:	212d      	movs	r1, #45	; 0x2d
 23f756e:	f001 f911 	bl	23f8794 <_ZN5Print5printEc>
 23f7572:	4605      	mov	r5, r0
            val = -n;
 23f7574:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23f7576:	220a      	movs	r2, #10
 23f7578:	4630      	mov	r0, r6
 23f757a:	f001 f928 	bl	23f87ce <_ZN5Print11printNumberEmh>
    }
}
 23f757e:	4428      	add	r0, r5
 23f7580:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
 23f7582:	4621      	mov	r1, r4
        size_t t = 0;
 23f7584:	2500      	movs	r5, #0
 23f7586:	e7f6      	b.n	23f7576 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

023f7588 <_ZN5Print10printFloatEdh>:
    size_t printFloat(double number, uint8_t digits) {
 23f7588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f758c:	ec55 4b10 	vmov	r4, r5, d0
 23f7590:	4607      	mov	r7, r0
 23f7592:	460e      	mov	r6, r1
        if (std::isnan(number)) {
 23f7594:	ee10 2a10 	vmov	r2, s0
 23f7598:	462b      	mov	r3, r5
 23f759a:	ee10 0a10 	vmov	r0, s0
 23f759e:	4629      	mov	r1, r5
 23f75a0:	f7eb fae0 	bl	23e2b64 <__aeabi_dcmpun>
 23f75a4:	b128      	cbz	r0, 23f75b2 <_ZN5Print10printFloatEdh+0x2a>
            return print("nan");
 23f75a6:	494c      	ldr	r1, [pc, #304]	; (23f76d8 <_ZN5Print10printFloatEdh+0x150>)
            return print ("ovf"); // constant determined empirically
 23f75a8:	4638      	mov	r0, r7
    }
 23f75aa:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            return print ("ovf"); // constant determined empirically
 23f75ae:	f001 b8ed 	b.w	23f878c <_ZN5Print5printEPKc>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 23f75b2:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
        if (std::isinf(number)) {
 23f75b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f75ba:	4620      	mov	r0, r4
 23f75bc:	4649      	mov	r1, r9
 23f75be:	4b47      	ldr	r3, [pc, #284]	; (23f76dc <_ZN5Print10printFloatEdh+0x154>)
 23f75c0:	f7eb fad0 	bl	23e2b64 <__aeabi_dcmpun>
 23f75c4:	b948      	cbnz	r0, 23f75da <_ZN5Print10printFloatEdh+0x52>
 23f75c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f75ca:	4620      	mov	r0, r4
 23f75cc:	4649      	mov	r1, r9
 23f75ce:	4b43      	ldr	r3, [pc, #268]	; (23f76dc <_ZN5Print10printFloatEdh+0x154>)
 23f75d0:	f7eb faaa 	bl	23e2b28 <__aeabi_dcmple>
 23f75d4:	b908      	cbnz	r0, 23f75da <_ZN5Print10printFloatEdh+0x52>
            return print("inf");
 23f75d6:	4942      	ldr	r1, [pc, #264]	; (23f76e0 <_ZN5Print10printFloatEdh+0x158>)
 23f75d8:	e7e6      	b.n	23f75a8 <_ZN5Print10printFloatEdh+0x20>
        if (number > 4294967040.0) {
 23f75da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23f75de:	4620      	mov	r0, r4
 23f75e0:	4629      	mov	r1, r5
 23f75e2:	4b40      	ldr	r3, [pc, #256]	; (23f76e4 <_ZN5Print10printFloatEdh+0x15c>)
 23f75e4:	f7eb fab4 	bl	23e2b50 <__aeabi_dcmpgt>
 23f75e8:	b108      	cbz	r0, 23f75ee <_ZN5Print10printFloatEdh+0x66>
            return print ("ovf"); // constant determined empirically
 23f75ea:	493f      	ldr	r1, [pc, #252]	; (23f76e8 <_ZN5Print10printFloatEdh+0x160>)
 23f75ec:	e7dc      	b.n	23f75a8 <_ZN5Print10printFloatEdh+0x20>
        if (number <-4294967040.0) {
 23f75ee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23f75f2:	4620      	mov	r0, r4
 23f75f4:	4629      	mov	r1, r5
 23f75f6:	4b3d      	ldr	r3, [pc, #244]	; (23f76ec <_ZN5Print10printFloatEdh+0x164>)
 23f75f8:	f7eb fa8c 	bl	23e2b14 <__aeabi_dcmplt>
 23f75fc:	2800      	cmp	r0, #0
 23f75fe:	d1f4      	bne.n	23f75ea <_ZN5Print10printFloatEdh+0x62>
        if (number < 0.0) {
 23f7600:	2200      	movs	r2, #0
 23f7602:	2300      	movs	r3, #0
 23f7604:	4620      	mov	r0, r4
 23f7606:	4629      	mov	r1, r5
 23f7608:	f7eb fa84 	bl	23e2b14 <__aeabi_dcmplt>
 23f760c:	b1d0      	cbz	r0, 23f7644 <_ZN5Print10printFloatEdh+0xbc>
            n += print('-');
 23f760e:	212d      	movs	r1, #45	; 0x2d
 23f7610:	4638      	mov	r0, r7
 23f7612:	f001 f8bf 	bl	23f8794 <_ZN5Print5printEc>
            number = -number;
 23f7616:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
            n += print('-');
 23f761a:	4682      	mov	sl, r0
            number = -number;
 23f761c:	461d      	mov	r5, r3
        size_t n = 0;
 23f761e:	f04f 0b00 	mov.w	fp, #0
        double rounding = 0.5;
 23f7622:	2000      	movs	r0, #0
            rounding /= 10.0;
 23f7624:	f04f 0800 	mov.w	r8, #0
        double rounding = 0.5;
 23f7628:	4931      	ldr	r1, [pc, #196]	; (23f76f0 <_ZN5Print10printFloatEdh+0x168>)
            rounding /= 10.0;
 23f762a:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 23f76f8 <_ZN5Print10printFloatEdh+0x170>
        for (uint8_t i = 0; i < digits; ++i) {
 23f762e:	fa5f f38b 	uxtb.w	r3, fp
 23f7632:	429e      	cmp	r6, r3
 23f7634:	d908      	bls.n	23f7648 <_ZN5Print10printFloatEdh+0xc0>
            rounding /= 10.0;
 23f7636:	4642      	mov	r2, r8
 23f7638:	464b      	mov	r3, r9
 23f763a:	f7eb f923 	bl	23e2884 <__aeabi_ddiv>
        for (uint8_t i = 0; i < digits; ++i) {
 23f763e:	f10b 0b01 	add.w	fp, fp, #1
 23f7642:	e7f4      	b.n	23f762e <_ZN5Print10printFloatEdh+0xa6>
        size_t n = 0;
 23f7644:	4682      	mov	sl, r0
 23f7646:	e7ea      	b.n	23f761e <_ZN5Print10printFloatEdh+0x96>
        number += rounding;
 23f7648:	4602      	mov	r2, r0
 23f764a:	460b      	mov	r3, r1
 23f764c:	4620      	mov	r0, r4
 23f764e:	4629      	mov	r1, r5
 23f7650:	f7ea fe38 	bl	23e22c4 <__adddf3>
 23f7654:	460d      	mov	r5, r1
 23f7656:	4604      	mov	r4, r0
        unsigned long int_part = (unsigned long)number;
 23f7658:	f7eb fac2 	bl	23e2be0 <__aeabi_d2uiz>
 23f765c:	4680      	mov	r8, r0
        double remainder = number - (double)int_part;
 23f765e:	f7ea ff6d 	bl	23e253c <__aeabi_ui2d>
 23f7662:	4602      	mov	r2, r0
 23f7664:	460b      	mov	r3, r1
 23f7666:	4620      	mov	r0, r4
 23f7668:	4629      	mov	r1, r5
 23f766a:	f7ea fe29 	bl	23e22c0 <__aeabi_dsub>
        return printNumber(val, base) + t;
 23f766e:	220a      	movs	r2, #10
        double remainder = number - (double)int_part;
 23f7670:	4604      	mov	r4, r0
 23f7672:	460d      	mov	r5, r1
        return printNumber(val, base) + t;
 23f7674:	4638      	mov	r0, r7
 23f7676:	4641      	mov	r1, r8
 23f7678:	f001 f8a9 	bl	23f87ce <_ZN5Print11printNumberEmh>
        n += print(int_part);
 23f767c:	4482      	add	sl, r0
        if (digits > 0) {
 23f767e:	b33e      	cbz	r6, 23f76d0 <_ZN5Print10printFloatEdh+0x148>
            n += print(".");
 23f7680:	4638      	mov	r0, r7
 23f7682:	491c      	ldr	r1, [pc, #112]	; (23f76f4 <_ZN5Print10printFloatEdh+0x16c>)
 23f7684:	f001 f882 	bl	23f878c <_ZN5Print5printEPKc>
            remainder *= 10.0;
 23f7688:	f04f 0800 	mov.w	r8, #0
 23f768c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 23f76f8 <_ZN5Print10printFloatEdh+0x170>
            n += print(".");
 23f7690:	4482      	add	sl, r0
        while (digits-- > 0) {
 23f7692:	b1ee      	cbz	r6, 23f76d0 <_ZN5Print10printFloatEdh+0x148>
            remainder *= 10.0;
 23f7694:	4642      	mov	r2, r8
 23f7696:	464b      	mov	r3, r9
 23f7698:	4620      	mov	r0, r4
 23f769a:	4629      	mov	r1, r5
 23f769c:	f7ea ffc8 	bl	23e2630 <__aeabi_dmul>
 23f76a0:	460d      	mov	r5, r1
 23f76a2:	4604      	mov	r4, r0
            int toPrint = int(remainder);
 23f76a4:	f7eb fa74 	bl	23e2b90 <__aeabi_d2iz>
 23f76a8:	4601      	mov	r1, r0
 23f76aa:	4683      	mov	fp, r0
inline size_t Print::print(T n, int base)
 23f76ac:	4638      	mov	r0, r7
 23f76ae:	f7ff ff59 	bl	23f7564 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
            n += print(toPrint);
 23f76b2:	4482      	add	sl, r0
            remainder -= toPrint;
 23f76b4:	4658      	mov	r0, fp
 23f76b6:	f7ea ff51 	bl	23e255c <__aeabi_i2d>
 23f76ba:	4602      	mov	r2, r0
 23f76bc:	460b      	mov	r3, r1
 23f76be:	4620      	mov	r0, r4
 23f76c0:	4629      	mov	r1, r5
 23f76c2:	f7ea fdfd 	bl	23e22c0 <__aeabi_dsub>
 23f76c6:	3e01      	subs	r6, #1
 23f76c8:	4604      	mov	r4, r0
 23f76ca:	460d      	mov	r5, r1
 23f76cc:	b2f6      	uxtb	r6, r6
        while (digits-- > 0) {
 23f76ce:	e7e0      	b.n	23f7692 <_ZN5Print10printFloatEdh+0x10a>
    }
 23f76d0:	4650      	mov	r0, sl
 23f76d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f76d6:	bf00      	nop
 23f76d8:	023ff8b0 	.word	0x023ff8b0
 23f76dc:	7fefffff 	.word	0x7fefffff
 23f76e0:	023ff8b4 	.word	0x023ff8b4
 23f76e4:	41efffff 	.word	0x41efffff
 23f76e8:	023ff8b8 	.word	0x023ff8b8
 23f76ec:	c1efffff 	.word	0xc1efffff
 23f76f0:	3fe00000 	.word	0x3fe00000
 23f76f4:	023fddb8 	.word	0x023fddb8
 23f76f8:	40240000 	.word	0x40240000

023f76fc <_ZNK14CellularSignal7printToER5Print>:
{
 23f76fc:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
 23f76fe:	6803      	ldr	r3, [r0, #0]
{
 23f7700:	460c      	mov	r4, r1
    n += p.print(this->getStrengthValue(), 2);
 23f7702:	691b      	ldr	r3, [r3, #16]
{
 23f7704:	4605      	mov	r5, r0
    n += p.print(this->getStrengthValue(), 2);
 23f7706:	4798      	blx	r3
 23f7708:	ee10 0a10 	vmov	r0, s0
        return printFloat((double)n, digits);
 23f770c:	f7ea ff38 	bl	23e2580 <__aeabi_f2d>
 23f7710:	ec41 0b10 	vmov	d0, r0, r1
 23f7714:	2102      	movs	r1, #2
 23f7716:	4620      	mov	r0, r4
 23f7718:	f7ff ff36 	bl	23f7588 <_ZN5Print10printFloatEdh>
    n += p.print(',');
 23f771c:	212c      	movs	r1, #44	; 0x2c
 23f771e:	4606      	mov	r6, r0
 23f7720:	4620      	mov	r0, r4
 23f7722:	f001 f837 	bl	23f8794 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
 23f7726:	682b      	ldr	r3, [r5, #0]
    n += p.print(',');
 23f7728:	4406      	add	r6, r0
    n += p.print(this->getQualityValue(), 2);
 23f772a:	699b      	ldr	r3, [r3, #24]
 23f772c:	4628      	mov	r0, r5
 23f772e:	4798      	blx	r3
 23f7730:	ee10 0a10 	vmov	r0, s0
 23f7734:	f7ea ff24 	bl	23e2580 <__aeabi_f2d>
 23f7738:	ec41 0b10 	vmov	d0, r0, r1
 23f773c:	2102      	movs	r1, #2
 23f773e:	4620      	mov	r0, r4
 23f7740:	f7ff ff22 	bl	23f7588 <_ZN5Print10printFloatEdh>
}
 23f7744:	4430      	add	r0, r6
 23f7746:	bd70      	pop	{r4, r5, r6, pc}

023f7748 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 23f7748:	f1a0 0004 	sub.w	r0, r0, #4
 23f774c:	f7ff bfd6 	b.w	23f76fc <_ZNK14CellularSignal7printToER5Print>

023f7750 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
 23f7750:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 23f7752:	460d      	mov	r5, r1
 23f7754:	f100 0408 	add.w	r4, r0, #8
 23f7758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f775a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f775c:	e895 0003 	ldmia.w	r5, {r0, r1}
 23f7760:	e884 0003 	stmia.w	r4, {r0, r1}
}
 23f7764:	2001      	movs	r0, #1
 23f7766:	bd30      	pop	{r4, r5, pc}

023f7768 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23f7768:	4770      	bx	lr

023f776a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 23f776a:	2000      	movs	r0, #0
 23f776c:	4770      	bx	lr

023f776e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23f776e:	b510      	push	{r4, lr}
 23f7770:	4604      	mov	r4, r0
 23f7772:	2110      	movs	r1, #16
 23f7774:	f7eb fdc5 	bl	23e3302 <_ZdlPvj>
 23f7778:	4620      	mov	r0, r4
 23f777a:	bd10      	pop	{r4, pc}

023f777c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 23f777c:	b508      	push	{r3, lr}
      { delete this; }
 23f777e:	f7ff fff6 	bl	23f776e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 23f7782:	bd08      	pop	{r3, pc}

023f7784 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 23f7784:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 23f7786:	b530      	push	{r4, r5, lr}
        type_(type) {
 23f7788:	f64f 749c 	movw	r4, #65436	; 0xff9c
 23f778c:	6002      	str	r2, [r0, #0]
 23f778e:	8084      	strh	r4, [r0, #4]
 23f7790:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23f7792:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23f7794:	680c      	ldr	r4, [r1, #0]
 23f7796:	8085      	strh	r5, [r0, #4]
 23f7798:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23f779a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 23f779c:	bd30      	pop	{r4, r5, pc}

023f779e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 23f779e:	b510      	push	{r4, lr}
 23f77a0:	4604      	mov	r4, r0
    free((void*)msg_);
 23f77a2:	6800      	ldr	r0, [r0, #0]
 23f77a4:	f7ff fcdc 	bl	23f7160 <free>
}
 23f77a8:	4620      	mov	r0, r4
 23f77aa:	bd10      	pop	{r4, pc}

023f77ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23f77ac:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 23f77ae:	68c4      	ldr	r4, [r0, #12]
 23f77b0:	b314      	cbz	r4, 23f77f8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x4c>
 23f77b2:	7823      	ldrb	r3, [r4, #0]
 23f77b4:	b2db      	uxtb	r3, r3
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 23f77b6:	2b02      	cmp	r3, #2
 23f77b8:	d103      	bne.n	23f77c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x16>
            error_.~Error();
 23f77ba:	f104 000c 	add.w	r0, r4, #12
 23f77be:	f7ff ffee 	bl	23f779e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 23f77c2:	1d23      	adds	r3, r4, #4
 23f77c4:	681d      	ldr	r5, [r3, #0]
        delete onSuccess_.load(std::memory_order_relaxed);
 23f77c6:	b135      	cbz	r5, 23f77d6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x2a>
    class function<_Res(_ArgTypes...)>
 23f77c8:	4628      	mov	r0, r5
 23f77ca:	f7fd fa39 	bl	23f4c40 <_ZNSt14_Function_baseD1Ev>
 23f77ce:	2110      	movs	r1, #16
 23f77d0:	4628      	mov	r0, r5
 23f77d2:	f7eb fd96 	bl	23e3302 <_ZdlPvj>
 23f77d6:	f104 0308 	add.w	r3, r4, #8
 23f77da:	681d      	ldr	r5, [r3, #0]
        delete onError_.load(std::memory_order_relaxed);
 23f77dc:	b135      	cbz	r5, 23f77ec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x40>
 23f77de:	4628      	mov	r0, r5
 23f77e0:	f7fd fa2e 	bl	23f4c40 <_ZNSt14_Function_baseD1Ev>
 23f77e4:	2110      	movs	r1, #16
 23f77e6:	4628      	mov	r0, r5
 23f77e8:	f7eb fd8b 	bl	23e3302 <_ZdlPvj>
 23f77ec:	4620      	mov	r0, r4
 23f77ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23f77f2:	2114      	movs	r1, #20
 23f77f4:	f7eb bd85 	b.w	23e3302 <_ZdlPvj>
 23f77f8:	bd38      	pop	{r3, r4, r5, pc}

023f77fa <_ZNK22CloudDisconnectOptions15toSystemOptionsEv>:

} // namespace

spark_cloud_disconnect_options CloudDisconnectOptions::toSystemOptions() const
{
    spark_cloud_disconnect_options opts = {};
 23f77fa:	2200      	movs	r2, #0
 23f77fc:	8142      	strh	r2, [r0, #10]
    opts.size = sizeof(opts);
 23f77fe:	220c      	movs	r2, #12
 23f7800:	8002      	strh	r2, [r0, #0]
    opts.flags = flags_;
 23f7802:	680a      	ldr	r2, [r1, #0]
 23f7804:	7082      	strb	r2, [r0, #2]
    opts.graceful = graceful_;
 23f7806:	7a0a      	ldrb	r2, [r1, #8]
 23f7808:	70c2      	strb	r2, [r0, #3]
    opts.timeout = timeout_;
 23f780a:	684a      	ldr	r2, [r1, #4]
 23f780c:	6042      	str	r2, [r0, #4]
    opts.clear_session = clearSession_;
 23f780e:	7a4a      	ldrb	r2, [r1, #9]
 23f7810:	7202      	strb	r2, [r0, #8]
    opts.reconnect_immediately = reconnect_;
 23f7812:	7a8a      	ldrb	r2, [r1, #10]
 23f7814:	7242      	strb	r2, [r0, #9]
    return opts;
}
 23f7816:	4770      	bx	lr

023f7818 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession, options->reconnect_immediately);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 23f7818:	b510      	push	{r4, lr}
 23f781a:	b088      	sub	sp, #32
 23f781c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 23f781e:	4668      	mov	r0, sp
 23f7820:	f001 f9ba 	bl	23f8b98 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 23f7824:	4669      	mov	r1, sp
 23f7826:	a804      	add	r0, sp, #16
 23f7828:	f001 f9d9 	bl	23f8bde <_ZN6StringC1ERKS_>
 23f782c:	a804      	add	r0, sp, #16
 23f782e:	47a0      	blx	r4
 23f7830:	4604      	mov	r4, r0
 23f7832:	a804      	add	r0, sp, #16
 23f7834:	f001 f965 	bl	23f8b02 <_ZN6StringD1Ev>
    String p(param);
 23f7838:	4668      	mov	r0, sp
 23f783a:	f001 f962 	bl	23f8b02 <_ZN6StringD1Ev>
}
 23f783e:	4620      	mov	r0, r4
 23f7840:	b008      	add	sp, #32
 23f7842:	bd10      	pop	{r4, pc}

023f7844 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 23f7844:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 23f7846:	2300      	movs	r3, #0
         size = sizeof(*this);
 23f7848:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 23f784a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 23f784e:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 23f7850:	4669      	mov	r1, sp
 23f7852:	461a      	mov	r2, r3
 23f7854:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 23f7856:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 23f785a:	f8ad 4000 	strh.w	r4, [sp]
 23f785e:	f7ff fae9 	bl	23f6e34 <spark_function>
}
 23f7862:	b004      	add	sp, #16
 23f7864:	bd10      	pop	{r4, pc}

023f7866 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 23f7866:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f7868:	4601      	mov	r1, r0
    const auto opts = options.toSystemOptions();
 23f786a:	a801      	add	r0, sp, #4
 23f786c:	f7ff ffc5 	bl	23f77fa <_ZNK22CloudDisconnectOptions15toSystemOptionsEv>
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 23f7870:	2100      	movs	r1, #0
 23f7872:	f7ff fb6b 	bl	23f6f4c <spark_cloud_disconnect>
}
 23f7876:	b005      	add	sp, #20
 23f7878:	f85d fb04 	ldr.w	pc, [sp], #4

023f787c <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>:

void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
 23f787c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const auto opts = options.toSystemOptions();
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
 23f787e:	2300      	movs	r3, #0
void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
 23f7880:	4601      	mov	r1, r0
    const auto opts = options.toSystemOptions();
 23f7882:	a801      	add	r0, sp, #4
 23f7884:	f7ff ffb9 	bl	23f77fa <_ZNK22CloudDisconnectOptions15toSystemOptionsEv>
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
 23f7888:	4602      	mov	r2, r0
 23f788a:	4619      	mov	r1, r3
 23f788c:	2002      	movs	r0, #2
 23f788e:	f7ff fb41 	bl	23f6f14 <spark_set_connection_property>
}
 23f7892:	b005      	add	sp, #20
 23f7894:	f85d fb04 	ldr.w	pc, [sp], #4

023f7898 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23f7898:	680b      	ldr	r3, [r1, #0]
 23f789a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23f789c:	684b      	ldr	r3, [r1, #4]
 23f789e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23f78a0:	b113      	cbz	r3, 23f78a8 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 23f78a2:	685a      	ldr	r2, [r3, #4]
 23f78a4:	3201      	adds	r2, #1
 23f78a6:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23f78a8:	4770      	bx	lr

023f78aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 23f78aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f78ac:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23f78ae:	4668      	mov	r0, sp
 23f78b0:	460d      	mov	r5, r1
 23f78b2:	f7ff fff1 	bl	23f7898 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 23f78b6:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23f78b8:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23f78ba:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 23f78bc:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23f78be:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 23f78c0:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 23f78c2:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
 23f78c4:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 23f78c6:	f7fe f9a3 	bl	23f5c10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 23f78ca:	b135      	cbz	r5, 23f78da <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 23f78cc:	1d28      	adds	r0, r5, #4
 23f78ce:	f7fe f99f 	bl	23f5c10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f78d2:	2108      	movs	r1, #8
 23f78d4:	4628      	mov	r0, r5
 23f78d6:	f7eb fd14 	bl	23e3302 <_ZdlPvj>
        return p;
    }
 23f78da:	4620      	mov	r0, r4
 23f78dc:	b003      	add	sp, #12
 23f78de:	bd30      	pop	{r4, r5, pc}

023f78e0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 23f78e0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23f78e2:	b510      	push	{r4, lr}
      if (_M_empty())
 23f78e4:	b90a      	cbnz	r2, 23f78ea <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 23f78e6:	f002 f855 	bl	23f9994 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f78ea:	68c3      	ldr	r3, [r0, #12]
    }
 23f78ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f78f0:	4718      	bx	r3

023f78f2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f78f2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23f78f4:	6800      	ldr	r0, [r0, #0]
 23f78f6:	f100 0110 	add.w	r1, r0, #16
 23f78fa:	f7ff fff1 	bl	23f78e0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 23f78fe:	bd08      	pop	{r3, pc}

023f7900 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 23f7900:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23f7902:	b510      	push	{r4, lr}
      if (_M_empty())
 23f7904:	b90a      	cbnz	r2, 23f790a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 23f7906:	f002 f845 	bl	23f9994 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f790a:	68c3      	ldr	r3, [r0, #12]
    }
 23f790c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f7910:	4718      	bx	r3

023f7912 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f7912:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23f7914:	6800      	ldr	r0, [r0, #0]
 23f7916:	f100 0110 	add.w	r1, r0, #16
 23f791a:	f7ff fff1 	bl	23f7900 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 23f791e:	bd08      	pop	{r3, pc}

023f7920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 23f7920:	b538      	push	{r3, r4, r5, lr}
 23f7922:	2300      	movs	r3, #0
 23f7924:	4604      	mov	r4, r0
 23f7926:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23f7928:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 23f792a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23f792c:	f7eb fce5 	bl	23e32fa <_Znwj>
 23f7930:	b128      	cbz	r0, 23f793e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 23f7932:	2301      	movs	r3, #1
 23f7934:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 23f7938:	4b02      	ldr	r3, [pc, #8]	; (23f7944 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 23f793a:	60c5      	str	r5, [r0, #12]
 23f793c:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23f793e:	6020      	str	r0, [r4, #0]
	}
 23f7940:	4620      	mov	r0, r4
 23f7942:	bd38      	pop	{r3, r4, r5, pc}
 23f7944:	023ff900 	.word	0x023ff900

023f7948 <_ZN8particle10FutureBaseIbNS_6detail13FutureContextEEC1ENS_5Error4TypeE>:
    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
    }

    explicit FutureBase(Error::Type error) :
 23f7948:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        type_(type) {
 23f794a:	2600      	movs	r6, #0
 23f794c:	f8ad 1004 	strh.w	r1, [sp, #4]
 23f7950:	4605      	mov	r5, r0
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23f7952:	4669      	mov	r1, sp
 23f7954:	a802      	add	r0, sp, #8
 23f7956:	9600      	str	r6, [sp, #0]
 23f7958:	f7ff ff14 	bl	23f7784 <_ZN8particle5ErrorC1EOS0_>
 23f795c:	2014      	movs	r0, #20
 23f795e:	f7eb fccc 	bl	23e32fa <_Znwj>
 23f7962:	4604      	mov	r4, r0
 23f7964:	b148      	cbz	r0, 23f797a <_ZN8particle10FutureBaseIbNS_6detail13FutureContextEEC1ENS_5Error4TypeE+0x32>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 23f7966:	2302      	movs	r3, #2
 23f7968:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23f796a:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23f796c:	e9c0 6601 	strd	r6, r6, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23f7970:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 23f7972:	a902      	add	r1, sp, #8
 23f7974:	300c      	adds	r0, #12
 23f7976:	f7ff ff05 	bl	23f7784 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23f797a:	4628      	mov	r0, r5
	: __shared_count(__p)
 23f797c:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23f797e:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 23f7982:	f7ff ffcd 	bl	23f7920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23f7986:	a802      	add	r0, sp, #8
 23f7988:	f7ff ff09 	bl	23f779e <_ZN8particle5ErrorD1Ev>
            FutureBase(Error(error)) {
 23f798c:	4668      	mov	r0, sp
 23f798e:	f7ff ff06 	bl	23f779e <_ZN8particle5ErrorD1Ev>
    }
 23f7992:	4628      	mov	r0, r5
 23f7994:	b004      	add	sp, #16
 23f7996:	bd70      	pop	{r4, r5, r6, pc}

023f7998 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 23f7998:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23f799a:	2300      	movs	r3, #0
 23f799c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23f799e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23f79a0:	4604      	mov	r4, r0
 23f79a2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23f79a4:	b12b      	cbz	r3, 23f79b2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f79a6:	2202      	movs	r2, #2
 23f79a8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f79aa:	68eb      	ldr	r3, [r5, #12]
 23f79ac:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23f79ae:	68ab      	ldr	r3, [r5, #8]
 23f79b0:	60a3      	str	r3, [r4, #8]
    }
 23f79b2:	4620      	mov	r0, r4
 23f79b4:	bd38      	pop	{r3, r4, r5, pc}
	...

023f79b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 23f79b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f79ba:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
 23f79bc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 23f79be:	4668      	mov	r0, sp
 23f79c0:	f7ff fee0 	bl	23f7784 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23f79c4:	f04f 0302 	mov.w	r3, #2
 23f79c8:	e8d4 2f4f 	ldrexb	r2, [r4]
 23f79cc:	2a00      	cmp	r2, #0
 23f79ce:	d103      	bne.n	23f79d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 23f79d0:	e8c4 3f41 	strexb	r1, r3, [r4]
 23f79d4:	2900      	cmp	r1, #0
 23f79d6:	d1f7      	bne.n	23f79c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 23f79d8:	d121      	bne.n	23f7a1e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
            new(&error_) Error(std::move(error));
 23f79da:	f104 050c 	add.w	r5, r4, #12
 23f79de:	4669      	mov	r1, sp
 23f79e0:	4628      	mov	r0, r5
 23f79e2:	f7ff fecf 	bl	23f7784 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 23f79e6:	2201      	movs	r2, #1
 23f79e8:	1c63      	adds	r3, r4, #1
 23f79ea:	e8c3 2f8f 	stlb	r2, [r3]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23f79ee:	2000      	movs	r0, #0
 23f79f0:	f104 0308 	add.w	r3, r4, #8
 23f79f4:	e8d3 6fef 	ldaex	r6, [r3]
 23f79f8:	e8c3 0fe2 	stlex	r2, r0, [r3]
 23f79fc:	2a00      	cmp	r2, #0
 23f79fe:	d1f9      	bne.n	23f79f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
        if (callbackPtr) {
 23f7a00:	b16e      	cbz	r6, 23f7a1e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
        return (application_thread_current(nullptr) != 0);
 23f7a02:	f7ff f999 	bl	23f6d38 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23f7a06:	b178      	cbz	r0, 23f7a28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x70>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23f7a08:	4629      	mov	r1, r5
 23f7a0a:	4630      	mov	r0, r6
 23f7a0c:	f7ff ff68 	bl	23f78e0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 23f7a10:	4630      	mov	r0, r6
 23f7a12:	f7fd f915 	bl	23f4c40 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23f7a16:	2110      	movs	r1, #16
 23f7a18:	4630      	mov	r0, r6
 23f7a1a:	f7eb fc72 	bl	23e3302 <_ZdlPvj>
        p_->setError(std::move(error));
 23f7a1e:	4668      	mov	r0, sp
 23f7a20:	f7ff febd 	bl	23f779e <_ZN8particle5ErrorD1Ev>
    }
 23f7a24:	b009      	add	sp, #36	; 0x24
 23f7a26:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23f7a28:	4631      	mov	r1, r6
 23f7a2a:	a802      	add	r0, sp, #8
 23f7a2c:	f7ff ffb4 	bl	23f7998 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23f7a30:	68e0      	ldr	r0, [r4, #12]
 23f7a32:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23f7a36:	b108      	cbz	r0, 23f7a3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x84>
 23f7a38:	f004 fd52 	bl	23fc4e0 <strdup>
        type_(type) {
 23f7a3c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23f7a3e:	2010      	movs	r0, #16
 23f7a40:	f8ad 501c 	strh.w	r5, [sp, #28]
 23f7a44:	f7eb fc59 	bl	23e32fa <_Znwj>
 23f7a48:	4605      	mov	r5, r0
 23f7a4a:	b1e8      	cbz	r0, 23f7a88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd0>
    _Function_base() : _M_manager(nullptr) { }
 23f7a4c:	2700      	movs	r7, #0
 23f7a4e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f7a50:	2018      	movs	r0, #24
 23f7a52:	f7eb fc52 	bl	23e32fa <_Znwj>
 23f7a56:	4604      	mov	r4, r0
 23f7a58:	b188      	cbz	r0, 23f7a7e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc6>
	std::swap(_M_functor, __x._M_functor);
 23f7a5a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23f7a5c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23f7a5e:	a802      	add	r0, sp, #8
 23f7a60:	f7fe f90f 	bl	23f5c82 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f7a64:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 23f7a66:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f7a68:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f7a6a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23f7a6c:	9204      	str	r2, [sp, #16]
 23f7a6e:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23f7a70:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 23f7a72:	60e3      	str	r3, [r4, #12]
 23f7a74:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 23f7a78:	9205      	str	r2, [sp, #20]
 23f7a7a:	f7ff fe83 	bl	23f7784 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 23f7a7e:	4b08      	ldr	r3, [pc, #32]	; (23f7aa0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f7a80:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23f7a82:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23f7a84:	4b07      	ldr	r3, [pc, #28]	; (23f7aa4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>)
 23f7a86:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 23f7a88:	a806      	add	r0, sp, #24
 23f7a8a:	f7ff fe88 	bl	23f779e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23f7a8e:	a802      	add	r0, sp, #8
 23f7a90:	f7fd f8d6 	bl	23f4c40 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23f7a94:	2200      	movs	r2, #0
 23f7a96:	4629      	mov	r1, r5
 23f7a98:	4803      	ldr	r0, [pc, #12]	; (23f7aa8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
 23f7a9a:	f7ff f95b 	bl	23f6d54 <application_thread_invoke>
 23f7a9e:	e7b7      	b.n	23f7a10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 23f7aa0:	023f78f3 	.word	0x023f78f3
 23f7aa4:	023f7b85 	.word	0x023f7b85
 23f7aa8:	023f735f 	.word	0x023f735f

023f7aac <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE>:
        PublishFlags flags) {
 23f7aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f7ab0:	b08d      	sub	sp, #52	; 0x34
 23f7ab2:	4604      	mov	r4, r0
 23f7ab4:	460e      	mov	r6, r1
 23f7ab6:	4617      	mov	r7, r2
 23f7ab8:	4699      	mov	r9, r3
 23f7aba:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23f7abe:	f7ff f9e3 	bl	23f6e88 <spark_cloud_flag_connected>
    if (!connected()) {
 23f7ac2:	b940      	cbnz	r0, 23f7ad6 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0x2a>
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 23f7ac4:	f06f 01d1 	mvn.w	r1, #209	; 0xd1
 23f7ac8:	4620      	mov	r0, r4
 23f7aca:	f7ff ff3d 	bl	23f7948 <_ZN8particle10FutureBaseIbNS_6detail13FutureContextEEC1ENS_5Error4TypeE>
}
 23f7ace:	4620      	mov	r0, r4
 23f7ad0:	b00d      	add	sp, #52	; 0x34
 23f7ad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d.size = sizeof(spark_send_event_data);
 23f7ad6:	2014      	movs	r0, #20
    spark_send_event_data d = {};
 23f7ad8:	2500      	movs	r5, #0
    d.content_type = static_cast<int>(type);
 23f7ada:	9b14      	ldr	r3, [sp, #80]	; 0x50
    spark_send_event_data d = {};
 23f7adc:	e9cd 5508 	strd	r5, r5, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 23f7ae0:	9007      	str	r0, [sp, #28]
    d.data_size = size;
 23f7ae2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    d.content_type = static_cast<int>(type);
 23f7ae6:	930b      	str	r3, [sp, #44]	; 0x2c
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 23f7ae8:	f7eb fc07 	bl	23e32fa <_Znwj>
 23f7aec:	4601      	mov	r1, r0
 23f7aee:	b118      	cbz	r0, 23f7af8 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23f7af0:	e9c0 5501 	strd	r5, r5, [r0, #4]
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 23f7af4:	7005      	strb	r5, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23f7af6:	7045      	strb	r5, [r0, #1]
	: __shared_count(__p)
 23f7af8:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23f7afa:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 23f7afc:	f7ff ff10 	bl	23f7920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 23f7b00:	4b1f      	ldr	r3, [pc, #124]	; (23f7b80 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0xd4>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 23f7b02:	2008      	movs	r0, #8
 23f7b04:	9308      	str	r3, [sp, #32]
 23f7b06:	f7eb fbf8 	bl	23e32fa <_Znwj>
 23f7b0a:	4605      	mov	r5, r0
 23f7b0c:	b110      	cbz	r0, 23f7b14 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0x68>
 23f7b0e:	a903      	add	r1, sp, #12
 23f7b10:	f7ff fec2 	bl	23f7898 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(name, data, ttl, flags.value(), &d) && !p.isDone()) {
 23f7b14:	ab07      	add	r3, sp, #28
 23f7b16:	9300      	str	r3, [sp, #0]
 23f7b18:	4639      	mov	r1, r7
 23f7b1a:	4630      	mov	r0, r6
 23f7b1c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 23f7b1e:	fa5f f388 	uxtb.w	r3, r8
    d.handler_data = p.dataPtr();
 23f7b22:	9509      	str	r5, [sp, #36]	; 0x24
    if (!spark_send_event(name, data, ttl, flags.value(), &d) && !p.isDone()) {
 23f7b24:	f7ff f9cc 	bl	23f6ec0 <spark_send_event>
 23f7b28:	b9b8      	cbnz	r0, 23f7b5a <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0xae>
	return __atomic_load_n(&_M_i, int(__m));
 23f7b2a:	9b03      	ldr	r3, [sp, #12]
 23f7b2c:	3301      	adds	r3, #1
 23f7b2e:	781b      	ldrb	r3, [r3, #0]
 23f7b30:	b2db      	uxtb	r3, r3
 23f7b32:	b993      	cbnz	r3, 23f7b5a <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0xae>
        type_(type) {
 23f7b34:	9305      	str	r3, [sp, #20]
 23f7b36:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 23f7b3a:	a905      	add	r1, sp, #20
 23f7b3c:	a803      	add	r0, sp, #12
 23f7b3e:	f8ad 3018 	strh.w	r3, [sp, #24]
 23f7b42:	f7ff ff39 	bl	23f79b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23f7b46:	a805      	add	r0, sp, #20
 23f7b48:	f7ff fe29 	bl	23f779e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 23f7b4c:	a805      	add	r0, sp, #20
 23f7b4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 23f7b50:	f7ff feab 	bl	23f78aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 23f7b54:	a806      	add	r0, sp, #24
 23f7b56:	f7fe f85b 	bl	23f5c10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f7b5a:	a903      	add	r1, sp, #12
 23f7b5c:	a805      	add	r0, sp, #20
 23f7b5e:	f7ff fe9b 	bl	23f7898 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 23f7b62:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23f7b64:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23f7b66:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 23f7b68:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23f7b6a:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 23f7b6c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 23f7b6e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 23f7b70:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 23f7b72:	f7fe f84d 	bl	23f5c10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f7b76:	a804      	add	r0, sp, #16
 23f7b78:	f7fe f84a 	bl	23f5c10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 23f7b7c:	e7a7      	b.n	23f7ace <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0x22>
 23f7b7e:	bf00      	nop
 23f7b80:	023f7c49 	.word	0x023f7c49

023f7b84 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 23f7b84:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23f7b86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f7b88:	4605      	mov	r5, r0
	switch (__op)
 23f7b8a:	d103      	bne.n	23f7b94 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23f7b8c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f7b8e:	6003      	str	r3, [r0, #0]
      }
 23f7b90:	2000      	movs	r0, #0
 23f7b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 23f7b94:	2a02      	cmp	r2, #2
 23f7b96:	d010      	beq.n	23f7bba <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 23f7b98:	2a03      	cmp	r2, #3
 23f7b9a:	d1f9      	bne.n	23f7b90 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23f7b9c:	6804      	ldr	r4, [r0, #0]
 23f7b9e:	2c00      	cmp	r4, #0
 23f7ba0:	d0f6      	beq.n	23f7b90 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 23f7ba2:	f104 0010 	add.w	r0, r4, #16
 23f7ba6:	f7ff fdfa 	bl	23f779e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23f7baa:	4620      	mov	r0, r4
 23f7bac:	f7fd f848 	bl	23f4c40 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23f7bb0:	2118      	movs	r1, #24
 23f7bb2:	4620      	mov	r0, r4
 23f7bb4:	f7eb fba5 	bl	23e3302 <_ZdlPvj>
 23f7bb8:	e7ea      	b.n	23f7b90 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23f7bba:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 23f7bbc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23f7bbe:	f7eb fb9c 	bl	23e32fa <_Znwj>
 23f7bc2:	4604      	mov	r4, r0
 23f7bc4:	b150      	cbz	r0, 23f7bdc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 23f7bc6:	4631      	mov	r1, r6
 23f7bc8:	f7ff fee6 	bl	23f7998 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23f7bcc:	6930      	ldr	r0, [r6, #16]
 23f7bce:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23f7bd2:	b108      	cbz	r0, 23f7bd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 23f7bd4:	f004 fc84 	bl	23fc4e0 <strdup>
        type_(type) {
 23f7bd8:	6120      	str	r0, [r4, #16]
 23f7bda:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 23f7bdc:	602c      	str	r4, [r5, #0]
	}
 23f7bde:	e7d7      	b.n	23f7b90 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

023f7be0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 23f7be0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23f7be2:	2300      	movs	r3, #0
 23f7be4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23f7be6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23f7be8:	4604      	mov	r4, r0
 23f7bea:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23f7bec:	b12b      	cbz	r3, 23f7bfa <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f7bee:	2202      	movs	r2, #2
 23f7bf0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f7bf2:	68eb      	ldr	r3, [r5, #12]
 23f7bf4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23f7bf6:	68ab      	ldr	r3, [r5, #8]
 23f7bf8:	60a3      	str	r3, [r4, #8]
    }
 23f7bfa:	4620      	mov	r0, r4
 23f7bfc:	bd38      	pop	{r3, r4, r5, pc}

023f7bfe <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 23f7bfe:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23f7c00:	b570      	push	{r4, r5, r6, lr}
 23f7c02:	4604      	mov	r4, r0
	switch (__op)
 23f7c04:	d103      	bne.n	23f7c0e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23f7c06:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f7c08:	6003      	str	r3, [r0, #0]
      }
 23f7c0a:	2000      	movs	r0, #0
 23f7c0c:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 23f7c0e:	2a02      	cmp	r2, #2
 23f7c10:	d00c      	beq.n	23f7c2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 23f7c12:	2a03      	cmp	r2, #3
 23f7c14:	d1f9      	bne.n	23f7c0a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23f7c16:	6804      	ldr	r4, [r0, #0]
 23f7c18:	2c00      	cmp	r4, #0
 23f7c1a:	d0f6      	beq.n	23f7c0a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23f7c1c:	4620      	mov	r0, r4
 23f7c1e:	f7fd f80f 	bl	23f4c40 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23f7c22:	2114      	movs	r1, #20
 23f7c24:	4620      	mov	r0, r4
 23f7c26:	f7eb fb6c 	bl	23e3302 <_ZdlPvj>
 23f7c2a:	e7ee      	b.n	23f7c0a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23f7c2c:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 23f7c2e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23f7c30:	f7eb fb63 	bl	23e32fa <_Znwj>
 23f7c34:	4605      	mov	r5, r0
 23f7c36:	b120      	cbz	r0, 23f7c42 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
 23f7c38:	4631      	mov	r1, r6
 23f7c3a:	f7ff ffd1 	bl	23f7be0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 23f7c3e:	7c33      	ldrb	r3, [r6, #16]
 23f7c40:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 23f7c42:	6025      	str	r5, [r4, #0]
	}
 23f7c44:	e7e1      	b.n	23f7c0a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	...

023f7c48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 23f7c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f7c4a:	4604      	mov	r4, r0
 23f7c4c:	b089      	sub	sp, #36	; 0x24
 23f7c4e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 23f7c50:	a801      	add	r0, sp, #4
 23f7c52:	4611      	mov	r1, r2
 23f7c54:	f7ff fe29 	bl	23f78aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 23f7c58:	b1a4      	cbz	r4, 23f7c84 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 23f7c5a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23f7c5c:	b11d      	cbz	r5, 23f7c66 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 23f7c5e:	4628      	mov	r0, r5
 23f7c60:	f004 fc3e 	bl	23fc4e0 <strdup>
 23f7c64:	4605      	mov	r5, r0
 23f7c66:	a801      	add	r0, sp, #4
 23f7c68:	a903      	add	r1, sp, #12
        type_(type) {
 23f7c6a:	9503      	str	r5, [sp, #12]
 23f7c6c:	f8ad 4010 	strh.w	r4, [sp, #16]
 23f7c70:	f7ff fea2 	bl	23f79b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23f7c74:	a803      	add	r0, sp, #12
 23f7c76:	f7ff fd92 	bl	23f779e <_ZN8particle5ErrorD1Ev>
 23f7c7a:	a802      	add	r0, sp, #8
 23f7c7c:	f7fd ffc8 	bl	23f5c10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f7c80:	b009      	add	sp, #36	; 0x24
 23f7c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23f7c84:	2301      	movs	r3, #1
      { return _M_ptr; }
 23f7c86:	9d01      	ldr	r5, [sp, #4]
 23f7c88:	e8d5 2f4f 	ldrexb	r2, [r5]
 23f7c8c:	2a00      	cmp	r2, #0
 23f7c8e:	d103      	bne.n	23f7c98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 23f7c90:	e8c5 3f41 	strexb	r1, r3, [r5]
 23f7c94:	2900      	cmp	r1, #0
 23f7c96:	d1f7      	bne.n	23f7c88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 23f7c98:	d1ef      	bne.n	23f7c7a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 23f7c9a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 23f7c9c:	2201      	movs	r2, #1
 23f7c9e:	18eb      	adds	r3, r5, r3
 23f7ca0:	e8c3 2f8f 	stlb	r2, [r3]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23f7ca4:	1d2b      	adds	r3, r5, #4
 23f7ca6:	e8d3 6fef 	ldaex	r6, [r3]
 23f7caa:	e8c3 4fe2 	stlex	r2, r4, [r3]
 23f7cae:	2a00      	cmp	r2, #0
 23f7cb0:	d1f9      	bne.n	23f7ca6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x5e>
        if (callbackPtr) {
 23f7cb2:	2e00      	cmp	r6, #0
 23f7cb4:	d0e1      	beq.n	23f7c7a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 23f7cb6:	4620      	mov	r0, r4
 23f7cb8:	f7ff f83e 	bl	23f6d38 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23f7cbc:	4607      	mov	r7, r0
 23f7cbe:	b160      	cbz	r0, 23f7cda <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x92>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23f7cc0:	4630      	mov	r0, r6
 23f7cc2:	f105 010c 	add.w	r1, r5, #12
 23f7cc6:	f7ff fe1b 	bl	23f7900 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 23f7cca:	4630      	mov	r0, r6
 23f7ccc:	f7fc ffb8 	bl	23f4c40 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23f7cd0:	2110      	movs	r1, #16
 23f7cd2:	4630      	mov	r0, r6
 23f7cd4:	f7eb fb15 	bl	23e3302 <_ZdlPvj>
 23f7cd8:	e7cf      	b.n	23f7c7a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23f7cda:	4631      	mov	r1, r6
 23f7cdc:	a803      	add	r0, sp, #12
 23f7cde:	f7ff ff7f 	bl	23f7be0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23f7ce2:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23f7ce4:	2010      	movs	r0, #16
 23f7ce6:	f88d 301c 	strb.w	r3, [sp, #28]
 23f7cea:	f7eb fb06 	bl	23e32fa <_Znwj>
 23f7cee:	4605      	mov	r5, r0
 23f7cf0:	b1d0      	cbz	r0, 23f7d28 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe0>
    _Function_base() : _M_manager(nullptr) { }
 23f7cf2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f7cf4:	2014      	movs	r0, #20
 23f7cf6:	f7eb fb00 	bl	23e32fa <_Znwj>
 23f7cfa:	4604      	mov	r4, r0
 23f7cfc:	b178      	cbz	r0, 23f7d1e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xd6>
	std::swap(_M_functor, __x._M_functor);
 23f7cfe:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23f7d00:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23f7d02:	a803      	add	r0, sp, #12
 23f7d04:	f7fd ffbd 	bl	23f5c82 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f7d08:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23f7d0a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f7d0c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f7d0e:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 23f7d10:	9205      	str	r2, [sp, #20]
 23f7d12:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f7d14:	60e3      	str	r3, [r4, #12]
 23f7d16:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 23f7d1a:	9206      	str	r2, [sp, #24]
 23f7d1c:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 23f7d1e:	4b07      	ldr	r3, [pc, #28]	; (23f7d3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f7d20:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23f7d22:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23f7d24:	4b06      	ldr	r3, [pc, #24]	; (23f7d40 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
 23f7d26:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 23f7d28:	a803      	add	r0, sp, #12
 23f7d2a:	f7fc ff89 	bl	23f4c40 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23f7d2e:	2200      	movs	r2, #0
 23f7d30:	4629      	mov	r1, r5
 23f7d32:	4804      	ldr	r0, [pc, #16]	; (23f7d44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 23f7d34:	f7ff f80e 	bl	23f6d54 <application_thread_invoke>
 23f7d38:	e7c7      	b.n	23f7cca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x82>
 23f7d3a:	bf00      	nop
 23f7d3c:	023f7913 	.word	0x023f7913
 23f7d40:	023f7bff 	.word	0x023f7bff
 23f7d44:	023f735f 	.word	0x023f735f

023f7d48 <_GLOBAL__sub_I__ZN8particle10CloudEvent15s_subscriptionsE>:
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 23f7d48:	2200      	movs	r2, #0
 23f7d4a:	4b02      	ldr	r3, [pc, #8]	; (23f7d54 <_GLOBAL__sub_I__ZN8particle10CloudEvent15s_subscriptionsE+0xc>)
 23f7d4c:	e9c3 2200 	strd	r2, r2, [r3]
 23f7d50:	609a      	str	r2, [r3, #8]
        // Keep the reference around until the application callback is called
        d.unwrap();
    }
}

} // namespace particle
 23f7d52:	4770      	bx	lr
 23f7d54:	1007aee4 	.word	0x1007aee4

023f7d58 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23f7d58:	2200      	movs	r2, #0
 23f7d5a:	6840      	ldr	r0, [r0, #4]
 23f7d5c:	4611      	mov	r1, r2
 23f7d5e:	f7ff b973 	b.w	23f7048 <network_listening>

023f7d62 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23f7d62:	2200      	movs	r2, #0
 23f7d64:	6840      	ldr	r0, [r0, #4]
 23f7d66:	4611      	mov	r1, r2
 23f7d68:	f7ff b9a6 	b.w	23f70b8 <network_get_listen_timeout>

023f7d6c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23f7d6c:	2200      	movs	r2, #0
 23f7d6e:	6840      	ldr	r0, [r0, #4]
 23f7d70:	f7ff b994 	b.w	23f709c <network_set_listen_timeout>

023f7d74 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23f7d74:	2200      	movs	r2, #0
 23f7d76:	6840      	ldr	r0, [r0, #4]
 23f7d78:	f081 0101 	eor.w	r1, r1, #1
 23f7d7c:	f7ff b956 	b.w	23f702c <network_listen>

023f7d80 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23f7d80:	2300      	movs	r3, #0
 23f7d82:	6840      	ldr	r0, [r0, #4]
 23f7d84:	461a      	mov	r2, r3
 23f7d86:	4619      	mov	r1, r3
 23f7d88:	f7ff b942 	b.w	23f7010 <network_off>

023f7d8c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23f7d8c:	2300      	movs	r3, #0
 23f7d8e:	6840      	ldr	r0, [r0, #4]
 23f7d90:	461a      	mov	r2, r3
 23f7d92:	4619      	mov	r1, r3
 23f7d94:	f7ff b92e 	b.w	23f6ff4 <network_on>

023f7d98 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23f7d98:	2200      	movs	r2, #0
 23f7d9a:	6840      	ldr	r0, [r0, #4]
 23f7d9c:	4611      	mov	r1, r2
 23f7d9e:	f7ff b91b 	b.w	23f6fd8 <network_ready>

023f7da2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23f7da2:	2200      	movs	r2, #0
 23f7da4:	6840      	ldr	r0, [r0, #4]
 23f7da6:	4611      	mov	r1, r2
 23f7da8:	f7ff b8fa 	b.w	23f6fa0 <network_connecting>

023f7dac <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23f7dac:	2200      	movs	r2, #0
 23f7dae:	2102      	movs	r1, #2
 23f7db0:	6840      	ldr	r0, [r0, #4]
 23f7db2:	f7ff b903 	b.w	23f6fbc <network_disconnect>

023f7db6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23f7db6:	2300      	movs	r3, #0
 23f7db8:	6840      	ldr	r0, [r0, #4]
 23f7dba:	461a      	mov	r2, r3
 23f7dbc:	f7ff b8e2 	b.w	23f6f84 <network_connect>

023f7dc0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
 23f7dc0:	2203      	movs	r2, #3
 23f7dc2:	4b02      	ldr	r3, [pc, #8]	; (23f7dcc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23f7dc4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23f7dc6:	4a02      	ldr	r2, [pc, #8]	; (23f7dd0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23f7dc8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23f7dca:	4770      	bx	lr
 23f7dcc:	1007aef0 	.word	0x1007aef0
 23f7dd0:	023ff91c 	.word	0x023ff91c

023f7dd4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23f7dd4:	4770      	bx	lr

023f7dd6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23f7dd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f7dd8:	4606      	mov	r6, r0
 23f7dda:	4615      	mov	r5, r2
 23f7ddc:	460c      	mov	r4, r1
 23f7dde:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23f7de0:	42bc      	cmp	r4, r7
 23f7de2:	d006      	beq.n	23f7df2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23f7de4:	6833      	ldr	r3, [r6, #0]
 23f7de6:	4630      	mov	r0, r6
 23f7de8:	689b      	ldr	r3, [r3, #8]
 23f7dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 23f7dee:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23f7df0:	e7f6      	b.n	23f7de0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23f7df2:	4628      	mov	r0, r5
 23f7df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f7df6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23f7df6:	2200      	movs	r2, #0
 23f7df8:	7c00      	ldrb	r0, [r0, #16]
 23f7dfa:	f7fe bc8d 	b.w	23f6718 <hal_i2c_write>

023f7dfe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23f7dfe:	2100      	movs	r1, #0
 23f7e00:	7c00      	ldrb	r0, [r0, #16]
 23f7e02:	f7fe bc97 	b.w	23f6734 <hal_i2c_available>

023f7e06 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23f7e06:	2100      	movs	r1, #0
 23f7e08:	7c00      	ldrb	r0, [r0, #16]
 23f7e0a:	f7fe bca1 	b.w	23f6750 <hal_i2c_read>

023f7e0e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23f7e0e:	2100      	movs	r1, #0
 23f7e10:	7c00      	ldrb	r0, [r0, #16]
 23f7e12:	f7fe bcab 	b.w	23f676c <hal_i2c_peek>

023f7e16 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23f7e16:	2100      	movs	r1, #0
 23f7e18:	7c00      	ldrb	r0, [r0, #16]
 23f7e1a:	f7fe bcb5 	b.w	23f6788 <hal_i2c_flush>

023f7e1e <_ZN7TwoWireD0Ev>:
 23f7e1e:	b510      	push	{r4, lr}
 23f7e20:	4604      	mov	r4, r0
 23f7e22:	2114      	movs	r1, #20
 23f7e24:	f7eb fa6d 	bl	23e3302 <_ZdlPvj>
 23f7e28:	4620      	mov	r0, r4
 23f7e2a:	bd10      	pop	{r4, pc}

023f7e2c <_ZNK16WireTransmission9halConfigEv>:
    hal_i2c_transmission_config_t conf = {
 23f7e2c:	2200      	movs	r2, #0
 23f7e2e:	e9c0 2200 	strd	r2, r2, [r0]
 23f7e32:	2218      	movs	r2, #24
 23f7e34:	8002      	strh	r2, [r0, #0]
    };
 23f7e36:	780a      	ldrb	r2, [r1, #0]
 23f7e38:	7102      	strb	r2, [r0, #4]
 23f7e3a:	684a      	ldr	r2, [r1, #4]
 23f7e3c:	6082      	str	r2, [r0, #8]
 23f7e3e:	68ca      	ldr	r2, [r1, #12]
 23f7e40:	60c2      	str	r2, [r0, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0),
 23f7e42:	7a0a      	ldrb	r2, [r1, #8]
 23f7e44:	6102      	str	r2, [r0, #16]
    };
 23f7e46:	690a      	ldr	r2, [r1, #16]
 23f7e48:	6142      	str	r2, [r0, #20]
  }
 23f7e4a:	4770      	bx	lr

023f7e4c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23f7e4c:	b538      	push	{r3, r4, r5, lr}
 23f7e4e:	4604      	mov	r4, r0
 23f7e50:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23f7e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f7e56:	2200      	movs	r2, #0
 23f7e58:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23f7e5c:	4b09      	ldr	r3, [pc, #36]	; (23f7e84 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23f7e5e:	4608      	mov	r0, r1
  _i2c = i2c;
 23f7e60:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23f7e62:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23f7e64:	4629      	mov	r1, r5
 23f7e66:	f7fe fcab 	bl	23f67c0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23f7e6a:	30bf      	adds	r0, #191	; 0xbf
 23f7e6c:	d108      	bne.n	23f7e80 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23f7e6e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23f7e70:	07db      	lsls	r3, r3, #31
 23f7e72:	d505      	bpl.n	23f7e80 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23f7e74:	6868      	ldr	r0, [r5, #4]
 23f7e76:	f7ff f973 	bl	23f7160 <free>
    free(conf.tx_buffer);
 23f7e7a:	68e8      	ldr	r0, [r5, #12]
 23f7e7c:	f7ff f970 	bl	23f7160 <free>
}
 23f7e80:	4620      	mov	r0, r4
 23f7e82:	bd38      	pop	{r3, r4, r5, pc}
 23f7e84:	023ff960 	.word	0x023ff960

023f7e88 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 23f7e88:	2200      	movs	r2, #0
 23f7e8a:	7c00      	ldrb	r0, [r0, #16]
 23f7e8c:	f7fe bc0c 	b.w	23f66a8 <hal_i2c_set_speed>

023f7e90 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23f7e90:	2300      	movs	r3, #0
 23f7e92:	7c00      	ldrb	r0, [r0, #16]
 23f7e94:	461a      	mov	r2, r3
 23f7e96:	4619      	mov	r1, r3
 23f7e98:	f7fe bc14 	b.w	23f66c4 <hal_i2c_begin>

023f7e9c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 23f7e9c:	b510      	push	{r4, lr}
 23f7e9e:	4604      	mov	r4, r0
 23f7ea0:	b086      	sub	sp, #24
  auto conf = transfer.halConfig();
 23f7ea2:	4668      	mov	r0, sp
 23f7ea4:	f7ff ffc2 	bl	23f7e2c <_ZNK16WireTransmission9halConfigEv>
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 23f7ea8:	2200      	movs	r2, #0
 23f7eaa:	4669      	mov	r1, sp
 23f7eac:	7c20      	ldrb	r0, [r4, #16]
 23f7eae:	f7fe fcb1 	bl	23f6814 <hal_i2c_request_ex>
}
 23f7eb2:	b006      	add	sp, #24
 23f7eb4:	bd10      	pop	{r4, pc}

023f7eb6 <_ZN7TwoWire11requestFromEhjh>:
{
 23f7eb6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        buffer_(nullptr) {
 23f7eb8:	f88d 1004 	strb.w	r1, [sp, #4]
 23f7ebc:	2100      	movs	r1, #0
 23f7ebe:	f04f 0c64 	mov.w	ip, #100	; 0x64
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 23f7ec2:	1a5b      	subs	r3, r3, r1
 23f7ec4:	bf18      	it	ne
 23f7ec6:	2301      	movne	r3, #1
 23f7ec8:	e9cd c104 	strd	ip, r1, [sp, #16]
 23f7ecc:	a901      	add	r1, sp, #4
    size_ = size;
 23f7ece:	9202      	str	r2, [sp, #8]
 23f7ed0:	f88d 300c 	strb.w	r3, [sp, #12]
 23f7ed4:	f7ff ffe2 	bl	23f7e9c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 23f7ed8:	b007      	add	sp, #28
 23f7eda:	f85d fb04 	ldr.w	pc, [sp], #4

023f7ede <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 23f7ede:	2301      	movs	r3, #1
 23f7ee0:	f7ff bfe9 	b.w	23f7eb6 <_ZN7TwoWire11requestFromEhjh>

023f7ee4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23f7ee4:	2200      	movs	r2, #0
 23f7ee6:	7c00      	ldrb	r0, [r0, #16]
 23f7ee8:	f7fe bbfa 	b.w	23f66e0 <hal_i2c_begin_transmission>

023f7eec <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 23f7eec:	b2c9      	uxtb	r1, r1
 23f7eee:	f7ff bff9 	b.w	23f7ee4 <_ZN7TwoWire17beginTransmissionEh>

023f7ef2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23f7ef2:	2200      	movs	r2, #0
 23f7ef4:	7c00      	ldrb	r0, [r0, #16]
 23f7ef6:	f7fe bc01 	b.w	23f66fc <hal_i2c_end_transmission>

023f7efa <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 23f7efa:	2101      	movs	r1, #1
 23f7efc:	f7ff bff9 	b.w	23f7ef2 <_ZN7TwoWire15endTransmissionEh>

023f7f00 <_ZN7TwoWire4lockEv>:
{
  return hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 23f7f00:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
 23f7f02:	2100      	movs	r1, #0
 23f7f04:	7c00      	ldrb	r0, [r0, #16]
 23f7f06:	f7fe fc69 	bl	23f67dc <hal_i2c_lock>
}
 23f7f0a:	fab0 f080 	clz	r0, r0
 23f7f0e:	0940      	lsrs	r0, r0, #5
 23f7f10:	bd08      	pop	{r3, pc}

023f7f12 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 23f7f12:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
 23f7f14:	2100      	movs	r1, #0
 23f7f16:	7c00      	ldrb	r0, [r0, #16]
 23f7f18:	f7fe fc6e 	bl	23f67f8 <hal_i2c_unlock>
}
 23f7f1c:	fab0 f080 	clz	r0, r0
 23f7f20:	0940      	lsrs	r0, r0, #5
 23f7f22:	bd08      	pop	{r3, pc}

023f7f24 <_ZN7TwoWire11transactionERK16WireTransmissionS2_>:

#if HAL_PLATFORM_I2C_NUM == 1
int TwoWire::transaction(const WireTransmission& tx, const WireTransmission& rx)
{
 23f7f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f7f28:	b08c      	sub	sp, #48	; 0x30
  auto txConf = tx.halConfig();
 23f7f2a:	466c      	mov	r4, sp
{
 23f7f2c:	4615      	mov	r5, r2
 23f7f2e:	460f      	mov	r7, r1
 23f7f30:	4606      	mov	r6, r0
  auto rxConf = rx.halConfig();
 23f7f32:	f10d 0818 	add.w	r8, sp, #24
  auto txConf = tx.halConfig();
 23f7f36:	4620      	mov	r0, r4
 23f7f38:	f7ff ff78 	bl	23f7e2c <_ZNK16WireTransmission9halConfigEv>
  auto rxConf = rx.halConfig();
 23f7f3c:	4629      	mov	r1, r5
 23f7f3e:	4640      	mov	r0, r8
 23f7f40:	f7ff ff74 	bl	23f7e2c <_ZNK16WireTransmission9halConfigEv>
  return hal_i2c_transaction(_i2c, tx.isValid() ? &txConf : nullptr, rx.isValid() ? &rxConf : nullptr, nullptr);
 23f7f44:	783b      	ldrb	r3, [r7, #0]
 23f7f46:	7c30      	ldrb	r0, [r6, #16]
 23f7f48:	2bff      	cmp	r3, #255	; 0xff
 23f7f4a:	782b      	ldrb	r3, [r5, #0]
 23f7f4c:	bf14      	ite	ne
 23f7f4e:	4621      	movne	r1, r4
 23f7f50:	2100      	moveq	r1, #0
 23f7f52:	2bff      	cmp	r3, #255	; 0xff
 23f7f54:	f04f 0300 	mov.w	r3, #0
 23f7f58:	bf14      	ite	ne
 23f7f5a:	4642      	movne	r2, r8
 23f7f5c:	461a      	moveq	r2, r3
 23f7f5e:	f7fe fc67 	bl	23f6830 <hal_i2c_transaction>
}
 23f7f62:	b00c      	add	sp, #48	; 0x30
 23f7f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f7f68 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t>:
        buffer_(nullptr) {
 23f7f68:	21ff      	movs	r1, #255	; 0xff
 23f7f6a:	2200      	movs	r2, #0
      : address_{address},
 23f7f6c:	4b04      	ldr	r3, [pc, #16]	; (23f7f80 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t+0x18>)
        buffer_(nullptr) {
 23f7f6e:	2001      	movs	r0, #1
 23f7f70:	e9c3 1200 	strd	r1, r2, [r3]
 23f7f74:	2164      	movs	r1, #100	; 0x64
 23f7f76:	611a      	str	r2, [r3, #16]
 23f7f78:	e9c3 0102 	strd	r0, r1, [r3, #8]

namespace particle {
namespace detail {
const WireTransmission WIRE_INVALID_TRANSMISSION(0xff);
} // detail
} // particle
 23f7f7c:	4770      	bx	lr
 23f7f7e:	bf00      	nop
 23f7f80:	1007aef8 	.word	0x1007aef8

023f7f84 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 23f7f84:	4700      	bx	r0
	...

023f7f88 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 23f7f88:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 23f7f8c:	461d      	mov	r5, r3
    hal_interrupt_detach(pin);
    hal_interrupt_extra_configuration_t extra = {};
 23f7f8e:	2400      	movs	r4, #0
{
 23f7f90:	460f      	mov	r7, r1
 23f7f92:	4690      	mov	r8, r2
 23f7f94:	4606      	mov	r6, r0
    hal_interrupt_detach(pin);
 23f7f96:	f7fe fb6b 	bl	23f6670 <hal_interrupt_detach>
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 23f7f9a:	2304      	movs	r3, #4
  if (priority >= 0) {
 23f7f9c:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 23f7f9e:	f88d 3008 	strb.w	r3, [sp, #8]
    extra.IRQChannelSubPriority = subpriority;
 23f7fa2:	bfa8      	it	ge
 23f7fa4:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    hal_interrupt_extra_configuration_t extra = {};
 23f7fa8:	f8cd 4009 	str.w	r4, [sp, #9]
    return &extra;
 23f7fac:	bfa4      	itt	ge
 23f7fae:	ac02      	addge	r4, sp, #8
    extra.IRQChannelSubPriority = subpriority;
 23f7fb0:	f88d 300a 	strbge.w	r3, [sp, #10]
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 23f7fb4:	463a      	mov	r2, r7
 23f7fb6:	4643      	mov	r3, r8
 23f7fb8:	4630      	mov	r0, r6
 23f7fba:	4906      	ldr	r1, [pc, #24]	; (23f7fd4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)
 23f7fbc:	9400      	str	r4, [sp, #0]
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 23f7fbe:	bfa8      	it	ge
 23f7fc0:	f88d 5009 	strbge.w	r5, [sp, #9]
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 23f7fc4:	f7fe fb46 	bl	23f6654 <hal_interrupt_attach>
        return false;
    }
    return true;
}
 23f7fc8:	fab0 f080 	clz	r0, r0
 23f7fcc:	0940      	lsrs	r0, r0, #5
 23f7fce:	b004      	add	sp, #16
 23f7fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f7fd4:	023f7f85 	.word	0x023f7f85

023f7fd8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23f7fd8:	4770      	bx	lr

023f7fda <_ZN9IPAddressD0Ev>:
 23f7fda:	b510      	push	{r4, lr}
 23f7fdc:	4604      	mov	r4, r0
 23f7fde:	2118      	movs	r1, #24
 23f7fe0:	f7eb f98f 	bl	23e3302 <_ZdlPvj>
 23f7fe4:	4620      	mov	r0, r4
 23f7fe6:	bd10      	pop	{r4, pc}

023f7fe8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23f7fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23f7fea:	7d03      	ldrb	r3, [r0, #20]
{
 23f7fec:	460e      	mov	r6, r1
	if (address.v==6) {
 23f7fee:	2b06      	cmp	r3, #6
 23f7ff0:	f04f 0400 	mov.w	r4, #0
{
 23f7ff4:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f7ff6:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23f7ffa:	d012      	beq.n	23f8022 <_ZNK9IPAddress7printToER5Print+0x3a>
 23f7ffc:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
 23f8000:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23f8004:	220a      	movs	r2, #10
 23f8006:	4630      	mov	r0, r6
 23f8008:	f000 fbe1 	bl	23f87ce <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23f800c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23f800e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23f8010:	d019      	beq.n	23f8046 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23f8012:	2c00      	cmp	r4, #0
 23f8014:	d0f4      	beq.n	23f8000 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23f8016:	212e      	movs	r1, #46	; 0x2e
 23f8018:	4630      	mov	r0, r6
 23f801a:	f000 fbbb 	bl	23f8794 <_ZN5Print5printEc>
 23f801e:	4404      	add	r4, r0
 23f8020:	e7ee      	b.n	23f8000 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f8022:	232f      	movs	r3, #47	; 0x2f
 23f8024:	466a      	mov	r2, sp
 23f8026:	4639      	mov	r1, r7
 23f8028:	200a      	movs	r0, #10
		buf[0] = 0;
 23f802a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f802e:	f7fe fc1b 	bl	23f6868 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23f8032:	4668      	mov	r0, sp
 23f8034:	f7eb f93c 	bl	23e32b0 <strlen>
 23f8038:	6833      	ldr	r3, [r6, #0]
 23f803a:	4602      	mov	r2, r0
 23f803c:	4669      	mov	r1, sp
 23f803e:	4630      	mov	r0, r6
 23f8040:	68db      	ldr	r3, [r3, #12]
 23f8042:	4798      	blx	r3
 23f8044:	4604      	mov	r4, r0
    }
    return n;
}
 23f8046:	4620      	mov	r0, r4
 23f8048:	b00d      	add	sp, #52	; 0x34
 23f804a:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f804c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23f804c:	b510      	push	{r4, lr}
 23f804e:	4604      	mov	r4, r0
 23f8050:	4b04      	ldr	r3, [pc, #16]	; (23f8064 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23f8052:	2211      	movs	r2, #17
 23f8054:	2100      	movs	r1, #0
 23f8056:	f840 3b04 	str.w	r3, [r0], #4
 23f805a:	f004 f9c4 	bl	23fc3e6 <memset>
}
 23f805e:	4620      	mov	r0, r4
 23f8060:	bd10      	pop	{r4, pc}
 23f8062:	bf00      	nop
 23f8064:	023ff98c 	.word	0x023ff98c

023f8068 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23f8068:	4603      	mov	r3, r0
 23f806a:	4a07      	ldr	r2, [pc, #28]	; (23f8088 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23f806c:	b510      	push	{r4, lr}
 23f806e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23f8072:	f101 0210 	add.w	r2, r1, #16
 23f8076:	f851 4b04 	ldr.w	r4, [r1], #4
 23f807a:	4291      	cmp	r1, r2
 23f807c:	f843 4b04 	str.w	r4, [r3], #4
 23f8080:	d1f9      	bne.n	23f8076 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23f8082:	780a      	ldrb	r2, [r1, #0]
 23f8084:	701a      	strb	r2, [r3, #0]
}
 23f8086:	bd10      	pop	{r4, pc}
 23f8088:	023ff98c 	.word	0x023ff98c

023f808c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23f808c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23f808e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23f8092:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23f8096:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23f809a:	2304      	movs	r3, #4
 23f809c:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23f80a0:	6041      	str	r1, [r0, #4]
 23f80a2:	7503      	strb	r3, [r0, #20]
}
 23f80a4:	bd10      	pop	{r4, pc}
	...

023f80a8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23f80a8:	b507      	push	{r0, r1, r2, lr}
 23f80aa:	4b06      	ldr	r3, [pc, #24]	; (23f80c4 <_ZN9IPAddressC1EPKh+0x1c>)
 23f80ac:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23f80ae:	78cb      	ldrb	r3, [r1, #3]
 23f80b0:	9300      	str	r3, [sp, #0]
 23f80b2:	788b      	ldrb	r3, [r1, #2]
 23f80b4:	784a      	ldrb	r2, [r1, #1]
 23f80b6:	7809      	ldrb	r1, [r1, #0]
 23f80b8:	f7ff ffe8 	bl	23f808c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23f80bc:	b003      	add	sp, #12
 23f80be:	f85d fb04 	ldr.w	pc, [sp], #4
 23f80c2:	bf00      	nop
 23f80c4:	023ff98c 	.word	0x023ff98c

023f80c8 <_ZN5spark16JSONBufferWriterD1Ev>:
private:
    Print &strm_;
    size_t bytesWritten_;
};

class JSONBufferWriter: public JSONWriter {
 23f80c8:	4770      	bx	lr

023f80ca <_ZN5spark16JSONBufferWriterD0Ev>:
 23f80ca:	b510      	push	{r4, lr}
 23f80cc:	4604      	mov	r4, r0
 23f80ce:	2114      	movs	r1, #20
 23f80d0:	f7eb f917 	bl	23e3302 <_ZdlPvj>
 23f80d4:	4620      	mov	r0, r4
 23f80d6:	bd10      	pop	{r4, pc}

023f80d8 <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 23f80d8:	b538      	push	{r3, r4, r5, lr}
 23f80da:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
 23f80dc:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 23f80e0:	4293      	cmp	r3, r2
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 23f80e2:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
 23f80e4:	d207      	bcs.n	23f80f6 <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
 23f80e6:	1ad2      	subs	r2, r2, r3
 23f80e8:	6880      	ldr	r0, [r0, #8]
 23f80ea:	42aa      	cmp	r2, r5
 23f80ec:	bf28      	it	cs
 23f80ee:	462a      	movcs	r2, r5
 23f80f0:	4418      	add	r0, r3
 23f80f2:	f004 f96b 	bl	23fc3cc <memcpy>
    }
    n_ += size;
 23f80f6:	6922      	ldr	r2, [r4, #16]
 23f80f8:	442a      	add	r2, r5
 23f80fa:	6122      	str	r2, [r4, #16]
}
 23f80fc:	bd38      	pop	{r3, r4, r5, pc}

023f80fe <_ZN5spark16JSONBufferWriter6printfEPKcz>:

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
 23f80fe:	b40e      	push	{r1, r2, r3}
 23f8100:	b517      	push	{r0, r1, r2, r4, lr}
 23f8102:	4604      	mov	r4, r0
 23f8104:	ab05      	add	r3, sp, #20
 23f8106:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 23f810a:	68e1      	ldr	r1, [r4, #12]
    va_start(args, fmt);
 23f810c:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 23f810e:	6903      	ldr	r3, [r0, #16]
 23f8110:	6880      	ldr	r0, [r0, #8]
 23f8112:	428b      	cmp	r3, r1
 23f8114:	bf34      	ite	cc
 23f8116:	1ac9      	subcc	r1, r1, r3
 23f8118:	2100      	movcs	r1, #0
 23f811a:	4418      	add	r0, r3
 23f811c:	9b01      	ldr	r3, [sp, #4]
 23f811e:	f7ff f873 	bl	23f7208 <vsnprintf>
    va_end(args);
    n_ += n;
 23f8122:	6923      	ldr	r3, [r4, #16]
 23f8124:	4418      	add	r0, r3
 23f8126:	6120      	str	r0, [r4, #16]
}
 23f8128:	b003      	add	sp, #12
 23f812a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f812e:	b003      	add	sp, #12
 23f8130:	4770      	bx	lr

023f8132 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23f8132:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23f8134:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23f8136:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23f813a:	2201      	movs	r2, #1
 23f813c:	689b      	ldr	r3, [r3, #8]
 23f813e:	f10d 0107 	add.w	r1, sp, #7
 23f8142:	4798      	blx	r3
}
 23f8144:	b003      	add	sp, #12
 23f8146:	f85d fb04 	ldr.w	pc, [sp], #4

023f814a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23f814a:	b510      	push	{r4, lr}
    write('}');
 23f814c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23f814e:	4604      	mov	r4, r0
    write('}');
 23f8150:	f7ff ffef 	bl	23f8132 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23f8154:	2301      	movs	r3, #1
}
 23f8156:	4620      	mov	r0, r4
    state_ = NEXT;
 23f8158:	7123      	strb	r3, [r4, #4]
}
 23f815a:	bd10      	pop	{r4, pc}

023f815c <_ZN5spark10JSONWriter14writeSeparatorEv>:
void spark::JSONWriter::writeSeparator() {
 23f815c:	b508      	push	{r3, lr}
    switch (state_) {
 23f815e:	7903      	ldrb	r3, [r0, #4]
 23f8160:	2b01      	cmp	r3, #1
 23f8162:	d002      	beq.n	23f816a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23f8164:	2b02      	cmp	r3, #2
 23f8166:	d004      	beq.n	23f8172 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
}
 23f8168:	bd08      	pop	{r3, pc}
        write(',');
 23f816a:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23f816c:	f7ff ffe1 	bl	23f8132 <_ZN5spark10JSONWriter5writeEc>
}
 23f8170:	e7fa      	b.n	23f8168 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23f8172:	213a      	movs	r1, #58	; 0x3a
 23f8174:	e7fa      	b.n	23f816c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023f8176 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23f8176:	b510      	push	{r4, lr}
 23f8178:	4604      	mov	r4, r0
    writeSeparator();
 23f817a:	f7ff ffef 	bl	23f815c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23f817e:	4620      	mov	r0, r4
 23f8180:	217b      	movs	r1, #123	; 0x7b
 23f8182:	f7ff ffd6 	bl	23f8132 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23f8186:	2300      	movs	r3, #0
}
 23f8188:	4620      	mov	r0, r4
    state_ = BEGIN;
 23f818a:	7123      	strb	r3, [r4, #4]
}
 23f818c:	bd10      	pop	{r4, pc}
	...

023f8190 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23f8190:	b513      	push	{r0, r1, r4, lr}
 23f8192:	4604      	mov	r4, r0
 23f8194:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23f8196:	f7ff ffe1 	bl	23f815c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23f819a:	6823      	ldr	r3, [r4, #0]
 23f819c:	4620      	mov	r0, r4
 23f819e:	68db      	ldr	r3, [r3, #12]
 23f81a0:	9a01      	ldr	r2, [sp, #4]
 23f81a2:	4903      	ldr	r1, [pc, #12]	; (23f81b0 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23f81a4:	4798      	blx	r3
    state_ = NEXT;
 23f81a6:	2301      	movs	r3, #1
}
 23f81a8:	4620      	mov	r0, r4
    state_ = NEXT;
 23f81aa:	7123      	strb	r3, [r4, #4]
}
 23f81ac:	b002      	add	sp, #8
 23f81ae:	bd10      	pop	{r4, pc}
 23f81b0:	023ff45d 	.word	0x023ff45d

023f81b4 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23f81b4:	b513      	push	{r0, r1, r4, lr}
 23f81b6:	4604      	mov	r4, r0
 23f81b8:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23f81ba:	f7ff ffcf 	bl	23f815c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23f81be:	6823      	ldr	r3, [r4, #0]
 23f81c0:	4620      	mov	r0, r4
 23f81c2:	68db      	ldr	r3, [r3, #12]
 23f81c4:	9a01      	ldr	r2, [sp, #4]
 23f81c6:	4903      	ldr	r1, [pc, #12]	; (23f81d4 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23f81c8:	4798      	blx	r3
    state_ = NEXT;
 23f81ca:	2301      	movs	r3, #1
}
 23f81cc:	4620      	mov	r0, r4
    state_ = NEXT;
 23f81ce:	7123      	strb	r3, [r4, #4]
}
 23f81d0:	b002      	add	sp, #8
 23f81d2:	bd10      	pop	{r4, pc}
 23f81d4:	023ff5ec 	.word	0x023ff5ec

023f81d8 <_ZN5spark10JSONWriter5valueEm>:
spark::JSONWriter& spark::JSONWriter::value(unsigned long val) {
 23f81d8:	b513      	push	{r0, r1, r4, lr}
 23f81da:	4604      	mov	r4, r0
 23f81dc:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23f81de:	f7ff ffbd 	bl	23f815c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%lu", val);
 23f81e2:	6823      	ldr	r3, [r4, #0]
 23f81e4:	4620      	mov	r0, r4
 23f81e6:	68db      	ldr	r3, [r3, #12]
 23f81e8:	9a01      	ldr	r2, [sp, #4]
 23f81ea:	4903      	ldr	r1, [pc, #12]	; (23f81f8 <_ZN5spark10JSONWriter5valueEm+0x20>)
 23f81ec:	4798      	blx	r3
    state_ = NEXT;
 23f81ee:	2301      	movs	r3, #1
}
 23f81f0:	4620      	mov	r0, r4
    state_ = NEXT;
 23f81f2:	7123      	strb	r3, [r4, #4]
}
 23f81f4:	b002      	add	sp, #8
 23f81f6:	bd10      	pop	{r4, pc}
 23f81f8:	023fd2c0 	.word	0x023fd2c0

023f81fc <_ZN5spark10JSONWriter5valueEy>:
spark::JSONWriter& spark::JSONWriter::value(unsigned long long val) {
 23f81fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f81fe:	4604      	mov	r4, r0
 23f8200:	e9cd 3200 	strd	r3, r2, [sp]
    writeSeparator();
 23f8204:	f7ff ffaa 	bl	23f815c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%llu", val);
 23f8208:	e9dd 3200 	ldrd	r3, r2, [sp]
 23f820c:	6821      	ldr	r1, [r4, #0]
 23f820e:	4620      	mov	r0, r4
 23f8210:	68cd      	ldr	r5, [r1, #12]
 23f8212:	4903      	ldr	r1, [pc, #12]	; (23f8220 <_ZN5spark10JSONWriter5valueEy+0x24>)
 23f8214:	47a8      	blx	r5
    state_ = NEXT;
 23f8216:	2301      	movs	r3, #1
}
 23f8218:	4620      	mov	r0, r4
    state_ = NEXT;
 23f821a:	7123      	strb	r3, [r4, #4]
}
 23f821c:	b003      	add	sp, #12
 23f821e:	bd30      	pop	{r4, r5, pc}
 23f8220:	023ff998 	.word	0x023ff998

023f8224 <_ZN5spark10JSONWriter5valueEdi>:
spark::JSONWriter& spark::JSONWriter::value(double val, int precision) {
 23f8224:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f8228:	4606      	mov	r6, r0
 23f822a:	ec55 4b10 	vmov	r4, r5, d0
 23f822e:	460f      	mov	r7, r1
    writeSeparator();
 23f8230:	f7ff ff94 	bl	23f815c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%.*lf", precision, toFinite(val)); // NaN and infinite values are not permitted by the spec
 23f8234:	6833      	ldr	r3, [r6, #0]
    if (std::isnan(val)) {
 23f8236:	4622      	mov	r2, r4
    printf("%.*lf", precision, toFinite(val)); // NaN and infinite values are not permitted by the spec
 23f8238:	f8d3 a00c 	ldr.w	sl, [r3, #12]
    if (std::isnan(val)) {
 23f823c:	4620      	mov	r0, r4
 23f823e:	462b      	mov	r3, r5
 23f8240:	4629      	mov	r1, r5
 23f8242:	f7ea fc8f 	bl	23e2b64 <__aeabi_dcmpun>
 23f8246:	bb38      	cbnz	r0, 23f8298 <_ZN5spark10JSONWriter5valueEdi+0x74>
 23f8248:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
    if (std::isinf(val)) {
 23f824c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f8250:	4620      	mov	r0, r4
 23f8252:	4649      	mov	r1, r9
 23f8254:	4b13      	ldr	r3, [pc, #76]	; (23f82a4 <_ZN5spark10JSONWriter5valueEdi+0x80>)
 23f8256:	f7ea fc85 	bl	23e2b64 <__aeabi_dcmpun>
 23f825a:	b988      	cbnz	r0, 23f8280 <_ZN5spark10JSONWriter5valueEdi+0x5c>
 23f825c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f8260:	4620      	mov	r0, r4
 23f8262:	4649      	mov	r1, r9
 23f8264:	4b0f      	ldr	r3, [pc, #60]	; (23f82a4 <_ZN5spark10JSONWriter5valueEdi+0x80>)
 23f8266:	f7ea fc5f 	bl	23e2b28 <__aeabi_dcmple>
 23f826a:	b948      	cbnz	r0, 23f8280 <_ZN5spark10JSONWriter5valueEdi+0x5c>
        return (val < 0) ? std::numeric_limits<double>::lowest() : std::numeric_limits<double>::max();
 23f826c:	4620      	mov	r0, r4
 23f826e:	2200      	movs	r2, #0
 23f8270:	2300      	movs	r3, #0
 23f8272:	4629      	mov	r1, r5
 23f8274:	f7ea fc4e 	bl	23e2b14 <__aeabi_dcmplt>
 23f8278:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 23f827c:	b978      	cbnz	r0, 23f829e <_ZN5spark10JSONWriter5valueEdi+0x7a>
 23f827e:	4d09      	ldr	r5, [pc, #36]	; (23f82a4 <_ZN5spark10JSONWriter5valueEdi+0x80>)
    printf("%.*lf", precision, toFinite(val)); // NaN and infinite values are not permitted by the spec
 23f8280:	4630      	mov	r0, r6
 23f8282:	463a      	mov	r2, r7
 23f8284:	e9cd 4500 	strd	r4, r5, [sp]
 23f8288:	4907      	ldr	r1, [pc, #28]	; (23f82a8 <_ZN5spark10JSONWriter5valueEdi+0x84>)
 23f828a:	47d0      	blx	sl
    state_ = NEXT;
 23f828c:	2301      	movs	r3, #1
}
 23f828e:	4630      	mov	r0, r6
    state_ = NEXT;
 23f8290:	7133      	strb	r3, [r6, #4]
}
 23f8292:	b002      	add	sp, #8
 23f8294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return 0;
 23f8298:	2400      	movs	r4, #0
 23f829a:	2500      	movs	r5, #0
 23f829c:	e7f0      	b.n	23f8280 <_ZN5spark10JSONWriter5valueEdi+0x5c>
        return (val < 0) ? std::numeric_limits<double>::lowest() : std::numeric_limits<double>::max();
 23f829e:	f46f 1580 	mvn.w	r5, #1048576	; 0x100000
 23f82a2:	e7ed      	b.n	23f8280 <_ZN5spark10JSONWriter5valueEdi+0x5c>
 23f82a4:	7fefffff 	.word	0x7fefffff
 23f82a8:	023ff99d 	.word	0x023ff99d

023f82ac <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23f82ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f82b0:	460d      	mov	r5, r1
 23f82b2:	4690      	mov	r8, r2
    write('"');
 23f82b4:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23f82b6:	4604      	mov	r4, r0
 23f82b8:	462f      	mov	r7, r5
    write('"');
 23f82ba:	f7ff ff3a 	bl	23f8132 <_ZN5spark10JSONWriter5writeEc>
                printf("u%04x", (unsigned)c);
 23f82be:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23f8364 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23f82c2:	44a8      	add	r8, r5
    while (s != end) {
 23f82c4:	4547      	cmp	r7, r8
 23f82c6:	46ba      	mov	sl, r7
 23f82c8:	d03d      	beq.n	23f8346 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23f82ca:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23f82ce:	2e22      	cmp	r6, #34	; 0x22
 23f82d0:	d006      	beq.n	23f82e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23f82d2:	2e5c      	cmp	r6, #92	; 0x5c
 23f82d4:	d004      	beq.n	23f82e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23f82d6:	4630      	mov	r0, r6
 23f82d8:	f004 f860 	bl	23fc39c <isprint>
 23f82dc:	2800      	cmp	r0, #0
 23f82de:	d1f1      	bne.n	23f82c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23f82e0:	6823      	ldr	r3, [r4, #0]
 23f82e2:	4629      	mov	r1, r5
 23f82e4:	4620      	mov	r0, r4
 23f82e6:	689b      	ldr	r3, [r3, #8]
 23f82e8:	ebaa 0205 	sub.w	r2, sl, r5
 23f82ec:	4798      	blx	r3
            write('\\');
 23f82ee:	215c      	movs	r1, #92	; 0x5c
 23f82f0:	4620      	mov	r0, r4
 23f82f2:	f7ff ff1e 	bl	23f8132 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23f82f6:	2e0d      	cmp	r6, #13
 23f82f8:	d80a      	bhi.n	23f8310 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23f82fa:	2e07      	cmp	r6, #7
 23f82fc:	d91c      	bls.n	23f8338 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23f82fe:	f1a6 0308 	sub.w	r3, r6, #8
 23f8302:	2b05      	cmp	r3, #5
 23f8304:	d818      	bhi.n	23f8338 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23f8306:	e8df f003 	tbb	[pc, r3]
 23f830a:	0f0d      	.short	0x0f0d
 23f830c:	15131711 	.word	0x15131711
 23f8310:	2e22      	cmp	r6, #34	; 0x22
 23f8312:	d001      	beq.n	23f8318 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23f8314:	2e5c      	cmp	r6, #92	; 0x5c
 23f8316:	d10f      	bne.n	23f8338 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23f8318:	4631      	mov	r1, r6
                write('b');
 23f831a:	4620      	mov	r0, r4
 23f831c:	f7ff ff09 	bl	23f8132 <_ZN5spark10JSONWriter5writeEc>
            str = s + 1;
 23f8320:	463d      	mov	r5, r7
    while (s != end) {
 23f8322:	e7cf      	b.n	23f82c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23f8324:	2162      	movs	r1, #98	; 0x62
 23f8326:	e7f8      	b.n	23f831a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23f8328:	2174      	movs	r1, #116	; 0x74
 23f832a:	e7f6      	b.n	23f831a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23f832c:	216e      	movs	r1, #110	; 0x6e
 23f832e:	e7f4      	b.n	23f831a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23f8330:	2166      	movs	r1, #102	; 0x66
 23f8332:	e7f2      	b.n	23f831a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23f8334:	2172      	movs	r1, #114	; 0x72
 23f8336:	e7f0      	b.n	23f831a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23f8338:	6823      	ldr	r3, [r4, #0]
 23f833a:	4632      	mov	r2, r6
 23f833c:	4649      	mov	r1, r9
 23f833e:	4620      	mov	r0, r4
 23f8340:	68db      	ldr	r3, [r3, #12]
 23f8342:	4798      	blx	r3
                break;
 23f8344:	e7ec      	b.n	23f8320 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
    if (s != str) {
 23f8346:	42bd      	cmp	r5, r7
 23f8348:	d005      	beq.n	23f8356 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23f834a:	6823      	ldr	r3, [r4, #0]
 23f834c:	4629      	mov	r1, r5
 23f834e:	4620      	mov	r0, r4
 23f8350:	689b      	ldr	r3, [r3, #8]
 23f8352:	1b7a      	subs	r2, r7, r5
 23f8354:	4798      	blx	r3
    write('"');
 23f8356:	2122      	movs	r1, #34	; 0x22
 23f8358:	4620      	mov	r0, r4
 23f835a:	f7ff feea 	bl	23f8132 <_ZN5spark10JSONWriter5writeEc>
}
 23f835e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f8362:	bf00      	nop
 23f8364:	023ff9a3 	.word	0x023ff9a3

023f8368 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23f8368:	b513      	push	{r0, r1, r4, lr}
 23f836a:	4604      	mov	r4, r0
 23f836c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23f8370:	f7ff fef4 	bl	23f815c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23f8374:	e9dd 2100 	ldrd	r2, r1, [sp]
 23f8378:	4620      	mov	r0, r4
 23f837a:	f7ff ff97 	bl	23f82ac <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23f837e:	2302      	movs	r3, #2
}
 23f8380:	4620      	mov	r0, r4
    state_ = VALUE;
 23f8382:	7123      	strb	r3, [r4, #4]
}
 23f8384:	b002      	add	sp, #8
 23f8386:	bd10      	pop	{r4, pc}

023f8388 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23f8388:	b513      	push	{r0, r1, r4, lr}
 23f838a:	4604      	mov	r4, r0
 23f838c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23f8390:	f7ff fee4 	bl	23f815c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23f8394:	e9dd 2100 	ldrd	r2, r1, [sp]
 23f8398:	4620      	mov	r0, r4
 23f839a:	f7ff ff87 	bl	23f82ac <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23f839e:	2301      	movs	r3, #1
}
 23f83a0:	4620      	mov	r0, r4
    state_ = NEXT;
 23f83a2:	7123      	strb	r3, [r4, #4]
}
 23f83a4:	b002      	add	sp, #8
 23f83a6:	bd10      	pop	{r4, pc}

023f83a8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23f83a8:	4b01      	ldr	r3, [pc, #4]	; (23f83b0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23f83aa:	4a02      	ldr	r2, [pc, #8]	; (23f83b4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23f83ac:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23f83ae:	4770      	bx	lr
 23f83b0:	1007af0c 	.word	0x1007af0c
 23f83b4:	023ff9c4 	.word	0x023ff9c4

023f83b8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23f83b8:	2300      	movs	r3, #0
 23f83ba:	6840      	ldr	r0, [r0, #4]
 23f83bc:	461a      	mov	r2, r3
 23f83be:	f7fe bde1 	b.w	23f6f84 <network_connect>

023f83c2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23f83c2:	2200      	movs	r2, #0
 23f83c4:	2102      	movs	r1, #2
 23f83c6:	6840      	ldr	r0, [r0, #4]
 23f83c8:	f7fe bdf8 	b.w	23f6fbc <network_disconnect>

023f83cc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23f83cc:	2200      	movs	r2, #0
 23f83ce:	6840      	ldr	r0, [r0, #4]
 23f83d0:	4611      	mov	r1, r2
 23f83d2:	f7fe bde5 	b.w	23f6fa0 <network_connecting>

023f83d6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23f83d6:	2200      	movs	r2, #0
 23f83d8:	6840      	ldr	r0, [r0, #4]
 23f83da:	4611      	mov	r1, r2
 23f83dc:	f7fe bdfc 	b.w	23f6fd8 <network_ready>

023f83e0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23f83e0:	2300      	movs	r3, #0
 23f83e2:	6840      	ldr	r0, [r0, #4]
 23f83e4:	461a      	mov	r2, r3
 23f83e6:	4619      	mov	r1, r3
 23f83e8:	f7fe be04 	b.w	23f6ff4 <network_on>

023f83ec <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23f83ec:	2300      	movs	r3, #0
 23f83ee:	6840      	ldr	r0, [r0, #4]
 23f83f0:	461a      	mov	r2, r3
 23f83f2:	4619      	mov	r1, r3
 23f83f4:	f7fe be0c 	b.w	23f7010 <network_off>

023f83f8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23f83f8:	2100      	movs	r1, #0
 23f83fa:	6840      	ldr	r0, [r0, #4]
 23f83fc:	f7fe be6a 	b.w	23f70d4 <network_is_on>

023f8400 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23f8400:	2100      	movs	r1, #0
 23f8402:	6840      	ldr	r0, [r0, #4]
 23f8404:	f7fe be74 	b.w	23f70f0 <network_is_off>

023f8408 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23f8408:	2200      	movs	r2, #0
 23f840a:	6840      	ldr	r0, [r0, #4]
 23f840c:	f081 0101 	eor.w	r1, r1, #1
 23f8410:	f7fe be0c 	b.w	23f702c <network_listen>

023f8414 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23f8414:	2200      	movs	r2, #0
 23f8416:	6840      	ldr	r0, [r0, #4]
 23f8418:	f7fe be40 	b.w	23f709c <network_set_listen_timeout>

023f841c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23f841c:	2200      	movs	r2, #0
 23f841e:	6840      	ldr	r0, [r0, #4]
 23f8420:	4611      	mov	r1, r2
 23f8422:	f7fe be49 	b.w	23f70b8 <network_get_listen_timeout>

023f8426 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23f8426:	2200      	movs	r2, #0
 23f8428:	6840      	ldr	r0, [r0, #4]
 23f842a:	4611      	mov	r1, r2
 23f842c:	f7fe be0c 	b.w	23f7048 <network_listening>

023f8430 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
 23f8430:	2100      	movs	r1, #0
 23f8432:	6840      	ldr	r0, [r0, #4]
 23f8434:	f7fe be78 	b.w	23f7128 <network_is_preferred>

023f8438 <_ZN5spark12NetworkClass7resolveEPKcb>:
}

IPAddress NetworkClass::resolve(const char* name, bool flushCache) {
 23f8438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23f843c:	2600      	movs	r6, #0
IPAddress NetworkClass::resolve(const char* name, bool flushCache) {
 23f843e:	4698      	mov	r8, r3
 23f8440:	b099      	sub	sp, #100	; 0x64
 23f8442:	460d      	mov	r5, r1
 23f8444:	4614      	mov	r4, r2
 23f8446:	4607      	mov	r7, r0
    IPAddress addr;
 23f8448:	f7ff fe00 	bl	23f804c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
 23f844c:	221c      	movs	r2, #28
 23f844e:	4631      	mov	r1, r6
 23f8450:	a811      	add	r0, sp, #68	; 0x44
    struct addrinfo *ai = nullptr;
 23f8452:	9603      	str	r6, [sp, #12]
    struct addrinfo hints = {};
 23f8454:	f003 ffc7 	bl	23fc3e6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
    if (flushCache) {
 23f8458:	f1b8 0f00 	cmp.w	r8, #0
 23f845c:	d12c      	bne.n	23f84b8 <_ZN5spark12NetworkClass7resolveEPKcb+0x80>
    hints.ai_flags = AI_ADDRCONFIG;
 23f845e:	2340      	movs	r3, #64	; 0x40
        return iface_;
 23f8460:	6868      	ldr	r0, [r5, #4]
        hints.ai_flags |= AI_FLUSHCACHE;
 23f8462:	9310      	str	r3, [sp, #64]	; 0x40
    }
    hints.ai_family = AF_UNSPEC;
    if_t iface = nullptr;
 23f8464:	9604      	str	r6, [sp, #16]
    if ((network_interface_t)*this != NETWORK_INTERFACE_ALL) {
 23f8466:	b118      	cbz	r0, 23f8470 <_ZN5spark12NetworkClass7resolveEPKcb+0x38>
        if_get_by_index((network_interface_t)*this, &iface);
 23f8468:	a904      	add	r1, sp, #16
 23f846a:	b2c0      	uxtb	r0, r0
 23f846c:	f7fe f9ee 	bl	23f684c <if_get_by_index>
    }
    const int r = netdb_getaddrinfo_ex(name, nullptr, &hints, &ai, iface);
 23f8470:	9b04      	ldr	r3, [sp, #16]
 23f8472:	4620      	mov	r0, r4
 23f8474:	9300      	str	r3, [sp, #0]
 23f8476:	2100      	movs	r1, #0
 23f8478:	ab03      	add	r3, sp, #12
 23f847a:	aa10      	add	r2, sp, #64	; 0x40
 23f847c:	f7fe fa10 	bl	23f68a0 <netdb_getaddrinfo_ex>
    if (!r) {
 23f8480:	4604      	mov	r4, r0
 23f8482:	2800      	cmp	r0, #0
 23f8484:	d14d      	bne.n	23f8522 <_ZN5spark12NetworkClass7resolveEPKcb+0xea>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23f8486:	4602      	mov	r2, r0
 23f8488:	2101      	movs	r1, #1
 23f848a:	6868      	ldr	r0, [r5, #4]
 23f848c:	f7fe fda4 	bl	23f6fd8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f8490:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23f8492:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f8494:	4622      	mov	r2, r4
 23f8496:	6868      	ldr	r0, [r5, #4]
 23f8498:	f7fe fd9e 	bl	23f6fd8 <network_ready>
        bool ok = false;
 23f849c:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f849e:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23f84a0:	9e03      	ldr	r6, [sp, #12]
 23f84a2:	2e00      	cmp	r6, #0
 23f84a4:	d03d      	beq.n	23f8522 <_ZN5spark12NetworkClass7resolveEPKcb+0xea>
 23f84a6:	2900      	cmp	r1, #0
 23f84a8:	d13b      	bne.n	23f8522 <_ZN5spark12NetworkClass7resolveEPKcb+0xea>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23f84aa:	6873      	ldr	r3, [r6, #4]
 23f84ac:	2b02      	cmp	r3, #2
 23f84ae:	d005      	beq.n	23f84bc <_ZN5spark12NetworkClass7resolveEPKcb+0x84>
 23f84b0:	2b0a      	cmp	r3, #10
 23f84b2:	d013      	beq.n	23f84dc <_ZN5spark12NetworkClass7resolveEPKcb+0xa4>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23f84b4:	69f6      	ldr	r6, [r6, #28]
 23f84b6:	e7f4      	b.n	23f84a2 <_ZN5spark12NetworkClass7resolveEPKcb+0x6a>
        hints.ai_flags |= AI_FLUSHCACHE;
 23f84b8:	4b1d      	ldr	r3, [pc, #116]	; (23f8530 <_ZN5spark12NetworkClass7resolveEPKcb+0xf8>)
 23f84ba:	e7d1      	b.n	23f8460 <_ZN5spark12NetworkClass7resolveEPKcb+0x28>
                case AF_INET: {
                    if (!ipv4) {
 23f84bc:	f1b8 0f00 	cmp.w	r8, #0
 23f84c0:	d0f8      	beq.n	23f84b4 <_ZN5spark12NetworkClass7resolveEPKcb+0x7c>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23f84c2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23f84c4:	a80a      	add	r0, sp, #40	; 0x28
 23f84c6:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23f84c8:	1d3c      	adds	r4, r7, #4
 23f84ca:	ad0b      	add	r5, sp, #44	; 0x2c
        return *this = IPAddress(address);
 23f84cc:	f7ff fdec 	bl	23f80a8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23f84d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f84d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f84d4:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23f84d6:	4641      	mov	r1, r8
 23f84d8:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23f84da:	e7eb      	b.n	23f84b4 <_ZN5spark12NetworkClass7resolveEPKcb+0x7c>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23f84dc:	f1b9 0f00 	cmp.w	r9, #0
 23f84e0:	d0e8      	beq.n	23f84b4 <_ZN5spark12NetworkClass7resolveEPKcb+0x7c>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23f84e2:	2210      	movs	r2, #16
 23f84e4:	a805      	add	r0, sp, #20
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23f84e6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23f84e8:	f003 ff7d 	bl	23fc3e6 <memset>
                    a.v = 6;
 23f84ec:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23f84ee:	ad05      	add	r5, sp, #20
                    a.v = 6;
 23f84f0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23f84f4:	f104 0308 	add.w	r3, r4, #8
 23f84f8:	3418      	adds	r4, #24
 23f84fa:	462a      	mov	r2, r5
 23f84fc:	6818      	ldr	r0, [r3, #0]
 23f84fe:	6859      	ldr	r1, [r3, #4]
 23f8500:	3308      	adds	r3, #8
 23f8502:	c203      	stmia	r2!, {r0, r1}
 23f8504:	42a3      	cmp	r3, r4
 23f8506:	4615      	mov	r5, r2
 23f8508:	d1f7      	bne.n	23f84fa <_ZN5spark12NetworkClass7resolveEPKcb+0xc2>
                    addr = IPAddress(a);
 23f850a:	a905      	add	r1, sp, #20
 23f850c:	a80a      	add	r0, sp, #40	; 0x28
class IPAddress : public Printable {
 23f850e:	1d3c      	adds	r4, r7, #4
 23f8510:	ad0b      	add	r5, sp, #44	; 0x2c
 23f8512:	f7ff fda9 	bl	23f8068 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23f8516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f8518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f851a:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23f851c:	4649      	mov	r1, r9
 23f851e:	7023      	strb	r3, [r4, #0]
                    break;
 23f8520:	e7c8      	b.n	23f84b4 <_ZN5spark12NetworkClass7resolveEPKcb+0x7c>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23f8522:	9803      	ldr	r0, [sp, #12]
 23f8524:	f7fe f9ae 	bl	23f6884 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23f8528:	4638      	mov	r0, r7
 23f852a:	b019      	add	sp, #100	; 0x64
 23f852c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23f8530:	40000040 	.word	0x40000040

023f8534 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
 23f8534:	3803      	subs	r0, #3
 23f8536:	2803      	cmp	r0, #3
 23f8538:	bf9a      	itte	ls
 23f853a:	4b02      	ldrls	r3, [pc, #8]	; (23f8544 <_ZN5spark12NetworkClass4fromEm+0x10>)
 23f853c:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
 23f8540:	4801      	ldrhi	r0, [pc, #4]	; (23f8548 <_ZN5spark12NetworkClass4fromEm+0x14>)
}
 23f8542:	4770      	bx	lr
 23f8544:	023ff9c8 	.word	0x023ff9c8
 23f8548:	1007af10 	.word	0x1007af10

023f854c <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
 23f854c:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
 23f854e:	2200      	movs	r2, #0
 23f8550:	6840      	ldr	r0, [r0, #4]
 23f8552:	f7fe fddb 	bl	23f710c <network_prefer>
}
 23f8556:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
 23f855a:	f7ff bfeb 	b.w	23f8534 <_ZN5spark12NetworkClass4fromEm>
	...

023f8560 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
            : iface_(iface) {
 23f8560:	4b02      	ldr	r3, [pc, #8]	; (23f856c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23f8562:	4a03      	ldr	r2, [pc, #12]	; (23f8570 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23f8564:	601a      	str	r2, [r3, #0]
 23f8566:	2200      	movs	r2, #0
 23f8568:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23f856a:	4770      	bx	lr
 23f856c:	1007af10 	.word	0x1007af10
 23f8570:	023ff9e0 	.word	0x023ff9e0

023f8574 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    config.quantity(sizeof(buf));
    pmicWireInstance()->transaction(config);
#endif // (HAL_PLATFORM_I2C_NUM != 1)
}

bool PMIC::lock() {
 23f8574:	b508      	push	{r3, lr}
            return &Wire;
 23f8576:	f001 f955 	bl	23f9824 <_Z19__fetch_global_Wirev>
    return pmicWireInstance()->lock();
}
 23f857a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
 23f857e:	f7ff bcbf 	b.w	23f7f00 <_ZN7TwoWire4lockEv>

023f8582 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
 23f8582:	b510      	push	{r4, lr}
 23f8584:	4604      	mov	r4, r0
    lock_(_lock)
 23f8586:	7001      	strb	r1, [r0, #0]
    if (lock_) {
 23f8588:	b109      	cbz	r1, 23f858e <_ZN4PMICC1Eb+0xc>
        lock();
 23f858a:	f7ff fff3 	bl	23f8574 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
 23f858e:	4620      	mov	r0, r4
 23f8590:	bd10      	pop	{r4, pc}

023f8592 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
 23f8592:	b508      	push	{r3, lr}
            return &Wire;
 23f8594:	f001 f946 	bl	23f9824 <_Z19__fetch_global_Wirev>
    return pmicWireInstance()->unlock();
}
 23f8598:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
 23f859c:	f7ff bcb9 	b.w	23f7f12 <_ZN7TwoWire6unlockEv>

023f85a0 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23f85a0:	b510      	push	{r4, lr}
 23f85a2:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 23f85a4:	6800      	ldr	r0, [r0, #0]
 23f85a6:	f7ff fff4 	bl	23f8592 <_ZN4PMIC6unlockEv>
 23f85aa:	4620      	mov	r0, r4
 23f85ac:	bd10      	pop	{r4, pc}

023f85ae <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
 23f85ae:	b510      	push	{r4, lr}
 23f85b0:	b08e      	sub	sp, #56	; 0x38
 23f85b2:	f88d 1007 	strb.w	r1, [sp, #7]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f85b6:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
 23f85b8:	f7ff ffdc 	bl	23f8574 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    buffer_ = buf;
 23f85bc:	f10d 0307 	add.w	r3, sp, #7
 23f85c0:	9308      	str	r3, [sp, #32]
    size_ = size;
 23f85c2:	2301      	movs	r3, #1
    byte DATA = 0;
 23f85c4:	2400      	movs	r4, #0
        buffer_(nullptr) {
 23f85c6:	216b      	movs	r1, #107	; 0x6b
    timeout_ = ms;
 23f85c8:	220a      	movs	r2, #10
    size_ = size;
 23f85ca:	9305      	str	r3, [sp, #20]
        buffer_(nullptr) {
 23f85cc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    size_ = size;
 23f85d0:	930a      	str	r3, [sp, #40]	; 0x28
    buffer_ = buf;
 23f85d2:	f10d 030b 	add.w	r3, sp, #11
 23f85d6:	930d      	str	r3, [sp, #52]	; 0x34
 23f85d8:	f88d 400b 	strb.w	r4, [sp, #11]
        buffer_(nullptr) {
 23f85dc:	f88d 1010 	strb.w	r1, [sp, #16]
    timeout_ = ms;
 23f85e0:	9207      	str	r2, [sp, #28]
    stop_ = stop;
 23f85e2:	f88d 4018 	strb.w	r4, [sp, #24]
        buffer_(nullptr) {
 23f85e6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
    timeout_ = ms;
 23f85ea:	920c      	str	r2, [sp, #48]	; 0x30
            return &Wire;
 23f85ec:	f001 f91a 	bl	23f9824 <_Z19__fetch_global_Wirev>
    auto r = pmicWireInstance()->transaction(config, rxConfig);
 23f85f0:	aa09      	add	r2, sp, #36	; 0x24
 23f85f2:	a904      	add	r1, sp, #16
 23f85f4:	f7ff fc96 	bl	23f7f24 <_ZN7TwoWire11transactionERK16WireTransmissionS2_>
    if (r != 1) {
 23f85f8:	2801      	cmp	r0, #1
        DATA = 0;
 23f85fa:	bf18      	it	ne
 23f85fc:	f88d 400b 	strbne.w	r4, [sp, #11]
    return DATA;
 23f8600:	f89d 400b 	ldrb.w	r4, [sp, #11]
    std::lock_guard<PMIC> l(*this);
 23f8604:	a803      	add	r0, sp, #12
 23f8606:	f7ff ffcb 	bl	23f85a0 <_ZNSt10lock_guardI4PMICED1Ev>
}
 23f860a:	4620      	mov	r0, r4
 23f860c:	b00e      	add	sp, #56	; 0x38
 23f860e:	bd10      	pop	{r4, pc}

023f8610 <_ZN4PMIC8getFaultEv>:
    DATA = readRegister(FAULT_REGISTER);
 23f8610:	2109      	movs	r1, #9
 23f8612:	f7ff bfcc 	b.w	23f85ae <_ZN4PMIC12readRegisterEh>
	...

023f8618 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
 23f8618:	b530      	push	{r4, r5, lr}
 23f861a:	b089      	sub	sp, #36	; 0x24
 23f861c:	460d      	mov	r5, r1
 23f861e:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f8620:	9002      	str	r0, [sp, #8]
      { _M_device.lock(); }
 23f8622:	f7ff ffa7 	bl	23f8574 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        buffer_(nullptr) {
 23f8626:	236b      	movs	r3, #107	; 0x6b
 23f8628:	f88d 300c 	strb.w	r3, [sp, #12]
 23f862c:	2301      	movs	r3, #1
 23f862e:	f88d 3014 	strb.w	r3, [sp, #20]
    timeout_ = ms;
 23f8632:	230a      	movs	r3, #10
 23f8634:	9306      	str	r3, [sp, #24]
    buffer_ = buf;
 23f8636:	ab01      	add	r3, sp, #4
 23f8638:	9307      	str	r3, [sp, #28]
    size_ = size;
 23f863a:	2302      	movs	r3, #2
    uint8_t buf[2] = {address, DATA};
 23f863c:	f88d 5004 	strb.w	r5, [sp, #4]
 23f8640:	9304      	str	r3, [sp, #16]
 23f8642:	f88d 4005 	strb.w	r4, [sp, #5]
            return &Wire;
 23f8646:	f001 f8ed 	bl	23f9824 <_Z19__fetch_global_Wirev>
    pmicWireInstance()->transaction(config);
 23f864a:	4a04      	ldr	r2, [pc, #16]	; (23f865c <_ZN4PMIC13writeRegisterEhh+0x44>)
 23f864c:	a903      	add	r1, sp, #12
 23f864e:	f7ff fc69 	bl	23f7f24 <_ZN7TwoWire11transactionERK16WireTransmissionS2_>
    std::lock_guard<PMIC> l(*this);
 23f8652:	a802      	add	r0, sp, #8
 23f8654:	f7ff ffa4 	bl	23f85a0 <_ZNSt10lock_guardI4PMICED1Ev>
}
 23f8658:	b009      	add	sp, #36	; 0x24
 23f865a:	bd30      	pop	{r4, r5, pc}
 23f865c:	1007aef8 	.word	0x1007aef8

023f8660 <_ZN4PMIC12enableBATFETEv>:
bool PMIC::enableBATFET(void) {
 23f8660:	b513      	push	{r0, r1, r4, lr}
 23f8662:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f8664:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 23f8666:	f7ff ff85 	bl	23f8574 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(MISC_CONTROL_REGISTER);
 23f866a:	2107      	movs	r1, #7
 23f866c:	4620      	mov	r0, r4
 23f866e:	f7ff ff9e 	bl	23f85ae <_ZN4PMIC12readRegisterEh>
    writeRegister(MISC_CONTROL_REGISTER, (DATA & 0b11011111));
 23f8672:	2107      	movs	r1, #7
 23f8674:	f000 02df 	and.w	r2, r0, #223	; 0xdf
 23f8678:	4620      	mov	r0, r4
 23f867a:	f7ff ffcd 	bl	23f8618 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 23f867e:	a801      	add	r0, sp, #4
 23f8680:	f7ff ff8e 	bl	23f85a0 <_ZNSt10lock_guardI4PMICED1Ev>
}
 23f8684:	2001      	movs	r0, #1
 23f8686:	b002      	add	sp, #8
 23f8688:	bd10      	pop	{r4, pc}

023f868a <_ZN4PMIC13disableBATFETEv>:
bool PMIC::disableBATFET(void) {
 23f868a:	b513      	push	{r0, r1, r4, lr}
 23f868c:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f868e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 23f8690:	f7ff ff70 	bl	23f8574 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(MISC_CONTROL_REGISTER);
 23f8694:	2107      	movs	r1, #7
 23f8696:	4620      	mov	r0, r4
 23f8698:	f7ff ff89 	bl	23f85ae <_ZN4PMIC12readRegisterEh>
    writeRegister(MISC_CONTROL_REGISTER, (DATA | 0b00100000));
 23f869c:	f040 0020 	orr.w	r0, r0, #32
 23f86a0:	b2c2      	uxtb	r2, r0
 23f86a2:	2107      	movs	r1, #7
 23f86a4:	4620      	mov	r0, r4
 23f86a6:	f7ff ffb7 	bl	23f8618 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 23f86aa:	a801      	add	r0, sp, #4
 23f86ac:	f7ff ff78 	bl	23f85a0 <_ZNSt10lock_guardI4PMICED1Ev>
}
 23f86b0:	2001      	movs	r0, #1
 23f86b2:	b002      	add	sp, #8
 23f86b4:	bd10      	pop	{r4, pc}

023f86b6 <_ZN8particle18OutputStringStream5writeEh>:
    size_t write(uint8_t b) override {
 23f86b6:	b507      	push	{r0, r1, r2, lr}
        return write(&b, 1);
 23f86b8:	6803      	ldr	r3, [r0, #0]
    size_t write(uint8_t b) override {
 23f86ba:	f88d 1007 	strb.w	r1, [sp, #7]
        return write(&b, 1);
 23f86be:	2201      	movs	r2, #1
 23f86c0:	68db      	ldr	r3, [r3, #12]
 23f86c2:	f10d 0107 	add.w	r1, sp, #7
 23f86c6:	4798      	blx	r3
    }
 23f86c8:	b003      	add	sp, #12
 23f86ca:	f85d fb04 	ldr.w	pc, [sp], #4

023f86ce <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23f86ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f86d0:	4606      	mov	r6, r0
 23f86d2:	460d      	mov	r5, r1
  size_t n = 0;
 23f86d4:	2400      	movs	r4, #0
 23f86d6:	188f      	adds	r7, r1, r2
  while (size--) {
 23f86d8:	42bd      	cmp	r5, r7
 23f86da:	d00c      	beq.n	23f86f6 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23f86dc:	6833      	ldr	r3, [r6, #0]
 23f86de:	4630      	mov	r0, r6
 23f86e0:	689b      	ldr	r3, [r3, #8]
 23f86e2:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f86e6:	4798      	blx	r3
     if (chunk>=0)
 23f86e8:	1e03      	subs	r3, r0, #0
 23f86ea:	db01      	blt.n	23f86f0 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23f86ec:	441c      	add	r4, r3
  while (size--) {
 23f86ee:	e7f3      	b.n	23f86d8 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23f86f0:	2c00      	cmp	r4, #0
 23f86f2:	bf08      	it	eq
 23f86f4:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23f86f6:	4620      	mov	r0, r4
 23f86f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f86fa <_ZN8particle18OutputStringStreamD1Ev>:
class OutputStringStream: public Print {
 23f86fa:	4770      	bx	lr

023f86fc <_ZN8particle18OutputStringStreamD0Ev>:
 23f86fc:	b510      	push	{r4, lr}
 23f86fe:	4604      	mov	r4, r0
 23f8700:	210c      	movs	r1, #12
 23f8702:	f7ea fdfe 	bl	23e3302 <_ZdlPvj>
 23f8706:	4620      	mov	r0, r4
 23f8708:	bd10      	pop	{r4, pc}
	...

023f870c <_ZN8particle18OutputStringStream5writeEPKhj>:
    return n;
}

namespace particle {

size_t OutputStringStream::write(const uint8_t* data, size_t size) {
 23f870c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (getWriteError()) {
 23f870e:	6843      	ldr	r3, [r0, #4]
size_t OutputStringStream::write(const uint8_t* data, size_t size) {
 23f8710:	4605      	mov	r5, r0
 23f8712:	460e      	mov	r6, r1
 23f8714:	4614      	mov	r4, r2
    if (getWriteError()) {
 23f8716:	b9d3      	cbnz	r3, 23f874e <_ZN8particle18OutputStringStream5writeEPKhj+0x42>
        return 0;
    }
    size_t newSize = s_.length() + size;
 23f8718:	6880      	ldr	r0, [r0, #8]
 23f871a:	6882      	ldr	r2, [r0, #8]
    unsigned char reserve(unsigned int size);
    bool resize(size_t size);
    inline unsigned int length(void) const {return len;}

    unsigned int capacity() const {
        return capacity_;
 23f871c:	6843      	ldr	r3, [r0, #4]
 23f871e:	4422      	add	r2, r4
    if (s_.capacity() < newSize && !s_.reserve(std::max<size_t>({ newSize, s_.capacity() * 3 / 2, 20 }))) {
 23f8720:	429a      	cmp	r2, r3
 23f8722:	d916      	bls.n	23f8752 <_ZN8particle18OutputStringStream5writeEPKhj+0x46>
 23f8724:	2114      	movs	r1, #20
 23f8726:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f872a:	085b      	lsrs	r3, r3, #1
		  _Compare __comp)
    {
      if (__first == __last) return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
	if (__comp(__result, __first))
 23f872c:	429a      	cmp	r2, r3
 23f872e:	9302      	str	r3, [sp, #8]
 23f8730:	9201      	str	r2, [sp, #4]
      _ForwardIterator __result = __first;
 23f8732:	bf2c      	ite	cs
 23f8734:	ab01      	addcs	r3, sp, #4
      while (++__first != __last)
 23f8736:	ab02      	addcc	r3, sp, #8
 23f8738:	9103      	str	r1, [sp, #12]
	if (__comp(__result, __first))
 23f873a:	681a      	ldr	r2, [r3, #0]
 23f873c:	2a13      	cmp	r2, #19
      while (++__first != __last)
 23f873e:	bf98      	it	ls
 23f8740:	ab03      	addls	r3, sp, #12
 23f8742:	6819      	ldr	r1, [r3, #0]
 23f8744:	f000 f9fb 	bl	23f8b3e <_ZN6String7reserveEj>
 23f8748:	b918      	cbnz	r0, 23f8752 <_ZN8particle18OutputStringStream5writeEPKhj+0x46>
    void setWriteError(int err = 1) { write_error = err; }
 23f874a:	4b06      	ldr	r3, [pc, #24]	; (23f8764 <_ZN8particle18OutputStringStream5writeEPKhj+0x58>)
 23f874c:	606b      	str	r3, [r5, #4]
        return 0;
 23f874e:	2400      	movs	r4, #0
 23f8750:	e004      	b.n	23f875c <_ZN8particle18OutputStringStream5writeEPKhj+0x50>
        setWriteError(Error::NO_MEMORY);
        return 0;
    }
    s_.concat((const char*)data, size);
 23f8752:	4622      	mov	r2, r4
 23f8754:	4631      	mov	r1, r6
 23f8756:	68a8      	ldr	r0, [r5, #8]
 23f8758:	f000 fa4c 	bl	23f8bf4 <_ZN6String6concatEPKcj>
    return size;
}
 23f875c:	4620      	mov	r0, r4
 23f875e:	b004      	add	sp, #16
 23f8760:	bd70      	pop	{r4, r5, r6, pc}
 23f8762:	bf00      	nop
 23f8764:	fffffefc 	.word	0xfffffefc

023f8768 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23f8768:	b513      	push	{r0, r1, r4, lr}
 23f876a:	4604      	mov	r4, r0
    }
 23f876c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23f876e:	b159      	cbz	r1, 23f8788 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23f8770:	9101      	str	r1, [sp, #4]
 23f8772:	f7ea fd9d 	bl	23e32b0 <strlen>
 23f8776:	4602      	mov	r2, r0
 23f8778:	4620      	mov	r0, r4
 23f877a:	6823      	ldr	r3, [r4, #0]
 23f877c:	9901      	ldr	r1, [sp, #4]
 23f877e:	68db      	ldr	r3, [r3, #12]
    }
 23f8780:	b002      	add	sp, #8
 23f8782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23f8786:	4718      	bx	r3
    }
 23f8788:	b002      	add	sp, #8
 23f878a:	bd10      	pop	{r4, pc}

023f878c <_ZN5Print5printEPKc>:
{
 23f878c:	b508      	push	{r3, lr}
  return write(str);
 23f878e:	f7ff ffeb 	bl	23f8768 <_ZN5Print5writeEPKc>
}
 23f8792:	bd08      	pop	{r3, pc}

023f8794 <_ZN5Print5printEc>:
  return write(c);
 23f8794:	6803      	ldr	r3, [r0, #0]
 23f8796:	689b      	ldr	r3, [r3, #8]
 23f8798:	4718      	bx	r3

023f879a <_ZN5Print5printEPK19__FlashStringHelper>:
 23f879a:	b508      	push	{r3, lr}
 23f879c:	f7ff ffe4 	bl	23f8768 <_ZN5Print5writeEPKc>
 23f87a0:	bd08      	pop	{r3, pc}

023f87a2 <_ZN5Print7printlnEv>:
{
 23f87a2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23f87a4:	210d      	movs	r1, #13
{
 23f87a6:	4605      	mov	r5, r0
  size_t n = print('\r');
 23f87a8:	f7ff fff4 	bl	23f8794 <_ZN5Print5printEc>
  n += print('\n');
 23f87ac:	210a      	movs	r1, #10
  size_t n = print('\r');
 23f87ae:	4604      	mov	r4, r0
  n += print('\n');
 23f87b0:	4628      	mov	r0, r5
 23f87b2:	f7ff ffef 	bl	23f8794 <_ZN5Print5printEc>
}
 23f87b6:	4420      	add	r0, r4
 23f87b8:	bd38      	pop	{r3, r4, r5, pc}

023f87ba <_ZN5Print7printlnEPKc>:
{
 23f87ba:	b538      	push	{r3, r4, r5, lr}
 23f87bc:	4605      	mov	r5, r0
  return write(str);
 23f87be:	f7ff ffd3 	bl	23f8768 <_ZN5Print5writeEPKc>
 23f87c2:	4604      	mov	r4, r0
  n += println();
 23f87c4:	4628      	mov	r0, r5
 23f87c6:	f7ff ffec 	bl	23f87a2 <_ZN5Print7printlnEv>
}
 23f87ca:	4420      	add	r0, r4
 23f87cc:	bd38      	pop	{r3, r4, r5, pc}

023f87ce <_ZN5Print11printNumberEmh>:
  *str = '\0';
 23f87ce:	2300      	movs	r3, #0
  if (base < 2) base = 10;
 23f87d0:	2a01      	cmp	r2, #1
 23f87d2:	bf98      	it	ls
 23f87d4:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23f87d6:	b530      	push	{r4, r5, lr}
 23f87d8:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23f87da:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23f87de:	ac09      	add	r4, sp, #36	; 0x24
   n /= base;
 23f87e0:	460d      	mov	r5, r1
 23f87e2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23f87e6:	fb01 5312 	mls	r3, r1, r2, r5
 23f87ea:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23f87ee:	2b09      	cmp	r3, #9
 23f87f0:	bf94      	ite	ls
 23f87f2:	3330      	addls	r3, #48	; 0x30
 23f87f4:	3337      	addhi	r3, #55	; 0x37
 23f87f6:	b2db      	uxtb	r3, r3
  } while(n);
 23f87f8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23f87fa:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23f87fe:	d9ef      	bls.n	23f87e0 <_ZN5Print11printNumberEmh+0x12>
  return write(str);
 23f8800:	4621      	mov	r1, r4
 23f8802:	f7ff ffb1 	bl	23f8768 <_ZN5Print5writeEPKc>
}
 23f8806:	b00b      	add	sp, #44	; 0x2c
 23f8808:	bd30      	pop	{r4, r5, pc}

023f880a <_ZN5Print7vprintfEbPKcSt9__va_list>:
{
 23f880a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f880e:	b086      	sub	sp, #24
 23f8810:	af00      	add	r7, sp, #0
 23f8812:	4605      	mov	r5, r0
 23f8814:	460e      	mov	r6, r1
    size_t n = vsnprintf(test, bufsize, format, args);
 23f8816:	1d38      	adds	r0, r7, #4
 23f8818:	2114      	movs	r1, #20
{
 23f881a:	4614      	mov	r4, r2
    va_copy(args2, args);
 23f881c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 23f881e:	f7fe fcf3 	bl	23f7208 <vsnprintf>
    if (n<bufsize)
 23f8822:	2813      	cmp	r0, #19
 23f8824:	d80e      	bhi.n	23f8844 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 23f8826:	4628      	mov	r0, r5
 23f8828:	1d39      	adds	r1, r7, #4
 23f882a:	f7ff ff9d 	bl	23f8768 <_ZN5Print5writeEPKc>
 23f882e:	4604      	mov	r4, r0
    if (newline)
 23f8830:	b11e      	cbz	r6, 23f883a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 23f8832:	4628      	mov	r0, r5
 23f8834:	f7ff ffb5 	bl	23f87a2 <_ZN5Print7printlnEv>
 23f8838:	4404      	add	r4, r0
}
 23f883a:	4620      	mov	r0, r4
 23f883c:	3718      	adds	r7, #24
 23f883e:	46bd      	mov	sp, r7
 23f8840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 23f8844:	f100 0308 	add.w	r3, r0, #8
 23f8848:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 23f884c:	46e8      	mov	r8, sp
        char bigger[n+1];
 23f884e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 23f8852:	4622      	mov	r2, r4
 23f8854:	1c41      	adds	r1, r0, #1
 23f8856:	683b      	ldr	r3, [r7, #0]
 23f8858:	4668      	mov	r0, sp
 23f885a:	f7fe fcd5 	bl	23f7208 <vsnprintf>
  return write(str);
 23f885e:	4669      	mov	r1, sp
 23f8860:	4628      	mov	r0, r5
 23f8862:	f7ff ff81 	bl	23f8768 <_ZN5Print5writeEPKc>
 23f8866:	4604      	mov	r4, r0
 23f8868:	46c5      	mov	sp, r8
 23f886a:	e7e1      	b.n	23f8830 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

023f886c <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
 23f886c:	b510      	push	{r4, lr}
  if (0 == max) {
 23f886e:	4604      	mov	r4, r0
 23f8870:	b128      	cbz	r0, 23f887e <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
 23f8872:	f003 fdef 	bl	23fc454 <rand>
 23f8876:	fb90 f3f4 	sdiv	r3, r0, r4
 23f887a:	fb03 0414 	mls	r4, r3, r4, r0
}
 23f887e:	4620      	mov	r0, r4
 23f8880:	bd10      	pop	{r4, pc}

023f8882 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
 23f8882:	4288      	cmp	r0, r1
{
 23f8884:	b510      	push	{r4, lr}
 23f8886:	4604      	mov	r4, r0
  if (min >= max) {
 23f8888:	da03      	bge.n	23f8892 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
 23f888a:	1a08      	subs	r0, r1, r0
 23f888c:	f7ff ffee 	bl	23f886c <_Z6randomi>
 23f8890:	4404      	add	r4, r0
}
 23f8892:	4620      	mov	r0, r4
 23f8894:	bd10      	pop	{r4, pc}
	...

023f8898 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23f8898:	2200      	movs	r2, #0
 23f889a:	4b01      	ldr	r3, [pc, #4]	; (23f88a0 <_GLOBAL__sub_I_RGB+0x8>)
 23f889c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23f889e:	4770      	bx	lr
 23f88a0:	1007af18 	.word	0x1007af18

023f88a4 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23f88a4:	2100      	movs	r1, #0
 23f88a6:	f7fe b895 	b.w	23f69d4 <hal_spi_release>

023f88aa <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23f88aa:	2100      	movs	r1, #0
 23f88ac:	f7fe b884 	b.w	23f69b8 <hal_spi_acquire>

023f88b0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23f88b0:	b510      	push	{r4, lr}
 23f88b2:	4604      	mov	r4, r0
 23f88b4:	4608      	mov	r0, r1
{
    _spi = spi;
 23f88b6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23f88b8:	f7fe f82a 	bl	23f6910 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23f88bc:	2300      	movs	r3, #0
}
 23f88be:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23f88c0:	6063      	str	r3, [r4, #4]
}
 23f88c2:	bd10      	pop	{r4, pc}

023f88c4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 23f88c4:	b513      	push	{r0, r1, r4, lr}
 23f88c6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
 23f88c8:	7800      	ldrb	r0, [r0, #0]
 23f88ca:	f7ff ffee 	bl	23f88aa <_ZN8SPIClass4lockEv.isra.0>
 23f88ce:	b958      	cbnz	r0, 23f88e8 <_ZN8SPIClass5beginEv+0x24>
 23f88d0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 23f88d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23f88d6:	9001      	str	r0, [sp, #4]
 23f88d8:	f7fd fff0 	bl	23f68bc <hal_spi_begin>
        unlock();
 23f88dc:	9801      	ldr	r0, [sp, #4]
    }
}
 23f88de:	b002      	add	sp, #8
 23f88e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f88e4:	f7ff bfde 	b.w	23f88a4 <_ZN8SPIClass6unlockEv.isra.0>
 23f88e8:	b002      	add	sp, #8
 23f88ea:	bd10      	pop	{r4, pc}

023f88ec <_ZN8SPIClass5beginEt>:

void SPIClass::begin(uint16_t ss_pin)
{
 23f88ec:	b513      	push	{r0, r1, r4, lr}
 23f88ee:	4604      	mov	r4, r0
    if (!lock())
 23f88f0:	7800      	ldrb	r0, [r0, #0]
{
 23f88f2:	9101      	str	r1, [sp, #4]
    if (!lock())
 23f88f4:	f7ff ffd9 	bl	23f88aa <_ZN8SPIClass4lockEv.isra.0>
 23f88f8:	9901      	ldr	r1, [sp, #4]
 23f88fa:	b948      	cbnz	r0, 23f8910 <_ZN8SPIClass5beginEt+0x24>
 23f88fc:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, ss_pin);
 23f88fe:	9001      	str	r0, [sp, #4]
 23f8900:	f7fd ffdc 	bl	23f68bc <hal_spi_begin>
        unlock();
 23f8904:	9801      	ldr	r0, [sp, #4]
    }
}
 23f8906:	b002      	add	sp, #8
 23f8908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f890c:	f7ff bfca 	b.w	23f88a4 <_ZN8SPIClass6unlockEv.isra.0>
 23f8910:	b002      	add	sp, #8
 23f8912:	bd10      	pop	{r4, pc}

023f8914 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
 23f8914:	b513      	push	{r0, r1, r4, lr}
 23f8916:	4604      	mov	r4, r0
    if (!lock())
 23f8918:	7800      	ldrb	r0, [r0, #0]
 23f891a:	f7ff ffc6 	bl	23f88aa <_ZN8SPIClass4lockEv.isra.0>
 23f891e:	b948      	cbnz	r0, 23f8934 <_ZN8SPIClass3endEv+0x20>
 23f8920:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
 23f8922:	9001      	str	r0, [sp, #4]
 23f8924:	f7fd ffd8 	bl	23f68d8 <hal_spi_end>
        unlock();
 23f8928:	9801      	ldr	r0, [sp, #4]
    }
}
 23f892a:	b002      	add	sp, #8
 23f892c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f8930:	f7ff bfb8 	b.w	23f88a4 <_ZN8SPIClass6unlockEv.isra.0>
 23f8934:	b002      	add	sp, #8
 23f8936:	bd10      	pop	{r4, pc}

023f8938 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
 23f8938:	7800      	ldrb	r0, [r0, #0]
 23f893a:	f7ff bfb3 	b.w	23f88a4 <_ZN8SPIClass6unlockEv.isra.0>
	...

023f8940 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 23f8940:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 23f8942:	2400      	movs	r4, #0
 23f8944:	0840      	lsrs	r0, r0, #1
 23f8946:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23f8948:	6818      	ldr	r0, [r3, #0]
 23f894a:	b2e5      	uxtb	r5, r4
 23f894c:	4288      	cmp	r0, r1
 23f894e:	d906      	bls.n	23f895e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 23f8950:	3401      	adds	r4, #1
 23f8952:	2c08      	cmp	r4, #8
 23f8954:	d002      	beq.n	23f895c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 23f8956:	0840      	lsrs	r0, r0, #1
 23f8958:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23f895a:	e7f5      	b.n	23f8948 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 23f895c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 23f895e:	4b02      	ldr	r3, [pc, #8]	; (23f8968 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 23f8960:	5d5b      	ldrb	r3, [r3, r5]
 23f8962:	7013      	strb	r3, [r2, #0]
}
 23f8964:	bd30      	pop	{r4, r5, pc}
 23f8966:	bf00      	nop
 23f8968:	023ffa34 	.word	0x023ffa34

023f896c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 23f896c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f8970:	4606      	mov	r6, r0
 23f8972:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
 23f8974:	7800      	ldrb	r0, [r0, #0]
{
 23f8976:	460c      	mov	r4, r1
    CHECK(lock());
 23f8978:	f7ff ff97 	bl	23f88aa <_ZN8SPIClass4lockEv.isra.0>
 23f897c:	2800      	cmp	r0, #0
 23f897e:	db1b      	blt.n	23f89b8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23f8980:	2214      	movs	r2, #20
 23f8982:	2100      	movs	r1, #0
 23f8984:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 23f8986:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 23f8988:	f003 fd2d 	bl	23fc3e6 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23f898c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23f898e:	2200      	movs	r2, #0
 23f8990:	4628      	mov	r0, r5
 23f8992:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 23f8994:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 23f8998:	f7fd ffd6 	bl	23f6948 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 23f899c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 23f89a0:	b113      	cbz	r3, 23f89a8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
 23f89a2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 23f89a6:	b155      	cbz	r5, 23f89be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
 23f89a8:	2700      	movs	r7, #0
 23f89aa:	2501      	movs	r5, #1
 23f89ac:	46b9      	mov	r9, r7
 23f89ae:	46b8      	mov	r8, r7
    if (default_ && other.default_)
 23f89b0:	7923      	ldrb	r3, [r4, #4]
 23f89b2:	b15d      	cbz	r5, 23f89cc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
 23f89b4:	b1c3      	cbz	r3, 23f89e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
 23f89b6:	2000      	movs	r0, #0
}
 23f89b8:	b00f      	add	sp, #60	; 0x3c
 23f89ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 23f89be:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 23f89c2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 23f89c6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 23f89ca:	e7f1      	b.n	23f89b0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
 23f89cc:	2b00      	cmp	r3, #0
 23f89ce:	d135      	bne.n	23f8a3c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
 23f89d0:	68a3      	ldr	r3, [r4, #8]
 23f89d2:	4543      	cmp	r3, r8
 23f89d4:	d108      	bne.n	23f89e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
 23f89d6:	f88d 9020 	strb.w	r9, [sp, #32]
 23f89da:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23f89de:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23f89e2:	89a3      	ldrh	r3, [r4, #12]
 23f89e4:	429a      	cmp	r2, r3
 23f89e6:	d0e6      	beq.n	23f89b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
 23f89e8:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23f89ea:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 23f89ec:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23f89f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 23f89f2:	ab04      	add	r3, sp, #16
 23f89f4:	f10d 020f 	add.w	r2, sp, #15
 23f89f8:	f7ff ffa2 	bl	23f8940 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
 23f89fc:	7921      	ldrb	r1, [r4, #4]
 23f89fe:	b985      	cbnz	r5, 23f8a22 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
 23f8a00:	b989      	cbnz	r1, 23f8a26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23f8a02:	68a3      	ldr	r3, [r4, #8]
 23f8a04:	4543      	cmp	r3, r8
 23f8a06:	d30e      	bcc.n	23f8a26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
 23f8a08:	f88d 9020 	strb.w	r9, [sp, #32]
 23f8a0c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23f8a10:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23f8a14:	89a3      	ldrh	r3, [r4, #12]
 23f8a16:	429a      	cmp	r2, r3
 23f8a18:	d105      	bne.n	23f8a26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 23f8a1a:	9b04      	ldr	r3, [sp, #16]
 23f8a1c:	4543      	cmp	r3, r8
 23f8a1e:	d102      	bne.n	23f8a26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23f8a20:	e7c9      	b.n	23f89b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
 23f8a22:	2900      	cmp	r1, #0
 23f8a24:	d1f9      	bne.n	23f8a1a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 23f8a26:	2300      	movs	r3, #0
 23f8a28:	9301      	str	r3, [sp, #4]
 23f8a2a:	7b63      	ldrb	r3, [r4, #13]
 23f8a2c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 23f8a30:	9300      	str	r3, [sp, #0]
 23f8a32:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 23f8a34:	7830      	ldrb	r0, [r6, #0]
 23f8a36:	f7fd ffb1 	bl	23f699c <hal_spi_set_settings>
 23f8a3a:	e7bc      	b.n	23f89b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
 23f8a3c:	462b      	mov	r3, r5
 23f8a3e:	462a      	mov	r2, r5
 23f8a40:	2101      	movs	r1, #1
 23f8a42:	e9cd 5500 	strd	r5, r5, [sp]
 23f8a46:	e7f5      	b.n	23f8a34 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

023f8a48 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 23f8a48:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 23f8a4a:	7800      	ldrb	r0, [r0, #0]
 23f8a4c:	f7fd ff52 	bl	23f68f4 <hal_spi_transfer>
}
 23f8a50:	b2c0      	uxtb	r0, r0
 23f8a52:	bd08      	pop	{r3, pc}

023f8a54 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 23f8a54:	b530      	push	{r4, r5, lr}
 23f8a56:	b087      	sub	sp, #28
 23f8a58:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 23f8a5a:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 23f8a5c:	9500      	str	r5, [sp, #0]
 23f8a5e:	7800      	ldrb	r0, [r0, #0]
 23f8a60:	f7fd ff80 	bl	23f6964 <hal_spi_transfer_dma>
    if (user_callback == NULL)
 23f8a64:	b93d      	cbnz	r5, 23f8a76 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 23f8a66:	7820      	ldrb	r0, [r4, #0]
 23f8a68:	a902      	add	r1, sp, #8
 23f8a6a:	f7fd ff89 	bl	23f6980 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 23f8a6e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23f8a72:	07db      	lsls	r3, r3, #31
 23f8a74:	d4f7      	bmi.n	23f8a66 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
 23f8a76:	b007      	add	sp, #28
 23f8a78:	bd30      	pop	{r4, r5, pc}

023f8a7a <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
 23f8a7a:	4770      	bx	lr

023f8a7c <_ZN8SPIClass15detachInterruptEv>:
 23f8a7c:	4770      	bx	lr

023f8a7e <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 23f8a7e:	b510      	push	{r4, lr}
 23f8a80:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23f8a82:	f7fd fd15 	bl	23f64b0 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 23f8a86:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 23f8a88:	6823      	ldr	r3, [r4, #0]
 23f8a8a:	4620      	mov	r0, r4
 23f8a8c:	695b      	ldr	r3, [r3, #20]
 23f8a8e:	4798      	blx	r3
    if (c >= 0) return c;
 23f8a90:	2800      	cmp	r0, #0
 23f8a92:	da08      	bge.n	23f8aa6 <_ZN6Stream9timedReadEv+0x28>
 23f8a94:	f7fd fd0c 	bl	23f64b0 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
 23f8a98:	68e3      	ldr	r3, [r4, #12]
 23f8a9a:	1ac0      	subs	r0, r0, r3
 23f8a9c:	68a3      	ldr	r3, [r4, #8]
 23f8a9e:	4298      	cmp	r0, r3
 23f8aa0:	d3f2      	bcc.n	23f8a88 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 23f8aa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23f8aa6:	bd10      	pop	{r4, pc}

023f8aa8 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 23f8aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f8aac:	4607      	mov	r7, r0
 23f8aae:	460c      	mov	r4, r1
 23f8ab0:	460d      	mov	r5, r1
 23f8ab2:	188e      	adds	r6, r1, r2
  size_t count = 0;
  while (count < length) {
 23f8ab4:	42b5      	cmp	r5, r6
 23f8ab6:	eba5 0804 	sub.w	r8, r5, r4
 23f8aba:	d007      	beq.n	23f8acc <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 23f8abc:	4638      	mov	r0, r7
 23f8abe:	f7ff ffde 	bl	23f8a7e <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 23f8ac2:	1e03      	subs	r3, r0, #0
 23f8ac4:	db02      	blt.n	23f8acc <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
 23f8ac6:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
 23f8aca:	e7f3      	b.n	23f8ab4 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
 23f8acc:	4640      	mov	r0, r8
 23f8ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f8ad2 <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
 23f8ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f8ad6:	4607      	mov	r7, r0
 23f8ad8:	4688      	mov	r8, r1
 23f8ada:	4616      	mov	r6, r2
  if (length < 1) return 0;
 23f8adc:	461d      	mov	r5, r3
 23f8ade:	b173      	cbz	r3, 23f8afe <_ZN6Stream14readBytesUntilEcPcj+0x2c>
  size_t index = 0;
 23f8ae0:	2400      	movs	r4, #0
  while (index < length) {
    int c = timedRead();
 23f8ae2:	4638      	mov	r0, r7
 23f8ae4:	f7ff ffcb 	bl	23f8a7e <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
 23f8ae8:	1e03      	subs	r3, r0, #0
 23f8aea:	db05      	blt.n	23f8af8 <_ZN6Stream14readBytesUntilEcPcj+0x26>
 23f8aec:	4543      	cmp	r3, r8
 23f8aee:	d003      	beq.n	23f8af8 <_ZN6Stream14readBytesUntilEcPcj+0x26>
    *buffer++ = (char)c;
 23f8af0:	5533      	strb	r3, [r6, r4]
    index++;
 23f8af2:	3401      	adds	r4, #1
  while (index < length) {
 23f8af4:	42a5      	cmp	r5, r4
 23f8af6:	d1f4      	bne.n	23f8ae2 <_ZN6Stream14readBytesUntilEcPcj+0x10>
  }
  return index; // return number of characters, not including null terminator
}
 23f8af8:	4620      	mov	r0, r4
 23f8afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (length < 1) return 0;
 23f8afe:	461c      	mov	r4, r3
 23f8b00:	e7fa      	b.n	23f8af8 <_ZN6Stream14readBytesUntilEcPcj+0x26>

023f8b02 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
 23f8b02:	b510      	push	{r4, lr}
 23f8b04:	4604      	mov	r4, r0
{
    free(buffer);
 23f8b06:	6800      	ldr	r0, [r0, #0]
 23f8b08:	f7fe fb2a 	bl	23f7160 <free>
}
 23f8b0c:	4620      	mov	r0, r4
 23f8b0e:	bd10      	pop	{r4, pc}

023f8b10 <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
 23f8b10:	b510      	push	{r4, lr}
 23f8b12:	4604      	mov	r4, r0
    if (buffer) {
 23f8b14:	6800      	ldr	r0, [r0, #0]
 23f8b16:	b108      	cbz	r0, 23f8b1c <_ZN6String10invalidateEv+0xc>
        free(buffer);
 23f8b18:	f7fe fb22 	bl	23f7160 <free>
    }
    buffer = nullptr;
 23f8b1c:	2300      	movs	r3, #0
    capacity_ = len = 0;
 23f8b1e:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
 23f8b22:	6023      	str	r3, [r4, #0]
}
 23f8b24:	bd10      	pop	{r4, pc}

023f8b26 <_ZN6String12changeBufferEj>:
    len = size;
    return true;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23f8b26:	b538      	push	{r3, r4, r5, lr}
 23f8b28:	4604      	mov	r4, r0
 23f8b2a:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23f8b2c:	6800      	ldr	r0, [r0, #0]
 23f8b2e:	3101      	adds	r1, #1
 23f8b30:	f7fe fb24 	bl	23f717c <realloc>
    if (newbuffer) {
 23f8b34:	b110      	cbz	r0, 23f8b3c <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
 23f8b36:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
 23f8b3a:	2001      	movs	r0, #1
    }
    return 0;
}
 23f8b3c:	bd38      	pop	{r3, r4, r5, pc}

023f8b3e <_ZN6String7reserveEj>:
{
 23f8b3e:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
 23f8b40:	6803      	ldr	r3, [r0, #0]
{
 23f8b42:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
 23f8b44:	b123      	cbz	r3, 23f8b50 <_ZN6String7reserveEj+0x12>
 23f8b46:	6843      	ldr	r3, [r0, #4]
 23f8b48:	428b      	cmp	r3, r1
 23f8b4a:	d301      	bcc.n	23f8b50 <_ZN6String7reserveEj+0x12>
 23f8b4c:	2001      	movs	r0, #1
}
 23f8b4e:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
 23f8b50:	4620      	mov	r0, r4
 23f8b52:	f7ff ffe8 	bl	23f8b26 <_ZN6String12changeBufferEj>
 23f8b56:	2800      	cmp	r0, #0
 23f8b58:	d0f9      	beq.n	23f8b4e <_ZN6String7reserveEj+0x10>
        if (len == 0) {
 23f8b5a:	68a3      	ldr	r3, [r4, #8]
 23f8b5c:	2b00      	cmp	r3, #0
 23f8b5e:	d1f5      	bne.n	23f8b4c <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
 23f8b60:	6822      	ldr	r2, [r4, #0]
 23f8b62:	7013      	strb	r3, [r2, #0]
 23f8b64:	e7f2      	b.n	23f8b4c <_ZN6String7reserveEj+0xe>

023f8b66 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23f8b66:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f8b68:	460d      	mov	r5, r1
    if (!reserve(length)) {
 23f8b6a:	4611      	mov	r1, r2
 23f8b6c:	9201      	str	r2, [sp, #4]
{
 23f8b6e:	4604      	mov	r4, r0
    if (!reserve(length)) {
 23f8b70:	f7ff ffe5 	bl	23f8b3e <_ZN6String7reserveEj>
 23f8b74:	9a01      	ldr	r2, [sp, #4]
 23f8b76:	b928      	cbnz	r0, 23f8b84 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
 23f8b78:	4620      	mov	r0, r4
 23f8b7a:	f7ff ffc9 	bl	23f8b10 <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
 23f8b7e:	4620      	mov	r0, r4
 23f8b80:	b003      	add	sp, #12
 23f8b82:	bd30      	pop	{r4, r5, pc}
    memcpy(buffer, cstr, length);
 23f8b84:	4629      	mov	r1, r5
    len = length;
 23f8b86:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
 23f8b88:	6820      	ldr	r0, [r4, #0]
 23f8b8a:	f003 fc1f 	bl	23fc3cc <memcpy>
    buffer[len] = 0;
 23f8b8e:	2100      	movs	r1, #0
 23f8b90:	6822      	ldr	r2, [r4, #0]
 23f8b92:	68a3      	ldr	r3, [r4, #8]
 23f8b94:	54d1      	strb	r1, [r2, r3]
    return *this;
 23f8b96:	e7f2      	b.n	23f8b7e <_ZN6String4copyEPKcj+0x18>

023f8b98 <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
 23f8b98:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23f8b9a:	b513      	push	{r0, r1, r4, lr}
 23f8b9c:	4604      	mov	r4, r0
    capacity_ = 0;
 23f8b9e:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23f8ba2:	6083      	str	r3, [r0, #8]
    flags = 0;
 23f8ba4:	7303      	strb	r3, [r0, #12]
    if (cstr) {
 23f8ba6:	b141      	cbz	r1, 23f8bba <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
 23f8ba8:	4608      	mov	r0, r1
 23f8baa:	9101      	str	r1, [sp, #4]
 23f8bac:	f7ea fb80 	bl	23e32b0 <strlen>
 23f8bb0:	9901      	ldr	r1, [sp, #4]
 23f8bb2:	4602      	mov	r2, r0
 23f8bb4:	4620      	mov	r0, r4
 23f8bb6:	f7ff ffd6 	bl	23f8b66 <_ZN6String4copyEPKcj>
}
 23f8bba:	4620      	mov	r0, r4
 23f8bbc:	b002      	add	sp, #8
 23f8bbe:	bd10      	pop	{r4, pc}

023f8bc0 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
 23f8bc0:	4288      	cmp	r0, r1
{
 23f8bc2:	b510      	push	{r4, lr}
 23f8bc4:	4604      	mov	r4, r0
    if (this == &rhs) {
 23f8bc6:	d005      	beq.n	23f8bd4 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
 23f8bc8:	680b      	ldr	r3, [r1, #0]
 23f8bca:	b12b      	cbz	r3, 23f8bd8 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
 23f8bcc:	688a      	ldr	r2, [r1, #8]
 23f8bce:	4619      	mov	r1, r3
 23f8bd0:	f7ff ffc9 	bl	23f8b66 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
 23f8bd4:	4620      	mov	r0, r4
 23f8bd6:	bd10      	pop	{r4, pc}
        invalidate();
 23f8bd8:	f7ff ff9a 	bl	23f8b10 <_ZN6String10invalidateEv>
 23f8bdc:	e7fa      	b.n	23f8bd4 <_ZN6StringaSERKS_+0x14>

023f8bde <_ZN6StringC1ERKS_>:
    buffer = nullptr;
 23f8bde:	2300      	movs	r3, #0
String::String(const String &value)
 23f8be0:	b510      	push	{r4, lr}
 23f8be2:	4604      	mov	r4, r0
    capacity_ = 0;
 23f8be4:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23f8be8:	6083      	str	r3, [r0, #8]
    flags = 0;
 23f8bea:	7303      	strb	r3, [r0, #12]
    *this = value;
 23f8bec:	f7ff ffe8 	bl	23f8bc0 <_ZN6StringaSERKS_>
}
 23f8bf0:	4620      	mov	r0, r4
 23f8bf2:	bd10      	pop	{r4, pc}

023f8bf4 <_ZN6String6concatEPKcj>:
{
    return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 23f8bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f8bf6:	4604      	mov	r4, r0
 23f8bf8:	4616      	mov	r6, r2
    unsigned int newlen = len + length;
    if (!cstr) {
 23f8bfa:	460f      	mov	r7, r1
 23f8bfc:	b909      	cbnz	r1, 23f8c02 <_ZN6String6concatEPKcj+0xe>
        return 0;
 23f8bfe:	2000      	movs	r0, #0
    }
    memcpy(buffer + len, cstr, length);
    buffer[newlen] = 0;
    len = newlen;
    return 1;
}
 23f8c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (length == 0) {
 23f8c02:	b18a      	cbz	r2, 23f8c28 <_ZN6String6concatEPKcj+0x34>
    unsigned int newlen = len + length;
 23f8c04:	6885      	ldr	r5, [r0, #8]
 23f8c06:	4415      	add	r5, r2
    if (!reserve(newlen)) {
 23f8c08:	4629      	mov	r1, r5
 23f8c0a:	f7ff ff98 	bl	23f8b3e <_ZN6String7reserveEj>
 23f8c0e:	2800      	cmp	r0, #0
 23f8c10:	d0f5      	beq.n	23f8bfe <_ZN6String6concatEPKcj+0xa>
    memcpy(buffer + len, cstr, length);
 23f8c12:	68a3      	ldr	r3, [r4, #8]
 23f8c14:	6820      	ldr	r0, [r4, #0]
 23f8c16:	4632      	mov	r2, r6
 23f8c18:	4418      	add	r0, r3
 23f8c1a:	4639      	mov	r1, r7
 23f8c1c:	f003 fbd6 	bl	23fc3cc <memcpy>
    buffer[newlen] = 0;
 23f8c20:	2200      	movs	r2, #0
 23f8c22:	6823      	ldr	r3, [r4, #0]
 23f8c24:	555a      	strb	r2, [r3, r5]
    len = newlen;
 23f8c26:	60a5      	str	r5, [r4, #8]
        return 1;
 23f8c28:	2001      	movs	r0, #1
 23f8c2a:	e7e9      	b.n	23f8c00 <_ZN6String6concatEPKcj+0xc>

023f8c2c <_ZN6StringC1ERK9Printable>:
        return float(atof(buffer));
    }
    return 0;
}

String::String(const Printable& printable)
 23f8c2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f8c2e:	4604      	mov	r4, r0
    buffer = nullptr;
 23f8c30:	2300      	movs	r3, #0
    capacity_ = 0;
 23f8c32:	e9c4 3300 	strd	r3, r3, [r4]
    len = 0;
 23f8c36:	60a3      	str	r3, [r4, #8]
    flags = 0;
 23f8c38:	7323      	strb	r3, [r4, #12]
    Print() : write_error(0) {}
 23f8c3a:	9302      	str	r3, [sp, #8]
            s_(str) {
 23f8c3c:	4b05      	ldr	r3, [pc, #20]	; (23f8c54 <_ZN6StringC1ERK9Printable+0x28>)
 23f8c3e:	9403      	str	r4, [sp, #12]
 23f8c40:	9301      	str	r3, [sp, #4]
{
    init();
    OutputStringStream stream(*this);
    printable.printTo(stream);
 23f8c42:	680b      	ldr	r3, [r1, #0]
String::String(const Printable& printable)
 23f8c44:	4608      	mov	r0, r1
    printable.printTo(stream);
 23f8c46:	681b      	ldr	r3, [r3, #0]
 23f8c48:	a901      	add	r1, sp, #4
 23f8c4a:	4798      	blx	r3
}
 23f8c4c:	4620      	mov	r0, r4
 23f8c4e:	b004      	add	sp, #16
 23f8c50:	bd10      	pop	{r4, pc}
 23f8c52:	bf00      	nop
 23f8c54:	023ffa24 	.word	0x023ffa24

023f8c58 <_ZN6String6formatEPKcz>:

String String::format(const char* fmt, ...)
{
 23f8c58:	b40e      	push	{r1, r2, r3}
 23f8c5a:	b570      	push	{r4, r5, r6, lr}
 23f8c5c:	b087      	sub	sp, #28
 23f8c5e:	ad0b      	add	r5, sp, #44	; 0x2c
 23f8c60:	f855 2b04 	ldr.w	r2, [r5], #4
 23f8c64:	4604      	mov	r4, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 23f8c66:	462b      	mov	r3, r5
 23f8c68:	2105      	movs	r1, #5
 23f8c6a:	a804      	add	r0, sp, #16
 23f8c6c:	9201      	str	r2, [sp, #4]
    va_start(marker, fmt);
 23f8c6e:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 23f8c70:	f7fe faca 	bl	23f7208 <vsnprintf>
 23f8c74:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 23f8c76:	490b      	ldr	r1, [pc, #44]	; (23f8ca4 <_ZN6String6formatEPKcz+0x4c>)
 23f8c78:	4620      	mov	r0, r4
 23f8c7a:	f7ff ff8d 	bl	23f8b98 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 23f8c7e:	4631      	mov	r1, r6
 23f8c80:	4620      	mov	r0, r4
 23f8c82:	f7ff ff5c 	bl	23f8b3e <_ZN6String7reserveEj>
    if (result.buffer) {
 23f8c86:	6820      	ldr	r0, [r4, #0]
 23f8c88:	b130      	cbz	r0, 23f8c98 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 23f8c8a:	462b      	mov	r3, r5
 23f8c8c:	9a01      	ldr	r2, [sp, #4]
 23f8c8e:	1c71      	adds	r1, r6, #1
        va_start(marker, fmt);
 23f8c90:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 23f8c92:	f7fe fab9 	bl	23f7208 <vsnprintf>
        va_end(marker);
        result.len = n;
 23f8c96:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
 23f8c98:	4620      	mov	r0, r4
 23f8c9a:	b007      	add	sp, #28
 23f8c9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23f8ca0:	b003      	add	sp, #12
 23f8ca2:	4770      	bx	lr
 23f8ca4:	023fe413 	.word	0x023fe413

023f8ca8 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 23f8ca8:	b507      	push	{r0, r1, r2, lr}
 23f8caa:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 23f8cac:	2100      	movs	r1, #0
{
 23f8cae:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 23f8cb0:	9100      	str	r1, [sp, #0]
 23f8cb2:	2001      	movs	r0, #1
 23f8cb4:	218c      	movs	r1, #140	; 0x8c
 23f8cb6:	f7fe f8a1 	bl	23f6dfc <system_reset>
}
 23f8cba:	b003      	add	sp, #12
 23f8cbc:	f85d fb04 	ldr.w	pc, [sp], #4

023f8cc0 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 23f8cc0:	4601      	mov	r1, r0
    reset(0, flags);
 23f8cc2:	2000      	movs	r0, #0
 23f8cc4:	f7ff bff0 	b.w	23f8ca8 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

023f8cc8 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 23f8cc8:	2000      	movs	r0, #0
 23f8cca:	f7ff bff9 	b.w	23f8cc0 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

023f8cce <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
 23f8cce:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
 23f8cd0:	2420      	movs	r4, #32
{
 23f8cd2:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
 23f8cd4:	4622      	mov	r2, r4
 23f8cd6:	2100      	movs	r1, #0
 23f8cd8:	4668      	mov	r0, sp
 23f8cda:	f003 fb84 	bl	23fc3e6 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
 23f8cde:	2100      	movs	r1, #0
 23f8ce0:	4668      	mov	r0, sp
    info.size = sizeof(info);
 23f8ce2:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
 23f8ce6:	f7fd fb8f 	bl	23f6408 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
 23f8cea:	9801      	ldr	r0, [sp, #4]
 23f8cec:	b008      	add	sp, #32
 23f8cee:	bd10      	pop	{r4, pc}

023f8cf0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23f8cf0:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23f8cf2:	2000      	movs	r0, #0
 23f8cf4:	4b04      	ldr	r3, [pc, #16]	; (23f8d08 <_GLOBAL__sub_I_System+0x18>)
 23f8cf6:	601a      	str	r2, [r3, #0]
 23f8cf8:	4b04      	ldr	r3, [pc, #16]	; (23f8d0c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23f8cfa:	4a05      	ldr	r2, [pc, #20]	; (23f8d10 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23f8cfc:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23f8d00:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23f8d02:	f7fd bfd3 	b.w	23f6cac <set_system_mode>
 23f8d06:	bf00      	nop
 23f8d08:	1007af34 	.word	0x1007af34
 23f8d0c:	1007af28 	.word	0x1007af28
 23f8d10:	ffff0000 	.word	0xffff0000

023f8d14 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 23f8d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 23f8d18:	4a15      	ldr	r2, [pc, #84]	; (23f8d70 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 23f8d1a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 23f8d7c <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 23f8d1e:	e9d2 6300 	ldrd	r6, r3, [r2]
 23f8d22:	1980      	adds	r0, r0, r6
 23f8d24:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
 23f8d28:	4b12      	ldr	r3, [pc, #72]	; (23f8d74 <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 23f8d2a:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 23f8d2c:	e9d3 6700 	ldrd	r6, r7, [r3]
 23f8d30:	1986      	adds	r6, r0, r6
 23f8d32:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
 23f8d36:	e9d8 2300 	ldrd	r2, r3, [r8]
 23f8d3a:	42bb      	cmp	r3, r7
 23f8d3c:	bf08      	it	eq
 23f8d3e:	42b2      	cmpeq	r2, r6
 23f8d40:	d013      	beq.n	23f8d6a <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 23f8d42:	a903      	add	r1, sp, #12
 23f8d44:	4668      	mov	r0, sp
 23f8d46:	e9cd 6700 	strd	r6, r7, [sp]
 23f8d4a:	f7fe fabf 	bl	23f72cc <localtime_r>
	calendar_time.tm_year += 1900;
 23f8d4e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23f8d50:	4d09      	ldr	r5, [pc, #36]	; (23f8d78 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 23f8d52:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23f8d56:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 23f8d58:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23f8d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f8d5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f8d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f8d60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 23f8d62:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23f8d66:	6823      	ldr	r3, [r4, #0]
 23f8d68:	602b      	str	r3, [r5, #0]
    }
}
 23f8d6a:	b00c      	add	sp, #48	; 0x30
 23f8d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f8d70:	1007af70 	.word	0x1007af70
 23f8d74:	1007af68 	.word	0x1007af68
 23f8d78:	1007af40 	.word	0x1007af40
 23f8d7c:	1007af78 	.word	0x1007af78

023f8d80 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
 23f8d80:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
 23f8d82:	2000      	movs	r0, #0
 23f8d84:	f7fe f8b8 	bl	23f6ef8 <spark_sync_time_pending>
 23f8d88:	b128      	cbz	r0, 23f8d96 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23f8d8a:	f7fe f87d 	bl	23f6e88 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 23f8d8e:	f080 0001 	eor.w	r0, r0, #1
 23f8d92:	b2c0      	uxtb	r0, r0
    }
 23f8d94:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 23f8d96:	2001      	movs	r0, #1
 23f8d98:	e7fc      	b.n	23f8d94 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

023f8d9c <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
 23f8d9c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f8d9e:	f7ff ffb9 	bl	23f8d14 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
 23f8da2:	4b01      	ldr	r3, [pc, #4]	; (23f8da8 <_ZN9TimeClass4hourEx+0xc>)
 23f8da4:	6898      	ldr	r0, [r3, #8]
 23f8da6:	bd08      	pop	{r3, pc}
 23f8da8:	1007af40 	.word	0x1007af40

023f8dac <_ZN9TimeClass6minuteEx>:
	return minute(now());
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
 23f8dac:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f8dae:	f7ff ffb1 	bl	23f8d14 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_min;
}
 23f8db2:	4b01      	ldr	r3, [pc, #4]	; (23f8db8 <_ZN9TimeClass6minuteEx+0xc>)
 23f8db4:	6858      	ldr	r0, [r3, #4]
 23f8db6:	bd08      	pop	{r3, pc}
 23f8db8:	1007af40 	.word	0x1007af40

023f8dbc <_ZN9TimeClass6secondEx>:
	return second(now());
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
 23f8dbc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f8dbe:	f7ff ffa9 	bl	23f8d14 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_sec;
}
 23f8dc2:	4b01      	ldr	r3, [pc, #4]	; (23f8dc8 <_ZN9TimeClass6secondEx+0xc>)
 23f8dc4:	6818      	ldr	r0, [r3, #0]
 23f8dc6:	bd08      	pop	{r3, pc}
 23f8dc8:	1007af40 	.word	0x1007af40

023f8dcc <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
 23f8dcc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f8dce:	f7ff ffa1 	bl	23f8d14 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
 23f8dd2:	4b01      	ldr	r3, [pc, #4]	; (23f8dd8 <_ZN9TimeClass3dayEx+0xc>)
 23f8dd4:	68d8      	ldr	r0, [r3, #12]
 23f8dd6:	bd08      	pop	{r3, pc}
 23f8dd8:	1007af40 	.word	0x1007af40

023f8ddc <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 23f8ddc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f8dde:	f7ff ff99 	bl	23f8d14 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 23f8de2:	4b02      	ldr	r3, [pc, #8]	; (23f8dec <_ZN9TimeClass5monthEx+0x10>)
 23f8de4:	6918      	ldr	r0, [r3, #16]
}
 23f8de6:	3001      	adds	r0, #1
 23f8de8:	bd08      	pop	{r3, pc}
 23f8dea:	bf00      	nop
 23f8dec:	1007af40 	.word	0x1007af40

023f8df0 <_ZN9TimeClass4yearEx>:
	return year(now());
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
 23f8df0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f8df2:	f7ff ff8f 	bl	23f8d14 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_year;
}
 23f8df6:	4b01      	ldr	r3, [pc, #4]	; (23f8dfc <_ZN9TimeClass4yearEx+0xc>)
 23f8df8:	6958      	ldr	r0, [r3, #20]
 23f8dfa:	bd08      	pop	{r3, pc}
 23f8dfc:	1007af40 	.word	0x1007af40

023f8e00 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
 23f8e00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f8e02:	4602      	mov	r2, r0
 23f8e04:	460b      	mov	r3, r1
    struct timeval tv = {
 23f8e06:	2100      	movs	r1, #0
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
 23f8e08:	4668      	mov	r0, sp
    };
 23f8e0a:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
 23f8e0e:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
 23f8e12:	f7fd fbbd 	bl	23f6590 <hal_rtc_set_time>
 23f8e16:	4602      	mov	r2, r0
 23f8e18:	b910      	cbnz	r0, 23f8e20 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
 23f8e1a:	4601      	mov	r1, r0
 23f8e1c:	f7fd ffb6 	bl	23f6d8c <system_notify_time_changed>
    }
}
 23f8e20:	b005      	add	sp, #20
 23f8e22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023f8e28 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 23f8e28:	b530      	push	{r4, r5, lr}
 23f8e2a:	b093      	sub	sp, #76	; 0x4c
 23f8e2c:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
 23f8e30:	4b19      	ldr	r3, [pc, #100]	; (23f8e98 <_ZN9TimeClass7timeStrEx+0x70>)
{
 23f8e32:	4604      	mov	r4, r0
    t += time_zone_cache;
 23f8e34:	e9d3 1000 	ldrd	r1, r0, [r3]
 23f8e38:	9b01      	ldr	r3, [sp, #4]
 23f8e3a:	1852      	adds	r2, r2, r1
 23f8e3c:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
 23f8e40:	4816      	ldr	r0, [pc, #88]	; (23f8e9c <_ZN9TimeClass7timeStrEx+0x74>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 23f8e42:	2500      	movs	r5, #0
    t += dst_current_cache;
 23f8e44:	e9d0 1000 	ldrd	r1, r0, [r0]
 23f8e48:	1852      	adds	r2, r2, r1
 23f8e4a:	eb43 0300 	adc.w	r3, r3, r0
 23f8e4e:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 23f8e52:	2224      	movs	r2, #36	; 0x24
 23f8e54:	2100      	movs	r1, #0
 23f8e56:	eb0d 0002 	add.w	r0, sp, r2
 23f8e5a:	f003 fac4 	bl	23fc3e6 <memset>
    localtime_r(&t, &calendar_time);
 23f8e5e:	a909      	add	r1, sp, #36	; 0x24
 23f8e60:	4668      	mov	r0, sp
 23f8e62:	f7fe fa33 	bl	23f72cc <localtime_r>
    char ascstr[26] = {};
 23f8e66:	2216      	movs	r2, #22
 23f8e68:	4629      	mov	r1, r5
 23f8e6a:	a803      	add	r0, sp, #12
 23f8e6c:	9502      	str	r5, [sp, #8]
 23f8e6e:	f003 faba 	bl	23fc3e6 <memset>
    asctime_r(&calendar_time, ascstr);
 23f8e72:	a902      	add	r1, sp, #8
 23f8e74:	a809      	add	r0, sp, #36	; 0x24
 23f8e76:	f003 fa43 	bl	23fc300 <asctime_r>
    int len = strlen(ascstr);
 23f8e7a:	a802      	add	r0, sp, #8
 23f8e7c:	f7ea fa18 	bl	23e32b0 <strlen>
    ascstr[len-1] = 0; // remove final newline
 23f8e80:	ab12      	add	r3, sp, #72	; 0x48
 23f8e82:	4418      	add	r0, r3
 23f8e84:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 23f8e88:	a902      	add	r1, sp, #8
 23f8e8a:	4620      	mov	r0, r4
 23f8e8c:	f7ff fe84 	bl	23f8b98 <_ZN6StringC1EPK19__FlashStringHelper>
}
 23f8e90:	4620      	mov	r0, r4
 23f8e92:	b013      	add	sp, #76	; 0x4c
 23f8e94:	bd30      	pop	{r4, r5, pc}
 23f8e96:	bf00      	nop
 23f8e98:	1007af70 	.word	0x1007af70
 23f8e9c:	1007af68 	.word	0x1007af68

023f8ea0 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 23f8ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f8ea4:	b0a4      	sub	sp, #144	; 0x90
 23f8ea6:	4607      	mov	r7, r0
 23f8ea8:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 23f8eaa:	a814      	add	r0, sp, #80	; 0x50
{
 23f8eac:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 23f8eae:	223f      	movs	r2, #63	; 0x3f
{
 23f8eb0:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 23f8eb2:	f003 fb5b 	bl	23fc56c <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 23f8eb6:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 23f8eb8:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 23f8eba:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 23f8ebe:	f7ea f9f7 	bl	23e32b0 <strlen>
 23f8ec2:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 23f8ec4:	bb4c      	cbnz	r4, 23f8f1a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
 23f8ec6:	4929      	ldr	r1, [pc, #164]	; (23f8f6c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
 23f8ec8:	a803      	add	r0, sp, #12
 23f8eca:	f003 fb01 	bl	23fc4d0 <strcpy>
{
 23f8ece:	2600      	movs	r6, #0
 23f8ed0:	ac14      	add	r4, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 23f8ed2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 23f8ed6:	45b1      	cmp	r9, r6
 23f8ed8:	d934      	bls.n	23f8f44 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 23f8eda:	7823      	ldrb	r3, [r4, #0]
 23f8edc:	f106 0a01 	add.w	sl, r6, #1
 23f8ee0:	2b25      	cmp	r3, #37	; 0x25
 23f8ee2:	d117      	bne.n	23f8f14 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
 23f8ee4:	7863      	ldrb	r3, [r4, #1]
 23f8ee6:	2b7a      	cmp	r3, #122	; 0x7a
 23f8ee8:	d114      	bne.n	23f8f14 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
 23f8eea:	a803      	add	r0, sp, #12
 23f8eec:	f7ea f9e0 	bl	23e32b0 <strlen>
 23f8ef0:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 23f8ef2:	ab14      	add	r3, sp, #80	; 0x50
 23f8ef4:	1830      	adds	r0, r6, r0
 23f8ef6:	4418      	add	r0, r3
 23f8ef8:	eba9 0206 	sub.w	r2, r9, r6
 23f8efc:	1ca1      	adds	r1, r4, #2
 23f8efe:	f003 fa65 	bl	23fc3cc <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 23f8f02:	462a      	mov	r2, r5
 23f8f04:	a903      	add	r1, sp, #12
 23f8f06:	4620      	mov	r0, r4
 23f8f08:	f003 fa60 	bl	23fc3cc <memcpy>
            len = strlen(format_str);
 23f8f0c:	a814      	add	r0, sp, #80	; 0x50
 23f8f0e:	f7ea f9cf 	bl	23e32b0 <strlen>
 23f8f12:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
 23f8f14:	4656      	mov	r6, sl
 23f8f16:	3401      	adds	r4, #1
 23f8f18:	e7db      	b.n	23f8ed2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 23f8f1a:	233c      	movs	r3, #60	; 0x3c
 23f8f1c:	fb94 f2f3 	sdiv	r2, r4, r3
 23f8f20:	2a00      	cmp	r2, #0
 23f8f22:	bfb8      	it	lt
 23f8f24:	4252      	neglt	r2, r2
 23f8f26:	fbb2 f1f3 	udiv	r1, r2, r3
 23f8f2a:	fb03 2211 	mls	r2, r3, r1, r2
 23f8f2e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 23f8f32:	9200      	str	r2, [sp, #0]
 23f8f34:	fb94 f3f3 	sdiv	r3, r4, r3
 23f8f38:	2110      	movs	r1, #16
 23f8f3a:	4a0d      	ldr	r2, [pc, #52]	; (23f8f70 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 23f8f3c:	a803      	add	r0, sp, #12
 23f8f3e:	f7fe f955 	bl	23f71ec <snprintf>
 23f8f42:	e7c4      	b.n	23f8ece <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 23f8f44:	2100      	movs	r1, #0
 23f8f46:	222e      	movs	r2, #46	; 0x2e
 23f8f48:	a808      	add	r0, sp, #32
 23f8f4a:	9107      	str	r1, [sp, #28]
 23f8f4c:	f003 fa4b 	bl	23fc3e6 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 23f8f50:	4643      	mov	r3, r8
 23f8f52:	aa14      	add	r2, sp, #80	; 0x50
 23f8f54:	2132      	movs	r1, #50	; 0x32
 23f8f56:	a807      	add	r0, sp, #28
 23f8f58:	f7fe f9aa 	bl	23f72b0 <strftime>
    return String(buf);
 23f8f5c:	4638      	mov	r0, r7
 23f8f5e:	a907      	add	r1, sp, #28
 23f8f60:	f7ff fe1a 	bl	23f8b98 <_ZN6StringC1EPK19__FlashStringHelper>
}
 23f8f64:	4638      	mov	r0, r7
 23f8f66:	b024      	add	sp, #144	; 0x90
 23f8f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f8f6c:	023fe11f 	.word	0x023fe11f
 23f8f70:	023ffa3c 	.word	0x023ffa3c

023f8f74 <_ZN9TimeClass6formatExPKc>:
{
 23f8f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f8f76:	b08d      	sub	sp, #52	; 0x34
 23f8f78:	9d12      	ldr	r5, [sp, #72]	; 0x48
 23f8f7a:	4604      	mov	r4, r0
 23f8f7c:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 23f8f80:	b915      	cbnz	r5, 23f8f88 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 23f8f82:	4b19      	ldr	r3, [pc, #100]	; (23f8fe8 <_ZN9TimeClass6formatExPKc+0x74>)
 23f8f84:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 23f8f86:	b12d      	cbz	r5, 23f8f94 <_ZN9TimeClass6formatExPKc+0x20>
 23f8f88:	4b18      	ldr	r3, [pc, #96]	; (23f8fec <_ZN9TimeClass6formatExPKc+0x78>)
 23f8f8a:	4628      	mov	r0, r5
 23f8f8c:	6819      	ldr	r1, [r3, #0]
 23f8f8e:	f7ea f985 	bl	23e329c <strcmp>
 23f8f92:	b938      	cbnz	r0, 23f8fa4 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 23f8f94:	e9dd 2300 	ldrd	r2, r3, [sp]
 23f8f98:	4620      	mov	r0, r4
 23f8f9a:	f7ff ff45 	bl	23f8e28 <_ZN9TimeClass7timeStrEx>
}
 23f8f9e:	4620      	mov	r0, r4
 23f8fa0:	b00d      	add	sp, #52	; 0x34
 23f8fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 23f8fa4:	9900      	ldr	r1, [sp, #0]
 23f8fa6:	4e12      	ldr	r6, [pc, #72]	; (23f8ff0 <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 23f8fa8:	4f12      	ldr	r7, [pc, #72]	; (23f8ff4 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 23f8faa:	e9d6 3200 	ldrd	r3, r2, [r6]
 23f8fae:	185b      	adds	r3, r3, r1
 23f8fb0:	9901      	ldr	r1, [sp, #4]
 23f8fb2:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
 23f8fb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 23f8fba:	181b      	adds	r3, r3, r0
 23f8fbc:	eb42 0201 	adc.w	r2, r2, r1
 23f8fc0:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 23f8fc4:	2100      	movs	r1, #0
 23f8fc6:	2224      	movs	r2, #36	; 0x24
 23f8fc8:	a803      	add	r0, sp, #12
 23f8fca:	f003 fa0c 	bl	23fc3e6 <memset>
    localtime_r(&t, &calendar_time);
 23f8fce:	a903      	add	r1, sp, #12
 23f8fd0:	4668      	mov	r0, sp
 23f8fd2:	f7fe f97b 	bl	23f72cc <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 23f8fd6:	6832      	ldr	r2, [r6, #0]
 23f8fd8:	683b      	ldr	r3, [r7, #0]
 23f8fda:	4620      	mov	r0, r4
 23f8fdc:	4413      	add	r3, r2
 23f8fde:	a903      	add	r1, sp, #12
 23f8fe0:	462a      	mov	r2, r5
 23f8fe2:	f7ff ff5d 	bl	23f8ea0 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 23f8fe6:	e7da      	b.n	23f8f9e <_ZN9TimeClass6formatExPKc+0x2a>
 23f8fe8:	1007af3c 	.word	0x1007af3c
 23f8fec:	1006a1b4 	.word	0x1006a1b4
 23f8ff0:	1007af70 	.word	0x1007af70
 23f8ff4:	1007af68 	.word	0x1007af68

023f8ff8 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 23f8ff8:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 23f8ffa:	2000      	movs	r0, #0
 23f8ffc:	f7fd fa9e 	bl	23f653c <hal_rtc_time_is_valid>
    if (rtcstate)
 23f9000:	4604      	mov	r4, r0
 23f9002:	b9a0      	cbnz	r0, 23f902e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 23f9004:	f7fd fe44 	bl	23f6c90 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 23f9008:	2801      	cmp	r0, #1
 23f900a:	d110      	bne.n	23f902e <_ZN9TimeClass7isValidEv+0x36>
 23f900c:	4620      	mov	r0, r4
 23f900e:	f7fd feaf 	bl	23f6d70 <system_thread_get_state>
 23f9012:	b960      	cbnz	r0, 23f902e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 23f9014:	f7ff feb4 	bl	23f8d80 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 23f9018:	b910      	cbnz	r0, 23f9020 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 23f901a:	f7fd ff19 	bl	23f6e50 <spark_process>
        while (_while() && !_condition()) {
 23f901e:	e7f9      	b.n	23f9014 <_ZN9TimeClass7isValidEv+0x1c>
 23f9020:	f7ff feae 	bl	23f8d80 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 23f9024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 23f9028:	2000      	movs	r0, #0
 23f902a:	f7fd ba87 	b.w	23f653c <hal_rtc_time_is_valid>
}
 23f902e:	4620      	mov	r0, r4
 23f9030:	bd10      	pop	{r4, pc}

023f9032 <_ZN9TimeClass3nowEv>:
{
 23f9032:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 23f9034:	f7ff ffe0 	bl	23f8ff8 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 23f9038:	2210      	movs	r2, #16
 23f903a:	2100      	movs	r1, #0
 23f903c:	4668      	mov	r0, sp
 23f903e:	f003 f9d2 	bl	23fc3e6 <memset>
    hal_rtc_get_time(&tv, nullptr);
 23f9042:	2100      	movs	r1, #0
 23f9044:	4668      	mov	r0, sp
 23f9046:	f7fd fa95 	bl	23f6574 <hal_rtc_get_time>
}
 23f904a:	9800      	ldr	r0, [sp, #0]
 23f904c:	b005      	add	sp, #20
 23f904e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023f9054 <_ZN9TimeClass4hourEv>:
{
 23f9054:	b508      	push	{r3, lr}
	return hour(now());
 23f9056:	f7ff ffec 	bl	23f9032 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23f905a:	17c1      	asrs	r1, r0, #31
 23f905c:	f7ff fe5a 	bl	23f8d14 <_ZL22Refresh_UnixTime_Cachex>
}
 23f9060:	4b01      	ldr	r3, [pc, #4]	; (23f9068 <_ZN9TimeClass4hourEv+0x14>)
 23f9062:	6898      	ldr	r0, [r3, #8]
 23f9064:	bd08      	pop	{r3, pc}
 23f9066:	bf00      	nop
 23f9068:	1007af40 	.word	0x1007af40

023f906c <_ZN9TimeClass6minuteEv>:
{
 23f906c:	b508      	push	{r3, lr}
	return minute(now());
 23f906e:	f7ff ffe0 	bl	23f9032 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23f9072:	17c1      	asrs	r1, r0, #31
 23f9074:	f7ff fe4e 	bl	23f8d14 <_ZL22Refresh_UnixTime_Cachex>
}
 23f9078:	4b01      	ldr	r3, [pc, #4]	; (23f9080 <_ZN9TimeClass6minuteEv+0x14>)
 23f907a:	6858      	ldr	r0, [r3, #4]
 23f907c:	bd08      	pop	{r3, pc}
 23f907e:	bf00      	nop
 23f9080:	1007af40 	.word	0x1007af40

023f9084 <_ZN9TimeClass6secondEv>:
{
 23f9084:	b508      	push	{r3, lr}
	return second(now());
 23f9086:	f7ff ffd4 	bl	23f9032 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23f908a:	17c1      	asrs	r1, r0, #31
 23f908c:	f7ff fe42 	bl	23f8d14 <_ZL22Refresh_UnixTime_Cachex>
}
 23f9090:	4b01      	ldr	r3, [pc, #4]	; (23f9098 <_ZN9TimeClass6secondEv+0x14>)
 23f9092:	6818      	ldr	r0, [r3, #0]
 23f9094:	bd08      	pop	{r3, pc}
 23f9096:	bf00      	nop
 23f9098:	1007af40 	.word	0x1007af40

023f909c <_ZN9TimeClass3dayEv>:
{
 23f909c:	b508      	push	{r3, lr}
	return day(now());
 23f909e:	f7ff ffc8 	bl	23f9032 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23f90a2:	17c1      	asrs	r1, r0, #31
 23f90a4:	f7ff fe36 	bl	23f8d14 <_ZL22Refresh_UnixTime_Cachex>
}
 23f90a8:	4b01      	ldr	r3, [pc, #4]	; (23f90b0 <_ZN9TimeClass3dayEv+0x14>)
 23f90aa:	68d8      	ldr	r0, [r3, #12]
 23f90ac:	bd08      	pop	{r3, pc}
 23f90ae:	bf00      	nop
 23f90b0:	1007af40 	.word	0x1007af40

023f90b4 <_ZN9TimeClass5monthEv>:
{
 23f90b4:	b508      	push	{r3, lr}
	return month(now());
 23f90b6:	f7ff ffbc 	bl	23f9032 <_ZN9TimeClass3nowEv>
}
 23f90ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 23f90be:	17c1      	asrs	r1, r0, #31
 23f90c0:	f7ff be8c 	b.w	23f8ddc <_ZN9TimeClass5monthEx>

023f90c4 <_ZN9TimeClass4yearEv>:
{
 23f90c4:	b508      	push	{r3, lr}
	return year(now());
 23f90c6:	f7ff ffb4 	bl	23f9032 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23f90ca:	17c1      	asrs	r1, r0, #31
 23f90cc:	f7ff fe22 	bl	23f8d14 <_ZL22Refresh_UnixTime_Cachex>
}
 23f90d0:	4b01      	ldr	r3, [pc, #4]	; (23f90d8 <_ZN9TimeClass4yearEv+0x14>)
 23f90d2:	6958      	ldr	r0, [r3, #20]
 23f90d4:	bd08      	pop	{r3, pc}
 23f90d6:	bf00      	nop
 23f90d8:	1007af40 	.word	0x1007af40

023f90dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23f90dc:	4b02      	ldr	r3, [pc, #8]	; (23f90e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23f90de:	681a      	ldr	r2, [r3, #0]
 23f90e0:	4b02      	ldr	r3, [pc, #8]	; (23f90ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23f90e2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23f90e4:	4770      	bx	lr
 23f90e6:	bf00      	nop
 23f90e8:	1006a1b4 	.word	0x1006a1b4
 23f90ec:	1007af3c 	.word	0x1007af3c

023f90f0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23f90f0:	4770      	bx	lr

023f90f2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23f90f2:	7441      	strb	r1, [r0, #17]
}
 23f90f4:	4770      	bx	lr

023f90f6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23f90f6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23f90f8:	7c00      	ldrb	r0, [r0, #16]
 23f90fa:	f7fd fccd 	bl	23f6a98 <hal_usart_available_data_for_write>
}
 23f90fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f9102:	bd08      	pop	{r3, pc}

023f9104 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23f9104:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23f9106:	7c00      	ldrb	r0, [r0, #16]
 23f9108:	f7fd fc80 	bl	23f6a0c <hal_usart_available>
}
 23f910c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f9110:	bd08      	pop	{r3, pc}

023f9112 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23f9112:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23f9114:	7c00      	ldrb	r0, [r0, #16]
 23f9116:	f7fd fc95 	bl	23f6a44 <hal_usart_peek>
}
 23f911a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f911e:	bd08      	pop	{r3, pc}

023f9120 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23f9120:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23f9122:	7c00      	ldrb	r0, [r0, #16]
 23f9124:	f7fd fc80 	bl	23f6a28 <hal_usart_read>
}
 23f9128:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f912c:	bd08      	pop	{r3, pc}

023f912e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23f912e:	7c00      	ldrb	r0, [r0, #16]
 23f9130:	f7fd bc96 	b.w	23f6a60 <hal_usart_flush>

023f9134 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23f9134:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f9136:	7c45      	ldrb	r5, [r0, #17]
{
 23f9138:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f913a:	b12d      	cbz	r5, 23f9148 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23f913c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23f913e:	b003      	add	sp, #12
 23f9140:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23f9144:	f7fd bc54 	b.w	23f69f0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f9148:	7c00      	ldrb	r0, [r0, #16]
 23f914a:	9101      	str	r1, [sp, #4]
 23f914c:	f7fd fca4 	bl	23f6a98 <hal_usart_available_data_for_write>
 23f9150:	2800      	cmp	r0, #0
 23f9152:	9901      	ldr	r1, [sp, #4]
 23f9154:	dcf2      	bgt.n	23f913c <_ZN11USARTSerial5writeEh+0x8>
}
 23f9156:	4628      	mov	r0, r5
 23f9158:	b003      	add	sp, #12
 23f915a:	bd30      	pop	{r4, r5, pc}

023f915c <_ZN11USARTSerialD0Ev>:
 23f915c:	b510      	push	{r4, lr}
 23f915e:	4604      	mov	r4, r0
 23f9160:	2114      	movs	r1, #20
 23f9162:	f7ea f8ce 	bl	23e3302 <_ZdlPvj>
 23f9166:	4620      	mov	r0, r4
 23f9168:	bd10      	pop	{r4, pc}
	...

023f916c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23f916c:	b510      	push	{r4, lr}
 23f916e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f9172:	4604      	mov	r4, r0
 23f9174:	4608      	mov	r0, r1
 23f9176:	4611      	mov	r1, r2
 23f9178:	2200      	movs	r2, #0
 23f917a:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23f917e:	4b04      	ldr	r3, [pc, #16]	; (23f9190 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23f9180:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23f9182:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23f9184:	2301      	movs	r3, #1
 23f9186:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23f9188:	f7fd fc94 	bl	23f6ab4 <hal_usart_init_ex>
}
 23f918c:	4620      	mov	r0, r4
 23f918e:	bd10      	pop	{r4, pc}
 23f9190:	023ffa6c 	.word	0x023ffa6c

023f9194 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23f9194:	7c00      	ldrb	r0, [r0, #16]
 23f9196:	f7fd bc71 	b.w	23f6a7c <hal_usart_is_enabled>

023f919a <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23f919a:	7441      	strb	r1, [r0, #17]
}
 23f919c:	4770      	bx	lr

023f919e <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23f919e:	4770      	bx	lr

023f91a0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23f91a0:	4770      	bx	lr

023f91a2 <_ZN9USBSerial4readEv>:
{
 23f91a2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23f91a4:	2100      	movs	r1, #0
 23f91a6:	7c00      	ldrb	r0, [r0, #16]
 23f91a8:	f7fd fcca 	bl	23f6b40 <HAL_USB_USART_Receive_Data>
}
 23f91ac:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f91b0:	bd08      	pop	{r3, pc}

023f91b2 <_ZN9USBSerial4peekEv>:
{
 23f91b2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23f91b4:	2101      	movs	r1, #1
 23f91b6:	7c00      	ldrb	r0, [r0, #16]
 23f91b8:	f7fd fcc2 	bl	23f6b40 <HAL_USB_USART_Receive_Data>
}
 23f91bc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f91c0:	bd08      	pop	{r3, pc}

023f91c2 <_ZN9USBSerial17availableForWriteEv>:
{
 23f91c2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23f91c4:	7c00      	ldrb	r0, [r0, #16]
 23f91c6:	f7fd fcad 	bl	23f6b24 <HAL_USB_USART_Available_Data_For_Write>
}
 23f91ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f91ce:	bd08      	pop	{r3, pc}

023f91d0 <_ZN9USBSerial9availableEv>:
{
 23f91d0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23f91d2:	7c00      	ldrb	r0, [r0, #16]
 23f91d4:	f7fd fc98 	bl	23f6b08 <HAL_USB_USART_Available_Data>
}
 23f91d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f91dc:	bd08      	pop	{r3, pc}

023f91de <_ZN9USBSerial5writeEh>:
{
 23f91de:	b513      	push	{r0, r1, r4, lr}
 23f91e0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23f91e2:	7c00      	ldrb	r0, [r0, #16]
{
 23f91e4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23f91e6:	f7fd fc9d 	bl	23f6b24 <HAL_USB_USART_Available_Data_For_Write>
 23f91ea:	2800      	cmp	r0, #0
 23f91ec:	9901      	ldr	r1, [sp, #4]
 23f91ee:	dc01      	bgt.n	23f91f4 <_ZN9USBSerial5writeEh+0x16>
 23f91f0:	7c60      	ldrb	r0, [r4, #17]
 23f91f2:	b120      	cbz	r0, 23f91fe <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23f91f4:	7c20      	ldrb	r0, [r4, #16]
 23f91f6:	f7fd fcb1 	bl	23f6b5c <HAL_USB_USART_Send_Data>
 23f91fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23f91fe:	b002      	add	sp, #8
 23f9200:	bd10      	pop	{r4, pc}

023f9202 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23f9202:	7c00      	ldrb	r0, [r0, #16]
 23f9204:	f7fd bcb8 	b.w	23f6b78 <HAL_USB_USART_Flush_Data>

023f9208 <_ZN9USBSerialD0Ev>:
 23f9208:	b510      	push	{r4, lr}
 23f920a:	4604      	mov	r4, r0
 23f920c:	2114      	movs	r1, #20
 23f920e:	f7ea f878 	bl	23e3302 <_ZdlPvj>
 23f9212:	4620      	mov	r0, r4
 23f9214:	bd10      	pop	{r4, pc}
	...

023f9218 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23f9218:	b510      	push	{r4, lr}
 23f921a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f921e:	4604      	mov	r4, r0
 23f9220:	4608      	mov	r0, r1
 23f9222:	2100      	movs	r1, #0
 23f9224:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23f9228:	4b04      	ldr	r3, [pc, #16]	; (23f923c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23f922a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23f922c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23f922e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23f9230:	4611      	mov	r1, r2
  _blocking = true;
 23f9232:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23f9234:	f7fd fc4c 	bl	23f6ad0 <HAL_USB_USART_Init>
}
 23f9238:	4620      	mov	r0, r4
 23f923a:	bd10      	pop	{r4, pc}
 23f923c:	023ffaa0 	.word	0x023ffaa0

023f9240 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23f9240:	2200      	movs	r2, #0
 23f9242:	7c00      	ldrb	r0, [r0, #16]
 23f9244:	f7fd bc52 	b.w	23f6aec <HAL_USB_USART_Begin>

023f9248 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
 23f9248:	7c00      	ldrb	r0, [r0, #16]
 23f924a:	f7fd bca3 	b.w	23f6b94 <HAL_USB_USART_Is_Connected>

023f924e <_Z19acquireSerialBufferv>:
{
 23f924e:	b510      	push	{r4, lr}
 23f9250:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23f9252:	2214      	movs	r2, #20
 23f9254:	2100      	movs	r1, #0
 23f9256:	f003 f8c6 	bl	23fc3e6 <memset>
}
 23f925a:	4620      	mov	r0, r4
 23f925c:	bd10      	pop	{r4, pc}
	...

023f9260 <_Z16_fetch_usbserialv>:
{
 23f9260:	b510      	push	{r4, lr}
 23f9262:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23f9264:	a803      	add	r0, sp, #12
 23f9266:	f7ff fff2 	bl	23f924e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23f926a:	4c0c      	ldr	r4, [pc, #48]	; (23f929c <_Z16_fetch_usbserialv+0x3c>)
 23f926c:	e8d4 1f8f 	ldab	r1, [r4]
 23f9270:	f011 0101 	ands.w	r1, r1, #1
 23f9274:	d10f      	bne.n	23f9296 <_Z16_fetch_usbserialv+0x36>
 23f9276:	4620      	mov	r0, r4
 23f9278:	9101      	str	r1, [sp, #4]
 23f927a:	f7fe f851 	bl	23f7320 <__cxa_guard_acquire>
 23f927e:	9901      	ldr	r1, [sp, #4]
 23f9280:	b148      	cbz	r0, 23f9296 <_Z16_fetch_usbserialv+0x36>
 23f9282:	aa03      	add	r2, sp, #12
 23f9284:	4806      	ldr	r0, [pc, #24]	; (23f92a0 <_Z16_fetch_usbserialv+0x40>)
 23f9286:	f7ff ffc7 	bl	23f9218 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23f928a:	4620      	mov	r0, r4
 23f928c:	f7fe f856 	bl	23f733c <__cxa_guard_release>
 23f9290:	4804      	ldr	r0, [pc, #16]	; (23f92a4 <_Z16_fetch_usbserialv+0x44>)
 23f9292:	f003 f85b 	bl	23fc34c <atexit>
	return _usbserial;
}
 23f9296:	4802      	ldr	r0, [pc, #8]	; (23f92a0 <_Z16_fetch_usbserialv+0x40>)
 23f9298:	b008      	add	sp, #32
 23f929a:	bd10      	pop	{r4, pc}
 23f929c:	1007af80 	.word	0x1007af80
 23f92a0:	1007af84 	.word	0x1007af84
 23f92a4:	023f919f 	.word	0x023f919f

023f92a8 <_ZN8particle13WatchdogClass4initERKNS_21WatchdogConfigurationE>:
LOG_SOURCE_CATEGORY("wiring.watchdog")

namespace particle {

int WatchdogClass::init(const WatchdogConfiguration& config) {
    instance_ = config.watchdogInstance();
 23f92a8:	2200      	movs	r2, #0
 23f92aa:	7402      	strb	r2, [r0, #16]
    return hal_watchdog_set_config(instance_, config.halConfig(), nullptr);
 23f92ac:	4610      	mov	r0, r2
 23f92ae:	f7fd bc7f 	b.w	23f6bb0 <hal_watchdog_set_config>

023f92b2 <_ZN8particle13WatchdogClass5startEv>:
}

int WatchdogClass::start() {
    return hal_watchdog_start(instance_, nullptr);
 23f92b2:	2100      	movs	r1, #0
 23f92b4:	7c00      	ldrb	r0, [r0, #16]
 23f92b6:	f7fd bc89 	b.w	23f6bcc <hal_watchdog_start>

023f92ba <_ZN8particle13WatchdogClass7refreshEv>:
int WatchdogClass::stop() {
    return hal_watchdog_stop(instance_, nullptr);
}

int WatchdogClass::refresh() {
    return hal_watchdog_refresh(instance_, nullptr);
 23f92ba:	2100      	movs	r1, #0
 23f92bc:	7c00      	ldrb	r0, [r0, #16]
 23f92be:	f7fd bc93 	b.w	23f6be8 <hal_watchdog_refresh>

023f92c2 <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
 23f92c2:	4770      	bx	lr

023f92c4 <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
 23f92c4:	2001      	movs	r0, #1
 23f92c6:	4770      	bx	lr

023f92c8 <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv>:
                results[index++] = *result;
            }
        }

    protected:
        static void callback(WiFiAccessPoint* result, void* cookie)
 23f92c8:	b530      	push	{r4, r5, lr}
            if (index<count) {
 23f92ca:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
 23f92ce:	4293      	cmp	r3, r2
 23f92d0:	da10      	bge.n	23f92f4 <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv+0x2c>
                results[index++] = *result;
 23f92d2:	1c5a      	adds	r2, r3, #1
 23f92d4:	604a      	str	r2, [r1, #4]
 23f92d6:	2238      	movs	r2, #56	; 0x38
 23f92d8:	4604      	mov	r4, r0
 23f92da:	680d      	ldr	r5, [r1, #0]
 23f92dc:	fb02 5503 	mla	r5, r2, r3, r5
 23f92e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f92e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f92e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f92e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f92e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f92ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f92ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 23f92f0:	e885 0003 	stmia.w	r5, {r0, r1}
        {
            ((APArrayPopulator*)cookie)->addResult(result);
        }
 23f92f4:	bd30      	pop	{r4, r5, pc}

023f92f6 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23f92f6:	2200      	movs	r2, #0
 23f92f8:	6840      	ldr	r0, [r0, #4]
 23f92fa:	4611      	mov	r1, r2
 23f92fc:	f7fd be6c 	b.w	23f6fd8 <network_ready>

023f9300 <_ZN10WiFiSignalD0Ev>:
    virtual ~WiFiSignal() {};
 23f9300:	b510      	push	{r4, lr}
 23f9302:	4604      	mov	r4, r0
 23f9304:	2124      	movs	r1, #36	; 0x24
 23f9306:	f7e9 fffc 	bl	23e3302 <_ZdlPvj>
 23f930a:	4620      	mov	r0, r4
 23f930c:	bd10      	pop	{r4, pc}

023f930e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23f930e:	2200      	movs	r2, #0
 23f9310:	6840      	ldr	r0, [r0, #4]
 23f9312:	4611      	mov	r1, r2
 23f9314:	f7fd be98 	b.w	23f7048 <network_listening>

023f9318 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23f9318:	2200      	movs	r2, #0
 23f931a:	6840      	ldr	r0, [r0, #4]
 23f931c:	4611      	mov	r1, r2
 23f931e:	f7fd becb 	b.w	23f70b8 <network_get_listen_timeout>

023f9322 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23f9322:	2200      	movs	r2, #0
 23f9324:	6840      	ldr	r0, [r0, #4]
 23f9326:	f7fd beb9 	b.w	23f709c <network_set_listen_timeout>

023f932a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23f932a:	2200      	movs	r2, #0
 23f932c:	6840      	ldr	r0, [r0, #4]
 23f932e:	f081 0101 	eor.w	r1, r1, #1
 23f9332:	f7fd be7b 	b.w	23f702c <network_listen>

023f9336 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23f9336:	2300      	movs	r3, #0
 23f9338:	6840      	ldr	r0, [r0, #4]
 23f933a:	461a      	mov	r2, r3
 23f933c:	4619      	mov	r1, r3
 23f933e:	f7fd be67 	b.w	23f7010 <network_off>

023f9342 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23f9342:	2300      	movs	r3, #0
 23f9344:	6840      	ldr	r0, [r0, #4]
 23f9346:	461a      	mov	r2, r3
 23f9348:	4619      	mov	r1, r3
 23f934a:	f7fd be53 	b.w	23f6ff4 <network_on>

023f934e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23f934e:	2200      	movs	r2, #0
 23f9350:	6840      	ldr	r0, [r0, #4]
 23f9352:	4611      	mov	r1, r2
 23f9354:	f7fd be24 	b.w	23f6fa0 <network_connecting>

023f9358 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23f9358:	2200      	movs	r2, #0
 23f935a:	2102      	movs	r1, #2
 23f935c:	6840      	ldr	r0, [r0, #4]
 23f935e:	f7fd be2d 	b.w	23f6fbc <network_disconnect>

023f9362 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23f9362:	2300      	movs	r3, #0
 23f9364:	6840      	ldr	r0, [r0, #4]
 23f9366:	461a      	mov	r2, r3
 23f9368:	f7fd be0c 	b.w	23f6f84 <network_connect>

023f936c <_ZNK10WiFiSignal11getStrengthEv>:
    if (inf_.size != 0 && inf_.strength >= 0) {
 23f936c:	8983      	ldrh	r3, [r0, #12]
 23f936e:	b17b      	cbz	r3, 23f9390 <_ZNK10WiFiSignal11getStrengthEv+0x24>
 23f9370:	6943      	ldr	r3, [r0, #20]
 23f9372:	2b00      	cmp	r3, #0
 23f9374:	db0c      	blt.n	23f9390 <_ZNK10WiFiSignal11getStrengthEv+0x24>
        return inf_.strength / 65535.0f * 100.0f;
 23f9376:	ee07 3a90 	vmov	s15, r3
 23f937a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 23f9398 <_ZNK10WiFiSignal11getStrengthEv+0x2c>
 23f937e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f9382:	ee87 0a87 	vdiv.f32	s0, s15, s14
 23f9386:	eddf 7a05 	vldr	s15, [pc, #20]	; 23f939c <_ZNK10WiFiSignal11getStrengthEv+0x30>
 23f938a:	ee20 0a27 	vmul.f32	s0, s0, s15
 23f938e:	4770      	bx	lr
    return -1.0f;
 23f9390:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
 23f9394:	4770      	bx	lr
 23f9396:	bf00      	nop
 23f9398:	477fff00 	.word	0x477fff00
 23f939c:	42c80000 	.word	0x42c80000

023f93a0 <_ZNK10WiFiSignal16getStrengthValueEv>:
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
 23f93a0:	8983      	ldrh	r3, [r0, #12]
 23f93a2:	b163      	cbz	r3, 23f93be <_ZNK10WiFiSignal16getStrengthValueEv+0x1e>
 23f93a4:	6903      	ldr	r3, [r0, #16]
 23f93a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23f93aa:	d008      	beq.n	23f93be <_ZNK10WiFiSignal16getStrengthValueEv+0x1e>
        return inf_.rssi / 100.0f;
 23f93ac:	ee07 3a90 	vmov	s15, r3
 23f93b0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 23f93c4 <_ZNK10WiFiSignal16getStrengthValueEv+0x24>
 23f93b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f93b8:	ee87 0a87 	vdiv.f32	s0, s15, s14
 23f93bc:	4770      	bx	lr
    return 0.0f;
 23f93be:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23f93c8 <_ZNK10WiFiSignal16getStrengthValueEv+0x28>
}
 23f93c2:	4770      	bx	lr
 23f93c4:	42c80000 	.word	0x42c80000
 23f93c8:	00000000 	.word	0x00000000

023f93cc <_ZNK10WiFiSignal10getQualityEv>:
    if (inf_.size != 0 && inf_.quality >= 0) {
 23f93cc:	8983      	ldrh	r3, [r0, #12]
 23f93ce:	b17b      	cbz	r3, 23f93f0 <_ZNK10WiFiSignal10getQualityEv+0x24>
 23f93d0:	6a03      	ldr	r3, [r0, #32]
 23f93d2:	2b00      	cmp	r3, #0
 23f93d4:	db0c      	blt.n	23f93f0 <_ZNK10WiFiSignal10getQualityEv+0x24>
        return inf_.quality / 65535.0f * 100.0f;
 23f93d6:	ee07 3a90 	vmov	s15, r3
 23f93da:	ed9f 7a07 	vldr	s14, [pc, #28]	; 23f93f8 <_ZNK10WiFiSignal10getQualityEv+0x2c>
 23f93de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f93e2:	ee87 0a87 	vdiv.f32	s0, s15, s14
 23f93e6:	eddf 7a05 	vldr	s15, [pc, #20]	; 23f93fc <_ZNK10WiFiSignal10getQualityEv+0x30>
 23f93ea:	ee20 0a27 	vmul.f32	s0, s0, s15
 23f93ee:	4770      	bx	lr
    return -1.0f;
 23f93f0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
 23f93f4:	4770      	bx	lr
 23f93f6:	bf00      	nop
 23f93f8:	477fff00 	.word	0x477fff00
 23f93fc:	42c80000 	.word	0x42c80000

023f9400 <_ZNK10WiFiSignal15getQualityValueEv>:
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
 23f9400:	8983      	ldrh	r3, [r0, #12]
 23f9402:	b163      	cbz	r3, 23f941e <_ZNK10WiFiSignal15getQualityValueEv+0x1e>
 23f9404:	6983      	ldr	r3, [r0, #24]
 23f9406:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23f940a:	d008      	beq.n	23f941e <_ZNK10WiFiSignal15getQualityValueEv+0x1e>
        return inf_.snr / 100.0f;
 23f940c:	ee07 3a90 	vmov	s15, r3
 23f9410:	ed9f 7a04 	vldr	s14, [pc, #16]	; 23f9424 <_ZNK10WiFiSignal15getQualityValueEv+0x24>
 23f9414:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f9418:	ee87 0a87 	vdiv.f32	s0, s15, s14
 23f941c:	4770      	bx	lr
    return 0.0f;
 23f941e:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23f9428 <_ZNK10WiFiSignal15getQualityValueEv+0x28>
}
 23f9422:	4770      	bx	lr
 23f9424:	42c80000 	.word	0x42c80000
 23f9428:	00000000 	.word	0x00000000

023f942c <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
 23f942c:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
 23f942e:	460c      	mov	r4, r1
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
 23f9430:	4606      	mov	r6, r0
    inf_ = inf;
 23f9432:	f100 050c 	add.w	r5, r0, #12
 23f9436:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f9438:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f943a:	e894 0003 	ldmia.w	r4, {r0, r1}
 23f943e:	e885 0003 	stmia.w	r5, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
 23f9442:	6933      	ldr	r3, [r6, #16]
}
 23f9444:	2001      	movs	r0, #1
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
 23f9446:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23f944a:	bf16      	itet	ne
 23f944c:	2264      	movne	r2, #100	; 0x64
 23f944e:	2302      	moveq	r3, #2
 23f9450:	fb93 f3f2 	sdivne	r3, r3, r2
 23f9454:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
 23f9456:	69b3      	ldr	r3, [r6, #24]
 23f9458:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23f945c:	bf16      	itet	ne
 23f945e:	2264      	movne	r2, #100	; 0x64
 23f9460:	2300      	moveq	r3, #0
 23f9462:	fb93 f3f2 	sdivne	r3, r3, r2
 23f9466:	60b3      	str	r3, [r6, #8]
}
 23f9468:	bd70      	pop	{r4, r5, r6, pc}
	...

023f946c <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>:
        APScan apScan(results, result_count);
        return apScan.start();
    }

#if !HAL_PLATFORM_WIFI_SCAN_ONLY
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
 23f946c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
            this->index = 0;
 23f946e:	2300      	movs	r3, #0
            this->results = results;
 23f9470:	9101      	str	r1, [sp, #4]
            return std::min(count, wlan_get_credentials(callback, this));
 23f9472:	4806      	ldr	r0, [pc, #24]	; (23f948c <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj+0x20>)
 23f9474:	a901      	add	r1, sp, #4
            this->index = 0;
 23f9476:	9302      	str	r3, [sp, #8]
            this->count = size;
 23f9478:	9203      	str	r2, [sp, #12]
            return std::min(count, wlan_get_credentials(callback, this));
 23f947a:	f7fd fbc3 	bl	23f6c04 <wlan_get_credentials>
        APList apList(results, result_count);
        return apList.start();
    }
 23f947e:	9b03      	ldr	r3, [sp, #12]
 23f9480:	4298      	cmp	r0, r3
 23f9482:	bfa8      	it	ge
 23f9484:	4618      	movge	r0, r3
 23f9486:	b005      	add	sp, #20
 23f9488:	f85d fb04 	ldr.w	pc, [sp], #4
 23f948c:	023f92c9 	.word	0x023f92c9

023f9490 <_ZN5spark9WiFiClass4RSSIEv>:

    WiFiSignal WiFiClass::RSSI() {
 23f9490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    WiFiSignal() {}
 23f9494:	2500      	movs	r5, #0
 23f9496:	f04f 0802 	mov.w	r8, #2
 23f949a:	2618      	movs	r6, #24
 23f949c:	460f      	mov	r7, r1
 23f949e:	4b14      	ldr	r3, [pc, #80]	; (23f94f0 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
 23f94a0:	4632      	mov	r2, r6
 23f94a2:	4629      	mov	r1, r5
 23f94a4:	e9c0 8501 	strd	r8, r5, [r0, #4]
 23f94a8:	b086      	sub	sp, #24
 23f94aa:	6003      	str	r3, [r0, #0]
 23f94ac:	4604      	mov	r4, r0
 23f94ae:	300c      	adds	r0, #12
 23f94b0:	f002 ff99 	bl	23fc3e6 <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 23f94b4:	462a      	mov	r2, r5
 23f94b6:	4629      	mov	r1, r5
 23f94b8:	6878      	ldr	r0, [r7, #4]
 23f94ba:	f7fd fd8d 	bl	23f6fd8 <network_ready>
 23f94be:	b180      	cbz	r0, 23f94e2 <_ZN5spark9WiFiClass4RSSIEv+0x52>
            return sig;
        }

        wlan_connected_info_t info = {};
 23f94c0:	4632      	mov	r2, r6
 23f94c2:	4629      	mov	r1, r5
 23f94c4:	4668      	mov	r0, sp
 23f94c6:	f002 ff8e 	bl	23fc3e6 <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
 23f94ca:	462a      	mov	r2, r5
 23f94cc:	4669      	mov	r1, sp
 23f94ce:	4628      	mov	r0, r5
        info.size = sizeof(info);
 23f94d0:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
 23f94d4:	f7fd fba4 	bl	23f6c20 <wlan_connected_info>
        if (r == 0) {
 23f94d8:	b938      	cbnz	r0, 23f94ea <_ZN5spark9WiFiClass4RSSIEv+0x5a>
            sig.fromConnectedInfo(info);
 23f94da:	4669      	mov	r1, sp
 23f94dc:	4620      	mov	r0, r4
 23f94de:	f7ff ffa5 	bl	23f942c <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
        }

        sig.rssi = 2;
        return sig;
    }
 23f94e2:	4620      	mov	r0, r4
 23f94e4:	b006      	add	sp, #24
 23f94e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        sig.rssi = 2;
 23f94ea:	f8c4 8004 	str.w	r8, [r4, #4]
        return sig;
 23f94ee:	e7f8      	b.n	23f94e2 <_ZN5spark9WiFiClass4RSSIEv+0x52>
 23f94f0:	023ffb18 	.word	0x023ffb18

023f94f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23f94f4:	2205      	movs	r2, #5
 23f94f6:	4b02      	ldr	r3, [pc, #8]	; (23f9500 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23f94f8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23f94fa:	4a02      	ldr	r2, [pc, #8]	; (23f9504 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23f94fc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23f94fe:	4770      	bx	lr
 23f9500:	1007af98 	.word	0x1007af98
 23f9504:	023ffad4 	.word	0x023ffad4

023f9508 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23f9508:	4b01      	ldr	r3, [pc, #4]	; (23f9510 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23f950a:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23f950c:	4770      	bx	lr
 23f950e:	bf00      	nop
 23f9510:	1006a1c0 	.word	0x1006a1c0

023f9514 <serialEventRun>:
{
 23f9514:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23f9516:	4b0d      	ldr	r3, [pc, #52]	; (23f954c <serialEventRun+0x38>)
 23f9518:	b143      	cbz	r3, 23f952c <serialEventRun+0x18>
 23f951a:	f7ff fea1 	bl	23f9260 <_Z16_fetch_usbserialv>
 23f951e:	6803      	ldr	r3, [r0, #0]
 23f9520:	691b      	ldr	r3, [r3, #16]
 23f9522:	4798      	blx	r3
 23f9524:	2800      	cmp	r0, #0
 23f9526:	dd01      	ble.n	23f952c <serialEventRun+0x18>
        serialEvent();
 23f9528:	e000      	b.n	23f952c <serialEventRun+0x18>
 23f952a:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23f952c:	4b08      	ldr	r3, [pc, #32]	; (23f9550 <serialEventRun+0x3c>)
 23f952e:	b143      	cbz	r3, 23f9542 <serialEventRun+0x2e>
 23f9530:	f000 f9d2 	bl	23f98d8 <_Z22__fetch_global_Serial1v>
 23f9534:	6803      	ldr	r3, [r0, #0]
 23f9536:	691b      	ldr	r3, [r3, #16]
 23f9538:	4798      	blx	r3
 23f953a:	2800      	cmp	r0, #0
 23f953c:	dd01      	ble.n	23f9542 <serialEventRun+0x2e>
        serialEvent1();
 23f953e:	e000      	b.n	23f9542 <serialEventRun+0x2e>
 23f9540:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23f9542:	4b04      	ldr	r3, [pc, #16]	; (23f9554 <serialEventRun+0x40>)
 23f9544:	b10b      	cbz	r3, 23f954a <serialEventRun+0x36>
 23f9546:	f000 fa0d 	bl	23f9964 <_Z15serialEventRun2v>
}
 23f954a:	bd08      	pop	{r3, pc}
	...

023f9558 <_post_loop>:
{
 23f9558:	b508      	push	{r3, lr}
	serialEventRun();
 23f955a:	f7ff ffdb 	bl	23f9514 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23f955e:	f7fc ffa7 	bl	23f64b0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23f9562:	4b01      	ldr	r3, [pc, #4]	; (23f9568 <_post_loop+0x10>)
 23f9564:	6018      	str	r0, [r3, #0]
}
 23f9566:	bd08      	pop	{r3, pc}
 23f9568:	1007afa8 	.word	0x1007afa8

023f956c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23f956c:	4805      	ldr	r0, [pc, #20]	; (23f9584 <_Z33system_initialize_user_backup_ramv+0x18>)
 23f956e:	4a06      	ldr	r2, [pc, #24]	; (23f9588 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23f9570:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23f9572:	1a12      	subs	r2, r2, r0
 23f9574:	4905      	ldr	r1, [pc, #20]	; (23f958c <_Z33system_initialize_user_backup_ramv+0x20>)
 23f9576:	f002 ff29 	bl	23fc3cc <memcpy>
    __backup_sram_signature = signature;
 23f957a:	4b05      	ldr	r3, [pc, #20]	; (23f9590 <_Z33system_initialize_user_backup_ramv+0x24>)
 23f957c:	4a05      	ldr	r2, [pc, #20]	; (23f9594 <_Z33system_initialize_user_backup_ramv+0x28>)
 23f957e:	601a      	str	r2, [r3, #0]
}
 23f9580:	bd08      	pop	{r3, pc}
 23f9582:	bf00      	nop
 23f9584:	1007b400 	.word	0x1007b400
 23f9588:	1007b404 	.word	0x1007b404
 23f958c:	085fff3c 	.word	0x085fff3c
 23f9590:	1007b400 	.word	0x1007b400
 23f9594:	9a271c1e 	.word	0x9a271c1e

023f9598 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23f9598:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23f959a:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23f959c:	461a      	mov	r2, r3
 23f959e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23f95a2:	9300      	str	r3, [sp, #0]
 23f95a4:	f7fd fc0e 	bl	23f6dc4 <system_ctrl_set_result>
}
 23f95a8:	b003      	add	sp, #12
 23f95aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023f95b0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23f95b0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23f95b2:	8843      	ldrh	r3, [r0, #2]
 23f95b4:	2b0a      	cmp	r3, #10
 23f95b6:	d008      	beq.n	23f95ca <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23f95b8:	2b50      	cmp	r3, #80	; 0x50
 23f95ba:	d10b      	bne.n	23f95d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23f95bc:	4b09      	ldr	r3, [pc, #36]	; (23f95e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23f95be:	681b      	ldr	r3, [r3, #0]
 23f95c0:	b14b      	cbz	r3, 23f95d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23f95c2:	b003      	add	sp, #12
 23f95c4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23f95c8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23f95ca:	f7ff ffe5 	bl	23f9598 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23f95ce:	b003      	add	sp, #12
 23f95d0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23f95d4:	2300      	movs	r3, #0
 23f95d6:	461a      	mov	r2, r3
 23f95d8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23f95dc:	9300      	str	r3, [sp, #0]
 23f95de:	f7fd fbf1 	bl	23f6dc4 <system_ctrl_set_result>
}
 23f95e2:	e7f4      	b.n	23f95ce <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23f95e4:	1007afa4 	.word	0x1007afa4

023f95e8 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23f95e8:	2100      	movs	r1, #0
{
 23f95ea:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23f95ec:	4811      	ldr	r0, [pc, #68]	; (23f9634 <module_user_init_hook+0x4c>)
 23f95ee:	f7fd fe51 	bl	23f7294 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23f95f2:	4b11      	ldr	r3, [pc, #68]	; (23f9638 <module_user_init_hook+0x50>)
 23f95f4:	681a      	ldr	r2, [r3, #0]
 23f95f6:	4b11      	ldr	r3, [pc, #68]	; (23f963c <module_user_init_hook+0x54>)
 23f95f8:	429a      	cmp	r2, r3
 23f95fa:	bf0c      	ite	eq
 23f95fc:	2201      	moveq	r2, #1
 23f95fe:	2200      	movne	r2, #0
 23f9600:	4b0f      	ldr	r3, [pc, #60]	; (23f9640 <module_user_init_hook+0x58>)
 23f9602:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23f9604:	d001      	beq.n	23f960a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23f9606:	f7ff ffb1 	bl	23f956c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23f960a:	f7fc ff27 	bl	23f645c <HAL_RNG_GetRandomNumber>
 23f960e:	4604      	mov	r4, r0
    srand(seed);
 23f9610:	f002 fef2 	bl	23fc3f8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23f9614:	4b0b      	ldr	r3, [pc, #44]	; (23f9644 <module_user_init_hook+0x5c>)
 23f9616:	b113      	cbz	r3, 23f961e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23f9618:	4620      	mov	r0, r4
 23f961a:	e000      	b.n	23f961e <module_user_init_hook+0x36>
 23f961c:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23f961e:	2100      	movs	r1, #0
 23f9620:	4808      	ldr	r0, [pc, #32]	; (23f9644 <module_user_init_hook+0x5c>)
 23f9622:	f7fd fc85 	bl	23f6f30 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23f9626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23f962a:	2100      	movs	r1, #0
 23f962c:	4806      	ldr	r0, [pc, #24]	; (23f9648 <module_user_init_hook+0x60>)
 23f962e:	f7fd bbbb 	b.w	23f6da8 <system_ctrl_set_app_request_handler>
 23f9632:	bf00      	nop
 23f9634:	023f9509 	.word	0x023f9509
 23f9638:	1007b400 	.word	0x1007b400
 23f963c:	9a271c1e 	.word	0x9a271c1e
 23f9640:	1007afa0 	.word	0x1007afa0
 23f9644:	00000000 	.word	0x00000000
 23f9648:	023f95b1 	.word	0x023f95b1

023f964c <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
 23f964c:	b509      	push	{r0, r3, lr}
 23f964e:	4804      	ldr	r0, [pc, #16]	; (23f9660 <spark_protocol_instance+0x14>)
 23f9650:	6800      	ldr	r0, [r0, #0]
 23f9652:	4b04      	ldr	r3, [pc, #16]	; (23f9664 <spark_protocol_instance+0x18>)
 23f9654:	4403      	add	r3, r0
 23f9656:	681b      	ldr	r3, [r3, #0]
 23f9658:	681b      	ldr	r3, [r3, #0]
 23f965a:	9302      	str	r3, [sp, #8]
 23f965c:	bd09      	pop	{r0, r3, pc}
 23f965e:	0000      	.short	0x0000
 23f9660:	1006a0e0 	.word	0x1006a0e0
 23f9664:	00000044 	.word	0x00000044

023f9668 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
 23f9668:	b509      	push	{r0, r3, lr}
 23f966a:	4804      	ldr	r0, [pc, #16]	; (23f967c <spark_protocol_set_product_id+0x14>)
 23f966c:	6800      	ldr	r0, [r0, #0]
 23f966e:	4b04      	ldr	r3, [pc, #16]	; (23f9680 <spark_protocol_set_product_id+0x18>)
 23f9670:	4403      	add	r3, r0
 23f9672:	681b      	ldr	r3, [r3, #0]
 23f9674:	685b      	ldr	r3, [r3, #4]
 23f9676:	9302      	str	r3, [sp, #8]
 23f9678:	bd09      	pop	{r0, r3, pc}
 23f967a:	0000      	.short	0x0000
 23f967c:	1006a0e0 	.word	0x1006a0e0
 23f9680:	00000044 	.word	0x00000044

023f9684 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
 23f9684:	b509      	push	{r0, r3, lr}
 23f9686:	4804      	ldr	r0, [pc, #16]	; (23f9698 <spark_protocol_set_product_firmware_version+0x14>)
 23f9688:	6800      	ldr	r0, [r0, #0]
 23f968a:	4b04      	ldr	r3, [pc, #16]	; (23f969c <spark_protocol_set_product_firmware_version+0x18>)
 23f968c:	4403      	add	r3, r0
 23f968e:	681b      	ldr	r3, [r3, #0]
 23f9690:	689b      	ldr	r3, [r3, #8]
 23f9692:	9302      	str	r3, [sp, #8]
 23f9694:	bd09      	pop	{r0, r3, pc}
 23f9696:	0000      	.short	0x0000
 23f9698:	1006a0e0 	.word	0x1006a0e0
 23f969c:	00000044 	.word	0x00000044

023f96a0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23f96a0:	282c      	cmp	r0, #44	; 0x2c
bool pinAvailable(uint16_t pin) {
 23f96a2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
 23f96a4:	d902      	bls.n	23f96ac <pinAvailable+0xc>
    return false;
 23f96a6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23f96a8:	b002      	add	sp, #8
 23f96aa:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23f96ac:	f1a0 030b 	sub.w	r3, r0, #11
 23f96b0:	2b02      	cmp	r3, #2
 23f96b2:	d819      	bhi.n	23f96e8 <pinAvailable+0x48>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23f96b4:	4c17      	ldr	r4, [pc, #92]	; (23f9714 <pinAvailable+0x74>)
 23f96b6:	e8d4 1f8f 	ldab	r1, [r4]
 23f96ba:	f011 0101 	ands.w	r1, r1, #1
 23f96be:	d10b      	bne.n	23f96d8 <pinAvailable+0x38>
 23f96c0:	4620      	mov	r0, r4
 23f96c2:	9101      	str	r1, [sp, #4]
 23f96c4:	f7fd fe2c 	bl	23f7320 <__cxa_guard_acquire>
 23f96c8:	9901      	ldr	r1, [sp, #4]
 23f96ca:	b128      	cbz	r0, 23f96d8 <pinAvailable+0x38>
 23f96cc:	4812      	ldr	r0, [pc, #72]	; (23f9718 <pinAvailable+0x78>)
 23f96ce:	f7ff f8ef 	bl	23f88b0 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23f96d2:	4620      	mov	r0, r4
 23f96d4:	f7fd fe32 	bl	23f733c <__cxa_guard_release>
 23f96d8:	4b0f      	ldr	r3, [pc, #60]	; (23f9718 <pinAvailable+0x78>)
 23f96da:	7818      	ldrb	r0, [r3, #0]
 23f96dc:	f7fd f926 	bl	23f692c <hal_spi_is_enabled>
 23f96e0:	2800      	cmp	r0, #0
 23f96e2:	d1e0      	bne.n	23f96a6 <pinAvailable+0x6>
  return true; // 'pin' is available
 23f96e4:	2001      	movs	r0, #1
 23f96e6:	e7df      	b.n	23f96a8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23f96e8:	2801      	cmp	r0, #1
 23f96ea:	d809      	bhi.n	23f9700 <pinAvailable+0x60>
 23f96ec:	f000 f89a 	bl	23f9824 <_Z19__fetch_global_Wirev>
 23f96f0:	2100      	movs	r1, #0
 23f96f2:	7c00      	ldrb	r0, [r0, #16]
 23f96f4:	f7fd f856 	bl	23f67a4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23f96f8:	f080 0001 	eor.w	r0, r0, #1
 23f96fc:	b2c0      	uxtb	r0, r0
 23f96fe:	e7d3      	b.n	23f96a8 <pinAvailable+0x8>
 23f9700:	3809      	subs	r0, #9
 23f9702:	2801      	cmp	r0, #1
 23f9704:	d8ee      	bhi.n	23f96e4 <pinAvailable+0x44>
 23f9706:	f000 f8e7 	bl	23f98d8 <_Z22__fetch_global_Serial1v>
 23f970a:	7c00      	ldrb	r0, [r0, #16]
 23f970c:	f7fd f9b6 	bl	23f6a7c <hal_usart_is_enabled>
 23f9710:	e7f2      	b.n	23f96f8 <pinAvailable+0x58>
 23f9712:	bf00      	nop
 23f9714:	1006a228 	.word	0x1006a228
 23f9718:	1006a22c 	.word	0x1006a22c

023f971c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23f971c:	282c      	cmp	r0, #44	; 0x2c
{
 23f971e:	b538      	push	{r3, r4, r5, lr}
 23f9720:	4604      	mov	r4, r0
 23f9722:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23f9724:	d80a      	bhi.n	23f973c <pinMode+0x20>
 23f9726:	29ff      	cmp	r1, #255	; 0xff
 23f9728:	d008      	beq.n	23f973c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23f972a:	f7ff ffb9 	bl	23f96a0 <pinAvailable>
 23f972e:	b128      	cbz	r0, 23f973c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23f9730:	4629      	mov	r1, r5
 23f9732:	4620      	mov	r0, r4
}
 23f9734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23f9738:	f7fc bf54 	b.w	23f65e4 <hal_gpio_mode>
}
 23f973c:	bd38      	pop	{r3, r4, r5, pc}

023f973e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23f973e:	b538      	push	{r3, r4, r5, lr}
 23f9740:	4604      	mov	r4, r0
 23f9742:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23f9744:	f7fc ff5c 	bl	23f6600 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23f9748:	28ff      	cmp	r0, #255	; 0xff
 23f974a:	d010      	beq.n	23f976e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23f974c:	2806      	cmp	r0, #6
 23f974e:	d804      	bhi.n	23f975a <digitalWrite+0x1c>
 23f9750:	234d      	movs	r3, #77	; 0x4d
 23f9752:	fa23 f000 	lsr.w	r0, r3, r0
 23f9756:	07c3      	lsls	r3, r0, #31
 23f9758:	d409      	bmi.n	23f976e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23f975a:	4620      	mov	r0, r4
 23f975c:	f7ff ffa0 	bl	23f96a0 <pinAvailable>
 23f9760:	b128      	cbz	r0, 23f976e <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23f9762:	4629      	mov	r1, r5
 23f9764:	4620      	mov	r0, r4
}
 23f9766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23f976a:	f7fc bf57 	b.w	23f661c <hal_gpio_write>
}
 23f976e:	bd38      	pop	{r3, r4, r5, pc}

023f9770 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
 23f9770:	b510      	push	{r4, lr}
 23f9772:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
 23f9774:	f7fc ff44 	bl	23f6600 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 23f9778:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 23f977a:	b2db      	uxtb	r3, r3
 23f977c:	2b01      	cmp	r3, #1
 23f977e:	d908      	bls.n	23f9792 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 23f9780:	4620      	mov	r0, r4
 23f9782:	f7ff ff8d 	bl	23f96a0 <pinAvailable>
 23f9786:	b120      	cbz	r0, 23f9792 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
 23f9788:	4620      	mov	r0, r4
}
 23f978a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
 23f978e:	f7fc bf53 	b.w	23f6638 <hal_gpio_read>
}
 23f9792:	2000      	movs	r0, #0
 23f9794:	bd10      	pop	{r4, pc}

023f9796 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(hal_pin_t pin)
{
 23f9796:	b510      	push	{r4, lr}
 23f9798:	4604      	mov	r4, r0
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
 23f979a:	f7ff ff81 	bl	23f96a0 <pinAvailable>
 23f979e:	b150      	cbz	r0, 23f97b6 <analogRead+0x20>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
 23f97a0:	2103      	movs	r1, #3
 23f97a2:	4620      	mov	r0, r4
 23f97a4:	f7fc ff10 	bl	23f65c8 <hal_pin_validate_function>
 23f97a8:	2803      	cmp	r0, #3
 23f97aa:	d104      	bne.n	23f97b6 <analogRead+0x20>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 23f97ac:	4620      	mov	r0, r4
}
 23f97ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 23f97b2:	f7fc bf6b 	b.w	23f668c <hal_adc_read>
}
 23f97b6:	2000      	movs	r0, #0
 23f97b8:	bd10      	pop	{r4, pc}
	...

023f97bc <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 23f97bc:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 23f97be:	4c08      	ldr	r4, [pc, #32]	; (23f97e0 <_Z21__fetch_global_EEPROMv+0x24>)
 23f97c0:	e8d4 3f8f 	ldab	r3, [r4]
 23f97c4:	07db      	lsls	r3, r3, #31
 23f97c6:	d408      	bmi.n	23f97da <_Z21__fetch_global_EEPROMv+0x1e>
 23f97c8:	4620      	mov	r0, r4
 23f97ca:	f7fd fda9 	bl	23f7320 <__cxa_guard_acquire>
 23f97ce:	b120      	cbz	r0, 23f97da <_Z21__fetch_global_EEPROMv+0x1e>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 23f97d0:	f7fc fe7c 	bl	23f64cc <HAL_EEPROM_Init>
 23f97d4:	4620      	mov	r0, r4
 23f97d6:	f7fd fdb1 	bl	23f733c <__cxa_guard_release>
	return eeprom;
}
 23f97da:	4802      	ldr	r0, [pc, #8]	; (23f97e4 <_Z21__fetch_global_EEPROMv+0x28>)
 23f97dc:	bd10      	pop	{r4, pc}
 23f97de:	bf00      	nop
 23f97e0:	1007afac 	.word	0x1007afac
 23f97e4:	1007afb0 	.word	0x1007afb0

023f97e8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23f97e8:	4770      	bx	lr
	...

023f97ec <_Z17acquireWireBufferv>:
{
 23f97ec:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23f97ee:	4b0b      	ldr	r3, [pc, #44]	; (23f981c <_Z17acquireWireBufferv+0x30>)
{
 23f97f0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23f97f2:	6003      	str	r3, [r0, #0]
 23f97f4:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23f97f6:	490a      	ldr	r1, [pc, #40]	; (23f9820 <_Z17acquireWireBufferv+0x34>)
	hal_i2c_config_t config = {
 23f97f8:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23f97fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 23f97fe:	f000 f8c7 	bl	23f9990 <_ZnajRKSt9nothrow_t>
	};
 23f9802:	f44f 7500 	mov.w	r5, #512	; 0x200
 23f9806:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23f9808:	4905      	ldr	r1, [pc, #20]	; (23f9820 <_Z17acquireWireBufferv+0x34>)
 23f980a:	4628      	mov	r0, r5
	};
 23f980c:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23f980e:	f000 f8bf 	bl	23f9990 <_ZnajRKSt9nothrow_t>
	};
 23f9812:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23f9816:	4620      	mov	r0, r4
 23f9818:	bd38      	pop	{r3, r4, r5, pc}
 23f981a:	bf00      	nop
 23f981c:	00010018 	.word	0x00010018
 23f9820:	023ffb34 	.word	0x023ffb34

023f9824 <_Z19__fetch_global_Wirev>:
{
 23f9824:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23f9826:	4d0e      	ldr	r5, [pc, #56]	; (23f9860 <_Z19__fetch_global_Wirev+0x3c>)
{
 23f9828:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23f982a:	e8d5 1f8f 	ldab	r1, [r5]
 23f982e:	f011 0401 	ands.w	r4, r1, #1
 23f9832:	d111      	bne.n	23f9858 <_Z19__fetch_global_Wirev+0x34>
 23f9834:	4628      	mov	r0, r5
 23f9836:	f7fd fd73 	bl	23f7320 <__cxa_guard_acquire>
 23f983a:	b168      	cbz	r0, 23f9858 <_Z19__fetch_global_Wirev+0x34>
 23f983c:	4668      	mov	r0, sp
 23f983e:	f7ff ffd5 	bl	23f97ec <_Z17acquireWireBufferv>
 23f9842:	466a      	mov	r2, sp
 23f9844:	4621      	mov	r1, r4
 23f9846:	4807      	ldr	r0, [pc, #28]	; (23f9864 <_Z19__fetch_global_Wirev+0x40>)
 23f9848:	f7fe fb00 	bl	23f7e4c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23f984c:	4628      	mov	r0, r5
 23f984e:	f7fd fd75 	bl	23f733c <__cxa_guard_release>
 23f9852:	4805      	ldr	r0, [pc, #20]	; (23f9868 <_Z19__fetch_global_Wirev+0x44>)
 23f9854:	f002 fd7a 	bl	23fc34c <atexit>
	return wire;
}
 23f9858:	4802      	ldr	r0, [pc, #8]	; (23f9864 <_Z19__fetch_global_Wirev+0x40>)
 23f985a:	b007      	add	sp, #28
 23f985c:	bd30      	pop	{r4, r5, pc}
 23f985e:	bf00      	nop
 23f9860:	1007afb4 	.word	0x1007afb4
 23f9864:	1007afb8 	.word	0x1007afb8
 23f9868:	023f97e9 	.word	0x023f97e9

023f986c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23f986c:	4770      	bx	lr

023f986e <__tcf_1>:
 23f986e:	4770      	bx	lr

023f9870 <_Z20acquireSerial1Bufferv>:
{
 23f9870:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23f9872:	2514      	movs	r5, #20
{
 23f9874:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23f9876:	462a      	mov	r2, r5
 23f9878:	2100      	movs	r1, #0
 23f987a:	f002 fdb4 	bl	23fc3e6 <memset>
 23f987e:	8025      	strh	r5, [r4, #0]
 23f9880:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23f9882:	4907      	ldr	r1, [pc, #28]	; (23f98a0 <_Z20acquireSerial1Bufferv+0x30>)
 23f9884:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23f9886:	8125      	strh	r5, [r4, #8]
 23f9888:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23f988a:	f000 f881 	bl	23f9990 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23f988e:	4904      	ldr	r1, [pc, #16]	; (23f98a0 <_Z20acquireSerial1Bufferv+0x30>)
    };
 23f9890:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23f9892:	4628      	mov	r0, r5
 23f9894:	f000 f87c 	bl	23f9990 <_ZnajRKSt9nothrow_t>
    };
 23f9898:	60e0      	str	r0, [r4, #12]
}
 23f989a:	4620      	mov	r0, r4
 23f989c:	bd38      	pop	{r3, r4, r5, pc}
 23f989e:	bf00      	nop
 23f98a0:	023ffb34 	.word	0x023ffb34

023f98a4 <_Z20acquireSerial2Bufferv>:
 23f98a4:	b538      	push	{r3, r4, r5, lr}
 23f98a6:	2514      	movs	r5, #20
 23f98a8:	4604      	mov	r4, r0
 23f98aa:	462a      	mov	r2, r5
 23f98ac:	2100      	movs	r1, #0
 23f98ae:	f002 fd9a 	bl	23fc3e6 <memset>
 23f98b2:	8025      	strh	r5, [r4, #0]
 23f98b4:	2540      	movs	r5, #64	; 0x40
 23f98b6:	4907      	ldr	r1, [pc, #28]	; (23f98d4 <_Z20acquireSerial2Bufferv+0x30>)
 23f98b8:	4628      	mov	r0, r5
 23f98ba:	8125      	strh	r5, [r4, #8]
 23f98bc:	8225      	strh	r5, [r4, #16]
 23f98be:	f000 f867 	bl	23f9990 <_ZnajRKSt9nothrow_t>
 23f98c2:	4904      	ldr	r1, [pc, #16]	; (23f98d4 <_Z20acquireSerial2Bufferv+0x30>)
 23f98c4:	6060      	str	r0, [r4, #4]
 23f98c6:	4628      	mov	r0, r5
 23f98c8:	f000 f862 	bl	23f9990 <_ZnajRKSt9nothrow_t>
 23f98cc:	60e0      	str	r0, [r4, #12]
 23f98ce:	4620      	mov	r0, r4
 23f98d0:	bd38      	pop	{r3, r4, r5, pc}
 23f98d2:	bf00      	nop
 23f98d4:	023ffb34 	.word	0x023ffb34

023f98d8 <_Z22__fetch_global_Serial1v>:
{
 23f98d8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23f98da:	4d0e      	ldr	r5, [pc, #56]	; (23f9914 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23f98dc:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23f98de:	e8d5 1f8f 	ldab	r1, [r5]
 23f98e2:	f011 0401 	ands.w	r4, r1, #1
 23f98e6:	d111      	bne.n	23f990c <_Z22__fetch_global_Serial1v+0x34>
 23f98e8:	4628      	mov	r0, r5
 23f98ea:	f7fd fd19 	bl	23f7320 <__cxa_guard_acquire>
 23f98ee:	b168      	cbz	r0, 23f990c <_Z22__fetch_global_Serial1v+0x34>
 23f98f0:	a801      	add	r0, sp, #4
 23f98f2:	f7ff ffbd 	bl	23f9870 <_Z20acquireSerial1Bufferv>
 23f98f6:	4621      	mov	r1, r4
 23f98f8:	aa01      	add	r2, sp, #4
 23f98fa:	4807      	ldr	r0, [pc, #28]	; (23f9918 <_Z22__fetch_global_Serial1v+0x40>)
 23f98fc:	f7ff fc36 	bl	23f916c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23f9900:	4628      	mov	r0, r5
 23f9902:	f7fd fd1b 	bl	23f733c <__cxa_guard_release>
 23f9906:	4805      	ldr	r0, [pc, #20]	; (23f991c <_Z22__fetch_global_Serial1v+0x44>)
 23f9908:	f002 fd20 	bl	23fc34c <atexit>
    return serial1;
}
 23f990c:	4802      	ldr	r0, [pc, #8]	; (23f9918 <_Z22__fetch_global_Serial1v+0x40>)
 23f990e:	b007      	add	sp, #28
 23f9910:	bd30      	pop	{r4, r5, pc}
 23f9912:	bf00      	nop
 23f9914:	1007afcc 	.word	0x1007afcc
 23f9918:	1007afd4 	.word	0x1007afd4
 23f991c:	023f986d 	.word	0x023f986d

023f9920 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23f9920:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23f9922:	4c0d      	ldr	r4, [pc, #52]	; (23f9958 <_Z22__fetch_global_Serial2v+0x38>)
{
 23f9924:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23f9926:	e8d4 3f8f 	ldab	r3, [r4]
 23f992a:	07db      	lsls	r3, r3, #31
 23f992c:	d411      	bmi.n	23f9952 <_Z22__fetch_global_Serial2v+0x32>
 23f992e:	4620      	mov	r0, r4
 23f9930:	f7fd fcf6 	bl	23f7320 <__cxa_guard_acquire>
 23f9934:	b168      	cbz	r0, 23f9952 <_Z22__fetch_global_Serial2v+0x32>
 23f9936:	a801      	add	r0, sp, #4
 23f9938:	f7ff ffb4 	bl	23f98a4 <_Z20acquireSerial2Bufferv>
 23f993c:	2101      	movs	r1, #1
 23f993e:	aa01      	add	r2, sp, #4
 23f9940:	4806      	ldr	r0, [pc, #24]	; (23f995c <_Z22__fetch_global_Serial2v+0x3c>)
 23f9942:	f7ff fc13 	bl	23f916c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23f9946:	4620      	mov	r0, r4
 23f9948:	f7fd fcf8 	bl	23f733c <__cxa_guard_release>
 23f994c:	4804      	ldr	r0, [pc, #16]	; (23f9960 <_Z22__fetch_global_Serial2v+0x40>)
 23f994e:	f002 fcfd 	bl	23fc34c <atexit>
	return serial2;
}
 23f9952:	4802      	ldr	r0, [pc, #8]	; (23f995c <_Z22__fetch_global_Serial2v+0x3c>)
 23f9954:	b006      	add	sp, #24
 23f9956:	bd10      	pop	{r4, pc}
 23f9958:	1007afd0 	.word	0x1007afd0
 23f995c:	1007afe8 	.word	0x1007afe8
 23f9960:	023f986f 	.word	0x023f986f

023f9964 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23f9964:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23f9966:	f7ff ffdb 	bl	23f9920 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23f996a:	4b07      	ldr	r3, [pc, #28]	; (23f9988 <_Z15serialEventRun2v+0x24>)
 23f996c:	4604      	mov	r4, r0
 23f996e:	b153      	cbz	r3, 23f9986 <_Z15serialEventRun2v+0x22>
 23f9970:	f7ff fc10 	bl	23f9194 <_ZN11USARTSerial9isEnabledEv>
 23f9974:	b138      	cbz	r0, 23f9986 <_Z15serialEventRun2v+0x22>
 23f9976:	6823      	ldr	r3, [r4, #0]
 23f9978:	4620      	mov	r0, r4
 23f997a:	691b      	ldr	r3, [r3, #16]
 23f997c:	4798      	blx	r3
 23f997e:	2800      	cmp	r0, #0
 23f9980:	dd01      	ble.n	23f9986 <_Z15serialEventRun2v+0x22>
        handler();
 23f9982:	e000      	b.n	23f9986 <_Z15serialEventRun2v+0x22>
 23f9984:	bf00      	nop
}
 23f9986:	bd10      	pop	{r4, pc}
 23f9988:	00000000 	.word	0x00000000

023f998c <_ZnwjRKSt9nothrow_t>:
 23f998c:	f7e9 bcb5 	b.w	23e32fa <_Znwj>

023f9990 <_ZnajRKSt9nothrow_t>:
 23f9990:	f7e9 bcb5 	b.w	23e32fe <_Znaj>

023f9994 <_ZSt25__throw_bad_function_callv>:
 23f9994:	b508      	push	{r3, lr}
 23f9996:	f7fd fc45 	bl	23f7224 <abort>
 23f999a:	0000      	movs	r0, r0
 23f999c:	0000      	movs	r0, r0
	...

023f99a0 <atan>:
 23f99a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f99a4:	ec55 4b10 	vmov	r4, r5, d0
 23f99a8:	4bc7      	ldr	r3, [pc, #796]	; (23f9cc8 <atan+0x328>)
 23f99aa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 23f99ae:	46aa      	mov	sl, r5
 23f99b0:	429e      	cmp	r6, r3
 23f99b2:	dd16      	ble.n	23f99e2 <atan+0x42>
 23f99b4:	4bc5      	ldr	r3, [pc, #788]	; (23f9ccc <atan+0x32c>)
 23f99b6:	429e      	cmp	r6, r3
 23f99b8:	dc01      	bgt.n	23f99be <atan+0x1e>
 23f99ba:	d10a      	bne.n	23f99d2 <atan+0x32>
 23f99bc:	b14c      	cbz	r4, 23f99d2 <atan+0x32>
 23f99be:	4622      	mov	r2, r4
 23f99c0:	462b      	mov	r3, r5
 23f99c2:	4620      	mov	r0, r4
 23f99c4:	4629      	mov	r1, r5
 23f99c6:	f7e8 fc7d 	bl	23e22c4 <__adddf3>
 23f99ca:	ec41 0b10 	vmov	d0, r0, r1
 23f99ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f99d2:	f1ba 0f00 	cmp.w	sl, #0
 23f99d6:	f340 80bf 	ble.w	23f9b58 <atan+0x1b8>
 23f99da:	ed9f 0b9f 	vldr	d0, [pc, #636]	; 23f9c58 <atan+0x2b8>
 23f99de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f99e2:	4bbb      	ldr	r3, [pc, #748]	; (23f9cd0 <atan+0x330>)
 23f99e4:	429e      	cmp	r6, r3
 23f99e6:	f300 80ba 	bgt.w	23f9b5e <atan+0x1be>
 23f99ea:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 23f99ee:	429e      	cmp	r6, r3
 23f99f0:	f340 80a0 	ble.w	23f9b34 <atan+0x194>
 23f99f4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 23f99f8:	4622      	mov	r2, r4
 23f99fa:	462b      	mov	r3, r5
 23f99fc:	4620      	mov	r0, r4
 23f99fe:	4629      	mov	r1, r5
 23f9a00:	f7e8 fe16 	bl	23e2630 <__aeabi_dmul>
 23f9a04:	4602      	mov	r2, r0
 23f9a06:	460b      	mov	r3, r1
 23f9a08:	4680      	mov	r8, r0
 23f9a0a:	4689      	mov	r9, r1
 23f9a0c:	f7e8 fe10 	bl	23e2630 <__aeabi_dmul>
 23f9a10:	4606      	mov	r6, r0
 23f9a12:	460f      	mov	r7, r1
 23f9a14:	a392      	add	r3, pc, #584	; (adr r3, 23f9c60 <atan+0x2c0>)
 23f9a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9a1a:	f7e8 fe09 	bl	23e2630 <__aeabi_dmul>
 23f9a1e:	a392      	add	r3, pc, #584	; (adr r3, 23f9c68 <atan+0x2c8>)
 23f9a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9a24:	f7e8 fc4e 	bl	23e22c4 <__adddf3>
 23f9a28:	4632      	mov	r2, r6
 23f9a2a:	463b      	mov	r3, r7
 23f9a2c:	f7e8 fe00 	bl	23e2630 <__aeabi_dmul>
 23f9a30:	a38f      	add	r3, pc, #572	; (adr r3, 23f9c70 <atan+0x2d0>)
 23f9a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9a36:	f7e8 fc45 	bl	23e22c4 <__adddf3>
 23f9a3a:	4632      	mov	r2, r6
 23f9a3c:	463b      	mov	r3, r7
 23f9a3e:	f7e8 fdf7 	bl	23e2630 <__aeabi_dmul>
 23f9a42:	a38d      	add	r3, pc, #564	; (adr r3, 23f9c78 <atan+0x2d8>)
 23f9a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9a48:	f7e8 fc3c 	bl	23e22c4 <__adddf3>
 23f9a4c:	4632      	mov	r2, r6
 23f9a4e:	463b      	mov	r3, r7
 23f9a50:	f7e8 fdee 	bl	23e2630 <__aeabi_dmul>
 23f9a54:	a38a      	add	r3, pc, #552	; (adr r3, 23f9c80 <atan+0x2e0>)
 23f9a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9a5a:	f7e8 fc33 	bl	23e22c4 <__adddf3>
 23f9a5e:	4632      	mov	r2, r6
 23f9a60:	463b      	mov	r3, r7
 23f9a62:	f7e8 fde5 	bl	23e2630 <__aeabi_dmul>
 23f9a66:	a388      	add	r3, pc, #544	; (adr r3, 23f9c88 <atan+0x2e8>)
 23f9a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9a6c:	f7e8 fc2a 	bl	23e22c4 <__adddf3>
 23f9a70:	4642      	mov	r2, r8
 23f9a72:	464b      	mov	r3, r9
 23f9a74:	f7e8 fddc 	bl	23e2630 <__aeabi_dmul>
 23f9a78:	4680      	mov	r8, r0
 23f9a7a:	4689      	mov	r9, r1
 23f9a7c:	4630      	mov	r0, r6
 23f9a7e:	4639      	mov	r1, r7
 23f9a80:	a383      	add	r3, pc, #524	; (adr r3, 23f9c90 <atan+0x2f0>)
 23f9a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9a86:	f7e8 fdd3 	bl	23e2630 <__aeabi_dmul>
 23f9a8a:	a383      	add	r3, pc, #524	; (adr r3, 23f9c98 <atan+0x2f8>)
 23f9a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9a90:	f7e8 fc16 	bl	23e22c0 <__aeabi_dsub>
 23f9a94:	4632      	mov	r2, r6
 23f9a96:	463b      	mov	r3, r7
 23f9a98:	f7e8 fdca 	bl	23e2630 <__aeabi_dmul>
 23f9a9c:	a380      	add	r3, pc, #512	; (adr r3, 23f9ca0 <atan+0x300>)
 23f9a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9aa2:	f7e8 fc0d 	bl	23e22c0 <__aeabi_dsub>
 23f9aa6:	4632      	mov	r2, r6
 23f9aa8:	463b      	mov	r3, r7
 23f9aaa:	f7e8 fdc1 	bl	23e2630 <__aeabi_dmul>
 23f9aae:	a37e      	add	r3, pc, #504	; (adr r3, 23f9ca8 <atan+0x308>)
 23f9ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9ab4:	f7e8 fc04 	bl	23e22c0 <__aeabi_dsub>
 23f9ab8:	4632      	mov	r2, r6
 23f9aba:	463b      	mov	r3, r7
 23f9abc:	f7e8 fdb8 	bl	23e2630 <__aeabi_dmul>
 23f9ac0:	a37b      	add	r3, pc, #492	; (adr r3, 23f9cb0 <atan+0x310>)
 23f9ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9ac6:	f7e8 fbfb 	bl	23e22c0 <__aeabi_dsub>
 23f9aca:	4632      	mov	r2, r6
 23f9acc:	463b      	mov	r3, r7
 23f9ace:	f7e8 fdaf 	bl	23e2630 <__aeabi_dmul>
 23f9ad2:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 23f9ad6:	4602      	mov	r2, r0
 23f9ad8:	460b      	mov	r3, r1
 23f9ada:	4640      	mov	r0, r8
 23f9adc:	4649      	mov	r1, r9
 23f9ade:	d063      	beq.n	23f9ba8 <atan+0x208>
 23f9ae0:	4e7c      	ldr	r6, [pc, #496]	; (23f9cd4 <atan+0x334>)
 23f9ae2:	f7e8 fbef 	bl	23e22c4 <__adddf3>
 23f9ae6:	4622      	mov	r2, r4
 23f9ae8:	462b      	mov	r3, r5
 23f9aea:	f7e8 fda1 	bl	23e2630 <__aeabi_dmul>
 23f9aee:	4b7a      	ldr	r3, [pc, #488]	; (23f9cd8 <atan+0x338>)
 23f9af0:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
 23f9af4:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 23f9af8:	449b      	add	fp, r3
 23f9afa:	e9db 2300 	ldrd	r2, r3, [fp]
 23f9afe:	f7e8 fbdf 	bl	23e22c0 <__aeabi_dsub>
 23f9b02:	4622      	mov	r2, r4
 23f9b04:	462b      	mov	r3, r5
 23f9b06:	f7e8 fbdb 	bl	23e22c0 <__aeabi_dsub>
 23f9b0a:	4602      	mov	r2, r0
 23f9b0c:	460b      	mov	r3, r1
 23f9b0e:	e9d6 0100 	ldrd	r0, r1, [r6]
 23f9b12:	f7e8 fbd5 	bl	23e22c0 <__aeabi_dsub>
 23f9b16:	f1ba 0f00 	cmp.w	sl, #0
 23f9b1a:	ec41 0b10 	vmov	d0, r0, r1
 23f9b1e:	f6bf af56 	bge.w	23f99ce <atan+0x2e>
 23f9b22:	ee10 1a90 	vmov	r1, s1
 23f9b26:	4602      	mov	r2, r0
 23f9b28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23f9b2c:	ec43 2b10 	vmov	d0, r2, r3
 23f9b30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f9b34:	a360      	add	r3, pc, #384	; (adr r3, 23f9cb8 <atan+0x318>)
 23f9b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9b3a:	ee10 0a10 	vmov	r0, s0
 23f9b3e:	4629      	mov	r1, r5
 23f9b40:	f7e8 fbc0 	bl	23e22c4 <__adddf3>
 23f9b44:	2200      	movs	r2, #0
 23f9b46:	4b65      	ldr	r3, [pc, #404]	; (23f9cdc <atan+0x33c>)
 23f9b48:	f7e9 f802 	bl	23e2b50 <__aeabi_dcmpgt>
 23f9b4c:	2800      	cmp	r0, #0
 23f9b4e:	f43f af51 	beq.w	23f99f4 <atan+0x54>
 23f9b52:	ec45 4b10 	vmov	d0, r4, r5
 23f9b56:	e73a      	b.n	23f99ce <atan+0x2e>
 23f9b58:	ed9f 0b59 	vldr	d0, [pc, #356]	; 23f9cc0 <atan+0x320>
 23f9b5c:	e737      	b.n	23f99ce <atan+0x2e>
 23f9b5e:	f000 f91b 	bl	23f9d98 <fabs>
 23f9b62:	4b5f      	ldr	r3, [pc, #380]	; (23f9ce0 <atan+0x340>)
 23f9b64:	429e      	cmp	r6, r3
 23f9b66:	ec55 4b10 	vmov	r4, r5, d0
 23f9b6a:	dc2d      	bgt.n	23f9bc8 <atan+0x228>
 23f9b6c:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 23f9b70:	429e      	cmp	r6, r3
 23f9b72:	dd58      	ble.n	23f9c26 <atan+0x286>
 23f9b74:	2200      	movs	r2, #0
 23f9b76:	4b59      	ldr	r3, [pc, #356]	; (23f9cdc <atan+0x33c>)
 23f9b78:	ee10 0a10 	vmov	r0, s0
 23f9b7c:	4629      	mov	r1, r5
 23f9b7e:	f7e8 fb9f 	bl	23e22c0 <__aeabi_dsub>
 23f9b82:	f04f 0b01 	mov.w	fp, #1
 23f9b86:	4606      	mov	r6, r0
 23f9b88:	460f      	mov	r7, r1
 23f9b8a:	4620      	mov	r0, r4
 23f9b8c:	4629      	mov	r1, r5
 23f9b8e:	2200      	movs	r2, #0
 23f9b90:	4b52      	ldr	r3, [pc, #328]	; (23f9cdc <atan+0x33c>)
 23f9b92:	f7e8 fb97 	bl	23e22c4 <__adddf3>
 23f9b96:	4602      	mov	r2, r0
 23f9b98:	460b      	mov	r3, r1
 23f9b9a:	4630      	mov	r0, r6
 23f9b9c:	4639      	mov	r1, r7
 23f9b9e:	f7e8 fe71 	bl	23e2884 <__aeabi_ddiv>
 23f9ba2:	4604      	mov	r4, r0
 23f9ba4:	460d      	mov	r5, r1
 23f9ba6:	e727      	b.n	23f99f8 <atan+0x58>
 23f9ba8:	f7e8 fb8c 	bl	23e22c4 <__adddf3>
 23f9bac:	4622      	mov	r2, r4
 23f9bae:	462b      	mov	r3, r5
 23f9bb0:	f7e8 fd3e 	bl	23e2630 <__aeabi_dmul>
 23f9bb4:	4602      	mov	r2, r0
 23f9bb6:	460b      	mov	r3, r1
 23f9bb8:	4620      	mov	r0, r4
 23f9bba:	4629      	mov	r1, r5
 23f9bbc:	f7e8 fb80 	bl	23e22c0 <__aeabi_dsub>
 23f9bc0:	ec41 0b10 	vmov	d0, r0, r1
 23f9bc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f9bc8:	4b46      	ldr	r3, [pc, #280]	; (23f9ce4 <atan+0x344>)
 23f9bca:	429e      	cmp	r6, r3
 23f9bcc:	da1f      	bge.n	23f9c0e <atan+0x26e>
 23f9bce:	ee10 0a10 	vmov	r0, s0
 23f9bd2:	2200      	movs	r2, #0
 23f9bd4:	4b44      	ldr	r3, [pc, #272]	; (23f9ce8 <atan+0x348>)
 23f9bd6:	4629      	mov	r1, r5
 23f9bd8:	f7e8 fb72 	bl	23e22c0 <__aeabi_dsub>
 23f9bdc:	4602      	mov	r2, r0
 23f9bde:	460b      	mov	r3, r1
 23f9be0:	4620      	mov	r0, r4
 23f9be2:	4629      	mov	r1, r5
 23f9be4:	4614      	mov	r4, r2
 23f9be6:	461d      	mov	r5, r3
 23f9be8:	2200      	movs	r2, #0
 23f9bea:	4b3f      	ldr	r3, [pc, #252]	; (23f9ce8 <atan+0x348>)
 23f9bec:	f04f 0b02 	mov.w	fp, #2
 23f9bf0:	f7e8 fd1e 	bl	23e2630 <__aeabi_dmul>
 23f9bf4:	2200      	movs	r2, #0
 23f9bf6:	4b39      	ldr	r3, [pc, #228]	; (23f9cdc <atan+0x33c>)
 23f9bf8:	f7e8 fb64 	bl	23e22c4 <__adddf3>
 23f9bfc:	4602      	mov	r2, r0
 23f9bfe:	460b      	mov	r3, r1
 23f9c00:	4620      	mov	r0, r4
 23f9c02:	4629      	mov	r1, r5
 23f9c04:	f7e8 fe3e 	bl	23e2884 <__aeabi_ddiv>
 23f9c08:	4604      	mov	r4, r0
 23f9c0a:	460d      	mov	r5, r1
 23f9c0c:	e6f4      	b.n	23f99f8 <atan+0x58>
 23f9c0e:	462b      	mov	r3, r5
 23f9c10:	2000      	movs	r0, #0
 23f9c12:	4936      	ldr	r1, [pc, #216]	; (23f9cec <atan+0x34c>)
 23f9c14:	ee10 2a10 	vmov	r2, s0
 23f9c18:	f7e8 fe34 	bl	23e2884 <__aeabi_ddiv>
 23f9c1c:	f04f 0b03 	mov.w	fp, #3
 23f9c20:	4604      	mov	r4, r0
 23f9c22:	460d      	mov	r5, r1
 23f9c24:	e6e8      	b.n	23f99f8 <atan+0x58>
 23f9c26:	ee10 2a10 	vmov	r2, s0
 23f9c2a:	462b      	mov	r3, r5
 23f9c2c:	ee10 0a10 	vmov	r0, s0
 23f9c30:	4629      	mov	r1, r5
 23f9c32:	f7e8 fb47 	bl	23e22c4 <__adddf3>
 23f9c36:	2200      	movs	r2, #0
 23f9c38:	4b28      	ldr	r3, [pc, #160]	; (23f9cdc <atan+0x33c>)
 23f9c3a:	f04f 0b00 	mov.w	fp, #0
 23f9c3e:	f7e8 fb3f 	bl	23e22c0 <__aeabi_dsub>
 23f9c42:	2200      	movs	r2, #0
 23f9c44:	4606      	mov	r6, r0
 23f9c46:	460f      	mov	r7, r1
 23f9c48:	4620      	mov	r0, r4
 23f9c4a:	4629      	mov	r1, r5
 23f9c4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 23f9c50:	e79f      	b.n	23f9b92 <atan+0x1f2>
 23f9c52:	bf00      	nop
 23f9c54:	f3af 8000 	nop.w
 23f9c58:	54442d18 	.word	0x54442d18
 23f9c5c:	3ff921fb 	.word	0x3ff921fb
 23f9c60:	e322da11 	.word	0xe322da11
 23f9c64:	3f90ad3a 	.word	0x3f90ad3a
 23f9c68:	24760deb 	.word	0x24760deb
 23f9c6c:	3fa97b4b 	.word	0x3fa97b4b
 23f9c70:	a0d03d51 	.word	0xa0d03d51
 23f9c74:	3fb10d66 	.word	0x3fb10d66
 23f9c78:	c54c206e 	.word	0xc54c206e
 23f9c7c:	3fb745cd 	.word	0x3fb745cd
 23f9c80:	920083ff 	.word	0x920083ff
 23f9c84:	3fc24924 	.word	0x3fc24924
 23f9c88:	5555550d 	.word	0x5555550d
 23f9c8c:	3fd55555 	.word	0x3fd55555
 23f9c90:	2c6a6c2f 	.word	0x2c6a6c2f
 23f9c94:	bfa2b444 	.word	0xbfa2b444
 23f9c98:	52defd9a 	.word	0x52defd9a
 23f9c9c:	3fadde2d 	.word	0x3fadde2d
 23f9ca0:	af749a6d 	.word	0xaf749a6d
 23f9ca4:	3fb3b0f2 	.word	0x3fb3b0f2
 23f9ca8:	fe231671 	.word	0xfe231671
 23f9cac:	3fbc71c6 	.word	0x3fbc71c6
 23f9cb0:	9998ebc4 	.word	0x9998ebc4
 23f9cb4:	3fc99999 	.word	0x3fc99999
 23f9cb8:	8800759c 	.word	0x8800759c
 23f9cbc:	7e37e43c 	.word	0x7e37e43c
 23f9cc0:	54442d18 	.word	0x54442d18
 23f9cc4:	bff921fb 	.word	0xbff921fb
 23f9cc8:	440fffff 	.word	0x440fffff
 23f9ccc:	7ff00000 	.word	0x7ff00000
 23f9cd0:	3fdbffff 	.word	0x3fdbffff
 23f9cd4:	023ffb38 	.word	0x023ffb38
 23f9cd8:	023ffb58 	.word	0x023ffb58
 23f9cdc:	3ff00000 	.word	0x3ff00000
 23f9ce0:	3ff2ffff 	.word	0x3ff2ffff
 23f9ce4:	40038000 	.word	0x40038000
 23f9ce8:	3ff80000 	.word	0x3ff80000
 23f9cec:	bff00000 	.word	0xbff00000

023f9cf0 <cos>:
 23f9cf0:	ec51 0b10 	vmov	r0, r1, d0
 23f9cf4:	4a26      	ldr	r2, [pc, #152]	; (23f9d90 <cos+0xa0>)
 23f9cf6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23f9cfa:	4293      	cmp	r3, r2
 23f9cfc:	dd20      	ble.n	23f9d40 <cos+0x50>
 23f9cfe:	4a25      	ldr	r2, [pc, #148]	; (23f9d94 <cos+0xa4>)
 23f9d00:	4293      	cmp	r3, r2
 23f9d02:	b500      	push	{lr}
 23f9d04:	b085      	sub	sp, #20
 23f9d06:	dd09      	ble.n	23f9d1c <cos+0x2c>
 23f9d08:	ee10 2a10 	vmov	r2, s0
 23f9d0c:	460b      	mov	r3, r1
 23f9d0e:	f7e8 fad7 	bl	23e22c0 <__aeabi_dsub>
 23f9d12:	ec41 0b10 	vmov	d0, r0, r1
 23f9d16:	b005      	add	sp, #20
 23f9d18:	f85d fb04 	ldr.w	pc, [sp], #4
 23f9d1c:	4668      	mov	r0, sp
 23f9d1e:	f001 f8a7 	bl	23fae70 <__ieee754_rem_pio2>
 23f9d22:	f000 0003 	and.w	r0, r0, #3
 23f9d26:	2801      	cmp	r0, #1
 23f9d28:	d00e      	beq.n	23f9d48 <cos+0x58>
 23f9d2a:	2802      	cmp	r0, #2
 23f9d2c:	d022      	beq.n	23f9d74 <cos+0x84>
 23f9d2e:	b1d0      	cbz	r0, 23f9d66 <cos+0x76>
 23f9d30:	2001      	movs	r0, #1
 23f9d32:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f9d36:	ed9d 0b00 	vldr	d0, [sp]
 23f9d3a:	f002 f8e5 	bl	23fbf08 <__kernel_sin>
 23f9d3e:	e7ea      	b.n	23f9d16 <cos+0x26>
 23f9d40:	ed9f 1b11 	vldr	d1, [pc, #68]	; 23f9d88 <cos+0x98>
 23f9d44:	f001 bb7c 	b.w	23fb440 <__kernel_cos>
 23f9d48:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f9d4c:	ed9d 0b00 	vldr	d0, [sp]
 23f9d50:	f002 f8da 	bl	23fbf08 <__kernel_sin>
 23f9d54:	ec53 2b10 	vmov	r2, r3, d0
 23f9d58:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 23f9d5c:	ee00 3a90 	vmov	s1, r3
 23f9d60:	b005      	add	sp, #20
 23f9d62:	f85d fb04 	ldr.w	pc, [sp], #4
 23f9d66:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f9d6a:	ed9d 0b00 	vldr	d0, [sp]
 23f9d6e:	f001 fb67 	bl	23fb440 <__kernel_cos>
 23f9d72:	e7d0      	b.n	23f9d16 <cos+0x26>
 23f9d74:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f9d78:	ed9d 0b00 	vldr	d0, [sp]
 23f9d7c:	f001 fb60 	bl	23fb440 <__kernel_cos>
 23f9d80:	e7e8      	b.n	23f9d54 <cos+0x64>
 23f9d82:	bf00      	nop
 23f9d84:	f3af 8000 	nop.w
	...
 23f9d90:	3fe921fb 	.word	0x3fe921fb
 23f9d94:	7fefffff 	.word	0x7fefffff

023f9d98 <fabs>:
 23f9d98:	ec51 0b10 	vmov	r0, r1, d0
 23f9d9c:	ee10 2a10 	vmov	r2, s0
 23f9da0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23f9da4:	ec43 2b10 	vmov	d0, r2, r3
 23f9da8:	4770      	bx	lr
 23f9daa:	bf00      	nop
 23f9dac:	0000      	movs	r0, r0
	...

023f9db0 <scalbn>:
 23f9db0:	b538      	push	{r3, r4, r5, lr}
 23f9db2:	ec53 2b10 	vmov	r2, r3, d0
 23f9db6:	f3c3 510a 	ubfx	r1, r3, #20, #11
 23f9dba:	469c      	mov	ip, r3
 23f9dbc:	4604      	mov	r4, r0
 23f9dbe:	bb89      	cbnz	r1, 23f9e24 <scalbn+0x74>
 23f9dc0:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 23f9dc4:	ee10 1a10 	vmov	r1, s0
 23f9dc8:	ea5c 0101 	orrs.w	r1, ip, r1
 23f9dcc:	d029      	beq.n	23f9e22 <scalbn+0x72>
 23f9dce:	4d3e      	ldr	r5, [pc, #248]	; (23f9ec8 <scalbn+0x118>)
 23f9dd0:	4619      	mov	r1, r3
 23f9dd2:	2200      	movs	r2, #0
 23f9dd4:	4b3d      	ldr	r3, [pc, #244]	; (23f9ecc <scalbn+0x11c>)
 23f9dd6:	ee10 0a10 	vmov	r0, s0
 23f9dda:	f7e8 fc29 	bl	23e2630 <__aeabi_dmul>
 23f9dde:	42ac      	cmp	r4, r5
 23f9de0:	4602      	mov	r2, r0
 23f9de2:	460b      	mov	r3, r1
 23f9de4:	db16      	blt.n	23f9e14 <scalbn+0x64>
 23f9de6:	468c      	mov	ip, r1
 23f9de8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 23f9dec:	3936      	subs	r1, #54	; 0x36
 23f9dee:	4421      	add	r1, r4
 23f9df0:	f240 70fe 	movw	r0, #2046	; 0x7fe
 23f9df4:	4281      	cmp	r1, r0
 23f9df6:	dc21      	bgt.n	23f9e3c <scalbn+0x8c>
 23f9df8:	2900      	cmp	r1, #0
 23f9dfa:	dc47      	bgt.n	23f9e8c <scalbn+0xdc>
 23f9dfc:	f111 0f35 	cmn.w	r1, #53	; 0x35
 23f9e00:	da34      	bge.n	23f9e6c <scalbn+0xbc>
 23f9e02:	f24c 3150 	movw	r1, #50000	; 0xc350
 23f9e06:	428c      	cmp	r4, r1
 23f9e08:	dc18      	bgt.n	23f9e3c <scalbn+0x8c>
 23f9e0a:	2b00      	cmp	r3, #0
 23f9e0c:	a126      	add	r1, pc, #152	; (adr r1, 23f9ea8 <scalbn+0xf8>)
 23f9e0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f9e12:	db43      	blt.n	23f9e9c <scalbn+0xec>
 23f9e14:	a324      	add	r3, pc, #144	; (adr r3, 23f9ea8 <scalbn+0xf8>)
 23f9e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9e1a:	f7e8 fc09 	bl	23e2630 <__aeabi_dmul>
 23f9e1e:	ec41 0b10 	vmov	d0, r0, r1
 23f9e22:	bd38      	pop	{r3, r4, r5, pc}
 23f9e24:	f240 7eff 	movw	lr, #2047	; 0x7ff
 23f9e28:	4571      	cmp	r1, lr
 23f9e2a:	d1e0      	bne.n	23f9dee <scalbn+0x3e>
 23f9e2c:	ee10 0a10 	vmov	r0, s0
 23f9e30:	4619      	mov	r1, r3
 23f9e32:	f7e8 fa47 	bl	23e22c4 <__adddf3>
 23f9e36:	ec41 0b10 	vmov	d0, r0, r1
 23f9e3a:	bd38      	pop	{r3, r4, r5, pc}
 23f9e3c:	2b00      	cmp	r3, #0
 23f9e3e:	a11c      	add	r1, pc, #112	; (adr r1, 23f9eb0 <scalbn+0x100>)
 23f9e40:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f9e44:	db07      	blt.n	23f9e56 <scalbn+0xa6>
 23f9e46:	a31a      	add	r3, pc, #104	; (adr r3, 23f9eb0 <scalbn+0x100>)
 23f9e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9e4c:	f7e8 fbf0 	bl	23e2630 <__aeabi_dmul>
 23f9e50:	ec41 0b10 	vmov	d0, r0, r1
 23f9e54:	bd38      	pop	{r3, r4, r5, pc}
 23f9e56:	a118      	add	r1, pc, #96	; (adr r1, 23f9eb8 <scalbn+0x108>)
 23f9e58:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f9e5c:	a314      	add	r3, pc, #80	; (adr r3, 23f9eb0 <scalbn+0x100>)
 23f9e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9e62:	f7e8 fbe5 	bl	23e2630 <__aeabi_dmul>
 23f9e66:	ec41 0b10 	vmov	d0, r0, r1
 23f9e6a:	e7f3      	b.n	23f9e54 <scalbn+0xa4>
 23f9e6c:	4818      	ldr	r0, [pc, #96]	; (23f9ed0 <scalbn+0x120>)
 23f9e6e:	3136      	adds	r1, #54	; 0x36
 23f9e70:	4614      	mov	r4, r2
 23f9e72:	4b18      	ldr	r3, [pc, #96]	; (23f9ed4 <scalbn+0x124>)
 23f9e74:	ea0c 0000 	and.w	r0, ip, r0
 23f9e78:	2200      	movs	r2, #0
 23f9e7a:	ea40 5501 	orr.w	r5, r0, r1, lsl #20
 23f9e7e:	4620      	mov	r0, r4
 23f9e80:	4629      	mov	r1, r5
 23f9e82:	f7e8 fbd5 	bl	23e2630 <__aeabi_dmul>
 23f9e86:	ec41 0b10 	vmov	d0, r0, r1
 23f9e8a:	bd38      	pop	{r3, r4, r5, pc}
 23f9e8c:	4810      	ldr	r0, [pc, #64]	; (23f9ed0 <scalbn+0x120>)
 23f9e8e:	ea0c 0000 	and.w	r0, ip, r0
 23f9e92:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
 23f9e96:	ec43 2b10 	vmov	d0, r2, r3
 23f9e9a:	bd38      	pop	{r3, r4, r5, pc}
 23f9e9c:	a108      	add	r1, pc, #32	; (adr r1, 23f9ec0 <scalbn+0x110>)
 23f9e9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f9ea2:	e7b7      	b.n	23f9e14 <scalbn+0x64>
 23f9ea4:	f3af 8000 	nop.w
 23f9ea8:	c2f8f359 	.word	0xc2f8f359
 23f9eac:	01a56e1f 	.word	0x01a56e1f
 23f9eb0:	8800759c 	.word	0x8800759c
 23f9eb4:	7e37e43c 	.word	0x7e37e43c
 23f9eb8:	8800759c 	.word	0x8800759c
 23f9ebc:	fe37e43c 	.word	0xfe37e43c
 23f9ec0:	c2f8f359 	.word	0xc2f8f359
 23f9ec4:	81a56e1f 	.word	0x81a56e1f
 23f9ec8:	ffff3cb0 	.word	0xffff3cb0
 23f9ecc:	43500000 	.word	0x43500000
 23f9ed0:	800fffff 	.word	0x800fffff
 23f9ed4:	3c900000 	.word	0x3c900000

023f9ed8 <sin>:
 23f9ed8:	ec51 0b10 	vmov	r0, r1, d0
 23f9edc:	4a26      	ldr	r2, [pc, #152]	; (23f9f78 <sin+0xa0>)
 23f9ede:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23f9ee2:	4293      	cmp	r3, r2
 23f9ee4:	dd27      	ble.n	23f9f36 <sin+0x5e>
 23f9ee6:	4a25      	ldr	r2, [pc, #148]	; (23f9f7c <sin+0xa4>)
 23f9ee8:	4293      	cmp	r3, r2
 23f9eea:	b500      	push	{lr}
 23f9eec:	b085      	sub	sp, #20
 23f9eee:	dd09      	ble.n	23f9f04 <sin+0x2c>
 23f9ef0:	ee10 2a10 	vmov	r2, s0
 23f9ef4:	460b      	mov	r3, r1
 23f9ef6:	f7e8 f9e3 	bl	23e22c0 <__aeabi_dsub>
 23f9efa:	ec41 0b10 	vmov	d0, r0, r1
 23f9efe:	b005      	add	sp, #20
 23f9f00:	f85d fb04 	ldr.w	pc, [sp], #4
 23f9f04:	4668      	mov	r0, sp
 23f9f06:	f000 ffb3 	bl	23fae70 <__ieee754_rem_pio2>
 23f9f0a:	f000 0003 	and.w	r0, r0, #3
 23f9f0e:	2801      	cmp	r0, #1
 23f9f10:	d016      	beq.n	23f9f40 <sin+0x68>
 23f9f12:	2802      	cmp	r0, #2
 23f9f14:	d023      	beq.n	23f9f5e <sin+0x86>
 23f9f16:	b1d0      	cbz	r0, 23f9f4e <sin+0x76>
 23f9f18:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f9f1c:	ed9d 0b00 	vldr	d0, [sp]
 23f9f20:	f001 fa8e 	bl	23fb440 <__kernel_cos>
 23f9f24:	ec53 2b10 	vmov	r2, r3, d0
 23f9f28:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 23f9f2c:	ee00 3a90 	vmov	s1, r3
 23f9f30:	b005      	add	sp, #20
 23f9f32:	f85d fb04 	ldr.w	pc, [sp], #4
 23f9f36:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 23f9f70 <sin+0x98>
 23f9f3a:	2000      	movs	r0, #0
 23f9f3c:	f001 bfe4 	b.w	23fbf08 <__kernel_sin>
 23f9f40:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f9f44:	ed9d 0b00 	vldr	d0, [sp]
 23f9f48:	f001 fa7a 	bl	23fb440 <__kernel_cos>
 23f9f4c:	e7d7      	b.n	23f9efe <sin+0x26>
 23f9f4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f9f52:	ed9d 0b00 	vldr	d0, [sp]
 23f9f56:	2001      	movs	r0, #1
 23f9f58:	f001 ffd6 	bl	23fbf08 <__kernel_sin>
 23f9f5c:	e7cf      	b.n	23f9efe <sin+0x26>
 23f9f5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f9f62:	ed9d 0b00 	vldr	d0, [sp]
 23f9f66:	2001      	movs	r0, #1
 23f9f68:	f001 ffce 	bl	23fbf08 <__kernel_sin>
 23f9f6c:	e7da      	b.n	23f9f24 <sin+0x4c>
 23f9f6e:	bf00      	nop
	...
 23f9f78:	3fe921fb 	.word	0x3fe921fb
 23f9f7c:	7fefffff 	.word	0x7fefffff

023f9f80 <atan2>:
 23f9f80:	f000 b90e 	b.w	23fa1a0 <__ieee754_atan2>
 23f9f84:	0000      	movs	r0, r0
	...

023f9f88 <pow>:
 23f9f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f9f8a:	ed2d 8b02 	vpush	{d8}
 23f9f8e:	ec57 6b10 	vmov	r6, r7, d0
 23f9f92:	ec55 4b11 	vmov	r4, r5, d1
 23f9f96:	f000 f9d7 	bl	23fa348 <__ieee754_pow>
 23f9f9a:	4b63      	ldr	r3, [pc, #396]	; (23fa128 <pow+0x1a0>)
 23f9f9c:	eeb0 8a40 	vmov.f32	s16, s0
 23f9fa0:	eef0 8a60 	vmov.f32	s17, s1
 23f9fa4:	f993 3000 	ldrsb.w	r3, [r3]
 23f9fa8:	3301      	adds	r3, #1
 23f9faa:	d02a      	beq.n	23fa002 <pow+0x7a>
 23f9fac:	4622      	mov	r2, r4
 23f9fae:	462b      	mov	r3, r5
 23f9fb0:	4620      	mov	r0, r4
 23f9fb2:	4629      	mov	r1, r5
 23f9fb4:	f7e8 fdd6 	bl	23e2b64 <__aeabi_dcmpun>
 23f9fb8:	bb18      	cbnz	r0, 23fa002 <pow+0x7a>
 23f9fba:	4632      	mov	r2, r6
 23f9fbc:	463b      	mov	r3, r7
 23f9fbe:	4630      	mov	r0, r6
 23f9fc0:	4639      	mov	r1, r7
 23f9fc2:	f7e8 fdcf 	bl	23e2b64 <__aeabi_dcmpun>
 23f9fc6:	2800      	cmp	r0, #0
 23f9fc8:	d144      	bne.n	23fa054 <pow+0xcc>
 23f9fca:	2200      	movs	r2, #0
 23f9fcc:	2300      	movs	r3, #0
 23f9fce:	4630      	mov	r0, r6
 23f9fd0:	4639      	mov	r1, r7
 23f9fd2:	f7e8 fd95 	bl	23e2b00 <__aeabi_dcmpeq>
 23f9fd6:	b1d8      	cbz	r0, 23fa010 <pow+0x88>
 23f9fd8:	2200      	movs	r2, #0
 23f9fda:	2300      	movs	r3, #0
 23f9fdc:	4620      	mov	r0, r4
 23f9fde:	4629      	mov	r1, r5
 23f9fe0:	f7e8 fd8e 	bl	23e2b00 <__aeabi_dcmpeq>
 23f9fe4:	2800      	cmp	r0, #0
 23f9fe6:	d13d      	bne.n	23fa064 <pow+0xdc>
 23f9fe8:	ec45 4b10 	vmov	d0, r4, r5
 23f9fec:	f002 f852 	bl	23fc094 <finite>
 23f9ff0:	b138      	cbz	r0, 23fa002 <pow+0x7a>
 23f9ff2:	4620      	mov	r0, r4
 23f9ff4:	4629      	mov	r1, r5
 23f9ff6:	2200      	movs	r2, #0
 23f9ff8:	2300      	movs	r3, #0
 23f9ffa:	f7e8 fd8b 	bl	23e2b14 <__aeabi_dcmplt>
 23f9ffe:	2800      	cmp	r0, #0
 23fa000:	d15c      	bne.n	23fa0bc <pow+0x134>
 23fa002:	eeb0 0a48 	vmov.f32	s0, s16
 23fa006:	eef0 0a68 	vmov.f32	s1, s17
 23fa00a:	ecbd 8b02 	vpop	{d8}
 23fa00e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fa010:	eeb0 0a48 	vmov.f32	s0, s16
 23fa014:	eef0 0a68 	vmov.f32	s1, s17
 23fa018:	f002 f83c 	bl	23fc094 <finite>
 23fa01c:	b358      	cbz	r0, 23fa076 <pow+0xee>
 23fa01e:	2200      	movs	r2, #0
 23fa020:	2300      	movs	r3, #0
 23fa022:	ec51 0b18 	vmov	r0, r1, d8
 23fa026:	f7e8 fd6b 	bl	23e2b00 <__aeabi_dcmpeq>
 23fa02a:	2800      	cmp	r0, #0
 23fa02c:	d0e9      	beq.n	23fa002 <pow+0x7a>
 23fa02e:	ec47 6b10 	vmov	d0, r6, r7
 23fa032:	f002 f82f 	bl	23fc094 <finite>
 23fa036:	2800      	cmp	r0, #0
 23fa038:	d0e3      	beq.n	23fa002 <pow+0x7a>
 23fa03a:	ec45 4b10 	vmov	d0, r4, r5
 23fa03e:	f002 f829 	bl	23fc094 <finite>
 23fa042:	2800      	cmp	r0, #0
 23fa044:	d0dd      	beq.n	23fa002 <pow+0x7a>
 23fa046:	f7fd f909 	bl	23f725c <__errno>
 23fa04a:	2322      	movs	r3, #34	; 0x22
 23fa04c:	ed9f 8b2e 	vldr	d8, [pc, #184]	; 23fa108 <pow+0x180>
 23fa050:	6003      	str	r3, [r0, #0]
 23fa052:	e7d6      	b.n	23fa002 <pow+0x7a>
 23fa054:	4620      	mov	r0, r4
 23fa056:	4629      	mov	r1, r5
 23fa058:	2200      	movs	r2, #0
 23fa05a:	2300      	movs	r3, #0
 23fa05c:	f7e8 fd50 	bl	23e2b00 <__aeabi_dcmpeq>
 23fa060:	2800      	cmp	r0, #0
 23fa062:	d0ce      	beq.n	23fa002 <pow+0x7a>
 23fa064:	ed9f 8b2a 	vldr	d8, [pc, #168]	; 23fa110 <pow+0x188>
 23fa068:	eeb0 0a48 	vmov.f32	s0, s16
 23fa06c:	eef0 0a68 	vmov.f32	s1, s17
 23fa070:	ecbd 8b02 	vpop	{d8}
 23fa074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fa076:	ec47 6b10 	vmov	d0, r6, r7
 23fa07a:	f002 f80b 	bl	23fc094 <finite>
 23fa07e:	2800      	cmp	r0, #0
 23fa080:	d0cd      	beq.n	23fa01e <pow+0x96>
 23fa082:	ec45 4b10 	vmov	d0, r4, r5
 23fa086:	f002 f805 	bl	23fc094 <finite>
 23fa08a:	2800      	cmp	r0, #0
 23fa08c:	d0c7      	beq.n	23fa01e <pow+0x96>
 23fa08e:	ee18 0a10 	vmov	r0, s16
 23fa092:	ec53 2b18 	vmov	r2, r3, d8
 23fa096:	4619      	mov	r1, r3
 23fa098:	f7e8 fd64 	bl	23e2b64 <__aeabi_dcmpun>
 23fa09c:	bb20      	cbnz	r0, 23fa0e8 <pow+0x160>
 23fa09e:	f7fd f8dd 	bl	23f725c <__errno>
 23fa0a2:	2222      	movs	r2, #34	; 0x22
 23fa0a4:	4603      	mov	r3, r0
 23fa0a6:	4639      	mov	r1, r7
 23fa0a8:	4630      	mov	r0, r6
 23fa0aa:	601a      	str	r2, [r3, #0]
 23fa0ac:	2200      	movs	r2, #0
 23fa0ae:	2300      	movs	r3, #0
 23fa0b0:	f7e8 fd30 	bl	23e2b14 <__aeabi_dcmplt>
 23fa0b4:	b948      	cbnz	r0, 23fa0ca <pow+0x142>
 23fa0b6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 23fa118 <pow+0x190>
 23fa0ba:	e7a2      	b.n	23fa002 <pow+0x7a>
 23fa0bc:	f7fd f8ce 	bl	23f725c <__errno>
 23fa0c0:	2321      	movs	r3, #33	; 0x21
 23fa0c2:	ed9f 8b17 	vldr	d8, [pc, #92]	; 23fa120 <pow+0x198>
 23fa0c6:	6003      	str	r3, [r0, #0]
 23fa0c8:	e79b      	b.n	23fa002 <pow+0x7a>
 23fa0ca:	ec45 4b10 	vmov	d0, r4, r5
 23fa0ce:	f002 f87b 	bl	23fc1c8 <rint>
 23fa0d2:	4622      	mov	r2, r4
 23fa0d4:	462b      	mov	r3, r5
 23fa0d6:	ec51 0b10 	vmov	r0, r1, d0
 23fa0da:	f7e8 fd11 	bl	23e2b00 <__aeabi_dcmpeq>
 23fa0de:	2800      	cmp	r0, #0
 23fa0e0:	d1e9      	bne.n	23fa0b6 <pow+0x12e>
 23fa0e2:	ed9f 8b0f 	vldr	d8, [pc, #60]	; 23fa120 <pow+0x198>
 23fa0e6:	e78c      	b.n	23fa002 <pow+0x7a>
 23fa0e8:	f7fd f8b8 	bl	23f725c <__errno>
 23fa0ec:	2200      	movs	r2, #0
 23fa0ee:	2300      	movs	r3, #0
 23fa0f0:	2121      	movs	r1, #33	; 0x21
 23fa0f2:	6001      	str	r1, [r0, #0]
 23fa0f4:	4610      	mov	r0, r2
 23fa0f6:	4619      	mov	r1, r3
 23fa0f8:	f7e8 fbc4 	bl	23e2884 <__aeabi_ddiv>
 23fa0fc:	ec41 0b18 	vmov	d8, r0, r1
 23fa100:	e77f      	b.n	23fa002 <pow+0x7a>
 23fa102:	bf00      	nop
 23fa104:	f3af 8000 	nop.w
	...
 23fa114:	3ff00000 	.word	0x3ff00000
 23fa118:	00000000 	.word	0x00000000
 23fa11c:	7ff00000 	.word	0x7ff00000
 23fa120:	00000000 	.word	0x00000000
 23fa124:	fff00000 	.word	0xfff00000
 23fa128:	1006a1bc 	.word	0x1006a1bc

023fa12c <sqrt>:
 23fa12c:	b538      	push	{r3, r4, r5, lr}
 23fa12e:	ed2d 8b02 	vpush	{d8}
 23fa132:	ec55 4b10 	vmov	r4, r5, d0
 23fa136:	f001 f8c1 	bl	23fb2bc <__ieee754_sqrt>
 23fa13a:	4b18      	ldr	r3, [pc, #96]	; (23fa19c <sqrt+0x70>)
 23fa13c:	eeb0 8a40 	vmov.f32	s16, s0
 23fa140:	eef0 8a60 	vmov.f32	s17, s1
 23fa144:	f993 3000 	ldrsb.w	r3, [r3]
 23fa148:	3301      	adds	r3, #1
 23fa14a:	d00d      	beq.n	23fa168 <sqrt+0x3c>
 23fa14c:	4622      	mov	r2, r4
 23fa14e:	462b      	mov	r3, r5
 23fa150:	4620      	mov	r0, r4
 23fa152:	4629      	mov	r1, r5
 23fa154:	f7e8 fd06 	bl	23e2b64 <__aeabi_dcmpun>
 23fa158:	b930      	cbnz	r0, 23fa168 <sqrt+0x3c>
 23fa15a:	2200      	movs	r2, #0
 23fa15c:	2300      	movs	r3, #0
 23fa15e:	4620      	mov	r0, r4
 23fa160:	4629      	mov	r1, r5
 23fa162:	f7e8 fcd7 	bl	23e2b14 <__aeabi_dcmplt>
 23fa166:	b930      	cbnz	r0, 23fa176 <sqrt+0x4a>
 23fa168:	eeb0 0a48 	vmov.f32	s0, s16
 23fa16c:	eef0 0a68 	vmov.f32	s1, s17
 23fa170:	ecbd 8b02 	vpop	{d8}
 23fa174:	bd38      	pop	{r3, r4, r5, pc}
 23fa176:	f7fd f871 	bl	23f725c <__errno>
 23fa17a:	2200      	movs	r2, #0
 23fa17c:	2300      	movs	r3, #0
 23fa17e:	2121      	movs	r1, #33	; 0x21
 23fa180:	6001      	str	r1, [r0, #0]
 23fa182:	4610      	mov	r0, r2
 23fa184:	4619      	mov	r1, r3
 23fa186:	f7e8 fb7d 	bl	23e2884 <__aeabi_ddiv>
 23fa18a:	ec41 0b18 	vmov	d8, r0, r1
 23fa18e:	eeb0 0a48 	vmov.f32	s0, s16
 23fa192:	eef0 0a68 	vmov.f32	s1, s17
 23fa196:	ecbd 8b02 	vpop	{d8}
 23fa19a:	bd38      	pop	{r3, r4, r5, pc}
 23fa19c:	1006a1bc 	.word	0x1006a1bc

023fa1a0 <__ieee754_atan2>:
 23fa1a0:	ec51 0b11 	vmov	r0, r1, d1
 23fa1a4:	4243      	negs	r3, r0
 23fa1a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fa1aa:	4303      	orrs	r3, r0
 23fa1ac:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 23fa1b0:	4e61      	ldr	r6, [pc, #388]	; (23fa338 <__ieee754_atan2+0x198>)
 23fa1b2:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
 23fa1b6:	42b3      	cmp	r3, r6
 23fa1b8:	ec55 4b10 	vmov	r4, r5, d0
 23fa1bc:	d83c      	bhi.n	23fa238 <__ieee754_atan2+0x98>
 23fa1be:	4263      	negs	r3, r4
 23fa1c0:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
 23fa1c4:	46a9      	mov	r9, r5
 23fa1c6:	4323      	orrs	r3, r4
 23fa1c8:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
 23fa1cc:	42b3      	cmp	r3, r6
 23fa1ce:	d833      	bhi.n	23fa238 <__ieee754_atan2+0x98>
 23fa1d0:	4b5a      	ldr	r3, [pc, #360]	; (23fa33c <__ieee754_atan2+0x19c>)
 23fa1d2:	440b      	add	r3, r1
 23fa1d4:	4303      	orrs	r3, r0
 23fa1d6:	d03e      	beq.n	23fa256 <__ieee754_atan2+0xb6>
 23fa1d8:	178f      	asrs	r7, r1, #30
 23fa1da:	ea5a 0304 	orrs.w	r3, sl, r4
 23fa1de:	f007 0702 	and.w	r7, r7, #2
 23fa1e2:	ea47 77d5 	orr.w	r7, r7, r5, lsr #31
 23fa1e6:	d02f      	beq.n	23fa248 <__ieee754_atan2+0xa8>
 23fa1e8:	ea5e 0300 	orrs.w	r3, lr, r0
 23fa1ec:	d037      	beq.n	23fa25e <__ieee754_atan2+0xbe>
 23fa1ee:	45b6      	cmp	lr, r6
 23fa1f0:	d044      	beq.n	23fa27c <__ieee754_atan2+0xdc>
 23fa1f2:	45b2      	cmp	sl, r6
 23fa1f4:	d033      	beq.n	23fa25e <__ieee754_atan2+0xbe>
 23fa1f6:	ebaa 0e0e 	sub.w	lr, sl, lr
 23fa1fa:	f1be 7f74 	cmp.w	lr, #63963136	; 0x3d00000
 23fa1fe:	ea4f 532e 	mov.w	r3, lr, asr #20
 23fa202:	da38      	bge.n	23fa276 <__ieee754_atan2+0xd6>
 23fa204:	2900      	cmp	r1, #0
 23fa206:	da6a      	bge.n	23fa2de <__ieee754_atan2+0x13e>
 23fa208:	333c      	adds	r3, #60	; 0x3c
 23fa20a:	da68      	bge.n	23fa2de <__ieee754_atan2+0x13e>
 23fa20c:	ed9f 0b3c 	vldr	d0, [pc, #240]	; 23fa300 <__ieee754_atan2+0x160>
 23fa210:	2f01      	cmp	r7, #1
 23fa212:	d050      	beq.n	23fa2b6 <__ieee754_atan2+0x116>
 23fa214:	2f02      	cmp	r7, #2
 23fa216:	d03d      	beq.n	23fa294 <__ieee754_atan2+0xf4>
 23fa218:	b1a7      	cbz	r7, 23fa244 <__ieee754_atan2+0xa4>
 23fa21a:	ec51 0b10 	vmov	r0, r1, d0
 23fa21e:	a33a      	add	r3, pc, #232	; (adr r3, 23fa308 <__ieee754_atan2+0x168>)
 23fa220:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa224:	f7e8 f84c 	bl	23e22c0 <__aeabi_dsub>
 23fa228:	a339      	add	r3, pc, #228	; (adr r3, 23fa310 <__ieee754_atan2+0x170>)
 23fa22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa22e:	f7e8 f847 	bl	23e22c0 <__aeabi_dsub>
 23fa232:	ec41 0b10 	vmov	d0, r0, r1
 23fa236:	e005      	b.n	23fa244 <__ieee754_atan2+0xa4>
 23fa238:	4622      	mov	r2, r4
 23fa23a:	462b      	mov	r3, r5
 23fa23c:	f7e8 f842 	bl	23e22c4 <__adddf3>
 23fa240:	ec41 0b10 	vmov	d0, r0, r1
 23fa244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fa248:	2f02      	cmp	r7, #2
 23fa24a:	d00e      	beq.n	23fa26a <__ieee754_atan2+0xca>
 23fa24c:	2f03      	cmp	r7, #3
 23fa24e:	d1f9      	bne.n	23fa244 <__ieee754_atan2+0xa4>
 23fa250:	ed9f 0b31 	vldr	d0, [pc, #196]	; 23fa318 <__ieee754_atan2+0x178>
 23fa254:	e7f6      	b.n	23fa244 <__ieee754_atan2+0xa4>
 23fa256:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fa25a:	f7ff bba1 	b.w	23f99a0 <atan>
 23fa25e:	f1b9 0f00 	cmp.w	r9, #0
 23fa262:	db05      	blt.n	23fa270 <__ieee754_atan2+0xd0>
 23fa264:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 23fa320 <__ieee754_atan2+0x180>
 23fa268:	e7ec      	b.n	23fa244 <__ieee754_atan2+0xa4>
 23fa26a:	ed9f 0b29 	vldr	d0, [pc, #164]	; 23fa310 <__ieee754_atan2+0x170>
 23fa26e:	e7e9      	b.n	23fa244 <__ieee754_atan2+0xa4>
 23fa270:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 23fa328 <__ieee754_atan2+0x188>
 23fa274:	e7e6      	b.n	23fa244 <__ieee754_atan2+0xa4>
 23fa276:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 23fa320 <__ieee754_atan2+0x180>
 23fa27a:	e7c9      	b.n	23fa210 <__ieee754_atan2+0x70>
 23fa27c:	45f2      	cmp	sl, lr
 23fa27e:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 23fa282:	d021      	beq.n	23fa2c8 <__ieee754_atan2+0x128>
 23fa284:	2f02      	cmp	r7, #2
 23fa286:	d827      	bhi.n	23fa2d8 <__ieee754_atan2+0x138>
 23fa288:	4b2d      	ldr	r3, [pc, #180]	; (23fa340 <__ieee754_atan2+0x1a0>)
 23fa28a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 23fa28e:	ed97 0b00 	vldr	d0, [r7]
 23fa292:	e7d7      	b.n	23fa244 <__ieee754_atan2+0xa4>
 23fa294:	a31c      	add	r3, pc, #112	; (adr r3, 23fa308 <__ieee754_atan2+0x168>)
 23fa296:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa29a:	ec51 0b10 	vmov	r0, r1, d0
 23fa29e:	f7e8 f80f 	bl	23e22c0 <__aeabi_dsub>
 23fa2a2:	4602      	mov	r2, r0
 23fa2a4:	460b      	mov	r3, r1
 23fa2a6:	a11a      	add	r1, pc, #104	; (adr r1, 23fa310 <__ieee754_atan2+0x170>)
 23fa2a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fa2ac:	f7e8 f808 	bl	23e22c0 <__aeabi_dsub>
 23fa2b0:	ec41 0b10 	vmov	d0, r0, r1
 23fa2b4:	e7c6      	b.n	23fa244 <__ieee754_atan2+0xa4>
 23fa2b6:	ee10 1a90 	vmov	r1, s1
 23fa2ba:	ec53 2b10 	vmov	r2, r3, d0
 23fa2be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fa2c2:	ec43 2b10 	vmov	d0, r2, r3
 23fa2c6:	e7bd      	b.n	23fa244 <__ieee754_atan2+0xa4>
 23fa2c8:	2f02      	cmp	r7, #2
 23fa2ca:	d815      	bhi.n	23fa2f8 <__ieee754_atan2+0x158>
 23fa2cc:	4b1d      	ldr	r3, [pc, #116]	; (23fa344 <__ieee754_atan2+0x1a4>)
 23fa2ce:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 23fa2d2:	ed97 0b00 	vldr	d0, [r7]
 23fa2d6:	e7b5      	b.n	23fa244 <__ieee754_atan2+0xa4>
 23fa2d8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 23fa300 <__ieee754_atan2+0x160>
 23fa2dc:	e7b2      	b.n	23fa244 <__ieee754_atan2+0xa4>
 23fa2de:	4602      	mov	r2, r0
 23fa2e0:	460b      	mov	r3, r1
 23fa2e2:	4620      	mov	r0, r4
 23fa2e4:	4629      	mov	r1, r5
 23fa2e6:	f7e8 facd 	bl	23e2884 <__aeabi_ddiv>
 23fa2ea:	ec41 0b10 	vmov	d0, r0, r1
 23fa2ee:	f7ff fd53 	bl	23f9d98 <fabs>
 23fa2f2:	f7ff fb55 	bl	23f99a0 <atan>
 23fa2f6:	e78b      	b.n	23fa210 <__ieee754_atan2+0x70>
 23fa2f8:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 23fa330 <__ieee754_atan2+0x190>
 23fa2fc:	e7a2      	b.n	23fa244 <__ieee754_atan2+0xa4>
 23fa2fe:	bf00      	nop
	...
 23fa308:	33145c07 	.word	0x33145c07
 23fa30c:	3ca1a626 	.word	0x3ca1a626
 23fa310:	54442d18 	.word	0x54442d18
 23fa314:	400921fb 	.word	0x400921fb
 23fa318:	54442d18 	.word	0x54442d18
 23fa31c:	c00921fb 	.word	0xc00921fb
 23fa320:	54442d18 	.word	0x54442d18
 23fa324:	3ff921fb 	.word	0x3ff921fb
 23fa328:	54442d18 	.word	0x54442d18
 23fa32c:	bff921fb 	.word	0xbff921fb
 23fa330:	54442d18 	.word	0x54442d18
 23fa334:	3fe921fb 	.word	0x3fe921fb
 23fa338:	7ff00000 	.word	0x7ff00000
 23fa33c:	c0100000 	.word	0xc0100000
 23fa340:	023ffb90 	.word	0x023ffb90
 23fa344:	023ffb78 	.word	0x023ffb78

023fa348 <__ieee754_pow>:
 23fa348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa34c:	ec55 4b11 	vmov	r4, r5, d1
 23fa350:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
 23fa354:	ea5a 0204 	orrs.w	r2, sl, r4
 23fa358:	ed2d 8b0c 	vpush	{d8-d13}
 23fa35c:	b087      	sub	sp, #28
 23fa35e:	d01f      	beq.n	23fa3a0 <__ieee754_pow+0x58>
 23fa360:	495d      	ldr	r1, [pc, #372]	; (23fa4d8 <__ieee754_pow+0x190>)
 23fa362:	ee10 2a10 	vmov	r2, s0
 23fa366:	ec57 6b10 	vmov	r6, r7, d0
 23fa36a:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 23fa36e:	46b9      	mov	r9, r7
 23fa370:	4588      	cmp	r8, r1
 23fa372:	dc11      	bgt.n	23fa398 <__ieee754_pow+0x50>
 23fa374:	46ab      	mov	fp, r5
 23fa376:	ee11 3a10 	vmov	r3, s2
 23fa37a:	d108      	bne.n	23fa38e <__ieee754_pow+0x46>
 23fa37c:	b13e      	cbz	r6, 23fa38e <__ieee754_pow+0x46>
 23fa37e:	4857      	ldr	r0, [pc, #348]	; (23fa4dc <__ieee754_pow+0x194>)
 23fa380:	b007      	add	sp, #28
 23fa382:	ecbd 8b0c 	vpop	{d8-d13}
 23fa386:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa38a:	f001 bf15 	b.w	23fc1b8 <nan>
 23fa38e:	4952      	ldr	r1, [pc, #328]	; (23fa4d8 <__ieee754_pow+0x190>)
 23fa390:	458a      	cmp	sl, r1
 23fa392:	dc01      	bgt.n	23fa398 <__ieee754_pow+0x50>
 23fa394:	d10b      	bne.n	23fa3ae <__ieee754_pow+0x66>
 23fa396:	b153      	cbz	r3, 23fa3ae <__ieee754_pow+0x66>
 23fa398:	4b51      	ldr	r3, [pc, #324]	; (23fa4e0 <__ieee754_pow+0x198>)
 23fa39a:	4443      	add	r3, r8
 23fa39c:	4313      	orrs	r3, r2
 23fa39e:	d1ee      	bne.n	23fa37e <__ieee754_pow+0x36>
 23fa3a0:	ed9f 0b49 	vldr	d0, [pc, #292]	; 23fa4c8 <__ieee754_pow+0x180>
 23fa3a4:	b007      	add	sp, #28
 23fa3a6:	ecbd 8b0c 	vpop	{d8-d13}
 23fa3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa3ae:	f1b9 0f00 	cmp.w	r9, #0
 23fa3b2:	db45      	blt.n	23fa440 <__ieee754_pow+0xf8>
 23fa3b4:	2100      	movs	r1, #0
 23fa3b6:	9100      	str	r1, [sp, #0]
 23fa3b8:	b983      	cbnz	r3, 23fa3dc <__ieee754_pow+0x94>
 23fa3ba:	4b47      	ldr	r3, [pc, #284]	; (23fa4d8 <__ieee754_pow+0x190>)
 23fa3bc:	459a      	cmp	sl, r3
 23fa3be:	d05b      	beq.n	23fa478 <__ieee754_pow+0x130>
 23fa3c0:	4b48      	ldr	r3, [pc, #288]	; (23fa4e4 <__ieee754_pow+0x19c>)
 23fa3c2:	459a      	cmp	sl, r3
 23fa3c4:	d06a      	beq.n	23fa49c <__ieee754_pow+0x154>
 23fa3c6:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
 23fa3ca:	f000 84b0 	beq.w	23fad2e <__ieee754_pow+0x9e6>
 23fa3ce:	4b46      	ldr	r3, [pc, #280]	; (23fa4e8 <__ieee754_pow+0x1a0>)
 23fa3d0:	459b      	cmp	fp, r3
 23fa3d2:	d103      	bne.n	23fa3dc <__ieee754_pow+0x94>
 23fa3d4:	f1b9 0f00 	cmp.w	r9, #0
 23fa3d8:	f280 850d 	bge.w	23fadf6 <__ieee754_pow+0xaae>
 23fa3dc:	9202      	str	r2, [sp, #8]
 23fa3de:	ec47 6b10 	vmov	d0, r6, r7
 23fa3e2:	f7ff fcd9 	bl	23f9d98 <fabs>
 23fa3e6:	9a02      	ldr	r2, [sp, #8]
 23fa3e8:	b94a      	cbnz	r2, 23fa3fe <__ieee754_pow+0xb6>
 23fa3ea:	f029 4340 	bic.w	r3, r9, #3221225472	; 0xc0000000
 23fa3ee:	4a3d      	ldr	r2, [pc, #244]	; (23fa4e4 <__ieee754_pow+0x19c>)
 23fa3f0:	4293      	cmp	r3, r2
 23fa3f2:	f000 83a8 	beq.w	23fab46 <__ieee754_pow+0x7fe>
 23fa3f6:	f1b8 0f00 	cmp.w	r8, #0
 23fa3fa:	f000 83a4 	beq.w	23fab46 <__ieee754_pow+0x7fe>
 23fa3fe:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 23fa402:	9a00      	ldr	r2, [sp, #0]
 23fa404:	3b01      	subs	r3, #1
 23fa406:	9304      	str	r3, [sp, #16]
 23fa408:	4313      	orrs	r3, r2
 23fa40a:	d04e      	beq.n	23fa4aa <__ieee754_pow+0x162>
 23fa40c:	4b37      	ldr	r3, [pc, #220]	; (23fa4ec <__ieee754_pow+0x1a4>)
 23fa40e:	459a      	cmp	sl, r3
 23fa410:	dd72      	ble.n	23fa4f8 <__ieee754_pow+0x1b0>
 23fa412:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 23fa416:	459a      	cmp	sl, r3
 23fa418:	4b35      	ldr	r3, [pc, #212]	; (23fa4f0 <__ieee754_pow+0x1a8>)
 23fa41a:	f340 842b 	ble.w	23fac74 <__ieee754_pow+0x92c>
 23fa41e:	4598      	cmp	r8, r3
 23fa420:	f340 83a9 	ble.w	23fab76 <__ieee754_pow+0x82e>
 23fa424:	f1bb 0f00 	cmp.w	fp, #0
 23fa428:	f340 83a9 	ble.w	23fab7e <__ieee754_pow+0x836>
 23fa42c:	a328      	add	r3, pc, #160	; (adr r3, 23fa4d0 <__ieee754_pow+0x188>)
 23fa42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa432:	4610      	mov	r0, r2
 23fa434:	4619      	mov	r1, r3
 23fa436:	f7e8 f8fb 	bl	23e2630 <__aeabi_dmul>
 23fa43a:	ec41 0b10 	vmov	d0, r0, r1
 23fa43e:	e7b1      	b.n	23fa3a4 <__ieee754_pow+0x5c>
 23fa440:	492c      	ldr	r1, [pc, #176]	; (23fa4f4 <__ieee754_pow+0x1ac>)
 23fa442:	458a      	cmp	sl, r1
 23fa444:	dc27      	bgt.n	23fa496 <__ieee754_pow+0x14e>
 23fa446:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 23fa44a:	458a      	cmp	sl, r1
 23fa44c:	ddb2      	ble.n	23fa3b4 <__ieee754_pow+0x6c>
 23fa44e:	ea4f 512a 	mov.w	r1, sl, asr #20
 23fa452:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 23fa456:	2914      	cmp	r1, #20
 23fa458:	f340 847d 	ble.w	23fad56 <__ieee754_pow+0xa0e>
 23fa45c:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 23fa460:	fa23 f001 	lsr.w	r0, r3, r1
 23fa464:	fa00 f101 	lsl.w	r1, r0, r1
 23fa468:	4299      	cmp	r1, r3
 23fa46a:	d1a3      	bne.n	23fa3b4 <__ieee754_pow+0x6c>
 23fa46c:	f000 0001 	and.w	r0, r0, #1
 23fa470:	f1c0 0102 	rsb	r1, r0, #2
 23fa474:	9100      	str	r1, [sp, #0]
 23fa476:	e79f      	b.n	23fa3b8 <__ieee754_pow+0x70>
 23fa478:	4b19      	ldr	r3, [pc, #100]	; (23fa4e0 <__ieee754_pow+0x198>)
 23fa47a:	4443      	add	r3, r8
 23fa47c:	4313      	orrs	r3, r2
 23fa47e:	d08f      	beq.n	23fa3a0 <__ieee754_pow+0x58>
 23fa480:	4b1b      	ldr	r3, [pc, #108]	; (23fa4f0 <__ieee754_pow+0x1a8>)
 23fa482:	4598      	cmp	r8, r3
 23fa484:	f340 83ab 	ble.w	23fabde <__ieee754_pow+0x896>
 23fa488:	f1bb 0f00 	cmp.w	fp, #0
 23fa48c:	f2c0 8377 	blt.w	23fab7e <__ieee754_pow+0x836>
 23fa490:	ec45 4b10 	vmov	d0, r4, r5
 23fa494:	e786      	b.n	23fa3a4 <__ieee754_pow+0x5c>
 23fa496:	2102      	movs	r1, #2
 23fa498:	9100      	str	r1, [sp, #0]
 23fa49a:	e78d      	b.n	23fa3b8 <__ieee754_pow+0x70>
 23fa49c:	f1bb 0f00 	cmp.w	fp, #0
 23fa4a0:	f2c0 844f 	blt.w	23fad42 <__ieee754_pow+0x9fa>
 23fa4a4:	ec47 6b10 	vmov	d0, r6, r7
 23fa4a8:	e77c      	b.n	23fa3a4 <__ieee754_pow+0x5c>
 23fa4aa:	4632      	mov	r2, r6
 23fa4ac:	463b      	mov	r3, r7
 23fa4ae:	4610      	mov	r0, r2
 23fa4b0:	4619      	mov	r1, r3
 23fa4b2:	f7e7 ff05 	bl	23e22c0 <__aeabi_dsub>
 23fa4b6:	4602      	mov	r2, r0
 23fa4b8:	460b      	mov	r3, r1
 23fa4ba:	f7e8 f9e3 	bl	23e2884 <__aeabi_ddiv>
 23fa4be:	ec41 0b10 	vmov	d0, r0, r1
 23fa4c2:	e76f      	b.n	23fa3a4 <__ieee754_pow+0x5c>
 23fa4c4:	f3af 8000 	nop.w
 23fa4c8:	00000000 	.word	0x00000000
 23fa4cc:	3ff00000 	.word	0x3ff00000
 23fa4d0:	8800759c 	.word	0x8800759c
 23fa4d4:	7e37e43c 	.word	0x7e37e43c
 23fa4d8:	7ff00000 	.word	0x7ff00000
 23fa4dc:	023ffba8 	.word	0x023ffba8
 23fa4e0:	c0100000 	.word	0xc0100000
 23fa4e4:	3ff00000 	.word	0x3ff00000
 23fa4e8:	3fe00000 	.word	0x3fe00000
 23fa4ec:	41e00000 	.word	0x41e00000
 23fa4f0:	3fefffff 	.word	0x3fefffff
 23fa4f4:	433fffff 	.word	0x433fffff
 23fa4f8:	4be3      	ldr	r3, [pc, #908]	; (23fa888 <__ieee754_pow+0x540>)
 23fa4fa:	2200      	movs	r2, #0
 23fa4fc:	ea09 0303 	and.w	r3, r9, r3
 23fa500:	b953      	cbnz	r3, 23fa518 <__ieee754_pow+0x1d0>
 23fa502:	4be2      	ldr	r3, [pc, #904]	; (23fa88c <__ieee754_pow+0x544>)
 23fa504:	ec51 0b10 	vmov	r0, r1, d0
 23fa508:	f7e8 f892 	bl	23e2630 <__aeabi_dmul>
 23fa50c:	f06f 0234 	mvn.w	r2, #52	; 0x34
 23fa510:	ec41 0b10 	vmov	d0, r0, r1
 23fa514:	ee10 8a90 	vmov	r8, s1
 23fa518:	ea4f 5328 	mov.w	r3, r8, asr #20
 23fa51c:	f3c8 0813 	ubfx	r8, r8, #0, #20
 23fa520:	4edb      	ldr	r6, [pc, #876]	; (23fa890 <__ieee754_pow+0x548>)
 23fa522:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 23fa526:	ea48 0606 	orr.w	r6, r8, r6
 23fa52a:	189a      	adds	r2, r3, r2
 23fa52c:	4bd9      	ldr	r3, [pc, #868]	; (23fa894 <__ieee754_pow+0x54c>)
 23fa52e:	4598      	cmp	r8, r3
 23fa530:	9205      	str	r2, [sp, #20]
 23fa532:	dd07      	ble.n	23fa544 <__ieee754_pow+0x1fc>
 23fa534:	4bd8      	ldr	r3, [pc, #864]	; (23fa898 <__ieee754_pow+0x550>)
 23fa536:	4598      	cmp	r8, r3
 23fa538:	f340 8433 	ble.w	23fada2 <__ieee754_pow+0xa5a>
 23fa53c:	3201      	adds	r2, #1
 23fa53e:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 23fa542:	9205      	str	r2, [sp, #20]
 23fa544:	2700      	movs	r7, #0
 23fa546:	ed9f 7bb8 	vldr	d7, [pc, #736]	; 23fa828 <__ieee754_pow+0x4e0>
 23fa54a:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 23fa830 <__ieee754_pow+0x4e8>
 23fa54e:	eeb0 da47 	vmov.f32	s26, s14
 23fa552:	eef0 da67 	vmov.f32	s27, s15
 23fa556:	eeb0 ca47 	vmov.f32	s24, s14
 23fa55a:	eef0 ca67 	vmov.f32	s25, s15
 23fa55e:	ec51 0b16 	vmov	r0, r1, d6
 23fa562:	ec53 2b10 	vmov	r2, r3, d0
 23fa566:	4633      	mov	r3, r6
 23fa568:	1076      	asrs	r6, r6, #1
 23fa56a:	ec43 2b19 	vmov	d9, r2, r3
 23fa56e:	ec41 0b1a 	vmov	d10, r0, r1
 23fa572:	4602      	mov	r2, r0
 23fa574:	460b      	mov	r3, r1
 23fa576:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 23fa57a:	ec51 0b19 	vmov	r0, r1, d9
 23fa57e:	f7e7 fe9f 	bl	23e22c0 <__aeabi_dsub>
 23fa582:	4680      	mov	r8, r0
 23fa584:	4689      	mov	r9, r1
 23fa586:	ec53 2b1a 	vmov	r2, r3, d10
 23fa58a:	ec51 0b19 	vmov	r0, r1, d9
 23fa58e:	f7e7 fe99 	bl	23e22c4 <__adddf3>
 23fa592:	4602      	mov	r2, r0
 23fa594:	460b      	mov	r3, r1
 23fa596:	2000      	movs	r0, #0
 23fa598:	49bd      	ldr	r1, [pc, #756]	; (23fa890 <__ieee754_pow+0x548>)
 23fa59a:	f7e8 f973 	bl	23e2884 <__aeabi_ddiv>
 23fa59e:	ec41 0b1b 	vmov	d11, r0, r1
 23fa5a2:	ec53 2b1b 	vmov	r2, r3, d11
 23fa5a6:	4640      	mov	r0, r8
 23fa5a8:	4649      	mov	r1, r9
 23fa5aa:	f7e8 f841 	bl	23e2630 <__aeabi_dmul>
 23fa5ae:	460a      	mov	r2, r1
 23fa5b0:	f506 2300 	add.w	r3, r6, #524288	; 0x80000
 23fa5b4:	ec41 0b18 	vmov	d8, r0, r1
 23fa5b8:	4601      	mov	r1, r0
 23fa5ba:	2000      	movs	r0, #0
 23fa5bc:	e9cd 1202 	strd	r1, r2, [sp, #8]
 23fa5c0:	2100      	movs	r1, #0
 23fa5c2:	4606      	mov	r6, r0
 23fa5c4:	4602      	mov	r2, r0
 23fa5c6:	9102      	str	r1, [sp, #8]
 23fa5c8:	19d9      	adds	r1, r3, r7
 23fa5ca:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 23fa5ce:	460f      	mov	r7, r1
 23fa5d0:	460b      	mov	r3, r1
 23fa5d2:	4650      	mov	r0, sl
 23fa5d4:	4659      	mov	r1, fp
 23fa5d6:	f7e8 f82b 	bl	23e2630 <__aeabi_dmul>
 23fa5da:	4602      	mov	r2, r0
 23fa5dc:	460b      	mov	r3, r1
 23fa5de:	4640      	mov	r0, r8
 23fa5e0:	4649      	mov	r1, r9
 23fa5e2:	f7e7 fe6d 	bl	23e22c0 <__aeabi_dsub>
 23fa5e6:	4680      	mov	r8, r0
 23fa5e8:	4689      	mov	r9, r1
 23fa5ea:	4630      	mov	r0, r6
 23fa5ec:	4639      	mov	r1, r7
 23fa5ee:	ec53 2b1a 	vmov	r2, r3, d10
 23fa5f2:	f7e7 fe65 	bl	23e22c0 <__aeabi_dsub>
 23fa5f6:	4602      	mov	r2, r0
 23fa5f8:	460b      	mov	r3, r1
 23fa5fa:	ec51 0b19 	vmov	r0, r1, d9
 23fa5fe:	f7e7 fe5f 	bl	23e22c0 <__aeabi_dsub>
 23fa602:	4652      	mov	r2, sl
 23fa604:	465b      	mov	r3, fp
 23fa606:	f7e8 f813 	bl	23e2630 <__aeabi_dmul>
 23fa60a:	4602      	mov	r2, r0
 23fa60c:	460b      	mov	r3, r1
 23fa60e:	4640      	mov	r0, r8
 23fa610:	4649      	mov	r1, r9
 23fa612:	f7e7 fe55 	bl	23e22c0 <__aeabi_dsub>
 23fa616:	ec53 2b1b 	vmov	r2, r3, d11
 23fa61a:	f7e8 f809 	bl	23e2630 <__aeabi_dmul>
 23fa61e:	ec53 2b18 	vmov	r2, r3, d8
 23fa622:	ec41 0b1a 	vmov	d10, r0, r1
 23fa626:	ec51 0b18 	vmov	r0, r1, d8
 23fa62a:	f7e8 f801 	bl	23e2630 <__aeabi_dmul>
 23fa62e:	4606      	mov	r6, r0
 23fa630:	460f      	mov	r7, r1
 23fa632:	a381      	add	r3, pc, #516	; (adr r3, 23fa838 <__ieee754_pow+0x4f0>)
 23fa634:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa638:	f7e7 fffa 	bl	23e2630 <__aeabi_dmul>
 23fa63c:	a380      	add	r3, pc, #512	; (adr r3, 23fa840 <__ieee754_pow+0x4f8>)
 23fa63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa642:	f7e7 fe3f 	bl	23e22c4 <__adddf3>
 23fa646:	4632      	mov	r2, r6
 23fa648:	463b      	mov	r3, r7
 23fa64a:	f7e7 fff1 	bl	23e2630 <__aeabi_dmul>
 23fa64e:	a37e      	add	r3, pc, #504	; (adr r3, 23fa848 <__ieee754_pow+0x500>)
 23fa650:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa654:	f7e7 fe36 	bl	23e22c4 <__adddf3>
 23fa658:	4632      	mov	r2, r6
 23fa65a:	463b      	mov	r3, r7
 23fa65c:	f7e7 ffe8 	bl	23e2630 <__aeabi_dmul>
 23fa660:	a37b      	add	r3, pc, #492	; (adr r3, 23fa850 <__ieee754_pow+0x508>)
 23fa662:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa666:	f7e7 fe2d 	bl	23e22c4 <__adddf3>
 23fa66a:	4632      	mov	r2, r6
 23fa66c:	463b      	mov	r3, r7
 23fa66e:	f7e7 ffdf 	bl	23e2630 <__aeabi_dmul>
 23fa672:	a379      	add	r3, pc, #484	; (adr r3, 23fa858 <__ieee754_pow+0x510>)
 23fa674:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa678:	f7e7 fe24 	bl	23e22c4 <__adddf3>
 23fa67c:	4632      	mov	r2, r6
 23fa67e:	463b      	mov	r3, r7
 23fa680:	f7e7 ffd6 	bl	23e2630 <__aeabi_dmul>
 23fa684:	a376      	add	r3, pc, #472	; (adr r3, 23fa860 <__ieee754_pow+0x518>)
 23fa686:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa68a:	f7e7 fe1b 	bl	23e22c4 <__adddf3>
 23fa68e:	4680      	mov	r8, r0
 23fa690:	4689      	mov	r9, r1
 23fa692:	4632      	mov	r2, r6
 23fa694:	463b      	mov	r3, r7
 23fa696:	4630      	mov	r0, r6
 23fa698:	4639      	mov	r1, r7
 23fa69a:	f7e7 ffc9 	bl	23e2630 <__aeabi_dmul>
 23fa69e:	4602      	mov	r2, r0
 23fa6a0:	460b      	mov	r3, r1
 23fa6a2:	4640      	mov	r0, r8
 23fa6a4:	4649      	mov	r1, r9
 23fa6a6:	f04f 0800 	mov.w	r8, #0
 23fa6aa:	f7e7 ffc1 	bl	23e2630 <__aeabi_dmul>
 23fa6ae:	4652      	mov	r2, sl
 23fa6b0:	4606      	mov	r6, r0
 23fa6b2:	460f      	mov	r7, r1
 23fa6b4:	465b      	mov	r3, fp
 23fa6b6:	ec51 0b18 	vmov	r0, r1, d8
 23fa6ba:	f7e7 fe03 	bl	23e22c4 <__adddf3>
 23fa6be:	ec53 2b1a 	vmov	r2, r3, d10
 23fa6c2:	f7e7 ffb5 	bl	23e2630 <__aeabi_dmul>
 23fa6c6:	4632      	mov	r2, r6
 23fa6c8:	463b      	mov	r3, r7
 23fa6ca:	f7e7 fdfb 	bl	23e22c4 <__adddf3>
 23fa6ce:	4652      	mov	r2, sl
 23fa6d0:	465b      	mov	r3, fp
 23fa6d2:	ec41 0b19 	vmov	d9, r0, r1
 23fa6d6:	4650      	mov	r0, sl
 23fa6d8:	4659      	mov	r1, fp
 23fa6da:	f7e7 ffa9 	bl	23e2630 <__aeabi_dmul>
 23fa6de:	2200      	movs	r2, #0
 23fa6e0:	4b6e      	ldr	r3, [pc, #440]	; (23fa89c <__ieee754_pow+0x554>)
 23fa6e2:	4606      	mov	r6, r0
 23fa6e4:	460f      	mov	r7, r1
 23fa6e6:	f7e7 fded 	bl	23e22c4 <__adddf3>
 23fa6ea:	ec53 2b19 	vmov	r2, r3, d9
 23fa6ee:	f7e7 fde9 	bl	23e22c4 <__adddf3>
 23fa6f2:	4689      	mov	r9, r1
 23fa6f4:	4642      	mov	r2, r8
 23fa6f6:	4650      	mov	r0, sl
 23fa6f8:	464b      	mov	r3, r9
 23fa6fa:	4659      	mov	r1, fp
 23fa6fc:	f7e7 ff98 	bl	23e2630 <__aeabi_dmul>
 23fa700:	2200      	movs	r2, #0
 23fa702:	4682      	mov	sl, r0
 23fa704:	468b      	mov	fp, r1
 23fa706:	4b65      	ldr	r3, [pc, #404]	; (23fa89c <__ieee754_pow+0x554>)
 23fa708:	4640      	mov	r0, r8
 23fa70a:	4649      	mov	r1, r9
 23fa70c:	f7e7 fdd8 	bl	23e22c0 <__aeabi_dsub>
 23fa710:	4632      	mov	r2, r6
 23fa712:	463b      	mov	r3, r7
 23fa714:	f7e7 fdd4 	bl	23e22c0 <__aeabi_dsub>
 23fa718:	4602      	mov	r2, r0
 23fa71a:	460b      	mov	r3, r1
 23fa71c:	ec51 0b19 	vmov	r0, r1, d9
 23fa720:	f7e7 fdce 	bl	23e22c0 <__aeabi_dsub>
 23fa724:	ec53 2b18 	vmov	r2, r3, d8
 23fa728:	f7e7 ff82 	bl	23e2630 <__aeabi_dmul>
 23fa72c:	4606      	mov	r6, r0
 23fa72e:	460f      	mov	r7, r1
 23fa730:	4642      	mov	r2, r8
 23fa732:	464b      	mov	r3, r9
 23fa734:	ec51 0b1a 	vmov	r0, r1, d10
 23fa738:	f7e7 ff7a 	bl	23e2630 <__aeabi_dmul>
 23fa73c:	4602      	mov	r2, r0
 23fa73e:	460b      	mov	r3, r1
 23fa740:	4630      	mov	r0, r6
 23fa742:	4639      	mov	r1, r7
 23fa744:	f7e7 fdbe 	bl	23e22c4 <__adddf3>
 23fa748:	4680      	mov	r8, r0
 23fa74a:	4689      	mov	r9, r1
 23fa74c:	4650      	mov	r0, sl
 23fa74e:	4642      	mov	r2, r8
 23fa750:	4659      	mov	r1, fp
 23fa752:	464b      	mov	r3, r9
 23fa754:	f7e7 fdb6 	bl	23e22c4 <__adddf3>
 23fa758:	2000      	movs	r0, #0
 23fa75a:	460f      	mov	r7, r1
 23fa75c:	4606      	mov	r6, r0
 23fa75e:	a342      	add	r3, pc, #264	; (adr r3, 23fa868 <__ieee754_pow+0x520>)
 23fa760:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa764:	f7e7 ff64 	bl	23e2630 <__aeabi_dmul>
 23fa768:	4652      	mov	r2, sl
 23fa76a:	465b      	mov	r3, fp
 23fa76c:	ec41 0b19 	vmov	d9, r0, r1
 23fa770:	4630      	mov	r0, r6
 23fa772:	4639      	mov	r1, r7
 23fa774:	f7e7 fda4 	bl	23e22c0 <__aeabi_dsub>
 23fa778:	4602      	mov	r2, r0
 23fa77a:	460b      	mov	r3, r1
 23fa77c:	4640      	mov	r0, r8
 23fa77e:	4649      	mov	r1, r9
 23fa780:	f7e7 fd9e 	bl	23e22c0 <__aeabi_dsub>
 23fa784:	a33a      	add	r3, pc, #232	; (adr r3, 23fa870 <__ieee754_pow+0x528>)
 23fa786:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa78a:	f7e7 ff51 	bl	23e2630 <__aeabi_dmul>
 23fa78e:	4680      	mov	r8, r0
 23fa790:	4689      	mov	r9, r1
 23fa792:	4630      	mov	r0, r6
 23fa794:	4639      	mov	r1, r7
 23fa796:	a338      	add	r3, pc, #224	; (adr r3, 23fa878 <__ieee754_pow+0x530>)
 23fa798:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa79c:	f7e7 ff48 	bl	23e2630 <__aeabi_dmul>
 23fa7a0:	4602      	mov	r2, r0
 23fa7a2:	460b      	mov	r3, r1
 23fa7a4:	4640      	mov	r0, r8
 23fa7a6:	4649      	mov	r1, r9
 23fa7a8:	f7e7 fd8c 	bl	23e22c4 <__adddf3>
 23fa7ac:	ec53 2b1c 	vmov	r2, r3, d12
 23fa7b0:	f7e7 fd88 	bl	23e22c4 <__adddf3>
 23fa7b4:	4606      	mov	r6, r0
 23fa7b6:	460f      	mov	r7, r1
 23fa7b8:	9805      	ldr	r0, [sp, #20]
 23fa7ba:	f7e7 fecf 	bl	23e255c <__aeabi_i2d>
 23fa7be:	4632      	mov	r2, r6
 23fa7c0:	4680      	mov	r8, r0
 23fa7c2:	4689      	mov	r9, r1
 23fa7c4:	463b      	mov	r3, r7
 23fa7c6:	ec51 0b19 	vmov	r0, r1, d9
 23fa7ca:	f7e7 fd7b 	bl	23e22c4 <__adddf3>
 23fa7ce:	ec53 2b1d 	vmov	r2, r3, d13
 23fa7d2:	f7e7 fd77 	bl	23e22c4 <__adddf3>
 23fa7d6:	4642      	mov	r2, r8
 23fa7d8:	464b      	mov	r3, r9
 23fa7da:	f7e7 fd73 	bl	23e22c4 <__adddf3>
 23fa7de:	2000      	movs	r0, #0
 23fa7e0:	4642      	mov	r2, r8
 23fa7e2:	464b      	mov	r3, r9
 23fa7e4:	4682      	mov	sl, r0
 23fa7e6:	468b      	mov	fp, r1
 23fa7e8:	f7e7 fd6a 	bl	23e22c0 <__aeabi_dsub>
 23fa7ec:	ec53 2b1d 	vmov	r2, r3, d13
 23fa7f0:	f7e7 fd66 	bl	23e22c0 <__aeabi_dsub>
 23fa7f4:	ec53 2b19 	vmov	r2, r3, d9
 23fa7f8:	f7e7 fd62 	bl	23e22c0 <__aeabi_dsub>
 23fa7fc:	4602      	mov	r2, r0
 23fa7fe:	460b      	mov	r3, r1
 23fa800:	4630      	mov	r0, r6
 23fa802:	4639      	mov	r1, r7
 23fa804:	f7e7 fd5c 	bl	23e22c0 <__aeabi_dsub>
 23fa808:	9b00      	ldr	r3, [sp, #0]
 23fa80a:	9a04      	ldr	r2, [sp, #16]
 23fa80c:	3b01      	subs	r3, #1
 23fa80e:	4313      	orrs	r3, r2
 23fa810:	ec41 0b18 	vmov	d8, r0, r1
 23fa814:	f040 81dc 	bne.w	23fabd0 <__ieee754_pow+0x888>
 23fa818:	ed9f 7b19 	vldr	d7, [pc, #100]	; 23fa880 <__ieee754_pow+0x538>
 23fa81c:	eeb0 9a47 	vmov.f32	s18, s14
 23fa820:	eef0 9a67 	vmov.f32	s19, s15
 23fa824:	e03c      	b.n	23fa8a0 <__ieee754_pow+0x558>
 23fa826:	bf00      	nop
	...
 23fa834:	3ff00000 	.word	0x3ff00000
 23fa838:	4a454eef 	.word	0x4a454eef
 23fa83c:	3fca7e28 	.word	0x3fca7e28
 23fa840:	93c9db65 	.word	0x93c9db65
 23fa844:	3fcd864a 	.word	0x3fcd864a
 23fa848:	a91d4101 	.word	0xa91d4101
 23fa84c:	3fd17460 	.word	0x3fd17460
 23fa850:	518f264d 	.word	0x518f264d
 23fa854:	3fd55555 	.word	0x3fd55555
 23fa858:	db6fabff 	.word	0xdb6fabff
 23fa85c:	3fdb6db6 	.word	0x3fdb6db6
 23fa860:	33333303 	.word	0x33333303
 23fa864:	3fe33333 	.word	0x3fe33333
 23fa868:	e0000000 	.word	0xe0000000
 23fa86c:	3feec709 	.word	0x3feec709
 23fa870:	dc3a03fd 	.word	0xdc3a03fd
 23fa874:	3feec709 	.word	0x3feec709
 23fa878:	145b01f5 	.word	0x145b01f5
 23fa87c:	be3e2fe0 	.word	0xbe3e2fe0
 23fa880:	00000000 	.word	0x00000000
 23fa884:	bff00000 	.word	0xbff00000
 23fa888:	7ff00000 	.word	0x7ff00000
 23fa88c:	43400000 	.word	0x43400000
 23fa890:	3ff00000 	.word	0x3ff00000
 23fa894:	0003988e 	.word	0x0003988e
 23fa898:	000bb679 	.word	0x000bb679
 23fa89c:	40080000 	.word	0x40080000
 23fa8a0:	2300      	movs	r3, #0
 23fa8a2:	4620      	mov	r0, r4
 23fa8a4:	4629      	mov	r1, r5
 23fa8a6:	e9cd 4500 	strd	r4, r5, [sp]
 23fa8aa:	9300      	str	r3, [sp, #0]
 23fa8ac:	e9dd 8900 	ldrd	r8, r9, [sp]
 23fa8b0:	4642      	mov	r2, r8
 23fa8b2:	464b      	mov	r3, r9
 23fa8b4:	f7e7 fd04 	bl	23e22c0 <__aeabi_dsub>
 23fa8b8:	465b      	mov	r3, fp
 23fa8ba:	4652      	mov	r2, sl
 23fa8bc:	f7e7 feb8 	bl	23e2630 <__aeabi_dmul>
 23fa8c0:	4606      	mov	r6, r0
 23fa8c2:	460f      	mov	r7, r1
 23fa8c4:	4622      	mov	r2, r4
 23fa8c6:	462b      	mov	r3, r5
 23fa8c8:	ec51 0b18 	vmov	r0, r1, d8
 23fa8cc:	f7e7 feb0 	bl	23e2630 <__aeabi_dmul>
 23fa8d0:	4602      	mov	r2, r0
 23fa8d2:	460b      	mov	r3, r1
 23fa8d4:	4630      	mov	r0, r6
 23fa8d6:	4639      	mov	r1, r7
 23fa8d8:	f7e7 fcf4 	bl	23e22c4 <__adddf3>
 23fa8dc:	4642      	mov	r2, r8
 23fa8de:	4604      	mov	r4, r0
 23fa8e0:	460d      	mov	r5, r1
 23fa8e2:	464b      	mov	r3, r9
 23fa8e4:	4659      	mov	r1, fp
 23fa8e6:	4650      	mov	r0, sl
 23fa8e8:	46a0      	mov	r8, r4
 23fa8ea:	f7e7 fea1 	bl	23e2630 <__aeabi_dmul>
 23fa8ee:	4606      	mov	r6, r0
 23fa8f0:	460f      	mov	r7, r1
 23fa8f2:	4620      	mov	r0, r4
 23fa8f4:	4629      	mov	r1, r5
 23fa8f6:	4632      	mov	r2, r6
 23fa8f8:	463b      	mov	r3, r7
 23fa8fa:	46a9      	mov	r9, r5
 23fa8fc:	f7e7 fce2 	bl	23e22c4 <__adddf3>
 23fa900:	4bd5      	ldr	r3, [pc, #852]	; (23fac58 <__ieee754_pow+0x910>)
 23fa902:	4604      	mov	r4, r0
 23fa904:	460d      	mov	r5, r1
 23fa906:	4299      	cmp	r1, r3
 23fa908:	468b      	mov	fp, r1
 23fa90a:	f340 813b 	ble.w	23fab84 <__ieee754_pow+0x83c>
 23fa90e:	4bd3      	ldr	r3, [pc, #844]	; (23fac5c <__ieee754_pow+0x914>)
 23fa910:	440b      	add	r3, r1
 23fa912:	4303      	orrs	r3, r0
 23fa914:	f040 8235 	bne.w	23fad82 <__ieee754_pow+0xa3a>
 23fa918:	4640      	mov	r0, r8
 23fa91a:	4649      	mov	r1, r9
 23fa91c:	a3b6      	add	r3, pc, #728	; (adr r3, 23fabf8 <__ieee754_pow+0x8b0>)
 23fa91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa922:	f7e7 fccf 	bl	23e22c4 <__adddf3>
 23fa926:	4632      	mov	r2, r6
 23fa928:	463b      	mov	r3, r7
 23fa92a:	ec41 0b18 	vmov	d8, r0, r1
 23fa92e:	4620      	mov	r0, r4
 23fa930:	4629      	mov	r1, r5
 23fa932:	f7e7 fcc5 	bl	23e22c0 <__aeabi_dsub>
 23fa936:	4602      	mov	r2, r0
 23fa938:	460b      	mov	r3, r1
 23fa93a:	ec51 0b18 	vmov	r0, r1, d8
 23fa93e:	f7e8 f907 	bl	23e2b50 <__aeabi_dcmpgt>
 23fa942:	2800      	cmp	r0, #0
 23fa944:	f040 821d 	bne.w	23fad82 <__ieee754_pow+0xa3a>
 23fa948:	f3cb 530a 	ubfx	r3, fp, #20, #11
 23fa94c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 23fa950:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 23fa954:	4cc2      	ldr	r4, [pc, #776]	; (23fac60 <__ieee754_pow+0x918>)
 23fa956:	f1bb 0f00 	cmp.w	fp, #0
 23fa95a:	fa42 f303 	asr.w	r3, r2, r3
 23fa95e:	f04f 0000 	mov.w	r0, #0
 23fa962:	445b      	add	r3, fp
 23fa964:	f3c3 520a 	ubfx	r2, r3, #20, #11
 23fa968:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 23fa96c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 23fa970:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 23fa974:	fa44 f402 	asr.w	r4, r4, r2
 23fa978:	f1c2 0214 	rsb	r2, r2, #20
 23fa97c:	ea23 0104 	bic.w	r1, r3, r4
 23fa980:	fa4a fa02 	asr.w	sl, sl, r2
 23fa984:	4602      	mov	r2, r0
 23fa986:	4630      	mov	r0, r6
 23fa988:	460b      	mov	r3, r1
 23fa98a:	bfb8      	it	lt
 23fa98c:	f1ca 0a00 	rsblt	sl, sl, #0
 23fa990:	4639      	mov	r1, r7
 23fa992:	f7e7 fc95 	bl	23e22c0 <__aeabi_dsub>
 23fa996:	4602      	mov	r2, r0
 23fa998:	460b      	mov	r3, r1
 23fa99a:	4606      	mov	r6, r0
 23fa99c:	460f      	mov	r7, r1
 23fa99e:	4640      	mov	r0, r8
 23fa9a0:	4649      	mov	r1, r9
 23fa9a2:	ea4f 5b0a 	mov.w	fp, sl, lsl #20
 23fa9a6:	f7e7 fc8d 	bl	23e22c4 <__adddf3>
 23fa9aa:	460d      	mov	r5, r1
 23fa9ac:	2400      	movs	r4, #0
 23fa9ae:	4629      	mov	r1, r5
 23fa9b0:	a393      	add	r3, pc, #588	; (adr r3, 23fac00 <__ieee754_pow+0x8b8>)
 23fa9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa9b6:	4620      	mov	r0, r4
 23fa9b8:	f7e7 fe3a 	bl	23e2630 <__aeabi_dmul>
 23fa9bc:	4632      	mov	r2, r6
 23fa9be:	463b      	mov	r3, r7
 23fa9c0:	4606      	mov	r6, r0
 23fa9c2:	460f      	mov	r7, r1
 23fa9c4:	4620      	mov	r0, r4
 23fa9c6:	4629      	mov	r1, r5
 23fa9c8:	f7e7 fc7a 	bl	23e22c0 <__aeabi_dsub>
 23fa9cc:	4602      	mov	r2, r0
 23fa9ce:	460b      	mov	r3, r1
 23fa9d0:	4640      	mov	r0, r8
 23fa9d2:	4649      	mov	r1, r9
 23fa9d4:	f7e7 fc74 	bl	23e22c0 <__aeabi_dsub>
 23fa9d8:	a38b      	add	r3, pc, #556	; (adr r3, 23fac08 <__ieee754_pow+0x8c0>)
 23fa9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa9de:	f7e7 fe27 	bl	23e2630 <__aeabi_dmul>
 23fa9e2:	4680      	mov	r8, r0
 23fa9e4:	4689      	mov	r9, r1
 23fa9e6:	4620      	mov	r0, r4
 23fa9e8:	4629      	mov	r1, r5
 23fa9ea:	a389      	add	r3, pc, #548	; (adr r3, 23fac10 <__ieee754_pow+0x8c8>)
 23fa9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa9f0:	f7e7 fe1e 	bl	23e2630 <__aeabi_dmul>
 23fa9f4:	4602      	mov	r2, r0
 23fa9f6:	460b      	mov	r3, r1
 23fa9f8:	4640      	mov	r0, r8
 23fa9fa:	4649      	mov	r1, r9
 23fa9fc:	f7e7 fc62 	bl	23e22c4 <__adddf3>
 23faa00:	4680      	mov	r8, r0
 23faa02:	4689      	mov	r9, r1
 23faa04:	4630      	mov	r0, r6
 23faa06:	4642      	mov	r2, r8
 23faa08:	4639      	mov	r1, r7
 23faa0a:	464b      	mov	r3, r9
 23faa0c:	f7e7 fc5a 	bl	23e22c4 <__adddf3>
 23faa10:	4632      	mov	r2, r6
 23faa12:	4604      	mov	r4, r0
 23faa14:	460d      	mov	r5, r1
 23faa16:	463b      	mov	r3, r7
 23faa18:	f7e7 fc52 	bl	23e22c0 <__aeabi_dsub>
 23faa1c:	4602      	mov	r2, r0
 23faa1e:	460b      	mov	r3, r1
 23faa20:	4640      	mov	r0, r8
 23faa22:	4649      	mov	r1, r9
 23faa24:	f7e7 fc4c 	bl	23e22c0 <__aeabi_dsub>
 23faa28:	4622      	mov	r2, r4
 23faa2a:	4680      	mov	r8, r0
 23faa2c:	4689      	mov	r9, r1
 23faa2e:	462b      	mov	r3, r5
 23faa30:	4620      	mov	r0, r4
 23faa32:	4629      	mov	r1, r5
 23faa34:	f7e7 fdfc 	bl	23e2630 <__aeabi_dmul>
 23faa38:	4606      	mov	r6, r0
 23faa3a:	460f      	mov	r7, r1
 23faa3c:	a376      	add	r3, pc, #472	; (adr r3, 23fac18 <__ieee754_pow+0x8d0>)
 23faa3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23faa42:	f7e7 fdf5 	bl	23e2630 <__aeabi_dmul>
 23faa46:	a376      	add	r3, pc, #472	; (adr r3, 23fac20 <__ieee754_pow+0x8d8>)
 23faa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 23faa4c:	f7e7 fc38 	bl	23e22c0 <__aeabi_dsub>
 23faa50:	4632      	mov	r2, r6
 23faa52:	463b      	mov	r3, r7
 23faa54:	f7e7 fdec 	bl	23e2630 <__aeabi_dmul>
 23faa58:	a373      	add	r3, pc, #460	; (adr r3, 23fac28 <__ieee754_pow+0x8e0>)
 23faa5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23faa5e:	f7e7 fc31 	bl	23e22c4 <__adddf3>
 23faa62:	4632      	mov	r2, r6
 23faa64:	463b      	mov	r3, r7
 23faa66:	f7e7 fde3 	bl	23e2630 <__aeabi_dmul>
 23faa6a:	a371      	add	r3, pc, #452	; (adr r3, 23fac30 <__ieee754_pow+0x8e8>)
 23faa6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23faa70:	f7e7 fc26 	bl	23e22c0 <__aeabi_dsub>
 23faa74:	4632      	mov	r2, r6
 23faa76:	463b      	mov	r3, r7
 23faa78:	f7e7 fdda 	bl	23e2630 <__aeabi_dmul>
 23faa7c:	a36e      	add	r3, pc, #440	; (adr r3, 23fac38 <__ieee754_pow+0x8f0>)
 23faa7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23faa82:	f7e7 fc1f 	bl	23e22c4 <__adddf3>
 23faa86:	4632      	mov	r2, r6
 23faa88:	463b      	mov	r3, r7
 23faa8a:	f7e7 fdd1 	bl	23e2630 <__aeabi_dmul>
 23faa8e:	4602      	mov	r2, r0
 23faa90:	460b      	mov	r3, r1
 23faa92:	4620      	mov	r0, r4
 23faa94:	4629      	mov	r1, r5
 23faa96:	f7e7 fc13 	bl	23e22c0 <__aeabi_dsub>
 23faa9a:	4606      	mov	r6, r0
 23faa9c:	460f      	mov	r7, r1
 23faa9e:	4620      	mov	r0, r4
 23faaa0:	4632      	mov	r2, r6
 23faaa2:	4629      	mov	r1, r5
 23faaa4:	463b      	mov	r3, r7
 23faaa6:	f7e7 fdc3 	bl	23e2630 <__aeabi_dmul>
 23faaaa:	2200      	movs	r2, #0
 23faaac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 23faab0:	ec41 0b18 	vmov	d8, r0, r1
 23faab4:	4630      	mov	r0, r6
 23faab6:	4639      	mov	r1, r7
 23faab8:	f7e7 fc02 	bl	23e22c0 <__aeabi_dsub>
 23faabc:	4602      	mov	r2, r0
 23faabe:	460b      	mov	r3, r1
 23faac0:	ec51 0b18 	vmov	r0, r1, d8
 23faac4:	f7e7 fede 	bl	23e2884 <__aeabi_ddiv>
 23faac8:	4642      	mov	r2, r8
 23faaca:	4606      	mov	r6, r0
 23faacc:	460f      	mov	r7, r1
 23faace:	464b      	mov	r3, r9
 23faad0:	4620      	mov	r0, r4
 23faad2:	4629      	mov	r1, r5
 23faad4:	f7e7 fdac 	bl	23e2630 <__aeabi_dmul>
 23faad8:	4642      	mov	r2, r8
 23faada:	464b      	mov	r3, r9
 23faadc:	f7e7 fbf2 	bl	23e22c4 <__adddf3>
 23faae0:	4602      	mov	r2, r0
 23faae2:	460b      	mov	r3, r1
 23faae4:	4630      	mov	r0, r6
 23faae6:	4639      	mov	r1, r7
 23faae8:	f7e7 fbea 	bl	23e22c0 <__aeabi_dsub>
 23faaec:	4622      	mov	r2, r4
 23faaee:	462b      	mov	r3, r5
 23faaf0:	f7e7 fbe6 	bl	23e22c0 <__aeabi_dsub>
 23faaf4:	4602      	mov	r2, r0
 23faaf6:	460b      	mov	r3, r1
 23faaf8:	2000      	movs	r0, #0
 23faafa:	495a      	ldr	r1, [pc, #360]	; (23fac64 <__ieee754_pow+0x91c>)
 23faafc:	f7e7 fbe0 	bl	23e22c0 <__aeabi_dsub>
 23fab00:	448b      	add	fp, r1
 23fab02:	4602      	mov	r2, r0
 23fab04:	460b      	mov	r3, r1
 23fab06:	f5bb 1f80 	cmp.w	fp, #1048576	; 0x100000
 23fab0a:	f2c0 816c 	blt.w	23fade6 <__ieee754_pow+0xa9e>
 23fab0e:	4659      	mov	r1, fp
 23fab10:	ec53 2b19 	vmov	r2, r3, d9
 23fab14:	f7e7 fd8c 	bl	23e2630 <__aeabi_dmul>
 23fab18:	ec41 0b10 	vmov	d0, r0, r1
 23fab1c:	e442      	b.n	23fa3a4 <__ieee754_pow+0x5c>
 23fab1e:	ec47 6b10 	vmov	d0, r6, r7
 23fab22:	9200      	str	r2, [sp, #0]
 23fab24:	f7ff f938 	bl	23f9d98 <fabs>
 23fab28:	9a00      	ldr	r2, [sp, #0]
 23fab2a:	2a00      	cmp	r2, #0
 23fab2c:	f47f acbd 	bne.w	23fa4aa <__ieee754_pow+0x162>
 23fab30:	f029 4340 	bic.w	r3, r9, #3221225472	; 0xc0000000
 23fab34:	4a4b      	ldr	r2, [pc, #300]	; (23fac64 <__ieee754_pow+0x91c>)
 23fab36:	4293      	cmp	r3, r2
 23fab38:	d003      	beq.n	23fab42 <__ieee754_pow+0x7fa>
 23fab3a:	f1b8 0f00 	cmp.w	r8, #0
 23fab3e:	f47f acb4 	bne.w	23fa4aa <__ieee754_pow+0x162>
 23fab42:	2300      	movs	r3, #0
 23fab44:	9300      	str	r3, [sp, #0]
 23fab46:	f1bb 0f00 	cmp.w	fp, #0
 23fab4a:	da07      	bge.n	23fab5c <__ieee754_pow+0x814>
 23fab4c:	2000      	movs	r0, #0
 23fab4e:	4945      	ldr	r1, [pc, #276]	; (23fac64 <__ieee754_pow+0x91c>)
 23fab50:	ec53 2b10 	vmov	r2, r3, d0
 23fab54:	f7e7 fe96 	bl	23e2884 <__aeabi_ddiv>
 23fab58:	ec41 0b10 	vmov	d0, r0, r1
 23fab5c:	f1b9 0f00 	cmp.w	r9, #0
 23fab60:	f6bf ac20 	bge.w	23fa3a4 <__ieee754_pow+0x5c>
 23fab64:	4b40      	ldr	r3, [pc, #256]	; (23fac68 <__ieee754_pow+0x920>)
 23fab66:	9a00      	ldr	r2, [sp, #0]
 23fab68:	4443      	add	r3, r8
 23fab6a:	4313      	orrs	r3, r2
 23fab6c:	f040 812d 	bne.w	23fadca <__ieee754_pow+0xa82>
 23fab70:	ec53 2b10 	vmov	r2, r3, d0
 23fab74:	e49b      	b.n	23fa4ae <__ieee754_pow+0x166>
 23fab76:	f1bb 0f00 	cmp.w	fp, #0
 23fab7a:	f6ff ac57 	blt.w	23fa42c <__ieee754_pow+0xe4>
 23fab7e:	ed9f 0b30 	vldr	d0, [pc, #192]	; 23fac40 <__ieee754_pow+0x8f8>
 23fab82:	e40f      	b.n	23fa3a4 <__ieee754_pow+0x5c>
 23fab84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23fab88:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 23fac70 <__ieee754_pow+0x928>
 23fab8c:	4563      	cmp	r3, ip
 23fab8e:	f340 80f0 	ble.w	23fad72 <__ieee754_pow+0xa2a>
 23fab92:	4b36      	ldr	r3, [pc, #216]	; (23fac6c <__ieee754_pow+0x924>)
 23fab94:	440b      	add	r3, r1
 23fab96:	4303      	orrs	r3, r0
 23fab98:	d10a      	bne.n	23fabb0 <__ieee754_pow+0x868>
 23fab9a:	4632      	mov	r2, r6
 23fab9c:	463b      	mov	r3, r7
 23fab9e:	f7e7 fb8f 	bl	23e22c0 <__aeabi_dsub>
 23faba2:	4642      	mov	r2, r8
 23faba4:	464b      	mov	r3, r9
 23faba6:	f7e7 ffc9 	bl	23e2b3c <__aeabi_dcmpge>
 23fabaa:	2800      	cmp	r0, #0
 23fabac:	f43f aecc 	beq.w	23fa948 <__ieee754_pow+0x600>
 23fabb0:	a325      	add	r3, pc, #148	; (adr r3, 23fac48 <__ieee754_pow+0x900>)
 23fabb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fabb6:	ec51 0b19 	vmov	r0, r1, d9
 23fabba:	f7e7 fd39 	bl	23e2630 <__aeabi_dmul>
 23fabbe:	a322      	add	r3, pc, #136	; (adr r3, 23fac48 <__ieee754_pow+0x900>)
 23fabc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fabc4:	f7e7 fd34 	bl	23e2630 <__aeabi_dmul>
 23fabc8:	ec41 0b10 	vmov	d0, r0, r1
 23fabcc:	f7ff bbea 	b.w	23fa3a4 <__ieee754_pow+0x5c>
 23fabd0:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 23fac50 <__ieee754_pow+0x908>
 23fabd4:	eeb0 9a47 	vmov.f32	s18, s14
 23fabd8:	eef0 9a67 	vmov.f32	s19, s15
 23fabdc:	e660      	b.n	23fa8a0 <__ieee754_pow+0x558>
 23fabde:	f1bb 0f00 	cmp.w	fp, #0
 23fabe2:	dacc      	bge.n	23fab7e <__ieee754_pow+0x836>
 23fabe4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 23fabe8:	ee00 4a10 	vmov	s0, r4
 23fabec:	ee00 3a90 	vmov	s1, r3
 23fabf0:	f7ff bbd8 	b.w	23fa3a4 <__ieee754_pow+0x5c>
 23fabf4:	f3af 8000 	nop.w
 23fabf8:	652b82fe 	.word	0x652b82fe
 23fabfc:	3c971547 	.word	0x3c971547
 23fac00:	00000000 	.word	0x00000000
 23fac04:	3fe62e43 	.word	0x3fe62e43
 23fac08:	fefa39ef 	.word	0xfefa39ef
 23fac0c:	3fe62e42 	.word	0x3fe62e42
 23fac10:	0ca86c39 	.word	0x0ca86c39
 23fac14:	be205c61 	.word	0xbe205c61
 23fac18:	72bea4d0 	.word	0x72bea4d0
 23fac1c:	3e663769 	.word	0x3e663769
 23fac20:	c5d26bf1 	.word	0xc5d26bf1
 23fac24:	3ebbbd41 	.word	0x3ebbbd41
 23fac28:	af25de2c 	.word	0xaf25de2c
 23fac2c:	3f11566a 	.word	0x3f11566a
 23fac30:	16bebd93 	.word	0x16bebd93
 23fac34:	3f66c16c 	.word	0x3f66c16c
 23fac38:	5555553e 	.word	0x5555553e
 23fac3c:	3fc55555 	.word	0x3fc55555
	...
 23fac48:	c2f8f359 	.word	0xc2f8f359
 23fac4c:	01a56e1f 	.word	0x01a56e1f
 23fac50:	00000000 	.word	0x00000000
 23fac54:	3ff00000 	.word	0x3ff00000
 23fac58:	408fffff 	.word	0x408fffff
 23fac5c:	bf700000 	.word	0xbf700000
 23fac60:	000fffff 	.word	0x000fffff
 23fac64:	3ff00000 	.word	0x3ff00000
 23fac68:	c0100000 	.word	0xc0100000
 23fac6c:	3f6f3400 	.word	0x3f6f3400
 23fac70:	4090cbff 	.word	0x4090cbff
 23fac74:	4598      	cmp	r8, r3
 23fac76:	f6ff af7e 	blt.w	23fab76 <__ieee754_pow+0x82e>
 23fac7a:	4b79      	ldr	r3, [pc, #484]	; (23fae60 <__ieee754_pow+0xb18>)
 23fac7c:	4598      	cmp	r8, r3
 23fac7e:	f73f abd1 	bgt.w	23fa424 <__ieee754_pow+0xdc>
 23fac82:	2200      	movs	r2, #0
 23fac84:	4b76      	ldr	r3, [pc, #472]	; (23fae60 <__ieee754_pow+0xb18>)
 23fac86:	ec51 0b10 	vmov	r0, r1, d0
 23fac8a:	f7e7 fb19 	bl	23e22c0 <__aeabi_dsub>
 23fac8e:	4606      	mov	r6, r0
 23fac90:	460f      	mov	r7, r1
 23fac92:	a363      	add	r3, pc, #396	; (adr r3, 23fae20 <__ieee754_pow+0xad8>)
 23fac94:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fac98:	f7e7 fcca 	bl	23e2630 <__aeabi_dmul>
 23fac9c:	4682      	mov	sl, r0
 23fac9e:	468b      	mov	fp, r1
 23faca0:	4630      	mov	r0, r6
 23faca2:	4639      	mov	r1, r7
 23faca4:	a360      	add	r3, pc, #384	; (adr r3, 23fae28 <__ieee754_pow+0xae0>)
 23faca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23facaa:	f7e7 fcc1 	bl	23e2630 <__aeabi_dmul>
 23facae:	2200      	movs	r2, #0
 23facb0:	4b6c      	ldr	r3, [pc, #432]	; (23fae64 <__ieee754_pow+0xb1c>)
 23facb2:	ec41 0b18 	vmov	d8, r0, r1
 23facb6:	4630      	mov	r0, r6
 23facb8:	4639      	mov	r1, r7
 23facba:	f7e7 fcb9 	bl	23e2630 <__aeabi_dmul>
 23facbe:	4602      	mov	r2, r0
 23facc0:	460b      	mov	r3, r1
 23facc2:	a15b      	add	r1, pc, #364	; (adr r1, 23fae30 <__ieee754_pow+0xae8>)
 23facc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 23facc8:	f7e7 fafa 	bl	23e22c0 <__aeabi_dsub>
 23faccc:	4632      	mov	r2, r6
 23facce:	463b      	mov	r3, r7
 23facd0:	f7e7 fcae 	bl	23e2630 <__aeabi_dmul>
 23facd4:	4602      	mov	r2, r0
 23facd6:	460b      	mov	r3, r1
 23facd8:	2000      	movs	r0, #0
 23facda:	4963      	ldr	r1, [pc, #396]	; (23fae68 <__ieee754_pow+0xb20>)
 23facdc:	f7e7 faf0 	bl	23e22c0 <__aeabi_dsub>
 23face0:	4680      	mov	r8, r0
 23face2:	4689      	mov	r9, r1
 23face4:	4632      	mov	r2, r6
 23face6:	463b      	mov	r3, r7
 23face8:	4630      	mov	r0, r6
 23facea:	4639      	mov	r1, r7
 23facec:	f7e7 fca0 	bl	23e2630 <__aeabi_dmul>
 23facf0:	4602      	mov	r2, r0
 23facf2:	460b      	mov	r3, r1
 23facf4:	4640      	mov	r0, r8
 23facf6:	4649      	mov	r1, r9
 23facf8:	f7e7 fc9a 	bl	23e2630 <__aeabi_dmul>
 23facfc:	a34e      	add	r3, pc, #312	; (adr r3, 23fae38 <__ieee754_pow+0xaf0>)
 23facfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fad02:	f7e7 fc95 	bl	23e2630 <__aeabi_dmul>
 23fad06:	4602      	mov	r2, r0
 23fad08:	460b      	mov	r3, r1
 23fad0a:	ec51 0b18 	vmov	r0, r1, d8
 23fad0e:	f7e7 fad7 	bl	23e22c0 <__aeabi_dsub>
 23fad12:	4606      	mov	r6, r0
 23fad14:	460f      	mov	r7, r1
 23fad16:	4650      	mov	r0, sl
 23fad18:	4659      	mov	r1, fp
 23fad1a:	4632      	mov	r2, r6
 23fad1c:	463b      	mov	r3, r7
 23fad1e:	f7e7 fad1 	bl	23e22c4 <__adddf3>
 23fad22:	2000      	movs	r0, #0
 23fad24:	4652      	mov	r2, sl
 23fad26:	465b      	mov	r3, fp
 23fad28:	4682      	mov	sl, r0
 23fad2a:	468b      	mov	fp, r1
 23fad2c:	e564      	b.n	23fa7f8 <__ieee754_pow+0x4b0>
 23fad2e:	4632      	mov	r2, r6
 23fad30:	463b      	mov	r3, r7
 23fad32:	4630      	mov	r0, r6
 23fad34:	4639      	mov	r1, r7
 23fad36:	f7e7 fc7b 	bl	23e2630 <__aeabi_dmul>
 23fad3a:	ec41 0b10 	vmov	d0, r0, r1
 23fad3e:	f7ff bb31 	b.w	23fa3a4 <__ieee754_pow+0x5c>
 23fad42:	2000      	movs	r0, #0
 23fad44:	4946      	ldr	r1, [pc, #280]	; (23fae60 <__ieee754_pow+0xb18>)
 23fad46:	4632      	mov	r2, r6
 23fad48:	463b      	mov	r3, r7
 23fad4a:	f7e7 fd9b 	bl	23e2884 <__aeabi_ddiv>
 23fad4e:	ec41 0b10 	vmov	d0, r0, r1
 23fad52:	f7ff bb27 	b.w	23fa3a4 <__ieee754_pow+0x5c>
 23fad56:	2b00      	cmp	r3, #0
 23fad58:	f47f aee1 	bne.w	23fab1e <__ieee754_pow+0x7d6>
 23fad5c:	f1c1 0114 	rsb	r1, r1, #20
 23fad60:	fa4a f001 	asr.w	r0, sl, r1
 23fad64:	fa00 f101 	lsl.w	r1, r0, r1
 23fad68:	4551      	cmp	r1, sl
 23fad6a:	d04d      	beq.n	23fae08 <__ieee754_pow+0xac0>
 23fad6c:	9300      	str	r3, [sp, #0]
 23fad6e:	f7ff bb27 	b.w	23fa3c0 <__ieee754_pow+0x78>
 23fad72:	4a3d      	ldr	r2, [pc, #244]	; (23fae68 <__ieee754_pow+0xb20>)
 23fad74:	4293      	cmp	r3, r2
 23fad76:	dc4e      	bgt.n	23fae16 <__ieee754_pow+0xace>
 23fad78:	e9dd 2300 	ldrd	r2, r3, [sp]
 23fad7c:	4693      	mov	fp, r2
 23fad7e:	4692      	mov	sl, r2
 23fad80:	e614      	b.n	23fa9ac <__ieee754_pow+0x664>
 23fad82:	a32f      	add	r3, pc, #188	; (adr r3, 23fae40 <__ieee754_pow+0xaf8>)
 23fad84:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fad88:	ec51 0b19 	vmov	r0, r1, d9
 23fad8c:	f7e7 fc50 	bl	23e2630 <__aeabi_dmul>
 23fad90:	a32b      	add	r3, pc, #172	; (adr r3, 23fae40 <__ieee754_pow+0xaf8>)
 23fad92:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fad96:	f7e7 fc4b 	bl	23e2630 <__aeabi_dmul>
 23fad9a:	ec41 0b10 	vmov	d0, r0, r1
 23fad9e:	f7ff bb01 	b.w	23fa3a4 <__ieee754_pow+0x5c>
 23fada2:	ed9f 7b29 	vldr	d7, [pc, #164]	; 23fae48 <__ieee754_pow+0xb00>
 23fada6:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 23fadaa:	eeb0 da47 	vmov.f32	s26, s14
 23fadae:	eef0 da67 	vmov.f32	s27, s15
 23fadb2:	ed9f 7b27 	vldr	d7, [pc, #156]	; 23fae50 <__ieee754_pow+0xb08>
 23fadb6:	eeb0 ca47 	vmov.f32	s24, s14
 23fadba:	eef0 ca67 	vmov.f32	s25, s15
 23fadbe:	ed9f 7b26 	vldr	d7, [pc, #152]	; 23fae58 <__ieee754_pow+0xb10>
 23fadc2:	ec51 0b17 	vmov	r0, r1, d7
 23fadc6:	f7ff bbcc 	b.w	23fa562 <__ieee754_pow+0x21a>
 23fadca:	9b00      	ldr	r3, [sp, #0]
 23fadcc:	2b01      	cmp	r3, #1
 23fadce:	f47f aae9 	bne.w	23fa3a4 <__ieee754_pow+0x5c>
 23fadd2:	ee10 1a90 	vmov	r1, s1
 23fadd6:	ee10 2a10 	vmov	r2, s0
 23fadda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fadde:	ec43 2b10 	vmov	d0, r2, r3
 23fade2:	f7ff badf 	b.w	23fa3a4 <__ieee754_pow+0x5c>
 23fade6:	4650      	mov	r0, sl
 23fade8:	ec43 2b10 	vmov	d0, r2, r3
 23fadec:	f7fe ffe0 	bl	23f9db0 <scalbn>
 23fadf0:	ec51 0b10 	vmov	r0, r1, d0
 23fadf4:	e68c      	b.n	23fab10 <__ieee754_pow+0x7c8>
 23fadf6:	ec47 6b10 	vmov	d0, r6, r7
 23fadfa:	b007      	add	sp, #28
 23fadfc:	ecbd 8b0c 	vpop	{d8-d13}
 23fae00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fae04:	f000 ba5a 	b.w	23fb2bc <__ieee754_sqrt>
 23fae08:	f000 0001 	and.w	r0, r0, #1
 23fae0c:	f1c0 0302 	rsb	r3, r0, #2
 23fae10:	9300      	str	r3, [sp, #0]
 23fae12:	f7ff bad5 	b.w	23fa3c0 <__ieee754_pow+0x78>
 23fae16:	151b      	asrs	r3, r3, #20
 23fae18:	e598      	b.n	23fa94c <__ieee754_pow+0x604>
 23fae1a:	bf00      	nop
 23fae1c:	f3af 8000 	nop.w
 23fae20:	60000000 	.word	0x60000000
 23fae24:	3ff71547 	.word	0x3ff71547
 23fae28:	f85ddf44 	.word	0xf85ddf44
 23fae2c:	3e54ae0b 	.word	0x3e54ae0b
 23fae30:	55555555 	.word	0x55555555
 23fae34:	3fd55555 	.word	0x3fd55555
 23fae38:	652b82fe 	.word	0x652b82fe
 23fae3c:	3ff71547 	.word	0x3ff71547
 23fae40:	8800759c 	.word	0x8800759c
 23fae44:	7e37e43c 	.word	0x7e37e43c
 23fae48:	40000000 	.word	0x40000000
 23fae4c:	3fe2b803 	.word	0x3fe2b803
 23fae50:	43cfd006 	.word	0x43cfd006
 23fae54:	3e4cfdeb 	.word	0x3e4cfdeb
 23fae58:	00000000 	.word	0x00000000
 23fae5c:	3ff80000 	.word	0x3ff80000
 23fae60:	3ff00000 	.word	0x3ff00000
 23fae64:	3fd00000 	.word	0x3fd00000
 23fae68:	3fe00000 	.word	0x3fe00000
 23fae6c:	00000000 	.word	0x00000000

023fae70 <__ieee754_rem_pio2>:
 23fae70:	ec53 2b10 	vmov	r2, r3, d0
 23fae74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fae78:	4991      	ldr	r1, [pc, #580]	; (23fb0c0 <__ieee754_rem_pio2+0x250>)
 23fae7a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 23fae7e:	4604      	mov	r4, r0
 23fae80:	428d      	cmp	r5, r1
 23fae82:	ed2d 8b06 	vpush	{d8-d10}
 23fae86:	b08b      	sub	sp, #44	; 0x2c
 23fae88:	f340 808c 	ble.w	23fafa4 <__ieee754_rem_pio2+0x134>
 23fae8c:	498d      	ldr	r1, [pc, #564]	; (23fb0c4 <__ieee754_rem_pio2+0x254>)
 23fae8e:	461f      	mov	r7, r3
 23fae90:	428d      	cmp	r5, r1
 23fae92:	dc2b      	bgt.n	23faeec <__ieee754_rem_pio2+0x7c>
 23fae94:	2f00      	cmp	r7, #0
 23fae96:	4619      	mov	r1, r3
 23fae98:	ee10 0a10 	vmov	r0, s0
 23fae9c:	a37e      	add	r3, pc, #504	; (adr r3, 23fb098 <__ieee754_rem_pio2+0x228>)
 23fae9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23faea2:	f340 81b8 	ble.w	23fb216 <__ieee754_rem_pio2+0x3a6>
 23faea6:	f7e7 fa0b 	bl	23e22c0 <__aeabi_dsub>
 23faeaa:	4b87      	ldr	r3, [pc, #540]	; (23fb0c8 <__ieee754_rem_pio2+0x258>)
 23faeac:	4680      	mov	r8, r0
 23faeae:	4689      	mov	r9, r1
 23faeb0:	429d      	cmp	r5, r3
 23faeb2:	f000 808f 	beq.w	23fafd4 <__ieee754_rem_pio2+0x164>
 23faeb6:	2601      	movs	r6, #1
 23faeb8:	a379      	add	r3, pc, #484	; (adr r3, 23fb0a0 <__ieee754_rem_pio2+0x230>)
 23faeba:	e9d3 2300 	ldrd	r2, r3, [r3]
 23faebe:	f7e7 f9ff 	bl	23e22c0 <__aeabi_dsub>
 23faec2:	4602      	mov	r2, r0
 23faec4:	460b      	mov	r3, r1
 23faec6:	4640      	mov	r0, r8
 23faec8:	4649      	mov	r1, r9
 23faeca:	e9c4 2300 	strd	r2, r3, [r4]
 23faece:	f7e7 f9f7 	bl	23e22c0 <__aeabi_dsub>
 23faed2:	a373      	add	r3, pc, #460	; (adr r3, 23fb0a0 <__ieee754_rem_pio2+0x230>)
 23faed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23faed8:	f7e7 f9f2 	bl	23e22c0 <__aeabi_dsub>
 23faedc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23faee0:	4630      	mov	r0, r6
 23faee2:	b00b      	add	sp, #44	; 0x2c
 23faee4:	ecbd 8b06 	vpop	{d8-d10}
 23faee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23faeec:	4977      	ldr	r1, [pc, #476]	; (23fb0cc <__ieee754_rem_pio2+0x25c>)
 23faeee:	428d      	cmp	r5, r1
 23faef0:	f340 8092 	ble.w	23fb018 <__ieee754_rem_pio2+0x1a8>
 23faef4:	4976      	ldr	r1, [pc, #472]	; (23fb0d0 <__ieee754_rem_pio2+0x260>)
 23faef6:	428d      	cmp	r5, r1
 23faef8:	dc61      	bgt.n	23fafbe <__ieee754_rem_pio2+0x14e>
 23faefa:	152e      	asrs	r6, r5, #20
 23faefc:	ee10 0a10 	vmov	r0, s0
 23faf00:	4690      	mov	r8, r2
 23faf02:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 23faf06:	eba5 5106 	sub.w	r1, r5, r6, lsl #20
 23faf0a:	4689      	mov	r9, r1
 23faf0c:	f7e7 fe40 	bl	23e2b90 <__aeabi_d2iz>
 23faf10:	f7e7 fb24 	bl	23e255c <__aeabi_i2d>
 23faf14:	4602      	mov	r2, r0
 23faf16:	460b      	mov	r3, r1
 23faf18:	4640      	mov	r0, r8
 23faf1a:	4649      	mov	r1, r9
 23faf1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 23faf20:	f7e7 f9ce 	bl	23e22c0 <__aeabi_dsub>
 23faf24:	2200      	movs	r2, #0
 23faf26:	4b6b      	ldr	r3, [pc, #428]	; (23fb0d4 <__ieee754_rem_pio2+0x264>)
 23faf28:	f7e7 fb82 	bl	23e2630 <__aeabi_dmul>
 23faf2c:	4689      	mov	r9, r1
 23faf2e:	4680      	mov	r8, r0
 23faf30:	f7e7 fe2e 	bl	23e2b90 <__aeabi_d2iz>
 23faf34:	4605      	mov	r5, r0
 23faf36:	f7e7 fb11 	bl	23e255c <__aeabi_i2d>
 23faf3a:	4602      	mov	r2, r0
 23faf3c:	460b      	mov	r3, r1
 23faf3e:	4640      	mov	r0, r8
 23faf40:	4649      	mov	r1, r9
 23faf42:	e9cd 2306 	strd	r2, r3, [sp, #24]
 23faf46:	f7e7 f9bb 	bl	23e22c0 <__aeabi_dsub>
 23faf4a:	2200      	movs	r2, #0
 23faf4c:	4b61      	ldr	r3, [pc, #388]	; (23fb0d4 <__ieee754_rem_pio2+0x264>)
 23faf4e:	f7e7 fb6f 	bl	23e2630 <__aeabi_dmul>
 23faf52:	4602      	mov	r2, r0
 23faf54:	460b      	mov	r3, r1
 23faf56:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23faf5a:	2200      	movs	r2, #0
 23faf5c:	2300      	movs	r3, #0
 23faf5e:	f7e7 fdcf 	bl	23e2b00 <__aeabi_dcmpeq>
 23faf62:	2800      	cmp	r0, #0
 23faf64:	f000 8155 	beq.w	23fb212 <__ieee754_rem_pio2+0x3a2>
 23faf68:	2d00      	cmp	r5, #0
 23faf6a:	bf0c      	ite	eq
 23faf6c:	2301      	moveq	r3, #1
 23faf6e:	2302      	movne	r3, #2
 23faf70:	4959      	ldr	r1, [pc, #356]	; (23fb0d8 <__ieee754_rem_pio2+0x268>)
 23faf72:	4632      	mov	r2, r6
 23faf74:	a804      	add	r0, sp, #16
 23faf76:	9101      	str	r1, [sp, #4]
 23faf78:	2102      	movs	r1, #2
 23faf7a:	9100      	str	r1, [sp, #0]
 23faf7c:	4621      	mov	r1, r4
 23faf7e:	f000 fb9f 	bl	23fb6c0 <__kernel_rem_pio2>
 23faf82:	2f00      	cmp	r7, #0
 23faf84:	4606      	mov	r6, r0
 23faf86:	daab      	bge.n	23faee0 <__ieee754_rem_pio2+0x70>
 23faf88:	6861      	ldr	r1, [r4, #4]
 23faf8a:	4246      	negs	r6, r0
 23faf8c:	6822      	ldr	r2, [r4, #0]
 23faf8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23faf92:	68e1      	ldr	r1, [r4, #12]
 23faf94:	e9c4 2300 	strd	r2, r3, [r4]
 23faf98:	68a2      	ldr	r2, [r4, #8]
 23faf9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23faf9e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 23fafa2:	e79d      	b.n	23faee0 <__ieee754_rem_pio2+0x70>
 23fafa4:	2000      	movs	r0, #0
 23fafa6:	2100      	movs	r1, #0
 23fafa8:	2600      	movs	r6, #0
 23fafaa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fafae:	4630      	mov	r0, r6
 23fafb0:	ed84 0b00 	vstr	d0, [r4]
 23fafb4:	b00b      	add	sp, #44	; 0x2c
 23fafb6:	ecbd 8b06 	vpop	{d8-d10}
 23fafba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fafbe:	ee10 0a10 	vmov	r0, s0
 23fafc2:	4619      	mov	r1, r3
 23fafc4:	f7e7 f97c 	bl	23e22c0 <__aeabi_dsub>
 23fafc8:	2600      	movs	r6, #0
 23fafca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fafce:	e9c4 0100 	strd	r0, r1, [r4]
 23fafd2:	e785      	b.n	23faee0 <__ieee754_rem_pio2+0x70>
 23fafd4:	a334      	add	r3, pc, #208	; (adr r3, 23fb0a8 <__ieee754_rem_pio2+0x238>)
 23fafd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fafda:	f7e7 f971 	bl	23e22c0 <__aeabi_dsub>
 23fafde:	4680      	mov	r8, r0
 23fafe0:	4689      	mov	r9, r1
 23fafe2:	2601      	movs	r6, #1
 23fafe4:	a332      	add	r3, pc, #200	; (adr r3, 23fb0b0 <__ieee754_rem_pio2+0x240>)
 23fafe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fafea:	f7e7 f969 	bl	23e22c0 <__aeabi_dsub>
 23fafee:	4602      	mov	r2, r0
 23faff0:	460b      	mov	r3, r1
 23faff2:	4640      	mov	r0, r8
 23faff4:	4649      	mov	r1, r9
 23faff6:	e9c4 2300 	strd	r2, r3, [r4]
 23faffa:	f7e7 f961 	bl	23e22c0 <__aeabi_dsub>
 23faffe:	a32c      	add	r3, pc, #176	; (adr r3, 23fb0b0 <__ieee754_rem_pio2+0x240>)
 23fb000:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb004:	f7e7 f95c 	bl	23e22c0 <__aeabi_dsub>
 23fb008:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fb00c:	4630      	mov	r0, r6
 23fb00e:	b00b      	add	sp, #44	; 0x2c
 23fb010:	ecbd 8b06 	vpop	{d8-d10}
 23fb014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb018:	f7fe febe 	bl	23f9d98 <fabs>
 23fb01c:	ee10 0a10 	vmov	r0, s0
 23fb020:	ec59 8b10 	vmov	r8, r9, d0
 23fb024:	a324      	add	r3, pc, #144	; (adr r3, 23fb0b8 <__ieee754_rem_pio2+0x248>)
 23fb026:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb02a:	4649      	mov	r1, r9
 23fb02c:	f7e7 fb00 	bl	23e2630 <__aeabi_dmul>
 23fb030:	2200      	movs	r2, #0
 23fb032:	4b2a      	ldr	r3, [pc, #168]	; (23fb0dc <__ieee754_rem_pio2+0x26c>)
 23fb034:	f7e7 f946 	bl	23e22c4 <__adddf3>
 23fb038:	f7e7 fdaa 	bl	23e2b90 <__aeabi_d2iz>
 23fb03c:	4606      	mov	r6, r0
 23fb03e:	f7e7 fa8d 	bl	23e255c <__aeabi_i2d>
 23fb042:	4602      	mov	r2, r0
 23fb044:	460b      	mov	r3, r1
 23fb046:	ec43 2b18 	vmov	d8, r2, r3
 23fb04a:	a313      	add	r3, pc, #76	; (adr r3, 23fb098 <__ieee754_rem_pio2+0x228>)
 23fb04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb050:	f7e7 faee 	bl	23e2630 <__aeabi_dmul>
 23fb054:	4602      	mov	r2, r0
 23fb056:	460b      	mov	r3, r1
 23fb058:	4640      	mov	r0, r8
 23fb05a:	4649      	mov	r1, r9
 23fb05c:	eeb0 9a48 	vmov.f32	s18, s16
 23fb060:	eef0 9a68 	vmov.f32	s19, s17
 23fb064:	f7e7 f92c 	bl	23e22c0 <__aeabi_dsub>
 23fb068:	4682      	mov	sl, r0
 23fb06a:	468b      	mov	fp, r1
 23fb06c:	a30c      	add	r3, pc, #48	; (adr r3, 23fb0a0 <__ieee754_rem_pio2+0x230>)
 23fb06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb072:	ec51 0b18 	vmov	r0, r1, d8
 23fb076:	f7e7 fadb 	bl	23e2630 <__aeabi_dmul>
 23fb07a:	2e1f      	cmp	r6, #31
 23fb07c:	ec41 0b18 	vmov	d8, r0, r1
 23fb080:	dc30      	bgt.n	23fb0e4 <__ieee754_rem_pio2+0x274>
 23fb082:	4b17      	ldr	r3, [pc, #92]	; (23fb0e0 <__ieee754_rem_pio2+0x270>)
 23fb084:	1e72      	subs	r2, r6, #1
 23fb086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23fb08a:	42ab      	cmp	r3, r5
 23fb08c:	d02a      	beq.n	23fb0e4 <__ieee754_rem_pio2+0x274>
 23fb08e:	4602      	mov	r2, r0
 23fb090:	460b      	mov	r3, r1
 23fb092:	e09d      	b.n	23fb1d0 <__ieee754_rem_pio2+0x360>
 23fb094:	f3af 8000 	nop.w
 23fb098:	54400000 	.word	0x54400000
 23fb09c:	3ff921fb 	.word	0x3ff921fb
 23fb0a0:	1a626331 	.word	0x1a626331
 23fb0a4:	3dd0b461 	.word	0x3dd0b461
 23fb0a8:	1a600000 	.word	0x1a600000
 23fb0ac:	3dd0b461 	.word	0x3dd0b461
 23fb0b0:	2e037073 	.word	0x2e037073
 23fb0b4:	3ba3198a 	.word	0x3ba3198a
 23fb0b8:	6dc9c883 	.word	0x6dc9c883
 23fb0bc:	3fe45f30 	.word	0x3fe45f30
 23fb0c0:	3fe921fb 	.word	0x3fe921fb
 23fb0c4:	4002d97b 	.word	0x4002d97b
 23fb0c8:	3ff921fb 	.word	0x3ff921fb
 23fb0cc:	413921fb 	.word	0x413921fb
 23fb0d0:	7fefffff 	.word	0x7fefffff
 23fb0d4:	41700000 	.word	0x41700000
 23fb0d8:	023ffc2c 	.word	0x023ffc2c
 23fb0dc:	3fe00000 	.word	0x3fe00000
 23fb0e0:	023ffbac 	.word	0x023ffbac
 23fb0e4:	152b      	asrs	r3, r5, #20
 23fb0e6:	4650      	mov	r0, sl
 23fb0e8:	4659      	mov	r1, fp
 23fb0ea:	9303      	str	r3, [sp, #12]
 23fb0ec:	ec53 2b18 	vmov	r2, r3, d8
 23fb0f0:	f7e7 f8e6 	bl	23e22c0 <__aeabi_dsub>
 23fb0f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 23fb0f8:	4680      	mov	r8, r0
 23fb0fa:	4689      	mov	r9, r1
 23fb0fc:	ebc3 5515 	rsb	r5, r3, r5, lsr #20
 23fb100:	2d10      	cmp	r5, #16
 23fb102:	dd6b      	ble.n	23fb1dc <__ieee754_rem_pio2+0x36c>
 23fb104:	a364      	add	r3, pc, #400	; (adr r3, 23fb298 <__ieee754_rem_pio2+0x428>)
 23fb106:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb10a:	ec51 0b19 	vmov	r0, r1, d9
 23fb10e:	f7e7 fa8f 	bl	23e2630 <__aeabi_dmul>
 23fb112:	4680      	mov	r8, r0
 23fb114:	4689      	mov	r9, r1
 23fb116:	4650      	mov	r0, sl
 23fb118:	4642      	mov	r2, r8
 23fb11a:	4659      	mov	r1, fp
 23fb11c:	464b      	mov	r3, r9
 23fb11e:	f7e7 f8cf 	bl	23e22c0 <__aeabi_dsub>
 23fb122:	4602      	mov	r2, r0
 23fb124:	460b      	mov	r3, r1
 23fb126:	4650      	mov	r0, sl
 23fb128:	4659      	mov	r1, fp
 23fb12a:	4692      	mov	sl, r2
 23fb12c:	469b      	mov	fp, r3
 23fb12e:	ec43 2b1a 	vmov	d10, r2, r3
 23fb132:	f7e7 f8c5 	bl	23e22c0 <__aeabi_dsub>
 23fb136:	4642      	mov	r2, r8
 23fb138:	464b      	mov	r3, r9
 23fb13a:	f7e7 f8c1 	bl	23e22c0 <__aeabi_dsub>
 23fb13e:	4680      	mov	r8, r0
 23fb140:	4689      	mov	r9, r1
 23fb142:	a357      	add	r3, pc, #348	; (adr r3, 23fb2a0 <__ieee754_rem_pio2+0x430>)
 23fb144:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb148:	ec51 0b19 	vmov	r0, r1, d9
 23fb14c:	f7e7 fa70 	bl	23e2630 <__aeabi_dmul>
 23fb150:	4642      	mov	r2, r8
 23fb152:	464b      	mov	r3, r9
 23fb154:	f7e7 f8b4 	bl	23e22c0 <__aeabi_dsub>
 23fb158:	4602      	mov	r2, r0
 23fb15a:	460b      	mov	r3, r1
 23fb15c:	4650      	mov	r0, sl
 23fb15e:	4659      	mov	r1, fp
 23fb160:	ec43 2b18 	vmov	d8, r2, r3
 23fb164:	f7e7 f8ac 	bl	23e22c0 <__aeabi_dsub>
 23fb168:	9a03      	ldr	r2, [sp, #12]
 23fb16a:	f3c1 530a 	ubfx	r3, r1, #20, #11
 23fb16e:	4680      	mov	r8, r0
 23fb170:	4689      	mov	r9, r1
 23fb172:	1ad3      	subs	r3, r2, r3
 23fb174:	2b31      	cmp	r3, #49	; 0x31
 23fb176:	dd31      	ble.n	23fb1dc <__ieee754_rem_pio2+0x36c>
 23fb178:	a34c      	add	r3, pc, #304	; (adr r3, 23fb2ac <__ieee754_rem_pio2+0x43c>)
 23fb17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb17e:	ec51 0b19 	vmov	r0, r1, d9
 23fb182:	f7e7 fa55 	bl	23e2630 <__aeabi_dmul>
 23fb186:	4680      	mov	r8, r0
 23fb188:	4689      	mov	r9, r1
 23fb18a:	4642      	mov	r2, r8
 23fb18c:	464b      	mov	r3, r9
 23fb18e:	ec51 0b1a 	vmov	r0, r1, d10
 23fb192:	f7e7 f895 	bl	23e22c0 <__aeabi_dsub>
 23fb196:	4682      	mov	sl, r0
 23fb198:	468b      	mov	fp, r1
 23fb19a:	4652      	mov	r2, sl
 23fb19c:	465b      	mov	r3, fp
 23fb19e:	ec51 0b1a 	vmov	r0, r1, d10
 23fb1a2:	f7e7 f88d 	bl	23e22c0 <__aeabi_dsub>
 23fb1a6:	4642      	mov	r2, r8
 23fb1a8:	464b      	mov	r3, r9
 23fb1aa:	f7e7 f889 	bl	23e22c0 <__aeabi_dsub>
 23fb1ae:	4680      	mov	r8, r0
 23fb1b0:	4689      	mov	r9, r1
 23fb1b2:	a340      	add	r3, pc, #256	; (adr r3, 23fb2b4 <__ieee754_rem_pio2+0x444>)
 23fb1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb1b8:	ec51 0b19 	vmov	r0, r1, d9
 23fb1bc:	f7e7 fa38 	bl	23e2630 <__aeabi_dmul>
 23fb1c0:	4642      	mov	r2, r8
 23fb1c2:	464b      	mov	r3, r9
 23fb1c4:	f7e7 f87c 	bl	23e22c0 <__aeabi_dsub>
 23fb1c8:	4602      	mov	r2, r0
 23fb1ca:	460b      	mov	r3, r1
 23fb1cc:	ec43 2b18 	vmov	d8, r2, r3
 23fb1d0:	4650      	mov	r0, sl
 23fb1d2:	4659      	mov	r1, fp
 23fb1d4:	f7e7 f874 	bl	23e22c0 <__aeabi_dsub>
 23fb1d8:	4680      	mov	r8, r0
 23fb1da:	4689      	mov	r9, r1
 23fb1dc:	4642      	mov	r2, r8
 23fb1de:	464b      	mov	r3, r9
 23fb1e0:	4650      	mov	r0, sl
 23fb1e2:	4659      	mov	r1, fp
 23fb1e4:	e9c4 8900 	strd	r8, r9, [r4]
 23fb1e8:	f7e7 f86a 	bl	23e22c0 <__aeabi_dsub>
 23fb1ec:	ec53 2b18 	vmov	r2, r3, d8
 23fb1f0:	f7e7 f866 	bl	23e22c0 <__aeabi_dsub>
 23fb1f4:	2f00      	cmp	r7, #0
 23fb1f6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fb1fa:	f6bf ae71 	bge.w	23faee0 <__ieee754_rem_pio2+0x70>
 23fb1fe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 23fb202:	4276      	negs	r6, r6
 23fb204:	e9c4 8300 	strd	r8, r3, [r4]
 23fb208:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fb20c:	e9c4 0302 	strd	r0, r3, [r4, #8]
 23fb210:	e666      	b.n	23faee0 <__ieee754_rem_pio2+0x70>
 23fb212:	2303      	movs	r3, #3
 23fb214:	e6ac      	b.n	23faf70 <__ieee754_rem_pio2+0x100>
 23fb216:	f7e7 f855 	bl	23e22c4 <__adddf3>
 23fb21a:	4b23      	ldr	r3, [pc, #140]	; (23fb2a8 <__ieee754_rem_pio2+0x438>)
 23fb21c:	4680      	mov	r8, r0
 23fb21e:	4689      	mov	r9, r1
 23fb220:	429d      	cmp	r5, r3
 23fb222:	d016      	beq.n	23fb252 <__ieee754_rem_pio2+0x3e2>
 23fb224:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 23fb228:	a319      	add	r3, pc, #100	; (adr r3, 23fb290 <__ieee754_rem_pio2+0x420>)
 23fb22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb22e:	f7e7 f849 	bl	23e22c4 <__adddf3>
 23fb232:	4602      	mov	r2, r0
 23fb234:	460b      	mov	r3, r1
 23fb236:	4640      	mov	r0, r8
 23fb238:	4649      	mov	r1, r9
 23fb23a:	e9c4 2300 	strd	r2, r3, [r4]
 23fb23e:	f7e7 f83f 	bl	23e22c0 <__aeabi_dsub>
 23fb242:	a313      	add	r3, pc, #76	; (adr r3, 23fb290 <__ieee754_rem_pio2+0x420>)
 23fb244:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb248:	f7e7 f83c 	bl	23e22c4 <__adddf3>
 23fb24c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fb250:	e646      	b.n	23faee0 <__ieee754_rem_pio2+0x70>
 23fb252:	a311      	add	r3, pc, #68	; (adr r3, 23fb298 <__ieee754_rem_pio2+0x428>)
 23fb254:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb258:	f7e7 f834 	bl	23e22c4 <__adddf3>
 23fb25c:	4680      	mov	r8, r0
 23fb25e:	4689      	mov	r9, r1
 23fb260:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 23fb264:	a30e      	add	r3, pc, #56	; (adr r3, 23fb2a0 <__ieee754_rem_pio2+0x430>)
 23fb266:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb26a:	f7e7 f82b 	bl	23e22c4 <__adddf3>
 23fb26e:	4602      	mov	r2, r0
 23fb270:	460b      	mov	r3, r1
 23fb272:	4640      	mov	r0, r8
 23fb274:	4649      	mov	r1, r9
 23fb276:	e9c4 2300 	strd	r2, r3, [r4]
 23fb27a:	f7e7 f821 	bl	23e22c0 <__aeabi_dsub>
 23fb27e:	a308      	add	r3, pc, #32	; (adr r3, 23fb2a0 <__ieee754_rem_pio2+0x430>)
 23fb280:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb284:	f7e7 f81e 	bl	23e22c4 <__adddf3>
 23fb288:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fb28c:	e628      	b.n	23faee0 <__ieee754_rem_pio2+0x70>
 23fb28e:	bf00      	nop
 23fb290:	1a626331 	.word	0x1a626331
 23fb294:	3dd0b461 	.word	0x3dd0b461
 23fb298:	1a600000 	.word	0x1a600000
 23fb29c:	3dd0b461 	.word	0x3dd0b461
 23fb2a0:	2e037073 	.word	0x2e037073
 23fb2a4:	3ba3198a 	.word	0x3ba3198a
 23fb2a8:	3ff921fb 	.word	0x3ff921fb
 23fb2ac:	2e000000 	.word	0x2e000000
 23fb2b0:	3ba3198a 	.word	0x3ba3198a
 23fb2b4:	252049c1 	.word	0x252049c1
 23fb2b8:	397b839a 	.word	0x397b839a

023fb2bc <__ieee754_sqrt>:
 23fb2bc:	495e      	ldr	r1, [pc, #376]	; (23fb438 <__ieee754_sqrt+0x17c>)
 23fb2be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fb2c2:	ec55 4b10 	vmov	r4, r5, d0
 23fb2c6:	43a9      	bics	r1, r5
 23fb2c8:	f000 8094 	beq.w	23fb3f4 <__ieee754_sqrt+0x138>
 23fb2cc:	2d00      	cmp	r5, #0
 23fb2ce:	462b      	mov	r3, r5
 23fb2d0:	ee10 2a10 	vmov	r2, s0
 23fb2d4:	dd5a      	ble.n	23fb38c <__ieee754_sqrt+0xd0>
 23fb2d6:	1528      	asrs	r0, r5, #20
 23fb2d8:	d067      	beq.n	23fb3aa <__ieee754_sqrt+0xee>
 23fb2da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 23fb2de:	07c1      	lsls	r1, r0, #31
 23fb2e0:	f2a0 37ff 	subw	r7, r0, #1023	; 0x3ff
 23fb2e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fb2e8:	d403      	bmi.n	23fb2f2 <__ieee754_sqrt+0x36>
 23fb2ea:	005b      	lsls	r3, r3, #1
 23fb2ec:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23fb2f0:	0052      	lsls	r2, r2, #1
 23fb2f2:	0fd1      	lsrs	r1, r2, #31
 23fb2f4:	2600      	movs	r6, #0
 23fb2f6:	107f      	asrs	r7, r7, #1
 23fb2f8:	f04f 0c16 	mov.w	ip, #22
 23fb2fc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 23fb300:	46b6      	mov	lr, r6
 23fb302:	0052      	lsls	r2, r2, #1
 23fb304:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 23fb308:	eb0e 0001 	add.w	r0, lr, r1
 23fb30c:	4298      	cmp	r0, r3
 23fb30e:	dc03      	bgt.n	23fb318 <__ieee754_sqrt+0x5c>
 23fb310:	1a1b      	subs	r3, r3, r0
 23fb312:	eb00 0e01 	add.w	lr, r0, r1
 23fb316:	440e      	add	r6, r1
 23fb318:	005b      	lsls	r3, r3, #1
 23fb31a:	f1bc 0c01 	subs.w	ip, ip, #1
 23fb31e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23fb322:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23fb326:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23fb32a:	d1ed      	bne.n	23fb308 <__ieee754_sqrt+0x4c>
 23fb32c:	4665      	mov	r5, ip
 23fb32e:	2420      	movs	r4, #32
 23fb330:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 23fb334:	e014      	b.n	23fb360 <__ieee754_sqrt+0xa4>
 23fb336:	d10a      	bne.n	23fb34e <__ieee754_sqrt+0x92>
 23fb338:	4290      	cmp	r0, r2
 23fb33a:	d808      	bhi.n	23fb34e <__ieee754_sqrt+0x92>
 23fb33c:	2800      	cmp	r0, #0
 23fb33e:	eb00 0c01 	add.w	ip, r0, r1
 23fb342:	db1d      	blt.n	23fb380 <__ieee754_sqrt+0xc4>
 23fb344:	46f0      	mov	r8, lr
 23fb346:	2300      	movs	r3, #0
 23fb348:	1a12      	subs	r2, r2, r0
 23fb34a:	440d      	add	r5, r1
 23fb34c:	46c6      	mov	lr, r8
 23fb34e:	0fd0      	lsrs	r0, r2, #31
 23fb350:	3c01      	subs	r4, #1
 23fb352:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23fb356:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 23fb35a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23fb35e:	d033      	beq.n	23fb3c8 <__ieee754_sqrt+0x10c>
 23fb360:	4573      	cmp	r3, lr
 23fb362:	eb01 000c 	add.w	r0, r1, ip
 23fb366:	dde6      	ble.n	23fb336 <__ieee754_sqrt+0x7a>
 23fb368:	2800      	cmp	r0, #0
 23fb36a:	eb00 0c01 	add.w	ip, r0, r1
 23fb36e:	db07      	blt.n	23fb380 <__ieee754_sqrt+0xc4>
 23fb370:	46f0      	mov	r8, lr
 23fb372:	eba3 030e 	sub.w	r3, r3, lr
 23fb376:	4290      	cmp	r0, r2
 23fb378:	bf88      	it	hi
 23fb37a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 23fb37e:	e7e3      	b.n	23fb348 <__ieee754_sqrt+0x8c>
 23fb380:	f1bc 0f00 	cmp.w	ip, #0
 23fb384:	dbf4      	blt.n	23fb370 <__ieee754_sqrt+0xb4>
 23fb386:	f10e 0801 	add.w	r8, lr, #1
 23fb38a:	e7f2      	b.n	23fb372 <__ieee754_sqrt+0xb6>
 23fb38c:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 23fb390:	4321      	orrs	r1, r4
 23fb392:	d028      	beq.n	23fb3e6 <__ieee754_sqrt+0x12a>
 23fb394:	2d00      	cmp	r5, #0
 23fb396:	d13d      	bne.n	23fb414 <__ieee754_sqrt+0x158>
 23fb398:	4628      	mov	r0, r5
 23fb39a:	0ad1      	lsrs	r1, r2, #11
 23fb39c:	3815      	subs	r0, #21
 23fb39e:	0552      	lsls	r2, r2, #21
 23fb3a0:	460b      	mov	r3, r1
 23fb3a2:	2900      	cmp	r1, #0
 23fb3a4:	d0f9      	beq.n	23fb39a <__ieee754_sqrt+0xde>
 23fb3a6:	02cf      	lsls	r7, r1, #11
 23fb3a8:	d441      	bmi.n	23fb42e <__ieee754_sqrt+0x172>
 23fb3aa:	2400      	movs	r4, #0
 23fb3ac:	005b      	lsls	r3, r3, #1
 23fb3ae:	4625      	mov	r5, r4
 23fb3b0:	3401      	adds	r4, #1
 23fb3b2:	02de      	lsls	r6, r3, #11
 23fb3b4:	d5fa      	bpl.n	23fb3ac <__ieee754_sqrt+0xf0>
 23fb3b6:	4619      	mov	r1, r3
 23fb3b8:	4613      	mov	r3, r2
 23fb3ba:	40a2      	lsls	r2, r4
 23fb3bc:	f1c4 0420 	rsb	r4, r4, #32
 23fb3c0:	40e3      	lsrs	r3, r4
 23fb3c2:	1b40      	subs	r0, r0, r5
 23fb3c4:	430b      	orrs	r3, r1
 23fb3c6:	e788      	b.n	23fb2da <__ieee754_sqrt+0x1e>
 23fb3c8:	4313      	orrs	r3, r2
 23fb3ca:	d10e      	bne.n	23fb3ea <__ieee754_sqrt+0x12e>
 23fb3cc:	086c      	lsrs	r4, r5, #1
 23fb3ce:	07f3      	lsls	r3, r6, #31
 23fb3d0:	491a      	ldr	r1, [pc, #104]	; (23fb43c <__ieee754_sqrt+0x180>)
 23fb3d2:	bf48      	it	mi
 23fb3d4:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 23fb3d8:	eb01 0166 	add.w	r1, r1, r6, asr #1
 23fb3dc:	4622      	mov	r2, r4
 23fb3de:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 23fb3e2:	ec43 2b10 	vmov	d0, r2, r3
 23fb3e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fb3ea:	1c6a      	adds	r2, r5, #1
 23fb3ec:	d01d      	beq.n	23fb42a <__ieee754_sqrt+0x16e>
 23fb3ee:	1c6c      	adds	r4, r5, #1
 23fb3f0:	0864      	lsrs	r4, r4, #1
 23fb3f2:	e7ec      	b.n	23fb3ce <__ieee754_sqrt+0x112>
 23fb3f4:	ee10 2a10 	vmov	r2, s0
 23fb3f8:	462b      	mov	r3, r5
 23fb3fa:	ee10 0a10 	vmov	r0, s0
 23fb3fe:	4629      	mov	r1, r5
 23fb400:	f7e7 f916 	bl	23e2630 <__aeabi_dmul>
 23fb404:	4622      	mov	r2, r4
 23fb406:	462b      	mov	r3, r5
 23fb408:	f7e6 ff5c 	bl	23e22c4 <__adddf3>
 23fb40c:	ec41 0b10 	vmov	d0, r0, r1
 23fb410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fb414:	4620      	mov	r0, r4
 23fb416:	4629      	mov	r1, r5
 23fb418:	f7e6 ff52 	bl	23e22c0 <__aeabi_dsub>
 23fb41c:	4602      	mov	r2, r0
 23fb41e:	460b      	mov	r3, r1
 23fb420:	f7e7 fa30 	bl	23e2884 <__aeabi_ddiv>
 23fb424:	ec41 0b10 	vmov	d0, r0, r1
 23fb428:	e7dd      	b.n	23fb3e6 <__ieee754_sqrt+0x12a>
 23fb42a:	3601      	adds	r6, #1
 23fb42c:	e7cf      	b.n	23fb3ce <__ieee754_sqrt+0x112>
 23fb42e:	4613      	mov	r3, r2
 23fb430:	2420      	movs	r4, #32
 23fb432:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 23fb436:	e7c3      	b.n	23fb3c0 <__ieee754_sqrt+0x104>
 23fb438:	7ff00000 	.word	0x7ff00000
 23fb43c:	3fe00000 	.word	0x3fe00000

023fb440 <__kernel_cos>:
 23fb440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb444:	ec57 6b10 	vmov	r6, r7, d0
 23fb448:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
 23fb44c:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
 23fb450:	ec5b ab11 	vmov	sl, fp, d1
 23fb454:	ed2d 8b04 	vpush	{d8-d9}
 23fb458:	da71      	bge.n	23fb53e <__kernel_cos+0xfe>
 23fb45a:	ee10 0a10 	vmov	r0, s0
 23fb45e:	4639      	mov	r1, r7
 23fb460:	f7e7 fb96 	bl	23e2b90 <__aeabi_d2iz>
 23fb464:	2800      	cmp	r0, #0
 23fb466:	f000 80f6 	beq.w	23fb656 <__kernel_cos+0x216>
 23fb46a:	4632      	mov	r2, r6
 23fb46c:	463b      	mov	r3, r7
 23fb46e:	4630      	mov	r0, r6
 23fb470:	4639      	mov	r1, r7
 23fb472:	f7e7 f8dd 	bl	23e2630 <__aeabi_dmul>
 23fb476:	4604      	mov	r4, r0
 23fb478:	460d      	mov	r5, r1
 23fb47a:	a37b      	add	r3, pc, #492	; (adr r3, 23fb668 <__kernel_cos+0x228>)
 23fb47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb480:	f7e7 f8d6 	bl	23e2630 <__aeabi_dmul>
 23fb484:	a37a      	add	r3, pc, #488	; (adr r3, 23fb670 <__kernel_cos+0x230>)
 23fb486:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb48a:	f7e6 ff1b 	bl	23e22c4 <__adddf3>
 23fb48e:	4622      	mov	r2, r4
 23fb490:	462b      	mov	r3, r5
 23fb492:	f7e7 f8cd 	bl	23e2630 <__aeabi_dmul>
 23fb496:	a378      	add	r3, pc, #480	; (adr r3, 23fb678 <__kernel_cos+0x238>)
 23fb498:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb49c:	f7e6 ff10 	bl	23e22c0 <__aeabi_dsub>
 23fb4a0:	4622      	mov	r2, r4
 23fb4a2:	462b      	mov	r3, r5
 23fb4a4:	f7e7 f8c4 	bl	23e2630 <__aeabi_dmul>
 23fb4a8:	a375      	add	r3, pc, #468	; (adr r3, 23fb680 <__kernel_cos+0x240>)
 23fb4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb4ae:	f7e6 ff09 	bl	23e22c4 <__adddf3>
 23fb4b2:	4622      	mov	r2, r4
 23fb4b4:	462b      	mov	r3, r5
 23fb4b6:	f7e7 f8bb 	bl	23e2630 <__aeabi_dmul>
 23fb4ba:	a373      	add	r3, pc, #460	; (adr r3, 23fb688 <__kernel_cos+0x248>)
 23fb4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb4c0:	f7e6 fefe 	bl	23e22c0 <__aeabi_dsub>
 23fb4c4:	4622      	mov	r2, r4
 23fb4c6:	462b      	mov	r3, r5
 23fb4c8:	f7e7 f8b2 	bl	23e2630 <__aeabi_dmul>
 23fb4cc:	a370      	add	r3, pc, #448	; (adr r3, 23fb690 <__kernel_cos+0x250>)
 23fb4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb4d2:	f7e6 fef7 	bl	23e22c4 <__adddf3>
 23fb4d6:	4622      	mov	r2, r4
 23fb4d8:	462b      	mov	r3, r5
 23fb4da:	f7e7 f8a9 	bl	23e2630 <__aeabi_dmul>
 23fb4de:	ec41 0b18 	vmov	d8, r0, r1
 23fb4e2:	2200      	movs	r2, #0
 23fb4e4:	4b70      	ldr	r3, [pc, #448]	; (23fb6a8 <__kernel_cos+0x268>)
 23fb4e6:	4620      	mov	r0, r4
 23fb4e8:	4629      	mov	r1, r5
 23fb4ea:	f7e7 f8a1 	bl	23e2630 <__aeabi_dmul>
 23fb4ee:	4680      	mov	r8, r0
 23fb4f0:	4689      	mov	r9, r1
 23fb4f2:	4620      	mov	r0, r4
 23fb4f4:	4629      	mov	r1, r5
 23fb4f6:	ec53 2b18 	vmov	r2, r3, d8
 23fb4fa:	f7e7 f899 	bl	23e2630 <__aeabi_dmul>
 23fb4fe:	4604      	mov	r4, r0
 23fb500:	460d      	mov	r5, r1
 23fb502:	4652      	mov	r2, sl
 23fb504:	465b      	mov	r3, fp
 23fb506:	4630      	mov	r0, r6
 23fb508:	4639      	mov	r1, r7
 23fb50a:	f7e7 f891 	bl	23e2630 <__aeabi_dmul>
 23fb50e:	4602      	mov	r2, r0
 23fb510:	460b      	mov	r3, r1
 23fb512:	4620      	mov	r0, r4
 23fb514:	4629      	mov	r1, r5
 23fb516:	f7e6 fed3 	bl	23e22c0 <__aeabi_dsub>
 23fb51a:	4602      	mov	r2, r0
 23fb51c:	460b      	mov	r3, r1
 23fb51e:	4640      	mov	r0, r8
 23fb520:	4649      	mov	r1, r9
 23fb522:	f7e6 fecd 	bl	23e22c0 <__aeabi_dsub>
 23fb526:	4602      	mov	r2, r0
 23fb528:	460b      	mov	r3, r1
 23fb52a:	2000      	movs	r0, #0
 23fb52c:	495f      	ldr	r1, [pc, #380]	; (23fb6ac <__kernel_cos+0x26c>)
 23fb52e:	f7e6 fec7 	bl	23e22c0 <__aeabi_dsub>
 23fb532:	ecbd 8b04 	vpop	{d8-d9}
 23fb536:	ec41 0b10 	vmov	d0, r0, r1
 23fb53a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb53e:	ee10 2a10 	vmov	r2, s0
 23fb542:	ee10 0a10 	vmov	r0, s0
 23fb546:	463b      	mov	r3, r7
 23fb548:	4639      	mov	r1, r7
 23fb54a:	f7e7 f871 	bl	23e2630 <__aeabi_dmul>
 23fb54e:	4604      	mov	r4, r0
 23fb550:	460d      	mov	r5, r1
 23fb552:	a345      	add	r3, pc, #276	; (adr r3, 23fb668 <__kernel_cos+0x228>)
 23fb554:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb558:	f7e7 f86a 	bl	23e2630 <__aeabi_dmul>
 23fb55c:	a344      	add	r3, pc, #272	; (adr r3, 23fb670 <__kernel_cos+0x230>)
 23fb55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb562:	f7e6 feaf 	bl	23e22c4 <__adddf3>
 23fb566:	4622      	mov	r2, r4
 23fb568:	462b      	mov	r3, r5
 23fb56a:	f7e7 f861 	bl	23e2630 <__aeabi_dmul>
 23fb56e:	a342      	add	r3, pc, #264	; (adr r3, 23fb678 <__kernel_cos+0x238>)
 23fb570:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb574:	f7e6 fea4 	bl	23e22c0 <__aeabi_dsub>
 23fb578:	4622      	mov	r2, r4
 23fb57a:	462b      	mov	r3, r5
 23fb57c:	f7e7 f858 	bl	23e2630 <__aeabi_dmul>
 23fb580:	a33f      	add	r3, pc, #252	; (adr r3, 23fb680 <__kernel_cos+0x240>)
 23fb582:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb586:	f7e6 fe9d 	bl	23e22c4 <__adddf3>
 23fb58a:	4622      	mov	r2, r4
 23fb58c:	462b      	mov	r3, r5
 23fb58e:	f7e7 f84f 	bl	23e2630 <__aeabi_dmul>
 23fb592:	a33d      	add	r3, pc, #244	; (adr r3, 23fb688 <__kernel_cos+0x248>)
 23fb594:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb598:	f7e6 fe92 	bl	23e22c0 <__aeabi_dsub>
 23fb59c:	4622      	mov	r2, r4
 23fb59e:	462b      	mov	r3, r5
 23fb5a0:	f7e7 f846 	bl	23e2630 <__aeabi_dmul>
 23fb5a4:	a33a      	add	r3, pc, #232	; (adr r3, 23fb690 <__kernel_cos+0x250>)
 23fb5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb5aa:	f7e6 fe8b 	bl	23e22c4 <__adddf3>
 23fb5ae:	462b      	mov	r3, r5
 23fb5b0:	4622      	mov	r2, r4
 23fb5b2:	f7e7 f83d 	bl	23e2630 <__aeabi_dmul>
 23fb5b6:	4b3e      	ldr	r3, [pc, #248]	; (23fb6b0 <__kernel_cos+0x270>)
 23fb5b8:	4599      	cmp	r9, r3
 23fb5ba:	ec41 0b18 	vmov	d8, r0, r1
 23fb5be:	dd90      	ble.n	23fb4e2 <__kernel_cos+0xa2>
 23fb5c0:	4b3c      	ldr	r3, [pc, #240]	; (23fb6b4 <__kernel_cos+0x274>)
 23fb5c2:	4599      	cmp	r9, r3
 23fb5c4:	dc3c      	bgt.n	23fb640 <__kernel_cos+0x200>
 23fb5c6:	2200      	movs	r2, #0
 23fb5c8:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
 23fb5cc:	2000      	movs	r0, #0
 23fb5ce:	4937      	ldr	r1, [pc, #220]	; (23fb6ac <__kernel_cos+0x26c>)
 23fb5d0:	4690      	mov	r8, r2
 23fb5d2:	4699      	mov	r9, r3
 23fb5d4:	f7e6 fe74 	bl	23e22c0 <__aeabi_dsub>
 23fb5d8:	ec41 0b19 	vmov	d9, r0, r1
 23fb5dc:	2200      	movs	r2, #0
 23fb5de:	4b32      	ldr	r3, [pc, #200]	; (23fb6a8 <__kernel_cos+0x268>)
 23fb5e0:	4620      	mov	r0, r4
 23fb5e2:	4629      	mov	r1, r5
 23fb5e4:	f7e7 f824 	bl	23e2630 <__aeabi_dmul>
 23fb5e8:	4642      	mov	r2, r8
 23fb5ea:	464b      	mov	r3, r9
 23fb5ec:	f7e6 fe68 	bl	23e22c0 <__aeabi_dsub>
 23fb5f0:	4680      	mov	r8, r0
 23fb5f2:	4689      	mov	r9, r1
 23fb5f4:	4620      	mov	r0, r4
 23fb5f6:	4629      	mov	r1, r5
 23fb5f8:	ec53 2b18 	vmov	r2, r3, d8
 23fb5fc:	f7e7 f818 	bl	23e2630 <__aeabi_dmul>
 23fb600:	4604      	mov	r4, r0
 23fb602:	460d      	mov	r5, r1
 23fb604:	4652      	mov	r2, sl
 23fb606:	465b      	mov	r3, fp
 23fb608:	4630      	mov	r0, r6
 23fb60a:	4639      	mov	r1, r7
 23fb60c:	f7e7 f810 	bl	23e2630 <__aeabi_dmul>
 23fb610:	4602      	mov	r2, r0
 23fb612:	460b      	mov	r3, r1
 23fb614:	4620      	mov	r0, r4
 23fb616:	4629      	mov	r1, r5
 23fb618:	f7e6 fe52 	bl	23e22c0 <__aeabi_dsub>
 23fb61c:	4602      	mov	r2, r0
 23fb61e:	460b      	mov	r3, r1
 23fb620:	4640      	mov	r0, r8
 23fb622:	4649      	mov	r1, r9
 23fb624:	f7e6 fe4c 	bl	23e22c0 <__aeabi_dsub>
 23fb628:	4602      	mov	r2, r0
 23fb62a:	460b      	mov	r3, r1
 23fb62c:	ec51 0b19 	vmov	r0, r1, d9
 23fb630:	f7e6 fe46 	bl	23e22c0 <__aeabi_dsub>
 23fb634:	ecbd 8b04 	vpop	{d8-d9}
 23fb638:	ec41 0b10 	vmov	d0, r0, r1
 23fb63c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb640:	ed9f 7b15 	vldr	d7, [pc, #84]	; 23fb698 <__kernel_cos+0x258>
 23fb644:	f04f 0800 	mov.w	r8, #0
 23fb648:	f8df 906c 	ldr.w	r9, [pc, #108]	; 23fb6b8 <__kernel_cos+0x278>
 23fb64c:	eeb0 9a47 	vmov.f32	s18, s14
 23fb650:	eef0 9a67 	vmov.f32	s19, s15
 23fb654:	e7c2      	b.n	23fb5dc <__kernel_cos+0x19c>
 23fb656:	ecbd 8b04 	vpop	{d8-d9}
 23fb65a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 23fb6a0 <__kernel_cos+0x260>
 23fb65e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb662:	bf00      	nop
 23fb664:	f3af 8000 	nop.w
 23fb668:	be8838d4 	.word	0xbe8838d4
 23fb66c:	bda8fae9 	.word	0xbda8fae9
 23fb670:	bdb4b1c4 	.word	0xbdb4b1c4
 23fb674:	3e21ee9e 	.word	0x3e21ee9e
 23fb678:	809c52ad 	.word	0x809c52ad
 23fb67c:	3e927e4f 	.word	0x3e927e4f
 23fb680:	19cb1590 	.word	0x19cb1590
 23fb684:	3efa01a0 	.word	0x3efa01a0
 23fb688:	16c15177 	.word	0x16c15177
 23fb68c:	3f56c16c 	.word	0x3f56c16c
 23fb690:	5555554c 	.word	0x5555554c
 23fb694:	3fa55555 	.word	0x3fa55555
 23fb698:	00000000 	.word	0x00000000
 23fb69c:	3fe70000 	.word	0x3fe70000
 23fb6a0:	00000000 	.word	0x00000000
 23fb6a4:	3ff00000 	.word	0x3ff00000
 23fb6a8:	3fe00000 	.word	0x3fe00000
 23fb6ac:	3ff00000 	.word	0x3ff00000
 23fb6b0:	3fd33332 	.word	0x3fd33332
 23fb6b4:	3fe90000 	.word	0x3fe90000
 23fb6b8:	3fd20000 	.word	0x3fd20000
 23fb6bc:	00000000 	.word	0x00000000

023fb6c0 <__kernel_rem_pio2>:
 23fb6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb6c4:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 23fb6c8:	461c      	mov	r4, r3
 23fb6ca:	f112 0f14 	cmn.w	r2, #20
 23fb6ce:	9308      	str	r3, [sp, #32]
 23fb6d0:	910b      	str	r1, [sp, #44]	; 0x2c
 23fb6d2:	4bb6      	ldr	r3, [pc, #728]	; (23fb9ac <__kernel_rem_pio2+0x2ec>)
 23fb6d4:	99a2      	ldr	r1, [sp, #648]	; 0x288
 23fb6d6:	9004      	str	r0, [sp, #16]
 23fb6d8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 23fb6dc:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
 23fb6e0:	9105      	str	r1, [sp, #20]
 23fb6e2:	9303      	str	r3, [sp, #12]
 23fb6e4:	f2c0 833a 	blt.w	23fbd5c <__kernel_rem_pio2+0x69c>
 23fb6e8:	1ed3      	subs	r3, r2, #3
 23fb6ea:	49b1      	ldr	r1, [pc, #708]	; (23fb9b0 <__kernel_rem_pio2+0x2f0>)
 23fb6ec:	fb81 0103 	smull	r0, r1, r1, r3
 23fb6f0:	17db      	asrs	r3, r3, #31
 23fb6f2:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 23fb6f6:	9307      	str	r3, [sp, #28]
 23fb6f8:	3301      	adds	r3, #1
 23fb6fa:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 23fb6fe:	00db      	lsls	r3, r3, #3
 23fb700:	18d3      	adds	r3, r2, r3
 23fb702:	9a07      	ldr	r2, [sp, #28]
 23fb704:	9306      	str	r3, [sp, #24]
 23fb706:	9b03      	ldr	r3, [sp, #12]
 23fb708:	1ad4      	subs	r4, r2, r3
 23fb70a:	9a05      	ldr	r2, [sp, #20]
 23fb70c:	18d6      	adds	r6, r2, r3
 23fb70e:	d414      	bmi.n	23fb73a <__kernel_rem_pio2+0x7a>
 23fb710:	3601      	adds	r6, #1
 23fb712:	ad20      	add	r5, sp, #128	; 0x80
 23fb714:	f04f 0800 	mov.w	r8, #0
 23fb718:	f04f 0900 	mov.w	r9, #0
 23fb71c:	4426      	add	r6, r4
 23fb71e:	9fa3      	ldr	r7, [sp, #652]	; 0x28c
 23fb720:	2c00      	cmp	r4, #0
 23fb722:	4640      	mov	r0, r8
 23fb724:	4649      	mov	r1, r9
 23fb726:	db03      	blt.n	23fb730 <__kernel_rem_pio2+0x70>
 23fb728:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 23fb72c:	f7e6 ff16 	bl	23e255c <__aeabi_i2d>
 23fb730:	3401      	adds	r4, #1
 23fb732:	42b4      	cmp	r4, r6
 23fb734:	e8e5 0102 	strd	r0, r1, [r5], #8
 23fb738:	d1f2      	bne.n	23fb720 <__kernel_rem_pio2+0x60>
 23fb73a:	9b05      	ldr	r3, [sp, #20]
 23fb73c:	2b00      	cmp	r3, #0
 23fb73e:	f2c0 83c7 	blt.w	23fbed0 <__kernel_rem_pio2+0x810>
 23fb742:	9b08      	ldr	r3, [sp, #32]
 23fb744:	a920      	add	r1, sp, #128	; 0x80
 23fb746:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 23fb74a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 23fb74e:	00da      	lsls	r2, r3, #3
 23fb750:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
 23fb754:	9202      	str	r2, [sp, #8]
 23fb756:	9a05      	ldr	r2, [sp, #20]
 23fb758:	441a      	add	r2, r3
 23fb75a:	9201      	str	r2, [sp, #4]
 23fb75c:	9a04      	ldr	r2, [sp, #16]
 23fb75e:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
 23fb762:	9b03      	ldr	r3, [sp, #12]
 23fb764:	2b00      	cmp	r3, #0
 23fb766:	f2c0 81a6 	blt.w	23fbab6 <__kernel_rem_pio2+0x3f6>
 23fb76a:	4657      	mov	r7, sl
 23fb76c:	9e04      	ldr	r6, [sp, #16]
 23fb76e:	2400      	movs	r4, #0
 23fb770:	2500      	movs	r5, #0
 23fb772:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 23fb776:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 23fb77a:	f7e6 ff59 	bl	23e2630 <__aeabi_dmul>
 23fb77e:	4602      	mov	r2, r0
 23fb780:	460b      	mov	r3, r1
 23fb782:	4620      	mov	r0, r4
 23fb784:	4629      	mov	r1, r5
 23fb786:	f7e6 fd9d 	bl	23e22c4 <__adddf3>
 23fb78a:	4546      	cmp	r6, r8
 23fb78c:	4604      	mov	r4, r0
 23fb78e:	460d      	mov	r5, r1
 23fb790:	d1ef      	bne.n	23fb772 <__kernel_rem_pio2+0xb2>
 23fb792:	f109 0901 	add.w	r9, r9, #1
 23fb796:	9b01      	ldr	r3, [sp, #4]
 23fb798:	f10a 0a08 	add.w	sl, sl, #8
 23fb79c:	4599      	cmp	r9, r3
 23fb79e:	e8eb 4502 	strd	r4, r5, [fp], #8
 23fb7a2:	d1de      	bne.n	23fb762 <__kernel_rem_pio2+0xa2>
 23fb7a4:	9a04      	ldr	r2, [sp, #16]
 23fb7a6:	a90b      	add	r1, sp, #44	; 0x2c
 23fb7a8:	9b02      	ldr	r3, [sp, #8]
 23fb7aa:	4413      	add	r3, r2
 23fb7ac:	469b      	mov	fp, r3
 23fb7ae:	9b05      	ldr	r3, [sp, #20]
 23fb7b0:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 23fb7b4:	a90c      	add	r1, sp, #48	; 0x30
 23fb7b6:	920a      	str	r2, [sp, #40]	; 0x28
 23fb7b8:	461a      	mov	r2, r3
 23fb7ba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 23fb7be:	9201      	str	r2, [sp, #4]
 23fb7c0:	3b08      	subs	r3, #8
 23fb7c2:	9309      	str	r3, [sp, #36]	; 0x24
 23fb7c4:	9a01      	ldr	r2, [sp, #4]
 23fb7c6:	a998      	add	r1, sp, #608	; 0x260
 23fb7c8:	2a00      	cmp	r2, #0
 23fb7ca:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 23fb7ce:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 23fb7d2:	dd29      	ble.n	23fb828 <__kernel_rem_pio2+0x168>
 23fb7d4:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 23fb7d8:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 23fb7dc:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
 23fb7e0:	2200      	movs	r2, #0
 23fb7e2:	4b74      	ldr	r3, [pc, #464]	; (23fb9b4 <__kernel_rem_pio2+0x2f4>)
 23fb7e4:	4620      	mov	r0, r4
 23fb7e6:	4629      	mov	r1, r5
 23fb7e8:	f7e6 ff22 	bl	23e2630 <__aeabi_dmul>
 23fb7ec:	f7e7 f9d0 	bl	23e2b90 <__aeabi_d2iz>
 23fb7f0:	f7e6 feb4 	bl	23e255c <__aeabi_i2d>
 23fb7f4:	2200      	movs	r2, #0
 23fb7f6:	4b70      	ldr	r3, [pc, #448]	; (23fb9b8 <__kernel_rem_pio2+0x2f8>)
 23fb7f8:	4606      	mov	r6, r0
 23fb7fa:	460f      	mov	r7, r1
 23fb7fc:	f7e6 ff18 	bl	23e2630 <__aeabi_dmul>
 23fb800:	4602      	mov	r2, r0
 23fb802:	460b      	mov	r3, r1
 23fb804:	4620      	mov	r0, r4
 23fb806:	4629      	mov	r1, r5
 23fb808:	f7e6 fd5a 	bl	23e22c0 <__aeabi_dsub>
 23fb80c:	f7e7 f9c0 	bl	23e2b90 <__aeabi_d2iz>
 23fb810:	4639      	mov	r1, r7
 23fb812:	f849 0b04 	str.w	r0, [r9], #4
 23fb816:	4630      	mov	r0, r6
 23fb818:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 23fb81c:	f7e6 fd52 	bl	23e22c4 <__adddf3>
 23fb820:	4604      	mov	r4, r0
 23fb822:	45d0      	cmp	r8, sl
 23fb824:	460d      	mov	r5, r1
 23fb826:	d1db      	bne.n	23fb7e0 <__kernel_rem_pio2+0x120>
 23fb828:	f8dd 9018 	ldr.w	r9, [sp, #24]
 23fb82c:	ec45 4b10 	vmov	d0, r4, r5
 23fb830:	4648      	mov	r0, r9
 23fb832:	f7fe fabd 	bl	23f9db0 <scalbn>
 23fb836:	2200      	movs	r2, #0
 23fb838:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 23fb83c:	ee10 0a10 	vmov	r0, s0
 23fb840:	ec55 4b10 	vmov	r4, r5, d0
 23fb844:	4629      	mov	r1, r5
 23fb846:	f7e6 fef3 	bl	23e2630 <__aeabi_dmul>
 23fb84a:	ec41 0b10 	vmov	d0, r0, r1
 23fb84e:	f000 fc2f 	bl	23fc0b0 <floor>
 23fb852:	2200      	movs	r2, #0
 23fb854:	4b59      	ldr	r3, [pc, #356]	; (23fb9bc <__kernel_rem_pio2+0x2fc>)
 23fb856:	ec51 0b10 	vmov	r0, r1, d0
 23fb85a:	f7e6 fee9 	bl	23e2630 <__aeabi_dmul>
 23fb85e:	4602      	mov	r2, r0
 23fb860:	460b      	mov	r3, r1
 23fb862:	4620      	mov	r0, r4
 23fb864:	4629      	mov	r1, r5
 23fb866:	f7e6 fd2b 	bl	23e22c0 <__aeabi_dsub>
 23fb86a:	460d      	mov	r5, r1
 23fb86c:	4604      	mov	r4, r0
 23fb86e:	f7e7 f98f 	bl	23e2b90 <__aeabi_d2iz>
 23fb872:	4680      	mov	r8, r0
 23fb874:	f7e6 fe72 	bl	23e255c <__aeabi_i2d>
 23fb878:	460b      	mov	r3, r1
 23fb87a:	4602      	mov	r2, r0
 23fb87c:	4629      	mov	r1, r5
 23fb87e:	4620      	mov	r0, r4
 23fb880:	f7e6 fd1e 	bl	23e22c0 <__aeabi_dsub>
 23fb884:	464b      	mov	r3, r9
 23fb886:	4606      	mov	r6, r0
 23fb888:	460f      	mov	r7, r1
 23fb88a:	2b00      	cmp	r3, #0
 23fb88c:	f340 8098 	ble.w	23fb9c0 <__kernel_rem_pio2+0x300>
 23fb890:	9a01      	ldr	r2, [sp, #4]
 23fb892:	a90c      	add	r1, sp, #48	; 0x30
 23fb894:	f1c9 0318 	rsb	r3, r9, #24
 23fb898:	f1c9 0517 	rsb	r5, r9, #23
 23fb89c:	3a01      	subs	r2, #1
 23fb89e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 23fb8a2:	fa41 f003 	asr.w	r0, r1, r3
 23fb8a6:	fa00 f303 	lsl.w	r3, r0, r3
 23fb8aa:	4480      	add	r8, r0
 23fb8ac:	1acb      	subs	r3, r1, r3
 23fb8ae:	a90c      	add	r1, sp, #48	; 0x30
 23fb8b0:	fa43 f505 	asr.w	r5, r3, r5
 23fb8b4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 23fb8b8:	2d00      	cmp	r5, #0
 23fb8ba:	f300 808b 	bgt.w	23fb9d4 <__kernel_rem_pio2+0x314>
 23fb8be:	2200      	movs	r2, #0
 23fb8c0:	2300      	movs	r3, #0
 23fb8c2:	4630      	mov	r0, r6
 23fb8c4:	4639      	mov	r1, r7
 23fb8c6:	f7e7 f91b 	bl	23e2b00 <__aeabi_dcmpeq>
 23fb8ca:	2800      	cmp	r0, #0
 23fb8cc:	f000 824d 	beq.w	23fbd6a <__kernel_rem_pio2+0x6aa>
 23fb8d0:	9a01      	ldr	r2, [sp, #4]
 23fb8d2:	9b05      	ldr	r3, [sp, #20]
 23fb8d4:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
 23fb8d8:	4553      	cmp	r3, sl
 23fb8da:	dc10      	bgt.n	23fb8fe <__kernel_rem_pio2+0x23e>
 23fb8dc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 23fb8e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 23fb8e2:	4413      	add	r3, r2
 23fb8e4:	aa0c      	add	r2, sp, #48	; 0x30
 23fb8e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 23fb8ea:	2200      	movs	r2, #0
 23fb8ec:	f853 1904 	ldr.w	r1, [r3], #-4
 23fb8f0:	4283      	cmp	r3, r0
 23fb8f2:	ea42 0201 	orr.w	r2, r2, r1
 23fb8f6:	d1f9      	bne.n	23fb8ec <__kernel_rem_pio2+0x22c>
 23fb8f8:	2a00      	cmp	r2, #0
 23fb8fa:	f040 80df 	bne.w	23fbabc <__kernel_rem_pio2+0x3fc>
 23fb8fe:	9b05      	ldr	r3, [sp, #20]
 23fb900:	aa0c      	add	r2, sp, #48	; 0x30
 23fb902:	3b01      	subs	r3, #1
 23fb904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 23fb908:	2b00      	cmp	r3, #0
 23fb90a:	f040 80cf 	bne.w	23fbaac <__kernel_rem_pio2+0x3ec>
 23fb90e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23fb910:	2301      	movs	r3, #1
 23fb912:	f852 1904 	ldr.w	r1, [r2], #-4
 23fb916:	3301      	adds	r3, #1
 23fb918:	2900      	cmp	r1, #0
 23fb91a:	d0fa      	beq.n	23fb912 <__kernel_rem_pio2+0x252>
 23fb91c:	9a01      	ldr	r2, [sp, #4]
 23fb91e:	18d3      	adds	r3, r2, r3
 23fb920:	9302      	str	r3, [sp, #8]
 23fb922:	1c53      	adds	r3, r2, #1
 23fb924:	4699      	mov	r9, r3
 23fb926:	9a01      	ldr	r2, [sp, #4]
 23fb928:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 23fb92c:	9908      	ldr	r1, [sp, #32]
 23fb92e:	440a      	add	r2, r1
 23fb930:	4690      	mov	r8, r2
 23fb932:	9a07      	ldr	r2, [sp, #28]
 23fb934:	441a      	add	r2, r3
 23fb936:	4492      	add	sl, r2
 23fb938:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 23fb93a:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 23fb93e:	aa20      	add	r2, sp, #128	; 0x80
 23fb940:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
 23fb944:	aa70      	add	r2, sp, #448	; 0x1c0
 23fb946:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 23fb94a:	9301      	str	r3, [sp, #4]
 23fb94c:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 23fb950:	4647      	mov	r7, r8
 23fb952:	f7e6 fe03 	bl	23e255c <__aeabi_i2d>
 23fb956:	460b      	mov	r3, r1
 23fb958:	9903      	ldr	r1, [sp, #12]
 23fb95a:	4602      	mov	r2, r0
 23fb95c:	f108 0808 	add.w	r8, r8, #8
 23fb960:	2900      	cmp	r1, #0
 23fb962:	e948 2302 	strd	r2, r3, [r8, #-8]
 23fb966:	db1e      	blt.n	23fb9a6 <__kernel_rem_pio2+0x2e6>
 23fb968:	9e04      	ldr	r6, [sp, #16]
 23fb96a:	2400      	movs	r4, #0
 23fb96c:	2500      	movs	r5, #0
 23fb96e:	e001      	b.n	23fb974 <__kernel_rem_pio2+0x2b4>
 23fb970:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 23fb974:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 23fb978:	f7e6 fe5a 	bl	23e2630 <__aeabi_dmul>
 23fb97c:	4602      	mov	r2, r0
 23fb97e:	460b      	mov	r3, r1
 23fb980:	4620      	mov	r0, r4
 23fb982:	4629      	mov	r1, r5
 23fb984:	f7e6 fc9e 	bl	23e22c4 <__adddf3>
 23fb988:	455e      	cmp	r6, fp
 23fb98a:	4604      	mov	r4, r0
 23fb98c:	460d      	mov	r5, r1
 23fb98e:	d1ef      	bne.n	23fb970 <__kernel_rem_pio2+0x2b0>
 23fb990:	9b01      	ldr	r3, [sp, #4]
 23fb992:	f109 0901 	add.w	r9, r9, #1
 23fb996:	e8e3 4502 	strd	r4, r5, [r3], #8
 23fb99a:	9301      	str	r3, [sp, #4]
 23fb99c:	9b02      	ldr	r3, [sp, #8]
 23fb99e:	4599      	cmp	r9, r3
 23fb9a0:	ddd4      	ble.n	23fb94c <__kernel_rem_pio2+0x28c>
 23fb9a2:	9301      	str	r3, [sp, #4]
 23fb9a4:	e70e      	b.n	23fb7c4 <__kernel_rem_pio2+0x104>
 23fb9a6:	2400      	movs	r4, #0
 23fb9a8:	2500      	movs	r5, #0
 23fb9aa:	e7f1      	b.n	23fb990 <__kernel_rem_pio2+0x2d0>
 23fb9ac:	023ffd78 	.word	0x023ffd78
 23fb9b0:	2aaaaaab 	.word	0x2aaaaaab
 23fb9b4:	3e700000 	.word	0x3e700000
 23fb9b8:	41700000 	.word	0x41700000
 23fb9bc:	40200000 	.word	0x40200000
 23fb9c0:	d16b      	bne.n	23fba9a <__kernel_rem_pio2+0x3da>
 23fb9c2:	9b01      	ldr	r3, [sp, #4]
 23fb9c4:	aa0c      	add	r2, sp, #48	; 0x30
 23fb9c6:	3b01      	subs	r3, #1
 23fb9c8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 23fb9cc:	15ed      	asrs	r5, r5, #23
 23fb9ce:	2d00      	cmp	r5, #0
 23fb9d0:	f77f af75 	ble.w	23fb8be <__kernel_rem_pio2+0x1fe>
 23fb9d4:	9b01      	ldr	r3, [sp, #4]
 23fb9d6:	f108 0801 	add.w	r8, r8, #1
 23fb9da:	2b00      	cmp	r3, #0
 23fb9dc:	f340 81c3 	ble.w	23fbd66 <__kernel_rem_pio2+0x6a6>
 23fb9e0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 23fb9e2:	2c00      	cmp	r4, #0
 23fb9e4:	d151      	bne.n	23fba8a <__kernel_rem_pio2+0x3ca>
 23fb9e6:	9b01      	ldr	r3, [sp, #4]
 23fb9e8:	2b01      	cmp	r3, #1
 23fb9ea:	d020      	beq.n	23fba2e <__kernel_rem_pio2+0x36e>
 23fb9ec:	ab0c      	add	r3, sp, #48	; 0x30
 23fb9ee:	2201      	movs	r2, #1
 23fb9f0:	f853 4f04 	ldr.w	r4, [r3, #4]!
 23fb9f4:	2c00      	cmp	r4, #0
 23fb9f6:	d04b      	beq.n	23fba90 <__kernel_rem_pio2+0x3d0>
 23fb9f8:	1c53      	adds	r3, r2, #1
 23fb9fa:	a90c      	add	r1, sp, #48	; 0x30
 23fb9fc:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
 23fba00:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
 23fba04:	9901      	ldr	r1, [sp, #4]
 23fba06:	4299      	cmp	r1, r3
 23fba08:	dd10      	ble.n	23fba2c <__kernel_rem_pio2+0x36c>
 23fba0a:	a80c      	add	r0, sp, #48	; 0x30
 23fba0c:	aa0c      	add	r2, sp, #48	; 0x30
 23fba0e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 23fba12:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 23fba16:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 23fba1a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 23fba1e:	e000      	b.n	23fba22 <__kernel_rem_pio2+0x362>
 23fba20:	681a      	ldr	r2, [r3, #0]
 23fba22:	1a8a      	subs	r2, r1, r2
 23fba24:	f843 2b04 	str.w	r2, [r3], #4
 23fba28:	4283      	cmp	r3, r0
 23fba2a:	d1f9      	bne.n	23fba20 <__kernel_rem_pio2+0x360>
 23fba2c:	2401      	movs	r4, #1
 23fba2e:	9b06      	ldr	r3, [sp, #24]
 23fba30:	2b00      	cmp	r3, #0
 23fba32:	dd0e      	ble.n	23fba52 <__kernel_rem_pio2+0x392>
 23fba34:	2b01      	cmp	r3, #1
 23fba36:	f000 816b 	beq.w	23fbd10 <__kernel_rem_pio2+0x650>
 23fba3a:	2b02      	cmp	r3, #2
 23fba3c:	d109      	bne.n	23fba52 <__kernel_rem_pio2+0x392>
 23fba3e:	9b01      	ldr	r3, [sp, #4]
 23fba40:	a90c      	add	r1, sp, #48	; 0x30
 23fba42:	1e5a      	subs	r2, r3, #1
 23fba44:	ab0c      	add	r3, sp, #48	; 0x30
 23fba46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23fba4a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 23fba4e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 23fba52:	2d02      	cmp	r5, #2
 23fba54:	f47f af33 	bne.w	23fb8be <__kernel_rem_pio2+0x1fe>
 23fba58:	4632      	mov	r2, r6
 23fba5a:	463b      	mov	r3, r7
 23fba5c:	2000      	movs	r0, #0
 23fba5e:	49b6      	ldr	r1, [pc, #728]	; (23fbd38 <__kernel_rem_pio2+0x678>)
 23fba60:	f7e6 fc2e 	bl	23e22c0 <__aeabi_dsub>
 23fba64:	4606      	mov	r6, r0
 23fba66:	460f      	mov	r7, r1
 23fba68:	2c00      	cmp	r4, #0
 23fba6a:	f43f af28 	beq.w	23fb8be <__kernel_rem_pio2+0x1fe>
 23fba6e:	9806      	ldr	r0, [sp, #24]
 23fba70:	ed9f 0bad 	vldr	d0, [pc, #692]	; 23fbd28 <__kernel_rem_pio2+0x668>
 23fba74:	f7fe f99c 	bl	23f9db0 <scalbn>
 23fba78:	4630      	mov	r0, r6
 23fba7a:	4639      	mov	r1, r7
 23fba7c:	ec53 2b10 	vmov	r2, r3, d0
 23fba80:	f7e6 fc1e 	bl	23e22c0 <__aeabi_dsub>
 23fba84:	4606      	mov	r6, r0
 23fba86:	460f      	mov	r7, r1
 23fba88:	e719      	b.n	23fb8be <__kernel_rem_pio2+0x1fe>
 23fba8a:	2301      	movs	r3, #1
 23fba8c:	2200      	movs	r2, #0
 23fba8e:	e7b4      	b.n	23fb9fa <__kernel_rem_pio2+0x33a>
 23fba90:	3201      	adds	r2, #1
 23fba92:	9901      	ldr	r1, [sp, #4]
 23fba94:	428a      	cmp	r2, r1
 23fba96:	d1ab      	bne.n	23fb9f0 <__kernel_rem_pio2+0x330>
 23fba98:	e7c9      	b.n	23fba2e <__kernel_rem_pio2+0x36e>
 23fba9a:	2200      	movs	r2, #0
 23fba9c:	4ba7      	ldr	r3, [pc, #668]	; (23fbd3c <__kernel_rem_pio2+0x67c>)
 23fba9e:	f7e7 f84d 	bl	23e2b3c <__aeabi_dcmpge>
 23fbaa2:	2800      	cmp	r0, #0
 23fbaa4:	f040 8152 	bne.w	23fbd4c <__kernel_rem_pio2+0x68c>
 23fbaa8:	4605      	mov	r5, r0
 23fbaaa:	e708      	b.n	23fb8be <__kernel_rem_pio2+0x1fe>
 23fbaac:	9b01      	ldr	r3, [sp, #4]
 23fbaae:	3301      	adds	r3, #1
 23fbab0:	4699      	mov	r9, r3
 23fbab2:	9302      	str	r3, [sp, #8]
 23fbab4:	e737      	b.n	23fb926 <__kernel_rem_pio2+0x266>
 23fbab6:	2400      	movs	r4, #0
 23fbab8:	2500      	movs	r5, #0
 23fbaba:	e66a      	b.n	23fb792 <__kernel_rem_pio2+0xd2>
 23fbabc:	9b06      	ldr	r3, [sp, #24]
 23fbabe:	9503      	str	r5, [sp, #12]
 23fbac0:	f1a3 0218 	sub.w	r2, r3, #24
 23fbac4:	ab0c      	add	r3, sp, #48	; 0x30
 23fbac6:	f8cd 801c 	str.w	r8, [sp, #28]
 23fbaca:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 23fbace:	9206      	str	r2, [sp, #24]
 23fbad0:	b973      	cbnz	r3, 23fbaf0 <__kernel_rem_pio2+0x430>
 23fbad2:	4b9b      	ldr	r3, [pc, #620]	; (23fbd40 <__kernel_rem_pio2+0x680>)
 23fbad4:	9901      	ldr	r1, [sp, #4]
 23fbad6:	4419      	add	r1, r3
 23fbad8:	460b      	mov	r3, r1
 23fbada:	a90c      	add	r1, sp, #48	; 0x30
 23fbadc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 23fbae0:	f853 1904 	ldr.w	r1, [r3], #-4
 23fbae4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 23fbae8:	3a18      	subs	r2, #24
 23fbaea:	2900      	cmp	r1, #0
 23fbaec:	d0f8      	beq.n	23fbae0 <__kernel_rem_pio2+0x420>
 23fbaee:	9206      	str	r2, [sp, #24]
 23fbaf0:	9806      	ldr	r0, [sp, #24]
 23fbaf2:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 23fbd28 <__kernel_rem_pio2+0x668>
 23fbaf6:	f7fe f95b 	bl	23f9db0 <scalbn>
 23fbafa:	f1ba 0f00 	cmp.w	sl, #0
 23fbafe:	ec55 4b10 	vmov	r4, r5, d0
 23fbb02:	f2c0 81db 	blt.w	23fbebc <__kernel_rem_pio2+0x7fc>
 23fbb06:	ab70      	add	r3, sp, #448	; 0x1c0
 23fbb08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 23fbb0c:	f04f 0800 	mov.w	r8, #0
 23fbb10:	f8df 9230 	ldr.w	r9, [pc, #560]	; 23fbd44 <__kernel_rem_pio2+0x684>
 23fbb14:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
 23fbb18:	9204      	str	r2, [sp, #16]
 23fbb1a:	f10a 0301 	add.w	r3, sl, #1
 23fbb1e:	aa0c      	add	r2, sp, #48	; 0x30
 23fbb20:	f10b 0708 	add.w	r7, fp, #8
 23fbb24:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 23fbb28:	9306      	str	r3, [sp, #24]
 23fbb2a:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 23fbb2e:	f7e6 fd15 	bl	23e255c <__aeabi_i2d>
 23fbb32:	4622      	mov	r2, r4
 23fbb34:	462b      	mov	r3, r5
 23fbb36:	f7e6 fd7b 	bl	23e2630 <__aeabi_dmul>
 23fbb3a:	464b      	mov	r3, r9
 23fbb3c:	4642      	mov	r2, r8
 23fbb3e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 23fbb42:	4620      	mov	r0, r4
 23fbb44:	4629      	mov	r1, r5
 23fbb46:	f7e6 fd73 	bl	23e2630 <__aeabi_dmul>
 23fbb4a:	ab0c      	add	r3, sp, #48	; 0x30
 23fbb4c:	4604      	mov	r4, r0
 23fbb4e:	460d      	mov	r5, r1
 23fbb50:	429e      	cmp	r6, r3
 23fbb52:	d1ea      	bne.n	23fbb2a <__kernel_rem_pio2+0x46a>
 23fbb54:	ab48      	add	r3, sp, #288	; 0x120
 23fbb56:	f04f 0900 	mov.w	r9, #0
 23fbb5a:	e9cd 3a01 	strd	r3, sl, [sp, #4]
 23fbb5e:	f8dd a014 	ldr.w	sl, [sp, #20]
 23fbb62:	f1ba 0f00 	cmp.w	sl, #0
 23fbb66:	db2c      	blt.n	23fbbc2 <__kernel_rem_pio2+0x502>
 23fbb68:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 23fbd48 <__kernel_rem_pio2+0x688>
 23fbb6c:	465f      	mov	r7, fp
 23fbb6e:	2600      	movs	r6, #0
 23fbb70:	2400      	movs	r4, #0
 23fbb72:	2500      	movs	r5, #0
 23fbb74:	a36e      	add	r3, pc, #440	; (adr r3, 23fbd30 <__kernel_rem_pio2+0x670>)
 23fbb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbb7a:	e003      	b.n	23fbb84 <__kernel_rem_pio2+0x4c4>
 23fbb7c:	45b1      	cmp	r9, r6
 23fbb7e:	db10      	blt.n	23fbba2 <__kernel_rem_pio2+0x4e2>
 23fbb80:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 23fbb84:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 23fbb88:	3601      	adds	r6, #1
 23fbb8a:	f7e6 fd51 	bl	23e2630 <__aeabi_dmul>
 23fbb8e:	4602      	mov	r2, r0
 23fbb90:	460b      	mov	r3, r1
 23fbb92:	4620      	mov	r0, r4
 23fbb94:	4629      	mov	r1, r5
 23fbb96:	f7e6 fb95 	bl	23e22c4 <__adddf3>
 23fbb9a:	45b2      	cmp	sl, r6
 23fbb9c:	4604      	mov	r4, r0
 23fbb9e:	460d      	mov	r5, r1
 23fbba0:	daec      	bge.n	23fbb7c <__kernel_rem_pio2+0x4bc>
 23fbba2:	9b01      	ldr	r3, [sp, #4]
 23fbba4:	f1ab 0b08 	sub.w	fp, fp, #8
 23fbba8:	9a02      	ldr	r2, [sp, #8]
 23fbbaa:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 23fbbae:	454a      	cmp	r2, r9
 23fbbb0:	e9c3 4500 	strd	r4, r5, [r3]
 23fbbb4:	f109 0301 	add.w	r3, r9, #1
 23fbbb8:	d006      	beq.n	23fbbc8 <__kernel_rem_pio2+0x508>
 23fbbba:	f1ba 0f00 	cmp.w	sl, #0
 23fbbbe:	4699      	mov	r9, r3
 23fbbc0:	dad2      	bge.n	23fbb68 <__kernel_rem_pio2+0x4a8>
 23fbbc2:	2400      	movs	r4, #0
 23fbbc4:	2500      	movs	r5, #0
 23fbbc6:	e7ec      	b.n	23fbba2 <__kernel_rem_pio2+0x4e2>
 23fbbc8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23fbbca:	f8dd a008 	ldr.w	sl, [sp, #8]
 23fbbce:	2b02      	cmp	r3, #2
 23fbbd0:	dc1e      	bgt.n	23fbc10 <__kernel_rem_pio2+0x550>
 23fbbd2:	2b00      	cmp	r3, #0
 23fbbd4:	f300 80ff 	bgt.w	23fbdd6 <__kernel_rem_pio2+0x716>
 23fbbd8:	d113      	bne.n	23fbc02 <__kernel_rem_pio2+0x542>
 23fbbda:	9c04      	ldr	r4, [sp, #16]
 23fbbdc:	2000      	movs	r0, #0
 23fbbde:	9d01      	ldr	r5, [sp, #4]
 23fbbe0:	2100      	movs	r1, #0
 23fbbe2:	3408      	adds	r4, #8
 23fbbe4:	442c      	add	r4, r5
 23fbbe6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 23fbbea:	f7e6 fb6b 	bl	23e22c4 <__adddf3>
 23fbbee:	42a5      	cmp	r5, r4
 23fbbf0:	d1f9      	bne.n	23fbbe6 <__kernel_rem_pio2+0x526>
 23fbbf2:	9b03      	ldr	r3, [sp, #12]
 23fbbf4:	b113      	cbz	r3, 23fbbfc <__kernel_rem_pio2+0x53c>
 23fbbf6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fbbfa:	4619      	mov	r1, r3
 23fbbfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fbbfe:	e9c3 0100 	strd	r0, r1, [r3]
 23fbc02:	9b07      	ldr	r3, [sp, #28]
 23fbc04:	f003 0007 	and.w	r0, r3, #7
 23fbc08:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23fbc0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fbc10:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23fbc12:	2b03      	cmp	r3, #3
 23fbc14:	d1f5      	bne.n	23fbc02 <__kernel_rem_pio2+0x542>
 23fbc16:	f1ba 0f00 	cmp.w	sl, #0
 23fbc1a:	f000 816b 	beq.w	23fbef4 <__kernel_rem_pio2+0x834>
 23fbc1e:	9a01      	ldr	r2, [sp, #4]
 23fbc20:	9b04      	ldr	r3, [sp, #16]
 23fbc22:	eb02 0bca 	add.w	fp, r2, sl, lsl #3
 23fbc26:	18d3      	adds	r3, r2, r3
 23fbc28:	e9d3 4500 	ldrd	r4, r5, [r3]
 23fbc2c:	e97b 6702 	ldrd	r6, r7, [fp, #-8]!
 23fbc30:	4620      	mov	r0, r4
 23fbc32:	4629      	mov	r1, r5
 23fbc34:	4632      	mov	r2, r6
 23fbc36:	463b      	mov	r3, r7
 23fbc38:	f7e6 fb44 	bl	23e22c4 <__adddf3>
 23fbc3c:	46a0      	mov	r8, r4
 23fbc3e:	46a9      	mov	r9, r5
 23fbc40:	4604      	mov	r4, r0
 23fbc42:	460d      	mov	r5, r1
 23fbc44:	4630      	mov	r0, r6
 23fbc46:	4622      	mov	r2, r4
 23fbc48:	4639      	mov	r1, r7
 23fbc4a:	462b      	mov	r3, r5
 23fbc4c:	f7e6 fb38 	bl	23e22c0 <__aeabi_dsub>
 23fbc50:	464b      	mov	r3, r9
 23fbc52:	4642      	mov	r2, r8
 23fbc54:	f7e6 fb36 	bl	23e22c4 <__adddf3>
 23fbc58:	9b01      	ldr	r3, [sp, #4]
 23fbc5a:	455b      	cmp	r3, fp
 23fbc5c:	e9cb 0102 	strd	r0, r1, [fp, #8]
 23fbc60:	e9cb 4500 	strd	r4, r5, [fp]
 23fbc64:	d1e2      	bne.n	23fbc2c <__kernel_rem_pio2+0x56c>
 23fbc66:	f1ba 0f01 	cmp.w	sl, #1
 23fbc6a:	f340 8143 	ble.w	23fbef4 <__kernel_rem_pio2+0x834>
 23fbc6e:	9b04      	ldr	r3, [sp, #16]
 23fbc70:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 23fbc74:	9901      	ldr	r1, [sp, #4]
 23fbc76:	461a      	mov	r2, r3
 23fbc78:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 23fbc7c:	4453      	add	r3, sl
 23fbc7e:	440a      	add	r2, r1
 23fbc80:	00db      	lsls	r3, r3, #3
 23fbc82:	f103 0a08 	add.w	sl, r3, #8
 23fbc86:	9302      	str	r3, [sp, #8]
 23fbc88:	e9d2 4500 	ldrd	r4, r5, [r2]
 23fbc8c:	448a      	add	sl, r1
 23fbc8e:	4620      	mov	r0, r4
 23fbc90:	4629      	mov	r1, r5
 23fbc92:	46a0      	mov	r8, r4
 23fbc94:	46a9      	mov	r9, r5
 23fbc96:	e97a 6702 	ldrd	r6, r7, [sl, #-8]!
 23fbc9a:	4632      	mov	r2, r6
 23fbc9c:	463b      	mov	r3, r7
 23fbc9e:	f7e6 fb11 	bl	23e22c4 <__adddf3>
 23fbca2:	4604      	mov	r4, r0
 23fbca4:	460d      	mov	r5, r1
 23fbca6:	4630      	mov	r0, r6
 23fbca8:	4622      	mov	r2, r4
 23fbcaa:	4639      	mov	r1, r7
 23fbcac:	462b      	mov	r3, r5
 23fbcae:	f7e6 fb07 	bl	23e22c0 <__aeabi_dsub>
 23fbcb2:	4642      	mov	r2, r8
 23fbcb4:	464b      	mov	r3, r9
 23fbcb6:	f7e6 fb05 	bl	23e22c4 <__adddf3>
 23fbcba:	45d3      	cmp	fp, sl
 23fbcbc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 23fbcc0:	e9ca 4500 	strd	r4, r5, [sl]
 23fbcc4:	d1e3      	bne.n	23fbc8e <__kernel_rem_pio2+0x5ce>
 23fbcc6:	9c02      	ldr	r4, [sp, #8]
 23fbcc8:	2000      	movs	r0, #0
 23fbcca:	9b01      	ldr	r3, [sp, #4]
 23fbccc:	2100      	movs	r1, #0
 23fbcce:	3410      	adds	r4, #16
 23fbcd0:	f103 0510 	add.w	r5, r3, #16
 23fbcd4:	441c      	add	r4, r3
 23fbcd6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 23fbcda:	f7e6 faf3 	bl	23e22c4 <__adddf3>
 23fbcde:	42a5      	cmp	r5, r4
 23fbce0:	d1f9      	bne.n	23fbcd6 <__kernel_rem_pio2+0x616>
 23fbce2:	9b03      	ldr	r3, [sp, #12]
 23fbce4:	2b00      	cmp	r3, #0
 23fbce6:	f040 80b4 	bne.w	23fbe52 <__kernel_rem_pio2+0x792>
 23fbcea:	9d01      	ldr	r5, [sp, #4]
 23fbcec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 23fbcee:	e9d5 2300 	ldrd	r2, r3, [r5]
 23fbcf2:	e9c4 0104 	strd	r0, r1, [r4, #16]
 23fbcf6:	e9c4 2300 	strd	r2, r3, [r4]
 23fbcfa:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 23fbcfe:	e9c4 2302 	strd	r2, r3, [r4, #8]
 23fbd02:	9b07      	ldr	r3, [sp, #28]
 23fbd04:	f003 0007 	and.w	r0, r3, #7
 23fbd08:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23fbd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fbd10:	9b01      	ldr	r3, [sp, #4]
 23fbd12:	a90c      	add	r1, sp, #48	; 0x30
 23fbd14:	1e5a      	subs	r2, r3, #1
 23fbd16:	ab0c      	add	r3, sp, #48	; 0x30
 23fbd18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23fbd1c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 23fbd20:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 23fbd24:	e695      	b.n	23fba52 <__kernel_rem_pio2+0x392>
 23fbd26:	bf00      	nop
 23fbd28:	00000000 	.word	0x00000000
 23fbd2c:	3ff00000 	.word	0x3ff00000
 23fbd30:	40000000 	.word	0x40000000
 23fbd34:	3ff921fb 	.word	0x3ff921fb
 23fbd38:	3ff00000 	.word	0x3ff00000
 23fbd3c:	3fe00000 	.word	0x3fe00000
 23fbd40:	3ffffffe 	.word	0x3ffffffe
 23fbd44:	3e700000 	.word	0x3e700000
 23fbd48:	023ffd40 	.word	0x023ffd40
 23fbd4c:	9b01      	ldr	r3, [sp, #4]
 23fbd4e:	f108 0801 	add.w	r8, r8, #1
 23fbd52:	2b00      	cmp	r3, #0
 23fbd54:	f340 80a8 	ble.w	23fbea8 <__kernel_rem_pio2+0x7e8>
 23fbd58:	2502      	movs	r5, #2
 23fbd5a:	e641      	b.n	23fb9e0 <__kernel_rem_pio2+0x320>
 23fbd5c:	2100      	movs	r1, #0
 23fbd5e:	f06f 0317 	mvn.w	r3, #23
 23fbd62:	9107      	str	r1, [sp, #28]
 23fbd64:	e4cc      	b.n	23fb700 <__kernel_rem_pio2+0x40>
 23fbd66:	2400      	movs	r4, #0
 23fbd68:	e661      	b.n	23fba2e <__kernel_rem_pio2+0x36e>
 23fbd6a:	ec47 6b10 	vmov	d0, r6, r7
 23fbd6e:	9e06      	ldr	r6, [sp, #24]
 23fbd70:	9503      	str	r5, [sp, #12]
 23fbd72:	4270      	negs	r0, r6
 23fbd74:	f8cd 801c 	str.w	r8, [sp, #28]
 23fbd78:	f7fe f81a 	bl	23f9db0 <scalbn>
 23fbd7c:	2200      	movs	r2, #0
 23fbd7e:	4b5f      	ldr	r3, [pc, #380]	; (23fbefc <__kernel_rem_pio2+0x83c>)
 23fbd80:	ee10 0a10 	vmov	r0, s0
 23fbd84:	ec55 4b10 	vmov	r4, r5, d0
 23fbd88:	4629      	mov	r1, r5
 23fbd8a:	f7e6 fed7 	bl	23e2b3c <__aeabi_dcmpge>
 23fbd8e:	2800      	cmp	r0, #0
 23fbd90:	d055      	beq.n	23fbe3e <__kernel_rem_pio2+0x77e>
 23fbd92:	3618      	adds	r6, #24
 23fbd94:	2200      	movs	r2, #0
 23fbd96:	4b5a      	ldr	r3, [pc, #360]	; (23fbf00 <__kernel_rem_pio2+0x840>)
 23fbd98:	4620      	mov	r0, r4
 23fbd9a:	4629      	mov	r1, r5
 23fbd9c:	9606      	str	r6, [sp, #24]
 23fbd9e:	f7e6 fc47 	bl	23e2630 <__aeabi_dmul>
 23fbda2:	9f01      	ldr	r7, [sp, #4]
 23fbda4:	f7e6 fef4 	bl	23e2b90 <__aeabi_d2iz>
 23fbda8:	4606      	mov	r6, r0
 23fbdaa:	f7e6 fbd7 	bl	23e255c <__aeabi_i2d>
 23fbdae:	2200      	movs	r2, #0
 23fbdb0:	4b52      	ldr	r3, [pc, #328]	; (23fbefc <__kernel_rem_pio2+0x83c>)
 23fbdb2:	f107 0a01 	add.w	sl, r7, #1
 23fbdb6:	f7e6 fc3b 	bl	23e2630 <__aeabi_dmul>
 23fbdba:	460b      	mov	r3, r1
 23fbdbc:	4602      	mov	r2, r0
 23fbdbe:	4629      	mov	r1, r5
 23fbdc0:	4620      	mov	r0, r4
 23fbdc2:	f7e6 fa7d 	bl	23e22c0 <__aeabi_dsub>
 23fbdc6:	f7e6 fee3 	bl	23e2b90 <__aeabi_d2iz>
 23fbdca:	ab0c      	add	r3, sp, #48	; 0x30
 23fbdcc:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 23fbdd0:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 23fbdd4:	e68c      	b.n	23fbaf0 <__kernel_rem_pio2+0x430>
 23fbdd6:	9d01      	ldr	r5, [sp, #4]
 23fbdd8:	2000      	movs	r0, #0
 23fbdda:	9a06      	ldr	r2, [sp, #24]
 23fbddc:	2100      	movs	r1, #0
 23fbdde:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
 23fbde2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 23fbde6:	f7e6 fa6d 	bl	23e22c4 <__adddf3>
 23fbdea:	42a5      	cmp	r5, r4
 23fbdec:	d1f9      	bne.n	23fbde2 <__kernel_rem_pio2+0x722>
 23fbdee:	9b03      	ldr	r3, [sp, #12]
 23fbdf0:	2b00      	cmp	r3, #0
 23fbdf2:	d149      	bne.n	23fbe88 <__kernel_rem_pio2+0x7c8>
 23fbdf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fbdf6:	4602      	mov	r2, r0
 23fbdf8:	e9c3 0100 	strd	r0, r1, [r3]
 23fbdfc:	460b      	mov	r3, r1
 23fbdfe:	9901      	ldr	r1, [sp, #4]
 23fbe00:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fbe04:	f7e6 fa5c 	bl	23e22c0 <__aeabi_dsub>
 23fbe08:	f1ba 0f00 	cmp.w	sl, #0
 23fbe0c:	dd0d      	ble.n	23fbe2a <__kernel_rem_pio2+0x76a>
 23fbe0e:	ad4a      	add	r5, sp, #296	; 0x128
 23fbe10:	2401      	movs	r4, #1
 23fbe12:	3401      	adds	r4, #1
 23fbe14:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 23fbe18:	f7e6 fa54 	bl	23e22c4 <__adddf3>
 23fbe1c:	45a2      	cmp	sl, r4
 23fbe1e:	daf8      	bge.n	23fbe12 <__kernel_rem_pio2+0x752>
 23fbe20:	9b03      	ldr	r3, [sp, #12]
 23fbe22:	b113      	cbz	r3, 23fbe2a <__kernel_rem_pio2+0x76a>
 23fbe24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fbe28:	4619      	mov	r1, r3
 23fbe2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fbe2c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 23fbe30:	9b07      	ldr	r3, [sp, #28]
 23fbe32:	f003 0007 	and.w	r0, r3, #7
 23fbe36:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23fbe3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fbe3e:	4620      	mov	r0, r4
 23fbe40:	4629      	mov	r1, r5
 23fbe42:	f7e6 fea5 	bl	23e2b90 <__aeabi_d2iz>
 23fbe46:	9b01      	ldr	r3, [sp, #4]
 23fbe48:	aa0c      	add	r2, sp, #48	; 0x30
 23fbe4a:	469a      	mov	sl, r3
 23fbe4c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 23fbe50:	e64e      	b.n	23fbaf0 <__kernel_rem_pio2+0x430>
 23fbe52:	9b01      	ldr	r3, [sp, #4]
 23fbe54:	4602      	mov	r2, r0
 23fbe56:	461e      	mov	r6, r3
 23fbe58:	685c      	ldr	r4, [r3, #4]
 23fbe5a:	68dd      	ldr	r5, [r3, #12]
 23fbe5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fbe60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 23fbe62:	e9c1 2304 	strd	r2, r3, [r1, #16]
 23fbe66:	6832      	ldr	r2, [r6, #0]
 23fbe68:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 23fbe6c:	e9c1 2300 	strd	r2, r3, [r1]
 23fbe70:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 23fbe74:	68b2      	ldr	r2, [r6, #8]
 23fbe76:	e9c1 2302 	strd	r2, r3, [r1, #8]
 23fbe7a:	9b07      	ldr	r3, [sp, #28]
 23fbe7c:	f003 0007 	and.w	r0, r3, #7
 23fbe80:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23fbe84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fbe88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fbe8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fbe8e:	6053      	str	r3, [r2, #4]
 23fbe90:	460b      	mov	r3, r1
 23fbe92:	9901      	ldr	r1, [sp, #4]
 23fbe94:	6010      	str	r0, [r2, #0]
 23fbe96:	4602      	mov	r2, r0
 23fbe98:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fbe9c:	f7e6 fa10 	bl	23e22c0 <__aeabi_dsub>
 23fbea0:	f1ba 0f00 	cmp.w	sl, #0
 23fbea4:	dcb3      	bgt.n	23fbe0e <__kernel_rem_pio2+0x74e>
 23fbea6:	e7bd      	b.n	23fbe24 <__kernel_rem_pio2+0x764>
 23fbea8:	4632      	mov	r2, r6
 23fbeaa:	463b      	mov	r3, r7
 23fbeac:	2000      	movs	r0, #0
 23fbeae:	4915      	ldr	r1, [pc, #84]	; (23fbf04 <__kernel_rem_pio2+0x844>)
 23fbeb0:	f7e6 fa06 	bl	23e22c0 <__aeabi_dsub>
 23fbeb4:	2502      	movs	r5, #2
 23fbeb6:	4606      	mov	r6, r0
 23fbeb8:	460f      	mov	r7, r1
 23fbeba:	e500      	b.n	23fb8be <__kernel_rem_pio2+0x1fe>
 23fbebc:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23fbebe:	2b02      	cmp	r3, #2
 23fbec0:	dc0a      	bgt.n	23fbed8 <__kernel_rem_pio2+0x818>
 23fbec2:	2b00      	cmp	r3, #0
 23fbec4:	dc11      	bgt.n	23fbeea <__kernel_rem_pio2+0x82a>
 23fbec6:	f47f ae9c 	bne.w	23fbc02 <__kernel_rem_pio2+0x542>
 23fbeca:	2000      	movs	r0, #0
 23fbecc:	2100      	movs	r1, #0
 23fbece:	e690      	b.n	23fbbf2 <__kernel_rem_pio2+0x532>
 23fbed0:	9b08      	ldr	r3, [sp, #32]
 23fbed2:	00db      	lsls	r3, r3, #3
 23fbed4:	9302      	str	r3, [sp, #8]
 23fbed6:	e465      	b.n	23fb7a4 <__kernel_rem_pio2+0xe4>
 23fbed8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23fbeda:	2b03      	cmp	r3, #3
 23fbedc:	f47f ae91 	bne.w	23fbc02 <__kernel_rem_pio2+0x542>
 23fbee0:	ab48      	add	r3, sp, #288	; 0x120
 23fbee2:	2000      	movs	r0, #0
 23fbee4:	2100      	movs	r1, #0
 23fbee6:	9301      	str	r3, [sp, #4]
 23fbee8:	e6fb      	b.n	23fbce2 <__kernel_rem_pio2+0x622>
 23fbeea:	ab48      	add	r3, sp, #288	; 0x120
 23fbeec:	2000      	movs	r0, #0
 23fbeee:	2100      	movs	r1, #0
 23fbef0:	9301      	str	r3, [sp, #4]
 23fbef2:	e77c      	b.n	23fbdee <__kernel_rem_pio2+0x72e>
 23fbef4:	2000      	movs	r0, #0
 23fbef6:	2100      	movs	r1, #0
 23fbef8:	e6f3      	b.n	23fbce2 <__kernel_rem_pio2+0x622>
 23fbefa:	bf00      	nop
 23fbefc:	41700000 	.word	0x41700000
 23fbf00:	3e700000 	.word	0x3e700000
 23fbf04:	3ff00000 	.word	0x3ff00000

023fbf08 <__kernel_sin>:
 23fbf08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fbf0c:	ec5b ab10 	vmov	sl, fp, d0
 23fbf10:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 23fbf14:	4680      	mov	r8, r0
 23fbf16:	ed2d 8b02 	vpush	{d8}
 23fbf1a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 23fbf1e:	b083      	sub	sp, #12
 23fbf20:	ed8d 1b00 	vstr	d1, [sp]
 23fbf24:	da07      	bge.n	23fbf36 <__kernel_sin+0x2e>
 23fbf26:	ee10 0a10 	vmov	r0, s0
 23fbf2a:	4659      	mov	r1, fp
 23fbf2c:	f7e6 fe30 	bl	23e2b90 <__aeabi_d2iz>
 23fbf30:	2800      	cmp	r0, #0
 23fbf32:	f000 808e 	beq.w	23fc052 <__kernel_sin+0x14a>
 23fbf36:	4652      	mov	r2, sl
 23fbf38:	465b      	mov	r3, fp
 23fbf3a:	4650      	mov	r0, sl
 23fbf3c:	4659      	mov	r1, fp
 23fbf3e:	f7e6 fb77 	bl	23e2630 <__aeabi_dmul>
 23fbf42:	4604      	mov	r4, r0
 23fbf44:	460d      	mov	r5, r1
 23fbf46:	4650      	mov	r0, sl
 23fbf48:	4622      	mov	r2, r4
 23fbf4a:	4659      	mov	r1, fp
 23fbf4c:	462b      	mov	r3, r5
 23fbf4e:	f7e6 fb6f 	bl	23e2630 <__aeabi_dmul>
 23fbf52:	4606      	mov	r6, r0
 23fbf54:	460f      	mov	r7, r1
 23fbf56:	4620      	mov	r0, r4
 23fbf58:	4629      	mov	r1, r5
 23fbf5a:	a344      	add	r3, pc, #272	; (adr r3, 23fc06c <__kernel_sin+0x164>)
 23fbf5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbf60:	f7e6 fb66 	bl	23e2630 <__aeabi_dmul>
 23fbf64:	a343      	add	r3, pc, #268	; (adr r3, 23fc074 <__kernel_sin+0x16c>)
 23fbf66:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbf6a:	f7e6 f9a9 	bl	23e22c0 <__aeabi_dsub>
 23fbf6e:	4622      	mov	r2, r4
 23fbf70:	462b      	mov	r3, r5
 23fbf72:	f7e6 fb5d 	bl	23e2630 <__aeabi_dmul>
 23fbf76:	a341      	add	r3, pc, #260	; (adr r3, 23fc07c <__kernel_sin+0x174>)
 23fbf78:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbf7c:	f7e6 f9a2 	bl	23e22c4 <__adddf3>
 23fbf80:	4622      	mov	r2, r4
 23fbf82:	462b      	mov	r3, r5
 23fbf84:	f7e6 fb54 	bl	23e2630 <__aeabi_dmul>
 23fbf88:	a33e      	add	r3, pc, #248	; (adr r3, 23fc084 <__kernel_sin+0x17c>)
 23fbf8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbf8e:	f7e6 f997 	bl	23e22c0 <__aeabi_dsub>
 23fbf92:	4622      	mov	r2, r4
 23fbf94:	462b      	mov	r3, r5
 23fbf96:	f7e6 fb4b 	bl	23e2630 <__aeabi_dmul>
 23fbf9a:	a33c      	add	r3, pc, #240	; (adr r3, 23fc08c <__kernel_sin+0x184>)
 23fbf9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbfa0:	f7e6 f990 	bl	23e22c4 <__adddf3>
 23fbfa4:	ec41 0b18 	vmov	d8, r0, r1
 23fbfa8:	f1b8 0f00 	cmp.w	r8, #0
 23fbfac:	d037      	beq.n	23fc01e <__kernel_sin+0x116>
 23fbfae:	2200      	movs	r2, #0
 23fbfb0:	4b2d      	ldr	r3, [pc, #180]	; (23fc068 <__kernel_sin+0x160>)
 23fbfb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 23fbfb6:	f7e6 fb3b 	bl	23e2630 <__aeabi_dmul>
 23fbfba:	4680      	mov	r8, r0
 23fbfbc:	4689      	mov	r9, r1
 23fbfbe:	4630      	mov	r0, r6
 23fbfc0:	4639      	mov	r1, r7
 23fbfc2:	ec53 2b18 	vmov	r2, r3, d8
 23fbfc6:	f7e6 fb33 	bl	23e2630 <__aeabi_dmul>
 23fbfca:	4602      	mov	r2, r0
 23fbfcc:	460b      	mov	r3, r1
 23fbfce:	4640      	mov	r0, r8
 23fbfd0:	4649      	mov	r1, r9
 23fbfd2:	f7e6 f975 	bl	23e22c0 <__aeabi_dsub>
 23fbfd6:	4622      	mov	r2, r4
 23fbfd8:	462b      	mov	r3, r5
 23fbfda:	f7e6 fb29 	bl	23e2630 <__aeabi_dmul>
 23fbfde:	e9dd 2300 	ldrd	r2, r3, [sp]
 23fbfe2:	f7e6 f96d 	bl	23e22c0 <__aeabi_dsub>
 23fbfe6:	4604      	mov	r4, r0
 23fbfe8:	460d      	mov	r5, r1
 23fbfea:	4630      	mov	r0, r6
 23fbfec:	4639      	mov	r1, r7
 23fbfee:	a31c      	add	r3, pc, #112	; (adr r3, 23fc060 <__kernel_sin+0x158>)
 23fbff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbff4:	f7e6 fb1c 	bl	23e2630 <__aeabi_dmul>
 23fbff8:	4602      	mov	r2, r0
 23fbffa:	460b      	mov	r3, r1
 23fbffc:	4620      	mov	r0, r4
 23fbffe:	4629      	mov	r1, r5
 23fc000:	f7e6 f960 	bl	23e22c4 <__adddf3>
 23fc004:	4602      	mov	r2, r0
 23fc006:	460b      	mov	r3, r1
 23fc008:	4650      	mov	r0, sl
 23fc00a:	4659      	mov	r1, fp
 23fc00c:	f7e6 f958 	bl	23e22c0 <__aeabi_dsub>
 23fc010:	ec41 0b10 	vmov	d0, r0, r1
 23fc014:	b003      	add	sp, #12
 23fc016:	ecbd 8b02 	vpop	{d8}
 23fc01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc01e:	4602      	mov	r2, r0
 23fc020:	460b      	mov	r3, r1
 23fc022:	4620      	mov	r0, r4
 23fc024:	4629      	mov	r1, r5
 23fc026:	f7e6 fb03 	bl	23e2630 <__aeabi_dmul>
 23fc02a:	a30d      	add	r3, pc, #52	; (adr r3, 23fc060 <__kernel_sin+0x158>)
 23fc02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc030:	f7e6 f946 	bl	23e22c0 <__aeabi_dsub>
 23fc034:	4632      	mov	r2, r6
 23fc036:	463b      	mov	r3, r7
 23fc038:	f7e6 fafa 	bl	23e2630 <__aeabi_dmul>
 23fc03c:	4652      	mov	r2, sl
 23fc03e:	465b      	mov	r3, fp
 23fc040:	f7e6 f940 	bl	23e22c4 <__adddf3>
 23fc044:	ec41 0b10 	vmov	d0, r0, r1
 23fc048:	b003      	add	sp, #12
 23fc04a:	ecbd 8b02 	vpop	{d8}
 23fc04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc052:	ec4b ab10 	vmov	d0, sl, fp
 23fc056:	b003      	add	sp, #12
 23fc058:	ecbd 8b02 	vpop	{d8}
 23fc05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc060:	55555549 	.word	0x55555549
 23fc064:	3fc55555 	.word	0x3fc55555
 23fc068:	3fe00000 	.word	0x3fe00000
 23fc06c:	5acfd57c 	.word	0x5acfd57c
 23fc070:	3de5d93a 	.word	0x3de5d93a
 23fc074:	8a2b9ceb 	.word	0x8a2b9ceb
 23fc078:	3e5ae5e6 	.word	0x3e5ae5e6
 23fc07c:	57b1fe7d 	.word	0x57b1fe7d
 23fc080:	3ec71de3 	.word	0x3ec71de3
 23fc084:	19c161d5 	.word	0x19c161d5
 23fc088:	3f2a01a0 	.word	0x3f2a01a0
 23fc08c:	1110f8a6 	.word	0x1110f8a6
 23fc090:	3f811111 	.word	0x3f811111

023fc094 <finite>:
 23fc094:	b082      	sub	sp, #8
 23fc096:	4805      	ldr	r0, [pc, #20]	; (23fc0ac <finite+0x18>)
 23fc098:	ed8d 0b00 	vstr	d0, [sp]
 23fc09c:	9b01      	ldr	r3, [sp, #4]
 23fc09e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 23fc0a2:	4418      	add	r0, r3
 23fc0a4:	0fc0      	lsrs	r0, r0, #31
 23fc0a6:	b002      	add	sp, #8
 23fc0a8:	4770      	bx	lr
 23fc0aa:	bf00      	nop
 23fc0ac:	80100000 	.word	0x80100000

023fc0b0 <floor>:
 23fc0b0:	ec51 0b10 	vmov	r0, r1, d0
 23fc0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc0b6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 23fc0ba:	460c      	mov	r4, r1
 23fc0bc:	ee10 6a10 	vmov	r6, s0
 23fc0c0:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
 23fc0c4:	2d13      	cmp	r5, #19
 23fc0c6:	dc30      	bgt.n	23fc12a <floor+0x7a>
 23fc0c8:	2d00      	cmp	r5, #0
 23fc0ca:	db1e      	blt.n	23fc10a <floor+0x5a>
 23fc0cc:	4f38      	ldr	r7, [pc, #224]	; (23fc1b0 <floor+0x100>)
 23fc0ce:	412f      	asrs	r7, r5
 23fc0d0:	ea01 0307 	and.w	r3, r1, r7
 23fc0d4:	4303      	orrs	r3, r0
 23fc0d6:	d02d      	beq.n	23fc134 <floor+0x84>
 23fc0d8:	a333      	add	r3, pc, #204	; (adr r3, 23fc1a8 <floor+0xf8>)
 23fc0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc0de:	f7e6 f8f1 	bl	23e22c4 <__adddf3>
 23fc0e2:	2200      	movs	r2, #0
 23fc0e4:	2300      	movs	r3, #0
 23fc0e6:	f7e6 fd33 	bl	23e2b50 <__aeabi_dcmpgt>
 23fc0ea:	b148      	cbz	r0, 23fc100 <floor+0x50>
 23fc0ec:	2c00      	cmp	r4, #0
 23fc0ee:	da04      	bge.n	23fc0fa <floor+0x4a>
 23fc0f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 23fc0f4:	fa43 f505 	asr.w	r5, r3, r5
 23fc0f8:	442c      	add	r4, r5
 23fc0fa:	ea24 0407 	bic.w	r4, r4, r7
 23fc0fe:	2600      	movs	r6, #0
 23fc100:	4623      	mov	r3, r4
 23fc102:	4632      	mov	r2, r6
 23fc104:	ec43 2b10 	vmov	d0, r2, r3
 23fc108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fc10a:	a327      	add	r3, pc, #156	; (adr r3, 23fc1a8 <floor+0xf8>)
 23fc10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc110:	f7e6 f8d8 	bl	23e22c4 <__adddf3>
 23fc114:	2200      	movs	r2, #0
 23fc116:	2300      	movs	r3, #0
 23fc118:	f7e6 fd1a 	bl	23e2b50 <__aeabi_dcmpgt>
 23fc11c:	2800      	cmp	r0, #0
 23fc11e:	d0ef      	beq.n	23fc100 <floor+0x50>
 23fc120:	2c00      	cmp	r4, #0
 23fc122:	db29      	blt.n	23fc178 <floor+0xc8>
 23fc124:	2600      	movs	r6, #0
 23fc126:	4634      	mov	r4, r6
 23fc128:	e7ea      	b.n	23fc100 <floor+0x50>
 23fc12a:	2d33      	cmp	r5, #51	; 0x33
 23fc12c:	dd05      	ble.n	23fc13a <floor+0x8a>
 23fc12e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 23fc132:	d019      	beq.n	23fc168 <floor+0xb8>
 23fc134:	ec41 0b10 	vmov	d0, r0, r1
 23fc138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fc13a:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 23fc13e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 23fc142:	40df      	lsrs	r7, r3
 23fc144:	4207      	tst	r7, r0
 23fc146:	d0f5      	beq.n	23fc134 <floor+0x84>
 23fc148:	a317      	add	r3, pc, #92	; (adr r3, 23fc1a8 <floor+0xf8>)
 23fc14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc14e:	f7e6 f8b9 	bl	23e22c4 <__adddf3>
 23fc152:	2200      	movs	r2, #0
 23fc154:	2300      	movs	r3, #0
 23fc156:	f7e6 fcfb 	bl	23e2b50 <__aeabi_dcmpgt>
 23fc15a:	2800      	cmp	r0, #0
 23fc15c:	d0d0      	beq.n	23fc100 <floor+0x50>
 23fc15e:	2c00      	cmp	r4, #0
 23fc160:	db13      	blt.n	23fc18a <floor+0xda>
 23fc162:	ea26 0607 	bic.w	r6, r6, r7
 23fc166:	e7cb      	b.n	23fc100 <floor+0x50>
 23fc168:	ee10 2a10 	vmov	r2, s0
 23fc16c:	460b      	mov	r3, r1
 23fc16e:	f7e6 f8a9 	bl	23e22c4 <__adddf3>
 23fc172:	ec41 0b10 	vmov	d0, r0, r1
 23fc176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fc178:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 23fc17c:	4a0d      	ldr	r2, [pc, #52]	; (23fc1b4 <floor+0x104>)
 23fc17e:	4333      	orrs	r3, r6
 23fc180:	2600      	movs	r6, #0
 23fc182:	42b3      	cmp	r3, r6
 23fc184:	bf18      	it	ne
 23fc186:	4614      	movne	r4, r2
 23fc188:	e7ba      	b.n	23fc100 <floor+0x50>
 23fc18a:	2d14      	cmp	r5, #20
 23fc18c:	d008      	beq.n	23fc1a0 <floor+0xf0>
 23fc18e:	2301      	movs	r3, #1
 23fc190:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 23fc194:	fa03 f505 	lsl.w	r5, r3, r5
 23fc198:	19ae      	adds	r6, r5, r6
 23fc19a:	bf28      	it	cs
 23fc19c:	18e4      	addcs	r4, r4, r3
 23fc19e:	e7e0      	b.n	23fc162 <floor+0xb2>
 23fc1a0:	3401      	adds	r4, #1
 23fc1a2:	e7de      	b.n	23fc162 <floor+0xb2>
 23fc1a4:	f3af 8000 	nop.w
 23fc1a8:	8800759c 	.word	0x8800759c
 23fc1ac:	7e37e43c 	.word	0x7e37e43c
 23fc1b0:	000fffff 	.word	0x000fffff
 23fc1b4:	bff00000 	.word	0xbff00000

023fc1b8 <nan>:
 23fc1b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 23fc1c0 <nan+0x8>
 23fc1bc:	4770      	bx	lr
 23fc1be:	bf00      	nop
 23fc1c0:	00000000 	.word	0x00000000
 23fc1c4:	7ff80000 	.word	0x7ff80000

023fc1c8 <rint>:
 23fc1c8:	ec53 2b10 	vmov	r2, r3, d0
 23fc1cc:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
 23fc1d0:	ee10 0a10 	vmov	r0, s0
 23fc1d4:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
 23fc1d8:	2913      	cmp	r1, #19
 23fc1da:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc1dc:	461c      	mov	r4, r3
 23fc1de:	b083      	sub	sp, #12
 23fc1e0:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
 23fc1e4:	dc3a      	bgt.n	23fc25c <rint+0x94>
 23fc1e6:	2900      	cmp	r1, #0
 23fc1e8:	db30      	blt.n	23fc24c <rint+0x84>
 23fc1ea:	4d42      	ldr	r5, [pc, #264]	; (23fc2f4 <rint+0x12c>)
 23fc1ec:	fa45 fc01 	asr.w	ip, r5, r1
 23fc1f0:	ea03 050c 	and.w	r5, r3, ip
 23fc1f4:	4315      	orrs	r5, r2
 23fc1f6:	d02d      	beq.n	23fc254 <rint+0x8c>
 23fc1f8:	ea03 035c 	and.w	r3, r3, ip, lsr #1
 23fc1fc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 23fc200:	4318      	orrs	r0, r3
 23fc202:	d00c      	beq.n	23fc21e <rint+0x56>
 23fc204:	ea24 0c0c 	bic.w	ip, r4, ip
 23fc208:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 23fc20c:	2913      	cmp	r1, #19
 23fc20e:	fa44 f101 	asr.w	r1, r4, r1
 23fc212:	bf0c      	ite	eq
 23fc214:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
 23fc218:	2000      	movne	r0, #0
 23fc21a:	ea4c 0401 	orr.w	r4, ip, r1
 23fc21e:	4936      	ldr	r1, [pc, #216]	; (23fc2f8 <rint+0x130>)
 23fc220:	4623      	mov	r3, r4
 23fc222:	4602      	mov	r2, r0
 23fc224:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
 23fc228:	e9de 4500 	ldrd	r4, r5, [lr]
 23fc22c:	4620      	mov	r0, r4
 23fc22e:	4629      	mov	r1, r5
 23fc230:	f7e6 f848 	bl	23e22c4 <__adddf3>
 23fc234:	4622      	mov	r2, r4
 23fc236:	462b      	mov	r3, r5
 23fc238:	e9cd 0100 	strd	r0, r1, [sp]
 23fc23c:	e9dd 0100 	ldrd	r0, r1, [sp]
 23fc240:	f7e6 f83e 	bl	23e22c0 <__aeabi_dsub>
 23fc244:	ec41 0b10 	vmov	d0, r0, r1
 23fc248:	b003      	add	sp, #12
 23fc24a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fc24c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 23fc250:	4311      	orrs	r1, r2
 23fc252:	d124      	bne.n	23fc29e <rint+0xd6>
 23fc254:	ec43 2b10 	vmov	d0, r2, r3
 23fc258:	b003      	add	sp, #12
 23fc25a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fc25c:	2933      	cmp	r1, #51	; 0x33
 23fc25e:	dd08      	ble.n	23fc272 <rint+0xaa>
 23fc260:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 23fc264:	d1f6      	bne.n	23fc254 <rint+0x8c>
 23fc266:	4619      	mov	r1, r3
 23fc268:	f7e6 f82c 	bl	23e22c4 <__adddf3>
 23fc26c:	ec41 0b10 	vmov	d0, r0, r1
 23fc270:	e7f2      	b.n	23fc258 <rint+0x90>
 23fc272:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 23fc276:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 23fc27a:	fa21 f10c 	lsr.w	r1, r1, ip
 23fc27e:	420a      	tst	r2, r1
 23fc280:	d0e8      	beq.n	23fc254 <rint+0x8c>
 23fc282:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 23fc286:	ea4f 0351 	mov.w	r3, r1, lsr #1
 23fc28a:	d0c8      	beq.n	23fc21e <rint+0x56>
 23fc28c:	ea20 0303 	bic.w	r3, r0, r3
 23fc290:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 23fc294:	fa40 fc0c 	asr.w	ip, r0, ip
 23fc298:	ea43 000c 	orr.w	r0, r3, ip
 23fc29c:	e7bf      	b.n	23fc21e <rint+0x56>
 23fc29e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 23fc2a2:	4a16      	ldr	r2, [pc, #88]	; (23fc2fc <rint+0x134>)
 23fc2a4:	4318      	orrs	r0, r3
 23fc2a6:	4022      	ands	r2, r4
 23fc2a8:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 23fc2ac:	4243      	negs	r3, r0
 23fc2ae:	4303      	orrs	r3, r0
 23fc2b0:	0b1b      	lsrs	r3, r3, #12
 23fc2b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 23fc2b6:	ea43 0702 	orr.w	r7, r3, r2
 23fc2ba:	4b0f      	ldr	r3, [pc, #60]	; (23fc2f8 <rint+0x130>)
 23fc2bc:	ee10 2a10 	vmov	r2, s0
 23fc2c0:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
 23fc2c4:	463b      	mov	r3, r7
 23fc2c6:	e9de 6700 	ldrd	r6, r7, [lr]
 23fc2ca:	4630      	mov	r0, r6
 23fc2cc:	4639      	mov	r1, r7
 23fc2ce:	f7e5 fff9 	bl	23e22c4 <__adddf3>
 23fc2d2:	4632      	mov	r2, r6
 23fc2d4:	463b      	mov	r3, r7
 23fc2d6:	e9cd 0100 	strd	r0, r1, [sp]
 23fc2da:	e9dd 0100 	ldrd	r0, r1, [sp]
 23fc2de:	f7e5 ffef 	bl	23e22c0 <__aeabi_dsub>
 23fc2e2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fc2e6:	4602      	mov	r2, r0
 23fc2e8:	ea41 0304 	orr.w	r3, r1, r4
 23fc2ec:	ec43 2b10 	vmov	d0, r2, r3
 23fc2f0:	b003      	add	sp, #12
 23fc2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fc2f4:	000fffff 	.word	0x000fffff
 23fc2f8:	023ffd88 	.word	0x023ffd88
 23fc2fc:	fffe0000 	.word	0xfffe0000

023fc300 <asctime_r>:
 23fc300:	b510      	push	{r4, lr}
 23fc302:	460c      	mov	r4, r1
 23fc304:	6941      	ldr	r1, [r0, #20]
 23fc306:	b086      	sub	sp, #24
 23fc308:	6903      	ldr	r3, [r0, #16]
 23fc30a:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 23fc30e:	6982      	ldr	r2, [r0, #24]
 23fc310:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23fc314:	9104      	str	r1, [sp, #16]
 23fc316:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 23fc31a:	6801      	ldr	r1, [r0, #0]
 23fc31c:	9103      	str	r1, [sp, #12]
 23fc31e:	6841      	ldr	r1, [r0, #4]
 23fc320:	9102      	str	r1, [sp, #8]
 23fc322:	6881      	ldr	r1, [r0, #8]
 23fc324:	9101      	str	r1, [sp, #4]
 23fc326:	68c1      	ldr	r1, [r0, #12]
 23fc328:	4620      	mov	r0, r4
 23fc32a:	9100      	str	r1, [sp, #0]
 23fc32c:	4904      	ldr	r1, [pc, #16]	; (23fc340 <asctime_r+0x40>)
 23fc32e:	440b      	add	r3, r1
 23fc330:	4904      	ldr	r1, [pc, #16]	; (23fc344 <asctime_r+0x44>)
 23fc332:	440a      	add	r2, r1
 23fc334:	4904      	ldr	r1, [pc, #16]	; (23fc348 <asctime_r+0x48>)
 23fc336:	f7fa ff3d 	bl	23f71b4 <siprintf>
 23fc33a:	4620      	mov	r0, r4
 23fc33c:	b006      	add	sp, #24
 23fc33e:	bd10      	pop	{r4, pc}
 23fc340:	023ffdcd 	.word	0x023ffdcd
 23fc344:	023ffdb8 	.word	0x023ffdb8
 23fc348:	023ffd98 	.word	0x023ffd98

023fc34c <atexit>:
 23fc34c:	2300      	movs	r3, #0
 23fc34e:	4601      	mov	r1, r0
 23fc350:	461a      	mov	r2, r3
 23fc352:	4618      	mov	r0, r3
 23fc354:	f7e6 bff0 	b.w	23e3338 <__register_exitproc>

023fc358 <atoi>:
 23fc358:	220a      	movs	r2, #10
 23fc35a:	2100      	movs	r1, #0
 23fc35c:	f000 b9c6 	b.w	23fc6ec <strtol>

023fc360 <gmtime>:
 23fc360:	b538      	push	{r3, r4, r5, lr}
 23fc362:	4b0b      	ldr	r3, [pc, #44]	; (23fc390 <gmtime+0x30>)
 23fc364:	4604      	mov	r4, r0
 23fc366:	681d      	ldr	r5, [r3, #0]
 23fc368:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 23fc36a:	b953      	cbnz	r3, 23fc382 <gmtime+0x22>
 23fc36c:	2024      	movs	r0, #36	; 0x24
 23fc36e:	f7fa fee9 	bl	23f7144 <malloc>
 23fc372:	4602      	mov	r2, r0
 23fc374:	63e8      	str	r0, [r5, #60]	; 0x3c
 23fc376:	b920      	cbnz	r0, 23fc382 <gmtime+0x22>
 23fc378:	4b06      	ldr	r3, [pc, #24]	; (23fc394 <gmtime+0x34>)
 23fc37a:	2139      	movs	r1, #57	; 0x39
 23fc37c:	4806      	ldr	r0, [pc, #24]	; (23fc398 <gmtime+0x38>)
 23fc37e:	f7fa ff7b 	bl	23f7278 <__assert_func>
 23fc382:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 23fc384:	4620      	mov	r0, r4
 23fc386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fc38a:	f7fa bfad 	b.w	23f72e8 <gmtime_r>
 23fc38e:	bf00      	nop
 23fc390:	1006a1c0 	.word	0x1006a1c0
 23fc394:	023ffdf1 	.word	0x023ffdf1
 23fc398:	023ffe08 	.word	0x023ffe08

023fc39c <isprint>:
 23fc39c:	4b02      	ldr	r3, [pc, #8]	; (23fc3a8 <isprint+0xc>)
 23fc39e:	4418      	add	r0, r3
 23fc3a0:	7840      	ldrb	r0, [r0, #1]
 23fc3a2:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23fc3a6:	4770      	bx	lr
 23fc3a8:	023ffeba 	.word	0x023ffeba

023fc3ac <memcmp>:
 23fc3ac:	3901      	subs	r1, #1
 23fc3ae:	4402      	add	r2, r0
 23fc3b0:	b510      	push	{r4, lr}
 23fc3b2:	4290      	cmp	r0, r2
 23fc3b4:	d101      	bne.n	23fc3ba <memcmp+0xe>
 23fc3b6:	2000      	movs	r0, #0
 23fc3b8:	e005      	b.n	23fc3c6 <memcmp+0x1a>
 23fc3ba:	7803      	ldrb	r3, [r0, #0]
 23fc3bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 23fc3c0:	42a3      	cmp	r3, r4
 23fc3c2:	d001      	beq.n	23fc3c8 <memcmp+0x1c>
 23fc3c4:	1b18      	subs	r0, r3, r4
 23fc3c6:	bd10      	pop	{r4, pc}
 23fc3c8:	3001      	adds	r0, #1
 23fc3ca:	e7f2      	b.n	23fc3b2 <memcmp+0x6>

023fc3cc <memcpy>:
 23fc3cc:	440a      	add	r2, r1
 23fc3ce:	1e43      	subs	r3, r0, #1
 23fc3d0:	4291      	cmp	r1, r2
 23fc3d2:	d100      	bne.n	23fc3d6 <memcpy+0xa>
 23fc3d4:	4770      	bx	lr
 23fc3d6:	b510      	push	{r4, lr}
 23fc3d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fc3dc:	4291      	cmp	r1, r2
 23fc3de:	f803 4f01 	strb.w	r4, [r3, #1]!
 23fc3e2:	d1f9      	bne.n	23fc3d8 <memcpy+0xc>
 23fc3e4:	bd10      	pop	{r4, pc}

023fc3e6 <memset>:
 23fc3e6:	4402      	add	r2, r0
 23fc3e8:	4603      	mov	r3, r0
 23fc3ea:	4293      	cmp	r3, r2
 23fc3ec:	d100      	bne.n	23fc3f0 <memset+0xa>
 23fc3ee:	4770      	bx	lr
 23fc3f0:	f803 1b01 	strb.w	r1, [r3], #1
 23fc3f4:	e7f9      	b.n	23fc3ea <memset+0x4>
	...

023fc3f8 <srand>:
 23fc3f8:	b538      	push	{r3, r4, r5, lr}
 23fc3fa:	4b10      	ldr	r3, [pc, #64]	; (23fc43c <srand+0x44>)
 23fc3fc:	4604      	mov	r4, r0
 23fc3fe:	681d      	ldr	r5, [r3, #0]
 23fc400:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fc402:	b9b3      	cbnz	r3, 23fc432 <srand+0x3a>
 23fc404:	2018      	movs	r0, #24
 23fc406:	f7fa fe9d 	bl	23f7144 <malloc>
 23fc40a:	4602      	mov	r2, r0
 23fc40c:	63a8      	str	r0, [r5, #56]	; 0x38
 23fc40e:	b920      	cbnz	r0, 23fc41a <srand+0x22>
 23fc410:	4b0b      	ldr	r3, [pc, #44]	; (23fc440 <srand+0x48>)
 23fc412:	2142      	movs	r1, #66	; 0x42
 23fc414:	480b      	ldr	r0, [pc, #44]	; (23fc444 <srand+0x4c>)
 23fc416:	f7fa ff2f 	bl	23f7278 <__assert_func>
 23fc41a:	490b      	ldr	r1, [pc, #44]	; (23fc448 <srand+0x50>)
 23fc41c:	4b0b      	ldr	r3, [pc, #44]	; (23fc44c <srand+0x54>)
 23fc41e:	e9c0 1300 	strd	r1, r3, [r0]
 23fc422:	4b0b      	ldr	r3, [pc, #44]	; (23fc450 <srand+0x58>)
 23fc424:	2100      	movs	r1, #0
 23fc426:	6083      	str	r3, [r0, #8]
 23fc428:	230b      	movs	r3, #11
 23fc42a:	8183      	strh	r3, [r0, #12]
 23fc42c:	2001      	movs	r0, #1
 23fc42e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23fc432:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fc434:	2200      	movs	r2, #0
 23fc436:	611c      	str	r4, [r3, #16]
 23fc438:	615a      	str	r2, [r3, #20]
 23fc43a:	bd38      	pop	{r3, r4, r5, pc}
 23fc43c:	1006a1c0 	.word	0x1006a1c0
 23fc440:	023ffdf1 	.word	0x023ffdf1
 23fc444:	023ffe61 	.word	0x023ffe61
 23fc448:	abcd330e 	.word	0xabcd330e
 23fc44c:	e66d1234 	.word	0xe66d1234
 23fc450:	0005deec 	.word	0x0005deec

023fc454 <rand>:
 23fc454:	4b16      	ldr	r3, [pc, #88]	; (23fc4b0 <rand+0x5c>)
 23fc456:	b510      	push	{r4, lr}
 23fc458:	681c      	ldr	r4, [r3, #0]
 23fc45a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23fc45c:	b9b3      	cbnz	r3, 23fc48c <rand+0x38>
 23fc45e:	2018      	movs	r0, #24
 23fc460:	f7fa fe70 	bl	23f7144 <malloc>
 23fc464:	63a0      	str	r0, [r4, #56]	; 0x38
 23fc466:	b928      	cbnz	r0, 23fc474 <rand+0x20>
 23fc468:	4602      	mov	r2, r0
 23fc46a:	4b12      	ldr	r3, [pc, #72]	; (23fc4b4 <rand+0x60>)
 23fc46c:	214e      	movs	r1, #78	; 0x4e
 23fc46e:	4812      	ldr	r0, [pc, #72]	; (23fc4b8 <rand+0x64>)
 23fc470:	f7fa ff02 	bl	23f7278 <__assert_func>
 23fc474:	4a11      	ldr	r2, [pc, #68]	; (23fc4bc <rand+0x68>)
 23fc476:	4b12      	ldr	r3, [pc, #72]	; (23fc4c0 <rand+0x6c>)
 23fc478:	e9c0 2300 	strd	r2, r3, [r0]
 23fc47c:	4b11      	ldr	r3, [pc, #68]	; (23fc4c4 <rand+0x70>)
 23fc47e:	2201      	movs	r2, #1
 23fc480:	6083      	str	r3, [r0, #8]
 23fc482:	230b      	movs	r3, #11
 23fc484:	8183      	strh	r3, [r0, #12]
 23fc486:	2300      	movs	r3, #0
 23fc488:	e9c0 2304 	strd	r2, r3, [r0, #16]
 23fc48c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 23fc48e:	4a0e      	ldr	r2, [pc, #56]	; (23fc4c8 <rand+0x74>)
 23fc490:	6920      	ldr	r0, [r4, #16]
 23fc492:	6963      	ldr	r3, [r4, #20]
 23fc494:	490d      	ldr	r1, [pc, #52]	; (23fc4cc <rand+0x78>)
 23fc496:	4342      	muls	r2, r0
 23fc498:	fb01 2203 	mla	r2, r1, r3, r2
 23fc49c:	fba0 0101 	umull	r0, r1, r0, r1
 23fc4a0:	1c43      	adds	r3, r0, #1
 23fc4a2:	eb42 0001 	adc.w	r0, r2, r1
 23fc4a6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 23fc4aa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 23fc4ae:	bd10      	pop	{r4, pc}
 23fc4b0:	1006a1c0 	.word	0x1006a1c0
 23fc4b4:	023ffdf1 	.word	0x023ffdf1
 23fc4b8:	023ffe61 	.word	0x023ffe61
 23fc4bc:	abcd330e 	.word	0xabcd330e
 23fc4c0:	e66d1234 	.word	0xe66d1234
 23fc4c4:	0005deec 	.word	0x0005deec
 23fc4c8:	5851f42d 	.word	0x5851f42d
 23fc4cc:	4c957f2d 	.word	0x4c957f2d

023fc4d0 <strcpy>:
 23fc4d0:	4603      	mov	r3, r0
 23fc4d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fc4d6:	f803 2b01 	strb.w	r2, [r3], #1
 23fc4da:	2a00      	cmp	r2, #0
 23fc4dc:	d1f9      	bne.n	23fc4d2 <strcpy+0x2>
 23fc4de:	4770      	bx	lr

023fc4e0 <strdup>:
 23fc4e0:	4b02      	ldr	r3, [pc, #8]	; (23fc4ec <strdup+0xc>)
 23fc4e2:	4601      	mov	r1, r0
 23fc4e4:	6818      	ldr	r0, [r3, #0]
 23fc4e6:	f000 b803 	b.w	23fc4f0 <_strdup_r>
 23fc4ea:	bf00      	nop
 23fc4ec:	1006a1c0 	.word	0x1006a1c0

023fc4f0 <_strdup_r>:
 23fc4f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc4f2:	4604      	mov	r4, r0
 23fc4f4:	4608      	mov	r0, r1
 23fc4f6:	460d      	mov	r5, r1
 23fc4f8:	f7e6 feda 	bl	23e32b0 <strlen>
 23fc4fc:	1c42      	adds	r2, r0, #1
 23fc4fe:	4620      	mov	r0, r4
 23fc500:	4611      	mov	r1, r2
 23fc502:	9201      	str	r2, [sp, #4]
 23fc504:	f7fa fe9c 	bl	23f7240 <_malloc_r>
 23fc508:	4604      	mov	r4, r0
 23fc50a:	b118      	cbz	r0, 23fc514 <_strdup_r+0x24>
 23fc50c:	9a01      	ldr	r2, [sp, #4]
 23fc50e:	4629      	mov	r1, r5
 23fc510:	f7ff ff5c 	bl	23fc3cc <memcpy>
 23fc514:	4620      	mov	r0, r4
 23fc516:	b003      	add	sp, #12
 23fc518:	bd30      	pop	{r4, r5, pc}

023fc51a <strlcpy>:
 23fc51a:	460b      	mov	r3, r1
 23fc51c:	b510      	push	{r4, lr}
 23fc51e:	b162      	cbz	r2, 23fc53a <strlcpy+0x20>
 23fc520:	3a01      	subs	r2, #1
 23fc522:	d008      	beq.n	23fc536 <strlcpy+0x1c>
 23fc524:	f813 4b01 	ldrb.w	r4, [r3], #1
 23fc528:	f800 4b01 	strb.w	r4, [r0], #1
 23fc52c:	2c00      	cmp	r4, #0
 23fc52e:	d1f7      	bne.n	23fc520 <strlcpy+0x6>
 23fc530:	1a58      	subs	r0, r3, r1
 23fc532:	3801      	subs	r0, #1
 23fc534:	bd10      	pop	{r4, pc}
 23fc536:	2200      	movs	r2, #0
 23fc538:	7002      	strb	r2, [r0, #0]
 23fc53a:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fc53e:	2a00      	cmp	r2, #0
 23fc540:	d1fb      	bne.n	23fc53a <strlcpy+0x20>
 23fc542:	e7f5      	b.n	23fc530 <strlcpy+0x16>

023fc544 <strncmp>:
 23fc544:	b510      	push	{r4, lr}
 23fc546:	b17a      	cbz	r2, 23fc568 <strncmp+0x24>
 23fc548:	4603      	mov	r3, r0
 23fc54a:	3901      	subs	r1, #1
 23fc54c:	1884      	adds	r4, r0, r2
 23fc54e:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fc552:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23fc556:	4290      	cmp	r0, r2
 23fc558:	d101      	bne.n	23fc55e <strncmp+0x1a>
 23fc55a:	42a3      	cmp	r3, r4
 23fc55c:	d101      	bne.n	23fc562 <strncmp+0x1e>
 23fc55e:	1a80      	subs	r0, r0, r2
 23fc560:	bd10      	pop	{r4, pc}
 23fc562:	2800      	cmp	r0, #0
 23fc564:	d1f3      	bne.n	23fc54e <strncmp+0xa>
 23fc566:	e7fa      	b.n	23fc55e <strncmp+0x1a>
 23fc568:	4610      	mov	r0, r2
 23fc56a:	e7f9      	b.n	23fc560 <strncmp+0x1c>

023fc56c <strncpy>:
 23fc56c:	3901      	subs	r1, #1
 23fc56e:	4603      	mov	r3, r0
 23fc570:	b510      	push	{r4, lr}
 23fc572:	b132      	cbz	r2, 23fc582 <strncpy+0x16>
 23fc574:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 23fc578:	3a01      	subs	r2, #1
 23fc57a:	f803 4b01 	strb.w	r4, [r3], #1
 23fc57e:	2c00      	cmp	r4, #0
 23fc580:	d1f7      	bne.n	23fc572 <strncpy+0x6>
 23fc582:	441a      	add	r2, r3
 23fc584:	2100      	movs	r1, #0
 23fc586:	4293      	cmp	r3, r2
 23fc588:	d100      	bne.n	23fc58c <strncpy+0x20>
 23fc58a:	bd10      	pop	{r4, pc}
 23fc58c:	f803 1b01 	strb.w	r1, [r3], #1
 23fc590:	e7f9      	b.n	23fc586 <strncpy+0x1a>

023fc592 <__strtok_r>:
 23fc592:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc594:	b908      	cbnz	r0, 23fc59a <__strtok_r+0x8>
 23fc596:	6810      	ldr	r0, [r2, #0]
 23fc598:	b188      	cbz	r0, 23fc5be <__strtok_r+0x2c>
 23fc59a:	4604      	mov	r4, r0
 23fc59c:	4620      	mov	r0, r4
 23fc59e:	460f      	mov	r7, r1
 23fc5a0:	f814 5b01 	ldrb.w	r5, [r4], #1
 23fc5a4:	f817 6b01 	ldrb.w	r6, [r7], #1
 23fc5a8:	b91e      	cbnz	r6, 23fc5b2 <__strtok_r+0x20>
 23fc5aa:	b965      	cbnz	r5, 23fc5c6 <__strtok_r+0x34>
 23fc5ac:	4628      	mov	r0, r5
 23fc5ae:	6015      	str	r5, [r2, #0]
 23fc5b0:	e005      	b.n	23fc5be <__strtok_r+0x2c>
 23fc5b2:	42b5      	cmp	r5, r6
 23fc5b4:	d1f6      	bne.n	23fc5a4 <__strtok_r+0x12>
 23fc5b6:	2b00      	cmp	r3, #0
 23fc5b8:	d1f0      	bne.n	23fc59c <__strtok_r+0xa>
 23fc5ba:	6014      	str	r4, [r2, #0]
 23fc5bc:	7003      	strb	r3, [r0, #0]
 23fc5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fc5c0:	461c      	mov	r4, r3
 23fc5c2:	e00c      	b.n	23fc5de <__strtok_r+0x4c>
 23fc5c4:	b915      	cbnz	r5, 23fc5cc <__strtok_r+0x3a>
 23fc5c6:	f814 3b01 	ldrb.w	r3, [r4], #1
 23fc5ca:	460e      	mov	r6, r1
 23fc5cc:	f816 5b01 	ldrb.w	r5, [r6], #1
 23fc5d0:	42ab      	cmp	r3, r5
 23fc5d2:	d1f7      	bne.n	23fc5c4 <__strtok_r+0x32>
 23fc5d4:	2b00      	cmp	r3, #0
 23fc5d6:	d0f3      	beq.n	23fc5c0 <__strtok_r+0x2e>
 23fc5d8:	2300      	movs	r3, #0
 23fc5da:	f804 3c01 	strb.w	r3, [r4, #-1]
 23fc5de:	6014      	str	r4, [r2, #0]
 23fc5e0:	e7ed      	b.n	23fc5be <__strtok_r+0x2c>

023fc5e2 <strtok_r>:
 23fc5e2:	2301      	movs	r3, #1
 23fc5e4:	f7ff bfd5 	b.w	23fc592 <__strtok_r>

023fc5e8 <_strtol_l.constprop.0>:
 23fc5e8:	2b01      	cmp	r3, #1
 23fc5ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fc5ee:	d001      	beq.n	23fc5f4 <_strtol_l.constprop.0+0xc>
 23fc5f0:	2b24      	cmp	r3, #36	; 0x24
 23fc5f2:	d906      	bls.n	23fc602 <_strtol_l.constprop.0+0x1a>
 23fc5f4:	f7fa fe32 	bl	23f725c <__errno>
 23fc5f8:	2316      	movs	r3, #22
 23fc5fa:	6003      	str	r3, [r0, #0]
 23fc5fc:	2000      	movs	r0, #0
 23fc5fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fc602:	460d      	mov	r5, r1
 23fc604:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23fc6e8 <_strtol_l.constprop.0+0x100>
 23fc608:	462e      	mov	r6, r5
 23fc60a:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fc60e:	f814 700c 	ldrb.w	r7, [r4, ip]
 23fc612:	f017 0708 	ands.w	r7, r7, #8
 23fc616:	d1f7      	bne.n	23fc608 <_strtol_l.constprop.0+0x20>
 23fc618:	2c2d      	cmp	r4, #45	; 0x2d
 23fc61a:	d132      	bne.n	23fc682 <_strtol_l.constprop.0+0x9a>
 23fc61c:	782c      	ldrb	r4, [r5, #0]
 23fc61e:	2701      	movs	r7, #1
 23fc620:	1cb5      	adds	r5, r6, #2
 23fc622:	2b00      	cmp	r3, #0
 23fc624:	d05b      	beq.n	23fc6de <_strtol_l.constprop.0+0xf6>
 23fc626:	2b10      	cmp	r3, #16
 23fc628:	d109      	bne.n	23fc63e <_strtol_l.constprop.0+0x56>
 23fc62a:	2c30      	cmp	r4, #48	; 0x30
 23fc62c:	d107      	bne.n	23fc63e <_strtol_l.constprop.0+0x56>
 23fc62e:	782c      	ldrb	r4, [r5, #0]
 23fc630:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23fc634:	2c58      	cmp	r4, #88	; 0x58
 23fc636:	d14d      	bne.n	23fc6d4 <_strtol_l.constprop.0+0xec>
 23fc638:	786c      	ldrb	r4, [r5, #1]
 23fc63a:	2310      	movs	r3, #16
 23fc63c:	3502      	adds	r5, #2
 23fc63e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23fc642:	f04f 0c00 	mov.w	ip, #0
 23fc646:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23fc64a:	4666      	mov	r6, ip
 23fc64c:	fbb8 f9f3 	udiv	r9, r8, r3
 23fc650:	fb03 8a19 	mls	sl, r3, r9, r8
 23fc654:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23fc658:	f1be 0f09 	cmp.w	lr, #9
 23fc65c:	d816      	bhi.n	23fc68c <_strtol_l.constprop.0+0xa4>
 23fc65e:	4674      	mov	r4, lr
 23fc660:	42a3      	cmp	r3, r4
 23fc662:	dd24      	ble.n	23fc6ae <_strtol_l.constprop.0+0xc6>
 23fc664:	f1bc 0f00 	cmp.w	ip, #0
 23fc668:	db1e      	blt.n	23fc6a8 <_strtol_l.constprop.0+0xc0>
 23fc66a:	45b1      	cmp	r9, r6
 23fc66c:	d31c      	bcc.n	23fc6a8 <_strtol_l.constprop.0+0xc0>
 23fc66e:	d101      	bne.n	23fc674 <_strtol_l.constprop.0+0x8c>
 23fc670:	45a2      	cmp	sl, r4
 23fc672:	db19      	blt.n	23fc6a8 <_strtol_l.constprop.0+0xc0>
 23fc674:	fb06 4603 	mla	r6, r6, r3, r4
 23fc678:	f04f 0c01 	mov.w	ip, #1
 23fc67c:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fc680:	e7e8      	b.n	23fc654 <_strtol_l.constprop.0+0x6c>
 23fc682:	2c2b      	cmp	r4, #43	; 0x2b
 23fc684:	bf04      	itt	eq
 23fc686:	782c      	ldrbeq	r4, [r5, #0]
 23fc688:	1cb5      	addeq	r5, r6, #2
 23fc68a:	e7ca      	b.n	23fc622 <_strtol_l.constprop.0+0x3a>
 23fc68c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23fc690:	f1be 0f19 	cmp.w	lr, #25
 23fc694:	d801      	bhi.n	23fc69a <_strtol_l.constprop.0+0xb2>
 23fc696:	3c37      	subs	r4, #55	; 0x37
 23fc698:	e7e2      	b.n	23fc660 <_strtol_l.constprop.0+0x78>
 23fc69a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23fc69e:	f1be 0f19 	cmp.w	lr, #25
 23fc6a2:	d804      	bhi.n	23fc6ae <_strtol_l.constprop.0+0xc6>
 23fc6a4:	3c57      	subs	r4, #87	; 0x57
 23fc6a6:	e7db      	b.n	23fc660 <_strtol_l.constprop.0+0x78>
 23fc6a8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fc6ac:	e7e6      	b.n	23fc67c <_strtol_l.constprop.0+0x94>
 23fc6ae:	f1bc 0f00 	cmp.w	ip, #0
 23fc6b2:	da05      	bge.n	23fc6c0 <_strtol_l.constprop.0+0xd8>
 23fc6b4:	2322      	movs	r3, #34	; 0x22
 23fc6b6:	4646      	mov	r6, r8
 23fc6b8:	6003      	str	r3, [r0, #0]
 23fc6ba:	b942      	cbnz	r2, 23fc6ce <_strtol_l.constprop.0+0xe6>
 23fc6bc:	4630      	mov	r0, r6
 23fc6be:	e79e      	b.n	23fc5fe <_strtol_l.constprop.0+0x16>
 23fc6c0:	b107      	cbz	r7, 23fc6c4 <_strtol_l.constprop.0+0xdc>
 23fc6c2:	4276      	negs	r6, r6
 23fc6c4:	2a00      	cmp	r2, #0
 23fc6c6:	d0f9      	beq.n	23fc6bc <_strtol_l.constprop.0+0xd4>
 23fc6c8:	f1bc 0f00 	cmp.w	ip, #0
 23fc6cc:	d000      	beq.n	23fc6d0 <_strtol_l.constprop.0+0xe8>
 23fc6ce:	1e69      	subs	r1, r5, #1
 23fc6d0:	6011      	str	r1, [r2, #0]
 23fc6d2:	e7f3      	b.n	23fc6bc <_strtol_l.constprop.0+0xd4>
 23fc6d4:	2430      	movs	r4, #48	; 0x30
 23fc6d6:	2b00      	cmp	r3, #0
 23fc6d8:	d1b1      	bne.n	23fc63e <_strtol_l.constprop.0+0x56>
 23fc6da:	2308      	movs	r3, #8
 23fc6dc:	e7af      	b.n	23fc63e <_strtol_l.constprop.0+0x56>
 23fc6de:	2c30      	cmp	r4, #48	; 0x30
 23fc6e0:	d0a5      	beq.n	23fc62e <_strtol_l.constprop.0+0x46>
 23fc6e2:	230a      	movs	r3, #10
 23fc6e4:	e7ab      	b.n	23fc63e <_strtol_l.constprop.0+0x56>
 23fc6e6:	bf00      	nop
 23fc6e8:	023ffebb 	.word	0x023ffebb

023fc6ec <strtol>:
 23fc6ec:	4613      	mov	r3, r2
 23fc6ee:	460a      	mov	r2, r1
 23fc6f0:	4601      	mov	r1, r0
 23fc6f2:	4802      	ldr	r0, [pc, #8]	; (23fc6fc <strtol+0x10>)
 23fc6f4:	6800      	ldr	r0, [r0, #0]
 23fc6f6:	f7ff bf77 	b.w	23fc5e8 <_strtol_l.constprop.0>
 23fc6fa:	bf00      	nop
 23fc6fc:	1006a1c0 	.word	0x1006a1c0

023fc700 <link_const_data_start>:
 23fc700:	00001388 	.word	0x00001388
 23fc704:	00002710 	.word	0x00002710
 23fc708:	00004e20 	.word	0x00004e20
 23fc70c:	00009c40 	.word	0x00009c40
 23fc710:	00013880 	.word	0x00013880
 23fc714:	00027100 	.word	0x00027100
 23fc718:	0004e200 	.word	0x0004e200
 23fc71c:	0009c400 	.word	0x0009c400
 23fc720:	00138800 	.word	0x00138800
 23fc724:	00271000 	.word	0x00271000
 23fc728:	004e2000 	.word	0x004e2000
 23fc72c:	009c4000 	.word	0x009c4000
 23fc730:	01388000 	.word	0x01388000
 23fc734:	02710000 	.word	0x02710000
 23fc738:	04e20000 	.word	0x04e20000
 23fc73c:	09c40000 	.word	0x09c40000
 23fc740:	13880000 	.word	0x13880000
 23fc744:	27100000 	.word	0x27100000
 23fc748:	00000000 	.word	0x00000000
 23fc74c:	00000013 	.word	0x00000013
 23fc750:	023fc8fd 	.word	0x023fc8fd
 23fc754:	00000012 	.word	0x00000012
 23fc758:	023fc900 	.word	0x023fc900
 23fc75c:	00000011 	.word	0x00000011
 23fc760:	023fdad5 	.word	0x023fdad5
 23fc764:	0000000e 	.word	0x0000000e
 23fc768:	023fc903 	.word	0x023fc903
 23fc76c:	0000001d 	.word	0x0000001d
 23fc770:	023fc906 	.word	0x023fc906
 23fc774:	00000000 	.word	0x00000000
 23fc778:	023fc909 	.word	0x023fc909
 23fc77c:	00000001 	.word	0x00000001
 23fc780:	023fc90c 	.word	0x023fc90c
 23fc784:	00000002 	.word	0x00000002
 23fc788:	023fc90f 	.word	0x023fc90f
 23fc78c:	00000003 	.word	0x00000003
 23fc790:	023fc912 	.word	0x023fc912
 23fc794:	00000004 	.word	0x00000004
 23fc798:	023fc915 	.word	0x023fc915
 23fc79c:	00000005 	.word	0x00000005
 23fc7a0:	023fc918 	.word	0x023fc918
 23fc7a4:	00000006 	.word	0x00000006
 23fc7a8:	023fc91b 	.word	0x023fc91b
 23fc7ac:	00000009 	.word	0x00000009
 23fc7b0:	023fc91e 	.word	0x023fc91e
 23fc7b4:	0000000a 	.word	0x0000000a
 23fc7b8:	023fc921 	.word	0x023fc921
 23fc7bc:	0000000b 	.word	0x0000000b
 23fc7c0:	023fc925 	.word	0x023fc925
 23fc7c4:	0000000c 	.word	0x0000000c
 23fc7c8:	023fc929 	.word	0x023fc929
 23fc7cc:	0000000d 	.word	0x0000000d
 23fc7d0:	023fc92d 	.word	0x023fc92d
 23fc7d4:	00000014 	.word	0x00000014
 23fc7d8:	023fc931 	.word	0x023fc931
 23fc7dc:	00000015 	.word	0x00000015
 23fc7e0:	023fc935 	.word	0x023fc935
 23fc7e4:	00000016 	.word	0x00000016
 23fc7e8:	023fc939 	.word	0x023fc939
 23fc7ec:	00000018 	.word	0x00000018
 23fc7f0:	023fc93d 	.word	0x023fc93d
 23fc7f4:	00000019 	.word	0x00000019
 23fc7f8:	023fc941 	.word	0x023fc941
 23fc7fc:	0000001a 	.word	0x0000001a
 23fc800:	023fc945 	.word	0x023fc945
 23fc804:	0000001b 	.word	0x0000001b
 23fc808:	023fc949 	.word	0x023fc949
 23fc80c:	00000000 	.word	0x00000000
 23fc810:	023fc94d 	.word	0x023fc94d
 23fc814:	0000000a 	.word	0x0000000a
 23fc818:	023fc95c 	.word	0x023fc95c
 23fc81c:	00000014 	.word	0x00000014
 23fc820:	023fc971 	.word	0x023fc971
 23fc824:	0000001e 	.word	0x0000001e
 23fc828:	023fc98b 	.word	0x023fc98b
 23fc82c:	00000028 	.word	0x00000028
 23fc830:	023fc9a6 	.word	0x023fc9a6
 23fc834:	00000032 	.word	0x00000032
 23fc838:	023fc9b7 	.word	0x023fc9b7
 23fc83c:	0000003c 	.word	0x0000003c
 23fc840:	023fc9c6 	.word	0x023fc9c6
 23fc844:	00000046 	.word	0x00000046
 23fc848:	023fc9de 	.word	0x023fc9de
 23fc84c:	00000050 	.word	0x00000050
 23fc850:	023fc9f9 	.word	0x023fc9f9
 23fc854:	0000005a 	.word	0x0000005a
 23fc858:	023fca1c 	.word	0x023fca1c
 23fc85c:	00000064 	.word	0x00000064
 23fc860:	023fca34 	.word	0x023fca34
 23fc864:	0000006e 	.word	0x0000006e
 23fc868:	023fca4c 	.word	0x023fca4c
 23fc86c:	00000078 	.word	0x00000078
 23fc870:	023fca60 	.word	0x023fca60
 23fc874:	00000082 	.word	0x00000082
 23fc878:	023fca73 	.word	0x023fca73
 23fc87c:	0000008c 	.word	0x0000008c
 23fc880:	023fca8b 	.word	0x023fca8b
 23fc884:	023fcaa6 	.word	0x023fcaa6
 23fc888:	023fcaab 	.word	0x023fcaab
 23fc88c:	023fcaaf 	.word	0x023fcaaf
 23fc890:	023fcab8 	.word	0x023fcab8
 23fc894:	023fcac4 	.word	0x023fcac4
 23fc898:	023fcacc 	.word	0x023fcacc
 23fc89c:	023fcaa6 	.word	0x023fcaa6
 23fc8a0:	023fcad4 	.word	0x023fcad4
 23fc8a4:	023fcad5 	.word	0x023fcad5
 23fc8a8:	023fcade 	.word	0x023fcade
 23fc8ac:	023fcae6 	.word	0x023fcae6
 23fc8b0:	023fcaf2 	.word	0x023fcaf2
 23fc8b4:	023fcaf8 	.word	0x023fcaf8
 23fc8b8:	04030201 	.word	0x04030201
 23fc8bc:	08070605 	.word	0x08070605
 23fc8c0:	0c0b0a09 	.word	0x0c0b0a09
 23fc8c4:	100f0e0d 	.word	0x100f0e0d
 23fc8c8:	00000000 	.word	0x00000000
 23fc8cc:	01000000 	.word	0x01000000
 23fc8d0:	0100080c 	.word	0x0100080c
 23fc8d4:	00000302 	.word	0x00000302

023fc8d8 <dynalib_user>:
 23fc8d8:	023e32c1 023e32e9 023e32ed 00000000     .2>..2>..2>.....
 23fc8e8:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23fc8f8:	6c617574 00304100 41003141 36410035     tual.A0.A1.A5.A6
 23fc908:	00304400 44003144 33440032 00344400     .D0.D1.D2.D3.D4.
 23fc918:	44003544 39440036 30314400 31314400     D5.D6.D9.D10.D11
 23fc928:	32314400 33314400 30324400 31324400     .D12.D13.D20.D21
 23fc938:	32324400 34324400 35324400 36324400     .D22.D24.D25.D26
 23fc948:	37324400 6e6f4e00 202f2065 6e6b6e55     .D27.None / Unkn
 23fc958:	006e776f 6e6b6e55 206e776f 65736552     own.Unknown Rese
 23fc968:	65522074 6e6f7361 73655200 50207465     t Reason.Reset P
 23fc978:	28206e69 74747562 6f206e6f 69702072     in (button or pi
 23fc988:	4c00296e 5020776f 7265776f 6e614d20     n).Low Power Man
 23fc998:	6d656761 20746e65 65736552 6f500074     agement Reset.Po
 23fc9a8:	20726577 6e776f44 73655220 42007465     wer Down Reset.B
 23fc9b8:	6e776f72 2074756f 65736552 61480074     rownout Reset.Ha
 23fc9c8:	61776472 57206572 68637461 20676f64     rdware Watchdog 
 23fc9d8:	65736552 75530074 73656363 6c756673     Reset.Successful
 23fc9e8:	72694620 7261776d 70552065 65746164      Firmware Update
 23fc9f8:	72694600 7261776d 70552065 65746164     .Firmware Update
 23fca08:	72724520 2820726f 72706564 74616365      Error (deprecat
 23fca18:	00296465 6d726946 65726177 64705520     ed).Firmware Upd
 23fca28:	20657461 656d6954 0074756f 74636146     ate Timeout.Fact
 23fca38:	2079726f 65736552 65522074 73657571     ory Reset Reques
 23fca48:	00646574 65666153 646f4d20 65522065     ted.Safe Mode Re
 23fca58:	73657571 00646574 20554644 65646f4d     quested.DFU Mode
 23fca68:	71655220 74736575 53006465 65747379      Requested.Syste
 23fca78:	6150206d 2063696e 534f5328 646f4320     m Panic (SOS Cod
 23fca88:	55002965 20726573 65736552 73282074     e).User Reset (s
 23fca98:	7774666f 20657261 6c6c6163 4e550029     oftware call).UN
 23fcaa8:	56004e4b 55004e49 485f4253 0054534f     KN.VIN.USB_HOST.
 23fcab8:	5f425355 50414441 00524554 5f425355     USB_ADAPTER.USB_
 23fcac8:	0047544f 54544142 00595245 41484321     OTG.BATTERY.!CHA
 23fcad8:	4e494752 48430047 45475241 49440044     RGING.CHARGED.DI
 23fcae8:	41484353 4e494752 41460047 00544c55     SCHARGING.FAULT.
 23fcaf8:	5353494d 00474e49 32454d42 42003038     MISSING.BME280.B
 23fcb08:	3933504d 0a0d0030 0d5e5b25 000a0d5d     MP390...%[^.]...
 23fcb18:	61666564 20746c75 42534d00 42534c00     default .MSB.LSB
 23fcb28:	50533c00 74655349 676e6974 65642073     .<SPISettings de
 23fcb38:	6c756166 3c003e74 53495053 69747465     fault>.<SPISetti
 23fcb48:	2073676e 75257325 20732520 45444f4d     ngs %s%u %s MODE
 23fcb58:	003e7525 002f007c 005c002d 44454c4f     %u>.|./.-.\.OLED
 23fcb68:	4f3a3233 4c4f004b 34364445 004b4f3a     32:OK.OLED64:OK.
 23fcb78:	252d6425 2d643230 64323025 32302554     %d-%02d-%02dT%02
 23fcb88:	30253a64 253a6432 00643230 30303030     d:%02d:%02d.0000
 23fcb98:	2d30302d 30543030 30303a30 0030303a     -00-00T00:00:00.
 23fcba8:	3a435452 20433249 46544f4e 444e554f     RTC:I2C NOTFOUND
 23fcbb8:	52732500 43545200 4c41563a 52004449     .%sR.RTC:VALID.R
 23fcbc8:	4e3a4354 53444545 4d534720 4d495420     TC:NEEDS GSM TIM
 23fcbd8:	54520045 45533a43 54520054 53313a43     E.RTC:SET.RTC:1S
 23fcbe8:	59532054 5200434e 323a4354 53205248     T SYNC.RTC:2HR S
 23fcbf8:	00434e59 20534541 59454b50 45532120     YNC.AES PKEY !SE
 23fcc08:	45410054 4b502053 21205945 42203631     T.AES PKEY !16 B
 23fcc18:	73657479 53454100 49594d20 53212056     ytes.AES MYIV !S
 23fcc28:	4c005445 2041524f 20525750 00525245     ET.LORA PWR ERR.
 23fcc38:	41524f4c 45524620 52452051 4f4c0052     LORA FREQ ERR.LO
 23fcc48:	41204152 20524444 00525245 5f534541     RA ADDR ERR.AES_
 23fcc58:	5b59454b 005d7325 5f534541 5649594d     KEY[%s].AES_MYIV
 23fcc68:	5d75255b 524f4c00 46432041 4b4f2056     [%u].LORA CFV OK
 23fcc78:	74656700 736f425f 435f6863 49706968     .get_Bosch_ChipI
 23fcc88:	00292844 32492020 30253a43 52205832     D().  I2C:%02X R
 23fcc98:	253a6765 00583230 52452020 54455f52     eg:%02X.  ERR_ET
 23fcca8:	0064253a 48432020 44495049 3230253a     :%d.  CHIPID:%02
 23fccb8:	4d422058 30383250 43202000 49504948     X BMP280.  CHIPI
 23fccc8:	30253a44 42205832 3833504d 20200038     D:%02X BMP388.  
 23fccd8:	50494843 253a4449 20583230 2f454d42     CHIPID:%02X BME/
 23fcce8:	00303933 48432020 44495049 3230253a     390.  CHIPID:%02
 23fccf8:	6e492058 696c6156 20200064 5f525245     X InValid.  ERR_
 23fcd08:	303a4652 584d4200 494e493a 4d420054     RF:0.BMX:INIT.BM
 23fcd18:	45203150 42005252 2031504d 42004b4f     P1 ERR.BMP1 OK.B
 23fcd28:	2031584d 00525245 33504d42 315f3039     MX1 ERR.BMP390_1
 23fcd38:	004b4f20 32454d42 315f3038 004b4f20      OK.BME280_1 OK.
 23fcd48:	31334d42 52524520 334d4200 4b4f2031     BM31 ERR.BM31 OK
 23fcd58:	584d4200 4e20315f 4d420046 45203250     .BMX_1 NF.BMP2 E
 23fcd68:	42005252 2032504d 42004b4f 2032584d     RR.BMP2 OK.BMX2 
 23fcd78:	00525245 33504d42 325f3039 004b4f20     ERR.BMP390_2 OK.
 23fcd88:	32454d42 325f3038 004b4f20 32334d42     BME280_2 OK.BM32
 23fcd98:	52524520 334d4200 4b4f2032 584d4200      ERR.BM32 OK.BMX
 23fcda8:	4e20325f 54480046 44313255 494e493a     _2 NF.HTU21D:INI
 23fcdb8:	54480054 464e2055 55544800 004b4f20     T.HTU NF.HTU OK.
 23fcdc8:	3950434d 3a383038 54494e49 50434d00     MCP9808:INIT.MCP
 23fcdd8:	464e2031 50434d00 4b4f2031 50434d00     1 NF.MCP1 OK.MCP
 23fcde8:	464e2032 50434d00 4b4f2032 50434d00     2 NF.MCP2 OK.MCP
 23fcdf8:	464e2033 50434d00 4b4f2033 50434d00     3 NF.MCP3 OK.MCP
 23fce08:	464e2034 50434d00 4b4f2034 54485300     4 NF.MCP4 OK.SHT
 23fce18:	494e493a 48530054 4e203154 48530046     :INIT.SHT1 NF.SH
 23fce28:	4f203154 4853004b 4e203254 48530046     T1 OK.SHT2 NF.SH
 23fce38:	4f203254 4948004b 493a3848 0054494e     T2 OK.HIH8:INIT.
 23fce48:	38484948 004b4f20 38484948 00464e20     HIH8 OK.HIH8 NF.
 23fce58:	3a544257 54494e49 54425700 004b4f3a     WBT:INIT.WBT:OK.
 23fce68:	3a544257 4800464e 4e493a49 48005449     WBT:NF.HI:INIT.H
 23fce78:	4b4f3a49 3a494800 5700464e 3a544742     I:OK.HI:NF.WBGT:
 23fce88:	54494e49 47425700 4b4f3a54 472f7720     INIT.WBGT:OK w/G
 23fce98:	65626f6c 47425700 4b4f3a54 2f6f7720     lobe.WBGT:OK wo/
 23fcea8:	626f6c47 42570065 4e3a5447 49530046     Globe.WBGT:NF.SI
 23fceb8:	35343131 494e493a 49530054 004b4f3a     1145:INIT.SI:OK.
 23fcec8:	563a4953 64255b49 3230252e 53005d64     SI:VI[%d.%02d].S
 23fced8:	52493a49 2e64255b 64323025 4953005d     I:IR[%d.%02d].SI
 23fcee8:	5b56553a 252e6425 5d643230 584c5600     :UV[%d.%02d].VLX
 23fcef8:	494e493a 4c560054 4b4f2058 584c5600     :INIT.VLX OK.VLX
 23fcf08:	00464e20 3a584c42 54494e49 584c4200      NF.BLX:INIT.BLX
 23fcf18:	004b4f3a 3a584c42 5000464e 4135324d     :OK.BLX:NF.PM25A
 23fcf28:	493a4951 0054494e 4e3a4d50 4d500046     QI:INIT.PM:NF.PM
 23fcf38:	6765423a 4e206e69 4d500046 004b4f3a     :Begin NF.PM:OK.
 23fcf48:	4f204d50 494c4646 4800454e 493a4344     PM OFFLINE.HDC:I
 23fcf58:	0054494e 31434448 00464e20 31434448     NIT.HDC1 NF.HDC1
 23fcf68:	004b4f20 32434448 00464e20 32434448      OK.HDC2 NF.HDC2
 23fcf78:	004b4f20 3a53504c 54494e49 53504c00      OK.LPS:INIT.LPS
 23fcf88:	464e2031 53504c00 4b4f2031 53504c00     1 NF.LPS1 OK.LPS
 23fcf98:	464e2032 53504c00 4b4f2032 574c5400     2 NF.LPS2 OK.TLW
 23fcfa8:	494e493a 4c540054 464e2057 574c5400     :INIT.TLW NF.TLW
 23fcfb8:	004b4f20 3a4d5354 54494e49 4d535400      OK.TSM:INIT.TSM
 23fcfc8:	00464e20 204d5354 54004b4f 3a4d534d      NF.TSM OK.TMSM:
 23fcfd8:	54494e49 534d5400 464e204d 534d5400     INIT.TMSM NF.TMS
 23fcfe8:	4b4f204d 544d5000 4e493a53 50005449     M OK.PMTS:INIT.P
 23fcff8:	2053544d 5000464e 2053544d 54204b4f     MTS NF.PMTS OK T
 23fd008:	2e64253d 64323025 35534100 3a303036     =%d.%02d.AS5600:
 23fd018:	54494e49 3a445700 5700464e 4b4f3a44     INIT.WD:NF.WD:OK
 23fd028:	3a344100 54494e49 3d344100 54534944     .A4:INIT.A4=DIST
 23fd038:	53494400 4d353d54 53494400 30313d54     .DIST=5M.DIST=10
 23fd048:	3441004d 4941523d 3441004e 5741523d     M.A4=RAIN.A4=RAW
 23fd058:	3d344100 4c4c554e 3d344100 4c4c554e     .A4=NULL.A4=NULL
 23fd068:	2044532c 4100464e 4e493a35 41005449     ,SD NF.A5:INIT.A
 23fd078:	41523d35 35410057 4c554e3d 3541004c     5=RAW.A5=NULL.A5
 23fd088:	4c554e3d 44532c4c 00464e20 4f204457     =NULL,SD NF.WD O
 23fd098:	696c6666 4c5f656e 20445700 6c66664f     ffline_L.WD Offl
 23fd0a8:	5f656e69 44570048 6c6e4f20 00656e69     ine_H.WD Online.
 23fd0b8:	31504d42 4c4e4f20 00454e49 31454d42     BMP1 ONLINE.BME1
 23fd0c8:	4c4e4f20 00454e49 33504d42 315f3039      ONLINE.BMP390_1
 23fd0d8:	4c4e4f20 00454e49 31334d42 4c4e4f20      ONLINE.BM31 ONL
 23fd0e8:	00454e49 31584d42 46464f20 454e494c     INE.BMX1 OFFLINE
 23fd0f8:	504d4200 4e4f2032 454e494c 454d4200     .BMP2 ONLINE.BME
 23fd108:	4e4f2032 454e494c 334d4200 4e4f2032     2 ONLINE.BM32 ON
 23fd118:	454e494c 584d4200 464f2032 4e494c46     LINE.BMX2 OFFLIN
 23fd128:	54480045 4e4f2055 454e494c 55544800     E.HTU ONLINE.HTU
 23fd138:	46464f20 454e494c 20495300 494c4e4f      OFFLINE.SI ONLI
 23fd148:	5300454e 464f2049 4e494c46 44570045     NE.SI OFFLINE.WD
 23fd158:	4c4e4f20 00454e49 4f204457 494c4646      ONLINE.WD OFFLI
 23fd168:	5600454e 4f20584c 4e494c4e 4c560045     NE.VLX ONLINE.VL
 23fd178:	464f2058 4e494c46 4d500045 4c4e4f20     X OFFLINE.PM ONL
 23fd188:	00454e49 52504545 43204d4f 5241454c     INE.EEPROM CLEAR
 23fd198:	52524520 5400524f 202c363e 363e5452      ERROR.T>6, RT>6
 23fd1a8:	4f202d20 3e54004b 52202c36 363d3c54      - OK.T>6, RT<=6
 23fd1b8:	20262620 3e545220 202d5936 65766f4d      &&  RT>6Y- Move
 23fd1c8:	363c5400 5452202c 2620363c 3e545220     .T<6, RT<6 & RT>
 23fd1d8:	65592036 72657473 20796164 4b4f202d     6 Yesterday - OK
 23fd1e8:	363c5400 5452202c 2620363c 54522026     .T<6, RT<6 && RT
 23fd1f8:	322d363e 202d2064 65766f4d 363c5400     >6-2d - Move.T<6
 23fd208:	5452202c 2620363c 54522026 2d363d3c     , RT<6 && RT<=6-
 23fd218:	2d206432 656c4320 45007261 4f525045     2d - Clear.EEPRO
 23fd228:	4e49204d 45205449 524f5252 50454500     M INIT ERROR.EEP
 23fd238:	204d4f52 55205452 54414450 45004445     ROM RT UPDATED.E
 23fd248:	4f525045 5055204d 45544144 45450044     EPROM UPDATED.EE
 23fd258:	4d4f5250 4d554420 4c200050 253a4e45     PROM DUMP. LEN:%
 23fd268:	52200064 253a3154 30252e64 20006432     d. RT1:%d.%02d. 
 23fd278:	3a315052 252e6425 00643230 32545220     RP1:%d.%02d. RT2
 23fd288:	2e64253a 64323025 50522000 64253a32     :%d.%02d. RP2:%d
 23fd298:	3230252e 52200064 3a535447 00756c25     .%02d. RGTS:%lu.
 23fd2a8:	53324e20 253a5046 2000756c 253a5343      N2SFP:%lu. CS:%
 23fd2b8:	2000756c 3a435343 00756c25 4e3a4453     lu. CSC:%lu.SD:N
 23fd2c8:	44530046 444b4d3a 4f205249 4f205342     F.SD:MKDIR OBS O
 23fd2d8:	4453004b 6c6e4f3a 00656e69 4d3a4453     K.SD:Online.SD:M
 23fd2e8:	5249444b 53424f20 52524520 3a445300     KDIR OBS ERR.SD:
 23fd2f8:	6c66664f 00656e69 4f3a4453 44205342     Offline.SD:OBS D
 23fd308:	45205249 74736978 73250073 6434252f     IR Exists.%s/%4d
 23fd318:	64323025 64323025 676f6c2e 3a445300     %02d%02d.log.SD:
 23fd328:	6e65704f 676f4c28 52524529 53324e00     Open(Log)ERR.N2S
 23fd338:	45443e2d 464e3a4c 53324e00 45443e2d     ->DEL:NF.N2S->DE
 23fd348:	4b4f3a4c 53324e00 45443e2d 52453a4c     L:OK.N2S->DEL:ER
 23fd358:	324e0052 75463a53 4e006c6c 4f3a5332     R.N2S:Full.N2S:O
 23fd368:	41205342 64656464 53324e00 65704f3a     BS Added.N2S:Ope
 23fd378:	7245206e 00726f72 252c7325 6f4c0073     n Error.%s,%s.Lo
 23fd388:	734d6152 64255b67 4e3e2d5d 4c005332     RaMsg[%d]->N2S.L
 23fd398:	2041524f 616c6552 63252079 55206325     ORA Relay %c%c U
 23fd3a8:	006e6b6e 4f4c002c 54204152 3a455059     nkn.,.LORA TYPE:
 23fd3b8:	49207325 64253a44 544e4320 0064253a     %s ID:%d CNT:%d.
 23fd3c8:	41524f4c 6c655220 4e207961 6170536f     LORA Relay NoSpa
 23fd3d8:	4c006563 2041524f 616c6552 734d2079     ce.LORA Relay Ms
 23fd3e8:	736f4c67 4f4c0074 52204152 79616c65     gLost.LORA Relay
 23fd3f8:	20732520 51203e2d 65756575 64253a64      %s -> Queued:%d
 23fd408:	4e4f4300 2e474946 00545854 43204453     .CONFIG.TXT.SD C
 23fd418:	3a647261 72726520 6f20726f 706f206e     ard: error on op
 23fd428:	6e696e65 69662067 0020656c 5f736561     ening file .aes_
 23fd438:	79656b70 3a464300 5f736561 79656b70     pkey.CF:aes_pkey
 23fd448:	73255b3d 6561005d 796d5f73 43007669     =[%s].aes_myiv.C
 23fd458:	65613a46 796d5f73 5b3d7669 5d756c25     F:aes_myiv=[%lu]
 23fd468:	726f6c00 6e755f61 64697469 3a464300     .lora_unitid.CF:
 23fd478:	61726f6c 696e755f 3d646974 5d64255b     lora_unitid=[%d]
 23fd488:	726f6c00 78745f61 65776f70 46430072     .lora_txpower.CF
 23fd498:	726f6c3a 78745f61 65776f70 255b3d72     :lora_txpower=[%
 23fd4a8:	6c005d64 5f61726f 71657266 3a464300     d].lora_freq.CF:
 23fd4b8:	61726f6c 6572665f 255b3d71 63005d64     lora_freq=[%d].c
 23fd4c8:	68007373 57006874 6d417968 72654849     ss.hth.WhyAmIHer
 23fd4d8:	2c003f65 4f005346 3e2d5342 41206425     e?.,FS.OBS->%d A
 23fd4e8:	4e206464 4f005332 255b5342 3e2d5d64     dd N2S.OBS[%d]->
 23fd4f8:	2c004453 00732520 3e2d524c 0053324e     SD., %s.LR->N2S.
 23fd508:	5b53424f 5d4c4c41 324e3e2d 52520053     OBS[ALL]->N2S.RR
 23fd518:	2073253a 2c642528 29756c25 416f4400     :%s (%d,%lu).DoA
 23fd528:	6f697463 45523a6e 544f4f42 416f4400     ction:REBOOT.DoA
 23fd538:	6f697463 4e493a6e 44004f46 7463416f     ction:INFO.DoAct
 23fd548:	3a6e6f69 444e4553 416f4400 6f697463     ion:SEND.DoActio
 23fd558:	52433a6e 6f440054 69746341 413a6e6f     n:CRT.DoAction:A
 23fd568:	53494434 34410054 5349443d 44202c54     4DIST.A4=DIST, D
 23fd578:	52204c45 3a4e4941 41004b4f 49443d34     EL RAIN:OK.A4=DI
 23fd588:	202c5453 204c4544 4e494152 5252453a     ST, DEL RAIN:ERR
 23fd598:	3d344100 54534944 4c41202c 44414552     .A4=DIST, ALREAD
 23fd5a8:	58452059 53545349 3d344100 54534944     Y EXISTS.A4=DIST
 23fd5b8:	4553202c 34410054 5349443d 4f202c54     , SET.A4=DIST, O
 23fd5c8:	204e4550 00525245 443d3441 2c545349     PEN ERR.A4=DIST,
 23fd5d8:	4c454420 3a4d3520 202c4b4f 204d3031      DEL 5M:OK, 10M 
 23fd5e8:	00544553 443d3441 2c545349 4c454420     SET.A4=DIST, DEL
 23fd5f8:	3a4d3520 00525245 443d3441 2c545349      5M:ERR.A4=DIST,
 23fd608:	4d303120 3d344100 54534944 4453202c      10M.A4=DIST, SD
 23fd618:	00464e20 63416f44 6e6f6974 5234413a      NF.DoAction:A4R
 23fd628:	004e4941 523d3441 2c4e4941 4c454420     AIN.A4=RAIN, DEL
 23fd638:	53494420 4b4f3a54 3d344100 4e494152      DIST:OK.A4=RAIN
 23fd648:	4544202c 4944204c 453a5453 41005252     , DEL DIST:ERR.A
 23fd658:	41523d34 202c4e49 204c4544 4f3a4d35     4=RAIN, DEL 5M:O
 23fd668:	3441004b 4941523d 44202c4e 35204c45     K.A4=RAIN, DEL 5
 23fd678:	52453a4d 34410052 4941523d 41202c4e     M:ERR.A4=RAIN, A
 23fd688:	4145524c 45205944 54534958 34410053     LREADY EXISTS.A4
 23fd698:	4941523d 53202c4e 41005445 41523d34     =RAIN, SET.A4=RA
 23fd6a8:	202c4e49 4e45504f 52524520 3d344100     IN, OPEN ERR.A4=
 23fd6b8:	4e494152 4453202c 00464e20 63416f44     RAIN, SD NF.DoAc
 23fd6c8:	6e6f6974 444d353a 00545349 49444d35     tion:5MDIST.5MDI
 23fd6d8:	202c5453 45524c41 20594441 53495845     ST, ALREADY EXIS
 23fd6e8:	35005354 5349444d 45532054 4d350054     TS.5MDIST SET.5M
 23fd6f8:	54534944 45504f20 5245204e 4d350052     DIST OPEN ERR.5M
 23fd708:	54534944 4453202c 00464e20 63416f44     DIST, SD NF.DoAc
 23fd718:	6e6f6974 5234413a 41005741 49443d34     tion:A4RAW.A4=DI
 23fd728:	202c5453 204c4544 54534944 004b4f3a     ST, DEL DIST:OK.
 23fd738:	443d3441 2c545349 4c454420 53494420     A4=DIST, DEL DIS
 23fd748:	52453a54 34410052 5349443d 44202c54     T:ERR.A4=DIST, D
 23fd758:	35204c45 4b4f3a4d 3d344100 2c574152     EL 5M:OK.A4=RAW,
 23fd768:	524c4120 59444145 49584520 00535453      ALREADY EXISTS.
 23fd778:	523d3441 202c5741 00544553 523d3441     A4=RAW, SET.A4=R
 23fd788:	202c5741 4e45504f 52524520 3d344100     AW, OPEN ERR.A4=
 23fd798:	2c574152 20445320 4400464e 7463416f     RAW, SD NF.DoAct
 23fd7a8:	3a6e6f69 4c433441 34410052 524c433d     ion:A4CLR.A4=CLR
 23fd7b8:	4544202c 4944204c 4f3a5453 3441004b     , DEL DIST:OK.A4
 23fd7c8:	524c433d 4544202c 4944204c 453a5453     =CLR, DEL DIST:E
 23fd7d8:	41005252 4c433d34 44202c52 52204c45     RR.A4=CLR, DEL R
 23fd7e8:	3a4e4941 4100464e 4c433d34 44202c52     AIN:NF.A4=CLR, D
 23fd7f8:	52204c45 3a4e4941 41004b4f 4c433d34     EL RAIN:OK.A4=CL
 23fd808:	44202c52 52204c45 3a4e4941 00525245     R, DEL RAIN:ERR.
 23fd818:	433d3441 202c524c 204c4544 3a574152     A4=CLR, DEL RAW:
 23fd828:	41004b4f 4c433d34 44202c52 52204c45     OK.A4=CLR, DEL R
 23fd838:	453a5741 41005252 4c433d34 44202c52     AW:ERR.A4=CLR, D
 23fd848:	35204c45 4b4f3a4d 3d344100 2c524c43     EL 5M:OK.A4=CLR,
 23fd858:	4c454420 3a4d3520 00525245 433d3441      DEL 5M:ERR.A4=C
 23fd868:	202c524c 4e204453 6f440046 69746341     LR, SD NF.DoActi
 23fd878:	413a6e6f 57415235 3d354100 2c574152     on:A5RAW.A5=RAW,
 23fd888:	524c4120 59444145 49584520 00535453      ALREADY EXISTS.
 23fd898:	523d3541 202c5741 00544553 523d3541     A5=RAW, SET.A5=R
 23fd8a8:	202c5741 4e45504f 52524520 3d354100     AW, OPEN ERR.A5=
 23fd8b8:	2c574152 20445320 4400464e 7463416f     RAW, SD NF.DoAct
 23fd8c8:	3a6e6f69 4c433541 35410052 524c433d     ion:A5CLR.A5=CLR
 23fd8d8:	4544202c 4152204c 4b4f3a57 3d354100     , DEL RAW:OK.A5=
 23fd8e8:	2c524c43 4c454420 57415220 5252453a     CLR, DEL RAW:ERR
 23fd8f8:	3d354100 2c524c43 4c454420 52354120     .A5=CLR, DEL A5R
 23fd908:	4e3a5741 35410046 524c433d 4453202c     AW:NF.A5=CLR, SD
 23fd918:	00464e20 63416f44 6e6f6974 4958543a      NF.DoAction:TXI
 23fd928:	54004d35 4d354958 4c41202c 44414552     5M.TXI5M, ALREAD
 23fd938:	45532059 58540054 204d3549 00544553     Y SET.TXI5M SET.
 23fd948:	35495854 504f204d 45204e45 54005252     TXI5M OPEN ERR.T
 23fd958:	4d354958 6552203a 65766f6d 58542064     XI5M: Removed TX
 23fd968:	204d3031 656c6946 49585400 202c4d35     10M File.TXI5M, 
 23fd978:	4e204453 6f440046 69746341 543a6e6f     SD NF.DoAction:T
 23fd988:	30314958 5854004d 4d303149 4c41202c     XI10M.TXI10M, AL
 23fd998:	44414552 45532059 58540054 4d303149     READY SET.TXI10M
 23fd9a8:	54455320 49585400 204d3031 4e45504f      SET.TXI10M OPEN
 23fd9b8:	52524520 49585400 203a4d35 6f6d6552      ERR.TXI5M: Remo
 23fd9c8:	20646576 4d355854 6c694620 58540065     ved TX5M File.TX
 23fd9d8:	4d303149 4453202c 00464e20 63416f44     I10M, SD NF.DoAc
 23fd9e8:	6e6f6974 4958543a 004d3531 31495854     tion:TXI15M.TXI1
 23fd9f8:	202c4d35 45524c41 20594441 00544553     5M, ALREADY SET.
 23fda08:	31495854 203a4d35 6f6d6552 20646576     TXI15M: Removed 
 23fda18:	4d355854 6c694620 58540065 4d353149     TX5M File.TXI15M
 23fda28:	6552203a 65766f6d 58542064 204d3031     : Removed TX10M 
 23fda38:	656c6946 49585400 204d3531 00544553     File.TXI15M SET.
 23fda48:	31495854 202c4d35 4e204453 6f440046     TXI15M, SD NF.Do
 23fda58:	69746341 553a6e6f 57004e4b 20494649     Action:UKN.WIFI 
 23fda68:	5b43414d 78323025 3230253a 30253a78     MAC[%02x:%02x:%0
 23fda78:	253a7832 3a783230 78323025 3230253a     2x:%02x:%02x:%02
 23fda88:	57005d78 20494649 64657243 49003a73     x].WIFI Creds:.I
 23fda98:	255b5844 20005d64 44495353 5d73255b     DX[%d]. SSID[%s]
 23fdaa8:	79542000 553a6570 6365736e 64657275     . Type:Unsecured
 23fdab8:	79542000 573a6570 20005045 65707954     . Type:WEP. Type
 23fdac8:	4150573a 79542000 573a6570 00324150     :WPA. Type:WPA2.
 23fdad8:	70795420 50573a65 6e452041 54200074      Type:WPA Ent. T
 23fdae8:	3a657079 32415057 746e4520 79542000     ype:WPA2 Ent. Ty
 23fdaf8:	553a6570 6f6e6b6e 20006e77 53676953     pe:Unknown. SigS
 23fdb08:	255b7274 20005d64 6e616843 5b6c656e     tr[%d]. Channel[
 23fdb18:	005d6425 414d4220 30255b43 253a7832     %d]. BMAC[%02x:%
 23fdb28:	3a783230 78323025 3230253a 30253a78     02x:%02x:%02x:%0
 23fdb38:	253a7832 5d783230 46495700 72432049     2x:%02x].WIFI Cr
 23fdb48:	3a736465 5400464e 493a4958 0054494e     eds:NF.TXI:INIT.
 23fdb58:	35495854 6f46204d 00646e75 3a495854     TXI5M Found.TXI:
 23fdb68:	31204d52 54004d30 30314958 6f46204d     RM 10M.TXI10M Fo
 23fdb78:	00646e75 3a495854 35204d52 5854004d     und.TXI:RM 5M.TX
 23fdb88:	64253d49 6157004d 20347469 69726553     I=%dM.Wait4 Seri
 23fdb98:	43206c61 6f736e6f 4f00656c 3a44454c     al Console.OLED:
 23fdba8:	62616e45 0064656c 44454c4f 7369443a     Enabled.OLED:Dis
 23fdbb8:	656c6261 43530064 616e453a 64656c62     abled.SC:Enabled
 23fdbc8:	52455300 696e493a 45530074 4b4f3a52     .SER:Init.SER:OK
 23fdbd8:	4d534600 7070632e 3231363a 63727320     .FSM.cpp:612 src
 23fdbe8:	20262620 2d637273 6c61633e 6361626c      && src->callbac
 23fdbf8:	424f006b 6f445f53 6954203a 4e20656d     k.OBS_Do: Time N
 23fdc08:	63620056 70620073 66630063 67720072     V.bcs.bpc.cfr.rg
 23fdc18:	74677200 70677200 00737700 77006477     .rgt.rgp.ws.wd.w
 23fdc28:	67770067 70620064 74620031 68620031     g.wgd.bp1.bt1.bh
 23fdc38:	70620031 74620032 68620032 68680032     1.bp2.bt2.bh2.hh
 23fdc48:	74680031 74730031 68730031 74730031     1.ht1.st1.sh1.st
 23fdc58:	68730032 52450032 44483a52 52203143     2.sh2.ERR:HDC1 R
 23fdc68:	00646165 31746468 68646800 64680031     ead.hdt1.hdh1.hd
 23fdc78:	68003274 00326864 3174706c 70706c00     t2.hdh2.lpt1.lpp
 23fdc88:	706c0031 6c003274 00327070 00327468     1.lpt2.lpp2.ht2.
 23fdc98:	00326868 52204953 54455345 31767300     hh2.SI RESET.sv1
 23fdca8:	31697300 31757300 786c7600 786c6200     .si1.su1.vlx.blx
 23fdcb8:	00677300 00723461 00326772 32746772     .sg.a4r.rg2.rgt2
 23fdcc8:	70677200 35610032 6d700072 30317331     .rgp2.a5r.pm1s10
 23fdcd8:	316d7000 00353273 73316d70 00303031     .pm1s25.pm1s100.
 23fdce8:	65316d70 70003031 3265316d 6d700035     pm1e10.pm1e25.pm
 23fdcf8:	30316531 69680030 74627700 67627700     1e100.hi.wbt.wbg
 23fdd08:	6c740074 74007777 0074776c 656d7374     t.tlww.tlwt.tsme
 23fdd18:	74003532 63656d73 6d737400 00637776     25.tsmec.tsmvwc.
 23fdd28:	746d7374 736d7400 0031736d 6d736d74     tsmt.tmsms1.tmsm
 23fdd38:	74003273 736d736d 6d740033 34736d73     s2.tmsms3.tmsms4
 23fdd48:	736d7400 0031746d 6d736d74 70003274     .tmsmt1.tmsmt2.p
 23fdd58:	0073746d 253a5343 30252e64 42206432     mts.CS:%d.%02d B
 23fdd68:	2c64253a 252e6425 00643230 41524f4c     :%d,%d.%02d.LORA
 23fdd78:	004b4f20 41524f4c 00464e20 41524f4c      OK.LORA NF.LORA
 23fdd88:	494e4920 52452054 4f4c0052 43204152      INIT ERR.LORA C
 23fdd98:	52452d53 4f4c0052 49204152 0074696e     S-ERR.LORA Init.
 23fdda8:	646e6957 74736944 696e4920 00292874     WindDist Init().
 23fddb8:	6150002e 63697472 4e3a656c 6552746f     ..Particle:NotRe
 23fddc8:	00796461 255b5346 3e2d5d64 20425550     ady.FS[%d]->PUB 
 23fddd8:	255b4b4f 46005d64 64255b53 503e2d5d     OK[%d].FS[%d]->P
 23fdde8:	45204255 52005252 59414c45 5d73255b     UB ERR.RELAY[%s]
 23fddf8:	55503e2d 4b4f2042 4c455200 255b5941     ->PUB OK.RELAY[%
 23fde08:	3e2d5d73 20425550 00525245 414c4552     s]->PUB ERR.RELA
 23fde18:	59542059 255b4550 49205d64 4c41564e     Y TYPE[%d] INVAL
 23fde28:	33004449 34360032 53494400 454c4241     ID.32.64.DISABLE
 23fde38:	4e450044 454c4241 52540044 46004555     D.ENABLED.TRUE.F
 23fde48:	45534c41 464e4900 4f445f4f 64002928     ALSE.INFO_DO().d
 23fde58:	64697665 76656400 6600736f 6d656572     evid.devos.freem
 23fde68:	75006d65 6d697470 756d0065 76006e6f     em.uptime.muon.v
 23fde78:	46007265 35322d53 31323730 25003176     er.FS-250721v1.%
 23fde88:	64252d64 73642500 73626f00 64250069     d-%d.%ds.obsi.%d
 23fde98:	626f006d 00697473 746e3274 63726400     m.obsti.t2nt.drc
 23fdea8:	326e0074 776e0073 73737700 71737700     t.n2s.nw.wss.wsq
 23fdeb8:	32302500 30253a78 253a7832 3a783230     .%02x:%02x:%02x:
 23fdec8:	78323025 3230253a 30253a78 6d007832     %02x:%02x:%02x.m
 23fded8:	69006361 616d0070 67006b73 77657461     ac.ip.mask.gatew
 23fdee8:	64007961 6400736e 73706368 73736200     ay.dns.dhcps.bss
 23fdef8:	63006469 69007173 0069736d 44003461     id.csq.imsi.a4.D
 23fdf08:	20545349 44004d35 20545349 004d3031     IST 5M.DIST 10M.
 23fdf18:	00324752 6100534e 73250035 31584d42     RG2.NS.a5.%sBMX1
 23fdf28:	29732528 42732500 2832584d 00297325     (%s).%sBMX2(%s).
 23fdf38:	434d7325 25003150 50434d73 73250032     %sMCP1.%sMCP2.%s
 23fdf48:	3350434d 3174672f 4d732500 2f345043     MCP3/gt1.%sMCP4/
 23fdf58:	00327467 48537325 25003154 54485373     gt2.%sSHT1.%sSHT
 23fdf68:	73250032 31434448 48732500 00324344     2.%sHDC1.%sHDC2.
 23fdf78:	504c7325 25003153 53504c73 73250032     %sLPS1.%sLPS2.%s
 23fdf88:	38484948 53732500 73250049 4c4d4556     HIH8.%sSI.%sVEML
 23fdf98:	42732500 2500584c 35534173 00303036     .%sBLX.%sAS5600.
 23fdfa8:	4c547325 73250057 004d5354 4d547325     %sTLW.%sTSM.%sTM
 23fdfb8:	25004d53 00494873 42577325 73250054     SM.%sHI.%sWBT.%s
 23fdfc8:	54474257 472f5720 45424f4c 57732500     WBGT W/GLOBE.%sW
 23fdfd8:	20544742 472f4f57 45424f4c 50732500     BGT WO/GLOBE.%sP
 23fdfe8:	4135324d 73250051 25284752 73002973     M25AQ.%sRG(%s).s
 23fdff8:	6f736e65 25007372 64252c64 4d64252c     ensors.%d,%d,%dM
 23fe008:	6c007a48 0061726f 64656c6f 65637300     Hz.lora.oled.sce
 23fe018:	286e6970 00297325 00656373 0074616c     pin(%s).sce.lat.
 23fe028:	006e6f6c 00746c61 4f3a4453 286e6570     lon.alt.SD:Open(
 23fe038:	6f666e49 52524529 464e4900 503e2d4f     Info)ERR.INFO->P
 23fe048:	4f204255 64255b4b 4e49005d 3e2d4f46     UB OK[%d].INFO->
 23fe058:	20425550 00525245 4f464e49 5458453a     PUB ERR.INFO:EXT
 23fe068:	6c253d4d 53572c75 72666552 53687365     M=%lu,WSRefreshS
 23fe078:	4e007465 503a5332 696c6275 4e006873     et.N2S:Publish.N
 23fe088:	453a5332 7974706d 53324e00 5d64255b     2S:Empty.N2S[%d]
 23fe098:	3e2d7325 3a425550 4e004b4f 255b5332     %s->PUB:OK.N2S[%
 23fe0a8:	73255d64 55503e2d 45523a42 00595254     d]%s->PUB:RETRY.
 23fe0b8:	5b53324e 255d6425 503e2d73 453a4255     N2S[%d]%s->PUB:E
 23fe0c8:	4e005252 4f3a5332 4e205342 65646565     RR.N2S:OBS Neede
 23fe0d8:	324e0064 424f3a53 55462053 4e004c4c     d.N2S:OBS FULL.N
 23fe0e8:	255b5332 3e2d5d64 3a524f42 00525245     2S[%d]->BOR:ERR.
 23fe0f8:	2d53324e 45504f3e 52453a4e 45520052     N2S->OPEN:ERR.RE
 23fe108:	2d59414c 53324e3e 46495700 6e493a49     LAY->N2S.WIFI:In
 23fe118:	696c6176 5a532064 46495700 704f3a49     valid SZ.WIFI:Op
 23fe128:	57006e65 3a494649 4e3d4449 206c6c75     en.WIFI:ID=Null 
 23fe138:	00727245 4e4f554d 46495700 44493a49     Err.MUON.WIFI:ID
 23fe148:	5d73255b 72724520 46495700 53533a49     [%s] Err.WIFI:SS
 23fe158:	4e3d4449 206c6c75 00727245 49464957     ID=Null Err.WIFI
 23fe168:	3d57503a 6c6c754e 72724520 54454e00     :PW=Null Err.NET
 23fe178:	4b524f57 5445533a 46495720 49570049     WORK:SET WIFI.WI
 23fe188:	533a4946 5b444953 005d7325 49464957     FI:SSID[%s].WIFI
 23fe198:	5b57503a 005d7325 49464957 7261503a     :PW[%s].WIFI:Par
 23fe1a8:	6c636974 6c432065 2064756f 63736944     ticle Cloud Disc
 23fe1b8:	656e6e6f 57007463 3a494649 6e727554     onnect.WIFI:Turn
 23fe1c8:	20676e69 2066664f 6c6c6543 72616c75     ing Off Cellular
 23fe1d8:	46495700 75543a49 6e696e72 6e4f2067     .WIFI:Turning On
 23fe1e8:	66695720 49570069 433a4946 7261656c      Wifi.WIFI:Clear
 23fe1f8:	57206465 20696669 64657243 49570073     ed Wifi Creds.WI
 23fe208:	433a4946 7261656c 66695720 72432069     FI:Clear Wifi Cr
 23fe218:	20736465 00727245 49464957 6572433a     eds Err.WIFI:Cre
 23fe228:	746e6564 736c6169 74655320 46495700     dentials Set.WIF
 23fe238:	72433a49 6e656465 6c616974 65532073     I:Credentials Se
 23fe248:	72452074 49570072 433a4946 656e6e6f     t Err.WIFI:Conne
 23fe258:	43207463 656c6c61 49570064 4f3a4946     ct Called.WIFI:O
 23fe268:	454e4550 255b5252 57005d73 3a494649     PENERR[%s].WIFI:
 23fe278:	4e495355 45432047 4c554c4c 57005241     USING CELLULAR.W
 23fe288:	3a4f4649 49464f4e 5520454c 474e4953     IFO:NOFILE USING
 23fe298:	4c454320 414c554c 49570052 4e3a4946      CELLULAR.WIFI:N
 23fe2a8:	2044534f 4e495355 45432047 4c554c4c     OSD USING CELLUL
 23fe2b8:	4e005241 4f575445 533a4b52 43205445     AR.NETWORK:SET C
 23fe2c8:	004c4c45 4c4c4543 7261503a 6c636974     ELL.CELL:Particl
 23fe2d8:	6c432065 2064756f 63736944 656e6e6f     e Cloud Disconne
 23fe2e8:	43007463 3a4c4c45 6e727554 20676e69     ct.CELL:Turning 
 23fe2f8:	2066664f 69466957 4c454300 6c433a4c     Off WiFi.CELL:Cl
 23fe308:	65726165 69572064 43206966 73646572     eared Wifi Creds
 23fe318:	4c454300 6c433a4c 20726165 69666957     .CELL:Clear Wifi
 23fe328:	65724320 45207364 43007272 3a4c4c45      Creds Err.CELL:
 23fe338:	6e727554 20676e69 43206e4f 756c6c65     Turning On Cellu
 23fe348:	0072616c 79706f43 68676972 325b2074     lar.Copyright [2
 23fe358:	5d353230 6e555b20 72657669 79746973     025] [University
 23fe368:	726f4320 61726f70 6e6f6974 726f6620      Corporation for
 23fe378:	6d744120 6870736f 63697265 73655220      Atmospheric Res
 23fe388:	63726165 4e005d68 453a5332 74736978     earch].N2S:Exist
 23fe398:	324e0073 6f4e3a53 4300656e 4f4e3a46     s.N2S:None.CF:NO
 23fe3a8:	00732520 00537325 3a435453 494c4156      %s.%sS.STC:VALI
 23fe3b8:	54530044 56213a43 44494c41 3a535000     D.STC:!VALID.PS:
 23fe3c8:	42006425 64253a53 43504200 2e64253a     %d.BS:%d.BPC:%d.
 23fe3d8:	64323025 53504700 616e453a 00656c62     %02d.GPS:Enable.
 23fe3e8:	63416f44 6e6f6974 416f4400 6f697463     DoAction.DoActio
 23fe3f8:	4b4f3a6e 416f4400 6f697463 52453a6e     n:OK.DoAction:ER
 23fe408:	54410052 4d49432b 000a0d49 49534d49     R.AT+CIMI...IMSI
 23fe418:	00464e3a 49534d49 0073253a 52205357     :NF.IMSI:%s.WS R
 23fe428:	65726665 52206873 69757165 00646572     efresh Required.
 23fe438:	6e6e6f43 65746365 52450064 4e203a52     Connected.ERR: N
 23fe448:	6c43206f 006b636f 6c696144 65522079     o Clock.Daily Re
 23fe458:	746f6f62 62655200 69746f6f 4900676e     boot.Rebooting.I
 23fe468:	41206d27 6576696c 68572021 4c003f79     'm Alive! Why?.L
 23fe478:	5020776f 7265776f 6f500021 69726577     ow Power!.Poweri
 23fe488:	4420676e 006e776f 65776f50 65522072     ng Down.Power Re
 23fe498:	7070612d 6465696c 00000000              -applied....

023fe4a4 <_ZTVN8particle11SPISettingsE>:
	...
 23fe4ac:	023e3e69 023e3d9d 023e3db3              i>>..=>..=>.

023fe4b8 <_ZTV6FsFile>:
	...
 23fe4c0:	023e3db1 023e3dc1 023e415f 023e4155     .=>..=>._A>.UA>.
 23fe4d0:	023e40cd 023e4137 023e3e11 023e3dcf     .@>.7A>..>>..=>.
 23fe4e0:	023f8aa9                                ..?.

023fe4e4 <_ZL5s_fwd>:
 23fe4e4:	7b777c63 c56f6bf2 2b670130 76abd7fe     c|w{.ko.0.g+...v
 23fe4f4:	7dc982ca f04759fa afa2d4ad c072a49c     ...}.YG.......r.
 23fe504:	2693fdb7 ccf73f36 f1e5a534 1531d871     ...&6?..4...q.1.
 23fe514:	c323c704 9a059618 e2801207 75b227eb     ..#..........'.u
 23fe524:	1a2c8309 a05a6e1b b3d63b52 842fe329     ..,..nZ.R;..)./.
 23fe534:	ed00d153 5bb1fc20 39becb6a cf584c4a     S... ..[j..9JLX.
 23fe544:	fbaaefd0 85334d43 7f02f945 a89f3c50     ....CM3.E...P<..
 23fe554:	8f40a351 f5389d92 21dab6bc d2f3ff10     Q.@...8....!....
 23fe564:	ec130ccd 1744975f 3d7ea7c4 73195d64     ...._.D...~=d].s
 23fe574:	dc4f8160 88902a22 14b8ee46 db0b5ede     `.O."*..F....^..
 23fe584:	0a3a32e0 5c240649 62acd3c2 79e49591     .2:.I.$\...b...y
 23fe594:	6d37c8e7 a94ed58d eaf4566c 08ae7a65     ..7m..N.lV..ez..
 23fe5a4:	2e2578ba c6b4a61c 1f74dde8 8a8bbd4b     .x%.......t.K...
 23fe5b4:	66b53e70 0ef60348 b9573561 9e1dc186     p>.fH...a5W.....
 23fe5c4:	1198f8e1 948ed969 e9871e9b df2855ce     ....i........U(.
 23fe5d4:	0d89a18c 6842e6bf 0f2d9941 16bb54b0     ......BhA.-..T..

023fe5e4 <_ZL5s_inv>:
 23fe5e4:	d56a0952 38a53630 9ea340bf fbd7f381     R.j.06.8.@......
 23fe5f4:	8239e37c 87ff2f9b 44438e34 cbe9dec4     |.9../..4.CD....
 23fe604:	32947b54 3d23c2a6 0b954cee 4ec3fa42     T{.2..#=.L..B..N
 23fe614:	66a12e08 b224d928 49a25b76 25d18b6d     ...f(.$.v[.Im..%
 23fe624:	64f6f872 16986886 cc5ca4d4 92b6655d     r..d.h....\.]e..
 23fe634:	5048706c dab9edfd 5746155e 849d8da7     lpHP....^.FW....
 23fe644:	00abd890 0ad3bc8c 0558e4f7 0645b3b8     ..........X...E.
 23fe654:	8f1e2cd0 020f3fca 03bdafc1 6b8a1301     .,...?.........k
 23fe664:	4111913a eadc674f cecff297 73e6b4f0     :..AOg.........s
 23fe674:	2274ac96 8535ade7 e837f9e2 6edf751c     ..t"..5...7..u.n
 23fe684:	711af147 89c5291d 0e62b76f 1bbe18aa     G..q.)..o.b.....
 23fe694:	4b3e56fc 2079d2c6 fec0db9a f45acd78     .V>K..y ....x.Z.
 23fe6a4:	33a8dd1f 31c70788 591012b1 5fec8027     ...3...1...Y'.._
 23fe6b4:	a97f5160 0d4ab519 9f7ae52d ef9cc993     `Q....J.-.z.....
 23fe6c4:	4d3be0a0 b0f52aae 3cbbebc8 61995383     ..;M.*.....<.S.a
 23fe6d4:	7e042b17 26d677ba 631469e1 7d0c2155     .+.~.w.&.i.cU!.}

023fe6e4 <_ZTV20Adafruit_BMP280_Temp>:
	...
 23fe6ec:	023edaab 023edaad 023ed243 023ee0d5     ..>...>.C.>...>.
 23fe6fc:	023edac9                                ..>.

023fe700 <_ZTV24Adafruit_BMP280_Pressure>:
	...
 23fe708:	023edaa9 023edabb 023ed243 023ee295     ..>...>.C.>...>.
 23fe718:	023edb11                                ..>.

023fe71c <_ZL4font>:
 23fe71c:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
 23fe72c:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
 23fe73c:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
 23fe74c:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
 23fe75c:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
 23fe76c:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
 23fe77c:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
 23fe78c:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
 23fe79c:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
 23fe7ac:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
 23fe7bc:	00000000 5f000000 07000000 14000700     ......._........
 23fe7cc:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
 23fe7dc:	00502056 00030708 41221c00 22410000     V P......."A..A"
 23fe7ec:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
 23fe7fc:	08080800 00000808 20006060 02040810     ........``. ....
 23fe80c:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
 23fe81c:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
 23fe82c:	41314949 07091121 49494936 49494636     II1A!...6III6FII
 23fe83c:	00001e29 00000014 00003440 22140800     ).......@4....."
 23fe84c:	14141441 41001414 02081422 06095901     A......A"....Y..
 23fe85c:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
 23fe86c:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
 23fe87c:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
 23fe88c:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
 23fe89c:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
 23fe8ac:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
 23fe8bc:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
 23fe8cc:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
 23fe8dc:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
 23fe8ec:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
 23fe8fc:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
 23fe90c:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
 23fe91c:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
 23fe92c:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
 23fe93c:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
 23fe94c:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
 23fe95c:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
 23fe96c:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
 23fe97c:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
 23fe98c:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
 23fe99c:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
 23fe9ac:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
 23fe9bc:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
 23fe9cc:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
 23fe9dc:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
 23fe9ec:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
 23fe9fc:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
 23fea0c:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
 23fea1c:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
 23fea2c:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
 23fea3c:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
 23fea4c:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
 23fea5c:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
 23fea6c:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
 23fea7c:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
 23fea8c:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
 23fea9c:	00ff0000 ff101010 14141400 101000ff     ................
 23feaac:	10ff00ff f010f010 fc141414 f7141400     ................
 23feabc:	0000ff00 14ff00ff fc04f414 10171414     ................
 23feacc:	1f10101f 14141f10 10001f14 00f01010     ................
 23feadc:	1f000000 10101010 1010101f 0010f010     ................
 23feaec:	10ff0000 10101010 10101010 000010ff     ................
 23feafc:	0014ff00 ff00ff00 101f0000 fc000017     ................
 23feb0c:	1414f404 14171017 f404f414 00ff0000     ................
 23feb1c:	141414f7 14141414 14f700f7 14171414     ................
 23feb2c:	101f1010 1414141f 101014f4 00f010f0     ................
 23feb3c:	1f101f00 1f000000 00000014 000014fc     ................
 23feb4c:	10f010f0 ff10ff10 ff141414 10101014     ................
 23feb5c:	0000001f ff10f000 ffffffff f0f0f0f0     ................
 23feb6c:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
 23feb7c:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
 23feb8c:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
 23feb9c:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
 23febac:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
 23febbc:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
 23febcc:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
 23febdc:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
 23febec:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
 23febfc:	00000018 30001010 0101ff40 01011f00     .......0@.......
 23fec0c:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....

023fec1c <_ZTV12Adafruit_GFX>:
	...
 23fec2c:	023ef179 023f86cf 023e3309 023eeb81     y.>...?..3>...>.
 23fec3c:	023eeb83 023eebb5 023eeb91 023eeba3     ..>...>...>...>.
 23fec4c:	023eeac3 023eeb81 023eedab 023eeda9     ..>...>...>...>.
 23fec5c:	023eebcd 023eec0b 023eec45 023eec8b     ..>...>.E.>...>.
 23fec6c:	023eeca7 023eed29 3950434d 00383038     ..>.).>.MCP9808.

023fec7c <_ZTV16Adafruit_MCP9808>:
	...
 23fec84:	023ef83d 023ef83f 023ed243 023ef9ad     =.>.?.>.C.>...>.
 23fec94:	023ef84d                                M.>.

023fec98 <_ZL12splash1_data>:
 23fec98:	00000000 00800100 00000000 00000000     ................
 23feca8:	00008003 00000000 07000000 000000c0     ................
 23fecb8:	00000000 c0070000 00000000 00000000     ................
 23fecc8:	00c00f00 00000000 00000000 0000e01f     ................
 23fecd8:	00000000 1f000000 000000e0 00000000     ................
 23fece8:	e03f0000 00000000 00000000 00f03f00     ..?..........?..
	...
 23fed00:	0000f07f 00000000 7ff81f00 000000f0     ................
 23fed10:	00000000 f07ffe3f 00000000 3f000000     ....?..........?
 23fed20:	00f07fff 00000000 ff1f0000 0000e0fb     ................
 23fed30:	00000000 f9ff0f00 0000c0ff 00000000     ................
 23fed40:	fff9ff0f 000000f8 07000000 fffff1ff     ................
 23fed50:	00000000 fc030000 80ffff73 00000000     ........s.......
 23fed60:	3ffe0100 0080ffff 00000000 0f1eff00     ...?............
 23fed70:	000000ff 00000000 fc1ffe7f 00000000     ................
 23fed80:	3f000000 00f8ffff 00000000 df0f0000     ...?............
 23fed90:	0000e0ff 00000000 ff191f00 000000c0     ................
 23feda0:	00000000 00ff3c3f 00000000 7e000000     ....?<.........~
 23fedb0:	0000f87c 00000000 fe7f0000 0000007c     |...........|...
 23fedc0:	00000000 fcffff00 00000000 00000000     ................
 23fedd0:	00feffff 00000000 ff000000 0000feff     ................
 23fede0:	00000000 efff0100 000000fe 00000000     ................
 23fedf0:	fecfff01 00000000 03000000 00fe07ff     ................
 23fee00:	00000000 fc030000 0000fe07 00000000     ................
 23fee10:	03f00300 000000fe 00000000 fe008001     ................
	...
 23fee28:	007e0000 00000000 00000000 00003e00     ..~..........>..
	...
 23fee40:	0000000c 07000000 00fc0080 00c00300     ................
 23fee50:	80070000 0000fc01 0000c003 01800700     ................
 23fee60:	030000fc 000000c0 e0018007 1e000000     ................
 23fee70:	07000000 00e00180 001e0000 9ff7e37f     ................
 23fee80:	78e7fdf9 ffc0df7b fdbffff7 7b78fffd     ...x{.........x{
 23fee90:	f7ffc0df fdfdbfff df7b78ff 87f7f0c0     .........x{.....
 23feea0:	ffe13dbc 00de7b78 bc87f7f0 78f0e13d     .=..x{......=..x
 23feeb0:	0000de7b 3d8087f7 7b78e0e1 f77f00de     {......=..x{....
 23feec0:	e1fd9f87 de7b78e0 87f7ff00 e0e1fdbf     .....x{.........
 23feed0:	00de7b78 bc87f7f0 78e0e13d f000de7b     x{......=..x{...
 23feee0:	3dbc87f7 7b78e0e1 f7f000de e13dbc87     ...=..x{......=.
 23feef0:	de7b78e0 fff7ff00 e0e1fdbf c0dffb7f     .x{.............
 23fef00:	bffff7ff 7fe0e1fd 7cc0dffb 3d9ff3f3     ...........|...=
 23fef10:	7b3ee0e1 0000c0cf 00000000 00000000     ..>{............
 23fef20:	ffffff00 ffffffff c0ffffff ffffffff     ................
 23fef30:	11db68fd ffc0311a fdffffff 6afb5a2b     .h...1......+Z.j
 23fef40:	ffffc0ef 4bfdffff 331a3b5b ffffffc0     .......K[;.3....
 23fef50:	5b6bfdff c0fd6adb                       ..k[.j..

023fef58 <_ZL12splash2_data>:
 23fef58:	00600000 00000000 00000000 00000000     ..`.............
 23fef68:	0000e000 00000000 00000000 01000000     ................
 23fef78:	000000e0 00000000 00000000 f0010000     ................
	...
 23fef94:	00f00300 00000000 00000000 00000000     ................
 23fefa4:	0000f007 00000000 00000000 07000000     ................
 23fefb4:	000000f8 00000000 00000000 f80f0000     ................
 23fefc4:	03000000 007e00c0 00e00100 00f80f7f     ......~.........
 23fefd4:	c0030000 0000fe00 ff00e001 0000f8ef     ................
 23fefe4:	00c00300 010000fe ffff00e0 000000f8     ................
 23feff4:	f000c003 0f000000 7ffe7f00 030000c0     ................
 23ff004:	00f000c0 000f0000 f87ffe3f cffbf13f     ........?...?...
 23ff014:	bcf3fefc 1fe0ef3d 7fff7ffe fedffffb     ....=...........
 23ff024:	3dbcfffe c61fe0ef fb7fffff fefedfff     ...=............
 23ff034:	ef3dbcff c7e30fe0 c37b78fe fff01ede     ..=......x{.....
 23ff044:	00ef3dbc fc87ff07 dec37b78 3cf8f01e     .=......x{.....<
 23ff054:	0100ef3d 00f0ffff 1ec0c37b 3d3cf0f0     =.......{.....<=
 23ff064:	f30100ef fb3fe07f f0fecfc3 ef3d3cf0     ......?......<=.
 23ff074:	3fe30300 c3fb7f80 f0f0fedf 00ef3d3c     ...?........<=..
 23ff084:	003ce707 dec37b78 3cf0f01e 0700ef3d     ..<.x{.....<=...
 23ff094:	7800beff 1edec37b 3d3cf0f0 ff0700ef     ...x{.....<=....
 23ff0a4:	7b7800fe f01edec3 ef3d3cf0 feff0f00     ..x{.....<=.....
 23ff0b4:	fffb7f00 f0f0fedf e0effd3f 00ffff0f     ........?.......
 23ff0c4:	dffffb7f 3ff0f0fe 0fe0effd 3e00fff9     .......?.......>
 23ff0d4:	9ecff979 3d1ff0f0 f11fe0e7 000000ff     y......=........
	...
 23ff0ec:	ff801f00 ffff7f00 ffffffff e0ffffff     ................
 23ff0fc:	007f001c ffffff7f 886db4fe 00e0188d     ..........m.....
 23ff10c:	7f001f00 feffffff b57dad95 0000e077     ..........}.w...
 23ff11c:	ff7f000f a5feffff 198d9dad 060000e0     ................
 23ff12c:	ffff7f00 adb5feff e07eb5ed              ..........~.

023ff138 <_ZTV16Adafruit_SSD1306>:
	...
 23ff140:	023eff31 023eff49 023ef179 023f86cf     1.>.I.>.y.>...?.
 23ff150:	023eff5d 023eeb81 023eeb83 023eebb5     ].>...>...>...>.
 23ff160:	023eeb91 023eeba3 023eeac3 023eeb81     ..>...>...>...>.
 23ff170:	023eedab 023f00fb 023f07b7 023f0769     ..>...?...?.i.?.
 23ff180:	023eec45 023eec8b 023eeca7 023eed29     E.>...>...>.).>.

023ff190 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
 23ff190:	e0c08000 fefcf8f0                       ........

023ff198 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
 23ff198:	07030100 7f3f1f0f                       ......?.

023ff1a0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
 23ff1a0:	a880d5ae                                ....

023ff1a4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
 23ff1a4:	8d4000d3                                ..@.

023ff1a8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
 23ff1a8:	c8a10020                                 ...

023ff1ac <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
 23ff1ac:	a6a440db                                 .@....

023ff1b2 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
 23ff1b2:	21ff0022                                 "..!..

023ff1b8 <CSWTCH.30>:
 23ff1b8:	00c80064 03200190 ffffffff ffffffff     d..... .........
 23ff1c8:	ffff0032 ffffffff 00000019              2...........

023ff1d4 <CSWTCH.35>:
 23ff1d4:	3f800000 40000000 3e000000 3e800000     ...?...@...>...>

023ff1e4 <_ZTV15RHGenericDriver>:
	...
 23ff1ec:	023f0f91 023e3309 023e3309 023e3309     ..?..3>..3>..3>.
 23ff1fc:	023e3309 023f0f95 023f0fa7 023f102d     .3>...?...?.-.?.
 23ff20c:	023f1005 023f1051 023f0fb1 023f0fb9     ..?.Q.?...?...?.
 23ff21c:	023f0fbd 023f0fc1 023f0fc5 023f0fc9     ..?...?...?...?.
 23ff22c:	023f0fb5 023f0fd5 023f0fd9 023f0fdd     ..?...?...?...?.
 23ff23c:	023f0fe1 023f0fe5 023f0feb 023f0fef     ..?...?...?...?.
 23ff24c:	023f0fb1 023f0ff3 023f0ff9 023f0fff     ..?...?...?...?.

023ff25c <_ZTV12RHGenericSPI>:
	...
 23ff264:	023e3309 023f10b1 023f10b3 023e3309     .3>...?...?..3>.
 23ff274:	023e3309 023f10bb 023f10bf 023f10c3     .3>...?...?...?.
 23ff284:	023f10b5 023f10b7 023f10b9              ..?...?...?.

023ff290 <_ZTV13RHHardwareSPI>:
	...
 23ff298:	023f1139 023f114d 023f115b 023f1169     9.?.M.?.[.?.i.?.
 23ff2a8:	023f11d5 023f10bb 023f10bf 023f10c3     ..?...?...?...?.
 23ff2b8:	023f11e3 023f11f7 023f10dd              ..?...?...?.

023ff2c4 <_ZTV11RHSPIDriver>:
	...
 23ff2cc:	023f1215 023e3309 023e3309 023e3309     ..?..3>..3>..3>.
 23ff2dc:	023e3309 023f0f95 023f0fa7 023f102d     .3>...?...?.-.?.
 23ff2ec:	023f1005 023f1051 023f0fb1 023f0fb9     ..?.Q.?...?...?.
 23ff2fc:	023f0fbd 023f0fc1 023f0fc5 023f0fc9     ..?...?...?...?.
 23ff30c:	023f0fb5 023f0fd5 023f0fd9 023f0fdd     ..?...?...?...?.
 23ff31c:	023f0fe1 023f0fe5 023f0feb 023f0fef     ..?...?...?...?.
 23ff32c:	023f0fb1 023f0ff3 023f0ff9 023f0fff     ..?...?...?...?.

023ff33c <_ZL18MODEM_CONFIG_TABLE>:
 23ff33c:	92047472 94480474 0cc47804              rt..t.H..x..

023ff348 <_ZTV7RH_RF95>:
	...
 23ff350:	023f1829 023f16df 023f13d9 023f171b     ).?...?...?...?.
 23ff360:	023f1391 023f0f95 023f0fa7 023f102d     ..?...?...?.-.?.
 23ff370:	023f1005 023f1051 023f1395 023f0fb9     ..?.Q.?...?...?.
 23ff380:	023f0fbd 023f0fc1 023f0fc5 023f0fc9     ..?...?...?...?.
 23ff390:	023f0fb5 023f0fd5 023f0fd9 023f0fdd     ..?...?...?...?.
 23ff3a0:	023f0fe1 023f0fe5 023f0feb 023f0fef     ..?...?...?...?.
 23ff3b0:	023f13bf 023f0ff3 023f0ff9 023f0fff     ..?...?...?...?.
 23ff3c0:	41465845 61660054 64656c69 206f7420     EXFAT.failed to 
 23ff3d0:	64616572 67657220 72646441 3230253d     read regAddr=%02
 23ff3e0:	6f632078 3d746e75 66007525 656c6961     x count=%u.faile
 23ff3f0:	6f742064 61657220 65722064 64644167     d to read regAdd
 23ff400:	30253d72 73207832 3d746174 46006425     r=%02x stat=%d.F
 23ff410:	2054554f 20646964 20746f6e 48206f67     OUT did not go H
 23ff420:	00484749 20746f6e 65746564 64657463     IGH.not detected
 23ff430:	69616600 2064656c 77206f74 65746972     .failed to write
 23ff440:	67657220 72646441 3230253d 74732078      regAddr=%02x st
 23ff450:	253d7461 65730064 54445774 00642520     at=%d.setWDT %d.
 23ff460:	63746177 676f6468 656c6320 64657261     watchdog cleared
 23ff470:	65526220 746c7573 0064253d 63746177      bResult=%d.watc
 23ff480:	676f6468 74657320 756f6620 63655372     hdog set fourSec
 23ff490:	64253d73 65526220 746c7573 0064253d     s=%d bResult=%d.
 23ff4a0:	43544157 474f4448 45454400 4f505f50     WATCHDOG.DEEP_PO
 23ff4b0:	5f524557 4e574f44 554f4300 4f44544e     WER_DOWN.COUNTDO
 23ff4c0:	545f4e57 52454d49 414c4100 66004d52     WN_TIMER.ALARM.f
 23ff4d0:	756c6961 69206572 7075206e 65746164     ailure in update
 23ff4e0:	656b6157 73616552 25206e6f 61770064     WakeReason %d.wa
 23ff4f0:	7220656b 6f736165 203d206e 25007325     ke reason = %s.%
 23ff500:	2d643430 64323025 3230252d 30252064     04d-%02d-%02d %0
 23ff510:	253a6432 3a643230 64323025 74656700     2d:%02d:%02d.get
 23ff520:	41637452 206d5473 73007325 74527465     RtcAsTm %s.setRt
 23ff530:	54734163 7325206d 69616600 6572756c     cAsTm %s.failure
 23ff540:	206e6920 52746573 72466374 6d546d6f      in setRtcFromTm
 23ff550:	00642520 20746573 74737973 63206d65      %d.set system c
 23ff560:	6b636f6c 6f726620 5452206d 73252043     lock from RTC %s
 23ff570:	69616600 2064656c 64206f74 63657465     .failed to detec
 23ff580:	42412074 35303831 70706100 3162612e     t AB1805.app.ab1
 23ff590:	00353038                                805.

023ff594 <_ZTV6AB1805>:
	...
 23ff59c:	023f4bc5 023f4bc7 023f50d7 023f515d     .K?..K?..P?.]Q?.
 23ff5ac:	512b5441 43535047 223d4746 73736e67     AT+QGPSCFG="gnss
 23ff5bc:	666e6f63 2c226769 67006425 43636f6c     config",%d.glocC
 23ff5cc:	626c6c61 3a6b6361 30252820 20297836     allback: (%06x) 
 23ff5dc:	20007325 454d432b 52524520 203a524f     %s. +CME ERROR: 
 23ff5ec:	20007525 5047512b 434f4c53 3025203a     %u. +QGPSLOC: %0
 23ff5fc:	30257532 30257532 252e7532 7533302a     2u%02u%02u.%*03u
 23ff60c:	666c252c 666c252c 2c66252c 252c6625     ,%lf,%lf,%f,%f,%
 23ff61c:	30252c75 252e7533 2c753230 252c6625     u,%03u.%02u,%f,%
 23ff62c:	30252c66 30257532 30257532 252c7532     f,%02u%02u%02u,%
 23ff63c:	2b200075 53504751 3a474643 73652220     u. +QGPSCFG: "es
 23ff64c:	616d6974 6e6f6974 7272655f 2c22726f     timation_error",
 23ff65c:	252c6625 66252c66 0066252c 00646d63     %f,%f,%f,%f.cmd.
 23ff66c:	00636f6c 006b636c 73006468 68006470     loc.lck.hd.spd.h
 23ff67c:	00706f64 63615f68 5f760063 00636361     dop.h_acc.v_acc.
 23ff68c:	7461736e 66747400 65720066 64695f71     nsat.ttff.req_id
 23ff69c:	736e6700 65635f73 6c756c6c 4d007261     .gnss_cellular.M
 23ff6ac:	6d65646f 20444920 25207369 6f4d0064     odem ID is %d.Mo
 23ff6bc:	206d6564 20746f6e 68636163 79206465     dem not cached y
 23ff6cc:	42007465 2d353947 6420354d 63657465     et.BG95-M5 detec
 23ff6dc:	00646574 65646f4d 7974206d 25206570     ted.Modem type %
 23ff6ec:	6f6e2064 75732074 726f7070 00646574     d not supported.
 23ff6fc:	69676542 6e696e6e 6f6c2067 69746163     Beginning locati
 23ff70c:	6c206e6f 61726269 43007972 69666e6f     on library.Confi
 23ff71c:	69727567 6120676e 6e65746e 7020616e     guring antenna p
 23ff72c:	44006e69 63657465 676e6974 646f6d20     in.Detecting mod
 23ff73c:	74206d65 00657079 65646f4d 7369206d     em type.Modem is
 23ff74c:	746f6e20 006e6f20 65646f4d 7369206d      not on.Modem is
 23ff75c:	746f6e20 70757320 74726f70 41006465      not supported.A
 23ff76c:	73697571 6f697469 7369206e 726c6120     quisition is alr
 23ff77c:	79646165 646e7520 61777265 74530079     eady underway.St
 23ff78c:	69747261 7320676e 68636e79 6f6e6f72     arting synchrono
 23ff79c:	61207375 73697571 6f697469 7550006e     us aquisition.Pu
 23ff7ac:	73696c62 676e6968 636f6c20 65766520     blishing loc eve
 23ff7bc:	5300746e 74726174 61206465 73697571     nt.Started aquis
 23ff7cc:	6f697469 5441006e 5047512b 00313d53     ition.AT+QGPS=1.
 23ff7dc:	512b5441 43535047 223d4746 61656d6e     AT+QGPSCFG="nmea
 23ff7ec:	6570655f 00312c22 512b5441 4c535047     _epe",1.AT+QGPSL
 23ff7fc:	323d434f 2b544100 53504751 3d474643     OC=2.AT+QGPSCFG=
 23ff80c:	74736522 74616d69 5f6e6f69 6f727265     "estimation_erro
 23ff81c:	41002272 47512b54 4e455350 65530044     r".AT+QGPSEND.Se
 23ff82c:	6e69646e 79732067 7268636e 756f6e6f     nding synchronou
 23ff83c:	6f632073 656c706d 6e6f6974 6e655300     s completion.Sen
 23ff84c:	676e6964 79736120 7268636e 756f6e6f     ding asynchronou
 23ff85c:	6f632073 656c706d 6e6f6974 00000000     s completion....

023ff86c <_ZTVN5spark13CellularClassE>:
	...
 23ff874:	023f73df 023f73d5 023f73cb 023f7399     .s?..s?..s?..s?.
 23ff884:	023e3ec7 023e3ed3 023f83f9 023f8401     .>>..>>...?...?.
 23ff894:	023f73bf 023f73b7 023f73ad 023f73a3     .s?..s?..s?..s?.
 23ff8a4:	023f854d 023f8431 023f8439 006e616e     M.?.1.?.9.?.nan.
 23ff8b4:	00666e69 0066766f                       inf.ovf.

023ff8bc <_ZTV14CellularSignal>:
	...
 23ff8c4:	023f746d 023f7495 023f746f 023f74a5     mt?..t?.ot?..t?.
 23ff8d4:	023f74d9 023f7505 023f7539 023f76fd     .t?..u?.9u?..v?.
 23ff8e4:	023f7473 023f748f fffffffc 00000000     st?..t?.........
 23ff8f4:	023f7749                                Iw?.

023ff8f8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ff900:	023f7769 023f776f 023f77ad 023f777d     iw?.ow?..w?.}w?.
 23ff910:	023f776b                                kw?.

023ff914 <_ZTVN5spark13EthernetClassE>:
	...
 23ff91c:	023f7db7 023f7dad 023f7da3 023f7d99     .}?..}?..}?..}?.
 23ff92c:	023f7d8d 023f7d81 023f83f9 023f8401     .}?..}?...?...?.
 23ff93c:	023f7d75 023f7d6d 023f7d63 023f7d59     u}?.m}?.c}?.Y}?.
 23ff94c:	023f854d 023f8431 023f8439              M.?.1.?.9.?.

023ff958 <_ZTV7TwoWire>:
	...
 23ff960:	023f7dd5 023f7e1f 023f7df7 023f7dd7     .}?..~?..}?..}?.
 23ff970:	023f7dff 023f7e07 023f7e0f 023f7e17     .}?..~?..~?..~?.
 23ff980:	023f8aa9                                ..?.

023ff984 <_ZTV9IPAddress>:
	...
 23ff98c:	023f7fe9 023f7fd9 023f7fdb 756c6c25     ..?...?...?.%llu
 23ff99c:	2a2e2500 7500666c 78343025 00000000     .%.*lf.u%04x....

023ff9ac <_ZTVN5spark16JSONBufferWriterE>:
	...
 23ff9b4:	023f80c9 023f80cb 023f80d9 023f80ff     ..?...?...?...?.
 23ff9c4:	00707061                                app.

023ff9c8 <CSWTCH.165>:
 23ff9c8:	1007aef0 1007aeb4 1007af98 1007af10     ................

023ff9d8 <_ZTVN5spark12NetworkClassE>:
	...
 23ff9e0:	023f83b9 023f83c3 023f83cd 023f83d7     ..?...?...?...?.
 23ff9f0:	023f83e1 023f83ed 023f83f9 023f8401     ..?...?...?...?.
 23ffa00:	023f8409 023f8415 023f841d 023f8427     ..?...?...?.'.?.
 23ffa10:	023f854d 023f8431 023f8439              M.?.1.?.9.?.

023ffa1c <_ZTVN8particle18OutputStringStreamE>:
	...
 23ffa24:	023f86fb 023f86fd 023f86b7 023f870d     ..?...?...?...?.

023ffa34 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 23ffa34:	18100800 38302820 33302b25 30253a64     .... (08%+03d:%0
 23ffa44:	25007532 6d252d59 5464252d 253a4825     2u.%Y-%m-%dT%H:%
 23ffa54:	53253a4d 61007a25 69746373 0000656d     M:%S%z.asctime..

023ffa64 <_ZTV11USARTSerial>:
	...
 23ffa6c:	023f90f1 023f915d 023f9135 023f86cf     ..?.].?.5.?...?.
 23ffa7c:	023f9105 023f9121 023f9113 023f912f     ..?.!.?...?./.?.
 23ffa8c:	023f8aa9 023f90f3 023f90f7              ..?...?...?.

023ffa98 <_ZTV9USBSerial>:
	...
 23ffaa0:	023f91a1 023f9209 023f91df 023f86cf     ..?...?...?...?.
 23ffab0:	023f91d1 023f91a3 023f91b3 023f9203     ..?...?...?...?.
 23ffac0:	023f8aa9 023f91c3 023f919b              ..?...?...?.

023ffacc <_ZTVN5spark9WiFiClassE>:
	...
 23ffad4:	023f9363 023f9359 023f934f 023f92f7     c.?.Y.?.O.?...?.
 23ffae4:	023f9343 023f9337 023f83f9 023f8401     C.?.7.?...?...?.
 23ffaf4:	023f932b 023f9323 023f9319 023f930f     +.?.#.?...?...?.
 23ffb04:	023f854d 023f8431 023f8439              M.?.1.?.9.?.

023ffb10 <_ZTV10WiFiSignal>:
	...
 23ffb18:	023f92c3 023f9301 023f92c5 023f936d     ..?...?...?.m.?.
 23ffb28:	023f93a1 023f93cd 023f9401              ..?...?...?.

023ffb34 <_ZSt7nothrow>:
 23ffb34:	00000000                                ....

023ffb38 <atanhi>:
 23ffb38:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
 23ffb48:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

023ffb58 <atanlo>:
 23ffb58:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
 23ffb68:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

023ffb78 <CSWTCH.8>:
 23ffb78:	54442d18 bfe921fb 7f3321d2 4002d97c     .-DT.!...!3.|..@
 23ffb88:	7f3321d2 c002d97c                       .!3.|...

023ffb90 <CSWTCH.9>:
 23ffb90:	00000000 80000000 54442d18 400921fb     .........-DT.!.@
 23ffba0:	54442d18 c00921fb 00000000              .-DT.!......

023ffbac <npio2_hw>:
 23ffbac:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
 23ffbbc:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
 23ffbcc:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
 23ffbdc:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
 23ffbec:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
 23ffbfc:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
 23ffc0c:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
 23ffc1c:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

023ffc2c <two_over_pi>:
 23ffc2c:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
 23ffc3c:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
 23ffc4c:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
 23ffc5c:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
 23ffc6c:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
 23ffc7c:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
 23ffc8c:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
 23ffc9c:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
 23ffcac:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
 23ffcbc:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
 23ffccc:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
 23ffcdc:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
 23ffcec:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
 23ffcfc:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
 23ffd0c:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
 23ffd1c:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
 23ffd2c:	0060e27b 00c08c6b 00000000              {.`.k.......

023ffd38 <PIo2>:
 23ffd38:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
 23ffd48:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
 23ffd58:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
 23ffd68:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

023ffd78 <init_jk>:
 23ffd78:	00000002 00000003 00000004 00000006     ................

023ffd88 <TWO52>:
 23ffd88:	00000000 43300000 00000000 c3300000     ......0C......0.
 23ffd98:	73332e25 332e2520 64332573 322e2520     %.3s %.3s%3d %.2
 23ffda8:	2e253a64 253a6432 2064322e 000a6425     d:%.2d:%.2d %d..

023ffdb8 <day_name.1>:
 23ffdb8:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
 23ffdc8:	61536972                                 riSat

023ffdcd <mon_name.0>:
 23ffdcd:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
 23ffddd:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
 23ffded:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
 23ffdfd:	63757320 64656563 2f006465 2f706d74      succeeded./tmp/
 23ffe0d:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
 23ffe1d:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
 23ffe2d:	5f343231 36303631 36303831 732f3933     124_1606180639/s
 23ffe3d:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
 23ffe4d:	62696c2f 69742f63 672f656d 6d69746d     /libc/time/gmtim
 23ffe5d:	00632e65 706d742f 6e656a2f 736e696b     e.c./tmp/jenkins
 23ffe6d:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
 23ffe7d:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
 23ffe8d:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
 23ffe9d:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
 23ffead:	696c6474 61722f62 632e646e               tdlib/rand.c.

023ffeba <_ctype_>:
 23ffeba:	20202000 20202020 28282020 20282828     .         ((((( 
 23ffeca:	20202020 20202020 20202020 20202020                     
 23ffeda:	10108820 10101010 10101010 10101010      ...............
 23ffeea:	04040410 04040404 10040404 10101010     ................
 23ffefa:	41411010 41414141 01010101 01010101     ..AAAAAA........
 23fff0a:	01010101 01010101 01010101 10101010     ................
 23fff1a:	42421010 42424242 02020202 02020202     ..BBBBBB........
 23fff2a:	02020202 02020202 02020202 10101010     ................
 23fff3a:	00000020 00000000 00000000 00000000      ...............
	...

023fffbb <link_const_data_end>:
	...

023fffbc <link_constructors_location>:
 23fffbc:	023eaa21 	.word	0x023eaa21
 23fffc0:	023f1205 	.word	0x023f1205
 23fffc4:	023f5661 	.word	0x023f5661
 23fffc8:	023f5e15 	.word	0x023f5e15
 23fffcc:	023f7389 	.word	0x023f7389
 23fffd0:	023f743d 	.word	0x023f743d
 23fffd4:	023f7d49 	.word	0x023f7d49
 23fffd8:	023f7dc1 	.word	0x023f7dc1
 23fffdc:	023f7f69 	.word	0x023f7f69
 23fffe0:	023f83a9 	.word	0x023f83a9
 23fffe4:	023f8561 	.word	0x023f8561
 23fffe8:	023f8899 	.word	0x023f8899
 23fffec:	023f8cf1 	.word	0x023f8cf1
 23ffff0:	023f90dd 	.word	0x023f90dd
 23ffff4:	023f94f5 	.word	0x023f94f5
