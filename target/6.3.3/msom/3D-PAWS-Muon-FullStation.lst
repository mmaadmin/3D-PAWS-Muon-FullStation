
/Users/rjbubon/Documents/Particle/3D-PAWS-Muon-FullStation/target/6.3.3/msom/3D-PAWS-Muon-FullStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085e3000  085e3000  00003000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085e3018  085e3018  00003018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  085e30a4  085e30a4  000030a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .dynalib      00000008  023e33d8  085e30b0  000033d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .psram_text   0001cc14  023e33e0  085e30b8  000033e0  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  5 .data_alt     00000000  023ffff4  023ffff4  00030000  2**0
                  CONTENTS
  6 .bss_alt      00000000  023ffff4  023ffff4  00030000  2**0
                  CONTENTS
  7 .data         00000144  1006a0f0  085ffccc  0002a0f0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00010dc4  1006a238  1006a238  0003a238  2**3
                  ALLOC
  9 .secure_ram_text 00000000  1007d000  1007d000  00030000  2**0
                  CONTENTS
 10 .backup       00000004  1007b400  085ffe10  0002b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .module_info_suffix_align 000001a4  085ffe14  085ffe14  0002fe14  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0002ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0002fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   0048bc23  00000000  00000000  00030000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00045f5c  00000000  00000000  004bbc23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    000acae6  00000000  00000000  00501b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00006b58  00000000  00000000  005ae665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0001a9b8  00000000  00000000  005b51bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000c2dfc  00000000  00000000  005cfb75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000febf4  00000000  00000000  00692971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00169474  00000000  00000000  00791565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00014c68  00000000  00000000  008fa9dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085e3018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85e3018:	4813      	ldr	r0, [pc, #76]	; (85e3068 <module_user_pre_init+0x50>)
 85e301a:	4914      	ldr	r1, [pc, #80]	; (85e306c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85e301c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85e301e:	4288      	cmp	r0, r1
 85e3020:	d005      	beq.n	85e302e <module_user_pre_init+0x16>
 85e3022:	4a13      	ldr	r2, [pc, #76]	; (85e3070 <module_user_pre_init+0x58>)
 85e3024:	4282      	cmp	r2, r0
 85e3026:	d002      	beq.n	85e302e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85e3028:	4b12      	ldr	r3, [pc, #72]	; (85e3074 <module_user_pre_init+0x5c>)
 85e302a:	1a12      	subs	r2, r2, r0
 85e302c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85e302e:	4812      	ldr	r0, [pc, #72]	; (85e3078 <module_user_pre_init+0x60>)
 85e3030:	4a12      	ldr	r2, [pc, #72]	; (85e307c <module_user_pre_init+0x64>)
 85e3032:	2100      	movs	r1, #0
 85e3034:	4b12      	ldr	r3, [pc, #72]	; (85e3080 <module_user_pre_init+0x68>)
 85e3036:	1a12      	subs	r2, r2, r0
 85e3038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85e303a:	4812      	ldr	r0, [pc, #72]	; (85e3084 <module_user_pre_init+0x6c>)
 85e303c:	4912      	ldr	r1, [pc, #72]	; (85e3088 <module_user_pre_init+0x70>)
 85e303e:	4288      	cmp	r0, r1
 85e3040:	d005      	beq.n	85e304e <module_user_pre_init+0x36>
 85e3042:	4a12      	ldr	r2, [pc, #72]	; (85e308c <module_user_pre_init+0x74>)
 85e3044:	4282      	cmp	r2, r0
 85e3046:	d002      	beq.n	85e304e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85e3048:	4b0a      	ldr	r3, [pc, #40]	; (85e3074 <module_user_pre_init+0x5c>)
 85e304a:	1a12      	subs	r2, r2, r0
 85e304c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85e304e:	4810      	ldr	r0, [pc, #64]	; (85e3090 <module_user_pre_init+0x78>)
 85e3050:	4910      	ldr	r1, [pc, #64]	; (85e3094 <module_user_pre_init+0x7c>)
 85e3052:	4288      	cmp	r0, r1
 85e3054:	d005      	beq.n	85e3062 <module_user_pre_init+0x4a>
 85e3056:	4a10      	ldr	r2, [pc, #64]	; (85e3098 <module_user_pre_init+0x80>)
 85e3058:	4282      	cmp	r2, r0
 85e305a:	d002      	beq.n	85e3062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85e305c:	4b05      	ldr	r3, [pc, #20]	; (85e3074 <module_user_pre_init+0x5c>)
 85e305e:	1a12      	subs	r2, r2, r0
 85e3060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85e3062:	4801      	ldr	r0, [pc, #4]	; (85e3068 <module_user_pre_init+0x50>)
 85e3064:	bd08      	pop	{r3, pc}
 85e3066:	bf00      	nop
 85e3068:	1006a0f0 	.word	0x1006a0f0
 85e306c:	085ffccc 	.word	0x085ffccc
 85e3070:	1006a234 	.word	0x1006a234
 85e3074:	10110d2d 	.word	0x10110d2d
 85e3078:	1006a238 	.word	0x1006a238
 85e307c:	1007affc 	.word	0x1007affc
 85e3080:	10110ea1 	.word	0x10110ea1
 85e3084:	023e33d8 	.word	0x023e33d8
 85e3088:	085e30b0 	.word	0x085e30b0
 85e308c:	023e33e0 	.word	0x023e33e0
 85e3090:	023e33e0 	.word	0x023e33e0
 85e3094:	085e30b8 	.word	0x085e30b8
 85e3098:	023ffff4 	.word	0x023ffff4

085e309c <dynalib_preinit>:
 85e309c:	085e3019 00000000                       .0^.....

Disassembly of section .psram_text:

023e33e0 <__aeabi_drsub>:
 23e33e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23e33e4:	e002      	b.n	23e33ec <__adddf3>
 23e33e6:	bf00      	nop

023e33e8 <__aeabi_dsub>:
 23e33e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023e33ec <__adddf3>:
 23e33ec:	b530      	push	{r4, r5, lr}
 23e33ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23e33f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23e33f6:	ea94 0f05 	teq	r4, r5
 23e33fa:	bf08      	it	eq
 23e33fc:	ea90 0f02 	teqeq	r0, r2
 23e3400:	bf1f      	itttt	ne
 23e3402:	ea54 0c00 	orrsne.w	ip, r4, r0
 23e3406:	ea55 0c02 	orrsne.w	ip, r5, r2
 23e340a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23e340e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23e3412:	f000 80e2 	beq.w	23e35da <__adddf3+0x1ee>
 23e3416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23e341a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23e341e:	bfb8      	it	lt
 23e3420:	426d      	neglt	r5, r5
 23e3422:	dd0c      	ble.n	23e343e <__adddf3+0x52>
 23e3424:	442c      	add	r4, r5
 23e3426:	ea80 0202 	eor.w	r2, r0, r2
 23e342a:	ea81 0303 	eor.w	r3, r1, r3
 23e342e:	ea82 0000 	eor.w	r0, r2, r0
 23e3432:	ea83 0101 	eor.w	r1, r3, r1
 23e3436:	ea80 0202 	eor.w	r2, r0, r2
 23e343a:	ea81 0303 	eor.w	r3, r1, r3
 23e343e:	2d36      	cmp	r5, #54	; 0x36
 23e3440:	bf88      	it	hi
 23e3442:	bd30      	pophi	{r4, r5, pc}
 23e3444:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23e3448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23e344c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23e3450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23e3454:	d002      	beq.n	23e345c <__adddf3+0x70>
 23e3456:	4240      	negs	r0, r0
 23e3458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e345c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23e3460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23e3464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23e3468:	d002      	beq.n	23e3470 <__adddf3+0x84>
 23e346a:	4252      	negs	r2, r2
 23e346c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e3470:	ea94 0f05 	teq	r4, r5
 23e3474:	f000 80a7 	beq.w	23e35c6 <__adddf3+0x1da>
 23e3478:	f1a4 0401 	sub.w	r4, r4, #1
 23e347c:	f1d5 0e20 	rsbs	lr, r5, #32
 23e3480:	db0d      	blt.n	23e349e <__adddf3+0xb2>
 23e3482:	fa02 fc0e 	lsl.w	ip, r2, lr
 23e3486:	fa22 f205 	lsr.w	r2, r2, r5
 23e348a:	1880      	adds	r0, r0, r2
 23e348c:	f141 0100 	adc.w	r1, r1, #0
 23e3490:	fa03 f20e 	lsl.w	r2, r3, lr
 23e3494:	1880      	adds	r0, r0, r2
 23e3496:	fa43 f305 	asr.w	r3, r3, r5
 23e349a:	4159      	adcs	r1, r3
 23e349c:	e00e      	b.n	23e34bc <__adddf3+0xd0>
 23e349e:	f1a5 0520 	sub.w	r5, r5, #32
 23e34a2:	f10e 0e20 	add.w	lr, lr, #32
 23e34a6:	2a01      	cmp	r2, #1
 23e34a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 23e34ac:	bf28      	it	cs
 23e34ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 23e34b2:	fa43 f305 	asr.w	r3, r3, r5
 23e34b6:	18c0      	adds	r0, r0, r3
 23e34b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23e34bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23e34c0:	d507      	bpl.n	23e34d2 <__adddf3+0xe6>
 23e34c2:	f04f 0e00 	mov.w	lr, #0
 23e34c6:	f1dc 0c00 	rsbs	ip, ip, #0
 23e34ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 23e34ce:	eb6e 0101 	sbc.w	r1, lr, r1
 23e34d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23e34d6:	d31b      	bcc.n	23e3510 <__adddf3+0x124>
 23e34d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23e34dc:	d30c      	bcc.n	23e34f8 <__adddf3+0x10c>
 23e34de:	0849      	lsrs	r1, r1, #1
 23e34e0:	ea5f 0030 	movs.w	r0, r0, rrx
 23e34e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23e34e8:	f104 0401 	add.w	r4, r4, #1
 23e34ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23e34f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23e34f4:	f080 809a 	bcs.w	23e362c <__adddf3+0x240>
 23e34f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23e34fc:	bf08      	it	eq
 23e34fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23e3502:	f150 0000 	adcs.w	r0, r0, #0
 23e3506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23e350a:	ea41 0105 	orr.w	r1, r1, r5
 23e350e:	bd30      	pop	{r4, r5, pc}
 23e3510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23e3514:	4140      	adcs	r0, r0
 23e3516:	eb41 0101 	adc.w	r1, r1, r1
 23e351a:	3c01      	subs	r4, #1
 23e351c:	bf28      	it	cs
 23e351e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23e3522:	d2e9      	bcs.n	23e34f8 <__adddf3+0x10c>
 23e3524:	f091 0f00 	teq	r1, #0
 23e3528:	bf04      	itt	eq
 23e352a:	4601      	moveq	r1, r0
 23e352c:	2000      	moveq	r0, #0
 23e352e:	fab1 f381 	clz	r3, r1
 23e3532:	bf08      	it	eq
 23e3534:	3320      	addeq	r3, #32
 23e3536:	f1a3 030b 	sub.w	r3, r3, #11
 23e353a:	f1b3 0220 	subs.w	r2, r3, #32
 23e353e:	da0c      	bge.n	23e355a <__adddf3+0x16e>
 23e3540:	320c      	adds	r2, #12
 23e3542:	dd08      	ble.n	23e3556 <__adddf3+0x16a>
 23e3544:	f102 0c14 	add.w	ip, r2, #20
 23e3548:	f1c2 020c 	rsb	r2, r2, #12
 23e354c:	fa01 f00c 	lsl.w	r0, r1, ip
 23e3550:	fa21 f102 	lsr.w	r1, r1, r2
 23e3554:	e00c      	b.n	23e3570 <__adddf3+0x184>
 23e3556:	f102 0214 	add.w	r2, r2, #20
 23e355a:	bfd8      	it	le
 23e355c:	f1c2 0c20 	rsble	ip, r2, #32
 23e3560:	fa01 f102 	lsl.w	r1, r1, r2
 23e3564:	fa20 fc0c 	lsr.w	ip, r0, ip
 23e3568:	bfdc      	itt	le
 23e356a:	ea41 010c 	orrle.w	r1, r1, ip
 23e356e:	4090      	lslle	r0, r2
 23e3570:	1ae4      	subs	r4, r4, r3
 23e3572:	bfa2      	ittt	ge
 23e3574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23e3578:	4329      	orrge	r1, r5
 23e357a:	bd30      	popge	{r4, r5, pc}
 23e357c:	ea6f 0404 	mvn.w	r4, r4
 23e3580:	3c1f      	subs	r4, #31
 23e3582:	da1c      	bge.n	23e35be <__adddf3+0x1d2>
 23e3584:	340c      	adds	r4, #12
 23e3586:	dc0e      	bgt.n	23e35a6 <__adddf3+0x1ba>
 23e3588:	f104 0414 	add.w	r4, r4, #20
 23e358c:	f1c4 0220 	rsb	r2, r4, #32
 23e3590:	fa20 f004 	lsr.w	r0, r0, r4
 23e3594:	fa01 f302 	lsl.w	r3, r1, r2
 23e3598:	ea40 0003 	orr.w	r0, r0, r3
 23e359c:	fa21 f304 	lsr.w	r3, r1, r4
 23e35a0:	ea45 0103 	orr.w	r1, r5, r3
 23e35a4:	bd30      	pop	{r4, r5, pc}
 23e35a6:	f1c4 040c 	rsb	r4, r4, #12
 23e35aa:	f1c4 0220 	rsb	r2, r4, #32
 23e35ae:	fa20 f002 	lsr.w	r0, r0, r2
 23e35b2:	fa01 f304 	lsl.w	r3, r1, r4
 23e35b6:	ea40 0003 	orr.w	r0, r0, r3
 23e35ba:	4629      	mov	r1, r5
 23e35bc:	bd30      	pop	{r4, r5, pc}
 23e35be:	fa21 f004 	lsr.w	r0, r1, r4
 23e35c2:	4629      	mov	r1, r5
 23e35c4:	bd30      	pop	{r4, r5, pc}
 23e35c6:	f094 0f00 	teq	r4, #0
 23e35ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23e35ce:	bf06      	itte	eq
 23e35d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23e35d4:	3401      	addeq	r4, #1
 23e35d6:	3d01      	subne	r5, #1
 23e35d8:	e74e      	b.n	23e3478 <__adddf3+0x8c>
 23e35da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23e35de:	bf18      	it	ne
 23e35e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23e35e4:	d029      	beq.n	23e363a <__adddf3+0x24e>
 23e35e6:	ea94 0f05 	teq	r4, r5
 23e35ea:	bf08      	it	eq
 23e35ec:	ea90 0f02 	teqeq	r0, r2
 23e35f0:	d005      	beq.n	23e35fe <__adddf3+0x212>
 23e35f2:	ea54 0c00 	orrs.w	ip, r4, r0
 23e35f6:	bf04      	itt	eq
 23e35f8:	4619      	moveq	r1, r3
 23e35fa:	4610      	moveq	r0, r2
 23e35fc:	bd30      	pop	{r4, r5, pc}
 23e35fe:	ea91 0f03 	teq	r1, r3
 23e3602:	bf1e      	ittt	ne
 23e3604:	2100      	movne	r1, #0
 23e3606:	2000      	movne	r0, #0
 23e3608:	bd30      	popne	{r4, r5, pc}
 23e360a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23e360e:	d105      	bne.n	23e361c <__adddf3+0x230>
 23e3610:	0040      	lsls	r0, r0, #1
 23e3612:	4149      	adcs	r1, r1
 23e3614:	bf28      	it	cs
 23e3616:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23e361a:	bd30      	pop	{r4, r5, pc}
 23e361c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23e3620:	bf3c      	itt	cc
 23e3622:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23e3626:	bd30      	popcc	{r4, r5, pc}
 23e3628:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23e362c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23e3630:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23e3634:	f04f 0000 	mov.w	r0, #0
 23e3638:	bd30      	pop	{r4, r5, pc}
 23e363a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23e363e:	bf1a      	itte	ne
 23e3640:	4619      	movne	r1, r3
 23e3642:	4610      	movne	r0, r2
 23e3644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23e3648:	bf1c      	itt	ne
 23e364a:	460b      	movne	r3, r1
 23e364c:	4602      	movne	r2, r0
 23e364e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23e3652:	bf06      	itte	eq
 23e3654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23e3658:	ea91 0f03 	teqeq	r1, r3
 23e365c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23e3660:	bd30      	pop	{r4, r5, pc}
 23e3662:	bf00      	nop

023e3664 <__aeabi_ui2d>:
 23e3664:	f090 0f00 	teq	r0, #0
 23e3668:	bf04      	itt	eq
 23e366a:	2100      	moveq	r1, #0
 23e366c:	4770      	bxeq	lr
 23e366e:	b530      	push	{r4, r5, lr}
 23e3670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23e3674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23e3678:	f04f 0500 	mov.w	r5, #0
 23e367c:	f04f 0100 	mov.w	r1, #0
 23e3680:	e750      	b.n	23e3524 <__adddf3+0x138>
 23e3682:	bf00      	nop

023e3684 <__aeabi_i2d>:
 23e3684:	f090 0f00 	teq	r0, #0
 23e3688:	bf04      	itt	eq
 23e368a:	2100      	moveq	r1, #0
 23e368c:	4770      	bxeq	lr
 23e368e:	b530      	push	{r4, r5, lr}
 23e3690:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23e3694:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23e3698:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23e369c:	bf48      	it	mi
 23e369e:	4240      	negmi	r0, r0
 23e36a0:	f04f 0100 	mov.w	r1, #0
 23e36a4:	e73e      	b.n	23e3524 <__adddf3+0x138>
 23e36a6:	bf00      	nop

023e36a8 <__aeabi_f2d>:
 23e36a8:	0042      	lsls	r2, r0, #1
 23e36aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23e36ae:	ea4f 0131 	mov.w	r1, r1, rrx
 23e36b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23e36b6:	bf1f      	itttt	ne
 23e36b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23e36bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23e36c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23e36c4:	4770      	bxne	lr
 23e36c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23e36ca:	bf08      	it	eq
 23e36cc:	4770      	bxeq	lr
 23e36ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23e36d2:	bf04      	itt	eq
 23e36d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23e36d8:	4770      	bxeq	lr
 23e36da:	b530      	push	{r4, r5, lr}
 23e36dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 23e36e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23e36e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23e36e8:	e71c      	b.n	23e3524 <__adddf3+0x138>
 23e36ea:	bf00      	nop

023e36ec <__aeabi_ul2d>:
 23e36ec:	ea50 0201 	orrs.w	r2, r0, r1
 23e36f0:	bf08      	it	eq
 23e36f2:	4770      	bxeq	lr
 23e36f4:	b530      	push	{r4, r5, lr}
 23e36f6:	f04f 0500 	mov.w	r5, #0
 23e36fa:	e00a      	b.n	23e3712 <__aeabi_l2d+0x16>

023e36fc <__aeabi_l2d>:
 23e36fc:	ea50 0201 	orrs.w	r2, r0, r1
 23e3700:	bf08      	it	eq
 23e3702:	4770      	bxeq	lr
 23e3704:	b530      	push	{r4, r5, lr}
 23e3706:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23e370a:	d502      	bpl.n	23e3712 <__aeabi_l2d+0x16>
 23e370c:	4240      	negs	r0, r0
 23e370e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e3712:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23e3716:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23e371a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23e371e:	f43f aed8 	beq.w	23e34d2 <__adddf3+0xe6>
 23e3722:	f04f 0203 	mov.w	r2, #3
 23e3726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23e372a:	bf18      	it	ne
 23e372c:	3203      	addne	r2, #3
 23e372e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23e3732:	bf18      	it	ne
 23e3734:	3203      	addne	r2, #3
 23e3736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23e373a:	f1c2 0320 	rsb	r3, r2, #32
 23e373e:	fa00 fc03 	lsl.w	ip, r0, r3
 23e3742:	fa20 f002 	lsr.w	r0, r0, r2
 23e3746:	fa01 fe03 	lsl.w	lr, r1, r3
 23e374a:	ea40 000e 	orr.w	r0, r0, lr
 23e374e:	fa21 f102 	lsr.w	r1, r1, r2
 23e3752:	4414      	add	r4, r2
 23e3754:	e6bd      	b.n	23e34d2 <__adddf3+0xe6>
 23e3756:	bf00      	nop

023e3758 <__aeabi_dmul>:
 23e3758:	b570      	push	{r4, r5, r6, lr}
 23e375a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23e375e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23e3762:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23e3766:	bf1d      	ittte	ne
 23e3768:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23e376c:	ea94 0f0c 	teqne	r4, ip
 23e3770:	ea95 0f0c 	teqne	r5, ip
 23e3774:	f000 f8de 	bleq	23e3934 <__aeabi_dmul+0x1dc>
 23e3778:	442c      	add	r4, r5
 23e377a:	ea81 0603 	eor.w	r6, r1, r3
 23e377e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23e3782:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23e3786:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23e378a:	bf18      	it	ne
 23e378c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23e3790:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23e3794:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23e3798:	d038      	beq.n	23e380c <__aeabi_dmul+0xb4>
 23e379a:	fba0 ce02 	umull	ip, lr, r0, r2
 23e379e:	f04f 0500 	mov.w	r5, #0
 23e37a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 23e37a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23e37aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 23e37ae:	f04f 0600 	mov.w	r6, #0
 23e37b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 23e37b6:	f09c 0f00 	teq	ip, #0
 23e37ba:	bf18      	it	ne
 23e37bc:	f04e 0e01 	orrne.w	lr, lr, #1
 23e37c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23e37c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23e37c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23e37cc:	d204      	bcs.n	23e37d8 <__aeabi_dmul+0x80>
 23e37ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23e37d2:	416d      	adcs	r5, r5
 23e37d4:	eb46 0606 	adc.w	r6, r6, r6
 23e37d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23e37dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23e37e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23e37e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23e37e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23e37ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23e37f0:	bf88      	it	hi
 23e37f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23e37f6:	d81e      	bhi.n	23e3836 <__aeabi_dmul+0xde>
 23e37f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23e37fc:	bf08      	it	eq
 23e37fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23e3802:	f150 0000 	adcs.w	r0, r0, #0
 23e3806:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23e380a:	bd70      	pop	{r4, r5, r6, pc}
 23e380c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23e3810:	ea46 0101 	orr.w	r1, r6, r1
 23e3814:	ea40 0002 	orr.w	r0, r0, r2
 23e3818:	ea81 0103 	eor.w	r1, r1, r3
 23e381c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23e3820:	bfc2      	ittt	gt
 23e3822:	ebd4 050c 	rsbsgt	r5, r4, ip
 23e3826:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23e382a:	bd70      	popgt	{r4, r5, r6, pc}
 23e382c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23e3830:	f04f 0e00 	mov.w	lr, #0
 23e3834:	3c01      	subs	r4, #1
 23e3836:	f300 80ab 	bgt.w	23e3990 <__aeabi_dmul+0x238>
 23e383a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23e383e:	bfde      	ittt	le
 23e3840:	2000      	movle	r0, #0
 23e3842:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23e3846:	bd70      	pople	{r4, r5, r6, pc}
 23e3848:	f1c4 0400 	rsb	r4, r4, #0
 23e384c:	3c20      	subs	r4, #32
 23e384e:	da35      	bge.n	23e38bc <__aeabi_dmul+0x164>
 23e3850:	340c      	adds	r4, #12
 23e3852:	dc1b      	bgt.n	23e388c <__aeabi_dmul+0x134>
 23e3854:	f104 0414 	add.w	r4, r4, #20
 23e3858:	f1c4 0520 	rsb	r5, r4, #32
 23e385c:	fa00 f305 	lsl.w	r3, r0, r5
 23e3860:	fa20 f004 	lsr.w	r0, r0, r4
 23e3864:	fa01 f205 	lsl.w	r2, r1, r5
 23e3868:	ea40 0002 	orr.w	r0, r0, r2
 23e386c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23e3870:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23e3874:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23e3878:	fa21 f604 	lsr.w	r6, r1, r4
 23e387c:	eb42 0106 	adc.w	r1, r2, r6
 23e3880:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23e3884:	bf08      	it	eq
 23e3886:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23e388a:	bd70      	pop	{r4, r5, r6, pc}
 23e388c:	f1c4 040c 	rsb	r4, r4, #12
 23e3890:	f1c4 0520 	rsb	r5, r4, #32
 23e3894:	fa00 f304 	lsl.w	r3, r0, r4
 23e3898:	fa20 f005 	lsr.w	r0, r0, r5
 23e389c:	fa01 f204 	lsl.w	r2, r1, r4
 23e38a0:	ea40 0002 	orr.w	r0, r0, r2
 23e38a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23e38a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23e38ac:	f141 0100 	adc.w	r1, r1, #0
 23e38b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23e38b4:	bf08      	it	eq
 23e38b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23e38ba:	bd70      	pop	{r4, r5, r6, pc}
 23e38bc:	f1c4 0520 	rsb	r5, r4, #32
 23e38c0:	fa00 f205 	lsl.w	r2, r0, r5
 23e38c4:	ea4e 0e02 	orr.w	lr, lr, r2
 23e38c8:	fa20 f304 	lsr.w	r3, r0, r4
 23e38cc:	fa01 f205 	lsl.w	r2, r1, r5
 23e38d0:	ea43 0302 	orr.w	r3, r3, r2
 23e38d4:	fa21 f004 	lsr.w	r0, r1, r4
 23e38d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23e38dc:	fa21 f204 	lsr.w	r2, r1, r4
 23e38e0:	ea20 0002 	bic.w	r0, r0, r2
 23e38e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23e38e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23e38ec:	bf08      	it	eq
 23e38ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23e38f2:	bd70      	pop	{r4, r5, r6, pc}
 23e38f4:	f094 0f00 	teq	r4, #0
 23e38f8:	d10f      	bne.n	23e391a <__aeabi_dmul+0x1c2>
 23e38fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23e38fe:	0040      	lsls	r0, r0, #1
 23e3900:	eb41 0101 	adc.w	r1, r1, r1
 23e3904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23e3908:	bf08      	it	eq
 23e390a:	3c01      	subeq	r4, #1
 23e390c:	d0f7      	beq.n	23e38fe <__aeabi_dmul+0x1a6>
 23e390e:	ea41 0106 	orr.w	r1, r1, r6
 23e3912:	f095 0f00 	teq	r5, #0
 23e3916:	bf18      	it	ne
 23e3918:	4770      	bxne	lr
 23e391a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23e391e:	0052      	lsls	r2, r2, #1
 23e3920:	eb43 0303 	adc.w	r3, r3, r3
 23e3924:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23e3928:	bf08      	it	eq
 23e392a:	3d01      	subeq	r5, #1
 23e392c:	d0f7      	beq.n	23e391e <__aeabi_dmul+0x1c6>
 23e392e:	ea43 0306 	orr.w	r3, r3, r6
 23e3932:	4770      	bx	lr
 23e3934:	ea94 0f0c 	teq	r4, ip
 23e3938:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23e393c:	bf18      	it	ne
 23e393e:	ea95 0f0c 	teqne	r5, ip
 23e3942:	d00c      	beq.n	23e395e <__aeabi_dmul+0x206>
 23e3944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23e3948:	bf18      	it	ne
 23e394a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23e394e:	d1d1      	bne.n	23e38f4 <__aeabi_dmul+0x19c>
 23e3950:	ea81 0103 	eor.w	r1, r1, r3
 23e3954:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23e3958:	f04f 0000 	mov.w	r0, #0
 23e395c:	bd70      	pop	{r4, r5, r6, pc}
 23e395e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23e3962:	bf06      	itte	eq
 23e3964:	4610      	moveq	r0, r2
 23e3966:	4619      	moveq	r1, r3
 23e3968:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23e396c:	d019      	beq.n	23e39a2 <__aeabi_dmul+0x24a>
 23e396e:	ea94 0f0c 	teq	r4, ip
 23e3972:	d102      	bne.n	23e397a <__aeabi_dmul+0x222>
 23e3974:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23e3978:	d113      	bne.n	23e39a2 <__aeabi_dmul+0x24a>
 23e397a:	ea95 0f0c 	teq	r5, ip
 23e397e:	d105      	bne.n	23e398c <__aeabi_dmul+0x234>
 23e3980:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23e3984:	bf1c      	itt	ne
 23e3986:	4610      	movne	r0, r2
 23e3988:	4619      	movne	r1, r3
 23e398a:	d10a      	bne.n	23e39a2 <__aeabi_dmul+0x24a>
 23e398c:	ea81 0103 	eor.w	r1, r1, r3
 23e3990:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23e3994:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23e3998:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23e399c:	f04f 0000 	mov.w	r0, #0
 23e39a0:	bd70      	pop	{r4, r5, r6, pc}
 23e39a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23e39a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23e39aa:	bd70      	pop	{r4, r5, r6, pc}

023e39ac <__aeabi_ddiv>:
 23e39ac:	b570      	push	{r4, r5, r6, lr}
 23e39ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23e39b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23e39b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23e39ba:	bf1d      	ittte	ne
 23e39bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23e39c0:	ea94 0f0c 	teqne	r4, ip
 23e39c4:	ea95 0f0c 	teqne	r5, ip
 23e39c8:	f000 f8a7 	bleq	23e3b1a <__aeabi_ddiv+0x16e>
 23e39cc:	eba4 0405 	sub.w	r4, r4, r5
 23e39d0:	ea81 0e03 	eor.w	lr, r1, r3
 23e39d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23e39d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23e39dc:	f000 8088 	beq.w	23e3af0 <__aeabi_ddiv+0x144>
 23e39e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23e39e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23e39e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23e39ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23e39f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23e39f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23e39f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23e39fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23e3a00:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23e3a04:	429d      	cmp	r5, r3
 23e3a06:	bf08      	it	eq
 23e3a08:	4296      	cmpeq	r6, r2
 23e3a0a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23e3a0e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23e3a12:	d202      	bcs.n	23e3a1a <__aeabi_ddiv+0x6e>
 23e3a14:	085b      	lsrs	r3, r3, #1
 23e3a16:	ea4f 0232 	mov.w	r2, r2, rrx
 23e3a1a:	1ab6      	subs	r6, r6, r2
 23e3a1c:	eb65 0503 	sbc.w	r5, r5, r3
 23e3a20:	085b      	lsrs	r3, r3, #1
 23e3a22:	ea4f 0232 	mov.w	r2, r2, rrx
 23e3a26:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23e3a2a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23e3a2e:	ebb6 0e02 	subs.w	lr, r6, r2
 23e3a32:	eb75 0e03 	sbcs.w	lr, r5, r3
 23e3a36:	bf22      	ittt	cs
 23e3a38:	1ab6      	subcs	r6, r6, r2
 23e3a3a:	4675      	movcs	r5, lr
 23e3a3c:	ea40 000c 	orrcs.w	r0, r0, ip
 23e3a40:	085b      	lsrs	r3, r3, #1
 23e3a42:	ea4f 0232 	mov.w	r2, r2, rrx
 23e3a46:	ebb6 0e02 	subs.w	lr, r6, r2
 23e3a4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23e3a4e:	bf22      	ittt	cs
 23e3a50:	1ab6      	subcs	r6, r6, r2
 23e3a52:	4675      	movcs	r5, lr
 23e3a54:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23e3a58:	085b      	lsrs	r3, r3, #1
 23e3a5a:	ea4f 0232 	mov.w	r2, r2, rrx
 23e3a5e:	ebb6 0e02 	subs.w	lr, r6, r2
 23e3a62:	eb75 0e03 	sbcs.w	lr, r5, r3
 23e3a66:	bf22      	ittt	cs
 23e3a68:	1ab6      	subcs	r6, r6, r2
 23e3a6a:	4675      	movcs	r5, lr
 23e3a6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23e3a70:	085b      	lsrs	r3, r3, #1
 23e3a72:	ea4f 0232 	mov.w	r2, r2, rrx
 23e3a76:	ebb6 0e02 	subs.w	lr, r6, r2
 23e3a7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23e3a7e:	bf22      	ittt	cs
 23e3a80:	1ab6      	subcs	r6, r6, r2
 23e3a82:	4675      	movcs	r5, lr
 23e3a84:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23e3a88:	ea55 0e06 	orrs.w	lr, r5, r6
 23e3a8c:	d018      	beq.n	23e3ac0 <__aeabi_ddiv+0x114>
 23e3a8e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23e3a92:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23e3a96:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23e3a9a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23e3a9e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23e3aa2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23e3aa6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23e3aaa:	d1c0      	bne.n	23e3a2e <__aeabi_ddiv+0x82>
 23e3aac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23e3ab0:	d10b      	bne.n	23e3aca <__aeabi_ddiv+0x11e>
 23e3ab2:	ea41 0100 	orr.w	r1, r1, r0
 23e3ab6:	f04f 0000 	mov.w	r0, #0
 23e3aba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23e3abe:	e7b6      	b.n	23e3a2e <__aeabi_ddiv+0x82>
 23e3ac0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23e3ac4:	bf04      	itt	eq
 23e3ac6:	4301      	orreq	r1, r0
 23e3ac8:	2000      	moveq	r0, #0
 23e3aca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23e3ace:	bf88      	it	hi
 23e3ad0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23e3ad4:	f63f aeaf 	bhi.w	23e3836 <__aeabi_dmul+0xde>
 23e3ad8:	ebb5 0c03 	subs.w	ip, r5, r3
 23e3adc:	bf04      	itt	eq
 23e3ade:	ebb6 0c02 	subseq.w	ip, r6, r2
 23e3ae2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23e3ae6:	f150 0000 	adcs.w	r0, r0, #0
 23e3aea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23e3aee:	bd70      	pop	{r4, r5, r6, pc}
 23e3af0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23e3af4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23e3af8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23e3afc:	bfc2      	ittt	gt
 23e3afe:	ebd4 050c 	rsbsgt	r5, r4, ip
 23e3b02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23e3b06:	bd70      	popgt	{r4, r5, r6, pc}
 23e3b08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23e3b0c:	f04f 0e00 	mov.w	lr, #0
 23e3b10:	3c01      	subs	r4, #1
 23e3b12:	e690      	b.n	23e3836 <__aeabi_dmul+0xde>
 23e3b14:	ea45 0e06 	orr.w	lr, r5, r6
 23e3b18:	e68d      	b.n	23e3836 <__aeabi_dmul+0xde>
 23e3b1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23e3b1e:	ea94 0f0c 	teq	r4, ip
 23e3b22:	bf08      	it	eq
 23e3b24:	ea95 0f0c 	teqeq	r5, ip
 23e3b28:	f43f af3b 	beq.w	23e39a2 <__aeabi_dmul+0x24a>
 23e3b2c:	ea94 0f0c 	teq	r4, ip
 23e3b30:	d10a      	bne.n	23e3b48 <__aeabi_ddiv+0x19c>
 23e3b32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23e3b36:	f47f af34 	bne.w	23e39a2 <__aeabi_dmul+0x24a>
 23e3b3a:	ea95 0f0c 	teq	r5, ip
 23e3b3e:	f47f af25 	bne.w	23e398c <__aeabi_dmul+0x234>
 23e3b42:	4610      	mov	r0, r2
 23e3b44:	4619      	mov	r1, r3
 23e3b46:	e72c      	b.n	23e39a2 <__aeabi_dmul+0x24a>
 23e3b48:	ea95 0f0c 	teq	r5, ip
 23e3b4c:	d106      	bne.n	23e3b5c <__aeabi_ddiv+0x1b0>
 23e3b4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23e3b52:	f43f aefd 	beq.w	23e3950 <__aeabi_dmul+0x1f8>
 23e3b56:	4610      	mov	r0, r2
 23e3b58:	4619      	mov	r1, r3
 23e3b5a:	e722      	b.n	23e39a2 <__aeabi_dmul+0x24a>
 23e3b5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23e3b60:	bf18      	it	ne
 23e3b62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23e3b66:	f47f aec5 	bne.w	23e38f4 <__aeabi_dmul+0x19c>
 23e3b6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23e3b6e:	f47f af0d 	bne.w	23e398c <__aeabi_dmul+0x234>
 23e3b72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23e3b76:	f47f aeeb 	bne.w	23e3950 <__aeabi_dmul+0x1f8>
 23e3b7a:	e712      	b.n	23e39a2 <__aeabi_dmul+0x24a>

023e3b7c <__gedf2>:
 23e3b7c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23e3b80:	e006      	b.n	23e3b90 <__cmpdf2+0x4>
 23e3b82:	bf00      	nop

023e3b84 <__ledf2>:
 23e3b84:	f04f 0c01 	mov.w	ip, #1
 23e3b88:	e002      	b.n	23e3b90 <__cmpdf2+0x4>
 23e3b8a:	bf00      	nop

023e3b8c <__cmpdf2>:
 23e3b8c:	f04f 0c01 	mov.w	ip, #1
 23e3b90:	f84d cd04 	str.w	ip, [sp, #-4]!
 23e3b94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23e3b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e3b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23e3ba0:	bf18      	it	ne
 23e3ba2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23e3ba6:	d01b      	beq.n	23e3be0 <__cmpdf2+0x54>
 23e3ba8:	b001      	add	sp, #4
 23e3baa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23e3bae:	bf0c      	ite	eq
 23e3bb0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23e3bb4:	ea91 0f03 	teqne	r1, r3
 23e3bb8:	bf02      	ittt	eq
 23e3bba:	ea90 0f02 	teqeq	r0, r2
 23e3bbe:	2000      	moveq	r0, #0
 23e3bc0:	4770      	bxeq	lr
 23e3bc2:	f110 0f00 	cmn.w	r0, #0
 23e3bc6:	ea91 0f03 	teq	r1, r3
 23e3bca:	bf58      	it	pl
 23e3bcc:	4299      	cmppl	r1, r3
 23e3bce:	bf08      	it	eq
 23e3bd0:	4290      	cmpeq	r0, r2
 23e3bd2:	bf2c      	ite	cs
 23e3bd4:	17d8      	asrcs	r0, r3, #31
 23e3bd6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23e3bda:	f040 0001 	orr.w	r0, r0, #1
 23e3bde:	4770      	bx	lr
 23e3be0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23e3be4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e3be8:	d102      	bne.n	23e3bf0 <__cmpdf2+0x64>
 23e3bea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23e3bee:	d107      	bne.n	23e3c00 <__cmpdf2+0x74>
 23e3bf0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23e3bf4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e3bf8:	d1d6      	bne.n	23e3ba8 <__cmpdf2+0x1c>
 23e3bfa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23e3bfe:	d0d3      	beq.n	23e3ba8 <__cmpdf2+0x1c>
 23e3c00:	f85d 0b04 	ldr.w	r0, [sp], #4
 23e3c04:	4770      	bx	lr
 23e3c06:	bf00      	nop

023e3c08 <__aeabi_cdrcmple>:
 23e3c08:	4684      	mov	ip, r0
 23e3c0a:	4610      	mov	r0, r2
 23e3c0c:	4662      	mov	r2, ip
 23e3c0e:	468c      	mov	ip, r1
 23e3c10:	4619      	mov	r1, r3
 23e3c12:	4663      	mov	r3, ip
 23e3c14:	e000      	b.n	23e3c18 <__aeabi_cdcmpeq>
 23e3c16:	bf00      	nop

023e3c18 <__aeabi_cdcmpeq>:
 23e3c18:	b501      	push	{r0, lr}
 23e3c1a:	f7ff ffb7 	bl	23e3b8c <__cmpdf2>
 23e3c1e:	2800      	cmp	r0, #0
 23e3c20:	bf48      	it	mi
 23e3c22:	f110 0f00 	cmnmi.w	r0, #0
 23e3c26:	bd01      	pop	{r0, pc}

023e3c28 <__aeabi_dcmpeq>:
 23e3c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e3c2c:	f7ff fff4 	bl	23e3c18 <__aeabi_cdcmpeq>
 23e3c30:	bf0c      	ite	eq
 23e3c32:	2001      	moveq	r0, #1
 23e3c34:	2000      	movne	r0, #0
 23e3c36:	f85d fb08 	ldr.w	pc, [sp], #8
 23e3c3a:	bf00      	nop

023e3c3c <__aeabi_dcmplt>:
 23e3c3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e3c40:	f7ff ffea 	bl	23e3c18 <__aeabi_cdcmpeq>
 23e3c44:	bf34      	ite	cc
 23e3c46:	2001      	movcc	r0, #1
 23e3c48:	2000      	movcs	r0, #0
 23e3c4a:	f85d fb08 	ldr.w	pc, [sp], #8
 23e3c4e:	bf00      	nop

023e3c50 <__aeabi_dcmple>:
 23e3c50:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e3c54:	f7ff ffe0 	bl	23e3c18 <__aeabi_cdcmpeq>
 23e3c58:	bf94      	ite	ls
 23e3c5a:	2001      	movls	r0, #1
 23e3c5c:	2000      	movhi	r0, #0
 23e3c5e:	f85d fb08 	ldr.w	pc, [sp], #8
 23e3c62:	bf00      	nop

023e3c64 <__aeabi_dcmpge>:
 23e3c64:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e3c68:	f7ff ffce 	bl	23e3c08 <__aeabi_cdrcmple>
 23e3c6c:	bf94      	ite	ls
 23e3c6e:	2001      	movls	r0, #1
 23e3c70:	2000      	movhi	r0, #0
 23e3c72:	f85d fb08 	ldr.w	pc, [sp], #8
 23e3c76:	bf00      	nop

023e3c78 <__aeabi_dcmpgt>:
 23e3c78:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e3c7c:	f7ff ffc4 	bl	23e3c08 <__aeabi_cdrcmple>
 23e3c80:	bf34      	ite	cc
 23e3c82:	2001      	movcc	r0, #1
 23e3c84:	2000      	movcs	r0, #0
 23e3c86:	f85d fb08 	ldr.w	pc, [sp], #8
 23e3c8a:	bf00      	nop

023e3c8c <__aeabi_dcmpun>:
 23e3c8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23e3c90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e3c94:	d102      	bne.n	23e3c9c <__aeabi_dcmpun+0x10>
 23e3c96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23e3c9a:	d10a      	bne.n	23e3cb2 <__aeabi_dcmpun+0x26>
 23e3c9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23e3ca0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e3ca4:	d102      	bne.n	23e3cac <__aeabi_dcmpun+0x20>
 23e3ca6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23e3caa:	d102      	bne.n	23e3cb2 <__aeabi_dcmpun+0x26>
 23e3cac:	f04f 0000 	mov.w	r0, #0
 23e3cb0:	4770      	bx	lr
 23e3cb2:	f04f 0001 	mov.w	r0, #1
 23e3cb6:	4770      	bx	lr

023e3cb8 <__aeabi_d2iz>:
 23e3cb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23e3cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23e3cc0:	d215      	bcs.n	23e3cee <__aeabi_d2iz+0x36>
 23e3cc2:	d511      	bpl.n	23e3ce8 <__aeabi_d2iz+0x30>
 23e3cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23e3cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23e3ccc:	d912      	bls.n	23e3cf4 <__aeabi_d2iz+0x3c>
 23e3cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23e3cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23e3cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23e3cda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23e3cde:	fa23 f002 	lsr.w	r0, r3, r2
 23e3ce2:	bf18      	it	ne
 23e3ce4:	4240      	negne	r0, r0
 23e3ce6:	4770      	bx	lr
 23e3ce8:	f04f 0000 	mov.w	r0, #0
 23e3cec:	4770      	bx	lr
 23e3cee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23e3cf2:	d105      	bne.n	23e3d00 <__aeabi_d2iz+0x48>
 23e3cf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 23e3cf8:	bf08      	it	eq
 23e3cfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 23e3cfe:	4770      	bx	lr
 23e3d00:	f04f 0000 	mov.w	r0, #0
 23e3d04:	4770      	bx	lr
 23e3d06:	bf00      	nop

023e3d08 <__aeabi_d2uiz>:
 23e3d08:	004a      	lsls	r2, r1, #1
 23e3d0a:	d211      	bcs.n	23e3d30 <__aeabi_d2uiz+0x28>
 23e3d0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23e3d10:	d211      	bcs.n	23e3d36 <__aeabi_d2uiz+0x2e>
 23e3d12:	d50d      	bpl.n	23e3d30 <__aeabi_d2uiz+0x28>
 23e3d14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23e3d18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23e3d1c:	d40e      	bmi.n	23e3d3c <__aeabi_d2uiz+0x34>
 23e3d1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23e3d22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23e3d26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23e3d2a:	fa23 f002 	lsr.w	r0, r3, r2
 23e3d2e:	4770      	bx	lr
 23e3d30:	f04f 0000 	mov.w	r0, #0
 23e3d34:	4770      	bx	lr
 23e3d36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23e3d3a:	d102      	bne.n	23e3d42 <__aeabi_d2uiz+0x3a>
 23e3d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e3d40:	4770      	bx	lr
 23e3d42:	f04f 0000 	mov.w	r0, #0
 23e3d46:	4770      	bx	lr

023e3d48 <__aeabi_d2f>:
 23e3d48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23e3d4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23e3d50:	bf24      	itt	cs
 23e3d52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23e3d56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23e3d5a:	d90d      	bls.n	23e3d78 <__aeabi_d2f+0x30>
 23e3d5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23e3d60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23e3d64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23e3d68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23e3d6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23e3d70:	bf08      	it	eq
 23e3d72:	f020 0001 	biceq.w	r0, r0, #1
 23e3d76:	4770      	bx	lr
 23e3d78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23e3d7c:	d121      	bne.n	23e3dc2 <__aeabi_d2f+0x7a>
 23e3d7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23e3d82:	bfbc      	itt	lt
 23e3d84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23e3d88:	4770      	bxlt	lr
 23e3d8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23e3d8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23e3d92:	f1c2 0218 	rsb	r2, r2, #24
 23e3d96:	f1c2 0c20 	rsb	ip, r2, #32
 23e3d9a:	fa10 f30c 	lsls.w	r3, r0, ip
 23e3d9e:	fa20 f002 	lsr.w	r0, r0, r2
 23e3da2:	bf18      	it	ne
 23e3da4:	f040 0001 	orrne.w	r0, r0, #1
 23e3da8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23e3dac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23e3db0:	fa03 fc0c 	lsl.w	ip, r3, ip
 23e3db4:	ea40 000c 	orr.w	r0, r0, ip
 23e3db8:	fa23 f302 	lsr.w	r3, r3, r2
 23e3dbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23e3dc0:	e7cc      	b.n	23e3d5c <__aeabi_d2f+0x14>
 23e3dc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23e3dc6:	d107      	bne.n	23e3dd8 <__aeabi_d2f+0x90>
 23e3dc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23e3dcc:	bf1e      	ittt	ne
 23e3dce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23e3dd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23e3dd6:	4770      	bxne	lr
 23e3dd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23e3ddc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23e3de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23e3de4:	4770      	bx	lr
 23e3de6:	bf00      	nop

023e3de8 <__aeabi_frsub>:
 23e3de8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 23e3dec:	e002      	b.n	23e3df4 <__addsf3>
 23e3dee:	bf00      	nop

023e3df0 <__aeabi_fsub>:
 23e3df0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

023e3df4 <__addsf3>:
 23e3df4:	0042      	lsls	r2, r0, #1
 23e3df6:	bf1f      	itttt	ne
 23e3df8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 23e3dfc:	ea92 0f03 	teqne	r2, r3
 23e3e00:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 23e3e04:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 23e3e08:	d06a      	beq.n	23e3ee0 <__addsf3+0xec>
 23e3e0a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 23e3e0e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 23e3e12:	bfc1      	itttt	gt
 23e3e14:	18d2      	addgt	r2, r2, r3
 23e3e16:	4041      	eorgt	r1, r0
 23e3e18:	4048      	eorgt	r0, r1
 23e3e1a:	4041      	eorgt	r1, r0
 23e3e1c:	bfb8      	it	lt
 23e3e1e:	425b      	neglt	r3, r3
 23e3e20:	2b19      	cmp	r3, #25
 23e3e22:	bf88      	it	hi
 23e3e24:	4770      	bxhi	lr
 23e3e26:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 23e3e2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23e3e2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 23e3e32:	bf18      	it	ne
 23e3e34:	4240      	negne	r0, r0
 23e3e36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23e3e3a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 23e3e3e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 23e3e42:	bf18      	it	ne
 23e3e44:	4249      	negne	r1, r1
 23e3e46:	ea92 0f03 	teq	r2, r3
 23e3e4a:	d03f      	beq.n	23e3ecc <__addsf3+0xd8>
 23e3e4c:	f1a2 0201 	sub.w	r2, r2, #1
 23e3e50:	fa41 fc03 	asr.w	ip, r1, r3
 23e3e54:	eb10 000c 	adds.w	r0, r0, ip
 23e3e58:	f1c3 0320 	rsb	r3, r3, #32
 23e3e5c:	fa01 f103 	lsl.w	r1, r1, r3
 23e3e60:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 23e3e64:	d502      	bpl.n	23e3e6c <__addsf3+0x78>
 23e3e66:	4249      	negs	r1, r1
 23e3e68:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 23e3e6c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 23e3e70:	d313      	bcc.n	23e3e9a <__addsf3+0xa6>
 23e3e72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 23e3e76:	d306      	bcc.n	23e3e86 <__addsf3+0x92>
 23e3e78:	0840      	lsrs	r0, r0, #1
 23e3e7a:	ea4f 0131 	mov.w	r1, r1, rrx
 23e3e7e:	f102 0201 	add.w	r2, r2, #1
 23e3e82:	2afe      	cmp	r2, #254	; 0xfe
 23e3e84:	d251      	bcs.n	23e3f2a <__addsf3+0x136>
 23e3e86:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 23e3e8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 23e3e8e:	bf08      	it	eq
 23e3e90:	f020 0001 	biceq.w	r0, r0, #1
 23e3e94:	ea40 0003 	orr.w	r0, r0, r3
 23e3e98:	4770      	bx	lr
 23e3e9a:	0049      	lsls	r1, r1, #1
 23e3e9c:	eb40 0000 	adc.w	r0, r0, r0
 23e3ea0:	3a01      	subs	r2, #1
 23e3ea2:	bf28      	it	cs
 23e3ea4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 23e3ea8:	d2ed      	bcs.n	23e3e86 <__addsf3+0x92>
 23e3eaa:	fab0 fc80 	clz	ip, r0
 23e3eae:	f1ac 0c08 	sub.w	ip, ip, #8
 23e3eb2:	ebb2 020c 	subs.w	r2, r2, ip
 23e3eb6:	fa00 f00c 	lsl.w	r0, r0, ip
 23e3eba:	bfaa      	itet	ge
 23e3ebc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 23e3ec0:	4252      	neglt	r2, r2
 23e3ec2:	4318      	orrge	r0, r3
 23e3ec4:	bfbc      	itt	lt
 23e3ec6:	40d0      	lsrlt	r0, r2
 23e3ec8:	4318      	orrlt	r0, r3
 23e3eca:	4770      	bx	lr
 23e3ecc:	f092 0f00 	teq	r2, #0
 23e3ed0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 23e3ed4:	bf06      	itte	eq
 23e3ed6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 23e3eda:	3201      	addeq	r2, #1
 23e3edc:	3b01      	subne	r3, #1
 23e3ede:	e7b5      	b.n	23e3e4c <__addsf3+0x58>
 23e3ee0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 23e3ee4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 23e3ee8:	bf18      	it	ne
 23e3eea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 23e3eee:	d021      	beq.n	23e3f34 <__addsf3+0x140>
 23e3ef0:	ea92 0f03 	teq	r2, r3
 23e3ef4:	d004      	beq.n	23e3f00 <__addsf3+0x10c>
 23e3ef6:	f092 0f00 	teq	r2, #0
 23e3efa:	bf08      	it	eq
 23e3efc:	4608      	moveq	r0, r1
 23e3efe:	4770      	bx	lr
 23e3f00:	ea90 0f01 	teq	r0, r1
 23e3f04:	bf1c      	itt	ne
 23e3f06:	2000      	movne	r0, #0
 23e3f08:	4770      	bxne	lr
 23e3f0a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 23e3f0e:	d104      	bne.n	23e3f1a <__addsf3+0x126>
 23e3f10:	0040      	lsls	r0, r0, #1
 23e3f12:	bf28      	it	cs
 23e3f14:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 23e3f18:	4770      	bx	lr
 23e3f1a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 23e3f1e:	bf3c      	itt	cc
 23e3f20:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 23e3f24:	4770      	bxcc	lr
 23e3f26:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 23e3f2a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 23e3f2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23e3f32:	4770      	bx	lr
 23e3f34:	ea7f 6222 	mvns.w	r2, r2, asr #24
 23e3f38:	bf16      	itet	ne
 23e3f3a:	4608      	movne	r0, r1
 23e3f3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 23e3f40:	4601      	movne	r1, r0
 23e3f42:	0242      	lsls	r2, r0, #9
 23e3f44:	bf06      	itte	eq
 23e3f46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 23e3f4a:	ea90 0f01 	teqeq	r0, r1
 23e3f4e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 23e3f52:	4770      	bx	lr

023e3f54 <__aeabi_ui2f>:
 23e3f54:	f04f 0300 	mov.w	r3, #0
 23e3f58:	e004      	b.n	23e3f64 <__aeabi_i2f+0x8>
 23e3f5a:	bf00      	nop

023e3f5c <__aeabi_i2f>:
 23e3f5c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 23e3f60:	bf48      	it	mi
 23e3f62:	4240      	negmi	r0, r0
 23e3f64:	ea5f 0c00 	movs.w	ip, r0
 23e3f68:	bf08      	it	eq
 23e3f6a:	4770      	bxeq	lr
 23e3f6c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 23e3f70:	4601      	mov	r1, r0
 23e3f72:	f04f 0000 	mov.w	r0, #0
 23e3f76:	e01c      	b.n	23e3fb2 <__aeabi_l2f+0x2a>

023e3f78 <__aeabi_ul2f>:
 23e3f78:	ea50 0201 	orrs.w	r2, r0, r1
 23e3f7c:	bf08      	it	eq
 23e3f7e:	4770      	bxeq	lr
 23e3f80:	f04f 0300 	mov.w	r3, #0
 23e3f84:	e00a      	b.n	23e3f9c <__aeabi_l2f+0x14>
 23e3f86:	bf00      	nop

023e3f88 <__aeabi_l2f>:
 23e3f88:	ea50 0201 	orrs.w	r2, r0, r1
 23e3f8c:	bf08      	it	eq
 23e3f8e:	4770      	bxeq	lr
 23e3f90:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 23e3f94:	d502      	bpl.n	23e3f9c <__aeabi_l2f+0x14>
 23e3f96:	4240      	negs	r0, r0
 23e3f98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e3f9c:	ea5f 0c01 	movs.w	ip, r1
 23e3fa0:	bf02      	ittt	eq
 23e3fa2:	4684      	moveq	ip, r0
 23e3fa4:	4601      	moveq	r1, r0
 23e3fa6:	2000      	moveq	r0, #0
 23e3fa8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 23e3fac:	bf08      	it	eq
 23e3fae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 23e3fb2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 23e3fb6:	fabc f28c 	clz	r2, ip
 23e3fba:	3a08      	subs	r2, #8
 23e3fbc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 23e3fc0:	db10      	blt.n	23e3fe4 <__aeabi_l2f+0x5c>
 23e3fc2:	fa01 fc02 	lsl.w	ip, r1, r2
 23e3fc6:	4463      	add	r3, ip
 23e3fc8:	fa00 fc02 	lsl.w	ip, r0, r2
 23e3fcc:	f1c2 0220 	rsb	r2, r2, #32
 23e3fd0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23e3fd4:	fa20 f202 	lsr.w	r2, r0, r2
 23e3fd8:	eb43 0002 	adc.w	r0, r3, r2
 23e3fdc:	bf08      	it	eq
 23e3fde:	f020 0001 	biceq.w	r0, r0, #1
 23e3fe2:	4770      	bx	lr
 23e3fe4:	f102 0220 	add.w	r2, r2, #32
 23e3fe8:	fa01 fc02 	lsl.w	ip, r1, r2
 23e3fec:	f1c2 0220 	rsb	r2, r2, #32
 23e3ff0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 23e3ff4:	fa21 f202 	lsr.w	r2, r1, r2
 23e3ff8:	eb43 0002 	adc.w	r0, r3, r2
 23e3ffc:	bf08      	it	eq
 23e3ffe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 23e4002:	4770      	bx	lr

023e4004 <__aeabi_ldivmod>:
 23e4004:	b97b      	cbnz	r3, 23e4026 <__aeabi_ldivmod+0x22>
 23e4006:	b972      	cbnz	r2, 23e4026 <__aeabi_ldivmod+0x22>
 23e4008:	2900      	cmp	r1, #0
 23e400a:	bfbe      	ittt	lt
 23e400c:	2000      	movlt	r0, #0
 23e400e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 23e4012:	e006      	blt.n	23e4022 <__aeabi_ldivmod+0x1e>
 23e4014:	bf08      	it	eq
 23e4016:	2800      	cmpeq	r0, #0
 23e4018:	bf1c      	itt	ne
 23e401a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 23e401e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23e4022:	f000 b9cd 	b.w	23e43c0 <__aeabi_idiv0>
 23e4026:	f1ad 0c08 	sub.w	ip, sp, #8
 23e402a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 23e402e:	2900      	cmp	r1, #0
 23e4030:	db09      	blt.n	23e4046 <__aeabi_ldivmod+0x42>
 23e4032:	2b00      	cmp	r3, #0
 23e4034:	db1a      	blt.n	23e406c <__aeabi_ldivmod+0x68>
 23e4036:	f000 f84d 	bl	23e40d4 <__udivmoddi4>
 23e403a:	f8dd e004 	ldr.w	lr, [sp, #4]
 23e403e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23e4042:	b004      	add	sp, #16
 23e4044:	4770      	bx	lr
 23e4046:	4240      	negs	r0, r0
 23e4048:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e404c:	2b00      	cmp	r3, #0
 23e404e:	db1b      	blt.n	23e4088 <__aeabi_ldivmod+0x84>
 23e4050:	f000 f840 	bl	23e40d4 <__udivmoddi4>
 23e4054:	f8dd e004 	ldr.w	lr, [sp, #4]
 23e4058:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23e405c:	b004      	add	sp, #16
 23e405e:	4240      	negs	r0, r0
 23e4060:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e4064:	4252      	negs	r2, r2
 23e4066:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e406a:	4770      	bx	lr
 23e406c:	4252      	negs	r2, r2
 23e406e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e4072:	f000 f82f 	bl	23e40d4 <__udivmoddi4>
 23e4076:	f8dd e004 	ldr.w	lr, [sp, #4]
 23e407a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23e407e:	b004      	add	sp, #16
 23e4080:	4240      	negs	r0, r0
 23e4082:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e4086:	4770      	bx	lr
 23e4088:	4252      	negs	r2, r2
 23e408a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e408e:	f000 f821 	bl	23e40d4 <__udivmoddi4>
 23e4092:	f8dd e004 	ldr.w	lr, [sp, #4]
 23e4096:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23e409a:	b004      	add	sp, #16
 23e409c:	4252      	negs	r2, r2
 23e409e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e40a2:	4770      	bx	lr

023e40a4 <__aeabi_uldivmod>:
 23e40a4:	b953      	cbnz	r3, 23e40bc <__aeabi_uldivmod+0x18>
 23e40a6:	b94a      	cbnz	r2, 23e40bc <__aeabi_uldivmod+0x18>
 23e40a8:	2900      	cmp	r1, #0
 23e40aa:	bf08      	it	eq
 23e40ac:	2800      	cmpeq	r0, #0
 23e40ae:	bf1c      	itt	ne
 23e40b0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 23e40b4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23e40b8:	f000 b982 	b.w	23e43c0 <__aeabi_idiv0>
 23e40bc:	f1ad 0c08 	sub.w	ip, sp, #8
 23e40c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 23e40c4:	f000 f806 	bl	23e40d4 <__udivmoddi4>
 23e40c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 23e40cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23e40d0:	b004      	add	sp, #16
 23e40d2:	4770      	bx	lr

023e40d4 <__udivmoddi4>:
 23e40d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23e40d8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 23e40da:	4604      	mov	r4, r0
 23e40dc:	460f      	mov	r7, r1
 23e40de:	2b00      	cmp	r3, #0
 23e40e0:	d148      	bne.n	23e4174 <__udivmoddi4+0xa0>
 23e40e2:	428a      	cmp	r2, r1
 23e40e4:	4694      	mov	ip, r2
 23e40e6:	d961      	bls.n	23e41ac <__udivmoddi4+0xd8>
 23e40e8:	fab2 f382 	clz	r3, r2
 23e40ec:	b143      	cbz	r3, 23e4100 <__udivmoddi4+0x2c>
 23e40ee:	f1c3 0120 	rsb	r1, r3, #32
 23e40f2:	409f      	lsls	r7, r3
 23e40f4:	fa02 fc03 	lsl.w	ip, r2, r3
 23e40f8:	409c      	lsls	r4, r3
 23e40fa:	fa20 f101 	lsr.w	r1, r0, r1
 23e40fe:	430f      	orrs	r7, r1
 23e4100:	ea4f 411c 	mov.w	r1, ip, lsr #16
 23e4104:	fa1f fe8c 	uxth.w	lr, ip
 23e4108:	0c22      	lsrs	r2, r4, #16
 23e410a:	fbb7 f6f1 	udiv	r6, r7, r1
 23e410e:	fb01 7716 	mls	r7, r1, r6, r7
 23e4112:	fb06 f00e 	mul.w	r0, r6, lr
 23e4116:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 23e411a:	4290      	cmp	r0, r2
 23e411c:	d908      	bls.n	23e4130 <__udivmoddi4+0x5c>
 23e411e:	eb1c 0202 	adds.w	r2, ip, r2
 23e4122:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 23e4126:	d202      	bcs.n	23e412e <__udivmoddi4+0x5a>
 23e4128:	4290      	cmp	r0, r2
 23e412a:	f200 8137 	bhi.w	23e439c <__udivmoddi4+0x2c8>
 23e412e:	463e      	mov	r6, r7
 23e4130:	1a12      	subs	r2, r2, r0
 23e4132:	b2a4      	uxth	r4, r4
 23e4134:	fbb2 f0f1 	udiv	r0, r2, r1
 23e4138:	fb01 2210 	mls	r2, r1, r0, r2
 23e413c:	fb00 fe0e 	mul.w	lr, r0, lr
 23e4140:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 23e4144:	45a6      	cmp	lr, r4
 23e4146:	d908      	bls.n	23e415a <__udivmoddi4+0x86>
 23e4148:	eb1c 0404 	adds.w	r4, ip, r4
 23e414c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 23e4150:	d202      	bcs.n	23e4158 <__udivmoddi4+0x84>
 23e4152:	45a6      	cmp	lr, r4
 23e4154:	f200 811c 	bhi.w	23e4390 <__udivmoddi4+0x2bc>
 23e4158:	4610      	mov	r0, r2
 23e415a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 23e415e:	eba4 040e 	sub.w	r4, r4, lr
 23e4162:	2600      	movs	r6, #0
 23e4164:	b11d      	cbz	r5, 23e416e <__udivmoddi4+0x9a>
 23e4166:	40dc      	lsrs	r4, r3
 23e4168:	2300      	movs	r3, #0
 23e416a:	e9c5 4300 	strd	r4, r3, [r5]
 23e416e:	4631      	mov	r1, r6
 23e4170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23e4174:	428b      	cmp	r3, r1
 23e4176:	d909      	bls.n	23e418c <__udivmoddi4+0xb8>
 23e4178:	2d00      	cmp	r5, #0
 23e417a:	f000 80fd 	beq.w	23e4378 <__udivmoddi4+0x2a4>
 23e417e:	2600      	movs	r6, #0
 23e4180:	e9c5 0100 	strd	r0, r1, [r5]
 23e4184:	4630      	mov	r0, r6
 23e4186:	4631      	mov	r1, r6
 23e4188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23e418c:	fab3 f683 	clz	r6, r3
 23e4190:	2e00      	cmp	r6, #0
 23e4192:	d14b      	bne.n	23e422c <__udivmoddi4+0x158>
 23e4194:	428b      	cmp	r3, r1
 23e4196:	f0c0 80f2 	bcc.w	23e437e <__udivmoddi4+0x2aa>
 23e419a:	4282      	cmp	r2, r0
 23e419c:	f240 80ef 	bls.w	23e437e <__udivmoddi4+0x2aa>
 23e41a0:	4630      	mov	r0, r6
 23e41a2:	2d00      	cmp	r5, #0
 23e41a4:	d0e3      	beq.n	23e416e <__udivmoddi4+0x9a>
 23e41a6:	e9c5 4700 	strd	r4, r7, [r5]
 23e41aa:	e7e0      	b.n	23e416e <__udivmoddi4+0x9a>
 23e41ac:	b902      	cbnz	r2, 23e41b0 <__udivmoddi4+0xdc>
 23e41ae:	deff      	udf	#255	; 0xff
 23e41b0:	fab2 f382 	clz	r3, r2
 23e41b4:	2b00      	cmp	r3, #0
 23e41b6:	f040 809d 	bne.w	23e42f4 <__udivmoddi4+0x220>
 23e41ba:	1a89      	subs	r1, r1, r2
 23e41bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 23e41c0:	b297      	uxth	r7, r2
 23e41c2:	2601      	movs	r6, #1
 23e41c4:	0c20      	lsrs	r0, r4, #16
 23e41c6:	fbb1 f2fe 	udiv	r2, r1, lr
 23e41ca:	fb0e 1112 	mls	r1, lr, r2, r1
 23e41ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23e41d2:	fb07 f002 	mul.w	r0, r7, r2
 23e41d6:	4288      	cmp	r0, r1
 23e41d8:	d90f      	bls.n	23e41fa <__udivmoddi4+0x126>
 23e41da:	eb1c 0101 	adds.w	r1, ip, r1
 23e41de:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 23e41e2:	bf2c      	ite	cs
 23e41e4:	f04f 0901 	movcs.w	r9, #1
 23e41e8:	f04f 0900 	movcc.w	r9, #0
 23e41ec:	4288      	cmp	r0, r1
 23e41ee:	d903      	bls.n	23e41f8 <__udivmoddi4+0x124>
 23e41f0:	f1b9 0f00 	cmp.w	r9, #0
 23e41f4:	f000 80cf 	beq.w	23e4396 <__udivmoddi4+0x2c2>
 23e41f8:	4642      	mov	r2, r8
 23e41fa:	1a09      	subs	r1, r1, r0
 23e41fc:	b2a4      	uxth	r4, r4
 23e41fe:	fbb1 f0fe 	udiv	r0, r1, lr
 23e4202:	fb0e 1110 	mls	r1, lr, r0, r1
 23e4206:	fb00 f707 	mul.w	r7, r0, r7
 23e420a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 23e420e:	42a7      	cmp	r7, r4
 23e4210:	d908      	bls.n	23e4224 <__udivmoddi4+0x150>
 23e4212:	eb1c 0404 	adds.w	r4, ip, r4
 23e4216:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 23e421a:	d202      	bcs.n	23e4222 <__udivmoddi4+0x14e>
 23e421c:	42a7      	cmp	r7, r4
 23e421e:	f200 80b4 	bhi.w	23e438a <__udivmoddi4+0x2b6>
 23e4222:	4608      	mov	r0, r1
 23e4224:	1be4      	subs	r4, r4, r7
 23e4226:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 23e422a:	e79b      	b.n	23e4164 <__udivmoddi4+0x90>
 23e422c:	f1c6 0720 	rsb	r7, r6, #32
 23e4230:	40b3      	lsls	r3, r6
 23e4232:	fa01 f406 	lsl.w	r4, r1, r6
 23e4236:	fa22 fc07 	lsr.w	ip, r2, r7
 23e423a:	40f9      	lsrs	r1, r7
 23e423c:	40b2      	lsls	r2, r6
 23e423e:	ea4c 0c03 	orr.w	ip, ip, r3
 23e4242:	fa20 f307 	lsr.w	r3, r0, r7
 23e4246:	ea4f 491c 	mov.w	r9, ip, lsr #16
 23e424a:	431c      	orrs	r4, r3
 23e424c:	fa1f fe8c 	uxth.w	lr, ip
 23e4250:	fa00 f306 	lsl.w	r3, r0, r6
 23e4254:	0c20      	lsrs	r0, r4, #16
 23e4256:	fbb1 f8f9 	udiv	r8, r1, r9
 23e425a:	fb09 1118 	mls	r1, r9, r8, r1
 23e425e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23e4262:	fb08 f00e 	mul.w	r0, r8, lr
 23e4266:	4288      	cmp	r0, r1
 23e4268:	d90f      	bls.n	23e428a <__udivmoddi4+0x1b6>
 23e426a:	eb1c 0101 	adds.w	r1, ip, r1
 23e426e:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 23e4272:	bf2c      	ite	cs
 23e4274:	f04f 0b01 	movcs.w	fp, #1
 23e4278:	f04f 0b00 	movcc.w	fp, #0
 23e427c:	4288      	cmp	r0, r1
 23e427e:	d903      	bls.n	23e4288 <__udivmoddi4+0x1b4>
 23e4280:	f1bb 0f00 	cmp.w	fp, #0
 23e4284:	f000 808d 	beq.w	23e43a2 <__udivmoddi4+0x2ce>
 23e4288:	46d0      	mov	r8, sl
 23e428a:	1a09      	subs	r1, r1, r0
 23e428c:	b2a4      	uxth	r4, r4
 23e428e:	fbb1 f0f9 	udiv	r0, r1, r9
 23e4292:	fb09 1110 	mls	r1, r9, r0, r1
 23e4296:	fb00 fe0e 	mul.w	lr, r0, lr
 23e429a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 23e429e:	458e      	cmp	lr, r1
 23e42a0:	d907      	bls.n	23e42b2 <__udivmoddi4+0x1de>
 23e42a2:	eb1c 0101 	adds.w	r1, ip, r1
 23e42a6:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 23e42aa:	d201      	bcs.n	23e42b0 <__udivmoddi4+0x1dc>
 23e42ac:	458e      	cmp	lr, r1
 23e42ae:	d87f      	bhi.n	23e43b0 <__udivmoddi4+0x2dc>
 23e42b0:	4620      	mov	r0, r4
 23e42b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 23e42b6:	eba1 010e 	sub.w	r1, r1, lr
 23e42ba:	fba0 9802 	umull	r9, r8, r0, r2
 23e42be:	4541      	cmp	r1, r8
 23e42c0:	464c      	mov	r4, r9
 23e42c2:	46c6      	mov	lr, r8
 23e42c4:	d302      	bcc.n	23e42cc <__udivmoddi4+0x1f8>
 23e42c6:	d106      	bne.n	23e42d6 <__udivmoddi4+0x202>
 23e42c8:	454b      	cmp	r3, r9
 23e42ca:	d204      	bcs.n	23e42d6 <__udivmoddi4+0x202>
 23e42cc:	3801      	subs	r0, #1
 23e42ce:	ebb9 0402 	subs.w	r4, r9, r2
 23e42d2:	eb68 0e0c 	sbc.w	lr, r8, ip
 23e42d6:	2d00      	cmp	r5, #0
 23e42d8:	d070      	beq.n	23e43bc <__udivmoddi4+0x2e8>
 23e42da:	1b1a      	subs	r2, r3, r4
 23e42dc:	eb61 010e 	sbc.w	r1, r1, lr
 23e42e0:	fa22 f306 	lsr.w	r3, r2, r6
 23e42e4:	fa01 f707 	lsl.w	r7, r1, r7
 23e42e8:	40f1      	lsrs	r1, r6
 23e42ea:	2600      	movs	r6, #0
 23e42ec:	431f      	orrs	r7, r3
 23e42ee:	e9c5 7100 	strd	r7, r1, [r5]
 23e42f2:	e73c      	b.n	23e416e <__udivmoddi4+0x9a>
 23e42f4:	fa02 fc03 	lsl.w	ip, r2, r3
 23e42f8:	f1c3 0020 	rsb	r0, r3, #32
 23e42fc:	fa01 f203 	lsl.w	r2, r1, r3
 23e4300:	fa21 f600 	lsr.w	r6, r1, r0
 23e4304:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 23e4308:	fa24 f100 	lsr.w	r1, r4, r0
 23e430c:	fa1f f78c 	uxth.w	r7, ip
 23e4310:	409c      	lsls	r4, r3
 23e4312:	4311      	orrs	r1, r2
 23e4314:	fbb6 f0fe 	udiv	r0, r6, lr
 23e4318:	0c0a      	lsrs	r2, r1, #16
 23e431a:	fb0e 6610 	mls	r6, lr, r0, r6
 23e431e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 23e4322:	fb00 f607 	mul.w	r6, r0, r7
 23e4326:	4296      	cmp	r6, r2
 23e4328:	d90e      	bls.n	23e4348 <__udivmoddi4+0x274>
 23e432a:	eb1c 0202 	adds.w	r2, ip, r2
 23e432e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 23e4332:	bf2c      	ite	cs
 23e4334:	f04f 0901 	movcs.w	r9, #1
 23e4338:	f04f 0900 	movcc.w	r9, #0
 23e433c:	4296      	cmp	r6, r2
 23e433e:	d902      	bls.n	23e4346 <__udivmoddi4+0x272>
 23e4340:	f1b9 0f00 	cmp.w	r9, #0
 23e4344:	d031      	beq.n	23e43aa <__udivmoddi4+0x2d6>
 23e4346:	4640      	mov	r0, r8
 23e4348:	1b92      	subs	r2, r2, r6
 23e434a:	b289      	uxth	r1, r1
 23e434c:	fbb2 f6fe 	udiv	r6, r2, lr
 23e4350:	fb0e 2216 	mls	r2, lr, r6, r2
 23e4354:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 23e4358:	fb06 f207 	mul.w	r2, r6, r7
 23e435c:	428a      	cmp	r2, r1
 23e435e:	d907      	bls.n	23e4370 <__udivmoddi4+0x29c>
 23e4360:	eb1c 0101 	adds.w	r1, ip, r1
 23e4364:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 23e4368:	d201      	bcs.n	23e436e <__udivmoddi4+0x29a>
 23e436a:	428a      	cmp	r2, r1
 23e436c:	d823      	bhi.n	23e43b6 <__udivmoddi4+0x2e2>
 23e436e:	4646      	mov	r6, r8
 23e4370:	1a89      	subs	r1, r1, r2
 23e4372:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 23e4376:	e725      	b.n	23e41c4 <__udivmoddi4+0xf0>
 23e4378:	462e      	mov	r6, r5
 23e437a:	4628      	mov	r0, r5
 23e437c:	e6f7      	b.n	23e416e <__udivmoddi4+0x9a>
 23e437e:	1a84      	subs	r4, r0, r2
 23e4380:	eb61 0303 	sbc.w	r3, r1, r3
 23e4384:	2001      	movs	r0, #1
 23e4386:	461f      	mov	r7, r3
 23e4388:	e70b      	b.n	23e41a2 <__udivmoddi4+0xce>
 23e438a:	4464      	add	r4, ip
 23e438c:	3802      	subs	r0, #2
 23e438e:	e749      	b.n	23e4224 <__udivmoddi4+0x150>
 23e4390:	4464      	add	r4, ip
 23e4392:	3802      	subs	r0, #2
 23e4394:	e6e1      	b.n	23e415a <__udivmoddi4+0x86>
 23e4396:	3a02      	subs	r2, #2
 23e4398:	4461      	add	r1, ip
 23e439a:	e72e      	b.n	23e41fa <__udivmoddi4+0x126>
 23e439c:	3e02      	subs	r6, #2
 23e439e:	4462      	add	r2, ip
 23e43a0:	e6c6      	b.n	23e4130 <__udivmoddi4+0x5c>
 23e43a2:	f1a8 0802 	sub.w	r8, r8, #2
 23e43a6:	4461      	add	r1, ip
 23e43a8:	e76f      	b.n	23e428a <__udivmoddi4+0x1b6>
 23e43aa:	3802      	subs	r0, #2
 23e43ac:	4462      	add	r2, ip
 23e43ae:	e7cb      	b.n	23e4348 <__udivmoddi4+0x274>
 23e43b0:	3802      	subs	r0, #2
 23e43b2:	4461      	add	r1, ip
 23e43b4:	e77d      	b.n	23e42b2 <__udivmoddi4+0x1de>
 23e43b6:	3e02      	subs	r6, #2
 23e43b8:	4461      	add	r1, ip
 23e43ba:	e7d9      	b.n	23e4370 <__udivmoddi4+0x29c>
 23e43bc:	462e      	mov	r6, r5
 23e43be:	e6d6      	b.n	23e416e <__udivmoddi4+0x9a>

023e43c0 <__aeabi_idiv0>:
 23e43c0:	4770      	bx	lr
 23e43c2:	bf00      	nop

023e43c4 <strcmp>:
 23e43c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 23e43c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 23e43cc:	2a01      	cmp	r2, #1
 23e43ce:	bf28      	it	cs
 23e43d0:	429a      	cmpcs	r2, r3
 23e43d2:	d0f7      	beq.n	23e43c4 <strcmp>
 23e43d4:	1ad0      	subs	r0, r2, r3
 23e43d6:	4770      	bx	lr

023e43d8 <strlen>:
 23e43d8:	4603      	mov	r3, r0
 23e43da:	f813 2b01 	ldrb.w	r2, [r3], #1
 23e43de:	2a00      	cmp	r2, #0
 23e43e0:	d1fb      	bne.n	23e43da <strlen+0x2>
 23e43e2:	1a18      	subs	r0, r3, r0
 23e43e4:	3801      	subs	r0, #1
 23e43e6:	4770      	bx	lr

023e43e8 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23e43e8:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23e43ea:	f015 fa8d 	bl	23f9908 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23e43ee:	2500      	movs	r5, #0
 23e43f0:	4e05      	ldr	r6, [pc, #20]	; (23e4408 <module_user_init+0x20>)
 23e43f2:	4c06      	ldr	r4, [pc, #24]	; (23e440c <module_user_init+0x24>)
 23e43f4:	1ba4      	subs	r4, r4, r6
 23e43f6:	08a4      	lsrs	r4, r4, #2
 23e43f8:	42ac      	cmp	r4, r5
 23e43fa:	d100      	bne.n	23e43fe <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23e43fc:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23e43fe:	f856 3b04 	ldr.w	r3, [r6], #4
 23e4402:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23e4404:	3501      	adds	r5, #1
 23e4406:	e7f7      	b.n	23e43f8 <module_user_init+0x10>
 23e4408:	023fffbc 	.word	0x023fffbc
 23e440c:	023ffff4 	.word	0x023ffff4

023e4410 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23e4410:	f009 b88c 	b.w	23ed52c <setup>

023e4414 <module_user_loop>:
}

void module_user_loop() {
 23e4414:	b508      	push	{r3, lr}
    loop();
 23e4416:	f009 fa6f 	bl	23ed8f8 <loop>
    _post_loop();
}
 23e441a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23e441e:	f015 ba2b 	b.w	23f9878 <_post_loop>

023e4422 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23e4422:	f012 bff7 	b.w	23f7414 <malloc>

023e4426 <_Znaj>:
 23e4426:	f012 bff5 	b.w	23f7414 <malloc>

023e442a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23e442a:	f013 b801 	b.w	23f7430 <free>
	...

023e4430 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23e4430:	4674      	mov	r4, lr
void __cxa_pure_virtual() {
 23e4432:	b500      	push	{lr}
 23e4434:	b08d      	sub	sp, #52	; 0x34
  PANIC(PureVirtualCall,"Call on pure virtual");
 23e4436:	222c      	movs	r2, #44	; 0x2c
 23e4438:	2100      	movs	r1, #0
 23e443a:	a801      	add	r0, sp, #4
 23e443c:	f018 f95f 	bl	23fc6fe <memset>
 23e4440:	4b05      	ldr	r3, [pc, #20]	; (23e4458 <__cxa_pure_virtual+0x28>)
 23e4442:	9404      	str	r4, [sp, #16]
 23e4444:	9301      	str	r3, [sp, #4]
 23e4446:	4b05      	ldr	r3, [pc, #20]	; (23e445c <__cxa_pure_virtual+0x2c>)
 23e4448:	9302      	str	r3, [sp, #8]
}

__attribute__((always_inline)) static inline uint32_t __get_PC(void) { 
    uint32_t result; 

    asm volatile ("mov %0, pc\n" : "=r" (result) ); 
 23e444a:	467b      	mov	r3, pc
 23e444c:	2100      	movs	r1, #0
 23e444e:	a801      	add	r0, sp, #4
 23e4450:	9303      	str	r3, [sp, #12]
 23e4452:	f012 fd77 	bl	23f6f44 <panic_ext>
  while (1);
 23e4456:	e7fe      	b.n	23e4456 <__cxa_pure_virtual+0x26>
 23e4458:	000c002c 	.word	0x000c002c
 23e445c:	023fcbd8 	.word	0x023fcbd8

023e4460 <__register_exitproc>:
int __cxa_atexit(void (*f)(void *), void *p, void *d) {
    return 0;
}

void __register_exitproc(int type, void (*fn)(void), void* arg, void* d) {
}
 23e4460:	4770      	bx	lr

023e4462 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 23e4462:	b158      	cbz	r0, 23e447c <null_ptr_check+0x1a>
 23e4464:	68c3      	ldr	r3, [r0, #12]
 23e4466:	b14b      	cbz	r3, 23e447c <null_ptr_check+0x1a>
 23e4468:	6903      	ldr	r3, [r0, #16]
 23e446a:	b13b      	cbz	r3, 23e447c <null_ptr_check+0x1a>
 23e446c:	6943      	ldr	r3, [r0, #20]
 23e446e:	b12b      	cbz	r3, 23e447c <null_ptr_check+0x1a>
 23e4470:	6840      	ldr	r0, [r0, #4]
 23e4472:	fab0 f080 	clz	r0, r0
 23e4476:	0940      	lsrs	r0, r0, #5
 23e4478:	4240      	negs	r0, r0
 23e447a:	4770      	bx	lr
        (dev->intf_ptr == NULL))
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 23e447c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        /* Device structure is fine */
        rslt = BMP3_OK;
    }

    return rslt;
}
 23e4480:	4770      	bx	lr

023e4482 <compensate_data>:
{
 23e4482:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23e4486:	4682      	mov	sl, r0
 23e4488:	ed2d 8b06 	vpush	{d8-d10}
 23e448c:	4688      	mov	r8, r1
 23e448e:	461c      	mov	r4, r3
    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 23e4490:	4615      	mov	r5, r2
 23e4492:	2a00      	cmp	r2, #0
 23e4494:	f000 80dd 	beq.w	23e4652 <compensate_data+0x1d0>
        if (sensor_comp & (BMP3_PRESS | BMP3_TEMP))
 23e4498:	f010 0f03 	tst.w	r0, #3
 23e449c:	d022      	beq.n	23e44e4 <compensate_data+0x62>
    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 23e449e:	6848      	ldr	r0, [r1, #4]
 23e44a0:	f7ff f8e0 	bl	23e3664 <__aeabi_ui2d>
 23e44a4:	e9d4 2300 	ldrd	r2, r3, [r4]
 23e44a8:	f7fe ff9e 	bl	23e33e8 <__aeabi_dsub>
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 23e44ac:	4602      	mov	r2, r0
 23e44ae:	460b      	mov	r3, r1
    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 23e44b0:	4606      	mov	r6, r0
 23e44b2:	460f      	mov	r7, r1
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 23e44b4:	f7ff f950 	bl	23e3758 <__aeabi_dmul>
 23e44b8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 23e44bc:	f7ff f94c 	bl	23e3758 <__aeabi_dmul>
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 23e44c0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 23e44c4:	ec41 0b18 	vmov	d8, r0, r1
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 23e44c8:	4630      	mov	r0, r6
 23e44ca:	4639      	mov	r1, r7
 23e44cc:	f7ff f944 	bl	23e3758 <__aeabi_dmul>
 23e44d0:	4602      	mov	r2, r0
 23e44d2:	460b      	mov	r3, r1
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 23e44d4:	ec51 0b18 	vmov	r0, r1, d8
 23e44d8:	f7fe ff88 	bl	23e33ec <__adddf3>
 23e44dc:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 23e44e0:	e9c5 0100 	strd	r0, r1, [r5]
        if (sensor_comp & BMP3_PRESS)
 23e44e4:	f01a 0001 	ands.w	r0, sl, #1
 23e44e8:	f000 80af 	beq.w	23e464a <compensate_data+0x1c8>
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 23e44ec:	e9d4 ab1c 	ldrd	sl, fp, [r4, #112]	; 0x70
        pow_output = (float) base * pow_output;
 23e44f0:	4659      	mov	r1, fp
 23e44f2:	4650      	mov	r0, sl
 23e44f4:	f7ff fc28 	bl	23e3d48 <__aeabi_d2f>
 23e44f8:	ee08 0a10 	vmov	s16, r0
 23e44fc:	ee68 8a08 	vmul.f32	s17, s16, s16
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e4500:	ee18 0a90 	vmov	r0, s17
 23e4504:	f7ff f8d0 	bl	23e36a8 <__aeabi_f2d>
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e4508:	ee68 7a28 	vmul.f32	s15, s16, s17
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e450c:	ec41 0b19 	vmov	d9, r0, r1
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e4510:	ee17 0a90 	vmov	r0, s15
 23e4514:	f7ff f8c8 	bl	23e36a8 <__aeabi_f2d>
 23e4518:	ec41 0b1a 	vmov	d10, r0, r1
    partial_out2 = uncomp_data->pressure *
 23e451c:	f8d8 0000 	ldr.w	r0, [r8]
 23e4520:	f7ff f8a0 	bl	23e3664 <__aeabi_ui2d>
 23e4524:	4689      	mov	r9, r1
 23e4526:	4680      	mov	r8, r0
        pow_output = (float) base * pow_output;
 23e4528:	f7ff fc0e 	bl	23e3d48 <__aeabi_d2f>
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 23e452c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
        pow_output = (float) base * pow_output;
 23e4530:	ee08 0a10 	vmov	s16, r0
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 23e4534:	4659      	mov	r1, fp
 23e4536:	4650      	mov	r0, sl
 23e4538:	f7ff f90e 	bl	23e3758 <__aeabi_dmul>
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 23e453c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 23e4540:	f7fe ff54 	bl	23e33ec <__adddf3>
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e4544:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 23e4548:	4606      	mov	r6, r0
 23e454a:	460f      	mov	r7, r1
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e454c:	ec51 0b19 	vmov	r0, r1, d9
 23e4550:	f7ff f902 	bl	23e3758 <__aeabi_dmul>
 23e4554:	4602      	mov	r2, r0
 23e4556:	460b      	mov	r3, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 23e4558:	4630      	mov	r0, r6
 23e455a:	4639      	mov	r1, r7
 23e455c:	f7fe ff46 	bl	23e33ec <__adddf3>
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e4560:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 23e4564:	4606      	mov	r6, r0
 23e4566:	460f      	mov	r7, r1
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e4568:	ec51 0b1a 	vmov	r0, r1, d10
 23e456c:	f7ff f8f4 	bl	23e3758 <__aeabi_dmul>
 23e4570:	4602      	mov	r2, r0
 23e4572:	460b      	mov	r3, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 23e4574:	4630      	mov	r0, r6
 23e4576:	4639      	mov	r1, r7
 23e4578:	f7fe ff38 	bl	23e33ec <__adddf3>
    partial_out2 = uncomp_data->pressure *
 23e457c:	4642      	mov	r2, r8
 23e457e:	464b      	mov	r3, r9
 23e4580:	f7ff f8ea 	bl	23e3758 <__aeabi_dmul>
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 23e4584:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
    partial_out2 = uncomp_data->pressure *
 23e4588:	4606      	mov	r6, r0
 23e458a:	460f      	mov	r7, r1
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 23e458c:	4650      	mov	r0, sl
 23e458e:	4659      	mov	r1, fp
 23e4590:	f7ff f8e2 	bl	23e3758 <__aeabi_dmul>
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 23e4594:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 23e4598:	f7fe ff28 	bl	23e33ec <__adddf3>
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e459c:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 23e45a0:	4680      	mov	r8, r0
 23e45a2:	4689      	mov	r9, r1
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 23e45a4:	ec51 0b19 	vmov	r0, r1, d9
 23e45a8:	f7ff f8d6 	bl	23e3758 <__aeabi_dmul>
 23e45ac:	4602      	mov	r2, r0
 23e45ae:	460b      	mov	r3, r1
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 23e45b0:	4640      	mov	r0, r8
 23e45b2:	4649      	mov	r1, r9
 23e45b4:	f7fe ff1a 	bl	23e33ec <__adddf3>
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e45b8:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 23e45bc:	4680      	mov	r8, r0
 23e45be:	4689      	mov	r9, r1
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 23e45c0:	ec51 0b1a 	vmov	r0, r1, d10
 23e45c4:	f7ff f8c8 	bl	23e3758 <__aeabi_dmul>
 23e45c8:	4602      	mov	r2, r0
 23e45ca:	460b      	mov	r3, r1
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 23e45cc:	4640      	mov	r0, r8
 23e45ce:	4649      	mov	r1, r9
 23e45d0:	f7fe ff0c 	bl	23e33ec <__adddf3>
 23e45d4:	4602      	mov	r2, r0
 23e45d6:	460b      	mov	r3, r1
    comp_press = partial_out1 + partial_out2 + partial_data4;
 23e45d8:	4630      	mov	r0, r6
 23e45da:	4639      	mov	r1, r7
 23e45dc:	f7fe ff06 	bl	23e33ec <__adddf3>
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 23e45e0:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    comp_press = partial_out1 + partial_out2 + partial_data4;
 23e45e4:	4606      	mov	r6, r0
 23e45e6:	460f      	mov	r7, r1
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 23e45e8:	4650      	mov	r0, sl
 23e45ea:	4659      	mov	r1, fp
 23e45ec:	f7ff f8b4 	bl	23e3758 <__aeabi_dmul>
 23e45f0:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
 23e45f4:	f7fe fefa 	bl	23e33ec <__adddf3>
        pow_output = (float) base * pow_output;
 23e45f8:	ee68 8a08 	vmul.f32	s17, s16, s16
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 23e45fc:	4680      	mov	r8, r0
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 23e45fe:	ee18 0a90 	vmov	r0, s17
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 23e4602:	4689      	mov	r9, r1
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 23e4604:	f7ff f850 	bl	23e36a8 <__aeabi_f2d>
 23e4608:	4602      	mov	r2, r0
 23e460a:	460b      	mov	r3, r1
    partial_data3 = partial_data1 * partial_data2;
 23e460c:	4640      	mov	r0, r8
 23e460e:	4649      	mov	r1, r9
 23e4610:	f7ff f8a2 	bl	23e3758 <__aeabi_dmul>
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 23e4614:	ee68 7a28 	vmul.f32	s15, s16, s17
    partial_data3 = partial_data1 * partial_data2;
 23e4618:	4680      	mov	r8, r0
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 23e461a:	ee17 0a90 	vmov	r0, s15
    partial_data3 = partial_data1 * partial_data2;
 23e461e:	4689      	mov	r9, r1
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 23e4620:	f7ff f842 	bl	23e36a8 <__aeabi_f2d>
 23e4624:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
 23e4628:	f7ff f896 	bl	23e3758 <__aeabi_dmul>
 23e462c:	4602      	mov	r2, r0
 23e462e:	460b      	mov	r3, r1
 23e4630:	4640      	mov	r0, r8
 23e4632:	4649      	mov	r1, r9
 23e4634:	f7fe feda 	bl	23e33ec <__adddf3>
 23e4638:	4602      	mov	r2, r0
 23e463a:	460b      	mov	r3, r1
    comp_press = partial_out1 + partial_out2 + partial_data4;
 23e463c:	4630      	mov	r0, r6
 23e463e:	4639      	mov	r1, r7
 23e4640:	f7fe fed4 	bl	23e33ec <__adddf3>
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 23e4644:	e9c5 0102 	strd	r0, r1, [r5, #8]
    int8_t rslt = BMP3_OK;
 23e4648:	2000      	movs	r0, #0
}
 23e464a:	ecbd 8b06 	vpop	{d8-d10}
 23e464e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rslt = BMP3_E_NULL_PTR;
 23e4652:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e4656:	e7f8      	b.n	23e464a <compensate_data+0x1c8>

023e4658 <validate_osr_and_odr_settings>:
{
 23e4658:	b510      	push	{r4, lr}
 23e465a:	4604      	mov	r4, r0
 23e465c:	b092      	sub	sp, #72	; 0x48
    uint32_t odr[18] = {
 23e465e:	2248      	movs	r2, #72	; 0x48
 23e4660:	4668      	mov	r0, sp
 23e4662:	4920      	ldr	r1, [pc, #128]	; (23e46e4 <validate_osr_and_odr_settings+0x8c>)
 23e4664:	f018 f83e 	bl	23fc6e4 <memcpy>
    if (dev->settings.press_en)
 23e4668:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 23e466c:	b173      	cbz	r3, 23e468c <validate_osr_and_odr_settings+0x34>
    float pow_output = 1;
 23e466e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 23e4672:	f894 30b3 	ldrb.w	r3, [r4, #179]	; 0xb3
    while (power != 0)
 23e4676:	bb5b      	cbnz	r3, 23e46d0 <validate_osr_and_odr_settings+0x78>
    press_meas_t = (BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 23e4678:	eddf 6a1b 	vldr	s13, [pc, #108]	; 23e46e8 <validate_osr_and_odr_settings+0x90>
 23e467c:	eddf 7a1b 	vldr	s15, [pc, #108]	; 23e46ec <validate_osr_and_odr_settings+0x94>
 23e4680:	eee7 7a26 	vfma.f32	s15, s14, s13
 23e4684:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23e4688:	ee17 3a90 	vmov	r3, s15
    if (dev->settings.temp_en)
 23e468c:	f894 20b2 	ldrb.w	r2, [r4, #178]	; 0xb2
 23e4690:	b17a      	cbz	r2, 23e46b2 <validate_osr_and_odr_settings+0x5a>
    float pow_output = 1;
 23e4692:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 23e4696:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
    while (power != 0)
 23e469a:	b9f2      	cbnz	r2, 23e46da <validate_osr_and_odr_settings+0x82>
    temp_meas_t = (BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 23e469c:	eddf 6a12 	vldr	s13, [pc, #72]	; 23e46e8 <validate_osr_and_odr_settings+0x90>
 23e46a0:	eddf 7a13 	vldr	s15, [pc, #76]	; 23e46f0 <validate_osr_and_odr_settings+0x98>
 23e46a4:	eee7 7a26 	vfma.f32	s15, s14, s13
 23e46a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
        meas_t_p += calculate_temp_meas_time(dev);
 23e46ac:	ee17 2a90 	vmov	r2, s15
 23e46b0:	4413      	add	r3, r2
    rslt = verify_meas_time_and_odr_duration(meas_t, odr[dev->settings.odr_filter.odr]);
 23e46b2:	f894 20b6 	ldrb.w	r2, [r4, #182]	; 0xb6
 23e46b6:	a912      	add	r1, sp, #72	; 0x48
 23e46b8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    if (meas_t < odr_duration)
 23e46bc:	f852 2c48 	ldr.w	r2, [r2, #-72]
    meas_t += meas_t_p;
 23e46c0:	33ea      	adds	r3, #234	; 0xea
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 23e46c2:	429a      	cmp	r2, r3
}
 23e46c4:	bf94      	ite	ls
 23e46c6:	f06f 0002 	mvnls.w	r0, #2
 23e46ca:	2000      	movhi	r0, #0
 23e46cc:	b012      	add	sp, #72	; 0x48
 23e46ce:	bd10      	pop	{r4, pc}
        power--;
 23e46d0:	3b01      	subs	r3, #1
        pow_output = (float) base * pow_output;
 23e46d2:	ee37 7a07 	vadd.f32	s14, s14, s14
        power--;
 23e46d6:	b2db      	uxtb	r3, r3
 23e46d8:	e7cd      	b.n	23e4676 <validate_osr_and_odr_settings+0x1e>
 23e46da:	3a01      	subs	r2, #1
        pow_output = (float) base * pow_output;
 23e46dc:	ee37 7a07 	vadd.f32	s14, s14, s14
        power--;
 23e46e0:	b2d2      	uxtb	r2, r2
 23e46e2:	e7da      	b.n	23e469a <validate_osr_and_odr_settings+0x42>
 23e46e4:	023fc9f0 	.word	0x023fc9f0
 23e46e8:	44fa0000 	.word	0x44fa0000
 23e46ec:	43c40000 	.word	0x43c40000
 23e46f0:	439c8000 	.word	0x439c8000

023e46f4 <bmp3_get_regs>:
{
 23e46f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23e46f8:	4606      	mov	r6, r0
 23e46fa:	af00      	add	r7, sp, #0
    rslt = null_ptr_check(dev);
 23e46fc:	4618      	mov	r0, r3
{
 23e46fe:	461c      	mov	r4, r3
    rslt = null_ptr_check(dev);
 23e4700:	f7ff feaf 	bl	23e4462 <null_ptr_check>
{
 23e4704:	4688      	mov	r8, r1
 23e4706:	4691      	mov	r9, r2
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 23e4708:	4605      	mov	r5, r0
 23e470a:	bb88      	cbnz	r0, 23e4770 <bmp3_get_regs+0x7c>
 23e470c:	b381      	cbz	r1, 23e4770 <bmp3_get_regs+0x7c>
        uint32_t temp_len = len + dev->dummy_byte;
 23e470e:	7aa0      	ldrb	r0, [r4, #10]
        if (dev->intf != BMP3_I2C_INTF)
 23e4710:	f894 c008 	ldrb.w	ip, [r4, #8]
        uint32_t temp_len = len + dev->dummy_byte;
 23e4714:	4410      	add	r0, r2
        uint8_t temp_buff[len + dev->dummy_byte];
 23e4716:	1dc3      	adds	r3, r0, #7
 23e4718:	f023 0307 	bic.w	r3, r3, #7
    {
 23e471c:	46ea      	mov	sl, sp
        uint8_t temp_buff[len + dev->dummy_byte];
 23e471e:	ebad 0d03 	sub.w	sp, sp, r3
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 23e4722:	68e3      	ldr	r3, [r4, #12]
        if (dev->intf != BMP3_I2C_INTF)
 23e4724:	f1bc 0f01 	cmp.w	ip, #1
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 23e4728:	469e      	mov	lr, r3
        uint8_t temp_buff[len + dev->dummy_byte];
 23e472a:	46eb      	mov	fp, sp
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 23e472c:	6863      	ldr	r3, [r4, #4]
        if (dev->intf != BMP3_I2C_INTF)
 23e472e:	d01a      	beq.n	23e4766 <bmp3_get_regs+0x72>
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 23e4730:	4602      	mov	r2, r0
 23e4732:	4669      	mov	r1, sp
 23e4734:	f046 0080 	orr.w	r0, r6, #128	; 0x80
 23e4738:	4676      	mov	r6, lr
 23e473a:	47b0      	blx	r6
 23e473c:	7260      	strb	r0, [r4, #9]
            for (idx = 0; idx < len; idx++)
 23e473e:	454d      	cmp	r5, r9
 23e4740:	d109      	bne.n	23e4756 <bmp3_get_regs+0x62>
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 23e4742:	f994 0009 	ldrsb.w	r0, [r4, #9]
 23e4746:	46d5      	mov	sp, sl
            rslt = BMP3_E_COMM_FAIL;
 23e4748:	2800      	cmp	r0, #0
 23e474a:	bf18      	it	ne
 23e474c:	f06f 0006 	mvnne.w	r0, #6
}
 23e4750:	46bd      	mov	sp, r7
 23e4752:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 23e4756:	7aa3      	ldrb	r3, [r4, #10]
 23e4758:	eb0b 0205 	add.w	r2, fp, r5
 23e475c:	5cd3      	ldrb	r3, [r2, r3]
 23e475e:	f808 3005 	strb.w	r3, [r8, r5]
            for (idx = 0; idx < len; idx++)
 23e4762:	3501      	adds	r5, #1
 23e4764:	e7eb      	b.n	23e473e <bmp3_get_regs+0x4a>
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 23e4766:	4630      	mov	r0, r6
 23e4768:	4675      	mov	r5, lr
 23e476a:	47a8      	blx	r5
 23e476c:	7260      	strb	r0, [r4, #9]
 23e476e:	e7e8      	b.n	23e4742 <bmp3_get_regs+0x4e>
        rslt = BMP3_E_NULL_PTR;
 23e4770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e4774:	e7ec      	b.n	23e4750 <bmp3_get_regs+0x5c>

023e4776 <bmp3_set_regs>:
{
 23e4776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23e477a:	461c      	mov	r4, r3
    uint8_t temp_buff[len * 2];
 23e477c:	ea4f 0842 	mov.w	r8, r2, lsl #1
 23e4780:	f108 0307 	add.w	r3, r8, #7
 23e4784:	f023 0307 	bic.w	r3, r3, #7
{
 23e4788:	af00      	add	r7, sp, #0
 23e478a:	4606      	mov	r6, r0
    uint8_t temp_buff[len * 2];
 23e478c:	ebad 0d03 	sub.w	sp, sp, r3
    rslt = null_ptr_check(dev);
 23e4790:	4620      	mov	r0, r4
{
 23e4792:	460d      	mov	r5, r1
    uint8_t temp_buff[len * 2];
 23e4794:	4669      	mov	r1, sp
    rslt = null_ptr_check(dev);
 23e4796:	f7ff fe64 	bl	23e4462 <null_ptr_check>
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 23e479a:	bb70      	cbnz	r0, 23e47fa <bmp3_set_regs+0x84>
 23e479c:	b36e      	cbz	r6, 23e47fa <bmp3_set_regs+0x84>
 23e479e:	b365      	cbz	r5, 23e47fa <bmp3_set_regs+0x84>
        if (len != 0)
 23e47a0:	b372      	cbz	r2, 23e4800 <bmp3_set_regs+0x8a>
            temp_buff[0] = reg_data[0];
 23e47a2:	782b      	ldrb	r3, [r5, #0]
 23e47a4:	f88d 3000 	strb.w	r3, [sp]
            if (dev->intf == BMP3_SPI_INTF)
 23e47a8:	7a23      	ldrb	r3, [r4, #8]
 23e47aa:	b303      	cbz	r3, 23e47ee <bmp3_set_regs+0x78>
            if (len > 1)
 23e47ac:	2a01      	cmp	r2, #1
 23e47ae:	d00c      	beq.n	23e47ca <bmp3_set_regs+0x54>
    for (index = 1; index < len; index++)
 23e47b0:	2301      	movs	r3, #1
        temp_buff[(index * 2) - 1] = reg_addr[index];
 23e47b2:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 23e47b6:	5cf0      	ldrb	r0, [r6, r3]
 23e47b8:	f80c 0013 	strb.w	r0, [ip, r3, lsl #1]
        temp_buff[index * 2] = reg_data[index];
 23e47bc:	5ce8      	ldrb	r0, [r5, r3]
 23e47be:	f801 0013 	strb.w	r0, [r1, r3, lsl #1]
    for (index = 1; index < len; index++)
 23e47c2:	3301      	adds	r3, #1
 23e47c4:	429a      	cmp	r2, r3
 23e47c6:	d8f6      	bhi.n	23e47b6 <bmp3_set_regs+0x40>
                temp_len = len * 2;
 23e47c8:	4642      	mov	r2, r8
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 23e47ca:	6925      	ldr	r5, [r4, #16]
 23e47cc:	6863      	ldr	r3, [r4, #4]
 23e47ce:	7830      	ldrb	r0, [r6, #0]
 23e47d0:	47a8      	blx	r5
                rslt = BMP3_E_COMM_FAIL;
 23e47d2:	2800      	cmp	r0, #0
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 23e47d4:	7260      	strb	r0, [r4, #9]
                rslt = BMP3_E_COMM_FAIL;
 23e47d6:	bf18      	it	ne
 23e47d8:	f06f 0006 	mvnne.w	r0, #6
}
 23e47dc:	46bd      	mov	sp, r7
 23e47de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 23e47e2:	f816 c000 	ldrb.w	ip, [r6, r0]
 23e47e6:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
 23e47ea:	f806 c000 	strb.w	ip, [r6, r0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 23e47ee:	b2d8      	uxtb	r0, r3
 23e47f0:	4282      	cmp	r2, r0
 23e47f2:	f103 0301 	add.w	r3, r3, #1
 23e47f6:	d8f4      	bhi.n	23e47e2 <bmp3_set_regs+0x6c>
 23e47f8:	e7d8      	b.n	23e47ac <bmp3_set_regs+0x36>
        rslt = BMP3_E_NULL_PTR;
 23e47fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e47fe:	e7ed      	b.n	23e47dc <bmp3_set_regs+0x66>
            rslt = BMP3_E_INVALID_LEN;
 23e4800:	f06f 0005 	mvn.w	r0, #5
 23e4804:	e7ea      	b.n	23e47dc <bmp3_set_regs+0x66>

023e4806 <write_power_mode>:
{
 23e4806:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23e4808:	4603      	mov	r3, r0
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e480a:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 23e480c:	2201      	movs	r2, #1
 23e480e:	f10d 010f 	add.w	r1, sp, #15
    uint8_t op_mode = dev->settings.op_mode;
 23e4812:	f893 40b0 	ldrb.w	r4, [r3, #176]	; 0xb0
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 23e4816:	9301      	str	r3, [sp, #4]
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e4818:	f88d 000e 	strb.w	r0, [sp, #14]
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 23e481c:	f7ff ff6a 	bl	23e46f4 <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e4820:	9b01      	ldr	r3, [sp, #4]
 23e4822:	b980      	cbnz	r0, 23e4846 <write_power_mode+0x40>
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 23e4824:	f89d 200f 	ldrb.w	r2, [sp, #15]
 23e4828:	0124      	lsls	r4, r4, #4
 23e482a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 23e482e:	f004 0430 	and.w	r4, r4, #48	; 0x30
 23e4832:	4322      	orrs	r2, r4
 23e4834:	f88d 200f 	strb.w	r2, [sp, #15]
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 23e4838:	f10d 010f 	add.w	r1, sp, #15
 23e483c:	2201      	movs	r2, #1
 23e483e:	f10d 000e 	add.w	r0, sp, #14
 23e4842:	f7ff ff98 	bl	23e4776 <bmp3_set_regs>
}
 23e4846:	b004      	add	sp, #16
 23e4848:	bd10      	pop	{r4, pc}
	...

023e484c <bmp3_set_sensor_settings>:
{
 23e484c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23e484e:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
 23e4850:	4608      	mov	r0, r1
{
 23e4852:	460d      	mov	r5, r1
    rslt = null_ptr_check(dev);
 23e4854:	f7ff fe05 	bl	23e4462 <null_ptr_check>
    if (rslt == BMP3_OK)
 23e4858:	2800      	cmp	r0, #0
 23e485a:	f040 811e 	bne.w	23e4a9a <bmp3_set_sensor_settings+0x24e>
    if (sub_settings & desired_settings)
 23e485e:	f014 0f06 	tst.w	r4, #6
 23e4862:	d029      	beq.n	23e48b8 <bmp3_set_sensor_settings+0x6c>
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e4864:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e4866:	460b      	mov	r3, r1
 23e4868:	2201      	movs	r2, #1
 23e486a:	a901      	add	r1, sp, #4
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e486c:	f88d 0000 	strb.w	r0, [sp]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e4870:	f7ff ff40 	bl	23e46f4 <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e4874:	bb00      	cbnz	r0, 23e48b8 <bmp3_set_sensor_settings+0x6c>
        if (desired_settings & BMP3_SEL_PRESS_EN)
 23e4876:	07a7      	lsls	r7, r4, #30
 23e4878:	d50a      	bpl.n	23e4890 <bmp3_set_sensor_settings+0x44>
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, dev->settings.press_en);
 23e487a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23e487e:	f895 20b1 	ldrb.w	r2, [r5, #177]	; 0xb1
 23e4882:	f023 0301 	bic.w	r3, r3, #1
 23e4886:	f002 0201 	and.w	r2, r2, #1
 23e488a:	4313      	orrs	r3, r2
 23e488c:	f88d 3004 	strb.w	r3, [sp, #4]
        if (desired_settings & BMP3_SEL_TEMP_EN)
 23e4890:	0766      	lsls	r6, r4, #29
 23e4892:	d50b      	bpl.n	23e48ac <bmp3_set_sensor_settings+0x60>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, dev->settings.temp_en);
 23e4894:	f895 30b2 	ldrb.w	r3, [r5, #178]	; 0xb2
 23e4898:	f89d 2004 	ldrb.w	r2, [sp, #4]
 23e489c:	005b      	lsls	r3, r3, #1
 23e489e:	f003 0302 	and.w	r3, r3, #2
 23e48a2:	f022 0202 	bic.w	r2, r2, #2
 23e48a6:	4313      	orrs	r3, r2
 23e48a8:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 23e48ac:	462b      	mov	r3, r5
 23e48ae:	2201      	movs	r2, #1
 23e48b0:	4668      	mov	r0, sp
 23e48b2:	a901      	add	r1, sp, #4
 23e48b4:	f7ff ff5f 	bl	23e4776 <bmp3_set_regs>
    if (sub_settings & desired_settings)
 23e48b8:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 23e48bc:	d072      	beq.n	23e49a4 <bmp3_set_sensor_settings+0x158>
        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings) && (!rslt))
 23e48be:	2800      	cmp	r0, #0
 23e48c0:	d170      	bne.n	23e49a4 <bmp3_set_sensor_settings+0x158>
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 23e48c2:	2204      	movs	r2, #4
    uint8_t reg_addr[3] = { 0 };
 23e48c4:	4b77      	ldr	r3, [pc, #476]	; (23e4aa4 <bmp3_set_sensor_settings+0x258>)
 23e48c6:	f88d 0002 	strb.w	r0, [sp, #2]
 23e48ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 23e48ce:	201c      	movs	r0, #28
    uint8_t reg_addr[3] = { 0 };
 23e48d0:	f8ad 3000 	strh.w	r3, [sp]
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 23e48d4:	eb0d 0102 	add.w	r1, sp, r2
 23e48d8:	462b      	mov	r3, r5
 23e48da:	f7ff ff0b 	bl	23e46f4 <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e48de:	2800      	cmp	r0, #0
 23e48e0:	d160      	bne.n	23e49a4 <bmp3_set_sensor_settings+0x158>
    if (sub_settings & desired_settings)
 23e48e2:	f014 0f30 	tst.w	r4, #48	; 0x30
 23e48e6:	f000 80da 	beq.w	23e4a9e <bmp3_set_sensor_settings+0x252>
        if (settings & BMP3_SEL_PRESS_OS)
 23e48ea:	06e0      	lsls	r0, r4, #27
 23e48ec:	f895 20b4 	ldrb.w	r2, [r5, #180]	; 0xb4
 23e48f0:	d50a      	bpl.n	23e4908 <bmp3_set_sensor_settings+0xbc>
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 23e48f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23e48f6:	f895 10b3 	ldrb.w	r1, [r5, #179]	; 0xb3
 23e48fa:	f023 0307 	bic.w	r3, r3, #7
 23e48fe:	f001 0107 	and.w	r1, r1, #7
 23e4902:	430b      	orrs	r3, r1
 23e4904:	f88d 3004 	strb.w	r3, [sp, #4]
        if (settings & BMP3_SEL_TEMP_OS)
 23e4908:	06a1      	lsls	r1, r4, #26
 23e490a:	d509      	bpl.n	23e4920 <bmp3_set_sensor_settings+0xd4>
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 23e490c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23e4910:	00d2      	lsls	r2, r2, #3
 23e4912:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 23e4916:	f002 0238 	and.w	r2, r2, #56	; 0x38
 23e491a:	4313      	orrs	r3, r2
 23e491c:	f88d 3004 	strb.w	r3, [sp, #4]
        addr[*len] = BMP3_REG_OSR;
 23e4920:	231c      	movs	r3, #28
}
 23e4922:	2601      	movs	r6, #1
        addr[*len] = BMP3_REG_OSR;
 23e4924:	f88d 3000 	strb.w	r3, [sp]
    if (sub_settings & desired_settings)
 23e4928:	0622      	lsls	r2, r4, #24
 23e492a:	d518      	bpl.n	23e495e <bmp3_set_sensor_settings+0x112>
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 23e492c:	f895 30b6 	ldrb.w	r3, [r5, #182]	; 0xb6
 23e4930:	2b11      	cmp	r3, #17
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 23e4932:	bf84      	itt	hi
 23e4934:	2311      	movhi	r3, #17
 23e4936:	f885 30b6 	strbhi.w	r3, [r5, #182]	; 0xb6
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 23e493a:	ab02      	add	r3, sp, #8
 23e493c:	1999      	adds	r1, r3, r6
 23e493e:	f895 20b6 	ldrb.w	r2, [r5, #182]	; 0xb6
 23e4942:	f89d 3005 	ldrb.w	r3, [sp, #5]
 23e4946:	f002 021f 	and.w	r2, r2, #31
 23e494a:	f023 031f 	bic.w	r3, r3, #31
 23e494e:	4313      	orrs	r3, r2
 23e4950:	f801 3c04 	strb.w	r3, [r1, #-4]
    addr[*len] = BMP3_REG_ODR;
 23e4954:	231d      	movs	r3, #29
    (*len)++;
 23e4956:	3601      	adds	r6, #1
    addr[*len] = BMP3_REG_ODR;
 23e4958:	f801 3c08 	strb.w	r3, [r1, #-8]
    (*len)++;
 23e495c:	b2f6      	uxtb	r6, r6
    if (sub_settings & desired_settings)
 23e495e:	0663      	lsls	r3, r4, #25
 23e4960:	d512      	bpl.n	23e4988 <bmp3_set_sensor_settings+0x13c>
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 23e4962:	ab02      	add	r3, sp, #8
 23e4964:	1999      	adds	r1, r3, r6
 23e4966:	f895 30b5 	ldrb.w	r3, [r5, #181]	; 0xb5
 23e496a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 23e496e:	005b      	lsls	r3, r3, #1
 23e4970:	f003 030e 	and.w	r3, r3, #14
 23e4974:	f022 020e 	bic.w	r2, r2, #14
 23e4978:	4313      	orrs	r3, r2
 23e497a:	f801 3c04 	strb.w	r3, [r1, #-4]
    addr[*len] = BMP3_REG_CONFIG;
 23e497e:	231f      	movs	r3, #31
    (*len)++;
 23e4980:	3601      	adds	r6, #1
    addr[*len] = BMP3_REG_CONFIG;
 23e4982:	f801 3c08 	strb.w	r3, [r1, #-8]
    (*len)++;
 23e4986:	b2f6      	uxtb	r6, r6
        if (dev->settings.op_mode == BMP3_MODE_NORMAL)
 23e4988:	f895 30b0 	ldrb.w	r3, [r5, #176]	; 0xb0
 23e498c:	2b03      	cmp	r3, #3
 23e498e:	d103      	bne.n	23e4998 <bmp3_set_sensor_settings+0x14c>
            rslt = validate_osr_and_odr_settings(dev);
 23e4990:	4628      	mov	r0, r5
 23e4992:	f7ff fe61 	bl	23e4658 <validate_osr_and_odr_settings>
        if (rslt == BMP3_OK)
 23e4996:	b928      	cbnz	r0, 23e49a4 <bmp3_set_sensor_settings+0x158>
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 23e4998:	462b      	mov	r3, r5
 23e499a:	4632      	mov	r2, r6
 23e499c:	4668      	mov	r0, sp
 23e499e:	a901      	add	r1, sp, #4
 23e49a0:	f7ff fee9 	bl	23e4776 <bmp3_set_regs>
    if (sub_settings & desired_settings)
 23e49a4:	f414 6fe1 	tst.w	r4, #1800	; 0x708
 23e49a8:	d048      	beq.n	23e4a3c <bmp3_set_sensor_settings+0x1f0>
        if (are_settings_changed(BMP3_INT_CTRL, desired_settings) && (!rslt))
 23e49aa:	2800      	cmp	r0, #0
 23e49ac:	d146      	bne.n	23e4a3c <bmp3_set_sensor_settings+0x1f0>
    reg_addr = BMP3_REG_INT_CTRL;
 23e49ae:	2019      	movs	r0, #25
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e49b0:	462b      	mov	r3, r5
 23e49b2:	2201      	movs	r2, #1
 23e49b4:	4669      	mov	r1, sp
    reg_addr = BMP3_REG_INT_CTRL;
 23e49b6:	f88d 0004 	strb.w	r0, [sp, #4]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e49ba:	f7ff fe9b 	bl	23e46f4 <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e49be:	2800      	cmp	r0, #0
 23e49c0:	d13c      	bne.n	23e4a3c <bmp3_set_sensor_settings+0x1f0>
        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 23e49c2:	05e7      	lsls	r7, r4, #23
        int_settings = dev->settings.int_settings;
 23e49c4:	f895 00b8 	ldrb.w	r0, [r5, #184]	; 0xb8
 23e49c8:	f895 10b9 	ldrb.w	r1, [r5, #185]	; 0xb9
 23e49cc:	f895 20ba 	ldrb.w	r2, [r5, #186]	; 0xba
        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 23e49d0:	d50a      	bpl.n	23e49e8 <bmp3_set_sensor_settings+0x19c>
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 23e49d2:	f89d 3000 	ldrb.w	r3, [sp]
 23e49d6:	f895 60b7 	ldrb.w	r6, [r5, #183]	; 0xb7
 23e49da:	f023 0301 	bic.w	r3, r3, #1
 23e49de:	f006 0601 	and.w	r6, r6, #1
 23e49e2:	4333      	orrs	r3, r6
 23e49e4:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_LEVEL)
 23e49e8:	05a6      	lsls	r6, r4, #22
 23e49ea:	d509      	bpl.n	23e4a00 <bmp3_set_sensor_settings+0x1b4>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 23e49ec:	f89d 3000 	ldrb.w	r3, [sp]
 23e49f0:	0040      	lsls	r0, r0, #1
 23e49f2:	f023 0302 	bic.w	r3, r3, #2
 23e49f6:	f000 0002 	and.w	r0, r0, #2
 23e49fa:	4303      	orrs	r3, r0
 23e49fc:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_LATCH)
 23e4a00:	0560      	lsls	r0, r4, #21
 23e4a02:	d509      	bpl.n	23e4a18 <bmp3_set_sensor_settings+0x1cc>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 23e4a04:	f89d 3000 	ldrb.w	r3, [sp]
 23e4a08:	0089      	lsls	r1, r1, #2
 23e4a0a:	f023 0304 	bic.w	r3, r3, #4
 23e4a0e:	f001 0104 	and.w	r1, r1, #4
 23e4a12:	430b      	orrs	r3, r1
 23e4a14:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_DRDY_EN)
 23e4a18:	0721      	lsls	r1, r4, #28
 23e4a1a:	d509      	bpl.n	23e4a30 <bmp3_set_sensor_settings+0x1e4>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 23e4a1c:	f89d 3000 	ldrb.w	r3, [sp]
 23e4a20:	0192      	lsls	r2, r2, #6
 23e4a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 23e4a26:	f002 0240 	and.w	r2, r2, #64	; 0x40
 23e4a2a:	4313      	orrs	r3, r2
 23e4a2c:	f88d 3000 	strb.w	r3, [sp]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 23e4a30:	462b      	mov	r3, r5
 23e4a32:	2201      	movs	r2, #1
 23e4a34:	4669      	mov	r1, sp
 23e4a36:	a801      	add	r0, sp, #4
 23e4a38:	f7ff fe9d 	bl	23e4776 <bmp3_set_regs>
    if (sub_settings & desired_settings)
 23e4a3c:	f414 5fc0 	tst.w	r4, #6144	; 0x1800
 23e4a40:	d02b      	beq.n	23e4a9a <bmp3_set_sensor_settings+0x24e>
        if (are_settings_changed(BMP3_ADV_SETT, desired_settings) && (!rslt))
 23e4a42:	bb50      	cbnz	r0, 23e4a9a <bmp3_set_sensor_settings+0x24e>
    reg_addr = BMP3_REG_IF_CONF;
 23e4a44:	201a      	movs	r0, #26
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e4a46:	462b      	mov	r3, r5
 23e4a48:	2201      	movs	r2, #1
 23e4a4a:	a901      	add	r1, sp, #4
    struct bmp3_adv_settings adv_settings = dev->settings.adv_settings;
 23e4a4c:	f895 70bb 	ldrb.w	r7, [r5, #187]	; 0xbb
 23e4a50:	f895 60bc 	ldrb.w	r6, [r5, #188]	; 0xbc
    reg_addr = BMP3_REG_IF_CONF;
 23e4a54:	f88d 0000 	strb.w	r0, [sp]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 23e4a58:	f7ff fe4c 	bl	23e46f4 <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e4a5c:	b9e8      	cbnz	r0, 23e4a9a <bmp3_set_sensor_settings+0x24e>
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 23e4a5e:	0522      	lsls	r2, r4, #20
 23e4a60:	d509      	bpl.n	23e4a76 <bmp3_set_sensor_settings+0x22a>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 23e4a62:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23e4a66:	007f      	lsls	r7, r7, #1
 23e4a68:	f023 0302 	bic.w	r3, r3, #2
 23e4a6c:	f007 0702 	and.w	r7, r7, #2
 23e4a70:	433b      	orrs	r3, r7
 23e4a72:	f88d 3004 	strb.w	r3, [sp, #4]
        if (desired_settings & BMP3_SEL_I2C_WDT)
 23e4a76:	04e3      	lsls	r3, r4, #19
 23e4a78:	d509      	bpl.n	23e4a8e <bmp3_set_sensor_settings+0x242>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 23e4a7a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23e4a7e:	00b6      	lsls	r6, r6, #2
 23e4a80:	f023 0304 	bic.w	r3, r3, #4
 23e4a84:	f006 0604 	and.w	r6, r6, #4
 23e4a88:	4333      	orrs	r3, r6
 23e4a8a:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 23e4a8e:	462b      	mov	r3, r5
 23e4a90:	2201      	movs	r2, #1
 23e4a92:	4668      	mov	r0, sp
 23e4a94:	a901      	add	r1, sp, #4
 23e4a96:	f7ff fe6e 	bl	23e4776 <bmp3_set_regs>
}
 23e4a9a:	b003      	add	sp, #12
 23e4a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t len = 0;
 23e4a9e:	4606      	mov	r6, r0
 23e4aa0:	e742      	b.n	23e4928 <bmp3_set_sensor_settings+0xdc>
 23e4aa2:	bf00      	nop
 23e4aa4:	023fc9f0 	.word	0x023fc9f0

023e4aa8 <bmp3_soft_reset>:
    uint8_t reg_addr = BMP3_REG_CMD;
 23e4aa8:	237e      	movs	r3, #126	; 0x7e
{
 23e4aaa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t reg_addr = BMP3_REG_CMD;
 23e4aac:	f88d 3004 	strb.w	r3, [sp, #4]
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 23e4ab0:	23b6      	movs	r3, #182	; 0xb6
{
 23e4ab2:	4605      	mov	r5, r0
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 23e4ab4:	f88d 3005 	strb.w	r3, [sp, #5]
    rslt = null_ptr_check(dev);
 23e4ab8:	f7ff fcd3 	bl	23e4462 <null_ptr_check>
    if (rslt == BMP3_OK)
 23e4abc:	4604      	mov	r4, r0
 23e4abe:	b960      	cbnz	r0, 23e4ada <bmp3_soft_reset+0x32>
        rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 23e4ac0:	462b      	mov	r3, r5
 23e4ac2:	2201      	movs	r2, #1
 23e4ac4:	2003      	movs	r0, #3
 23e4ac6:	f10d 0106 	add.w	r1, sp, #6
 23e4aca:	f7ff fe13 	bl	23e46f4 <bmp3_get_regs>
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 23e4ace:	f89d 3006 	ldrb.w	r3, [sp, #6]
 23e4ad2:	06db      	lsls	r3, r3, #27
 23e4ad4:	d404      	bmi.n	23e4ae0 <bmp3_soft_reset+0x38>
            rslt = BMP3_E_CMD_EXEC_FAILED;
 23e4ad6:	f06f 0403 	mvn.w	r4, #3
}
 23e4ada:	4620      	mov	r0, r4
 23e4adc:	b003      	add	sp, #12
 23e4ade:	bd30      	pop	{r4, r5, pc}
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 23e4ae0:	2800      	cmp	r0, #0
 23e4ae2:	d1f8      	bne.n	23e4ad6 <bmp3_soft_reset+0x2e>
            rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 23e4ae4:	462b      	mov	r3, r5
 23e4ae6:	2201      	movs	r2, #1
 23e4ae8:	f10d 0105 	add.w	r1, sp, #5
 23e4aec:	a801      	add	r0, sp, #4
 23e4aee:	f7ff fe42 	bl	23e4776 <bmp3_set_regs>
            if (rslt == BMP3_OK)
 23e4af2:	4604      	mov	r4, r0
 23e4af4:	2800      	cmp	r0, #0
 23e4af6:	d1f0      	bne.n	23e4ada <bmp3_soft_reset+0x32>
                dev->delay_us(2000, dev->intf_ptr);
 23e4af8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23e4afc:	696b      	ldr	r3, [r5, #20]
 23e4afe:	6869      	ldr	r1, [r5, #4]
 23e4b00:	4798      	blx	r3
                rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 23e4b02:	462b      	mov	r3, r5
 23e4b04:	2201      	movs	r2, #1
 23e4b06:	2002      	movs	r0, #2
 23e4b08:	f10d 0107 	add.w	r1, sp, #7
 23e4b0c:	f7ff fdf2 	bl	23e46f4 <bmp3_get_regs>
                if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 23e4b10:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23e4b14:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 23e4b18:	4318      	orrs	r0, r3
 23e4b1a:	b2c0      	uxtb	r0, r0
 23e4b1c:	2800      	cmp	r0, #0
 23e4b1e:	d0dc      	beq.n	23e4ada <bmp3_soft_reset+0x32>
 23e4b20:	e7d9      	b.n	23e4ad6 <bmp3_soft_reset+0x2e>
	...

023e4b24 <bmp3_init>:
    uint8_t chip_id = 0;
 23e4b24:	2300      	movs	r3, #0
{
 23e4b26:	b530      	push	{r4, r5, lr}
 23e4b28:	b089      	sub	sp, #36	; 0x24
 23e4b2a:	4604      	mov	r4, r0
    uint8_t chip_id = 0;
 23e4b2c:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_ptr_check(dev);
 23e4b30:	f7ff fc97 	bl	23e4462 <null_ptr_check>
    if (rslt == BMP3_OK)
 23e4b34:	4605      	mov	r5, r0
 23e4b36:	2800      	cmp	r0, #0
 23e4b38:	f040 80d8 	bne.w	23e4cec <bmp3_init+0x1c8>
        if (dev->intf != BMP3_I2C_INTF)
 23e4b3c:	7a23      	ldrb	r3, [r4, #8]
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 23e4b3e:	2201      	movs	r2, #1
        if (dev->intf != BMP3_I2C_INTF)
 23e4b40:	3b01      	subs	r3, #1
 23e4b42:	bf18      	it	ne
 23e4b44:	2301      	movne	r3, #1
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 23e4b46:	f10d 0107 	add.w	r1, sp, #7
        if (dev->intf != BMP3_I2C_INTF)
 23e4b4a:	72a3      	strb	r3, [r4, #10]
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 23e4b4c:	4623      	mov	r3, r4
 23e4b4e:	f7ff fdd1 	bl	23e46f4 <bmp3_get_regs>
        if (rslt == BMP3_OK)
 23e4b52:	4605      	mov	r5, r0
 23e4b54:	2800      	cmp	r0, #0
 23e4b56:	f040 80c9 	bne.w	23e4cec <bmp3_init+0x1c8>
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 23e4b5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23e4b5e:	2b50      	cmp	r3, #80	; 0x50
 23e4b60:	d002      	beq.n	23e4b68 <bmp3_init+0x44>
 23e4b62:	2b60      	cmp	r3, #96	; 0x60
 23e4b64:	f040 80c5 	bne.w	23e4cf2 <bmp3_init+0x1ce>
                rslt = bmp3_soft_reset(dev);
 23e4b68:	4620      	mov	r0, r4
                dev->chip_id = chip_id;
 23e4b6a:	7023      	strb	r3, [r4, #0]
                rslt = bmp3_soft_reset(dev);
 23e4b6c:	f7ff ff9c 	bl	23e4aa8 <bmp3_soft_reset>
                if (rslt == BMP3_OK)
 23e4b70:	4605      	mov	r5, r0
 23e4b72:	2800      	cmp	r0, #0
 23e4b74:	f040 80ba 	bne.w	23e4cec <bmp3_init+0x1c8>
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 23e4b78:	4601      	mov	r1, r0
 23e4b7a:	2211      	movs	r2, #17
 23e4b7c:	9002      	str	r0, [sp, #8]
 23e4b7e:	a803      	add	r0, sp, #12
 23e4b80:	f017 fdbd 	bl	23fc6fe <memset>
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 23e4b84:	4623      	mov	r3, r4
 23e4b86:	2215      	movs	r2, #21
 23e4b88:	a902      	add	r1, sp, #8
 23e4b8a:	2031      	movs	r0, #49	; 0x31
 23e4b8c:	f7ff fdb2 	bl	23e46f4 <bmp3_get_regs>
 23e4b90:	4605      	mov	r5, r0
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 23e4b92:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 23e4b96:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 23e4b9a:	f7fe fd63 	bl	23e3664 <__aeabi_ui2d>
 23e4b9e:	2200      	movs	r2, #0
 23e4ba0:	4b55      	ldr	r3, [pc, #340]	; (23e4cf8 <bmp3_init+0x1d4>)
 23e4ba2:	f7fe fdd9 	bl	23e3758 <__aeabi_dmul>
 23e4ba6:	e9c4 0106 	strd	r0, r1, [r4, #24]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 23e4baa:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 23e4bae:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 23e4bb2:	f7fe fd57 	bl	23e3664 <__aeabi_ui2d>
 23e4bb6:	2200      	movs	r2, #0
 23e4bb8:	4b50      	ldr	r3, [pc, #320]	; (23e4cfc <bmp3_init+0x1d8>)
 23e4bba:	f7fe fdcd 	bl	23e3758 <__aeabi_dmul>
 23e4bbe:	e9c4 0108 	strd	r0, r1, [r4, #32]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 23e4bc2:	f99d 000c 	ldrsb.w	r0, [sp, #12]
 23e4bc6:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 23e4bca:	f7fe fd5b 	bl	23e3684 <__aeabi_i2d>
 23e4bce:	2200      	movs	r2, #0
 23e4bd0:	4b4b      	ldr	r3, [pc, #300]	; (23e4d00 <bmp3_init+0x1dc>)
 23e4bd2:	f7fe fdc1 	bl	23e3758 <__aeabi_dmul>
 23e4bd6:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 23e4bda:	f9bd 000d 	ldrsh.w	r0, [sp, #13]
 23e4bde:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 23e4be2:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 23e4be6:	f7fe fd4d 	bl	23e3684 <__aeabi_i2d>
 23e4bea:	2200      	movs	r2, #0
 23e4bec:	4b45      	ldr	r3, [pc, #276]	; (23e4d04 <bmp3_init+0x1e0>)
 23e4bee:	f7fe fdb3 	bl	23e3758 <__aeabi_dmul>
 23e4bf2:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 23e4bf6:	f9bd 000f 	ldrsh.w	r0, [sp, #15]
 23e4bfa:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 23e4bfe:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 23e4c02:	f7fe fd3f 	bl	23e3684 <__aeabi_i2d>
 23e4c06:	2200      	movs	r2, #0
 23e4c08:	4b3f      	ldr	r3, [pc, #252]	; (23e4d08 <bmp3_init+0x1e4>)
 23e4c0a:	f7fe fda5 	bl	23e3758 <__aeabi_dmul>
 23e4c0e:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 23e4c12:	f99d 0011 	ldrsb.w	r0, [sp, #17]
 23e4c16:	f884 009a 	strb.w	r0, [r4, #154]	; 0x9a
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 23e4c1a:	f7fe fd33 	bl	23e3684 <__aeabi_i2d>
 23e4c1e:	2200      	movs	r2, #0
 23e4c20:	4b3a      	ldr	r3, [pc, #232]	; (23e4d0c <bmp3_init+0x1e8>)
 23e4c22:	f7fe fd99 	bl	23e3758 <__aeabi_dmul>
 23e4c26:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 23e4c2a:	f99d 0012 	ldrsb.w	r0, [sp, #18]
 23e4c2e:	f884 009b 	strb.w	r0, [r4, #155]	; 0x9b
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 23e4c32:	f7fe fd27 	bl	23e3684 <__aeabi_i2d>
 23e4c36:	2200      	movs	r2, #0
 23e4c38:	4b35      	ldr	r3, [pc, #212]	; (23e4d10 <bmp3_init+0x1ec>)
 23e4c3a:	f7fe fd8d 	bl	23e3758 <__aeabi_dmul>
 23e4c3e:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 23e4c42:	f8bd 0013 	ldrh.w	r0, [sp, #19]
 23e4c46:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 23e4c4a:	f7fe fd0b 	bl	23e3664 <__aeabi_ui2d>
 23e4c4e:	2200      	movs	r2, #0
 23e4c50:	4b30      	ldr	r3, [pc, #192]	; (23e4d14 <bmp3_init+0x1f0>)
 23e4c52:	f7fe fd81 	bl	23e3758 <__aeabi_dmul>
 23e4c56:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 23e4c5a:	f8bd 0015 	ldrh.w	r0, [sp, #21]
 23e4c5e:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 23e4c62:	f7fe fcff 	bl	23e3664 <__aeabi_ui2d>
 23e4c66:	2200      	movs	r2, #0
 23e4c68:	4b2b      	ldr	r3, [pc, #172]	; (23e4d18 <bmp3_init+0x1f4>)
 23e4c6a:	f7fe fd75 	bl	23e3758 <__aeabi_dmul>
 23e4c6e:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 23e4c72:	f99d 0017 	ldrsb.w	r0, [sp, #23]
 23e4c76:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 23e4c7a:	f7fe fd03 	bl	23e3684 <__aeabi_i2d>
 23e4c7e:	2200      	movs	r2, #0
 23e4c80:	4b26      	ldr	r3, [pc, #152]	; (23e4d1c <bmp3_init+0x1f8>)
 23e4c82:	f7fe fd69 	bl	23e3758 <__aeabi_dmul>
 23e4c86:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 23e4c8a:	f99d 0018 	ldrsb.w	r0, [sp, #24]
 23e4c8e:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 23e4c92:	f7fe fcf7 	bl	23e3684 <__aeabi_i2d>
 23e4c96:	2200      	movs	r2, #0
 23e4c98:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 23e4c9c:	f7fe fd5c 	bl	23e3758 <__aeabi_dmul>
 23e4ca0:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 23e4ca4:	f9bd 0019 	ldrsh.w	r0, [sp, #25]
 23e4ca8:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 23e4cac:	f7fe fcea 	bl	23e3684 <__aeabi_i2d>
 23e4cb0:	2200      	movs	r2, #0
 23e4cb2:	4b13      	ldr	r3, [pc, #76]	; (23e4d00 <bmp3_init+0x1dc>)
 23e4cb4:	f7fe fd50 	bl	23e3758 <__aeabi_dmul>
 23e4cb8:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 23e4cbc:	f99d 001b 	ldrsb.w	r0, [sp, #27]
 23e4cc0:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 23e4cc4:	f7fe fcde 	bl	23e3684 <__aeabi_i2d>
 23e4cc8:	2200      	movs	r2, #0
 23e4cca:	4b0d      	ldr	r3, [pc, #52]	; (23e4d00 <bmp3_init+0x1dc>)
 23e4ccc:	f7fe fd44 	bl	23e3758 <__aeabi_dmul>
 23e4cd0:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 23e4cd4:	f99d 001c 	ldrsb.w	r0, [sp, #28]
 23e4cd8:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 23e4cdc:	f7fe fcd2 	bl	23e3684 <__aeabi_i2d>
 23e4ce0:	2200      	movs	r2, #0
 23e4ce2:	4b0f      	ldr	r3, [pc, #60]	; (23e4d20 <bmp3_init+0x1fc>)
 23e4ce4:	f7fe fd38 	bl	23e3758 <__aeabi_dmul>
 23e4ce8:	e9c4 0120 	strd	r0, r1, [r4, #128]	; 0x80
}
 23e4cec:	4628      	mov	r0, r5
 23e4cee:	b009      	add	sp, #36	; 0x24
 23e4cf0:	bd30      	pop	{r4, r5, pc}
                rslt = BMP3_E_DEV_NOT_FOUND;
 23e4cf2:	f06f 0501 	mvn.w	r5, #1
 23e4cf6:	e7f9      	b.n	23e4cec <bmp3_init+0x1c8>
 23e4cf8:	40700000 	.word	0x40700000
 23e4cfc:	3e100000 	.word	0x3e100000
 23e4d00:	3cf00000 	.word	0x3cf00000
 23e4d04:	3eb00000 	.word	0x3eb00000
 23e4d08:	3e200000 	.word	0x3e200000
 23e4d0c:	3df00000 	.word	0x3df00000
 23e4d10:	3da00000 	.word	0x3da00000
 23e4d14:	40200000 	.word	0x40200000
 23e4d18:	3f900000 	.word	0x3f900000
 23e4d1c:	3f700000 	.word	0x3f700000
 23e4d20:	3be00000 	.word	0x3be00000

023e4d24 <bmp3_get_op_mode>:
{
 23e4d24:	b513      	push	{r0, r1, r4, lr}
 23e4d26:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
 23e4d28:	4608      	mov	r0, r1
 23e4d2a:	9101      	str	r1, [sp, #4]
 23e4d2c:	f7ff fb99 	bl	23e4462 <null_ptr_check>
    if ((rslt == BMP3_OK) && (op_mode != NULL))
 23e4d30:	b960      	cbnz	r0, 23e4d4c <bmp3_get_op_mode+0x28>
 23e4d32:	b15c      	cbz	r4, 23e4d4c <bmp3_get_op_mode+0x28>
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 23e4d34:	460b      	mov	r3, r1
 23e4d36:	2201      	movs	r2, #1
 23e4d38:	4621      	mov	r1, r4
 23e4d3a:	201b      	movs	r0, #27
 23e4d3c:	f7ff fcda 	bl	23e46f4 <bmp3_get_regs>
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 23e4d40:	7823      	ldrb	r3, [r4, #0]
 23e4d42:	f3c3 1301 	ubfx	r3, r3, #4, #2
 23e4d46:	7023      	strb	r3, [r4, #0]
}
 23e4d48:	b002      	add	sp, #8
 23e4d4a:	bd10      	pop	{r4, pc}
        rslt = BMP3_E_NULL_PTR;
 23e4d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e4d50:	e7fa      	b.n	23e4d48 <bmp3_get_op_mode+0x24>

023e4d52 <bmp3_set_op_mode>:
{
 23e4d52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23e4d54:	4605      	mov	r5, r0
    rslt = null_ptr_check(dev);
 23e4d56:	f7ff fb84 	bl	23e4462 <null_ptr_check>
    if (rslt == BMP3_OK)
 23e4d5a:	4604      	mov	r4, r0
 23e4d5c:	2800      	cmp	r0, #0
 23e4d5e:	d163      	bne.n	23e4e28 <bmp3_set_op_mode+0xd6>
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 23e4d60:	4629      	mov	r1, r5
 23e4d62:	f10d 0002 	add.w	r0, sp, #2
        uint8_t curr_mode = dev->settings.op_mode;
 23e4d66:	f895 60b0 	ldrb.w	r6, [r5, #176]	; 0xb0
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 23e4d6a:	f7ff ffdb 	bl	23e4d24 <bmp3_get_op_mode>
        if (last_set_mode != BMP3_MODE_SLEEP)
 23e4d6e:	f89d 3002 	ldrb.w	r3, [sp, #2]
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 23e4d72:	4604      	mov	r4, r0
        if (last_set_mode != BMP3_MODE_SLEEP)
 23e4d74:	b1e3      	cbz	r3, 23e4db0 <bmp3_set_op_mode+0x5e>
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e4d76:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 23e4d78:	462b      	mov	r3, r5
 23e4d7a:	2201      	movs	r2, #1
 23e4d7c:	a901      	add	r1, sp, #4
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 23e4d7e:	f88d 0003 	strb.w	r0, [sp, #3]
    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 23e4d82:	f7ff fcb7 	bl	23e46f4 <bmp3_get_regs>
    if (rslt == BMP3_OK)
 23e4d86:	4604      	mov	r4, r0
 23e4d88:	b968      	cbnz	r0, 23e4da6 <bmp3_set_op_mode+0x54>
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 23e4d8a:	f89d 3004 	ldrb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 23e4d8e:	2201      	movs	r2, #1
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 23e4d90:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 23e4d94:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 23e4d98:	a901      	add	r1, sp, #4
 23e4d9a:	462b      	mov	r3, r5
 23e4d9c:	f10d 0003 	add.w	r0, sp, #3
 23e4da0:	f7ff fce9 	bl	23e4776 <bmp3_set_regs>
 23e4da4:	4604      	mov	r4, r0
            dev->delay_us(5000, dev->intf_ptr);
 23e4da6:	f241 3088 	movw	r0, #5000	; 0x1388
 23e4daa:	696b      	ldr	r3, [r5, #20]
 23e4dac:	6869      	ldr	r1, [r5, #4]
 23e4dae:	4798      	blx	r3
        if (rslt == BMP3_OK)
 23e4db0:	bbd4      	cbnz	r4, 23e4e28 <bmp3_set_op_mode+0xd6>
            if (curr_mode == BMP3_MODE_NORMAL)
 23e4db2:	2e03      	cmp	r6, #3
 23e4db4:	d13b      	bne.n	23e4e2e <bmp3_set_op_mode+0xdc>
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 23e4db6:	2204      	movs	r2, #4
 23e4db8:	462b      	mov	r3, r5
 23e4dba:	eb0d 0102 	add.w	r1, sp, r2
 23e4dbe:	201c      	movs	r0, #28
 23e4dc0:	f7ff fc98 	bl	23e46f4 <bmp3_get_regs>
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 23e4dc4:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if (rslt == BMP3_OK)
 23e4dc8:	4604      	mov	r4, r0
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 23e4dca:	f003 0207 	and.w	r2, r3, #7
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 23e4dce:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 23e4dd2:	f885 30b4 	strb.w	r3, [r5, #180]	; 0xb4
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 23e4dd6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 23e4dda:	f885 20b3 	strb.w	r2, [r5, #179]	; 0xb3
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 23e4dde:	f003 031f 	and.w	r3, r3, #31
 23e4de2:	f885 30b6 	strb.w	r3, [r5, #182]	; 0xb6
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 23e4de6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23e4dea:	f3c3 0342 	ubfx	r3, r3, #1, #3
 23e4dee:	f885 30b5 	strb.w	r3, [r5, #181]	; 0xb5
    if (rslt == BMP3_OK)
 23e4df2:	b9c8      	cbnz	r0, 23e4e28 <bmp3_set_op_mode+0xd6>
        rslt = validate_osr_and_odr_settings(dev);
 23e4df4:	4628      	mov	r0, r5
 23e4df6:	f7ff fc2f 	bl	23e4658 <validate_osr_and_odr_settings>
    if (rslt == BMP3_OK)
 23e4dfa:	4604      	mov	r4, r0
 23e4dfc:	b9a0      	cbnz	r0, 23e4e28 <bmp3_set_op_mode+0xd6>
        rslt = write_power_mode(dev);
 23e4dfe:	4628      	mov	r0, r5
 23e4e00:	f7ff fd01 	bl	23e4806 <write_power_mode>
        if (rslt == BMP3_OK)
 23e4e04:	4604      	mov	r4, r0
 23e4e06:	b978      	cbnz	r0, 23e4e28 <bmp3_set_op_mode+0xd6>
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 23e4e08:	462b      	mov	r3, r5
 23e4e0a:	2201      	movs	r2, #1
 23e4e0c:	2002      	movs	r0, #2
 23e4e0e:	a901      	add	r1, sp, #4
 23e4e10:	f7ff fc70 	bl	23e46f4 <bmp3_get_regs>
            if (rslt == BMP3_OK)
 23e4e14:	4604      	mov	r4, r0
 23e4e16:	b938      	cbnz	r0, 23e4e28 <bmp3_set_op_mode+0xd6>
                if (conf_err_status & BMP3_ERR_CONF)
 23e4e18:	f89d 3004 	ldrb.w	r3, [sp, #4]
                    rslt = BMP3_E_CONFIGURATION_ERR;
 23e4e1c:	f013 0f04 	tst.w	r3, #4
 23e4e20:	bf0c      	ite	eq
 23e4e22:	4604      	moveq	r4, r0
 23e4e24:	f06f 0404 	mvnne.w	r4, #4
}
 23e4e28:	4620      	mov	r0, r4
 23e4e2a:	b002      	add	sp, #8
 23e4e2c:	bd70      	pop	{r4, r5, r6, pc}
            else if (curr_mode == BMP3_MODE_FORCED)
 23e4e2e:	2e01      	cmp	r6, #1
 23e4e30:	d1fa      	bne.n	23e4e28 <bmp3_set_op_mode+0xd6>
                rslt = write_power_mode(dev);
 23e4e32:	4628      	mov	r0, r5
 23e4e34:	f7ff fce7 	bl	23e4806 <write_power_mode>
 23e4e38:	4604      	mov	r4, r0
    return rslt;
 23e4e3a:	e7f5      	b.n	23e4e28 <bmp3_set_op_mode+0xd6>

023e4e3c <bmp3_get_sensor_data>:
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 23e4e3c:	2300      	movs	r3, #0
{
 23e4e3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 23e4e40:	4606      	mov	r6, r0
 23e4e42:	b085      	sub	sp, #20
    rslt = null_ptr_check(dev);
 23e4e44:	4610      	mov	r0, r2
{
 23e4e46:	460d      	mov	r5, r1
 23e4e48:	4617      	mov	r7, r2
    struct bmp3_uncomp_data uncomp_data = { 0 };
 23e4e4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 23e4e4e:	9300      	str	r3, [sp, #0]
 23e4e50:	f8ad 3004 	strh.w	r3, [sp, #4]
    rslt = null_ptr_check(dev);
 23e4e54:	f7ff fb05 	bl	23e4462 <null_ptr_check>
    if ((rslt == BMP3_OK) && (comp_data != NULL))
 23e4e58:	bb30      	cbnz	r0, 23e4ea8 <bmp3_get_sensor_data+0x6c>
 23e4e5a:	b329      	cbz	r1, 23e4ea8 <bmp3_get_sensor_data+0x6c>
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 23e4e5c:	4613      	mov	r3, r2
 23e4e5e:	4669      	mov	r1, sp
 23e4e60:	2206      	movs	r2, #6
 23e4e62:	2004      	movs	r0, #4
 23e4e64:	f7ff fc46 	bl	23e46f4 <bmp3_get_regs>
        if (rslt == BMP3_OK)
 23e4e68:	b9e0      	cbnz	r0, 23e4ea4 <bmp3_get_sensor_data+0x68>
    data_msb = (uint32_t)reg_data[2] << 16;
 23e4e6a:	f89d 3002 	ldrb.w	r3, [sp, #2]
    data_lsb = (uint32_t)reg_data[1] << 8;
 23e4e6e:	f89d 2001 	ldrb.w	r2, [sp, #1]
    data_msb = (uint32_t)reg_data[2] << 16;
 23e4e72:	041b      	lsls	r3, r3, #16
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 23e4e74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    data_xlsb = (uint32_t)reg_data[0];
 23e4e78:	f89d 2000 	ldrb.w	r2, [sp]
    data_msb = (uint32_t)reg_data[5] << 16;
 23e4e7c:	f89d 4005 	ldrb.w	r4, [sp, #5]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 23e4e80:	4313      	orrs	r3, r2
 23e4e82:	9302      	str	r3, [sp, #8]
    data_lsb = (uint32_t)reg_data[4] << 8;
 23e4e84:	f89d 3004 	ldrb.w	r3, [sp, #4]
    data_msb = (uint32_t)reg_data[5] << 16;
 23e4e88:	0424      	lsls	r4, r4, #16
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 23e4e8a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    data_xlsb = (uint32_t)reg_data[3];
 23e4e8e:	f89d 3003 	ldrb.w	r3, [sp, #3]
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 23e4e92:	462a      	mov	r2, r5
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 23e4e94:	431c      	orrs	r4, r3
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 23e4e96:	4630      	mov	r0, r6
 23e4e98:	f107 0318 	add.w	r3, r7, #24
 23e4e9c:	a902      	add	r1, sp, #8
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 23e4e9e:	9403      	str	r4, [sp, #12]
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 23e4ea0:	f7ff faef 	bl	23e4482 <compensate_data>
}
 23e4ea4:	b005      	add	sp, #20
 23e4ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rslt = BMP3_E_NULL_PTR;
 23e4ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e4eac:	e7fa      	b.n	23e4ea4 <bmp3_get_sensor_data+0x68>
	...

023e4eb0 <__tcf_1>:

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 23e4eb0:	4903      	ldr	r1, [pc, #12]	; (23e4ec0 <__tcf_1+0x10>)
 23e4eb2:	688b      	ldr	r3, [r1, #8]
 23e4eb4:	b113      	cbz	r3, 23e4ebc <__tcf_1+0xc>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23e4eb6:	2203      	movs	r2, #3
 23e4eb8:	4608      	mov	r0, r1
 23e4eba:	4718      	bx	r3
     * @brief Get the hardware watchdog instance.
     * 
     * @return The hardware watchdog singlton.
     */
    static WatchdogClass& getInstance() {
        static WatchdogClass watchdog;
 23e4ebc:	4770      	bx	lr
 23e4ebe:	bf00      	nop
 23e4ec0:	1006a248 	.word	0x1006a248

023e4ec4 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
 23e4ec4:	4770      	bx	lr
	...

023e4ec8 <_Z28anemometer_interrupt_handlerv>:
 * ======================================================================================================================
 */
#define ANEMOMETER_IRQ_PIN  A2
void anemometer_interrupt_handler()
{
  anemometer_interrupt_count++;
 23e4ec8:	4a02      	ldr	r2, [pc, #8]	; (23e4ed4 <_Z28anemometer_interrupt_handlerv+0xc>)
 23e4eca:	6813      	ldr	r3, [r2, #0]
 23e4ecc:	3301      	adds	r3, #1
 23e4ece:	6013      	str	r3, [r2, #0]
}
 23e4ed0:	4770      	bx	lr
 23e4ed2:	bf00      	nop
 23e4ed4:	1006a938 	.word	0x1006a938

023e4ed8 <_ZN6FsFileD1Ev>:
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23e4ed8:	4770      	bx	lr

023e4eda <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
 23e4eda:	b510      	push	{r4, lr}
 23e4edc:	4604      	mov	r4, r0
  }
 23e4ede:	2110      	movs	r1, #16
 23e4ee0:	f7ff faa3 	bl	23e442a <_ZdlPvj>
 23e4ee4:	4620      	mov	r0, r4
 23e4ee6:	bd10      	pop	{r4, pc}

023e4ee8 <_ZN6FsFileD0Ev>:
 23e4ee8:	b510      	push	{r4, lr}
 23e4eea:	4604      	mov	r4, r0
 23e4eec:	2150      	movs	r1, #80	; 0x50
 23e4eee:	f7ff fa9c 	bl	23e442a <_ZdlPvj>
 23e4ef2:	4620      	mov	r0, r4
 23e4ef4:	bd10      	pop	{r4, pc}

023e4ef6 <_ZN10StreamFileI10FsBaseFileyE5flushEv>:
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
 23e4ef6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 23e4ef8:	b113      	cbz	r3, 23e4f00 <_ZN10StreamFileI10FsBaseFileyE5flushEv+0xa>
 23e4efa:	4618      	mov	r0, r3
 23e4efc:	f00d bf86 	b.w	23f2e0c <_ZN7FatFile4syncEv>
 23e4f00:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 23e4f02:	b108      	cbz	r0, 23e4f08 <_ZN10StreamFileI10FsBaseFileyE5flushEv+0x12>
 23e4f04:	f00f bf14 	b.w	23f4d30 <_ZN9ExFatFile4syncEv>
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() override { return BaseFile::available(); }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() override { BaseFile::sync(); }
 23e4f08:	4770      	bx	lr
	...

023e4f0c <_Z13callback_imsiiPKciPc>:
 * 
 * COMMAND: AT+CIMI   Note: Each line returned is a call to this callback function
 * SEE https://docs.particle.io/reference/device-os/api/cellular/command/
 * ======================================================================================================================
 */
int callback_imsi(int type, const char* buf, int len, char* cimi) {
 23e4f0c:	b510      	push	{r4, lr}
 23e4f0e:	4604      	mov	r4, r0
 23e4f10:	461a      	mov	r2, r3
 23e4f12:	4608      	mov	r0, r1
  // sprintf (msgbuf, "AT+CIMI:%X [%s]", type, buf); Output (msgbuf);     

  if ((type == TYPE_UNKNOWN) && cimi) {
 23e4f14:	b934      	cbnz	r4, 23e4f24 <_Z13callback_imsiiPKciPc+0x18>
 23e4f16:	b113      	cbz	r3, 23e4f1e <_Z13callback_imsiiPKciPc+0x12>
    if (sscanf(buf, "\r\n%[^\r]\r\n", cimi) == 1)
 23e4f18:	4906      	ldr	r1, [pc, #24]	; (23e4f34 <_Z13callback_imsiiPKciPc+0x28>)
 23e4f1a:	f012 fac1 	bl	23f74a0 <sscanf>
  }

  if (type == TYPE_OK) {
    return (RESP_OK);
  }
  return (WAIT);
 23e4f1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e4f22:	e006      	b.n	23e4f32 <_Z13callback_imsiiPKciPc+0x26>
    return (RESP_OK);
 23e4f24:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
 23e4f28:	bf14      	ite	ne
 23e4f2a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23e4f2e:	f06f 0001 	mvneq.w	r0, #1
}
 23e4f32:	bd10      	pop	{r4, pc}
 23e4f34:	023fcdfe 	.word	0x023fcdfe

023e4f38 <_ZN10StreamFileI10FsBaseFileyE4peekEv>:
    return m_fFile ? m_fFile->peek() : m_xFile ? m_xFile->peek() : -1;
 23e4f38:	6c83      	ldr	r3, [r0, #72]	; 0x48
 23e4f3a:	b113      	cbz	r3, 23e4f42 <_ZN10StreamFileI10FsBaseFileyE4peekEv+0xa>
 23e4f3c:	4618      	mov	r0, r3
 23e4f3e:	f00d be7c 	b.w	23f2c3a <_ZN7FatFile4peekEv>
 23e4f42:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 23e4f44:	b108      	cbz	r0, 23e4f4a <_ZN10StreamFileI10FsBaseFileyE4peekEv+0x12>
 23e4f46:	f00f bb3b 	b.w	23f45c0 <_ZN9ExFatFile4peekEv>

  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() override { return BaseFile::peek(); }
 23e4f4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e4f4e:	4770      	bx	lr

023e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23e4f50:	b513      	push	{r0, r1, r4, lr}
 23e4f52:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23e4f54:	4608      	mov	r0, r1
 23e4f56:	9101      	str	r1, [sp, #4]
 23e4f58:	f7ff fa3e 	bl	23e43d8 <strlen>
 23e4f5c:	4602      	mov	r2, r0
 23e4f5e:	4620      	mov	r0, r4
 23e4f60:	9901      	ldr	r1, [sp, #4]
}
 23e4f62:	b002      	add	sp, #8
 23e4f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23e4f68:	f013 bb9e 	b.w	23f86a8 <_ZN5spark10JSONWriter5valueEPKcj>

023e4f6c <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 23e4f6c:	6803      	ldr	r3, [r0, #0]
 23e4f6e:	b2c9      	uxtb	r1, r1
 23e4f70:	689b      	ldr	r3, [r3, #8]
 23e4f72:	4718      	bx	r3

023e4f74 <_ZN5Print6printfEPKcz>:

    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 23e4f74:	b40e      	push	{r1, r2, r3}
 23e4f76:	b503      	push	{r0, r1, lr}
 23e4f78:	ab03      	add	r3, sp, #12
 23e4f7a:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 23e4f7e:	2100      	movs	r1, #0
        va_start(args, format);
 23e4f80:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 23e4f82:	f013 fdd2 	bl	23f8b2a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 23e4f86:	b002      	add	sp, #8
 23e4f88:	f85d eb04 	ldr.w	lr, [sp], #4
 23e4f8c:	b003      	add	sp, #12
 23e4f8e:	4770      	bx	lr

023e4f90 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 23e4f90:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23e4f92:	4604      	mov	r4, r0
  {
    if (default_ && clock_ == 0)
 23e4f94:	7922      	ldrb	r2, [r4, #4]
  virtual size_t printTo(Print& p) const
 23e4f96:	4608      	mov	r0, r1
    if (default_ && clock_ == 0)
 23e4f98:	68a3      	ldr	r3, [r4, #8]
 23e4f9a:	b132      	cbz	r2, 23e4faa <_ZNK8particle11SPISettings7printToER5Print+0x1a>
 23e4f9c:	b9a3      	cbnz	r3, 23e4fc8 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
 23e4f9e:	490b      	ldr	r1, [pc, #44]	; (23e4fcc <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
 23e4fa0:	b002      	add	sp, #8
 23e4fa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
 23e4fa6:	f013 bd81 	b.w	23f8aac <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 23e4faa:	4a09      	ldr	r2, [pc, #36]	; (23e4fd0 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
 23e4fac:	7b26      	ldrb	r6, [r4, #12]
 23e4fae:	4d09      	ldr	r5, [pc, #36]	; (23e4fd4 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
 23e4fb0:	4909      	ldr	r1, [pc, #36]	; (23e4fd8 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
 23e4fb2:	7b64      	ldrb	r4, [r4, #13]
 23e4fb4:	2e01      	cmp	r6, #1
 23e4fb6:	bf18      	it	ne
 23e4fb8:	4629      	movne	r1, r5
 23e4fba:	e9cd 1400 	strd	r1, r4, [sp]
 23e4fbe:	4907      	ldr	r1, [pc, #28]	; (23e4fdc <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
 23e4fc0:	f7ff ffd8 	bl	23e4f74 <_ZN5Print6printfEPKcz>
  }
 23e4fc4:	b002      	add	sp, #8
 23e4fc6:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 23e4fc8:	4a05      	ldr	r2, [pc, #20]	; (23e4fe0 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
 23e4fca:	e7ef      	b.n	23e4fac <_ZNK8particle11SPISettings7printToER5Print+0x1c>
 23e4fcc:	023fce19 	.word	0x023fce19
 23e4fd0:	023fe6d5 	.word	0x023fe6d5
 23e4fd4:	023fce15 	.word	0x023fce15
 23e4fd8:	023fce11 	.word	0x023fce11
 23e4fdc:	023fce2f 	.word	0x023fce2f
 23e4fe0:	023fce08 	.word	0x023fce08

023e4fe4 <_ZN5spark9WiFiClass11wifi_configEv>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
 23e4fe4:	2200      	movs	r2, #0
 23e4fe6:	6840      	ldr	r0, [r0, #4]
 23e4fe8:	4611      	mov	r1, r2
 23e4fea:	f012 b925 	b.w	23f7238 <network_config>

023e4fee <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 23e4fee:	2300      	movs	r3, #0
 23e4ff0:	6840      	ldr	r0, [r0, #4]
 23e4ff2:	461a      	mov	r2, r3
 23e4ff4:	4619      	mov	r1, r3
 23e4ff6:	f012 b965 	b.w	23f72c4 <network_on>

023e4ffa <_ZN5spark13CellularClass3offEv>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 23e4ffa:	2300      	movs	r3, #0
 23e4ffc:	6840      	ldr	r0, [r0, #4]
 23e4ffe:	461a      	mov	r2, r3
 23e5000:	4619      	mov	r1, r3
 23e5002:	f012 b96d 	b.w	23f72e0 <network_off>

023e5006 <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 23e5006:	2000      	movs	r0, #0
 23e5008:	f011 bc0e 	b.w	23f6828 <hal_timer_millis>

023e500c <_Z28raingauge1_interrupt_handlerv>:
 *  raingauge1_interrupt_handler() - This function is called whenever a magnet/interrupt is detected by the arduino
 * ======================================================================================================================
 */
#define RAINGAUGE1_IRQ_PIN A3
void raingauge1_interrupt_handler()
{
 23e500c:	b510      	push	{r4, lr}
  if ((System.millis() - raingauge1_interrupt_ltime) > 500) { // Count tip if a half second has gone by since last interrupt
 23e500e:	f7ff fffa 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23e5012:	4c0e      	ldr	r4, [pc, #56]	; (23e504c <_Z28raingauge1_interrupt_handlerv+0x40>)
 23e5014:	e9d4 3200 	ldrd	r3, r2, [r4]
 23e5018:	1ac0      	subs	r0, r0, r3
 23e501a:	f240 13f5 	movw	r3, #501	; 0x1f5
 23e501e:	eb61 0102 	sbc.w	r1, r1, r2
 23e5022:	4298      	cmp	r0, r3
 23e5024:	f171 0300 	sbcs.w	r3, r1, #0
 23e5028:	d30f      	bcc.n	23e504a <_Z28raingauge1_interrupt_handlerv+0x3e>
    raingauge1_interrupt_ltime = System.millis();
 23e502a:	f7ff ffec 	bl	23e5006 <_ZN11SystemClass6millisEv>
    raingauge1_interrupt_count++;
 23e502e:	4a08      	ldr	r2, [pc, #32]	; (23e5050 <_Z28raingauge1_interrupt_handlerv+0x44>)
    raingauge1_interrupt_ltime = System.millis();
 23e5030:	e9c4 0100 	strd	r0, r1, [r4]
    raingauge1_interrupt_count++;
 23e5034:	6813      	ldr	r3, [r2, #0]
    digitalWrite(LED_PIN, HIGH);
 23e5036:	2101      	movs	r1, #1
    raingauge1_interrupt_count++;
 23e5038:	3301      	adds	r3, #1
 23e503a:	6013      	str	r3, [r2, #0]
    digitalWrite(LED_PIN, HIGH);
 23e503c:	4b05      	ldr	r3, [pc, #20]	; (23e5054 <_Z28raingauge1_interrupt_handlerv+0x48>)
 23e503e:	8818      	ldrh	r0, [r3, #0]
 23e5040:	f014 fd0d 	bl	23f9a5e <digitalWrite>
    TurnLedOff = true;
 23e5044:	2201      	movs	r2, #1
 23e5046:	4b04      	ldr	r3, [pc, #16]	; (23e5058 <_Z28raingauge1_interrupt_handlerv+0x4c>)
 23e5048:	701a      	strb	r2, [r3, #0]
  }   
}
 23e504a:	bd10      	pop	{r4, pc}
 23e504c:	1007aa60 	.word	0x1007aa60
 23e5050:	1007aa5c 	.word	0x1007aa5c
 23e5054:	1006a0fc 	.word	0x1006a0fc
 23e5058:	1006a7e7 	.word	0x1006a7e7

023e505c <_Z28raingauge2_interrupt_handlerv>:
 *  raingauge2_interrupt_handler() - This function is called whenever a magnet/interrupt is detected by the arduino
 * ======================================================================================================================
 */
#define RAINGAUGE2_IRQ_PIN   A4
void raingauge2_interrupt_handler()
{
 23e505c:	b510      	push	{r4, lr}
  if ((System.millis() - raingauge2_interrupt_ltime) > 500) { // Count tip if a half second has gone by since last interrupt
 23e505e:	f7ff ffd2 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23e5062:	4c0e      	ldr	r4, [pc, #56]	; (23e509c <_Z28raingauge2_interrupt_handlerv+0x40>)
 23e5064:	e9d4 3200 	ldrd	r3, r2, [r4]
 23e5068:	1ac0      	subs	r0, r0, r3
 23e506a:	f240 13f5 	movw	r3, #501	; 0x1f5
 23e506e:	eb61 0102 	sbc.w	r1, r1, r2
 23e5072:	4298      	cmp	r0, r3
 23e5074:	f171 0300 	sbcs.w	r3, r1, #0
 23e5078:	d30f      	bcc.n	23e509a <_Z28raingauge2_interrupt_handlerv+0x3e>
    raingauge2_interrupt_ltime = System.millis();
 23e507a:	f7ff ffc4 	bl	23e5006 <_ZN11SystemClass6millisEv>
    raingauge2_interrupt_count++;
 23e507e:	4a08      	ldr	r2, [pc, #32]	; (23e50a0 <_Z28raingauge2_interrupt_handlerv+0x44>)
    raingauge2_interrupt_ltime = System.millis();
 23e5080:	e9c4 0100 	strd	r0, r1, [r4]
    raingauge2_interrupt_count++;
 23e5084:	6813      	ldr	r3, [r2, #0]
    digitalWrite(LED_PIN, HIGH);
 23e5086:	2101      	movs	r1, #1
    raingauge2_interrupt_count++;
 23e5088:	3301      	adds	r3, #1
 23e508a:	6013      	str	r3, [r2, #0]
    digitalWrite(LED_PIN, HIGH);
 23e508c:	4b05      	ldr	r3, [pc, #20]	; (23e50a4 <_Z28raingauge2_interrupt_handlerv+0x48>)
 23e508e:	8818      	ldrh	r0, [r3, #0]
 23e5090:	f014 fce5 	bl	23f9a5e <digitalWrite>
    TurnLedOff = true;
 23e5094:	2201      	movs	r2, #1
 23e5096:	4b04      	ldr	r3, [pc, #16]	; (23e50a8 <_Z28raingauge2_interrupt_handlerv+0x4c>)
 23e5098:	701a      	strb	r2, [r3, #0]
  }   
}
 23e509a:	bd10      	pop	{r4, pc}
 23e509c:	1007aa78 	.word	0x1007aa78
 23e50a0:	1007aa70 	.word	0x1007aa70
 23e50a4:	1006a0fc 	.word	0x1006a0fc
 23e50a8:	1006a7e7 	.word	0x1006a7e7

023e50ac <_ZN8particle13WatchdogClass11getInstanceEv>:
    static WatchdogClass& getInstance() {
 23e50ac:	b538      	push	{r3, r4, r5, lr}
        static WatchdogClass watchdog;
 23e50ae:	4d0a      	ldr	r5, [pc, #40]	; (23e50d8 <_ZN8particle13WatchdogClass11getInstanceEv+0x2c>)
 23e50b0:	e8d5 4f8f 	ldab	r4, [r5]
 23e50b4:	f014 0401 	ands.w	r4, r4, #1
 23e50b8:	d10c      	bne.n	23e50d4 <_ZN8particle13WatchdogClass11getInstanceEv+0x28>
 23e50ba:	4628      	mov	r0, r5
 23e50bc:	f012 fa98 	bl	23f75f0 <__cxa_guard_acquire>
 23e50c0:	b140      	cbz	r0, 23e50d4 <_ZN8particle13WatchdogClass11getInstanceEv+0x28>
    _Function_base() : _M_manager(nullptr) { }
 23e50c2:	4b06      	ldr	r3, [pc, #24]	; (23e50dc <_ZN8particle13WatchdogClass11getInstanceEv+0x30>)
 23e50c4:	4628      	mov	r0, r5
 23e50c6:	609c      	str	r4, [r3, #8]
    }

private:
    WatchdogClass()
            : callback_(nullptr),
              instance_(HAL_WATCHDOG_INSTANCE1) {
 23e50c8:	741c      	strb	r4, [r3, #16]
        static WatchdogClass watchdog;
 23e50ca:	f012 fa9f 	bl	23f760c <__cxa_guard_release>
 23e50ce:	4804      	ldr	r0, [pc, #16]	; (23e50e0 <_ZN8particle13WatchdogClass11getInstanceEv+0x34>)
 23e50d0:	f017 fac8 	bl	23fc664 <atexit>
    }
 23e50d4:	4801      	ldr	r0, [pc, #4]	; (23e50dc <_ZN8particle13WatchdogClass11getInstanceEv+0x30>)
 23e50d6:	bd38      	pop	{r3, r4, r5, pc}
 23e50d8:	1006a244 	.word	0x1006a244
 23e50dc:	1006a248 	.word	0x1006a248
 23e50e0:	023e4eb1 	.word	0x023e4eb1

023e50e4 <_ZN5spark10JSONWriter4nameEPKc>:
inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
 23e50e4:	b513      	push	{r0, r1, r4, lr}
 23e50e6:	4604      	mov	r4, r0
    return this->name(name, strlen(name));
 23e50e8:	4608      	mov	r0, r1
 23e50ea:	9101      	str	r1, [sp, #4]
 23e50ec:	f7ff f974 	bl	23e43d8 <strlen>
 23e50f0:	4602      	mov	r2, r0
 23e50f2:	4620      	mov	r0, r4
 23e50f4:	9901      	ldr	r1, [sp, #4]
}
 23e50f6:	b002      	add	sp, #8
 23e50f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->name(name, strlen(name));
 23e50fc:	f013 bac4 	b.w	23f8688 <_ZN5spark10JSONWriter4nameEPKcj>

023e5100 <_ZN8FsVolume6existsEPKc>:
   *
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
 23e5100:	b500      	push	{lr}
 23e5102:	460a      	mov	r2, r1
    return m_fVol   ? m_fVol->exists(path)
 23e5104:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
  bool exists(const char* path) {
 23e5108:	b08f      	sub	sp, #60	; 0x3c
    return m_fVol   ? m_fVol->exists(path)
 23e510a:	b149      	cbz	r1, 23e5120 <_ZN8FsVolume6existsEPKc+0x20>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
 23e510c:	2300      	movs	r3, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
 23e510e:	4668      	mov	r0, sp
 23e5110:	9300      	str	r3, [sp, #0]
 23e5112:	f00d ff10 	bl	23f2f36 <_ZN7FatFile4openEP9FatVolumePKci>
           : m_xVol ? m_xVol->exists(path)
                    : false;
  }
 23e5116:	f000 0001 	and.w	r0, r0, #1
 23e511a:	b00f      	add	sp, #60	; 0x3c
 23e511c:	f85d fb04 	ldr.w	pc, [sp], #4
           : m_xVol ? m_xVol->exists(path)
 23e5120:	f8d0 0484 	ldr.w	r0, [r0, #1156]	; 0x484
 23e5124:	2800      	cmp	r0, #0
 23e5126:	d0f6      	beq.n	23e5116 <_ZN8FsVolume6existsEPKc+0x16>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
 23e5128:	460b      	mov	r3, r1
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
 23e512a:	910c      	str	r1, [sp, #48]	; 0x30
 23e512c:	4601      	mov	r1, r0
 23e512e:	4668      	mov	r0, sp
 23e5130:	f00f fcce 	bl	23f4ad0 <_ZN9ExFatFile4openEP11ExFatVolumePKci>
 23e5134:	e7ef      	b.n	23e5116 <_ZN8FsVolume6existsEPKc+0x16>

023e5136 <_ZN8FsVolume6removeEPKc>:
   *
   * \param[in] path A path with a valid 8.3 DOS name for the file.
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
 23e5136:	b500      	push	{lr}
 23e5138:	460a      	mov	r2, r1
    return m_fVol   ? m_fVol->remove(path)
 23e513a:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
  bool remove(const char* path) {
 23e513e:	b08f      	sub	sp, #60	; 0x3c
    return m_fVol   ? m_fVol->remove(path)
 23e5140:	b171      	cbz	r1, 23e5160 <_ZN8FsVolume6removeEPKc+0x2a>
 23e5142:	2300      	movs	r3, #0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
 23e5144:	4668      	mov	r0, sp
 23e5146:	9300      	str	r3, [sp, #0]
 23e5148:	2301      	movs	r3, #1
 23e514a:	f00d fef4 	bl	23f2f36 <_ZN7FatFile4openEP9FatVolumePKci>
 23e514e:	b110      	cbz	r0, 23e5156 <_ZN8FsVolume6removeEPKc+0x20>
 23e5150:	4668      	mov	r0, sp
 23e5152:	f00e fbad 	bl	23f38b0 <_ZN7FatFile6removeEv>
           : m_xVol ? m_xVol->remove(path)
                    : false;
  }
 23e5156:	f000 0001 	and.w	r0, r0, #1
 23e515a:	b00f      	add	sp, #60	; 0x3c
 23e515c:	f85d fb04 	ldr.w	pc, [sp], #4
           : m_xVol ? m_xVol->remove(path)
 23e5160:	f8d0 0484 	ldr.w	r0, [r0, #1156]	; 0x484
 23e5164:	2800      	cmp	r0, #0
 23e5166:	d0f6      	beq.n	23e5156 <_ZN8FsVolume6removeEPKc+0x20>
 23e5168:	910c      	str	r1, [sp, #48]	; 0x30
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
 23e516a:	2301      	movs	r3, #1
 23e516c:	4601      	mov	r1, r0
 23e516e:	4668      	mov	r0, sp
 23e5170:	f00f fcae 	bl	23f4ad0 <_ZN9ExFatFile4openEP11ExFatVolumePKci>
 23e5174:	2800      	cmp	r0, #0
 23e5176:	d0ee      	beq.n	23e5156 <_ZN8FsVolume6removeEPKc+0x20>
 23e5178:	4668      	mov	r0, sp
 23e517a:	f00f fd23 	bl	23f4bc4 <_ZN9ExFatFile6removeEv>
 23e517e:	e7ea      	b.n	23e5156 <_ZN8FsVolume6removeEPKc+0x20>

023e5180 <_ZNK10FsBaseFile9availableEv>:
  int available() const {
 23e5180:	b510      	push	{r4, lr}
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
 23e5182:	6b83      	ldr	r3, [r0, #56]	; 0x38
 23e5184:	b15b      	cbz	r3, 23e519e <_ZNK10FsBaseFile9availableEv+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
 23e5186:	7818      	ldrb	r0, [r3, #0]
 23e5188:	f010 0008 	ands.w	r0, r0, #8
 23e518c:	bf1e      	ittt	ne
 23e518e:	69d8      	ldrne	r0, [r3, #28]
 23e5190:	695b      	ldrne	r3, [r3, #20]
 23e5192:	1ac0      	subne	r0, r0, r3
    return n > INT_MAX ? INT_MAX : n;
 23e5194:	2800      	cmp	r0, #0
 23e5196:	bfb8      	it	lt
 23e5198:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
  }
 23e519c:	bd10      	pop	{r4, pc}
 23e519e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
 23e51a0:	2800      	cmp	r0, #0
 23e51a2:	d0fb      	beq.n	23e519c <_ZNK10FsBaseFile9availableEv+0x1c>
    return n > INT_MAX ? INT_MAX : n;
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
 23e51a4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 23e51a8:	f013 0308 	ands.w	r3, r3, #8
 23e51ac:	d00e      	beq.n	23e51cc <_ZNK10FsBaseFile9availableEv+0x4c>
 23e51ae:	e9d0 1304 	ldrd	r1, r3, [r0, #16]
 23e51b2:	e9d0 2400 	ldrd	r2, r4, [r0]
 23e51b6:	1a88      	subs	r0, r1, r2
 23e51b8:	eb63 0304 	sbc.w	r3, r3, r4
    return n > INT_MAX ? INT_MAX : n;
 23e51bc:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 23e51c0:	f173 0300 	sbcs.w	r3, r3, #0
 23e51c4:	bf28      	it	cs
 23e51c6:	f06f 4000 	mvncs.w	r0, #2147483648	; 0x80000000
 23e51ca:	e7e7      	b.n	23e519c <_ZNK10FsBaseFile9availableEv+0x1c>
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
 23e51cc:	4618      	mov	r0, r3
 23e51ce:	e7f5      	b.n	23e51bc <_ZNK10FsBaseFile9availableEv+0x3c>

023e51d0 <_ZN10StreamFileI10FsBaseFileyE9availableEv>:
  int available() override { return BaseFile::available(); }
 23e51d0:	b508      	push	{r3, lr}
 23e51d2:	3010      	adds	r0, #16
 23e51d4:	f7ff ffd4 	bl	23e5180 <_ZNK10FsBaseFile9availableEv>
 23e51d8:	bd08      	pop	{r3, pc}

023e51da <_ZNK10FsBaseFile8fileSizeEv>:
    return m_fFile ? m_fFile->fileSize() : m_xFile ? m_xFile->fileSize() : 0;
 23e51da:	6b83      	ldr	r3, [r0, #56]	; 0x38
 23e51dc:	b113      	cbz	r3, 23e51e4 <_ZNK10FsBaseFile8fileSizeEv+0xa>
 23e51de:	69d8      	ldr	r0, [r3, #28]
 23e51e0:	2100      	movs	r1, #0
 23e51e2:	4770      	bx	lr
 23e51e4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 23e51e6:	b113      	cbz	r3, 23e51ee <_ZNK10FsBaseFile8fileSizeEv+0x14>
   * If no data is read, fgets() returns zero for EOF or -1 if an error
   * occurred.
   */
  int fgets(char* str, int num, const char* delim = nullptr);
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const { return m_validLength; }
 23e51e8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 23e51ec:	4770      	bx	lr
 23e51ee:	4618      	mov	r0, r3
 23e51f0:	e7f6      	b.n	23e51e0 <_ZNK10FsBaseFile8fileSizeEv+0x6>

023e51f2 <_ZNK10FsBaseFile6isOpenEv>:
  bool isOpen() const { return m_fFile || m_xFile; }
 23e51f2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 23e51f4:	b923      	cbnz	r3, 23e5200 <_ZNK10FsBaseFile6isOpenEv+0xe>
 23e51f6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 23e51f8:	3800      	subs	r0, #0
 23e51fa:	bf18      	it	ne
 23e51fc:	2001      	movne	r0, #1
 23e51fe:	4770      	bx	lr
 23e5200:	2001      	movs	r0, #1
 23e5202:	4770      	bx	lr

023e5204 <_ZN10FsBaseFile4readEv>:
  int read() {
 23e5204:	b507      	push	{r0, r1, r2, lr}
    return m_fFile   ? m_fFile->read(buf, count)
 23e5206:	6b83      	ldr	r3, [r0, #56]	; 0x38
 23e5208:	b153      	cbz	r3, 23e5220 <_ZN10FsBaseFile4readEv+0x1c>
 23e520a:	2201      	movs	r2, #1
 23e520c:	4618      	mov	r0, r3
 23e520e:	f10d 0107 	add.w	r1, sp, #7
 23e5212:	f00d fc4f 	bl	23f2ab4 <_ZN7FatFile4readEPvj>
    return read(&b, 1) == 1 ? b : -1;
 23e5216:	2801      	cmp	r0, #1
 23e5218:	d104      	bne.n	23e5224 <_ZN10FsBaseFile4readEv+0x20>
 23e521a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 23e521e:	e003      	b.n	23e5228 <_ZN10FsBaseFile4readEv+0x24>
 23e5220:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
           : m_xFile ? m_xFile->read(buf, count)
 23e5222:	b920      	cbnz	r0, 23e522e <_ZN10FsBaseFile4readEv+0x2a>
    return read(&b, 1) == 1 ? b : -1;
 23e5224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
 23e5228:	b003      	add	sp, #12
 23e522a:	f85d fb04 	ldr.w	pc, [sp], #4
           : m_xFile ? m_xFile->read(buf, count)
 23e522e:	2201      	movs	r2, #1
 23e5230:	f10d 0107 	add.w	r1, sp, #7
 23e5234:	f00f f8fe 	bl	23f4434 <_ZN9ExFatFile4readEPvj>
 23e5238:	e7ed      	b.n	23e5216 <_ZN10FsBaseFile4readEv+0x12>

023e523a <_ZN10StreamFileI10FsBaseFileyE4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() override { return BaseFile::read(); }
 23e523a:	b508      	push	{r3, lr}
 23e523c:	3010      	adds	r0, #16
 23e523e:	f7ff ffe1 	bl	23e5204 <_ZN10FsBaseFile4readEv>
 23e5242:	bd08      	pop	{r3, pc}

023e5244 <_ZN10FsBaseFile5writeEPKvj>:
    return m_fFile   ? m_fFile->write(buf, count)
 23e5244:	6b83      	ldr	r3, [r0, #56]	; 0x38
 23e5246:	b113      	cbz	r3, 23e524e <_ZN10FsBaseFile5writeEPKvj+0xa>
 23e5248:	4618      	mov	r0, r3
 23e524a:	f00d bf3f 	b.w	23f30cc <_ZN7FatFile5writeEPKvj>
 23e524e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
           : m_xFile ? m_xFile->write(buf, count)
 23e5250:	b108      	cbz	r0, 23e5256 <_ZN10FsBaseFile5writeEPKvj+0x12>
 23e5252:	f00f becd 	b.w	23f4ff0 <_ZN9ExFatFile5writeEPKvj>
  }
 23e5256:	4770      	bx	lr

023e5258 <_ZN10StreamFileI10FsBaseFileyE5writeEPKhj>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) override {
 23e5258:	b508      	push	{r3, lr}
    return BaseFile::write(buffer, size);
 23e525a:	3010      	adds	r0, #16
 23e525c:	f7ff fff2 	bl	23e5244 <_ZN10FsBaseFile5writeEPKvj>
  }
 23e5260:	bd08      	pop	{r3, pc}

023e5262 <_ZN10StreamFileI10FsBaseFileyE5writeEh>:
  size_t write(uint8_t b) override { return BaseFile::write(b); }
 23e5262:	b507      	push	{r0, r1, r2, lr}
  size_t write(uint8_t b) { return write(&b, 1); }
 23e5264:	2201      	movs	r2, #1
 23e5266:	f88d 1007 	strb.w	r1, [sp, #7]
 23e526a:	3010      	adds	r0, #16
 23e526c:	f10d 0107 	add.w	r1, sp, #7
 23e5270:	f7ff ffe8 	bl	23e5244 <_ZN10FsBaseFile5writeEPKvj>
 23e5274:	b003      	add	sp, #12
 23e5276:	f85d fb04 	ldr.w	pc, [sp], #4

023e527a <_Z16I2C_Device_Existh>:
 * 
 *  The i2c_scanner uses the return value of the Write.endTransmisstion to see 
 *  if a device did acknowledge to the address.
 *=======================================================================================================================
 */
bool I2C_Device_Exist(byte address) {
 23e527a:	b507      	push	{r0, r1, r2, lr}
 23e527c:	9001      	str	r0, [sp, #4]
  byte error;

  Wire.begin();                     // Connect to I2C as Master (no addess is passed to signal being a slave)
 23e527e:	f014 fc61 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e5282:	f012 ff95 	bl	23f81b0 <_ZN7TwoWire5beginEv>

  Wire.beginTransmission(address);  // Begin a transmission to the I2C slave device with the given address. 
 23e5286:	f014 fc5d 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e528a:	9901      	ldr	r1, [sp, #4]
 23e528c:	f012 ffba 	bl	23f8204 <_ZN7TwoWire17beginTransmissionEh>
                                    // Subsequently, queue bytes for transmission with the write() function 
                                    // and transmit them by calling endTransmission(). 

  error = Wire.endTransmission();   // Ends a transmission to a slave device that was begun by beginTransmission() 
 23e5290:	f014 fc58 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e5294:	f012 ffc1 	bl	23f821a <_ZN7TwoWire15endTransmissionEv>
  else {
    // sprintf (msgbuf, "I2CERR: %d", error);
    // Output (msgbuf);
    return (false);
  }
}
 23e5298:	fab0 f080 	clz	r0, r0
 23e529c:	0940      	lsrs	r0, r0, #5
 23e529e:	b003      	add	sp, #12
 23e52a0:	f85d fb04 	ldr.w	pc, [sp], #4

023e52a4 <_Z5Blinkii>:
 * ======================================================================================================================
 * Blink() - Count, delay between, delay at end
 * ======================================================================================================================
 */
void Blink(int count, int between)
{
 23e52a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23e52a6:	4606      	mov	r6, r0
 23e52a8:	460c      	mov	r4, r1
  int c;

  for (c=0; c<count; c++) {
 23e52aa:	2500      	movs	r5, #0
    digitalWrite(LED_PIN, HIGH);
 23e52ac:	4f09      	ldr	r7, [pc, #36]	; (23e52d4 <_Z5Blinkii+0x30>)
  for (c=0; c<count; c++) {
 23e52ae:	42b5      	cmp	r5, r6
 23e52b0:	da0f      	bge.n	23e52d2 <_Z5Blinkii+0x2e>
    digitalWrite(LED_PIN, HIGH);
 23e52b2:	2101      	movs	r1, #1
 23e52b4:	8838      	ldrh	r0, [r7, #0]
 23e52b6:	f014 fbd2 	bl	23f9a5e <digitalWrite>
    delay(between);
 23e52ba:	4620      	mov	r0, r4
 23e52bc:	f012 f9b4 	bl	23f7628 <delay>
    digitalWrite(LED_PIN, LOW);
 23e52c0:	2100      	movs	r1, #0
 23e52c2:	8838      	ldrh	r0, [r7, #0]
 23e52c4:	f014 fbcb 	bl	23f9a5e <digitalWrite>
    delay(between);
 23e52c8:	4620      	mov	r0, r4
 23e52ca:	f012 f9ad 	bl	23f7628 <delay>
  for (c=0; c<count; c++) {
 23e52ce:	3501      	adds	r5, #1
 23e52d0:	e7ed      	b.n	23e52ae <_Z5Blinkii+0xa>
  }
}
 23e52d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23e52d4:	1006a0fc 	.word	0x1006a0fc

023e52d8 <_Z6mysortPjj>:
/*
 * ======================================================================================================================
 * mysort()
 * ======================================================================================================================
 */
void mysort(unsigned int a[], unsigned int n) { 
 23e52d8:	b530      	push	{r4, r5, lr}
  unsigned int i, j;

  for(i = 0;i < n-1;i++) {
 23e52da:	3901      	subs	r1, #1
 23e52dc:	b169      	cbz	r1, 23e52fa <_Z6mysortPjj+0x22>
 23e52de:	4603      	mov	r3, r0
    for(j = 0;j < n-i-1;j++) {
 23e52e0:	2200      	movs	r2, #0
      if(a[j] > a[j+1])
 23e52e2:	681c      	ldr	r4, [r3, #0]
 23e52e4:	685d      	ldr	r5, [r3, #4]
 23e52e6:	3201      	adds	r2, #1
 23e52e8:	42ac      	cmp	r4, r5
 23e52ea:	d901      	bls.n	23e52f0 <_Z6mysortPjj+0x18>
  *q=t;
 23e52ec:	e9c3 5400 	strd	r5, r4, [r3]
    for(j = 0;j < n-i-1;j++) {
 23e52f0:	428a      	cmp	r2, r1
 23e52f2:	f103 0304 	add.w	r3, r3, #4
 23e52f6:	d3f4      	bcc.n	23e52e2 <_Z6mysortPjj+0xa>
 23e52f8:	e7ef      	b.n	23e52da <_Z6mysortPjj+0x2>
        myswap(&a[j],&a[j+1]);
    }
  }
}
 23e52fa:	bd30      	pop	{r4, r5, pc}

023e52fc <_Z13JPO_ClearBitsv>:
 * ======================================================================================================================
 * JPO_ClearBits() - Clear System Status Bits related to initialization
 * ======================================================================================================================
 */
void JPO_ClearBits() {
  if (JustPoweredOn) {
 23e52fc:	4b08      	ldr	r3, [pc, #32]	; (23e5320 <_Z13JPO_ClearBitsv+0x24>)
 23e52fe:	781a      	ldrb	r2, [r3, #0]
 23e5300:	b162      	cbz	r2, 23e531c <_Z13JPO_ClearBitsv+0x20>
    JustPoweredOn = false;
 23e5302:	2200      	movs	r2, #0
 23e5304:	701a      	strb	r2, [r3, #0]
    SystemStatusBits &= ~SSB_BLX;     // Turn Off BLUX30 Not Found Bit
    SystemStatusBits &= ~SSB_LPS_1;   // Turn Off LPS35HW Not Found Bit
    SystemStatusBits &= ~SSB_LPS_2;   // Turn Off LPS35HW Not Found Bit
    SystemStatusBits &= ~SSB_TLW;     // Turn Off Tinovi Leaf Wetness Not Found Bit
    SystemStatusBits &= ~SSB_TSM;     // Turn Off Tinovi Soil Moisture Not Found Bit
    SystemStatusBits &= ~SSB_TMSM;    // Turn Off Tinovi MultiLevel Soil Moisture Not Found Bit
 23e5306:	4a07      	ldr	r2, [pc, #28]	; (23e5324 <_Z13JPO_ClearBitsv+0x28>)
 23e5308:	6813      	ldr	r3, [r2, #0]
 23e530a:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 23e530e:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 23e5312:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
 23e5316:	f023 0309 	bic.w	r3, r3, #9
 23e531a:	6013      	str	r3, [r2, #0]
  }
}
 23e531c:	4770      	bx	lr
 23e531e:	bf00      	nop
 23e5320:	1006a0fa 	.word	0x1006a0fa
 23e5324:	1006a178 	.word	0x1006a178

023e5328 <_Z17OLED_sleepDisplayv>:
 * ======================================================================================================================
 * OLED_sleepDisplay()
 * ======================================================================================================================
 */
void OLED_sleepDisplay() {
  if (DisplayEnabled) {
 23e5328:	4b06      	ldr	r3, [pc, #24]	; (23e5344 <_Z17OLED_sleepDisplayv+0x1c>)
 23e532a:	781b      	ldrb	r3, [r3, #0]
 23e532c:	b143      	cbz	r3, 23e5340 <_Z17OLED_sleepDisplayv+0x18>
    if (OLED32) {
 23e532e:	4b06      	ldr	r3, [pc, #24]	; (23e5348 <_Z17OLED_sleepDisplayv+0x20>)
      display32.ssd1306_command(SSD1306_DISPLAYOFF);
 23e5330:	21ae      	movs	r1, #174	; 0xae
    if (OLED32) {
 23e5332:	681b      	ldr	r3, [r3, #0]
 23e5334:	2b3c      	cmp	r3, #60	; 0x3c
      display32.ssd1306_command(SSD1306_DISPLAYOFF);
 23e5336:	bf0c      	ite	eq
 23e5338:	4804      	ldreq	r0, [pc, #16]	; (23e534c <_Z17OLED_sleepDisplayv+0x24>)
    }
    else {
      display64.ssd1306_command(SSD1306_DISPLAYOFF);
 23e533a:	4805      	ldrne	r0, [pc, #20]	; (23e5350 <_Z17OLED_sleepDisplayv+0x28>)
 23e533c:	f00b bf83 	b.w	23f1246 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    }
  }
}
 23e5340:	4770      	bx	lr
 23e5342:	bf00      	nop
 23e5344:	1006a0f9 	.word	0x1006a0f9
 23e5348:	1007aa20 	.word	0x1007aa20
 23e534c:	1006ad74 	.word	0x1006ad74
 23e5350:	1006ade8 	.word	0x1006ade8

023e5354 <_Z16OLED_wakeDisplayv>:
 * ======================================================================================================================
 * OLED_wakeDisplay()
 * ======================================================================================================================
 */
void OLED_wakeDisplay() {
  if (DisplayEnabled) {
 23e5354:	4b06      	ldr	r3, [pc, #24]	; (23e5370 <_Z16OLED_wakeDisplayv+0x1c>)
 23e5356:	781b      	ldrb	r3, [r3, #0]
 23e5358:	b143      	cbz	r3, 23e536c <_Z16OLED_wakeDisplayv+0x18>
    if (OLED32) {
 23e535a:	4b06      	ldr	r3, [pc, #24]	; (23e5374 <_Z16OLED_wakeDisplayv+0x20>)
      display32.ssd1306_command(SSD1306_DISPLAYON);
 23e535c:	21af      	movs	r1, #175	; 0xaf
    if (OLED32) {
 23e535e:	681b      	ldr	r3, [r3, #0]
 23e5360:	2b3c      	cmp	r3, #60	; 0x3c
      display32.ssd1306_command(SSD1306_DISPLAYON);
 23e5362:	bf0c      	ite	eq
 23e5364:	4804      	ldreq	r0, [pc, #16]	; (23e5378 <_Z16OLED_wakeDisplayv+0x24>)
    }
    else {
      display64.ssd1306_command(SSD1306_DISPLAYON);
 23e5366:	4805      	ldrne	r0, [pc, #20]	; (23e537c <_Z16OLED_wakeDisplayv+0x28>)
 23e5368:	f00b bf6d 	b.w	23f1246 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    }
  }
}
 23e536c:	4770      	bx	lr
 23e536e:	bf00      	nop
 23e5370:	1006a0f9 	.word	0x1006a0f9
 23e5374:	1007aa20 	.word	0x1007aa20
 23e5378:	1006ad74 	.word	0x1006ad74
 23e537c:	1006ade8 	.word	0x1006ade8

023e5380 <_Z9OLED_spinv>:
/*
 * ======================================================================================================================
 * OLED_spin() 
 * ======================================================================================================================
 */
void OLED_spin() {
 23e5380:	b570      	push	{r4, r5, r6, lr}
  static int spin=0;
    
  if (DisplayEnabled) {
 23e5382:	4b24      	ldr	r3, [pc, #144]	; (23e5414 <_Z9OLED_spinv+0x94>)
 23e5384:	781b      	ldrb	r3, [r3, #0]
 23e5386:	2b00      	cmp	r3, #0
 23e5388:	d038      	beq.n	23e53fc <_Z9OLED_spinv+0x7c>
    if (OLED32) {
 23e538a:	4e23      	ldr	r6, [pc, #140]	; (23e5418 <_Z9OLED_spinv+0x98>)
 23e538c:	4d23      	ldr	r5, [pc, #140]	; (23e541c <_Z9OLED_spinv+0x9c>)
 23e538e:	6833      	ldr	r3, [r6, #0]
 23e5390:	2b3c      	cmp	r3, #60	; 0x3c
 23e5392:	f04f 0301 	mov.w	r3, #1
 23e5396:	d112      	bne.n	23e53be <_Z9OLED_spinv+0x3e>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
 23e5398:	4c21      	ldr	r4, [pc, #132]	; (23e5420 <_Z9OLED_spinv+0xa0>)
    @param   c   16-bit 5-6-5 Color to draw text with
    @param   bg  16-bit 5-6-5 Color to draw background/fill with
  */
  /**********************************************************************/
  void setTextColor(uint16_t c, uint16_t bg) {
    textcolor = c;
 23e539a:	e9c4 5304 	strd	r5, r3, [r4, #16]
      display64.setTextColor(WHITE, BLACK); // Draw 'inverse' text
      display64.setCursor(120,24);
      display64.print(" ");
      display64.setCursor(120,24);
      display64.setCursor(120,56);
      display64.print(" ");
 23e539e:	4620      	mov	r0, r4
 23e53a0:	4920      	ldr	r1, [pc, #128]	; (23e5424 <_Z9OLED_spinv+0xa4>)
 23e53a2:	f013 fb83 	bl	23f8aac <_ZN5Print5printEPKc>
    cursor_x = x;
 23e53a6:	6125      	str	r5, [r4, #16]
      display64.setCursor(120,56);       
    } 
    switch (spin++) {
 23e53a8:	4c1f      	ldr	r4, [pc, #124]	; (23e5428 <_Z9OLED_spinv+0xa8>)
 23e53aa:	6822      	ldr	r2, [r4, #0]
 23e53ac:	1c53      	adds	r3, r2, #1
 23e53ae:	6023      	str	r3, [r4, #0]
 23e53b0:	4b1e      	ldr	r3, [pc, #120]	; (23e542c <_Z9OLED_spinv+0xac>)
 23e53b2:	2a03      	cmp	r2, #3
 23e53b4:	d80f      	bhi.n	23e53d6 <_Z9OLED_spinv+0x56>
 23e53b6:	e8df f002 	tbb	[pc, r2]
 23e53ba:	220c      	.short	0x220c
 23e53bc:	2624      	.short	0x2624
 23e53be:	4c1c      	ldr	r4, [pc, #112]	; (23e5430 <_Z9OLED_spinv+0xb0>)
      display64.print(" ");
 23e53c0:	4918      	ldr	r1, [pc, #96]	; (23e5424 <_Z9OLED_spinv+0xa4>)
    textcolor = c;
 23e53c2:	e9c4 5304 	strd	r5, r3, [r4, #16]
    cursor_x = x;
 23e53c6:	4d1b      	ldr	r5, [pc, #108]	; (23e5434 <_Z9OLED_spinv+0xb4>)
 23e53c8:	4620      	mov	r0, r4
 23e53ca:	f013 fb6f 	bl	23f8aac <_ZN5Print5printEPKc>
 23e53ce:	6125      	str	r5, [r4, #16]
 23e53d0:	e7e5      	b.n	23e539e <_Z9OLED_spinv+0x1e>
      case 0 : msgp = (char *) "|"; break;
 23e53d2:	4a19      	ldr	r2, [pc, #100]	; (23e5438 <_Z9OLED_spinv+0xb8>)
      case 1 : msgp = (char *) "/"; break;
      case 2 : msgp = (char *) "-"; break;
      case 3 : msgp = (char *) "\\"; break;
 23e53d4:	601a      	str	r2, [r3, #0]
    }
    if (OLED32) {
      display32.print(msgp);
 23e53d6:	6819      	ldr	r1, [r3, #0]
    if (OLED32) {
 23e53d8:	6833      	ldr	r3, [r6, #0]
 23e53da:	2b3c      	cmp	r3, #60	; 0x3c
 23e53dc:	d115      	bne.n	23e540a <_Z9OLED_spinv+0x8a>
      display32.print(msgp);
 23e53de:	4810      	ldr	r0, [pc, #64]	; (23e5420 <_Z9OLED_spinv+0xa0>)
 23e53e0:	f013 fb64 	bl	23f8aac <_ZN5Print5printEPKc>
      display32.display();
 23e53e4:	480e      	ldr	r0, [pc, #56]	; (23e5420 <_Z9OLED_spinv+0xa0>)
    }
    else {
      display64.print(msgp);
      display64.display();
 23e53e6:	f00c fa25 	bl	23f1834 <_ZN16Adafruit_SSD13067displayEv>
    }
    spin %= 4;
 23e53ea:	6823      	ldr	r3, [r4, #0]
 23e53ec:	425a      	negs	r2, r3
 23e53ee:	f002 0203 	and.w	r2, r2, #3
 23e53f2:	f003 0303 	and.w	r3, r3, #3
 23e53f6:	bf58      	it	pl
 23e53f8:	4253      	negpl	r3, r2
 23e53fa:	6023      	str	r3, [r4, #0]
  }
}
 23e53fc:	bd70      	pop	{r4, r5, r6, pc}
      case 1 : msgp = (char *) "/"; break;
 23e53fe:	4a0f      	ldr	r2, [pc, #60]	; (23e543c <_Z9OLED_spinv+0xbc>)
 23e5400:	e7e8      	b.n	23e53d4 <_Z9OLED_spinv+0x54>
      case 2 : msgp = (char *) "-"; break;
 23e5402:	4a0f      	ldr	r2, [pc, #60]	; (23e5440 <_Z9OLED_spinv+0xc0>)
 23e5404:	e7e6      	b.n	23e53d4 <_Z9OLED_spinv+0x54>
      case 3 : msgp = (char *) "\\"; break;
 23e5406:	4a0f      	ldr	r2, [pc, #60]	; (23e5444 <_Z9OLED_spinv+0xc4>)
 23e5408:	e7e4      	b.n	23e53d4 <_Z9OLED_spinv+0x54>
      display64.print(msgp);
 23e540a:	4809      	ldr	r0, [pc, #36]	; (23e5430 <_Z9OLED_spinv+0xb0>)
 23e540c:	f013 fb4e 	bl	23f8aac <_ZN5Print5printEPKc>
      display64.display();
 23e5410:	4807      	ldr	r0, [pc, #28]	; (23e5430 <_Z9OLED_spinv+0xb0>)
 23e5412:	e7e8      	b.n	23e53e6 <_Z9OLED_spinv+0x66>
 23e5414:	1006a0f9 	.word	0x1006a0f9
 23e5418:	1007aa20 	.word	0x1007aa20
 23e541c:	00180078 	.word	0x00180078
 23e5420:	1006ad74 	.word	0x1006ad74
 23e5424:	023fd71e 	.word	0x023fd71e
 23e5428:	1006a7ec 	.word	0x1006a7ec
 23e542c:	1006f528 	.word	0x1006f528
 23e5430:	1006ade8 	.word	0x1006ade8
 23e5434:	00380078 	.word	0x00380078
 23e5438:	023fce4c 	.word	0x023fce4c
 23e543c:	023fce4e 	.word	0x023fce4e
 23e5440:	023fce50 	.word	0x023fce50
 23e5444:	023fce52 	.word	0x023fce52

023e5448 <_Z11OLED_updatev>:
/*
 * ======================================================================================================================
 * OLED_update() -- Output oled in memory map to display
 * ======================================================================================================================
 */
void OLED_update() {  
 23e5448:	b538      	push	{r3, r4, r5, lr}
  if (DisplayEnabled) {
 23e544a:	4b32      	ldr	r3, [pc, #200]	; (23e5514 <_Z11OLED_updatev+0xcc>)
 23e544c:	781b      	ldrb	r3, [r3, #0]
 23e544e:	2b00      	cmp	r3, #0
 23e5450:	d05f      	beq.n	23e5512 <_Z11OLED_updatev+0xca>
    if (OLED32) {
 23e5452:	4b31      	ldr	r3, [pc, #196]	; (23e5518 <_Z11OLED_updatev+0xd0>)
 23e5454:	2500      	movs	r5, #0
 23e5456:	681b      	ldr	r3, [r3, #0]
 23e5458:	2b3c      	cmp	r3, #60	; 0x3c
 23e545a:	d122      	bne.n	23e54a2 <_Z11OLED_updatev+0x5a>
      display32.clearDisplay();
 23e545c:	4c2f      	ldr	r4, [pc, #188]	; (23e551c <_Z11OLED_updatev+0xd4>)
 23e545e:	4620      	mov	r0, r4
 23e5460:	f00b ff1d 	bl	23f129e <_ZN16Adafruit_SSD130612clearDisplayEv>
      display32.setCursor(0,0);             // Start at top-left corner
      display32.print(oled_lines [0]);
 23e5464:	492e      	ldr	r1, [pc, #184]	; (23e5520 <_Z11OLED_updatev+0xd8>)
 23e5466:	4620      	mov	r0, r4
 23e5468:	6125      	str	r5, [r4, #16]
 23e546a:	f013 fb1f 	bl	23f8aac <_ZN5Print5printEPKc>
 23e546e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
      display32.setCursor(0,8);
      display32.print(oled_lines [1]);
 23e5472:	492c      	ldr	r1, [pc, #176]	; (23e5524 <_Z11OLED_updatev+0xdc>)
 23e5474:	6123      	str	r3, [r4, #16]
 23e5476:	4620      	mov	r0, r4
 23e5478:	f013 fb18 	bl	23f8aac <_ZN5Print5printEPKc>
 23e547c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
      display32.setCursor(0,16);
      display32.print(oled_lines [2]);
 23e5480:	4929      	ldr	r1, [pc, #164]	; (23e5528 <_Z11OLED_updatev+0xe0>)
 23e5482:	6123      	str	r3, [r4, #16]
 23e5484:	4620      	mov	r0, r4
 23e5486:	f013 fb11 	bl	23f8aac <_ZN5Print5printEPKc>
 23e548a:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
      display32.setCursor(0,24);  
      display32.print(oled_lines [3]);
 23e548e:	4927      	ldr	r1, [pc, #156]	; (23e552c <_Z11OLED_updatev+0xe4>)
 23e5490:	6123      	str	r3, [r4, #16]
      display64.setCursor(0,40);  
      display64.print(oled_lines [5]);
      display64.setCursor(0,48);  
      display64.print(oled_lines [6]);
      display64.setCursor(0,56);  
      display64.print(oled_lines [7]);
 23e5492:	4620      	mov	r0, r4
 23e5494:	f013 fb0a 	bl	23f8aac <_ZN5Print5printEPKc>
      display64.display();
 23e5498:	4620      	mov	r0, r4
     
    }
  }
}
 23e549a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      display64.display();
 23e549e:	f00c b9c9 	b.w	23f1834 <_ZN16Adafruit_SSD13067displayEv>
      display64.clearDisplay();
 23e54a2:	4c23      	ldr	r4, [pc, #140]	; (23e5530 <_Z11OLED_updatev+0xe8>)
 23e54a4:	4620      	mov	r0, r4
 23e54a6:	f00b fefa 	bl	23f129e <_ZN16Adafruit_SSD130612clearDisplayEv>
      display64.print(oled_lines [0]);
 23e54aa:	491d      	ldr	r1, [pc, #116]	; (23e5520 <_Z11OLED_updatev+0xd8>)
 23e54ac:	4620      	mov	r0, r4
 23e54ae:	6125      	str	r5, [r4, #16]
 23e54b0:	f013 fafc 	bl	23f8aac <_ZN5Print5printEPKc>
 23e54b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
      display64.print(oled_lines [1]);
 23e54b8:	491a      	ldr	r1, [pc, #104]	; (23e5524 <_Z11OLED_updatev+0xdc>)
 23e54ba:	6123      	str	r3, [r4, #16]
 23e54bc:	4620      	mov	r0, r4
 23e54be:	f013 faf5 	bl	23f8aac <_ZN5Print5printEPKc>
 23e54c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
      display64.print(oled_lines [2]);
 23e54c6:	4918      	ldr	r1, [pc, #96]	; (23e5528 <_Z11OLED_updatev+0xe0>)
 23e54c8:	6123      	str	r3, [r4, #16]
 23e54ca:	4620      	mov	r0, r4
 23e54cc:	f013 faee 	bl	23f8aac <_ZN5Print5printEPKc>
 23e54d0:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
      display64.print(oled_lines [3]);
 23e54d4:	4915      	ldr	r1, [pc, #84]	; (23e552c <_Z11OLED_updatev+0xe4>)
 23e54d6:	6123      	str	r3, [r4, #16]
 23e54d8:	4620      	mov	r0, r4
 23e54da:	f013 fae7 	bl	23f8aac <_ZN5Print5printEPKc>
 23e54de:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
      display64.print(oled_lines [4]);
 23e54e2:	4914      	ldr	r1, [pc, #80]	; (23e5534 <_Z11OLED_updatev+0xec>)
 23e54e4:	6123      	str	r3, [r4, #16]
 23e54e6:	4620      	mov	r0, r4
 23e54e8:	f013 fae0 	bl	23f8aac <_ZN5Print5printEPKc>
 23e54ec:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
      display64.print(oled_lines [5]);
 23e54f0:	4911      	ldr	r1, [pc, #68]	; (23e5538 <_Z11OLED_updatev+0xf0>)
 23e54f2:	6123      	str	r3, [r4, #16]
 23e54f4:	4620      	mov	r0, r4
 23e54f6:	f013 fad9 	bl	23f8aac <_ZN5Print5printEPKc>
 23e54fa:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
      display64.print(oled_lines [6]);
 23e54fe:	490f      	ldr	r1, [pc, #60]	; (23e553c <_Z11OLED_updatev+0xf4>)
 23e5500:	6123      	str	r3, [r4, #16]
 23e5502:	4620      	mov	r0, r4
 23e5504:	f013 fad2 	bl	23f8aac <_ZN5Print5printEPKc>
 23e5508:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
      display64.print(oled_lines [7]);
 23e550c:	490c      	ldr	r1, [pc, #48]	; (23e5540 <_Z11OLED_updatev+0xf8>)
 23e550e:	6123      	str	r3, [r4, #16]
 23e5510:	e7bf      	b.n	23e5492 <_Z11OLED_updatev+0x4a>
}
 23e5512:	bd38      	pop	{r3, r4, r5, pc}
 23e5514:	1006a0f9 	.word	0x1006a0f9
 23e5518:	1007aa20 	.word	0x1007aa20
 23e551c:	1006ad74 	.word	0x1006ad74
 23e5520:	1007a968 	.word	0x1007a968
 23e5524:	1007a97f 	.word	0x1007a97f
 23e5528:	1007a996 	.word	0x1007a996
 23e552c:	1007a9ad 	.word	0x1007a9ad
 23e5530:	1006ade8 	.word	0x1006ade8
 23e5534:	1007a9c4 	.word	0x1007a9c4
 23e5538:	1007a9db 	.word	0x1007a9db
 23e553c:	1007a9f2 	.word	0x1007a9f2
 23e5540:	1007aa09 	.word	0x1007aa09

023e5544 <_Z10OLED_writePKc>:
/*
 * ======================================================================================================================
 * OLED_write() 
 * ======================================================================================================================
 */
void OLED_write(const char *str) {
 23e5544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int c, len, bottom_line = 3;
  
  if (DisplayEnabled) {
 23e5546:	4b36      	ldr	r3, [pc, #216]	; (23e5620 <_Z10OLED_writePKc+0xdc>)
void OLED_write(const char *str) {
 23e5548:	4604      	mov	r4, r0
  if (DisplayEnabled) {
 23e554a:	781b      	ldrb	r3, [r3, #0]
 23e554c:	2b00      	cmp	r3, #0
 23e554e:	d066      	beq.n	23e561e <_Z10OLED_writePKc+0xda>
    // move lines up
    for (c=0; c<=21; c++) {
      oled_lines [0][c] = oled_lines [1][c];
      oled_lines [1][c] = oled_lines [2][c];
      oled_lines [2][c] = oled_lines [3][c];
      if (OLED64) {
 23e5550:	4b34      	ldr	r3, [pc, #208]	; (23e5624 <_Z10OLED_writePKc+0xe0>)
 23e5552:	6819      	ldr	r1, [r3, #0]
      oled_lines [0][c] = oled_lines [1][c];
 23e5554:	4b34      	ldr	r3, [pc, #208]	; (23e5628 <_Z10OLED_writePKc+0xe4>)
 23e5556:	f1a3 0217 	sub.w	r2, r3, #23
 23e555a:	4615      	mov	r5, r2
 23e555c:	f103 0014 	add.w	r0, r3, #20
 23e5560:	f853 6b04 	ldr.w	r6, [r3], #4
 23e5564:	4283      	cmp	r3, r0
 23e5566:	f842 6b04 	str.w	r6, [r2], #4
 23e556a:	d1f9      	bne.n	23e5560 <_Z10OLED_writePKc+0x1c>
 23e556c:	881b      	ldrh	r3, [r3, #0]
 23e556e:	8013      	strh	r3, [r2, #0]
      oled_lines [1][c] = oled_lines [2][c];
 23e5570:	4b2e      	ldr	r3, [pc, #184]	; (23e562c <_Z10OLED_writePKc+0xe8>)
 23e5572:	f1a3 0217 	sub.w	r2, r3, #23
 23e5576:	f103 0014 	add.w	r0, r3, #20
 23e557a:	f853 6b04 	ldr.w	r6, [r3], #4
 23e557e:	4283      	cmp	r3, r0
 23e5580:	f842 6b04 	str.w	r6, [r2], #4
 23e5584:	d1f9      	bne.n	23e557a <_Z10OLED_writePKc+0x36>
 23e5586:	881b      	ldrh	r3, [r3, #0]
 23e5588:	8013      	strh	r3, [r2, #0]
      oled_lines [2][c] = oled_lines [3][c];
 23e558a:	4b29      	ldr	r3, [pc, #164]	; (23e5630 <_Z10OLED_writePKc+0xec>)
 23e558c:	f1a3 0217 	sub.w	r2, r3, #23
 23e5590:	f103 0014 	add.w	r0, r3, #20
 23e5594:	f853 6b04 	ldr.w	r6, [r3], #4
 23e5598:	4283      	cmp	r3, r0
 23e559a:	f842 6b04 	str.w	r6, [r2], #4
 23e559e:	d1f9      	bne.n	23e5594 <_Z10OLED_writePKc+0x50>
 23e55a0:	881b      	ldrh	r3, [r3, #0]
  int c, len, bottom_line = 3;
 23e55a2:	2603      	movs	r6, #3
      oled_lines [2][c] = oled_lines [3][c];
 23e55a4:	8013      	strh	r3, [r2, #0]
    for (c=0; c<=21; c++) {
 23e55a6:	2200      	movs	r2, #0
 23e55a8:	4b22      	ldr	r3, [pc, #136]	; (23e5634 <_Z10OLED_writePKc+0xf0>)
      if (OLED64) {
 23e55aa:	293d      	cmp	r1, #61	; 0x3d
 23e55ac:	d110      	bne.n	23e55d0 <_Z10OLED_writePKc+0x8c>
        oled_lines [3][c] = oled_lines [4][c];
        oled_lines [4][c] = oled_lines [5][c];
        oled_lines [5][c] = oled_lines [6][c];  
        oled_lines [6][c] = oled_lines [7][c];  
        bottom_line = 7;          
 23e55ae:	2607      	movs	r6, #7
        oled_lines [3][c] = oled_lines [4][c];
 23e55b0:	f893 005c 	ldrb.w	r0, [r3, #92]	; 0x5c
 23e55b4:	f883 0045 	strb.w	r0, [r3, #69]	; 0x45
        oled_lines [4][c] = oled_lines [5][c];
 23e55b8:	f893 0073 	ldrb.w	r0, [r3, #115]	; 0x73
 23e55bc:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
        oled_lines [5][c] = oled_lines [6][c];  
 23e55c0:	f893 008a 	ldrb.w	r0, [r3, #138]	; 0x8a
 23e55c4:	f883 0073 	strb.w	r0, [r3, #115]	; 0x73
        oled_lines [6][c] = oled_lines [7][c];  
 23e55c8:	f893 00a1 	ldrb.w	r0, [r3, #161]	; 0xa1
 23e55cc:	f883 008a 	strb.w	r0, [r3, #138]	; 0x8a
    for (c=0; c<=21; c++) {
 23e55d0:	3201      	adds	r2, #1
 23e55d2:	2a16      	cmp	r2, #22
 23e55d4:	f103 0301 	add.w	r3, r3, #1
 23e55d8:	d1e7      	bne.n	23e55aa <_Z10OLED_writePKc+0x66>
      }
    }

    // check length on new output line string
    len = strlen (str);
 23e55da:	4620      	mov	r0, r4
 23e55dc:	f7fe fefc 	bl	23e43d8 <strlen>
    if (len>21) {
 23e55e0:	2217      	movs	r2, #23
 23e55e2:	2815      	cmp	r0, #21
 23e55e4:	bfa8      	it	ge
 23e55e6:	2015      	movge	r0, #21
      len = 21;
    }
    for (c=0; c<=len; c++) {
 23e55e8:	4372      	muls	r2, r6
 23e55ea:	1e63      	subs	r3, r4, #1
 23e55ec:	18a9      	adds	r1, r5, r2
 23e55ee:	4404      	add	r4, r0
      oled_lines [bottom_line][c] = *(str+c);
 23e55f0:	f813 7f01 	ldrb.w	r7, [r3, #1]!
    for (c=0; c<=len; c++) {
 23e55f4:	42a3      	cmp	r3, r4
      oled_lines [bottom_line][c] = *(str+c);
 23e55f6:	f801 7b01 	strb.w	r7, [r1], #1
    for (c=0; c<=len; c++) {
 23e55fa:	d1f9      	bne.n	23e55f0 <_Z10OLED_writePKc+0xac>
 23e55fc:	1c43      	adds	r3, r0, #1
    }

    // Adding Padding
    for (;c<=21; c++) {
      oled_lines [bottom_line][c] = ' ';
 23e55fe:	4413      	add	r3, r2
 23e5600:	2120      	movs	r1, #32
 23e5602:	f1c0 0215 	rsb	r2, r0, #21
 23e5606:	18e8      	adds	r0, r5, r3
 23e5608:	f017 f879 	bl	23fc6fe <memset>
    }
    oled_lines [bottom_line][22] = (char) NULL;
 23e560c:	2317      	movs	r3, #23
 23e560e:	2200      	movs	r2, #0
 23e5610:	fb03 5306 	mla	r3, r3, r6, r5
 23e5614:	759a      	strb	r2, [r3, #22]
    
    OLED_update();
  }
}
 23e5616:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    OLED_update();
 23e561a:	f7ff bf15 	b.w	23e5448 <_Z11OLED_updatev>
}
 23e561e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23e5620:	1006a0f9 	.word	0x1006a0f9
 23e5624:	1007aa20 	.word	0x1007aa20
 23e5628:	1007a97f 	.word	0x1007a97f
 23e562c:	1007a996 	.word	0x1007a996
 23e5630:	1007a9ad 	.word	0x1007a9ad
 23e5634:	1007a968 	.word	0x1007a968

023e5638 <_Z12Serial_writePKc>:
/*
 * ======================================================================================================================
 * Serial_write() 
 * ======================================================================================================================
 */
void Serial_write(const char *str) {
 23e5638:	b507      	push	{r0, r1, r2, lr}
  if (SerialConsoleEnabled) {
 23e563a:	4b07      	ldr	r3, [pc, #28]	; (23e5658 <_Z12Serial_writePKc+0x20>)
 23e563c:	781b      	ldrb	r3, [r3, #0]
 23e563e:	b143      	cbz	r3, 23e5652 <_Z12Serial_writePKc+0x1a>
 23e5640:	9001      	str	r0, [sp, #4]
    Serial.println(str);
 23e5642:	f013 ff9d 	bl	23f9580 <_Z16_fetch_usbserialv>
 23e5646:	9901      	ldr	r1, [sp, #4]
  }
}
 23e5648:	b003      	add	sp, #12
 23e564a:	f85d eb04 	ldr.w	lr, [sp], #4
    Serial.println(str);
 23e564e:	f013 ba44 	b.w	23f8ada <_ZN5Print7printlnEPKc>
}
 23e5652:	b003      	add	sp, #12
 23e5654:	f85d fb04 	ldr.w	pc, [sp], #4
 23e5658:	1006a7d7 	.word	0x1006a7d7

023e565c <_Z14Serial_writelnPKc>:
/*
 * ======================================================================================================================
 * Serial_writeln() 
 * ======================================================================================================================
 */
void Serial_writeln(const char *str) {
 23e565c:	b507      	push	{r0, r1, r2, lr}
  if (SerialConsoleEnabled) {
 23e565e:	4b0a      	ldr	r3, [pc, #40]	; (23e5688 <_Z14Serial_writelnPKc+0x2c>)
 23e5660:	781b      	ldrb	r3, [r3, #0]
 23e5662:	b16b      	cbz	r3, 23e5680 <_Z14Serial_writelnPKc+0x24>
 23e5664:	9001      	str	r0, [sp, #4]
    Serial.println(str);
 23e5666:	f013 ff8b 	bl	23f9580 <_Z16_fetch_usbserialv>
 23e566a:	9901      	ldr	r1, [sp, #4]
 23e566c:	f013 fa35 	bl	23f8ada <_ZN5Print7printlnEPKc>
    Serial.flush();
 23e5670:	f013 ff86 	bl	23f9580 <_Z16_fetch_usbserialv>
 23e5674:	6803      	ldr	r3, [r0, #0]
 23e5676:	69db      	ldr	r3, [r3, #28]
  }
}
 23e5678:	b003      	add	sp, #12
 23e567a:	f85d eb04 	ldr.w	lr, [sp], #4
    Serial.flush();
 23e567e:	4718      	bx	r3
}
 23e5680:	b003      	add	sp, #12
 23e5682:	f85d fb04 	ldr.w	pc, [sp], #4
 23e5686:	bf00      	nop
 23e5688:	1006a7d7 	.word	0x1006a7d7

023e568c <_Z6OutputPKc>:
/*
 * ======================================================================================================================
 * Output()
 * ======================================================================================================================
 */
void Output(const char *str) {
 23e568c:	b510      	push	{r4, lr}
 23e568e:	4604      	mov	r4, r0
  OLED_write(str);
 23e5690:	f7ff ff58 	bl	23e5544 <_Z10OLED_writePKc>
  Serial_write(str);
 23e5694:	4620      	mov	r0, r4
}
 23e5696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial_write(str);
 23e569a:	f7ff bfcd 	b.w	23e5638 <_Z12Serial_writePKc>
	...

023e56a0 <_Z15OLED_initializev>:
/*
 * ======================================================================================================================
 * OLED_initialize() -- Initialize oled if enabled
 * ======================================================================================================================
 */
void OLED_initialize() {
 23e56a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (DisplayEnabled) {
 23e56a2:	4d30      	ldr	r5, [pc, #192]	; (23e5764 <_Z15OLED_initializev+0xc4>)
 23e56a4:	782b      	ldrb	r3, [r5, #0]
 23e56a6:	2b00      	cmp	r3, #0
 23e56a8:	d059      	beq.n	23e575e <_Z15OLED_initializev+0xbe>
    if (I2C_Device_Exist (OLED32_I2C_ADDRESS)) {
 23e56aa:	203c      	movs	r0, #60	; 0x3c
 23e56ac:	f7ff fde5 	bl	23e527a <_Z16I2C_Device_Existh>
 23e56b0:	4604      	mov	r4, r0
 23e56b2:	b318      	cbz	r0, 23e56fc <_Z15OLED_initializev+0x5c>
      oled_type = OLED32_I2C_ADDRESS;
 23e56b4:	223c      	movs	r2, #60	; 0x3c
      display32.begin(SSD1306_SWITCHCAPVCC, OLED32_I2C_ADDRESS);
 23e56b6:	2501      	movs	r5, #1
 23e56b8:	4c2b      	ldr	r4, [pc, #172]	; (23e5768 <_Z15OLED_initializev+0xc8>)
      oled_type = OLED32_I2C_ADDRESS;
 23e56ba:	4b2c      	ldr	r3, [pc, #176]	; (23e576c <_Z15OLED_initializev+0xcc>)
      display32.begin(SSD1306_SWITCHCAPVCC, OLED32_I2C_ADDRESS);
 23e56bc:	2102      	movs	r1, #2
      oled_type = OLED32_I2C_ADDRESS;
 23e56be:	601a      	str	r2, [r3, #0]
      display32.begin(SSD1306_SWITCHCAPVCC, OLED32_I2C_ADDRESS);
 23e56c0:	4620      	mov	r0, r4
 23e56c2:	462b      	mov	r3, r5
 23e56c4:	9500      	str	r5, [sp, #0]
 23e56c6:	f00b fdf9 	bl	23f12bc <_ZN16Adafruit_SSD13065beginEhhbb>
      display32.clearDisplay();
 23e56ca:	4620      	mov	r0, r4
 23e56cc:	f00b fde7 	bl	23f129e <_ZN16Adafruit_SSD130612clearDisplayEv>
      display32.setTextSize(1); // Draw 2X-scale text
 23e56d0:	4620      	mov	r0, r4
 23e56d2:	4629      	mov	r1, r5
 23e56d4:	f00a fde9 	bl	23f02aa <_ZN12Adafruit_GFX11setTextSizeEh>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23e56d8:	2300      	movs	r3, #0
 23e56da:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 23e56de:	e9c4 3204 	strd	r3, r2, [r4, #16]
      display32.setTextColor(WHITE);
      display32.setCursor(0, 0);
      for (int r=0; r<4; r++) {
        oled_lines[r][0]=0;
 23e56e2:	4a23      	ldr	r2, [pc, #140]	; (23e5770 <_Z15OLED_initializev+0xd0>)
      }
      OLED_write("OLED32:OK");
 23e56e4:	4823      	ldr	r0, [pc, #140]	; (23e5774 <_Z15OLED_initializev+0xd4>)
        oled_lines[r][0]=0;
 23e56e6:	7013      	strb	r3, [r2, #0]
 23e56e8:	75d3      	strb	r3, [r2, #23]
 23e56ea:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
 23e56ee:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
    else {
      DisplayEnabled = false;
      SystemStatusBits |= SSB_OLED; // Turn on Bit
    }
  }
}
 23e56f2:	b002      	add	sp, #8
 23e56f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      OLED_write("OLED64:OK");
 23e56f8:	f7ff bf24 	b.w	23e5544 <_Z10OLED_writePKc>
    else if (I2C_Device_Exist (OLED64_I2C_ADDRESS)) {
 23e56fc:	203d      	movs	r0, #61	; 0x3d
 23e56fe:	f7ff fdbc 	bl	23e527a <_Z16I2C_Device_Existh>
 23e5702:	b330      	cbz	r0, 23e5752 <_Z15OLED_initializev+0xb2>
      oled_type = OLED64_I2C_ADDRESS;
 23e5704:	223d      	movs	r2, #61	; 0x3d
      display64.begin(SSD1306_SWITCHCAPVCC, OLED64_I2C_ADDRESS);
 23e5706:	2601      	movs	r6, #1
 23e5708:	4d1b      	ldr	r5, [pc, #108]	; (23e5778 <_Z15OLED_initializev+0xd8>)
      oled_type = OLED64_I2C_ADDRESS;
 23e570a:	4b18      	ldr	r3, [pc, #96]	; (23e576c <_Z15OLED_initializev+0xcc>)
      display64.begin(SSD1306_SWITCHCAPVCC, OLED64_I2C_ADDRESS);
 23e570c:	2102      	movs	r1, #2
      oled_type = OLED64_I2C_ADDRESS;
 23e570e:	601a      	str	r2, [r3, #0]
      display64.begin(SSD1306_SWITCHCAPVCC, OLED64_I2C_ADDRESS);
 23e5710:	4628      	mov	r0, r5
 23e5712:	4633      	mov	r3, r6
 23e5714:	9600      	str	r6, [sp, #0]
 23e5716:	f00b fdd1 	bl	23f12bc <_ZN16Adafruit_SSD13065beginEhhbb>
      display64.clearDisplay();
 23e571a:	4628      	mov	r0, r5
 23e571c:	f00b fdbf 	bl	23f129e <_ZN16Adafruit_SSD130612clearDisplayEv>
      display64.setTextSize(1); // Draw 2X-scale text
 23e5720:	4628      	mov	r0, r5
 23e5722:	4631      	mov	r1, r6
 23e5724:	f00a fdc1 	bl	23f02aa <_ZN12Adafruit_GFX11setTextSizeEh>
 23e5728:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 23e572c:	616b      	str	r3, [r5, #20]
        oled_lines[r][0]=0;
 23e572e:	4b10      	ldr	r3, [pc, #64]	; (23e5770 <_Z15OLED_initializev+0xd0>)
      OLED_write("OLED64:OK");
 23e5730:	4812      	ldr	r0, [pc, #72]	; (23e577c <_Z15OLED_initializev+0xdc>)
    cursor_x = x;
 23e5732:	612c      	str	r4, [r5, #16]
        oled_lines[r][0]=0;
 23e5734:	701c      	strb	r4, [r3, #0]
 23e5736:	75dc      	strb	r4, [r3, #23]
 23e5738:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
 23e573c:	f883 4045 	strb.w	r4, [r3, #69]	; 0x45
 23e5740:	f883 405c 	strb.w	r4, [r3, #92]	; 0x5c
 23e5744:	f883 4073 	strb.w	r4, [r3, #115]	; 0x73
 23e5748:	f883 408a 	strb.w	r4, [r3, #138]	; 0x8a
 23e574c:	f883 40a1 	strb.w	r4, [r3, #161]	; 0xa1
      OLED_write("OLED64:OK");
 23e5750:	e7cf      	b.n	23e56f2 <_Z15OLED_initializev+0x52>
      SystemStatusBits |= SSB_OLED; // Turn on Bit
 23e5752:	4a0b      	ldr	r2, [pc, #44]	; (23e5780 <_Z15OLED_initializev+0xe0>)
      DisplayEnabled = false;
 23e5754:	7028      	strb	r0, [r5, #0]
      SystemStatusBits |= SSB_OLED; // Turn on Bit
 23e5756:	6813      	ldr	r3, [r2, #0]
 23e5758:	f043 0308 	orr.w	r3, r3, #8
 23e575c:	6013      	str	r3, [r2, #0]
}
 23e575e:	b002      	add	sp, #8
 23e5760:	bd70      	pop	{r4, r5, r6, pc}
 23e5762:	bf00      	nop
 23e5764:	1006a0f9 	.word	0x1006a0f9
 23e5768:	1006ad74 	.word	0x1006ad74
 23e576c:	1007aa20 	.word	0x1007aa20
 23e5770:	1007a968 	.word	0x1007a968
 23e5774:	023fce54 	.word	0x023fce54
 23e5778:	1006ade8 	.word	0x1006ade8
 23e577c:	023fce5e 	.word	0x023fce5e
 23e5780:	1006a178 	.word	0x1006a178

023e5784 <_Z13stc_timestampv>:
/* 
 *=======================================================================================================================
 * stc_timestamp() - Read from System Time Clock and set timestamp string
 *=======================================================================================================================
 */
void stc_timestamp() {
 23e5784:	b570      	push	{r4, r5, r6, lr}
 23e5786:	b086      	sub	sp, #24

  // ISO_8601 Time Format
  sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
 23e5788:	f013 fe2c 	bl	23f93e4 <_ZN9TimeClass4yearEv>
 23e578c:	9005      	str	r0, [sp, #20]
 23e578e:	f013 fe21 	bl	23f93d4 <_ZN9TimeClass5monthEv>
 23e5792:	9004      	str	r0, [sp, #16]
 23e5794:	f013 fe12 	bl	23f93bc <_ZN9TimeClass3dayEv>
 23e5798:	4604      	mov	r4, r0
 23e579a:	f013 fdeb 	bl	23f9374 <_ZN9TimeClass4hourEv>
 23e579e:	4605      	mov	r5, r0
 23e57a0:	f013 fdf4 	bl	23f938c <_ZN9TimeClass6minuteEv>
 23e57a4:	4606      	mov	r6, r0
 23e57a6:	f013 fdfd 	bl	23f93a4 <_ZN9TimeClass6secondEv>
 23e57aa:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 23e57ae:	e9cd 6002 	strd	r6, r0, [sp, #8]
 23e57b2:	e9cd 4500 	strd	r4, r5, [sp]
 23e57b6:	4903      	ldr	r1, [pc, #12]	; (23e57c4 <_Z13stc_timestampv+0x40>)
 23e57b8:	4803      	ldr	r0, [pc, #12]	; (23e57c8 <_Z13stc_timestampv+0x44>)
 23e57ba:	f011 fe55 	bl	23f7468 <sprintf>
    Time.year(), Time.month(), Time.day(),
    Time.hour(), Time.minute(), Time.second());
}
 23e57be:	b006      	add	sp, #24
 23e57c0:	bd70      	pop	{r4, r5, r6, pc}
 23e57c2:	bf00      	nop
 23e57c4:	023fce68 	.word	0x023fce68
 23e57c8:	1007abe0 	.word	0x1007abe0

023e57cc <_Z13rtc_timestampv>:
/* 
 *=======================================================================================================================
 * rtc_timestamp() - Read from RTC and set timestamp string
 *=======================================================================================================================
 */
void rtc_timestamp() {
 23e57cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#if (PLATFORM_ID == PLATFORM_MSOM)
  if (ab1805.getRtcAsTm(&now)) {
 23e57ce:	4c11      	ldr	r4, [pc, #68]	; (23e5814 <_Z13rtc_timestampv+0x48>)
 23e57d0:	4811      	ldr	r0, [pc, #68]	; (23e5818 <_Z13rtc_timestampv+0x4c>)
 23e57d2:	4621      	mov	r1, r4
 23e57d4:	f010 fd64 	bl	23f62a0 <_ZN6AB180510getRtcAsTmEP2tm>
 23e57d8:	b1a0      	cbz	r0, 23e5804 <_Z13rtc_timestampv+0x38>
    now.tm_year += 1900;
    now.tm_mon += 1;
    sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
 23e57da:	6821      	ldr	r1, [r4, #0]
    now.tm_year += 1900;
 23e57dc:	6962      	ldr	r2, [r4, #20]
    sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
 23e57de:	9103      	str	r1, [sp, #12]
 23e57e0:	6861      	ldr	r1, [r4, #4]
    now.tm_mon += 1;
 23e57e2:	6923      	ldr	r3, [r4, #16]
    sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
 23e57e4:	9102      	str	r1, [sp, #8]
 23e57e6:	68a1      	ldr	r1, [r4, #8]
    now.tm_year += 1900;
 23e57e8:	f202 726c 	addw	r2, r2, #1900	; 0x76c
    sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
 23e57ec:	9101      	str	r1, [sp, #4]
 23e57ee:	68e1      	ldr	r1, [r4, #12]
    now.tm_mon += 1;
 23e57f0:	3301      	adds	r3, #1
    sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
 23e57f2:	9100      	str	r1, [sp, #0]
 23e57f4:	4809      	ldr	r0, [pc, #36]	; (23e581c <_Z13rtc_timestampv+0x50>)
 23e57f6:	490a      	ldr	r1, [pc, #40]	; (23e5820 <_Z13rtc_timestampv+0x54>)
    now.tm_year += 1900;
 23e57f8:	6162      	str	r2, [r4, #20]
    now.tm_mon += 1;
 23e57fa:	6123      	str	r3, [r4, #16]
    sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
 23e57fc:	f011 fe34 	bl	23f7468 <sprintf>
  // ISO_8601 Time Format
  sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
    now.year(), now.month(), now.day(),
    now.hour(), now.minute(), now.second());
#endif
}
 23e5800:	b004      	add	sp, #16
 23e5802:	bd10      	pop	{r4, pc}
    sprintf (timestamp, "0000-00-00T00:00:00"); 
 23e5804:	4907      	ldr	r1, [pc, #28]	; (23e5824 <_Z13rtc_timestampv+0x58>)
 23e5806:	4805      	ldr	r0, [pc, #20]	; (23e581c <_Z13rtc_timestampv+0x50>)
}
 23e5808:	b004      	add	sp, #16
 23e580a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sprintf (timestamp, "0000-00-00T00:00:00"); 
 23e580e:	f016 bfeb 	b.w	23fc7e8 <strcpy>
 23e5812:	bf00      	nop
 23e5814:	1006f52c 	.word	0x1006f52c
 23e5818:	1006a7f0 	.word	0x1006a7f0
 23e581c:	1007abe0 	.word	0x1007abe0
 23e5820:	023fce68 	.word	0x023fce68
 23e5824:	023fce84 	.word	0x023fce84

023e5828 <_Z14rtc_initializev>:
/* 
 *=======================================================================================================================
 * rtc_initialize()
 *=======================================================================================================================
 */
void rtc_initialize() {
 23e5828:	b513      	push	{r0, r1, r4, lr}

#if (PLATFORM_ID == PLATFORM_MSOM)
  // Note: If the RTC is valid ParticleOS will see this and set the System Clock with it.
  if (!I2C_Device_Exist(AB1805_ADDRESS)) {
 23e582a:	2069      	movs	r0, #105	; 0x69
 23e582c:	f7ff fd25 	bl	23e527a <_Z16I2C_Device_Existh>
 23e5830:	b970      	cbnz	r0, 23e5850 <_Z14rtc_initializev+0x28>
    Output("RTC:I2C NOTFOUND");
 23e5832:	4821      	ldr	r0, [pc, #132]	; (23e58b8 <_Z14rtc_initializev+0x90>)
 23e5834:	f7ff ff2a 	bl	23e568c <_Z6OutputPKc>
    SystemStatusBits |= SSB_RTC; // Turn on Bit
    delay (5000);
 23e5838:	f241 3088 	movw	r0, #5000	; 0x1388
    SystemStatusBits |= SSB_RTC; // Turn on Bit
 23e583c:	4a1f      	ldr	r2, [pc, #124]	; (23e58bc <_Z14rtc_initializev+0x94>)
 23e583e:	6813      	ldr	r3, [r2, #0]
 23e5840:	f043 0304 	orr.w	r3, r3, #4
 23e5844:	6013      	str	r3, [r2, #0]
  else {
    Output ("RTC:NEEDS GSM TIME");
    delay (2000); // Give the user some time to see this problem.
  }
#endif
}
 23e5846:	b002      	add	sp, #8
 23e5848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay (2000); // Give the user some time to see this problem.
 23e584c:	f011 beec 	b.w	23f7628 <delay>
  RTC_exists = true; // We have a clock hardware connected
 23e5850:	2401      	movs	r4, #1
  ab1805.setup(); // Initialize AB1805
 23e5852:	2101      	movs	r1, #1
 23e5854:	481a      	ldr	r0, [pc, #104]	; (23e58c0 <_Z14rtc_initializev+0x98>)
 23e5856:	f010 fe9d 	bl	23f6594 <_ZN6AB18055setupEb>
  RTC_exists = true; // We have a clock hardware connected
 23e585a:	4b1a      	ldr	r3, [pc, #104]	; (23e58c4 <_Z14rtc_initializev+0x9c>)
 23e585c:	701c      	strb	r4, [r3, #0]
  rtc_timestamp();
 23e585e:	f7ff ffb5 	bl	23e57cc <_Z13rtc_timestampv>
  sprintf (msgbuf, "%sR", timestamp); // Lets show the clock before we test it
 23e5862:	4a19      	ldr	r2, [pc, #100]	; (23e58c8 <_Z14rtc_initializev+0xa0>)
 23e5864:	4919      	ldr	r1, [pc, #100]	; (23e58cc <_Z14rtc_initializev+0xa4>)
 23e5866:	481a      	ldr	r0, [pc, #104]	; (23e58d0 <_Z14rtc_initializev+0xa8>)
 23e5868:	f011 fdfe 	bl	23f7468 <sprintf>
  Output (msgbuf);
 23e586c:	4818      	ldr	r0, [pc, #96]	; (23e58d0 <_Z14rtc_initializev+0xa8>)
 23e586e:	f7ff ff0d 	bl	23e568c <_Z6OutputPKc>
    /**
     * @brief Returns true if the RTC has been set
     * 
     * On cold power-up before cloud connecting, this will be false. Note that
     */
    bool isRTCSet() { return isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC); };
 23e5872:	4623      	mov	r3, r4
 23e5874:	4622      	mov	r2, r4
 23e5876:	2110      	movs	r1, #16
 23e5878:	4811      	ldr	r0, [pc, #68]	; (23e58c0 <_Z14rtc_initializev+0x98>)
 23e587a:	f010 fbbc 	bl	23f5ff6 <_ZN6AB180510isBitClearEhhb>
  if (ab1805.isRTCSet() && (now.tm_year >= 2025) && (now.tm_year <= 2035)) {
 23e587e:	b1a8      	cbz	r0, 23e58ac <_Z14rtc_initializev+0x84>
 23e5880:	f46f 62fd 	mvn.w	r2, #2024	; 0x7e8
 23e5884:	4b13      	ldr	r3, [pc, #76]	; (23e58d4 <_Z14rtc_initializev+0xac>)
 23e5886:	695b      	ldr	r3, [r3, #20]
 23e5888:	4413      	add	r3, r2
 23e588a:	2b0a      	cmp	r3, #10
 23e588c:	d80e      	bhi.n	23e58ac <_Z14rtc_initializev+0x84>
    Output("RTC:VALID");
 23e588e:	4812      	ldr	r0, [pc, #72]	; (23e58d8 <_Z14rtc_initializev+0xb0>)
 23e5890:	f7ff fefc 	bl	23e568c <_Z6OutputPKc>
    ab1805.getRtcAsTime(t);
 23e5894:	4669      	mov	r1, sp
 23e5896:	480a      	ldr	r0, [pc, #40]	; (23e58c0 <_Z14rtc_initializev+0x98>)
 23e5898:	f010 fd36 	bl	23f6308 <_ZN6AB180512getRtcAsTimeERx>
    Time.setTime(t);        
 23e589c:	e9dd 0100 	ldrd	r0, r1, [sp]
 23e58a0:	f013 fc3e 	bl	23f9120 <_ZN9TimeClass7setTimeEx>
    RTC_valid = true;
 23e58a4:	4b0d      	ldr	r3, [pc, #52]	; (23e58dc <_Z14rtc_initializev+0xb4>)
 23e58a6:	701c      	strb	r4, [r3, #0]
}
 23e58a8:	b002      	add	sp, #8
 23e58aa:	bd10      	pop	{r4, pc}
    Output ("RTC:NEEDS GSM TIME");
 23e58ac:	480c      	ldr	r0, [pc, #48]	; (23e58e0 <_Z14rtc_initializev+0xb8>)
 23e58ae:	f7ff feed 	bl	23e568c <_Z6OutputPKc>
    delay (2000); // Give the user some time to see this problem.
 23e58b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23e58b6:	e7c6      	b.n	23e5846 <_Z14rtc_initializev+0x1e>
 23e58b8:	023fce98 	.word	0x023fce98
 23e58bc:	1006a178 	.word	0x1006a178
 23e58c0:	1006a7f0 	.word	0x1006a7f0
 23e58c4:	1006a2cf 	.word	0x1006a2cf
 23e58c8:	1007abe0 	.word	0x1007abe0
 23e58cc:	023fcea9 	.word	0x023fcea9
 23e58d0:	1006f128 	.word	0x1006f128
 23e58d4:	1006f52c 	.word	0x1006f52c
 23e58d8:	023fcead 	.word	0x023fcead
 23e58dc:	1006a2d0 	.word	0x1006a2d0
 23e58e0:	023fceb7 	.word	0x023fceb7

023e58e4 <_Z15RTC_UpdateCheckv>:
/*
 * ======================================================================================================================
 * RTC_UpdateCheck() - Check if we need to Set or Update the RTC clock from the Cell Network   
 * ======================================================================================================================
 */
void RTC_UpdateCheck() {
 23e58e4:	b510      	push	{r4, lr}
  if (RTC_exists && Particle.connected()) { 
 23e58e6:	4b23      	ldr	r3, [pc, #140]	; (23e5974 <_Z15RTC_UpdateCheckv+0x90>)
 23e58e8:	781b      	ldrb	r3, [r3, #0]
 23e58ea:	b1bb      	cbz	r3, 23e591c <_Z15RTC_UpdateCheckv+0x38>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23e58ec:	f011 fc34 	bl	23f7158 <spark_cloud_flag_connected>
 23e58f0:	b1a0      	cbz	r0, 23e591c <_Z15RTC_UpdateCheckv+0x38>
    // We have a RTC and We have connected to the Cell network at some point
    if (!RTC_valid) {
 23e58f2:	4c21      	ldr	r4, [pc, #132]	; (23e5978 <_Z15RTC_UpdateCheckv+0x94>)
 23e58f4:	7823      	ldrb	r3, [r4, #0]
 23e58f6:	b993      	cbnz	r3, 23e591e <_Z15RTC_UpdateCheckv+0x3a>
      // Set Uninitialized RTC from STC. Which has been set from the Cloud
#if (PLATFORM_ID == PLATFORM_MSOM)
      ab1805.setRtcFromSystem();
 23e58f8:	4820      	ldr	r0, [pc, #128]	; (23e597c <_Z15RTC_UpdateCheckv+0x98>)
 23e58fa:	f010 fda8 	bl	23f644e <_ZN6AB180516setRtcFromSystemEv>
#else
      rtc.adjust(DateTime(Time.year(), Time.month(), Time.day(), Time.hour(), Time.minute(), Time.second() ));
#endif
      Output("RTC:SET");
 23e58fe:	4820      	ldr	r0, [pc, #128]	; (23e5980 <_Z15RTC_UpdateCheckv+0x9c>)
 23e5900:	f7ff fec4 	bl	23e568c <_Z6OutputPKc>
      rtc_timestamp();
 23e5904:	f7ff ff62 	bl	23e57cc <_Z13rtc_timestampv>
      sprintf (msgbuf, "%sR", timestamp);
 23e5908:	4a1e      	ldr	r2, [pc, #120]	; (23e5984 <_Z15RTC_UpdateCheckv+0xa0>)
 23e590a:	491f      	ldr	r1, [pc, #124]	; (23e5988 <_Z15RTC_UpdateCheckv+0xa4>)
 23e590c:	481f      	ldr	r0, [pc, #124]	; (23e598c <_Z15RTC_UpdateCheckv+0xa8>)
 23e590e:	f011 fdab 	bl	23f7468 <sprintf>
      Output (msgbuf);
 23e5912:	481e      	ldr	r0, [pc, #120]	; (23e598c <_Z15RTC_UpdateCheckv+0xa8>)
 23e5914:	f7ff feba 	bl	23e568c <_Z6OutputPKc>
      RTC_valid = true;
 23e5918:	2301      	movs	r3, #1
 23e591a:	7023      	strb	r3, [r4, #0]
      sprintf (msgbuf, "%sR", timestamp);
      Output (msgbuf);
      LastTimeUpdate = System.millis();
    }
  }
 23e591c:	bd10      	pop	{r4, pc}
    else if (LastTimeUpdate == 0){
 23e591e:	4c1c      	ldr	r4, [pc, #112]	; (23e5990 <_Z15RTC_UpdateCheckv+0xac>)
 23e5920:	e9d4 2300 	ldrd	r2, r3, [r4]
 23e5924:	4313      	orrs	r3, r2
 23e5926:	d114      	bne.n	23e5952 <_Z15RTC_UpdateCheckv+0x6e>
      ab1805.setRtcFromSystem();
 23e5928:	4814      	ldr	r0, [pc, #80]	; (23e597c <_Z15RTC_UpdateCheckv+0x98>)
 23e592a:	f010 fd90 	bl	23f644e <_ZN6AB180516setRtcFromSystemEv>
      Output("RTC:1ST SYNC");
 23e592e:	4819      	ldr	r0, [pc, #100]	; (23e5994 <_Z15RTC_UpdateCheckv+0xb0>)
      Output("RTC:2HR SYNC");
 23e5930:	f7ff feac 	bl	23e568c <_Z6OutputPKc>
      rtc_timestamp();
 23e5934:	f7ff ff4a 	bl	23e57cc <_Z13rtc_timestampv>
      sprintf (msgbuf, "%sR", timestamp);
 23e5938:	4a12      	ldr	r2, [pc, #72]	; (23e5984 <_Z15RTC_UpdateCheckv+0xa0>)
 23e593a:	4913      	ldr	r1, [pc, #76]	; (23e5988 <_Z15RTC_UpdateCheckv+0xa4>)
 23e593c:	4813      	ldr	r0, [pc, #76]	; (23e598c <_Z15RTC_UpdateCheckv+0xa8>)
 23e593e:	f011 fd93 	bl	23f7468 <sprintf>
      Output (msgbuf);
 23e5942:	4812      	ldr	r0, [pc, #72]	; (23e598c <_Z15RTC_UpdateCheckv+0xa8>)
 23e5944:	f7ff fea2 	bl	23e568c <_Z6OutputPKc>
      LastTimeUpdate = System.millis();
 23e5948:	f7ff fb5d 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23e594c:	e9c4 0100 	strd	r0, r1, [r4]
 23e5950:	e7e4      	b.n	23e591c <_Z15RTC_UpdateCheckv+0x38>
    else if ((System.millis() - LastTimeUpdate) >= 2*3600*1000) {  // It's been 2 hours since last RTC update
 23e5952:	f7ff fb58 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23e5956:	e9d4 3200 	ldrd	r3, r2, [r4]
 23e595a:	1ac0      	subs	r0, r0, r3
 23e595c:	4b0e      	ldr	r3, [pc, #56]	; (23e5998 <_Z15RTC_UpdateCheckv+0xb4>)
 23e595e:	eb61 0102 	sbc.w	r1, r1, r2
 23e5962:	4298      	cmp	r0, r3
 23e5964:	f171 0300 	sbcs.w	r3, r1, #0
 23e5968:	d3d8      	bcc.n	23e591c <_Z15RTC_UpdateCheckv+0x38>
      ab1805.setRtcFromSystem();
 23e596a:	4804      	ldr	r0, [pc, #16]	; (23e597c <_Z15RTC_UpdateCheckv+0x98>)
 23e596c:	f010 fd6f 	bl	23f644e <_ZN6AB180516setRtcFromSystemEv>
      Output("RTC:2HR SYNC");
 23e5970:	480a      	ldr	r0, [pc, #40]	; (23e599c <_Z15RTC_UpdateCheckv+0xb8>)
 23e5972:	e7dd      	b.n	23e5930 <_Z15RTC_UpdateCheckv+0x4c>
 23e5974:	1006a2cf 	.word	0x1006a2cf
 23e5978:	1006a2d0 	.word	0x1006a2d0
 23e597c:	1006a7f0 	.word	0x1006a7f0
 23e5980:	023fceca 	.word	0x023fceca
 23e5984:	1007abe0 	.word	0x1007abe0
 23e5988:	023fcea9 	.word	0x023fcea9
 23e598c:	1006f128 	.word	0x1006f128
 23e5990:	1006a2b8 	.word	0x1006a2b8
 23e5994:	023fced2 	.word	0x023fced2
 23e5998:	006ddd00 	.word	0x006ddd00
 23e599c:	023fcedf 	.word	0x023fcedf

023e59a0 <_Z19lora_relay_msg_freeP18LORA_MSG_RELAY_STR>:
 *=======================================================================================================================
 * lora_relay_msg_free()
 *=======================================================================================================================
 */
void lora_relay_msg_free(LORA_MSG_RELAY_STR *m) {
  m->need2log = false;
 23e59a0:	2100      	movs	r1, #0
  m->message_type = 0;
  memset (m->message, 0, LORA_RELAY_MSG_LENGTH);
 23e59a2:	f44f 7280 	mov.w	r2, #256	; 0x100
  m->need2log = false;
 23e59a6:	7001      	strb	r1, [r0, #0]
  m->message_type = 0;
 23e59a8:	6041      	str	r1, [r0, #4]
  memset (m->message, 0, LORA_RELAY_MSG_LENGTH);
 23e59aa:	3008      	adds	r0, #8
 23e59ac:	f016 bea7 	b.w	23fc6fe <memset>

023e59b0 <_Z19lora_relay_need2logv>:
 *=======================================================================================================================
 * lora_relay_need2log() - Return true if we have a relay that needs to be logged
 *=======================================================================================================================
 */
bool lora_relay_need2log() {
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e59b0:	2300      	movs	r3, #0
    if (lora_msg_relay[i].need2log) {
 23e59b2:	f44f 7284 	mov.w	r2, #264	; 0x108
 23e59b6:	4904      	ldr	r1, [pc, #16]	; (23e59c8 <_Z19lora_relay_need2logv+0x18>)
 23e59b8:	fb02 f003 	mul.w	r0, r2, r3
 23e59bc:	5c40      	ldrb	r0, [r0, r1]
 23e59be:	b910      	cbnz	r0, 23e59c6 <_Z19lora_relay_need2logv+0x16>
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e59c0:	3301      	adds	r3, #1
 23e59c2:	2b40      	cmp	r3, #64	; 0x40
 23e59c4:	d1f8      	bne.n	23e59b8 <_Z19lora_relay_need2logv+0x8>
      return (true);
    }
  }
  return(false);
}
 23e59c6:	4770      	bx	lr
 23e59c8:	1006aec0 	.word	0x1006aec0

023e59cc <_Z19lora_relay_notinusev>:
 *=======================================================================================================================
 * lora_relay_notinuse() - return first open spot or -1 if full
 *=======================================================================================================================
 */
int lora_relay_notinuse() {
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e59cc:	2000      	movs	r0, #0
    if (!lora_msg_relay[i].need2log) {
 23e59ce:	f44f 7384 	mov.w	r3, #264	; 0x108
 23e59d2:	4a05      	ldr	r2, [pc, #20]	; (23e59e8 <_Z19lora_relay_notinusev+0x1c>)
 23e59d4:	fb03 f100 	mul.w	r1, r3, r0
 23e59d8:	5c89      	ldrb	r1, [r1, r2]
 23e59da:	b121      	cbz	r1, 23e59e6 <_Z19lora_relay_notinusev+0x1a>
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e59dc:	3001      	adds	r0, #1
 23e59de:	2840      	cmp	r0, #64	; 0x40
 23e59e0:	d1f8      	bne.n	23e59d4 <_Z19lora_relay_notinusev+0x8>
      return (i);
    }
  }
  return(-1);
 23e59e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23e59e6:	4770      	bx	lr
 23e59e8:	1006aec0 	.word	0x1006aec0

023e59ec <_Z23lora_relay_need2log_idxv>:
 *=======================================================================================================================
 * lora_relay_need2log_idx() - return first need2log spot or -1 if none
 *=======================================================================================================================
 */
int lora_relay_need2log_idx() {
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e59ec:	2000      	movs	r0, #0
    if (lora_msg_relay[i].need2log) {
 23e59ee:	f44f 7384 	mov.w	r3, #264	; 0x108
 23e59f2:	4a05      	ldr	r2, [pc, #20]	; (23e5a08 <_Z23lora_relay_need2log_idxv+0x1c>)
 23e59f4:	fb03 f100 	mul.w	r1, r3, r0
 23e59f8:	5c89      	ldrb	r1, [r1, r2]
 23e59fa:	b921      	cbnz	r1, 23e5a06 <_Z23lora_relay_need2log_idxv+0x1a>
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e59fc:	3001      	adds	r0, #1
 23e59fe:	2840      	cmp	r0, #64	; 0x40
 23e5a00:	d1f8      	bne.n	23e59f4 <_Z23lora_relay_need2log_idxv+0x8>
      return (i);
    }
  }
  return(-1);
 23e5a02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23e5a06:	4770      	bx	lr
 23e5a08:	1006aec0 	.word	0x1006aec0

023e5a0c <_Z22lora_device_initializev>:
/* 
 *=======================================================================================================================
 * lora_device_initialize()
 *=======================================================================================================================
 */
void lora_device_initialize() {
 23e5a0c:	b538      	push	{r3, r4, r5, lr}
  if (LORA_exists) {
 23e5a0e:	4b07      	ldr	r3, [pc, #28]	; (23e5a2c <_Z22lora_device_initializev+0x20>)
 23e5a10:	781b      	ldrb	r3, [r3, #0]
 23e5a12:	b14b      	cbz	r3, 23e5a28 <_Z22lora_device_initializev+0x1c>
    // Init LoRa Relay Message structure
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e5a14:	2400      	movs	r4, #0
 23e5a16:	4d06      	ldr	r5, [pc, #24]	; (23e5a30 <_Z22lora_device_initializev+0x24>)
      lora_relay_msg_free(&lora_msg_relay[i]);
 23e5a18:	4628      	mov	r0, r5
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e5a1a:	3401      	adds	r4, #1
      lora_relay_msg_free(&lora_msg_relay[i]);
 23e5a1c:	f7ff ffc0 	bl	23e59a0 <_Z19lora_relay_msg_freeP18LORA_MSG_RELAY_STR>
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e5a20:	2c40      	cmp	r4, #64	; 0x40
 23e5a22:	f505 7584 	add.w	r5, r5, #264	; 0x108
 23e5a26:	d1f7      	bne.n	23e5a18 <_Z22lora_device_initializev+0xc>
    }
  }
}
 23e5a28:	bd38      	pop	{r3, r4, r5, pc}
 23e5a2a:	bf00      	nop
 23e5a2c:	1006a2b1 	.word	0x1006a2b1
 23e5a30:	1006aec0 	.word	0x1006aec0

023e5a34 <_Z16lora_cf_validatev>:
/* 
 *=======================================================================================================================
 * lora_cf_validate() - Validate LoRa variables from CONFIG.TXT
 *=======================================================================================================================
 */
bool lora_cf_validate() {
 23e5a34:	b570      	push	{r4, r5, r6, lr}
  if (cf_aes_pkey == NULL) {
 23e5a36:	4b2a      	ldr	r3, [pc, #168]	; (23e5ae0 <_Z16lora_cf_validatev+0xac>)
 23e5a38:	681d      	ldr	r5, [r3, #0]
 23e5a3a:	b925      	cbnz	r5, 23e5a46 <_Z16lora_cf_validatev+0x12>
    Output ("AES PKEY !SET");
 23e5a3c:	4829      	ldr	r0, [pc, #164]	; (23e5ae4 <_Z16lora_cf_validatev+0xb0>)
    return (false);
  }
  else if (strlen (cf_aes_pkey) != 16) {
    Output ("AES PKEY !16 Bytes");
 23e5a3e:	f7ff fe25 	bl	23e568c <_Z6OutputPKc>
    return (false);    
 23e5a42:	2000      	movs	r0, #0
    sprintf(msgbuf, "AES_MYIV[%u]", AES_MYIV); Output (msgbuf);

    Output ("LORA CFV OK");
    return (true);
  }
}
 23e5a44:	bd70      	pop	{r4, r5, r6, pc}
  else if (strlen (cf_aes_pkey) != 16) {
 23e5a46:	4628      	mov	r0, r5
 23e5a48:	f7fe fcc6 	bl	23e43d8 <strlen>
 23e5a4c:	2810      	cmp	r0, #16
 23e5a4e:	d001      	beq.n	23e5a54 <_Z16lora_cf_validatev+0x20>
    Output ("AES PKEY !16 Bytes");
 23e5a50:	4825      	ldr	r0, [pc, #148]	; (23e5ae8 <_Z16lora_cf_validatev+0xb4>)
 23e5a52:	e7f4      	b.n	23e5a3e <_Z16lora_cf_validatev+0xa>
  else if (cf_aes_myiv == 0) {
 23e5a54:	4e25      	ldr	r6, [pc, #148]	; (23e5aec <_Z16lora_cf_validatev+0xb8>)
 23e5a56:	6834      	ldr	r4, [r6, #0]
 23e5a58:	b90c      	cbnz	r4, 23e5a5e <_Z16lora_cf_validatev+0x2a>
    Output ("AES MYIV !SET");
 23e5a5a:	4825      	ldr	r0, [pc, #148]	; (23e5af0 <_Z16lora_cf_validatev+0xbc>)
 23e5a5c:	e7ef      	b.n	23e5a3e <_Z16lora_cf_validatev+0xa>
  else if ((cf_lora_txpower<5) || (cf_lora_txpower>23)) {
 23e5a5e:	4b25      	ldr	r3, [pc, #148]	; (23e5af4 <_Z16lora_cf_validatev+0xc0>)
 23e5a60:	681b      	ldr	r3, [r3, #0]
 23e5a62:	3b05      	subs	r3, #5
 23e5a64:	2b12      	cmp	r3, #18
 23e5a66:	d901      	bls.n	23e5a6c <_Z16lora_cf_validatev+0x38>
    Output ("LORA PWR ERR");
 23e5a68:	4823      	ldr	r0, [pc, #140]	; (23e5af8 <_Z16lora_cf_validatev+0xc4>)
 23e5a6a:	e7e8      	b.n	23e5a3e <_Z16lora_cf_validatev+0xa>
  else if ((cf_lora_freq!=915) && (cf_lora_freq!=866) && (cf_lora_freq!=433)) {
 23e5a6c:	f240 3293 	movw	r2, #915	; 0x393
 23e5a70:	4b22      	ldr	r3, [pc, #136]	; (23e5afc <_Z16lora_cf_validatev+0xc8>)
 23e5a72:	681b      	ldr	r3, [r3, #0]
 23e5a74:	4293      	cmp	r3, r2
 23e5a76:	d009      	beq.n	23e5a8c <_Z16lora_cf_validatev+0x58>
 23e5a78:	f240 3262 	movw	r2, #866	; 0x362
 23e5a7c:	4293      	cmp	r3, r2
 23e5a7e:	d005      	beq.n	23e5a8c <_Z16lora_cf_validatev+0x58>
 23e5a80:	f240 12b1 	movw	r2, #433	; 0x1b1
 23e5a84:	4293      	cmp	r3, r2
 23e5a86:	d001      	beq.n	23e5a8c <_Z16lora_cf_validatev+0x58>
    Output ("LORA FREQ ERR");
 23e5a88:	481d      	ldr	r0, [pc, #116]	; (23e5b00 <_Z16lora_cf_validatev+0xcc>)
 23e5a8a:	e7d8      	b.n	23e5a3e <_Z16lora_cf_validatev+0xa>
  else if ((cf_lora_unitid<0) || (cf_lora_unitid>254)) {
 23e5a8c:	4b1d      	ldr	r3, [pc, #116]	; (23e5b04 <_Z16lora_cf_validatev+0xd0>)
 23e5a8e:	681b      	ldr	r3, [r3, #0]
 23e5a90:	2bfe      	cmp	r3, #254	; 0xfe
 23e5a92:	d901      	bls.n	23e5a98 <_Z16lora_cf_validatev+0x64>
    Output ("LORA ADDR ERR");
 23e5a94:	481c      	ldr	r0, [pc, #112]	; (23e5b08 <_Z16lora_cf_validatev+0xd4>)
 23e5a96:	e7d2      	b.n	23e5a3e <_Z16lora_cf_validatev+0xa>
    memcpy ((char *)AES_KEY, cf_aes_pkey, 16);
 23e5a98:	462b      	mov	r3, r5
 23e5a9a:	4a1c      	ldr	r2, [pc, #112]	; (23e5b0c <_Z16lora_cf_validatev+0xd8>)
 23e5a9c:	f105 0110 	add.w	r1, r5, #16
 23e5aa0:	f853 0b04 	ldr.w	r0, [r3], #4
 23e5aa4:	428b      	cmp	r3, r1
 23e5aa6:	f842 0b04 	str.w	r0, [r2], #4
 23e5aaa:	d1f9      	bne.n	23e5aa0 <_Z16lora_cf_validatev+0x6c>
    sprintf(msgbuf, "AES_KEY[%s]", cf_aes_pkey); Output (msgbuf);
 23e5aac:	462a      	mov	r2, r5
 23e5aae:	4918      	ldr	r1, [pc, #96]	; (23e5b10 <_Z16lora_cf_validatev+0xdc>)
 23e5ab0:	4818      	ldr	r0, [pc, #96]	; (23e5b14 <_Z16lora_cf_validatev+0xe0>)
 23e5ab2:	f011 fcd9 	bl	23f7468 <sprintf>
 23e5ab6:	4817      	ldr	r0, [pc, #92]	; (23e5b14 <_Z16lora_cf_validatev+0xe0>)
 23e5ab8:	f7ff fde8 	bl	23e568c <_Z6OutputPKc>
    AES_MYIV=cf_aes_myiv;
 23e5abc:	6832      	ldr	r2, [r6, #0]
 23e5abe:	4916      	ldr	r1, [pc, #88]	; (23e5b18 <_Z16lora_cf_validatev+0xe4>)
 23e5ac0:	17d3      	asrs	r3, r2, #31
 23e5ac2:	e9c1 2300 	strd	r2, r3, [r1]
    sprintf(msgbuf, "AES_MYIV[%u]", AES_MYIV); Output (msgbuf);
 23e5ac6:	4813      	ldr	r0, [pc, #76]	; (23e5b14 <_Z16lora_cf_validatev+0xe0>)
 23e5ac8:	4914      	ldr	r1, [pc, #80]	; (23e5b1c <_Z16lora_cf_validatev+0xe8>)
 23e5aca:	f011 fccd 	bl	23f7468 <sprintf>
 23e5ace:	4811      	ldr	r0, [pc, #68]	; (23e5b14 <_Z16lora_cf_validatev+0xe0>)
 23e5ad0:	f7ff fddc 	bl	23e568c <_Z6OutputPKc>
    Output ("LORA CFV OK");
 23e5ad4:	4812      	ldr	r0, [pc, #72]	; (23e5b20 <_Z16lora_cf_validatev+0xec>)
 23e5ad6:	f7ff fdd9 	bl	23e568c <_Z6OutputPKc>
    return (true);
 23e5ada:	2001      	movs	r0, #1
 23e5adc:	e7b2      	b.n	23e5a44 <_Z16lora_cf_validatev+0x10>
 23e5ade:	bf00      	nop
 23e5ae0:	1006ac7c 	.word	0x1006ac7c
 23e5ae4:	023fceec 	.word	0x023fceec
 23e5ae8:	023fcefa 	.word	0x023fcefa
 23e5aec:	1006ac78 	.word	0x1006ac78
 23e5af0:	023fcf0d 	.word	0x023fcf0d
 23e5af4:	1006a194 	.word	0x1006a194
 23e5af8:	023fcf1b 	.word	0x023fcf1b
 23e5afc:	1006a190 	.word	0x1006a190
 23e5b00:	023fcf28 	.word	0x023fcf28
 23e5b04:	1006a198 	.word	0x1006a198
 23e5b08:	023fcf36 	.word	0x023fcf36
 23e5b0c:	1006a264 	.word	0x1006a264
 23e5b10:	023fcf44 	.word	0x023fcf44
 23e5b14:	1006f128 	.word	0x1006f128
 23e5b18:	1006a278 	.word	0x1006a278
 23e5b1c:	023fcf50 	.word	0x023fcf50
 23e5b20:	023fcf5d 	.word	0x023fcf5d

023e5b24 <_Z16get_Bosch_ChipIDh>:
 *   Chip ID BME280 = 0x60 temp, pressure, humidity - I2C ADDRESS 0x77  (SD0 to GND = 0x76)  Register 0xE0 = Reset
 *   Chip ID BMP388 = 0x50 temp, pressure           - I2C ADDRESS 0x77  (SD0 to GND = 0x76)
 *   Chip ID BMP390 = 0x60 temp, pressure           - I2C ADDRESS 0x77  (SD0 to GND = 0x76)
 *=======================================================================================================================
 */
byte get_Bosch_ChipID (byte address) {
 23e5b24:	b570      	push	{r4, r5, r6, lr}
 23e5b26:	4605      	mov	r5, r0
  byte chip_id = 0;
  byte error;

  Output ("get_Bosch_ChipID()");
 23e5b28:	4848      	ldr	r0, [pc, #288]	; (23e5c4c <_Z16get_Bosch_ChipIDh+0x128>)
 23e5b2a:	f7ff fdaf 	bl	23e568c <_Z6OutputPKc>

  // Important! Need to check the 0x00 register first. Doing a 0x0D (not chip id loaction) on a bmp388 
  // will return a value that could match one of the IDs 

  // Check Register 0x00
  sprintf (msgbuf, "  I2C:%02X Reg:%02X", address, 0x00);
 23e5b2e:	462a      	mov	r2, r5
 23e5b30:	2300      	movs	r3, #0
 23e5b32:	4947      	ldr	r1, [pc, #284]	; (23e5c50 <_Z16get_Bosch_ChipIDh+0x12c>)
 23e5b34:	4847      	ldr	r0, [pc, #284]	; (23e5c54 <_Z16get_Bosch_ChipIDh+0x130>)
 23e5b36:	f011 fc97 	bl	23f7468 <sprintf>
  Output (msgbuf);
 23e5b3a:	4846      	ldr	r0, [pc, #280]	; (23e5c54 <_Z16get_Bosch_ChipIDh+0x130>)
 23e5b3c:	f7ff fda6 	bl	23e568c <_Z6OutputPKc>
  Wire.begin();
 23e5b40:	f014 f800 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e5b44:	f012 fb34 	bl	23f81b0 <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(address);
 23e5b48:	f013 fffc 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e5b4c:	4629      	mov	r1, r5
 23e5b4e:	f012 fb59 	bl	23f8204 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(0x00);  // BM3 CHIPID REGISTER
 23e5b52:	f013 fff7 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e5b56:	2100      	movs	r1, #0
 23e5b58:	f7ff fa08 	bl	23e4f6c <_ZN7TwoWire5writeEi.isra.0>
  error = Wire.endTransmission();
 23e5b5c:	f013 fff2 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e5b60:	f012 fb5b 	bl	23f821a <_ZN7TwoWire15endTransmissionEv>
    //  0:success
    //  1:data too long to fit in transmit buffer
    //  2:received NACK on transmit of address
    //  3:received NACK on transmit of data
    //  4:other error 
  if (error) {
 23e5b64:	4602      	mov	r2, r0
 23e5b66:	b370      	cbz	r0, 23e5bc6 <_Z16get_Bosch_ChipIDh+0xa2>
    sprintf (msgbuf, "  ERR_ET:%d", error);
 23e5b68:	493b      	ldr	r1, [pc, #236]	; (23e5c58 <_Z16get_Bosch_ChipIDh+0x134>)
      sprintf (msgbuf, "  CHIPID:%02X BME/390", chip_id);
      Output (msgbuf);
      return (chip_id); // Found a Sensor!   
    }
    else {
      sprintf (msgbuf, "  CHIPID:%02X InValid", chip_id);
 23e5b6a:	483a      	ldr	r0, [pc, #232]	; (23e5c54 <_Z16get_Bosch_ChipIDh+0x130>)
 23e5b6c:	f011 fc7c 	bl	23f7468 <sprintf>
      Output (msgbuf);      
    }
  }
  else {
    sprintf (msgbuf, "  ERR_RF:0");
    Output (msgbuf);
 23e5b70:	4838      	ldr	r0, [pc, #224]	; (23e5c54 <_Z16get_Bosch_ChipIDh+0x130>)
 23e5b72:	f7ff fd8b 	bl	23e568c <_Z6OutputPKc>
  }

  // Check Register 0xD0
  chip_id = 0;
  sprintf (msgbuf, "  I2C:%02X Reg:%02X", address, 0xD0);
 23e5b76:	23d0      	movs	r3, #208	; 0xd0
 23e5b78:	462a      	mov	r2, r5
 23e5b7a:	4935      	ldr	r1, [pc, #212]	; (23e5c50 <_Z16get_Bosch_ChipIDh+0x12c>)
 23e5b7c:	4835      	ldr	r0, [pc, #212]	; (23e5c54 <_Z16get_Bosch_ChipIDh+0x130>)
 23e5b7e:	f011 fc73 	bl	23f7468 <sprintf>
  Output (msgbuf);
 23e5b82:	4834      	ldr	r0, [pc, #208]	; (23e5c54 <_Z16get_Bosch_ChipIDh+0x130>)
 23e5b84:	f7ff fd82 	bl	23e568c <_Z6OutputPKc>
  Wire.begin();
 23e5b88:	f013 ffdc 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e5b8c:	f012 fb10 	bl	23f81b0 <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(address);
 23e5b90:	f013 ffd8 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e5b94:	4629      	mov	r1, r5
 23e5b96:	f012 fb35 	bl	23f8204 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(0xD0);  // BM2 CHIPID REGISTER
 23e5b9a:	f013 ffd3 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e5b9e:	21d0      	movs	r1, #208	; 0xd0
 23e5ba0:	f7ff f9e4 	bl	23e4f6c <_ZN7TwoWire5writeEi.isra.0>
  error = Wire.endTransmission();
 23e5ba4:	f013 ffce 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e5ba8:	f012 fb37 	bl	23f821a <_ZN7TwoWire15endTransmissionEv>
    //  0:success
    //  1:data too long to fit in transmit buffer
    //  2:received NACK on transmit of address
    //  3:received NACK on transmit of data
    //  4:other error 
  if (error) {
 23e5bac:	2800      	cmp	r0, #0
 23e5bae:	d031      	beq.n	23e5c14 <_Z16get_Bosch_ChipIDh+0xf0>
    sprintf (msgbuf, "  ERR_ET:%d", error);
 23e5bb0:	4602      	mov	r2, r0
 23e5bb2:	4929      	ldr	r1, [pc, #164]	; (23e5c58 <_Z16get_Bosch_ChipIDh+0x134>)
 23e5bb4:	4827      	ldr	r0, [pc, #156]	; (23e5c54 <_Z16get_Bosch_ChipIDh+0x130>)
 23e5bb6:	f011 fc57 	bl	23f7468 <sprintf>
    Output (msgbuf);
 23e5bba:	4826      	ldr	r0, [pc, #152]	; (23e5c54 <_Z16get_Bosch_ChipIDh+0x130>)
 23e5bbc:	f7ff fd66 	bl	23e568c <_Z6OutputPKc>
  }
  else {
    sprintf (msgbuf, "  ERR_RF:0");
    Output (msgbuf);
  }
  return(0);
 23e5bc0:	2400      	movs	r4, #0
}
 23e5bc2:	4620      	mov	r0, r4
 23e5bc4:	bd70      	pop	{r4, r5, r6, pc}
  else if (Wire.requestFrom(address, 1)) {  // Returns the number of bytes returned from the slave device 
 23e5bc6:	f013 ffbd 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e5bca:	2201      	movs	r2, #1
 23e5bcc:	4629      	mov	r1, r5
 23e5bce:	f012 fb16 	bl	23f81fe <_ZN7TwoWire11requestFromEhj>
 23e5bd2:	b1d0      	cbz	r0, 23e5c0a <_Z16get_Bosch_ChipIDh+0xe6>
    chip_id = Wire.read();
 23e5bd4:	f013 ffb6 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e5bd8:	6803      	ldr	r3, [r0, #0]
 23e5bda:	695b      	ldr	r3, [r3, #20]
 23e5bdc:	4798      	blx	r3
 23e5bde:	b2c4      	uxtb	r4, r0
    if (chip_id == BMP280_CHIP_ID) { // 0x58
 23e5be0:	2c58      	cmp	r4, #88	; 0x58
      sprintf (msgbuf, "  CHIPID:%02X BMP280", chip_id);
 23e5be2:	4622      	mov	r2, r4
    if (chip_id == BMP280_CHIP_ID) { // 0x58
 23e5be4:	d101      	bne.n	23e5bea <_Z16get_Bosch_ChipIDh+0xc6>
      sprintf (msgbuf, "  CHIPID:%02X BMP280", chip_id);
 23e5be6:	491d      	ldr	r1, [pc, #116]	; (23e5c5c <_Z16get_Bosch_ChipIDh+0x138>)
 23e5be8:	e002      	b.n	23e5bf0 <_Z16get_Bosch_ChipIDh+0xcc>
    else if (chip_id == BMP388_CHIP_ID) {  // 0x50
 23e5bea:	2c50      	cmp	r4, #80	; 0x50
 23e5bec:	d107      	bne.n	23e5bfe <_Z16get_Bosch_ChipIDh+0xda>
      sprintf (msgbuf, "  CHIPID:%02X BMP388", chip_id);
 23e5bee:	491c      	ldr	r1, [pc, #112]	; (23e5c60 <_Z16get_Bosch_ChipIDh+0x13c>)
 23e5bf0:	4818      	ldr	r0, [pc, #96]	; (23e5c54 <_Z16get_Bosch_ChipIDh+0x130>)
 23e5bf2:	f011 fc39 	bl	23f7468 <sprintf>
    Output (msgbuf);
 23e5bf6:	4817      	ldr	r0, [pc, #92]	; (23e5c54 <_Z16get_Bosch_ChipIDh+0x130>)
 23e5bf8:	f7ff fd48 	bl	23e568c <_Z6OutputPKc>
 23e5bfc:	e7e1      	b.n	23e5bc2 <_Z16get_Bosch_ChipIDh+0x9e>
    else if (chip_id == BME280_BMP390_CHIP_ID) {  // 0x60
 23e5bfe:	2c60      	cmp	r4, #96	; 0x60
 23e5c00:	d101      	bne.n	23e5c06 <_Z16get_Bosch_ChipIDh+0xe2>
      sprintf (msgbuf, "  CHIPID:%02X BME/390", chip_id);
 23e5c02:	4918      	ldr	r1, [pc, #96]	; (23e5c64 <_Z16get_Bosch_ChipIDh+0x140>)
 23e5c04:	e7f4      	b.n	23e5bf0 <_Z16get_Bosch_ChipIDh+0xcc>
      sprintf (msgbuf, "  CHIPID:%02X InValid", chip_id);
 23e5c06:	4918      	ldr	r1, [pc, #96]	; (23e5c68 <_Z16get_Bosch_ChipIDh+0x144>)
 23e5c08:	e7af      	b.n	23e5b6a <_Z16get_Bosch_ChipIDh+0x46>
    sprintf (msgbuf, "  ERR_RF:0");
 23e5c0a:	4918      	ldr	r1, [pc, #96]	; (23e5c6c <_Z16get_Bosch_ChipIDh+0x148>)
 23e5c0c:	4811      	ldr	r0, [pc, #68]	; (23e5c54 <_Z16get_Bosch_ChipIDh+0x130>)
 23e5c0e:	f016 fdeb 	bl	23fc7e8 <strcpy>
 23e5c12:	e7ad      	b.n	23e5b70 <_Z16get_Bosch_ChipIDh+0x4c>
  else if (Wire.requestFrom(address, 1)) {  // Returns the number of bytes returned from the slave device 
 23e5c14:	f013 ff96 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e5c18:	2201      	movs	r2, #1
 23e5c1a:	4629      	mov	r1, r5
 23e5c1c:	f012 faef 	bl	23f81fe <_ZN7TwoWire11requestFromEhj>
 23e5c20:	4604      	mov	r4, r0
 23e5c22:	b170      	cbz	r0, 23e5c42 <_Z16get_Bosch_ChipIDh+0x11e>
    chip_id = Wire.read(); 
 23e5c24:	f013 ff8e 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e5c28:	6803      	ldr	r3, [r0, #0]
 23e5c2a:	695b      	ldr	r3, [r3, #20]
 23e5c2c:	4798      	blx	r3
 23e5c2e:	b2c4      	uxtb	r4, r0
    if (chip_id == BMP280_CHIP_ID) { // 0x58
 23e5c30:	2c58      	cmp	r4, #88	; 0x58
      sprintf (msgbuf, "  CHIPID:%02X BMP280", chip_id);
 23e5c32:	4622      	mov	r2, r4
    if (chip_id == BMP280_CHIP_ID) { // 0x58
 23e5c34:	d0d7      	beq.n	23e5be6 <_Z16get_Bosch_ChipIDh+0xc2>
    else if (chip_id == BMP388_CHIP_ID) {  // 0x50
 23e5c36:	2c50      	cmp	r4, #80	; 0x50
 23e5c38:	d0d9      	beq.n	23e5bee <_Z16get_Bosch_ChipIDh+0xca>
    else if (chip_id == BME280_BMP390_CHIP_ID) {  // 0x60
 23e5c3a:	2c60      	cmp	r4, #96	; 0x60
 23e5c3c:	d0e1      	beq.n	23e5c02 <_Z16get_Bosch_ChipIDh+0xde>
      sprintf (msgbuf, "  CHIPID:%02X InValid", chip_id);
 23e5c3e:	490a      	ldr	r1, [pc, #40]	; (23e5c68 <_Z16get_Bosch_ChipIDh+0x144>)
 23e5c40:	e7b8      	b.n	23e5bb4 <_Z16get_Bosch_ChipIDh+0x90>
    sprintf (msgbuf, "  ERR_RF:0");
 23e5c42:	490a      	ldr	r1, [pc, #40]	; (23e5c6c <_Z16get_Bosch_ChipIDh+0x148>)
 23e5c44:	4803      	ldr	r0, [pc, #12]	; (23e5c54 <_Z16get_Bosch_ChipIDh+0x130>)
 23e5c46:	f016 fdcf 	bl	23fc7e8 <strcpy>
 23e5c4a:	e7d4      	b.n	23e5bf6 <_Z16get_Bosch_ChipIDh+0xd2>
 23e5c4c:	023fcf69 	.word	0x023fcf69
 23e5c50:	023fcf7c 	.word	0x023fcf7c
 23e5c54:	1006f128 	.word	0x1006f128
 23e5c58:	023fcf90 	.word	0x023fcf90
 23e5c5c:	023fcf9c 	.word	0x023fcf9c
 23e5c60:	023fcfb1 	.word	0x023fcfb1
 23e5c64:	023fcfc6 	.word	0x023fcfc6
 23e5c68:	023fcfdc 	.word	0x023fcfdc
 23e5c6c:	023fcff2 	.word	0x023fcff2

023e5c70 <_Z14bmx_initializev>:
/* 
 *=======================================================================================================================
 * bmx_initialize() - Bosch sensor initialize
 *=======================================================================================================================
 */
void bmx_initialize() {
 23e5c70:	b538      	push	{r3, r4, r5, lr}
  Output("BMX:INIT");
 23e5c72:	486e      	ldr	r0, [pc, #440]	; (23e5e2c <_Z14bmx_initializev+0x1bc>)
 23e5c74:	f7ff fd0a 	bl	23e568c <_Z6OutputPKc>
  
  // 1st Bosch Sensor - Need to see which (BMP, BME, BM3) is plugged in
  BMX_1_chip_id = get_Bosch_ChipID(BMX_ADDRESS_1);
 23e5c78:	2077      	movs	r0, #119	; 0x77
 23e5c7a:	f7ff ff53 	bl	23e5b24 <_Z16get_Bosch_ChipIDh>
 23e5c7e:	4b6c      	ldr	r3, [pc, #432]	; (23e5e30 <_Z14bmx_initializev+0x1c0>)

  switch (BMX_1_chip_id) {
 23e5c80:	2858      	cmp	r0, #88	; 0x58
  BMX_1_chip_id = get_Bosch_ChipID(BMX_ADDRESS_1);
 23e5c82:	4602      	mov	r2, r0
 23e5c84:	4c6b      	ldr	r4, [pc, #428]	; (23e5e34 <_Z14bmx_initializev+0x1c4>)
 23e5c86:	7018      	strb	r0, [r3, #0]
  switch (BMX_1_chip_id) {
 23e5c88:	d011      	beq.n	23e5cae <_Z14bmx_initializev+0x3e>
 23e5c8a:	2860      	cmp	r0, #96	; 0x60
 23e5c8c:	d046      	beq.n	23e5d1c <_Z14bmx_initializev+0xac>
 23e5c8e:	2850      	cmp	r0, #80	; 0x50
 23e5c90:	d176      	bne.n	23e5d80 <_Z14bmx_initializev+0x110>
        float p = bme1.readPressure();
      }
    break;

    case BMP388_CHIP_ID :
      if (!bm31.begin_I2C(BMX_ADDRESS_1)) { 
 23e5c92:	f013 ff57 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e5c96:	2177      	movs	r1, #119	; 0x77
 23e5c98:	4602      	mov	r2, r0
 23e5c9a:	4867      	ldr	r0, [pc, #412]	; (23e5e38 <_Z14bmx_initializev+0x1c8>)
 23e5c9c:	f009 fbc2 	bl	23ef424 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e5ca0:	4b66      	ldr	r3, [pc, #408]	; (23e5e3c <_Z14bmx_initializev+0x1cc>)
 23e5ca2:	2800      	cmp	r0, #0
 23e5ca4:	d165      	bne.n	23e5d72 <_Z14bmx_initializev+0x102>
        msgp = (char *) "BM31 ERR";
 23e5ca6:	4a66      	ldr	r2, [pc, #408]	; (23e5e40 <_Z14bmx_initializev+0x1d0>)
        BMX_1_exists = false;
 23e5ca8:	7018      	strb	r0, [r3, #0]
        msgp = (char *) "BM31 ERR";
 23e5caa:	6022      	str	r2, [r4, #0]
        BMX_1_exists = false;
 23e5cac:	e008      	b.n	23e5cc0 <_Z14bmx_initializev+0x50>
      if (!bmp1.begin(BMX_ADDRESS_1)) { 
 23e5cae:	2177      	movs	r1, #119	; 0x77
 23e5cb0:	4864      	ldr	r0, [pc, #400]	; (23e5e44 <_Z14bmx_initializev+0x1d4>)
 23e5cb2:	f009 f9b5 	bl	23ef020 <_ZN15Adafruit_BMP2805beginEhh>
 23e5cb6:	4a61      	ldr	r2, [pc, #388]	; (23e5e3c <_Z14bmx_initializev+0x1cc>)
 23e5cb8:	b940      	cbnz	r0, 23e5ccc <_Z14bmx_initializev+0x5c>
        msgp = (char *) "BMP1 ERR";
 23e5cba:	4b63      	ldr	r3, [pc, #396]	; (23e5e48 <_Z14bmx_initializev+0x1d8>)
        BMX_1_exists = false;
 23e5cbc:	7010      	strb	r0, [r2, #0]
        msgp = (char *) "BMP1 ERR";
 23e5cbe:	6023      	str	r3, [r4, #0]
        SystemStatusBits |= SSB_BMX_1;  // Turn On Bit          
 23e5cc0:	4a62      	ldr	r2, [pc, #392]	; (23e5e4c <_Z14bmx_initializev+0x1dc>)
 23e5cc2:	6813      	ldr	r3, [r2, #0]
 23e5cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 23e5cc8:	6013      	str	r3, [r2, #0]
 23e5cca:	e008      	b.n	23e5cde <_Z14bmx_initializev+0x6e>
        BMX_1_exists = true;
 23e5ccc:	2301      	movs	r3, #1
 23e5cce:	7013      	strb	r3, [r2, #0]
        BMX_1_type = BMX_TYPE_BMP280;
 23e5cd0:	4a5f      	ldr	r2, [pc, #380]	; (23e5e50 <_Z14bmx_initializev+0x1e0>)
        float p = bmp1.readPressure();
 23e5cd2:	485c      	ldr	r0, [pc, #368]	; (23e5e44 <_Z14bmx_initializev+0x1d4>)
        BMX_1_type = BMX_TYPE_BMP280;
 23e5cd4:	7013      	strb	r3, [r2, #0]
        msgp = (char *) "BMP1 OK";
 23e5cd6:	4b5f      	ldr	r3, [pc, #380]	; (23e5e54 <_Z14bmx_initializev+0x1e4>)
 23e5cd8:	6023      	str	r3, [r4, #0]
        float p = bmp1.readPressure();
 23e5cda:	f009 fa2b 	bl	23ef134 <_ZN15Adafruit_BMP28012readPressureEv>

    default:
      msgp = (char *) "BMX_1 NF";
    break;
  }
  Output (msgp);
 23e5cde:	6820      	ldr	r0, [r4, #0]
 23e5ce0:	f7ff fcd4 	bl	23e568c <_Z6OutputPKc>

  // 2nd Bosch Sensor - Need to see which (BMP, BME, BM3) is plugged in
  BMX_2_chip_id = get_Bosch_ChipID(BMX_ADDRESS_2);
 23e5ce4:	2076      	movs	r0, #118	; 0x76
 23e5ce6:	f7ff ff1d 	bl	23e5b24 <_Z16get_Bosch_ChipIDh>
 23e5cea:	4b5b      	ldr	r3, [pc, #364]	; (23e5e58 <_Z14bmx_initializev+0x1e8>)
  switch (BMX_2_chip_id) {
 23e5cec:	2858      	cmp	r0, #88	; 0x58
  BMX_2_chip_id = get_Bosch_ChipID(BMX_ADDRESS_2);
 23e5cee:	4602      	mov	r2, r0
 23e5cf0:	7018      	strb	r0, [r3, #0]
  switch (BMX_2_chip_id) {
 23e5cf2:	d048      	beq.n	23e5d86 <_Z14bmx_initializev+0x116>
 23e5cf4:	2860      	cmp	r0, #96	; 0x60
 23e5cf6:	d063      	beq.n	23e5dc0 <_Z14bmx_initializev+0x150>
 23e5cf8:	2850      	cmp	r0, #80	; 0x50
 23e5cfa:	f040 8093 	bne.w	23e5e24 <_Z14bmx_initializev+0x1b4>
        float p = bme2.readPressure();
      }
    break;

    case BMP388_CHIP_ID :
      if (!bm32.begin_I2C(BMX_ADDRESS_2)) { 
 23e5cfe:	f013 ff21 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e5d02:	2176      	movs	r1, #118	; 0x76
 23e5d04:	4602      	mov	r2, r0
 23e5d06:	4855      	ldr	r0, [pc, #340]	; (23e5e5c <_Z14bmx_initializev+0x1ec>)
 23e5d08:	f009 fb8c 	bl	23ef424 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e5d0c:	4b54      	ldr	r3, [pc, #336]	; (23e5e60 <_Z14bmx_initializev+0x1f0>)
 23e5d0e:	2800      	cmp	r0, #0
 23e5d10:	f040 8081 	bne.w	23e5e16 <_Z14bmx_initializev+0x1a6>
        msgp = (char *) "BM32 ERR";
 23e5d14:	4a53      	ldr	r2, [pc, #332]	; (23e5e64 <_Z14bmx_initializev+0x1f4>)
        BMX_2_exists = false;
 23e5d16:	7018      	strb	r0, [r3, #0]
        msgp = (char *) "BM32 ERR";
 23e5d18:	6022      	str	r2, [r4, #0]
        BMX_2_exists = false;
 23e5d1a:	e03d      	b.n	23e5d98 <_Z14bmx_initializev+0x128>
      if (!bme1.begin(BMX_ADDRESS_1)) { 
 23e5d1c:	f013 ff12 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e5d20:	2177      	movs	r1, #119	; 0x77
 23e5d22:	4602      	mov	r2, r0
 23e5d24:	4850      	ldr	r0, [pc, #320]	; (23e5e68 <_Z14bmx_initializev+0x1f8>)
 23e5d26:	f008 fd86 	bl	23ee836 <_ZN15Adafruit_BME2805beginEhP7TwoWire>
 23e5d2a:	4d44      	ldr	r5, [pc, #272]	; (23e5e3c <_Z14bmx_initializev+0x1cc>)
 23e5d2c:	b9b0      	cbnz	r0, 23e5d5c <_Z14bmx_initializev+0xec>
        if (!bm31.begin_I2C(BMX_ADDRESS_1)) {  // Perhaps it is a BMP390
 23e5d2e:	f013 ff09 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e5d32:	2177      	movs	r1, #119	; 0x77
 23e5d34:	4602      	mov	r2, r0
 23e5d36:	4840      	ldr	r0, [pc, #256]	; (23e5e38 <_Z14bmx_initializev+0x1c8>)
 23e5d38:	f009 fb74 	bl	23ef424 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e5d3c:	b918      	cbnz	r0, 23e5d46 <_Z14bmx_initializev+0xd6>
          msgp = (char *) "BMX1 ERR";
 23e5d3e:	4b4b      	ldr	r3, [pc, #300]	; (23e5e6c <_Z14bmx_initializev+0x1fc>)
          BMX_1_exists = false;
 23e5d40:	7028      	strb	r0, [r5, #0]
          msgp = (char *) "BMX1 ERR";
 23e5d42:	6023      	str	r3, [r4, #0]
          SystemStatusBits |= SSB_BMX_1;  // Turn On Bit          
 23e5d44:	e7bc      	b.n	23e5cc0 <_Z14bmx_initializev+0x50>
          BMX_1_exists = true;
 23e5d46:	2301      	movs	r3, #1
          BMX_1_type = BMX_TYPE_BMP390;
 23e5d48:	2204      	movs	r2, #4
          BMX_1_exists = true;
 23e5d4a:	702b      	strb	r3, [r5, #0]
          BMX_1_type = BMX_TYPE_BMP390;
 23e5d4c:	4b40      	ldr	r3, [pc, #256]	; (23e5e50 <_Z14bmx_initializev+0x1e0>)
 23e5d4e:	701a      	strb	r2, [r3, #0]
          msgp = (char *) "BMP390_1 OK"; 
 23e5d50:	4b47      	ldr	r3, [pc, #284]	; (23e5e70 <_Z14bmx_initializev+0x200>)
        float p = bm31.readPressure();
 23e5d52:	4839      	ldr	r0, [pc, #228]	; (23e5e38 <_Z14bmx_initializev+0x1c8>)
        msgp = (char *) "BM31 OK";
 23e5d54:	6023      	str	r3, [r4, #0]
        float p = bm31.readPressure();
 23e5d56:	f009 fbf8 	bl	23ef54a <_ZN15Adafruit_BMP3XX12readPressureEv>
 23e5d5a:	e7c0      	b.n	23e5cde <_Z14bmx_initializev+0x6e>
        BMX_1_exists = true;
 23e5d5c:	2301      	movs	r3, #1
        BMX_1_type = BMX_TYPE_BME280;
 23e5d5e:	2202      	movs	r2, #2
        BMX_1_exists = true;
 23e5d60:	702b      	strb	r3, [r5, #0]
        BMX_1_type = BMX_TYPE_BME280;
 23e5d62:	4b3b      	ldr	r3, [pc, #236]	; (23e5e50 <_Z14bmx_initializev+0x1e0>)
        float p = bme1.readPressure();
 23e5d64:	4840      	ldr	r0, [pc, #256]	; (23e5e68 <_Z14bmx_initializev+0x1f8>)
        BMX_1_type = BMX_TYPE_BME280;
 23e5d66:	701a      	strb	r2, [r3, #0]
        msgp = (char *) "BME280_1 OK";
 23e5d68:	4b42      	ldr	r3, [pc, #264]	; (23e5e74 <_Z14bmx_initializev+0x204>)
 23e5d6a:	6023      	str	r3, [r4, #0]
        float p = bme1.readPressure();
 23e5d6c:	f008 fd9a 	bl	23ee8a4 <_ZN15Adafruit_BME28012readPressureEv>
 23e5d70:	e7b5      	b.n	23e5cde <_Z14bmx_initializev+0x6e>
        BMX_1_exists = true;
 23e5d72:	2201      	movs	r2, #1
 23e5d74:	701a      	strb	r2, [r3, #0]
        BMX_1_type = BMX_TYPE_BMP388;
 23e5d76:	2203      	movs	r2, #3
 23e5d78:	4b35      	ldr	r3, [pc, #212]	; (23e5e50 <_Z14bmx_initializev+0x1e0>)
 23e5d7a:	701a      	strb	r2, [r3, #0]
        msgp = (char *) "BM31 OK";
 23e5d7c:	4b3e      	ldr	r3, [pc, #248]	; (23e5e78 <_Z14bmx_initializev+0x208>)
 23e5d7e:	e7e8      	b.n	23e5d52 <_Z14bmx_initializev+0xe2>
      msgp = (char *) "BMX_1 NF";
 23e5d80:	4b3e      	ldr	r3, [pc, #248]	; (23e5e7c <_Z14bmx_initializev+0x20c>)
 23e5d82:	6023      	str	r3, [r4, #0]
    break;
 23e5d84:	e7ab      	b.n	23e5cde <_Z14bmx_initializev+0x6e>
      if (!bmp2.begin(BMX_ADDRESS_2)) { 
 23e5d86:	2176      	movs	r1, #118	; 0x76
 23e5d88:	483d      	ldr	r0, [pc, #244]	; (23e5e80 <_Z14bmx_initializev+0x210>)
 23e5d8a:	f009 f949 	bl	23ef020 <_ZN15Adafruit_BMP2805beginEhh>
 23e5d8e:	4a34      	ldr	r2, [pc, #208]	; (23e5e60 <_Z14bmx_initializev+0x1f0>)
 23e5d90:	b940      	cbnz	r0, 23e5da4 <_Z14bmx_initializev+0x134>
        msgp = (char *) "BMP2 ERR";
 23e5d92:	4b3c      	ldr	r3, [pc, #240]	; (23e5e84 <_Z14bmx_initializev+0x214>)
        BMX_2_exists = false;
 23e5d94:	7010      	strb	r0, [r2, #0]
        msgp = (char *) "BMP2 ERR";
 23e5d96:	6023      	str	r3, [r4, #0]
        SystemStatusBits |= SSB_BMX_2;  // Turn On Bit          
 23e5d98:	4a2c      	ldr	r2, [pc, #176]	; (23e5e4c <_Z14bmx_initializev+0x1dc>)
 23e5d9a:	6813      	ldr	r3, [r2, #0]
 23e5d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 23e5da0:	6013      	str	r3, [r2, #0]
 23e5da2:	e008      	b.n	23e5db6 <_Z14bmx_initializev+0x146>
        BMX_2_exists = true;
 23e5da4:	2301      	movs	r3, #1
 23e5da6:	7013      	strb	r3, [r2, #0]
        BMX_2_type = BMX_TYPE_BMP280;
 23e5da8:	4a37      	ldr	r2, [pc, #220]	; (23e5e88 <_Z14bmx_initializev+0x218>)
        float p = bmp2.readPressure();
 23e5daa:	4835      	ldr	r0, [pc, #212]	; (23e5e80 <_Z14bmx_initializev+0x210>)
        BMX_2_type = BMX_TYPE_BMP280;
 23e5dac:	7013      	strb	r3, [r2, #0]
        msgp = (char *) "BMP2 OK";
 23e5dae:	4b37      	ldr	r3, [pc, #220]	; (23e5e8c <_Z14bmx_initializev+0x21c>)
 23e5db0:	6023      	str	r3, [r4, #0]
        float p = bmp2.readPressure();
 23e5db2:	f009 f9bf 	bl	23ef134 <_ZN15Adafruit_BMP28012readPressureEv>

    default:
      msgp = (char *) "BMX_2 NF";
    break;
  }
  Output (msgp);
 23e5db6:	6820      	ldr	r0, [r4, #0]
}
 23e5db8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
 23e5dbc:	f7ff bc66 	b.w	23e568c <_Z6OutputPKc>
      if (!bme2.begin(BMX_ADDRESS_2)) { 
 23e5dc0:	f013 fec0 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e5dc4:	2176      	movs	r1, #118	; 0x76
 23e5dc6:	4602      	mov	r2, r0
 23e5dc8:	4831      	ldr	r0, [pc, #196]	; (23e5e90 <_Z14bmx_initializev+0x220>)
 23e5dca:	f008 fd34 	bl	23ee836 <_ZN15Adafruit_BME2805beginEhP7TwoWire>
 23e5dce:	4d24      	ldr	r5, [pc, #144]	; (23e5e60 <_Z14bmx_initializev+0x1f0>)
 23e5dd0:	b9b0      	cbnz	r0, 23e5e00 <_Z14bmx_initializev+0x190>
        if (!bm32.begin_I2C(BMX_ADDRESS_2)) {  // Perhaps it is a BMP390
 23e5dd2:	f013 feb7 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e5dd6:	2176      	movs	r1, #118	; 0x76
 23e5dd8:	4602      	mov	r2, r0
 23e5dda:	4820      	ldr	r0, [pc, #128]	; (23e5e5c <_Z14bmx_initializev+0x1ec>)
 23e5ddc:	f009 fb22 	bl	23ef424 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e5de0:	b918      	cbnz	r0, 23e5dea <_Z14bmx_initializev+0x17a>
          msgp = (char *) "BMX2 ERR";
 23e5de2:	4b2c      	ldr	r3, [pc, #176]	; (23e5e94 <_Z14bmx_initializev+0x224>)
          BMX_2_exists = false;
 23e5de4:	7028      	strb	r0, [r5, #0]
          msgp = (char *) "BMX2 ERR";
 23e5de6:	6023      	str	r3, [r4, #0]
          SystemStatusBits |= SSB_BMX_2;  // Turn On Bit          
 23e5de8:	e7d6      	b.n	23e5d98 <_Z14bmx_initializev+0x128>
          BMX_2_exists = true;
 23e5dea:	2301      	movs	r3, #1
          BMX_2_type = BMX_TYPE_BMP390;
 23e5dec:	2204      	movs	r2, #4
          BMX_2_exists = true;
 23e5dee:	702b      	strb	r3, [r5, #0]
          BMX_2_type = BMX_TYPE_BMP390;
 23e5df0:	4b25      	ldr	r3, [pc, #148]	; (23e5e88 <_Z14bmx_initializev+0x218>)
 23e5df2:	701a      	strb	r2, [r3, #0]
          msgp = (char *) "BMP390_2 OK"; 
 23e5df4:	4b28      	ldr	r3, [pc, #160]	; (23e5e98 <_Z14bmx_initializev+0x228>)
        float p = bm32.readPressure();
 23e5df6:	4819      	ldr	r0, [pc, #100]	; (23e5e5c <_Z14bmx_initializev+0x1ec>)
        msgp = (char *) "BM32 OK";
 23e5df8:	6023      	str	r3, [r4, #0]
        float p = bm32.readPressure();
 23e5dfa:	f009 fba6 	bl	23ef54a <_ZN15Adafruit_BMP3XX12readPressureEv>
 23e5dfe:	e7da      	b.n	23e5db6 <_Z14bmx_initializev+0x146>
        BMX_2_exists = true;
 23e5e00:	2301      	movs	r3, #1
        BMX_2_type = BMX_TYPE_BME280;
 23e5e02:	2202      	movs	r2, #2
        BMX_2_exists = true;
 23e5e04:	702b      	strb	r3, [r5, #0]
        BMX_2_type = BMX_TYPE_BME280;
 23e5e06:	4b20      	ldr	r3, [pc, #128]	; (23e5e88 <_Z14bmx_initializev+0x218>)
        float p = bme2.readPressure();
 23e5e08:	4821      	ldr	r0, [pc, #132]	; (23e5e90 <_Z14bmx_initializev+0x220>)
        BMX_2_type = BMX_TYPE_BME280;
 23e5e0a:	701a      	strb	r2, [r3, #0]
        msgp = (char *) "BME280_2 OK";
 23e5e0c:	4b23      	ldr	r3, [pc, #140]	; (23e5e9c <_Z14bmx_initializev+0x22c>)
 23e5e0e:	6023      	str	r3, [r4, #0]
        float p = bme2.readPressure();
 23e5e10:	f008 fd48 	bl	23ee8a4 <_ZN15Adafruit_BME28012readPressureEv>
 23e5e14:	e7cf      	b.n	23e5db6 <_Z14bmx_initializev+0x146>
        BMX_2_exists = true;
 23e5e16:	2201      	movs	r2, #1
 23e5e18:	701a      	strb	r2, [r3, #0]
        BMX_2_type = BMX_TYPE_BMP388;
 23e5e1a:	2203      	movs	r2, #3
 23e5e1c:	4b1a      	ldr	r3, [pc, #104]	; (23e5e88 <_Z14bmx_initializev+0x218>)
 23e5e1e:	701a      	strb	r2, [r3, #0]
        msgp = (char *) "BM32 OK";
 23e5e20:	4b1f      	ldr	r3, [pc, #124]	; (23e5ea0 <_Z14bmx_initializev+0x230>)
 23e5e22:	e7e8      	b.n	23e5df6 <_Z14bmx_initializev+0x186>
      msgp = (char *) "BMX_2 NF";
 23e5e24:	4b1f      	ldr	r3, [pc, #124]	; (23e5ea4 <_Z14bmx_initializev+0x234>)
 23e5e26:	6023      	str	r3, [r4, #0]
    break;
 23e5e28:	e7c5      	b.n	23e5db6 <_Z14bmx_initializev+0x146>
 23e5e2a:	bf00      	nop
 23e5e2c:	023fcffd 	.word	0x023fcffd
 23e5e30:	1006a281 	.word	0x1006a281
 23e5e34:	1006f528 	.word	0x1006f528
 23e5e38:	1006a948 	.word	0x1006a948
 23e5e3c:	1006a282 	.word	0x1006a282
 23e5e40:	023fd038 	.word	0x023fd038
 23e5e44:	1006abf8 	.word	0x1006abf8
 23e5e48:	023fd006 	.word	0x023fd006
 23e5e4c:	1006a178 	.word	0x1006a178
 23e5e50:	1006a283 	.word	0x1006a283
 23e5e54:	023fd00f 	.word	0x023fd00f
 23e5e58:	1006a284 	.word	0x1006a284
 23e5e5c:	1006aa48 	.word	0x1006aa48
 23e5e60:	1006a285 	.word	0x1006a285
 23e5e64:	023fd084 	.word	0x023fd084
 23e5e68:	1006ab48 	.word	0x1006ab48
 23e5e6c:	023fd017 	.word	0x023fd017
 23e5e70:	023fd020 	.word	0x023fd020
 23e5e74:	023fd02c 	.word	0x023fd02c
 23e5e78:	023fd041 	.word	0x023fd041
 23e5e7c:	023fd049 	.word	0x023fd049
 23e5e80:	1006ac38 	.word	0x1006ac38
 23e5e84:	023fd052 	.word	0x023fd052
 23e5e88:	1006a286 	.word	0x1006a286
 23e5e8c:	023fd05b 	.word	0x023fd05b
 23e5e90:	1006aba0 	.word	0x1006aba0
 23e5e94:	023fd063 	.word	0x023fd063
 23e5e98:	023fd06c 	.word	0x023fd06c
 23e5e9c:	023fd078 	.word	0x023fd078
 23e5ea0:	023fd08d 	.word	0x023fd08d
 23e5ea4:	023fd095 	.word	0x023fd095

023e5ea8 <_Z17htu21d_initializev>:
/* 
 *=======================================================================================================================
 * htu21d_initialize() - HTU21D sensor initialize
 *=======================================================================================================================
 */
void htu21d_initialize() {
 23e5ea8:	b508      	push	{r3, lr}
  Output("HTU21D:INIT");
 23e5eaa:	480f      	ldr	r0, [pc, #60]	; (23e5ee8 <_Z17htu21d_initializev+0x40>)
 23e5eac:	f7ff fbee 	bl	23e568c <_Z6OutputPKc>
  
  // HTU21DF Humidity & Temp Sensor (I2C ADDRESS = 0x40)
  if (!htu.begin()) {
 23e5eb0:	f013 fe48 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e5eb4:	4601      	mov	r1, r0
 23e5eb6:	480d      	ldr	r0, [pc, #52]	; (23e5eec <_Z17htu21d_initializev+0x44>)
 23e5eb8:	f00a fb24 	bl	23f0504 <_ZN16Adafruit_HTU21DF5beginEP7TwoWire>
 23e5ebc:	4b0c      	ldr	r3, [pc, #48]	; (23e5ef0 <_Z17htu21d_initializev+0x48>)
 23e5ebe:	4a0d      	ldr	r2, [pc, #52]	; (23e5ef4 <_Z17htu21d_initializev+0x4c>)
 23e5ec0:	b960      	cbnz	r0, 23e5edc <_Z17htu21d_initializev+0x34>
    msgp = (char *) "HTU NF";
 23e5ec2:	490d      	ldr	r1, [pc, #52]	; (23e5ef8 <_Z17htu21d_initializev+0x50>)
    HTU21DF_exists = false;
 23e5ec4:	7010      	strb	r0, [r2, #0]
    msgp = (char *) "HTU NF";
 23e5ec6:	6019      	str	r1, [r3, #0]
    SystemStatusBits |= SSB_HTU21DF;  // Turn On Bit
 23e5ec8:	490c      	ldr	r1, [pc, #48]	; (23e5efc <_Z17htu21d_initializev+0x54>)
 23e5eca:	680a      	ldr	r2, [r1, #0]
 23e5ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 23e5ed0:	600a      	str	r2, [r1, #0]
  }
  else {
    HTU21DF_exists = true;
    msgp = (char *) "HTU OK";
  }
  Output (msgp);
 23e5ed2:	6818      	ldr	r0, [r3, #0]
}
 23e5ed4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
 23e5ed8:	f7ff bbd8 	b.w	23e568c <_Z6OutputPKc>
    HTU21DF_exists = true;
 23e5edc:	2101      	movs	r1, #1
 23e5ede:	7011      	strb	r1, [r2, #0]
    msgp = (char *) "HTU OK";
 23e5ee0:	4a07      	ldr	r2, [pc, #28]	; (23e5f00 <_Z17htu21d_initializev+0x58>)
 23e5ee2:	601a      	str	r2, [r3, #0]
 23e5ee4:	e7f5      	b.n	23e5ed2 <_Z17htu21d_initializev+0x2a>
 23e5ee6:	bf00      	nop
 23e5ee8:	023fd09e 	.word	0x023fd09e
 23e5eec:	1006ae90 	.word	0x1006ae90
 23e5ef0:	1006f528 	.word	0x1006f528
 23e5ef4:	1006a2b0 	.word	0x1006a2b0
 23e5ef8:	023fd0aa 	.word	0x023fd0aa
 23e5efc:	1006a178 	.word	0x1006a178
 23e5f00:	023fd0b1 	.word	0x023fd0b1

023e5f04 <_Z18mcp9808_initializev>:
/* 
 *=======================================================================================================================
 * mcp9808_initialize() - MCP9808 sensor initialize
 *=======================================================================================================================
 */
void mcp9808_initialize() {
 23e5f04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Output("MCP9808:INIT");
 23e5f06:	4844      	ldr	r0, [pc, #272]	; (23e6018 <_Z18mcp9808_initializev+0x114>)
 23e5f08:	f7ff fbc0 	bl	23e568c <_Z6OutputPKc>
  
  // 1st MCP9808 Precision I2C Temperature Sensor (I2C ADDRESS = 0x18)
  mcp1 = Adafruit_MCP9808();
 23e5f0c:	a801      	add	r0, sp, #4
 23e5f0e:	f00a fcd7 	bl	23f08c0 <_ZN16Adafruit_MCP9808C1Ev>

/** @brief Common sensor interface to unify various sensors.
 * Intentionally modeled after sensors.h in the Android API:
 * https://github.com/android/platform_hardware_libhardware/blob/master/include/hardware/sensors.h
 */
class Adafruit_Sensor {
 23e5f12:	4842      	ldr	r0, [pc, #264]	; (23e601c <_Z18mcp9808_initializev+0x118>)
 23e5f14:	f89d 3008 	ldrb.w	r3, [sp, #8]
  if (!mcp1.begin(MCP_ADDRESS_1)) {
 23e5f18:	2118      	movs	r1, #24
 23e5f1a:	7103      	strb	r3, [r0, #4]

/*!
 *    @brief  Class that stores state and functions for interacting with
 *            MCP9808 Temp Sensor
 */
class Adafruit_MCP9808 : public Adafruit_Sensor {
 23e5f1c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 23e5f20:	4c3f      	ldr	r4, [pc, #252]	; (23e6020 <_Z18mcp9808_initializev+0x11c>)
 23e5f22:	80c3      	strh	r3, [r0, #6]
 23e5f24:	9b03      	ldr	r3, [sp, #12]
 23e5f26:	6083      	str	r3, [r0, #8]
 23e5f28:	f00a fd2f 	bl	23f098a <_ZN16Adafruit_MCP98085beginEh>
 23e5f2c:	4b3d      	ldr	r3, [pc, #244]	; (23e6024 <_Z18mcp9808_initializev+0x120>)
 23e5f2e:	2800      	cmp	r0, #0
 23e5f30:	d15e      	bne.n	23e5ff0 <_Z18mcp9808_initializev+0xec>
    msgp = (char *) "MCP1 NF";
 23e5f32:	4a3d      	ldr	r2, [pc, #244]	; (23e6028 <_Z18mcp9808_initializev+0x124>)
    MCP_1_exists = false;
 23e5f34:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "MCP1 NF";
 23e5f36:	6022      	str	r2, [r4, #0]
    SystemStatusBits |= SSB_MCP_1;  // Turn On Bit
 23e5f38:	4a3c      	ldr	r2, [pc, #240]	; (23e602c <_Z18mcp9808_initializev+0x128>)
 23e5f3a:	6813      	ldr	r3, [r2, #0]
 23e5f3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 23e5f40:	6013      	str	r3, [r2, #0]
  }
  else {
    MCP_1_exists = true;
    msgp = (char *) "MCP1 OK";
  }
  Output (msgp);
 23e5f42:	6820      	ldr	r0, [r4, #0]
 23e5f44:	f7ff fba2 	bl	23e568c <_Z6OutputPKc>

  // 2nd MCP9808 Precision I2C Temperature Sensor (I2C ADDRESS = 0x19)
  mcp2 = Adafruit_MCP9808();
 23e5f48:	a801      	add	r0, sp, #4
 23e5f4a:	f00a fcb9 	bl	23f08c0 <_ZN16Adafruit_MCP9808C1Ev>
 23e5f4e:	4838      	ldr	r0, [pc, #224]	; (23e6030 <_Z18mcp9808_initializev+0x12c>)
 23e5f50:	f89d 3008 	ldrb.w	r3, [sp, #8]
  if (!mcp2.begin(MCP_ADDRESS_2)) {
 23e5f54:	2119      	movs	r1, #25
 23e5f56:	7103      	strb	r3, [r0, #4]
 23e5f58:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 23e5f5c:	80c3      	strh	r3, [r0, #6]
 23e5f5e:	9b03      	ldr	r3, [sp, #12]
 23e5f60:	6083      	str	r3, [r0, #8]
 23e5f62:	f00a fd12 	bl	23f098a <_ZN16Adafruit_MCP98085beginEh>
 23e5f66:	4b33      	ldr	r3, [pc, #204]	; (23e6034 <_Z18mcp9808_initializev+0x130>)
 23e5f68:	2800      	cmp	r0, #0
 23e5f6a:	d146      	bne.n	23e5ffa <_Z18mcp9808_initializev+0xf6>
    msgp = (char *) "MCP2 NF";
 23e5f6c:	4a32      	ldr	r2, [pc, #200]	; (23e6038 <_Z18mcp9808_initializev+0x134>)
    MCP_2_exists = false;
 23e5f6e:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "MCP2 NF";
 23e5f70:	6022      	str	r2, [r4, #0]
    SystemStatusBits |= SSB_MCP_2;  // Turn On Bit
 23e5f72:	4a2e      	ldr	r2, [pc, #184]	; (23e602c <_Z18mcp9808_initializev+0x128>)
 23e5f74:	6813      	ldr	r3, [r2, #0]
 23e5f76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 23e5f7a:	6013      	str	r3, [r2, #0]
  }
  else {
    MCP_2_exists = true;
    msgp = (char *) "MCP2 OK";
  }
  Output (msgp);
 23e5f7c:	6820      	ldr	r0, [r4, #0]
 23e5f7e:	f7ff fb85 	bl	23e568c <_Z6OutputPKc>

  // 3rd MCP9808 Precision I2C Temperature Sensor (I2C ADDRESS = 0x20)
  mcp3 = Adafruit_MCP9808();
 23e5f82:	a801      	add	r0, sp, #4
 23e5f84:	f00a fc9c 	bl	23f08c0 <_ZN16Adafruit_MCP9808C1Ev>
 23e5f88:	482c      	ldr	r0, [pc, #176]	; (23e603c <_Z18mcp9808_initializev+0x138>)
 23e5f8a:	f89d 3008 	ldrb.w	r3, [sp, #8]
  if (!mcp3.begin(MCP_ADDRESS_3)) {
 23e5f8e:	211a      	movs	r1, #26
 23e5f90:	7103      	strb	r3, [r0, #4]
 23e5f92:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 23e5f96:	80c3      	strh	r3, [r0, #6]
 23e5f98:	9b03      	ldr	r3, [sp, #12]
 23e5f9a:	6083      	str	r3, [r0, #8]
 23e5f9c:	f00a fcf5 	bl	23f098a <_ZN16Adafruit_MCP98085beginEh>
 23e5fa0:	4b27      	ldr	r3, [pc, #156]	; (23e6040 <_Z18mcp9808_initializev+0x13c>)
 23e5fa2:	2800      	cmp	r0, #0
 23e5fa4:	d12e      	bne.n	23e6004 <_Z18mcp9808_initializev+0x100>
    msgp = (char *) "MCP3 NF";
 23e5fa6:	4a27      	ldr	r2, [pc, #156]	; (23e6044 <_Z18mcp9808_initializev+0x140>)
    MCP_3_exists = false;
 23e5fa8:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "MCP3 NF";
 23e5faa:	6022      	str	r2, [r4, #0]
    SystemStatusBits |= SSB_MCP_3;  // Turn On Bit
 23e5fac:	4a1f      	ldr	r2, [pc, #124]	; (23e602c <_Z18mcp9808_initializev+0x128>)
 23e5fae:	6813      	ldr	r3, [r2, #0]
 23e5fb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 23e5fb4:	6013      	str	r3, [r2, #0]
  }
  else {
    MCP_3_exists = true;
    msgp = (char *) "MCP3 OK";
  }
  Output (msgp);
 23e5fb6:	6820      	ldr	r0, [r4, #0]
 23e5fb8:	f7ff fb68 	bl	23e568c <_Z6OutputPKc>

  // 4rd MCP9808 Precision I2C Temperature Sensor (I2C ADDRESS = 0x21)
  mcp4 = Adafruit_MCP9808();
 23e5fbc:	a801      	add	r0, sp, #4
 23e5fbe:	f00a fc7f 	bl	23f08c0 <_ZN16Adafruit_MCP9808C1Ev>
 23e5fc2:	4821      	ldr	r0, [pc, #132]	; (23e6048 <_Z18mcp9808_initializev+0x144>)
 23e5fc4:	f89d 3008 	ldrb.w	r3, [sp, #8]
  if (!mcp4.begin(MCP_ADDRESS_4)) {
 23e5fc8:	211b      	movs	r1, #27
 23e5fca:	7103      	strb	r3, [r0, #4]
 23e5fcc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 23e5fd0:	80c3      	strh	r3, [r0, #6]
 23e5fd2:	9b03      	ldr	r3, [sp, #12]
 23e5fd4:	6083      	str	r3, [r0, #8]
 23e5fd6:	f00a fcd8 	bl	23f098a <_ZN16Adafruit_MCP98085beginEh>
 23e5fda:	4b1c      	ldr	r3, [pc, #112]	; (23e604c <_Z18mcp9808_initializev+0x148>)
 23e5fdc:	b9b8      	cbnz	r0, 23e600e <_Z18mcp9808_initializev+0x10a>
    msgp = (char *) "MCP4 NF";
 23e5fde:	4a1c      	ldr	r2, [pc, #112]	; (23e6050 <_Z18mcp9808_initializev+0x14c>)
    MCP_4_exists = false;
 23e5fe0:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "MCP4 NF";
 23e5fe2:	6022      	str	r2, [r4, #0]
  }
  else {
    MCP_4_exists = true;
    msgp = (char *) "MCP4 OK";
  }
  Output (msgp);
 23e5fe4:	6820      	ldr	r0, [r4, #0]
}
 23e5fe6:	b004      	add	sp, #16
 23e5fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Output (msgp);
 23e5fec:	f7ff bb4e 	b.w	23e568c <_Z6OutputPKc>
    MCP_1_exists = true;
 23e5ff0:	2201      	movs	r2, #1
 23e5ff2:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "MCP1 OK";
 23e5ff4:	4b17      	ldr	r3, [pc, #92]	; (23e6054 <_Z18mcp9808_initializev+0x150>)
 23e5ff6:	6023      	str	r3, [r4, #0]
 23e5ff8:	e7a3      	b.n	23e5f42 <_Z18mcp9808_initializev+0x3e>
    MCP_2_exists = true;
 23e5ffa:	2201      	movs	r2, #1
 23e5ffc:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "MCP2 OK";
 23e5ffe:	4b16      	ldr	r3, [pc, #88]	; (23e6058 <_Z18mcp9808_initializev+0x154>)
 23e6000:	6023      	str	r3, [r4, #0]
 23e6002:	e7bb      	b.n	23e5f7c <_Z18mcp9808_initializev+0x78>
    MCP_3_exists = true;
 23e6004:	2201      	movs	r2, #1
 23e6006:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "MCP3 OK";
 23e6008:	4b14      	ldr	r3, [pc, #80]	; (23e605c <_Z18mcp9808_initializev+0x158>)
 23e600a:	6023      	str	r3, [r4, #0]
 23e600c:	e7d3      	b.n	23e5fb6 <_Z18mcp9808_initializev+0xb2>
    MCP_4_exists = true;
 23e600e:	2201      	movs	r2, #1
 23e6010:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "MCP4 OK";
 23e6012:	4b13      	ldr	r3, [pc, #76]	; (23e6060 <_Z18mcp9808_initializev+0x15c>)
 23e6014:	6023      	str	r3, [r4, #0]
 23e6016:	e7e5      	b.n	23e5fe4 <_Z18mcp9808_initializev+0xe0>
 23e6018:	023fd0b8 	.word	0x023fd0b8
 23e601c:	1006f0f8 	.word	0x1006f0f8
 23e6020:	1006f528 	.word	0x1006f528
 23e6024:	1006a2c8 	.word	0x1006a2c8
 23e6028:	023fd0c5 	.word	0x023fd0c5
 23e602c:	1006a178 	.word	0x1006a178
 23e6030:	1006f104 	.word	0x1006f104
 23e6034:	1006a2c9 	.word	0x1006a2c9
 23e6038:	023fd0d5 	.word	0x023fd0d5
 23e603c:	1006f110 	.word	0x1006f110
 23e6040:	1006a2ca 	.word	0x1006a2ca
 23e6044:	023fd0e5 	.word	0x023fd0e5
 23e6048:	1006f11c 	.word	0x1006f11c
 23e604c:	1006a2cb 	.word	0x1006a2cb
 23e6050:	023fd0f5 	.word	0x023fd0f5
 23e6054:	023fd0cd 	.word	0x023fd0cd
 23e6058:	023fd0dd 	.word	0x023fd0dd
 23e605c:	023fd0ed 	.word	0x023fd0ed
 23e6060:	023fd0fd 	.word	0x023fd0fd

023e6064 <_Z14sht_initializev>:
/* 
 *=======================================================================================================================
 * sht_initialize() - SHT31 sensor initialize
 *=======================================================================================================================
 */
void sht_initialize() {
 23e6064:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  Output("SHT:INIT");
 23e6066:	4828      	ldr	r0, [pc, #160]	; (23e6108 <_Z14sht_initializev+0xa4>)
 23e6068:	f7ff fb10 	bl	23e568c <_Z6OutputPKc>
  
  // 1st SHT31 I2C Temperature/Humidity Sensor (I2C ADDRESS = 0x44)
  sht1 = Adafruit_SHT31();
 23e606c:	466c      	mov	r4, sp
 23e606e:	f013 fd69 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e6072:	4d26      	ldr	r5, [pc, #152]	; (23e610c <_Z14sht_initializev+0xa8>)
 23e6074:	4601      	mov	r1, r0
 23e6076:	4620      	mov	r0, r4
 23e6078:	f00a fd76 	bl	23f0b68 <_ZN14Adafruit_SHT31C1EP7TwoWire>
 23e607c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 23e6080:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 23e6084:	4620      	mov	r0, r4
 23e6086:	f00a fd79 	bl	23f0b7c <_ZN14Adafruit_SHT31D1Ev>
  if (!sht1.begin(SHT_ADDRESS_1)) {
 23e608a:	4628      	mov	r0, r5
 23e608c:	2144      	movs	r1, #68	; 0x44
 23e608e:	f00a fdac 	bl	23f0bea <_ZN14Adafruit_SHT315beginEh>
 23e6092:	4d1f      	ldr	r5, [pc, #124]	; (23e6110 <_Z14sht_initializev+0xac>)
 23e6094:	4b1f      	ldr	r3, [pc, #124]	; (23e6114 <_Z14sht_initializev+0xb0>)
 23e6096:	bb60      	cbnz	r0, 23e60f2 <_Z14sht_initializev+0x8e>
    msgp = (char *) "SHT1 NF";
 23e6098:	4a1f      	ldr	r2, [pc, #124]	; (23e6118 <_Z14sht_initializev+0xb4>)
    SHT_1_exists = false;
 23e609a:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "SHT1 NF";
 23e609c:	602a      	str	r2, [r5, #0]
    SystemStatusBits |= SSB_SHT_1;  // Turn On Bit
 23e609e:	4a1f      	ldr	r2, [pc, #124]	; (23e611c <_Z14sht_initializev+0xb8>)
 23e60a0:	6813      	ldr	r3, [r2, #0]
 23e60a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 23e60a6:	6013      	str	r3, [r2, #0]
  }
  else {
    SHT_1_exists = true;
    msgp = (char *) "SHT1 OK";
  }
  Output (msgp);
 23e60a8:	6828      	ldr	r0, [r5, #0]
 23e60aa:	f7ff faef 	bl	23e568c <_Z6OutputPKc>

  // 2nd SHT31 I2C Temperature/Humidity Sensor (I2C ADDRESS = 0x45)
  sht2 = Adafruit_SHT31();
 23e60ae:	f013 fd49 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e60b2:	4e1b      	ldr	r6, [pc, #108]	; (23e6120 <_Z14sht_initializev+0xbc>)
 23e60b4:	4601      	mov	r1, r0
 23e60b6:	4620      	mov	r0, r4
 23e60b8:	f00a fd56 	bl	23f0b68 <_ZN14Adafruit_SHT31C1EP7TwoWire>
 23e60bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 23e60c0:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 23e60c4:	4620      	mov	r0, r4
 23e60c6:	f00a fd59 	bl	23f0b7c <_ZN14Adafruit_SHT31D1Ev>
  if (!sht2.begin(SHT_ADDRESS_2)) {
 23e60ca:	2145      	movs	r1, #69	; 0x45
 23e60cc:	4630      	mov	r0, r6
 23e60ce:	f00a fd8c 	bl	23f0bea <_ZN14Adafruit_SHT315beginEh>
 23e60d2:	4b14      	ldr	r3, [pc, #80]	; (23e6124 <_Z14sht_initializev+0xc0>)
 23e60d4:	b990      	cbnz	r0, 23e60fc <_Z14sht_initializev+0x98>
    msgp = (char *) "SHT2 NF";
 23e60d6:	4a14      	ldr	r2, [pc, #80]	; (23e6128 <_Z14sht_initializev+0xc4>)
    SHT_2_exists = false;
 23e60d8:	7018      	strb	r0, [r3, #0]
    msgp = (char *) "SHT2 NF";
 23e60da:	602a      	str	r2, [r5, #0]
    SystemStatusBits |= SSB_SHT_2;  // Turn On Bit
 23e60dc:	4a0f      	ldr	r2, [pc, #60]	; (23e611c <_Z14sht_initializev+0xb8>)
 23e60de:	6813      	ldr	r3, [r2, #0]
 23e60e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 23e60e4:	6013      	str	r3, [r2, #0]
  }
  else {
    SHT_2_exists = true;
    msgp = (char *) "SHT2 OK";
  }
  Output (msgp);
 23e60e6:	6828      	ldr	r0, [r5, #0]
}
 23e60e8:	b004      	add	sp, #16
 23e60ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Output (msgp);
 23e60ee:	f7ff bacd 	b.w	23e568c <_Z6OutputPKc>
    SHT_1_exists = true;
 23e60f2:	2201      	movs	r2, #1
 23e60f4:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "SHT1 OK";
 23e60f6:	4b0d      	ldr	r3, [pc, #52]	; (23e612c <_Z14sht_initializev+0xc8>)
 23e60f8:	602b      	str	r3, [r5, #0]
 23e60fa:	e7d5      	b.n	23e60a8 <_Z14sht_initializev+0x44>
    SHT_2_exists = true;
 23e60fc:	2201      	movs	r2, #1
 23e60fe:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "SHT2 OK";
 23e6100:	4b0b      	ldr	r3, [pc, #44]	; (23e6130 <_Z14sht_initializev+0xcc>)
 23e6102:	602b      	str	r3, [r5, #0]
 23e6104:	e7ef      	b.n	23e60e6 <_Z14sht_initializev+0x82>
 23e6106:	bf00      	nop
 23e6108:	023fd105 	.word	0x023fd105
 23e610c:	1007abb4 	.word	0x1007abb4
 23e6110:	1006f528 	.word	0x1006f528
 23e6114:	1006a7d4 	.word	0x1006a7d4
 23e6118:	023fd10e 	.word	0x023fd10e
 23e611c:	1006a178 	.word	0x1006a178
 23e6120:	1007abc4 	.word	0x1007abc4
 23e6124:	1006a7d5 	.word	0x1006a7d5
 23e6128:	023fd11e 	.word	0x023fd11e
 23e612c:	023fd116 	.word	0x023fd116
 23e6130:	023fd126 	.word	0x023fd126

023e6134 <_Z15hih8_initializev>:
/* 
 *=======================================================================================================================
 * hih8_initialize() - HIH8000 sensor initialize
 *=======================================================================================================================
 */
void hih8_initialize() {
 23e6134:	b508      	push	{r3, lr}
  Output("HIH8:INIT");
 23e6136:	480d      	ldr	r0, [pc, #52]	; (23e616c <_Z15hih8_initializev+0x38>)
 23e6138:	f7ff faa8 	bl	23e568c <_Z6OutputPKc>

  if (I2C_Device_Exist(HIH8000_ADDRESS)) {
 23e613c:	2027      	movs	r0, #39	; 0x27
 23e613e:	f7ff f89c 	bl	23e527a <_Z16I2C_Device_Existh>
 23e6142:	4a0b      	ldr	r2, [pc, #44]	; (23e6170 <_Z15hih8_initializev+0x3c>)
 23e6144:	4b0b      	ldr	r3, [pc, #44]	; (23e6174 <_Z15hih8_initializev+0x40>)
 23e6146:	b140      	cbz	r0, 23e615a <_Z15hih8_initializev+0x26>
    HIH8_exists = true;
 23e6148:	2101      	movs	r1, #1
 23e614a:	7011      	strb	r1, [r2, #0]
    msgp = (char *) "HIH8 OK";
 23e614c:	4a0a      	ldr	r2, [pc, #40]	; (23e6178 <_Z15hih8_initializev+0x44>)
 23e614e:	601a      	str	r2, [r3, #0]
  else {
    msgp = (char *) "HIH8 NF";
    HIH8_exists = false;
    SystemStatusBits |= SSB_HIH8;  // Turn On Bit
  }
  Output (msgp);
 23e6150:	6818      	ldr	r0, [r3, #0]
}
 23e6152:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
 23e6156:	f7ff ba99 	b.w	23e568c <_Z6OutputPKc>
    msgp = (char *) "HIH8 NF";
 23e615a:	4908      	ldr	r1, [pc, #32]	; (23e617c <_Z15hih8_initializev+0x48>)
    HIH8_exists = false;
 23e615c:	7010      	strb	r0, [r2, #0]
    msgp = (char *) "HIH8 NF";
 23e615e:	6019      	str	r1, [r3, #0]
    SystemStatusBits |= SSB_HIH8;  // Turn On Bit
 23e6160:	4907      	ldr	r1, [pc, #28]	; (23e6180 <_Z15hih8_initializev+0x4c>)
 23e6162:	680a      	ldr	r2, [r1, #0]
 23e6164:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 23e6168:	600a      	str	r2, [r1, #0]
 23e616a:	e7f1      	b.n	23e6150 <_Z15hih8_initializev+0x1c>
 23e616c:	023fd12e 	.word	0x023fd12e
 23e6170:	1006a2ae 	.word	0x1006a2ae
 23e6174:	1006f528 	.word	0x1006f528
 23e6178:	023fd138 	.word	0x023fd138
 23e617c:	023fd140 	.word	0x023fd140
 23e6180:	1006a178 	.word	0x1006a178
 23e6184:	00000000 	.word	0x00000000

023e6188 <_Z17hih8_getTempHumidPfS_>:
 *=======================================================================================================================
 * hih8_getTempHumid() - Get Temp and Humidity
 *   Call example:  status = hih8_getTempHumid(&t, &h);
 *=======================================================================================================================
 */
bool hih8_getTempHumid(float *t, float *h) {
 23e6188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (HIH8_exists) {
 23e618c:	4b54      	ldr	r3, [pc, #336]	; (23e62e0 <_Z17hih8_getTempHumidPfS_+0x158>)
bool hih8_getTempHumid(float *t, float *h) {
 23e618e:	4604      	mov	r4, r0
  if (HIH8_exists) {
 23e6190:	f893 8000 	ldrb.w	r8, [r3]
bool hih8_getTempHumid(float *t, float *h) {
 23e6194:	460d      	mov	r5, r1
  if (HIH8_exists) {
 23e6196:	f1b8 0f00 	cmp.w	r8, #0
 23e619a:	f000 8086 	beq.w	23e62aa <_Z17hih8_getTempHumidPfS_+0x122>
    uint16_t humidityBuffer    = 0;
    uint16_t temperatureBuffer = 0;
  
    Wire.begin();
 23e619e:	f013 fcd1 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e61a2:	f012 f805 	bl	23f81b0 <_ZN7TwoWire5beginEv>
    Wire.beginTransmission(HIH8000_ADDRESS);
 23e61a6:	f013 fccd 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e61aa:	2127      	movs	r1, #39	; 0x27
 23e61ac:	f012 f82e 	bl	23f820c <_ZN7TwoWire17beginTransmissionEi>

    Wire.write(0x00); // set the register location for read request
 23e61b0:	f013 fcc8 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e61b4:	2100      	movs	r1, #0
 23e61b6:	f7fe fed9 	bl	23e4f6c <_ZN7TwoWire5writeEi.isra.0>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 23e61ba:	20c8      	movs	r0, #200	; 0xc8
 23e61bc:	f010 fad2 	bl	23f6764 <HAL_Delay_Microseconds>

    delayMicroseconds(200); // give some time for sensor to process request

    if (Wire.requestFrom(HIH8000_ADDRESS, 4) == 4) {
 23e61c0:	f013 fcc0 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e61c4:	2204      	movs	r2, #4
 23e61c6:	2127      	movs	r1, #39	; 0x27
 23e61c8:	f012 f819 	bl	23f81fe <_ZN7TwoWire11requestFromEhj>
 23e61cc:	2804      	cmp	r0, #4
 23e61ce:	d175      	bne.n	23e62bc <_Z17hih8_getTempHumidPfS_+0x134>

      // Get raw humidity data
      humidityBuffer = Wire.read();
 23e61d0:	f013 fcb8 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e61d4:	6803      	ldr	r3, [r0, #0]
 23e61d6:	695b      	ldr	r3, [r3, #20]
 23e61d8:	4798      	blx	r3
 23e61da:	b287      	uxth	r7, r0
      humidityBuffer <<= 8;
      humidityBuffer |= Wire.read();
 23e61dc:	f013 fcb2 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e61e0:	6803      	ldr	r3, [r0, #0]
 23e61e2:	695b      	ldr	r3, [r3, #20]
 23e61e4:	4798      	blx	r3
 23e61e6:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
 23e61ea:	b287      	uxth	r7, r0
      humidityBuffer &= 0x3FFF;   // 14bit value, get rid of the upper 2 status bits

      // Get raw temperature data
      temperatureBuffer = Wire.read();
 23e61ec:	f013 fcaa 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e61f0:	6803      	ldr	r3, [r0, #0]
 23e61f2:	695b      	ldr	r3, [r3, #20]
 23e61f4:	4798      	blx	r3
 23e61f6:	b286      	uxth	r6, r0
      temperatureBuffer <<= 8;
      temperatureBuffer |= Wire.read();
 23e61f8:	f013 fca4 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e61fc:	6803      	ldr	r3, [r0, #0]
 23e61fe:	695b      	ldr	r3, [r3, #20]
 23e6200:	4798      	blx	r3
 23e6202:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 23e6206:	b286      	uxth	r6, r0
      temperatureBuffer >>= 2;  // Remove the last two "Do Not Care" bits (shift left is same as divide by 4)

      Wire.endTransmission();
 23e6208:	f013 fc9c 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e620c:	f012 f805 	bl	23f821a <_ZN7TwoWire15endTransmissionEv>

      *h = humidityBuffer * 6.10e-3;
 23e6210:	f3c7 000d 	ubfx	r0, r7, #0, #14
 23e6214:	f7fd fa36 	bl	23e3684 <__aeabi_i2d>
 23e6218:	a32d      	add	r3, pc, #180	; (adr r3, 23e62d0 <_Z17hih8_getTempHumidPfS_+0x148>)
 23e621a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e621e:	f7fd fa9b 	bl	23e3758 <__aeabi_dmul>
 23e6222:	f7fd fd91 	bl	23e3d48 <__aeabi_d2f>
 23e6226:	6028      	str	r0, [r5, #0]
      *t = temperatureBuffer * 1.007e-2 - 40.0;
 23e6228:	08b0      	lsrs	r0, r6, #2
 23e622a:	f7fd fa2b 	bl	23e3684 <__aeabi_i2d>
 23e622e:	a32a      	add	r3, pc, #168	; (adr r3, 23e62d8 <_Z17hih8_getTempHumidPfS_+0x150>)
 23e6230:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e6234:	f7fd fa90 	bl	23e3758 <__aeabi_dmul>
 23e6238:	2200      	movs	r2, #0
 23e623a:	4b2a      	ldr	r3, [pc, #168]	; (23e62e4 <_Z17hih8_getTempHumidPfS_+0x15c>)
 23e623c:	f7fd f8d4 	bl	23e33e8 <__aeabi_dsub>
 23e6240:	f7fd fd82 	bl	23e3d48 <__aeabi_d2f>
 23e6244:	6020      	str	r0, [r4, #0]

      // QC Check
      *h = (isnan(*h) || (*h < QC_MIN_RH) || (*h >QC_MAX_RH)) ? QC_ERR_RH : *h;
 23e6246:	edd5 7a00 	vldr	s15, [r5]
 23e624a:	eef4 7a67 	vcmp.f32	s15, s15
 23e624e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e6252:	d62d      	bvs.n	23e62b0 <_Z17hih8_getTempHumidPfS_+0x128>
 23e6254:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23e6258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e625c:	d428      	bmi.n	23e62b0 <_Z17hih8_getTempHumidPfS_+0x128>
 23e625e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 23e62e8 <_Z17hih8_getTempHumidPfS_+0x160>
 23e6262:	eef4 7a47 	vcmp.f32	s15, s14
 23e6266:	ed9f 7a21 	vldr	s14, [pc, #132]	; 23e62ec <_Z17hih8_getTempHumidPfS_+0x164>
 23e626a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e626e:	fe77 7a27 	vselgt.f32	s15, s14, s15
 23e6272:	edc5 7a00 	vstr	s15, [r5]
      *t = (isnan(*t) || (*t < QC_MIN_T)  || (*t >QC_MAX_T))  ? QC_ERR_T  : *t;
 23e6276:	edd4 7a00 	vldr	s15, [r4]
 23e627a:	eef4 7a67 	vcmp.f32	s15, s15
 23e627e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e6282:	d618      	bvs.n	23e62b6 <_Z17hih8_getTempHumidPfS_+0x12e>
 23e6284:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 23e62f0 <_Z17hih8_getTempHumidPfS_+0x168>
 23e6288:	eef4 7ac7 	vcmpe.f32	s15, s14
 23e628c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e6290:	d411      	bmi.n	23e62b6 <_Z17hih8_getTempHumidPfS_+0x12e>
 23e6292:	ed9f 7a18 	vldr	s14, [pc, #96]	; 23e62f4 <_Z17hih8_getTempHumidPfS_+0x16c>
 23e6296:	eef4 7a47 	vcmp.f32	s15, s14
 23e629a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 23e62ec <_Z17hih8_getTempHumidPfS_+0x164>
 23e629e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e62a2:	fe77 7a27 	vselgt.f32	s15, s14, s15
 23e62a6:	edc4 7a00 	vstr	s15, [r4]
    }
  }
  else {
    return (false);
  }
}
 23e62aa:	4640      	mov	r0, r8
 23e62ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *h = (isnan(*h) || (*h < QC_MIN_RH) || (*h >QC_MAX_RH)) ? QC_ERR_RH : *h;
 23e62b0:	eddf 7a0e 	vldr	s15, [pc, #56]	; 23e62ec <_Z17hih8_getTempHumidPfS_+0x164>
 23e62b4:	e7dd      	b.n	23e6272 <_Z17hih8_getTempHumidPfS_+0xea>
      *t = (isnan(*t) || (*t < QC_MIN_T)  || (*t >QC_MAX_T))  ? QC_ERR_T  : *t;
 23e62b6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 23e62ec <_Z17hih8_getTempHumidPfS_+0x164>
 23e62ba:	e7f4      	b.n	23e62a6 <_Z17hih8_getTempHumidPfS_+0x11e>
      Wire.endTransmission();
 23e62bc:	f013 fc42 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e62c0:	f011 ffab 	bl	23f821a <_ZN7TwoWire15endTransmissionEv>
      return(false);
 23e62c4:	f04f 0800 	mov.w	r8, #0
 23e62c8:	e7ef      	b.n	23e62aa <_Z17hih8_getTempHumidPfS_+0x122>
 23e62ca:	bf00      	nop
 23e62cc:	f3af 8000 	nop.w
 23e62d0:	4816f007 	.word	0x4816f007
 23e62d4:	3f78fc50 	.word	0x3f78fc50
 23e62d8:	855da273 	.word	0x855da273
 23e62dc:	3f849f94 	.word	0x3f849f94
 23e62e0:	1006a2ae 	.word	0x1006a2ae
 23e62e4:	40440000 	.word	0x40440000
 23e62e8:	42c80000 	.word	0x42c80000
 23e62ec:	c479f99a 	.word	0xc479f99a
 23e62f0:	c2200000 	.word	0xc2200000
 23e62f4:	42700000 	.word	0x42700000

023e62f8 <_Z14wbt_initializev>:
/* 
 *=======================================================================================================================
 * wbt_initialize() - Wet Bulb Temperature
 *=======================================================================================================================
 */
void wbt_initialize() {
 23e62f8:	b508      	push	{r3, lr}
  Output("WBT:INIT");
 23e62fa:	4809      	ldr	r0, [pc, #36]	; (23e6320 <_Z14wbt_initializev+0x28>)
 23e62fc:	f7ff f9c6 	bl	23e568c <_Z6OutputPKc>
  if (MCP_1_exists && SHT_1_exists) {
 23e6300:	4b08      	ldr	r3, [pc, #32]	; (23e6324 <_Z14wbt_initializev+0x2c>)
 23e6302:	781b      	ldrb	r3, [r3, #0]
 23e6304:	b153      	cbz	r3, 23e631c <_Z14wbt_initializev+0x24>
 23e6306:	4b08      	ldr	r3, [pc, #32]	; (23e6328 <_Z14wbt_initializev+0x30>)
 23e6308:	781b      	ldrb	r3, [r3, #0]
 23e630a:	b13b      	cbz	r3, 23e631c <_Z14wbt_initializev+0x24>
    WBT_exists = true;
 23e630c:	2201      	movs	r2, #1
 23e630e:	4b07      	ldr	r3, [pc, #28]	; (23e632c <_Z14wbt_initializev+0x34>)
    Output ("WBT:OK");
 23e6310:	4807      	ldr	r0, [pc, #28]	; (23e6330 <_Z14wbt_initializev+0x38>)
    WBT_exists = true;
 23e6312:	701a      	strb	r2, [r3, #0]
  }
  else {
    Output ("WBT:NF");
  }
}
 23e6314:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Output ("WBT:NF");
 23e6318:	f7ff b9b8 	b.w	23e568c <_Z6OutputPKc>
 23e631c:	4805      	ldr	r0, [pc, #20]	; (23e6334 <_Z14wbt_initializev+0x3c>)
 23e631e:	e7f9      	b.n	23e6314 <_Z14wbt_initializev+0x1c>
 23e6320:	023fd148 	.word	0x023fd148
 23e6324:	1006a2c8 	.word	0x1006a2c8
 23e6328:	1006a7d4 	.word	0x1006a7d4
 23e632c:	1006a7ea 	.word	0x1006a7ea
 23e6330:	023fd151 	.word	0x023fd151
 23e6334:	023fd158 	.word	0x023fd158

023e6338 <_Z13wbt_calculatedd>:
 *     In Arduino code, square brackets are not used for mathematical operations. Instead, parentheses ( ).
 * sqrt(x) computes the square root of x, which is x to the 1/2.
 * pow(RH, 1.5) calculates RH to the 3/2, which is the relative humidity raised to the power of 1.5.
 *=======================================================================================================================
 */
double wbt_calculate(double T, double RH) {
 23e6338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((T == -999.9) || (RH == -999.9)) {
 23e633c:	a354      	add	r3, pc, #336	; (adr r3, 23e6490 <_Z13wbt_calculatedd+0x158>)
 23e633e:	e9d3 2300 	ldrd	r2, r3, [r3]
double wbt_calculate(double T, double RH) {
 23e6342:	ec57 6b10 	vmov	r6, r7, d0
 23e6346:	b085      	sub	sp, #20
  if ((T == -999.9) || (RH == -999.9)) {
 23e6348:	ee10 0a10 	vmov	r0, s0
 23e634c:	4639      	mov	r1, r7
double wbt_calculate(double T, double RH) {
 23e634e:	ec55 4b11 	vmov	r4, r5, d1
  if ((T == -999.9) || (RH == -999.9)) {
 23e6352:	f7fd fc69 	bl	23e3c28 <__aeabi_dcmpeq>
 23e6356:	2800      	cmp	r0, #0
 23e6358:	f040 808b 	bne.w	23e6472 <_Z13wbt_calculatedd+0x13a>
 23e635c:	a34c      	add	r3, pc, #304	; (adr r3, 23e6490 <_Z13wbt_calculatedd+0x158>)
 23e635e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e6362:	4620      	mov	r0, r4
 23e6364:	4629      	mov	r1, r5
 23e6366:	f7fd fc5f 	bl	23e3c28 <__aeabi_dcmpeq>
 23e636a:	2800      	cmp	r0, #0
 23e636c:	f040 8081 	bne.w	23e6472 <_Z13wbt_calculatedd+0x13a>
  }

  // Output("WBT:CALC");

  // Equation components
  double term1 = T * atan(0.151977 * sqrt(RH + 8.313659));
 23e6370:	a34b      	add	r3, pc, #300	; (adr r3, 23e64a0 <_Z13wbt_calculatedd+0x168>)
 23e6372:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e6376:	4620      	mov	r0, r4
 23e6378:	4629      	mov	r1, r5
 23e637a:	f7fd f837 	bl	23e33ec <__adddf3>
 23e637e:	ec41 0b10 	vmov	d0, r0, r1
 23e6382:	f014 f85f 	bl	23fa444 <sqrt>
 23e6386:	a348      	add	r3, pc, #288	; (adr r3, 23e64a8 <_Z13wbt_calculatedd+0x170>)
 23e6388:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e638c:	ec51 0b10 	vmov	r0, r1, d0
 23e6390:	f7fd f9e2 	bl	23e3758 <__aeabi_dmul>
 23e6394:	ec41 0b10 	vmov	d0, r0, r1
 23e6398:	f013 fc8e 	bl	23f9cb8 <atan>
  double term2 = atan(T + RH);
 23e639c:	4622      	mov	r2, r4
 23e639e:	462b      	mov	r3, r5
 23e63a0:	4630      	mov	r0, r6
 23e63a2:	4639      	mov	r1, r7
  double term1 = T * atan(0.151977 * sqrt(RH + 8.313659));
 23e63a4:	ec59 8b10 	vmov	r8, r9, d0
  double term2 = atan(T + RH);
 23e63a8:	f7fd f820 	bl	23e33ec <__adddf3>
 23e63ac:	ec41 0b10 	vmov	d0, r0, r1
 23e63b0:	f013 fc82 	bl	23f9cb8 <atan>
  double term3 = atan(RH - 1.676311);
 23e63b4:	a33e      	add	r3, pc, #248	; (adr r3, 23e64b0 <_Z13wbt_calculatedd+0x178>)
 23e63b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e63ba:	4620      	mov	r0, r4
 23e63bc:	4629      	mov	r1, r5
  double term2 = atan(T + RH);
 23e63be:	ec5b ab10 	vmov	sl, fp, d0
  double term3 = atan(RH - 1.676311);
 23e63c2:	f7fd f811 	bl	23e33e8 <__aeabi_dsub>
 23e63c6:	ec41 0b10 	vmov	d0, r0, r1
 23e63ca:	f013 fc75 	bl	23f9cb8 <atan>
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
 23e63ce:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 23e6488 <_Z13wbt_calculatedd+0x150>
  double term3 = atan(RH - 1.676311);
 23e63d2:	ed8d 0b00 	vstr	d0, [sp]
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
 23e63d6:	ec45 4b10 	vmov	d0, r4, r5
 23e63da:	f013 ff61 	bl	23fa2a0 <pow>
 23e63de:	a336      	add	r3, pc, #216	; (adr r3, 23e64b8 <_Z13wbt_calculatedd+0x180>)
 23e63e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e63e4:	4620      	mov	r0, r4
 23e63e6:	4629      	mov	r1, r5
 23e63e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 23e63ec:	f7fd f9b4 	bl	23e3758 <__aeabi_dmul>
 23e63f0:	ec41 0b10 	vmov	d0, r0, r1
 23e63f4:	f013 fc60 	bl	23f9cb8 <atan>
  double term1 = T * atan(0.151977 * sqrt(RH + 8.313659));
 23e63f8:	4642      	mov	r2, r8
 23e63fa:	464b      	mov	r3, r9
 23e63fc:	4630      	mov	r0, r6
 23e63fe:	4639      	mov	r1, r7
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
 23e6400:	ec55 4b10 	vmov	r4, r5, d0
  double term1 = T * atan(0.151977 * sqrt(RH + 8.313659));
 23e6404:	f7fd f9a8 	bl	23e3758 <__aeabi_dmul>
  double constant = 4.686035;

  // Wet bulb temperature calculation
  double Tw = term1 + term2 - term3 + term4 - constant;
 23e6408:	4652      	mov	r2, sl
 23e640a:	465b      	mov	r3, fp
 23e640c:	f7fc ffee 	bl	23e33ec <__adddf3>
 23e6410:	e9dd 2300 	ldrd	r2, r3, [sp]
 23e6414:	f7fc ffe8 	bl	23e33e8 <__aeabi_dsub>
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
 23e6418:	a329      	add	r3, pc, #164	; (adr r3, 23e64c0 <_Z13wbt_calculatedd+0x188>)
 23e641a:	e9d3 2300 	ldrd	r2, r3, [r3]
  double Tw = term1 + term2 - term3 + term4 - constant;
 23e641e:	4606      	mov	r6, r0
 23e6420:	460f      	mov	r7, r1
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
 23e6422:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 23e6426:	f7fd f997 	bl	23e3758 <__aeabi_dmul>
 23e642a:	4622      	mov	r2, r4
 23e642c:	462b      	mov	r3, r5
 23e642e:	f7fd f993 	bl	23e3758 <__aeabi_dmul>
 23e6432:	4602      	mov	r2, r0
 23e6434:	460b      	mov	r3, r1
  double Tw = term1 + term2 - term3 + term4 - constant;
 23e6436:	4630      	mov	r0, r6
 23e6438:	4639      	mov	r1, r7
 23e643a:	f7fc ffd7 	bl	23e33ec <__adddf3>
 23e643e:	a322      	add	r3, pc, #136	; (adr r3, 23e64c8 <_Z13wbt_calculatedd+0x190>)
 23e6440:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e6444:	f7fc ffd0 	bl	23e33e8 <__aeabi_dsub>

  Tw = (isnan(Tw) || (Tw < QC_MIN_T)  || (Tw >QC_MAX_T))  ? QC_ERR_T  : Tw;
 23e6448:	4602      	mov	r2, r0
 23e644a:	460b      	mov	r3, r1
  double Tw = term1 + term2 - term3 + term4 - constant;
 23e644c:	4604      	mov	r4, r0
 23e644e:	460d      	mov	r5, r1
  Tw = (isnan(Tw) || (Tw < QC_MIN_T)  || (Tw >QC_MAX_T))  ? QC_ERR_T  : Tw;
 23e6450:	f7fd fc1c 	bl	23e3c8c <__aeabi_dcmpun>
 23e6454:	b968      	cbnz	r0, 23e6472 <_Z13wbt_calculatedd+0x13a>
 23e6456:	2200      	movs	r2, #0
 23e6458:	4620      	mov	r0, r4
 23e645a:	4629      	mov	r1, r5
 23e645c:	4b0e      	ldr	r3, [pc, #56]	; (23e6498 <_Z13wbt_calculatedd+0x160>)
 23e645e:	f7fd fbed 	bl	23e3c3c <__aeabi_dcmplt>
 23e6462:	b930      	cbnz	r0, 23e6472 <_Z13wbt_calculatedd+0x13a>
 23e6464:	2200      	movs	r2, #0
 23e6466:	4620      	mov	r0, r4
 23e6468:	4629      	mov	r1, r5
 23e646a:	4b0c      	ldr	r3, [pc, #48]	; (23e649c <_Z13wbt_calculatedd+0x164>)
 23e646c:	f7fd fc04 	bl	23e3c78 <__aeabi_dcmpgt>
 23e6470:	b110      	cbz	r0, 23e6478 <_Z13wbt_calculatedd+0x140>
 23e6472:	a507      	add	r5, pc, #28	; (adr r5, 23e6490 <_Z13wbt_calculatedd+0x158>)
 23e6474:	e9d5 4500 	ldrd	r4, r5, [r5]
  return (Tw);
}
 23e6478:	ec45 4b10 	vmov	d0, r4, r5
 23e647c:	b005      	add	sp, #20
 23e647e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23e6482:	bf00      	nop
 23e6484:	f3af 8000 	nop.w
 23e6488:	00000000 	.word	0x00000000
 23e648c:	3ff80000 	.word	0x3ff80000
 23e6490:	33333333 	.word	0x33333333
 23e6494:	c08f3f33 	.word	0xc08f3f33
 23e6498:	c0440000 	.word	0xc0440000
 23e649c:	404e0000 	.word	0x404e0000
 23e64a0:	e996312f 	.word	0xe996312f
 23e64a4:	4020a097 	.word	0x4020a097
 23e64a8:	7a5f41af 	.word	0x7a5f41af
 23e64ac:	3fc373fb 	.word	0x3fc373fb
 23e64b0:	7baecd08 	.word	0x7baecd08
 23e64b4:	3ffad22b 	.word	0x3ffad22b
 23e64b8:	de050375 	.word	0xde050375
 23e64bc:	3f97a7c9 	.word	0x3f97a7c9
 23e64c0:	1f40b801 	.word	0x1f40b801
 23e64c4:	3f700cb8 	.word	0x3f700cb8
 23e64c8:	f583a53c 	.word	0xf583a53c
 23e64cc:	4012be7f 	.word	0x4012be7f

023e64d0 <_Z13hi_initializev>:
/* 
 *=======================================================================================================================
 * hi_initialize() - Heat Index Temperature
 *=======================================================================================================================
 */
void hi_initialize() {
 23e64d0:	b508      	push	{r3, lr}
  Output("HI:INIT");
 23e64d2:	4808      	ldr	r0, [pc, #32]	; (23e64f4 <_Z13hi_initializev+0x24>)
 23e64d4:	f7ff f8da 	bl	23e568c <_Z6OutputPKc>
  if (SHT_1_exists) {
 23e64d8:	4b07      	ldr	r3, [pc, #28]	; (23e64f8 <_Z13hi_initializev+0x28>)
 23e64da:	781b      	ldrb	r3, [r3, #0]
 23e64dc:	b13b      	cbz	r3, 23e64ee <_Z13hi_initializev+0x1e>
    HI_exists = true;
 23e64de:	2201      	movs	r2, #1
 23e64e0:	4b06      	ldr	r3, [pc, #24]	; (23e64fc <_Z13hi_initializev+0x2c>)
    Output ("HI:OK");
 23e64e2:	4807      	ldr	r0, [pc, #28]	; (23e6500 <_Z13hi_initializev+0x30>)
    HI_exists = true;
 23e64e4:	701a      	strb	r2, [r3, #0]
  }
  else {
    Output ("HI:NF");
  }
}
 23e64e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Output ("HI:NF");
 23e64ea:	f7ff b8cf 	b.w	23e568c <_Z6OutputPKc>
 23e64ee:	4805      	ldr	r0, [pc, #20]	; (23e6504 <_Z13hi_initializev+0x34>)
 23e64f0:	e7f9      	b.n	23e64e6 <_Z13hi_initializev+0x16>
 23e64f2:	bf00      	nop
 23e64f4:	023fd15f 	.word	0x023fd15f
 23e64f8:	1006a7d4 	.word	0x1006a7d4
 23e64fc:	1006a2af 	.word	0x1006a2af
 23e6500:	023fd167 	.word	0x023fd167
 23e6504:	023fd16d 	.word	0x023fd16d

023e6508 <_Z12hi_calculateff>:
 * warrant a heat index value below about 80 degrees F. In those cases, a simpler formula 
 * is applied to calculate values consistent with Steadman's results:
 * HI = 0.5 * {T + 61.0 + [(T-68.0)*1.2] + (RH*0.094)} 
 *=======================================================================================================================
 */
float hi_calculate(float T, float RH) {
 23e6508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23e650c:	ee10 0a10 	vmov	r0, s0
 23e6510:	ed2d 8b04 	vpush	{d8-d9}
 23e6514:	eef0 8a60 	vmov.f32	s17, s1
  float HI;
  float HI_f;

  if ((T == -999.9) || (RH == -999.9)) {
 23e6518:	f7fd f8c6 	bl	23e36a8 <__aeabi_f2d>
 23e651c:	a3c1      	add	r3, pc, #772	; (adr r3, 23e6824 <_Z12hi_calculateff+0x31c>)
 23e651e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e6522:	4604      	mov	r4, r0
 23e6524:	460d      	mov	r5, r1
 23e6526:	f7fd fb7f 	bl	23e3c28 <__aeabi_dcmpeq>
 23e652a:	2800      	cmp	r0, #0
 23e652c:	f040 80fa 	bne.w	23e6724 <_Z12hi_calculateff+0x21c>
 23e6530:	ee18 0a90 	vmov	r0, s17
 23e6534:	f7fd f8b8 	bl	23e36a8 <__aeabi_f2d>
 23e6538:	a3ba      	add	r3, pc, #744	; (adr r3, 23e6824 <_Z12hi_calculateff+0x31c>)
 23e653a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e653e:	4680      	mov	r8, r0
 23e6540:	4689      	mov	r9, r1
 23e6542:	f7fd fb71 	bl	23e3c28 <__aeabi_dcmpeq>
 23e6546:	2800      	cmp	r0, #0
 23e6548:	f040 80ec 	bne.w	23e6724 <_Z12hi_calculateff+0x21c>
    return (-999.9);
  }

  // Convert temperature from Celsius to Fahrenheit
  float T_f = T * 9.0 / 5.0 + 32.0;
 23e654c:	2200      	movs	r2, #0
 23e654e:	4620      	mov	r0, r4
 23e6550:	4629      	mov	r1, r5
 23e6552:	4b9d      	ldr	r3, [pc, #628]	; (23e67c8 <_Z12hi_calculateff+0x2c0>)
 23e6554:	f7fd f900 	bl	23e3758 <__aeabi_dmul>
 23e6558:	2200      	movs	r2, #0
 23e655a:	4b9c      	ldr	r3, [pc, #624]	; (23e67cc <_Z12hi_calculateff+0x2c4>)
 23e655c:	f7fd fa26 	bl	23e39ac <__aeabi_ddiv>
 23e6560:	2200      	movs	r2, #0
 23e6562:	4b9b      	ldr	r3, [pc, #620]	; (23e67d0 <_Z12hi_calculateff+0x2c8>)
 23e6564:	f7fc ff42 	bl	23e33ec <__adddf3>
 23e6568:	f7fd fbee 	bl	23e3d48 <__aeabi_d2f>
 23e656c:	ee09 0a10 	vmov	s18, r0

  // Steadman's equation
  HI_f = 0.5 * (T_f + 61.0 + ((T_f - 68.0)*1.2) + (RH * 0.094));
 23e6570:	f7fd f89a 	bl	23e36a8 <__aeabi_f2d>
 23e6574:	2200      	movs	r2, #0
 23e6576:	4b97      	ldr	r3, [pc, #604]	; (23e67d4 <_Z12hi_calculateff+0x2cc>)
 23e6578:	4604      	mov	r4, r0
 23e657a:	460d      	mov	r5, r1
 23e657c:	f7fc ff34 	bl	23e33e8 <__aeabi_dsub>
 23e6580:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 23e6584:	4b94      	ldr	r3, [pc, #592]	; (23e67d8 <_Z12hi_calculateff+0x2d0>)
 23e6586:	f7fd f8e7 	bl	23e3758 <__aeabi_dmul>
 23e658a:	2200      	movs	r2, #0
 23e658c:	4606      	mov	r6, r0
 23e658e:	460f      	mov	r7, r1
 23e6590:	4b92      	ldr	r3, [pc, #584]	; (23e67dc <_Z12hi_calculateff+0x2d4>)
 23e6592:	4620      	mov	r0, r4
 23e6594:	4629      	mov	r1, r5
 23e6596:	f7fc ff29 	bl	23e33ec <__adddf3>
 23e659a:	4602      	mov	r2, r0
 23e659c:	460b      	mov	r3, r1
 23e659e:	4630      	mov	r0, r6
 23e65a0:	4639      	mov	r1, r7
 23e65a2:	f7fc ff23 	bl	23e33ec <__adddf3>
 23e65a6:	a382      	add	r3, pc, #520	; (adr r3, 23e67b0 <_Z12hi_calculateff+0x2a8>)
 23e65a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e65ac:	4606      	mov	r6, r0
 23e65ae:	460f      	mov	r7, r1
 23e65b0:	4640      	mov	r0, r8
 23e65b2:	4649      	mov	r1, r9
 23e65b4:	f7fd f8d0 	bl	23e3758 <__aeabi_dmul>
 23e65b8:	4602      	mov	r2, r0
 23e65ba:	460b      	mov	r3, r1
 23e65bc:	4630      	mov	r0, r6
 23e65be:	4639      	mov	r1, r7
 23e65c0:	f7fc ff14 	bl	23e33ec <__adddf3>
 23e65c4:	2200      	movs	r2, #0
 23e65c6:	4b86      	ldr	r3, [pc, #536]	; (23e67e0 <_Z12hi_calculateff+0x2d8>)
 23e65c8:	f7fd f8c6 	bl	23e3758 <__aeabi_dmul>
 23e65cc:	f7fd fbbc 	bl	23e3d48 <__aeabi_d2f>

  // Compute the average of the simple HI with the actual temperature [deg F]
  HI_f = (HI_f + T_f) / 2;
 23e65d0:	ee07 0a90 	vmov	s15, r0
 23e65d4:	ee37 8a89 	vadd.f32	s16, s15, s18
 23e65d8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5

  if (HI_f >= 80.0) { 
 23e65dc:	ed9f 7a81 	vldr	s14, [pc, #516]	; 23e67e4 <_Z12hi_calculateff+0x2dc>
  HI_f = (HI_f + T_f) / 2;
 23e65e0:	ee28 8a27 	vmul.f32	s16, s16, s15
  if (HI_f >= 80.0) { 
 23e65e4:	eeb4 8ac7 	vcmpe.f32	s16, s14
 23e65e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e65ec:	db75      	blt.n	23e66da <_Z12hi_calculateff+0x1d2>
    float c7 = 0.00122874;
    float c8 = 0.00085282;
    float c9 = -0.00000199;
    
    // Heat Index calculation
    HI_f = c1 + (c2 * T_f) + (c3 * RH) + (c4 * T_f * RH) +
 23e65ee:	eddf 7a7e 	vldr	s15, [pc, #504]	; 23e67e8 <_Z12hi_calculateff+0x2e0>
 23e65f2:	ed9f 8a7e 	vldr	s16, [pc, #504]	; 23e67ec <_Z12hi_calculateff+0x2e4>
 23e65f6:	eea9 8a27 	vfma.f32	s16, s18, s15
 23e65fa:	eddf 7a7d 	vldr	s15, [pc, #500]	; 23e67f0 <_Z12hi_calculateff+0x2e8>
 23e65fe:	eea8 8aa7 	vfma.f32	s16, s17, s15
 23e6602:	eddf 7a7c 	vldr	s15, [pc, #496]	; 23e67f4 <_Z12hi_calculateff+0x2ec>
 23e6606:	ee69 7a27 	vmul.f32	s15, s18, s15
 23e660a:	eea7 8aa8 	vfma.f32	s16, s15, s17
                (c5 * T_f * T_f) + (c6 * RH * RH) + 
 23e660e:	eddf 7a7a 	vldr	s15, [pc, #488]	; 23e67f8 <_Z12hi_calculateff+0x2f0>
 23e6612:	ee69 7a27 	vmul.f32	s15, s18, s15
    HI_f = c1 + (c2 * T_f) + (c3 * RH) + (c4 * T_f * RH) +
 23e6616:	eea7 8a89 	vfma.f32	s16, s15, s18
                (c5 * T_f * T_f) + (c6 * RH * RH) + 
 23e661a:	eddf 7a78 	vldr	s15, [pc, #480]	; 23e67fc <_Z12hi_calculateff+0x2f4>
 23e661e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 23e6622:	eea7 8aa8 	vfma.f32	s16, s15, s17
                (c7 * T_f * T_f * RH) + (c8 * T_f * RH * RH) +
 23e6626:	eddf 7a76 	vldr	s15, [pc, #472]	; 23e6800 <_Z12hi_calculateff+0x2f8>
 23e662a:	ee69 7a27 	vmul.f32	s15, s18, s15
 23e662e:	ee67 7a89 	vmul.f32	s15, s15, s18
                (c5 * T_f * T_f) + (c6 * RH * RH) + 
 23e6632:	eea7 8aa8 	vfma.f32	s16, s15, s17
                (c7 * T_f * T_f * RH) + (c8 * T_f * RH * RH) +
 23e6636:	eddf 7a73 	vldr	s15, [pc, #460]	; 23e6804 <_Z12hi_calculateff+0x2fc>
 23e663a:	ee69 7a27 	vmul.f32	s15, s18, s15
 23e663e:	ee67 7aa8 	vmul.f32	s15, s15, s17
 23e6642:	eea7 8aa8 	vfma.f32	s16, s15, s17
                (c9 * T_f * T_f * RH * RH);
 23e6646:	eddf 7a70 	vldr	s15, [pc, #448]	; 23e6808 <_Z12hi_calculateff+0x300>

    if ((RH < 13.0) && ((T_f > 80.0) && (T_f < 112.0)) ) {
 23e664a:	eef2 9a0a 	vmov.f32	s19, #42	; 0x41500000  13.0
                (c9 * T_f * T_f * RH * RH);
 23e664e:	ee69 7a27 	vmul.f32	s15, s18, s15
    if ((RH < 13.0) && ((T_f > 80.0) && (T_f < 112.0)) ) {
 23e6652:	eef4 8ae9 	vcmpe.f32	s17, s19
                (c9 * T_f * T_f * RH * RH);
 23e6656:	ee67 7a89 	vmul.f32	s15, s15, s18
    if ((RH < 13.0) && ((T_f > 80.0) && (T_f < 112.0)) ) {
 23e665a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                (c9 * T_f * T_f * RH * RH);
 23e665e:	ee67 7aa8 	vmul.f32	s15, s15, s17
    HI_f = c1 + (c2 * T_f) + (c3 * RH) + (c4 * T_f * RH) +
 23e6662:	eea7 8aa8 	vfma.f32	s16, s15, s17
    if ((RH < 13.0) && ((T_f > 80.0) && (T_f < 112.0)) ) {
 23e6666:	d563      	bpl.n	23e6730 <_Z12hi_calculateff+0x228>
 23e6668:	eeb4 9ac7 	vcmpe.f32	s18, s14
 23e666c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e6670:	dd5e      	ble.n	23e6730 <_Z12hi_calculateff+0x228>
 23e6672:	eddf 7a66 	vldr	s15, [pc, #408]	; 23e680c <_Z12hi_calculateff+0x304>
 23e6676:	eeb4 9ae7 	vcmpe.f32	s18, s15
 23e667a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e667e:	f140 8090 	bpl.w	23e67a2 <_Z12hi_calculateff+0x29a>
      // If the RH is less than 13% and the temperature is between 80 and 112 degrees F, 
      // then the following adjustment is subtracted from HI: 
      // ADJUSTMENT = [(13-RH)/4]*SQRT{[17-ABS(T-95.)]/17}

      float Adjustment = ( (13 - RH) / 4 ) * sqrt( (17 - abs(T_f - 95.0) ) / 17 );
 23e6682:	a34d      	add	r3, pc, #308	; (adr r3, 23e67b8 <_Z12hi_calculateff+0x2b0>)
 23e6684:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e6688:	4620      	mov	r0, r4
 23e668a:	4629      	mov	r1, r5
 23e668c:	f7fc feac 	bl	23e33e8 <__aeabi_dsub>
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 23e6690:	4602      	mov	r2, r0
 23e6692:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23e6696:	2000      	movs	r0, #0
 23e6698:	495d      	ldr	r1, [pc, #372]	; (23e6810 <_Z12hi_calculateff+0x308>)
 23e669a:	f7fc fea5 	bl	23e33e8 <__aeabi_dsub>
 23e669e:	2200      	movs	r2, #0
 23e66a0:	4b5b      	ldr	r3, [pc, #364]	; (23e6810 <_Z12hi_calculateff+0x308>)
 23e66a2:	f7fd f983 	bl	23e39ac <__aeabi_ddiv>
 23e66a6:	ec41 0b10 	vmov	d0, r0, r1
 23e66aa:	f013 fecb 	bl	23fa444 <sqrt>
 23e66ae:	ee79 8ae8 	vsub.f32	s17, s19, s17
 23e66b2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 23e66b6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 23e66ba:	ec55 4b10 	vmov	r4, r5, d0
 23e66be:	ee17 0a90 	vmov	r0, s15
 23e66c2:	f7fc fff1 	bl	23e36a8 <__aeabi_f2d>
 23e66c6:	4622      	mov	r2, r4
 23e66c8:	462b      	mov	r3, r5
 23e66ca:	f7fd f845 	bl	23e3758 <__aeabi_dmul>
 23e66ce:	f7fd fb3b 	bl	23e3d48 <__aeabi_d2f>

      HI_f = HI_f - Adjustment;
 23e66d2:	ee07 0a90 	vmov	s15, r0
 23e66d6:	ee38 8a67 	vsub.f32	s16, s16, s15
      HI_f = HI_f + Adjustment;
    }
  }

  // Convert Heat Index from Fahrenheit to Celsius
  HI = (HI_f - 32.0) * 5.0 / 9.0;
 23e66da:	ee18 0a10 	vmov	r0, s16
 23e66de:	f7fc ffe3 	bl	23e36a8 <__aeabi_f2d>
 23e66e2:	2200      	movs	r2, #0
 23e66e4:	4b3a      	ldr	r3, [pc, #232]	; (23e67d0 <_Z12hi_calculateff+0x2c8>)
 23e66e6:	f7fc fe7f 	bl	23e33e8 <__aeabi_dsub>
 23e66ea:	2200      	movs	r2, #0
 23e66ec:	4b37      	ldr	r3, [pc, #220]	; (23e67cc <_Z12hi_calculateff+0x2c4>)
 23e66ee:	f7fd f833 	bl	23e3758 <__aeabi_dmul>
 23e66f2:	2200      	movs	r2, #0
 23e66f4:	4b34      	ldr	r3, [pc, #208]	; (23e67c8 <_Z12hi_calculateff+0x2c0>)
 23e66f6:	f7fd f959 	bl	23e39ac <__aeabi_ddiv>
 23e66fa:	f7fd fb25 	bl	23e3d48 <__aeabi_d2f>
 23e66fe:	ee00 0a10 	vmov	s0, r0

  // Quality Control Check
  HI = (isnan(HI) || (HI < QC_MIN_HI)  || (HI >QC_MAX_HI))  ? QC_ERR_HI  : HI;
 23e6702:	eeb4 0a40 	vcmp.f32	s0, s0
 23e6706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e670a:	d60b      	bvs.n	23e6724 <_Z12hi_calculateff+0x21c>
 23e670c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23e6710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e6714:	d406      	bmi.n	23e6724 <_Z12hi_calculateff+0x21c>
 23e6716:	eddf 7a3f 	vldr	s15, [pc, #252]	; 23e6814 <_Z12hi_calculateff+0x30c>
 23e671a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23e671e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e6722:	dd01      	ble.n	23e6728 <_Z12hi_calculateff+0x220>
 23e6724:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 23e6818 <_Z12hi_calculateff+0x310>

  return (HI);
}
 23e6728:	ecbd 8b04 	vpop	{d8-d9}
 23e672c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if ((RH > 85.0) && ((T_f > 80.0) && (T_f < 87.0)) ) {
 23e6730:	eddf 7a3a 	vldr	s15, [pc, #232]	; 23e681c <_Z12hi_calculateff+0x314>
 23e6734:	eef4 8ae7 	vcmpe.f32	s17, s15
 23e6738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e673c:	ddcd      	ble.n	23e66da <_Z12hi_calculateff+0x1d2>
 23e673e:	eeb4 9ac7 	vcmpe.f32	s18, s14
 23e6742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e6746:	ddc8      	ble.n	23e66da <_Z12hi_calculateff+0x1d2>
 23e6748:	eddf 7a35 	vldr	s15, [pc, #212]	; 23e6820 <_Z12hi_calculateff+0x318>
 23e674c:	eeb4 9ae7 	vcmpe.f32	s18, s15
 23e6750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e6754:	d5c1      	bpl.n	23e66da <_Z12hi_calculateff+0x1d2>
      float Adjustment = ( (RH - 85) / 10 ) * ( (87.0 - T_f) / 5 );
 23e6756:	eddf 0a31 	vldr	s1, [pc, #196]	; 23e681c <_Z12hi_calculateff+0x314>
 23e675a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 23e675e:	ee78 8ae0 	vsub.f32	s17, s17, s1
 23e6762:	eec8 7aa7 	vdiv.f32	s15, s17, s15
 23e6766:	ee17 0a90 	vmov	r0, s15
 23e676a:	f7fc ff9d 	bl	23e36a8 <__aeabi_f2d>
 23e676e:	4622      	mov	r2, r4
 23e6770:	4606      	mov	r6, r0
 23e6772:	460f      	mov	r7, r1
 23e6774:	a112      	add	r1, pc, #72	; (adr r1, 23e67c0 <_Z12hi_calculateff+0x2b8>)
 23e6776:	e9d1 0100 	ldrd	r0, r1, [r1]
 23e677a:	462b      	mov	r3, r5
 23e677c:	f7fc fe34 	bl	23e33e8 <__aeabi_dsub>
 23e6780:	2200      	movs	r2, #0
 23e6782:	4b12      	ldr	r3, [pc, #72]	; (23e67cc <_Z12hi_calculateff+0x2c4>)
 23e6784:	f7fd f912 	bl	23e39ac <__aeabi_ddiv>
 23e6788:	4602      	mov	r2, r0
 23e678a:	460b      	mov	r3, r1
 23e678c:	4630      	mov	r0, r6
 23e678e:	4639      	mov	r1, r7
 23e6790:	f7fc ffe2 	bl	23e3758 <__aeabi_dmul>
 23e6794:	f7fd fad8 	bl	23e3d48 <__aeabi_d2f>
      HI_f = HI_f + Adjustment;
 23e6798:	ee07 0a90 	vmov	s15, r0
 23e679c:	ee38 8a27 	vadd.f32	s16, s16, s15
 23e67a0:	e79b      	b.n	23e66da <_Z12hi_calculateff+0x1d2>
    else if ((RH > 85.0) && ((T_f > 80.0) && (T_f < 87.0)) ) {
 23e67a2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 23e681c <_Z12hi_calculateff+0x314>
 23e67a6:	eef4 8ae7 	vcmpe.f32	s17, s15
 23e67aa:	e7ca      	b.n	23e6742 <_Z12hi_calculateff+0x23a>
 23e67ac:	f3af 8000 	nop.w
 23e67b0:	4dd2f1aa 	.word	0x4dd2f1aa
 23e67b4:	3fb81062 	.word	0x3fb81062
 23e67b8:	00000000 	.word	0x00000000
 23e67bc:	4057c000 	.word	0x4057c000
 23e67c0:	00000000 	.word	0x00000000
 23e67c4:	4055c000 	.word	0x4055c000
 23e67c8:	40220000 	.word	0x40220000
 23e67cc:	40140000 	.word	0x40140000
 23e67d0:	40400000 	.word	0x40400000
 23e67d4:	40510000 	.word	0x40510000
 23e67d8:	3ff33333 	.word	0x3ff33333
 23e67dc:	404e8000 	.word	0x404e8000
 23e67e0:	3fe00000 	.word	0x3fe00000
 23e67e4:	42a00000 	.word	0x42a00000
 23e67e8:	40032311 	.word	0x40032311
 23e67ec:	c2298419 	.word	0xc2298419
 23e67f0:	41224b16 	.word	0x41224b16
 23e67f4:	be662648 	.word	0xbe662648
 23e67f8:	bbe00fe0 	.word	0xbbe00fe0
 23e67fc:	bd6087f8 	.word	0xbd6087f8
 23e6800:	3aa10dac 	.word	0x3aa10dac
 23e6804:	3a5f8fc8 	.word	0x3a5f8fc8
 23e6808:	b6058bf1 	.word	0xb6058bf1
 23e680c:	42e00000 	.word	0x42e00000
 23e6810:	40310000 	.word	0x40310000
 23e6814:	42700000 	.word	0x42700000
 23e6818:	c479f99a 	.word	0xc479f99a
 23e681c:	42aa0000 	.word	0x42aa0000
 23e6820:	42ae0000 	.word	0x42ae0000
 23e6824:	33333333 	.word	0x33333333
 23e6828:	c08f3f33 	.word	0xc08f3f33

023e682c <_Z15wbgt_initializev>:
/* 
 *=======================================================================================================================
 * wbgt_initialize() - Wet Bulb Globe Temperature
 *=======================================================================================================================
 */
void wbgt_initialize() {
 23e682c:	b508      	push	{r3, lr}
  Output("WBGT:INIT");
 23e682e:	480c      	ldr	r0, [pc, #48]	; (23e6860 <_Z15wbgt_initializev+0x34>)
 23e6830:	f7fe ff2c 	bl	23e568c <_Z6OutputPKc>
  if (MCP_1_exists && SHT_1_exists) {
 23e6834:	4b0b      	ldr	r3, [pc, #44]	; (23e6864 <_Z15wbgt_initializev+0x38>)
 23e6836:	781b      	ldrb	r3, [r3, #0]
 23e6838:	b17b      	cbz	r3, 23e685a <_Z15wbgt_initializev+0x2e>
 23e683a:	4b0b      	ldr	r3, [pc, #44]	; (23e6868 <_Z15wbgt_initializev+0x3c>)
 23e683c:	781b      	ldrb	r3, [r3, #0]
 23e683e:	b163      	cbz	r3, 23e685a <_Z15wbgt_initializev+0x2e>
    WBGT_exists = true;
 23e6840:	2201      	movs	r2, #1
 23e6842:	4b0a      	ldr	r3, [pc, #40]	; (23e686c <_Z15wbgt_initializev+0x40>)
 23e6844:	701a      	strb	r2, [r3, #0]
    if (MCP_3_exists) {
 23e6846:	4b0a      	ldr	r3, [pc, #40]	; (23e6870 <_Z15wbgt_initializev+0x44>)
 23e6848:	781b      	ldrb	r3, [r3, #0]
 23e684a:	b123      	cbz	r3, 23e6856 <_Z15wbgt_initializev+0x2a>
      Output ("WBGT:OK w/Globe");
 23e684c:	4809      	ldr	r0, [pc, #36]	; (23e6874 <_Z15wbgt_initializev+0x48>)
    }
  }
  else {
    Output ("WBGT:NF");
  }
}
 23e684e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Output ("WBGT:NF");
 23e6852:	f7fe bf1b 	b.w	23e568c <_Z6OutputPKc>
      Output ("WBGT:OK wo/Globe");
 23e6856:	4808      	ldr	r0, [pc, #32]	; (23e6878 <_Z15wbgt_initializev+0x4c>)
 23e6858:	e7f9      	b.n	23e684e <_Z15wbgt_initializev+0x22>
    Output ("WBGT:NF");
 23e685a:	4808      	ldr	r0, [pc, #32]	; (23e687c <_Z15wbgt_initializev+0x50>)
 23e685c:	e7f7      	b.n	23e684e <_Z15wbgt_initializev+0x22>
 23e685e:	bf00      	nop
 23e6860:	023fd173 	.word	0x023fd173
 23e6864:	1006a2c8 	.word	0x1006a2c8
 23e6868:	1006a7d4 	.word	0x1006a7d4
 23e686c:	1006a7e9 	.word	0x1006a7e9
 23e6870:	1006a2ca 	.word	0x1006a2ca
 23e6874:	023fd17d 	.word	0x023fd17d
 23e6878:	023fd18d 	.word	0x023fd18d
 23e687c:	023fd19e 	.word	0x023fd19e

023e6880 <_Z13wbgt_using_hid>:
/* 
 *=======================================================================================================================
 * wbgt_using_hi() - Compute Web Bulb Globe Temperature using Heat Index
 *=======================================================================================================================
 */
double wbgt_using_hi(double HIc) {
 23e6880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  if (HIc == -999.9) {
 23e6882:	a32f      	add	r3, pc, #188	; (adr r3, 23e6940 <_Z13wbgt_using_hid+0xc0>)
 23e6884:	e9d3 2300 	ldrd	r2, r3, [r3]
double wbgt_using_hi(double HIc) {
 23e6888:	ec55 4b10 	vmov	r4, r5, d0
  if (HIc == -999.9) {
 23e688c:	ee10 0a10 	vmov	r0, s0
 23e6890:	4629      	mov	r1, r5
 23e6892:	f7fd f9c9 	bl	23e3c28 <__aeabi_dcmpeq>
 23e6896:	2800      	cmp	r0, #0
 23e6898:	d140      	bne.n	23e691c <_Z13wbgt_using_hid+0x9c>
    return (-999.9);
  }

  double HIf = HIc * 9.0 / 5.0 + 32.0;
 23e689a:	2200      	movs	r2, #0
 23e689c:	4620      	mov	r0, r4
 23e689e:	4629      	mov	r1, r5
 23e68a0:	4b29      	ldr	r3, [pc, #164]	; (23e6948 <_Z13wbgt_using_hid+0xc8>)
 23e68a2:	f7fc ff59 	bl	23e3758 <__aeabi_dmul>
 23e68a6:	2200      	movs	r2, #0
 23e68a8:	4b28      	ldr	r3, [pc, #160]	; (23e694c <_Z13wbgt_using_hid+0xcc>)
 23e68aa:	f7fd f87f 	bl	23e39ac <__aeabi_ddiv>
 23e68ae:	2200      	movs	r2, #0
 23e68b0:	4b27      	ldr	r3, [pc, #156]	; (23e6950 <_Z13wbgt_using_hid+0xd0>)
 23e68b2:	f7fc fd9b 	bl	23e33ec <__adddf3>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 23e68b6:	4602      	mov	r2, r0
 23e68b8:	460b      	mov	r3, r1
 23e68ba:	4604      	mov	r4, r0
 23e68bc:	460d      	mov	r5, r1
 23e68be:	f7fc ff4b 	bl	23e3758 <__aeabi_dmul>

  // Below produces Wet Bulb Globe Temperature in Celsius
  double TWc = -0.0034 * pow(HIf, 2) + 0.96 * HIf - 34;
 23e68c2:	a31b      	add	r3, pc, #108	; (adr r3, 23e6930 <_Z13wbgt_using_hid+0xb0>)
 23e68c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e68c8:	f7fc ff46 	bl	23e3758 <__aeabi_dmul>
 23e68cc:	a31a      	add	r3, pc, #104	; (adr r3, 23e6938 <_Z13wbgt_using_hid+0xb8>)
 23e68ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e68d2:	4606      	mov	r6, r0
 23e68d4:	460f      	mov	r7, r1
 23e68d6:	4620      	mov	r0, r4
 23e68d8:	4629      	mov	r1, r5
 23e68da:	f7fc ff3d 	bl	23e3758 <__aeabi_dmul>
 23e68de:	4602      	mov	r2, r0
 23e68e0:	460b      	mov	r3, r1
 23e68e2:	4630      	mov	r0, r6
 23e68e4:	4639      	mov	r1, r7
 23e68e6:	f7fc fd81 	bl	23e33ec <__adddf3>
 23e68ea:	2200      	movs	r2, #0
 23e68ec:	4b19      	ldr	r3, [pc, #100]	; (23e6954 <_Z13wbgt_using_hid+0xd4>)
 23e68ee:	f7fc fd7b 	bl	23e33e8 <__aeabi_dsub>

  TWc = (isnan(TWc) || (TWc < QC_MIN_T)  || (TWc >QC_MAX_T))  ? QC_ERR_T  : TWc;
 23e68f2:	4602      	mov	r2, r0
 23e68f4:	460b      	mov	r3, r1
  double TWc = -0.0034 * pow(HIf, 2) + 0.96 * HIf - 34;
 23e68f6:	4604      	mov	r4, r0
 23e68f8:	460d      	mov	r5, r1
  TWc = (isnan(TWc) || (TWc < QC_MIN_T)  || (TWc >QC_MAX_T))  ? QC_ERR_T  : TWc;
 23e68fa:	f7fd f9c7 	bl	23e3c8c <__aeabi_dcmpun>
 23e68fe:	b980      	cbnz	r0, 23e6922 <_Z13wbgt_using_hid+0xa2>
 23e6900:	2200      	movs	r2, #0
 23e6902:	4620      	mov	r0, r4
 23e6904:	4629      	mov	r1, r5
 23e6906:	4b14      	ldr	r3, [pc, #80]	; (23e6958 <_Z13wbgt_using_hid+0xd8>)
 23e6908:	f7fd f998 	bl	23e3c3c <__aeabi_dcmplt>
 23e690c:	b948      	cbnz	r0, 23e6922 <_Z13wbgt_using_hid+0xa2>
 23e690e:	2200      	movs	r2, #0
 23e6910:	4620      	mov	r0, r4
 23e6912:	4629      	mov	r1, r5
 23e6914:	4b11      	ldr	r3, [pc, #68]	; (23e695c <_Z13wbgt_using_hid+0xdc>)
 23e6916:	f7fd f9af 	bl	23e3c78 <__aeabi_dcmpgt>
 23e691a:	b910      	cbnz	r0, 23e6922 <_Z13wbgt_using_hid+0xa2>
  return (TWc);
}
 23e691c:	ec45 4b10 	vmov	d0, r4, r5
 23e6920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TWc = (isnan(TWc) || (TWc < QC_MIN_T)  || (TWc >QC_MAX_T))  ? QC_ERR_T  : TWc;
 23e6922:	a507      	add	r5, pc, #28	; (adr r5, 23e6940 <_Z13wbgt_using_hid+0xc0>)
 23e6924:	e9d5 4500 	ldrd	r4, r5, [r5]
 23e6928:	e7f8      	b.n	23e691c <_Z13wbgt_using_hid+0x9c>
 23e692a:	bf00      	nop
 23e692c:	f3af 8000 	nop.w
 23e6930:	19ce075f 	.word	0x19ce075f
 23e6934:	bf6bda51 	.word	0xbf6bda51
 23e6938:	eb851eb8 	.word	0xeb851eb8
 23e693c:	3feeb851 	.word	0x3feeb851
 23e6940:	33333333 	.word	0x33333333
 23e6944:	c08f3f33 	.word	0xc08f3f33
 23e6948:	40220000 	.word	0x40220000
 23e694c:	40140000 	.word	0x40140000
 23e6950:	40400000 	.word	0x40400000
 23e6954:	40410000 	.word	0x40410000
 23e6958:	c0440000 	.word	0xc0440000
 23e695c:	404e0000 	.word	0x404e0000

023e6960 <_Z14wbgt_using_wbtddd>:
/* 
 *=======================================================================================================================
 * wbgt_using_wbt() - Compute Web Bulb Globe Temperature using web bulb temperature
 *=======================================================================================================================
 */
double wbgt_using_wbt(double Ta, double Tg, double Tw) {
 23e6960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  // Ta = mcp1 temp
  // Tg = mcp3 temp
  // Tw = wbt_calculate(Ta, RH)

  double wbgt = (0.7 * Tw) + (0.2 * Tg) + (0.1 * Ta);  // This will be Celsius
 23e6964:	a326      	add	r3, pc, #152	; (adr r3, 23e6a00 <_Z14wbgt_using_wbtddd+0xa0>)
 23e6966:	e9d3 2300 	ldrd	r2, r3, [r3]
double wbgt_using_wbt(double Ta, double Tg, double Tw) {
 23e696a:	ec51 0b12 	vmov	r0, r1, d2
 23e696e:	ec57 6b10 	vmov	r6, r7, d0
 23e6972:	ec59 8b11 	vmov	r8, r9, d1
  double wbgt = (0.7 * Tw) + (0.2 * Tg) + (0.1 * Ta);  // This will be Celsius
 23e6976:	f7fc feef 	bl	23e3758 <__aeabi_dmul>
 23e697a:	a323      	add	r3, pc, #140	; (adr r3, 23e6a08 <_Z14wbgt_using_wbtddd+0xa8>)
 23e697c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e6980:	4604      	mov	r4, r0
 23e6982:	460d      	mov	r5, r1
 23e6984:	4640      	mov	r0, r8
 23e6986:	4649      	mov	r1, r9
 23e6988:	f7fc fee6 	bl	23e3758 <__aeabi_dmul>
 23e698c:	4602      	mov	r2, r0
 23e698e:	460b      	mov	r3, r1
 23e6990:	4620      	mov	r0, r4
 23e6992:	4629      	mov	r1, r5
 23e6994:	f7fc fd2a 	bl	23e33ec <__adddf3>
 23e6998:	a31d      	add	r3, pc, #116	; (adr r3, 23e6a10 <_Z14wbgt_using_wbtddd+0xb0>)
 23e699a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e699e:	4604      	mov	r4, r0
 23e69a0:	460d      	mov	r5, r1
 23e69a2:	4630      	mov	r0, r6
 23e69a4:	4639      	mov	r1, r7
 23e69a6:	f7fc fed7 	bl	23e3758 <__aeabi_dmul>
 23e69aa:	4602      	mov	r2, r0
 23e69ac:	460b      	mov	r3, r1
 23e69ae:	4620      	mov	r0, r4
 23e69b0:	4629      	mov	r1, r5
 23e69b2:	f7fc fd1b 	bl	23e33ec <__adddf3>

  wbgt = (isnan(wbgt) || (wbgt < QC_MIN_T)  || (wbgt >QC_MAX_T))  ? QC_ERR_T  : wbgt;
 23e69b6:	4602      	mov	r2, r0
 23e69b8:	460b      	mov	r3, r1
  double wbgt = (0.7 * Tw) + (0.2 * Tg) + (0.1 * Ta);  // This will be Celsius
 23e69ba:	4604      	mov	r4, r0
 23e69bc:	460d      	mov	r5, r1
  wbgt = (isnan(wbgt) || (wbgt < QC_MIN_T)  || (wbgt >QC_MAX_T))  ? QC_ERR_T  : wbgt;
 23e69be:	f7fd f965 	bl	23e3c8c <__aeabi_dcmpun>
 23e69c2:	b988      	cbnz	r0, 23e69e8 <_Z14wbgt_using_wbtddd+0x88>
 23e69c4:	2200      	movs	r2, #0
 23e69c6:	4620      	mov	r0, r4
 23e69c8:	4629      	mov	r1, r5
 23e69ca:	4b0b      	ldr	r3, [pc, #44]	; (23e69f8 <_Z14wbgt_using_wbtddd+0x98>)
 23e69cc:	f7fd f936 	bl	23e3c3c <__aeabi_dcmplt>
 23e69d0:	b950      	cbnz	r0, 23e69e8 <_Z14wbgt_using_wbtddd+0x88>
 23e69d2:	2200      	movs	r2, #0
 23e69d4:	4620      	mov	r0, r4
 23e69d6:	4629      	mov	r1, r5
 23e69d8:	4b08      	ldr	r3, [pc, #32]	; (23e69fc <_Z14wbgt_using_wbtddd+0x9c>)
 23e69da:	f7fd f94d 	bl	23e3c78 <__aeabi_dcmpgt>
 23e69de:	b918      	cbnz	r0, 23e69e8 <_Z14wbgt_using_wbtddd+0x88>

  return (wbgt);
}
 23e69e0:	ec45 4b10 	vmov	d0, r4, r5
 23e69e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  wbgt = (isnan(wbgt) || (wbgt < QC_MIN_T)  || (wbgt >QC_MAX_T))  ? QC_ERR_T  : wbgt;
 23e69e8:	a501      	add	r5, pc, #4	; (adr r5, 23e69f0 <_Z14wbgt_using_wbtddd+0x90>)
 23e69ea:	e9d5 4500 	ldrd	r4, r5, [r5]
  return (wbgt);
 23e69ee:	e7f7      	b.n	23e69e0 <_Z14wbgt_using_wbtddd+0x80>
 23e69f0:	33333333 	.word	0x33333333
 23e69f4:	c08f3f33 	.word	0xc08f3f33
 23e69f8:	c0440000 	.word	0xc0440000
 23e69fc:	404e0000 	.word	0x404e0000
 23e6a00:	66666666 	.word	0x66666666
 23e6a04:	3fe66666 	.word	0x3fe66666
 23e6a08:	9999999a 	.word	0x9999999a
 23e6a0c:	3fc99999 	.word	0x3fc99999
 23e6a10:	9999999a 	.word	0x9999999a
 23e6a14:	3fb99999 	.word	0x3fb99999

023e6a18 <_Z17si1145_initializev>:
/* 
 *=======================================================================================================================
 * si1145_initialize() - SI1145 sensor initialize
 *=======================================================================================================================
 */
void si1145_initialize() {
 23e6a18:	b570      	push	{r4, r5, r6, lr}
  Output("SI1145:INIT");
 23e6a1a:	484b      	ldr	r0, [pc, #300]	; (23e6b48 <_Z17si1145_initializev+0x130>)
void si1145_initialize() {
 23e6a1c:	ed2d 8b02 	vpush	{d8}
  Output("SI1145:INIT");
 23e6a20:	f7fe fe34 	bl	23e568c <_Z6OutputPKc>
  
  // SSB_SI1145 UV index & IR & Visible Sensor (I2C ADDRESS = 0x60)
  if (! uv.begin(&Wire)) {
 23e6a24:	f013 f88e 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e6a28:	4601      	mov	r1, r0
 23e6a2a:	4848      	ldr	r0, [pc, #288]	; (23e6b4c <_Z17si1145_initializev+0x134>)
 23e6a2c:	f00a fa94 	bl	23f0f58 <_ZN15Adafruit_SI11455beginEP7TwoWire>
 23e6a30:	4d47      	ldr	r5, [pc, #284]	; (23e6b50 <_Z17si1145_initializev+0x138>)
 23e6a32:	4604      	mov	r4, r0
 23e6a34:	b958      	cbnz	r0, 23e6a4e <_Z17si1145_initializev+0x36>
    Output ("SI:NF");
 23e6a36:	4847      	ldr	r0, [pc, #284]	; (23e6b54 <_Z17si1145_initializev+0x13c>)
 23e6a38:	f7fe fe28 	bl	23e568c <_Z6OutputPKc>
    SI1145_exists = false;
    SystemStatusBits |= SSB_SI1145;  // Turn On Bit
 23e6a3c:	4a46      	ldr	r2, [pc, #280]	; (23e6b58 <_Z17si1145_initializev+0x140>)
    SI1145_exists = false;
 23e6a3e:	702c      	strb	r4, [r5, #0]
    SystemStatusBits |= SSB_SI1145;  // Turn On Bit
 23e6a40:	6813      	ldr	r3, [r2, #0]
 23e6a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 23e6a46:	6013      	str	r3, [r2, #0]
    sprintf (msgbuf, "SI:IR[%d.%02d]", (int)si_last_ir, (int)(si_last_ir*100.0)%100); 
    Output (msgbuf);
    sprintf (msgbuf, "SI:UV[%d.%02d]", (int)si_last_uv, (int)(si_last_uv*100.0)%100); 
    Output (msgbuf);
  }
}
 23e6a48:	ecbd 8b02 	vpop	{d8}
 23e6a4c:	bd70      	pop	{r4, r5, r6, pc}
    SI1145_exists = true;
 23e6a4e:	2301      	movs	r3, #1
    Output ("SI:OK");
 23e6a50:	4842      	ldr	r0, [pc, #264]	; (23e6b5c <_Z17si1145_initializev+0x144>)
    SI1145_exists = true;
 23e6a52:	702b      	strb	r3, [r5, #0]
    Output ("SI:OK");
 23e6a54:	f7fe fe1a 	bl	23e568c <_Z6OutputPKc>
    si_last_vis = uv.readVisible();
 23e6a58:	483c      	ldr	r0, [pc, #240]	; (23e6b4c <_Z17si1145_initializev+0x134>)
 23e6a5a:	f00a f996 	bl	23f0d8a <_ZN15Adafruit_SI114511readVisibleEv>
 23e6a5e:	ee07 0a90 	vmov	s15, r0
 23e6a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23e6a66:	4c3e      	ldr	r4, [pc, #248]	; (23e6b60 <_Z17si1145_initializev+0x148>)
    si_last_ir = uv.readIR();
 23e6a68:	4838      	ldr	r0, [pc, #224]	; (23e6b4c <_Z17si1145_initializev+0x134>)
    si_last_vis = uv.readVisible();
 23e6a6a:	edc4 7a00 	vstr	s15, [r4]
    si_last_ir = uv.readIR();
 23e6a6e:	f00a f98f 	bl	23f0d90 <_ZN15Adafruit_SI11456readIREv>
 23e6a72:	ee07 0a90 	vmov	s15, r0
 23e6a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23e6a7a:	4e3a      	ldr	r6, [pc, #232]	; (23e6b64 <_Z17si1145_initializev+0x14c>)
    si_last_uv = uv.readUV()/100.0;
 23e6a7c:	4833      	ldr	r0, [pc, #204]	; (23e6b4c <_Z17si1145_initializev+0x134>)
    si_last_ir = uv.readIR();
 23e6a7e:	edc6 7a00 	vstr	s15, [r6]
    si_last_uv = uv.readUV()/100.0;
 23e6a82:	f00a f97f 	bl	23f0d84 <_ZN15Adafruit_SI11456readUVEv>
 23e6a86:	f7fc fdfd 	bl	23e3684 <__aeabi_i2d>
 23e6a8a:	2200      	movs	r2, #0
 23e6a8c:	4b36      	ldr	r3, [pc, #216]	; (23e6b68 <_Z17si1145_initializev+0x150>)
 23e6a8e:	f7fc ff8d 	bl	23e39ac <__aeabi_ddiv>
 23e6a92:	f7fd f959 	bl	23e3d48 <__aeabi_d2f>
    sprintf (msgbuf, "SI:VI[%d.%02d]", (int)si_last_vis, (int)(si_last_vis*100.0)%100); 
 23e6a96:	ed94 8a00 	vldr	s16, [r4]
    si_last_uv = uv.readUV()/100.0;
 23e6a9a:	4d34      	ldr	r5, [pc, #208]	; (23e6b6c <_Z17si1145_initializev+0x154>)
    sprintf (msgbuf, "SI:VI[%d.%02d]", (int)si_last_vis, (int)(si_last_vis*100.0)%100); 
 23e6a9c:	2464      	movs	r4, #100	; 0x64
    si_last_uv = uv.readUV()/100.0;
 23e6a9e:	6028      	str	r0, [r5, #0]
    sprintf (msgbuf, "SI:VI[%d.%02d]", (int)si_last_vis, (int)(si_last_vis*100.0)%100); 
 23e6aa0:	ee18 0a10 	vmov	r0, s16
 23e6aa4:	f7fc fe00 	bl	23e36a8 <__aeabi_f2d>
 23e6aa8:	2200      	movs	r2, #0
 23e6aaa:	4b2f      	ldr	r3, [pc, #188]	; (23e6b68 <_Z17si1145_initializev+0x150>)
 23e6aac:	f7fc fe54 	bl	23e3758 <__aeabi_dmul>
 23e6ab0:	f7fd f902 	bl	23e3cb8 <__aeabi_d2iz>
 23e6ab4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 23e6ab8:	fb90 f3f4 	sdiv	r3, r0, r4
 23e6abc:	ee17 2a90 	vmov	r2, s15
 23e6ac0:	fb03 0314 	mls	r3, r3, r4, r0
 23e6ac4:	492a      	ldr	r1, [pc, #168]	; (23e6b70 <_Z17si1145_initializev+0x158>)
 23e6ac6:	482b      	ldr	r0, [pc, #172]	; (23e6b74 <_Z17si1145_initializev+0x15c>)
 23e6ac8:	f010 fcce 	bl	23f7468 <sprintf>
    Output (msgbuf);
 23e6acc:	4829      	ldr	r0, [pc, #164]	; (23e6b74 <_Z17si1145_initializev+0x15c>)
 23e6ace:	f7fe fddd 	bl	23e568c <_Z6OutputPKc>
    sprintf (msgbuf, "SI:IR[%d.%02d]", (int)si_last_ir, (int)(si_last_ir*100.0)%100); 
 23e6ad2:	ed96 8a00 	vldr	s16, [r6]
 23e6ad6:	ee18 0a10 	vmov	r0, s16
 23e6ada:	f7fc fde5 	bl	23e36a8 <__aeabi_f2d>
 23e6ade:	2200      	movs	r2, #0
 23e6ae0:	4b21      	ldr	r3, [pc, #132]	; (23e6b68 <_Z17si1145_initializev+0x150>)
 23e6ae2:	f7fc fe39 	bl	23e3758 <__aeabi_dmul>
 23e6ae6:	f7fd f8e7 	bl	23e3cb8 <__aeabi_d2iz>
 23e6aea:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 23e6aee:	fb90 f3f4 	sdiv	r3, r0, r4
 23e6af2:	ee17 2a90 	vmov	r2, s15
 23e6af6:	fb03 0314 	mls	r3, r3, r4, r0
 23e6afa:	491f      	ldr	r1, [pc, #124]	; (23e6b78 <_Z17si1145_initializev+0x160>)
 23e6afc:	481d      	ldr	r0, [pc, #116]	; (23e6b74 <_Z17si1145_initializev+0x15c>)
 23e6afe:	f010 fcb3 	bl	23f7468 <sprintf>
    Output (msgbuf);
 23e6b02:	481c      	ldr	r0, [pc, #112]	; (23e6b74 <_Z17si1145_initializev+0x15c>)
 23e6b04:	f7fe fdc2 	bl	23e568c <_Z6OutputPKc>
    sprintf (msgbuf, "SI:UV[%d.%02d]", (int)si_last_uv, (int)(si_last_uv*100.0)%100); 
 23e6b08:	ed95 8a00 	vldr	s16, [r5]
 23e6b0c:	ee18 0a10 	vmov	r0, s16
 23e6b10:	f7fc fdca 	bl	23e36a8 <__aeabi_f2d>
 23e6b14:	2200      	movs	r2, #0
 23e6b16:	4b14      	ldr	r3, [pc, #80]	; (23e6b68 <_Z17si1145_initializev+0x150>)
 23e6b18:	f7fc fe1e 	bl	23e3758 <__aeabi_dmul>
 23e6b1c:	f7fd f8cc 	bl	23e3cb8 <__aeabi_d2iz>
 23e6b20:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 23e6b24:	fb90 f3f4 	sdiv	r3, r0, r4
 23e6b28:	ee17 2a90 	vmov	r2, s15
 23e6b2c:	fb03 0314 	mls	r3, r3, r4, r0
 23e6b30:	4912      	ldr	r1, [pc, #72]	; (23e6b7c <_Z17si1145_initializev+0x164>)
 23e6b32:	4810      	ldr	r0, [pc, #64]	; (23e6b74 <_Z17si1145_initializev+0x15c>)
 23e6b34:	f010 fc98 	bl	23f7468 <sprintf>
}
 23e6b38:	ecbd 8b02 	vpop	{d8}
 23e6b3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Output (msgbuf);
 23e6b40:	480c      	ldr	r0, [pc, #48]	; (23e6b74 <_Z17si1145_initializev+0x15c>)
 23e6b42:	f7fe bda3 	b.w	23e568c <_Z6OutputPKc>
 23e6b46:	bf00      	nop
 23e6b48:	023fd1a6 	.word	0x023fd1a6
 23e6b4c:	1007ac18 	.word	0x1007ac18
 23e6b50:	1006a7d6 	.word	0x1006a7d6
 23e6b54:	023fe6d8 	.word	0x023fe6d8
 23e6b58:	1006a178 	.word	0x1006a178
 23e6b5c:	023fd1b2 	.word	0x023fd1b2
 23e6b60:	1007abdc 	.word	0x1007abdc
 23e6b64:	1007abd4 	.word	0x1007abd4
 23e6b68:	40590000 	.word	0x40590000
 23e6b6c:	1007abd8 	.word	0x1007abd8
 23e6b70:	023fd1b8 	.word	0x023fd1b8
 23e6b74:	1006f128 	.word	0x1006f128
 23e6b78:	023fd1c7 	.word	0x023fd1c7
 23e6b7c:	023fd1d6 	.word	0x023fd1d6

023e6b80 <_Z14vlx_initializev>:
 * 400  lx Sunrise or sunset on a clear day
 * 1000 lx Overcast day; typical TV studio lighting
 * 
 *=======================================================================================================================
 */
void vlx_initialize() {
 23e6b80:	b508      	push	{r3, lr}
  Output("VLX:INIT");
 23e6b82:	480f      	ldr	r0, [pc, #60]	; (23e6bc0 <_Z14vlx_initializev+0x40>)
 23e6b84:	f7fe fd82 	bl	23e568c <_Z6OutputPKc>

  if (veml.begin()) {
 23e6b88:	f012 ffdc 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e6b8c:	4601      	mov	r1, r0
 23e6b8e:	480d      	ldr	r0, [pc, #52]	; (23e6bc4 <_Z14vlx_initializev+0x44>)
 23e6b90:	f00a ff57 	bl	23f1a42 <_ZN17Adafruit_VEML77005beginEP7TwoWire>
 23e6b94:	4a0c      	ldr	r2, [pc, #48]	; (23e6bc8 <_Z14vlx_initializev+0x48>)
 23e6b96:	4b0d      	ldr	r3, [pc, #52]	; (23e6bcc <_Z14vlx_initializev+0x4c>)
 23e6b98:	b140      	cbz	r0, 23e6bac <_Z14vlx_initializev+0x2c>
    VEML7700_exists = true;
 23e6b9a:	2101      	movs	r1, #1
 23e6b9c:	7011      	strb	r1, [r2, #0]
    msgp = (char *) "VLX OK";
 23e6b9e:	4a0c      	ldr	r2, [pc, #48]	; (23e6bd0 <_Z14vlx_initializev+0x50>)
 23e6ba0:	601a      	str	r2, [r3, #0]
  else {
    msgp = (char *) "VLX NF";
    VEML7700_exists = false;
    SystemStatusBits |= SSB_VLX;  // Turn On Bit
  }
  Output (msgp);
 23e6ba2:	6818      	ldr	r0, [r3, #0]
}
 23e6ba4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
 23e6ba8:	f7fe bd70 	b.w	23e568c <_Z6OutputPKc>
    msgp = (char *) "VLX NF";
 23e6bac:	4909      	ldr	r1, [pc, #36]	; (23e6bd4 <_Z14vlx_initializev+0x54>)
    VEML7700_exists = false;
 23e6bae:	7010      	strb	r0, [r2, #0]
    msgp = (char *) "VLX NF";
 23e6bb0:	6019      	str	r1, [r3, #0]
    SystemStatusBits |= SSB_VLX;  // Turn On Bit
 23e6bb2:	4909      	ldr	r1, [pc, #36]	; (23e6bd8 <_Z14vlx_initializev+0x58>)
 23e6bb4:	680a      	ldr	r2, [r1, #0]
 23e6bb6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 23e6bba:	600a      	str	r2, [r1, #0]
 23e6bbc:	e7f1      	b.n	23e6ba2 <_Z14vlx_initializev+0x22>
 23e6bbe:	bf00      	nop
 23e6bc0:	023fd1e5 	.word	0x023fd1e5
 23e6bc4:	1007ac20 	.word	0x1007ac20
 23e6bc8:	1006a7e8 	.word	0x1006a7e8
 23e6bcc:	1006f528 	.word	0x1006f528
 23e6bd0:	023fd1ee 	.word	0x023fd1ee
 23e6bd4:	023fd1f5 	.word	0x023fd1f5
 23e6bd8:	1006a178 	.word	0x1006a178

023e6bdc <_Z14blx_initializev>:
/* 
 *=======================================================================================================================
 * blx_initialize() - DFRobot_B_LUX_V30B sensor
 *=======================================================================================================================
 */
void blx_initialize() {
 23e6bdc:	b508      	push	{r3, lr}
  Output("BLX:INIT");
 23e6bde:	480d      	ldr	r0, [pc, #52]	; (23e6c14 <_Z14blx_initializev+0x38>)
 23e6be0:	f7fe fd54 	bl	23e568c <_Z6OutputPKc>

  if (I2C_Device_Exist(BLX_ADDRESS)) {
 23e6be4:	204a      	movs	r0, #74	; 0x4a
 23e6be6:	f7fe fb48 	bl	23e527a <_Z16I2C_Device_Existh>
 23e6bea:	4a0b      	ldr	r2, [pc, #44]	; (23e6c18 <_Z14blx_initializev+0x3c>)
 23e6bec:	4b0b      	ldr	r3, [pc, #44]	; (23e6c1c <_Z14blx_initializev+0x40>)
 23e6bee:	b140      	cbz	r0, 23e6c02 <_Z14blx_initializev+0x26>
    BLX_exists = true;
 23e6bf0:	2101      	movs	r1, #1
 23e6bf2:	7011      	strb	r1, [r2, #0]
    msgp = (char *) "BLX:OK";
 23e6bf4:	4a0a      	ldr	r2, [pc, #40]	; (23e6c20 <_Z14blx_initializev+0x44>)
 23e6bf6:	601a      	str	r2, [r3, #0]
  else {
    BLX_exists = false;
    msgp = (char *) "BLX:NF";
    SystemStatusBits |= SSB_BLX;  // Turn On Bit
  }
  Output (msgp);
 23e6bf8:	6818      	ldr	r0, [r3, #0]
}
 23e6bfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
 23e6bfe:	f7fe bd45 	b.w	23e568c <_Z6OutputPKc>
    SystemStatusBits |= SSB_BLX;  // Turn On Bit
 23e6c02:	4908      	ldr	r1, [pc, #32]	; (23e6c24 <_Z14blx_initializev+0x48>)
    BLX_exists = false;
 23e6c04:	7010      	strb	r0, [r2, #0]
    msgp = (char *) "BLX:NF";
 23e6c06:	4a08      	ldr	r2, [pc, #32]	; (23e6c28 <_Z14blx_initializev+0x4c>)
 23e6c08:	601a      	str	r2, [r3, #0]
    SystemStatusBits |= SSB_BLX;  // Turn On Bit
 23e6c0a:	680a      	ldr	r2, [r1, #0]
 23e6c0c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 23e6c10:	600a      	str	r2, [r1, #0]
 23e6c12:	e7f1      	b.n	23e6bf8 <_Z14blx_initializev+0x1c>
 23e6c14:	023fd1fc 	.word	0x023fd1fc
 23e6c18:	1006a280 	.word	0x1006a280
 23e6c1c:	1006f528 	.word	0x1006f528
 23e6c20:	023fd205 	.word	0x023fd205
 23e6c24:	1006a178 	.word	0x1006a178
 23e6c28:	023fd20c 	.word	0x023fd20c
 23e6c2c:	00000000 	.word	0x00000000

023e6c30 <_Z15blx_takereadingv>:
/* 
 *=======================================================================================================================
 * blx_takereading() - DFRobot_B_LUX_V30B sensor reading
 *=======================================================================================================================
 */
float blx_takereading() {
 23e6c30:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t raw;
  uint8_t data[4]; // Array to hold the 4 bytes of data
  const unsigned long timeout = 1000; // Timeout in milliseconds
  unsigned long startTime;

  Wire.beginTransmission(BLX_ADDRESS);
 23e6c32:	f012 ff87 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e6c36:	214a      	movs	r1, #74	; 0x4a
 23e6c38:	f011 fae8 	bl	23f820c <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x00); // Point to the data register address
 23e6c3c:	f012 ff82 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e6c40:	2100      	movs	r1, #0
 23e6c42:	f7fe f993 	bl	23e4f6c <_ZN7TwoWire5writeEi.isra.0>
  Wire.endTransmission(false); // false tells the I2C master to not release the bus between the write and read operations
 23e6c46:	f012 ff7d 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e6c4a:	2100      	movs	r1, #0
 23e6c4c:	f011 fae1 	bl	23f8212 <_ZN7TwoWire15endTransmissionEh>

  // Request 4 bytes from the device
  Wire.requestFrom(BLX_ADDRESS, 4);
 23e6c50:	f012 ff78 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e6c54:	2204      	movs	r2, #4
 23e6c56:	214a      	movs	r1, #74	; 0x4a
 23e6c58:	f011 fad1 	bl	23f81fe <_ZN7TwoWire11requestFromEhj>
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23e6c5c:	f00f fd90 	bl	23f6780 <HAL_Timer_Get_Milli_Seconds>
 23e6c60:	4604      	mov	r4, r0

  startTime = millis(); // Record the start time
  while (Wire.available() < 4) { // Wait for all bytes to be received
 23e6c62:	f012 ff6f 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e6c66:	6803      	ldr	r3, [r0, #0]
 23e6c68:	691b      	ldr	r3, [r3, #16]
 23e6c6a:	4798      	blx	r3
 23e6c6c:	2803      	cmp	r0, #3
 23e6c6e:	dc09      	bgt.n	23e6c84 <_Z15blx_takereadingv+0x54>
 23e6c70:	f00f fd86 	bl	23f6780 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - startTime > timeout) { // Check if timeout has been reached
 23e6c74:	1b00      	subs	r0, r0, r4
 23e6c76:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 23e6c7a:	d826      	bhi.n	23e6cca <_Z15blx_takereadingv+0x9a>
      return -1; // Return error code if timeout occurs
    }
    delay(1); // Short delay to prevent busy-waiting
 23e6c7c:	2001      	movs	r0, #1
 23e6c7e:	f010 fcd3 	bl	23f7628 <delay>
  while (Wire.available() < 4) { // Wait for all bytes to be received
 23e6c82:	e7ee      	b.n	23e6c62 <_Z15blx_takereadingv+0x32>
  }

  for (int i = 0; i < 4; i++) {
 23e6c84:	2400      	movs	r4, #0
 23e6c86:	ad01      	add	r5, sp, #4
    data[i] = Wire.read(); // Read each byte into the array
 23e6c88:	f012 ff5c 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e6c8c:	6803      	ldr	r3, [r0, #0]
  for (int i = 0; i < 4; i++) {
 23e6c8e:	3401      	adds	r4, #1
    data[i] = Wire.read(); // Read each byte into the array
 23e6c90:	695b      	ldr	r3, [r3, #20]
 23e6c92:	4798      	blx	r3
  for (int i = 0; i < 4; i++) {
 23e6c94:	2c04      	cmp	r4, #4
    data[i] = Wire.read(); // Read each byte into the array
 23e6c96:	f805 0b01 	strb.w	r0, [r5], #1
  for (int i = 0; i < 4; i++) {
 23e6c9a:	d1f5      	bne.n	23e6c88 <_Z15blx_takereadingv+0x58>
  raw = data[3];
  raw = (raw<<8)|data[2];
  raw = (raw<<8)|data[1];
  raw = (raw<<8)|data[0];

  lux = ((float)raw*1.4) / 1000;  // Is 1.4 scaling multiplier based on the sensor's internal calibration ?
 23e6c9c:	eddd 7a01 	vldr	s15, [sp, #4]
 23e6ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23e6ca4:	ee17 0a90 	vmov	r0, s15
 23e6ca8:	f7fc fcfe 	bl	23e36a8 <__aeabi_f2d>
 23e6cac:	a309      	add	r3, pc, #36	; (adr r3, 23e6cd4 <_Z15blx_takereadingv+0xa4>)
 23e6cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e6cb2:	f7fc fd51 	bl	23e3758 <__aeabi_dmul>
 23e6cb6:	2200      	movs	r2, #0
 23e6cb8:	4b05      	ldr	r3, [pc, #20]	; (23e6cd0 <_Z15blx_takereadingv+0xa0>)
 23e6cba:	f7fc fe77 	bl	23e39ac <__aeabi_ddiv>
 23e6cbe:	f7fd f843 	bl	23e3d48 <__aeabi_d2f>
 23e6cc2:	ee00 0a10 	vmov	s0, r0
                                    // Is divide by 1000 converting from millilux ?

  // sprintf (msgbuf, "BLUX30 LUX %f RAW %lu\n", lux, raw);
  // Output (msgbuf);
  return(lux);
}
 23e6cc6:	b003      	add	sp, #12
 23e6cc8:	bd30      	pop	{r4, r5, pc}
      return -1; // Return error code if timeout occurs
 23e6cca:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 23e6cce:	e7fa      	b.n	23e6cc6 <_Z15blx_takereadingv+0x96>
 23e6cd0:	408f4000 	.word	0x408f4000
 23e6cd4:	66666666 	.word	0x66666666
 23e6cd8:	3ff66666 	.word	0x3ff66666

023e6cdc <_Z13pm25aqi_clearv>:
 *=======================================================================================================================
 * pm25aqi_clear() - clear observation
 *=======================================================================================================================
 */
void pm25aqi_clear() {
  pm25aqi_obs.max_s10 = 0;
 23e6cdc:	2200      	movs	r2, #0
 23e6cde:	4b04      	ldr	r3, [pc, #16]	; (23e6cf0 <_Z13pm25aqi_clearv+0x14>)
 23e6ce0:	801a      	strh	r2, [r3, #0]
  pm25aqi_obs.max_s25 = 0;
 23e6ce2:	805a      	strh	r2, [r3, #2]
  pm25aqi_obs.max_s100 = 0;
 23e6ce4:	809a      	strh	r2, [r3, #4]
  pm25aqi_obs.max_e10 = 0;
 23e6ce6:	80da      	strh	r2, [r3, #6]
  pm25aqi_obs.max_e25 = 0;
 23e6ce8:	811a      	strh	r2, [r3, #8]
  pm25aqi_obs.max_e100 = 0;
 23e6cea:	815a      	strh	r2, [r3, #10]
}
 23e6cec:	4770      	bx	lr
 23e6cee:	bf00      	nop
 23e6cf0:	1007aa24 	.word	0x1007aa24

023e6cf4 <_Z18pm25aqi_initializev>:
/* 
 *=======================================================================================================================
 * pm25aqi_initialize() - air quality sensor
 *=======================================================================================================================
 */
void pm25aqi_initialize() {
 23e6cf4:	b538      	push	{r3, r4, r5, lr}
  Output("PM25AQI:INIT");
 23e6cf6:	4817      	ldr	r0, [pc, #92]	; (23e6d54 <_Z18pm25aqi_initializev+0x60>)
 23e6cf8:	f7fe fcc8 	bl	23e568c <_Z6OutputPKc>
  Wire.beginTransmission(PM25AQI_ADDRESS);
 23e6cfc:	f012 ff22 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e6d00:	2112      	movs	r1, #18
 23e6d02:	f011 fa83 	bl	23f820c <_ZN7TwoWire17beginTransmissionEi>
  if (Wire.endTransmission()) {
 23e6d06:	f012 ff1d 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e6d0a:	f011 fa86 	bl	23f821a <_ZN7TwoWire15endTransmissionEv>
 23e6d0e:	4c12      	ldr	r4, [pc, #72]	; (23e6d58 <_Z18pm25aqi_initializev+0x64>)
 23e6d10:	4d12      	ldr	r5, [pc, #72]	; (23e6d5c <_Z18pm25aqi_initializev+0x68>)
 23e6d12:	b168      	cbz	r0, 23e6d30 <_Z18pm25aqi_initializev+0x3c>
    msgp = (char *) "PM:NF";
 23e6d14:	4b12      	ldr	r3, [pc, #72]	; (23e6d60 <_Z18pm25aqi_initializev+0x6c>)
    PM25AQI_exists = false;
    SystemStatusBits |= SSB_PM25AQI;  // Turn On Bit
 23e6d16:	4a13      	ldr	r2, [pc, #76]	; (23e6d64 <_Z18pm25aqi_initializev+0x70>)
    msgp = (char *) "PM:NF";
 23e6d18:	6023      	str	r3, [r4, #0]
    PM25AQI_exists = false;
 23e6d1a:	2300      	movs	r3, #0
 23e6d1c:	702b      	strb	r3, [r5, #0]
    SystemStatusBits |= SSB_PM25AQI;  // Turn On Bit
 23e6d1e:	6813      	ldr	r3, [r2, #0]
 23e6d20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 23e6d24:	6013      	str	r3, [r2, #0]
      msgp = (char *) "PM:OK";
      PM25AQI_exists = true;
      pm25aqi_clear();
    }
  }
  Output (msgp);
 23e6d26:	6820      	ldr	r0, [r4, #0]
}
 23e6d28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
 23e6d2c:	f7fe bcae 	b.w	23e568c <_Z6OutputPKc>
    if (! pmaq.begin_I2C()) {      // connect to the sensor over I2C
 23e6d30:	f012 ff08 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e6d34:	4601      	mov	r1, r0
 23e6d36:	480c      	ldr	r0, [pc, #48]	; (23e6d68 <_Z18pm25aqi_initializev+0x74>)
 23e6d38:	f009 fe6d 	bl	23f0a16 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>
 23e6d3c:	b918      	cbnz	r0, 23e6d46 <_Z18pm25aqi_initializev+0x52>
      msgp = (char *) "PM:Begin NF";
 23e6d3e:	4b0b      	ldr	r3, [pc, #44]	; (23e6d6c <_Z18pm25aqi_initializev+0x78>)
      PM25AQI_exists = false;
 23e6d40:	7028      	strb	r0, [r5, #0]
      msgp = (char *) "PM:Begin NF";
 23e6d42:	6023      	str	r3, [r4, #0]
      PM25AQI_exists = false;
 23e6d44:	e7ef      	b.n	23e6d26 <_Z18pm25aqi_initializev+0x32>
      msgp = (char *) "PM:OK";
 23e6d46:	4b0a      	ldr	r3, [pc, #40]	; (23e6d70 <_Z18pm25aqi_initializev+0x7c>)
 23e6d48:	6023      	str	r3, [r4, #0]
      PM25AQI_exists = true;
 23e6d4a:	2301      	movs	r3, #1
 23e6d4c:	702b      	strb	r3, [r5, #0]
      pm25aqi_clear();
 23e6d4e:	f7ff ffc5 	bl	23e6cdc <_Z13pm25aqi_clearv>
 23e6d52:	e7e8      	b.n	23e6d26 <_Z18pm25aqi_initializev+0x32>
 23e6d54:	023fd213 	.word	0x023fd213
 23e6d58:	1006f528 	.word	0x1006f528
 23e6d5c:	1006a2cd 	.word	0x1006a2cd
 23e6d60:	023fd220 	.word	0x023fd220
 23e6d64:	1006a178 	.word	0x1006a178
 23e6d68:	1007aa30 	.word	0x1007aa30
 23e6d6c:	023fd226 	.word	0x023fd226
 23e6d70:	023fd232 	.word	0x023fd232

023e6d74 <_Z19pm25aqi_TakeReadingv>:
/* 
 *=======================================================================================================================
 * pm25aqi_TakeReading() - take air quality reading - keep the larger value
 *=======================================================================================================================
 */
void pm25aqi_TakeReading() {
 23e6d74:	b510      	push	{r4, lr}
  if (PM25AQI_exists) {
 23e6d76:	4c1d      	ldr	r4, [pc, #116]	; (23e6dec <_Z19pm25aqi_TakeReadingv+0x78>)
void pm25aqi_TakeReading() {
 23e6d78:	b088      	sub	sp, #32
  if (PM25AQI_exists) {
 23e6d7a:	7823      	ldrb	r3, [r4, #0]
 23e6d7c:	b34b      	cbz	r3, 23e6dd2 <_Z19pm25aqi_TakeReadingv+0x5e>
    PM25_AQI_Data aqid;

    if (pmaq.read(&aqid)) {
 23e6d7e:	4669      	mov	r1, sp
 23e6d80:	481b      	ldr	r0, [pc, #108]	; (23e6df0 <_Z19pm25aqi_TakeReadingv+0x7c>)
 23e6d82:	f009 fe5e 	bl	23f0a42 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata>
 23e6d86:	b330      	cbz	r0, 23e6dd6 <_Z19pm25aqi_TakeReadingv+0x62>
      if (aqid.pm10_standard  > pm25aqi_obs.max_s10)  { pm25aqi_obs.max_s10  = aqid.pm10_standard;  }
 23e6d88:	4b1a      	ldr	r3, [pc, #104]	; (23e6df4 <_Z19pm25aqi_TakeReadingv+0x80>)
 23e6d8a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 23e6d8e:	8819      	ldrh	r1, [r3, #0]
 23e6d90:	4291      	cmp	r1, r2
 23e6d92:	bf38      	it	cc
 23e6d94:	801a      	strhcc	r2, [r3, #0]
      if (aqid.pm25_standard  > pm25aqi_obs.max_s25)  { pm25aqi_obs.max_s25  = aqid.pm25_standard;  }
 23e6d96:	8859      	ldrh	r1, [r3, #2]
 23e6d98:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 23e6d9c:	4291      	cmp	r1, r2
 23e6d9e:	bf38      	it	cc
 23e6da0:	805a      	strhcc	r2, [r3, #2]
      if (aqid.pm100_standard > pm25aqi_obs.max_s100) { pm25aqi_obs.max_s100 = aqid.pm100_standard; }
 23e6da2:	8899      	ldrh	r1, [r3, #4]
 23e6da4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 23e6da8:	4291      	cmp	r1, r2
 23e6daa:	bf38      	it	cc
 23e6dac:	809a      	strhcc	r2, [r3, #4]

      if (aqid.pm10_env  > pm25aqi_obs.max_e10)  { pm25aqi_obs.max_e10  = aqid.pm10_env;  }
 23e6dae:	88d9      	ldrh	r1, [r3, #6]
 23e6db0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 23e6db4:	4291      	cmp	r1, r2
 23e6db6:	bf38      	it	cc
 23e6db8:	80da      	strhcc	r2, [r3, #6]
      if (aqid.pm25_env  > pm25aqi_obs.max_e25)  { pm25aqi_obs.max_e25  = aqid.pm25_env;  }
 23e6dba:	8919      	ldrh	r1, [r3, #8]
 23e6dbc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 23e6dc0:	4291      	cmp	r1, r2
 23e6dc2:	bf38      	it	cc
 23e6dc4:	811a      	strhcc	r2, [r3, #8]
      if (aqid.pm100_env > pm25aqi_obs.max_e100) { pm25aqi_obs.max_e100 = aqid.pm100_env; }
 23e6dc6:	8959      	ldrh	r1, [r3, #10]
 23e6dc8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 23e6dcc:	4291      	cmp	r1, r2
 23e6dce:	d200      	bcs.n	23e6dd2 <_Z19pm25aqi_TakeReadingv+0x5e>
 23e6dd0:	815a      	strh	r2, [r3, #10]
      SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
      PM25AQI_exists = false;
      Output ("PM OFFLINE");
    }
  }
}
 23e6dd2:	b008      	add	sp, #32
 23e6dd4:	bd10      	pop	{r4, pc}
      SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
 23e6dd6:	4a08      	ldr	r2, [pc, #32]	; (23e6df8 <_Z19pm25aqi_TakeReadingv+0x84>)
      PM25AQI_exists = false;
 23e6dd8:	7020      	strb	r0, [r4, #0]
      SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
 23e6dda:	6813      	ldr	r3, [r2, #0]
      Output ("PM OFFLINE");
 23e6ddc:	4807      	ldr	r0, [pc, #28]	; (23e6dfc <_Z19pm25aqi_TakeReadingv+0x88>)
      SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
 23e6dde:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 23e6de2:	6013      	str	r3, [r2, #0]
      Output ("PM OFFLINE");
 23e6de4:	f7fe fc52 	bl	23e568c <_Z6OutputPKc>
}
 23e6de8:	e7f3      	b.n	23e6dd2 <_Z19pm25aqi_TakeReadingv+0x5e>
 23e6dea:	bf00      	nop
 23e6dec:	1006a2cd 	.word	0x1006a2cd
 23e6df0:	1007aa30 	.word	0x1007aa30
 23e6df4:	1007aa24 	.word	0x1007aa24
 23e6df8:	1006a178 	.word	0x1006a178
 23e6dfc:	023fd238 	.word	0x023fd238

023e6e00 <_Z14hdc_initializev>:
/* 
 *=======================================================================================================================
 * hdc_initialize() - HDC3002c sensor initialize
 *=======================================================================================================================
 */
void hdc_initialize() {
 23e6e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 23e6e02:	b085      	sub	sp, #20
  Output("HDC:INIT");
  
  // 1st HDC I2C Temperature/Humidity Sensor (I2C ADDRESS = 0x44)
  hdc1 = Adafruit_HDC302x();
 23e6e04:	4e2b      	ldr	r6, [pc, #172]	; (23e6eb4 <_Z14hdc_initializev+0xb4>)
  Output("HDC:INIT");
 23e6e06:	482c      	ldr	r0, [pc, #176]	; (23e6eb8 <_Z14hdc_initializev+0xb8>)
  hdc1 = Adafruit_HDC302x();
 23e6e08:	ac02      	add	r4, sp, #8
  Output("HDC:INIT");
 23e6e0a:	f7fe fc3f 	bl	23e568c <_Z6OutputPKc>
  hdc1 = Adafruit_HDC302x();
 23e6e0e:	4620      	mov	r0, r4
 23e6e10:	f009 fa51 	bl	23f02b6 <_ZN16Adafruit_HDC302xC1Ev>
 23e6e14:	e894 0003 	ldmia.w	r4, {r0, r1}
 23e6e18:	80b1      	strh	r1, [r6, #4]
 23e6e1a:	6030      	str	r0, [r6, #0]
  if (!hdc1.begin(HDC_ADDRESS_1, &Wire)) {
 23e6e1c:	f012 fe92 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e6e20:	2146      	movs	r1, #70	; 0x46
 23e6e22:	4602      	mov	r2, r0
 23e6e24:	4630      	mov	r0, r6
 23e6e26:	f009 fb17 	bl	23f0458 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire>
 23e6e2a:	4d24      	ldr	r5, [pc, #144]	; (23e6ebc <_Z14hdc_initializev+0xbc>)
 23e6e2c:	4f24      	ldr	r7, [pc, #144]	; (23e6ec0 <_Z14hdc_initializev+0xc0>)
 23e6e2e:	bb48      	cbnz	r0, 23e6e84 <_Z14hdc_initializev+0x84>
    msgp = (char *) "HDC1 NF";
 23e6e30:	4b24      	ldr	r3, [pc, #144]	; (23e6ec4 <_Z14hdc_initializev+0xc4>)
    HDC_1_exists = false;
    SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
 23e6e32:	4a25      	ldr	r2, [pc, #148]	; (23e6ec8 <_Z14hdc_initializev+0xc8>)
    msgp = (char *) "HDC1 NF";
 23e6e34:	602b      	str	r3, [r5, #0]
    SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
 23e6e36:	6813      	ldr	r3, [r2, #0]
    HDC_1_exists = false;
 23e6e38:	7038      	strb	r0, [r7, #0]
    SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
 23e6e3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23e6e3e:	6013      	str	r3, [r2, #0]
    msgp = (char *) "HDC1 OK";
  }
  Output (msgp);

  // 2nd HDC I2C Temperature/Humidity Sensor (I2C ADDRESS = 0x45)
  hdc2 = Adafruit_HDC302x();
 23e6e40:	4e22      	ldr	r6, [pc, #136]	; (23e6ecc <_Z14hdc_initializev+0xcc>)
  Output (msgp);
 23e6e42:	6828      	ldr	r0, [r5, #0]
 23e6e44:	f7fe fc22 	bl	23e568c <_Z6OutputPKc>
  hdc2 = Adafruit_HDC302x();
 23e6e48:	4620      	mov	r0, r4
 23e6e4a:	f009 fa34 	bl	23f02b6 <_ZN16Adafruit_HDC302xC1Ev>
 23e6e4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 23e6e52:	80b1      	strh	r1, [r6, #4]
 23e6e54:	6030      	str	r0, [r6, #0]
  if (!hdc2.begin(HDC_ADDRESS_2, &Wire)) {
 23e6e56:	f012 fe75 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e6e5a:	2147      	movs	r1, #71	; 0x47
 23e6e5c:	4602      	mov	r2, r0
 23e6e5e:	4630      	mov	r0, r6
 23e6e60:	f009 fafa 	bl	23f0458 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire>
 23e6e64:	4f1a      	ldr	r7, [pc, #104]	; (23e6ed0 <_Z14hdc_initializev+0xd0>)
 23e6e66:	b9c8      	cbnz	r0, 23e6e9c <_Z14hdc_initializev+0x9c>
    msgp = (char *) "HDC2 NF";
 23e6e68:	4b1a      	ldr	r3, [pc, #104]	; (23e6ed4 <_Z14hdc_initializev+0xd4>)
    HDC_2_exists = false;
    SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
 23e6e6a:	4a17      	ldr	r2, [pc, #92]	; (23e6ec8 <_Z14hdc_initializev+0xc8>)
    msgp = (char *) "HDC2 NF";
 23e6e6c:	602b      	str	r3, [r5, #0]
    SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
 23e6e6e:	6813      	ldr	r3, [r2, #0]
    HDC_2_exists = false;
 23e6e70:	7038      	strb	r0, [r7, #0]
    SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
 23e6e72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 23e6e76:	6013      	str	r3, [r2, #0]
    double t,h;
    hdc2.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0);
    HDC_2_exists = true;
    msgp = (char *) "HDC2 OK";
  }
  Output (msgp);
 23e6e78:	6828      	ldr	r0, [r5, #0]
}
 23e6e7a:	b005      	add	sp, #20
 23e6e7c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  Output (msgp);
 23e6e80:	f7fe bc04 	b.w	23e568c <_Z6OutputPKc>
    hdc1.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0);
 23e6e84:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 23e6e88:	4622      	mov	r2, r4
 23e6e8a:	4669      	mov	r1, sp
 23e6e8c:	4630      	mov	r0, r6
 23e6e8e:	f009 fab3 	bl	23f03f8 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>
    HDC_1_exists = true;
 23e6e92:	2301      	movs	r3, #1
 23e6e94:	703b      	strb	r3, [r7, #0]
    msgp = (char *) "HDC1 OK";
 23e6e96:	4b10      	ldr	r3, [pc, #64]	; (23e6ed8 <_Z14hdc_initializev+0xd8>)
 23e6e98:	602b      	str	r3, [r5, #0]
 23e6e9a:	e7d1      	b.n	23e6e40 <_Z14hdc_initializev+0x40>
    hdc2.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0);
 23e6e9c:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 23e6ea0:	4622      	mov	r2, r4
 23e6ea2:	4669      	mov	r1, sp
 23e6ea4:	4630      	mov	r0, r6
 23e6ea6:	f009 faa7 	bl	23f03f8 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>
    HDC_2_exists = true;
 23e6eaa:	2301      	movs	r3, #1
 23e6eac:	703b      	strb	r3, [r7, #0]
    msgp = (char *) "HDC2 OK";
 23e6eae:	4b0b      	ldr	r3, [pc, #44]	; (23e6edc <_Z14hdc_initializev+0xdc>)
 23e6eb0:	602b      	str	r3, [r5, #0]
 23e6eb2:	e7e1      	b.n	23e6e78 <_Z14hdc_initializev+0x78>
 23e6eb4:	1006ae80 	.word	0x1006ae80
 23e6eb8:	023fd243 	.word	0x023fd243
 23e6ebc:	1006f528 	.word	0x1006f528
 23e6ec0:	1006a2ac 	.word	0x1006a2ac
 23e6ec4:	023fd24c 	.word	0x023fd24c
 23e6ec8:	1006a178 	.word	0x1006a178
 23e6ecc:	1006ae88 	.word	0x1006ae88
 23e6ed0:	1006a2ad 	.word	0x1006a2ad
 23e6ed4:	023fd25c 	.word	0x023fd25c
 23e6ed8:	023fd254 	.word	0x023fd254
 23e6edc:	023fd264 	.word	0x023fd264

023e6ee0 <_Z14lps_initializev>:
/* 
 *=======================================================================================================================
 * lps_initialize() - LPS35HW Pressure and Temperature initialize
 *=======================================================================================================================
 */
void lps_initialize() {
 23e6ee0:	b570      	push	{r4, r5, r6, lr}
  Output("LPS:INIT");
 23e6ee2:	4831      	ldr	r0, [pc, #196]	; (23e6fa8 <_Z14lps_initializev+0xc8>)
void lps_initialize() {
 23e6ee4:	b088      	sub	sp, #32
  
  // 1st LPS I2C Pressure/Temperature Sensor (I2C ADDRESS = 0x5D)
  lps1 = Adafruit_LPS35HW();
 23e6ee6:	4c31      	ldr	r4, [pc, #196]	; (23e6fac <_Z14lps_initializev+0xcc>)
  Output("LPS:INIT");
 23e6ee8:	f7fe fbd0 	bl	23e568c <_Z6OutputPKc>
  lps1 = Adafruit_LPS35HW();
 23e6eec:	ad01      	add	r5, sp, #4
 23e6eee:	a801      	add	r0, sp, #4
 23e6ef0:	f009 fbb2 	bl	23f0658 <_ZN16Adafruit_LPS35HWC1Ev>
 23e6ef4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23e6ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23e6ef8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 23e6efc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  if (!lps1.begin_I2C(LPS_ADDRESS_1, &Wire)) {
 23e6f00:	f012 fe20 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e6f04:	215d      	movs	r1, #93	; 0x5d
 23e6f06:	4602      	mov	r2, r0
 23e6f08:	f1a4 0010 	sub.w	r0, r4, #16
 23e6f0c:	f009 fc91 	bl	23f0832 <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire>
 23e6f10:	4e27      	ldr	r6, [pc, #156]	; (23e6fb0 <_Z14lps_initializev+0xd0>)
 23e6f12:	4d28      	ldr	r5, [pc, #160]	; (23e6fb4 <_Z14lps_initializev+0xd4>)
 23e6f14:	2800      	cmp	r0, #0
 23e6f16:	d12d      	bne.n	23e6f74 <_Z14lps_initializev+0x94>
    msgp = (char *) "LPS1 NF";
 23e6f18:	4b27      	ldr	r3, [pc, #156]	; (23e6fb8 <_Z14lps_initializev+0xd8>)
    LPS_1_exists = false;
    SystemStatusBits |= SSB_LPS_1;  // Turn On Bit
 23e6f1a:	4a28      	ldr	r2, [pc, #160]	; (23e6fbc <_Z14lps_initializev+0xdc>)
    msgp = (char *) "LPS1 NF";
 23e6f1c:	6033      	str	r3, [r6, #0]
    SystemStatusBits |= SSB_LPS_1;  // Turn On Bit
 23e6f1e:	6813      	ldr	r3, [r2, #0]
    LPS_1_exists = false;
 23e6f20:	7028      	strb	r0, [r5, #0]
    SystemStatusBits |= SSB_LPS_1;  // Turn On Bit
 23e6f22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 23e6f26:	6013      	str	r3, [r2, #0]
    t = lps1.readTemperature();
    p = lps1.readPressure();
    LPS_1_exists = true;
    msgp = (char *) "LPS1 OK";
  }
  Output (msgp);
 23e6f28:	6830      	ldr	r0, [r6, #0]

  // 2nd LPS I2C Pressure/Temperature Sensor (I2C ADDRESS = 0x5C)
  lps2 = Adafruit_LPS35HW();
 23e6f2a:	4d25      	ldr	r5, [pc, #148]	; (23e6fc0 <_Z14lps_initializev+0xe0>)
  Output (msgp);
 23e6f2c:	f7fe fbae 	bl	23e568c <_Z6OutputPKc>
  lps2 = Adafruit_LPS35HW();
 23e6f30:	ac01      	add	r4, sp, #4
 23e6f32:	a801      	add	r0, sp, #4
 23e6f34:	f009 fb90 	bl	23f0658 <_ZN16Adafruit_LPS35HWC1Ev>
 23e6f38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23e6f3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23e6f3c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 23e6f40:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (!lps2.begin_I2C(LPS_ADDRESS_2, &Wire)) {
 23e6f44:	f012 fdfe 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e6f48:	215c      	movs	r1, #92	; 0x5c
 23e6f4a:	4602      	mov	r2, r0
 23e6f4c:	f1a5 0010 	sub.w	r0, r5, #16
 23e6f50:	f009 fc6f 	bl	23f0832 <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire>
 23e6f54:	4c1b      	ldr	r4, [pc, #108]	; (23e6fc4 <_Z14lps_initializev+0xe4>)
 23e6f56:	b9d0      	cbnz	r0, 23e6f8e <_Z14lps_initializev+0xae>
    msgp = (char *) "LPS2 NF";
 23e6f58:	4b1b      	ldr	r3, [pc, #108]	; (23e6fc8 <_Z14lps_initializev+0xe8>)
    LPS_2_exists = false;
    SystemStatusBits |= SSB_LPS_2;  // Turn On Bit
 23e6f5a:	4a18      	ldr	r2, [pc, #96]	; (23e6fbc <_Z14lps_initializev+0xdc>)
    msgp = (char *) "LPS2 NF";
 23e6f5c:	6033      	str	r3, [r6, #0]
    SystemStatusBits |= SSB_LPS_2;  // Turn On Bit
 23e6f5e:	6813      	ldr	r3, [r2, #0]
    LPS_2_exists = false;
 23e6f60:	7020      	strb	r0, [r4, #0]
    SystemStatusBits |= SSB_LPS_2;  // Turn On Bit
 23e6f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 23e6f66:	6013      	str	r3, [r2, #0]
    t = lps2.readTemperature();
    p = lps2.readPressure();
    LPS_2_exists = true;
    msgp = (char *) "LPS2 OK";
  }
  Output (msgp);
 23e6f68:	6830      	ldr	r0, [r6, #0]
}
 23e6f6a:	b008      	add	sp, #32
 23e6f6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Output (msgp);
 23e6f70:	f7fe bb8c 	b.w	23e568c <_Z6OutputPKc>
    t = lps1.readTemperature();
 23e6f74:	f1a4 0010 	sub.w	r0, r4, #16
 23e6f78:	f009 fb86 	bl	23f0688 <_ZN16Adafruit_LPS35HW15readTemperatureEv>
    p = lps1.readPressure();
 23e6f7c:	f1a4 0010 	sub.w	r0, r4, #16
 23e6f80:	f009 fba4 	bl	23f06cc <_ZN16Adafruit_LPS35HW12readPressureEv>
    LPS_1_exists = true;
 23e6f84:	2301      	movs	r3, #1
 23e6f86:	702b      	strb	r3, [r5, #0]
    msgp = (char *) "LPS1 OK";
 23e6f88:	4b10      	ldr	r3, [pc, #64]	; (23e6fcc <_Z14lps_initializev+0xec>)
 23e6f8a:	6033      	str	r3, [r6, #0]
 23e6f8c:	e7cc      	b.n	23e6f28 <_Z14lps_initializev+0x48>
    t = lps2.readTemperature();
 23e6f8e:	f1a5 0010 	sub.w	r0, r5, #16
 23e6f92:	f009 fb79 	bl	23f0688 <_ZN16Adafruit_LPS35HW15readTemperatureEv>
    p = lps2.readPressure();
 23e6f96:	f1a5 0010 	sub.w	r0, r5, #16
 23e6f9a:	f009 fb97 	bl	23f06cc <_ZN16Adafruit_LPS35HW12readPressureEv>
    LPS_2_exists = true;
 23e6f9e:	2301      	movs	r3, #1
 23e6fa0:	7023      	strb	r3, [r4, #0]
    msgp = (char *) "LPS2 OK";
 23e6fa2:	4b0b      	ldr	r3, [pc, #44]	; (23e6fd0 <_Z14lps_initializev+0xf0>)
 23e6fa4:	6033      	str	r3, [r6, #0]
 23e6fa6:	e7df      	b.n	23e6f68 <_Z14lps_initializev+0x88>
 23e6fa8:	023fd26c 	.word	0x023fd26c
 23e6fac:	1006f0c0 	.word	0x1006f0c0
 23e6fb0:	1006f528 	.word	0x1006f528
 23e6fb4:	1006a2b2 	.word	0x1006a2b2
 23e6fb8:	023fd275 	.word	0x023fd275
 23e6fbc:	1006a178 	.word	0x1006a178
 23e6fc0:	1006f0dc 	.word	0x1006f0dc
 23e6fc4:	1006a2b3 	.word	0x1006a2b3
 23e6fc8:	023fd285 	.word	0x023fd285
 23e6fcc:	023fd27d 	.word	0x023fd27d
 23e6fd0:	023fd28d 	.word	0x023fd28d

023e6fd4 <_Z14tlw_initializev>:
/* 
 *=======================================================================================================================
 * tlw_initialize() -  Tinovi Leaf Wetness initialize
 *=======================================================================================================================
 */
void tlw_initialize() {
 23e6fd4:	b538      	push	{r3, r4, r5, lr}
  Output("TLW:INIT");
 23e6fd6:	480f      	ldr	r0, [pc, #60]	; (23e7014 <_Z14tlw_initializev+0x40>)
 23e6fd8:	f7fe fb58 	bl	23e568c <_Z6OutputPKc>
  
  // Tinovi Leaf Wetness initialize (I2C ADDRESS = 0x61)
  if (!I2C_Device_Exist(TLW_ADDRESS)) { 
 23e6fdc:	2061      	movs	r0, #97	; 0x61
 23e6fde:	f7fe f94c 	bl	23e527a <_Z16I2C_Device_Existh>
 23e6fe2:	4c0d      	ldr	r4, [pc, #52]	; (23e7018 <_Z14tlw_initializev+0x44>)
 23e6fe4:	4d0d      	ldr	r5, [pc, #52]	; (23e701c <_Z14tlw_initializev+0x48>)
 23e6fe6:	b938      	cbnz	r0, 23e6ff8 <_Z14tlw_initializev+0x24>
    msgp = (char *) "TLW NF";
 23e6fe8:	4b0d      	ldr	r3, [pc, #52]	; (23e7020 <_Z14tlw_initializev+0x4c>)
    TLW_exists = false;
 23e6fea:	7028      	strb	r0, [r5, #0]
    msgp = (char *) "TLW NF";
 23e6fec:	6023      	str	r3, [r4, #0]
    tlw.init(TLW_ADDRESS);
    msgp = (char *) "TLW OK";
    TLW_exists = true;
    SystemStatusBits |= SSB_TLW;  // Turn On Bit
  }
  Output (msgp);
 23e6fee:	6820      	ldr	r0, [r4, #0]
}
 23e6ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
 23e6ff4:	f7fe bb4a 	b.w	23e568c <_Z6OutputPKc>
    tlw.init(TLW_ADDRESS);
 23e6ff8:	2161      	movs	r1, #97	; 0x61
 23e6ffa:	480a      	ldr	r0, [pc, #40]	; (23e7024 <_Z14tlw_initializev+0x50>)
 23e6ffc:	f00a ff3c 	bl	23f1e78 <_ZN8LeafSens4initEh>
    msgp = (char *) "TLW OK";
 23e7000:	4b09      	ldr	r3, [pc, #36]	; (23e7028 <_Z14tlw_initializev+0x54>)
    SystemStatusBits |= SSB_TLW;  // Turn On Bit
 23e7002:	4a0a      	ldr	r2, [pc, #40]	; (23e702c <_Z14tlw_initializev+0x58>)
    msgp = (char *) "TLW OK";
 23e7004:	6023      	str	r3, [r4, #0]
    TLW_exists = true;
 23e7006:	2301      	movs	r3, #1
 23e7008:	702b      	strb	r3, [r5, #0]
    SystemStatusBits |= SSB_TLW;  // Turn On Bit
 23e700a:	6813      	ldr	r3, [r2, #0]
 23e700c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 23e7010:	6013      	str	r3, [r2, #0]
 23e7012:	e7ec      	b.n	23e6fee <_Z14tlw_initializev+0x1a>
 23e7014:	023fd295 	.word	0x023fd295
 23e7018:	1006f528 	.word	0x1006f528
 23e701c:	1006a7e4 	.word	0x1006a7e4
 23e7020:	023fd29e 	.word	0x023fd29e
 23e7024:	1007ac00 	.word	0x1007ac00
 23e7028:	023fd2a5 	.word	0x023fd2a5
 23e702c:	1006a178 	.word	0x1006a178

023e7030 <_Z14tsm_initializev>:
/* 
 *=======================================================================================================================
 * tsm_initialize() -  Tinovi Soil Moisture initialize
 *=======================================================================================================================
 */
void tsm_initialize() {
 23e7030:	b538      	push	{r3, r4, r5, lr}
  Output("TSM:INIT");
 23e7032:	480f      	ldr	r0, [pc, #60]	; (23e7070 <_Z14tsm_initializev+0x40>)
 23e7034:	f7fe fb2a 	bl	23e568c <_Z6OutputPKc>
  
  // Tinovi Soil Moisture initialize (I2C ADDRESS = 0x63)
  if (!I2C_Device_Exist(TSM_ADDRESS)) { 
 23e7038:	2063      	movs	r0, #99	; 0x63
 23e703a:	f7fe f91e 	bl	23e527a <_Z16I2C_Device_Existh>
 23e703e:	4c0d      	ldr	r4, [pc, #52]	; (23e7074 <_Z14tsm_initializev+0x44>)
 23e7040:	4d0d      	ldr	r5, [pc, #52]	; (23e7078 <_Z14tsm_initializev+0x48>)
 23e7042:	b938      	cbnz	r0, 23e7054 <_Z14tsm_initializev+0x24>
    msgp = (char *) "TSM NF";
 23e7044:	4b0d      	ldr	r3, [pc, #52]	; (23e707c <_Z14tsm_initializev+0x4c>)
    TSM_exists = false;
 23e7046:	7028      	strb	r0, [r5, #0]
    msgp = (char *) "TSM NF";
 23e7048:	6023      	str	r3, [r4, #0]
    tsm.init(TSM_ADDRESS);
    msgp = (char *) "TSM OK";
    TSM_exists = true;
    SystemStatusBits |= SSB_TSM;  // Turn On Bit
  }
  Output (msgp);
 23e704a:	6820      	ldr	r0, [r4, #0]
}
 23e704c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
 23e7050:	f7fe bb1c 	b.w	23e568c <_Z6OutputPKc>
    tsm.init(TSM_ADDRESS);
 23e7054:	2163      	movs	r1, #99	; 0x63
 23e7056:	480a      	ldr	r0, [pc, #40]	; (23e7080 <_Z14tsm_initializev+0x50>)
 23e7058:	f00c ffa9 	bl	23f3fae <_ZN5SVCS34initEi>
    msgp = (char *) "TSM OK";
 23e705c:	4b09      	ldr	r3, [pc, #36]	; (23e7084 <_Z14tsm_initializev+0x54>)
    SystemStatusBits |= SSB_TSM;  // Turn On Bit
 23e705e:	4a0a      	ldr	r2, [pc, #40]	; (23e7088 <_Z14tsm_initializev+0x58>)
    msgp = (char *) "TSM OK";
 23e7060:	6023      	str	r3, [r4, #0]
    TSM_exists = true;
 23e7062:	2301      	movs	r3, #1
 23e7064:	702b      	strb	r3, [r5, #0]
    SystemStatusBits |= SSB_TSM;  // Turn On Bit
 23e7066:	6813      	ldr	r3, [r2, #0]
 23e7068:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 23e706c:	6013      	str	r3, [r2, #0]
 23e706e:	e7ec      	b.n	23e704a <_Z14tsm_initializev+0x1a>
 23e7070:	023fd2ac 	.word	0x023fd2ac
 23e7074:	1006f528 	.word	0x1006f528
 23e7078:	1006a7e6 	.word	0x1006a7e6
 23e707c:	023fd2b5 	.word	0x023fd2b5
 23e7080:	1007ac10 	.word	0x1007ac10
 23e7084:	023fd2bc 	.word	0x023fd2bc
 23e7088:	1006a178 	.word	0x1006a178

023e708c <_Z15tmsm_initializev>:
/* 
 *=======================================================================================================================
 * tmsm_initialize() -  Tinovi MultiLevel Soil Moisture initialize
 *=======================================================================================================================
 */
void tmsm_initialize() {
 23e708c:	b538      	push	{r3, r4, r5, lr}
  Output("TMSM:INIT");
 23e708e:	480f      	ldr	r0, [pc, #60]	; (23e70cc <_Z15tmsm_initializev+0x40>)
 23e7090:	f7fe fafc 	bl	23e568c <_Z6OutputPKc>
  
  // Tinovi MultiLevel Soil Moisture initialize (I2C ADDRESS = 0x65)
  if (!I2C_Device_Exist(TMSM_ADDRESS)) { 
 23e7094:	2065      	movs	r0, #101	; 0x65
 23e7096:	f7fe f8f0 	bl	23e527a <_Z16I2C_Device_Existh>
 23e709a:	4c0d      	ldr	r4, [pc, #52]	; (23e70d0 <_Z15tmsm_initializev+0x44>)
 23e709c:	4d0d      	ldr	r5, [pc, #52]	; (23e70d4 <_Z15tmsm_initializev+0x48>)
 23e709e:	b938      	cbnz	r0, 23e70b0 <_Z15tmsm_initializev+0x24>
    msgp = (char *) "TMSM NF";
 23e70a0:	4b0d      	ldr	r3, [pc, #52]	; (23e70d8 <_Z15tmsm_initializev+0x4c>)
    TMSM_exists = false;
 23e70a2:	7028      	strb	r0, [r5, #0]
    msgp = (char *) "TMSM NF";
 23e70a4:	6023      	str	r3, [r4, #0]
    tmsm.init(TMSM_ADDRESS);
    msgp = (char *) "TMSM OK";
    TMSM_exists = true;
    SystemStatusBits |= SSB_TMSM;  // Turn On Bit
  }
  Output (msgp);
 23e70a6:	6820      	ldr	r0, [r4, #0]
}
 23e70a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
 23e70ac:	f7fe baee 	b.w	23e568c <_Z6OutputPKc>
    tmsm.init(TMSM_ADDRESS);
 23e70b0:	2165      	movs	r1, #101	; 0x65
 23e70b2:	480a      	ldr	r0, [pc, #40]	; (23e70dc <_Z15tmsm_initializev+0x50>)
 23e70b4:	f00d f841 	bl	23f413a <_ZN7SVMULTI4initEi>
    msgp = (char *) "TMSM OK";
 23e70b8:	4b09      	ldr	r3, [pc, #36]	; (23e70e0 <_Z15tmsm_initializev+0x54>)
    SystemStatusBits |= SSB_TMSM;  // Turn On Bit
 23e70ba:	4a0a      	ldr	r2, [pc, #40]	; (23e70e4 <_Z15tmsm_initializev+0x58>)
    msgp = (char *) "TMSM OK";
 23e70bc:	6023      	str	r3, [r4, #0]
    TMSM_exists = true;
 23e70be:	2301      	movs	r3, #1
 23e70c0:	702b      	strb	r3, [r5, #0]
    SystemStatusBits |= SSB_TMSM;  // Turn On Bit
 23e70c2:	6813      	ldr	r3, [r2, #0]
 23e70c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 23e70c8:	6013      	str	r3, [r2, #0]
 23e70ca:	e7ec      	b.n	23e70a6 <_Z15tmsm_initializev+0x1a>
 23e70cc:	023fd2c3 	.word	0x023fd2c3
 23e70d0:	1006f528 	.word	0x1006f528
 23e70d4:	1006a7e5 	.word	0x1006a7e5
 23e70d8:	023fd2cd 	.word	0x023fd2cd
 23e70dc:	1007ac08 	.word	0x1007ac08
 23e70e0:	023fd2d5 	.word	0x023fd2d5
 23e70e4:	1006a178 	.word	0x1006a178

023e70e8 <_Z14ptms_readtempcv>:
/*
 * ======================================================================================================================
 *  ptms_readtempc() - Read Particle Muon on board temperature sensor (TMP112A) Celsius
 * ======================================================================================================================
 */
float ptms_readtempc() {
 23e70e8:	b510      	push	{r4, lr}
  unsigned data[2] = {0, 0};
  Wire.beginTransmission(0x48);
 23e70ea:	f012 fd2b 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e70ee:	2148      	movs	r1, #72	; 0x48
 23e70f0:	f011 f88c 	bl	23f820c <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x00);  // Select temperature register
 23e70f4:	f012 fd26 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e70f8:	2100      	movs	r1, #0
 23e70fa:	f7fd ff37 	bl	23e4f6c <_ZN7TwoWire5writeEi.isra.0>
  Wire.endTransmission();
 23e70fe:	f012 fd21 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e7102:	f011 f88a 	bl	23f821a <_ZN7TwoWire15endTransmissionEv>
  delay(300);
 23e7106:	f44f 7096 	mov.w	r0, #300	; 0x12c
 23e710a:	f010 fa8d 	bl	23f7628 <delay>
  Wire.requestFrom(0x48, 2);
 23e710e:	f012 fd19 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e7112:	2202      	movs	r2, #2
 23e7114:	2148      	movs	r1, #72	; 0x48
 23e7116:	f011 f872 	bl	23f81fe <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() == 2) {
 23e711a:	f012 fd13 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e711e:	6803      	ldr	r3, [r0, #0]
 23e7120:	691b      	ldr	r3, [r3, #16]
 23e7122:	4798      	blx	r3
 23e7124:	2802      	cmp	r0, #2
 23e7126:	d11e      	bne.n	23e7166 <_Z14ptms_readtempcv+0x7e>
    data[0] = Wire.read();
 23e7128:	f012 fd0c 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e712c:	6803      	ldr	r3, [r0, #0]
 23e712e:	695b      	ldr	r3, [r3, #20]
 23e7130:	4798      	blx	r3
 23e7132:	4604      	mov	r4, r0
    data[1] = Wire.read();
 23e7134:	f012 fd06 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e7138:	6803      	ldr	r3, [r0, #0]
 23e713a:	695b      	ldr	r3, [r3, #20]
 23e713c:	4798      	blx	r3
    int temp = ((data[0] << 8) + data[1]) >> 4;
 23e713e:	eb00 2304 	add.w	r3, r0, r4, lsl #8
    if (temp > 2047) {
 23e7142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    int temp = ((data[0] << 8) + data[1]) >> 4;
 23e7146:	ea4f 1013 	mov.w	r0, r3, lsr #4
        temp -= 4096;
 23e714a:	bf28      	it	cs
 23e714c:	f5a0 5080 	subcs.w	r0, r0, #4096	; 0x1000
    }
    float cTemp = temp * 0.0625;      // Celsius
 23e7150:	f7fc fa98 	bl	23e3684 <__aeabi_i2d>
 23e7154:	2200      	movs	r2, #0
 23e7156:	4b05      	ldr	r3, [pc, #20]	; (23e716c <_Z14ptms_readtempcv+0x84>)
 23e7158:	f7fc fafe 	bl	23e3758 <__aeabi_dmul>
 23e715c:	f7fc fdf4 	bl	23e3d48 <__aeabi_d2f>
 23e7160:	ee00 0a10 	vmov	s0, r0
    //float fTemp = cTemp * 1.8 + 32; // Fahrenheit
    return (cTemp);
  }
  return (-999.99);
}
 23e7164:	bd10      	pop	{r4, pc}
  return (-999.99);
 23e7166:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23e7170 <_Z14ptms_readtempcv+0x88>
 23e716a:	e7fb      	b.n	23e7164 <_Z14ptms_readtempcv+0x7c>
 23e716c:	3fb00000 	.word	0x3fb00000
 23e7170:	c479ff5c 	.word	0xc479ff5c
 23e7174:	00000000 	.word	0x00000000

023e7178 <_Z15pmts_initializev>:
/*
 * ======================================================================================================================
 *  pmts_initialize() - Initialize Particle Muon on board temperature sensor (TMP112A)
 * ======================================================================================================================
 */
void pmts_initialize() {
 23e7178:	b538      	push	{r3, r4, r5, lr}
  Output("PMTS:INIT");
 23e717a:	481f      	ldr	r0, [pc, #124]	; (23e71f8 <_Z15pmts_initializev+0x80>)
void pmts_initialize() {
 23e717c:	ed2d 8b02 	vpush	{d8}
  Output("PMTS:INIT");
 23e7180:	f7fe fa84 	bl	23e568c <_Z6OutputPKc>
  float t = ptms_readtempc();
 23e7184:	f7ff ffb0 	bl	23e70e8 <_Z14ptms_readtempcv>

  if (t == -999.99) {
 23e7188:	ee10 0a10 	vmov	r0, s0
  float t = ptms_readtempc();
 23e718c:	eeb0 8a40 	vmov.f32	s16, s0
  if (t == -999.99) {
 23e7190:	f7fc fa8a 	bl	23e36a8 <__aeabi_f2d>
 23e7194:	a316      	add	r3, pc, #88	; (adr r3, 23e71f0 <_Z15pmts_initializev+0x78>)
 23e7196:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e719a:	4604      	mov	r4, r0
 23e719c:	460d      	mov	r5, r1
 23e719e:	f7fc fd43 	bl	23e3c28 <__aeabi_dcmpeq>
 23e71a2:	4b16      	ldr	r3, [pc, #88]	; (23e71fc <_Z15pmts_initializev+0x84>)
 23e71a4:	b140      	cbz	r0, 23e71b8 <_Z15pmts_initializev+0x40>
    PMTS_exists = false;
 23e71a6:	2200      	movs	r2, #0
    Output ("PMTS NF");
 23e71a8:	4815      	ldr	r0, [pc, #84]	; (23e7200 <_Z15pmts_initializev+0x88>)
    PMTS_exists = false;
 23e71aa:	701a      	strb	r2, [r3, #0]
  else {
    PMTS_exists = true;
    sprintf (msgbuf, "PMTS OK T=%d.%02d", (int)t, (int)(t*100.0)%100);
    Output (msgbuf);
  }
}
 23e71ac:	ecbd 8b02 	vpop	{d8}
 23e71b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Output (msgbuf);
 23e71b4:	f7fe ba6a 	b.w	23e568c <_Z6OutputPKc>
    PMTS_exists = true;
 23e71b8:	2201      	movs	r2, #1
    sprintf (msgbuf, "PMTS OK T=%d.%02d", (int)t, (int)(t*100.0)%100);
 23e71ba:	4620      	mov	r0, r4
    PMTS_exists = true;
 23e71bc:	701a      	strb	r2, [r3, #0]
    sprintf (msgbuf, "PMTS OK T=%d.%02d", (int)t, (int)(t*100.0)%100);
 23e71be:	4629      	mov	r1, r5
 23e71c0:	2200      	movs	r2, #0
 23e71c2:	4b10      	ldr	r3, [pc, #64]	; (23e7204 <_Z15pmts_initializev+0x8c>)
 23e71c4:	f7fc fac8 	bl	23e3758 <__aeabi_dmul>
 23e71c8:	f7fc fd76 	bl	23e3cb8 <__aeabi_d2iz>
 23e71cc:	2264      	movs	r2, #100	; 0x64
 23e71ce:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 23e71d2:	fb90 f3f2 	sdiv	r3, r0, r2
 23e71d6:	490c      	ldr	r1, [pc, #48]	; (23e7208 <_Z15pmts_initializev+0x90>)
 23e71d8:	fb03 0312 	mls	r3, r3, r2, r0
 23e71dc:	ee17 2a90 	vmov	r2, s15
 23e71e0:	480a      	ldr	r0, [pc, #40]	; (23e720c <_Z15pmts_initializev+0x94>)
 23e71e2:	f010 f941 	bl	23f7468 <sprintf>
    Output (msgbuf);
 23e71e6:	4809      	ldr	r0, [pc, #36]	; (23e720c <_Z15pmts_initializev+0x94>)
 23e71e8:	e7e0      	b.n	23e71ac <_Z15pmts_initializev+0x34>
 23e71ea:	bf00      	nop
 23e71ec:	f3af 8000 	nop.w
 23e71f0:	851eb852 	.word	0x851eb852
 23e71f4:	c08f3feb 	.word	0xc08f3feb
 23e71f8:	023fd2dd 	.word	0x023fd2dd
 23e71fc:	1006a2ce 	.word	0x1006a2ce
 23e7200:	023fd2e7 	.word	0x023fd2e7
 23e7204:	40590000 	.word	0x40590000
 23e7208:	023fd2ef 	.word	0x023fd2ef
 23e720c:	1006f128 	.word	0x1006f128

023e7210 <_Z17as5600_initializev>:
/* 
 *=======================================================================================================================
 * as5600_initialize() - wind direction sensor I2C 0x36
 *=======================================================================================================================
 */
void as5600_initialize() {
 23e7210:	b508      	push	{r3, lr}
  Output("AS5600:INIT");
 23e7212:	4810      	ldr	r0, [pc, #64]	; (23e7254 <_Z17as5600_initializev+0x44>)
 23e7214:	f7fe fa3a 	bl	23e568c <_Z6OutputPKc>
  Wire.beginTransmission(AS5600_ADR);
 23e7218:	f012 fc94 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e721c:	4b0e      	ldr	r3, [pc, #56]	; (23e7258 <_Z17as5600_initializev+0x48>)
 23e721e:	6819      	ldr	r1, [r3, #0]
 23e7220:	f010 fff4 	bl	23f820c <_ZN7TwoWire17beginTransmissionEi>
  if (Wire.endTransmission()) {
 23e7224:	f012 fc8e 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e7228:	f010 fff7 	bl	23f821a <_ZN7TwoWire15endTransmissionEv>
 23e722c:	4b0b      	ldr	r3, [pc, #44]	; (23e725c <_Z17as5600_initializev+0x4c>)
 23e722e:	b170      	cbz	r0, 23e724e <_Z17as5600_initializev+0x3e>
    msgp = (char *) "WD:NF";
    AS5600_exists = false;
 23e7230:	2100      	movs	r1, #0
    msgp = (char *) "WD:NF";
 23e7232:	4a0b      	ldr	r2, [pc, #44]	; (23e7260 <_Z17as5600_initializev+0x50>)
 23e7234:	601a      	str	r2, [r3, #0]
    AS5600_exists = false;
 23e7236:	4a0b      	ldr	r2, [pc, #44]	; (23e7264 <_Z17as5600_initializev+0x54>)
 23e7238:	7011      	strb	r1, [r2, #0]
    SystemStatusBits |= SSB_AS5600;  // Turn On Bit
 23e723a:	490b      	ldr	r1, [pc, #44]	; (23e7268 <_Z17as5600_initializev+0x58>)
 23e723c:	680a      	ldr	r2, [r1, #0]
 23e723e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 23e7242:	600a      	str	r2, [r1, #0]
  }
  else {
    msgp = (char *) "WD:OK";
  }
  Output (msgp);
 23e7244:	6818      	ldr	r0, [r3, #0]
}
 23e7246:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
 23e724a:	f7fe ba1f 	b.w	23e568c <_Z6OutputPKc>
    msgp = (char *) "WD:OK";
 23e724e:	4a07      	ldr	r2, [pc, #28]	; (23e726c <_Z17as5600_initializev+0x5c>)
 23e7250:	601a      	str	r2, [r3, #0]
 23e7252:	e7f7      	b.n	23e7244 <_Z17as5600_initializev+0x34>
 23e7254:	023fd301 	.word	0x023fd301
 23e7258:	1006a0f4 	.word	0x1006a0f4
 23e725c:	1006f528 	.word	0x1006f528
 23e7260:	023fd30d 	.word	0x023fd30d
 23e7264:	1006a0f8 	.word	0x1006a0f8
 23e7268:	1006a178 	.word	0x1006a178
 23e726c:	023fd313 	.word	0x023fd313

023e7270 <_Z13A4_Initializev>:
/* 
 *=======================================================================================================================
 * A4_Initialize()
 *=======================================================================================================================
 */
void A4_Initialize() {
 23e7270:	b537      	push	{r0, r1, r2, r4, r5, lr}
  Output ("A4:INIT");
 23e7272:	482b      	ldr	r0, [pc, #172]	; (23e7320 <_Z13A4_Initializev+0xb0>)
 23e7274:	f7fe fa0a 	bl	23e568c <_Z6OutputPKc>
  if (SD_exists) {
 23e7278:	4b2a      	ldr	r3, [pc, #168]	; (23e7324 <_Z13A4_Initializev+0xb4>)
 23e727a:	781b      	ldrb	r3, [r3, #0]
 23e727c:	2b00      	cmp	r3, #0
 23e727e:	d04c      	beq.n	23e731a <_Z13A4_Initializev+0xaa>
    if (SD.exists(SD_A4_DIST_FILE)) {
 23e7280:	4929      	ldr	r1, [pc, #164]	; (23e7328 <_Z13A4_Initializev+0xb8>)
 23e7282:	482a      	ldr	r0, [pc, #168]	; (23e732c <_Z13A4_Initializev+0xbc>)
 23e7284:	f7fd ff3c 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e7288:	4604      	mov	r4, r0
 23e728a:	b1b8      	cbz	r0, 23e72bc <_Z13A4_Initializev+0x4c>
      Output ("A4=DIST");
 23e728c:	4828      	ldr	r0, [pc, #160]	; (23e7330 <_Z13A4_Initializev+0xc0>)
 23e728e:	f7fe f9fd 	bl	23e568c <_Z6OutputPKc>
      A4_State = A4_STATE_DISTANCE;
 23e7292:	2201      	movs	r2, #1
 23e7294:	4b27      	ldr	r3, [pc, #156]	; (23e7334 <_Z13A4_Initializev+0xc4>)
      if (SD.exists(SD_5M_DIST_FILE)) {
 23e7296:	4928      	ldr	r1, [pc, #160]	; (23e7338 <_Z13A4_Initializev+0xc8>)
 23e7298:	4824      	ldr	r0, [pc, #144]	; (23e732c <_Z13A4_Initializev+0xbc>)
      A4_State = A4_STATE_DISTANCE;
 23e729a:	601a      	str	r2, [r3, #0]
      if (SD.exists(SD_5M_DIST_FILE)) {
 23e729c:	f7fd ff30 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e72a0:	4b26      	ldr	r3, [pc, #152]	; (23e733c <_Z13A4_Initializev+0xcc>)
 23e72a2:	b138      	cbz	r0, 23e72b4 <_Z13A4_Initializev+0x44>
        dg_adjustment = 1.25;
 23e72a4:	4a26      	ldr	r2, [pc, #152]	; (23e7340 <_Z13A4_Initializev+0xd0>)
        Output ("DIST=5M");
 23e72a6:	4827      	ldr	r0, [pc, #156]	; (23e7344 <_Z13A4_Initializev+0xd4>)
        dg_adjustment = 1.25;
 23e72a8:	601a      	str	r2, [r3, #0]
    }
  }
  else {
    Output ("A4=NULL,SD NF");
  }
}
 23e72aa:	b003      	add	sp, #12
 23e72ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    Output ("A4=NULL,SD NF");
 23e72b0:	f7fe b9ec 	b.w	23e568c <_Z6OutputPKc>
        dg_adjustment = 2.5;
 23e72b4:	4a24      	ldr	r2, [pc, #144]	; (23e7348 <_Z13A4_Initializev+0xd8>)
        Output ("DIST=10M");
 23e72b6:	4825      	ldr	r0, [pc, #148]	; (23e734c <_Z13A4_Initializev+0xdc>)
        dg_adjustment = 2.5;
 23e72b8:	601a      	str	r2, [r3, #0]
        Output ("DIST=10M");
 23e72ba:	e7f6      	b.n	23e72aa <_Z13A4_Initializev+0x3a>
    else if (SD.exists(SD_A4_RAIN_FILE)) {
 23e72bc:	4924      	ldr	r1, [pc, #144]	; (23e7350 <_Z13A4_Initializev+0xe0>)
 23e72be:	481b      	ldr	r0, [pc, #108]	; (23e732c <_Z13A4_Initializev+0xbc>)
 23e72c0:	f7fd ff1e 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e72c4:	b1d8      	cbz	r0, 23e72fe <_Z13A4_Initializev+0x8e>
      A4_State = A4_STATE_RAIN;
 23e72c6:	2502      	movs	r5, #2
      Output ("A4=RAIN");
 23e72c8:	4822      	ldr	r0, [pc, #136]	; (23e7354 <_Z13A4_Initializev+0xe4>)
 23e72ca:	f7fe f9df 	bl	23e568c <_Z6OutputPKc>
      A4_State = A4_STATE_RAIN;
 23e72ce:	4b19      	ldr	r3, [pc, #100]	; (23e7334 <_Z13A4_Initializev+0xc4>)
 23e72d0:	601d      	str	r5, [r3, #0]
      raingauge2_interrupt_count = 0;
 23e72d2:	4b21      	ldr	r3, [pc, #132]	; (23e7358 <_Z13A4_Initializev+0xe8>)
 23e72d4:	601c      	str	r4, [r3, #0]
      raingauge2_interrupt_stime = System.millis();
 23e72d6:	f7fd fe96 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23e72da:	4b20      	ldr	r3, [pc, #128]	; (23e735c <_Z13A4_Initializev+0xec>)
      attachInterrupt(RAINGAUGE2_IRQ_PIN, raingauge2_interrupt_handler, FALLING);
 23e72dc:	462a      	mov	r2, r5
      raingauge2_interrupt_stime = System.millis();
 23e72de:	e9c3 0100 	strd	r0, r1, [r3]
      raingauge2_interrupt_ltime = 0;  // used to debounce the tip
 23e72e2:	2000      	movs	r0, #0
 23e72e4:	2100      	movs	r1, #0
 23e72e6:	4b1e      	ldr	r3, [pc, #120]	; (23e7360 <_Z13A4_Initializev+0xf0>)
 23e72e8:	e9c3 0100 	strd	r0, r1, [r3]
      attachInterrupt(RAINGAUGE2_IRQ_PIN, raingauge2_interrupt_handler, FALLING);
 23e72ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23e72f0:	200f      	movs	r0, #15
 23e72f2:	491c      	ldr	r1, [pc, #112]	; (23e7364 <_Z13A4_Initializev+0xf4>)
 23e72f4:	9400      	str	r4, [sp, #0]
 23e72f6:	f010 ffd7 	bl	23f82a8 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
 23e72fa:	b003      	add	sp, #12
 23e72fc:	bd30      	pop	{r4, r5, pc}
    else if (SD.exists(SD_A4_RAW_FILE)) {
 23e72fe:	491a      	ldr	r1, [pc, #104]	; (23e7368 <_Z13A4_Initializev+0xf8>)
 23e7300:	480a      	ldr	r0, [pc, #40]	; (23e732c <_Z13A4_Initializev+0xbc>)
 23e7302:	f7fd fefd 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e7306:	b130      	cbz	r0, 23e7316 <_Z13A4_Initializev+0xa6>
      Output ("A4=RAW");
 23e7308:	4818      	ldr	r0, [pc, #96]	; (23e736c <_Z13A4_Initializev+0xfc>)
 23e730a:	f7fe f9bf 	bl	23e568c <_Z6OutputPKc>
      A4_State = A4_STATE_RAW;
 23e730e:	2203      	movs	r2, #3
 23e7310:	4b08      	ldr	r3, [pc, #32]	; (23e7334 <_Z13A4_Initializev+0xc4>)
 23e7312:	601a      	str	r2, [r3, #0]
 23e7314:	e7f1      	b.n	23e72fa <_Z13A4_Initializev+0x8a>
      Output ("A4=NULL");
 23e7316:	4816      	ldr	r0, [pc, #88]	; (23e7370 <_Z13A4_Initializev+0x100>)
 23e7318:	e7c7      	b.n	23e72aa <_Z13A4_Initializev+0x3a>
    Output ("A4=NULL,SD NF");
 23e731a:	4816      	ldr	r0, [pc, #88]	; (23e7374 <_Z13A4_Initializev+0x104>)
 23e731c:	e7c5      	b.n	23e72aa <_Z13A4_Initializev+0x3a>
 23e731e:	bf00      	nop
 23e7320:	023fd319 	.word	0x023fd319
 23e7324:	1006a780 	.word	0x1006a780
 23e7328:	1006a10f 	.word	0x1006a10f
 23e732c:	1006a2d4 	.word	0x1006a2d4
 23e7330:	023fd321 	.word	0x023fd321
 23e7334:	1006a25c 	.word	0x1006a25c
 23e7338:	1006a104 	.word	0x1006a104
 23e733c:	1006a1a0 	.word	0x1006a1a0
 23e7340:	3fa00000 	.word	0x3fa00000
 23e7344:	023fd329 	.word	0x023fd329
 23e7348:	40200000 	.word	0x40200000
 23e734c:	023fd331 	.word	0x023fd331
 23e7350:	1006a11a 	.word	0x1006a11a
 23e7354:	023fd33a 	.word	0x023fd33a
 23e7358:	1007aa70 	.word	0x1007aa70
 23e735c:	1007aa80 	.word	0x1007aa80
 23e7360:	1007aa78 	.word	0x1007aa78
 23e7364:	023e505d 	.word	0x023e505d
 23e7368:	1006a125 	.word	0x1006a125
 23e736c:	023fd342 	.word	0x023fd342
 23e7370:	023fd349 	.word	0x023fd349
 23e7374:	023fd351 	.word	0x023fd351

023e7378 <_Z13A5_Initializev>:
/* 
 *=======================================================================================================================
 * A5_Initialize()
 *=======================================================================================================================
 */
void A5_Initialize() {
 23e7378:	b508      	push	{r3, lr}
  Output ("A5:INIT");
 23e737a:	480c      	ldr	r0, [pc, #48]	; (23e73ac <_Z13A5_Initializev+0x34>)
 23e737c:	f7fe f986 	bl	23e568c <_Z6OutputPKc>
  if (SD_exists) {
 23e7380:	4b0b      	ldr	r3, [pc, #44]	; (23e73b0 <_Z13A5_Initializev+0x38>)
 23e7382:	781b      	ldrb	r3, [r3, #0]
 23e7384:	b183      	cbz	r3, 23e73a8 <_Z13A5_Initializev+0x30>
    if (SD.exists(SD_A5_RAW_FILE)) {
 23e7386:	490b      	ldr	r1, [pc, #44]	; (23e73b4 <_Z13A5_Initializev+0x3c>)
 23e7388:	480b      	ldr	r0, [pc, #44]	; (23e73b8 <_Z13A5_Initializev+0x40>)
 23e738a:	f7fd feb9 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e738e:	b130      	cbz	r0, 23e739e <_Z13A5_Initializev+0x26>
      Output ("A5=RAW");
 23e7390:	480a      	ldr	r0, [pc, #40]	; (23e73bc <_Z13A5_Initializev+0x44>)
 23e7392:	f7fe f97b 	bl	23e568c <_Z6OutputPKc>
      A5_State = A5_STATE_RAW;
 23e7396:	2201      	movs	r2, #1
 23e7398:	4b09      	ldr	r3, [pc, #36]	; (23e73c0 <_Z13A5_Initializev+0x48>)
 23e739a:	601a      	str	r2, [r3, #0]
    }
  }
  else {
    Output ("A5=NULL,SD NF");
  }
}
 23e739c:	bd08      	pop	{r3, pc}
      Output ("A5=NULL");
 23e739e:	4809      	ldr	r0, [pc, #36]	; (23e73c4 <_Z13A5_Initializev+0x4c>)
}
 23e73a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Output ("A5=NULL,SD NF");
 23e73a4:	f7fe b972 	b.w	23e568c <_Z6OutputPKc>
 23e73a8:	4807      	ldr	r0, [pc, #28]	; (23e73c8 <_Z13A5_Initializev+0x50>)
 23e73aa:	e7f9      	b.n	23e73a0 <_Z13A5_Initializev+0x28>
 23e73ac:	023fd35f 	.word	0x023fd35f
 23e73b0:	1006a780 	.word	0x1006a780
 23e73b4:	1006a12f 	.word	0x1006a12f
 23e73b8:	1006a2d4 	.word	0x1006a2d4
 23e73bc:	023fd367 	.word	0x023fd367
 23e73c0:	1006a260 	.word	0x1006a260
 23e73c4:	023fd36e 	.word	0x023fd36e
 23e73c8:	023fd376 	.word	0x023fd376

023e73cc <_Z11Pin_ReadAvgi>:
/* 
 *=======================================================================================================================
 * Pin_ReadAvg()
 *=======================================================================================================================
 */
float Pin_ReadAvg(int pin) {
 23e73cc:	b570      	push	{r4, r5, r6, lr}
 23e73ce:	2505      	movs	r5, #5
  int numReadings = 5;
  int totalValue = 0;
 23e73d0:	2400      	movs	r4, #0
  for (int i = 0; i < numReadings; i++) {
    totalValue += analogRead(pin);
 23e73d2:	b286      	uxth	r6, r0
 23e73d4:	4630      	mov	r0, r6
 23e73d6:	f012 fb6e 	bl	23f9ab6 <analogRead>
 23e73da:	4404      	add	r4, r0
    delay(10);  // Short delay between readings
 23e73dc:	200a      	movs	r0, #10
 23e73de:	f010 f923 	bl	23f7628 <delay>
  for (int i = 0; i < numReadings; i++) {
 23e73e2:	3d01      	subs	r5, #1
 23e73e4:	d1f6      	bne.n	23e73d4 <_Z11Pin_ReadAvgi+0x8>
  }
  return(totalValue / numReadings);
 23e73e6:	2305      	movs	r3, #5
 23e73e8:	fb94 f3f3 	sdiv	r3, r4, r3
 23e73ec:	ee00 3a10 	vmov	s0, r3
}
 23e73f0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 23e73f4:	bd70      	pop	{r4, r5, r6, pc}
	...

023e73f8 <_Z25DistanceGauge_TakeReadingv>:
/*
 * ======================================================================================================================
 * DistanceGauge_TakeReading() - measure every second             
 * ======================================================================================================================
 */
void DistanceGauge_TakeReading() {
 23e73f8:	b508      	push	{r3, lr}
  dg_buckets[dg_bucket] = (int) analogRead(DISTANCE_GAUGE_PIN) * dg_adjustment;
 23e73fa:	200f      	movs	r0, #15
 23e73fc:	f012 fb5b 	bl	23f9ab6 <analogRead>
 23e7400:	ee07 0a90 	vmov	s15, r0
 23e7404:	490b      	ldr	r1, [pc, #44]	; (23e7434 <_Z25DistanceGauge_TakeReadingv+0x3c>)
 23e7406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23e740a:	ed91 7a00 	vldr	s14, [r1]
 23e740e:	ee67 7a87 	vmul.f32	s15, s15, s14
 23e7412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23e7416:	ee17 0a90 	vmov	r0, s15
 23e741a:	4a07      	ldr	r2, [pc, #28]	; (23e7438 <_Z25DistanceGauge_TakeReadingv+0x40>)
 23e741c:	4907      	ldr	r1, [pc, #28]	; (23e743c <_Z25DistanceGauge_TakeReadingv+0x44>)
 23e741e:	6813      	ldr	r3, [r2, #0]
 23e7420:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  dg_bucket = (++dg_bucket) % DG_BUCKETS; // Advance bucket index for next reading
 23e7424:	213c      	movs	r1, #60	; 0x3c
 23e7426:	3301      	adds	r3, #1
 23e7428:	fbb3 f0f1 	udiv	r0, r3, r1
 23e742c:	fb01 3310 	mls	r3, r1, r0, r3
 23e7430:	6013      	str	r3, [r2, #0]
}
 23e7432:	bd08      	pop	{r3, pc}
 23e7434:	1006a1a0 	.word	0x1006a1a0
 23e7438:	1006ac80 	.word	0x1006ac80
 23e743c:	1006ac84 	.word	0x1006ac84

023e7440 <_Z20DistanceGauge_Medianv>:
 *=======================================================================================================================
 */
float DistanceGauge_Median() {
  int i;
  
  mysort(dg_buckets, DG_BUCKETS);
 23e7440:	4804      	ldr	r0, [pc, #16]	; (23e7454 <_Z20DistanceGauge_Medianv+0x14>)
 23e7442:	213c      	movs	r1, #60	; 0x3c
float DistanceGauge_Median() {
 23e7444:	b508      	push	{r3, lr}
  mysort(dg_buckets, DG_BUCKETS);
 23e7446:	f7fd ff47 	bl	23e52d8 <_Z6mysortPjj>
  i = (DG_BUCKETS+1) / 2 - 1; // -1 as array indexing in C starts from 0
  
  return (dg_buckets[i]); 
 23e744a:	ed90 0a1d 	vldr	s0, [r0, #116]	; 0x74
}
 23e744e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 23e7452:	bd08      	pop	{r3, pc}
 23e7454:	1006ac84 	.word	0x1006ac84

023e7458 <_Z16Wind_SampleSpeedv>:
 * Optipolar Hall Effect Sensor SS451A - Anemometer
 * speed  = (( (signals/2) * (2 * pi * radius) ) / time) * calibration_factor
 * speed in m/s =  (   ( (interrupts/2) * (2 * 3.14156 * 0.079) )  / (time_period in ms / 1000)  )  * 2.64
 *=======================================================================================================================
 */
float Wind_SampleSpeed() {
 23e7458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23e745c:	ed2d 8b02 	vpush	{d8}
  uint64_t delta_ms;
  float wind_speed;
  
  delta_ms = System.millis()-anemometer_interrupt_stime;
 23e7460:	f7fd fdd1 	bl	23e5006 <_ZN11SystemClass6millisEv>

  if (anemometer_interrupt_count) {
 23e7464:	4f2c      	ldr	r7, [pc, #176]	; (23e7518 <_Z16Wind_SampleSpeedv+0xc0>)
  delta_ms = System.millis()-anemometer_interrupt_stime;
 23e7466:	4604      	mov	r4, r0
  if (anemometer_interrupt_count) {
 23e7468:	683b      	ldr	r3, [r7, #0]
  delta_ms = System.millis()-anemometer_interrupt_stime;
 23e746a:	460d      	mov	r5, r1
  if (anemometer_interrupt_count) {
 23e746c:	4e2b      	ldr	r6, [pc, #172]	; (23e751c <_Z16Wind_SampleSpeedv+0xc4>)
 23e746e:	2b00      	cmp	r3, #0
 23e7470:	d048      	beq.n	23e7504 <_Z16Wind_SampleSpeedv+0xac>
    // wind_speed = (  ( (anemometer_interrupt_count/2) * (2 * 3.14156 * ws_radius) )  / 
    //  (float)( (float)delta_ms / 1000)  )  * ws_calibration;

    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
 23e7472:	6838      	ldr	r0, [r7, #0]
 23e7474:	f7fc f8f6 	bl	23e3664 <__aeabi_ui2d>
 23e7478:	a325      	add	r3, pc, #148	; (adr r3, 23e7510 <_Z16Wind_SampleSpeedv+0xb8>)
 23e747a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e747e:	f7fc f96b 	bl	23e3758 <__aeabi_dmul>
 23e7482:	4b27      	ldr	r3, [pc, #156]	; (23e7520 <_Z16Wind_SampleSpeedv+0xc8>)
 23e7484:	4680      	mov	r8, r0
 23e7486:	6818      	ldr	r0, [r3, #0]
 23e7488:	4689      	mov	r9, r1
 23e748a:	f7fc f90d 	bl	23e36a8 <__aeabi_f2d>
 23e748e:	4602      	mov	r2, r0
 23e7490:	460b      	mov	r3, r1
 23e7492:	4640      	mov	r0, r8
 23e7494:	4649      	mov	r1, r9
 23e7496:	f7fc f95f 	bl	23e3758 <__aeabi_dmul>
 23e749a:	4680      	mov	r8, r0
 23e749c:	4689      	mov	r9, r1
  delta_ms = System.millis()-anemometer_interrupt_stime;
 23e749e:	e9d6 0100 	ldrd	r0, r1, [r6]
 23e74a2:	1a20      	subs	r0, r4, r0
 23e74a4:	eb65 0101 	sbc.w	r1, r5, r1
        (float)( (float)delta_ms / 1000) )  * ws_calibration;
 23e74a8:	f7fc fd66 	bl	23e3f78 <__aeabi_ul2f>
 23e74ac:	eddf 7a1d 	vldr	s15, [pc, #116]	; 23e7524 <_Z16Wind_SampleSpeedv+0xcc>
 23e74b0:	ee07 0a10 	vmov	s14, r0
 23e74b4:	eec7 7a27 	vdiv.f32	s15, s14, s15
 23e74b8:	ee17 0a90 	vmov	r0, s15
 23e74bc:	f7fc f8f4 	bl	23e36a8 <__aeabi_f2d>
 23e74c0:	4602      	mov	r2, r0
 23e74c2:	460b      	mov	r3, r1
    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
 23e74c4:	4640      	mov	r0, r8
 23e74c6:	4649      	mov	r1, r9
 23e74c8:	f7fc fa70 	bl	23e39ac <__aeabi_ddiv>
        (float)( (float)delta_ms / 1000) )  * ws_calibration;
 23e74cc:	4b16      	ldr	r3, [pc, #88]	; (23e7528 <_Z16Wind_SampleSpeedv+0xd0>)
    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
 23e74ce:	4604      	mov	r4, r0
        (float)( (float)delta_ms / 1000) )  * ws_calibration;
 23e74d0:	6818      	ldr	r0, [r3, #0]
    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
 23e74d2:	460d      	mov	r5, r1
        (float)( (float)delta_ms / 1000) )  * ws_calibration;
 23e74d4:	f7fc f8e8 	bl	23e36a8 <__aeabi_f2d>
 23e74d8:	4602      	mov	r2, r0
 23e74da:	460b      	mov	r3, r1
 23e74dc:	4620      	mov	r0, r4
 23e74de:	4629      	mov	r1, r5
 23e74e0:	f7fc f93a 	bl	23e3758 <__aeabi_dmul>
    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
 23e74e4:	f7fc fc30 	bl	23e3d48 <__aeabi_d2f>
 23e74e8:	ee08 0a10 	vmov	s16, r0
  }
  else {
    wind_speed = 0.0;
  }

  anemometer_interrupt_count = 0;
 23e74ec:	2300      	movs	r3, #0
 23e74ee:	603b      	str	r3, [r7, #0]
  anemometer_interrupt_stime = System.millis();
 23e74f0:	f7fd fd89 	bl	23e5006 <_ZN11SystemClass6millisEv>
  
  return (wind_speed);
} 
 23e74f4:	eeb0 0a48 	vmov.f32	s0, s16
 23e74f8:	ecbd 8b02 	vpop	{d8}
  anemometer_interrupt_stime = System.millis();
 23e74fc:	e9c6 0100 	strd	r0, r1, [r6]
} 
 23e7500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    wind_speed = 0.0;
 23e7504:	ed9f 8a09 	vldr	s16, [pc, #36]	; 23e752c <_Z16Wind_SampleSpeedv+0xd4>
 23e7508:	e7f0      	b.n	23e74ec <_Z16Wind_SampleSpeedv+0x94>
 23e750a:	bf00      	nop
 23e750c:	f3af 8000 	nop.w
 23e7510:	35935fc4 	.word	0x35935fc4
 23e7514:	400921ea 	.word	0x400921ea
 23e7518:	1006a938 	.word	0x1006a938
 23e751c:	1006a940 	.word	0x1006a940
 23e7520:	1006a1c0 	.word	0x1006a1c0
 23e7524:	447a0000 	.word	0x447a0000
 23e7528:	1006a1bc 	.word	0x1006a1bc
 23e752c:	00000000 	.word	0x00000000

023e7530 <_Z20Wind_SampleDirectionv>:
/* 
 *=======================================================================================================================
 * Wind_SampleDirection() -- Talk i2c to the AS5600 sensor and get direction
 *=======================================================================================================================
 */
int Wind_SampleDirection() {
 23e7530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int degree;
  
  // Read Raw Angle Low Byte
  Wire.beginTransmission(AS5600_ADR);
 23e7532:	4d39      	ldr	r5, [pc, #228]	; (23e7618 <_Z20Wind_SampleDirectionv+0xe8>)
 23e7534:	f012 fb06 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e7538:	6829      	ldr	r1, [r5, #0]
 23e753a:	f010 fe67 	bl	23f820c <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(AS5600_raw_ang_lo);
 23e753e:	f012 fb01 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e7542:	210d      	movs	r1, #13
 23e7544:	f7fd fd12 	bl	23e4f6c <_ZN7TwoWire5writeEi.isra.0>
  if (Wire.endTransmission()) {
 23e7548:	f012 fafc 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e754c:	f010 fe65 	bl	23f821a <_ZN7TwoWire15endTransmissionEv>
 23e7550:	4c32      	ldr	r4, [pc, #200]	; (23e761c <_Z20Wind_SampleDirectionv+0xec>)
 23e7552:	b178      	cbz	r0, 23e7574 <_Z20Wind_SampleDirectionv+0x44>
    if (AS5600_exists) {
 23e7554:	4b32      	ldr	r3, [pc, #200]	; (23e7620 <_Z20Wind_SampleDirectionv+0xf0>)
 23e7556:	781b      	ldrb	r3, [r3, #0]
 23e7558:	b113      	cbz	r3, 23e7560 <_Z20Wind_SampleDirectionv+0x30>
      Output ("WD Offline_L");
 23e755a:	4832      	ldr	r0, [pc, #200]	; (23e7624 <_Z20Wind_SampleDirectionv+0xf4>)
 23e755c:	f7fe f896 	bl	23e568c <_Z6OutputPKc>
    }
    AS5600_exists = false;
 23e7560:	2200      	movs	r2, #0
 23e7562:	4b2f      	ldr	r3, [pc, #188]	; (23e7620 <_Z20Wind_SampleDirectionv+0xf0>)
 23e7564:	701a      	strb	r2, [r3, #0]
      else {
        return (-1);
      }
    }
  }
  SystemStatusBits |= SSB_AS5600;  // Turn On Bit
 23e7566:	6823      	ldr	r3, [r4, #0]
  return (-1); // Not the best value to return 
 23e7568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  SystemStatusBits |= SSB_AS5600;  // Turn On Bit
 23e756c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 23e7570:	6023      	str	r3, [r4, #0]
  return (-1); // Not the best value to return 
 23e7572:	e04c      	b.n	23e760e <_Z20Wind_SampleDirectionv+0xde>
  else if (Wire.requestFrom(AS5600_ADR, 1)) {
 23e7574:	f012 fae6 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e7578:	2201      	movs	r2, #1
 23e757a:	7829      	ldrb	r1, [r5, #0]
 23e757c:	f010 fe3f 	bl	23f81fe <_ZN7TwoWire11requestFromEhj>
 23e7580:	2800      	cmp	r0, #0
 23e7582:	d0f0      	beq.n	23e7566 <_Z20Wind_SampleDirectionv+0x36>
    int AS5600_lo_raw = Wire.read();
 23e7584:	f012 fade 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e7588:	6803      	ldr	r3, [r0, #0]
 23e758a:	695b      	ldr	r3, [r3, #20]
 23e758c:	4798      	blx	r3
 23e758e:	4606      	mov	r6, r0
    Wire.beginTransmission(AS5600_ADR);
 23e7590:	f012 fad8 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e7594:	6829      	ldr	r1, [r5, #0]
 23e7596:	f010 fe39 	bl	23f820c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(AS5600_raw_ang_hi);
 23e759a:	f012 fad3 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e759e:	210c      	movs	r1, #12
 23e75a0:	f7fd fce4 	bl	23e4f6c <_ZN7TwoWire5writeEi.isra.0>
    if (Wire.endTransmission()) {
 23e75a4:	f012 face 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e75a8:	f010 fe37 	bl	23f821a <_ZN7TwoWire15endTransmissionEv>
 23e75ac:	b128      	cbz	r0, 23e75ba <_Z20Wind_SampleDirectionv+0x8a>
      if (AS5600_exists) {
 23e75ae:	4b1c      	ldr	r3, [pc, #112]	; (23e7620 <_Z20Wind_SampleDirectionv+0xf0>)
 23e75b0:	781b      	ldrb	r3, [r3, #0]
 23e75b2:	2b00      	cmp	r3, #0
 23e75b4:	d0d4      	beq.n	23e7560 <_Z20Wind_SampleDirectionv+0x30>
        Output ("WD Offline_H");
 23e75b6:	481c      	ldr	r0, [pc, #112]	; (23e7628 <_Z20Wind_SampleDirectionv+0xf8>)
 23e75b8:	e7d0      	b.n	23e755c <_Z20Wind_SampleDirectionv+0x2c>
    else if (Wire.requestFrom(AS5600_ADR, 1)) {
 23e75ba:	f012 fac3 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e75be:	2201      	movs	r2, #1
 23e75c0:	7829      	ldrb	r1, [r5, #0]
 23e75c2:	f010 fe1c 	bl	23f81fe <_ZN7TwoWire11requestFromEhj>
 23e75c6:	2800      	cmp	r0, #0
 23e75c8:	d0cd      	beq.n	23e7566 <_Z20Wind_SampleDirectionv+0x36>
      word AS5600_hi_raw = Wire.read();
 23e75ca:	f012 fabb 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e75ce:	6803      	ldr	r3, [r0, #0]
      if (!AS5600_exists) {
 23e75d0:	4f13      	ldr	r7, [pc, #76]	; (23e7620 <_Z20Wind_SampleDirectionv+0xf0>)
      word AS5600_hi_raw = Wire.read();
 23e75d2:	695b      	ldr	r3, [r3, #20]
 23e75d4:	4798      	blx	r3
      if (!AS5600_exists) {
 23e75d6:	783b      	ldrb	r3, [r7, #0]
      word AS5600_hi_raw = Wire.read();
 23e75d8:	4605      	mov	r5, r0
      if (!AS5600_exists) {
 23e75da:	b913      	cbnz	r3, 23e75e2 <_Z20Wind_SampleDirectionv+0xb2>
        Output ("WD Online");
 23e75dc:	4813      	ldr	r0, [pc, #76]	; (23e762c <_Z20Wind_SampleDirectionv+0xfc>)
 23e75de:	f7fe f855 	bl	23e568c <_Z6OutputPKc>
      AS5600_exists = true;           // We made it 
 23e75e2:	2301      	movs	r3, #1
 23e75e4:	703b      	strb	r3, [r7, #0]
      SystemStatusBits &= ~SSB_AS5600; // Turn Off Bit
 23e75e6:	6823      	ldr	r3, [r4, #0]
      degree = (int) AS5600_hi_raw * 0.0879;
 23e75e8:	ea46 2005 	orr.w	r0, r6, r5, lsl #8
      SystemStatusBits &= ~SSB_AS5600; // Turn Off Bit
 23e75ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 23e75f0:	6023      	str	r3, [r4, #0]
      degree = (int) AS5600_hi_raw * 0.0879;
 23e75f2:	f7fc f847 	bl	23e3684 <__aeabi_i2d>
 23e75f6:	a306      	add	r3, pc, #24	; (adr r3, 23e7610 <_Z20Wind_SampleDirectionv+0xe0>)
 23e75f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e75fc:	f7fc f8ac 	bl	23e3758 <__aeabi_dmul>
 23e7600:	f7fc fb5a 	bl	23e3cb8 <__aeabi_d2iz>
        return (-1);
 23e7604:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
 23e7608:	bf88      	it	hi
 23e760a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
 23e760e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23e7610:	495182aa 	.word	0x495182aa
 23e7614:	3fb6809d 	.word	0x3fb6809d
 23e7618:	1006a0f4 	.word	0x1006a0f4
 23e761c:	1006a178 	.word	0x1006a178
 23e7620:	1006a0f8 	.word	0x1006a0f8
 23e7624:	023fd384 	.word	0x023fd384
 23e7628:	023fd391 	.word	0x023fd391
 23e762c:	023fd39e 	.word	0x023fd39e

023e7630 <_Z20Wind_DirectionVectorv>:
/* 
 *=======================================================================================================================
 * Wind_DirectionVector()
 *=======================================================================================================================
 */
int Wind_DirectionVector() {
 23e7630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    // Flag we have wind speed
    if (s > 0) {
      ws_zero = false;  
    }
    r = (d * 71) / 4068.0;
 23e7634:	f20f 1910 	addw	r9, pc, #272	; 0x110
 23e7638:	e9d9 8900 	ldrd	r8, r9, [r9]
int Wind_DirectionVector() {
 23e763c:	ed2d 8b08 	vpush	{d8-d11}
  double EW_vector_sum = 0.0;
 23e7640:	ed9f 8b3f 	vldr	d8, [pc, #252]	; 23e7740 <_Z20Wind_DirectionVectorv+0x110>
  bool ws_zero = true;
 23e7644:	2501      	movs	r5, #1
  for (i=0; i<WIND_READINGS; i++) {
 23e7646:	f04f 0a00 	mov.w	sl, #0
  double NS_vector_sum = 0.0;
 23e764a:	eeb0 9a48 	vmov.f32	s18, s16
 23e764e:	eef0 9a68 	vmov.f32	s19, s17
    r = (d * 71) / 4068.0;
 23e7652:	f04f 0b47 	mov.w	fp, #71	; 0x47
 23e7656:	4c40      	ldr	r4, [pc, #256]	; (23e7758 <_Z20Wind_DirectionVectorv+0x128>)
int Wind_DirectionVector() {
 23e7658:	b083      	sub	sp, #12
    d = wind.bucket[i].direction;
 23e765a:	6820      	ldr	r0, [r4, #0]
    if (d == -1) {
 23e765c:	1c43      	adds	r3, r0, #1
 23e765e:	d068      	beq.n	23e7732 <_Z20Wind_DirectionVectorv+0x102>
    s = wind.bucket[i].speed;
 23e7660:	ed94 ba01 	vldr	s22, [r4, #4]
      ws_zero = false;  
 23e7664:	eeb5 ba40 	vcmp.f32	s22, #0.0
 23e7668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    r = (d * 71) / 4068.0;
 23e766c:	fb0b f000 	mul.w	r0, fp, r0
      ws_zero = false;  
 23e7670:	bfc8      	it	gt
 23e7672:	2500      	movgt	r5, #0
    r = (d * 71) / 4068.0;
 23e7674:	f7fc f806 	bl	23e3684 <__aeabi_i2d>
 23e7678:	4642      	mov	r2, r8
 23e767a:	464b      	mov	r3, r9
 23e767c:	f7fc f996 	bl	23e39ac <__aeabi_ddiv>
    
    // North South Direction 
    NS_vector_sum += cos(r) * s;
 23e7680:	ec41 0b10 	vmov	d0, r0, r1
    r = (d * 71) / 4068.0;
 23e7684:	ec41 0b1a 	vmov	d10, r0, r1
    NS_vector_sum += cos(r) * s;
 23e7688:	f012 fcbe 	bl	23fa008 <cos>
 23e768c:	ee1b 0a10 	vmov	r0, s22
 23e7690:	ed8d 0b00 	vstr	d0, [sp]
 23e7694:	f7fc f808 	bl	23e36a8 <__aeabi_f2d>
 23e7698:	4602      	mov	r2, r0
 23e769a:	460b      	mov	r3, r1
 23e769c:	4606      	mov	r6, r0
 23e769e:	460f      	mov	r7, r1
 23e76a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 23e76a4:	f7fc f858 	bl	23e3758 <__aeabi_dmul>
 23e76a8:	4602      	mov	r2, r0
 23e76aa:	460b      	mov	r3, r1
 23e76ac:	ec51 0b19 	vmov	r0, r1, d9
 23e76b0:	f7fb fe9c 	bl	23e33ec <__adddf3>
    EW_vector_sum += sin(r) * s;
 23e76b4:	eeb0 0a4a 	vmov.f32	s0, s20
 23e76b8:	eef0 0a6a 	vmov.f32	s1, s21
    NS_vector_sum += cos(r) * s;
 23e76bc:	ec41 0b19 	vmov	d9, r0, r1
    EW_vector_sum += sin(r) * s;
 23e76c0:	f012 fd96 	bl	23fa1f0 <sin>
 23e76c4:	4630      	mov	r0, r6
 23e76c6:	ec53 2b10 	vmov	r2, r3, d0
 23e76ca:	4639      	mov	r1, r7
 23e76cc:	f7fc f844 	bl	23e3758 <__aeabi_dmul>
 23e76d0:	4602      	mov	r2, r0
 23e76d2:	460b      	mov	r3, r1
 23e76d4:	ec51 0b18 	vmov	r0, r1, d8
 23e76d8:	f7fb fe88 	bl	23e33ec <__adddf3>
  for (i=0; i<WIND_READINGS; i++) {
 23e76dc:	f10a 0a01 	add.w	sl, sl, #1
 23e76e0:	f1ba 0f3c 	cmp.w	sl, #60	; 0x3c
    EW_vector_sum += sin(r) * s;
 23e76e4:	ec41 0b18 	vmov	d8, r0, r1
  for (i=0; i<WIND_READINGS; i++) {
 23e76e8:	f104 0408 	add.w	r4, r4, #8
 23e76ec:	d1b5      	bne.n	23e765a <_Z20Wind_DirectionVectorv+0x2a>
  }
  rtod = (atan2(EW_vector_sum, NS_vector_sum)*4068.0)/71.0;
 23e76ee:	eeb0 1a49 	vmov.f32	s2, s18
 23e76f2:	eef0 1a69 	vmov.f32	s3, s19
 23e76f6:	ec41 0b10 	vmov	d0, r0, r1
 23e76fa:	f012 fdcd 	bl	23fa298 <atan2>
 23e76fe:	a312      	add	r3, pc, #72	; (adr r3, 23e7748 <_Z20Wind_DirectionVectorv+0x118>)
 23e7700:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e7704:	ec51 0b10 	vmov	r0, r1, d0
 23e7708:	f7fc f826 	bl	23e3758 <__aeabi_dmul>
 23e770c:	a310      	add	r3, pc, #64	; (adr r3, 23e7750 <_Z20Wind_DirectionVectorv+0x120>)
 23e770e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e7712:	f7fc f94b 	bl	23e39ac <__aeabi_ddiv>
 23e7716:	f7fc facf 	bl	23e3cb8 <__aeabi_d2iz>
  if (rtod<0) {
 23e771a:	2800      	cmp	r0, #0
    rtod = 360 + rtod;
 23e771c:	bfb8      	it	lt
 23e771e:	f500 70b4 	addlt.w	r0, r0, #360	; 0x168
  }

  // If all the winds speeds are 0 then we return current wind direction or 0 on failure of that.
  if (ws_zero) {
 23e7722:	b135      	cbz	r5, 23e7732 <_Z20Wind_DirectionVectorv+0x102>
    return (Wind_SampleDirection()); // Can return -1
  }
  else {
    return (rtod);
  }
}
 23e7724:	b003      	add	sp, #12
 23e7726:	ecbd 8b08 	vpop	{d8-d11}
 23e772a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (Wind_SampleDirection()); // Can return -1
 23e772e:	f7ff beff 	b.w	23e7530 <_Z20Wind_SampleDirectionv>
}
 23e7732:	b003      	add	sp, #12
 23e7734:	ecbd 8b08 	vpop	{d8-d11}
 23e7738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23e773c:	f3af 8000 	nop.w
	...
 23e774c:	40afc800 	.word	0x40afc800
 23e7750:	00000000 	.word	0x00000000
 23e7754:	4051c000 	.word	0x4051c000
 23e7758:	1007ac6c 	.word	0x1007ac6c

023e775c <_Z17Wind_SpeedAveragev>:
 * Wind_SpeedAverage()
 *=======================================================================================================================
 */
float Wind_SpeedAverage() {
  float wind_speed = 0.0;
  for (int i=0; i<WIND_READINGS; i++) {
 23e775c:	2300      	movs	r3, #0
  float wind_speed = 0.0;
 23e775e:	eddf 7a08 	vldr	s15, [pc, #32]	; 23e7780 <_Z17Wind_SpeedAveragev+0x24>
 23e7762:	4a08      	ldr	r2, [pc, #32]	; (23e7784 <_Z17Wind_SpeedAveragev+0x28>)
    // sum wind speeds for later average
    wind_speed += wind.bucket[i].speed;
 23e7764:	ed92 7a01 	vldr	s14, [r2, #4]
  for (int i=0; i<WIND_READINGS; i++) {
 23e7768:	3301      	adds	r3, #1
 23e776a:	2b3c      	cmp	r3, #60	; 0x3c
    wind_speed += wind.bucket[i].speed;
 23e776c:	ee77 7a87 	vadd.f32	s15, s15, s14
  for (int i=0; i<WIND_READINGS; i++) {
 23e7770:	f102 0208 	add.w	r2, r2, #8
 23e7774:	d1f6      	bne.n	23e7764 <_Z17Wind_SpeedAveragev+0x8>
  }
  return( wind_speed / (float) WIND_READINGS);
}
 23e7776:	ed9f 0a04 	vldr	s0, [pc, #16]	; 23e7788 <_Z17Wind_SpeedAveragev+0x2c>
 23e777a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 23e777e:	4770      	bx	lr
 23e7780:	00000000 	.word	0x00000000
 23e7784:	1007ac6c 	.word	0x1007ac6c
 23e7788:	42700000 	.word	0x42700000
 23e778c:	00000000 	.word	0x00000000

023e7790 <_Z15Wind_GustUpdatev>:
 *     Sum this reading with next 2.
 *     If greater than last, update last 
 * 
 *=======================================================================================================================
 */
void Wind_GustUpdate() {
 23e7790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23e7794:	ed2d 8b08 	vpush	{d8-d11}
  int bucket = wind.bucket_idx; // Start at next bucket to fill (aka oldest reading)
 23e7798:	4963      	ldr	r1, [pc, #396]	; (23e7928 <_Z15Wind_GustUpdatev+0x198>)
 23e779a:	253a      	movs	r5, #58	; 0x3a
 23e779c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
  float ws_sum = 0.0;
 23e77a0:	ed9f 7a62 	vldr	s14, [pc, #392]	; 23e792c <_Z15Wind_GustUpdatev+0x19c>
  int ws_bucket = bucket;
 23e77a4:	461c      	mov	r4, r3
  float sum;

  for (int i=0; i<(WIND_READINGS-2); i++) {  // subtract 2 because we are looking ahead at the next 2 buckets
    // sum wind speeds 
    sum = wind.bucket[bucket].speed +
          wind.bucket[(bucket+1) % WIND_READINGS].speed +
 23e77a6:	203c      	movs	r0, #60	; 0x3c
void Wind_GustUpdate() {
 23e77a8:	b083      	sub	sp, #12
    sum = wind.bucket[bucket].speed +
 23e77aa:	461e      	mov	r6, r3
 23e77ac:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
          wind.bucket[(bucket+1) % WIND_READINGS].speed +
 23e77b0:	3301      	adds	r3, #1
    sum = wind.bucket[bucket].speed +
 23e77b2:	edd2 7a01 	vldr	s15, [r2, #4]
          wind.bucket[(bucket+1) % WIND_READINGS].speed +
 23e77b6:	fb93 f2f0 	sdiv	r2, r3, r0
 23e77ba:	fb00 3312 	mls	r3, r0, r2, r3
          wind.bucket[(bucket+2) % WIND_READINGS].speed;
 23e77be:	1cb2      	adds	r2, r6, #2
 23e77c0:	fb92 f7f0 	sdiv	r7, r2, r0
 23e77c4:	fb00 2217 	mls	r2, r0, r7, r2
          wind.bucket[(bucket+1) % WIND_READINGS].speed +
 23e77c8:	eb01 07c3 	add.w	r7, r1, r3, lsl #3
    sum = wind.bucket[bucket].speed +
 23e77cc:	edd7 6a01 	vldr	s13, [r7, #4]
          wind.bucket[(bucket+2) % WIND_READINGS].speed;
 23e77d0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    sum = wind.bucket[bucket].speed +
 23e77d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 23e77d8:	edd2 6a01 	vldr	s13, [r2, #4]
 23e77dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
    if (sum >= ws_sum) {
 23e77e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 23e77e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e77e8:	bfa4      	itt	ge
 23e77ea:	4634      	movge	r4, r6
      ws_sum = sum;
 23e77ec:	eeb0 7a67 	vmovge.f32	s14, s15
  for (int i=0; i<(WIND_READINGS-2); i++) {  // subtract 2 because we are looking ahead at the next 2 buckets
 23e77f0:	3d01      	subs	r5, #1
 23e77f2:	d1da      	bne.n	23e77aa <_Z15Wind_GustUpdatev+0x1a>
      ws_bucket = bucket;
    }
    bucket = (++bucket) % WIND_READINGS;
  }
  wind.gust = ws_sum/3;
 23e77f4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
  
  // Determine Gust Direction 
  double NS_vector_sum = 0.0;
  double EW_vector_sum = 0.0;
 23e77f8:	ed9f 8b45 	vldr	d8, [pc, #276]	; 23e7910 <_Z15Wind_GustUpdatev+0x180>
  wind.gust = ws_sum/3;
 23e77fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 23e7800:	f04f 0803 	mov.w	r8, #3
 23e7804:	edc1 7a79 	vstr	s15, [r1, #484]	; 0x1e4
  double r;
  float s;
  int d, i, rtod;
  bool ws_zero = true;
 23e7808:	2501      	movs	r5, #1
  double NS_vector_sum = 0.0;
 23e780a:	eeb0 9a48 	vmov.f32	s18, s16
 23e780e:	eef0 9a68 	vmov.f32	s19, s17

    // Flag we have wind speed
    if (s > 0) {
      ws_zero = false;  
    }
    r = (d * 71) / 4068.0;
 23e7812:	f04f 0b47 	mov.w	fp, #71	; 0x47
    
    // North South Direction 
    NS_vector_sum += cos(r) * s;
    EW_vector_sum += sin(r) * s;

    bucket = (++bucket) % WIND_READINGS;
 23e7816:	f04f 093c 	mov.w	r9, #60	; 0x3c
    d = wind.bucket[bucket].direction;
 23e781a:	f8df a10c 	ldr.w	sl, [pc, #268]	; 23e7928 <_Z15Wind_GustUpdatev+0x198>
 23e781e:	f85a 0034 	ldr.w	r0, [sl, r4, lsl #3]
    if (d == -1) {
 23e7822:	1c43      	adds	r3, r0, #1
 23e7824:	d072      	beq.n	23e790c <_Z15Wind_GustUpdatev+0x17c>
    s = wind.bucket[bucket].speed;
 23e7826:	eb0a 03c4 	add.w	r3, sl, r4, lsl #3
 23e782a:	ed93 ba01 	vldr	s22, [r3, #4]
      ws_zero = false;  
 23e782e:	eeb5 ba40 	vcmp.f32	s22, #0.0
 23e7832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    r = (d * 71) / 4068.0;
 23e7836:	fb0b f000 	mul.w	r0, fp, r0
      ws_zero = false;  
 23e783a:	bfc8      	it	gt
 23e783c:	2500      	movgt	r5, #0
    r = (d * 71) / 4068.0;
 23e783e:	f7fb ff21 	bl	23e3684 <__aeabi_i2d>
 23e7842:	a335      	add	r3, pc, #212	; (adr r3, 23e7918 <_Z15Wind_GustUpdatev+0x188>)
 23e7844:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e7848:	f7fc f8b0 	bl	23e39ac <__aeabi_ddiv>
    NS_vector_sum += cos(r) * s;
 23e784c:	ec41 0b10 	vmov	d0, r0, r1
    r = (d * 71) / 4068.0;
 23e7850:	ec41 0b1a 	vmov	d10, r0, r1
    NS_vector_sum += cos(r) * s;
 23e7854:	f012 fbd8 	bl	23fa008 <cos>
 23e7858:	ee1b 0a10 	vmov	r0, s22
 23e785c:	ed8d 0b00 	vstr	d0, [sp]
 23e7860:	f7fb ff22 	bl	23e36a8 <__aeabi_f2d>
 23e7864:	4602      	mov	r2, r0
 23e7866:	460b      	mov	r3, r1
 23e7868:	4606      	mov	r6, r0
 23e786a:	460f      	mov	r7, r1
 23e786c:	e9dd 0100 	ldrd	r0, r1, [sp]
 23e7870:	f7fb ff72 	bl	23e3758 <__aeabi_dmul>
 23e7874:	4602      	mov	r2, r0
 23e7876:	460b      	mov	r3, r1
 23e7878:	ec51 0b19 	vmov	r0, r1, d9
 23e787c:	f7fb fdb6 	bl	23e33ec <__adddf3>
    EW_vector_sum += sin(r) * s;
 23e7880:	eeb0 0a4a 	vmov.f32	s0, s20
 23e7884:	eef0 0a6a 	vmov.f32	s1, s21
    NS_vector_sum += cos(r) * s;
 23e7888:	ec41 0b19 	vmov	d9, r0, r1
    EW_vector_sum += sin(r) * s;
 23e788c:	f012 fcb0 	bl	23fa1f0 <sin>
 23e7890:	4630      	mov	r0, r6
 23e7892:	ec53 2b10 	vmov	r2, r3, d0
 23e7896:	4639      	mov	r1, r7
 23e7898:	f7fb ff5e 	bl	23e3758 <__aeabi_dmul>
    bucket = (++bucket) % WIND_READINGS;
 23e789c:	3401      	adds	r4, #1
    EW_vector_sum += sin(r) * s;
 23e789e:	460b      	mov	r3, r1
 23e78a0:	4602      	mov	r2, r0
 23e78a2:	ec51 0b18 	vmov	r0, r1, d8
 23e78a6:	f7fb fda1 	bl	23e33ec <__adddf3>
    bucket = (++bucket) % WIND_READINGS;
 23e78aa:	fb94 f3f9 	sdiv	r3, r4, r9
  for (i=0; i<3; i++) {
 23e78ae:	f1b8 0801 	subs.w	r8, r8, #1
    EW_vector_sum += sin(r) * s;
 23e78b2:	ec41 0b18 	vmov	d8, r0, r1
    bucket = (++bucket) % WIND_READINGS;
 23e78b6:	fb09 4413 	mls	r4, r9, r3, r4
  for (i=0; i<3; i++) {
 23e78ba:	d1b0      	bne.n	23e781e <_Z15Wind_GustUpdatev+0x8e>
  }

  rtod = (atan2(EW_vector_sum, NS_vector_sum)*4068.0)/71.0;
 23e78bc:	eeb0 1a49 	vmov.f32	s2, s18
 23e78c0:	eef0 1a69 	vmov.f32	s3, s19
 23e78c4:	eeb0 0a48 	vmov.f32	s0, s16
 23e78c8:	eef0 0a68 	vmov.f32	s1, s17
 23e78cc:	f012 fce4 	bl	23fa298 <atan2>
 23e78d0:	a311      	add	r3, pc, #68	; (adr r3, 23e7918 <_Z15Wind_GustUpdatev+0x188>)
 23e78d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e78d6:	ec51 0b10 	vmov	r0, r1, d0
 23e78da:	f7fb ff3d 	bl	23e3758 <__aeabi_dmul>
 23e78de:	a310      	add	r3, pc, #64	; (adr r3, 23e7920 <_Z15Wind_GustUpdatev+0x190>)
 23e78e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e78e4:	f7fc f862 	bl	23e39ac <__aeabi_ddiv>
 23e78e8:	f7fc f9e6 	bl	23e3cb8 <__aeabi_d2iz>
  if (rtod<0) {
 23e78ec:	2800      	cmp	r0, #0
    rtod = 360 + rtod;
 23e78ee:	bfb8      	it	lt
 23e78f0:	f500 70b4 	addlt.w	r0, r0, #360	; 0x168
  }

  // If all the winds speeds are 0 or we have a -1 direction then set -1 for direction.
  if (ws_zero) {
    wind.gust_direction = -1;
 23e78f4:	2d00      	cmp	r5, #0
 23e78f6:	bf18      	it	ne
 23e78f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23e78fc:	4b0a      	ldr	r3, [pc, #40]	; (23e7928 <_Z15Wind_GustUpdatev+0x198>)
 23e78fe:	f8c3 01e8 	str.w	r0, [r3, #488]	; 0x1e8
  }
  else {
    wind.gust_direction = rtod;
  }
}
 23e7902:	b003      	add	sp, #12
 23e7904:	ecbd 8b08 	vpop	{d8-d11}
 23e7908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ws_zero = true;
 23e790c:	2501      	movs	r5, #1
 23e790e:	e7d5      	b.n	23e78bc <_Z15Wind_GustUpdatev+0x12c>
	...
 23e791c:	40afc800 	.word	0x40afc800
 23e7920:	00000000 	.word	0x00000000
 23e7924:	4051c000 	.word	0x4051c000
 23e7928:	1007ac6c 	.word	0x1007ac6c
 23e792c:	00000000 	.word	0x00000000

023e7930 <_Z16Wind_TakeReadingv>:
/*
 * ======================================================================================================================
 * Wind_TakeReading() - Wind direction and speed, measure every second             
 * ======================================================================================================================
 */
void Wind_TakeReading() {
 23e7930:	b538      	push	{r3, r4, r5, lr}
  wind.bucket[wind.bucket_idx].direction = (int) Wind_SampleDirection();
 23e7932:	4c0d      	ldr	r4, [pc, #52]	; (23e7968 <_Z16Wind_TakeReadingv+0x38>)
 23e7934:	f8d4 51e0 	ldr.w	r5, [r4, #480]	; 0x1e0
 23e7938:	f7ff fdfa 	bl	23e7530 <_Z20Wind_SampleDirectionv>
 23e793c:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
  wind.bucket[wind.bucket_idx].speed = Wind_SampleSpeed();
 23e7940:	f8d4 51e0 	ldr.w	r5, [r4, #480]	; 0x1e0
 23e7944:	f7ff fd88 	bl	23e7458 <_Z16Wind_SampleSpeedv>
  wind.bucket_idx = (++wind.bucket_idx) % WIND_READINGS; // Advance bucket index for next reading
 23e7948:	223c      	movs	r2, #60	; 0x3c
 23e794a:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
  wind.bucket[wind.bucket_idx].speed = Wind_SampleSpeed();
 23e794e:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
  wind.bucket_idx = (++wind.bucket_idx) % WIND_READINGS; // Advance bucket index for next reading
 23e7952:	3301      	adds	r3, #1
 23e7954:	fb93 f1f2 	sdiv	r1, r3, r2
  wind.bucket[wind.bucket_idx].speed = Wind_SampleSpeed();
 23e7958:	ed85 0a01 	vstr	s0, [r5, #4]
  wind.bucket_idx = (++wind.bucket_idx) % WIND_READINGS; // Advance bucket index for next reading
 23e795c:	fb02 3311 	mls	r3, r2, r1, r3
 23e7960:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
}
 23e7964:	bd38      	pop	{r3, r4, r5, pc}
 23e7966:	bf00      	nop
 23e7968:	1007ac6c 	.word	0x1007ac6c

023e796c <_Z17I2C_Check_Sensorsv>:
/*
 * ======================================================================================================================
 * I2C_Check_Sensors() - See if each I2C sensor responds on the bus and take action accordingly             
 * ======================================================================================================================
 */
void I2C_Check_Sensors() {
 23e796c:	b570      	push	{r4, r5, r6, lr}

  // BMX_1 Barometric Pressure 
  if (I2C_Device_Exist (BMX_ADDRESS_1)) {
 23e796e:	2077      	movs	r0, #119	; 0x77
 23e7970:	f7fd fc83 	bl	23e527a <_Z16I2C_Device_Existh>
 23e7974:	4ca7      	ldr	r4, [pc, #668]	; (23e7c14 <_Z17I2C_Check_Sensorsv+0x2a8>)
    // Sensor online but our state had it offline
    if (BMX_1_exists == false) {
 23e7976:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (BMX_ADDRESS_1)) {
 23e7978:	2800      	cmp	r0, #0
 23e797a:	f000 80ef 	beq.w	23e7b5c <_Z17I2C_Check_Sensorsv+0x1f0>
    if (BMX_1_exists == false) {
 23e797e:	b99b      	cbnz	r3, 23e79a8 <_Z17I2C_Check_Sensorsv+0x3c>
      if (BMX_1_chip_id == BMP280_CHIP_ID) {
 23e7980:	4ba5      	ldr	r3, [pc, #660]	; (23e7c18 <_Z17I2C_Check_Sensorsv+0x2ac>)
 23e7982:	781a      	ldrb	r2, [r3, #0]
 23e7984:	2a58      	cmp	r2, #88	; 0x58
 23e7986:	f040 80b1 	bne.w	23e7aec <_Z17I2C_Check_Sensorsv+0x180>
        if (bmp1.begin(BMX_ADDRESS_1)) { 
 23e798a:	2177      	movs	r1, #119	; 0x77
 23e798c:	48a3      	ldr	r0, [pc, #652]	; (23e7c1c <_Z17I2C_Check_Sensorsv+0x2b0>)
 23e798e:	f007 fb47 	bl	23ef020 <_ZN15Adafruit_BMP2805beginEhh>
 23e7992:	b148      	cbz	r0, 23e79a8 <_Z17I2C_Check_Sensorsv+0x3c>
          BMX_1_exists = true;
 23e7994:	2301      	movs	r3, #1
          Output ("BMP1 ONLINE");
 23e7996:	48a2      	ldr	r0, [pc, #648]	; (23e7c20 <_Z17I2C_Check_Sensorsv+0x2b4>)
          BMX_1_exists = true;
 23e7998:	7023      	strb	r3, [r4, #0]
        }        
      }
      else {
        if (bm31.begin_I2C(BMX_ADDRESS_1)) { 
          BMX_1_exists = true;
          Output ("BM31 ONLINE");
 23e799a:	f7fd fe77 	bl	23e568c <_Z6OutputPKc>
          SystemStatusBits &= ~SSB_BMX_1; // Turn Off Bit
 23e799e:	4aa1      	ldr	r2, [pc, #644]	; (23e7c24 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e79a0:	6813      	ldr	r3, [r2, #0]
 23e79a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  else {
    // Sensor offline but our state has it online
    if (BMX_1_exists == true) {
      BMX_1_exists = false;
      Output ("BMX1 OFFLINE");
      SystemStatusBits |= SSB_BMX_1;  // Turn On Bit 
 23e79a6:	6013      	str	r3, [r2, #0]
    }    
  }

  // BMX_2 Barometric Pressure 
  if (I2C_Device_Exist (BMX_ADDRESS_2)) {
 23e79a8:	2076      	movs	r0, #118	; 0x76
 23e79aa:	f7fd fc66 	bl	23e527a <_Z16I2C_Device_Existh>
 23e79ae:	4d9e      	ldr	r5, [pc, #632]	; (23e7c28 <_Z17I2C_Check_Sensorsv+0x2bc>)
    // Sensor online but our state had it offline
    if (BMX_2_exists == false) {
 23e79b0:	782b      	ldrb	r3, [r5, #0]
  if (I2C_Device_Exist (BMX_ADDRESS_2)) {
 23e79b2:	2800      	cmp	r0, #0
 23e79b4:	f000 8116 	beq.w	23e7be4 <_Z17I2C_Check_Sensorsv+0x278>
    if (BMX_2_exists == false) {
 23e79b8:	b99b      	cbnz	r3, 23e79e2 <_Z17I2C_Check_Sensorsv+0x76>
      if (BMX_2_chip_id == BMP280_CHIP_ID) {
 23e79ba:	4b9c      	ldr	r3, [pc, #624]	; (23e7c2c <_Z17I2C_Check_Sensorsv+0x2c0>)
 23e79bc:	781a      	ldrb	r2, [r3, #0]
 23e79be:	2a58      	cmp	r2, #88	; 0x58
 23e79c0:	f040 80d8 	bne.w	23e7b74 <_Z17I2C_Check_Sensorsv+0x208>
        if (bmp2.begin(BMX_ADDRESS_2)) { 
 23e79c4:	2176      	movs	r1, #118	; 0x76
 23e79c6:	489a      	ldr	r0, [pc, #616]	; (23e7c30 <_Z17I2C_Check_Sensorsv+0x2c4>)
 23e79c8:	f007 fb2a 	bl	23ef020 <_ZN15Adafruit_BMP2805beginEhh>
 23e79cc:	b148      	cbz	r0, 23e79e2 <_Z17I2C_Check_Sensorsv+0x76>
          BMX_2_exists = true;
 23e79ce:	2301      	movs	r3, #1
          Output ("BMP2 ONLINE");
 23e79d0:	4898      	ldr	r0, [pc, #608]	; (23e7c34 <_Z17I2C_Check_Sensorsv+0x2c8>)
          BMX_2_exists = true;
 23e79d2:	702b      	strb	r3, [r5, #0]
        }        
      }
      else {
         if (bm32.begin_I2C(BMX_ADDRESS_2)) { 
          BMX_2_exists = true;
          Output ("BM32 ONLINE");
 23e79d4:	f7fd fe5a 	bl	23e568c <_Z6OutputPKc>
          SystemStatusBits &= ~SSB_BMX_2; // Turn Off Bit
 23e79d8:	4a92      	ldr	r2, [pc, #584]	; (23e7c24 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e79da:	6813      	ldr	r3, [r2, #0]
 23e79dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  else {
    // Sensor offline but we our state has it online
    if (BMX_2_exists == true) {
      BMX_2_exists = false;
      Output ("BMX2 OFFLINE");
      SystemStatusBits |= SSB_BMX_2;  // Turn On Bit 
 23e79e0:	6013      	str	r3, [r2, #0]
    }    
  }

  // HTU21DF Humidity & Temp Sensor
  if (I2C_Device_Exist (HTU21DF_I2CADDR)) {
 23e79e2:	2040      	movs	r0, #64	; 0x40
 23e79e4:	f7fd fc49 	bl	23e527a <_Z16I2C_Device_Existh>
 23e79e8:	4c93      	ldr	r4, [pc, #588]	; (23e7c38 <_Z17I2C_Check_Sensorsv+0x2cc>)
    // Sensor online but our state had it offline
    if (HTU21DF_exists == false) {
 23e79ea:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (HTU21DF_I2CADDR)) {
 23e79ec:	2800      	cmp	r0, #0
 23e79ee:	f000 8105 	beq.w	23e7bfc <_Z17I2C_Check_Sensorsv+0x290>
    if (HTU21DF_exists == false) {
 23e79f2:	b983      	cbnz	r3, 23e7a16 <_Z17I2C_Check_Sensorsv+0xaa>
      // See if we can bring sensor online
      if (htu.begin()) {
 23e79f4:	f012 f8a6 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e79f8:	4601      	mov	r1, r0
 23e79fa:	4890      	ldr	r0, [pc, #576]	; (23e7c3c <_Z17I2C_Check_Sensorsv+0x2d0>)
 23e79fc:	f008 fd82 	bl	23f0504 <_ZN16Adafruit_HTU21DF5beginEP7TwoWire>
 23e7a00:	b148      	cbz	r0, 23e7a16 <_Z17I2C_Check_Sensorsv+0xaa>
        HTU21DF_exists = true;
 23e7a02:	2301      	movs	r3, #1
        Output ("HTU ONLINE");
 23e7a04:	488e      	ldr	r0, [pc, #568]	; (23e7c40 <_Z17I2C_Check_Sensorsv+0x2d4>)
        HTU21DF_exists = true;
 23e7a06:	7023      	strb	r3, [r4, #0]
        Output ("HTU ONLINE");
 23e7a08:	f7fd fe40 	bl	23e568c <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_HTU21DF; // Turn Off Bit
 23e7a0c:	4a85      	ldr	r2, [pc, #532]	; (23e7c24 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e7a0e:	6813      	ldr	r3, [r2, #0]
 23e7a10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  else {
    // Sensor offline but we our state has it online
    if (HTU21DF_exists == true) {
      HTU21DF_exists = false;
      Output ("HTU OFFLINE");
      SystemStatusBits |= SSB_HTU21DF;  // Turn On Bit
 23e7a14:	6013      	str	r3, [r2, #0]
    }   
  }
#endif

  // SI1145 UV index & IR & Visible Sensor
  if (I2C_Device_Exist (SI1145_ADDR)) {
 23e7a16:	2060      	movs	r0, #96	; 0x60
 23e7a18:	f7fd fc2f 	bl	23e527a <_Z16I2C_Device_Existh>
 23e7a1c:	4c89      	ldr	r4, [pc, #548]	; (23e7c44 <_Z17I2C_Check_Sensorsv+0x2d8>)
    // Sensor online but our state had it offline
    if (SI1145_exists == false) {
 23e7a1e:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (SI1145_ADDR)) {
 23e7a20:	2800      	cmp	r0, #0
 23e7a22:	f000 8141 	beq.w	23e7ca8 <_Z17I2C_Check_Sensorsv+0x33c>
    if (SI1145_exists == false) {
 23e7a26:	b98b      	cbnz	r3, 23e7a4c <_Z17I2C_Check_Sensorsv+0xe0>
      // See if we can bring sensore online
      if (uv.begin()) {
 23e7a28:	f012 f88c 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e7a2c:	2160      	movs	r1, #96	; 0x60
 23e7a2e:	4602      	mov	r2, r0
 23e7a30:	4885      	ldr	r0, [pc, #532]	; (23e7c48 <_Z17I2C_Check_Sensorsv+0x2dc>)
 23e7a32:	f009 fa0f 	bl	23f0e54 <_ZN15Adafruit_SI11455beginEhP7TwoWire>
 23e7a36:	b148      	cbz	r0, 23e7a4c <_Z17I2C_Check_Sensorsv+0xe0>
        SI1145_exists = true;
 23e7a38:	2301      	movs	r3, #1
        Output ("SI ONLINE");
 23e7a3a:	4884      	ldr	r0, [pc, #528]	; (23e7c4c <_Z17I2C_Check_Sensorsv+0x2e0>)
        SI1145_exists = true;
 23e7a3c:	7023      	strb	r3, [r4, #0]
        Output ("SI ONLINE");
 23e7a3e:	f7fd fe25 	bl	23e568c <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_SI1145; // Turn Off Bit
 23e7a42:	4a78      	ldr	r2, [pc, #480]	; (23e7c24 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e7a44:	6813      	ldr	r3, [r2, #0]
 23e7a46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  else {
    // Sensor offline but we our state has it online
    if (SI1145_exists == true) {
      SI1145_exists = false;
      Output ("SI OFFLINE");
      SystemStatusBits |= SSB_SI1145;  // Turn On Bit
 23e7a4a:	6013      	str	r3, [r2, #0]
    }   
  }

  // AS5600 Wind Direction
  if (I2C_Device_Exist (AS5600_ADR)) {
 23e7a4c:	4b80      	ldr	r3, [pc, #512]	; (23e7c50 <_Z17I2C_Check_Sensorsv+0x2e4>)
 23e7a4e:	7818      	ldrb	r0, [r3, #0]
 23e7a50:	f7fd fc13 	bl	23e527a <_Z16I2C_Device_Existh>
 23e7a54:	4b7f      	ldr	r3, [pc, #508]	; (23e7c54 <_Z17I2C_Check_Sensorsv+0x2e8>)
    // Sensor online but our state had it offline
    if (AS5600_exists == false) {
 23e7a56:	781a      	ldrb	r2, [r3, #0]
  if (I2C_Device_Exist (AS5600_ADR)) {
 23e7a58:	2800      	cmp	r0, #0
 23e7a5a:	f000 8131 	beq.w	23e7cc0 <_Z17I2C_Check_Sensorsv+0x354>
    if (AS5600_exists == false) {
 23e7a5e:	b94a      	cbnz	r2, 23e7a74 <_Z17I2C_Check_Sensorsv+0x108>
      AS5600_exists = true;
 23e7a60:	2201      	movs	r2, #1
      Output ("WD ONLINE");
 23e7a62:	487d      	ldr	r0, [pc, #500]	; (23e7c58 <_Z17I2C_Check_Sensorsv+0x2ec>)
      AS5600_exists = true;
 23e7a64:	701a      	strb	r2, [r3, #0]
      Output ("WD ONLINE");
 23e7a66:	f7fd fe11 	bl	23e568c <_Z6OutputPKc>
      SystemStatusBits &= ~SSB_AS5600; // Turn Off Bit
 23e7a6a:	4a6e      	ldr	r2, [pc, #440]	; (23e7c24 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e7a6c:	6813      	ldr	r3, [r2, #0]
 23e7a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  else {
    // Sensor offline but we our state has it online
    if (AS5600_exists == true) {
      AS5600_exists = false;
      Output ("WD OFFLINE");
      SystemStatusBits |= SSB_AS5600;  // Turn On Bit
 23e7a72:	6013      	str	r3, [r2, #0]
    }   
  }

  // VEML7700 Lux 
  if (I2C_Device_Exist (VEML7700_ADDRESS)) {
 23e7a74:	2010      	movs	r0, #16
 23e7a76:	f7fd fc00 	bl	23e527a <_Z16I2C_Device_Existh>
 23e7a7a:	4c78      	ldr	r4, [pc, #480]	; (23e7c5c <_Z17I2C_Check_Sensorsv+0x2f0>)
    // Sensor online but our state had it offline
    if (VEML7700_exists == false) {
 23e7a7c:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (VEML7700_ADDRESS)) {
 23e7a7e:	2800      	cmp	r0, #0
 23e7a80:	f000 812a 	beq.w	23e7cd8 <_Z17I2C_Check_Sensorsv+0x36c>
    if (VEML7700_exists == false) {
 23e7a84:	b983      	cbnz	r3, 23e7aa8 <_Z17I2C_Check_Sensorsv+0x13c>
      // See if we can bring sensor online
      if (veml.begin()) {
 23e7a86:	f012 f85d 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e7a8a:	4601      	mov	r1, r0
 23e7a8c:	4874      	ldr	r0, [pc, #464]	; (23e7c60 <_Z17I2C_Check_Sensorsv+0x2f4>)
 23e7a8e:	f009 ffd8 	bl	23f1a42 <_ZN17Adafruit_VEML77005beginEP7TwoWire>
 23e7a92:	b148      	cbz	r0, 23e7aa8 <_Z17I2C_Check_Sensorsv+0x13c>
        VEML7700_exists = true;
 23e7a94:	2301      	movs	r3, #1
        Output ("VLX ONLINE");
 23e7a96:	4873      	ldr	r0, [pc, #460]	; (23e7c64 <_Z17I2C_Check_Sensorsv+0x2f8>)
        VEML7700_exists = true;
 23e7a98:	7023      	strb	r3, [r4, #0]
        Output ("VLX ONLINE");
 23e7a9a:	f7fd fdf7 	bl	23e568c <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_VLX; // Turn Off Bit
 23e7a9e:	4a61      	ldr	r2, [pc, #388]	; (23e7c24 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e7aa0:	6813      	ldr	r3, [r2, #0]
 23e7aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
  else {
    // Sensor offline but we our state has it online
    if (VEML7700_exists == true) {
      VEML7700_exists = false;
      Output ("VLX OFFLINE");
      SystemStatusBits |= SSB_VLX;  // Turn On Bit
 23e7aa6:	6013      	str	r3, [r2, #0]
    }   
  }

  // PM25AQI
  if (I2C_Device_Exist (PM25AQI_ADDRESS)) {
 23e7aa8:	2012      	movs	r0, #18
 23e7aaa:	f7fd fbe6 	bl	23e527a <_Z16I2C_Device_Existh>
 23e7aae:	4c6e      	ldr	r4, [pc, #440]	; (23e7c68 <_Z17I2C_Check_Sensorsv+0x2fc>)
    // Sensor online but our state had it offline
    if (PM25AQI_exists == false) {
 23e7ab0:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (PM25AQI_ADDRESS)) {
 23e7ab2:	2800      	cmp	r0, #0
 23e7ab4:	f000 811c 	beq.w	23e7cf0 <_Z17I2C_Check_Sensorsv+0x384>
    if (PM25AQI_exists == false) {
 23e7ab8:	2b00      	cmp	r3, #0
 23e7aba:	f040 8123 	bne.w	23e7d04 <_Z17I2C_Check_Sensorsv+0x398>
      // See if we can bring sensor online
      if (pmaq.begin_I2C()) {
 23e7abe:	f012 f841 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e7ac2:	4601      	mov	r1, r0
 23e7ac4:	4869      	ldr	r0, [pc, #420]	; (23e7c6c <_Z17I2C_Check_Sensorsv+0x300>)
 23e7ac6:	f008 ffa6 	bl	23f0a16 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>
 23e7aca:	2800      	cmp	r0, #0
 23e7acc:	f000 811a 	beq.w	23e7d04 <_Z17I2C_Check_Sensorsv+0x398>
        PM25AQI_exists = true;
 23e7ad0:	2301      	movs	r3, #1
        Output ("PM ONLINE");
 23e7ad2:	4867      	ldr	r0, [pc, #412]	; (23e7c70 <_Z17I2C_Check_Sensorsv+0x304>)
        PM25AQI_exists = true;
 23e7ad4:	7023      	strb	r3, [r4, #0]
        Output ("PM ONLINE");
 23e7ad6:	f7fd fdd9 	bl	23e568c <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
 23e7ada:	4a52      	ldr	r2, [pc, #328]	; (23e7c24 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e7adc:	6813      	ldr	r3, [r2, #0]
 23e7ade:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 23e7ae2:	6013      	str	r3, [r2, #0]
      PM25AQI_exists = false;
      Output ("PM OFFLINE");
      SystemStatusBits |= SSB_PM25AQI;  // Turn On Bit
    }   
  }
}
 23e7ae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pm25aqi_clear();
 23e7ae8:	f7ff b8f8 	b.w	23e6cdc <_Z13pm25aqi_clearv>
      else if (BMX_1_chip_id == BME280_BMP390_CHIP_ID) {
 23e7aec:	2a60      	cmp	r2, #96	; 0x60
 23e7aee:	d127      	bne.n	23e7b40 <_Z17I2C_Check_Sensorsv+0x1d4>
        if (BMX_1_type == BMX_TYPE_BME280) {
 23e7af0:	4d60      	ldr	r5, [pc, #384]	; (23e7c74 <_Z17I2C_Check_Sensorsv+0x308>)
 23e7af2:	782b      	ldrb	r3, [r5, #0]
 23e7af4:	2b02      	cmp	r3, #2
 23e7af6:	d111      	bne.n	23e7b1c <_Z17I2C_Check_Sensorsv+0x1b0>
          if (bme1.begin(BMX_ADDRESS_1)) { 
 23e7af8:	f012 f824 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e7afc:	2177      	movs	r1, #119	; 0x77
 23e7afe:	4602      	mov	r2, r0
 23e7b00:	485d      	ldr	r0, [pc, #372]	; (23e7c78 <_Z17I2C_Check_Sensorsv+0x30c>)
 23e7b02:	f006 fe98 	bl	23ee836 <_ZN15Adafruit_BME2805beginEhP7TwoWire>
 23e7b06:	b148      	cbz	r0, 23e7b1c <_Z17I2C_Check_Sensorsv+0x1b0>
            BMX_1_exists = true;
 23e7b08:	2301      	movs	r3, #1
            Output ("BME1 ONLINE");
 23e7b0a:	485c      	ldr	r0, [pc, #368]	; (23e7c7c <_Z17I2C_Check_Sensorsv+0x310>)
            BMX_1_exists = true;
 23e7b0c:	7023      	strb	r3, [r4, #0]
            Output ("BME1 ONLINE");
 23e7b0e:	f7fd fdbd 	bl	23e568c <_Z6OutputPKc>
            SystemStatusBits &= ~SSB_BMX_1; // Turn Off Bit
 23e7b12:	4a44      	ldr	r2, [pc, #272]	; (23e7c24 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e7b14:	6813      	ldr	r3, [r2, #0]
 23e7b16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 23e7b1a:	6013      	str	r3, [r2, #0]
        if (BMX_1_type == BMX_TYPE_BMP390) {
 23e7b1c:	782b      	ldrb	r3, [r5, #0]
 23e7b1e:	2b04      	cmp	r3, #4
 23e7b20:	f47f af42 	bne.w	23e79a8 <_Z17I2C_Check_Sensorsv+0x3c>
          if (bm31.begin_I2C(BMX_ADDRESS_1)) {
 23e7b24:	f012 f80e 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e7b28:	2177      	movs	r1, #119	; 0x77
 23e7b2a:	4602      	mov	r2, r0
 23e7b2c:	4854      	ldr	r0, [pc, #336]	; (23e7c80 <_Z17I2C_Check_Sensorsv+0x314>)
 23e7b2e:	f007 fc79 	bl	23ef424 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e7b32:	2800      	cmp	r0, #0
 23e7b34:	f43f af38 	beq.w	23e79a8 <_Z17I2C_Check_Sensorsv+0x3c>
            BMX_1_exists = true;
 23e7b38:	2301      	movs	r3, #1
            Output ("BMP390_1 ONLINE");
 23e7b3a:	4852      	ldr	r0, [pc, #328]	; (23e7c84 <_Z17I2C_Check_Sensorsv+0x318>)
            BMX_1_exists = true;
 23e7b3c:	7023      	strb	r3, [r4, #0]
            Output ("BMP390_1 ONLINE");
 23e7b3e:	e72c      	b.n	23e799a <_Z17I2C_Check_Sensorsv+0x2e>
        if (bm31.begin_I2C(BMX_ADDRESS_1)) { 
 23e7b40:	f012 f800 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e7b44:	2177      	movs	r1, #119	; 0x77
 23e7b46:	4602      	mov	r2, r0
 23e7b48:	484d      	ldr	r0, [pc, #308]	; (23e7c80 <_Z17I2C_Check_Sensorsv+0x314>)
 23e7b4a:	f007 fc6b 	bl	23ef424 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e7b4e:	2800      	cmp	r0, #0
 23e7b50:	f43f af2a 	beq.w	23e79a8 <_Z17I2C_Check_Sensorsv+0x3c>
          BMX_1_exists = true;
 23e7b54:	2301      	movs	r3, #1
          Output ("BM31 ONLINE");
 23e7b56:	484c      	ldr	r0, [pc, #304]	; (23e7c88 <_Z17I2C_Check_Sensorsv+0x31c>)
          BMX_1_exists = true;
 23e7b58:	7023      	strb	r3, [r4, #0]
          Output ("BM31 ONLINE");
 23e7b5a:	e71e      	b.n	23e799a <_Z17I2C_Check_Sensorsv+0x2e>
    if (BMX_1_exists == true) {
 23e7b5c:	2b00      	cmp	r3, #0
 23e7b5e:	f43f af23 	beq.w	23e79a8 <_Z17I2C_Check_Sensorsv+0x3c>
      BMX_1_exists = false;
 23e7b62:	7020      	strb	r0, [r4, #0]
      Output ("BMX1 OFFLINE");
 23e7b64:	4849      	ldr	r0, [pc, #292]	; (23e7c8c <_Z17I2C_Check_Sensorsv+0x320>)
 23e7b66:	f7fd fd91 	bl	23e568c <_Z6OutputPKc>
      SystemStatusBits |= SSB_BMX_1;  // Turn On Bit 
 23e7b6a:	4a2e      	ldr	r2, [pc, #184]	; (23e7c24 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e7b6c:	6813      	ldr	r3, [r2, #0]
 23e7b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 23e7b72:	e718      	b.n	23e79a6 <_Z17I2C_Check_Sensorsv+0x3a>
      else if (BMX_2_chip_id == BME280_BMP390_CHIP_ID) {
 23e7b74:	2a60      	cmp	r2, #96	; 0x60
 23e7b76:	d127      	bne.n	23e7bc8 <_Z17I2C_Check_Sensorsv+0x25c>
        if (BMX_2_type == BMX_TYPE_BME280) {
 23e7b78:	4e45      	ldr	r6, [pc, #276]	; (23e7c90 <_Z17I2C_Check_Sensorsv+0x324>)
 23e7b7a:	7833      	ldrb	r3, [r6, #0]
 23e7b7c:	2b02      	cmp	r3, #2
 23e7b7e:	d111      	bne.n	23e7ba4 <_Z17I2C_Check_Sensorsv+0x238>
          if (bme1.begin(BMX_ADDRESS_2)) { 
 23e7b80:	f011 ffe0 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e7b84:	2176      	movs	r1, #118	; 0x76
 23e7b86:	4602      	mov	r2, r0
 23e7b88:	483b      	ldr	r0, [pc, #236]	; (23e7c78 <_Z17I2C_Check_Sensorsv+0x30c>)
 23e7b8a:	f006 fe54 	bl	23ee836 <_ZN15Adafruit_BME2805beginEhP7TwoWire>
 23e7b8e:	b148      	cbz	r0, 23e7ba4 <_Z17I2C_Check_Sensorsv+0x238>
            BMX_2_exists = true;
 23e7b90:	2301      	movs	r3, #1
            Output ("BME2 ONLINE");
 23e7b92:	4840      	ldr	r0, [pc, #256]	; (23e7c94 <_Z17I2C_Check_Sensorsv+0x328>)
            BMX_2_exists = true;
 23e7b94:	702b      	strb	r3, [r5, #0]
            Output ("BME2 ONLINE");
 23e7b96:	f7fd fd79 	bl	23e568c <_Z6OutputPKc>
            SystemStatusBits &= ~SSB_BMX_2; // Turn Off Bit
 23e7b9a:	4a22      	ldr	r2, [pc, #136]	; (23e7c24 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e7b9c:	6813      	ldr	r3, [r2, #0]
 23e7b9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 23e7ba2:	6013      	str	r3, [r2, #0]
        if (BMX_2_type == BMX_TYPE_BMP390) {
 23e7ba4:	7833      	ldrb	r3, [r6, #0]
 23e7ba6:	2b04      	cmp	r3, #4
 23e7ba8:	f47f af1b 	bne.w	23e79e2 <_Z17I2C_Check_Sensorsv+0x76>
          if (bm31.begin_I2C(BMX_ADDRESS_2)) {
 23e7bac:	f011 ffca 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e7bb0:	2176      	movs	r1, #118	; 0x76
 23e7bb2:	4602      	mov	r2, r0
 23e7bb4:	4832      	ldr	r0, [pc, #200]	; (23e7c80 <_Z17I2C_Check_Sensorsv+0x314>)
 23e7bb6:	f007 fc35 	bl	23ef424 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e7bba:	2800      	cmp	r0, #0
 23e7bbc:	f43f af11 	beq.w	23e79e2 <_Z17I2C_Check_Sensorsv+0x76>
            BMX_1_exists = true;
 23e7bc0:	2301      	movs	r3, #1
            Output ("BMP390_1 ONLINE");
 23e7bc2:	4830      	ldr	r0, [pc, #192]	; (23e7c84 <_Z17I2C_Check_Sensorsv+0x318>)
            BMX_1_exists = true;
 23e7bc4:	7023      	strb	r3, [r4, #0]
            Output ("BMP390_1 ONLINE");
 23e7bc6:	e705      	b.n	23e79d4 <_Z17I2C_Check_Sensorsv+0x68>
         if (bm32.begin_I2C(BMX_ADDRESS_2)) { 
 23e7bc8:	f011 ffbc 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23e7bcc:	2176      	movs	r1, #118	; 0x76
 23e7bce:	4602      	mov	r2, r0
 23e7bd0:	4831      	ldr	r0, [pc, #196]	; (23e7c98 <_Z17I2C_Check_Sensorsv+0x32c>)
 23e7bd2:	f007 fc27 	bl	23ef424 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
 23e7bd6:	2800      	cmp	r0, #0
 23e7bd8:	f43f af03 	beq.w	23e79e2 <_Z17I2C_Check_Sensorsv+0x76>
          BMX_2_exists = true;
 23e7bdc:	2301      	movs	r3, #1
          Output ("BM32 ONLINE");
 23e7bde:	482f      	ldr	r0, [pc, #188]	; (23e7c9c <_Z17I2C_Check_Sensorsv+0x330>)
          BMX_2_exists = true;
 23e7be0:	702b      	strb	r3, [r5, #0]
          Output ("BM32 ONLINE");
 23e7be2:	e6f7      	b.n	23e79d4 <_Z17I2C_Check_Sensorsv+0x68>
    if (BMX_2_exists == true) {
 23e7be4:	2b00      	cmp	r3, #0
 23e7be6:	f43f aefc 	beq.w	23e79e2 <_Z17I2C_Check_Sensorsv+0x76>
      BMX_2_exists = false;
 23e7bea:	7028      	strb	r0, [r5, #0]
      Output ("BMX2 OFFLINE");
 23e7bec:	482c      	ldr	r0, [pc, #176]	; (23e7ca0 <_Z17I2C_Check_Sensorsv+0x334>)
 23e7bee:	f7fd fd4d 	bl	23e568c <_Z6OutputPKc>
      SystemStatusBits |= SSB_BMX_2;  // Turn On Bit 
 23e7bf2:	4a0c      	ldr	r2, [pc, #48]	; (23e7c24 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e7bf4:	6813      	ldr	r3, [r2, #0]
 23e7bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 23e7bfa:	e6f1      	b.n	23e79e0 <_Z17I2C_Check_Sensorsv+0x74>
    if (HTU21DF_exists == true) {
 23e7bfc:	2b00      	cmp	r3, #0
 23e7bfe:	f43f af0a 	beq.w	23e7a16 <_Z17I2C_Check_Sensorsv+0xaa>
      HTU21DF_exists = false;
 23e7c02:	7020      	strb	r0, [r4, #0]
      Output ("HTU OFFLINE");
 23e7c04:	4827      	ldr	r0, [pc, #156]	; (23e7ca4 <_Z17I2C_Check_Sensorsv+0x338>)
 23e7c06:	f7fd fd41 	bl	23e568c <_Z6OutputPKc>
      SystemStatusBits |= SSB_HTU21DF;  // Turn On Bit
 23e7c0a:	4a06      	ldr	r2, [pc, #24]	; (23e7c24 <_Z17I2C_Check_Sensorsv+0x2b8>)
 23e7c0c:	6813      	ldr	r3, [r2, #0]
 23e7c0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 23e7c12:	e6ff      	b.n	23e7a14 <_Z17I2C_Check_Sensorsv+0xa8>
 23e7c14:	1006a282 	.word	0x1006a282
 23e7c18:	1006a281 	.word	0x1006a281
 23e7c1c:	1006abf8 	.word	0x1006abf8
 23e7c20:	023fd3a8 	.word	0x023fd3a8
 23e7c24:	1006a178 	.word	0x1006a178
 23e7c28:	1006a285 	.word	0x1006a285
 23e7c2c:	1006a284 	.word	0x1006a284
 23e7c30:	1006ac38 	.word	0x1006ac38
 23e7c34:	023fd3e9 	.word	0x023fd3e9
 23e7c38:	1006a2b0 	.word	0x1006a2b0
 23e7c3c:	1006ae90 	.word	0x1006ae90
 23e7c40:	023fd41a 	.word	0x023fd41a
 23e7c44:	1006a7d6 	.word	0x1006a7d6
 23e7c48:	1007ac18 	.word	0x1007ac18
 23e7c4c:	023fd431 	.word	0x023fd431
 23e7c50:	1006a0f4 	.word	0x1006a0f4
 23e7c54:	1006a0f8 	.word	0x1006a0f8
 23e7c58:	023fd446 	.word	0x023fd446
 23e7c5c:	1006a7e8 	.word	0x1006a7e8
 23e7c60:	1007ac20 	.word	0x1007ac20
 23e7c64:	023fd45b 	.word	0x023fd45b
 23e7c68:	1006a2cd 	.word	0x1006a2cd
 23e7c6c:	1007aa30 	.word	0x1007aa30
 23e7c70:	023fd472 	.word	0x023fd472
 23e7c74:	1006a283 	.word	0x1006a283
 23e7c78:	1006ab48 	.word	0x1006ab48
 23e7c7c:	023fd3b4 	.word	0x023fd3b4
 23e7c80:	1006a948 	.word	0x1006a948
 23e7c84:	023fd3c0 	.word	0x023fd3c0
 23e7c88:	023fd3d0 	.word	0x023fd3d0
 23e7c8c:	023fd3dc 	.word	0x023fd3dc
 23e7c90:	1006a286 	.word	0x1006a286
 23e7c94:	023fd3f5 	.word	0x023fd3f5
 23e7c98:	1006aa48 	.word	0x1006aa48
 23e7c9c:	023fd401 	.word	0x023fd401
 23e7ca0:	023fd40d 	.word	0x023fd40d
 23e7ca4:	023fd425 	.word	0x023fd425
    if (SI1145_exists == true) {
 23e7ca8:	2b00      	cmp	r3, #0
 23e7caa:	f43f aecf 	beq.w	23e7a4c <_Z17I2C_Check_Sensorsv+0xe0>
      SI1145_exists = false;
 23e7cae:	7020      	strb	r0, [r4, #0]
      Output ("SI OFFLINE");
 23e7cb0:	4815      	ldr	r0, [pc, #84]	; (23e7d08 <_Z17I2C_Check_Sensorsv+0x39c>)
 23e7cb2:	f7fd fceb 	bl	23e568c <_Z6OutputPKc>
      SystemStatusBits |= SSB_SI1145;  // Turn On Bit
 23e7cb6:	4a15      	ldr	r2, [pc, #84]	; (23e7d0c <_Z17I2C_Check_Sensorsv+0x3a0>)
 23e7cb8:	6813      	ldr	r3, [r2, #0]
 23e7cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 23e7cbe:	e6c4      	b.n	23e7a4a <_Z17I2C_Check_Sensorsv+0xde>
    if (AS5600_exists == true) {
 23e7cc0:	2a00      	cmp	r2, #0
 23e7cc2:	f43f aed7 	beq.w	23e7a74 <_Z17I2C_Check_Sensorsv+0x108>
      AS5600_exists = false;
 23e7cc6:	7018      	strb	r0, [r3, #0]
      Output ("WD OFFLINE");
 23e7cc8:	4811      	ldr	r0, [pc, #68]	; (23e7d10 <_Z17I2C_Check_Sensorsv+0x3a4>)
 23e7cca:	f7fd fcdf 	bl	23e568c <_Z6OutputPKc>
      SystemStatusBits |= SSB_AS5600;  // Turn On Bit
 23e7cce:	4a0f      	ldr	r2, [pc, #60]	; (23e7d0c <_Z17I2C_Check_Sensorsv+0x3a0>)
 23e7cd0:	6813      	ldr	r3, [r2, #0]
 23e7cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 23e7cd6:	e6cc      	b.n	23e7a72 <_Z17I2C_Check_Sensorsv+0x106>
    if (VEML7700_exists == true) {
 23e7cd8:	2b00      	cmp	r3, #0
 23e7cda:	f43f aee5 	beq.w	23e7aa8 <_Z17I2C_Check_Sensorsv+0x13c>
      VEML7700_exists = false;
 23e7cde:	7020      	strb	r0, [r4, #0]
      Output ("VLX OFFLINE");
 23e7ce0:	480c      	ldr	r0, [pc, #48]	; (23e7d14 <_Z17I2C_Check_Sensorsv+0x3a8>)
 23e7ce2:	f7fd fcd3 	bl	23e568c <_Z6OutputPKc>
      SystemStatusBits |= SSB_VLX;  // Turn On Bit
 23e7ce6:	4a09      	ldr	r2, [pc, #36]	; (23e7d0c <_Z17I2C_Check_Sensorsv+0x3a0>)
 23e7ce8:	6813      	ldr	r3, [r2, #0]
 23e7cea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 23e7cee:	e6da      	b.n	23e7aa6 <_Z17I2C_Check_Sensorsv+0x13a>
    if (PM25AQI_exists == true) {
 23e7cf0:	b143      	cbz	r3, 23e7d04 <_Z17I2C_Check_Sensorsv+0x398>
      PM25AQI_exists = false;
 23e7cf2:	7020      	strb	r0, [r4, #0]
      Output ("PM OFFLINE");
 23e7cf4:	4808      	ldr	r0, [pc, #32]	; (23e7d18 <_Z17I2C_Check_Sensorsv+0x3ac>)
 23e7cf6:	f7fd fcc9 	bl	23e568c <_Z6OutputPKc>
      SystemStatusBits |= SSB_PM25AQI;  // Turn On Bit
 23e7cfa:	4a04      	ldr	r2, [pc, #16]	; (23e7d0c <_Z17I2C_Check_Sensorsv+0x3a0>)
 23e7cfc:	6813      	ldr	r3, [r2, #0]
 23e7cfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 23e7d02:	6013      	str	r3, [r2, #0]
}
 23e7d04:	bd70      	pop	{r4, r5, r6, pc}
 23e7d06:	bf00      	nop
 23e7d08:	023fd43b 	.word	0x023fd43b
 23e7d0c:	1006a178 	.word	0x1006a178
 23e7d10:	023fd450 	.word	0x023fd450
 23e7d14:	023fd466 	.word	0x023fd466
 23e7d18:	023fd238 	.word	0x023fd238

023e7d1c <_Z22EEPROM_ChecksumComputev>:
 *=======================================================================================================================
 */
unsigned long EEPROM_ChecksumCompute() {
  unsigned long checksum=0;

  checksum += (unsigned long) eeprom.rgt1;
 23e7d1c:	4910      	ldr	r1, [pc, #64]	; (23e7d60 <_Z22EEPROM_ChecksumComputev+0x44>)
 23e7d1e:	edd1 7a00 	vldr	s15, [r1]
 23e7d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23e7d26:	ee17 0a90 	vmov	r0, s15
  checksum += (unsigned long) eeprom.rgp1;
 23e7d2a:	edd1 7a01 	vldr	s15, [r1, #4]
 23e7d2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23e7d32:	ee17 2a90 	vmov	r2, s15
  checksum += (unsigned long) eeprom.rgt2;
 23e7d36:	edd1 7a02 	vldr	s15, [r1, #8]
 23e7d3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  checksum += (unsigned long) eeprom.rgp1;
 23e7d3e:	4410      	add	r0, r2
 23e7d40:	694a      	ldr	r2, [r1, #20]
 23e7d42:	4402      	add	r2, r0
  checksum += (unsigned long) eeprom.rgt2;
 23e7d44:	ee17 0a90 	vmov	r0, s15
  checksum += (unsigned long) eeprom.rgp2;
 23e7d48:	edd1 7a03 	vldr	s15, [r1, #12]
 23e7d4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23e7d50:	ee17 3a90 	vmov	r3, s15
 23e7d54:	4410      	add	r0, r2
 23e7d56:	4403      	add	r3, r0
  checksum += (unsigned long) eeprom.rgts;
  checksum += (unsigned long) eeprom.n2sfp;
 23e7d58:	6908      	ldr	r0, [r1, #16]
  return (checksum);
}
 23e7d5a:	4418      	add	r0, r3
 23e7d5c:	4770      	bx	lr
 23e7d5e:	bf00      	nop
 23e7d60:	1006ae5c 	.word	0x1006ae5c

023e7d64 <_Z21EEPROM_ChecksumUpdatev>:
/* 
 *=======================================================================================================================
 * EEPROM_ChecksumUpdate()
 *=======================================================================================================================
 */
void EEPROM_ChecksumUpdate() {
 23e7d64:	b508      	push	{r3, lr}
  eeprom.checksum = EEPROM_ChecksumCompute();
 23e7d66:	f7ff ffd9 	bl	23e7d1c <_Z22EEPROM_ChecksumComputev>
 23e7d6a:	4b01      	ldr	r3, [pc, #4]	; (23e7d70 <_Z21EEPROM_ChecksumUpdatev+0xc>)
 23e7d6c:	6198      	str	r0, [r3, #24]
}
 23e7d6e:	bd08      	pop	{r3, pc}
 23e7d70:	1006ae5c 	.word	0x1006ae5c

023e7d74 <_Z12EEPROM_Resetl.part.0>:
 *                  Requires system clock to be valid
 *=======================================================================================================================
 */
void EEPROM_Reset(time32_t current_time) {
  if (Time.isValid()) {
    eeprom.rgt1 = 0.0;
 23e7d74:	2300      	movs	r3, #0
void EEPROM_Reset(time32_t current_time) {
 23e7d76:	b510      	push	{r4, lr}
    eeprom.rgt1 = 0.0;
 23e7d78:	4c09      	ldr	r4, [pc, #36]	; (23e7da0 <_Z12EEPROM_Resetl.part.0+0x2c>)
 23e7d7a:	6023      	str	r3, [r4, #0]
    eeprom.rgp1 = 0.0;
 23e7d7c:	6063      	str	r3, [r4, #4]
    eeprom.rgt2 = 0.0;
 23e7d7e:	60a3      	str	r3, [r4, #8]
    eeprom.rgp2 = 0.0;
 23e7d80:	60e3      	str	r3, [r4, #12]
    eeprom.rgts = current_time;
    eeprom.n2sfp = 0;
 23e7d82:	2300      	movs	r3, #0
    eeprom.rgts = current_time;
 23e7d84:	6120      	str	r0, [r4, #16]
    eeprom.n2sfp = 0;
 23e7d86:	6163      	str	r3, [r4, #20]
    EEPROM_ChecksumUpdate();
 23e7d88:	f7ff ffec 	bl	23e7d64 <_Z21EEPROM_ChecksumUpdatev>
    EEPROM.put(eeprom_address, eeprom);
 23e7d8c:	f011 fea6 	bl	23f9adc <_Z21__fetch_global_EEPROMv>
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        static_assert(!std::is_base_of_v<String, T>, "String class cannot be used with EEPROM, use char[] array");
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 23e7d90:	4b04      	ldr	r3, [pc, #16]	; (23e7da4 <_Z12EEPROM_Resetl.part.0+0x30>)
 23e7d92:	4621      	mov	r1, r4
  }
  else {
    Output("EEPROM RESET ERROR");
  }
}
 23e7d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23e7d98:	221c      	movs	r2, #28
 23e7d9a:	6818      	ldr	r0, [r3, #0]
 23e7d9c:	f00e bd28 	b.w	23f67f0 <HAL_EEPROM_Put>
 23e7da0:	1006ae5c 	.word	0x1006ae5c
 23e7da4:	1006ae78 	.word	0x1006ae78

023e7da8 <_Z20EEPROM_ChecksumValidv>:
bool EEPROM_ChecksumValid() {
 23e7da8:	b508      	push	{r3, lr}
  unsigned long checksum = EEPROM_ChecksumCompute();
 23e7daa:	f7ff ffb7 	bl	23e7d1c <_Z22EEPROM_ChecksumComputev>
  if (checksum == eeprom.checksum) {
 23e7dae:	4b03      	ldr	r3, [pc, #12]	; (23e7dbc <_Z20EEPROM_ChecksumValidv+0x14>)
 23e7db0:	699b      	ldr	r3, [r3, #24]
}
 23e7db2:	1a1b      	subs	r3, r3, r0
 23e7db4:	4258      	negs	r0, r3
 23e7db6:	4158      	adcs	r0, r3
 23e7db8:	bd08      	pop	{r3, pc}
 23e7dba:	bf00      	nop
 23e7dbc:	1006ae5c 	.word	0x1006ae5c

023e7dc0 <_Z22EEPROM_ClearRainTotalsl>:
 *=======================================================================================================================
 * EEPROM_ClearRainTotals() - Reset to default values
 *                           Requires system clock to be valid
 *=======================================================================================================================
 */
void EEPROM_ClearRainTotals(time32_t current_time) {
 23e7dc0:	b510      	push	{r4, lr}
 23e7dc2:	4604      	mov	r4, r0
  if (Time.isValid()) {
 23e7dc4:	f011 faa8 	bl	23f9318 <_ZN9TimeClass7isValidEv>
 23e7dc8:	b120      	cbz	r0, 23e7dd4 <_Z22EEPROM_ClearRainTotalsl+0x14>
 23e7dca:	4620      	mov	r0, r4
    EEPROM.put(eeprom_address, eeprom);
  }
  else {
    Output("EEPROM CLEAR ERROR");
  }
}
 23e7dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23e7dd0:	f7ff bfd0 	b.w	23e7d74 <_Z12EEPROM_Resetl.part.0>
    Output("EEPROM CLEAR ERROR");
 23e7dd4:	4802      	ldr	r0, [pc, #8]	; (23e7de0 <_Z22EEPROM_ClearRainTotalsl+0x20>)
}
 23e7dd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Output("EEPROM CLEAR ERROR");
 23e7dda:	f7fd bc57 	b.w	23e568c <_Z6OutputPKc>
 23e7dde:	bf00      	nop
 23e7de0:	023fd47c 	.word	0x023fd47c

023e7de4 <_Z23EEPROM_ClearRain2Totalsv>:
 * EEPROM_ClearRain2Totals() - Reset Rain 2 Totals
 *                             Requires system clock to be valid
 *=======================================================================================================================
 */
void EEPROM_ClearRain2Totals() {
  eeprom.rgt2 = 0.0;
 23e7de4:	2300      	movs	r3, #0
void EEPROM_ClearRain2Totals() {
 23e7de6:	b510      	push	{r4, lr}
  eeprom.rgt2 = 0.0;
 23e7de8:	4c07      	ldr	r4, [pc, #28]	; (23e7e08 <_Z23EEPROM_ClearRain2Totalsv+0x24>)
 23e7dea:	60a3      	str	r3, [r4, #8]
  eeprom.rgp2 = 0.0;
 23e7dec:	60e3      	str	r3, [r4, #12]
  EEPROM_ChecksumUpdate();
 23e7dee:	f7ff ffb9 	bl	23e7d64 <_Z21EEPROM_ChecksumUpdatev>
  EEPROM.put(eeprom_address, eeprom);
 23e7df2:	f011 fe73 	bl	23f9adc <_Z21__fetch_global_EEPROMv>
 23e7df6:	4b05      	ldr	r3, [pc, #20]	; (23e7e0c <_Z23EEPROM_ClearRain2Totalsv+0x28>)
 23e7df8:	4621      	mov	r1, r4
}
 23e7dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23e7dfe:	221c      	movs	r2, #28
 23e7e00:	6818      	ldr	r0, [r3, #0]
 23e7e02:	f00e bcf5 	b.w	23f67f0 <HAL_EEPROM_Put>
 23e7e06:	bf00      	nop
 23e7e08:	1006ae5c 	.word	0x1006ae5c
 23e7e0c:	1006ae78 	.word	0x1006ae78

023e7e10 <_Z17EEPROM_Initializev>:
 *=======================================================================================================================
 * EEPROM_Initialize() - Check status of EEPROM information and determine status
 *                       Requires system clock to be valid
 *=======================================================================================================================
 */
void EEPROM_Initialize() {
 23e7e10:	b570      	push	{r4, r5, r6, lr}
  if (Time.isValid()) {
 23e7e12:	f011 fa81 	bl	23f9318 <_ZN9TimeClass7isValidEv>
 23e7e16:	2800      	cmp	r0, #0
 23e7e18:	d062      	beq.n	23e7ee0 <_Z17EEPROM_Initializev+0xd0>
    time32_t current_time = Time.now();
 23e7e1a:	f011 fa9a 	bl	23f9352 <_ZN9TimeClass3nowEv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 23e7e1e:	4c33      	ldr	r4, [pc, #204]	; (23e7eec <_Z17EEPROM_Initializev+0xdc>)

    EEPROM.get(eeprom_address, eeprom);
 23e7e20:	4e33      	ldr	r6, [pc, #204]	; (23e7ef0 <_Z17EEPROM_Initializev+0xe0>)
    time32_t current_time = Time.now();
 23e7e22:	4605      	mov	r5, r0
    EEPROM.get(eeprom_address, eeprom);
 23e7e24:	f011 fe5a 	bl	23f9adc <_Z21__fetch_global_EEPROMv>
 23e7e28:	221c      	movs	r2, #28
 23e7e2a:	4621      	mov	r1, r4
 23e7e2c:	6830      	ldr	r0, [r6, #0]
 23e7e2e:	f00e fcd1 	bl	23f67d4 <HAL_EEPROM_Get>

    if (!EEPROM_ChecksumValid()) {
 23e7e32:	f7ff ffb9 	bl	23e7da8 <_Z20EEPROM_ChecksumValidv>
 23e7e36:	b918      	cbnz	r0, 23e7e40 <_Z17EEPROM_Initializev+0x30>
          EEPROM.put(eeprom_address, eeprom);
        }
        else {
          // if current time is before 6am and RT time before 6am 2 days ago - EEPROM has no valid data - clear EEPROM
          Output("T<6, RT<6 && RT<=6-2d - Clear");  
          EEPROM_ClearRainTotals(current_time);
 23e7e38:	4628      	mov	r0, r5
 23e7e3a:	f7ff ffc1 	bl	23e7dc0 <_Z22EEPROM_ClearRainTotalsl>
 23e7e3e:	e02b      	b.n	23e7e98 <_Z17EEPROM_Initializev+0x88>
      time32_t seconds_today        = current_time % 86400;
 23e7e40:	4a2c      	ldr	r2, [pc, #176]	; (23e7ef4 <_Z17EEPROM_Initializev+0xe4>)
 23e7e42:	fb95 f3f2 	sdiv	r3, r5, r2
 23e7e46:	fb02 5313 	mls	r3, r2, r3, r5
      time32_t seconds_at_0000      = current_time - seconds_today;
 23e7e4a:	1aeb      	subs	r3, r5, r3
      time32_t seconds_at_0600      = seconds_at_0000 + 21600;
 23e7e4c:	f503 40a8 	add.w	r0, r3, #21504	; 0x5400
 23e7e50:	3060      	adds	r0, #96	; 0x60
      time32_t seconds_yesterday_at_0600 = seconds_at_0600 - 86400;
 23e7e52:	f5a3 417d 	sub.w	r1, r3, #64768	; 0xfd00
      if ((current_time > seconds_at_0600) && (eeprom.rgts > seconds_at_0600)) {
 23e7e56:	4285      	cmp	r5, r0
 23e7e58:	6922      	ldr	r2, [r4, #16]
      time32_t seconds_yesterday_at_0600 = seconds_at_0600 - 86400;
 23e7e5a:	f1a1 0120 	sub.w	r1, r1, #32
      if ((current_time > seconds_at_0600) && (eeprom.rgts > seconds_at_0600)) {
 23e7e5e:	dd1f      	ble.n	23e7ea0 <_Z17EEPROM_Initializev+0x90>
 23e7e60:	4290      	cmp	r0, r2
 23e7e62:	da03      	bge.n	23e7e6c <_Z17EEPROM_Initializev+0x5c>
        Output("T>6, RT>6 - OK");
 23e7e64:	4824      	ldr	r0, [pc, #144]	; (23e7ef8 <_Z17EEPROM_Initializev+0xe8>)
          Output("T<6, RT<6 & RT>6 Yesterday - OK");
 23e7e66:	f7fd fc11 	bl	23e568c <_Z6OutputPKc>
 23e7e6a:	e00b      	b.n	23e7e84 <_Z17EEPROM_Initializev+0x74>
      else if ((current_time > seconds_at_0600) && (eeprom.rgts <= seconds_at_0600) && (eeprom.rgts > seconds_yesterday_at_0600)){
 23e7e6c:	4291      	cmp	r1, r2
 23e7e6e:	da1b      	bge.n	23e7ea8 <_Z17EEPROM_Initializev+0x98>
          Output("T>6, RT<=6 &&  RT>6Y- Move");  
 23e7e70:	4822      	ldr	r0, [pc, #136]	; (23e7efc <_Z17EEPROM_Initializev+0xec>)
 23e7e72:	f7fd fc0b 	bl	23e568c <_Z6OutputPKc>
          eeprom.rgp1 = eeprom.rgt1;
 23e7e76:	6823      	ldr	r3, [r4, #0]
          eeprom.rgp2 = eeprom.rgt2;
 23e7e78:	68a2      	ldr	r2, [r4, #8]
          eeprom.rgp1 = eeprom.rgt1;
 23e7e7a:	6063      	str	r3, [r4, #4]
          eeprom.rgt1 = 0.0;
 23e7e7c:	2300      	movs	r3, #0
          eeprom.rgp2 = eeprom.rgt2;
 23e7e7e:	60e2      	str	r2, [r4, #12]
          eeprom.rgt1 = 0.0;
 23e7e80:	6023      	str	r3, [r4, #0]
          eeprom.rgt2 = 0.0;
 23e7e82:	60a3      	str	r3, [r4, #8]
          eeprom.rgts = current_time;
 23e7e84:	6125      	str	r5, [r4, #16]
          EEPROM_ChecksumUpdate();
 23e7e86:	f7ff ff6d 	bl	23e7d64 <_Z21EEPROM_ChecksumUpdatev>
          EEPROM.put(eeprom_address, eeprom);          
 23e7e8a:	f011 fe27 	bl	23f9adc <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 23e7e8e:	221c      	movs	r2, #28
 23e7e90:	4621      	mov	r1, r4
 23e7e92:	6830      	ldr	r0, [r6, #0]
 23e7e94:	f00e fcac 	bl	23f67f0 <HAL_EEPROM_Put>
        }
      }
    }
    eeprom_valid = true;
 23e7e98:	2201      	movs	r2, #1
 23e7e9a:	4b19      	ldr	r3, [pc, #100]	; (23e7f00 <_Z17EEPROM_Initializev+0xf0>)
 23e7e9c:	701a      	strb	r2, [r3, #0]
  }
  else {
    Output("EEPROM INIT ERROR");
  }
}
 23e7e9e:	bd70      	pop	{r4, r5, r6, pc}
        if (eeprom.rgts > seconds_yesterday_at_0600) {
 23e7ea0:	4291      	cmp	r1, r2
 23e7ea2:	da01      	bge.n	23e7ea8 <_Z17EEPROM_Initializev+0x98>
          Output("T<6, RT<6 & RT>6 Yesterday - OK");
 23e7ea4:	4817      	ldr	r0, [pc, #92]	; (23e7f04 <_Z17EEPROM_Initializev+0xf4>)
 23e7ea6:	e7de      	b.n	23e7e66 <_Z17EEPROM_Initializev+0x56>
        else if (eeprom.rgts > (seconds_yesterday_at_0600 - 84600)) { 
 23e7ea8:	f5a3 3311 	sub.w	r3, r3, #148480	; 0x24400
 23e7eac:	f2a3 3397 	subw	r3, r3, #919	; 0x397
 23e7eb0:	429a      	cmp	r2, r3
 23e7eb2:	db11      	blt.n	23e7ed8 <_Z17EEPROM_Initializev+0xc8>
          Output("T<6, RT<6 && RT>6-2d - Move");  
 23e7eb4:	4814      	ldr	r0, [pc, #80]	; (23e7f08 <_Z17EEPROM_Initializev+0xf8>)
 23e7eb6:	f7fd fbe9 	bl	23e568c <_Z6OutputPKc>
          eeprom.rgp1 = eeprom.rgt1;
 23e7eba:	6823      	ldr	r3, [r4, #0]
          eeprom.rgp2 = eeprom.rgt2;
 23e7ebc:	68a2      	ldr	r2, [r4, #8]
          eeprom.rgp1 = eeprom.rgt1;
 23e7ebe:	6063      	str	r3, [r4, #4]
          eeprom.rgt1 = 0.0;
 23e7ec0:	2300      	movs	r3, #0
          eeprom.rgp2 = eeprom.rgt2;
 23e7ec2:	60e2      	str	r2, [r4, #12]
          eeprom.rgt1 = 0.0;
 23e7ec4:	6023      	str	r3, [r4, #0]
          eeprom.rgt2 = 0.0;
 23e7ec6:	60a3      	str	r3, [r4, #8]
          eeprom.rgts = current_time;
 23e7ec8:	6125      	str	r5, [r4, #16]
          EEPROM_ChecksumUpdate();
 23e7eca:	f7ff ff4b 	bl	23e7d64 <_Z21EEPROM_ChecksumUpdatev>
          EEPROM.put(eeprom_address, eeprom);
 23e7ece:	f011 fe05 	bl	23f9adc <_Z21__fetch_global_EEPROMv>
 23e7ed2:	221c      	movs	r2, #28
 23e7ed4:	4905      	ldr	r1, [pc, #20]	; (23e7eec <_Z17EEPROM_Initializev+0xdc>)
 23e7ed6:	e7dc      	b.n	23e7e92 <_Z17EEPROM_Initializev+0x82>
          Output("T<6, RT<6 && RT<=6-2d - Clear");  
 23e7ed8:	480c      	ldr	r0, [pc, #48]	; (23e7f0c <_Z17EEPROM_Initializev+0xfc>)
 23e7eda:	f7fd fbd7 	bl	23e568c <_Z6OutputPKc>
 23e7ede:	e7ab      	b.n	23e7e38 <_Z17EEPROM_Initializev+0x28>
    Output("EEPROM INIT ERROR");
 23e7ee0:	480b      	ldr	r0, [pc, #44]	; (23e7f10 <_Z17EEPROM_Initializev+0x100>)
}
 23e7ee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Output("EEPROM INIT ERROR");
 23e7ee6:	f7fd bbd1 	b.w	23e568c <_Z6OutputPKc>
 23e7eea:	bf00      	nop
 23e7eec:	1006ae5c 	.word	0x1006ae5c
 23e7ef0:	1006ae78 	.word	0x1006ae78
 23e7ef4:	00015180 	.word	0x00015180
 23e7ef8:	023fd48f 	.word	0x023fd48f
 23e7efc:	023fd49e 	.word	0x023fd49e
 23e7f00:	1006ae7c 	.word	0x1006ae7c
 23e7f04:	023fd4b9 	.word	0x023fd4b9
 23e7f08:	023fd4d9 	.word	0x023fd4d9
 23e7f0c:	023fd4f5 	.word	0x023fd4f5
 23e7f10:	023fd513 	.word	0x023fd513

023e7f14 <_Z23EEPROM_UpdateRainTotalsff>:
/* 
 *=======================================================================================================================
 * EEPROM_UpdateRainTotals() - 
 *=======================================================================================================================
 */
void EEPROM_UpdateRainTotals(float rgt1, float rgt2) {
 23e7f14:	b510      	push	{r4, lr}
 23e7f16:	ed2d 8b02 	vpush	{d8}
  if (eeprom_valid) {
 23e7f1a:	4b2f      	ldr	r3, [pc, #188]	; (23e7fd8 <_Z23EEPROM_UpdateRainTotalsff+0xc4>)
void EEPROM_UpdateRainTotals(float rgt1, float rgt2) {
 23e7f1c:	eeb0 8a40 	vmov.f32	s16, s0
  if (eeprom_valid) {
 23e7f20:	781b      	ldrb	r3, [r3, #0]
void EEPROM_UpdateRainTotals(float rgt1, float rgt2) {
 23e7f22:	eef0 8a60 	vmov.f32	s17, s1
  if (eeprom_valid) {
 23e7f26:	2b00      	cmp	r3, #0
 23e7f28:	d053      	beq.n	23e7fd2 <_Z23EEPROM_UpdateRainTotalsff+0xbe>
    time32_t current_time     = Time.now();
 23e7f2a:	f011 fa12 	bl	23f9352 <_ZN9TimeClass3nowEv>
    time32_t seconds_at_0600  = current_time - (current_time % 86400) + 21600; // time - seconds so far today + seconds to 0600
 23e7f2e:	4b2b      	ldr	r3, [pc, #172]	; (23e7fdc <_Z23EEPROM_UpdateRainTotalsff+0xc8>)
 23e7f30:	492b      	ldr	r1, [pc, #172]	; (23e7fe0 <_Z23EEPROM_UpdateRainTotalsff+0xcc>)
 23e7f32:	fb90 f2f3 	sdiv	r2, r0, r3
 23e7f36:	fb03 0212 	mls	r2, r3, r2, r0
 23e7f3a:	1a82      	subs	r2, r0, r2
 23e7f3c:	f502 42a8 	add.w	r2, r2, #21504	; 0x5400
 23e7f40:	3260      	adds	r2, #96	; 0x60

    if ((current_time > seconds_at_0600) && (eeprom.rgts <= seconds_at_0600)) {
 23e7f42:	4290      	cmp	r0, r2
 23e7f44:	4b27      	ldr	r3, [pc, #156]	; (23e7fe4 <_Z23EEPROM_UpdateRainTotalsff+0xd0>)
 23e7f46:	dd28      	ble.n	23e7f9a <_Z23EEPROM_UpdateRainTotalsff+0x86>
 23e7f48:	691c      	ldr	r4, [r3, #16]
 23e7f4a:	42a2      	cmp	r2, r4
 23e7f4c:	db25      	blt.n	23e7f9a <_Z23EEPROM_UpdateRainTotalsff+0x86>
      // if rgts is before 0600 then we need to move today's totals to prior day
      eeprom.rgp1 = eeprom.rgt1;
 23e7f4e:	681a      	ldr	r2, [r3, #0]
      eeprom.rgt1 = 0;

      if (A4_State == A4_STATE_RAIN) {
 23e7f50:	680c      	ldr	r4, [r1, #0]
      eeprom.rgp1 = eeprom.rgt1;
 23e7f52:	605a      	str	r2, [r3, #4]
      eeprom.rgt1 = 0;
 23e7f54:	2200      	movs	r2, #0
      if (A4_State == A4_STATE_RAIN) {
 23e7f56:	2c02      	cmp	r4, #2
      eeprom.rgt1 = 0;
 23e7f58:	601a      	str	r2, [r3, #0]
      if (A4_State == A4_STATE_RAIN) {
 23e7f5a:	d134      	bne.n	23e7fc6 <_Z23EEPROM_UpdateRainTotalsff+0xb2>
        eeprom.rgt2 = 0;
      }
    }

    // Only add valid rain to the total
    if (rgt1>0) {
 23e7f5c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 23e7f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        eeprom.rgp2 = eeprom.rgt2;
 23e7f64:	689c      	ldr	r4, [r3, #8]
        eeprom.rgt2 = 0;
 23e7f66:	609a      	str	r2, [r3, #8]
        eeprom.rgp2 = eeprom.rgt2;
 23e7f68:	60dc      	str	r4, [r3, #12]
    if (rgt1>0) {
 23e7f6a:	dc1b      	bgt.n	23e7fa4 <_Z23EEPROM_UpdateRainTotalsff+0x90>
      eeprom.rgt1 += rgt1;
    }
    if ((A4_State == A4_STATE_RAIN) && (rgt2>0)) {
 23e7f6c:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 23e7f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e7f74:	dc20      	bgt.n	23e7fb8 <_Z23EEPROM_UpdateRainTotalsff+0xa4>
      eeprom.rgt2 += rgt2;
    }

    eeprom.rgts = current_time;
 23e7f76:	6118      	str	r0, [r3, #16]
    EEPROM_ChecksumUpdate();
 23e7f78:	f7ff fef4 	bl	23e7d64 <_Z21EEPROM_ChecksumUpdatev>
    EEPROM.put(eeprom_address, eeprom);
 23e7f7c:	f011 fdae 	bl	23f9adc <_Z21__fetch_global_EEPROMv>
 23e7f80:	4b19      	ldr	r3, [pc, #100]	; (23e7fe8 <_Z23EEPROM_UpdateRainTotalsff+0xd4>)
 23e7f82:	221c      	movs	r2, #28
 23e7f84:	6818      	ldr	r0, [r3, #0]
 23e7f86:	4917      	ldr	r1, [pc, #92]	; (23e7fe4 <_Z23EEPROM_UpdateRainTotalsff+0xd0>)
 23e7f88:	f00e fc32 	bl	23f67f0 <HAL_EEPROM_Put>
    Output("EEPROM RT UPDATED");
  }
}
 23e7f8c:	ecbd 8b02 	vpop	{d8}
 23e7f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Output("EEPROM RT UPDATED");
 23e7f94:	4815      	ldr	r0, [pc, #84]	; (23e7fec <_Z23EEPROM_UpdateRainTotalsff+0xd8>)
 23e7f96:	f7fd bb79 	b.w	23e568c <_Z6OutputPKc>
    if (rgt1>0) {
 23e7f9a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 23e7f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e7fa2:	dd05      	ble.n	23e7fb0 <_Z23EEPROM_UpdateRainTotalsff+0x9c>
      eeprom.rgt1 += rgt1;
 23e7fa4:	ed93 0a00 	vldr	s0, [r3]
 23e7fa8:	ee30 8a08 	vadd.f32	s16, s0, s16
 23e7fac:	ed83 8a00 	vstr	s16, [r3]
    if ((A4_State == A4_STATE_RAIN) && (rgt2>0)) {
 23e7fb0:	680a      	ldr	r2, [r1, #0]
 23e7fb2:	2a02      	cmp	r2, #2
 23e7fb4:	d1df      	bne.n	23e7f76 <_Z23EEPROM_UpdateRainTotalsff+0x62>
 23e7fb6:	e7d9      	b.n	23e7f6c <_Z23EEPROM_UpdateRainTotalsff+0x58>
      eeprom.rgt2 += rgt2;
 23e7fb8:	edd3 0a02 	vldr	s1, [r3, #8]
 23e7fbc:	ee70 8aa8 	vadd.f32	s17, s1, s17
 23e7fc0:	edc3 8a02 	vstr	s17, [r3, #8]
 23e7fc4:	e7d7      	b.n	23e7f76 <_Z23EEPROM_UpdateRainTotalsff+0x62>
    if (rgt1>0) {
 23e7fc6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 23e7fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e7fce:	dce9      	bgt.n	23e7fa4 <_Z23EEPROM_UpdateRainTotalsff+0x90>
 23e7fd0:	e7d1      	b.n	23e7f76 <_Z23EEPROM_UpdateRainTotalsff+0x62>
}
 23e7fd2:	ecbd 8b02 	vpop	{d8}
 23e7fd6:	bd10      	pop	{r4, pc}
 23e7fd8:	1006ae7c 	.word	0x1006ae7c
 23e7fdc:	00015180 	.word	0x00015180
 23e7fe0:	1006a25c 	.word	0x1006a25c
 23e7fe4:	1006ae5c 	.word	0x1006ae5c
 23e7fe8:	1006ae78 	.word	0x1006ae78
 23e7fec:	023fd525 	.word	0x023fd525

023e7ff0 <_Z25EEPROM_SaveUnreportedRainv>:
/* 
 *=======================================================================================================================
 * EEPROM_SaveUnreportedRain() - 
 *=======================================================================================================================
 */
void EEPROM_SaveUnreportedRain() {
 23e7ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23e7ff2:	ed2d 8b02 	vpush	{d8}
  if (raingauge1_interrupt_count || ((A4_State == A4_STATE_RAIN) && raingauge2_interrupt_count)) {
 23e7ff6:	4b4e      	ldr	r3, [pc, #312]	; (23e8130 <_Z25EEPROM_SaveUnreportedRainv+0x140>)
 23e7ff8:	4f4e      	ldr	r7, [pc, #312]	; (23e8134 <_Z25EEPROM_SaveUnreportedRainv+0x144>)
 23e7ffa:	681a      	ldr	r2, [r3, #0]
 23e7ffc:	b942      	cbnz	r2, 23e8010 <_Z25EEPROM_SaveUnreportedRainv+0x20>
 23e7ffe:	683a      	ldr	r2, [r7, #0]
 23e8000:	2a02      	cmp	r2, #2
 23e8002:	f040 808e 	bne.w	23e8122 <_Z25EEPROM_SaveUnreportedRainv+0x132>
 23e8006:	4a4c      	ldr	r2, [pc, #304]	; (23e8138 <_Z25EEPROM_SaveUnreportedRainv+0x148>)
 23e8008:	6812      	ldr	r2, [r2, #0]
 23e800a:	2a00      	cmp	r2, #0
 23e800c:	f000 8089 	beq.w	23e8122 <_Z25EEPROM_SaveUnreportedRainv+0x132>
    unsigned long rgds;     // rain gauge delta seconds, seconds since last rain gauge observation logged
    unsigned long rg2ds = 0;     // rain gauge delta seconds, seconds since last rain gauge observation logged
    float rain2 = 0.0;

    float rain = raingauge1_interrupt_count * 0.2;
 23e8010:	6818      	ldr	r0, [r3, #0]
 23e8012:	f7fb fb27 	bl	23e3664 <__aeabi_ui2d>
 23e8016:	a344      	add	r3, pc, #272	; (adr r3, 23e8128 <_Z25EEPROM_SaveUnreportedRainv+0x138>)
 23e8018:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e801c:	f7fb fb9c 	bl	23e3758 <__aeabi_dmul>
 23e8020:	f7fb fe92 	bl	23e3d48 <__aeabi_d2f>
 23e8024:	ee08 0a90 	vmov	s17, r0
    rgds = (System.millis()-raingauge1_interrupt_stime)/1000;  // seconds since last rain gauge observation logged
 23e8028:	f7fc ffed 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23e802c:	4a43      	ldr	r2, [pc, #268]	; (23e813c <_Z25EEPROM_SaveUnreportedRainv+0x14c>)
 23e802e:	e9d2 3400 	ldrd	r3, r4, [r2]
 23e8032:	1ac0      	subs	r0, r0, r3
 23e8034:	eb61 0104 	sbc.w	r1, r1, r4
 23e8038:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23e803c:	2300      	movs	r3, #0
 23e803e:	f7fc f831 	bl	23e40a4 <__aeabi_uldivmod>
    rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
 23e8042:	eef4 8a68 	vcmp.f32	s17, s17
 23e8046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    rgds = (System.millis()-raingauge1_interrupt_stime)/1000;  // seconds since last rain gauge observation logged
 23e804a:	4606      	mov	r6, r0
    rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
 23e804c:	d660      	bvs.n	23e8110 <_Z25EEPROM_SaveUnreportedRainv+0x120>
 23e804e:	ee18 0a90 	vmov	r0, s17
 23e8052:	f7fb fb29 	bl	23e36a8 <__aeabi_f2d>
 23e8056:	4604      	mov	r4, r0
 23e8058:	203c      	movs	r0, #60	; 0x3c
 23e805a:	fbb6 f0f0 	udiv	r0, r6, r0
 23e805e:	460d      	mov	r5, r1
 23e8060:	f7fb fb00 	bl	23e3664 <__aeabi_ui2d>
 23e8064:	2200      	movs	r2, #0
 23e8066:	4b36      	ldr	r3, [pc, #216]	; (23e8140 <_Z25EEPROM_SaveUnreportedRainv+0x150>)
 23e8068:	f7fb fb76 	bl	23e3758 <__aeabi_dmul>
 23e806c:	4602      	mov	r2, r0
 23e806e:	460b      	mov	r3, r1
 23e8070:	4620      	mov	r0, r4
 23e8072:	4629      	mov	r1, r5
 23e8074:	f7fb fe00 	bl	23e3c78 <__aeabi_dcmpgt>
 23e8078:	eddf 7a32 	vldr	s15, [pc, #200]	; 23e8144 <_Z25EEPROM_SaveUnreportedRainv+0x154>
 23e807c:	2800      	cmp	r0, #0
 23e807e:	fe48 8aa7 	vseleq.f32	s17, s17, s15
    
    if (A4_State == A4_STATE_RAIN) {
 23e8082:	683b      	ldr	r3, [r7, #0]
 23e8084:	2b02      	cmp	r3, #2
 23e8086:	d146      	bne.n	23e8116 <_Z25EEPROM_SaveUnreportedRainv+0x126>
      rain2 = raingauge2_interrupt_count * 0.2;
 23e8088:	4b2b      	ldr	r3, [pc, #172]	; (23e8138 <_Z25EEPROM_SaveUnreportedRainv+0x148>)
 23e808a:	6818      	ldr	r0, [r3, #0]
 23e808c:	f7fb faea 	bl	23e3664 <__aeabi_ui2d>
 23e8090:	a325      	add	r3, pc, #148	; (adr r3, 23e8128 <_Z25EEPROM_SaveUnreportedRainv+0x138>)
 23e8092:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e8096:	f7fb fb5f 	bl	23e3758 <__aeabi_dmul>
 23e809a:	f7fb fe55 	bl	23e3d48 <__aeabi_d2f>
 23e809e:	ee08 0a10 	vmov	s16, r0
      rg2ds = (System.millis()-raingauge2_interrupt_stime)/1000;  // seconds since last rain gauge observation logged
 23e80a2:	f7fc ffb0 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23e80a6:	4a28      	ldr	r2, [pc, #160]	; (23e8148 <_Z25EEPROM_SaveUnreportedRainv+0x158>)
 23e80a8:	e9d2 3400 	ldrd	r3, r4, [r2]
 23e80ac:	1ac0      	subs	r0, r0, r3
 23e80ae:	eb61 0104 	sbc.w	r1, r1, r4
 23e80b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23e80b6:	2300      	movs	r3, #0
 23e80b8:	f7fb fff4 	bl	23e40a4 <__aeabi_uldivmod>
      rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
 23e80bc:	eeb4 8a48 	vcmp.f32	s16, s16
 23e80c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      rg2ds = (System.millis()-raingauge2_interrupt_stime)/1000;  // seconds since last rain gauge observation logged
 23e80c4:	4606      	mov	r6, r0
      rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
 23e80c6:	d629      	bvs.n	23e811c <_Z25EEPROM_SaveUnreportedRainv+0x12c>
 23e80c8:	ee18 0a10 	vmov	r0, s16
 23e80cc:	f7fb faec 	bl	23e36a8 <__aeabi_f2d>
 23e80d0:	4604      	mov	r4, r0
 23e80d2:	203c      	movs	r0, #60	; 0x3c
 23e80d4:	fbb6 f0f0 	udiv	r0, r6, r0
 23e80d8:	460d      	mov	r5, r1
 23e80da:	f7fb fac3 	bl	23e3664 <__aeabi_ui2d>
 23e80de:	2200      	movs	r2, #0
 23e80e0:	4b17      	ldr	r3, [pc, #92]	; (23e8140 <_Z25EEPROM_SaveUnreportedRainv+0x150>)
 23e80e2:	f7fb fb39 	bl	23e3758 <__aeabi_dmul>
 23e80e6:	4602      	mov	r2, r0
 23e80e8:	460b      	mov	r3, r1
 23e80ea:	4620      	mov	r0, r4
 23e80ec:	4629      	mov	r1, r5
 23e80ee:	f7fb fdc3 	bl	23e3c78 <__aeabi_dcmpgt>
 23e80f2:	eddf 7a14 	vldr	s15, [pc, #80]	; 23e8144 <_Z25EEPROM_SaveUnreportedRainv+0x154>
 23e80f6:	2800      	cmp	r0, #0
 23e80f8:	fe08 8a27 	vseleq.f32	s16, s16, s15
    }

    EEPROM_UpdateRainTotals(rain, rain2);
 23e80fc:	eef0 0a48 	vmov.f32	s1, s16
 23e8100:	eeb0 0a68 	vmov.f32	s0, s17
  }
}
 23e8104:	ecbd 8b02 	vpop	{d8}
 23e8108:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    EEPROM_UpdateRainTotals(rain, rain2);
 23e810c:	f7ff bf02 	b.w	23e7f14 <_Z23EEPROM_UpdateRainTotalsff>
    rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
 23e8110:	eddf 8a0c 	vldr	s17, [pc, #48]	; 23e8144 <_Z25EEPROM_SaveUnreportedRainv+0x154>
 23e8114:	e7b5      	b.n	23e8082 <_Z25EEPROM_SaveUnreportedRainv+0x92>
    float rain2 = 0.0;
 23e8116:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 23e814c <_Z25EEPROM_SaveUnreportedRainv+0x15c>
 23e811a:	e7ef      	b.n	23e80fc <_Z25EEPROM_SaveUnreportedRainv+0x10c>
      rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
 23e811c:	ed9f 8a09 	vldr	s16, [pc, #36]	; 23e8144 <_Z25EEPROM_SaveUnreportedRainv+0x154>
 23e8120:	e7ec      	b.n	23e80fc <_Z25EEPROM_SaveUnreportedRainv+0x10c>
}
 23e8122:	ecbd 8b02 	vpop	{d8}
 23e8126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23e8128:	9999999a 	.word	0x9999999a
 23e812c:	3fc99999 	.word	0x3fc99999
 23e8130:	1007aa5c 	.word	0x1007aa5c
 23e8134:	1006a25c 	.word	0x1006a25c
 23e8138:	1007aa70 	.word	0x1007aa70
 23e813c:	1007aa68 	.word	0x1007aa68
 23e8140:	403e0000 	.word	0x403e0000
 23e8144:	c479f99a 	.word	0xc479f99a
 23e8148:	1007aa80 	.word	0x1007aa80
 23e814c:	00000000 	.word	0x00000000

023e8150 <_Z13EEPROM_Updatev>:
/* 
 *=======================================================================================================================
 * EEPROM_Update() - Check status of EEPROM information and determine status
 *=======================================================================================================================
 */
void EEPROM_Update() {
 23e8150:	b510      	push	{r4, lr}
  if (eeprom_valid && Time.isValid()) {
 23e8152:	4b0d      	ldr	r3, [pc, #52]	; (23e8188 <_Z13EEPROM_Updatev+0x38>)
 23e8154:	781b      	ldrb	r3, [r3, #0]
 23e8156:	b1ab      	cbz	r3, 23e8184 <_Z13EEPROM_Updatev+0x34>
 23e8158:	f011 f8de 	bl	23f9318 <_ZN9TimeClass7isValidEv>
 23e815c:	b190      	cbz	r0, 23e8184 <_Z13EEPROM_Updatev+0x34>
    eeprom.rgts = Time.now();
 23e815e:	f011 f8f8 	bl	23f9352 <_ZN9TimeClass3nowEv>
 23e8162:	4c0a      	ldr	r4, [pc, #40]	; (23e818c <_Z13EEPROM_Updatev+0x3c>)
 23e8164:	6120      	str	r0, [r4, #16]
    EEPROM_ChecksumUpdate();
 23e8166:	f7ff fdfd 	bl	23e7d64 <_Z21EEPROM_ChecksumUpdatev>
    EEPROM.put(eeprom_address, eeprom);
 23e816a:	f011 fcb7 	bl	23f9adc <_Z21__fetch_global_EEPROMv>
 23e816e:	4b08      	ldr	r3, [pc, #32]	; (23e8190 <_Z13EEPROM_Updatev+0x40>)
 23e8170:	4621      	mov	r1, r4
 23e8172:	6818      	ldr	r0, [r3, #0]
 23e8174:	221c      	movs	r2, #28
 23e8176:	f00e fb3b 	bl	23f67f0 <HAL_EEPROM_Put>
    Output("EEPROM UPDATED");
  }
}
 23e817a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Output("EEPROM UPDATED");
 23e817e:	4805      	ldr	r0, [pc, #20]	; (23e8194 <_Z13EEPROM_Updatev+0x44>)
 23e8180:	f7fd ba84 	b.w	23e568c <_Z6OutputPKc>
}
 23e8184:	bd10      	pop	{r4, pc}
 23e8186:	bf00      	nop
 23e8188:	1006ae7c 	.word	0x1006ae7c
 23e818c:	1006ae5c 	.word	0x1006ae5c
 23e8190:	1006ae78 	.word	0x1006ae78
 23e8194:	023fd537 	.word	0x023fd537

023e8198 <_Z11EEPROM_Dumpv>:
/* 
 *=======================================================================================================================
 * EEPROM_Dump() - 
 *=======================================================================================================================
 */
void EEPROM_Dump() {
 23e8198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23e819a:	ed2d 8b02 	vpush	{d8}
  size_t EEPROM_length = EEPROM.length();
 23e819e:	f011 fc9d 	bl	23f9adc <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }
 23e81a2:	f00e fb09 	bl	23f67b8 <HAL_EEPROM_Length>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 23e81a6:	4d4e      	ldr	r5, [pc, #312]	; (23e82e0 <_Z11EEPROM_Dumpv+0x148>)
    uint16_t length()                    { return HAL_EEPROM_Length(); }
 23e81a8:	4604      	mov	r4, r0

  EEPROM.get(eeprom_address, eeprom);
 23e81aa:	f011 fc97 	bl	23f9adc <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 23e81ae:	4b4d      	ldr	r3, [pc, #308]	; (23e82e4 <_Z11EEPROM_Dumpv+0x14c>)
 23e81b0:	4629      	mov	r1, r5
 23e81b2:	6818      	ldr	r0, [r3, #0]
 23e81b4:	221c      	movs	r2, #28
 23e81b6:	f00e fb0d 	bl	23f67d4 <HAL_EEPROM_Get>

  unsigned long checksum = EEPROM_ChecksumCompute();
 23e81ba:	f7ff fdaf 	bl	23e7d1c <_Z22EEPROM_ChecksumComputev>

  Output("EEPROM DUMP");

  sprintf (msgbuf, " LEN:%d", EEPROM_length);
 23e81be:	4e4a      	ldr	r6, [pc, #296]	; (23e82e8 <_Z11EEPROM_Dumpv+0x150>)
  unsigned long checksum = EEPROM_ChecksumCompute();
 23e81c0:	4607      	mov	r7, r0
  Output("EEPROM DUMP");
 23e81c2:	484a      	ldr	r0, [pc, #296]	; (23e82ec <_Z11EEPROM_Dumpv+0x154>)
 23e81c4:	f7fd fa62 	bl	23e568c <_Z6OutputPKc>
  sprintf (msgbuf, " LEN:%d", EEPROM_length);
 23e81c8:	b2a2      	uxth	r2, r4
 23e81ca:	4949      	ldr	r1, [pc, #292]	; (23e82f0 <_Z11EEPROM_Dumpv+0x158>)
 23e81cc:	4630      	mov	r0, r6
 23e81ce:	f00f f94b 	bl	23f7468 <sprintf>
  Output(msgbuf);
 23e81d2:	4630      	mov	r0, r6
 23e81d4:	f7fd fa5a 	bl	23e568c <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " RT1:%d.%02d", 
    (int)eeprom.rgt1, (int)(eeprom.rgt1*100)%100); 
 23e81d8:	ed9f 8a46 	vldr	s16, [pc, #280]	; 23e82f4 <_Z11EEPROM_Dumpv+0x15c>
 23e81dc:	ed95 7a00 	vldr	s14, [r5]
 23e81e0:	ee67 7a08 	vmul.f32	s15, s14, s16
 23e81e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  sprintf (Buffer32Bytes, " RT1:%d.%02d", 
 23e81e8:	2664      	movs	r6, #100	; 0x64
    (int)eeprom.rgt1, (int)(eeprom.rgt1*100)%100); 
 23e81ea:	ee17 3a90 	vmov	r3, s15
  sprintf (Buffer32Bytes, " RT1:%d.%02d", 
 23e81ee:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 23e81f2:	fb93 f2f6 	sdiv	r2, r3, r6
 23e81f6:	4c40      	ldr	r4, [pc, #256]	; (23e82f8 <_Z11EEPROM_Dumpv+0x160>)
 23e81f8:	fb06 3312 	mls	r3, r6, r2, r3
 23e81fc:	493f      	ldr	r1, [pc, #252]	; (23e82fc <_Z11EEPROM_Dumpv+0x164>)
 23e81fe:	ee17 2a90 	vmov	r2, s15
 23e8202:	4620      	mov	r0, r4
 23e8204:	f00f f930 	bl	23f7468 <sprintf>
  Output (Buffer32Bytes);
 23e8208:	4620      	mov	r0, r4
 23e820a:	f7fd fa3f 	bl	23e568c <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " RP1:%d.%02d", 
  (int)eeprom.rgp1, (int)(eeprom.rgp1*100)%100); 
 23e820e:	ed95 7a01 	vldr	s14, [r5, #4]
 23e8212:	ee67 7a08 	vmul.f32	s15, s14, s16
 23e8216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23e821a:	ee17 3a90 	vmov	r3, s15
  sprintf (Buffer32Bytes, " RP1:%d.%02d", 
 23e821e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 23e8222:	fb93 f2f6 	sdiv	r2, r3, r6
 23e8226:	4936      	ldr	r1, [pc, #216]	; (23e8300 <_Z11EEPROM_Dumpv+0x168>)
 23e8228:	fb06 3312 	mls	r3, r6, r2, r3
 23e822c:	4620      	mov	r0, r4
 23e822e:	ee17 2a90 	vmov	r2, s15
 23e8232:	f00f f919 	bl	23f7468 <sprintf>
  Output (Buffer32Bytes);
 23e8236:	4620      	mov	r0, r4
 23e8238:	f7fd fa28 	bl	23e568c <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " RT2:%d.%02d", 
    (int)eeprom.rgt2, (int)(eeprom.rgt2*100)%100); 
 23e823c:	ed95 7a02 	vldr	s14, [r5, #8]
 23e8240:	ee67 7a08 	vmul.f32	s15, s14, s16
 23e8244:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23e8248:	ee17 3a90 	vmov	r3, s15
  sprintf (Buffer32Bytes, " RT2:%d.%02d", 
 23e824c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 23e8250:	fb93 f2f6 	sdiv	r2, r3, r6
 23e8254:	492b      	ldr	r1, [pc, #172]	; (23e8304 <_Z11EEPROM_Dumpv+0x16c>)
 23e8256:	fb06 3312 	mls	r3, r6, r2, r3
 23e825a:	4620      	mov	r0, r4
 23e825c:	ee17 2a90 	vmov	r2, s15
 23e8260:	f00f f902 	bl	23f7468 <sprintf>
  Output (Buffer32Bytes);
 23e8264:	4620      	mov	r0, r4
 23e8266:	f7fd fa11 	bl	23e568c <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " RP2:%d.%02d", 
  (int)eeprom.rgp2, (int)(eeprom.rgp2*100)%100); 
 23e826a:	edd5 7a03 	vldr	s15, [r5, #12]
 23e826e:	ee27 8a88 	vmul.f32	s16, s15, s16
 23e8272:	eebd 7ac8 	vcvt.s32.f32	s14, s16
 23e8276:	ee17 3a10 	vmov	r3, s14
  sprintf (Buffer32Bytes, " RP2:%d.%02d", 
 23e827a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23e827e:	fb93 f2f6 	sdiv	r2, r3, r6
 23e8282:	4921      	ldr	r1, [pc, #132]	; (23e8308 <_Z11EEPROM_Dumpv+0x170>)
 23e8284:	fb06 3312 	mls	r3, r6, r2, r3
 23e8288:	4620      	mov	r0, r4
 23e828a:	ee17 2a90 	vmov	r2, s15
 23e828e:	f00f f8eb 	bl	23f7468 <sprintf>
  Output (Buffer32Bytes);
 23e8292:	4620      	mov	r0, r4
 23e8294:	f7fd f9fa 	bl	23e568c <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " RGTS:%lu", eeprom.rgts);
 23e8298:	692a      	ldr	r2, [r5, #16]
 23e829a:	491c      	ldr	r1, [pc, #112]	; (23e830c <_Z11EEPROM_Dumpv+0x174>)
 23e829c:	4620      	mov	r0, r4
 23e829e:	f00f f8e3 	bl	23f7468 <sprintf>
  Output (Buffer32Bytes);
 23e82a2:	4620      	mov	r0, r4
 23e82a4:	f7fd f9f2 	bl	23e568c <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " N2SFP:%lu", eeprom.n2sfp);
 23e82a8:	696a      	ldr	r2, [r5, #20]
 23e82aa:	4919      	ldr	r1, [pc, #100]	; (23e8310 <_Z11EEPROM_Dumpv+0x178>)
 23e82ac:	4620      	mov	r0, r4
 23e82ae:	f00f f8db 	bl	23f7468 <sprintf>
  Output (Buffer32Bytes);
 23e82b2:	4620      	mov	r0, r4
 23e82b4:	f7fd f9ea 	bl	23e568c <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " CS:%lu", eeprom.checksum);
 23e82b8:	69aa      	ldr	r2, [r5, #24]
 23e82ba:	4916      	ldr	r1, [pc, #88]	; (23e8314 <_Z11EEPROM_Dumpv+0x17c>)
 23e82bc:	4620      	mov	r0, r4
 23e82be:	f00f f8d3 	bl	23f7468 <sprintf>
  Output (Buffer32Bytes);
 23e82c2:	4620      	mov	r0, r4
 23e82c4:	f7fd f9e2 	bl	23e568c <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " CSC:%lu", checksum);
 23e82c8:	463a      	mov	r2, r7
 23e82ca:	4620      	mov	r0, r4
 23e82cc:	4912      	ldr	r1, [pc, #72]	; (23e8318 <_Z11EEPROM_Dumpv+0x180>)
 23e82ce:	f00f f8cb 	bl	23f7468 <sprintf>
  Output (Buffer32Bytes);
}
 23e82d2:	ecbd 8b02 	vpop	{d8}
  Output (Buffer32Bytes);
 23e82d6:	4620      	mov	r0, r4
}
 23e82d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  Output (Buffer32Bytes);
 23e82dc:	f7fd b9d6 	b.w	23e568c <_Z6OutputPKc>
 23e82e0:	1006ae5c 	.word	0x1006ae5c
 23e82e4:	1006ae78 	.word	0x1006ae78
 23e82e8:	1006f128 	.word	0x1006f128
 23e82ec:	023fd546 	.word	0x023fd546
 23e82f0:	023fd552 	.word	0x023fd552
 23e82f4:	42c80000 	.word	0x42c80000
 23e82f8:	1006a287 	.word	0x1006a287
 23e82fc:	023fd55a 	.word	0x023fd55a
 23e8300:	023fd567 	.word	0x023fd567
 23e8304:	023fd574 	.word	0x023fd574
 23e8308:	023fd581 	.word	0x023fd581
 23e830c:	023fd58e 	.word	0x023fd58e
 23e8310:	023fd598 	.word	0x023fd598
 23e8314:	023fd5a3 	.word	0x023fd5a3
 23e8318:	023fd5ab 	.word	0x023fd5ab

023e831c <_Z13SD_initializev>:
/* 
 *=======================================================================================================================
 * SD_initialize()
 *=======================================================================================================================
 */
void SD_initialize() {
 23e831c:	b570      	push	{r4, r5, r6, lr}

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23e831e:	4c41      	ldr	r4, [pc, #260]	; (23e8424 <_Z13SD_initializev+0x108>)
 23e8320:	b092      	sub	sp, #72	; 0x48
 23e8322:	e8d4 1f8f 	ldab	r1, [r4]
 23e8326:	f011 0101 	ands.w	r1, r1, #1
 23e832a:	d10b      	bne.n	23e8344 <_Z13SD_initializev+0x28>
 23e832c:	4620      	mov	r0, r4
 23e832e:	9103      	str	r1, [sp, #12]
 23e8330:	f00f f95e 	bl	23f75f0 <__cxa_guard_acquire>
 23e8334:	9903      	ldr	r1, [sp, #12]
 23e8336:	b128      	cbz	r0, 23e8344 <_Z13SD_initializev+0x28>
 23e8338:	483b      	ldr	r0, [pc, #236]	; (23e8428 <_Z13SD_initializev+0x10c>)
 23e833a:	f010 fc49 	bl	23f8bd0 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23e833e:	4620      	mov	r0, r4
 23e8340:	f00f f964 	bl	23f760c <__cxa_guard_release>
  /** Initialize SD card in SPI mode.
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
 23e8344:	2305      	movs	r3, #5
 23e8346:	f8ad 3010 	strh.w	r3, [sp, #16]
 23e834a:	4b38      	ldr	r3, [pc, #224]	; (23e842c <_Z13SD_initializev+0x110>)
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer or nullptr if failure.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
 23e834c:	4c38      	ldr	r4, [pc, #224]	; (23e8430 <_Z13SD_initializev+0x114>)
 23e834e:	9305      	str	r3, [sp, #20]
 23e8350:	4b35      	ldr	r3, [pc, #212]	; (23e8428 <_Z13SD_initializev+0x10c>)
 23e8352:	f204 468c 	addw	r6, r4, #1164	; 0x48c
 23e8356:	9306      	str	r3, [sp, #24]
 23e8358:	ad04      	add	r5, sp, #16
 23e835a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 23e835e:	4630      	mov	r0, r6
 23e8360:	f00b fc26 	bl	23f3bb0 <_ZN9SdSpiCard5beginE11SdSpiConfig>
    m_card = m_cardFactory.newCard(spiConfig);
    return m_card && !m_card->errorCode();
 23e8364:	f894 34a7 	ldrb.w	r3, [r4, #1191]	; 0x4a7
    m_card = m_cardFactory.newCard(spiConfig);
 23e8368:	f8c4 6488 	str.w	r6, [r4, #1160]	; 0x488
    return m_card && !m_card->errorCode();
 23e836c:	bb63      	cbnz	r3, 23e83c8 <_Z13SD_initializev+0xac>
  /** Initialize file system after call to cardBegin.
   *
   * \return true for success or false for failure.
   */
  bool volumeBegin() {
    return Vol::begin(m_card) || Vol::begin(m_card, true, 0);
 23e836e:	9300      	str	r3, [sp, #0]
 23e8370:	2301      	movs	r3, #1
 23e8372:	4631      	mov	r1, r6
 23e8374:	461a      	mov	r2, r3
 23e8376:	4620      	mov	r0, r4
 23e8378:	f00d fb58 	bl	23f5a2c <_ZN8FsVolume5beginEP9SdSpiCardbhm>
 23e837c:	4603      	mov	r3, r0
 23e837e:	b938      	cbnz	r0, 23e8390 <_Z13SD_initializev+0x74>
 23e8380:	9000      	str	r0, [sp, #0]
 23e8382:	2201      	movs	r2, #1
 23e8384:	4620      	mov	r0, r4
 23e8386:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
 23e838a:	f00d fb4f 	bl	23f5a2c <_ZN8FsVolume5beginEP9SdSpiCardbhm>
 23e838e:	b1d8      	cbz	r0, 23e83c8 <_Z13SD_initializev+0xac>
    Output ("SD:NF");
    SystemStatusBits |= SSB_SD;
    delay (5000);
  }
  else {
    if (!SD.exists(SD_obsdir)) {
 23e8390:	4928      	ldr	r1, [pc, #160]	; (23e8434 <_Z13SD_initializev+0x118>)
 23e8392:	4827      	ldr	r0, [pc, #156]	; (23e8430 <_Z13SD_initializev+0x114>)
 23e8394:	f7fc feb4 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e8398:	2800      	cmp	r0, #0
 23e839a:	d13d      	bne.n	23e8418 <_Z13SD_initializev+0xfc>
    return m_fVol   ? m_fVol->mkdir(path, pFlag)
 23e839c:	f8d4 1480 	ldr.w	r1, [r4, #1152]	; 0x480
 23e83a0:	b309      	cbz	r1, 23e83e6 <_Z13SD_initializev+0xca>
  FatFile() {}
 23e83a2:	9004      	str	r0, [sp, #16]
    return sub.mkdir(vwd(), path, pFlag);
 23e83a4:	2301      	movs	r3, #1
 23e83a6:	4628      	mov	r0, r5
 23e83a8:	4a22      	ldr	r2, [pc, #136]	; (23e8434 <_Z13SD_initializev+0x118>)
 23e83aa:	f201 4144 	addw	r1, r1, #1092	; 0x444
 23e83ae:	f00a fe41 	bl	23f3034 <_ZN7FatFile5mkdirEPS_PKcb>
      if (SD.mkdir(SD_obsdir)) {
 23e83b2:	b320      	cbz	r0, 23e83fe <_Z13SD_initializev+0xe2>
        Output ("SD:MKDIR OBS OK");
 23e83b4:	4820      	ldr	r0, [pc, #128]	; (23e8438 <_Z13SD_initializev+0x11c>)
 23e83b6:	f7fd f969 	bl	23e568c <_Z6OutputPKc>
        Output ("SD:Online");
 23e83ba:	4820      	ldr	r0, [pc, #128]	; (23e843c <_Z13SD_initializev+0x120>)
        SystemStatusBits |= SSB_SD;  // Turn On Bit     
      } 
    }
    else {
      Output ("SD:Online");
      Output ("SD:OBS DIR Exists");
 23e83bc:	f7fd f966 	bl	23e568c <_Z6OutputPKc>
      SD_exists = true;
 23e83c0:	2201      	movs	r2, #1
 23e83c2:	4b1f      	ldr	r3, [pc, #124]	; (23e8440 <_Z13SD_initializev+0x124>)
 23e83c4:	701a      	strb	r2, [r3, #0]
    }
  }
}
 23e83c6:	e025      	b.n	23e8414 <_Z13SD_initializev+0xf8>
    Output ("SD:NF");
 23e83c8:	481e      	ldr	r0, [pc, #120]	; (23e8444 <_Z13SD_initializev+0x128>)
 23e83ca:	f7fd f95f 	bl	23e568c <_Z6OutputPKc>
    delay (5000);
 23e83ce:	f241 3088 	movw	r0, #5000	; 0x1388
    SystemStatusBits |= SSB_SD;
 23e83d2:	4a1d      	ldr	r2, [pc, #116]	; (23e8448 <_Z13SD_initializev+0x12c>)
 23e83d4:	6813      	ldr	r3, [r2, #0]
 23e83d6:	f043 0302 	orr.w	r3, r3, #2
 23e83da:	6013      	str	r3, [r2, #0]
}
 23e83dc:	b012      	add	sp, #72	; 0x48
 23e83de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    delay (5000);
 23e83e2:	f00f b921 	b.w	23f7628 <delay>
           : m_xVol ? m_xVol->mkdir(path, pFlag)
 23e83e6:	f8d4 0484 	ldr.w	r0, [r4, #1156]	; 0x484
 23e83ea:	b140      	cbz	r0, 23e83fe <_Z13SD_initializev+0xe2>
  ExFatFile() {}
 23e83ec:	9110      	str	r1, [sp, #64]	; 0x40
    return sub.mkdir(vwd(), path, pFlag);
 23e83ee:	2301      	movs	r3, #1
 23e83f0:	f500 6189 	add.w	r1, r0, #1096	; 0x448
 23e83f4:	4a0f      	ldr	r2, [pc, #60]	; (23e8434 <_Z13SD_initializev+0x118>)
 23e83f6:	4628      	mov	r0, r5
 23e83f8:	f00c fd39 	bl	23f4e6e <_ZN9ExFatFile5mkdirEPS_PKcb>
 23e83fc:	e7d9      	b.n	23e83b2 <_Z13SD_initializev+0x96>
        Output ("SD:MKDIR OBS ERR");
 23e83fe:	4813      	ldr	r0, [pc, #76]	; (23e844c <_Z13SD_initializev+0x130>)
 23e8400:	f7fd f944 	bl	23e568c <_Z6OutputPKc>
        Output ("SD:Offline");
 23e8404:	4812      	ldr	r0, [pc, #72]	; (23e8450 <_Z13SD_initializev+0x134>)
 23e8406:	f7fd f941 	bl	23e568c <_Z6OutputPKc>
        SystemStatusBits |= SSB_SD;  // Turn On Bit     
 23e840a:	4a0f      	ldr	r2, [pc, #60]	; (23e8448 <_Z13SD_initializev+0x12c>)
 23e840c:	6813      	ldr	r3, [r2, #0]
 23e840e:	f043 0302 	orr.w	r3, r3, #2
 23e8412:	6013      	str	r3, [r2, #0]
}
 23e8414:	b012      	add	sp, #72	; 0x48
 23e8416:	bd70      	pop	{r4, r5, r6, pc}
      Output ("SD:Online");
 23e8418:	4808      	ldr	r0, [pc, #32]	; (23e843c <_Z13SD_initializev+0x120>)
 23e841a:	f7fd f937 	bl	23e568c <_Z6OutputPKc>
      Output ("SD:OBS DIR Exists");
 23e841e:	480d      	ldr	r0, [pc, #52]	; (23e8454 <_Z13SD_initializev+0x138>)
 23e8420:	e7cc      	b.n	23e83bc <_Z13SD_initializev+0xa0>
 23e8422:	bf00      	nop
 23e8424:	1006a238 	.word	0x1006a238
 23e8428:	1006a23c 	.word	0x1006a23c
 23e842c:	00989680 	.word	0x00989680
 23e8430:	1006a2d4 	.word	0x1006a2d4
 23e8434:	1006a168 	.word	0x1006a168
 23e8438:	023fd5ba 	.word	0x023fd5ba
 23e843c:	023fd5ca 	.word	0x023fd5ca
 23e8440:	1006a780 	.word	0x1006a780
 23e8444:	023fd5b4 	.word	0x023fd5b4
 23e8448:	1006a178 	.word	0x1006a178
 23e844c:	023fd5d4 	.word	0x023fd5d4
 23e8450:	023fd5e5 	.word	0x023fd5e5
 23e8454:	023fd5f0 	.word	0x023fd5f0

023e8458 <_Z17SD_LogObservationPc>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23e8458:	2300      	movs	r3, #0
 23e845a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
/* 
 *=======================================================================================================================
 * SD_LogObservation()
 *=======================================================================================================================
 */
void SD_LogObservation(char *observations) {
 23e845e:	b530      	push	{r4, r5, lr}
 23e8460:	b0b3      	sub	sp, #204	; 0xcc
 23e8462:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
  FsBaseFile() = default;  // cppcheck-suppress uninitMemberVar
 23e8466:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23e846a:	4b23      	ldr	r3, [pc, #140]	; (23e84f8 <_Z17SD_LogObservationPc+0xa0>)
 23e846c:	4605      	mov	r5, r0
 23e846e:	930a      	str	r3, [sp, #40]	; 0x28
  char SD_logfile[24];
  File fp;

  if (!SD_exists) {
 23e8470:	4b22      	ldr	r3, [pc, #136]	; (23e84fc <_Z17SD_LogObservationPc+0xa4>)
 23e8472:	781b      	ldrb	r3, [r3, #0]
 23e8474:	2b00      	cmp	r3, #0
 23e8476:	d034      	beq.n	23e84e2 <_Z17SD_LogObservationPc+0x8a>
    return;
  }

  if (!Time.isValid()) {
 23e8478:	f010 ff4e 	bl	23f9318 <_ZN9TimeClass7isValidEv>
 23e847c:	2800      	cmp	r0, #0
 23e847e:	d030      	beq.n	23e84e2 <_Z17SD_LogObservationPc+0x8a>
    return;
  }
  
  sprintf (SD_logfile, "%s/%4d%02d%02d.log", SD_obsdir, Time.year(), Time.month(), Time.day());
 23e8480:	f010 ffb0 	bl	23f93e4 <_ZN9TimeClass4yearEv>
 23e8484:	9003      	str	r0, [sp, #12]
 23e8486:	f010 ffa5 	bl	23f93d4 <_ZN9TimeClass5monthEv>
 23e848a:	4604      	mov	r4, r0
 23e848c:	f010 ff96 	bl	23f93bc <_ZN9TimeClass3dayEv>
 23e8490:	9b03      	ldr	r3, [sp, #12]
 23e8492:	e9cd 4000 	strd	r4, r0, [sp]
 23e8496:	4a1a      	ldr	r2, [pc, #104]	; (23e8500 <_Z17SD_LogObservationPc+0xa8>)
 23e8498:	491a      	ldr	r1, [pc, #104]	; (23e8504 <_Z17SD_LogObservationPc+0xac>)
 23e849a:	a804      	add	r0, sp, #16
 23e849c:	f00e ffe4 	bl	23f7468 <sprintf>
  
  fp = SD.open(SD_logfile, FILE_WRITE); 
 23e84a0:	aa04      	add	r2, sp, #16
 23e84a2:	f244 2302 	movw	r3, #16898	; 0x4202
 23e84a6:	4918      	ldr	r1, [pc, #96]	; (23e8508 <_Z17SD_LogObservationPc+0xb0>)
 23e84a8:	a81e      	add	r0, sp, #120	; 0x78
 23e84aa:	f00d fb3f 	bl	23f5b2c <_ZN8FsVolume4openEPKci>
class Print
 23e84ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    move(&from);
 23e84b0:	a922      	add	r1, sp, #136	; 0x88
 23e84b2:	930b      	str	r3, [sp, #44]	; 0x2c
class Stream : public Print
 23e84b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 23e84b6:	a80e      	add	r0, sp, #56	; 0x38
 23e84b8:	930c      	str	r3, [sp, #48]	; 0x30
 23e84ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 23e84bc:	4c13      	ldr	r4, [pc, #76]	; (23e850c <_Z17SD_LogObservationPc+0xb4>)
 23e84be:	930d      	str	r3, [sp, #52]	; 0x34
 23e84c0:	f00d fa51 	bl	23f5966 <_ZN10FsBaseFile4moveEPS_>
  operator bool() const { return isOpen(); }
 23e84c4:	a80e      	add	r0, sp, #56	; 0x38
 23e84c6:	f7fc fe94 	bl	23e51f2 <_ZNK10FsBaseFile6isOpenEv>
  if (fp) {
 23e84ca:	b160      	cbz	r0, 23e84e6 <_Z17SD_LogObservationPc+0x8e>
    fp.println(observations);
 23e84cc:	4629      	mov	r1, r5
 23e84ce:	a80a      	add	r0, sp, #40	; 0x28
 23e84d0:	f010 fb03 	bl	23f8ada <_ZN5Print7printlnEPKc>
    fp.close();
 23e84d4:	a80e      	add	r0, sp, #56	; 0x38
 23e84d6:	f00d fa50 	bl	23f597a <_ZN10FsBaseFile5closeEv>
    SystemStatusBits &= ~SSB_SD;  // Turn Off Bit
 23e84da:	6823      	ldr	r3, [r4, #0]
 23e84dc:	f023 0302 	bic.w	r3, r3, #2
 23e84e0:	6023      	str	r3, [r4, #0]
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
    Output ("SD:Open(Log)ERR");
    // At thins point we could set SD_exists to false and/or set a status bit to report it
    // sd_initialize();  // Reports SD NOT Found. Library bug with SD
  }
}
 23e84e2:	b033      	add	sp, #204	; 0xcc
 23e84e4:	bd30      	pop	{r4, r5, pc}
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23e84e6:	6823      	ldr	r3, [r4, #0]
    Output ("SD:Open(Log)ERR");
 23e84e8:	4809      	ldr	r0, [pc, #36]	; (23e8510 <_Z17SD_LogObservationPc+0xb8>)
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23e84ea:	f043 0302 	orr.w	r3, r3, #2
 23e84ee:	6023      	str	r3, [r4, #0]
    Output ("SD:Open(Log)ERR");
 23e84f0:	f7fd f8cc 	bl	23e568c <_Z6OutputPKc>
    virtual ~Print() {}
 23e84f4:	e7f5      	b.n	23e84e2 <_Z17SD_LogObservationPc+0x8a>
 23e84f6:	bf00      	nop
 23e84f8:	023fe780 	.word	0x023fe780
 23e84fc:	1006a780 	.word	0x1006a780
 23e8500:	1006a168 	.word	0x1006a168
 23e8504:	023fd602 	.word	0x023fd602
 23e8508:	1006a2d4 	.word	0x1006a2d4
 23e850c:	1006a178 	.word	0x1006a178
 23e8510:	023fd615 	.word	0x023fd615

023e8514 <_Z13SD_N2S_Deletev>:
/* 
 *=======================================================================================================================
 * SD_N2S_Delete()
 *=======================================================================================================================
 */
bool SD_N2S_Delete() {
 23e8514:	b538      	push	{r3, r4, r5, lr}
  bool result;

  if (SD_exists && SD.exists(SD_n2s_file)) {
 23e8516:	4b17      	ldr	r3, [pc, #92]	; (23e8574 <_Z13SD_N2S_Deletev+0x60>)
 23e8518:	4c17      	ldr	r4, [pc, #92]	; (23e8578 <_Z13SD_N2S_Deletev+0x64>)
 23e851a:	781b      	ldrb	r3, [r3, #0]
 23e851c:	b193      	cbz	r3, 23e8544 <_Z13SD_N2S_Deletev+0x30>
 23e851e:	4917      	ldr	r1, [pc, #92]	; (23e857c <_Z13SD_N2S_Deletev+0x68>)
 23e8520:	4817      	ldr	r0, [pc, #92]	; (23e8580 <_Z13SD_N2S_Deletev+0x6c>)
 23e8522:	f7fc fded 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e8526:	b168      	cbz	r0, 23e8544 <_Z13SD_N2S_Deletev+0x30>
    if (SD.remove (SD_n2s_file)) {
 23e8528:	4914      	ldr	r1, [pc, #80]	; (23e857c <_Z13SD_N2S_Deletev+0x68>)
 23e852a:	4815      	ldr	r0, [pc, #84]	; (23e8580 <_Z13SD_N2S_Deletev+0x6c>)
 23e852c:	f7fc fe03 	bl	23e5136 <_ZN8FsVolume6removeEPKc>
 23e8530:	4605      	mov	r5, r0
 23e8532:	b9b0      	cbnz	r0, 23e8562 <_Z13SD_N2S_Deletev+0x4e>
      SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
      Output ("N2S->DEL:OK");
      result = true;
    }
    else {
      Output ("N2S->DEL:ERR");
 23e8534:	4813      	ldr	r0, [pc, #76]	; (23e8584 <_Z13SD_N2S_Deletev+0x70>)
 23e8536:	f7fd f8a9 	bl	23e568c <_Z6OutputPKc>
      SystemStatusBits |= SSB_SD; // Turn On Bit
 23e853a:	6823      	ldr	r3, [r4, #0]
 23e853c:	f043 0302 	orr.w	r3, r3, #2
 23e8540:	6023      	str	r3, [r4, #0]
      result = false;
 23e8542:	e007      	b.n	23e8554 <_Z13SD_N2S_Deletev+0x40>
    }
  }
  else {
    SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23e8544:	6823      	ldr	r3, [r4, #0]
    Output ("N2S->DEL:NF");
 23e8546:	4810      	ldr	r0, [pc, #64]	; (23e8588 <_Z13SD_N2S_Deletev+0x74>)
    SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23e8548:	f023 0310 	bic.w	r3, r3, #16
 23e854c:	6023      	str	r3, [r4, #0]
    result = true;
 23e854e:	2501      	movs	r5, #1
    Output ("N2S->DEL:NF");
 23e8550:	f7fd f89c 	bl	23e568c <_Z6OutputPKc>
  }
  eeprom.n2sfp = 0;
 23e8554:	2200      	movs	r2, #0
 23e8556:	4b0d      	ldr	r3, [pc, #52]	; (23e858c <_Z13SD_N2S_Deletev+0x78>)
 23e8558:	615a      	str	r2, [r3, #20]
  EEPROM_Update();
 23e855a:	f7ff fdf9 	bl	23e8150 <_Z13EEPROM_Updatev>
  return (result);
}
 23e855e:	4628      	mov	r0, r5
 23e8560:	bd38      	pop	{r3, r4, r5, pc}
      SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23e8562:	6823      	ldr	r3, [r4, #0]
      Output ("N2S->DEL:OK");
 23e8564:	480a      	ldr	r0, [pc, #40]	; (23e8590 <_Z13SD_N2S_Deletev+0x7c>)
      SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23e8566:	f023 0310 	bic.w	r3, r3, #16
 23e856a:	6023      	str	r3, [r4, #0]
      Output ("N2S->DEL:OK");
 23e856c:	f7fd f88e 	bl	23e568c <_Z6OutputPKc>
      result = true;
 23e8570:	e7f0      	b.n	23e8554 <_Z13SD_N2S_Deletev+0x40>
 23e8572:	bf00      	nop
 23e8574:	1006a780 	.word	0x1006a780
 23e8578:	1006a178 	.word	0x1006a178
 23e857c:	1006a157 	.word	0x1006a157
 23e8580:	1006a2d4 	.word	0x1006a2d4
 23e8584:	023fd63d 	.word	0x023fd63d
 23e8588:	023fd625 	.word	0x023fd625
 23e858c:	1006ae5c 	.word	0x1006ae5c
 23e8590:	023fd631 	.word	0x023fd631

023e8594 <_Z17SD_NeedToSend_AddPc>:
/* 
 *=======================================================================================================================
 * SD_NeedToSend_Add()
 *=======================================================================================================================
 */
void SD_NeedToSend_Add(char *observation) {
 23e8594:	b530      	push	{r4, r5, lr}
    Stream() {_timeout=1000;}
 23e8596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23e859a:	2500      	movs	r5, #0
 23e859c:	b0a9      	sub	sp, #164	; 0xa4
 23e859e:	e9cd 5301 	strd	r5, r3, [sp, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23e85a2:	4b26      	ldr	r3, [pc, #152]	; (23e863c <_Z17SD_NeedToSend_AddPc+0xa8>)
 23e85a4:	4604      	mov	r4, r0
 23e85a6:	9300      	str	r3, [sp, #0]
  File fp;

  if (!SD_exists) {
 23e85a8:	4b25      	ldr	r3, [pc, #148]	; (23e8640 <_Z17SD_NeedToSend_AddPc+0xac>)
  FsBaseFile() = default;  // cppcheck-suppress uninitMemberVar
 23e85aa:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
 23e85ae:	781b      	ldrb	r3, [r3, #0]
 23e85b0:	b34b      	cbz	r3, 23e8606 <_Z17SD_NeedToSend_AddPc+0x72>
    return;
  }
  
  fp = SD.open(SD_n2s_file, FILE_WRITE); // Open the file for reading and writing, starting at the end of the file.
 23e85b2:	f244 2302 	movw	r3, #16898	; 0x4202
 23e85b6:	4a23      	ldr	r2, [pc, #140]	; (23e8644 <_Z17SD_NeedToSend_AddPc+0xb0>)
 23e85b8:	4923      	ldr	r1, [pc, #140]	; (23e8648 <_Z17SD_NeedToSend_AddPc+0xb4>)
 23e85ba:	a814      	add	r0, sp, #80	; 0x50
 23e85bc:	f00d fab6 	bl	23f5b2c <_ZN8FsVolume4openEPKci>
class Print
 23e85c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    move(&from);
 23e85c2:	a804      	add	r0, sp, #16
 23e85c4:	9301      	str	r3, [sp, #4]
class Stream : public Print
 23e85c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 23e85c8:	a918      	add	r1, sp, #96	; 0x60
 23e85ca:	9302      	str	r3, [sp, #8]
 23e85cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23e85ce:	9303      	str	r3, [sp, #12]
 23e85d0:	f00d f9c9 	bl	23f5966 <_ZN10FsBaseFile4moveEPS_>
  operator bool() const { return isOpen(); }
 23e85d4:	a804      	add	r0, sp, #16
 23e85d6:	f7fc fe0c 	bl	23e51f2 <_ZNK10FsBaseFile6isOpenEv>
                                         // It will be created if it doesn't already exist.
  if (fp) {  
 23e85da:	b340      	cbz	r0, 23e862e <_Z17SD_NeedToSend_AddPc+0x9a>
  PosType size() { return BaseFile::fileSize(); }
 23e85dc:	a804      	add	r0, sp, #16
 23e85de:	f7fc fdfc 	bl	23e51da <_ZNK10FsBaseFile8fileSizeEv>
    if (fp.size() > SD_n2s_max_filesz) {
 23e85e2:	4b1a      	ldr	r3, [pc, #104]	; (23e864c <_Z17SD_NeedToSend_AddPc+0xb8>)
 23e85e4:	681b      	ldr	r3, [r3, #0]
 23e85e6:	4283      	cmp	r3, r0
 23e85e8:	eb75 0301 	sbcs.w	r3, r5, r1
 23e85ec:	d20d      	bcs.n	23e860a <_Z17SD_NeedToSend_AddPc+0x76>
      fp.close();
 23e85ee:	a804      	add	r0, sp, #16
 23e85f0:	f00d f9c3 	bl	23f597a <_ZN10FsBaseFile5closeEv>
      Output ("N2S:Full");
 23e85f4:	4816      	ldr	r0, [pc, #88]	; (23e8650 <_Z17SD_NeedToSend_AddPc+0xbc>)
 23e85f6:	f7fd f849 	bl	23e568c <_Z6OutputPKc>
      if (SD_N2S_Delete()) {
 23e85fa:	f7ff ff8b 	bl	23e8514 <_Z13SD_N2S_Deletev>
 23e85fe:	b110      	cbz	r0, 23e8606 <_Z17SD_NeedToSend_AddPc+0x72>
        // Only call ourself again if we truely deleted the file. Otherwise infinate loop.
        SD_NeedToSend_Add(observation); // Now go and log the data
 23e8600:	4620      	mov	r0, r4
 23e8602:	f7ff ffc7 	bl	23e8594 <_Z17SD_NeedToSend_AddPc>
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
    Output ("N2S:Open Error");
    // At thins point we could set SD_exists to false and/or set a status bit to report it
    // sd_initialize();  // Reports SD NOT Found. Library bug with SD
  }
}
 23e8606:	b029      	add	sp, #164	; 0xa4
 23e8608:	bd30      	pop	{r4, r5, pc}
      fp.println(observation); //Print data, followed by a carriage return and newline, to the File
 23e860a:	4621      	mov	r1, r4
 23e860c:	4668      	mov	r0, sp
 23e860e:	f010 fa64 	bl	23f8ada <_ZN5Print7printlnEPKc>
      fp.close();
 23e8612:	a804      	add	r0, sp, #16
 23e8614:	f00d f9b1 	bl	23f597a <_ZN10FsBaseFile5closeEv>
      SystemStatusBits |= SSB_N2S; // Turn on Bit that says there are entries in the N2S File
 23e8618:	4a0e      	ldr	r2, [pc, #56]	; (23e8654 <_Z17SD_NeedToSend_AddPc+0xc0>)
      Output ("N2S:OBS Added");
 23e861a:	480f      	ldr	r0, [pc, #60]	; (23e8658 <_Z17SD_NeedToSend_AddPc+0xc4>)
      SystemStatusBits &= ~SSB_SD;  // Turn Off Bit
 23e861c:	6813      	ldr	r3, [r2, #0]
 23e861e:	f023 0302 	bic.w	r3, r3, #2
      SystemStatusBits |= SSB_N2S; // Turn on Bit that says there are entries in the N2S File
 23e8622:	f043 0310 	orr.w	r3, r3, #16
 23e8626:	6013      	str	r3, [r2, #0]
    Output ("N2S:Open Error");
 23e8628:	f7fd f830 	bl	23e568c <_Z6OutputPKc>
 23e862c:	e7eb      	b.n	23e8606 <_Z17SD_NeedToSend_AddPc+0x72>
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23e862e:	4a09      	ldr	r2, [pc, #36]	; (23e8654 <_Z17SD_NeedToSend_AddPc+0xc0>)
    Output ("N2S:Open Error");
 23e8630:	480a      	ldr	r0, [pc, #40]	; (23e865c <_Z17SD_NeedToSend_AddPc+0xc8>)
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23e8632:	6813      	ldr	r3, [r2, #0]
 23e8634:	f043 0302 	orr.w	r3, r3, #2
 23e8638:	6013      	str	r3, [r2, #0]
    Output ("N2S:Open Error");
 23e863a:	e7f5      	b.n	23e8628 <_Z17SD_NeedToSend_AddPc+0x94>
 23e863c:	023fe780 	.word	0x023fe780
 23e8640:	1006a780 	.word	0x1006a780
 23e8644:	1006a157 	.word	0x1006a157
 23e8648:	1006a2d4 	.word	0x1006a2d4
 23e864c:	1006a164 	.word	0x1006a164
 23e8650:	023fd64a 	.word	0x023fd64a
 23e8654:	1006a178 	.word	0x1006a178
 23e8658:	023fd653 	.word	0x023fd653
 23e865c:	023fd661 	.word	0x023fd661

023e8660 <_Z16lora_msgs_to_n2sv>:
void lora_msgs_to_n2s() {
 23e8660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (LORA_exists) {
 23e8664:	4b14      	ldr	r3, [pc, #80]	; (23e86b8 <_Z16lora_msgs_to_n2sv+0x58>)
 23e8666:	781b      	ldrb	r3, [r3, #0]
 23e8668:	b31b      	cbz	r3, 23e86b2 <_Z16lora_msgs_to_n2sv+0x52>
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e866a:	2500      	movs	r5, #0
 23e866c:	4c13      	ldr	r4, [pc, #76]	; (23e86bc <_Z16lora_msgs_to_n2sv+0x5c>)
        sprintf (msgbuf, "%s,%s", m->message, relay_msgtypes[m->message_type]);
 23e866e:	4f14      	ldr	r7, [pc, #80]	; (23e86c0 <_Z16lora_msgs_to_n2sv+0x60>)
 23e8670:	f8df 805c 	ldr.w	r8, [pc, #92]	; 23e86d0 <_Z16lora_msgs_to_n2sv+0x70>
 23e8674:	4e13      	ldr	r6, [pc, #76]	; (23e86c4 <_Z16lora_msgs_to_n2sv+0x64>)
      if (m->need2log) {
 23e8676:	7823      	ldrb	r3, [r4, #0]
 23e8678:	b1b3      	cbz	r3, 23e86a8 <_Z16lora_msgs_to_n2sv+0x48>
        sprintf (msgbuf, "%s,%s", m->message, relay_msgtypes[m->message_type]);
 23e867a:	6863      	ldr	r3, [r4, #4]
 23e867c:	4641      	mov	r1, r8
 23e867e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 23e8682:	f104 0208 	add.w	r2, r4, #8
 23e8686:	4630      	mov	r0, r6
 23e8688:	f00e feee 	bl	23f7468 <sprintf>
        SD_NeedToSend_Add(msgbuf); // Save to N2F File
 23e868c:	4630      	mov	r0, r6
 23e868e:	f7ff ff81 	bl	23e8594 <_Z17SD_NeedToSend_AddPc>
        lora_relay_msg_free(m);
 23e8692:	4620      	mov	r0, r4
 23e8694:	f7fd f984 	bl	23e59a0 <_Z19lora_relay_msg_freeP18LORA_MSG_RELAY_STR>
        sprintf (Buffer32Bytes, "LoRaMsg[%d]->N2S", i);
 23e8698:	462a      	mov	r2, r5
 23e869a:	490b      	ldr	r1, [pc, #44]	; (23e86c8 <_Z16lora_msgs_to_n2sv+0x68>)
 23e869c:	480b      	ldr	r0, [pc, #44]	; (23e86cc <_Z16lora_msgs_to_n2sv+0x6c>)
 23e869e:	f00e fee3 	bl	23f7468 <sprintf>
        Output (Buffer32Bytes);
 23e86a2:	480a      	ldr	r0, [pc, #40]	; (23e86cc <_Z16lora_msgs_to_n2sv+0x6c>)
 23e86a4:	f7fc fff2 	bl	23e568c <_Z6OutputPKc>
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
 23e86a8:	3501      	adds	r5, #1
 23e86aa:	2d40      	cmp	r5, #64	; 0x40
 23e86ac:	f504 7484 	add.w	r4, r4, #264	; 0x108
 23e86b0:	d1e1      	bne.n	23e8676 <_Z16lora_msgs_to_n2sv+0x16>
}
 23e86b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23e86b6:	bf00      	nop
 23e86b8:	1006a2b1 	.word	0x1006a2b1
 23e86bc:	1006aec0 	.word	0x1006aec0
 23e86c0:	1006a1b0 	.word	0x1006a1b0
 23e86c4:	1006f128 	.word	0x1006f128
 23e86c8:	023fd676 	.word	0x023fd676
 23e86cc:	1006a287 	.word	0x1006a287
 23e86d0:	023fd670 	.word	0x023fd670

023e86d4 <_Z14lora_relay_msgPc>:
 *   INT,   Station ID
 *   INT,   Message Counter
 *   OBS    JSON Observation
 *=======================================================================================================================
 */
void lora_relay_msg(char *obs) {
 23e86d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  int unit_id = 0;
  unsigned int message_counter = 0;
  char *message;
  char *p;

  if ((obs[0] == 'I') && (obs[1] == 'F')) {
 23e86d6:	7802      	ldrb	r2, [r0, #0]
 23e86d8:	7843      	ldrb	r3, [r0, #1]
 23e86da:	2a49      	cmp	r2, #73	; 0x49
void lora_relay_msg(char *obs) {
 23e86dc:	b087      	sub	sp, #28
  if ((obs[0] == 'I') && (obs[1] == 'F')) {
 23e86de:	d133      	bne.n	23e8748 <_Z14lora_relay_msgPc+0x74>
 23e86e0:	2b46      	cmp	r3, #70	; 0x46
 23e86e2:	d135      	bne.n	23e8750 <_Z14lora_relay_msgPc+0x7c>
    message_type = 1;
 23e86e4:	2501      	movs	r5, #1
    Output (Buffer32Bytes);
    return;
  }

  p = &obs[2]; // Start after message type 
  unit_id = atoi (strtok_r(p, ",", &p));
 23e86e6:	492c      	ldr	r1, [pc, #176]	; (23e8798 <_Z14lora_relay_msgPc+0xc4>)
 23e86e8:	aa05      	add	r2, sp, #20
  p = &obs[2]; // Start after message type 
 23e86ea:	3002      	adds	r0, #2
 23e86ec:	9005      	str	r0, [sp, #20]
  unit_id = atoi (strtok_r(p, ",", &p));
 23e86ee:	f014 f8ef 	bl	23fc8d0 <strtok_r>
 23e86f2:	f013 ffbd 	bl	23fc670 <atoi>
  message_counter = atoi (strtok_r(p, ",", &p));
 23e86f6:	4928      	ldr	r1, [pc, #160]	; (23e8798 <_Z14lora_relay_msgPc+0xc4>)
 23e86f8:	aa05      	add	r2, sp, #20
  unit_id = atoi (strtok_r(p, ",", &p));
 23e86fa:	9003      	str	r0, [sp, #12]
  message_counter = atoi (strtok_r(p, ",", &p));
 23e86fc:	9805      	ldr	r0, [sp, #20]
 23e86fe:	f014 f8e7 	bl	23fc8d0 <strtok_r>
 23e8702:	f013 ffb5 	bl	23fc670 <atoi>
  message = p;

  sprintf (Buffer32Bytes, "Relay %s ID:%d CNT:%d", relay_msgtypes[message_type], unit_id, message_counter);
 23e8706:	4e25      	ldr	r6, [pc, #148]	; (23e879c <_Z14lora_relay_msgPc+0xc8>)
 23e8708:	9b03      	ldr	r3, [sp, #12]
 23e870a:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 23e870e:	4924      	ldr	r1, [pc, #144]	; (23e87a0 <_Z14lora_relay_msgPc+0xcc>)
 23e8710:	9000      	str	r0, [sp, #0]
 23e8712:	4824      	ldr	r0, [pc, #144]	; (23e87a4 <_Z14lora_relay_msgPc+0xd0>)
  message = p;
 23e8714:	9f05      	ldr	r7, [sp, #20]
  sprintf (Buffer32Bytes, "Relay %s ID:%d CNT:%d", relay_msgtypes[message_type], unit_id, message_counter);
 23e8716:	f00e fea7 	bl	23f7468 <sprintf>
  Output (Buffer32Bytes);
 23e871a:	4822      	ldr	r0, [pc, #136]	; (23e87a4 <_Z14lora_relay_msgPc+0xd0>)
 23e871c:	f7fc ffb6 	bl	23e568c <_Z6OutputPKc>
  // Output (message);

  // Locate storage index
  int idx = lora_relay_notinuse();
 23e8720:	f7fd f954 	bl	23e59cc <_Z19lora_relay_notinusev>

  if (idx == -1) {
 23e8724:	1c42      	adds	r2, r0, #1
  int idx = lora_relay_notinuse();
 23e8726:	4604      	mov	r4, r0
  if (idx == -1) {
 23e8728:	d11e      	bne.n	23e8768 <_Z14lora_relay_msgPc+0x94>
    Output ("LORA Relay NoSpace");
 23e872a:	481f      	ldr	r0, [pc, #124]	; (23e87a8 <_Z14lora_relay_msgPc+0xd4>)
 23e872c:	f7fc ffae 	bl	23e568c <_Z6OutputPKc>

    // Dump all LoRA messages to N2S
    lora_msgs_to_n2s();  // No Space - Dump all LoRA messages to N2S, then save new message
 23e8730:	f7ff ff96 	bl	23e8660 <_Z16lora_msgs_to_n2sv>

    idx = lora_relay_notinuse(); // This better not be -1 after freeing
 23e8734:	f7fd f94a 	bl	23e59cc <_Z19lora_relay_notinusev>
    if (idx == -1) {
 23e8738:	1c43      	adds	r3, r0, #1
    idx = lora_relay_notinuse(); // This better not be -1 after freeing
 23e873a:	4604      	mov	r4, r0
    if (idx == -1) {
 23e873c:	d114      	bne.n	23e8768 <_Z14lora_relay_msgPc+0x94>
      Output ("LORA Relay MsgLost");
 23e873e:	481b      	ldr	r0, [pc, #108]	; (23e87ac <_Z14lora_relay_msgPc+0xd8>)
  m = &lora_msg_relay[idx]; // Lets work with a pointer and not the index
  m->need2log = true;
  m->message_type = message_type;
  strncpy (m->message, message, LORA_RELAY_MSG_LENGTH-1); // minus 1 so last byte in array will always be null
  sprintf (Buffer32Bytes, "LORA Relay %s -> Queued:%d", relay_msgtypes[message_type], idx);
  Output (Buffer32Bytes);
 23e8740:	f7fc ffa4 	bl	23e568c <_Z6OutputPKc>
}
 23e8744:	b007      	add	sp, #28
 23e8746:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((obs[0] == 'L') && (obs[1] == 'R')) {
 23e8748:	2a4c      	cmp	r2, #76	; 0x4c
 23e874a:	d101      	bne.n	23e8750 <_Z14lora_relay_msgPc+0x7c>
 23e874c:	2b52      	cmp	r3, #82	; 0x52
 23e874e:	d009      	beq.n	23e8764 <_Z14lora_relay_msgPc+0x90>
    sprintf (Buffer32Bytes, "LORA Relay %c%c Unkn", obs[0], obs[1]);
 23e8750:	4917      	ldr	r1, [pc, #92]	; (23e87b0 <_Z14lora_relay_msgPc+0xdc>)
 23e8752:	4814      	ldr	r0, [pc, #80]	; (23e87a4 <_Z14lora_relay_msgPc+0xd0>)
 23e8754:	f00e fe88 	bl	23f7468 <sprintf>
    Output (Buffer32Bytes);
 23e8758:	4812      	ldr	r0, [pc, #72]	; (23e87a4 <_Z14lora_relay_msgPc+0xd0>)
}
 23e875a:	b007      	add	sp, #28
 23e875c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    Output (Buffer32Bytes);
 23e8760:	f7fc bf94 	b.w	23e568c <_Z6OutputPKc>
    message_type = 2; 
 23e8764:	2502      	movs	r5, #2
 23e8766:	e7be      	b.n	23e86e6 <_Z14lora_relay_msgPc+0x12>
  m->need2log = true;
 23e8768:	f44f 7384 	mov.w	r3, #264	; 0x108
 23e876c:	2101      	movs	r1, #1
 23e876e:	4363      	muls	r3, r4
 23e8770:	4810      	ldr	r0, [pc, #64]	; (23e87b4 <_Z14lora_relay_msgPc+0xe0>)
 23e8772:	18c2      	adds	r2, r0, r3
 23e8774:	54c1      	strb	r1, [r0, r3]
  strncpy (m->message, message, LORA_RELAY_MSG_LENGTH-1); // minus 1 so last byte in array will always be null
 23e8776:	3308      	adds	r3, #8
 23e8778:	4639      	mov	r1, r7
  m->message_type = message_type;
 23e877a:	6055      	str	r5, [r2, #4]
  strncpy (m->message, message, LORA_RELAY_MSG_LENGTH-1); // minus 1 so last byte in array will always be null
 23e877c:	4418      	add	r0, r3
 23e877e:	22ff      	movs	r2, #255	; 0xff
 23e8780:	f014 f86b 	bl	23fc85a <strncpy>
  sprintf (Buffer32Bytes, "LORA Relay %s -> Queued:%d", relay_msgtypes[message_type], idx);
 23e8784:	4623      	mov	r3, r4
 23e8786:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 23e878a:	490b      	ldr	r1, [pc, #44]	; (23e87b8 <_Z14lora_relay_msgPc+0xe4>)
 23e878c:	4805      	ldr	r0, [pc, #20]	; (23e87a4 <_Z14lora_relay_msgPc+0xd0>)
 23e878e:	f00e fe6b 	bl	23f7468 <sprintf>
  Output (Buffer32Bytes);
 23e8792:	4804      	ldr	r0, [pc, #16]	; (23e87a4 <_Z14lora_relay_msgPc+0xd0>)
 23e8794:	e7d4      	b.n	23e8740 <_Z14lora_relay_msgPc+0x6c>
 23e8796:	bf00      	nop
 23e8798:	023fd69c 	.word	0x023fd69c
 23e879c:	1006a1b0 	.word	0x1006a1b0
 23e87a0:	023fd69e 	.word	0x023fd69e
 23e87a4:	1006a287 	.word	0x1006a287
 23e87a8:	023fd6b4 	.word	0x023fd6b4
 23e87ac:	023fd6c7 	.word	0x023fd6c7
 23e87b0:	023fd687 	.word	0x023fd687
 23e87b4:	1006aec0 	.word	0x1006aec0
 23e87b8:	023fd6da 	.word	0x023fd6da

023e87bc <_Z10SD_findKeyPK19__FlashStringHelperPc>:
 *  myInt_1=2
 *  myFloat_1=0.74
 * =======================================================================================================================
 */

int SD_findKey(const __FlashStringHelper * key, char * value) {
 23e87bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23e87c0:	4607      	mov	r7, r0
 23e87c2:	b0ac      	sub	sp, #176	; 0xb0
  
  // Disable LoRA SPI0 Chip Select
  pinMode(LORA_SS, OUTPUT);
 23e87c4:	2003      	movs	r0, #3
int SD_findKey(const __FlashStringHelper * key, char * value) {
 23e87c6:	460e      	mov	r6, r1
  pinMode(LORA_SS, OUTPUT);
 23e87c8:	2101      	movs	r1, #1
 23e87ca:	f011 f937 	bl	23f9a3c <pinMode>
  digitalWrite(LORA_SS, HIGH);
 23e87ce:	2101      	movs	r1, #1
 23e87d0:	2003      	movs	r0, #3
 23e87d2:	f011 f944 	bl	23f9a5e <digitalWrite>
  
  File configFile = SD.open(CF_NAME);
 23e87d6:	2300      	movs	r3, #0
 23e87d8:	4a29      	ldr	r2, [pc, #164]	; (23e8880 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xc4>)
 23e87da:	492a      	ldr	r1, [pc, #168]	; (23e8884 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xc8>)
 23e87dc:	a818      	add	r0, sp, #96	; 0x60
 23e87de:	f00d f9a5 	bl	23f5b2c <_ZN8FsVolume4openEPKci>
 23e87e2:	a81c      	add	r0, sp, #112	; 0x70
 23e87e4:	f7fc fd05 	bl	23e51f2 <_ZNK10FsBaseFile6isOpenEv>

  if (!configFile) {
 23e87e8:	4604      	mov	r4, r0
 23e87ea:	2800      	cmp	r0, #0
 23e87ec:	d035      	beq.n	23e885a <_Z10SD_findKeyPK19__FlashStringHelperPc+0x9e>
 23e87ee:	466b      	mov	r3, sp
    return(0);
  }

  char key_string[KEY_MAX_LENGTH];
  char SD_buffer[KEY_MAX_LENGTH + VALUE_MAX_LENGTH + 1]; // 1 is = character
  int key_length = 0;
 23e87f0:	2500      	movs	r5, #0
 23e87f2:	4698      	mov	r8, r3
  // Flash string to string
  PGM_P keyPoiter;
  keyPoiter = reinterpret_cast<PGM_P>(key);
  byte ch;
  do {
    ch = pgm_read_byte(keyPoiter++);
 23e87f4:	5d7a      	ldrb	r2, [r7, r5]
    if (ch != 0)
 23e87f6:	2a00      	cmp	r2, #0
 23e87f8:	d13d      	bne.n	23e8876 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xba>
    // WINDOWS uses CFLF = \r\n
    int buffer_length = configFile.readBytesUntil('\n', SD_buffer, LINE_MAX_LENGTH);
    if (SD_buffer[buffer_length - 1] == '\r')
      buffer_length--; // trim the \r

    if (buffer_length > (key_length + 1)) { // 1 is = character
 23e87fa:	1c6f      	adds	r7, r5, #1
  int available() override { return BaseFile::available(); }
 23e87fc:	a81c      	add	r0, sp, #112	; 0x70
 23e87fe:	f7fc fcbf 	bl	23e5180 <_ZNK10FsBaseFile9availableEv>
  while (configFile.available()) {
 23e8802:	4604      	mov	r4, r0
 23e8804:	b328      	cbz	r0, 23e8852 <_Z10SD_findKeyPK19__FlashStringHelperPc+0x96>
    int buffer_length = configFile.readBytesUntil('\n', SD_buffer, LINE_MAX_LENGTH);
 23e8806:	233f      	movs	r3, #63	; 0x3f
 23e8808:	aa08      	add	r2, sp, #32
 23e880a:	210a      	movs	r1, #10
 23e880c:	a818      	add	r0, sp, #96	; 0x60
 23e880e:	f010 faf0 	bl	23f8df2 <_ZN6Stream14readBytesUntilEcPcj>
 23e8812:	4604      	mov	r4, r0
    if (SD_buffer[buffer_length - 1] == '\r')
 23e8814:	1e43      	subs	r3, r0, #1
 23e8816:	aa2c      	add	r2, sp, #176	; 0xb0
 23e8818:	441a      	add	r2, r3
 23e881a:	f812 2c90 	ldrb.w	r2, [r2, #-144]
      buffer_length--; // trim the \r
 23e881e:	2a0d      	cmp	r2, #13
 23e8820:	bf08      	it	eq
 23e8822:	461c      	moveq	r4, r3
    if (buffer_length > (key_length + 1)) { // 1 is = character
 23e8824:	42a7      	cmp	r7, r4
 23e8826:	dae9      	bge.n	23e87fc <_Z10SD_findKeyPK19__FlashStringHelperPc+0x40>
      if (memcmp(SD_buffer, key_string, key_length) == 0) { // equal
 23e8828:	462a      	mov	r2, r5
 23e882a:	4641      	mov	r1, r8
 23e882c:	a808      	add	r0, sp, #32
 23e882e:	f013 ff49 	bl	23fc6c4 <memcmp>
 23e8832:	2800      	cmp	r0, #0
 23e8834:	d1e2      	bne.n	23e87fc <_Z10SD_findKeyPK19__FlashStringHelperPc+0x40>
        if (SD_buffer[key_length] == '=') {
 23e8836:	ab2c      	add	r3, sp, #176	; 0xb0
 23e8838:	442b      	add	r3, r5
 23e883a:	f813 3c90 	ldrb.w	r3, [r3, #-144]
 23e883e:	2b3d      	cmp	r3, #61	; 0x3d
 23e8840:	d1dc      	bne.n	23e87fc <_Z10SD_findKeyPK19__FlashStringHelperPc+0x40>
          value_length = buffer_length - key_length - 1;
 23e8842:	1b64      	subs	r4, r4, r5
 23e8844:	3c01      	subs	r4, #1
          memcpy(value, SD_buffer + key_length + 1, value_length);
 23e8846:	ab08      	add	r3, sp, #32
 23e8848:	4622      	mov	r2, r4
 23e884a:	4630      	mov	r0, r6
 23e884c:	19d9      	adds	r1, r3, r7
 23e884e:	f013 ff49 	bl	23fc6e4 <memcpy>
        }
      }
    }
  }

  configFile.close();  // close the file
 23e8852:	a81c      	add	r0, sp, #112	; 0x70
 23e8854:	f00d f891 	bl	23f597a <_ZN10FsBaseFile5closeEv>
  return value_length;
 23e8858:	e009      	b.n	23e886e <_Z10SD_findKeyPK19__FlashStringHelperPc+0xb2>
    Serial.print(F("SD Card: error on opening file "));
 23e885a:	f010 fe91 	bl	23f9580 <_Z16_fetch_usbserialv>
 23e885e:	490a      	ldr	r1, [pc, #40]	; (23e8888 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xcc>)
 23e8860:	f010 f92b 	bl	23f8aba <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println(CF_NAME);
 23e8864:	f010 fe8c 	bl	23f9580 <_Z16_fetch_usbserialv>
 23e8868:	4905      	ldr	r1, [pc, #20]	; (23e8880 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xc4>)
 23e886a:	f010 f936 	bl	23f8ada <_ZN5Print7printlnEPKc>
}
 23e886e:	4620      	mov	r0, r4
 23e8870:	b02c      	add	sp, #176	; 0xb0
 23e8872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      key_string[key_length++] = ch;
 23e8876:	3501      	adds	r5, #1
 23e8878:	f803 2b01 	strb.w	r2, [r3], #1
  } while (ch != 0);
 23e887c:	e7ba      	b.n	23e87f4 <_Z10SD_findKeyPK19__FlashStringHelperPc+0x38>
 23e887e:	bf00      	nop
 23e8880:	023fd6f5 	.word	0x023fd6f5
 23e8884:	1006a2d4 	.word	0x1006a2d4
 23e8888:	023fd700 	.word	0x023fd700

023e888c <_Z16HELPER_ascii2IntPci>:

int HELPER_ascii2Int(char *ascii, int length) {
  int sign = 1;
  int number = 0;

  for (int i = 0; i < length; i++) {
 23e888c:	2300      	movs	r3, #0
int HELPER_ascii2Int(char *ascii, int length) {
 23e888e:	b5f0      	push	{r4, r5, r6, r7, lr}
  int number = 0;
 23e8890:	461c      	mov	r4, r3
  int sign = 1;
 23e8892:	2501      	movs	r5, #1
    char c = *(ascii + i);
    if (i == 0 && c == '-')
      sign = -1;
    else {
      if (c >= '0' && c <= '9')
        number = number * 10 + (c - '0');
 23e8894:	260a      	movs	r6, #10
  for (int i = 0; i < length; i++) {
 23e8896:	428b      	cmp	r3, r1
 23e8898:	da0e      	bge.n	23e88b8 <_Z16HELPER_ascii2IntPci+0x2c>
    char c = *(ascii + i);
 23e889a:	5cc2      	ldrb	r2, [r0, r3]
    if (i == 0 && c == '-')
 23e889c:	b90b      	cbnz	r3, 23e88a2 <_Z16HELPER_ascii2IntPci+0x16>
 23e889e:	2a2d      	cmp	r2, #45	; 0x2d
 23e88a0:	d007      	beq.n	23e88b2 <_Z16HELPER_ascii2IntPci+0x26>
      if (c >= '0' && c <= '9')
 23e88a2:	3a30      	subs	r2, #48	; 0x30
 23e88a4:	b2d7      	uxtb	r7, r2
 23e88a6:	2f09      	cmp	r7, #9
 23e88a8:	d801      	bhi.n	23e88ae <_Z16HELPER_ascii2IntPci+0x22>
        number = number * 10 + (c - '0');
 23e88aa:	fb06 2404 	mla	r4, r6, r4, r2
  for (int i = 0; i < length; i++) {
 23e88ae:	3301      	adds	r3, #1
 23e88b0:	e7f1      	b.n	23e8896 <_Z16HELPER_ascii2IntPci+0xa>
      sign = -1;
 23e88b2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 23e88b6:	e7fa      	b.n	23e88ae <_Z16HELPER_ascii2IntPci+0x22>
    }
  }

  return number * sign;
}
 23e88b8:	fb04 f005 	mul.w	r0, r4, r5
 23e88bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

023e88be <_Z20HELPER_ascii2CharStrPci>:
    str += String(c);
  }
  return str;
}

char* HELPER_ascii2CharStr(char *ascii, int length) {
 23e88be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23e88c0:	4606      	mov	r6, r0
  char *str;
  str = (char *) malloc (length+1);
 23e88c2:	1c48      	adds	r0, r1, #1
char* HELPER_ascii2CharStr(char *ascii, int length) {
 23e88c4:	460c      	mov	r4, r1
  str = (char *) malloc (length+1);
 23e88c6:	f00e fda5 	bl	23f7414 <malloc>
  str[0] = 0;
 23e88ca:	2100      	movs	r1, #0
  str = (char *) malloc (length+1);
 23e88cc:	4605      	mov	r5, r0
  for (int i = 0; i < length; i++) {
    char c = *(ascii + i);
    str[i] = c;
    str[i+1] = 0;
 23e88ce:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
  str[0] = 0;
 23e88d2:	f800 1b01 	strb.w	r1, [r0], #1
    str[i+1] = 0;
 23e88d6:	9201      	str	r2, [sp, #4]
 23e88d8:	f013 ff11 	bl	23fc6fe <memset>
    str[i] = c;
 23e88dc:	4631      	mov	r1, r6
 23e88de:	4628      	mov	r0, r5
 23e88e0:	9a01      	ldr	r2, [sp, #4]
 23e88e2:	f013 feff 	bl	23fc6e4 <memcpy>
  }
  return str;
}
 23e88e6:	4628      	mov	r0, r5
 23e88e8:	b002      	add	sp, #8
 23e88ea:	bd70      	pop	{r4, r5, r6, pc}

023e88ec <_Z10SD_findIntPK19__FlashStringHelper>:
  char value_string[VALUE_MAX_LENGTH];
  int value_length = SD_findKey(key, value_string);
  return value_length > 0;
}

int SD_findInt(const __FlashStringHelper * key) {
 23e88ec:	b500      	push	{lr}
 23e88ee:	b089      	sub	sp, #36	; 0x24
  char value_string[VALUE_MAX_LENGTH];
  int value_length = SD_findKey(key, value_string);
 23e88f0:	4669      	mov	r1, sp
 23e88f2:	f7ff ff63 	bl	23e87bc <_Z10SD_findKeyPK19__FlashStringHelperPc>
 23e88f6:	4601      	mov	r1, r0
  return HELPER_ascii2Int(value_string, value_length);
 23e88f8:	4668      	mov	r0, sp
 23e88fa:	f7ff ffc7 	bl	23e888c <_Z16HELPER_ascii2IntPci>
}
 23e88fe:	b009      	add	sp, #36	; 0x24
 23e8900:	f85d fb04 	ldr.w	pc, [sp], #4

023e8904 <_Z14SD_findCharStrPK19__FlashStringHelper>:
  char value_string[VALUE_MAX_LENGTH];
  int value_length = SD_findKey(key, value_string);
  return HELPER_ascii2String(value_string, value_length);
}

char* SD_findCharStr(const __FlashStringHelper * key) {
 23e8904:	b500      	push	{lr}
 23e8906:	b089      	sub	sp, #36	; 0x24
  char value_string[VALUE_MAX_LENGTH];
  int value_length = SD_findKey(key, value_string);
 23e8908:	4669      	mov	r1, sp
 23e890a:	f7ff ff57 	bl	23e87bc <_Z10SD_findKeyPK19__FlashStringHelperPc>
 23e890e:	4601      	mov	r1, r0
  return HELPER_ascii2CharStr(value_string, value_length);
 23e8910:	4668      	mov	r0, sp
 23e8912:	f7ff ffd4 	bl	23e88be <_Z20HELPER_ascii2CharStrPci>
}
 23e8916:	b009      	add	sp, #36	; 0x24
 23e8918:	f85d fb04 	ldr.w	pc, [sp], #4

023e891c <_Z17SD_ReadConfigFilev>:
/* 
 * =======================================================================================================================
 * SD_ReadConfigFile()
 * =======================================================================================================================
 */
void SD_ReadConfigFile() {
 23e891c:	b510      	push	{r4, lr}
  cf_aes_pkey     = SD_findCharStr(F("aes_pkey"));
 23e891e:	4822      	ldr	r0, [pc, #136]	; (23e89a8 <_Z17SD_ReadConfigFilev+0x8c>)
 23e8920:	f7ff fff0 	bl	23e8904 <_Z14SD_findCharStrPK19__FlashStringHelper>
  sprintf(msgbuf, "CF:aes_pkey=[%s]", cf_aes_pkey); Output (msgbuf);
 23e8924:	4c21      	ldr	r4, [pc, #132]	; (23e89ac <_Z17SD_ReadConfigFilev+0x90>)
  cf_aes_pkey     = SD_findCharStr(F("aes_pkey"));
 23e8926:	4b22      	ldr	r3, [pc, #136]	; (23e89b0 <_Z17SD_ReadConfigFilev+0x94>)
 23e8928:	4602      	mov	r2, r0
 23e892a:	6018      	str	r0, [r3, #0]
  sprintf(msgbuf, "CF:aes_pkey=[%s]", cf_aes_pkey); Output (msgbuf);
 23e892c:	4921      	ldr	r1, [pc, #132]	; (23e89b4 <_Z17SD_ReadConfigFilev+0x98>)
 23e892e:	4620      	mov	r0, r4
 23e8930:	f00e fd9a 	bl	23f7468 <sprintf>
 23e8934:	4620      	mov	r0, r4
 23e8936:	f7fc fea9 	bl	23e568c <_Z6OutputPKc>

  cf_aes_myiv     = SD_findLong(F("aes_myiv"));
 23e893a:	481f      	ldr	r0, [pc, #124]	; (23e89b8 <_Z17SD_ReadConfigFilev+0x9c>)
 23e893c:	f7ff ffd6 	bl	23e88ec <_Z10SD_findIntPK19__FlashStringHelper>
 23e8940:	4b1e      	ldr	r3, [pc, #120]	; (23e89bc <_Z17SD_ReadConfigFilev+0xa0>)
 23e8942:	4602      	mov	r2, r0
 23e8944:	6018      	str	r0, [r3, #0]
  sprintf(msgbuf, "CF:aes_myiv=[%lu]", cf_aes_myiv);   Output (msgbuf);
 23e8946:	491e      	ldr	r1, [pc, #120]	; (23e89c0 <_Z17SD_ReadConfigFilev+0xa4>)
 23e8948:	4620      	mov	r0, r4
 23e894a:	f00e fd8d 	bl	23f7468 <sprintf>
 23e894e:	4620      	mov	r0, r4
 23e8950:	f7fc fe9c 	bl	23e568c <_Z6OutputPKc>

  cf_lora_unitid  = SD_findInt(F("lora_unitid"));
 23e8954:	481b      	ldr	r0, [pc, #108]	; (23e89c4 <_Z17SD_ReadConfigFilev+0xa8>)
 23e8956:	f7ff ffc9 	bl	23e88ec <_Z10SD_findIntPK19__FlashStringHelper>
 23e895a:	4b1b      	ldr	r3, [pc, #108]	; (23e89c8 <_Z17SD_ReadConfigFilev+0xac>)
 23e895c:	4602      	mov	r2, r0
 23e895e:	6018      	str	r0, [r3, #0]
  sprintf(msgbuf, "CF:lora_unitid=[%d]", cf_lora_unitid); Output (msgbuf);
 23e8960:	491a      	ldr	r1, [pc, #104]	; (23e89cc <_Z17SD_ReadConfigFilev+0xb0>)
 23e8962:	4620      	mov	r0, r4
 23e8964:	f00e fd80 	bl	23f7468 <sprintf>
 23e8968:	4620      	mov	r0, r4
 23e896a:	f7fc fe8f 	bl	23e568c <_Z6OutputPKc>

  cf_lora_txpower = SD_findInt(F("lora_txpower"));
 23e896e:	4818      	ldr	r0, [pc, #96]	; (23e89d0 <_Z17SD_ReadConfigFilev+0xb4>)
 23e8970:	f7ff ffbc 	bl	23e88ec <_Z10SD_findIntPK19__FlashStringHelper>
 23e8974:	4b17      	ldr	r3, [pc, #92]	; (23e89d4 <_Z17SD_ReadConfigFilev+0xb8>)
 23e8976:	4602      	mov	r2, r0
 23e8978:	6018      	str	r0, [r3, #0]
  sprintf(msgbuf, "CF:lora_txpower=[%d]", cf_lora_txpower); Output (msgbuf);
 23e897a:	4917      	ldr	r1, [pc, #92]	; (23e89d8 <_Z17SD_ReadConfigFilev+0xbc>)
 23e897c:	4620      	mov	r0, r4
 23e897e:	f00e fd73 	bl	23f7468 <sprintf>
 23e8982:	4620      	mov	r0, r4
 23e8984:	f7fc fe82 	bl	23e568c <_Z6OutputPKc>

  cf_lora_freq   = SD_findInt(F("lora_freq"));
 23e8988:	4814      	ldr	r0, [pc, #80]	; (23e89dc <_Z17SD_ReadConfigFilev+0xc0>)
 23e898a:	f7ff ffaf 	bl	23e88ec <_Z10SD_findIntPK19__FlashStringHelper>
 23e898e:	4b14      	ldr	r3, [pc, #80]	; (23e89e0 <_Z17SD_ReadConfigFilev+0xc4>)
 23e8990:	4602      	mov	r2, r0
 23e8992:	6018      	str	r0, [r3, #0]
  sprintf(msgbuf, "CF:lora_freq=[%d]", cf_lora_freq); Output (msgbuf);
 23e8994:	4913      	ldr	r1, [pc, #76]	; (23e89e4 <_Z17SD_ReadConfigFilev+0xc8>)
 23e8996:	4620      	mov	r0, r4
 23e8998:	f00e fd66 	bl	23f7468 <sprintf>
 23e899c:	4620      	mov	r0, r4
 23e899e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sprintf(msgbuf, "CF:lora_freq=[%d]", cf_lora_freq); Output (msgbuf);
 23e89a2:	f7fc be73 	b.w	23e568c <_Z6OutputPKc>
 23e89a6:	bf00      	nop
 23e89a8:	023fd720 	.word	0x023fd720
 23e89ac:	1006f128 	.word	0x1006f128
 23e89b0:	1006ac7c 	.word	0x1006ac7c
 23e89b4:	023fd729 	.word	0x023fd729
 23e89b8:	023fd73a 	.word	0x023fd73a
 23e89bc:	1006ac78 	.word	0x1006ac78
 23e89c0:	023fd743 	.word	0x023fd743
 23e89c4:	023fd755 	.word	0x023fd755
 23e89c8:	1006a198 	.word	0x1006a198
 23e89cc:	023fd761 	.word	0x023fd761
 23e89d0:	023fd775 	.word	0x023fd775
 23e89d4:	1006a194 	.word	0x1006a194
 23e89d8:	023fd782 	.word	0x023fd782
 23e89dc:	023fd797 	.word	0x023fd797
 23e89e0:	1006a190 	.word	0x1006a190
 23e89e4:	023fd7a1 	.word	0x023fd7a1

023e89e8 <_Z9OBS_Cleari>:
 * ======================================================================================================================
 * OBS_Clear() - Set OBS to not in use
 * ======================================================================================================================
 */
void OBS_Clear(int i) {
  obs[i].inuse =false;
 23e89e8:	f640 2398 	movw	r3, #2712	; 0xa98
 23e89ec:	4358      	muls	r0, r3
 23e89ee:	2300      	movs	r3, #0
 23e89f0:	4a05      	ldr	r2, [pc, #20]	; (23e8a08 <_Z9OBS_Cleari+0x20>)
 23e89f2:	5413      	strb	r3, [r2, r0]
  for (int s=0; s<MAX_SENSORS; s++) {
 23e89f4:	4410      	add	r0, r2
    obs[i].sensor[s].inuse = false;
 23e89f6:	461a      	mov	r2, r3
  for (int s=0; s<MAX_SENSORS; s++) {
 23e89f8:	3301      	adds	r3, #1
 23e89fa:	2b60      	cmp	r3, #96	; 0x60
    obs[i].sensor[s].inuse = false;
 23e89fc:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  for (int s=0; s<MAX_SENSORS; s++) {
 23e8a00:	f100 001c 	add.w	r0, r0, #28
 23e8a04:	d1f8      	bne.n	23e89f8 <_Z9OBS_Cleari+0x10>
  }
}
 23e8a06:	4770      	bx	lr
 23e8a08:	1006f550 	.word	0x1006f550

023e8a0c <_Z11OBS_N2S_Addi>:
/*
 * ======================================================================================================================
 * OBS_N2S_Add() - Save OBS to N2S file
 * ======================================================================================================================
 */
void OBS_N2S_Add(int i) {
 23e8a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (obs[i].inuse) {     // Sanity check
 23e8a10:	f640 2598 	movw	r5, #2712	; 0xa98
 23e8a14:	4345      	muls	r5, r0
 23e8a16:	f8df 9198 	ldr.w	r9, [pc, #408]	; 23e8bb0 <_Z11OBS_N2S_Addi+0x1a4>
void OBS_N2S_Add(int i) {
 23e8a1a:	4607      	mov	r7, r0
  if (obs[i].inuse) {     // Sanity check
 23e8a1c:	f819 3005 	ldrb.w	r3, [r9, r5]
void OBS_N2S_Add(int i) {
 23e8a20:	b097      	sub	sp, #92	; 0x5c
  if (obs[i].inuse) {     // Sanity check
 23e8a22:	eb09 0405 	add.w	r4, r9, r5
 23e8a26:	2b00      	cmp	r3, #0
 23e8a28:	f000 809a 	beq.w	23e8b60 <_Z11OBS_N2S_Addi+0x154>
    char ts[32];
    
    memset(msgbuf, 0, sizeof(msgbuf));
 23e8a2c:	f8df 8170 	ldr.w	r8, [pc, #368]	; 23e8ba0 <_Z11OBS_N2S_Addi+0x194>
 23e8a30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 23e8a34:	2100      	movs	r1, #0
 23e8a36:	4640      	mov	r0, r8
 23e8a38:	f013 fe61 	bl	23fc6fe <memset>

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
 23e8a3c:	4b53      	ldr	r3, [pc, #332]	; (23e8b8c <_Z11OBS_N2S_Addi+0x180>)
        state_(BEGIN) {
 23e8a3e:	2600      	movs	r6, #0
        n_(0) {
 23e8a40:	9309      	str	r3, [sp, #36]	; 0x24
 23e8a42:	f240 33ff 	movw	r3, #1023	; 0x3ff

    JSONBufferWriter writer(msgbuf, sizeof(msgbuf)-1);
    writer.beginObject();
 23e8a46:	a809      	add	r0, sp, #36	; 0x24
 23e8a48:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
        state_(BEGIN) {
 23e8a4c:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
        n_(0) {
 23e8a50:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 23e8a54:	f00f fd1f 	bl	23f8496 <_ZN5spark10JSONWriter11beginObjectEv>

    sprintf (ts, "%d-%02d-%02dT%02d:%02d:%02d",
 23e8a58:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23e8a5c:	f010 fb58 	bl	23f9110 <_ZN9TimeClass4yearEx>
 23e8a60:	9007      	str	r0, [sp, #28]
 23e8a62:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23e8a66:	f010 fb49 	bl	23f90fc <_ZN9TimeClass5monthEx>
 23e8a6a:	9006      	str	r0, [sp, #24]
 23e8a6c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23e8a70:	f010 fb3c 	bl	23f90ec <_ZN9TimeClass3dayEx>
 23e8a74:	9005      	str	r0, [sp, #20]
 23e8a76:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23e8a7a:	f010 fb1f 	bl	23f90bc <_ZN9TimeClass4hourEx>
 23e8a7e:	4682      	mov	sl, r0
 23e8a80:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23e8a84:	f010 fb22 	bl	23f90cc <_ZN9TimeClass6minuteEx>
 23e8a88:	4683      	mov	fp, r0
 23e8a8a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23e8a8e:	f010 fb25 	bl	23f90dc <_ZN9TimeClass6secondEx>
 23e8a92:	9b05      	ldr	r3, [sp, #20]
 23e8a94:	e9cd b002 	strd	fp, r0, [sp, #8]
 23e8a98:	493d      	ldr	r1, [pc, #244]	; (23e8b90 <_Z11OBS_N2S_Addi+0x184>)
 23e8a9a:	f8cd a004 	str.w	sl, [sp, #4]
 23e8a9e:	9300      	str	r3, [sp, #0]
 23e8aa0:	a80e      	add	r0, sp, #56	; 0x38
 23e8aa2:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 23e8aa6:	f00e fcdf 	bl	23f7468 <sprintf>
      Time.year(obs[i].ts), Time.month(obs[i].ts), Time.day(obs[i].ts),
      Time.hour(obs[i].ts), Time.minute(obs[i].ts), Time.second(obs[i].ts));

    writer.name("at").value(ts);
 23e8aaa:	493a      	ldr	r1, [pc, #232]	; (23e8b94 <_Z11OBS_N2S_Addi+0x188>)
 23e8aac:	a809      	add	r0, sp, #36	; 0x24
 23e8aae:	f7fc fb19 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23e8ab2:	a90e      	add	r1, sp, #56	; 0x38
 23e8ab4:	f7fc fa4c 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    writer.name("css").value(obs[i].css, 4);
 23e8ab8:	4937      	ldr	r1, [pc, #220]	; (23e8b98 <_Z11OBS_N2S_Addi+0x18c>)
 23e8aba:	a809      	add	r0, sp, #36	; 0x24
 23e8abc:	f7fc fb12 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23e8ac0:	4682      	mov	sl, r0
 23e8ac2:	6920      	ldr	r0, [r4, #16]
 23e8ac4:	f7fa fdf0 	bl	23e36a8 <__aeabi_f2d>
 23e8ac8:	ec41 0b10 	vmov	d0, r0, r1
 23e8acc:	2104      	movs	r1, #4
 23e8ace:	4650      	mov	r0, sl
 23e8ad0:	f00f fd38 	bl	23f8544 <_ZN5spark10JSONWriter5valueEdi>

    // Modify System Status and Set From Need to Send file bit
    obs[i].hth |= SSB_FROM_N2S; // Turn On Bit
 23e8ad4:	6963      	ldr	r3, [r4, #20]
    writer.name("hth").value((int) obs[i].hth);
 23e8ad6:	4931      	ldr	r1, [pc, #196]	; (23e8b9c <_Z11OBS_N2S_Addi+0x190>)
    obs[i].hth |= SSB_FROM_N2S; // Turn On Bit
 23e8ad8:	f043 0320 	orr.w	r3, r3, #32
 23e8adc:	6163      	str	r3, [r4, #20]
    writer.name("hth").value((int) obs[i].hth);
 23e8ade:	a809      	add	r0, sp, #36	; 0x24
 23e8ae0:	f7fc fb00 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23e8ae4:	6961      	ldr	r1, [r4, #20]
 23e8ae6:	f00f fce3 	bl	23f84b0 <_ZN5spark10JSONWriter5valueEi>

    for (int s=0; s<MAX_SENSORS; s++) {
 23e8aea:	3518      	adds	r5, #24
            break;
          case U_OBS :
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
            break;
          default : // Should never happen
            Output ("WhyAmIHere?");
 23e8aec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 23e8bb4 <_Z11OBS_N2S_Addi+0x1a8>
 23e8af0:	44a9      	add	r9, r5
      if (obs[i].sensor[s].inuse) {
 23e8af2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 23e8af6:	b1a3      	cbz	r3, 23e8b22 <_Z11OBS_N2S_Addi+0x116>
        switch (obs[i].sensor[s].type) {
 23e8af8:	6a23      	ldr	r3, [r4, #32]
 23e8afa:	2b01      	cmp	r3, #1
 23e8afc:	d033      	beq.n	23e8b66 <_Z11OBS_N2S_Addi+0x15a>
 23e8afe:	2b02      	cmp	r3, #2
 23e8b00:	d039      	beq.n	23e8b76 <_Z11OBS_N2S_Addi+0x16a>
 23e8b02:	2b00      	cmp	r3, #0
 23e8b04:	d13d      	bne.n	23e8b82 <_Z11OBS_N2S_Addi+0x176>
            writer.name(obs[i].sensor[s].id).value(obs[i].sensor[s].f_obs, 1);
 23e8b06:	4649      	mov	r1, r9
 23e8b08:	a809      	add	r0, sp, #36	; 0x24
 23e8b0a:	f7fc faeb 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23e8b0e:	4605      	mov	r5, r0
 23e8b10:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23e8b12:	f7fa fdc9 	bl	23e36a8 <__aeabi_f2d>
 23e8b16:	ec41 0b10 	vmov	d0, r0, r1
 23e8b1a:	2101      	movs	r1, #1
 23e8b1c:	4628      	mov	r0, r5
 23e8b1e:	f00f fd11 	bl	23f8544 <_ZN5spark10JSONWriter5valueEdi>
    for (int s=0; s<MAX_SENSORS; s++) {
 23e8b22:	3601      	adds	r6, #1
 23e8b24:	2e60      	cmp	r6, #96	; 0x60
 23e8b26:	f104 041c 	add.w	r4, r4, #28
 23e8b2a:	f109 091c 	add.w	r9, r9, #28
 23e8b2e:	d1e0      	bne.n	23e8af2 <_Z11OBS_N2S_Addi+0xe6>
            break;
        }
      }
    }
    writer.endObject();
 23e8b30:	a809      	add	r0, sp, #36	; 0x24
 23e8b32:	f00f fc9a 	bl	23f846a <_ZN5spark10JSONWriter9endObjectEv>

    sprintf (msgbuf+strlen(msgbuf), ",FS");  // Add Particle Event Type after JSON structure
 23e8b36:	481a      	ldr	r0, [pc, #104]	; (23e8ba0 <_Z11OBS_N2S_Addi+0x194>)
 23e8b38:	f7fb fc4e 	bl	23e43d8 <strlen>
 23e8b3c:	4919      	ldr	r1, [pc, #100]	; (23e8ba4 <_Z11OBS_N2S_Addi+0x198>)
 23e8b3e:	4440      	add	r0, r8
 23e8b40:	f013 fe52 	bl	23fc7e8 <strcpy>
    SD_NeedToSend_Add(msgbuf); // Save to N2F File
 23e8b44:	4816      	ldr	r0, [pc, #88]	; (23e8ba0 <_Z11OBS_N2S_Addi+0x194>)
 23e8b46:	f7ff fd25 	bl	23e8594 <_Z17SD_NeedToSend_AddPc>
    sprintf (Buffer32Bytes, "OBS->%d Add N2S", i);
 23e8b4a:	463a      	mov	r2, r7
 23e8b4c:	4916      	ldr	r1, [pc, #88]	; (23e8ba8 <_Z11OBS_N2S_Addi+0x19c>)
 23e8b4e:	4817      	ldr	r0, [pc, #92]	; (23e8bac <_Z11OBS_N2S_Addi+0x1a0>)
 23e8b50:	f00e fc8a 	bl	23f7468 <sprintf>
    Output(Buffer32Bytes);
 23e8b54:	4815      	ldr	r0, [pc, #84]	; (23e8bac <_Z11OBS_N2S_Addi+0x1a0>)
 23e8b56:	f7fc fd99 	bl	23e568c <_Z6OutputPKc>
    Serial_write (msgbuf);
 23e8b5a:	4811      	ldr	r0, [pc, #68]	; (23e8ba0 <_Z11OBS_N2S_Addi+0x194>)
 23e8b5c:	f7fc fd6c 	bl	23e5638 <_Z12Serial_writePKc>
  }
}
 23e8b60:	b017      	add	sp, #92	; 0x5c
 23e8b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            writer.name(obs[i].sensor[s].id).value(obs[i].sensor[s].i_obs);
 23e8b66:	4649      	mov	r1, r9
 23e8b68:	a809      	add	r0, sp, #36	; 0x24
 23e8b6a:	f7fc fabb 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23e8b6e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
 23e8b70:	f00f fc9e 	bl	23f84b0 <_ZN5spark10JSONWriter5valueEi>
            break;
 23e8b74:	e7d5      	b.n	23e8b22 <_Z11OBS_N2S_Addi+0x116>
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
 23e8b76:	4649      	mov	r1, r9
 23e8b78:	a809      	add	r0, sp, #36	; 0x24
 23e8b7a:	f7fc fab3 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23e8b7e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 23e8b80:	e7f6      	b.n	23e8b70 <_Z11OBS_N2S_Addi+0x164>
            Output ("WhyAmIHere?");
 23e8b82:	4650      	mov	r0, sl
 23e8b84:	f7fc fd82 	bl	23e568c <_Z6OutputPKc>
            break;
 23e8b88:	e7cb      	b.n	23e8b22 <_Z11OBS_N2S_Addi+0x116>
 23e8b8a:	bf00      	nop
 23e8b8c:	023ff9b4 	.word	0x023ff9b4
 23e8b90:	023fce68 	.word	0x023fce68
 23e8b94:	023fd7b3 	.word	0x023fd7b3
 23e8b98:	023fd7b6 	.word	0x023fd7b6
 23e8b9c:	023fd7ba 	.word	0x023fd7ba
 23e8ba0:	1006f128 	.word	0x1006f128
 23e8ba4:	023fd7ca 	.word	0x023fd7ca
 23e8ba8:	023fd7ce 	.word	0x023fd7ce
 23e8bac:	1006a287 	.word	0x1006a287
 23e8bb0:	1006f550 	.word	0x1006f550
 23e8bb4:	023fd7be 	.word	0x023fd7be

023e8bb8 <_Z17OBS_FS_Build_JSONi>:
/*
 * ======================================================================================================================
 * OBS_FS_Build_JSON() - Create JSON observation in msgbuf
 * ======================================================================================================================
 */
bool OBS_FS_Build_JSON(int i) {
 23e8bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (obs[i].inuse) {     // Sanity check
 23e8bbc:	f640 2498 	movw	r4, #2712	; 0xa98
 23e8bc0:	4344      	muls	r4, r0
 23e8bc2:	f8df 814c 	ldr.w	r8, [pc, #332]	; 23e8d10 <_Z17OBS_FS_Build_JSONi+0x158>
bool OBS_FS_Build_JSON(int i) {
 23e8bc6:	b095      	sub	sp, #84	; 0x54
  if (obs[i].inuse) {     // Sanity check
 23e8bc8:	f818 7004 	ldrb.w	r7, [r8, r4]
 23e8bcc:	eb08 0504 	add.w	r5, r8, r4
 23e8bd0:	2f00      	cmp	r7, #0
 23e8bd2:	d07b      	beq.n	23e8ccc <_Z17OBS_FS_Build_JSONi+0x114>
    char ts[32];
    
    memset(msgbuf, 0, sizeof(msgbuf));
 23e8bd4:	4b48      	ldr	r3, [pc, #288]	; (23e8cf8 <_Z17OBS_FS_Build_JSONi+0x140>)
 23e8bd6:	2100      	movs	r1, #0
 23e8bd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 23e8bdc:	4618      	mov	r0, r3
 23e8bde:	f013 fd8e 	bl	23fc6fe <memset>
        state_(BEGIN) {
 23e8be2:	2600      	movs	r6, #0
        n_(0) {
 23e8be4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 23e8be8:	4a44      	ldr	r2, [pc, #272]	; (23e8cfc <_Z17OBS_FS_Build_JSONi+0x144>)
 23e8bea:	9009      	str	r0, [sp, #36]	; 0x24

    JSONBufferWriter writer(msgbuf, sizeof(msgbuf)-1);
    writer.beginObject();
 23e8bec:	a807      	add	r0, sp, #28
 23e8bee:	e9cd 360a 	strd	r3, r6, [sp, #40]	; 0x28
 23e8bf2:	9207      	str	r2, [sp, #28]
        state_(BEGIN) {
 23e8bf4:	f88d 6020 	strb.w	r6, [sp, #32]
 23e8bf8:	f00f fc4d 	bl	23f8496 <_ZN5spark10JSONWriter11beginObjectEv>

    sprintf (ts, "%d-%02d-%02dT%02d:%02d:%02d",
 23e8bfc:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23e8c00:	f010 fa86 	bl	23f9110 <_ZN9TimeClass4yearEx>
 23e8c04:	9005      	str	r0, [sp, #20]
 23e8c06:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23e8c0a:	f010 fa77 	bl	23f90fc <_ZN9TimeClass5monthEx>
 23e8c0e:	9004      	str	r0, [sp, #16]
 23e8c10:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23e8c14:	f010 fa6a 	bl	23f90ec <_ZN9TimeClass3dayEx>
 23e8c18:	4681      	mov	r9, r0
 23e8c1a:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23e8c1e:	f010 fa4d 	bl	23f90bc <_ZN9TimeClass4hourEx>
 23e8c22:	4682      	mov	sl, r0
 23e8c24:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23e8c28:	f010 fa50 	bl	23f90cc <_ZN9TimeClass6minuteEx>
 23e8c2c:	4683      	mov	fp, r0
 23e8c2e:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 23e8c32:	f010 fa53 	bl	23f90dc <_ZN9TimeClass6secondEx>
 23e8c36:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 23e8c3a:	e9cd b002 	strd	fp, r0, [sp, #8]
 23e8c3e:	e9cd 9a00 	strd	r9, sl, [sp]
 23e8c42:	492f      	ldr	r1, [pc, #188]	; (23e8d00 <_Z17OBS_FS_Build_JSONi+0x148>)
 23e8c44:	a80c      	add	r0, sp, #48	; 0x30
 23e8c46:	f00e fc0f 	bl	23f7468 <sprintf>
      Time.year(obs[i].ts), Time.month(obs[i].ts), Time.day(obs[i].ts),
      Time.hour(obs[i].ts), Time.minute(obs[i].ts), Time.second(obs[i].ts));

    writer.name("at").value(ts);
 23e8c4a:	492e      	ldr	r1, [pc, #184]	; (23e8d04 <_Z17OBS_FS_Build_JSONi+0x14c>)
 23e8c4c:	a807      	add	r0, sp, #28
 23e8c4e:	f7fc fa49 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23e8c52:	a90c      	add	r1, sp, #48	; 0x30
 23e8c54:	f7fc f97c 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    writer.name("css").value(obs[i].css, 4);
 23e8c58:	492b      	ldr	r1, [pc, #172]	; (23e8d08 <_Z17OBS_FS_Build_JSONi+0x150>)
 23e8c5a:	a807      	add	r0, sp, #28
 23e8c5c:	f7fc fa42 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23e8c60:	4681      	mov	r9, r0
 23e8c62:	6928      	ldr	r0, [r5, #16]
 23e8c64:	f7fa fd20 	bl	23e36a8 <__aeabi_f2d>
 23e8c68:	ec41 0b10 	vmov	d0, r0, r1
 23e8c6c:	2104      	movs	r1, #4
 23e8c6e:	4648      	mov	r0, r9
 23e8c70:	f00f fc68 	bl	23f8544 <_ZN5spark10JSONWriter5valueEdi>
    writer.name("hth").value((int) obs[i].hth);
 23e8c74:	4925      	ldr	r1, [pc, #148]	; (23e8d0c <_Z17OBS_FS_Build_JSONi+0x154>)
 23e8c76:	a807      	add	r0, sp, #28
 23e8c78:	f7fc fa34 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23e8c7c:	6969      	ldr	r1, [r5, #20]
 23e8c7e:	f00f fc17 	bl	23f84b0 <_ZN5spark10JSONWriter5valueEi>

    for (int s=0; s<MAX_SENSORS; s++) {
 23e8c82:	3418      	adds	r4, #24
            break;
          case U_OBS :
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
            break;
          default : // Should never happen
            Output ("WhyAmIHere?");
 23e8c84:	f8df 908c 	ldr.w	r9, [pc, #140]	; 23e8d14 <_Z17OBS_FS_Build_JSONi+0x15c>
 23e8c88:	4444      	add	r4, r8
      if (obs[i].sensor[s].inuse) {
 23e8c8a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 23e8c8e:	b19b      	cbz	r3, 23e8cb8 <_Z17OBS_FS_Build_JSONi+0x100>
        switch (obs[i].sensor[s].type) {
 23e8c90:	6a2b      	ldr	r3, [r5, #32]
 23e8c92:	2b01      	cmp	r3, #1
 23e8c94:	d01e      	beq.n	23e8cd4 <_Z17OBS_FS_Build_JSONi+0x11c>
 23e8c96:	2b02      	cmp	r3, #2
 23e8c98:	d024      	beq.n	23e8ce4 <_Z17OBS_FS_Build_JSONi+0x12c>
 23e8c9a:	bb4b      	cbnz	r3, 23e8cf0 <_Z17OBS_FS_Build_JSONi+0x138>
            writer.name(obs[i].sensor[s].id).value(obs[i].sensor[s].f_obs, 1);
 23e8c9c:	4621      	mov	r1, r4
 23e8c9e:	a807      	add	r0, sp, #28
 23e8ca0:	f7fc fa20 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23e8ca4:	4680      	mov	r8, r0
 23e8ca6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 23e8ca8:	f7fa fcfe 	bl	23e36a8 <__aeabi_f2d>
 23e8cac:	ec41 0b10 	vmov	d0, r0, r1
 23e8cb0:	2101      	movs	r1, #1
 23e8cb2:	4640      	mov	r0, r8
 23e8cb4:	f00f fc46 	bl	23f8544 <_ZN5spark10JSONWriter5valueEdi>
    for (int s=0; s<MAX_SENSORS; s++) {
 23e8cb8:	3601      	adds	r6, #1
 23e8cba:	2e60      	cmp	r6, #96	; 0x60
 23e8cbc:	f105 051c 	add.w	r5, r5, #28
 23e8cc0:	f104 041c 	add.w	r4, r4, #28
 23e8cc4:	d1e1      	bne.n	23e8c8a <_Z17OBS_FS_Build_JSONi+0xd2>
            break;
        }
      }
    }
    writer.endObject();
 23e8cc6:	a807      	add	r0, sp, #28
 23e8cc8:	f00f fbcf 	bl	23f846a <_ZN5spark10JSONWriter9endObjectEv>
    return (true);
  }
  else {
    return (false);
  }
}
 23e8ccc:	4638      	mov	r0, r7
 23e8cce:	b015      	add	sp, #84	; 0x54
 23e8cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            writer.name(obs[i].sensor[s].id).value(obs[i].sensor[s].i_obs);
 23e8cd4:	4621      	mov	r1, r4
 23e8cd6:	a807      	add	r0, sp, #28
 23e8cd8:	f7fc fa04 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23e8cdc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
 23e8cde:	f00f fbe7 	bl	23f84b0 <_ZN5spark10JSONWriter5valueEi>
            break;
 23e8ce2:	e7e9      	b.n	23e8cb8 <_Z17OBS_FS_Build_JSONi+0x100>
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
 23e8ce4:	4621      	mov	r1, r4
 23e8ce6:	a807      	add	r0, sp, #28
 23e8ce8:	f7fc f9fc 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23e8cec:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 23e8cee:	e7f6      	b.n	23e8cde <_Z17OBS_FS_Build_JSONi+0x126>
            Output ("WhyAmIHere?");
 23e8cf0:	4648      	mov	r0, r9
 23e8cf2:	f7fc fccb 	bl	23e568c <_Z6OutputPKc>
            break;
 23e8cf6:	e7df      	b.n	23e8cb8 <_Z17OBS_FS_Build_JSONi+0x100>
 23e8cf8:	1006f128 	.word	0x1006f128
 23e8cfc:	023ff9b4 	.word	0x023ff9b4
 23e8d00:	023fce68 	.word	0x023fce68
 23e8d04:	023fd7b3 	.word	0x023fd7b3
 23e8d08:	023fd7b6 	.word	0x023fd7b6
 23e8d0c:	023fd7ba 	.word	0x023fd7ba
 23e8d10:	1006f550 	.word	0x1006f550
 23e8d14:	023fd7be 	.word	0x023fd7be

023e8d18 <_Z20OBS_Relay_Build_JSONv>:
 */
int OBS_Relay_Build_JSON() {
  LORA_MSG_RELAY_STR *m;
  int relay_type = 0;

  memset(msgbuf, 0, sizeof(msgbuf));
 23e8d18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 23e8d1c:	2100      	movs	r1, #0
int OBS_Relay_Build_JSON() {
 23e8d1e:	b538      	push	{r3, r4, r5, lr}
  memset(msgbuf, 0, sizeof(msgbuf));
 23e8d20:	480c      	ldr	r0, [pc, #48]	; (23e8d54 <_Z20OBS_Relay_Build_JSONv+0x3c>)
 23e8d22:	f013 fcec 	bl	23fc6fe <memset>
  JSONBufferWriter writer(msgbuf, sizeof(msgbuf)-1);

  // Locate message we need to log
  int i = lora_relay_need2log_idx();
 23e8d26:	f7fc fe61 	bl	23e59ec <_Z23lora_relay_need2log_idxv>
  if (i >= 0) {
 23e8d2a:	2800      	cmp	r0, #0
 23e8d2c:	db10      	blt.n	23e8d50 <_Z20OBS_Relay_Build_JSONv+0x38>
    m = &lora_msg_relay[i];
 23e8d2e:	f44f 7484 	mov.w	r4, #264	; 0x108
 23e8d32:	4344      	muls	r4, r0
    strncpy (msgbuf, m->message, LORA_RELAY_MSG_LENGTH-1); // minus 1 so last byte in array will always be null
 23e8d34:	4d08      	ldr	r5, [pc, #32]	; (23e8d58 <_Z20OBS_Relay_Build_JSONv+0x40>)
 23e8d36:	f104 0108 	add.w	r1, r4, #8
 23e8d3a:	22ff      	movs	r2, #255	; 0xff
 23e8d3c:	4805      	ldr	r0, [pc, #20]	; (23e8d54 <_Z20OBS_Relay_Build_JSONv+0x3c>)
 23e8d3e:	4429      	add	r1, r5
 23e8d40:	f013 fd8b 	bl	23fc85a <strncpy>
    relay_type = m->message_type;
 23e8d44:	1928      	adds	r0, r5, r4
 23e8d46:	6844      	ldr	r4, [r0, #4]
    lora_relay_msg_free(m);
 23e8d48:	f7fc fe2a 	bl	23e59a0 <_Z19lora_relay_msg_freeP18LORA_MSG_RELAY_STR>
  }
  return (relay_type);
}
 23e8d4c:	4620      	mov	r0, r4
 23e8d4e:	bd38      	pop	{r3, r4, r5, pc}
  int relay_type = 0;
 23e8d50:	2400      	movs	r4, #0
  return (relay_type);
 23e8d52:	e7fb      	b.n	23e8d4c <_Z20OBS_Relay_Build_JSONv+0x34>
 23e8d54:	1006f128 	.word	0x1006f128
 23e8d58:	1006aec0 	.word	0x1006aec0

023e8d5c <_Z7OBS_Logi>:
/*
 * ======================================================================================================================
 * OBS_Log() - Save OBS to Log file
 * ======================================================================================================================
 */
void OBS_Log(int i) {
 23e8d5c:	b507      	push	{r0, r1, r2, lr}
 23e8d5e:	9001      	str	r0, [sp, #4]
  if (OBS_FS_Build_JSON(i)) {
 23e8d60:	f7ff ff2a 	bl	23e8bb8 <_Z17OBS_FS_Build_JSONi>
 23e8d64:	9a01      	ldr	r2, [sp, #4]
 23e8d66:	b178      	cbz	r0, 23e8d88 <_Z7OBS_Logi+0x2c>
    sprintf (Buffer32Bytes, "OBS[%d]->SD", i);
 23e8d68:	4909      	ldr	r1, [pc, #36]	; (23e8d90 <_Z7OBS_Logi+0x34>)
 23e8d6a:	480a      	ldr	r0, [pc, #40]	; (23e8d94 <_Z7OBS_Logi+0x38>)
 23e8d6c:	f00e fb7c 	bl	23f7468 <sprintf>
    Output(Buffer32Bytes);
 23e8d70:	4808      	ldr	r0, [pc, #32]	; (23e8d94 <_Z7OBS_Logi+0x38>)
 23e8d72:	f7fc fc8b 	bl	23e568c <_Z6OutputPKc>
    Serial_write (msgbuf);
 23e8d76:	4808      	ldr	r0, [pc, #32]	; (23e8d98 <_Z7OBS_Logi+0x3c>)
 23e8d78:	f7fc fc5e 	bl	23e5638 <_Z12Serial_writePKc>

    SD_LogObservation(msgbuf);
 23e8d7c:	4806      	ldr	r0, [pc, #24]	; (23e8d98 <_Z7OBS_Logi+0x3c>)
  }
}
 23e8d7e:	b003      	add	sp, #12
 23e8d80:	f85d eb04 	ldr.w	lr, [sp], #4
    SD_LogObservation(msgbuf);
 23e8d84:	f7ff bb68 	b.w	23e8458 <_Z17SD_LogObservationPc>
}
 23e8d88:	b003      	add	sp, #12
 23e8d8a:	f85d fb04 	ldr.w	pc, [sp], #4
 23e8d8e:	bf00      	nop
 23e8d90:	023fd7de 	.word	0x023fd7de
 23e8d94:	1006a287 	.word	0x1006a287
 23e8d98:	1006f128 	.word	0x1006f128

023e8d9c <_Z15OBS_N2S_SaveAllv>:
/*
 * ======================================================================================================================
 * OBS_N2S_SaveAll() - Save All N Observations to Need2Send File
 * ======================================================================================================================
 */
void OBS_N2S_SaveAll() {
 23e8d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int relay_type;

  // Save All Station Observations to N2S file
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
 23e8d9e:	2400      	movs	r4, #0
    OBS_N2S_Add (i);
 23e8da0:	4620      	mov	r0, r4
 23e8da2:	f7ff fe33 	bl	23e8a0c <_Z11OBS_N2S_Addi>
    OBS_Clear(i);
 23e8da6:	4620      	mov	r0, r4
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
 23e8da8:	3401      	adds	r4, #1
    OBS_Clear(i);
 23e8daa:	f7ff fe1d 	bl	23e89e8 <_Z9OBS_Cleari>
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
 23e8dae:	2c11      	cmp	r4, #17
 23e8db0:	d1f6      	bne.n	23e8da0 <_Z15OBS_N2S_SaveAllv+0x4>
  }

  // Save All Rain and Soil LoRa Observations to N2S file
  while (lora_relay_need2log()) {
   relay_type = OBS_Relay_Build_JSON(); // This removed msg from relay structure and places it in msgbuf
    sprintf (msgbuf+strlen(msgbuf), ", %s", relay_msgtypes[relay_type]);  // Add Particle Event Type after JSON structure
 23e8db2:	4d0e      	ldr	r5, [pc, #56]	; (23e8dec <_Z15OBS_N2S_SaveAllv+0x50>)
 23e8db4:	4f0e      	ldr	r7, [pc, #56]	; (23e8df0 <_Z15OBS_N2S_SaveAllv+0x54>)
 23e8db6:	4e0f      	ldr	r6, [pc, #60]	; (23e8df4 <_Z15OBS_N2S_SaveAllv+0x58>)
  while (lora_relay_need2log()) {
 23e8db8:	f7fc fdfa 	bl	23e59b0 <_Z19lora_relay_need2logv>
 23e8dbc:	b1a8      	cbz	r0, 23e8dea <_Z15OBS_N2S_SaveAllv+0x4e>
   relay_type = OBS_Relay_Build_JSON(); // This removed msg from relay structure and places it in msgbuf
 23e8dbe:	f7ff ffab 	bl	23e8d18 <_Z20OBS_Relay_Build_JSONv>
 23e8dc2:	4604      	mov	r4, r0
    sprintf (msgbuf+strlen(msgbuf), ", %s", relay_msgtypes[relay_type]);  // Add Particle Event Type after JSON structure
 23e8dc4:	4809      	ldr	r0, [pc, #36]	; (23e8dec <_Z15OBS_N2S_SaveAllv+0x50>)
 23e8dc6:	f7fb fb07 	bl	23e43d8 <strlen>
 23e8dca:	4631      	mov	r1, r6
 23e8dcc:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
 23e8dd0:	4428      	add	r0, r5
 23e8dd2:	f00e fb49 	bl	23f7468 <sprintf>
    SD_NeedToSend_Add(msgbuf); // Save to N2F File
 23e8dd6:	4805      	ldr	r0, [pc, #20]	; (23e8dec <_Z15OBS_N2S_SaveAllv+0x50>)
 23e8dd8:	f7ff fbdc 	bl	23e8594 <_Z17SD_NeedToSend_AddPc>
    Output("LR->N2S");
 23e8ddc:	4806      	ldr	r0, [pc, #24]	; (23e8df8 <_Z15OBS_N2S_SaveAllv+0x5c>)
 23e8dde:	f7fc fc55 	bl	23e568c <_Z6OutputPKc>
    Serial_write (msgbuf); 
 23e8de2:	4802      	ldr	r0, [pc, #8]	; (23e8dec <_Z15OBS_N2S_SaveAllv+0x50>)
 23e8de4:	f7fc fc28 	bl	23e5638 <_Z12Serial_writePKc>
  while (lora_relay_need2log()) {
 23e8de8:	e7e6      	b.n	23e8db8 <_Z15OBS_N2S_SaveAllv+0x1c>
  }
}
 23e8dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23e8dec:	1006f128 	.word	0x1006f128
 23e8df0:	1006a1b0 	.word	0x1006a1b0
 23e8df4:	023fd7ea 	.word	0x023fd7ea
 23e8df8:	023fd7ef 	.word	0x023fd7ef

023e8dfc <_Z8OBS_Lastv>:
 * OBS_Last() - Find Last OBS and return index or -1 if empty
 * ======================================================================================================================
 */
int OBS_Last() {
  // Scan OBS for free spot
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23e8dfc:	2000      	movs	r0, #0
    if (obs[i].inuse == false) {
 23e8dfe:	f640 2398 	movw	r3, #2712	; 0xa98
 23e8e02:	4a06      	ldr	r2, [pc, #24]	; (23e8e1c <_Z8OBS_Lastv+0x20>)
 23e8e04:	fb03 f100 	mul.w	r1, r3, r0
 23e8e08:	5c89      	ldrb	r1, [r1, r2]
 23e8e0a:	b909      	cbnz	r1, 23e8e10 <_Z8OBS_Lastv+0x14>
      if (i == 0) {
        return (-1);
      }
      else {
        return (i-1);
 23e8e0c:	3801      	subs	r0, #1
 23e8e0e:	4770      	bx	lr
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23e8e10:	3001      	adds	r0, #1
 23e8e12:	2811      	cmp	r0, #17
 23e8e14:	d1f6      	bne.n	23e8e04 <_Z8OBS_Lastv+0x8>
      }
    }
  }
  // Arrary full, Never found an empty, return last in Array
  return (MAX_ONE_MINUTE_OBS-1);
 23e8e16:	2010      	movs	r0, #16
}
 23e8e18:	4770      	bx	lr
 23e8e1a:	bf00      	nop
 23e8e1c:	1006f550 	.word	0x1006f550

023e8e20 <_Z8OBS_Fullv>:
 * OBS_Full() - Return true if there are open spots
 * ======================================================================================================================
 */
bool OBS_Full() {
  // Scan OBS for free spot
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23e8e20:	2300      	movs	r3, #0
    if (obs[i].inuse == false) {
 23e8e22:	f640 2298 	movw	r2, #2712	; 0xa98
 23e8e26:	4904      	ldr	r1, [pc, #16]	; (23e8e38 <_Z8OBS_Fullv+0x18>)
 23e8e28:	fb02 f003 	mul.w	r0, r2, r3
 23e8e2c:	5c40      	ldrb	r0, [r0, r1]
 23e8e2e:	b110      	cbz	r0, 23e8e36 <_Z8OBS_Fullv+0x16>
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23e8e30:	3301      	adds	r3, #1
 23e8e32:	2b11      	cmp	r3, #17
 23e8e34:	d1f8      	bne.n	23e8e28 <_Z8OBS_Fullv+0x8>
      return (false);
    }
  }
  return (true);
}
 23e8e36:	4770      	bx	lr
 23e8e38:	1006f550 	.word	0x1006f550

023e8e3c <_Z8OBS_Openv>:
/*
 * ======================================================================================================================
 * OBS_Open() - Find a free OBS and return index
 * ======================================================================================================================
 */
int OBS_Open() {
 23e8e3c:	b508      	push	{r3, lr}
  // Scan OBS for free spot
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23e8e3e:	2000      	movs	r0, #0
    if (obs[i].inuse == false) {
 23e8e40:	f640 2398 	movw	r3, #2712	; 0xa98
 23e8e44:	4a07      	ldr	r2, [pc, #28]	; (23e8e64 <_Z8OBS_Openv+0x28>)
 23e8e46:	fb03 f100 	mul.w	r1, r3, r0
 23e8e4a:	5c89      	ldrb	r1, [r1, r2]
 23e8e4c:	b141      	cbz	r1, 23e8e60 <_Z8OBS_Openv+0x24>
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
 23e8e4e:	3001      	adds	r0, #1
 23e8e50:	2811      	cmp	r0, #17
 23e8e52:	d1f8      	bne.n	23e8e46 <_Z8OBS_Openv+0xa>
      return (i);
    }
  }

  // All Observations are inuse
  Output ("OBS[ALL]->N2S");
 23e8e54:	4804      	ldr	r0, [pc, #16]	; (23e8e68 <_Z8OBS_Openv+0x2c>)
 23e8e56:	f7fc fc19 	bl	23e568c <_Z6OutputPKc>

  // Save All N Observations to Need2Send File
  OBS_N2S_SaveAll();
 23e8e5a:	f7ff ff9f 	bl	23e8d9c <_Z15OBS_N2S_SaveAllv>
 23e8e5e:	2000      	movs	r0, #0

  // All OBS are Clear so return the first OBS 
  return (0);
}
 23e8e60:	bd08      	pop	{r3, pc}
 23e8e62:	bf00      	nop
 23e8e64:	1006f550 	.word	0x1006f550
 23e8e68:	023fd7f7 	.word	0x023fd7f7

023e8e6c <_Z10GetPinNametPc>:
void GetPinName(pin_t pin, char *pinname) {
 23e8e6c:	b530      	push	{r4, r5, lr}
 23e8e6e:	b0b1      	sub	sp, #196	; 0xc4
 23e8e70:	4605      	mov	r5, r0
 23e8e72:	460c      	mov	r4, r1
  const PinMap pinTable[] = {
 23e8e74:	22c0      	movs	r2, #192	; 0xc0
 23e8e76:	4668      	mov	r0, sp
 23e8e78:	490b      	ldr	r1, [pc, #44]	; (23e8ea8 <_Z10GetPinNametPc+0x3c>)
 23e8e7a:	f013 fc33 	bl	23fc6e4 <memcpy>
  for (size_t i = 0; i < sizeof(pinTable) / sizeof(pinTable[0]); ++i) {
 23e8e7e:	2300      	movs	r3, #0
      if (pin == pinTable[i].pin) {
 23e8e80:	f83d 2033 	ldrh.w	r2, [sp, r3, lsl #3]
 23e8e84:	42aa      	cmp	r2, r5
 23e8e86:	d10a      	bne.n	23e8e9e <_Z10GetPinNametPc+0x32>
          strcpy(pinname, pinTable[i].name);
 23e8e88:	aa30      	add	r2, sp, #192	; 0xc0
 23e8e8a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 23e8e8e:	f853 1cbc 	ldr.w	r1, [r3, #-188]
  strcpy(pinname, "NF");
 23e8e92:	4620      	mov	r0, r4
}
 23e8e94:	b031      	add	sp, #196	; 0xc4
 23e8e96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  strcpy(pinname, "NF");
 23e8e9a:	f013 bca5 	b.w	23fc7e8 <strcpy>
  for (size_t i = 0; i < sizeof(pinTable) / sizeof(pinTable[0]); ++i) {
 23e8e9e:	3301      	adds	r3, #1
 23e8ea0:	2b18      	cmp	r3, #24
 23e8ea2:	d1ed      	bne.n	23e8e80 <_Z10GetPinNametPc+0x14>
  strcpy(pinname, "NF");
 23e8ea4:	4901      	ldr	r1, [pc, #4]	; (23e8eac <_Z10GetPinNametPc+0x40>)
 23e8ea6:	e7f4      	b.n	23e8e92 <_Z10GetPinNametPc+0x26>
 23e8ea8:	023fca3c 	.word	0x023fca3c
 23e8eac:	023fd251 	.word	0x023fd251

023e8eb0 <_Z17OutputResetReasonv>:
void OutputResetReason() {
 23e8eb0:	b570      	push	{r4, r5, r6, lr}
        int reason = RESET_REASON_NONE;
 23e8eb2:	2400      	movs	r4, #0
 23e8eb4:	b0a2      	sub	sp, #136	; 0x88
  const ResetReasonEntry resetReasonTable[] = {
 23e8eb6:	ae04      	add	r6, sp, #16
 23e8eb8:	2278      	movs	r2, #120	; 0x78
 23e8eba:	4916      	ldr	r1, [pc, #88]	; (23e8f14 <_Z17OutputResetReasonv+0x64>)
 23e8ebc:	4630      	mov	r0, r6
 23e8ebe:	f013 fc11 	bl	23fc6e4 <memcpy>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 23e8ec2:	4622      	mov	r2, r4
 23e8ec4:	4621      	mov	r1, r4
 23e8ec6:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
 23e8ec8:	9403      	str	r4, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 23e8eca:	f00d fc2f 	bl	23f672c <HAL_Core_Get_Last_Reset_Info>
        HAL_Core_Get_Last_Reset_Info(nullptr, &data, nullptr);
 23e8ece:	4622      	mov	r2, r4
 23e8ed0:	4620      	mov	r0, r4
 23e8ed2:	a903      	add	r1, sp, #12
        return reason;
 23e8ed4:	9d03      	ldr	r5, [sp, #12]
        uint32_t data = 0;
 23e8ed6:	9403      	str	r4, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(nullptr, &data, nullptr);
 23e8ed8:	f00d fc28 	bl	23f672c <HAL_Core_Get_Last_Reset_Info>
        return data;
 23e8edc:	9b03      	ldr	r3, [sp, #12]
    if (resetReasonTable[i].code == resetReason) {
 23e8ede:	f856 2034 	ldr.w	r2, [r6, r4, lsl #3]
 23e8ee2:	42aa      	cmp	r2, r5
 23e8ee4:	d110      	bne.n	23e8f08 <_Z17OutputResetReasonv+0x58>
        reasonText = resetReasonTable[i].description;
 23e8ee6:	aa22      	add	r2, sp, #136	; 0x88
 23e8ee8:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 23e8eec:	f854 2c74 	ldr.w	r2, [r4, #-116]
  sprintf(msgbuf, "RR:%s (%d,%lu)", reasonText, resetReason, resetData);
 23e8ef0:	9300      	str	r3, [sp, #0]
 23e8ef2:	4909      	ldr	r1, [pc, #36]	; (23e8f18 <_Z17OutputResetReasonv+0x68>)
 23e8ef4:	462b      	mov	r3, r5
 23e8ef6:	4809      	ldr	r0, [pc, #36]	; (23e8f1c <_Z17OutputResetReasonv+0x6c>)
 23e8ef8:	f00e fab6 	bl	23f7468 <sprintf>
  Output(msgbuf);
 23e8efc:	4807      	ldr	r0, [pc, #28]	; (23e8f1c <_Z17OutputResetReasonv+0x6c>)
}
 23e8efe:	b022      	add	sp, #136	; 0x88
 23e8f00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Output(msgbuf);
 23e8f04:	f7fc bbc2 	b.w	23e568c <_Z6OutputPKc>
  for (unsigned int i = 0; i < sizeof(resetReasonTable) / sizeof(resetReasonTable[0]); i++) {
 23e8f08:	3401      	adds	r4, #1
 23e8f0a:	2c0f      	cmp	r4, #15
 23e8f0c:	d1e7      	bne.n	23e8ede <_Z17OutputResetReasonv+0x2e>
  const char* reasonText = "Unknown Reset Reason";
 23e8f0e:	4a04      	ldr	r2, [pc, #16]	; (23e8f20 <_Z17OutputResetReasonv+0x70>)
 23e8f10:	e7ee      	b.n	23e8ef0 <_Z17OutputResetReasonv+0x40>
 23e8f12:	bf00      	nop
 23e8f14:	023fcafc 	.word	0x023fcafc
 23e8f18:	023fd805 	.word	0x023fd805
 23e8f1c:	1006f128 	.word	0x1006f128
 23e8f20:	023fcc4c 	.word	0x023fcc4c

023e8f24 <_Z11DeviceResetv>:
void DeviceReset() {
 23e8f24:	b508      	push	{r3, lr}
  digitalWrite(REBOOT_PIN, HIGH);
 23e8f26:	2101      	movs	r1, #1
 23e8f28:	2013      	movs	r0, #19
 23e8f2a:	f010 fd98 	bl	23f9a5e <digitalWrite>
  delay(5000);
 23e8f2e:	f241 3088 	movw	r0, #5000	; 0x1388
 23e8f32:	f00e fb79 	bl	23f7628 <delay>
  digitalWrite(REBOOT_PIN, LOW);
 23e8f36:	2100      	movs	r1, #0
 23e8f38:	2013      	movs	r0, #19
 23e8f3a:	f010 fd90 	bl	23f9a5e <digitalWrite>
  delay(2000); 
 23e8f3e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23e8f42:	f00e fb71 	bl	23f7628 <delay>
}
 23e8f46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  System.reset();
 23e8f4a:	f010 b84d 	b.w	23f8fe8 <_ZN11SystemClass5resetEv>
	...

023e8f50 <_Z17Function_DoAction6String>:
int Function_DoAction(String s) {
 23e8f50:	b530      	push	{r4, r5, lr}
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
 23e8f52:	6805      	ldr	r5, [r0, #0]
  if (strcmp (s,"REBOOT") == 0) {  // Reboot - We loose untransmitted observations. But they are save to SD.
 23e8f54:	498c      	ldr	r1, [pc, #560]	; (23e9188 <_Z17Function_DoAction6String+0x238>)
 23e8f56:	4628      	mov	r0, r5
int Function_DoAction(String s) {
 23e8f58:	b095      	sub	sp, #84	; 0x54
  if (strcmp (s,"REBOOT") == 0) {  // Reboot - We loose untransmitted observations. But they are save to SD.
 23e8f5a:	f7fb fa33 	bl	23e43c4 <strcmp>
 23e8f5e:	4604      	mov	r4, r0
 23e8f60:	b968      	cbnz	r0, 23e8f7e <_Z17Function_DoAction6String+0x2e>
    Output("DoAction:REBOOT");     // Do a SEND before a REBOOT to address the abive issue.
 23e8f62:	488a      	ldr	r0, [pc, #552]	; (23e918c <_Z17Function_DoAction6String+0x23c>)
 23e8f64:	f7fc fb92 	bl	23e568c <_Z6OutputPKc>
    EEPROM_SaveUnreportedRain();
 23e8f68:	f7ff f842 	bl	23e7ff0 <_Z25EEPROM_SaveUnreportedRainv>
    delay(1000);
 23e8f6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23e8f70:	f00e fb5a 	bl	23f7628 <delay>
    DeviceReset();
 23e8f74:	f7ff ffd6 	bl	23e8f24 <_Z11DeviceResetv>
}
 23e8f78:	4620      	mov	r0, r4
 23e8f7a:	b015      	add	sp, #84	; 0x54
 23e8f7c:	bd30      	pop	{r4, r5, pc}
  else if (strcmp (s,"INFO") == 0) {  // Send System Information
 23e8f7e:	4628      	mov	r0, r5
 23e8f80:	4983      	ldr	r1, [pc, #524]	; (23e9190 <_Z17Function_DoAction6String+0x240>)
 23e8f82:	f7fb fa1f 	bl	23e43c4 <strcmp>
 23e8f86:	4604      	mov	r4, r0
 23e8f88:	b930      	cbnz	r0, 23e8f98 <_Z17Function_DoAction6String+0x48>
    Output("DoAction:INFO");
 23e8f8a:	4882      	ldr	r0, [pc, #520]	; (23e9194 <_Z17Function_DoAction6String+0x244>)
 23e8f8c:	f7fc fb7e 	bl	23e568c <_Z6OutputPKc>
    SendSystemInformation=true;
 23e8f90:	2201      	movs	r2, #1
 23e8f92:	4b81      	ldr	r3, [pc, #516]	; (23e9198 <_Z17Function_DoAction6String+0x248>)
 23e8f94:	701a      	strb	r2, [r3, #0]
    return(0);  
 23e8f96:	e7ef      	b.n	23e8f78 <_Z17Function_DoAction6String+0x28>
  else if (strcmp (s,"SEND") == 0) {  // Send OBS Now
 23e8f98:	4628      	mov	r0, r5
 23e8f9a:	4980      	ldr	r1, [pc, #512]	; (23e919c <_Z17Function_DoAction6String+0x24c>)
 23e8f9c:	f7fb fa12 	bl	23e43c4 <strcmp>
 23e8fa0:	4604      	mov	r4, r0
 23e8fa2:	b940      	cbnz	r0, 23e8fb6 <_Z17Function_DoAction6String+0x66>
    Output("DoAction:SEND");
 23e8fa4:	487e      	ldr	r0, [pc, #504]	; (23e91a0 <_Z17Function_DoAction6String+0x250>)
 23e8fa6:	f7fc fb71 	bl	23e568c <_Z6OutputPKc>
    LastTransmitTime=0;
 23e8faa:	2000      	movs	r0, #0
 23e8fac:	2100      	movs	r1, #0
 23e8fae:	4b7d      	ldr	r3, [pc, #500]	; (23e91a4 <_Z17Function_DoAction6String+0x254>)
 23e8fb0:	e9c3 0100 	strd	r0, r1, [r3]
    return(0);  
 23e8fb4:	e7e0      	b.n	23e8f78 <_Z17Function_DoAction6String+0x28>
  else if (strcmp (s,"CRT") == 0) { // Clear Rain Totals
 23e8fb6:	4628      	mov	r0, r5
 23e8fb8:	497b      	ldr	r1, [pc, #492]	; (23e91a8 <_Z17Function_DoAction6String+0x258>)
 23e8fba:	f7fb fa03 	bl	23e43c4 <strcmp>
 23e8fbe:	4604      	mov	r4, r0
 23e8fc0:	b948      	cbnz	r0, 23e8fd6 <_Z17Function_DoAction6String+0x86>
    time32_t current_time = Time.now();
 23e8fc2:	f010 f9c6 	bl	23f9352 <_ZN9TimeClass3nowEv>
 23e8fc6:	4605      	mov	r5, r0
    Output("DoAction:CRT");
 23e8fc8:	4878      	ldr	r0, [pc, #480]	; (23e91ac <_Z17Function_DoAction6String+0x25c>)
 23e8fca:	f7fc fb5f 	bl	23e568c <_Z6OutputPKc>
    EEPROM_ClearRainTotals(current_time);
 23e8fce:	4628      	mov	r0, r5
 23e8fd0:	f7fe fef6 	bl	23e7dc0 <_Z22EEPROM_ClearRainTotalsl>
    return(0);
 23e8fd4:	e7d0      	b.n	23e8f78 <_Z17Function_DoAction6String+0x28>
  else if (strcmp (s,"A4DIST") == 0) { // Set A4 State File to Distance
 23e8fd6:	4628      	mov	r0, r5
 23e8fd8:	4975      	ldr	r1, [pc, #468]	; (23e91b0 <_Z17Function_DoAction6String+0x260>)
 23e8fda:	f7fb f9f3 	bl	23e43c4 <strcmp>
 23e8fde:	4604      	mov	r4, r0
 23e8fe0:	2800      	cmp	r0, #0
 23e8fe2:	d158      	bne.n	23e9096 <_Z17Function_DoAction6String+0x146>
    Output("DoAction:A4DIST");
 23e8fe4:	4873      	ldr	r0, [pc, #460]	; (23e91b4 <_Z17Function_DoAction6String+0x264>)
 23e8fe6:	f7fc fb51 	bl	23e568c <_Z6OutputPKc>
    if (SD_exists) {
 23e8fea:	4b73      	ldr	r3, [pc, #460]	; (23e91b8 <_Z17Function_DoAction6String+0x268>)
 23e8fec:	781b      	ldrb	r3, [r3, #0]
 23e8fee:	2b00      	cmp	r3, #0
 23e8ff0:	d04b      	beq.n	23e908a <_Z17Function_DoAction6String+0x13a>
      if (SD.exists(SD_A4_RAIN_FILE)) {
 23e8ff2:	4972      	ldr	r1, [pc, #456]	; (23e91bc <_Z17Function_DoAction6String+0x26c>)
 23e8ff4:	4872      	ldr	r0, [pc, #456]	; (23e91c0 <_Z17Function_DoAction6String+0x270>)
 23e8ff6:	f7fc f883 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e8ffa:	b148      	cbz	r0, 23e9010 <_Z17Function_DoAction6String+0xc0>
        EEPROM_ClearRain2Totals();
 23e8ffc:	f7fe fef2 	bl	23e7de4 <_Z23EEPROM_ClearRain2Totalsv>
        if (SD.remove (SD_A4_RAIN_FILE)) {
 23e9000:	496e      	ldr	r1, [pc, #440]	; (23e91bc <_Z17Function_DoAction6String+0x26c>)
 23e9002:	486f      	ldr	r0, [pc, #444]	; (23e91c0 <_Z17Function_DoAction6String+0x270>)
 23e9004:	f7fc f897 	bl	23e5136 <_ZN8FsVolume6removeEPKc>
 23e9008:	b1d8      	cbz	r0, 23e9042 <_Z17Function_DoAction6String+0xf2>
          Output ("A4=DIST, DEL RAIN:OK");
 23e900a:	486e      	ldr	r0, [pc, #440]	; (23e91c4 <_Z17Function_DoAction6String+0x274>)
 23e900c:	f7fc fb3e 	bl	23e568c <_Z6OutputPKc>
      if (SD.exists(SD_A4_DIST_FILE)) {
 23e9010:	496d      	ldr	r1, [pc, #436]	; (23e91c8 <_Z17Function_DoAction6String+0x278>)
 23e9012:	486b      	ldr	r0, [pc, #428]	; (23e91c0 <_Z17Function_DoAction6String+0x270>)
 23e9014:	f7fc f874 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e9018:	b1c8      	cbz	r0, 23e904e <_Z17Function_DoAction6String+0xfe>
        Output ("A4=DIST, ALREADY EXISTS");    
 23e901a:	486c      	ldr	r0, [pc, #432]	; (23e91cc <_Z17Function_DoAction6String+0x27c>)
          Output ("A4=DIST, SET");
 23e901c:	f7fc fb36 	bl	23e568c <_Z6OutputPKc>
      dg_adjustment = 2.5;
 23e9020:	4b6b      	ldr	r3, [pc, #428]	; (23e91d0 <_Z17Function_DoAction6String+0x280>)
 23e9022:	4a6c      	ldr	r2, [pc, #432]	; (23e91d4 <_Z17Function_DoAction6String+0x284>)
      if (SD.exists(SD_5M_DIST_FILE)) {
 23e9024:	496c      	ldr	r1, [pc, #432]	; (23e91d8 <_Z17Function_DoAction6String+0x288>)
 23e9026:	4866      	ldr	r0, [pc, #408]	; (23e91c0 <_Z17Function_DoAction6String+0x270>)
      dg_adjustment = 2.5;
 23e9028:	601a      	str	r2, [r3, #0]
      if (SD.exists(SD_5M_DIST_FILE)) {
 23e902a:	f7fc f869 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e902e:	b350      	cbz	r0, 23e9086 <_Z17Function_DoAction6String+0x136>
        if (SD.remove (SD_5M_DIST_FILE)) {
 23e9030:	4969      	ldr	r1, [pc, #420]	; (23e91d8 <_Z17Function_DoAction6String+0x288>)
 23e9032:	4863      	ldr	r0, [pc, #396]	; (23e91c0 <_Z17Function_DoAction6String+0x270>)
 23e9034:	f7fc f87f 	bl	23e5136 <_ZN8FsVolume6removeEPKc>
 23e9038:	b1f8      	cbz	r0, 23e907a <_Z17Function_DoAction6String+0x12a>
          Output ("A4=DIST, DEL 5M:OK, 10M SET");
 23e903a:	4868      	ldr	r0, [pc, #416]	; (23e91dc <_Z17Function_DoAction6String+0x28c>)
        Output ("TXI15M SET"); 
 23e903c:	f7fc fb26 	bl	23e568c <_Z6OutputPKc>
 23e9040:	e79a      	b.n	23e8f78 <_Z17Function_DoAction6String+0x28>
          Output ("A4=DIST, DEL RAIN:ERR");
 23e9042:	4867      	ldr	r0, [pc, #412]	; (23e91e0 <_Z17Function_DoAction6String+0x290>)
          Output ("A4=RAIN, DEL DIST:ERR");
 23e9044:	f7fc fb22 	bl	23e568c <_Z6OutputPKc>
          return(-2);
 23e9048:	f06f 0401 	mvn.w	r4, #1
 23e904c:	e794      	b.n	23e8f78 <_Z17Function_DoAction6String+0x28>
        File fp = SD.open(SD_A4_DIST_FILE, FILE_WRITE);
 23e904e:	4668      	mov	r0, sp
 23e9050:	f244 2302 	movw	r3, #16898	; 0x4202
 23e9054:	4a5c      	ldr	r2, [pc, #368]	; (23e91c8 <_Z17Function_DoAction6String+0x278>)
 23e9056:	495a      	ldr	r1, [pc, #360]	; (23e91c0 <_Z17Function_DoAction6String+0x270>)
 23e9058:	f00c fd68 	bl	23f5b2c <_ZN8FsVolume4openEPKci>
 23e905c:	a804      	add	r0, sp, #16
 23e905e:	f7fc f8c8 	bl	23e51f2 <_ZNK10FsBaseFile6isOpenEv>
        if (fp) {
 23e9062:	b120      	cbz	r0, 23e906e <_Z17Function_DoAction6String+0x11e>
          fp.close();
 23e9064:	a804      	add	r0, sp, #16
 23e9066:	f00c fc88 	bl	23f597a <_ZN10FsBaseFile5closeEv>
          Output ("A4=DIST, SET");
 23e906a:	485e      	ldr	r0, [pc, #376]	; (23e91e4 <_Z17Function_DoAction6String+0x294>)
 23e906c:	e7d6      	b.n	23e901c <_Z17Function_DoAction6String+0xcc>
          Output ("A4=DIST, OPEN ERR");
 23e906e:	485e      	ldr	r0, [pc, #376]	; (23e91e8 <_Z17Function_DoAction6String+0x298>)
          Output ("A4=RAIN, OPEN ERR");
 23e9070:	f7fc fb0c 	bl	23e568c <_Z6OutputPKc>
          return(-3);
 23e9074:	f06f 0402 	mvn.w	r4, #2
 23e9078:	e77e      	b.n	23e8f78 <_Z17Function_DoAction6String+0x28>
          Output ("A4=DIST, DEL 5M:ERR");
 23e907a:	485c      	ldr	r0, [pc, #368]	; (23e91ec <_Z17Function_DoAction6String+0x29c>)
          Output ("A4=RAIN, DEL 5M:ERR");
 23e907c:	f7fc fb06 	bl	23e568c <_Z6OutputPKc>
          return(-4);
 23e9080:	f06f 0403 	mvn.w	r4, #3
 23e9084:	e778      	b.n	23e8f78 <_Z17Function_DoAction6String+0x28>
        Output ("A4=DIST, 10M");
 23e9086:	485a      	ldr	r0, [pc, #360]	; (23e91f0 <_Z17Function_DoAction6String+0x2a0>)
 23e9088:	e7d8      	b.n	23e903c <_Z17Function_DoAction6String+0xec>
      Output("A4=DIST, SD NF"); 
 23e908a:	485a      	ldr	r0, [pc, #360]	; (23e91f4 <_Z17Function_DoAction6String+0x2a4>)
    Output("DoAction:UKN"); 
 23e908c:	f7fc fafe 	bl	23e568c <_Z6OutputPKc>
    return(-1);
 23e9090:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 23e9094:	e770      	b.n	23e8f78 <_Z17Function_DoAction6String+0x28>
  else if (strcmp (s,"A4RAIN") == 0) { // Set A4 State File to Rain
 23e9096:	4628      	mov	r0, r5
 23e9098:	4957      	ldr	r1, [pc, #348]	; (23e91f8 <_Z17Function_DoAction6String+0x2a8>)
 23e909a:	f7fb f993 	bl	23e43c4 <strcmp>
 23e909e:	4604      	mov	r4, r0
 23e90a0:	2800      	cmp	r0, #0
 23e90a2:	d141      	bne.n	23e9128 <_Z17Function_DoAction6String+0x1d8>
    Output("DoAction:A4RAIN");
 23e90a4:	4855      	ldr	r0, [pc, #340]	; (23e91fc <_Z17Function_DoAction6String+0x2ac>)
 23e90a6:	f7fc faf1 	bl	23e568c <_Z6OutputPKc>
    if (SD_exists) {
 23e90aa:	4b43      	ldr	r3, [pc, #268]	; (23e91b8 <_Z17Function_DoAction6String+0x268>)
 23e90ac:	781b      	ldrb	r3, [r3, #0]
 23e90ae:	2b00      	cmp	r3, #0
 23e90b0:	d038      	beq.n	23e9124 <_Z17Function_DoAction6String+0x1d4>
      if (SD.exists(SD_A4_DIST_FILE)) {
 23e90b2:	4945      	ldr	r1, [pc, #276]	; (23e91c8 <_Z17Function_DoAction6String+0x278>)
 23e90b4:	4842      	ldr	r0, [pc, #264]	; (23e91c0 <_Z17Function_DoAction6String+0x270>)
 23e90b6:	f7fc f823 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e90ba:	b138      	cbz	r0, 23e90cc <_Z17Function_DoAction6String+0x17c>
        if (SD.remove (SD_A4_DIST_FILE)) {
 23e90bc:	4942      	ldr	r1, [pc, #264]	; (23e91c8 <_Z17Function_DoAction6String+0x278>)
 23e90be:	4840      	ldr	r0, [pc, #256]	; (23e91c0 <_Z17Function_DoAction6String+0x270>)
 23e90c0:	f7fc f839 	bl	23e5136 <_ZN8FsVolume6removeEPKc>
 23e90c4:	b1b0      	cbz	r0, 23e90f4 <_Z17Function_DoAction6String+0x1a4>
          Output ("A4=RAIN, DEL DIST:OK");
 23e90c6:	484e      	ldr	r0, [pc, #312]	; (23e9200 <_Z17Function_DoAction6String+0x2b0>)
 23e90c8:	f7fc fae0 	bl	23e568c <_Z6OutputPKc>
      if (SD.exists(SD_5M_DIST_FILE)) {
 23e90cc:	4942      	ldr	r1, [pc, #264]	; (23e91d8 <_Z17Function_DoAction6String+0x288>)
 23e90ce:	483c      	ldr	r0, [pc, #240]	; (23e91c0 <_Z17Function_DoAction6String+0x270>)
 23e90d0:	f7fc f816 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e90d4:	b138      	cbz	r0, 23e90e6 <_Z17Function_DoAction6String+0x196>
        if (SD.remove (SD_5M_DIST_FILE)) {
 23e90d6:	4940      	ldr	r1, [pc, #256]	; (23e91d8 <_Z17Function_DoAction6String+0x288>)
 23e90d8:	4839      	ldr	r0, [pc, #228]	; (23e91c0 <_Z17Function_DoAction6String+0x270>)
 23e90da:	f7fc f82c 	bl	23e5136 <_ZN8FsVolume6removeEPKc>
 23e90de:	b158      	cbz	r0, 23e90f8 <_Z17Function_DoAction6String+0x1a8>
          Output ("A4=RAIN, DEL 5M:OK");
 23e90e0:	4848      	ldr	r0, [pc, #288]	; (23e9204 <_Z17Function_DoAction6String+0x2b4>)
 23e90e2:	f7fc fad3 	bl	23e568c <_Z6OutputPKc>
      if (SD.exists(SD_A4_RAIN_FILE)) {
 23e90e6:	4935      	ldr	r1, [pc, #212]	; (23e91bc <_Z17Function_DoAction6String+0x26c>)
 23e90e8:	4835      	ldr	r0, [pc, #212]	; (23e91c0 <_Z17Function_DoAction6String+0x270>)
 23e90ea:	f7fc f809 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e90ee:	b128      	cbz	r0, 23e90fc <_Z17Function_DoAction6String+0x1ac>
        Output ("A4=RAIN, ALREADY EXISTS");      
 23e90f0:	4845      	ldr	r0, [pc, #276]	; (23e9208 <_Z17Function_DoAction6String+0x2b8>)
 23e90f2:	e7a3      	b.n	23e903c <_Z17Function_DoAction6String+0xec>
          Output ("A4=RAIN, DEL DIST:ERR");
 23e90f4:	4845      	ldr	r0, [pc, #276]	; (23e920c <_Z17Function_DoAction6String+0x2bc>)
 23e90f6:	e7a5      	b.n	23e9044 <_Z17Function_DoAction6String+0xf4>
          Output ("A4=RAIN, DEL 5M:ERR");
 23e90f8:	4845      	ldr	r0, [pc, #276]	; (23e9210 <_Z17Function_DoAction6String+0x2c0>)
 23e90fa:	e7bf      	b.n	23e907c <_Z17Function_DoAction6String+0x12c>
        EEPROM_ClearRain2Totals(); // Just a good thing to do.
 23e90fc:	f7fe fe72 	bl	23e7de4 <_Z23EEPROM_ClearRain2Totalsv>
        File fp = SD.open(SD_A4_RAIN_FILE, FILE_WRITE);
 23e9100:	4668      	mov	r0, sp
 23e9102:	f244 2302 	movw	r3, #16898	; 0x4202
 23e9106:	4a2d      	ldr	r2, [pc, #180]	; (23e91bc <_Z17Function_DoAction6String+0x26c>)
 23e9108:	492d      	ldr	r1, [pc, #180]	; (23e91c0 <_Z17Function_DoAction6String+0x270>)
 23e910a:	f00c fd0f 	bl	23f5b2c <_ZN8FsVolume4openEPKci>
 23e910e:	a804      	add	r0, sp, #16
 23e9110:	f7fc f86f 	bl	23e51f2 <_ZNK10FsBaseFile6isOpenEv>
        if (fp) {
 23e9114:	b120      	cbz	r0, 23e9120 <_Z17Function_DoAction6String+0x1d0>
          fp.close();
 23e9116:	a804      	add	r0, sp, #16
 23e9118:	f00c fc2f 	bl	23f597a <_ZN10FsBaseFile5closeEv>
          Output ("A4=RAIN, SET");
 23e911c:	483d      	ldr	r0, [pc, #244]	; (23e9214 <_Z17Function_DoAction6String+0x2c4>)
 23e911e:	e78d      	b.n	23e903c <_Z17Function_DoAction6String+0xec>
          Output ("A4=RAIN, OPEN ERR");
 23e9120:	483d      	ldr	r0, [pc, #244]	; (23e9218 <_Z17Function_DoAction6String+0x2c8>)
 23e9122:	e7a5      	b.n	23e9070 <_Z17Function_DoAction6String+0x120>
      Output("A4=RAIN, SD NF"); 
 23e9124:	483d      	ldr	r0, [pc, #244]	; (23e921c <_Z17Function_DoAction6String+0x2cc>)
 23e9126:	e7b1      	b.n	23e908c <_Z17Function_DoAction6String+0x13c>
  else if (strcmp (s,"5MDIST") == 0) { // Set 5M Distance Sensor State File
 23e9128:	4628      	mov	r0, r5
 23e912a:	493d      	ldr	r1, [pc, #244]	; (23e9220 <_Z17Function_DoAction6String+0x2d0>)
 23e912c:	f7fb f94a 	bl	23e43c4 <strcmp>
 23e9130:	4604      	mov	r4, r0
 23e9132:	2800      	cmp	r0, #0
 23e9134:	f040 8082 	bne.w	23e923c <_Z17Function_DoAction6String+0x2ec>
    Output("DoAction:5MDIST");
 23e9138:	483a      	ldr	r0, [pc, #232]	; (23e9224 <_Z17Function_DoAction6String+0x2d4>)
 23e913a:	f7fc faa7 	bl	23e568c <_Z6OutputPKc>
    if (SD_exists) {
 23e913e:	4b1e      	ldr	r3, [pc, #120]	; (23e91b8 <_Z17Function_DoAction6String+0x268>)
 23e9140:	781b      	ldrb	r3, [r3, #0]
 23e9142:	b1fb      	cbz	r3, 23e9184 <_Z17Function_DoAction6String+0x234>
      if (SD.exists(SD_5M_DIST_FILE)) {
 23e9144:	4924      	ldr	r1, [pc, #144]	; (23e91d8 <_Z17Function_DoAction6String+0x288>)
 23e9146:	481e      	ldr	r0, [pc, #120]	; (23e91c0 <_Z17Function_DoAction6String+0x270>)
 23e9148:	f7fb ffda 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e914c:	b108      	cbz	r0, 23e9152 <_Z17Function_DoAction6String+0x202>
        Output ("5MDIST, ALREADY EXISTS");      
 23e914e:	4836      	ldr	r0, [pc, #216]	; (23e9228 <_Z17Function_DoAction6String+0x2d8>)
 23e9150:	e774      	b.n	23e903c <_Z17Function_DoAction6String+0xec>
        File fp = SD.open(SD_5M_DIST_FILE, FILE_WRITE);
 23e9152:	4668      	mov	r0, sp
 23e9154:	f244 2302 	movw	r3, #16898	; 0x4202
 23e9158:	4a1f      	ldr	r2, [pc, #124]	; (23e91d8 <_Z17Function_DoAction6String+0x288>)
 23e915a:	4919      	ldr	r1, [pc, #100]	; (23e91c0 <_Z17Function_DoAction6String+0x270>)
 23e915c:	f00c fce6 	bl	23f5b2c <_ZN8FsVolume4openEPKci>
 23e9160:	a804      	add	r0, sp, #16
 23e9162:	f7fc f846 	bl	23e51f2 <_ZNK10FsBaseFile6isOpenEv>
        if (fp) {
 23e9166:	b138      	cbz	r0, 23e9178 <_Z17Function_DoAction6String+0x228>
          fp.close();
 23e9168:	a804      	add	r0, sp, #16
 23e916a:	f00c fc06 	bl	23f597a <_ZN10FsBaseFile5closeEv>
          dg_adjustment = 1.25;
 23e916e:	4b18      	ldr	r3, [pc, #96]	; (23e91d0 <_Z17Function_DoAction6String+0x280>)
 23e9170:	4a2e      	ldr	r2, [pc, #184]	; (23e922c <_Z17Function_DoAction6String+0x2dc>)
          Output ("5MDIST SET");
 23e9172:	482f      	ldr	r0, [pc, #188]	; (23e9230 <_Z17Function_DoAction6String+0x2e0>)
          dg_adjustment = 1.25;
 23e9174:	601a      	str	r2, [r3, #0]
          Output ("5MDIST SET");
 23e9176:	e761      	b.n	23e903c <_Z17Function_DoAction6String+0xec>
          Output ("5MDIST OPEN ERR");
 23e9178:	482e      	ldr	r0, [pc, #184]	; (23e9234 <_Z17Function_DoAction6String+0x2e4>)
          Output ("A4=RAW, OPEN ERR");
 23e917a:	f7fc fa87 	bl	23e568c <_Z6OutputPKc>
          return(-5);
 23e917e:	f06f 0404 	mvn.w	r4, #4
 23e9182:	e6f9      	b.n	23e8f78 <_Z17Function_DoAction6String+0x28>
      Output("5MDIST, SD NF"); 
 23e9184:	482c      	ldr	r0, [pc, #176]	; (23e9238 <_Z17Function_DoAction6String+0x2e8>)
 23e9186:	e781      	b.n	23e908c <_Z17Function_DoAction6String+0x13c>
 23e9188:	023fd81d 	.word	0x023fd81d
 23e918c:	023fd814 	.word	0x023fd814
 23e9190:	023fd82d 	.word	0x023fd82d
 23e9194:	023fd824 	.word	0x023fd824
 23e9198:	1006a176 	.word	0x1006a176
 23e919c:	023fd83b 	.word	0x023fd83b
 23e91a0:	023fd832 	.word	0x023fd832
 23e91a4:	1006a2c0 	.word	0x1006a2c0
 23e91a8:	023fd849 	.word	0x023fd849
 23e91ac:	023fd840 	.word	0x023fd840
 23e91b0:	023fd856 	.word	0x023fd856
 23e91b4:	023fd84d 	.word	0x023fd84d
 23e91b8:	1006a780 	.word	0x1006a780
 23e91bc:	1006a11a 	.word	0x1006a11a
 23e91c0:	1006a2d4 	.word	0x1006a2d4
 23e91c4:	023fd85d 	.word	0x023fd85d
 23e91c8:	1006a10f 	.word	0x1006a10f
 23e91cc:	023fd888 	.word	0x023fd888
 23e91d0:	1006a1a0 	.word	0x1006a1a0
 23e91d4:	40200000 	.word	0x40200000
 23e91d8:	1006a104 	.word	0x1006a104
 23e91dc:	023fd8bf 	.word	0x023fd8bf
 23e91e0:	023fd872 	.word	0x023fd872
 23e91e4:	023fd8a0 	.word	0x023fd8a0
 23e91e8:	023fd8ad 	.word	0x023fd8ad
 23e91ec:	023fd8db 	.word	0x023fd8db
 23e91f0:	023fd8ef 	.word	0x023fd8ef
 23e91f4:	023fd8fc 	.word	0x023fd8fc
 23e91f8:	023fd914 	.word	0x023fd914
 23e91fc:	023fd90b 	.word	0x023fd90b
 23e9200:	023fd91b 	.word	0x023fd91b
 23e9204:	023fd946 	.word	0x023fd946
 23e9208:	023fd96d 	.word	0x023fd96d
 23e920c:	023fd930 	.word	0x023fd930
 23e9210:	023fd959 	.word	0x023fd959
 23e9214:	023fd985 	.word	0x023fd985
 23e9218:	023fd992 	.word	0x023fd992
 23e921c:	023fd9a4 	.word	0x023fd9a4
 23e9220:	023fd9bc 	.word	0x023fd9bc
 23e9224:	023fd9b3 	.word	0x023fd9b3
 23e9228:	023fd9c3 	.word	0x023fd9c3
 23e922c:	3fa00000 	.word	0x3fa00000
 23e9230:	023fd9da 	.word	0x023fd9da
 23e9234:	023fd9e5 	.word	0x023fd9e5
 23e9238:	023fd9f5 	.word	0x023fd9f5
  else if (strcmp (s,"A4RAW") == 0) { // Set A4 State File to Raw
 23e923c:	4628      	mov	r0, r5
 23e923e:	4989      	ldr	r1, [pc, #548]	; (23e9464 <_Z17Function_DoAction6String+0x514>)
 23e9240:	f7fb f8c0 	bl	23e43c4 <strcmp>
 23e9244:	4604      	mov	r4, r0
 23e9246:	2800      	cmp	r0, #0
 23e9248:	d153      	bne.n	23e92f2 <_Z17Function_DoAction6String+0x3a2>
    Output("DoAction:A4RAW");
 23e924a:	4887      	ldr	r0, [pc, #540]	; (23e9468 <_Z17Function_DoAction6String+0x518>)
 23e924c:	f7fc fa1e 	bl	23e568c <_Z6OutputPKc>
    if (SD_exists) {
 23e9250:	4b86      	ldr	r3, [pc, #536]	; (23e946c <_Z17Function_DoAction6String+0x51c>)
 23e9252:	781b      	ldrb	r3, [r3, #0]
 23e9254:	2b00      	cmp	r3, #0
 23e9256:	d04a      	beq.n	23e92ee <_Z17Function_DoAction6String+0x39e>
      if (SD.exists(SD_A4_RAIN_FILE)) {
 23e9258:	4985      	ldr	r1, [pc, #532]	; (23e9470 <_Z17Function_DoAction6String+0x520>)
 23e925a:	4886      	ldr	r0, [pc, #536]	; (23e9474 <_Z17Function_DoAction6String+0x524>)
 23e925c:	f7fb ff50 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e9260:	b158      	cbz	r0, 23e927a <_Z17Function_DoAction6String+0x32a>
        EEPROM_ClearRain2Totals();
 23e9262:	f7fe fdbf 	bl	23e7de4 <_Z23EEPROM_ClearRain2Totalsv>
        if (SD.remove (SD_A4_RAIN_FILE)) {
 23e9266:	4982      	ldr	r1, [pc, #520]	; (23e9470 <_Z17Function_DoAction6String+0x520>)
 23e9268:	4882      	ldr	r0, [pc, #520]	; (23e9474 <_Z17Function_DoAction6String+0x524>)
 23e926a:	f7fb ff64 	bl	23e5136 <_ZN8FsVolume6removeEPKc>
 23e926e:	2800      	cmp	r0, #0
 23e9270:	f43f aee7 	beq.w	23e9042 <_Z17Function_DoAction6String+0xf2>
          Output ("A4=DIST, DEL RAIN:OK");
 23e9274:	4880      	ldr	r0, [pc, #512]	; (23e9478 <_Z17Function_DoAction6String+0x528>)
 23e9276:	f7fc fa09 	bl	23e568c <_Z6OutputPKc>
      if (SD.exists(SD_A4_DIST_FILE)) {
 23e927a:	4980      	ldr	r1, [pc, #512]	; (23e947c <_Z17Function_DoAction6String+0x52c>)
 23e927c:	487d      	ldr	r0, [pc, #500]	; (23e9474 <_Z17Function_DoAction6String+0x524>)
 23e927e:	f7fb ff3f 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e9282:	b138      	cbz	r0, 23e9294 <_Z17Function_DoAction6String+0x344>
        if (SD.remove (SD_A4_DIST_FILE)) {
 23e9284:	497d      	ldr	r1, [pc, #500]	; (23e947c <_Z17Function_DoAction6String+0x52c>)
 23e9286:	487b      	ldr	r0, [pc, #492]	; (23e9474 <_Z17Function_DoAction6String+0x524>)
 23e9288:	f7fb ff55 	bl	23e5136 <_ZN8FsVolume6removeEPKc>
 23e928c:	b1d8      	cbz	r0, 23e92c6 <_Z17Function_DoAction6String+0x376>
          Output ("A4=DIST, DEL DIST:OK");
 23e928e:	487c      	ldr	r0, [pc, #496]	; (23e9480 <_Z17Function_DoAction6String+0x530>)
 23e9290:	f7fc f9fc 	bl	23e568c <_Z6OutputPKc>
      dg_adjustment = 2.5;
 23e9294:	4b7b      	ldr	r3, [pc, #492]	; (23e9484 <_Z17Function_DoAction6String+0x534>)
 23e9296:	4a7c      	ldr	r2, [pc, #496]	; (23e9488 <_Z17Function_DoAction6String+0x538>)
      if (SD.exists(SD_5M_DIST_FILE)) {
 23e9298:	497c      	ldr	r1, [pc, #496]	; (23e948c <_Z17Function_DoAction6String+0x53c>)
 23e929a:	4876      	ldr	r0, [pc, #472]	; (23e9474 <_Z17Function_DoAction6String+0x524>)
      dg_adjustment = 2.5;
 23e929c:	601a      	str	r2, [r3, #0]
      if (SD.exists(SD_5M_DIST_FILE)) {
 23e929e:	f7fb ff2f 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e92a2:	b148      	cbz	r0, 23e92b8 <_Z17Function_DoAction6String+0x368>
        if (SD.remove (SD_5M_DIST_FILE)) {
 23e92a4:	4979      	ldr	r1, [pc, #484]	; (23e948c <_Z17Function_DoAction6String+0x53c>)
 23e92a6:	4873      	ldr	r0, [pc, #460]	; (23e9474 <_Z17Function_DoAction6String+0x524>)
 23e92a8:	f7fb ff45 	bl	23e5136 <_ZN8FsVolume6removeEPKc>
 23e92ac:	2800      	cmp	r0, #0
 23e92ae:	f43f aee4 	beq.w	23e907a <_Z17Function_DoAction6String+0x12a>
          Output ("A4=DIST, DEL 5M:OK");
 23e92b2:	4877      	ldr	r0, [pc, #476]	; (23e9490 <_Z17Function_DoAction6String+0x540>)
 23e92b4:	f7fc f9ea 	bl	23e568c <_Z6OutputPKc>
      if (SD.exists(SD_A4_RAW_FILE)) {
 23e92b8:	4976      	ldr	r1, [pc, #472]	; (23e9494 <_Z17Function_DoAction6String+0x544>)
 23e92ba:	486e      	ldr	r0, [pc, #440]	; (23e9474 <_Z17Function_DoAction6String+0x524>)
 23e92bc:	f7fb ff20 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e92c0:	b118      	cbz	r0, 23e92ca <_Z17Function_DoAction6String+0x37a>
        Output ("A4=RAW, ALREADY EXISTS");    
 23e92c2:	4875      	ldr	r0, [pc, #468]	; (23e9498 <_Z17Function_DoAction6String+0x548>)
 23e92c4:	e6ba      	b.n	23e903c <_Z17Function_DoAction6String+0xec>
          Output ("A4=DIST, DEL DIST:ERR");
 23e92c6:	4875      	ldr	r0, [pc, #468]	; (23e949c <_Z17Function_DoAction6String+0x54c>)
 23e92c8:	e6d2      	b.n	23e9070 <_Z17Function_DoAction6String+0x120>
        File fp = SD.open(SD_A4_RAW_FILE, FILE_WRITE);
 23e92ca:	4668      	mov	r0, sp
 23e92cc:	f244 2302 	movw	r3, #16898	; 0x4202
 23e92d0:	4a70      	ldr	r2, [pc, #448]	; (23e9494 <_Z17Function_DoAction6String+0x544>)
 23e92d2:	4968      	ldr	r1, [pc, #416]	; (23e9474 <_Z17Function_DoAction6String+0x524>)
 23e92d4:	f00c fc2a 	bl	23f5b2c <_ZN8FsVolume4openEPKci>
 23e92d8:	a804      	add	r0, sp, #16
 23e92da:	f7fb ff8a 	bl	23e51f2 <_ZNK10FsBaseFile6isOpenEv>
        if (fp) {
 23e92de:	b120      	cbz	r0, 23e92ea <_Z17Function_DoAction6String+0x39a>
          fp.close();
 23e92e0:	a804      	add	r0, sp, #16
 23e92e2:	f00c fb4a 	bl	23f597a <_ZN10FsBaseFile5closeEv>
          Output ("A4=RAW, SET");
 23e92e6:	486e      	ldr	r0, [pc, #440]	; (23e94a0 <_Z17Function_DoAction6String+0x550>)
 23e92e8:	e6a8      	b.n	23e903c <_Z17Function_DoAction6String+0xec>
          Output ("A4=RAW, OPEN ERR");
 23e92ea:	486e      	ldr	r0, [pc, #440]	; (23e94a4 <_Z17Function_DoAction6String+0x554>)
 23e92ec:	e745      	b.n	23e917a <_Z17Function_DoAction6String+0x22a>
      Output("A4=RAW, SD NF"); 
 23e92ee:	486e      	ldr	r0, [pc, #440]	; (23e94a8 <_Z17Function_DoAction6String+0x558>)
 23e92f0:	e6cc      	b.n	23e908c <_Z17Function_DoAction6String+0x13c>
  else if (strcmp (s,"A4CLR") == 0) { // Clear A4 State Files
 23e92f2:	4628      	mov	r0, r5
 23e92f4:	496d      	ldr	r1, [pc, #436]	; (23e94ac <_Z17Function_DoAction6String+0x55c>)
 23e92f6:	f7fb f865 	bl	23e43c4 <strcmp>
 23e92fa:	4604      	mov	r4, r0
 23e92fc:	2800      	cmp	r0, #0
 23e92fe:	d166      	bne.n	23e93ce <_Z17Function_DoAction6String+0x47e>
    Output("DoAction:A4CLR");
 23e9300:	486b      	ldr	r0, [pc, #428]	; (23e94b0 <_Z17Function_DoAction6String+0x560>)
 23e9302:	f7fc f9c3 	bl	23e568c <_Z6OutputPKc>
    if (SD_exists) {
 23e9306:	4b59      	ldr	r3, [pc, #356]	; (23e946c <_Z17Function_DoAction6String+0x51c>)
 23e9308:	781b      	ldrb	r3, [r3, #0]
 23e930a:	2b00      	cmp	r3, #0
 23e930c:	d05d      	beq.n	23e93ca <_Z17Function_DoAction6String+0x47a>
      if (SD.exists(SD_A4_DIST_FILE)) {
 23e930e:	495b      	ldr	r1, [pc, #364]	; (23e947c <_Z17Function_DoAction6String+0x52c>)
 23e9310:	4858      	ldr	r0, [pc, #352]	; (23e9474 <_Z17Function_DoAction6String+0x524>)
 23e9312:	f7fb fef5 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e9316:	b308      	cbz	r0, 23e935c <_Z17Function_DoAction6String+0x40c>
        if (SD.remove (SD_A4_DIST_FILE)) {
 23e9318:	4958      	ldr	r1, [pc, #352]	; (23e947c <_Z17Function_DoAction6String+0x52c>)
 23e931a:	4856      	ldr	r0, [pc, #344]	; (23e9474 <_Z17Function_DoAction6String+0x524>)
 23e931c:	f7fb ff0b 	bl	23e5136 <_ZN8FsVolume6removeEPKc>
 23e9320:	b130      	cbz	r0, 23e9330 <_Z17Function_DoAction6String+0x3e0>
          A4_State = A4_STATE_NULL;
 23e9322:	2200      	movs	r2, #0
 23e9324:	4b63      	ldr	r3, [pc, #396]	; (23e94b4 <_Z17Function_DoAction6String+0x564>)
          Output ("A4=CLR, DEL DIST:OK");
 23e9326:	4864      	ldr	r0, [pc, #400]	; (23e94b8 <_Z17Function_DoAction6String+0x568>)
          A4_State = A4_STATE_NULL;
 23e9328:	601a      	str	r2, [r3, #0]
        Output ("A4=CLR, DEL RAIN:NF");
 23e932a:	f7fc f9af 	bl	23e568c <_Z6OutputPKc>
 23e932e:	e004      	b.n	23e933a <_Z17Function_DoAction6String+0x3ea>
          Output ("A4=CLR, DEL DIST:ERR");
 23e9330:	4862      	ldr	r0, [pc, #392]	; (23e94bc <_Z17Function_DoAction6String+0x56c>)
 23e9332:	f7fc f9ab 	bl	23e568c <_Z6OutputPKc>
          state=-2;
 23e9336:	f06f 0401 	mvn.w	r4, #1
      if (SD.exists(SD_A4_RAIN_FILE)) {
 23e933a:	494d      	ldr	r1, [pc, #308]	; (23e9470 <_Z17Function_DoAction6String+0x520>)
 23e933c:	484d      	ldr	r0, [pc, #308]	; (23e9474 <_Z17Function_DoAction6String+0x524>)
 23e933e:	f7fb fedf 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e9342:	b310      	cbz	r0, 23e938a <_Z17Function_DoAction6String+0x43a>
        if (SD.remove (SD_A4_RAIN_FILE)) {
 23e9344:	494a      	ldr	r1, [pc, #296]	; (23e9470 <_Z17Function_DoAction6String+0x520>)
 23e9346:	484b      	ldr	r0, [pc, #300]	; (23e9474 <_Z17Function_DoAction6String+0x524>)
 23e9348:	f7fb fef5 	bl	23e5136 <_ZN8FsVolume6removeEPKc>
 23e934c:	b140      	cbz	r0, 23e9360 <_Z17Function_DoAction6String+0x410>
          A4_State = A4_STATE_NULL;      // We still need a reboot to get rid of ISR
 23e934e:	2200      	movs	r2, #0
 23e9350:	4b58      	ldr	r3, [pc, #352]	; (23e94b4 <_Z17Function_DoAction6String+0x564>)
          Output ("A4=CLR, DEL RAIN:OK");
 23e9352:	485b      	ldr	r0, [pc, #364]	; (23e94c0 <_Z17Function_DoAction6String+0x570>)
          A4_State = A4_STATE_NULL;      // We still need a reboot to get rid of ISR
 23e9354:	601a      	str	r2, [r3, #0]
        Output ("A4=CLR, DEL RAIN:NF");
 23e9356:	f7fc f999 	bl	23e568c <_Z6OutputPKc>
 23e935a:	e005      	b.n	23e9368 <_Z17Function_DoAction6String+0x418>
        Output ("A4=CLR, DEL RAIN:NF");
 23e935c:	4859      	ldr	r0, [pc, #356]	; (23e94c4 <_Z17Function_DoAction6String+0x574>)
 23e935e:	e7e4      	b.n	23e932a <_Z17Function_DoAction6String+0x3da>
          Output ("A4=CLR, DEL RAIN:ERR");
 23e9360:	4859      	ldr	r0, [pc, #356]	; (23e94c8 <_Z17Function_DoAction6String+0x578>)
 23e9362:	f7fc f993 	bl	23e568c <_Z6OutputPKc>
          state+=-3; // returns a -3 if also failed removing DIST file
 23e9366:	3c03      	subs	r4, #3
      if (SD.exists(SD_A4_RAW_FILE)) {
 23e9368:	494a      	ldr	r1, [pc, #296]	; (23e9494 <_Z17Function_DoAction6String+0x544>)
 23e936a:	4842      	ldr	r0, [pc, #264]	; (23e9474 <_Z17Function_DoAction6String+0x524>)
 23e936c:	f7fb fec8 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e9370:	b320      	cbz	r0, 23e93bc <_Z17Function_DoAction6String+0x46c>
        if (SD.remove (SD_A4_RAW_FILE)) {
 23e9372:	4948      	ldr	r1, [pc, #288]	; (23e9494 <_Z17Function_DoAction6String+0x544>)
 23e9374:	483f      	ldr	r0, [pc, #252]	; (23e9474 <_Z17Function_DoAction6String+0x524>)
 23e9376:	f7fb fede 	bl	23e5136 <_ZN8FsVolume6removeEPKc>
 23e937a:	b140      	cbz	r0, 23e938e <_Z17Function_DoAction6String+0x43e>
          A4_State = A4_STATE_NULL;
 23e937c:	2200      	movs	r2, #0
 23e937e:	4b4d      	ldr	r3, [pc, #308]	; (23e94b4 <_Z17Function_DoAction6String+0x564>)
          Output ("A4=CLR, DEL RAW:OK");
 23e9380:	4852      	ldr	r0, [pc, #328]	; (23e94cc <_Z17Function_DoAction6String+0x57c>)
          A4_State = A4_STATE_NULL;
 23e9382:	601a      	str	r2, [r3, #0]
        Output ("A4=CLR, DEL RAIN:NF");
 23e9384:	f7fc f982 	bl	23e568c <_Z6OutputPKc>
 23e9388:	e005      	b.n	23e9396 <_Z17Function_DoAction6String+0x446>
        Output ("A4=CLR, DEL RAIN:NF");
 23e938a:	484e      	ldr	r0, [pc, #312]	; (23e94c4 <_Z17Function_DoAction6String+0x574>)
 23e938c:	e7e3      	b.n	23e9356 <_Z17Function_DoAction6String+0x406>
          Output ("A4=CLR, DEL RAW:ERR");
 23e938e:	4850      	ldr	r0, [pc, #320]	; (23e94d0 <_Z17Function_DoAction6String+0x580>)
 23e9390:	f7fc f97c 	bl	23e568c <_Z6OutputPKc>
          state+=-4; // returns a -4 if also failed removing RAW file
 23e9394:	3c04      	subs	r4, #4
      if (SD.exists(SD_5M_DIST_FILE)) {
 23e9396:	493d      	ldr	r1, [pc, #244]	; (23e948c <_Z17Function_DoAction6String+0x53c>)
 23e9398:	4836      	ldr	r0, [pc, #216]	; (23e9474 <_Z17Function_DoAction6String+0x524>)
 23e939a:	f7fb feb1 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e939e:	2800      	cmp	r0, #0
 23e93a0:	f43f adea 	beq.w	23e8f78 <_Z17Function_DoAction6String+0x28>
        if (SD.remove (SD_5M_DIST_FILE)) {
 23e93a4:	4939      	ldr	r1, [pc, #228]	; (23e948c <_Z17Function_DoAction6String+0x53c>)
 23e93a6:	4833      	ldr	r0, [pc, #204]	; (23e9474 <_Z17Function_DoAction6String+0x524>)
 23e93a8:	f7fb fec5 	bl	23e5136 <_ZN8FsVolume6removeEPKc>
 23e93ac:	b140      	cbz	r0, 23e93c0 <_Z17Function_DoAction6String+0x470>
          Output ("A4=CLR, DEL 5M:OK");
 23e93ae:	4849      	ldr	r0, [pc, #292]	; (23e94d4 <_Z17Function_DoAction6String+0x584>)
 23e93b0:	f7fc f96c 	bl	23e568c <_Z6OutputPKc>
          dg_adjustment = 2.5;
 23e93b4:	4b33      	ldr	r3, [pc, #204]	; (23e9484 <_Z17Function_DoAction6String+0x534>)
 23e93b6:	4a34      	ldr	r2, [pc, #208]	; (23e9488 <_Z17Function_DoAction6String+0x538>)
 23e93b8:	601a      	str	r2, [r3, #0]
 23e93ba:	e5dd      	b.n	23e8f78 <_Z17Function_DoAction6String+0x28>
        Output ("A4=CLR, DEL RAIN:NF");
 23e93bc:	4841      	ldr	r0, [pc, #260]	; (23e94c4 <_Z17Function_DoAction6String+0x574>)
 23e93be:	e7e1      	b.n	23e9384 <_Z17Function_DoAction6String+0x434>
          Output ("A4=CLR, DEL 5M:ERR");
 23e93c0:	4845      	ldr	r0, [pc, #276]	; (23e94d8 <_Z17Function_DoAction6String+0x588>)
 23e93c2:	f7fc f963 	bl	23e568c <_Z6OutputPKc>
          state+=-5;
 23e93c6:	3c05      	subs	r4, #5
 23e93c8:	e5d6      	b.n	23e8f78 <_Z17Function_DoAction6String+0x28>
      Output("A4=CLR, SD NF"); 
 23e93ca:	4844      	ldr	r0, [pc, #272]	; (23e94dc <_Z17Function_DoAction6String+0x58c>)
 23e93cc:	e65e      	b.n	23e908c <_Z17Function_DoAction6String+0x13c>
  else if (strcmp (s,"A5RAW") == 0) { // Set A5 State File to Raw
 23e93ce:	4628      	mov	r0, r5
 23e93d0:	4943      	ldr	r1, [pc, #268]	; (23e94e0 <_Z17Function_DoAction6String+0x590>)
 23e93d2:	f7fa fff7 	bl	23e43c4 <strcmp>
 23e93d6:	4604      	mov	r4, r0
 23e93d8:	bb18      	cbnz	r0, 23e9422 <_Z17Function_DoAction6String+0x4d2>
    Output("DoAction:A5RAW");
 23e93da:	4842      	ldr	r0, [pc, #264]	; (23e94e4 <_Z17Function_DoAction6String+0x594>)
 23e93dc:	f7fc f956 	bl	23e568c <_Z6OutputPKc>
    if (SD_exists) {
 23e93e0:	4b22      	ldr	r3, [pc, #136]	; (23e946c <_Z17Function_DoAction6String+0x51c>)
 23e93e2:	781b      	ldrb	r3, [r3, #0]
 23e93e4:	b1db      	cbz	r3, 23e941e <_Z17Function_DoAction6String+0x4ce>
      if (SD.exists(SD_A5_RAW_FILE)) {
 23e93e6:	4940      	ldr	r1, [pc, #256]	; (23e94e8 <_Z17Function_DoAction6String+0x598>)
 23e93e8:	4822      	ldr	r0, [pc, #136]	; (23e9474 <_Z17Function_DoAction6String+0x524>)
 23e93ea:	f7fb fe89 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e93ee:	b108      	cbz	r0, 23e93f4 <_Z17Function_DoAction6String+0x4a4>
        Output ("A5=RAW, ALREADY EXISTS");    
 23e93f0:	483e      	ldr	r0, [pc, #248]	; (23e94ec <_Z17Function_DoAction6String+0x59c>)
 23e93f2:	e623      	b.n	23e903c <_Z17Function_DoAction6String+0xec>
        File fp = SD.open(SD_A5_RAW_FILE, FILE_WRITE);
 23e93f4:	4668      	mov	r0, sp
 23e93f6:	f244 2302 	movw	r3, #16898	; 0x4202
 23e93fa:	4a3b      	ldr	r2, [pc, #236]	; (23e94e8 <_Z17Function_DoAction6String+0x598>)
 23e93fc:	491d      	ldr	r1, [pc, #116]	; (23e9474 <_Z17Function_DoAction6String+0x524>)
 23e93fe:	f00c fb95 	bl	23f5b2c <_ZN8FsVolume4openEPKci>
 23e9402:	a804      	add	r0, sp, #16
 23e9404:	f7fb fef5 	bl	23e51f2 <_ZNK10FsBaseFile6isOpenEv>
        if (fp) {
 23e9408:	b138      	cbz	r0, 23e941a <_Z17Function_DoAction6String+0x4ca>
          fp.close();
 23e940a:	a804      	add	r0, sp, #16
 23e940c:	f00c fab5 	bl	23f597a <_ZN10FsBaseFile5closeEv>
          A5_State = A5_STATE_RAW;
 23e9410:	2201      	movs	r2, #1
 23e9412:	4b37      	ldr	r3, [pc, #220]	; (23e94f0 <_Z17Function_DoAction6String+0x5a0>)
          Output ("A5=RAW, SET");
 23e9414:	4837      	ldr	r0, [pc, #220]	; (23e94f4 <_Z17Function_DoAction6String+0x5a4>)
          A5_State = A5_STATE_RAW;
 23e9416:	601a      	str	r2, [r3, #0]
          Output ("A5=RAW, SET");
 23e9418:	e610      	b.n	23e903c <_Z17Function_DoAction6String+0xec>
          Output ("A5=RAW, OPEN ERR");
 23e941a:	4837      	ldr	r0, [pc, #220]	; (23e94f8 <_Z17Function_DoAction6String+0x5a8>)
 23e941c:	e612      	b.n	23e9044 <_Z17Function_DoAction6String+0xf4>
      Output("A5=RAW, SD NF"); 
 23e941e:	4837      	ldr	r0, [pc, #220]	; (23e94fc <_Z17Function_DoAction6String+0x5ac>)
 23e9420:	e634      	b.n	23e908c <_Z17Function_DoAction6String+0x13c>
  else if (strcmp (s,"A5CLR") == 0) { // Clear A5 State Files
 23e9422:	4628      	mov	r0, r5
 23e9424:	4936      	ldr	r1, [pc, #216]	; (23e9500 <_Z17Function_DoAction6String+0x5b0>)
 23e9426:	f7fa ffcd 	bl	23e43c4 <strcmp>
 23e942a:	4604      	mov	r4, r0
 23e942c:	2800      	cmp	r0, #0
 23e942e:	d173      	bne.n	23e9518 <_Z17Function_DoAction6String+0x5c8>
    Output("DoAction:A5CLR");
 23e9430:	4834      	ldr	r0, [pc, #208]	; (23e9504 <_Z17Function_DoAction6String+0x5b4>)
 23e9432:	f7fc f92b 	bl	23e568c <_Z6OutputPKc>
    if (SD_exists) {
 23e9436:	4b0d      	ldr	r3, [pc, #52]	; (23e946c <_Z17Function_DoAction6String+0x51c>)
 23e9438:	781b      	ldrb	r3, [r3, #0]
 23e943a:	b18b      	cbz	r3, 23e9460 <_Z17Function_DoAction6String+0x510>
      if (SD.exists(SD_A5_RAW_FILE)) {
 23e943c:	492a      	ldr	r1, [pc, #168]	; (23e94e8 <_Z17Function_DoAction6String+0x598>)
 23e943e:	480d      	ldr	r0, [pc, #52]	; (23e9474 <_Z17Function_DoAction6String+0x524>)
 23e9440:	f7fb fe5e 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e9444:	b150      	cbz	r0, 23e945c <_Z17Function_DoAction6String+0x50c>
        if (SD.remove (SD_A4_RAW_FILE)) {
 23e9446:	4913      	ldr	r1, [pc, #76]	; (23e9494 <_Z17Function_DoAction6String+0x544>)
 23e9448:	480a      	ldr	r0, [pc, #40]	; (23e9474 <_Z17Function_DoAction6String+0x524>)
 23e944a:	f7fb fe74 	bl	23e5136 <_ZN8FsVolume6removeEPKc>
 23e944e:	b118      	cbz	r0, 23e9458 <_Z17Function_DoAction6String+0x508>
          A5_State = A5_STATE_NULL;
 23e9450:	4b27      	ldr	r3, [pc, #156]	; (23e94f0 <_Z17Function_DoAction6String+0x5a0>)
          Output ("A5=CLR, DEL RAW:OK");
 23e9452:	482d      	ldr	r0, [pc, #180]	; (23e9508 <_Z17Function_DoAction6String+0x5b8>)
          A5_State = A5_STATE_NULL;
 23e9454:	601c      	str	r4, [r3, #0]
          Output ("A5=CLR, DEL RAW:OK");
 23e9456:	e5f1      	b.n	23e903c <_Z17Function_DoAction6String+0xec>
          Output ("A5=CLR, DEL RAW:ERR");
 23e9458:	482c      	ldr	r0, [pc, #176]	; (23e950c <_Z17Function_DoAction6String+0x5bc>)
 23e945a:	e5f3      	b.n	23e9044 <_Z17Function_DoAction6String+0xf4>
        Output ("A5=CLR, DEL A5RAW:NF");
 23e945c:	482c      	ldr	r0, [pc, #176]	; (23e9510 <_Z17Function_DoAction6String+0x5c0>)
 23e945e:	e5ed      	b.n	23e903c <_Z17Function_DoAction6String+0xec>
      Output("A5=CLR, SD NF"); 
 23e9460:	482c      	ldr	r0, [pc, #176]	; (23e9514 <_Z17Function_DoAction6String+0x5c4>)
 23e9462:	e613      	b.n	23e908c <_Z17Function_DoAction6String+0x13c>
 23e9464:	023fda0c 	.word	0x023fda0c
 23e9468:	023fda03 	.word	0x023fda03
 23e946c:	1006a780 	.word	0x1006a780
 23e9470:	1006a11a 	.word	0x1006a11a
 23e9474:	1006a2d4 	.word	0x1006a2d4
 23e9478:	023fd85d 	.word	0x023fd85d
 23e947c:	1006a10f 	.word	0x1006a10f
 23e9480:	023fda12 	.word	0x023fda12
 23e9484:	1006a1a0 	.word	0x1006a1a0
 23e9488:	40200000 	.word	0x40200000
 23e948c:	1006a104 	.word	0x1006a104
 23e9490:	023fda3d 	.word	0x023fda3d
 23e9494:	1006a125 	.word	0x1006a125
 23e9498:	023fda50 	.word	0x023fda50
 23e949c:	023fda27 	.word	0x023fda27
 23e94a0:	023fda67 	.word	0x023fda67
 23e94a4:	023fda73 	.word	0x023fda73
 23e94a8:	023fda84 	.word	0x023fda84
 23e94ac:	023fda9b 	.word	0x023fda9b
 23e94b0:	023fda92 	.word	0x023fda92
 23e94b4:	1006a25c 	.word	0x1006a25c
 23e94b8:	023fdaa1 	.word	0x023fdaa1
 23e94bc:	023fdab5 	.word	0x023fdab5
 23e94c0:	023fdade 	.word	0x023fdade
 23e94c4:	023fdaca 	.word	0x023fdaca
 23e94c8:	023fdaf2 	.word	0x023fdaf2
 23e94cc:	023fdb07 	.word	0x023fdb07
 23e94d0:	023fdb1a 	.word	0x023fdb1a
 23e94d4:	023fdb2e 	.word	0x023fdb2e
 23e94d8:	023fdb40 	.word	0x023fdb40
 23e94dc:	023fdb53 	.word	0x023fdb53
 23e94e0:	023fdb6a 	.word	0x023fdb6a
 23e94e4:	023fdb61 	.word	0x023fdb61
 23e94e8:	1006a12f 	.word	0x1006a12f
 23e94ec:	023fdb70 	.word	0x023fdb70
 23e94f0:	1006a260 	.word	0x1006a260
 23e94f4:	023fdb87 	.word	0x023fdb87
 23e94f8:	023fdb93 	.word	0x023fdb93
 23e94fc:	023fdba4 	.word	0x023fdba4
 23e9500:	023fdbbb 	.word	0x023fdbbb
 23e9504:	023fdbb2 	.word	0x023fdbb2
 23e9508:	023fdbc1 	.word	0x023fdbc1
 23e950c:	023fdbd4 	.word	0x023fdbd4
 23e9510:	023fdbe8 	.word	0x023fdbe8
 23e9514:	023fdbfd 	.word	0x023fdbfd
  else if (strcmp (s,"TXI5M") == 0) { // SetTransmit Interval to 5 Minutes
 23e9518:	4628      	mov	r0, r5
 23e951a:	4966      	ldr	r1, [pc, #408]	; (23e96b4 <_Z17Function_DoAction6String+0x764>)
 23e951c:	f7fa ff52 	bl	23e43c4 <strcmp>
 23e9520:	4604      	mov	r4, r0
 23e9522:	2800      	cmp	r0, #0
 23e9524:	d13d      	bne.n	23e95a2 <_Z17Function_DoAction6String+0x652>
    Output("DoAction:TXI5M");
 23e9526:	4864      	ldr	r0, [pc, #400]	; (23e96b8 <_Z17Function_DoAction6String+0x768>)
 23e9528:	f7fc f8b0 	bl	23e568c <_Z6OutputPKc>
    if (SD_exists) {
 23e952c:	4b63      	ldr	r3, [pc, #396]	; (23e96bc <_Z17Function_DoAction6String+0x76c>)
 23e952e:	781b      	ldrb	r3, [r3, #0]
 23e9530:	2b00      	cmp	r3, #0
 23e9532:	d034      	beq.n	23e959e <_Z17Function_DoAction6String+0x64e>
      if (SD.exists(SD_TX5M_FILE)) {
 23e9534:	4962      	ldr	r1, [pc, #392]	; (23e96c0 <_Z17Function_DoAction6String+0x770>)
 23e9536:	4863      	ldr	r0, [pc, #396]	; (23e96c4 <_Z17Function_DoAction6String+0x774>)
 23e9538:	f7fb fde2 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e953c:	b170      	cbz	r0, 23e955c <_Z17Function_DoAction6String+0x60c>
        Output ("TXI5M, ALREADY SET"); 
 23e953e:	4862      	ldr	r0, [pc, #392]	; (23e96c8 <_Z17Function_DoAction6String+0x778>)
 23e9540:	f7fc f8a4 	bl	23e568c <_Z6OutputPKc>
        obs_tx_interval = 5;     
 23e9544:	2005      	movs	r0, #5
 23e9546:	2100      	movs	r1, #0
 23e9548:	4b60      	ldr	r3, [pc, #384]	; (23e96cc <_Z17Function_DoAction6String+0x77c>)
 23e954a:	e9c3 0100 	strd	r0, r1, [r3]
      if (SD.exists(SD_TX10M_FILE)) {
 23e954e:	4960      	ldr	r1, [pc, #384]	; (23e96d0 <_Z17Function_DoAction6String+0x780>)
 23e9550:	485c      	ldr	r0, [pc, #368]	; (23e96c4 <_Z17Function_DoAction6String+0x774>)
 23e9552:	f7fb fdd5 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e9556:	b9d0      	cbnz	r0, 23e958e <_Z17Function_DoAction6String+0x63e>
    return(0);
 23e9558:	2400      	movs	r4, #0
 23e955a:	e50d      	b.n	23e8f78 <_Z17Function_DoAction6String+0x28>
        File fp = SD.open(SD_TX5M_FILE, FILE_WRITE);
 23e955c:	4668      	mov	r0, sp
 23e955e:	f244 2302 	movw	r3, #16898	; 0x4202
 23e9562:	4a57      	ldr	r2, [pc, #348]	; (23e96c0 <_Z17Function_DoAction6String+0x770>)
 23e9564:	4957      	ldr	r1, [pc, #348]	; (23e96c4 <_Z17Function_DoAction6String+0x774>)
 23e9566:	f00c fae1 	bl	23f5b2c <_ZN8FsVolume4openEPKci>
 23e956a:	a804      	add	r0, sp, #16
 23e956c:	f7fb fe41 	bl	23e51f2 <_ZNK10FsBaseFile6isOpenEv>
        if (fp) {
 23e9570:	b158      	cbz	r0, 23e958a <_Z17Function_DoAction6String+0x63a>
          fp.close();
 23e9572:	a804      	add	r0, sp, #16
 23e9574:	f00c fa01 	bl	23f597a <_ZN10FsBaseFile5closeEv>
          obs_tx_interval = 5;
 23e9578:	2005      	movs	r0, #5
 23e957a:	2100      	movs	r1, #0
 23e957c:	4b53      	ldr	r3, [pc, #332]	; (23e96cc <_Z17Function_DoAction6String+0x77c>)
 23e957e:	e9c3 0100 	strd	r0, r1, [r3]
          Output ("TXI5M SET");
 23e9582:	4854      	ldr	r0, [pc, #336]	; (23e96d4 <_Z17Function_DoAction6String+0x784>)
 23e9584:	f7fc f882 	bl	23e568c <_Z6OutputPKc>
    virtual ~Print() {}
 23e9588:	e7e1      	b.n	23e954e <_Z17Function_DoAction6String+0x5fe>
          Output ("TXI5M OPEN ERR");
 23e958a:	4853      	ldr	r0, [pc, #332]	; (23e96d8 <_Z17Function_DoAction6String+0x788>)
 23e958c:	e55a      	b.n	23e9044 <_Z17Function_DoAction6String+0xf4>
        if (SD.remove (SD_TX10M_FILE)) {
 23e958e:	4950      	ldr	r1, [pc, #320]	; (23e96d0 <_Z17Function_DoAction6String+0x780>)
 23e9590:	484c      	ldr	r0, [pc, #304]	; (23e96c4 <_Z17Function_DoAction6String+0x774>)
 23e9592:	f7fb fdd0 	bl	23e5136 <_ZN8FsVolume6removeEPKc>
 23e9596:	2800      	cmp	r0, #0
 23e9598:	d0de      	beq.n	23e9558 <_Z17Function_DoAction6String+0x608>
          Output ("TXI5M: Removed TX10M File");
 23e959a:	4850      	ldr	r0, [pc, #320]	; (23e96dc <_Z17Function_DoAction6String+0x78c>)
 23e959c:	e54e      	b.n	23e903c <_Z17Function_DoAction6String+0xec>
      Output("TXI5M, SD NF"); 
 23e959e:	4850      	ldr	r0, [pc, #320]	; (23e96e0 <_Z17Function_DoAction6String+0x790>)
 23e95a0:	e574      	b.n	23e908c <_Z17Function_DoAction6String+0x13c>
  else if (strcmp (s,"TXI10M") == 0) { // SetTransmit Interval to 10 Minutes
 23e95a2:	4628      	mov	r0, r5
 23e95a4:	494f      	ldr	r1, [pc, #316]	; (23e96e4 <_Z17Function_DoAction6String+0x794>)
 23e95a6:	f7fa ff0d 	bl	23e43c4 <strcmp>
 23e95aa:	4604      	mov	r4, r0
 23e95ac:	2800      	cmp	r0, #0
 23e95ae:	d13c      	bne.n	23e962a <_Z17Function_DoAction6String+0x6da>
    Output("DoAction:TXI10M");
 23e95b0:	484d      	ldr	r0, [pc, #308]	; (23e96e8 <_Z17Function_DoAction6String+0x798>)
 23e95b2:	f7fc f86b 	bl	23e568c <_Z6OutputPKc>
    if (SD_exists) {
 23e95b6:	4b41      	ldr	r3, [pc, #260]	; (23e96bc <_Z17Function_DoAction6String+0x76c>)
 23e95b8:	781b      	ldrb	r3, [r3, #0]
 23e95ba:	2b00      	cmp	r3, #0
 23e95bc:	d033      	beq.n	23e9626 <_Z17Function_DoAction6String+0x6d6>
      if (SD.exists(SD_TX10M_FILE)) {
 23e95be:	4944      	ldr	r1, [pc, #272]	; (23e96d0 <_Z17Function_DoAction6String+0x780>)
 23e95c0:	4840      	ldr	r0, [pc, #256]	; (23e96c4 <_Z17Function_DoAction6String+0x774>)
 23e95c2:	f7fb fd9d 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e95c6:	b1a8      	cbz	r0, 23e95f4 <_Z17Function_DoAction6String+0x6a4>
        Output ("TXI10M, ALREADY SET"); 
 23e95c8:	4848      	ldr	r0, [pc, #288]	; (23e96ec <_Z17Function_DoAction6String+0x79c>)
 23e95ca:	f7fc f85f 	bl	23e568c <_Z6OutputPKc>
        obs_tx_interval = 10;     
 23e95ce:	200a      	movs	r0, #10
 23e95d0:	2100      	movs	r1, #0
 23e95d2:	4b3e      	ldr	r3, [pc, #248]	; (23e96cc <_Z17Function_DoAction6String+0x77c>)
 23e95d4:	e9c3 0100 	strd	r0, r1, [r3]
      if (SD.exists(SD_TX5M_FILE)) {
 23e95d8:	4939      	ldr	r1, [pc, #228]	; (23e96c0 <_Z17Function_DoAction6String+0x770>)
 23e95da:	483a      	ldr	r0, [pc, #232]	; (23e96c4 <_Z17Function_DoAction6String+0x774>)
 23e95dc:	f7fb fd90 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e95e0:	2800      	cmp	r0, #0
 23e95e2:	d0b9      	beq.n	23e9558 <_Z17Function_DoAction6String+0x608>
        if (SD.remove (SD_TX5M_FILE)) {
 23e95e4:	4936      	ldr	r1, [pc, #216]	; (23e96c0 <_Z17Function_DoAction6String+0x770>)
 23e95e6:	4837      	ldr	r0, [pc, #220]	; (23e96c4 <_Z17Function_DoAction6String+0x774>)
 23e95e8:	f7fb fda5 	bl	23e5136 <_ZN8FsVolume6removeEPKc>
 23e95ec:	2800      	cmp	r0, #0
 23e95ee:	d0b3      	beq.n	23e9558 <_Z17Function_DoAction6String+0x608>
          Output ("TXI5M: Removed TX5M File");
 23e95f0:	483f      	ldr	r0, [pc, #252]	; (23e96f0 <_Z17Function_DoAction6String+0x7a0>)
 23e95f2:	e523      	b.n	23e903c <_Z17Function_DoAction6String+0xec>
        File fp = SD.open(SD_TX10M_FILE, FILE_WRITE);
 23e95f4:	4668      	mov	r0, sp
 23e95f6:	f244 2302 	movw	r3, #16898	; 0x4202
 23e95fa:	4a35      	ldr	r2, [pc, #212]	; (23e96d0 <_Z17Function_DoAction6String+0x780>)
 23e95fc:	4931      	ldr	r1, [pc, #196]	; (23e96c4 <_Z17Function_DoAction6String+0x774>)
 23e95fe:	f00c fa95 	bl	23f5b2c <_ZN8FsVolume4openEPKci>
 23e9602:	a804      	add	r0, sp, #16
 23e9604:	f7fb fdf5 	bl	23e51f2 <_ZNK10FsBaseFile6isOpenEv>
        if (fp) {
 23e9608:	b158      	cbz	r0, 23e9622 <_Z17Function_DoAction6String+0x6d2>
          fp.close();
 23e960a:	a804      	add	r0, sp, #16
 23e960c:	f00c f9b5 	bl	23f597a <_ZN10FsBaseFile5closeEv>
          obs_tx_interval = 10;
 23e9610:	200a      	movs	r0, #10
 23e9612:	2100      	movs	r1, #0
 23e9614:	4b2d      	ldr	r3, [pc, #180]	; (23e96cc <_Z17Function_DoAction6String+0x77c>)
 23e9616:	e9c3 0100 	strd	r0, r1, [r3]
          Output ("TXI10M SET");
 23e961a:	4836      	ldr	r0, [pc, #216]	; (23e96f4 <_Z17Function_DoAction6String+0x7a4>)
 23e961c:	f7fc f836 	bl	23e568c <_Z6OutputPKc>
 23e9620:	e7da      	b.n	23e95d8 <_Z17Function_DoAction6String+0x688>
          Output ("TXI10M OPEN ERR");
 23e9622:	4835      	ldr	r0, [pc, #212]	; (23e96f8 <_Z17Function_DoAction6String+0x7a8>)
 23e9624:	e50e      	b.n	23e9044 <_Z17Function_DoAction6String+0xf4>
      Output("TXI10M, SD NF"); 
 23e9626:	4835      	ldr	r0, [pc, #212]	; (23e96fc <_Z17Function_DoAction6String+0x7ac>)
 23e9628:	e530      	b.n	23e908c <_Z17Function_DoAction6String+0x13c>
  else if (strcmp (s,"TXI15M") == 0) { // SetTransmit Interval to 15 Minutes
 23e962a:	4628      	mov	r0, r5
 23e962c:	4934      	ldr	r1, [pc, #208]	; (23e9700 <_Z17Function_DoAction6String+0x7b0>)
 23e962e:	f7fa fec9 	bl	23e43c4 <strcmp>
 23e9632:	4604      	mov	r4, r0
 23e9634:	2800      	cmp	r0, #0
 23e9636:	d13b      	bne.n	23e96b0 <_Z17Function_DoAction6String+0x760>
    Output("DoAction:TXI15M");
 23e9638:	4832      	ldr	r0, [pc, #200]	; (23e9704 <_Z17Function_DoAction6String+0x7b4>)
 23e963a:	f7fc f827 	bl	23e568c <_Z6OutputPKc>
    if (SD_exists) {
 23e963e:	4b1f      	ldr	r3, [pc, #124]	; (23e96bc <_Z17Function_DoAction6String+0x76c>)
 23e9640:	781b      	ldrb	r3, [r3, #0]
 23e9642:	2b00      	cmp	r3, #0
 23e9644:	d032      	beq.n	23e96ac <_Z17Function_DoAction6String+0x75c>
      if (!SD.exists(SD_TX5M_FILE) && !SD.exists(SD_TX10M_FILE)) {
 23e9646:	491e      	ldr	r1, [pc, #120]	; (23e96c0 <_Z17Function_DoAction6String+0x770>)
 23e9648:	481e      	ldr	r0, [pc, #120]	; (23e96c4 <_Z17Function_DoAction6String+0x774>)
 23e964a:	f7fb fd59 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e964e:	4d1f      	ldr	r5, [pc, #124]	; (23e96cc <_Z17Function_DoAction6String+0x77c>)
 23e9650:	b960      	cbnz	r0, 23e966c <_Z17Function_DoAction6String+0x71c>
 23e9652:	491f      	ldr	r1, [pc, #124]	; (23e96d0 <_Z17Function_DoAction6String+0x780>)
 23e9654:	481b      	ldr	r0, [pc, #108]	; (23e96c4 <_Z17Function_DoAction6String+0x774>)
 23e9656:	f7fb fd53 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e965a:	b938      	cbnz	r0, 23e966c <_Z17Function_DoAction6String+0x71c>
        Output ("TXI15M, ALREADY SET"); 
 23e965c:	482a      	ldr	r0, [pc, #168]	; (23e9708 <_Z17Function_DoAction6String+0x7b8>)
 23e965e:	f7fc f815 	bl	23e568c <_Z6OutputPKc>
        obs_tx_interval = 15;     
 23e9662:	220f      	movs	r2, #15
 23e9664:	2300      	movs	r3, #0
 23e9666:	e9c5 2300 	strd	r2, r3, [r5]
 23e966a:	e485      	b.n	23e8f78 <_Z17Function_DoAction6String+0x28>
        if (SD.exists(SD_TX5M_FILE)) {
 23e966c:	4914      	ldr	r1, [pc, #80]	; (23e96c0 <_Z17Function_DoAction6String+0x770>)
 23e966e:	4815      	ldr	r0, [pc, #84]	; (23e96c4 <_Z17Function_DoAction6String+0x774>)
 23e9670:	f7fb fd46 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e9674:	b138      	cbz	r0, 23e9686 <_Z17Function_DoAction6String+0x736>
          if (SD.remove (SD_TX5M_FILE)) {
 23e9676:	4912      	ldr	r1, [pc, #72]	; (23e96c0 <_Z17Function_DoAction6String+0x770>)
 23e9678:	4812      	ldr	r0, [pc, #72]	; (23e96c4 <_Z17Function_DoAction6String+0x774>)
 23e967a:	f7fb fd5c 	bl	23e5136 <_ZN8FsVolume6removeEPKc>
 23e967e:	b110      	cbz	r0, 23e9686 <_Z17Function_DoAction6String+0x736>
            Output ("TXI15M: Removed TX5M File");
 23e9680:	4822      	ldr	r0, [pc, #136]	; (23e970c <_Z17Function_DoAction6String+0x7bc>)
 23e9682:	f7fc f803 	bl	23e568c <_Z6OutputPKc>
        if (SD.exists(SD_TX10M_FILE)) {
 23e9686:	4912      	ldr	r1, [pc, #72]	; (23e96d0 <_Z17Function_DoAction6String+0x780>)
 23e9688:	480e      	ldr	r0, [pc, #56]	; (23e96c4 <_Z17Function_DoAction6String+0x774>)
 23e968a:	f7fb fd39 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e968e:	b138      	cbz	r0, 23e96a0 <_Z17Function_DoAction6String+0x750>
          if (SD.remove (SD_TX10M_FILE)) {
 23e9690:	490f      	ldr	r1, [pc, #60]	; (23e96d0 <_Z17Function_DoAction6String+0x780>)
 23e9692:	480c      	ldr	r0, [pc, #48]	; (23e96c4 <_Z17Function_DoAction6String+0x774>)
 23e9694:	f7fb fd4f 	bl	23e5136 <_ZN8FsVolume6removeEPKc>
 23e9698:	b110      	cbz	r0, 23e96a0 <_Z17Function_DoAction6String+0x750>
            Output ("TXI15M: Removed TX10M File");
 23e969a:	481d      	ldr	r0, [pc, #116]	; (23e9710 <_Z17Function_DoAction6String+0x7c0>)
 23e969c:	f7fb fff6 	bl	23e568c <_Z6OutputPKc>
        obs_tx_interval = 15;
 23e96a0:	220f      	movs	r2, #15
 23e96a2:	2300      	movs	r3, #0
        Output ("TXI15M SET"); 
 23e96a4:	481b      	ldr	r0, [pc, #108]	; (23e9714 <_Z17Function_DoAction6String+0x7c4>)
        obs_tx_interval = 15;
 23e96a6:	e9c5 2300 	strd	r2, r3, [r5]
        Output ("TXI15M SET"); 
 23e96aa:	e4c7      	b.n	23e903c <_Z17Function_DoAction6String+0xec>
      Output("TXI15M, SD NF"); 
 23e96ac:	481a      	ldr	r0, [pc, #104]	; (23e9718 <_Z17Function_DoAction6String+0x7c8>)
 23e96ae:	e4ed      	b.n	23e908c <_Z17Function_DoAction6String+0x13c>
    Output("DoAction:UKN"); 
 23e96b0:	481a      	ldr	r0, [pc, #104]	; (23e971c <_Z17Function_DoAction6String+0x7cc>)
 23e96b2:	e4eb      	b.n	23e908c <_Z17Function_DoAction6String+0x13c>
 23e96b4:	023fdc14 	.word	0x023fdc14
 23e96b8:	023fdc0b 	.word	0x023fdc0b
 23e96bc:	1006a780 	.word	0x1006a780
 23e96c0:	1006a14d 	.word	0x1006a14d
 23e96c4:	1006a2d4 	.word	0x1006a2d4
 23e96c8:	023fdc1a 	.word	0x023fdc1a
 23e96cc:	1006a1a8 	.word	0x1006a1a8
 23e96d0:	1006a142 	.word	0x1006a142
 23e96d4:	023fdc2d 	.word	0x023fdc2d
 23e96d8:	023fdc37 	.word	0x023fdc37
 23e96dc:	023fdc46 	.word	0x023fdc46
 23e96e0:	023fdc60 	.word	0x023fdc60
 23e96e4:	023fdc76 	.word	0x023fdc76
 23e96e8:	023fdc6d 	.word	0x023fdc6d
 23e96ec:	023fdc7d 	.word	0x023fdc7d
 23e96f0:	023fdcac 	.word	0x023fdcac
 23e96f4:	023fdc91 	.word	0x023fdc91
 23e96f8:	023fdc9c 	.word	0x023fdc9c
 23e96fc:	023fdcc5 	.word	0x023fdcc5
 23e9700:	023fdcdc 	.word	0x023fdcdc
 23e9704:	023fdcd3 	.word	0x023fdcd3
 23e9708:	023fdce3 	.word	0x023fdce3
 23e970c:	023fdcf7 	.word	0x023fdcf7
 23e9710:	023fdd11 	.word	0x023fdd11
 23e9714:	023fdd2c 	.word	0x023fdd2c
 23e9718:	023fdd37 	.word	0x023fdd37
 23e971c:	023fdd45 	.word	0x023fdd45

023e9720 <_Z20WiFiPrintCredentialsv>:
void WiFiPrintCredentials() {
 23e9720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     * Retrieves a 6-octet MAC address
     * @param mac
     * @return
     */
    uint8_t* macAddress(uint8_t *mac) {
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
 23e9724:	484c      	ldr	r0, [pc, #304]	; (23e9858 <_Z20WiFiPrintCredentialsv+0x138>)
 23e9726:	b0ca      	sub	sp, #296	; 0x128
 23e9728:	f7fb fc5c 	bl	23e4fe4 <_ZN5spark9WiFiClass11wifi_configEv>
  sprintf (msgbuf, "WIFI MAC[%02x:%02x:%02x:%02x:%02x:%02x]", mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 23e972c:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
 23e9730:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 23e9734:	f890 2057 	ldrb.w	r2, [r0, #87]	; 0x57
 23e9738:	9103      	str	r1, [sp, #12]
 23e973a:	f890 105b 	ldrb.w	r1, [r0, #91]	; 0x5b
 23e973e:	ac04      	add	r4, sp, #16
 23e9740:	9102      	str	r1, [sp, #8]
 23e9742:	f890 105a 	ldrb.w	r1, [r0, #90]	; 0x5a
  Output(msgbuf);
 23e9746:	4626      	mov	r6, r4
  sprintf (msgbuf, "WIFI MAC[%02x:%02x:%02x:%02x:%02x:%02x]", mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 23e9748:	9101      	str	r1, [sp, #4]
 23e974a:	f890 1059 	ldrb.w	r1, [r0, #89]	; 0x59
 23e974e:	4843      	ldr	r0, [pc, #268]	; (23e985c <_Z20WiFiPrintCredentialsv+0x13c>)
 23e9750:	9100      	str	r1, [sp, #0]
 23e9752:	4943      	ldr	r1, [pc, #268]	; (23e9860 <_Z20WiFiPrintCredentialsv+0x140>)
 23e9754:	f00d fe88 	bl	23f7468 <sprintf>
  Output(msgbuf);
 23e9758:	4840      	ldr	r0, [pc, #256]	; (23e985c <_Z20WiFiPrintCredentialsv+0x13c>)
 23e975a:	f7fb ff97 	bl	23e568c <_Z6OutputPKc>
 23e975e:	2505      	movs	r5, #5
#ifdef __cplusplus

   WiFiAccessPoint()
   {
       memset(this, 0, sizeof(*this));
       size = sizeof(*this);
 23e9760:	2738      	movs	r7, #56	; 0x38
       memset(this, 0, sizeof(*this));
 23e9762:	1d30      	adds	r0, r6, #4
 23e9764:	2234      	movs	r2, #52	; 0x34
 23e9766:	2100      	movs	r1, #0
 23e9768:	f012 ffc9 	bl	23fc6fe <memset>
  WiFiAccessPoint ap[5];
 23e976c:	3d01      	subs	r5, #1
       size = sizeof(*this);
 23e976e:	f846 7b38 	str.w	r7, [r6], #56
 23e9772:	d1f6      	bne.n	23e9762 <_Z20WiFiPrintCredentialsv+0x42>
  WiFi.getCredentials(ap, 5);
 23e9774:	2205      	movs	r2, #5
 23e9776:	4621      	mov	r1, r4
 23e9778:	4837      	ldr	r0, [pc, #220]	; (23e9858 <_Z20WiFiPrintCredentialsv+0x138>)
 23e977a:	f010 f807 	bl	23f978c <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>
  int found = 0;
 23e977e:	462e      	mov	r6, r5
      sprintf (msgbuf, "IDX[%d]", i);
 23e9780:	f8df 8110 	ldr.w	r8, [pc, #272]	; 23e9894 <_Z20WiFiPrintCredentialsv+0x174>
 23e9784:	4f35      	ldr	r7, [pc, #212]	; (23e985c <_Z20WiFiPrintCredentialsv+0x13c>)
      sprintf (msgbuf, " SSID[%s]", ap[i].ssid);
 23e9786:	f8df 9110 	ldr.w	r9, [pc, #272]	; 23e9898 <_Z20WiFiPrintCredentialsv+0x178>
    if (strlen(ap[i].ssid) != 0) {
 23e978a:	7923      	ldrb	r3, [r4, #4]
 23e978c:	f104 0a04 	add.w	sl, r4, #4
 23e9790:	2b00      	cmp	r3, #0
 23e9792:	d049      	beq.n	23e9828 <_Z20WiFiPrintCredentialsv+0x108>
      found++;
 23e9794:	3601      	adds	r6, #1
      if (found == 1) {
 23e9796:	2e01      	cmp	r6, #1
 23e9798:	d102      	bne.n	23e97a0 <_Z20WiFiPrintCredentialsv+0x80>
        Output("WIFI Creds:");
 23e979a:	4832      	ldr	r0, [pc, #200]	; (23e9864 <_Z20WiFiPrintCredentialsv+0x144>)
 23e979c:	f7fb ff76 	bl	23e568c <_Z6OutputPKc>
      sprintf (msgbuf, "IDX[%d]", i);
 23e97a0:	462a      	mov	r2, r5
 23e97a2:	4641      	mov	r1, r8
 23e97a4:	4638      	mov	r0, r7
 23e97a6:	f00d fe5f 	bl	23f7468 <sprintf>
      Output(msgbuf);
 23e97aa:	4638      	mov	r0, r7
 23e97ac:	f7fb ff6e 	bl	23e568c <_Z6OutputPKc>
      sprintf (msgbuf, " SSID[%s]", ap[i].ssid);
 23e97b0:	4652      	mov	r2, sl
 23e97b2:	4649      	mov	r1, r9
 23e97b4:	4638      	mov	r0, r7
 23e97b6:	f00d fe57 	bl	23f7468 <sprintf>
      Output(msgbuf);
 23e97ba:	4638      	mov	r0, r7
 23e97bc:	f7fb ff66 	bl	23e568c <_Z6OutputPKc>
      switch (ap[i].security) {
 23e97c0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 23e97c4:	2b05      	cmp	r3, #5
 23e97c6:	d845      	bhi.n	23e9854 <_Z20WiFiPrintCredentialsv+0x134>
 23e97c8:	e8df f003 	tbb	[pc, r3]
 23e97cc:	3e3c3a03 	.word	0x3e3c3a03
 23e97d0:	4240      	.short	0x4240
          Output(" Type:Unsecured");
 23e97d2:	4825      	ldr	r0, [pc, #148]	; (23e9868 <_Z20WiFiPrintCredentialsv+0x148>)
          Output(" Type:Unknown");
 23e97d4:	f7fb ff5a 	bl	23e568c <_Z6OutputPKc>
      sprintf (msgbuf, " SigStr[%d]", ap[i].rssi);
 23e97d8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 23e97da:	4924      	ldr	r1, [pc, #144]	; (23e986c <_Z20WiFiPrintCredentialsv+0x14c>)
 23e97dc:	4638      	mov	r0, r7
 23e97de:	f00d fe43 	bl	23f7468 <sprintf>
      Output(msgbuf);
 23e97e2:	4638      	mov	r0, r7
 23e97e4:	f7fb ff52 	bl	23e568c <_Z6OutputPKc>
      sprintf (msgbuf, " Channel[%d]", ap[i].channel);
 23e97e8:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 23e97ec:	4920      	ldr	r1, [pc, #128]	; (23e9870 <_Z20WiFiPrintCredentialsv+0x150>)
 23e97ee:	4638      	mov	r0, r7
 23e97f0:	f00d fe3a 	bl	23f7468 <sprintf>
      Output(msgbuf);
 23e97f4:	4638      	mov	r0, r7
 23e97f6:	f7fb ff49 	bl	23e568c <_Z6OutputPKc>
      sprintf (msgbuf, " BMAC[%02x:%02x:%02x:%02x:%02x:%02x]", 
 23e97fa:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 23e97fe:	4638      	mov	r0, r7
 23e9800:	9303      	str	r3, [sp, #12]
 23e9802:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 23e9806:	491b      	ldr	r1, [pc, #108]	; (23e9874 <_Z20WiFiPrintCredentialsv+0x154>)
 23e9808:	9302      	str	r3, [sp, #8]
 23e980a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 23e980e:	9301      	str	r3, [sp, #4]
 23e9810:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 23e9814:	9300      	str	r3, [sp, #0]
 23e9816:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 23e981a:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 23e981e:	f00d fe23 	bl	23f7468 <sprintf>
      Output(msgbuf);
 23e9822:	4638      	mov	r0, r7
 23e9824:	f7fb ff32 	bl	23e568c <_Z6OutputPKc>
  for (int i = 0; i < 5; i++) {
 23e9828:	3501      	adds	r5, #1
 23e982a:	2d05      	cmp	r5, #5
 23e982c:	f104 0438 	add.w	r4, r4, #56	; 0x38
 23e9830:	d1ab      	bne.n	23e978a <_Z20WiFiPrintCredentialsv+0x6a>
  if (!found) {
 23e9832:	b916      	cbnz	r6, 23e983a <_Z20WiFiPrintCredentialsv+0x11a>
    Output("WIFI Creds:NF");
 23e9834:	4810      	ldr	r0, [pc, #64]	; (23e9878 <_Z20WiFiPrintCredentialsv+0x158>)
 23e9836:	f7fb ff29 	bl	23e568c <_Z6OutputPKc>
}
 23e983a:	b04a      	add	sp, #296	; 0x128
 23e983c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          Output(" Type:WEP");
 23e9840:	480e      	ldr	r0, [pc, #56]	; (23e987c <_Z20WiFiPrintCredentialsv+0x15c>)
 23e9842:	e7c7      	b.n	23e97d4 <_Z20WiFiPrintCredentialsv+0xb4>
          Output(" Type:WPA");
 23e9844:	480e      	ldr	r0, [pc, #56]	; (23e9880 <_Z20WiFiPrintCredentialsv+0x160>)
 23e9846:	e7c5      	b.n	23e97d4 <_Z20WiFiPrintCredentialsv+0xb4>
          Output(" Type:WPA2");
 23e9848:	480e      	ldr	r0, [pc, #56]	; (23e9884 <_Z20WiFiPrintCredentialsv+0x164>)
 23e984a:	e7c3      	b.n	23e97d4 <_Z20WiFiPrintCredentialsv+0xb4>
          Output(" Type:WPA Ent");
 23e984c:	480e      	ldr	r0, [pc, #56]	; (23e9888 <_Z20WiFiPrintCredentialsv+0x168>)
 23e984e:	e7c1      	b.n	23e97d4 <_Z20WiFiPrintCredentialsv+0xb4>
          Output(" Type:WPA2 Ent");
 23e9850:	480e      	ldr	r0, [pc, #56]	; (23e988c <_Z20WiFiPrintCredentialsv+0x16c>)
 23e9852:	e7bf      	b.n	23e97d4 <_Z20WiFiPrintCredentialsv+0xb4>
          Output(" Type:Unknown");
 23e9854:	480e      	ldr	r0, [pc, #56]	; (23e9890 <_Z20WiFiPrintCredentialsv+0x170>)
 23e9856:	e7bd      	b.n	23e97d4 <_Z20WiFiPrintCredentialsv+0xb4>
 23e9858:	1007af98 	.word	0x1007af98
 23e985c:	1006f128 	.word	0x1006f128
 23e9860:	023fdd52 	.word	0x023fdd52
 23e9864:	023fdd7a 	.word	0x023fdd7a
 23e9868:	023fdd98 	.word	0x023fdd98
 23e986c:	023fddf2 	.word	0x023fddf2
 23e9870:	023fddfe 	.word	0x023fddfe
 23e9874:	023fde0b 	.word	0x023fde0b
 23e9878:	023fde30 	.word	0x023fde30
 23e987c:	023fdda8 	.word	0x023fdda8
 23e9880:	023fddb2 	.word	0x023fddb2
 23e9884:	023fddbc 	.word	0x023fddbc
 23e9888:	023fddc7 	.word	0x023fddc7
 23e988c:	023fddd5 	.word	0x023fddd5
 23e9890:	023fdde4 	.word	0x023fdde4
 23e9894:	023fdd86 	.word	0x023fdd86
 23e9898:	023fdd8e 	.word	0x023fdd8e

023e989c <_Z14TXI_Initializev>:
/* 
 *=======================================================================================================================
 * TXI_Initialize() - Transmit Interval 5, 10 or 15 minutes
 *=======================================================================================================================
 */
void TXI_Initialize() {
 23e989c:	b510      	push	{r4, lr}
  Output ("TXI:INIT");
 23e989e:	4822      	ldr	r0, [pc, #136]	; (23e9928 <_Z14TXI_Initializev+0x8c>)
 23e98a0:	f7fb fef4 	bl	23e568c <_Z6OutputPKc>
  if (SD_exists) {
 23e98a4:	4b21      	ldr	r3, [pc, #132]	; (23e992c <_Z14TXI_Initializev+0x90>)
 23e98a6:	4c22      	ldr	r4, [pc, #136]	; (23e9930 <_Z14TXI_Initializev+0x94>)
 23e98a8:	781b      	ldrb	r3, [r3, #0]
 23e98aa:	b1c3      	cbz	r3, 23e98de <_Z14TXI_Initializev+0x42>
    if (SD.exists(SD_TX5M_FILE)) {
 23e98ac:	4921      	ldr	r1, [pc, #132]	; (23e9934 <_Z14TXI_Initializev+0x98>)
 23e98ae:	4822      	ldr	r0, [pc, #136]	; (23e9938 <_Z14TXI_Initializev+0x9c>)
 23e98b0:	f7fb fc26 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e98b4:	b1e8      	cbz	r0, 23e98f2 <_Z14TXI_Initializev+0x56>
      Output ("TXI5M Found");
 23e98b6:	4821      	ldr	r0, [pc, #132]	; (23e993c <_Z14TXI_Initializev+0xa0>)
 23e98b8:	f7fb fee8 	bl	23e568c <_Z6OutputPKc>
      obs_tx_interval = 5;
 23e98bc:	2205      	movs	r2, #5
 23e98be:	2300      	movs	r3, #0
      if (SD.exists(SD_TX10M_FILE)) {
 23e98c0:	491f      	ldr	r1, [pc, #124]	; (23e9940 <_Z14TXI_Initializev+0xa4>)
 23e98c2:	481d      	ldr	r0, [pc, #116]	; (23e9938 <_Z14TXI_Initializev+0x9c>)
      obs_tx_interval = 5;
 23e98c4:	e9c4 2300 	strd	r2, r3, [r4]
      if (SD.exists(SD_TX10M_FILE)) {
 23e98c8:	f7fb fc1a 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e98cc:	b138      	cbz	r0, 23e98de <_Z14TXI_Initializev+0x42>
        if (SD.remove (SD_TX10M_FILE)) {
 23e98ce:	491c      	ldr	r1, [pc, #112]	; (23e9940 <_Z14TXI_Initializev+0xa4>)
 23e98d0:	4819      	ldr	r0, [pc, #100]	; (23e9938 <_Z14TXI_Initializev+0x9c>)
 23e98d2:	f7fb fc30 	bl	23e5136 <_ZN8FsVolume6removeEPKc>
 23e98d6:	b110      	cbz	r0, 23e98de <_Z14TXI_Initializev+0x42>
          Output ("TXI:RM 10M");
 23e98d8:	481a      	ldr	r0, [pc, #104]	; (23e9944 <_Z14TXI_Initializev+0xa8>)
    else if (SD.exists(SD_TX10M_FILE)) {
      Output ("TXI10M Found");
      obs_tx_interval = 10;
      if (SD.exists(SD_TX5M_FILE)) {
        if (SD.remove (SD_TX5M_FILE)) {
          Output ("TXI:RM 5M");
 23e98da:	f7fb fed7 	bl	23e568c <_Z6OutputPKc>
        }
      }
    }
  }
  sprintf (msgbuf, "TXI=%dM", (int) obs_tx_interval);
 23e98de:	6822      	ldr	r2, [r4, #0]
 23e98e0:	4919      	ldr	r1, [pc, #100]	; (23e9948 <_Z14TXI_Initializev+0xac>)
 23e98e2:	481a      	ldr	r0, [pc, #104]	; (23e994c <_Z14TXI_Initializev+0xb0>)
 23e98e4:	f00d fdc0 	bl	23f7468 <sprintf>
  Output(msgbuf);  
 23e98e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Output(msgbuf);  
 23e98ec:	4817      	ldr	r0, [pc, #92]	; (23e994c <_Z14TXI_Initializev+0xb0>)
 23e98ee:	f7fb becd 	b.w	23e568c <_Z6OutputPKc>
    else if (SD.exists(SD_TX10M_FILE)) {
 23e98f2:	4913      	ldr	r1, [pc, #76]	; (23e9940 <_Z14TXI_Initializev+0xa4>)
 23e98f4:	4810      	ldr	r0, [pc, #64]	; (23e9938 <_Z14TXI_Initializev+0x9c>)
 23e98f6:	f7fb fc03 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e98fa:	2800      	cmp	r0, #0
 23e98fc:	d0ef      	beq.n	23e98de <_Z14TXI_Initializev+0x42>
      Output ("TXI10M Found");
 23e98fe:	4814      	ldr	r0, [pc, #80]	; (23e9950 <_Z14TXI_Initializev+0xb4>)
 23e9900:	f7fb fec4 	bl	23e568c <_Z6OutputPKc>
      obs_tx_interval = 10;
 23e9904:	220a      	movs	r2, #10
 23e9906:	2300      	movs	r3, #0
      if (SD.exists(SD_TX5M_FILE)) {
 23e9908:	490a      	ldr	r1, [pc, #40]	; (23e9934 <_Z14TXI_Initializev+0x98>)
 23e990a:	480b      	ldr	r0, [pc, #44]	; (23e9938 <_Z14TXI_Initializev+0x9c>)
      obs_tx_interval = 10;
 23e990c:	e9c4 2300 	strd	r2, r3, [r4]
      if (SD.exists(SD_TX5M_FILE)) {
 23e9910:	f7fb fbf6 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23e9914:	2800      	cmp	r0, #0
 23e9916:	d0e2      	beq.n	23e98de <_Z14TXI_Initializev+0x42>
        if (SD.remove (SD_TX5M_FILE)) {
 23e9918:	4906      	ldr	r1, [pc, #24]	; (23e9934 <_Z14TXI_Initializev+0x98>)
 23e991a:	4807      	ldr	r0, [pc, #28]	; (23e9938 <_Z14TXI_Initializev+0x9c>)
 23e991c:	f7fb fc0b 	bl	23e5136 <_ZN8FsVolume6removeEPKc>
 23e9920:	2800      	cmp	r0, #0
 23e9922:	d0dc      	beq.n	23e98de <_Z14TXI_Initializev+0x42>
          Output ("TXI:RM 5M");
 23e9924:	480b      	ldr	r0, [pc, #44]	; (23e9954 <_Z14TXI_Initializev+0xb8>)
 23e9926:	e7d8      	b.n	23e98da <_Z14TXI_Initializev+0x3e>
 23e9928:	023fde3e 	.word	0x023fde3e
 23e992c:	1006a780 	.word	0x1006a780
 23e9930:	1006a1a8 	.word	0x1006a1a8
 23e9934:	1006a14d 	.word	0x1006a14d
 23e9938:	1006a2d4 	.word	0x1006a2d4
 23e993c:	023fde47 	.word	0x023fde47
 23e9940:	1006a142 	.word	0x1006a142
 23e9944:	023fde53 	.word	0x023fde53
 23e9948:	023fde75 	.word	0x023fde75
 23e994c:	1006f128 	.word	0x1006f128
 23e9950:	023fde5e 	.word	0x023fde5e
 23e9954:	023fde6b 	.word	0x023fde6b

023e9958 <_Z9HeartBeatv>:
/*
 * ======================================================================================================================
 * HeartBeat() - Burns 250 ms and part of our loop delay timing
 * ======================================================================================================================
 */
void HeartBeat() {
 23e9958:	b508      	push	{r3, lr}
#if (PLATFORM_ID == PLATFORM_MSOM)
  Watchdog.refresh();
 23e995a:	f7fb fba7 	bl	23e50ac <_ZN8particle13WatchdogClass11getInstanceEv>
 23e995e:	f00f fe3c 	bl	23f95da <_ZN8particle13WatchdogClass7refreshEv>
#else
  digitalWrite(HEARTBEAT_PIN, HIGH);
  delay(250);
  digitalWrite(HEARTBEAT_PIN, LOW);
#endif
}
 23e9962:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(250);
 23e9966:	20fa      	movs	r0, #250	; 0xfa
 23e9968:	f00d be5e 	b.w	23f7628 <delay>

023e996c <_Z17Serial_Initializev>:
/*
 * ======================================================================================================================
 * Serial_Initialize() -
 * ======================================================================================================================
 */
void Serial_Initialize() {
 23e996c:	b510      	push	{r4, lr}
  // serial console enable pin
  pinMode(SCE_PIN, INPUT_PULLUP);   // Internal pullup resistor biases the pin to supply voltage.
 23e996e:	4c20      	ldr	r4, [pc, #128]	; (23e99f0 <_Z17Serial_Initializev+0x84>)
 23e9970:	2102      	movs	r1, #2
 23e9972:	8820      	ldrh	r0, [r4, #0]
 23e9974:	f010 f862 	bl	23f9a3c <pinMode>
                                    // If jumper set to ground, we enable serial console (low = enable)
  if (digitalRead(SCE_PIN) == LOW) {
 23e9978:	8820      	ldrh	r0, [r4, #0]
 23e997a:	f010 f889 	bl	23f9a90 <digitalRead>
 23e997e:	4c1d      	ldr	r4, [pc, #116]	; (23e99f4 <_Z17Serial_Initializev+0x88>)
 23e9980:	b908      	cbnz	r0, 23e9986 <_Z17Serial_Initializev+0x1a>
    SerialConsoleEnabled = true;
 23e9982:	2301      	movs	r3, #1
 23e9984:	7023      	strb	r3, [r4, #0]
  }

  // There are libraries that print to Serial Console so we need to initialize no mater what the jumper is set to.
  Serial.begin(9600);
 23e9986:	f00f fdfb 	bl	23f9580 <_Z16_fetch_usbserialv>
 23e998a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23e998e:	f00f fde7 	bl	23f9560 <_ZN9USBSerial5beginEl>
  delay(1000); // prevents usb driver crash on startup, do not omit this
 23e9992:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23e9996:	f00d fe47 	bl	23f7628 <delay>

  if (SerialConsoleEnabled) {
 23e999a:	7823      	ldrb	r3, [r4, #0]
 23e999c:	b33b      	cbz	r3, 23e99ee <_Z17Serial_Initializev+0x82>
    // Wait for serial port to be available
    if (!Serial.isConnected()) {
 23e999e:	f00f fdef 	bl	23f9580 <_Z16_fetch_usbserialv>
 23e99a2:	f00f fde1 	bl	23f9568 <_ZN9USBSerial11isConnectedEv>
 23e99a6:	b910      	cbnz	r0, 23e99ae <_Z17Serial_Initializev+0x42>
      OLED_write("Wait4 Serial Console");
 23e99a8:	4813      	ldr	r0, [pc, #76]	; (23e99f8 <_Z17Serial_Initializev+0x8c>)
 23e99aa:	f7fb fdcb 	bl	23e5544 <_Z10OLED_writePKc>
void Serial_Initialize() {
 23e99ae:	243d      	movs	r4, #61	; 0x3d
    }
    int countdown=60; // Wait N seconds for serial connection, then move on.
    while (!Serial.isConnected() && countdown) {
 23e99b0:	f00f fde6 	bl	23f9580 <_Z16_fetch_usbserialv>
 23e99b4:	f00f fdd8 	bl	23f9568 <_ZN9USBSerial11isConnectedEv>
 23e99b8:	b948      	cbnz	r0, 23e99ce <_Z17Serial_Initializev+0x62>
 23e99ba:	3c01      	subs	r4, #1
 23e99bc:	d007      	beq.n	23e99ce <_Z17Serial_Initializev+0x62>
      HeartBeat(); // Provices 250ms delay
 23e99be:	f7ff ffcb 	bl	23e9958 <_Z9HeartBeatv>
      Blink(1, 750);
 23e99c2:	f240 21ee 	movw	r1, #750	; 0x2ee
 23e99c6:	2001      	movs	r0, #1
 23e99c8:	f7fb fc6c 	bl	23e52a4 <_Z5Blinkii>
    while (!Serial.isConnected() && countdown) {
 23e99cc:	e7f0      	b.n	23e99b0 <_Z17Serial_Initializev+0x44>
      countdown--;
    }

    Serial_writeln(""); // Send carriage return and linefeed
 23e99ce:	480b      	ldr	r0, [pc, #44]	; (23e99fc <_Z17Serial_Initializev+0x90>)
 23e99d0:	f7fb fe44 	bl	23e565c <_Z14Serial_writelnPKc>
    
    if (DisplayEnabled) {
 23e99d4:	4b0a      	ldr	r3, [pc, #40]	; (23e9a00 <_Z17Serial_Initializev+0x94>)
 23e99d6:	781b      	ldrb	r3, [r3, #0]
 23e99d8:	b13b      	cbz	r3, 23e99ea <_Z17Serial_Initializev+0x7e>
      Serial_writeln ("OLED:Enabled");
 23e99da:	480a      	ldr	r0, [pc, #40]	; (23e9a04 <_Z17Serial_Initializev+0x98>)
    }
    else {
      Serial_writeln ("OLED:Disabled");
 23e99dc:	f7fb fe3e 	bl	23e565c <_Z14Serial_writelnPKc>
    }
    Output ("SC:Enabled");
  }
}
 23e99e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Output ("SC:Enabled");
 23e99e4:	4808      	ldr	r0, [pc, #32]	; (23e9a08 <_Z17Serial_Initializev+0x9c>)
 23e99e6:	f7fb be51 	b.w	23e568c <_Z6OutputPKc>
      Serial_writeln ("OLED:Disabled");
 23e99ea:	4808      	ldr	r0, [pc, #32]	; (23e9a0c <_Z17Serial_Initializev+0xa0>)
 23e99ec:	e7f6      	b.n	23e99dc <_Z17Serial_Initializev+0x70>
}
 23e99ee:	bd10      	pop	{r4, pc}
 23e99f0:	1006a100 	.word	0x1006a100
 23e99f4:	1006a7d7 	.word	0x1006a7d7
 23e99f8:	023fde7d 	.word	0x023fde7d
 23e99fc:	023fe6d5 	.word	0x023fe6d5
 23e9a00:	1006a0f9 	.word	0x1006a0f9
 23e9a04:	023fde92 	.word	0x023fde92
 23e9a08:	023fdead 	.word	0x023fdead
 23e9a0c:	023fde9f 	.word	0x023fde9f

023e9a10 <_Z17Output_Initializev>:
/*
 * ======================================================================================================================
 * Output_Initialize() -
 * ======================================================================================================================
 */
void Output_Initialize() {
 23e9a10:	b508      	push	{r3, lr}
  OLED_initialize();
 23e9a12:	f7fb fe45 	bl	23e56a0 <_Z15OLED_initializev>
  Output("SER:Init");
 23e9a16:	4805      	ldr	r0, [pc, #20]	; (23e9a2c <_Z17Output_Initializev+0x1c>)
 23e9a18:	f7fb fe38 	bl	23e568c <_Z6OutputPKc>
  Serial_Initialize();
 23e9a1c:	f7ff ffa6 	bl	23e996c <_Z17Serial_Initializev>
  Output("SER:OK");
 23e9a20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output("SER:OK");
 23e9a24:	4802      	ldr	r0, [pc, #8]	; (23e9a30 <_Z17Output_Initializev+0x20>)
 23e9a26:	f7fb be31 	b.w	23e568c <_Z6OutputPKc>
 23e9a2a:	bf00      	nop
 23e9a2c:	023fdeb8 	.word	0x023fdeb8
 23e9a30:	023fdec1 	.word	0x023fdec1

023e9a34 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
 23e9a34:	2200      	movs	r2, #0
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
 23e9a36:	b570      	push	{r4, r5, r6, lr}
 23e9a38:	b08c      	sub	sp, #48	; 0x30
 23e9a3a:	460d      	mov	r5, r1
    const int ret = diag_get_source(id, &src, nullptr);
 23e9a3c:	4669      	mov	r1, sp
 23e9a3e:	4676      	mov	r6, lr
    const diag_source* src = nullptr;
 23e9a40:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
 23e9a42:	f00d fa71 	bl	23f6f28 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
 23e9a46:	b9e8      	cbnz	r0, 23e9a84 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x50>
        return ret;
    }
    return get(src, val);
 23e9a48:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
 23e9a4a:	b10c      	cbz	r4, 23e9a50 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1c>
 23e9a4c:	6923      	ldr	r3, [r4, #16]
 23e9a4e:	b97b      	cbnz	r3, 23e9a70 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>
 23e9a50:	222c      	movs	r2, #44	; 0x2c
 23e9a52:	2100      	movs	r1, #0
 23e9a54:	a801      	add	r0, sp, #4
 23e9a56:	f012 fe52 	bl	23fc6fe <memset>
 23e9a5a:	4b0b      	ldr	r3, [pc, #44]	; (23e9a88 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x54>)
 23e9a5c:	9604      	str	r6, [sp, #16]
 23e9a5e:	9301      	str	r3, [sp, #4]
 23e9a60:	4b0a      	ldr	r3, [pc, #40]	; (23e9a8c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x58>)
 23e9a62:	9302      	str	r3, [sp, #8]
}

__attribute__((always_inline)) static inline uint32_t __get_PC(void) { 
    uint32_t result; 

    asm volatile ("mov %0, pc\n" : "=r" (result) ); 
 23e9a64:	467b      	mov	r3, pc
 23e9a66:	2100      	movs	r1, #0
 23e9a68:	a801      	add	r0, sp, #4
 23e9a6a:	9303      	str	r3, [sp, #12]
 23e9a6c:	f00d fa6a 	bl	23f6f44 <panic_ext>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
 23e9a70:	230c      	movs	r3, #12
 23e9a72:	e9cd 3501 	strd	r3, r5, [sp, #4]
 23e9a76:	2304      	movs	r3, #4
 23e9a78:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
 23e9a7a:	2101      	movs	r1, #1
 23e9a7c:	4620      	mov	r0, r4
 23e9a7e:	6923      	ldr	r3, [r4, #16]
 23e9a80:	aa01      	add	r2, sp, #4
 23e9a82:	4798      	blx	r3
}
 23e9a84:	b00c      	add	sp, #48	; 0x30
 23e9a86:	bd70      	pop	{r4, r5, r6, pc}
 23e9a88:	000a002c 	.word	0x000a002c
 23e9a8c:	023fdec8 	.word	0x023fdec8

023e9a90 <_ZNK11SystemClass13batteryChargeEv.isra.0>:
            return r;
        }
        return val;
    }

    float batteryCharge() const {
 23e9a90:	b507      	push	{r0, r1, r2, lr}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
 23e9a92:	2003      	movs	r0, #3
 23e9a94:	a901      	add	r1, sp, #4
 23e9a96:	f7ff ffcd 	bl	23e9a34 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
 23e9a9a:	b940      	cbnz	r0, 23e9aae <_ZNK11SystemClass13batteryChargeEv.isra.0+0x1e>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
 23e9a9c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 23e9aa0:	ee00 3a10 	vmov	s0, r3
 23e9aa4:	eebb 0acc 	vcvt.f32.u32	s0, s0, #8

        using SocFixedPointT = particle::FixedPointUQ<8, 8>;

        SocFixedPointT soc(static_cast<typename SocFixedPointT::type>(val));
        return soc.toFloat();
    }
 23e9aa8:	b003      	add	sp, #12
 23e9aaa:	f85d fb04 	ldr.w	pc, [sp], #4
            return -1.0f;
 23e9aae:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 23e9ab2:	e7f9      	b.n	23e9aa8 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x18>

023e9ab4 <_ZNK11SystemClass12batteryStateEv.isra.0>:
    int batteryState() const {
 23e9ab4:	b507      	push	{r0, r1, r2, lr}
 23e9ab6:	2007      	movs	r0, #7
 23e9ab8:	a901      	add	r1, sp, #4
 23e9aba:	f7ff ffbb 	bl	23e9a34 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
 23e9abe:	2800      	cmp	r0, #0
        return val;
 23e9ac0:	bfa8      	it	ge
 23e9ac2:	9801      	ldrge	r0, [sp, #4]
    }
 23e9ac4:	b003      	add	sp, #12
 23e9ac6:	f85d fb04 	ldr.w	pc, [sp], #4
 23e9aca:	0000      	movs	r0, r0
 23e9acc:	0000      	movs	r0, r0
	...

023e9ad0 <_Z6OBS_Dov>:
/*
 * ======================================================================================================================
 * OBS_Do() - Get Observations - Should be called once a minute
 * ======================================================================================================================
 */
void OBS_Do() {
 23e9ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23e9ad4:	ed2d 8b06 	vpush	{d8-d10}
 23e9ad8:	b099      	sub	sp, #100	; 0x64

// Output("DB:OBS_Start");


  // Safty Check for Vaild Time
  if (!Time.isValid()) {
 23e9ada:	f00f fc1d 	bl	23f9318 <_ZN9TimeClass7isValidEv>
 23e9ade:	b948      	cbnz	r0, 23e9af4 <_Z6OBS_Dov+0x24>
    Output ("OBS_Do: Time NV");
 23e9ae0:	4803      	ldr	r0, [pc, #12]	; (23e9af0 <_Z6OBS_Dov+0x20>)
  // Save Observation to SD Card
  OBS_Log(oidx);

  lastOBS = System.millis();
// Output("DB:OBS_Exit");
}
 23e9ae2:	b019      	add	sp, #100	; 0x64
 23e9ae4:	ecbd 8b06 	vpop	{d8-d10}
 23e9ae8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Output ("OBS_Do: Time NV");
 23e9aec:	f7fb bdce 	b.w	23e568c <_Z6OutputPKc>
 23e9af0:	023fdee9 	.word	0x023fdee9
  Wind_GustUpdate(); // Update Gust and Gust Direction readings
 23e9af4:	f7fd fe4c 	bl	23e7790 <_Z15Wind_GustUpdatev>
  int BatteryState = System.batteryState();
 23e9af8:	f7ff ffdc 	bl	23e9ab4 <_ZNK11SystemClass12batteryStateEv.isra.0>
  CellularSignal sig = Cellular.RSSI();
 23e9afc:	49de      	ldr	r1, [pc, #888]	; (23e9e78 <_Z6OBS_Dov+0x3a8>)
  int BatteryState = System.batteryState();
 23e9afe:	4681      	mov	r9, r0
  CellularSignal sig = Cellular.RSSI();
 23e9b00:	a804      	add	r0, sp, #16
 23e9b02:	f00d fe01 	bl	23f7708 <_ZN5spark13CellularClass4RSSIEv>
  byte cfr = pmic.getFault(); // Get Battery Charger Failt Register
 23e9b06:	48dd      	ldr	r0, [pc, #884]	; (23e9e7c <_Z6OBS_Dov+0x3ac>)
 23e9b08:	f00e ff12 	bl	23f8930 <_ZN4PMIC8getFaultEv>
  if (BatteryState>0 && BatteryState<6) {
 23e9b0c:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 23e9b10:	2b04      	cmp	r3, #4
  byte cfr = pmic.getFault(); // Get Battery Charger Failt Register
 23e9b12:	4682      	mov	sl, r0
  if (BatteryState>0 && BatteryState<6) {
 23e9b14:	f200 81f8 	bhi.w	23e9f08 <_Z6OBS_Dov+0x438>
    BatteryPoC = System.batteryCharge();
 23e9b18:	f7ff ffba 	bl	23e9a90 <_ZNK11SystemClass13batteryChargeEv.isra.0>
 23e9b1c:	eeb0 8a40 	vmov.f32	s16, s0
  oidx = OBS_Open();    // Get a free observation spot
 23e9b20:	f7ff f98c 	bl	23e8e3c <_Z8OBS_Openv>
  obs[oidx].inuse = true;
 23e9b24:	f640 2698 	movw	r6, #2712	; 0xa98
 23e9b28:	f04f 0801 	mov.w	r8, #1
 23e9b2c:	4346      	muls	r6, r0
 23e9b2e:	4cd4      	ldr	r4, [pc, #848]	; (23e9e80 <_Z6OBS_Dov+0x3b0>)
  oidx = OBS_Open();    // Get a free observation spot
 23e9b30:	9000      	str	r0, [sp, #0]
  obs[oidx].inuse = true;
 23e9b32:	f804 8006 	strb.w	r8, [r4, r6]
  obs[oidx].ts = Time.now();
 23e9b36:	f00f fc0c 	bl	23f9352 <_ZN9TimeClass3nowEv>
  obs[oidx].inuse = true;
 23e9b3a:	19a7      	adds	r7, r4, r6
  obs[oidx].ts = Time.now();
 23e9b3c:	17c3      	asrs	r3, r0, #31
 23e9b3e:	e9c7 0302 	strd	r0, r3, [r7, #8]
  obs[oidx].css = sig.getStrength();
 23e9b42:	a804      	add	r0, sp, #16
 23e9b44:	f00d fe3e 	bl	23f77c4 <_ZNK14CellularSignal11getStrengthEv>
 23e9b48:	f106 0518 	add.w	r5, r6, #24
 23e9b4c:	ed87 0a04 	vstr	s0, [r7, #16]
  strcpy (obs[oidx].sensor[sidx].id, "bcs");
 23e9b50:	49cc      	ldr	r1, [pc, #816]	; (23e9e84 <_Z6OBS_Dov+0x3b4>)
 23e9b52:	1960      	adds	r0, r4, r5
 23e9b54:	f012 fe48 	bl	23fc7e8 <strcpy>
  strcpy (obs[oidx].sensor[sidx].id, "bpc");
 23e9b58:	f106 0034 	add.w	r0, r6, #52	; 0x34
 23e9b5c:	49ca      	ldr	r1, [pc, #808]	; (23e9e88 <_Z6OBS_Dov+0x3b8>)
  obs[oidx].sensor[sidx].type = I_OBS;
 23e9b5e:	f8c7 8020 	str.w	r8, [r7, #32]
  obs[oidx].sensor[sidx].i_obs = BatteryState;
 23e9b62:	f8c7 9028 	str.w	r9, [r7, #40]	; 0x28
  obs[oidx].sensor[sidx++].inuse = true;
 23e9b66:	f887 8030 	strb.w	r8, [r7, #48]	; 0x30
  strcpy (obs[oidx].sensor[sidx].id, "bpc");
 23e9b6a:	4420      	add	r0, r4
 23e9b6c:	f012 fe3c 	bl	23fc7e8 <strcpy>
  obs[oidx].sensor[sidx].type = F_OBS;
 23e9b70:	2300      	movs	r3, #0
  strcpy (obs[oidx].sensor[sidx].id, "cfr");
 23e9b72:	f106 0050 	add.w	r0, r6, #80	; 0x50
  obs[oidx].sensor[sidx].type = F_OBS;
 23e9b76:	63fb      	str	r3, [r7, #60]	; 0x3c
  obs[oidx].sensor[sidx].f_obs = BatteryPoC;
 23e9b78:	ed87 8a10 	vstr	s16, [r7, #64]	; 0x40
  strcpy (obs[oidx].sensor[sidx].id, "cfr");
 23e9b7c:	49c3      	ldr	r1, [pc, #780]	; (23e9e8c <_Z6OBS_Dov+0x3bc>)
  obs[oidx].sensor[sidx++].inuse = true;
 23e9b7e:	f887 804c 	strb.w	r8, [r7, #76]	; 0x4c
  strcpy (obs[oidx].sensor[sidx].id, "cfr");
 23e9b82:	4420      	add	r0, r4
 23e9b84:	f012 fe30 	bl	23fc7e8 <strcpy>
  obs[oidx].sensor[sidx].i_obs = cfr;
 23e9b88:	f8c7 a060 	str.w	sl, [r7, #96]	; 0x60
  obs[oidx].sensor[sidx].type = I_OBS;
 23e9b8c:	f8c7 8058 	str.w	r8, [r7, #88]	; 0x58
  obs[oidx].sensor[sidx++].inuse = true;
 23e9b90:	f887 8068 	strb.w	r8, [r7, #104]	; 0x68
  rgds = (System.millis()-raingauge1_interrupt_stime)/1000;
 23e9b94:	f7fb fa37 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23e9b98:	468c      	mov	ip, r1
 23e9b9a:	4fbd      	ldr	r7, [pc, #756]	; (23e9e90 <_Z6OBS_Dov+0x3c0>)
 23e9b9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23e9ba0:	683b      	ldr	r3, [r7, #0]
 23e9ba2:	6879      	ldr	r1, [r7, #4]
 23e9ba4:	1ac0      	subs	r0, r0, r3
 23e9ba6:	eb6c 0101 	sbc.w	r1, ip, r1
 23e9baa:	2300      	movs	r3, #0
 23e9bac:	f7fa fa7a 	bl	23e40a4 <__aeabi_uldivmod>
  rain = raingauge1_interrupt_count * 0.2;
 23e9bb0:	f8df b32c 	ldr.w	fp, [pc, #812]	; 23e9ee0 <_Z6OBS_Dov+0x410>
  rgds = (System.millis()-raingauge1_interrupt_stime)/1000;
 23e9bb4:	4682      	mov	sl, r0
  rain = raingauge1_interrupt_count * 0.2;
 23e9bb6:	f8db 0000 	ldr.w	r0, [fp]
 23e9bba:	f7f9 fd53 	bl	23e3664 <__aeabi_ui2d>
 23e9bbe:	a3ac      	add	r3, pc, #688	; (adr r3, 23e9e70 <_Z6OBS_Dov+0x3a0>)
 23e9bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e9bc4:	f7f9 fdc8 	bl	23e3758 <__aeabi_dmul>
 23e9bc8:	f7fa f8be 	bl	23e3d48 <__aeabi_d2f>
 23e9bcc:	ee08 0a10 	vmov	s16, r0
  rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
 23e9bd0:	eeb4 8a48 	vcmp.f32	s16, s16
 23e9bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9bd8:	f180 8199 	bvs.w	23e9f0e <_Z6OBS_Dov+0x43e>
 23e9bdc:	f7f9 fd64 	bl	23e36a8 <__aeabi_f2d>
 23e9be0:	4680      	mov	r8, r0
 23e9be2:	203c      	movs	r0, #60	; 0x3c
 23e9be4:	fbba f0f0 	udiv	r0, sl, r0
 23e9be8:	4689      	mov	r9, r1
 23e9bea:	f7f9 fd3b 	bl	23e3664 <__aeabi_ui2d>
 23e9bee:	2200      	movs	r2, #0
 23e9bf0:	4ba8      	ldr	r3, [pc, #672]	; (23e9e94 <_Z6OBS_Dov+0x3c4>)
 23e9bf2:	f7f9 fdb1 	bl	23e3758 <__aeabi_dmul>
 23e9bf6:	4602      	mov	r2, r0
 23e9bf8:	460b      	mov	r3, r1
 23e9bfa:	4640      	mov	r0, r8
 23e9bfc:	4649      	mov	r1, r9
 23e9bfe:	f7fa f83b 	bl	23e3c78 <__aeabi_dcmpgt>
 23e9c02:	eddf 7aa5 	vldr	s15, [pc, #660]	; 23e9e98 <_Z6OBS_Dov+0x3c8>
 23e9c06:	2800      	cmp	r0, #0
 23e9c08:	fe08 8a27 	vseleq.f32	s16, s16, s15
  raingauge1_interrupt_count = 0;
 23e9c0c:	2300      	movs	r3, #0
 23e9c0e:	f8cb 3000 	str.w	r3, [fp]
  raingauge1_interrupt_stime = System.millis();
 23e9c12:	f7fb f9f8 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23e9c16:	e9c7 0100 	strd	r0, r1, [r7]
  raingauge1_interrupt_ltime = 0; // used to debounce the tip
 23e9c1a:	2000      	movs	r0, #0
 23e9c1c:	2100      	movs	r1, #0
 23e9c1e:	4b9f      	ldr	r3, [pc, #636]	; (23e9e9c <_Z6OBS_Dov+0x3cc>)
 23e9c20:	e9c3 0100 	strd	r0, r1, [r3]
  if (A4_State == A4_STATE_RAIN) {
 23e9c24:	4b9e      	ldr	r3, [pc, #632]	; (23e9ea0 <_Z6OBS_Dov+0x3d0>)
 23e9c26:	681b      	ldr	r3, [r3, #0]
 23e9c28:	2b02      	cmp	r3, #2
 23e9c2a:	f040 8176 	bne.w	23e9f1a <_Z6OBS_Dov+0x44a>
    rg2ds = (System.millis()-raingauge2_interrupt_stime)/1000;
 23e9c2e:	f7fb f9ea 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23e9c32:	468c      	mov	ip, r1
 23e9c34:	4f9b      	ldr	r7, [pc, #620]	; (23e9ea4 <_Z6OBS_Dov+0x3d4>)
 23e9c36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23e9c3a:	683b      	ldr	r3, [r7, #0]
 23e9c3c:	6879      	ldr	r1, [r7, #4]
 23e9c3e:	1ac0      	subs	r0, r0, r3
 23e9c40:	eb6c 0101 	sbc.w	r1, ip, r1
 23e9c44:	2300      	movs	r3, #0
 23e9c46:	f7fa fa2d 	bl	23e40a4 <__aeabi_uldivmod>
    rain2 = raingauge2_interrupt_count * 0.2;
 23e9c4a:	f8df 9298 	ldr.w	r9, [pc, #664]	; 23e9ee4 <_Z6OBS_Dov+0x414>
    rg2ds = (System.millis()-raingauge2_interrupt_stime)/1000;
 23e9c4e:	4680      	mov	r8, r0
    rain2 = raingauge2_interrupt_count * 0.2;
 23e9c50:	f8d9 0000 	ldr.w	r0, [r9]
 23e9c54:	f7f9 fd06 	bl	23e3664 <__aeabi_ui2d>
 23e9c58:	a385      	add	r3, pc, #532	; (adr r3, 23e9e70 <_Z6OBS_Dov+0x3a0>)
 23e9c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23e9c5e:	f7f9 fd7b 	bl	23e3758 <__aeabi_dmul>
 23e9c62:	f7fa f871 	bl	23e3d48 <__aeabi_d2f>
 23e9c66:	ee09 0a10 	vmov	s18, r0
    rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
 23e9c6a:	eeb4 9a49 	vcmp.f32	s18, s18
 23e9c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9c72:	f180 814f 	bvs.w	23e9f14 <_Z6OBS_Dov+0x444>
 23e9c76:	f7f9 fd17 	bl	23e36a8 <__aeabi_f2d>
 23e9c7a:	4682      	mov	sl, r0
 23e9c7c:	203c      	movs	r0, #60	; 0x3c
 23e9c7e:	fbb8 f0f0 	udiv	r0, r8, r0
 23e9c82:	468b      	mov	fp, r1
 23e9c84:	f7f9 fcee 	bl	23e3664 <__aeabi_ui2d>
 23e9c88:	2200      	movs	r2, #0
 23e9c8a:	4b82      	ldr	r3, [pc, #520]	; (23e9e94 <_Z6OBS_Dov+0x3c4>)
 23e9c8c:	f7f9 fd64 	bl	23e3758 <__aeabi_dmul>
 23e9c90:	4602      	mov	r2, r0
 23e9c92:	460b      	mov	r3, r1
 23e9c94:	4650      	mov	r0, sl
 23e9c96:	4659      	mov	r1, fp
 23e9c98:	f7f9 ffee 	bl	23e3c78 <__aeabi_dcmpgt>
 23e9c9c:	eddf 7a7e 	vldr	s15, [pc, #504]	; 23e9e98 <_Z6OBS_Dov+0x3c8>
 23e9ca0:	2800      	cmp	r0, #0
 23e9ca2:	fe09 9a27 	vseleq.f32	s18, s18, s15
    raingauge2_interrupt_count = 0;
 23e9ca6:	2300      	movs	r3, #0
 23e9ca8:	f8c9 3000 	str.w	r3, [r9]
    raingauge2_interrupt_stime = System.millis();
 23e9cac:	f7fb f9ab 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23e9cb0:	e9c7 0100 	strd	r0, r1, [r7]
    raingauge2_interrupt_ltime = 0; // used to debounce the tip
 23e9cb4:	2000      	movs	r0, #0
 23e9cb6:	2100      	movs	r1, #0
 23e9cb8:	4b7b      	ldr	r3, [pc, #492]	; (23e9ea8 <_Z6OBS_Dov+0x3d8>)
 23e9cba:	e9c3 0100 	strd	r0, r1, [r3]
  obs[oidx].sensor[sidx].type = F_OBS;
 23e9cbe:	f640 2798 	movw	r7, #2712	; 0xa98
 23e9cc2:	f04f 0800 	mov.w	r8, #0
  obs[oidx].sensor[sidx++].inuse = true;
 23e9cc6:	f04f 0901 	mov.w	r9, #1
  EEPROM_UpdateRainTotals(rain, rain2);
 23e9cca:	eeb0 0a48 	vmov.f32	s0, s16
 23e9cce:	eef0 0a49 	vmov.f32	s1, s18
 23e9cd2:	f7fe f91f 	bl	23e7f14 <_Z23EEPROM_UpdateRainTotalsff>
  strcpy (obs[oidx].sensor[sidx].id, "rg");
 23e9cd6:	f106 006c 	add.w	r0, r6, #108	; 0x6c
 23e9cda:	4974      	ldr	r1, [pc, #464]	; (23e9eac <_Z6OBS_Dov+0x3dc>)
 23e9cdc:	4420      	add	r0, r4
 23e9cde:	f012 fd83 	bl	23fc7e8 <strcpy>
  obs[oidx].sensor[sidx].type = F_OBS;
 23e9ce2:	9b00      	ldr	r3, [sp, #0]
  obs[oidx].sensor[sidx].f_obs = eeprom.rgt1;
 23e9ce4:	f8df a200 	ldr.w	sl, [pc, #512]	; 23e9ee8 <_Z6OBS_Dov+0x418>
  obs[oidx].sensor[sidx].type = F_OBS;
 23e9ce8:	fb07 4703 	mla	r7, r7, r3, r4
  strcpy (obs[oidx].sensor[sidx].id, "rgt");
 23e9cec:	f106 0088 	add.w	r0, r6, #136	; 0x88
 23e9cf0:	496f      	ldr	r1, [pc, #444]	; (23e9eb0 <_Z6OBS_Dov+0x3e0>)
  obs[oidx].sensor[sidx].f_obs = rain;
 23e9cf2:	ed87 8a1e 	vstr	s16, [r7, #120]	; 0x78
  obs[oidx].sensor[sidx].type = F_OBS;
 23e9cf6:	f8c7 8074 	str.w	r8, [r7, #116]	; 0x74
  obs[oidx].sensor[sidx++].inuse = true;
 23e9cfa:	f887 9084 	strb.w	r9, [r7, #132]	; 0x84
  strcpy (obs[oidx].sensor[sidx].id, "rgt");
 23e9cfe:	4420      	add	r0, r4
 23e9d00:	f012 fd72 	bl	23fc7e8 <strcpy>
  obs[oidx].sensor[sidx].f_obs = eeprom.rgt1;
 23e9d04:	f8da 3000 	ldr.w	r3, [sl]
  strcpy (obs[oidx].sensor[sidx].id, "rgp");
 23e9d08:	f106 00a4 	add.w	r0, r6, #164	; 0xa4
 23e9d0c:	4969      	ldr	r1, [pc, #420]	; (23e9eb4 <_Z6OBS_Dov+0x3e4>)
  obs[oidx].sensor[sidx].f_obs = eeprom.rgt1;
 23e9d0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  obs[oidx].sensor[sidx].type = F_OBS;
 23e9d12:	f8c7 8090 	str.w	r8, [r7, #144]	; 0x90
  obs[oidx].sensor[sidx++].inuse = true;
 23e9d16:	f887 90a0 	strb.w	r9, [r7, #160]	; 0xa0
  strcpy (obs[oidx].sensor[sidx].id, "rgp");
 23e9d1a:	4420      	add	r0, r4
 23e9d1c:	f012 fd64 	bl	23fc7e8 <strcpy>
  obs[oidx].sensor[sidx].f_obs = eeprom.rgp1;
 23e9d20:	f8da 3004 	ldr.w	r3, [sl, #4]
  strcpy (obs[oidx].sensor[sidx].id, "ws");
 23e9d24:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
  obs[oidx].sensor[sidx].f_obs = eeprom.rgp1;
 23e9d28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  strcpy (obs[oidx].sensor[sidx].id, "ws");
 23e9d2c:	4962      	ldr	r1, [pc, #392]	; (23e9eb8 <_Z6OBS_Dov+0x3e8>)
  obs[oidx].sensor[sidx].type = F_OBS;
 23e9d2e:	f8c7 80ac 	str.w	r8, [r7, #172]	; 0xac
  obs[oidx].sensor[sidx++].inuse = true;
 23e9d32:	f887 90bc 	strb.w	r9, [r7, #188]	; 0xbc
  strcpy (obs[oidx].sensor[sidx].id, "ws");
 23e9d36:	4420      	add	r0, r4
 23e9d38:	f012 fd56 	bl	23fc7e8 <strcpy>
  obs[oidx].sensor[sidx].type = F_OBS;
 23e9d3c:	f8c7 80c8 	str.w	r8, [r7, #200]	; 0xc8
  ws = Wind_SpeedAverage();
 23e9d40:	f7fd fd0c 	bl	23e775c <_Z17Wind_SpeedAveragev>
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23e9d44:	eeb4 0a40 	vcmp.f32	s0, s0
 23e9d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9d4c:	f180 80e8 	bvs.w	23e9f20 <_Z6OBS_Dov+0x450>
 23e9d50:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23e9d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9d58:	f100 80e2 	bmi.w	23e9f20 <_Z6OBS_Dov+0x450>
 23e9d5c:	eddf 7a57 	vldr	s15, [pc, #348]	; 23e9ebc <_Z6OBS_Dov+0x3ec>
 23e9d60:	eeb4 0a67 	vcmp.f32	s0, s15
 23e9d64:	eddf 7a4c 	vldr	s15, [pc, #304]	; 23e9e98 <_Z6OBS_Dov+0x3c8>
 23e9d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9d6c:	fe37 0a80 	vselgt.f32	s0, s15, s0
  obs[oidx].sensor[sidx].f_obs = ws;
 23e9d70:	f640 2798 	movw	r7, #2712	; 0xa98
  obs[oidx].sensor[sidx++].inuse = true;
 23e9d74:	f04f 0901 	mov.w	r9, #1
  obs[oidx].sensor[sidx].f_obs = ws;
 23e9d78:	9b00      	ldr	r3, [sp, #0]
  strcpy (obs[oidx].sensor[sidx].id, "wd");
 23e9d7a:	f106 00dc 	add.w	r0, r6, #220	; 0xdc
  obs[oidx].sensor[sidx].f_obs = ws;
 23e9d7e:	fb07 4803 	mla	r8, r7, r3, r4
  strcpy (obs[oidx].sensor[sidx].id, "wd");
 23e9d82:	494f      	ldr	r1, [pc, #316]	; (23e9ec0 <_Z6OBS_Dov+0x3f0>)
  obs[oidx].sensor[sidx].f_obs = ws;
 23e9d84:	ed88 0a33 	vstr	s0, [r8, #204]	; 0xcc
  obs[oidx].sensor[sidx++].inuse = true;
 23e9d88:	f888 90d8 	strb.w	r9, [r8, #216]	; 0xd8
  strcpy (obs[oidx].sensor[sidx].id, "wd");
 23e9d8c:	4420      	add	r0, r4
 23e9d8e:	f012 fd2b 	bl	23fc7e8 <strcpy>
  obs[oidx].sensor[sidx].type = I_OBS;
 23e9d92:	f8c8 90e4 	str.w	r9, [r8, #228]	; 0xe4
  wd = Wind_DirectionVector();
 23e9d96:	f7fd fc4b 	bl	23e7630 <_Z20Wind_DirectionVectorv>
  wd = (isnan(wd) || (wd < QC_MIN_WD) || (wd > QC_MAX_WD)) ? QC_ERR_WD : wd;
 23e9d9a:	2800      	cmp	r0, #0
 23e9d9c:	f2c0 80c3 	blt.w	23e9f26 <_Z6OBS_Dov+0x456>
 23e9da0:	4b48      	ldr	r3, [pc, #288]	; (23e9ec4 <_Z6OBS_Dov+0x3f4>)
 23e9da2:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
 23e9da6:	bfc8      	it	gt
 23e9da8:	4618      	movgt	r0, r3
  obs[oidx].sensor[sidx].i_obs = wd;
 23e9daa:	9b00      	ldr	r3, [sp, #0]
  return(wind.gust);
 23e9dac:	f8df 913c 	ldr.w	r9, [pc, #316]	; 23e9eec <_Z6OBS_Dov+0x41c>
 23e9db0:	fb07 4703 	mla	r7, r7, r3, r4
  obs[oidx].sensor[sidx++].inuse = true;
 23e9db4:	2301      	movs	r3, #1
  obs[oidx].sensor[sidx].i_obs = wd;
 23e9db6:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
  strcpy (obs[oidx].sensor[sidx].id, "wg");
 23e9dba:	f106 00f8 	add.w	r0, r6, #248	; 0xf8
  obs[oidx].sensor[sidx++].inuse = true;
 23e9dbe:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
  strcpy (obs[oidx].sensor[sidx].id, "wg");
 23e9dc2:	4941      	ldr	r1, [pc, #260]	; (23e9ec8 <_Z6OBS_Dov+0x3f8>)
 23e9dc4:	4420      	add	r0, r4
 23e9dc6:	f012 fd0f 	bl	23fc7e8 <strcpy>
 23e9dca:	edd9 7a79 	vldr	s15, [r9, #484]	; 0x1e4
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23e9dce:	eef4 7a67 	vcmp.f32	s15, s15
  obs[oidx].sensor[sidx].type = F_OBS;
 23e9dd2:	2300      	movs	r3, #0
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23e9dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  obs[oidx].sensor[sidx].type = F_OBS;
 23e9dd8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23e9ddc:	f180 80a5 	bvs.w	23e9f2a <_Z6OBS_Dov+0x45a>
 23e9de0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23e9de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9de8:	f100 809f 	bmi.w	23e9f2a <_Z6OBS_Dov+0x45a>
 23e9dec:	ed9f 7a33 	vldr	s14, [pc, #204]	; 23e9ebc <_Z6OBS_Dov+0x3ec>
 23e9df0:	eef4 7a47 	vcmp.f32	s15, s14
 23e9df4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 23e9e98 <_Z6OBS_Dov+0x3c8>
 23e9df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9dfc:	fe77 7a27 	vselgt.f32	s15, s14, s15
  obs[oidx].sensor[sidx].f_obs = ws;
 23e9e00:	f640 2798 	movw	r7, #2712	; 0xa98
  obs[oidx].sensor[sidx++].inuse = true;
 23e9e04:	f04f 0a01 	mov.w	sl, #1
  obs[oidx].sensor[sidx].f_obs = ws;
 23e9e08:	9b00      	ldr	r3, [sp, #0]
  strcpy (obs[oidx].sensor[sidx].id, "wgd");
 23e9e0a:	f506 708a 	add.w	r0, r6, #276	; 0x114
  obs[oidx].sensor[sidx].f_obs = ws;
 23e9e0e:	fb07 4803 	mla	r8, r7, r3, r4
  strcpy (obs[oidx].sensor[sidx].id, "wgd");
 23e9e12:	492e      	ldr	r1, [pc, #184]	; (23e9ecc <_Z6OBS_Dov+0x3fc>)
  obs[oidx].sensor[sidx].f_obs = ws;
 23e9e14:	edc8 7a41 	vstr	s15, [r8, #260]	; 0x104
  obs[oidx].sensor[sidx++].inuse = true;
 23e9e18:	f888 a110 	strb.w	sl, [r8, #272]	; 0x110
  strcpy (obs[oidx].sensor[sidx].id, "wgd");
 23e9e1c:	4420      	add	r0, r4
 23e9e1e:	f012 fce3 	bl	23fc7e8 <strcpy>
  return(wind.gust_direction);
 23e9e22:	f8d9 31e8 	ldr.w	r3, [r9, #488]	; 0x1e8
  obs[oidx].sensor[sidx].type = I_OBS;
 23e9e26:	f8c8 a11c 	str.w	sl, [r8, #284]	; 0x11c
  wd = (isnan(wd) || (wd < QC_MIN_WD) || (wd > QC_MAX_WD)) ? QC_ERR_WD : wd;
 23e9e2a:	2b00      	cmp	r3, #0
 23e9e2c:	f2c0 8080 	blt.w	23e9f30 <_Z6OBS_Dov+0x460>
 23e9e30:	4a24      	ldr	r2, [pc, #144]	; (23e9ec4 <_Z6OBS_Dov+0x3f4>)
 23e9e32:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 23e9e36:	bfc8      	it	gt
 23e9e38:	4613      	movgt	r3, r2
  obs[oidx].sensor[sidx].i_obs = wd;
 23e9e3a:	9a00      	ldr	r2, [sp, #0]
 23e9e3c:	fb07 4702 	mla	r7, r7, r2, r4
 23e9e40:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  obs[oidx].sensor[sidx++].inuse = true;
 23e9e44:	2301      	movs	r3, #1
 23e9e46:	f887 312c 	strb.w	r3, [r7, #300]	; 0x12c
  if (BMX_1_exists) {
 23e9e4a:	4b21      	ldr	r3, [pc, #132]	; (23e9ed0 <_Z6OBS_Dov+0x400>)
 23e9e4c:	781b      	ldrb	r3, [r3, #0]
 23e9e4e:	2b00      	cmp	r3, #0
 23e9e50:	f000 8142 	beq.w	23ea0d8 <_Z6OBS_Dov+0x608>
    if (BMX_1_chip_id == BMP280_CHIP_ID) {
 23e9e54:	4b1f      	ldr	r3, [pc, #124]	; (23e9ed4 <_Z6OBS_Dov+0x404>)
 23e9e56:	f8df 9098 	ldr.w	r9, [pc, #152]	; 23e9ef0 <_Z6OBS_Dov+0x420>
 23e9e5a:	781b      	ldrb	r3, [r3, #0]
 23e9e5c:	2b58      	cmp	r3, #88	; 0x58
 23e9e5e:	d169      	bne.n	23e9f34 <_Z6OBS_Dov+0x464>
      p = bmp1.readPressure()/100.0F;       // bp1 hPa
 23e9e60:	481d      	ldr	r0, [pc, #116]	; (23e9ed8 <_Z6OBS_Dov+0x408>)
 23e9e62:	f005 f967 	bl	23ef134 <_ZN15Adafruit_BMP28012readPressureEv>
 23e9e66:	eddf 7a1d 	vldr	s15, [pc, #116]	; 23e9edc <_Z6OBS_Dov+0x40c>
 23e9e6a:	e043      	b.n	23e9ef4 <_Z6OBS_Dov+0x424>
 23e9e6c:	f3af 8000 	nop.w
 23e9e70:	9999999a 	.word	0x9999999a
 23e9e74:	3fc99999 	.word	0x3fc99999
 23e9e78:	1007aeb8 	.word	0x1007aeb8
 23e9e7c:	1007aa58 	.word	0x1007aa58
 23e9e80:	1006f550 	.word	0x1006f550
 23e9e84:	023fdef9 	.word	0x023fdef9
 23e9e88:	023fdefd 	.word	0x023fdefd
 23e9e8c:	023fdf01 	.word	0x023fdf01
 23e9e90:	1007aa68 	.word	0x1007aa68
 23e9e94:	403e0000 	.word	0x403e0000
 23e9e98:	c479f99a 	.word	0xc479f99a
 23e9e9c:	1007aa60 	.word	0x1007aa60
 23e9ea0:	1006a25c 	.word	0x1006a25c
 23e9ea4:	1007aa80 	.word	0x1007aa80
 23e9ea8:	1007aa78 	.word	0x1007aa78
 23e9eac:	023fdf05 	.word	0x023fdf05
 23e9eb0:	023fdf08 	.word	0x023fdf08
 23e9eb4:	023fdf0c 	.word	0x023fdf0c
 23e9eb8:	023fdf10 	.word	0x023fdf10
 23e9ebc:	42ce0000 	.word	0x42ce0000
 23e9ec0:	023fdf13 	.word	0x023fdf13
 23e9ec4:	fffffc19 	.word	0xfffffc19
 23e9ec8:	023fdf16 	.word	0x023fdf16
 23e9ecc:	023fdf19 	.word	0x023fdf19
 23e9ed0:	1006a282 	.word	0x1006a282
 23e9ed4:	1006a281 	.word	0x1006a281
 23e9ed8:	1006abf8 	.word	0x1006abf8
 23e9edc:	42c80000 	.word	0x42c80000
 23e9ee0:	1007aa5c 	.word	0x1007aa5c
 23e9ee4:	1007aa70 	.word	0x1007aa70
 23e9ee8:	1006ae5c 	.word	0x1006ae5c
 23e9eec:	1007ac6c 	.word	0x1007ac6c
 23e9ef0:	1006a283 	.word	0x1006a283
      t = bmp1.readTemperature();           // bt1
 23e9ef4:	487b      	ldr	r0, [pc, #492]	; (23ea0e4 <_Z6OBS_Dov+0x614>)
      p = bmp1.readPressure()/100.0F;       // bp1 hPa
 23e9ef6:	eec0 9a27 	vdiv.f32	s19, s0, s15
      t = bmp1.readTemperature();           // bt1
 23e9efa:	f005 f8db 	bl	23ef0b4 <_ZN15Adafruit_BMP28015readTemperatureEv>
      t = bm31.readTemperature();           // bt1
 23e9efe:	eeb0 8a40 	vmov.f32	s16, s0
    float h = 0.0;
 23e9f02:	eddf 8a79 	vldr	s17, [pc, #484]	; 23ea0e8 <_Z6OBS_Dov+0x618>
 23e9f06:	e03e      	b.n	23e9f86 <_Z6OBS_Dov+0x4b6>
  float BatteryPoC = 0.0; // Battery Percent of Charge
 23e9f08:	ed9f 8a77 	vldr	s16, [pc, #476]	; 23ea0e8 <_Z6OBS_Dov+0x618>
 23e9f0c:	e608      	b.n	23e9b20 <_Z6OBS_Dov+0x50>
  rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
 23e9f0e:	ed9f 8a77 	vldr	s16, [pc, #476]	; 23ea0ec <_Z6OBS_Dov+0x61c>
 23e9f12:	e67b      	b.n	23e9c0c <_Z6OBS_Dov+0x13c>
    rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
 23e9f14:	ed9f 9a75 	vldr	s18, [pc, #468]	; 23ea0ec <_Z6OBS_Dov+0x61c>
 23e9f18:	e6c5      	b.n	23e9ca6 <_Z6OBS_Dov+0x1d6>
  float rain2 = 0.0;
 23e9f1a:	ed9f 9a73 	vldr	s18, [pc, #460]	; 23ea0e8 <_Z6OBS_Dov+0x618>
 23e9f1e:	e6ce      	b.n	23e9cbe <_Z6OBS_Dov+0x1ee>
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23e9f20:	ed9f 0a72 	vldr	s0, [pc, #456]	; 23ea0ec <_Z6OBS_Dov+0x61c>
 23e9f24:	e724      	b.n	23e9d70 <_Z6OBS_Dov+0x2a0>
  wd = (isnan(wd) || (wd < QC_MIN_WD) || (wd > QC_MAX_WD)) ? QC_ERR_WD : wd;
 23e9f26:	4872      	ldr	r0, [pc, #456]	; (23ea0f0 <_Z6OBS_Dov+0x620>)
 23e9f28:	e73f      	b.n	23e9daa <_Z6OBS_Dov+0x2da>
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
 23e9f2a:	eddf 7a70 	vldr	s15, [pc, #448]	; 23ea0ec <_Z6OBS_Dov+0x61c>
 23e9f2e:	e767      	b.n	23e9e00 <_Z6OBS_Dov+0x330>
  wd = (isnan(wd) || (wd < QC_MIN_WD) || (wd > QC_MAX_WD)) ? QC_ERR_WD : wd;
 23e9f30:	4b6f      	ldr	r3, [pc, #444]	; (23ea0f0 <_Z6OBS_Dov+0x620>)
 23e9f32:	e782      	b.n	23e9e3a <_Z6OBS_Dov+0x36a>
    else if (BMX_1_chip_id == BME280_BMP390_CHIP_ID) {
 23e9f34:	2b60      	cmp	r3, #96	; 0x60
 23e9f36:	f040 80bb 	bne.w	23ea0b0 <_Z6OBS_Dov+0x5e0>
      if (BMX_1_type == BMX_TYPE_BME280) {
 23e9f3a:	f899 3000 	ldrb.w	r3, [r9]
 23e9f3e:	2b02      	cmp	r3, #2
 23e9f40:	f040 80af 	bne.w	23ea0a2 <_Z6OBS_Dov+0x5d2>
        p = bme1.readPressure()/100.0F;     // bp1 hPa
 23e9f44:	486b      	ldr	r0, [pc, #428]	; (23ea0f4 <_Z6OBS_Dov+0x624>)
 23e9f46:	f004 fcad 	bl	23ee8a4 <_ZN15Adafruit_BME28012readPressureEv>
 23e9f4a:	eddf 7a6b 	vldr	s15, [pc, #428]	; 23ea0f8 <_Z6OBS_Dov+0x628>
        t = bme1.readTemperature();         // bt1
 23e9f4e:	4869      	ldr	r0, [pc, #420]	; (23ea0f4 <_Z6OBS_Dov+0x624>)
        p = bme1.readPressure()/100.0F;     // bp1 hPa
 23e9f50:	eec0 9a27 	vdiv.f32	s19, s0, s15
        t = bme1.readTemperature();         // bt1
 23e9f54:	f004 fc74 	bl	23ee840 <_ZN15Adafruit_BME28015readTemperatureEv>
        h = bme1.readHumidity();            // bh1 
 23e9f58:	4866      	ldr	r0, [pc, #408]	; (23ea0f4 <_Z6OBS_Dov+0x624>)
        t = bme1.readTemperature();         // bt1
 23e9f5a:	eeb0 8a40 	vmov.f32	s16, s0
        h = bme1.readHumidity();            // bh1 
 23e9f5e:	f004 fd71 	bl	23eea44 <_ZN15Adafruit_BME28012readHumidityEv>
 23e9f62:	eef0 8a40 	vmov.f32	s17, s0
      if (BMX_1_type == BMX_TYPE_BMP390) {
 23e9f66:	f899 3000 	ldrb.w	r3, [r9]
 23e9f6a:	2b04      	cmp	r3, #4
 23e9f6c:	d10b      	bne.n	23e9f86 <_Z6OBS_Dov+0x4b6>
        p = bm31.readPressure()/100.0F;     // bp1 hPa
 23e9f6e:	4863      	ldr	r0, [pc, #396]	; (23ea0fc <_Z6OBS_Dov+0x62c>)
 23e9f70:	f005 faeb 	bl	23ef54a <_ZN15Adafruit_BMP3XX12readPressureEv>
 23e9f74:	eddf 7a60 	vldr	s15, [pc, #384]	; 23ea0f8 <_Z6OBS_Dov+0x628>
        t = bm31.readTemperature();         // bt1 
 23e9f78:	4860      	ldr	r0, [pc, #384]	; (23ea0fc <_Z6OBS_Dov+0x62c>)
        p = bm31.readPressure()/100.0F;     // bp1 hPa
 23e9f7a:	eec0 9a27 	vdiv.f32	s19, s0, s15
        t = bm31.readTemperature();         // bt1 
 23e9f7e:	f005 fad9 	bl	23ef534 <_ZN15Adafruit_BMP3XX15readTemperatureEv>
 23e9f82:	eeb0 8a40 	vmov.f32	s16, s0
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23e9f86:	eef4 9a69 	vcmp.f32	s19, s19
 23e9f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9f8e:	f180 809a 	bvs.w	23ea0c6 <_Z6OBS_Dov+0x5f6>
 23e9f92:	eddf 7a5b 	vldr	s15, [pc, #364]	; 23ea100 <_Z6OBS_Dov+0x630>
 23e9f96:	eef4 9ae7 	vcmpe.f32	s19, s15
 23e9f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9f9e:	f100 8092 	bmi.w	23ea0c6 <_Z6OBS_Dov+0x5f6>
 23e9fa2:	eddf 7a58 	vldr	s15, [pc, #352]	; 23ea104 <_Z6OBS_Dov+0x634>
 23e9fa6:	eef4 9a67 	vcmp.f32	s19, s15
 23e9faa:	eddf 7a50 	vldr	s15, [pc, #320]	; 23ea0ec <_Z6OBS_Dov+0x61c>
 23e9fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9fb2:	fe77 9aa9 	vselgt.f32	s19, s15, s19
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23e9fb6:	eeb4 8a48 	vcmp.f32	s16, s16
 23e9fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9fbe:	f180 8085 	bvs.w	23ea0cc <_Z6OBS_Dov+0x5fc>
 23e9fc2:	eddf 7a51 	vldr	s15, [pc, #324]	; 23ea108 <_Z6OBS_Dov+0x638>
 23e9fc6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23e9fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9fce:	d47d      	bmi.n	23ea0cc <_Z6OBS_Dov+0x5fc>
 23e9fd0:	eddf 7a4e 	vldr	s15, [pc, #312]	; 23ea10c <_Z6OBS_Dov+0x63c>
 23e9fd4:	eeb4 8a67 	vcmp.f32	s16, s15
 23e9fd8:	eddf 7a44 	vldr	s15, [pc, #272]	; 23ea0ec <_Z6OBS_Dov+0x61c>
 23e9fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9fe0:	fe37 8a88 	vselgt.f32	s16, s15, s16
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23e9fe4:	eef4 8a68 	vcmp.f32	s17, s17
 23e9fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9fec:	d671      	bvs.n	23ea0d2 <_Z6OBS_Dov+0x602>
 23e9fee:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 23e9ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e9ff6:	d46c      	bmi.n	23ea0d2 <_Z6OBS_Dov+0x602>
 23e9ff8:	eddf 7a3f 	vldr	s15, [pc, #252]	; 23ea0f8 <_Z6OBS_Dov+0x628>
 23e9ffc:	eef4 8a67 	vcmp.f32	s17, s15
 23ea000:	eddf 7a3a 	vldr	s15, [pc, #232]	; 23ea0ec <_Z6OBS_Dov+0x61c>
 23ea004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea008:	fe77 8aa8 	vselgt.f32	s17, s15, s17
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea00c:	f640 2798 	movw	r7, #2712	; 0xa98
 23ea010:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ea014:	f04f 0801 	mov.w	r8, #1
    strcpy (obs[oidx].sensor[sidx].id, "bp1");
 23ea018:	f506 7098 	add.w	r0, r6, #304	; 0x130
 23ea01c:	493c      	ldr	r1, [pc, #240]	; (23ea110 <_Z6OBS_Dov+0x640>)
 23ea01e:	4420      	add	r0, r4
 23ea020:	f012 fbe2 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea024:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "bt1");
 23ea026:	f506 70a6 	add.w	r0, r6, #332	; 0x14c
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea02a:	fb07 4703 	mla	r7, r7, r3, r4
    strcpy (obs[oidx].sensor[sidx].id, "bt1");
 23ea02e:	4939      	ldr	r1, [pc, #228]	; (23ea114 <_Z6OBS_Dov+0x644>)
    obs[oidx].sensor[sidx].f_obs = p;
 23ea030:	edc7 9a4f 	vstr	s19, [r7, #316]	; 0x13c
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea034:	f8c7 a138 	str.w	sl, [r7, #312]	; 0x138
    obs[oidx].sensor[sidx++].inuse = true;
 23ea038:	f887 8148 	strb.w	r8, [r7, #328]	; 0x148
    strcpy (obs[oidx].sensor[sidx].id, "bt1");
 23ea03c:	4420      	add	r0, r4
 23ea03e:	f012 fbd3 	bl	23fc7e8 <strcpy>
    if (BMX_1_type == BMX_TYPE_BME280) {
 23ea042:	f899 3000 	ldrb.w	r3, [r9]
    obs[oidx].sensor[sidx].f_obs = t;
 23ea046:	ed87 8a56 	vstr	s16, [r7, #344]	; 0x158
    if (BMX_1_type == BMX_TYPE_BME280) {
 23ea04a:	2b02      	cmp	r3, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea04c:	f8c7 a154 	str.w	sl, [r7, #340]	; 0x154
    obs[oidx].sensor[sidx++].inuse = true;
 23ea050:	f887 8164 	strb.w	r8, [r7, #356]	; 0x164
    if (BMX_1_type == BMX_TYPE_BME280) {
 23ea054:	d143      	bne.n	23ea0de <_Z6OBS_Dov+0x60e>
      strcpy (obs[oidx].sensor[sidx].id, "bh1");
 23ea056:	f506 70b4 	add.w	r0, r6, #360	; 0x168
 23ea05a:	492f      	ldr	r1, [pc, #188]	; (23ea118 <_Z6OBS_Dov+0x648>)
 23ea05c:	4420      	add	r0, r4
 23ea05e:	f012 fbc3 	bl	23fc7e8 <strcpy>
      obs[oidx].sensor[sidx++].inuse = true;
 23ea062:	f887 8180 	strb.w	r8, [r7, #384]	; 0x180
      obs[oidx].sensor[sidx].f_obs = h;
 23ea066:	edc7 8a5d 	vstr	s17, [r7, #372]	; 0x174
      obs[oidx].sensor[sidx++].inuse = true;
 23ea06a:	f04f 080d 	mov.w	r8, #13
      obs[oidx].sensor[sidx].type = F_OBS;
 23ea06e:	f8c7 a170 	str.w	sl, [r7, #368]	; 0x170
  if (BMX_2_exists) {
 23ea072:	4b2a      	ldr	r3, [pc, #168]	; (23ea11c <_Z6OBS_Dov+0x64c>)
 23ea074:	781b      	ldrb	r3, [r3, #0]
 23ea076:	2b00      	cmp	r3, #0
 23ea078:	f000 8108 	beq.w	23ea28c <_Z6OBS_Dov+0x7bc>
    if (BMX_2_chip_id == BMP280_CHIP_ID) {
 23ea07c:	4b28      	ldr	r3, [pc, #160]	; (23ea120 <_Z6OBS_Dov+0x650>)
 23ea07e:	781b      	ldrb	r3, [r3, #0]
 23ea080:	2b58      	cmp	r3, #88	; 0x58
 23ea082:	d151      	bne.n	23ea128 <_Z6OBS_Dov+0x658>
      p = bmp2.readPressure()/100.0F;       // bp2 hPa
 23ea084:	4827      	ldr	r0, [pc, #156]	; (23ea124 <_Z6OBS_Dov+0x654>)
 23ea086:	f005 f855 	bl	23ef134 <_ZN15Adafruit_BMP28012readPressureEv>
 23ea08a:	eddf 7a1b 	vldr	s15, [pc, #108]	; 23ea0f8 <_Z6OBS_Dov+0x628>
      t = bmp2.readTemperature();           // bt2
 23ea08e:	4825      	ldr	r0, [pc, #148]	; (23ea124 <_Z6OBS_Dov+0x654>)
      p = bmp2.readPressure()/100.0F;       // bp2 hPa
 23ea090:	eec0 9a27 	vdiv.f32	s19, s0, s15
      t = bmp2.readTemperature();           // bt2
 23ea094:	f005 f80e 	bl	23ef0b4 <_ZN15Adafruit_BMP28015readTemperatureEv>
      t = bm32.readTemperature();           // bt2
 23ea098:	eeb0 8a40 	vmov.f32	s16, s0
    float h = 0.0;
 23ea09c:	eddf 8a12 	vldr	s17, [pc, #72]	; 23ea0e8 <_Z6OBS_Dov+0x618>
 23ea0a0:	e06a      	b.n	23ea178 <_Z6OBS_Dov+0x6a8>
    float h = 0.0;
 23ea0a2:	eddf 8a11 	vldr	s17, [pc, #68]	; 23ea0e8 <_Z6OBS_Dov+0x618>
    float t = 0.0;
 23ea0a6:	eeb0 8a68 	vmov.f32	s16, s17
    float p = 0.0;
 23ea0aa:	eef0 9a68 	vmov.f32	s19, s17
 23ea0ae:	e75a      	b.n	23e9f66 <_Z6OBS_Dov+0x496>
      p = bm31.readPressure()/100.0F;       // bp1 hPa
 23ea0b0:	4812      	ldr	r0, [pc, #72]	; (23ea0fc <_Z6OBS_Dov+0x62c>)
 23ea0b2:	f005 fa4a 	bl	23ef54a <_ZN15Adafruit_BMP3XX12readPressureEv>
 23ea0b6:	eddf 7a10 	vldr	s15, [pc, #64]	; 23ea0f8 <_Z6OBS_Dov+0x628>
      t = bm31.readTemperature();           // bt1
 23ea0ba:	4810      	ldr	r0, [pc, #64]	; (23ea0fc <_Z6OBS_Dov+0x62c>)
      p = bm31.readPressure()/100.0F;       // bp1 hPa
 23ea0bc:	eec0 9a27 	vdiv.f32	s19, s0, s15
      t = bm31.readTemperature();           // bt1
 23ea0c0:	f005 fa38 	bl	23ef534 <_ZN15Adafruit_BMP3XX15readTemperatureEv>
 23ea0c4:	e71b      	b.n	23e9efe <_Z6OBS_Dov+0x42e>
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23ea0c6:	eddf 9a09 	vldr	s19, [pc, #36]	; 23ea0ec <_Z6OBS_Dov+0x61c>
 23ea0ca:	e774      	b.n	23e9fb6 <_Z6OBS_Dov+0x4e6>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea0cc:	ed9f 8a07 	vldr	s16, [pc, #28]	; 23ea0ec <_Z6OBS_Dov+0x61c>
 23ea0d0:	e788      	b.n	23e9fe4 <_Z6OBS_Dov+0x514>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ea0d2:	eddf 8a06 	vldr	s17, [pc, #24]	; 23ea0ec <_Z6OBS_Dov+0x61c>
 23ea0d6:	e799      	b.n	23ea00c <_Z6OBS_Dov+0x53c>
  obs[oidx].sensor[sidx++].inuse = true;
 23ea0d8:	f04f 080a 	mov.w	r8, #10
 23ea0dc:	e7c9      	b.n	23ea072 <_Z6OBS_Dov+0x5a2>
    obs[oidx].sensor[sidx++].inuse = true;
 23ea0de:	f04f 080c 	mov.w	r8, #12
 23ea0e2:	e7c6      	b.n	23ea072 <_Z6OBS_Dov+0x5a2>
 23ea0e4:	1006abf8 	.word	0x1006abf8
 23ea0e8:	00000000 	.word	0x00000000
 23ea0ec:	c479f99a 	.word	0xc479f99a
 23ea0f0:	fffffc19 	.word	0xfffffc19
 23ea0f4:	1006ab48 	.word	0x1006ab48
 23ea0f8:	42c80000 	.word	0x42c80000
 23ea0fc:	1006a948 	.word	0x1006a948
 23ea100:	43960000 	.word	0x43960000
 23ea104:	44898000 	.word	0x44898000
 23ea108:	c2200000 	.word	0xc2200000
 23ea10c:	42700000 	.word	0x42700000
 23ea110:	023fdf1d 	.word	0x023fdf1d
 23ea114:	023fdf21 	.word	0x023fdf21
 23ea118:	023fdf25 	.word	0x023fdf25
 23ea11c:	1006a285 	.word	0x1006a285
 23ea120:	1006a284 	.word	0x1006a284
 23ea124:	1006ac38 	.word	0x1006ac38
    else if (BMX_2_chip_id == BME280_BMP390_CHIP_ID) {
 23ea128:	2b60      	cmp	r3, #96	; 0x60
 23ea12a:	f041 8325 	bne.w	23eb778 <_Z6OBS_Dov+0x1ca8>
      if (BMX_2_type == BMX_TYPE_BME280) {
 23ea12e:	4edc      	ldr	r6, [pc, #880]	; (23ea4a0 <_Z6OBS_Dov+0x9d0>)
 23ea130:	7833      	ldrb	r3, [r6, #0]
 23ea132:	2b02      	cmp	r3, #2
 23ea134:	f041 8318 	bne.w	23eb768 <_Z6OBS_Dov+0x1c98>
        p = bme2.readPressure()/100.0F;     // bp2 hPa
 23ea138:	48da      	ldr	r0, [pc, #872]	; (23ea4a4 <_Z6OBS_Dov+0x9d4>)
 23ea13a:	f004 fbb3 	bl	23ee8a4 <_ZN15Adafruit_BME28012readPressureEv>
 23ea13e:	eddf 7ada 	vldr	s15, [pc, #872]	; 23ea4a8 <_Z6OBS_Dov+0x9d8>
        t = bme2.readTemperature();         // bt2
 23ea142:	48d8      	ldr	r0, [pc, #864]	; (23ea4a4 <_Z6OBS_Dov+0x9d4>)
        p = bme2.readPressure()/100.0F;     // bp2 hPa
 23ea144:	eec0 9a27 	vdiv.f32	s19, s0, s15
        t = bme2.readTemperature();         // bt2
 23ea148:	f004 fb7a 	bl	23ee840 <_ZN15Adafruit_BME28015readTemperatureEv>
        h = bme2.readHumidity();            // bh2 
 23ea14c:	48d5      	ldr	r0, [pc, #852]	; (23ea4a4 <_Z6OBS_Dov+0x9d4>)
        t = bme2.readTemperature();         // bt2
 23ea14e:	eeb0 8a40 	vmov.f32	s16, s0
        h = bme2.readHumidity();            // bh2 
 23ea152:	f004 fc77 	bl	23eea44 <_ZN15Adafruit_BME28012readHumidityEv>
 23ea156:	eef0 8a40 	vmov.f32	s17, s0
      if (BMX_2_type == BMX_TYPE_BMP390) {
 23ea15a:	7833      	ldrb	r3, [r6, #0]
 23ea15c:	2b04      	cmp	r3, #4
 23ea15e:	d10b      	bne.n	23ea178 <_Z6OBS_Dov+0x6a8>
        p = bm32.readPressure()/100.0F;     // bp2 hPa
 23ea160:	48d2      	ldr	r0, [pc, #840]	; (23ea4ac <_Z6OBS_Dov+0x9dc>)
 23ea162:	f005 f9f2 	bl	23ef54a <_ZN15Adafruit_BMP3XX12readPressureEv>
 23ea166:	eddf 7ad0 	vldr	s15, [pc, #832]	; 23ea4a8 <_Z6OBS_Dov+0x9d8>
        t = bm32.readTemperature();         // bt2       
 23ea16a:	48d0      	ldr	r0, [pc, #832]	; (23ea4ac <_Z6OBS_Dov+0x9dc>)
        p = bm32.readPressure()/100.0F;     // bp2 hPa
 23ea16c:	eec0 9a27 	vdiv.f32	s19, s0, s15
        t = bm32.readTemperature();         // bt2       
 23ea170:	f005 f9e0 	bl	23ef534 <_ZN15Adafruit_BMP3XX15readTemperatureEv>
 23ea174:	eeb0 8a40 	vmov.f32	s16, s0
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23ea178:	eef4 9a69 	vcmp.f32	s19, s19
 23ea17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea180:	f181 8306 	bvs.w	23eb790 <_Z6OBS_Dov+0x1cc0>
 23ea184:	eddf 7aca 	vldr	s15, [pc, #808]	; 23ea4b0 <_Z6OBS_Dov+0x9e0>
 23ea188:	eef4 9ae7 	vcmpe.f32	s19, s15
 23ea18c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea190:	f101 82fe 	bmi.w	23eb790 <_Z6OBS_Dov+0x1cc0>
 23ea194:	eddf 7ac7 	vldr	s15, [pc, #796]	; 23ea4b4 <_Z6OBS_Dov+0x9e4>
 23ea198:	eef4 9a67 	vcmp.f32	s19, s15
 23ea19c:	eddf 7ad6 	vldr	s15, [pc, #856]	; 23ea4f8 <_Z6OBS_Dov+0xa28>
 23ea1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea1a4:	fe77 9aa9 	vselgt.f32	s19, s15, s19
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea1a8:	eeb4 8a48 	vcmp.f32	s16, s16
 23ea1ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea1b0:	f181 82f2 	bvs.w	23eb798 <_Z6OBS_Dov+0x1cc8>
 23ea1b4:	eddf 7ace 	vldr	s15, [pc, #824]	; 23ea4f0 <_Z6OBS_Dov+0xa20>
 23ea1b8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23ea1bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea1c0:	f101 82ea 	bmi.w	23eb798 <_Z6OBS_Dov+0x1cc8>
 23ea1c4:	eddf 7acb 	vldr	s15, [pc, #812]	; 23ea4f4 <_Z6OBS_Dov+0xa24>
 23ea1c8:	eeb4 8a67 	vcmp.f32	s16, s15
 23ea1cc:	eddf 7aca 	vldr	s15, [pc, #808]	; 23ea4f8 <_Z6OBS_Dov+0xa28>
 23ea1d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea1d4:	fe37 8a88 	vselgt.f32	s16, s15, s16
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ea1d8:	eef4 8a68 	vcmp.f32	s17, s17
 23ea1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea1e0:	f181 82de 	bvs.w	23eb7a0 <_Z6OBS_Dov+0x1cd0>
 23ea1e4:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 23ea1e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea1ec:	f101 82d8 	bmi.w	23eb7a0 <_Z6OBS_Dov+0x1cd0>
 23ea1f0:	eddf 7aad 	vldr	s15, [pc, #692]	; 23ea4a8 <_Z6OBS_Dov+0x9d8>
 23ea1f4:	eef4 8a67 	vcmp.f32	s17, s15
 23ea1f8:	eddf 7abf 	vldr	s15, [pc, #764]	; 23ea4f8 <_Z6OBS_Dov+0xa28>
 23ea1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea200:	fe77 8aa8 	vselgt.f32	s17, s15, s17
    strcpy (obs[oidx].sensor[sidx].id, "bp2");
 23ea204:	f04f 0b1c 	mov.w	fp, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea208:	f640 2698 	movw	r6, #2712	; 0xa98
 23ea20c:	fb0b f908 	mul.w	r9, fp, r8
    strcpy (obs[oidx].sensor[sidx].id, "bp2");
 23ea210:	eb05 0009 	add.w	r0, r5, r9
 23ea214:	49a8      	ldr	r1, [pc, #672]	; (23ea4b8 <_Z6OBS_Dov+0x9e8>)
 23ea216:	4420      	add	r0, r4
 23ea218:	f012 fae6 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea21c:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ea21e:	f04f 0a01 	mov.w	sl, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea222:	435e      	muls	r6, r3
 23ea224:	2300      	movs	r3, #0
 23ea226:	eb09 0206 	add.w	r2, r9, r6
    strcpy (obs[oidx].sensor[sidx].id, "bt2");
 23ea22a:	eb09 000b 	add.w	r0, r9, fp
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea22e:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "bt2");
 23ea230:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea232:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = p;
 23ea234:	edc2 9a09 	vstr	s19, [r2, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ea238:	f882 a030 	strb.w	sl, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "bt2");
 23ea23c:	499f      	ldr	r1, [pc, #636]	; (23ea4bc <_Z6OBS_Dov+0x9ec>)
 23ea23e:	4420      	add	r0, r4
 23ea240:	f012 fad2 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea244:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ea246:	f108 0701 	add.w	r7, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea24a:	fb0b 6207 	mla	r2, fp, r7, r6
 23ea24e:	4422      	add	r2, r4
    obs[oidx].sensor[sidx].f_obs = t;
 23ea250:	ed82 8a09 	vstr	s16, [r2, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea254:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ea256:	f882 a030 	strb.w	sl, [r2, #48]	; 0x30
    if (BMX_2_type == BMX_TYPE_BME280) {
 23ea25a:	4a91      	ldr	r2, [pc, #580]	; (23ea4a0 <_Z6OBS_Dov+0x9d0>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ea25c:	f108 0702 	add.w	r7, r8, #2
    if (BMX_2_type == BMX_TYPE_BME280) {
 23ea260:	7812      	ldrb	r2, [r2, #0]
 23ea262:	2a02      	cmp	r2, #2
 23ea264:	f041 82a0 	bne.w	23eb7a8 <_Z6OBS_Dov+0x1cd8>
      obs[oidx].sensor[sidx].type = F_OBS;
 23ea268:	fb0b 6607 	mla	r6, fp, r7, r6
      strcpy (obs[oidx].sensor[sidx].id, "bh2");
 23ea26c:	f109 0038 	add.w	r0, r9, #56	; 0x38
 23ea270:	4428      	add	r0, r5
 23ea272:	4993      	ldr	r1, [pc, #588]	; (23ea4c0 <_Z6OBS_Dov+0x9f0>)
 23ea274:	4420      	add	r0, r4
 23ea276:	f012 fab7 	bl	23fc7e8 <strcpy>
      obs[oidx].sensor[sidx].type = F_OBS;
 23ea27a:	4426      	add	r6, r4
 23ea27c:	2300      	movs	r3, #0
      obs[oidx].sensor[sidx].f_obs = h;
 23ea27e:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
      obs[oidx].sensor[sidx].type = F_OBS;
 23ea282:	6233      	str	r3, [r6, #32]
      obs[oidx].sensor[sidx++].inuse = true;
 23ea284:	f108 0803 	add.w	r8, r8, #3
 23ea288:	f886 a030 	strb.w	sl, [r6, #48]	; 0x30
  if (HTU21DF_exists) {
 23ea28c:	4b8d      	ldr	r3, [pc, #564]	; (23ea4c4 <_Z6OBS_Dov+0x9f4>)
 23ea28e:	781b      	ldrb	r3, [r3, #0]
 23ea290:	2b00      	cmp	r3, #0
 23ea292:	d070      	beq.n	23ea376 <_Z6OBS_Dov+0x8a6>
    strcpy (obs[oidx].sensor[sidx].id, "hh1");
 23ea294:	261c      	movs	r6, #28
 23ea296:	fb06 f608 	mul.w	r6, r6, r8
 23ea29a:	19a8      	adds	r0, r5, r6
 23ea29c:	498a      	ldr	r1, [pc, #552]	; (23ea4c8 <_Z6OBS_Dov+0x9f8>)
 23ea29e:	4420      	add	r0, r4
 23ea2a0:	f012 faa2 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea2a4:	f640 2398 	movw	r3, #2712	; 0xa98
 23ea2a8:	9a00      	ldr	r2, [sp, #0]
    h = htu.readHumidity();
 23ea2aa:	4888      	ldr	r0, [pc, #544]	; (23ea4cc <_Z6OBS_Dov+0x9fc>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea2ac:	fb03 6302 	mla	r3, r3, r2, r6
 23ea2b0:	2200      	movs	r2, #0
 23ea2b2:	4423      	add	r3, r4
 23ea2b4:	621a      	str	r2, [r3, #32]
    h = htu.readHumidity();
 23ea2b6:	f006 f991 	bl	23f05dc <_ZN16Adafruit_HTU21DF12readHumidityEv>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ea2ba:	eeb4 0a40 	vcmp.f32	s0, s0
 23ea2be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea2c2:	f181 8274 	bvs.w	23eb7ae <_Z6OBS_Dov+0x1cde>
 23ea2c6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23ea2ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea2ce:	f101 826e 	bmi.w	23eb7ae <_Z6OBS_Dov+0x1cde>
 23ea2d2:	eddf 7a75 	vldr	s15, [pc, #468]	; 23ea4a8 <_Z6OBS_Dov+0x9d8>
 23ea2d6:	eeb4 0a67 	vcmp.f32	s0, s15
 23ea2da:	eddf 7a87 	vldr	s15, [pc, #540]	; 23ea4f8 <_Z6OBS_Dov+0xa28>
 23ea2de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea2e2:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = h;
 23ea2e6:	f640 2998 	movw	r9, #2712	; 0xa98
 23ea2ea:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx++].inuse = true;
 23ea2ee:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = h;
 23ea2f0:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "ht1");
 23ea2f2:	eb06 000a 	add.w	r0, r6, sl
    obs[oidx].sensor[sidx].f_obs = h;
 23ea2f6:	fb09 f903 	mul.w	r9, r9, r3
 23ea2fa:	fb0a 9308 	mla	r3, sl, r8, r9
    strcpy (obs[oidx].sensor[sidx].id, "ht1");
 23ea2fe:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = h;
 23ea300:	4423      	add	r3, r4
 23ea302:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ea306:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "ht1");
 23ea30a:	4971      	ldr	r1, [pc, #452]	; (23ea4d0 <_Z6OBS_Dov+0xa00>)
 23ea30c:	4420      	add	r0, r4
 23ea30e:	f012 fa6b 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea312:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ea314:	f108 0701 	add.w	r7, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea318:	fb0a 9907 	mla	r9, sl, r7, r9
 23ea31c:	44a1      	add	r9, r4
    t = htu.readTemperature();
 23ea31e:	486b      	ldr	r0, [pc, #428]	; (23ea4cc <_Z6OBS_Dov+0x9fc>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea320:	f8c9 3020 	str.w	r3, [r9, #32]
    t = htu.readTemperature();
 23ea324:	f006 f91a 	bl	23f055c <_ZN16Adafruit_HTU21DF15readTemperatureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea328:	eeb4 0a40 	vcmp.f32	s0, s0
 23ea32c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea330:	f181 8241 	bvs.w	23eb7b6 <_Z6OBS_Dov+0x1ce6>
 23ea334:	eddf 7a6e 	vldr	s15, [pc, #440]	; 23ea4f0 <_Z6OBS_Dov+0xa20>
 23ea338:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ea33c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea340:	f101 8239 	bmi.w	23eb7b6 <_Z6OBS_Dov+0x1ce6>
 23ea344:	eddf 7a6b 	vldr	s15, [pc, #428]	; 23ea4f4 <_Z6OBS_Dov+0xa24>
 23ea348:	eeb4 0a67 	vcmp.f32	s0, s15
 23ea34c:	eddf 7a6a 	vldr	s15, [pc, #424]	; 23ea4f8 <_Z6OBS_Dov+0xa28>
 23ea350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea354:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23ea358:	f640 2398 	movw	r3, #2712	; 0xa98
 23ea35c:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ea35e:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].f_obs = t;
 23ea362:	4353      	muls	r3, r2
 23ea364:	221c      	movs	r2, #28
 23ea366:	fb02 3307 	mla	r3, r2, r7, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23ea36a:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23ea36c:	4423      	add	r3, r4
 23ea36e:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ea372:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  if (SHT_1_exists) {
 23ea376:	4b57      	ldr	r3, [pc, #348]	; (23ea4d4 <_Z6OBS_Dov+0xa04>)
 23ea378:	781b      	ldrb	r3, [r3, #0]
 23ea37a:	2b00      	cmp	r3, #0
 23ea37c:	f001 825a 	beq.w	23eb834 <_Z6OBS_Dov+0x1d64>
    strcpy (obs[oidx].sensor[sidx].id, "st1");
 23ea380:	261c      	movs	r6, #28
 23ea382:	fb06 f608 	mul.w	r6, r6, r8
 23ea386:	19a8      	adds	r0, r5, r6
 23ea388:	4953      	ldr	r1, [pc, #332]	; (23ea4d8 <_Z6OBS_Dov+0xa08>)
 23ea38a:	4420      	add	r0, r4
 23ea38c:	f012 fa2c 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea390:	f640 2398 	movw	r3, #2712	; 0xa98
 23ea394:	9a00      	ldr	r2, [sp, #0]
    t = sht1.readTemperature();
 23ea396:	4851      	ldr	r0, [pc, #324]	; (23ea4dc <_Z6OBS_Dov+0xa0c>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea398:	fb03 6302 	mla	r3, r3, r2, r6
 23ea39c:	2200      	movs	r2, #0
 23ea39e:	4423      	add	r3, r4
 23ea3a0:	621a      	str	r2, [r3, #32]
    t = sht1.readTemperature();
 23ea3a2:	f006 fc8f 	bl	23f0cc4 <_ZN14Adafruit_SHT3115readTemperatureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea3a6:	eeb4 0a40 	vcmp.f32	s0, s0
 23ea3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea3ae:	f181 8239 	bvs.w	23eb824 <_Z6OBS_Dov+0x1d54>
 23ea3b2:	eddf 7a4f 	vldr	s15, [pc, #316]	; 23ea4f0 <_Z6OBS_Dov+0xa20>
 23ea3b6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ea3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea3be:	f101 8231 	bmi.w	23eb824 <_Z6OBS_Dov+0x1d54>
 23ea3c2:	eddf 7a4c 	vldr	s15, [pc, #304]	; 23ea4f4 <_Z6OBS_Dov+0xa24>
 23ea3c6:	eeb4 0a67 	vcmp.f32	s0, s15
 23ea3ca:	eddf 7a4b 	vldr	s15, [pc, #300]	; 23ea4f8 <_Z6OBS_Dov+0xa28>
 23ea3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea3d2:	fe37 8a80 	vselgt.f32	s16, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23ea3d6:	f640 2998 	movw	r9, #2712	; 0xa98
 23ea3da:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx++].inuse = true;
 23ea3de:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23ea3e0:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "sh1");
 23ea3e2:	eb06 000a 	add.w	r0, r6, sl
    obs[oidx].sensor[sidx].f_obs = t;
 23ea3e6:	fb09 f903 	mul.w	r9, r9, r3
 23ea3ea:	fb0a 9308 	mla	r3, sl, r8, r9
    strcpy (obs[oidx].sensor[sidx].id, "sh1");
 23ea3ee:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = t;
 23ea3f0:	4423      	add	r3, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ea3f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    obs[oidx].sensor[sidx].f_obs = t;
 23ea3f6:	ed83 8a09 	vstr	s16, [r3, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "sh1");
 23ea3fa:	4939      	ldr	r1, [pc, #228]	; (23ea4e0 <_Z6OBS_Dov+0xa10>)
 23ea3fc:	4420      	add	r0, r4
 23ea3fe:	f012 f9f3 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea402:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ea404:	f108 0701 	add.w	r7, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea408:	fb0a 9907 	mla	r9, sl, r7, r9
 23ea40c:	44a1      	add	r9, r4
    h = sht1.readHumidity();
 23ea40e:	4833      	ldr	r0, [pc, #204]	; (23ea4dc <_Z6OBS_Dov+0xa0c>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea410:	f8c9 3020 	str.w	r3, [r9, #32]
    h = sht1.readHumidity();
 23ea414:	f006 fc64 	bl	23f0ce0 <_ZN14Adafruit_SHT3112readHumidityEv>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ea418:	eeb4 0a40 	vcmp.f32	s0, s0
 23ea41c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea420:	f181 8204 	bvs.w	23eb82c <_Z6OBS_Dov+0x1d5c>
 23ea424:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23ea428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea42c:	f101 81fe 	bmi.w	23eb82c <_Z6OBS_Dov+0x1d5c>
 23ea430:	eddf 7a1d 	vldr	s15, [pc, #116]	; 23ea4a8 <_Z6OBS_Dov+0x9d8>
 23ea434:	eeb4 0a67 	vcmp.f32	s0, s15
 23ea438:	eddf 7a2f 	vldr	s15, [pc, #188]	; 23ea4f8 <_Z6OBS_Dov+0xa28>
 23ea43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea440:	fe77 9a80 	vselgt.f32	s19, s15, s0
    obs[oidx].sensor[sidx].f_obs = h;
 23ea444:	f640 2398 	movw	r3, #2712	; 0xa98
 23ea448:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ea44a:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].f_obs = h;
 23ea44e:	4353      	muls	r3, r2
 23ea450:	221c      	movs	r2, #28
 23ea452:	fb02 3307 	mla	r3, r2, r7, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23ea456:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = h;
 23ea458:	4423      	add	r3, r4
 23ea45a:	edc3 9a09 	vstr	s19, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ea45e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  if (SHT_2_exists) {
 23ea462:	4b20      	ldr	r3, [pc, #128]	; (23ea4e4 <_Z6OBS_Dov+0xa14>)
 23ea464:	781b      	ldrb	r3, [r3, #0]
 23ea466:	2b00      	cmp	r3, #0
 23ea468:	f000 80a0 	beq.w	23ea5ac <_Z6OBS_Dov+0xadc>
    strcpy (obs[oidx].sensor[sidx].id, "st2");
 23ea46c:	261c      	movs	r6, #28
 23ea46e:	fb06 f608 	mul.w	r6, r6, r8
 23ea472:	19a8      	adds	r0, r5, r6
 23ea474:	491c      	ldr	r1, [pc, #112]	; (23ea4e8 <_Z6OBS_Dov+0xa18>)
 23ea476:	4420      	add	r0, r4
 23ea478:	f012 f9b6 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea47c:	f640 2398 	movw	r3, #2712	; 0xa98
 23ea480:	9a00      	ldr	r2, [sp, #0]
    t = sht2.readTemperature();
 23ea482:	481a      	ldr	r0, [pc, #104]	; (23ea4ec <_Z6OBS_Dov+0xa1c>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea484:	fb03 6302 	mla	r3, r3, r2, r6
 23ea488:	2200      	movs	r2, #0
 23ea48a:	4423      	add	r3, r4
 23ea48c:	621a      	str	r2, [r3, #32]
    t = sht2.readTemperature();
 23ea48e:	f006 fc19 	bl	23f0cc4 <_ZN14Adafruit_SHT3115readTemperatureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea492:	eeb4 0a40 	vcmp.f32	s0, s0
 23ea496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea49a:	f181 81d1 	bvs.w	23eb840 <_Z6OBS_Dov+0x1d70>
 23ea49e:	e02d      	b.n	23ea4fc <_Z6OBS_Dov+0xa2c>
 23ea4a0:	1006a286 	.word	0x1006a286
 23ea4a4:	1006aba0 	.word	0x1006aba0
 23ea4a8:	42c80000 	.word	0x42c80000
 23ea4ac:	1006aa48 	.word	0x1006aa48
 23ea4b0:	43960000 	.word	0x43960000
 23ea4b4:	44898000 	.word	0x44898000
 23ea4b8:	023fdf29 	.word	0x023fdf29
 23ea4bc:	023fdf2d 	.word	0x023fdf2d
 23ea4c0:	023fdf31 	.word	0x023fdf31
 23ea4c4:	1006a2b0 	.word	0x1006a2b0
 23ea4c8:	023fdf35 	.word	0x023fdf35
 23ea4cc:	1006ae90 	.word	0x1006ae90
 23ea4d0:	023fdf39 	.word	0x023fdf39
 23ea4d4:	1006a7d4 	.word	0x1006a7d4
 23ea4d8:	023fdf3d 	.word	0x023fdf3d
 23ea4dc:	1007abb4 	.word	0x1007abb4
 23ea4e0:	023fdf41 	.word	0x023fdf41
 23ea4e4:	1006a7d5 	.word	0x1006a7d5
 23ea4e8:	023fdf45 	.word	0x023fdf45
 23ea4ec:	1007abc4 	.word	0x1007abc4
 23ea4f0:	c2200000 	.word	0xc2200000
 23ea4f4:	42700000 	.word	0x42700000
 23ea4f8:	c479f99a 	.word	0xc479f99a
 23ea4fc:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 23ea4f0 <_Z6OBS_Dov+0xa20>
 23ea500:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ea504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea508:	f101 819a 	bmi.w	23eb840 <_Z6OBS_Dov+0x1d70>
 23ea50c:	ed5f 7a07 	vldr	s15, [pc, #-28]	; 23ea4f4 <_Z6OBS_Dov+0xa24>
 23ea510:	eeb4 0a67 	vcmp.f32	s0, s15
 23ea514:	ed5f 7a08 	vldr	s15, [pc, #-32]	; 23ea4f8 <_Z6OBS_Dov+0xa28>
 23ea518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea51c:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23ea520:	f640 2998 	movw	r9, #2712	; 0xa98
 23ea524:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx++].inuse = true;
 23ea528:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23ea52a:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "sh2");
 23ea52c:	eb06 000a 	add.w	r0, r6, sl
    obs[oidx].sensor[sidx].f_obs = t;
 23ea530:	fb09 f903 	mul.w	r9, r9, r3
 23ea534:	fb0a 9308 	mla	r3, sl, r8, r9
    strcpy (obs[oidx].sensor[sidx].id, "sh2");
 23ea538:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = t;
 23ea53a:	4423      	add	r3, r4
 23ea53c:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ea540:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "sh2");
 23ea544:	49ce      	ldr	r1, [pc, #824]	; (23ea880 <_Z6OBS_Dov+0xdb0>)
 23ea546:	4420      	add	r0, r4
 23ea548:	f012 f94e 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea54c:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ea54e:	f108 0701 	add.w	r7, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea552:	fb0a 9907 	mla	r9, sl, r7, r9
 23ea556:	44a1      	add	r9, r4
    h = sht2.readHumidity();
 23ea558:	48ca      	ldr	r0, [pc, #808]	; (23ea884 <_Z6OBS_Dov+0xdb4>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea55a:	f8c9 3020 	str.w	r3, [r9, #32]
    h = sht2.readHumidity();
 23ea55e:	f006 fbbf 	bl	23f0ce0 <_ZN14Adafruit_SHT3112readHumidityEv>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ea562:	eeb4 0a40 	vcmp.f32	s0, s0
 23ea566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea56a:	f181 816d 	bvs.w	23eb848 <_Z6OBS_Dov+0x1d78>
 23ea56e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23ea572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea576:	f101 8167 	bmi.w	23eb848 <_Z6OBS_Dov+0x1d78>
 23ea57a:	eddf 7ac3 	vldr	s15, [pc, #780]	; 23ea888 <_Z6OBS_Dov+0xdb8>
 23ea57e:	eeb4 0a67 	vcmp.f32	s0, s15
 23ea582:	eddf 7ac2 	vldr	s15, [pc, #776]	; 23ea88c <_Z6OBS_Dov+0xdbc>
 23ea586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea58a:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = h;
 23ea58e:	f640 2398 	movw	r3, #2712	; 0xa98
 23ea592:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ea594:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].f_obs = h;
 23ea598:	4353      	muls	r3, r2
 23ea59a:	221c      	movs	r2, #28
 23ea59c:	fb02 3307 	mla	r3, r2, r7, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23ea5a0:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = h;
 23ea5a2:	4423      	add	r3, r4
 23ea5a4:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23ea5a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  if (HDC_1_exists) {
 23ea5ac:	4bb8      	ldr	r3, [pc, #736]	; (23ea890 <_Z6OBS_Dov+0xdc0>)
 23ea5ae:	f8df b324 	ldr.w	fp, [pc, #804]	; 23ea8d4 <_Z6OBS_Dov+0xe04>
 23ea5b2:	781b      	ldrb	r3, [r3, #0]
 23ea5b4:	2b00      	cmp	r3, #0
 23ea5b6:	f000 808d 	beq.w	23ea6d4 <_Z6OBS_Dov+0xc04>
    double t = -999.9;
 23ea5ba:	f20f 2abc 	addw	sl, pc, #700	; 0x2bc
 23ea5be:	e9da 9a00 	ldrd	r9, sl, [sl]
    if (hdc1.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0)) {
 23ea5c2:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 23ea5c6:	48b3      	ldr	r0, [pc, #716]	; (23ea894 <_Z6OBS_Dov+0xdc4>)
 23ea5c8:	aa0c      	add	r2, sp, #48	; 0x30
 23ea5ca:	a902      	add	r1, sp, #8
    double t = -999.9;
 23ea5cc:	e9cd 9a02 	strd	r9, sl, [sp, #8]
    double h = -999.9;
 23ea5d0:	e9cd 9a0c 	strd	r9, sl, [sp, #48]	; 0x30
    if (hdc1.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0)) {
 23ea5d4:	f005 ff10 	bl	23f03f8 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>
 23ea5d8:	2800      	cmp	r0, #0
 23ea5da:	f001 8142 	beq.w	23eb862 <_Z6OBS_Dov+0x1d92>
      t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea5de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 23ea5e2:	4632      	mov	r2, r6
 23ea5e4:	463b      	mov	r3, r7
 23ea5e6:	4630      	mov	r0, r6
 23ea5e8:	4639      	mov	r1, r7
 23ea5ea:	f7f9 fb4f 	bl	23e3c8c <__aeabi_dcmpun>
 23ea5ee:	2800      	cmp	r0, #0
 23ea5f0:	f041 812e 	bne.w	23eb850 <_Z6OBS_Dov+0x1d80>
 23ea5f4:	2200      	movs	r2, #0
 23ea5f6:	4630      	mov	r0, r6
 23ea5f8:	4639      	mov	r1, r7
 23ea5fa:	4ba7      	ldr	r3, [pc, #668]	; (23ea898 <_Z6OBS_Dov+0xdc8>)
 23ea5fc:	f7f9 fb1e 	bl	23e3c3c <__aeabi_dcmplt>
 23ea600:	2800      	cmp	r0, #0
 23ea602:	f041 8125 	bne.w	23eb850 <_Z6OBS_Dov+0x1d80>
 23ea606:	2200      	movs	r2, #0
 23ea608:	4630      	mov	r0, r6
 23ea60a:	4639      	mov	r1, r7
 23ea60c:	4ba3      	ldr	r3, [pc, #652]	; (23ea89c <_Z6OBS_Dov+0xdcc>)
 23ea60e:	f7f9 fb33 	bl	23e3c78 <__aeabi_dcmpgt>
 23ea612:	2800      	cmp	r0, #0
 23ea614:	f041 811c 	bne.w	23eb850 <_Z6OBS_Dov+0x1d80>
 23ea618:	e9cd 6702 	strd	r6, r7, [sp, #8]
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ea61c:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 23ea620:	4632      	mov	r2, r6
 23ea622:	463b      	mov	r3, r7
 23ea624:	4630      	mov	r0, r6
 23ea626:	4639      	mov	r1, r7
 23ea628:	f7f9 fb30 	bl	23e3c8c <__aeabi_dcmpun>
 23ea62c:	2800      	cmp	r0, #0
 23ea62e:	f041 8113 	bne.w	23eb858 <_Z6OBS_Dov+0x1d88>
 23ea632:	2200      	movs	r2, #0
 23ea634:	2300      	movs	r3, #0
 23ea636:	4630      	mov	r0, r6
 23ea638:	4639      	mov	r1, r7
 23ea63a:	f7f9 faff 	bl	23e3c3c <__aeabi_dcmplt>
 23ea63e:	2800      	cmp	r0, #0
 23ea640:	f041 810a 	bne.w	23eb858 <_Z6OBS_Dov+0x1d88>
 23ea644:	2200      	movs	r2, #0
 23ea646:	4630      	mov	r0, r6
 23ea648:	4639      	mov	r1, r7
 23ea64a:	4b95      	ldr	r3, [pc, #596]	; (23ea8a0 <_Z6OBS_Dov+0xdd0>)
 23ea64c:	f7f9 fb14 	bl	23e3c78 <__aeabi_dcmpgt>
 23ea650:	2800      	cmp	r0, #0
 23ea652:	f041 8101 	bne.w	23eb858 <_Z6OBS_Dov+0x1d88>
      SystemStatusBits &= ~ SSB_HDC_1;  // Turn Off Bit
 23ea656:	f8db 3000 	ldr.w	r3, [fp]
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ea65a:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
      SystemStatusBits &= ~ SSB_HDC_1;  // Turn Off Bit
 23ea65e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
      SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
 23ea662:	f8cb 3000 	str.w	r3, [fp]
    strcpy (obs[oidx].sensor[sidx].id, "hdt1");
 23ea666:	231c      	movs	r3, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea668:	f640 2698 	movw	r6, #2712	; 0xa98
 23ea66c:	fb03 f708 	mul.w	r7, r3, r8
    strcpy (obs[oidx].sensor[sidx].id, "hdt1");
 23ea670:	19e8      	adds	r0, r5, r7
 23ea672:	498c      	ldr	r1, [pc, #560]	; (23ea8a4 <_Z6OBS_Dov+0xdd4>)
 23ea674:	4420      	add	r0, r4
 23ea676:	f012 f8b7 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23ea67a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea67e:	2200      	movs	r2, #0
 23ea680:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ea682:	f04f 0a01 	mov.w	sl, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea686:	435e      	muls	r6, r3
 23ea688:	eb07 0906 	add.w	r9, r7, r6
 23ea68c:	44a1      	add	r9, r4
 23ea68e:	f8c9 2020 	str.w	r2, [r9, #32]
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23ea692:	f7f9 fb59 	bl	23e3d48 <__aeabi_d2f>
 23ea696:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "hdh1");
 23ea69a:	f107 001c 	add.w	r0, r7, #28
 23ea69e:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23ea6a0:	f108 0301 	add.w	r3, r8, #1
    strcpy (obs[oidx].sensor[sidx].id, "hdh1");
 23ea6a4:	4980      	ldr	r1, [pc, #512]	; (23ea8a8 <_Z6OBS_Dov+0xdd8>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ea6a6:	f889 a030 	strb.w	sl, [r9, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "hdh1");
 23ea6aa:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ea6ac:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "hdh1");
 23ea6ae:	f012 f89b 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23ea6b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea6b6:	9b01      	ldr	r3, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23ea6b8:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea6bc:	461a      	mov	r2, r3
 23ea6be:	231c      	movs	r3, #28
 23ea6c0:	fb03 6602 	mla	r6, r3, r2, r6
 23ea6c4:	2200      	movs	r2, #0
 23ea6c6:	4426      	add	r6, r4
 23ea6c8:	6232      	str	r2, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23ea6ca:	f7f9 fb3d 	bl	23e3d48 <__aeabi_d2f>
    obs[oidx].sensor[sidx++].inuse = true;
 23ea6ce:	f886 a030 	strb.w	sl, [r6, #48]	; 0x30
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23ea6d2:	6270      	str	r0, [r6, #36]	; 0x24
  if (HDC_2_exists) {
 23ea6d4:	4b75      	ldr	r3, [pc, #468]	; (23ea8ac <_Z6OBS_Dov+0xddc>)
 23ea6d6:	781b      	ldrb	r3, [r3, #0]
 23ea6d8:	2b00      	cmp	r3, #0
 23ea6da:	f000 808d 	beq.w	23ea7f8 <_Z6OBS_Dov+0xd28>
    double t = -999.9;
 23ea6de:	f20f 1a98 	addw	sl, pc, #408	; 0x198
 23ea6e2:	e9da 9a00 	ldrd	r9, sl, [sl]
    if (hdc2.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0)) {
 23ea6e6:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 23ea6ea:	4871      	ldr	r0, [pc, #452]	; (23ea8b0 <_Z6OBS_Dov+0xde0>)
 23ea6ec:	aa0c      	add	r2, sp, #48	; 0x30
 23ea6ee:	a902      	add	r1, sp, #8
    double t = -999.9;
 23ea6f0:	e9cd 9a02 	strd	r9, sl, [sp, #8]
    double h = -999.9;
 23ea6f4:	e9cd 9a0c 	strd	r9, sl, [sp, #48]	; 0x30
    if (hdc2.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0)) {
 23ea6f8:	f005 fe7e 	bl	23f03f8 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>
 23ea6fc:	2800      	cmp	r0, #0
 23ea6fe:	f001 80c2 	beq.w	23eb886 <_Z6OBS_Dov+0x1db6>
      t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea702:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 23ea706:	4632      	mov	r2, r6
 23ea708:	463b      	mov	r3, r7
 23ea70a:	4630      	mov	r0, r6
 23ea70c:	4639      	mov	r1, r7
 23ea70e:	f7f9 fabd 	bl	23e3c8c <__aeabi_dcmpun>
 23ea712:	2800      	cmp	r0, #0
 23ea714:	f041 80ae 	bne.w	23eb874 <_Z6OBS_Dov+0x1da4>
 23ea718:	2200      	movs	r2, #0
 23ea71a:	4630      	mov	r0, r6
 23ea71c:	4639      	mov	r1, r7
 23ea71e:	4b5e      	ldr	r3, [pc, #376]	; (23ea898 <_Z6OBS_Dov+0xdc8>)
 23ea720:	f7f9 fa8c 	bl	23e3c3c <__aeabi_dcmplt>
 23ea724:	2800      	cmp	r0, #0
 23ea726:	f041 80a5 	bne.w	23eb874 <_Z6OBS_Dov+0x1da4>
 23ea72a:	2200      	movs	r2, #0
 23ea72c:	4630      	mov	r0, r6
 23ea72e:	4639      	mov	r1, r7
 23ea730:	4b5a      	ldr	r3, [pc, #360]	; (23ea89c <_Z6OBS_Dov+0xdcc>)
 23ea732:	f7f9 faa1 	bl	23e3c78 <__aeabi_dcmpgt>
 23ea736:	2800      	cmp	r0, #0
 23ea738:	f041 809c 	bne.w	23eb874 <_Z6OBS_Dov+0x1da4>
 23ea73c:	e9cd 6702 	strd	r6, r7, [sp, #8]
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ea740:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 23ea744:	4632      	mov	r2, r6
 23ea746:	463b      	mov	r3, r7
 23ea748:	4630      	mov	r0, r6
 23ea74a:	4639      	mov	r1, r7
 23ea74c:	f7f9 fa9e 	bl	23e3c8c <__aeabi_dcmpun>
 23ea750:	2800      	cmp	r0, #0
 23ea752:	f041 8093 	bne.w	23eb87c <_Z6OBS_Dov+0x1dac>
 23ea756:	2200      	movs	r2, #0
 23ea758:	2300      	movs	r3, #0
 23ea75a:	4630      	mov	r0, r6
 23ea75c:	4639      	mov	r1, r7
 23ea75e:	f7f9 fa6d 	bl	23e3c3c <__aeabi_dcmplt>
 23ea762:	2800      	cmp	r0, #0
 23ea764:	f041 808a 	bne.w	23eb87c <_Z6OBS_Dov+0x1dac>
 23ea768:	2200      	movs	r2, #0
 23ea76a:	4630      	mov	r0, r6
 23ea76c:	4639      	mov	r1, r7
 23ea76e:	4b4c      	ldr	r3, [pc, #304]	; (23ea8a0 <_Z6OBS_Dov+0xdd0>)
 23ea770:	f7f9 fa82 	bl	23e3c78 <__aeabi_dcmpgt>
 23ea774:	2800      	cmp	r0, #0
 23ea776:	f041 8081 	bne.w	23eb87c <_Z6OBS_Dov+0x1dac>
      SystemStatusBits &= ~ SSB_HDC_2;  // Turn Off Bit
 23ea77a:	f8db 3000 	ldr.w	r3, [fp]
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23ea77e:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
      SystemStatusBits &= ~ SSB_HDC_2;  // Turn Off Bit
 23ea782:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
      SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
 23ea786:	f8cb 3000 	str.w	r3, [fp]
    strcpy (obs[oidx].sensor[sidx].id, "hdt2");
 23ea78a:	231c      	movs	r3, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea78c:	f640 2698 	movw	r6, #2712	; 0xa98
 23ea790:	fb03 f708 	mul.w	r7, r3, r8
    strcpy (obs[oidx].sensor[sidx].id, "hdt2");
 23ea794:	19e8      	adds	r0, r5, r7
 23ea796:	4947      	ldr	r1, [pc, #284]	; (23ea8b4 <_Z6OBS_Dov+0xde4>)
 23ea798:	4420      	add	r0, r4
 23ea79a:	f012 f825 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23ea79e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea7a2:	2200      	movs	r2, #0
 23ea7a4:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23ea7a6:	f04f 0a01 	mov.w	sl, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea7aa:	435e      	muls	r6, r3
 23ea7ac:	eb07 0906 	add.w	r9, r7, r6
 23ea7b0:	44a1      	add	r9, r4
 23ea7b2:	f8c9 2020 	str.w	r2, [r9, #32]
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23ea7b6:	f7f9 fac7 	bl	23e3d48 <__aeabi_d2f>
 23ea7ba:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "hdh2");
 23ea7be:	f107 001c 	add.w	r0, r7, #28
 23ea7c2:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23ea7c4:	f108 0301 	add.w	r3, r8, #1
    strcpy (obs[oidx].sensor[sidx].id, "hdh2");
 23ea7c8:	493b      	ldr	r1, [pc, #236]	; (23ea8b8 <_Z6OBS_Dov+0xde8>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ea7ca:	f889 a030 	strb.w	sl, [r9, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "hdh2");
 23ea7ce:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23ea7d0:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "hdh2");
 23ea7d2:	f012 f809 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23ea7d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea7da:	9b01      	ldr	r3, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23ea7dc:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea7e0:	461a      	mov	r2, r3
 23ea7e2:	231c      	movs	r3, #28
 23ea7e4:	fb03 6602 	mla	r6, r3, r2, r6
 23ea7e8:	2200      	movs	r2, #0
 23ea7ea:	4426      	add	r6, r4
 23ea7ec:	6232      	str	r2, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23ea7ee:	f7f9 faab 	bl	23e3d48 <__aeabi_d2f>
    obs[oidx].sensor[sidx++].inuse = true;
 23ea7f2:	f886 a030 	strb.w	sl, [r6, #48]	; 0x30
    obs[oidx].sensor[sidx].f_obs = (float) h;
 23ea7f6:	6270      	str	r0, [r6, #36]	; 0x24
  if (LPS_1_exists) {
 23ea7f8:	4b30      	ldr	r3, [pc, #192]	; (23ea8bc <_Z6OBS_Dov+0xdec>)
 23ea7fa:	781b      	ldrb	r3, [r3, #0]
 23ea7fc:	2b00      	cmp	r3, #0
 23ea7fe:	f000 809a 	beq.w	23ea936 <_Z6OBS_Dov+0xe66>
    float t = lps1.readTemperature();
 23ea802:	482f      	ldr	r0, [pc, #188]	; (23ea8c0 <_Z6OBS_Dov+0xdf0>)
 23ea804:	f005 ff40 	bl	23f0688 <_ZN16Adafruit_LPS35HW15readTemperatureEv>
 23ea808:	eeb0 aa40 	vmov.f32	s20, s0
    float p = lps1.readPressure();
 23ea80c:	482c      	ldr	r0, [pc, #176]	; (23ea8c0 <_Z6OBS_Dov+0xdf0>)
 23ea80e:	f005 ff5d 	bl	23f06cc <_ZN16Adafruit_LPS35HW12readPressureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea812:	eeb4 aa4a 	vcmp.f32	s20, s20
 23ea816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float p = lps1.readPressure();
 23ea81a:	eef0 8a40 	vmov.f32	s17, s0
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea81e:	f181 803b 	bvs.w	23eb898 <_Z6OBS_Dov+0x1dc8>
 23ea822:	eddf 7a28 	vldr	s15, [pc, #160]	; 23ea8c4 <_Z6OBS_Dov+0xdf4>
 23ea826:	eeb4 aae7 	vcmpe.f32	s20, s15
 23ea82a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea82e:	f101 8033 	bmi.w	23eb898 <_Z6OBS_Dov+0x1dc8>
 23ea832:	eddf 7a25 	vldr	s15, [pc, #148]	; 23ea8c8 <_Z6OBS_Dov+0xdf8>
 23ea836:	eeb4 aa67 	vcmp.f32	s20, s15
 23ea83a:	eddf 7a14 	vldr	s15, [pc, #80]	; 23ea88c <_Z6OBS_Dov+0xdbc>
 23ea83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea842:	fe37 aa8a 	vselgt.f32	s20, s15, s20
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23ea846:	eef4 8a68 	vcmp.f32	s17, s17
 23ea84a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea84e:	f181 8027 	bvs.w	23eb8a0 <_Z6OBS_Dov+0x1dd0>
 23ea852:	eddf 7a1e 	vldr	s15, [pc, #120]	; 23ea8cc <_Z6OBS_Dov+0xdfc>
 23ea856:	eef4 8ae7 	vcmpe.f32	s17, s15
 23ea85a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea85e:	f101 801f 	bmi.w	23eb8a0 <_Z6OBS_Dov+0x1dd0>
 23ea862:	eddf 7a1b 	vldr	s15, [pc, #108]	; 23ea8d0 <_Z6OBS_Dov+0xe00>
 23ea866:	eef4 8a67 	vcmp.f32	s17, s15
 23ea86a:	eddf 7a08 	vldr	s15, [pc, #32]	; 23ea88c <_Z6OBS_Dov+0xdbc>
 23ea86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea872:	fe77 8aa8 	vselgt.f32	s17, s15, s17
 23ea876:	e02f      	b.n	23ea8d8 <_Z6OBS_Dov+0xe08>
 23ea878:	33333333 	.word	0x33333333
 23ea87c:	c08f3f33 	.word	0xc08f3f33
 23ea880:	023fdf49 	.word	0x023fdf49
 23ea884:	1007abc4 	.word	0x1007abc4
 23ea888:	42c80000 	.word	0x42c80000
 23ea88c:	c479f99a 	.word	0xc479f99a
 23ea890:	1006a2ac 	.word	0x1006a2ac
 23ea894:	1006ae80 	.word	0x1006ae80
 23ea898:	c0440000 	.word	0xc0440000
 23ea89c:	404e0000 	.word	0x404e0000
 23ea8a0:	40590000 	.word	0x40590000
 23ea8a4:	023fdf5b 	.word	0x023fdf5b
 23ea8a8:	023fdf60 	.word	0x023fdf60
 23ea8ac:	1006a2ad 	.word	0x1006a2ad
 23ea8b0:	1006ae88 	.word	0x1006ae88
 23ea8b4:	023fdf65 	.word	0x023fdf65
 23ea8b8:	023fdf6a 	.word	0x023fdf6a
 23ea8bc:	1006a2b2 	.word	0x1006a2b2
 23ea8c0:	1006f0c0 	.word	0x1006f0c0
 23ea8c4:	c2200000 	.word	0xc2200000
 23ea8c8:	42700000 	.word	0x42700000
 23ea8cc:	43960000 	.word	0x43960000
 23ea8d0:	44898000 	.word	0x44898000
 23ea8d4:	1006a178 	.word	0x1006a178
    strcpy (obs[oidx].sensor[sidx].id, "lpt1");
 23ea8d8:	231c      	movs	r3, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea8da:	f640 2698 	movw	r6, #2712	; 0xa98
 23ea8de:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ea8e2:	f04f 0901 	mov.w	r9, #1
 23ea8e6:	fb03 f708 	mul.w	r7, r3, r8
    strcpy (obs[oidx].sensor[sidx].id, "lpt1");
 23ea8ea:	19e8      	adds	r0, r5, r7
 23ea8ec:	49d7      	ldr	r1, [pc, #860]	; (23eac4c <_Z6OBS_Dov+0x117c>)
 23ea8ee:	4420      	add	r0, r4
 23ea8f0:	f011 ff7a 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea8f4:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "lpp1");
 23ea8f6:	f107 001c 	add.w	r0, r7, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea8fa:	435e      	muls	r6, r3
 23ea8fc:	19b9      	adds	r1, r7, r6
 23ea8fe:	4421      	add	r1, r4
    strcpy (obs[oidx].sensor[sidx].id, "lpp1");
 23ea900:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23ea902:	f108 0201 	add.w	r2, r8, #1
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23ea906:	ed81 aa09 	vstr	s20, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea90a:	f8c1 a020 	str.w	sl, [r1, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ea90e:	f881 9030 	strb.w	r9, [r1, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "lpp1");
 23ea912:	4420      	add	r0, r4
 23ea914:	49ce      	ldr	r1, [pc, #824]	; (23eac50 <_Z6OBS_Dov+0x1180>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ea916:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "lpp1");
 23ea918:	f011 ff66 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea91c:	231c      	movs	r3, #28
 23ea91e:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23ea920:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea924:	fb03 6602 	mla	r6, r3, r2, r6
 23ea928:	4426      	add	r6, r4
    obs[oidx].sensor[sidx].f_obs = (float) p;
 23ea92a:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea92e:	f8c6 a020 	str.w	sl, [r6, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ea932:	f886 9030 	strb.w	r9, [r6, #48]	; 0x30
  if (LPS_2_exists) {
 23ea936:	4bc7      	ldr	r3, [pc, #796]	; (23eac54 <_Z6OBS_Dov+0x1184>)
 23ea938:	781b      	ldrb	r3, [r3, #0]
 23ea93a:	2b00      	cmp	r3, #0
 23ea93c:	d068      	beq.n	23eaa10 <_Z6OBS_Dov+0xf40>
    float t = lps2.readTemperature();
 23ea93e:	48c6      	ldr	r0, [pc, #792]	; (23eac58 <_Z6OBS_Dov+0x1188>)
 23ea940:	f005 fea2 	bl	23f0688 <_ZN16Adafruit_LPS35HW15readTemperatureEv>
 23ea944:	eeb0 aa40 	vmov.f32	s20, s0
    float p = lps2.readPressure();
 23ea948:	48c3      	ldr	r0, [pc, #780]	; (23eac58 <_Z6OBS_Dov+0x1188>)
 23ea94a:	f005 febf 	bl	23f06cc <_ZN16Adafruit_LPS35HW12readPressureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea94e:	eeb4 aa4a 	vcmp.f32	s20, s20
 23ea952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float p = lps2.readPressure();
 23ea956:	eef0 8a40 	vmov.f32	s17, s0
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ea95a:	f180 87a5 	bvs.w	23eb8a8 <_Z6OBS_Dov+0x1dd8>
 23ea95e:	eddf 7abf 	vldr	s15, [pc, #764]	; 23eac5c <_Z6OBS_Dov+0x118c>
 23ea962:	eeb4 aae7 	vcmpe.f32	s20, s15
 23ea966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea96a:	f100 879d 	bmi.w	23eb8a8 <_Z6OBS_Dov+0x1dd8>
 23ea96e:	eddf 7abc 	vldr	s15, [pc, #752]	; 23eac60 <_Z6OBS_Dov+0x1190>
 23ea972:	eeb4 aa67 	vcmp.f32	s20, s15
 23ea976:	eddf 7abb 	vldr	s15, [pc, #748]	; 23eac64 <_Z6OBS_Dov+0x1194>
 23ea97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea97e:	fe37 aa8a 	vselgt.f32	s20, s15, s20
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23ea982:	eef4 8a68 	vcmp.f32	s17, s17
 23ea986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea98a:	f180 8791 	bvs.w	23eb8b0 <_Z6OBS_Dov+0x1de0>
 23ea98e:	eddf 7ab6 	vldr	s15, [pc, #728]	; 23eac68 <_Z6OBS_Dov+0x1198>
 23ea992:	eef4 8ae7 	vcmpe.f32	s17, s15
 23ea996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea99a:	f100 8789 	bmi.w	23eb8b0 <_Z6OBS_Dov+0x1de0>
 23ea99e:	eddf 7ab3 	vldr	s15, [pc, #716]	; 23eac6c <_Z6OBS_Dov+0x119c>
 23ea9a2:	eef4 8a67 	vcmp.f32	s17, s15
 23ea9a6:	eddf 7aaf 	vldr	s15, [pc, #700]	; 23eac64 <_Z6OBS_Dov+0x1194>
 23ea9aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea9ae:	fe77 8aa8 	vselgt.f32	s17, s15, s17
    strcpy (obs[oidx].sensor[sidx].id, "lpt2");
 23ea9b2:	231c      	movs	r3, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea9b4:	f640 2698 	movw	r6, #2712	; 0xa98
 23ea9b8:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23ea9bc:	f04f 0901 	mov.w	r9, #1
 23ea9c0:	fb03 f708 	mul.w	r7, r3, r8
    strcpy (obs[oidx].sensor[sidx].id, "lpt2");
 23ea9c4:	19e8      	adds	r0, r5, r7
 23ea9c6:	49aa      	ldr	r1, [pc, #680]	; (23eac70 <_Z6OBS_Dov+0x11a0>)
 23ea9c8:	4420      	add	r0, r4
 23ea9ca:	f011 ff0d 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea9ce:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "lpp2");
 23ea9d0:	f107 001c 	add.w	r0, r7, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea9d4:	435e      	muls	r6, r3
 23ea9d6:	19b9      	adds	r1, r7, r6
 23ea9d8:	4421      	add	r1, r4
    strcpy (obs[oidx].sensor[sidx].id, "lpp2");
 23ea9da:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23ea9dc:	f108 0201 	add.w	r2, r8, #1
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23ea9e0:	ed81 aa09 	vstr	s20, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea9e4:	f8c1 a020 	str.w	sl, [r1, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ea9e8:	f881 9030 	strb.w	r9, [r1, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "lpp2");
 23ea9ec:	4420      	add	r0, r4
 23ea9ee:	49a1      	ldr	r1, [pc, #644]	; (23eac74 <_Z6OBS_Dov+0x11a4>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ea9f0:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "lpp2");
 23ea9f2:	f011 fef9 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea9f6:	231c      	movs	r3, #28
 23ea9f8:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23ea9fa:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23ea9fe:	fb03 6602 	mla	r6, r3, r2, r6
 23eaa02:	4426      	add	r6, r4
    obs[oidx].sensor[sidx].f_obs = (float) p;
 23eaa04:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23eaa08:	f8c6 a020 	str.w	sl, [r6, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23eaa0c:	f886 9030 	strb.w	r9, [r6, #48]	; 0x30
  if (HIH8_exists) {
 23eaa10:	4b99      	ldr	r3, [pc, #612]	; (23eac78 <_Z6OBS_Dov+0x11a8>)
 23eaa12:	781b      	ldrb	r3, [r3, #0]
 23eaa14:	2b00      	cmp	r3, #0
 23eaa16:	d06b      	beq.n	23eaaf0 <_Z6OBS_Dov+0x1020>
    float t = 0.0;
 23eaa18:	2600      	movs	r6, #0
    bool status = hih8_getTempHumid(&t, &h);
 23eaa1a:	a90c      	add	r1, sp, #48	; 0x30
 23eaa1c:	a802      	add	r0, sp, #8
    float t = 0.0;
 23eaa1e:	9602      	str	r6, [sp, #8]
    float h = 0.0;
 23eaa20:	960c      	str	r6, [sp, #48]	; 0x30
    bool status = hih8_getTempHumid(&t, &h);
 23eaa22:	f7fb fbb1 	bl	23e6188 <_Z17hih8_getTempHumidPfS_>
    if (!status) {
 23eaa26:	b910      	cbnz	r0, 23eaa2e <_Z6OBS_Dov+0xf5e>
      t = -999.99;
 23eaa28:	4b94      	ldr	r3, [pc, #592]	; (23eac7c <_Z6OBS_Dov+0x11ac>)
      h = 0.0;
 23eaa2a:	960c      	str	r6, [sp, #48]	; 0x30
      t = -999.99;
 23eaa2c:	9302      	str	r3, [sp, #8]
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eaa2e:	ed9d aa02 	vldr	s20, [sp, #8]
 23eaa32:	eeb4 aa4a 	vcmp.f32	s20, s20
 23eaa36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eaa3a:	f180 873d 	bvs.w	23eb8b8 <_Z6OBS_Dov+0x1de8>
 23eaa3e:	eddf 7a87 	vldr	s15, [pc, #540]	; 23eac5c <_Z6OBS_Dov+0x118c>
 23eaa42:	eeb4 aae7 	vcmpe.f32	s20, s15
 23eaa46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eaa4a:	f100 8735 	bmi.w	23eb8b8 <_Z6OBS_Dov+0x1de8>
 23eaa4e:	eddf 7a84 	vldr	s15, [pc, #528]	; 23eac60 <_Z6OBS_Dov+0x1190>
 23eaa52:	eeb4 aa67 	vcmp.f32	s20, s15
 23eaa56:	eddf 7a83 	vldr	s15, [pc, #524]	; 23eac64 <_Z6OBS_Dov+0x1194>
 23eaa5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eaa5e:	fe37 aa8a 	vselgt.f32	s20, s15, s20
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23eaa62:	eddd 8a0c 	vldr	s17, [sp, #48]	; 0x30
 23eaa66:	eef4 8a68 	vcmp.f32	s17, s17
 23eaa6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eaa6e:	f180 8727 	bvs.w	23eb8c0 <_Z6OBS_Dov+0x1df0>
 23eaa72:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 23eaa76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eaa7a:	f100 8721 	bmi.w	23eb8c0 <_Z6OBS_Dov+0x1df0>
 23eaa7e:	eddf 7a80 	vldr	s15, [pc, #512]	; 23eac80 <_Z6OBS_Dov+0x11b0>
 23eaa82:	eef4 8a67 	vcmp.f32	s17, s15
 23eaa86:	eddf 7a77 	vldr	s15, [pc, #476]	; 23eac64 <_Z6OBS_Dov+0x1194>
 23eaa8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eaa8e:	fe77 8aa8 	vselgt.f32	s17, s15, s17
    strcpy (obs[oidx].sensor[sidx].id, "ht2");
 23eaa92:	231c      	movs	r3, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23eaa94:	f640 2698 	movw	r6, #2712	; 0xa98
 23eaa98:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23eaa9c:	f04f 0901 	mov.w	r9, #1
 23eaaa0:	fb03 f708 	mul.w	r7, r3, r8
    strcpy (obs[oidx].sensor[sidx].id, "ht2");
 23eaaa4:	19e8      	adds	r0, r5, r7
 23eaaa6:	4977      	ldr	r1, [pc, #476]	; (23eac84 <_Z6OBS_Dov+0x11b4>)
 23eaaa8:	4420      	add	r0, r4
 23eaaaa:	f011 fe9d 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eaaae:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "hh2");
 23eaab0:	f107 001c 	add.w	r0, r7, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23eaab4:	435e      	muls	r6, r3
 23eaab6:	19b9      	adds	r1, r7, r6
 23eaab8:	4421      	add	r1, r4
    strcpy (obs[oidx].sensor[sidx].id, "hh2");
 23eaaba:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23eaabc:	f108 0201 	add.w	r2, r8, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23eaac0:	ed81 aa09 	vstr	s20, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23eaac4:	f8c1 a020 	str.w	sl, [r1, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23eaac8:	f881 9030 	strb.w	r9, [r1, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "hh2");
 23eaacc:	4420      	add	r0, r4
 23eaace:	496e      	ldr	r1, [pc, #440]	; (23eac88 <_Z6OBS_Dov+0x11b8>)
    obs[oidx].sensor[sidx++].inuse = true;
 23eaad0:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "hh2");
 23eaad2:	f011 fe89 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eaad6:	231c      	movs	r3, #28
 23eaad8:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23eaada:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23eaade:	fb03 6602 	mla	r6, r3, r2, r6
 23eaae2:	4426      	add	r6, r4
    obs[oidx].sensor[sidx].f_obs = h;
 23eaae4:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23eaae8:	f8c6 a020 	str.w	sl, [r6, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23eaaec:	f886 9030 	strb.w	r9, [r6, #48]	; 0x30
  if (SI1145_exists) {
 23eaaf0:	4e66      	ldr	r6, [pc, #408]	; (23eac8c <_Z6OBS_Dov+0x11bc>)
 23eaaf2:	7833      	ldrb	r3, [r6, #0]
 23eaaf4:	2b00      	cmp	r3, #0
 23eaaf6:	f000 811d 	beq.w	23ead34 <_Z6OBS_Dov+0x1264>
    float si_vis = uv.readVisible();
 23eaafa:	4865      	ldr	r0, [pc, #404]	; (23eac90 <_Z6OBS_Dov+0x11c0>)
 23eaafc:	f006 f945 	bl	23f0d8a <_ZN15Adafruit_SI114511readVisibleEv>
 23eab00:	ee07 0a90 	vmov	s15, r0
    float si_ir = uv.readIR();
 23eab04:	4862      	ldr	r0, [pc, #392]	; (23eac90 <_Z6OBS_Dov+0x11c0>)
    float si_vis = uv.readVisible();
 23eab06:	eef8 aa67 	vcvt.f32.u32	s21, s15
    float si_ir = uv.readIR();
 23eab0a:	f006 f941 	bl	23f0d90 <_ZN15Adafruit_SI11456readIREv>
 23eab0e:	ee07 0a90 	vmov	s15, r0
    float si_uv = uv.readUV()/100.0;
 23eab12:	485f      	ldr	r0, [pc, #380]	; (23eac90 <_Z6OBS_Dov+0x11c0>)
    float si_ir = uv.readIR();
 23eab14:	eeb8 aa67 	vcvt.f32.u32	s20, s15
    float si_uv = uv.readUV()/100.0;
 23eab18:	f006 f934 	bl	23f0d84 <_ZN15Adafruit_SI11456readUVEv>
 23eab1c:	f7f8 fdb2 	bl	23e3684 <__aeabi_i2d>
 23eab20:	2200      	movs	r2, #0
 23eab22:	4b5c      	ldr	r3, [pc, #368]	; (23eac94 <_Z6OBS_Dov+0x11c4>)
 23eab24:	f7f8 ff42 	bl	23e39ac <__aeabi_ddiv>
 23eab28:	f7f9 f90e 	bl	23e3d48 <__aeabi_d2f>
    if ( ((si_vis+si_ir+si_uv) == 0.0) && ((si_last_vis+si_last_ir+si_last_uv) != 0.0) ) {
 23eab2c:	ee7a 7a8a 	vadd.f32	s15, s21, s20
    float si_uv = uv.readUV()/100.0;
 23eab30:	ee08 0a90 	vmov	s17, r0
    if ( ((si_vis+si_ir+si_uv) == 0.0) && ((si_last_vis+si_last_ir+si_last_uv) != 0.0) ) {
 23eab34:	ee77 7aa8 	vadd.f32	s15, s15, s17
 23eab38:	eef5 7a40 	vcmp.f32	s15, #0.0
 23eab3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eab40:	f8df a16c 	ldr.w	sl, [pc, #364]	; 23eacb0 <_Z6OBS_Dov+0x11e0>
 23eab44:	f8df 916c 	ldr.w	r9, [pc, #364]	; 23eacb4 <_Z6OBS_Dov+0x11e4>
 23eab48:	4f53      	ldr	r7, [pc, #332]	; (23eac98 <_Z6OBS_Dov+0x11c8>)
 23eab4a:	d141      	bne.n	23eabd0 <_Z6OBS_Dov+0x1100>
 23eab4c:	ed99 7a00 	vldr	s14, [r9]
 23eab50:	edda 7a00 	vldr	s15, [sl]
 23eab54:	ee77 7a87 	vadd.f32	s15, s15, s14
 23eab58:	ed97 7a00 	vldr	s14, [r7]
 23eab5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 23eab60:	eef5 7a40 	vcmp.f32	s15, #0.0
 23eab64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eab68:	d032      	beq.n	23eabd0 <_Z6OBS_Dov+0x1100>
      Output ("SI RESET");
 23eab6a:	484c      	ldr	r0, [pc, #304]	; (23eac9c <_Z6OBS_Dov+0x11cc>)
 23eab6c:	f7fa fd8e 	bl	23e568c <_Z6OutputPKc>
      if (uv.begin()) {
 23eab70:	f00e ffe8 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23eab74:	2160      	movs	r1, #96	; 0x60
 23eab76:	4602      	mov	r2, r0
 23eab78:	4845      	ldr	r0, [pc, #276]	; (23eac90 <_Z6OBS_Dov+0x11c0>)
 23eab7a:	f006 f96b 	bl	23f0e54 <_ZN15Adafruit_SI11455beginEhP7TwoWire>
 23eab7e:	2800      	cmp	r0, #0
 23eab80:	f000 86a2 	beq.w	23eb8c8 <_Z6OBS_Dov+0x1df8>
        SI1145_exists = true;
 23eab84:	2301      	movs	r3, #1
        Output ("SI ONLINE");
 23eab86:	4846      	ldr	r0, [pc, #280]	; (23eaca0 <_Z6OBS_Dov+0x11d0>)
        SI1145_exists = true;
 23eab88:	7033      	strb	r3, [r6, #0]
        Output ("SI ONLINE");
 23eab8a:	f7fa fd7f 	bl	23e568c <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_SI1145; // Turn Off Bit
 23eab8e:	f8db 3000 	ldr.w	r3, [fp]
        si_vis = uv.readVisible();
 23eab92:	483f      	ldr	r0, [pc, #252]	; (23eac90 <_Z6OBS_Dov+0x11c0>)
        SystemStatusBits &= ~SSB_SI1145; // Turn Off Bit
 23eab94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 23eab98:	f8cb 3000 	str.w	r3, [fp]
        si_vis = uv.readVisible();
 23eab9c:	f006 f8f5 	bl	23f0d8a <_ZN15Adafruit_SI114511readVisibleEv>
 23eaba0:	ee07 0a90 	vmov	s15, r0
        si_ir = uv.readIR();
 23eaba4:	483a      	ldr	r0, [pc, #232]	; (23eac90 <_Z6OBS_Dov+0x11c0>)
        si_vis = uv.readVisible();
 23eaba6:	eef8 aa67 	vcvt.f32.u32	s21, s15
        si_ir = uv.readIR();
 23eabaa:	f006 f8f1 	bl	23f0d90 <_ZN15Adafruit_SI11456readIREv>
 23eabae:	ee07 0a90 	vmov	s15, r0
        si_uv = uv.readUV()/100.0;
 23eabb2:	4837      	ldr	r0, [pc, #220]	; (23eac90 <_Z6OBS_Dov+0x11c0>)
        si_ir = uv.readIR();
 23eabb4:	eeb8 aa67 	vcvt.f32.u32	s20, s15
        si_uv = uv.readUV()/100.0;
 23eabb8:	f006 f8e4 	bl	23f0d84 <_ZN15Adafruit_SI11456readUVEv>
 23eabbc:	f7f8 fd62 	bl	23e3684 <__aeabi_i2d>
 23eabc0:	2200      	movs	r2, #0
 23eabc2:	4b34      	ldr	r3, [pc, #208]	; (23eac94 <_Z6OBS_Dov+0x11c4>)
 23eabc4:	f7f8 fef2 	bl	23e39ac <__aeabi_ddiv>
 23eabc8:	f7f9 f8be 	bl	23e3d48 <__aeabi_d2f>
 23eabcc:	ee08 0a90 	vmov	s17, r0
    si_vis = (isnan(si_vis) || (si_vis < QC_MIN_VI)  || (si_vis > QC_MAX_VI)) ? QC_ERR_VI  : si_vis;
 23eabd0:	eef4 aa6a 	vcmp.f32	s21, s21
 23eabd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    si_last_vis = si_vis;
 23eabd8:	edca aa00 	vstr	s21, [sl]
    si_last_ir = si_ir;
 23eabdc:	ed89 aa00 	vstr	s20, [r9]
    si_last_uv = si_uv;
 23eabe0:	edc7 8a00 	vstr	s17, [r7]
    si_vis = (isnan(si_vis) || (si_vis < QC_MIN_VI)  || (si_vis > QC_MAX_VI)) ? QC_ERR_VI  : si_vis;
 23eabe4:	f180 867c 	bvs.w	23eb8e0 <_Z6OBS_Dov+0x1e10>
 23eabe8:	eddf 7a2e 	vldr	s15, [pc, #184]	; 23eaca4 <_Z6OBS_Dov+0x11d4>
 23eabec:	eef4 aa67 	vcmp.f32	s21, s15
 23eabf0:	eddf 7a1c 	vldr	s15, [pc, #112]	; 23eac64 <_Z6OBS_Dov+0x1194>
 23eabf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eabf8:	fe77 aaaa 	vselgt.f32	s21, s15, s21
    si_ir  = (isnan(si_ir)  || (si_ir  < QC_MIN_IR)  || (si_ir  > QC_MAX_IR)) ? QC_ERR_IR  : si_ir;
 23eabfc:	eeb4 aa4a 	vcmp.f32	s20, s20
 23eac00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eac04:	f180 8670 	bvs.w	23eb8e8 <_Z6OBS_Dov+0x1e18>
 23eac08:	eddf 7a27 	vldr	s15, [pc, #156]	; 23eaca8 <_Z6OBS_Dov+0x11d8>
 23eac0c:	eeb4 aa67 	vcmp.f32	s20, s15
 23eac10:	eddf 7a14 	vldr	s15, [pc, #80]	; 23eac64 <_Z6OBS_Dov+0x1194>
 23eac14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eac18:	fe37 aa8a 	vselgt.f32	s20, s15, s20
    si_uv  = (isnan(si_uv)  || (si_uv  < QC_MIN_UV)  || (si_uv  > QC_MAX_UV)) ? QC_ERR_UV  : si_uv;
 23eac1c:	eef4 8a68 	vcmp.f32	s17, s17
 23eac20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eac24:	f180 8664 	bvs.w	23eb8f0 <_Z6OBS_Dov+0x1e20>
 23eac28:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 23eac2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eac30:	f100 865e 	bmi.w	23eb8f0 <_Z6OBS_Dov+0x1e20>
 23eac34:	eddf 7a1d 	vldr	s15, [pc, #116]	; 23eacac <_Z6OBS_Dov+0x11dc>
 23eac38:	eef4 8a67 	vcmp.f32	s17, s15
 23eac3c:	eddf 7a09 	vldr	s15, [pc, #36]	; 23eac64 <_Z6OBS_Dov+0x1194>
 23eac40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eac44:	fe77 8aa8 	vselgt.f32	s17, s15, s17
 23eac48:	e036      	b.n	23eacb8 <_Z6OBS_Dov+0x11e8>
 23eac4a:	bf00      	nop
 23eac4c:	023fdf6f 	.word	0x023fdf6f
 23eac50:	023fdf74 	.word	0x023fdf74
 23eac54:	1006a2b3 	.word	0x1006a2b3
 23eac58:	1006f0dc 	.word	0x1006f0dc
 23eac5c:	c2200000 	.word	0xc2200000
 23eac60:	42700000 	.word	0x42700000
 23eac64:	c479f99a 	.word	0xc479f99a
 23eac68:	43960000 	.word	0x43960000
 23eac6c:	44898000 	.word	0x44898000
 23eac70:	023fdf79 	.word	0x023fdf79
 23eac74:	023fdf7e 	.word	0x023fdf7e
 23eac78:	1006a2ae 	.word	0x1006a2ae
 23eac7c:	c479ff5c 	.word	0xc479ff5c
 23eac80:	42c80000 	.word	0x42c80000
 23eac84:	023fdf83 	.word	0x023fdf83
 23eac88:	023fdf87 	.word	0x023fdf87
 23eac8c:	1006a7d6 	.word	0x1006a7d6
 23eac90:	1007ac18 	.word	0x1007ac18
 23eac94:	40590000 	.word	0x40590000
 23eac98:	1007abd8 	.word	0x1007abd8
 23eac9c:	023fdf8b 	.word	0x023fdf8b
 23eaca0:	023fd431 	.word	0x023fd431
 23eaca4:	44fa0000 	.word	0x44fa0000
 23eaca8:	467a0000 	.word	0x467a0000
 23eacac:	447a0000 	.word	0x447a0000
 23eacb0:	1007abdc 	.word	0x1007abdc
 23eacb4:	1007abd4 	.word	0x1007abd4
    strcpy (obs[oidx].sensor[sidx].id, "sv1");
 23eacb8:	f04f 0b1c 	mov.w	fp, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23eacbc:	f640 2698 	movw	r6, #2712	; 0xa98
 23eacc0:	fb0b f708 	mul.w	r7, fp, r8
    strcpy (obs[oidx].sensor[sidx].id, "sv1");
 23eacc4:	19e8      	adds	r0, r5, r7
 23eacc6:	49d5      	ldr	r1, [pc, #852]	; (23eb01c <_Z6OBS_Dov+0x154c>)
 23eacc8:	4420      	add	r0, r4
 23eacca:	f011 fd8d 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eacce:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23eacd0:	f04f 0a01 	mov.w	sl, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23eacd4:	435e      	muls	r6, r3
 23eacd6:	2300      	movs	r3, #0
 23eacd8:	19ba      	adds	r2, r7, r6
    strcpy (obs[oidx].sensor[sidx].id, "si1");
 23eacda:	eb07 000b 	add.w	r0, r7, fp
    obs[oidx].sensor[sidx].type = F_OBS;
 23eacde:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "si1");
 23eace0:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23eace2:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = si_vis;
 23eace4:	edc2 aa09 	vstr	s21, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "si1");
 23eace8:	49cd      	ldr	r1, [pc, #820]	; (23eb020 <_Z6OBS_Dov+0x1550>)
    obs[oidx].sensor[sidx++].inuse = true;
 23eacea:	f882 a030 	strb.w	sl, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "si1");
 23eacee:	4420      	add	r0, r4
 23eacf0:	f011 fd7a 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eacf4:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23eacf6:	f108 0901 	add.w	r9, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23eacfa:	fb0b 6909 	mla	r9, fp, r9, r6
 23eacfe:	eb04 0209 	add.w	r2, r4, r9
    obs[oidx].sensor[sidx++].inuse = true;
 23ead02:	f108 0902 	add.w	r9, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23ead06:	fb0b 6609 	mla	r6, fp, r9, r6
    strcpy (obs[oidx].sensor[sidx].id, "su1");
 23ead0a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 23ead0e:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23ead10:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = si_ir;
 23ead12:	ed82 aa09 	vstr	s20, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "su1");
 23ead16:	49c3      	ldr	r1, [pc, #780]	; (23eb024 <_Z6OBS_Dov+0x1554>)
    obs[oidx].sensor[sidx++].inuse = true;
 23ead18:	f882 a030 	strb.w	sl, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "su1");
 23ead1c:	4420      	add	r0, r4
 23ead1e:	f011 fd63 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ead22:	4426      	add	r6, r4
 23ead24:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx].f_obs = si_uv;
 23ead26:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23ead2a:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23ead2c:	f108 0803 	add.w	r8, r8, #3
 23ead30:	f886 a030 	strb.w	sl, [r6, #48]	; 0x30
  if (MCP_1_exists) {
 23ead34:	4bbc      	ldr	r3, [pc, #752]	; (23eb028 <_Z6OBS_Dov+0x1558>)
 23ead36:	781b      	ldrb	r3, [r3, #0]
 23ead38:	b3c3      	cbz	r3, 23eadac <_Z6OBS_Dov+0x12dc>
    strcpy (obs[oidx].sensor[sidx].id, "mt1");
 23ead3a:	261c      	movs	r6, #28
 23ead3c:	fb06 f608 	mul.w	r6, r6, r8
 23ead40:	1970      	adds	r0, r6, r5
 23ead42:	49ba      	ldr	r1, [pc, #744]	; (23eb02c <_Z6OBS_Dov+0x155c>)
 23ead44:	4420      	add	r0, r4
 23ead46:	f011 fd4f 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23ead4a:	f640 2398 	movw	r3, #2712	; 0xa98
 23ead4e:	9a00      	ldr	r2, [sp, #0]
    t = mcp1.readTempC();
 23ead50:	48b7      	ldr	r0, [pc, #732]	; (23eb030 <_Z6OBS_Dov+0x1560>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23ead52:	fb03 6602 	mla	r6, r3, r2, r6
 23ead56:	2300      	movs	r3, #0
 23ead58:	4426      	add	r6, r4
 23ead5a:	6233      	str	r3, [r6, #32]
    t = mcp1.readTempC();
 23ead5c:	f005 fe22 	bl	23f09a4 <_ZN16Adafruit_MCP98089readTempCEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23ead60:	eeb4 0a40 	vcmp.f32	s0, s0
 23ead64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ead68:	f180 85c6 	bvs.w	23eb8f8 <_Z6OBS_Dov+0x1e28>
 23ead6c:	eddf 7ab1 	vldr	s15, [pc, #708]	; 23eb034 <_Z6OBS_Dov+0x1564>
 23ead70:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ead74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ead78:	f100 85be 	bmi.w	23eb8f8 <_Z6OBS_Dov+0x1e28>
 23ead7c:	eddf 7aae 	vldr	s15, [pc, #696]	; 23eb038 <_Z6OBS_Dov+0x1568>
 23ead80:	eeb4 0a67 	vcmp.f32	s0, s15
 23ead84:	eddf 7aad 	vldr	s15, [pc, #692]	; 23eb03c <_Z6OBS_Dov+0x156c>
 23ead88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ead8c:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23ead90:	f640 2398 	movw	r3, #2712	; 0xa98
 23ead94:	9a00      	ldr	r2, [sp, #0]
 23ead96:	4353      	muls	r3, r2
 23ead98:	221c      	movs	r2, #28
 23ead9a:	fb02 3308 	mla	r3, r2, r8, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23ead9e:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23eada0:	4423      	add	r3, r4
 23eada2:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eada6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23eadaa:	4490      	add	r8, r2
  if (MCP_2_exists) {
 23eadac:	4ba4      	ldr	r3, [pc, #656]	; (23eb040 <_Z6OBS_Dov+0x1570>)
 23eadae:	781b      	ldrb	r3, [r3, #0]
 23eadb0:	b3c3      	cbz	r3, 23eae24 <_Z6OBS_Dov+0x1354>
    strcpy (obs[oidx].sensor[sidx].id, "mt2");
 23eadb2:	261c      	movs	r6, #28
 23eadb4:	fb06 f608 	mul.w	r6, r6, r8
 23eadb8:	1970      	adds	r0, r6, r5
 23eadba:	49a2      	ldr	r1, [pc, #648]	; (23eb044 <_Z6OBS_Dov+0x1574>)
 23eadbc:	4420      	add	r0, r4
 23eadbe:	f011 fd13 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eadc2:	f640 2398 	movw	r3, #2712	; 0xa98
 23eadc6:	9a00      	ldr	r2, [sp, #0]
    t = mcp2.readTempC();
 23eadc8:	489f      	ldr	r0, [pc, #636]	; (23eb048 <_Z6OBS_Dov+0x1578>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23eadca:	fb03 6602 	mla	r6, r3, r2, r6
 23eadce:	2300      	movs	r3, #0
 23eadd0:	4426      	add	r6, r4
 23eadd2:	6233      	str	r3, [r6, #32]
    t = mcp2.readTempC();
 23eadd4:	f005 fde6 	bl	23f09a4 <_ZN16Adafruit_MCP98089readTempCEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eadd8:	eeb4 0a40 	vcmp.f32	s0, s0
 23eaddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eade0:	f180 858e 	bvs.w	23eb900 <_Z6OBS_Dov+0x1e30>
 23eade4:	eddf 7a93 	vldr	s15, [pc, #588]	; 23eb034 <_Z6OBS_Dov+0x1564>
 23eade8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23eadec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eadf0:	f100 8586 	bmi.w	23eb900 <_Z6OBS_Dov+0x1e30>
 23eadf4:	eddf 7a90 	vldr	s15, [pc, #576]	; 23eb038 <_Z6OBS_Dov+0x1568>
 23eadf8:	eeb4 0a67 	vcmp.f32	s0, s15
 23eadfc:	eddf 7a8f 	vldr	s15, [pc, #572]	; 23eb03c <_Z6OBS_Dov+0x156c>
 23eae00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eae04:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23eae08:	f640 2398 	movw	r3, #2712	; 0xa98
 23eae0c:	9a00      	ldr	r2, [sp, #0]
 23eae0e:	4353      	muls	r3, r2
 23eae10:	221c      	movs	r2, #28
 23eae12:	fb02 3308 	mla	r3, r2, r8, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23eae16:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23eae18:	4423      	add	r3, r4
 23eae1a:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eae1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23eae22:	4490      	add	r8, r2
  if (MCP_3_exists) {
 23eae24:	4b89      	ldr	r3, [pc, #548]	; (23eb04c <_Z6OBS_Dov+0x157c>)
 23eae26:	781b      	ldrb	r3, [r3, #0]
 23eae28:	2b00      	cmp	r3, #0
 23eae2a:	f000 8571 	beq.w	23eb910 <_Z6OBS_Dov+0x1e40>
    strcpy (obs[oidx].sensor[sidx].id, "gt1");
 23eae2e:	261c      	movs	r6, #28
 23eae30:	fb06 f608 	mul.w	r6, r6, r8
 23eae34:	1970      	adds	r0, r6, r5
 23eae36:	4986      	ldr	r1, [pc, #536]	; (23eb050 <_Z6OBS_Dov+0x1580>)
 23eae38:	4420      	add	r0, r4
 23eae3a:	f011 fcd5 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eae3e:	f640 2398 	movw	r3, #2712	; 0xa98
 23eae42:	9a00      	ldr	r2, [sp, #0]
    t = mcp3.readTempC();
 23eae44:	4883      	ldr	r0, [pc, #524]	; (23eb054 <_Z6OBS_Dov+0x1584>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23eae46:	fb03 6602 	mla	r6, r3, r2, r6
 23eae4a:	2300      	movs	r3, #0
 23eae4c:	4426      	add	r6, r4
 23eae4e:	6233      	str	r3, [r6, #32]
    t = mcp3.readTempC();
 23eae50:	f005 fda8 	bl	23f09a4 <_ZN16Adafruit_MCP98089readTempCEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eae54:	eeb4 0a40 	vcmp.f32	s0, s0
 23eae58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eae5c:	f180 8554 	bvs.w	23eb908 <_Z6OBS_Dov+0x1e38>
 23eae60:	eddf 7a74 	vldr	s15, [pc, #464]	; 23eb034 <_Z6OBS_Dov+0x1564>
 23eae64:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23eae68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eae6c:	f100 854c 	bmi.w	23eb908 <_Z6OBS_Dov+0x1e38>
 23eae70:	eddf 7a71 	vldr	s15, [pc, #452]	; 23eb038 <_Z6OBS_Dov+0x1568>
 23eae74:	eeb4 0a67 	vcmp.f32	s0, s15
 23eae78:	eddf 7a70 	vldr	s15, [pc, #448]	; 23eb03c <_Z6OBS_Dov+0x156c>
 23eae7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eae80:	fe77 8a80 	vselgt.f32	s17, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23eae84:	f640 2398 	movw	r3, #2712	; 0xa98
 23eae88:	9a00      	ldr	r2, [sp, #0]
 23eae8a:	4353      	muls	r3, r2
 23eae8c:	221c      	movs	r2, #28
 23eae8e:	fb02 3308 	mla	r3, r2, r8, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23eae92:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23eae94:	4423      	add	r3, r4
 23eae96:	edc3 8a09 	vstr	s17, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eae9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23eae9e:	4490      	add	r8, r2
  if (MCP_4_exists) {
 23eaea0:	4b6d      	ldr	r3, [pc, #436]	; (23eb058 <_Z6OBS_Dov+0x1588>)
 23eaea2:	781b      	ldrb	r3, [r3, #0]
 23eaea4:	b3c3      	cbz	r3, 23eaf18 <_Z6OBS_Dov+0x1448>
    strcpy (obs[oidx].sensor[sidx].id, "gt2");
 23eaea6:	261c      	movs	r6, #28
 23eaea8:	fb06 f608 	mul.w	r6, r6, r8
 23eaeac:	1970      	adds	r0, r6, r5
 23eaeae:	496b      	ldr	r1, [pc, #428]	; (23eb05c <_Z6OBS_Dov+0x158c>)
 23eaeb0:	4420      	add	r0, r4
 23eaeb2:	f011 fc99 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eaeb6:	f640 2398 	movw	r3, #2712	; 0xa98
 23eaeba:	9a00      	ldr	r2, [sp, #0]
    t = mcp4.readTempC();
 23eaebc:	4868      	ldr	r0, [pc, #416]	; (23eb060 <_Z6OBS_Dov+0x1590>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23eaebe:	fb03 6602 	mla	r6, r3, r2, r6
 23eaec2:	2300      	movs	r3, #0
 23eaec4:	4426      	add	r6, r4
 23eaec6:	6233      	str	r3, [r6, #32]
    t = mcp4.readTempC();
 23eaec8:	f005 fd6c 	bl	23f09a4 <_ZN16Adafruit_MCP98089readTempCEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eaecc:	eeb4 0a40 	vcmp.f32	s0, s0
 23eaed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eaed4:	f180 8520 	bvs.w	23eb918 <_Z6OBS_Dov+0x1e48>
 23eaed8:	eddf 7a56 	vldr	s15, [pc, #344]	; 23eb034 <_Z6OBS_Dov+0x1564>
 23eaedc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23eaee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eaee4:	f100 8518 	bmi.w	23eb918 <_Z6OBS_Dov+0x1e48>
 23eaee8:	eddf 7a53 	vldr	s15, [pc, #332]	; 23eb038 <_Z6OBS_Dov+0x1568>
 23eaeec:	eeb4 0a67 	vcmp.f32	s0, s15
 23eaef0:	eddf 7a52 	vldr	s15, [pc, #328]	; 23eb03c <_Z6OBS_Dov+0x156c>
 23eaef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eaef8:	fe37 0a80 	vselgt.f32	s0, s15, s0
    obs[oidx].sensor[sidx].f_obs = t;
 23eaefc:	f640 2398 	movw	r3, #2712	; 0xa98
 23eaf00:	9a00      	ldr	r2, [sp, #0]
 23eaf02:	4353      	muls	r3, r2
 23eaf04:	221c      	movs	r2, #28
 23eaf06:	fb02 3308 	mla	r3, r2, r8, r3
    obs[oidx].sensor[sidx++].inuse = true;
 23eaf0a:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
 23eaf0c:	4423      	add	r3, r4
 23eaf0e:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eaf12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23eaf16:	4490      	add	r8, r2
  if (VEML7700_exists) {
 23eaf18:	4b52      	ldr	r3, [pc, #328]	; (23eb064 <_Z6OBS_Dov+0x1594>)
 23eaf1a:	781b      	ldrb	r3, [r3, #0]
 23eaf1c:	b37b      	cbz	r3, 23eaf7e <_Z6OBS_Dov+0x14ae>
    float lux = veml.readLux(VEML_LUX_AUTO);
 23eaf1e:	2102      	movs	r1, #2
 23eaf20:	4851      	ldr	r0, [pc, #324]	; (23eb068 <_Z6OBS_Dov+0x1598>)
 23eaf22:	f006 ff6d 	bl	23f1e00 <_ZN17Adafruit_VEML77007readLuxE9luxMethod>
    lux = (isnan(lux) || (lux < QC_MIN_VLX)  || (lux > QC_MAX_VLX))  ? QC_ERR_VLX  : lux;
 23eaf26:	eeb4 0a40 	vcmp.f32	s0, s0
 23eaf2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eaf2e:	f180 84f7 	bvs.w	23eb920 <_Z6OBS_Dov+0x1e50>
 23eaf32:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23eaf36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eaf3a:	f100 84f1 	bmi.w	23eb920 <_Z6OBS_Dov+0x1e50>
 23eaf3e:	eddf 7a4b 	vldr	s15, [pc, #300]	; 23eb06c <_Z6OBS_Dov+0x159c>
 23eaf42:	eeb4 0a67 	vcmp.f32	s0, s15
 23eaf46:	eddf 7a4a 	vldr	s15, [pc, #296]	; 23eb070 <_Z6OBS_Dov+0x15a0>
 23eaf4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eaf4e:	fe37 aa80 	vselgt.f32	s20, s15, s0
    strcpy (obs[oidx].sensor[sidx].id, "vlx");
 23eaf52:	261c      	movs	r6, #28
 23eaf54:	fb06 f608 	mul.w	r6, r6, r8
 23eaf58:	1970      	adds	r0, r6, r5
 23eaf5a:	4946      	ldr	r1, [pc, #280]	; (23eb074 <_Z6OBS_Dov+0x15a4>)
 23eaf5c:	4420      	add	r0, r4
 23eaf5e:	f011 fc43 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eaf62:	f640 2398 	movw	r3, #2712	; 0xa98
 23eaf66:	9a00      	ldr	r2, [sp, #0]
 23eaf68:	fb03 6302 	mla	r3, r3, r2, r6
 23eaf6c:	2200      	movs	r2, #0
 23eaf6e:	4423      	add	r3, r4
 23eaf70:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23eaf72:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = lux;
 23eaf74:	ed83 aa09 	vstr	s20, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eaf78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23eaf7c:	4490      	add	r8, r2
  if (BLX_exists) {
 23eaf7e:	4b3e      	ldr	r3, [pc, #248]	; (23eb078 <_Z6OBS_Dov+0x15a8>)
 23eaf80:	781b      	ldrb	r3, [r3, #0]
 23eaf82:	b36b      	cbz	r3, 23eafe0 <_Z6OBS_Dov+0x1510>
    float lux=blx_takereading();
 23eaf84:	f7fb fe54 	bl	23e6c30 <_Z15blx_takereadingv>
    lux = (isnan(lux) || (lux < QC_MIN_BLX)  || (lux > QC_MAX_BLX))  ? QC_ERR_BLX  : lux;
 23eaf88:	eeb4 0a40 	vcmp.f32	s0, s0
 23eaf8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eaf90:	f180 84ca 	bvs.w	23eb928 <_Z6OBS_Dov+0x1e58>
 23eaf94:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23eaf98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eaf9c:	f100 84c4 	bmi.w	23eb928 <_Z6OBS_Dov+0x1e58>
 23eafa0:	eddf 7a36 	vldr	s15, [pc, #216]	; 23eb07c <_Z6OBS_Dov+0x15ac>
 23eafa4:	eeb4 0a67 	vcmp.f32	s0, s15
 23eafa8:	eddf 7a24 	vldr	s15, [pc, #144]	; 23eb03c <_Z6OBS_Dov+0x156c>
 23eafac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eafb0:	fe37 aa80 	vselgt.f32	s20, s15, s0
    strcpy (obs[oidx].sensor[sidx].id, "blx");
 23eafb4:	261c      	movs	r6, #28
 23eafb6:	fb06 f608 	mul.w	r6, r6, r8
 23eafba:	1970      	adds	r0, r6, r5
 23eafbc:	4930      	ldr	r1, [pc, #192]	; (23eb080 <_Z6OBS_Dov+0x15b0>)
 23eafbe:	4420      	add	r0, r4
 23eafc0:	f011 fc12 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eafc4:	f640 2398 	movw	r3, #2712	; 0xa98
 23eafc8:	9a00      	ldr	r2, [sp, #0]
 23eafca:	fb03 6302 	mla	r3, r3, r2, r6
 23eafce:	2200      	movs	r2, #0
 23eafd0:	4423      	add	r3, r4
 23eafd2:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23eafd4:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = lux;
 23eafd6:	ed83 aa09 	vstr	s20, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eafda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23eafde:	4490      	add	r8, r2
  if (A4_State == A4_STATE_DISTANCE) {
 23eafe0:	4b28      	ldr	r3, [pc, #160]	; (23eb084 <_Z6OBS_Dov+0x15b4>)
 23eafe2:	681f      	ldr	r7, [r3, #0]
 23eafe4:	2f01      	cmp	r7, #1
 23eafe6:	d151      	bne.n	23eb08c <_Z6OBS_Dov+0x15bc>
    strcpy (obs[oidx].sensor[sidx].id, "sg"); // sg = snow or stream
 23eafe8:	261c      	movs	r6, #28
 23eafea:	fb06 f608 	mul.w	r6, r6, r8
 23eafee:	1970      	adds	r0, r6, r5
 23eaff0:	4925      	ldr	r1, [pc, #148]	; (23eb088 <_Z6OBS_Dov+0x15b8>)
 23eaff2:	4420      	add	r0, r4
 23eaff4:	f011 fbf8 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eaff8:	f640 2398 	movw	r3, #2712	; 0xa98
 23eaffc:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23eaffe:	f108 0801 	add.w	r8, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb002:	fb03 6602 	mla	r6, r3, r2, r6
 23eb006:	2300      	movs	r3, #0
 23eb008:	4426      	add	r6, r4
 23eb00a:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = DistanceGauge_Median();
 23eb00c:	f7fc fa18 	bl	23e7440 <_Z20DistanceGauge_Medianv>
 23eb010:	ed86 0a09 	vstr	s0, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eb014:	f886 7030 	strb.w	r7, [r6, #48]	; 0x30
 23eb018:	e038      	b.n	23eb08c <_Z6OBS_Dov+0x15bc>
 23eb01a:	bf00      	nop
 23eb01c:	023fdf94 	.word	0x023fdf94
 23eb020:	023fdf98 	.word	0x023fdf98
 23eb024:	023fdf9c 	.word	0x023fdf9c
 23eb028:	1006a2c8 	.word	0x1006a2c8
 23eb02c:	023fe03b 	.word	0x023fe03b
 23eb030:	1006f0f8 	.word	0x1006f0f8
 23eb034:	c2200000 	.word	0xc2200000
 23eb038:	42700000 	.word	0x42700000
 23eb03c:	c479f99a 	.word	0xc479f99a
 23eb040:	1006a2c9 	.word	0x1006a2c9
 23eb044:	023fe042 	.word	0x023fe042
 23eb048:	1006f104 	.word	0x1006f104
 23eb04c:	1006a2ca 	.word	0x1006a2ca
 23eb050:	023fe241 	.word	0x023fe241
 23eb054:	1006f110 	.word	0x1006f110
 23eb058:	1006a2cb 	.word	0x1006a2cb
 23eb05c:	023fe24c 	.word	0x023fe24c
 23eb060:	1006f11c 	.word	0x1006f11c
 23eb064:	1006a7e8 	.word	0x1006a7e8
 23eb068:	1007ac20 	.word	0x1007ac20
 23eb06c:	47ea6000 	.word	0x47ea6000
 23eb070:	c479c000 	.word	0xc479c000
 23eb074:	023fdfa0 	.word	0x023fdfa0
 23eb078:	1006a280 	.word	0x1006a280
 23eb07c:	48438200 	.word	0x48438200
 23eb080:	023fdfa4 	.word	0x023fdfa4
 23eb084:	1006a25c 	.word	0x1006a25c
 23eb088:	023fdfa8 	.word	0x023fdfa8
  if (A4_State == A4_STATE_RAW) {
 23eb08c:	4bd5      	ldr	r3, [pc, #852]	; (23eb3e4 <_Z6OBS_Dov+0x1914>)
 23eb08e:	681b      	ldr	r3, [r3, #0]
 23eb090:	2b03      	cmp	r3, #3
 23eb092:	f040 844d 	bne.w	23eb930 <_Z6OBS_Dov+0x1e60>
    strcpy (obs[oidx].sensor[sidx].id, "a4r");
 23eb096:	261c      	movs	r6, #28
 23eb098:	fb06 f608 	mul.w	r6, r6, r8
 23eb09c:	1970      	adds	r0, r6, r5
 23eb09e:	49d2      	ldr	r1, [pc, #840]	; (23eb3e8 <_Z6OBS_Dov+0x1918>)
 23eb0a0:	4420      	add	r0, r4
 23eb0a2:	f011 fba1 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb0a6:	f640 2398 	movw	r3, #2712	; 0xa98
 23eb0aa:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx].f_obs = Pin_ReadAvg(A4);
 23eb0ac:	200f      	movs	r0, #15
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb0ae:	fb03 6602 	mla	r6, r3, r2, r6
 23eb0b2:	2300      	movs	r3, #0
 23eb0b4:	4426      	add	r6, r4
 23eb0b6:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = Pin_ReadAvg(A4);
 23eb0b8:	f7fc f988 	bl	23e73cc <_Z11Pin_ReadAvgi>
    obs[oidx].sensor[sidx++].inuse = true;
 23eb0bc:	2301      	movs	r3, #1
    obs[oidx].sensor[sidx].f_obs = Pin_ReadAvg(A4);
 23eb0be:	ed86 0a09 	vstr	s0, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eb0c2:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
 23eb0c6:	4498      	add	r8, r3
  if (A5_State == A5_STATE_RAW) {
 23eb0c8:	4bc8      	ldr	r3, [pc, #800]	; (23eb3ec <_Z6OBS_Dov+0x191c>)
 23eb0ca:	681f      	ldr	r7, [r3, #0]
 23eb0cc:	2f01      	cmp	r7, #1
 23eb0ce:	d118      	bne.n	23eb102 <_Z6OBS_Dov+0x1632>
    strcpy (obs[oidx].sensor[sidx].id, "a5r");
 23eb0d0:	261c      	movs	r6, #28
 23eb0d2:	fb06 f608 	mul.w	r6, r6, r8
 23eb0d6:	1970      	adds	r0, r6, r5
 23eb0d8:	49c5      	ldr	r1, [pc, #788]	; (23eb3f0 <_Z6OBS_Dov+0x1920>)
 23eb0da:	4420      	add	r0, r4
 23eb0dc:	f011 fb84 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb0e0:	f640 2398 	movw	r3, #2712	; 0xa98
 23eb0e4:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx].f_obs = Pin_ReadAvg(A5);
 23eb0e6:	200e      	movs	r0, #14
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb0e8:	fb03 6602 	mla	r6, r3, r2, r6
 23eb0ec:	2300      	movs	r3, #0
 23eb0ee:	4426      	add	r6, r4
 23eb0f0:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = Pin_ReadAvg(A5);
 23eb0f2:	f7fc f96b 	bl	23e73cc <_Z11Pin_ReadAvgi>
 23eb0f6:	ed86 0a09 	vstr	s0, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eb0fa:	f886 7030 	strb.w	r7, [r6, #48]	; 0x30
 23eb0fe:	f108 0801 	add.w	r8, r8, #1
  if (PM25AQI_exists) {
 23eb102:	4bbc      	ldr	r3, [pc, #752]	; (23eb3f4 <_Z6OBS_Dov+0x1924>)
 23eb104:	781b      	ldrb	r3, [r3, #0]
 23eb106:	2b00      	cmp	r3, #0
 23eb108:	f000 8087 	beq.w	23eb21a <_Z6OBS_Dov+0x174a>
    strcpy (obs[oidx].sensor[sidx].id, "pm1s10");
 23eb10c:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx].type = I_OBS;
 23eb110:	f640 2698 	movw	r6, #2712	; 0xa98
 23eb114:	f04f 0b01 	mov.w	fp, #1
 23eb118:	fb0a f708 	mul.w	r7, sl, r8
    strcpy (obs[oidx].sensor[sidx].id, "pm1s10");
 23eb11c:	19e8      	adds	r0, r5, r7
 23eb11e:	49b6      	ldr	r1, [pc, #728]	; (23eb3f8 <_Z6OBS_Dov+0x1928>)
 23eb120:	4420      	add	r0, r4
 23eb122:	f011 fb61 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23eb126:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s10;
 23eb128:	f8df 9320 	ldr.w	r9, [pc, #800]	; 23eb44c <_Z6OBS_Dov+0x197c>
    obs[oidx].sensor[sidx].type = I_OBS;
 23eb12c:	435e      	muls	r6, r3
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
 23eb12e:	eb07 000a 	add.w	r0, r7, sl
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s10;
 23eb132:	f8b9 3000 	ldrh.w	r3, [r9]
    obs[oidx].sensor[sidx].type = I_OBS;
 23eb136:	19ba      	adds	r2, r7, r6
 23eb138:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
 23eb13a:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s10;
 23eb13c:	6293      	str	r3, [r2, #40]	; 0x28
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
 23eb13e:	49af      	ldr	r1, [pc, #700]	; (23eb3fc <_Z6OBS_Dov+0x192c>)
    obs[oidx].sensor[sidx++].inuse = true;
 23eb140:	eb08 030b 	add.w	r3, r8, fp
    obs[oidx].sensor[sidx].type = I_OBS;
 23eb144:	f8c2 b020 	str.w	fp, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb148:	f882 b030 	strb.w	fp, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
 23eb14c:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23eb14e:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
 23eb150:	f011 fb4a 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23eb154:	9b01      	ldr	r3, [sp, #4]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s25;
 23eb156:	f8b9 2002 	ldrh.w	r2, [r9, #2]
    obs[oidx].sensor[sidx].type = I_OBS;
 23eb15a:	fb0a 6303 	mla	r3, sl, r3, r6
    strcpy (obs[oidx].sensor[sidx].id, "pm1s100");
 23eb15e:	f107 0038 	add.w	r0, r7, #56	; 0x38
    obs[oidx].sensor[sidx].type = I_OBS;
 23eb162:	4423      	add	r3, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1s100");
 23eb164:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s25;
 23eb166:	629a      	str	r2, [r3, #40]	; 0x28
    strcpy (obs[oidx].sensor[sidx].id, "pm1s100");
 23eb168:	49a5      	ldr	r1, [pc, #660]	; (23eb400 <_Z6OBS_Dov+0x1930>)
    obs[oidx].sensor[sidx++].inuse = true;
 23eb16a:	f108 0202 	add.w	r2, r8, #2
    obs[oidx].sensor[sidx].type = I_OBS;
 23eb16e:	f8c3 b020 	str.w	fp, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb172:	f883 b030 	strb.w	fp, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1s100");
 23eb176:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23eb178:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1s100");
 23eb17a:	f011 fb35 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23eb17e:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s100;
 23eb180:	f8b9 3004 	ldrh.w	r3, [r9, #4]
    obs[oidx].sensor[sidx].type = I_OBS;
 23eb184:	fb0a 6202 	mla	r2, sl, r2, r6
    strcpy (obs[oidx].sensor[sidx].id, "pm1e10");
 23eb188:	f107 0054 	add.w	r0, r7, #84	; 0x54
    obs[oidx].sensor[sidx].type = I_OBS;
 23eb18c:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1e10");
 23eb18e:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s100;
 23eb190:	6293      	str	r3, [r2, #40]	; 0x28
    strcpy (obs[oidx].sensor[sidx].id, "pm1e10");
 23eb192:	499c      	ldr	r1, [pc, #624]	; (23eb404 <_Z6OBS_Dov+0x1934>)
    obs[oidx].sensor[sidx++].inuse = true;
 23eb194:	f108 0303 	add.w	r3, r8, #3
    obs[oidx].sensor[sidx].type = I_OBS;
 23eb198:	f8c2 b020 	str.w	fp, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb19c:	f882 b030 	strb.w	fp, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1e10");
 23eb1a0:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23eb1a2:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1e10");
 23eb1a4:	f011 fb20 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23eb1a8:	9b01      	ldr	r3, [sp, #4]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e10;
 23eb1aa:	f8b9 2006 	ldrh.w	r2, [r9, #6]
    obs[oidx].sensor[sidx].type = I_OBS;
 23eb1ae:	fb0a 6303 	mla	r3, sl, r3, r6
    strcpy (obs[oidx].sensor[sidx].id, "pm1e25");
 23eb1b2:	f107 0070 	add.w	r0, r7, #112	; 0x70
    obs[oidx].sensor[sidx].type = I_OBS;
 23eb1b6:	4423      	add	r3, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1e25");
 23eb1b8:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e10;
 23eb1ba:	629a      	str	r2, [r3, #40]	; 0x28
    strcpy (obs[oidx].sensor[sidx].id, "pm1e25");
 23eb1bc:	4992      	ldr	r1, [pc, #584]	; (23eb408 <_Z6OBS_Dov+0x1938>)
    obs[oidx].sensor[sidx++].inuse = true;
 23eb1be:	f108 0204 	add.w	r2, r8, #4
    obs[oidx].sensor[sidx].type = I_OBS;
 23eb1c2:	f8c3 b020 	str.w	fp, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb1c6:	f883 b030 	strb.w	fp, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1e25");
 23eb1ca:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23eb1cc:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1e25");
 23eb1ce:	f011 fb0b 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23eb1d2:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e25;
 23eb1d4:	f8b9 3008 	ldrh.w	r3, [r9, #8]
    obs[oidx].sensor[sidx].type = I_OBS;
 23eb1d8:	fb0a 6202 	mla	r2, sl, r2, r6
    strcpy (obs[oidx].sensor[sidx].id, "pm1e100");
 23eb1dc:	f107 008c 	add.w	r0, r7, #140	; 0x8c
    obs[oidx].sensor[sidx].type = I_OBS;
 23eb1e0:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1e100");
 23eb1e2:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e25;
 23eb1e4:	6293      	str	r3, [r2, #40]	; 0x28
    strcpy (obs[oidx].sensor[sidx].id, "pm1e100");
 23eb1e6:	4989      	ldr	r1, [pc, #548]	; (23eb40c <_Z6OBS_Dov+0x193c>)
    obs[oidx].sensor[sidx++].inuse = true;
 23eb1e8:	f108 0305 	add.w	r3, r8, #5
    obs[oidx].sensor[sidx].type = I_OBS;
 23eb1ec:	f8c2 b020 	str.w	fp, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb1f0:	f882 b030 	strb.w	fp, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1e100");
 23eb1f4:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23eb1f6:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1e100");
 23eb1f8:	f011 faf6 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
 23eb1fc:	9b01      	ldr	r3, [sp, #4]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb1fe:	f108 0806 	add.w	r8, r8, #6
    obs[oidx].sensor[sidx].type = I_OBS;
 23eb202:	fb0a 6603 	mla	r6, sl, r3, r6
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e100;
 23eb206:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    obs[oidx].sensor[sidx].type = I_OBS;
 23eb20a:	4426      	add	r6, r4
 23eb20c:	f8c6 b020 	str.w	fp, [r6, #32]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e100;
 23eb210:	62b3      	str	r3, [r6, #40]	; 0x28
    obs[oidx].sensor[sidx++].inuse = true;
 23eb212:	f886 b030 	strb.w	fp, [r6, #48]	; 0x30
    pm25aqi_clear();
 23eb216:	f7fb fd61 	bl	23e6cdc <_Z13pm25aqi_clearv>
  if (HI_exists) {
 23eb21a:	4b7d      	ldr	r3, [pc, #500]	; (23eb410 <_Z6OBS_Dov+0x1940>)
 23eb21c:	781b      	ldrb	r3, [r3, #0]
 23eb21e:	2b00      	cmp	r3, #0
 23eb220:	f000 83d0 	beq.w	23eb9c4 <_Z6OBS_Dov+0x1ef4>
    strcpy (obs[oidx].sensor[sidx].id, "hi");
 23eb224:	261c      	movs	r6, #28
    heat_index = hi_calculate(sht1_temp, sht1_humid);
 23eb226:	eef0 0a69 	vmov.f32	s1, s19
 23eb22a:	eeb0 0a48 	vmov.f32	s0, s16
 23eb22e:	f7fb f96b 	bl	23e6508 <_Z12hi_calculateff>
    strcpy (obs[oidx].sensor[sidx].id, "hi");
 23eb232:	fb06 f608 	mul.w	r6, r6, r8
 23eb236:	1970      	adds	r0, r6, r5
 23eb238:	4976      	ldr	r1, [pc, #472]	; (23eb414 <_Z6OBS_Dov+0x1944>)
 23eb23a:	4420      	add	r0, r4
    heat_index = hi_calculate(sht1_temp, sht1_humid);
 23eb23c:	ee10 7a10 	vmov	r7, s0
    strcpy (obs[oidx].sensor[sidx].id, "hi");
 23eb240:	f011 fad2 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb244:	f640 2398 	movw	r3, #2712	; 0xa98
 23eb248:	9a00      	ldr	r2, [sp, #0]
 23eb24a:	fb03 6302 	mla	r3, r3, r2, r6
 23eb24e:	2200      	movs	r2, #0
 23eb250:	4423      	add	r3, r4
 23eb252:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;    
 23eb254:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = (float) heat_index;
 23eb256:	625f      	str	r7, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;    
 23eb258:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23eb25c:	4490      	add	r8, r2
  if (WBT_exists) {
 23eb25e:	4b6e      	ldr	r3, [pc, #440]	; (23eb418 <_Z6OBS_Dov+0x1948>)
 23eb260:	781b      	ldrb	r3, [r3, #0]
 23eb262:	2b00      	cmp	r3, #0
 23eb264:	f000 83b0 	beq.w	23eb9c8 <_Z6OBS_Dov+0x1ef8>
    wetbulb_temp = wbt_calculate(sht1_temp, sht1_humid);
 23eb268:	ee19 0a90 	vmov	r0, s19
 23eb26c:	f7f8 fa1c 	bl	23e36a8 <__aeabi_f2d>
 23eb270:	ec41 0b19 	vmov	d9, r0, r1
 23eb274:	ee18 0a10 	vmov	r0, s16
 23eb278:	f7f8 fa16 	bl	23e36a8 <__aeabi_f2d>
 23eb27c:	eeb0 1a49 	vmov.f32	s2, s18
 23eb280:	eef0 1a69 	vmov.f32	s3, s19
 23eb284:	ec41 0b10 	vmov	d0, r0, r1
 23eb288:	f7fb f856 	bl	23e6338 <_Z13wbt_calculatedd>
    strcpy (obs[oidx].sensor[sidx].id, "wbt");
 23eb28c:	261c      	movs	r6, #28
    wetbulb_temp = wbt_calculate(sht1_temp, sht1_humid);
 23eb28e:	ec51 0b10 	vmov	r0, r1, d0
 23eb292:	f7f8 fd59 	bl	23e3d48 <__aeabi_d2f>
    strcpy (obs[oidx].sensor[sidx].id, "wbt");
 23eb296:	fb06 f608 	mul.w	r6, r6, r8
    wetbulb_temp = wbt_calculate(sht1_temp, sht1_humid);
 23eb29a:	4681      	mov	r9, r0
    strcpy (obs[oidx].sensor[sidx].id, "wbt");
 23eb29c:	1970      	adds	r0, r6, r5
 23eb29e:	4420      	add	r0, r4
 23eb2a0:	495e      	ldr	r1, [pc, #376]	; (23eb41c <_Z6OBS_Dov+0x194c>)
 23eb2a2:	f011 faa1 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb2a6:	f640 2398 	movw	r3, #2712	; 0xa98
 23eb2aa:	9a00      	ldr	r2, [sp, #0]
 23eb2ac:	fb03 6602 	mla	r6, r3, r2, r6
 23eb2b0:	2300      	movs	r3, #0
 23eb2b2:	4434      	add	r4, r6
 23eb2b4:	6223      	str	r3, [r4, #32]
    obs[oidx].sensor[sidx++].inuse = true;  
 23eb2b6:	2301      	movs	r3, #1
    obs[oidx].sensor[sidx].f_obs = (float) wetbulb_temp;
 23eb2b8:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;  
 23eb2bc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 23eb2c0:	4498      	add	r8, r3
  if (WBGT_exists) {
 23eb2c2:	4b57      	ldr	r3, [pc, #348]	; (23eb420 <_Z6OBS_Dov+0x1950>)
 23eb2c4:	4c57      	ldr	r4, [pc, #348]	; (23eb424 <_Z6OBS_Dov+0x1954>)
 23eb2c6:	781b      	ldrb	r3, [r3, #0]
 23eb2c8:	2b00      	cmp	r3, #0
 23eb2ca:	d039      	beq.n	23eb340 <_Z6OBS_Dov+0x1870>
    if (MCP_3_exists) {
 23eb2cc:	4b56      	ldr	r3, [pc, #344]	; (23eb428 <_Z6OBS_Dov+0x1958>)
 23eb2ce:	781b      	ldrb	r3, [r3, #0]
 23eb2d0:	2b00      	cmp	r3, #0
 23eb2d2:	f000 837c 	beq.w	23eb9ce <_Z6OBS_Dov+0x1efe>
      wbgt = wbgt_using_wbt(sht1_temp, mcp3_temp, wetbulb_temp); // TempAir, TempGlobe, TempWetBulb
 23eb2d6:	4648      	mov	r0, r9
 23eb2d8:	f7f8 f9e6 	bl	23e36a8 <__aeabi_f2d>
 23eb2dc:	ec41 0b1a 	vmov	d10, r0, r1
 23eb2e0:	ee18 0a90 	vmov	r0, s17
 23eb2e4:	f7f8 f9e0 	bl	23e36a8 <__aeabi_f2d>
 23eb2e8:	ec41 0b19 	vmov	d9, r0, r1
 23eb2ec:	ee18 0a10 	vmov	r0, s16
 23eb2f0:	f7f8 f9da 	bl	23e36a8 <__aeabi_f2d>
 23eb2f4:	eeb0 2a4a 	vmov.f32	s4, s20
 23eb2f8:	eef0 2a6a 	vmov.f32	s5, s21
 23eb2fc:	eeb0 1a49 	vmov.f32	s2, s18
 23eb300:	eef0 1a69 	vmov.f32	s3, s19
 23eb304:	ec41 0b10 	vmov	d0, r0, r1
 23eb308:	f7fb fb2a 	bl	23e6960 <_Z14wbgt_using_wbtddd>
    strcpy (obs[oidx].sensor[sidx].id, "wbgt");
 23eb30c:	261c      	movs	r6, #28
      wbgt = wbgt_using_hi(heat_index);
 23eb30e:	ec51 0b10 	vmov	r0, r1, d0
 23eb312:	f7f8 fd19 	bl	23e3d48 <__aeabi_d2f>
    strcpy (obs[oidx].sensor[sidx].id, "wbgt");
 23eb316:	fb06 f608 	mul.w	r6, r6, r8
      wbgt = wbgt_using_hi(heat_index);
 23eb31a:	4607      	mov	r7, r0
    strcpy (obs[oidx].sensor[sidx].id, "wbgt");
 23eb31c:	1970      	adds	r0, r6, r5
 23eb31e:	4943      	ldr	r1, [pc, #268]	; (23eb42c <_Z6OBS_Dov+0x195c>)
 23eb320:	4420      	add	r0, r4
 23eb322:	f011 fa61 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb326:	f640 2398 	movw	r3, #2712	; 0xa98
 23eb32a:	9a00      	ldr	r2, [sp, #0]
 23eb32c:	fb03 6302 	mla	r3, r3, r2, r6
 23eb330:	2200      	movs	r2, #0
 23eb332:	4423      	add	r3, r4
 23eb334:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;    
 23eb336:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = (float) wbgt;
 23eb338:	625f      	str	r7, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;    
 23eb33a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 23eb33e:	4490      	add	r8, r2
  if (TLW_exists) {
 23eb340:	4b3b      	ldr	r3, [pc, #236]	; (23eb430 <_Z6OBS_Dov+0x1960>)
 23eb342:	781b      	ldrb	r3, [r3, #0]
 23eb344:	2b00      	cmp	r3, #0
 23eb346:	f000 808c 	beq.w	23eb462 <_Z6OBS_Dov+0x1992>
    tlw.newReading();
 23eb34a:	483a      	ldr	r0, [pc, #232]	; (23eb434 <_Z6OBS_Dov+0x1964>)
 23eb34c:	f006 fdfe 	bl	23f1f4c <_ZN8LeafSens10newReadingEv>
    delay(100);
 23eb350:	2064      	movs	r0, #100	; 0x64
 23eb352:	f00c f969 	bl	23f7628 <delay>
    float w = tlw.getWet();
 23eb356:	4837      	ldr	r0, [pc, #220]	; (23eb434 <_Z6OBS_Dov+0x1964>)
 23eb358:	f006 fe0e 	bl	23f1f78 <_ZN8LeafSens6getWetEv>
    float t = tlw.getTemp();
 23eb35c:	4835      	ldr	r0, [pc, #212]	; (23eb434 <_Z6OBS_Dov+0x1964>)
    float w = tlw.getWet();
 23eb35e:	eef0 8a40 	vmov.f32	s17, s0
    float t = tlw.getTemp();
 23eb362:	f006 fe1b 	bl	23f1f9c <_ZN8LeafSens7getTempEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb366:	eeb4 0a40 	vcmp.f32	s0, s0
 23eb36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb36e:	f180 8336 	bvs.w	23eb9de <_Z6OBS_Dov+0x1f0e>
 23eb372:	eddf 7a31 	vldr	s15, [pc, #196]	; 23eb438 <_Z6OBS_Dov+0x1968>
 23eb376:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23eb37a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb37e:	f100 832e 	bmi.w	23eb9de <_Z6OBS_Dov+0x1f0e>
 23eb382:	eddf 7a2e 	vldr	s15, [pc, #184]	; 23eb43c <_Z6OBS_Dov+0x196c>
 23eb386:	eeb4 0a67 	vcmp.f32	s0, s15
 23eb38a:	eddf 7a2d 	vldr	s15, [pc, #180]	; 23eb440 <_Z6OBS_Dov+0x1970>
 23eb38e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb392:	fe37 8a80 	vselgt.f32	s16, s15, s0
    strcpy (obs[oidx].sensor[sidx].id, "tlww");
 23eb396:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb39a:	f640 2698 	movw	r6, #2712	; 0xa98
 23eb39e:	f04f 0900 	mov.w	r9, #0
    obs[oidx].sensor[sidx++].inuse = true; 
 23eb3a2:	2701      	movs	r7, #1
 23eb3a4:	fb0a f208 	mul.w	r2, sl, r8
    strcpy (obs[oidx].sensor[sidx].id, "tlww");
 23eb3a8:	18a8      	adds	r0, r5, r2
 23eb3aa:	4926      	ldr	r1, [pc, #152]	; (23eb444 <_Z6OBS_Dov+0x1974>)
 23eb3ac:	4420      	add	r0, r4
 23eb3ae:	9201      	str	r2, [sp, #4]
 23eb3b0:	f011 fa1a 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb3b4:	9b00      	ldr	r3, [sp, #0]
 23eb3b6:	9a01      	ldr	r2, [sp, #4]
 23eb3b8:	435e      	muls	r6, r3
    strcpy (obs[oidx].sensor[sidx].id, "tlwt");
 23eb3ba:	eb02 000a 	add.w	r0, r2, sl
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb3be:	1993      	adds	r3, r2, r6
 23eb3c0:	4423      	add	r3, r4
    strcpy (obs[oidx].sensor[sidx].id, "tlwt");
 23eb3c2:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = (float) w;
 23eb3c4:	edc3 8a09 	vstr	s17, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb3c8:	f8c3 9020 	str.w	r9, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true; 
 23eb3cc:	f108 0b01 	add.w	fp, r8, #1
 23eb3d0:	f883 7030 	strb.w	r7, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tlwt");
 23eb3d4:	491c      	ldr	r1, [pc, #112]	; (23eb448 <_Z6OBS_Dov+0x1978>)
 23eb3d6:	4420      	add	r0, r4
 23eb3d8:	f011 fa06 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb3dc:	fb0a 630b 	mla	r3, sl, fp, r6
 23eb3e0:	e036      	b.n	23eb450 <_Z6OBS_Dov+0x1980>
 23eb3e2:	bf00      	nop
 23eb3e4:	1006a25c 	.word	0x1006a25c
 23eb3e8:	023fdfab 	.word	0x023fdfab
 23eb3ec:	1006a260 	.word	0x1006a260
 23eb3f0:	023fdfbd 	.word	0x023fdfbd
 23eb3f4:	1006a2cd 	.word	0x1006a2cd
 23eb3f8:	023fdfc1 	.word	0x023fdfc1
 23eb3fc:	023fdfc8 	.word	0x023fdfc8
 23eb400:	023fdfcf 	.word	0x023fdfcf
 23eb404:	023fdfd7 	.word	0x023fdfd7
 23eb408:	023fdfde 	.word	0x023fdfde
 23eb40c:	023fdfe5 	.word	0x023fdfe5
 23eb410:	1006a2af 	.word	0x1006a2af
 23eb414:	023fdfed 	.word	0x023fdfed
 23eb418:	1006a7ea 	.word	0x1006a7ea
 23eb41c:	023fdff0 	.word	0x023fdff0
 23eb420:	1006a7e9 	.word	0x1006a7e9
 23eb424:	1006f550 	.word	0x1006f550
 23eb428:	1006a2ca 	.word	0x1006a2ca
 23eb42c:	023fdff4 	.word	0x023fdff4
 23eb430:	1006a7e4 	.word	0x1006a7e4
 23eb434:	1007ac00 	.word	0x1007ac00
 23eb438:	c2200000 	.word	0xc2200000
 23eb43c:	42700000 	.word	0x42700000
 23eb440:	c479f99a 	.word	0xc479f99a
 23eb444:	023fdff9 	.word	0x023fdff9
 23eb448:	023fdffe 	.word	0x023fdffe
 23eb44c:	1007aa24 	.word	0x1007aa24
 23eb450:	4423      	add	r3, r4
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23eb452:	ed83 8a09 	vstr	s16, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb456:	f8c3 9020 	str.w	r9, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb45a:	f108 0802 	add.w	r8, r8, #2
 23eb45e:	f883 7030 	strb.w	r7, [r3, #48]	; 0x30
  if (TSM_exists) {
 23eb462:	4bd7      	ldr	r3, [pc, #860]	; (23eb7c0 <_Z6OBS_Dov+0x1cf0>)
 23eb464:	781b      	ldrb	r3, [r3, #0]
 23eb466:	2b00      	cmp	r3, #0
 23eb468:	d07f      	beq.n	23eb56a <_Z6OBS_Dov+0x1a9a>
    tsm.newReading();
 23eb46a:	48d6      	ldr	r0, [pc, #856]	; (23eb7c4 <_Z6OBS_Dov+0x1cf4>)
 23eb46c:	f008 fe03 	bl	23f4076 <_ZN5SVCS310newReadingEv>
    delay(100);
 23eb470:	2064      	movs	r0, #100	; 0x64
 23eb472:	f00c f8d9 	bl	23f7628 <delay>
    float e25 = tsm.getE25();
 23eb476:	48d3      	ldr	r0, [pc, #844]	; (23eb7c4 <_Z6OBS_Dov+0x1cf4>)
 23eb478:	f008 fe14 	bl	23f40a4 <_ZN5SVCS36getE25Ev>
    float ec = tsm.getEC();
 23eb47c:	48d1      	ldr	r0, [pc, #836]	; (23eb7c4 <_Z6OBS_Dov+0x1cf4>)
    float e25 = tsm.getE25();
 23eb47e:	eef0 9a40 	vmov.f32	s19, s0
    float ec = tsm.getEC();
 23eb482:	f008 fe21 	bl	23f40c8 <_ZN5SVCS35getECEv>
    float vwc = tsm.getVWC();
 23eb486:	48cf      	ldr	r0, [pc, #828]	; (23eb7c4 <_Z6OBS_Dov+0x1cf4>)
    float ec = tsm.getEC();
 23eb488:	eeb0 9a40 	vmov.f32	s18, s0
    float vwc = tsm.getVWC();
 23eb48c:	f008 fe40 	bl	23f4110 <_ZN5SVCS36getVWCEv>
    float t = tsm.getTemp();
 23eb490:	48cc      	ldr	r0, [pc, #816]	; (23eb7c4 <_Z6OBS_Dov+0x1cf4>)
    float vwc = tsm.getVWC();
 23eb492:	eef0 8a40 	vmov.f32	s17, s0
    float t = tsm.getTemp();
 23eb496:	f008 fe29 	bl	23f40ec <_ZN5SVCS37getTempEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb49a:	eeb4 0a40 	vcmp.f32	s0, s0
 23eb49e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb4a2:	f180 829f 	bvs.w	23eb9e4 <_Z6OBS_Dov+0x1f14>
 23eb4a6:	eddf 7ac8 	vldr	s15, [pc, #800]	; 23eb7c8 <_Z6OBS_Dov+0x1cf8>
 23eb4aa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23eb4ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb4b2:	f100 8297 	bmi.w	23eb9e4 <_Z6OBS_Dov+0x1f14>
 23eb4b6:	eddf 7ac5 	vldr	s15, [pc, #788]	; 23eb7cc <_Z6OBS_Dov+0x1cfc>
 23eb4ba:	eeb4 0a67 	vcmp.f32	s0, s15
 23eb4be:	eddf 7ad8 	vldr	s15, [pc, #864]	; 23eb820 <_Z6OBS_Dov+0x1d50>
 23eb4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb4c6:	fe37 8a80 	vselgt.f32	s16, s15, s0
    strcpy (obs[oidx].sensor[sidx].id, "tsme25");
 23eb4ca:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb4ce:	f640 2698 	movw	r6, #2712	; 0xa98
 23eb4d2:	fb0a f908 	mul.w	r9, sl, r8
    strcpy (obs[oidx].sensor[sidx].id, "tsme25");
 23eb4d6:	eb05 0009 	add.w	r0, r5, r9
 23eb4da:	49bd      	ldr	r1, [pc, #756]	; (23eb7d0 <_Z6OBS_Dov+0x1d00>)
 23eb4dc:	4420      	add	r0, r4
 23eb4de:	f011 f983 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb4e2:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb4e4:	2701      	movs	r7, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb4e6:	435e      	muls	r6, r3
 23eb4e8:	2300      	movs	r3, #0
 23eb4ea:	eb09 0206 	add.w	r2, r9, r6
    strcpy (obs[oidx].sensor[sidx].id, "tsmec");
 23eb4ee:	eb09 000a 	add.w	r0, r9, sl
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb4f2:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "tsmec");
 23eb4f4:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb4f6:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = (float) e25;
 23eb4f8:	edc2 9a09 	vstr	s19, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "tsmec");
 23eb4fc:	49b5      	ldr	r1, [pc, #724]	; (23eb7d4 <_Z6OBS_Dov+0x1d04>)
    obs[oidx].sensor[sidx++].inuse = true;
 23eb4fe:	f882 7030 	strb.w	r7, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tsmec");
 23eb502:	4420      	add	r0, r4
 23eb504:	f011 f970 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb508:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23eb50a:	f108 0b01 	add.w	fp, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb50e:	fb0a 620b 	mla	r2, sl, fp, r6
    strcpy (obs[oidx].sensor[sidx].id, "tsmvwc");
 23eb512:	f109 0038 	add.w	r0, r9, #56	; 0x38
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb516:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "tsmvwc");
 23eb518:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb51a:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = (float) ec;
 23eb51c:	ed82 9a09 	vstr	s18, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "tsmvwc");
 23eb520:	49ad      	ldr	r1, [pc, #692]	; (23eb7d8 <_Z6OBS_Dov+0x1d08>)
    obs[oidx].sensor[sidx++].inuse = true;
 23eb522:	f882 7030 	strb.w	r7, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tsmvwc");
 23eb526:	4420      	add	r0, r4
 23eb528:	f011 f95e 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb52c:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23eb52e:	f108 0b02 	add.w	fp, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb532:	fb0a 620b 	mla	r2, sl, fp, r6
    obs[oidx].sensor[sidx++].inuse = true; 
 23eb536:	f108 0b03 	add.w	fp, r8, #3
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb53a:	fb0a 660b 	mla	r6, sl, fp, r6
    strcpy (obs[oidx].sensor[sidx].id, "tsmt");
 23eb53e:	f109 0054 	add.w	r0, r9, #84	; 0x54
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb542:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "tsmt");
 23eb544:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb546:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = (float) vwc;
 23eb548:	edc2 8a09 	vstr	s17, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "tsmt");
 23eb54c:	49a3      	ldr	r1, [pc, #652]	; (23eb7dc <_Z6OBS_Dov+0x1d0c>)
    obs[oidx].sensor[sidx++].inuse = true; 
 23eb54e:	f882 7030 	strb.w	r7, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tsmt");
 23eb552:	4420      	add	r0, r4
 23eb554:	f011 f948 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb558:	4426      	add	r6, r4
 23eb55a:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23eb55c:	ed86 8a09 	vstr	s16, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb560:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb562:	f108 0804 	add.w	r8, r8, #4
 23eb566:	f886 7030 	strb.w	r7, [r6, #48]	; 0x30
  if (TMSM_exists) {
 23eb56a:	4b9d      	ldr	r3, [pc, #628]	; (23eb7e0 <_Z6OBS_Dov+0x1d10>)
 23eb56c:	4f9d      	ldr	r7, [pc, #628]	; (23eb7e4 <_Z6OBS_Dov+0x1d14>)
 23eb56e:	781b      	ldrb	r3, [r3, #0]
 23eb570:	2b00      	cmp	r3, #0
 23eb572:	f000 80c6 	beq.w	23eb702 <_Z6OBS_Dov+0x1c32>
    tmsm.newReading();
 23eb576:	f04f 0a1c 	mov.w	sl, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb57a:	f640 2998 	movw	r9, #2712	; 0xa98
 23eb57e:	fb0a f608 	mul.w	r6, sl, r8
    tmsm.newReading();
 23eb582:	4899      	ldr	r0, [pc, #612]	; (23eb7e8 <_Z6OBS_Dov+0x1d18>)
 23eb584:	f008 fe11 	bl	23f41aa <_ZN7SVMULTI10newReadingEv>
    delay(100);
 23eb588:	2064      	movs	r0, #100	; 0x64
 23eb58a:	f00c f84d 	bl	23f7628 <delay>
    tmsm.getData(&multi);
 23eb58e:	4896      	ldr	r0, [pc, #600]	; (23eb7e8 <_Z6OBS_Dov+0x1d18>)
 23eb590:	a90c      	add	r1, sp, #48	; 0x30
 23eb592:	f008 fe45 	bl	23f4220 <_ZN7SVMULTI7getDataEP10soil_ret_t>
    strcpy (obs[oidx].sensor[sidx].id, "tmsms1");
 23eb596:	19a8      	adds	r0, r5, r6
 23eb598:	4994      	ldr	r1, [pc, #592]	; (23eb7ec <_Z6OBS_Dov+0x1d1c>)
 23eb59a:	4420      	add	r0, r4
 23eb59c:	f011 f924 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb5a0:	2200      	movs	r2, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23eb5a2:	f04f 0b01 	mov.w	fp, #1
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb5a6:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms2");
 23eb5a8:	eb06 000a 	add.w	r0, r6, sl
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb5ac:	fb09 f903 	mul.w	r9, r9, r3
 23eb5b0:	eb06 0309 	add.w	r3, r6, r9
 23eb5b4:	4423      	add	r3, r4
 23eb5b6:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[0];
 23eb5b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    strcpy (obs[oidx].sensor[sidx].id, "tmsms2");
 23eb5ba:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[0];
 23eb5bc:	625a      	str	r2, [r3, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "tmsms2");
 23eb5be:	498c      	ldr	r1, [pc, #560]	; (23eb7f0 <_Z6OBS_Dov+0x1d20>)
    obs[oidx].sensor[sidx++].inuse = true;
 23eb5c0:	f108 0201 	add.w	r2, r8, #1
 23eb5c4:	f883 b030 	strb.w	fp, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tmsms2");
 23eb5c8:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23eb5ca:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms2");
 23eb5cc:	f011 f90c 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb5d0:	2300      	movs	r3, #0
 23eb5d2:	9a01      	ldr	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms3");
 23eb5d4:	f106 0038 	add.w	r0, r6, #56	; 0x38
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb5d8:	fb0a 9202 	mla	r2, sl, r2, r9
 23eb5dc:	4422      	add	r2, r4
 23eb5de:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[1];
 23eb5e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
    strcpy (obs[oidx].sensor[sidx].id, "tmsms3");
 23eb5e2:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[1];
 23eb5e4:	6253      	str	r3, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "tmsms3");
 23eb5e6:	4983      	ldr	r1, [pc, #524]	; (23eb7f4 <_Z6OBS_Dov+0x1d24>)
    obs[oidx].sensor[sidx++].inuse = true;
 23eb5e8:	f108 0302 	add.w	r3, r8, #2
 23eb5ec:	f882 b030 	strb.w	fp, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tmsms3");
 23eb5f0:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23eb5f2:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms3");
 23eb5f4:	f011 f8f8 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb5f8:	2200      	movs	r2, #0
 23eb5fa:	9b01      	ldr	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms4");
 23eb5fc:	f106 0054 	add.w	r0, r6, #84	; 0x54
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb600:	fb0a 9303 	mla	r3, sl, r3, r9
 23eb604:	4423      	add	r3, r4
 23eb606:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[2];
 23eb608:	9a15      	ldr	r2, [sp, #84]	; 0x54
    strcpy (obs[oidx].sensor[sidx].id, "tmsms4");
 23eb60a:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[2];
 23eb60c:	625a      	str	r2, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eb60e:	f883 b030 	strb.w	fp, [r3, #48]	; 0x30
 23eb612:	f108 0203 	add.w	r2, r8, #3
    strcpy (obs[oidx].sensor[sidx].id, "tmsms4");
 23eb616:	4420      	add	r0, r4
 23eb618:	4977      	ldr	r1, [pc, #476]	; (23eb7f8 <_Z6OBS_Dov+0x1d28>)
    obs[oidx].sensor[sidx++].inuse = true;
 23eb61a:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms4");
 23eb61c:	f011 f8e4 	bl	23fc7e8 <strcpy>
    t = multi.temp[0];
 23eb620:	ed9d 8a0c 	vldr	s16, [sp, #48]	; 0x30
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb624:	eeb4 8a48 	vcmp.f32	s16, s16
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb628:	2300      	movs	r3, #0
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb62a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb62e:	9a01      	ldr	r2, [sp, #4]
 23eb630:	fb0a 9902 	mla	r9, sl, r2, r9
 23eb634:	444c      	add	r4, r9
 23eb636:	6223      	str	r3, [r4, #32]
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[3];
 23eb638:	9b16      	ldr	r3, [sp, #88]	; 0x58
    obs[oidx].sensor[sidx++].inuse = true;
 23eb63a:	f108 0904 	add.w	r9, r8, #4
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[3];
 23eb63e:	6263      	str	r3, [r4, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eb640:	f884 b030 	strb.w	fp, [r4, #48]	; 0x30
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb644:	f180 81d1 	bvs.w	23eb9ea <_Z6OBS_Dov+0x1f1a>
 23eb648:	eddf 7a5f 	vldr	s15, [pc, #380]	; 23eb7c8 <_Z6OBS_Dov+0x1cf8>
 23eb64c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23eb650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb654:	f100 81c9 	bmi.w	23eb9ea <_Z6OBS_Dov+0x1f1a>
 23eb658:	eddf 7a5c 	vldr	s15, [pc, #368]	; 23eb7cc <_Z6OBS_Dov+0x1cfc>
 23eb65c:	eeb4 8a67 	vcmp.f32	s16, s15
 23eb660:	eddf 7a6f 	vldr	s15, [pc, #444]	; 23eb820 <_Z6OBS_Dov+0x1d50>
 23eb664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb668:	fe37 8a88 	vselgt.f32	s16, s15, s16
    strcpy (obs[oidx].sensor[sidx].id, "tmsmt1");
 23eb66c:	f106 0070 	add.w	r0, r6, #112	; 0x70
 23eb670:	4428      	add	r0, r5
 23eb672:	4962      	ldr	r1, [pc, #392]	; (23eb7fc <_Z6OBS_Dov+0x1d2c>)
 23eb674:	4438      	add	r0, r7
 23eb676:	f011 f8b7 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb67a:	f640 2398 	movw	r3, #2712	; 0xa98
 23eb67e:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb680:	f108 0405 	add.w	r4, r8, #5
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb684:	4353      	muls	r3, r2
 23eb686:	221c      	movs	r2, #28
 23eb688:	fb02 3309 	mla	r3, r2, r9, r3
 23eb68c:	443b      	add	r3, r7
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23eb68e:	ed83 8a09 	vstr	s16, [r3, #36]	; 0x24
    t = multi.temp[1];
 23eb692:	ed9d 8a0d 	vldr	s16, [sp, #52]	; 0x34
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb696:	2200      	movs	r2, #0
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb698:	eeb4 8a48 	vcmp.f32	s16, s16
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb69c:	621a      	str	r2, [r3, #32]
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb69e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    obs[oidx].sensor[sidx++].inuse = true;
 23eb6a2:	f04f 0201 	mov.w	r2, #1
 23eb6a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb6aa:	f180 81a1 	bvs.w	23eb9f0 <_Z6OBS_Dov+0x1f20>
 23eb6ae:	eddf 7a46 	vldr	s15, [pc, #280]	; 23eb7c8 <_Z6OBS_Dov+0x1cf8>
 23eb6b2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23eb6b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb6ba:	f100 8199 	bmi.w	23eb9f0 <_Z6OBS_Dov+0x1f20>
 23eb6be:	eddf 7a43 	vldr	s15, [pc, #268]	; 23eb7cc <_Z6OBS_Dov+0x1cfc>
 23eb6c2:	eeb4 8a67 	vcmp.f32	s16, s15
 23eb6c6:	eddf 7a56 	vldr	s15, [pc, #344]	; 23eb820 <_Z6OBS_Dov+0x1d50>
 23eb6ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb6ce:	fe37 8a88 	vselgt.f32	s16, s15, s16
    strcpy (obs[oidx].sensor[sidx].id, "tmsmt2");
 23eb6d2:	f106 008c 	add.w	r0, r6, #140	; 0x8c
 23eb6d6:	4428      	add	r0, r5
 23eb6d8:	4949      	ldr	r1, [pc, #292]	; (23eb800 <_Z6OBS_Dov+0x1d30>)
 23eb6da:	4438      	add	r0, r7
 23eb6dc:	f011 f884 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb6e0:	f640 2398 	movw	r3, #2712	; 0xa98
 23eb6e4:	9a00      	ldr	r2, [sp, #0]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb6e6:	f108 0806 	add.w	r8, r8, #6
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb6ea:	4353      	muls	r3, r2
 23eb6ec:	221c      	movs	r2, #28
 23eb6ee:	fb02 3304 	mla	r3, r2, r4, r3
 23eb6f2:	2200      	movs	r2, #0
 23eb6f4:	443b      	add	r3, r7
 23eb6f6:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb6f8:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23eb6fa:	ed83 8a09 	vstr	s16, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eb6fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  if (PMTS_exists) {
 23eb702:	4b40      	ldr	r3, [pc, #256]	; (23eb804 <_Z6OBS_Dov+0x1d34>)
 23eb704:	781b      	ldrb	r3, [r3, #0]
 23eb706:	b1d3      	cbz	r3, 23eb73e <_Z6OBS_Dov+0x1c6e>
    float t = ptms_readtempc();
 23eb708:	f7fb fcee 	bl	23e70e8 <_Z14ptms_readtempcv>
    strcpy (obs[oidx].sensor[sidx].id, "pmts");
 23eb70c:	231c      	movs	r3, #28
 23eb70e:	fb03 f808 	mul.w	r8, r3, r8
 23eb712:	eb08 0005 	add.w	r0, r8, r5
 23eb716:	493c      	ldr	r1, [pc, #240]	; (23eb808 <_Z6OBS_Dov+0x1d38>)
 23eb718:	4438      	add	r0, r7
    float t = ptms_readtempc();
 23eb71a:	eeb0 8a40 	vmov.f32	s16, s0
    strcpy (obs[oidx].sensor[sidx].id, "pmts");
 23eb71e:	f011 f863 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb722:	f640 2398 	movw	r3, #2712	; 0xa98
 23eb726:	9a00      	ldr	r2, [sp, #0]
 23eb728:	fb03 8802 	mla	r8, r3, r2, r8
 23eb72c:	2300      	movs	r3, #0
 23eb72e:	44b8      	add	r8, r7
 23eb730:	f8c8 3020 	str.w	r3, [r8, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb734:	2301      	movs	r3, #1
    obs[oidx].sensor[sidx].f_obs = (float) t;
 23eb736:	ed88 8a09 	vstr	s16, [r8, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eb73a:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
  obs[oidx].hth = SystemStatusBits;
 23eb73e:	f640 2398 	movw	r3, #2712	; 0xa98
 23eb742:	9a00      	ldr	r2, [sp, #0]
 23eb744:	fb03 7702 	mla	r7, r3, r2, r7
 23eb748:	4b30      	ldr	r3, [pc, #192]	; (23eb80c <_Z6OBS_Dov+0x1d3c>)
  OBS_Log(oidx);
 23eb74a:	4610      	mov	r0, r2
  obs[oidx].hth = SystemStatusBits;
 23eb74c:	681b      	ldr	r3, [r3, #0]
 23eb74e:	617b      	str	r3, [r7, #20]
  OBS_Log(oidx);
 23eb750:	f7fd fb04 	bl	23e8d5c <_Z7OBS_Logi>
  lastOBS = System.millis();
 23eb754:	f7f9 fc57 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23eb758:	4b2d      	ldr	r3, [pc, #180]	; (23eb810 <_Z6OBS_Dov+0x1d40>)
 23eb75a:	e9c3 0100 	strd	r0, r1, [r3]
}
 23eb75e:	b019      	add	sp, #100	; 0x64
 23eb760:	ecbd 8b06 	vpop	{d8-d10}
 23eb764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    float h = 0.0;
 23eb768:	eddf 8a2c 	vldr	s17, [pc, #176]	; 23eb81c <_Z6OBS_Dov+0x1d4c>
    float t = 0.0;
 23eb76c:	eeb0 8a68 	vmov.f32	s16, s17
    float p = 0.0;
 23eb770:	eef0 9a68 	vmov.f32	s19, s17
 23eb774:	f7fe bcf1 	b.w	23ea15a <_Z6OBS_Dov+0x68a>
      p = bm32.readPressure()/100.0F;       // bp2 hPa
 23eb778:	4826      	ldr	r0, [pc, #152]	; (23eb814 <_Z6OBS_Dov+0x1d44>)
 23eb77a:	f003 fee6 	bl	23ef54a <_ZN15Adafruit_BMP3XX12readPressureEv>
 23eb77e:	eddf 7a26 	vldr	s15, [pc, #152]	; 23eb818 <_Z6OBS_Dov+0x1d48>
      t = bm32.readTemperature();           // bt2
 23eb782:	4824      	ldr	r0, [pc, #144]	; (23eb814 <_Z6OBS_Dov+0x1d44>)
      p = bm32.readPressure()/100.0F;       // bp2 hPa
 23eb784:	eec0 9a27 	vdiv.f32	s19, s0, s15
      t = bm32.readTemperature();           // bt2
 23eb788:	f003 fed4 	bl	23ef534 <_ZN15Adafruit_BMP3XX15readTemperatureEv>
 23eb78c:	f7fe bc84 	b.w	23ea098 <_Z6OBS_Dov+0x5c8>
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23eb790:	eddf 9a23 	vldr	s19, [pc, #140]	; 23eb820 <_Z6OBS_Dov+0x1d50>
 23eb794:	f7fe bd08 	b.w	23ea1a8 <_Z6OBS_Dov+0x6d8>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb798:	ed9f 8a21 	vldr	s16, [pc, #132]	; 23eb820 <_Z6OBS_Dov+0x1d50>
 23eb79c:	f7fe bd1c 	b.w	23ea1d8 <_Z6OBS_Dov+0x708>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23eb7a0:	eddf 8a1f 	vldr	s17, [pc, #124]	; 23eb820 <_Z6OBS_Dov+0x1d50>
 23eb7a4:	f7fe bd2e 	b.w	23ea204 <_Z6OBS_Dov+0x734>
    obs[oidx].sensor[sidx++].inuse = true;
 23eb7a8:	46b8      	mov	r8, r7
 23eb7aa:	f7fe bd6f 	b.w	23ea28c <_Z6OBS_Dov+0x7bc>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23eb7ae:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 23eb820 <_Z6OBS_Dov+0x1d50>
 23eb7b2:	f7fe bd98 	b.w	23ea2e6 <_Z6OBS_Dov+0x816>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb7b6:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 23eb820 <_Z6OBS_Dov+0x1d50>
 23eb7ba:	f7fe bdcd 	b.w	23ea358 <_Z6OBS_Dov+0x888>
 23eb7be:	bf00      	nop
 23eb7c0:	1006a7e6 	.word	0x1006a7e6
 23eb7c4:	1007ac10 	.word	0x1007ac10
 23eb7c8:	c2200000 	.word	0xc2200000
 23eb7cc:	42700000 	.word	0x42700000
 23eb7d0:	023fe003 	.word	0x023fe003
 23eb7d4:	023fe00a 	.word	0x023fe00a
 23eb7d8:	023fe010 	.word	0x023fe010
 23eb7dc:	023fe017 	.word	0x023fe017
 23eb7e0:	1006a7e5 	.word	0x1006a7e5
 23eb7e4:	1006f550 	.word	0x1006f550
 23eb7e8:	1007ac08 	.word	0x1007ac08
 23eb7ec:	023fe01c 	.word	0x023fe01c
 23eb7f0:	023fe023 	.word	0x023fe023
 23eb7f4:	023fe02a 	.word	0x023fe02a
 23eb7f8:	023fe031 	.word	0x023fe031
 23eb7fc:	023fe038 	.word	0x023fe038
 23eb800:	023fe03f 	.word	0x023fe03f
 23eb804:	1006a2ce 	.word	0x1006a2ce
 23eb808:	023fe046 	.word	0x023fe046
 23eb80c:	1006a178 	.word	0x1006a178
 23eb810:	1006aeb0 	.word	0x1006aeb0
 23eb814:	1006aa48 	.word	0x1006aa48
 23eb818:	42c80000 	.word	0x42c80000
 23eb81c:	00000000 	.word	0x00000000
 23eb820:	c479f99a 	.word	0xc479f99a
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb824:	ed1f 8a02 	vldr	s16, [pc, #-8]	; 23eb820 <_Z6OBS_Dov+0x1d50>
 23eb828:	f7fe bdd5 	b.w	23ea3d6 <_Z6OBS_Dov+0x906>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23eb82c:	ed5f 9a04 	vldr	s19, [pc, #-16]	; 23eb820 <_Z6OBS_Dov+0x1d50>
 23eb830:	f7fe be08 	b.w	23ea444 <_Z6OBS_Dov+0x974>
  float sht1_temp = 0.0;
 23eb834:	ed1f 8a07 	vldr	s16, [pc, #-28]	; 23eb81c <_Z6OBS_Dov+0x1d4c>
  float sht1_humid = 0.0;
 23eb838:	eef0 9a48 	vmov.f32	s19, s16
 23eb83c:	f7fe be11 	b.w	23ea462 <_Z6OBS_Dov+0x992>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb840:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 23eb820 <_Z6OBS_Dov+0x1d50>
 23eb844:	f7fe be6c 	b.w	23ea520 <_Z6OBS_Dov+0xa50>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23eb848:	ed1f 0a0b 	vldr	s0, [pc, #-44]	; 23eb820 <_Z6OBS_Dov+0x1d50>
 23eb84c:	f7fe be9f 	b.w	23ea58e <_Z6OBS_Dov+0xabe>
      t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb850:	464e      	mov	r6, r9
 23eb852:	4657      	mov	r7, sl
 23eb854:	f7fe bee0 	b.w	23ea618 <_Z6OBS_Dov+0xb48>
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23eb858:	a767      	add	r7, pc, #412	; (adr r7, 23eb9f8 <_Z6OBS_Dov+0x1f28>)
 23eb85a:	e9d7 6700 	ldrd	r6, r7, [r7]
 23eb85e:	f7fe befa 	b.w	23ea656 <_Z6OBS_Dov+0xb86>
      Output ("ERR:HDC1 Read");
 23eb862:	4867      	ldr	r0, [pc, #412]	; (23eba00 <_Z6OBS_Dov+0x1f30>)
 23eb864:	f7f9 ff12 	bl	23e568c <_Z6OutputPKc>
      SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
 23eb868:	f8db 3000 	ldr.w	r3, [fp]
 23eb86c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23eb870:	f7fe bef7 	b.w	23ea662 <_Z6OBS_Dov+0xb92>
      t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb874:	464e      	mov	r6, r9
 23eb876:	4657      	mov	r7, sl
 23eb878:	f7fe bf60 	b.w	23ea73c <_Z6OBS_Dov+0xc6c>
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23eb87c:	a75e      	add	r7, pc, #376	; (adr r7, 23eb9f8 <_Z6OBS_Dov+0x1f28>)
 23eb87e:	e9d7 6700 	ldrd	r6, r7, [r7]
 23eb882:	f7fe bf7a 	b.w	23ea77a <_Z6OBS_Dov+0xcaa>
      Output ("ERR:HDC1 Read");
 23eb886:	485e      	ldr	r0, [pc, #376]	; (23eba00 <_Z6OBS_Dov+0x1f30>)
 23eb888:	f7f9 ff00 	bl	23e568c <_Z6OutputPKc>
      SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
 23eb88c:	f8db 3000 	ldr.w	r3, [fp]
 23eb890:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 23eb894:	f7fe bf77 	b.w	23ea786 <_Z6OBS_Dov+0xcb6>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb898:	ed9f aa5a 	vldr	s20, [pc, #360]	; 23eba04 <_Z6OBS_Dov+0x1f34>
 23eb89c:	f7fe bfd3 	b.w	23ea846 <_Z6OBS_Dov+0xd76>
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23eb8a0:	eddf 8a58 	vldr	s17, [pc, #352]	; 23eba04 <_Z6OBS_Dov+0x1f34>
 23eb8a4:	f7ff b818 	b.w	23ea8d8 <_Z6OBS_Dov+0xe08>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb8a8:	ed9f aa56 	vldr	s20, [pc, #344]	; 23eba04 <_Z6OBS_Dov+0x1f34>
 23eb8ac:	f7ff b869 	b.w	23ea982 <_Z6OBS_Dov+0xeb2>
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
 23eb8b0:	eddf 8a54 	vldr	s17, [pc, #336]	; 23eba04 <_Z6OBS_Dov+0x1f34>
 23eb8b4:	f7ff b87d 	b.w	23ea9b2 <_Z6OBS_Dov+0xee2>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb8b8:	ed9f aa52 	vldr	s20, [pc, #328]	; 23eba04 <_Z6OBS_Dov+0x1f34>
 23eb8bc:	f7ff b8d1 	b.w	23eaa62 <_Z6OBS_Dov+0xf92>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
 23eb8c0:	eddf 8a50 	vldr	s17, [pc, #320]	; 23eba04 <_Z6OBS_Dov+0x1f34>
 23eb8c4:	f7ff b8e5 	b.w	23eaa92 <_Z6OBS_Dov+0xfc2>
        SI1145_exists = false;
 23eb8c8:	7030      	strb	r0, [r6, #0]
        Output ("SI OFFLINE");
 23eb8ca:	484f      	ldr	r0, [pc, #316]	; (23eba08 <_Z6OBS_Dov+0x1f38>)
 23eb8cc:	f7f9 fede 	bl	23e568c <_Z6OutputPKc>
        SystemStatusBits |= SSB_SI1145;  // Turn On Bit    
 23eb8d0:	f8db 3000 	ldr.w	r3, [fp]
 23eb8d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 23eb8d8:	f8cb 3000 	str.w	r3, [fp]
 23eb8dc:	f7ff b978 	b.w	23eabd0 <_Z6OBS_Dov+0x1100>
    si_vis = (isnan(si_vis) || (si_vis < QC_MIN_VI)  || (si_vis > QC_MAX_VI)) ? QC_ERR_VI  : si_vis;
 23eb8e0:	eddf aa48 	vldr	s21, [pc, #288]	; 23eba04 <_Z6OBS_Dov+0x1f34>
 23eb8e4:	f7ff b98a 	b.w	23eabfc <_Z6OBS_Dov+0x112c>
    si_ir  = (isnan(si_ir)  || (si_ir  < QC_MIN_IR)  || (si_ir  > QC_MAX_IR)) ? QC_ERR_IR  : si_ir;
 23eb8e8:	ed9f aa46 	vldr	s20, [pc, #280]	; 23eba04 <_Z6OBS_Dov+0x1f34>
 23eb8ec:	f7ff b996 	b.w	23eac1c <_Z6OBS_Dov+0x114c>
    si_uv  = (isnan(si_uv)  || (si_uv  < QC_MIN_UV)  || (si_uv  > QC_MAX_UV)) ? QC_ERR_UV  : si_uv;
 23eb8f0:	eddf 8a44 	vldr	s17, [pc, #272]	; 23eba04 <_Z6OBS_Dov+0x1f34>
 23eb8f4:	f7ff b9e0 	b.w	23eacb8 <_Z6OBS_Dov+0x11e8>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb8f8:	ed9f 0a42 	vldr	s0, [pc, #264]	; 23eba04 <_Z6OBS_Dov+0x1f34>
 23eb8fc:	f7ff ba48 	b.w	23ead90 <_Z6OBS_Dov+0x12c0>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb900:	ed9f 0a40 	vldr	s0, [pc, #256]	; 23eba04 <_Z6OBS_Dov+0x1f34>
 23eb904:	f7ff ba80 	b.w	23eae08 <_Z6OBS_Dov+0x1338>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb908:	eddf 8a3e 	vldr	s17, [pc, #248]	; 23eba04 <_Z6OBS_Dov+0x1f34>
 23eb90c:	f7ff baba 	b.w	23eae84 <_Z6OBS_Dov+0x13b4>
  float mcp3_temp = 0.0;  // globe temperature
 23eb910:	eddf 8a3e 	vldr	s17, [pc, #248]	; 23eba0c <_Z6OBS_Dov+0x1f3c>
 23eb914:	f7ff bac4 	b.w	23eaea0 <_Z6OBS_Dov+0x13d0>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb918:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 23eba04 <_Z6OBS_Dov+0x1f34>
 23eb91c:	f7ff baee 	b.w	23eaefc <_Z6OBS_Dov+0x142c>
    lux = (isnan(lux) || (lux < QC_MIN_VLX)  || (lux > QC_MAX_VLX))  ? QC_ERR_VLX  : lux;
 23eb920:	ed9f aa3b 	vldr	s20, [pc, #236]	; 23eba10 <_Z6OBS_Dov+0x1f40>
 23eb924:	f7ff bb15 	b.w	23eaf52 <_Z6OBS_Dov+0x1482>
    lux = (isnan(lux) || (lux < QC_MIN_BLX)  || (lux > QC_MAX_BLX))  ? QC_ERR_BLX  : lux;
 23eb928:	ed9f aa36 	vldr	s20, [pc, #216]	; 23eba04 <_Z6OBS_Dov+0x1f34>
 23eb92c:	f7ff bb42 	b.w	23eafb4 <_Z6OBS_Dov+0x14e4>
  else if (A4_State == A4_STATE_RAIN) {
 23eb930:	2b02      	cmp	r3, #2
 23eb932:	f47f abc9 	bne.w	23eb0c8 <_Z6OBS_Dov+0x15f8>
    strcpy (obs[oidx].sensor[sidx].id, "rg2");
 23eb936:	f04f 0b1c 	mov.w	fp, #28
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb93a:	f640 2698 	movw	r6, #2712	; 0xa98
 23eb93e:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
 23eb942:	f04f 0901 	mov.w	r9, #1
 23eb946:	fb0b f708 	mul.w	r7, fp, r8
    strcpy (obs[oidx].sensor[sidx].id, "rg2");
 23eb94a:	19e8      	adds	r0, r5, r7
 23eb94c:	4931      	ldr	r1, [pc, #196]	; (23eba14 <_Z6OBS_Dov+0x1f44>)
 23eb94e:	4420      	add	r0, r4
 23eb950:	f010 ff4a 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb954:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
 23eb956:	eb07 000b 	add.w	r0, r7, fp
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb95a:	435e      	muls	r6, r3
 23eb95c:	19ba      	adds	r2, r7, r6
 23eb95e:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
 23eb960:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
 23eb962:	f108 0301 	add.w	r3, r8, #1
    obs[oidx].sensor[sidx].f_obs = rain2;
 23eb966:	ed82 9a09 	vstr	s18, [r2, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
 23eb96a:	492b      	ldr	r1, [pc, #172]	; (23eba18 <_Z6OBS_Dov+0x1f48>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb96c:	f8c2 a020 	str.w	sl, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
 23eb970:	f882 9030 	strb.w	r9, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
 23eb974:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23eb976:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
 23eb978:	f010 ff36 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb97c:	9b01      	ldr	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "rgp2");
 23eb97e:	f107 0038 	add.w	r0, r7, #56	; 0x38
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb982:	fb0b 6303 	mla	r3, fp, r3, r6
 23eb986:	18e1      	adds	r1, r4, r3
    obs[oidx].sensor[sidx].f_obs = eeprom.rgt2;
 23eb988:	4b24      	ldr	r3, [pc, #144]	; (23eba1c <_Z6OBS_Dov+0x1f4c>)
    strcpy (obs[oidx].sensor[sidx].id, "rgp2");
 23eb98a:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].f_obs = eeprom.rgt2;
 23eb98c:	689a      	ldr	r2, [r3, #8]
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb98e:	f8c1 a020 	str.w	sl, [r1, #32]
    obs[oidx].sensor[sidx].f_obs = eeprom.rgt2;
 23eb992:	624a      	str	r2, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eb994:	f881 9030 	strb.w	r9, [r1, #48]	; 0x30
 23eb998:	f108 0202 	add.w	r2, r8, #2
    strcpy (obs[oidx].sensor[sidx].id, "rgp2");
 23eb99c:	4920      	ldr	r1, [pc, #128]	; (23eba20 <_Z6OBS_Dov+0x1f50>)
 23eb99e:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
 23eb9a0:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "rgp2");
 23eb9a2:	f010 ff21 	bl	23fc7e8 <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb9a6:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx].f_obs = eeprom.rgp2;
 23eb9a8:	4b1c      	ldr	r3, [pc, #112]	; (23eba1c <_Z6OBS_Dov+0x1f4c>)
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb9aa:	fb0b 6602 	mla	r6, fp, r2, r6
    obs[oidx].sensor[sidx].f_obs = eeprom.rgp2;
 23eb9ae:	68db      	ldr	r3, [r3, #12]
    obs[oidx].sensor[sidx].type = F_OBS;
 23eb9b0:	4426      	add	r6, r4
 23eb9b2:	f8c6 a020 	str.w	sl, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = eeprom.rgp2;
 23eb9b6:	6273      	str	r3, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
 23eb9b8:	f108 0803 	add.w	r8, r8, #3
 23eb9bc:	f886 9030 	strb.w	r9, [r6, #48]	; 0x30
 23eb9c0:	f7ff bb82 	b.w	23eb0c8 <_Z6OBS_Dov+0x15f8>
  float heat_index = 0.0;
 23eb9c4:	2700      	movs	r7, #0
 23eb9c6:	e44a      	b.n	23eb25e <_Z6OBS_Dov+0x178e>
  float wetbulb_temp = 0.0;
 23eb9c8:	f04f 0900 	mov.w	r9, #0
 23eb9cc:	e479      	b.n	23eb2c2 <_Z6OBS_Dov+0x17f2>
      wbgt = wbgt_using_hi(heat_index);
 23eb9ce:	4638      	mov	r0, r7
 23eb9d0:	f7f7 fe6a 	bl	23e36a8 <__aeabi_f2d>
 23eb9d4:	ec41 0b10 	vmov	d0, r0, r1
 23eb9d8:	f7fa ff52 	bl	23e6880 <_Z13wbgt_using_hid>
 23eb9dc:	e496      	b.n	23eb30c <_Z6OBS_Dov+0x183c>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb9de:	ed9f 8a09 	vldr	s16, [pc, #36]	; 23eba04 <_Z6OBS_Dov+0x1f34>
 23eb9e2:	e4d8      	b.n	23eb396 <_Z6OBS_Dov+0x18c6>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb9e4:	ed9f 8a07 	vldr	s16, [pc, #28]	; 23eba04 <_Z6OBS_Dov+0x1f34>
 23eb9e8:	e56f      	b.n	23eb4ca <_Z6OBS_Dov+0x19fa>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb9ea:	ed9f 8a06 	vldr	s16, [pc, #24]	; 23eba04 <_Z6OBS_Dov+0x1f34>
 23eb9ee:	e63d      	b.n	23eb66c <_Z6OBS_Dov+0x1b9c>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
 23eb9f0:	ed9f 8a04 	vldr	s16, [pc, #16]	; 23eba04 <_Z6OBS_Dov+0x1f34>
 23eb9f4:	e66d      	b.n	23eb6d2 <_Z6OBS_Dov+0x1c02>
 23eb9f6:	bf00      	nop
 23eb9f8:	33333333 	.word	0x33333333
 23eb9fc:	c08f3f33 	.word	0xc08f3f33
 23eba00:	023fdf4d 	.word	0x023fdf4d
 23eba04:	c479f99a 	.word	0xc479f99a
 23eba08:	023fd43b 	.word	0x023fd43b
 23eba0c:	00000000 	.word	0x00000000
 23eba10:	c479c000 	.word	0xc479c000
 23eba14:	023fdfaf 	.word	0x023fdfaf
 23eba18:	023fdfb3 	.word	0x023fdfb3
 23eba1c:	1006ae5c 	.word	0x1006ae5c
 23eba20:	023fdfb8 	.word	0x023fdfb8

023eba24 <_Z22Output_CellBatteryInfov>:
void Output_CellBatteryInfo() {
 23eba24:	b530      	push	{r4, r5, lr}
 23eba26:	ed2d 8b02 	vpush	{d8}
 23eba2a:	b08d      	sub	sp, #52	; 0x34
  CellularSignal sig = Cellular.RSSI();
 23eba2c:	491f      	ldr	r1, [pc, #124]	; (23ebaac <_Z22Output_CellBatteryInfov+0x88>)
 23eba2e:	a804      	add	r0, sp, #16
 23eba30:	f00b fe6a 	bl	23f7708 <_ZN5spark13CellularClass4RSSIEv>
  float SignalStrength = sig.getStrength();
 23eba34:	a804      	add	r0, sp, #16
 23eba36:	f00b fec5 	bl	23f77c4 <_ZNK14CellularSignal11getStrengthEv>
 23eba3a:	eeb0 8a40 	vmov.f32	s16, s0
  int BatteryState = System.batteryState();
 23eba3e:	f7fe f839 	bl	23e9ab4 <_ZNK11SystemClass12batteryStateEv.isra.0>
  if (BatteryState>0 && BatteryState<6) {
 23eba42:	1e43      	subs	r3, r0, #1
 23eba44:	2b04      	cmp	r3, #4
  int BatteryState = System.batteryState();
 23eba46:	4604      	mov	r4, r0
  if (BatteryState>0 && BatteryState<6) {
 23eba48:	d82d      	bhi.n	23ebaa6 <_Z22Output_CellBatteryInfov+0x82>
    BatteryPoC = System.batteryCharge();
 23eba4a:	f7fe f821 	bl	23e9a90 <_ZNK11SystemClass13batteryChargeEv.isra.0>
    (int)SignalStrength, (int)(SignalStrength*100)%100,
 23eba4e:	eddf 7a18 	vldr	s15, [pc, #96]	; 23ebab0 <_Z22Output_CellBatteryInfov+0x8c>
 23eba52:	ee28 7a27 	vmul.f32	s14, s16, s15
    BatteryState, (int)BatteryPoC, (int)(BatteryPoC*100)%100);
 23eba56:	ee60 7a27 	vmul.f32	s15, s0, s15
 23eba5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    (int)SignalStrength, (int)(SignalStrength*100)%100,
 23eba5e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  sprintf (Buffer32Bytes, "CS:%d.%02d B:%d,%d.%02d", 
 23eba62:	2164      	movs	r1, #100	; 0x64
    BatteryState, (int)BatteryPoC, (int)(BatteryPoC*100)%100);
 23eba64:	ee17 2a90 	vmov	r2, s15
    (int)SignalStrength, (int)(SignalStrength*100)%100,
 23eba68:	ee17 3a10 	vmov	r3, s14
  sprintf (Buffer32Bytes, "CS:%d.%02d B:%d,%d.%02d", 
 23eba6c:	fb92 f5f1 	sdiv	r5, r2, r1
 23eba70:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 23eba74:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 23eba78:	fb93 f0f1 	sdiv	r0, r3, r1
 23eba7c:	fb01 2215 	mls	r2, r1, r5, r2
 23eba80:	fb01 3310 	mls	r3, r1, r0, r3
 23eba84:	ed8d 0a01 	vstr	s0, [sp, #4]
 23eba88:	490a      	ldr	r1, [pc, #40]	; (23ebab4 <_Z22Output_CellBatteryInfov+0x90>)
 23eba8a:	9202      	str	r2, [sp, #8]
 23eba8c:	9400      	str	r4, [sp, #0]
 23eba8e:	ee17 2a90 	vmov	r2, s15
 23eba92:	4809      	ldr	r0, [pc, #36]	; (23ebab8 <_Z22Output_CellBatteryInfov+0x94>)
 23eba94:	f00b fce8 	bl	23f7468 <sprintf>
  Output(Buffer32Bytes);
 23eba98:	4807      	ldr	r0, [pc, #28]	; (23ebab8 <_Z22Output_CellBatteryInfov+0x94>)
 23eba9a:	f7f9 fdf7 	bl	23e568c <_Z6OutputPKc>
}
 23eba9e:	b00d      	add	sp, #52	; 0x34
 23ebaa0:	ecbd 8b02 	vpop	{d8}
 23ebaa4:	bd30      	pop	{r4, r5, pc}
  float BatteryPoC = 0.0;                 // Battery Percent of Charge
 23ebaa6:	ed9f 0a05 	vldr	s0, [pc, #20]	; 23ebabc <_Z22Output_CellBatteryInfov+0x98>
 23ebaaa:	e7d0      	b.n	23eba4e <_Z22Output_CellBatteryInfov+0x2a>
 23ebaac:	1007aeb8 	.word	0x1007aeb8
 23ebab0:	42c80000 	.word	0x42c80000
 23ebab4:	023fe04b 	.word	0x023fe04b
 23ebab8:	1006a287 	.word	0x1006a287
 23ebabc:	00000000 	.word	0x00000000

023ebac0 <_ZNK11SystemClass11powerSourceEv.isra.0>:
    int powerSource() const {
 23ebac0:	b507      	push	{r0, r1, r2, lr}
 23ebac2:	2018      	movs	r0, #24
 23ebac4:	a901      	add	r1, sp, #4
 23ebac6:	f7fd ffb5 	bl	23e9a34 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
 23ebaca:	2800      	cmp	r0, #0
        return val;
 23ebacc:	bfa8      	it	ge
 23ebace:	9801      	ldrge	r0, [sp, #4]
    }
 23ebad0:	b003      	add	sp, #12
 23ebad2:	f85d fb04 	ldr.w	pc, [sp], #4

023ebad6 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb>:
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
 23ebad6:	b570      	push	{r4, r5, r6, lr}
 23ebad8:	4604      	mov	r4, r0
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 23ebada:	2000      	movs	r0, #0
    ResultT result(ResultT defaultValue = ResultT()) const {
 23ebadc:	460d      	mov	r5, r1
        return (application_thread_current(nullptr) != 0);
 23ebade:	f00b fa93 	bl	23f7008 <application_thread_current>
 23ebae2:	1c66      	adds	r6, r4, #1
        if (ContextT::isApplicationThreadCurrent()) {
 23ebae4:	b128      	cbz	r0, 23ebaf2 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x1c>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
 23ebae6:	7833      	ldrb	r3, [r6, #0]
 23ebae8:	b2db      	uxtb	r3, r3
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 23ebaea:	b913      	cbnz	r3, 23ebaf2 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x1c>
        spark_process();
 23ebaec:	f00b fb18 	bl	23f7120 <spark_process>
    }
 23ebaf0:	e7f9      	b.n	23ebae6 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x10>
 23ebaf2:	e8d6 3f8f 	ldab	r3, [r6]
 23ebaf6:	b2db      	uxtb	r3, r3
        if (this->acquireDone() && this->isSucceeded()) {
 23ebaf8:	b90b      	cbnz	r3, 23ebafe <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x28>
        return std::move(defaultValue);
 23ebafa:	4628      	mov	r0, r5
    }
 23ebafc:	bd70      	pop	{r4, r5, r6, pc}
        return (application_thread_current(nullptr) != 0);
 23ebafe:	2000      	movs	r0, #0
 23ebb00:	f00b fa82 	bl	23f7008 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23ebb04:	b128      	cbz	r0, 23ebb12 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x3c>
 23ebb06:	7833      	ldrb	r3, [r6, #0]
 23ebb08:	b2db      	uxtb	r3, r3
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 23ebb0a:	b913      	cbnz	r3, 23ebb12 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x3c>
        spark_process();
 23ebb0c:	f00b fb08 	bl	23f7120 <spark_process>
    }
 23ebb10:	e7f9      	b.n	23ebb06 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x30>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 23ebb12:	7823      	ldrb	r3, [r4, #0]
 23ebb14:	b2db      	uxtb	r3, r3
        if (this->acquireDone() && this->isSucceeded()) {
 23ebb16:	2b01      	cmp	r3, #1
 23ebb18:	d1ef      	bne.n	23ebafa <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x24>
            return result_;
 23ebb1a:	7b20      	ldrb	r0, [r4, #12]
 23ebb1c:	e7ee      	b.n	23ebafc <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x26>
	...

023ebb20 <_GLOBAL__sub_I___appProductVersion>:
      // We need to reinitialize our wind readings before we can move on.
      Wind_Distance_Air_Initialize();
    }
#endif
  }
}
 23ebb20:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23ebb24:	2208      	movs	r2, #8
 23ebb26:	4b62      	ldr	r3, [pc, #392]	; (23ebcb0 <_GLOBAL__sub_I___appProductVersion+0x190>)
  FsVolume() = default;  // cppcheck-suppress uninitMemberVar
 23ebb28:	2400      	movs	r4, #0
 23ebb2a:	701a      	strb	r2, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
 23ebb2c:	f00d ff1e 	bl	23f996c <spark_protocol_instance>
 23ebb30:	2300      	movs	r3, #0
 23ebb32:	2101      	movs	r1, #1
 23ebb34:	461a      	mov	r2, r3
 23ebb36:	f00d ff35 	bl	23f99a4 <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
 23ebb3a:	f00d ff17 	bl	23f996c <spark_protocol_instance>
 23ebb3e:	2300      	movs	r3, #0
 23ebb40:	2123      	movs	r1, #35	; 0x23
 23ebb42:	461a      	mov	r2, r3
 23ebb44:	f00d ff20 	bl	23f9988 <spark_protocol_set_product_id>
 23ebb48:	4b5a      	ldr	r3, [pc, #360]	; (23ebcb4 <_GLOBAL__sub_I___appProductVersion+0x194>)
  {
 23ebb4a:	4a5b      	ldr	r2, [pc, #364]	; (23ebcb8 <_GLOBAL__sub_I___appProductVersion+0x198>)
 23ebb4c:	2501      	movs	r5, #1
 23ebb4e:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() { initSharedSpiCard(); }
 23ebb52:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 23ebb56:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
    Stream() {_timeout=1000;}
 23ebb5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23ebb5e:	f8c3 4480 	str.w	r4, [r3, #1152]	; 0x480
 23ebb62:	f8c3 4484 	str.w	r4, [r3, #1156]	; 0x484
class SdBase : public Vol {
 23ebb66:	f8c3 4488 	str.w	r4, [r3, #1160]	; 0x488
 * \brief Optimized SPI class for access to SD and SDHC flash memory cards.
 */
class SdSpiArduinoDriver {
 public:
  /** Constructor. */
  SdSpiArduinoDriver() = default;
 23ebb6a:	f8c3 448c 	str.w	r4, [r3, #1164]	; 0x48c
 23ebb6e:	f883 5494 	strb.w	r5, [r3, #1172]	; 0x494
 23ebb72:	f8c3 4498 	str.w	r4, [r3, #1176]	; 0x498
 23ebb76:	f8a3 449c 	strh.w	r4, [r3, #1180]	; 0x49c
 23ebb7a:	f8c3 44a0 	str.w	r4, [r3, #1184]	; 0x4a0
#endif  // SPI_DRIVER_SELECT < 2
  void initSharedSpiCard() {
    m_beginCalled = false;
    m_csPin = 0;
    m_errorCode = SD_CARD_ERROR_INIT_NOT_CALLED;
    m_spiActive = false;
 23ebb7e:	f8c3 44a8 	str.w	r4, [r3, #1192]	; 0x4a8
    Print() : write_error(0) {}
 23ebb82:	4b4e      	ldr	r3, [pc, #312]	; (23ebcbc <_GLOBAL__sub_I___appProductVersion+0x19c>)
PMIC pmic;
 23ebb84:	4621      	mov	r1, r4
 23ebb86:	609a      	str	r2, [r3, #8]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23ebb88:	4a4d      	ldr	r2, [pc, #308]	; (23ebcc0 <_GLOBAL__sub_I___appProductVersion+0x1a0>)
  FsBaseFile() = default;  // cppcheck-suppress uninitMemberVar
 23ebb8a:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
 23ebb8e:	605c      	str	r4, [r3, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23ebb90:	601a      	str	r2, [r3, #0]
 23ebb92:	484c      	ldr	r0, [pc, #304]	; (23ebcc4 <_GLOBAL__sub_I___appProductVersion+0x1a4>)
 23ebb94:	f00c fe85 	bl	23f88a2 <_ZN4PMICC1Eb>
Adafruit_SSD1306 display32(SCREEN_WIDTH, 32, &Wire, OLED_RESET);
 23ebb98:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 23ebb9c:	f00d ffd2 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23ebba0:	4f49      	ldr	r7, [pc, #292]	; (23ebcc8 <_GLOBAL__sub_I___appProductVersion+0x1a8>)
 23ebba2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 23ebd48 <_GLOBAL__sub_I___appProductVersion+0x228>
 23ebba6:	4603      	mov	r3, r0
 23ebba8:	2220      	movs	r2, #32
 23ebbaa:	2180      	movs	r1, #128	; 0x80
 23ebbac:	e9cd 7801 	strd	r7, r8, [sp, #4]
 23ebbb0:	9600      	str	r6, [sp, #0]
 23ebbb2:	4846      	ldr	r0, [pc, #280]	; (23ebccc <_GLOBAL__sub_I___appProductVersion+0x1ac>)
 23ebbb4:	f005 fa4c 	bl	23f1050 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
Adafruit_SSD1306 display64(SCREEN_WIDTH, 64, &Wire, OLED_RESET);
 23ebbb8:	f00d ffc4 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23ebbbc:	2240      	movs	r2, #64	; 0x40
 23ebbbe:	4603      	mov	r3, r0
 23ebbc0:	2180      	movs	r1, #128	; 0x80
 23ebbc2:	e9cd 7801 	strd	r7, r8, [sp, #4]
 23ebbc6:	9600      	str	r6, [sp, #0]
 23ebbc8:	4841      	ldr	r0, [pc, #260]	; (23ebcd0 <_GLOBAL__sub_I___appProductVersion+0x1b0>)
 23ebbca:	f005 fa41 	bl	23f1050 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
AB1805 ab1805(Wire);
 23ebbce:	f00d ffb9 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23ebbd2:	2269      	movs	r2, #105	; 0x69
 23ebbd4:	4601      	mov	r1, r0
 23ebbd6:	483f      	ldr	r0, [pc, #252]	; (23ebcd4 <_GLOBAL__sub_I___appProductVersion+0x1b4>)
 23ebbd8:	f00a f89c 	bl	23f5d14 <_ZN6AB1805C1ER7TwoWireh>
RH_RF95 rf95(LORA_SS, LORA_IRQ_PIN, hardware_spi); // SPI1
 23ebbdc:	2214      	movs	r2, #20
 23ebbde:	4b3e      	ldr	r3, [pc, #248]	; (23ebcd8 <_GLOBAL__sub_I___appProductVersion+0x1b8>)
 23ebbe0:	2103      	movs	r1, #3
 23ebbe2:	483e      	ldr	r0, [pc, #248]	; (23ebcdc <_GLOBAL__sub_I___appProductVersion+0x1bc>)
 23ebbe4:	f006 fc56 	bl	23f2494 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
AES aes;
 23ebbe8:	483d      	ldr	r0, [pc, #244]	; (23ebce0 <_GLOBAL__sub_I___appProductVersion+0x1c0>)
 23ebbea:	f002 f859 	bl	23edca0 <_ZN3AESC1Ev>
Adafruit_BMP280 bmp1;
 23ebbee:	f00d ffa9 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23ebbf2:	4601      	mov	r1, r0
 23ebbf4:	483b      	ldr	r0, [pc, #236]	; (23ebce4 <_GLOBAL__sub_I___appProductVersion+0x1c4>)
 23ebbf6:	f002 ffc7 	bl	23eeb88 <_ZN15Adafruit_BMP280C1EP7TwoWire>
Adafruit_BMP280 bmp2;
 23ebbfa:	f00d ffa3 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23ebbfe:	4601      	mov	r1, r0
 23ebc00:	4839      	ldr	r0, [pc, #228]	; (23ebce8 <_GLOBAL__sub_I___appProductVersion+0x1c8>)
 23ebc02:	f002 ffc1 	bl	23eeb88 <_ZN15Adafruit_BMP280C1EP7TwoWire>
Adafruit_BME280 bme1;
 23ebc06:	4839      	ldr	r0, [pc, #228]	; (23ebcec <_GLOBAL__sub_I___appProductVersion+0x1cc>)
 23ebc08:	f002 fb34 	bl	23ee274 <_ZN15Adafruit_BME280C1Ev>
Adafruit_BME280 bme2;
 23ebc0c:	4838      	ldr	r0, [pc, #224]	; (23ebcf0 <_GLOBAL__sub_I___appProductVersion+0x1d0>)
 23ebc0e:	f002 fb31 	bl	23ee274 <_ZN15Adafruit_BME280C1Ev>
Adafruit_BMP3XX bm31;
 23ebc12:	4838      	ldr	r0, [pc, #224]	; (23ebcf4 <_GLOBAL__sub_I___appProductVersion+0x1d4>)
 23ebc14:	f003 fba0 	bl	23ef358 <_ZN15Adafruit_BMP3XXC1Ev>
Adafruit_BMP3XX bm32;
 23ebc18:	4837      	ldr	r0, [pc, #220]	; (23ebcf8 <_GLOBAL__sub_I___appProductVersion+0x1d8>)
 23ebc1a:	f003 fb9d 	bl	23ef358 <_ZN15Adafruit_BMP3XXC1Ev>
Adafruit_HTU21DF htu = Adafruit_HTU21DF();
 23ebc1e:	4837      	ldr	r0, [pc, #220]	; (23ebcfc <_GLOBAL__sub_I___appProductVersion+0x1dc>)
 23ebc20:	f004 fc56 	bl	23f04d0 <_ZN16Adafruit_HTU21DFC1Ev>
Adafruit_MCP9808 mcp1;
 23ebc24:	4836      	ldr	r0, [pc, #216]	; (23ebd00 <_GLOBAL__sub_I___appProductVersion+0x1e0>)
 23ebc26:	f004 fe4b 	bl	23f08c0 <_ZN16Adafruit_MCP9808C1Ev>
Adafruit_MCP9808 mcp2;
 23ebc2a:	4836      	ldr	r0, [pc, #216]	; (23ebd04 <_GLOBAL__sub_I___appProductVersion+0x1e4>)
 23ebc2c:	f004 fe48 	bl	23f08c0 <_ZN16Adafruit_MCP9808C1Ev>
Adafruit_MCP9808 mcp3;
 23ebc30:	4835      	ldr	r0, [pc, #212]	; (23ebd08 <_GLOBAL__sub_I___appProductVersion+0x1e8>)
 23ebc32:	f004 fe45 	bl	23f08c0 <_ZN16Adafruit_MCP9808C1Ev>
Adafruit_MCP9808 mcp4;
 23ebc36:	4835      	ldr	r0, [pc, #212]	; (23ebd0c <_GLOBAL__sub_I___appProductVersion+0x1ec>)
 23ebc38:	f004 fe42 	bl	23f08c0 <_ZN16Adafruit_MCP9808C1Ev>
Adafruit_SHT31 sht1;
 23ebc3c:	f00d ff82 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23ebc40:	4601      	mov	r1, r0
 23ebc42:	4833      	ldr	r0, [pc, #204]	; (23ebd10 <_GLOBAL__sub_I___appProductVersion+0x1f0>)
 23ebc44:	f004 ff90 	bl	23f0b68 <_ZN14Adafruit_SHT31C1EP7TwoWire>
Adafruit_SHT31 sht2;
 23ebc48:	f00d ff7c 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23ebc4c:	4601      	mov	r1, r0
 23ebc4e:	4831      	ldr	r0, [pc, #196]	; (23ebd14 <_GLOBAL__sub_I___appProductVersion+0x1f4>)
 23ebc50:	f004 ff8a 	bl	23f0b68 <_ZN14Adafruit_SHT31C1EP7TwoWire>
Adafruit_SI1145 uv = Adafruit_SI1145();
 23ebc54:	4830      	ldr	r0, [pc, #192]	; (23ebd18 <_GLOBAL__sub_I___appProductVersion+0x1f8>)
 23ebc56:	f005 f851 	bl	23f0cfc <_ZN15Adafruit_SI1145C1Ev>
Adafruit_VEML7700 veml = Adafruit_VEML7700();
 23ebc5a:	4830      	ldr	r0, [pc, #192]	; (23ebd1c <_GLOBAL__sub_I___appProductVersion+0x1fc>)
 23ebc5c:	f005 fe86 	bl	23f196c <_ZN17Adafruit_VEML7700C1Ev>
Adafruit_PM25AQI pmaq = Adafruit_PM25AQI();
 23ebc60:	482f      	ldr	r0, [pc, #188]	; (23ebd20 <_GLOBAL__sub_I___appProductVersion+0x200>)
 23ebc62:	f004 fed4 	bl	23f0a0e <_ZN16Adafruit_PM25AQIC1Ev>
Adafruit_HDC302x hdc1;
 23ebc66:	482f      	ldr	r0, [pc, #188]	; (23ebd24 <_GLOBAL__sub_I___appProductVersion+0x204>)
 23ebc68:	f004 fb25 	bl	23f02b6 <_ZN16Adafruit_HDC302xC1Ev>
Adafruit_HDC302x hdc2;
 23ebc6c:	482e      	ldr	r0, [pc, #184]	; (23ebd28 <_GLOBAL__sub_I___appProductVersion+0x208>)
 23ebc6e:	f004 fb22 	bl	23f02b6 <_ZN16Adafruit_HDC302xC1Ev>
Adafruit_LPS35HW lps1;
 23ebc72:	482e      	ldr	r0, [pc, #184]	; (23ebd2c <_GLOBAL__sub_I___appProductVersion+0x20c>)
 23ebc74:	f004 fcf0 	bl	23f0658 <_ZN16Adafruit_LPS35HWC1Ev>
Adafruit_LPS35HW lps2;
 23ebc78:	482d      	ldr	r0, [pc, #180]	; (23ebd30 <_GLOBAL__sub_I___appProductVersion+0x210>)
 23ebc7a:	f004 fced 	bl	23f0658 <_ZN16Adafruit_LPS35HWC1Ev>
LeafSens tlw;
 23ebc7e:	482d      	ldr	r0, [pc, #180]	; (23ebd34 <_GLOBAL__sub_I___appProductVersion+0x214>)
 23ebc80:	f006 f8f7 	bl	23f1e72 <_ZN8LeafSensC1Ev>
SVCS3 tsm;
 23ebc84:	482c      	ldr	r0, [pc, #176]	; (23ebd38 <_GLOBAL__sub_I___appProductVersion+0x218>)
 23ebc86:	f008 f98f 	bl	23f3fa8 <_ZN5SVCS3C1Ev>
SVMULTI tmsm;
 23ebc8a:	482c      	ldr	r0, [pc, #176]	; (23ebd3c <_GLOBAL__sub_I___appProductVersion+0x21c>)
 23ebc8c:	f008 fa52 	bl	23f4134 <_ZN7SVMULTIC1Ev>
              error_(SYSTEM_ERROR_NONE) {
 23ebc90:	4b2b      	ldr	r3, [pc, #172]	; (23ebd40 <_GLOBAL__sub_I___appProductVersion+0x220>)
    SleepResult() {}
 23ebc92:	4a2c      	ldr	r2, [pc, #176]	; (23ebd44 <_GLOBAL__sub_I___appProductVersion+0x224>)
        set_system_mode(mode);
 23ebc94:	2002      	movs	r0, #2
              error_(SYSTEM_ERROR_NONE) {
 23ebc96:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
 23ebc9a:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 23ebc9c:	f00b f96e 	bl	23f6f7c <set_system_mode>
SYSTEM_THREAD(ENABLED);
 23ebca0:	4621      	mov	r1, r4
 23ebca2:	4628      	mov	r0, r5
}
 23ebca4:	b004      	add	sp, #16
 23ebca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
SYSTEM_THREAD(ENABLED);
 23ebcaa:	f00b b991 	b.w	23f6fd0 <system_thread_set_state>
 23ebcae:	bf00      	nop
 23ebcb0:	1006a7eb 	.word	0x1006a7eb
 23ebcb4:	1006a2d4 	.word	0x1006a2d4
 23ebcb8:	023fe76c 	.word	0x023fe76c
 23ebcbc:	1006a784 	.word	0x1006a784
 23ebcc0:	023fe780 	.word	0x023fe780
 23ebcc4:	1007aa58 	.word	0x1007aa58
 23ebcc8:	00061a80 	.word	0x00061a80
 23ebccc:	1006ad74 	.word	0x1006ad74
 23ebcd0:	1006ade8 	.word	0x1006ade8
 23ebcd4:	1006a7f0 	.word	0x1006a7f0
 23ebcd8:	1007ae70 	.word	0x1007ae70
 23ebcdc:	1007aa88 	.word	0x1007aa88
 23ebce0:	1006a810 	.word	0x1006a810
 23ebce4:	1006abf8 	.word	0x1006abf8
 23ebce8:	1006ac38 	.word	0x1006ac38
 23ebcec:	1006ab48 	.word	0x1006ab48
 23ebcf0:	1006aba0 	.word	0x1006aba0
 23ebcf4:	1006a948 	.word	0x1006a948
 23ebcf8:	1006aa48 	.word	0x1006aa48
 23ebcfc:	1006ae90 	.word	0x1006ae90
 23ebd00:	1006f0f8 	.word	0x1006f0f8
 23ebd04:	1006f104 	.word	0x1006f104
 23ebd08:	1006f110 	.word	0x1006f110
 23ebd0c:	1006f11c 	.word	0x1006f11c
 23ebd10:	1007abb4 	.word	0x1007abb4
 23ebd14:	1007abc4 	.word	0x1007abc4
 23ebd18:	1007ac18 	.word	0x1007ac18
 23ebd1c:	1007ac20 	.word	0x1007ac20
 23ebd20:	1007aa30 	.word	0x1007aa30
 23ebd24:	1006ae80 	.word	0x1006ae80
 23ebd28:	1006ae88 	.word	0x1006ae88
 23ebd2c:	1006f0c0 	.word	0x1006f0c0
 23ebd30:	1006f0dc 	.word	0x1006f0dc
 23ebd34:	1007ac00 	.word	0x1007ac00
 23ebd38:	1007ac10 	.word	0x1007ac10
 23ebd3c:	1007ac08 	.word	0x1007ac08
 23ebd40:	1006a7d8 	.word	0x1006a7d8
 23ebd44:	ffff0000 	.word	0xffff0000
 23ebd48:	000186a0 	.word	0x000186a0

023ebd4c <_Z15lora_initializev>:
void lora_initialize() {
 23ebd4c:	b510      	push	{r4, lr}
  if (lora_cf_validate()) {
 23ebd4e:	f7f9 fe71 	bl	23e5a34 <_Z16lora_cf_validatev>
 23ebd52:	2800      	cmp	r0, #0
 23ebd54:	d04b      	beq.n	23ebdee <_Z15lora_initializev+0xa2>
    pinMode(LORA_RESET, OUTPUT);
 23ebd56:	2101      	movs	r1, #1
 23ebd58:	2015      	movs	r0, #21
 23ebd5a:	f00d fe6f 	bl	23f9a3c <pinMode>
    digitalWrite(LORA_RESET, LOW);
 23ebd5e:	2100      	movs	r1, #0
 23ebd60:	2015      	movs	r0, #21
 23ebd62:	f00d fe7c 	bl	23f9a5e <digitalWrite>
    delay(100);
 23ebd66:	2064      	movs	r0, #100	; 0x64
 23ebd68:	f00b fc5e 	bl	23f7628 <delay>
    digitalWrite(LORA_RESET, HIGH);
 23ebd6c:	2101      	movs	r1, #1
 23ebd6e:	2015      	movs	r0, #21
 23ebd70:	f00d fe75 	bl	23f9a5e <digitalWrite>
    delay(100);
 23ebd74:	2064      	movs	r0, #100	; 0x64
 23ebd76:	f00b fc57 	bl	23f7628 <delay>
    if (rf95.init()) {
 23ebd7a:	481e      	ldr	r0, [pc, #120]	; (23ebdf4 <_Z15lora_initializev+0xa8>)
 23ebd7c:	f006 fd6c 	bl	23f2858 <_ZN7RH_RF954initEv>
 23ebd80:	b370      	cbz	r0, 23ebde0 <_Z15lora_initializev+0x94>
      rf95.setTxPower(cf_lora_txpower, false);
 23ebd82:	4b1d      	ldr	r3, [pc, #116]	; (23ebdf8 <_Z15lora_initializev+0xac>)
 23ebd84:	2200      	movs	r2, #0
 23ebd86:	f993 1000 	ldrsb.w	r1, [r3]
 23ebd8a:	481a      	ldr	r0, [pc, #104]	; (23ebdf4 <_Z15lora_initializev+0xa8>)
 23ebd8c:	f006 fd1c 	bl	23f27c8 <_ZN7RH_RF9510setTxPowerEab>
      rf95.setFrequency(cf_lora_freq);
 23ebd90:	4b1a      	ldr	r3, [pc, #104]	; (23ebdfc <_Z15lora_initializev+0xb0>)
      rf95.setThisAddress(cf_lora_unitid);
 23ebd92:	4c1b      	ldr	r4, [pc, #108]	; (23ebe00 <_Z15lora_initializev+0xb4>)
      rf95.setFrequency(cf_lora_freq);
 23ebd94:	ed93 0a00 	vldr	s0, [r3]
 23ebd98:	4816      	ldr	r0, [pc, #88]	; (23ebdf4 <_Z15lora_initializev+0xa8>)
 23ebd9a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 23ebd9e:	f006 fbaf 	bl	23f2500 <_ZN7RH_RF9512setFrequencyEf>
      rf95.setThisAddress(cf_lora_unitid);
 23ebda2:	7821      	ldrb	r1, [r4, #0]
 23ebda4:	4813      	ldr	r0, [pc, #76]	; (23ebdf4 <_Z15lora_initializev+0xa8>)
 23ebda6:	f006 f91f 	bl	23f1fe8 <_ZN15RHGenericDriver14setThisAddressEh>
      rf95.setHeaderFrom(cf_lora_unitid);
 23ebdaa:	7821      	ldrb	r1, [r4, #0]
 23ebdac:	4811      	ldr	r0, [pc, #68]	; (23ebdf4 <_Z15lora_initializev+0xa8>)
 23ebdae:	f006 f91f 	bl	23f1ff0 <_ZN15RHGenericDriver13setHeaderFromEh>
      rf95.setPromiscuous(true);
 23ebdb2:	2101      	movs	r1, #1
 23ebdb4:	480f      	ldr	r0, [pc, #60]	; (23ebdf4 <_Z15lora_initializev+0xa8>)
 23ebdb6:	f006 f915 	bl	23f1fe4 <_ZN15RHGenericDriver14setPromiscuousEb>
      rf95.setModeRx();
 23ebdba:	480e      	ldr	r0, [pc, #56]	; (23ebdf4 <_Z15lora_initializev+0xa8>)
 23ebdbc:	f006 fc96 	bl	23f26ec <_ZN7RH_RF959setModeRxEv>
      LORA_exists=true;
 23ebdc0:	2201      	movs	r2, #1
 23ebdc2:	4b10      	ldr	r3, [pc, #64]	; (23ebe04 <_Z15lora_initializev+0xb8>)
      Output ("LORA OK");
 23ebdc4:	4810      	ldr	r0, [pc, #64]	; (23ebe08 <_Z15lora_initializev+0xbc>)
      LORA_exists=true;
 23ebdc6:	701a      	strb	r2, [r3, #0]
    Output ("LORA INIT ERR");
 23ebdc8:	f7f9 fc60 	bl	23e568c <_Z6OutputPKc>
  lora_alarm_timer = System.millis() + (LORA_RESET_NOACTIVITY * 60000);  // Minutes * 60 seconds
 23ebdcc:	f7f9 f91b 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23ebdd0:	4a0e      	ldr	r2, [pc, #56]	; (23ebe0c <_Z15lora_initializev+0xc0>)
 23ebdd2:	4b0f      	ldr	r3, [pc, #60]	; (23ebe10 <_Z15lora_initializev+0xc4>)
 23ebdd4:	1880      	adds	r0, r0, r2
 23ebdd6:	f141 0100 	adc.w	r1, r1, #0
 23ebdda:	e9c3 0100 	strd	r0, r1, [r3]
}
 23ebdde:	bd10      	pop	{r4, pc}
      SystemStatusBits |= SSB_LORA;  // Turn On Bit
 23ebde0:	4a0c      	ldr	r2, [pc, #48]	; (23ebe14 <_Z15lora_initializev+0xc8>)
      Output ("LORA NF");
 23ebde2:	480d      	ldr	r0, [pc, #52]	; (23ebe18 <_Z15lora_initializev+0xcc>)
      SystemStatusBits |= SSB_LORA;  // Turn On Bit
 23ebde4:	6813      	ldr	r3, [r2, #0]
 23ebde6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 23ebdea:	6013      	str	r3, [r2, #0]
      Output ("LORA NF");
 23ebdec:	e7ec      	b.n	23ebdc8 <_Z15lora_initializev+0x7c>
    Output ("LORA INIT ERR");
 23ebdee:	480b      	ldr	r0, [pc, #44]	; (23ebe1c <_Z15lora_initializev+0xd0>)
 23ebdf0:	e7ea      	b.n	23ebdc8 <_Z15lora_initializev+0x7c>
 23ebdf2:	bf00      	nop
 23ebdf4:	1007aa88 	.word	0x1007aa88
 23ebdf8:	1006a194 	.word	0x1006a194
 23ebdfc:	1006a190 	.word	0x1006a190
 23ebe00:	1006a198 	.word	0x1006a198
 23ebe04:	1006a2b1 	.word	0x1006a2b1
 23ebe08:	023fe063 	.word	0x023fe063
 23ebe0c:	001b7740 	.word	0x001b7740
 23ebe10:	1006aeb8 	.word	0x1006aeb8
 23ebe14:	1006a178 	.word	0x1006a178
 23ebe18:	023fe06b 	.word	0x023fe06b
 23ebe1c:	023fe073 	.word	0x023fe073

023ebe20 <_Z14lora_msg_checkv.part.0>:
/* 
 *=======================================================================================================================
 * lora_msg_check()
 *=======================================================================================================================
 */
void lora_msg_check() {
 23ebe20:	b570      	push	{r4, r5, r6, lr}
    if (rf95.available()) {
      byte iv [N_BLOCK];
    
      // Should be a message for us now
      uint8_t buf[RH_RF95_MAX_MESSAGE_LEN]; // 251 Bytes
      uint8_t len  = sizeof(buf);
 23ebe22:	24fb      	movs	r4, #251	; 0xfb
void lora_msg_check() {
 23ebe24:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
      uint8_t from = rf95.headerFrom();
 23ebe28:	483b      	ldr	r0, [pc, #236]	; (23ebf18 <_Z14lora_msg_checkv.part.0+0xf8>)
      uint8_t len  = sizeof(buf);
 23ebe2a:	f88d 4013 	strb.w	r4, [sp, #19]
      uint8_t from = rf95.headerFrom();
 23ebe2e:	f006 f8eb 	bl	23f2008 <_ZN15RHGenericDriver10headerFromEv>
      uint8_t to   = rf95.headerTo();
 23ebe32:	4839      	ldr	r0, [pc, #228]	; (23ebf18 <_Z14lora_msg_checkv.part.0+0xf8>)
 23ebe34:	f006 f8e6 	bl	23f2004 <_ZN15RHGenericDriver8headerToEv>
      uint8_t id   = rf95.headerId();
 23ebe38:	4837      	ldr	r0, [pc, #220]	; (23ebf18 <_Z14lora_msg_checkv.part.0+0xf8>)
 23ebe3a:	f006 f8e7 	bl	23f200c <_ZN15RHGenericDriver8headerIdEv>
      uint8_t flags= rf95.headerFlags();
 23ebe3e:	4836      	ldr	r0, [pc, #216]	; (23ebf18 <_Z14lora_msg_checkv.part.0+0xf8>)
 23ebe40:	f006 f8e6 	bl	23f2010 <_ZN15RHGenericDriver11headerFlagsEv>
      int8_t  rssi = rf95.lastRssi(); 
 23ebe44:	4834      	ldr	r0, [pc, #208]	; (23ebf18 <_Z14lora_msg_checkv.part.0+0xf8>)
 23ebe46:	f006 f8e5 	bl	23f2014 <_ZN15RHGenericDriver8lastRssiEv>
      uint8_t byte2;
      uint8_t i;
      uint8_t msglen = 0;
      char msg[256];             // Used to hold decrypted lora messages

      memset(buf, 0, RH_RF95_MAX_MESSAGE_LEN);
 23ebe4a:	4622      	mov	r2, r4
 23ebe4c:	2100      	movs	r1, #0
 23ebe4e:	a809      	add	r0, sp, #36	; 0x24
      memset(msg, 0, RH_RF95_MAX_MESSAGE_LEN+1);
 23ebe50:	ac48      	add	r4, sp, #288	; 0x120
      memset(buf, 0, RH_RF95_MAX_MESSAGE_LEN);
 23ebe52:	f010 fc54 	bl	23fc6fe <memset>
      memset(msg, 0, RH_RF95_MAX_MESSAGE_LEN+1);
 23ebe56:	22fc      	movs	r2, #252	; 0xfc
 23ebe58:	2100      	movs	r1, #0
 23ebe5a:	4620      	mov	r0, r4
 23ebe5c:	f010 fc4f 	bl	23fc6fe <memset>
    
      if (rf95.recv(buf, &len)) {
 23ebe60:	482d      	ldr	r0, [pc, #180]	; (23ebf18 <_Z14lora_msg_checkv.part.0+0xf8>)
 23ebe62:	f10d 0213 	add.w	r2, sp, #19
 23ebe66:	a909      	add	r1, sp, #36	; 0x24
 23ebe68:	f006 face 	bl	23f2408 <_ZN7RH_RF954recvEPhS0_>
 23ebe6c:	2800      	cmp	r0, #0
 23ebe6e:	d043      	beq.n	23ebef8 <_Z14lora_msg_checkv.part.0+0xd8>
        // memcpy (msg, &buf[3], buf[0]);
        // Output (msg);
        // Serial_write ("LoRa Msg");
     
        aes.iv_inc();
 23ebe70:	482a      	ldr	r0, [pc, #168]	; (23ebf1c <_Z14lora_msg_checkv.part.0+0xfc>)
 23ebe72:	f002 f9be 	bl	23ee1f2 <_ZN3AES6iv_incEv>
        aes.set_IV(AES_MYIV);
 23ebe76:	4b2a      	ldr	r3, [pc, #168]	; (23ebf20 <_Z14lora_msg_checkv.part.0+0x100>)
 23ebe78:	4828      	ldr	r0, [pc, #160]	; (23ebf1c <_Z14lora_msg_checkv.part.0+0xfc>)
 23ebe7a:	e9d3 2300 	ldrd	r2, r3, [r3]
        aes.get_IV(iv);
 23ebe7e:	ad05      	add	r5, sp, #20
        aes.set_IV(AES_MYIV);
 23ebe80:	f002 f9a3 	bl	23ee1ca <_ZN3AES6set_IVEy>
        aes.get_IV(iv);
 23ebe84:	4629      	mov	r1, r5
 23ebe86:	4825      	ldr	r0, [pc, #148]	; (23ebf1c <_Z14lora_msg_checkv.part.0+0xfc>)
 23ebe88:	f002 f9cb 	bl	23ee222 <_ZN3AES6get_IVEPh>
        aes.do_aes_decrypt(buf, len, (byte *) msg, AES_KEY, 128, iv);
 23ebe8c:	2380      	movs	r3, #128	; 0x80
 23ebe8e:	9301      	str	r3, [sp, #4]
 23ebe90:	4b24      	ldr	r3, [pc, #144]	; (23ebf24 <_Z14lora_msg_checkv.part.0+0x104>)
 23ebe92:	f89d 2013 	ldrb.w	r2, [sp, #19]
 23ebe96:	9300      	str	r3, [sp, #0]
 23ebe98:	4820      	ldr	r0, [pc, #128]	; (23ebf1c <_Z14lora_msg_checkv.part.0+0xfc>)
 23ebe9a:	4623      	mov	r3, r4
 23ebe9c:	9502      	str	r5, [sp, #8]
 23ebe9e:	a909      	add	r1, sp, #36	; 0x24
 23ebea0:	f002 f9cc 	bl	23ee23c <_ZN3AES14do_aes_decryptEPhiS0_S0_iS0_>
      
        if ( ( msg[3] == 'I' && msg[4] == 'F') ||
 23ebea4:	78e3      	ldrb	r3, [r4, #3]
 23ebea6:	2b49      	cmp	r3, #73	; 0x49
 23ebea8:	d111      	bne.n	23ebece <_Z14lora_msg_checkv.part.0+0xae>
 23ebeaa:	7923      	ldrb	r3, [r4, #4]
 23ebeac:	2b46      	cmp	r3, #70	; 0x46
             ( msg[3] == 'L' && msg[4] == 'R')) {
 23ebeae:	d123      	bne.n	23ebef8 <_Z14lora_msg_checkv.part.0+0xd8>

          // Get length of what follows
          msglen = msg[0];
 23ebeb0:	f20d 1123 	addw	r1, sp, #291	; 0x123

          // Compute Checksum
          checksum=0;
          for (i=3; i<msglen; i++) {
 23ebeb4:	2203      	movs	r2, #3
          checksum=0;
 23ebeb6:	2300      	movs	r3, #0
 23ebeb8:	4608      	mov	r0, r1
          msglen = msg[0];
 23ebeba:	7825      	ldrb	r5, [r4, #0]
          for (i=3; i<msglen; i++) {
 23ebebc:	4295      	cmp	r5, r2
 23ebebe:	d90b      	bls.n	23ebed8 <_Z14lora_msg_checkv.part.0+0xb8>
            checksum += msg[i];
 23ebec0:	f811 6b01 	ldrb.w	r6, [r1], #1
          for (i=3; i<msglen; i++) {
 23ebec4:	3201      	adds	r2, #1
            checksum += msg[i];
 23ebec6:	4433      	add	r3, r6
 23ebec8:	b29b      	uxth	r3, r3
          for (i=3; i<msglen; i++) {
 23ebeca:	b2d2      	uxtb	r2, r2
 23ebecc:	e7f6      	b.n	23ebebc <_Z14lora_msg_checkv.part.0+0x9c>
        if ( ( msg[3] == 'I' && msg[4] == 'F') ||
 23ebece:	2b4c      	cmp	r3, #76	; 0x4c
 23ebed0:	d112      	bne.n	23ebef8 <_Z14lora_msg_checkv.part.0+0xd8>
             ( msg[3] == 'L' && msg[4] == 'R')) {
 23ebed2:	7923      	ldrb	r3, [r4, #4]
 23ebed4:	2b52      	cmp	r3, #82	; 0x52
 23ebed6:	e7ea      	b.n	23ebeae <_Z14lora_msg_checkv.part.0+0x8e>
          }
          byte1 = checksum>>8;
          byte2 = checksum%256;

          // Validate Checksum against sent checksum
          if ((byte1 == msg[1]) && (byte2 == msg[2])) {
 23ebed8:	7862      	ldrb	r2, [r4, #1]
 23ebeda:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
 23ebede:	d117      	bne.n	23ebf10 <_Z14lora_msg_checkv.part.0+0xf0>
 23ebee0:	78a2      	ldrb	r2, [r4, #2]
 23ebee2:	b2db      	uxtb	r3, r3
 23ebee4:	429a      	cmp	r2, r3
 23ebee6:	d113      	bne.n	23ebf10 <_Z14lora_msg_checkv.part.0+0xf0>
            // Make what follows a string
            msg[msglen]=0;
 23ebee8:	2300      	movs	r3, #0
 23ebeea:	5563      	strb	r3, [r4, r5]

            char *payload = (char*)(msg+3); // After length and 2 checksum bytes

            // Display LoRa Message on Serial Console           
            Serial_write (payload);
 23ebeec:	f7f9 fba4 	bl	23e5638 <_Z12Serial_writePKc>

            lora_relay_msg (payload);
 23ebef0:	f20d 1023 	addw	r0, sp, #291	; 0x123
 23ebef4:	f7fc fbee 	bl	23e86d4 <_Z14lora_relay_msgPc>
            Output ("LORA CS-ERR");
          }
        }
      }
      // Received LoRa Signal, Reset alarm
      lora_alarm_timer = System.millis() + (LORA_RESET_NOACTIVITY * 60000);
 23ebef8:	f7f9 f885 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23ebefc:	4a0a      	ldr	r2, [pc, #40]	; (23ebf28 <_Z14lora_msg_checkv.part.0+0x108>)
 23ebefe:	4b0b      	ldr	r3, [pc, #44]	; (23ebf2c <_Z14lora_msg_checkv.part.0+0x10c>)
 23ebf00:	1880      	adds	r0, r0, r2
 23ebf02:	f141 0100 	adc.w	r1, r1, #0
 23ebf06:	e9c3 0100 	strd	r0, r1, [r3]
        // Need to set some system status bit here too
        lora_initialize();
      }
    }
  }
}
 23ebf0a:	f50d 7d08 	add.w	sp, sp, #544	; 0x220
 23ebf0e:	bd70      	pop	{r4, r5, r6, pc}
            Output ("LORA CS-ERR");
 23ebf10:	4807      	ldr	r0, [pc, #28]	; (23ebf30 <_Z14lora_msg_checkv.part.0+0x110>)
 23ebf12:	f7f9 fbbb 	bl	23e568c <_Z6OutputPKc>
 23ebf16:	e7ef      	b.n	23ebef8 <_Z14lora_msg_checkv.part.0+0xd8>
 23ebf18:	1007aa88 	.word	0x1007aa88
 23ebf1c:	1006a810 	.word	0x1006a810
 23ebf20:	1006a278 	.word	0x1006a278
 23ebf24:	1006a264 	.word	0x1006a264
 23ebf28:	001b7740 	.word	0x001b7740
 23ebf2c:	1006aeb8 	.word	0x1006aeb8
 23ebf30:	023fe081 	.word	0x023fe081

023ebf34 <_Z14lora_msg_checkv>:
void lora_msg_check() {
 23ebf34:	b508      	push	{r3, lr}
  if (LORA_exists) {
 23ebf36:	4b0e      	ldr	r3, [pc, #56]	; (23ebf70 <_Z14lora_msg_checkv+0x3c>)
 23ebf38:	781b      	ldrb	r3, [r3, #0]
 23ebf3a:	b1bb      	cbz	r3, 23ebf6c <_Z14lora_msg_checkv+0x38>
    if (rf95.available()) {
 23ebf3c:	480d      	ldr	r0, [pc, #52]	; (23ebf74 <_Z14lora_msg_checkv+0x40>)
 23ebf3e:	f006 fbe6 	bl	23f270e <_ZN7RH_RF959availableEv>
 23ebf42:	b118      	cbz	r0, 23ebf4c <_Z14lora_msg_checkv+0x18>
}
 23ebf44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 23ebf48:	f7ff bf6a 	b.w	23ebe20 <_Z14lora_msg_checkv.part.0>
      if (System.millis() >= lora_alarm_timer) {
 23ebf4c:	f7f9 f85b 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23ebf50:	4b09      	ldr	r3, [pc, #36]	; (23ebf78 <_Z14lora_msg_checkv+0x44>)
 23ebf52:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ebf56:	4290      	cmp	r0, r2
 23ebf58:	eb71 0303 	sbcs.w	r3, r1, r3
 23ebf5c:	d306      	bcc.n	23ebf6c <_Z14lora_msg_checkv+0x38>
        Output ("LORA Init");
 23ebf5e:	4807      	ldr	r0, [pc, #28]	; (23ebf7c <_Z14lora_msg_checkv+0x48>)
 23ebf60:	f7f9 fb94 	bl	23e568c <_Z6OutputPKc>
}
 23ebf64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        lora_initialize();
 23ebf68:	f7ff bef0 	b.w	23ebd4c <_Z15lora_initializev>
}
 23ebf6c:	bd08      	pop	{r3, pc}
 23ebf6e:	bf00      	nop
 23ebf70:	1006a2b1 	.word	0x1006a2b1
 23ebf74:	1007aa88 	.word	0x1007aa88
 23ebf78:	1006aeb8 	.word	0x1006aeb8
 23ebf7c:	023fe08d 	.word	0x023fe08d

023ebf80 <_Z13lora_msg_pollv>:
/* 
 *=======================================================================================================================
 * lora_msg_poll() -- Spend 750ms looking for LoRa Messages
 *=======================================================================================================================
 */
void lora_msg_poll() {
 23ebf80:	b508      	push	{r3, lr}
  for (int i=0; i<3; i++) {
    lora_msg_check();
 23ebf82:	f7ff ffd7 	bl	23ebf34 <_Z14lora_msg_checkv>
    delay (250);
 23ebf86:	20fa      	movs	r0, #250	; 0xfa
 23ebf88:	f00b fb4e 	bl	23f7628 <delay>
    lora_msg_check();
 23ebf8c:	f7ff ffd2 	bl	23ebf34 <_Z14lora_msg_checkv>
    delay (250);
 23ebf90:	20fa      	movs	r0, #250	; 0xfa
 23ebf92:	f00b fb49 	bl	23f7628 <delay>
    lora_msg_check();
 23ebf96:	f7ff ffcd 	bl	23ebf34 <_Z14lora_msg_checkv>
  }
 23ebf9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay (250);
 23ebf9e:	20fa      	movs	r0, #250	; 0xfa
 23ebfa0:	f00b bb42 	b.w	23f7628 <delay>

023ebfa4 <_Z28Wind_Distance_Air_Initializev>:
void Wind_Distance_Air_Initialize() {
 23ebfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  anemometer_interrupt_count = 0;
 23ebfa6:	2400      	movs	r4, #0
  Output ("WindDist Init()");
 23ebfa8:	4821      	ldr	r0, [pc, #132]	; (23ec030 <_Z28Wind_Distance_Air_Initializev+0x8c>)
 23ebfaa:	f7f9 fb6f 	bl	23e568c <_Z6OutputPKc>
  anemometer_interrupt_count = 0;
 23ebfae:	4b21      	ldr	r3, [pc, #132]	; (23ec034 <_Z28Wind_Distance_Air_Initializev+0x90>)
    if (A4_State == A4_STATE_DISTANCE) {
 23ebfb0:	4e21      	ldr	r6, [pc, #132]	; (23ec038 <_Z28Wind_Distance_Air_Initializev+0x94>)
  anemometer_interrupt_count = 0;
 23ebfb2:	601c      	str	r4, [r3, #0]
  anemometer_interrupt_stime = System.millis();
 23ebfb4:	f7f9 f827 	bl	23e5006 <_ZN11SystemClass6millisEv>
  wind.gust = 0.0;
 23ebfb8:	2200      	movs	r2, #0
  anemometer_interrupt_stime = System.millis();
 23ebfba:	4b20      	ldr	r3, [pc, #128]	; (23ec03c <_Z28Wind_Distance_Air_Initializev+0x98>)
    if (PM25AQI_exists) {
 23ebfbc:	4f20      	ldr	r7, [pc, #128]	; (23ec040 <_Z28Wind_Distance_Air_Initializev+0x9c>)
  anemometer_interrupt_stime = System.millis();
 23ebfbe:	e9c3 0100 	strd	r0, r1, [r3]
  wind.gust = 0.0;
 23ebfc2:	4b20      	ldr	r3, [pc, #128]	; (23ec044 <_Z28Wind_Distance_Air_Initializev+0xa0>)
 23ebfc4:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
  wind.gust_direction = -1;
 23ebfc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  wind.bucket_idx = 0;
 23ebfcc:	f8c3 41e0 	str.w	r4, [r3, #480]	; 0x1e0
 23ebfd0:	243c      	movs	r4, #60	; 0x3c
  wind.gust_direction = -1;
 23ebfd2:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
    lora_msg_poll(); // 750ms Second Delay
 23ebfd6:	f7ff ffd3 	bl	23ebf80 <_Z13lora_msg_pollv>
    HeartBeat();     // Provides a 250ms delay
 23ebfda:	f7fd fcbd 	bl	23e9958 <_Z9HeartBeatv>
    Wind_TakeReading();
 23ebfde:	f7fb fca7 	bl	23e7930 <_Z16Wind_TakeReadingv>
    if (A4_State == A4_STATE_DISTANCE) {
 23ebfe2:	6833      	ldr	r3, [r6, #0]
 23ebfe4:	2b01      	cmp	r3, #1
 23ebfe6:	d101      	bne.n	23ebfec <_Z28Wind_Distance_Air_Initializev+0x48>
      DistanceGauge_TakeReading();
 23ebfe8:	f7fb fa06 	bl	23e73f8 <_Z25DistanceGauge_TakeReadingv>
    if (PM25AQI_exists) {
 23ebfec:	783b      	ldrb	r3, [r7, #0]
 23ebfee:	b10b      	cbz	r3, 23ebff4 <_Z28Wind_Distance_Air_Initializev+0x50>
      pm25aqi_TakeReading();
 23ebff0:	f7fa fec0 	bl	23e6d74 <_Z19pm25aqi_TakeReadingv>
    if (SerialConsoleEnabled) Serial.print(".");  // Provide Serial Console some feedback as we loop and wait til next observation
 23ebff4:	4d14      	ldr	r5, [pc, #80]	; (23ec048 <_Z28Wind_Distance_Air_Initializev+0xa4>)
 23ebff6:	782b      	ldrb	r3, [r5, #0]
 23ebff8:	b123      	cbz	r3, 23ec004 <_Z28Wind_Distance_Air_Initializev+0x60>
 23ebffa:	f00d fac1 	bl	23f9580 <_Z16_fetch_usbserialv>
 23ebffe:	4913      	ldr	r1, [pc, #76]	; (23ec04c <_Z28Wind_Distance_Air_Initializev+0xa8>)
 23ec000:	f00c fd54 	bl	23f8aac <_ZN5Print5printEPKc>
    OLED_spin();
 23ec004:	f7f9 f9bc 	bl	23e5380 <_Z9OLED_spinv>
  for (int i=0; i< WIND_READINGS; i++) {
 23ec008:	3c01      	subs	r4, #1
 23ec00a:	d1e4      	bne.n	23ebfd6 <_Z28Wind_Distance_Air_Initializev+0x32>
  Wind_TakeReading();
 23ec00c:	f7fb fc90 	bl	23e7930 <_Z16Wind_TakeReadingv>
  if (A4_State == A4_STATE_DISTANCE) {
 23ec010:	6833      	ldr	r3, [r6, #0]
 23ec012:	2b01      	cmp	r3, #1
 23ec014:	d101      	bne.n	23ec01a <_Z28Wind_Distance_Air_Initializev+0x76>
    DistanceGauge_TakeReading();
 23ec016:	f7fb f9ef 	bl	23e73f8 <_Z25DistanceGauge_TakeReadingv>
  if (SerialConsoleEnabled) Serial.println();  // Send a newline out to cleanup after all the periods we have been logging
 23ec01a:	782b      	ldrb	r3, [r5, #0]
 23ec01c:	b11b      	cbz	r3, 23ec026 <_Z28Wind_Distance_Air_Initializev+0x82>
 23ec01e:	f00d faaf 	bl	23f9580 <_Z16_fetch_usbserialv>
 23ec022:	f00c fd4e 	bl	23f8ac2 <_ZN5Print7printlnEv>
  ws_refresh = false; // Set to false since we have just initialized wind speed data.
 23ec026:	2200      	movs	r2, #0
 23ec028:	4b09      	ldr	r3, [pc, #36]	; (23ec050 <_Z28Wind_Distance_Air_Initializev+0xac>)
 23ec02a:	701a      	strb	r2, [r3, #0]
}
 23ec02c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23ec02e:	bf00      	nop
 23ec030:	023fe097 	.word	0x023fe097
 23ec034:	1006a938 	.word	0x1006a938
 23ec038:	1006a25c 	.word	0x1006a25c
 23ec03c:	1006a940 	.word	0x1006a940
 23ec040:	1006a2cd 	.word	0x1006a2cd
 23ec044:	1007ac6c 	.word	0x1007ac6c
 23ec048:	1006a7d7 	.word	0x1006a7d7
 23ec04c:	023fe0a7 	.word	0x023fe0a7
 23ec050:	1007ae58 	.word	0x1007ae58

023ec054 <_Z14BackGroundWorkv>:
void BackGroundWork() {
 23ec054:	b538      	push	{r3, r4, r5, lr}
  uint64_t OneSecondFromNow = System.millis() + 1000;
 23ec056:	f7f8 ffd6 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23ec05a:	f510 747a 	adds.w	r4, r0, #1000	; 0x3e8
 23ec05e:	f141 0500 	adc.w	r5, r1, #0
  Wind_TakeReading();
 23ec062:	f7fb fc65 	bl	23e7930 <_Z16Wind_TakeReadingv>
  if (A4_State == A4_STATE_DISTANCE) {
 23ec066:	4b16      	ldr	r3, [pc, #88]	; (23ec0c0 <_Z14BackGroundWorkv+0x6c>)
 23ec068:	681b      	ldr	r3, [r3, #0]
 23ec06a:	2b01      	cmp	r3, #1
 23ec06c:	d101      	bne.n	23ec072 <_Z14BackGroundWorkv+0x1e>
    DistanceGauge_TakeReading();
 23ec06e:	f7fb f9c3 	bl	23e73f8 <_Z25DistanceGauge_TakeReadingv>
  if (PM25AQI_exists) {
 23ec072:	4b14      	ldr	r3, [pc, #80]	; (23ec0c4 <_Z14BackGroundWorkv+0x70>)
 23ec074:	781b      	ldrb	r3, [r3, #0]
 23ec076:	b10b      	cbz	r3, 23ec07c <_Z14BackGroundWorkv+0x28>
    pm25aqi_TakeReading();
 23ec078:	f7fa fe7c 	bl	23e6d74 <_Z19pm25aqi_TakeReadingv>
  HeartBeat();  // Provides a 250ms delay
 23ec07c:	f7fd fc6c 	bl	23e9958 <_Z9HeartBeatv>
  if (LORA_exists) {
 23ec080:	4b11      	ldr	r3, [pc, #68]	; (23ec0c8 <_Z14BackGroundWorkv+0x74>)
 23ec082:	781b      	ldrb	r3, [r3, #0]
 23ec084:	b10b      	cbz	r3, 23ec08a <_Z14BackGroundWorkv+0x36>
    lora_msg_poll(); // Provides a 750ms delay
 23ec086:	f7ff ff7b 	bl	23ebf80 <_Z13lora_msg_pollv>
  int64_t TimeRemaining = (OneSecondFromNow - System.millis());
 23ec08a:	f7f8 ffbc 	bl	23e5006 <_ZN11SystemClass6millisEv>
  if ((TimeRemaining > 0) && (TimeRemaining < 1000)) {
 23ec08e:	f240 33e7 	movw	r3, #999	; 0x3e7
  int64_t TimeRemaining = (OneSecondFromNow - System.millis());
 23ec092:	1a20      	subs	r0, r4, r0
 23ec094:	eb65 0101 	sbc.w	r1, r5, r1
  if ((TimeRemaining > 0) && (TimeRemaining < 1000)) {
 23ec098:	1e42      	subs	r2, r0, #1
 23ec09a:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 23ec09e:	429a      	cmp	r2, r3
 23ec0a0:	f171 0300 	sbcs.w	r3, r1, #0
 23ec0a4:	d201      	bcs.n	23ec0aa <_Z14BackGroundWorkv+0x56>
    delay (TimeRemaining);
 23ec0a6:	f00b fabf 	bl	23f7628 <delay>
  if (TurnLedOff) {   // Turned on by rain gauge interrupt handler
 23ec0aa:	4c08      	ldr	r4, [pc, #32]	; (23ec0cc <_Z14BackGroundWorkv+0x78>)
 23ec0ac:	7823      	ldrb	r3, [r4, #0]
 23ec0ae:	b133      	cbz	r3, 23ec0be <_Z14BackGroundWorkv+0x6a>
    digitalWrite(LED_PIN, LOW);  
 23ec0b0:	4b07      	ldr	r3, [pc, #28]	; (23ec0d0 <_Z14BackGroundWorkv+0x7c>)
 23ec0b2:	2100      	movs	r1, #0
 23ec0b4:	8818      	ldrh	r0, [r3, #0]
 23ec0b6:	f00d fcd2 	bl	23f9a5e <digitalWrite>
    TurnLedOff = false;
 23ec0ba:	2300      	movs	r3, #0
 23ec0bc:	7023      	strb	r3, [r4, #0]
}
 23ec0be:	bd38      	pop	{r3, r4, r5, pc}
 23ec0c0:	1006a25c 	.word	0x1006a25c
 23ec0c4:	1006a2cd 	.word	0x1006a2cd
 23ec0c8:	1006a2b1 	.word	0x1006a2b1
 23ec0cc:	1006a7e7 	.word	0x1006a7e7
 23ec0d0:	1006a0fc 	.word	0x1006a0fc

023ec0d4 <_Z16Particle_PublishPc>:
/*
 * ======================================================================================================================
 * Particle_Publish() - Publish to Particle what is in msgbuf
 * ======================================================================================================================
 */
bool Particle_Publish(char *EventName) {
 23ec0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23ec0d6:	b087      	sub	sp, #28
 23ec0d8:	4604      	mov	r4, r0
 23ec0da:	f00b f83d 	bl	23f7158 <spark_cloud_flag_connected>
  // Calling Particle.publish() when the cloud connection has been turned off will not publish an event. 
  // This is indicated by the return success code of false. If the cloud connection is turned on and 
  // trying to connect to the cloud unsuccessfully, Particle.publish() may block for up to 20 seconds 
  // (normal conditions) to 10 minutes (unusual conditions). Checking Particle.connected() 
  // before calling Particle.publish() can help prevent this.
  if (Particle.connected()) {
 23ec0de:	4605      	mov	r5, r0
 23ec0e0:	2800      	cmp	r0, #0
 23ec0e2:	d03e      	beq.n	23ec162 <_Z16Particle_PublishPc+0x8e>
    uint64_t start_ts = System.millis();
 23ec0e4:	f7f8 ff8f 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23ec0e8:	4606      	mov	r6, r0
        return publish_event(eventName, eventData, eventData ? std::strlen(eventData) : 0, static_cast<int>(particle::ContentType::TEXT), ttl, flags1 | flags2);
 23ec0ea:	4820      	ldr	r0, [pc, #128]	; (23ec16c <_Z16Particle_PublishPc+0x98>)
 23ec0ec:	460f      	mov	r7, r1
 23ec0ee:	f7f8 f973 	bl	23e43d8 <strlen>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 23ec0f2:	4a1f      	ldr	r2, [pc, #124]	; (23ec170 <_Z16Particle_PublishPc+0x9c>)
 23ec0f4:	2500      	movs	r5, #0
 23ec0f6:	7812      	ldrb	r2, [r2, #0]
 23ec0f8:	4603      	mov	r3, r0
 23ec0fa:	f88d 2008 	strb.w	r2, [sp, #8]
 23ec0fe:	223c      	movs	r2, #60	; 0x3c
 23ec100:	4621      	mov	r1, r4
 23ec102:	e9cd 5200 	strd	r5, r2, [sp]
 23ec106:	a804      	add	r0, sp, #16
 23ec108:	4a18      	ldr	r2, [pc, #96]	; (23ec16c <_Z16Particle_PublishPc+0x98>)
 23ec10a:	f00b fe5f 	bl	23f7dcc <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE>
    explicit Future(ResultT result = ResultT()) :
            FutureBase<ResultT, ContextT>(std::make_shared<detail::FutureImpl<ResultT, ContextT>>(std::move(result))) {
    }

    ResultT result() const {
        return this->p_->result();
 23ec10e:	4629      	mov	r1, r5
 23ec110:	9804      	ldr	r0, [sp, #16]
 23ec112:	f7ff fce0 	bl	23ebad6 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 23ec116:	9c05      	ldr	r4, [sp, #20]
 23ec118:	4605      	mov	r5, r0
 23ec11a:	b17c      	cbz	r4, 23ec13c <_Z16Particle_PublishPc+0x68>
      if (--_M_use_count == 0)
 23ec11c:	6863      	ldr	r3, [r4, #4]
 23ec11e:	3b01      	subs	r3, #1
 23ec120:	6063      	str	r3, [r4, #4]
 23ec122:	b95b      	cbnz	r3, 23ec13c <_Z16Particle_PublishPc+0x68>
          _M_dispose();
 23ec124:	6823      	ldr	r3, [r4, #0]
 23ec126:	4620      	mov	r0, r4
 23ec128:	689b      	ldr	r3, [r3, #8]
 23ec12a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23ec12c:	68a3      	ldr	r3, [r4, #8]
 23ec12e:	3b01      	subs	r3, #1
 23ec130:	60a3      	str	r3, [r4, #8]
 23ec132:	b91b      	cbnz	r3, 23ec13c <_Z16Particle_PublishPc+0x68>
            _M_destroy();
 23ec134:	6823      	ldr	r3, [r4, #0]
 23ec136:	4620      	mov	r0, r4
 23ec138:	68db      	ldr	r3, [r3, #12]
 23ec13a:	4798      	blx	r3
    if (Particle.publish(EventName, msgbuf, WITH_ACK)) {  // PRIVATE flag is always used even when not specified
 23ec13c:	b175      	cbz	r5, 23ec15c <_Z16Particle_PublishPc+0x88>

      // A safty check, If we got hung up for N seconds or more sending, 
      // let's invalidate our wind data and force a reinit in the main loop()
      if ((System.millis() - start_ts) >= 2000) {
 23ec13e:	f7f8 ff62 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23ec142:	1b80      	subs	r0, r0, r6
 23ec144:	eb61 0107 	sbc.w	r1, r1, r7
 23ec148:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 23ec14c:	f171 0300 	sbcs.w	r3, r1, #0
        ws_refresh = true;
 23ec150:	bf22      	ittt	cs
 23ec152:	2201      	movcs	r2, #1
 23ec154:	4b07      	ldrcs	r3, [pc, #28]	; (23ec174 <_Z16Particle_PublishPc+0xa0>)
 23ec156:	701a      	strbcs	r2, [r3, #0]
      }
      // Currently, a device can publish at rate of about 1 event/sec, with bursts of up to 4 allowed in 1 second. 
      // Back to back burst of 4 messages will take 4 seconds to recover.
      // Our BackGroundWork() provides a delay between observations of 1 second 
      BackGroundWork();
 23ec158:	f7ff ff7c 	bl	23ec054 <_Z14BackGroundWorkv>
  }
  else {
    Output ("Particle:NotReady");
  }
  return(false);
}
 23ec15c:	4628      	mov	r0, r5
 23ec15e:	b007      	add	sp, #28
 23ec160:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Output ("Particle:NotReady");
 23ec162:	4805      	ldr	r0, [pc, #20]	; (23ec178 <_Z16Particle_PublishPc+0xa4>)
 23ec164:	f7f9 fa92 	bl	23e568c <_Z6OutputPKc>
 23ec168:	e7f8      	b.n	23ec15c <_Z16Particle_PublishPc+0x88>
 23ec16a:	bf00      	nop
 23ec16c:	1006f128 	.word	0x1006f128
 23ec170:	1006a7eb 	.word	0x1006a7eb
 23ec174:	1007ae58 	.word	0x1007ae58
 23ec178:	023fe0a9 	.word	0x023fe0a9

023ec17c <_Z14OBS_FS_Publishi>:
/*
 * ======================================================================================================================
 * OBS_FS_Publish() - obs[i].inuse for this observation must be true prior to calling
 * ======================================================================================================================
 */
bool OBS_FS_Publish(int i) {
 23ec17c:	b513      	push	{r0, r1, r4, lr}
 23ec17e:	9001      	str	r0, [sp, #4]
  OBS_FS_Build_JSON(i);  
 23ec180:	f7fc fd1a 	bl	23e8bb8 <_Z17OBS_FS_Build_JSONi>
  if (Particle_Publish((char *) "FS")) {
 23ec184:	480e      	ldr	r0, [pc, #56]	; (23ec1c0 <_Z14OBS_FS_Publishi+0x44>)
 23ec186:	f7ff ffa5 	bl	23ec0d4 <_Z16Particle_PublishPc>
 23ec18a:	9a01      	ldr	r2, [sp, #4]
 23ec18c:	4604      	mov	r4, r0
 23ec18e:	b188      	cbz	r0, 23ec1b4 <_Z14OBS_FS_Publishi+0x38>
    Serial_write (msgbuf);
 23ec190:	480c      	ldr	r0, [pc, #48]	; (23ec1c4 <_Z14OBS_FS_Publishi+0x48>)
 23ec192:	f7f9 fa51 	bl	23e5638 <_Z12Serial_writePKc>
    sprintf (Buffer32Bytes, "FS[%d]->PUB OK[%d]", i, strlen(msgbuf)+1);
 23ec196:	480b      	ldr	r0, [pc, #44]	; (23ec1c4 <_Z14OBS_FS_Publishi+0x48>)
 23ec198:	f7f8 f91e 	bl	23e43d8 <strlen>
 23ec19c:	9a01      	ldr	r2, [sp, #4]
 23ec19e:	1c43      	adds	r3, r0, #1
 23ec1a0:	4909      	ldr	r1, [pc, #36]	; (23ec1c8 <_Z14OBS_FS_Publishi+0x4c>)
 23ec1a2:	480a      	ldr	r0, [pc, #40]	; (23ec1cc <_Z14OBS_FS_Publishi+0x50>)
 23ec1a4:	f00b f960 	bl	23f7468 <sprintf>
    Output(Buffer32Bytes);
    return(true);
  }
  else {
    sprintf (Buffer32Bytes, "FS[%d]->PUB ERR", i);
    Output(Buffer32Bytes);
 23ec1a8:	4808      	ldr	r0, [pc, #32]	; (23ec1cc <_Z14OBS_FS_Publishi+0x50>)
 23ec1aa:	f7f9 fa6f 	bl	23e568c <_Z6OutputPKc>
    return(false);
  }
}
 23ec1ae:	4620      	mov	r0, r4
 23ec1b0:	b002      	add	sp, #8
 23ec1b2:	bd10      	pop	{r4, pc}
    sprintf (Buffer32Bytes, "FS[%d]->PUB ERR", i);
 23ec1b4:	4906      	ldr	r1, [pc, #24]	; (23ec1d0 <_Z14OBS_FS_Publishi+0x54>)
 23ec1b6:	4805      	ldr	r0, [pc, #20]	; (23ec1cc <_Z14OBS_FS_Publishi+0x50>)
 23ec1b8:	f00b f956 	bl	23f7468 <sprintf>
 23ec1bc:	e7f4      	b.n	23ec1a8 <_Z14OBS_FS_Publishi+0x2c>
 23ec1be:	bf00      	nop
 23ec1c0:	023fd7cb 	.word	0x023fd7cb
 23ec1c4:	1006f128 	.word	0x1006f128
 23ec1c8:	023fe0bb 	.word	0x023fe0bb
 23ec1cc:	1006a287 	.word	0x1006a287
 23ec1d0:	023fe0ce 	.word	0x023fe0ce

023ec1d4 <_Z17OBS_Relay_Publishi>:
/*
 * ======================================================================================================================
 * OBS_Relay_Publish()
 * ======================================================================================================================
 */
bool OBS_Relay_Publish(int relay_type) {
 23ec1d4:	b570      	push	{r4, r5, r6, lr}
  if (relay_type > 0) {  // little safty check. Should not be 0
 23ec1d6:	1e04      	subs	r4, r0, #0
 23ec1d8:	dd16      	ble.n	23ec208 <_Z17OBS_Relay_Publishi+0x34>
    Serial_write (msgbuf);
    if (Particle_Publish((char *) relay_msgtypes[relay_type])) {
 23ec1da:	4e10      	ldr	r6, [pc, #64]	; (23ec21c <_Z17OBS_Relay_Publishi+0x48>)
    Serial_write (msgbuf);
 23ec1dc:	4810      	ldr	r0, [pc, #64]	; (23ec220 <_Z17OBS_Relay_Publishi+0x4c>)
 23ec1de:	f7f9 fa2b 	bl	23e5638 <_Z12Serial_writePKc>
    if (Particle_Publish((char *) relay_msgtypes[relay_type])) {
 23ec1e2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 23ec1e6:	f7ff ff75 	bl	23ec0d4 <_Z16Particle_PublishPc>
      sprintf (Buffer32Bytes, "RELAY[%s]->PUB OK", relay_msgtypes[relay_type]);
 23ec1ea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    if (Particle_Publish((char *) relay_msgtypes[relay_type])) {
 23ec1ee:	4605      	mov	r5, r0
 23ec1f0:	b140      	cbz	r0, 23ec204 <_Z17OBS_Relay_Publishi+0x30>
      sprintf (Buffer32Bytes, "RELAY[%s]->PUB OK", relay_msgtypes[relay_type]);
 23ec1f2:	490c      	ldr	r1, [pc, #48]	; (23ec224 <_Z17OBS_Relay_Publishi+0x50>)
      Output(Buffer32Bytes);
      return(true);
    }
    else {
      sprintf (Buffer32Bytes, "RELAY[%s]->PUB ERR", relay_msgtypes[relay_type]);
 23ec1f4:	480c      	ldr	r0, [pc, #48]	; (23ec228 <_Z17OBS_Relay_Publishi+0x54>)
 23ec1f6:	f00b f937 	bl	23f7468 <sprintf>
      Output(Buffer32Bytes);       
 23ec1fa:	480b      	ldr	r0, [pc, #44]	; (23ec228 <_Z17OBS_Relay_Publishi+0x54>)
 23ec1fc:	f7f9 fa46 	bl	23e568c <_Z6OutputPKc>
  else {
    sprintf (Buffer32Bytes, "RELAY TYPE[%d] INVALID", relay_type);
    Output(Buffer32Bytes);
    return(false);
  }
}
 23ec200:	4628      	mov	r0, r5
 23ec202:	bd70      	pop	{r4, r5, r6, pc}
      sprintf (Buffer32Bytes, "RELAY[%s]->PUB ERR", relay_msgtypes[relay_type]);
 23ec204:	4909      	ldr	r1, [pc, #36]	; (23ec22c <_Z17OBS_Relay_Publishi+0x58>)
 23ec206:	e7f5      	b.n	23ec1f4 <_Z17OBS_Relay_Publishi+0x20>
    sprintf (Buffer32Bytes, "RELAY TYPE[%d] INVALID", relay_type);
 23ec208:	4622      	mov	r2, r4
 23ec20a:	4909      	ldr	r1, [pc, #36]	; (23ec230 <_Z17OBS_Relay_Publishi+0x5c>)
 23ec20c:	4806      	ldr	r0, [pc, #24]	; (23ec228 <_Z17OBS_Relay_Publishi+0x54>)
 23ec20e:	f00b f92b 	bl	23f7468 <sprintf>
    Output(Buffer32Bytes);
 23ec212:	4805      	ldr	r0, [pc, #20]	; (23ec228 <_Z17OBS_Relay_Publishi+0x54>)
 23ec214:	f7f9 fa3a 	bl	23e568c <_Z6OutputPKc>
    return(false);
 23ec218:	2500      	movs	r5, #0
 23ec21a:	e7f1      	b.n	23ec200 <_Z17OBS_Relay_Publishi+0x2c>
 23ec21c:	1006a1b0 	.word	0x1006a1b0
 23ec220:	1006f128 	.word	0x1006f128
 23ec224:	023fe0de 	.word	0x023fe0de
 23ec228:	1006a287 	.word	0x1006a287
 23ec22c:	023fe0f0 	.word	0x023fe0f0
 23ec230:	023fe103 	.word	0x023fe103

023ec234 <_Z7INFO_Dov>:
/*
 * ======================================================================================================================
 * INFO_Do() - Get and Send System Information to Particle Cloud
 * ======================================================================================================================
 */
bool INFO_Do() {
 23ec234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ec238:	b0f6      	sub	sp, #472	; 0x1d8
  char buf[256];
  const char *comma = "";
  time_t ts = Time.now();
 23ec23a:	f00d f88a 	bl	23f9352 <_ZN9TimeClass3nowEv>

  Output("INFO_DO()");

  SendSystemInformation = false;
 23ec23e:	2400      	movs	r4, #0
  time_t ts = Time.now();
 23ec240:	4605      	mov	r5, r0
 23ec242:	17c7      	asrs	r7, r0, #31
  Output("INFO_DO()");
 23ec244:	48c3      	ldr	r0, [pc, #780]	; (23ec554 <_Z7INFO_Dov+0x320>)
 23ec246:	f7f9 fa21 	bl	23e568c <_Z6OutputPKc>
  SendSystemInformation = false;
 23ec24a:	4bc3      	ldr	r3, [pc, #780]	; (23ec558 <_Z7INFO_Dov+0x324>)

  memset(buf, 0, sizeof(buf));        // holds string of found sensors 
 23ec24c:	4621      	mov	r1, r4
 23ec24e:	f44f 7280 	mov.w	r2, #256	; 0x100
 23ec252:	a836      	add	r0, sp, #216	; 0xd8
  SendSystemInformation = false;
 23ec254:	701c      	strb	r4, [r3, #0]
  memset(buf, 0, sizeof(buf));        // holds string of found sensors 
 23ec256:	f010 fa52 	bl	23fc6fe <memset>
  memset(msgbuf, 0, sizeof(msgbuf));  // hold the json formatted message we are building for sending.
 23ec25a:	4bc0      	ldr	r3, [pc, #768]	; (23ec55c <_Z7INFO_Dov+0x328>)
 23ec25c:	4621      	mov	r1, r4
 23ec25e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 23ec262:	4618      	mov	r0, r3
 23ec264:	f010 fa4b 	bl	23fc6fe <memset>
        n_(0) {
 23ec268:	f240 33ff 	movw	r3, #1023	; 0x3ff
 23ec26c:	4abc      	ldr	r2, [pc, #752]	; (23ec560 <_Z7INFO_Dov+0x32c>)
 23ec26e:	900c      	str	r0, [sp, #48]	; 0x30

  JSONBufferWriter writer(msgbuf, sizeof(msgbuf)-1);
  writer.beginObject();
 23ec270:	a80a      	add	r0, sp, #40	; 0x28
 23ec272:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 23ec276:	920a      	str	r2, [sp, #40]	; 0x28
        state_(BEGIN) {
 23ec278:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
 23ec27c:	f00c f90b 	bl	23f8496 <_ZN5spark10JSONWriter11beginObjectEv>

  writer.name("devid").value(System.deviceID());
 23ec280:	49b8      	ldr	r1, [pc, #736]	; (23ec564 <_Z7INFO_Dov+0x330>)
 23ec282:	a80a      	add	r0, sp, #40	; 0x28
 23ec284:	f7f8 ff2e 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec288:	4606      	mov	r6, r0
        return spark_deviceID();
 23ec28a:	a822      	add	r0, sp, #136	; 0x88
 23ec28c:	f00a ff72 	bl	23f7174 <spark_deviceID>
    return value(val.c_str(), val.length());
 23ec290:	9a24      	ldr	r2, [sp, #144]	; 0x90
 23ec292:	9922      	ldr	r1, [sp, #136]	; 0x88
 23ec294:	4630      	mov	r0, r6
 23ec296:	f00c fa07 	bl	23f86a8 <_ZN5spark10JSONWriter5valueEPKcj>
 23ec29a:	a822      	add	r0, sp, #136	; 0x88
 23ec29c:	f00c fdc1 	bl	23f8e22 <_ZN6StringD1Ev>
  writer.name("devos").value(System.version());
 23ec2a0:	49b1      	ldr	r1, [pc, #708]	; (23ec568 <_Z7INFO_Dov+0x334>)
 23ec2a2:	a80a      	add	r0, sp, #40	; 0x28
 23ec2a4:	f7f8 ff1e 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
        SystemVersionInfo info = {};
 23ec2a8:	261c      	movs	r6, #28
 23ec2aa:	4680      	mov	r8, r0
 23ec2ac:	4632      	mov	r2, r6
 23ec2ae:	4621      	mov	r1, r4
 23ec2b0:	a822      	add	r0, sp, #136	; 0x88
 23ec2b2:	f010 fa24 	bl	23fc6fe <memset>
        info.size = sizeof(SystemVersionInfo);
 23ec2b6:	f8ad 6088 	strh.w	r6, [sp, #136]	; 0x88
        system_version_info(&info, nullptr);
 23ec2ba:	4621      	mov	r1, r4
        return String(info.versionString);
 23ec2bc:	ae1b      	add	r6, sp, #108	; 0x6c
        system_version_info(&info, nullptr);
 23ec2be:	a822      	add	r0, sp, #136	; 0x88
 23ec2c0:	f00a fe94 	bl	23f6fec <system_version_info>
        return String(info.versionString);
 23ec2c4:	a924      	add	r1, sp, #144	; 0x90
 23ec2c6:	4630      	mov	r0, r6
 23ec2c8:	f00c fdf6 	bl	23f8eb8 <_ZN6StringC1EPK19__FlashStringHelper>
 23ec2cc:	68b2      	ldr	r2, [r6, #8]
 23ec2ce:	6831      	ldr	r1, [r6, #0]
 23ec2d0:	4640      	mov	r0, r8
 23ec2d2:	f00c f9e9 	bl	23f86a8 <_ZN5spark10JSONWriter5valueEPKcj>
 23ec2d6:	4630      	mov	r0, r6
 23ec2d8:	f00c fda3 	bl	23f8e22 <_ZN6StringD1Ev>
  writer.name("freemem").value(System.freeMemory());
 23ec2dc:	49a3      	ldr	r1, [pc, #652]	; (23ec56c <_Z7INFO_Dov+0x338>)
 23ec2de:	a80a      	add	r0, sp, #40	; 0x28
 23ec2e0:	f7f8 ff00 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec2e4:	4680      	mov	r8, r0
 23ec2e6:	f00c fe82 	bl	23f8fee <_ZN11SystemClass10freeMemoryEv>
 23ec2ea:	4601      	mov	r1, r0
 23ec2ec:	4640      	mov	r0, r8
 23ec2ee:	f00c f903 	bl	23f84f8 <_ZN5spark10JSONWriter5valueEm>
  writer.name("uptime").value(System.uptime());
 23ec2f2:	499f      	ldr	r1, [pc, #636]	; (23ec570 <_Z7INFO_Dov+0x33c>)
 23ec2f4:	a80a      	add	r0, sp, #40	; 0x28
 23ec2f6:	f7f8 fef5 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec2fa:	4680      	mov	r8, r0
        return (hal_timer_millis(nullptr) / 1000);
 23ec2fc:	4620      	mov	r0, r4
 23ec2fe:	f00a fa93 	bl	23f6828 <hal_timer_millis>
 23ec302:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23ec306:	2300      	movs	r3, #0
 23ec308:	f7f7 fecc 	bl	23e40a4 <__aeabi_uldivmod>
 23ec30c:	4601      	mov	r1, r0
 23ec30e:	4640      	mov	r0, r8
 23ec310:	f00c f8e0 	bl	23f84d4 <_ZN5spark10JSONWriter5valueEj>
#endif
#if PLATFORM_ID == PLATFORM_BORON
  writer.name("type").value("boron");
#endif
#if PLATFORM_ID == PLATFORM_MSOM
  writer.name("type").value("muon");
 23ec314:	4997      	ldr	r1, [pc, #604]	; (23ec574 <_Z7INFO_Dov+0x340>)
 23ec316:	a80a      	add	r0, sp, #40	; 0x28
 23ec318:	f7f8 fee4 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec31c:	4996      	ldr	r1, [pc, #600]	; (23ec578 <_Z7INFO_Dov+0x344>)
 23ec31e:	f7f8 fe17 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
#endif

  sprintf (Buffer32Bytes, "%d-%02d-%02dT%02d:%02d:%02d",
 23ec322:	4628      	mov	r0, r5
 23ec324:	4639      	mov	r1, r7
 23ec326:	f00c fef3 	bl	23f9110 <_ZN9TimeClass4yearEx>
 23ec32a:	4639      	mov	r1, r7
 23ec32c:	9005      	str	r0, [sp, #20]
 23ec32e:	4628      	mov	r0, r5
 23ec330:	f00c fee4 	bl	23f90fc <_ZN9TimeClass5monthEx>
 23ec334:	4639      	mov	r1, r7
 23ec336:	9004      	str	r0, [sp, #16]
 23ec338:	4628      	mov	r0, r5
 23ec33a:	f00c fed7 	bl	23f90ec <_ZN9TimeClass3dayEx>
 23ec33e:	4639      	mov	r1, r7
 23ec340:	4680      	mov	r8, r0
 23ec342:	4628      	mov	r0, r5
 23ec344:	f00c feba 	bl	23f90bc <_ZN9TimeClass4hourEx>
 23ec348:	4639      	mov	r1, r7
 23ec34a:	4681      	mov	r9, r0
 23ec34c:	4628      	mov	r0, r5
 23ec34e:	f00c febd 	bl	23f90cc <_ZN9TimeClass6minuteEx>
 23ec352:	4639      	mov	r1, r7
 23ec354:	4682      	mov	sl, r0
 23ec356:	4628      	mov	r0, r5
 23ec358:	f00c fec0 	bl	23f90dc <_ZN9TimeClass6secondEx>
 23ec35c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 23ec360:	e9cd a002 	strd	sl, r0, [sp, #8]
 23ec364:	4985      	ldr	r1, [pc, #532]	; (23ec57c <_Z7INFO_Dov+0x348>)
 23ec366:	e9cd 8900 	strd	r8, r9, [sp]
 23ec36a:	4885      	ldr	r0, [pc, #532]	; (23ec580 <_Z7INFO_Dov+0x34c>)
 23ec36c:	f00b f87c 	bl	23f7468 <sprintf>
    Time.year(ts), Time.month(ts), Time.day(ts),
    Time.hour(ts), Time.minute(ts), Time.second(ts));
  writer.name("at").value(Buffer32Bytes);
 23ec370:	4984      	ldr	r1, [pc, #528]	; (23ec584 <_Z7INFO_Dov+0x350>)
 23ec372:	a80a      	add	r0, sp, #40	; 0x28
 23ec374:	f7f8 feb6 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec378:	4981      	ldr	r1, [pc, #516]	; (23ec580 <_Z7INFO_Dov+0x34c>)
 23ec37a:	f7f8 fde9 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  writer.name("ver").value(VERSION_INFO);
 23ec37e:	4982      	ldr	r1, [pc, #520]	; (23ec588 <_Z7INFO_Dov+0x354>)
 23ec380:	a80a      	add	r0, sp, #40	; 0x28
 23ec382:	f7f8 feaf 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec386:	4981      	ldr	r1, [pc, #516]	; (23ec58c <_Z7INFO_Dov+0x358>)
 23ec388:	f7f8 fde2 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  writer.name("hth").value((int) SystemStatusBits);
 23ec38c:	4980      	ldr	r1, [pc, #512]	; (23ec590 <_Z7INFO_Dov+0x35c>)
 23ec38e:	a80a      	add	r0, sp, #40	; 0x28
 23ec390:	f7f8 fea8 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec394:	4b7f      	ldr	r3, [pc, #508]	; (23ec594 <_Z7INFO_Dov+0x360>)
 23ec396:	6819      	ldr	r1, [r3, #0]
 23ec398:	f00c f88a 	bl	23f84b0 <_ZN5spark10JSONWriter5valueEi>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 23ec39c:	4622      	mov	r2, r4
 23ec39e:	4621      	mov	r1, r4
 23ec3a0:	a822      	add	r0, sp, #136	; 0x88
        int reason = RESET_REASON_NONE;
 23ec3a2:	9422      	str	r4, [sp, #136]	; 0x88
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 23ec3a4:	f00a f9c2 	bl	23f672c <HAL_Core_Get_Last_Reset_Info>
        return reason;
 23ec3a8:	9d22      	ldr	r5, [sp, #136]	; 0x88
        HAL_Core_Get_Last_Reset_Info(nullptr, &data, nullptr);
 23ec3aa:	4622      	mov	r2, r4
 23ec3ac:	4620      	mov	r0, r4
 23ec3ae:	a922      	add	r1, sp, #136	; 0x88
        uint32_t data = 0;
 23ec3b0:	9422      	str	r4, [sp, #136]	; 0x88
        HAL_Core_Get_Last_Reset_Info(nullptr, &data, nullptr);
 23ec3b2:	f00a f9bb 	bl	23f672c <HAL_Core_Get_Last_Reset_Info>

  // Reboot/Reset Reason and data
  sprintf (Buffer32Bytes,"%d-%d", System.resetReason(), System.resetReasonData());
 23ec3b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 23ec3b8:	462a      	mov	r2, r5
 23ec3ba:	4977      	ldr	r1, [pc, #476]	; (23ec598 <_Z7INFO_Dov+0x364>)
 23ec3bc:	4870      	ldr	r0, [pc, #448]	; (23ec580 <_Z7INFO_Dov+0x34c>)
 23ec3be:	f00b f853 	bl	23f7468 <sprintf>
  writer.name("rr").value(Buffer32Bytes);;
 23ec3c2:	4976      	ldr	r1, [pc, #472]	; (23ec59c <_Z7INFO_Dov+0x368>)
 23ec3c4:	a80a      	add	r0, sp, #40	; 0x28
 23ec3c6:	f7f8 fe8d 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec3ca:	496d      	ldr	r1, [pc, #436]	; (23ec580 <_Z7INFO_Dov+0x34c>)
 23ec3cc:	f7f8 fdc0 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  sprintf (Buffer32Bytes,"%ds", OBSERVATION_INTERVAL/1000);
 23ec3d0:	223c      	movs	r2, #60	; 0x3c
 23ec3d2:	4973      	ldr	r1, [pc, #460]	; (23ec5a0 <_Z7INFO_Dov+0x36c>)
 23ec3d4:	486a      	ldr	r0, [pc, #424]	; (23ec580 <_Z7INFO_Dov+0x34c>)
 23ec3d6:	f00b f847 	bl	23f7468 <sprintf>
  writer.name("obsi").value(Buffer32Bytes);
  sprintf (Buffer32Bytes,"%dm", (int) obs_tx_interval);
 23ec3da:	4c72      	ldr	r4, [pc, #456]	; (23ec5a4 <_Z7INFO_Dov+0x370>)
  writer.name("obsi").value(Buffer32Bytes);
 23ec3dc:	4972      	ldr	r1, [pc, #456]	; (23ec5a8 <_Z7INFO_Dov+0x374>)
 23ec3de:	a80a      	add	r0, sp, #40	; 0x28
 23ec3e0:	f7f8 fe80 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec3e4:	4966      	ldr	r1, [pc, #408]	; (23ec580 <_Z7INFO_Dov+0x34c>)
 23ec3e6:	f7f8 fdb3 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  sprintf (Buffer32Bytes,"%dm", (int) obs_tx_interval);
 23ec3ea:	6822      	ldr	r2, [r4, #0]
 23ec3ec:	496f      	ldr	r1, [pc, #444]	; (23ec5ac <_Z7INFO_Dov+0x378>)
 23ec3ee:	4864      	ldr	r0, [pc, #400]	; (23ec580 <_Z7INFO_Dov+0x34c>)
 23ec3f0:	f00b f83a 	bl	23f7468 <sprintf>
  writer.name("obsti").value(Buffer32Bytes);
 23ec3f4:	496e      	ldr	r1, [pc, #440]	; (23ec5b0 <_Z7INFO_Dov+0x37c>)
 23ec3f6:	a80a      	add	r0, sp, #40	; 0x28
 23ec3f8:	f7f8 fe74 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec3fc:	4960      	ldr	r1, [pc, #384]	; (23ec580 <_Z7INFO_Dov+0x34c>)
 23ec3fe:	f7f8 fda7 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  // Time 2 Next Transmit in Seconds
  sprintf (Buffer32Bytes, "%ds", (int) ((obs_tx_interval * 60) - ((System.millis() - LastTransmitTime)/1000)));
 23ec402:	233c      	movs	r3, #60	; 0x3c
 23ec404:	6824      	ldr	r4, [r4, #0]
 23ec406:	435c      	muls	r4, r3
 23ec408:	f7f8 fdfd 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23ec40c:	4a69      	ldr	r2, [pc, #420]	; (23ec5b4 <_Z7INFO_Dov+0x380>)
 23ec40e:	e9d2 3500 	ldrd	r3, r5, [r2]
 23ec412:	1ac0      	subs	r0, r0, r3
 23ec414:	eb61 0105 	sbc.w	r1, r1, r5
 23ec418:	2300      	movs	r3, #0
 23ec41a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23ec41e:	f7f7 fe41 	bl	23e40a4 <__aeabi_uldivmod>
 23ec422:	495f      	ldr	r1, [pc, #380]	; (23ec5a0 <_Z7INFO_Dov+0x36c>)
 23ec424:	1a22      	subs	r2, r4, r0
 23ec426:	4856      	ldr	r0, [pc, #344]	; (23ec580 <_Z7INFO_Dov+0x34c>)
 23ec428:	f00b f81e 	bl	23f7468 <sprintf>
  writer.name("t2nt").value(Buffer32Bytes);
 23ec42c:	4962      	ldr	r1, [pc, #392]	; (23ec5b8 <_Z7INFO_Dov+0x384>)
 23ec42e:	a80a      	add	r0, sp, #40	; 0x28
 23ec430:	f7f8 fe58 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec434:	4952      	ldr	r1, [pc, #328]	; (23ec580 <_Z7INFO_Dov+0x34c>)
 23ec436:	f7f8 fd8b 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  // Daily Reboot Countdown Timer
  writer.name("drct").value(DailyRebootCountDownTimer);
 23ec43a:	4960      	ldr	r1, [pc, #384]	; (23ec5bc <_Z7INFO_Dov+0x388>)
 23ec43c:	a80a      	add	r0, sp, #40	; 0x28
 23ec43e:	f7f8 fe51 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec442:	4b5f      	ldr	r3, [pc, #380]	; (23ec5c0 <_Z7INFO_Dov+0x38c>)
 23ec444:	6819      	ldr	r1, [r3, #0]
 23ec446:	f00c f833 	bl	23f84b0 <_ZN5spark10JSONWriter5valueEi>

  // Need 2 Send File
  if (SD.exists(SD_n2s_file)) {
 23ec44a:	495e      	ldr	r1, [pc, #376]	; (23ec5c4 <_Z7INFO_Dov+0x390>)
 23ec44c:	485e      	ldr	r0, [pc, #376]	; (23ec5c8 <_Z7INFO_Dov+0x394>)
 23ec44e:	f7f8 fe57 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23ec452:	2800      	cmp	r0, #0
 23ec454:	f000 8481 	beq.w	23ecd5a <_Z7INFO_Dov+0xb26>
    File fp = SD.open(SD_n2s_file, FILE_WRITE);
 23ec458:	495b      	ldr	r1, [pc, #364]	; (23ec5c8 <_Z7INFO_Dov+0x394>)
 23ec45a:	f244 2302 	movw	r3, #16898	; 0x4202
 23ec45e:	4a59      	ldr	r2, [pc, #356]	; (23ec5c4 <_Z7INFO_Dov+0x390>)
 23ec460:	a822      	add	r0, sp, #136	; 0x88
 23ec462:	f009 fb63 	bl	23f5b2c <_ZN8FsVolume4openEPKci>
  operator bool() const { return isOpen(); }
 23ec466:	a826      	add	r0, sp, #152	; 0x98
 23ec468:	f7f8 fec3 	bl	23e51f2 <_ZNK10FsBaseFile6isOpenEv>
    if (fp) {
      writer.name("n2s").value(fp.size());
 23ec46c:	4957      	ldr	r1, [pc, #348]	; (23ec5cc <_Z7INFO_Dov+0x398>)
    if (fp) {
 23ec46e:	2800      	cmp	r0, #0
 23ec470:	f000 846a 	beq.w	23ecd48 <_Z7INFO_Dov+0xb14>
      writer.name("n2s").value(fp.size());
 23ec474:	a80a      	add	r0, sp, #40	; 0x28
 23ec476:	f7f8 fe35 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec47a:	4604      	mov	r4, r0
  PosType size() { return BaseFile::fileSize(); }
 23ec47c:	a826      	add	r0, sp, #152	; 0x98
 23ec47e:	f7f8 feac 	bl	23e51da <_ZNK10FsBaseFile8fileSizeEv>
 23ec482:	4602      	mov	r2, r0
 23ec484:	460b      	mov	r3, r1
 23ec486:	4620      	mov	r0, r4
 23ec488:	f00c f848 	bl	23f851c <_ZN5spark10JSONWriter5valueEy>
      fp.close();
 23ec48c:	a826      	add	r0, sp, #152	; 0x98
 23ec48e:	f009 fa74 	bl	23f597a <_ZN10FsBaseFile5closeEv>
  writer.name("bcs").value((digitalRead(PWR) && !digitalRead(CHG)) ? "CHARGING" : "!CHARGING"); // Battery Charger State
#endif

#if (PLATFORM_ID == PLATFORM_BORON) || (PLATFORM_ID == PLATFORM_MSOM)
  // Power Source
  const char *ps[] = {"UNKN", "VIN", "USB_HOST", "USB_ADAPTER", "USB_OTG", "BATTERY"};
 23ec492:	af0f      	add	r7, sp, #60	; 0x3c
 23ec494:	463c      	mov	r4, r7
 23ec496:	4d4e      	ldr	r5, [pc, #312]	; (23ec5d0 <_Z7INFO_Dov+0x39c>)
 23ec498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ec49a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ec49c:	e895 0003 	ldmia.w	r5, {r0, r1}
 23ec4a0:	e884 0003 	stmia.w	r4, {r0, r1}
  int sps = System.powerSource();
 23ec4a4:	f7ff fb0c 	bl	23ebac0 <_ZNK11SystemClass11powerSourceEv.isra.0>
 23ec4a8:	4604      	mov	r4, r0
  if ((sps>=0) && (sps<=5)) {
 23ec4aa:	2c05      	cmp	r4, #5
    writer.name("ps").value(ps[sps]);
 23ec4ac:	4949      	ldr	r1, [pc, #292]	; (23ec5d4 <_Z7INFO_Dov+0x3a0>)
 23ec4ae:	a80a      	add	r0, sp, #40	; 0x28
  if ((sps>=0) && (sps<=5)) {
 23ec4b0:	f200 845c 	bhi.w	23ecd6c <_Z7INFO_Dov+0xb38>
    writer.name("ps").value(ps[sps]);
 23ec4b4:	f7f8 fe16 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec4b8:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 23ec4bc:	f7f8 fd48 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  else {
    writer.name("ps").value(sps);
  }

  // Battery Charge State
  const char *bs[] = {"UNKN", "!CHARGING", "CHARGING", "CHARGED", "DISCHARGING", "FAULT", "MISSING"};
 23ec4c0:	4634      	mov	r4, r6
 23ec4c2:	4d45      	ldr	r5, [pc, #276]	; (23ec5d8 <_Z7INFO_Dov+0x3a4>)
 23ec4c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ec4c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ec4c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 23ec4cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  int sbs = System.batteryState();
 23ec4d0:	f7fd faf0 	bl	23e9ab4 <_ZNK11SystemClass12batteryStateEv.isra.0>
 23ec4d4:	4604      	mov	r4, r0
  if ((sbs>=0) && (sbs<=6)) {
 23ec4d6:	2c06      	cmp	r4, #6
    writer.name("bcs").value(bs[sbs]);     
 23ec4d8:	4940      	ldr	r1, [pc, #256]	; (23ec5dc <_Z7INFO_Dov+0x3a8>)
 23ec4da:	a80a      	add	r0, sp, #40	; 0x28
  if ((sbs>=0) && (sbs<=6)) {
 23ec4dc:	f200 844d 	bhi.w	23ecd7a <_Z7INFO_Dov+0xb46>
    writer.name("bcs").value(bs[sbs]);     
 23ec4e0:	f7f8 fe00 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec4e4:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 23ec4e8:	f7f8 fd32 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  }
  else {
    writer.name("bcs").value(sbs);
  }
  writer.name("bpc").value(System.batteryCharge(), 1);   // Battery Percent Charge
 23ec4ec:	493c      	ldr	r1, [pc, #240]	; (23ec5e0 <_Z7INFO_Dov+0x3ac>)
 23ec4ee:	a80a      	add	r0, sp, #40	; 0x28
 23ec4f0:	f7f8 fdf8 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec4f4:	4604      	mov	r4, r0
 23ec4f6:	f7fd facb 	bl	23e9a90 <_ZNK11SystemClass13batteryChargeEv.isra.0>
 23ec4fa:	ee10 0a10 	vmov	r0, s0
 23ec4fe:	f7f7 f8d3 	bl	23e36a8 <__aeabi_f2d>
 23ec502:	ec41 0b10 	vmov	d0, r0, r1
 23ec506:	2101      	movs	r1, #1
 23ec508:	4620      	mov	r0, r4
 23ec50a:	f00c f81b 	bl	23f8544 <_ZN5spark10JSONWriter5valueEdi>
  writer.name("csq").value(sig.getQuality(), 4);
  writer.name("imsi").value(imsi); // International Mobile Subscriber Identity
#endif

#if PLATFORM_ID == PLATFORM_MSOM
  if (MuonWifiEnabled) {
 23ec50e:	4b35      	ldr	r3, [pc, #212]	; (23ec5e4 <_Z7INFO_Dov+0x3b0>)
    writer.name("nw").value("WIFI");
 23ec510:	4935      	ldr	r1, [pc, #212]	; (23ec5e8 <_Z7INFO_Dov+0x3b4>)
  if (MuonWifiEnabled) {
 23ec512:	781b      	ldrb	r3, [r3, #0]
    writer.name("nw").value("WIFI");
 23ec514:	a80a      	add	r0, sp, #40	; 0x28
  if (MuonWifiEnabled) {
 23ec516:	2b00      	cmp	r3, #0
 23ec518:	f000 8436 	beq.w	23ecd88 <_Z7INFO_Dov+0xb54>
    writer.name("nw").value("WIFI");
 23ec51c:	f7f8 fde2 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec520:	4932      	ldr	r1, [pc, #200]	; (23ec5ec <_Z7INFO_Dov+0x3b8>)
 23ec522:	f7f8 fd15 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    WiFiSignal sig = WiFi.RSSI();
 23ec526:	4932      	ldr	r1, [pc, #200]	; (23ec5f0 <_Z7INFO_Dov+0x3bc>)
 23ec528:	a822      	add	r0, sp, #136	; 0x88
 23ec52a:	f00d f941 	bl	23f97b0 <_ZN5spark9WiFiClass4RSSIEv>
    writer.name("wss").value(sig.getStrength(), 4);
 23ec52e:	4931      	ldr	r1, [pc, #196]	; (23ec5f4 <_Z7INFO_Dov+0x3c0>)
 23ec530:	a80a      	add	r0, sp, #40	; 0x28
 23ec532:	f7f8 fdd7 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec536:	4604      	mov	r4, r0
 23ec538:	a822      	add	r0, sp, #136	; 0x88
 23ec53a:	f00d f8a7 	bl	23f968c <_ZNK10WiFiSignal11getStrengthEv>
 23ec53e:	ee10 0a10 	vmov	r0, s0
 23ec542:	f7f7 f8b1 	bl	23e36a8 <__aeabi_f2d>
 23ec546:	ec41 0b10 	vmov	d0, r0, r1
 23ec54a:	2104      	movs	r1, #4
 23ec54c:	4620      	mov	r0, r4
 23ec54e:	f00b fff9 	bl	23f8544 <_ZN5spark10JSONWriter5valueEdi>
 23ec552:	e051      	b.n	23ec5f8 <_Z7INFO_Dov+0x3c4>
 23ec554:	023fe13c 	.word	0x023fe13c
 23ec558:	1006a176 	.word	0x1006a176
 23ec55c:	1006f128 	.word	0x1006f128
 23ec560:	023ff9b4 	.word	0x023ff9b4
 23ec564:	023fe146 	.word	0x023fe146
 23ec568:	023fe14c 	.word	0x023fe14c
 23ec56c:	023fe152 	.word	0x023fe152
 23ec570:	023fe15a 	.word	0x023fe15a
 23ec574:	023fe161 	.word	0x023fe161
 23ec578:	023fe166 	.word	0x023fe166
 23ec57c:	023fce68 	.word	0x023fce68
 23ec580:	1006a287 	.word	0x1006a287
 23ec584:	023fd7b3 	.word	0x023fd7b3
 23ec588:	023fe16b 	.word	0x023fe16b
 23ec58c:	023fe16f 	.word	0x023fe16f
 23ec590:	023fd7ba 	.word	0x023fd7ba
 23ec594:	1006a178 	.word	0x1006a178
 23ec598:	023fe17b 	.word	0x023fe17b
 23ec59c:	023fe41b 	.word	0x023fe41b
 23ec5a0:	023fe181 	.word	0x023fe181
 23ec5a4:	1006a1a8 	.word	0x1006a1a8
 23ec5a8:	023fe185 	.word	0x023fe185
 23ec5ac:	023fe18a 	.word	0x023fe18a
 23ec5b0:	023fe18e 	.word	0x023fe18e
 23ec5b4:	1006a2c0 	.word	0x1006a2c0
 23ec5b8:	023fe194 	.word	0x023fe194
 23ec5bc:	023fe199 	.word	0x023fe199
 23ec5c0:	1006a2a8 	.word	0x1006a2a8
 23ec5c4:	1006a157 	.word	0x1006a157
 23ec5c8:	1006a2d4 	.word	0x1006a2d4
 23ec5cc:	023fe19e 	.word	0x023fe19e
 23ec5d0:	023fcb74 	.word	0x023fcb74
 23ec5d4:	023fe1e6 	.word	0x023fe1e6
 23ec5d8:	023fcb8c 	.word	0x023fcb8c
 23ec5dc:	023fdef9 	.word	0x023fdef9
 23ec5e0:	023fdefd 	.word	0x023fdefd
 23ec5e4:	1006a2cc 	.word	0x1006a2cc
 23ec5e8:	023fe1a2 	.word	0x023fe1a2
 23ec5ec:	023fe44e 	.word	0x023fe44e
 23ec5f0:	1007af98 	.word	0x1007af98
 23ec5f4:	023fe1a5 	.word	0x023fe1a5
    writer.name("wsq").value(sig.getQuality(), 4);
 23ec5f8:	49b3      	ldr	r1, [pc, #716]	; (23ec8c8 <_Z7INFO_Dov+0x694>)
 23ec5fa:	a80a      	add	r0, sp, #40	; 0x28
 23ec5fc:	f7f8 fd72 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec600:	4604      	mov	r4, r0
 23ec602:	a822      	add	r0, sp, #136	; 0x88
 23ec604:	f00d f872 	bl	23f96ec <_ZNK10WiFiSignal10getQualityEv>
 23ec608:	ee10 0a10 	vmov	r0, s0
 23ec60c:	f7f7 f84c 	bl	23e36a8 <__aeabi_f2d>
 23ec610:	ec41 0b10 	vmov	d0, r0, r1
 23ec614:	2104      	movs	r1, #4
 23ec616:	4620      	mov	r0, r4
 23ec618:	f00b ff94 	bl	23f8544 <_ZN5spark10JSONWriter5valueEdi>
 23ec61c:	48ab      	ldr	r0, [pc, #684]	; (23ec8cc <_Z7INFO_Dov+0x698>)
 23ec61e:	f7f8 fce1 	bl	23e4fe4 <_ZN5spark9WiFiClass11wifi_configEv>
    byte mac[6];
    WiFi.macAddress(mac);
    sprintf (Buffer32Bytes, "%02x:%02x:%02x:%02x:%02x:%02x", mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 23ec622:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
 23ec626:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 23ec62a:	f890 2057 	ldrb.w	r2, [r0, #87]	; 0x57
 23ec62e:	9103      	str	r1, [sp, #12]
 23ec630:	f890 105b 	ldrb.w	r1, [r0, #91]	; 0x5b
 23ec634:	9102      	str	r1, [sp, #8]
 23ec636:	f890 105a 	ldrb.w	r1, [r0, #90]	; 0x5a
 23ec63a:	9101      	str	r1, [sp, #4]
 23ec63c:	f890 1059 	ldrb.w	r1, [r0, #89]	; 0x59
 23ec640:	48a3      	ldr	r0, [pc, #652]	; (23ec8d0 <_Z7INFO_Dov+0x69c>)
 23ec642:	9100      	str	r1, [sp, #0]
 23ec644:	49a3      	ldr	r1, [pc, #652]	; (23ec8d4 <_Z7INFO_Dov+0x6a0>)
 23ec646:	f00a ff0f 	bl	23f7468 <sprintf>
    writer.name("mac").value(Buffer32Bytes);
 23ec64a:	49a3      	ldr	r1, [pc, #652]	; (23ec8d8 <_Z7INFO_Dov+0x6a4>)
 23ec64c:	a80a      	add	r0, sp, #40	; 0x28
 23ec64e:	f7f8 fd49 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec652:	499f      	ldr	r1, [pc, #636]	; (23ec8d0 <_Z7INFO_Dov+0x69c>)
 23ec654:	f7f8 fc7c 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    writer.name("ip").value(WiFi.localIP().toString().c_str());
 23ec658:	49a0      	ldr	r1, [pc, #640]	; (23ec8dc <_Z7INFO_Dov+0x6a8>)
 23ec65a:	a80a      	add	r0, sp, #40	; 0x28
 23ec65c:	f7f8 fd42 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec660:	4604      	mov	r4, r0


#if !HAL_PLATFORM_WIFI_SCAN_ONLY

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
 23ec662:	489a      	ldr	r0, [pc, #616]	; (23ec8cc <_Z7INFO_Dov+0x698>)
 23ec664:	f7f8 fcbe 	bl	23e4fe4 <_ZN5spark9WiFiClass11wifi_configEv>
 23ec668:	1c81      	adds	r1, r0, #2
 23ec66a:	a815      	add	r0, sp, #84	; 0x54
 23ec66c:	f00b fe8c 	bl	23f8388 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
 23ec670:	a915      	add	r1, sp, #84	; 0x54
 23ec672:	a806      	add	r0, sp, #24
 23ec674:	f00c fc6a 	bl	23f8f4c <_ZN6StringC1ERK9Printable>
 23ec678:	4620      	mov	r0, r4
 23ec67a:	9906      	ldr	r1, [sp, #24]
 23ec67c:	f7f8 fc68 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
 23ec680:	a806      	add	r0, sp, #24
 23ec682:	f00c fbce 	bl	23f8e22 <_ZN6StringD1Ev>
    writer.name("mask").value(WiFi.subnetMask().toString().c_str());
 23ec686:	4996      	ldr	r1, [pc, #600]	; (23ec8e0 <_Z7INFO_Dov+0x6ac>)
 23ec688:	a80a      	add	r0, sp, #40	; 0x28
 23ec68a:	f7f8 fd2b 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec68e:	4604      	mov	r4, r0
    }

    IPAddress subnetMask() {
        return IPAddress(wifi_config()->nw.aucSubnetMask);
 23ec690:	488e      	ldr	r0, [pc, #568]	; (23ec8cc <_Z7INFO_Dov+0x698>)
 23ec692:	f7f8 fca7 	bl	23e4fe4 <_ZN5spark9WiFiClass11wifi_configEv>
 23ec696:	f100 0113 	add.w	r1, r0, #19
 23ec69a:	a815      	add	r0, sp, #84	; 0x54
 23ec69c:	f00b fe74 	bl	23f8388 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23ec6a0:	a915      	add	r1, sp, #84	; 0x54
 23ec6a2:	a806      	add	r0, sp, #24
 23ec6a4:	f00c fc52 	bl	23f8f4c <_ZN6StringC1ERK9Printable>
 23ec6a8:	4620      	mov	r0, r4
 23ec6aa:	9906      	ldr	r1, [sp, #24]
 23ec6ac:	f7f8 fc50 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
 23ec6b0:	a806      	add	r0, sp, #24
 23ec6b2:	f00c fbb6 	bl	23f8e22 <_ZN6StringD1Ev>
    writer.name("gateway").value(WiFi.gatewayIP().toString().c_str());
 23ec6b6:	498b      	ldr	r1, [pc, #556]	; (23ec8e4 <_Z7INFO_Dov+0x6b0>)
 23ec6b8:	a80a      	add	r0, sp, #40	; 0x28
 23ec6ba:	f7f8 fd13 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec6be:	4604      	mov	r4, r0
    }

    IPAddress gatewayIP() {
        return IPAddress(wifi_config()->nw.aucDefaultGateway);
 23ec6c0:	4882      	ldr	r0, [pc, #520]	; (23ec8cc <_Z7INFO_Dov+0x698>)
 23ec6c2:	f7f8 fc8f 	bl	23e4fe4 <_ZN5spark9WiFiClass11wifi_configEv>
 23ec6c6:	f100 0124 	add.w	r1, r0, #36	; 0x24
 23ec6ca:	a815      	add	r0, sp, #84	; 0x54
 23ec6cc:	f00b fe5c 	bl	23f8388 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23ec6d0:	a915      	add	r1, sp, #84	; 0x54
 23ec6d2:	a806      	add	r0, sp, #24
 23ec6d4:	f00c fc3a 	bl	23f8f4c <_ZN6StringC1ERK9Printable>
 23ec6d8:	4620      	mov	r0, r4
 23ec6da:	9906      	ldr	r1, [sp, #24]
 23ec6dc:	f7f8 fc38 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
 23ec6e0:	a806      	add	r0, sp, #24
 23ec6e2:	f00c fb9e 	bl	23f8e22 <_ZN6StringD1Ev>
    writer.name("dns").value(WiFi.dnsServerIP().toString().c_str());
 23ec6e6:	4980      	ldr	r1, [pc, #512]	; (23ec8e8 <_Z7INFO_Dov+0x6b4>)
 23ec6e8:	a80a      	add	r0, sp, #40	; 0x28
 23ec6ea:	f7f8 fcfb 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec6ee:	4604      	mov	r4, r0
    }

    IPAddress dnsServerIP() {
    	return IPAddress(wifi_config()->nw.aucDNSServer);
 23ec6f0:	4876      	ldr	r0, [pc, #472]	; (23ec8cc <_Z7INFO_Dov+0x698>)
 23ec6f2:	f7f8 fc77 	bl	23e4fe4 <_ZN5spark9WiFiClass11wifi_configEv>
 23ec6f6:	f100 0146 	add.w	r1, r0, #70	; 0x46
 23ec6fa:	a815      	add	r0, sp, #84	; 0x54
 23ec6fc:	f00b fe44 	bl	23f8388 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23ec700:	a915      	add	r1, sp, #84	; 0x54
 23ec702:	a806      	add	r0, sp, #24
 23ec704:	f00c fc22 	bl	23f8f4c <_ZN6StringC1ERK9Printable>
 23ec708:	4620      	mov	r0, r4
 23ec70a:	9906      	ldr	r1, [sp, #24]
 23ec70c:	f7f8 fc20 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
 23ec710:	a806      	add	r0, sp, #24
 23ec712:	f00c fb86 	bl	23f8e22 <_ZN6StringD1Ev>
    writer.name("dhcps").value(WiFi.dhcpServerIP().toString().c_str());
 23ec716:	4975      	ldr	r1, [pc, #468]	; (23ec8ec <_Z7INFO_Dov+0x6b8>)
 23ec718:	a80a      	add	r0, sp, #40	; 0x28
 23ec71a:	f7f8 fce3 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec71e:	4604      	mov	r4, r0
    }

    IPAddress dhcpServerIP() {
    	return IPAddress(wifi_config()->nw.aucDHCPServer);
 23ec720:	486a      	ldr	r0, [pc, #424]	; (23ec8cc <_Z7INFO_Dov+0x698>)
 23ec722:	f7f8 fc5f 	bl	23e4fe4 <_ZN5spark9WiFiClass11wifi_configEv>
 23ec726:	f100 0135 	add.w	r1, r0, #53	; 0x35
 23ec72a:	a815      	add	r0, sp, #84	; 0x54
 23ec72c:	f00b fe2c 	bl	23f8388 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23ec730:	a915      	add	r1, sp, #84	; 0x54
 23ec732:	a806      	add	r0, sp, #24
 23ec734:	f00c fc0a 	bl	23f8f4c <_ZN6StringC1ERK9Printable>
 23ec738:	4620      	mov	r0, r4
 23ec73a:	9906      	ldr	r1, [sp, #24]
 23ec73c:	f7f8 fc08 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
 23ec740:	a806      	add	r0, sp, #24
 23ec742:	f00c fb6e 	bl	23f8e22 <_ZN6StringD1Ev>
    writer.name("ssid").value(WiFi.SSID());
 23ec746:	496a      	ldr	r1, [pc, #424]	; (23ec8f0 <_Z7INFO_Dov+0x6bc>)
 23ec748:	a80a      	add	r0, sp, #40	; 0x28
 23ec74a:	f7f8 fccb 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec74e:	4604      	mov	r4, r0
    		memcpy(bssid, wifi_config()->BSSID, 6);
    		return bssid;
    }

    const char *SSID() {
        return (const char *) wifi_config()->uaSSID;
 23ec750:	485e      	ldr	r0, [pc, #376]	; (23ec8cc <_Z7INFO_Dov+0x698>)
 23ec752:	f7f8 fc47 	bl	23e4fe4 <_ZN5spark9WiFiClass11wifi_configEv>
 23ec756:	f100 015d 	add.w	r1, r0, #93	; 0x5d
 23ec75a:	4620      	mov	r0, r4
 23ec75c:	f7f8 fbf8 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    		memcpy(bssid, wifi_config()->BSSID, 6);
 23ec760:	485a      	ldr	r0, [pc, #360]	; (23ec8cc <_Z7INFO_Dov+0x698>)
 23ec762:	f7f8 fc3f 	bl	23e4fe4 <_ZN5spark9WiFiClass11wifi_configEv>
    WiFi.BSSID(mac);
    sprintf (Buffer32Bytes, "%02x:%02x:%02x:%02x:%02x:%02x", mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 23ec766:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
 23ec76a:	f890 307f 	ldrb.w	r3, [r0, #127]	; 0x7f
 23ec76e:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
 23ec772:	9103      	str	r1, [sp, #12]
 23ec774:	f890 1082 	ldrb.w	r1, [r0, #130]	; 0x82
 23ec778:	9102      	str	r1, [sp, #8]
 23ec77a:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 23ec77e:	9101      	str	r1, [sp, #4]
 23ec780:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
 23ec784:	4852      	ldr	r0, [pc, #328]	; (23ec8d0 <_Z7INFO_Dov+0x69c>)
 23ec786:	9100      	str	r1, [sp, #0]
 23ec788:	4952      	ldr	r1, [pc, #328]	; (23ec8d4 <_Z7INFO_Dov+0x6a0>)
 23ec78a:	f00a fe6d 	bl	23f7468 <sprintf>
    writer.name("bssid").value(Buffer32Bytes);
 23ec78e:	4959      	ldr	r1, [pc, #356]	; (23ec8f4 <_Z7INFO_Dov+0x6c0>)
 23ec790:	a80a      	add	r0, sp, #40	; 0x28
 23ec792:	f7f8 fca7 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec796:	494e      	ldr	r1, [pc, #312]	; (23ec8d0 <_Z7INFO_Dov+0x69c>)
  else {
    writer.name("nw").value("CELL");
    CellularSignal sig = Cellular.RSSI();
    writer.name("css").value(sig.getStrength(), 4);
    writer.name("csq").value(sig.getQuality(), 4);
    writer.name("imsi").value(imsi); // International Mobile Subscriber Identity
 23ec798:	f7f8 fbda 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  }
#endif

#if PLATFORM_ID == PLATFORM_MSOM
  // Particle Muon on board temperature sensor 
  if (PMTS_exists) {
 23ec79c:	4b56      	ldr	r3, [pc, #344]	; (23ec8f8 <_Z7INFO_Dov+0x6c4>)
    writer.name("pmts").value(ptms_readtempc(), 2);
 23ec79e:	4957      	ldr	r1, [pc, #348]	; (23ec8fc <_Z7INFO_Dov+0x6c8>)
  if (PMTS_exists) {
 23ec7a0:	781b      	ldrb	r3, [r3, #0]
    writer.name("pmts").value(ptms_readtempc(), 2);
 23ec7a2:	a80a      	add	r0, sp, #40	; 0x28
  if (PMTS_exists) {
 23ec7a4:	2b00      	cmp	r3, #0
 23ec7a6:	f000 8322 	beq.w	23ecdee <_Z7INFO_Dov+0xbba>
    writer.name("pmts").value(ptms_readtempc(), 2);
 23ec7aa:	f7f8 fc9b 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec7ae:	4604      	mov	r4, r0
 23ec7b0:	f7fa fc9a 	bl	23e70e8 <_Z14ptms_readtempcv>
 23ec7b4:	ee10 0a10 	vmov	r0, s0
 23ec7b8:	f7f6 ff76 	bl	23e36a8 <__aeabi_f2d>
 23ec7bc:	ec41 0b10 	vmov	d0, r0, r1
 23ec7c0:	2102      	movs	r1, #2
 23ec7c2:	4620      	mov	r0, r4
 23ec7c4:	f00b febe 	bl	23f8544 <_ZN5spark10JSONWriter5valueEdi>
    writer.name("pmts").value("NF");
  }
#endif

  // How Pin A4 is Configured
  if (A4_State == A4_STATE_DISTANCE) {
 23ec7c8:	4b4d      	ldr	r3, [pc, #308]	; (23ec900 <_Z7INFO_Dov+0x6cc>)
 23ec7ca:	681b      	ldr	r3, [r3, #0]
 23ec7cc:	2b01      	cmp	r3, #1
 23ec7ce:	f040 8318 	bne.w	23ece02 <_Z7INFO_Dov+0xbce>
    if (dg_adjustment == 1.25) {
 23ec7d2:	4b4c      	ldr	r3, [pc, #304]	; (23ec904 <_Z7INFO_Dov+0x6d0>)
 23ec7d4:	eef7 7a04 	vmov.f32	s15, #116	; 0x3fa00000  1.250
 23ec7d8:	ed93 7a00 	vldr	s14, [r3]
 23ec7dc:	eeb4 7a67 	vcmp.f32	s14, s15
 23ec7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      writer.name("a4").value("DIST 5M");
 23ec7e4:	4948      	ldr	r1, [pc, #288]	; (23ec908 <_Z7INFO_Dov+0x6d4>)
 23ec7e6:	a80a      	add	r0, sp, #40	; 0x28
    if (dg_adjustment == 1.25) {
 23ec7e8:	f040 8307 	bne.w	23ecdfa <_Z7INFO_Dov+0xbc6>
      writer.name("a4").value("DIST 5M");
 23ec7ec:	f7f8 fc7a 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec7f0:	4946      	ldr	r1, [pc, #280]	; (23ec90c <_Z7INFO_Dov+0x6d8>)
  }
  else if (A4_State == A4_STATE_RAW){
    writer.name("a4").value("RAW");
  }
  else {
    writer.name("a4").value("NS"); // Not Set
 23ec7f2:	f7f8 fbad 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  }

  if (A5_State == A5_STATE_RAW){
 23ec7f6:	4b46      	ldr	r3, [pc, #280]	; (23ec910 <_Z7INFO_Dov+0x6dc>)
    writer.name("a5").value("RAW");
 23ec7f8:	4946      	ldr	r1, [pc, #280]	; (23ec914 <_Z7INFO_Dov+0x6e0>)
  if (A5_State == A5_STATE_RAW){
 23ec7fa:	681b      	ldr	r3, [r3, #0]
    writer.name("a5").value("RAW");
 23ec7fc:	a80a      	add	r0, sp, #40	; 0x28
  if (A5_State == A5_STATE_RAW){
 23ec7fe:	2b01      	cmp	r3, #1
 23ec800:	f040 8311 	bne.w	23ece26 <_Z7INFO_Dov+0xbf2>
    writer.name("a5").value("RAW");
 23ec804:	f7f8 fc6e 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ec808:	4943      	ldr	r1, [pc, #268]	; (23ec918 <_Z7INFO_Dov+0x6e4>)
  }
  else {
    writer.name("a5").value("NS"); // Not Set
 23ec80a:	f7f8 fba1 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  }

  // Sensors
  if (BMX_1_exists) {
 23ec80e:	4b43      	ldr	r3, [pc, #268]	; (23ec91c <_Z7INFO_Dov+0x6e8>)
 23ec810:	781b      	ldrb	r3, [r3, #0]
 23ec812:	2b00      	cmp	r3, #0
 23ec814:	f000 830b 	beq.w	23ece2e <_Z7INFO_Dov+0xbfa>
    sprintf (buf+strlen(buf), "%sBMX1(%s)", comma, bmxtype[BMX_1_type]);
 23ec818:	a836      	add	r0, sp, #216	; 0xd8
 23ec81a:	f7f7 fddd 	bl	23e43d8 <strlen>
 23ec81e:	4b40      	ldr	r3, [pc, #256]	; (23ec920 <_Z7INFO_Dov+0x6ec>)
 23ec820:	ac36      	add	r4, sp, #216	; 0xd8
 23ec822:	781a      	ldrb	r2, [r3, #0]
 23ec824:	4b3f      	ldr	r3, [pc, #252]	; (23ec924 <_Z7INFO_Dov+0x6f0>)
 23ec826:	4420      	add	r0, r4
 23ec828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23ec82c:	493e      	ldr	r1, [pc, #248]	; (23ec928 <_Z7INFO_Dov+0x6f4>)
 23ec82e:	4a3f      	ldr	r2, [pc, #252]	; (23ec92c <_Z7INFO_Dov+0x6f8>)
 23ec830:	f00a fe1a 	bl	23f7468 <sprintf>
    comma=",";
 23ec834:	4c3e      	ldr	r4, [pc, #248]	; (23ec930 <_Z7INFO_Dov+0x6fc>)
  }
  if (BMX_2_exists) {
 23ec836:	4b3f      	ldr	r3, [pc, #252]	; (23ec934 <_Z7INFO_Dov+0x700>)
 23ec838:	781b      	ldrb	r3, [r3, #0]
 23ec83a:	b173      	cbz	r3, 23ec85a <_Z7INFO_Dov+0x626>
    sprintf (buf+strlen(buf), "%sBMX2(%s)", comma, bmxtype[BMX_2_type]);
 23ec83c:	a836      	add	r0, sp, #216	; 0xd8
 23ec83e:	f7f7 fdcb 	bl	23e43d8 <strlen>
 23ec842:	4b3d      	ldr	r3, [pc, #244]	; (23ec938 <_Z7INFO_Dov+0x704>)
 23ec844:	493d      	ldr	r1, [pc, #244]	; (23ec93c <_Z7INFO_Dov+0x708>)
 23ec846:	781a      	ldrb	r2, [r3, #0]
 23ec848:	4b36      	ldr	r3, [pc, #216]	; (23ec924 <_Z7INFO_Dov+0x6f0>)
 23ec84a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23ec84e:	4622      	mov	r2, r4
 23ec850:	ac36      	add	r4, sp, #216	; 0xd8
 23ec852:	4420      	add	r0, r4
 23ec854:	f00a fe08 	bl	23f7468 <sprintf>
    comma=",";
 23ec858:	4c35      	ldr	r4, [pc, #212]	; (23ec930 <_Z7INFO_Dov+0x6fc>)
  }
  if (MCP_1_exists) {
 23ec85a:	4b39      	ldr	r3, [pc, #228]	; (23ec940 <_Z7INFO_Dov+0x70c>)
 23ec85c:	781b      	ldrb	r3, [r3, #0]
 23ec85e:	b14b      	cbz	r3, 23ec874 <_Z7INFO_Dov+0x640>
    sprintf (buf+strlen(buf), "%sMCP1", comma);
 23ec860:	a836      	add	r0, sp, #216	; 0xd8
 23ec862:	f7f7 fdb9 	bl	23e43d8 <strlen>
 23ec866:	ab36      	add	r3, sp, #216	; 0xd8
 23ec868:	4622      	mov	r2, r4
 23ec86a:	4936      	ldr	r1, [pc, #216]	; (23ec944 <_Z7INFO_Dov+0x710>)
 23ec86c:	4418      	add	r0, r3
 23ec86e:	f00a fdfb 	bl	23f7468 <sprintf>
    comma=",";
 23ec872:	4c2f      	ldr	r4, [pc, #188]	; (23ec930 <_Z7INFO_Dov+0x6fc>)
  }
  if (MCP_2_exists) {
 23ec874:	4b34      	ldr	r3, [pc, #208]	; (23ec948 <_Z7INFO_Dov+0x714>)
 23ec876:	781b      	ldrb	r3, [r3, #0]
 23ec878:	b14b      	cbz	r3, 23ec88e <_Z7INFO_Dov+0x65a>
    sprintf (buf+strlen(buf), "%sMCP2", comma);
 23ec87a:	a836      	add	r0, sp, #216	; 0xd8
 23ec87c:	f7f7 fdac 	bl	23e43d8 <strlen>
 23ec880:	ab36      	add	r3, sp, #216	; 0xd8
 23ec882:	4622      	mov	r2, r4
 23ec884:	4931      	ldr	r1, [pc, #196]	; (23ec94c <_Z7INFO_Dov+0x718>)
 23ec886:	4418      	add	r0, r3
 23ec888:	f00a fdee 	bl	23f7468 <sprintf>
    comma=",";
 23ec88c:	4c28      	ldr	r4, [pc, #160]	; (23ec930 <_Z7INFO_Dov+0x6fc>)
  }
  if (MCP_3_exists) {
 23ec88e:	4d30      	ldr	r5, [pc, #192]	; (23ec950 <_Z7INFO_Dov+0x71c>)
 23ec890:	782b      	ldrb	r3, [r5, #0]
 23ec892:	b14b      	cbz	r3, 23ec8a8 <_Z7INFO_Dov+0x674>
    sprintf (buf+strlen(buf), "%sMCP3/gt1", comma);
 23ec894:	a836      	add	r0, sp, #216	; 0xd8
 23ec896:	f7f7 fd9f 	bl	23e43d8 <strlen>
 23ec89a:	ab36      	add	r3, sp, #216	; 0xd8
 23ec89c:	4622      	mov	r2, r4
 23ec89e:	492d      	ldr	r1, [pc, #180]	; (23ec954 <_Z7INFO_Dov+0x720>)
 23ec8a0:	4418      	add	r0, r3
 23ec8a2:	f00a fde1 	bl	23f7468 <sprintf>
    comma=",";
 23ec8a6:	4c22      	ldr	r4, [pc, #136]	; (23ec930 <_Z7INFO_Dov+0x6fc>)
  }
  if (MCP_4_exists) {
 23ec8a8:	4b2b      	ldr	r3, [pc, #172]	; (23ec958 <_Z7INFO_Dov+0x724>)
 23ec8aa:	781b      	ldrb	r3, [r3, #0]
 23ec8ac:	b14b      	cbz	r3, 23ec8c2 <_Z7INFO_Dov+0x68e>
    sprintf (buf+strlen(buf), "%sMCP4/gt2", comma);
 23ec8ae:	a836      	add	r0, sp, #216	; 0xd8
 23ec8b0:	f7f7 fd92 	bl	23e43d8 <strlen>
 23ec8b4:	ab36      	add	r3, sp, #216	; 0xd8
 23ec8b6:	4622      	mov	r2, r4
 23ec8b8:	4928      	ldr	r1, [pc, #160]	; (23ec95c <_Z7INFO_Dov+0x728>)
 23ec8ba:	4418      	add	r0, r3
 23ec8bc:	f00a fdd4 	bl	23f7468 <sprintf>
    comma=",";
 23ec8c0:	4c1b      	ldr	r4, [pc, #108]	; (23ec930 <_Z7INFO_Dov+0x6fc>)
  }
  if (SHT_1_exists) {
 23ec8c2:	4b27      	ldr	r3, [pc, #156]	; (23ec960 <_Z7INFO_Dov+0x72c>)
 23ec8c4:	781b      	ldrb	r3, [r3, #0]
 23ec8c6:	e04d      	b.n	23ec964 <_Z7INFO_Dov+0x730>
 23ec8c8:	023fe1a9 	.word	0x023fe1a9
 23ec8cc:	1007af98 	.word	0x1007af98
 23ec8d0:	1006a287 	.word	0x1006a287
 23ec8d4:	023fe1ad 	.word	0x023fe1ad
 23ec8d8:	023fe1cb 	.word	0x023fe1cb
 23ec8dc:	023fe1cf 	.word	0x023fe1cf
 23ec8e0:	023fe1d2 	.word	0x023fe1d2
 23ec8e4:	023fe1d7 	.word	0x023fe1d7
 23ec8e8:	023fe1df 	.word	0x023fe1df
 23ec8ec:	023fe1e3 	.word	0x023fe1e3
 23ec8f0:	023fe1ea 	.word	0x023fe1ea
 23ec8f4:	023fe1e9 	.word	0x023fe1e9
 23ec8f8:	1006a2ce 	.word	0x1006a2ce
 23ec8fc:	023fe046 	.word	0x023fe046
 23ec900:	1006a25c 	.word	0x1006a25c
 23ec904:	1006a1a0 	.word	0x1006a1a0
 23ec908:	023fe1f8 	.word	0x023fe1f8
 23ec90c:	023fe1fb 	.word	0x023fe1fb
 23ec910:	1006a260 	.word	0x1006a260
 23ec914:	023fe213 	.word	0x023fe213
 23ec918:	023fda0e 	.word	0x023fda0e
 23ec91c:	1006a282 	.word	0x1006a282
 23ec920:	1006a283 	.word	0x1006a283
 23ec924:	1006a17c 	.word	0x1006a17c
 23ec928:	023fe216 	.word	0x023fe216
 23ec92c:	023fe6d5 	.word	0x023fe6d5
 23ec930:	023fd69c 	.word	0x023fd69c
 23ec934:	1006a285 	.word	0x1006a285
 23ec938:	1006a286 	.word	0x1006a286
 23ec93c:	023fe221 	.word	0x023fe221
 23ec940:	1006a2c8 	.word	0x1006a2c8
 23ec944:	023fe22c 	.word	0x023fe22c
 23ec948:	1006a2c9 	.word	0x1006a2c9
 23ec94c:	023fe233 	.word	0x023fe233
 23ec950:	1006a2ca 	.word	0x1006a2ca
 23ec954:	023fe23a 	.word	0x023fe23a
 23ec958:	1006a2cb 	.word	0x1006a2cb
 23ec95c:	023fe245 	.word	0x023fe245
 23ec960:	1006a7d4 	.word	0x1006a7d4
 23ec964:	b14b      	cbz	r3, 23ec97a <_Z7INFO_Dov+0x746>
    sprintf (buf+strlen(buf), "%sSHT1", comma);
 23ec966:	a836      	add	r0, sp, #216	; 0xd8
 23ec968:	f7f7 fd36 	bl	23e43d8 <strlen>
 23ec96c:	ab36      	add	r3, sp, #216	; 0xd8
 23ec96e:	4622      	mov	r2, r4
 23ec970:	499b      	ldr	r1, [pc, #620]	; (23ecbe0 <_Z7INFO_Dov+0x9ac>)
 23ec972:	4418      	add	r0, r3
 23ec974:	f00a fd78 	bl	23f7468 <sprintf>
    comma=",";
 23ec978:	4c9a      	ldr	r4, [pc, #616]	; (23ecbe4 <_Z7INFO_Dov+0x9b0>)
  }
  if (SHT_2_exists) {
 23ec97a:	4b9b      	ldr	r3, [pc, #620]	; (23ecbe8 <_Z7INFO_Dov+0x9b4>)
 23ec97c:	781b      	ldrb	r3, [r3, #0]
 23ec97e:	b14b      	cbz	r3, 23ec994 <_Z7INFO_Dov+0x760>
    sprintf (buf+strlen(buf), "%sSHT2", comma);
 23ec980:	a836      	add	r0, sp, #216	; 0xd8
 23ec982:	f7f7 fd29 	bl	23e43d8 <strlen>
 23ec986:	ab36      	add	r3, sp, #216	; 0xd8
 23ec988:	4622      	mov	r2, r4
 23ec98a:	4998      	ldr	r1, [pc, #608]	; (23ecbec <_Z7INFO_Dov+0x9b8>)
 23ec98c:	4418      	add	r0, r3
 23ec98e:	f00a fd6b 	bl	23f7468 <sprintf>
    comma=",";
 23ec992:	4c94      	ldr	r4, [pc, #592]	; (23ecbe4 <_Z7INFO_Dov+0x9b0>)
  }
  if (HDC_1_exists) {
 23ec994:	4b96      	ldr	r3, [pc, #600]	; (23ecbf0 <_Z7INFO_Dov+0x9bc>)
 23ec996:	781b      	ldrb	r3, [r3, #0]
 23ec998:	b14b      	cbz	r3, 23ec9ae <_Z7INFO_Dov+0x77a>
    sprintf (buf+strlen(buf), "%sHDC1", comma);
 23ec99a:	a836      	add	r0, sp, #216	; 0xd8
 23ec99c:	f7f7 fd1c 	bl	23e43d8 <strlen>
 23ec9a0:	ab36      	add	r3, sp, #216	; 0xd8
 23ec9a2:	4622      	mov	r2, r4
 23ec9a4:	4993      	ldr	r1, [pc, #588]	; (23ecbf4 <_Z7INFO_Dov+0x9c0>)
 23ec9a6:	4418      	add	r0, r3
 23ec9a8:	f00a fd5e 	bl	23f7468 <sprintf>
    comma=",";
 23ec9ac:	4c8d      	ldr	r4, [pc, #564]	; (23ecbe4 <_Z7INFO_Dov+0x9b0>)
  }
  if (HDC_2_exists) {
 23ec9ae:	4b92      	ldr	r3, [pc, #584]	; (23ecbf8 <_Z7INFO_Dov+0x9c4>)
 23ec9b0:	781b      	ldrb	r3, [r3, #0]
 23ec9b2:	b14b      	cbz	r3, 23ec9c8 <_Z7INFO_Dov+0x794>
    sprintf (buf+strlen(buf), "%sHDC2", comma);
 23ec9b4:	a836      	add	r0, sp, #216	; 0xd8
 23ec9b6:	f7f7 fd0f 	bl	23e43d8 <strlen>
 23ec9ba:	ab36      	add	r3, sp, #216	; 0xd8
 23ec9bc:	4622      	mov	r2, r4
 23ec9be:	498f      	ldr	r1, [pc, #572]	; (23ecbfc <_Z7INFO_Dov+0x9c8>)
 23ec9c0:	4418      	add	r0, r3
 23ec9c2:	f00a fd51 	bl	23f7468 <sprintf>
    comma=",";
 23ec9c6:	4c87      	ldr	r4, [pc, #540]	; (23ecbe4 <_Z7INFO_Dov+0x9b0>)
  }
  if (LPS_1_exists) {
 23ec9c8:	4b8d      	ldr	r3, [pc, #564]	; (23ecc00 <_Z7INFO_Dov+0x9cc>)
 23ec9ca:	781b      	ldrb	r3, [r3, #0]
 23ec9cc:	b14b      	cbz	r3, 23ec9e2 <_Z7INFO_Dov+0x7ae>
    sprintf (buf+strlen(buf), "%sLPS1", comma);
 23ec9ce:	a836      	add	r0, sp, #216	; 0xd8
 23ec9d0:	f7f7 fd02 	bl	23e43d8 <strlen>
 23ec9d4:	ab36      	add	r3, sp, #216	; 0xd8
 23ec9d6:	4622      	mov	r2, r4
 23ec9d8:	498a      	ldr	r1, [pc, #552]	; (23ecc04 <_Z7INFO_Dov+0x9d0>)
 23ec9da:	4418      	add	r0, r3
 23ec9dc:	f00a fd44 	bl	23f7468 <sprintf>
    comma=",";
 23ec9e0:	4c80      	ldr	r4, [pc, #512]	; (23ecbe4 <_Z7INFO_Dov+0x9b0>)
  }
  if (LPS_2_exists) {
 23ec9e2:	4b89      	ldr	r3, [pc, #548]	; (23ecc08 <_Z7INFO_Dov+0x9d4>)
 23ec9e4:	781b      	ldrb	r3, [r3, #0]
 23ec9e6:	b14b      	cbz	r3, 23ec9fc <_Z7INFO_Dov+0x7c8>
    sprintf (buf+strlen(buf), "%sLPS2", comma);
 23ec9e8:	a836      	add	r0, sp, #216	; 0xd8
 23ec9ea:	f7f7 fcf5 	bl	23e43d8 <strlen>
 23ec9ee:	ab36      	add	r3, sp, #216	; 0xd8
 23ec9f0:	4622      	mov	r2, r4
 23ec9f2:	4986      	ldr	r1, [pc, #536]	; (23ecc0c <_Z7INFO_Dov+0x9d8>)
 23ec9f4:	4418      	add	r0, r3
 23ec9f6:	f00a fd37 	bl	23f7468 <sprintf>
    comma=",";
 23ec9fa:	4c7a      	ldr	r4, [pc, #488]	; (23ecbe4 <_Z7INFO_Dov+0x9b0>)
  }
  if (HIH8_exists) {
 23ec9fc:	4b84      	ldr	r3, [pc, #528]	; (23ecc10 <_Z7INFO_Dov+0x9dc>)
 23ec9fe:	781b      	ldrb	r3, [r3, #0]
 23eca00:	b14b      	cbz	r3, 23eca16 <_Z7INFO_Dov+0x7e2>
    sprintf (buf+strlen(buf), "%sHIH8", comma);
 23eca02:	a836      	add	r0, sp, #216	; 0xd8
 23eca04:	f7f7 fce8 	bl	23e43d8 <strlen>
 23eca08:	ab36      	add	r3, sp, #216	; 0xd8
 23eca0a:	4622      	mov	r2, r4
 23eca0c:	4981      	ldr	r1, [pc, #516]	; (23ecc14 <_Z7INFO_Dov+0x9e0>)
 23eca0e:	4418      	add	r0, r3
 23eca10:	f00a fd2a 	bl	23f7468 <sprintf>
    comma=",";
 23eca14:	4c73      	ldr	r4, [pc, #460]	; (23ecbe4 <_Z7INFO_Dov+0x9b0>)
  }
  if (SI1145_exists) {
 23eca16:	4b80      	ldr	r3, [pc, #512]	; (23ecc18 <_Z7INFO_Dov+0x9e4>)
 23eca18:	781b      	ldrb	r3, [r3, #0]
 23eca1a:	b14b      	cbz	r3, 23eca30 <_Z7INFO_Dov+0x7fc>
    sprintf (buf+strlen(buf), "%sSI", comma);
 23eca1c:	a836      	add	r0, sp, #216	; 0xd8
 23eca1e:	f7f7 fcdb 	bl	23e43d8 <strlen>
 23eca22:	ab36      	add	r3, sp, #216	; 0xd8
 23eca24:	4622      	mov	r2, r4
 23eca26:	497d      	ldr	r1, [pc, #500]	; (23ecc1c <_Z7INFO_Dov+0x9e8>)
 23eca28:	4418      	add	r0, r3
 23eca2a:	f00a fd1d 	bl	23f7468 <sprintf>
    comma=",";
 23eca2e:	4c6d      	ldr	r4, [pc, #436]	; (23ecbe4 <_Z7INFO_Dov+0x9b0>)
  }
  if (VEML7700_exists) {
 23eca30:	4b7b      	ldr	r3, [pc, #492]	; (23ecc20 <_Z7INFO_Dov+0x9ec>)
 23eca32:	781b      	ldrb	r3, [r3, #0]
 23eca34:	b14b      	cbz	r3, 23eca4a <_Z7INFO_Dov+0x816>
    sprintf (buf+strlen(buf), "%sVEML", comma);
 23eca36:	a836      	add	r0, sp, #216	; 0xd8
 23eca38:	f7f7 fcce 	bl	23e43d8 <strlen>
 23eca3c:	ab36      	add	r3, sp, #216	; 0xd8
 23eca3e:	4622      	mov	r2, r4
 23eca40:	4978      	ldr	r1, [pc, #480]	; (23ecc24 <_Z7INFO_Dov+0x9f0>)
 23eca42:	4418      	add	r0, r3
 23eca44:	f00a fd10 	bl	23f7468 <sprintf>
    comma=",";
 23eca48:	4c66      	ldr	r4, [pc, #408]	; (23ecbe4 <_Z7INFO_Dov+0x9b0>)
  }
  if (BLX_exists) {
 23eca4a:	4b77      	ldr	r3, [pc, #476]	; (23ecc28 <_Z7INFO_Dov+0x9f4>)
 23eca4c:	781b      	ldrb	r3, [r3, #0]
 23eca4e:	b14b      	cbz	r3, 23eca64 <_Z7INFO_Dov+0x830>
    sprintf (buf+strlen(buf), "%sBLX", comma);
 23eca50:	a836      	add	r0, sp, #216	; 0xd8
 23eca52:	f7f7 fcc1 	bl	23e43d8 <strlen>
 23eca56:	ab36      	add	r3, sp, #216	; 0xd8
 23eca58:	4622      	mov	r2, r4
 23eca5a:	4974      	ldr	r1, [pc, #464]	; (23ecc2c <_Z7INFO_Dov+0x9f8>)
 23eca5c:	4418      	add	r0, r3
 23eca5e:	f00a fd03 	bl	23f7468 <sprintf>
    comma=",";
 23eca62:	4c60      	ldr	r4, [pc, #384]	; (23ecbe4 <_Z7INFO_Dov+0x9b0>)
  }
  if (AS5600_exists) {
 23eca64:	4b72      	ldr	r3, [pc, #456]	; (23ecc30 <_Z7INFO_Dov+0x9fc>)
 23eca66:	781b      	ldrb	r3, [r3, #0]
 23eca68:	b14b      	cbz	r3, 23eca7e <_Z7INFO_Dov+0x84a>
    sprintf (buf+strlen(buf), "%sAS5600", comma);
 23eca6a:	a836      	add	r0, sp, #216	; 0xd8
 23eca6c:	f7f7 fcb4 	bl	23e43d8 <strlen>
 23eca70:	ab36      	add	r3, sp, #216	; 0xd8
 23eca72:	4622      	mov	r2, r4
 23eca74:	496f      	ldr	r1, [pc, #444]	; (23ecc34 <_Z7INFO_Dov+0xa00>)
 23eca76:	4418      	add	r0, r3
 23eca78:	f00a fcf6 	bl	23f7468 <sprintf>
    comma=",";
 23eca7c:	4c59      	ldr	r4, [pc, #356]	; (23ecbe4 <_Z7INFO_Dov+0x9b0>)
  }
  if (TLW_exists) {
 23eca7e:	4b6e      	ldr	r3, [pc, #440]	; (23ecc38 <_Z7INFO_Dov+0xa04>)
 23eca80:	781b      	ldrb	r3, [r3, #0]
 23eca82:	b14b      	cbz	r3, 23eca98 <_Z7INFO_Dov+0x864>
    sprintf (buf+strlen(buf), "%sTLW", comma);
 23eca84:	a836      	add	r0, sp, #216	; 0xd8
 23eca86:	f7f7 fca7 	bl	23e43d8 <strlen>
 23eca8a:	ab36      	add	r3, sp, #216	; 0xd8
 23eca8c:	4622      	mov	r2, r4
 23eca8e:	496b      	ldr	r1, [pc, #428]	; (23ecc3c <_Z7INFO_Dov+0xa08>)
 23eca90:	4418      	add	r0, r3
 23eca92:	f00a fce9 	bl	23f7468 <sprintf>
    comma=",";
 23eca96:	4c53      	ldr	r4, [pc, #332]	; (23ecbe4 <_Z7INFO_Dov+0x9b0>)
  }
  if (TSM_exists) {
 23eca98:	4b69      	ldr	r3, [pc, #420]	; (23ecc40 <_Z7INFO_Dov+0xa0c>)
 23eca9a:	781b      	ldrb	r3, [r3, #0]
 23eca9c:	b14b      	cbz	r3, 23ecab2 <_Z7INFO_Dov+0x87e>
    sprintf (buf+strlen(buf), "%sTSM", comma);
 23eca9e:	a836      	add	r0, sp, #216	; 0xd8
 23ecaa0:	f7f7 fc9a 	bl	23e43d8 <strlen>
 23ecaa4:	ab36      	add	r3, sp, #216	; 0xd8
 23ecaa6:	4622      	mov	r2, r4
 23ecaa8:	4966      	ldr	r1, [pc, #408]	; (23ecc44 <_Z7INFO_Dov+0xa10>)
 23ecaaa:	4418      	add	r0, r3
 23ecaac:	f00a fcdc 	bl	23f7468 <sprintf>
    comma=",";
 23ecab0:	4c4c      	ldr	r4, [pc, #304]	; (23ecbe4 <_Z7INFO_Dov+0x9b0>)
  }
  if (TMSM_exists) {
 23ecab2:	4b65      	ldr	r3, [pc, #404]	; (23ecc48 <_Z7INFO_Dov+0xa14>)
 23ecab4:	781b      	ldrb	r3, [r3, #0]
 23ecab6:	b14b      	cbz	r3, 23ecacc <_Z7INFO_Dov+0x898>
    sprintf (buf+strlen(buf), "%sTMSM", comma);
 23ecab8:	a836      	add	r0, sp, #216	; 0xd8
 23ecaba:	f7f7 fc8d 	bl	23e43d8 <strlen>
 23ecabe:	ab36      	add	r3, sp, #216	; 0xd8
 23ecac0:	4622      	mov	r2, r4
 23ecac2:	4962      	ldr	r1, [pc, #392]	; (23ecc4c <_Z7INFO_Dov+0xa18>)
 23ecac4:	4418      	add	r0, r3
 23ecac6:	f00a fccf 	bl	23f7468 <sprintf>
    comma=",";
 23ecaca:	4c46      	ldr	r4, [pc, #280]	; (23ecbe4 <_Z7INFO_Dov+0x9b0>)
  }
  if (HI_exists) {
 23ecacc:	4b60      	ldr	r3, [pc, #384]	; (23ecc50 <_Z7INFO_Dov+0xa1c>)
 23ecace:	781b      	ldrb	r3, [r3, #0]
 23ecad0:	b14b      	cbz	r3, 23ecae6 <_Z7INFO_Dov+0x8b2>
    sprintf (buf+strlen(buf), "%sHI", comma);
 23ecad2:	a836      	add	r0, sp, #216	; 0xd8
 23ecad4:	f7f7 fc80 	bl	23e43d8 <strlen>
 23ecad8:	ab36      	add	r3, sp, #216	; 0xd8
 23ecada:	4622      	mov	r2, r4
 23ecadc:	495d      	ldr	r1, [pc, #372]	; (23ecc54 <_Z7INFO_Dov+0xa20>)
 23ecade:	4418      	add	r0, r3
 23ecae0:	f00a fcc2 	bl	23f7468 <sprintf>
    comma=",";
 23ecae4:	4c3f      	ldr	r4, [pc, #252]	; (23ecbe4 <_Z7INFO_Dov+0x9b0>)
  }
  if (WBT_exists) {
 23ecae6:	4b5c      	ldr	r3, [pc, #368]	; (23ecc58 <_Z7INFO_Dov+0xa24>)
 23ecae8:	781b      	ldrb	r3, [r3, #0]
 23ecaea:	b14b      	cbz	r3, 23ecb00 <_Z7INFO_Dov+0x8cc>
    sprintf (buf+strlen(buf), "%sWBT", comma);
 23ecaec:	a836      	add	r0, sp, #216	; 0xd8
 23ecaee:	f7f7 fc73 	bl	23e43d8 <strlen>
 23ecaf2:	ab36      	add	r3, sp, #216	; 0xd8
 23ecaf4:	4622      	mov	r2, r4
 23ecaf6:	4959      	ldr	r1, [pc, #356]	; (23ecc5c <_Z7INFO_Dov+0xa28>)
 23ecaf8:	4418      	add	r0, r3
 23ecafa:	f00a fcb5 	bl	23f7468 <sprintf>
    comma=",";
 23ecafe:	4c39      	ldr	r4, [pc, #228]	; (23ecbe4 <_Z7INFO_Dov+0x9b0>)
  }
  if (WBGT_exists) {
 23ecb00:	4b57      	ldr	r3, [pc, #348]	; (23ecc60 <_Z7INFO_Dov+0xa2c>)
 23ecb02:	781b      	ldrb	r3, [r3, #0]
 23ecb04:	b16b      	cbz	r3, 23ecb22 <_Z7INFO_Dov+0x8ee>
    if (MCP_3_exists) {
      sprintf (buf+strlen(buf), "%sWBGT W/GLOBE", comma);
 23ecb06:	a836      	add	r0, sp, #216	; 0xd8
 23ecb08:	f7f7 fc66 	bl	23e43d8 <strlen>
 23ecb0c:	ab36      	add	r3, sp, #216	; 0xd8
 23ecb0e:	4418      	add	r0, r3
    if (MCP_3_exists) {
 23ecb10:	782b      	ldrb	r3, [r5, #0]
      sprintf (buf+strlen(buf), "%sWBGT W/GLOBE", comma);
 23ecb12:	4622      	mov	r2, r4
    if (MCP_3_exists) {
 23ecb14:	2b00      	cmp	r3, #0
 23ecb16:	f000 818c 	beq.w	23ece32 <_Z7INFO_Dov+0xbfe>
      sprintf (buf+strlen(buf), "%sWBGT W/GLOBE", comma);
 23ecb1a:	4952      	ldr	r1, [pc, #328]	; (23ecc64 <_Z7INFO_Dov+0xa30>)
    }
    else {
      sprintf (buf+strlen(buf), "%sWBGT WO/GLOBE", comma);
 23ecb1c:	f00a fca4 	bl	23f7468 <sprintf>
    }
    comma=",";
 23ecb20:	4c30      	ldr	r4, [pc, #192]	; (23ecbe4 <_Z7INFO_Dov+0x9b0>)
  }
  if (PM25AQI_exists) {
 23ecb22:	4b51      	ldr	r3, [pc, #324]	; (23ecc68 <_Z7INFO_Dov+0xa34>)
 23ecb24:	781b      	ldrb	r3, [r3, #0]
 23ecb26:	b14b      	cbz	r3, 23ecb3c <_Z7INFO_Dov+0x908>
    sprintf (buf+strlen(buf), "%sPM25AQ", comma);
 23ecb28:	a836      	add	r0, sp, #216	; 0xd8
 23ecb2a:	f7f7 fc55 	bl	23e43d8 <strlen>
 23ecb2e:	ab36      	add	r3, sp, #216	; 0xd8
 23ecb30:	4622      	mov	r2, r4
 23ecb32:	494e      	ldr	r1, [pc, #312]	; (23ecc6c <_Z7INFO_Dov+0xa38>)
 23ecb34:	4418      	add	r0, r3
 23ecb36:	f00a fc97 	bl	23f7468 <sprintf>
    comma=",";
 23ecb3a:	4c2a      	ldr	r4, [pc, #168]	; (23ecbe4 <_Z7INFO_Dov+0x9b0>)
  }

  GetPinName(RAINGAUGE1_IRQ_PIN, Buffer32Bytes);
 23ecb3c:	494c      	ldr	r1, [pc, #304]	; (23ecc70 <_Z7INFO_Dov+0xa3c>)
 23ecb3e:	2010      	movs	r0, #16
 23ecb40:	f7fc f994 	bl	23e8e6c <_Z10GetPinNametPc>
  sprintf (buf+strlen(buf), "%sRG(%s)", comma, Buffer32Bytes);
 23ecb44:	a836      	add	r0, sp, #216	; 0xd8
 23ecb46:	f7f7 fc47 	bl	23e43d8 <strlen>
 23ecb4a:	4622      	mov	r2, r4
 23ecb4c:	ac36      	add	r4, sp, #216	; 0xd8
 23ecb4e:	4b48      	ldr	r3, [pc, #288]	; (23ecc70 <_Z7INFO_Dov+0xa3c>)
 23ecb50:	4948      	ldr	r1, [pc, #288]	; (23ecc74 <_Z7INFO_Dov+0xa40>)
 23ecb52:	4420      	add	r0, r4
 23ecb54:	f00a fc88 	bl	23f7468 <sprintf>

  writer.name("sensors").value(buf);
 23ecb58:	4947      	ldr	r1, [pc, #284]	; (23ecc78 <_Z7INFO_Dov+0xa44>)
 23ecb5a:	a80a      	add	r0, sp, #40	; 0x28
 23ecb5c:	f7f8 fac2 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ecb60:	4621      	mov	r1, r4
 23ecb62:	f7f8 f9f5 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  // LoRa
  if (LORA_exists) {
 23ecb66:	4b45      	ldr	r3, [pc, #276]	; (23ecc7c <_Z7INFO_Dov+0xa48>)
 23ecb68:	781b      	ldrb	r3, [r3, #0]
 23ecb6a:	2b00      	cmp	r3, #0
 23ecb6c:	f000 8163 	beq.w	23ece36 <_Z7INFO_Dov+0xc02>
    sprintf (buf, "%d,%d,%dMHz", cf_lora_unitid, cf_lora_txpower, cf_lora_freq);  
 23ecb70:	4b43      	ldr	r3, [pc, #268]	; (23ecc80 <_Z7INFO_Dov+0xa4c>)
 23ecb72:	4a44      	ldr	r2, [pc, #272]	; (23ecc84 <_Z7INFO_Dov+0xa50>)
 23ecb74:	681b      	ldr	r3, [r3, #0]
 23ecb76:	4620      	mov	r0, r4
 23ecb78:	9300      	str	r3, [sp, #0]
 23ecb7a:	4b43      	ldr	r3, [pc, #268]	; (23ecc88 <_Z7INFO_Dov+0xa54>)
 23ecb7c:	6812      	ldr	r2, [r2, #0]
 23ecb7e:	681b      	ldr	r3, [r3, #0]
 23ecb80:	4942      	ldr	r1, [pc, #264]	; (23ecc8c <_Z7INFO_Dov+0xa58>)
 23ecb82:	f00a fc71 	bl	23f7468 <sprintf>
  }
  else {
    sprintf (buf, "NF");
  }
  writer.name("lora").value(buf);
 23ecb86:	4942      	ldr	r1, [pc, #264]	; (23ecc90 <_Z7INFO_Dov+0xa5c>)

  // Oled Display
  if (oled_type) {
 23ecb88:	4c42      	ldr	r4, [pc, #264]	; (23ecc94 <_Z7INFO_Dov+0xa60>)
  writer.name("lora").value(buf);
 23ecb8a:	a80a      	add	r0, sp, #40	; 0x28
 23ecb8c:	f7f8 faaa 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ecb90:	a936      	add	r1, sp, #216	; 0xd8
 23ecb92:	f7f8 f9dd 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  if (oled_type) {
 23ecb96:	6823      	ldr	r3, [r4, #0]
    writer.name("oled").value(OLED32 ? "32" : "64");
 23ecb98:	493f      	ldr	r1, [pc, #252]	; (23ecc98 <_Z7INFO_Dov+0xa64>)
 23ecb9a:	a80a      	add	r0, sp, #40	; 0x28
  if (oled_type) {
 23ecb9c:	2b00      	cmp	r3, #0
 23ecb9e:	f000 814f 	beq.w	23ece40 <_Z7INFO_Dov+0xc0c>
    writer.name("oled").value(OLED32 ? "32" : "64");
 23ecba2:	f7f8 fa9f 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ecba6:	6821      	ldr	r1, [r4, #0]
 23ecba8:	4a3c      	ldr	r2, [pc, #240]	; (23ecc9c <_Z7INFO_Dov+0xa68>)
 23ecbaa:	4b3d      	ldr	r3, [pc, #244]	; (23ecca0 <_Z7INFO_Dov+0xa6c>)
 23ecbac:	293c      	cmp	r1, #60	; 0x3c
 23ecbae:	bf0c      	ite	eq
 23ecbb0:	4611      	moveq	r1, r2
 23ecbb2:	4619      	movne	r1, r3
  else {
    writer.name("oled").value("NF");
  }

  // Serial Console Enable
  GetPinName(SCE_PIN, Buffer32Bytes);
 23ecbb4:	4d3b      	ldr	r5, [pc, #236]	; (23ecca4 <_Z7INFO_Dov+0xa70>)
    writer.name("oled").value("NF");
 23ecbb6:	f7f8 f9cb 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  GetPinName(SCE_PIN, Buffer32Bytes);
 23ecbba:	492d      	ldr	r1, [pc, #180]	; (23ecc70 <_Z7INFO_Dov+0xa3c>)
 23ecbbc:	8828      	ldrh	r0, [r5, #0]
 23ecbbe:	f7fc f955 	bl	23e8e6c <_Z10GetPinNametPc>
  sprintf (buf, "scepin(%s)", Buffer32Bytes);
 23ecbc2:	4a2b      	ldr	r2, [pc, #172]	; (23ecc70 <_Z7INFO_Dov+0xa3c>)
 23ecbc4:	4938      	ldr	r1, [pc, #224]	; (23ecca8 <_Z7INFO_Dov+0xa74>)
 23ecbc6:	a836      	add	r0, sp, #216	; 0xd8
 23ecbc8:	f00a fc4e 	bl	23f7468 <sprintf>
  writer.name(buf).value((digitalRead(SCE_PIN)) ? "DISABLED" : "ENABLED");
 23ecbcc:	a936      	add	r1, sp, #216	; 0xd8
 23ecbce:	a80a      	add	r0, sp, #40	; 0x28
 23ecbd0:	f7f8 fa88 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ecbd4:	4604      	mov	r4, r0
 23ecbd6:	8828      	ldrh	r0, [r5, #0]
 23ecbd8:	f00c ff5a 	bl	23f9a90 <digitalRead>
 23ecbdc:	e066      	b.n	23eccac <_Z7INFO_Dov+0xa78>
 23ecbde:	bf00      	nop
 23ecbe0:	023fe250 	.word	0x023fe250
 23ecbe4:	023fd69c 	.word	0x023fd69c
 23ecbe8:	1006a7d5 	.word	0x1006a7d5
 23ecbec:	023fe257 	.word	0x023fe257
 23ecbf0:	1006a2ac 	.word	0x1006a2ac
 23ecbf4:	023fe25e 	.word	0x023fe25e
 23ecbf8:	1006a2ad 	.word	0x1006a2ad
 23ecbfc:	023fe265 	.word	0x023fe265
 23ecc00:	1006a2b2 	.word	0x1006a2b2
 23ecc04:	023fe26c 	.word	0x023fe26c
 23ecc08:	1006a2b3 	.word	0x1006a2b3
 23ecc0c:	023fe273 	.word	0x023fe273
 23ecc10:	1006a2ae 	.word	0x1006a2ae
 23ecc14:	023fe27a 	.word	0x023fe27a
 23ecc18:	1006a7d6 	.word	0x1006a7d6
 23ecc1c:	023fe281 	.word	0x023fe281
 23ecc20:	1006a7e8 	.word	0x1006a7e8
 23ecc24:	023fe286 	.word	0x023fe286
 23ecc28:	1006a280 	.word	0x1006a280
 23ecc2c:	023fe28d 	.word	0x023fe28d
 23ecc30:	1006a0f8 	.word	0x1006a0f8
 23ecc34:	023fe293 	.word	0x023fe293
 23ecc38:	1006a7e4 	.word	0x1006a7e4
 23ecc3c:	023fe29c 	.word	0x023fe29c
 23ecc40:	1006a7e6 	.word	0x1006a7e6
 23ecc44:	023fe2a2 	.word	0x023fe2a2
 23ecc48:	1006a7e5 	.word	0x1006a7e5
 23ecc4c:	023fe2a8 	.word	0x023fe2a8
 23ecc50:	1006a2af 	.word	0x1006a2af
 23ecc54:	023fe2af 	.word	0x023fe2af
 23ecc58:	1006a7ea 	.word	0x1006a7ea
 23ecc5c:	023fe2b4 	.word	0x023fe2b4
 23ecc60:	1006a7e9 	.word	0x1006a7e9
 23ecc64:	023fe2ba 	.word	0x023fe2ba
 23ecc68:	1006a2cd 	.word	0x1006a2cd
 23ecc6c:	023fe2d9 	.word	0x023fe2d9
 23ecc70:	1006a287 	.word	0x1006a287
 23ecc74:	023fe2e2 	.word	0x023fe2e2
 23ecc78:	023fe2eb 	.word	0x023fe2eb
 23ecc7c:	1006a2b1 	.word	0x1006a2b1
 23ecc80:	1006a190 	.word	0x1006a190
 23ecc84:	1006a198 	.word	0x1006a198
 23ecc88:	1006a194 	.word	0x1006a194
 23ecc8c:	023fe2f3 	.word	0x023fe2f3
 23ecc90:	023fe2ff 	.word	0x023fe2ff
 23ecc94:	1007aa20 	.word	0x1007aa20
 23ecc98:	023fe304 	.word	0x023fe304
 23ecc9c:	023fe11a 	.word	0x023fe11a
 23ecca0:	023fe11d 	.word	0x023fe11d
 23ecca4:	1006a100 	.word	0x1006a100
 23ecca8:	023fe309 	.word	0x023fe309
 23eccac:	4a6d      	ldr	r2, [pc, #436]	; (23ece64 <_Z7INFO_Dov+0xc30>)
 23eccae:	496e      	ldr	r1, [pc, #440]	; (23ece68 <_Z7INFO_Dov+0xc34>)
 23eccb0:	2800      	cmp	r0, #0
 23eccb2:	bf18      	it	ne
 23eccb4:	4611      	movne	r1, r2
 23eccb6:	4620      	mov	r0, r4
 23eccb8:	f7f8 f94a 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  writer.name("sce").value((SerialConsoleEnabled) ? "TRUE" : "FALSE");
 23eccbc:	496b      	ldr	r1, [pc, #428]	; (23ece6c <_Z7INFO_Dov+0xc38>)
 23eccbe:	a80a      	add	r0, sp, #40	; 0x28
 23eccc0:	f7f8 fa10 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23eccc4:	4b6a      	ldr	r3, [pc, #424]	; (23ece70 <_Z7INFO_Dov+0xc3c>)
 23eccc6:	4a6b      	ldr	r2, [pc, #428]	; (23ece74 <_Z7INFO_Dov+0xc40>)
 23eccc8:	7819      	ldrb	r1, [r3, #0]
 23eccca:	4b6b      	ldr	r3, [pc, #428]	; (23ece78 <_Z7INFO_Dov+0xc44>)
 23ecccc:	2900      	cmp	r1, #0
 23eccce:	bf14      	ite	ne
 23eccd0:	4611      	movne	r1, r2
 23eccd2:	4619      	moveq	r1, r3
 23eccd4:	f7f8 f93c 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  writer.endObject();
 23eccd8:	a80a      	add	r0, sp, #40	; 0x28
 23eccda:	f00b fbc6 	bl	23f846a <_ZN5spark10JSONWriter9endObjectEv>

  // Done profiling system

  // Update INFO.TXT file
  if (SD_exists) {
 23eccde:	4b67      	ldr	r3, [pc, #412]	; (23ece7c <_Z7INFO_Dov+0xc48>)
 23ecce0:	781b      	ldrb	r3, [r3, #0]
 23ecce2:	b1c3      	cbz	r3, 23ecd16 <_Z7INFO_Dov+0xae2>
    File fp = SD.open(SD_INFO_FILE, FILE_WRITE | O_TRUNC); 
 23ecce4:	f244 6302 	movw	r3, #17922	; 0x4602
 23ecce8:	4a65      	ldr	r2, [pc, #404]	; (23ece80 <_Z7INFO_Dov+0xc4c>)
 23eccea:	4966      	ldr	r1, [pc, #408]	; (23ece84 <_Z7INFO_Dov+0xc50>)
 23eccec:	a822      	add	r0, sp, #136	; 0x88
 23eccee:	f008 ff1d 	bl	23f5b2c <_ZN8FsVolume4openEPKci>
 23eccf2:	a826      	add	r0, sp, #152	; 0x98
 23eccf4:	f7f8 fa7d 	bl	23e51f2 <_ZNK10FsBaseFile6isOpenEv>
 23eccf8:	4c63      	ldr	r4, [pc, #396]	; (23ece88 <_Z7INFO_Dov+0xc54>)
    if (fp) {
 23eccfa:	2800      	cmp	r0, #0
 23eccfc:	f000 80a4 	beq.w	23ece48 <_Z7INFO_Dov+0xc14>
      fp.println(msgbuf);
 23ecd00:	4962      	ldr	r1, [pc, #392]	; (23ece8c <_Z7INFO_Dov+0xc58>)
 23ecd02:	a822      	add	r0, sp, #136	; 0x88
 23ecd04:	f00b fee9 	bl	23f8ada <_ZN5Print7printlnEPKc>
      fp.close();
 23ecd08:	a826      	add	r0, sp, #152	; 0x98
 23ecd0a:	f008 fe36 	bl	23f597a <_ZN10FsBaseFile5closeEv>
      SystemStatusBits &= ~SSB_SD;  // Turn Off Bit
 23ecd0e:	6823      	ldr	r3, [r4, #0]
 23ecd10:	f023 0302 	bic.w	r3, r3, #2
 23ecd14:	6023      	str	r3, [r4, #0]
      SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
      Output ("SD:Open(Info)ERR");
    }
  }

  if (Particle_Publish((char *) "INFO")) {
 23ecd16:	485e      	ldr	r0, [pc, #376]	; (23ece90 <_Z7INFO_Dov+0xc5c>)
 23ecd18:	f7ff f9dc 	bl	23ec0d4 <_Z16Particle_PublishPc>
 23ecd1c:	4604      	mov	r4, r0
 23ecd1e:	2800      	cmp	r0, #0
 23ecd20:	f000 809a 	beq.w	23ece58 <_Z7INFO_Dov+0xc24>
    Serial_write (msgbuf);
 23ecd24:	4859      	ldr	r0, [pc, #356]	; (23ece8c <_Z7INFO_Dov+0xc58>)
 23ecd26:	f7f8 fc87 	bl	23e5638 <_Z12Serial_writePKc>
    sprintf (Buffer32Bytes, "INFO->PUB OK[%d]", strlen(msgbuf)+1);
 23ecd2a:	4858      	ldr	r0, [pc, #352]	; (23ece8c <_Z7INFO_Dov+0xc58>)
 23ecd2c:	f7f7 fb54 	bl	23e43d8 <strlen>
 23ecd30:	4958      	ldr	r1, [pc, #352]	; (23ece94 <_Z7INFO_Dov+0xc60>)
 23ecd32:	1c42      	adds	r2, r0, #1
 23ecd34:	4858      	ldr	r0, [pc, #352]	; (23ece98 <_Z7INFO_Dov+0xc64>)
 23ecd36:	f00a fb97 	bl	23f7468 <sprintf>
    Output(Buffer32Bytes);
    return(true);
  }
  else {
    sprintf (Buffer32Bytes, "INFO->PUB ERR");
    Output(Buffer32Bytes);
 23ecd3a:	4857      	ldr	r0, [pc, #348]	; (23ece98 <_Z7INFO_Dov+0xc64>)
 23ecd3c:	f7f8 fca6 	bl	23e568c <_Z6OutputPKc>
    return(false);
  }
 23ecd40:	4620      	mov	r0, r4
 23ecd42:	b076      	add	sp, #472	; 0x1d8
 23ecd44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      writer.name("n2s").value(-1);
 23ecd48:	a80a      	add	r0, sp, #40	; 0x28
 23ecd4a:	f7f8 f9cb 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ecd4e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 23ecd52:	f00b fbad 	bl	23f84b0 <_ZN5spark10JSONWriter5valueEi>
    virtual ~Print() {}
 23ecd56:	f7ff bb9c 	b.w	23ec492 <_Z7INFO_Dov+0x25e>
    writer.name("n2s").value("NF");
 23ecd5a:	4950      	ldr	r1, [pc, #320]	; (23ece9c <_Z7INFO_Dov+0xc68>)
 23ecd5c:	a80a      	add	r0, sp, #40	; 0x28
 23ecd5e:	f7f8 f9c1 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ecd62:	494f      	ldr	r1, [pc, #316]	; (23ecea0 <_Z7INFO_Dov+0xc6c>)
 23ecd64:	f7f8 f8f4 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
 23ecd68:	f7ff bb93 	b.w	23ec492 <_Z7INFO_Dov+0x25e>
    writer.name("ps").value(sps);
 23ecd6c:	f7f8 f9ba 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ecd70:	4621      	mov	r1, r4
 23ecd72:	f00b fb9d 	bl	23f84b0 <_ZN5spark10JSONWriter5valueEi>
 23ecd76:	f7ff bba3 	b.w	23ec4c0 <_Z7INFO_Dov+0x28c>
    writer.name("bcs").value(sbs);
 23ecd7a:	f7f8 f9b3 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ecd7e:	4621      	mov	r1, r4
 23ecd80:	f00b fb96 	bl	23f84b0 <_ZN5spark10JSONWriter5valueEi>
 23ecd84:	f7ff bbb2 	b.w	23ec4ec <_Z7INFO_Dov+0x2b8>
    writer.name("nw").value("CELL");
 23ecd88:	f7f8 f9ac 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ecd8c:	4945      	ldr	r1, [pc, #276]	; (23ecea4 <_Z7INFO_Dov+0xc70>)
 23ecd8e:	f7f8 f8df 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    CellularSignal sig = Cellular.RSSI();
 23ecd92:	4945      	ldr	r1, [pc, #276]	; (23ecea8 <_Z7INFO_Dov+0xc74>)
 23ecd94:	a822      	add	r0, sp, #136	; 0x88
 23ecd96:	f00a fcb7 	bl	23f7708 <_ZN5spark13CellularClass4RSSIEv>
    writer.name("css").value(sig.getStrength(), 4);
 23ecd9a:	4944      	ldr	r1, [pc, #272]	; (23eceac <_Z7INFO_Dov+0xc78>)
 23ecd9c:	a80a      	add	r0, sp, #40	; 0x28
 23ecd9e:	f7f8 f9a1 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ecda2:	4604      	mov	r4, r0
 23ecda4:	a822      	add	r0, sp, #136	; 0x88
 23ecda6:	f00a fd0d 	bl	23f77c4 <_ZNK14CellularSignal11getStrengthEv>
 23ecdaa:	ee10 0a10 	vmov	r0, s0
 23ecdae:	f7f6 fc7b 	bl	23e36a8 <__aeabi_f2d>
 23ecdb2:	ec41 0b10 	vmov	d0, r0, r1
 23ecdb6:	2104      	movs	r1, #4
 23ecdb8:	4620      	mov	r0, r4
 23ecdba:	f00b fbc3 	bl	23f8544 <_ZN5spark10JSONWriter5valueEdi>
    writer.name("csq").value(sig.getQuality(), 4);
 23ecdbe:	493c      	ldr	r1, [pc, #240]	; (23eceb0 <_Z7INFO_Dov+0xc7c>)
 23ecdc0:	a80a      	add	r0, sp, #40	; 0x28
 23ecdc2:	f7f8 f98f 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ecdc6:	4604      	mov	r4, r0
 23ecdc8:	a822      	add	r0, sp, #136	; 0x88
 23ecdca:	f00a fd2b 	bl	23f7824 <_ZNK14CellularSignal10getQualityEv>
 23ecdce:	ee10 0a10 	vmov	r0, s0
 23ecdd2:	f7f6 fc69 	bl	23e36a8 <__aeabi_f2d>
 23ecdd6:	ec41 0b10 	vmov	d0, r0, r1
 23ecdda:	2104      	movs	r1, #4
 23ecddc:	4620      	mov	r0, r4
 23ecdde:	f00b fbb1 	bl	23f8544 <_ZN5spark10JSONWriter5valueEdi>
    writer.name("imsi").value(imsi); // International Mobile Subscriber Identity
 23ecde2:	4934      	ldr	r1, [pc, #208]	; (23eceb4 <_Z7INFO_Dov+0xc80>)
 23ecde4:	a80a      	add	r0, sp, #40	; 0x28
 23ecde6:	f7f8 f97d 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ecdea:	4933      	ldr	r1, [pc, #204]	; (23eceb8 <_Z7INFO_Dov+0xc84>)
 23ecdec:	e4d4      	b.n	23ec798 <_Z7INFO_Dov+0x564>
    writer.name("pmts").value("NF");
 23ecdee:	f7f8 f979 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ecdf2:	492b      	ldr	r1, [pc, #172]	; (23ecea0 <_Z7INFO_Dov+0xc6c>)
 23ecdf4:	f7f8 f8ac 	bl	23e4f50 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
 23ecdf8:	e4e6      	b.n	23ec7c8 <_Z7INFO_Dov+0x594>
      writer.name("a4").value("DIST 10M");
 23ecdfa:	f7f8 f973 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ecdfe:	492f      	ldr	r1, [pc, #188]	; (23ecebc <_Z7INFO_Dov+0xc88>)
 23ece00:	e4f7      	b.n	23ec7f2 <_Z7INFO_Dov+0x5be>
  else if (A4_State == A4_STATE_RAIN){
 23ece02:	2b02      	cmp	r3, #2
    writer.name("a4").value("RG2");
 23ece04:	492e      	ldr	r1, [pc, #184]	; (23ecec0 <_Z7INFO_Dov+0xc8c>)
 23ece06:	a80a      	add	r0, sp, #40	; 0x28
  else if (A4_State == A4_STATE_RAIN){
 23ece08:	d103      	bne.n	23ece12 <_Z7INFO_Dov+0xbde>
    writer.name("a4").value("RG2");
 23ece0a:	f7f8 f96b 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ece0e:	492d      	ldr	r1, [pc, #180]	; (23ecec4 <_Z7INFO_Dov+0xc90>)
 23ece10:	e4ef      	b.n	23ec7f2 <_Z7INFO_Dov+0x5be>
  else if (A4_State == A4_STATE_RAW){
 23ece12:	2b03      	cmp	r3, #3
 23ece14:	d103      	bne.n	23ece1e <_Z7INFO_Dov+0xbea>
    writer.name("a4").value("RAW");
 23ece16:	f7f8 f965 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ece1a:	492b      	ldr	r1, [pc, #172]	; (23ecec8 <_Z7INFO_Dov+0xc94>)
 23ece1c:	e4e9      	b.n	23ec7f2 <_Z7INFO_Dov+0x5be>
    writer.name("a4").value("NS"); // Not Set
 23ece1e:	f7f8 f961 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ece22:	492a      	ldr	r1, [pc, #168]	; (23ececc <_Z7INFO_Dov+0xc98>)
 23ece24:	e4e5      	b.n	23ec7f2 <_Z7INFO_Dov+0x5be>
    writer.name("a5").value("NS"); // Not Set
 23ece26:	f7f8 f95d 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ece2a:	4928      	ldr	r1, [pc, #160]	; (23ececc <_Z7INFO_Dov+0xc98>)
 23ece2c:	e4ed      	b.n	23ec80a <_Z7INFO_Dov+0x5d6>
  const char *comma = "";
 23ece2e:	4c28      	ldr	r4, [pc, #160]	; (23eced0 <_Z7INFO_Dov+0xc9c>)
 23ece30:	e501      	b.n	23ec836 <_Z7INFO_Dov+0x602>
      sprintf (buf+strlen(buf), "%sWBGT WO/GLOBE", comma);
 23ece32:	4928      	ldr	r1, [pc, #160]	; (23eced4 <_Z7INFO_Dov+0xca0>)
 23ece34:	e672      	b.n	23ecb1c <_Z7INFO_Dov+0x8e8>
    sprintf (buf, "NF");
 23ece36:	491a      	ldr	r1, [pc, #104]	; (23ecea0 <_Z7INFO_Dov+0xc6c>)
 23ece38:	a836      	add	r0, sp, #216	; 0xd8
 23ece3a:	f00f fcd5 	bl	23fc7e8 <strcpy>
 23ece3e:	e6a2      	b.n	23ecb86 <_Z7INFO_Dov+0x952>
    writer.name("oled").value("NF");
 23ece40:	f7f8 f950 	bl	23e50e4 <_ZN5spark10JSONWriter4nameEPKc>
 23ece44:	4916      	ldr	r1, [pc, #88]	; (23ecea0 <_Z7INFO_Dov+0xc6c>)
 23ece46:	e6b5      	b.n	23ecbb4 <_Z7INFO_Dov+0x980>
      SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23ece48:	6823      	ldr	r3, [r4, #0]
      Output ("SD:Open(Info)ERR");
 23ece4a:	4823      	ldr	r0, [pc, #140]	; (23eced8 <_Z7INFO_Dov+0xca4>)
      SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
 23ece4c:	f043 0302 	orr.w	r3, r3, #2
 23ece50:	6023      	str	r3, [r4, #0]
      Output ("SD:Open(Info)ERR");
 23ece52:	f7f8 fc1b 	bl	23e568c <_Z6OutputPKc>
 23ece56:	e75e      	b.n	23ecd16 <_Z7INFO_Dov+0xae2>
    sprintf (Buffer32Bytes, "INFO->PUB ERR");
 23ece58:	4920      	ldr	r1, [pc, #128]	; (23ecedc <_Z7INFO_Dov+0xca8>)
 23ece5a:	480f      	ldr	r0, [pc, #60]	; (23ece98 <_Z7INFO_Dov+0xc64>)
 23ece5c:	f00f fcc4 	bl	23fc7e8 <strcpy>
 23ece60:	e76b      	b.n	23ecd3a <_Z7INFO_Dov+0xb06>
 23ece62:	bf00      	nop
 23ece64:	023fe120 	.word	0x023fe120
 23ece68:	023fe129 	.word	0x023fe129
 23ece6c:	023fe314 	.word	0x023fe314
 23ece70:	1006a7d7 	.word	0x1006a7d7
 23ece74:	023fe131 	.word	0x023fe131
 23ece78:	023fe136 	.word	0x023fe136
 23ece7c:	1006a780 	.word	0x1006a780
 23ece80:	1006a139 	.word	0x1006a139
 23ece84:	1006a2d4 	.word	0x1006a2d4
 23ece88:	1006a178 	.word	0x1006a178
 23ece8c:	1006f128 	.word	0x1006f128
 23ece90:	023fd82d 	.word	0x023fd82d
 23ece94:	023fe329 	.word	0x023fe329
 23ece98:	1006a287 	.word	0x1006a287
 23ece9c:	023fe19e 	.word	0x023fe19e
 23ecea0:	023fd251 	.word	0x023fd251
 23ecea4:	023fe594 	.word	0x023fe594
 23ecea8:	1007aeb8 	.word	0x1007aeb8
 23eceac:	023fd7b6 	.word	0x023fd7b6
 23eceb0:	023fe1ef 	.word	0x023fe1ef
 23eceb4:	023fe1f3 	.word	0x023fe1f3
 23eceb8:	1006ae9c 	.word	0x1006ae9c
 23ecebc:	023fe203 	.word	0x023fe203
 23ecec0:	023fe1f8 	.word	0x023fe1f8
 23ecec4:	023fe20c 	.word	0x023fe20c
 23ecec8:	023fda0e 	.word	0x023fda0e
 23ececc:	023fe210 	.word	0x023fe210
 23eced0:	023fe6d5 	.word	0x023fe6d5
 23eced4:	023fe2c9 	.word	0x023fe2c9
 23eced8:	023fe318 	.word	0x023fe318
 23ecedc:	023fe33a 	.word	0x023fe33a

023ecee0 <_Z14SD_N2S_Publishv>:
void SD_N2S_Publish() {
 23ecee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ecee4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ecee8:	2400      	movs	r4, #0
 23eceea:	b0a8      	sub	sp, #160	; 0xa0
 23eceec:	e9cd 4301 	strd	r4, r3, [sp, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23ecef0:	4b7b      	ldr	r3, [pc, #492]	; (23ed0e0 <_Z14SD_N2S_Publishv+0x200>)
  FsBaseFile() = default;  // cppcheck-suppress uninitMemberVar
 23ecef2:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23ecef6:	9300      	str	r3, [sp, #0]
  if (SD_exists && SD.exists(SD_n2s_file)) {
 23ecef8:	4b7a      	ldr	r3, [pc, #488]	; (23ed0e4 <_Z14SD_N2S_Publishv+0x204>)
 23ecefa:	781b      	ldrb	r3, [r3, #0]
 23ecefc:	b363      	cbz	r3, 23ecf58 <_Z14SD_N2S_Publishv+0x78>
 23ecefe:	497a      	ldr	r1, [pc, #488]	; (23ed0e8 <_Z14SD_N2S_Publishv+0x208>)
 23ecf00:	487a      	ldr	r0, [pc, #488]	; (23ed0ec <_Z14SD_N2S_Publishv+0x20c>)
 23ecf02:	f7f8 f8fd 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23ecf06:	b338      	cbz	r0, 23ecf58 <_Z14SD_N2S_Publishv+0x78>
    Output ("N2S:Publish");
 23ecf08:	4879      	ldr	r0, [pc, #484]	; (23ed0f0 <_Z14SD_N2S_Publishv+0x210>)
 23ecf0a:	f7f8 fbbf 	bl	23e568c <_Z6OutputPKc>
    fp = SD.open(SD_n2s_file, FILE_READ); // Open the file for reading, starting at the beginning of the file.
 23ecf0e:	4623      	mov	r3, r4
 23ecf10:	4a75      	ldr	r2, [pc, #468]	; (23ed0e8 <_Z14SD_N2S_Publishv+0x208>)
 23ecf12:	4976      	ldr	r1, [pc, #472]	; (23ed0ec <_Z14SD_N2S_Publishv+0x20c>)
 23ecf14:	a814      	add	r0, sp, #80	; 0x50
 23ecf16:	f008 fe09 	bl	23f5b2c <_ZN8FsVolume4openEPKci>
class Print
 23ecf1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    move(&from);
 23ecf1c:	a804      	add	r0, sp, #16
 23ecf1e:	9301      	str	r3, [sp, #4]
class Stream : public Print
 23ecf20:	9b16      	ldr	r3, [sp, #88]	; 0x58
 23ecf22:	a918      	add	r1, sp, #96	; 0x60
 23ecf24:	9302      	str	r3, [sp, #8]
 23ecf26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23ecf28:	9303      	str	r3, [sp, #12]
 23ecf2a:	f008 fd1c 	bl	23f5966 <_ZN10FsBaseFile4moveEPS_>
  operator bool() const { return isOpen(); }
 23ecf2e:	a804      	add	r0, sp, #16
 23ecf30:	f7f8 f95f 	bl	23e51f2 <_ZNK10FsBaseFile6isOpenEv>
    if (fp) {
 23ecf34:	2800      	cmp	r0, #0
 23ecf36:	f000 80cf 	beq.w	23ed0d8 <_Z14SD_N2S_Publishv+0x1f8>
 23ecf3a:	a804      	add	r0, sp, #16
 23ecf3c:	f7f8 f94d 	bl	23e51da <_ZNK10FsBaseFile8fileSizeEv>
      if (fp.size()<=20) {
 23ecf40:	2815      	cmp	r0, #21
 23ecf42:	f171 0300 	sbcs.w	r3, r1, #0
 23ecf46:	d20a      	bcs.n	23ecf5e <_Z14SD_N2S_Publishv+0x7e>
        fp.close();
 23ecf48:	a804      	add	r0, sp, #16
 23ecf4a:	f008 fd16 	bl	23f597a <_ZN10FsBaseFile5closeEv>
        Output ("N2S:Empty");
 23ecf4e:	4869      	ldr	r0, [pc, #420]	; (23ed0f4 <_Z14SD_N2S_Publishv+0x214>)
 23ecf50:	f7f8 fb9c 	bl	23e568c <_Z6OutputPKc>
            SD_N2S_Delete(); // Bad data in the file so delete the file           
 23ecf54:	f7fb fade 	bl	23e8514 <_Z13SD_N2S_Deletev>
}
 23ecf58:	b028      	add	sp, #160	; 0xa0
 23ecf5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (eeprom.n2sfp) {
 23ecf5e:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 23ed118 <_Z14SD_N2S_Publishv+0x238>
 23ecf62:	f8d8 2014 	ldr.w	r2, [r8, #20]
 23ecf66:	b12a      	cbz	r2, 23ecf74 <_Z14SD_N2S_Publishv+0x94>
          if (fp.size()<=eeprom.n2sfp) {
 23ecf68:	4282      	cmp	r2, r0
 23ecf6a:	eb74 0301 	sbcs.w	r3, r4, r1
 23ecf6e:	d310      	bcc.n	23ecf92 <_Z14SD_N2S_Publishv+0xb2>
            eeprom.n2sfp = 0; 
 23ecf70:	f8c8 4014 	str.w	r4, [r8, #20]
 23ecf74:	2400      	movs	r4, #0
 23ecf76:	4625      	mov	r5, r4
 23ecf78:	4f5f      	ldr	r7, [pc, #380]	; (23ed0f8 <_Z14SD_N2S_Publishv+0x218>)
            if ( (System.millis() - lastOBS) > OBSERVATION_INTERVAL) {
 23ecf7a:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 23ed11c <_Z14SD_N2S_Publishv+0x23c>
              Output ("N2S:OBS Needed");
 23ecf7e:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 23ed120 <_Z14SD_N2S_Publishv+0x240>
  int available() override { return BaseFile::available(); }
 23ecf82:	a804      	add	r0, sp, #16
 23ecf84:	f7f8 f8fc 	bl	23e5180 <_ZNK10FsBaseFile9availableEv>
        while (fp.available() && (i < MAX_MSGBUF_SIZE )) {
 23ecf88:	b980      	cbnz	r0, 23ecfac <_Z14SD_N2S_Publishv+0xcc>
            fp.close();
 23ecf8a:	a804      	add	r0, sp, #16
 23ecf8c:	f008 fcf5 	bl	23f597a <_ZN10FsBaseFile5closeEv>
 23ecf90:	e7e0      	b.n	23ecf54 <_Z14SD_N2S_Publishv+0x74>
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet((uint32_t)pos)
 23ecf92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23ecf94:	b123      	cbz	r3, 23ecfa0 <_Z14SD_N2S_Publishv+0xc0>
 23ecf96:	4611      	mov	r1, r2
 23ecf98:	4618      	mov	r0, r3
 23ecf9a:	f005 fe80 	bl	23f2c9e <_ZN7FatFile7seekSetEm>
 23ecf9e:	e7e9      	b.n	23ecf74 <_Z14SD_N2S_Publishv+0x94>
           : m_xFile ? m_xFile->seekSet(pos)
 23ecfa0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 23ecfa2:	2800      	cmp	r0, #0
 23ecfa4:	d0e6      	beq.n	23ecf74 <_Z14SD_N2S_Publishv+0x94>
 23ecfa6:	f007 fb20 	bl	23f45ea <_ZN9ExFatFile7seekSetEy>
 23ecfaa:	e7e3      	b.n	23ecf74 <_Z14SD_N2S_Publishv+0x94>
        while (fp.available() && (i < MAX_MSGBUF_SIZE )) {
 23ecfac:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 23ecfb0:	da66      	bge.n	23ed080 <_Z14SD_N2S_Publishv+0x1a0>
  int read() override { return BaseFile::read(); }
 23ecfb2:	a804      	add	r0, sp, #16
 23ecfb4:	f7f8 f926 	bl	23e5204 <_ZN10FsBaseFile4readEv>
          ch = fp.read();
 23ecfb8:	b2c3      	uxtb	r3, r0
          if (ch == 0x0A) {  // newline
 23ecfba:	2b0a      	cmp	r3, #10
 23ecfbc:	d173      	bne.n	23ed0a6 <_Z14SD_N2S_Publishv+0x1c6>
            if (Particle_Publish(EventType)) {
 23ecfbe:	4630      	mov	r0, r6
 23ecfc0:	f7ff f888 	bl	23ec0d4 <_Z16Particle_PublishPc>
 23ecfc4:	b348      	cbz	r0, 23ed01a <_Z14SD_N2S_Publishv+0x13a>
              sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
 23ecfc6:	4633      	mov	r3, r6
 23ecfc8:	4622      	mov	r2, r4
 23ecfca:	494c      	ldr	r1, [pc, #304]	; (23ed0fc <_Z14SD_N2S_Publishv+0x21c>)
 23ecfcc:	484c      	ldr	r0, [pc, #304]	; (23ed100 <_Z14SD_N2S_Publishv+0x220>)
 23ecfce:	f00a fa4b 	bl	23f7468 <sprintf>
              Output (Buffer32Bytes);
 23ecfd2:	484b      	ldr	r0, [pc, #300]	; (23ed100 <_Z14SD_N2S_Publishv+0x220>)
 23ecfd4:	f7f8 fb5a 	bl	23e568c <_Z6OutputPKc>
              Serial_write (msgbuf);
 23ecfd8:	4638      	mov	r0, r7
              sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
 23ecfda:	1c65      	adds	r5, r4, #1
              Serial_write (msgbuf);
 23ecfdc:	f7f8 fb2c 	bl	23e5638 <_Z12Serial_writePKc>
    return m_fFile   ? m_fFile->curPosition()
 23ecfe0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23ecfe2:	2b00      	cmp	r3, #0
 23ecfe4:	d03e      	beq.n	23ed064 <_Z14SD_N2S_Publishv+0x184>
 23ecfe6:	695b      	ldr	r3, [r3, #20]
                eeprom.n2sfp = fp.position();
 23ecfe8:	f8c8 3014 	str.w	r3, [r8, #20]
            if ( (System.millis() - lastOBS) > OBSERVATION_INTERVAL) {
 23ecfec:	f7f8 f80b 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23ecff0:	e9d9 2300 	ldrd	r2, r3, [r9]
 23ecff4:	1a80      	subs	r0, r0, r2
 23ecff6:	eb61 0103 	sbc.w	r1, r1, r3
 23ecffa:	f64e 2361 	movw	r3, #60001	; 0xea61
 23ecffe:	4298      	cmp	r0, r3
 23ed000:	f171 0300 	sbcs.w	r3, r1, #0
                sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
 23ed004:	462c      	mov	r4, r5
            if ( (System.millis() - lastOBS) > OBSERVATION_INTERVAL) {
 23ed006:	d34b      	bcc.n	23ed0a0 <_Z14SD_N2S_Publishv+0x1c0>
              Output ("N2S:OBS Needed");
 23ed008:	4650      	mov	r0, sl
 23ed00a:	f7f8 fb3f 	bl	23e568c <_Z6OutputPKc>
              if (OBS_Full()) {
 23ed00e:	f7fb ff07 	bl	23e8e20 <_Z8OBS_Fullv>
 23ed012:	2800      	cmp	r0, #0
 23ed014:	d040      	beq.n	23ed098 <_Z14SD_N2S_Publishv+0x1b8>
                Output ("N2S:OBS FULL");
 23ed016:	483b      	ldr	r0, [pc, #236]	; (23ed104 <_Z14SD_N2S_Publishv+0x224>)
 23ed018:	e030      	b.n	23ed07c <_Z14SD_N2S_Publishv+0x19c>
              sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:RETRY", sent, EventType);
 23ed01a:	4633      	mov	r3, r6
 23ed01c:	4622      	mov	r2, r4
 23ed01e:	493a      	ldr	r1, [pc, #232]	; (23ed108 <_Z14SD_N2S_Publishv+0x228>)
 23ed020:	4837      	ldr	r0, [pc, #220]	; (23ed100 <_Z14SD_N2S_Publishv+0x220>)
 23ed022:	f00a fa21 	bl	23f7468 <sprintf>
              Output (Buffer32Bytes);
 23ed026:	4836      	ldr	r0, [pc, #216]	; (23ed100 <_Z14SD_N2S_Publishv+0x220>)
 23ed028:	f7f8 fb30 	bl	23e568c <_Z6OutputPKc>
              Serial_write (msgbuf);
 23ed02c:	4638      	mov	r0, r7
 23ed02e:	f7f8 fb03 	bl	23e5638 <_Z12Serial_writePKc>
                BackGroundWork(); 
 23ed032:	f7ff f80f 	bl	23ec054 <_Z14BackGroundWorkv>
 23ed036:	f7ff f80d 	bl	23ec054 <_Z14BackGroundWorkv>
 23ed03a:	f7ff f80b 	bl	23ec054 <_Z14BackGroundWorkv>
 23ed03e:	f7ff f809 	bl	23ec054 <_Z14BackGroundWorkv>
 23ed042:	f7ff f807 	bl	23ec054 <_Z14BackGroundWorkv>
              if (Particle_Publish(EventType)) {
 23ed046:	4630      	mov	r0, r6
 23ed048:	f7ff f844 	bl	23ec0d4 <_Z16Particle_PublishPc>
 23ed04c:	b178      	cbz	r0, 23ed06e <_Z14SD_N2S_Publishv+0x18e>
                sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
 23ed04e:	4633      	mov	r3, r6
 23ed050:	4622      	mov	r2, r4
 23ed052:	492a      	ldr	r1, [pc, #168]	; (23ed0fc <_Z14SD_N2S_Publishv+0x21c>)
 23ed054:	482a      	ldr	r0, [pc, #168]	; (23ed100 <_Z14SD_N2S_Publishv+0x220>)
 23ed056:	f00a fa07 	bl	23f7468 <sprintf>
                Output (Buffer32Bytes);
 23ed05a:	4829      	ldr	r0, [pc, #164]	; (23ed100 <_Z14SD_N2S_Publishv+0x220>)
                sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
 23ed05c:	1c65      	adds	r5, r4, #1
                Output (Buffer32Bytes);
 23ed05e:	f7f8 fb15 	bl	23e568c <_Z6OutputPKc>
 23ed062:	e7bd      	b.n	23ecfe0 <_Z14SD_N2S_Publishv+0x100>
 23ed064:	9b13      	ldr	r3, [sp, #76]	; 0x4c
           : m_xFile ? m_xFile->curPosition()
 23ed066:	2b00      	cmp	r3, #0
 23ed068:	d0be      	beq.n	23ecfe8 <_Z14SD_N2S_Publishv+0x108>
  uint64_t curPosition() const { return m_curPosition; }
 23ed06a:	681b      	ldr	r3, [r3, #0]
 23ed06c:	e7bc      	b.n	23ecfe8 <_Z14SD_N2S_Publishv+0x108>
                sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:ERR", sent, EventType);
 23ed06e:	4633      	mov	r3, r6
 23ed070:	4622      	mov	r2, r4
 23ed072:	4926      	ldr	r1, [pc, #152]	; (23ed10c <_Z14SD_N2S_Publishv+0x22c>)
 23ed074:	4822      	ldr	r0, [pc, #136]	; (23ed100 <_Z14SD_N2S_Publishv+0x220>)
 23ed076:	f00a f9f7 	bl	23f7468 <sprintf>
                Output (Buffer32Bytes);
 23ed07a:	4821      	ldr	r0, [pc, #132]	; (23ed100 <_Z14SD_N2S_Publishv+0x220>)
                Output ("N2S:OBS FULL");
 23ed07c:	f7f8 fb06 	bl	23e568c <_Z6OutputPKc>
  int available() override { return BaseFile::available(); }
 23ed080:	a804      	add	r0, sp, #16
 23ed082:	f7f8 f87d 	bl	23e5180 <_ZNK10FsBaseFile9availableEv>
        if (fp.available() <= 20) {
 23ed086:	2814      	cmp	r0, #20
 23ed088:	f77f af7f 	ble.w	23ecf8a <_Z14SD_N2S_Publishv+0xaa>
          fp.close();
 23ed08c:	a804      	add	r0, sp, #16
 23ed08e:	f008 fc74 	bl	23f597a <_ZN10FsBaseFile5closeEv>
          EEPROM_Update(); // Update file postion in the eeprom.
 23ed092:	f7fb f85d 	bl	23e8150 <_Z13EEPROM_Updatev>
 23ed096:	e75f      	b.n	23ecf58 <_Z14SD_N2S_Publishv+0x78>
                I2C_Check_Sensors(); // Make sure Sensors are online
 23ed098:	f7fa fc68 	bl	23e796c <_Z17I2C_Check_Sensorsv>
                OBS_Do();                  
 23ed09c:	f7fc fd18 	bl	23e9ad0 <_Z6OBS_Dov>
 23ed0a0:	2000      	movs	r0, #0
 23ed0a2:	4605      	mov	r5, r0
 23ed0a4:	e76d      	b.n	23ecf82 <_Z14SD_N2S_Publishv+0xa2>
          else if (ch == 0x0D) { // CR, LF follows and will trigger the line to be processed       
 23ed0a6:	2b0d      	cmp	r3, #13
 23ed0a8:	d108      	bne.n	23ed0bc <_Z14SD_N2S_Publishv+0x1dc>
            msgbuf[i] = 0; // null terminate then wait for newline to be read to process OBS
 23ed0aa:	2300      	movs	r3, #0
            msgbuf[i-3] = 0; // Set the comma to Null so we don't transmit to Particle what follows
 23ed0ac:	197a      	adds	r2, r7, r5
            EventType = &msgbuf[i-2];      
 23ed0ae:	1eae      	subs	r6, r5, #2
            msgbuf[i] = 0; // null terminate then wait for newline to be read to process OBS
 23ed0b0:	557b      	strb	r3, [r7, r5]
            msgbuf[i-3] = 0; // Set the comma to Null so we don't transmit to Particle what follows
 23ed0b2:	4628      	mov	r0, r5
 23ed0b4:	f802 3c03 	strb.w	r3, [r2, #-3]
            EventType = &msgbuf[i-2];      
 23ed0b8:	443e      	add	r6, r7
 23ed0ba:	e7f2      	b.n	23ed0a2 <_Z14SD_N2S_Publishv+0x1c2>
            msgbuf[i++] = ch;
 23ed0bc:	1c68      	adds	r0, r5, #1
          if (i >= MAX_MSGBUF_SIZE) {
 23ed0be:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
            msgbuf[i++] = ch;
 23ed0c2:	557b      	strb	r3, [r7, r5]
          if (i >= MAX_MSGBUF_SIZE) {
 23ed0c4:	d1ed      	bne.n	23ed0a2 <_Z14SD_N2S_Publishv+0x1c2>
            sprintf (Buffer32Bytes, "N2S[%d]->BOR:ERR", sent);
 23ed0c6:	4622      	mov	r2, r4
 23ed0c8:	4911      	ldr	r1, [pc, #68]	; (23ed110 <_Z14SD_N2S_Publishv+0x230>)
 23ed0ca:	480d      	ldr	r0, [pc, #52]	; (23ed100 <_Z14SD_N2S_Publishv+0x220>)
 23ed0cc:	f00a f9cc 	bl	23f7468 <sprintf>
            Output (Buffer32Bytes);
 23ed0d0:	480b      	ldr	r0, [pc, #44]	; (23ed100 <_Z14SD_N2S_Publishv+0x220>)
 23ed0d2:	f7f8 fadb 	bl	23e568c <_Z6OutputPKc>
 23ed0d6:	e758      	b.n	23ecf8a <_Z14SD_N2S_Publishv+0xaa>
        Output ("N2S->OPEN:ERR");
 23ed0d8:	480e      	ldr	r0, [pc, #56]	; (23ed114 <_Z14SD_N2S_Publishv+0x234>)
 23ed0da:	f7f8 fad7 	bl	23e568c <_Z6OutputPKc>
    virtual ~Print() {}
 23ed0de:	e73b      	b.n	23ecf58 <_Z14SD_N2S_Publishv+0x78>
 23ed0e0:	023fe780 	.word	0x023fe780
 23ed0e4:	1006a780 	.word	0x1006a780
 23ed0e8:	1006a157 	.word	0x1006a157
 23ed0ec:	1006a2d4 	.word	0x1006a2d4
 23ed0f0:	023fe348 	.word	0x023fe348
 23ed0f4:	023fe354 	.word	0x023fe354
 23ed0f8:	1006f128 	.word	0x1006f128
 23ed0fc:	023fe35e 	.word	0x023fe35e
 23ed100:	1006a287 	.word	0x1006a287
 23ed104:	023fe3a7 	.word	0x023fe3a7
 23ed108:	023fe370 	.word	0x023fe370
 23ed10c:	023fe385 	.word	0x023fe385
 23ed110:	023fe3b4 	.word	0x023fe3b4
 23ed114:	023fe3c5 	.word	0x023fe3c5
 23ed118:	1006ae5c 	.word	0x1006ae5c
 23ed11c:	1006aeb0 	.word	0x1006aeb0
 23ed120:	023fe398 	.word	0x023fe398

023ed124 <_Z14OBS_PublishAllv>:
 * 
 * If sending an observation takes 2 or more seconds ws_refresh is set and 
 *   the main program loop calls Wind_Distance_Air_Initialize() 
 * ======================================================================================================================
 */
void OBS_PublishAll() {
 23ed124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ed128:	b088      	sub	sp, #32
  bool OK2Send=true;
  int relay_type;

  // Update Cell Signal Strength On Last (Most Current) OBS Since Cell is turned to get reading
  int last = OBS_Last();
 23ed12a:	f7fb fe67 	bl	23e8dfc <_Z8OBS_Lastv>
  if (last >= 0) {
 23ed12e:	1e04      	subs	r4, r0, #0
 23ed130:	4f30      	ldr	r7, [pc, #192]	; (23ed1f4 <_Z14OBS_PublishAllv+0xd0>)
 23ed132:	db0c      	blt.n	23ed14e <_Z14OBS_PublishAllv+0x2a>
#if PLATFORM_ID == PLATFORM_ARGON
    WiFiSignal sig = WiFi.RSSI();
#else
    CellularSignal sig = Cellular.RSSI();
 23ed134:	4668      	mov	r0, sp
 23ed136:	4930      	ldr	r1, [pc, #192]	; (23ed1f8 <_Z14OBS_PublishAllv+0xd4>)
 23ed138:	f00a fae6 	bl	23f7708 <_ZN5spark13CellularClass4RSSIEv>
#endif
    obs[last].css = sig.getStrength();
 23ed13c:	4668      	mov	r0, sp
 23ed13e:	f00a fb41 	bl	23f77c4 <_ZNK14CellularSignal11getStrengthEv>
 23ed142:	f640 2098 	movw	r0, #2712	; 0xa98
 23ed146:	fb00 7004 	mla	r0, r0, r4, r7
 23ed14a:	ed80 0a04 	vstr	s0, [r0, #16]
void OBS_PublishAll() {
 23ed14e:	2500      	movs	r5, #0
 23ed150:	2401      	movs	r4, #1
  }

  // Go through the saved 1 minute observers and send them
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
    if (obs[i].inuse) {
 23ed152:	f640 2898 	movw	r8, #2712	; 0xa98
 23ed156:	fb08 f305 	mul.w	r3, r8, r5
 23ed15a:	5cfb      	ldrb	r3, [r7, r3]
 23ed15c:	b15b      	cbz	r3, 23ed176 <_Z14OBS_PublishAllv+0x52>
      if (OBS_FS_Publish(i) == false) {
 23ed15e:	4628      	mov	r0, r5
 23ed160:	f7ff f80c 	bl	23ec17c <_Z14OBS_FS_Publishi>
 23ed164:	4606      	mov	r6, r0
 23ed166:	b918      	cbnz	r0, 23ed170 <_Z14OBS_PublishAllv+0x4c>
        OBS_N2S_Add (i);
 23ed168:	4628      	mov	r0, r5
 23ed16a:	f7fb fc4f 	bl	23e8a0c <_Z11OBS_N2S_Addi>
        // Don't try to send any N2S because we just added to the file
        OK2Send = false;
 23ed16e:	4634      	mov	r4, r6
      }
      OBS_Clear(i);
 23ed170:	4628      	mov	r0, r5
 23ed172:	f7fb fc39 	bl	23e89e8 <_Z9OBS_Cleari>
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
 23ed176:	3501      	adds	r5, #1
 23ed178:	2d11      	cmp	r5, #17
 23ed17a:	d1ec      	bne.n	23ed156 <_Z14OBS_PublishAllv+0x32>
    }
  }

  // Publish LoRa Relay Observations   
  if (LORA_exists) {
 23ed17c:	4b1f      	ldr	r3, [pc, #124]	; (23ed1fc <_Z14OBS_PublishAllv+0xd8>)
 23ed17e:	781b      	ldrb	r3, [r3, #0]
 23ed180:	b373      	cbz	r3, 23ed1e0 <_Z14OBS_PublishAllv+0xbc>
      else {
        if (OK2Send && (relay_type>0)) {
         OK2Send = OBS_Relay_Publish(relay_type);  // Note a new LoRa RS msgs could be received as we are sending    
        }
        if (!OK2Send) {
          sprintf (msgbuf+strlen(msgbuf), ",%s", relay_msgtypes[relay_type]);  // Add Particle Event Type after JSON structure
 23ed182:	4e1f      	ldr	r6, [pc, #124]	; (23ed200 <_Z14OBS_PublishAllv+0xdc>)
 23ed184:	4f1f      	ldr	r7, [pc, #124]	; (23ed204 <_Z14OBS_PublishAllv+0xe0>)
 23ed186:	f8df 808c 	ldr.w	r8, [pc, #140]	; 23ed214 <_Z14OBS_PublishAllv+0xf0>
    while (lora_relay_need2log()) {
 23ed18a:	f7f8 fc11 	bl	23e59b0 <_Z19lora_relay_need2logv>
 23ed18e:	b338      	cbz	r0, 23ed1e0 <_Z14OBS_PublishAllv+0xbc>
      relay_type = OBS_Relay_Build_JSON(); // This removed msg from relay structure and places it in msgbuf
 23ed190:	f7fb fdc2 	bl	23e8d18 <_Z20OBS_Relay_Build_JSONv>
      if (relay_type<=0) {
 23ed194:	1e05      	subs	r5, r0, #0
 23ed196:	dc08      	bgt.n	23ed1aa <_Z14OBS_PublishAllv+0x86>
        sprintf (Buffer32Bytes, "RELAY TYPE[%d] INVALID", relay_type);
 23ed198:	462a      	mov	r2, r5
 23ed19a:	491b      	ldr	r1, [pc, #108]	; (23ed208 <_Z14OBS_PublishAllv+0xe4>)
 23ed19c:	481b      	ldr	r0, [pc, #108]	; (23ed20c <_Z14OBS_PublishAllv+0xe8>)
 23ed19e:	f00a f963 	bl	23f7468 <sprintf>
        Output(Buffer32Bytes);
 23ed1a2:	481a      	ldr	r0, [pc, #104]	; (23ed20c <_Z14OBS_PublishAllv+0xe8>)
 23ed1a4:	f7f8 fa72 	bl	23e568c <_Z6OutputPKc>
 23ed1a8:	e7ef      	b.n	23ed18a <_Z14OBS_PublishAllv+0x66>
        if (OK2Send && (relay_type>0)) {
 23ed1aa:	b99c      	cbnz	r4, 23ed1d4 <_Z14OBS_PublishAllv+0xb0>
          sprintf (msgbuf+strlen(msgbuf), ",%s", relay_msgtypes[relay_type]);  // Add Particle Event Type after JSON structure
 23ed1ac:	4814      	ldr	r0, [pc, #80]	; (23ed200 <_Z14OBS_PublishAllv+0xdc>)
 23ed1ae:	f7f7 f913 	bl	23e43d8 <strlen>
 23ed1b2:	4641      	mov	r1, r8
 23ed1b4:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 23ed1b8:	4430      	add	r0, r6
 23ed1ba:	f00a f955 	bl	23f7468 <sprintf>
          SD_NeedToSend_Add(msgbuf); // Save to N2F File
 23ed1be:	4810      	ldr	r0, [pc, #64]	; (23ed200 <_Z14OBS_PublishAllv+0xdc>)
 23ed1c0:	f7fb f9e8 	bl	23e8594 <_Z17SD_NeedToSend_AddPc>
          Output("RELAY->N2S");
 23ed1c4:	4812      	ldr	r0, [pc, #72]	; (23ed210 <_Z14OBS_PublishAllv+0xec>)
 23ed1c6:	f7f8 fa61 	bl	23e568c <_Z6OutputPKc>
          Serial_write (msgbuf); 
 23ed1ca:	480d      	ldr	r0, [pc, #52]	; (23ed200 <_Z14OBS_PublishAllv+0xdc>)
 23ed1cc:	f7f8 fa34 	bl	23e5638 <_Z12Serial_writePKc>
 23ed1d0:	2400      	movs	r4, #0
 23ed1d2:	e7da      	b.n	23ed18a <_Z14OBS_PublishAllv+0x66>
         OK2Send = OBS_Relay_Publish(relay_type);  // Note a new LoRa RS msgs could be received as we are sending    
 23ed1d4:	f7fe fffe 	bl	23ec1d4 <_Z17OBS_Relay_Publishi>
        if (!OK2Send) {
 23ed1d8:	4604      	mov	r4, r0
 23ed1da:	2800      	cmp	r0, #0
 23ed1dc:	d1d5      	bne.n	23ed18a <_Z14OBS_PublishAllv+0x66>
 23ed1de:	e7e5      	b.n	23ed1ac <_Z14OBS_PublishAllv+0x88>
      }
    }
  }

  // Check if we have any N2S only if we have not added to the file while trying to send OBS
  if (OK2Send) {
 23ed1e0:	b124      	cbz	r4, 23ed1ec <_Z14OBS_PublishAllv+0xc8>
    SD_N2S_Publish(); 
  }
}
 23ed1e2:	b008      	add	sp, #32
 23ed1e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    SD_N2S_Publish(); 
 23ed1e8:	f7ff be7a 	b.w	23ecee0 <_Z14SD_N2S_Publishv>
}
 23ed1ec:	b008      	add	sp, #32
 23ed1ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23ed1f2:	bf00      	nop
 23ed1f4:	1006f550 	.word	0x1006f550
 23ed1f8:	1007aeb8 	.word	0x1007aeb8
 23ed1fc:	1006a2b1 	.word	0x1006a2b1
 23ed200:	1006f128 	.word	0x1006f128
 23ed204:	1006a1b0 	.word	0x1006a1b0
 23ed208:	023fe103 	.word	0x023fe103
 23ed20c:	1006a287 	.word	0x1006a287
 23ed210:	023fe3d3 	.word	0x023fe3d3
 23ed214:	023fd672 	.word	0x023fd672

023ed218 <_Z18network_initializev>:
void network_initialize() {
 23ed218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    Stream() {_timeout=1000;}
 23ed21c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ed220:	2400      	movs	r4, #0
 23ed222:	b0c8      	sub	sp, #288	; 0x120
 23ed224:	e9cd 4315 	strd	r4, r3, [sp, #84]	; 0x54
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23ed228:	4b9b      	ldr	r3, [pc, #620]	; (23ed498 <_Z18network_initializev+0x280>)
  FsBaseFile() = default;  // cppcheck-suppress uninitMemberVar
 23ed22a:	e9cd 4426 	strd	r4, r4, [sp, #152]	; 0x98
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23ed22e:	9314      	str	r3, [sp, #80]	; 0x50
  if (SD_exists) {
 23ed230:	4b9a      	ldr	r3, [pc, #616]	; (23ed49c <_Z18network_initializev+0x284>)
 23ed232:	781b      	ldrb	r3, [r3, #0]
 23ed234:	2b00      	cmp	r3, #0
 23ed236:	f000 812b 	beq.w	23ed490 <_Z18network_initializev+0x278>
    if (SD.exists(SD_wifi_file)) {
 23ed23a:	4999      	ldr	r1, [pc, #612]	; (23ed4a0 <_Z18network_initializev+0x288>)
 23ed23c:	4899      	ldr	r0, [pc, #612]	; (23ed4a4 <_Z18network_initializev+0x28c>)
 23ed23e:	f7f7 ff5f 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23ed242:	2800      	cmp	r0, #0
 23ed244:	f000 8122 	beq.w	23ed48c <_Z18network_initializev+0x274>
      fp = SD.open(SD_wifi_file, FILE_READ); // Open the file for reading, starting at the beginning of the file.
 23ed248:	ad28      	add	r5, sp, #160	; 0xa0
 23ed24a:	4623      	mov	r3, r4
 23ed24c:	4628      	mov	r0, r5
 23ed24e:	4a94      	ldr	r2, [pc, #592]	; (23ed4a0 <_Z18network_initializev+0x288>)
 23ed250:	4994      	ldr	r1, [pc, #592]	; (23ed4a4 <_Z18network_initializev+0x28c>)
 23ed252:	f008 fc6b 	bl	23f5b2c <_ZN8FsVolume4openEPKci>
class Print
 23ed256:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    move(&from);
 23ed258:	a818      	add	r0, sp, #96	; 0x60
 23ed25a:	9315      	str	r3, [sp, #84]	; 0x54
class Stream : public Print
 23ed25c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 23ed25e:	a92c      	add	r1, sp, #176	; 0xb0
 23ed260:	9316      	str	r3, [sp, #88]	; 0x58
 23ed262:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 23ed264:	9317      	str	r3, [sp, #92]	; 0x5c
 23ed266:	f008 fb7e 	bl	23f5966 <_ZN10FsBaseFile4moveEPS_>
  operator bool() const { return isOpen(); }
 23ed26a:	a818      	add	r0, sp, #96	; 0x60
 23ed26c:	f7f7 ffc1 	bl	23e51f2 <_ZNK10FsBaseFile6isOpenEv>
      if (fp) {
 23ed270:	2800      	cmp	r0, #0
 23ed272:	f000 8101 	beq.w	23ed478 <_Z18network_initializev+0x260>
  PosType size() { return BaseFile::fileSize(); }
 23ed276:	a818      	add	r0, sp, #96	; 0x60
 23ed278:	f7f7 ffaf 	bl	23e51da <_ZNK10FsBaseFile8fileSizeEv>
        if (fp.size()<=7 || fp.size()>127) {
 23ed27c:	3808      	subs	r0, #8
 23ed27e:	f161 0100 	sbc.w	r1, r1, #0
 23ed282:	2878      	cmp	r0, #120	; 0x78
 23ed284:	f171 0300 	sbcs.w	r3, r1, #0
 23ed288:	d306      	bcc.n	23ed298 <_Z18network_initializev+0x80>
          fp.close();
 23ed28a:	a818      	add	r0, sp, #96	; 0x60
 23ed28c:	f008 fb75 	bl	23f597a <_ZN10FsBaseFile5closeEv>
          Output ("WIFI:Invalid SZ");
 23ed290:	4885      	ldr	r0, [pc, #532]	; (23ed4a8 <_Z18network_initializev+0x290>)
    Output ("WIFI:NOSD USING CELLULAR");
 23ed292:	f7f8 f9fb 	bl	23e568c <_Z6OutputPKc>
 23ed296:	e0b7      	b.n	23ed408 <_Z18network_initializev+0x1f0>
          Output ("WIFI:Open");
 23ed298:	4884      	ldr	r0, [pc, #528]	; (23ed4ac <_Z18network_initializev+0x294>)
 23ed29a:	f7f8 f9f7 	bl	23e568c <_Z6OutputPKc>
 23ed29e:	462e      	mov	r6, r5
  int available() override { return BaseFile::available(); }
 23ed2a0:	a818      	add	r0, sp, #96	; 0x60
 23ed2a2:	f7f7 ff6d 	bl	23e5180 <_ZNK10FsBaseFile9availableEv>
          while (fp.available() && (i < 127 )) {
 23ed2a6:	b168      	cbz	r0, 23ed2c4 <_Z18network_initializev+0xac>
 23ed2a8:	2c7f      	cmp	r4, #127	; 0x7f
 23ed2aa:	d00b      	beq.n	23ed2c4 <_Z18network_initializev+0xac>
  int read() override { return BaseFile::read(); }
 23ed2ac:	a818      	add	r0, sp, #96	; 0x60
 23ed2ae:	f7f7 ffa9 	bl	23e5204 <_ZN10FsBaseFile4readEv>
            ch = fp.read();
 23ed2b2:	b2c0      	uxtb	r0, r0
            if ((ch == 0x0A) || (ch == 0x0D) ) {  // newline or linefeed
 23ed2b4:	280a      	cmp	r0, #10
 23ed2b6:	d005      	beq.n	23ed2c4 <_Z18network_initializev+0xac>
 23ed2b8:	280d      	cmp	r0, #13
 23ed2ba:	d003      	beq.n	23ed2c4 <_Z18network_initializev+0xac>
              buf[i++] = ch;
 23ed2bc:	3401      	adds	r4, #1
 23ed2be:	f806 0b01 	strb.w	r0, [r6], #1
          while (fp.available() && (i < 127 )) {
 23ed2c2:	e7ed      	b.n	23ed2a0 <_Z18network_initializev+0x88>
          fp.close();
 23ed2c4:	a818      	add	r0, sp, #96	; 0x60
 23ed2c6:	f008 fb58 	bl	23f597a <_ZN10FsBaseFile5closeEv>
          buf[i] = (char) NULL;
 23ed2ca:	ab48      	add	r3, sp, #288	; 0x120
 23ed2cc:	441c      	add	r4, r3
 23ed2ce:	2300      	movs	r3, #0
          id = strtok_r(p, ",", &p);
 23ed2d0:	4628      	mov	r0, r5
 23ed2d2:	466a      	mov	r2, sp
 23ed2d4:	4976      	ldr	r1, [pc, #472]	; (23ed4b0 <_Z18network_initializev+0x298>)
          buf[i] = (char) NULL;
 23ed2d6:	f804 3c80 	strb.w	r3, [r4, #-128]
          p = &buf[0];
 23ed2da:	9500      	str	r5, [sp, #0]
          id = strtok_r(p, ",", &p);
 23ed2dc:	f00f faf8 	bl	23fc8d0 <strtok_r>
          if (id == NULL) {
 23ed2e0:	4605      	mov	r5, r0
 23ed2e2:	b908      	cbnz	r0, 23ed2e8 <_Z18network_initializev+0xd0>
            Output("WIFI:ID=Null Err");
 23ed2e4:	4873      	ldr	r0, [pc, #460]	; (23ed4b4 <_Z18network_initializev+0x29c>)
 23ed2e6:	e7d4      	b.n	23ed292 <_Z18network_initializev+0x7a>
          else if (strcmp (id, "MUON") != 0) { 
 23ed2e8:	4973      	ldr	r1, [pc, #460]	; (23ed4b8 <_Z18network_initializev+0x2a0>)
 23ed2ea:	f7f7 f86b 	bl	23e43c4 <strcmp>
 23ed2ee:	4604      	mov	r4, r0
 23ed2f0:	b130      	cbz	r0, 23ed300 <_Z18network_initializev+0xe8>
            sprintf (msgbuf, "WIFI:ID[%s] Err", id);          
 23ed2f2:	462a      	mov	r2, r5
 23ed2f4:	4971      	ldr	r1, [pc, #452]	; (23ed4bc <_Z18network_initializev+0x2a4>)
 23ed2f6:	4872      	ldr	r0, [pc, #456]	; (23ed4c0 <_Z18network_initializev+0x2a8>)
 23ed2f8:	f00a f8b6 	bl	23f7468 <sprintf>
            Output(msgbuf);
 23ed2fc:	4870      	ldr	r0, [pc, #448]	; (23ed4c0 <_Z18network_initializev+0x2a8>)
 23ed2fe:	e7c8      	b.n	23ed292 <_Z18network_initializev+0x7a>
            ssid = strtok_r(p, ",", &p);
 23ed300:	466a      	mov	r2, sp
 23ed302:	496b      	ldr	r1, [pc, #428]	; (23ed4b0 <_Z18network_initializev+0x298>)
 23ed304:	9800      	ldr	r0, [sp, #0]
 23ed306:	f00f fae3 	bl	23fc8d0 <strtok_r>
            pw  = strtok_r(p, ",", &p);
 23ed30a:	466a      	mov	r2, sp
            ssid = strtok_r(p, ",", &p);
 23ed30c:	4606      	mov	r6, r0
            pw  = strtok_r(p, ",", &p);
 23ed30e:	4968      	ldr	r1, [pc, #416]	; (23ed4b0 <_Z18network_initializev+0x298>)
 23ed310:	6810      	ldr	r0, [r2, #0]
 23ed312:	f00f fadd 	bl	23fc8d0 <strtok_r>
 23ed316:	4605      	mov	r5, r0
            if (ssid == NULL) {
 23ed318:	b90e      	cbnz	r6, 23ed31e <_Z18network_initializev+0x106>
              Output("WIFI:SSID=Null Err");
 23ed31a:	486a      	ldr	r0, [pc, #424]	; (23ed4c4 <_Z18network_initializev+0x2ac>)
 23ed31c:	e7b9      	b.n	23ed292 <_Z18network_initializev+0x7a>
            else if (pw == NULL) {
 23ed31e:	b908      	cbnz	r0, 23ed324 <_Z18network_initializev+0x10c>
              Output("WIFI:PW=Null Err");
 23ed320:	4869      	ldr	r0, [pc, #420]	; (23ed4c8 <_Z18network_initializev+0x2b0>)
 23ed322:	e7b6      	b.n	23ed292 <_Z18network_initializev+0x7a>
              Output("NETWORK:SET WIFI");
 23ed324:	4869      	ldr	r0, [pc, #420]	; (23ed4cc <_Z18network_initializev+0x2b4>)
 23ed326:	f7f8 f9b1 	bl	23e568c <_Z6OutputPKc>
              MuonWifiEnabled = true;
 23ed32a:	2201      	movs	r2, #1
 23ed32c:	4b68      	ldr	r3, [pc, #416]	; (23ed4d0 <_Z18network_initializev+0x2b8>)
              sprintf (msgbuf, "WIFI:SSID[%s]", ssid);
 23ed32e:	4969      	ldr	r1, [pc, #420]	; (23ed4d4 <_Z18network_initializev+0x2bc>)
              MuonWifiEnabled = true;
 23ed330:	701a      	strb	r2, [r3, #0]
              sprintf (msgbuf, "WIFI:SSID[%s]", ssid);
 23ed332:	4863      	ldr	r0, [pc, #396]	; (23ed4c0 <_Z18network_initializev+0x2a8>)
 23ed334:	4632      	mov	r2, r6
 23ed336:	f00a f897 	bl	23f7468 <sprintf>
              Output(msgbuf);
 23ed33a:	4861      	ldr	r0, [pc, #388]	; (23ed4c0 <_Z18network_initializev+0x2a8>)
 23ed33c:	f7f8 f9a6 	bl	23e568c <_Z6OutputPKc>
              sprintf (msgbuf, "WIFI:PW[%s]", pw);
 23ed340:	462a      	mov	r2, r5
 23ed342:	4965      	ldr	r1, [pc, #404]	; (23ed4d8 <_Z18network_initializev+0x2c0>)
 23ed344:	485e      	ldr	r0, [pc, #376]	; (23ed4c0 <_Z18network_initializev+0x2a8>)
 23ed346:	f00a f88f 	bl	23f7468 <sprintf>
              Output(msgbuf);
 23ed34a:	485d      	ldr	r0, [pc, #372]	; (23ed4c0 <_Z18network_initializev+0x2a8>)
 23ed34c:	f7f8 f99e 	bl	23e568c <_Z6OutputPKc>
              Output("WIFI:Particle Cloud Disconnect");  // We should no be connected, but do anyway
 23ed350:	4862      	ldr	r0, [pc, #392]	; (23ed4dc <_Z18network_initializev+0x2c4>)
 23ed352:	f7f8 f99b 	bl	23e568c <_Z6OutputPKc>
              Particle.disconnect();
 23ed356:	a801      	add	r0, sp, #4
        bool clearSession, bool reconnect) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession),
        reconnect_(reconnect) {
 23ed358:	e9cd 4401 	strd	r4, r4, [sp, #4]
        bool clearSession, bool reconnect) :
 23ed35c:	f8ad 400c 	strh.w	r4, [sp, #12]
        reconnect_(reconnect) {
 23ed360:	f88d 400e 	strb.w	r4, [sp, #14]
 23ed364:	f00a fc0f 	bl	23f7b86 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
              Output("WIFI:Turning Off Cellular");
 23ed368:	485d      	ldr	r0, [pc, #372]	; (23ed4e0 <_Z18network_initializev+0x2c8>)
 23ed36a:	f7f8 f98f 	bl	23e568c <_Z6OutputPKc>
              Cellular.off();    // Turn off cellular modem
 23ed36e:	485d      	ldr	r0, [pc, #372]	; (23ed4e4 <_Z18network_initializev+0x2cc>)
 23ed370:	f7f7 fe43 	bl	23e4ffa <_ZN5spark13CellularClass3offEv>
              waitUntil(Cellular.isOff);  // Optional: wait for cellular modem to power down
 23ed374:	4c5b      	ldr	r4, [pc, #364]	; (23ed4e4 <_Z18network_initializev+0x2cc>)
 23ed376:	4620      	mov	r0, r4
 23ed378:	f00b f9d2 	bl	23f8720 <_ZN5spark12NetworkClass5isOffEv>
        while (_while() && !_condition()) {
 23ed37c:	b910      	cbnz	r0, 23ed384 <_Z18network_initializev+0x16c>
            spark_process();
 23ed37e:	f009 fecf 	bl	23f7120 <spark_process>
        while (_while() && !_condition()) {
 23ed382:	e7f8      	b.n	23ed376 <_Z18network_initializev+0x15e>
 23ed384:	4857      	ldr	r0, [pc, #348]	; (23ed4e4 <_Z18network_initializev+0x2cc>)
 23ed386:	f00b f9cb 	bl	23f8720 <_ZN5spark12NetworkClass5isOffEv>
              Output("WIFI:Turning On Wifi");
 23ed38a:	4857      	ldr	r0, [pc, #348]	; (23ed4e8 <_Z18network_initializev+0x2d0>)
 23ed38c:	f7f8 f97e 	bl	23e568c <_Z6OutputPKc>
        network_on(*this, 0, 0, NULL);
 23ed390:	2300      	movs	r3, #0
    virtual bool listening();
    virtual NetworkClass& prefer(bool prefer = true);
    virtual bool isPreferred();

    operator network_interface_t() const {
        return iface_;
 23ed392:	4c56      	ldr	r4, [pc, #344]	; (23ed4ec <_Z18network_initializev+0x2d4>)
 23ed394:	461a      	mov	r2, r3
 23ed396:	4619      	mov	r1, r3
 23ed398:	6860      	ldr	r0, [r4, #4]
 23ed39a:	f009 ff93 	bl	23f72c4 <network_on>
    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
 23ed39e:	2300      	movs	r3, #0
 23ed3a0:	6860      	ldr	r0, [r4, #4]
 23ed3a2:	461a      	mov	r2, r3
 23ed3a4:	4619      	mov	r1, r3
 23ed3a6:	f009 ffd3 	bl	23f7350 <network_clear_credentials>
              if (WiFi.clearCredentials()) {
 23ed3aa:	2800      	cmp	r0, #0
 23ed3ac:	d060      	beq.n	23ed470 <_Z18network_initializev+0x258>
                Output("WIFI:Cleared Wifi Creds");
 23ed3ae:	4850      	ldr	r0, [pc, #320]	; (23ed4f0 <_Z18network_initializev+0x2d8>)
                Output("WIFI:Clear Wifi Creds Err");
 23ed3b0:	f7f8 f96c 	bl	23e568c <_Z6OutputPKc>
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
 23ed3b4:	4630      	mov	r0, r6
 23ed3b6:	f7f7 f80f 	bl	23e43d8 <strlen>
 23ed3ba:	4680      	mov	r8, r0
 23ed3bc:	4628      	mov	r0, r5
 23ed3be:	f7f7 f80b 	bl	23e43d8 <strlen>
        memset(&creds, 0, sizeof(creds));
 23ed3c2:	2238      	movs	r2, #56	; 0x38
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
 23ed3c4:	4607      	mov	r7, r0
        memset(&creds, 0, sizeof(creds));
 23ed3c6:	2100      	movs	r1, #0
 23ed3c8:	a806      	add	r0, sp, #24
 23ed3ca:	f00f f998 	bl	23fc6fe <memset>
        creds.size = sizeof(creds);
 23ed3ce:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
 23ed3d0:	e9cd 3601 	strd	r3, r6, [sp, #4]
        creds.security = WLanSecurityType(security);
 23ed3d4:	2303      	movs	r3, #3
 23ed3d6:	f88d 3018 	strb.w	r3, [sp, #24]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
 23ed3da:	2300      	movs	r3, #0
 23ed3dc:	6860      	ldr	r0, [r4, #4]
 23ed3de:	4619      	mov	r1, r3
 23ed3e0:	aa01      	add	r2, sp, #4
        creds.password = password;
 23ed3e2:	e9cd 8503 	strd	r8, r5, [sp, #12]
        creds.password_len = passwordLen;
 23ed3e6:	9705      	str	r7, [sp, #20]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
 23ed3e8:	f009 ffa4 	bl	23f7334 <network_set_credentials>
              if (WiFi.setCredentials(ssid, pw)) {
 23ed3ec:	2800      	cmp	r0, #0
 23ed3ee:	d141      	bne.n	23ed474 <_Z18network_initializev+0x25c>
                Output("WIFI:Credentials Set");
 23ed3f0:	4840      	ldr	r0, [pc, #256]	; (23ed4f4 <_Z18network_initializev+0x2dc>)
                Output("WIFI:Credentials Set Err");
 23ed3f2:	f7f8 f94b 	bl	23e568c <_Z6OutputPKc>
              Output("WIFI:Connect Called");
 23ed3f6:	4840      	ldr	r0, [pc, #256]	; (23ed4f8 <_Z18network_initializev+0x2e0>)
 23ed3f8:	f7f8 f948 	bl	23e568c <_Z6OutputPKc>
        network_connect(*this, flags, 0, NULL);
 23ed3fc:	2300      	movs	r3, #0
 23ed3fe:	6860      	ldr	r0, [r4, #4]
 23ed400:	461a      	mov	r2, r3
 23ed402:	4619      	mov	r1, r3
 23ed404:	f009 ff26 	bl	23f7254 <network_connect>
  if (MuonWifiEnabled == false) {
 23ed408:	4b31      	ldr	r3, [pc, #196]	; (23ed4d0 <_Z18network_initializev+0x2b8>)
 23ed40a:	781c      	ldrb	r4, [r3, #0]
 23ed40c:	bb6c      	cbnz	r4, 23ed46a <_Z18network_initializev+0x252>
    Output("NETWORK:SET CELL");
 23ed40e:	483b      	ldr	r0, [pc, #236]	; (23ed4fc <_Z18network_initializev+0x2e4>)
 23ed410:	f7f8 f93c 	bl	23e568c <_Z6OutputPKc>
    Output("CELL:Particle Cloud Disconnect");  // We should no be connected, but do anyway
 23ed414:	483a      	ldr	r0, [pc, #232]	; (23ed500 <_Z18network_initializev+0x2e8>)
 23ed416:	f7f8 f939 	bl	23e568c <_Z6OutputPKc>
 23ed41a:	4d34      	ldr	r5, [pc, #208]	; (23ed4ec <_Z18network_initializev+0x2d4>)
    Particle.disconnect();
 23ed41c:	a801      	add	r0, sp, #4
 23ed41e:	e9cd 4401 	strd	r4, r4, [sp, #4]
        bool clearSession, bool reconnect) :
 23ed422:	f8ad 400c 	strh.w	r4, [sp, #12]
        reconnect_(reconnect) {
 23ed426:	f88d 400e 	strb.w	r4, [sp, #14]
 23ed42a:	f00a fbac 	bl	23f7b86 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    Output("CELL:Turning Off WiFi");
 23ed42e:	4835      	ldr	r0, [pc, #212]	; (23ed504 <_Z18network_initializev+0x2ec>)
 23ed430:	f7f8 f92c 	bl	23e568c <_Z6OutputPKc>
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23ed434:	4622      	mov	r2, r4
 23ed436:	2102      	movs	r1, #2
 23ed438:	6868      	ldr	r0, [r5, #4]
 23ed43a:	f009 ff27 	bl	23f728c <network_disconnect>
        network_off(*this, 0, 0, NULL);
 23ed43e:	4623      	mov	r3, r4
 23ed440:	4622      	mov	r2, r4
 23ed442:	4621      	mov	r1, r4
 23ed444:	6868      	ldr	r0, [r5, #4]
 23ed446:	f009 ff4b 	bl	23f72e0 <network_off>
        return network_clear_credentials(*this, 0, NULL, NULL);
 23ed44a:	4623      	mov	r3, r4
 23ed44c:	4622      	mov	r2, r4
 23ed44e:	4621      	mov	r1, r4
 23ed450:	6868      	ldr	r0, [r5, #4]
 23ed452:	f009 ff7d 	bl	23f7350 <network_clear_credentials>
    if (WiFi.clearCredentials()) {
 23ed456:	b1e8      	cbz	r0, 23ed494 <_Z18network_initializev+0x27c>
      Output("CELL:Cleared Wifi Creds");
 23ed458:	482b      	ldr	r0, [pc, #172]	; (23ed508 <_Z18network_initializev+0x2f0>)
      Output("CELL:Clear Wifi Creds Err");
 23ed45a:	f7f8 f917 	bl	23e568c <_Z6OutputPKc>
    Output("CELL:Turning On Cellular");
 23ed45e:	482b      	ldr	r0, [pc, #172]	; (23ed50c <_Z18network_initializev+0x2f4>)
 23ed460:	f7f8 f914 	bl	23e568c <_Z6OutputPKc>
    Cellular.on();          // Power on cellular modem
 23ed464:	481f      	ldr	r0, [pc, #124]	; (23ed4e4 <_Z18network_initializev+0x2cc>)
 23ed466:	f7f7 fdc2 	bl	23e4fee <_ZN5spark13CellularClass2onEv>
}
 23ed46a:	b048      	add	sp, #288	; 0x120
 23ed46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                Output("WIFI:Clear Wifi Creds Err");
 23ed470:	4827      	ldr	r0, [pc, #156]	; (23ed510 <_Z18network_initializev+0x2f8>)
 23ed472:	e79d      	b.n	23ed3b0 <_Z18network_initializev+0x198>
                Output("WIFI:Credentials Set Err");
 23ed474:	4827      	ldr	r0, [pc, #156]	; (23ed514 <_Z18network_initializev+0x2fc>)
 23ed476:	e7bc      	b.n	23ed3f2 <_Z18network_initializev+0x1da>
        sprintf (msgbuf, "WIFI:OPENERR[%s]", SD_wifi_file);          
 23ed478:	4a09      	ldr	r2, [pc, #36]	; (23ed4a0 <_Z18network_initializev+0x288>)
 23ed47a:	4927      	ldr	r1, [pc, #156]	; (23ed518 <_Z18network_initializev+0x300>)
 23ed47c:	4810      	ldr	r0, [pc, #64]	; (23ed4c0 <_Z18network_initializev+0x2a8>)
 23ed47e:	f009 fff3 	bl	23f7468 <sprintf>
        Output(msgbuf);
 23ed482:	480f      	ldr	r0, [pc, #60]	; (23ed4c0 <_Z18network_initializev+0x2a8>)
 23ed484:	f7f8 f902 	bl	23e568c <_Z6OutputPKc>
        Output ("WIFI:USING CELLULAR");
 23ed488:	4824      	ldr	r0, [pc, #144]	; (23ed51c <_Z18network_initializev+0x304>)
 23ed48a:	e702      	b.n	23ed292 <_Z18network_initializev+0x7a>
      Output ("WIFO:NOFILE USING CELLULAR");
 23ed48c:	4824      	ldr	r0, [pc, #144]	; (23ed520 <_Z18network_initializev+0x308>)
 23ed48e:	e700      	b.n	23ed292 <_Z18network_initializev+0x7a>
    Output ("WIFI:NOSD USING CELLULAR");
 23ed490:	4824      	ldr	r0, [pc, #144]	; (23ed524 <_Z18network_initializev+0x30c>)
 23ed492:	e6fe      	b.n	23ed292 <_Z18network_initializev+0x7a>
      Output("CELL:Clear Wifi Creds Err");
 23ed494:	4824      	ldr	r0, [pc, #144]	; (23ed528 <_Z18network_initializev+0x310>)
 23ed496:	e7e0      	b.n	23ed45a <_Z18network_initializev+0x242>
 23ed498:	023fe780 	.word	0x023fe780
 23ed49c:	1006a780 	.word	0x1006a780
 23ed4a0:	1006a16d 	.word	0x1006a16d
 23ed4a4:	1006a2d4 	.word	0x1006a2d4
 23ed4a8:	023fe3de 	.word	0x023fe3de
 23ed4ac:	023fe3ee 	.word	0x023fe3ee
 23ed4b0:	023fd69c 	.word	0x023fd69c
 23ed4b4:	023fe3f8 	.word	0x023fe3f8
 23ed4b8:	023fe409 	.word	0x023fe409
 23ed4bc:	023fe40e 	.word	0x023fe40e
 23ed4c0:	1006f128 	.word	0x1006f128
 23ed4c4:	023fe41e 	.word	0x023fe41e
 23ed4c8:	023fe431 	.word	0x023fe431
 23ed4cc:	023fe442 	.word	0x023fe442
 23ed4d0:	1006a2cc 	.word	0x1006a2cc
 23ed4d4:	023fe453 	.word	0x023fe453
 23ed4d8:	023fe461 	.word	0x023fe461
 23ed4dc:	023fe46d 	.word	0x023fe46d
 23ed4e0:	023fe48c 	.word	0x023fe48c
 23ed4e4:	1007aeb8 	.word	0x1007aeb8
 23ed4e8:	023fe4a6 	.word	0x023fe4a6
 23ed4ec:	1007af98 	.word	0x1007af98
 23ed4f0:	023fe4bb 	.word	0x023fe4bb
 23ed4f4:	023fe4ed 	.word	0x023fe4ed
 23ed4f8:	023fe51b 	.word	0x023fe51b
 23ed4fc:	023fe588 	.word	0x023fe588
 23ed500:	023fe599 	.word	0x023fe599
 23ed504:	023fe5b8 	.word	0x023fe5b8
 23ed508:	023fe5ce 	.word	0x023fe5ce
 23ed50c:	023fe600 	.word	0x023fe600
 23ed510:	023fe4d3 	.word	0x023fe4d3
 23ed514:	023fe502 	.word	0x023fe502
 23ed518:	023fe52f 	.word	0x023fe52f
 23ed51c:	023fe540 	.word	0x023fe540
 23ed520:	023fe554 	.word	0x023fe554
 23ed524:	023fe56f 	.word	0x023fe56f
 23ed528:	023fe5e6 	.word	0x023fe5e6

023ed52c <setup>:
void setup() {
 23ed52c:	b530      	push	{r4, r5, lr}
        hal_power_config config = {};
 23ed52e:	2420      	movs	r4, #32
 23ed530:	b093      	sub	sp, #76	; 0x4c
 23ed532:	4622      	mov	r2, r4
 23ed534:	2100      	movs	r1, #0
 23ed536:	a80a      	add	r0, sp, #40	; 0x28
 23ed538:	f00f f8e1 	bl	23fc6fe <memset>
        conf_.aux_pwr_ctrl_pin = PIN_INVALID;
        conf_.int_pin = PIN_INVALID;
    }

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
 23ed53c:	ad0a      	add	r5, sp, #40	; 0x28
        system_power_management_get_config(&config, nullptr);
 23ed53e:	2100      	movs	r1, #0
        config.size = sizeof(config);
 23ed540:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
        system_power_management_get_config(&config, nullptr);
 23ed544:	a80a      	add	r0, sp, #40	; 0x28
 23ed546:	ac02      	add	r4, sp, #8
 23ed548:	f009 fdce 	bl	23f70e8 <system_power_management_get_config>
 23ed54c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ed54e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ed550:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23ed554:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
 23ed558:	9b02      	ldr	r3, [sp, #8]
        return conf_.soc_bits;
    }

    SystemPowerConfiguration& auxiliaryPowerControlPin(uint8_t pin, bool activeLevel = 1) {
        conf_.aux_pwr_ctrl_pin = pin;
        conf_.aux_pwr_ctrl_pin_level = activeLevel;
 23ed55a:	2401      	movs	r4, #1
        conf_.flags |= f.value();
 23ed55c:	f043 0301 	orr.w	r3, r3, #1
        conf_.aux_pwr_ctrl_pin = pin;
 23ed560:	2507      	movs	r5, #7
        conf_.flags |= f.value();
 23ed562:	9302      	str	r3, [sp, #8]
    uint8_t auxiliaryPowerControlActiveLevel() const {
        return conf_.aux_pwr_ctrl_pin_level;
    }
    
    SystemPowerConfiguration& interruptPin(uint8_t pin) {
        conf_.int_pin = pin;
 23ed564:	231c      	movs	r3, #28
        return system_power_management_set_config(conf.config(), nullptr);
 23ed566:	2100      	movs	r1, #0
 23ed568:	a802      	add	r0, sp, #8
 23ed56a:	f88d 3019 	strb.w	r3, [sp, #25]
        conf_.aux_pwr_ctrl_pin = pin;
 23ed56e:	f88d 5017 	strb.w	r5, [sp, #23]
        conf_.aux_pwr_ctrl_pin_level = activeLevel;
 23ed572:	f88d 4018 	strb.w	r4, [sp, #24]
 23ed576:	f009 fd9b 	bl	23f70b0 <system_power_management_set_config>
  pinMode(D7, OUTPUT);
 23ed57a:	4621      	mov	r1, r4
 23ed57c:	4628      	mov	r0, r5
 23ed57e:	f00c fa5d 	bl	23f9a3c <pinMode>
  digitalWrite(D7, 1);
 23ed582:	4621      	mov	r1, r4
 23ed584:	4628      	mov	r0, r5
 23ed586:	f00c fa6a 	bl	23f9a5e <digitalWrite>
	pmic.enableBATFET();
 23ed58a:	48af      	ldr	r0, [pc, #700]	; (23ed848 <setup+0x31c>)
 23ed58c:	f00b f9f8 	bl	23f8980 <_ZN4PMIC12enableBATFETEv>
  Time.setFormat(TIME_FORMAT_ISO8601_FULL);
 23ed590:	4bae      	ldr	r3, [pc, #696]	; (23ed84c <setup+0x320>)
  if (SD_exists && SD.exists(SD_n2s_file)) {
 23ed592:	4daf      	ldr	r5, [pc, #700]	; (23ed850 <setup+0x324>)
            return format(now(), format_spec);
        }

        void setFormat(const char* format)
        {
            this->format_spec = format;
 23ed594:	681a      	ldr	r2, [r3, #0]
 23ed596:	4baf      	ldr	r3, [pc, #700]	; (23ed854 <setup+0x328>)
 23ed598:	601a      	str	r2, [r3, #0]
  Watchdog.init(WatchdogConfiguration().timeout(120s));
 23ed59a:	f7f7 fd87 	bl	23e50ac <_ZN8particle13WatchdogClass11getInstanceEv>
        config_.timeout_ms = ms;
 23ed59e:	49ae      	ldr	r1, [pc, #696]	; (23ed858 <setup+0x32c>)
 23ed5a0:	4bae      	ldr	r3, [pc, #696]	; (23ed85c <setup+0x330>)
 23ed5a2:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
        config_.enable_caps = HAL_WATCHDOG_CAPS_RESET | HAL_WATCHDOG_CAPS_SLEEP_RUNNING;
 23ed5a6:	2321      	movs	r3, #33	; 0x21
 23ed5a8:	a90a      	add	r1, sp, #40	; 0x28
 23ed5aa:	930c      	str	r3, [sp, #48]	; 0x30
 23ed5ac:	f00c f80c 	bl	23f95c8 <_ZN8particle13WatchdogClass4initERKNS_21WatchdogConfigurationE>
  Watchdog.start();
 23ed5b0:	f7f7 fd7c 	bl	23e50ac <_ZN8particle13WatchdogClass11getInstanceEv>
 23ed5b4:	f00c f80d 	bl	23f95d2 <_ZN8particle13WatchdogClass5startEv>
  pinMode (REBOOT_PIN, OUTPUT);
 23ed5b8:	4621      	mov	r1, r4
 23ed5ba:	2013      	movs	r0, #19
 23ed5bc:	f00c fa3e 	bl	23f9a3c <pinMode>
  pinMode (LED_PIN, OUTPUT);
 23ed5c0:	4ba7      	ldr	r3, [pc, #668]	; (23ed860 <setup+0x334>)
 23ed5c2:	4621      	mov	r1, r4
 23ed5c4:	8818      	ldrh	r0, [r3, #0]
 23ed5c6:	f00c fa39 	bl	23f9a3c <pinMode>
  Output_Initialize(); // Waits for Serial if Jumper in place for 60s
 23ed5ca:	f7fc fa21 	bl	23e9a10 <_Z17Output_Initializev>
  delay(2000); // Prevents usb driver crash on startup, Arduino needed this so keeping for Particle
 23ed5ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23ed5d2:	f00a f829 	bl	23f7628 <delay>
  Serial_write(COPYRIGHT);
 23ed5d6:	48a3      	ldr	r0, [pc, #652]	; (23ed864 <setup+0x338>)
 23ed5d8:	f7f8 f82e 	bl	23e5638 <_Z12Serial_writePKc>
  Output (VERSION_INFO);
 23ed5dc:	48a2      	ldr	r0, [pc, #648]	; (23ed868 <setup+0x33c>)
 23ed5de:	f7f8 f855 	bl	23e568c <_Z6OutputPKc>
        return HAL_Feature_Set(feature, true);
 23ed5e2:	4621      	mov	r1, r4
 23ed5e4:	2004      	movs	r0, #4
 23ed5e6:	f009 f893 	bl	23f6710 <HAL_Feature_Set>
  OutputResetReason();
 23ed5ea:	f7fb fc61 	bl	23e8eb0 <_Z17OutputResetReasonv>
  delay(4000); // Give some time to see this
 23ed5ee:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 23ed5f2:	f00a f819 	bl	23f7628 <delay>
  HeartBeat(); // Lets refresh Watchdog - just because we can
 23ed5f6:	f7fc f9af 	bl	23e9958 <_Z9HeartBeatv>
  DailyRebootCountDownTimer = cf_reboot_countdown_timer;
 23ed5fa:	4b9c      	ldr	r3, [pc, #624]	; (23ed86c <setup+0x340>)
 23ed5fc:	4c9c      	ldr	r4, [pc, #624]	; (23ed870 <setup+0x344>)
 23ed5fe:	681a      	ldr	r2, [r3, #0]
 23ed600:	4b9c      	ldr	r3, [pc, #624]	; (23ed874 <setup+0x348>)
 23ed602:	601a      	str	r2, [r3, #0]
  SD_initialize();
 23ed604:	f7fa fe8a 	bl	23e831c <_Z13SD_initializev>
  if (SD_exists && SD.exists(SD_n2s_file)) {
 23ed608:	782b      	ldrb	r3, [r5, #0]
 23ed60a:	2b00      	cmp	r3, #0
 23ed60c:	f000 8101 	beq.w	23ed812 <setup+0x2e6>
 23ed610:	4999      	ldr	r1, [pc, #612]	; (23ed878 <setup+0x34c>)
 23ed612:	489a      	ldr	r0, [pc, #616]	; (23ed87c <setup+0x350>)
 23ed614:	f7f7 fd74 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23ed618:	2800      	cmp	r0, #0
 23ed61a:	f000 80fa 	beq.w	23ed812 <setup+0x2e6>
    SystemStatusBits |= SSB_N2S; // Turn on Bit
 23ed61e:	6823      	ldr	r3, [r4, #0]
    Output("N2S:Exists");
 23ed620:	4897      	ldr	r0, [pc, #604]	; (23ed880 <setup+0x354>)
    SystemStatusBits |= SSB_N2S; // Turn on Bit
 23ed622:	f043 0310 	orr.w	r3, r3, #16
 23ed626:	6023      	str	r3, [r4, #0]
    Output("N2S:None");
 23ed628:	f7f8 f830 	bl	23e568c <_Z6OutputPKc>
  if (SD_exists && SD.exists(CF_NAME)) {
 23ed62c:	782b      	ldrb	r3, [r5, #0]
 23ed62e:	2b00      	cmp	r3, #0
 23ed630:	f040 80f5 	bne.w	23ed81e <setup+0x2f2>
    sprintf(msgbuf, "CF:NO %s", CF_NAME); Output (msgbuf);
 23ed634:	4a93      	ldr	r2, [pc, #588]	; (23ed884 <setup+0x358>)
 23ed636:	4994      	ldr	r1, [pc, #592]	; (23ed888 <setup+0x35c>)
 23ed638:	4894      	ldr	r0, [pc, #592]	; (23ed88c <setup+0x360>)
 23ed63a:	f009 ff15 	bl	23f7468 <sprintf>
 23ed63e:	4893      	ldr	r0, [pc, #588]	; (23ed88c <setup+0x360>)
 23ed640:	f7f8 f824 	bl	23e568c <_Z6OutputPKc>
    Output(msgbuf);
 23ed644:	4891      	ldr	r0, [pc, #580]	; (23ed88c <setup+0x360>)
 23ed646:	f7f8 f821 	bl	23e568c <_Z6OutputPKc>
  EEPROM_Dump();
 23ed64a:	f7fa fda5 	bl	23e8198 <_Z11EEPROM_Dumpv>
  stc_timestamp();
 23ed64e:	f7f8 f899 	bl	23e5784 <_Z13stc_timestampv>
  sprintf (msgbuf, "%sS", timestamp);
 23ed652:	4a8f      	ldr	r2, [pc, #572]	; (23ed890 <setup+0x364>)
 23ed654:	498f      	ldr	r1, [pc, #572]	; (23ed894 <setup+0x368>)
 23ed656:	488d      	ldr	r0, [pc, #564]	; (23ed88c <setup+0x360>)
 23ed658:	f009 ff06 	bl	23f7468 <sprintf>
  Output(msgbuf);
 23ed65c:	488b      	ldr	r0, [pc, #556]	; (23ed88c <setup+0x360>)
 23ed65e:	f7f8 f815 	bl	23e568c <_Z6OutputPKc>
  rtc_initialize();
 23ed662:	f7f8 f8e1 	bl	23e5828 <_Z14rtc_initializev>
  stc_timestamp();
 23ed666:	f7f8 f88d 	bl	23e5784 <_Z13stc_timestampv>
  sprintf (msgbuf, "%sS", timestamp);
 23ed66a:	4a89      	ldr	r2, [pc, #548]	; (23ed890 <setup+0x364>)
 23ed66c:	4989      	ldr	r1, [pc, #548]	; (23ed894 <setup+0x368>)
 23ed66e:	4887      	ldr	r0, [pc, #540]	; (23ed88c <setup+0x360>)
 23ed670:	f009 fefa 	bl	23f7468 <sprintf>
  Output(msgbuf);
 23ed674:	4885      	ldr	r0, [pc, #532]	; (23ed88c <setup+0x360>)
 23ed676:	f7f8 f809 	bl	23e568c <_Z6OutputPKc>
  if (Time.isValid()) {
 23ed67a:	f00b fe4d 	bl	23f9318 <_ZN9TimeClass7isValidEv>
 23ed67e:	2800      	cmp	r0, #0
 23ed680:	f000 80d7 	beq.w	23ed832 <setup+0x306>
    Output("STC:VALID");
 23ed684:	4884      	ldr	r0, [pc, #528]	; (23ed898 <setup+0x36c>)
    Output("STC:!VALID");
 23ed686:	f7f8 f801 	bl	23e568c <_Z6OutputPKc>
  stc_timestamp();
 23ed68a:	f7f8 f87b 	bl	23e5784 <_Z13stc_timestampv>
  sprintf (msgbuf, "%sS", timestamp);
 23ed68e:	4a80      	ldr	r2, [pc, #512]	; (23ed890 <setup+0x364>)
 23ed690:	4980      	ldr	r1, [pc, #512]	; (23ed894 <setup+0x368>)
 23ed692:	487e      	ldr	r0, [pc, #504]	; (23ed88c <setup+0x360>)
 23ed694:	f009 fee8 	bl	23f7468 <sprintf>
  Output(msgbuf);
 23ed698:	487c      	ldr	r0, [pc, #496]	; (23ed88c <setup+0x360>)
 23ed69a:	f7f7 fff7 	bl	23e568c <_Z6OutputPKc>
  sprintf (msgbuf, "PS:%d", System.powerSource());
 23ed69e:	f7fe fa0f 	bl	23ebac0 <_ZNK11SystemClass11powerSourceEv.isra.0>
 23ed6a2:	497e      	ldr	r1, [pc, #504]	; (23ed89c <setup+0x370>)
 23ed6a4:	4602      	mov	r2, r0
 23ed6a6:	4879      	ldr	r0, [pc, #484]	; (23ed88c <setup+0x360>)
 23ed6a8:	f009 fede 	bl	23f7468 <sprintf>
  Output(msgbuf);
 23ed6ac:	4877      	ldr	r0, [pc, #476]	; (23ed88c <setup+0x360>)
 23ed6ae:	f7f7 ffed 	bl	23e568c <_Z6OutputPKc>
  sprintf (msgbuf, "BS:%d", System.batteryState());
 23ed6b2:	f7fc f9ff 	bl	23e9ab4 <_ZNK11SystemClass12batteryStateEv.isra.0>
 23ed6b6:	497a      	ldr	r1, [pc, #488]	; (23ed8a0 <setup+0x374>)
 23ed6b8:	4602      	mov	r2, r0
 23ed6ba:	4874      	ldr	r0, [pc, #464]	; (23ed88c <setup+0x360>)
 23ed6bc:	f009 fed4 	bl	23f7468 <sprintf>
  Output(msgbuf);
 23ed6c0:	4872      	ldr	r0, [pc, #456]	; (23ed88c <setup+0x360>)
 23ed6c2:	f7f7 ffe3 	bl	23e568c <_Z6OutputPKc>
  float bpc = System.batteryCharge();
 23ed6c6:	f7fc f9e3 	bl	23e9a90 <_ZNK11SystemClass13batteryChargeEv.isra.0>
  sprintf (msgbuf, "BPC:%d.%02d", (int)bpc, (int)(bpc*100)%100);
 23ed6ca:	eddf 7a76 	vldr	s15, [pc, #472]	; 23ed8a4 <setup+0x378>
 23ed6ce:	ee60 7a27 	vmul.f32	s15, s0, s15
 23ed6d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23ed6d6:	2264      	movs	r2, #100	; 0x64
 23ed6d8:	ee17 3a90 	vmov	r3, s15
 23ed6dc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 23ed6e0:	fb93 f1f2 	sdiv	r1, r3, r2
  anemometer_interrupt_count = 0;
 23ed6e4:	2400      	movs	r4, #0
  sprintf (msgbuf, "BPC:%d.%02d", (int)bpc, (int)(bpc*100)%100);
 23ed6e6:	fb02 3311 	mls	r3, r2, r1, r3
 23ed6ea:	4868      	ldr	r0, [pc, #416]	; (23ed88c <setup+0x360>)
 23ed6ec:	ee17 2a90 	vmov	r2, s15
 23ed6f0:	496d      	ldr	r1, [pc, #436]	; (23ed8a8 <setup+0x37c>)
 23ed6f2:	f009 feb9 	bl	23f7468 <sprintf>
  Output(msgbuf);
 23ed6f6:	4865      	ldr	r0, [pc, #404]	; (23ed88c <setup+0x360>)
 23ed6f8:	f7f7 ffc8 	bl	23e568c <_Z6OutputPKc>
  network_initialize();
 23ed6fc:	f7ff fd8c 	bl	23ed218 <_Z18network_initializev>
  WiFiPrintCredentials();
 23ed700:	f7fc f80e 	bl	23e9720 <_Z20WiFiPrintCredentialsv>
  anemometer_interrupt_count = 0;
 23ed704:	4b69      	ldr	r3, [pc, #420]	; (23ed8ac <setup+0x380>)
 23ed706:	601c      	str	r4, [r3, #0]
  anemometer_interrupt_stime = System.millis();
 23ed708:	f7f7 fc7d 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23ed70c:	4b68      	ldr	r3, [pc, #416]	; (23ed8b0 <setup+0x384>)
  attachInterrupt(ANEMOMETER_IRQ_PIN, anemometer_interrupt_handler, FALLING);
 23ed70e:	2202      	movs	r2, #2
  anemometer_interrupt_stime = System.millis();
 23ed710:	e9c3 0100 	strd	r0, r1, [r3]
  attachInterrupt(ANEMOMETER_IRQ_PIN, anemometer_interrupt_handler, FALLING);
 23ed714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23ed718:	4966      	ldr	r1, [pc, #408]	; (23ed8b4 <setup+0x388>)
 23ed71a:	2011      	movs	r0, #17
 23ed71c:	9400      	str	r4, [sp, #0]
 23ed71e:	f00a fdc3 	bl	23f82a8 <_Z15attachInterrupttPFvvE13InterruptModeah>
  raingauge1_interrupt_count = 0;
 23ed722:	4b65      	ldr	r3, [pc, #404]	; (23ed8b8 <setup+0x38c>)
 23ed724:	601c      	str	r4, [r3, #0]
  raingauge1_interrupt_stime = System.millis();
 23ed726:	f7f7 fc6e 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23ed72a:	4b64      	ldr	r3, [pc, #400]	; (23ed8bc <setup+0x390>)
  attachInterrupt(RAINGAUGE1_IRQ_PIN, raingauge1_interrupt_handler, FALLING);
 23ed72c:	2202      	movs	r2, #2
  raingauge1_interrupt_stime = System.millis();
 23ed72e:	e9c3 0100 	strd	r0, r1, [r3]
  raingauge1_interrupt_ltime = 0;  // used to debounce the tip
 23ed732:	2000      	movs	r0, #0
 23ed734:	2100      	movs	r1, #0
 23ed736:	4b62      	ldr	r3, [pc, #392]	; (23ed8c0 <setup+0x394>)
 23ed738:	e9c3 0100 	strd	r0, r1, [r3]
  attachInterrupt(RAINGAUGE1_IRQ_PIN, raingauge1_interrupt_handler, FALLING);
 23ed73c:	4961      	ldr	r1, [pc, #388]	; (23ed8c4 <setup+0x398>)
 23ed73e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23ed742:	2010      	movs	r0, #16
 23ed744:	9400      	str	r4, [sp, #0]
 23ed746:	f00a fdaf 	bl	23f82a8 <_Z15attachInterrupttPFvvE13InterruptModeah>
  TXI_Initialize();
 23ed74a:	f7fc f8a7 	bl	23e989c <_Z14TXI_Initializev>
  A4_Initialize();
 23ed74e:	f7f9 fd8f 	bl	23e7270 <_Z13A4_Initializev>
  A5_Initialize();
 23ed752:	f7f9 fe11 	bl	23e7378 <_Z13A5_Initializev>
  pmts_initialize();  // Particle Muon on board temperature sensor (TMP112A)
 23ed756:	f7f9 fd0f 	bl	23e7178 <_Z15pmts_initializev>
  bmx_initialize();
 23ed75a:	f7f8 fa89 	bl	23e5c70 <_Z14bmx_initializev>
  htu21d_initialize();
 23ed75e:	f7f8 fba3 	bl	23e5ea8 <_Z17htu21d_initializev>
  mcp9808_initialize();
 23ed762:	f7f8 fbcf 	bl	23e5f04 <_Z18mcp9808_initializev>
  sht_initialize();
 23ed766:	f7f8 fc7d 	bl	23e6064 <_Z14sht_initializev>
  hih8_initialize();
 23ed76a:	f7f8 fce3 	bl	23e6134 <_Z15hih8_initializev>
  si1145_initialize();
 23ed76e:	f7f9 f953 	bl	23e6a18 <_Z17si1145_initializev>
  vlx_initialize();
 23ed772:	f7f9 fa05 	bl	23e6b80 <_Z14vlx_initializev>
  blx_initialize();
 23ed776:	f7f9 fa31 	bl	23e6bdc <_Z14blx_initializev>
  as5600_initialize();
 23ed77a:	f7f9 fd49 	bl	23e7210 <_Z17as5600_initializev>
  pm25aqi_initialize();
 23ed77e:	f7f9 fab9 	bl	23e6cf4 <_Z18pm25aqi_initializev>
  hdc_initialize();
 23ed782:	f7f9 fb3d 	bl	23e6e00 <_Z14hdc_initializev>
  lps_initialize();
 23ed786:	f7f9 fbab 	bl	23e6ee0 <_Z14lps_initializev>
  tlw_initialize();
 23ed78a:	f7f9 fc23 	bl	23e6fd4 <_Z14tlw_initializev>
  tsm_initialize();
 23ed78e:	f7f9 fc4f 	bl	23e7030 <_Z14tsm_initializev>
  tmsm_initialize();
 23ed792:	f7f9 fc7b 	bl	23e708c <_Z15tmsm_initializev>
  wbt_initialize();
 23ed796:	f7f8 fdaf 	bl	23e62f8 <_Z14wbt_initializev>
  hi_initialize();
 23ed79a:	f7f8 fe99 	bl	23e64d0 <_Z13hi_initializev>
  wbgt_initialize();
 23ed79e:	f7f9 f845 	bl	23e682c <_Z15wbgt_initializev>
  lora_initialize();
 23ed7a2:	f7fe fad3 	bl	23ebd4c <_Z15lora_initializev>
  lora_device_initialize();
 23ed7a6:	f7f8 f931 	bl	23e5a0c <_Z22lora_device_initializev>
  lora_msg_check();
 23ed7aa:	f7fe fbc3 	bl	23ebf34 <_Z14lora_msg_checkv>
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
 23ed7ae:	2203      	movs	r2, #3
 23ed7b0:	f241 3388 	movw	r3, #5000	; 0x1388
 23ed7b4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
        bool clearSession, bool reconnect) :
 23ed7b8:	2301      	movs	r3, #1
  Particle.setDisconnectOptions(CloudDisconnectOptions().graceful(true).timeout(5s));
 23ed7ba:	a80a      	add	r0, sp, #40	; 0x28
 23ed7bc:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
        reconnect_(reconnect) {
 23ed7c0:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
 23ed7c4:	f00a f9ea 	bl	23f7b9c <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>
        spark_cloud_flag_connect();
 23ed7c8:	f009 fcb8 	bl	23f713c <spark_cloud_flag_connect>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 23ed7cc:	4a3e      	ldr	r2, [pc, #248]	; (23ed8c8 <setup+0x39c>)
 23ed7ce:	493f      	ldr	r1, [pc, #252]	; (23ed8cc <setup+0x3a0>)
 23ed7d0:	483f      	ldr	r0, [pc, #252]	; (23ed8d0 <setup+0x3a4>)
 23ed7d2:	f00a f9c7 	bl	23f7b64 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  if (Particle.function("DoAction", Function_DoAction)) {
 23ed7d6:	b370      	cbz	r0, 23ed836 <setup+0x30a>
    Output ("DoAction:OK");
 23ed7d8:	483e      	ldr	r0, [pc, #248]	; (23ed8d4 <setup+0x3a8>)

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 23ed7da:	4c3f      	ldr	r4, [pc, #252]	; (23ed8d8 <setup+0x3ac>)
    Output ("DoAction:ERR");
 23ed7dc:	f7f7 ff56 	bl	23e568c <_Z6OutputPKc>
  Wind_Distance_Air_Initialize(); // Will call HeartBeat()
 23ed7e0:	f7fe fbe0 	bl	23ebfa4 <_Z28Wind_Distance_Air_Initializev>
 23ed7e4:	f242 7210 	movw	r2, #10000	; 0x2710
 23ed7e8:	4621      	mov	r1, r4
 23ed7ea:	4b3c      	ldr	r3, [pc, #240]	; (23ed8dc <setup+0x3b0>)
 23ed7ec:	483c      	ldr	r0, [pc, #240]	; (23ed8e0 <setup+0x3b4>)
 23ed7ee:	f008 ff65 	bl	23f66bc <cellular_command>
  if ((RESP_OK == Cellular.command(callback_imsi, imsi, 10000, "AT+CIMI\r\n")) && (strcmp(imsi,"") != 0)) {
 23ed7f2:	3002      	adds	r0, #2
 23ed7f4:	d101      	bne.n	23ed7fa <setup+0x2ce>
 23ed7f6:	7823      	ldrb	r3, [r4, #0]
 23ed7f8:	b9fb      	cbnz	r3, 23ed83a <setup+0x30e>
    Output("IMSI:NF");
 23ed7fa:	483a      	ldr	r0, [pc, #232]	; (23ed8e4 <setup+0x3b8>)
    Output (msgbuf);
 23ed7fc:	f7f7 ff46 	bl	23e568c <_Z6OutputPKc>
  if (Time.isValid()) {
 23ed800:	f00b fd8a 	bl	23f9318 <_ZN9TimeClass7isValidEv>
 23ed804:	b118      	cbz	r0, 23ed80e <setup+0x2e2>
    EEPROM_Initialize();
 23ed806:	f7fa fb03 	bl	23e7e10 <_Z17EEPROM_Initializev>
    OBS_Do();   
 23ed80a:	f7fc f961 	bl	23e9ad0 <_Z6OBS_Dov>
}
 23ed80e:	b013      	add	sp, #76	; 0x4c
 23ed810:	bd30      	pop	{r4, r5, pc}
    SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23ed812:	6823      	ldr	r3, [r4, #0]
    Output("N2S:None");
 23ed814:	4834      	ldr	r0, [pc, #208]	; (23ed8e8 <setup+0x3bc>)
    SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
 23ed816:	f023 0310 	bic.w	r3, r3, #16
 23ed81a:	6023      	str	r3, [r4, #0]
    Output("N2S:None");
 23ed81c:	e704      	b.n	23ed628 <setup+0xfc>
  if (SD_exists && SD.exists(CF_NAME)) {
 23ed81e:	4919      	ldr	r1, [pc, #100]	; (23ed884 <setup+0x358>)
 23ed820:	4816      	ldr	r0, [pc, #88]	; (23ed87c <setup+0x350>)
 23ed822:	f7f7 fc6d 	bl	23e5100 <_ZN8FsVolume6existsEPKc>
 23ed826:	2800      	cmp	r0, #0
 23ed828:	f43f af04 	beq.w	23ed634 <setup+0x108>
    SD_ReadConfigFile();
 23ed82c:	f7fb f876 	bl	23e891c <_Z17SD_ReadConfigFilev>
 23ed830:	e70b      	b.n	23ed64a <setup+0x11e>
    Output("STC:!VALID");
 23ed832:	482e      	ldr	r0, [pc, #184]	; (23ed8ec <setup+0x3c0>)
 23ed834:	e727      	b.n	23ed686 <setup+0x15a>
    Output ("DoAction:ERR");
 23ed836:	482e      	ldr	r0, [pc, #184]	; (23ed8f0 <setup+0x3c4>)
 23ed838:	e7cf      	b.n	23ed7da <setup+0x2ae>
    sprintf (msgbuf, "IMSI:%s", imsi);
 23ed83a:	4622      	mov	r2, r4
 23ed83c:	492d      	ldr	r1, [pc, #180]	; (23ed8f4 <setup+0x3c8>)
 23ed83e:	4813      	ldr	r0, [pc, #76]	; (23ed88c <setup+0x360>)
 23ed840:	f009 fe12 	bl	23f7468 <sprintf>
    Output (msgbuf);
 23ed844:	4811      	ldr	r0, [pc, #68]	; (23ed88c <setup+0x360>)
 23ed846:	e7d9      	b.n	23ed7fc <setup+0x2d0>
 23ed848:	1007aa58 	.word	0x1007aa58
 23ed84c:	1006a1c8 	.word	0x1006a1c8
 23ed850:	1006a780 	.word	0x1006a780
 23ed854:	1007af40 	.word	0x1007af40
 23ed858:	0001000c 	.word	0x0001000c
 23ed85c:	0001d4c0 	.word	0x0001d4c0
 23ed860:	1006a0fc 	.word	0x1006a0fc
 23ed864:	023fe619 	.word	0x023fe619
 23ed868:	023fe16f 	.word	0x023fe16f
 23ed86c:	1006a19c 	.word	0x1006a19c
 23ed870:	1006a178 	.word	0x1006a178
 23ed874:	1006a2a8 	.word	0x1006a2a8
 23ed878:	1006a157 	.word	0x1006a157
 23ed87c:	1006a2d4 	.word	0x1006a2d4
 23ed880:	023fe65c 	.word	0x023fe65c
 23ed884:	023fd6f5 	.word	0x023fd6f5
 23ed888:	023fe670 	.word	0x023fe670
 23ed88c:	1006f128 	.word	0x1006f128
 23ed890:	1007abe0 	.word	0x1007abe0
 23ed894:	023fe679 	.word	0x023fe679
 23ed898:	023fe67d 	.word	0x023fe67d
 23ed89c:	023fe692 	.word	0x023fe692
 23ed8a0:	023fe698 	.word	0x023fe698
 23ed8a4:	42c80000 	.word	0x42c80000
 23ed8a8:	023fe69e 	.word	0x023fe69e
 23ed8ac:	1006a938 	.word	0x1006a938
 23ed8b0:	1006a940 	.word	0x1006a940
 23ed8b4:	023e4ec9 	.word	0x023e4ec9
 23ed8b8:	1007aa5c 	.word	0x1007aa5c
 23ed8bc:	1007aa68 	.word	0x1007aa68
 23ed8c0:	1007aa60 	.word	0x1007aa60
 23ed8c4:	023e500d 	.word	0x023e500d
 23ed8c8:	023fe6aa 	.word	0x023fe6aa
 23ed8cc:	023e8f51 	.word	0x023e8f51
 23ed8d0:	023f7b39 	.word	0x023f7b39
 23ed8d4:	023fe6b3 	.word	0x023fe6b3
 23ed8d8:	1006ae9c 	.word	0x1006ae9c
 23ed8dc:	023fe6cc 	.word	0x023fe6cc
 23ed8e0:	023e4f0d 	.word	0x023e4f0d
 23ed8e4:	023fe6d6 	.word	0x023fe6d6
 23ed8e8:	023fe667 	.word	0x023fe667
 23ed8ec:	023fe687 	.word	0x023fe687
 23ed8f0:	023fe6bf 	.word	0x023fe6bf
 23ed8f4:	023fe6de 	.word	0x023fe6de

023ed8f8 <loop>:
void loop() {
 23ed8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23ed8fa:	b085      	sub	sp, #20
    if (Time.isValid()) {  
 23ed8fc:	f00b fd0c 	bl	23f9318 <_ZN9TimeClass7isValidEv>
 23ed900:	2800      	cmp	r0, #0
 23ed902:	f000 80a8 	beq.w	23eda56 <loop+0x15e>
      RTC_UpdateCheck();
 23ed906:	f7f7 ffed 	bl	23e58e4 <_Z15RTC_UpdateCheckv>
      if (!eeprom_valid) {
 23ed90a:	4ba6      	ldr	r3, [pc, #664]	; (23edba4 <loop+0x2ac>)
 23ed90c:	781b      	ldrb	r3, [r3, #0]
 23ed90e:	b90b      	cbnz	r3, 23ed914 <loop+0x1c>
        EEPROM_Initialize();
 23ed910:	f7fa fa7e 	bl	23e7e10 <_Z17EEPROM_Initializev>
      if ( (System.millis() - lastOBS) > OBSERVATION_INTERVAL) {  // 1 minute
 23ed914:	f7f7 fb77 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23ed918:	4aa3      	ldr	r2, [pc, #652]	; (23edba8 <loop+0x2b0>)
 23ed91a:	e9d2 3200 	ldrd	r3, r2, [r2]
 23ed91e:	1ac0      	subs	r0, r0, r3
 23ed920:	f64e 2361 	movw	r3, #60001	; 0xea61
 23ed924:	eb61 0102 	sbc.w	r1, r1, r2
 23ed928:	4298      	cmp	r0, r3
 23ed92a:	f171 0300 	sbcs.w	r3, r1, #0
 23ed92e:	d303      	bcc.n	23ed938 <loop+0x40>
        I2C_Check_Sensors(); // Make sure Sensors are online
 23ed930:	f7fa f81c 	bl	23e796c <_Z17I2C_Check_Sensorsv>
        OBS_Do(); 
 23ed934:	f7fc f8cc 	bl	23e9ad0 <_Z6OBS_Dov>
      if (SendSystemInformation && Particle.connected()) {
 23ed938:	4b9c      	ldr	r3, [pc, #624]	; (23edbac <loop+0x2b4>)
 23ed93a:	781b      	ldrb	r3, [r3, #0]
 23ed93c:	b123      	cbz	r3, 23ed948 <loop+0x50>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23ed93e:	f009 fc0b 	bl	23f7158 <spark_cloud_flag_connected>
 23ed942:	b108      	cbz	r0, 23ed948 <loop+0x50>
        INFO_Do(); // Function sets SendSystemInformation back to false.
 23ed944:	f7fe fc76 	bl	23ec234 <_Z7INFO_Dov>
      if ( (LastTransmitTime == 0) || ((System.millis() - LastTransmitTime) > (obs_tx_interval * 60 * 1000)) ) {
 23ed948:	4c99      	ldr	r4, [pc, #612]	; (23edbb0 <loop+0x2b8>)
 23ed94a:	e9d4 2300 	ldrd	r2, r3, [r4]
 23ed94e:	4313      	orrs	r3, r2
 23ed950:	d136      	bne.n	23ed9c0 <loop+0xc8>
 23ed952:	f009 fc01 	bl	23f7158 <spark_cloud_flag_connected>
        if (Particle.connected()) {
 23ed956:	2800      	cmp	r0, #0
 23ed958:	d046      	beq.n	23ed9e8 <loop+0xf0>
          Output ("Connected");
 23ed95a:	4896      	ldr	r0, [pc, #600]	; (23edbb4 <loop+0x2bc>)
 23ed95c:	f7f7 fe96 	bl	23e568c <_Z6OutputPKc>
          LastTransmitTime = System.millis();
 23ed960:	f7f7 fb51 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23ed964:	e9c4 0100 	strd	r0, r1, [r4]
          if ((System.millis() - LastTimeUpdate) > (4*3600*1000)) {
 23ed968:	f7f7 fb4d 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23ed96c:	2500      	movs	r5, #0
 23ed96e:	4c92      	ldr	r4, [pc, #584]	; (23edbb8 <loop+0x2c0>)
 23ed970:	e9d4 3200 	ldrd	r3, r2, [r4]
 23ed974:	1ac0      	subs	r0, r0, r3
 23ed976:	4b91      	ldr	r3, [pc, #580]	; (23edbbc <loop+0x2c4>)
 23ed978:	eb61 0102 	sbc.w	r1, r1, r2
 23ed97c:	4283      	cmp	r3, r0
 23ed97e:	eb75 0301 	sbcs.w	r3, r5, r1
 23ed982:	d209      	bcs.n	23ed998 <loop+0xa0>
 23ed984:	f009 fbe8 	bl	23f7158 <spark_cloud_flag_connected>
        if (!connected()) {
 23ed988:	b110      	cbz	r0, 23ed990 <loop+0x98>
        return spark_sync_time(NULL);
 23ed98a:	4628      	mov	r0, r5
 23ed98c:	f009 fc0e 	bl	23f71ac <spark_sync_time>
            LastTimeUpdate = System.millis();
 23ed990:	f7f7 fb39 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23ed994:	e9c4 0100 	strd	r0, r1, [r4]
          OBS_PublishAll();
 23ed998:	f7ff fbc4 	bl	23ed124 <_Z14OBS_PublishAllv>
          if (ws_refresh) {
 23ed99c:	4b88      	ldr	r3, [pc, #544]	; (23edbc0 <loop+0x2c8>)
 23ed99e:	781b      	ldrb	r3, [r3, #0]
 23ed9a0:	b123      	cbz	r3, 23ed9ac <loop+0xb4>
            Output ("WS Refresh Required");
 23ed9a2:	4888      	ldr	r0, [pc, #544]	; (23edbc4 <loop+0x2cc>)
 23ed9a4:	f7f7 fe72 	bl	23e568c <_Z6OutputPKc>
            Wind_Distance_Air_Initialize();
 23ed9a8:	f7fe fafc 	bl	23ebfa4 <_Z28Wind_Distance_Air_Initializev>
          stc_timestamp();
 23ed9ac:	f7f7 feea 	bl	23e5784 <_Z13stc_timestampv>
          Output(timestamp);
 23ed9b0:	4885      	ldr	r0, [pc, #532]	; (23edbc8 <loop+0x2d0>)
 23ed9b2:	f7f7 fe6b 	bl	23e568c <_Z6OutputPKc>
          Output_CellBatteryInfo();
 23ed9b6:	f7fe f835 	bl	23eba24 <_Z22Output_CellBatteryInfov>
          JPO_ClearBits();
 23ed9ba:	f7f7 fc9f 	bl	23e52fc <_Z13JPO_ClearBitsv>
 23ed9be:	e013      	b.n	23ed9e8 <loop+0xf0>
      if ( (LastTransmitTime == 0) || ((System.millis() - LastTransmitTime) > (obs_tx_interval * 60 * 1000)) ) {
 23ed9c0:	f7f7 fb21 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23ed9c4:	e9d4 3200 	ldrd	r3, r2, [r4]
 23ed9c8:	f64e 2560 	movw	r5, #60000	; 0xea60
 23ed9cc:	4e7f      	ldr	r6, [pc, #508]	; (23edbcc <loop+0x2d4>)
 23ed9ce:	1ac0      	subs	r0, r0, r3
 23ed9d0:	6833      	ldr	r3, [r6, #0]
 23ed9d2:	eb61 0102 	sbc.w	r1, r1, r2
 23ed9d6:	fba3 3205 	umull	r3, r2, r3, r5
 23ed9da:	6877      	ldr	r7, [r6, #4]
 23ed9dc:	4283      	cmp	r3, r0
 23ed9de:	fb05 2207 	mla	r2, r5, r7, r2
 23ed9e2:	eb72 0301 	sbcs.w	r3, r2, r1
 23ed9e6:	d3b4      	bcc.n	23ed952 <loop+0x5a>
      BackGroundWork();
 23ed9e8:	f7fe fb34 	bl	23ec054 <_Z14BackGroundWorkv>
    if ((cf_reboot_countdown_timer>0) && (--DailyRebootCountDownTimer<=0)) {
 23ed9ec:	4e78      	ldr	r6, [pc, #480]	; (23edbd0 <loop+0x2d8>)
 23ed9ee:	6833      	ldr	r3, [r6, #0]
 23ed9f0:	2b00      	cmp	r3, #0
 23ed9f2:	dd65      	ble.n	23edac0 <loop+0x1c8>
 23ed9f4:	4d77      	ldr	r5, [pc, #476]	; (23edbd4 <loop+0x2dc>)
 23ed9f6:	682b      	ldr	r3, [r5, #0]
 23ed9f8:	3b01      	subs	r3, #1
 23ed9fa:	2b00      	cmp	r3, #0
 23ed9fc:	602b      	str	r3, [r5, #0]
 23ed9fe:	dc5f      	bgt.n	23edac0 <loop+0x1c8>
      Output ("Daily Reboot");
 23eda00:	4875      	ldr	r0, [pc, #468]	; (23edbd8 <loop+0x2e0>)
 23eda02:	f7f7 fe43 	bl	23e568c <_Z6OutputPKc>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23eda06:	f009 fba7 	bl	23f7158 <spark_cloud_flag_connected>
      if (Particle.connected()) {
 23eda0a:	b108      	cbz	r0, 23eda10 <loop+0x118>
        OBS_PublishAll();
 23eda0c:	f7ff fb8a 	bl	23ed124 <_Z14OBS_PublishAllv>
      EEPROM_SaveUnreportedRain();
 23eda10:	f7fa faee 	bl	23e7ff0 <_Z25EEPROM_SaveUnreportedRainv>
      delay(1000);
 23eda14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23eda18:	f009 fe06 	bl	23f7628 <delay>
        reconnect_(reconnect) {
 23eda1c:	2300      	movs	r3, #0
      Particle.disconnect();
 23eda1e:	a801      	add	r0, sp, #4
 23eda20:	e9cd 3301 	strd	r3, r3, [sp, #4]
        bool clearSession, bool reconnect) :
 23eda24:	f8ad 300c 	strh.w	r3, [sp, #12]
        reconnect_(reconnect) {
 23eda28:	f88d 300e 	strb.w	r3, [sp, #14]
 23eda2c:	f00a f8ab 	bl	23f7b86 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        const system_tick_t start = millis();
 23eda30:	f7f7 fae9 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23eda34:	4604      	mov	r4, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23eda36:	f7f7 fae6 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23eda3a:	1b00      	subs	r0, r0, r4
 23eda3c:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23eda40:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 23eda44:	f171 0300 	sbcs.w	r3, r1, #0
 23eda48:	d212      	bcs.n	23eda70 <loop+0x178>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23eda4a:	f009 fb85 	bl	23f7158 <spark_cloud_flag_connected>
 23eda4e:	b178      	cbz	r0, 23eda70 <loop+0x178>
            spark_process();
 23eda50:	f009 fb66 	bl	23f7120 <spark_process>
        while (_while() && !_condition()) {
 23eda54:	e7ef      	b.n	23eda36 <loop+0x13e>
      stc_timestamp();
 23eda56:	f7f7 fe95 	bl	23e5784 <_Z13stc_timestampv>
      Output(timestamp);
 23eda5a:	485b      	ldr	r0, [pc, #364]	; (23edbc8 <loop+0x2d0>)
 23eda5c:	f7f7 fe16 	bl	23e568c <_Z6OutputPKc>
      Output("ERR: No Clock");
 23eda60:	485e      	ldr	r0, [pc, #376]	; (23edbdc <loop+0x2e4>)
 23eda62:	f7f7 fe13 	bl	23e568c <_Z6OutputPKc>
      delay (DELAY_NO_RTC);
 23eda66:	f64e 2060 	movw	r0, #60000	; 0xea60
 23eda6a:	f009 fddd 	bl	23f7628 <delay>
 23eda6e:	e7bd      	b.n	23ed9ec <loop+0xf4>
 23eda70:	4c5b      	ldr	r4, [pc, #364]	; (23edbe0 <loop+0x2e8>)
 23eda72:	f009 fb71 	bl	23f7158 <spark_cloud_flag_connected>
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23eda76:	2200      	movs	r2, #0
 23eda78:	2102      	movs	r1, #2
 23eda7a:	6860      	ldr	r0, [r4, #4]
 23eda7c:	f009 fc06 	bl	23f728c <network_disconnect>
      delay(1000);
 23eda80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23eda84:	f009 fdd0 	bl	23f7628 <delay>
      Cellular.off();
 23eda88:	4620      	mov	r0, r4
 23eda8a:	f7f7 fab6 	bl	23e4ffa <_ZN5spark13CellularClass3offEv>
      Output("Rebooting");  
 23eda8e:	4855      	ldr	r0, [pc, #340]	; (23edbe4 <loop+0x2ec>)
 23eda90:	f7f7 fdfc 	bl	23e568c <_Z6OutputPKc>
      delay(1000);
 23eda94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23eda98:	f009 fdc6 	bl	23f7628 <delay>
      DeviceReset();
 23eda9c:	f7fb fa42 	bl	23e8f24 <_Z11DeviceResetv>
      Output("I'm Alive! Why?");  
 23edaa0:	4851      	ldr	r0, [pc, #324]	; (23edbe8 <loop+0x2f0>)
 23edaa2:	f7f7 fdf3 	bl	23e568c <_Z6OutputPKc>
		  Cellular.on();
 23edaa6:	4620      	mov	r0, r4
 23edaa8:	f7f7 faa1 	bl	23e4fee <_ZN5spark13CellularClass2onEv>
      delay(1000);
 23edaac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23edab0:	f009 fdba 	bl	23f7628 <delay>
        spark_cloud_flag_connect();
 23edab4:	f009 fb42 	bl	23f713c <spark_cloud_flag_connect>
      DailyRebootCountDownTimer = cf_reboot_countdown_timer; // Reset count incase reboot fails
 23edab8:	6833      	ldr	r3, [r6, #0]
 23edaba:	602b      	str	r3, [r5, #0]
      Wind_Distance_Air_Initialize();
 23edabc:	f7fe fa72 	bl	23ebfa4 <_Z28Wind_Distance_Air_Initializev>
    if ((System.powerSource() == POWER_SOURCE_BATTERY) && (System.batteryCharge() <= 15.0)) {
 23edac0:	f7fd fffe 	bl	23ebac0 <_ZNK11SystemClass11powerSourceEv.isra.0>
 23edac4:	2805      	cmp	r0, #5
 23edac6:	d16a      	bne.n	23edb9e <loop+0x2a6>
 23edac8:	f7fb ffe2 	bl	23e9a90 <_ZNK11SystemClass13batteryChargeEv.isra.0>
 23edacc:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 23edad0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23edad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23edad8:	d861      	bhi.n	23edb9e <loop+0x2a6>
      Output("Low Power!");
 23edada:	4844      	ldr	r0, [pc, #272]	; (23edbec <loop+0x2f4>)
 23edadc:	f7f7 fdd6 	bl	23e568c <_Z6OutputPKc>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23edae0:	f009 fb3a 	bl	23f7158 <spark_cloud_flag_connected>
      if (Particle.connected()) {
 23edae4:	b118      	cbz	r0, 23edaee <loop+0x1f6>
        OBS_PublishAll(); 
 23edae6:	f7ff fb1d 	bl	23ed124 <_Z14OBS_PublishAllv>
        INFO_Do();
 23edaea:	f7fe fba3 	bl	23ec234 <_Z7INFO_Dov>
        reconnect_(reconnect) {
 23edaee:	2300      	movs	r3, #0
      Particle.disconnect();
 23edaf0:	a801      	add	r0, sp, #4
 23edaf2:	e9cd 3301 	strd	r3, r3, [sp, #4]
        bool clearSession, bool reconnect) :
 23edaf6:	f8ad 300c 	strh.w	r3, [sp, #12]
        reconnect_(reconnect) {
 23edafa:	f88d 300e 	strb.w	r3, [sp, #14]
 23edafe:	f00a f842 	bl	23f7b86 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        const system_tick_t start = millis();
 23edb02:	f7f7 fa80 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23edb06:	4604      	mov	r4, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23edb08:	f7f7 fa7d 	bl	23e5006 <_ZN11SystemClass6millisEv>
 23edb0c:	1b00      	subs	r0, r0, r4
 23edb0e:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23edb12:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 23edb16:	f171 0300 	sbcs.w	r3, r1, #0
 23edb1a:	d205      	bcs.n	23edb28 <loop+0x230>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23edb1c:	f009 fb1c 	bl	23f7158 <spark_cloud_flag_connected>
 23edb20:	b110      	cbz	r0, 23edb28 <loop+0x230>
            spark_process();
 23edb22:	f009 fafd 	bl	23f7120 <spark_process>
        while (_while() && !_condition()) {
 23edb26:	e7ef      	b.n	23edb08 <loop+0x210>
 23edb28:	4c2d      	ldr	r4, [pc, #180]	; (23edbe0 <loop+0x2e8>)
 23edb2a:	f009 fb15 	bl	23f7158 <spark_cloud_flag_connected>
 23edb2e:	2200      	movs	r2, #0
 23edb30:	2102      	movs	r1, #2
 23edb32:	6860      	ldr	r0, [r4, #4]
 23edb34:	f009 fbaa 	bl	23f728c <network_disconnect>
      delay(1000);
 23edb38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23edb3c:	f009 fd74 	bl	23f7628 <delay>
      Cellular.off();
 23edb40:	4620      	mov	r0, r4
 23edb42:	f7f7 fa5a 	bl	23e4ffa <_ZN5spark13CellularClass3offEv>
      if (LORA_exists) {
 23edb46:	4b2a      	ldr	r3, [pc, #168]	; (23edbf0 <loop+0x2f8>)
 23edb48:	781b      	ldrb	r3, [r3, #0]
 23edb4a:	b113      	cbz	r3, 23edb52 <loop+0x25a>
        rf95.sleep(); // Power Down LoRa. Note: it turn on when accessed
 23edb4c:	4829      	ldr	r0, [pc, #164]	; (23edbf4 <loop+0x2fc>)
 23edb4e:	f004 fc4e 	bl	23f23ee <_ZN7RH_RF955sleepEv>
      Output("Powering Down");
 23edb52:	4829      	ldr	r0, [pc, #164]	; (23edbf8 <loop+0x300>)
 23edb54:	f7f7 fd9a 	bl	23e568c <_Z6OutputPKc>
      OLED_sleepDisplay();
 23edb58:	f7f7 fbe6 	bl	23e5328 <_Z17OLED_sleepDisplayv>
      delay(5000);
 23edb5c:	f241 3088 	movw	r0, #5000	; 0x1388
 23edb60:	f009 fd62 	bl	23f7628 <delay>
		  pmic.disableBATFET();
 23edb64:	4825      	ldr	r0, [pc, #148]	; (23edbfc <loop+0x304>)
 23edb66:	f00a ff20 	bl	23f89aa <_ZN4PMIC13disableBATFETEv>
		  delay(2000);
 23edb6a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23edb6e:	f009 fd5b 	bl	23f7628 <delay>
      OLED_wakeDisplay();   // May need to toggle the Display reset pin.
 23edb72:	f7f7 fbef 	bl	23e5354 <_Z16OLED_wakeDisplayv>
		  delay(2000);
 23edb76:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23edb7a:	f009 fd55 	bl	23f7628 <delay>
		  Output("Power Re-applied");
 23edb7e:	4820      	ldr	r0, [pc, #128]	; (23edc00 <loop+0x308>)
 23edb80:	f7f7 fd84 	bl	23e568c <_Z6OutputPKc>
		  pmic.enableBATFET();
 23edb84:	481d      	ldr	r0, [pc, #116]	; (23edbfc <loop+0x304>)
 23edb86:	f00a fefb 	bl	23f8980 <_ZN4PMIC12enableBATFETEv>
		  Cellular.on();
 23edb8a:	4815      	ldr	r0, [pc, #84]	; (23edbe0 <loop+0x2e8>)
 23edb8c:	f7f7 fa2f 	bl	23e4fee <_ZN5spark13CellularClass2onEv>
        spark_cloud_flag_connect();
 23edb90:	f009 fad4 	bl	23f713c <spark_cloud_flag_connect>
}
 23edb94:	b005      	add	sp, #20
 23edb96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      Wind_Distance_Air_Initialize();
 23edb9a:	f7fe ba03 	b.w	23ebfa4 <_Z28Wind_Distance_Air_Initializev>
}
 23edb9e:	b005      	add	sp, #20
 23edba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23edba2:	bf00      	nop
 23edba4:	1006ae7c 	.word	0x1006ae7c
 23edba8:	1006aeb0 	.word	0x1006aeb0
 23edbac:	1006a176 	.word	0x1006a176
 23edbb0:	1006a2c0 	.word	0x1006a2c0
 23edbb4:	023fe6e6 	.word	0x023fe6e6
 23edbb8:	1006a2b8 	.word	0x1006a2b8
 23edbbc:	00dbba00 	.word	0x00dbba00
 23edbc0:	1007ae58 	.word	0x1007ae58
 23edbc4:	023fe6f0 	.word	0x023fe6f0
 23edbc8:	1007abe0 	.word	0x1007abe0
 23edbcc:	1006a1a8 	.word	0x1006a1a8
 23edbd0:	1006a19c 	.word	0x1006a19c
 23edbd4:	1006a2a8 	.word	0x1006a2a8
 23edbd8:	023fe712 	.word	0x023fe712
 23edbdc:	023fe704 	.word	0x023fe704
 23edbe0:	1007aeb8 	.word	0x1007aeb8
 23edbe4:	023fe71f 	.word	0x023fe71f
 23edbe8:	023fe729 	.word	0x023fe729
 23edbec:	023fe739 	.word	0x023fe739
 23edbf0:	1006a2b1 	.word	0x1006a2b1
 23edbf4:	1007aa88 	.word	0x1007aa88
 23edbf8:	023fe744 	.word	0x023fe744
 23edbfc:	1007aa58 	.word	0x1007aa58
 23edc00:	023fe752 	.word	0x023fe752

023edc04 <_ZL9xor_blockPhS_>:
  return pgm_read_byte (& s_inv [x]) ;
}


static void xor_block (byte * d, byte * s)
{
 23edc04:	b510      	push	{r4, lr}
 23edc06:	1d0b      	adds	r3, r1, #4
 23edc08:	3004      	adds	r0, #4
 23edc0a:	3114      	adds	r1, #20
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
    {
      *d++ ^= *s++ ;  // some unrolling
 23edc0c:	f813 4c04 	ldrb.w	r4, [r3, #-4]
 23edc10:	f810 2c04 	ldrb.w	r2, [r0, #-4]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23edc14:	3304      	adds	r3, #4
      *d++ ^= *s++ ;  // some unrolling
 23edc16:	4062      	eors	r2, r4
 23edc18:	f800 2c04 	strb.w	r2, [r0, #-4]
      *d++ ^= *s++ ;
 23edc1c:	f813 4c07 	ldrb.w	r4, [r3, #-7]
 23edc20:	f810 2c03 	ldrb.w	r2, [r0, #-3]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23edc24:	3004      	adds	r0, #4
      *d++ ^= *s++ ;
 23edc26:	4062      	eors	r2, r4
 23edc28:	f800 2c07 	strb.w	r2, [r0, #-7]
      *d++ ^= *s++ ;
 23edc2c:	f813 4c06 	ldrb.w	r4, [r3, #-6]
 23edc30:	f810 2c06 	ldrb.w	r2, [r0, #-6]
 23edc34:	4062      	eors	r2, r4
 23edc36:	f800 2c06 	strb.w	r2, [r0, #-6]
      *d++ ^= *s++ ;
 23edc3a:	f813 4c05 	ldrb.w	r4, [r3, #-5]
 23edc3e:	f810 2c05 	ldrb.w	r2, [r0, #-5]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23edc42:	428b      	cmp	r3, r1
      *d++ ^= *s++ ;
 23edc44:	ea82 0204 	eor.w	r2, r2, r4
 23edc48:	f800 2c05 	strb.w	r2, [r0, #-5]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23edc4c:	d1de      	bne.n	23edc0c <_ZL9xor_blockPhS_+0x8>
    }
}
 23edc4e:	bd10      	pop	{r4, pc}

023edc50 <_ZL12copy_and_keyPhS_S_>:

static void copy_and_key (byte * d, byte * s, byte * k)
{
 23edc50:	b530      	push	{r4, r5, lr}
 23edc52:	1d0b      	adds	r3, r1, #4
 23edc54:	3204      	adds	r2, #4
 23edc56:	3004      	adds	r0, #4
 23edc58:	3114      	adds	r1, #20
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
    {
      *d++ = *s++ ^ *k++ ;  // some unrolling
 23edc5a:	f813 4c04 	ldrb.w	r4, [r3, #-4]
 23edc5e:	f812 5c04 	ldrb.w	r5, [r2, #-4]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23edc62:	3304      	adds	r3, #4
      *d++ = *s++ ^ *k++ ;  // some unrolling
 23edc64:	406c      	eors	r4, r5
 23edc66:	f800 4c04 	strb.w	r4, [r0, #-4]
      *d++ = *s++ ^ *k++ ;
 23edc6a:	f812 5c03 	ldrb.w	r5, [r2, #-3]
 23edc6e:	f813 4c07 	ldrb.w	r4, [r3, #-7]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23edc72:	3204      	adds	r2, #4
      *d++ = *s++ ^ *k++ ;
 23edc74:	406c      	eors	r4, r5
 23edc76:	f800 4c03 	strb.w	r4, [r0, #-3]
      *d++ = *s++ ^ *k++ ;
 23edc7a:	f813 4c06 	ldrb.w	r4, [r3, #-6]
 23edc7e:	f812 5c06 	ldrb.w	r5, [r2, #-6]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23edc82:	3004      	adds	r0, #4
      *d++ = *s++ ^ *k++ ;
 23edc84:	406c      	eors	r4, r5
 23edc86:	f800 4c06 	strb.w	r4, [r0, #-6]
      *d++ = *s++ ^ *k++ ;
 23edc8a:	f813 4c05 	ldrb.w	r4, [r3, #-5]
 23edc8e:	f812 5c05 	ldrb.w	r5, [r2, #-5]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23edc92:	428b      	cmp	r3, r1
      *d++ = *s++ ^ *k++ ;
 23edc94:	ea84 0405 	eor.w	r4, r4, r5
 23edc98:	f800 4c05 	strb.w	r4, [r0, #-5]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
 23edc9c:	d1dd      	bne.n	23edc5a <_ZL12copy_and_keyPhS_S_+0xa>
    }
}
 23edc9e:	bd30      	pop	{r4, r5, pc}

023edca0 <_ZN3AESC1Ev>:
    }
}

/******************************************************************************/

AES::AES(){
 23edca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23edca2:	4a11      	ldr	r2, [pc, #68]	; (23edce8 <_ZN3AESC1Ev+0x48>)
 23edca4:	4603      	mov	r3, r0
 23edca6:	4617      	mov	r7, r2
 23edca8:	f500 758c 	add.w	r5, r0, #280	; 0x118
 23edcac:	f102 0610 	add.w	r6, r2, #16
 23edcb0:	462c      	mov	r4, r5
 23edcb2:	6810      	ldr	r0, [r2, #0]
 23edcb4:	6851      	ldr	r1, [r2, #4]
 23edcb6:	3208      	adds	r2, #8
 23edcb8:	c403      	stmia	r4!, {r0, r1}
 23edcba:	42b2      	cmp	r2, r6
 23edcbc:	4625      	mov	r5, r4
 23edcbe:	d1f7      	bne.n	23edcb0 <_ZN3AESC1Ev+0x10>
	byte ar_iv[8] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01 };
 23edcc0:	466a      	mov	r2, sp
 23edcc2:	6938      	ldr	r0, [r7, #16]
 23edcc4:	6871      	ldr	r1, [r6, #4]
 23edcc6:	c203      	stmia	r2!, {r0, r1}
	memcpy(iv,ar_iv,8);
 23edcc8:	466a      	mov	r2, sp
 23edcca:	ca03      	ldmia	r2!, {r0, r1}
	memcpy(iv+8,ar_iv,8);
 23edccc:	466a      	mov	r2, sp
	memcpy(iv,ar_iv,8);
 23edcce:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
 23edcd2:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	memcpy(iv+8,ar_iv,8);
 23edcd6:	ca03      	ldmia	r2!, {r0, r1}
 23edcd8:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	arr_pad[11] = 0x0c;
	arr_pad[12] = 0x0d;
	arr_pad[13] = 0x0e;
	arr_pad[14] = 0x0f;
	arr_pad[15] = 0x10;
}
 23edcdc:	4618      	mov	r0, r3
	memcpy(iv+8,ar_iv,8);
 23edcde:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
}
 23edce2:	b003      	add	sp, #12
 23edce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23edce6:	bf00      	nop
 23edce8:	023fcba8 	.word	0x023fcba8

023edcec <_ZN3AES12copy_n_bytesEPhS0_h>:
}

/******************************************************************************/

void AES::copy_n_bytes (byte * d, byte * s, byte nn)
{
 23edcec:	b570      	push	{r4, r5, r6, lr}
 23edcee:	4618      	mov	r0, r3
 23edcf0:	460c      	mov	r4, r1
 23edcf2:	4615      	mov	r5, r2
  while (nn >= 4)
 23edcf4:	2803      	cmp	r0, #3
 23edcf6:	f101 0104 	add.w	r1, r1, #4
 23edcfa:	f105 0504 	add.w	r5, r5, #4
 23edcfe:	d811      	bhi.n	23edd24 <_ZN3AES12copy_n_bytesEPhS0_h+0x38>
 23edd00:	0898      	lsrs	r0, r3, #2
 23edd02:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
 23edd06:	440c      	add	r4, r1
 23edd08:	4411      	add	r1, r2
 23edd0a:	ebc0 1280 	rsb	r2, r0, r0, lsl #6
 23edd0e:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 23edd12:	fa51 f080 	uxtab	r0, r1, r0
      *d++ = *s++ ;
      *d++ = *s++ ;
      *d++ = *s++ ;
      nn -= 4 ;
    }
  while (nn--)
 23edd16:	4281      	cmp	r1, r0
 23edd18:	d017      	beq.n	23edd4a <_ZN3AES12copy_n_bytesEPhS0_h+0x5e>
    *d++ = *s++ ;
 23edd1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 23edd1e:	f804 3b01 	strb.w	r3, [r4], #1
  while (nn--)
 23edd22:	e7f8      	b.n	23edd16 <_ZN3AES12copy_n_bytesEPhS0_h+0x2a>
      *d++ = *s++ ;  // some unrolling
 23edd24:	f815 6c04 	ldrb.w	r6, [r5, #-4]
      nn -= 4 ;
 23edd28:	3804      	subs	r0, #4
      *d++ = *s++ ;  // some unrolling
 23edd2a:	f801 6c04 	strb.w	r6, [r1, #-4]
      *d++ = *s++ ;
 23edd2e:	f815 6c03 	ldrb.w	r6, [r5, #-3]
      nn -= 4 ;
 23edd32:	b2c0      	uxtb	r0, r0
      *d++ = *s++ ;
 23edd34:	f801 6c03 	strb.w	r6, [r1, #-3]
      *d++ = *s++ ;
 23edd38:	f815 6c02 	ldrb.w	r6, [r5, #-2]
 23edd3c:	f801 6c02 	strb.w	r6, [r1, #-2]
      *d++ = *s++ ;
 23edd40:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 23edd44:	f801 6c01 	strb.w	r6, [r1, #-1]
  while (nn >= 4)
 23edd48:	e7d4      	b.n	23edcf4 <_ZN3AES12copy_n_bytesEPhS0_h+0x8>
}
 23edd4a:	bd70      	pop	{r4, r5, r6, pc}

023edd4c <_ZN3AES7set_keyEPhi>:
  switch (keylen)
 23edd4c:	2a80      	cmp	r2, #128	; 0x80
{
 23edd4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23edd52:	4604      	mov	r4, r0
 23edd54:	4608      	mov	r0, r1
  switch (keylen)
 23edd56:	d015      	beq.n	23edd84 <_ZN3AES7set_keyEPhi+0x38>
 23edd58:	dc0b      	bgt.n	23edd72 <_ZN3AES7set_keyEPhi+0x26>
 23edd5a:	2a18      	cmp	r2, #24
 23edd5c:	d068      	beq.n	23ede30 <_ZN3AES7set_keyEPhi+0xe4>
 23edd5e:	2a20      	cmp	r2, #32
 23edd60:	d00c      	beq.n	23edd7c <_ZN3AES7set_keyEPhi+0x30>
 23edd62:	2a10      	cmp	r2, #16
 23edd64:	d00e      	beq.n	23edd84 <_ZN3AES7set_keyEPhi+0x38>
      round = 0;
 23edd66:	2300      	movs	r3, #0
      return FAILURE;
 23edd68:	20ff      	movs	r0, #255	; 0xff
      round = 0;
 23edd6a:	6023      	str	r3, [r4, #0]
}
 23edd6c:	b003      	add	sp, #12
 23edd6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (keylen)
 23edd72:	2ac0      	cmp	r2, #192	; 0xc0
 23edd74:	d05c      	beq.n	23ede30 <_ZN3AES7set_keyEPhi+0xe4>
 23edd76:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 23edd7a:	d1f4      	bne.n	23edd66 <_ZN3AES7set_keyEPhi+0x1a>
      round = 14 ;
 23edd7c:	230e      	movs	r3, #14
      keylen = 32; // 14 rounds
 23edd7e:	2620      	movs	r6, #32
      round = 14 ;
 23edd80:	6023      	str	r3, [r4, #0]
      break;
 23edd82:	e002      	b.n	23edd8a <_ZN3AES7set_keyEPhi+0x3e>
      round = 10 ;
 23edd84:	230a      	movs	r3, #10
      keylen = 16; // 10 rounds
 23edd86:	2610      	movs	r6, #16
      round = 10 ;
 23edd88:	6023      	str	r3, [r4, #0]
  hi = (round + 1) << 4 ;
 23edd8a:	4621      	mov	r1, r4
  copy_n_bytes (key_sched, key, keylen) ;
 23edd8c:	b2f7      	uxtb	r7, r6
 23edd8e:	4602      	mov	r2, r0
  hi = (round + 1) << 4 ;
 23edd90:	f851 5b04 	ldr.w	r5, [r1], #4
  copy_n_bytes (key_sched, key, keylen) ;
 23edd94:	463b      	mov	r3, r7
 23edd96:	4620      	mov	r0, r4
 23edd98:	f7ff ffa8 	bl	23edcec <_ZN3AES12copy_n_bytesEPhS0_h>
 23edd9c:	463a      	mov	r2, r7
 23edd9e:	46bc      	mov	ip, r7
  for (byte cc = keylen, rc = 1 ; cc < hi ; cc += N_COL)
 23edda0:	2101      	movs	r1, #1
  hi = (round + 1) << 4 ;
 23edda2:	3501      	adds	r5, #1
 23edda4:	012d      	lsls	r5, r5, #4
  return pgm_read_byte (& s_fwd [x]) ;
 23edda6:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 23ede64 <_ZN3AES7set_keyEPhi+0x118>
  hi = (round + 1) << 4 ;
 23eddaa:	b2ed      	uxtb	r5, r5
  for (byte cc = keylen, rc = 1 ; cc < hi ; cc += N_COL)
 23eddac:	42aa      	cmp	r2, r5
 23eddae:	d256      	bcs.n	23ede5e <_ZN3AES7set_keyEPhi+0x112>
 23eddb0:	58a0      	ldr	r0, [r4, r2]
      if (cc == next)
 23eddb2:	4594      	cmp	ip, r2
        t[i] = key_sched [cc-4+i] ;
 23eddb4:	9001      	str	r0, [sp, #4]
      if (cc == next)
 23eddb6:	d13f      	bne.n	23ede38 <_ZN3AES7set_keyEPhi+0xec>
  return pgm_read_byte (& s_fwd [x]) ;
 23eddb8:	f3c0 2307 	ubfx	r3, r0, #8, #8
          t[0] = s_box (t[1]) ^ rc ;
 23eddbc:	f81e 3003 	ldrb.w	r3, [lr, r3]
          rc = f2 (rc) ;
 23eddc0:	f011 0f80 	tst.w	r1, #128	; 0x80
          t[0] = s_box (t[1]) ^ rc ;
 23eddc4:	ea83 0301 	eor.w	r3, r3, r1
 23eddc8:	f88d 3004 	strb.w	r3, [sp, #4]
  return pgm_read_byte (& s_fwd [x]) ;
 23eddcc:	f3c0 4307 	ubfx	r3, r0, #16, #8
          t[1] = s_box (t[2]) ;
 23eddd0:	f81e 3003 	ldrb.w	r3, [lr, r3]
 23eddd4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 23eddd8:	f88d 3005 	strb.w	r3, [sp, #5]
  return pgm_read_byte (& s_fwd [x]) ;
 23edddc:	ea4f 6310 	mov.w	r3, r0, lsr #24
          t[2] = s_box (t[3]) ;
 23edde0:	f81e 3003 	ldrb.w	r3, [lr, r3]
  return pgm_read_byte (& s_fwd [x]) ;
 23edde4:	b2c0      	uxtb	r0, r0
          t[2] = s_box (t[3]) ;
 23edde6:	f88d 3006 	strb.w	r3, [sp, #6]
          t[3] = s_box (ttt) ;
 23eddea:	f81e 3000 	ldrb.w	r3, [lr, r0]
          next += keylen ;
 23eddee:	44bc      	add	ip, r7
          rc = f2 (rc) ;
 23eddf0:	bf18      	it	ne
 23eddf2:	f081 011b 	eorne.w	r1, r1, #27
          next += keylen ;
 23eddf6:	fa5f fc8c 	uxtb.w	ip, ip
          t[3] = s_box (ttt) ;
 23eddfa:	f88d 3007 	strb.w	r3, [sp, #7]
          rc = f2 (rc) ;
 23eddfe:	b2c9      	uxtb	r1, r1
      else if (keylen == 32 && (cc & 31) == 16)
 23ede00:	2304      	movs	r3, #4
 23ede02:	1bd0      	subs	r0, r2, r7
 23ede04:	b2c0      	uxtb	r0, r0
 23ede06:	3004      	adds	r0, #4
 23ede08:	3204      	adds	r2, #4
 23ede0a:	4420      	add	r0, r4
 23ede0c:	f10d 0904 	add.w	r9, sp, #4
 23ede10:	eb04 0a02 	add.w	sl, r4, r2
        key_sched [cc + i] = key_sched [tt + i] ^ t[i] ;
 23ede14:	f810 8b01 	ldrb.w	r8, [r0], #1
 23ede18:	f819 bb01 	ldrb.w	fp, [r9], #1
      for (byte i = 0 ; i < N_COL ; i++)
 23ede1c:	3b01      	subs	r3, #1
        key_sched [cc + i] = key_sched [tt + i] ^ t[i] ;
 23ede1e:	ea88 080b 	eor.w	r8, r8, fp
      for (byte i = 0 ; i < N_COL ; i++)
 23ede22:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
        key_sched [cc + i] = key_sched [tt + i] ^ t[i] ;
 23ede26:	f80a 8b01 	strb.w	r8, [sl], #1
      for (byte i = 0 ; i < N_COL ; i++)
 23ede2a:	d1f3      	bne.n	23ede14 <_ZN3AES7set_keyEPhi+0xc8>
  for (byte cc = keylen, rc = 1 ; cc < hi ; cc += N_COL)
 23ede2c:	b2d2      	uxtb	r2, r2
 23ede2e:	e7bd      	b.n	23eddac <_ZN3AES7set_keyEPhi+0x60>
      round = 12 ;
 23ede30:	230c      	movs	r3, #12
      keylen = 24; // 12 rounds
 23ede32:	2618      	movs	r6, #24
      round = 12 ;
 23ede34:	6023      	str	r3, [r4, #0]
      break;
 23ede36:	e7a8      	b.n	23edd8a <_ZN3AES7set_keyEPhi+0x3e>
      else if (keylen == 32 && (cc & 31) == 16)
 23ede38:	2e20      	cmp	r6, #32
 23ede3a:	d1e1      	bne.n	23ede00 <_ZN3AES7set_keyEPhi+0xb4>
 23ede3c:	f002 031f 	and.w	r3, r2, #31
 23ede40:	2b10      	cmp	r3, #16
 23ede42:	d1dd      	bne.n	23ede00 <_ZN3AES7set_keyEPhi+0xb4>
 23ede44:	2304      	movs	r3, #4
 23ede46:	a801      	add	r0, sp, #4
            t[i] = s_box (t[i]) ;
 23ede48:	f890 8000 	ldrb.w	r8, [r0]
          for (byte i = 0 ; i < 4 ; i++)
 23ede4c:	3b01      	subs	r3, #1
            t[i] = s_box (t[i]) ;
 23ede4e:	f81e 8008 	ldrb.w	r8, [lr, r8]
          for (byte i = 0 ; i < 4 ; i++)
 23ede52:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            t[i] = s_box (t[i]) ;
 23ede56:	f800 8b01 	strb.w	r8, [r0], #1
          for (byte i = 0 ; i < 4 ; i++)
 23ede5a:	d1f5      	bne.n	23ede48 <_ZN3AES7set_keyEPhi+0xfc>
 23ede5c:	e7d0      	b.n	23ede00 <_ZN3AES7set_keyEPhi+0xb4>
  return SUCCESS ;
 23ede5e:	2000      	movs	r0, #0
 23ede60:	e784      	b.n	23edd6c <_ZN3AES7set_keyEPhi+0x20>
 23ede62:	bf00      	nop
 23ede64:	023fe7a4 	.word	0x023fe7a4

023ede68 <_ZN3AES7decryptEPhS0_>:
}

/******************************************************************************/

byte AES::decrypt (byte plain [N_BLOCK], byte cipher [N_BLOCK])
{
 23ede68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ede6c:	ee07 2a10 	vmov	s14, r2
  if (round)
 23ede70:	6802      	ldr	r2, [r0, #0]
{
 23ede72:	4605      	mov	r5, r0
 23ede74:	b095      	sub	sp, #84	; 0x54
  if (round)
 23ede76:	2a00      	cmp	r2, #0
 23ede78:	f000 8179 	beq.w	23ee16e <_ZN3AES7decryptEPhS0_+0x306>
    {
      byte s1 [N_BLOCK] ;
      copy_and_key (s1, plain, (byte*) (key_sched + round * N_BLOCK)) ;
 23ede7c:	1d03      	adds	r3, r0, #4
 23ede7e:	ae0c      	add	r6, sp, #48	; 0x30
 23ede80:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23ede84:	4630      	mov	r0, r6
  return pgm_read_byte (& s_inv [x]) ;
 23ede86:	4cbb      	ldr	r4, [pc, #748]	; (23ee174 <_ZN3AES7decryptEPhS0_+0x30c>)
      copy_and_key (s1, plain, (byte*) (key_sched + round * N_BLOCK)) ;
 23ede88:	9307      	str	r3, [sp, #28]
 23ede8a:	f7ff fee1 	bl	23edc50 <_ZL12copy_and_keyPhS_S_>
  return pgm_read_byte (& s_inv [x]) ;
 23ede8e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 23ede92:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
  st [0] = is_box (st[0]) ; st [4] = is_box (st [4]);
 23ede96:	5ce3      	ldrb	r3, [r4, r3]
  st [13] = is_box (st [9]) ; st [9] = is_box (st [5]) ;
 23ede98:	5ca2      	ldrb	r2, [r4, r2]
  st [0] = is_box (st[0]) ; st [4] = is_box (st [4]);
 23ede9a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  return pgm_read_byte (& s_inv [x]) ;
 23ede9e:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 23edea2:	ee07 6a90 	vmov	s15, r6
  st [0] = is_box (st[0]) ; st [4] = is_box (st [4]);
 23edea6:	5ce3      	ldrb	r3, [r4, r3]
 23edea8:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  return pgm_read_byte (& s_inv [x]) ;
 23edeac:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
  st [8] = is_box (st[8]) ; st [12] = is_box (st [12]);
 23edeb0:	5ce3      	ldrb	r3, [r4, r3]
 23edeb2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  return pgm_read_byte (& s_inv [x]) ;
 23edeb6:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
  st [8] = is_box (st[8]) ; st [12] = is_box (st [12]);
 23edeba:	5ce3      	ldrb	r3, [r4, r3]
 23edebc:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  byte tt = st[13] ;
 23edec0:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
  st [13] = is_box (st [9]) ; st [9] = is_box (st [5]) ;
 23edec4:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
  return pgm_read_byte (& s_inv [x]) ;
 23edec8:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
  st [5]  = is_box (st [1]) ; st [1] = is_box (tt) ;
 23edecc:	5ce3      	ldrb	r3, [r4, r3]
  st [13] = is_box (st [9]) ; st [9] = is_box (st [5]) ;
 23edece:	5ca2      	ldrb	r2, [r4, r2]
 23eded0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  return pgm_read_byte (& s_inv [x]) ;
 23eded4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
  st [5]  = is_box (st [1]) ; st [1] = is_box (tt) ;
 23eded8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 23ededc:	5ca2      	ldrb	r2, [r4, r2]
  tt = st [2] ; st [2] = is_box (st [10]) ; st [10] = is_box (tt) ;
 23edede:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
  st [5]  = is_box (st [1]) ; st [1] = is_box (tt) ;
 23edee2:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  return pgm_read_byte (& s_inv [x]) ;
 23edee6:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
  tt = st [2] ; st [2] = is_box (st [10]) ; st [10] = is_box (tt) ;
 23edeea:	5ce3      	ldrb	r3, [r4, r3]
 23edeec:	5ca2      	ldrb	r2, [r4, r2]
 23edeee:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 23edef2:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
  return pgm_read_byte (& s_inv [x]) ;
 23edef6:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
  tt = st [6] ; st [6] = is_box (st [14]) ; st [14] = is_box (tt) ;
 23edefa:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 23edefe:	5ca2      	ldrb	r2, [r4, r2]
 23edf00:	5ce3      	ldrb	r3, [r4, r3]
 23edf02:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  return pgm_read_byte (& s_inv [x]) ;
 23edf06:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
  tt = st [6] ; st [6] = is_box (st [14]) ; st [14] = is_box (tt) ;
 23edf0a:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
  st [3]  = is_box (st [7])  ; st [7]  = is_box (st [11]) ;
 23edf0e:	5ca2      	ldrb	r2, [r4, r2]
  tt = st [3] ;
 23edf10:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  st [3]  = is_box (st [7])  ; st [7]  = is_box (st [11]) ;
 23edf14:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
  return pgm_read_byte (& s_inv [x]) ;
 23edf18:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
  st [11] = is_box (st [15]) ; st [15] = is_box (tt) ;
 23edf1c:	5ce3      	ldrb	r3, [r4, r3]
  st [3]  = is_box (st [7])  ; st [7]  = is_box (st [11]) ;
 23edf1e:	5ca2      	ldrb	r2, [r4, r2]
 23edf20:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  return pgm_read_byte (& s_inv [x]) ;
 23edf24:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
  st [11] = is_box (st [15]) ; st [15] = is_box (tt) ;
 23edf28:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
      inv_shift_sub_rows (s1) ;

      for (byte r = round ; --r ; )
 23edf2c:	682b      	ldr	r3, [r5, #0]
  st [11] = is_box (st [15]) ; st [15] = is_box (tt) ;
 23edf2e:	5ca2      	ldrb	r2, [r4, r2]
 23edf30:	3b01      	subs	r3, #1
 23edf32:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
      for (byte r = round ; --r ; )
 23edf36:	b2da      	uxtb	r2, r3
 23edf38:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 23edf3c:	1d2b      	adds	r3, r5, #4
 23edf3e:	9305      	str	r3, [sp, #20]
 23edf40:	9b07      	ldr	r3, [sp, #28]
 23edf42:	9a05      	ldr	r2, [sp, #20]
 23edf44:	4293      	cmp	r3, r2
 23edf46:	f000 8107 	beq.w	23ee158 <_ZN3AES7decryptEPhS0_+0x2f0>
       {
         byte s2 [N_BLOCK] ;
         copy_and_key (s2, s1, (byte*) (key_sched + r * N_BLOCK)) ;
 23edf4a:	ee17 1a90 	vmov	r1, s15
 23edf4e:	a810      	add	r0, sp, #64	; 0x40
 23edf50:	f7ff fe7e 	bl	23edc50 <_ZL12copy_and_keyPhS_S_>
 23edf54:	ab0c      	add	r3, sp, #48	; 0x30
 23edf56:	f04f 0b00 	mov.w	fp, #0
 23edf5a:	ee07 3a90 	vmov	s15, r3
 23edf5e:	f10d 0940 	add.w	r9, sp, #64	; 0x40
      byte a1 = st [i] ;
 23edf62:	f899 3000 	ldrb.w	r3, [r9]
  for (byte i = 0 ; i < N_BLOCK ; i += N_COL)
 23edf66:	f109 0904 	add.w	r9, r9, #4
      byte a1 = st [i] ;
 23edf6a:	9306      	str	r3, [sp, #24]
      byte b1 = st [i+1] ;
 23edf6c:	f819 3c03 	ldrb.w	r3, [r9, #-3]
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23edf70:	9906      	ldr	r1, [sp, #24]
      byte b1 = st [i+1] ;
 23edf72:	9302      	str	r3, [sp, #8]
      byte c1 = st [i+2] ;
 23edf74:	f819 3c02 	ldrb.w	r3, [r9, #-2]
 23edf78:	9303      	str	r3, [sp, #12]
      byte d1 = st [i+3] ;
 23edf7a:	f819 3c01 	ldrb.w	r3, [r9, #-1]
 23edf7e:	9304      	str	r3, [sp, #16]
      byte a2 = f2(a1), b2 = f2(b1), c2 = f2(c1), d2 = f2(d1) ;
 23edf80:	f919 3c04 	ldrsb.w	r3, [r9, #-4]
 23edf84:	2b00      	cmp	r3, #0
 23edf86:	9b06      	ldr	r3, [sp, #24]
 23edf88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23edf8c:	bfb8      	it	lt
 23edf8e:	f083 031b 	eorlt.w	r3, r3, #27
 23edf92:	fa5f fa83 	uxtb.w	sl, r3
 23edf96:	9b02      	ldr	r3, [sp, #8]
 23edf98:	ea4f 024a 	mov.w	r2, sl, lsl #1
 23edf9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 23edfa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23edfa4:	bf18      	it	ne
 23edfa6:	f083 031b 	eorne.w	r3, r3, #27
 23edfaa:	b2db      	uxtb	r3, r3
 23edfac:	9300      	str	r3, [sp, #0]
 23edfae:	9b03      	ldr	r3, [sp, #12]
 23edfb0:	f013 0f80 	tst.w	r3, #128	; 0x80
 23edfb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23edfb8:	bf18      	it	ne
 23edfba:	f083 031b 	eorne.w	r3, r3, #27
 23edfbe:	b2db      	uxtb	r3, r3
 23edfc0:	9301      	str	r3, [sp, #4]
 23edfc2:	9b04      	ldr	r3, [sp, #16]
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
 23edfc4:	9d01      	ldr	r5, [sp, #4]
      byte a2 = f2(a1), b2 = f2(b1), c2 = f2(c1), d2 = f2(d1) ;
 23edfc6:	f013 0f80 	tst.w	r3, #128	; 0x80
 23edfca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23edfce:	bf18      	it	ne
 23edfd0:	f083 031b 	eorne.w	r3, r3, #27
 23edfd4:	b2d8      	uxtb	r0, r3
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
 23edfd6:	9b00      	ldr	r3, [sp, #0]
 23edfd8:	f01a 0f80 	tst.w	sl, #128	; 0x80
 23edfdc:	bf18      	it	ne
 23edfde:	f082 021b 	eorne.w	r2, r2, #27
 23edfe2:	f013 0f80 	tst.w	r3, #128	; 0x80
 23edfe6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23edfea:	ea4f 0c45 	mov.w	ip, r5, lsl #1
 23edfee:	bf18      	it	ne
 23edff0:	f083 031b 	eorne.w	r3, r3, #27
 23edff4:	f015 0f80 	tst.w	r5, #128	; 0x80
 23edff8:	b2d2      	uxtb	r2, r2
 23edffa:	ea4f 0740 	mov.w	r7, r0, lsl #1
 23edffe:	bf18      	it	ne
 23ee000:	f08c 0c1b 	eorne.w	ip, ip, #27
 23ee004:	f010 0f80 	tst.w	r0, #128	; 0x80
 23ee008:	ea4f 0842 	mov.w	r8, r2, lsl #1
 23ee00c:	bf18      	it	ne
 23ee00e:	f087 071b 	eorne.w	r7, r7, #27
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ee012:	f012 0f80 	tst.w	r2, #128	; 0x80
 23ee016:	bf18      	it	ne
 23ee018:	f088 081b 	eorne.w	r8, r8, #27
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
 23ee01c:	b2db      	uxtb	r3, r3
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ee01e:	fa5f f888 	uxtb.w	r8, r8
 23ee022:	f013 0f80 	tst.w	r3, #128	; 0x80
 23ee026:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ee02a:	ea81 0108 	eor.w	r1, r1, r8
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ee02e:	bf18      	it	ne
 23ee030:	f08e 0e1b 	eorne.w	lr, lr, #27
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ee034:	9108      	str	r1, [sp, #32]
 23ee036:	9902      	ldr	r1, [sp, #8]
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
 23ee038:	fa5f fc8c 	uxtb.w	ip, ip
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ee03c:	fa5f fe8e 	uxtb.w	lr, lr
 23ee040:	f01c 0f80 	tst.w	ip, #128	; 0x80
 23ee044:	ea4f 064c 	mov.w	r6, ip, lsl #1
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ee048:	ea81 010e 	eor.w	r1, r1, lr
 23ee04c:	9109      	str	r1, [sp, #36]	; 0x24
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ee04e:	bf18      	it	ne
 23ee050:	f086 061b 	eorne.w	r6, r6, #27
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ee054:	9903      	ldr	r1, [sp, #12]
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
 23ee056:	b2ff      	uxtb	r7, r7
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ee058:	b2f6      	uxtb	r6, r6
 23ee05a:	f017 0f80 	tst.w	r7, #128	; 0x80
 23ee05e:	ea4f 0547 	mov.w	r5, r7, lsl #1
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ee062:	ea81 0106 	eor.w	r1, r1, r6
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ee066:	bf18      	it	ne
 23ee068:	f085 051b 	eorne.w	r5, r5, #27
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ee06c:	910a      	str	r1, [sp, #40]	; 0x28
 23ee06e:	9904      	ldr	r1, [sp, #16]
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
 23ee070:	b2ed      	uxtb	r5, r5
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
 23ee072:	4069      	eors	r1, r5
 23ee074:	910b      	str	r1, [sp, #44]	; 0x2c
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23ee076:	9903      	ldr	r1, [sp, #12]
      byte ac = a8 ^ a4,bc = b8 ^ b4,cc = c8 ^ c4,dc = d8 ^ d4 ;
 23ee078:	407d      	eors	r5, r7
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23ee07a:	ea81 070a 	eor.w	r7, r1, sl
 23ee07e:	9900      	ldr	r1, [sp, #0]
      byte ac = a8 ^ a4,bc = b8 ^ b4,cc = c8 ^ c4,dc = d8 ^ d4 ;
 23ee080:	ea82 0208 	eor.w	r2, r2, r8
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23ee084:	404f      	eors	r7, r1
 23ee086:	9909      	ldr	r1, [sp, #36]	; 0x24
 23ee088:	4057      	eors	r7, r2
      byte ac = a8 ^ a4,bc = b8 ^ b4,cc = c8 ^ c4,dc = d8 ^ d4 ;
 23ee08a:	ea8c 0606 	eor.w	r6, ip, r6
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23ee08e:	404f      	eors	r7, r1
  return pgm_read_byte (& s_inv [x]) ;
 23ee090:	990b      	ldr	r1, [sp, #44]	; 0x2c
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23ee092:	4077      	eors	r7, r6
  return pgm_read_byte (& s_inv [x]) ;
 23ee094:	404f      	eors	r7, r1
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23ee096:	ee17 1a90 	vmov	r1, s15
 23ee09a:	5de7      	ldrb	r7, [r4, r7]
      byte ac = a8 ^ a4,bc = b8 ^ b4,cc = c8 ^ c4,dc = d8 ^ d4 ;
 23ee09c:	ea83 030e 	eor.w	r3, r3, lr
  return pgm_read_byte (& s_inv [x]) ;
 23ee0a0:	fa5f fe8b 	uxtb.w	lr, fp
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
 23ee0a4:	f80b 7001 	strb.w	r7, [fp, r1]
      dt[(i+5)&15]  = is_box (a9     ^  bc^b2  ^  c9^c2  ^  dc^d1) ;
 23ee0a8:	f10e 0705 	add.w	r7, lr, #5
 23ee0ac:	a914      	add	r1, sp, #80	; 0x50
 23ee0ae:	f007 070f 	and.w	r7, r7, #15
 23ee0b2:	440f      	add	r7, r1
 23ee0b4:	9904      	ldr	r1, [sp, #16]
  for (byte i = 0 ; i < N_BLOCK ; i += N_COL)
 23ee0b6:	f10b 0b04 	add.w	fp, fp, #4
      dt[(i+5)&15]  = is_box (a9     ^  bc^b2  ^  c9^c2  ^  dc^d1) ;
 23ee0ba:	468c      	mov	ip, r1
 23ee0bc:	9900      	ldr	r1, [sp, #0]
  for (byte i = 0 ; i < N_BLOCK ; i += N_COL)
 23ee0be:	f1bb 0f10 	cmp.w	fp, #16
      dt[(i+5)&15]  = is_box (a9     ^  bc^b2  ^  c9^c2  ^  dc^d1) ;
 23ee0c2:	ea8c 0c01 	eor.w	ip, ip, r1
 23ee0c6:	9901      	ldr	r1, [sp, #4]
 23ee0c8:	ea81 0c0c 	eor.w	ip, r1, ip
 23ee0cc:	9908      	ldr	r1, [sp, #32]
 23ee0ce:	ea81 0c0c 	eor.w	ip, r1, ip
 23ee0d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 23ee0d4:	ea83 0c0c 	eor.w	ip, r3, ip
 23ee0d8:	ea81 0c0c 	eor.w	ip, r1, ip
  return pgm_read_byte (& s_inv [x]) ;
 23ee0dc:	ea85 0c0c 	eor.w	ip, r5, ip
      dt[(i+5)&15]  = is_box (a9     ^  bc^b2  ^  c9^c2  ^  dc^d1) ;
 23ee0e0:	f814 c00c 	ldrb.w	ip, [r4, ip]
      dt[(i+10)&15] = is_box (ac^a1  ^  b9     ^  cc^c2  ^  d9^d2) ;
 23ee0e4:	a914      	add	r1, sp, #80	; 0x50
      dt[(i+5)&15]  = is_box (a9     ^  bc^b2  ^  c9^c2  ^  dc^d1) ;
 23ee0e6:	f807 cc20 	strb.w	ip, [r7, #-32]
      dt[(i+10)&15] = is_box (ac^a1  ^  b9     ^  cc^c2  ^  d9^d2) ;
 23ee0ea:	f10e 070a 	add.w	r7, lr, #10
 23ee0ee:	f007 070f 	and.w	r7, r7, #15
 23ee0f2:	440f      	add	r7, r1
 23ee0f4:	9906      	ldr	r1, [sp, #24]
 23ee0f6:	468c      	mov	ip, r1
 23ee0f8:	9901      	ldr	r1, [sp, #4]
 23ee0fa:	ea8c 0801 	eor.w	r8, ip, r1
 23ee0fe:	ea80 0808 	eor.w	r8, r0, r8
 23ee102:	9909      	ldr	r1, [sp, #36]	; 0x24
 23ee104:	ea82 0208 	eor.w	r2, r2, r8
 23ee108:	ea82 0201 	eor.w	r2, r2, r1
  return pgm_read_byte (& s_inv [x]) ;
 23ee10c:	990b      	ldr	r1, [sp, #44]	; 0x2c
      dt[(i+10)&15] = is_box (ac^a1  ^  b9     ^  cc^c2  ^  d9^d2) ;
 23ee10e:	ea82 0206 	eor.w	r2, r2, r6
  return pgm_read_byte (& s_inv [x]) ;
 23ee112:	ea82 0201 	eor.w	r2, r2, r1
      dt[(i+10)&15] = is_box (ac^a1  ^  b9     ^  cc^c2  ^  d9^d2) ;
 23ee116:	5ca2      	ldrb	r2, [r4, r2]
      dt[(i+15)&15] = is_box (a9^a2  ^  bc^b1  ^  c9     ^  dc^d2) ;
 23ee118:	a914      	add	r1, sp, #80	; 0x50
      dt[(i+10)&15] = is_box (ac^a1  ^  b9     ^  cc^c2  ^  d9^d2) ;
 23ee11a:	f807 2c20 	strb.w	r2, [r7, #-32]
      dt[(i+15)&15] = is_box (a9^a2  ^  bc^b1  ^  c9     ^  dc^d2) ;
 23ee11e:	f10e 020f 	add.w	r2, lr, #15
 23ee122:	f002 020f 	and.w	r2, r2, #15
 23ee126:	440a      	add	r2, r1
 23ee128:	9902      	ldr	r1, [sp, #8]
 23ee12a:	ea81 0e0a 	eor.w	lr, r1, sl
 23ee12e:	9908      	ldr	r1, [sp, #32]
 23ee130:	ea80 0e0e 	eor.w	lr, r0, lr
 23ee134:	ea81 0e0e 	eor.w	lr, r1, lr
 23ee138:	990a      	ldr	r1, [sp, #40]	; 0x28
 23ee13a:	ea83 030e 	eor.w	r3, r3, lr
 23ee13e:	ea81 0003 	eor.w	r0, r1, r3
  return pgm_read_byte (& s_inv [x]) ;
 23ee142:	ea85 0500 	eor.w	r5, r5, r0
      dt[(i+15)&15] = is_box (a9^a2  ^  bc^b1  ^  c9     ^  dc^d2) ;
 23ee146:	5d63      	ldrb	r3, [r4, r5]
 23ee148:	f802 3c20 	strb.w	r3, [r2, #-32]
  for (byte i = 0 ; i < N_BLOCK ; i += N_COL)
 23ee14c:	f47f af09 	bne.w	23edf62 <_ZN3AES7decryptEPhS0_+0xfa>
 23ee150:	9b05      	ldr	r3, [sp, #20]
 23ee152:	3b10      	subs	r3, #16
 23ee154:	9305      	str	r3, [sp, #20]
      for (byte r = round ; --r ; )
 23ee156:	e6f3      	b.n	23edf40 <_ZN3AES7decryptEPhS0_+0xd8>
         inv_mix_sub_columns (s1, s2) ;
       }
      copy_and_key (cipher, s1, (byte*) (key_sched)) ;
 23ee158:	ee17 0a10 	vmov	r0, s14
 23ee15c:	ee17 1a90 	vmov	r1, s15
 23ee160:	9a07      	ldr	r2, [sp, #28]
 23ee162:	f7ff fd75 	bl	23edc50 <_ZL12copy_and_keyPhS_S_>
    }
  else
    return FAILURE ;
  return SUCCESS ;
 23ee166:	2000      	movs	r0, #0
}
 23ee168:	b015      	add	sp, #84	; 0x54
 23ee16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return FAILURE ;
 23ee16e:	20ff      	movs	r0, #255	; 0xff
 23ee170:	e7fa      	b.n	23ee168 <_ZN3AES7decryptEPhS0_+0x300>
 23ee172:	bf00      	nop
 23ee174:	023fe8a4 	.word	0x023fe8a4

023ee178 <_ZN3AES11cbc_decryptEPhS0_iS0_>:

/******************************************************************************/

byte AES::cbc_decrypt (byte * cipher, byte * plain, int n_block, byte iv [N_BLOCK])
{
 23ee178:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 23ee17c:	4607      	mov	r7, r0
 23ee17e:	460d      	mov	r5, r1
 23ee180:	4616      	mov	r6, r2
 23ee182:	461c      	mov	r4, r3
 23ee184:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  while (n_block--)
 23ee188:	b1ec      	cbz	r4, 23ee1c6 <_ZN3AES11cbc_decryptEPhS0_iS0_+0x4e>
    {
      byte tmp [N_BLOCK] ;
      copy_n_bytes (tmp, cipher, N_BLOCK) ;
 23ee18a:	2310      	movs	r3, #16
 23ee18c:	462a      	mov	r2, r5
 23ee18e:	4669      	mov	r1, sp
 23ee190:	4638      	mov	r0, r7
 23ee192:	f7ff fdab 	bl	23edcec <_ZN3AES12copy_n_bytesEPhS0_h>
      if (decrypt (cipher, plain) != SUCCESS)
 23ee196:	4632      	mov	r2, r6
 23ee198:	4629      	mov	r1, r5
 23ee19a:	4638      	mov	r0, r7
 23ee19c:	f7ff fe64 	bl	23ede68 <_ZN3AES7decryptEPhS0_>
 23ee1a0:	3c01      	subs	r4, #1
 23ee1a2:	b118      	cbz	r0, 23ee1ac <_ZN3AES11cbc_decryptEPhS0_iS0_+0x34>
        return FAILURE ;
 23ee1a4:	20ff      	movs	r0, #255	; 0xff
      copy_n_bytes (iv, tmp, N_BLOCK) ;
      plain  += N_BLOCK ;
      cipher += N_BLOCK;
    }
  return SUCCESS ;
}
 23ee1a6:	b004      	add	sp, #16
 23ee1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      xor_block (plain, iv) ;
 23ee1ac:	4630      	mov	r0, r6
 23ee1ae:	4641      	mov	r1, r8
 23ee1b0:	f7ff fd28 	bl	23edc04 <_ZL9xor_blockPhS_>
      copy_n_bytes (iv, tmp, N_BLOCK) ;
 23ee1b4:	2310      	movs	r3, #16
 23ee1b6:	466a      	mov	r2, sp
 23ee1b8:	4641      	mov	r1, r8
 23ee1ba:	4638      	mov	r0, r7
 23ee1bc:	f7ff fd96 	bl	23edcec <_ZN3AES12copy_n_bytesEPhS0_h>
      plain  += N_BLOCK ;
 23ee1c0:	3610      	adds	r6, #16
      cipher += N_BLOCK;
 23ee1c2:	3510      	adds	r5, #16
  while (n_block--)
 23ee1c4:	e7e0      	b.n	23ee188 <_ZN3AES11cbc_decryptEPhS0_iS0_+0x10>
  return SUCCESS ;
 23ee1c6:	4620      	mov	r0, r4
 23ee1c8:	e7ed      	b.n	23ee1a6 <_ZN3AES11cbc_decryptEPhS0_iS0_+0x2e>

023ee1ca <_ZN3AES6set_IVEy>:
  return SUCCESS ;
}

/*****************************************************************************/

void AES::set_IV(unsigned long long int IVCl){
 23ee1ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
	memcpy(iv,&IVCl,8);
 23ee1cc:	466d      	mov	r5, sp
void AES::set_IV(unsigned long long int IVCl){
 23ee1ce:	e9cd 2300 	strd	r2, r3, [sp]
 23ee1d2:	4604      	mov	r4, r0
	memcpy(iv,&IVCl,8);
 23ee1d4:	cd03      	ldmia	r5!, {r0, r1}
	memcpy(iv+8,&IVCl,8);
 23ee1d6:	466d      	mov	r5, sp
	memcpy(iv,&IVCl,8);
 23ee1d8:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 23ee1dc:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	IVC = IVCl;
 23ee1e0:	e9c4 233e 	strd	r2, r3, [r4, #248]	; 0xf8
	memcpy(iv+8,&IVCl,8);
 23ee1e4:	cd03      	ldmia	r5!, {r0, r1}
 23ee1e6:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
 23ee1ea:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
}
 23ee1ee:	b003      	add	sp, #12
 23ee1f0:	bd30      	pop	{r4, r5, pc}

023ee1f2 <_ZN3AES6iv_incEv>:

/******************************************************************************/

void AES::iv_inc(){
	IVC += 1;
 23ee1f2:	e9d0 323e 	ldrd	r3, r2, [r0, #248]	; 0xf8
 23ee1f6:	3301      	adds	r3, #1
 23ee1f8:	f142 0200 	adc.w	r2, r2, #0
 23ee1fc:	e9c0 323e 	strd	r3, r2, [r0, #248]	; 0xf8
	memcpy(iv,&IVC,8);
 23ee200:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 23ee204:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ee208:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
 23ee20c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
	memcpy(iv+8,&IVC,8);
 23ee210:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 23ee214:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 23ee218:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
 23ee21c:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
}
 23ee220:	4770      	bx	lr

023ee222 <_ZN3AES6get_IVEPh>:


/******************************************************************************/

void AES::get_IV(byte *out){
	memcpy(out,&IVC,8);
 23ee222:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 23ee226:	600b      	str	r3, [r1, #0]
 23ee228:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
 23ee22c:	604b      	str	r3, [r1, #4]
	memcpy(out+8,&IVC,8);
 23ee22e:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 23ee232:	608b      	str	r3, [r1, #8]
 23ee234:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
 23ee238:	60cb      	str	r3, [r1, #12]
}
 23ee23a:	4770      	bx	lr

023ee23c <_ZN3AES14do_aes_decryptEPhiS0_S0_iS0_>:
	cbc_encrypt (plain_p, cipher, blocks);
}

/******************************************************************************/

void AES::do_aes_decrypt(byte *cipher,int size_c,byte *plain,byte *key, int bits, byte ivl [N_BLOCK]){
 23ee23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ee240:	4614      	mov	r4, r2
 23ee242:	461f      	mov	r7, r3
 23ee244:	4605      	mov	r5, r0
 23ee246:	460e      	mov	r6, r1
	size = sizel;
 23ee248:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
	set_size(size_c);
	int blocks = size_c / N_BLOCK;
	set_key (key, bits);
 23ee24c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
void AES::do_aes_decrypt(byte *cipher,int size_c,byte *plain,byte *key, int bits, byte ivl [N_BLOCK]){
 23ee250:	f8dd 8020 	ldr.w	r8, [sp, #32]
	set_key (key, bits);
 23ee254:	f7ff fd7a 	bl	23edd4c <_ZN3AES7set_keyEPhi>
	int blocks = size_c / N_BLOCK;
 23ee258:	2c00      	cmp	r4, #0
 23ee25a:	bfb8      	it	lt
 23ee25c:	340f      	addlt	r4, #15
	cbc_decrypt (cipher,plain, blocks, ivl);
 23ee25e:	463a      	mov	r2, r7
 23ee260:	4631      	mov	r1, r6
 23ee262:	4628      	mov	r0, r5
 23ee264:	f8cd 8018 	str.w	r8, [sp, #24]
 23ee268:	1123      	asrs	r3, r4, #4
}
 23ee26a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	cbc_decrypt (cipher,plain, blocks, ivl);
 23ee26e:	f7ff bf83 	b.w	23ee178 <_ZN3AES11cbc_decryptEPhS0_iS0_>

023ee272 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  /*! @brief Whether we should automatically change the range (if possible) for
     higher precision
      @param enabled True if we will try to autorange */
  virtual void enableAutoRange(bool enabled) {
    (void)enabled; /* suppress unused warning */
  };
 23ee272:	4770      	bx	lr

023ee274 <_ZN15Adafruit_BME280C1Ev>:
#include <Wire.h>

/*!
 *  @brief  class constructor
 */
Adafruit_BME280::Adafruit_BME280() : _cs(-1), _mosi(-1), _miso(-1), _sck(-1) {}
 23ee274:	2200      	movs	r2, #0
 23ee276:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 23ee27a:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23ee27e:	e9c0 1208 	strd	r1, r2, [r0, #32]
 23ee282:	6102      	str	r2, [r0, #16]
 23ee284:	4770      	bx	lr

023ee286 <_ZN15Adafruit_BME2807spixferEh>:
 *   @brief  Encapsulate hardware and software SPI transfer into one
 * function
 *   @param x the data byte to transfer
 *   @returns the data byte read from the device
 */
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 23ee286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // hardware SPI
  if (_sck == -1)
 23ee28a:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 23ee28e:	4604      	mov	r4, r0
  if (_sck == -1)
 23ee290:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 23ee292:	460f      	mov	r7, r1
  if (_sck == -1)
 23ee294:	d104      	bne.n	23ee2a0 <_ZN15Adafruit_BME2807spixferEh+0x1a>
    digitalWrite(_sck, HIGH);
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
}
 23ee296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return _spi->transfer(x);
 23ee29a:	6840      	ldr	r0, [r0, #4]
 23ee29c:	f00a bd64 	b.w	23f8d68 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
 23ee2a0:	2500      	movs	r5, #0
  for (int i = 7; i >= 0; i--) {
 23ee2a2:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1 << i));
 23ee2a4:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
 23ee2a8:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
 23ee2ac:	2100      	movs	r1, #0
 23ee2ae:	b280      	uxth	r0, r0
 23ee2b0:	f00b fbd5 	bl	23f9a5e <digitalWrite>
    digitalWrite(_mosi, x & (1 << i));
 23ee2b4:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 23ee2b8:	fa08 f106 	lsl.w	r1, r8, r6
 23ee2bc:	4039      	ands	r1, r7
 23ee2be:	b280      	uxth	r0, r0
 23ee2c0:	f00b fbcd 	bl	23f9a5e <digitalWrite>
    digitalWrite(_sck, HIGH);
 23ee2c4:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
 23ee2c8:	2101      	movs	r1, #1
 23ee2ca:	b280      	uxth	r0, r0
 23ee2cc:	f00b fbc7 	bl	23f9a5e <digitalWrite>
    if (digitalRead(_miso))
 23ee2d0:	f994 0022 	ldrsb.w	r0, [r4, #34]	; 0x22
    reply <<= 1;
 23ee2d4:	006d      	lsls	r5, r5, #1
    if (digitalRead(_miso))
 23ee2d6:	b280      	uxth	r0, r0
    reply <<= 1;
 23ee2d8:	b2ed      	uxtb	r5, r5
    if (digitalRead(_miso))
 23ee2da:	f00b fbd9 	bl	23f9a90 <digitalRead>
 23ee2de:	b108      	cbz	r0, 23ee2e4 <_ZN15Adafruit_BME2807spixferEh+0x5e>
      reply |= 1;
 23ee2e0:	f045 0501 	orr.w	r5, r5, #1
  for (int i = 7; i >= 0; i--) {
 23ee2e4:	3e01      	subs	r6, #1
 23ee2e6:	d2df      	bcs.n	23ee2a8 <_ZN15Adafruit_BME2807spixferEh+0x22>
}
 23ee2e8:	4628      	mov	r0, r5
 23ee2ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

023ee2f0 <_ZN15Adafruit_BME2806write8Ehh>:
/*!
 *   @brief  Writes an 8 bit value over I2C or SPI
 *   @param reg the register address to write to
 *   @param value the value to write to the register
 */
void Adafruit_BME280::write8(byte reg, byte value) {
 23ee2f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (_cs == -1) {
 23ee2f2:	f990 3020 	ldrsb.w	r3, [r0, #32]
void Adafruit_BME280::write8(byte reg, byte value) {
 23ee2f6:	4604      	mov	r4, r0
  if (_cs == -1) {
 23ee2f8:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
 23ee2fa:	460e      	mov	r6, r1
 23ee2fc:	4615      	mov	r5, r2
  if (_cs == -1) {
 23ee2fe:	d113      	bne.n	23ee328 <_ZN15Adafruit_BME2806write8Ehh+0x38>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23ee300:	7d01      	ldrb	r1, [r0, #20]
 23ee302:	6800      	ldr	r0, [r0, #0]
 23ee304:	f009 ff7e 	bl	23f8204 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23ee308:	6820      	ldr	r0, [r4, #0]
 23ee30a:	4631      	mov	r1, r6
 23ee30c:	6803      	ldr	r3, [r0, #0]
 23ee30e:	689b      	ldr	r3, [r3, #8]
 23ee310:	4798      	blx	r3
    _wire->write((uint8_t)value);
 23ee312:	6820      	ldr	r0, [r4, #0]
 23ee314:	4629      	mov	r1, r5
 23ee316:	6803      	ldr	r3, [r0, #0]
 23ee318:	689b      	ldr	r3, [r3, #8]
 23ee31a:	4798      	blx	r3
    _wire->endTransmission();
 23ee31c:	6820      	ldr	r0, [r4, #0]
    spixfer(value);
    digitalWrite(_cs, HIGH);
    if (_sck == -1)
      _spi->endTransaction(); // release the SPI bus
  }
}
 23ee31e:	b004      	add	sp, #16
 23ee320:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _wire->endTransmission();
 23ee324:	f009 bf79 	b.w	23f821a <_ZN7TwoWire15endTransmissionEv>
    if (_sck == -1)
 23ee328:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
 23ee32c:	3301      	adds	r3, #1
 23ee32e:	d10d      	bne.n	23ee34c <_ZN15Adafruit_BME2806write8Ehh+0x5c>
      dataMode_{dataMode}
 23ee330:	4b17      	ldr	r3, [pc, #92]	; (23ee390 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23ee332:	4669      	mov	r1, sp
 23ee334:	9300      	str	r3, [sp, #0]
 23ee336:	2300      	movs	r3, #0
 23ee338:	f88d 3004 	strb.w	r3, [sp, #4]
 23ee33c:	4b15      	ldr	r3, [pc, #84]	; (23ee394 <_ZN15Adafruit_BME2806write8Ehh+0xa4>)
 23ee33e:	6840      	ldr	r0, [r0, #4]
 23ee340:	9302      	str	r3, [sp, #8]
 23ee342:	2301      	movs	r3, #1
 23ee344:	f8ad 300c 	strh.w	r3, [sp, #12]
 23ee348:	f00a fca0 	bl	23f8c8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23ee34c:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23ee350:	2100      	movs	r1, #0
 23ee352:	b280      	uxth	r0, r0
 23ee354:	f00b fb83 	bl	23f9a5e <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
 23ee358:	f006 017f 	and.w	r1, r6, #127	; 0x7f
 23ee35c:	4620      	mov	r0, r4
 23ee35e:	f7ff ff92 	bl	23ee286 <_ZN15Adafruit_BME2807spixferEh>
    spixfer(value);
 23ee362:	4629      	mov	r1, r5
 23ee364:	4620      	mov	r0, r4
 23ee366:	f7ff ff8e 	bl	23ee286 <_ZN15Adafruit_BME2807spixferEh>
    digitalWrite(_cs, HIGH);
 23ee36a:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23ee36e:	2101      	movs	r1, #1
 23ee370:	b280      	uxth	r0, r0
 23ee372:	f00b fb74 	bl	23f9a5e <digitalWrite>
    if (_sck == -1)
 23ee376:	f994 3023 	ldrsb.w	r3, [r4, #35]	; 0x23
 23ee37a:	3301      	adds	r3, #1
 23ee37c:	d105      	bne.n	23ee38a <_ZN15Adafruit_BME2806write8Ehh+0x9a>
      _spi->endTransaction(); // release the SPI bus
 23ee37e:	6860      	ldr	r0, [r4, #4]
}
 23ee380:	b004      	add	sp, #16
 23ee382:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      _spi->endTransaction(); // release the SPI bus
 23ee386:	f00a bc67 	b.w	23f8c58 <_ZN8SPIClass14endTransactionEv>
}
 23ee38a:	b004      	add	sp, #16
 23ee38c:	bd70      	pop	{r4, r5, r6, pc}
 23ee38e:	bf00      	nop
 23ee390:	023fe76c 	.word	0x023fe76c
 23ee394:	0007a120 	.word	0x0007a120

023ee398 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
                                  standby_duration duration) {
 23ee398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23ee39a:	4604      	mov	r4, r0
  _measReg.osrs_t = tempSampling;
 23ee39c:	00db      	lsls	r3, r3, #3
 23ee39e:	f002 0207 	and.w	r2, r2, #7
 23ee3a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 23ee3a6:	4313      	orrs	r3, r2
 23ee3a8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
                                  standby_duration duration) {
 23ee3ac:	f89d 7018 	ldrb.w	r7, [sp, #24]
  _measReg.osrs_t = tempSampling;
 23ee3b0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  _humReg.osrs_h = humSampling;
 23ee3b4:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
                                  standby_duration duration) {
 23ee3b8:	f89d 501c 	ldrb.w	r5, [sp, #28]
 23ee3bc:	f89d 6020 	ldrb.w	r6, [sp, #32]
  _humReg.osrs_h = humSampling;
 23ee3c0:	f367 1347 	bfi	r3, r7, #5, #3
 23ee3c4:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  _configReg.t_sb = duration;
 23ee3c8:	00ed      	lsls	r5, r5, #3
 23ee3ca:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 23ee3ce:	f006 0607 	and.w	r6, r6, #7
 23ee3d2:	f005 0538 	and.w	r5, r5, #56	; 0x38
 23ee3d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 23ee3da:	4335      	orrs	r5, r6
 23ee3dc:	431d      	orrs	r5, r3
 23ee3de:	f880 504c 	strb.w	r5, [r0, #76]	; 0x4c
  write8(BME280_REGISTER_CONTROL, MODE_SLEEP);
 23ee3e2:	2200      	movs	r2, #0
 23ee3e4:	21f4      	movs	r1, #244	; 0xf4
 23ee3e6:	f7ff ff83 	bl	23ee2f0 <_ZN15Adafruit_BME2806write8Ehh>
    // 100 = x8
    // 101 and above = x16
    unsigned int osrs_h : 3; ///< pressure oversampling

    /// @return combined ctrl hum register
    unsigned int get() { return (osrs_h); }
 23ee3ea:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
  write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
 23ee3ee:	4620      	mov	r0, r4
 23ee3f0:	21f2      	movs	r1, #242	; 0xf2
 23ee3f2:	0952      	lsrs	r2, r2, #5
 23ee3f4:	f7ff ff7c 	bl	23ee2f0 <_ZN15Adafruit_BME2806write8Ehh>
    unsigned int get() { return (t_sb << 5) | (filter << 2) | spi3w_en; }
 23ee3f8:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
  write8(BME280_REGISTER_CONFIG, _configReg.get());
 23ee3fc:	4620      	mov	r0, r4
 23ee3fe:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 23ee402:	f002 0107 	and.w	r1, r2, #7
 23ee406:	009b      	lsls	r3, r3, #2
 23ee408:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 23ee40c:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
 23ee410:	21f5      	movs	r1, #245	; 0xf5
 23ee412:	f7ff ff6d 	bl	23ee2f0 <_ZN15Adafruit_BME2806write8Ehh>
    unsigned int get() { return (osrs_t << 5) | (osrs_p << 2) | mode; }
 23ee416:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
  write8(BME280_REGISTER_CONTROL, _measReg.get());
 23ee41a:	4620      	mov	r0, r4
 23ee41c:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 23ee420:	f002 0107 	and.w	r1, r2, #7
 23ee424:	009b      	lsls	r3, r3, #2
 23ee426:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 23ee42a:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
 23ee42e:	21f4      	movs	r1, #244	; 0xf4
}
 23ee430:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  write8(BME280_REGISTER_CONTROL, _measReg.get());
 23ee434:	f7ff bf5c 	b.w	23ee2f0 <_ZN15Adafruit_BME2806write8Ehh>

023ee438 <_ZN15Adafruit_BME2805read8Eh>:
/*!
 *   @brief  Reads an 8 bit value over I2C or SPI
 *   @param reg the register address to read from
 *   @returns the data byte read from the device
 */
uint8_t Adafruit_BME280::read8(byte reg) {
 23ee438:	b530      	push	{r4, r5, lr}
  uint8_t value;

  if (_cs == -1) {
 23ee43a:	f990 3020 	ldrsb.w	r3, [r0, #32]
uint8_t Adafruit_BME280::read8(byte reg) {
 23ee43e:	4604      	mov	r4, r0
  if (_cs == -1) {
 23ee440:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
 23ee442:	460d      	mov	r5, r1
 23ee444:	b085      	sub	sp, #20
  if (_cs == -1) {
 23ee446:	d118      	bne.n	23ee47a <_ZN15Adafruit_BME2805read8Eh+0x42>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23ee448:	7d01      	ldrb	r1, [r0, #20]
 23ee44a:	6800      	ldr	r0, [r0, #0]
 23ee44c:	f009 feda 	bl	23f8204 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23ee450:	6820      	ldr	r0, [r4, #0]
 23ee452:	4629      	mov	r1, r5
 23ee454:	6803      	ldr	r3, [r0, #0]
 23ee456:	689b      	ldr	r3, [r3, #8]
 23ee458:	4798      	blx	r3
    _wire->endTransmission();
 23ee45a:	6820      	ldr	r0, [r4, #0]
 23ee45c:	f009 fedd 	bl	23f821a <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)1);
 23ee460:	2201      	movs	r2, #1
 23ee462:	7d21      	ldrb	r1, [r4, #20]
 23ee464:	6820      	ldr	r0, [r4, #0]
 23ee466:	f009 feca 	bl	23f81fe <_ZN7TwoWire11requestFromEhj>
    value = _wire->read();
 23ee46a:	6820      	ldr	r0, [r4, #0]
 23ee46c:	6803      	ldr	r3, [r0, #0]
 23ee46e:	695b      	ldr	r3, [r3, #20]
 23ee470:	4798      	blx	r3
 23ee472:	b2c5      	uxtb	r5, r0
    digitalWrite(_cs, HIGH);
    if (_sck == -1)
      _spi->endTransaction(); // release the SPI bus
  }
  return value;
}
 23ee474:	4628      	mov	r0, r5
 23ee476:	b005      	add	sp, #20
 23ee478:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23ee47a:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
 23ee47e:	3301      	adds	r3, #1
 23ee480:	d10d      	bne.n	23ee49e <_ZN15Adafruit_BME2805read8Eh+0x66>
 23ee482:	4b16      	ldr	r3, [pc, #88]	; (23ee4dc <_ZN15Adafruit_BME2805read8Eh+0xa4>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23ee484:	4669      	mov	r1, sp
 23ee486:	9300      	str	r3, [sp, #0]
 23ee488:	2300      	movs	r3, #0
 23ee48a:	f88d 3004 	strb.w	r3, [sp, #4]
 23ee48e:	4b14      	ldr	r3, [pc, #80]	; (23ee4e0 <_ZN15Adafruit_BME2805read8Eh+0xa8>)
 23ee490:	6840      	ldr	r0, [r0, #4]
 23ee492:	9302      	str	r3, [sp, #8]
 23ee494:	2301      	movs	r3, #1
 23ee496:	f8ad 300c 	strh.w	r3, [sp, #12]
 23ee49a:	f00a fbf7 	bl	23f8c8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23ee49e:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23ee4a2:	2100      	movs	r1, #0
 23ee4a4:	b280      	uxth	r0, r0
 23ee4a6:	f00b fada 	bl	23f9a5e <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23ee4aa:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23ee4ae:	4620      	mov	r0, r4
 23ee4b0:	f7ff fee9 	bl	23ee286 <_ZN15Adafruit_BME2807spixferEh>
    value = spixfer(0);
 23ee4b4:	2100      	movs	r1, #0
 23ee4b6:	4620      	mov	r0, r4
 23ee4b8:	f7ff fee5 	bl	23ee286 <_ZN15Adafruit_BME2807spixferEh>
 23ee4bc:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
 23ee4be:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23ee4c2:	2101      	movs	r1, #1
 23ee4c4:	b280      	uxth	r0, r0
 23ee4c6:	f00b faca 	bl	23f9a5e <digitalWrite>
    if (_sck == -1)
 23ee4ca:	f994 3023 	ldrsb.w	r3, [r4, #35]	; 0x23
 23ee4ce:	3301      	adds	r3, #1
 23ee4d0:	d1d0      	bne.n	23ee474 <_ZN15Adafruit_BME2805read8Eh+0x3c>
      _spi->endTransaction(); // release the SPI bus
 23ee4d2:	6860      	ldr	r0, [r4, #4]
 23ee4d4:	f00a fbc0 	bl	23f8c58 <_ZN8SPIClass14endTransactionEv>
 23ee4d8:	e7cc      	b.n	23ee474 <_ZN15Adafruit_BME2805read8Eh+0x3c>
 23ee4da:	bf00      	nop
 23ee4dc:	023fe76c 	.word	0x023fe76c
 23ee4e0:	0007a120 	.word	0x0007a120

023ee4e4 <_ZN15Adafruit_BME2806read16Eh>:
/*!
 *   @brief  Reads a 16 bit value over I2C or SPI
 *   @param reg the register address to read from
 *   @returns the 16 bit data value read from the device
 */
uint16_t Adafruit_BME280::read16(byte reg) {
 23ee4e4:	b530      	push	{r4, r5, lr}
  uint16_t value;

  if (_cs == -1) {
 23ee4e6:	f990 3020 	ldrsb.w	r3, [r0, #32]
uint16_t Adafruit_BME280::read16(byte reg) {
 23ee4ea:	4604      	mov	r4, r0
  if (_cs == -1) {
 23ee4ec:	3301      	adds	r3, #1
uint16_t Adafruit_BME280::read16(byte reg) {
 23ee4ee:	460d      	mov	r5, r1
 23ee4f0:	b085      	sub	sp, #20
  if (_cs == -1) {
 23ee4f2:	d11f      	bne.n	23ee534 <_ZN15Adafruit_BME2806read16Eh+0x50>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23ee4f4:	7d01      	ldrb	r1, [r0, #20]
 23ee4f6:	6800      	ldr	r0, [r0, #0]
 23ee4f8:	f009 fe84 	bl	23f8204 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23ee4fc:	6820      	ldr	r0, [r4, #0]
 23ee4fe:	4629      	mov	r1, r5
 23ee500:	6803      	ldr	r3, [r0, #0]
 23ee502:	689b      	ldr	r3, [r3, #8]
 23ee504:	4798      	blx	r3
    _wire->endTransmission();
 23ee506:	6820      	ldr	r0, [r4, #0]
 23ee508:	f009 fe87 	bl	23f821a <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)2);
 23ee50c:	2202      	movs	r2, #2
 23ee50e:	7d21      	ldrb	r1, [r4, #20]
 23ee510:	6820      	ldr	r0, [r4, #0]
 23ee512:	f009 fe74 	bl	23f81fe <_ZN7TwoWire11requestFromEhj>
    value = (_wire->read() << 8) | _wire->read();
 23ee516:	6820      	ldr	r0, [r4, #0]
 23ee518:	6803      	ldr	r3, [r0, #0]
 23ee51a:	695b      	ldr	r3, [r3, #20]
 23ee51c:	4798      	blx	r3
 23ee51e:	4605      	mov	r5, r0
 23ee520:	6820      	ldr	r0, [r4, #0]
 23ee522:	6803      	ldr	r3, [r0, #0]
 23ee524:	695b      	ldr	r3, [r3, #20]
 23ee526:	4798      	blx	r3
 23ee528:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 23ee52c:	b285      	uxth	r5, r0
    if (_sck == -1)
      _spi->endTransaction(); // release the SPI bus
  }

  return value;
}
 23ee52e:	4628      	mov	r0, r5
 23ee530:	b005      	add	sp, #20
 23ee532:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23ee534:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
 23ee538:	3301      	adds	r3, #1
 23ee53a:	d10d      	bne.n	23ee558 <_ZN15Adafruit_BME2806read16Eh+0x74>
 23ee53c:	4b19      	ldr	r3, [pc, #100]	; (23ee5a4 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23ee53e:	4669      	mov	r1, sp
 23ee540:	9300      	str	r3, [sp, #0]
 23ee542:	2300      	movs	r3, #0
 23ee544:	f88d 3004 	strb.w	r3, [sp, #4]
 23ee548:	4b17      	ldr	r3, [pc, #92]	; (23ee5a8 <_ZN15Adafruit_BME2806read16Eh+0xc4>)
 23ee54a:	6840      	ldr	r0, [r0, #4]
 23ee54c:	9302      	str	r3, [sp, #8]
 23ee54e:	2301      	movs	r3, #1
 23ee550:	f8ad 300c 	strh.w	r3, [sp, #12]
 23ee554:	f00a fb9a 	bl	23f8c8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23ee558:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23ee55c:	2100      	movs	r1, #0
 23ee55e:	b280      	uxth	r0, r0
 23ee560:	f00b fa7d 	bl	23f9a5e <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23ee564:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23ee568:	4620      	mov	r0, r4
 23ee56a:	f7ff fe8c 	bl	23ee286 <_ZN15Adafruit_BME2807spixferEh>
    value = (spixfer(0) << 8) | spixfer(0);
 23ee56e:	2100      	movs	r1, #0
 23ee570:	4620      	mov	r0, r4
 23ee572:	f7ff fe88 	bl	23ee286 <_ZN15Adafruit_BME2807spixferEh>
 23ee576:	2100      	movs	r1, #0
 23ee578:	4605      	mov	r5, r0
 23ee57a:	4620      	mov	r0, r4
 23ee57c:	f7ff fe83 	bl	23ee286 <_ZN15Adafruit_BME2807spixferEh>
 23ee580:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 23ee584:	b285      	uxth	r5, r0
    digitalWrite(_cs, HIGH);
 23ee586:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23ee58a:	2101      	movs	r1, #1
 23ee58c:	b280      	uxth	r0, r0
 23ee58e:	f00b fa66 	bl	23f9a5e <digitalWrite>
    if (_sck == -1)
 23ee592:	f994 3023 	ldrsb.w	r3, [r4, #35]	; 0x23
 23ee596:	3301      	adds	r3, #1
 23ee598:	d1c9      	bne.n	23ee52e <_ZN15Adafruit_BME2806read16Eh+0x4a>
      _spi->endTransaction(); // release the SPI bus
 23ee59a:	6860      	ldr	r0, [r4, #4]
 23ee59c:	f00a fb5c 	bl	23f8c58 <_ZN8SPIClass14endTransactionEv>
 23ee5a0:	e7c5      	b.n	23ee52e <_ZN15Adafruit_BME2806read16Eh+0x4a>
 23ee5a2:	bf00      	nop
 23ee5a4:	023fe76c 	.word	0x023fe76c
 23ee5a8:	0007a120 	.word	0x0007a120

023ee5ac <_ZN15Adafruit_BME2809read16_LEEh>:
/*!
 *   @brief  Reads a signed 16 bit little endian value over I2C or SPI
 *   @param reg the register address to read from
 *   @returns the 16 bit data value read from the device
 */
uint16_t Adafruit_BME280::read16_LE(byte reg) {
 23ee5ac:	b508      	push	{r3, lr}
  uint16_t temp = read16(reg);
 23ee5ae:	f7ff ff99 	bl	23ee4e4 <_ZN15Adafruit_BME2806read16Eh>
  return (temp >> 8) | (temp << 8);
 23ee5b2:	ba40      	rev16	r0, r0
}
 23ee5b4:	b280      	uxth	r0, r0
 23ee5b6:	bd08      	pop	{r3, pc}

023ee5b8 <_ZN15Adafruit_BME2806read24Eh>:
/*!
 *   @brief  Reads a 24 bit value over I2C
 *   @param reg the register address to read from
 *   @returns the 24 bit data value read from the device
 */
uint32_t Adafruit_BME280::read24(byte reg) {
 23ee5b8:	b530      	push	{r4, r5, lr}
  uint32_t value;

  if (_cs == -1) {
 23ee5ba:	f990 3020 	ldrsb.w	r3, [r0, #32]
uint32_t Adafruit_BME280::read24(byte reg) {
 23ee5be:	4604      	mov	r4, r0
  if (_cs == -1) {
 23ee5c0:	3301      	adds	r3, #1
uint32_t Adafruit_BME280::read24(byte reg) {
 23ee5c2:	460d      	mov	r5, r1
 23ee5c4:	b085      	sub	sp, #20
  if (_cs == -1) {
 23ee5c6:	d123      	bne.n	23ee610 <_ZN15Adafruit_BME2806read24Eh+0x58>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23ee5c8:	7d01      	ldrb	r1, [r0, #20]
 23ee5ca:	6800      	ldr	r0, [r0, #0]
 23ee5cc:	f009 fe1a 	bl	23f8204 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23ee5d0:	6820      	ldr	r0, [r4, #0]
 23ee5d2:	4629      	mov	r1, r5
 23ee5d4:	6803      	ldr	r3, [r0, #0]
 23ee5d6:	689b      	ldr	r3, [r3, #8]
 23ee5d8:	4798      	blx	r3
    _wire->endTransmission();
 23ee5da:	6820      	ldr	r0, [r4, #0]
 23ee5dc:	f009 fe1d 	bl	23f821a <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)3);
 23ee5e0:	2203      	movs	r2, #3
 23ee5e2:	7d21      	ldrb	r1, [r4, #20]
 23ee5e4:	6820      	ldr	r0, [r4, #0]
 23ee5e6:	f009 fe0a 	bl	23f81fe <_ZN7TwoWire11requestFromEhj>

    value = _wire->read();
 23ee5ea:	6820      	ldr	r0, [r4, #0]
 23ee5ec:	6803      	ldr	r3, [r0, #0]
 23ee5ee:	695b      	ldr	r3, [r3, #20]
 23ee5f0:	4798      	blx	r3
    value <<= 8;
 23ee5f2:	0205      	lsls	r5, r0, #8
    value |= _wire->read();
 23ee5f4:	6820      	ldr	r0, [r4, #0]
 23ee5f6:	6803      	ldr	r3, [r0, #0]
 23ee5f8:	695b      	ldr	r3, [r3, #20]
 23ee5fa:	4798      	blx	r3
 23ee5fc:	4328      	orrs	r0, r5
    value <<= 8;
 23ee5fe:	0205      	lsls	r5, r0, #8
    value |= _wire->read();
 23ee600:	6820      	ldr	r0, [r4, #0]
 23ee602:	6803      	ldr	r3, [r0, #0]
 23ee604:	695b      	ldr	r3, [r3, #20]
 23ee606:	4798      	blx	r3
 23ee608:	4305      	orrs	r5, r0
    if (_sck == -1)
      _spi->endTransaction(); // release the SPI bus
  }

  return value;
}
 23ee60a:	4628      	mov	r0, r5
 23ee60c:	b005      	add	sp, #20
 23ee60e:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23ee610:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
 23ee614:	3301      	adds	r3, #1
 23ee616:	d10d      	bne.n	23ee634 <_ZN15Adafruit_BME2806read24Eh+0x7c>
 23ee618:	4b1b      	ldr	r3, [pc, #108]	; (23ee688 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23ee61a:	4669      	mov	r1, sp
 23ee61c:	9300      	str	r3, [sp, #0]
 23ee61e:	2300      	movs	r3, #0
 23ee620:	f88d 3004 	strb.w	r3, [sp, #4]
 23ee624:	4b19      	ldr	r3, [pc, #100]	; (23ee68c <_ZN15Adafruit_BME2806read24Eh+0xd4>)
 23ee626:	6840      	ldr	r0, [r0, #4]
 23ee628:	9302      	str	r3, [sp, #8]
 23ee62a:	2301      	movs	r3, #1
 23ee62c:	f8ad 300c 	strh.w	r3, [sp, #12]
 23ee630:	f00a fb2c 	bl	23f8c8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23ee634:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23ee638:	2100      	movs	r1, #0
 23ee63a:	b280      	uxth	r0, r0
 23ee63c:	f00b fa0f 	bl	23f9a5e <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23ee640:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23ee644:	4620      	mov	r0, r4
 23ee646:	f7ff fe1e 	bl	23ee286 <_ZN15Adafruit_BME2807spixferEh>
    value = spixfer(0);
 23ee64a:	2100      	movs	r1, #0
 23ee64c:	4620      	mov	r0, r4
 23ee64e:	f7ff fe1a 	bl	23ee286 <_ZN15Adafruit_BME2807spixferEh>
    value |= spixfer(0);
 23ee652:	2100      	movs	r1, #0
    value <<= 8;
 23ee654:	0205      	lsls	r5, r0, #8
    value |= spixfer(0);
 23ee656:	4620      	mov	r0, r4
 23ee658:	f7ff fe15 	bl	23ee286 <_ZN15Adafruit_BME2807spixferEh>
 23ee65c:	4328      	orrs	r0, r5
    value |= spixfer(0);
 23ee65e:	2100      	movs	r1, #0
    value <<= 8;
 23ee660:	0205      	lsls	r5, r0, #8
    value |= spixfer(0);
 23ee662:	4620      	mov	r0, r4
 23ee664:	f7ff fe0f 	bl	23ee286 <_ZN15Adafruit_BME2807spixferEh>
 23ee668:	4305      	orrs	r5, r0
    digitalWrite(_cs, HIGH);
 23ee66a:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23ee66e:	2101      	movs	r1, #1
 23ee670:	b280      	uxth	r0, r0
 23ee672:	f00b f9f4 	bl	23f9a5e <digitalWrite>
    if (_sck == -1)
 23ee676:	f994 3023 	ldrsb.w	r3, [r4, #35]	; 0x23
 23ee67a:	3301      	adds	r3, #1
 23ee67c:	d1c5      	bne.n	23ee60a <_ZN15Adafruit_BME2806read24Eh+0x52>
      _spi->endTransaction(); // release the SPI bus
 23ee67e:	6860      	ldr	r0, [r4, #4]
 23ee680:	f00a faea 	bl	23f8c58 <_ZN8SPIClass14endTransactionEv>
  return value;
 23ee684:	e7c1      	b.n	23ee60a <_ZN15Adafruit_BME2806read24Eh+0x52>
 23ee686:	bf00      	nop
 23ee688:	023fe76c 	.word	0x023fe76c
 23ee68c:	0007a120 	.word	0x0007a120

023ee690 <_ZN15Adafruit_BME28016readCoefficientsEv>:
}

/*!
 *   @brief  Reads the factory-set coefficients
 */
void Adafruit_BME280::readCoefficients(void) {
 23ee690:	b538      	push	{r3, r4, r5, lr}
  _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 23ee692:	2188      	movs	r1, #136	; 0x88
void Adafruit_BME280::readCoefficients(void) {
 23ee694:	4604      	mov	r4, r0
  _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 23ee696:	f7ff ff89 	bl	23ee5ac <_ZN15Adafruit_BME2809read16_LEEh>
  return (int16_t)read16_LE(reg);
 23ee69a:	218a      	movs	r1, #138	; 0x8a
  _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 23ee69c:	8520      	strh	r0, [r4, #40]	; 0x28
  return (int16_t)read16_LE(reg);
 23ee69e:	4620      	mov	r0, r4
 23ee6a0:	f7ff ff84 	bl	23ee5ac <_ZN15Adafruit_BME2809read16_LEEh>
 23ee6a4:	218c      	movs	r1, #140	; 0x8c
  _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
 23ee6a6:	8560      	strh	r0, [r4, #42]	; 0x2a
  return (int16_t)read16_LE(reg);
 23ee6a8:	4620      	mov	r0, r4
 23ee6aa:	f7ff ff7f 	bl	23ee5ac <_ZN15Adafruit_BME2809read16_LEEh>
  _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

  _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 23ee6ae:	218e      	movs	r1, #142	; 0x8e
  _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
 23ee6b0:	85a0      	strh	r0, [r4, #44]	; 0x2c
  _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 23ee6b2:	4620      	mov	r0, r4
 23ee6b4:	f7ff ff7a 	bl	23ee5ac <_ZN15Adafruit_BME2809read16_LEEh>
  return (int16_t)read16_LE(reg);
 23ee6b8:	2190      	movs	r1, #144	; 0x90
  _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 23ee6ba:	85e0      	strh	r0, [r4, #46]	; 0x2e
  return (int16_t)read16_LE(reg);
 23ee6bc:	4620      	mov	r0, r4
 23ee6be:	f7ff ff75 	bl	23ee5ac <_ZN15Adafruit_BME2809read16_LEEh>
 23ee6c2:	2192      	movs	r1, #146	; 0x92
  _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
 23ee6c4:	8620      	strh	r0, [r4, #48]	; 0x30
  return (int16_t)read16_LE(reg);
 23ee6c6:	4620      	mov	r0, r4
 23ee6c8:	f7ff ff70 	bl	23ee5ac <_ZN15Adafruit_BME2809read16_LEEh>
 23ee6cc:	2194      	movs	r1, #148	; 0x94
  _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
 23ee6ce:	8660      	strh	r0, [r4, #50]	; 0x32
  return (int16_t)read16_LE(reg);
 23ee6d0:	4620      	mov	r0, r4
 23ee6d2:	f7ff ff6b 	bl	23ee5ac <_ZN15Adafruit_BME2809read16_LEEh>
 23ee6d6:	2196      	movs	r1, #150	; 0x96
  _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
 23ee6d8:	86a0      	strh	r0, [r4, #52]	; 0x34
  return (int16_t)read16_LE(reg);
 23ee6da:	4620      	mov	r0, r4
 23ee6dc:	f7ff ff66 	bl	23ee5ac <_ZN15Adafruit_BME2809read16_LEEh>
 23ee6e0:	2198      	movs	r1, #152	; 0x98
  _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
 23ee6e2:	86e0      	strh	r0, [r4, #54]	; 0x36
  return (int16_t)read16_LE(reg);
 23ee6e4:	4620      	mov	r0, r4
 23ee6e6:	f7ff ff61 	bl	23ee5ac <_ZN15Adafruit_BME2809read16_LEEh>
 23ee6ea:	219a      	movs	r1, #154	; 0x9a
  _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
 23ee6ec:	8720      	strh	r0, [r4, #56]	; 0x38
  return (int16_t)read16_LE(reg);
 23ee6ee:	4620      	mov	r0, r4
 23ee6f0:	f7ff ff5c 	bl	23ee5ac <_ZN15Adafruit_BME2809read16_LEEh>
 23ee6f4:	219c      	movs	r1, #156	; 0x9c
  _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
 23ee6f6:	8760      	strh	r0, [r4, #58]	; 0x3a
  return (int16_t)read16_LE(reg);
 23ee6f8:	4620      	mov	r0, r4
 23ee6fa:	f7ff ff57 	bl	23ee5ac <_ZN15Adafruit_BME2809read16_LEEh>
 23ee6fe:	219e      	movs	r1, #158	; 0x9e
  _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
 23ee700:	87a0      	strh	r0, [r4, #60]	; 0x3c
  return (int16_t)read16_LE(reg);
 23ee702:	4620      	mov	r0, r4
 23ee704:	f7ff ff52 	bl	23ee5ac <_ZN15Adafruit_BME2809read16_LEEh>
  _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

  _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 23ee708:	21a1      	movs	r1, #161	; 0xa1
  _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
 23ee70a:	87e0      	strh	r0, [r4, #62]	; 0x3e
  _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 23ee70c:	4620      	mov	r0, r4
 23ee70e:	f7ff fe93 	bl	23ee438 <_ZN15Adafruit_BME2805read8Eh>
  return (int16_t)read16_LE(reg);
 23ee712:	21e1      	movs	r1, #225	; 0xe1
  _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 23ee714:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return (int16_t)read16_LE(reg);
 23ee718:	4620      	mov	r0, r4
 23ee71a:	f7ff ff47 	bl	23ee5ac <_ZN15Adafruit_BME2809read16_LEEh>
  _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
  _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 23ee71e:	21e3      	movs	r1, #227	; 0xe3
  _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
 23ee720:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
  _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 23ee724:	4620      	mov	r0, r4
 23ee726:	f7ff fe87 	bl	23ee438 <_ZN15Adafruit_BME2805read8Eh>
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23ee72a:	21e4      	movs	r1, #228	; 0xe4
  _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 23ee72c:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23ee730:	4620      	mov	r0, r4
 23ee732:	f7ff fe81 	bl	23ee438 <_ZN15Adafruit_BME2805read8Eh>
                         (read8(BME280_REGISTER_DIG_H4 + 1) & 0xF);
 23ee736:	21e5      	movs	r1, #229	; 0xe5
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23ee738:	4605      	mov	r5, r0
                         (read8(BME280_REGISTER_DIG_H4 + 1) & 0xF);
 23ee73a:	4620      	mov	r0, r4
 23ee73c:	f7ff fe7c 	bl	23ee438 <_ZN15Adafruit_BME2805read8Eh>
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23ee740:	b26d      	sxtb	r5, r5
                         (read8(BME280_REGISTER_DIG_H4 + 1) & 0xF);
 23ee742:	f000 000f 	and.w	r0, r0, #15
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23ee746:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
  _bme280_calib.dig_H5 = ((int8_t)read8(BME280_REGISTER_DIG_H5 + 1) << 4) |
 23ee74a:	21e6      	movs	r1, #230	; 0xe6
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
 23ee74c:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
  _bme280_calib.dig_H5 = ((int8_t)read8(BME280_REGISTER_DIG_H5 + 1) << 4) |
 23ee750:	4620      	mov	r0, r4
 23ee752:	f7ff fe71 	bl	23ee438 <_ZN15Adafruit_BME2805read8Eh>
                         (read8(BME280_REGISTER_DIG_H5) >> 4);
 23ee756:	21e5      	movs	r1, #229	; 0xe5
  _bme280_calib.dig_H5 = ((int8_t)read8(BME280_REGISTER_DIG_H5 + 1) << 4) |
 23ee758:	4605      	mov	r5, r0
                         (read8(BME280_REGISTER_DIG_H5) >> 4);
 23ee75a:	4620      	mov	r0, r4
 23ee75c:	f7ff fe6c 	bl	23ee438 <_ZN15Adafruit_BME2805read8Eh>
  _bme280_calib.dig_H5 = ((int8_t)read8(BME280_REGISTER_DIG_H5 + 1) << 4) |
 23ee760:	b26d      	sxtb	r5, r5
                         (read8(BME280_REGISTER_DIG_H5) >> 4);
 23ee762:	f3c0 1007 	ubfx	r0, r0, #4, #8
  _bme280_calib.dig_H5 = ((int8_t)read8(BME280_REGISTER_DIG_H5 + 1) << 4) |
 23ee766:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
 23ee76a:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
  _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
 23ee76e:	21e7      	movs	r1, #231	; 0xe7
 23ee770:	4620      	mov	r0, r4
 23ee772:	f7ff fe61 	bl	23ee438 <_ZN15Adafruit_BME2805read8Eh>
 23ee776:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
}
 23ee77a:	bd38      	pop	{r3, r4, r5, pc}

023ee77c <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
/*!
 *   @brief return true if chip is busy reading cal data
 *   @returns true if reading calibration, false otherwise
 */
bool Adafruit_BME280::isReadingCalibration(void) {
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
 23ee77c:	21f3      	movs	r1, #243	; 0xf3
bool Adafruit_BME280::isReadingCalibration(void) {
 23ee77e:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
 23ee780:	f7ff fe5a 	bl	23ee438 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
 23ee784:	f000 0001 	and.w	r0, r0, #1
 23ee788:	bd08      	pop	{r3, pc}

023ee78a <_ZN15Adafruit_BME2804initEv>:
bool Adafruit_BME280::init() {
 23ee78a:	b530      	push	{r4, r5, lr}
 23ee78c:	4604      	mov	r4, r0
  if (_cs == -1) {
 23ee78e:	f990 0020 	ldrsb.w	r0, [r0, #32]
bool Adafruit_BME280::init() {
 23ee792:	b085      	sub	sp, #20
  if (_cs == -1) {
 23ee794:	1c42      	adds	r2, r0, #1
 23ee796:	d129      	bne.n	23ee7ec <_ZN15Adafruit_BME2804initEv+0x62>
    _wire->begin();
 23ee798:	6820      	ldr	r0, [r4, #0]
 23ee79a:	f009 fd09 	bl	23f81b0 <_ZN7TwoWire5beginEv>
  _sensorID = read8(BME280_REGISTER_CHIPID);
 23ee79e:	21d0      	movs	r1, #208	; 0xd0
 23ee7a0:	4620      	mov	r0, r4
 23ee7a2:	f7ff fe49 	bl	23ee438 <_ZN15Adafruit_BME2805read8Eh>
  if (_sensorID != 0x60)
 23ee7a6:	2860      	cmp	r0, #96	; 0x60
  _sensorID = read8(BME280_REGISTER_CHIPID);
 23ee7a8:	61a0      	str	r0, [r4, #24]
  if (_sensorID != 0x60)
 23ee7aa:	d142      	bne.n	23ee832 <_ZN15Adafruit_BME2804initEv+0xa8>
  write8(BME280_REGISTER_SOFTRESET, 0xB6);
 23ee7ac:	22b6      	movs	r2, #182	; 0xb6
 23ee7ae:	21e0      	movs	r1, #224	; 0xe0
 23ee7b0:	4620      	mov	r0, r4
 23ee7b2:	f7ff fd9d 	bl	23ee2f0 <_ZN15Adafruit_BME2806write8Ehh>
  delay(10);
 23ee7b6:	200a      	movs	r0, #10
 23ee7b8:	f008 ff36 	bl	23f7628 <delay>
  while (isReadingCalibration())
 23ee7bc:	4620      	mov	r0, r4
 23ee7be:	f7ff ffdd 	bl	23ee77c <_ZN15Adafruit_BME28020isReadingCalibrationEv>
 23ee7c2:	4605      	mov	r5, r0
 23ee7c4:	2800      	cmp	r0, #0
 23ee7c6:	d1f6      	bne.n	23ee7b6 <_ZN15Adafruit_BME2804initEv+0x2c>
  readCoefficients(); // read trimming parameters, see DS 4.2.2
 23ee7c8:	4620      	mov	r0, r4
 23ee7ca:	f7ff ff61 	bl	23ee690 <_ZN15Adafruit_BME28016readCoefficientsEv>
  setSampling(); // use defaults
 23ee7ce:	2305      	movs	r3, #5
 23ee7d0:	2103      	movs	r1, #3
 23ee7d2:	461a      	mov	r2, r3
 23ee7d4:	4620      	mov	r0, r4
 23ee7d6:	9300      	str	r3, [sp, #0]
 23ee7d8:	e9cd 5501 	strd	r5, r5, [sp, #4]
 23ee7dc:	f7ff fddc 	bl	23ee398 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
  delay(100);
 23ee7e0:	2064      	movs	r0, #100	; 0x64
 23ee7e2:	f008 ff21 	bl	23f7628 <delay>
  return true;
 23ee7e6:	2001      	movs	r0, #1
}
 23ee7e8:	b005      	add	sp, #20
 23ee7ea:	bd30      	pop	{r4, r5, pc}
    digitalWrite(_cs, HIGH);
 23ee7ec:	2101      	movs	r1, #1
 23ee7ee:	b280      	uxth	r0, r0
 23ee7f0:	f00b f935 	bl	23f9a5e <digitalWrite>
    pinMode(_cs, OUTPUT);
 23ee7f4:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23ee7f8:	2101      	movs	r1, #1
 23ee7fa:	b280      	uxth	r0, r0
 23ee7fc:	f00b f91e 	bl	23f9a3c <pinMode>
    if (_sck == -1) {
 23ee800:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
 23ee804:	1c43      	adds	r3, r0, #1
 23ee806:	d103      	bne.n	23ee810 <_ZN15Adafruit_BME2804initEv+0x86>
      _spi->begin();
 23ee808:	6860      	ldr	r0, [r4, #4]
 23ee80a:	f00a f9eb 	bl	23f8be4 <_ZN8SPIClass5beginEv>
 23ee80e:	e7c6      	b.n	23ee79e <_ZN15Adafruit_BME2804initEv+0x14>
      pinMode(_sck, OUTPUT);
 23ee810:	2101      	movs	r1, #1
 23ee812:	b280      	uxth	r0, r0
 23ee814:	f00b f912 	bl	23f9a3c <pinMode>
      pinMode(_mosi, OUTPUT);
 23ee818:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 23ee81c:	2101      	movs	r1, #1
 23ee81e:	b280      	uxth	r0, r0
 23ee820:	f00b f90c 	bl	23f9a3c <pinMode>
      pinMode(_miso, INPUT);
 23ee824:	f994 0022 	ldrsb.w	r0, [r4, #34]	; 0x22
 23ee828:	2100      	movs	r1, #0
 23ee82a:	b280      	uxth	r0, r0
 23ee82c:	f00b f906 	bl	23f9a3c <pinMode>
 23ee830:	e7b5      	b.n	23ee79e <_ZN15Adafruit_BME2804initEv+0x14>
    return false;
 23ee832:	2000      	movs	r0, #0
 23ee834:	e7d8      	b.n	23ee7e8 <_ZN15Adafruit_BME2804initEv+0x5e>

023ee836 <_ZN15Adafruit_BME2805beginEhP7TwoWire>:
  _i2caddr = addr;
 23ee836:	7501      	strb	r1, [r0, #20]
  _wire = theWire;
 23ee838:	6002      	str	r2, [r0, #0]
  status = init();
 23ee83a:	f7ff bfa6 	b.w	23ee78a <_ZN15Adafruit_BME2804initEv>
	...

023ee840 <_ZN15Adafruit_BME28015readTemperatureEv>:

/*!
 *   @brief  Returns the temperature from the sensor
 *   @returns the temperature read from the device
 */
float Adafruit_BME280::readTemperature(void) {
 23ee840:	b538      	push	{r3, r4, r5, lr}
  int32_t var1, var2;

  int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
 23ee842:	21fa      	movs	r1, #250	; 0xfa
float Adafruit_BME280::readTemperature(void) {
 23ee844:	4604      	mov	r4, r0
  int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
 23ee846:	f7ff feb7 	bl	23ee5b8 <_ZN15Adafruit_BME2806read24Eh>
  if (adc_T == 0x800000) // value in case temp measurement was disabled
 23ee84a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 23ee84e:	d021      	beq.n	23ee894 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>
    return NAN;
  adc_T >>= 4;

  var1 = ((((adc_T >> 3) - ((int32_t)_bme280_calib.dig_T1 << 1))) *
 23ee850:	8d21      	ldrh	r1, [r4, #40]	; 0x28
         14;

  t_fine = var1 + var2 + t_fine_adjust;

  float T = (t_fine * 5 + 128) >> 8;
  return T / 100;
 23ee852:	ed9f 7a12 	vldr	s14, [pc, #72]	; 23ee89c <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
  var2 = (((((adc_T >> 4) - ((int32_t)_bme280_calib.dig_T1)) *
 23ee856:	ebc1 2220 	rsb	r2, r1, r0, asr #8
  var1 = ((((adc_T >> 3) - ((int32_t)_bme280_calib.dig_T1 << 1))) *
 23ee85a:	004d      	lsls	r5, r1, #1
          ((int32_t)_bme280_calib.dig_T2)) >>
 23ee85c:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
  var1 = ((((adc_T >> 3) - ((int32_t)_bme280_calib.dig_T1 << 1))) *
 23ee860:	ebc5 13e0 	rsb	r3, r5, r0, asr #7
 23ee864:	4359      	muls	r1, r3
  var2 = (((((adc_T >> 4) - ((int32_t)_bme280_calib.dig_T1)) *
 23ee866:	fb02 f302 	mul.w	r3, r2, r2
          ((int32_t)_bme280_calib.dig_T3)) >>
 23ee86a:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
            ((adc_T >> 4) - ((int32_t)_bme280_calib.dig_T1))) >>
 23ee86e:	131b      	asrs	r3, r3, #12
           12) *
 23ee870:	4353      	muls	r3, r2
  t_fine = var1 + var2 + t_fine_adjust;
 23ee872:	6a62      	ldr	r2, [r4, #36]	; 0x24
  var2 = (((((adc_T >> 4) - ((int32_t)_bme280_calib.dig_T1)) *
 23ee874:	139b      	asrs	r3, r3, #14
  t_fine = var1 + var2 + t_fine_adjust;
 23ee876:	eb03 23e1 	add.w	r3, r3, r1, asr #11
 23ee87a:	4413      	add	r3, r2
 23ee87c:	61e3      	str	r3, [r4, #28]
  float T = (t_fine * 5 + 128) >> 8;
 23ee87e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 23ee882:	3380      	adds	r3, #128	; 0x80
 23ee884:	121b      	asrs	r3, r3, #8
 23ee886:	ee07 3a90 	vmov	s15, r3
 23ee88a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return T / 100;
 23ee88e:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
 23ee892:	bd38      	pop	{r3, r4, r5, pc}
    return NAN;
 23ee894:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23ee8a0 <_ZN15Adafruit_BME28015readTemperatureEv+0x60>
 23ee898:	e7fb      	b.n	23ee892 <_ZN15Adafruit_BME28015readTemperatureEv+0x52>
 23ee89a:	bf00      	nop
 23ee89c:	42c80000 	.word	0x42c80000
 23ee8a0:	7fc00000 	.word	0x7fc00000

023ee8a4 <_ZN15Adafruit_BME28012readPressureEv>:

/*!
 *   @brief  Returns the pressure from the sensor
 *   @returns the pressure value (in Pascal) read from the device
 */
float Adafruit_BME280::readPressure(void) {
 23ee8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ee8a8:	4605      	mov	r5, r0
  int64_t var1, var2, p;

  readTemperature(); // must be done first to get t_fine
 23ee8aa:	f7ff ffc9 	bl	23ee840 <_ZN15Adafruit_BME28015readTemperatureEv>

  int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
 23ee8ae:	21f7      	movs	r1, #247	; 0xf7
 23ee8b0:	4628      	mov	r0, r5
 23ee8b2:	f7ff fe81 	bl	23ee5b8 <_ZN15Adafruit_BME2806read24Eh>
  if (adc_P == 0x800000) // value in case pressure measurement was disabled
 23ee8b6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 23ee8ba:	f000 80b6 	beq.w	23eea2a <_ZN15Adafruit_BME28012readPressureEv+0x186>
    return NAN;
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
 23ee8be:	69e9      	ldr	r1, [r5, #28]
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
  var2 = var2 + ((var1 * (int64_t)_bme280_calib.dig_P5) << 17);
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4) << 35);
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3) >> 8) +
         ((var1 * (int64_t)_bme280_calib.dig_P2) << 12);
 23ee8c0:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
  var1 = ((int64_t)t_fine) - 128000;
 23ee8c4:	ea4f 7ee1 	mov.w	lr, r1, asr #31
 23ee8c8:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
 23ee8cc:	f14e 3eff 	adc.w	lr, lr, #4294967295	; 0xffffffff
         ((var1 * (int64_t)_bme280_calib.dig_P2) << 12);
 23ee8d0:	fb03 f20e 	mul.w	r2, r3, lr
 23ee8d4:	17dc      	asrs	r4, r3, #31
 23ee8d6:	fb01 2204 	mla	r2, r1, r4, r2
 23ee8da:	fba3 3401 	umull	r3, r4, r3, r1
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 23ee8de:	fba1 7801 	umull	r7, r8, r1, r1
 23ee8e2:	fb01 f60e 	mul.w	r6, r1, lr
         ((var1 * (int64_t)_bme280_calib.dig_P2) << 12);
 23ee8e6:	4422      	add	r2, r4
 23ee8e8:	0312      	lsls	r2, r2, #12
 23ee8ea:	031c      	lsls	r4, r3, #12
 23ee8ec:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3) >> 8) +
 23ee8f0:	f9b5 3032 	ldrsh.w	r3, [r5, #50]	; 0x32
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 23ee8f4:	eb08 0846 	add.w	r8, r8, r6, lsl #1
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3) >> 8) +
 23ee8f8:	fb03 f608 	mul.w	r6, r3, r8
 23ee8fc:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 23ee900:	fb07 660c 	mla	r6, r7, ip, r6
 23ee904:	fba3 3c07 	umull	r3, ip, r3, r7
 23ee908:	4466      	add	r6, ip
 23ee90a:	0a1b      	lsrs	r3, r3, #8
 23ee90c:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 23ee910:	191b      	adds	r3, r3, r4
 23ee912:	eb42 2226 	adc.w	r2, r2, r6, asr #8
  var1 =
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bme280_calib.dig_P1) >> 33;
 23ee916:	8dee      	ldrh	r6, [r5, #46]	; 0x2e
 23ee918:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 23ee91c:	fba3 3406 	umull	r3, r4, r3, r6
 23ee920:	fb06 4402 	mla	r4, r6, r2, r4
  var1 =
 23ee924:	17e3      	asrs	r3, r4, #31
 23ee926:	1062      	asrs	r2, r4, #1

  if (var1 == 0) {
 23ee928:	ea53 0464 	orrs.w	r4, r3, r4, asr #1
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bme280_calib.dig_P1) >> 33;
 23ee92c:	f04f 0c00 	mov.w	ip, #0
  if (var1 == 0) {
 23ee930:	d07e      	beq.n	23eea30 <_ZN15Adafruit_BME28012readPressureEv+0x18c>
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 23ee932:	f9b5 4038 	ldrsh.w	r4, [r5, #56]	; 0x38
  adc_P >>= 4;
 23ee936:	1100      	asrs	r0, r0, #4
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 23ee938:	fb04 f608 	mul.w	r6, r4, r8
 23ee93c:	ea4f 79e4 	mov.w	r9, r4, asr #31
 23ee940:	fb07 6609 	mla	r6, r7, r9, r6
 23ee944:	fba4 4707 	umull	r4, r7, r4, r7
 23ee948:	443e      	add	r6, r7
  var2 = var2 + ((var1 * (int64_t)_bme280_calib.dig_P5) << 17);
 23ee94a:	f9b5 7036 	ldrsh.w	r7, [r5, #54]	; 0x36
 23ee94e:	fb07 fe0e 	mul.w	lr, r7, lr
 23ee952:	ea4f 78e7 	mov.w	r8, r7, asr #31
 23ee956:	fb01 ee08 	mla	lr, r1, r8, lr
 23ee95a:	fba7 7101 	umull	r7, r1, r7, r1
 23ee95e:	4471      	add	r1, lr
 23ee960:	0449      	lsls	r1, r1, #17
 23ee962:	ea41 31d7 	orr.w	r1, r1, r7, lsr #15
 23ee966:	047f      	lsls	r7, r7, #17
 23ee968:	193f      	adds	r7, r7, r4
 23ee96a:	eb46 0601 	adc.w	r6, r6, r1
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4) << 35);
 23ee96e:	f9b5 1034 	ldrsh.w	r1, [r5, #52]	; 0x34
    return 0; // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
 23ee972:	f5c0 1480 	rsb	r4, r0, #1048576	; 0x100000
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4) << 35);
 23ee976:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
  p = (((p << 31) - var2) * 3125) / var1;
 23ee97a:	f640 4135 	movw	r1, #3125	; 0xc35
 23ee97e:	f004 4000 	and.w	r0, r4, #2147483648	; 0x80000000
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4) << 35);
 23ee982:	eb1c 0707 	adds.w	r7, ip, r7
  p = (((p << 31) - var2) * 3125) / var1;
 23ee986:	ea40 0054 	orr.w	r0, r0, r4, lsr #1
 23ee98a:	07e4      	lsls	r4, r4, #31
 23ee98c:	1be4      	subs	r4, r4, r7
 23ee98e:	eb60 0606 	sbc.w	r6, r0, r6
 23ee992:	fba4 0401 	umull	r0, r4, r4, r1
 23ee996:	fb01 4106 	mla	r1, r1, r6, r4
 23ee99a:	f7f5 fb33 	bl	23e4004 <__aeabi_ldivmod>
 23ee99e:	4686      	mov	lr, r0
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23ee9a0:	f9b5 203e 	ldrsh.w	r2, [r5, #62]	; 0x3e
 23ee9a4:	ea4f 3c61 	mov.w	ip, r1, asr #13
 23ee9a8:	fb02 f70c 	mul.w	r7, r2, ip
 23ee9ac:	0b43      	lsrs	r3, r0, #13
 23ee9ae:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
 23ee9b2:	17d4      	asrs	r4, r2, #31
 23ee9b4:	fb03 7704 	mla	r7, r3, r4, r7
 23ee9b8:	fba2 2403 	umull	r2, r4, r2, r3
 23ee9bc:	443c      	add	r4, r7
 23ee9be:	fb02 f70c 	mul.w	r7, r2, ip
 23ee9c2:	fb03 7704 	mla	r7, r3, r4, r7
 23ee9c6:	fba2 2303 	umull	r2, r3, r2, r3
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 23ee9ca:	f9b5 603c 	ldrsh.w	r6, [r5, #60]	; 0x3c
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23ee9ce:	441f      	add	r7, r3
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 23ee9d0:	fb06 f401 	mul.w	r4, r6, r1
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23ee9d4:	0e53      	lsrs	r3, r2, #25
 23ee9d6:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7

  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7) << 4);
 23ee9da:	181b      	adds	r3, r3, r0
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 23ee9dc:	ea4f 72e6 	mov.w	r2, r6, asr #31
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7) << 4);
 23ee9e0:	eb41 6767 	adc.w	r7, r1, r7, asr #25
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 23ee9e4:	fb02 4100 	mla	r1, r2, r0, r4
 23ee9e8:	fba6 060e 	umull	r0, r6, r6, lr
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7) << 4);
 23ee9ec:	f9b5 403a 	ldrsh.w	r4, [r5, #58]	; 0x3a
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
 23ee9f0:	4431      	add	r1, r6
 23ee9f2:	0cc0      	lsrs	r0, r0, #19
 23ee9f4:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7) << 4);
 23ee9f8:	1818      	adds	r0, r3, r0
 23ee9fa:	ea4f 75e4 	mov.w	r5, r4, asr #31
 23ee9fe:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
 23eea02:	0a00      	lsrs	r0, r0, #8
 23eea04:	012d      	lsls	r5, r5, #4
 23eea06:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 23eea0a:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
 23eea0e:	0124      	lsls	r4, r4, #4
 23eea10:	1820      	adds	r0, r4, r0
  return (float)p / 256;
 23eea12:	eb45 2121 	adc.w	r1, r5, r1, asr #8
 23eea16:	f7f5 fab7 	bl	23e3f88 <__aeabi_l2f>
 23eea1a:	ed9f 0a07 	vldr	s0, [pc, #28]	; 23eea38 <_ZN15Adafruit_BME28012readPressureEv+0x194>
 23eea1e:	ee07 0a90 	vmov	s15, r0
 23eea22:	ee27 0a80 	vmul.f32	s0, s15, s0
}
 23eea26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NAN;
 23eea2a:	ed9f 0a04 	vldr	s0, [pc, #16]	; 23eea3c <_ZN15Adafruit_BME28012readPressureEv+0x198>
 23eea2e:	e7fa      	b.n	23eea26 <_ZN15Adafruit_BME28012readPressureEv+0x182>
    return 0; // avoid exception caused by division by zero
 23eea30:	ed9f 0a03 	vldr	s0, [pc, #12]	; 23eea40 <_ZN15Adafruit_BME28012readPressureEv+0x19c>
 23eea34:	e7f7      	b.n	23eea26 <_ZN15Adafruit_BME28012readPressureEv+0x182>
 23eea36:	bf00      	nop
 23eea38:	3b800000 	.word	0x3b800000
 23eea3c:	7fc00000 	.word	0x7fc00000
 23eea40:	00000000 	.word	0x00000000

023eea44 <_ZN15Adafruit_BME28012readHumidityEv>:

/*!
 *  @brief  Returns the humidity from the sensor
 *  @returns the humidity value read from the device
 */
float Adafruit_BME280::readHumidity(void) {
 23eea44:	b538      	push	{r3, r4, r5, lr}
 23eea46:	4604      	mov	r4, r0
  readTemperature(); // must be done first to get t_fine
 23eea48:	f7ff fefa 	bl	23ee840 <_ZN15Adafruit_BME28015readTemperatureEv>

  int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
 23eea4c:	21fd      	movs	r1, #253	; 0xfd
 23eea4e:	4620      	mov	r0, r4
 23eea50:	f7ff fd48 	bl	23ee4e4 <_ZN15Adafruit_BME2806read16Eh>
  if (adc_H == 0x8000) // value in case humidity measurement was disabled
 23eea54:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 23eea58:	d038      	beq.n	23eeacc <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    return NAN;

  int32_t v_x1_u32r;

  v_x1_u32r = (t_fine - ((int32_t)76800));
 23eea5a:	69e1      	ldr	r1, [r4, #28]

  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                  (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) +
 23eea5c:	f9b4 2048 	ldrsh.w	r2, [r4, #72]	; 0x48
  v_x1_u32r = (t_fine - ((int32_t)76800));
 23eea60:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
 23eea64:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
 23eea68:	0509      	lsls	r1, r1, #20
 23eea6a:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
 23eea6e:	fb05 3312 	mls	r3, r5, r2, r3
                  (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) +
 23eea72:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
                 ((int32_t)16384)) >>
 23eea76:	13da      	asrs	r2, r3, #15
                15) *
               (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                    (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) +
 23eea78:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
               (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
 23eea7c:	f994 104a 	ldrsb.w	r1, [r4, #74]	; 0x4a
                    (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) +
 23eea80:	436b      	muls	r3, r5
               (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
 23eea82:	4369      	muls	r1, r5
                    (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) +
 23eea84:	12db      	asrs	r3, r3, #11
               (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
 23eea86:	1289      	asrs	r1, r1, #10
                    (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) +
 23eea88:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
               (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
 23eea8c:	434b      	muls	r3, r1
                     ((int32_t)32768))) >>
                   10) +
                  ((int32_t)2097152)) *
                     ((int32_t)_bme280_calib.dig_H2) +
 23eea8e:	f9b4 1042 	ldrsh.w	r1, [r4, #66]	; 0x42
                     ((int32_t)32768))) >>
 23eea92:	129b      	asrs	r3, r3, #10
                   10) +
 23eea94:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                  ((int32_t)2097152)) *
 23eea98:	434b      	muls	r3, r1
                     ((int32_t)_bme280_calib.dig_H2) +
 23eea9a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
                 8192) >>
 23eea9e:	139b      	asrs	r3, r3, #14
  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
 23eeaa0:	4353      	muls	r3, r2
                14));

  v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 23eeaa2:	13da      	asrs	r2, r3, #15
 23eeaa4:	4352      	muls	r2, r2
                             ((int32_t)_bme280_calib.dig_H1)) >>
 23eeaa6:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
  v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 23eeaaa:	11d2      	asrs	r2, r2, #7
 23eeaac:	434a      	muls	r2, r1
 23eeaae:	eba3 1322 	sub.w	r3, r3, r2, asr #4
                            4));

  v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 23eeab2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 23eeab6:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 23eeaba:	bfa8      	it	ge
 23eeabc:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
  float h = (v_x1_u32r >> 12);
 23eeac0:	131b      	asrs	r3, r3, #12
 23eeac2:	ee00 3a10 	vmov	s0, r3
  return h / 1024.0;
 23eeac6:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
 23eeaca:	bd38      	pop	{r3, r4, r5, pc}
    return NAN;
 23eeacc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 23eead4 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
 23eead0:	e7fb      	b.n	23eeaca <_ZN15Adafruit_BME28012readHumidityEv+0x86>
 23eead2:	bf00      	nop
 23eead4:	7fc00000 	.word	0x7fc00000

023eead8 <_ZN24Adafruit_BMP280_PressureD1Ev>:
  int _sensorID = 280;
  Adafruit_BMP280 *_theBMP280 = NULL;
};

/** Adafruit Unified Sensor interface for pressure component of BMP280 */
class Adafruit_BMP280_Pressure : public Adafruit_Sensor {
 23eead8:	4770      	bx	lr

023eeada <_ZN20Adafruit_BMP280_TempD1Ev>:
class Adafruit_BMP280_Temp : public Adafruit_Sensor {
 23eeada:	4770      	bx	lr

023eeadc <_ZN20Adafruit_BMP280_TempD0Ev>:
 23eeadc:	b510      	push	{r4, lr}
 23eeade:	4604      	mov	r4, r0
 23eeae0:	2110      	movs	r1, #16
 23eeae2:	f7f5 fca2 	bl	23e442a <_ZdlPvj>
 23eeae6:	4620      	mov	r0, r4
 23eeae8:	bd10      	pop	{r4, pc}

023eeaea <_ZN24Adafruit_BMP280_PressureD0Ev>:
class Adafruit_BMP280_Pressure : public Adafruit_Sensor {
 23eeaea:	b510      	push	{r4, lr}
 23eeaec:	4604      	mov	r4, r0
 23eeaee:	2110      	movs	r1, #16
 23eeaf0:	f7f5 fc9b 	bl	23e442a <_ZdlPvj>
 23eeaf4:	4620      	mov	r0, r4
 23eeaf6:	bd10      	pop	{r4, pc}

023eeaf8 <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data for the BMP280's temperature sensor
*/
/**************************************************************************/
void Adafruit_BMP280_Temp::getSensor(sensor_t *sensor) {
 23eeaf8:	b538      	push	{r3, r4, r5, lr}
 23eeafa:	460c      	mov	r4, r1
 23eeafc:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 23eeafe:	2220      	movs	r2, #32
 23eeb00:	2100      	movs	r1, #0
 23eeb02:	f104 0008 	add.w	r0, r4, #8
 23eeb06:	f00d fdfa 	bl	23fc6fe <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BMP280", sizeof(sensor->name) - 1);
 23eeb0a:	220b      	movs	r2, #11
 23eeb0c:	4620      	mov	r0, r4
 23eeb0e:	4908      	ldr	r1, [pc, #32]	; (23eeb30 <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t+0x38>)
 23eeb10:	f00d fea3 	bl	23fc85a <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
 23eeb14:	2301      	movs	r3, #1
 23eeb16:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
 23eeb18:	68ab      	ldr	r3, [r5, #8]
 23eeb1a:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 23eeb1c:	230d      	movs	r3, #13
 23eeb1e:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->min_value = -40.0; /* Temperature range -40 ~ +85 C  */
 23eeb20:	4b04      	ldr	r3, [pc, #16]	; (23eeb34 <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t+0x3c>)
 23eeb22:	61e3      	str	r3, [r4, #28]
  sensor->max_value = +85.0;
 23eeb24:	4b04      	ldr	r3, [pc, #16]	; (23eeb38 <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t+0x40>)
 23eeb26:	61a3      	str	r3, [r4, #24]
  sensor->resolution = 0.01; /*  0.01 C */
 23eeb28:	4b04      	ldr	r3, [pc, #16]	; (23eeb3c <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t+0x44>)
 23eeb2a:	6223      	str	r3, [r4, #32]
}
 23eeb2c:	bd38      	pop	{r3, r4, r5, pc}
 23eeb2e:	bf00      	nop
 23eeb30:	023fcfaa 	.word	0x023fcfaa
 23eeb34:	c2200000 	.word	0xc2200000
 23eeb38:	42aa0000 	.word	0x42aa0000
 23eeb3c:	3c23d70a 	.word	0x3c23d70a

023eeb40 <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data for the BMP280's pressure sensor
*/
/**************************************************************************/
void Adafruit_BMP280_Pressure::getSensor(sensor_t *sensor) {
 23eeb40:	b538      	push	{r3, r4, r5, lr}
 23eeb42:	460c      	mov	r4, r1
 23eeb44:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 23eeb46:	2220      	movs	r2, #32
 23eeb48:	2100      	movs	r1, #0
 23eeb4a:	f104 0008 	add.w	r0, r4, #8
 23eeb4e:	f00d fdd6 	bl	23fc6fe <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BMP280", sizeof(sensor->name) - 1);
 23eeb52:	220b      	movs	r2, #11
 23eeb54:	4620      	mov	r0, r4
 23eeb56:	4908      	ldr	r1, [pc, #32]	; (23eeb78 <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t+0x38>)
 23eeb58:	f00d fe7f 	bl	23fc85a <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
 23eeb5c:	2301      	movs	r3, #1
 23eeb5e:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
 23eeb60:	68ab      	ldr	r3, [r5, #8]
 23eeb62:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_PRESSURE;
 23eeb64:	2306      	movs	r3, #6
 23eeb66:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->min_value = 300.0; /* 300 ~ 1100 hPa  */
 23eeb68:	4b04      	ldr	r3, [pc, #16]	; (23eeb7c <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t+0x3c>)
 23eeb6a:	61e3      	str	r3, [r4, #28]
  sensor->max_value = 1100.0;
 23eeb6c:	4b04      	ldr	r3, [pc, #16]	; (23eeb80 <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t+0x40>)
 23eeb6e:	61a3      	str	r3, [r4, #24]
  sensor->resolution = 0.012; /* 0.12 hPa relative */
 23eeb70:	4b04      	ldr	r3, [pc, #16]	; (23eeb84 <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t+0x44>)
 23eeb72:	6223      	str	r3, [r4, #32]
}
 23eeb74:	bd38      	pop	{r3, r4, r5, pc}
 23eeb76:	bf00      	nop
 23eeb78:	023fcfaa 	.word	0x023fcfaa
 23eeb7c:	43960000 	.word	0x43960000
 23eeb80:	44898000 	.word	0x44898000
 23eeb84:	3c449ba6 	.word	0x3c449ba6

023eeb88 <_ZN15Adafruit_BMP280C1EP7TwoWire>:
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1) {
 23eeb88:	2300      	movs	r3, #0
Adafruit_BMP280::Adafruit_BMP280(TwoWire *theWire)
 23eeb8a:	b510      	push	{r4, lr}
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1) {
 23eeb8c:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23eeb90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
Adafruit_BMP280::Adafruit_BMP280(TwoWire *theWire)
 23eeb94:	4604      	mov	r4, r0
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1) {
 23eeb96:	61c3      	str	r3, [r0, #28]
  _wire = theWire;
 23eeb98:	6001      	str	r1, [r0, #0]
  temp_sensor = new Adafruit_BMP280_Temp(this);
 23eeb9a:	2010      	movs	r0, #16
 23eeb9c:	f7f5 fc41 	bl	23e4422 <_Znwj>
 23eeba0:	b128      	cbz	r0, 23eebae <_ZN15Adafruit_BMP280C1EP7TwoWire+0x26>
  Adafruit_BMP280_Temp(Adafruit_BMP280 *parent) { _theBMP280 = parent; }
 23eeba2:	4b09      	ldr	r3, [pc, #36]	; (23eebc8 <_ZN15Adafruit_BMP280C1EP7TwoWire+0x40>)
 23eeba4:	6003      	str	r3, [r0, #0]
 23eeba6:	f44f 738c 	mov.w	r3, #280	; 0x118
 23eebaa:	e9c0 3402 	strd	r3, r4, [r0, #8]
 23eebae:	60a0      	str	r0, [r4, #8]
  pressure_sensor = new Adafruit_BMP280_Pressure(this);
 23eebb0:	2010      	movs	r0, #16
 23eebb2:	f7f5 fc36 	bl	23e4422 <_Znwj>
 23eebb6:	b120      	cbz	r0, 23eebc2 <_ZN15Adafruit_BMP280C1EP7TwoWire+0x3a>
public:
  /** @brief Create an Adafruit_Sensor compatible object for the pressure sensor
      @param parent A pointer to the BMP280 class */
  Adafruit_BMP280_Pressure(Adafruit_BMP280 *parent) { _theBMP280 = parent; }
 23eebb8:	4b04      	ldr	r3, [pc, #16]	; (23eebcc <_ZN15Adafruit_BMP280C1EP7TwoWire+0x44>)
 23eebba:	6003      	str	r3, [r0, #0]
 23eebbc:	2300      	movs	r3, #0
 23eebbe:	e9c0 3402 	strd	r3, r4, [r0, #8]
 23eebc2:	60e0      	str	r0, [r4, #12]
}
 23eebc4:	4620      	mov	r0, r4
 23eebc6:	bd10      	pop	{r4, pc}
 23eebc8:	023fe9ac 	.word	0x023fe9ac
 23eebcc:	023fe9c8 	.word	0x023fe9c8

023eebd0 <_ZN15Adafruit_BMP2807spixferEh>:
uint8_t Adafruit_BMP280::spixfer(uint8_t x) {
 23eebd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (_sck == -1)
 23eebd4:	f990 301f 	ldrsb.w	r3, [r0, #31]
uint8_t Adafruit_BMP280::spixfer(uint8_t x) {
 23eebd8:	4604      	mov	r4, r0
  if (_sck == -1)
 23eebda:	3301      	adds	r3, #1
uint8_t Adafruit_BMP280::spixfer(uint8_t x) {
 23eebdc:	460f      	mov	r7, r1
  if (_sck == -1)
 23eebde:	d104      	bne.n	23eebea <_ZN15Adafruit_BMP2807spixferEh+0x1a>
}
 23eebe0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return _spi->transfer(x);
 23eebe4:	6840      	ldr	r0, [r0, #4]
 23eebe6:	f00a b8bf 	b.w	23f8d68 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
 23eebea:	2500      	movs	r5, #0
  for (int i = 7; i >= 0; i--) {
 23eebec:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1 << i));
 23eebee:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
 23eebf2:	f994 001f 	ldrsb.w	r0, [r4, #31]
 23eebf6:	2100      	movs	r1, #0
 23eebf8:	b280      	uxth	r0, r0
 23eebfa:	f00a ff30 	bl	23f9a5e <digitalWrite>
    digitalWrite(_mosi, x & (1 << i));
 23eebfe:	f994 001d 	ldrsb.w	r0, [r4, #29]
 23eec02:	fa08 f106 	lsl.w	r1, r8, r6
 23eec06:	4039      	ands	r1, r7
 23eec08:	b280      	uxth	r0, r0
 23eec0a:	f00a ff28 	bl	23f9a5e <digitalWrite>
    digitalWrite(_sck, HIGH);
 23eec0e:	f994 001f 	ldrsb.w	r0, [r4, #31]
 23eec12:	2101      	movs	r1, #1
 23eec14:	b280      	uxth	r0, r0
 23eec16:	f00a ff22 	bl	23f9a5e <digitalWrite>
    if (digitalRead(_miso))
 23eec1a:	f994 001e 	ldrsb.w	r0, [r4, #30]
    reply <<= 1;
 23eec1e:	006d      	lsls	r5, r5, #1
    if (digitalRead(_miso))
 23eec20:	b280      	uxth	r0, r0
    reply <<= 1;
 23eec22:	b2ed      	uxtb	r5, r5
    if (digitalRead(_miso))
 23eec24:	f00a ff34 	bl	23f9a90 <digitalRead>
 23eec28:	b108      	cbz	r0, 23eec2e <_ZN15Adafruit_BMP2807spixferEh+0x5e>
      reply |= 1;
 23eec2a:	f045 0501 	orr.w	r5, r5, #1
  for (int i = 7; i >= 0; i--) {
 23eec2e:	3e01      	subs	r6, #1
 23eec30:	d2df      	bcs.n	23eebf2 <_ZN15Adafruit_BMP2807spixferEh+0x22>
}
 23eec32:	4628      	mov	r0, r5
 23eec34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023eec38 <_ZN15Adafruit_BMP2806write8Ehh>:
void Adafruit_BMP280::write8(byte reg, byte value) {
 23eec38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (_cs == -1) {
 23eec3a:	f990 301c 	ldrsb.w	r3, [r0, #28]
void Adafruit_BMP280::write8(byte reg, byte value) {
 23eec3e:	4604      	mov	r4, r0
  if (_cs == -1) {
 23eec40:	3301      	adds	r3, #1
void Adafruit_BMP280::write8(byte reg, byte value) {
 23eec42:	460e      	mov	r6, r1
 23eec44:	4615      	mov	r5, r2
  if (_cs == -1) {
 23eec46:	d113      	bne.n	23eec70 <_ZN15Adafruit_BMP2806write8Ehh+0x38>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23eec48:	7c01      	ldrb	r1, [r0, #16]
 23eec4a:	6800      	ldr	r0, [r0, #0]
 23eec4c:	f009 fada 	bl	23f8204 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23eec50:	6820      	ldr	r0, [r4, #0]
 23eec52:	4631      	mov	r1, r6
 23eec54:	6803      	ldr	r3, [r0, #0]
 23eec56:	689b      	ldr	r3, [r3, #8]
 23eec58:	4798      	blx	r3
    _wire->write((uint8_t)value);
 23eec5a:	6820      	ldr	r0, [r4, #0]
 23eec5c:	4629      	mov	r1, r5
 23eec5e:	6803      	ldr	r3, [r0, #0]
 23eec60:	689b      	ldr	r3, [r3, #8]
 23eec62:	4798      	blx	r3
    _wire->endTransmission();
 23eec64:	6820      	ldr	r0, [r4, #0]
}
 23eec66:	b004      	add	sp, #16
 23eec68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _wire->endTransmission();
 23eec6c:	f009 bad5 	b.w	23f821a <_ZN7TwoWire15endTransmissionEv>
    if (_sck == -1)
 23eec70:	f990 301f 	ldrsb.w	r3, [r0, #31]
 23eec74:	3301      	adds	r3, #1
 23eec76:	d10d      	bne.n	23eec94 <_ZN15Adafruit_BMP2806write8Ehh+0x5c>
 23eec78:	4b17      	ldr	r3, [pc, #92]	; (23eecd8 <_ZN15Adafruit_BMP2806write8Ehh+0xa0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23eec7a:	4669      	mov	r1, sp
 23eec7c:	9300      	str	r3, [sp, #0]
 23eec7e:	2300      	movs	r3, #0
 23eec80:	f88d 3004 	strb.w	r3, [sp, #4]
 23eec84:	4b15      	ldr	r3, [pc, #84]	; (23eecdc <_ZN15Adafruit_BMP2806write8Ehh+0xa4>)
 23eec86:	6840      	ldr	r0, [r0, #4]
 23eec88:	9302      	str	r3, [sp, #8]
 23eec8a:	2301      	movs	r3, #1
 23eec8c:	f8ad 300c 	strh.w	r3, [sp, #12]
 23eec90:	f009 fffc 	bl	23f8c8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23eec94:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23eec98:	2100      	movs	r1, #0
 23eec9a:	b280      	uxth	r0, r0
 23eec9c:	f00a fedf 	bl	23f9a5e <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
 23eeca0:	f006 017f 	and.w	r1, r6, #127	; 0x7f
 23eeca4:	4620      	mov	r0, r4
 23eeca6:	f7ff ff93 	bl	23eebd0 <_ZN15Adafruit_BMP2807spixferEh>
    spixfer(value);
 23eecaa:	4629      	mov	r1, r5
 23eecac:	4620      	mov	r0, r4
 23eecae:	f7ff ff8f 	bl	23eebd0 <_ZN15Adafruit_BMP2807spixferEh>
    digitalWrite(_cs, HIGH);
 23eecb2:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23eecb6:	2101      	movs	r1, #1
 23eecb8:	b280      	uxth	r0, r0
 23eecba:	f00a fed0 	bl	23f9a5e <digitalWrite>
    if (_sck == -1)
 23eecbe:	f994 301f 	ldrsb.w	r3, [r4, #31]
 23eecc2:	3301      	adds	r3, #1
 23eecc4:	d105      	bne.n	23eecd2 <_ZN15Adafruit_BMP2806write8Ehh+0x9a>
      _spi->endTransaction(); // release the SPI bus
 23eecc6:	6860      	ldr	r0, [r4, #4]
}
 23eecc8:	b004      	add	sp, #16
 23eecca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      _spi->endTransaction(); // release the SPI bus
 23eecce:	f009 bfc3 	b.w	23f8c58 <_ZN8SPIClass14endTransactionEv>
}
 23eecd2:	b004      	add	sp, #16
 23eecd4:	bd70      	pop	{r4, r5, r6, pc}
 23eecd6:	bf00      	nop
 23eecd8:	023fe76c 	.word	0x023fe76c
 23eecdc:	0007a120 	.word	0x0007a120

023eece0 <_ZN15Adafruit_BMP28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_NS_13sensor_filterENS_16standby_durationE>:
                                  standby_duration duration) {
 23eece0:	b570      	push	{r4, r5, r6, lr}
 23eece2:	4604      	mov	r4, r0
  _measReg.osrs_t = tempSampling;
 23eece4:	00db      	lsls	r3, r3, #3
 23eece6:	f002 0207 	and.w	r2, r2, #7
 23eecea:	f003 0338 	and.w	r3, r3, #56	; 0x38
                                  standby_duration duration) {
 23eecee:	f89d 5010 	ldrb.w	r5, [sp, #16]
  _measReg.osrs_t = tempSampling;
 23eecf2:	4313      	orrs	r3, r2
                                  standby_duration duration) {
 23eecf4:	f89d 6014 	ldrb.w	r6, [sp, #20]
  _configReg.filter = filter;
 23eecf8:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
  _measReg.osrs_t = tempSampling;
 23eecfc:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 23eed00:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  _configReg.filter = filter;
 23eed04:	f005 0307 	and.w	r3, r5, #7
  _configReg.t_sb = duration;
 23eed08:	f006 0107 	and.w	r1, r6, #7
  _configReg.filter = filter;
 23eed0c:	f363 02c5 	bfi	r2, r3, #3, #3
  _configReg.t_sb = duration;
 23eed10:	f361 0202 	bfi	r2, r1, #0, #3
    /** Unused - don't set */
    unsigned int none : 1;
    /** Enables 3-wire SPI */
    unsigned int spi3w_en : 1;
    /** Used to retrieve the assembled config register's byte value. */
    unsigned int get() { return (t_sb << 5) | (filter << 2) | spi3w_en; }
 23eed14:	009b      	lsls	r3, r3, #2
 23eed16:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 23eed1a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 23eed1e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
  write8(BMP280_REGISTER_CONFIG, _configReg.get());
 23eed22:	431a      	orrs	r2, r3
 23eed24:	21f5      	movs	r1, #245	; 0xf5
 23eed26:	f7ff ff87 	bl	23eec38 <_ZN15Adafruit_BMP2806write8Ehh>
    /** Pressure oversampling. */
    unsigned int osrs_p : 3;
    /** Device mode */
    unsigned int mode : 2;
    /** Used to retrieve the assembled ctrl_meas register's byte value. */
    unsigned int get() { return (osrs_t << 5) | (osrs_p << 2) | mode; }
 23eed2a:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
  write8(BMP280_REGISTER_CONTROL, _measReg.get());
 23eed2e:	4620      	mov	r0, r4
}
 23eed30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23eed34:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 23eed38:	f002 0107 	and.w	r1, r2, #7
 23eed3c:	009b      	lsls	r3, r3, #2
 23eed3e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
  write8(BMP280_REGISTER_CONTROL, _measReg.get());
 23eed42:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
 23eed46:	21f4      	movs	r1, #244	; 0xf4
 23eed48:	f7ff bf76 	b.w	23eec38 <_ZN15Adafruit_BMP2806write8Ehh>

023eed4c <_ZN15Adafruit_BMP2805read8Eh>:
uint8_t Adafruit_BMP280::read8(byte reg) {
 23eed4c:	b530      	push	{r4, r5, lr}
  if (_cs == -1) {
 23eed4e:	f990 301c 	ldrsb.w	r3, [r0, #28]
uint8_t Adafruit_BMP280::read8(byte reg) {
 23eed52:	4604      	mov	r4, r0
  if (_cs == -1) {
 23eed54:	3301      	adds	r3, #1
uint8_t Adafruit_BMP280::read8(byte reg) {
 23eed56:	460d      	mov	r5, r1
 23eed58:	b085      	sub	sp, #20
  if (_cs == -1) {
 23eed5a:	d118      	bne.n	23eed8e <_ZN15Adafruit_BMP2805read8Eh+0x42>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23eed5c:	7c01      	ldrb	r1, [r0, #16]
 23eed5e:	6800      	ldr	r0, [r0, #0]
 23eed60:	f009 fa50 	bl	23f8204 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23eed64:	6820      	ldr	r0, [r4, #0]
 23eed66:	4629      	mov	r1, r5
 23eed68:	6803      	ldr	r3, [r0, #0]
 23eed6a:	689b      	ldr	r3, [r3, #8]
 23eed6c:	4798      	blx	r3
    _wire->endTransmission();
 23eed6e:	6820      	ldr	r0, [r4, #0]
 23eed70:	f009 fa53 	bl	23f821a <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)1);
 23eed74:	2201      	movs	r2, #1
 23eed76:	7c21      	ldrb	r1, [r4, #16]
 23eed78:	6820      	ldr	r0, [r4, #0]
 23eed7a:	f009 fa40 	bl	23f81fe <_ZN7TwoWire11requestFromEhj>
    value = _wire->read();
 23eed7e:	6820      	ldr	r0, [r4, #0]
 23eed80:	6803      	ldr	r3, [r0, #0]
 23eed82:	695b      	ldr	r3, [r3, #20]
 23eed84:	4798      	blx	r3
 23eed86:	b2c5      	uxtb	r5, r0
}
 23eed88:	4628      	mov	r0, r5
 23eed8a:	b005      	add	sp, #20
 23eed8c:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23eed8e:	f990 301f 	ldrsb.w	r3, [r0, #31]
 23eed92:	3301      	adds	r3, #1
 23eed94:	d10d      	bne.n	23eedb2 <_ZN15Adafruit_BMP2805read8Eh+0x66>
 23eed96:	4b16      	ldr	r3, [pc, #88]	; (23eedf0 <_ZN15Adafruit_BMP2805read8Eh+0xa4>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23eed98:	4669      	mov	r1, sp
 23eed9a:	9300      	str	r3, [sp, #0]
 23eed9c:	2300      	movs	r3, #0
 23eed9e:	f88d 3004 	strb.w	r3, [sp, #4]
 23eeda2:	4b14      	ldr	r3, [pc, #80]	; (23eedf4 <_ZN15Adafruit_BMP2805read8Eh+0xa8>)
 23eeda4:	6840      	ldr	r0, [r0, #4]
 23eeda6:	9302      	str	r3, [sp, #8]
 23eeda8:	2301      	movs	r3, #1
 23eedaa:	f8ad 300c 	strh.w	r3, [sp, #12]
 23eedae:	f009 ff6d 	bl	23f8c8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23eedb2:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23eedb6:	2100      	movs	r1, #0
 23eedb8:	b280      	uxth	r0, r0
 23eedba:	f00a fe50 	bl	23f9a5e <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23eedbe:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23eedc2:	4620      	mov	r0, r4
 23eedc4:	f7ff ff04 	bl	23eebd0 <_ZN15Adafruit_BMP2807spixferEh>
    value = spixfer(0);
 23eedc8:	2100      	movs	r1, #0
 23eedca:	4620      	mov	r0, r4
 23eedcc:	f7ff ff00 	bl	23eebd0 <_ZN15Adafruit_BMP2807spixferEh>
 23eedd0:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
 23eedd2:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23eedd6:	2101      	movs	r1, #1
 23eedd8:	b280      	uxth	r0, r0
 23eedda:	f00a fe40 	bl	23f9a5e <digitalWrite>
    if (_sck == -1)
 23eedde:	f994 301f 	ldrsb.w	r3, [r4, #31]
 23eede2:	3301      	adds	r3, #1
 23eede4:	d1d0      	bne.n	23eed88 <_ZN15Adafruit_BMP2805read8Eh+0x3c>
      _spi->endTransaction(); // release the SPI bus
 23eede6:	6860      	ldr	r0, [r4, #4]
 23eede8:	f009 ff36 	bl	23f8c58 <_ZN8SPIClass14endTransactionEv>
 23eedec:	e7cc      	b.n	23eed88 <_ZN15Adafruit_BMP2805read8Eh+0x3c>
 23eedee:	bf00      	nop
 23eedf0:	023fe76c 	.word	0x023fe76c
 23eedf4:	0007a120 	.word	0x0007a120

023eedf8 <_ZN15Adafruit_BMP2806read16Eh>:
uint16_t Adafruit_BMP280::read16(byte reg) {
 23eedf8:	b530      	push	{r4, r5, lr}
  if (_cs == -1) {
 23eedfa:	f990 301c 	ldrsb.w	r3, [r0, #28]
uint16_t Adafruit_BMP280::read16(byte reg) {
 23eedfe:	4604      	mov	r4, r0
  if (_cs == -1) {
 23eee00:	3301      	adds	r3, #1
uint16_t Adafruit_BMP280::read16(byte reg) {
 23eee02:	460d      	mov	r5, r1
 23eee04:	b085      	sub	sp, #20
  if (_cs == -1) {
 23eee06:	d11f      	bne.n	23eee48 <_ZN15Adafruit_BMP2806read16Eh+0x50>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23eee08:	7c01      	ldrb	r1, [r0, #16]
 23eee0a:	6800      	ldr	r0, [r0, #0]
 23eee0c:	f009 f9fa 	bl	23f8204 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23eee10:	6820      	ldr	r0, [r4, #0]
 23eee12:	4629      	mov	r1, r5
 23eee14:	6803      	ldr	r3, [r0, #0]
 23eee16:	689b      	ldr	r3, [r3, #8]
 23eee18:	4798      	blx	r3
    _wire->endTransmission();
 23eee1a:	6820      	ldr	r0, [r4, #0]
 23eee1c:	f009 f9fd 	bl	23f821a <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)2);
 23eee20:	2202      	movs	r2, #2
 23eee22:	7c21      	ldrb	r1, [r4, #16]
 23eee24:	6820      	ldr	r0, [r4, #0]
 23eee26:	f009 f9ea 	bl	23f81fe <_ZN7TwoWire11requestFromEhj>
    value = (_wire->read() << 8) | _wire->read();
 23eee2a:	6820      	ldr	r0, [r4, #0]
 23eee2c:	6803      	ldr	r3, [r0, #0]
 23eee2e:	695b      	ldr	r3, [r3, #20]
 23eee30:	4798      	blx	r3
 23eee32:	4605      	mov	r5, r0
 23eee34:	6820      	ldr	r0, [r4, #0]
 23eee36:	6803      	ldr	r3, [r0, #0]
 23eee38:	695b      	ldr	r3, [r3, #20]
 23eee3a:	4798      	blx	r3
 23eee3c:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 23eee40:	b285      	uxth	r5, r0
}
 23eee42:	4628      	mov	r0, r5
 23eee44:	b005      	add	sp, #20
 23eee46:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23eee48:	f990 301f 	ldrsb.w	r3, [r0, #31]
 23eee4c:	3301      	adds	r3, #1
 23eee4e:	d10d      	bne.n	23eee6c <_ZN15Adafruit_BMP2806read16Eh+0x74>
 23eee50:	4b19      	ldr	r3, [pc, #100]	; (23eeeb8 <_ZN15Adafruit_BMP2806read16Eh+0xc0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23eee52:	4669      	mov	r1, sp
 23eee54:	9300      	str	r3, [sp, #0]
 23eee56:	2300      	movs	r3, #0
 23eee58:	f88d 3004 	strb.w	r3, [sp, #4]
 23eee5c:	4b17      	ldr	r3, [pc, #92]	; (23eeebc <_ZN15Adafruit_BMP2806read16Eh+0xc4>)
 23eee5e:	6840      	ldr	r0, [r0, #4]
 23eee60:	9302      	str	r3, [sp, #8]
 23eee62:	2301      	movs	r3, #1
 23eee64:	f8ad 300c 	strh.w	r3, [sp, #12]
 23eee68:	f009 ff10 	bl	23f8c8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23eee6c:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23eee70:	2100      	movs	r1, #0
 23eee72:	b280      	uxth	r0, r0
 23eee74:	f00a fdf3 	bl	23f9a5e <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23eee78:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23eee7c:	4620      	mov	r0, r4
 23eee7e:	f7ff fea7 	bl	23eebd0 <_ZN15Adafruit_BMP2807spixferEh>
    value = (spixfer(0) << 8) | spixfer(0);
 23eee82:	2100      	movs	r1, #0
 23eee84:	4620      	mov	r0, r4
 23eee86:	f7ff fea3 	bl	23eebd0 <_ZN15Adafruit_BMP2807spixferEh>
 23eee8a:	2100      	movs	r1, #0
 23eee8c:	4605      	mov	r5, r0
 23eee8e:	4620      	mov	r0, r4
 23eee90:	f7ff fe9e 	bl	23eebd0 <_ZN15Adafruit_BMP2807spixferEh>
 23eee94:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 23eee98:	b285      	uxth	r5, r0
    digitalWrite(_cs, HIGH);
 23eee9a:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23eee9e:	2101      	movs	r1, #1
 23eeea0:	b280      	uxth	r0, r0
 23eeea2:	f00a fddc 	bl	23f9a5e <digitalWrite>
    if (_sck == -1)
 23eeea6:	f994 301f 	ldrsb.w	r3, [r4, #31]
 23eeeaa:	3301      	adds	r3, #1
 23eeeac:	d1c9      	bne.n	23eee42 <_ZN15Adafruit_BMP2806read16Eh+0x4a>
      _spi->endTransaction(); // release the SPI bus
 23eeeae:	6860      	ldr	r0, [r4, #4]
 23eeeb0:	f009 fed2 	bl	23f8c58 <_ZN8SPIClass14endTransactionEv>
 23eeeb4:	e7c5      	b.n	23eee42 <_ZN15Adafruit_BMP2806read16Eh+0x4a>
 23eeeb6:	bf00      	nop
 23eeeb8:	023fe76c 	.word	0x023fe76c
 23eeebc:	0007a120 	.word	0x0007a120

023eeec0 <_ZN15Adafruit_BMP2809read16_LEEh>:
uint16_t Adafruit_BMP280::read16_LE(byte reg) {
 23eeec0:	b508      	push	{r3, lr}
  uint16_t temp = read16(reg);
 23eeec2:	f7ff ff99 	bl	23eedf8 <_ZN15Adafruit_BMP2806read16Eh>
  return (temp >> 8) | (temp << 8);
 23eeec6:	ba40      	rev16	r0, r0
}
 23eeec8:	b280      	uxth	r0, r0
 23eeeca:	bd08      	pop	{r3, pc}

023eeecc <_ZN15Adafruit_BMP2806read24Eh>:
uint32_t Adafruit_BMP280::read24(byte reg) {
 23eeecc:	b530      	push	{r4, r5, lr}
  if (_cs == -1) {
 23eeece:	f990 301c 	ldrsb.w	r3, [r0, #28]
uint32_t Adafruit_BMP280::read24(byte reg) {
 23eeed2:	4604      	mov	r4, r0
  if (_cs == -1) {
 23eeed4:	3301      	adds	r3, #1
uint32_t Adafruit_BMP280::read24(byte reg) {
 23eeed6:	460d      	mov	r5, r1
 23eeed8:	b085      	sub	sp, #20
  if (_cs == -1) {
 23eeeda:	d123      	bne.n	23eef24 <_ZN15Adafruit_BMP2806read24Eh+0x58>
    _wire->beginTransmission((uint8_t)_i2caddr);
 23eeedc:	7c01      	ldrb	r1, [r0, #16]
 23eeede:	6800      	ldr	r0, [r0, #0]
 23eeee0:	f009 f990 	bl	23f8204 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
 23eeee4:	6820      	ldr	r0, [r4, #0]
 23eeee6:	4629      	mov	r1, r5
 23eeee8:	6803      	ldr	r3, [r0, #0]
 23eeeea:	689b      	ldr	r3, [r3, #8]
 23eeeec:	4798      	blx	r3
    _wire->endTransmission();
 23eeeee:	6820      	ldr	r0, [r4, #0]
 23eeef0:	f009 f993 	bl	23f821a <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)3);
 23eeef4:	2203      	movs	r2, #3
 23eeef6:	7c21      	ldrb	r1, [r4, #16]
 23eeef8:	6820      	ldr	r0, [r4, #0]
 23eeefa:	f009 f980 	bl	23f81fe <_ZN7TwoWire11requestFromEhj>
    value = _wire->read();
 23eeefe:	6820      	ldr	r0, [r4, #0]
 23eef00:	6803      	ldr	r3, [r0, #0]
 23eef02:	695b      	ldr	r3, [r3, #20]
 23eef04:	4798      	blx	r3
    value <<= 8;
 23eef06:	0205      	lsls	r5, r0, #8
    value |= _wire->read();
 23eef08:	6820      	ldr	r0, [r4, #0]
 23eef0a:	6803      	ldr	r3, [r0, #0]
 23eef0c:	695b      	ldr	r3, [r3, #20]
 23eef0e:	4798      	blx	r3
 23eef10:	4328      	orrs	r0, r5
    value <<= 8;
 23eef12:	0205      	lsls	r5, r0, #8
    value |= _wire->read();
 23eef14:	6820      	ldr	r0, [r4, #0]
 23eef16:	6803      	ldr	r3, [r0, #0]
 23eef18:	695b      	ldr	r3, [r3, #20]
 23eef1a:	4798      	blx	r3
 23eef1c:	4305      	orrs	r5, r0
}
 23eef1e:	4628      	mov	r0, r5
 23eef20:	b005      	add	sp, #20
 23eef22:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
 23eef24:	f990 301f 	ldrsb.w	r3, [r0, #31]
 23eef28:	3301      	adds	r3, #1
 23eef2a:	d10d      	bne.n	23eef48 <_ZN15Adafruit_BMP2806read24Eh+0x7c>
 23eef2c:	4b1b      	ldr	r3, [pc, #108]	; (23eef9c <_ZN15Adafruit_BMP2806read24Eh+0xd0>)
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23eef2e:	4669      	mov	r1, sp
 23eef30:	9300      	str	r3, [sp, #0]
 23eef32:	2300      	movs	r3, #0
 23eef34:	f88d 3004 	strb.w	r3, [sp, #4]
 23eef38:	4b19      	ldr	r3, [pc, #100]	; (23eefa0 <_ZN15Adafruit_BMP2806read24Eh+0xd4>)
 23eef3a:	6840      	ldr	r0, [r0, #4]
 23eef3c:	9302      	str	r3, [sp, #8]
 23eef3e:	2301      	movs	r3, #1
 23eef40:	f8ad 300c 	strh.w	r3, [sp, #12]
 23eef44:	f009 fea2 	bl	23f8c8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
 23eef48:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23eef4c:	2100      	movs	r1, #0
 23eef4e:	b280      	uxth	r0, r0
 23eef50:	f00a fd85 	bl	23f9a5e <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 23eef54:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23eef58:	4620      	mov	r0, r4
 23eef5a:	f7ff fe39 	bl	23eebd0 <_ZN15Adafruit_BMP2807spixferEh>
    value = spixfer(0);
 23eef5e:	2100      	movs	r1, #0
 23eef60:	4620      	mov	r0, r4
 23eef62:	f7ff fe35 	bl	23eebd0 <_ZN15Adafruit_BMP2807spixferEh>
    value |= spixfer(0);
 23eef66:	2100      	movs	r1, #0
    value <<= 8;
 23eef68:	0205      	lsls	r5, r0, #8
    value |= spixfer(0);
 23eef6a:	4620      	mov	r0, r4
 23eef6c:	f7ff fe30 	bl	23eebd0 <_ZN15Adafruit_BMP2807spixferEh>
 23eef70:	4328      	orrs	r0, r5
    value |= spixfer(0);
 23eef72:	2100      	movs	r1, #0
    value <<= 8;
 23eef74:	0205      	lsls	r5, r0, #8
    value |= spixfer(0);
 23eef76:	4620      	mov	r0, r4
 23eef78:	f7ff fe2a 	bl	23eebd0 <_ZN15Adafruit_BMP2807spixferEh>
 23eef7c:	4305      	orrs	r5, r0
    digitalWrite(_cs, HIGH);
 23eef7e:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23eef82:	2101      	movs	r1, #1
 23eef84:	b280      	uxth	r0, r0
 23eef86:	f00a fd6a 	bl	23f9a5e <digitalWrite>
    if (_sck == -1)
 23eef8a:	f994 301f 	ldrsb.w	r3, [r4, #31]
 23eef8e:	3301      	adds	r3, #1
 23eef90:	d1c5      	bne.n	23eef1e <_ZN15Adafruit_BMP2806read24Eh+0x52>
      _spi->endTransaction(); // release the SPI bus
 23eef92:	6860      	ldr	r0, [r4, #4]
 23eef94:	f009 fe60 	bl	23f8c58 <_ZN8SPIClass14endTransactionEv>
  return value;
 23eef98:	e7c1      	b.n	23eef1e <_ZN15Adafruit_BMP2806read24Eh+0x52>
 23eef9a:	bf00      	nop
 23eef9c:	023fe76c 	.word	0x023fe76c
 23eefa0:	0007a120 	.word	0x0007a120

023eefa4 <_ZN15Adafruit_BMP28016readCoefficientsEv>:
void Adafruit_BMP280::readCoefficients() {
 23eefa4:	b510      	push	{r4, lr}
  _bmp280_calib.dig_T1 = read16_LE(BMP280_REGISTER_DIG_T1);
 23eefa6:	2188      	movs	r1, #136	; 0x88
void Adafruit_BMP280::readCoefficients() {
 23eefa8:	4604      	mov	r4, r0
  _bmp280_calib.dig_T1 = read16_LE(BMP280_REGISTER_DIG_T1);
 23eefaa:	f7ff ff89 	bl	23eeec0 <_ZN15Adafruit_BMP2809read16_LEEh>
  return (int16_t)read16_LE(reg);
 23eefae:	218a      	movs	r1, #138	; 0x8a
  _bmp280_calib.dig_T1 = read16_LE(BMP280_REGISTER_DIG_T1);
 23eefb0:	8420      	strh	r0, [r4, #32]
  return (int16_t)read16_LE(reg);
 23eefb2:	4620      	mov	r0, r4
 23eefb4:	f7ff ff84 	bl	23eeec0 <_ZN15Adafruit_BMP2809read16_LEEh>
 23eefb8:	218c      	movs	r1, #140	; 0x8c
  _bmp280_calib.dig_T2 = readS16_LE(BMP280_REGISTER_DIG_T2);
 23eefba:	8460      	strh	r0, [r4, #34]	; 0x22
  return (int16_t)read16_LE(reg);
 23eefbc:	4620      	mov	r0, r4
 23eefbe:	f7ff ff7f 	bl	23eeec0 <_ZN15Adafruit_BMP2809read16_LEEh>
  _bmp280_calib.dig_P1 = read16_LE(BMP280_REGISTER_DIG_P1);
 23eefc2:	218e      	movs	r1, #142	; 0x8e
  _bmp280_calib.dig_T3 = readS16_LE(BMP280_REGISTER_DIG_T3);
 23eefc4:	84a0      	strh	r0, [r4, #36]	; 0x24
  _bmp280_calib.dig_P1 = read16_LE(BMP280_REGISTER_DIG_P1);
 23eefc6:	4620      	mov	r0, r4
 23eefc8:	f7ff ff7a 	bl	23eeec0 <_ZN15Adafruit_BMP2809read16_LEEh>
  return (int16_t)read16_LE(reg);
 23eefcc:	2190      	movs	r1, #144	; 0x90
  _bmp280_calib.dig_P1 = read16_LE(BMP280_REGISTER_DIG_P1);
 23eefce:	84e0      	strh	r0, [r4, #38]	; 0x26
  return (int16_t)read16_LE(reg);
 23eefd0:	4620      	mov	r0, r4
 23eefd2:	f7ff ff75 	bl	23eeec0 <_ZN15Adafruit_BMP2809read16_LEEh>
 23eefd6:	2192      	movs	r1, #146	; 0x92
  _bmp280_calib.dig_P2 = readS16_LE(BMP280_REGISTER_DIG_P2);
 23eefd8:	8520      	strh	r0, [r4, #40]	; 0x28
  return (int16_t)read16_LE(reg);
 23eefda:	4620      	mov	r0, r4
 23eefdc:	f7ff ff70 	bl	23eeec0 <_ZN15Adafruit_BMP2809read16_LEEh>
 23eefe0:	2194      	movs	r1, #148	; 0x94
  _bmp280_calib.dig_P3 = readS16_LE(BMP280_REGISTER_DIG_P3);
 23eefe2:	8560      	strh	r0, [r4, #42]	; 0x2a
  return (int16_t)read16_LE(reg);
 23eefe4:	4620      	mov	r0, r4
 23eefe6:	f7ff ff6b 	bl	23eeec0 <_ZN15Adafruit_BMP2809read16_LEEh>
 23eefea:	2196      	movs	r1, #150	; 0x96
  _bmp280_calib.dig_P4 = readS16_LE(BMP280_REGISTER_DIG_P4);
 23eefec:	85a0      	strh	r0, [r4, #44]	; 0x2c
  return (int16_t)read16_LE(reg);
 23eefee:	4620      	mov	r0, r4
 23eeff0:	f7ff ff66 	bl	23eeec0 <_ZN15Adafruit_BMP2809read16_LEEh>
 23eeff4:	2198      	movs	r1, #152	; 0x98
  _bmp280_calib.dig_P5 = readS16_LE(BMP280_REGISTER_DIG_P5);
 23eeff6:	85e0      	strh	r0, [r4, #46]	; 0x2e
  return (int16_t)read16_LE(reg);
 23eeff8:	4620      	mov	r0, r4
 23eeffa:	f7ff ff61 	bl	23eeec0 <_ZN15Adafruit_BMP2809read16_LEEh>
 23eeffe:	219a      	movs	r1, #154	; 0x9a
  _bmp280_calib.dig_P6 = readS16_LE(BMP280_REGISTER_DIG_P6);
 23ef000:	8620      	strh	r0, [r4, #48]	; 0x30
  return (int16_t)read16_LE(reg);
 23ef002:	4620      	mov	r0, r4
 23ef004:	f7ff ff5c 	bl	23eeec0 <_ZN15Adafruit_BMP2809read16_LEEh>
 23ef008:	219c      	movs	r1, #156	; 0x9c
  _bmp280_calib.dig_P7 = readS16_LE(BMP280_REGISTER_DIG_P7);
 23ef00a:	8660      	strh	r0, [r4, #50]	; 0x32
  return (int16_t)read16_LE(reg);
 23ef00c:	4620      	mov	r0, r4
 23ef00e:	f7ff ff57 	bl	23eeec0 <_ZN15Adafruit_BMP2809read16_LEEh>
 23ef012:	219e      	movs	r1, #158	; 0x9e
  _bmp280_calib.dig_P8 = readS16_LE(BMP280_REGISTER_DIG_P8);
 23ef014:	86a0      	strh	r0, [r4, #52]	; 0x34
  return (int16_t)read16_LE(reg);
 23ef016:	4620      	mov	r0, r4
 23ef018:	f7ff ff52 	bl	23eeec0 <_ZN15Adafruit_BMP2809read16_LEEh>
  _bmp280_calib.dig_P9 = readS16_LE(BMP280_REGISTER_DIG_P9);
 23ef01c:	86e0      	strh	r0, [r4, #54]	; 0x36
}
 23ef01e:	bd10      	pop	{r4, pc}

023ef020 <_ZN15Adafruit_BMP2805beginEhh>:
bool Adafruit_BMP280::begin(uint8_t addr, uint8_t chipid) {
 23ef020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ef022:	4604      	mov	r4, r0
  _i2caddr = addr;
 23ef024:	7401      	strb	r1, [r0, #16]
  if (_cs == -1) {
 23ef026:	f990 001c 	ldrsb.w	r0, [r0, #28]
bool Adafruit_BMP280::begin(uint8_t addr, uint8_t chipid) {
 23ef02a:	4615      	mov	r5, r2
  if (_cs == -1) {
 23ef02c:	1c42      	adds	r2, r0, #1
 23ef02e:	d11b      	bne.n	23ef068 <_ZN15Adafruit_BMP2805beginEhh+0x48>
    _wire->begin();
 23ef030:	6820      	ldr	r0, [r4, #0]
 23ef032:	f009 f8bd 	bl	23f81b0 <_ZN7TwoWire5beginEv>
  if (read8(BMP280_REGISTER_CHIPID) != chipid)
 23ef036:	21d0      	movs	r1, #208	; 0xd0
 23ef038:	4620      	mov	r0, r4
 23ef03a:	f7ff fe87 	bl	23eed4c <_ZN15Adafruit_BMP2805read8Eh>
 23ef03e:	42a8      	cmp	r0, r5
 23ef040:	f04f 0500 	mov.w	r5, #0
 23ef044:	d133      	bne.n	23ef0ae <_ZN15Adafruit_BMP2805beginEhh+0x8e>
  readCoefficients();
 23ef046:	4620      	mov	r0, r4
 23ef048:	f7ff ffac 	bl	23eefa4 <_ZN15Adafruit_BMP28016readCoefficientsEv>
  setSampling();
 23ef04c:	2305      	movs	r3, #5
 23ef04e:	2103      	movs	r1, #3
 23ef050:	461a      	mov	r2, r3
 23ef052:	4620      	mov	r0, r4
 23ef054:	e9cd 5500 	strd	r5, r5, [sp]
 23ef058:	f7ff fe42 	bl	23eece0 <_ZN15Adafruit_BMP28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_NS_13sensor_filterENS_16standby_durationE>
  delay(100);
 23ef05c:	2064      	movs	r0, #100	; 0x64
 23ef05e:	f008 fae3 	bl	23f7628 <delay>
  return true;
 23ef062:	2001      	movs	r0, #1
}
 23ef064:	b003      	add	sp, #12
 23ef066:	bd30      	pop	{r4, r5, pc}
    digitalWrite(_cs, HIGH);
 23ef068:	2101      	movs	r1, #1
 23ef06a:	b280      	uxth	r0, r0
 23ef06c:	f00a fcf7 	bl	23f9a5e <digitalWrite>
    pinMode(_cs, OUTPUT);
 23ef070:	f994 001c 	ldrsb.w	r0, [r4, #28]
 23ef074:	2101      	movs	r1, #1
 23ef076:	b280      	uxth	r0, r0
 23ef078:	f00a fce0 	bl	23f9a3c <pinMode>
    if (_sck == -1) {
 23ef07c:	f994 001f 	ldrsb.w	r0, [r4, #31]
 23ef080:	1c43      	adds	r3, r0, #1
 23ef082:	d103      	bne.n	23ef08c <_ZN15Adafruit_BMP2805beginEhh+0x6c>
      _spi->begin();
 23ef084:	6860      	ldr	r0, [r4, #4]
 23ef086:	f009 fdad 	bl	23f8be4 <_ZN8SPIClass5beginEv>
 23ef08a:	e7d4      	b.n	23ef036 <_ZN15Adafruit_BMP2805beginEhh+0x16>
      pinMode(_sck, OUTPUT);
 23ef08c:	2101      	movs	r1, #1
 23ef08e:	b280      	uxth	r0, r0
 23ef090:	f00a fcd4 	bl	23f9a3c <pinMode>
      pinMode(_mosi, OUTPUT);
 23ef094:	f994 001d 	ldrsb.w	r0, [r4, #29]
 23ef098:	2101      	movs	r1, #1
 23ef09a:	b280      	uxth	r0, r0
 23ef09c:	f00a fcce 	bl	23f9a3c <pinMode>
      pinMode(_miso, INPUT);
 23ef0a0:	f994 001e 	ldrsb.w	r0, [r4, #30]
 23ef0a4:	2100      	movs	r1, #0
 23ef0a6:	b280      	uxth	r0, r0
 23ef0a8:	f00a fcc8 	bl	23f9a3c <pinMode>
 23ef0ac:	e7c3      	b.n	23ef036 <_ZN15Adafruit_BMP2805beginEhh+0x16>
    return false;
 23ef0ae:	4628      	mov	r0, r5
 23ef0b0:	e7d8      	b.n	23ef064 <_ZN15Adafruit_BMP2805beginEhh+0x44>
	...

023ef0b4 <_ZN15Adafruit_BMP28015readTemperatureEv>:
float Adafruit_BMP280::readTemperature() {
 23ef0b4:	b510      	push	{r4, lr}
 23ef0b6:	4604      	mov	r4, r0
  int32_t adc_T = read24(BMP280_REGISTER_TEMPDATA);
 23ef0b8:	21fa      	movs	r1, #250	; 0xfa
 23ef0ba:	f7ff ff07 	bl	23eeecc <_ZN15Adafruit_BMP2806read24Eh>
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
 23ef0be:	8c21      	ldrh	r1, [r4, #32]
}
 23ef0c0:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 23ef100 <_ZN15Adafruit_BMP28015readTemperatureEv+0x4c>
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
 23ef0c4:	004b      	lsls	r3, r1, #1
  var2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) *
 23ef0c6:	ebc1 2220 	rsb	r2, r1, r0, asr #8
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
 23ef0ca:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
          ((int32_t)_bmp280_calib.dig_T2)) >>
 23ef0ce:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
 23ef0d2:	4359      	muls	r1, r3
  var2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) *
 23ef0d4:	fb02 f302 	mul.w	r3, r2, r2
          ((int32_t)_bmp280_calib.dig_T3)) >>
 23ef0d8:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
            ((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1))) >>
 23ef0dc:	131b      	asrs	r3, r3, #12
           12) *
 23ef0de:	4353      	muls	r3, r2
  var2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) *
 23ef0e0:	139b      	asrs	r3, r3, #14
  t_fine = var1 + var2;
 23ef0e2:	eb03 23e1 	add.w	r3, r3, r1, asr #11
 23ef0e6:	61a3      	str	r3, [r4, #24]
  float T = (t_fine * 5 + 128) >> 8;
 23ef0e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 23ef0ec:	3380      	adds	r3, #128	; 0x80
 23ef0ee:	121b      	asrs	r3, r3, #8
 23ef0f0:	ee07 3a90 	vmov	s15, r3
 23ef0f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 23ef0f8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 23ef0fc:	bd10      	pop	{r4, pc}
 23ef0fe:	bf00      	nop
 23ef100:	42c80000 	.word	0x42c80000

023ef104 <_ZN20Adafruit_BMP280_Temp8getEventEP15sensors_event_t>:
bool Adafruit_BMP280_Temp::getEvent(sensors_event_t *event) {
 23ef104:	b538      	push	{r3, r4, r5, lr}
 23ef106:	460c      	mov	r4, r1
 23ef108:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
 23ef10a:	2220      	movs	r2, #32
 23ef10c:	2100      	movs	r1, #0
 23ef10e:	1d20      	adds	r0, r4, #4
 23ef110:	f00d faf5 	bl	23fc6fe <memset>
  event->version = sizeof(sensors_event_t);
 23ef114:	2324      	movs	r3, #36	; 0x24
 23ef116:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
 23ef118:	68ab      	ldr	r3, [r5, #8]
 23ef11a:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 23ef11c:	230d      	movs	r3, #13
 23ef11e:	60a3      	str	r3, [r4, #8]
 23ef120:	f007 fb2e 	bl	23f6780 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
 23ef124:	6120      	str	r0, [r4, #16]
  event->temperature = _theBMP280->readTemperature();
 23ef126:	68e8      	ldr	r0, [r5, #12]
 23ef128:	f7ff ffc4 	bl	23ef0b4 <_ZN15Adafruit_BMP28015readTemperatureEv>
}
 23ef12c:	2001      	movs	r0, #1
  event->temperature = _theBMP280->readTemperature();
 23ef12e:	ed84 0a05 	vstr	s0, [r4, #20]
}
 23ef132:	bd38      	pop	{r3, r4, r5, pc}

023ef134 <_ZN15Adafruit_BMP28012readPressureEv>:
float Adafruit_BMP280::readPressure() {
 23ef134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ef138:	4604      	mov	r4, r0
  readTemperature();
 23ef13a:	f7ff ffbb 	bl	23ef0b4 <_ZN15Adafruit_BMP28015readTemperatureEv>
  int32_t adc_P = read24(BMP280_REGISTER_PRESSUREDATA);
 23ef13e:	21f7      	movs	r1, #247	; 0xf7
 23ef140:	4620      	mov	r0, r4
 23ef142:	f7ff fec3 	bl	23eeecc <_ZN15Adafruit_BMP2806read24Eh>
  var1 = ((int64_t)t_fine) - 128000;
 23ef146:	69a1      	ldr	r1, [r4, #24]
         ((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
 23ef148:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
  var1 = ((int64_t)t_fine) - 128000;
 23ef14c:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 23ef150:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
 23ef154:	f14c 3cff 	adc.w	ip, ip, #4294967295	; 0xffffffff
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
 23ef158:	fba1 6801 	umull	r6, r8, r1, r1
 23ef15c:	fb01 f50c 	mul.w	r5, r1, ip
         ((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
 23ef160:	fb03 f20c 	mul.w	r2, r3, ip
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
 23ef164:	eb08 0845 	add.w	r8, r8, r5, lsl #1
         ((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
 23ef168:	17dd      	asrs	r5, r3, #31
 23ef16a:	fb01 2205 	mla	r2, r1, r5, r2
 23ef16e:	fba3 3501 	umull	r3, r5, r3, r1
 23ef172:	442a      	add	r2, r5
 23ef174:	0312      	lsls	r2, r2, #12
 23ef176:	031d      	lsls	r5, r3, #12
 23ef178:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
  var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
 23ef17c:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
 23ef180:	fb03 f708 	mul.w	r7, r3, r8
 23ef184:	ea4f 7ee3 	mov.w	lr, r3, asr #31
 23ef188:	fb06 770e 	mla	r7, r6, lr, r7
 23ef18c:	fba3 3e06 	umull	r3, lr, r3, r6
 23ef190:	4477      	add	r7, lr
 23ef192:	0a1b      	lsrs	r3, r3, #8
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
 23ef194:	f8b4 e026 	ldrh.w	lr, [r4, #38]	; 0x26
  var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
 23ef198:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 23ef19c:	195b      	adds	r3, r3, r5
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
 23ef19e:	fba3 350e 	umull	r3, r5, r3, lr
  var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
 23ef1a2:	eb42 2227 	adc.w	r2, r2, r7, asr #8
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
 23ef1a6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 23ef1aa:	fb0e 5502 	mla	r5, lr, r2, r5
  var1 =
 23ef1ae:	17eb      	asrs	r3, r5, #31
 23ef1b0:	106a      	asrs	r2, r5, #1
  if (var1 == 0) {
 23ef1b2:	ea53 0565 	orrs.w	r5, r3, r5, asr #1
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
 23ef1b6:	f04f 0700 	mov.w	r7, #0
  if (var1 == 0) {
 23ef1ba:	d07b      	beq.n	23ef2b4 <_ZN15Adafruit_BMP28012readPressureEv+0x180>
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
 23ef1bc:	f9b4 e030 	ldrsh.w	lr, [r4, #48]	; 0x30
  adc_P >>= 4;
 23ef1c0:	1100      	asrs	r0, r0, #4
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
 23ef1c2:	fb0e f508 	mul.w	r5, lr, r8
 23ef1c6:	ea4f 79ee 	mov.w	r9, lr, asr #31
 23ef1ca:	fb06 5509 	mla	r5, r6, r9, r5
 23ef1ce:	fbae e606 	umull	lr, r6, lr, r6
 23ef1d2:	4435      	add	r5, r6
  var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
 23ef1d4:	f9b4 602e 	ldrsh.w	r6, [r4, #46]	; 0x2e
  p = 1048576 - adc_P;
 23ef1d8:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
  var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
 23ef1dc:	fb06 fc0c 	mul.w	ip, r6, ip
 23ef1e0:	ea4f 78e6 	mov.w	r8, r6, asr #31
 23ef1e4:	fb01 cc08 	mla	ip, r1, r8, ip
 23ef1e8:	fba6 6101 	umull	r6, r1, r6, r1
 23ef1ec:	4461      	add	r1, ip
 23ef1ee:	0449      	lsls	r1, r1, #17
 23ef1f0:	ea41 31d6 	orr.w	r1, r1, r6, lsr #15
 23ef1f4:	0476      	lsls	r6, r6, #17
 23ef1f6:	eb16 060e 	adds.w	r6, r6, lr
 23ef1fa:	eb45 0101 	adc.w	r1, r5, r1
  var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
 23ef1fe:	f9b4 502c 	ldrsh.w	r5, [r4, #44]	; 0x2c
  p = (((p << 31) - var2) * 3125) / var1;
 23ef202:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
 23ef206:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
  p = (((p << 31) - var2) * 3125) / var1;
 23ef20a:	f640 4535 	movw	r5, #3125	; 0xc35
  var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
 23ef20e:	19be      	adds	r6, r7, r6
  p = (((p << 31) - var2) * 3125) / var1;
 23ef210:	ea4c 0c50 	orr.w	ip, ip, r0, lsr #1
 23ef214:	07c0      	lsls	r0, r0, #31
 23ef216:	1b80      	subs	r0, r0, r6
 23ef218:	eb6c 0c01 	sbc.w	ip, ip, r1
 23ef21c:	fba0 0105 	umull	r0, r1, r0, r5
 23ef220:	fb05 110c 	mla	r1, r5, ip, r1
 23ef224:	f7f4 feee 	bl	23e4004 <__aeabi_ldivmod>
 23ef228:	4686      	mov	lr, r0
  var1 = (((int64_t)_bmp280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23ef22a:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 23ef22e:	ea4f 3c61 	mov.w	ip, r1, asr #13
 23ef232:	fb02 f70c 	mul.w	r7, r2, ip
 23ef236:	0b43      	lsrs	r3, r0, #13
 23ef238:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
 23ef23c:	17d5      	asrs	r5, r2, #31
 23ef23e:	fb03 7705 	mla	r7, r3, r5, r7
 23ef242:	fba2 2503 	umull	r2, r5, r2, r3
 23ef246:	443d      	add	r5, r7
 23ef248:	fb02 f70c 	mul.w	r7, r2, ip
 23ef24c:	fb03 7705 	mla	r7, r3, r5, r7
 23ef250:	fba2 2303 	umull	r2, r3, r2, r3
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
 23ef254:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
  var1 = (((int64_t)_bmp280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23ef258:	441f      	add	r7, r3
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
 23ef25a:	fb06 f501 	mul.w	r5, r6, r1
  var1 = (((int64_t)_bmp280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 23ef25e:	0e53      	lsrs	r3, r2, #25
 23ef260:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
 23ef264:	181b      	adds	r3, r3, r0
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
 23ef266:	ea4f 72e6 	mov.w	r2, r6, asr #31
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
 23ef26a:	eb41 6767 	adc.w	r7, r1, r7, asr #25
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
 23ef26e:	fb02 5100 	mla	r1, r2, r0, r5
 23ef272:	fba6 060e 	umull	r0, r6, r6, lr
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
 23ef276:	f9b4 4032 	ldrsh.w	r4, [r4, #50]	; 0x32
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
 23ef27a:	4431      	add	r1, r6
 23ef27c:	0cc0      	lsrs	r0, r0, #19
 23ef27e:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
 23ef282:	1818      	adds	r0, r3, r0
 23ef284:	ea4f 75e4 	mov.w	r5, r4, asr #31
 23ef288:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
 23ef28c:	0a00      	lsrs	r0, r0, #8
 23ef28e:	012d      	lsls	r5, r5, #4
 23ef290:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 23ef294:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
 23ef298:	0124      	lsls	r4, r4, #4
 23ef29a:	1820      	adds	r0, r4, r0
  return (float)p / 256;
 23ef29c:	eb45 2121 	adc.w	r1, r5, r1, asr #8
 23ef2a0:	f7f4 fe72 	bl	23e3f88 <__aeabi_l2f>
 23ef2a4:	ed9f 0a05 	vldr	s0, [pc, #20]	; 23ef2bc <_ZN15Adafruit_BMP28012readPressureEv+0x188>
 23ef2a8:	ee07 0a90 	vmov	s15, r0
 23ef2ac:	ee27 0a80 	vmul.f32	s0, s15, s0
}
 23ef2b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0; // avoid exception caused by division by zero
 23ef2b4:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23ef2c0 <_ZN15Adafruit_BMP28012readPressureEv+0x18c>
 23ef2b8:	e7fa      	b.n	23ef2b0 <_ZN15Adafruit_BMP28012readPressureEv+0x17c>
 23ef2ba:	bf00      	nop
 23ef2bc:	3b800000 	.word	0x3b800000
 23ef2c0:	00000000 	.word	0x00000000

023ef2c4 <_ZN24Adafruit_BMP280_Pressure8getEventEP15sensors_event_t>:
    @brief  Gets the pressure as a standard sensor event
    @param  event Sensor event object that will be populated
    @returns True
*/
/**************************************************************************/
bool Adafruit_BMP280_Pressure::getEvent(sensors_event_t *event) {
 23ef2c4:	b538      	push	{r3, r4, r5, lr}
 23ef2c6:	460c      	mov	r4, r1
 23ef2c8:	4605      	mov	r5, r0
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 23ef2ca:	2220      	movs	r2, #32
 23ef2cc:	2100      	movs	r1, #0
 23ef2ce:	1d20      	adds	r0, r4, #4
 23ef2d0:	f00d fa15 	bl	23fc6fe <memset>

  event->version = sizeof(sensors_event_t);
 23ef2d4:	2324      	movs	r3, #36	; 0x24
 23ef2d6:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
 23ef2d8:	68ab      	ldr	r3, [r5, #8]
 23ef2da:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_PRESSURE;
 23ef2dc:	2306      	movs	r3, #6
 23ef2de:	60a3      	str	r3, [r4, #8]
 23ef2e0:	f007 fa4e 	bl	23f6780 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
 23ef2e4:	6120      	str	r0, [r4, #16]
  event->pressure = _theBMP280->readPressure() / 100; // convert Pa to hPa
 23ef2e6:	68e8      	ldr	r0, [r5, #12]
 23ef2e8:	f7ff ff24 	bl	23ef134 <_ZN15Adafruit_BMP28012readPressureEv>
 23ef2ec:	ed9f 7a03 	vldr	s14, [pc, #12]	; 23ef2fc <_ZN24Adafruit_BMP280_Pressure8getEventEP15sensors_event_t+0x38>
 23ef2f0:	eec0 7a07 	vdiv.f32	s15, s0, s14
  return true;
}
 23ef2f4:	2001      	movs	r0, #1
  event->pressure = _theBMP280->readPressure() / 100; // convert Pa to hPa
 23ef2f6:	edc4 7a05 	vstr	s15, [r4, #20]
}
 23ef2fa:	bd38      	pop	{r3, r4, r5, pc}
 23ef2fc:	42c80000 	.word	0x42c80000

023ef300 <_ZL9i2c_writehPKhmPv>:
/*!
    @brief  Writes 8 bit values over I2C
*/
/**************************************************************************/
int8_t i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len,
                 void *intf_ptr) {
 23ef300:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Serial.print("I2C write address 0x"); Serial.print(reg_addr, HEX);
  // Serial.print(" len "); Serial.println(len, HEX);

  if (!g_i2c_dev->write((uint8_t *)reg_data, len, true, &reg_addr, 1))
 23ef302:	2301      	movs	r3, #1
                 void *intf_ptr) {
 23ef304:	f88d 000f 	strb.w	r0, [sp, #15]
  if (!g_i2c_dev->write((uint8_t *)reg_data, len, true, &reg_addr, 1))
 23ef308:	f10d 000f 	add.w	r0, sp, #15
 23ef30c:	9000      	str	r0, [sp, #0]
 23ef30e:	4805      	ldr	r0, [pc, #20]	; (23ef324 <_ZL9i2c_writehPKhmPv+0x24>)
 23ef310:	9301      	str	r3, [sp, #4]
 23ef312:	6800      	ldr	r0, [r0, #0]
 23ef314:	f000 fa64 	bl	23ef7e0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 23ef318:	f080 0001 	eor.w	r0, r0, #1
    return 1;

  return 0;
}
 23ef31c:	b240      	sxtb	r0, r0
 23ef31e:	b005      	add	sp, #20
 23ef320:	f85d fb04 	ldr.w	pc, [sp], #4
 23ef324:	1007ae5c 	.word	0x1007ae5c

023ef328 <_ZL8i2c_readhPhmPv>:
                void *intf_ptr) {
 23ef328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23ef32a:	460b      	mov	r3, r1
  if (!g_i2c_dev->write_then_read(&reg_addr, 1, reg_data, len))
 23ef32c:	2100      	movs	r1, #0
 23ef32e:	e9cd 2100 	strd	r2, r1, [sp]
                void *intf_ptr) {
 23ef332:	f88d 000f 	strb.w	r0, [sp, #15]
  if (!g_i2c_dev->write_then_read(&reg_addr, 1, reg_data, len))
 23ef336:	4806      	ldr	r0, [pc, #24]	; (23ef350 <_ZL8i2c_readhPhmPv+0x28>)
 23ef338:	2201      	movs	r2, #1
 23ef33a:	f10d 010f 	add.w	r1, sp, #15
 23ef33e:	6800      	ldr	r0, [r0, #0]
 23ef340:	f000 faa0 	bl	23ef884 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
 23ef344:	f080 0001 	eor.w	r0, r0, #1
}
 23ef348:	b240      	sxtb	r0, r0
 23ef34a:	b005      	add	sp, #20
 23ef34c:	f85d fb04 	ldr.w	pc, [sp], #4
 23ef350:	1007ae5c 	.word	0x1007ae5c

023ef354 <_ZL10delay_usecmPv>:
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 23ef354:	f007 ba06 	b.w	23f6764 <HAL_Delay_Microseconds>

023ef358 <_ZN15Adafruit_BMP3XXC1Ev>:
  _meas_end = 0;
 23ef358:	2200      	movs	r2, #0
Adafruit_BMP3XX::Adafruit_BMP3XX(void) {
 23ef35a:	e9c0 2204 	strd	r2, r2, [r0, #16]
  _meas_end = 0;
 23ef35e:	6282      	str	r2, [r0, #40]	; 0x28
  _filterEnabled = _tempOSEnabled = _presOSEnabled = false;
 23ef360:	8302      	strh	r2, [r0, #24]
 23ef362:	7682      	strb	r2, [r0, #26]
}
 23ef364:	4770      	bx	lr
	...

023ef368 <_ZN15Adafruit_BMP3XX5_initEv>:
bool Adafruit_BMP3XX::_init(void) {
 23ef368:	b5f0      	push	{r4, r5, r6, r7, lr}
  g_i2c_dev = i2c_dev;
 23ef36a:	4b2b      	ldr	r3, [pc, #172]	; (23ef418 <_ZN15Adafruit_BMP3XX5_initEv+0xb0>)
 23ef36c:	6902      	ldr	r2, [r0, #16]
  rslt = bmp3_soft_reset(&the_sensor);
 23ef36e:	f100 0730 	add.w	r7, r0, #48	; 0x30
  g_i2c_dev = i2c_dev;
 23ef372:	601a      	str	r2, [r3, #0]
  g_spi_dev = spi_dev;
 23ef374:	6942      	ldr	r2, [r0, #20]
 23ef376:	4b29      	ldr	r3, [pc, #164]	; (23ef41c <_ZN15Adafruit_BMP3XX5_initEv+0xb4>)
bool Adafruit_BMP3XX::_init(void) {
 23ef378:	4605      	mov	r5, r0
  g_spi_dev = spi_dev;
 23ef37a:	601a      	str	r2, [r3, #0]
  the_sensor.delay_us = delay_usec;
 23ef37c:	4b28      	ldr	r3, [pc, #160]	; (23ef420 <_ZN15Adafruit_BMP3XX5_initEv+0xb8>)
bool Adafruit_BMP3XX::_init(void) {
 23ef37e:	b089      	sub	sp, #36	; 0x24
  the_sensor.delay_us = delay_usec;
 23ef380:	6443      	str	r3, [r0, #68]	; 0x44
  rslt = bmp3_soft_reset(&the_sensor);
 23ef382:	4638      	mov	r0, r7
 23ef384:	f7f5 fb90 	bl	23e4aa8 <bmp3_soft_reset>
  if (rslt != BMP3_OK)
 23ef388:	b110      	cbz	r0, 23ef390 <_ZN15Adafruit_BMP3XX5_initEv+0x28>
    return false;
 23ef38a:	2000      	movs	r0, #0
}
 23ef38c:	b009      	add	sp, #36	; 0x24
 23ef38e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  rslt = bmp3_init(&the_sensor);
 23ef390:	4638      	mov	r0, r7
 23ef392:	f7f5 fbc7 	bl	23e4b24 <bmp3_init>
  uint8_t crc = 0xFF;
  uint8_t stored_crc;
  uint8_t trim_param[21];
  uint8_t i;

  rslt = bmp3_get_regs(BMP3_REG_CALIB_DATA, trim_param, 21, dev);
 23ef396:	2215      	movs	r2, #21
 23ef398:	463b      	mov	r3, r7
 23ef39a:	2031      	movs	r0, #49	; 0x31
 23ef39c:	a902      	add	r1, sp, #8
 23ef39e:	f7f5 f9a9 	bl	23e46f4 <bmp3_get_regs>
  if (rslt == BMP3_OK) {
 23ef3a2:	4602      	mov	r2, r0
 23ef3a4:	2800      	cmp	r0, #0
 23ef3a6:	d1f0      	bne.n	23ef38a <_ZN15Adafruit_BMP3XX5_initEv+0x22>
  uint8_t crc = 0xFF;
 23ef3a8:	24ff      	movs	r4, #255	; 0xff
 23ef3aa:	a902      	add	r1, sp, #8
    for (i = 0; i < 21; i++) {
      crc = (uint8_t)cal_crc(crc, trim_param[i]);
 23ef3ac:	2608      	movs	r6, #8
 23ef3ae:	f811 3b01 	ldrb.w	r3, [r1], #1
  int8_t poly = 0x1D;
  int8_t var2;
  uint8_t i;

  for (i = 0; i < 8; i++) {
    if ((seed & 0x80) ^ (data & 0x80)) {
 23ef3b2:	ea84 0003 	eor.w	r0, r4, r3
      var2 = 0;
    }

    seed = (seed & 0x7F) << 1;
    data = (data & 0x7F) << 1;
    seed = seed ^ (uint8_t)(poly * var2);
 23ef3b6:	f010 0f80 	tst.w	r0, #128	; 0x80
 23ef3ba:	bf14      	ite	ne
 23ef3bc:	201d      	movne	r0, #29
 23ef3be:	2000      	moveq	r0, #0
    seed = (seed & 0x7F) << 1;
 23ef3c0:	0064      	lsls	r4, r4, #1
  for (i = 0; i < 8; i++) {
 23ef3c2:	3e01      	subs	r6, #1
    seed = (seed & 0x7F) << 1;
 23ef3c4:	b2e4      	uxtb	r4, r4
    data = (data & 0x7F) << 1;
 23ef3c6:	005b      	lsls	r3, r3, #1
  for (i = 0; i < 8; i++) {
 23ef3c8:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    data = (data & 0x7F) << 1;
 23ef3cc:	b2db      	uxtb	r3, r3
    seed = seed ^ (uint8_t)(poly * var2);
 23ef3ce:	ea84 0400 	eor.w	r4, r4, r0
  for (i = 0; i < 8; i++) {
 23ef3d2:	d1ee      	bne.n	23ef3b2 <_ZN15Adafruit_BMP3XX5_initEv+0x4a>
    for (i = 0; i < 21; i++) {
 23ef3d4:	3201      	adds	r2, #1
 23ef3d6:	b2d2      	uxtb	r2, r2
 23ef3d8:	2a15      	cmp	r2, #21
 23ef3da:	d1e7      	bne.n	23ef3ac <_ZN15Adafruit_BMP3XX5_initEv+0x44>
    crc = (crc ^ 0xFF);
 23ef3dc:	43e4      	mvns	r4, r4
    rslt = bmp3_get_regs(0x30, &stored_crc, 1, dev);
 23ef3de:	463b      	mov	r3, r7
 23ef3e0:	2201      	movs	r2, #1
 23ef3e2:	2030      	movs	r0, #48	; 0x30
 23ef3e4:	f10d 0107 	add.w	r1, sp, #7
 23ef3e8:	f7f5 f984 	bl	23e46f4 <bmp3_get_regs>
    if (stored_crc != crc) {
 23ef3ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23ef3f0:	b2e4      	uxtb	r4, r4
 23ef3f2:	42a3      	cmp	r3, r4
 23ef3f4:	d1c9      	bne.n	23ef38a <_ZN15Adafruit_BMP3XX5_initEv+0x22>
  if (rslt != BMP3_OK)
 23ef3f6:	2800      	cmp	r0, #0
 23ef3f8:	d1c7      	bne.n	23ef38a <_ZN15Adafruit_BMP3XX5_initEv+0x22>
  the_sensor.settings.odr_filter.odr = odr;
 23ef3fa:	2303      	movs	r3, #3
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 23ef3fc:	2001      	movs	r0, #1
  the_sensor.settings.odr_filter.odr = odr;
 23ef3fe:	f885 30e6 	strb.w	r3, [r5, #230]	; 0xe6
    _filterEnabled = false;
 23ef402:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  the_sensor.settings.odr_filter.press_os = oversample;
 23ef406:	f885 60e3 	strb.w	r6, [r5, #227]	; 0xe3
  the_sensor.settings.odr_filter.temp_os = oversample;
 23ef40a:	f8a5 60e4 	strh.w	r6, [r5, #228]	; 0xe4
    _filterEnabled = false;
 23ef40e:	61ab      	str	r3, [r5, #24]
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 23ef410:	f885 00e0 	strb.w	r0, [r5, #224]	; 0xe0
  return true;
 23ef414:	e7ba      	b.n	23ef38c <_ZN15Adafruit_BMP3XX5_initEv+0x24>
 23ef416:	bf00      	nop
 23ef418:	1007ae5c 	.word	0x1007ae5c
 23ef41c:	1007ae60 	.word	0x1007ae60
 23ef420:	023ef355 	.word	0x023ef355

023ef424 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>:
bool Adafruit_BMP3XX::begin_I2C(uint8_t addr, TwoWire *theWire) {
 23ef424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23ef426:	4604      	mov	r4, r0
  if (i2c_dev)
 23ef428:	6900      	ldr	r0, [r0, #16]
bool Adafruit_BMP3XX::begin_I2C(uint8_t addr, TwoWire *theWire) {
 23ef42a:	460e      	mov	r6, r1
 23ef42c:	4617      	mov	r7, r2
  if (i2c_dev)
 23ef42e:	b110      	cbz	r0, 23ef436 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x12>
    delete i2c_dev;
 23ef430:	2110      	movs	r1, #16
 23ef432:	f7f4 fffa 	bl	23e442a <_ZdlPvj>
  if (spi_dev)
 23ef436:	6965      	ldr	r5, [r4, #20]
 23ef438:	b135      	cbz	r5, 23ef448 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x24>
    delete spi_dev;
 23ef43a:	4628      	mov	r0, r5
 23ef43c:	f000 fa39 	bl	23ef8b2 <_ZN18Adafruit_SPIDeviceD1Ev>
 23ef440:	2138      	movs	r1, #56	; 0x38
 23ef442:	4628      	mov	r0, r5
 23ef444:	f7f4 fff1 	bl	23e442a <_ZdlPvj>
  spi_dev = NULL;
 23ef448:	2300      	movs	r3, #0
  g_i2c_dev = i2c_dev = new Adafruit_I2CDevice(addr, theWire);
 23ef44a:	2010      	movs	r0, #16
  spi_dev = NULL;
 23ef44c:	6163      	str	r3, [r4, #20]
  g_i2c_dev = i2c_dev = new Adafruit_I2CDevice(addr, theWire);
 23ef44e:	f7f4 ffe8 	bl	23e4422 <_Znwj>
 23ef452:	4605      	mov	r5, r0
 23ef454:	b118      	cbz	r0, 23ef45e <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x3a>
 23ef456:	463a      	mov	r2, r7
 23ef458:	4631      	mov	r1, r6
 23ef45a:	f000 f996 	bl	23ef78a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
 23ef45e:	4f0e      	ldr	r7, [pc, #56]	; (23ef498 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x74>)
  if (!i2c_dev->begin()) {
 23ef460:	2101      	movs	r1, #1
 23ef462:	4628      	mov	r0, r5
  g_i2c_dev = i2c_dev = new Adafruit_I2CDevice(addr, theWire);
 23ef464:	6125      	str	r5, [r4, #16]
 23ef466:	603d      	str	r5, [r7, #0]
  if (!i2c_dev->begin()) {
 23ef468:	f000 f9ab 	bl	23ef7c2 <_ZN18Adafruit_I2CDevice5beginEb>
 23ef46c:	b190      	cbz	r0, 23ef494 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x70>
  the_sensor.intf = BMP3_I2C_INTF;
 23ef46e:	2301      	movs	r3, #1
 23ef470:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  the_sensor.read = &i2c_read;
 23ef474:	4b09      	ldr	r3, [pc, #36]	; (23ef49c <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x78>)
  return _init();
 23ef476:	4620      	mov	r0, r4
  the_sensor.read = &i2c_read;
 23ef478:	63e3      	str	r3, [r4, #60]	; 0x3c
  the_sensor.write = &i2c_write;
 23ef47a:	4b09      	ldr	r3, [pc, #36]	; (23ef4a0 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x7c>)
  the_sensor.chip_id = addr;
 23ef47c:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  the_sensor.write = &i2c_write;
 23ef480:	6423      	str	r3, [r4, #64]	; 0x40
  the_sensor.intf_ptr = g_i2c_dev;
 23ef482:	683b      	ldr	r3, [r7, #0]
 23ef484:	6363      	str	r3, [r4, #52]	; 0x34
  the_sensor.dummy_byte = 0;
 23ef486:	2300      	movs	r3, #0
 23ef488:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 23ef48c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return _init();
 23ef490:	f7ff bf6a 	b.w	23ef368 <_ZN15Adafruit_BMP3XX5_initEv>
}
 23ef494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23ef496:	bf00      	nop
 23ef498:	1007ae5c 	.word	0x1007ae5c
 23ef49c:	023ef329 	.word	0x023ef329
 23ef4a0:	023ef301 	.word	0x023ef301

023ef4a4 <_ZN15Adafruit_BMP3XX14performReadingEv>:
bool Adafruit_BMP3XX::performReading(void) {
 23ef4a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  g_i2c_dev = i2c_dev;
 23ef4a6:	4b21      	ldr	r3, [pc, #132]	; (23ef52c <_ZN15Adafruit_BMP3XX14performReadingEv+0x88>)
 23ef4a8:	6902      	ldr	r2, [r0, #16]
bool Adafruit_BMP3XX::performReading(void) {
 23ef4aa:	4604      	mov	r4, r0
  g_i2c_dev = i2c_dev;
 23ef4ac:	601a      	str	r2, [r3, #0]
  g_spi_dev = spi_dev;
 23ef4ae:	6942      	ldr	r2, [r0, #20]
 23ef4b0:	4b1f      	ldr	r3, [pc, #124]	; (23ef530 <_ZN15Adafruit_BMP3XX14performReadingEv+0x8c>)
 23ef4b2:	601a      	str	r2, [r3, #0]
  the_sensor.settings.temp_en = BMP3_ENABLE;
 23ef4b4:	2301      	movs	r3, #1
  if (_tempOSEnabled) {
 23ef4b6:	7e42      	ldrb	r2, [r0, #25]
  the_sensor.settings.temp_en = BMP3_ENABLE;
 23ef4b8:	f880 30e2 	strb.w	r3, [r0, #226]	; 0xe2
  the_sensor.settings.press_en = BMP3_ENABLE;
 23ef4bc:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
  if (_presOSEnabled) {
 23ef4c0:	7ea3      	ldrb	r3, [r4, #26]
    settings_sel |= BMP3_SEL_TEMP_OS;
 23ef4c2:	2a00      	cmp	r2, #0
 23ef4c4:	bf0c      	ite	eq
 23ef4c6:	2004      	moveq	r0, #4
 23ef4c8:	2024      	movne	r0, #36	; 0x24
  if (_presOSEnabled) {
 23ef4ca:	b993      	cbnz	r3, 23ef4f2 <_ZN15Adafruit_BMP3XX14performReadingEv+0x4e>
  settings_sel |= BMP3_SEL_PRESS_EN;
 23ef4cc:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled) {
 23ef4d0:	7e23      	ldrb	r3, [r4, #24]
 23ef4d2:	b10b      	cbz	r3, 23ef4d8 <_ZN15Adafruit_BMP3XX14performReadingEv+0x34>
    settings_sel |= BMP3_SEL_IIR_FILTER;
 23ef4d4:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  if (_ODREnabled) {
 23ef4d8:	7ee3      	ldrb	r3, [r4, #27]
 23ef4da:	b10b      	cbz	r3, 23ef4e0 <_ZN15Adafruit_BMP3XX14performReadingEv+0x3c>
    settings_sel |= BMP3_SEL_ODR;
 23ef4dc:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  rslt = bmp3_set_sensor_settings(settings_sel, &the_sensor);
 23ef4e0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 23ef4e4:	4631      	mov	r1, r6
 23ef4e6:	f7f5 f9b1 	bl	23e484c <bmp3_set_sensor_settings>
  if (rslt != BMP3_OK)
 23ef4ea:	b128      	cbz	r0, 23ef4f8 <_ZN15Adafruit_BMP3XX14performReadingEv+0x54>
    return false;
 23ef4ec:	2000      	movs	r0, #0
}
 23ef4ee:	b004      	add	sp, #16
 23ef4f0:	bd70      	pop	{r4, r5, r6, pc}
    settings_sel |= BMP3_SEL_PRESS_OS;
 23ef4f2:	f040 0012 	orr.w	r0, r0, #18
 23ef4f6:	e7eb      	b.n	23ef4d0 <_ZN15Adafruit_BMP3XX14performReadingEv+0x2c>
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 23ef4f8:	2501      	movs	r5, #1
  rslt = bmp3_set_op_mode(&the_sensor);
 23ef4fa:	4630      	mov	r0, r6
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 23ef4fc:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
  rslt = bmp3_set_op_mode(&the_sensor);
 23ef500:	f7f5 fc27 	bl	23e4d52 <bmp3_set_op_mode>
  if (rslt != BMP3_OK)
 23ef504:	2800      	cmp	r0, #0
 23ef506:	d1f1      	bne.n	23ef4ec <_ZN15Adafruit_BMP3XX14performReadingEv+0x48>
  rslt = bmp3_get_sensor_data(sensor_comp, &data, &the_sensor);
 23ef508:	4632      	mov	r2, r6
 23ef50a:	4669      	mov	r1, sp
 23ef50c:	2003      	movs	r0, #3
 23ef50e:	f7f5 fc95 	bl	23e4e3c <bmp3_get_sensor_data>
  if (rslt != BMP3_OK)
 23ef512:	2800      	cmp	r0, #0
 23ef514:	d1ea      	bne.n	23ef4ec <_ZN15Adafruit_BMP3XX14performReadingEv+0x48>
  temperature = data.temperature;
 23ef516:	e9dd 2300 	ldrd	r2, r3, [sp]
  return true;
 23ef51a:	4628      	mov	r0, r5
  temperature = data.temperature;
 23ef51c:	e9c4 2300 	strd	r2, r3, [r4]
  pressure = data.pressure;
 23ef520:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23ef524:	e9c4 2302 	strd	r2, r3, [r4, #8]
  return true;
 23ef528:	e7e1      	b.n	23ef4ee <_ZN15Adafruit_BMP3XX14performReadingEv+0x4a>
 23ef52a:	bf00      	nop
 23ef52c:	1007ae5c 	.word	0x1007ae5c
 23ef530:	1007ae60 	.word	0x1007ae60

023ef534 <_ZN15Adafruit_BMP3XX15readTemperatureEv>:
float Adafruit_BMP3XX::readTemperature(void) {
 23ef534:	b510      	push	{r4, lr}
 23ef536:	4604      	mov	r4, r0
  performReading();
 23ef538:	f7ff ffb4 	bl	23ef4a4 <_ZN15Adafruit_BMP3XX14performReadingEv>
  return temperature;
 23ef53c:	e9d4 0100 	ldrd	r0, r1, [r4]
 23ef540:	f7f4 fc02 	bl	23e3d48 <__aeabi_d2f>
}
 23ef544:	ee00 0a10 	vmov	s0, r0
 23ef548:	bd10      	pop	{r4, pc}

023ef54a <_ZN15Adafruit_BMP3XX12readPressureEv>:
float Adafruit_BMP3XX::readPressure(void) {
 23ef54a:	b510      	push	{r4, lr}
 23ef54c:	4604      	mov	r4, r0
  performReading();
 23ef54e:	f7ff ffa9 	bl	23ef4a4 <_ZN15Adafruit_BMP3XX14performReadingEv>
  return pressure;
 23ef552:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 23ef556:	f7f4 fbf7 	bl	23e3d48 <__aeabi_d2f>
}
 23ef55a:	ee00 0a10 	vmov	s0, r0
 23ef55e:	bd10      	pop	{r4, pc}

023ef560 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
 23ef560:	b530      	push	{r4, r5, lr}
                                                 uint16_t reg_addr,
                                                 uint8_t width,
                                                 uint8_t byteorder,
                                                 uint8_t address_width) {
 23ef562:	2500      	movs	r5, #0
  _i2cdevice = i2cdevice;
  _spidevice = NULL;
  _addrwidth = address_width;
  _address = reg_addr;
 23ef564:	8142      	strh	r2, [r0, #10]
  _spidevice = NULL;
 23ef566:	e9c0 1500 	strd	r1, r5, [r0]
  _byteorder = byteorder;
 23ef56a:	f89d 200c 	ldrb.w	r2, [sp, #12]
  _addrwidth = address_width;
 23ef56e:	f89d 1010 	ldrb.w	r1, [sp, #16]
                                                 uint8_t address_width) {
 23ef572:	6145      	str	r5, [r0, #20]
  _addrwidth = address_width;
 23ef574:	7341      	strb	r1, [r0, #13]
  _byteorder = byteorder;
 23ef576:	7382      	strb	r2, [r0, #14]
  _width = width;
 23ef578:	7303      	strb	r3, [r0, #12]
}
 23ef57a:	bd30      	pop	{r4, r5, pc}

023ef57c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(
 23ef57c:	b530      	push	{r4, r5, lr}
    Adafruit_I2CDevice *i2cdevice, Adafruit_SPIDevice *spidevice,
    Adafruit_BusIO_SPIRegType type, uint16_t reg_addr, uint8_t width,
    uint8_t byteorder, uint8_t address_width) {
 23ef57e:	2500      	movs	r5, #0
  _spidevice = spidevice;
  _i2cdevice = i2cdevice;
  _spiregtype = type;
 23ef580:	7203      	strb	r3, [r0, #8]
  _addrwidth = address_width;
 23ef582:	f89d 3018 	ldrb.w	r3, [sp, #24]
  _i2cdevice = i2cdevice;
 23ef586:	e9c0 1200 	strd	r1, r2, [r0]
  _addrwidth = address_width;
 23ef58a:	7343      	strb	r3, [r0, #13]
  _address = reg_addr;
 23ef58c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    uint8_t byteorder, uint8_t address_width) {
 23ef590:	6145      	str	r5, [r0, #20]
  _address = reg_addr;
 23ef592:	8143      	strh	r3, [r0, #10]
  _byteorder = byteorder;
 23ef594:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23ef598:	7383      	strb	r3, [r0, #14]
  _width = width;
 23ef59a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 23ef59e:	7303      	strb	r3, [r0, #12]
}
 23ef5a0:	bd30      	pop	{r4, r5, pc}

023ef5a2 <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
 23ef5a2:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
 23ef5a4:	8945      	ldrh	r5, [r0, #10]
                           (uint8_t)(_address >> 8)};
 23ef5a6:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
 23ef5a8:	4603      	mov	r3, r0

  if (_i2cdevice) {
 23ef5aa:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
 23ef5ac:	b085      	sub	sp, #20
                           (uint8_t)(_address >> 8)};
 23ef5ae:	0a2d      	lsrs	r5, r5, #8
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
 23ef5b0:	460e      	mov	r6, r1
 23ef5b2:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
 23ef5b4:	f88d 400c 	strb.w	r4, [sp, #12]
 23ef5b8:	f88d 500d 	strb.w	r5, [sp, #13]
  if (_i2cdevice) {
 23ef5bc:	b140      	cbz	r0, 23ef5d0 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2e>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
 23ef5be:	7b5b      	ldrb	r3, [r3, #13]
 23ef5c0:	9301      	str	r3, [sp, #4]
 23ef5c2:	ab03      	add	r3, sp, #12
 23ef5c4:	9300      	str	r3, [sp, #0]
 23ef5c6:	2301      	movs	r3, #1
 23ef5c8:	f000 f90a 	bl	23ef7e0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
 23ef5cc:	b005      	add	sp, #20
 23ef5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
 23ef5d0:	6858      	ldr	r0, [r3, #4]
 23ef5d2:	2800      	cmp	r0, #0
 23ef5d4:	d0fa      	beq.n	23ef5cc <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
 23ef5d6:	f893 e008 	ldrb.w	lr, [r3, #8]
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
 23ef5da:	f893 c00d 	ldrb.w	ip, [r3, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
 23ef5de:	f1be 0f03 	cmp.w	lr, #3
 23ef5e2:	d10c      	bne.n	23ef5fe <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5c>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
 23ef5e4:	f10c 0301 	add.w	r3, ip, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
 23ef5e8:	f025 0501 	bic.w	r5, r5, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
 23ef5ec:	9300      	str	r3, [sp, #0]
      addrbuffer[0] =
 23ef5ee:	f88d 500c 	strb.w	r5, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
 23ef5f2:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
 23ef5f6:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
 23ef5f8:	f000 fa15 	bl	23efa26 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
 23ef5fc:	e7e6      	b.n	23ef5cc <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
 23ef5fe:	f1be 0f00 	cmp.w	lr, #0
 23ef602:	d109      	bne.n	23ef618 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x76>
      addrbuffer[0] &= ~0x80;
 23ef604:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
 23ef608:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
 23ef60c:	463a      	mov	r2, r7
 23ef60e:	4631      	mov	r1, r6
 23ef610:	f8cd c000 	str.w	ip, [sp]
 23ef614:	ab03      	add	r3, sp, #12
 23ef616:	e7ef      	b.n	23ef5f8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
 23ef618:	f1be 0f02 	cmp.w	lr, #2
 23ef61c:	d102      	bne.n	23ef624 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x82>
      addrbuffer[0] |= 0x80;
 23ef61e:	f064 047f 	orn	r4, r4, #127	; 0x7f
 23ef622:	e7f1      	b.n	23ef608 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x66>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
 23ef624:	f1be 0f01 	cmp.w	lr, #1
      addrbuffer[0] &= ~0x80;
 23ef628:	bf01      	itttt	eq
 23ef62a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 23ef62e:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
 23ef632:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 23ef636:	f88d 300c 	strbeq.w	r3, [sp, #12]
 23ef63a:	e7e7      	b.n	23ef60c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6a>

023ef63c <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
 23ef63c:	460b      	mov	r3, r1
 23ef63e:	b4f0      	push	{r4, r5, r6, r7}
  if (numbytes == 0) {
 23ef640:	b902      	cbnz	r2, 23ef644 <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
 23ef642:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
 23ef644:	2a04      	cmp	r2, #4
 23ef646:	d814      	bhi.n	23ef672 <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
 23ef648:	f100 050f 	add.w	r5, r0, #15
 23ef64c:	4629      	mov	r1, r5
 23ef64e:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
 23ef650:	1884      	adds	r4, r0, r2
 23ef652:	4284      	cmp	r4, r0
 23ef654:	d009      	beq.n	23ef66a <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
 23ef656:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
 23ef658:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
 23ef65a:	b927      	cbnz	r7, 23ef666 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
 23ef65c:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
 23ef65e:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
 23ef660:	3501      	adds	r5, #1
 23ef662:	3c01      	subs	r4, #1
 23ef664:	e7f5      	b.n	23ef652 <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
 23ef666:	73a6      	strb	r6, [r4, #14]
 23ef668:	e7f9      	b.n	23ef65e <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
 23ef66a:	4620      	mov	r0, r4
}
 23ef66c:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
 23ef66e:	f7ff bf98 	b.w	23ef5a2 <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
 23ef672:	2000      	movs	r0, #0
 23ef674:	bcf0      	pop	{r4, r5, r6, r7}
 23ef676:	4770      	bx	lr

023ef678 <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
 23ef678:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
 23ef67a:	8946      	ldrh	r6, [r0, #10]
                           (uint8_t)(_address >> 8)};
 23ef67c:	7a85      	ldrb	r5, [r0, #10]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
 23ef67e:	4604      	mov	r4, r0

  if (_i2cdevice) {
 23ef680:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
 23ef682:	0a36      	lsrs	r6, r6, #8
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
 23ef684:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
 23ef686:	f88d 500c 	strb.w	r5, [sp, #12]
 23ef68a:	f88d 600d 	strb.w	r6, [sp, #13]
  if (_i2cdevice) {
 23ef68e:	b140      	cbz	r0, 23ef6a2 <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
 23ef690:	2100      	movs	r1, #0
 23ef692:	e9cd 2100 	strd	r2, r1, [sp]
 23ef696:	a903      	add	r1, sp, #12
 23ef698:	7b62      	ldrb	r2, [r4, #13]
 23ef69a:	f000 f8f3 	bl	23ef884 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
 23ef69e:	b004      	add	sp, #16
 23ef6a0:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
 23ef6a2:	6860      	ldr	r0, [r4, #4]
 23ef6a4:	2800      	cmp	r0, #0
 23ef6a6:	d0fa      	beq.n	23ef69e <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
 23ef6a8:	7a21      	ldrb	r1, [r4, #8]
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
 23ef6aa:	7b64      	ldrb	r4, [r4, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
 23ef6ac:	2903      	cmp	r1, #3
 23ef6ae:	d10d      	bne.n	23ef6cc <_ZN23Adafruit_BusIO_Register4readEPhh+0x54>
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
 23ef6b0:	21ff      	movs	r1, #255	; 0xff
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
 23ef6b2:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
 23ef6b6:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
 23ef6ba:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
 23ef6be:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
 23ef6c2:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
 23ef6c4:	a903      	add	r1, sp, #12
 23ef6c6:	f000 f9e0 	bl	23efa8a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
 23ef6ca:	e7e8      	b.n	23ef69e <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
 23ef6cc:	b941      	cbnz	r1, 23ef6e0 <_ZN23Adafruit_BusIO_Register4readEPhh+0x68>
      addrbuffer[0] |= 0x80;
 23ef6ce:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
 23ef6d2:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
 23ef6d6:	21ff      	movs	r1, #255	; 0xff
 23ef6d8:	e9cd 2100 	strd	r2, r1, [sp]
 23ef6dc:	4622      	mov	r2, r4
 23ef6de:	e7f1      	b.n	23ef6c4 <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
 23ef6e0:	2902      	cmp	r1, #2
 23ef6e2:	d102      	bne.n	23ef6ea <_ZN23Adafruit_BusIO_Register4readEPhh+0x72>
      addrbuffer[0] &= ~0x80;
 23ef6e4:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 23ef6e8:	e7f3      	b.n	23ef6d2 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
 23ef6ea:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
 23ef6ec:	bf02      	ittt	eq
 23ef6ee:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
 23ef6f2:	f061 013f 	orneq	r1, r1, #63	; 0x3f
 23ef6f6:	f88d 100c 	strbeq.w	r1, [sp, #12]
 23ef6fa:	e7ec      	b.n	23ef6d6 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>

023ef6fc <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
 23ef6fc:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
 23ef6fe:	f100 050f 	add.w	r5, r0, #15
 23ef702:	4629      	mov	r1, r5
 23ef704:	7b02      	ldrb	r2, [r0, #12]
uint32_t Adafruit_BusIO_Register::read(void) {
 23ef706:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
 23ef708:	f7ff ffb6 	bl	23ef678 <_ZN23Adafruit_BusIO_Register4readEPhh>
 23ef70c:	b178      	cbz	r0, 23ef72e <_ZN23Adafruit_BusIO_Register4readEv+0x32>
 23ef70e:	4629      	mov	r1, r5
  uint32_t value = 0;
 23ef710:	2000      	movs	r0, #0
 23ef712:	7b22      	ldrb	r2, [r4, #12]
 23ef714:	4422      	add	r2, r4
  for (int i = 0; i < _width; i++) {
 23ef716:	42a2      	cmp	r2, r4
 23ef718:	d00b      	beq.n	23ef732 <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
 23ef71a:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
 23ef71c:	7ba0      	ldrb	r0, [r4, #14]
 23ef71e:	b920      	cbnz	r0, 23ef72a <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
 23ef720:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
 23ef722:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
 23ef724:	3a01      	subs	r2, #1
 23ef726:	3101      	adds	r1, #1
 23ef728:	e7f5      	b.n	23ef716 <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
 23ef72a:	7808      	ldrb	r0, [r1, #0]
 23ef72c:	e7f9      	b.n	23ef722 <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
 23ef72e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23ef732:	bd38      	pop	{r3, r4, r5, pc}

023ef734 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
 23ef734:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
 23ef736:	6001      	str	r1, [r0, #0]
  _bits = bits;
 23ef738:	7102      	strb	r2, [r0, #4]
  _shift = shift;
 23ef73a:	7143      	strb	r3, [r0, #5]
}
 23ef73c:	bd10      	pop	{r4, pc}

023ef73e <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
 23ef73e:	b510      	push	{r4, lr}
 23ef740:	4604      	mov	r4, r0
  uint32_t val = _register->read();
 23ef742:	6800      	ldr	r0, [r0, #0]
 23ef744:	f7ff ffda 	bl	23ef6fc <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
 23ef748:	2301      	movs	r3, #1
 23ef74a:	7922      	ldrb	r2, [r4, #4]
 23ef74c:	4093      	lsls	r3, r2
  val >>= _shift;
 23ef74e:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
 23ef750:	3b01      	subs	r3, #1
  val >>= _shift;
 23ef752:	40d0      	lsrs	r0, r2
}
 23ef754:	4018      	ands	r0, r3
 23ef756:	bd10      	pop	{r4, pc}

023ef758 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
 23ef758:	b570      	push	{r4, r5, r6, lr}
 23ef75a:	4604      	mov	r4, r0
  uint32_t val = _register->read();
 23ef75c:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
 23ef75e:	460e      	mov	r6, r1
  uint32_t val = _register->read();
 23ef760:	f7ff ffcc 	bl	23ef6fc <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
 23ef764:	2201      	movs	r2, #1
 23ef766:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
 23ef768:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits)) - 1;
 23ef76a:	409a      	lsls	r2, r3
 23ef76c:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
 23ef76e:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;          // remove the current data at that spot
 23ef772:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
 23ef776:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
 23ef778:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
 23ef77a:	fa03 f101 	lsl.w	r1, r3, r1
  return _register->write(val, _register->width());
 23ef77e:	4329      	orrs	r1, r5
 23ef780:	7b02      	ldrb	r2, [r0, #12]
}
 23ef782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
 23ef786:	f7ff bf59 	b.w	23ef63c <_ZN23Adafruit_BusIO_Register5writeEmh>

023ef78a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
 23ef78a:	6042      	str	r2, [r0, #4]
  _begun = false;
 23ef78c:	2200      	movs	r2, #0
 23ef78e:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
 23ef790:	2220      	movs	r2, #32
  _addr = addr;
 23ef792:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
 23ef794:	60c2      	str	r2, [r0, #12]
#endif
}
 23ef796:	4770      	bx	lr

023ef798 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
 23ef798:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
 23ef79a:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
 23ef79c:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
 23ef79e:	b153      	cbz	r3, 23ef7b6 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
 23ef7a0:	7821      	ldrb	r1, [r4, #0]
 23ef7a2:	6860      	ldr	r0, [r4, #4]
 23ef7a4:	f008 fd2e 	bl	23f8204 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
 23ef7a8:	6860      	ldr	r0, [r4, #4]
 23ef7aa:	f008 fd36 	bl	23f821a <_ZN7TwoWire15endTransmissionEv>
 23ef7ae:	fab0 f080 	clz	r0, r0
 23ef7b2:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
 23ef7b4:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
 23ef7b6:	2101      	movs	r1, #1
 23ef7b8:	f000 f803 	bl	23ef7c2 <_ZN18Adafruit_I2CDevice5beginEb>
 23ef7bc:	2800      	cmp	r0, #0
 23ef7be:	d1ef      	bne.n	23ef7a0 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
 23ef7c0:	e7f8      	b.n	23ef7b4 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

023ef7c2 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 23ef7c2:	b538      	push	{r3, r4, r5, lr}
 23ef7c4:	4604      	mov	r4, r0
  _wire->begin();
 23ef7c6:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
 23ef7c8:	460d      	mov	r5, r1
  _wire->begin();
 23ef7ca:	f008 fcf1 	bl	23f81b0 <_ZN7TwoWire5beginEv>
  _begun = true;
 23ef7ce:	2001      	movs	r0, #1
 23ef7d0:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
 23ef7d2:	b125      	cbz	r5, 23ef7de <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
 23ef7d4:	4620      	mov	r0, r4
}
 23ef7d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
 23ef7da:	f7ff bfdd 	b.w	23ef798 <_ZN18Adafruit_I2CDevice8detectedEv>
}
 23ef7de:	bd38      	pop	{r3, r4, r5, pc}

023ef7e0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
 23ef7e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ef7e4:	461f      	mov	r7, r3
 23ef7e6:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
  if ((len + prefix_len) > maxBufferSize()) {
 23ef7ea:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
 23ef7ec:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
 23ef7ee:	4432      	add	r2, r6
 23ef7f0:	429a      	cmp	r2, r3
                               size_t prefix_len) {
 23ef7f2:	4604      	mov	r4, r0
 23ef7f4:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
 23ef7f6:	d902      	bls.n	23ef7fe <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
 23ef7f8:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("Failed to send!");
#endif
    return false;
  }
}
 23ef7fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
 23ef7fe:	7801      	ldrb	r1, [r0, #0]
 23ef800:	6840      	ldr	r0, [r0, #4]
 23ef802:	f008 fcff 	bl	23f8204 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
 23ef806:	b97e      	cbnz	r6, 23ef828 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
 23ef808:	6860      	ldr	r0, [r4, #4]
 23ef80a:	462a      	mov	r2, r5
 23ef80c:	6803      	ldr	r3, [r0, #0]
 23ef80e:	4641      	mov	r1, r8
 23ef810:	68db      	ldr	r3, [r3, #12]
 23ef812:	4798      	blx	r3
 23ef814:	4285      	cmp	r5, r0
 23ef816:	d1ef      	bne.n	23ef7f8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
 23ef818:	4639      	mov	r1, r7
 23ef81a:	6860      	ldr	r0, [r4, #4]
 23ef81c:	f008 fcf9 	bl	23f8212 <_ZN7TwoWire15endTransmissionEh>
 23ef820:	fab0 f080 	clz	r0, r0
 23ef824:	0940      	lsrs	r0, r0, #5
 23ef826:	e7e8      	b.n	23ef7fa <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
 23ef828:	f1b9 0f00 	cmp.w	r9, #0
 23ef82c:	d0ec      	beq.n	23ef808 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
 23ef82e:	6860      	ldr	r0, [r4, #4]
 23ef830:	4632      	mov	r2, r6
 23ef832:	6803      	ldr	r3, [r0, #0]
 23ef834:	4649      	mov	r1, r9
 23ef836:	68db      	ldr	r3, [r3, #12]
 23ef838:	4798      	blx	r3
 23ef83a:	4286      	cmp	r6, r0
 23ef83c:	d1dc      	bne.n	23ef7f8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
 23ef83e:	e7e3      	b.n	23ef808 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

023ef840 <_ZN18Adafruit_I2CDevice4readEPhjb>:
 *    @param  buffer Pointer to buffer of data to read into
 *    @param  len Number of bytes from buffer to read.
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
 23ef840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ef844:	4615      	mov	r5, r2
  if (len > maxBufferSize()) {
 23ef846:	68c2      	ldr	r2, [r0, #12]
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
 23ef848:	4604      	mov	r4, r0
  if (len > maxBufferSize()) {
 23ef84a:	42aa      	cmp	r2, r5
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
 23ef84c:	460e      	mov	r6, r1
  if (len > maxBufferSize()) {
 23ef84e:	d314      	bcc.n	23ef87a <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
  }

#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
 23ef850:	7801      	ldrb	r1, [r0, #0]
 23ef852:	b2ea      	uxtb	r2, r5
 23ef854:	6840      	ldr	r0, [r0, #4]
 23ef856:	f008 fcbe 	bl	23f81d6 <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
 23ef85a:	4285      	cmp	r5, r0
 23ef85c:	d10d      	bne.n	23ef87a <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
 23ef85e:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
 23ef860:	fa1f f887 	uxth.w	r8, r7
 23ef864:	4545      	cmp	r5, r8
 23ef866:	f107 0701 	add.w	r7, r7, #1
 23ef86a:	d909      	bls.n	23ef880 <_ZN18Adafruit_I2CDevice4readEPhjb+0x40>
    buffer[i] = _wire->read();
 23ef86c:	6860      	ldr	r0, [r4, #4]
 23ef86e:	6803      	ldr	r3, [r0, #0]
 23ef870:	695b      	ldr	r3, [r3, #20]
 23ef872:	4798      	blx	r3
 23ef874:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
 23ef878:	e7f2      	b.n	23ef860 <_ZN18Adafruit_I2CDevice4readEPhjb+0x20>
    return false;
 23ef87a:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 23ef87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23ef880:	2001      	movs	r0, #1
 23ef882:	e7fb      	b.n	23ef87c <_ZN18Adafruit_I2CDevice4readEPhjb+0x3c>

023ef884 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
 23ef884:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23ef886:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
 23ef888:	2300      	movs	r3, #0
 23ef88a:	e9cd 3300 	strd	r3, r3, [sp]
 23ef88e:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
 23ef892:	4604      	mov	r4, r0
 23ef894:	9e06      	ldr	r6, [sp, #24]
  if (!write(write_buffer, write_len, stop)) {
 23ef896:	f7ff ffa3 	bl	23ef7e0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 23ef89a:	b140      	cbz	r0, 23ef8ae <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
 23ef89c:	2301      	movs	r3, #1
 23ef89e:	4632      	mov	r2, r6
 23ef8a0:	4629      	mov	r1, r5
 23ef8a2:	4620      	mov	r0, r4
}
 23ef8a4:	b002      	add	sp, #8
 23ef8a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
 23ef8aa:	f7ff bfc9 	b.w	23ef840 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
 23ef8ae:	b002      	add	sp, #8
 23ef8b0:	bd70      	pop	{r4, r5, r6, pc}

023ef8b2 <_ZN18Adafruit_SPIDeviceD1Ev>:
}

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
 23ef8b2:	b510      	push	{r4, lr}
 23ef8b4:	4604      	mov	r4, r0
  if (_spiSetting) {
 23ef8b6:	6840      	ldr	r0, [r0, #4]
 23ef8b8:	b110      	cbz	r0, 23ef8c0 <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
 23ef8ba:	6803      	ldr	r3, [r0, #0]
 23ef8bc:	689b      	ldr	r3, [r3, #8]
 23ef8be:	4798      	blx	r3
    _spiSetting = nullptr;
  }
}
 23ef8c0:	4620      	mov	r0, r4
 23ef8c2:	bd10      	pop	{r4, pc}

023ef8c4 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
 23ef8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ef8c8:	4604      	mov	r4, r0
  if (_spi) {
 23ef8ca:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
 23ef8cc:	460d      	mov	r5, r1
 23ef8ce:	b085      	sub	sp, #20
  if (_spi) {
 23ef8d0:	b140      	cbz	r0, 23ef8e4 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
 23ef8d2:	2300      	movs	r3, #0
 23ef8d4:	9300      	str	r3, [sp, #0]
 23ef8d6:	4613      	mov	r3, r2
 23ef8d8:	460a      	mov	r2, r1
 23ef8da:	f009 fa4b 	bl	23f8d74 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
 23ef8de:	b005      	add	sp, #20
 23ef8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
 23ef8e4:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23ef8e6:	68a0      	ldr	r0, [r4, #8]
    startbit = 0x80;
 23ef8e8:	2b00      	cmp	r3, #0
 23ef8ea:	bf0c      	ite	eq
 23ef8ec:	f04f 0b01 	moveq.w	fp, #1
 23ef8f0:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
 23ef8f4:	780b      	ldrb	r3, [r1, #0]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23ef8f6:	4f44      	ldr	r7, [pc, #272]	; (23efa08 <_ZN18Adafruit_SPIDevice8transferEPhj+0x144>)
  bool towrite, lastmosi = !(buffer[0] & startbit);
 23ef8f8:	ea1b 0f03 	tst.w	fp, r3
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23ef8fc:	fbb7 f7f0 	udiv	r7, r7, r0
  bool towrite, lastmosi = !(buffer[0] & startbit);
 23ef900:	bf0c      	ite	eq
 23ef902:	f04f 0901 	moveq.w	r9, #1
 23ef906:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
 23ef90a:	188b      	adds	r3, r1, r2
 23ef90c:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
 23ef90e:	9303      	str	r3, [sp, #12]
 23ef910:	9b03      	ldr	r3, [sp, #12]
 23ef912:	42ab      	cmp	r3, r5
 23ef914:	d0e3      	beq.n	23ef8de <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    for (uint8_t b = startbit; b != 0;
 23ef916:	465e      	mov	r6, fp
    uint8_t reply = 0;
 23ef918:	f04f 0800 	mov.w	r8, #0
    uint8_t send = buffer[i];
 23ef91c:	f895 a000 	ldrb.w	sl, [r5]
      if (bitdelay_us) {
 23ef920:	b117      	cbz	r7, 23ef928 <_ZN18Adafruit_SPIDevice8transferEPhj+0x64>
 23ef922:	4638      	mov	r0, r7
 23ef924:	f006 ff1e 	bl	23f6764 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
 23ef928:	7b63      	ldrb	r3, [r4, #13]
 23ef92a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 23ef92e:	d141      	bne.n	23ef9b4 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf0>
        if ((_mosi != -1) && (lastmosi != towrite)) {
 23ef930:	f994 3010 	ldrsb.w	r3, [r4, #16]
 23ef934:	1c5a      	adds	r2, r3, #1
 23ef936:	d00f      	beq.n	23ef958 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
        towrite = send & b;
 23ef938:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
 23ef93c:	bf14      	ite	ne
 23ef93e:	2301      	movne	r3, #1
 23ef940:	2300      	moveq	r3, #0
 23ef942:	454b      	cmp	r3, r9
 23ef944:	d008      	beq.n	23ef958 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
            *mosiPort |= mosiPinMask;
 23ef946:	6963      	ldr	r3, [r4, #20]
 23ef948:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23ef94a:	681a      	ldr	r2, [r3, #0]
          if (towrite)
 23ef94c:	2900      	cmp	r1, #0
 23ef94e:	d02c      	beq.n	23ef9aa <_ZN18Adafruit_SPIDevice8transferEPhj+0xe6>
            *mosiPort |= mosiPinMask;
 23ef950:	f04f 0901 	mov.w	r9, #1
 23ef954:	4302      	orrs	r2, r0
 23ef956:	601a      	str	r2, [r3, #0]
        *clkPort |= clkPinMask; // Clock high
 23ef958:	69a1      	ldr	r1, [r4, #24]
 23ef95a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23ef95c:	680a      	ldr	r2, [r1, #0]
 23ef95e:	4313      	orrs	r3, r2
 23ef960:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
 23ef962:	b117      	cbz	r7, 23ef96a <_ZN18Adafruit_SPIDevice8transferEPhj+0xa6>
 23ef964:	4638      	mov	r0, r7
 23ef966:	f006 fefd 	bl	23f6764 <HAL_Delay_Microseconds>
        if (_miso != -1) {
 23ef96a:	f994 3011 	ldrsb.w	r3, [r4, #17]
 23ef96e:	3301      	adds	r3, #1
 23ef970:	d006      	beq.n	23ef980 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbc>
          if (*misoPort & misoPinMask) {
 23ef972:	69e3      	ldr	r3, [r4, #28]
 23ef974:	681a      	ldr	r2, [r3, #0]
 23ef976:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 23ef978:	421a      	tst	r2, r3
            reply |= b;
 23ef97a:	bf18      	it	ne
 23ef97c:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
 23ef980:	69a1      	ldr	r1, [r4, #24]
 23ef982:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23ef984:	680a      	ldr	r2, [r1, #0]
 23ef986:	ea22 0303 	bic.w	r3, r2, r3
 23ef98a:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
 23ef98c:	f994 3011 	ldrsb.w	r3, [r4, #17]
 23ef990:	3301      	adds	r3, #1
        buffer[i] = reply;
 23ef992:	bf18      	it	ne
 23ef994:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
 23ef998:	7b23      	ldrb	r3, [r4, #12]
 23ef99a:	2b00      	cmp	r3, #0
 23ef99c:	d132      	bne.n	23efa04 <_ZN18Adafruit_SPIDevice8transferEPhj+0x140>
 23ef99e:	0076      	lsls	r6, r6, #1
 23ef9a0:	b2f6      	uxtb	r6, r6
 23ef9a2:	2e00      	cmp	r6, #0
 23ef9a4:	d1bc      	bne.n	23ef920 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5c>
  for (size_t i = 0; i < len; i++) {
 23ef9a6:	3501      	adds	r5, #1
 23ef9a8:	e7b2      	b.n	23ef910 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4c>
            *mosiPort &= ~mosiPinMask;
 23ef9aa:	ea22 0200 	bic.w	r2, r2, r0
 23ef9ae:	4689      	mov	r9, r1
 23ef9b0:	601a      	str	r2, [r3, #0]
 23ef9b2:	e7d1      	b.n	23ef958 <_ZN18Adafruit_SPIDevice8transferEPhj+0x94>
        *clkPort |= clkPinMask; // Clock high
 23ef9b4:	69a1      	ldr	r1, [r4, #24]
 23ef9b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23ef9b8:	680a      	ldr	r2, [r1, #0]
 23ef9ba:	4313      	orrs	r3, r2
 23ef9bc:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
 23ef9be:	b117      	cbz	r7, 23ef9c6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x102>
 23ef9c0:	4638      	mov	r0, r7
 23ef9c2:	f006 fecf 	bl	23f6764 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
 23ef9c6:	f994 3010 	ldrsb.w	r3, [r4, #16]
 23ef9ca:	3301      	adds	r3, #1
 23ef9cc:	d008      	beq.n	23ef9e0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11c>
            *mosiPort |= mosiPinMask;
 23ef9ce:	6963      	ldr	r3, [r4, #20]
 23ef9d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 23ef9d2:	681a      	ldr	r2, [r3, #0]
          if (send & b)
 23ef9d4:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
 23ef9d8:	bf14      	ite	ne
 23ef9da:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
 23ef9dc:	438a      	biceq	r2, r1
 23ef9de:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
 23ef9e0:	69a1      	ldr	r1, [r4, #24]
 23ef9e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23ef9e4:	680a      	ldr	r2, [r1, #0]
 23ef9e6:	ea22 0303 	bic.w	r3, r2, r3
 23ef9ea:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
 23ef9ec:	f994 3011 	ldrsb.w	r3, [r4, #17]
 23ef9f0:	3301      	adds	r3, #1
 23ef9f2:	d0cb      	beq.n	23ef98c <_ZN18Adafruit_SPIDevice8transferEPhj+0xc8>
          if (*misoPort & misoPinMask) {
 23ef9f4:	69e3      	ldr	r3, [r4, #28]
 23ef9f6:	681a      	ldr	r2, [r3, #0]
 23ef9f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 23ef9fa:	421a      	tst	r2, r3
            reply |= b;
 23ef9fc:	bf18      	it	ne
 23ef9fe:	ea46 0808 	orrne.w	r8, r6, r8
 23efa02:	e7c3      	b.n	23ef98c <_ZN18Adafruit_SPIDevice8transferEPhj+0xc8>
    for (uint8_t b = startbit; b != 0;
 23efa04:	0876      	lsrs	r6, r6, #1
 23efa06:	e7cc      	b.n	23ef9a2 <_ZN18Adafruit_SPIDevice8transferEPhj+0xde>
 23efa08:	0007a120 	.word	0x0007a120

023efa0c <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
 23efa0c:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
 23efa0e:	2201      	movs	r2, #1
  uint8_t data = send;
 23efa10:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
 23efa14:	f10d 0107 	add.w	r1, sp, #7
 23efa18:	f7ff ff54 	bl	23ef8c4 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
 23efa1c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 23efa20:	b003      	add	sp, #12
 23efa22:	f85d fb04 	ldr.w	pc, [sp], #4

023efa26 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
 23efa26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23efa2a:	4604      	mov	r4, r0
  if (_spi) {
 23efa2c:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
 23efa2e:	460e      	mov	r6, r1
 23efa30:	4617      	mov	r7, r2
 23efa32:	461d      	mov	r5, r3
  if (_spi) {
 23efa34:	b110      	cbz	r0, 23efa3c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
 23efa36:	6861      	ldr	r1, [r4, #4]
 23efa38:	f009 f928 	bl	23f8c8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
 23efa3c:	f994 000e 	ldrsb.w	r0, [r4, #14]
 23efa40:	2100      	movs	r1, #0
 23efa42:	b280      	uxth	r0, r0
 23efa44:	f00a f80b 	bl	23f9a5e <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
 23efa48:	9b06      	ldr	r3, [sp, #24]
 23efa4a:	eb05 0803 	add.w	r8, r5, r3
 23efa4e:	4545      	cmp	r5, r8
 23efa50:	d108      	bne.n	23efa64 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
 23efa52:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
 23efa54:	42b7      	cmp	r7, r6
 23efa56:	d00b      	beq.n	23efa70 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
 23efa58:	4620      	mov	r0, r4
 23efa5a:	f816 1b01 	ldrb.w	r1, [r6], #1
 23efa5e:	f7ff ffd5 	bl	23efa0c <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
 23efa62:	e7f7      	b.n	23efa54 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
 23efa64:	4620      	mov	r0, r4
 23efa66:	f815 1b01 	ldrb.w	r1, [r5], #1
 23efa6a:	f7ff ffcf 	bl	23efa0c <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
 23efa6e:	e7ee      	b.n	23efa4e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
 23efa70:	f994 000e 	ldrsb.w	r0, [r4, #14]
 23efa74:	2101      	movs	r1, #1
 23efa76:	b280      	uxth	r0, r0
 23efa78:	f009 fff1 	bl	23f9a5e <digitalWrite>

  if (_spi) {
 23efa7c:	6820      	ldr	r0, [r4, #0]
 23efa7e:	b108      	cbz	r0, 23efa84 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
 23efa80:	f009 f8ea 	bl	23f8c58 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 23efa84:	2001      	movs	r0, #1
 23efa86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023efa8a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
 23efa8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23efa8e:	4604      	mov	r4, r0
  if (_spi) {
 23efa90:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
 23efa92:	460e      	mov	r6, r1
 23efa94:	4617      	mov	r7, r2
 23efa96:	461d      	mov	r5, r3
 23efa98:	f89d 801c 	ldrb.w	r8, [sp, #28]
  if (_spi) {
 23efa9c:	b110      	cbz	r0, 23efaa4 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
 23efa9e:	6861      	ldr	r1, [r4, #4]
 23efaa0:	f009 f8f4 	bl	23f8c8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
 23efaa4:	f994 000e 	ldrsb.w	r0, [r4, #14]
 23efaa8:	2100      	movs	r1, #0
 23efaaa:	b280      	uxth	r0, r0
 23efaac:	f009 ffd7 	bl	23f9a5e <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
 23efab0:	4437      	add	r7, r6
 23efab2:	42be      	cmp	r6, r7
 23efab4:	d10a      	bne.n	23efacc <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
 23efab6:	9b06      	ldr	r3, [sp, #24]
 23efab8:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
 23efaba:	42ae      	cmp	r6, r5
 23efabc:	d00c      	beq.n	23efad8 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
 23efabe:	4641      	mov	r1, r8
 23efac0:	4620      	mov	r0, r4
 23efac2:	f7ff ffa3 	bl	23efa0c <_ZN18Adafruit_SPIDevice8transferEh>
 23efac6:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
 23efaca:	e7f6      	b.n	23efaba <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
 23efacc:	4620      	mov	r0, r4
 23eface:	f816 1b01 	ldrb.w	r1, [r6], #1
 23efad2:	f7ff ff9b 	bl	23efa0c <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
 23efad6:	e7ec      	b.n	23efab2 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
 23efad8:	f994 000e 	ldrsb.w	r0, [r4, #14]
 23efadc:	2101      	movs	r1, #1
 23efade:	b280      	uxth	r0, r0
 23efae0:	f009 ffbd 	bl	23f9a5e <digitalWrite>

  if (_spi) {
 23efae4:	6820      	ldr	r0, [r4, #0]
 23efae6:	b108      	cbz	r0, 23efaec <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
 23efae8:	f009 f8b6 	bl	23f8c58 <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
 23efaec:	2001      	movs	r0, #1
 23efaee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023efaf2 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
 23efaf2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23efaf6:	461f      	mov	r7, r3
 23efaf8:	b085      	sub	sp, #20
 23efafa:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
#if defined(ESP8266)
  yield();
#endif
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 23efafe:	eba7 0a01 	sub.w	sl, r7, r1
 23efb02:	eba8 0902 	sub.w	r9, r8, r2
 23efb06:	f1b9 0f00 	cmp.w	r9, #0
 23efb0a:	bfb8      	it	lt
 23efb0c:	f1c9 0900 	rsblt	r9, r9, #0
 23efb10:	f1ba 0f00 	cmp.w	sl, #0
 23efb14:	bfb8      	it	lt
 23efb16:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
 23efb1a:	45d1      	cmp	r9, sl
                             uint16_t color) {
 23efb1c:	4683      	mov	fp, r0
 23efb1e:	460c      	mov	r4, r1
 23efb20:	4615      	mov	r5, r2
 23efb22:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  if (steep) {
 23efb26:	dd04      	ble.n	23efb32 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
 23efb28:	463a      	mov	r2, r7
    _swap_int16_t(x0, y0);
 23efb2a:	462c      	mov	r4, r5
    _swap_int16_t(x1, y1);
 23efb2c:	4647      	mov	r7, r8
    _swap_int16_t(x0, y0);
 23efb2e:	460d      	mov	r5, r1
    _swap_int16_t(x1, y1);
 23efb30:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
 23efb32:	42bc      	cmp	r4, r7
 23efb34:	dd05      	ble.n	23efb42 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
 23efb36:	462a      	mov	r2, r5
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
 23efb38:	4645      	mov	r5, r8
 23efb3a:	4690      	mov	r8, r2
  if (x0 > x1) {
 23efb3c:	4622      	mov	r2, r4
 23efb3e:	463c      	mov	r4, r7
 23efb40:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
 23efb42:	1b3e      	subs	r6, r7, r4
 23efb44:	b2b2      	uxth	r2, r6
 23efb46:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
 23efb48:	eba8 0205 	sub.w	r2, r8, r5
 23efb4c:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 23efb50:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
 23efb54:	f3c6 32c0 	ubfx	r2, r6, #15, #1
 23efb58:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 23efb5c:	4545      	cmp	r5, r8
 23efb5e:	bfb4      	ite	lt
 23efb60:	2201      	movlt	r2, #1
 23efb62:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
  dy = abs(y1 - y0);
 23efb66:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
 23efb68:	1076      	asrs	r6, r6, #1
    ystep = -1;
 23efb6a:	9202      	str	r2, [sp, #8]
  }

  for (; x0 <= x1; x0++) {
 23efb6c:	42bc      	cmp	r4, r7
 23efb6e:	dc1c      	bgt.n	23efbaa <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
    if (steep) {
      writePixel(y0, x0, color);
 23efb70:	f8db 2000 	ldr.w	r2, [fp]
    if (steep) {
 23efb74:	45d1      	cmp	r9, sl
      writePixel(y0, x0, color);
 23efb76:	f8d2 8018 	ldr.w	r8, [r2, #24]
 23efb7a:	bfc7      	ittee	gt
 23efb7c:	4629      	movgt	r1, r5
 23efb7e:	4622      	movgt	r2, r4
    } else {
      writePixel(x0, y0, color);
 23efb80:	462a      	movle	r2, r5
 23efb82:	4621      	movle	r1, r4
      writePixel(y0, x0, color);
 23efb84:	9303      	str	r3, [sp, #12]
      writePixel(x0, y0, color);
 23efb86:	4658      	mov	r0, fp
 23efb88:	47c0      	blx	r8
    }
    err -= dy;
 23efb8a:	9a01      	ldr	r2, [sp, #4]
      writePixel(x0, y0, color);
 23efb8c:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
 23efb8e:	1ab6      	subs	r6, r6, r2
 23efb90:	b2b1      	uxth	r1, r6
 23efb92:	b236      	sxth	r6, r6
    if (err < 0) {
 23efb94:	2e00      	cmp	r6, #0
 23efb96:	da05      	bge.n	23efba4 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
      y0 += ystep;
 23efb98:	9a02      	ldr	r2, [sp, #8]
 23efb9a:	4415      	add	r5, r2
      err += dx;
 23efb9c:	9a00      	ldr	r2, [sp, #0]
      y0 += ystep;
 23efb9e:	b22d      	sxth	r5, r5
      err += dx;
 23efba0:	1856      	adds	r6, r2, r1
 23efba2:	b236      	sxth	r6, r6
  for (; x0 <= x1; x0++) {
 23efba4:	3401      	adds	r4, #1
 23efba6:	b224      	sxth	r4, r4
 23efba8:	e7e0      	b.n	23efb6c <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
    }
  }
}
 23efbaa:	b005      	add	sp, #20
 23efbac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023efbb0 <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
 23efbb0:	4770      	bx	lr

023efbb2 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
 23efbb2:	b410      	push	{r4}
  drawPixel(x, y, color);
 23efbb4:	6804      	ldr	r4, [r0, #0]
 23efbb6:	6924      	ldr	r4, [r4, #16]
 23efbb8:	46a4      	mov	ip, r4
}
 23efbba:	f85d 4b04 	ldr.w	r4, [sp], #4
  drawPixel(x, y, color);
 23efbbe:	4760      	bx	ip

023efbc0 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
 23efbc0:	b430      	push	{r4, r5}
 23efbc2:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
 23efbc6:	6804      	ldr	r4, [r0, #0]
 23efbc8:	9502      	str	r5, [sp, #8]
 23efbca:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 23efbcc:	46a4      	mov	ip, r4
}
 23efbce:	bc30      	pop	{r4, r5}
  drawFastVLine(x, y, h, color);
 23efbd0:	4760      	bx	ip

023efbd2 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
 23efbd2:	b430      	push	{r4, r5}
 23efbd4:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
 23efbd8:	6804      	ldr	r4, [r0, #0]
 23efbda:	9502      	str	r5, [sp, #8]
 23efbdc:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 23efbde:	46a4      	mov	ip, r4
}
 23efbe0:	bc30      	pop	{r4, r5}
  drawFastHLine(x, y, w, color);
 23efbe2:	4760      	bx	ip

023efbe4 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
 23efbe4:	b470      	push	{r4, r5, r6}
 23efbe6:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 23efbea:	f8bd 6010 	ldrh.w	r6, [sp, #16]
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
 23efbee:	6804      	ldr	r4, [r0, #0]
 23efbf0:	e9cd 5603 	strd	r5, r6, [sp, #12]
 23efbf4:	6c24      	ldr	r4, [r4, #64]	; 0x40
 23efbf6:	46a4      	mov	ip, r4
}
 23efbf8:	bc70      	pop	{r4, r5, r6}
  fillRect(x, y, w, h, color);
 23efbfa:	4760      	bx	ip

023efbfc <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
 23efbfc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23efc00:	461c      	mov	r4, r3
 23efc02:	4616      	mov	r6, r2
 23efc04:	4605      	mov	r5, r0
 23efc06:	460f      	mov	r7, r1
  startWrite();
 23efc08:	6803      	ldr	r3, [r0, #0]
  writeLine(x, y, x, y + h - 1, color);
 23efc0a:	3c01      	subs	r4, #1
                                 uint16_t color) {
 23efc0c:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
 23efc10:	695b      	ldr	r3, [r3, #20]
  writeLine(x, y, x, y + h - 1, color);
 23efc12:	4434      	add	r4, r6
  startWrite();
 23efc14:	4798      	blx	r3
  writeLine(x, y, x, y + h - 1, color);
 23efc16:	b224      	sxth	r4, r4
 23efc18:	682b      	ldr	r3, [r5, #0]
 23efc1a:	f8cd 8004 	str.w	r8, [sp, #4]
 23efc1e:	9400      	str	r4, [sp, #0]
 23efc20:	4628      	mov	r0, r5
 23efc22:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 23efc24:	4632      	mov	r2, r6
 23efc26:	463b      	mov	r3, r7
 23efc28:	4639      	mov	r1, r7
 23efc2a:	47a0      	blx	r4
  endWrite();
 23efc2c:	4628      	mov	r0, r5
 23efc2e:	682b      	ldr	r3, [r5, #0]
 23efc30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23efc32:	b002      	add	sp, #8
 23efc34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
 23efc38:	4718      	bx	r3

023efc3a <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
 23efc3a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23efc3e:	4617      	mov	r7, r2
 23efc40:	4604      	mov	r4, r0
 23efc42:	461d      	mov	r5, r3
 23efc44:	460e      	mov	r6, r1
  startWrite();
 23efc46:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
 23efc48:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
 23efc4c:	695b      	ldr	r3, [r3, #20]
 23efc4e:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
 23efc50:	e9cd 7800 	strd	r7, r8, [sp]
 23efc54:	6822      	ldr	r2, [r4, #0]
 23efc56:	1e6b      	subs	r3, r5, #1
 23efc58:	4433      	add	r3, r6
 23efc5a:	4620      	mov	r0, r4
 23efc5c:	6a95      	ldr	r5, [r2, #40]	; 0x28
 23efc5e:	4631      	mov	r1, r6
 23efc60:	463a      	mov	r2, r7
 23efc62:	b21b      	sxth	r3, r3
 23efc64:	47a8      	blx	r5
  endWrite();
 23efc66:	4620      	mov	r0, r4
 23efc68:	6823      	ldr	r3, [r4, #0]
 23efc6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23efc6c:	b002      	add	sp, #8
 23efc6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
 23efc72:	4718      	bx	r3

023efc74 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 23efc74:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23efc78:	461e      	mov	r6, r3
  startWrite();
 23efc7a:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
 23efc7c:	460c      	mov	r4, r1
  startWrite();
 23efc7e:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
 23efc80:	4605      	mov	r5, r0
 23efc82:	4617      	mov	r7, r2
 23efc84:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 23efc88:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  startWrite();
 23efc8c:	4798      	blx	r3
  for (int16_t i = x; i < x + w; i++) {
 23efc8e:	4426      	add	r6, r4
 23efc90:	42b4      	cmp	r4, r6
    writeFastVLine(i, y, h, color);
 23efc92:	682b      	ldr	r3, [r5, #0]
  for (int16_t i = x; i < x + w; i++) {
 23efc94:	da0b      	bge.n	23efcae <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
    writeFastVLine(i, y, h, color);
 23efc96:	f8cd 8000 	str.w	r8, [sp]
 23efc9a:	4621      	mov	r1, r4
 23efc9c:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23efca0:	463a      	mov	r2, r7
 23efca2:	464b      	mov	r3, r9
 23efca4:	4628      	mov	r0, r5
 23efca6:	3401      	adds	r4, #1
 23efca8:	47d0      	blx	sl
  for (int16_t i = x; i < x + w; i++) {
 23efcaa:	b224      	sxth	r4, r4
 23efcac:	e7f0      	b.n	23efc90 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
  }
  endWrite();
 23efcae:	4628      	mov	r0, r5
 23efcb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23efcb2:	b002      	add	sp, #8
 23efcb4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
 23efcb8:	4718      	bx	r3

023efcba <_ZN12Adafruit_GFX10fillScreenEt>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
 23efcba:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 23efcbc:	9101      	str	r1, [sp, #4]
 23efcbe:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 23efcc2:	6802      	ldr	r2, [r0, #0]
 23efcc4:	9100      	str	r1, [sp, #0]
 23efcc6:	6c14      	ldr	r4, [r2, #64]	; 0x40
 23efcc8:	2200      	movs	r2, #0
 23efcca:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23efcce:	4611      	mov	r1, r2
 23efcd0:	47a0      	blx	r4
}
 23efcd2:	b002      	add	sp, #8
 23efcd4:	bd10      	pop	{r4, pc}

023efcd6 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                            uint16_t color) {
 23efcd6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  // Update in subclasses if desired!
  if (x0 == x1) {
 23efcda:	4299      	cmp	r1, r3
                            uint16_t color) {
 23efcdc:	4616      	mov	r6, r2
 23efcde:	4680      	mov	r8, r0
 23efce0:	460d      	mov	r5, r1
 23efce2:	461c      	mov	r4, r3
 23efce4:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 23efce8:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
    if (y0 > y1)
      _swap_int16_t(y0, y1);
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23efcec:	6802      	ldr	r2, [r0, #0]
  if (x0 == x1) {
 23efcee:	d112      	bne.n	23efd16 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
    if (y0 > y1)
 23efcf0:	42be      	cmp	r6, r7
 23efcf2:	bfc2      	ittt	gt
 23efcf4:	4633      	movgt	r3, r6
 23efcf6:	463e      	movgt	r6, r7
 23efcf8:	461f      	movgt	r7, r3
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23efcfa:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23efcfe:	1c7b      	adds	r3, r7, #1
 23efd00:	6b94      	ldr	r4, [r2, #56]	; 0x38
 23efd02:	1b9b      	subs	r3, r3, r6
  } else if (y0 == y1) {
    if (x0 > x1)
      _swap_int16_t(x0, x1);
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23efd04:	4632      	mov	r2, r6
 23efd06:	4629      	mov	r1, r5
 23efd08:	4640      	mov	r0, r8
 23efd0a:	46a4      	mov	ip, r4
 23efd0c:	b21b      	sxth	r3, r3
  } else {
    startWrite();
    writeLine(x0, y0, x1, y1, color);
    endWrite();
  }
}
 23efd0e:	b003      	add	sp, #12
 23efd10:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23efd14:	4760      	bx	ip
  } else if (y0 == y1) {
 23efd16:	42be      	cmp	r6, r7
 23efd18:	d10a      	bne.n	23efd30 <_ZN12Adafruit_GFX8drawLineEsssst+0x5a>
    if (x0 > x1)
 23efd1a:	4299      	cmp	r1, r3
 23efd1c:	bfc2      	ittt	gt
 23efd1e:	460b      	movgt	r3, r1
 23efd20:	4625      	movgt	r5, r4
 23efd22:	461c      	movgt	r4, r3
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23efd24:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23efd28:	1c63      	adds	r3, r4, #1
 23efd2a:	1b5b      	subs	r3, r3, r5
 23efd2c:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 23efd2e:	e7e9      	b.n	23efd04 <_ZN12Adafruit_GFX8drawLineEsssst+0x2e>
    startWrite();
 23efd30:	6953      	ldr	r3, [r2, #20]
 23efd32:	4798      	blx	r3
    writeLine(x0, y0, x1, y1, color);
 23efd34:	e9cd 7900 	strd	r7, r9, [sp]
 23efd38:	f8d8 3000 	ldr.w	r3, [r8]
 23efd3c:	4640      	mov	r0, r8
 23efd3e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 23efd40:	4632      	mov	r2, r6
 23efd42:	4623      	mov	r3, r4
 23efd44:	4629      	mov	r1, r5
 23efd46:	47b8      	blx	r7
    endWrite();
 23efd48:	4640      	mov	r0, r8
 23efd4a:	f8d8 3000 	ldr.w	r3, [r8]
 23efd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23efd50:	b003      	add	sp, #12
 23efd52:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    endWrite();
 23efd56:	4718      	bx	r3

023efd58 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 23efd58:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23efd5c:	4604      	mov	r4, r0
 23efd5e:	460f      	mov	r7, r1
 23efd60:	4616      	mov	r6, r2
 23efd62:	461d      	mov	r5, r3
  startWrite();
 23efd64:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
 23efd66:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  startWrite();
 23efd6a:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
 23efd6c:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  startWrite();
 23efd70:	4798      	blx	r3
  writeFastHLine(x, y, w, color);
 23efd72:	6823      	ldr	r3, [r4, #0]
 23efd74:	f8cd 8000 	str.w	r8, [sp]
 23efd78:	4632      	mov	r2, r6
 23efd7a:	4639      	mov	r1, r7
 23efd7c:	4620      	mov	r0, r4
 23efd7e:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23efd82:	462b      	mov	r3, r5
 23efd84:	47d0      	blx	sl
  writeFastHLine(x, y + h - 1, w, color);
 23efd86:	6823      	ldr	r3, [r4, #0]
 23efd88:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 23efd8c:	f8cd 8000 	str.w	r8, [sp]
 23efd90:	4432      	add	r2, r6
 23efd92:	4639      	mov	r1, r7
 23efd94:	4620      	mov	r0, r4
 23efd96:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23efd9a:	b212      	sxth	r2, r2
 23efd9c:	462b      	mov	r3, r5
 23efd9e:	47d0      	blx	sl
  writeFastVLine(x, y, h, color);
 23efda0:	6823      	ldr	r3, [r4, #0]
 23efda2:	f8cd 8000 	str.w	r8, [sp]
 23efda6:	4632      	mov	r2, r6
 23efda8:	4639      	mov	r1, r7
 23efdaa:	4620      	mov	r0, r4
 23efdac:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23efdb0:	464b      	mov	r3, r9
 23efdb2:	47d0      	blx	sl
  writeFastVLine(x + w - 1, y, h, color);
 23efdb4:	1e6b      	subs	r3, r5, #1
 23efdb6:	19d9      	adds	r1, r3, r7
 23efdb8:	6823      	ldr	r3, [r4, #0]
 23efdba:	f8cd 8000 	str.w	r8, [sp]
 23efdbe:	4620      	mov	r0, r4
 23efdc0:	6a1d      	ldr	r5, [r3, #32]
 23efdc2:	4632      	mov	r2, r6
 23efdc4:	464b      	mov	r3, r9
 23efdc6:	b209      	sxth	r1, r1
 23efdc8:	47a8      	blx	r5
  endWrite();
 23efdca:	4620      	mov	r0, r4
 23efdcc:	6823      	ldr	r3, [r4, #0]
 23efdce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23efdd0:	b002      	add	sp, #8
 23efdd2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
 23efdd6:	4718      	bx	r3

023efdd8 <_ZN12Adafruit_GFX13invertDisplayEb>:
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
 23efdd8:	4770      	bx	lr

023efdda <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
 23efdda:	f001 0303 	and.w	r3, r1, #3
    _height = HEIGHT;
 23efdde:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
  rotation = (x & 3);
 23efde2:	7683      	strb	r3, [r0, #26]
    _width = WIDTH;
 23efde4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
  switch (rotation) {
 23efde8:	07c9      	lsls	r1, r1, #31
    _width = WIDTH;
 23efdea:	bf59      	ittee	pl
 23efdec:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
 23efdee:	81c2      	strhpl	r2, [r0, #14]
    _width = HEIGHT;
 23efdf0:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
 23efdf2:	81c3      	strhmi	r3, [r0, #14]
}
 23efdf4:	4770      	bx	lr
	...

023efdf8 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 23efdf8:	b530      	push	{r4, r5, lr}
 23efdfa:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
 23efdfc:	2400      	movs	r4, #0
  _width = WIDTH;
 23efdfe:	8181      	strh	r1, [r0, #12]
  textsize_x = textsize_y = 1;
 23efe00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 23efe04:	4d05      	ldr	r5, [pc, #20]	; (23efe1c <_ZN12Adafruit_GFXC1Ess+0x24>)
 23efe06:	8142      	strh	r2, [r0, #10]
  _height = HEIGHT;
 23efe08:	81c2      	strh	r2, [r0, #14]
  textsize_x = textsize_y = 1;
 23efe0a:	4a05      	ldr	r2, [pc, #20]	; (23efe20 <_ZN12Adafruit_GFXC1Ess+0x28>)
 23efe0c:	6044      	str	r4, [r0, #4]
 23efe0e:	e9c0 1205 	strd	r1, r2, [r0, #20]
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 23efe12:	6005      	str	r5, [r0, #0]
  cursor_y = cursor_x = 0;
 23efe14:	6104      	str	r4, [r0, #16]
  _cp437 = false;
 23efe16:	7704      	strb	r4, [r0, #28]
  gfxFont = NULL;
 23efe18:	6204      	str	r4, [r0, #32]
}
 23efe1a:	bd30      	pop	{r4, r5, pc}
 23efe1c:	023feee4 	.word	0x023feee4
 23efe20:	01000101 	.word	0x01000101

023efe24 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
                              int16_t w, int16_t h, uint16_t color) {
 23efe24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  startWrite();
 23efe28:	2600      	movs	r6, #0
  uint8_t byte = 0;
 23efe2a:	4635      	mov	r5, r6
                              int16_t w, int16_t h, uint16_t color) {
 23efe2c:	b089      	sub	sp, #36	; 0x24
 23efe2e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 23efe32:	9304      	str	r3, [sp, #16]
  startWrite();
 23efe34:	6802      	ldr	r2, [r0, #0]
                              int16_t w, int16_t h, uint16_t color) {
 23efe36:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 23efe3a:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
  startWrite();
 23efe3e:	6952      	ldr	r2, [r2, #20]
                              int16_t w, int16_t h, uint16_t color) {
 23efe40:	9305      	str	r3, [sp, #20]
 23efe42:	4604      	mov	r4, r0
 23efe44:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
  startWrite();
 23efe48:	4790      	blx	r2
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 23efe4a:	f118 0207 	adds.w	r2, r8, #7
 23efe4e:	bf48      	it	mi
 23efe50:	f108 020e 	addmi.w	r2, r8, #14
 23efe54:	ea4f 0be2 	mov.w	fp, r2, asr #3
  startWrite();
 23efe58:	9601      	str	r6, [sp, #4]
 23efe5a:	9b03      	ldr	r3, [sp, #12]
 23efe5c:	9a01      	ldr	r2, [sp, #4]
  for (int16_t j = 0; j < h; j++, y++) {
 23efe5e:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 23efe62:	189a      	adds	r2, r3, r2
 23efe64:	9b05      	ldr	r3, [sp, #20]
 23efe66:	b212      	sxth	r2, r2
 23efe68:	428b      	cmp	r3, r1
 23efe6a:	dd27      	ble.n	23efebc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x98>
 23efe6c:	f04f 0900 	mov.w	r9, #0
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 23efe70:	9b04      	ldr	r3, [sp, #16]
 23efe72:	4433      	add	r3, r6
 23efe74:	9306      	str	r3, [sp, #24]
 23efe76:	fa0f f089 	sxth.w	r0, r9
    for (int16_t i = 0; i < w; i++) {
 23efe7a:	4580      	cmp	r8, r0
 23efe7c:	fa1f f189 	uxth.w	r1, r9
 23efe80:	dd17      	ble.n	23efeb2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8e>
      if (i & 7)
 23efe82:	074f      	lsls	r7, r1, #29
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 23efe84:	bf05      	ittet	eq
 23efe86:	9b06      	ldreq	r3, [sp, #24]
 23efe88:	10c0      	asreq	r0, r0, #3
        byte <<= 1;
 23efe8a:	006d      	lslne	r5, r5, #1
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
 23efe8c:	5c1d      	ldrbeq	r5, [r3, r0]
        byte <<= 1;
 23efe8e:	bf18      	it	ne
 23efe90:	b2ed      	uxtbne	r5, r5
      if (byte & 0x80)
 23efe92:	062b      	lsls	r3, r5, #24
 23efe94:	d50a      	bpl.n	23efeac <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x88>
        writePixel(x + i, y, color);
 23efe96:	9b02      	ldr	r3, [sp, #8]
 23efe98:	6820      	ldr	r0, [r4, #0]
 23efe9a:	4419      	add	r1, r3
 23efe9c:	6983      	ldr	r3, [r0, #24]
 23efe9e:	9207      	str	r2, [sp, #28]
 23efea0:	461f      	mov	r7, r3
 23efea2:	4620      	mov	r0, r4
 23efea4:	4653      	mov	r3, sl
 23efea6:	b209      	sxth	r1, r1
 23efea8:	47b8      	blx	r7
 23efeaa:	9a07      	ldr	r2, [sp, #28]
    for (int16_t i = 0; i < w; i++) {
 23efeac:	f109 0901 	add.w	r9, r9, #1
 23efeb0:	e7e1      	b.n	23efe76 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x52>
  for (int16_t j = 0; j < h; j++, y++) {
 23efeb2:	9b01      	ldr	r3, [sp, #4]
 23efeb4:	445e      	add	r6, fp
 23efeb6:	3301      	adds	r3, #1
 23efeb8:	9301      	str	r3, [sp, #4]
 23efeba:	e7ce      	b.n	23efe5a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x36>
  endWrite();
 23efebc:	4620      	mov	r0, r4
 23efebe:	6823      	ldr	r3, [r4, #0]
 23efec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23efec2:	b009      	add	sp, #36	; 0x24
 23efec4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
 23efec8:	4718      	bx	r3
	...

023efecc <_ZN12Adafruit_GFX8drawCharEsshtthh>:
                            uint8_t size_y) {
 23efecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23efed0:	ed2d 8b02 	vpush	{d8}
 23efed4:	b091      	sub	sp, #68	; 0x44
 23efed6:	4616      	mov	r6, r2
 23efed8:	461f      	mov	r7, r3
  if (!gfxFont) { // 'Classic' built-in font
 23efeda:	6a02      	ldr	r2, [r0, #32]
                            uint8_t size_y) {
 23efedc:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 23efee0:	4683      	mov	fp, r0
 23efee2:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
 23efee6:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
 23efeea:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
 23efeee:	9103      	str	r1, [sp, #12]
 23efef0:	9304      	str	r3, [sp, #16]
  if (!gfxFont) { // 'Classic' built-in font
 23efef2:	2a00      	cmp	r2, #0
 23efef4:	f040 80c5 	bne.w	23f0082 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
    if ((x >= _width) ||              // Clip right
 23efef8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23efefc:	428b      	cmp	r3, r1
 23efefe:	f340 814c 	ble.w	23f019a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
 23eff02:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23eff06:	42b3      	cmp	r3, r6
 23eff08:	f340 8147 	ble.w	23f019a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((x + 6 * size_x - 1) < 0) || // Clip left
 23eff0c:	2306      	movs	r3, #6
 23eff0e:	fb13 1305 	smlabb	r3, r3, r5, r1
        (y >= _height) ||             // Clip bottom
 23eff12:	2b00      	cmp	r3, #0
 23eff14:	f340 8141 	ble.w	23f019a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((y + 8 * size_y - 1) < 0))   // Clip top
 23eff18:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
        ((x + 6 * size_x - 1) < 0) || // Clip left
 23eff1c:	2b00      	cmp	r3, #0
 23eff1e:	f340 813c 	ble.w	23f019a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
    if (!_cp437 && (c >= 176))
 23eff22:	7f03      	ldrb	r3, [r0, #28]
 23eff24:	b91b      	cbnz	r3, 23eff2e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
 23eff26:	2faf      	cmp	r7, #175	; 0xaf
      c++; // Handle 'classic' charset behavior
 23eff28:	bf84      	itt	hi
 23eff2a:	3701      	addhi	r7, #1
 23eff2c:	b2ff      	uxtbhi	r7, r7
    startWrite();
 23eff2e:	f8db 3000 	ldr.w	r3, [fp]
 23eff32:	4658      	mov	r0, fp
 23eff34:	695b      	ldr	r3, [r3, #20]
 23eff36:	4798      	blx	r3
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23eff38:	2205      	movs	r2, #5
 23eff3a:	9209      	str	r2, [sp, #36]	; 0x24
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 23eff3c:	2200      	movs	r2, #0
 23eff3e:	9205      	str	r2, [sp, #20]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23eff40:	4a98      	ldr	r2, [pc, #608]	; (23f01a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
 23eff42:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 23eff46:	18d3      	adds	r3, r2, r3
 23eff48:	930c      	str	r3, [sp, #48]	; 0x30
            writePixel(x + i, y + j, color);
 23eff4a:	b2b3      	uxth	r3, r6
 23eff4c:	9306      	str	r3, [sp, #24]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23eff4e:	9a05      	ldr	r2, [sp, #20]
 23eff50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23eff52:	fb02 f905 	mul.w	r9, r2, r5
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23eff56:	5c9b      	ldrb	r3, [r3, r2]
 23eff58:	9307      	str	r3, [sp, #28]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23eff5a:	b2ab      	uxth	r3, r5
 23eff5c:	930b      	str	r3, [sp, #44]	; 0x2c
 23eff5e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 23eff62:	9308      	str	r3, [sp, #32]
 23eff64:	9b03      	ldr	r3, [sp, #12]
 23eff66:	fa19 f983 	uxtah	r9, r9, r3
 23eff6a:	fa0f f389 	sxth.w	r3, r9
 23eff6e:	ee08 3a10 	vmov	s16, r3
 23eff72:	2308      	movs	r3, #8
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 23eff74:	f04f 0900 	mov.w	r9, #0
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23eff78:	930a      	str	r3, [sp, #40]	; 0x28
            writePixel(x + i, y + j, bg);
 23eff7a:	9b03      	ldr	r3, [sp, #12]
 23eff7c:	eb02 0a03 	add.w	sl, r2, r3
 23eff80:	fa0f fa8a 	sxth.w	sl, sl
        if (line & 1) {
 23eff84:	9a07      	ldr	r2, [sp, #28]
            writePixel(x + i, y + j, color);
 23eff86:	f8db 3000 	ldr.w	r3, [fp]
        if (line & 1) {
 23eff8a:	07d2      	lsls	r2, r2, #31
 23eff8c:	d552      	bpl.n	23f0034 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
          if (size_x == 1 && size_y == 1)
 23eff8e:	2d01      	cmp	r5, #1
            writePixel(x + i, y + j, color);
 23eff90:	fa1f f289 	uxth.w	r2, r9
          if (size_x == 1 && size_y == 1)
 23eff94:	d13e      	bne.n	23f0014 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
 23eff96:	2c01      	cmp	r4, #1
 23eff98:	d13c      	bne.n	23f0014 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
            writePixel(x + i, y + j, color);
 23eff9a:	699b      	ldr	r3, [r3, #24]
 23eff9c:	9906      	ldr	r1, [sp, #24]
 23eff9e:	461f      	mov	r7, r3
 23effa0:	9b04      	ldr	r3, [sp, #16]
 23effa2:	440a      	add	r2, r1
            writePixel(x + i, y + j, bg);
 23effa4:	4651      	mov	r1, sl
 23effa6:	4658      	mov	r0, fp
 23effa8:	b212      	sxth	r2, r2
 23effaa:	47b8      	blx	r7
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 23effac:	f109 0301 	add.w	r3, r9, #1
 23effb0:	fa4f f983 	sxtb.w	r9, r3
 23effb4:	9b07      	ldr	r3, [sp, #28]
 23effb6:	085b      	lsrs	r3, r3, #1
 23effb8:	9307      	str	r3, [sp, #28]
 23effba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23effbc:	3b01      	subs	r3, #1
 23effbe:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23effc2:	930a      	str	r3, [sp, #40]	; 0x28
 23effc4:	d1de      	bne.n	23eff84 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 23effc6:	9f05      	ldr	r7, [sp, #20]
 23effc8:	3701      	adds	r7, #1
 23effca:	b27b      	sxtb	r3, r7
 23effcc:	9305      	str	r3, [sp, #20]
 23effce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23effd0:	3b01      	subs	r3, #1
 23effd2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23effd6:	9309      	str	r3, [sp, #36]	; 0x24
 23effd8:	d1b9      	bne.n	23eff4e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
    if (bg != color) { // If opaque, draw vertical line for last column
 23effda:	9b04      	ldr	r3, [sp, #16]
 23effdc:	4543      	cmp	r3, r8
 23effde:	d00f      	beq.n	23f0000 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
      if (size_x == 1 && size_y == 1)
 23effe0:	2d01      	cmp	r5, #1
        writeFastVLine(x + 5, y, 8, bg);
 23effe2:	f8db 3000 	ldr.w	r3, [fp]
      if (size_x == 1 && size_y == 1)
 23effe6:	d13b      	bne.n	23f0060 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
 23effe8:	2c01      	cmp	r4, #1
 23effea:	d139      	bne.n	23f0060 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
        writeFastVLine(x + 5, y, 8, bg);
 23effec:	9908      	ldr	r1, [sp, #32]
 23effee:	f8cd 8000 	str.w	r8, [sp]
 23efff2:	3105      	adds	r1, #5
 23efff4:	6a1c      	ldr	r4, [r3, #32]
 23efff6:	4632      	mov	r2, r6
 23efff8:	2308      	movs	r3, #8
 23efffa:	4658      	mov	r0, fp
 23efffc:	b209      	sxth	r1, r1
 23efffe:	47a0      	blx	r4
    endWrite();
 23f0000:	4658      	mov	r0, fp
 23f0002:	f8db 3000 	ldr.w	r3, [fp]
 23f0006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23f0008:	b011      	add	sp, #68	; 0x44
 23f000a:	ecbd 8b02 	vpop	{d8}
 23f000e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
 23f0012:	4718      	bx	r3
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 23f0014:	fb14 f202 	smulbb	r2, r4, r2
 23f0018:	9906      	ldr	r1, [sp, #24]
 23f001a:	440a      	add	r2, r1
 23f001c:	9904      	ldr	r1, [sp, #16]
 23f001e:	9101      	str	r1, [sp, #4]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23f0020:	9400      	str	r4, [sp, #0]
 23f0022:	69db      	ldr	r3, [r3, #28]
 23f0024:	ee18 1a10 	vmov	r1, s16
 23f0028:	461f      	mov	r7, r3
 23f002a:	4658      	mov	r0, fp
 23f002c:	462b      	mov	r3, r5
 23f002e:	b212      	sxth	r2, r2
 23f0030:	47b8      	blx	r7
 23f0032:	e7bb      	b.n	23effac <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
        } else if (bg != color) {
 23f0034:	9a04      	ldr	r2, [sp, #16]
 23f0036:	4542      	cmp	r2, r8
 23f0038:	d0b8      	beq.n	23effac <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
          if (size_x == 1 && size_y == 1)
 23f003a:	2d01      	cmp	r5, #1
            writePixel(x + i, y + j, color);
 23f003c:	fa1f f289 	uxth.w	r2, r9
          if (size_x == 1 && size_y == 1)
 23f0040:	d107      	bne.n	23f0052 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
 23f0042:	2c01      	cmp	r4, #1
 23f0044:	d105      	bne.n	23f0052 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
            writePixel(x + i, y + j, bg);
 23f0046:	699b      	ldr	r3, [r3, #24]
 23f0048:	9906      	ldr	r1, [sp, #24]
 23f004a:	461f      	mov	r7, r3
 23f004c:	440a      	add	r2, r1
 23f004e:	4643      	mov	r3, r8
 23f0050:	e7a8      	b.n	23effa4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23f0052:	fb14 f202 	smulbb	r2, r4, r2
 23f0056:	9906      	ldr	r1, [sp, #24]
 23f0058:	f8cd 8004 	str.w	r8, [sp, #4]
 23f005c:	440a      	add	r2, r1
 23f005e:	e7df      	b.n	23f0020 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 23f0060:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23f0062:	00e4      	lsls	r4, r4, #3
 23f0064:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 23f0068:	9a08      	ldr	r2, [sp, #32]
 23f006a:	f8cd 8004 	str.w	r8, [sp, #4]
 23f006e:	440a      	add	r2, r1
 23f0070:	4611      	mov	r1, r2
 23f0072:	9400      	str	r4, [sp, #0]
 23f0074:	69dc      	ldr	r4, [r3, #28]
 23f0076:	4632      	mov	r2, r6
 23f0078:	462b      	mov	r3, r5
 23f007a:	4658      	mov	r0, fp
 23f007c:	b209      	sxth	r1, r1
 23f007e:	47a0      	blx	r4
    endWrite();
 23f0080:	e7be      	b.n	23f0000 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23f0082:	7a13      	ldrb	r3, [r2, #8]
  return gfxFont->glyph + c;
 23f0084:	6851      	ldr	r1, [r2, #4]
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23f0086:	1aff      	subs	r7, r7, r3
  return gfxFont->bitmap;
 23f0088:	6812      	ldr	r2, [r2, #0]
  return gfxFont->glyph + c;
 23f008a:	b2ff      	uxtb	r7, r7
  return gfxFont->bitmap;
 23f008c:	920b      	str	r2, [sp, #44]	; 0x2c
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23f008e:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
  return gfxFont->glyph + c;
 23f0092:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23f0096:	9206      	str	r2, [sp, #24]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 23f0098:	789a      	ldrb	r2, [r3, #2]
    if (size_x > 1 || size_y > 1) {
 23f009a:	2d01      	cmp	r5, #1
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 23f009c:	9209      	str	r2, [sp, #36]	; 0x24
 23f009e:	78da      	ldrb	r2, [r3, #3]
           yo = pgm_read_byte(&glyph->yOffset);
 23f00a0:	f993 a006 	ldrsb.w	sl, [r3, #6]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 23f00a4:	920c      	str	r2, [sp, #48]	; 0x30
    int8_t xo = pgm_read_byte(&glyph->xOffset),
 23f00a6:	f993 2005 	ldrsb.w	r2, [r3, #5]
 23f00aa:	920a      	str	r2, [sp, #40]	; 0x28
    if (size_x > 1 || size_y > 1) {
 23f00ac:	d801      	bhi.n	23f00b2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
 23f00ae:	2c01      	cmp	r4, #1
 23f00b0:	d957      	bls.n	23f0162 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
      xo16 = xo;
 23f00b2:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 23f00b6:	9308      	str	r3, [sp, #32]
      yo16 = yo;
 23f00b8:	fa0f f38a 	sxth.w	r3, sl
 23f00bc:	9307      	str	r3, [sp, #28]
    uint8_t xx, yy, bits = 0, bit = 0;
 23f00be:	f04f 0800 	mov.w	r8, #0
 23f00c2:	46c1      	mov	r9, r8
    for (yy = 0; yy < h; yy++) {
 23f00c4:	4647      	mov	r7, r8
    startWrite();
 23f00c6:	f8db 3000 	ldr.w	r3, [fp]
 23f00ca:	4658      	mov	r0, fp
 23f00cc:	695b      	ldr	r3, [r3, #20]
 23f00ce:	4798      	blx	r3
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23f00d0:	b2b3      	uxth	r3, r6
 23f00d2:	930e      	str	r3, [sp, #56]	; 0x38
            writePixel(x + xo + xx, y + yo + yy, color);
 23f00d4:	fa1a f386 	uxtah	r3, sl, r6
 23f00d8:	930f      	str	r3, [sp, #60]	; 0x3c
    for (yy = 0; yy < h; yy++) {
 23f00da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23f00dc:	429f      	cmp	r7, r3
 23f00de:	d28f      	bcs.n	23f0000 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23f00e0:	9b07      	ldr	r3, [sp, #28]
 23f00e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 23f00e4:	443b      	add	r3, r7
 23f00e6:	fb03 2304 	mla	r3, r3, r4, r2
      for (xx = 0; xx < w; xx++) {
 23f00ea:	2200      	movs	r2, #0
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23f00ec:	b21b      	sxth	r3, r3
 23f00ee:	ee08 3a10 	vmov	s16, r3
 23f00f2:	4643      	mov	r3, r8
      for (xx = 0; xx < w; xx++) {
 23f00f4:	9205      	str	r2, [sp, #20]
            writePixel(x + xo + xx, y + yo + yy, color);
 23f00f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 23f00f8:	eb02 0a07 	add.w	sl, r2, r7
 23f00fc:	fa0f fa8a 	sxth.w	sl, sl
      for (xx = 0; xx < w; xx++) {
 23f0100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23f0102:	9905      	ldr	r1, [sp, #20]
 23f0104:	4291      	cmp	r1, r2
 23f0106:	d241      	bcs.n	23f018c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
        if (!(bit++ & 7)) {
 23f0108:	1c5a      	adds	r2, r3, #1
 23f010a:	b2d2      	uxtb	r2, r2
 23f010c:	075b      	lsls	r3, r3, #29
 23f010e:	920d      	str	r2, [sp, #52]	; 0x34
 23f0110:	d107      	bne.n	23f0122 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
          bits = pgm_read_byte(&bitmap[bo++]);
 23f0112:	9b06      	ldr	r3, [sp, #24]
 23f0114:	9906      	ldr	r1, [sp, #24]
 23f0116:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23f0118:	3301      	adds	r3, #1
 23f011a:	b29b      	uxth	r3, r3
 23f011c:	f812 9001 	ldrb.w	r9, [r2, r1]
 23f0120:	9306      	str	r3, [sp, #24]
        if (bits & 0x80) {
 23f0122:	f019 0f80 	tst.w	r9, #128	; 0x80
 23f0126:	d012      	beq.n	23f014e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
          if (size_x == 1 && size_y == 1) {
 23f0128:	2d01      	cmp	r5, #1
            writePixel(x + xo + xx, y + yo + yy, color);
 23f012a:	f8db 3000 	ldr.w	r3, [fp]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 23f012e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
          if (size_x == 1 && size_y == 1) {
 23f0132:	d11a      	bne.n	23f016a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
 23f0134:	2c01      	cmp	r4, #1
 23f0136:	d118      	bne.n	23f016a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
            writePixel(x + xo + xx, y + yo + yy, color);
 23f0138:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23f013a:	699b      	ldr	r3, [r3, #24]
 23f013c:	4411      	add	r1, r2
 23f013e:	9a05      	ldr	r2, [sp, #20]
 23f0140:	461e      	mov	r6, r3
 23f0142:	4411      	add	r1, r2
 23f0144:	4658      	mov	r0, fp
 23f0146:	4652      	mov	r2, sl
 23f0148:	9b04      	ldr	r3, [sp, #16]
 23f014a:	b209      	sxth	r1, r1
 23f014c:	47b0      	blx	r6
      for (xx = 0; xx < w; xx++) {
 23f014e:	9e05      	ldr	r6, [sp, #20]
        bits <<= 1;
 23f0150:	ea4f 0949 	mov.w	r9, r9, lsl #1
      for (xx = 0; xx < w; xx++) {
 23f0154:	3601      	adds	r6, #1
 23f0156:	b2f3      	uxtb	r3, r6
 23f0158:	9305      	str	r3, [sp, #20]
        bits <<= 1;
 23f015a:	fa5f f989 	uxtb.w	r9, r9
        if (!(bit++ & 7)) {
 23f015e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
      for (xx = 0; xx < w; xx++) {
 23f0160:	e7ce      	b.n	23f0100 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
    int16_t xo16 = 0, yo16 = 0;
 23f0162:	2300      	movs	r3, #0
 23f0164:	e9cd 3307 	strd	r3, r3, [sp, #28]
 23f0168:	e7a9      	b.n	23f00be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 23f016a:	9805      	ldr	r0, [sp, #20]
 23f016c:	9a08      	ldr	r2, [sp, #32]
 23f016e:	4402      	add	r2, r0
 23f0170:	fb02 1105 	mla	r1, r2, r5, r1
 23f0174:	9a04      	ldr	r2, [sp, #16]
 23f0176:	4658      	mov	r0, fp
 23f0178:	e9cd 4200 	strd	r4, r2, [sp]
 23f017c:	69db      	ldr	r3, [r3, #28]
 23f017e:	ee18 2a10 	vmov	r2, s16
 23f0182:	461e      	mov	r6, r3
 23f0184:	b209      	sxth	r1, r1
 23f0186:	462b      	mov	r3, r5
 23f0188:	47b0      	blx	r6
 23f018a:	e7e0      	b.n	23f014e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
 23f018c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    for (yy = 0; yy < h; yy++) {
 23f018e:	3701      	adds	r7, #1
 23f0190:	4498      	add	r8, r3
 23f0192:	fa5f f888 	uxtb.w	r8, r8
 23f0196:	b2ff      	uxtb	r7, r7
 23f0198:	e79f      	b.n	23f00da <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
 23f019a:	b011      	add	sp, #68	; 0x44
 23f019c:	ecbd 8b02 	vpop	{d8}
 23f01a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f01a4:	023fe9dc 	.word	0x023fe9dc

023f01a8 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
 23f01a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!gfxFont) { // 'Classic' built-in font
 23f01aa:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
 23f01ac:	4604      	mov	r4, r0
 23f01ae:	460b      	mov	r3, r1
 23f01b0:	b085      	sub	sp, #20
  if (!gfxFont) { // 'Classic' built-in font
 23f01b2:	2a00      	cmp	r2, #0
 23f01b4:	d134      	bne.n	23f0220 <_ZN12Adafruit_GFX5writeEh+0x78>
    if (c == '\n') {              // Newline?
 23f01b6:	290a      	cmp	r1, #10
 23f01b8:	d108      	bne.n	23f01cc <_ZN12Adafruit_GFX5writeEh+0x24>
      cursor_y += textsize_y * 8; // advance y one line
 23f01ba:	8a43      	ldrh	r3, [r0, #18]
      cursor_x = 0;               // Reset x to zero,
 23f01bc:	8202      	strh	r2, [r0, #16]
      cursor_y += textsize_y * 8; // advance y one line
 23f01be:	7e42      	ldrb	r2, [r0, #25]
 23f01c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
      cursor_y +=
 23f01c4:	8263      	strh	r3, [r4, #18]
}
 23f01c6:	2001      	movs	r0, #1
 23f01c8:	b005      	add	sp, #20
 23f01ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (c != '\r') {       // Ignore carriage returns
 23f01cc:	290d      	cmp	r1, #13
 23f01ce:	d0fa      	beq.n	23f01c6 <_ZN12Adafruit_GFX5writeEh+0x1e>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23f01d0:	7ee1      	ldrb	r1, [r4, #27]
 23f01d2:	7e00      	ldrb	r0, [r0, #24]
      cursor_y += textsize_y * 8; // advance y one line
 23f01d4:	7e65      	ldrb	r5, [r4, #25]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23f01d6:	b171      	cbz	r1, 23f01f6 <_ZN12Adafruit_GFX5writeEh+0x4e>
 23f01d8:	2106      	movs	r1, #6
 23f01da:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 23f01de:	fb11 6100 	smlabb	r1, r1, r0, r6
 23f01e2:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 23f01e6:	42b1      	cmp	r1, r6
      cursor_y += textsize_y * 8; // advance y one line
 23f01e8:	bfc1      	itttt	gt
 23f01ea:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
        cursor_x = 0;                                       // Reset x to zero,
 23f01ee:	8222      	strhgt	r2, [r4, #16]
        cursor_y += textsize_y * 8; // advance y one line
 23f01f0:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
 23f01f4:	8262      	strhgt	r2, [r4, #18]
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 23f01f6:	8ae2      	ldrh	r2, [r4, #22]
 23f01f8:	e9cd 0502 	strd	r0, r5, [sp, #8]
 23f01fc:	9201      	str	r2, [sp, #4]
 23f01fe:	8aa2      	ldrh	r2, [r4, #20]
 23f0200:	4620      	mov	r0, r4
 23f0202:	9200      	str	r2, [sp, #0]
 23f0204:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23f0208:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23f020c:	f7ff fe5e 	bl	23efecc <_ZN12Adafruit_GFX8drawCharEsshtthh>
      cursor_x += textsize_x * 6; // Advance x one char
 23f0210:	7e23      	ldrb	r3, [r4, #24]
 23f0212:	8a22      	ldrh	r2, [r4, #16]
 23f0214:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f0218:	eb02 0343 	add.w	r3, r2, r3, lsl #1
        cursor_x +=
 23f021c:	8223      	strh	r3, [r4, #16]
 23f021e:	e7d2      	b.n	23f01c6 <_ZN12Adafruit_GFX5writeEh+0x1e>
    if (c == '\n') {
 23f0220:	290a      	cmp	r1, #10
 23f0222:	d107      	bne.n	23f0234 <_ZN12Adafruit_GFX5writeEh+0x8c>
      cursor_x = 0;
 23f0224:	2300      	movs	r3, #0
 23f0226:	8203      	strh	r3, [r0, #16]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23f0228:	7e41      	ldrb	r1, [r0, #25]
 23f022a:	7b12      	ldrb	r2, [r2, #12]
      cursor_y +=
 23f022c:	8a43      	ldrh	r3, [r0, #18]
 23f022e:	fb01 3302 	mla	r3, r1, r2, r3
 23f0232:	e7c7      	b.n	23f01c4 <_ZN12Adafruit_GFX5writeEh+0x1c>
    } else if (c != '\r') {
 23f0234:	290d      	cmp	r1, #13
 23f0236:	d0c6      	beq.n	23f01c6 <_ZN12Adafruit_GFX5writeEh+0x1e>
      uint8_t first = pgm_read_byte(&gfxFont->first);
 23f0238:	7a15      	ldrb	r5, [r2, #8]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 23f023a:	42a9      	cmp	r1, r5
 23f023c:	d3c3      	bcc.n	23f01c6 <_ZN12Adafruit_GFX5writeEh+0x1e>
 23f023e:	7a91      	ldrb	r1, [r2, #10]
 23f0240:	4299      	cmp	r1, r3
 23f0242:	d3c0      	bcc.n	23f01c6 <_ZN12Adafruit_GFX5writeEh+0x1e>
  return gfxFont->glyph + c;
 23f0244:	6851      	ldr	r1, [r2, #4]
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
 23f0246:	1b5d      	subs	r5, r3, r5
  return gfxFont->glyph + c;
 23f0248:	b2ed      	uxtb	r5, r5
 23f024a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
        uint8_t w = pgm_read_byte(&glyph->width),
 23f024e:	78a8      	ldrb	r0, [r5, #2]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
 23f0250:	b328      	cbz	r0, 23f029e <_ZN12Adafruit_GFX5writeEh+0xf6>
 23f0252:	78e9      	ldrb	r1, [r5, #3]
 23f0254:	b319      	cbz	r1, 23f029e <_ZN12Adafruit_GFX5writeEh+0xf6>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23f0256:	7ee1      	ldrb	r1, [r4, #27]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23f0258:	7e26      	ldrb	r6, [r4, #24]
      cursor_y += textsize_y * 8; // advance y one line
 23f025a:	7e67      	ldrb	r7, [r4, #25]
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23f025c:	b191      	cbz	r1, 23f0284 <_ZN12Adafruit_GFX5writeEh+0xdc>
 23f025e:	f995 1005 	ldrsb.w	r1, [r5, #5]
 23f0262:	4408      	add	r0, r1
 23f0264:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23f0268:	fb06 1100 	mla	r1, r6, r0, r1
 23f026c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 23f0270:	4281      	cmp	r1, r0
 23f0272:	dd07      	ble.n	23f0284 <_ZN12Adafruit_GFX5writeEh+0xdc>
            cursor_x = 0;
 23f0274:	2000      	movs	r0, #0
 23f0276:	8220      	strh	r0, [r4, #16]
      cursor_y += textsize_y * 8; // advance y one line
 23f0278:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23f027c:	7b12      	ldrb	r2, [r2, #12]
            cursor_y += (int16_t)textsize_y *
 23f027e:	fb02 1207 	mla	r2, r2, r7, r1
 23f0282:	8262      	strh	r2, [r4, #18]
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 23f0284:	8ae2      	ldrh	r2, [r4, #22]
 23f0286:	4620      	mov	r0, r4
 23f0288:	9201      	str	r2, [sp, #4]
 23f028a:	8aa2      	ldrh	r2, [r4, #20]
 23f028c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 23f0290:	9200      	str	r2, [sp, #0]
 23f0292:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23f0296:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23f029a:	f7ff fe17 	bl	23efecc <_ZN12Adafruit_GFX8drawCharEsshtthh>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 23f029e:	7929      	ldrb	r1, [r5, #4]
 23f02a0:	7e22      	ldrb	r2, [r4, #24]
        cursor_x +=
 23f02a2:	8a23      	ldrh	r3, [r4, #16]
 23f02a4:	fb01 3302 	mla	r3, r1, r2, r3
 23f02a8:	e7b8      	b.n	23f021c <_ZN12Adafruit_GFX5writeEh+0x74>

023f02aa <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize_x = (s_x > 0) ? s_x : 1;
 23f02aa:	2901      	cmp	r1, #1
 23f02ac:	bf38      	it	cc
 23f02ae:	2101      	movcc	r1, #1
 23f02b0:	7601      	strb	r1, [r0, #24]
  textsize_y = (s_y > 0) ? s_y : 1;
 23f02b2:	7641      	strb	r1, [r0, #25]
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
 23f02b4:	4770      	bx	lr

023f02b6 <_ZN16Adafruit_HDC302xC1Ev>:
#include "Adafruit_HDC302x.h"

/**
 * Constructor for the HDC302x sensor driver.
 */
Adafruit_HDC302x::Adafruit_HDC302x() { currentAutoMode = EXIT_AUTO_MODE; }
 23f02b6:	2200      	movs	r2, #0
 23f02b8:	6002      	str	r2, [r0, #0]
 23f02ba:	f243 0293 	movw	r2, #12435	; 0x3093
 23f02be:	8082      	strh	r2, [r0, #4]
 23f02c0:	4770      	bx	lr

023f02c2 <_ZN16Adafruit_HDC302x12writeCommandEt>:
 * Writes a command to the HDC302x sensor.
 *
 * @param command The command to write.
 * @return true if the command was written successfully, otherwise false.
 */
bool Adafruit_HDC302x::writeCommand(uint16_t command) {
 23f02c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[2];
  buffer[0] = (uint8_t)(command >> 8);   // High byte
 23f02c4:	0a0b      	lsrs	r3, r1, #8
 23f02c6:	f88d 300c 	strb.w	r3, [sp, #12]
  buffer[1] = (uint8_t)(command & 0xFF); // Low byte

  return i2c_dev->write(buffer, 2);
 23f02ca:	2300      	movs	r3, #0
 23f02cc:	e9cd 3300 	strd	r3, r3, [sp]
  buffer[1] = (uint8_t)(command & 0xFF); // Low byte
 23f02d0:	f88d 100d 	strb.w	r1, [sp, #13]
  return i2c_dev->write(buffer, 2);
 23f02d4:	2301      	movs	r3, #1
 23f02d6:	2202      	movs	r2, #2
 23f02d8:	a903      	add	r1, sp, #12
 23f02da:	6800      	ldr	r0, [r0, #0]
 23f02dc:	f7ff fa80 	bl	23ef7e0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
 23f02e0:	b005      	add	sp, #20
 23f02e2:	f85d fb04 	ldr.w	pc, [sp], #4

023f02e6 <_ZN16Adafruit_HDC302x11setAutoModeE13hdcAutoMode_t>:
  currentAutoMode = mode;
 23f02e6:	8081      	strh	r1, [r0, #4]
  writeCommand(mode);
 23f02e8:	f7ff bfeb 	b.w	23f02c2 <_ZN16Adafruit_HDC302x12writeCommandEt>

023f02ec <_ZN16Adafruit_HDC302x19clearStatusRegisterEv>:
  return writeCommand(HDC302x_Commands::CLEAR_STATUS_REGISTER);
 23f02ec:	f243 0141 	movw	r1, #12353	; 0x3041
 23f02f0:	f7ff bfe7 	b.w	23f02c2 <_ZN16Adafruit_HDC302x12writeCommandEt>

023f02f4 <_ZN16Adafruit_HDC302x5resetEv>:
  return writeCommand(HDC302x_Commands::SOFT_RESET);
 23f02f4:	f243 01a2 	movw	r1, #12450	; 0x30a2
 23f02f8:	f7ff bfe3 	b.w	23f02c2 <_ZN16Adafruit_HDC302x12writeCommandEt>

023f02fc <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi>:
 * @param len Length of the data array.
 * @return uint8_t The calculated CRC-8 value.
 */
uint8_t Adafruit_HDC302x::calculateCRC8(const uint8_t *data, int len) {
  uint8_t crc = 0xFF; // Typical initial value
  for (int i = 0; i < len; i++) {
 23f02fc:	2300      	movs	r3, #0
  uint8_t crc = 0xFF; // Typical initial value
 23f02fe:	20ff      	movs	r0, #255	; 0xff
uint8_t Adafruit_HDC302x::calculateCRC8(const uint8_t *data, int len) {
 23f0300:	b510      	push	{r4, lr}
  for (int i = 0; i < len; i++) {
 23f0302:	4293      	cmp	r3, r2
 23f0304:	da0e      	bge.n	23f0324 <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi+0x28>
    crc ^= data[i];               // XOR byte into least sig. byte of crc
 23f0306:	5ccc      	ldrb	r4, [r1, r3]
 23f0308:	4060      	eors	r0, r4
 23f030a:	2408      	movs	r4, #8
    for (int j = 8; j > 0; j--) { // Loop over each bit
      if (crc & 0x80) {           // If the uppermost bit is 1...
 23f030c:	f010 0f80 	tst.w	r0, #128	; 0x80
 23f0310:	ea4f 0040 	mov.w	r0, r0, lsl #1
        crc = (crc << 1) ^ 0x31;  // Polynomial used by HDC302x
 23f0314:	bf18      	it	ne
 23f0316:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
    for (int j = 8; j > 0; j--) { // Loop over each bit
 23f031a:	3c01      	subs	r4, #1
      } else {
        crc = (crc << 1);
 23f031c:	b2c0      	uxtb	r0, r0
    for (int j = 8; j > 0; j--) { // Loop over each bit
 23f031e:	d1f5      	bne.n	23f030c <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi+0x10>
  for (int i = 0; i < len; i++) {
 23f0320:	3301      	adds	r3, #1
 23f0322:	e7ee      	b.n	23f0302 <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi+0x6>
      }
    }
  }
  return crc; // Final XOR value can also be applied if specified by device
}
 23f0324:	bd10      	pop	{r4, pc}
	...

023f0328 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_>:
                                          double &RH) {
 23f0328:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f032c:	4605      	mov	r5, r0
 23f032e:	4617      	mov	r7, r2
 23f0330:	461e      	mov	r6, r3
  if (!writeCommand(command)) {
 23f0332:	f7ff ffc6 	bl	23f02c2 <_ZN16Adafruit_HDC302x12writeCommandEt>
 23f0336:	4604      	mov	r4, r0
 23f0338:	2800      	cmp	r0, #0
 23f033a:	d04a      	beq.n	23f03d2 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xaa>
 23f033c:	f04f 080a 	mov.w	r8, #10
  while (!i2c_dev->read(buffer, 6)) {
 23f0340:	2301      	movs	r3, #1
 23f0342:	2206      	movs	r2, #6
 23f0344:	4669      	mov	r1, sp
 23f0346:	6828      	ldr	r0, [r5, #0]
 23f0348:	f7ff fa7a 	bl	23ef840 <_ZN18Adafruit_I2CDevice4readEPhjb>
 23f034c:	4604      	mov	r4, r0
 23f034e:	b930      	cbnz	r0, 23f035e <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0x36>
    if (++retries >= MAX_RETRIES) {
 23f0350:	f1b8 0801 	subs.w	r8, r8, #1
 23f0354:	d03d      	beq.n	23f03d2 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xaa>
    delay(1); // Wait and retry if NAK received
 23f0356:	2001      	movs	r0, #1
 23f0358:	f007 f966 	bl	23f7628 <delay>
  while (!i2c_dev->read(buffer, 6)) {
 23f035c:	e7f0      	b.n	23f0340 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0x18>
  if (calculateCRC8(buffer, 2) != buffer[2]) {
 23f035e:	2202      	movs	r2, #2
 23f0360:	4669      	mov	r1, sp
 23f0362:	4628      	mov	r0, r5
 23f0364:	f7ff ffca 	bl	23f02fc <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi>
 23f0368:	f89d 3002 	ldrb.w	r3, [sp, #2]
 23f036c:	4283      	cmp	r3, r0
 23f036e:	d134      	bne.n	23f03da <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xb2>
  if (calculateCRC8(buffer + 3, 2) != buffer[5]) {
 23f0370:	4628      	mov	r0, r5
 23f0372:	f10d 0103 	add.w	r1, sp, #3
 23f0376:	f7ff ffc1 	bl	23f02fc <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi>
 23f037a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 23f037e:	4283      	cmp	r3, r0
 23f0380:	d12b      	bne.n	23f03da <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xb2>
  temp = ((rawTemperature / 65535.0) * 175.0) - 45.0;
 23f0382:	f8bd 0000 	ldrh.w	r0, [sp]
 23f0386:	f8bd 5003 	ldrh.w	r5, [sp, #3]
 23f038a:	ba40      	rev16	r0, r0
 23f038c:	b280      	uxth	r0, r0
 23f038e:	f7f3 f979 	bl	23e3684 <__aeabi_i2d>
 23f0392:	a313      	add	r3, pc, #76	; (adr r3, 23f03e0 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xb8>)
 23f0394:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f0398:	f7f3 fb08 	bl	23e39ac <__aeabi_ddiv>
 23f039c:	a314      	add	r3, pc, #80	; (adr r3, 23f03f0 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xc8>)
 23f039e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f03a2:	f7f3 f9d9 	bl	23e3758 <__aeabi_dmul>
 23f03a6:	2200      	movs	r2, #0
 23f03a8:	4b0f      	ldr	r3, [pc, #60]	; (23f03e8 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xc0>)
 23f03aa:	f7f3 f81d 	bl	23e33e8 <__aeabi_dsub>
 23f03ae:	ba6d      	rev16	r5, r5
 23f03b0:	b2ad      	uxth	r5, r5
 23f03b2:	e9c7 0100 	strd	r0, r1, [r7]
  RH = (rawHumidity / 65535.0) * 100.0;
 23f03b6:	4628      	mov	r0, r5
 23f03b8:	f7f3 f964 	bl	23e3684 <__aeabi_i2d>
 23f03bc:	a308      	add	r3, pc, #32	; (adr r3, 23f03e0 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xb8>)
 23f03be:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f03c2:	f7f3 faf3 	bl	23e39ac <__aeabi_ddiv>
 23f03c6:	2200      	movs	r2, #0
 23f03c8:	4b08      	ldr	r3, [pc, #32]	; (23f03ec <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xc4>)
 23f03ca:	f7f3 f9c5 	bl	23e3758 <__aeabi_dmul>
 23f03ce:	e9c6 0100 	strd	r0, r1, [r6]
}
 23f03d2:	4620      	mov	r0, r4
 23f03d4:	b002      	add	sp, #8
 23f03d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return false; // CRC check failed
 23f03da:	2400      	movs	r4, #0
 23f03dc:	e7f9      	b.n	23f03d2 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xaa>
 23f03de:	bf00      	nop
 23f03e0:	00000000 	.word	0x00000000
 23f03e4:	40efffe0 	.word	0x40efffe0
 23f03e8:	40468000 	.word	0x40468000
 23f03ec:	40590000 	.word	0x40590000
 23f03f0:	00000000 	.word	0x00000000
 23f03f4:	4065e000 	.word	0x4065e000

023f03f8 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>:
    double &temp, double &RH, hdcTriggerMode_t mode = TRIGGERMODE_LP0) {
 23f03f8:	b410      	push	{r4}
 23f03fa:	460c      	mov	r4, r1
 23f03fc:	4619      	mov	r1, r3
  return sendCommandReadTRH(static_cast<uint16_t>(mode), temp, RH);
 23f03fe:	4613      	mov	r3, r2
 23f0400:	4622      	mov	r2, r4
}
 23f0402:	f85d 4b04 	ldr.w	r4, [sp], #4
  return sendCommandReadTRH(static_cast<uint16_t>(mode), temp, RH);
 23f0406:	f7ff bf8f 	b.w	23f0328 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_>

023f040a <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt>:
bool Adafruit_HDC302x::writeCommandReadData(uint16_t command, uint16_t &data) {
 23f040a:	b5f0      	push	{r4, r5, r6, r7, lr}
  cmd_buffer[0] = (uint8_t)(command >> 8);   // High byte of the command
 23f040c:	0a0b      	lsrs	r3, r1, #8
bool Adafruit_HDC302x::writeCommandReadData(uint16_t command, uint16_t &data) {
 23f040e:	b085      	sub	sp, #20
  cmd_buffer[0] = (uint8_t)(command >> 8);   // High byte of the command
 23f0410:	f88d 3008 	strb.w	r3, [sp, #8]
  if (!i2c_dev->write_then_read(cmd_buffer, 2, data_buffer, 3)) {
 23f0414:	2700      	movs	r7, #0
 23f0416:	2303      	movs	r3, #3
 23f0418:	e9cd 3700 	strd	r3, r7, [sp]
  cmd_buffer[1] = (uint8_t)(command & 0xFF); // Low byte of the command
 23f041c:	f88d 1009 	strb.w	r1, [sp, #9]
bool Adafruit_HDC302x::writeCommandReadData(uint16_t command, uint16_t &data) {
 23f0420:	4605      	mov	r5, r0
 23f0422:	4616      	mov	r6, r2
  if (!i2c_dev->write_then_read(cmd_buffer, 2, data_buffer, 3)) {
 23f0424:	6800      	ldr	r0, [r0, #0]
 23f0426:	2202      	movs	r2, #2
 23f0428:	ab03      	add	r3, sp, #12
 23f042a:	a902      	add	r1, sp, #8
 23f042c:	f7ff fa2a 	bl	23ef884 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
 23f0430:	4604      	mov	r4, r0
 23f0432:	b160      	cbz	r0, 23f044e <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt+0x44>
  uint8_t calculated_crc = calculateCRC8(data_buffer, 2);
 23f0434:	2202      	movs	r2, #2
 23f0436:	4628      	mov	r0, r5
 23f0438:	a903      	add	r1, sp, #12
 23f043a:	f7ff ff5f 	bl	23f02fc <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi>
  if (calculated_crc != data_buffer[2]) {
 23f043e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 23f0442:	4283      	cmp	r3, r0
 23f0444:	d106      	bne.n	23f0454 <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt+0x4a>
  data = (uint16_t)(data_buffer[0] << 8 | data_buffer[1]);
 23f0446:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 23f044a:	ba5b      	rev16	r3, r3
 23f044c:	8033      	strh	r3, [r6, #0]
}
 23f044e:	4620      	mov	r0, r4
 23f0450:	b005      	add	sp, #20
 23f0452:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return false; // Communication failed
 23f0454:	463c      	mov	r4, r7
 23f0456:	e7fa      	b.n	23f044e <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt+0x44>

023f0458 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire>:
bool Adafruit_HDC302x::begin(uint8_t i2cAddr, TwoWire *wire) {
 23f0458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23f045a:	4604      	mov	r4, r0
  delay(5); // wait for device to be ready
 23f045c:	2005      	movs	r0, #5
bool Adafruit_HDC302x::begin(uint8_t i2cAddr, TwoWire *wire) {
 23f045e:	460e      	mov	r6, r1
 23f0460:	4617      	mov	r7, r2
  delay(5); // wait for device to be ready
 23f0462:	f007 f8e1 	bl	23f7628 <delay>
  if (i2c_dev) {
 23f0466:	6820      	ldr	r0, [r4, #0]
 23f0468:	b110      	cbz	r0, 23f0470 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x18>
    delete i2c_dev;
 23f046a:	2110      	movs	r1, #16
 23f046c:	f7f3 ffdd 	bl	23e442a <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(i2cAddr, wire);
 23f0470:	2010      	movs	r0, #16
 23f0472:	f7f3 ffd6 	bl	23e4422 <_Znwj>
 23f0476:	4605      	mov	r5, r0
 23f0478:	b118      	cbz	r0, 23f0482 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x2a>
 23f047a:	463a      	mov	r2, r7
 23f047c:	4631      	mov	r1, r6
 23f047e:	f7ff f984 	bl	23ef78a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin()) {
 23f0482:	2101      	movs	r1, #1
 23f0484:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(i2cAddr, wire);
 23f0486:	6025      	str	r5, [r4, #0]
  if (!i2c_dev->begin()) {
 23f0488:	f7ff f99b 	bl	23ef7c2 <_ZN18Adafruit_I2CDevice5beginEb>
 23f048c:	b918      	cbnz	r0, 23f0496 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x3e>
    return false;
 23f048e:	2500      	movs	r5, #0
}
 23f0490:	4628      	mov	r0, r5
 23f0492:	b003      	add	sp, #12
 23f0494:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!reset()) {
 23f0496:	4620      	mov	r0, r4
 23f0498:	f7ff ff2c 	bl	23f02f4 <_ZN16Adafruit_HDC302x5resetEv>
 23f049c:	2800      	cmp	r0, #0
 23f049e:	d0f6      	beq.n	23f048e <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x36>
  clearStatusRegister();
 23f04a0:	4620      	mov	r0, r4
 23f04a2:	f7ff ff23 	bl	23f02ec <_ZN16Adafruit_HDC302x19clearStatusRegisterEv>
  if (!writeCommandReadData(HDC302x_Commands::READ_MANUFACTURER_ID,
 23f04a6:	f243 7181 	movw	r1, #14209	; 0x3781
 23f04aa:	4620      	mov	r0, r4
 23f04ac:	f10d 0206 	add.w	r2, sp, #6
 23f04b0:	f7ff ffab 	bl	23f040a <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt>
                            manufacturerID) ||
 23f04b4:	4605      	mov	r5, r0
 23f04b6:	2800      	cmp	r0, #0
 23f04b8:	d0e9      	beq.n	23f048e <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x36>
 23f04ba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 23f04be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 23f04c2:	d1e4      	bne.n	23f048e <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x36>
  setAutoMode(EXIT_AUTO_MODE);
 23f04c4:	f243 0193 	movw	r1, #12435	; 0x3093
 23f04c8:	4620      	mov	r0, r4
 23f04ca:	f7ff ff0c 	bl	23f02e6 <_ZN16Adafruit_HDC302x11setAutoModeE13hdcAutoMode_t>
  return true;
 23f04ce:	e7df      	b.n	23f0490 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x38>

023f04d0 <_ZN16Adafruit_HTU21DFC1Ev>:
#include "Adafruit_HTU21DF.h"

/**
 * Constructor for the HTU21DF driver.
 */
Adafruit_HTU21DF::Adafruit_HTU21DF() {
 23f04d0:	2200      	movs	r2, #0
 23f04d2:	6002      	str	r2, [r0, #0]
  /* Assign default values to internal tracking variables. */
  _last_humidity = 0.0f;
 23f04d4:	2200      	movs	r2, #0
 23f04d6:	6042      	str	r2, [r0, #4]
  _last_temp = 0.0f;
 23f04d8:	6082      	str	r2, [r0, #8]
}
 23f04da:	4770      	bx	lr

023f04dc <_ZN16Adafruit_HTU21DF5resetEv>:
}

/**
 * Sends a 'reset' request to the HTU21DF, followed by a 15ms delay.
 */
void Adafruit_HTU21DF::reset(void) {
 23f04dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t cmd = HTU21DF_RESET;
 23f04de:	23fe      	movs	r3, #254	; 0xfe
 23f04e0:	f88d 300f 	strb.w	r3, [sp, #15]
  i2c_dev->write(&cmd, 1);
 23f04e4:	2300      	movs	r3, #0
 23f04e6:	e9cd 3300 	strd	r3, r3, [sp]
 23f04ea:	2301      	movs	r3, #1
 23f04ec:	f10d 010f 	add.w	r1, sp, #15
 23f04f0:	461a      	mov	r2, r3
 23f04f2:	6800      	ldr	r0, [r0, #0]
 23f04f4:	f7ff f974 	bl	23ef7e0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>

  delay(15);
 23f04f8:	200f      	movs	r0, #15
 23f04fa:	f007 f895 	bl	23f7628 <delay>
}
 23f04fe:	b005      	add	sp, #20
 23f0500:	f85d fb04 	ldr.w	pc, [sp], #4

023f0504 <_ZN16Adafruit_HTU21DF5beginEP7TwoWire>:
bool Adafruit_HTU21DF::begin(TwoWire *theWire) {
 23f0504:	b570      	push	{r4, r5, r6, lr}
 23f0506:	4604      	mov	r4, r0
  if (i2c_dev) {
 23f0508:	6800      	ldr	r0, [r0, #0]
bool Adafruit_HTU21DF::begin(TwoWire *theWire) {
 23f050a:	460e      	mov	r6, r1
 23f050c:	b088      	sub	sp, #32
  if (i2c_dev) {
 23f050e:	b110      	cbz	r0, 23f0516 <_ZN16Adafruit_HTU21DF5beginEP7TwoWire+0x12>
    delete i2c_dev;
 23f0510:	2110      	movs	r1, #16
 23f0512:	f7f3 ff8a 	bl	23e442a <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(HTU21DF_I2CADDR, theWire);
 23f0516:	2010      	movs	r0, #16
 23f0518:	f7f3 ff83 	bl	23e4422 <_Znwj>
 23f051c:	4605      	mov	r5, r0
 23f051e:	b118      	cbz	r0, 23f0528 <_ZN16Adafruit_HTU21DF5beginEP7TwoWire+0x24>
 23f0520:	4632      	mov	r2, r6
 23f0522:	2140      	movs	r1, #64	; 0x40
 23f0524:	f7ff f931 	bl	23ef78a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin()) {
 23f0528:	2101      	movs	r1, #1
 23f052a:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(HTU21DF_I2CADDR, theWire);
 23f052c:	6025      	str	r5, [r4, #0]
  if (!i2c_dev->begin()) {
 23f052e:	f7ff f948 	bl	23ef7c2 <_ZN18Adafruit_I2CDevice5beginEb>
 23f0532:	b188      	cbz	r0, 23f0558 <_ZN16Adafruit_HTU21DF5beginEP7TwoWire+0x54>
  reset();
 23f0534:	4620      	mov	r0, r4
 23f0536:	f7ff ffd1 	bl	23f04dc <_ZN16Adafruit_HTU21DF5resetEv>
      Adafruit_BusIO_Register(i2c_dev, HTU21DF_READREG);
 23f053a:	2301      	movs	r3, #1
 23f053c:	2200      	movs	r2, #0
 23f053e:	6821      	ldr	r1, [r4, #0]
 23f0540:	e9cd 2300 	strd	r2, r3, [sp]
 23f0544:	a802      	add	r0, sp, #8
 23f0546:	22e7      	movs	r2, #231	; 0xe7
 23f0548:	f7ff f80a 	bl	23ef560 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return (reg.read() == 0x2); // after reset should be 0x2
 23f054c:	a802      	add	r0, sp, #8
 23f054e:	f7ff f8d5 	bl	23ef6fc <_ZN23Adafruit_BusIO_Register4readEv>
 23f0552:	1e83      	subs	r3, r0, #2
 23f0554:	4258      	negs	r0, r3
 23f0556:	4158      	adcs	r0, r3
}
 23f0558:	b008      	add	sp, #32
 23f055a:	bd70      	pop	{r4, r5, r6, pc}

023f055c <_ZN16Adafruit_HTU21DF15readTemperatureEv>:
 * Performs a single temperature conversion in degrees Celsius.
 *
 * @return a single-precision (32-bit) float value indicating the measured
 *         temperature in degrees Celsius or NAN on failure.
 */
float Adafruit_HTU21DF::readTemperature(void) {
 23f055c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // OK lets ready!
  uint8_t cmd = HTU21DF_READTEMP;
 23f055e:	23e3      	movs	r3, #227	; 0xe3
 23f0560:	f88d 300b 	strb.w	r3, [sp, #11]
  if (!i2c_dev->write(&cmd, 1)) {
 23f0564:	2300      	movs	r3, #0
 23f0566:	e9cd 3300 	strd	r3, r3, [sp]
 23f056a:	2301      	movs	r3, #1
float Adafruit_HTU21DF::readTemperature(void) {
 23f056c:	4604      	mov	r4, r0
  if (!i2c_dev->write(&cmd, 1)) {
 23f056e:	461a      	mov	r2, r3
 23f0570:	6800      	ldr	r0, [r0, #0]
 23f0572:	f10d 010b 	add.w	r1, sp, #11
 23f0576:	f7ff f933 	bl	23ef7e0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 23f057a:	b318      	cbz	r0, 23f05c4 <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x68>
    return NAN;
  }

  delay(50); // add delay between request and actual read!
 23f057c:	2032      	movs	r0, #50	; 0x32
 23f057e:	f007 f853 	bl	23f7628 <delay>

  uint8_t buf[3];
  if (!i2c_dev->read(buf, 3)) {
 23f0582:	2301      	movs	r3, #1
 23f0584:	2203      	movs	r2, #3
 23f0586:	6820      	ldr	r0, [r4, #0]
 23f0588:	a903      	add	r1, sp, #12
 23f058a:	f7ff f959 	bl	23ef840 <_ZN18Adafruit_I2CDevice4readEPhjb>
 23f058e:	b1c8      	cbz	r0, 23f05c4 <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x68>
  }

  /* Read 16 bits of data, dropping the last two status bits. */
  uint16_t t = buf[0];
  t <<= 8;
  t |= buf[1] & 0b11111100;
 23f0590:	f89d 300d 	ldrb.w	r3, [sp, #13]
  uint16_t t = buf[0];
 23f0594:	f89d 200c 	ldrb.w	r2, [sp, #12]
  t |= buf[1] & 0b11111100;
 23f0598:	f003 03fc 	and.w	r3, r3, #252	; 0xfc

  // 3rd byte is the CRC

  float temp = t;
 23f059c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 23f05a0:	ee07 3a90 	vmov	s15, r3
  temp *= 175.72f;
 23f05a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 23f05cc <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x70>
  float temp = t;
 23f05a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
  temp /= 65536.0f;
  temp -= 46.85f;
 23f05ac:	ed9f 0a08 	vldr	s0, [pc, #32]	; 23f05d0 <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x74>
  temp *= 175.72f;
 23f05b0:	ee67 7a87 	vmul.f32	s15, s15, s14
  temp -= 46.85f;
 23f05b4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 23f05d4 <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x78>
 23f05b8:	eea7 0a87 	vfma.f32	s0, s15, s14

  /* Track the value internally in case we need to access it later. */
  _last_temp = temp;
 23f05bc:	ed84 0a02 	vstr	s0, [r4, #8]

  return temp;
}
 23f05c0:	b004      	add	sp, #16
 23f05c2:	bd10      	pop	{r4, pc}
    return NAN;
 23f05c4:	ed9f 0a04 	vldr	s0, [pc, #16]	; 23f05d8 <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x7c>
 23f05c8:	e7fa      	b.n	23f05c0 <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x64>
 23f05ca:	bf00      	nop
 23f05cc:	432fb852 	.word	0x432fb852
 23f05d0:	c23b6666 	.word	0xc23b6666
 23f05d4:	37800000 	.word	0x37800000
 23f05d8:	7fc00000 	.word	0x7fc00000

023f05dc <_ZN16Adafruit_HTU21DF12readHumidityEv>:
 * Performs a single relative humidity conversion.
 *
 * @return A single-precision (32-bit) float value indicating the relative
 *         humidity in percent (0..100.0%).
 */
float Adafruit_HTU21DF::readHumidity(void) {
 23f05dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* Prepare the I2C request. */
  uint8_t cmd = HTU21DF_READHUM;
 23f05de:	23e5      	movs	r3, #229	; 0xe5
 23f05e0:	f88d 300b 	strb.w	r3, [sp, #11]
  if (!i2c_dev->write(&cmd, 1)) {
 23f05e4:	2300      	movs	r3, #0
 23f05e6:	e9cd 3300 	strd	r3, r3, [sp]
 23f05ea:	2301      	movs	r3, #1
float Adafruit_HTU21DF::readHumidity(void) {
 23f05ec:	4604      	mov	r4, r0
  if (!i2c_dev->write(&cmd, 1)) {
 23f05ee:	461a      	mov	r2, r3
 23f05f0:	6800      	ldr	r0, [r0, #0]
 23f05f2:	f10d 010b 	add.w	r1, sp, #11
 23f05f6:	f7ff f8f3 	bl	23ef7e0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 23f05fa:	b318      	cbz	r0, 23f0644 <_ZN16Adafruit_HTU21DF12readHumidityEv+0x68>
    return NAN;
  }

  /* Wait a bit for the conversion to complete. */
  delay(50);
 23f05fc:	2032      	movs	r0, #50	; 0x32
 23f05fe:	f007 f813 	bl	23f7628 <delay>

  uint8_t buf[3];
  if (!i2c_dev->read(buf, 3)) {
 23f0602:	2301      	movs	r3, #1
 23f0604:	2203      	movs	r2, #3
 23f0606:	6820      	ldr	r0, [r4, #0]
 23f0608:	a903      	add	r1, sp, #12
 23f060a:	f7ff f919 	bl	23ef840 <_ZN18Adafruit_I2CDevice4readEPhjb>
 23f060e:	b1c8      	cbz	r0, 23f0644 <_ZN16Adafruit_HTU21DF12readHumidityEv+0x68>
  }

  /* Read 16 bits of data, dropping the last two status bits. */
  uint16_t h = buf[0];
  h <<= 8;
  h |= buf[1] & 0b11111100;
 23f0610:	f89d 300d 	ldrb.w	r3, [sp, #13]
  uint16_t h = buf[0];
 23f0614:	f89d 200c 	ldrb.w	r2, [sp, #12]
  h |= buf[1] & 0b11111100;
 23f0618:	f003 03fc 	and.w	r3, r3, #252	; 0xfc

  // 3rd byte is the CRC

  float hum = h;
 23f061c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 23f0620:	ee07 3a90 	vmov	s15, r3
  hum *= 125.0f;
 23f0624:	ed9f 7a09 	vldr	s14, [pc, #36]	; 23f064c <_ZN16Adafruit_HTU21DF12readHumidityEv+0x70>
  float hum = h;
 23f0628:	eef8 7a67 	vcvt.f32.u32	s15, s15
  hum /= 65536.0f;
  hum -= 6.0f;
 23f062c:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
  hum *= 125.0f;
 23f0630:	ee67 7a87 	vmul.f32	s15, s15, s14
  hum -= 6.0f;
 23f0634:	ed9f 7a06 	vldr	s14, [pc, #24]	; 23f0650 <_ZN16Adafruit_HTU21DF12readHumidityEv+0x74>
 23f0638:	eea7 0a87 	vfma.f32	s0, s15, s14

  /* Track the value internally in case we need to access it later. */
  _last_humidity = hum;
 23f063c:	ed84 0a01 	vstr	s0, [r4, #4]

  return hum;
}
 23f0640:	b004      	add	sp, #16
 23f0642:	bd10      	pop	{r4, pc}
    return NAN;
 23f0644:	ed9f 0a03 	vldr	s0, [pc, #12]	; 23f0654 <_ZN16Adafruit_HTU21DF12readHumidityEv+0x78>
 23f0648:	e7fa      	b.n	23f0640 <_ZN16Adafruit_HTU21DF12readHumidityEv+0x64>
 23f064a:	bf00      	nop
 23f064c:	42fa0000 	.word	0x42fa0000
 23f0650:	37800000 	.word	0x37800000
 23f0654:	7fc00000 	.word	0x7fc00000

023f0658 <_ZN16Adafruit_LPS35HWC1Ev>:
#include "Adafruit_LPS35HW.h"

/*!
 *    @brief  Instantiates a new LPS35HW class
 */
Adafruit_LPS35HW::Adafruit_LPS35HW(void) {}
 23f0658:	4770      	bx	lr

023f065a <_ZN16Adafruit_LPS35HW5resetEv>:
/*!
    @brief Resets the hardware. All configuration registers are set to
            default values, the same as a power-on reset.
*/
/**************************************************************************/
void Adafruit_LPS35HW::reset(void) {
 23f065a:	b507      	push	{r0, r1, r2, lr}
  Adafruit_BusIO_RegisterBits reset =
      Adafruit_BusIO_RegisterBits(Config2, 1, 2);
 23f065c:	2302      	movs	r3, #2
 23f065e:	6841      	ldr	r1, [r0, #4]
 23f0660:	2201      	movs	r2, #1
 23f0662:	4668      	mov	r0, sp
 23f0664:	f7ff f866 	bl	23ef734 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  reset.write(1);
 23f0668:	2101      	movs	r1, #1
 23f066a:	4668      	mov	r0, sp
 23f066c:	f7ff f874 	bl	23ef758 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  while (reset.read() == true) {
 23f0670:	4668      	mov	r0, sp
 23f0672:	f7ff f864 	bl	23ef73e <_ZN27Adafruit_BusIO_RegisterBits4readEv>
 23f0676:	2801      	cmp	r0, #1
 23f0678:	d102      	bne.n	23f0680 <_ZN16Adafruit_LPS35HW5resetEv+0x26>
    delay(1);
 23f067a:	f006 ffd5 	bl	23f7628 <delay>
  while (reset.read() == true) {
 23f067e:	e7f7      	b.n	23f0670 <_ZN16Adafruit_LPS35HW5resetEv+0x16>
  }
}
 23f0680:	b003      	add	sp, #12
 23f0682:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023f0688 <_ZN16Adafruit_LPS35HW15readTemperatureEv>:
    @return The current temperature in degrees C
*/
/**************************************************************************/
float Adafruit_LPS35HW::readTemperature(void) {
  Adafruit_BusIO_Register temp = Adafruit_BusIO_Register(
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_TEMP_OUT_L, 2);
 23f0688:	2300      	movs	r3, #0
 23f068a:	2201      	movs	r2, #1
float Adafruit_LPS35HW::readTemperature(void) {
 23f068c:	b500      	push	{lr}
 23f068e:	b08b      	sub	sp, #44	; 0x2c
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_TEMP_OUT_L, 2);
 23f0690:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f0694:	2102      	movs	r1, #2
 23f0696:	222b      	movs	r2, #43	; 0x2b
 23f0698:	e9cd 2100 	strd	r2, r1, [sp]
 23f069c:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 23f06a0:	a804      	add	r0, sp, #16
 23f06a2:	f7fe ff6b 	bl	23ef57c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  return (int16_t)temp.read() / 100.0;
 23f06a6:	a804      	add	r0, sp, #16
 23f06a8:	f7ff f828 	bl	23ef6fc <_ZN23Adafruit_BusIO_Register4readEv>
 23f06ac:	b200      	sxth	r0, r0
 23f06ae:	f7f2 ffe9 	bl	23e3684 <__aeabi_i2d>
 23f06b2:	2200      	movs	r2, #0
 23f06b4:	4b04      	ldr	r3, [pc, #16]	; (23f06c8 <_ZN16Adafruit_LPS35HW15readTemperatureEv+0x40>)
 23f06b6:	f7f3 f979 	bl	23e39ac <__aeabi_ddiv>
 23f06ba:	f7f3 fb45 	bl	23e3d48 <__aeabi_d2f>
}
 23f06be:	ee00 0a10 	vmov	s0, r0
 23f06c2:	b00b      	add	sp, #44	; 0x2c
 23f06c4:	f85d fb04 	ldr.w	pc, [sp], #4
 23f06c8:	40590000 	.word	0x40590000

023f06cc <_ZN16Adafruit_LPS35HW12readPressureEv>:
    @return The current pressure in hPa, relative to the reference temperature
*/
/**************************************************************************/
float Adafruit_LPS35HW::readPressure(void) {
  Adafruit_BusIO_Register pressure = Adafruit_BusIO_Register(
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_PRESS_OUT_XL, 3);
 23f06cc:	2300      	movs	r3, #0
 23f06ce:	2201      	movs	r2, #1
float Adafruit_LPS35HW::readPressure(void) {
 23f06d0:	b500      	push	{lr}
 23f06d2:	b08b      	sub	sp, #44	; 0x2c
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_PRESS_OUT_XL, 3);
 23f06d4:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f06d8:	2103      	movs	r1, #3
 23f06da:	2228      	movs	r2, #40	; 0x28
 23f06dc:	e9cd 2100 	strd	r2, r1, [sp]
 23f06e0:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 23f06e4:	a804      	add	r0, sp, #16
 23f06e6:	f7fe ff49 	bl	23ef57c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  int32_t raw_pressure = pressure.read();
 23f06ea:	a804      	add	r0, sp, #16
 23f06ec:	f7ff f806 	bl	23ef6fc <_ZN23Adafruit_BusIO_Register4readEv>
  // perform sign extension for 24 bit number if needed
  if (raw_pressure & 0x800000) {
 23f06f0:	0203      	lsls	r3, r0, #8
    raw_pressure = (0xff000000 | raw_pressure);
 23f06f2:	bf48      	it	mi
 23f06f4:	f040 407f 	orrmi.w	r0, r0, #4278190080	; 0xff000000
  }

  return (raw_pressure / 4096.0);
 23f06f8:	f7f2 ffc4 	bl	23e3684 <__aeabi_i2d>
 23f06fc:	2200      	movs	r2, #0
 23f06fe:	4b05      	ldr	r3, [pc, #20]	; (23f0714 <_ZN16Adafruit_LPS35HW12readPressureEv+0x48>)
 23f0700:	f7f3 f82a 	bl	23e3758 <__aeabi_dmul>
 23f0704:	f7f3 fb20 	bl	23e3d48 <__aeabi_d2f>
}
 23f0708:	ee00 0a10 	vmov	s0, r0
 23f070c:	b00b      	add	sp, #44	; 0x2c
 23f070e:	f85d fb04 	ldr.w	pc, [sp], #4
 23f0712:	bf00      	nop
 23f0714:	3f300000 	.word	0x3f300000

023f0718 <_ZN16Adafruit_LPS35HW11setDataRateE10_data_rate>:
    @brief Sets a new measurement rate
    @param new_rate
          The new output data rate to be set (ODR)
*/
/**************************************************************************/
void Adafruit_LPS35HW::setDataRate(LPS35HW_DataRate new_rate) {
 23f0718:	b513      	push	{r0, r1, r4, lr}
 23f071a:	460c      	mov	r4, r1
  Adafruit_BusIO_RegisterBits data_rate =
      Adafruit_BusIO_RegisterBits(Config1, 3, 4);
 23f071c:	2304      	movs	r3, #4
 23f071e:	2203      	movs	r2, #3
 23f0720:	6801      	ldr	r1, [r0, #0]
 23f0722:	4668      	mov	r0, sp
 23f0724:	f7ff f806 	bl	23ef734 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  data_rate.write(new_rate);
 23f0728:	4621      	mov	r1, r4
 23f072a:	4668      	mov	r0, sp
 23f072c:	f7ff f814 	bl	23ef758 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
 23f0730:	b002      	add	sp, #8
 23f0732:	bd10      	pop	{r4, pc}

023f0734 <_ZN16Adafruit_LPS35HW5_initEv>:
boolean Adafruit_LPS35HW::_init(void) {
 23f0734:	b5f0      	push	{r4, r5, r6, r7, lr}
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_WHO_AM_I, 1);
 23f0736:	2500      	movs	r5, #0
 23f0738:	2701      	movs	r7, #1
 23f073a:	230f      	movs	r3, #15
boolean Adafruit_LPS35HW::_init(void) {
 23f073c:	b08d      	sub	sp, #52	; 0x34
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_WHO_AM_I, 1);
 23f073e:	e9cd 5702 	strd	r5, r7, [sp, #8]
 23f0742:	9300      	str	r3, [sp, #0]
 23f0744:	9701      	str	r7, [sp, #4]
 23f0746:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 23f074a:	462b      	mov	r3, r5
boolean Adafruit_LPS35HW::_init(void) {
 23f074c:	4604      	mov	r4, r0
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_WHO_AM_I, 1);
 23f074e:	a806      	add	r0, sp, #24
 23f0750:	f7fe ff14 	bl	23ef57c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  if (chip_id.read() != 0xB1) {
 23f0754:	a806      	add	r0, sp, #24
 23f0756:	f7fe ffd1 	bl	23ef6fc <_ZN23Adafruit_BusIO_Register4readEv>
 23f075a:	28b1      	cmp	r0, #177	; 0xb1
 23f075c:	d167      	bne.n	23f082e <_ZN16Adafruit_LPS35HW5_initEv+0xfa>
                                        LPS35HW_CTRL_REG1, 1);
 23f075e:	2018      	movs	r0, #24
 23f0760:	f7f3 fe5f 	bl	23e4422 <_Znwj>
 23f0764:	4606      	mov	r6, r0
 23f0766:	b148      	cbz	r0, 23f077c <_ZN16Adafruit_LPS35HW5_initEv+0x48>
 23f0768:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 23f076c:	2310      	movs	r3, #16
 23f076e:	e9cd 5702 	strd	r5, r7, [sp, #8]
 23f0772:	9300      	str	r3, [sp, #0]
 23f0774:	9701      	str	r7, [sp, #4]
 23f0776:	462b      	mov	r3, r5
 23f0778:	f7fe ff00 	bl	23ef57c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
                                        LPS35HW_CTRL_REG2, 1);
 23f077c:	2018      	movs	r0, #24
  Config1 = new Adafruit_BusIO_Register(i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD,
 23f077e:	6026      	str	r6, [r4, #0]
                                        LPS35HW_CTRL_REG2, 1);
 23f0780:	f7f3 fe4f 	bl	23e4422 <_Znwj>
 23f0784:	4605      	mov	r5, r0
 23f0786:	b150      	cbz	r0, 23f079e <_ZN16Adafruit_LPS35HW5_initEv+0x6a>
 23f0788:	2201      	movs	r2, #1
 23f078a:	2300      	movs	r3, #0
 23f078c:	9201      	str	r2, [sp, #4]
 23f078e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f0792:	2211      	movs	r2, #17
 23f0794:	9200      	str	r2, [sp, #0]
 23f0796:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 23f079a:	f7fe feef 	bl	23ef57c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Config2 = new Adafruit_BusIO_Register(i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD,
 23f079e:	6065      	str	r5, [r4, #4]
                                        LPS35HW_CTRL_REG3, 1);
 23f07a0:	2018      	movs	r0, #24
 23f07a2:	f7f3 fe3e 	bl	23e4422 <_Znwj>
 23f07a6:	4605      	mov	r5, r0
 23f07a8:	b150      	cbz	r0, 23f07c0 <_ZN16Adafruit_LPS35HW5_initEv+0x8c>
 23f07aa:	2201      	movs	r2, #1
 23f07ac:	2300      	movs	r3, #0
 23f07ae:	9201      	str	r2, [sp, #4]
 23f07b0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f07b4:	2212      	movs	r2, #18
 23f07b6:	9200      	str	r2, [sp, #0]
 23f07b8:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 23f07bc:	f7fe fede 	bl	23ef57c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Config3 = new Adafruit_BusIO_Register(i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD,
 23f07c0:	60a5      	str	r5, [r4, #8]
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_INTERRUPT_CFG, 1);
 23f07c2:	2018      	movs	r0, #24
 23f07c4:	f7f3 fe2d 	bl	23e4422 <_Znwj>
 23f07c8:	4605      	mov	r5, r0
 23f07ca:	b150      	cbz	r0, 23f07e2 <_ZN16Adafruit_LPS35HW5_initEv+0xae>
 23f07cc:	2201      	movs	r2, #1
 23f07ce:	2300      	movs	r3, #0
 23f07d0:	9201      	str	r2, [sp, #4]
 23f07d2:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f07d6:	220b      	movs	r2, #11
 23f07d8:	9200      	str	r2, [sp, #0]
 23f07da:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 23f07de:	f7fe fecd 	bl	23ef57c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  InterruptCfg = new Adafruit_BusIO_Register(
 23f07e2:	60e5      	str	r5, [r4, #12]
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_INT_SOURCE, 1);
 23f07e4:	2018      	movs	r0, #24
 23f07e6:	f7f3 fe1c 	bl	23e4422 <_Znwj>
 23f07ea:	4605      	mov	r5, r0
 23f07ec:	b150      	cbz	r0, 23f0804 <_ZN16Adafruit_LPS35HW5_initEv+0xd0>
 23f07ee:	2201      	movs	r2, #1
 23f07f0:	2300      	movs	r3, #0
 23f07f2:	9201      	str	r2, [sp, #4]
 23f07f4:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f07f8:	2225      	movs	r2, #37	; 0x25
 23f07fa:	9200      	str	r2, [sp, #0]
 23f07fc:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 23f0800:	f7fe febc 	bl	23ef57c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  reset();
 23f0804:	4620      	mov	r0, r4
  InterruptStatus = new Adafruit_BusIO_Register(
 23f0806:	6125      	str	r5, [r4, #16]
  reset();
 23f0808:	f7ff ff27 	bl	23f065a <_ZN16Adafruit_LPS35HW5resetEv>
  setDataRate(LPS35HW_RATE_10_HZ); // default in continuous at 10 hz
 23f080c:	2102      	movs	r1, #2
 23f080e:	4620      	mov	r0, r4
 23f0810:	f7ff ff82 	bl	23f0718 <_ZN16Adafruit_LPS35HW11setDataRateE10_data_rate>
      Adafruit_BusIO_RegisterBits(Config1, 1, 1);
 23f0814:	2301      	movs	r3, #1
 23f0816:	6821      	ldr	r1, [r4, #0]
 23f0818:	461a      	mov	r2, r3
 23f081a:	a804      	add	r0, sp, #16
 23f081c:	f7fe ff8a 	bl	23ef734 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  block_reads.write(0x1);
 23f0820:	2101      	movs	r1, #1
 23f0822:	a804      	add	r0, sp, #16
 23f0824:	f7fe ff98 	bl	23ef758 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  return true;
 23f0828:	2001      	movs	r0, #1
}
 23f082a:	b00d      	add	sp, #52	; 0x34
 23f082c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return false;
 23f082e:	4628      	mov	r0, r5
 23f0830:	e7fb      	b.n	23f082a <_ZN16Adafruit_LPS35HW5_initEv+0xf6>

023f0832 <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire>:
  spi_dev = NULL;
 23f0832:	2300      	movs	r3, #0
boolean Adafruit_LPS35HW::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
 23f0834:	b537      	push	{r0, r1, r2, r4, r5, lr}
  spi_dev = NULL;
 23f0836:	6183      	str	r3, [r0, #24]
boolean Adafruit_LPS35HW::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
 23f0838:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
 23f083a:	2010      	movs	r0, #16
boolean Adafruit_LPS35HW::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
 23f083c:	e9cd 2100 	strd	r2, r1, [sp]
  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
 23f0840:	f7f3 fdef 	bl	23e4422 <_Znwj>
 23f0844:	4605      	mov	r5, r0
 23f0846:	b118      	cbz	r0, 23f0850 <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire+0x1e>
 23f0848:	e9dd 2100 	ldrd	r2, r1, [sp]
 23f084c:	f7fe ff9d 	bl	23ef78a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin()) {
 23f0850:	2101      	movs	r1, #1
 23f0852:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
 23f0854:	6165      	str	r5, [r4, #20]
  if (!i2c_dev->begin()) {
 23f0856:	f7fe ffb4 	bl	23ef7c2 <_ZN18Adafruit_I2CDevice5beginEb>
 23f085a:	b128      	cbz	r0, 23f0868 <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire+0x36>
  return _init();
 23f085c:	4620      	mov	r0, r4
}
 23f085e:	b003      	add	sp, #12
 23f0860:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return _init();
 23f0864:	f7ff bf66 	b.w	23f0734 <_ZN16Adafruit_LPS35HW5_initEv>
}
 23f0868:	b003      	add	sp, #12
 23f086a:	bd30      	pop	{r4, r5, pc}

023f086c <_ZN16Adafruit_MCP9808D1Ev>:
 23f086c:	4770      	bx	lr

023f086e <_ZN16Adafruit_MCP9808D0Ev>:
 23f086e:	b510      	push	{r4, lr}
 23f0870:	4604      	mov	r4, r0
 23f0872:	210c      	movs	r1, #12
 23f0874:	f7f3 fdd9 	bl	23e442a <_ZdlPvj>
 23f0878:	4620      	mov	r0, r4
 23f087a:	bd10      	pop	{r4, pc}

023f087c <_ZN16Adafruit_MCP98089getSensorEP8sensor_t>:
   resulution
    @param  sensor Pointer to Adafruit_Sensor sensor_t object that will be
   filled with sensor type data
*/
/**************************************************************************/
void Adafruit_MCP9808::getSensor(sensor_t *sensor) {
 23f087c:	b538      	push	{r3, r4, r5, lr}
 23f087e:	460c      	mov	r4, r1
 23f0880:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 23f0882:	2220      	movs	r2, #32
 23f0884:	2100      	movs	r1, #0
 23f0886:	f104 0008 	add.w	r0, r4, #8
 23f088a:	f00b ff38 	bl	23fc6fe <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "MCP9808", sizeof(sensor->name) - 1);
 23f088e:	220b      	movs	r2, #11
 23f0890:	4620      	mov	r0, r4
 23f0892:	4908      	ldr	r1, [pc, #32]	; (23f08b4 <_ZN16Adafruit_MCP98089getSensorEP8sensor_t+0x38>)
 23f0894:	f00b ffe1 	bl	23fc85a <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
 23f0898:	2301      	movs	r3, #1
 23f089a:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
 23f089c:	88eb      	ldrh	r3, [r5, #6]
 23f089e:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 23f08a0:	230d      	movs	r3, #13
 23f08a2:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->max_value = 100.0;
 23f08a4:	4b04      	ldr	r3, [pc, #16]	; (23f08b8 <_ZN16Adafruit_MCP98089getSensorEP8sensor_t+0x3c>)
 23f08a6:	61a3      	str	r3, [r4, #24]
  sensor->min_value = -20.0;
 23f08a8:	4b04      	ldr	r3, [pc, #16]	; (23f08bc <_ZN16Adafruit_MCP98089getSensorEP8sensor_t+0x40>)
 23f08aa:	61e3      	str	r3, [r4, #28]
  sensor->resolution = 0.0625;
 23f08ac:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 23f08b0:	6223      	str	r3, [r4, #32]
}
 23f08b2:	bd38      	pop	{r3, r4, r5, pc}
 23f08b4:	023fef34 	.word	0x023fef34
 23f08b8:	42c80000 	.word	0x42c80000
 23f08bc:	c1a00000 	.word	0xc1a00000

023f08c0 <_ZN16Adafruit_MCP9808C1Ev>:
Adafruit_MCP9808::Adafruit_MCP9808() {}
 23f08c0:	4a03      	ldr	r2, [pc, #12]	; (23f08d0 <_ZN16Adafruit_MCP9808C1Ev+0x10>)
 23f08c2:	6002      	str	r2, [r0, #0]
 23f08c4:	f242 6250 	movw	r2, #9808	; 0x2650
 23f08c8:	80c2      	strh	r2, [r0, #6]
 23f08ca:	2200      	movs	r2, #0
 23f08cc:	6082      	str	r2, [r0, #8]
 23f08ce:	4770      	bx	lr
 23f08d0:	023fef44 	.word	0x023fef44

023f08d4 <_ZN16Adafruit_MCP98087write16Eht>:
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
 23f08d4:	2301      	movs	r3, #1
void Adafruit_MCP9808::write16(uint8_t reg, uint16_t value) {
 23f08d6:	b510      	push	{r4, lr}
 23f08d8:	4614      	mov	r4, r2
 23f08da:	b088      	sub	sp, #32
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
 23f08dc:	e9cd 3300 	strd	r3, r3, [sp]
 23f08e0:	460a      	mov	r2, r1
 23f08e2:	2302      	movs	r3, #2
 23f08e4:	6881      	ldr	r1, [r0, #8]
 23f08e6:	a802      	add	r0, sp, #8
 23f08e8:	f7fe fe3a 	bl	23ef560 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  reg16.write(value);
 23f08ec:	2200      	movs	r2, #0
 23f08ee:	4621      	mov	r1, r4
 23f08f0:	a802      	add	r0, sp, #8
 23f08f2:	f7fe fea3 	bl	23ef63c <_ZN23Adafruit_BusIO_Register5writeEmh>
}
 23f08f6:	b008      	add	sp, #32
 23f08f8:	bd10      	pop	{r4, pc}

023f08fa <_ZN16Adafruit_MCP98086read16Eh>:
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
 23f08fa:	2301      	movs	r3, #1
uint16_t Adafruit_MCP9808::read16(uint8_t reg) {
 23f08fc:	b500      	push	{lr}
 23f08fe:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
 23f0900:	e9cd 3300 	strd	r3, r3, [sp]
uint16_t Adafruit_MCP9808::read16(uint8_t reg) {
 23f0904:	460a      	mov	r2, r1
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
 23f0906:	2302      	movs	r3, #2
 23f0908:	6881      	ldr	r1, [r0, #8]
 23f090a:	a802      	add	r0, sp, #8
 23f090c:	f7fe fe28 	bl	23ef560 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return reg16.read();
 23f0910:	a802      	add	r0, sp, #8
 23f0912:	f7fe fef3 	bl	23ef6fc <_ZN23Adafruit_BusIO_Register4readEv>
}
 23f0916:	b280      	uxth	r0, r0
 23f0918:	b009      	add	sp, #36	; 0x24
 23f091a:	f85d fb04 	ldr.w	pc, [sp], #4

023f091e <_ZN16Adafruit_MCP98084initEv>:
bool Adafruit_MCP9808::init() {
 23f091e:	b538      	push	{r3, r4, r5, lr}
  if (!i2c_dev->begin()) {
 23f0920:	2101      	movs	r1, #1
bool Adafruit_MCP9808::init() {
 23f0922:	4604      	mov	r4, r0
  if (!i2c_dev->begin()) {
 23f0924:	6880      	ldr	r0, [r0, #8]
 23f0926:	f7fe ff4c 	bl	23ef7c2 <_ZN18Adafruit_I2CDevice5beginEb>
 23f092a:	4605      	mov	r5, r0
 23f092c:	b910      	cbnz	r0, 23f0934 <_ZN16Adafruit_MCP98084initEv+0x16>
    return false;
 23f092e:	2500      	movs	r5, #0
}
 23f0930:	4628      	mov	r0, r5
 23f0932:	bd38      	pop	{r3, r4, r5, pc}
  if (read16(MCP9808_REG_MANUF_ID) != 0x0054)
 23f0934:	2106      	movs	r1, #6
 23f0936:	4620      	mov	r0, r4
 23f0938:	f7ff ffdf 	bl	23f08fa <_ZN16Adafruit_MCP98086read16Eh>
 23f093c:	2854      	cmp	r0, #84	; 0x54
 23f093e:	d1f6      	bne.n	23f092e <_ZN16Adafruit_MCP98084initEv+0x10>
  if (read16(MCP9808_REG_DEVICE_ID) != 0x0400)
 23f0940:	2107      	movs	r1, #7
 23f0942:	4620      	mov	r0, r4
 23f0944:	f7ff ffd9 	bl	23f08fa <_ZN16Adafruit_MCP98086read16Eh>
 23f0948:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 23f094c:	d1ef      	bne.n	23f092e <_ZN16Adafruit_MCP98084initEv+0x10>
  write16(MCP9808_REG_CONFIG, 0x0);
 23f094e:	2200      	movs	r2, #0
 23f0950:	2101      	movs	r1, #1
 23f0952:	4620      	mov	r0, r4
 23f0954:	f7ff ffbe 	bl	23f08d4 <_ZN16Adafruit_MCP98087write16Eht>
  return true;
 23f0958:	e7ea      	b.n	23f0930 <_ZN16Adafruit_MCP98084initEv+0x12>

023f095a <_ZN16Adafruit_MCP98085beginEhP7TwoWire>:
bool Adafruit_MCP9808::begin(uint8_t addr, TwoWire *theWire) {
 23f095a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f095c:	4604      	mov	r4, r0
  if (i2c_dev) {
 23f095e:	6880      	ldr	r0, [r0, #8]
bool Adafruit_MCP9808::begin(uint8_t addr, TwoWire *theWire) {
 23f0960:	460e      	mov	r6, r1
 23f0962:	4617      	mov	r7, r2
  if (i2c_dev) {
 23f0964:	b110      	cbz	r0, 23f096c <_ZN16Adafruit_MCP98085beginEhP7TwoWire+0x12>
    delete i2c_dev;
 23f0966:	2110      	movs	r1, #16
 23f0968:	f7f3 fd5f 	bl	23e442a <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
 23f096c:	2010      	movs	r0, #16
 23f096e:	f7f3 fd58 	bl	23e4422 <_Znwj>
 23f0972:	4605      	mov	r5, r0
 23f0974:	b118      	cbz	r0, 23f097e <_ZN16Adafruit_MCP98085beginEhP7TwoWire+0x24>
 23f0976:	463a      	mov	r2, r7
 23f0978:	4631      	mov	r1, r6
 23f097a:	f7fe ff06 	bl	23ef78a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  return init();
 23f097e:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
 23f0980:	60a5      	str	r5, [r4, #8]
}
 23f0982:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return init();
 23f0986:	f7ff bfca 	b.w	23f091e <_ZN16Adafruit_MCP98084initEv>

023f098a <_ZN16Adafruit_MCP98085beginEh>:
bool Adafruit_MCP9808::begin(uint8_t addr) { return begin(addr, &Wire); }
 23f098a:	b513      	push	{r0, r1, r4, lr}
 23f098c:	4604      	mov	r4, r0
 23f098e:	9101      	str	r1, [sp, #4]
 23f0990:	f009 f8d8 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23f0994:	4602      	mov	r2, r0
 23f0996:	4620      	mov	r0, r4
 23f0998:	9901      	ldr	r1, [sp, #4]
 23f099a:	b002      	add	sp, #8
 23f099c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f09a0:	f7ff bfdb 	b.w	23f095a <_ZN16Adafruit_MCP98085beginEhP7TwoWire>

023f09a4 <_ZN16Adafruit_MCP98089readTempCEv>:
float Adafruit_MCP9808::readTempC() {
 23f09a4:	b508      	push	{r3, lr}
  uint16_t t = read16(MCP9808_REG_AMBIENT_TEMP);
 23f09a6:	2105      	movs	r1, #5
 23f09a8:	f7ff ffa7 	bl	23f08fa <_ZN16Adafruit_MCP98086read16Eh>
  if (t != 0xFFFF) {
 23f09ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23f09b0:	4298      	cmp	r0, r3
 23f09b2:	d00c      	beq.n	23f09ce <_ZN16Adafruit_MCP98089readTempCEv+0x2a>
    temp = t & 0x0FFF;
 23f09b4:	f3c0 030b 	ubfx	r3, r0, #0, #12
 23f09b8:	ee00 3a10 	vmov	s0, r3
    if (t & 0x1000)
 23f09bc:	04c3      	lsls	r3, r0, #19
    temp /= 16.0;
 23f09be:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
    if (t & 0x1000)
 23f09c2:	d503      	bpl.n	23f09cc <_ZN16Adafruit_MCP98089readTempCEv+0x28>
      temp -= 256;
 23f09c4:	eddf 7a03 	vldr	s15, [pc, #12]	; 23f09d4 <_ZN16Adafruit_MCP98089readTempCEv+0x30>
 23f09c8:	ee30 0a67 	vsub.f32	s0, s0, s15
}
 23f09cc:	bd08      	pop	{r3, pc}
  float temp = NAN;
 23f09ce:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23f09d8 <_ZN16Adafruit_MCP98089readTempCEv+0x34>
  return temp;
 23f09d2:	e7fb      	b.n	23f09cc <_ZN16Adafruit_MCP98089readTempCEv+0x28>
 23f09d4:	43800000 	.word	0x43800000
 23f09d8:	7fc00000 	.word	0x7fc00000

023f09dc <_ZN16Adafruit_MCP98088getEventEP15sensors_event_t>:
bool Adafruit_MCP9808::getEvent(sensors_event_t *temp) {
 23f09dc:	b570      	push	{r4, r5, r6, lr}
 23f09de:	460c      	mov	r4, r1
 23f09e0:	4605      	mov	r5, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23f09e2:	f005 fecd 	bl	23f6780 <HAL_Timer_Get_Milli_Seconds>
  memset(temp, 0, sizeof(sensors_event_t));
 23f09e6:	2220      	movs	r2, #32
 23f09e8:	4606      	mov	r6, r0
 23f09ea:	2100      	movs	r1, #0
 23f09ec:	1d20      	adds	r0, r4, #4
 23f09ee:	f00b fe86 	bl	23fc6fe <memset>
  temp->version = sizeof(sensors_event_t);
 23f09f2:	2324      	movs	r3, #36	; 0x24
 23f09f4:	6023      	str	r3, [r4, #0]
  temp->sensor_id = _sensorID;
 23f09f6:	88eb      	ldrh	r3, [r5, #6]
  temp->temperature = readTempC();
 23f09f8:	4628      	mov	r0, r5
  temp->sensor_id = _sensorID;
 23f09fa:	6063      	str	r3, [r4, #4]
  temp->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 23f09fc:	230d      	movs	r3, #13
  temp->timestamp = t;
 23f09fe:	6126      	str	r6, [r4, #16]
  temp->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 23f0a00:	60a3      	str	r3, [r4, #8]
  temp->temperature = readTempC();
 23f0a02:	f7ff ffcf 	bl	23f09a4 <_ZN16Adafruit_MCP98089readTempCEv>
}
 23f0a06:	2001      	movs	r0, #1
  temp->temperature = readTempC();
 23f0a08:	ed84 0a05 	vstr	s0, [r4, #20]
}
 23f0a0c:	bd70      	pop	{r4, r5, r6, pc}

023f0a0e <_ZN16Adafruit_PM25AQIC1Ev>:
#include "Adafruit_PM25AQI.h"

/*!
 *  @brief  Instantiates a new PM25AQI class
 */
Adafruit_PM25AQI::Adafruit_PM25AQI() {}
 23f0a0e:	2200      	movs	r2, #0
 23f0a10:	e9c0 2200 	strd	r2, r2, [r0]
 23f0a14:	4770      	bx	lr

023f0a16 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>:
 *  @brief  Setups the hardware and detects a valid PMSA003I. Initializes I2C.
 *  @param  theWire
 *          Optional pointer to I2C interface, otherwise use Wire
 *  @return True if PMSA003I found on I2C, False if something went wrong!
 */
bool Adafruit_PM25AQI::begin_I2C(TwoWire *theWire) {
 23f0a16:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
 23f0a18:	6803      	ldr	r3, [r0, #0]
bool Adafruit_PM25AQI::begin_I2C(TwoWire *theWire) {
 23f0a1a:	4604      	mov	r4, r0
  if (!i2c_dev) {
 23f0a1c:	b953      	cbnz	r3, 23f0a34 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire+0x1e>
    i2c_dev = new Adafruit_I2CDevice(PMSA003I_I2CADDR_DEFAULT, theWire);
 23f0a1e:	2010      	movs	r0, #16
 23f0a20:	9101      	str	r1, [sp, #4]
 23f0a22:	f7f3 fcfe 	bl	23e4422 <_Znwj>
 23f0a26:	4605      	mov	r5, r0
 23f0a28:	b118      	cbz	r0, 23f0a32 <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire+0x1c>
 23f0a2a:	2112      	movs	r1, #18
 23f0a2c:	9a01      	ldr	r2, [sp, #4]
 23f0a2e:	f7fe feac 	bl	23ef78a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
 23f0a32:	6025      	str	r5, [r4, #0]
  }

  if (!i2c_dev->begin()) {
 23f0a34:	2101      	movs	r1, #1
 23f0a36:	6820      	ldr	r0, [r4, #0]
    return false;
  }

  return true;
}
 23f0a38:	b003      	add	sp, #12
 23f0a3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  if (!i2c_dev->begin()) {
 23f0a3e:	f7fe bec0 	b.w	23ef7c2 <_ZN18Adafruit_I2CDevice5beginEb>

023f0a42 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata>:
 *  @brief  Setups the hardware and detects a valid UART PM2.5
 *  @param  data
 *          Pointer to PM25_AQI_Data that will be filled by read()ing
 *  @return True on successful read, false if timed out or bad data
 */
bool Adafruit_PM25AQI::read(PM25_AQI_Data *data) {
 23f0a42:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f0a44:	4604      	mov	r4, r0
  uint8_t buffer[32];
  uint16_t sum = 0;

  if (!data) {
 23f0a46:	460d      	mov	r5, r1
bool Adafruit_PM25AQI::read(PM25_AQI_Data *data) {
 23f0a48:	b091      	sub	sp, #68	; 0x44
  if (!data) {
 23f0a4a:	b911      	cbnz	r1, 23f0a52 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x10>
        return false;
      }
    }
    if (serial_dev->peek() != 0x42) {
      serial_dev->read();
      return false;
 23f0a4c:	2000      	movs	r0, #0
    return false;
  }

  // success!
  return true;
}
 23f0a4e:	b011      	add	sp, #68	; 0x44
 23f0a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (i2c_dev) { // ok using i2c?
 23f0a52:	6800      	ldr	r0, [r0, #0]
 23f0a54:	2800      	cmp	r0, #0
 23f0a56:	d039      	beq.n	23f0acc <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x8a>
    if (!i2c_dev->read(buffer, 32)) {
 23f0a58:	2220      	movs	r2, #32
 23f0a5a:	2301      	movs	r3, #1
 23f0a5c:	eb0d 0102 	add.w	r1, sp, r2
 23f0a60:	f7fe feee 	bl	23ef840 <_ZN18Adafruit_I2CDevice4readEPhjb>
 23f0a64:	2800      	cmp	r0, #0
 23f0a66:	d0f1      	beq.n	23f0a4c <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
  if (buffer[0] != 0x42) {
 23f0a68:	f89d 3020 	ldrb.w	r3, [sp, #32]
 23f0a6c:	2b42      	cmp	r3, #66	; 0x42
 23f0a6e:	d1ed      	bne.n	23f0a4c <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
 23f0a70:	aa08      	add	r2, sp, #32
 23f0a72:	4611      	mov	r1, r2
 23f0a74:	231e      	movs	r3, #30
  uint16_t sum = 0;
 23f0a76:	2600      	movs	r6, #0
    sum += buffer[i];
 23f0a78:	f811 0b01 	ldrb.w	r0, [r1], #1
  for (uint8_t i = 0; i < 30; i++) {
 23f0a7c:	3b01      	subs	r3, #1
    sum += buffer[i];
 23f0a7e:	4430      	add	r0, r6
  for (uint8_t i = 0; i < 30; i++) {
 23f0a80:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    sum += buffer[i];
 23f0a84:	b286      	uxth	r6, r0
  for (uint8_t i = 0; i < 30; i++) {
 23f0a86:	d1f7      	bne.n	23f0a78 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x36>
 23f0a88:	4668      	mov	r0, sp
 23f0a8a:	2101      	movs	r1, #1
 23f0a8c:	4603      	mov	r3, r0
    buffer_u16[i] += (buffer[2 + i * 2] << 8);
 23f0a8e:	7897      	ldrb	r7, [r2, #2]
    buffer_u16[i] = buffer[2 + i * 2 + 1];
 23f0a90:	78d4      	ldrb	r4, [r2, #3]
  for (uint8_t i = 0; i < 15; i++) {
 23f0a92:	3101      	adds	r1, #1
    buffer_u16[i] += (buffer[2 + i * 2] << 8);
 23f0a94:	eb04 2407 	add.w	r4, r4, r7, lsl #8
  for (uint8_t i = 0; i < 15; i++) {
 23f0a98:	2910      	cmp	r1, #16
    buffer_u16[i] += (buffer[2 + i * 2] << 8);
 23f0a9a:	f820 4b02 	strh.w	r4, [r0], #2
  for (uint8_t i = 0; i < 15; i++) {
 23f0a9e:	f102 0202 	add.w	r2, r2, #2
 23f0aa2:	d1f4      	bne.n	23f0a8e <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x4c>
  memcpy((void *)data, (void *)buffer_u16, 30);
 23f0aa4:	462a      	mov	r2, r5
 23f0aa6:	af06      	add	r7, sp, #24
 23f0aa8:	461c      	mov	r4, r3
 23f0aaa:	cc03      	ldmia	r4!, {r0, r1}
 23f0aac:	42bc      	cmp	r4, r7
 23f0aae:	6010      	str	r0, [r2, #0]
 23f0ab0:	6051      	str	r1, [r2, #4]
 23f0ab2:	4623      	mov	r3, r4
 23f0ab4:	f102 0208 	add.w	r2, r2, #8
 23f0ab8:	d1f6      	bne.n	23f0aa8 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x66>
 23f0aba:	6820      	ldr	r0, [r4, #0]
 23f0abc:	6010      	str	r0, [r2, #0]
 23f0abe:	88a3      	ldrh	r3, [r4, #4]
 23f0ac0:	8093      	strh	r3, [r2, #4]
  if (sum != data->checksum) {
 23f0ac2:	8ba8      	ldrh	r0, [r5, #28]
 23f0ac4:	1b83      	subs	r3, r0, r6
 23f0ac6:	4258      	negs	r0, r3
 23f0ac8:	4158      	adcs	r0, r3
 23f0aca:	e7c0      	b.n	23f0a4e <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xc>
  } else if (serial_dev) { // ok using uart
 23f0acc:	6860      	ldr	r0, [r4, #4]
 23f0ace:	2800      	cmp	r0, #0
 23f0ad0:	d0bc      	beq.n	23f0a4c <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
    if (!serial_dev->available()) {
 23f0ad2:	6803      	ldr	r3, [r0, #0]
 23f0ad4:	691b      	ldr	r3, [r3, #16]
 23f0ad6:	4798      	blx	r3
 23f0ad8:	2800      	cmp	r0, #0
 23f0ada:	d0b7      	beq.n	23f0a4c <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
 23f0adc:	2620      	movs	r6, #32
    while ((skipped < 32) && (serial_dev->peek() != 0x42)) {
 23f0ade:	6860      	ldr	r0, [r4, #4]
 23f0ae0:	6803      	ldr	r3, [r0, #0]
 23f0ae2:	699b      	ldr	r3, [r3, #24]
 23f0ae4:	4798      	blx	r3
 23f0ae6:	2842      	cmp	r0, #66	; 0x42
 23f0ae8:	d00b      	beq.n	23f0b02 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xc0>
      serial_dev->read();
 23f0aea:	6860      	ldr	r0, [r4, #4]
 23f0aec:	6803      	ldr	r3, [r0, #0]
 23f0aee:	695b      	ldr	r3, [r3, #20]
 23f0af0:	4798      	blx	r3
      if (!serial_dev->available()) {
 23f0af2:	6860      	ldr	r0, [r4, #4]
 23f0af4:	6803      	ldr	r3, [r0, #0]
 23f0af6:	691b      	ldr	r3, [r3, #16]
 23f0af8:	4798      	blx	r3
 23f0afa:	2800      	cmp	r0, #0
 23f0afc:	d0a6      	beq.n	23f0a4c <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
    while ((skipped < 32) && (serial_dev->peek() != 0x42)) {
 23f0afe:	3e01      	subs	r6, #1
 23f0b00:	d1ed      	bne.n	23f0ade <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x9c>
    if (serial_dev->peek() != 0x42) {
 23f0b02:	6860      	ldr	r0, [r4, #4]
 23f0b04:	6803      	ldr	r3, [r0, #0]
 23f0b06:	699b      	ldr	r3, [r3, #24]
 23f0b08:	4798      	blx	r3
 23f0b0a:	2842      	cmp	r0, #66	; 0x42
 23f0b0c:	6860      	ldr	r0, [r4, #4]
      serial_dev->read();
 23f0b0e:	6803      	ldr	r3, [r0, #0]
    if (serial_dev->peek() != 0x42) {
 23f0b10:	d002      	beq.n	23f0b18 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xd6>
      serial_dev->read();
 23f0b12:	695b      	ldr	r3, [r3, #20]
 23f0b14:	4798      	blx	r3
 23f0b16:	e799      	b.n	23f0a4c <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
    if (serial_dev->available() < 32) {
 23f0b18:	691b      	ldr	r3, [r3, #16]
 23f0b1a:	4798      	blx	r3
 23f0b1c:	281f      	cmp	r0, #31
 23f0b1e:	dd95      	ble.n	23f0a4c <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
    serial_dev->readBytes((char *)buffer, 32);
 23f0b20:	2220      	movs	r2, #32
 23f0b22:	6860      	ldr	r0, [r4, #4]
 23f0b24:	eb0d 0102 	add.w	r1, sp, r2
 23f0b28:	6803      	ldr	r3, [r0, #0]
 23f0b2a:	6a1b      	ldr	r3, [r3, #32]
 23f0b2c:	4798      	blx	r3
 23f0b2e:	e79b      	b.n	23f0a68 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x26>

023f0b30 <_ZL4crc8PKhi.constprop.0>:

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);

  for (int j = len; j; --j) {
    crc ^= *data++;
 23f0b30:	7803      	ldrb	r3, [r0, #0]
 23f0b32:	2208      	movs	r2, #8
 23f0b34:	43db      	mvns	r3, r3
 23f0b36:	b2db      	uxtb	r3, r3

    for (int i = 8; i; --i) {
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
 23f0b38:	f013 0f80 	tst.w	r3, #128	; 0x80
 23f0b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23f0b40:	d001      	beq.n	23f0b46 <_ZL4crc8PKhi.constprop.0+0x16>
 23f0b42:	f083 0331 	eor.w	r3, r3, #49	; 0x31
    for (int i = 8; i; --i) {
 23f0b46:	3a01      	subs	r2, #1
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
 23f0b48:	b2db      	uxtb	r3, r3
    for (int i = 8; i; --i) {
 23f0b4a:	d1f5      	bne.n	23f0b38 <_ZL4crc8PKhi.constprop.0+0x8>
    crc ^= *data++;
 23f0b4c:	7840      	ldrb	r0, [r0, #1]
 23f0b4e:	4058      	eors	r0, r3
 23f0b50:	2308      	movs	r3, #8
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
 23f0b52:	f010 0f80 	tst.w	r0, #128	; 0x80
 23f0b56:	ea4f 0040 	mov.w	r0, r0, lsl #1
 23f0b5a:	d001      	beq.n	23f0b60 <_ZL4crc8PKhi.constprop.0+0x30>
 23f0b5c:	f080 0031 	eor.w	r0, r0, #49	; 0x31
    for (int i = 8; i; --i) {
 23f0b60:	3b01      	subs	r3, #1
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
 23f0b62:	b2c0      	uxtb	r0, r0
    for (int i = 8; i; --i) {
 23f0b64:	d1f5      	bne.n	23f0b52 <_ZL4crc8PKhi.constprop.0+0x22>
 23f0b66:	4770      	bx	lr

023f0b68 <_ZN14Adafruit_SHT31C1EP7TwoWire>:
Adafruit_SHT31::Adafruit_SHT31(TwoWire *theWire) {
 23f0b68:	2200      	movs	r2, #0
  _wire = theWire;
 23f0b6a:	e9c0 1202 	strd	r1, r2, [r0, #8]
  humidity = NAN;
 23f0b6e:	4a02      	ldr	r2, [pc, #8]	; (23f0b78 <_ZN14Adafruit_SHT31C1EP7TwoWire+0x10>)
 23f0b70:	6002      	str	r2, [r0, #0]
  temp = NAN;
 23f0b72:	6042      	str	r2, [r0, #4]
}
 23f0b74:	4770      	bx	lr
 23f0b76:	bf00      	nop
 23f0b78:	7fc00000 	.word	0x7fc00000

023f0b7c <_ZN14Adafruit_SHT31D1Ev>:
Adafruit_SHT31::~Adafruit_SHT31() {
 23f0b7c:	b510      	push	{r4, lr}
 23f0b7e:	4604      	mov	r4, r0
  if (i2c_dev) {
 23f0b80:	68c0      	ldr	r0, [r0, #12]
 23f0b82:	b110      	cbz	r0, 23f0b8a <_ZN14Adafruit_SHT31D1Ev+0xe>
    delete i2c_dev; // remove old interface
 23f0b84:	2110      	movs	r1, #16
 23f0b86:	f7f3 fc50 	bl	23e442a <_ZdlPvj>
}
 23f0b8a:	4620      	mov	r0, r4
 23f0b8c:	bd10      	pop	{r4, pc}

023f0b8e <_ZN14Adafruit_SHT3112writeCommandEt>:
/**
 * Internal function to perform and I2C write.
 *
 * @param cmd   The 16-bit command ID to send.
 */
bool Adafruit_SHT31::writeCommand(uint16_t command) {
 23f0b8e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t cmd[2];

  cmd[0] = command >> 8;
 23f0b90:	0a0b      	lsrs	r3, r1, #8
 23f0b92:	f88d 300c 	strb.w	r3, [sp, #12]
  cmd[1] = command & 0xFF;

  return i2c_dev->write(cmd, 2);
 23f0b96:	2300      	movs	r3, #0
 23f0b98:	e9cd 3300 	strd	r3, r3, [sp]
  cmd[1] = command & 0xFF;
 23f0b9c:	f88d 100d 	strb.w	r1, [sp, #13]
  return i2c_dev->write(cmd, 2);
 23f0ba0:	2301      	movs	r3, #1
 23f0ba2:	2202      	movs	r2, #2
 23f0ba4:	a903      	add	r1, sp, #12
 23f0ba6:	68c0      	ldr	r0, [r0, #12]
 23f0ba8:	f7fe fe1a 	bl	23ef7e0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
 23f0bac:	b005      	add	sp, #20
 23f0bae:	f85d fb04 	ldr.w	pc, [sp], #4

023f0bb2 <_ZN14Adafruit_SHT3110readStatusEv>:
uint16_t Adafruit_SHT31::readStatus(void) {
 23f0bb2:	b513      	push	{r0, r1, r4, lr}
 23f0bb4:	4604      	mov	r4, r0
  writeCommand(SHT31_READSTATUS);
 23f0bb6:	f24f 312d 	movw	r1, #62253	; 0xf32d
 23f0bba:	f7ff ffe8 	bl	23f0b8e <_ZN14Adafruit_SHT3112writeCommandEt>
  i2c_dev->read(data, 3);
 23f0bbe:	2301      	movs	r3, #1
 23f0bc0:	2203      	movs	r2, #3
 23f0bc2:	68e0      	ldr	r0, [r4, #12]
 23f0bc4:	a901      	add	r1, sp, #4
 23f0bc6:	f7fe fe3b 	bl	23ef840 <_ZN18Adafruit_I2CDevice4readEPhjb>
  return stat;
 23f0bca:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 23f0bce:	ba40      	rev16	r0, r0
}
 23f0bd0:	b280      	uxth	r0, r0
 23f0bd2:	b002      	add	sp, #8
 23f0bd4:	bd10      	pop	{r4, pc}

023f0bd6 <_ZN14Adafruit_SHT315resetEv>:
void Adafruit_SHT31::reset(void) {
 23f0bd6:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
 23f0bd8:	f243 01a2 	movw	r1, #12450	; 0x30a2
 23f0bdc:	f7ff ffd7 	bl	23f0b8e <_ZN14Adafruit_SHT3112writeCommandEt>
}
 23f0be0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(10);
 23f0be4:	200a      	movs	r0, #10
 23f0be6:	f006 bd1f 	b.w	23f7628 <delay>

023f0bea <_ZN14Adafruit_SHT315beginEh>:
bool Adafruit_SHT31::begin(uint8_t i2caddr) {
 23f0bea:	b570      	push	{r4, r5, r6, lr}
 23f0bec:	4604      	mov	r4, r0
  if (i2c_dev) {
 23f0bee:	68c0      	ldr	r0, [r0, #12]
bool Adafruit_SHT31::begin(uint8_t i2caddr) {
 23f0bf0:	460e      	mov	r6, r1
  if (i2c_dev) {
 23f0bf2:	b110      	cbz	r0, 23f0bfa <_ZN14Adafruit_SHT315beginEh+0x10>
    delete i2c_dev; // remove old interface
 23f0bf4:	2110      	movs	r1, #16
 23f0bf6:	f7f3 fc18 	bl	23e442a <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(i2caddr, _wire);
 23f0bfa:	2010      	movs	r0, #16
 23f0bfc:	f7f3 fc11 	bl	23e4422 <_Znwj>
 23f0c00:	4605      	mov	r5, r0
 23f0c02:	b118      	cbz	r0, 23f0c0c <_ZN14Adafruit_SHT315beginEh+0x22>
 23f0c04:	4631      	mov	r1, r6
 23f0c06:	68a2      	ldr	r2, [r4, #8]
 23f0c08:	f7fe fdbf 	bl	23ef78a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin()) {
 23f0c0c:	2101      	movs	r1, #1
 23f0c0e:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(i2caddr, _wire);
 23f0c10:	60e5      	str	r5, [r4, #12]
  if (!i2c_dev->begin()) {
 23f0c12:	f7fe fdd6 	bl	23ef7c2 <_ZN18Adafruit_I2CDevice5beginEb>
 23f0c16:	b150      	cbz	r0, 23f0c2e <_ZN14Adafruit_SHT315beginEh+0x44>
  reset();
 23f0c18:	4620      	mov	r0, r4
 23f0c1a:	f7ff ffdc 	bl	23f0bd6 <_ZN14Adafruit_SHT315resetEv>
  return readStatus() != 0xFFFF;
 23f0c1e:	4620      	mov	r0, r4
 23f0c20:	f7ff ffc7 	bl	23f0bb2 <_ZN14Adafruit_SHT3110readStatusEv>
 23f0c24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23f0c28:	1ac0      	subs	r0, r0, r3
 23f0c2a:	bf18      	it	ne
 23f0c2c:	2001      	movne	r0, #1
}
 23f0c2e:	bd70      	pop	{r4, r5, r6, pc}

023f0c30 <_ZN14Adafruit_SHT3111readTempHumEv>:
bool Adafruit_SHT31::readTempHum(void) {
 23f0c30:	b513      	push	{r0, r1, r4, lr}
 23f0c32:	4604      	mov	r4, r0
  writeCommand(SHT31_MEAS_HIGHREP);
 23f0c34:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 23f0c38:	f7ff ffa9 	bl	23f0b8e <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(20);
 23f0c3c:	2014      	movs	r0, #20
 23f0c3e:	f006 fcf3 	bl	23f7628 <delay>
  i2c_dev->read(readbuffer, sizeof(readbuffer));
 23f0c42:	2301      	movs	r3, #1
 23f0c44:	2206      	movs	r2, #6
 23f0c46:	4669      	mov	r1, sp
 23f0c48:	68e0      	ldr	r0, [r4, #12]
 23f0c4a:	f7fe fdf9 	bl	23ef840 <_ZN18Adafruit_I2CDevice4readEPhjb>
  if (readbuffer[2] != crc8(readbuffer, 2) ||
 23f0c4e:	4668      	mov	r0, sp
 23f0c50:	f7ff ff6e 	bl	23f0b30 <_ZL4crc8PKhi.constprop.0>
 23f0c54:	f89d 1002 	ldrb.w	r1, [sp, #2]
 23f0c58:	4281      	cmp	r1, r0
 23f0c5a:	d12f      	bne.n	23f0cbc <_ZN14Adafruit_SHT3111readTempHumEv+0x8c>
      readbuffer[5] != crc8(readbuffer + 3, 2))
 23f0c5c:	f10d 0003 	add.w	r0, sp, #3
 23f0c60:	f7ff ff66 	bl	23f0b30 <_ZL4crc8PKhi.constprop.0>
 23f0c64:	f89d 1005 	ldrb.w	r1, [sp, #5]
  if (readbuffer[2] != crc8(readbuffer, 2) ||
 23f0c68:	4281      	cmp	r1, r0
 23f0c6a:	d127      	bne.n	23f0cbc <_ZN14Adafruit_SHT3111readTempHumEv+0x8c>
  stemp = ((4375 * stemp) >> 14) - 4500;
 23f0c6c:	f241 1217 	movw	r2, #4375	; 0x1117
  int32_t stemp = (int32_t)(((uint32_t)readbuffer[0] << 8) | readbuffer[1]);
 23f0c70:	f8bd 3000 	ldrh.w	r3, [sp]
  temp = (float)stemp / 100.0f;
 23f0c74:	ed9f 7a12 	vldr	s14, [pc, #72]	; 23f0cc0 <_ZN14Adafruit_SHT3111readTempHumEv+0x90>
  int32_t stemp = (int32_t)(((uint32_t)readbuffer[0] << 8) | readbuffer[1]);
 23f0c78:	ba5b      	rev16	r3, r3
 23f0c7a:	b29b      	uxth	r3, r3
  stemp = ((4375 * stemp) >> 14) - 4500;
 23f0c7c:	4353      	muls	r3, r2
 23f0c7e:	139b      	asrs	r3, r3, #14
 23f0c80:	f5a3 538c 	sub.w	r3, r3, #4480	; 0x1180
 23f0c84:	3b14      	subs	r3, #20
  temp = (float)stemp / 100.0f;
 23f0c86:	ee07 3a90 	vmov	s15, r3
  shum = (625 * shum) >> 12;
 23f0c8a:	f240 2271 	movw	r2, #625	; 0x271
  temp = (float)stemp / 100.0f;
 23f0c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  shum = (625 * shum) >> 12;
 23f0c92:	f8bd 3003 	ldrh.w	r3, [sp, #3]
  temp = (float)stemp / 100.0f;
 23f0c96:	eec7 6a87 	vdiv.f32	s13, s15, s14
  shum = (625 * shum) >> 12;
 23f0c9a:	ba5b      	rev16	r3, r3
 23f0c9c:	b29b      	uxth	r3, r3
 23f0c9e:	4353      	muls	r3, r2
 23f0ca0:	0b1b      	lsrs	r3, r3, #12
  humidity = (float)shum / 100.0f;
 23f0ca2:	ee07 3a90 	vmov	s15, r3
 23f0ca6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  temp = (float)stemp / 100.0f;
 23f0caa:	edc4 6a01 	vstr	s13, [r4, #4]
  humidity = (float)shum / 100.0f;
 23f0cae:	eec7 6a87 	vdiv.f32	s13, s15, s14
  return true;
 23f0cb2:	2001      	movs	r0, #1
  humidity = (float)shum / 100.0f;
 23f0cb4:	edc4 6a00 	vstr	s13, [r4]
}
 23f0cb8:	b002      	add	sp, #8
 23f0cba:	bd10      	pop	{r4, pc}
    return false;
 23f0cbc:	2000      	movs	r0, #0
 23f0cbe:	e7fb      	b.n	23f0cb8 <_ZN14Adafruit_SHT3111readTempHumEv+0x88>
 23f0cc0:	42c80000 	.word	0x42c80000

023f0cc4 <_ZN14Adafruit_SHT3115readTemperatureEv>:
float Adafruit_SHT31::readTemperature(void) {
 23f0cc4:	b510      	push	{r4, lr}
 23f0cc6:	4604      	mov	r4, r0
  if (!readTempHum())
 23f0cc8:	f7ff ffb2 	bl	23f0c30 <_ZN14Adafruit_SHT3111readTempHumEv>
 23f0ccc:	b110      	cbz	r0, 23f0cd4 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>
  return temp;
 23f0cce:	ed94 0a01 	vldr	s0, [r4, #4]
}
 23f0cd2:	bd10      	pop	{r4, pc}
    return NAN;
 23f0cd4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 23f0cdc <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>
 23f0cd8:	e7fb      	b.n	23f0cd2 <_ZN14Adafruit_SHT3115readTemperatureEv+0xe>
 23f0cda:	bf00      	nop
 23f0cdc:	7fc00000 	.word	0x7fc00000

023f0ce0 <_ZN14Adafruit_SHT3112readHumidityEv>:
float Adafruit_SHT31::readHumidity(void) {
 23f0ce0:	b510      	push	{r4, lr}
 23f0ce2:	4604      	mov	r4, r0
  if (!readTempHum())
 23f0ce4:	f7ff ffa4 	bl	23f0c30 <_ZN14Adafruit_SHT3111readTempHumEv>
 23f0ce8:	b110      	cbz	r0, 23f0cf0 <_ZN14Adafruit_SHT3112readHumidityEv+0x10>
  return humidity;
 23f0cea:	ed94 0a00 	vldr	s0, [r4]
}
 23f0cee:	bd10      	pop	{r4, pc}
    return NAN;
 23f0cf0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 23f0cf8 <_ZN14Adafruit_SHT3112readHumidityEv+0x18>
 23f0cf4:	e7fb      	b.n	23f0cee <_ZN14Adafruit_SHT3112readHumidityEv+0xe>
 23f0cf6:	bf00      	nop
 23f0cf8:	7fc00000 	.word	0x7fc00000

023f0cfc <_ZN15Adafruit_SI1145C1Ev>:
#include "Adafruit_SI1145.h"
/**
 * @brief Construct a new Adafruit_SI1145::Adafruit_SI1145 object
 *
 */
Adafruit_SI1145::Adafruit_SI1145() : m_pBus(&Wire), _addr(SI1145_ADDR) {}
 23f0cfc:	b510      	push	{r4, lr}
 23f0cfe:	4604      	mov	r4, r0
 23f0d00:	f008 ff20 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23f0d04:	2360      	movs	r3, #96	; 0x60
 23f0d06:	6020      	str	r0, [r4, #0]
 23f0d08:	7123      	strb	r3, [r4, #4]
 23f0d0a:	4620      	mov	r0, r4
 23f0d0c:	bd10      	pop	{r4, pc}

023f0d0e <_ZN15Adafruit_SI11455read8Eh>:
  return read8(SI1145_REG_PARAMRD);
}

/*********************************************************************/

uint8_t Adafruit_SI1145::read8(uint8_t reg) {
 23f0d0e:	b538      	push	{r3, r4, r5, lr}
 23f0d10:	4604      	mov	r4, r0
 23f0d12:	460d      	mov	r5, r1
  m_pBus->beginTransmission(_addr);
 23f0d14:	7901      	ldrb	r1, [r0, #4]
 23f0d16:	6800      	ldr	r0, [r0, #0]
 23f0d18:	f007 fa74 	bl	23f8204 <_ZN7TwoWire17beginTransmissionEh>
  m_pBus->write((uint8_t)reg);
 23f0d1c:	6820      	ldr	r0, [r4, #0]
 23f0d1e:	4629      	mov	r1, r5
 23f0d20:	6803      	ldr	r3, [r0, #0]
 23f0d22:	689b      	ldr	r3, [r3, #8]
 23f0d24:	4798      	blx	r3
  m_pBus->endTransmission();
 23f0d26:	6820      	ldr	r0, [r4, #0]
 23f0d28:	f007 fa77 	bl	23f821a <_ZN7TwoWire15endTransmissionEv>

  m_pBus->requestFrom((uint8_t)_addr, (uint8_t)1);
 23f0d2c:	2201      	movs	r2, #1
 23f0d2e:	7921      	ldrb	r1, [r4, #4]
 23f0d30:	6820      	ldr	r0, [r4, #0]
 23f0d32:	f007 fa64 	bl	23f81fe <_ZN7TwoWire11requestFromEhj>
  return m_pBus->read();
 23f0d36:	6820      	ldr	r0, [r4, #0]
 23f0d38:	6803      	ldr	r3, [r0, #0]
 23f0d3a:	695b      	ldr	r3, [r3, #20]
 23f0d3c:	4798      	blx	r3
}
 23f0d3e:	b2c0      	uxtb	r0, r0
 23f0d40:	bd38      	pop	{r3, r4, r5, pc}

023f0d42 <_ZN15Adafruit_SI11456read16Eh>:

uint16_t Adafruit_SI1145::read16(uint8_t a) {
 23f0d42:	b538      	push	{r3, r4, r5, lr}
 23f0d44:	4604      	mov	r4, r0
 23f0d46:	460d      	mov	r5, r1
  uint16_t ret;

  m_pBus->beginTransmission(_addr); // start transmission to device
 23f0d48:	7901      	ldrb	r1, [r0, #4]
 23f0d4a:	6800      	ldr	r0, [r0, #0]
 23f0d4c:	f007 fa5a 	bl	23f8204 <_ZN7TwoWire17beginTransmissionEh>
  m_pBus->write(a);                 // sends register address to read from
 23f0d50:	6820      	ldr	r0, [r4, #0]
 23f0d52:	4629      	mov	r1, r5
 23f0d54:	6803      	ldr	r3, [r0, #0]
 23f0d56:	689b      	ldr	r3, [r3, #8]
 23f0d58:	4798      	blx	r3
  m_pBus->endTransmission();        // end transmission
 23f0d5a:	6820      	ldr	r0, [r4, #0]
 23f0d5c:	f007 fa5d 	bl	23f821a <_ZN7TwoWire15endTransmissionEv>

  m_pBus->requestFrom(_addr, (uint8_t)2); // send data n-bytes read
 23f0d60:	2202      	movs	r2, #2
 23f0d62:	7921      	ldrb	r1, [r4, #4]
 23f0d64:	6820      	ldr	r0, [r4, #0]
 23f0d66:	f007 fa4a 	bl	23f81fe <_ZN7TwoWire11requestFromEhj>
  ret = m_pBus->read();                   // receive DATA
 23f0d6a:	6820      	ldr	r0, [r4, #0]
 23f0d6c:	6803      	ldr	r3, [r0, #0]
 23f0d6e:	695b      	ldr	r3, [r3, #20]
 23f0d70:	4798      	blx	r3
 23f0d72:	4605      	mov	r5, r0
  ret |= (uint16_t)m_pBus->read() << 8;   // receive DATA
 23f0d74:	6820      	ldr	r0, [r4, #0]
 23f0d76:	6803      	ldr	r3, [r0, #0]
 23f0d78:	695b      	ldr	r3, [r3, #20]
 23f0d7a:	4798      	blx	r3
 23f0d7c:	ea45 2000 	orr.w	r0, r5, r0, lsl #8

  return ret;
}
 23f0d80:	b280      	uxth	r0, r0
 23f0d82:	bd38      	pop	{r3, r4, r5, pc}

023f0d84 <_ZN15Adafruit_SI11456readUVEv>:
uint16_t Adafruit_SI1145::readUV(void) { return read16(0x2C); }
 23f0d84:	212c      	movs	r1, #44	; 0x2c
 23f0d86:	f7ff bfdc 	b.w	23f0d42 <_ZN15Adafruit_SI11456read16Eh>

023f0d8a <_ZN15Adafruit_SI114511readVisibleEv>:
uint16_t Adafruit_SI1145::readVisible(void) { return read16(0x22); }
 23f0d8a:	2122      	movs	r1, #34	; 0x22
 23f0d8c:	f7ff bfd9 	b.w	23f0d42 <_ZN15Adafruit_SI11456read16Eh>

023f0d90 <_ZN15Adafruit_SI11456readIREv>:
uint16_t Adafruit_SI1145::readIR(void) { return read16(0x24); }
 23f0d90:	2124      	movs	r1, #36	; 0x24
 23f0d92:	f7ff bfd6 	b.w	23f0d42 <_ZN15Adafruit_SI11456read16Eh>

023f0d96 <_ZN15Adafruit_SI11456write8Ehh>:

void Adafruit_SI1145::write8(uint8_t reg, uint8_t val) {
 23f0d96:	b570      	push	{r4, r5, r6, lr}
 23f0d98:	4604      	mov	r4, r0
 23f0d9a:	460e      	mov	r6, r1
 23f0d9c:	4615      	mov	r5, r2

  m_pBus->beginTransmission(_addr); // start transmission to device
 23f0d9e:	7901      	ldrb	r1, [r0, #4]
 23f0da0:	6800      	ldr	r0, [r0, #0]
 23f0da2:	f007 fa2f 	bl	23f8204 <_ZN7TwoWire17beginTransmissionEh>
  m_pBus->write(reg);               // sends register address to write
 23f0da6:	6820      	ldr	r0, [r4, #0]
 23f0da8:	4631      	mov	r1, r6
 23f0daa:	6803      	ldr	r3, [r0, #0]
 23f0dac:	689b      	ldr	r3, [r3, #8]
 23f0dae:	4798      	blx	r3
  m_pBus->write(val);               // sends value
 23f0db0:	6820      	ldr	r0, [r4, #0]
 23f0db2:	4629      	mov	r1, r5
 23f0db4:	6803      	ldr	r3, [r0, #0]
 23f0db6:	689b      	ldr	r3, [r3, #8]
 23f0db8:	4798      	blx	r3
  m_pBus->endTransmission();        // end transmission
 23f0dba:	6820      	ldr	r0, [r4, #0]
}
 23f0dbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  m_pBus->endTransmission();        // end transmission
 23f0dc0:	f007 ba2b 	b.w	23f821a <_ZN7TwoWire15endTransmissionEv>

023f0dc4 <_ZN15Adafruit_SI11455resetEv>:
void Adafruit_SI1145::reset() {
 23f0dc4:	b510      	push	{r4, lr}
 23f0dc6:	4604      	mov	r4, r0
  write8(SI1145_REG_MEASRATE0, 0);
 23f0dc8:	2200      	movs	r2, #0
 23f0dca:	2108      	movs	r1, #8
 23f0dcc:	f7ff ffe3 	bl	23f0d96 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_MEASRATE1, 0);
 23f0dd0:	4620      	mov	r0, r4
 23f0dd2:	2200      	movs	r2, #0
 23f0dd4:	2109      	movs	r1, #9
 23f0dd6:	f7ff ffde 	bl	23f0d96 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQEN, 0);
 23f0dda:	4620      	mov	r0, r4
 23f0ddc:	2200      	movs	r2, #0
 23f0dde:	2104      	movs	r1, #4
 23f0de0:	f7ff ffd9 	bl	23f0d96 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQMODE1, 0);
 23f0de4:	4620      	mov	r0, r4
 23f0de6:	2200      	movs	r2, #0
 23f0de8:	2105      	movs	r1, #5
 23f0dea:	f7ff ffd4 	bl	23f0d96 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQMODE2, 0);
 23f0dee:	4620      	mov	r0, r4
 23f0df0:	2200      	movs	r2, #0
 23f0df2:	2106      	movs	r1, #6
 23f0df4:	f7ff ffcf 	bl	23f0d96 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_INTCFG, 0);
 23f0df8:	4620      	mov	r0, r4
 23f0dfa:	2200      	movs	r2, #0
 23f0dfc:	2103      	movs	r1, #3
 23f0dfe:	f7ff ffca 	bl	23f0d96 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQSTAT, 0xFF);
 23f0e02:	4620      	mov	r0, r4
 23f0e04:	22ff      	movs	r2, #255	; 0xff
 23f0e06:	2121      	movs	r1, #33	; 0x21
 23f0e08:	f7ff ffc5 	bl	23f0d96 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_COMMAND, SI1145_RESET);
 23f0e0c:	2201      	movs	r2, #1
 23f0e0e:	2118      	movs	r1, #24
 23f0e10:	4620      	mov	r0, r4
 23f0e12:	f7ff ffc0 	bl	23f0d96 <_ZN15Adafruit_SI11456write8Ehh>
  delay(10);
 23f0e16:	200a      	movs	r0, #10
 23f0e18:	f006 fc06 	bl	23f7628 <delay>
  write8(SI1145_REG_HWKEY, 0x17);
 23f0e1c:	4620      	mov	r0, r4
 23f0e1e:	2217      	movs	r2, #23
 23f0e20:	2107      	movs	r1, #7
 23f0e22:	f7ff ffb8 	bl	23f0d96 <_ZN15Adafruit_SI11456write8Ehh>
}
 23f0e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(10);
 23f0e2a:	200a      	movs	r0, #10
 23f0e2c:	f006 bbfc 	b.w	23f7628 <delay>

023f0e30 <_ZN15Adafruit_SI114510writeParamEhh>:
uint8_t Adafruit_SI1145::writeParam(uint8_t p, uint8_t v) {
 23f0e30:	b538      	push	{r3, r4, r5, lr}
 23f0e32:	4604      	mov	r4, r0
 23f0e34:	460d      	mov	r5, r1
  write8(SI1145_REG_PARAMWR, v);
 23f0e36:	2117      	movs	r1, #23
 23f0e38:	f7ff ffad 	bl	23f0d96 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_COMMAND, p | SI1145_PARAM_SET);
 23f0e3c:	4620      	mov	r0, r4
 23f0e3e:	2118      	movs	r1, #24
 23f0e40:	f045 02a0 	orr.w	r2, r5, #160	; 0xa0
 23f0e44:	f7ff ffa7 	bl	23f0d96 <_ZN15Adafruit_SI11456write8Ehh>
  return read8(SI1145_REG_PARAMRD);
 23f0e48:	4620      	mov	r0, r4
}
 23f0e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return read8(SI1145_REG_PARAMRD);
 23f0e4e:	212e      	movs	r1, #46	; 0x2e
 23f0e50:	f7ff bf5d 	b.w	23f0d0e <_ZN15Adafruit_SI11455read8Eh>

023f0e54 <_ZN15Adafruit_SI11455beginEhP7TwoWire>:
boolean Adafruit_SI1145::begin(uint8_t addr, TwoWire *pBus) {
 23f0e54:	b510      	push	{r4, lr}
 23f0e56:	4604      	mov	r4, r0
 23f0e58:	4610      	mov	r0, r2
  _addr = addr;
 23f0e5a:	7121      	strb	r1, [r4, #4]
  m_pBus = pBus;
 23f0e5c:	6022      	str	r2, [r4, #0]
  m_pBus->begin();
 23f0e5e:	f007 f9a7 	bl	23f81b0 <_ZN7TwoWire5beginEv>
  uint8_t id = read8(SI1145_REG_PARTID);
 23f0e62:	2100      	movs	r1, #0
 23f0e64:	4620      	mov	r0, r4
 23f0e66:	f7ff ff52 	bl	23f0d0e <_ZN15Adafruit_SI11455read8Eh>
  if (id != 0x45)
 23f0e6a:	2845      	cmp	r0, #69	; 0x45
 23f0e6c:	d172      	bne.n	23f0f54 <_ZN15Adafruit_SI11455beginEhP7TwoWire+0x100>
  reset();
 23f0e6e:	4620      	mov	r0, r4
 23f0e70:	f7ff ffa8 	bl	23f0dc4 <_ZN15Adafruit_SI11455resetEv>
  write8(SI1145_REG_UCOEFF0, 0x29);
 23f0e74:	2229      	movs	r2, #41	; 0x29
 23f0e76:	2113      	movs	r1, #19
 23f0e78:	4620      	mov	r0, r4
 23f0e7a:	f7ff ff8c 	bl	23f0d96 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF1, 0x89);
 23f0e7e:	2289      	movs	r2, #137	; 0x89
 23f0e80:	2114      	movs	r1, #20
 23f0e82:	4620      	mov	r0, r4
 23f0e84:	f7ff ff87 	bl	23f0d96 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF2, 0x02);
 23f0e88:	2202      	movs	r2, #2
 23f0e8a:	2115      	movs	r1, #21
 23f0e8c:	4620      	mov	r0, r4
 23f0e8e:	f7ff ff82 	bl	23f0d96 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF3, 0x00);
 23f0e92:	2200      	movs	r2, #0
 23f0e94:	2116      	movs	r1, #22
 23f0e96:	4620      	mov	r0, r4
 23f0e98:	f7ff ff7d 	bl	23f0d96 <_ZN15Adafruit_SI11456write8Ehh>
  writeParam(SI1145_PARAM_CHLIST,
 23f0e9c:	22b1      	movs	r2, #177	; 0xb1
 23f0e9e:	2101      	movs	r1, #1
 23f0ea0:	4620      	mov	r0, r4
 23f0ea2:	f7ff ffc5 	bl	23f0e30 <_ZN15Adafruit_SI114510writeParamEhh>
  write8(SI1145_REG_INTCFG, SI1145_REG_INTCFG_INTOE);
 23f0ea6:	2201      	movs	r2, #1
 23f0ea8:	2103      	movs	r1, #3
 23f0eaa:	4620      	mov	r0, r4
 23f0eac:	f7ff ff73 	bl	23f0d96 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQEN, SI1145_REG_IRQEN_ALSEVERYSAMPLE);
 23f0eb0:	2201      	movs	r2, #1
 23f0eb2:	2104      	movs	r1, #4
 23f0eb4:	4620      	mov	r0, r4
 23f0eb6:	f7ff ff6e 	bl	23f0d96 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_PSLED21, 0x03); // 20mA for LED 1 only
 23f0eba:	2203      	movs	r2, #3
 23f0ebc:	210f      	movs	r1, #15
 23f0ebe:	4620      	mov	r0, r4
 23f0ec0:	f7ff ff69 	bl	23f0d96 <_ZN15Adafruit_SI11456write8Ehh>
  writeParam(SI1145_PARAM_PS1ADCMUX, SI1145_PARAM_ADCMUX_LARGEIR);
 23f0ec4:	2203      	movs	r2, #3
 23f0ec6:	2107      	movs	r1, #7
 23f0ec8:	4620      	mov	r0, r4
 23f0eca:	f7ff ffb1 	bl	23f0e30 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_PSLED12SEL, SI1145_PARAM_PSLED12SEL_PS1LED1);
 23f0ece:	2201      	movs	r2, #1
 23f0ed0:	2102      	movs	r1, #2
 23f0ed2:	4620      	mov	r0, r4
 23f0ed4:	f7ff ffac 	bl	23f0e30 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_PSADCGAIN, 0);
 23f0ed8:	2200      	movs	r2, #0
 23f0eda:	210b      	movs	r1, #11
 23f0edc:	4620      	mov	r0, r4
 23f0ede:	f7ff ffa7 	bl	23f0e30 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_PSADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
 23f0ee2:	2270      	movs	r2, #112	; 0x70
 23f0ee4:	210a      	movs	r1, #10
 23f0ee6:	4620      	mov	r0, r4
 23f0ee8:	f7ff ffa2 	bl	23f0e30 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_PSADCMISC,
 23f0eec:	2224      	movs	r2, #36	; 0x24
 23f0eee:	210c      	movs	r1, #12
 23f0ef0:	4620      	mov	r0, r4
 23f0ef2:	f7ff ff9d 	bl	23f0e30 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSIRADCMUX, SI1145_PARAM_ADCMUX_SMALLIR);
 23f0ef6:	2200      	movs	r2, #0
 23f0ef8:	210e      	movs	r1, #14
 23f0efa:	4620      	mov	r0, r4
 23f0efc:	f7ff ff98 	bl	23f0e30 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSIRADCGAIN, 0);
 23f0f00:	2200      	movs	r2, #0
 23f0f02:	211e      	movs	r1, #30
 23f0f04:	4620      	mov	r0, r4
 23f0f06:	f7ff ff93 	bl	23f0e30 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSIRADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
 23f0f0a:	2270      	movs	r2, #112	; 0x70
 23f0f0c:	211d      	movs	r1, #29
 23f0f0e:	4620      	mov	r0, r4
 23f0f10:	f7ff ff8e 	bl	23f0e30 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSIRADCMISC, SI1145_PARAM_ALSIRADCMISC_RANGE);
 23f0f14:	2220      	movs	r2, #32
 23f0f16:	211f      	movs	r1, #31
 23f0f18:	4620      	mov	r0, r4
 23f0f1a:	f7ff ff89 	bl	23f0e30 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSVISADCGAIN, 0);
 23f0f1e:	2200      	movs	r2, #0
 23f0f20:	2111      	movs	r1, #17
 23f0f22:	4620      	mov	r0, r4
 23f0f24:	f7ff ff84 	bl	23f0e30 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSVISADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
 23f0f28:	2270      	movs	r2, #112	; 0x70
 23f0f2a:	2110      	movs	r1, #16
 23f0f2c:	4620      	mov	r0, r4
 23f0f2e:	f7ff ff7f 	bl	23f0e30 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSVISADCMISC, SI1145_PARAM_ALSVISADCMISC_VISRANGE);
 23f0f32:	2220      	movs	r2, #32
 23f0f34:	2112      	movs	r1, #18
 23f0f36:	4620      	mov	r0, r4
 23f0f38:	f7ff ff7a 	bl	23f0e30 <_ZN15Adafruit_SI114510writeParamEhh>
  write8(SI1145_REG_MEASRATE0, 0xFF); // 255 * 31.25uS = 8ms
 23f0f3c:	22ff      	movs	r2, #255	; 0xff
 23f0f3e:	2108      	movs	r1, #8
 23f0f40:	4620      	mov	r0, r4
 23f0f42:	f7ff ff28 	bl	23f0d96 <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_COMMAND, SI1145_PSALS_AUTO);
 23f0f46:	4620      	mov	r0, r4
 23f0f48:	220f      	movs	r2, #15
 23f0f4a:	2118      	movs	r1, #24
 23f0f4c:	f7ff ff23 	bl	23f0d96 <_ZN15Adafruit_SI11456write8Ehh>
 23f0f50:	2001      	movs	r0, #1
}
 23f0f52:	bd10      	pop	{r4, pc}
    return false; // look for SI1145
 23f0f54:	2000      	movs	r0, #0
 23f0f56:	e7fc      	b.n	23f0f52 <_ZN15Adafruit_SI11455beginEhP7TwoWire+0xfe>

023f0f58 <_ZN15Adafruit_SI11455beginEP7TwoWire>:
boolean Adafruit_SI1145::begin(TwoWire *pBus) {
 23f0f58:	460a      	mov	r2, r1
  return begin(SI1145_ADDR, pBus);
 23f0f5a:	2160      	movs	r1, #96	; 0x60
 23f0f5c:	f7ff bf7a 	b.w	23f0e54 <_ZN15Adafruit_SI11455beginEhP7TwoWire>

023f0f60 <_ZN16Adafruit_SSD1306D1Ev>:
      rstPin(rst_pin) {}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
 23f0f60:	b510      	push	{r4, lr}
 23f0f62:	4b04      	ldr	r3, [pc, #16]	; (23f0f74 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
 23f0f64:	4604      	mov	r4, r0
 23f0f66:	6003      	str	r3, [r0, #0]
  if (buffer) {
 23f0f68:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 23f0f6a:	b108      	cbz	r0, 23f0f70 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
 23f0f6c:	f006 fa60 	bl	23f7430 <free>
    buffer = NULL;
  }
}
 23f0f70:	4620      	mov	r0, r4
 23f0f72:	bd10      	pop	{r4, pc}
 23f0f74:	023ff400 	.word	0x023ff400

023f0f78 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
 23f0f78:	b510      	push	{r4, lr}
 23f0f7a:	4604      	mov	r4, r0
}
 23f0f7c:	f7ff fff0 	bl	23f0f60 <_ZN16Adafruit_SSD1306D1Ev>
 23f0f80:	4620      	mov	r0, r4
 23f0f82:	2174      	movs	r1, #116	; 0x74
 23f0f84:	f7f3 fa51 	bl	23e442a <_ZdlPvj>
 23f0f88:	4620      	mov	r0, r4
 23f0f8a:	bd10      	pop	{r4, pc}

023f0f8c <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 23f0f8c:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 23f0f8e:	b510      	push	{r4, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 23f0f90:	db4b      	blt.n	23f102a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
 23f0f92:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 23f0f96:	428c      	cmp	r4, r1
 23f0f98:	dd47      	ble.n	23f102a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
 23f0f9a:	2a00      	cmp	r2, #0
 23f0f9c:	db45      	blt.n	23f102a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
 23f0f9e:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 23f0fa2:	4294      	cmp	r4, r2
 23f0fa4:	dd41      	ble.n	23f102a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
 23f0fa6:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
 23f0fa8:	2c02      	cmp	r4, #2
 23f0faa:	d01f      	beq.n	23f0fec <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
 23f0fac:	2c03      	cmp	r4, #3
 23f0fae:	d026      	beq.n	23f0ffe <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
 23f0fb0:	2c01      	cmp	r4, #1
 23f0fb2:	d104      	bne.n	23f0fbe <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
    case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
 23f0fb4:	43d2      	mvns	r2, r2
 23f0fb6:	8904      	ldrh	r4, [r0, #8]
 23f0fb8:	4414      	add	r4, r2
      break;
 23f0fba:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
 23f0fbc:	b221      	sxth	r1, r4
    case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch (color) {
 23f0fbe:	2b01      	cmp	r3, #1
 23f0fc0:	d023      	beq.n	23f100a <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
 23f0fc2:	2b02      	cmp	r3, #2
 23f0fc4:	d032      	beq.n	23f102c <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
 23f0fc6:	bb83      	cbnz	r3, 23f102a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    case SSD1306_WHITE:
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
      break;
    case SSD1306_BLACK:
      buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
 23f0fc8:	4613      	mov	r3, r2
 23f0fca:	2a00      	cmp	r2, #0
 23f0fcc:	8904      	ldrh	r4, [r0, #8]
 23f0fce:	bfb8      	it	lt
 23f0fd0:	1dd3      	addlt	r3, r2, #7
 23f0fd2:	10db      	asrs	r3, r3, #3
 23f0fd4:	fb13 1104 	smlabb	r1, r3, r4, r1
 23f0fd8:	2301      	movs	r3, #1
 23f0fda:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 23f0fdc:	f002 0207 	and.w	r2, r2, #7
 23f0fe0:	4093      	lsls	r3, r2
 23f0fe2:	5c42      	ldrb	r2, [r0, r1]
 23f0fe4:	ea22 0203 	bic.w	r2, r2, r3
      break;
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
 23f0fe8:	5442      	strb	r2, [r0, r1]
      break;
    }
  }
}
 23f0fea:	e01e      	b.n	23f102a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      y = HEIGHT - y - 1;
 23f0fec:	43d2      	mvns	r2, r2
      x = WIDTH - x - 1;
 23f0fee:	8904      	ldrh	r4, [r0, #8]
 23f0ff0:	3c01      	subs	r4, #1
 23f0ff2:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
 23f0ff4:	8944      	ldrh	r4, [r0, #10]
      x = WIDTH - x - 1;
 23f0ff6:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
 23f0ff8:	4422      	add	r2, r4
 23f0ffa:	b212      	sxth	r2, r2
      break;
 23f0ffc:	e7df      	b.n	23f0fbe <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
 23f0ffe:	8944      	ldrh	r4, [r0, #10]
 23f1000:	3c01      	subs	r4, #1
 23f1002:	1a64      	subs	r4, r4, r1
      break;
 23f1004:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
 23f1006:	b222      	sxth	r2, r4
      break;
 23f1008:	e7d9      	b.n	23f0fbe <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
 23f100a:	4613      	mov	r3, r2
 23f100c:	2a00      	cmp	r2, #0
 23f100e:	8904      	ldrh	r4, [r0, #8]
 23f1010:	bfb8      	it	lt
 23f1012:	1dd3      	addlt	r3, r2, #7
 23f1014:	10db      	asrs	r3, r3, #3
 23f1016:	fb13 1104 	smlabb	r1, r3, r4, r1
 23f101a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 23f101c:	f002 0007 	and.w	r0, r2, #7
 23f1020:	2201      	movs	r2, #1
 23f1022:	4082      	lsls	r2, r0
 23f1024:	5c58      	ldrb	r0, [r3, r1]
 23f1026:	4302      	orrs	r2, r0
 23f1028:	545a      	strb	r2, [r3, r1]
}
 23f102a:	bd10      	pop	{r4, pc}
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
 23f102c:	4613      	mov	r3, r2
 23f102e:	2a00      	cmp	r2, #0
 23f1030:	8904      	ldrh	r4, [r0, #8]
 23f1032:	bfb8      	it	lt
 23f1034:	1dd3      	addlt	r3, r2, #7
 23f1036:	10db      	asrs	r3, r3, #3
 23f1038:	fb13 1104 	smlabb	r1, r3, r4, r1
 23f103c:	2301      	movs	r3, #1
 23f103e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 23f1040:	f002 0207 	and.w	r2, r2, #7
 23f1044:	fa03 f202 	lsl.w	r2, r3, r2
 23f1048:	5c43      	ldrb	r3, [r0, r1]
 23f104a:	405a      	eors	r2, r3
 23f104c:	e7cc      	b.n	23f0fe8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

023f1050 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
 23f1050:	b570      	push	{r4, r5, r6, lr}
 23f1052:	4604      	mov	r4, r0
 23f1054:	461d      	mov	r5, r3
      wireClk(clkDuring), restoreClk(clkAfter)
 23f1056:	2600      	movs	r6, #0
 23f1058:	f7fe fece 	bl	23efdf8 <_ZN12Adafruit_GFXC1Ess>
 23f105c:	4b11      	ldr	r3, [pc, #68]	; (23f10a4 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
 23f105e:	6266      	str	r6, [r4, #36]	; 0x24
 23f1060:	6023      	str	r3, [r4, #0]
    : Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
 23f1062:	b915      	cbnz	r5, 23f106a <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
 23f1064:	f008 fd6e 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23f1068:	4605      	mov	r5, r0
      wireClk(clkDuring), restoreClk(clkAfter)
 23f106a:	23ff      	movs	r3, #255	; 0xff
 23f106c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 23f1070:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 23f1074:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 23f1078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 23f107c:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
 23f1080:	9b05      	ldr	r3, [sp, #20]
}
 23f1082:	4620      	mov	r0, r4
      wireClk(clkDuring), restoreClk(clkAfter)
 23f1084:	65a3      	str	r3, [r4, #88]	; 0x58
 23f1086:	9b06      	ldr	r3, [sp, #24]
 23f1088:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
 23f108c:	65e3      	str	r3, [r4, #92]	; 0x5c
  {
 23f108e:	4b06      	ldr	r3, [pc, #24]	; (23f10a8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
 23f1090:	86a2      	strh	r2, [r4, #52]	; 0x34
 23f1092:	6663      	str	r3, [r4, #100]	; 0x64
 23f1094:	2301      	movs	r3, #1
 23f1096:	66e6      	str	r6, [r4, #108]	; 0x6c
 23f1098:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 23f109c:	f8a4 6070 	strh.w	r6, [r4, #112]	; 0x70
}
 23f10a0:	bd70      	pop	{r4, r5, r6, pc}
 23f10a2:	bf00      	nop
 23f10a4:	023ff400 	.word	0x023ff400
 23f10a8:	023fe76c 	.word	0x023fe76c

023f10ac <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
 23f10ac:	b570      	push	{r4, r5, r6, lr}
 23f10ae:	4604      	mov	r4, r0
  if (wire) { // I2C
 23f10b0:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
 23f10b2:	460d      	mov	r5, r1
  if (wire) { // I2C
 23f10b4:	b190      	cbz	r0, 23f10dc <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
 23f10b6:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 23f10ba:	f007 f8a7 	bl	23f820c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 23f10be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f10c0:	2100      	movs	r1, #0
 23f10c2:	6803      	ldr	r3, [r0, #0]
 23f10c4:	689b      	ldr	r3, [r3, #8]
 23f10c6:	4798      	blx	r3
    WIRE_WRITE(c);
 23f10c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f10ca:	4629      	mov	r1, r5
 23f10cc:	6803      	ldr	r3, [r0, #0]
 23f10ce:	689b      	ldr	r3, [r3, #8]
 23f10d0:	4798      	blx	r3
    wire->endTransmission();
 23f10d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
 23f10d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    wire->endTransmission();
 23f10d8:	f007 b89f 	b.w	23f821a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
 23f10dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 23f10de:	6d20      	ldr	r0, [r4, #80]	; 0x50
 23f10e0:	6813      	ldr	r3, [r2, #0]
 23f10e2:	ea23 0300 	bic.w	r3, r3, r0
 23f10e6:	6013      	str	r3, [r2, #0]
  if (spi) {
 23f10e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f10ea:	b118      	cbz	r0, 23f10f4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x48>
}
 23f10ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (void)spi->transfer(d);
 23f10f0:	f007 be3a 	b.w	23f8d68 <_ZN8SPIClass8transferEh>
 23f10f4:	2208      	movs	r2, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f10f6:	2180      	movs	r1, #128	; 0x80
        *mosiPort |= mosiPinMask;
 23f10f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23f10fa:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 23f10fc:	6818      	ldr	r0, [r3, #0]
      if (d & bit)
 23f10fe:	420d      	tst	r5, r1
        *mosiPort |= mosiPinMask;
 23f1100:	bf14      	ite	ne
 23f1102:	4330      	orrne	r0, r6
        *mosiPort &= ~mosiPinMask;
 23f1104:	43b0      	biceq	r0, r6
 23f1106:	6018      	str	r0, [r3, #0]
      *clkPort |= clkPinMask;  // Clock high
 23f1108:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 23f110a:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 23f110c:	6803      	ldr	r3, [r0, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f110e:	3a01      	subs	r2, #1
      *clkPort |= clkPinMask;  // Clock high
 23f1110:	ea43 0306 	orr.w	r3, r3, r6
 23f1114:	6003      	str	r3, [r0, #0]
      *clkPort &= ~clkPinMask; // Clock low
 23f1116:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 23f1118:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 23f111a:	6803      	ldr	r3, [r0, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f111c:	ea4f 0151 	mov.w	r1, r1, lsr #1
      *clkPort &= ~clkPinMask; // Clock low
 23f1120:	ea23 0306 	bic.w	r3, r3, r6
 23f1124:	6003      	str	r3, [r0, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f1126:	d1e7      	bne.n	23f10f8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4c>
}
 23f1128:	bd70      	pop	{r4, r5, r6, pc}

023f112a <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing SSD1306_BLACK (value 0) pixels will actually draw
   white, SSD1306_WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(bool i) {
 23f112a:	b538      	push	{r3, r4, r5, lr}
 23f112c:	4604      	mov	r4, r0
  TRANSACTION_START
 23f112e:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(bool i) {
 23f1130:	460d      	mov	r5, r1
  TRANSACTION_START
 23f1132:	b180      	cbz	r0, 23f1156 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>
	  setSpeed(speed);
 23f1134:	6da1      	ldr	r1, [r4, #88]	; 0x58
 23f1136:	f007 f837 	bl	23f81a8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
 23f113a:	2d00      	cmp	r5, #0
 23f113c:	4620      	mov	r0, r4
 23f113e:	bf14      	ite	ne
 23f1140:	21a7      	movne	r1, #167	; 0xa7
 23f1142:	21a6      	moveq	r1, #166	; 0xa6
 23f1144:	f7ff ffb2 	bl	23f10ac <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
 23f1148:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f114a:	b188      	cbz	r0, 23f1170 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
 23f114c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
}
 23f114e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23f1152:	f007 b829 	b.w	23f81a8 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
 23f1156:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f1158:	b118      	cbz	r0, 23f1162 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
 23f115a:	f104 0164 	add.w	r1, r4, #100	; 0x64
 23f115e:	f007 fd95 	bl	23f8c8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
 23f1162:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f1164:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f1166:	6813      	ldr	r3, [r2, #0]
 23f1168:	ea23 0301 	bic.w	r3, r3, r1
 23f116c:	6013      	str	r3, [r2, #0]
 23f116e:	e7e4      	b.n	23f113a <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
 23f1170:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f1172:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f1174:	6813      	ldr	r3, [r2, #0]
 23f1176:	430b      	orrs	r3, r1
 23f1178:	6013      	str	r3, [r2, #0]
 23f117a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f117c:	b118      	cbz	r0, 23f1186 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5c>
}
 23f117e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
 23f1182:	f007 bd69 	b.w	23f8c58 <_ZN8SPIClass14endTransactionEv>
}
 23f1186:	bd38      	pop	{r3, r4, r5, pc}

023f1188 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
 23f1188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f118a:	4604      	mov	r4, r0
  if (wire) { // I2C
 23f118c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
 23f118e:	460d      	mov	r5, r1
  if (wire) { // I2C
 23f1190:	188f      	adds	r7, r1, r2
 23f1192:	b340      	cbz	r0, 23f11e6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x5e>
    wire->beginTransmission(i2caddr);
 23f1194:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 23f1198:	f007 f838 	bl	23f820c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 23f119c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f119e:	2100      	movs	r1, #0
 23f11a0:	6803      	ldr	r3, [r0, #0]
    uint16_t bytesOut = 1;
 23f11a2:	2601      	movs	r6, #1
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 23f11a4:	689b      	ldr	r3, [r3, #8]
 23f11a6:	4798      	blx	r3
    while (n--) {
 23f11a8:	42bd      	cmp	r5, r7
        wire->endTransmission();
 23f11aa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while (n--) {
 23f11ac:	d017      	beq.n	23f11de <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x56>
      if (bytesOut >= WIRE_MAX) {
 23f11ae:	2e1f      	cmp	r6, #31
 23f11b0:	d90c      	bls.n	23f11cc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x44>
        wire->endTransmission();
 23f11b2:	f007 f832 	bl	23f821a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
 23f11b6:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 23f11ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f11bc:	f007 f826 	bl	23f820c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 23f11c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f11c2:	2100      	movs	r1, #0
 23f11c4:	6803      	ldr	r3, [r0, #0]
        bytesOut = 1;
 23f11c6:	2601      	movs	r6, #1
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 23f11c8:	689b      	ldr	r3, [r3, #8]
 23f11ca:	4798      	blx	r3
      WIRE_WRITE(pgm_read_byte(c++));
 23f11cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f11ce:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f11d2:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
 23f11d4:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
 23f11d6:	689b      	ldr	r3, [r3, #8]
 23f11d8:	4798      	blx	r3
      bytesOut++;
 23f11da:	b2b6      	uxth	r6, r6
    while (n--) {
 23f11dc:	e7e4      	b.n	23f11a8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x20>
}
 23f11de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
 23f11e2:	f007 b81a 	b.w	23f821a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
 23f11e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 23f11e8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 23f11ea:	6813      	ldr	r3, [r2, #0]
 23f11ec:	ea23 0301 	bic.w	r3, r3, r1
 23f11f0:	6013      	str	r3, [r2, #0]
    while (n--)
 23f11f2:	42bd      	cmp	r5, r7
 23f11f4:	d026      	beq.n	23f1244 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xbc>
  if (spi) {
 23f11f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
      SPIwrite(pgm_read_byte(c++));
 23f11f8:	f815 1b01 	ldrb.w	r1, [r5], #1
  if (spi) {
 23f11fc:	b110      	cbz	r0, 23f1204 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x7c>
    (void)spi->transfer(d);
 23f11fe:	f007 fdb3 	bl	23f8d68 <_ZN8SPIClass8transferEh>
 23f1202:	e7f6      	b.n	23f11f2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6a>
 23f1204:	f04f 0e08 	mov.w	lr, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f1208:	2080      	movs	r0, #128	; 0x80
        *mosiPort |= mosiPinMask;
 23f120a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23f120c:	f8d4 c048 	ldr.w	ip, [r4, #72]	; 0x48
 23f1210:	681e      	ldr	r6, [r3, #0]
      if (d & bit)
 23f1212:	4201      	tst	r1, r0
        *mosiPort |= mosiPinMask;
 23f1214:	bf14      	ite	ne
 23f1216:	ea46 060c 	orrne.w	r6, r6, ip
        *mosiPort &= ~mosiPinMask;
 23f121a:	ea26 060c 	biceq.w	r6, r6, ip
 23f121e:	601e      	str	r6, [r3, #0]
      *clkPort |= clkPinMask;  // Clock high
 23f1220:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 23f1222:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 23f1224:	6833      	ldr	r3, [r6, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f1226:	f1be 0e01 	subs.w	lr, lr, #1
      *clkPort |= clkPinMask;  // Clock high
 23f122a:	ea43 0302 	orr.w	r3, r3, r2
 23f122e:	6033      	str	r3, [r6, #0]
      *clkPort &= ~clkPinMask; // Clock low
 23f1230:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 23f1232:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 23f1234:	6833      	ldr	r3, [r6, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f1236:	ea4f 0050 	mov.w	r0, r0, lsr #1
      *clkPort &= ~clkPinMask; // Clock low
 23f123a:	ea23 0302 	bic.w	r3, r3, r2
 23f123e:	6033      	str	r3, [r6, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f1240:	d1e3      	bne.n	23f120a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x82>
 23f1242:	e7d6      	b.n	23f11f2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6a>
}
 23f1244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f1246 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) {
 23f1246:	b538      	push	{r3, r4, r5, lr}
 23f1248:	4604      	mov	r4, r0
  TRANSACTION_START
 23f124a:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command(uint8_t c) {
 23f124c:	460d      	mov	r5, r1
  TRANSACTION_START
 23f124e:	b168      	cbz	r0, 23f126c <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x26>
 23f1250:	6da1      	ldr	r1, [r4, #88]	; 0x58
 23f1252:	f006 ffa9 	bl	23f81a8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(c);
 23f1256:	4620      	mov	r0, r4
 23f1258:	4629      	mov	r1, r5
 23f125a:	f7ff ff27 	bl	23f10ac <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
 23f125e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f1260:	b188      	cbz	r0, 23f1286 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x40>
 23f1262:	6de1      	ldr	r1, [r4, #92]	; 0x5c
}
 23f1264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23f1268:	f006 bf9e 	b.w	23f81a8 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
 23f126c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f126e:	b118      	cbz	r0, 23f1278 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x32>
 23f1270:	f104 0164 	add.w	r1, r4, #100	; 0x64
 23f1274:	f007 fd0a 	bl	23f8c8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
 23f1278:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f127a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f127c:	6813      	ldr	r3, [r2, #0]
 23f127e:	ea23 0301 	bic.w	r3, r3, r1
 23f1282:	6013      	str	r3, [r2, #0]
 23f1284:	e7e7      	b.n	23f1256 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x10>
  TRANSACTION_END
 23f1286:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f1288:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f128a:	6813      	ldr	r3, [r2, #0]
 23f128c:	430b      	orrs	r3, r1
 23f128e:	6013      	str	r3, [r2, #0]
 23f1290:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f1292:	b118      	cbz	r0, 23f129c <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x56>
}
 23f1294:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
 23f1298:	f007 bcde 	b.w	23f8c58 <_ZN8SPIClass14endTransactionEv>
}
 23f129c:	bd38      	pop	{r3, r4, r5, pc}

023f129e <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
 23f129e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 23f12a2:	2100      	movs	r1, #0
 23f12a4:	1dda      	adds	r2, r3, #7
 23f12a6:	bf48      	it	mi
 23f12a8:	f103 020e 	addmi.w	r2, r3, #14
 23f12ac:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 23f12b0:	10d2      	asrs	r2, r2, #3
 23f12b2:	435a      	muls	r2, r3
 23f12b4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 23f12b6:	f00b ba22 	b.w	23fc6fe <memset>
	...

023f12bc <_ZN16Adafruit_SSD13065beginEhhbb>:
                             bool periphBegin) {
 23f12bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 23f12c0:	461e      	mov	r6, r3
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
 23f12c2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
                             bool periphBegin) {
 23f12c4:	4604      	mov	r4, r0
 23f12c6:	460f      	mov	r7, r1
 23f12c8:	4615      	mov	r5, r2
 23f12ca:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
 23f12ce:	b1c3      	cbz	r3, 23f1302 <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
 23f12d0:	4620      	mov	r0, r4
 23f12d2:	f7ff ffe4 	bl	23f129e <_ZN16Adafruit_SSD130612clearDisplayEv>
  if (HEIGHT > 32) {
 23f12d6:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 23f12da:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 23f12de:	2820      	cmp	r0, #32
 23f12e0:	dc21      	bgt.n	23f1326 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
 23f12e2:	2320      	movs	r3, #32
 23f12e4:	2201      	movs	r2, #1
 23f12e6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 23f12ea:	2373      	movs	r3, #115	; 0x73
 23f12ec:	3820      	subs	r0, #32
 23f12ee:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 23f12f2:	3973      	subs	r1, #115	; 0x73
 23f12f4:	9300      	str	r3, [sp, #0]
 23f12f6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 23f12fa:	4bb8      	ldr	r3, [pc, #736]	; (23f15dc <_ZN16Adafruit_SSD13065beginEhhbb+0x320>)
 23f12fc:	f340 024f 	sbfx	r2, r0, #1, #16
 23f1300:	e021      	b.n	23f1346 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
 23f1302:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 23f1306:	1dd8      	adds	r0, r3, #7
 23f1308:	bf48      	it	mi
 23f130a:	f103 000e 	addmi.w	r0, r3, #14
 23f130e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 23f1312:	10c0      	asrs	r0, r0, #3
 23f1314:	4358      	muls	r0, r3
 23f1316:	f006 f87d 	bl	23f7414 <malloc>
 23f131a:	62e0      	str	r0, [r4, #44]	; 0x2c
 23f131c:	2800      	cmp	r0, #0
 23f131e:	d1d7      	bne.n	23f12d0 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
 23f1320:	b004      	add	sp, #16
 23f1322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
 23f1326:	3840      	subs	r0, #64	; 0x40
 23f1328:	f3c0 32c0 	ubfx	r2, r0, #15, #1
 23f132c:	2340      	movs	r3, #64	; 0x40
 23f132e:	fa02 f280 	sxtah	r2, r2, r0
 23f1332:	2001      	movs	r0, #1
 23f1334:	e9cd 3001 	strd	r3, r0, [sp, #4]
 23f1338:	2352      	movs	r3, #82	; 0x52
 23f133a:	3952      	subs	r1, #82	; 0x52
 23f133c:	9300      	str	r3, [sp, #0]
 23f133e:	4ba8      	ldr	r3, [pc, #672]	; (23f15e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x324>)
 23f1340:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 23f1344:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
 23f1346:	4620      	mov	r0, r4
 23f1348:	f341 014f 	sbfx	r1, r1, #1, #16
 23f134c:	f7fe fd6a 	bl	23efe24 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if (wire) { // Using I2C
 23f1350:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
 23f1352:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if (wire) { // Using I2C
 23f1356:	2800      	cmp	r0, #0
 23f1358:	f000 809a 	beq.w	23f1490 <_ZN16Adafruit_SSD13065beginEhhbb+0x1d4>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
 23f135c:	2d00      	cmp	r5, #0
 23f135e:	f040 8095 	bne.w	23f148c <_ZN16Adafruit_SSD13065beginEhhbb+0x1d0>
 23f1362:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 23f1366:	2b20      	cmp	r3, #32
 23f1368:	bf0c      	ite	eq
 23f136a:	253c      	moveq	r5, #60	; 0x3c
 23f136c:	253d      	movne	r5, #61	; 0x3d
 23f136e:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if (periphBegin)
 23f1372:	f1b8 0f00 	cmp.w	r8, #0
 23f1376:	d001      	beq.n	23f137c <_ZN16Adafruit_SSD13065beginEhhbb+0xc0>
      wire->begin();
 23f1378:	f006 ff1a 	bl	23f81b0 <_ZN7TwoWire5beginEv>
  if (reset && (rstPin >= 0)) {
 23f137c:	b1fe      	cbz	r6, 23f13be <_ZN16Adafruit_SSD13065beginEhhbb+0x102>
 23f137e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 23f1382:	2800      	cmp	r0, #0
 23f1384:	db1b      	blt.n	23f13be <_ZN16Adafruit_SSD13065beginEhhbb+0x102>
    pinMode(rstPin, OUTPUT);
 23f1386:	2101      	movs	r1, #1
 23f1388:	b280      	uxth	r0, r0
 23f138a:	f008 fb57 	bl	23f9a3c <pinMode>
    digitalWrite(rstPin, HIGH);
 23f138e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 23f1392:	2101      	movs	r1, #1
 23f1394:	b280      	uxth	r0, r0
 23f1396:	f008 fb62 	bl	23f9a5e <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
 23f139a:	2001      	movs	r0, #1
 23f139c:	f006 f944 	bl	23f7628 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
 23f13a0:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 23f13a4:	2100      	movs	r1, #0
 23f13a6:	b280      	uxth	r0, r0
 23f13a8:	f008 fb59 	bl	23f9a5e <digitalWrite>
    delay(10);                  // Wait 10 ms
 23f13ac:	200a      	movs	r0, #10
 23f13ae:	f006 f93b 	bl	23f7628 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
 23f13b2:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 23f13b6:	2101      	movs	r1, #1
 23f13b8:	b280      	uxth	r0, r0
 23f13ba:	f008 fb50 	bl	23f9a5e <digitalWrite>
  TRANSACTION_START
 23f13be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f13c0:	2800      	cmp	r0, #0
 23f13c2:	f000 80e5 	beq.w	23f1590 <_ZN16Adafruit_SSD13065beginEhhbb+0x2d4>
 23f13c6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 23f13c8:	f006 feee 	bl	23f81a8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
 23f13cc:	2204      	movs	r2, #4
 23f13ce:	4620      	mov	r0, r4
 23f13d0:	4984      	ldr	r1, [pc, #528]	; (23f15e4 <_ZN16Adafruit_SSD13065beginEhhbb+0x328>)
 23f13d2:	f7ff fed9 	bl	23f1188 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
 23f13d6:	8961      	ldrh	r1, [r4, #10]
 23f13d8:	4620      	mov	r0, r4
 23f13da:	3901      	subs	r1, #1
 23f13dc:	b2c9      	uxtb	r1, r1
 23f13de:	f7ff fe65 	bl	23f10ac <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
 23f13e2:	4981      	ldr	r1, [pc, #516]	; (23f15e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x32c>)
 23f13e4:	2204      	movs	r2, #4
 23f13e6:	4620      	mov	r0, r4
 23f13e8:	f7ff fece 	bl	23f1188 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 23f13ec:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 23f13f0:	4620      	mov	r0, r4
 23f13f2:	2b01      	cmp	r3, #1
 23f13f4:	bf0c      	ite	eq
 23f13f6:	2110      	moveq	r1, #16
 23f13f8:	2114      	movne	r1, #20
 23f13fa:	f7ff fe57 	bl	23f10ac <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
 23f13fe:	2204      	movs	r2, #4
 23f1400:	4620      	mov	r0, r4
 23f1402:	497a      	ldr	r1, [pc, #488]	; (23f15ec <_ZN16Adafruit_SSD13065beginEhhbb+0x330>)
 23f1404:	f7ff fec0 	bl	23f1188 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  contrast = 0x8F;
 23f1408:	238f      	movs	r3, #143	; 0x8f
  if ((WIDTH == 128) && (HEIGHT == 32)) {
 23f140a:	4a79      	ldr	r2, [pc, #484]	; (23f15f0 <_ZN16Adafruit_SSD13065beginEhhbb+0x334>)
  contrast = 0x8F;
 23f140c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
  if ((WIDTH == 128) && (HEIGHT == 32)) {
 23f1410:	68a3      	ldr	r3, [r4, #8]
 23f1412:	4293      	cmp	r3, r2
 23f1414:	f000 80d4 	beq.w	23f15c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x304>
  } else if ((WIDTH == 128) && (HEIGHT == 64)) {
 23f1418:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 23f141c:	4293      	cmp	r3, r2
 23f141e:	f040 80c4 	bne.w	23f15aa <_ZN16Adafruit_SSD13065beginEhhbb+0x2ee>
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 23f1422:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
    comPins = 0x12;
 23f1426:	2512      	movs	r5, #18
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 23f1428:	2b01      	cmp	r3, #1
 23f142a:	bf0c      	ite	eq
 23f142c:	239f      	moveq	r3, #159	; 0x9f
 23f142e:	23cf      	movne	r3, #207	; 0xcf
 23f1430:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
  ssd1306_command1(SSD1306_SETCOMPINS);
 23f1434:	21da      	movs	r1, #218	; 0xda
 23f1436:	4620      	mov	r0, r4
 23f1438:	f7ff fe38 	bl	23f10ac <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(comPins);
 23f143c:	4629      	mov	r1, r5
 23f143e:	4620      	mov	r0, r4
 23f1440:	f7ff fe34 	bl	23f10ac <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(SSD1306_SETCONTRAST);
 23f1444:	2181      	movs	r1, #129	; 0x81
 23f1446:	4620      	mov	r0, r4
 23f1448:	f7ff fe30 	bl	23f10ac <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(contrast);
 23f144c:	4620      	mov	r0, r4
 23f144e:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
 23f1452:	f7ff fe2b 	bl	23f10ac <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
 23f1456:	21d9      	movs	r1, #217	; 0xd9
 23f1458:	4620      	mov	r0, r4
 23f145a:	f7ff fe27 	bl	23f10ac <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 23f145e:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 23f1462:	4620      	mov	r0, r4
 23f1464:	2b01      	cmp	r3, #1
 23f1466:	bf0c      	ite	eq
 23f1468:	2122      	moveq	r1, #34	; 0x22
 23f146a:	21f1      	movne	r1, #241	; 0xf1
 23f146c:	f7ff fe1e 	bl	23f10ac <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
 23f1470:	4620      	mov	r0, r4
 23f1472:	2206      	movs	r2, #6
 23f1474:	495f      	ldr	r1, [pc, #380]	; (23f15f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x338>)
 23f1476:	f7ff fe87 	bl	23f1188 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
 23f147a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f147c:	2800      	cmp	r0, #0
 23f147e:	f000 80a1 	beq.w	23f15c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x308>
 23f1482:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 23f1484:	f006 fe90 	bl	23f81a8 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
 23f1488:	2001      	movs	r0, #1
 23f148a:	e749      	b.n	23f1320 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
 23f148c:	b26d      	sxtb	r5, r5
 23f148e:	e76e      	b.n	23f136e <_ZN16Adafruit_SSD13065beginEhhbb+0xb2>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
 23f1490:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
 23f1494:	2101      	movs	r1, #1
 23f1496:	b280      	uxth	r0, r0
 23f1498:	f008 fad0 	bl	23f9a3c <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
 23f149c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 23f14a0:	2101      	movs	r1, #1
 23f14a2:	b280      	uxth	r0, r0
 23f14a4:	f008 faca 	bl	23f9a3c <pinMode>
    dcPort = (PortReg *)portOutputRegister(digitalPinToPort(dcPin));
 23f14a8:	f005 f9e8 	bl	23f687c <hal_pin_map>
 23f14ac:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
 23f14b0:	4d51      	ldr	r5, [pc, #324]	; (23f15f8 <_ZN16Adafruit_SSD13065beginEhhbb+0x33c>)
 23f14b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f14b6:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 23f14ba:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 23f14be:	6423      	str	r3, [r4, #64]	; 0x40
    dcPinMask = digitalPinToBitMask(dcPin);
 23f14c0:	f005 f9dc 	bl	23f687c <hal_pin_map>
 23f14c4:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
 23f14c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f14cc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 23f14d0:	785b      	ldrb	r3, [r3, #1]
 23f14d2:	6523      	str	r3, [r4, #80]	; 0x50
    csPort = (PortReg *)portOutputRegister(digitalPinToPort(csPin));
 23f14d4:	f005 f9d2 	bl	23f687c <hal_pin_map>
 23f14d8:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
 23f14dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f14e0:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 23f14e4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 23f14e8:	6463      	str	r3, [r4, #68]	; 0x44
    csPinMask = digitalPinToBitMask(csPin);
 23f14ea:	f005 f9c7 	bl	23f687c <hal_pin_map>
 23f14ee:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
    SSD1306_DESELECT
 23f14f2:	6c62      	ldr	r2, [r4, #68]	; 0x44
    csPinMask = digitalPinToBitMask(csPin);
 23f14f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f14f8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 23f14fc:	785b      	ldrb	r3, [r3, #1]
 23f14fe:	6563      	str	r3, [r4, #84]	; 0x54
    SSD1306_DESELECT
 23f1500:	6811      	ldr	r1, [r2, #0]
 23f1502:	430b      	orrs	r3, r1
 23f1504:	6013      	str	r3, [r2, #0]
    if (spi) { // Hardware SPI
 23f1506:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f1508:	b130      	cbz	r0, 23f1518 <_ZN16Adafruit_SSD13065beginEhhbb+0x25c>
      if (periphBegin)
 23f150a:	f1b8 0f00 	cmp.w	r8, #0
 23f150e:	f43f af35 	beq.w	23f137c <_ZN16Adafruit_SSD13065beginEhhbb+0xc0>
        spi->begin();
 23f1512:	f007 fb67 	bl	23f8be4 <_ZN8SPIClass5beginEv>
 23f1516:	e731      	b.n	23f137c <_ZN16Adafruit_SSD13065beginEhhbb+0xc0>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
 23f1518:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
 23f151c:	2101      	movs	r1, #1
 23f151e:	b280      	uxth	r0, r0
 23f1520:	f008 fa8c 	bl	23f9a3c <pinMode>
      pinMode(clkPin, OUTPUT);
 23f1524:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 23f1528:	2101      	movs	r1, #1
 23f152a:	b280      	uxth	r0, r0
 23f152c:	f008 fa86 	bl	23f9a3c <pinMode>
      mosiPort = (PortReg *)portOutputRegister(digitalPinToPort(mosiPin));
 23f1530:	f005 f9a4 	bl	23f687c <hal_pin_map>
 23f1534:	f994 3033 	ldrsb.w	r3, [r4, #51]	; 0x33
 23f1538:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f153c:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 23f1540:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 23f1544:	63a3      	str	r3, [r4, #56]	; 0x38
      mosiPinMask = digitalPinToBitMask(mosiPin);
 23f1546:	f005 f999 	bl	23f687c <hal_pin_map>
 23f154a:	f994 3033 	ldrsb.w	r3, [r4, #51]	; 0x33
 23f154e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f1552:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 23f1556:	785b      	ldrb	r3, [r3, #1]
 23f1558:	64a3      	str	r3, [r4, #72]	; 0x48
      clkPort = (PortReg *)portOutputRegister(digitalPinToPort(clkPin));
 23f155a:	f005 f98f 	bl	23f687c <hal_pin_map>
 23f155e:	f994 3034 	ldrsb.w	r3, [r4, #52]	; 0x34
 23f1562:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f1566:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 23f156a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 23f156e:	63e3      	str	r3, [r4, #60]	; 0x3c
      clkPinMask = digitalPinToBitMask(clkPin);
 23f1570:	f005 f984 	bl	23f687c <hal_pin_map>
 23f1574:	f994 3034 	ldrsb.w	r3, [r4, #52]	; 0x34
      *clkPort &= ~clkPinMask; // Clock low
 23f1578:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      clkPinMask = digitalPinToBitMask(clkPin);
 23f157a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f157e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 23f1582:	7859      	ldrb	r1, [r3, #1]
 23f1584:	64e1      	str	r1, [r4, #76]	; 0x4c
      *clkPort &= ~clkPinMask; // Clock low
 23f1586:	6813      	ldr	r3, [r2, #0]
 23f1588:	ea23 0301 	bic.w	r3, r3, r1
 23f158c:	6013      	str	r3, [r2, #0]
 23f158e:	e6f5      	b.n	23f137c <_ZN16Adafruit_SSD13065beginEhhbb+0xc0>
  TRANSACTION_START
 23f1590:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f1592:	b118      	cbz	r0, 23f159c <_ZN16Adafruit_SSD13065beginEhhbb+0x2e0>
 23f1594:	f104 0164 	add.w	r1, r4, #100	; 0x64
 23f1598:	f007 fb78 	bl	23f8c8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
 23f159c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f159e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f15a0:	6813      	ldr	r3, [r2, #0]
 23f15a2:	ea23 0301 	bic.w	r3, r3, r1
 23f15a6:	6013      	str	r3, [r2, #0]
 23f15a8:	e710      	b.n	23f13cc <_ZN16Adafruit_SSD13065beginEhhbb+0x110>
  } else if ((WIDTH == 96) && (HEIGHT == 16)) {
 23f15aa:	4a14      	ldr	r2, [pc, #80]	; (23f15fc <_ZN16Adafruit_SSD13065beginEhhbb+0x340>)
 23f15ac:	4293      	cmp	r3, r2
 23f15ae:	d107      	bne.n	23f15c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x304>
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
 23f15b0:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 23f15b4:	2b01      	cmp	r3, #1
 23f15b6:	bf0c      	ite	eq
 23f15b8:	2310      	moveq	r3, #16
 23f15ba:	23af      	movne	r3, #175	; 0xaf
 23f15bc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    comPins = 0x02;
 23f15c0:	2502      	movs	r5, #2
 23f15c2:	e737      	b.n	23f1434 <_ZN16Adafruit_SSD13065beginEhhbb+0x178>
  TRANSACTION_END
 23f15c4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f15c6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f15c8:	6813      	ldr	r3, [r2, #0]
 23f15ca:	430b      	orrs	r3, r1
 23f15cc:	6013      	str	r3, [r2, #0]
 23f15ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f15d0:	2800      	cmp	r0, #0
 23f15d2:	f43f af59 	beq.w	23f1488 <_ZN16Adafruit_SSD13065beginEhhbb+0x1cc>
 23f15d6:	f007 fb3f 	bl	23f8c58 <_ZN8SPIClass14endTransactionEv>
 23f15da:	e755      	b.n	23f1488 <_ZN16Adafruit_SSD13065beginEhhbb+0x1cc>
 23f15dc:	023ff218 	.word	0x023ff218
 23f15e0:	023fef58 	.word	0x023fef58
 23f15e4:	023ff460 	.word	0x023ff460
 23f15e8:	023ff464 	.word	0x023ff464
 23f15ec:	023ff468 	.word	0x023ff468
 23f15f0:	00200080 	.word	0x00200080
 23f15f4:	023ff46c 	.word	0x023ff46c
 23f15f8:	101c0024 	.word	0x101c0024
 23f15fc:	00100060 	.word	0x00100060

023f1600 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
                                             uint16_t color) {
 23f1600:	b570      	push	{r4, r5, r6, lr}
  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
 23f1602:	2a00      	cmp	r2, #0
                                             uint16_t color) {
 23f1604:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
 23f1608:	db3f      	blt.n	23f168a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
 23f160a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 23f160e:	4294      	cmp	r4, r2
 23f1610:	dd3b      	ble.n	23f168a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
    if (x < 0) {                  // Clip left
 23f1612:	2900      	cmp	r1, #0
      w += x;
 23f1614:	bfbe      	ittt	lt
 23f1616:	185b      	addlt	r3, r3, r1
      x = 0;
 23f1618:	2100      	movlt	r1, #0
      w += x;
 23f161a:	b21b      	sxthlt	r3, r3
    if ((x + w) > WIDTH) { // Clip right
 23f161c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 23f1620:	18ce      	adds	r6, r1, r3
 23f1622:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
 23f1624:	bfc4      	itt	gt
 23f1626:	1a63      	subgt	r3, r4, r1
 23f1628:	b21b      	sxthgt	r3, r3
    if (w > 0) { // Proceed only if width is positive
 23f162a:	2b00      	cmp	r3, #0
 23f162c:	dd2d      	ble.n	23f168a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x], mask = 1 << (y & 7);
 23f162e:	10d6      	asrs	r6, r2, #3
 23f1630:	fb14 1106 	smlabb	r1, r4, r6, r1
 23f1634:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
      switch (color) {
 23f1636:	2d01      	cmp	r5, #1
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x], mask = 1 << (y & 7);
 23f1638:	4401      	add	r1, r0
 23f163a:	f002 0007 	and.w	r0, r2, #7
 23f163e:	f04f 0201 	mov.w	r2, #1
 23f1642:	fa02 f200 	lsl.w	r2, r2, r0
 23f1646:	b2d2      	uxtb	r2, r2
      switch (color) {
 23f1648:	d016      	beq.n	23f1678 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x78>
 23f164a:	2d02      	cmp	r5, #2
 23f164c:	d00b      	beq.n	23f1666 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x66>
 23f164e:	b9e5      	cbnz	r5, 23f168a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
        mask = ~mask;
 23f1650:	43d2      	mvns	r2, r2
 23f1652:	440b      	add	r3, r1
 23f1654:	b2d2      	uxtb	r2, r2
        while (w--) {
 23f1656:	4299      	cmp	r1, r3
 23f1658:	d017      	beq.n	23f168a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
          *pBuf++ &= mask;
 23f165a:	f811 0b01 	ldrb.w	r0, [r1], #1
 23f165e:	4010      	ands	r0, r2
 23f1660:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
 23f1664:	e7f7      	b.n	23f1656 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x56>
 23f1666:	440b      	add	r3, r1
        while (w--) {
 23f1668:	4299      	cmp	r1, r3
 23f166a:	d00e      	beq.n	23f168a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
          *pBuf++ ^= mask;
 23f166c:	f811 0b01 	ldrb.w	r0, [r1], #1
 23f1670:	4050      	eors	r0, r2
 23f1672:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
 23f1676:	e7f7      	b.n	23f1668 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x68>
 23f1678:	440b      	add	r3, r1
        while (w--) {
 23f167a:	4299      	cmp	r1, r3
 23f167c:	d005      	beq.n	23f168a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x8a>
          *pBuf++ |= mask;
 23f167e:	f811 0b01 	ldrb.w	r0, [r1], #1
 23f1682:	4310      	orrs	r0, r2
 23f1684:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
 23f1688:	e7f7      	b.n	23f167a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x7a>
}
 23f168a:	bd70      	pop	{r4, r5, r6, pc}

023f168c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
                                             int16_t __h, uint16_t color) {
 23f168c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
 23f168e:	2900      	cmp	r1, #0
                                             int16_t __h, uint16_t color) {
 23f1690:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
 23f1694:	db77      	blt.n	23f1786 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
 23f1696:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 23f169a:	42b1      	cmp	r1, r6
 23f169c:	da73      	bge.n	23f1786 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
    if (__y < 0) {               // Clip top
 23f169e:	2a00      	cmp	r2, #0
      __h += __y;
 23f16a0:	bfbe      	ittt	lt
 23f16a2:	189b      	addlt	r3, r3, r2
      __y = 0;
 23f16a4:	2200      	movlt	r2, #0
      __h += __y;
 23f16a6:	b21b      	sxthlt	r3, r3
    if ((__y + __h) > HEIGHT) { // Clip bottom
 23f16a8:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 23f16ac:	18d7      	adds	r7, r2, r3
 23f16ae:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
 23f16b0:	bfc4      	itt	gt
 23f16b2:	1aa3      	subgt	r3, r4, r2
 23f16b4:	b21b      	sxthgt	r3, r3
    if (__h > 0) { // Proceed only if height is now positive
 23f16b6:	2b00      	cmp	r3, #0
 23f16b8:	dd65      	ble.n	23f1786 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
 23f16ba:	f3c2 04c4 	ubfx	r4, r2, #3, #5
 23f16be:	fb16 1604 	smlabb	r6, r6, r4, r1
 23f16c2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
      if (mod) {
 23f16c4:	f012 0207 	ands.w	r2, r2, #7
      uint8_t y = __y, h = __h;
 23f16c8:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
 23f16ca:	eb07 0406 	add.w	r4, r7, r6
      if (mod) {
 23f16ce:	d024      	beq.n	23f171a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
 23f16d0:	f1c2 0208 	rsb	r2, r2, #8
 23f16d4:	b2d2      	uxtb	r2, r2
        if (h < mod)
 23f16d6:	4293      	cmp	r3, r2
          mask &= (0XFF >> (mod - h));
 23f16d8:	bf38      	it	cc
 23f16da:	f04f 0cff 	movcc.w	ip, #255	; 0xff
        uint8_t mask = pgm_read_byte(&premask[mod]);
 23f16de:	492c      	ldr	r1, [pc, #176]	; (23f1790 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          mask &= (0XFF >> (mod - h));
 23f16e0:	bf38      	it	cc
 23f16e2:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
 23f16e6:	5c89      	ldrb	r1, [r1, r2]
          mask &= (0XFF >> (mod - h));
 23f16e8:	bf3c      	itt	cc
 23f16ea:	fa4c fc0e 	asrcc.w	ip, ip, lr
 23f16ee:	ea0c 0101 	andcc.w	r1, ip, r1
        switch (color) {
 23f16f2:	2d01      	cmp	r5, #1
 23f16f4:	d007      	beq.n	23f1706 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
 23f16f6:	2d02      	cmp	r5, #2
 23f16f8:	d02e      	beq.n	23f1758 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
 23f16fa:	b94d      	cbnz	r5, 23f1710 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
          *pBuf &= ~mask;
 23f16fc:	f817 c006 	ldrb.w	ip, [r7, r6]
 23f1700:	ea2c 0101 	bic.w	r1, ip, r1
 23f1704:	e003      	b.n	23f170e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
          *pBuf |= mask;
 23f1706:	f817 c006 	ldrb.w	ip, [r7, r6]
 23f170a:	ea41 010c 	orr.w	r1, r1, ip
          *pBuf ^= mask;
 23f170e:	55b9      	strb	r1, [r7, r6]
      if (h >= mod) { // More to go?
 23f1710:	4293      	cmp	r3, r2
 23f1712:	d338      	bcc.n	23f1786 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
        pBuf += WIDTH;
 23f1714:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 23f1718:	440c      	add	r4, r1
        h -= mod;
 23f171a:	1a9a      	subs	r2, r3, r2
 23f171c:	b2d2      	uxtb	r2, r2
        if (h >= 8) {
 23f171e:	2a07      	cmp	r2, #7
 23f1720:	d90e      	bls.n	23f1740 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if (color == SSD1306_INVERSE) {
 23f1722:	2d02      	cmp	r5, #2
 23f1724:	d11d      	bne.n	23f1762 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
 23f1726:	4613      	mov	r3, r2
              *pBuf ^= 0xFF; // Invert byte
 23f1728:	7821      	ldrb	r1, [r4, #0]
              h -= 8;        // Subtract 8 rows from height
 23f172a:	3b08      	subs	r3, #8
              *pBuf ^= 0xFF; // Invert byte
 23f172c:	43c9      	mvns	r1, r1
 23f172e:	7021      	strb	r1, [r4, #0]
              pBuf += WIDTH; // Advance pointer 8 rows
 23f1730:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h -= 8;        // Subtract 8 rows from height
 23f1734:	b2db      	uxtb	r3, r3
            } while (h >= 8);
 23f1736:	2b07      	cmp	r3, #7
              pBuf += WIDTH; // Advance pointer 8 rows
 23f1738:	440c      	add	r4, r1
            } while (h >= 8);
 23f173a:	d8f5      	bhi.n	23f1728 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
              h -= 8;        // Subtract 8 rows from height
 23f173c:	f002 0207 	and.w	r2, r2, #7
        if (h) { // Do the final partial byte, if necessary
 23f1740:	b30a      	cbz	r2, 23f1786 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
 23f1742:	4b14      	ldr	r3, [pc, #80]	; (23f1794 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x108>)
          switch (color) {
 23f1744:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
 23f1746:	5c9b      	ldrb	r3, [r3, r2]
          switch (color) {
 23f1748:	d01a      	beq.n	23f1780 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf4>
 23f174a:	2d02      	cmp	r5, #2
 23f174c:	d01c      	beq.n	23f1788 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfc>
 23f174e:	b9d5      	cbnz	r5, 23f1786 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
            *pBuf &= ~mask;
 23f1750:	7822      	ldrb	r2, [r4, #0]
 23f1752:	ea22 0303 	bic.w	r3, r2, r3
 23f1756:	e015      	b.n	23f1784 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          *pBuf ^= mask;
 23f1758:	f817 c006 	ldrb.w	ip, [r7, r6]
 23f175c:	ea81 010c 	eor.w	r1, r1, ip
 23f1760:	e7d5      	b.n	23f170e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
 23f1762:	1e29      	subs	r1, r5, #0
 23f1764:	bf18      	it	ne
 23f1766:	2101      	movne	r1, #1
 23f1768:	4613      	mov	r3, r2
 23f176a:	4249      	negs	r1, r1
 23f176c:	b2c9      	uxtb	r1, r1
              *pBuf = val;   // Set byte
 23f176e:	7021      	strb	r1, [r4, #0]
              h -= 8;        // Subtract 8 rows from height
 23f1770:	3b08      	subs	r3, #8
              pBuf += WIDTH; // Advance pointer 8 rows
 23f1772:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h -= 8;        // Subtract 8 rows from height
 23f1776:	b2db      	uxtb	r3, r3
            } while (h >= 8);
 23f1778:	2b07      	cmp	r3, #7
              pBuf += WIDTH; // Advance pointer 8 rows
 23f177a:	4434      	add	r4, r6
            } while (h >= 8);
 23f177c:	d8f7      	bhi.n	23f176e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe2>
 23f177e:	e7dd      	b.n	23f173c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
            *pBuf |= mask;
 23f1780:	7822      	ldrb	r2, [r4, #0]
 23f1782:	4313      	orrs	r3, r2
            *pBuf ^= mask;
 23f1784:	7023      	strb	r3, [r4, #0]
}
 23f1786:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *pBuf ^= mask;
 23f1788:	7822      	ldrb	r2, [r4, #0]
 23f178a:	4053      	eors	r3, r2
 23f178c:	e7fa      	b.n	23f1784 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
 23f178e:	bf00      	nop
 23f1790:	023ff450 	.word	0x023ff450
 23f1794:	023ff458 	.word	0x023ff458

023f1798 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
                                     uint16_t color) {
 23f1798:	b470      	push	{r4, r5, r6}
 23f179a:	4614      	mov	r4, r2
  switch (rotation) {
 23f179c:	7e82      	ldrb	r2, [r0, #26]
                                     uint16_t color) {
 23f179e:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch (rotation) {
 23f17a2:	2a02      	cmp	r2, #2
 23f17a4:	d00d      	beq.n	23f17c2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
 23f17a6:	2a03      	cmp	r2, #3
 23f17a8:	d018      	beq.n	23f17dc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
 23f17aa:	2a01      	cmp	r2, #1
 23f17ac:	d111      	bne.n	23f17d2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
 23f17ae:	43e4      	mvns	r4, r4
 23f17b0:	8902      	ldrh	r2, [r0, #8]
 23f17b2:	4414      	add	r4, r2
 23f17b4:	b224      	sxth	r4, r4
    drawFastVLineInternal(x, y, w, color);
 23f17b6:	460a      	mov	r2, r1
 23f17b8:	9603      	str	r6, [sp, #12]
 23f17ba:	4621      	mov	r1, r4
}
 23f17bc:	bc70      	pop	{r4, r5, r6}
    drawFastVLineInternal(x, y, w, color);
 23f17be:	f7ff bf65 	b.w	23f168c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
 23f17c2:	43e4      	mvns	r4, r4
 23f17c4:	8942      	ldrh	r2, [r0, #10]
    x -= (w - 1);
 23f17c6:	8905      	ldrh	r5, [r0, #8]
 23f17c8:	4419      	add	r1, r3
    y = HEIGHT - y - 1;
 23f17ca:	4414      	add	r4, r2
    x -= (w - 1);
 23f17cc:	1a69      	subs	r1, r5, r1
    y = HEIGHT - y - 1;
 23f17ce:	b224      	sxth	r4, r4
    x -= (w - 1);
 23f17d0:	b209      	sxth	r1, r1
    drawFastHLineInternal(x, y, w, color);
 23f17d2:	4622      	mov	r2, r4
 23f17d4:	9603      	str	r6, [sp, #12]
}
 23f17d6:	bc70      	pop	{r4, r5, r6}
    drawFastHLineInternal(x, y, w, color);
 23f17d8:	f7ff bf12 	b.w	23f1600 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w - 1);
 23f17dc:	8945      	ldrh	r5, [r0, #10]
 23f17de:	4419      	add	r1, r3
 23f17e0:	1a69      	subs	r1, r5, r1
 23f17e2:	b209      	sxth	r1, r1
    break;
 23f17e4:	e7e7      	b.n	23f17b6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

023f17e6 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
                                     uint16_t color) {
 23f17e6:	b430      	push	{r4, r5}
 23f17e8:	4614      	mov	r4, r2
  switch (rotation) {
 23f17ea:	7e82      	ldrb	r2, [r0, #26]
                                     uint16_t color) {
 23f17ec:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch (rotation) {
 23f17f0:	2a02      	cmp	r2, #2
 23f17f2:	d00d      	beq.n	23f1810 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
 23f17f4:	2a03      	cmp	r2, #3
 23f17f6:	d018      	beq.n	23f182a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
 23f17f8:	2a01      	cmp	r2, #1
 23f17fa:	d111      	bne.n	23f1820 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h - 1);
 23f17fc:	18e2      	adds	r2, r4, r3
 23f17fe:	8904      	ldrh	r4, [r0, #8]
 23f1800:	1aa4      	subs	r4, r4, r2
 23f1802:	b224      	sxth	r4, r4
    drawFastHLineInternal(x, y, h, color);
 23f1804:	460a      	mov	r2, r1
 23f1806:	9502      	str	r5, [sp, #8]
 23f1808:	4621      	mov	r1, r4
}
 23f180a:	bc30      	pop	{r4, r5}
    drawFastHLineInternal(x, y, h, color);
 23f180c:	f7ff bef8 	b.w	23f1600 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH - x - 1;
 23f1810:	43c9      	mvns	r1, r1
 23f1812:	8902      	ldrh	r2, [r0, #8]
 23f1814:	4411      	add	r1, r2
    y -= (h - 1);
 23f1816:	18e2      	adds	r2, r4, r3
 23f1818:	8944      	ldrh	r4, [r0, #10]
    x = WIDTH - x - 1;
 23f181a:	b209      	sxth	r1, r1
    y -= (h - 1);
 23f181c:	1aa4      	subs	r4, r4, r2
 23f181e:	b224      	sxth	r4, r4
    drawFastVLineInternal(x, y, h, color);
 23f1820:	4622      	mov	r2, r4
 23f1822:	9502      	str	r5, [sp, #8]
}
 23f1824:	bc30      	pop	{r4, r5}
    drawFastVLineInternal(x, y, h, color);
 23f1826:	f7ff bf31 	b.w	23f168c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
 23f182a:	43c9      	mvns	r1, r1
 23f182c:	8942      	ldrh	r2, [r0, #10]
 23f182e:	4411      	add	r1, r2
 23f1830:	b209      	sxth	r1, r1
    break;
 23f1832:	e7e7      	b.n	23f1804 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

023f1834 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
 23f1834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f1836:	4604      	mov	r4, r0
  TRANSACTION_START
 23f1838:	6a80      	ldr	r0, [r0, #40]	; 0x28
 23f183a:	2800      	cmp	r0, #0
 23f183c:	d042      	beq.n	23f18c4 <_ZN16Adafruit_SSD13067displayEv+0x90>
 23f183e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 23f1840:	f006 fcb2 	bl	23f81a8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
 23f1844:	2205      	movs	r2, #5
 23f1846:	4620      	mov	r0, r4
 23f1848:	4947      	ldr	r1, [pc, #284]	; (23f1968 <_ZN16Adafruit_SSD13067displayEv+0x134>)
 23f184a:	f7ff fc9d 	bl	23f1188 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
 23f184e:	8921      	ldrh	r1, [r4, #8]
 23f1850:	4620      	mov	r0, r4
 23f1852:	3901      	subs	r1, #1
 23f1854:	b2c9      	uxtb	r1, r1
 23f1856:	f7ff fc29 	bl	23f10ac <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  if (wire) { // I2C
 23f185a:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
 23f185e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 23f1862:	1dde      	adds	r6, r3, #7
 23f1864:	bf48      	it	mi
 23f1866:	f103 060e 	addmi.w	r6, r3, #14
 23f186a:	8923      	ldrh	r3, [r4, #8]
 23f186c:	10f6      	asrs	r6, r6, #3
 23f186e:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr = buffer;
 23f1872:	fa15 f686 	uxtah	r6, r5, r6
  if (wire) { // I2C
 23f1876:	2800      	cmp	r0, #0
 23f1878:	d03b      	beq.n	23f18f2 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
 23f187a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 23f187e:	f006 fcc5 	bl	23f820c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
 23f1882:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f1884:	2140      	movs	r1, #64	; 0x40
 23f1886:	6803      	ldr	r3, [r0, #0]
    uint16_t bytesOut = 1;
 23f1888:	2701      	movs	r7, #1
    WIRE_WRITE((uint8_t)0x40);
 23f188a:	689b      	ldr	r3, [r3, #8]
 23f188c:	4798      	blx	r3
    while (count--) {
 23f188e:	42ae      	cmp	r6, r5
        wire->endTransmission();
 23f1890:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while (count--) {
 23f1892:	d024      	beq.n	23f18de <_ZN16Adafruit_SSD13067displayEv+0xaa>
      if (bytesOut >= WIRE_MAX) {
 23f1894:	2f1f      	cmp	r7, #31
 23f1896:	d90c      	bls.n	23f18b2 <_ZN16Adafruit_SSD13067displayEv+0x7e>
        wire->endTransmission();
 23f1898:	f006 fcbf 	bl	23f821a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
 23f189c:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 23f18a0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f18a2:	f006 fcb3 	bl	23f820c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
 23f18a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f18a8:	2140      	movs	r1, #64	; 0x40
 23f18aa:	6803      	ldr	r3, [r0, #0]
        bytesOut = 1;
 23f18ac:	2701      	movs	r7, #1
        WIRE_WRITE((uint8_t)0x40);
 23f18ae:	689b      	ldr	r3, [r3, #8]
 23f18b0:	4798      	blx	r3
      WIRE_WRITE(*ptr++);
 23f18b2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f18b4:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f18b8:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
 23f18ba:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
 23f18bc:	689b      	ldr	r3, [r3, #8]
 23f18be:	4798      	blx	r3
      bytesOut++;
 23f18c0:	b2bf      	uxth	r7, r7
    while (count--) {
 23f18c2:	e7e4      	b.n	23f188e <_ZN16Adafruit_SSD13067displayEv+0x5a>
  TRANSACTION_START
 23f18c4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f18c6:	b118      	cbz	r0, 23f18d0 <_ZN16Adafruit_SSD13067displayEv+0x9c>
 23f18c8:	f104 0164 	add.w	r1, r4, #100	; 0x64
 23f18cc:	f007 f9de 	bl	23f8c8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
 23f18d0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f18d2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f18d4:	6813      	ldr	r3, [r2, #0]
 23f18d6:	ea23 0301 	bic.w	r3, r3, r1
 23f18da:	6013      	str	r3, [r2, #0]
 23f18dc:	e7b2      	b.n	23f1844 <_ZN16Adafruit_SSD13067displayEv+0x10>
    wire->endTransmission();
 23f18de:	f006 fc9c 	bl	23f821a <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
 23f18e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 23f18e4:	2800      	cmp	r0, #0
 23f18e6:	d032      	beq.n	23f194e <_ZN16Adafruit_SSD13067displayEv+0x11a>
 23f18e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
}
 23f18ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 23f18ee:	f006 bc5b 	b.w	23f81a8 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
 23f18f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 23f18f4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 23f18f6:	6813      	ldr	r3, [r2, #0]
 23f18f8:	430b      	orrs	r3, r1
 23f18fa:	6013      	str	r3, [r2, #0]
    while (count--)
 23f18fc:	42b5      	cmp	r5, r6
 23f18fe:	d0f0      	beq.n	23f18e2 <_ZN16Adafruit_SSD13067displayEv+0xae>
  if (spi) {
 23f1900:	6a60      	ldr	r0, [r4, #36]	; 0x24
      SPIwrite(*ptr++);
 23f1902:	f815 1b01 	ldrb.w	r1, [r5], #1
  if (spi) {
 23f1906:	b110      	cbz	r0, 23f190e <_ZN16Adafruit_SSD13067displayEv+0xda>
    (void)spi->transfer(d);
 23f1908:	f007 fa2e 	bl	23f8d68 <_ZN8SPIClass8transferEh>
 23f190c:	e7f6      	b.n	23f18fc <_ZN16Adafruit_SSD13067displayEv+0xc8>
 23f190e:	f04f 0e08 	mov.w	lr, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f1912:	2080      	movs	r0, #128	; 0x80
        *mosiPort |= mosiPinMask;
 23f1914:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23f1916:	f8d4 c048 	ldr.w	ip, [r4, #72]	; 0x48
 23f191a:	681f      	ldr	r7, [r3, #0]
      if (d & bit)
 23f191c:	4201      	tst	r1, r0
        *mosiPort |= mosiPinMask;
 23f191e:	bf14      	ite	ne
 23f1920:	ea47 070c 	orrne.w	r7, r7, ip
        *mosiPort &= ~mosiPinMask;
 23f1924:	ea27 070c 	biceq.w	r7, r7, ip
 23f1928:	601f      	str	r7, [r3, #0]
      *clkPort |= clkPinMask;  // Clock high
 23f192a:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 23f192c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 23f192e:	683b      	ldr	r3, [r7, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f1930:	f1be 0e01 	subs.w	lr, lr, #1
      *clkPort |= clkPinMask;  // Clock high
 23f1934:	ea43 0302 	orr.w	r3, r3, r2
 23f1938:	603b      	str	r3, [r7, #0]
      *clkPort &= ~clkPinMask; // Clock low
 23f193a:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 23f193c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 23f193e:	683b      	ldr	r3, [r7, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f1940:	ea4f 0050 	mov.w	r0, r0, lsr #1
      *clkPort &= ~clkPinMask; // Clock low
 23f1944:	ea23 0302 	bic.w	r3, r3, r2
 23f1948:	603b      	str	r3, [r7, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
 23f194a:	d1e3      	bne.n	23f1914 <_ZN16Adafruit_SSD13067displayEv+0xe0>
 23f194c:	e7d6      	b.n	23f18fc <_ZN16Adafruit_SSD13067displayEv+0xc8>
  TRANSACTION_END
 23f194e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 23f1950:	6d61      	ldr	r1, [r4, #84]	; 0x54
 23f1952:	6813      	ldr	r3, [r2, #0]
 23f1954:	430b      	orrs	r3, r1
 23f1956:	6013      	str	r3, [r2, #0]
 23f1958:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f195a:	b118      	cbz	r0, 23f1964 <_ZN16Adafruit_SSD13067displayEv+0x130>
}
 23f195c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  TRANSACTION_END
 23f1960:	f007 b97a 	b.w	23f8c58 <_ZN8SPIClass14endTransactionEv>
}
 23f1964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f1966:	bf00      	nop
 23f1968:	023ff472 	.word	0x023ff472

023f196c <_ZN17Adafruit_VEML7700C1Ev>:
#include "Adafruit_VEML7700.h"

/*!
 *    @brief  Instantiates a new VEML7700 class
 */
Adafruit_VEML7700::Adafruit_VEML7700(void) {}
 23f196c:	4a03      	ldr	r2, [pc, #12]	; (23f197c <_ZN17Adafruit_VEML7700C1Ev+0x10>)
 23f196e:	6002      	str	r2, [r0, #0]
 23f1970:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 23f1974:	6042      	str	r2, [r0, #4]
 23f1976:	4a02      	ldr	r2, [pc, #8]	; (23f1980 <_ZN17Adafruit_VEML7700C1Ev+0x14>)
 23f1978:	6082      	str	r2, [r0, #8]
 23f197a:	4770      	bx	lr
 23f197c:	3b6bedfa 	.word	0x3b6bedfa
 23f1980:	44480000 	.word	0x44480000

023f1984 <_ZN17Adafruit_VEML77006enableEb>:

/*!
 *    @brief Enable or disable the sensor
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::enable(bool enable) {
 23f1984:	b510      	push	{r4, lr}
 23f1986:	460c      	mov	r4, r1
  ALS_Shutdown->write(!enable);
 23f1988:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 23f198a:	f081 0101 	eor.w	r1, r1, #1
 23f198e:	f7fd fee3 	bl	23ef758 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  //   When activating the sensor, set bit 0 of the command register
  //   to “0” with a wait time of 2.5 ms before the first measurement
  //   is needed, allowing for the correct start of the signal
  //   processor and oscillator.
  //   '''
  if (enable)
 23f1992:	b124      	cbz	r4, 23f199e <_ZN17Adafruit_VEML77006enableEb+0x1a>
    delay(5); // doubling 2.5ms spec to be sure
}
 23f1994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(5); // doubling 2.5ms spec to be sure
 23f1998:	2005      	movs	r0, #5
 23f199a:	f005 be45 	b.w	23f7628 <delay>
}
 23f199e:	bd10      	pop	{r4, pc}

023f19a0 <_ZN17Adafruit_VEML770015interruptEnableEb>:
/*!
 *    @brief Enable or disable the interrupt
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::interruptEnable(bool enable) {
  ALS_Interrupt_Enable->write(enable);
 23f19a0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 23f19a2:	f7fd bed9 	b.w	23ef758 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

023f19a6 <_ZN17Adafruit_VEML770014setPersistenceEh>:
 *    @brief Set the ALS IRQ persistence setting
 *    @param pers Persistence constant, can be VEML7700_PERS_1, VEML7700_PERS_2,
 *    VEML7700_PERS_4 or VEML7700_PERS_8
 */
void Adafruit_VEML7700::setPersistence(uint8_t pers) {
  ALS_Persistence->write(pers);
 23f19a6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 23f19a8:	f7fd bed6 	b.w	23ef758 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

023f19ac <_ZN17Adafruit_VEML770018getIntegrationTimeEv>:
/*!
 *    @brief Get ALS integration time setting
 *    @returns IT index, can be VEML7700_IT_100MS, VEML7700_IT_200MS,
 * VEML7700_IT_400MS, VEML7700_IT_800MS, VEML7700_IT_50MS or VEML7700_IT_25MS
 */
uint8_t Adafruit_VEML7700::getIntegrationTime(void) {
 23f19ac:	b508      	push	{r3, lr}
  return ALS_Integration_Time->read();
 23f19ae:	6b80      	ldr	r0, [r0, #56]	; 0x38
 23f19b0:	f7fd fec5 	bl	23ef73e <_ZN27Adafruit_BusIO_RegisterBits4readEv>
}
 23f19b4:	b2c0      	uxtb	r0, r0
 23f19b6:	bd08      	pop	{r3, pc}

023f19b8 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv>:

/*!
 *    @brief Get ALS integration time value
 *    @returns ALS integration time in milliseconds
 */
int Adafruit_VEML7700::getIntegrationTimeValue(void) {
 23f19b8:	b508      	push	{r3, lr}
  switch (getIntegrationTime()) {
 23f19ba:	f7ff fff7 	bl	23f19ac <_ZN17Adafruit_VEML770018getIntegrationTimeEv>
 23f19be:	280c      	cmp	r0, #12
 23f19c0:	bf96      	itet	ls
 23f19c2:	4b03      	ldrls	r3, [pc, #12]	; (23f19d0 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv+0x18>)
 23f19c4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 23f19c8:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
  case VEML7700_IT_800MS:
    return 800;
  default:
    return -1;
  }
}
 23f19cc:	bd08      	pop	{r3, pc}
 23f19ce:	bf00      	nop
 23f19d0:	023ff478 	.word	0x023ff478

023f19d4 <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>:
void Adafruit_VEML7700::setIntegrationTime(uint8_t it, bool wait) {
 23f19d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f19d6:	4605      	mov	r5, r0
  int flushDelay = wait ? getIntegrationTimeValue() : 0;
 23f19d8:	b17a      	cbz	r2, 23f19fa <_ZN17Adafruit_VEML770018setIntegrationTimeEhb+0x26>
 23f19da:	9101      	str	r1, [sp, #4]
 23f19dc:	f7ff ffec 	bl	23f19b8 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv>
 23f19e0:	4604      	mov	r4, r0
 23f19e2:	9901      	ldr	r1, [sp, #4]
  ALS_Integration_Time->write(it);
 23f19e4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 23f19e6:	f7fd feb7 	bl	23ef758 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  delay(flushDelay);
 23f19ea:	4620      	mov	r0, r4
 23f19ec:	f005 fe1c 	bl	23f7628 <delay>
 23f19f0:	f004 fec6 	bl	23f6780 <HAL_Timer_Get_Milli_Seconds>
  lastRead = millis();
 23f19f4:	60e8      	str	r0, [r5, #12]
}
 23f19f6:	b003      	add	sp, #12
 23f19f8:	bd30      	pop	{r4, r5, pc}
  int flushDelay = wait ? getIntegrationTimeValue() : 0;
 23f19fa:	4614      	mov	r4, r2
 23f19fc:	e7f2      	b.n	23f19e4 <_ZN17Adafruit_VEML770018setIntegrationTimeEhb+0x10>

023f19fe <_ZN17Adafruit_VEML77007setGainEh>:
/*!
 *    @brief Set ALS gain
 *    @param gain Can be VEML7700_GAIN_1, VEML7700_GAIN_2, VEML7700_GAIN_1_8 or
 * VEML7700_GAIN_1_4
 */
void Adafruit_VEML7700::setGain(uint8_t gain) {
 23f19fe:	b510      	push	{r4, lr}
 23f1a00:	4604      	mov	r4, r0
  ALS_Gain->write(gain);
 23f1a02:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 23f1a04:	f7fd fea8 	bl	23ef758 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
 23f1a08:	f004 feba 	bl	23f6780 <HAL_Timer_Get_Milli_Seconds>
  lastRead = millis(); // reset
 23f1a0c:	60e0      	str	r0, [r4, #12]
}
 23f1a0e:	bd10      	pop	{r4, pc}

023f1a10 <_ZN17Adafruit_VEML77007getGainEv>:
/*!
 *    @brief Get ALS gain setting
 *    @returns Gain index, can be VEML7700_GAIN_1, VEML7700_GAIN_2,
 * VEML7700_GAIN_1_8 or VEML7700_GAIN_1_4
 */
uint8_t Adafruit_VEML7700::getGain(void) { return ALS_Gain->read(); }
 23f1a10:	b508      	push	{r3, lr}
 23f1a12:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 23f1a14:	f7fd fe93 	bl	23ef73e <_ZN27Adafruit_BusIO_RegisterBits4readEv>
 23f1a18:	b2c0      	uxtb	r0, r0
 23f1a1a:	bd08      	pop	{r3, pc}

023f1a1c <_ZN17Adafruit_VEML770012getGainValueEv>:

/*!
 *    @brief Get ALS gain value
 *    @returns Actual gain value as float
 */
float Adafruit_VEML7700::getGainValue(void) {
 23f1a1c:	b508      	push	{r3, lr}
  switch (getGain()) {
 23f1a1e:	f7ff fff7 	bl	23f1a10 <_ZN17Adafruit_VEML77007getGainEv>
 23f1a22:	2803      	cmp	r0, #3
 23f1a24:	bf97      	itett	ls
 23f1a26:	4b04      	ldrls	r3, [pc, #16]	; (23f1a38 <_ZN17Adafruit_VEML770012getGainValueEv+0x1c>)
 23f1a28:	eebf 0a00 	vmovhi.f32	s0, #240	; 0xbf800000 -1.0
 23f1a2c:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
 23f1a30:	ed90 0a00 	vldrls	s0, [r0]
  case VEML7700_GAIN_2:
    return 2;
  default:
    return -1;
  }
}
 23f1a34:	bd08      	pop	{r3, pc}
 23f1a36:	bf00      	nop
 23f1a38:	023ff494 	.word	0x023ff494

023f1a3c <_ZN17Adafruit_VEML770015powerSaveEnableEb>:
/*!
 *    @brief Enable power save mode
 *    @param enable True if power save should be enabled
 */
void Adafruit_VEML7700::powerSaveEnable(bool enable) {
  PowerSave_Enable->write(enable);
 23f1a3c:	6c00      	ldr	r0, [r0, #64]	; 0x40
 23f1a3e:	f7fd be8b 	b.w	23ef758 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

023f1a42 <_ZN17Adafruit_VEML77005beginEP7TwoWire>:
bool Adafruit_VEML7700::begin(TwoWire *theWire) {
 23f1a42:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23f1a44:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
 23f1a46:	2010      	movs	r0, #16
bool Adafruit_VEML7700::begin(TwoWire *theWire) {
 23f1a48:	9103      	str	r1, [sp, #12]
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
 23f1a4a:	f7f2 fcea 	bl	23e4422 <_Znwj>
 23f1a4e:	4605      	mov	r5, r0
 23f1a50:	b118      	cbz	r0, 23f1a5a <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x18>
 23f1a52:	2110      	movs	r1, #16
 23f1a54:	9a03      	ldr	r2, [sp, #12]
 23f1a56:	f7fd fe98 	bl	23ef78a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
  if (!i2c_dev->begin()) {
 23f1a5a:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
 23f1a5c:	64a5      	str	r5, [r4, #72]	; 0x48
  if (!i2c_dev->begin()) {
 23f1a5e:	2101      	movs	r1, #1
 23f1a60:	f7fd feaf 	bl	23ef7c2 <_ZN18Adafruit_I2CDevice5beginEb>
 23f1a64:	4605      	mov	r5, r0
 23f1a66:	2800      	cmp	r0, #0
 23f1a68:	f000 80d6 	beq.w	23f1c18 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x1d6>
      new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_CONFIG, 2, LSBFIRST);
 23f1a6c:	2018      	movs	r0, #24
 23f1a6e:	f7f2 fcd8 	bl	23e4422 <_Znwj>
 23f1a72:	4606      	mov	r6, r0
 23f1a74:	b138      	cbz	r0, 23f1a86 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x44>
 23f1a76:	2301      	movs	r3, #1
 23f1a78:	2200      	movs	r2, #0
 23f1a7a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f1a7c:	e9cd 2300 	strd	r2, r3, [sp]
 23f1a80:	2302      	movs	r3, #2
 23f1a82:	f7fd fd6d 	bl	23ef560 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  ALS_Config =
 23f1a86:	6126      	str	r6, [r4, #16]
      i2c_dev, VEML7700_ALS_THREHOLD_HIGH, 2, LSBFIRST);
 23f1a88:	2018      	movs	r0, #24
 23f1a8a:	f7f2 fcca 	bl	23e4422 <_Znwj>
 23f1a8e:	4606      	mov	r6, r0
 23f1a90:	b138      	cbz	r0, 23f1aa2 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x60>
 23f1a92:	2300      	movs	r3, #0
 23f1a94:	2201      	movs	r2, #1
 23f1a96:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f1a98:	e9cd 3200 	strd	r3, r2, [sp]
 23f1a9c:	2302      	movs	r3, #2
 23f1a9e:	f7fd fd5f 	bl	23ef560 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  ALS_HighThreshold = new Adafruit_I2CRegister(
 23f1aa2:	61e6      	str	r6, [r4, #28]
      new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_THREHOLD_LOW, 2, LSBFIRST);
 23f1aa4:	2018      	movs	r0, #24
 23f1aa6:	f7f2 fcbc 	bl	23e4422 <_Znwj>
 23f1aaa:	4606      	mov	r6, r0
 23f1aac:	b140      	cbz	r0, 23f1ac0 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x7e>
 23f1aae:	2300      	movs	r3, #0
 23f1ab0:	2201      	movs	r2, #1
 23f1ab2:	e9cd 3200 	strd	r3, r2, [sp]
 23f1ab6:	2302      	movs	r3, #2
 23f1ab8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f1aba:	461a      	mov	r2, r3
 23f1abc:	f7fd fd50 	bl	23ef560 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  ALS_LowThreshold =
 23f1ac0:	6226      	str	r6, [r4, #32]
      new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_POWER_SAVE, 2, LSBFIRST);
 23f1ac2:	2018      	movs	r0, #24
 23f1ac4:	f7f2 fcad 	bl	23e4422 <_Znwj>
 23f1ac8:	4606      	mov	r6, r0
 23f1aca:	b148      	cbz	r0, 23f1ae0 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x9e>
 23f1acc:	2300      	movs	r3, #0
 23f1ace:	f04f 0e01 	mov.w	lr, #1
 23f1ad2:	2203      	movs	r2, #3
 23f1ad4:	e9cd 3e00 	strd	r3, lr, [sp]
 23f1ad8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f1ada:	2302      	movs	r3, #2
 23f1adc:	f7fd fd40 	bl	23ef560 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Power_Saving =
 23f1ae0:	6266      	str	r6, [r4, #36]	; 0x24
  ALS_Data = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_DATA, 2, LSBFIRST);
 23f1ae2:	2018      	movs	r0, #24
 23f1ae4:	f7f2 fc9d 	bl	23e4422 <_Znwj>
 23f1ae8:	4606      	mov	r6, r0
 23f1aea:	b148      	cbz	r0, 23f1b00 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xbe>
 23f1aec:	2300      	movs	r3, #0
 23f1aee:	f04f 0c01 	mov.w	ip, #1
 23f1af2:	2204      	movs	r2, #4
 23f1af4:	e9cd 3c00 	strd	r3, ip, [sp]
 23f1af8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f1afa:	2302      	movs	r3, #2
 23f1afc:	f7fd fd30 	bl	23ef560 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
 23f1b00:	6166      	str	r6, [r4, #20]
      new Adafruit_I2CRegister(i2c_dev, VEML7700_WHITE_DATA, 2, LSBFIRST);
 23f1b02:	2018      	movs	r0, #24
 23f1b04:	f7f2 fc8d 	bl	23e4422 <_Znwj>
 23f1b08:	4606      	mov	r6, r0
 23f1b0a:	b140      	cbz	r0, 23f1b1e <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xdc>
 23f1b0c:	2300      	movs	r3, #0
 23f1b0e:	2101      	movs	r1, #1
 23f1b10:	2205      	movs	r2, #5
 23f1b12:	e9cd 3100 	strd	r3, r1, [sp]
 23f1b16:	2302      	movs	r3, #2
 23f1b18:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f1b1a:	f7fd fd21 	bl	23ef560 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  White_Data =
 23f1b1e:	61a6      	str	r6, [r4, #24]
      new Adafruit_I2CRegister(i2c_dev, VEML7700_INTERRUPTSTATUS, 2, LSBFIRST);
 23f1b20:	2018      	movs	r0, #24
 23f1b22:	f7f2 fc7e 	bl	23e4422 <_Znwj>
 23f1b26:	4606      	mov	r6, r0
 23f1b28:	b140      	cbz	r0, 23f1b3c <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xfa>
 23f1b2a:	2300      	movs	r3, #0
 23f1b2c:	2201      	movs	r2, #1
 23f1b2e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 23f1b30:	e9cd 3200 	strd	r3, r2, [sp]
 23f1b34:	2302      	movs	r3, #2
 23f1b36:	2206      	movs	r2, #6
 23f1b38:	f7fd fd12 	bl	23ef560 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Interrupt_Status =
 23f1b3c:	62a6      	str	r6, [r4, #40]	; 0x28
      new Adafruit_I2CRegisterBits(ALS_Config, 1, 0); // # bits, bit_shift
 23f1b3e:	2008      	movs	r0, #8
 23f1b40:	f7f2 fc6f 	bl	23e4422 <_Znwj>
 23f1b44:	4606      	mov	r6, r0
 23f1b46:	b120      	cbz	r0, 23f1b52 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x110>
 23f1b48:	2300      	movs	r3, #0
 23f1b4a:	2201      	movs	r2, #1
 23f1b4c:	6921      	ldr	r1, [r4, #16]
 23f1b4e:	f7fd fdf1 	bl	23ef734 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  ALS_Shutdown =
 23f1b52:	62e6      	str	r6, [r4, #44]	; 0x2c
  ALS_Interrupt_Enable = new Adafruit_I2CRegisterBits(ALS_Config, 1, 1);
 23f1b54:	2008      	movs	r0, #8
 23f1b56:	f7f2 fc64 	bl	23e4422 <_Znwj>
 23f1b5a:	4606      	mov	r6, r0
 23f1b5c:	b120      	cbz	r0, 23f1b68 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x126>
 23f1b5e:	2301      	movs	r3, #1
 23f1b60:	6921      	ldr	r1, [r4, #16]
 23f1b62:	461a      	mov	r2, r3
 23f1b64:	f7fd fde6 	bl	23ef734 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
 23f1b68:	6326      	str	r6, [r4, #48]	; 0x30
  ALS_Persistence = new Adafruit_I2CRegisterBits(ALS_Config, 2, 4);
 23f1b6a:	2008      	movs	r0, #8
 23f1b6c:	f7f2 fc59 	bl	23e4422 <_Znwj>
 23f1b70:	4606      	mov	r6, r0
 23f1b72:	b120      	cbz	r0, 23f1b7e <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x13c>
 23f1b74:	2304      	movs	r3, #4
 23f1b76:	2202      	movs	r2, #2
 23f1b78:	6921      	ldr	r1, [r4, #16]
 23f1b7a:	f7fd fddb 	bl	23ef734 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
 23f1b7e:	6366      	str	r6, [r4, #52]	; 0x34
  ALS_Integration_Time = new Adafruit_I2CRegisterBits(ALS_Config, 4, 6);
 23f1b80:	2008      	movs	r0, #8
 23f1b82:	f7f2 fc4e 	bl	23e4422 <_Znwj>
 23f1b86:	4606      	mov	r6, r0
 23f1b88:	b120      	cbz	r0, 23f1b94 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x152>
 23f1b8a:	2306      	movs	r3, #6
 23f1b8c:	2204      	movs	r2, #4
 23f1b8e:	6921      	ldr	r1, [r4, #16]
 23f1b90:	f7fd fdd0 	bl	23ef734 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
 23f1b94:	63a6      	str	r6, [r4, #56]	; 0x38
  ALS_Gain = new Adafruit_I2CRegisterBits(ALS_Config, 2, 11);
 23f1b96:	2008      	movs	r0, #8
 23f1b98:	f7f2 fc43 	bl	23e4422 <_Znwj>
 23f1b9c:	4606      	mov	r6, r0
 23f1b9e:	b120      	cbz	r0, 23f1baa <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x168>
 23f1ba0:	230b      	movs	r3, #11
 23f1ba2:	2202      	movs	r2, #2
 23f1ba4:	6921      	ldr	r1, [r4, #16]
 23f1ba6:	f7fd fdc5 	bl	23ef734 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
 23f1baa:	63e6      	str	r6, [r4, #60]	; 0x3c
  PowerSave_Enable = new Adafruit_I2CRegisterBits(Power_Saving, 1, 0);
 23f1bac:	2008      	movs	r0, #8
 23f1bae:	f7f2 fc38 	bl	23e4422 <_Znwj>
 23f1bb2:	4606      	mov	r6, r0
 23f1bb4:	b120      	cbz	r0, 23f1bc0 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x17e>
 23f1bb6:	2300      	movs	r3, #0
 23f1bb8:	2201      	movs	r2, #1
 23f1bba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 23f1bbc:	f7fd fdba 	bl	23ef734 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
 23f1bc0:	6426      	str	r6, [r4, #64]	; 0x40
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
 23f1bc2:	2008      	movs	r0, #8
 23f1bc4:	f7f2 fc2d 	bl	23e4422 <_Znwj>
 23f1bc8:	4606      	mov	r6, r0
 23f1bca:	b120      	cbz	r0, 23f1bd6 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x194>
 23f1bcc:	2301      	movs	r3, #1
 23f1bce:	2202      	movs	r2, #2
 23f1bd0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 23f1bd2:	f7fd fdaf 	bl	23ef734 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  enable(false);
 23f1bd6:	2100      	movs	r1, #0
 23f1bd8:	4620      	mov	r0, r4
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
 23f1bda:	6466      	str	r6, [r4, #68]	; 0x44
  enable(false);
 23f1bdc:	f7ff fed2 	bl	23f1984 <_ZN17Adafruit_VEML77006enableEb>
  interruptEnable(false);
 23f1be0:	2100      	movs	r1, #0
 23f1be2:	4620      	mov	r0, r4
 23f1be4:	f7ff fedc 	bl	23f19a0 <_ZN17Adafruit_VEML770015interruptEnableEb>
  setPersistence(VEML7700_PERS_1);
 23f1be8:	2100      	movs	r1, #0
 23f1bea:	4620      	mov	r0, r4
 23f1bec:	f7ff fedb 	bl	23f19a6 <_ZN17Adafruit_VEML770014setPersistenceEh>
  setGain(VEML7700_GAIN_1_8);
 23f1bf0:	2102      	movs	r1, #2
 23f1bf2:	4620      	mov	r0, r4
 23f1bf4:	f7ff ff03 	bl	23f19fe <_ZN17Adafruit_VEML77007setGainEh>
  setIntegrationTime(VEML7700_IT_100MS);
 23f1bf8:	2201      	movs	r2, #1
 23f1bfa:	2100      	movs	r1, #0
 23f1bfc:	4620      	mov	r0, r4
 23f1bfe:	f7ff fee9 	bl	23f19d4 <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>
  powerSaveEnable(false);
 23f1c02:	2100      	movs	r1, #0
 23f1c04:	4620      	mov	r0, r4
 23f1c06:	f7ff ff19 	bl	23f1a3c <_ZN17Adafruit_VEML770015powerSaveEnableEb>
  enable(true);
 23f1c0a:	2101      	movs	r1, #1
 23f1c0c:	4620      	mov	r0, r4
 23f1c0e:	f7ff feb9 	bl	23f1984 <_ZN17Adafruit_VEML77006enableEb>
 23f1c12:	f004 fdb5 	bl	23f6780 <HAL_Timer_Get_Milli_Seconds>
  lastRead = millis();
 23f1c16:	60e0      	str	r0, [r4, #12]
}
 23f1c18:	4628      	mov	r0, r5
 23f1c1a:	b004      	add	sp, #16
 23f1c1c:	bd70      	pop	{r4, r5, r6, pc}

023f1c1e <_ZN17Adafruit_VEML770013getResolutionEv>:

/*!
 *    @brief Determines resolution for current gain and integration time
 * settings.
 */
float Adafruit_VEML7700::getResolution(void) {
 23f1c1e:	b510      	push	{r4, lr}
 23f1c20:	ed2d 8b04 	vpush	{d8-d9}
 23f1c24:	4604      	mov	r4, r0
  return MAX_RES * (IT_MAX / getIntegrationTimeValue()) *
 23f1c26:	edd0 8a00 	vldr	s17, [r0]
 23f1c2a:	ed90 9a02 	vldr	s18, [r0, #8]
 23f1c2e:	f7ff fec3 	bl	23f19b8 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv>
 23f1c32:	ee07 0a90 	vmov	s15, r0
 23f1c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f1c3a:	ee89 8a27 	vdiv.f32	s16, s18, s15
         (GAIN_MAX / getGainValue());
 23f1c3e:	4620      	mov	r0, r4
  return MAX_RES * (IT_MAX / getIntegrationTimeValue()) *
 23f1c40:	ee28 8a28 	vmul.f32	s16, s16, s17
         (GAIN_MAX / getGainValue());
 23f1c44:	edd4 8a01 	vldr	s17, [r4, #4]
 23f1c48:	f7ff fee8 	bl	23f1a1c <_ZN17Adafruit_VEML770012getGainValueEv>
 23f1c4c:	eec8 7a80 	vdiv.f32	s15, s17, s0
}
 23f1c50:	ee27 0a88 	vmul.f32	s0, s15, s16
 23f1c54:	ecbd 8b04 	vpop	{d8-d9}
 23f1c58:	bd10      	pop	{r4, pc}
 23f1c5a:	0000      	movs	r0, r0
 23f1c5c:	0000      	movs	r0, r0
	...

023f1c60 <_ZN17Adafruit_VEML770010computeLuxEtb>:
 *    @brief Copmute lux from ALS reading.
 *    @param rawALS raw ALS register value
 *    @param corrected if true, apply non-linear correction
 *    @return lux value
 */
float Adafruit_VEML7700::computeLux(uint16_t rawALS, bool corrected) {
 23f1c60:	b538      	push	{r3, r4, r5, lr}
 23f1c62:	ed2d 8b02 	vpush	{d8}
 23f1c66:	ee08 1a10 	vmov	s16, r1
 23f1c6a:	4614      	mov	r4, r2
  float lux = getResolution() * rawALS;
 23f1c6c:	f7ff ffd7 	bl	23f1c1e <_ZN17Adafruit_VEML770013getResolutionEv>
 23f1c70:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 23f1c74:	ee28 0a00 	vmul.f32	s0, s16, s0
  if (corrected)
 23f1c78:	b34c      	cbz	r4, 23f1cce <_ZN17Adafruit_VEML770010computeLuxEtb+0x6e>
    lux = (((6.0135e-13 * lux - 9.3924e-9) * lux + 8.1488e-5) * lux + 1.0023) *
 23f1c7a:	ee10 0a10 	vmov	r0, s0
 23f1c7e:	f7f1 fd13 	bl	23e36a8 <__aeabi_f2d>
 23f1c82:	a315      	add	r3, pc, #84	; (adr r3, 23f1cd8 <_ZN17Adafruit_VEML770010computeLuxEtb+0x78>)
 23f1c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f1c88:	4604      	mov	r4, r0
 23f1c8a:	460d      	mov	r5, r1
 23f1c8c:	f7f1 fd64 	bl	23e3758 <__aeabi_dmul>
 23f1c90:	a313      	add	r3, pc, #76	; (adr r3, 23f1ce0 <_ZN17Adafruit_VEML770010computeLuxEtb+0x80>)
 23f1c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f1c96:	f7f1 fba7 	bl	23e33e8 <__aeabi_dsub>
 23f1c9a:	4622      	mov	r2, r4
 23f1c9c:	462b      	mov	r3, r5
 23f1c9e:	f7f1 fd5b 	bl	23e3758 <__aeabi_dmul>
 23f1ca2:	a311      	add	r3, pc, #68	; (adr r3, 23f1ce8 <_ZN17Adafruit_VEML770010computeLuxEtb+0x88>)
 23f1ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f1ca8:	f7f1 fba0 	bl	23e33ec <__adddf3>
 23f1cac:	4622      	mov	r2, r4
 23f1cae:	462b      	mov	r3, r5
 23f1cb0:	f7f1 fd52 	bl	23e3758 <__aeabi_dmul>
 23f1cb4:	a30e      	add	r3, pc, #56	; (adr r3, 23f1cf0 <_ZN17Adafruit_VEML770010computeLuxEtb+0x90>)
 23f1cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f1cba:	f7f1 fb97 	bl	23e33ec <__adddf3>
 23f1cbe:	4622      	mov	r2, r4
 23f1cc0:	462b      	mov	r3, r5
 23f1cc2:	f7f1 fd49 	bl	23e3758 <__aeabi_dmul>
 23f1cc6:	f7f2 f83f 	bl	23e3d48 <__aeabi_d2f>
 23f1cca:	ee00 0a10 	vmov	s0, r0
          lux;
  return lux;
}
 23f1cce:	ecbd 8b02 	vpop	{d8}
 23f1cd2:	bd38      	pop	{r3, r4, r5, pc}
 23f1cd4:	f3af 8000 	nop.w
 23f1cd8:	b18f283b 	.word	0xb18f283b
 23f1cdc:	3d65287a 	.word	0x3d65287a
 23f1ce0:	c91ef46e 	.word	0xc91ef46e
 23f1ce4:	3e442b86 	.word	0x3e442b86
 23f1ce8:	2e18cab0 	.word	0x2e18cab0
 23f1cec:	3f155c91 	.word	0x3f155c91
 23f1cf0:	b98c7e28 	.word	0xb98c7e28
 23f1cf4:	3ff0096b 	.word	0x3ff0096b

023f1cf8 <_ZN17Adafruit_VEML77008readWaitEv>:

void Adafruit_VEML7700::readWait(void) {
 23f1cf8:	b538      	push	{r3, r4, r5, lr}
 23f1cfa:	4605      	mov	r5, r0
  //   at least for the programmed integration time. For example,
  //   for ALS_IT = 100 ms a wait time of ≥ 100 ms is needed.
  //   '''
  // Based on testing, it needs more. So doubling to be sure.

  unsigned long timeToWait = 2 * getIntegrationTimeValue(); // see above
 23f1cfc:	f7ff fe5c 	bl	23f19b8 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv>
 23f1d00:	0044      	lsls	r4, r0, #1
 23f1d02:	f004 fd3d 	bl	23f6780 <HAL_Timer_Get_Milli_Seconds>
  unsigned long timeWaited = millis() - lastRead;
 23f1d06:	68eb      	ldr	r3, [r5, #12]
 23f1d08:	1ac2      	subs	r2, r0, r3

  if (timeWaited < timeToWait)
 23f1d0a:	4294      	cmp	r4, r2
 23f1d0c:	d905      	bls.n	23f1d1a <_ZN17Adafruit_VEML77008readWaitEv+0x22>
    delay(timeToWait - timeWaited);
 23f1d0e:	1a18      	subs	r0, r3, r0
 23f1d10:	4420      	add	r0, r4
}
 23f1d12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    delay(timeToWait - timeWaited);
 23f1d16:	f005 bc87 	b.w	23f7628 <delay>
}
 23f1d1a:	bd38      	pop	{r3, r4, r5, pc}

023f1d1c <_ZN17Adafruit_VEML77007readALSEb>:
uint16_t Adafruit_VEML7700::readALS(bool wait) {
 23f1d1c:	b510      	push	{r4, lr}
 23f1d1e:	4604      	mov	r4, r0
  if (wait)
 23f1d20:	b109      	cbz	r1, 23f1d26 <_ZN17Adafruit_VEML77007readALSEb+0xa>
    readWait();
 23f1d22:	f7ff ffe9 	bl	23f1cf8 <_ZN17Adafruit_VEML77008readWaitEv>
 23f1d26:	f004 fd2b 	bl	23f6780 <HAL_Timer_Get_Milli_Seconds>
  lastRead = millis();
 23f1d2a:	60e0      	str	r0, [r4, #12]
  return ALS_Data->read();
 23f1d2c:	6960      	ldr	r0, [r4, #20]
 23f1d2e:	f7fd fce5 	bl	23ef6fc <_ZN23Adafruit_BusIO_Register4readEv>
}
 23f1d32:	b280      	uxth	r0, r0
 23f1d34:	bd10      	pop	{r4, pc}
	...

023f1d38 <_ZN17Adafruit_VEML77007autoLuxEv>:
 *  @brief Implemenation of App Note "Designing the VEML7700 Into an
 * Application", Vishay Document Number: 84323, Fig. 24 Flow Chart. This will
 * automatically adjust gain and integration time as needed to obtain a good raw
 * count value. Additionally, a non-linear correction is applied if needed.
 */
float Adafruit_VEML7700::autoLux(void) {
 23f1d38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23f1d3a:	4604      	mov	r4, r0
  const uint8_t gains[] = {VEML7700_GAIN_1_8, VEML7700_GAIN_1_4,
 23f1d3c:	4b2e      	ldr	r3, [pc, #184]	; (23f1df8 <_ZN17Adafruit_VEML77007autoLuxEv+0xc0>)

  uint8_t gainIndex = 0;      // start with ALS gain = 1/8
  uint8_t itIndex = 2;        // start with ALS integration time = 100ms
  bool useCorrection = false; // flag for non-linear correction

  setGain(gains[gainIndex]);
 23f1d3e:	2102      	movs	r1, #2
  const uint8_t gains[] = {VEML7700_GAIN_1_8, VEML7700_GAIN_1_4,
 23f1d40:	9301      	str	r3, [sp, #4]
  const uint8_t intTimes[] = {VEML7700_IT_25MS,  VEML7700_IT_50MS,
 23f1d42:	4b2e      	ldr	r3, [pc, #184]	; (23f1dfc <_ZN17Adafruit_VEML77007autoLuxEv+0xc4>)
 23f1d44:	6818      	ldr	r0, [r3, #0]
 23f1d46:	889b      	ldrh	r3, [r3, #4]
 23f1d48:	9002      	str	r0, [sp, #8]
  setGain(gains[gainIndex]);
 23f1d4a:	4620      	mov	r0, r4
  const uint8_t intTimes[] = {VEML7700_IT_25MS,  VEML7700_IT_50MS,
 23f1d4c:	f8ad 300c 	strh.w	r3, [sp, #12]
  setGain(gains[gainIndex]);
 23f1d50:	f7ff fe55 	bl	23f19fe <_ZN17Adafruit_VEML77007setGainEh>
  setIntegrationTime(intTimes[itIndex]);
 23f1d54:	2201      	movs	r2, #1
 23f1d56:	2100      	movs	r1, #0
 23f1d58:	4620      	mov	r0, r4
 23f1d5a:	f7ff fe3b 	bl	23f19d4 <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>

  uint16_t ALS = readALS(true);
 23f1d5e:	2101      	movs	r1, #1
 23f1d60:	4620      	mov	r0, r4
 23f1d62:	f7ff ffdb 	bl	23f1d1c <_ZN17Adafruit_VEML77007readALSEb>
  // Serial.println("** AUTO LUX DEBUG **");
  // Serial.print("ALS initial = "); Serial.println(ALS);

  if (ALS <= 100) {
 23f1d66:	2864      	cmp	r0, #100	; 0x64
 23f1d68:	d82e      	bhi.n	23f1dc8 <_ZN17Adafruit_VEML77007autoLuxEv+0x90>
  uint8_t itIndex = 2;        // start with ALS integration time = 100ms
 23f1d6a:	2602      	movs	r6, #2
  uint8_t gainIndex = 0;      // start with ALS gain = 1/8
 23f1d6c:	2500      	movs	r5, #0

    // increase first gain and then integration time as needed
    // compute lux using simple linear formula
    while ((ALS <= 100) && !((gainIndex == 3) && (itIndex == 5))) {
 23f1d6e:	2d03      	cmp	r5, #3
 23f1d70:	d109      	bne.n	23f1d86 <_ZN17Adafruit_VEML77007autoLuxEv+0x4e>
 23f1d72:	2e05      	cmp	r6, #5
 23f1d74:	d11a      	bne.n	23f1dac <_ZN17Adafruit_VEML77007autoLuxEv+0x74>
  bool useCorrection = false; // flag for non-linear correction
 23f1d76:	2200      	movs	r2, #0
      // Serial.print("ALS  hi lux = "); Serial.println(ALS);
    }
  }
  // Serial.println("** AUTO LUX DEBUG **");

  return computeLux(ALS, useCorrection);
 23f1d78:	4601      	mov	r1, r0
 23f1d7a:	4620      	mov	r0, r4
 23f1d7c:	b004      	add	sp, #16
 23f1d7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return computeLux(ALS, useCorrection);
 23f1d82:	f7ff bf6d 	b.w	23f1c60 <_ZN17Adafruit_VEML770010computeLuxEtb>
      if (gainIndex < 3) {
 23f1d86:	2d02      	cmp	r5, #2
 23f1d88:	d810      	bhi.n	23f1dac <_ZN17Adafruit_VEML77007autoLuxEv+0x74>
        setGain(gains[++gainIndex]);
 23f1d8a:	1c6b      	adds	r3, r5, #1
 23f1d8c:	aa04      	add	r2, sp, #16
 23f1d8e:	b2dd      	uxtb	r5, r3
 23f1d90:	fa52 f383 	uxtab	r3, r2, r3
 23f1d94:	4620      	mov	r0, r4
 23f1d96:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 23f1d9a:	f7ff fe30 	bl	23f19fe <_ZN17Adafruit_VEML77007setGainEh>
      ALS = readALS(true);
 23f1d9e:	2101      	movs	r1, #1
 23f1da0:	4620      	mov	r0, r4
 23f1da2:	f7ff ffbb 	bl	23f1d1c <_ZN17Adafruit_VEML77007readALSEb>
    while ((ALS <= 100) && !((gainIndex == 3) && (itIndex == 5))) {
 23f1da6:	2864      	cmp	r0, #100	; 0x64
 23f1da8:	d9e1      	bls.n	23f1d6e <_ZN17Adafruit_VEML77007autoLuxEv+0x36>
 23f1daa:	e7e4      	b.n	23f1d76 <_ZN17Adafruit_VEML77007autoLuxEv+0x3e>
      } else if (itIndex < 5) {
 23f1dac:	2e04      	cmp	r6, #4
 23f1dae:	d8f6      	bhi.n	23f1d9e <_ZN17Adafruit_VEML77007autoLuxEv+0x66>
        setIntegrationTime(intTimes[++itIndex]);
 23f1db0:	aa04      	add	r2, sp, #16
 23f1db2:	1c73      	adds	r3, r6, #1
 23f1db4:	b2de      	uxtb	r6, r3
 23f1db6:	fa52 f383 	uxtab	r3, r2, r3
 23f1dba:	4620      	mov	r0, r4
 23f1dbc:	2201      	movs	r2, #1
 23f1dbe:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 23f1dc2:	f7ff fe07 	bl	23f19d4 <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>
 23f1dc6:	e7ea      	b.n	23f1d9e <_ZN17Adafruit_VEML77007autoLuxEv+0x66>
  uint8_t itIndex = 2;        // start with ALS integration time = 100ms
 23f1dc8:	2502      	movs	r5, #2
    while ((ALS > 10000) && (itIndex > 0)) {
 23f1dca:	f242 7610 	movw	r6, #10000	; 0x2710
 23f1dce:	42b0      	cmp	r0, r6
 23f1dd0:	d910      	bls.n	23f1df4 <_ZN17Adafruit_VEML77007autoLuxEv+0xbc>
 23f1dd2:	b17d      	cbz	r5, 23f1df4 <_ZN17Adafruit_VEML77007autoLuxEv+0xbc>
      setIntegrationTime(intTimes[--itIndex]);
 23f1dd4:	aa04      	add	r2, sp, #16
 23f1dd6:	1e6b      	subs	r3, r5, #1
 23f1dd8:	b2dd      	uxtb	r5, r3
 23f1dda:	fa52 f383 	uxtab	r3, r2, r3
 23f1dde:	4620      	mov	r0, r4
 23f1de0:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 23f1de4:	2201      	movs	r2, #1
 23f1de6:	f7ff fdf5 	bl	23f19d4 <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>
      ALS = readALS(true);
 23f1dea:	2101      	movs	r1, #1
 23f1dec:	4620      	mov	r0, r4
 23f1dee:	f7ff ff95 	bl	23f1d1c <_ZN17Adafruit_VEML77007readALSEb>
    while ((ALS > 10000) && (itIndex > 0)) {
 23f1df2:	e7ec      	b.n	23f1dce <_ZN17Adafruit_VEML77007autoLuxEv+0x96>
    useCorrection = true;
 23f1df4:	2201      	movs	r2, #1
 23f1df6:	e7bf      	b.n	23f1d78 <_ZN17Adafruit_VEML77007autoLuxEv+0x40>
 23f1df8:	01000302 	.word	0x01000302
 23f1dfc:	023fcbc0 	.word	0x023fcbc0

023f1e00 <_ZN17Adafruit_VEML77007readLuxE9luxMethod>:
float Adafruit_VEML7700::readLux(luxMethod method) {
 23f1e00:	b510      	push	{r4, lr}
 23f1e02:	4604      	mov	r4, r0
 23f1e04:	ed2d 8b02 	vpush	{d8}
 23f1e08:	2904      	cmp	r1, #4
 23f1e0a:	d82b      	bhi.n	23f1e64 <_ZN17Adafruit_VEML77007readLuxE9luxMethod+0x64>
 23f1e0c:	e8df f001 	tbb	[pc, r1]
 23f1e10:	03242213 	.word	0x03242213
 23f1e14:	15          	.byte	0x15
 23f1e15:	00          	.byte	0x00
  bool wait = true;
 23f1e16:	2100      	movs	r1, #0
    return computeLux(readALS(wait));
 23f1e18:	4620      	mov	r0, r4
 23f1e1a:	f7ff ff7f 	bl	23f1d1c <_ZN17Adafruit_VEML77007readALSEb>
 23f1e1e:	ee08 0a10 	vmov	s16, r0
  float lux = getResolution() * rawALS;
 23f1e22:	4620      	mov	r0, r4
 23f1e24:	f7ff fefb 	bl	23f1c1e <_ZN17Adafruit_VEML770013getResolutionEv>
 23f1e28:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 23f1e2c:	ee28 0a00 	vmul.f32	s0, s16, s0
}
 23f1e30:	ecbd 8b02 	vpop	{d8}
 23f1e34:	bd10      	pop	{r4, pc}
  bool wait = true;
 23f1e36:	2101      	movs	r1, #1
 23f1e38:	e7ee      	b.n	23f1e18 <_ZN17Adafruit_VEML77007readLuxE9luxMethod+0x18>
 23f1e3a:	2100      	movs	r1, #0
    return computeLux(readALS(wait), true);
 23f1e3c:	4620      	mov	r0, r4
 23f1e3e:	f7ff ff6d 	bl	23f1d1c <_ZN17Adafruit_VEML77007readALSEb>
}
 23f1e42:	ecbd 8b02 	vpop	{d8}
    return computeLux(readALS(wait), true);
 23f1e46:	4601      	mov	r1, r0
 23f1e48:	2201      	movs	r2, #1
 23f1e4a:	4620      	mov	r0, r4
}
 23f1e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return computeLux(readALS(wait), true);
 23f1e50:	f7ff bf06 	b.w	23f1c60 <_ZN17Adafruit_VEML770010computeLuxEtb>
  bool wait = true;
 23f1e54:	2101      	movs	r1, #1
 23f1e56:	e7f1      	b.n	23f1e3c <_ZN17Adafruit_VEML77007readLuxE9luxMethod+0x3c>
}
 23f1e58:	ecbd 8b02 	vpop	{d8}
 23f1e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return autoLux();
 23f1e60:	f7ff bf6a 	b.w	23f1d38 <_ZN17Adafruit_VEML77007autoLuxEv>
  bool wait = true;
 23f1e64:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 23f1e68:	e7e2      	b.n	23f1e30 <_ZN17Adafruit_VEML77007readLuxE9luxMethod+0x30>

023f1e6a <_ZN7TwoWire5writeEi.isra.0>:
  inline size_t write(int n) { return write((uint8_t)n); }
 23f1e6a:	6803      	ldr	r3, [r0, #0]
 23f1e6c:	b2c9      	uxtb	r1, r1
 23f1e6e:	689b      	ldr	r3, [r3, #8]
 23f1e70:	4718      	bx	r3

023f1e72 <_ZN8LeafSensC1Ev>:
 */
#include "LeafSens.h"


LeafSens::LeafSens(){
  addr=0x61;
 23f1e72:	2361      	movs	r3, #97	; 0x61
 23f1e74:	7103      	strb	r3, [r0, #4]
}
 23f1e76:	4770      	bx	lr

023f1e78 <_ZN8LeafSens4initEh>:
  _wire = the_wire;
  addr = address;
  return 0;
}

int LeafSens::init(uint8_t address){
 23f1e78:	b538      	push	{r3, r4, r5, lr}
 23f1e7a:	4604      	mov	r4, r0
 23f1e7c:	460d      	mov	r5, r1
  _wire = &Wire;
 23f1e7e:	f007 fe61 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23f1e82:	6020      	str	r0, [r4, #0]
  _wire->begin();
 23f1e84:	f006 f994 	bl	23f81b0 <_ZN7TwoWire5beginEv>
  // _wire->setClock(100000L);
  addr = address;
  return 0;
}
 23f1e88:	2000      	movs	r0, #0
  addr = address;
 23f1e8a:	7125      	strb	r5, [r4, #4]
}
 23f1e8c:	bd38      	pop	{r3, r4, r5, pc}

023f1e8e <_ZN8LeafSens8i2cdelayEi>:


bool LeafSens::i2cdelay(int size){
 23f1e8e:	b570      	push	{r4, r5, r6, lr}
 23f1e90:	4606      	mov	r6, r0
  delay(1);
 23f1e92:	2001      	movs	r0, #1
bool LeafSens::i2cdelay(int size){
 23f1e94:	460d      	mov	r5, r1
  int i=0;
 23f1e96:	2400      	movs	r4, #0
  delay(1);
 23f1e98:	f005 fbc6 	bl	23f7628 <delay>
  for (;_wire->available() < size && i<=size;i++) {
 23f1e9c:	6830      	ldr	r0, [r6, #0]
 23f1e9e:	6803      	ldr	r3, [r0, #0]
 23f1ea0:	691b      	ldr	r3, [r3, #16]
 23f1ea2:	4798      	blx	r3
 23f1ea4:	42a8      	cmp	r0, r5
 23f1ea6:	da06      	bge.n	23f1eb6 <_ZN8LeafSens8i2cdelayEi+0x28>
 23f1ea8:	42ac      	cmp	r4, r5
 23f1eaa:	dc09      	bgt.n	23f1ec0 <_ZN8LeafSens8i2cdelayEi+0x32>
	  delay(2);
 23f1eac:	2002      	movs	r0, #2
 23f1eae:	f005 fbbb 	bl	23f7628 <delay>
  for (;_wire->available() < size && i<=size;i++) {
 23f1eb2:	3401      	adds	r4, #1
 23f1eb4:	e7f2      	b.n	23f1e9c <_ZN8LeafSens8i2cdelayEi+0xe>
  }
  if(i>=size){
 23f1eb6:	42ac      	cmp	r4, r5
 23f1eb8:	bfac      	ite	ge
 23f1eba:	2000      	movge	r0, #0
 23f1ebc:	2001      	movlt	r0, #1
	  return false;
  }else{
	  return true;
  }
}
 23f1ebe:	bd70      	pop	{r4, r5, r6, pc}
	  return false;
 23f1ec0:	2000      	movs	r0, #0
 23f1ec2:	e7fc      	b.n	23f1ebe <_ZN8LeafSens8i2cdelayEi+0x30>

023f1ec4 <_ZN8LeafSens8getStateEv>:

int LeafSens::getState(){ //-1:no data, 0:err, 1:ok
 23f1ec4:	b510      	push	{r4, lr}
 23f1ec6:	4604      	mov	r4, r0
  _wire->requestFrom(addr, (uint8_t)1);
 23f1ec8:	7901      	ldrb	r1, [r0, #4]
 23f1eca:	2201      	movs	r2, #1
 23f1ecc:	6800      	ldr	r0, [r0, #0]
 23f1ece:	f006 f996 	bl	23f81fe <_ZN7TwoWire11requestFromEhj>
   if(i2cdelay(1)){
 23f1ed2:	2101      	movs	r1, #1
 23f1ed4:	4620      	mov	r0, r4
 23f1ed6:	f7ff ffda 	bl	23f1e8e <_ZN8LeafSens8i2cdelayEi>
 23f1eda:	b128      	cbz	r0, 23f1ee8 <_ZN8LeafSens8getStateEv+0x24>
    return _wire->read();
 23f1edc:	6820      	ldr	r0, [r4, #0]
  }else{
    return -1;
  }
}
 23f1ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return _wire->read();
 23f1ee2:	6803      	ldr	r3, [r0, #0]
 23f1ee4:	695b      	ldr	r3, [r3, #20]
 23f1ee6:	4718      	bx	r3
}
 23f1ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23f1eec:	bd10      	pop	{r4, pc}

023f1eee <_ZN8LeafSens6getValEh>:

int16_t LeafSens::getVal(byte reg){
 23f1eee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f1ef0:	4604      	mov	r4, r0
 23f1ef2:	460d      	mov	r5, r1

  _wire->beginTransmission(addr); // transmit to device
 23f1ef4:	7901      	ldrb	r1, [r0, #4]
 23f1ef6:	6800      	ldr	r0, [r0, #0]
 23f1ef8:	f006 f984 	bl	23f8204 <_ZN7TwoWire17beginTransmissionEh>
  _wire->write(reg);              // sends one byte
 23f1efc:	6820      	ldr	r0, [r4, #0]
 23f1efe:	4629      	mov	r1, r5
 23f1f00:	6803      	ldr	r3, [r0, #0]
 23f1f02:	689b      	ldr	r3, [r3, #8]
 23f1f04:	4798      	blx	r3
  _wire->endTransmission();    // stop transmitting
 23f1f06:	6820      	ldr	r0, [r4, #0]
 23f1f08:	f006 f987 	bl	23f821a <_ZN7TwoWire15endTransmissionEv>
  delay(10);
 23f1f0c:	200a      	movs	r0, #10
 23f1f0e:	f005 fb8b 	bl	23f7628 <delay>
  _wire->requestFrom(addr, (uint8_t)2);
 23f1f12:	7921      	ldrb	r1, [r4, #4]
 23f1f14:	2202      	movs	r2, #2
 23f1f16:	6820      	ldr	r0, [r4, #0]
 23f1f18:	f006 f971 	bl	23f81fe <_ZN7TwoWire11requestFromEhj>
  int16_t ret=0;
 23f1f1c:	2300      	movs	r3, #0
  if(i2cdelay(2)){
 23f1f1e:	2102      	movs	r1, #2
 23f1f20:	4620      	mov	r0, r4
  int16_t ret=0;
 23f1f22:	f8ad 3006 	strh.w	r3, [sp, #6]
  if(i2cdelay(2)){
 23f1f26:	f7ff ffb2 	bl	23f1e8e <_ZN8LeafSens8i2cdelayEi>
 23f1f2a:	b158      	cbz	r0, 23f1f44 <_ZN8LeafSens6getValEh+0x56>
	byte *pointer = (byte *)&ret;
    pointer[0] = _wire->read();
 23f1f2c:	6820      	ldr	r0, [r4, #0]
 23f1f2e:	6803      	ldr	r3, [r0, #0]
 23f1f30:	695b      	ldr	r3, [r3, #20]
 23f1f32:	4798      	blx	r3
 23f1f34:	f88d 0006 	strb.w	r0, [sp, #6]
    pointer[1] = _wire->read();
 23f1f38:	6820      	ldr	r0, [r4, #0]
 23f1f3a:	6803      	ldr	r3, [r0, #0]
 23f1f3c:	695b      	ldr	r3, [r3, #20]
 23f1f3e:	4798      	blx	r3
 23f1f40:	f88d 0007 	strb.w	r0, [sp, #7]
  }
  return ret;
}
 23f1f44:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 23f1f48:	b003      	add	sp, #12
 23f1f4a:	bd30      	pop	{r4, r5, pc}

023f1f4c <_ZN8LeafSens10newReadingEv>:
    return 0;
  }
  return 1;
}

int LeafSens::newReading(){
 23f1f4c:	b510      	push	{r4, lr}
 23f1f4e:	4604      	mov	r4, r0
  _wire->beginTransmission(addr); // transmit to device
 23f1f50:	7901      	ldrb	r1, [r0, #4]
 23f1f52:	6800      	ldr	r0, [r0, #0]
 23f1f54:	f006 f956 	bl	23f8204 <_ZN7TwoWire17beginTransmissionEh>
  _wire->write(REG_READ_ST);              // sends one byte
 23f1f58:	2101      	movs	r1, #1
 23f1f5a:	6820      	ldr	r0, [r4, #0]
 23f1f5c:	f7ff ff85 	bl	23f1e6a <_ZN7TwoWire5writeEi.isra.0>
  _wire->endTransmission();    // stop transmitting
 23f1f60:	6820      	ldr	r0, [r4, #0]
 23f1f62:	f006 f95a 	bl	23f821a <_ZN7TwoWire15endTransmissionEv>
  delay(200); // let sensor read the data
 23f1f66:	20c8      	movs	r0, #200	; 0xc8
 23f1f68:	f005 fb5e 	bl	23f7628 <delay>
  return getState();
 23f1f6c:	4620      	mov	r0, r4
}
 23f1f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return getState();
 23f1f72:	f7ff bfa7 	b.w	23f1ec4 <_ZN8LeafSens8getStateEv>
	...

023f1f78 <_ZN8LeafSens6getWetEv>:

float LeafSens::getWet()
{
 23f1f78:	b508      	push	{r3, lr}
  return getVal(REG_WET)/100.0;
 23f1f7a:	2105      	movs	r1, #5
 23f1f7c:	f7ff ffb7 	bl	23f1eee <_ZN8LeafSens6getValEh>
 23f1f80:	f7f1 fb80 	bl	23e3684 <__aeabi_i2d>
 23f1f84:	2200      	movs	r2, #0
 23f1f86:	4b04      	ldr	r3, [pc, #16]	; (23f1f98 <_ZN8LeafSens6getWetEv+0x20>)
 23f1f88:	f7f1 fd10 	bl	23e39ac <__aeabi_ddiv>
 23f1f8c:	f7f1 fedc 	bl	23e3d48 <__aeabi_d2f>
}
 23f1f90:	ee00 0a10 	vmov	s0, r0
 23f1f94:	bd08      	pop	{r3, pc}
 23f1f96:	bf00      	nop
 23f1f98:	40590000 	.word	0x40590000

023f1f9c <_ZN8LeafSens7getTempEv>:

float LeafSens::getTemp()
{
 23f1f9c:	b508      	push	{r3, lr}
  return getVal(REG_TEMP)/100.0;
 23f1f9e:	2104      	movs	r1, #4
 23f1fa0:	f7ff ffa5 	bl	23f1eee <_ZN8LeafSens6getValEh>
 23f1fa4:	f7f1 fb6e 	bl	23e3684 <__aeabi_i2d>
 23f1fa8:	2200      	movs	r2, #0
 23f1faa:	4b04      	ldr	r3, [pc, #16]	; (23f1fbc <_ZN8LeafSens7getTempEv+0x20>)
 23f1fac:	f7f1 fcfe 	bl	23e39ac <__aeabi_ddiv>
 23f1fb0:	f7f1 feca 	bl	23e3d48 <__aeabi_d2f>
}
 23f1fb4:	ee00 0a10 	vmov	s0, r0
 23f1fb8:	bd08      	pop	{r3, pc}
 23f1fba:	bf00      	nop
 23f1fbc:	40590000 	.word	0x40590000

023f1fc0 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
 23f1fc0:	2001      	movs	r0, #1
 23f1fc2:	4770      	bx	lr

023f1fc4 <_ZN15RHGenericDriver13waitAvailableEv>:

// Blocks until a valid message is received
void RHGenericDriver::waitAvailable()
{
 23f1fc4:	b510      	push	{r4, lr}
 23f1fc6:	4604      	mov	r4, r0
    while (!available())
 23f1fc8:	6823      	ldr	r3, [r4, #0]
 23f1fca:	4620      	mov	r0, r4
 23f1fcc:	685b      	ldr	r3, [r3, #4]
 23f1fce:	4798      	blx	r3
 23f1fd0:	2800      	cmp	r0, #0
 23f1fd2:	d0f9      	beq.n	23f1fc8 <_ZN15RHGenericDriver13waitAvailableEv+0x4>
	YIELD;
}
 23f1fd4:	bd10      	pop	{r4, pc}

023f1fd6 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
 23f1fd6:	7903      	ldrb	r3, [r0, #4]
 23f1fd8:	2b03      	cmp	r3, #3
 23f1fda:	d0fc      	beq.n	23f1fd6 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
 23f1fdc:	2001      	movs	r0, #1
 23f1fde:	4770      	bx	lr

023f1fe0 <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
 23f1fe0:	2000      	movs	r0, #0
 23f1fe2:	4770      	bx	lr

023f1fe4 <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
 23f1fe4:	7181      	strb	r1, [r0, #6]
}
 23f1fe6:	4770      	bx	lr

023f1fe8 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
 23f1fe8:	7141      	strb	r1, [r0, #5]
}
 23f1fea:	4770      	bx	lr

023f1fec <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
 23f1fec:	72c1      	strb	r1, [r0, #11]
}
 23f1fee:	4770      	bx	lr

023f1ff0 <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
 23f1ff0:	7301      	strb	r1, [r0, #12]
}
 23f1ff2:	4770      	bx	lr

023f1ff4 <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
 23f1ff4:	7341      	strb	r1, [r0, #13]
}
 23f1ff6:	4770      	bx	lr

023f1ff8 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
 23f1ff8:	7b83      	ldrb	r3, [r0, #14]
 23f1ffa:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
 23f1ffe:	4311      	orrs	r1, r2
 23f2000:	7381      	strb	r1, [r0, #14]
}
 23f2002:	4770      	bx	lr

023f2004 <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
 23f2004:	79c0      	ldrb	r0, [r0, #7]
}
 23f2006:	4770      	bx	lr

023f2008 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
 23f2008:	7a00      	ldrb	r0, [r0, #8]
}
 23f200a:	4770      	bx	lr

023f200c <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
 23f200c:	7a40      	ldrb	r0, [r0, #9]
}
 23f200e:	4770      	bx	lr

023f2010 <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
 23f2010:	7a80      	ldrb	r0, [r0, #10]
}
 23f2012:	4770      	bx	lr

023f2014 <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
 23f2014:	8a00      	ldrh	r0, [r0, #16]
}
 23f2016:	b200      	sxth	r0, r0
 23f2018:	4770      	bx	lr

023f201a <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
 23f201a:	7900      	ldrb	r0, [r0, #4]
}
 23f201c:	4770      	bx	lr

023f201e <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
 23f201e:	7101      	strb	r1, [r0, #4]
}
 23f2020:	4770      	bx	lr

023f2022 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
 23f2022:	8a40      	ldrh	r0, [r0, #18]
}
 23f2024:	b280      	uxth	r0, r0
 23f2026:	4770      	bx	lr

023f2028 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
 23f2028:	8a80      	ldrh	r0, [r0, #20]
}
 23f202a:	b280      	uxth	r0, r0
 23f202c:	4770      	bx	lr

023f202e <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
 23f202e:	8ac0      	ldrh	r0, [r0, #22]
}
 23f2030:	b280      	uxth	r0, r0
 23f2032:	4770      	bx	lr

023f2034 <_ZN15RHGenericDriver20waitAvailableTimeoutEt>:
{
 23f2034:	b570      	push	{r4, r5, r6, lr}
 23f2036:	4604      	mov	r4, r0
 23f2038:	460e      	mov	r6, r1
 23f203a:	f004 fba1 	bl	23f6780 <HAL_Timer_Get_Milli_Seconds>
 23f203e:	4605      	mov	r5, r0
 23f2040:	f004 fb9e 	bl	23f6780 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
 23f2044:	1b40      	subs	r0, r0, r5
 23f2046:	42b0      	cmp	r0, r6
 23f2048:	d206      	bcs.n	23f2058 <_ZN15RHGenericDriver20waitAvailableTimeoutEt+0x24>
        if (available())
 23f204a:	6823      	ldr	r3, [r4, #0]
 23f204c:	4620      	mov	r0, r4
 23f204e:	685b      	ldr	r3, [r3, #4]
 23f2050:	4798      	blx	r3
 23f2052:	2800      	cmp	r0, #0
 23f2054:	d0f4      	beq.n	23f2040 <_ZN15RHGenericDriver20waitAvailableTimeoutEt+0xc>
}
 23f2056:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 23f2058:	2000      	movs	r0, #0
 23f205a:	e7fc      	b.n	23f2056 <_ZN15RHGenericDriver20waitAvailableTimeoutEt+0x22>

023f205c <_ZN15RHGenericDriver14waitPacketSentEt>:
{
 23f205c:	b570      	push	{r4, r5, r6, lr}
 23f205e:	4604      	mov	r4, r0
 23f2060:	460e      	mov	r6, r1
 23f2062:	f004 fb8d 	bl	23f6780 <HAL_Timer_Get_Milli_Seconds>
 23f2066:	4605      	mov	r5, r0
 23f2068:	f004 fb8a 	bl	23f6780 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
 23f206c:	1b40      	subs	r0, r0, r5
 23f206e:	42b0      	cmp	r0, r6
 23f2070:	d204      	bcs.n	23f207c <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
 23f2072:	7923      	ldrb	r3, [r4, #4]
 23f2074:	2b03      	cmp	r3, #3
 23f2076:	d0f7      	beq.n	23f2068 <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
 23f2078:	2001      	movs	r0, #1
}
 23f207a:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 23f207c:	2000      	movs	r0, #0
 23f207e:	e7fc      	b.n	23f207a <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

023f2080 <_ZN15RHGenericDriver7waitCADEv>:
{
 23f2080:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
 23f2082:	69c3      	ldr	r3, [r0, #28]
{
 23f2084:	4604      	mov	r4, r0
    if (!_cad_timeout)
 23f2086:	b1b3      	cbz	r3, 23f20b6 <_ZN15RHGenericDriver7waitCADEv+0x36>
 23f2088:	f004 fb7a 	bl	23f6780 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
 23f208c:	2664      	movs	r6, #100	; 0x64
 23f208e:	4605      	mov	r5, r0
    while (isChannelActive())
 23f2090:	6823      	ldr	r3, [r4, #0]
 23f2092:	4620      	mov	r0, r4
 23f2094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f2096:	4798      	blx	r3
 23f2098:	b168      	cbz	r0, 23f20b6 <_ZN15RHGenericDriver7waitCADEv+0x36>
 23f209a:	f004 fb71 	bl	23f6780 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
 23f209e:	69e3      	ldr	r3, [r4, #28]
 23f20a0:	1b40      	subs	r0, r0, r5
 23f20a2:	4298      	cmp	r0, r3
 23f20a4:	d809      	bhi.n	23f20ba <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
 23f20a6:	210a      	movs	r1, #10
 23f20a8:	2001      	movs	r0, #1
 23f20aa:	f006 fd7a 	bl	23f8ba2 <_Z6randomii>
 23f20ae:	4370      	muls	r0, r6
 23f20b0:	f005 faba 	bl	23f7628 <delay>
    while (isChannelActive())
 23f20b4:	e7ec      	b.n	23f2090 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
 23f20b6:	2001      	movs	r0, #1
}
 23f20b8:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
 23f20ba:	2000      	movs	r0, #0
 23f20bc:	e7fc      	b.n	23f20b8 <_ZN15RHGenericDriver7waitCADEv+0x38>
	...

023f20c0 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
 23f20c0:	4a06      	ldr	r2, [pc, #24]	; (23f20dc <_ZN15RHGenericDriverC1Ev+0x1c>)
 23f20c2:	21ff      	movs	r1, #255	; 0xff
 23f20c4:	6002      	str	r2, [r0, #0]
 23f20c6:	2200      	movs	r2, #0
 23f20c8:	7141      	strb	r1, [r0, #5]
 23f20ca:	7102      	strb	r2, [r0, #4]
 23f20cc:	72c1      	strb	r1, [r0, #11]
 23f20ce:	8242      	strh	r2, [r0, #18]
 23f20d0:	8181      	strh	r1, [r0, #12]
 23f20d2:	8282      	strh	r2, [r0, #20]
 23f20d4:	7382      	strb	r2, [r0, #14]
 23f20d6:	82c2      	strh	r2, [r0, #22]
 23f20d8:	61c2      	str	r2, [r0, #28]
}
 23f20da:	4770      	bx	lr
 23f20dc:	023ff4ac 	.word	0x023ff4ac

023f20e0 <_ZN12RHGenericSPI15attachInterruptEv>:
    virtual uint8_t transfer(uint8_t data) = 0;

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
 23f20e0:	4770      	bx	lr

023f20e2 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
 23f20e2:	4770      	bx	lr

023f20e4 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
 23f20e4:	4770      	bx	lr

023f20e6 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
 23f20e6:	4770      	bx	lr

023f20e8 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Tells the SPI support software that SPI transactions will occur with the interrupt
    /// handler assocated with interruptNumber
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){}
 23f20e8:	4770      	bx	lr

023f20ea <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
 23f20ea:	7141      	strb	r1, [r0, #5]
}
 23f20ec:	4770      	bx	lr

023f20ee <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
 23f20ee:	7181      	strb	r1, [r0, #6]
}
 23f20f0:	4770      	bx	lr

023f20f2 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
 23f20f2:	7101      	strb	r1, [r0, #4]
}
 23f20f4:	4770      	bx	lr
	...

023f20f8 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
 23f20f8:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
 23f20fa:	4d03      	ldr	r5, [pc, #12]	; (23f2108 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
 23f20fc:	7101      	strb	r1, [r0, #4]
 23f20fe:	6005      	str	r5, [r0, #0]
 23f2100:	7142      	strb	r2, [r0, #5]
 23f2102:	7183      	strb	r3, [r0, #6]
}
 23f2104:	bd30      	pop	{r4, r5, pc}
 23f2106:	bf00      	nop
 23f2108:	023ff524 	.word	0x023ff524

023f210c <_ZN13RHHardwareSPI14usingInterruptEh>:
void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
#if defined(SPI_HAS_TRANSACTION)

#endif
}
 23f210c:	4770      	bx	lr
	...

023f2110 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
 23f2110:	b510      	push	{r4, lr}
 23f2112:	4604      	mov	r4, r0
    RHGenericSPI(frequency, bitOrder, dataMode)
 23f2114:	f7ff fff0 	bl	23f20f8 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
 23f2118:	4b05      	ldr	r3, [pc, #20]	; (23f2130 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
}
 23f211a:	4620      	mov	r0, r4
    RHGenericSPI(frequency, bitOrder, dataMode)
 23f211c:	6023      	str	r3, [r4, #0]
 23f211e:	4b05      	ldr	r3, [pc, #20]	; (23f2134 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
 23f2120:	60a3      	str	r3, [r4, #8]
 23f2122:	2301      	movs	r3, #1
 23f2124:	7323      	strb	r3, [r4, #12]
 23f2126:	2300      	movs	r3, #0
 23f2128:	6123      	str	r3, [r4, #16]
 23f212a:	82a3      	strh	r3, [r4, #20]
}
 23f212c:	bd10      	pop	{r4, pc}
 23f212e:	bf00      	nop
 23f2130:	023ff558 	.word	0x023ff558
 23f2134:	023fe76c 	.word	0x023fe76c

023f2138 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>:
    static SPIClass& instance() {
 23f2138:	b510      	push	{r4, lr}
        static SPIClass instance(Interface);
 23f213a:	4c09      	ldr	r4, [pc, #36]	; (23f2160 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x28>)
 23f213c:	e8d4 3f8f 	ldab	r3, [r4]
 23f2140:	07db      	lsls	r3, r3, #31
 23f2142:	d40a      	bmi.n	23f215a <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x22>
 23f2144:	4620      	mov	r0, r4
 23f2146:	f005 fa53 	bl	23f75f0 <__cxa_guard_acquire>
 23f214a:	b130      	cbz	r0, 23f215a <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x22>
 23f214c:	2101      	movs	r1, #1
 23f214e:	4805      	ldr	r0, [pc, #20]	; (23f2164 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x2c>)
 23f2150:	f006 fd3e 	bl	23f8bd0 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23f2154:	4620      	mov	r0, r4
 23f2156:	f005 fa59 	bl	23f760c <__cxa_guard_release>
        return instance;
    }
 23f215a:	4802      	ldr	r0, [pc, #8]	; (23f2164 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x2c>)
 23f215c:	bd10      	pop	{r4, pc}
 23f215e:	bf00      	nop
 23f2160:	1007ae64 	.word	0x1007ae64
 23f2164:	1007ae68 	.word	0x1007ae68

023f2168 <_ZN13RHHardwareSPI8transferEh>:
{
 23f2168:	b507      	push	{r0, r1, r2, lr}
 23f216a:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 23f216c:	f7ff ffe4 	bl	23f2138 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
 23f2170:	9901      	ldr	r1, [sp, #4]
}
 23f2172:	b003      	add	sp, #12
 23f2174:	f85d eb04 	ldr.w	lr, [sp], #4
 23f2178:	f006 bdf6 	b.w	23f8d68 <_ZN8SPIClass8transferEh>

023f217c <_ZN13RHHardwareSPI15attachInterruptEv>:
{
 23f217c:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
 23f217e:	f7ff ffdb 	bl	23f2138 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
 23f2182:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 23f2186:	f006 be08 	b.w	23f8d9a <_ZN8SPIClass15attachInterruptEv>

023f218a <_ZN13RHHardwareSPI15detachInterruptEv>:
{
 23f218a:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
 23f218c:	f7ff ffd4 	bl	23f2138 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
 23f2190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 23f2194:	f006 be02 	b.w	23f8d9c <_ZN8SPIClass15detachInterruptEv>

023f2198 <_ZN13RHHardwareSPI5beginEv>:
{
 23f2198:	b510      	push	{r4, lr}
   if (_frequency == Frequency16MHz)
 23f219a:	7903      	ldrb	r3, [r0, #4]
 23f219c:	2b04      	cmp	r3, #4
 23f219e:	d021      	beq.n	23f21e4 <_ZN13RHHardwareSPI5beginEv+0x4c>
   else if (_frequency == Frequency8MHz)
 23f21a0:	2b03      	cmp	r3, #3
 23f21a2:	d021      	beq.n	23f21e8 <_ZN13RHHardwareSPI5beginEv+0x50>
   else if (_frequency == Frequency4MHz)
 23f21a4:	2b02      	cmp	r3, #2
 23f21a6:	d021      	beq.n	23f21ec <_ZN13RHHardwareSPI5beginEv+0x54>
       frequency = 1000000;
 23f21a8:	4a11      	ldr	r2, [pc, #68]	; (23f21f0 <_ZN13RHHardwareSPI5beginEv+0x58>)
 23f21aa:	4912      	ldr	r1, [pc, #72]	; (23f21f4 <_ZN13RHHardwareSPI5beginEv+0x5c>)
 23f21ac:	2b01      	cmp	r3, #1
 23f21ae:	bf18      	it	ne
 23f21b0:	460a      	movne	r2, r1
   if (_bitOrder == BitOrderLSBFirst)
 23f21b2:	7941      	ldrb	r1, [r0, #5]
    if (_dataMode == DataMode0)
 23f21b4:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
 23f21b6:	3901      	subs	r1, #1
 23f21b8:	bf18      	it	ne
 23f21ba:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
 23f21bc:	b133      	cbz	r3, 23f21cc <_ZN13RHHardwareSPI5beginEv+0x34>
    else if (_dataMode == DataMode1)
 23f21be:	2b01      	cmp	r3, #1
 23f21c0:	d004      	beq.n	23f21cc <_ZN13RHHardwareSPI5beginEv+0x34>
    else if (_dataMode == DataMode2)
 23f21c2:	2b02      	cmp	r3, #2
 23f21c4:	d002      	beq.n	23f21cc <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
 23f21c6:	2b03      	cmp	r3, #3
 23f21c8:	bf18      	it	ne
 23f21ca:	2300      	movne	r3, #0
class SPISettings : public Printable {
 23f21cc:	2400      	movs	r4, #0
 23f21ce:	7501      	strb	r1, [r0, #20]
 23f21d0:	7304      	strb	r4, [r0, #12]
 23f21d2:	6102      	str	r2, [r0, #16]
 23f21d4:	7543      	strb	r3, [r0, #21]
        instance().begin(ss_pin);
 23f21d6:	f7ff ffaf 	bl	23f2138 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
 23f21da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f21de:	21ff      	movs	r1, #255	; 0xff
 23f21e0:	f006 bd14 	b.w	23f8c0c <_ZN8SPIClass5beginEt>
       frequency = 16000000;
 23f21e4:	4a04      	ldr	r2, [pc, #16]	; (23f21f8 <_ZN13RHHardwareSPI5beginEv+0x60>)
 23f21e6:	e7e4      	b.n	23f21b2 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
 23f21e8:	4a04      	ldr	r2, [pc, #16]	; (23f21fc <_ZN13RHHardwareSPI5beginEv+0x64>)
 23f21ea:	e7e2      	b.n	23f21b2 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
 23f21ec:	4a04      	ldr	r2, [pc, #16]	; (23f2200 <_ZN13RHHardwareSPI5beginEv+0x68>)
 23f21ee:	e7e0      	b.n	23f21b2 <_ZN13RHHardwareSPI5beginEv+0x1a>
 23f21f0:	001e8480 	.word	0x001e8480
 23f21f4:	000f4240 	.word	0x000f4240
 23f21f8:	00f42400 	.word	0x00f42400
 23f21fc:	007a1200 	.word	0x007a1200
 23f2200:	003d0900 	.word	0x003d0900

023f2204 <_ZN13RHHardwareSPI3endEv>:
{
 23f2204:	b508      	push	{r3, lr}
        instance().end();
 23f2206:	f7ff ff97 	bl	23f2138 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
 23f220a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 23f220e:	f006 bd11 	b.w	23f8c34 <_ZN8SPIClass3endEv>

023f2212 <_ZN13RHHardwareSPI16beginTransactionEv>:
{
 23f2212:	b510      	push	{r4, lr}
 23f2214:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
 23f2216:	f7ff ff8f 	bl	23f2138 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
 23f221a:	f104 0108 	add.w	r1, r4, #8
}
 23f221e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f2222:	f006 bd33 	b.w	23f8c8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

023f2226 <_ZN13RHHardwareSPI14endTransactionEv>:
{
 23f2226:	b508      	push	{r3, lr}
        instance().endTransaction();
 23f2228:	f7ff ff86 	bl	23f2138 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
 23f222c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 23f2230:	f006 bd12 	b.w	23f8c58 <_ZN8SPIClass14endTransactionEv>

023f2234 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
 23f2234:	2300      	movs	r3, #0
 23f2236:	4802      	ldr	r0, [pc, #8]	; (23f2240 <_GLOBAL__sub_I_hardware_spi+0xc>)
 23f2238:	461a      	mov	r2, r3
 23f223a:	4619      	mov	r1, r3
 23f223c:	f7ff bf68 	b.w	23f2110 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
 23f2240:	1007ae70 	.word	0x1007ae70

023f2244 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
 23f2244:	b510      	push	{r4, lr}
 23f2246:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
 23f2248:	6a00      	ldr	r0, [r0, #32]
 23f224a:	6803      	ldr	r3, [r0, #0]
 23f224c:	68db      	ldr	r3, [r3, #12]
 23f224e:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin
    pinMode(_slaveSelectPin, OUTPUT);
 23f2250:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f2254:	2101      	movs	r1, #1
 23f2256:	f007 fbf1 	bl	23f9a3c <pinMode>
    digitalWrite(_slaveSelectPin, HIGH);
 23f225a:	2101      	movs	r1, #1
 23f225c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f2260:	f007 fbfd 	bl	23f9a5e <digitalWrite>

    delay(100);
 23f2264:	2064      	movs	r0, #100	; 0x64
 23f2266:	f005 f9df 	bl	23f7628 <delay>
    return true;
}
 23f226a:	2001      	movs	r0, #1
 23f226c:	bd10      	pop	{r4, pc}
	...

023f2270 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
 23f2270:	b570      	push	{r4, r5, r6, lr}
 23f2272:	4604      	mov	r4, r0
 23f2274:	460d      	mov	r5, r1
 23f2276:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
 23f2278:	f7ff ff22 	bl	23f20c0 <_ZN15RHGenericDriverC1Ev>
 23f227c:	4b03      	ldr	r3, [pc, #12]	; (23f228c <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
}
 23f227e:	4620      	mov	r0, r4
    _slaveSelectPin(slaveSelectPin)
 23f2280:	6023      	str	r3, [r4, #0]
 23f2282:	6226      	str	r6, [r4, #32]
 23f2284:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
 23f2288:	bd70      	pop	{r4, r5, r6, pc}
 23f228a:	bf00      	nop
 23f228c:	023ff58c 	.word	0x023ff58c

023f2290 <_ZN11RHSPIDriver7spiReadEh>:

uint8_t RHSPIDriver::spiRead(uint8_t reg)
{
 23f2290:	b538      	push	{r3, r4, r5, lr}
 23f2292:	4604      	mov	r4, r0
 23f2294:	460d      	mov	r5, r1
    uint8_t val;
    ATOMIC_BLOCK_START;
    digitalWrite(_slaveSelectPin, LOW);
 23f2296:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 23f229a:	2100      	movs	r1, #0
 23f229c:	f007 fbdf 	bl	23f9a5e <digitalWrite>
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
 23f22a0:	6a20      	ldr	r0, [r4, #32]
 23f22a2:	f005 017f 	and.w	r1, r5, #127	; 0x7f
 23f22a6:	6803      	ldr	r3, [r0, #0]
 23f22a8:	681b      	ldr	r3, [r3, #0]
 23f22aa:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
 23f22ac:	6a20      	ldr	r0, [r4, #32]
 23f22ae:	2100      	movs	r1, #0
 23f22b0:	6803      	ldr	r3, [r0, #0]
 23f22b2:	681b      	ldr	r3, [r3, #0]
 23f22b4:	4798      	blx	r3
 23f22b6:	4605      	mov	r5, r0
    digitalWrite(_slaveSelectPin, HIGH);
 23f22b8:	2101      	movs	r1, #1
 23f22ba:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f22be:	f007 fbce 	bl	23f9a5e <digitalWrite>
    ATOMIC_BLOCK_END;
    return val;
}
 23f22c2:	4628      	mov	r0, r5
 23f22c4:	bd38      	pop	{r3, r4, r5, pc}

023f22c6 <_ZN11RHSPIDriver8spiWriteEhh>:

uint8_t RHSPIDriver::spiWrite(uint8_t reg, uint8_t val)
{
 23f22c6:	b570      	push	{r4, r5, r6, lr}
 23f22c8:	4604      	mov	r4, r0
 23f22ca:	460d      	mov	r5, r1
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
    _spi.beginTransaction();
 23f22cc:	6a00      	ldr	r0, [r0, #32]
{
 23f22ce:	4616      	mov	r6, r2
    _spi.beginTransaction();
 23f22d0:	6803      	ldr	r3, [r0, #0]
 23f22d2:	6a1b      	ldr	r3, [r3, #32]
 23f22d4:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, LOW);
 23f22d6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f22da:	2100      	movs	r1, #0
 23f22dc:	f007 fbbf 	bl	23f9a5e <digitalWrite>
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
 23f22e0:	6a20      	ldr	r0, [r4, #32]
 23f22e2:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23f22e6:	6803      	ldr	r3, [r0, #0]
 23f22e8:	681b      	ldr	r3, [r3, #0]
 23f22ea:	4798      	blx	r3
 23f22ec:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
 23f22ee:	6a20      	ldr	r0, [r4, #32]
 23f22f0:	4631      	mov	r1, r6
 23f22f2:	6803      	ldr	r3, [r0, #0]
 23f22f4:	681b      	ldr	r3, [r3, #0]
 23f22f6:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, HIGH);
 23f22f8:	2101      	movs	r1, #1
 23f22fa:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f22fe:	f007 fbae 	bl	23f9a5e <digitalWrite>
    _spi.endTransaction();
 23f2302:	6a20      	ldr	r0, [r4, #32]
 23f2304:	6803      	ldr	r3, [r0, #0]
 23f2306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f2308:	4798      	blx	r3
    ATOMIC_BLOCK_END;
    return status;
}
 23f230a:	4628      	mov	r0, r5
 23f230c:	bd70      	pop	{r4, r5, r6, pc}

023f230e <_ZN11RHSPIDriver12spiBurstReadEhPhh>:

uint8_t RHSPIDriver::spiBurstRead(uint8_t reg, uint8_t* dest, uint8_t len)
{
 23f230e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f2310:	4604      	mov	r4, r0
 23f2312:	460f      	mov	r7, r1
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
    _spi.beginTransaction();
 23f2314:	6a00      	ldr	r0, [r0, #32]
{
 23f2316:	461e      	mov	r6, r3
    _spi.beginTransaction();
 23f2318:	6803      	ldr	r3, [r0, #0]
{
 23f231a:	4615      	mov	r5, r2
    _spi.beginTransaction();
 23f231c:	6a1b      	ldr	r3, [r3, #32]
 23f231e:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, LOW);
 23f2320:	2100      	movs	r1, #0
 23f2322:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f2326:	f007 fb9a 	bl	23f9a5e <digitalWrite>
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
 23f232a:	6a20      	ldr	r0, [r4, #32]
 23f232c:	f007 017f 	and.w	r1, r7, #127	; 0x7f
 23f2330:	6803      	ldr	r3, [r0, #0]
 23f2332:	442e      	add	r6, r5
 23f2334:	681b      	ldr	r3, [r3, #0]
 23f2336:	4798      	blx	r3
 23f2338:	4607      	mov	r7, r0
    while (len--)
 23f233a:	42b5      	cmp	r5, r6
 23f233c:	d007      	beq.n	23f234e <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x40>
	*dest++ = _spi.transfer(0);
 23f233e:	6a20      	ldr	r0, [r4, #32]
 23f2340:	2100      	movs	r1, #0
 23f2342:	6803      	ldr	r3, [r0, #0]
 23f2344:	681b      	ldr	r3, [r3, #0]
 23f2346:	4798      	blx	r3
 23f2348:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
 23f234c:	e7f5      	b.n	23f233a <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2c>
    digitalWrite(_slaveSelectPin, HIGH);
 23f234e:	2101      	movs	r1, #1
 23f2350:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f2354:	f007 fb83 	bl	23f9a5e <digitalWrite>
    _spi.endTransaction();
 23f2358:	6a20      	ldr	r0, [r4, #32]
 23f235a:	6803      	ldr	r3, [r0, #0]
 23f235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f235e:	4798      	blx	r3
    ATOMIC_BLOCK_END;
    return status;
}
 23f2360:	4638      	mov	r0, r7
 23f2362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f2364 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:

uint8_t RHSPIDriver::spiBurstWrite(uint8_t reg, const uint8_t* src, uint8_t len)
{
 23f2364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f2366:	4604      	mov	r4, r0
 23f2368:	460f      	mov	r7, r1
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
    _spi.beginTransaction();
 23f236a:	6a00      	ldr	r0, [r0, #32]
{
 23f236c:	461e      	mov	r6, r3
    _spi.beginTransaction();
 23f236e:	6803      	ldr	r3, [r0, #0]
{
 23f2370:	4615      	mov	r5, r2
    _spi.beginTransaction();
 23f2372:	6a1b      	ldr	r3, [r3, #32]
 23f2374:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, LOW);
 23f2376:	2100      	movs	r1, #0
 23f2378:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f237c:	f007 fb6f 	bl	23f9a5e <digitalWrite>
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
 23f2380:	6a20      	ldr	r0, [r4, #32]
 23f2382:	f047 0180 	orr.w	r1, r7, #128	; 0x80
 23f2386:	6803      	ldr	r3, [r0, #0]
 23f2388:	442e      	add	r6, r5
 23f238a:	681b      	ldr	r3, [r3, #0]
 23f238c:	4798      	blx	r3
 23f238e:	4607      	mov	r7, r0
    while (len--)
 23f2390:	42b5      	cmp	r5, r6
 23f2392:	d006      	beq.n	23f23a2 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3e>
	_spi.transfer(*src++);
 23f2394:	6a20      	ldr	r0, [r4, #32]
 23f2396:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f239a:	6803      	ldr	r3, [r0, #0]
 23f239c:	681b      	ldr	r3, [r3, #0]
 23f239e:	4798      	blx	r3
    while (len--)
 23f23a0:	e7f6      	b.n	23f2390 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2c>
    digitalWrite(_slaveSelectPin, HIGH);
 23f23a2:	2101      	movs	r1, #1
 23f23a4:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 23f23a8:	f007 fb59 	bl	23f9a5e <digitalWrite>
    _spi.endTransaction();
 23f23ac:	6a20      	ldr	r0, [r4, #32]
 23f23ae:	6803      	ldr	r3, [r0, #0]
 23f23b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f23b2:	4798      	blx	r3
    ATOMIC_BLOCK_END;
    return status;
}
 23f23b4:	4638      	mov	r0, r7
 23f23b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f23b8 <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _slaveSelectPin = slaveSelectPin;
}

void RHSPIDriver::spiUsingInterrupt(uint8_t interruptNumber)
{
    _spi.usingInterrupt(interruptNumber);
 23f23b8:	6a00      	ldr	r0, [r0, #32]
 23f23ba:	6803      	ldr	r3, [r0, #0]
 23f23bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f23be:	4718      	bx	r3

023f23c0 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
 23f23c0:	20fb      	movs	r0, #251	; 0xfb
 23f23c2:	4770      	bx	lr

023f23c4 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
 23f23c4:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
 23f23c6:	7903      	ldrb	r3, [r0, #4]
{
 23f23c8:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
 23f23ca:	2b05      	cmp	r3, #5
 23f23cc:	d00a      	beq.n	23f23e4 <_ZN7RH_RF9515isChannelActiveEv+0x20>
    {
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
 23f23ce:	2207      	movs	r2, #7
 23f23d0:	2101      	movs	r1, #1
 23f23d2:	f7ff ff78 	bl	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
 23f23d6:	2280      	movs	r2, #128	; 0x80
 23f23d8:	2140      	movs	r1, #64	; 0x40
 23f23da:	4620      	mov	r0, r4
 23f23dc:	f7ff ff73 	bl	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
 23f23e0:	2305      	movs	r3, #5
 23f23e2:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
 23f23e4:	7923      	ldrb	r3, [r4, #4]
 23f23e6:	2b05      	cmp	r3, #5
 23f23e8:	d0fc      	beq.n	23f23e4 <_ZN7RH_RF9515isChannelActiveEv+0x20>
        YIELD;

    return _cad;
 23f23ea:	7e20      	ldrb	r0, [r4, #24]
}
 23f23ec:	bd10      	pop	{r4, pc}

023f23ee <_ZN7RH_RF955sleepEv>:
{
 23f23ee:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
 23f23f0:	7903      	ldrb	r3, [r0, #4]
{
 23f23f2:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
 23f23f4:	2b01      	cmp	r3, #1
 23f23f6:	d005      	beq.n	23f2404 <_ZN7RH_RF955sleepEv+0x16>
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
 23f23f8:	2200      	movs	r2, #0
 23f23fa:	2101      	movs	r1, #1
 23f23fc:	f7ff ff63 	bl	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
 23f2400:	2301      	movs	r3, #1
 23f2402:	7123      	strb	r3, [r4, #4]
}
 23f2404:	2001      	movs	r0, #1
 23f2406:	bd10      	pop	{r4, pc}

023f2408 <_ZN7RH_RF954recvEPhS0_>:
{
 23f2408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
 23f240a:	6803      	ldr	r3, [r0, #0]
{
 23f240c:	4604      	mov	r4, r0
    if (!available())
 23f240e:	685b      	ldr	r3, [r3, #4]
{
 23f2410:	460f      	mov	r7, r1
 23f2412:	4615      	mov	r5, r2
    if (!available())
 23f2414:	4798      	blx	r3
 23f2416:	4606      	mov	r6, r0
 23f2418:	b1b8      	cbz	r0, 23f244a <_ZN7RH_RF954recvEPhS0_+0x42>
    if (buf && len)
 23f241a:	b18f      	cbz	r7, 23f2440 <_ZN7RH_RF954recvEPhS0_+0x38>
 23f241c:	b185      	cbz	r5, 23f2440 <_ZN7RH_RF954recvEPhS0_+0x38>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
 23f241e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 23f2422:	782a      	ldrb	r2, [r5, #0]
 23f2424:	3b03      	subs	r3, #3
 23f2426:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
 23f2428:	bfd8      	it	le
 23f242a:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
 23f242e:	4638      	mov	r0, r7
	    *len = _bufLen-RH_RF95_HEADER_LEN;
 23f2430:	bfdc      	itt	le
 23f2432:	3b04      	suble	r3, #4
 23f2434:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
 23f2436:	782a      	ldrb	r2, [r5, #0]
 23f2438:	f104 012d 	add.w	r1, r4, #45	; 0x2d
 23f243c:	f00a f952 	bl	23fc6e4 <memcpy>
    _rxBufValid = false;
 23f2440:	2300      	movs	r3, #0
 23f2442:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
 23f2446:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 23f244a:	4630      	mov	r0, r6
 23f244c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f244e <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 23)
 23f244e:	2917      	cmp	r1, #23
void RH_RF95::setTxPower(int8_t power, bool useRFO)
 23f2450:	b538      	push	{r3, r4, r5, lr}
 23f2452:	4605      	mov	r5, r0
 23f2454:	460c      	mov	r4, r1
	if (power > 23)
 23f2456:	dc14      	bgt.n	23f2482 <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 5)
 23f2458:	2904      	cmp	r1, #4
 23f245a:	dd14      	ble.n	23f2486 <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 20)
 23f245c:	2914      	cmp	r1, #20
 23f245e:	dd13      	ble.n	23f2488 <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
 23f2460:	2207      	movs	r2, #7
 23f2462:	214d      	movs	r1, #77	; 0x4d
 23f2464:	4628      	mov	r0, r5
 23f2466:	f7ff ff2e 	bl	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
 23f246a:	3c03      	subs	r4, #3
 23f246c:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
 23f246e:	1f62      	subs	r2, r4, #5
 23f2470:	f062 027f 	orn	r2, r2, #127	; 0x7f
 23f2474:	4628      	mov	r0, r5
}
 23f2476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
 23f247a:	2109      	movs	r1, #9
 23f247c:	b2d2      	uxtb	r2, r2
 23f247e:	f7ff bf22 	b.w	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 23;
 23f2482:	2417      	movs	r4, #23
 23f2484:	e7ec      	b.n	23f2460 <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 5;
 23f2486:	2405      	movs	r4, #5
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
 23f2488:	2204      	movs	r2, #4
 23f248a:	214d      	movs	r1, #77	; 0x4d
 23f248c:	4628      	mov	r0, r5
 23f248e:	f7ff ff1a 	bl	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
 23f2492:	e7ec      	b.n	23f246e <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>

023f2494 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
 23f2494:	b538      	push	{r3, r4, r5, lr}
 23f2496:	4604      	mov	r4, r0
 23f2498:	4615      	mov	r5, r2
    _rxBufValid(0)
 23f249a:	461a      	mov	r2, r3
 23f249c:	f7ff fee8 	bl	23f2270 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
 23f24a0:	4b05      	ldr	r3, [pc, #20]	; (23f24b8 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x24>)
}
 23f24a2:	4620      	mov	r0, r4
    _rxBufValid(0)
 23f24a4:	6023      	str	r3, [r4, #0]
 23f24a6:	2300      	movs	r3, #0
 23f24a8:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _myInterruptIndex = 0xff; // Not allocated yet
 23f24ac:	23ff      	movs	r3, #255	; 0xff
    _interruptPin = interruptPin;
 23f24ae:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _myInterruptIndex = 0xff; // Not allocated yet
 23f24b2:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
}
 23f24b6:	bd38      	pop	{r3, r4, r5, pc}
 23f24b8:	023ff610 	.word	0x023ff610

023f24bc <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
 23f24bc:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 23f24c0:	2b03      	cmp	r3, #3
 23f24c2:	d91b      	bls.n	23f24fc <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
 23f24c4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 23f24c8:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
 23f24ca:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 23f24ce:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
 23f24d0:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 23f24d4:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
 23f24d6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 23f24da:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
 23f24dc:	7983      	ldrb	r3, [r0, #6]
 23f24de:	b933      	cbnz	r3, 23f24ee <_ZN7RH_RF9513validateRxBufEv+0x32>
 23f24e0:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
 23f24e2:	7942      	ldrb	r2, [r0, #5]
 23f24e4:	429a      	cmp	r2, r3
 23f24e6:	d002      	beq.n	23f24ee <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
 23f24e8:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
 23f24ea:	2bff      	cmp	r3, #255	; 0xff
 23f24ec:	d106      	bne.n	23f24fc <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
 23f24ee:	8a83      	ldrh	r3, [r0, #20]
 23f24f0:	3301      	adds	r3, #1
 23f24f2:	b29b      	uxth	r3, r3
 23f24f4:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
 23f24f6:	2301      	movs	r3, #1
 23f24f8:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
 23f24fc:	4770      	bx	lr
	...

023f2500 <_ZN7RH_RF9512setFrequencyEf>:
{
 23f2500:	b538      	push	{r3, r4, r5, lr}
 23f2502:	4604      	mov	r4, r0
 23f2504:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
 23f2508:	ee10 0a10 	vmov	r0, s0
{
 23f250c:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
 23f2510:	f7f1 f8ca 	bl	23e36a8 <__aeabi_f2d>
 23f2514:	a317      	add	r3, pc, #92	; (adr r3, 23f2574 <_ZN7RH_RF9512setFrequencyEf+0x74>)
 23f2516:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f251a:	f7f1 f91d 	bl	23e3758 <__aeabi_dmul>
 23f251e:	a317      	add	r3, pc, #92	; (adr r3, 23f257c <_ZN7RH_RF9512setFrequencyEf+0x7c>)
 23f2520:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f2524:	f7f1 fa42 	bl	23e39ac <__aeabi_ddiv>
 23f2528:	f7f1 fbee 	bl	23e3d08 <__aeabi_d2uiz>
 23f252c:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
 23f252e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 23f2532:	2106      	movs	r1, #6
 23f2534:	4620      	mov	r0, r4
 23f2536:	f7ff fec6 	bl	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
 23f253a:	2107      	movs	r1, #7
 23f253c:	f3c5 2207 	ubfx	r2, r5, #8, #8
 23f2540:	4620      	mov	r0, r4
 23f2542:	f7ff fec0 	bl	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
 23f2546:	2108      	movs	r1, #8
 23f2548:	4620      	mov	r0, r4
 23f254a:	b2ea      	uxtb	r2, r5
 23f254c:	f7ff febb 	bl	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
 23f2550:	eddf 7a07 	vldr	s15, [pc, #28]	; 23f2570 <_ZN7RH_RF9512setFrequencyEf+0x70>
 23f2554:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
 23f2558:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
 23f255c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f2560:	bfac      	ite	ge
 23f2562:	2301      	movge	r3, #1
 23f2564:	2300      	movlt	r3, #0
}
 23f2566:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
 23f2568:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
 23f256c:	bd38      	pop	{r3, r4, r5, pc}
 23f256e:	bf00      	nop
 23f2570:	4442c000 	.word	0x4442c000
 23f2574:	00000000 	.word	0x00000000
 23f2578:	412e8480 	.word	0x412e8480
 23f257c:	00000000 	.word	0x00000000
 23f2580:	404e8480 	.word	0x404e8480

023f2584 <_ZN7RH_RF9511setModeIdleEv>:
{
 23f2584:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
 23f2586:	7903      	ldrb	r3, [r0, #4]
{
 23f2588:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
 23f258a:	2b02      	cmp	r3, #2
 23f258c:	d005      	beq.n	23f259a <_ZN7RH_RF9511setModeIdleEv+0x16>
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
 23f258e:	2201      	movs	r2, #1
 23f2590:	4611      	mov	r1, r2
 23f2592:	f7ff fe98 	bl	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
 23f2596:	2302      	movs	r3, #2
 23f2598:	7123      	strb	r3, [r4, #4]
}
 23f259a:	bd10      	pop	{r4, pc}

023f259c <_ZN7RH_RF9515handleInterruptEv>:
{
 23f259c:	b538      	push	{r3, r4, r5, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
 23f259e:	2112      	movs	r1, #18
{
 23f25a0:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
 23f25a2:	f7ff fe75 	bl	23f2290 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t crc_present = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
 23f25a6:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
 23f25a8:	4605      	mov	r5, r0
    uint8_t crc_present = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
 23f25aa:	4620      	mov	r0, r4
 23f25ac:	f7ff fe70 	bl	23f2290 <_ZN11RHSPIDriver7spiReadEh>
    if (_mode == RHModeRx
 23f25b0:	7923      	ldrb	r3, [r4, #4]
	&& ((irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
 23f25b2:	2b04      	cmp	r3, #4
 23f25b4:	d117      	bne.n	23f25e6 <_ZN7RH_RF9515handleInterruptEv+0x4a>
	    | !(crc_present & RH_RF95_RX_PAYLOAD_CRC_IS_ON)))
 23f25b6:	f080 0040 	eor.w	r0, r0, #64	; 0x40
 23f25ba:	f3c0 1080 	ubfx	r0, r0, #6, #1
	&& ((irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
 23f25be:	f005 03a0 	and.w	r3, r5, #160	; 0xa0
 23f25c2:	4303      	orrs	r3, r0
 23f25c4:	d00f      	beq.n	23f25e6 <_ZN7RH_RF9515handleInterruptEv+0x4a>
	_rxBad++;
 23f25c6:	8a63      	ldrh	r3, [r4, #18]
 23f25c8:	3301      	adds	r3, #1
 23f25ca:	b29b      	uxth	r3, r3
 23f25cc:	8263      	strh	r3, [r4, #18]
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 23f25ce:	22ff      	movs	r2, #255	; 0xff
 23f25d0:	2112      	movs	r1, #18
 23f25d2:	4620      	mov	r0, r4
 23f25d4:	f7ff fe77 	bl	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 23f25d8:	4620      	mov	r0, r4
}
 23f25da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 23f25de:	22ff      	movs	r2, #255	; 0xff
 23f25e0:	2112      	movs	r1, #18
 23f25e2:	f7ff be70 	b.w	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
 23f25e6:	7923      	ldrb	r3, [r4, #4]
 23f25e8:	2b04      	cmp	r3, #4
 23f25ea:	d101      	bne.n	23f25f0 <_ZN7RH_RF9515handleInterruptEv+0x54>
 23f25ec:	0669      	lsls	r1, r5, #25
 23f25ee:	d40d      	bmi.n	23f260c <_ZN7RH_RF9515handleInterruptEv+0x70>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
 23f25f0:	7923      	ldrb	r3, [r4, #4]
 23f25f2:	2b03      	cmp	r3, #3
 23f25f4:	d101      	bne.n	23f25fa <_ZN7RH_RF9515handleInterruptEv+0x5e>
 23f25f6:	072a      	lsls	r2, r5, #28
 23f25f8:	d459      	bmi.n	23f26ae <_ZN7RH_RF9515handleInterruptEv+0x112>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
 23f25fa:	7923      	ldrb	r3, [r4, #4]
 23f25fc:	2b05      	cmp	r3, #5
 23f25fe:	d1e6      	bne.n	23f25ce <_ZN7RH_RF9515handleInterruptEv+0x32>
 23f2600:	076b      	lsls	r3, r5, #29
 23f2602:	d5e4      	bpl.n	23f25ce <_ZN7RH_RF9515handleInterruptEv+0x32>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
 23f2604:	f005 0501 	and.w	r5, r5, #1
 23f2608:	7625      	strb	r5, [r4, #24]
 23f260a:	e054      	b.n	23f26b6 <_ZN7RH_RF9515handleInterruptEv+0x11a>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
 23f260c:	2113      	movs	r1, #19
 23f260e:	4620      	mov	r0, r4
 23f2610:	f7ff fe3e 	bl	23f2290 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
 23f2614:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
 23f2616:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
 23f2618:	4620      	mov	r0, r4
 23f261a:	f7ff fe39 	bl	23f2290 <_ZN11RHSPIDriver7spiReadEh>
 23f261e:	210d      	movs	r1, #13
 23f2620:	4602      	mov	r2, r0
 23f2622:	4620      	mov	r0, r4
 23f2624:	f7ff fe4f 	bl	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
 23f2628:	462b      	mov	r3, r5
 23f262a:	2100      	movs	r1, #0
 23f262c:	f104 0229 	add.w	r2, r4, #41	; 0x29
 23f2630:	4620      	mov	r0, r4
 23f2632:	f7ff fe6c 	bl	23f230e <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 23f2636:	22ff      	movs	r2, #255	; 0xff
 23f2638:	2112      	movs	r1, #18
 23f263a:	4620      	mov	r0, r4
	_bufLen = len;
 23f263c:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 23f2640:	f7ff fe41 	bl	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
 23f2644:	2119      	movs	r1, #25
 23f2646:	4620      	mov	r0, r4
 23f2648:	f7ff fe22 	bl	23f2290 <_ZN11RHSPIDriver7spiReadEh>
 23f264c:	b240      	sxtb	r0, r0
 23f264e:	2800      	cmp	r0, #0
 23f2650:	bfb8      	it	lt
 23f2652:	3003      	addlt	r0, #3
 23f2654:	1080      	asrs	r0, r0, #2
 23f2656:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
 23f265a:	211a      	movs	r1, #26
 23f265c:	4620      	mov	r0, r4
 23f265e:	f7ff fe17 	bl	23f2290 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
 23f2662:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
 23f2666:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
 23f2668:	2b00      	cmp	r3, #0
	    _lastRssi = (int)_lastRssi * 16 / 15;
 23f266a:	bfa8      	it	ge
 23f266c:	220f      	movge	r2, #15
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
 23f266e:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
 23f2670:	bfa9      	itett	ge
 23f2672:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
 23f2674:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
 23f2676:	b21b      	sxthge	r3, r3
 23f2678:	011b      	lslge	r3, r3, #4
 23f267a:	bfac      	ite	ge
 23f267c:	fb93 f3f2 	sdivge	r3, r3, r2
	    _lastRssi = _lastRssi + _lastSNR;
 23f2680:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
 23f2682:	b21b      	sxth	r3, r3
 23f2684:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
 23f2686:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 23f268a:	b16b      	cbz	r3, 23f26a8 <_ZN7RH_RF9515handleInterruptEv+0x10c>
	    _lastRssi -= 157;
 23f268c:	8a23      	ldrh	r3, [r4, #16]
 23f268e:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
 23f2690:	b21b      	sxth	r3, r3
 23f2692:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
 23f2694:	4620      	mov	r0, r4
 23f2696:	f7ff ff11 	bl	23f24bc <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
 23f269a:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 23f269e:	2b00      	cmp	r3, #0
 23f26a0:	d095      	beq.n	23f25ce <_ZN7RH_RF9515handleInterruptEv+0x32>
        setModeIdle();
 23f26a2:	f7ff ff6f 	bl	23f2584 <_ZN7RH_RF9511setModeIdleEv>
 23f26a6:	e792      	b.n	23f25ce <_ZN7RH_RF9515handleInterruptEv+0x32>
	    _lastRssi -= 164;
 23f26a8:	8a23      	ldrh	r3, [r4, #16]
 23f26aa:	3ba4      	subs	r3, #164	; 0xa4
 23f26ac:	e7f0      	b.n	23f2690 <_ZN7RH_RF9515handleInterruptEv+0xf4>
	_txGood++;
 23f26ae:	8ae3      	ldrh	r3, [r4, #22]
 23f26b0:	3301      	adds	r3, #1
 23f26b2:	b29b      	uxth	r3, r3
 23f26b4:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
 23f26b6:	4620      	mov	r0, r4
 23f26b8:	e7f3      	b.n	23f26a2 <_ZN7RH_RF9515handleInterruptEv+0x106>
	...

023f26bc <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
 23f26bc:	4b02      	ldr	r3, [pc, #8]	; (23f26c8 <_ZN7RH_RF954isr0Ev+0xc>)
 23f26be:	6818      	ldr	r0, [r3, #0]
 23f26c0:	b108      	cbz	r0, 23f26c6 <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
 23f26c2:	f7ff bf6b 	b.w	23f259c <_ZN7RH_RF9515handleInterruptEv>
}
 23f26c6:	4770      	bx	lr
 23f26c8:	1007ae8c 	.word	0x1007ae8c

023f26cc <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
 23f26cc:	4b02      	ldr	r3, [pc, #8]	; (23f26d8 <_ZN7RH_RF954isr1Ev+0xc>)
 23f26ce:	6858      	ldr	r0, [r3, #4]
 23f26d0:	b108      	cbz	r0, 23f26d6 <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
 23f26d2:	f7ff bf63 	b.w	23f259c <_ZN7RH_RF9515handleInterruptEv>
}
 23f26d6:	4770      	bx	lr
 23f26d8:	1007ae8c 	.word	0x1007ae8c

023f26dc <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
 23f26dc:	4b02      	ldr	r3, [pc, #8]	; (23f26e8 <_ZN7RH_RF954isr2Ev+0xc>)
 23f26de:	6898      	ldr	r0, [r3, #8]
 23f26e0:	b108      	cbz	r0, 23f26e6 <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
 23f26e2:	f7ff bf5b 	b.w	23f259c <_ZN7RH_RF9515handleInterruptEv>
}
 23f26e6:	4770      	bx	lr
 23f26e8:	1007ae8c 	.word	0x1007ae8c

023f26ec <_ZN7RH_RF959setModeRxEv>:
{
 23f26ec:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
 23f26ee:	7903      	ldrb	r3, [r0, #4]
{
 23f26f0:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
 23f26f2:	2b04      	cmp	r3, #4
 23f26f4:	d00a      	beq.n	23f270c <_ZN7RH_RF959setModeRxEv+0x20>
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
 23f26f6:	2205      	movs	r2, #5
 23f26f8:	2101      	movs	r1, #1
 23f26fa:	f7ff fde4 	bl	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
 23f26fe:	2200      	movs	r2, #0
 23f2700:	2140      	movs	r1, #64	; 0x40
 23f2702:	4620      	mov	r0, r4
 23f2704:	f7ff fddf 	bl	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
 23f2708:	2304      	movs	r3, #4
 23f270a:	7123      	strb	r3, [r4, #4]
}
 23f270c:	bd10      	pop	{r4, pc}

023f270e <_ZN7RH_RF959availableEv>:
{
 23f270e:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
 23f2710:	7903      	ldrb	r3, [r0, #4]
{
 23f2712:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
 23f2714:	2b03      	cmp	r3, #3
 23f2716:	d005      	beq.n	23f2724 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
 23f2718:	f7ff ffe8 	bl	23f26ec <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
 23f271c:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
 23f2720:	b2c0      	uxtb	r0, r0
}
 23f2722:	bd10      	pop	{r4, pc}
	return false;
 23f2724:	2000      	movs	r0, #0
 23f2726:	e7fc      	b.n	23f2722 <_ZN7RH_RF959availableEv+0x14>

023f2728 <_ZN7RH_RF959setModeTxEv>:
{
 23f2728:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
 23f272a:	7903      	ldrb	r3, [r0, #4]
{
 23f272c:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
 23f272e:	2b03      	cmp	r3, #3
 23f2730:	d00a      	beq.n	23f2748 <_ZN7RH_RF959setModeTxEv+0x20>
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
 23f2732:	2203      	movs	r2, #3
 23f2734:	2101      	movs	r1, #1
 23f2736:	f7ff fdc6 	bl	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
 23f273a:	2240      	movs	r2, #64	; 0x40
 23f273c:	4620      	mov	r0, r4
 23f273e:	4611      	mov	r1, r2
 23f2740:	f7ff fdc1 	bl	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
 23f2744:	2303      	movs	r3, #3
 23f2746:	7123      	strb	r3, [r4, #4]
}
 23f2748:	bd10      	pop	{r4, pc}

023f274a <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
 23f274a:	2afb      	cmp	r2, #251	; 0xfb
{
 23f274c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f274e:	4604      	mov	r4, r0
 23f2750:	460f      	mov	r7, r1
 23f2752:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
 23f2754:	d902      	bls.n	23f275c <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
 23f2756:	2600      	movs	r6, #0
}
 23f2758:	4630      	mov	r0, r6
 23f275a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
 23f275c:	6803      	ldr	r3, [r0, #0]
 23f275e:	699b      	ldr	r3, [r3, #24]
 23f2760:	4798      	blx	r3
    setModeIdle();
 23f2762:	4620      	mov	r0, r4
 23f2764:	f7ff ff0e 	bl	23f2584 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
 23f2768:	6823      	ldr	r3, [r4, #0]
 23f276a:	4620      	mov	r0, r4
 23f276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f276e:	4798      	blx	r3
 23f2770:	4606      	mov	r6, r0
 23f2772:	2800      	cmp	r0, #0
 23f2774:	d0ef      	beq.n	23f2756 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
 23f2776:	2200      	movs	r2, #0
 23f2778:	210d      	movs	r1, #13
 23f277a:	4620      	mov	r0, r4
 23f277c:	f7ff fda3 	bl	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
 23f2780:	7ae2      	ldrb	r2, [r4, #11]
 23f2782:	2100      	movs	r1, #0
 23f2784:	4620      	mov	r0, r4
 23f2786:	f7ff fd9e 	bl	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
 23f278a:	7b22      	ldrb	r2, [r4, #12]
 23f278c:	2100      	movs	r1, #0
 23f278e:	4620      	mov	r0, r4
 23f2790:	f7ff fd99 	bl	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
 23f2794:	7b62      	ldrb	r2, [r4, #13]
 23f2796:	2100      	movs	r1, #0
 23f2798:	4620      	mov	r0, r4
 23f279a:	f7ff fd94 	bl	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
 23f279e:	7ba2      	ldrb	r2, [r4, #14]
 23f27a0:	2100      	movs	r1, #0
 23f27a2:	4620      	mov	r0, r4
 23f27a4:	f7ff fd8f 	bl	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
 23f27a8:	462b      	mov	r3, r5
 23f27aa:	463a      	mov	r2, r7
 23f27ac:	2100      	movs	r1, #0
 23f27ae:	4620      	mov	r0, r4
 23f27b0:	f7ff fdd8 	bl	23f2364 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
 23f27b4:	1d2a      	adds	r2, r5, #4
 23f27b6:	2122      	movs	r1, #34	; 0x22
 23f27b8:	4620      	mov	r0, r4
 23f27ba:	b2d2      	uxtb	r2, r2
 23f27bc:	f7ff fd83 	bl	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
 23f27c0:	4620      	mov	r0, r4
 23f27c2:	f7ff ffb1 	bl	23f2728 <_ZN7RH_RF959setModeTxEv>
    return true;
 23f27c6:	e7c7      	b.n	23f2758 <_ZN7RH_RF954sendEPKhh+0xe>

023f27c8 <_ZN7RH_RF9510setTxPowerEab>:
    if (useRFO)
 23f27c8:	b15a      	cbz	r2, 23f27e2 <_ZN7RH_RF9510setTxPowerEab+0x1a>
	if (power > 14)
 23f27ca:	ea41 72e1 	orr.w	r2, r1, r1, asr #31
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | (power + 1));
 23f27ce:	2a0e      	cmp	r2, #14
 23f27d0:	bfa8      	it	ge
 23f27d2:	220e      	movge	r2, #14
 23f27d4:	3201      	adds	r2, #1
 23f27d6:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 23f27da:	2109      	movs	r1, #9
 23f27dc:	b2d2      	uxtb	r2, r2
 23f27de:	f7ff bd72 	b.w	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
 23f27e2:	f7ff be34 	b.w	23f244e <_ZN7RH_RF9510setTxPowerEab.part.0>

023f27e6 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
 23f27e6:	b538      	push	{r3, r4, r5, lr}
 23f27e8:	4605      	mov	r5, r0
 23f27ea:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
 23f27ec:	780a      	ldrb	r2, [r1, #0]
 23f27ee:	211d      	movs	r1, #29
 23f27f0:	f7ff fd69 	bl	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
 23f27f4:	7862      	ldrb	r2, [r4, #1]
 23f27f6:	211e      	movs	r1, #30
 23f27f8:	4628      	mov	r0, r5
 23f27fa:	f7ff fd64 	bl	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
 23f27fe:	4628      	mov	r0, r5
 23f2800:	78a2      	ldrb	r2, [r4, #2]
 23f2802:	2126      	movs	r1, #38	; 0x26
}
 23f2804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
 23f2808:	f7ff bd5d 	b.w	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>

023f280c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
 23f280c:	2904      	cmp	r1, #4
{
 23f280e:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
 23f2810:	d80f      	bhi.n	23f2832 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
 23f2812:	4b09      	ldr	r3, [pc, #36]	; (23f2838 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
 23f2814:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 23f2818:	185c      	adds	r4, r3, r1
 23f281a:	5a5a      	ldrh	r2, [r3, r1]
 23f281c:	78a3      	ldrb	r3, [r4, #2]
    setModemRegisters(&cfg);
 23f281e:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
 23f2820:	f8ad 2004 	strh.w	r2, [sp, #4]
 23f2824:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
 23f2828:	f7ff ffdd 	bl	23f27e6 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
 23f282c:	2001      	movs	r0, #1
}
 23f282e:	b002      	add	sp, #8
 23f2830:	bd10      	pop	{r4, pc}
        return false;
 23f2832:	2000      	movs	r0, #0
 23f2834:	e7fb      	b.n	23f282e <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
 23f2836:	bf00      	nop
 23f2838:	023ff5fc 	.word	0x023ff5fc

023f283c <_ZN7RH_RF9517setPreambleLengthEt>:
{
 23f283c:	b538      	push	{r3, r4, r5, lr}
 23f283e:	4605      	mov	r5, r0
 23f2840:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
 23f2842:	0a0a      	lsrs	r2, r1, #8
 23f2844:	2120      	movs	r1, #32
 23f2846:	f7ff fd3e 	bl	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
 23f284a:	4628      	mov	r0, r5
 23f284c:	b2e2      	uxtb	r2, r4
 23f284e:	2121      	movs	r1, #33	; 0x21
}
 23f2850:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
 23f2854:	f7ff bd37 	b.w	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>

023f2858 <_ZN7RH_RF954initEv>:
{
 23f2858:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f285a:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
 23f285c:	f7ff fcf2 	bl	23f2244 <_ZN11RHSPIDriver4initEv>
 23f2860:	4605      	mov	r5, r0
 23f2862:	b918      	cbnz	r0, 23f286c <_ZN7RH_RF954initEv+0x14>
	return false;
 23f2864:	2500      	movs	r5, #0
}
 23f2866:	4628      	mov	r0, r5
 23f2868:	b002      	add	sp, #8
 23f286a:	bd70      	pop	{r4, r5, r6, pc}
    int interruptNumber = digitalPinToInterrupt(_interruptPin);
 23f286c:	f894 6026 	ldrb.w	r6, [r4, #38]	; 0x26
    spiUsingInterrupt(interruptNumber);
 23f2870:	4620      	mov	r0, r4
 23f2872:	4631      	mov	r1, r6
 23f2874:	f7ff fda0 	bl	23f23b8 <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
 23f2878:	2280      	movs	r2, #128	; 0x80
 23f287a:	2101      	movs	r1, #1
 23f287c:	4620      	mov	r0, r4
 23f287e:	f7ff fd22 	bl	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
 23f2882:	200a      	movs	r0, #10
 23f2884:	f004 fed0 	bl	23f7628 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
 23f2888:	2101      	movs	r1, #1
 23f288a:	4620      	mov	r0, r4
 23f288c:	f7ff fd00 	bl	23f2290 <_ZN11RHSPIDriver7spiReadEh>
 23f2890:	2880      	cmp	r0, #128	; 0x80
 23f2892:	d1e7      	bne.n	23f2864 <_ZN7RH_RF954initEv+0xc>
    pinMode(_interruptPin, INPUT); 
 23f2894:	2100      	movs	r1, #0
 23f2896:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 23f289a:	f007 f8cf 	bl	23f9a3c <pinMode>
    if (_myInterruptIndex == 0xff)
 23f289e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 23f28a2:	2bff      	cmp	r3, #255	; 0xff
 23f28a4:	d107      	bne.n	23f28b6 <_ZN7RH_RF954initEv+0x5e>
	if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
 23f28a6:	4a23      	ldr	r2, [pc, #140]	; (23f2934 <_ZN7RH_RF954initEv+0xdc>)
 23f28a8:	7813      	ldrb	r3, [r2, #0]
 23f28aa:	2b03      	cmp	r3, #3
 23f28ac:	d8da      	bhi.n	23f2864 <_ZN7RH_RF954initEv+0xc>
	    _myInterruptIndex = _interruptCount++;
 23f28ae:	1c59      	adds	r1, r3, #1
 23f28b0:	7011      	strb	r1, [r2, #0]
 23f28b2:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    _deviceForInterrupt[_myInterruptIndex] = this;
 23f28b6:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 23f28ba:	4b1f      	ldr	r3, [pc, #124]	; (23f2938 <_ZN7RH_RF954initEv+0xe0>)
 23f28bc:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    if (_myInterruptIndex == 0)
 23f28c0:	bb32      	cbnz	r2, 23f2910 <_ZN7RH_RF954initEv+0xb8>
	attachInterrupt(interruptNumber, isr0, RISING);
 23f28c2:	9200      	str	r2, [sp, #0]
 23f28c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f28c8:	2201      	movs	r2, #1
 23f28ca:	491c      	ldr	r1, [pc, #112]	; (23f293c <_ZN7RH_RF954initEv+0xe4>)
	attachInterrupt(interruptNumber, isr2, RISING);
 23f28cc:	4630      	mov	r0, r6
 23f28ce:	f005 fceb 	bl	23f82a8 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
 23f28d2:	2200      	movs	r2, #0
 23f28d4:	210e      	movs	r1, #14
 23f28d6:	4620      	mov	r0, r4
 23f28d8:	f7ff fcf5 	bl	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
 23f28dc:	2200      	movs	r2, #0
 23f28de:	210f      	movs	r1, #15
 23f28e0:	4620      	mov	r0, r4
 23f28e2:	f7ff fcf0 	bl	23f22c6 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
 23f28e6:	4620      	mov	r0, r4
 23f28e8:	f7ff fe4c 	bl	23f2584 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
 23f28ec:	2100      	movs	r1, #0
 23f28ee:	4620      	mov	r0, r4
 23f28f0:	f7ff ff8c 	bl	23f280c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
 23f28f4:	2108      	movs	r1, #8
 23f28f6:	4620      	mov	r0, r4
 23f28f8:	f7ff ffa0 	bl	23f283c <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
 23f28fc:	ed9f 0a10 	vldr	s0, [pc, #64]	; 23f2940 <_ZN7RH_RF954initEv+0xe8>
 23f2900:	4620      	mov	r0, r4
 23f2902:	f7ff fdfd 	bl	23f2500 <_ZN7RH_RF9512setFrequencyEf>
    if (useRFO)
 23f2906:	210d      	movs	r1, #13
 23f2908:	4620      	mov	r0, r4
 23f290a:	f7ff fda0 	bl	23f244e <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
 23f290e:	e7aa      	b.n	23f2866 <_ZN7RH_RF954initEv+0xe>
    else if (_myInterruptIndex == 1)
 23f2910:	2a01      	cmp	r2, #1
 23f2912:	f04f 0300 	mov.w	r3, #0
 23f2916:	d104      	bne.n	23f2922 <_ZN7RH_RF954initEv+0xca>
	attachInterrupt(interruptNumber, isr1, RISING);
 23f2918:	9300      	str	r3, [sp, #0]
 23f291a:	490a      	ldr	r1, [pc, #40]	; (23f2944 <_ZN7RH_RF954initEv+0xec>)
 23f291c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f2920:	e7d4      	b.n	23f28cc <_ZN7RH_RF954initEv+0x74>
    else if (_myInterruptIndex == 2)
 23f2922:	2a02      	cmp	r2, #2
 23f2924:	d19e      	bne.n	23f2864 <_ZN7RH_RF954initEv+0xc>
	attachInterrupt(interruptNumber, isr2, RISING);
 23f2926:	9300      	str	r3, [sp, #0]
 23f2928:	2201      	movs	r2, #1
 23f292a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f292e:	4906      	ldr	r1, [pc, #24]	; (23f2948 <_ZN7RH_RF954initEv+0xf0>)
 23f2930:	e7cc      	b.n	23f28cc <_ZN7RH_RF954initEv+0x74>
 23f2932:	bf00      	nop
 23f2934:	1007ae88 	.word	0x1007ae88
 23f2938:	1007ae8c 	.word	0x1007ae8c
 23f293c:	023f26bd 	.word	0x023f26bd
 23f2940:	43d90000 	.word	0x43d90000
 23f2944:	023f26cd 	.word	0x023f26cd
 23f2948:	023f26dd 	.word	0x023f26dd

023f294c <_ZN7FatFile8openRootEP9FatVolume.part.0>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 23f294c:	b538      	push	{r3, r4, r5, lr}
 23f294e:	460d      	mov	r5, r1
 23f2950:	4604      	mov	r4, r0
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 23f2952:	2224      	movs	r2, #36	; 0x24
 23f2954:	2100      	movs	r1, #0
 23f2956:	f009 fed2 	bl	23fc6fe <memset>

  m_vol = vol;
 23f295a:	60a5      	str	r5, [r4, #8]
  /** \return The number of File Allocation Tables. */
  uint8_t fatCount() const { return 2; }
  /** \return The logical sector number for the start of the first FAT. */
  uint32_t fatStartSector() const { return m_fatStartSector; }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const { return m_fatType; }
 23f295c:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
 23f295e:	2b10      	cmp	r3, #16
 23f2960:	d003      	beq.n	23f296a <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
 23f2962:	2b20      	cmp	r3, #32
 23f2964:	d006      	beq.n	23f2974 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
 23f2966:	2000      	movs	r0, #0
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
}
 23f2968:	bd38      	pop	{r3, r4, r5, pc}
      m_attributes = FILE_ATTR_ROOT_FIXED;
 23f296a:	2340      	movs	r3, #64	; 0x40
  m_flags = FILE_FLAG_READ;
 23f296c:	2001      	movs	r0, #1
      m_attributes = FILE_ATTR_ROOT32;
 23f296e:	7023      	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
 23f2970:	70a0      	strb	r0, [r4, #2]
  return true;
 23f2972:	e7f9      	b.n	23f2968 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
      m_attributes = FILE_ATTR_ROOT32;
 23f2974:	2380      	movs	r3, #128	; 0x80
 23f2976:	e7f9      	b.n	23f296c <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

023f2978 <_ZN12FatPartition9cacheSyncEv>:
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
 23f2978:	b510      	push	{r4, lr}
 23f297a:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
 23f297c:	3024      	adds	r0, #36	; 0x24
 23f297e:	f003 f8ee 	bl	23f5b5e <_ZN7FsCache4syncEv>
 23f2982:	b148      	cbz	r0, 23f2998 <_ZN12FatPartition9cacheSyncEv+0x20>
 23f2984:	f504 700d 	add.w	r0, r4, #564	; 0x234
 23f2988:	f003 f8e9 	bl	23f5b5e <_ZN7FsCache4syncEv>
 23f298c:	b120      	cbz	r0, 23f2998 <_ZN12FatPartition9cacheSyncEv+0x20>
  bool syncDevice() { return m_blockDev->syncDevice(); }
 23f298e:	6820      	ldr	r0, [r4, #0]
  }
 23f2990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  bool syncDevice() { return m_blockDev->syncDevice(); }
 23f2994:	f001 b8b6 	b.w	23f3b04 <_ZN9SdSpiCard10syncDeviceEv>
  }
 23f2998:	2000      	movs	r0, #0
 23f299a:	bd10      	pop	{r4, pc}

023f299c <_ZN7FatFile4copyEPKS_>:
    if (from != this) {
 23f299c:	4281      	cmp	r1, r0
  void copy(const FatFile* from) {
 23f299e:	b530      	push	{r4, r5, lr}
    if (from != this) {
 23f29a0:	d007      	beq.n	23f29b2 <_ZN7FatFile4copyEPKS_+0x16>
      *this = *from;
 23f29a2:	4604      	mov	r4, r0
 23f29a4:	460d      	mov	r5, r1
 23f29a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f29a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f29aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f29ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f29ae:	682b      	ldr	r3, [r5, #0]
 23f29b0:	6023      	str	r3, [r4, #0]
  }
 23f29b2:	bd30      	pop	{r4, r5, pc}

023f29b4 <_ZN7FatFile10addClusterEv>:
  uint32_t cc = m_curCluster;
 23f29b4:	4602      	mov	r2, r0
bool FatFile::addCluster() {
 23f29b6:	b538      	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
 23f29b8:	f852 5f10 	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
 23f29bc:	4604      	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
 23f29be:	4629      	mov	r1, r5
 23f29c0:	6880      	ldr	r0, [r0, #8]
 23f29c2:	f002 febc 	bl	23f573e <_ZN12FatPartition15allocateClusterEmPm>
 23f29c6:	b140      	cbz	r0, 23f29da <_ZN7FatFile10addClusterEv+0x26>
    m_flags |= FILE_FLAG_CONTIGUOUS;
 23f29c8:	78a3      	ldrb	r3, [r4, #2]
  if (cc == 0) {
 23f29ca:	b93d      	cbnz	r5, 23f29dc <_ZN7FatFile10addClusterEv+0x28>
    m_flags |= FILE_FLAG_CONTIGUOUS;
 23f29cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
 23f29d0:	70a3      	strb	r3, [r4, #2]
  m_flags |= FILE_FLAG_DIR_DIRTY;
 23f29d2:	78a3      	ldrb	r3, [r4, #2]
 23f29d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 23f29d8:	70a3      	strb	r3, [r4, #2]
}
 23f29da:	bd38      	pop	{r3, r4, r5, pc}
  } else if (m_curCluster != (cc + 1)) {
 23f29dc:	6922      	ldr	r2, [r4, #16]
 23f29de:	3501      	adds	r5, #1
 23f29e0:	42aa      	cmp	r2, r5
 23f29e2:	d0f6      	beq.n	23f29d2 <_ZN7FatFile10addClusterEv+0x1e>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
 23f29e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 23f29e8:	e7f2      	b.n	23f29d0 <_ZN7FatFile10addClusterEv+0x1c>
	...

023f29ec <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
 23f29ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
 23f29ee:	7805      	ldrb	r5, [r0, #0]
bool FatFile::addDirCluster() {
 23f29f0:	4604      	mov	r4, r0
  if (isRootFixed()) {
 23f29f2:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 23f29f6:	d002      	beq.n	23f29fe <_ZN7FatFile13addDirClusterEv+0x12>
  return false;
 23f29f8:	2600      	movs	r6, #0
}
 23f29fa:	4630      	mov	r0, r6
 23f29fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_curPosition >= 512UL * 4095) {
 23f29fe:	6942      	ldr	r2, [r0, #20]
 23f2a00:	4b15      	ldr	r3, [pc, #84]	; (23f2a58 <_ZN7FatFile13addDirClusterEv+0x6c>)
 23f2a02:	429a      	cmp	r2, r3
 23f2a04:	d2f8      	bcs.n	23f29f8 <_ZN7FatFile13addDirClusterEv+0xc>
  if (!addCluster()) {
 23f2a06:	f7ff ffd5 	bl	23f29b4 <_ZN7FatFile10addClusterEv>
 23f2a0a:	4606      	mov	r6, r0
 23f2a0c:	2800      	cmp	r0, #0
 23f2a0e:	d0f3      	beq.n	23f29f8 <_ZN7FatFile13addDirClusterEv+0xc>
  sector = m_vol->clusterStartSector(m_curCluster);
 23f2a10:	68a2      	ldr	r2, [r4, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
 23f2a12:	6923      	ldr	r3, [r4, #16]
 23f2a14:	7991      	ldrb	r1, [r2, #6]
 23f2a16:	6957      	ldr	r7, [r2, #20]
 23f2a18:	3b02      	subs	r3, #2
 23f2a1a:	408b      	lsls	r3, r1
 23f2a1c:	441f      	add	r7, r3
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
 23f2a1e:	68a0      	ldr	r0, [r4, #8]
 23f2a20:	b2e9      	uxtb	r1, r5
 23f2a22:	7903      	ldrb	r3, [r0, #4]
 23f2a24:	428b      	cmp	r3, r1
 23f2a26:	d90d      	bls.n	23f2a44 <_ZN7FatFile13addDirClusterEv+0x58>
    return m_cache.prepare(sector, options);
 23f2a28:	2205      	movs	r2, #5
 23f2a2a:	4439      	add	r1, r7
 23f2a2c:	3024      	adds	r0, #36	; 0x24
 23f2a2e:	f003 f8bc 	bl	23f5baa <_ZN7FsCache7prepareEmh>
    if (!pc) {
 23f2a32:	3501      	adds	r5, #1
 23f2a34:	2800      	cmp	r0, #0
 23f2a36:	d0df      	beq.n	23f29f8 <_ZN7FatFile13addDirClusterEv+0xc>
    memset(pc, 0, m_vol->bytesPerSector());
 23f2a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 23f2a3c:	2100      	movs	r1, #0
 23f2a3e:	f009 fe5e 	bl	23fc6fe <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
 23f2a42:	e7ec      	b.n	23f2a1e <_ZN7FatFile13addDirClusterEv+0x32>
    return m_bytesPerSector << m_sectorsPerClusterShift;
 23f2a44:	f44f 7300 	mov.w	r3, #512	; 0x200
 23f2a48:	7982      	ldrb	r2, [r0, #6]
 23f2a4a:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
 23f2a4c:	6962      	ldr	r2, [r4, #20]
 23f2a4e:	fa12 f383 	uxtah	r3, r2, r3
 23f2a52:	6163      	str	r3, [r4, #20]
  return true;
 23f2a54:	e7d1      	b.n	23f29fa <_ZN7FatFile13addDirClusterEv+0xe>
 23f2a56:	bf00      	nop
 23f2a58:	001ffe00 	.word	0x001ffe00

023f2a5c <_ZN7FatFile13cacheDirEntryEh>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
 23f2a5c:	b510      	push	{r4, lr}
 23f2a5e:	4604      	mov	r4, r0
    return m_cache.prepare(sector, options);
 23f2a60:	6880      	ldr	r0, [r0, #8]
 23f2a62:	460a      	mov	r2, r1
 23f2a64:	3024      	adds	r0, #36	; 0x24
 23f2a66:	69a1      	ldr	r1, [r4, #24]
 23f2a68:	f003 f89f 	bl	23f5baa <_ZN7FsCache7prepareEmh>
  if (!dir) {
 23f2a6c:	b120      	cbz	r0, 23f2a78 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return dir + (m_dirIndex & 0XF);
 23f2a6e:	88a3      	ldrh	r3, [r4, #4]
 23f2a70:	f003 030f 	and.w	r3, r3, #15
 23f2a74:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
 23f2a78:	bd10      	pop	{r4, pc}

023f2a7a <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
 23f2a7a:	7803      	ldrb	r3, [r0, #0]
 23f2a7c:	b90b      	cbnz	r3, 23f2a82 <_ZN7FatFile8openRootEP9FatVolume+0x8>
 23f2a7e:	f7ff bf65 	b.w	23f294c <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
 23f2a82:	2000      	movs	r0, #0
 23f2a84:	4770      	bx	lr

023f2a86 <_ZN7FatFile11openClusterEPS_>:
bool FatFile::openCluster(FatFile* file) {
 23f2a86:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
 23f2a88:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
 23f2a8a:	4604      	mov	r4, r0
 23f2a8c:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
 23f2a8e:	b923      	cbnz	r3, 23f2a9a <_ZN7FatFile11openClusterEPS_+0x14>
}
 23f2a90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
 23f2a94:	6889      	ldr	r1, [r1, #8]
 23f2a96:	f7ff bff0 	b.w	23f2a7a <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
 23f2a9a:	2224      	movs	r2, #36	; 0x24
 23f2a9c:	2100      	movs	r1, #0
 23f2a9e:	f009 fe2e 	bl	23fc6fe <memset>
  m_attributes = FILE_ATTR_SUBDIR;
 23f2aa2:	2310      	movs	r3, #16
  m_flags = FILE_FLAG_READ;
 23f2aa4:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
 23f2aa6:	7023      	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
 23f2aa8:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
 23f2aaa:	68ab      	ldr	r3, [r5, #8]
 23f2aac:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
 23f2aae:	68eb      	ldr	r3, [r5, #12]
 23f2ab0:	6223      	str	r3, [r4, #32]
}
 23f2ab2:	bd38      	pop	{r3, r4, r5, pc}

023f2ab4 <_ZN7FatFile4readEPvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 23f2ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f2ab8:	ed2d 8b02 	vpush	{d8}
  /** \return true if this file has a Long File Name. */
  bool isLFN() const { return m_lfnOrd; }
  /** \return True if this is an open file/directory. */
  bool isOpen() const { return m_attributes; }
  /** \return True file is readable. */
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
 23f2abc:	7883      	ldrb	r3, [r0, #2]
 23f2abe:	4604      	mov	r4, r0
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
 23f2ac0:	07d8      	lsls	r0, r3, #31
int FatFile::read(void* buf, size_t nbyte) {
 23f2ac2:	4688      	mov	r8, r1
 23f2ac4:	4615      	mov	r5, r2
 23f2ac6:	b083      	sub	sp, #12
  if (!isReadable()) {
 23f2ac8:	d56c      	bpl.n	23f2ba4 <_ZN7FatFile4readEPvj+0xf0>
  bool isFile() const { return m_attributes & FILE_ATTR_FILE; }
 23f2aca:	7823      	ldrb	r3, [r4, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 23f2acc:	0719      	lsls	r1, r3, #28
 23f2ace:	d533      	bpl.n	23f2b38 <_ZN7FatFile4readEPvj+0x84>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 23f2ad0:	69e3      	ldr	r3, [r4, #28]
 23f2ad2:	6962      	ldr	r2, [r4, #20]
 23f2ad4:	1a9b      	subs	r3, r3, r2
 23f2ad6:	429d      	cmp	r5, r3
 23f2ad8:	bf28      	it	cs
 23f2ada:	461d      	movcs	r5, r3
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f2adc:	f104 0310 	add.w	r3, r4, #16
  toRead = nbyte;
 23f2ae0:	462e      	mov	r6, r5
  uint8_t sectorOfCluster = 0;
 23f2ae2:	f04f 0900 	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f2ae6:	ee08 3a10 	vmov	s16, r3
  while (toRead) {
 23f2aea:	2e00      	cmp	r6, #0
 23f2aec:	f000 809f 	beq.w	23f2c2e <_ZN7FatFile4readEPvj+0x17a>
  /** \return True if this is the root directory. */
  bool isRoot() const { return m_attributes & FILE_ATTR_ROOT; }
  /** \return True if this is the FAT32 root directory. */
  bool isRoot32() const { return m_attributes & FILE_ATTR_ROOT32; }
  /** \return True if this is the FAT12 of FAT16 root directory. */
  bool isRootFixed() const { return m_attributes & FILE_ATTR_ROOT_FIXED; }
 23f2af0:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
 23f2af2:	6967      	ldr	r7, [r4, #20]
    if (isRootFixed()) {
 23f2af4:	0653      	lsls	r3, r2, #25
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
 23f2af6:	68a0      	ldr	r0, [r4, #8]
 23f2af8:	f3c7 0b08 	ubfx	fp, r7, #0, #9
               (m_curPosition >> m_vol->bytesPerSectorShift());
 23f2afc:	ea4f 2157 	mov.w	r1, r7, lsr #9
    if (isRootFixed()) {
 23f2b00:	d523      	bpl.n	23f2b4a <_ZN7FatFile4readEPvj+0x96>
      sector = m_vol->rootDirStart() +
 23f2b02:	6a02      	ldr	r2, [r0, #32]
 23f2b04:	4411      	add	r1, r2
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
 23f2b06:	f8d4 a008 	ldr.w	sl, [r4, #8]
 23f2b0a:	f1bb 0f00 	cmp.w	fp, #0
 23f2b0e:	d150      	bne.n	23f2bb2 <_ZN7FatFile4readEPvj+0xfe>
 23f2b10:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23f2b14:	d34d      	bcc.n	23f2bb2 <_ZN7FatFile4readEPvj+0xfe>
   * \param[in] option mode for cached sector.
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() { return m_sector; }
 23f2b16:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 23f2b1a:	4291      	cmp	r1, r2
 23f2b1c:	d049      	beq.n	23f2bb2 <_ZN7FatFile4readEPvj+0xfe>
        goto fail;
      }
      const uint8_t* src = pc + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
 23f2b1e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 23f2b22:	d25f      	bcs.n	23f2be4 <_ZN7FatFile4readEPvj+0x130>
    return m_blockDev->readSector(sector, dst);
 23f2b24:	4642      	mov	r2, r8
 23f2b26:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 23f2b2a:	f001 f94b 	bl	23f3dc4 <_ZN9SdSpiCard10readSectorEmPh>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
 23f2b2e:	2800      	cmp	r0, #0
 23f2b30:	d038      	beq.n	23f2ba4 <_ZN7FatFile4readEPvj+0xf0>
      n = m_vol->bytesPerSector();
 23f2b32:	f44f 7700 	mov.w	r7, #512	; 0x200
 23f2b36:	e04f      	b.n	23f2bd8 <_ZN7FatFile4readEPvj+0x124>
  } else if (isRootFixed()) {
 23f2b38:	065a      	lsls	r2, r3, #25
 23f2b3a:	d5cf      	bpl.n	23f2adc <_ZN7FatFile4readEPvj+0x28>
        FS_DIR_SIZE * m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 23f2b3c:	68a3      	ldr	r3, [r4, #8]
 23f2b3e:	891a      	ldrh	r2, [r3, #8]
 23f2b40:	6963      	ldr	r3, [r4, #20]
    uint16_t tmp16 =
 23f2b42:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
 23f2b46:	b29b      	uxth	r3, r3
 23f2b48:	e7c5      	b.n	23f2ad6 <_ZN7FatFile4readEPvj+0x22>
    return (position >> 9) & m_clusterSectorMask;
 23f2b4a:	f890 9005 	ldrb.w	r9, [r0, #5]
 23f2b4e:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && sectorOfCluster == 0) {
 23f2b52:	f1bb 0f00 	cmp.w	fp, #0
 23f2b56:	d108      	bne.n	23f2b6a <_ZN7FatFile4readEPvj+0xb6>
 23f2b58:	f1b9 0f00 	cmp.w	r9, #0
 23f2b5c:	d105      	bne.n	23f2b6a <_ZN7FatFile4readEPvj+0xb6>
        if (m_curPosition == 0) {
 23f2b5e:	b96f      	cbnz	r7, 23f2b7c <_ZN7FatFile4readEPvj+0xc8>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 23f2b60:	0612      	lsls	r2, r2, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
 23f2b62:	bf4c      	ite	mi
 23f2b64:	6a02      	ldrmi	r2, [r0, #32]
 23f2b66:	6a22      	ldrpl	r2, [r4, #32]
 23f2b68:	6122      	str	r2, [r4, #16]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
 23f2b6a:	68a2      	ldr	r2, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
 23f2b6c:	6921      	ldr	r1, [r4, #16]
 23f2b6e:	7990      	ldrb	r0, [r2, #6]
 23f2b70:	3902      	subs	r1, #2
 23f2b72:	6952      	ldr	r2, [r2, #20]
 23f2b74:	4081      	lsls	r1, r0
 23f2b76:	4411      	add	r1, r2
 23f2b78:	4449      	add	r1, r9
 23f2b7a:	e7c4      	b.n	23f2b06 <_ZN7FatFile4readEPvj+0x52>
        } else if (isFile() && isContiguous()) {
 23f2b7c:	0713      	lsls	r3, r2, #28
          m_curCluster++;
 23f2b7e:	6921      	ldr	r1, [r4, #16]
        } else if (isFile() && isContiguous()) {
 23f2b80:	d505      	bpl.n	23f2b8e <_ZN7FatFile4readEPvj+0xda>
 23f2b82:	78a2      	ldrb	r2, [r4, #2]
 23f2b84:	0657      	lsls	r7, r2, #25
 23f2b86:	d502      	bpl.n	23f2b8e <_ZN7FatFile4readEPvj+0xda>
          m_curCluster++;
 23f2b88:	3101      	adds	r1, #1
 23f2b8a:	6121      	str	r1, [r4, #16]
 23f2b8c:	e7ed      	b.n	23f2b6a <_ZN7FatFile4readEPvj+0xb6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f2b8e:	ee18 2a10 	vmov	r2, s16
 23f2b92:	f002 fd6f 	bl	23f5674 <_ZN12FatPartition6fatGetEmPm>
          if (fg < 0) {
 23f2b96:	2800      	cmp	r0, #0
 23f2b98:	db04      	blt.n	23f2ba4 <_ZN7FatFile4readEPvj+0xf0>
          if (fg == 0) {
 23f2b9a:	d1e6      	bne.n	23f2b6a <_ZN7FatFile4readEPvj+0xb6>
            if (isDir()) {
 23f2b9c:	7823      	ldrb	r3, [r4, #0]
 23f2b9e:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 23f2ba2:	d144      	bne.n	23f2c2e <_ZN7FatFile4readEPvj+0x17a>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 23f2ba4:	7863      	ldrb	r3, [r4, #1]
  return -1;
 23f2ba6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  m_error |= READ_ERROR;
 23f2baa:	f043 0302 	orr.w	r3, r3, #2
 23f2bae:	7063      	strb	r3, [r4, #1]
  return -1;
 23f2bb0:	e03e      	b.n	23f2c30 <_ZN7FatFile4readEPvj+0x17c>
      n = m_vol->bytesPerSector() - offset;
 23f2bb2:	f5cb 7700 	rsb	r7, fp, #512	; 0x200
      if (n > toRead) {
 23f2bb6:	42b7      	cmp	r7, r6
    return m_cache.prepare(sector, options);
 23f2bb8:	f04f 0200 	mov.w	r2, #0
 23f2bbc:	f10a 0024 	add.w	r0, sl, #36	; 0x24
 23f2bc0:	bf28      	it	cs
 23f2bc2:	4637      	movcs	r7, r6
 23f2bc4:	f002 fff1 	bl	23f5baa <_ZN7FsCache7prepareEmh>
      if (!pc) {
 23f2bc8:	2800      	cmp	r0, #0
 23f2bca:	d0eb      	beq.n	23f2ba4 <_ZN7FatFile4readEPvj+0xf0>
      memcpy(dst, src, n);
 23f2bcc:	eb00 010b 	add.w	r1, r0, fp
 23f2bd0:	463a      	mov	r2, r7
 23f2bd2:	4640      	mov	r0, r8
 23f2bd4:	f009 fd86 	bl	23fc6e4 <memcpy>
    m_curPosition += n;
 23f2bd8:	6963      	ldr	r3, [r4, #20]
    dst += n;
 23f2bda:	44b8      	add	r8, r7
    m_curPosition += n;
 23f2bdc:	443b      	add	r3, r7
 23f2bde:	6163      	str	r3, [r4, #20]
    toRead -= n;
 23f2be0:	1bf6      	subs	r6, r6, r7
  while (toRead) {
 23f2be2:	e782      	b.n	23f2aea <_ZN7FatFile4readEPvj+0x36>
      if (!isRootFixed()) {
 23f2be4:	7820      	ldrb	r0, [r4, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
 23f2be6:	0a73      	lsrs	r3, r6, #9
      if (!isRootFixed()) {
 23f2be8:	0640      	lsls	r0, r0, #25
 23f2bea:	d406      	bmi.n	23f2bfa <_ZN7FatFile4readEPvj+0x146>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
 23f2bec:	f89a 0004 	ldrb.w	r0, [sl, #4]
 23f2bf0:	eba0 0009 	sub.w	r0, r0, r9
 23f2bf4:	4283      	cmp	r3, r0
 23f2bf6:	bf28      	it	cs
 23f2bf8:	4603      	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
 23f2bfa:	4291      	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
 23f2bfc:	ea4f 2743 	mov.w	r7, r3, lsl #9
 23f2c00:	d907      	bls.n	23f2c12 <_ZN7FatFile4readEPvj+0x15e>
    return m_blockDev->readSectors(sector, dst, count);
 23f2c02:	4642      	mov	r2, r8
 23f2c04:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 23f2c08:	f001 f8b0 	bl	23f3d6c <_ZN9SdSpiCard11readSectorsEmPhj>
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
 23f2c0c:	2800      	cmp	r0, #0
 23f2c0e:	d1e3      	bne.n	23f2bd8 <_ZN7FatFile4readEPvj+0x124>
 23f2c10:	e7c8      	b.n	23f2ba4 <_ZN7FatFile4readEPvj+0xf0>
    return sector <= m_sector && m_sector < (sector + count);
 23f2c12:	18c8      	adds	r0, r1, r3
 23f2c14:	4282      	cmp	r2, r0
 23f2c16:	d2f4      	bcs.n	23f2c02 <_ZN7FatFile4readEPvj+0x14e>
    if (isCached(sector, count) && !sync()) {
 23f2c18:	f10a 0024 	add.w	r0, sl, #36	; 0x24
 23f2c1c:	e9cd 1300 	strd	r1, r3, [sp]
 23f2c20:	f002 ff9d 	bl	23f5b5e <_ZN7FsCache4syncEv>
 23f2c24:	e9dd 1300 	ldrd	r1, r3, [sp]
 23f2c28:	2800      	cmp	r0, #0
 23f2c2a:	d1ea      	bne.n	23f2c02 <_ZN7FatFile4readEPvj+0x14e>
 23f2c2c:	e7ba      	b.n	23f2ba4 <_ZN7FatFile4readEPvj+0xf0>
  return nbyte - toRead;
 23f2c2e:	1ba8      	subs	r0, r5, r6
}
 23f2c30:	b003      	add	sp, #12
 23f2c32:	ecbd 8b02 	vpop	{d8}
 23f2c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023f2c3a <_ZN7FatFile4peekEv>:
int FatFile::peek() {
 23f2c3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 23f2c3c:	2201      	movs	r2, #1
  uint32_t saveCurCluster = m_curCluster;
 23f2c3e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23f2c42:	f10d 0107 	add.w	r1, sp, #7
int FatFile::peek() {
 23f2c46:	4604      	mov	r4, r0
 23f2c48:	f7ff ff34 	bl	23f2ab4 <_ZN7FatFile4readEPvj>
 23f2c4c:	2801      	cmp	r0, #1
 23f2c4e:	bf14      	ite	ne
 23f2c50:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23f2c54:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = saveCurCluster;
 23f2c58:	e9c4 5604 	strd	r5, r6, [r4, #16]
}
 23f2c5c:	b002      	add	sp, #8
 23f2c5e:	bd70      	pop	{r4, r5, r6, pc}

023f2c60 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
 23f2c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
 23f2c62:	6943      	ldr	r3, [r0, #20]
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
 23f2c64:	4604      	mov	r4, r0

  if (i == 0 || !skipReadOk) {
 23f2c66:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
 23f2c6a:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
 23f2c6e:	d000      	beq.n	23f2c72 <_ZN7FatFile12readDirCacheEb+0x12>
 23f2c70:	b999      	cbnz	r1, 23f2c9a <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
 23f2c72:	2201      	movs	r2, #1
 23f2c74:	4620      	mov	r0, r4
 23f2c76:	f10d 0107 	add.w	r1, sp, #7
 23f2c7a:	f7ff ff1b 	bl	23f2ab4 <_ZN7FatFile4readEPvj>
    if (n != 1) {
 23f2c7e:	b240      	sxtb	r0, r0
 23f2c80:	2801      	cmp	r0, #1
 23f2c82:	d002      	beq.n	23f2c8a <_ZN7FatFile12readDirCacheEb+0x2a>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
 23f2c84:	2000      	movs	r0, #0
}
 23f2c86:	b003      	add	sp, #12
 23f2c88:	bd30      	pop	{r4, r5, pc}
    m_curPosition += FS_DIR_SIZE - 1;
 23f2c8a:	6963      	ldr	r3, [r4, #20]
 23f2c8c:	331f      	adds	r3, #31
  uint8_t* cacheBuffer() { return m_buffer; }
 23f2c8e:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += FS_DIR_SIZE;
 23f2c90:	6163      	str	r3, [r4, #20]
 23f2c92:	3034      	adds	r0, #52	; 0x34
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
 23f2c94:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 23f2c98:	e7f5      	b.n	23f2c86 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += FS_DIR_SIZE;
 23f2c9a:	3320      	adds	r3, #32
 23f2c9c:	e7f7      	b.n	23f2c8e <_ZN7FatFile12readDirCacheEb+0x2e>

023f2c9e <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 23f2c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f2ca2:	460d      	mov	r5, r1
  bool isOpen() const { return m_attributes; }
 23f2ca4:	7801      	ldrb	r1, [r0, #0]
 23f2ca6:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 23f2ca8:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
 23f2caa:	b181      	cbz	r1, 23f2cce <_ZN7FatFile7seekSetEm+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 23f2cac:	6940      	ldr	r0, [r0, #20]
 23f2cae:	42a8      	cmp	r0, r5
 23f2cb0:	d006      	beq.n	23f2cc0 <_ZN7FatFile7seekSetEm+0x22>
    return true;
  }
  if (pos == 0) {
 23f2cb2:	b93d      	cbnz	r5, 23f2cc4 <_ZN7FatFile7seekSetEm+0x26>
    // set position to start of file
    m_curCluster = 0;
 23f2cb4:	6125      	str	r5, [r4, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
 23f2cb6:	78a3      	ldrb	r3, [r4, #2]
  m_curPosition = pos;
 23f2cb8:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
 23f2cba:	f023 0320 	bic.w	r3, r3, #32
 23f2cbe:	70a3      	strb	r3, [r4, #2]
    return true;
 23f2cc0:	2001      	movs	r0, #1
 23f2cc2:	e006      	b.n	23f2cd2 <_ZN7FatFile7seekSetEm+0x34>
  if (isFile()) {
 23f2cc4:	070b      	lsls	r3, r1, #28
 23f2cc6:	d506      	bpl.n	23f2cd6 <_ZN7FatFile7seekSetEm+0x38>
    if (pos > m_fileSize) {
 23f2cc8:	69e3      	ldr	r3, [r4, #28]
 23f2cca:	42ab      	cmp	r3, r5
 23f2ccc:	d20b      	bcs.n	23f2ce6 <_ZN7FatFile7seekSetEm+0x48>
  return true;

fail:
  m_curCluster = tmp;
  return false;
 23f2cce:	2000      	movs	r0, #0
  m_curCluster = tmp;
 23f2cd0:	6127      	str	r7, [r4, #16]
}
 23f2cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
 23f2cd6:	064e      	lsls	r6, r1, #25
 23f2cd8:	d505      	bpl.n	23f2ce6 <_ZN7FatFile7seekSetEm+0x48>
  uint16_t rootDirEntryCount() const { return m_rootDirEntryCount; }
 23f2cda:	68a3      	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE * m_vol->rootDirEntryCount()) {
 23f2cdc:	891b      	ldrh	r3, [r3, #8]
 23f2cde:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
 23f2ce2:	d9e8      	bls.n	23f2cb6 <_ZN7FatFile7seekSetEm+0x18>
 23f2ce4:	e7f3      	b.n	23f2cce <_ZN7FatFile7seekSetEm+0x30>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
 23f2ce6:	f8d4 c008 	ldr.w	ip, [r4, #8]
  if (isContiguous()) {
 23f2cea:	78a2      	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
 23f2cec:	f89c 3006 	ldrb.w	r3, [ip, #6]
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
 23f2cf0:	1e6e      	subs	r6, r5, #1
 23f2cf2:	3309      	adds	r3, #9
 23f2cf4:	b2db      	uxtb	r3, r3
  if (isContiguous()) {
 23f2cf6:	0652      	lsls	r2, r2, #25
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
 23f2cf8:	fa26 f603 	lsr.w	r6, r6, r3
  if (isContiguous()) {
 23f2cfc:	d503      	bpl.n	23f2d06 <_ZN7FatFile7seekSetEm+0x68>
    m_curCluster = m_firstCluster + nNew;
 23f2cfe:	6a23      	ldr	r3, [r4, #32]
 23f2d00:	4433      	add	r3, r6
 23f2d02:	6123      	str	r3, [r4, #16]
    goto done;
 23f2d04:	e7d7      	b.n	23f2cb6 <_ZN7FatFile7seekSetEm+0x18>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
 23f2d06:	1e42      	subs	r2, r0, #1
 23f2d08:	fa22 f303 	lsr.w	r3, r2, r3
  if (nNew < nCur || m_curPosition == 0) {
 23f2d0c:	429e      	cmp	r6, r3
 23f2d0e:	d300      	bcc.n	23f2d12 <_ZN7FatFile7seekSetEm+0x74>
 23f2d10:	b998      	cbnz	r0, 23f2d3a <_ZN7FatFile7seekSetEm+0x9c>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 23f2d12:	060b      	lsls	r3, r1, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
 23f2d14:	bf4c      	ite	mi
 23f2d16:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
 23f2d1a:	6a23      	ldrpl	r3, [r4, #32]
 23f2d1c:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 23f2d1e:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
 23f2d22:	2e00      	cmp	r6, #0
 23f2d24:	d0c7      	beq.n	23f2cb6 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 23f2d26:	4642      	mov	r2, r8
 23f2d28:	6921      	ldr	r1, [r4, #16]
 23f2d2a:	68a0      	ldr	r0, [r4, #8]
 23f2d2c:	f002 fca2 	bl	23f5674 <_ZN12FatPartition6fatGetEmPm>
 23f2d30:	2800      	cmp	r0, #0
 23f2d32:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 23f2d36:	dcf4      	bgt.n	23f2d22 <_ZN7FatFile7seekSetEm+0x84>
 23f2d38:	e7c9      	b.n	23f2cce <_ZN7FatFile7seekSetEm+0x30>
    nNew -= nCur;
 23f2d3a:	1af6      	subs	r6, r6, r3
 23f2d3c:	e7ef      	b.n	23f2d1e <_ZN7FatFile7seekSetEm+0x80>

023f2d3e <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
 23f2d3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f2d40:	460f      	mov	r7, r1
 23f2d42:	4604      	mov	r4, r0
 23f2d44:	4616      	mov	r6, r2
  memset(this, 0, sizeof(FatFile));
 23f2d46:	2100      	movs	r1, #0
 23f2d48:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
 23f2d4a:	461d      	mov	r5, r3
  memset(this, 0, sizeof(FatFile));
 23f2d4c:	f009 fcd7 	bl	23fc6fe <memset>
  m_vol = dirFile->m_vol;
 23f2d50:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 23f2d52:	80a6      	strh	r6, [r4, #4]
  m_vol = dirFile->m_vol;
 23f2d54:	60a0      	str	r0, [r4, #8]
  m_dirCluster = dirFile->m_firstCluster;
 23f2d56:	6a3b      	ldr	r3, [r7, #32]
 23f2d58:	f100 0234 	add.w	r2, r0, #52	; 0x34
  dir += 0XF & dirIndex;
 23f2d5c:	f006 060f 	and.w	r6, r6, #15
  m_dirCluster = dirFile->m_firstCluster;
 23f2d60:	60e3      	str	r3, [r4, #12]
  dir += 0XF & dirIndex;
 23f2d62:	eb02 1246 	add.w	r2, r2, r6, lsl #5

static inline bool isFatFile(const DirFat_t* dir) {
  return (dir->attributes & (FS_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFatFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
 23f2d66:	7ad3      	ldrb	r3, [r2, #11]
  if (!isFatFileOrSubdir(dir)) {
 23f2d68:	0719      	lsls	r1, r3, #28
 23f2d6a:	d43f      	bmi.n	23f2dec <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
  m_attributes = dir->attributes & FS_ATTRIB_COPY;
 23f2d6c:	f003 0337 	and.w	r3, r3, #55	; 0x37
 23f2d70:	7023      	strb	r3, [r4, #0]
  if (isFatFile(dir)) {
 23f2d72:	7ad1      	ldrb	r1, [r2, #11]
 23f2d74:	f011 0f18 	tst.w	r1, #24
    m_attributes |= FILE_ATTR_FILE;
 23f2d78:	bf04      	itt	eq
 23f2d7a:	f043 0308 	orreq.w	r3, r3, #8
 23f2d7e:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
 23f2d80:	f89d 3018 	ldrb.w	r3, [sp, #24]
 23f2d84:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
 23f2d86:	f005 0303 	and.w	r3, r5, #3
 23f2d8a:	2b01      	cmp	r3, #1
 23f2d8c:	d028      	beq.n	23f2de0 <_ZN7FatFile15openCachedEntryEPS_tih+0xa2>
 23f2d8e:	2b02      	cmp	r3, #2
 23f2d90:	d024      	beq.n	23f2ddc <_ZN7FatFile15openCachedEntryEPS_tih+0x9e>
 23f2d92:	bb5b      	cbnz	r3, 23f2dec <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
      if (oflag & O_TRUNC) {
 23f2d94:	056b      	lsls	r3, r5, #21
 23f2d96:	d429      	bmi.n	23f2dec <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
      m_flags = FILE_FLAG_READ;
 23f2d98:	2301      	movs	r3, #1
      m_flags = FILE_FLAG_WRITE;
 23f2d9a:	70a3      	strb	r3, [r4, #2]
  if (m_flags & FILE_FLAG_WRITE) {
 23f2d9c:	78a1      	ldrb	r1, [r4, #2]
 23f2d9e:	078f      	lsls	r7, r1, #30
 23f2da0:	d507      	bpl.n	23f2db2 <_ZN7FatFile15openCachedEntryEPS_tih+0x74>
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
 23f2da2:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
 23f2da4:	06de      	lsls	r6, r3, #27
 23f2da6:	d421      	bmi.n	23f2dec <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
 23f2da8:	07df      	lsls	r7, r3, #31
 23f2daa:	d41f      	bmi.n	23f2dec <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
    m_attributes |= FS_ATTRIB_ARCHIVE;
 23f2dac:	f043 0320 	orr.w	r3, r3, #32
 23f2db0:	7023      	strb	r3, [r4, #0]
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
 23f2db2:	f005 0308 	and.w	r3, r5, #8
 23f2db6:	430b      	orrs	r3, r1
 23f2db8:	70a3      	strb	r3, [r4, #2]
  uint32_t sector() { return m_sector; }
 23f2dba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if (oflag & O_TRUNC) {
 23f2dbc:	056e      	lsls	r6, r5, #21
  m_dirSector = m_vol->cacheSectorNumber();
 23f2dbe:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
 23f2dc0:	8a93      	ldrh	r3, [r2, #20]
                 getLe16(dir->firstClusterLow);
 23f2dc2:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
 23f2dc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  if (oflag & O_TRUNC) {
 23f2dc8:	d514      	bpl.n	23f2df4 <_ZN7FatFile15openCachedEntryEPS_tih+0xb6>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 23f2dca:	b959      	cbnz	r1, 23f2de4 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
 23f2dcc:	78a3      	ldrb	r3, [r4, #2]
 23f2dce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 23f2dd2:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 23f2dd4:	046b      	lsls	r3, r5, #17
 23f2dd6:	d411      	bmi.n	23f2dfc <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
  return true;
 23f2dd8:	2001      	movs	r0, #1
}
 23f2dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
 23f2ddc:	2303      	movs	r3, #3
 23f2dde:	e7dc      	b.n	23f2d9a <_ZN7FatFile15openCachedEntryEPS_tih+0x5c>
      m_flags = FILE_FLAG_WRITE;
 23f2de0:	2302      	movs	r3, #2
 23f2de2:	e7da      	b.n	23f2d9a <_ZN7FatFile15openCachedEntryEPS_tih+0x5c>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 23f2de4:	f002 fce6 	bl	23f57b4 <_ZN12FatPartition9freeChainEm>
 23f2de8:	2800      	cmp	r0, #0
 23f2dea:	d1ef      	bne.n	23f2dcc <_ZN7FatFile15openCachedEntryEPS_tih+0x8e>
  m_attributes = FILE_ATTR_CLOSED;
 23f2dec:	2000      	movs	r0, #0
 23f2dee:	7020      	strb	r0, [r4, #0]
  m_flags = 0;
 23f2df0:	70a0      	strb	r0, [r4, #2]
  return false;
 23f2df2:	e7f2      	b.n	23f2dda <_ZN7FatFile15openCachedEntryEPS_tih+0x9c>
    m_firstCluster = firstCluster;
 23f2df4:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
 23f2df6:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
 23f2df8:	61e3      	str	r3, [r4, #28]
 23f2dfa:	e7eb      	b.n	23f2dd4 <_ZN7FatFile15openCachedEntryEPS_tih+0x96>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 23f2dfc:	4620      	mov	r0, r4
 23f2dfe:	69e1      	ldr	r1, [r4, #28]
 23f2e00:	f7ff ff4d 	bl	23f2c9e <_ZN7FatFile7seekSetEm>
 23f2e04:	2800      	cmp	r0, #0
 23f2e06:	d1e7      	bne.n	23f2dd8 <_ZN7FatFile15openCachedEntryEPS_tih+0x9a>
 23f2e08:	e7f0      	b.n	23f2dec <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
	...

023f2e0c <_ZN7FatFile4syncEv>:
//------------------------------------------------------------------------------
bool FatFile::sync() {
 23f2e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
 23f2e0e:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
 23f2e10:	4604      	mov	r4, r0
  if (!isOpen()) {
 23f2e12:	2b00      	cmp	r3, #0
 23f2e14:	d039      	beq.n	23f2e8a <_ZN7FatFile4syncEv+0x7e>
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
 23f2e16:	f990 3002 	ldrsb.w	r3, [r0, #2]
 23f2e1a:	2b00      	cmp	r3, #0
 23f2e1c:	da2f      	bge.n	23f2e7e <_ZN7FatFile4syncEv+0x72>
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
 23f2e1e:	2101      	movs	r1, #1
 23f2e20:	f7ff fe1c 	bl	23f2a5c <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
 23f2e24:	4605      	mov	r5, r0
 23f2e26:	b930      	cbnz	r0, 23f2e36 <_ZN7FatFile4syncEv+0x2a>
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
 23f2e28:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
 23f2e2a:	7863      	ldrb	r3, [r4, #1]
 23f2e2c:	f043 0301 	orr.w	r3, r3, #1
 23f2e30:	7063      	strb	r3, [r4, #1]
}
 23f2e32:	b003      	add	sp, #12
 23f2e34:	bd30      	pop	{r4, r5, pc}
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
 23f2e36:	7803      	ldrb	r3, [r0, #0]
 23f2e38:	2be5      	cmp	r3, #229	; 0xe5
 23f2e3a:	d0f5      	beq.n	23f2e28 <_ZN7FatFile4syncEv+0x1c>
    dir->attributes = m_attributes & FS_ATTRIB_COPY;
 23f2e3c:	7823      	ldrb	r3, [r4, #0]
 23f2e3e:	f003 0337 	and.w	r3, r3, #55	; 0x37
 23f2e42:	72c3      	strb	r3, [r0, #11]
    if (isFile()) {
 23f2e44:	7823      	ldrb	r3, [r4, #0]
 23f2e46:	071b      	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
 23f2e48:	bf44      	itt	mi
 23f2e4a:	69e3      	ldrmi	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
 23f2e4c:	61c3      	strmi	r3, [r0, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
 23f2e4e:	6a23      	ldr	r3, [r4, #32]
 23f2e50:	8343      	strh	r3, [r0, #26]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
 23f2e52:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 23f2e54:	8283      	strh	r3, [r0, #20]
    if (FsDateTime::callback) {
 23f2e56:	4b0e      	ldr	r3, [pc, #56]	; (23f2e90 <_ZN7FatFile4syncEv+0x84>)
 23f2e58:	681b      	ldr	r3, [r3, #0]
 23f2e5a:	b163      	cbz	r3, 23f2e76 <_ZN7FatFile4syncEv+0x6a>
      FsDateTime::callback(&date, &time, &ms10);
 23f2e5c:	f10d 0203 	add.w	r2, sp, #3
 23f2e60:	f10d 0106 	add.w	r1, sp, #6
 23f2e64:	a801      	add	r0, sp, #4
 23f2e66:	4798      	blx	r3
      setLe16(dir->modifyDate, date);
 23f2e68:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
 23f2e6c:	832b      	strh	r3, [r5, #24]
 23f2e6e:	826b      	strh	r3, [r5, #18]
 23f2e70:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 23f2e74:	82eb      	strh	r3, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
 23f2e76:	78a3      	ldrb	r3, [r4, #2]
 23f2e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 23f2e7c:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
 23f2e7e:	68a0      	ldr	r0, [r4, #8]
 23f2e80:	f7ff fd7a 	bl	23f2978 <_ZN12FatPartition9cacheSyncEv>
 23f2e84:	2800      	cmp	r0, #0
 23f2e86:	d0cf      	beq.n	23f2e28 <_ZN7FatFile4syncEv+0x1c>
 23f2e88:	e7d3      	b.n	23f2e32 <_ZN7FatFile4syncEv+0x26>
    return true;
 23f2e8a:	2001      	movs	r0, #1
 23f2e8c:	e7d1      	b.n	23f2e32 <_ZN7FatFile4syncEv+0x26>
 23f2e8e:	bf00      	nop
 23f2e90:	1007aea8 	.word	0x1007aea8

023f2e94 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
 23f2e94:	b510      	push	{r4, lr}
 23f2e96:	4604      	mov	r4, r0
  bool rtn = sync();
 23f2e98:	f7ff ffb8 	bl	23f2e0c <_ZN7FatFile4syncEv>
  m_attributes = FILE_ATTR_CLOSED;
 23f2e9c:	2300      	movs	r3, #0
 23f2e9e:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
 23f2ea0:	70a3      	strb	r3, [r4, #2]
}
 23f2ea2:	bd10      	pop	{r4, pc}

023f2ea4 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 23f2ea4:	b570      	push	{r4, r5, r6, lr}
 23f2ea6:	461e      	mov	r6, r3
  FatFile() {}
 23f2ea8:	2300      	movs	r3, #0
 23f2eaa:	b094      	sub	sp, #80	; 0x50
 23f2eac:	930b      	str	r3, [sp, #44]	; 0x2c
  if (isOpen() || !dirFile->isDir()) {
 23f2eae:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 23f2eb0:	4605      	mov	r5, r0
 23f2eb2:	460c      	mov	r4, r1
 23f2eb4:	9201      	str	r2, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
 23f2eb6:	b113      	cbz	r3, 23f2ebe <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
 23f2eb8:	2000      	movs	r0, #0
}
 23f2eba:	b014      	add	sp, #80	; 0x50
 23f2ebc:	bd70      	pop	{r4, r5, r6, pc}
  if (isOpen() || !dirFile->isDir()) {
 23f2ebe:	780b      	ldrb	r3, [r1, #0]
 23f2ec0:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 23f2ec4:	d0f8      	beq.n	23f2eb8 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
 23f2ec6:	7813      	ldrb	r3, [r2, #0]
 23f2ec8:	2b2f      	cmp	r3, #47	; 0x2f
 23f2eca:	d112      	bne.n	23f2ef2 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
 23f2ecc:	9a01      	ldr	r2, [sp, #4]
 23f2ece:	7813      	ldrb	r3, [r2, #0]
 23f2ed0:	2b2f      	cmp	r3, #47	; 0x2f
 23f2ed2:	d102      	bne.n	23f2eda <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
 23f2ed4:	3201      	adds	r2, #1
 23f2ed6:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
 23f2ed8:	e7f8      	b.n	23f2ecc <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
 23f2eda:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
 23f2edc:	b91b      	cbnz	r3, 23f2ee6 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
 23f2ede:	4628      	mov	r0, r5
 23f2ee0:	f7ff fdcb 	bl	23f2a7a <_ZN7FatFile8openRootEP9FatVolume>
 23f2ee4:	e7e9      	b.n	23f2eba <_ZN7FatFile4openEPS_PKci+0x16>
  bool isOpen() const { return m_attributes; }
 23f2ee6:	a80b      	add	r0, sp, #44	; 0x2c
 23f2ee8:	f7ff fd30 	bl	23f294c <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 23f2eec:	2800      	cmp	r0, #0
 23f2eee:	d0e3      	beq.n	23f2eb8 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
 23f2ef0:	ac0b      	add	r4, sp, #44	; 0x2c
    if (!parsePathName(path, &fname, &path)) {
 23f2ef2:	4628      	mov	r0, r5
 23f2ef4:	9901      	ldr	r1, [sp, #4]
 23f2ef6:	ab01      	add	r3, sp, #4
 23f2ef8:	aa03      	add	r2, sp, #12
 23f2efa:	f000 fc95 	bl	23f3828 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_>
 23f2efe:	2800      	cmp	r0, #0
 23f2f00:	d0da      	beq.n	23f2eb8 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
 23f2f02:	9b01      	ldr	r3, [sp, #4]
 23f2f04:	781b      	ldrb	r3, [r3, #0]
 23f2f06:	b17b      	cbz	r3, 23f2f28 <_ZN7FatFile4openEPS_PKci+0x84>
    if (!open(dirFile, &fname, O_RDONLY)) {
 23f2f08:	2300      	movs	r3, #0
 23f2f0a:	4621      	mov	r1, r4
 23f2f0c:	4628      	mov	r0, r5
 23f2f0e:	aa03      	add	r2, sp, #12
 23f2f10:	f000 fb4a 	bl	23f35a8 <_ZN7FatFile4openEPS_P8FatLfn_ti>
 23f2f14:	2800      	cmp	r0, #0
 23f2f16:	d0cf      	beq.n	23f2eb8 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir.copy(this);
 23f2f18:	a80b      	add	r0, sp, #44	; 0x2c
 23f2f1a:	4629      	mov	r1, r5
 23f2f1c:	f7ff fd3e 	bl	23f299c <_ZN7FatFile4copyEPKS_>
    close();
 23f2f20:	4628      	mov	r0, r5
 23f2f22:	f7ff ffb7 	bl	23f2e94 <_ZN7FatFile5closeEv>
  while (1) {
 23f2f26:	e7e3      	b.n	23f2ef0 <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
 23f2f28:	4633      	mov	r3, r6
 23f2f2a:	4621      	mov	r1, r4
 23f2f2c:	4628      	mov	r0, r5
 23f2f2e:	aa03      	add	r2, sp, #12
 23f2f30:	f000 fb3a 	bl	23f35a8 <_ZN7FatFile4openEPS_P8FatLfn_ti>
 23f2f34:	e7c1      	b.n	23f2eba <_ZN7FatFile4openEPS_PKci+0x16>

023f2f36 <_ZN7FatFile4openEP9FatVolumePKci>:
  return vol && open(vol->vwd(), path, oflag);
 23f2f36:	b119      	cbz	r1, 23f2f40 <_ZN7FatFile4openEP9FatVolumePKci+0xa>
 23f2f38:	f201 4144 	addw	r1, r1, #1092	; 0x444
 23f2f3c:	f7ff bfb2 	b.w	23f2ea4 <_ZN7FatFile4openEPS_PKci>
}
 23f2f40:	4608      	mov	r0, r1
 23f2f42:	4770      	bx	lr

023f2f44 <_ZN7FatFile5mkdirEPS_P8FatLfn_t>:
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
 23f2f44:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!parent->isDir()) {
 23f2f46:	780b      	ldrb	r3, [r1, #0]
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
 23f2f48:	4604      	mov	r4, r0
  if (!parent->isDir()) {
 23f2f4a:	f013 0fd0 	tst.w	r3, #208	; 0xd0
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
 23f2f4e:	460e      	mov	r6, r1
 23f2f50:	b089      	sub	sp, #36	; 0x24
  if (!parent->isDir()) {
 23f2f52:	d102      	bne.n	23f2f5a <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x16>
  return false;
 23f2f54:	2000      	movs	r0, #0
}
 23f2f56:	b009      	add	sp, #36	; 0x24
 23f2f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
 23f2f5a:	f640 2302 	movw	r3, #2562	; 0xa02
 23f2f5e:	f000 fb23 	bl	23f35a8 <_ZN7FatFile4openEPS_P8FatLfn_ti>
 23f2f62:	2800      	cmp	r0, #0
 23f2f64:	d0f6      	beq.n	23f2f54 <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x10>
  m_flags = FILE_FLAG_READ;
 23f2f66:	2701      	movs	r7, #1
  m_attributes = FILE_ATTR_SUBDIR;
 23f2f68:	2510      	movs	r5, #16
  if (!addDirCluster()) {
 23f2f6a:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ;
 23f2f6c:	70a7      	strb	r7, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
 23f2f6e:	7025      	strb	r5, [r4, #0]
  if (!addDirCluster()) {
 23f2f70:	f7ff fd3c 	bl	23f29ec <_ZN7FatFile13addDirClusterEv>
 23f2f74:	2800      	cmp	r0, #0
 23f2f76:	d0ed      	beq.n	23f2f54 <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x10>
  m_firstCluster = m_curCluster;
 23f2f78:	6923      	ldr	r3, [r4, #16]
   *
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() { seekSet(0UL); }
 23f2f7a:	2100      	movs	r1, #0
 23f2f7c:	4620      	mov	r0, r4
 23f2f7e:	6223      	str	r3, [r4, #32]
 23f2f80:	f7ff fe8d 	bl	23f2c9e <_ZN7FatFile7seekSetEm>
  if (!sync()) {
 23f2f84:	4620      	mov	r0, r4
 23f2f86:	f7ff ff41 	bl	23f2e0c <_ZN7FatFile4syncEv>
 23f2f8a:	2800      	cmp	r0, #0
 23f2f8c:	d0e2      	beq.n	23f2f54 <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x10>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
 23f2f8e:	4639      	mov	r1, r7
 23f2f90:	4620      	mov	r0, r4
 23f2f92:	f7ff fd63 	bl	23f2a5c <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
 23f2f96:	2800      	cmp	r0, #0
 23f2f98:	d0dc      	beq.n	23f2f54 <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x10>
  memcpy(&dot, dir, sizeof(dot));
 23f2f9a:	466a      	mov	r2, sp
  dir->attributes = FS_ATTRIB_DIRECTORY;
 23f2f9c:	72c5      	strb	r5, [r0, #11]
  memcpy(&dot, dir, sizeof(dot));
 23f2f9e:	4603      	mov	r3, r0
 23f2fa0:	4615      	mov	r5, r2
 23f2fa2:	f100 0c20 	add.w	ip, r0, #32
 23f2fa6:	4617      	mov	r7, r2
 23f2fa8:	6818      	ldr	r0, [r3, #0]
 23f2faa:	6859      	ldr	r1, [r3, #4]
 23f2fac:	3308      	adds	r3, #8
 23f2fae:	c703      	stmia	r7!, {r0, r1}
 23f2fb0:	4563      	cmp	r3, ip
 23f2fb2:	463a      	mov	r2, r7
 23f2fb4:	d1f7      	bne.n	23f2fa6 <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x62>
    dot.name[i] = ' ';
 23f2fb6:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
  sector = m_vol->clusterStartSector(m_firstCluster);
 23f2fba:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
 23f2fbc:	6a21      	ldr	r1, [r4, #32]
    dot.name[i] = ' ';
 23f2fbe:	f8cd 3001 	str.w	r3, [sp, #1]
 23f2fc2:	f8cd 3005 	str.w	r3, [sp, #5]
 23f2fc6:	f8ad 3009 	strh.w	r3, [sp, #9]
 23f2fca:	7983      	ldrb	r3, [r0, #6]
 23f2fcc:	3902      	subs	r1, #2
 23f2fce:	4099      	lsls	r1, r3
 23f2fd0:	6943      	ldr	r3, [r0, #20]
    return m_cache.prepare(sector, options);
 23f2fd2:	2201      	movs	r2, #1
 23f2fd4:	4419      	add	r1, r3
 23f2fd6:	3024      	adds	r0, #36	; 0x24
 23f2fd8:	f002 fde7 	bl	23f5baa <_ZN7FsCache7prepareEmh>
  if (!dir) {
 23f2fdc:	4603      	mov	r3, r0
 23f2fde:	2800      	cmp	r0, #0
 23f2fe0:	d0b8      	beq.n	23f2f54 <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x10>
  memcpy(&dir[0], &dot, sizeof(dot));
 23f2fe2:	222e      	movs	r2, #46	; 0x2e
 23f2fe4:	46ac      	mov	ip, r5
 23f2fe6:	4607      	mov	r7, r0
 23f2fe8:	f88d 2000 	strb.w	r2, [sp]
 23f2fec:	f10d 0e20 	add.w	lr, sp, #32
 23f2ff0:	4662      	mov	r2, ip
 23f2ff2:	ca03      	ldmia	r2!, {r0, r1}
 23f2ff4:	4572      	cmp	r2, lr
 23f2ff6:	6038      	str	r0, [r7, #0]
 23f2ff8:	6079      	str	r1, [r7, #4]
 23f2ffa:	4694      	mov	ip, r2
 23f2ffc:	f107 0708 	add.w	r7, r7, #8
 23f3000:	d1f6      	bne.n	23f2ff0 <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0xac>
  dot.name[1] = '.';
 23f3002:	222e      	movs	r2, #46	; 0x2e
 23f3004:	f88d 2001 	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
 23f3008:	6a32      	ldr	r2, [r6, #32]
  memcpy(&dir[1], &dot, sizeof(dot));
 23f300a:	3320      	adds	r3, #32
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
 23f300c:	0c11      	lsrs	r1, r2, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
 23f300e:	f8ad 201a 	strh.w	r2, [sp, #26]
  memcpy(&dir[1], &dot, sizeof(dot));
 23f3012:	462a      	mov	r2, r5
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
 23f3014:	f8ad 1014 	strh.w	r1, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
 23f3018:	ae08      	add	r6, sp, #32
 23f301a:	4615      	mov	r5, r2
 23f301c:	cd03      	ldmia	r5!, {r0, r1}
 23f301e:	42b5      	cmp	r5, r6
 23f3020:	6018      	str	r0, [r3, #0]
 23f3022:	6059      	str	r1, [r3, #4]
 23f3024:	462a      	mov	r2, r5
 23f3026:	f103 0308 	add.w	r3, r3, #8
 23f302a:	d1f6      	bne.n	23f301a <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0xd6>
  return m_vol->cacheSync();
 23f302c:	68a0      	ldr	r0, [r4, #8]
 23f302e:	f7ff fca3 	bl	23f2978 <_ZN12FatPartition9cacheSyncEv>
 23f3032:	e790      	b.n	23f2f56 <_ZN7FatFile5mkdirEPS_P8FatLfn_t+0x12>

023f3034 <_ZN7FatFile5mkdirEPS_PKcb>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
 23f3034:	b570      	push	{r4, r5, r6, lr}
 23f3036:	461e      	mov	r6, r3
  FatFile() {}
 23f3038:	2300      	movs	r3, #0
 23f303a:	b094      	sub	sp, #80	; 0x50
 23f303c:	930b      	str	r3, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
 23f303e:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
 23f3040:	4605      	mov	r5, r0
 23f3042:	460c      	mov	r4, r1
 23f3044:	9201      	str	r2, [sp, #4]
  if (isOpen() || !parent->isDir()) {
 23f3046:	b113      	cbz	r3, 23f304e <_ZN7FatFile5mkdirEPS_PKcb+0x1a>
  return false;
 23f3048:	2000      	movs	r0, #0
}
 23f304a:	b014      	add	sp, #80	; 0x50
 23f304c:	bd70      	pop	{r4, r5, r6, pc}
  if (isOpen() || !parent->isDir()) {
 23f304e:	780b      	ldrb	r3, [r1, #0]
 23f3050:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 23f3054:	d0f8      	beq.n	23f3048 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
  if (isDirSeparator(*path)) {
 23f3056:	7813      	ldrb	r3, [r2, #0]
 23f3058:	2b2f      	cmp	r3, #47	; 0x2f
 23f305a:	d10d      	bne.n	23f3078 <_ZN7FatFile5mkdirEPS_PKcb+0x44>
    while (isDirSeparator(*path)) {
 23f305c:	9a01      	ldr	r2, [sp, #4]
 23f305e:	7813      	ldrb	r3, [r2, #0]
 23f3060:	2b2f      	cmp	r3, #47	; 0x2f
 23f3062:	d102      	bne.n	23f306a <_ZN7FatFile5mkdirEPS_PKcb+0x36>
      path++;
 23f3064:	3201      	adds	r2, #1
 23f3066:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
 23f3068:	e7f8      	b.n	23f305c <_ZN7FatFile5mkdirEPS_PKcb+0x28>
  bool isOpen() const { return m_attributes; }
 23f306a:	68a1      	ldr	r1, [r4, #8]
 23f306c:	a80b      	add	r0, sp, #44	; 0x2c
 23f306e:	f7ff fc6d 	bl	23f294c <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(parent->m_vol)) {
 23f3072:	2800      	cmp	r0, #0
 23f3074:	d0e8      	beq.n	23f3048 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
    parent = &tmpDir;
 23f3076:	ac0b      	add	r4, sp, #44	; 0x2c
    if (!parsePathName(path, &fname, &path)) {
 23f3078:	4628      	mov	r0, r5
 23f307a:	9901      	ldr	r1, [sp, #4]
 23f307c:	ab01      	add	r3, sp, #4
 23f307e:	aa03      	add	r2, sp, #12
 23f3080:	f000 fbd2 	bl	23f3828 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_>
 23f3084:	2800      	cmp	r0, #0
 23f3086:	d0df      	beq.n	23f3048 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
    if (!*path) {
 23f3088:	9b01      	ldr	r3, [sp, #4]
 23f308a:	781b      	ldrb	r3, [r3, #0]
 23f308c:	b1c3      	cbz	r3, 23f30c0 <_ZN7FatFile5mkdirEPS_PKcb+0x8c>
    if (!open(parent, &fname, O_RDONLY)) {
 23f308e:	2300      	movs	r3, #0
 23f3090:	4621      	mov	r1, r4
 23f3092:	4628      	mov	r0, r5
 23f3094:	aa03      	add	r2, sp, #12
 23f3096:	f000 fa87 	bl	23f35a8 <_ZN7FatFile4openEPS_P8FatLfn_ti>
 23f309a:	b138      	cbz	r0, 23f30ac <_ZN7FatFile5mkdirEPS_PKcb+0x78>
    tmpDir.copy(this);
 23f309c:	a80b      	add	r0, sp, #44	; 0x2c
 23f309e:	4629      	mov	r1, r5
 23f30a0:	f7ff fc7c 	bl	23f299c <_ZN7FatFile4copyEPKS_>
    close();
 23f30a4:	4628      	mov	r0, r5
 23f30a6:	f7ff fef5 	bl	23f2e94 <_ZN7FatFile5closeEv>
  while (1) {
 23f30aa:	e7e4      	b.n	23f3076 <_ZN7FatFile5mkdirEPS_PKcb+0x42>
      if (!pFlag || !mkdir(parent, &fname)) {
 23f30ac:	2e00      	cmp	r6, #0
 23f30ae:	d0cb      	beq.n	23f3048 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
 23f30b0:	4621      	mov	r1, r4
 23f30b2:	4628      	mov	r0, r5
 23f30b4:	aa03      	add	r2, sp, #12
 23f30b6:	f7ff ff45 	bl	23f2f44 <_ZN7FatFile5mkdirEPS_P8FatLfn_t>
 23f30ba:	2800      	cmp	r0, #0
 23f30bc:	d1ee      	bne.n	23f309c <_ZN7FatFile5mkdirEPS_PKcb+0x68>
 23f30be:	e7c3      	b.n	23f3048 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
  return mkdir(parent, &fname);
 23f30c0:	4621      	mov	r1, r4
 23f30c2:	4628      	mov	r0, r5
 23f30c4:	aa03      	add	r2, sp, #12
 23f30c6:	f7ff ff3d 	bl	23f2f44 <_ZN7FatFile5mkdirEPS_P8FatLfn_t>
 23f30ca:	e7be      	b.n	23f304a <_ZN7FatFile5mkdirEPS_PKcb+0x16>

023f30cc <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
 23f30cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
 23f30d0:	7883      	ldrb	r3, [r0, #2]
 23f30d2:	4688      	mov	r8, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
 23f30d4:	0799      	lsls	r1, r3, #30
size_t FatFile::write(const void* buf, size_t nbyte) {
 23f30d6:	4604      	mov	r4, r0
 23f30d8:	4691      	mov	r9, r2
  if (!isWritable()) {
 23f30da:	d544      	bpl.n	23f3166 <_ZN7FatFile5writeEPKvj+0x9a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
 23f30dc:	071a      	lsls	r2, r3, #28
 23f30de:	d43d      	bmi.n	23f315c <_ZN7FatFile5writeEPKvj+0x90>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 23f30e0:	6963      	ldr	r3, [r4, #20]
 23f30e2:	43db      	mvns	r3, r3
 23f30e4:	454b      	cmp	r3, r9
 23f30e6:	d33e      	bcc.n	23f3166 <_ZN7FatFile5writeEPKvj+0x9a>
 23f30e8:	464f      	mov	r7, r9
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f30ea:	f104 0a10 	add.w	sl, r4, #16
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
 23f30ee:	6962      	ldr	r2, [r4, #20]
  while (nToWrite) {
 23f30f0:	2f00      	cmp	r7, #0
 23f30f2:	f000 809e 	beq.w	23f3232 <_ZN7FatFile5writeEPKvj+0x166>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
 23f30f6:	68a0      	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
 23f30f8:	f3c2 0508 	ubfx	r5, r2, #0, #9
    return (position >> 9) & m_clusterSectorMask;
 23f30fc:	7946      	ldrb	r6, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
 23f30fe:	ea16 2652 	ands.w	r6, r6, r2, lsr #9
 23f3102:	d10b      	bne.n	23f311c <_ZN7FatFile5writeEPKvj+0x50>
 23f3104:	b955      	cbnz	r5, 23f311c <_ZN7FatFile5writeEPKvj+0x50>
      if (m_curCluster != 0) {
 23f3106:	6921      	ldr	r1, [r4, #16]
 23f3108:	2900      	cmp	r1, #0
 23f310a:	d03f      	beq.n	23f318c <_ZN7FatFile5writeEPKvj+0xc0>
        if (isContiguous() && m_fileSize > m_curPosition) {
 23f310c:	78a3      	ldrb	r3, [r4, #2]
 23f310e:	065b      	lsls	r3, r3, #25
 23f3110:	d530      	bpl.n	23f3174 <_ZN7FatFile5writeEPKvj+0xa8>
 23f3112:	69e3      	ldr	r3, [r4, #28]
 23f3114:	4293      	cmp	r3, r2
 23f3116:	d92d      	bls.n	23f3174 <_ZN7FatFile5writeEPKvj+0xa8>
          m_curCluster++;
 23f3118:	3101      	adds	r1, #1
 23f311a:	6121      	str	r1, [r4, #16]
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
 23f311c:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
 23f311e:	6921      	ldr	r1, [r4, #16]
 23f3120:	7983      	ldrb	r3, [r0, #6]
 23f3122:	3902      	subs	r1, #2
 23f3124:	4099      	lsls	r1, r3
 23f3126:	6943      	ldr	r3, [r0, #20]
 23f3128:	4419      	add	r1, r3
 23f312a:	4431      	add	r1, r6

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
 23f312c:	2d00      	cmp	r5, #0
 23f312e:	d139      	bne.n	23f31a4 <_ZN7FatFile5writeEPKvj+0xd8>
 23f3130:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 23f3134:	d336      	bcc.n	23f31a4 <_ZN7FatFile5writeEPKvj+0xd8>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2 * m_vol->bytesPerSector()) {
 23f3136:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 23f313a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 23f313c:	d260      	bcs.n	23f3200 <_ZN7FatFile5writeEPKvj+0x134>
    if (isCached(sector)) {
 23f313e:	4291      	cmp	r1, r2
    m_sector = 0XFFFFFFFF;
 23f3140:	bf02      	ittt	eq
 23f3142:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
 23f3146:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
 23f314a:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeSector(sector, src);
 23f314c:	4642      	mov	r2, r8
 23f314e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 23f3150:	f000 fe7f 	bl	23f3e52 <_ZN9SdSpiCard11writeSectorEmPKh>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
 23f3154:	b138      	cbz	r0, 23f3166 <_ZN7FatFile5writeEPKvj+0x9a>
      n = m_vol->bytesPerSector();
 23f3156:	f44f 7600 	mov.w	r6, #512	; 0x200
 23f315a:	e047      	b.n	23f31ec <_ZN7FatFile5writeEPKvj+0x120>
    if (!seekSet(m_fileSize)) {
 23f315c:	69c1      	ldr	r1, [r0, #28]
 23f315e:	f7ff fd9e 	bl	23f2c9e <_ZN7FatFile7seekSetEm>
 23f3162:	2800      	cmp	r0, #0
 23f3164:	d1bc      	bne.n	23f30e0 <_ZN7FatFile5writeEPKvj+0x14>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 23f3166:	7863      	ldrb	r3, [r4, #1]
  return 0;
 23f3168:	f04f 0900 	mov.w	r9, #0
  m_error |= WRITE_ERROR;
 23f316c:	f043 0301 	orr.w	r3, r3, #1
 23f3170:	7063      	strb	r3, [r4, #1]
  return 0;
 23f3172:	e06b      	b.n	23f324c <_ZN7FatFile5writeEPKvj+0x180>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f3174:	4652      	mov	r2, sl
 23f3176:	f002 fa7d 	bl	23f5674 <_ZN12FatPartition6fatGetEmPm>
          if (fg < 0) {
 23f317a:	2800      	cmp	r0, #0
 23f317c:	dbf3      	blt.n	23f3166 <_ZN7FatFile5writeEPKvj+0x9a>
        if (fg == 0) {
 23f317e:	d1cd      	bne.n	23f311c <_ZN7FatFile5writeEPKvj+0x50>
          if (!addCluster()) {
 23f3180:	4620      	mov	r0, r4
 23f3182:	f7ff fc17 	bl	23f29b4 <_ZN7FatFile10addClusterEv>
 23f3186:	2800      	cmp	r0, #0
 23f3188:	d1c8      	bne.n	23f311c <_ZN7FatFile5writeEPKvj+0x50>
 23f318a:	e7ec      	b.n	23f3166 <_ZN7FatFile5writeEPKvj+0x9a>
        if (m_firstCluster == 0) {
 23f318c:	6a23      	ldr	r3, [r4, #32]
 23f318e:	b93b      	cbnz	r3, 23f31a0 <_ZN7FatFile5writeEPKvj+0xd4>
          if (!addCluster()) {
 23f3190:	4620      	mov	r0, r4
 23f3192:	f7ff fc0f 	bl	23f29b4 <_ZN7FatFile10addClusterEv>
 23f3196:	2800      	cmp	r0, #0
 23f3198:	d0e5      	beq.n	23f3166 <_ZN7FatFile5writeEPKvj+0x9a>
          m_firstCluster = m_curCluster;
 23f319a:	6923      	ldr	r3, [r4, #16]
 23f319c:	6223      	str	r3, [r4, #32]
 23f319e:	e7bd      	b.n	23f311c <_ZN7FatFile5writeEPKvj+0x50>
          m_curCluster = m_firstCluster;
 23f31a0:	6123      	str	r3, [r4, #16]
 23f31a2:	e7bb      	b.n	23f311c <_ZN7FatFile5writeEPKvj+0x50>
      n = m_vol->bytesPerSector() - sectorOffset;
 23f31a4:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      if (n > nToWrite) {
 23f31a8:	42be      	cmp	r6, r7
 23f31aa:	bf28      	it	cs
 23f31ac:	463e      	movcs	r6, r7
      if (sectorOffset == 0 &&
 23f31ae:	bb1d      	cbnz	r5, 23f31f8 <_ZN7FatFile5writeEPKvj+0x12c>
 23f31b0:	6962      	ldr	r2, [r4, #20]
 23f31b2:	69e3      	ldr	r3, [r4, #28]
 23f31b4:	429a      	cmp	r2, r3
 23f31b6:	d221      	bcs.n	23f31fc <_ZN7FatFile5writeEPKvj+0x130>
          (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
 23f31b8:	78a3      	ldrb	r3, [r4, #2]
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
 23f31ba:	f013 0f20 	tst.w	r3, #32
 23f31be:	bf0c      	ite	eq
 23f31c0:	2201      	moveq	r2, #1
 23f31c2:	2205      	movne	r2, #5
    return m_cache.prepare(sector, options);
 23f31c4:	3024      	adds	r0, #36	; 0x24
 23f31c6:	f002 fcf0 	bl	23f5baa <_ZN7FsCache7prepareEmh>
      if (!pc) {
 23f31ca:	2800      	cmp	r0, #0
 23f31cc:	d0cb      	beq.n	23f3166 <_ZN7FatFile5writeEPKvj+0x9a>
      memcpy(dst, src, n);
 23f31ce:	4428      	add	r0, r5
 23f31d0:	4632      	mov	r2, r6
 23f31d2:	4641      	mov	r1, r8
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
 23f31d4:	4435      	add	r5, r6
      memcpy(dst, src, n);
 23f31d6:	f009 fa85 	bl	23fc6e4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
 23f31da:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 23f31de:	d105      	bne.n	23f31ec <_ZN7FatFile5writeEPKvj+0x120>
  bool cacheSyncData() { return m_cache.sync(); }
 23f31e0:	68a0      	ldr	r0, [r4, #8]
 23f31e2:	3024      	adds	r0, #36	; 0x24
 23f31e4:	f002 fcbb 	bl	23f5b5e <_ZN7FsCache4syncEv>
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
 23f31e8:	2800      	cmp	r0, #0
 23f31ea:	d0bc      	beq.n	23f3166 <_ZN7FatFile5writeEPKvj+0x9a>
    m_curPosition += n;
 23f31ec:	6963      	ldr	r3, [r4, #20]
    src += n;
 23f31ee:	44b0      	add	r8, r6
    m_curPosition += n;
 23f31f0:	4433      	add	r3, r6
 23f31f2:	6163      	str	r3, [r4, #20]
    nToWrite -= n;
 23f31f4:	1bbf      	subs	r7, r7, r6
  while (nToWrite) {
 23f31f6:	e77a      	b.n	23f30ee <_ZN7FatFile5writeEPKvj+0x22>
        cacheOption = FsCache::CACHE_FOR_WRITE;
 23f31f8:	2201      	movs	r2, #1
 23f31fa:	e7e3      	b.n	23f31c4 <_ZN7FatFile5writeEPKvj+0xf8>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
 23f31fc:	2205      	movs	r2, #5
 23f31fe:	e7e1      	b.n	23f31c4 <_ZN7FatFile5writeEPKvj+0xf8>
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
 23f3200:	7903      	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
 23f3202:	ea4f 2c57 	mov.w	ip, r7, lsr #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
 23f3206:	1b9b      	subs	r3, r3, r6
 23f3208:	4563      	cmp	r3, ip
 23f320a:	bf28      	it	cs
 23f320c:	4663      	movcs	r3, ip
    return sector <= m_sector && m_sector < (sector + count);
 23f320e:	4291      	cmp	r1, r2
      n = nSector << m_vol->bytesPerSectorShift();
 23f3210:	ea4f 2643 	mov.w	r6, r3, lsl #9
 23f3214:	d808      	bhi.n	23f3228 <_ZN7FatFile5writeEPKvj+0x15c>
 23f3216:	eb01 0c03 	add.w	ip, r1, r3
 23f321a:	4594      	cmp	ip, r2
    m_sector = 0XFFFFFFFF;
 23f321c:	bf82      	ittt	hi
 23f321e:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
 23f3222:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
 23f3226:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeSectors(sector, src, count);
 23f3228:	4642      	mov	r2, r8
 23f322a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 23f322c:	f000 fde3 	bl	23f3df6 <_ZN9SdSpiCard12writeSectorsEmPKhj>
 23f3230:	e7da      	b.n	23f31e8 <_ZN7FatFile5writeEPKvj+0x11c>
  if (m_curPosition > m_fileSize) {
 23f3232:	69e3      	ldr	r3, [r4, #28]
 23f3234:	4293      	cmp	r3, r2
 23f3236:	d205      	bcs.n	23f3244 <_ZN7FatFile5writeEPKvj+0x178>
    m_fileSize = m_curPosition;
 23f3238:	61e2      	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
 23f323a:	78a3      	ldrb	r3, [r4, #2]
 23f323c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 23f3240:	70a3      	strb	r3, [r4, #2]
 23f3242:	e003      	b.n	23f324c <_ZN7FatFile5writeEPKvj+0x180>
  } else if (FsDateTime::callback) {
 23f3244:	4b03      	ldr	r3, [pc, #12]	; (23f3254 <_ZN7FatFile5writeEPKvj+0x188>)
 23f3246:	681b      	ldr	r3, [r3, #0]
 23f3248:	2b00      	cmp	r3, #0
 23f324a:	d1f6      	bne.n	23f323a <_ZN7FatFile5writeEPKvj+0x16e>
}
 23f324c:	4648      	mov	r0, r9
 23f324e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f3252:	bf00      	nop
 23f3254:	1007aea8 	.word	0x1007aea8

023f3258 <_ZN7FatFile11lfnChecksumEPKh.isra.0>:
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(const DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(const uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
 23f3258:	1e41      	subs	r1, r0, #1
 23f325a:	f100 030a 	add.w	r3, r0, #10
    uint8_t sum = 0;
 23f325e:	2000      	movs	r0, #0
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
 23f3260:	0842      	lsrs	r2, r0, #1
 23f3262:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
 23f3266:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23f326a:	fa52 f080 	uxtab	r0, r2, r0
    for (uint8_t i = 0; i < 11; i++) {
 23f326e:	428b      	cmp	r3, r1
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
 23f3270:	b2c0      	uxtb	r0, r0
    for (uint8_t i = 0; i < 11; i++) {
 23f3272:	d1f5      	bne.n	23f3260 <_ZN7FatFile11lfnChecksumEPKh.isra.0+0x8>
    }
    return sum;
  }
 23f3274:	4770      	bx	lr

023f3276 <_ZN7FatFile8cacheDirEt>:
  DirFat_t* cacheDir(uint16_t index) {
 23f3276:	b510      	push	{r4, lr}
    return seekSet(32UL * index) ? readDirCache() : nullptr;
 23f3278:	0149      	lsls	r1, r1, #5
  DirFat_t* cacheDir(uint16_t index) {
 23f327a:	4604      	mov	r4, r0
    return seekSet(32UL * index) ? readDirCache() : nullptr;
 23f327c:	f7ff fd0f 	bl	23f2c9e <_ZN7FatFile7seekSetEm>
 23f3280:	b128      	cbz	r0, 23f328e <_ZN7FatFile8cacheDirEt+0x18>
 23f3282:	4620      	mov	r0, r4
  }
 23f3284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return seekSet(32UL * index) ? readDirCache() : nullptr;
 23f3288:	2100      	movs	r1, #0
 23f328a:	f7ff bce9 	b.w	23f2c60 <_ZN7FatFile12readDirCacheEb>
  }
 23f328e:	bd10      	pop	{r4, pc}

023f3290 <_ZN7FatFile7cmpNameEtP8FatLfn_th>:
  } else if (i < 13) {
    setLe16(ldir->unicode3 + 2 * (i - 11), c);
  }
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
 23f3290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      *this = *from;
 23f3294:	4606      	mov	r6, r0
 23f3296:	b08b      	sub	sp, #44	; 0x2c
 23f3298:	ac01      	add	r4, sp, #4
 23f329a:	4615      	mov	r5, r2
 23f329c:	4607      	mov	r7, r0
 23f329e:	4689      	mov	r9, r1
 23f32a0:	469a      	mov	sl, r3
 23f32a2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 23f32a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f32a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 23f32a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f32aa:	6833      	ldr	r3, [r6, #0]
  FatFile dir;
  dir.copy(this);
  const DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
 23f32ac:	2601      	movs	r6, #1
 23f32ae:	6023      	str	r3, [r4, #0]
  const char* end;
#if !USE_UTF8_LONG_NAMES
  /** \return true if at end. */
  bool atEnd() { return next == end; }
  /** Reset to start of LFN. */
  void reset() { next = begin; }
 23f32b0:	682b      	ldr	r3, [r5, #0]
 23f32b2:	606b      	str	r3, [r5, #4]
 23f32b4:	4556      	cmp	r6, sl
 23f32b6:	d839      	bhi.n	23f332c <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x9c>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
 23f32b8:	eba9 0106 	sub.w	r1, r9, r6
 23f32bc:	b289      	uxth	r1, r1
 23f32be:	a801      	add	r0, sp, #4
 23f32c0:	f7ff ffd9 	bl	23f3276 <_ZN7FatFile8cacheDirEt>
    if (!ldir) {
 23f32c4:	4683      	mov	fp, r0
 23f32c6:	b918      	cbnz	r0, 23f32d0 <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x40>
    }
  }
  return true;

fail:
  return false;
 23f32c8:	2000      	movs	r0, #0
}
 23f32ca:	b00b      	add	sp, #44	; 0x2c
 23f32cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f32d0:	f04f 0800 	mov.w	r8, #0
      uint16_t u = getLfnChar(ldir, i);
 23f32d4:	fa5f f288 	uxtb.w	r2, r8
 23f32d8:	4659      	mov	r1, fp
 23f32da:	4638      	mov	r0, r7
 23f32dc:	f002 f9b6 	bl	23f564c <_ZN7FatFile10getLfnCharEPK8DirLfn_th>
      if (fname->atEnd()) {
 23f32e0:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 23f32e4:	4293      	cmp	r3, r2
 23f32e6:	d103      	bne.n	23f32f0 <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x60>
        return u == 0;
 23f32e8:	fab0 f080 	clz	r0, r0
 23f32ec:	0940      	lsrs	r0, r0, #5
 23f32ee:	e7ec      	b.n	23f32ca <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x3a>
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
 23f32f0:	287f      	cmp	r0, #127	; 0x7f
 23f32f2:	d8e9      	bhi.n	23f32c8 <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x38>
 23f32f4:	b2c4      	uxtb	r4, r0
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
 23f32f6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 23f32fa:	2b19      	cmp	r3, #25
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
 23f32fc:	f102 0301 	add.w	r3, r2, #1
 23f3300:	606b      	str	r3, [r5, #4]
 23f3302:	7813      	ldrb	r3, [r2, #0]
 23f3304:	bf98      	it	ls
 23f3306:	3c20      	subls	r4, #32
 23f3308:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 23f330c:	bf98      	it	ls
 23f330e:	b2e4      	uxtbls	r4, r4
 23f3310:	2a19      	cmp	r2, #25
 23f3312:	bf9c      	itt	ls
 23f3314:	3b20      	subls	r3, #32
 23f3316:	b2db      	uxtbls	r3, r3
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
 23f3318:	42a3      	cmp	r3, r4
 23f331a:	d1d5      	bne.n	23f32c8 <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x38>
    for (uint8_t i = 0; i < 13; i++) {
 23f331c:	f108 0801 	add.w	r8, r8, #1
 23f3320:	f1b8 0f0d 	cmp.w	r8, #13
 23f3324:	d1d6      	bne.n	23f32d4 <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x44>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
 23f3326:	3601      	adds	r6, #1
 23f3328:	b2f6      	uxtb	r6, r6
 23f332a:	e7c3      	b.n	23f32b4 <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x24>
  return true;
 23f332c:	2001      	movs	r0, #1
 23f332e:	e7cc      	b.n	23f32ca <_ZN7FatFile7cmpNameEtP8FatLfn_th+0x3a>

023f3330 <_ZN7FatFile9createLFNEtP8FatLfn_th>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
 23f3330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f3334:	4604      	mov	r4, r0
 23f3336:	4616      	mov	r6, r2
 23f3338:	b08b      	sub	sp, #44	; 0x2c
 23f333a:	ad01      	add	r5, sp, #4
 23f333c:	468a      	mov	sl, r1
 23f333e:	4698      	mov	r8, r3
 23f3340:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f3342:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f3344:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f3346:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f3348:	6823      	ldr	r3, [r4, #0]
  FatFile dir;
  dir.copy(this);
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
 23f334a:	f106 0012 	add.w	r0, r6, #18
 23f334e:	602b      	str	r3, [r5, #0]
 23f3350:	f7ff ff82 	bl	23f3258 <_ZN7FatFile11lfnChecksumEPKh.isra.0>
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
 23f3354:	2501      	movs	r5, #1
  uint8_t checksum = lfnChecksum(fname->sfn);
 23f3356:	4681      	mov	r9, r0
  uint8_t fc = 0;
 23f3358:	2700      	movs	r7, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
 23f335a:	f04f 0b0f 	mov.w	fp, #15
  void reset() { next = begin; }
 23f335e:	6833      	ldr	r3, [r6, #0]
 23f3360:	6073      	str	r3, [r6, #4]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
 23f3362:	4545      	cmp	r5, r8
 23f3364:	d841      	bhi.n	23f33ea <_ZN7FatFile9createLFNEtP8FatLfn_th+0xba>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
 23f3366:	ebaa 0105 	sub.w	r1, sl, r5
 23f336a:	b289      	uxth	r1, r1
 23f336c:	a801      	add	r0, sp, #4
 23f336e:	f7ff ff82 	bl	23f3276 <_ZN7FatFile8cacheDirEt>
    if (!ldir) {
 23f3372:	2800      	cmp	r0, #0
 23f3374:	d03a      	beq.n	23f33ec <_ZN7FatFile9createLFNEtP8FatLfn_th+0xbc>
    dir.m_vol->cacheDirty();
 23f3376:	9a03      	ldr	r2, [sp, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
 23f3378:	4545      	cmp	r5, r8
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
 23f337a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 23f337e:	f100 0401 	add.w	r4, r0, #1
 23f3382:	f043 0301 	orr.w	r3, r3, #1
 23f3386:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    ldir->mustBeZero1 = 0;
 23f338a:	f04f 0200 	mov.w	r2, #0
 23f338e:	bf14      	ite	ne
 23f3390:	462b      	movne	r3, r5
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
 23f3392:	f045 0340 	orreq.w	r3, r5, #64	; 0x40
 23f3396:	7003      	strb	r3, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
 23f3398:	f880 b00b 	strb.w	fp, [r0, #11]
    ldir->mustBeZero1 = 0;
 23f339c:	7302      	strb	r2, [r0, #12]
    ldir->checksum = checksum;
 23f339e:	f880 900d 	strb.w	r9, [r0, #13]
 23f33a2:	8342      	strh	r2, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t cp;
      if (fname->atEnd()) {
 23f33a4:	e9d6 1301 	ldrd	r1, r3, [r6, #4]
 23f33a8:	4299      	cmp	r1, r3
 23f33aa:	d110      	bne.n	23f33ce <_ZN7FatFile9createLFNEtP8FatLfn_th+0x9e>
        cp = fc++ ? 0XFFFF : 0;
 23f33ac:	b19f      	cbz	r7, 23f33d6 <_ZN7FatFile9createLFNEtP8FatLfn_th+0xa6>
 23f33ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23f33b2:	3701      	adds	r7, #1
 23f33b4:	b2ff      	uxtb	r7, r7
  if (i < 5) {
 23f33b6:	2a04      	cmp	r2, #4
 23f33b8:	b2d1      	uxtb	r1, r2
 23f33ba:	d80f      	bhi.n	23f33dc <_ZN7FatFile9createLFNEtP8FatLfn_th+0xac>
 23f33bc:	8023      	strh	r3, [r4, #0]
    for (uint8_t i = 0; i < 13; i++) {
 23f33be:	3201      	adds	r2, #1
 23f33c0:	2a0d      	cmp	r2, #13
 23f33c2:	f104 0402 	add.w	r4, r4, #2
 23f33c6:	d1ed      	bne.n	23f33a4 <_ZN7FatFile9createLFNEtP8FatLfn_th+0x74>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
 23f33c8:	3501      	adds	r5, #1
 23f33ca:	b2ed      	uxtb	r5, r5
 23f33cc:	e7c9      	b.n	23f3362 <_ZN7FatFile9createLFNEtP8FatLfn_th+0x32>
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() { return atEnd() ? 0 : *next++; }
 23f33ce:	1c4b      	adds	r3, r1, #1
 23f33d0:	6073      	str	r3, [r6, #4]
 23f33d2:	780b      	ldrb	r3, [r1, #0]
 23f33d4:	e7ef      	b.n	23f33b6 <_ZN7FatFile9createLFNEtP8FatLfn_th+0x86>
        cp = fc++ ? 0XFFFF : 0;
 23f33d6:	463b      	mov	r3, r7
 23f33d8:	2701      	movs	r7, #1
 23f33da:	e7ec      	b.n	23f33b6 <_ZN7FatFile9createLFNEtP8FatLfn_th+0x86>
  } else if (i < 11) {
 23f33dc:	290a      	cmp	r1, #10
 23f33de:	bf94      	ite	ls
 23f33e0:	f8a4 3003 	strhls.w	r3, [r4, #3]
 23f33e4:	f8a4 3005 	strhhi.w	r3, [r4, #5]
}
 23f33e8:	e7e9      	b.n	23f33be <_ZN7FatFile9createLFNEtP8FatLfn_th+0x8e>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
 23f33ea:	2001      	movs	r0, #1

fail:
  return false;
}
 23f33ec:	b00b      	add	sp, #44	; 0x2c
 23f33ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023f33f2 <_ZN7FatFile7makeSFNEP8FatLfn_t>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
 23f33f2:	4602      	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
 23f33f4:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
bool FatFile::makeSFN(FatLfn_t* fname) {
 23f33f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const char* ptr = fname->begin;
 23f33fc:	f852 3b12 	ldr.w	r3, [r2], #18
  const char* end = fname->end;
 23f3400:	6886      	ldr	r6, [r0, #8]
    fname->sfn[k] = ' ';
 23f3402:	f8c0 1012 	str.w	r1, [r0, #18]
 23f3406:	6051      	str	r1, [r2, #4]
 23f3408:	f8c2 1007 	str.w	r1, [r2, #7]
bool FatFile::makeSFN(FatLfn_t* fname) {
 23f340c:	4605      	mov	r5, r0
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
 23f340e:	7818      	ldrb	r0, [r3, #0]
 23f3410:	382e      	subs	r0, #46	; 0x2e
 23f3412:	bf18      	it	ne
 23f3414:	2001      	movne	r0, #1
 23f3416:	461f      	mov	r7, r3
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {
 23f3418:	f813 2b01 	ldrb.w	r2, [r3], #1
 23f341c:	2a2e      	cmp	r2, #46	; 0x2e
 23f341e:	d0fa      	beq.n	23f3416 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x24>
  }
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {
 23f3420:	1e72      	subs	r2, r6, #1
 23f3422:	42ba      	cmp	r2, r7
 23f3424:	4696      	mov	lr, r2
 23f3426:	d903      	bls.n	23f3430 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x3e>
 23f3428:	f812 3901 	ldrb.w	r3, [r2], #-1
 23f342c:	2b2e      	cmp	r3, #46	; 0x2e
 23f342e:	d1f8      	bne.n	23f3422 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x30>
 23f3430:	2200      	movs	r2, #0
 23f3432:	f04f 0c07 	mov.w	ip, #7
 23f3436:	4611      	mov	r1, r2
 23f3438:	4690      	mov	r8, r2
 23f343a:	f04f 0908 	mov.w	r9, #8
  }

  for (; ptr < end; ptr++) {
 23f343e:	42b7      	cmp	r7, r6
 23f3440:	d251      	bcs.n	23f34e6 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xf4>
    c = *ptr;
 23f3442:	783b      	ldrb	r3, [r7, #0]
    if (c == '.' && ptr == dot) {
 23f3444:	2b2e      	cmp	r3, #46	; 0x2e
 23f3446:	d107      	bne.n	23f3458 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x66>
 23f3448:	45be      	cmp	lr, r7
 23f344a:	d113      	bne.n	23f3474 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x82>
      in = 10;                // Max index for full 8.3 name.
 23f344c:	f04f 0c0a 	mov.w	ip, #10
      i = 8;                  // Place for extension.
 23f3450:	2408      	movs	r4, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
 23f3452:	f04f 0910 	mov.w	r9, #16
 23f3456:	e03b      	b.n	23f34d0 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xde>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
 23f3458:	2b22      	cmp	r3, #34	; 0x22
 23f345a:	d00b      	beq.n	23f3474 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x82>
 23f345c:	2b7c      	cmp	r3, #124	; 0x7c
 23f345e:	d009      	beq.n	23f3474 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x82>
 23f3460:	f1a3 045b 	sub.w	r4, r3, #91	; 0x5b
 23f3464:	2c02      	cmp	r4, #2
 23f3466:	d905      	bls.n	23f3474 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x82>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
 23f3468:	f1a3 042a 	sub.w	r4, r3, #42	; 0x2a
 23f346c:	2c05      	cmp	r4, #5
 23f346e:	d806      	bhi.n	23f347e <_ZN7FatFile7makeSFNEP8FatLfn_t+0x8c>
 23f3470:	2b2d      	cmp	r3, #45	; 0x2d
 23f3472:	d013      	beq.n	23f349c <_ZN7FatFile7makeSFNEP8FatLfn_t+0xaa>
        if ((c & 0XC0) == 0X80) {
          continue;
        }
        c = '_';
      }
      if (i > in) {
 23f3474:	4561      	cmp	r1, ip
 23f3476:	d813      	bhi.n	23f34a0 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xae>
        is83 = false;
 23f3478:	2000      	movs	r0, #0
        c = '_';
 23f347a:	235f      	movs	r3, #95	; 0x5f
 23f347c:	e021      	b.n	23f34c2 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xd0>
 23f347e:	f1a3 043a 	sub.w	r4, r3, #58	; 0x3a
 23f3482:	2c05      	cmp	r4, #5
 23f3484:	d903      	bls.n	23f348e <_ZN7FatFile7makeSFNEP8FatLfn_t+0x9c>
      if (sfnReservedChar(c)) {
 23f3486:	f1a3 0421 	sub.w	r4, r3, #33	; 0x21
 23f348a:	2c5d      	cmp	r4, #93	; 0x5d
 23f348c:	d906      	bls.n	23f349c <_ZN7FatFile7makeSFNEP8FatLfn_t+0xaa>
        if ((c & 0XC0) == 0X80) {
 23f348e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 23f3492:	2b80      	cmp	r3, #128	; 0x80
 23f3494:	d1ee      	bne.n	23f3474 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x82>
 23f3496:	460c      	mov	r4, r1
        is83 = false;
 23f3498:	2000      	movs	r0, #0
 23f349a:	e019      	b.n	23f34d0 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xde>
      if (i > in) {
 23f349c:	4561      	cmp	r1, ip
 23f349e:	d907      	bls.n	23f34b0 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xbe>
        is83 = false;
        if (in == 10 || ptr > dot) {
 23f34a0:	f1bc 0f0a 	cmp.w	ip, #10
 23f34a4:	d01e      	beq.n	23f34e4 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xf2>
 23f34a6:	45be      	cmp	lr, r7
 23f34a8:	d31c      	bcc.n	23f34e4 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xf2>
          // Done - extension longer than three characters or no extension.
          break;
        }
        // Skip to dot.
        ptr = dot - 1;
 23f34aa:	f10e 37ff 	add.w	r7, lr, #4294967295	; 0xffffffff
        continue;
 23f34ae:	e7f2      	b.n	23f3496 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xa4>
      }
      if (isLower(c)) {
 23f34b0:	f1a3 0461 	sub.w	r4, r3, #97	; 0x61
 23f34b4:	2c19      	cmp	r4, #25
 23f34b6:	d80e      	bhi.n	23f34d6 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xe4>
        c += 'A' - 'a';
 23f34b8:	3b20      	subs	r3, #32
        lc |= bit;
 23f34ba:	ea49 0202 	orr.w	r2, r9, r2
        c += 'A' - 'a';
 23f34be:	b2db      	uxtb	r3, r3
        lc |= bit;
 23f34c0:	b2d2      	uxtb	r2, r2
      } else if (isUpper(c)) {
        uc |= bit;
      }
      fname->sfn[i++] = c;
 23f34c2:	1c4c      	adds	r4, r1, #1
 23f34c4:	b2e4      	uxtb	r4, r4
 23f34c6:	4429      	add	r1, r5
      if (i < 7) {
 23f34c8:	2c06      	cmp	r4, #6
      fname->sfn[i++] = c;
 23f34ca:	748b      	strb	r3, [r1, #18]
      if (i < 7) {
 23f34cc:	d800      	bhi.n	23f34d0 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xde>
        fname->seqPos = i;
 23f34ce:	742c      	strb	r4, [r5, #16]
  for (; ptr < end; ptr++) {
 23f34d0:	4621      	mov	r1, r4
 23f34d2:	3701      	adds	r7, #1
 23f34d4:	e7b3      	b.n	23f343e <_ZN7FatFile7makeSFNEP8FatLfn_t+0x4c>
      } else if (isUpper(c)) {
 23f34d6:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
 23f34da:	2c19      	cmp	r4, #25
        uc |= bit;
 23f34dc:	bf98      	it	ls
 23f34de:	ea49 0808 	orrls.w	r8, r9, r8
 23f34e2:	e7ee      	b.n	23f34c2 <_ZN7FatFile7makeSFNEP8FatLfn_t+0xd0>
        is83 = false;
 23f34e4:	2000      	movs	r0, #0
      }
    }
  }
  if (fname->sfn[0] == ' ') {
 23f34e6:	7cab      	ldrb	r3, [r5, #18]
 23f34e8:	2b20      	cmp	r3, #32
 23f34ea:	d011      	beq.n	23f3510 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x11e>
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
 23f34ec:	b130      	cbz	r0, 23f34fc <_ZN7FatFile7makeSFNEP8FatLfn_t+0x10a>
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
 23f34ee:	ea18 0f02 	tst.w	r8, r2
 23f34f2:	bf18      	it	ne
 23f34f4:	2202      	movne	r2, #2
 23f34f6:	746a      	strb	r2, [r5, #17]
  }
  return true;

fail:
  return false;
}
 23f34f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[fname->seqPos] = '~';
 23f34fc:	7c2a      	ldrb	r2, [r5, #16]
    fname->flags = FNAME_FLAG_LOST_CHARS;
 23f34fe:	2101      	movs	r1, #1
    fname->sfn[fname->seqPos] = '~';
 23f3500:	18ab      	adds	r3, r5, r2
 23f3502:	227e      	movs	r2, #126	; 0x7e
    fname->flags = FNAME_FLAG_LOST_CHARS;
 23f3504:	7469      	strb	r1, [r5, #17]
    fname->sfn[fname->seqPos] = '~';
 23f3506:	749a      	strb	r2, [r3, #18]
    fname->sfn[fname->seqPos + 1] = '1';
 23f3508:	2231      	movs	r2, #49	; 0x31
  return true;
 23f350a:	4608      	mov	r0, r1
    fname->sfn[fname->seqPos + 1] = '1';
 23f350c:	74da      	strb	r2, [r3, #19]
 23f350e:	e7f3      	b.n	23f34f8 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x106>
  return false;
 23f3510:	2000      	movs	r0, #0
 23f3512:	e7f1      	b.n	23f34f8 <_ZN7FatFile7makeSFNEP8FatLfn_t+0x106>

023f3514 <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
 23f3514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f3518:	4680      	mov	r8, r0
 23f351a:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
 23f351c:	2462      	movs	r4, #98	; 0x62
  const DirFat_t* dir;
  uint16_t hex = 0;
 23f351e:	2700      	movs	r7, #0
    for (uint8_t i = pos + 4; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
 23f3520:	f04f 097e 	mov.w	r9, #126	; 0x7e
  uint8_t pos = fname->seqPos;
 23f3524:	7c0e      	ldrb	r6, [r1, #16]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 23f3526:	f101 0a12 	add.w	sl, r1, #18
 23f352a:	f003 f929 	bl	23f6780 <HAL_Timer_Get_Milli_Seconds>
 23f352e:	2e03      	cmp	r6, #3
 23f3530:	bf28      	it	cs
 23f3532:	2603      	movcs	r6, #3
    hex += millis();
 23f3534:	4438      	add	r0, r7
    for (uint8_t i = pos + 4; i > pos; i--) {
 23f3536:	1d33      	adds	r3, r6, #4
    hex += millis();
 23f3538:	b287      	uxth	r7, r0
    for (uint8_t i = pos + 4; i > pos; i--) {
 23f353a:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
 23f353c:	f007 020f 	and.w	r2, r7, #15
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 23f3540:	18e9      	adds	r1, r5, r3
    for (uint8_t i = pos + 4; i > pos; i--) {
 23f3542:	3b01      	subs	r3, #1
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 23f3544:	2a09      	cmp	r2, #9
    for (uint8_t i = pos + 4; i > pos; i--) {
 23f3546:	b2db      	uxtb	r3, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 23f3548:	bf94      	ite	ls
 23f354a:	3230      	addls	r2, #48	; 0x30
 23f354c:	3237      	addhi	r2, #55	; 0x37
    for (uint8_t i = pos + 4; i > pos; i--) {
 23f354e:	429e      	cmp	r6, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 23f3550:	748a      	strb	r2, [r1, #18]
      hex >>= 4;
 23f3552:	ea4f 1717 	mov.w	r7, r7, lsr #4
    for (uint8_t i = pos + 4; i > pos; i--) {
 23f3556:	d1f1      	bne.n	23f353c <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x28>
    fname->sfn[pos] = '~';
 23f3558:	19ab      	adds	r3, r5, r6
  void rewind() { seekSet(0UL); }
 23f355a:	2100      	movs	r1, #0
 23f355c:	4640      	mov	r0, r8
 23f355e:	f883 9012 	strb.w	r9, [r3, #18]
 23f3562:	f7ff fb9c 	bl	23f2c9e <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
 23f3566:	2101      	movs	r1, #1
 23f3568:	4640      	mov	r0, r8
 23f356a:	f7ff fb79 	bl	23f2c60 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 23f356e:	4601      	mov	r1, r0
 23f3570:	b930      	cbnz	r0, 23f3580 <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x6c>
        if (!getError()) {
 23f3572:	f898 0001 	ldrb.w	r0, [r8, #1]
 23f3576:	fab0 f080 	clz	r0, r0
 23f357a:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
 23f357c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (dir->name[0] == FAT_NAME_FREE) {
 23f3580:	7803      	ldrb	r3, [r0, #0]
 23f3582:	b173      	cbz	r3, 23f35a2 <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x8e>
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 23f3584:	7ac3      	ldrb	r3, [r0, #11]
 23f3586:	071b      	lsls	r3, r3, #28
 23f3588:	d4ed      	bmi.n	23f3566 <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x52>
 23f358a:	220b      	movs	r2, #11
 23f358c:	4650      	mov	r0, sl
 23f358e:	f009 f899 	bl	23fc6c4 <memcmp>
 23f3592:	2800      	cmp	r0, #0
 23f3594:	d1e7      	bne.n	23f3566 <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x52>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
 23f3596:	1e60      	subs	r0, r4, #1
 23f3598:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
 23f359c:	d1c5      	bne.n	23f352a <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x16>
  return false;
 23f359e:	4620      	mov	r0, r4
fail:
 23f35a0:	e7ec      	b.n	23f357c <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x68>
  return true;
 23f35a2:	2001      	movs	r0, #1
 23f35a4:	e7ea      	b.n	23f357c <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t+0x68>
	...

023f35a8 <_ZN7FatFile4openEPS_P8FatLfn_ti>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
 23f35a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f35ac:	ed2d 8b02 	vpush	{d8}
 23f35b0:	b08b      	sub	sp, #44	; 0x2c
 23f35b2:	9304      	str	r3, [sp, #16]
  uint16_t time;
  DirFat_t* dir;
  const DirLfn_t* ldir;
  auto vol = dirFile->m_vol;

  if (!dirFile->isDir() || isOpen()) {
 23f35b4:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
 23f35b6:	460d      	mov	r5, r1
  if (!dirFile->isDir() || isOpen()) {
 23f35b8:	f013 0fd0 	tst.w	r3, #208	; 0xd0
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
 23f35bc:	4617      	mov	r7, r2
 23f35be:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
 23f35c0:	d105      	bne.n	23f35ce <_ZN7FatFile4openEPS_P8FatLfn_ti+0x26>
    goto fail;
  }
  return true;

fail:
  return false;
 23f35c2:	2000      	movs	r0, #0
}
 23f35c4:	b00b      	add	sp, #44	; 0x2c
 23f35c6:	ecbd 8b02 	vpop	{d8}
 23f35ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool isOpen() const { return m_attributes; }
 23f35ce:	9b07      	ldr	r3, [sp, #28]
 23f35d0:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
 23f35d2:	2b00      	cmp	r3, #0
 23f35d4:	d1f5      	bne.n	23f35c2 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
  nameOrd = (fname->len + 12) / 13;
 23f35d6:	68d3      	ldr	r3, [r2, #12]
 23f35d8:	220d      	movs	r2, #13
 23f35da:	330c      	adds	r3, #12
 23f35dc:	fbb3 f3f2 	udiv	r3, r3, r2
 23f35e0:	b2db      	uxtb	r3, r3
 23f35e2:	9306      	str	r3, [sp, #24]
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
 23f35e4:	7c7b      	ldrb	r3, [r7, #17]
  uint8_t checksum = 0;
 23f35e6:	f04f 0a00 	mov.w	sl, #0
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
 23f35ea:	079a      	lsls	r2, r3, #30
 23f35ec:	bf0c      	ite	eq
 23f35ee:	2301      	moveq	r3, #1
 23f35f0:	9b06      	ldrne	r3, [sp, #24]
  void rewind() { seekSet(0UL); }
 23f35f2:	4628      	mov	r0, r5
 23f35f4:	bf1c      	itt	ne
 23f35f6:	f103 0901 	addne.w	r9, r3, #1
 23f35fa:	fa5f f389 	uxtbne.w	r3, r9
 23f35fe:	9302      	str	r3, [sp, #8]
  auto vol = dirFile->m_vol;
 23f3600:	688b      	ldr	r3, [r1, #8]
 23f3602:	2100      	movs	r1, #0
 23f3604:	9305      	str	r3, [sp, #20]
 23f3606:	f7ff fb4a 	bl	23f2c9e <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 23f360a:	f107 0312 	add.w	r3, r7, #18
  uint8_t order = 0;
 23f360e:	46d0      	mov	r8, sl
  uint8_t freeFound = 0;
 23f3610:	4654      	mov	r4, sl
  uint8_t lfnOrd = 0;
 23f3612:	46d1      	mov	r9, sl
  bool fnameFound = false;
 23f3614:	46d3      	mov	fp, sl
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 23f3616:	ee08 3a10 	vmov	s16, r3
  uint16_t freeIndex = 0;
 23f361a:	f8cd a00c 	str.w	sl, [sp, #12]
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
 23f361e:	696e      	ldr	r6, [r5, #20]
    dir = dirFile->readDirCache();
 23f3620:	2100      	movs	r1, #0
 23f3622:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
 23f3624:	f3c6 164f 	ubfx	r6, r6, #5, #16
    dir = dirFile->readDirCache();
 23f3628:	f7ff fb1a 	bl	23f2c60 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 23f362c:	2800      	cmp	r0, #0
 23f362e:	d12f      	bne.n	23f3690 <_ZN7FatFile4openEPS_P8FatLfn_ti+0xe8>
      if (dirFile->getError()) {
 23f3630:	786b      	ldrb	r3, [r5, #1]
 23f3632:	2b00      	cmp	r3, #0
 23f3634:	d1c5      	bne.n	23f35c2 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
 23f3636:	9b04      	ldr	r3, [sp, #16]
 23f3638:	059a      	lsls	r2, r3, #22
 23f363a:	d5c2      	bpl.n	23f35c2 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>

#define O_READ O_RDONLY
#define O_WRITE O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
 23f363c:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
 23f3640:	3b01      	subs	r3, #1
 23f3642:	2b01      	cmp	r3, #1
 23f3644:	d8bd      	bhi.n	23f35c2 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
  if (freeFound == 0) {
 23f3646:	9b03      	ldr	r3, [sp, #12]
 23f3648:	2c00      	cmp	r4, #0
 23f364a:	bf08      	it	eq
 23f364c:	4633      	moveq	r3, r6
 23f364e:	9303      	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
 23f3650:	9b02      	ldr	r3, [sp, #8]
 23f3652:	429c      	cmp	r4, r3
 23f3654:	d209      	bcs.n	23f366a <_ZN7FatFile4openEPS_P8FatLfn_ti+0xc2>
    dir = dirFile->readDirCache();
 23f3656:	2100      	movs	r1, #0
 23f3658:	4628      	mov	r0, r5
 23f365a:	f7ff fb01 	bl	23f2c60 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 23f365e:	2800      	cmp	r0, #0
 23f3660:	f040 8085 	bne.w	23f376e <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1c6>
      if (dirFile->getError()) {
 23f3664:	786b      	ldrb	r3, [r5, #1]
 23f3666:	2b00      	cmp	r3, #0
 23f3668:	d1ab      	bne.n	23f35c2 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
  while (freeTotal < freeNeed) {
 23f366a:	f8bd 6008 	ldrh.w	r6, [sp, #8]
  freeTotal = freeFound;
 23f366e:	b2a4      	uxth	r4, r4
  while (freeTotal < freeNeed) {
 23f3670:	42a6      	cmp	r6, r4
 23f3672:	d97f      	bls.n	23f3774 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1cc>
    if (!dirFile->addDirCluster()) {
 23f3674:	4628      	mov	r0, r5
 23f3676:	f7ff f9b9 	bl	23f29ec <_ZN7FatFile13addDirClusterEv>
 23f367a:	2800      	cmp	r0, #0
 23f367c:	d0a1      	beq.n	23f35c2 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
    return m_sectorsPerCluster * (m_bytesPerSector / FS_DIR_SIZE);
 23f367e:	9b05      	ldr	r3, [sp, #20]
 23f3680:	791b      	ldrb	r3, [r3, #4]
    freeTotal += vol->dirEntriesPerCluster();
 23f3682:	eb04 1403 	add.w	r4, r4, r3, lsl #4
 23f3686:	b2a4      	uxth	r4, r4
  while (freeTotal < freeNeed) {
 23f3688:	e7f2      	b.n	23f3670 <_ZN7FatFile4openEPS_P8FatLfn_ti+0xc8>
        fnameFound = true;
 23f368a:	f04f 0b01 	mov.w	fp, #1
 23f368e:	e7c6      	b.n	23f361e <_ZN7FatFile4openEPS_P8FatLfn_ti+0x76>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
 23f3690:	7802      	ldrb	r2, [r0, #0]
 23f3692:	2ae5      	cmp	r2, #229	; 0xe5
 23f3694:	d000      	beq.n	23f3698 <_ZN7FatFile4openEPS_P8FatLfn_ti+0xf0>
 23f3696:	b982      	cbnz	r2, 23f36ba <_ZN7FatFile4openEPS_P8FatLfn_ti+0x112>
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
 23f3698:	9b03      	ldr	r3, [sp, #12]
 23f369a:	2c00      	cmp	r4, #0
 23f369c:	bf08      	it	eq
 23f369e:	4633      	moveq	r3, r6
 23f36a0:	9303      	str	r3, [sp, #12]
      if (freeFound < freeNeed) {
 23f36a2:	9b02      	ldr	r3, [sp, #8]
 23f36a4:	429c      	cmp	r4, r3
        freeFound++;
 23f36a6:	bf3c      	itt	cc
 23f36a8:	3401      	addcc	r4, #1
 23f36aa:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
 23f36ac:	2a00      	cmp	r2, #0
 23f36ae:	d0c2      	beq.n	23f3636 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x8e>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
 23f36b0:	2ae5      	cmp	r2, #229	; 0xe5
 23f36b2:	d106      	bne.n	23f36c2 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x11a>
      lfnOrd = 0;
 23f36b4:	f04f 0900 	mov.w	r9, #0
 23f36b8:	e7b1      	b.n	23f361e <_ZN7FatFile4openEPS_P8FatLfn_ti+0x76>
        freeFound = 0;
 23f36ba:	9b02      	ldr	r3, [sp, #8]
 23f36bc:	429c      	cmp	r4, r3
 23f36be:	bf38      	it	cc
 23f36c0:	2400      	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
 23f36c2:	2a2e      	cmp	r2, #46	; 0x2e
 23f36c4:	d0f6      	beq.n	23f36b4 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x10c>
}
static inline uint8_t isFatLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
 23f36c6:	7ac1      	ldrb	r1, [r0, #11]
    } else if (isFatLongName(dir)) {
 23f36c8:	290f      	cmp	r1, #15
 23f36ca:	d126      	bne.n	23f371a <_ZN7FatFile4openEPS_P8FatLfn_ti+0x172>
      if (!lfnOrd) {
 23f36cc:	f1b9 0f00 	cmp.w	r9, #0
 23f36d0:	d119      	bne.n	23f3706 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x15e>
        if (order != nameOrd ||
 23f36d2:	9b06      	ldr	r3, [sp, #24]
        order = ldir->order & 0X1F;
 23f36d4:	f002 081f 	and.w	r8, r2, #31
        if (order != nameOrd ||
 23f36d8:	4543      	cmp	r3, r8
 23f36da:	d1a0      	bne.n	23f361e <_ZN7FatFile4openEPS_P8FatLfn_ti+0x76>
 23f36dc:	f012 0940 	ands.w	r9, r2, #64	; 0x40
 23f36e0:	d09d      	beq.n	23f361e <_ZN7FatFile4openEPS_P8FatLfn_ti+0x76>
        checksum = ldir->checksum;
 23f36e2:	4699      	mov	r9, r3
 23f36e4:	f890 a00d 	ldrb.w	sl, [r0, #13]
      if (order == 1) {
 23f36e8:	f1b8 0f01 	cmp.w	r8, #1
 23f36ec:	d197      	bne.n	23f361e <_ZN7FatFile4openEPS_P8FatLfn_ti+0x76>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
 23f36ee:	1c71      	adds	r1, r6, #1
 23f36f0:	464b      	mov	r3, r9
 23f36f2:	463a      	mov	r2, r7
 23f36f4:	4628      	mov	r0, r5
 23f36f6:	b289      	uxth	r1, r1
 23f36f8:	f7ff fdca 	bl	23f3290 <_ZN7FatFile7cmpNameEtP8FatLfn_th>
          lfnOrd = 0;
 23f36fc:	2800      	cmp	r0, #0
 23f36fe:	bf08      	it	eq
 23f3700:	f04f 0900 	moveq.w	r9, #0
 23f3704:	e78b      	b.n	23f361e <_ZN7FatFile4openEPS_P8FatLfn_ti+0x76>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
 23f3706:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23f370a:	fa5f f888 	uxtb.w	r8, r8
 23f370e:	4542      	cmp	r2, r8
 23f3710:	d1d0      	bne.n	23f36b4 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x10c>
 23f3712:	7b42      	ldrb	r2, [r0, #13]
 23f3714:	4552      	cmp	r2, sl
 23f3716:	d0e7      	beq.n	23f36e8 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x140>
 23f3718:	e7cc      	b.n	23f36b4 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x10c>
    } else if (isFatFileOrSubdir(dir)) {
 23f371a:	070b      	lsls	r3, r1, #28
 23f371c:	d4ca      	bmi.n	23f36b4 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x10c>
      if (lfnOrd) {
 23f371e:	f1b9 0f00 	cmp.w	r9, #0
 23f3722:	d00a      	beq.n	23f373a <_ZN7FatFile4openEPS_P8FatLfn_ti+0x192>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
 23f3724:	f1b8 0f01 	cmp.w	r8, #1
 23f3728:	f47f af4b 	bne.w	23f35c2 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
 23f372c:	f7ff fd94 	bl	23f3258 <_ZN7FatFile11lfnChecksumEPKh.isra.0>
 23f3730:	4550      	cmp	r0, sl
 23f3732:	f47f af46 	bne.w	23f35c2 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
 23f3736:	46cb      	mov	fp, r9
 23f3738:	e00c      	b.n	23f3754 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1ac>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 23f373a:	220b      	movs	r2, #11
 23f373c:	ee18 1a10 	vmov	r1, s16
 23f3740:	f008 ffc0 	bl	23fc6c4 <memcmp>
 23f3744:	2800      	cmp	r0, #0
 23f3746:	f47f af6a 	bne.w	23f361e <_ZN7FatFile4openEPS_P8FatLfn_ti+0x76>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 23f374a:	f897 b011 	ldrb.w	fp, [r7, #17]
 23f374e:	f01b 0b01 	ands.w	fp, fp, #1
 23f3752:	d19a      	bne.n	23f368a <_ZN7FatFile4openEPS_P8FatLfn_ti+0xe2>
  if (oflag & O_EXCL) {
 23f3754:	9b04      	ldr	r3, [sp, #16]
 23f3756:	0519      	lsls	r1, r3, #20
 23f3758:	f53f af33 	bmi.w	23f35c2 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 23f375c:	4632      	mov	r2, r6
 23f375e:	4629      	mov	r1, r5
 23f3760:	9b04      	ldr	r3, [sp, #16]
 23f3762:	9807      	ldr	r0, [sp, #28]
 23f3764:	f8cd b000 	str.w	fp, [sp]
 23f3768:	f7ff fae9 	bl	23f2d3e <_ZN7FatFile15openCachedEntryEPS_tih>
 23f376c:	e72a      	b.n	23f35c4 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1c>
    freeFound++;
 23f376e:	3401      	adds	r4, #1
 23f3770:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
 23f3772:	e76d      	b.n	23f3650 <_ZN7FatFile4openEPS_P8FatLfn_ti+0xa8>
  if (fnameFound) {
 23f3774:	f1bb 0f00 	cmp.w	fp, #0
 23f3778:	d147      	bne.n	23f380a <_ZN7FatFile4openEPS_P8FatLfn_ti+0x262>
  lfnOrd = freeNeed - 1;
 23f377a:	9b02      	ldr	r3, [sp, #8]
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
 23f377c:	463a      	mov	r2, r7
  lfnOrd = freeNeed - 1;
 23f377e:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
  curIndex = freeIndex + lfnOrd;
 23f3782:	9b03      	ldr	r3, [sp, #12]
  lfnOrd = freeNeed - 1;
 23f3784:	fa5f fb89 	uxtb.w	fp, r9
  curIndex = freeIndex + lfnOrd;
 23f3788:	fa53 f989 	uxtab	r9, r3, r9
 23f378c:	fa1f f689 	uxth.w	r6, r9
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
 23f3790:	465b      	mov	r3, fp
 23f3792:	4631      	mov	r1, r6
 23f3794:	4628      	mov	r0, r5
 23f3796:	f7ff fdcb 	bl	23f3330 <_ZN7FatFile9createLFNEtP8FatLfn_th>
 23f379a:	2800      	cmp	r0, #0
 23f379c:	f43f af11 	beq.w	23f35c2 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
  dir = dirFile->cacheDir(curIndex);
 23f37a0:	4631      	mov	r1, r6
 23f37a2:	4628      	mov	r0, r5
 23f37a4:	f7ff fd67 	bl	23f3276 <_ZN7FatFile8cacheDirEt>
  if (!dir) {
 23f37a8:	4604      	mov	r4, r0
 23f37aa:	2800      	cmp	r0, #0
 23f37ac:	f43f af09 	beq.w	23f35c2 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
  memset(dir, 0, sizeof(DirFat_t));
 23f37b0:	2220      	movs	r2, #32
 23f37b2:	2100      	movs	r1, #0
 23f37b4:	f008 ffa3 	bl	23fc6fe <memset>
  memcpy(dir->name, fname->sfn, 11);
 23f37b8:	f8d7 3012 	ldr.w	r3, [r7, #18]
 23f37bc:	6023      	str	r3, [r4, #0]
 23f37be:	f8d7 3016 	ldr.w	r3, [r7, #22]
 23f37c2:	6063      	str	r3, [r4, #4]
 23f37c4:	8b7b      	ldrh	r3, [r7, #26]
 23f37c6:	8123      	strh	r3, [r4, #8]
 23f37c8:	7f3b      	ldrb	r3, [r7, #28]
 23f37ca:	72a3      	strb	r3, [r4, #10]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
 23f37cc:	7c7b      	ldrb	r3, [r7, #17]
 23f37ce:	f003 0318 	and.w	r3, r3, #24
 23f37d2:	7323      	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
 23f37d4:	4b13      	ldr	r3, [pc, #76]	; (23f3824 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x27c>)
 23f37d6:	681b      	ldr	r3, [r3, #0]
 23f37d8:	b1f3      	cbz	r3, 23f3818 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x270>
    FsDateTime::callback(&date, &time, &ms10);
 23f37da:	f10d 0223 	add.w	r2, sp, #35	; 0x23
 23f37de:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 23f37e2:	a809      	add	r0, sp, #36	; 0x24
 23f37e4:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
 23f37e6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 23f37ea:	8223      	strh	r3, [r4, #16]
 23f37ec:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 23f37f0:	81e3      	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
 23f37f2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 23f37f6:	7363      	strb	r3, [r4, #13]
 23f37f8:	9b05      	ldr	r3, [sp, #20]
 23f37fa:	9a05      	ldr	r2, [sp, #20]
 23f37fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 23f3800:	f043 0301 	orr.w	r3, r3, #1
 23f3804:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  void cacheDirty() { m_cache.dirty(); }
 23f3808:	e7a8      	b.n	23f375c <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1b4>
    if (!dirFile->makeUniqueSfn(fname)) {
 23f380a:	4639      	mov	r1, r7
 23f380c:	4628      	mov	r0, r5
 23f380e:	f7ff fe81 	bl	23f3514 <_ZN7FatFile13makeUniqueSfnEP8FatLfn_t>
 23f3812:	2800      	cmp	r0, #0
 23f3814:	d1b1      	bne.n	23f377a <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1d2>
 23f3816:	e6d4      	b.n	23f35c2 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x1a>
 23f3818:	f645 2321 	movw	r3, #23073	; 0x5a21
 23f381c:	8223      	strh	r3, [r4, #16]
 23f381e:	8323      	strh	r3, [r4, #24]
 23f3820:	8263      	strh	r3, [r4, #18]
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59
 23f3822:	e7e9      	b.n	23f37f8 <_ZN7FatFile4openEPS_P8FatLfn_ti+0x250>
 23f3824:	1007aea8 	.word	0x1007aea8

023f3828 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path, FatLfn_t* fname,
                            const char** ptr) {
 23f3828:	b470      	push	{r4, r5, r6}
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
 23f382a:	460d      	mov	r5, r1
 23f382c:	f811 0b01 	ldrb.w	r0, [r1], #1
 23f3830:	2820      	cmp	r0, #32
 23f3832:	d0fa      	beq.n	23f382a <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x2>
    path++;
  }
  fname->begin = path;
  fname->len = 0;
 23f3834:	2100      	movs	r1, #0
 23f3836:	4628      	mov	r0, r5
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':' || c == '<' ||
 23f3838:	4e1c      	ldr	r6, [pc, #112]	; (23f38ac <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x84>)
  fname->begin = path;
 23f383a:	6015      	str	r5, [r2, #0]
  fname->len = 0;
 23f383c:	60d1      	str	r1, [r2, #12]
  while (*path && !isDirSeparator(*path)) {
 23f383e:	4604      	mov	r4, r0
 23f3840:	f814 1b01 	ldrb.w	r1, [r4], #1
 23f3844:	b1f1      	cbz	r1, 23f3884 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x5c>
 23f3846:	292f      	cmp	r1, #47	; 0x2f
 23f3848:	d01c      	beq.n	23f3884 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x5c>
         c == '>' || c == '?' || c == '\\' || c == '|';
 23f384a:	f1a1 0020 	sub.w	r0, r1, #32
 23f384e:	285f      	cmp	r0, #95	; 0x5f
 23f3850:	d828      	bhi.n	23f38a4 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x7c>
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':' || c == '<' ||
 23f3852:	f1a1 0022 	sub.w	r0, r1, #34	; 0x22
 23f3856:	b2c0      	uxtb	r0, r0
 23f3858:	281d      	cmp	r0, #29
 23f385a:	d803      	bhi.n	23f3864 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x3c>
 23f385c:	fa26 f000 	lsr.w	r0, r6, r0
 23f3860:	07c0      	lsls	r0, r0, #31
 23f3862:	d41f      	bmi.n	23f38a4 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x7c>
 23f3864:	f001 00bf 	and.w	r0, r1, #191	; 0xbf
 23f3868:	283c      	cmp	r0, #60	; 0x3c
 23f386a:	d01b      	beq.n	23f38a4 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x7c>
         c == '>' || c == '?' || c == '\\' || c == '|';
 23f386c:	295c      	cmp	r1, #92	; 0x5c
 23f386e:	d019      	beq.n	23f38a4 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x7c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len++;
#endif  // USE_UTF8_LONG_NAMES
    if (cp != '.' && cp != ' ') {
 23f3870:	292e      	cmp	r1, #46	; 0x2e
 23f3872:	eba4 0005 	sub.w	r0, r4, r5
 23f3876:	d003      	beq.n	23f3880 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x58>
 23f3878:	2920      	cmp	r1, #32
 23f387a:	d001      	beq.n	23f3880 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x58>
      // Need to trim trailing dots spaces.
      fname->len = len;
      fname->end = path;
 23f387c:	e9c2 4002 	strd	r4, r0, [r2, #8]
                            const char** ptr) {
 23f3880:	4620      	mov	r0, r4
 23f3882:	e7dc      	b.n	23f383e <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x16>
    }
  }
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
 23f3884:	68d1      	ldr	r1, [r2, #12]
 23f3886:	3901      	subs	r1, #1
 23f3888:	29fe      	cmp	r1, #254	; 0xfe
 23f388a:	d80b      	bhi.n	23f38a4 <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x7c>
 23f388c:	4604      	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {
 23f388e:	f810 1b01 	ldrb.w	r1, [r0], #1
 23f3892:	2920      	cmp	r1, #32
 23f3894:	d0fa      	beq.n	23f388c <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x64>
 23f3896:	292f      	cmp	r1, #47	; 0x2f
 23f3898:	d0f8      	beq.n	23f388c <_ZN7FatFile13parsePathNameEPKcP8FatLfn_tPS1_+0x64>
  }
  *ptr = path;
 23f389a:	601c      	str	r4, [r3, #0]
  return makeSFN(fname);
 23f389c:	4610      	mov	r0, r2

fail:
  return false;
}
 23f389e:	bc70      	pop	{r4, r5, r6}
  return makeSFN(fname);
 23f38a0:	f7ff bda7 	b.w	23f33f2 <_ZN7FatFile7makeSFNEP8FatLfn_t>
}
 23f38a4:	2000      	movs	r0, #0
 23f38a6:	bc70      	pop	{r4, r5, r6}
 23f38a8:	4770      	bx	lr
 23f38aa:	bf00      	nop
 23f38ac:	31000101 	.word	0x31000101

023f38b0 <_ZN7FatFile6removeEv>:
  FatFile() {}
 23f38b0:	2300      	movs	r3, #0
//------------------------------------------------------------------------------
bool FatFile::remove() {
 23f38b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f38b6:	b08a      	sub	sp, #40	; 0x28
 23f38b8:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
 23f38ba:	7883      	ldrb	r3, [r0, #2]
bool FatFile::remove() {
 23f38bc:	4604      	mov	r4, r0
  if (!isWritable()) {
 23f38be:	079a      	lsls	r2, r3, #30
 23f38c0:	d507      	bpl.n	23f38d2 <_ZN7FatFile6removeEv+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
 23f38c2:	6a01      	ldr	r1, [r0, #32]
 23f38c4:	b939      	cbnz	r1, 23f38d6 <_ZN7FatFile6removeEv+0x26>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
 23f38c6:	2101      	movs	r1, #1
 23f38c8:	4620      	mov	r0, r4
 23f38ca:	f7ff f8c7 	bl	23f2a5c <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
 23f38ce:	4605      	mov	r5, r0
 23f38d0:	b938      	cbnz	r0, 23f38e2 <_ZN7FatFile6removeEv+0x32>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
 23f38d2:	2000      	movs	r0, #0
 23f38d4:	e042      	b.n	23f395c <_ZN7FatFile6removeEv+0xac>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
 23f38d6:	6880      	ldr	r0, [r0, #8]
 23f38d8:	f001 ff6c 	bl	23f57b4 <_ZN12FatPartition9freeChainEm>
 23f38dc:	2800      	cmp	r0, #0
 23f38de:	d1f2      	bne.n	23f38c6 <_ZN7FatFile6removeEv+0x16>
 23f38e0:	e7f7      	b.n	23f38d2 <_ZN7FatFile6removeEv+0x22>
  dir->name[0] = FAT_NAME_DELETED;
 23f38e2:	27e5      	movs	r7, #229	; 0xe5
  checksum = lfnChecksum(dir->name);
 23f38e4:	f7ff fcb8 	bl	23f3258 <_ZN7FatFile11lfnChecksumEPKh.isra.0>
  m_attributes = FILE_ATTR_CLOSED;
 23f38e8:	2300      	movs	r3, #0
  dir->name[0] = FAT_NAME_DELETED;
 23f38ea:	702f      	strb	r7, [r5, #0]
  checksum = lfnChecksum(dir->name);
 23f38ec:	4606      	mov	r6, r0
  m_attributes = FILE_ATTR_CLOSED;
 23f38ee:	7023      	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
 23f38f0:	68a0      	ldr	r0, [r4, #8]
  m_flags = 0;
 23f38f2:	70a3      	strb	r3, [r4, #2]
  if (!m_vol->cacheSync()) {
 23f38f4:	f7ff f840 	bl	23f2978 <_ZN12FatPartition9cacheSyncEv>
 23f38f8:	2800      	cmp	r0, #0
 23f38fa:	d0ea      	beq.n	23f38d2 <_ZN7FatFile6removeEv+0x22>
  if (!isLFN()) {
 23f38fc:	78e3      	ldrb	r3, [r4, #3]
 23f38fe:	b36b      	cbz	r3, 23f395c <_ZN7FatFile6removeEv+0xac>
  if (!dirFile.openCluster(this)) {
 23f3900:	4621      	mov	r1, r4
 23f3902:	a801      	add	r0, sp, #4
 23f3904:	f7ff f8bf 	bl	23f2a86 <_ZN7FatFile11openClusterEPS_>
 23f3908:	2800      	cmp	r0, #0
 23f390a:	d0e2      	beq.n	23f38d2 <_ZN7FatFile6removeEv+0x22>
 23f390c:	2501      	movs	r5, #1
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
 23f390e:	78e3      	ldrb	r3, [r4, #3]
 23f3910:	fa5f f885 	uxtb.w	r8, r5
 23f3914:	4543      	cmp	r3, r8
 23f3916:	d3dc      	bcc.n	23f38d2 <_ZN7FatFile6removeEv+0x22>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
 23f3918:	88a1      	ldrh	r1, [r4, #4]
 23f391a:	a801      	add	r0, sp, #4
 23f391c:	1b49      	subs	r1, r1, r5
 23f391e:	b289      	uxth	r1, r1
 23f3920:	f7ff fca9 	bl	23f3276 <_ZN7FatFile8cacheDirEt>
    if (!ldir) {
 23f3924:	2800      	cmp	r0, #0
 23f3926:	d0d4      	beq.n	23f38d2 <_ZN7FatFile6removeEv+0x22>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
 23f3928:	7ac3      	ldrb	r3, [r0, #11]
 23f392a:	2b0f      	cmp	r3, #15
 23f392c:	d1d1      	bne.n	23f38d2 <_ZN7FatFile6removeEv+0x22>
        order != (ldir->order & 0X1F) || checksum != ldir->checksum) {
 23f392e:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
 23f3930:	f002 031f 	and.w	r3, r2, #31
 23f3934:	4543      	cmp	r3, r8
 23f3936:	d1cc      	bne.n	23f38d2 <_ZN7FatFile6removeEv+0x22>
        order != (ldir->order & 0X1F) || checksum != ldir->checksum) {
 23f3938:	7b43      	ldrb	r3, [r0, #13]
 23f393a:	42b3      	cmp	r3, r6
 23f393c:	d1c9      	bne.n	23f38d2 <_ZN7FatFile6removeEv+0x22>
    ldir->order = FAT_NAME_DELETED;
 23f393e:	7007      	strb	r7, [r0, #0]
    m_vol->cacheDirty();
 23f3940:	68a1      	ldr	r1, [r4, #8]
    if (last) {
 23f3942:	3501      	adds	r5, #1
 23f3944:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
 23f3948:	b2ad      	uxth	r5, r5
 23f394a:	f043 0301 	orr.w	r3, r3, #1
 23f394e:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
 23f3952:	0653      	lsls	r3, r2, #25
 23f3954:	d5db      	bpl.n	23f390e <_ZN7FatFile6removeEv+0x5e>
      if (!m_vol->cacheSync()) {
 23f3956:	68a0      	ldr	r0, [r4, #8]
 23f3958:	f7ff f80e 	bl	23f2978 <_ZN12FatPartition9cacheSyncEv>
}
 23f395c:	b00a      	add	sp, #40	; 0x28
 23f395e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f3962 <_ZN7Timeout8timedOutEv.isra.0>:
 public:
  Timeout() {}
  explicit Timeout(uint16_t ms) { set(ms); }
  uint16_t millis16() { return millis(); }
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
 23f3962:	b510      	push	{r4, lr}
 23f3964:	4604      	mov	r4, r0
 23f3966:	f002 ff0b 	bl	23f6780 <HAL_Timer_Get_Milli_Seconds>
 23f396a:	1a20      	subs	r0, r4, r0
 23f396c:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 23f3970:	bd10      	pop	{r4, pc}

023f3972 <_ZN18SdSpiArduinoDriver11setSckSpeedEm>:
 23f3972:	2300      	movs	r3, #0
 23f3974:	7203      	strb	r3, [r0, #8]
 23f3976:	2301      	movs	r3, #1
 23f3978:	60c1      	str	r1, [r0, #12]
 23f397a:	8203      	strh	r3, [r0, #16]
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
  }
 23f397c:	4770      	bx	lr

023f397e <_ZN9SdSpiCard8spiStartEv>:
  (void)value;
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
 23f397e:	b538      	push	{r3, r4, r5, lr}
  SPI_ASSERT_NOT_ACTIVE;
  if (!m_spiActive) {
 23f3980:	7f05      	ldrb	r5, [r0, #28]
void SdSpiCard::spiStart() {
 23f3982:	4604      	mov	r4, r0
  if (!m_spiActive) {
 23f3984:	b96d      	cbnz	r5, 23f39a2 <_ZN9SdSpiCard8spiStartEv+0x24>
  void spiActivate() { m_spiDriver.activate(); }
 23f3986:	f000 faab 	bl	23f3ee0 <_ZN18SdSpiArduinoDriver8activateEv>
    spiActivate();
    m_spiActive = true;
 23f398a:	2301      	movs	r3, #1
  void spiSelect() { sdCsWrite(m_csPin, false); }
 23f398c:	4629      	mov	r1, r5
 23f398e:	7ea0      	ldrb	r0, [r4, #26]
 23f3990:	7723      	strb	r3, [r4, #28]
 23f3992:	f002 f8e2 	bl	23f5b5a <_Z9sdCsWritehb>
    m_spiDriver.send(data);
 23f3996:	4620      	mov	r0, r4
    spiSelect();
    // Dummy byte to drive MISO busy status.
    spiSend(0XFF);
  }
}
 23f3998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23f399c:	21ff      	movs	r1, #255	; 0xff
 23f399e:	f000 bae7 	b.w	23f3f70 <_ZN18SdSpiArduinoDriver4sendEh>
 23f39a2:	bd38      	pop	{r3, r4, r5, pc}

023f39a4 <_ZN9SdSpiCard7spiStopEv>:
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
 23f39a4:	b510      	push	{r4, lr}
  SPI_ASSERT_ACTIVE;
  if (m_spiActive) {
 23f39a6:	7f03      	ldrb	r3, [r0, #28]
void SdSpiCard::spiStop() {
 23f39a8:	4604      	mov	r4, r0
  if (m_spiActive) {
 23f39aa:	b163      	cbz	r3, 23f39c6 <_ZN9SdSpiCard7spiStopEv+0x22>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
 23f39ac:	2101      	movs	r1, #1
 23f39ae:	7e80      	ldrb	r0, [r0, #26]
 23f39b0:	f002 f8d3 	bl	23f5b5a <_Z9sdCsWritehb>
    m_spiDriver.send(data);
 23f39b4:	21ff      	movs	r1, #255	; 0xff
 23f39b6:	4620      	mov	r0, r4
 23f39b8:	f000 fada 	bl	23f3f70 <_ZN18SdSpiArduinoDriver4sendEh>
  void spiDeactivate() { m_spiDriver.deactivate(); }
 23f39bc:	4620      	mov	r0, r4
 23f39be:	f000 fab9 	bl	23f3f34 <_ZN18SdSpiArduinoDriver10deactivateEv>
    spiUnselect();
    // Insure MISO goes to low Z.
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
 23f39c2:	2300      	movs	r3, #0
 23f39c4:	7723      	strb	r3, [r4, #28]
  }
}
 23f39c6:	bd10      	pop	{r4, pc}

023f39c8 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 23f39c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f39ca:	4604      	mov	r4, r0
 23f39cc:	460e      	mov	r6, r1
 23f39ce:	4617      	mov	r7, r2
 23f39d0:	f002 fed6 	bl	23f6780 <HAL_Timer_Get_Milli_Seconds>
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
 23f39d4:	f500 7096 	add.w	r0, r0, #300	; 0x12c
 23f39d8:	b285      	uxth	r5, r0
    return m_spiDriver.receive();
 23f39da:	4620      	mov	r0, r4
 23f39dc:	f000 faad 	bl	23f3f3a <_ZN18SdSpiArduinoDriver7receiveEv>
  while ((m_status = spiReceive()) == 0XFF) {
 23f39e0:	28ff      	cmp	r0, #255	; 0xff
 23f39e2:	77a0      	strb	r0, [r4, #30]
 23f39e4:	d10b      	bne.n	23f39fe <_ZN9SdSpiCard8readDataEPhj+0x36>
    if (timeout.timedOut()) {
 23f39e6:	4628      	mov	r0, r5
 23f39e8:	f7ff ffbb 	bl	23f3962 <_ZN7Timeout8timedOutEv.isra.0>
 23f39ec:	2800      	cmp	r0, #0
 23f39ee:	d0f4      	beq.n	23f39da <_ZN9SdSpiCard8readDataEPhj+0x12>
    m_errorCode = code;
 23f39f0:	231e      	movs	r3, #30
  spiStop();
 23f39f2:	4620      	mov	r0, r4
 23f39f4:	76e3      	strb	r3, [r4, #27]
 23f39f6:	f7ff ffd5 	bl	23f39a4 <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f39fa:	2000      	movs	r0, #0
}
 23f39fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_SECTOR) {
 23f39fe:	28fe      	cmp	r0, #254	; 0xfe
 23f3a00:	d001      	beq.n	23f3a06 <_ZN9SdSpiCard8readDataEPhj+0x3e>
 23f3a02:	2319      	movs	r3, #25
 23f3a04:	e7f5      	b.n	23f39f2 <_ZN9SdSpiCard8readDataEPhj+0x2a>
    return m_spiDriver.receive(buf, n);
 23f3a06:	463a      	mov	r2, r7
 23f3a08:	4631      	mov	r1, r6
 23f3a0a:	4620      	mov	r0, r4
 23f3a0c:	f000 fa9a 	bl	23f3f44 <_ZN18SdSpiArduinoDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
 23f3a10:	77a0      	strb	r0, [r4, #30]
 23f3a12:	b108      	cbz	r0, 23f3a18 <_ZN9SdSpiCard8readDataEPhj+0x50>
    m_errorCode = code;
 23f3a14:	2326      	movs	r3, #38	; 0x26
 23f3a16:	e7ec      	b.n	23f39f2 <_ZN9SdSpiCard8readDataEPhj+0x2a>
    return m_spiDriver.receive();
 23f3a18:	4620      	mov	r0, r4
 23f3a1a:	f000 fa8e 	bl	23f3f3a <_ZN18SdSpiArduinoDriver7receiveEv>
 23f3a1e:	4620      	mov	r0, r4
 23f3a20:	f000 fa8b 	bl	23f3f3a <_ZN18SdSpiArduinoDriver7receiveEv>
  return true;
 23f3a24:	2001      	movs	r0, #1
 23f3a26:	e7e9      	b.n	23f39fc <_ZN9SdSpiCard8readDataEPhj+0x34>

023f3a28 <_ZN9SdSpiCard8readDataEPh>:
bool SdSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
 23f3a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 23f3a2c:	f7ff bfcc 	b.w	23f39c8 <_ZN9SdSpiCard8readDataEPhj>

023f3a30 <_ZN9SdSpiCard9waitReadyEt>:
    return readStop();
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::waitReady(uint16_t ms) {
 23f3a30:	b538      	push	{r3, r4, r5, lr}
 23f3a32:	460c      	mov	r4, r1
 23f3a34:	4605      	mov	r5, r0
 23f3a36:	f002 fea3 	bl	23f6780 <HAL_Timer_Get_Milli_Seconds>
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
 23f3a3a:	4404      	add	r4, r0
 23f3a3c:	b2a4      	uxth	r4, r4
 23f3a3e:	4628      	mov	r0, r5
 23f3a40:	f000 fa7b 	bl	23f3f3a <_ZN18SdSpiArduinoDriver7receiveEv>
  Timeout timeout(ms);
  while (spiReceive() != 0XFF) {
 23f3a44:	28ff      	cmp	r0, #255	; 0xff
 23f3a46:	d006      	beq.n	23f3a56 <_ZN9SdSpiCard9waitReadyEt+0x26>
    if (timeout.timedOut()) {
 23f3a48:	4620      	mov	r0, r4
 23f3a4a:	f7ff ff8a 	bl	23f3962 <_ZN7Timeout8timedOutEv.isra.0>
 23f3a4e:	2800      	cmp	r0, #0
 23f3a50:	d0f5      	beq.n	23f3a3e <_ZN9SdSpiCard9waitReadyEt+0xe>
      return false;
 23f3a52:	2000      	movs	r0, #0
    }
  }
  return true;
}
 23f3a54:	bd38      	pop	{r3, r4, r5, pc}
  return true;
 23f3a56:	2001      	movs	r0, #1
 23f3a58:	e7fc      	b.n	23f3a54 <_ZN9SdSpiCard9waitReadyEt+0x24>

023f3a5a <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 23f3a5a:	b538      	push	{r3, r4, r5, lr}
 23f3a5c:	4604      	mov	r4, r0
 23f3a5e:	4615      	mov	r5, r2
    m_spiDriver.send(data);
 23f3a60:	f000 fa86 	bl	23f3f70 <_ZN18SdSpiArduinoDriver4sendEh>
    m_spiDriver.send(buf, n);
 23f3a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 23f3a68:	4629      	mov	r1, r5
 23f3a6a:	4620      	mov	r0, r4
 23f3a6c:	f000 fa84 	bl	23f3f78 <_ZN18SdSpiArduinoDriver4sendEPKhj>
    m_spiDriver.send(data);
 23f3a70:	21ff      	movs	r1, #255	; 0xff
 23f3a72:	4620      	mov	r0, r4
 23f3a74:	f000 fa7c 	bl	23f3f70 <_ZN18SdSpiArduinoDriver4sendEh>
 23f3a78:	21ff      	movs	r1, #255	; 0xff
 23f3a7a:	4620      	mov	r0, r4
 23f3a7c:	f000 fa78 	bl	23f3f70 <_ZN18SdSpiArduinoDriver4sendEh>
    return m_spiDriver.receive();
 23f3a80:	4620      	mov	r0, r4
 23f3a82:	f000 fa5a 	bl	23f3f3a <_ZN18SdSpiArduinoDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
 23f3a86:	77a0      	strb	r0, [r4, #30]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 23f3a88:	f000 001f 	and.w	r0, r0, #31
 23f3a8c:	2805      	cmp	r0, #5
 23f3a8e:	d006      	beq.n	23f3a9e <_ZN9SdSpiCard9writeDataEhPKh+0x44>
    m_errorCode = code;
 23f3a90:	2321      	movs	r3, #33	; 0x21
    goto fail;
  }
  return true;

fail:
  spiStop();
 23f3a92:	4620      	mov	r0, r4
 23f3a94:	76e3      	strb	r3, [r4, #27]
 23f3a96:	f7ff ff85 	bl	23f39a4 <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f3a9a:	2000      	movs	r0, #0
}
 23f3a9c:	bd38      	pop	{r3, r4, r5, pc}
  return true;
 23f3a9e:	2001      	movs	r0, #1
 23f3aa0:	e7fc      	b.n	23f3a9c <_ZN9SdSpiCard9writeDataEhPKh+0x42>

023f3aa2 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
 23f3aa2:	b513      	push	{r0, r1, r4, lr}
 23f3aa4:	9101      	str	r1, [sp, #4]
  if (!waitReady(SD_WRITE_TIMEOUT)) {
 23f3aa6:	f44f 7116 	mov.w	r1, #600	; 0x258
bool SdSpiCard::writeData(const uint8_t* src) {
 23f3aaa:	4604      	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
 23f3aac:	f7ff ffc0 	bl	23f3a30 <_ZN9SdSpiCard9waitReadyEt>
 23f3ab0:	9a01      	ldr	r2, [sp, #4]
 23f3ab2:	b930      	cbnz	r0, 23f3ac2 <_ZN9SdSpiCard9writeDataEPKh+0x20>
 23f3ab4:	2325      	movs	r3, #37	; 0x25
 23f3ab6:	76e3      	strb	r3, [r4, #27]
  spiStop();
 23f3ab8:	4620      	mov	r0, r4
 23f3aba:	f7ff ff73 	bl	23f39a4 <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f3abe:	2000      	movs	r0, #0
 23f3ac0:	e005      	b.n	23f3ace <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 23f3ac2:	21fc      	movs	r1, #252	; 0xfc
 23f3ac4:	4620      	mov	r0, r4
 23f3ac6:	f7ff ffc8 	bl	23f3a5a <_ZN9SdSpiCard9writeDataEhPKh>
 23f3aca:	2800      	cmp	r0, #0
 23f3acc:	d0f4      	beq.n	23f3ab8 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
 23f3ace:	b002      	add	sp, #8
 23f3ad0:	bd10      	pop	{r4, pc}

023f3ad2 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 23f3ad2:	b538      	push	{r3, r4, r5, lr}
  if (!waitReady(SD_WRITE_TIMEOUT)) {
 23f3ad4:	f44f 7116 	mov.w	r1, #600	; 0x258
bool SdSpiCard::writeStop() {
 23f3ad8:	4604      	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
 23f3ada:	f7ff ffa9 	bl	23f3a30 <_ZN9SdSpiCard9waitReadyEt>
 23f3ade:	4605      	mov	r5, r0
 23f3ae0:	b930      	cbnz	r0, 23f3af0 <_ZN9SdSpiCard9writeStopEv+0x1e>
 23f3ae2:	231f      	movs	r3, #31
  m_state = IDLE_STATE;
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
 23f3ae4:	4620      	mov	r0, r4
 23f3ae6:	76e3      	strb	r3, [r4, #27]
 23f3ae8:	f7ff ff5c 	bl	23f39a4 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
 23f3aec:	4628      	mov	r0, r5
 23f3aee:	bd38      	pop	{r3, r4, r5, pc}
    m_spiDriver.send(data);
 23f3af0:	21fd      	movs	r1, #253	; 0xfd
 23f3af2:	4620      	mov	r0, r4
 23f3af4:	f000 fa3c 	bl	23f3f70 <_ZN18SdSpiArduinoDriver4sendEh>
  spiStop();
 23f3af8:	4620      	mov	r0, r4
 23f3afa:	f7ff ff53 	bl	23f39a4 <_ZN9SdSpiCard7spiStopEv>
  m_state = IDLE_STATE;
 23f3afe:	2300      	movs	r3, #0
 23f3b00:	7763      	strb	r3, [r4, #29]
  return true;
 23f3b02:	e7f3      	b.n	23f3aec <_ZN9SdSpiCard9writeStopEv+0x1a>

023f3b04 <_ZN9SdSpiCard10syncDeviceEv>:
  if (m_state == WRITE_STATE) {
 23f3b04:	7f43      	ldrb	r3, [r0, #29]
 23f3b06:	2b02      	cmp	r3, #2
 23f3b08:	d101      	bne.n	23f3b0e <_ZN9SdSpiCard10syncDeviceEv+0xa>
    return writeStop();
 23f3b0a:	f7ff bfe2 	b.w	23f3ad2 <_ZN9SdSpiCard9writeStopEv>
  if (m_state == READ_STATE) {
 23f3b0e:	2b01      	cmp	r3, #1
 23f3b10:	d101      	bne.n	23f3b16 <_ZN9SdSpiCard10syncDeviceEv+0x12>
    return readStop();
 23f3b12:	f000 b916 	b.w	23f3d42 <_ZN9SdSpiCard8readStopEv>
}
 23f3b16:	2001      	movs	r0, #1
 23f3b18:	4770      	bx	lr

023f3b1a <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 23f3b1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23f3b1c:	4604      	mov	r4, r0
 23f3b1e:	460d      	mov	r5, r1
 23f3b20:	9201      	str	r2, [sp, #4]
  if (!syncDevice()) {
 23f3b22:	f7ff ffef 	bl	23f3b04 <_ZN9SdSpiCard10syncDeviceEv>
 23f3b26:	b390      	cbz	r0, 23f3b8e <_ZN9SdSpiCard11cardCommandEhm+0x74>
  if (!m_spiActive) {
 23f3b28:	7f23      	ldrb	r3, [r4, #28]
 23f3b2a:	b913      	cbnz	r3, 23f3b32 <_ZN9SdSpiCard11cardCommandEhm+0x18>
    spiStart();
 23f3b2c:	4620      	mov	r0, r4
 23f3b2e:	f7ff ff26 	bl	23f397e <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0 && cmd != CMD12 && !waitReady(SD_CMD_TIMEOUT)) {
 23f3b32:	bb1d      	cbnz	r5, 23f3b7c <_ZN9SdSpiCard11cardCommandEhm+0x62>
 23f3b34:	4620      	mov	r0, r4
 23f3b36:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 23f3b3a:	f000 fa19 	bl	23f3f70 <_ZN18SdSpiArduinoDriver4sendEh>
 23f3b3e:	2603      	movs	r6, #3
    spiSend(pa[i]);
 23f3b40:	af01      	add	r7, sp, #4
 23f3b42:	5db9      	ldrb	r1, [r7, r6]
 23f3b44:	4620      	mov	r0, r4
 23f3b46:	f000 fa13 	bl	23f3f70 <_ZN18SdSpiArduinoDriver4sendEh>
  for (int8_t i = 3; i >= 0; i--) {
 23f3b4a:	3e01      	subs	r6, #1
 23f3b4c:	d2f9      	bcs.n	23f3b42 <_ZN9SdSpiCard11cardCommandEhm+0x28>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 23f3b4e:	2d00      	cmp	r5, #0
 23f3b50:	bf0c      	ite	eq
 23f3b52:	2195      	moveq	r1, #149	; 0x95
 23f3b54:	2187      	movne	r1, #135	; 0x87
 23f3b56:	4620      	mov	r0, r4
 23f3b58:	f000 fa0a 	bl	23f3f70 <_ZN18SdSpiArduinoDriver4sendEh>
    return m_spiDriver.receive();
 23f3b5c:	4620      	mov	r0, r4
 23f3b5e:	f000 f9ec 	bl	23f3f3a <_ZN18SdSpiArduinoDriver7receiveEv>
 23f3b62:	250a      	movs	r5, #10
 23f3b64:	4620      	mov	r0, r4
 23f3b66:	f000 f9e8 	bl	23f3f3a <_ZN18SdSpiArduinoDriver7receiveEv>
  } while (m_status & 0X80 && ++n < 10);
 23f3b6a:	0603      	lsls	r3, r0, #24
    m_status = spiReceive();
 23f3b6c:	77a0      	strb	r0, [r4, #30]
  } while (m_status & 0X80 && ++n < 10);
 23f3b6e:	d503      	bpl.n	23f3b78 <_ZN9SdSpiCard11cardCommandEhm+0x5e>
 23f3b70:	3d01      	subs	r5, #1
 23f3b72:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 23f3b76:	d1f5      	bne.n	23f3b64 <_ZN9SdSpiCard11cardCommandEhm+0x4a>
}
 23f3b78:	b003      	add	sp, #12
 23f3b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (cmd != CMD0 && cmd != CMD12 && !waitReady(SD_CMD_TIMEOUT)) {
 23f3b7c:	2d0c      	cmp	r5, #12
 23f3b7e:	d0d9      	beq.n	23f3b34 <_ZN9SdSpiCard11cardCommandEhm+0x1a>
 23f3b80:	f44f 7196 	mov.w	r1, #300	; 0x12c
 23f3b84:	4620      	mov	r0, r4
 23f3b86:	f7ff ff53 	bl	23f3a30 <_ZN9SdSpiCard9waitReadyEt>
 23f3b8a:	2800      	cmp	r0, #0
 23f3b8c:	d1d2      	bne.n	23f3b34 <_ZN9SdSpiCard11cardCommandEhm+0x1a>
    return 0XFF;
 23f3b8e:	20ff      	movs	r0, #255	; 0xff
 23f3b90:	e7f2      	b.n	23f3b78 <_ZN9SdSpiCard11cardCommandEhm+0x5e>

023f3b92 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
 23f3b92:	b570      	push	{r4, r5, r6, lr}
 23f3b94:	4604      	mov	r4, r0
 23f3b96:	460d      	mov	r5, r1
 23f3b98:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
 23f3b9a:	2137      	movs	r1, #55	; 0x37
 23f3b9c:	2200      	movs	r2, #0
 23f3b9e:	f7ff ffbc 	bl	23f3b1a <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 23f3ba2:	4632      	mov	r2, r6
 23f3ba4:	4629      	mov	r1, r5
 23f3ba6:	4620      	mov	r0, r4
  }
 23f3ba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
 23f3bac:	f7ff bfb5 	b.w	23f3b1a <_ZN9SdSpiCard11cardCommandEhm>

023f3bb0 <_ZN9SdSpiCard5beginE11SdSpiConfig>:
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
 23f3bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f3bb4:	b088      	sub	sp, #32
 23f3bb6:	ad01      	add	r5, sp, #4
 23f3bb8:	4604      	mov	r4, r0
 23f3bba:	e885 000e 	stmia.w	r5, {r1, r2, r3}
    m_beginCalled = false;
 23f3bbe:	2300      	movs	r3, #0
 23f3bc0:	f89d 0004 	ldrb.w	r0, [sp, #4]
 23f3bc4:	7663      	strb	r3, [r4, #25]
  m_errorCode = SD_CARD_ERROR_NONE;
 23f3bc6:	76e3      	strb	r3, [r4, #27]
    m_spiActive = false;
 23f3bc8:	61e3      	str	r3, [r4, #28]
  m_csPin = spiConfig.csPin;
 23f3bca:	76a0      	strb	r0, [r4, #26]
 23f3bcc:	4617      	mov	r7, r2
 23f3bce:	f89d 6005 	ldrb.w	r6, [sp, #5]
  sdCsInit(m_csPin);
 23f3bd2:	f001 ffbf 	bl	23f5b54 <_Z8sdCsInith>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
 23f3bd6:	2101      	movs	r1, #1
 23f3bd8:	7ea0      	ldrb	r0, [r4, #26]
 23f3bda:	f001 ffbe 	bl	23f5b5a <_Z9sdCsWritehb>
  void spiSetSckSpeed(uint32_t maxSck) { m_spiDriver.setSckSpeed(maxSck); }
 23f3bde:	4620      	mov	r0, r4
 23f3be0:	494c      	ldr	r1, [pc, #304]	; (23f3d14 <_ZN9SdSpiCard5beginE11SdSpiConfig+0x164>)
 23f3be2:	f7ff fec6 	bl	23f3972 <_ZN18SdSpiArduinoDriver11setSckSpeedEm>
  spiBegin(spiConfig);
 23f3be6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  m_beginCalled = true;
 23f3bea:	2501      	movs	r5, #1
 23f3bec:	ab05      	add	r3, sp, #20
 23f3bee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
 23f3bf2:	4620      	mov	r0, r4
 23f3bf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 23f3bf6:	f000 f977 	bl	23f3ee8 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig>
  spiStart();
 23f3bfa:	4620      	mov	r0, r4
  m_beginCalled = true;
 23f3bfc:	7665      	strb	r5, [r4, #25]
  spiStart();
 23f3bfe:	f7ff febe 	bl	23f397e <_ZN9SdSpiCard8spiStartEv>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
 23f3c02:	4629      	mov	r1, r5
 23f3c04:	7ea0      	ldrb	r0, [r4, #26]
 23f3c06:	f001 ffa8 	bl	23f5b5a <_Z9sdCsWritehb>
 23f3c0a:	250a      	movs	r5, #10
    return m_spiDriver.receive();
 23f3c0c:	4620      	mov	r0, r4
  for (uint8_t i = 0; i < 10; i++) {
 23f3c0e:	3d01      	subs	r5, #1
 23f3c10:	f000 f993 	bl	23f3f3a <_ZN18SdSpiArduinoDriver7receiveEv>
 23f3c14:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 23f3c18:	d1f8      	bne.n	23f3c0c <_ZN9SdSpiCard5beginE11SdSpiConfig+0x5c>
  void spiSelect() { sdCsWrite(m_csPin, false); }
 23f3c1a:	4629      	mov	r1, r5
 23f3c1c:	7ea0      	ldrb	r0, [r4, #26]
 23f3c1e:	f001 ff9c 	bl	23f5b5a <_Z9sdCsWritehb>
 23f3c22:	f002 fdad 	bl	23f6780 <HAL_Timer_Get_Milli_Seconds>
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
 23f3c26:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 23f3c2a:	b285      	uxth	r5, r0
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
 23f3c2c:	2200      	movs	r2, #0
 23f3c2e:	4620      	mov	r0, r4
 23f3c30:	4611      	mov	r1, r2
 23f3c32:	f7ff ff72 	bl	23f3b1a <_ZN9SdSpiCard11cardCommandEhm>
 23f3c36:	2801      	cmp	r0, #1
 23f3c38:	4680      	mov	r8, r0
 23f3c3a:	d00d      	beq.n	23f3c58 <_ZN9SdSpiCard5beginE11SdSpiConfig+0xa8>
    if (timeout.timedOut()) {
 23f3c3c:	4628      	mov	r0, r5
 23f3c3e:	f7ff fe90 	bl	23f3962 <_ZN7Timeout8timedOutEv.isra.0>
 23f3c42:	2800      	cmp	r0, #0
 23f3c44:	d0f2      	beq.n	23f3c2c <_ZN9SdSpiCard5beginE11SdSpiConfig+0x7c>
    m_errorCode = code;
 23f3c46:	2301      	movs	r3, #1
  spiStop();
 23f3c48:	4620      	mov	r0, r4
 23f3c4a:	76e3      	strb	r3, [r4, #27]
 23f3c4c:	f7ff feaa 	bl	23f39a4 <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f3c50:	2000      	movs	r0, #0
}
 23f3c52:	b008      	add	sp, #32
 23f3c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND) {
 23f3c58:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 23f3c5c:	2108      	movs	r1, #8
 23f3c5e:	4620      	mov	r0, r4
 23f3c60:	f7ff ff5b 	bl	23f3b1a <_ZN9SdSpiCard11cardCommandEhm>
 23f3c64:	0743      	lsls	r3, r0, #29
 23f3c66:	d413      	bmi.n	23f3c90 <_ZN9SdSpiCard5beginE11SdSpiConfig+0xe0>
 23f3c68:	f04f 0904 	mov.w	r9, #4
    return m_spiDriver.receive();
 23f3c6c:	4620      	mov	r0, r4
 23f3c6e:	f000 f964 	bl	23f3f3a <_ZN18SdSpiArduinoDriver7receiveEv>
    for (uint8_t i = 0; i < 4; i++) {
 23f3c72:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 23f3c76:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
      m_status = spiReceive();
 23f3c7a:	77a0      	strb	r0, [r4, #30]
    for (uint8_t i = 0; i < 4; i++) {
 23f3c7c:	d1f6      	bne.n	23f3c6c <_ZN9SdSpiCard5beginE11SdSpiConfig+0xbc>
    if (m_status == 0XAA) {
 23f3c7e:	28aa      	cmp	r0, #170	; 0xaa
 23f3c80:	d018      	beq.n	23f3cb4 <_ZN9SdSpiCard5beginE11SdSpiConfig+0x104>
    if (timeout.timedOut()) {
 23f3c82:	4628      	mov	r0, r5
 23f3c84:	f7ff fe6d 	bl	23f3962 <_ZN7Timeout8timedOutEv.isra.0>
 23f3c88:	2800      	cmp	r0, #0
 23f3c8a:	d0e5      	beq.n	23f3c58 <_ZN9SdSpiCard5beginE11SdSpiConfig+0xa8>
    m_errorCode = code;
 23f3c8c:	2306      	movs	r3, #6
 23f3c8e:	e7db      	b.n	23f3c48 <_ZN9SdSpiCard5beginE11SdSpiConfig+0x98>
      cardType = SD_CARD_TYPE_SD1;
 23f3c90:	f04f 0901 	mov.w	r9, #1
  arg = cardType == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 23f3c94:	f04f 0a00 	mov.w	sl, #0
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 23f3c98:	4652      	mov	r2, sl
 23f3c9a:	2129      	movs	r1, #41	; 0x29
 23f3c9c:	4620      	mov	r0, r4
 23f3c9e:	f7ff ff78 	bl	23f3b92 <_ZN9SdSpiCard8cardAcmdEhm>
 23f3ca2:	4602      	mov	r2, r0
 23f3ca4:	b158      	cbz	r0, 23f3cbe <_ZN9SdSpiCard5beginE11SdSpiConfig+0x10e>
    if (timeout.timedOut()) {
 23f3ca6:	4628      	mov	r0, r5
 23f3ca8:	f7ff fe5b 	bl	23f3962 <_ZN7Timeout8timedOutEv.isra.0>
 23f3cac:	2800      	cmp	r0, #0
 23f3cae:	d0f3      	beq.n	23f3c98 <_ZN9SdSpiCard5beginE11SdSpiConfig+0xe8>
 23f3cb0:	2317      	movs	r3, #23
 23f3cb2:	e7c9      	b.n	23f3c48 <_ZN9SdSpiCard5beginE11SdSpiConfig+0x98>
      cardType = SD_CARD_TYPE_SD2;
 23f3cb4:	f04f 0902 	mov.w	r9, #2
  arg = cardType == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 23f3cb8:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
 23f3cbc:	e7ec      	b.n	23f3c98 <_ZN9SdSpiCard5beginE11SdSpiConfig+0xe8>
  if (cardType == SD_CARD_TYPE_SD2) {
 23f3cbe:	f1b9 0f02 	cmp.w	r9, #2
 23f3cc2:	d119      	bne.n	23f3cf8 <_ZN9SdSpiCard5beginE11SdSpiConfig+0x148>
    if (cardCommand(CMD58, 0)) {
 23f3cc4:	213a      	movs	r1, #58	; 0x3a
 23f3cc6:	4620      	mov	r0, r4
 23f3cc8:	f7ff ff27 	bl	23f3b1a <_ZN9SdSpiCard11cardCommandEhm>
 23f3ccc:	b108      	cbz	r0, 23f3cd2 <_ZN9SdSpiCard5beginE11SdSpiConfig+0x122>
 23f3cce:	2312      	movs	r3, #18
 23f3cd0:	e7ba      	b.n	23f3c48 <_ZN9SdSpiCard5beginE11SdSpiConfig+0x98>
    return m_spiDriver.receive();
 23f3cd2:	4620      	mov	r0, r4
 23f3cd4:	f000 f931 	bl	23f3f3a <_ZN18SdSpiArduinoDriver7receiveEv>
    if ((spiReceive() & 0XC0) == 0XC0) {
 23f3cd8:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
      cardType = SD_CARD_TYPE_SDHC;
 23f3cdc:	28c0      	cmp	r0, #192	; 0xc0
 23f3cde:	bf08      	it	eq
 23f3ce0:	f04f 0903 	moveq.w	r9, #3
 23f3ce4:	4620      	mov	r0, r4
 23f3ce6:	f000 f928 	bl	23f3f3a <_ZN18SdSpiArduinoDriver7receiveEv>
 23f3cea:	4620      	mov	r0, r4
 23f3cec:	f000 f925 	bl	23f3f3a <_ZN18SdSpiArduinoDriver7receiveEv>
 23f3cf0:	4620      	mov	r0, r4
 23f3cf2:	f000 f922 	bl	23f3f3a <_ZN18SdSpiArduinoDriver7receiveEv>
    for (uint8_t i = 0; i < 3; i++) {
 23f3cf6:	46c8      	mov	r8, r9
  spiStop();
 23f3cf8:	4620      	mov	r0, r4
 23f3cfa:	f7ff fe53 	bl	23f39a4 <_ZN9SdSpiCard7spiStopEv>
const uint8_t DEDICATED_SPI = 1;
/**
 * \param[in] opt option field of SdSpiConfig.
 * \return true for dedicated SPI.
 */
inline bool spiOptionDedicated(uint8_t opt) { return opt & DEDICATED_SPI; }
 23f3cfe:	f006 0601 	and.w	r6, r6, #1
  void spiSetSckSpeed(uint32_t maxSck) { m_spiDriver.setSckSpeed(maxSck); }
 23f3d02:	4620      	mov	r0, r4
 23f3d04:	4639      	mov	r1, r7
 23f3d06:	f7ff fe34 	bl	23f3972 <_ZN18SdSpiArduinoDriver11setSckSpeedEm>
  return true;
 23f3d0a:	2001      	movs	r0, #1
  m_type = cardType;
 23f3d0c:	f884 801f 	strb.w	r8, [r4, #31]
 23f3d10:	7626      	strb	r6, [r4, #24]
  return true;
 23f3d12:	e79e      	b.n	23f3c52 <_ZN9SdSpiCard5beginE11SdSpiConfig+0xa2>
 23f3d14:	00061a80 	.word	0x00061a80

023f3d18 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t sector) {
 23f3d18:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 23f3d1a:	7fc3      	ldrb	r3, [r0, #31]
bool SdSpiCard::readStart(uint32_t sector) {
 23f3d1c:	460a      	mov	r2, r1
  if (type() != SD_CARD_TYPE_SDHC) {
 23f3d1e:	2b03      	cmp	r3, #3
    sector <<= 9;
 23f3d20:	bf18      	it	ne
 23f3d22:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, sector)) {
 23f3d24:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t sector) {
 23f3d26:	4604      	mov	r4, r0
  if (cardCommand(CMD18, sector)) {
 23f3d28:	f7ff fef7 	bl	23f3b1a <_ZN9SdSpiCard11cardCommandEhm>
 23f3d2c:	b130      	cbz	r0, 23f3d3c <_ZN9SdSpiCard9readStartEm+0x24>
    m_errorCode = code;
 23f3d2e:	230c      	movs	r3, #12
  spiStop();
 23f3d30:	4620      	mov	r0, r4
 23f3d32:	76e3      	strb	r3, [r4, #27]
 23f3d34:	f7ff fe36 	bl	23f39a4 <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f3d38:	2000      	movs	r0, #0
}
 23f3d3a:	bd10      	pop	{r4, pc}
  m_state = READ_STATE;
 23f3d3c:	2001      	movs	r0, #1
 23f3d3e:	7760      	strb	r0, [r4, #29]
  return true;
 23f3d40:	e7fb      	b.n	23f3d3a <_ZN9SdSpiCard9readStartEm+0x22>

023f3d42 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
 23f3d42:	b538      	push	{r3, r4, r5, lr}
  m_state = IDLE_STATE;
 23f3d44:	2400      	movs	r4, #0
  if (cardCommand(CMD12, 0)) {
 23f3d46:	210c      	movs	r1, #12
 23f3d48:	4622      	mov	r2, r4
  m_state = IDLE_STATE;
 23f3d4a:	7744      	strb	r4, [r0, #29]
bool SdSpiCard::readStop() {
 23f3d4c:	4605      	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
 23f3d4e:	f7ff fee4 	bl	23f3b1a <_ZN9SdSpiCard11cardCommandEhm>
 23f3d52:	b130      	cbz	r0, 23f3d62 <_ZN9SdSpiCard8readStopEv+0x20>
 23f3d54:	2309      	movs	r3, #9
  spiStop();
 23f3d56:	4628      	mov	r0, r5
 23f3d58:	76eb      	strb	r3, [r5, #27]
 23f3d5a:	f7ff fe23 	bl	23f39a4 <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f3d5e:	4620      	mov	r0, r4
}
 23f3d60:	bd38      	pop	{r3, r4, r5, pc}
  spiStop();
 23f3d62:	4628      	mov	r0, r5
 23f3d64:	f7ff fe1e 	bl	23f39a4 <_ZN9SdSpiCard7spiStopEv>
  return true;
 23f3d68:	2001      	movs	r0, #1
 23f3d6a:	e7f9      	b.n	23f3d60 <_ZN9SdSpiCard8readStopEv+0x1e>

023f3d6c <_ZN9SdSpiCard11readSectorsEmPhj>:
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
 23f3d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f3d6e:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
 23f3d70:	7f43      	ldrb	r3, [r0, #29]
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
 23f3d72:	4604      	mov	r4, r0
  if (sdState() != READ_STATE || sector != m_curSector) {
 23f3d74:	2b01      	cmp	r3, #1
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
 23f3d76:	460d      	mov	r5, r1
 23f3d78:	4616      	mov	r6, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
 23f3d7a:	d102      	bne.n	23f3d82 <_ZN9SdSpiCard11readSectorsEmPhj+0x16>
 23f3d7c:	6943      	ldr	r3, [r0, #20]
 23f3d7e:	428b      	cmp	r3, r1
 23f3d80:	d007      	beq.n	23f3d92 <_ZN9SdSpiCard11readSectorsEmPhj+0x26>
    if (!readStart(sector)) {
 23f3d82:	4629      	mov	r1, r5
 23f3d84:	4620      	mov	r0, r4
 23f3d86:	f7ff ffc7 	bl	23f3d18 <_ZN9SdSpiCard9readStartEm>
 23f3d8a:	b908      	cbnz	r0, 23f3d90 <_ZN9SdSpiCard11readSectorsEmPhj+0x24>
  return false;
 23f3d8c:	2000      	movs	r0, #0
}
 23f3d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_curSector = sector;
 23f3d90:	6165      	str	r5, [r4, #20]
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
 23f3d92:	2500      	movs	r5, #0
  for (size_t i = 0; i < ns; i++, dst += 512) {
 23f3d94:	42bd      	cmp	r5, r7
 23f3d96:	eb06 2145 	add.w	r1, r6, r5, lsl #9
 23f3d9a:	d006      	beq.n	23f3daa <_ZN9SdSpiCard11readSectorsEmPhj+0x3e>
    if (!readData(dst)) {
 23f3d9c:	4620      	mov	r0, r4
 23f3d9e:	f7ff fe43 	bl	23f3a28 <_ZN9SdSpiCard8readDataEPh>
 23f3da2:	2800      	cmp	r0, #0
 23f3da4:	d0f2      	beq.n	23f3d8c <_ZN9SdSpiCard11readSectorsEmPhj+0x20>
  for (size_t i = 0; i < ns; i++, dst += 512) {
 23f3da6:	3501      	adds	r5, #1
 23f3da8:	e7f4      	b.n	23f3d94 <_ZN9SdSpiCard11readSectorsEmPhj+0x28>
  m_curSector += ns;
 23f3daa:	6963      	ldr	r3, [r4, #20]
 23f3dac:	442b      	add	r3, r5
 23f3dae:	6163      	str	r3, [r4, #20]
  return m_dedicatedSpi ? true : readStop();
 23f3db0:	7e23      	ldrb	r3, [r4, #24]
 23f3db2:	b92b      	cbnz	r3, 23f3dc0 <_ZN9SdSpiCard11readSectorsEmPhj+0x54>
 23f3db4:	4620      	mov	r0, r4
 23f3db6:	f7ff ffc4 	bl	23f3d42 <_ZN9SdSpiCard8readStopEv>
 23f3dba:	f000 0001 	and.w	r0, r0, #1
 23f3dbe:	e7e6      	b.n	23f3d8e <_ZN9SdSpiCard11readSectorsEmPhj+0x22>
 23f3dc0:	2001      	movs	r0, #1
 23f3dc2:	e7fa      	b.n	23f3dba <_ZN9SdSpiCard11readSectorsEmPhj+0x4e>

023f3dc4 <_ZN9SdSpiCard10readSectorEmPh>:
  return readSectors(sector, dst, 1);
 23f3dc4:	2301      	movs	r3, #1
 23f3dc6:	f7ff bfd1 	b.w	23f3d6c <_ZN9SdSpiCard11readSectorsEmPhj>

023f3dca <_ZN9SdSpiCard10writeStartEm>:
bool SdSpiCard::writeStart(uint32_t sector) {
 23f3dca:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 23f3dcc:	7fc3      	ldrb	r3, [r0, #31]
bool SdSpiCard::writeStart(uint32_t sector) {
 23f3dce:	460a      	mov	r2, r1
  if (type() != SD_CARD_TYPE_SDHC) {
 23f3dd0:	2b03      	cmp	r3, #3
    sector <<= 9;
 23f3dd2:	bf18      	it	ne
 23f3dd4:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD25, sector)) {
 23f3dd6:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t sector) {
 23f3dd8:	4604      	mov	r4, r0
  if (cardCommand(CMD25, sector)) {
 23f3dda:	f7ff fe9e 	bl	23f3b1a <_ZN9SdSpiCard11cardCommandEhm>
 23f3dde:	b130      	cbz	r0, 23f3dee <_ZN9SdSpiCard10writeStartEm+0x24>
 23f3de0:	230e      	movs	r3, #14
  spiStop();
 23f3de2:	4620      	mov	r0, r4
 23f3de4:	76e3      	strb	r3, [r4, #27]
 23f3de6:	f7ff fddd 	bl	23f39a4 <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f3dea:	2000      	movs	r0, #0
}
 23f3dec:	bd10      	pop	{r4, pc}
  m_state = WRITE_STATE;
 23f3dee:	2302      	movs	r3, #2
  return true;
 23f3df0:	2001      	movs	r0, #1
  m_state = WRITE_STATE;
 23f3df2:	7763      	strb	r3, [r4, #29]
  return true;
 23f3df4:	e7fa      	b.n	23f3dec <_ZN9SdSpiCard10writeStartEm+0x22>

023f3df6 <_ZN9SdSpiCard12writeSectorsEmPKhj>:
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
 23f3df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f3df8:	461f      	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
 23f3dfa:	7f43      	ldrb	r3, [r0, #29]
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
 23f3dfc:	4604      	mov	r4, r0
  if (sdState() != WRITE_STATE || m_curSector != sector) {
 23f3dfe:	2b02      	cmp	r3, #2
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
 23f3e00:	460d      	mov	r5, r1
 23f3e02:	4616      	mov	r6, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
 23f3e04:	d102      	bne.n	23f3e0c <_ZN9SdSpiCard12writeSectorsEmPKhj+0x16>
 23f3e06:	6943      	ldr	r3, [r0, #20]
 23f3e08:	428b      	cmp	r3, r1
 23f3e0a:	d005      	beq.n	23f3e18 <_ZN9SdSpiCard12writeSectorsEmPKhj+0x22>
    if (!writeStart(sector)) {
 23f3e0c:	4629      	mov	r1, r5
 23f3e0e:	4620      	mov	r0, r4
 23f3e10:	f7ff ffdb 	bl	23f3dca <_ZN9SdSpiCard10writeStartEm>
 23f3e14:	b1c0      	cbz	r0, 23f3e48 <_ZN9SdSpiCard12writeSectorsEmPKhj+0x52>
    m_curSector = sector;
 23f3e16:	6165      	str	r5, [r4, #20]
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
 23f3e18:	2500      	movs	r5, #0
  for (size_t i = 0; i < ns; i++, src += 512) {
 23f3e1a:	42bd      	cmp	r5, r7
 23f3e1c:	eb06 2145 	add.w	r1, r6, r5, lsl #9
 23f3e20:	d005      	beq.n	23f3e2e <_ZN9SdSpiCard12writeSectorsEmPKhj+0x38>
    if (!writeData(src)) {
 23f3e22:	4620      	mov	r0, r4
 23f3e24:	f7ff fe3d 	bl	23f3aa2 <_ZN9SdSpiCard9writeDataEPKh>
 23f3e28:	b170      	cbz	r0, 23f3e48 <_ZN9SdSpiCard12writeSectorsEmPKhj+0x52>
  for (size_t i = 0; i < ns; i++, src += 512) {
 23f3e2a:	3501      	adds	r5, #1
 23f3e2c:	e7f5      	b.n	23f3e1a <_ZN9SdSpiCard12writeSectorsEmPKhj+0x24>
  m_curSector += ns;
 23f3e2e:	6963      	ldr	r3, [r4, #20]
 23f3e30:	442b      	add	r3, r5
 23f3e32:	6163      	str	r3, [r4, #20]
  return m_dedicatedSpi ? true : writeStop();
 23f3e34:	7e23      	ldrb	r3, [r4, #24]
 23f3e36:	b92b      	cbnz	r3, 23f3e44 <_ZN9SdSpiCard12writeSectorsEmPKhj+0x4e>
 23f3e38:	4620      	mov	r0, r4
 23f3e3a:	f7ff fe4a 	bl	23f3ad2 <_ZN9SdSpiCard9writeStopEv>
 23f3e3e:	f000 0001 	and.w	r0, r0, #1
}
 23f3e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return m_dedicatedSpi ? true : writeStop();
 23f3e44:	2001      	movs	r0, #1
 23f3e46:	e7fa      	b.n	23f3e3e <_ZN9SdSpiCard12writeSectorsEmPKhj+0x48>
  spiStop();
 23f3e48:	4620      	mov	r0, r4
 23f3e4a:	f7ff fdab 	bl	23f39a4 <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f3e4e:	2000      	movs	r0, #0
 23f3e50:	e7f7      	b.n	23f3e42 <_ZN9SdSpiCard12writeSectorsEmPKhj+0x4c>

023f3e52 <_ZN9SdSpiCard11writeSectorEmPKh>:
bool SdSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
 23f3e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_dedicatedSpi) {
 23f3e56:	7e07      	ldrb	r7, [r0, #24]
bool SdSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
 23f3e58:	4604      	mov	r4, r0
 23f3e5a:	460b      	mov	r3, r1
 23f3e5c:	4615      	mov	r5, r2
  if (m_dedicatedSpi) {
 23f3e5e:	b127      	cbz	r7, 23f3e6a <_ZN9SdSpiCard11writeSectorEmPKh+0x18>
}
 23f3e60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return writeSectors(sector, src, 1);
 23f3e64:	2301      	movs	r3, #1
 23f3e66:	f7ff bfc6 	b.w	23f3df6 <_ZN9SdSpiCard12writeSectorsEmPKhj>
  if (type() != SD_CARD_TYPE_SDHC) {
 23f3e6a:	7fc2      	ldrb	r2, [r0, #31]
 23f3e6c:	2a03      	cmp	r2, #3
    sector <<= 9;
 23f3e6e:	bf18      	it	ne
 23f3e70:	024b      	lslne	r3, r1, #9
  if (cardCommand(CMD24, sector)) {
 23f3e72:	461a      	mov	r2, r3
 23f3e74:	2118      	movs	r1, #24
 23f3e76:	f7ff fe50 	bl	23f3b1a <_ZN9SdSpiCard11cardCommandEhm>
 23f3e7a:	4606      	mov	r6, r0
 23f3e7c:	b128      	cbz	r0, 23f3e8a <_ZN9SdSpiCard11writeSectorEmPKh+0x38>
 23f3e7e:	230d      	movs	r3, #13
 23f3e80:	76e3      	strb	r3, [r4, #27]
  spiStop();
 23f3e82:	4620      	mov	r0, r4
 23f3e84:	f7ff fd8e 	bl	23f39a4 <_ZN9SdSpiCard7spiStopEv>
  return false;
 23f3e88:	e020      	b.n	23f3ecc <_ZN9SdSpiCard11writeSectorEmPKh+0x7a>
  if (!writeData(DATA_START_SECTOR, src)) {
 23f3e8a:	462a      	mov	r2, r5
 23f3e8c:	21fe      	movs	r1, #254	; 0xfe
 23f3e8e:	4620      	mov	r0, r4
 23f3e90:	f7ff fde3 	bl	23f3a5a <_ZN9SdSpiCard9writeDataEhPKh>
 23f3e94:	2800      	cmp	r0, #0
 23f3e96:	d0f4      	beq.n	23f3e82 <_ZN9SdSpiCard11writeSectorEmPKh+0x30>
  if (!waitReady(SD_WRITE_TIMEOUT)) {
 23f3e98:	f44f 7116 	mov.w	r1, #600	; 0x258
 23f3e9c:	4620      	mov	r0, r4
 23f3e9e:	f7ff fdc7 	bl	23f3a30 <_ZN9SdSpiCard9waitReadyEt>
 23f3ea2:	4605      	mov	r5, r0
 23f3ea4:	b908      	cbnz	r0, 23f3eaa <_ZN9SdSpiCard11writeSectorEmPKh+0x58>
 23f3ea6:	2324      	movs	r3, #36	; 0x24
 23f3ea8:	e7ea      	b.n	23f3e80 <_ZN9SdSpiCard11writeSectorEmPKh+0x2e>
  if (cardCommand(CMD13, 0) || spiReceive()) {
 23f3eaa:	4632      	mov	r2, r6
 23f3eac:	210d      	movs	r1, #13
 23f3eae:	4620      	mov	r0, r4
 23f3eb0:	f7ff fe33 	bl	23f3b1a <_ZN9SdSpiCard11cardCommandEhm>
 23f3eb4:	b108      	cbz	r0, 23f3eba <_ZN9SdSpiCard11writeSectorEmPKh+0x68>
 23f3eb6:	230a      	movs	r3, #10
 23f3eb8:	e7e2      	b.n	23f3e80 <_ZN9SdSpiCard11writeSectorEmPKh+0x2e>
    return m_spiDriver.receive();
 23f3eba:	4620      	mov	r0, r4
 23f3ebc:	f000 f83d 	bl	23f3f3a <_ZN18SdSpiArduinoDriver7receiveEv>
 23f3ec0:	2800      	cmp	r0, #0
 23f3ec2:	d1f8      	bne.n	23f3eb6 <_ZN9SdSpiCard11writeSectorEmPKh+0x64>
  spiStop();
 23f3ec4:	4620      	mov	r0, r4
 23f3ec6:	f7ff fd6d 	bl	23f39a4 <_ZN9SdSpiCard7spiStopEv>
  return true;
 23f3eca:	462f      	mov	r7, r5
}
 23f3ecc:	4638      	mov	r0, r7
 23f3ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

023f3ed4 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) && defined(PLATFORM_ID)
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback() {
  SPI_DMA_TransferCompleted = true;
 23f3ed4:	2201      	movs	r2, #1
 23f3ed6:	4b01      	ldr	r3, [pc, #4]	; (23f3edc <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 23f3ed8:	701a      	strb	r2, [r3, #0]
}
 23f3eda:	4770      	bx	lr
 23f3edc:	1007ae9c 	.word	0x1007ae9c

023f3ee0 <_ZN18SdSpiArduinoDriver8activateEv>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() { m_spi->beginTransaction(m_spiSettings); }
 23f3ee0:	1d01      	adds	r1, r0, #4
 23f3ee2:	6800      	ldr	r0, [r0, #0]
 23f3ee4:	f004 bed2 	b.w	23f8c8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

023f3ee8 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
 23f3ee8:	b530      	push	{r4, r5, lr}
 23f3eea:	b085      	sub	sp, #20
 23f3eec:	4604      	mov	r4, r0
 23f3eee:	a804      	add	r0, sp, #16
 23f3ef0:	e900 000e 	stmdb	r0, {r1, r2, r3}
  if (spiConfig.spiPort) {
 23f3ef4:	b133      	cbz	r3, 23f3f04 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig+0x1c>
    m_spi = spiConfig.spiPort;
  } else {
    m_spi = &SPI;
 23f3ef6:	6023      	str	r3, [r4, #0]
  }
  m_spi->begin();
 23f3ef8:	6820      	ldr	r0, [r4, #0]
}
 23f3efa:	b005      	add	sp, #20
 23f3efc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  m_spi->begin();
 23f3f00:	f004 be70 	b.w	23f8be4 <_ZN8SPIClass5beginEv>
        static SPIClass instance(Interface);
 23f3f04:	4d09      	ldr	r5, [pc, #36]	; (23f3f2c <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig+0x44>)
 23f3f06:	e8d5 1f8f 	ldab	r1, [r5]
 23f3f0a:	f011 0101 	ands.w	r1, r1, #1
 23f3f0e:	d10b      	bne.n	23f3f28 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig+0x40>
 23f3f10:	4628      	mov	r0, r5
 23f3f12:	9100      	str	r1, [sp, #0]
 23f3f14:	f003 fb6c 	bl	23f75f0 <__cxa_guard_acquire>
 23f3f18:	9900      	ldr	r1, [sp, #0]
 23f3f1a:	b128      	cbz	r0, 23f3f28 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig+0x40>
 23f3f1c:	4804      	ldr	r0, [pc, #16]	; (23f3f30 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig+0x48>)
 23f3f1e:	f004 fe57 	bl	23f8bd0 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23f3f22:	4628      	mov	r0, r5
 23f3f24:	f003 fb72 	bl	23f760c <__cxa_guard_release>
    m_spi = &SPI;
 23f3f28:	4b01      	ldr	r3, [pc, #4]	; (23f3f30 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig+0x48>)
 23f3f2a:	e7e4      	b.n	23f3ef6 <_ZN18SdSpiArduinoDriver5beginE11SdSpiConfig+0xe>
 23f3f2c:	1006a238 	.word	0x1006a238
 23f3f30:	1006a23c 	.word	0x1006a23c

023f3f34 <_ZN18SdSpiArduinoDriver10deactivateEv>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() { m_spi->endTransaction(); }
 23f3f34:	6800      	ldr	r0, [r0, #0]
 23f3f36:	f004 be8f 	b.w	23f8c58 <_ZN8SPIClass14endTransactionEv>

023f3f3a <_ZN18SdSpiArduinoDriver7receiveEv>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() { m_spi->end(); }
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() { return m_spi->transfer(0XFF); }
 23f3f3a:	21ff      	movs	r1, #255	; 0xff
 23f3f3c:	6800      	ldr	r0, [r0, #0]
 23f3f3e:	f004 bf13 	b.w	23f8d68 <_ZN8SPIClass8transferEh>
	...

023f3f44 <_ZN18SdSpiArduinoDriver7receiveEPhj>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
 23f3f44:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
 23f3f46:	2500      	movs	r5, #0
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
 23f3f48:	4613      	mov	r3, r2
  m_spi->transfer(nullptr, buf, count, SD_SPI_DMA_TransferComplete_Callback);
 23f3f4a:	4a07      	ldr	r2, [pc, #28]	; (23f3f68 <_ZN18SdSpiArduinoDriver7receiveEPhj+0x24>)
  SPI_DMA_TransferCompleted = false;
 23f3f4c:	4c07      	ldr	r4, [pc, #28]	; (23f3f6c <_ZN18SdSpiArduinoDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, count, SD_SPI_DMA_TransferComplete_Callback);
 23f3f4e:	9200      	str	r2, [sp, #0]
 23f3f50:	6800      	ldr	r0, [r0, #0]
 23f3f52:	460a      	mov	r2, r1
 23f3f54:	4629      	mov	r1, r5
  SPI_DMA_TransferCompleted = false;
 23f3f56:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, count, SD_SPI_DMA_TransferComplete_Callback);
 23f3f58:	f004 ff0c 	bl	23f8d74 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {
 23f3f5c:	7823      	ldrb	r3, [r4, #0]
 23f3f5e:	2b00      	cmp	r3, #0
 23f3f60:	d0fc      	beq.n	23f3f5c <_ZN18SdSpiArduinoDriver7receiveEPhj+0x18>
  }
  return 0;
}
 23f3f62:	2000      	movs	r0, #0
 23f3f64:	b003      	add	sp, #12
 23f3f66:	bd30      	pop	{r4, r5, pc}
 23f3f68:	023f3ed5 	.word	0x023f3ed5
 23f3f6c:	1007ae9c 	.word	0x1007ae9c

023f3f70 <_ZN18SdSpiArduinoDriver4sendEh>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) { m_spi->transfer(data); }
 23f3f70:	6800      	ldr	r0, [r0, #0]
 23f3f72:	f004 bef9 	b.w	23f8d68 <_ZN8SPIClass8transferEh>
	...

023f3f78 <_ZN18SdSpiArduinoDriver4sendEPKhj>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
 23f3f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
 23f3f7a:	2500      	movs	r5, #0
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
 23f3f7c:	4613      	mov	r3, r2

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, count,
 23f3f7e:	4a06      	ldr	r2, [pc, #24]	; (23f3f98 <_ZN18SdSpiArduinoDriver4sendEPKhj+0x20>)
  SPI_DMA_TransferCompleted = false;
 23f3f80:	4c06      	ldr	r4, [pc, #24]	; (23f3f9c <_ZN18SdSpiArduinoDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, count,
 23f3f82:	9200      	str	r2, [sp, #0]
 23f3f84:	6800      	ldr	r0, [r0, #0]
 23f3f86:	462a      	mov	r2, r5
  SPI_DMA_TransferCompleted = false;
 23f3f88:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, count,
 23f3f8a:	f004 fef3 	bl	23f8d74 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                  SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {
 23f3f8e:	7823      	ldrb	r3, [r4, #0]
 23f3f90:	2b00      	cmp	r3, #0
 23f3f92:	d0fc      	beq.n	23f3f8e <_ZN18SdSpiArduinoDriver4sendEPKhj+0x16>
  }
}
 23f3f94:	b003      	add	sp, #12
 23f3f96:	bd30      	pop	{r4, r5, pc}
 23f3f98:	023f3ed5 	.word	0x023f3ed5
 23f3f9c:	1007ae9c 	.word	0x1007ae9c

023f3fa0 <_ZN7TwoWire5writeEi.isra.0>:
 23f3fa0:	6803      	ldr	r3, [r0, #0]
 23f3fa2:	b2c9      	uxtb	r1, r1
 23f3fa4:	689b      	ldr	r3, [r3, #8]
 23f3fa6:	4718      	bx	r3

023f3fa8 <_ZN5SVCS3C1Ev>:
 */
#include "i2cArduino.h"


SVCS3::SVCS3(){
  addr=0x63;
 23f3fa8:	2363      	movs	r3, #99	; 0x63
 23f3faa:	7103      	strb	r3, [r0, #4]
}
 23f3fac:	4770      	bx	lr

023f3fae <_ZN5SVCS34initEi>:
  _wire = the_wire;
  addr = address;
  return 0;
}

int SVCS3::init(int address){
 23f3fae:	b538      	push	{r3, r4, r5, lr}
 23f3fb0:	4604      	mov	r4, r0
 23f3fb2:	460d      	mov	r5, r1
  _wire = &Wire;
 23f3fb4:	f005 fdc6 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23f3fb8:	6020      	str	r0, [r4, #0]
  _wire->begin();
 23f3fba:	f004 f8f9 	bl	23f81b0 <_ZN7TwoWire5beginEv>
  addr = address;
  return 0;
}
 23f3fbe:	2000      	movs	r0, #0
  addr = address;
 23f3fc0:	7125      	strb	r5, [r4, #4]
}
 23f3fc2:	bd38      	pop	{r3, r4, r5, pc}

023f3fc4 <_ZN5SVCS38i2cdelayEi>:


bool SVCS3::i2cdelay(int size){
 23f3fc4:	b570      	push	{r4, r5, r6, lr}
 23f3fc6:	4606      	mov	r6, r0
 23f3fc8:	460d      	mov	r5, r1
  int i=0;
 23f3fca:	2400      	movs	r4, #0
  for (;_wire->available() < size && i<=size;i++) {
 23f3fcc:	6830      	ldr	r0, [r6, #0]
 23f3fce:	6803      	ldr	r3, [r0, #0]
 23f3fd0:	691b      	ldr	r3, [r3, #16]
 23f3fd2:	4798      	blx	r3
 23f3fd4:	42a8      	cmp	r0, r5
 23f3fd6:	da06      	bge.n	23f3fe6 <_ZN5SVCS38i2cdelayEi+0x22>
 23f3fd8:	42ac      	cmp	r4, r5
 23f3fda:	dc09      	bgt.n	23f3ff0 <_ZN5SVCS38i2cdelayEi+0x2c>
	  delay(2);
 23f3fdc:	2002      	movs	r0, #2
 23f3fde:	f003 fb23 	bl	23f7628 <delay>
  for (;_wire->available() < size && i<=size;i++) {
 23f3fe2:	3401      	adds	r4, #1
 23f3fe4:	e7f2      	b.n	23f3fcc <_ZN5SVCS38i2cdelayEi+0x8>
  }
  if(i>=size){
 23f3fe6:	42ac      	cmp	r4, r5
 23f3fe8:	bfac      	ite	ge
 23f3fea:	2000      	movge	r0, #0
 23f3fec:	2001      	movlt	r0, #1
	  return false;
  }else{
	  return true;
  }
}
 23f3fee:	bd70      	pop	{r4, r5, r6, pc}
	  return false;
 23f3ff0:	2000      	movs	r0, #0
 23f3ff2:	e7fc      	b.n	23f3fee <_ZN5SVCS38i2cdelayEi+0x2a>

023f3ff4 <_ZN5SVCS38getStateEv>:

int SVCS3::getState(){ //-1:no data, 0:err, 1:ok
 23f3ff4:	b510      	push	{r4, lr}
 23f3ff6:	4604      	mov	r4, r0
  _wire->requestFrom(addr, (uint8_t)1);
 23f3ff8:	7901      	ldrb	r1, [r0, #4]
 23f3ffa:	2201      	movs	r2, #1
 23f3ffc:	6800      	ldr	r0, [r0, #0]
 23f3ffe:	f004 f8fe 	bl	23f81fe <_ZN7TwoWire11requestFromEhj>
   if(i2cdelay(1)){
 23f4002:	2101      	movs	r1, #1
 23f4004:	4620      	mov	r0, r4
 23f4006:	f7ff ffdd 	bl	23f3fc4 <_ZN5SVCS38i2cdelayEi>
 23f400a:	b128      	cbz	r0, 23f4018 <_ZN5SVCS38getStateEv+0x24>
    return _wire->read();
 23f400c:	6820      	ldr	r0, [r4, #0]
  }else{
    return -1;
  }
}
 23f400e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return _wire->read();
 23f4012:	6803      	ldr	r3, [r0, #0]
 23f4014:	695b      	ldr	r3, [r3, #20]
 23f4016:	4718      	bx	r3
}
 23f4018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23f401c:	bd10      	pop	{r4, pc}

023f401e <_ZN5SVCS36getValEh>:

int16_t SVCS3::getVal(byte reg){
 23f401e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f4020:	4604      	mov	r4, r0
 23f4022:	460d      	mov	r5, r1

  _wire->beginTransmission(addr); // transmit to device
 23f4024:	7901      	ldrb	r1, [r0, #4]
 23f4026:	6800      	ldr	r0, [r0, #0]
 23f4028:	f004 f8ec 	bl	23f8204 <_ZN7TwoWire17beginTransmissionEh>
  _wire->write(reg);              // sends one byte
 23f402c:	6820      	ldr	r0, [r4, #0]
 23f402e:	4629      	mov	r1, r5
 23f4030:	6803      	ldr	r3, [r0, #0]
 23f4032:	689b      	ldr	r3, [r3, #8]
 23f4034:	4798      	blx	r3
  _wire->endTransmission();    // stop transmitting
 23f4036:	6820      	ldr	r0, [r4, #0]
 23f4038:	f004 f8ef 	bl	23f821a <_ZN7TwoWire15endTransmissionEv>
 
  _wire->requestFrom(addr, (uint8_t)2);
 23f403c:	7921      	ldrb	r1, [r4, #4]
 23f403e:	2202      	movs	r2, #2
 23f4040:	6820      	ldr	r0, [r4, #0]
 23f4042:	f004 f8dc 	bl	23f81fe <_ZN7TwoWire11requestFromEhj>
  int16_t ret=0;
 23f4046:	2300      	movs	r3, #0
  if(i2cdelay(2)){
 23f4048:	2102      	movs	r1, #2
 23f404a:	4620      	mov	r0, r4
  int16_t ret=0;
 23f404c:	f8ad 3006 	strh.w	r3, [sp, #6]
  if(i2cdelay(2)){
 23f4050:	f7ff ffb8 	bl	23f3fc4 <_ZN5SVCS38i2cdelayEi>
 23f4054:	b158      	cbz	r0, 23f406e <_ZN5SVCS36getValEh+0x50>
	byte *pointer = (byte *)&ret;
    pointer[0] = _wire->read();
 23f4056:	6820      	ldr	r0, [r4, #0]
 23f4058:	6803      	ldr	r3, [r0, #0]
 23f405a:	695b      	ldr	r3, [r3, #20]
 23f405c:	4798      	blx	r3
 23f405e:	f88d 0006 	strb.w	r0, [sp, #6]
    pointer[1] = _wire->read();
 23f4062:	6820      	ldr	r0, [r4, #0]
 23f4064:	6803      	ldr	r3, [r0, #0]
 23f4066:	695b      	ldr	r3, [r3, #20]
 23f4068:	4798      	blx	r3
 23f406a:	f88d 0007 	strb.w	r0, [sp, #7]
  }
  return ret;
}
 23f406e:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 23f4072:	b003      	add	sp, #12
 23f4074:	bd30      	pop	{r4, r5, pc}

023f4076 <_ZN5SVCS310newReadingEv>:
    return 0;
  }
  return 1;
}

int SVCS3::newReading(){
 23f4076:	b510      	push	{r4, lr}
 23f4078:	4604      	mov	r4, r0
  _wire->beginTransmission(addr); // transmit to device
 23f407a:	7901      	ldrb	r1, [r0, #4]
 23f407c:	6800      	ldr	r0, [r0, #0]
 23f407e:	f004 f8c1 	bl	23f8204 <_ZN7TwoWire17beginTransmissionEh>
  _wire->write(REG_READ_START);              // sends one byte
 23f4082:	2101      	movs	r1, #1
 23f4084:	6820      	ldr	r0, [r4, #0]
 23f4086:	f7ff ff8b 	bl	23f3fa0 <_ZN7TwoWire5writeEi.isra.0>
  _wire->endTransmission();    // stop transmitting
 23f408a:	6820      	ldr	r0, [r4, #0]
 23f408c:	f004 f8c5 	bl	23f821a <_ZN7TwoWire15endTransmissionEv>
  delay(300);
 23f4090:	f44f 7096 	mov.w	r0, #300	; 0x12c
 23f4094:	f003 fac8 	bl	23f7628 <delay>
  return getState();
 23f4098:	4620      	mov	r0, r4
}
 23f409a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return getState();
 23f409e:	f7ff bfa9 	b.w	23f3ff4 <_ZN5SVCS38getStateEv>
	...

023f40a4 <_ZN5SVCS36getE25Ev>:

float SVCS3::getE25()
{
 23f40a4:	b508      	push	{r3, lr}
  return getVal(REG_READ_E25)/100.0;
 23f40a6:	2102      	movs	r1, #2
 23f40a8:	f7ff ffb9 	bl	23f401e <_ZN5SVCS36getValEh>
 23f40ac:	f7ef faea 	bl	23e3684 <__aeabi_i2d>
 23f40b0:	2200      	movs	r2, #0
 23f40b2:	4b04      	ldr	r3, [pc, #16]	; (23f40c4 <_ZN5SVCS36getE25Ev+0x20>)
 23f40b4:	f7ef fc7a 	bl	23e39ac <__aeabi_ddiv>
 23f40b8:	f7ef fe46 	bl	23e3d48 <__aeabi_d2f>
}
 23f40bc:	ee00 0a10 	vmov	s0, r0
 23f40c0:	bd08      	pop	{r3, pc}
 23f40c2:	bf00      	nop
 23f40c4:	40590000 	.word	0x40590000

023f40c8 <_ZN5SVCS35getECEv>:

float SVCS3::getEC()
{
 23f40c8:	b508      	push	{r3, lr}
  return getVal(REG_READ_EC)/10.0;
 23f40ca:	2103      	movs	r1, #3
 23f40cc:	f7ff ffa7 	bl	23f401e <_ZN5SVCS36getValEh>
 23f40d0:	f7ef fad8 	bl	23e3684 <__aeabi_i2d>
 23f40d4:	2200      	movs	r2, #0
 23f40d6:	4b04      	ldr	r3, [pc, #16]	; (23f40e8 <_ZN5SVCS35getECEv+0x20>)
 23f40d8:	f7ef fc68 	bl	23e39ac <__aeabi_ddiv>
 23f40dc:	f7ef fe34 	bl	23e3d48 <__aeabi_d2f>
}
 23f40e0:	ee00 0a10 	vmov	s0, r0
 23f40e4:	bd08      	pop	{r3, pc}
 23f40e6:	bf00      	nop
 23f40e8:	40240000 	.word	0x40240000

023f40ec <_ZN5SVCS37getTempEv>:

float SVCS3::getTemp()
{
 23f40ec:	b508      	push	{r3, lr}
  return getVal(REG_READ_TEMP)/100.0;
 23f40ee:	2104      	movs	r1, #4
 23f40f0:	f7ff ff95 	bl	23f401e <_ZN5SVCS36getValEh>
 23f40f4:	f7ef fac6 	bl	23e3684 <__aeabi_i2d>
 23f40f8:	2200      	movs	r2, #0
 23f40fa:	4b04      	ldr	r3, [pc, #16]	; (23f410c <_ZN5SVCS37getTempEv+0x20>)
 23f40fc:	f7ef fc56 	bl	23e39ac <__aeabi_ddiv>
 23f4100:	f7ef fe22 	bl	23e3d48 <__aeabi_d2f>
}
 23f4104:	ee00 0a10 	vmov	s0, r0
 23f4108:	bd08      	pop	{r3, pc}
 23f410a:	bf00      	nop
 23f410c:	40590000 	.word	0x40590000

023f4110 <_ZN5SVCS36getVWCEv>:

float SVCS3::getVWC()
{
 23f4110:	b508      	push	{r3, lr}
  return getVal(REG_READ_VWC)/10.0;
 23f4112:	2105      	movs	r1, #5
 23f4114:	f7ff ff83 	bl	23f401e <_ZN5SVCS36getValEh>
 23f4118:	f7ef fab4 	bl	23e3684 <__aeabi_i2d>
 23f411c:	2200      	movs	r2, #0
 23f411e:	4b04      	ldr	r3, [pc, #16]	; (23f4130 <_ZN5SVCS36getVWCEv+0x20>)
 23f4120:	f7ef fc44 	bl	23e39ac <__aeabi_ddiv>
 23f4124:	f7ef fe10 	bl	23e3d48 <__aeabi_d2f>
}
 23f4128:	ee00 0a10 	vmov	s0, r0
 23f412c:	bd08      	pop	{r3, pc}
 23f412e:	bf00      	nop
 23f4130:	40240000 	.word	0x40240000

023f4134 <_ZN7SVMULTIC1Ev>:
 */
#include "i2cMultiSm.h"


SVMULTI::SVMULTI(){
  addr=101;
 23f4134:	2365      	movs	r3, #101	; 0x65
 23f4136:	8083      	strh	r3, [r0, #4]
}
 23f4138:	4770      	bx	lr

023f413a <_ZN7SVMULTI4initEi>:
  _wire = the_wire;
  addr = address;
  return 0;
}

int SVMULTI::init(int address){
 23f413a:	b538      	push	{r3, r4, r5, lr}
 23f413c:	4604      	mov	r4, r0
 23f413e:	460d      	mov	r5, r1
  _wire = &Wire;
 23f4140:	f005 fd00 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23f4144:	6020      	str	r0, [r4, #0]
  _wire->begin();
 23f4146:	f004 f833 	bl	23f81b0 <_ZN7TwoWire5beginEv>
  addr = address;
  return 0;
}
 23f414a:	2000      	movs	r0, #0
  addr = address;
 23f414c:	80a5      	strh	r5, [r4, #4]
}
 23f414e:	bd38      	pop	{r3, r4, r5, pc}

023f4150 <_ZN7SVMULTI8i2cdelayEi>:


bool SVMULTI::i2cdelay(int size){
 23f4150:	b570      	push	{r4, r5, r6, lr}
 23f4152:	4606      	mov	r6, r0
 23f4154:	460d      	mov	r5, r1
  int i=0;
 23f4156:	2400      	movs	r4, #0
  for (;_wire->available() < size && i<=size;i++) {
 23f4158:	6830      	ldr	r0, [r6, #0]
 23f415a:	6803      	ldr	r3, [r0, #0]
 23f415c:	691b      	ldr	r3, [r3, #16]
 23f415e:	4798      	blx	r3
 23f4160:	42a8      	cmp	r0, r5
 23f4162:	da06      	bge.n	23f4172 <_ZN7SVMULTI8i2cdelayEi+0x22>
 23f4164:	42ac      	cmp	r4, r5
 23f4166:	dc09      	bgt.n	23f417c <_ZN7SVMULTI8i2cdelayEi+0x2c>
	  delay(2);
 23f4168:	2002      	movs	r0, #2
 23f416a:	f003 fa5d 	bl	23f7628 <delay>
  for (;_wire->available() < size && i<=size;i++) {
 23f416e:	3401      	adds	r4, #1
 23f4170:	e7f2      	b.n	23f4158 <_ZN7SVMULTI8i2cdelayEi+0x8>
  }
  if(i>=size){
 23f4172:	42ac      	cmp	r4, r5
 23f4174:	bfac      	ite	ge
 23f4176:	2000      	movge	r0, #0
 23f4178:	2001      	movlt	r0, #1
	  return false;
  }else{
	  return true;
  }
}
 23f417a:	bd70      	pop	{r4, r5, r6, pc}
	  return false;
 23f417c:	2000      	movs	r0, #0
 23f417e:	e7fc      	b.n	23f417a <_ZN7SVMULTI8i2cdelayEi+0x2a>

023f4180 <_ZN7SVMULTI8getStateEv>:

int SVMULTI::getState(){ //-1:no data, 0:err, 1:ok
 23f4180:	b510      	push	{r4, lr}
 23f4182:	4604      	mov	r4, r0
  _wire->requestFrom(addr, (uint8_t)1);
 23f4184:	7901      	ldrb	r1, [r0, #4]
 23f4186:	2201      	movs	r2, #1
 23f4188:	6800      	ldr	r0, [r0, #0]
 23f418a:	f004 f838 	bl	23f81fe <_ZN7TwoWire11requestFromEhj>
   if(i2cdelay(1)){
 23f418e:	2101      	movs	r1, #1
 23f4190:	4620      	mov	r0, r4
 23f4192:	f7ff ffdd 	bl	23f4150 <_ZN7SVMULTI8i2cdelayEi>
 23f4196:	b128      	cbz	r0, 23f41a4 <_ZN7SVMULTI8getStateEv+0x24>
    return _wire->read();
 23f4198:	6820      	ldr	r0, [r4, #0]
  }else{
    return -1;
  }
}
 23f419a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return _wire->read();
 23f419e:	6803      	ldr	r3, [r0, #0]
 23f41a0:	695b      	ldr	r3, [r3, #20]
 23f41a2:	4718      	bx	r3
}
 23f41a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23f41a8:	bd10      	pop	{r4, pc}

023f41aa <_ZN7SVMULTI10newReadingEv>:
    return 0;
  }
  return 1;
}

int SVMULTI::newReading(){
 23f41aa:	b510      	push	{r4, lr}
 23f41ac:	4604      	mov	r4, r0
  _wire->beginTransmission(addr); // transmit to device
 23f41ae:	8881      	ldrh	r1, [r0, #4]
 23f41b0:	6800      	ldr	r0, [r0, #0]
 23f41b2:	f004 f82b 	bl	23f820c <_ZN7TwoWire17beginTransmissionEi>
  _wire->write(REG_READ_START);              // sends one byte
 23f41b6:	6820      	ldr	r0, [r4, #0]
 23f41b8:	2101      	movs	r1, #1
 23f41ba:	6803      	ldr	r3, [r0, #0]
 23f41bc:	689b      	ldr	r3, [r3, #8]
 23f41be:	4798      	blx	r3
  _wire->endTransmission();    // stop transmitting
 23f41c0:	6820      	ldr	r0, [r4, #0]
 23f41c2:	f004 f82a 	bl	23f821a <_ZN7TwoWire15endTransmissionEv>
  delay(300);
 23f41c6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 23f41ca:	f003 fa2d 	bl	23f7628 <delay>
  return getState();
 23f41ce:	4620      	mov	r0, r4
}
 23f41d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return getState();
 23f41d4:	f7ff bfd4 	b.w	23f4180 <_ZN7SVMULTI8getStateEv>

023f41d8 <_ZN7SVMULTI6getRawEP6vals_t>:
	}

}


void SVMULTI::getRaw(vals_t *vals){
 23f41d8:	b570      	push	{r4, r5, r6, lr}
 23f41da:	4604      	mov	r4, r0
 23f41dc:	460d      	mov	r5, r1
  _wire->beginTransmission(addr); // transmit to device
 23f41de:	8881      	ldrh	r1, [r0, #4]
 23f41e0:	6800      	ldr	r0, [r0, #0]
 23f41e2:	f004 f813 	bl	23f820c <_ZN7TwoWire17beginTransmissionEi>
  _wire->write(REG_GET_DATA);              // sends one byte
 23f41e6:	6820      	ldr	r0, [r4, #0]
 23f41e8:	2109      	movs	r1, #9
 23f41ea:	6803      	ldr	r3, [r0, #0]
 23f41ec:	689b      	ldr	r3, [r3, #8]
 23f41ee:	4798      	blx	r3
  _wire->endTransmission();    // stop transmitting
 23f41f0:	6820      	ldr	r0, [r4, #0]
 23f41f2:	f004 f812 	bl	23f821a <_ZN7TwoWire15endTransmissionEv>
  _wire->requestFrom(addr, (uint8_t)14);
 23f41f6:	7921      	ldrb	r1, [r4, #4]
 23f41f8:	220e      	movs	r2, #14
 23f41fa:	6820      	ldr	r0, [r4, #0]
 23f41fc:	f003 ffff 	bl	23f81fe <_ZN7TwoWire11requestFromEhj>
   byte *p1 = (byte*)vals;
  if(i2cdelay(14)){
 23f4200:	210e      	movs	r1, #14
 23f4202:	4620      	mov	r0, r4
 23f4204:	f7ff ffa4 	bl	23f4150 <_ZN7SVMULTI8i2cdelayEi>
 23f4208:	b148      	cbz	r0, 23f421e <_ZN7SVMULTI6getRawEP6vals_t+0x46>
 23f420a:	1e6e      	subs	r6, r5, #1
 23f420c:	350d      	adds	r5, #13
    // Wire.readBytes((byte*)&vals, 14);
	  for(int i = 0; i<14; i++){
		  p1[i] = _wire->read();
 23f420e:	6820      	ldr	r0, [r4, #0]
 23f4210:	6803      	ldr	r3, [r0, #0]
 23f4212:	695b      	ldr	r3, [r3, #20]
 23f4214:	4798      	blx	r3
 23f4216:	f806 0f01 	strb.w	r0, [r6, #1]!
	  for(int i = 0; i<14; i++){
 23f421a:	42ae      	cmp	r6, r5
 23f421c:	d1f7      	bne.n	23f420e <_ZN7SVMULTI6getRawEP6vals_t+0x36>
	  }
  }
}
 23f421e:	bd70      	pop	{r4, r5, r6, pc}

023f4220 <_ZN7SVMULTI7getDataEP10soil_ret_t>:
void SVMULTI::getData(soil_ret_t *data){
 23f4220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f4224:	ed2d 8b02 	vpush	{d8}
 23f4228:	b085      	sub	sp, #20
 23f422a:	460c      	mov	r4, r1
  getRaw(&vals);
 23f422c:	4669      	mov	r1, sp
 23f422e:	f7ff ffd3 	bl	23f41d8 <_ZN7SVMULTI6getRawEP6vals_t>
 23f4232:	ed9f 8b3b 	vldr	d8, [pc, #236]	; 23f4320 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x100>
 23f4236:	f10d 0a04 	add.w	sl, sp, #4
 23f423a:	f104 0508 	add.w	r5, r4, #8
 23f423e:	f104 0b1c 	add.w	fp, r4, #28
		  data->dp[a] = vals.dp[a]/100.0;
 23f4242:	f93a 0b02 	ldrsh.w	r0, [sl], #2
 23f4246:	f7ef fa1d 	bl	23e3684 <__aeabi_i2d>
 23f424a:	2200      	movs	r2, #0
 23f424c:	4b3e      	ldr	r3, [pc, #248]	; (23f4348 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x128>)
 23f424e:	f7ef fbad 	bl	23e39ac <__aeabi_ddiv>
 23f4252:	f7ef fd79 	bl	23e3d48 <__aeabi_d2f>
 23f4256:	6028      	str	r0, [r5, #0]
 23f4258:	f7ef fa26 	bl	23e36a8 <__aeabi_f2d>
 23f425c:	eeb0 1a48 	vmov.f32	s2, s16
 23f4260:	eef0 1a68 	vmov.f32	s3, s17
 23f4264:	ec41 0b10 	vmov	d0, r0, r1
 23f4268:	f006 f81a 	bl	23fa2a0 <pow>
 23f426c:	f855 0b04 	ldr.w	r0, [r5], #4
 23f4270:	ec59 8b10 	vmov	r8, r9, d0
 23f4274:	f7ef fa18 	bl	23e36a8 <__aeabi_f2d>
		  data->vwc[a] = (4.3e-6 * pow(data->dp[a],3) - 5.5e-4*pow(data->dp[a],2) + 2.92e-2*data->dp[a] - 5.3e-2)* 100.0;
 23f4278:	a32b      	add	r3, pc, #172	; (adr r3, 23f4328 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x108>)
 23f427a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f427e:	4606      	mov	r6, r0
 23f4280:	460f      	mov	r7, r1
 23f4282:	4640      	mov	r0, r8
 23f4284:	4649      	mov	r1, r9
 23f4286:	f7ef fa67 	bl	23e3758 <__aeabi_dmul>
 23f428a:	4632      	mov	r2, r6
 23f428c:	4680      	mov	r8, r0
 23f428e:	4689      	mov	r9, r1
 23f4290:	463b      	mov	r3, r7
 23f4292:	4630      	mov	r0, r6
 23f4294:	4639      	mov	r1, r7
 23f4296:	f7ef fa5f 	bl	23e3758 <__aeabi_dmul>
 23f429a:	a325      	add	r3, pc, #148	; (adr r3, 23f4330 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x110>)
 23f429c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f42a0:	f7ef fa5a 	bl	23e3758 <__aeabi_dmul>
 23f42a4:	4602      	mov	r2, r0
 23f42a6:	460b      	mov	r3, r1
 23f42a8:	4640      	mov	r0, r8
 23f42aa:	4649      	mov	r1, r9
 23f42ac:	f7ef f89c 	bl	23e33e8 <__aeabi_dsub>
 23f42b0:	a321      	add	r3, pc, #132	; (adr r3, 23f4338 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x118>)
 23f42b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f42b6:	4680      	mov	r8, r0
 23f42b8:	4689      	mov	r9, r1
 23f42ba:	4630      	mov	r0, r6
 23f42bc:	4639      	mov	r1, r7
 23f42be:	f7ef fa4b 	bl	23e3758 <__aeabi_dmul>
 23f42c2:	4602      	mov	r2, r0
 23f42c4:	460b      	mov	r3, r1
 23f42c6:	4640      	mov	r0, r8
 23f42c8:	4649      	mov	r1, r9
 23f42ca:	f7ef f88f 	bl	23e33ec <__adddf3>
 23f42ce:	a31c      	add	r3, pc, #112	; (adr r3, 23f4340 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x120>)
 23f42d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f42d4:	f7ef f888 	bl	23e33e8 <__aeabi_dsub>
 23f42d8:	2200      	movs	r2, #0
 23f42da:	4b1b      	ldr	r3, [pc, #108]	; (23f4348 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x128>)
 23f42dc:	f7ef fa3c 	bl	23e3758 <__aeabi_dmul>
 23f42e0:	f7ef fd32 	bl	23e3d48 <__aeabi_d2f>
  for(int a=0;a<MULTI_ZONES;a++){
 23f42e4:	45ab      	cmp	fp, r5
		  data->vwc[a] = (4.3e-6 * pow(data->dp[a],3) - 5.5e-4*pow(data->dp[a],2) + 2.92e-2*data->dp[a] - 5.3e-2)* 100.0;
 23f42e6:	6128      	str	r0, [r5, #16]
  for(int a=0;a<MULTI_ZONES;a++){
 23f42e8:	d1ab      	bne.n	23f4242 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x22>
		  data->temp[a] = vals.temp[a]/100.0;
 23f42ea:	f9bd 0000 	ldrsh.w	r0, [sp]
 23f42ee:	f7ef f9c9 	bl	23e3684 <__aeabi_i2d>
 23f42f2:	2200      	movs	r2, #0
 23f42f4:	4b14      	ldr	r3, [pc, #80]	; (23f4348 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x128>)
 23f42f6:	f7ef fb59 	bl	23e39ac <__aeabi_ddiv>
 23f42fa:	f7ef fd25 	bl	23e3d48 <__aeabi_d2f>
 23f42fe:	6020      	str	r0, [r4, #0]
 23f4300:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 23f4304:	f7ef f9be 	bl	23e3684 <__aeabi_i2d>
 23f4308:	2200      	movs	r2, #0
 23f430a:	4b0f      	ldr	r3, [pc, #60]	; (23f4348 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x128>)
 23f430c:	f7ef fb4e 	bl	23e39ac <__aeabi_ddiv>
 23f4310:	f7ef fd1a 	bl	23e3d48 <__aeabi_d2f>
 23f4314:	6060      	str	r0, [r4, #4]
}
 23f4316:	b005      	add	sp, #20
 23f4318:	ecbd 8b02 	vpop	{d8}
 23f431c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f4320:	00000000 	.word	0x00000000
 23f4324:	40080000 	.word	0x40080000
 23f4328:	fff6c5c5 	.word	0xfff6c5c5
 23f432c:	3ed20916 	.word	0x3ed20916
 23f4330:	01a36e2f 	.word	0x01a36e2f
 23f4334:	3f4205bc 	.word	0x3f4205bc
 23f4338:	d42c3c9f 	.word	0xd42c3c9f
 23f433c:	3f9de69a 	.word	0x3f9de69a
 23f4340:	e5604189 	.word	0xe5604189
 23f4344:	3fab22d0 	.word	0x3fab22d0
 23f4348:	40590000 	.word	0x40590000

023f434c <_ZN9ExFatFile8dirCacheEhh>:

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
 23f434c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f434e:	4604      	mov	r4, r0
 23f4350:	460f      	mov	r7, r1
 23f4352:	b085      	sub	sp, #20
  DirPos_t pos = m_dirPos;
 23f4354:	ad01      	add	r5, sp, #4
 23f4356:	f100 0324 	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
 23f435a:	4616      	mov	r6, r2
  DirPos_t pos = m_dirPos;
 23f435c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 23f4360:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE * set) != 1) {
 23f4364:	4629      	mov	r1, r5
 23f4366:	6a20      	ldr	r0, [r4, #32]
 23f4368:	017a      	lsls	r2, r7, #5
 23f436a:	f001 f888 	bl	23f547e <_ZN14ExFatPartition7dirSeekEP8DirPos_tm>
 23f436e:	2801      	cmp	r0, #1
 23f4370:	d106      	bne.n	23f4380 <_ZN9ExFatFile8dirCacheEhh+0x34>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
 23f4372:	4632      	mov	r2, r6
 23f4374:	4629      	mov	r1, r5
 23f4376:	6a20      	ldr	r0, [r4, #32]
 23f4378:	f001 f834 	bl	23f53e4 <_ZN14ExFatPartition8dirCacheEPK8DirPos_th>
}
 23f437c:	b005      	add	sp, #20
 23f437e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return nullptr;
 23f4380:	2000      	movs	r0, #0
 23f4382:	e7fb      	b.n	23f437c <_ZN9ExFatFile8dirCacheEhh+0x30>

023f4384 <_ZN9ExFatFile5closeEv>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
 23f4384:	b510      	push	{r4, lr}
 23f4386:	4604      	mov	r4, r0
  bool rtn = sync();
 23f4388:	f000 fcd2 	bl	23f4d30 <_ZN9ExFatFile4syncEv>
  m_attributes = FILE_ATTR_CLOSED;
 23f438c:	2300      	movs	r3, #0
 23f438e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
 23f4392:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
 23f4396:	bd10      	pop	{r4, pc}

023f4398 <_ZN9ExFatFile8openRootEP11ExFatVolume>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
 23f4398:	b538      	push	{r3, r4, r5, lr}
 23f439a:	460d      	mov	r5, r1
  if (isOpen()) {
 23f439c:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
bool ExFatFile::openRoot(ExFatVolume* vol) {
 23f43a0:	4604      	mov	r4, r0
  if (isOpen()) {
 23f43a2:	b951      	cbnz	r1, 23f43ba <_ZN9ExFatFile8openRootEP11ExFatVolume+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
 23f43a4:	2238      	movs	r2, #56	; 0x38
 23f43a6:	f008 f9aa 	bl	23fc6fe <memset>
  m_attributes = FILE_ATTR_ROOT;
 23f43aa:	2340      	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
 23f43ac:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_ROOT;
 23f43ae:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
 23f43b2:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
 23f43b4:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
  return true;

fail:
  return false;
}
 23f43b8:	bd38      	pop	{r3, r4, r5, pc}
  return false;
 23f43ba:	2000      	movs	r0, #0
 23f43bc:	e7fc      	b.n	23f43b8 <_ZN9ExFatFile8openRootEP11ExFatVolume+0x20>
	...

023f43c0 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path, ExName_t* fname,
                              const char** ptr) {
 23f43c0:	b4f0      	push	{r4, r5, r6, r7}
  // Skip leading spaces.
  while (*path == ' ') {
 23f43c2:	460c      	mov	r4, r1
 23f43c4:	f811 5b01 	ldrb.w	r5, [r1], #1
 23f43c8:	2d20      	cmp	r5, #32
 23f43ca:	d0fa      	beq.n	23f43c2 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x2>
// Size of FAT and exFAT directory structures.
const size_t FS_DIR_SIZE = 32;
//------------------------------------------------------------------------------
// Reserved characters for exFAT names and FAT LFN.
inline bool lfnReservedChar(uint8_t c) {
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':' || c == '<' ||
 23f43cc:	4f18      	ldr	r7, [pc, #96]	; (23f4430 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x70>)
    path++;
  }
  fname->begin = path;
 23f43ce:	6014      	str	r4, [r2, #0]
  fname->end = path;
 23f43d0:	6094      	str	r4, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
 23f43d2:	4626      	mov	r6, r4
 23f43d4:	f816 5b01 	ldrb.w	r5, [r6], #1
 23f43d8:	b1dd      	cbz	r5, 23f4412 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x52>
 23f43da:	2d2f      	cmp	r5, #47	; 0x2f
 23f43dc:	d019      	beq.n	23f4412 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x52>
         c == '>' || c == '?' || c == '\\' || c == '|';
 23f43de:	f1a5 0120 	sub.w	r1, r5, #32
 23f43e2:	295f      	cmp	r1, #95	; 0x5f
 23f43e4:	d821      	bhi.n	23f442a <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x6a>
  return c < 0X20 || c == '"' || c == '*' || c == '/' || c == ':' || c == '<' ||
 23f43e6:	f1a5 0122 	sub.w	r1, r5, #34	; 0x22
 23f43ea:	b2c9      	uxtb	r1, r1
 23f43ec:	291d      	cmp	r1, #29
 23f43ee:	d803      	bhi.n	23f43f8 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x38>
 23f43f0:	fa27 f101 	lsr.w	r1, r7, r1
 23f43f4:	07c9      	lsls	r1, r1, #31
 23f43f6:	d418      	bmi.n	23f442a <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x6a>
 23f43f8:	f005 01bf 	and.w	r1, r5, #191	; 0xbf
 23f43fc:	293c      	cmp	r1, #60	; 0x3c
 23f43fe:	d014      	beq.n	23f442a <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x6a>
         c == '>' || c == '?' || c == '\\' || c == '|';
 23f4400:	2d5c      	cmp	r5, #92	; 0x5c
 23f4402:	d012      	beq.n	23f442a <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x6a>
    uint8_t c = *path++;
    if (!lfnLegalChar(c)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (c != '.' && c != ' ') {
 23f4404:	2d2e      	cmp	r5, #46	; 0x2e
 23f4406:	d002      	beq.n	23f440e <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x4e>
 23f4408:	2d20      	cmp	r5, #32
 23f440a:	d000      	beq.n	23f440e <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x4e>
      // Need to trim trailing dots spaces.
      fname->end = path;
 23f440c:	6096      	str	r6, [r2, #8]
                              const char** ptr) {
 23f440e:	4634      	mov	r4, r6
 23f4410:	e7df      	b.n	23f43d2 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x12>
 23f4412:	4625      	mov	r5, r4
    }
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {
 23f4414:	f814 1b01 	ldrb.w	r1, [r4], #1
 23f4418:	2920      	cmp	r1, #32
 23f441a:	d0fa      	beq.n	23f4412 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x52>
 23f441c:	292f      	cmp	r1, #47	; 0x2f
 23f441e:	d0f8      	beq.n	23f4412 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_+0x52>
  }
  *ptr = path;
 23f4420:	601d      	str	r5, [r3, #0]
  return hashName(fname);
 23f4422:	4611      	mov	r1, r2

fail:
  return false;
}
 23f4424:	bcf0      	pop	{r4, r5, r6, r7}
  return hashName(fname);
 23f4426:	f000 bf11 	b.w	23f524c <_ZN9ExFatFile8hashNameEP8ExName_t>
}
 23f442a:	2000      	movs	r0, #0
 23f442c:	bcf0      	pop	{r4, r5, r6, r7}
 23f442e:	4770      	bx	lr
 23f4430:	31000101 	.word	0x31000101

023f4434 <_ZN9ExFatFile4readEPvj>:
  m_curPosition = saveCurPosition;
  m_curCluster = saveCurCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
 23f4434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f4438:	ed2d 8b02 	vpush	{d8}
  /** \return True if file is read-only */
  bool isReadOnly() const { return m_attributes & FS_ATTRIB_READ_ONLY; }
  /** \return True if this is the root directory. */
  bool isRoot() const { return m_attributes & FILE_ATTR_ROOT; }
  /** \return True file is readable. */
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
 23f443c:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 23f4440:	4604      	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
 23f4442:	07dd      	lsls	r5, r3, #31
int ExFatFile::read(void* buf, size_t count) {
 23f4444:	4689      	mov	r9, r1
 23f4446:	4616      	mov	r6, r2
 23f4448:	b083      	sub	sp, #12
  if (!isReadable()) {
 23f444a:	d567      	bpl.n	23f451c <_ZN9ExFatFile4readEPvj+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
 23f444c:	0658      	lsls	r0, r3, #25
 23f444e:	d403      	bmi.n	23f4458 <_ZN9ExFatFile4readEPvj+0x24>
 23f4450:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 23f4454:	0719      	lsls	r1, r3, #28
 23f4456:	d50b      	bpl.n	23f4470 <_ZN9ExFatFile4readEPvj+0x3c>
    if ((m_curPosition + count) > m_validLength) {
 23f4458:	e9d4 3200 	ldrd	r3, r2, [r4]
 23f445c:	e9d4 1004 	ldrd	r1, r0, [r4, #16]
 23f4460:	18f5      	adds	r5, r6, r3
 23f4462:	f142 0200 	adc.w	r2, r2, #0
 23f4466:	42a9      	cmp	r1, r5
 23f4468:	eb70 0202 	sbcs.w	r2, r0, r2
      count = toRead = m_validLength - m_curPosition;
 23f446c:	bf38      	it	cc
 23f446e:	1ace      	subcc	r6, r1, r3
        m_curCluster =
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f4470:	f104 0318 	add.w	r3, r4, #24
int ExFatFile::read(void* buf, size_t count) {
 23f4474:	46b0      	mov	r8, r6
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f4476:	ee08 3a10 	vmov	s16, r3
  while (toRead) {
 23f447a:	f1b8 0f00 	cmp.w	r8, #0
 23f447e:	f000 8098 	beq.w	23f45b2 <_ZN9ExFatFile4readEPvj+0x17e>
    clusterOffset = m_curPosition & m_vol->clusterMask();
 23f4482:	e9d4 3200 	ldrd	r3, r2, [r4]
 23f4486:	6a20      	ldr	r0, [r4, #32]
 23f4488:	f8d0 5438 	ldr.w	r5, [r0, #1080]	; 0x438
 23f448c:	ea05 0703 	and.w	r7, r5, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
 23f4490:	f3c7 0b08 	ubfx	fp, r7, #0, #9
    if (clusterOffset == 0) {
 23f4494:	b94f      	cbnz	r7, 23f44aa <_ZN9ExFatFile4readEPvj+0x76>
      if (m_curPosition == 0) {
 23f4496:	4313      	orrs	r3, r2
 23f4498:	d12c      	bne.n	23f44f4 <_ZN9ExFatFile4readEPvj+0xc0>
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
 23f449a:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 23f449e:	065a      	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() { return m_blockDev->isBusy(); }
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
 23f44a0:	bf4c      	ite	mi
 23f44a2:	f8d0 3434 	ldrmi.w	r3, [r0, #1076]	; 0x434
 23f44a6:	69e3      	ldrpl	r3, [r4, #28]
        m_curCluster =
 23f44a8:	61a3      	str	r3, [r4, #24]
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
 23f44aa:	f8d4 a020 	ldr.w	sl, [r4, #32]
  bool dataCacheSync() { return m_dataCache.sync(); }
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const { return m_clusterMask; }
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
 23f44ae:	69a2      	ldr	r2, [r4, #24]
 23f44b0:	f89a 0445 	ldrb.w	r0, [sl, #1093]	; 0x445
 23f44b4:	1e95      	subs	r5, r2, #2
 23f44b6:	f8da 142c 	ldr.w	r1, [sl, #1068]	; 0x42c
 23f44ba:	4085      	lsls	r5, r0
 23f44bc:	eb05 2557 	add.w	r5, r5, r7, lsr #9
             (clusterOffset >> m_vol->bytesPerSectorShift());
 23f44c0:	ea4f 2c57 	mov.w	ip, r7, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
 23f44c4:	440d      	add	r5, r1
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector() ||
 23f44c6:	f1bb 0f00 	cmp.w	fp, #0
 23f44ca:	d130      	bne.n	23f452e <_ZN9ExFatFile4readEPvj+0xfa>
 23f44cc:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 23f44d0:	d32d      	bcc.n	23f452e <_ZN9ExFatFile4readEPvj+0xfa>
   * \param[in] option mode for cached sector.
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() { return m_sector; }
 23f44d2:	f8da 2218 	ldr.w	r2, [sl, #536]	; 0x218
 23f44d6:	4295      	cmp	r5, r2
 23f44d8:	d029      	beq.n	23f452e <_ZN9ExFatFile4readEPvj+0xfa>
        goto fail;
      }
      const uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
 23f44da:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 23f44de:	d245      	bcs.n	23f456c <_ZN9ExFatFile4readEPvj+0x138>
    return m_blockDev->readSector(sector, dst);
 23f44e0:	464a      	mov	r2, r9
 23f44e2:	4629      	mov	r1, r5
 23f44e4:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
 23f44e8:	f7ff fc6c 	bl	23f3dc4 <_ZN9SdSpiCard10readSectorEmPh>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
 23f44ec:	b1b0      	cbz	r0, 23f451c <_ZN9ExFatFile4readEPvj+0xe8>
      n = m_vol->bytesPerSector();
 23f44ee:	f44f 7700 	mov.w	r7, #512	; 0x200
 23f44f2:	e030      	b.n	23f4556 <_ZN9ExFatFile4readEPvj+0x122>
      } else if (isContiguous()) {
 23f44f4:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
        m_curCluster++;
 23f44f8:	69a1      	ldr	r1, [r4, #24]
      } else if (isContiguous()) {
 23f44fa:	065b      	lsls	r3, r3, #25
 23f44fc:	d502      	bpl.n	23f4504 <_ZN9ExFatFile4readEPvj+0xd0>
        m_curCluster++;
 23f44fe:	3101      	adds	r1, #1
 23f4500:	61a1      	str	r1, [r4, #24]
 23f4502:	e7d2      	b.n	23f44aa <_ZN9ExFatFile4readEPvj+0x76>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f4504:	ee18 2a10 	vmov	r2, s16
 23f4508:	f000 ff86 	bl	23f5418 <_ZN14ExFatPartition6fatGetEmPm>
        if (fg < 0) {
 23f450c:	2800      	cmp	r0, #0
 23f450e:	db05      	blt.n	23f451c <_ZN9ExFatFile4readEPvj+0xe8>
        if (fg == 0) {
 23f4510:	d1cb      	bne.n	23f44aa <_ZN9ExFatFile4readEPvj+0x76>
          if (isDir()) {
 23f4512:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 23f4516:	f013 0f50 	tst.w	r3, #80	; 0x50
 23f451a:	d14a      	bne.n	23f45b2 <_ZN9ExFatFile4readEPvj+0x17e>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
 23f451c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
 23f4520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  m_error |= READ_ERROR;
 23f4524:	f043 0302 	orr.w	r3, r3, #2
 23f4528:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return -1;
 23f452c:	e043      	b.n	23f45b6 <_ZN9ExFatFile4readEPvj+0x182>
      n = m_vol->bytesPerSector() - sectorOffset;
 23f452e:	f5cb 7700 	rsb	r7, fp, #512	; 0x200
      if (n > toRead) {
 23f4532:	4547      	cmp	r7, r8
    return m_dataCache.prepare(sector, option);
 23f4534:	f04f 0200 	mov.w	r2, #0
 23f4538:	4629      	mov	r1, r5
 23f453a:	f50a 7004 	add.w	r0, sl, #528	; 0x210
 23f453e:	bf28      	it	cs
 23f4540:	4647      	movcs	r7, r8
 23f4542:	f001 fb32 	bl	23f5baa <_ZN7FsCache7prepareEmh>
      if (!cache) {
 23f4546:	2800      	cmp	r0, #0
 23f4548:	d0e8      	beq.n	23f451c <_ZN9ExFatFile4readEPvj+0xe8>
      memcpy(dst, src, n);
 23f454a:	eb00 010b 	add.w	r1, r0, fp
 23f454e:	463a      	mov	r2, r7
 23f4550:	4648      	mov	r0, r9
 23f4552:	f008 f8c7 	bl	23fc6e4 <memcpy>
    m_curPosition += n;
 23f4556:	e9d4 3200 	ldrd	r3, r2, [r4]
 23f455a:	19db      	adds	r3, r3, r7
 23f455c:	f142 0200 	adc.w	r2, r2, #0
 23f4560:	e9c4 3200 	strd	r3, r2, [r4]
    dst += n;
 23f4564:	44b9      	add	r9, r7
    toRead -= n;
 23f4566:	eba8 0807 	sub.w	r8, r8, r7
  while (toRead) {
 23f456a:	e786      	b.n	23f447a <_ZN9ExFatFile4readEPvj+0x46>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
 23f456c:	2101      	movs	r1, #1
 23f456e:	fa01 f000 	lsl.w	r0, r1, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
 23f4572:	ea4f 2758 	mov.w	r7, r8, lsr #9
                       (clusterOffset >> m_vol->bytesPerSectorShift());
 23f4576:	eba0 030c 	sub.w	r3, r0, ip
 23f457a:	42bb      	cmp	r3, r7
 23f457c:	bf28      	it	cs
 23f457e:	463b      	movcs	r3, r7
    return sector <= m_sector && m_sector < (sector + count);
 23f4580:	4295      	cmp	r5, r2
      n = ns << m_vol->bytesPerSectorShift();
 23f4582:	ea4f 2743 	mov.w	r7, r3, lsl #9
 23f4586:	d908      	bls.n	23f459a <_ZN9ExFatFile4readEPvj+0x166>
    return m_blockDev->readSectors(sector, dst, count);
 23f4588:	464a      	mov	r2, r9
 23f458a:	4629      	mov	r1, r5
 23f458c:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
 23f4590:	f7ff fbec 	bl	23f3d6c <_ZN9SdSpiCard11readSectorsEmPhj>
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
 23f4594:	2800      	cmp	r0, #0
 23f4596:	d1de      	bne.n	23f4556 <_ZN9ExFatFile4readEPvj+0x122>
 23f4598:	e7c0      	b.n	23f451c <_ZN9ExFatFile4readEPvj+0xe8>
    return sector <= m_sector && m_sector < (sector + count);
 23f459a:	18e9      	adds	r1, r5, r3
 23f459c:	428a      	cmp	r2, r1
 23f459e:	d2f3      	bcs.n	23f4588 <_ZN9ExFatFile4readEPvj+0x154>
    if (isCached(sector, count) && !sync()) {
 23f45a0:	f50a 7004 	add.w	r0, sl, #528	; 0x210
 23f45a4:	9301      	str	r3, [sp, #4]
 23f45a6:	f001 fada 	bl	23f5b5e <_ZN7FsCache4syncEv>
 23f45aa:	9b01      	ldr	r3, [sp, #4]
 23f45ac:	2800      	cmp	r0, #0
 23f45ae:	d1eb      	bne.n	23f4588 <_ZN9ExFatFile4readEPvj+0x154>
 23f45b0:	e7b4      	b.n	23f451c <_ZN9ExFatFile4readEPvj+0xe8>
  return count - toRead;
 23f45b2:	eba6 0008 	sub.w	r0, r6, r8
}
 23f45b6:	b003      	add	sp, #12
 23f45b8:	ecbd 8b02 	vpop	{d8}
 23f45bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023f45c0 <_ZN9ExFatFile4peekEv>:
int ExFatFile::peek() {
 23f45c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 23f45c2:	2201      	movs	r2, #1
  uint64_t saveCurPosition = m_curPosition;
 23f45c4:	e9d0 6700 	ldrd	r6, r7, [r0]
 23f45c8:	f10d 0107 	add.w	r1, sp, #7
int ExFatFile::peek() {
 23f45cc:	4604      	mov	r4, r0
  uint32_t saveCurCluster = m_curCluster;
 23f45ce:	6985      	ldr	r5, [r0, #24]
 23f45d0:	f7ff ff30 	bl	23f4434 <_ZN9ExFatFile4readEPvj>
 23f45d4:	2801      	cmp	r0, #1
 23f45d6:	bf14      	ite	ne
 23f45d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23f45dc:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curPosition = saveCurPosition;
 23f45e0:	e9c4 6700 	strd	r6, r7, [r4]
  m_curCluster = saveCurCluster;
 23f45e4:	61a5      	str	r5, [r4, #24]
}
 23f45e6:	b003      	add	sp, #12
 23f45e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f45ea <_ZN9ExFatFile7seekSetEy>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
 23f45ea:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f45ee:	461f      	mov	r7, r3
  bool isOpen() const { return m_attributes; }
 23f45f0:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 23f45f4:	4604      	mov	r4, r0
 23f45f6:	4616      	mov	r6, r2
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 23f45f8:	f8d0 8018 	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
 23f45fc:	2b00      	cmp	r3, #0
 23f45fe:	d05b      	beq.n	23f46b8 <_ZN9ExFatFile7seekSetEy+0xce>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 23f4600:	e9d0 0c00 	ldrd	r0, ip, [r0]
 23f4604:	45bc      	cmp	ip, r7
 23f4606:	bf08      	it	eq
 23f4608:	4290      	cmpeq	r0, r2
 23f460a:	d006      	beq.n	23f461a <_ZN9ExFatFile7seekSetEy+0x30>
    return true;
  }
  if (pos == 0) {
 23f460c:	ea56 0207 	orrs.w	r2, r6, r7
 23f4610:	d105      	bne.n	23f461e <_ZN9ExFatFile7seekSetEy+0x34>
    // set position to start of file
    m_curCluster = 0;
 23f4612:	2300      	movs	r3, #0
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
 23f4614:	61a3      	str	r3, [r4, #24]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 23f4616:	e9c4 6700 	strd	r6, r7, [r4]
    return true;
 23f461a:	2001      	movs	r0, #1
 23f461c:	e04f      	b.n	23f46be <_ZN9ExFatFile7seekSetEy+0xd4>
  if (isFile()) {
 23f461e:	071a      	lsls	r2, r3, #28
 23f4620:	d504      	bpl.n	23f462c <_ZN9ExFatFile7seekSetEy+0x42>
    if (pos > m_validLength) {
 23f4622:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 23f4626:	42b1      	cmp	r1, r6
 23f4628:	41ba      	sbcs	r2, r7
 23f462a:	d345      	bcc.n	23f46b8 <_ZN9ExFatFile7seekSetEy+0xce>
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
 23f462c:	f8d4 e020 	ldr.w	lr, [r4, #32]
 23f4630:	1e75      	subs	r5, r6, #1
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
 23f4632:	f89e 1445 	ldrb.w	r1, [lr, #1093]	; 0x445
 23f4636:	f147 3aff 	adc.w	sl, r7, #4294967295	; 0xffffffff
 23f463a:	3109      	adds	r1, #9
 23f463c:	b2c9      	uxtb	r1, r1
 23f463e:	f1c1 0920 	rsb	r9, r1, #32
 23f4642:	fa0a f909 	lsl.w	r9, sl, r9
 23f4646:	f1a1 0220 	sub.w	r2, r1, #32
 23f464a:	40cd      	lsrs	r5, r1
 23f464c:	fa2a f202 	lsr.w	r2, sl, r2
 23f4650:	ea45 0509 	orr.w	r5, r5, r9
 23f4654:	4315      	orrs	r5, r2
  if (isContiguous()) {
 23f4656:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
 23f465a:	f1c1 0920 	rsb	r9, r1, #32
 23f465e:	f012 0f40 	tst.w	r2, #64	; 0x40
 23f4662:	f1a1 0a20 	sub.w	sl, r1, #32
 23f4666:	d002      	beq.n	23f466e <_ZN9ExFatFile7seekSetEy+0x84>
    m_curCluster = m_firstCluster + nNew;
 23f4668:	69e3      	ldr	r3, [r4, #28]
 23f466a:	442b      	add	r3, r5
 23f466c:	e7d2      	b.n	23f4614 <_ZN9ExFatFile7seekSetEy+0x2a>
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
 23f466e:	f110 3bff 	adds.w	fp, r0, #4294967295	; 0xffffffff
 23f4672:	f14c 32ff 	adc.w	r2, ip, #4294967295	; 0xffffffff
 23f4676:	fa02 f909 	lsl.w	r9, r2, r9
 23f467a:	fa2b f101 	lsr.w	r1, fp, r1
 23f467e:	ea41 0109 	orr.w	r1, r1, r9
 23f4682:	fa22 f20a 	lsr.w	r2, r2, sl
 23f4686:	4311      	orrs	r1, r2
  if (nNew < nCur || m_curPosition == 0) {
 23f4688:	428d      	cmp	r5, r1
 23f468a:	d302      	bcc.n	23f4692 <_ZN9ExFatFile7seekSetEy+0xa8>
 23f468c:	ea50 020c 	orrs.w	r2, r0, ip
 23f4690:	d117      	bne.n	23f46c2 <_ZN9ExFatFile7seekSetEy+0xd8>
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
 23f4692:	065b      	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
 23f4694:	bf4c      	ite	mi
 23f4696:	f8de 3434 	ldrmi.w	r3, [lr, #1076]	; 0x434
 23f469a:	69e3      	ldrpl	r3, [r4, #28]
 23f469c:	61a3      	str	r3, [r4, #24]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 23f469e:	f104 0918 	add.w	r9, r4, #24
  while (nNew--) {
 23f46a2:	2d00      	cmp	r5, #0
 23f46a4:	d0b7      	beq.n	23f4616 <_ZN9ExFatFile7seekSetEy+0x2c>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 23f46a6:	464a      	mov	r2, r9
 23f46a8:	69a1      	ldr	r1, [r4, #24]
 23f46aa:	6a20      	ldr	r0, [r4, #32]
 23f46ac:	f000 feb4 	bl	23f5418 <_ZN14ExFatPartition6fatGetEmPm>
 23f46b0:	2800      	cmp	r0, #0
 23f46b2:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 23f46b6:	dcf4      	bgt.n	23f46a2 <_ZN9ExFatFile7seekSetEy+0xb8>
  return true;

fail:
  m_curCluster = tmp;
  return false;
 23f46b8:	2000      	movs	r0, #0
  m_curCluster = tmp;
 23f46ba:	f8c4 8018 	str.w	r8, [r4, #24]
}
 23f46be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
 23f46c2:	1a6d      	subs	r5, r5, r1
 23f46c4:	e7eb      	b.n	23f469e <_ZN9ExFatFile7seekSetEy+0xb4>
	...

023f46c8 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
 23f46c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f46cc:	4699      	mov	r9, r3
 23f46ce:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 23f46d2:	4604      	mov	r4, r0
 23f46d4:	460e      	mov	r6, r1
 23f46d6:	4615      	mov	r5, r2
 23f46d8:	b08d      	sub	sp, #52	; 0x34
  if (isOpen() || !dir->isDir()) {
 23f46da:	2b00      	cmp	r3, #0
 23f46dc:	d141      	bne.n	23f4762 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
 23f46de:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 23f46e2:	f013 0f50 	tst.w	r3, #80	; 0x50
 23f46e6:	d03c      	beq.n	23f4762 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
  switch (oflag & O_ACCMODE) {
 23f46e8:	f009 0303 	and.w	r3, r9, #3
 23f46ec:	2b03      	cmp	r3, #3
 23f46ee:	d038      	beq.n	23f4762 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
 23f46f0:	f009 0a08 	and.w	sl, r9, #8
 23f46f4:	3301      	adds	r3, #1
 23f46f6:	ea4a 0a03 	orr.w	sl, sl, r3
  if (fname) {
 23f46fa:	2a00      	cmp	r2, #0
 23f46fc:	d038      	beq.n	23f4770 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xa8>
    freeNeed = 2 + (fname->nameLength + 14) / 15;
 23f46fe:	230f      	movs	r3, #15
 23f4700:	68d7      	ldr	r7, [r2, #12]
   *
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() { seekSet(0); }
 23f4702:	4608      	mov	r0, r1
 23f4704:	370e      	adds	r7, #14
 23f4706:	fbb7 f7f3 	udiv	r7, r7, r3
 23f470a:	2200      	movs	r2, #0
 23f470c:	3702      	adds	r7, #2
 23f470e:	2300      	movs	r3, #0
 23f4710:	b2ff      	uxtb	r7, r7
 23f4712:	f7ff ff6a 	bl	23f45ea <_ZN9ExFatFile7seekSetEy>
      inSet = false;
 23f4716:	f04f 0b00 	mov.w	fp, #0
 23f471a:	46d8      	mov	r8, fp
    n = dir->read(buf, FS_DIR_SIZE);
 23f471c:	2220      	movs	r2, #32
 23f471e:	4630      	mov	r0, r6
 23f4720:	a904      	add	r1, sp, #16
 23f4722:	f7ff fe87 	bl	23f4434 <_ZN9ExFatFile4readEPvj>
    if (n == 0) {
 23f4726:	2800      	cmp	r0, #0
 23f4728:	f000 80c6 	beq.w	23f48b8 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x1f0>
    if (n != FS_DIR_SIZE) {
 23f472c:	2820      	cmp	r0, #32
 23f472e:	d118      	bne.n	23f4762 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
    if (!(buf[0] & EXFAT_TYPE_USED)) {
 23f4730:	f99d 1010 	ldrsb.w	r1, [sp, #16]
 23f4734:	f89d 2010 	ldrb.w	r2, [sp, #16]
 23f4738:	2900      	cmp	r1, #0
 23f473a:	db1e      	blt.n	23f477a <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xb2>
      if (freeCount == 0) {
 23f473c:	f1bb 0f00 	cmp.w	fp, #0
 23f4740:	d105      	bne.n	23f474e <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x86>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
 23f4742:	6831      	ldr	r1, [r6, #0]
 23f4744:	f1a1 0320 	sub.w	r3, r1, #32
 23f4748:	9300      	str	r3, [sp, #0]
  uint32_t curCluster() const { return m_curCluster; }
 23f474a:	69b3      	ldr	r3, [r6, #24]
 23f474c:	9301      	str	r3, [sp, #4]
      if (freeCount < freeNeed) {
 23f474e:	45bb      	cmp	fp, r7
        freeCount++;
 23f4750:	bf3c      	itt	cc
 23f4752:	f10b 0301 	addcc.w	r3, fp, #1
 23f4756:	fa5f fb83 	uxtbcc.w	fp, r3
      if (buf[0] == EXFAT_TYPE_END_DIR) {
 23f475a:	b95a      	cbnz	r2, 23f4774 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xac>
        if (fname) {
 23f475c:	2d00      	cmp	r5, #0
 23f475e:	f040 80ab 	bne.w	23f48b8 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x1f0>
  m_attributes = FILE_ATTR_CLOSED;
 23f4762:	f04f 0800 	mov.w	r8, #0
 23f4766:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
 23f476a:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
  return false;
 23f476e:	e06d      	b.n	23f484c <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x184>
  uint8_t freeNeed = 3;
 23f4770:	2703      	movs	r7, #3
 23f4772:	e7d0      	b.n	23f4716 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x4e>
      inSet = false;
 23f4774:	2000      	movs	r0, #0
 23f4776:	4680      	mov	r8, r0
 23f4778:	e7d0      	b.n	23f471c <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x54>
    } else if (!inSet) {
 23f477a:	f1b8 0f00 	cmp.w	r8, #0
 23f477e:	d127      	bne.n	23f47d0 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x108>
        freeCount = 0;
 23f4780:	45bb      	cmp	fp, r7
 23f4782:	bf38      	it	cc
 23f4784:	f04f 0b00 	movcc.w	fp, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
 23f4788:	2a85      	cmp	r2, #133	; 0x85
 23f478a:	d1f3      	bne.n	23f4774 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xac>
      memset(this, 0, sizeof(ExFatFile));
 23f478c:	2238      	movs	r2, #56	; 0x38
 23f478e:	4641      	mov	r1, r8
 23f4790:	4620      	mov	r0, r4
 23f4792:	f007 ffb4 	bl	23fc6fe <memset>
      m_setCount = dirFile->setCount;
 23f4796:	f89d 2011 	ldrb.w	r2, [sp, #17]
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
 23f479a:	f89d 1014 	ldrb.w	r1, [sp, #20]
      m_setCount = dirFile->setCount;
 23f479e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
 23f47a2:	f001 0237 	and.w	r2, r1, #55	; 0x37
      if (!(m_attributes & FS_ATTRIB_DIRECTORY)) {
 23f47a6:	06c9      	lsls	r1, r1, #27
        m_attributes |= FILE_ATTR_FILE;
 23f47a8:	bf58      	it	pl
 23f47aa:	f042 0208 	orrpl.w	r2, r2, #8
 23f47ae:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
  bool hashName(ExName_t* fname);
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path, ExName_t* fname, const char** ptr);
  ExFatVolume* volume() const { return m_vol; }
 23f47b2:	6a32      	ldr	r2, [r6, #32]
      inSet = true;
 23f47b4:	2001      	movs	r0, #1
      m_vol = dir->volume();
 23f47b6:	6222      	str	r2, [r4, #32]
  uint32_t curCluster() const { return m_curCluster; }
 23f47b8:	69b2      	ldr	r2, [r6, #24]
      m_dirPos.cluster = dir->curCluster();
 23f47ba:	6262      	str	r2, [r4, #36]	; 0x24
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
 23f47bc:	6832      	ldr	r2, [r6, #0]
 23f47be:	3a20      	subs	r2, #32
 23f47c0:	62a2      	str	r2, [r4, #40]	; 0x28
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
 23f47c2:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
 23f47c6:	f3c2 1280 	ubfx	r2, r2, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
 23f47ca:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
 23f47ce:	e7d2      	b.n	23f4776 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xae>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
 23f47d0:	2ac0      	cmp	r2, #192	; 0xc0
 23f47d2:	d150      	bne.n	23f4876 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x1ae>
      m_validLength = getLe64(dirStream->validLength);
 23f47d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
 23f47d8:	f89d 2011 	ldrb.w	r2, [sp, #17]
      m_flags = modeFlags;
 23f47dc:	f884 a033 	strb.w	sl, [r4, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
 23f47e0:	0793      	lsls	r3, r2, #30
        m_flags |= FILE_FLAG_CONTIGUOUS;
 23f47e2:	bf44      	itt	mi
 23f47e4:	f04a 0240 	orrmi.w	r2, sl, #64	; 0x40
 23f47e8:	f884 2033 	strbmi.w	r2, [r4, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
 23f47ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
      m_validLength = getLe64(dirStream->validLength);
 23f47ee:	e9c4 0104 	strd	r0, r1, [r4, #16]
      m_dataLength = getLe64(dirStream->dataLength);
 23f47f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
      m_firstCluster = getLe32(dirStream->firstCluster);
 23f47f6:	61e2      	str	r2, [r4, #28]
      m_dataLength = getLe64(dirStream->dataLength);
 23f47f8:	e9c4 0102 	strd	r0, r1, [r4, #8]
      if (!fname) {
 23f47fc:	bb55      	cbnz	r5, 23f4854 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x18c>
  if (oflag & O_EXCL) {
 23f47fe:	f419 6f00 	tst.w	r9, #2048	; 0x800
 23f4802:	d1ae      	bne.n	23f4762 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
 23f4804:	f419 4f88 	tst.w	r9, #17408	; 0x4400
 23f4808:	d103      	bne.n	23f4812 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x14a>
 23f480a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 23f480e:	079d      	lsls	r5, r3, #30
 23f4810:	d505      	bpl.n	23f481e <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x156>
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
 23f4812:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
 23f4816:	06d8      	lsls	r0, r3, #27
 23f4818:	d4a3      	bmi.n	23f4762 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
 23f481a:	07d9      	lsls	r1, r3, #31
 23f481c:	d4a1      	bmi.n	23f4762 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
  if (oflag & O_TRUNC) {
 23f481e:	f419 6f80 	tst.w	r9, #1024	; 0x400
 23f4822:	d039      	beq.n	23f4898 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x1d0>
    if (!(m_flags & FILE_FLAG_WRITE)) {
 23f4824:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 23f4828:	079a      	lsls	r2, r3, #30
 23f482a:	d59a      	bpl.n	23f4762 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
  bool truncate(uint64_t length) { return seekSet(length) && truncate(); }
 23f482c:	2200      	movs	r2, #0
 23f482e:	2300      	movs	r3, #0
 23f4830:	4620      	mov	r0, r4
 23f4832:	f7ff feda 	bl	23f45ea <_ZN9ExFatFile7seekSetEy>
 23f4836:	2800      	cmp	r0, #0
 23f4838:	d093      	beq.n	23f4762 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
 23f483a:	4620      	mov	r0, r4
 23f483c:	f000 fb73 	bl	23f4f26 <_ZN9ExFatFile8truncateEv>
 23f4840:	2800      	cmp	r0, #0
 23f4842:	d08e      	beq.n	23f4762 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
  if (isWritable()) {
 23f4844:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 23f4848:	079b      	lsls	r3, r3, #30
 23f484a:	d42e      	bmi.n	23f48aa <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x1e2>
}
 23f484c:	4640      	mov	r0, r8
 23f484e:	b00d      	add	sp, #52	; 0x34
 23f4850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const char* end;
#if !USE_UTF8_LONG_NAMES
  /** \return true if at end. */
  bool atEnd() { return next == end; }
  /** Reset to start of LFN. */
  void reset() { next = begin; }
 23f4854:	682a      	ldr	r2, [r5, #0]
      if (fname->nameLength != dirStream->nameLength ||
 23f4856:	68e9      	ldr	r1, [r5, #12]
 23f4858:	606a      	str	r2, [r5, #4]
 23f485a:	f89d 2013 	ldrb.w	r2, [sp, #19]
 23f485e:	4291      	cmp	r1, r2
 23f4860:	d188      	bne.n	23f4774 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xac>
 23f4862:	8a28      	ldrh	r0, [r5, #16]
 23f4864:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 23f4868:	eba0 0c02 	sub.w	ip, r0, r2
 23f486c:	f1dc 0000 	rsbs	r0, ip, #0
 23f4870:	eb40 000c 	adc.w	r0, r0, ip
 23f4874:	e77f      	b.n	23f4776 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xae>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
 23f4876:	2ac1      	cmp	r2, #193	; 0xc1
 23f4878:	f47f af7c 	bne.w	23f4774 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xac>
      if (!cmpName(dirName, fname)) {
 23f487c:	462a      	mov	r2, r5
 23f487e:	4620      	mov	r0, r4
 23f4880:	a904      	add	r1, sp, #16
 23f4882:	f000 fcbb 	bl	23f51fc <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t>
 23f4886:	2800      	cmp	r0, #0
 23f4888:	f43f af75 	beq.w	23f4776 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xae>
      if (fname->atEnd()) {
 23f488c:	e9d5 2101 	ldrd	r2, r1, [r5, #4]
 23f4890:	4291      	cmp	r1, r2
 23f4892:	f47f af70 	bne.w	23f4776 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0xae>
 23f4896:	e7b2      	b.n	23f47fe <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x136>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
 23f4898:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 23f489c:	d0d2      	beq.n	23f4844 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x17c>
 23f489e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 23f48a2:	4620      	mov	r0, r4
 23f48a4:	f7ff fea1 	bl	23f45ea <_ZN9ExFatFile7seekSetEy>
 23f48a8:	e7ca      	b.n	23f4840 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x178>
    m_attributes |= FS_ATTRIB_ARCHIVE;
 23f48aa:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 23f48ae:	f043 0320 	orr.w	r3, r3, #32
 23f48b2:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
 23f48b6:	e7c9      	b.n	23f484c <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x184>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
 23f48b8:	f419 7f00 	tst.w	r9, #512	; 0x200
 23f48bc:	f43f af51 	beq.w	23f4762 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
 23f48c0:	f01a 0f02 	tst.w	sl, #2
 23f48c4:	f43f af4d 	beq.w	23f4762 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
 23f48c8:	2d00      	cmp	r5, #0
 23f48ca:	f43f af4a 	beq.w	23f4762 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
  while (freeCount < freeNeed) {
 23f48ce:	45bb      	cmp	fp, r7
 23f48d0:	d221      	bcs.n	23f4916 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x24e>
    n = dir->read(buf, FS_DIR_SIZE);
 23f48d2:	2220      	movs	r2, #32
 23f48d4:	4630      	mov	r0, r6
 23f48d6:	a904      	add	r1, sp, #16
 23f48d8:	f7ff fdac 	bl	23f4434 <_ZN9ExFatFile4readEPvj>
    if (n == 0) {
 23f48dc:	b950      	cbnz	r0, 23f48f4 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x22c>
      if (!dir->addDirCluster()) {
 23f48de:	4630      	mov	r0, r6
      uint32_t saveCurCluster = dir->m_curCluster;
 23f48e0:	f8d6 8018 	ldr.w	r8, [r6, #24]
      if (!dir->addDirCluster()) {
 23f48e4:	f000 fa45 	bl	23f4d72 <_ZN9ExFatFile13addDirClusterEv>
 23f48e8:	2800      	cmp	r0, #0
 23f48ea:	f43f af3a 	beq.w	23f4762 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
      dir->m_curCluster = saveCurCluster;
 23f48ee:	f8c6 8018 	str.w	r8, [r6, #24]
      continue;
 23f48f2:	e7ec      	b.n	23f48ce <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x206>
    if (n != FS_DIR_SIZE) {
 23f48f4:	2820      	cmp	r0, #32
 23f48f6:	f47f af34 	bne.w	23f4762 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
    if (freeCount == 0) {
 23f48fa:	f1bb 0f00 	cmp.w	fp, #0
 23f48fe:	d105      	bne.n	23f490c <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x244>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
 23f4900:	6832      	ldr	r2, [r6, #0]
 23f4902:	f1a2 0320 	sub.w	r3, r2, #32
 23f4906:	9300      	str	r3, [sp, #0]
  uint32_t curCluster() const { return m_curCluster; }
 23f4908:	69b3      	ldr	r3, [r6, #24]
 23f490a:	9301      	str	r3, [sp, #4]
    freeCount++;
 23f490c:	f10b 0301 	add.w	r3, fp, #1
 23f4910:	fa5f fb83 	uxtb.w	fp, r3
 23f4914:	e7db      	b.n	23f48ce <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x206>
  memset(this, 0, sizeof(ExFatFile));
 23f4916:	2238      	movs	r2, #56	; 0x38
 23f4918:	2100      	movs	r1, #0
 23f491a:	4620      	mov	r0, r4
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
 23f491c:	f896 8033 	ldrb.w	r8, [r6, #51]	; 0x33
 23f4920:	f007 feed 	bl	23fc6fe <memset>
  ExFatVolume* volume() const { return m_vol; }
 23f4924:	6a33      	ldr	r3, [r6, #32]
 23f4926:	f04f 0900 	mov.w	r9, #0
  m_vol = dir->volume();
 23f492a:	6223      	str	r3, [r4, #32]
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
 23f492c:	2328      	movs	r3, #40	; 0x28
 23f492e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_dirPos = freePos;
 23f4932:	9b01      	ldr	r3, [sp, #4]
  freePos.isContiguous = dir->isContiguous();
 23f4934:	f3c8 1880 	ubfx	r8, r8, #6, #1
  m_dirPos = freePos;
 23f4938:	6263      	str	r3, [r4, #36]	; 0x24
 23f493a:	9b00      	ldr	r3, [sp, #0]
 23f493c:	f884 802c 	strb.w	r8, [r4, #44]	; 0x2c
 23f4940:	62a3      	str	r3, [r4, #40]	; 0x28
 23f4942:	682b      	ldr	r3, [r5, #0]
      m_setCount = freeNeed - 1;
 23f4944:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
 23f4948:	606b      	str	r3, [r5, #4]
 23f494a:	fa5f f888 	uxtb.w	r8, r8
 23f494e:	fa5f fb89 	uxtb.w	fp, r9
  for (uint8_t i = 0; i < freeNeed; i++) {
 23f4952:	45bb      	cmp	fp, r7
 23f4954:	d255      	bcs.n	23f4a02 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x33a>
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
 23f4956:	2201      	movs	r2, #1
 23f4958:	4659      	mov	r1, fp
 23f495a:	4620      	mov	r0, r4
 23f495c:	f7ff fcf6 	bl	23f434c <_ZN9ExFatFile8dirCacheEhh>
    if (!cache || (cache[0] & 0x80)) {
 23f4960:	4606      	mov	r6, r0
 23f4962:	2800      	cmp	r0, #0
 23f4964:	f43f aefd 	beq.w	23f4762 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
 23f4968:	f990 2000 	ldrsb.w	r2, [r0]
 23f496c:	2a00      	cmp	r2, #0
 23f496e:	f6ff aef8 	blt.w	23f4762 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x9a>
    memset(cache, 0, FS_DIR_SIZE);
 23f4972:	2220      	movs	r2, #32
 23f4974:	2100      	movs	r1, #0
 23f4976:	f007 fec2 	bl	23fc6fe <memset>
    if (i == 0) {
 23f497a:	f1bb 0f00 	cmp.w	fp, #0
 23f497e:	d120      	bne.n	23f49c2 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x2fa>
      dirFile->type = EXFAT_TYPE_FILE;
 23f4980:	2385      	movs	r3, #133	; 0x85
 23f4982:	7033      	strb	r3, [r6, #0]
      if (FsDateTime::callback) {
 23f4984:	4b21      	ldr	r3, [pc, #132]	; (23f4a0c <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x344>)
      m_setCount = freeNeed - 1;
 23f4986:	f884 8030 	strb.w	r8, [r4, #48]	; 0x30
      dirFile->setCount = m_setCount;
 23f498a:	f886 8001 	strb.w	r8, [r6, #1]
      if (FsDateTime::callback) {
 23f498e:	681b      	ldr	r3, [r3, #0]
 23f4990:	b18b      	cbz	r3, 23f49b6 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x2ee>
        FsDateTime::callback(&date, &time, &ms10);
 23f4992:	f10d 020b 	add.w	r2, sp, #11
 23f4996:	f10d 010e 	add.w	r1, sp, #14
 23f499a:	a803      	add	r0, sp, #12
 23f499c:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
 23f499e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 23f49a2:	8173      	strh	r3, [r6, #10]
 23f49a4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 23f49a8:	8133      	strh	r3, [r6, #8]
        dirFile->createTimeMs = ms10;
 23f49aa:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23f49ae:	7533      	strb	r3, [r6, #20]
  for (uint8_t i = 0; i < freeNeed; i++) {
 23f49b0:	f109 0901 	add.w	r9, r9, #1
 23f49b4:	e7cb      	b.n	23f494e <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x286>
 23f49b6:	f645 2321 	movw	r3, #23073	; 0x5a21
 23f49ba:	8173      	strh	r3, [r6, #10]
 23f49bc:	81f3      	strh	r3, [r6, #14]
 23f49be:	8273      	strh	r3, [r6, #18]
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59
 23f49c0:	e7f6      	b.n	23f49b0 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x2e8>
    } else if (i == 1) {
 23f49c2:	f1bb 0f01 	cmp.w	fp, #1
 23f49c6:	d10c      	bne.n	23f49e2 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x31a>
      dirStream->type = EXFAT_TYPE_STREAM;
 23f49c8:	22c0      	movs	r2, #192	; 0xc0
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
 23f49ca:	f06a 037f 	orn	r3, sl, #127	; 0x7f
      dirStream->type = EXFAT_TYPE_STREAM;
 23f49ce:	7032      	strb	r2, [r6, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
 23f49d0:	f886 b001 	strb.w	fp, [r6, #1]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
 23f49d4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
 23f49d8:	68eb      	ldr	r3, [r5, #12]
 23f49da:	70f3      	strb	r3, [r6, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
 23f49dc:	8a2b      	ldrh	r3, [r5, #16]
 23f49de:	80b3      	strh	r3, [r6, #4]
}
 23f49e0:	e7e6      	b.n	23f49b0 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x2e8>
      dirName->type = EXFAT_TYPE_NAME;
 23f49e2:	23c1      	movs	r3, #193	; 0xc1
 23f49e4:	f106 021e 	add.w	r2, r6, #30
 23f49e8:	7033      	strb	r3, [r6, #0]
        if (fname->atEnd()) {
 23f49ea:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
 23f49ee:	428b      	cmp	r3, r1
 23f49f0:	d0de      	beq.n	23f49b0 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x2e8>
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() { return atEnd() ? 0 : *next++; }
 23f49f2:	1c59      	adds	r1, r3, #1
 23f49f4:	6069      	str	r1, [r5, #4]
 23f49f6:	781b      	ldrb	r3, [r3, #0]
 23f49f8:	f826 3f02 	strh.w	r3, [r6, #2]!
      for (size_t k = 0; k < 15; k++) {
 23f49fc:	42b2      	cmp	r2, r6
 23f49fe:	d1f4      	bne.n	23f49ea <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x322>
 23f4a00:	e7d6      	b.n	23f49b0 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x2e8>
  return sync();
 23f4a02:	4620      	mov	r0, r4
 23f4a04:	f000 f994 	bl	23f4d30 <_ZN9ExFatFile4syncEv>
 23f4a08:	4680      	mov	r8, r0
 23f4a0a:	e71f      	b.n	23f484c <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti+0x184>
 23f4a0c:	1007aea8 	.word	0x1007aea8

023f4a10 <_ZN9ExFatFile4openEPS_PKci>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
 23f4a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f4a14:	4698      	mov	r8, r3
  ExFatFile() {}
 23f4a16:	2300      	movs	r3, #0
 23f4a18:	b096      	sub	sp, #88	; 0x58
 23f4a1a:	9314      	str	r3, [sp, #80]	; 0x50
  if (isOpen() || !dirFile->isDir()) {
 23f4a1c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
 23f4a20:	4605      	mov	r5, r0
 23f4a22:	460c      	mov	r4, r1
 23f4a24:	9201      	str	r2, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
 23f4a26:	b11b      	cbz	r3, 23f4a30 <_ZN9ExFatFile4openEPS_PKci+0x20>
  return false;
 23f4a28:	2000      	movs	r0, #0
}
 23f4a2a:	b016      	add	sp, #88	; 0x58
 23f4a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isOpen() || !dirFile->isDir()) {
 23f4a30:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 23f4a34:	f013 0f50 	tst.w	r3, #80	; 0x50
 23f4a38:	d0f6      	beq.n	23f4a28 <_ZN9ExFatFile4openEPS_PKci+0x18>
  if (isDirSeparator(*path)) {
 23f4a3a:	7813      	ldrb	r3, [r2, #0]
 23f4a3c:	2b2f      	cmp	r3, #47	; 0x2f
 23f4a3e:	d11a      	bne.n	23f4a76 <_ZN9ExFatFile4openEPS_PKci+0x66>
    while (isDirSeparator(*path)) {
 23f4a40:	9a01      	ldr	r2, [sp, #4]
 23f4a42:	7813      	ldrb	r3, [r2, #0]
 23f4a44:	2b2f      	cmp	r3, #47	; 0x2f
 23f4a46:	d102      	bne.n	23f4a4e <_ZN9ExFatFile4openEPS_PKci+0x3e>
      path++;
 23f4a48:	3201      	adds	r2, #1
 23f4a4a:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
 23f4a4c:	e7f8      	b.n	23f4a40 <_ZN9ExFatFile4openEPS_PKci+0x30>
      return openRoot(dirFile->m_vol);
 23f4a4e:	6a24      	ldr	r4, [r4, #32]
    if (*path == 0) {
 23f4a50:	b923      	cbnz	r3, 23f4a5c <_ZN9ExFatFile4openEPS_PKci+0x4c>
      return openRoot(dirFile->m_vol);
 23f4a52:	4621      	mov	r1, r4
 23f4a54:	4628      	mov	r0, r5
 23f4a56:	f7ff fc9f 	bl	23f4398 <_ZN9ExFatFile8openRootEP11ExFatVolume>
 23f4a5a:	e7e6      	b.n	23f4a2a <_ZN9ExFatFile4openEPS_PKci+0x1a>
  memset(this, 0, sizeof(ExFatFile));
 23f4a5c:	2238      	movs	r2, #56	; 0x38
 23f4a5e:	2100      	movs	r1, #0
 23f4a60:	a808      	add	r0, sp, #32
 23f4a62:	f007 fe4c 	bl	23fc6fe <memset>
  m_attributes = FILE_ATTR_ROOT;
 23f4a66:	2340      	movs	r3, #64	; 0x40
 23f4a68:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  m_flags = FILE_FLAG_READ;
 23f4a6c:	2301      	movs	r3, #1
  m_vol = vol;
 23f4a6e:	9410      	str	r4, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
 23f4a70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    dirFile = &tmpDir;
 23f4a74:	ac08      	add	r4, sp, #32
    if (!parsePathName(path, &fname, &path)) {
 23f4a76:	4628      	mov	r0, r5
 23f4a78:	9901      	ldr	r1, [sp, #4]
 23f4a7a:	ab01      	add	r3, sp, #4
 23f4a7c:	aa03      	add	r2, sp, #12
 23f4a7e:	f7ff fc9f 	bl	23f43c0 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_>
 23f4a82:	2800      	cmp	r0, #0
 23f4a84:	d0d0      	beq.n	23f4a28 <_ZN9ExFatFile4openEPS_PKci+0x18>
    if (*path == 0) {
 23f4a86:	9b01      	ldr	r3, [sp, #4]
 23f4a88:	781b      	ldrb	r3, [r3, #0]
 23f4a8a:	b1d3      	cbz	r3, 23f4ac2 <_ZN9ExFatFile4openEPS_PKci+0xb2>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
 23f4a8c:	2300      	movs	r3, #0
 23f4a8e:	4621      	mov	r1, r4
 23f4a90:	4628      	mov	r0, r5
 23f4a92:	aa03      	add	r2, sp, #12
 23f4a94:	f7ff fe18 	bl	23f46c8 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti>
 23f4a98:	2800      	cmp	r0, #0
 23f4a9a:	d0c5      	beq.n	23f4a28 <_ZN9ExFatFile4openEPS_PKci+0x18>
      *this = *from;
 23f4a9c:	ae08      	add	r6, sp, #32
 23f4a9e:	462a      	mov	r2, r5
 23f4aa0:	4634      	mov	r4, r6
 23f4aa2:	f105 0330 	add.w	r3, r5, #48	; 0x30
 23f4aa6:	4637      	mov	r7, r6
 23f4aa8:	6810      	ldr	r0, [r2, #0]
 23f4aaa:	6851      	ldr	r1, [r2, #4]
 23f4aac:	3208      	adds	r2, #8
 23f4aae:	c703      	stmia	r7!, {r0, r1}
 23f4ab0:	429a      	cmp	r2, r3
 23f4ab2:	463e      	mov	r6, r7
 23f4ab4:	d1f7      	bne.n	23f4aa6 <_ZN9ExFatFile4openEPS_PKci+0x96>
 23f4ab6:	6810      	ldr	r0, [r2, #0]
 23f4ab8:	6038      	str	r0, [r7, #0]
    close();
 23f4aba:	4628      	mov	r0, r5
 23f4abc:	f7ff fc62 	bl	23f4384 <_ZN9ExFatFile5closeEv>
    if (!parsePathName(path, &fname, &path)) {
 23f4ac0:	e7d9      	b.n	23f4a76 <_ZN9ExFatFile4openEPS_PKci+0x66>
  return openPrivate(dirFile, &fname, oflag);
 23f4ac2:	4643      	mov	r3, r8
 23f4ac4:	4621      	mov	r1, r4
 23f4ac6:	4628      	mov	r0, r5
 23f4ac8:	aa03      	add	r2, sp, #12
 23f4aca:	f7ff fdfd 	bl	23f46c8 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti>
 23f4ace:	e7ac      	b.n	23f4a2a <_ZN9ExFatFile4openEPS_PKci+0x1a>

023f4ad0 <_ZN9ExFatFile4openEP11ExFatVolumePKci>:
  return vol && open(vol->vwd(), path, oflag);
 23f4ad0:	b119      	cbz	r1, 23f4ada <_ZN9ExFatFile4openEP11ExFatVolumePKci+0xa>
 23f4ad2:	f501 6189 	add.w	r1, r1, #1096	; 0x448
 23f4ad6:	f7ff bf9b 	b.w	23f4a10 <_ZN9ExFatFile4openEPS_PKci>
}
 23f4ada:	4608      	mov	r0, r1
 23f4adc:	4770      	bx	lr

023f4ade <_ZL16exFatDirChecksumPKht>:
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
 23f4ade:	2300      	movs	r3, #0
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
 23f4ae0:	b510      	push	{r4, lr}
  bool skip = data[0] == EXFAT_TYPE_FILE;
 23f4ae2:	7804      	ldrb	r4, [r0, #0]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
 23f4ae4:	084a      	lsrs	r2, r1, #1
 23f4ae6:	ea42 31c1 	orr.w	r1, r2, r1, lsl #15
 23f4aea:	5cc2      	ldrb	r2, [r0, r3]
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
 23f4aec:	2b01      	cmp	r3, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
 23f4aee:	fa12 f181 	uxtah	r1, r2, r1
 23f4af2:	b289      	uxth	r1, r1
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
 23f4af4:	d108      	bne.n	23f4b08 <_ZL16exFatDirChecksumPKht+0x2a>
 23f4af6:	2c85      	cmp	r4, #133	; 0x85
 23f4af8:	bf14      	ite	ne
 23f4afa:	2201      	movne	r2, #1
 23f4afc:	2203      	moveq	r2, #3
 23f4afe:	4413      	add	r3, r2
 23f4b00:	2b1f      	cmp	r3, #31
 23f4b02:	d9ef      	bls.n	23f4ae4 <_ZL16exFatDirChecksumPKht+0x6>
  }
  return checksum;
}
 23f4b04:	4608      	mov	r0, r1
 23f4b06:	bd10      	pop	{r4, pc}
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
 23f4b08:	2201      	movs	r2, #1
 23f4b0a:	e7f8      	b.n	23f4afe <_ZL16exFatDirChecksumPKht+0x20>

023f4b0c <_ZN14ExFatPartition9cacheSyncEv>:
  bool cacheSync() {
 23f4b0c:	b510      	push	{r4, lr}
 23f4b0e:	4604      	mov	r4, r0
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
 23f4b10:	f001 f825 	bl	23f5b5e <_ZN7FsCache4syncEv>
 23f4b14:	b150      	cbz	r0, 23f4b2c <_ZN14ExFatPartition9cacheSyncEv+0x20>
 23f4b16:	f504 7004 	add.w	r0, r4, #528	; 0x210
 23f4b1a:	f001 f820 	bl	23f5b5e <_ZN7FsCache4syncEv>
 23f4b1e:	b128      	cbz	r0, 23f4b2c <_ZN14ExFatPartition9cacheSyncEv+0x20>
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const { return m_sectorMask; }
  bool syncDevice() { return m_blockDev->syncDevice(); }
 23f4b20:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
  }
 23f4b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  bool syncDevice() { return m_blockDev->syncDevice(); }
 23f4b28:	f7fe bfec 	b.w	23f3b04 <_ZN9SdSpiCard10syncDeviceEv>
  }
 23f4b2c:	2000      	movs	r0, #0
 23f4b2e:	bd10      	pop	{r4, pc}

023f4b30 <_ZN9ExFatFile10addClusterEv>:
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
 23f4b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f4b32:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
 23f4b34:	69a1      	ldr	r1, [r4, #24]
 23f4b36:	6a00      	ldr	r0, [r0, #32]
 23f4b38:	b101      	cbz	r1, 23f4b3c <_ZN9ExFatFile10addClusterEv+0xc>
 23f4b3a:	3101      	adds	r1, #1
 23f4b3c:	2201      	movs	r2, #1
 23f4b3e:	f000 fbac 	bl	23f529a <_ZN14ExFatPartition10bitmapFindEmm>
  if (find < 2) {
 23f4b42:	2801      	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
 23f4b44:	4605      	mov	r5, r0
  if (find < 2) {
 23f4b46:	d802      	bhi.n	23f4b4e <_ZN9ExFatFile10addClusterEv+0x1e>
done:
  m_curCluster = find;
  return true;

fail:
  return false;
 23f4b48:	2600      	movs	r6, #0
}
 23f4b4a:	4630      	mov	r0, r6
 23f4b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
 23f4b4e:	2301      	movs	r3, #1
 23f4b50:	4601      	mov	r1, r0
 23f4b52:	461a      	mov	r2, r3
 23f4b54:	6a20      	ldr	r0, [r4, #32]
 23f4b56:	f000 fbf5 	bl	23f5344 <_ZN14ExFatPartition12bitmapModifyEmmb>
 23f4b5a:	4606      	mov	r6, r0
 23f4b5c:	2800      	cmp	r0, #0
 23f4b5e:	d0f3      	beq.n	23f4b48 <_ZN9ExFatFile10addClusterEv+0x18>
  if (m_curCluster == 0) {
 23f4b60:	69a2      	ldr	r2, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
 23f4b62:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  if (m_curCluster == 0) {
 23f4b66:	b92a      	cbnz	r2, 23f4b74 <_ZN9ExFatFile10addClusterEv+0x44>
    m_flags |= FILE_FLAG_CONTIGUOUS;
 23f4b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 23f4b6c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_curCluster = find;
 23f4b70:	61a5      	str	r5, [r4, #24]
  return true;
 23f4b72:	e7ea      	b.n	23f4b4a <_ZN9ExFatFile10addClusterEv+0x1a>
  if (isContiguous()) {
 23f4b74:	0659      	lsls	r1, r3, #25
 23f4b76:	d513      	bpl.n	23f4ba0 <_ZN9ExFatFile10addClusterEv+0x70>
    if (find == (m_curCluster + 1)) {
 23f4b78:	3201      	adds	r2, #1
 23f4b7a:	42aa      	cmp	r2, r5
 23f4b7c:	d0f8      	beq.n	23f4b70 <_ZN9ExFatFile10addClusterEv+0x40>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
 23f4b7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
 23f4b82:	69e1      	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
 23f4b84:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
 23f4b88:	69a3      	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
 23f4b8a:	6a20      	ldr	r0, [r4, #32]
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
 23f4b8c:	428b      	cmp	r3, r1
 23f4b8e:	d907      	bls.n	23f4ba0 <_ZN9ExFatFile10addClusterEv+0x70>
      if (!m_vol->fatPut(c, c + 1)) {
 23f4b90:	1c4f      	adds	r7, r1, #1
 23f4b92:	463a      	mov	r2, r7
 23f4b94:	f000 fc93 	bl	23f54be <_ZN14ExFatPartition6fatPutEmm>
 23f4b98:	2800      	cmp	r0, #0
 23f4b9a:	d0d5      	beq.n	23f4b48 <_ZN9ExFatFile10addClusterEv+0x18>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
 23f4b9c:	4639      	mov	r1, r7
 23f4b9e:	e7f3      	b.n	23f4b88 <_ZN9ExFatFile10addClusterEv+0x58>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
 23f4ba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f4ba4:	4629      	mov	r1, r5
 23f4ba6:	6a20      	ldr	r0, [r4, #32]
 23f4ba8:	f000 fc89 	bl	23f54be <_ZN14ExFatPartition6fatPutEmm>
 23f4bac:	2800      	cmp	r0, #0
 23f4bae:	d0cb      	beq.n	23f4b48 <_ZN9ExFatFile10addClusterEv+0x18>
  if (m_curCluster) {
 23f4bb0:	69a1      	ldr	r1, [r4, #24]
 23f4bb2:	2900      	cmp	r1, #0
 23f4bb4:	d0dc      	beq.n	23f4b70 <_ZN9ExFatFile10addClusterEv+0x40>
    if (!m_vol->fatPut(m_curCluster, find)) {
 23f4bb6:	462a      	mov	r2, r5
 23f4bb8:	6a20      	ldr	r0, [r4, #32]
 23f4bba:	f000 fc80 	bl	23f54be <_ZN14ExFatPartition6fatPutEmm>
 23f4bbe:	2800      	cmp	r0, #0
 23f4bc0:	d1d6      	bne.n	23f4b70 <_ZN9ExFatFile10addClusterEv+0x40>
 23f4bc2:	e7c1      	b.n	23f4b48 <_ZN9ExFatFile10addClusterEv+0x18>

023f4bc4 <_ZN9ExFatFile6removeEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
 23f4bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
 23f4bc6:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 23f4bca:	4604      	mov	r4, r0
  uint8_t* cache;
  if (!isWritable()) {
 23f4bcc:	079a      	lsls	r2, r3, #30
 23f4bce:	d401      	bmi.n	23f4bd4 <_ZN9ExFatFile6removeEv+0x10>

  // Write entry to device.
  return m_vol->cacheSync();

fail:
  return false;
 23f4bd0:	2000      	movs	r0, #0
}
 23f4bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_firstCluster) {
 23f4bd4:	69c1      	ldr	r1, [r0, #28]
 23f4bd6:	b9d1      	cbnz	r1, 23f4c0e <_ZN9ExFatFile6removeEv+0x4a>
bool ExFatFile::remove() {
 23f4bd8:	2500      	movs	r5, #0
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
 23f4bda:	2201      	movs	r2, #1
 23f4bdc:	4620      	mov	r0, r4
 23f4bde:	b2e9      	uxtb	r1, r5
 23f4be0:	f7ff fbb4 	bl	23f434c <_ZN9ExFatFile8dirCacheEhh>
    if (!cache) {
 23f4be4:	2800      	cmp	r0, #0
 23f4be6:	d0f3      	beq.n	23f4bd0 <_ZN9ExFatFile6removeEv+0xc>
    cache[0] &= 0x7F;
 23f4be8:	7803      	ldrb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
 23f4bea:	3501      	adds	r5, #1
    cache[0] &= 0x7F;
 23f4bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 23f4bf0:	7003      	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
 23f4bf2:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 23f4bf6:	b2eb      	uxtb	r3, r5
 23f4bf8:	429a      	cmp	r2, r3
 23f4bfa:	d2ee      	bcs.n	23f4bda <_ZN9ExFatFile6removeEv+0x16>
  m_attributes = FILE_ATTR_CLOSED;
 23f4bfc:	2300      	movs	r3, #0
  return m_vol->cacheSync();
 23f4bfe:	6a20      	ldr	r0, [r4, #32]
  m_attributes = FILE_ATTR_CLOSED;
 23f4c00:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
 23f4c04:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return m_vol->cacheSync();
 23f4c08:	f7ff ff80 	bl	23f4b0c <_ZN14ExFatPartition9cacheSyncEv>
 23f4c0c:	e7e1      	b.n	23f4bd2 <_ZN9ExFatFile6removeEv+0xe>
    if (isContiguous()) {
 23f4c0e:	065b      	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
 23f4c10:	6a00      	ldr	r0, [r0, #32]
    if (isContiguous()) {
 23f4c12:	d51b      	bpl.n	23f4c4c <_ZN9ExFatFile6removeEv+0x88>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
 23f4c14:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
 23f4c18:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
 23f4c1c:	3a01      	subs	r2, #1
 23f4c1e:	f103 0309 	add.w	r3, r3, #9
 23f4c22:	b2db      	uxtb	r3, r3
 23f4c24:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
 23f4c28:	f1c3 0720 	rsb	r7, r3, #32
 23f4c2c:	f1a3 0620 	sub.w	r6, r3, #32
 23f4c30:	40da      	lsrs	r2, r3
 23f4c32:	fa05 f707 	lsl.w	r7, r5, r7
 23f4c36:	433a      	orrs	r2, r7
 23f4c38:	fa25 f606 	lsr.w	r6, r5, r6
 23f4c3c:	4332      	orrs	r2, r6
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
 23f4c3e:	2300      	movs	r3, #0
 23f4c40:	3201      	adds	r2, #1
 23f4c42:	f000 fb7f 	bl	23f5344 <_ZN14ExFatPartition12bitmapModifyEmmb>
      if (!m_vol->freeChain(m_firstCluster)) {
 23f4c46:	2800      	cmp	r0, #0
 23f4c48:	d1c6      	bne.n	23f4bd8 <_ZN9ExFatFile6removeEv+0x14>
 23f4c4a:	e7c1      	b.n	23f4bd0 <_ZN9ExFatFile6removeEv+0xc>
 23f4c4c:	f000 fc54 	bl	23f54f8 <_ZN14ExFatPartition9freeChainEm>
 23f4c50:	e7f9      	b.n	23f4c46 <_ZN9ExFatFile6removeEv+0x82>
	...

023f4c54 <_ZN9ExFatFile7syncDirEv>:
fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
 23f4c54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f4c58:	2700      	movs	r7, #0
 23f4c5a:	4604      	mov	r4, r0
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
 23f4c5c:	463e      	mov	r6, r7
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
        if (FsDateTime::callback) {
 23f4c5e:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 23f4d2c <_ZN9ExFatFile7syncDirEv+0xd8>
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
 23f4c62:	2200      	movs	r2, #0
 23f4c64:	4620      	mov	r0, r4
 23f4c66:	b2f9      	uxtb	r1, r7
 23f4c68:	f7ff fb70 	bl	23f434c <_ZN9ExFatFile8dirCacheEhh>
    if (!cache) {
 23f4c6c:	4605      	mov	r5, r0
 23f4c6e:	2800      	cmp	r0, #0
 23f4c70:	d03d      	beq.n	23f4cee <_ZN9ExFatFile7syncDirEv+0x9a>
    switch (cache[0]) {
 23f4c72:	7803      	ldrb	r3, [r0, #0]
 23f4c74:	2bc0      	cmp	r3, #192	; 0xc0
 23f4c76:	d044      	beq.n	23f4d02 <_ZN9ExFatFile7syncDirEv+0xae>
 23f4c78:	2bc1      	cmp	r3, #193	; 0xc1
 23f4c7a:	d021      	beq.n	23f4cc0 <_ZN9ExFatFile7syncDirEv+0x6c>
 23f4c7c:	2b85      	cmp	r3, #133	; 0x85
 23f4c7e:	d136      	bne.n	23f4cee <_ZN9ExFatFile7syncDirEv+0x9a>
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
 23f4c80:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 23f4c84:	f003 0337 	and.w	r3, r3, #55	; 0x37
 23f4c88:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
 23f4c8a:	f8d8 3000 	ldr.w	r3, [r8]
 23f4c8e:	b183      	cbz	r3, 23f4cb2 <_ZN9ExFatFile7syncDirEv+0x5e>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
 23f4c90:	f10d 0203 	add.w	r2, sp, #3
 23f4c94:	f10d 0106 	add.w	r1, sp, #6
 23f4c98:	a801      	add	r0, sp, #4
 23f4c9a:	4798      	blx	r3
          df->modifyTimeMs = ms10;
 23f4c9c:	f89d 3003 	ldrb.w	r3, [sp, #3]
          setLe16(df->modifyTime, time);
 23f4ca0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
          df->modifyTimeMs = ms10;
 23f4ca4:	756b      	strb	r3, [r5, #21]
          setLe16(df->modifyDate, date);
 23f4ca6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
 23f4caa:	81aa      	strh	r2, [r5, #12]
 23f4cac:	81eb      	strh	r3, [r5, #14]
 23f4cae:	822a      	strh	r2, [r5, #16]
 23f4cb0:	826b      	strh	r3, [r5, #18]
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
 23f4cb2:	6a22      	ldr	r2, [r4, #32]
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
 23f4cb4:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
 23f4cb8:	f043 0301 	orr.w	r3, r3, #1
 23f4cbc:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
      default:
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
 23f4cc0:	4631      	mov	r1, r6
 23f4cc2:	4628      	mov	r0, r5
 23f4cc4:	f7ff ff0b 	bl	23f4ade <_ZL16exFatDirChecksumPKht>
  for (uint8_t is = 0; is <= m_setCount; is++) {
 23f4cc8:	3701      	adds	r7, #1
 23f4cca:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 23f4cce:	b2fb      	uxtb	r3, r7
 23f4cd0:	429a      	cmp	r2, r3
    checksum = exFatDirChecksum(cache, checksum);
 23f4cd2:	4606      	mov	r6, r0
  for (uint8_t is = 0; is <= m_setCount; is++) {
 23f4cd4:	d2c5      	bcs.n	23f4c62 <_ZN9ExFatFile7syncDirEv+0xe>
  }
  df = reinterpret_cast<DirFile_t*>(
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
 23f4cd6:	2201      	movs	r2, #1
 23f4cd8:	6a20      	ldr	r0, [r4, #32]
 23f4cda:	f104 0124 	add.w	r1, r4, #36	; 0x24
 23f4cde:	f000 fb81 	bl	23f53e4 <_ZN14ExFatPartition8dirCacheEPK8DirPos_th>
  if (!df) {
 23f4ce2:	b120      	cbz	r0, 23f4cee <_ZN9ExFatFile7syncDirEv+0x9a>
 23f4ce4:	8046      	strh	r6, [r0, #2]
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
 23f4ce6:	6a20      	ldr	r0, [r4, #32]
 23f4ce8:	f7ff ff10 	bl	23f4b0c <_ZN14ExFatPartition9cacheSyncEv>
 23f4cec:	b930      	cbnz	r0, 23f4cfc <_ZN9ExFatFile7syncDirEv+0xa8>
  }
  return true;

fail:
  m_error |= WRITE_ERROR;
  return false;
 23f4cee:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
 23f4cf0:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 23f4cf4:	f043 0301 	orr.w	r3, r3, #1
 23f4cf8:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
 23f4cfc:	b002      	add	sp, #8
 23f4cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (isContiguous()) {
 23f4d02:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
 23f4d06:	7843      	ldrb	r3, [r0, #1]
        if (isContiguous()) {
 23f4d08:	0652      	lsls	r2, r2, #25
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
 23f4d0a:	bf4c      	ite	mi
 23f4d0c:	f043 0302 	orrmi.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
 23f4d10:	f003 03fd 	andpl.w	r3, r3, #253	; 0xfd
 23f4d14:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
 23f4d16:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
  *reinterpret_cast<uint64_t*>(dst) = src;
 23f4d1a:	e9c0 2302 	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
 23f4d1e:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
 23f4d20:	6143      	str	r3, [r0, #20]
        setLe64(ds->dataLength, m_dataLength);
 23f4d22:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
  *reinterpret_cast<uint64_t*>(dst) = src;
 23f4d26:	e9c0 2306 	strd	r2, r3, [r0, #24]
 23f4d2a:	e7c2      	b.n	23f4cb2 <_ZN9ExFatFile7syncDirEv+0x5e>
 23f4d2c:	1007aea8 	.word	0x1007aea8

023f4d30 <_ZN9ExFatFile4syncEv>:
bool ExFatFile::sync() {
 23f4d30:	b510      	push	{r4, lr}
  if (!isOpen()) {
 23f4d32:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::sync() {
 23f4d36:	4604      	mov	r4, r0
  if (!isOpen()) {
 23f4d38:	b90b      	cbnz	r3, 23f4d3e <_ZN9ExFatFile4syncEv+0xe>
    return true;
 23f4d3a:	2001      	movs	r0, #1
}
 23f4d3c:	bd10      	pop	{r4, pc}
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
 23f4d3e:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
 23f4d42:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 23f4d46:	2a00      	cmp	r2, #0
 23f4d48:	da07      	bge.n	23f4d5a <_ZN9ExFatFile4syncEv+0x2a>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
 23f4d4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 23f4d4e:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
 23f4d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return syncDir();
 23f4d56:	f7ff bf7d 	b.w	23f4c54 <_ZN9ExFatFile7syncDirEv>
  if (!m_vol->cacheSync()) {
 23f4d5a:	6a00      	ldr	r0, [r0, #32]
 23f4d5c:	f7ff fed6 	bl	23f4b0c <_ZN14ExFatPartition9cacheSyncEv>
 23f4d60:	2800      	cmp	r0, #0
 23f4d62:	d1ea      	bne.n	23f4d3a <_ZN9ExFatFile4syncEv+0xa>
  m_error |= WRITE_ERROR;
 23f4d64:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 23f4d68:	f043 0301 	orr.w	r3, r3, #1
 23f4d6c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return false;
 23f4d70:	e7e4      	b.n	23f4d3c <_ZN9ExFatFile4syncEv+0xc>

023f4d72 <_ZN9ExFatFile13addDirClusterEv>:
bool ExFatFile::addDirCluster() {
 23f4d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
 23f4d74:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
 23f4d78:	4604      	mov	r4, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
 23f4d7a:	065a      	lsls	r2, r3, #25
 23f4d7c:	d52e      	bpl.n	23f4ddc <_ZN9ExFatFile13addDirClusterEv+0x6a>
 23f4d7e:	6a00      	ldr	r0, [r0, #32]
 23f4d80:	f000 fc58 	bl	23f5634 <_ZN14ExFatPartition10rootLengthEv>
  uint32_t bytesPerCluster() const { return m_bytesPerCluster; }
 23f4d84:	6a23      	ldr	r3, [r4, #32]
  dl += m_vol->bytesPerCluster();
 23f4d86:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 23f4d8a:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
 23f4d8c:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 23f4d90:	d247      	bcs.n	23f4e22 <_ZN9ExFatFile13addDirClusterEv+0xb0>
  if (!addCluster()) {
 23f4d92:	4620      	mov	r0, r4
 23f4d94:	f7ff fecc 	bl	23f4b30 <_ZN9ExFatFile10addClusterEv>
 23f4d98:	2800      	cmp	r0, #0
 23f4d9a:	d042      	beq.n	23f4e22 <_ZN9ExFatFile13addDirClusterEv+0xb0>
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
 23f4d9c:	2600      	movs	r6, #0
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
 23f4d9e:	2701      	movs	r7, #1
  sector = m_vol->clusterStartSector(m_curCluster);
 23f4da0:	6a23      	ldr	r3, [r4, #32]
           ((cluster - 2) << m_sectorsPerClusterShift);
 23f4da2:	69a5      	ldr	r5, [r4, #24]
 23f4da4:	f893 2445 	ldrb.w	r2, [r3, #1093]	; 0x445
 23f4da8:	3d02      	subs	r5, #2
 23f4daa:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 23f4dae:	4095      	lsls	r5, r2
 23f4db0:	441d      	add	r5, r3
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
 23f4db2:	6a20      	ldr	r0, [r4, #32]
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
 23f4db4:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
 23f4db8:	fa07 f303 	lsl.w	r3, r7, r3
 23f4dbc:	42b3      	cmp	r3, r6
 23f4dbe:	d90f      	bls.n	23f4de0 <_ZN9ExFatFile13addDirClusterEv+0x6e>
    return m_dataCache.prepare(sector, option);
 23f4dc0:	2205      	movs	r2, #5
 23f4dc2:	19a9      	adds	r1, r5, r6
 23f4dc4:	f500 7004 	add.w	r0, r0, #528	; 0x210
 23f4dc8:	f000 feef 	bl	23f5baa <_ZN7FsCache7prepareEmh>
    if (!cache) {
 23f4dcc:	b348      	cbz	r0, 23f4e22 <_ZN9ExFatFile13addDirClusterEv+0xb0>
    memset(cache, 0, m_vol->bytesPerSector());
 23f4dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 23f4dd2:	2100      	movs	r1, #0
 23f4dd4:	f007 fc93 	bl	23fc6fe <memset>
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
 23f4dd8:	3601      	adds	r6, #1
 23f4dda:	e7ea      	b.n	23f4db2 <_ZN9ExFatFile13addDirClusterEv+0x40>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
 23f4ddc:	6880      	ldr	r0, [r0, #8]
 23f4dde:	e7d1      	b.n	23f4d84 <_ZN9ExFatFile13addDirClusterEv+0x12>
  if (!isRoot()) {
 23f4de0:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 23f4de4:	065b      	lsls	r3, r3, #25
 23f4de6:	d417      	bmi.n	23f4e18 <_ZN9ExFatFile13addDirClusterEv+0xa6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
 23f4de8:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 23f4dec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 23f4df0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength += m_vol->bytesPerCluster();
 23f4df4:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
 23f4df8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 23f4dfc:	185b      	adds	r3, r3, r1
 23f4dfe:	f142 0200 	adc.w	r2, r2, #0
 23f4e02:	e9c4 3202 	strd	r3, r2, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
 23f4e06:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 23f4e0a:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
 23f4e0e:	185b      	adds	r3, r3, r1
 23f4e10:	f142 0200 	adc.w	r2, r2, #0
 23f4e14:	e9c4 3204 	strd	r3, r2, [r4, #16]
  return sync();
 23f4e18:	4620      	mov	r0, r4
}
 23f4e1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return sync();
 23f4e1e:	f7ff bf87 	b.w	23f4d30 <_ZN9ExFatFile4syncEv>
}
 23f4e22:	2000      	movs	r0, #0
 23f4e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f4e26 <_ZN9ExFatFile5mkdirEPS_P8ExName_t>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
 23f4e26:	b510      	push	{r4, lr}
  if (!parent->isDir()) {
 23f4e28:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
 23f4e2c:	4604      	mov	r4, r0
  if (!parent->isDir()) {
 23f4e2e:	f013 0f50 	tst.w	r3, #80	; 0x50
 23f4e32:	d01a      	beq.n	23f4e6a <_ZN9ExFatFile5mkdirEPS_P8ExName_t+0x44>
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
 23f4e34:	f640 2302 	movw	r3, #2562	; 0xa02
 23f4e38:	f7ff fc46 	bl	23f46c8 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti>
 23f4e3c:	b1a8      	cbz	r0, 23f4e6a <_ZN9ExFatFile5mkdirEPS_P8ExName_t+0x44>
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
 23f4e3e:	2330      	movs	r3, #48	; 0x30
  if (!addDirCluster()) {
 23f4e40:	4620      	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
 23f4e42:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
 23f4e46:	f7ff ff94 	bl	23f4d72 <_ZN9ExFatFile13addDirClusterEv>
 23f4e4a:	b170      	cbz	r0, 23f4e6a <_ZN9ExFatFile5mkdirEPS_P8ExName_t+0x44>
  m_firstCluster = m_curCluster;
 23f4e4c:	69a3      	ldr	r3, [r4, #24]
  void rewind() { seekSet(0); }
 23f4e4e:	4620      	mov	r0, r4
 23f4e50:	61e3      	str	r3, [r4, #28]
 23f4e52:	2200      	movs	r2, #0
 23f4e54:	2300      	movs	r3, #0
 23f4e56:	f7ff fbc8 	bl	23f45ea <_ZN9ExFatFile7seekSetEy>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
 23f4e5a:	23c1      	movs	r3, #193	; 0xc1
  return sync();
 23f4e5c:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
 23f4e5e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
 23f4e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return sync();
 23f4e66:	f7ff bf63 	b.w	23f4d30 <_ZN9ExFatFile4syncEv>
}
 23f4e6a:	2000      	movs	r0, #0
 23f4e6c:	bd10      	pop	{r4, pc}

023f4e6e <_ZN9ExFatFile5mkdirEPS_PKcb>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
 23f4e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f4e72:	4698      	mov	r8, r3
  ExFatFile() {}
 23f4e74:	2300      	movs	r3, #0
 23f4e76:	b096      	sub	sp, #88	; 0x58
 23f4e78:	9314      	str	r3, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
 23f4e7a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
 23f4e7e:	4605      	mov	r5, r0
 23f4e80:	460c      	mov	r4, r1
 23f4e82:	9201      	str	r2, [sp, #4]
  if (isOpen() || !parent->isDir()) {
 23f4e84:	b11b      	cbz	r3, 23f4e8e <_ZN9ExFatFile5mkdirEPS_PKcb+0x20>
  return false;
 23f4e86:	2000      	movs	r0, #0
}
 23f4e88:	b016      	add	sp, #88	; 0x58
 23f4e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isOpen() || !parent->isDir()) {
 23f4e8e:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 23f4e92:	f013 0f50 	tst.w	r3, #80	; 0x50
 23f4e96:	d0f6      	beq.n	23f4e86 <_ZN9ExFatFile5mkdirEPS_PKcb+0x18>
  if (isDirSeparator(*path)) {
 23f4e98:	7813      	ldrb	r3, [r2, #0]
 23f4e9a:	2b2f      	cmp	r3, #47	; 0x2f
 23f4e9c:	d10d      	bne.n	23f4eba <_ZN9ExFatFile5mkdirEPS_PKcb+0x4c>
    while (isDirSeparator(*path)) {
 23f4e9e:	9a01      	ldr	r2, [sp, #4]
 23f4ea0:	7813      	ldrb	r3, [r2, #0]
 23f4ea2:	2b2f      	cmp	r3, #47	; 0x2f
 23f4ea4:	d102      	bne.n	23f4eac <_ZN9ExFatFile5mkdirEPS_PKcb+0x3e>
      path++;
 23f4ea6:	3201      	adds	r2, #1
 23f4ea8:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
 23f4eaa:	e7f8      	b.n	23f4e9e <_ZN9ExFatFile5mkdirEPS_PKcb+0x30>
    if (!tmpDir.openRoot(parent->m_vol)) {
 23f4eac:	6a21      	ldr	r1, [r4, #32]
 23f4eae:	a808      	add	r0, sp, #32
 23f4eb0:	f7ff fa72 	bl	23f4398 <_ZN9ExFatFile8openRootEP11ExFatVolume>
 23f4eb4:	2800      	cmp	r0, #0
 23f4eb6:	d0e6      	beq.n	23f4e86 <_ZN9ExFatFile5mkdirEPS_PKcb+0x18>
    parent = &tmpDir;
 23f4eb8:	ac08      	add	r4, sp, #32
    if (!parsePathName(path, &fname, &path)) {
 23f4eba:	4628      	mov	r0, r5
 23f4ebc:	9901      	ldr	r1, [sp, #4]
 23f4ebe:	ab01      	add	r3, sp, #4
 23f4ec0:	aa03      	add	r2, sp, #12
 23f4ec2:	f7ff fa7d 	bl	23f43c0 <_ZN9ExFatFile13parsePathNameEPKcP8ExName_tPS1_>
 23f4ec6:	2800      	cmp	r0, #0
 23f4ec8:	d0dd      	beq.n	23f4e86 <_ZN9ExFatFile5mkdirEPS_PKcb+0x18>
    if (!*path) {
 23f4eca:	9b01      	ldr	r3, [sp, #4]
 23f4ecc:	781b      	ldrb	r3, [r3, #0]
 23f4ece:	b323      	cbz	r3, 23f4f1a <_ZN9ExFatFile5mkdirEPS_PKcb+0xac>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
 23f4ed0:	2300      	movs	r3, #0
 23f4ed2:	4621      	mov	r1, r4
 23f4ed4:	4628      	mov	r0, r5
 23f4ed6:	aa03      	add	r2, sp, #12
 23f4ed8:	f7ff fbf6 	bl	23f46c8 <_ZN9ExFatFile11openPrivateEPS_P8ExName_ti>
 23f4edc:	b190      	cbz	r0, 23f4f04 <_ZN9ExFatFile5mkdirEPS_PKcb+0x96>
      *this = *from;
 23f4ede:	ae08      	add	r6, sp, #32
 23f4ee0:	462a      	mov	r2, r5
 23f4ee2:	4634      	mov	r4, r6
 23f4ee4:	f105 0330 	add.w	r3, r5, #48	; 0x30
 23f4ee8:	4637      	mov	r7, r6
 23f4eea:	6810      	ldr	r0, [r2, #0]
 23f4eec:	6851      	ldr	r1, [r2, #4]
 23f4eee:	3208      	adds	r2, #8
 23f4ef0:	c703      	stmia	r7!, {r0, r1}
 23f4ef2:	429a      	cmp	r2, r3
 23f4ef4:	463e      	mov	r6, r7
 23f4ef6:	d1f7      	bne.n	23f4ee8 <_ZN9ExFatFile5mkdirEPS_PKcb+0x7a>
 23f4ef8:	6810      	ldr	r0, [r2, #0]
 23f4efa:	6038      	str	r0, [r7, #0]
    close();
 23f4efc:	4628      	mov	r0, r5
 23f4efe:	f7ff fa41 	bl	23f4384 <_ZN9ExFatFile5closeEv>
    if (!parsePathName(path, &fname, &path)) {
 23f4f02:	e7da      	b.n	23f4eba <_ZN9ExFatFile5mkdirEPS_PKcb+0x4c>
      if (!pFlag || !mkdir(parent, &fname)) {
 23f4f04:	f1b8 0f00 	cmp.w	r8, #0
 23f4f08:	d0bd      	beq.n	23f4e86 <_ZN9ExFatFile5mkdirEPS_PKcb+0x18>
 23f4f0a:	4621      	mov	r1, r4
 23f4f0c:	4628      	mov	r0, r5
 23f4f0e:	aa03      	add	r2, sp, #12
 23f4f10:	f7ff ff89 	bl	23f4e26 <_ZN9ExFatFile5mkdirEPS_P8ExName_t>
 23f4f14:	2800      	cmp	r0, #0
 23f4f16:	d1e2      	bne.n	23f4ede <_ZN9ExFatFile5mkdirEPS_PKcb+0x70>
 23f4f18:	e7b5      	b.n	23f4e86 <_ZN9ExFatFile5mkdirEPS_PKcb+0x18>
  return mkdir(parent, &fname);
 23f4f1a:	4621      	mov	r1, r4
 23f4f1c:	4628      	mov	r0, r5
 23f4f1e:	aa03      	add	r2, sp, #12
 23f4f20:	f7ff ff81 	bl	23f4e26 <_ZN9ExFatFile5mkdirEPS_P8ExName_t>
 23f4f24:	e7b0      	b.n	23f4e88 <_ZN9ExFatFile5mkdirEPS_PKcb+0x1a>

023f4f26 <_ZN9ExFatFile8truncateEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
 23f4f26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
 23f4f28:	f890 2033 	ldrb.w	r2, [r0, #51]	; 0x33
 23f4f2c:	4604      	mov	r4, r0
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
 23f4f2e:	0793      	lsls	r3, r2, #30
 23f4f30:	d402      	bmi.n	23f4f38 <_ZN9ExFatFile8truncateEv+0x12>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
 23f4f32:	2000      	movs	r0, #0
}
 23f4f34:	b003      	add	sp, #12
 23f4f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (m_firstCluster == 0) {
 23f4f38:	69c3      	ldr	r3, [r0, #28]
 23f4f3a:	2b00      	cmp	r3, #0
 23f4f3c:	d056      	beq.n	23f4fec <_ZN9ExFatFile8truncateEv+0xc6>
  if (isContiguous()) {
 23f4f3e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    if (m_curCluster) {
 23f4f42:	6981      	ldr	r1, [r0, #24]
  if (isContiguous()) {
 23f4f44:	d037      	beq.n	23f4fb6 <_ZN9ExFatFile8truncateEv+0x90>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
 23f4f46:	e9d4 2602 	ldrd	r2, r6, [r4, #8]
 23f4f4a:	6a00      	ldr	r0, [r0, #32]
 23f4f4c:	3a01      	subs	r2, #1
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
 23f4f4e:	f890 5445 	ldrb.w	r5, [r0, #1093]	; 0x445
 23f4f52:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
 23f4f56:	3509      	adds	r5, #9
 23f4f58:	b2ed      	uxtb	r5, r5
 23f4f5a:	f1c5 0c20 	rsb	ip, r5, #32
 23f4f5e:	f1a5 0720 	sub.w	r7, r5, #32
 23f4f62:	40ea      	lsrs	r2, r5
 23f4f64:	fa06 fc0c 	lsl.w	ip, r6, ip
 23f4f68:	ea42 020c 	orr.w	r2, r2, ip
 23f4f6c:	fa26 f707 	lsr.w	r7, r6, r7
 23f4f70:	433a      	orrs	r2, r7
 23f4f72:	3201      	adds	r2, #1
    if (m_curCluster) {
 23f4f74:	b1a9      	cbz	r1, 23f4fa2 <_ZN9ExFatFile8truncateEv+0x7c>
      nc -= 1 + m_curCluster - m_firstCluster;
 23f4f76:	3b01      	subs	r3, #1
      toFree = m_curCluster + 1;
 23f4f78:	1c4d      	adds	r5, r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
 23f4f7a:	1a5b      	subs	r3, r3, r1
      toFree = m_curCluster + 1;
 23f4f7c:	9501      	str	r5, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
 23f4f7e:	441a      	add	r2, r3
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
 23f4f80:	b992      	cbnz	r2, 23f4fa8 <_ZN9ExFatFile8truncateEv+0x82>
  m_dataLength = m_curPosition;
 23f4f82:	e9d4 2300 	ldrd	r2, r3, [r4]
 23f4f86:	e9c4 2302 	strd	r2, r3, [r4, #8]
  m_validLength = m_curPosition;
 23f4f8a:	e9c4 2304 	strd	r2, r3, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
 23f4f8e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  return sync();
 23f4f92:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_DIR_DIRTY;
 23f4f94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 23f4f98:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return sync();
 23f4f9c:	f7ff fec8 	bl	23f4d30 <_ZN9ExFatFile4syncEv>
 23f4fa0:	e7c8      	b.n	23f4f34 <_ZN9ExFatFile8truncateEv+0xe>
      toFree = m_firstCluster;
 23f4fa2:	9301      	str	r3, [sp, #4]
      m_firstCluster = 0;
 23f4fa4:	61e1      	str	r1, [r4, #28]
 23f4fa6:	e7eb      	b.n	23f4f80 <_ZN9ExFatFile8truncateEv+0x5a>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
 23f4fa8:	2300      	movs	r3, #0
 23f4faa:	9901      	ldr	r1, [sp, #4]
 23f4fac:	f000 f9ca 	bl	23f5344 <_ZN14ExFatPartition12bitmapModifyEmmb>
      if (!m_vol->freeChain(toFree)) {
 23f4fb0:	2800      	cmp	r0, #0
 23f4fb2:	d1e6      	bne.n	23f4f82 <_ZN9ExFatFile8truncateEv+0x5c>
 23f4fb4:	e7bd      	b.n	23f4f32 <_ZN9ExFatFile8truncateEv+0xc>
    if (m_curCluster) {
 23f4fb6:	b1b1      	cbz	r1, 23f4fe6 <_ZN9ExFatFile8truncateEv+0xc0>
      toFree = 0;
 23f4fb8:	9201      	str	r2, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
 23f4fba:	6a00      	ldr	r0, [r0, #32]
 23f4fbc:	aa01      	add	r2, sp, #4
 23f4fbe:	f000 fa2b 	bl	23f5418 <_ZN14ExFatPartition6fatGetEmPm>
      if (fg < 0) {
 23f4fc2:	2800      	cmp	r0, #0
 23f4fc4:	dbb5      	blt.n	23f4f32 <_ZN9ExFatFile8truncateEv+0xc>
      if (fg) {
 23f4fc6:	d007      	beq.n	23f4fd8 <_ZN9ExFatFile8truncateEv+0xb2>
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
 23f4fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f4fcc:	69a1      	ldr	r1, [r4, #24]
 23f4fce:	6a20      	ldr	r0, [r4, #32]
 23f4fd0:	f000 fa75 	bl	23f54be <_ZN14ExFatPartition6fatPutEmm>
 23f4fd4:	2800      	cmp	r0, #0
 23f4fd6:	d0ac      	beq.n	23f4f32 <_ZN9ExFatFile8truncateEv+0xc>
    if (toFree) {
 23f4fd8:	9901      	ldr	r1, [sp, #4]
 23f4fda:	2900      	cmp	r1, #0
 23f4fdc:	d0d1      	beq.n	23f4f82 <_ZN9ExFatFile8truncateEv+0x5c>
      if (!m_vol->freeChain(toFree)) {
 23f4fde:	6a20      	ldr	r0, [r4, #32]
 23f4fe0:	f000 fa8a 	bl	23f54f8 <_ZN14ExFatPartition9freeChainEm>
 23f4fe4:	e7e4      	b.n	23f4fb0 <_ZN9ExFatFile8truncateEv+0x8a>
      toFree = m_firstCluster;
 23f4fe6:	9301      	str	r3, [sp, #4]
      m_firstCluster = 0;
 23f4fe8:	61c1      	str	r1, [r0, #28]
 23f4fea:	e7f5      	b.n	23f4fd8 <_ZN9ExFatFile8truncateEv+0xb2>
    return true;
 23f4fec:	2001      	movs	r0, #1
 23f4fee:	e7a1      	b.n	23f4f34 <_ZN9ExFatFile8truncateEv+0xe>

023f4ff0 <_ZN9ExFatFile5writeEPKvj>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
 23f4ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f4ff4:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 23f4ff8:	4688      	mov	r8, r1

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
 23f4ffa:	0799      	lsls	r1, r3, #30
size_t ExFatFile::write(const void* buf, size_t nbyte) {
 23f4ffc:	4604      	mov	r4, r0
 23f4ffe:	4691      	mov	r9, r2
  if (!isWritable()) {
 23f5000:	d566      	bpl.n	23f50d0 <_ZN9ExFatFile5writeEPKvj+0xe0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
 23f5002:	071a      	lsls	r2, r3, #28
 23f5004:	d45e      	bmi.n	23f50c4 <_ZN9ExFatFile5writeEPKvj+0xd4>
size_t ExFatFile::write(const void* buf, size_t nbyte) {
 23f5006:	464f      	mov	r7, r9
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
 23f5008:	f04f 0b01 	mov.w	fp, #1
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f500c:	f104 0a18 	add.w	sl, r4, #24
    clusterOffset = m_curPosition & m_vol->clusterMask();
 23f5010:	e9d4 5300 	ldrd	r5, r3, [r4]
  while (toWrite) {
 23f5014:	2f00      	cmp	r7, #0
 23f5016:	f000 80d9 	beq.w	23f51cc <_ZN9ExFatFile5writeEPKvj+0x1dc>
    clusterOffset = m_curPosition & m_vol->clusterMask();
 23f501a:	6a20      	ldr	r0, [r4, #32]
 23f501c:	f8d0 1438 	ldr.w	r1, [r0, #1080]	; 0x438
 23f5020:	400d      	ands	r5, r1
    sectorOffset = clusterOffset & m_vol->sectorMask();
 23f5022:	f3c5 0608 	ubfx	r6, r5, #0, #9
    if (clusterOffset == 0) {
 23f5026:	bb2d      	cbnz	r5, 23f5074 <_ZN9ExFatFile5writeEPKvj+0x84>
      if (m_curCluster != 0) {
 23f5028:	69a1      	ldr	r1, [r4, #24]
 23f502a:	2900      	cmp	r1, #0
 23f502c:	d063      	beq.n	23f50f6 <_ZN9ExFatFile5writeEPKvj+0x106>
        if (isContiguous()) {
 23f502e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 23f5032:	065b      	lsls	r3, r3, #25
 23f5034:	d558      	bpl.n	23f50e8 <_ZN9ExFatFile5writeEPKvj+0xf8>
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
 23f5036:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 23f503a:	f890 0445 	ldrb.w	r0, [r0, #1093]	; 0x445
 23f503e:	3b01      	subs	r3, #1
 23f5040:	f100 0009 	add.w	r0, r0, #9
 23f5044:	b2c0      	uxtb	r0, r0
 23f5046:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
 23f504a:	f1c0 0e20 	rsb	lr, r0, #32
 23f504e:	fa02 fe0e 	lsl.w	lr, r2, lr
 23f5052:	f1a0 0c20 	sub.w	ip, r0, #32
 23f5056:	40c3      	lsrs	r3, r0
 23f5058:	fa22 fc0c 	lsr.w	ip, r2, ip
 23f505c:	ea43 030e 	orr.w	r3, r3, lr
 23f5060:	69e2      	ldr	r2, [r4, #28]
 23f5062:	ea43 030c 	orr.w	r3, r3, ip
 23f5066:	4413      	add	r3, r2
          if (m_curCluster < lc) {
 23f5068:	428b      	cmp	r3, r1
 23f506a:	d83a      	bhi.n	23f50e2 <_ZN9ExFatFile5writeEPKvj+0xf2>
          if (!addCluster()) {
 23f506c:	4620      	mov	r0, r4
 23f506e:	f7ff fd5f 	bl	23f4b30 <_ZN9ExFatFile10addClusterEv>
 23f5072:	b368      	cbz	r0, 23f50d0 <_ZN9ExFatFile5writeEPKvj+0xe0>
    sector = m_vol->clusterStartSector(m_curCluster) +
 23f5074:	6a20      	ldr	r0, [r4, #32]
           ((cluster - 2) << m_sectorsPerClusterShift);
 23f5076:	69a1      	ldr	r1, [r4, #24]
 23f5078:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
 23f507c:	3902      	subs	r1, #2
 23f507e:	4091      	lsls	r1, r2
             (clusterOffset >> m_vol->bytesPerSectorShift());
 23f5080:	ea4f 2e55 	mov.w	lr, r5, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
 23f5084:	eb01 2555 	add.w	r5, r1, r5, lsr #9
 23f5088:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
 23f508c:	4429      	add	r1, r5
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
 23f508e:	2e00      	cmp	r6, #0
 23f5090:	d13d      	bne.n	23f510e <_ZN9ExFatFile5writeEPKvj+0x11e>
 23f5092:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 23f5096:	d33a      	bcc.n	23f510e <_ZN9ExFatFile5writeEPKvj+0x11e>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2 * m_vol->bytesPerSector()) {
 23f5098:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 23f509c:	f8d0 c218 	ldr.w	ip, [r0, #536]	; 0x218
 23f50a0:	d279      	bcs.n	23f5196 <_ZN9ExFatFile5writeEPKvj+0x1a6>
    if (isCached(sector)) {
 23f50a2:	4561      	cmp	r1, ip
    m_sector = 0XFFFFFFFF;
 23f50a4:	bf02      	ittt	eq
 23f50a6:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
 23f50aa:	f880 6210 	strbeq.w	r6, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
 23f50ae:	f8c0 3218 	streq.w	r3, [r0, #536]	; 0x218
    return m_blockDev->writeSector(sector, src);
 23f50b2:	4642      	mov	r2, r8
 23f50b4:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 23f50b8:	f7fe fecb 	bl	23f3e52 <_ZN9SdSpiCard11writeSectorEmPKh>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
 23f50bc:	b140      	cbz	r0, 23f50d0 <_ZN9ExFatFile5writeEPKvj+0xe0>
      n = m_vol->bytesPerSector();
 23f50be:	f44f 7500 	mov.w	r5, #512	; 0x200
 23f50c2:	e04d      	b.n	23f5160 <_ZN9ExFatFile5writeEPKvj+0x170>
    if (!seekSet(m_validLength)) {
 23f50c4:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 23f50c8:	f7ff fa8f 	bl	23f45ea <_ZN9ExFatFile7seekSetEy>
 23f50cc:	2800      	cmp	r0, #0
 23f50ce:	d19a      	bne.n	23f5006 <_ZN9ExFatFile5writeEPKvj+0x16>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 23f50d0:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
 23f50d4:	f04f 0900 	mov.w	r9, #0
  m_error |= WRITE_ERROR;
 23f50d8:	f043 0301 	orr.w	r3, r3, #1
 23f50dc:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return 0;
 23f50e0:	e086      	b.n	23f51f0 <_ZN9ExFatFile5writeEPKvj+0x200>
            m_curCluster++;
 23f50e2:	3101      	adds	r1, #1
 23f50e4:	61a1      	str	r1, [r4, #24]
        if (fg == 0) {
 23f50e6:	e7c5      	b.n	23f5074 <_ZN9ExFatFile5writeEPKvj+0x84>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 23f50e8:	4652      	mov	r2, sl
 23f50ea:	f000 f995 	bl	23f5418 <_ZN14ExFatPartition6fatGetEmPm>
          if (fg < 0) {
 23f50ee:	2800      	cmp	r0, #0
 23f50f0:	dbee      	blt.n	23f50d0 <_ZN9ExFatFile5writeEPKvj+0xe0>
        if (fg == 0) {
 23f50f2:	d0bb      	beq.n	23f506c <_ZN9ExFatFile5writeEPKvj+0x7c>
 23f50f4:	e7be      	b.n	23f5074 <_ZN9ExFatFile5writeEPKvj+0x84>
        if (m_firstCluster == 0) {
 23f50f6:	69e3      	ldr	r3, [r4, #28]
 23f50f8:	b93b      	cbnz	r3, 23f510a <_ZN9ExFatFile5writeEPKvj+0x11a>
          if (!addCluster()) {
 23f50fa:	4620      	mov	r0, r4
 23f50fc:	f7ff fd18 	bl	23f4b30 <_ZN9ExFatFile10addClusterEv>
 23f5100:	2800      	cmp	r0, #0
 23f5102:	d0e5      	beq.n	23f50d0 <_ZN9ExFatFile5writeEPKvj+0xe0>
          m_firstCluster = m_curCluster;
 23f5104:	69a3      	ldr	r3, [r4, #24]
 23f5106:	61e3      	str	r3, [r4, #28]
 23f5108:	e7b4      	b.n	23f5074 <_ZN9ExFatFile5writeEPKvj+0x84>
          m_curCluster = m_firstCluster;
 23f510a:	61a3      	str	r3, [r4, #24]
 23f510c:	e7b2      	b.n	23f5074 <_ZN9ExFatFile5writeEPKvj+0x84>
      n = m_vol->bytesPerSector() - sectorOffset;
 23f510e:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
      if (n > toWrite) {
 23f5112:	42bd      	cmp	r5, r7
 23f5114:	bf28      	it	cs
 23f5116:	463d      	movcs	r5, r7
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
 23f5118:	2e00      	cmp	r6, #0
 23f511a:	d13a      	bne.n	23f5192 <_ZN9ExFatFile5writeEPKvj+0x1a2>
 23f511c:	6963      	ldr	r3, [r4, #20]
 23f511e:	6862      	ldr	r2, [r4, #4]
 23f5120:	9301      	str	r3, [sp, #4]
 23f5122:	6823      	ldr	r3, [r4, #0]
 23f5124:	469c      	mov	ip, r3
 23f5126:	6923      	ldr	r3, [r4, #16]
 23f5128:	459c      	cmp	ip, r3
 23f512a:	9b01      	ldr	r3, [sp, #4]
 23f512c:	eb72 0303 	sbcs.w	r3, r2, r3
 23f5130:	d32f      	bcc.n	23f5192 <_ZN9ExFatFile5writeEPKvj+0x1a2>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
 23f5132:	2205      	movs	r2, #5
    return m_dataCache.prepare(sector, option);
 23f5134:	f500 7004 	add.w	r0, r0, #528	; 0x210
 23f5138:	f000 fd37 	bl	23f5baa <_ZN7FsCache7prepareEmh>
      if (!cache) {
 23f513c:	2800      	cmp	r0, #0
 23f513e:	d0c7      	beq.n	23f50d0 <_ZN9ExFatFile5writeEPKvj+0xe0>
      memcpy(dst, src, n);
 23f5140:	4430      	add	r0, r6
 23f5142:	462a      	mov	r2, r5
 23f5144:	4641      	mov	r1, r8
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
 23f5146:	442e      	add	r6, r5
      memcpy(dst, src, n);
 23f5148:	f007 facc 	bl	23fc6e4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
 23f514c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23f5150:	d106      	bne.n	23f5160 <_ZN9ExFatFile5writeEPKvj+0x170>
  bool dataCacheSync() { return m_dataCache.sync(); }
 23f5152:	6a20      	ldr	r0, [r4, #32]
 23f5154:	f500 7004 	add.w	r0, r0, #528	; 0x210
 23f5158:	f000 fd01 	bl	23f5b5e <_ZN7FsCache4syncEv>
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
 23f515c:	2800      	cmp	r0, #0
 23f515e:	d0b7      	beq.n	23f50d0 <_ZN9ExFatFile5writeEPKvj+0xe0>
    m_curPosition += n;
 23f5160:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
 23f5164:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
 23f5168:	18eb      	adds	r3, r5, r3
 23f516a:	f142 0200 	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
 23f516e:	4298      	cmp	r0, r3
 23f5170:	4191      	sbcs	r1, r2
    m_curPosition += n;
 23f5172:	e9c4 3200 	strd	r3, r2, [r4]
    src += n;
 23f5176:	44a8      	add	r8, r5
    toWrite -= n;
 23f5178:	eba7 0705 	sub.w	r7, r7, r5
    if (m_curPosition > m_validLength) {
 23f517c:	f4bf af48 	bcs.w	23f5010 <_ZN9ExFatFile5writeEPKvj+0x20>
      m_flags |= FILE_FLAG_DIR_DIRTY;
 23f5180:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
 23f5184:	e9c4 3204 	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
 23f5188:	f061 017f 	orn	r1, r1, #127	; 0x7f
 23f518c:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
 23f5190:	e73e      	b.n	23f5010 <_ZN9ExFatFile5writeEPKvj+0x20>
        cacheOption = FsCache::CACHE_FOR_WRITE;
 23f5192:	2201      	movs	r2, #1
 23f5194:	e7ce      	b.n	23f5134 <_ZN9ExFatFile5writeEPKvj+0x144>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
 23f5196:	fa0b f302 	lsl.w	r3, fp, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
 23f519a:	0a7d      	lsrs	r5, r7, #9
                       (clusterOffset >> m_vol->bytesPerSectorShift());
 23f519c:	eba3 030e 	sub.w	r3, r3, lr
 23f51a0:	42ab      	cmp	r3, r5
 23f51a2:	bf28      	it	cs
 23f51a4:	462b      	movcs	r3, r5
    return sector <= m_sector && m_sector < (sector + count);
 23f51a6:	4561      	cmp	r1, ip
      n = ns << m_vol->bytesPerSectorShift();
 23f51a8:	ea4f 2543 	mov.w	r5, r3, lsl #9
 23f51ac:	d808      	bhi.n	23f51c0 <_ZN9ExFatFile5writeEPKvj+0x1d0>
 23f51ae:	18ca      	adds	r2, r1, r3
 23f51b0:	4562      	cmp	r2, ip
    m_sector = 0XFFFFFFFF;
 23f51b2:	bf82      	ittt	hi
 23f51b4:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
 23f51b8:	f880 6210 	strbhi.w	r6, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
 23f51bc:	f8c0 2218 	strhi.w	r2, [r0, #536]	; 0x218
    return m_blockDev->writeSectors(sector, src, count);
 23f51c0:	4642      	mov	r2, r8
 23f51c2:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 23f51c6:	f7fe fe16 	bl	23f3df6 <_ZN9SdSpiCard12writeSectorsEmPKhj>
 23f51ca:	e7c7      	b.n	23f515c <_ZN9ExFatFile5writeEPKvj+0x16c>
  if (m_curPosition > m_dataLength) {
 23f51cc:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 23f51d0:	42a9      	cmp	r1, r5
 23f51d2:	419a      	sbcs	r2, r3
 23f51d4:	d208      	bcs.n	23f51e8 <_ZN9ExFatFile5writeEPKvj+0x1f8>
    m_dataLength = m_curPosition;
 23f51d6:	e9c4 5302 	strd	r5, r3, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
 23f51da:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 23f51de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 23f51e2:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 23f51e6:	e003      	b.n	23f51f0 <_ZN9ExFatFile5writeEPKvj+0x200>
  } else if (FsDateTime::callback) {
 23f51e8:	4b03      	ldr	r3, [pc, #12]	; (23f51f8 <_ZN9ExFatFile5writeEPKvj+0x208>)
 23f51ea:	681b      	ldr	r3, [r3, #0]
 23f51ec:	2b00      	cmp	r3, #0
 23f51ee:	d1f4      	bne.n	23f51da <_ZN9ExFatFile5writeEPKvj+0x1ea>
}
 23f51f0:	4648      	mov	r0, r9
 23f51f2:	b003      	add	sp, #12
 23f51f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f51f8:	1007aea8 	.word	0x1007aea8

023f51fc <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
 23f51fc:	b570      	push	{r4, r5, r6, lr}
  bool atEnd() { return next == end; }
 23f51fe:	6895      	ldr	r5, [r2, #8]
 23f5200:	f101 041e 	add.w	r4, r1, #30
 23f5204:	6853      	ldr	r3, [r2, #4]
  return *reinterpret_cast<const uint16_t*>(src);
 23f5206:	f831 0f02 	ldrh.w	r0, [r1, #2]!
  for (uint8_t i = 0; i < 15; i++) {
    uint16_t u = getLe16(dirName->unicode + 2 * i);
    if (fname->atEnd()) {
 23f520a:	429d      	cmp	r5, r3
 23f520c:	d103      	bne.n	23f5216 <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t+0x1a>
      return u == 0;
 23f520e:	fab0 f080 	clz	r0, r0
 23f5212:	0940      	lsrs	r0, r0, #5
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
}
 23f5214:	bd70      	pop	{r4, r5, r6, pc}
  char getch() { return atEnd() ? 0 : *next++; }
 23f5216:	1c5e      	adds	r6, r3, #1
 23f5218:	6056      	str	r6, [r2, #4]
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
 23f521a:	287e      	cmp	r0, #126	; 0x7e
 23f521c:	781b      	ldrb	r3, [r3, #0]
 23f521e:	d813      	bhi.n	23f5248 <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t+0x4c>
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
 23f5220:	f1a3 0661 	sub.w	r6, r3, #97	; 0x61
 23f5224:	2e19      	cmp	r6, #25
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
 23f5226:	b2c0      	uxtb	r0, r0
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
 23f5228:	bf98      	it	ls
 23f522a:	3b20      	subls	r3, #32
 23f522c:	f1a0 0661 	sub.w	r6, r0, #97	; 0x61
 23f5230:	bf98      	it	ls
 23f5232:	b2db      	uxtbls	r3, r3
 23f5234:	2e19      	cmp	r6, #25
 23f5236:	bf9c      	itt	ls
 23f5238:	3820      	subls	r0, #32
 23f523a:	b2c0      	uxtbls	r0, r0
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
 23f523c:	4298      	cmp	r0, r3
 23f523e:	d103      	bne.n	23f5248 <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t+0x4c>
  for (uint8_t i = 0; i < 15; i++) {
 23f5240:	42a1      	cmp	r1, r4
 23f5242:	d1df      	bne.n	23f5204 <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t+0x8>
  return true;
 23f5244:	2001      	movs	r0, #1
 23f5246:	e7e5      	b.n	23f5214 <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t+0x18>
      return false;
 23f5248:	2000      	movs	r0, #0
 23f524a:	e7e3      	b.n	23f5214 <_ZN9ExFatFile7cmpNameEPK9DirName_tP8ExName_t+0x18>

023f524c <_ZN9ExFatFile8hashNameEP8ExName_t>:
fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
 23f524c:	b530      	push	{r4, r5, lr}
  uint16_t hash = 0;
 23f524e:	2400      	movs	r4, #0
  void reset() { next = begin; }
 23f5250:	680d      	ldr	r5, [r1, #0]
  bool atEnd() { return next == end; }
 23f5252:	6888      	ldr	r0, [r1, #8]
  void reset() { next = begin; }
 23f5254:	604d      	str	r5, [r1, #4]
  bool atEnd() { return next == end; }
 23f5256:	684b      	ldr	r3, [r1, #4]
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
  }
#else   // USE_UTF8_LONG_NAMES
  while (!fname->atEnd()) {
 23f5258:	4283      	cmp	r3, r0
 23f525a:	d015      	beq.n	23f5288 <_ZN9ExFatFile8hashNameEP8ExName_t+0x3c>
  char getch() { return atEnd() ? 0 : *next++; }
 23f525c:	1c5a      	adds	r2, r3, #1
 23f525e:	604a      	str	r2, [r1, #4]
 23f5260:	781a      	ldrb	r2, [r3, #0]
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
 23f5262:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 23f5266:	2b19      	cmp	r3, #25
 23f5268:	bf98      	it	ls
 23f526a:	3a20      	subls	r2, #32
  hash = ((hash << 15) | (hash >> 1)) + u;
 23f526c:	ea4f 0354 	mov.w	r3, r4, lsr #1
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
 23f5270:	bf98      	it	ls
 23f5272:	b2d2      	uxtbls	r2, r2
  hash = ((hash << 15) | (hash >> 1)) + u;
 23f5274:	ea43 33c4 	orr.w	r3, r3, r4, lsl #15
 23f5278:	4413      	add	r3, r2
 23f527a:	b29a      	uxth	r2, r3
  hash = ((hash << 15) | (hash >> 1));
 23f527c:	f3c3 034e 	ubfx	r3, r3, #1, #15
 23f5280:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
 23f5284:	b29c      	uxth	r4, r3
  while (!fname->atEnd()) {
 23f5286:	e7e6      	b.n	23f5256 <_ZN9ExFatFile8hashNameEP8ExName_t+0xa>
    // Convert to byte for smaller exFatHash.
    char c = fname->getch();
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
 23f5288:	1b40      	subs	r0, r0, r5
 23f528a:	60c8      	str	r0, [r1, #12]
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
 23f528c:	3801      	subs	r0, #1
  }
  return true;

fail:
  return false;
}
 23f528e:	28fe      	cmp	r0, #254	; 0xfe
 23f5290:	bf8c      	ite	hi
 23f5292:	2000      	movhi	r0, #0
 23f5294:	2001      	movls	r0, #1
  fname->nameHash = hash;
 23f5296:	820c      	strh	r4, [r1, #16]
}
 23f5298:	bd30      	pop	{r4, r5, pc}

023f529a <_ZN14ExFatPartition10bitmapFindEmm>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
 23f529a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f529e:	4607      	mov	r7, r0
 23f52a0:	4693      	mov	fp, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
 23f52a2:	468a      	mov	sl, r1
 23f52a4:	b369      	cbz	r1, 23f5302 <_ZN14ExFatPartition10bitmapFindEmm+0x68>
 23f52a6:	1e8d      	subs	r5, r1, #2
  if (start >= m_clusterCount) {
 23f52a8:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  const uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
 23f52ac:	2401      	movs	r4, #1
    start = 0;
 23f52ae:	42ab      	cmp	r3, r5
 23f52b0:	bf98      	it	ls
 23f52b2:	2500      	movls	r5, #0
  uint32_t bgnAlloc = start;
 23f52b4:	46a8      	mov	r8, r5
  uint32_t endAlloc = start;
 23f52b6:	462e      	mov	r6, r5
  uint8_t mask = 1 << (start & 7);
 23f52b8:	f005 0307 	and.w	r3, r5, #7
 23f52bc:	409c      	lsls	r4, r3
  size_t i = (start >> 3) & (sectorSize - 1);
 23f52be:	f3c5 09c8 	ubfx	r9, r5, #3, #9
  uint8_t mask = 1 << (start & 7);
 23f52c2:	b2e4      	uxtb	r4, r4
  while (true) {
    uint32_t sector =
 23f52c4:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
 23f52c8:	2200      	movs	r2, #0
 23f52ca:	4638      	mov	r0, r7
 23f52cc:	eb01 3116 	add.w	r1, r1, r6, lsr #12
 23f52d0:	f000 fc6b 	bl	23f5baa <_ZN7FsCache7prepareEmh>
        m_clusterHeapStartSector + (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
 23f52d4:	b198      	cbz	r0, 23f52fe <_ZN14ExFatPartition10bitmapFindEmm+0x64>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
 23f52d6:	f810 3009 	ldrb.w	r3, [r0, r9]
 23f52da:	4223      	tst	r3, r4
        endAlloc++;
 23f52dc:	f106 0601 	add.w	r6, r6, #1
        if (!(mask & cache[i])) {
 23f52e0:	d112      	bne.n	23f5308 <_ZN14ExFatPartition10bitmapFindEmm+0x6e>
          if ((endAlloc - bgnAlloc) == count) {
 23f52e2:	eba6 0208 	sub.w	r2, r6, r8
 23f52e6:	455a      	cmp	r2, fp
 23f52e8:	d10f      	bne.n	23f530a <_ZN14ExFatPartition10bitmapFindEmm+0x70>
            if (cluster == 0 && count == 1) {
 23f52ea:	f1ba 0f00 	cmp.w	sl, #0
 23f52ee:	d104      	bne.n	23f52fa <_ZN14ExFatPartition10bitmapFindEmm+0x60>
 23f52f0:	f1bb 0f01 	cmp.w	fp, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
 23f52f4:	bf08      	it	eq
 23f52f6:	f8c7 8420 	streq.w	r8, [r7, #1056]	; 0x420
            }
            return bgnAlloc + 2;
 23f52fa:	f108 0002 	add.w	r0, r8, #2
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
 23f52fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
 23f5302:	f8d0 5420 	ldr.w	r5, [r0, #1056]	; 0x420
 23f5306:	e7cf      	b.n	23f52a8 <_ZN14ExFatPartition10bitmapFindEmm+0xe>
        endAlloc++;
 23f5308:	46b0      	mov	r8, r6
        if (endAlloc == start) {
 23f530a:	42b5      	cmp	r5, r6
 23f530c:	d018      	beq.n	23f5340 <_ZN14ExFatPartition10bitmapFindEmm+0xa6>
        if (endAlloc >= m_clusterCount) {
 23f530e:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 23f5312:	42b2      	cmp	r2, r6
 23f5314:	d90e      	bls.n	23f5334 <_ZN14ExFatPartition10bitmapFindEmm+0x9a>
      for (; mask; mask <<= 1) {
 23f5316:	0064      	lsls	r4, r4, #1
 23f5318:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 23f531c:	d1dd      	bne.n	23f52da <_ZN14ExFatPartition10bitmapFindEmm+0x40>
    for (; i < sectorSize; i++) {
 23f531e:	f109 0301 	add.w	r3, r9, #1
 23f5322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    i = 0;
 23f5326:	f04f 0900 	mov.w	r9, #0
 23f532a:	f04f 0401 	mov.w	r4, #1
    for (; i < sectorSize; i++) {
 23f532e:	d2c9      	bcs.n	23f52c4 <_ZN14ExFatPartition10bitmapFindEmm+0x2a>
 23f5330:	4699      	mov	r9, r3
 23f5332:	e7d0      	b.n	23f52d6 <_ZN14ExFatPartition10bitmapFindEmm+0x3c>
          endAlloc = bgnAlloc = 0;
 23f5334:	f04f 0800 	mov.w	r8, #0
          i = sectorSize;
 23f5338:	f44f 7900 	mov.w	r9, #512	; 0x200
          endAlloc = bgnAlloc = 0;
 23f533c:	4646      	mov	r6, r8
 23f533e:	e7ee      	b.n	23f531e <_ZN14ExFatPartition10bitmapFindEmm+0x84>
          return 1;
 23f5340:	2001      	movs	r0, #1
 23f5342:	e7dc      	b.n	23f52fe <_ZN14ExFatPartition10bitmapFindEmm+0x64>

023f5344 <_ZN14ExFatPartition12bitmapModifyEmmb>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster, uint32_t count,
                                  bool value) {
 23f5344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
 23f5348:	3902      	subs	r1, #2
                                  bool value) {
 23f534a:	4605      	mov	r5, r0
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
 23f534c:	f8d0 0430 	ldr.w	r0, [r0, #1072]	; 0x430
                                  bool value) {
 23f5350:	461f      	mov	r7, r3
  if ((start + count) > m_clusterCount) {
 23f5352:	188b      	adds	r3, r1, r2
 23f5354:	4283      	cmp	r3, r0
                                  bool value) {
 23f5356:	4616      	mov	r6, r2
  if ((start + count) > m_clusterCount) {
 23f5358:	d83f      	bhi.n	23f53da <_ZN14ExFatPartition12bitmapModifyEmmb+0x96>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
 23f535a:	f8d5 2420 	ldr.w	r2, [r5, #1056]	; 0x420
  if (value) {
 23f535e:	b3bf      	cbz	r7, 23f53d0 <_ZN14ExFatPartition12bitmapModifyEmmb+0x8c>
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
 23f5360:	4291      	cmp	r1, r2
 23f5362:	d806      	bhi.n	23f5372 <_ZN14ExFatPartition12bitmapModifyEmmb+0x2e>
 23f5364:	4293      	cmp	r3, r2
 23f5366:	d904      	bls.n	23f5372 <_ZN14ExFatPartition12bitmapModifyEmmb+0x2e>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
 23f5368:	4283      	cmp	r3, r0
 23f536a:	bf28      	it	cs
 23f536c:	2300      	movcs	r3, #0
 23f536e:	f8c5 3420 	str.w	r3, [r5, #1056]	; 0x420
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
 23f5372:	f04f 0901 	mov.w	r9, #1
 23f5376:	f001 0307 	and.w	r3, r1, #7
 23f537a:	fa09 f903 	lsl.w	r9, r9, r3
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
 23f537e:	f8d5 342c 	ldr.w	r3, [r5, #1068]	; 0x42c
  mask = 1 << (start & 7);
 23f5382:	fa5f f989 	uxtb.w	r9, r9
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
 23f5386:	eb03 3811 	add.w	r8, r3, r1, lsr #12
  i = (start >> 3) & m_sectorMask;
 23f538a:	f3c1 04c8 	ubfx	r4, r1, #3, #9
 23f538e:	2201      	movs	r2, #1
 23f5390:	4641      	mov	r1, r8
 23f5392:	4628      	mov	r0, r5
 23f5394:	4490      	add	r8, r2
 23f5396:	f000 fc08 	bl	23f5baa <_ZN7FsCache7prepareEmh>
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
 23f539a:	b1f0      	cbz	r0, 23f53da <_ZN14ExFatPartition12bitmapModifyEmmb+0x96>
 23f539c:	4649      	mov	r1, r9
 23f539e:	1903      	adds	r3, r0, r4
 23f53a0:	f500 7000 	add.w	r0, r0, #512	; 0x200
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
 23f53a4:	781a      	ldrb	r2, [r3, #0]
 23f53a6:	420a      	tst	r2, r1
 23f53a8:	bf14      	ite	ne
 23f53aa:	2401      	movne	r4, #1
 23f53ac:	2400      	moveq	r4, #0
 23f53ae:	42bc      	cmp	r4, r7
 23f53b0:	d013      	beq.n	23f53da <_ZN14ExFatPartition12bitmapModifyEmmb+0x96>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
 23f53b2:	404a      	eors	r2, r1
        if (--count == 0) {
 23f53b4:	3e01      	subs	r6, #1
        cache[i] ^= mask;
 23f53b6:	701a      	strb	r2, [r3, #0]
        if (--count == 0) {
 23f53b8:	d012      	beq.n	23f53e0 <_ZN14ExFatPartition12bitmapModifyEmmb+0x9c>
      for (; mask; mask <<= 1) {
 23f53ba:	0049      	lsls	r1, r1, #1
 23f53bc:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 23f53c0:	d1f0      	bne.n	23f53a4 <_ZN14ExFatPartition12bitmapModifyEmmb+0x60>
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
 23f53c2:	460c      	mov	r4, r1
 23f53c4:	2101      	movs	r1, #1
    for (; i < m_bytesPerSector; i++) {
 23f53c6:	3301      	adds	r3, #1
 23f53c8:	4298      	cmp	r0, r3
      mask = 1;
 23f53ca:	4689      	mov	r9, r1
    for (; i < m_bytesPerSector; i++) {
 23f53cc:	d1ea      	bne.n	23f53a4 <_ZN14ExFatPartition12bitmapModifyEmmb+0x60>
 23f53ce:	e7de      	b.n	23f538e <_ZN14ExFatPartition12bitmapModifyEmmb+0x4a>
    if (start < m_bitmapStart) {
 23f53d0:	4291      	cmp	r1, r2
      m_bitmapStart = start;
 23f53d2:	bf38      	it	cc
 23f53d4:	f8c5 1420 	strcc.w	r1, [r5, #1056]	; 0x420
 23f53d8:	e7cb      	b.n	23f5372 <_ZN14ExFatPartition12bitmapModifyEmmb+0x2e>
  }

fail:
  return false;
 23f53da:	2000      	movs	r0, #0
}
 23f53dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          return true;
 23f53e0:	2001      	movs	r0, #1
 23f53e2:	e7fb      	b.n	23f53dc <_ZN14ExFatPartition12bitmapModifyEmmb+0x98>

023f53e4 <_ZN14ExFatPartition8dirCacheEPK8DirPos_th>:
    n++;
  } while (status);
  return n;
}
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(const DirPos_t* pos, uint8_t options) {
 23f53e4:	b538      	push	{r3, r4, r5, lr}
 23f53e6:	460c      	mov	r4, r1
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
 23f53e8:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
 23f53ec:	6849      	ldr	r1, [r1, #4]
           ((cluster - 2) << m_sectorsPerClusterShift);
 23f53ee:	f890 5445 	ldrb.w	r5, [r0, #1093]	; 0x445
 23f53f2:	4019      	ands	r1, r3
 23f53f4:	6823      	ldr	r3, [r4, #0]
    return m_dataCache.prepare(sector, option);
 23f53f6:	f500 7004 	add.w	r0, r0, #528	; 0x210
           ((cluster - 2) << m_sectorsPerClusterShift);
 23f53fa:	3b02      	subs	r3, #2
 23f53fc:	40ab      	lsls	r3, r5
 23f53fe:	eb03 2351 	add.w	r3, r3, r1, lsr #9
 23f5402:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
 23f5406:	4419      	add	r1, r3
 23f5408:	f000 fbcf 	bl	23f5baa <_ZN7FsCache7prepareEmh>
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
 23f540c:	b118      	cbz	r0, 23f5416 <_ZN14ExFatPartition8dirCacheEPK8DirPos_th+0x32>
 23f540e:	6863      	ldr	r3, [r4, #4]
 23f5410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23f5414:	4418      	add	r0, r3
}
 23f5416:	bd38      	pop	{r3, r4, r5, pc}

023f5418 <_ZN14ExFatPartition6fatGetEmPm>:
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
 23f5418:	b538      	push	{r3, r4, r5, lr}
  const uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
 23f541a:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
 23f541e:	460c      	mov	r4, r1
  if (cluster > (m_clusterCount + 1)) {
 23f5420:	3301      	adds	r3, #1
 23f5422:	428b      	cmp	r3, r1
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
 23f5424:	4615      	mov	r5, r2
  if (cluster > (m_clusterCount + 1)) {
 23f5426:	d202      	bcs.n	23f542e <_ZN14ExFatPartition6fatGetEmPm+0x16>
    DBG_FAIL_MACRO;
    return -1;
 23f5428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
 23f542c:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
 23f542e:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
 23f5432:	2200      	movs	r2, #0
 23f5434:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 23f5438:	f500 7004 	add.w	r0, r0, #528	; 0x210
 23f543c:	f000 fbb5 	bl	23f5baa <_ZN7FsCache7prepareEmh>
  if (!cache) {
 23f5440:	2800      	cmp	r0, #0
 23f5442:	d0f1      	beq.n	23f5428 <_ZN14ExFatPartition6fatGetEmPm+0x10>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
 23f5444:	00a4      	lsls	r4, r4, #2
 23f5446:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
 23f544a:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
 23f544c:	1c5a      	adds	r2, r3, #1
  return 1;
 23f544e:	bf16      	itet	ne
 23f5450:	2001      	movne	r0, #1
    return 0;
 23f5452:	2000      	moveq	r0, #0
  *value = next;
 23f5454:	602b      	strne	r3, [r5, #0]
  return 1;
 23f5456:	e7e9      	b.n	23f542c <_ZN14ExFatPartition6fatGetEmPm+0x14>

023f5458 <_ZN14ExFatPartition9chainSizeEm>:
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
 23f5458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f545a:	4605      	mov	r5, r0
  uint32_t n = 0;
 23f545c:	2400      	movs	r4, #0
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
 23f545e:	9101      	str	r1, [sp, #4]
    status = fatGet(cluster, &cluster);
 23f5460:	4628      	mov	r0, r5
 23f5462:	9901      	ldr	r1, [sp, #4]
 23f5464:	aa01      	add	r2, sp, #4
 23f5466:	f7ff ffd7 	bl	23f5418 <_ZN14ExFatPartition6fatGetEmPm>
    if (status < 0) return 0;
 23f546a:	2800      	cmp	r0, #0
 23f546c:	db05      	blt.n	23f547a <_ZN14ExFatPartition9chainSizeEm+0x22>
    n++;
 23f546e:	f104 0401 	add.w	r4, r4, #1
  } while (status);
 23f5472:	d1f5      	bne.n	23f5460 <_ZN14ExFatPartition9chainSizeEm+0x8>
}
 23f5474:	4620      	mov	r0, r4
 23f5476:	b003      	add	sp, #12
 23f5478:	bd30      	pop	{r4, r5, pc}
    if (status < 0) return 0;
 23f547a:	2400      	movs	r4, #0
 23f547c:	e7fa      	b.n	23f5474 <_ZN14ExFatPartition9chainSizeEm+0x1c>

023f547e <_ZN14ExFatPartition7dirSeekEP8DirPos_tm>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
 23f547e:	b570      	push	{r4, r5, r6, lr}
 23f5480:	4606      	mov	r6, r0
 23f5482:	460d      	mov	r5, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
 23f5484:	684b      	ldr	r3, [r1, #4]
 23f5486:	f8d0 4438 	ldr.w	r4, [r0, #1080]	; 0x438
 23f548a:	401c      	ands	r4, r3
  pos->position += offset;
 23f548c:	4413      	add	r3, r2
 23f548e:	604b      	str	r3, [r1, #4]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
 23f5490:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
 23f5494:	4414      	add	r4, r2
 23f5496:	3309      	adds	r3, #9
  tmp >>= bytesPerClusterShift();
 23f5498:	b2db      	uxtb	r3, r3
 23f549a:	40dc      	lsrs	r4, r3
  while (tmp--) {
 23f549c:	b16c      	cbz	r4, 23f54ba <_ZN14ExFatPartition7dirSeekEP8DirPos_tm+0x3c>
    if (pos->isContiguous) {
 23f549e:	7a2b      	ldrb	r3, [r5, #8]
      pos->cluster++;
 23f54a0:	6829      	ldr	r1, [r5, #0]
    if (pos->isContiguous) {
 23f54a2:	b11b      	cbz	r3, 23f54ac <_ZN14ExFatPartition7dirSeekEP8DirPos_tm+0x2e>
      pos->cluster++;
 23f54a4:	3101      	adds	r1, #1
 23f54a6:	6029      	str	r1, [r5, #0]
 23f54a8:	3c01      	subs	r4, #1
 23f54aa:	e7f7      	b.n	23f549c <_ZN14ExFatPartition7dirSeekEP8DirPos_tm+0x1e>
      status = fatGet(pos->cluster, &pos->cluster);
 23f54ac:	462a      	mov	r2, r5
 23f54ae:	4630      	mov	r0, r6
 23f54b0:	f7ff ffb2 	bl	23f5418 <_ZN14ExFatPartition6fatGetEmPm>
      if (status != 1) {
 23f54b4:	2801      	cmp	r0, #1
 23f54b6:	d0f7      	beq.n	23f54a8 <_ZN14ExFatPartition7dirSeekEP8DirPos_tm+0x2a>
}
 23f54b8:	bd70      	pop	{r4, r5, r6, pc}
  return 1;
 23f54ba:	2001      	movs	r0, #1
 23f54bc:	e7fc      	b.n	23f54b8 <_ZN14ExFatPartition7dirSeekEP8DirPos_tm+0x3a>

023f54be <_ZN14ExFatPartition6fatPutEmm>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
 23f54be:	2901      	cmp	r1, #1
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
 23f54c0:	b538      	push	{r3, r4, r5, lr}
 23f54c2:	460c      	mov	r4, r1
 23f54c4:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
 23f54c6:	d801      	bhi.n	23f54cc <_ZN14ExFatPartition6fatPutEmm+0xe>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

fail:
  return false;
 23f54c8:	2000      	movs	r0, #0
}
 23f54ca:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
 23f54cc:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
 23f54d0:	3301      	adds	r3, #1
 23f54d2:	428b      	cmp	r3, r1
 23f54d4:	d3f8      	bcc.n	23f54c8 <_ZN14ExFatPartition6fatPutEmm+0xa>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
 23f54d6:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    return m_dataCache.prepare(sector, option);
 23f54da:	2201      	movs	r2, #1
 23f54dc:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 23f54e0:	f500 7004 	add.w	r0, r0, #528	; 0x210
 23f54e4:	f000 fb61 	bl	23f5baa <_ZN7FsCache7prepareEmh>
  if (!cache) {
 23f54e8:	2800      	cmp	r0, #0
 23f54ea:	d0ed      	beq.n	23f54c8 <_ZN14ExFatPartition6fatPutEmm+0xa>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
 23f54ec:	00a4      	lsls	r4, r4, #2
 23f54ee:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
 23f54f2:	5105      	str	r5, [r0, r4]
  return true;
 23f54f4:	2001      	movs	r0, #1
 23f54f6:	e7e8      	b.n	23f54ca <_ZN14ExFatPartition6fatPutEmm+0xc>

023f54f8 <_ZN14ExFatPartition9freeChainEm>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
 23f54f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f54fc:	4607      	mov	r7, r0
 23f54fe:	460c      	mov	r4, r1
  uint32_t next;
  uint32_t start = cluster;
 23f5500:	4688      	mov	r8, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
 23f5502:	4621      	mov	r1, r4
 23f5504:	4638      	mov	r0, r7
 23f5506:	aa01      	add	r2, sp, #4
 23f5508:	f7ff ff86 	bl	23f5418 <_ZN14ExFatPartition6fatGetEmPm>
    if (status < 0) {
 23f550c:	1e06      	subs	r6, r0, #0
 23f550e:	da04      	bge.n	23f551a <_ZN14ExFatPartition9freeChainEm+0x22>
  } while (status);

  return true;

fail:
  return false;
 23f5510:	2500      	movs	r5, #0
}
 23f5512:	4628      	mov	r0, r5
 23f5514:	b002      	add	sp, #8
 23f5516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!fatPut(cluster, 0)) {
 23f551a:	2200      	movs	r2, #0
 23f551c:	4621      	mov	r1, r4
 23f551e:	4638      	mov	r0, r7
 23f5520:	f7ff ffcd 	bl	23f54be <_ZN14ExFatPartition6fatPutEmm>
 23f5524:	4605      	mov	r5, r0
 23f5526:	2800      	cmp	r0, #0
 23f5528:	d0f2      	beq.n	23f5510 <_ZN14ExFatPartition9freeChainEm+0x18>
    if (status == 0 || (cluster + 1) != next) {
 23f552a:	1c62      	adds	r2, r4, #1
 23f552c:	b116      	cbz	r6, 23f5534 <_ZN14ExFatPartition9freeChainEm+0x3c>
 23f552e:	9b01      	ldr	r3, [sp, #4]
 23f5530:	4293      	cmp	r3, r2
 23f5532:	d00a      	beq.n	23f554a <_ZN14ExFatPartition9freeChainEm+0x52>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
 23f5534:	2300      	movs	r3, #0
 23f5536:	4641      	mov	r1, r8
 23f5538:	4638      	mov	r0, r7
 23f553a:	eba2 0208 	sub.w	r2, r2, r8
 23f553e:	f7ff ff01 	bl	23f5344 <_ZN14ExFatPartition12bitmapModifyEmmb>
 23f5542:	2800      	cmp	r0, #0
 23f5544:	d0e4      	beq.n	23f5510 <_ZN14ExFatPartition9freeChainEm+0x18>
      start = next;
 23f5546:	f8dd 8004 	ldr.w	r8, [sp, #4]
    cluster = next;
 23f554a:	9c01      	ldr	r4, [sp, #4]
  } while (status);
 23f554c:	2e00      	cmp	r6, #0
 23f554e:	d1d8      	bne.n	23f5502 <_ZN14ExFatPartition9freeChainEm+0xa>
 23f5550:	e7df      	b.n	23f5512 <_ZN14ExFatPartition9freeChainEm+0x1a>
	...

023f5554 <_ZN14ExFatPartition4initEP9SdSpiCardhm>:
      }
    }
  }
}
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
 23f5554:	b570      	push	{r4, r5, r6, lr}
 23f5556:	461e      	mov	r6, r3
  pbs_t* pbs;
  const BpbExFat_t* bpb;
  const MbrSector_t* mbr;
  m_fatType = 0;
 23f5558:	2300      	movs	r3, #0
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
 23f555a:	4604      	mov	r4, r0
  m_fatType = 0;
 23f555c:	f880 3444 	strb.w	r3, [r0, #1092]	; 0x444
  m_blockDev = dev;
 23f5560:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
    m_blockDev = blockDev;
 23f5564:	6041      	str	r1, [r0, #4]
    m_status = 0;
 23f5566:	7003      	strb	r3, [r0, #0]
    m_sector = 0XFFFFFFFF;
 23f5568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  cacheInit(m_blockDev);
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 23f556c:	4615      	mov	r5, r2
 23f556e:	60a0      	str	r0, [r4, #8]
    m_blockDev = blockDev;
 23f5570:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
    m_status = 0;
 23f5574:	f884 3210 	strb.w	r3, [r4, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
 23f5578:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
 23f557c:	b1d2      	cbz	r2, 23f55b4 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x60>
    if (part > 4) {
 23f557e:	2a04      	cmp	r2, #4
 23f5580:	d901      	bls.n	23f5586 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x32>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

fail:
  return false;
 23f5582:	2000      	movs	r0, #0
}
 23f5584:	bd70      	pop	{r4, r5, r6, pc}
 23f5586:	461a      	mov	r2, r3
 23f5588:	4619      	mov	r1, r3
 23f558a:	f504 7004 	add.w	r0, r4, #528	; 0x210
 23f558e:	f000 fb0c 	bl	23f5baa <_ZN7FsCache7prepareEmh>
    if (!mbr) {
 23f5592:	2800      	cmp	r0, #0
 23f5594:	d0f5      	beq.n	23f5582 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x2e>
    const MbrPart_t* mp = mbr->part + part - 1;
 23f5596:	f105 5280 	add.w	r2, r5, #268435456	; 0x10000000
 23f559a:	3a01      	subs	r2, #1
 23f559c:	f500 70df 	add.w	r0, r0, #446	; 0x1be
 23f55a0:	0113      	lsls	r3, r2, #4
 23f55a2:	eb00 1202 	add.w	r2, r0, r2, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
 23f55a6:	7911      	ldrb	r1, [r2, #4]
 23f55a8:	2900      	cmp	r1, #0
 23f55aa:	d0ea      	beq.n	23f5582 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x2e>
 23f55ac:	5cc3      	ldrb	r3, [r0, r3]
 23f55ae:	065b      	lsls	r3, r3, #25
 23f55b0:	d1e7      	bne.n	23f5582 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x2e>
  return *reinterpret_cast<const uint32_t*>(src);
 23f55b2:	6896      	ldr	r6, [r2, #8]
 23f55b4:	2200      	movs	r2, #0
 23f55b6:	4631      	mov	r1, r6
 23f55b8:	f504 7004 	add.w	r0, r4, #528	; 0x210
 23f55bc:	f000 faf5 	bl	23f5baa <_ZN7FsCache7prepareEmh>
  if (!pbs) {
 23f55c0:	4605      	mov	r5, r0
 23f55c2:	2800      	cmp	r0, #0
 23f55c4:	d0dd      	beq.n	23f5582 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x2e>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
 23f55c6:	491a      	ldr	r1, [pc, #104]	; (23f5630 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0xdc>)
 23f55c8:	2205      	movs	r2, #5
 23f55ca:	3003      	adds	r0, #3
 23f55cc:	f007 f931 	bl	23fc832 <strncmp>
 23f55d0:	4601      	mov	r1, r0
 23f55d2:	2800      	cmp	r0, #0
 23f55d4:	d1d5      	bne.n	23f5582 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x2e>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
 23f55d6:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
 23f55da:	2b09      	cmp	r3, #9
 23f55dc:	d1d1      	bne.n	23f5582 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x2e>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
 23f55de:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 23f55e0:	4433      	add	r3, r6
 23f55e2:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
 23f55e6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
 23f55e8:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
 23f55ec:	6dab      	ldr	r3, [r5, #88]	; 0x58
 23f55ee:	4433      	add	r3, r6
 23f55f0:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
 23f55f4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
 23f55f6:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
 23f55fa:	6e2b      	ldr	r3, [r5, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
 23f55fc:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
 23f5600:	f895 306d 	ldrb.w	r3, [r5, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
 23f5604:	2501      	movs	r5, #1
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
 23f5606:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
 23f560a:	3309      	adds	r3, #9
 23f560c:	fa05 f303 	lsl.w	r3, r5, r3
 23f5610:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
 23f5614:	3b01      	subs	r3, #1
 23f5616:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
  m_bitmapStart = 0;
 23f561a:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
 23f561e:	462a      	mov	r2, r5
 23f5620:	4620      	mov	r0, r4
 23f5622:	f7ff fe3a 	bl	23f529a <_ZN14ExFatPartition10bitmapFindEmm>
  m_fatType = FAT_TYPE_EXFAT;
 23f5626:	2340      	movs	r3, #64	; 0x40
  return true;
 23f5628:	4628      	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
 23f562a:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
  return true;
 23f562e:	e7a9      	b.n	23f5584 <_ZN14ExFatPartition4initEP9SdSpiCardhm+0x30>
 23f5630:	023ff680 	.word	0x023ff680

023f5634 <_ZN14ExFatPartition10rootLengthEv>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
 23f5634:	b510      	push	{r4, lr}
 23f5636:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
 23f5638:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
 23f563c:	f7ff ff0c 	bl	23f5458 <_ZN14ExFatPartition9chainSizeEm>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
 23f5640:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
 23f5644:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
 23f5646:	b2db      	uxtb	r3, r3
}
 23f5648:	4098      	lsls	r0, r3
 23f564a:	bd10      	pop	{r4, pc}

023f564c <_ZN7FatFile10getLfnCharEPK8DirLfn_th>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(const DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
 23f564c:	2a04      	cmp	r2, #4
 23f564e:	d804      	bhi.n	23f565a <_ZN7FatFile10getLfnCharEPK8DirLfn_th+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
 23f5650:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 23f5654:	f8b2 0001 	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2 * i);
 23f5658:	4770      	bx	lr
  } else if (i < 11) {
 23f565a:	2a0a      	cmp	r2, #10
 23f565c:	d803      	bhi.n	23f5666 <_ZN7FatFile10getLfnCharEPK8DirLfn_th+0x1a>
 23f565e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 23f5662:	8888      	ldrh	r0, [r1, #4]
    return getLe16(ldir->unicode2 + 2 * (i - 5));
 23f5664:	4770      	bx	lr
  } else if (i < 13) {
 23f5666:	2a0c      	cmp	r2, #12
 23f5668:	bf9a      	itte	ls
 23f566a:	eb01 0142 	addls.w	r1, r1, r2, lsl #1
 23f566e:	88c8      	ldrhls	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2 * (i - 11));
  }
  DBG_HALT_IF(i >= 13);
  return 0;
 23f5670:	2000      	movhi	r0, #0
}
 23f5672:	4770      	bx	lr

023f5674 <_ZN12FatPartition6fatGetEmPm>:
  uint32_t sector;
  uint32_t next;
  const uint8_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 23f5674:	2901      	cmp	r1, #1
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
 23f5676:	b570      	push	{r4, r5, r6, lr}
 23f5678:	4605      	mov	r5, r0
 23f567a:	460c      	mov	r4, r1
 23f567c:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
 23f567e:	d802      	bhi.n	23f5686 <_ZN12FatPartition6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
 23f5680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23f5684:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
 23f5686:	69c3      	ldr	r3, [r0, #28]
 23f5688:	428b      	cmp	r3, r1
 23f568a:	d3f9      	bcc.n	23f5680 <_ZN12FatPartition6fatGetEmPm+0xc>
  uint8_t fatType() const { return m_fatType; }
 23f568c:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
 23f568e:	2b20      	cmp	r3, #32
 23f5690:	d114      	bne.n	23f56bc <_ZN12FatPartition6fatGetEmPm+0x48>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
 23f5692:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
 23f5694:	2202      	movs	r2, #2
 23f5696:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 23f569a:	f500 700d 	add.w	r0, r0, #564	; 0x234
 23f569e:	f000 fa84 	bl	23f5baa <_ZN7FsCache7prepareEmh>
    if (!pc) {
 23f56a2:	2800      	cmp	r0, #0
 23f56a4:	d0ec      	beq.n	23f5680 <_ZN12FatPartition6fatGetEmPm+0xc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
 23f56a6:	00a4      	lsls	r4, r4, #2
    next = getLe32(pc + offset);
 23f56a8:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
 23f56ac:	5903      	ldr	r3, [r0, r4]
  if (isEOC(next)) {
 23f56ae:	69ea      	ldr	r2, [r5, #28]
 23f56b0:	429a      	cmp	r2, r3
  return 1;
 23f56b2:	bf2a      	itet	cs
 23f56b4:	2001      	movcs	r0, #1
    return 0;
 23f56b6:	2000      	movcc	r0, #0
  *value = next;
 23f56b8:	6033      	strcs	r3, [r6, #0]
  return 1;
 23f56ba:	e7e3      	b.n	23f5684 <_ZN12FatPartition6fatGetEmPm+0x10>
  } else if (fatType() == 16) {
 23f56bc:	2b10      	cmp	r3, #16
 23f56be:	d1df      	bne.n	23f5680 <_ZN12FatPartition6fatGetEmPm+0xc>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
 23f56c0:	f3c1 2307 	ubfx	r3, r1, #8, #8
 23f56c4:	6981      	ldr	r1, [r0, #24]
 23f56c6:	2202      	movs	r2, #2
 23f56c8:	4419      	add	r1, r3
 23f56ca:	f500 700d 	add.w	r0, r0, #564	; 0x234
 23f56ce:	f000 fa6c 	bl	23f5baa <_ZN7FsCache7prepareEmh>
    if (!pc) {
 23f56d2:	2800      	cmp	r0, #0
 23f56d4:	d0d4      	beq.n	23f5680 <_ZN12FatPartition6fatGetEmPm+0xc>
    uint16_t offset = (cluster << 1) & m_sectorMask;
 23f56d6:	0064      	lsls	r4, r4, #1
    next = getLe16(pc + offset);
 23f56d8:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 23f56dc:	5b03      	ldrh	r3, [r0, r4]
 23f56de:	e7e6      	b.n	23f56ae <_ZN12FatPartition6fatGetEmPm+0x3a>

023f56e0 <_ZN12FatPartition6fatPutEmm>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 23f56e0:	2901      	cmp	r1, #1
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
 23f56e2:	b538      	push	{r3, r4, r5, lr}
 23f56e4:	460c      	mov	r4, r1
 23f56e6:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
 23f56e8:	d801      	bhi.n	23f56ee <_ZN12FatPartition6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 23f56ea:	2000      	movs	r0, #0
}
 23f56ec:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
 23f56ee:	69c3      	ldr	r3, [r0, #28]
 23f56f0:	428b      	cmp	r3, r1
 23f56f2:	d3fa      	bcc.n	23f56ea <_ZN12FatPartition6fatPutEmm+0xa>
  uint8_t fatType() const { return m_fatType; }
 23f56f4:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
 23f56f6:	2b20      	cmp	r3, #32
 23f56f8:	d10f      	bne.n	23f571a <_ZN12FatPartition6fatPutEmm+0x3a>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
 23f56fa:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
 23f56fc:	2203      	movs	r2, #3
 23f56fe:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 23f5702:	f500 700d 	add.w	r0, r0, #564	; 0x234
 23f5706:	f000 fa50 	bl	23f5baa <_ZN7FsCache7prepareEmh>
    if (!pc) {
 23f570a:	2800      	cmp	r0, #0
 23f570c:	d0ed      	beq.n	23f56ea <_ZN12FatPartition6fatPutEmm+0xa>
    uint16_t offset = (cluster << 2) & m_sectorMask;
 23f570e:	00a4      	lsls	r4, r4, #2
    setLe32(pc + offset, value);
 23f5710:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
 23f5714:	5105      	str	r5, [r0, r4]
    return true;
 23f5716:	2001      	movs	r0, #1
 23f5718:	e7e8      	b.n	23f56ec <_ZN12FatPartition6fatPutEmm+0xc>
  if (fatType() == 16) {
 23f571a:	2b10      	cmp	r3, #16
 23f571c:	d1e5      	bne.n	23f56ea <_ZN12FatPartition6fatPutEmm+0xa>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
 23f571e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 23f5722:	6981      	ldr	r1, [r0, #24]
 23f5724:	2203      	movs	r2, #3
 23f5726:	4419      	add	r1, r3
 23f5728:	f500 700d 	add.w	r0, r0, #564	; 0x234
 23f572c:	f000 fa3d 	bl	23f5baa <_ZN7FsCache7prepareEmh>
    if (!pc) {
 23f5730:	2800      	cmp	r0, #0
 23f5732:	d0da      	beq.n	23f56ea <_ZN12FatPartition6fatPutEmm+0xa>
    uint16_t offset = (cluster << 1) & m_sectorMask;
 23f5734:	0064      	lsls	r4, r4, #1
    setLe16(pc + offset, value);
 23f5736:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 23f573a:	5305      	strh	r5, [r0, r4]
 23f573c:	e7eb      	b.n	23f5716 <_ZN12FatPartition6fatPutEmm+0x36>

023f573e <_ZN12FatPartition15allocateClusterEmPm>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
 23f573e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
 23f5742:	68c4      	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
 23f5744:	4605      	mov	r5, r0
  if (m_allocSearchStart < current) {
 23f5746:	428c      	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
 23f5748:	460e      	mov	r6, r1
 23f574a:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
 23f574c:	d301      	bcc.n	23f5752 <_ZN12FatPartition15allocateClusterEmPm+0x14>
      setStart = true;
 23f574e:	2701      	movs	r7, #1
 23f5750:	e001      	b.n	23f5756 <_ZN12FatPartition15allocateClusterEmPm+0x18>
 23f5752:	460c      	mov	r4, r1
    setStart = false;
 23f5754:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
 23f5756:	69eb      	ldr	r3, [r5, #28]
    find++;
 23f5758:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
 23f575a:	42a3      	cmp	r3, r4
 23f575c:	d202      	bcs.n	23f5764 <_ZN12FatPartition15allocateClusterEmPm+0x26>
      if (setStart) {
 23f575e:	b9c7      	cbnz	r7, 23f5792 <_ZN12FatPartition15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
 23f5760:	68ec      	ldr	r4, [r5, #12]
 23f5762:	e7f4      	b.n	23f574e <_ZN12FatPartition15allocateClusterEmPm+0x10>
    if (find == current) {
 23f5764:	42a6      	cmp	r6, r4
 23f5766:	d014      	beq.n	23f5792 <_ZN12FatPartition15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
 23f5768:	4621      	mov	r1, r4
 23f576a:	4628      	mov	r0, r5
 23f576c:	aa01      	add	r2, sp, #4
 23f576e:	f7ff ff81 	bl	23f5674 <_ZN12FatPartition6fatGetEmPm>
    if (fg < 0) {
 23f5772:	2800      	cmp	r0, #0
 23f5774:	db0d      	blt.n	23f5792 <_ZN12FatPartition15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
 23f5776:	d0ee      	beq.n	23f5756 <_ZN12FatPartition15allocateClusterEmPm+0x18>
 23f5778:	9b01      	ldr	r3, [sp, #4]
 23f577a:	2b00      	cmp	r3, #0
 23f577c:	d1eb      	bne.n	23f5756 <_ZN12FatPartition15allocateClusterEmPm+0x18>
  if (setStart) {
 23f577e:	b107      	cbz	r7, 23f5782 <_ZN12FatPartition15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
 23f5780:	60ec      	str	r4, [r5, #12]
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) { return fatPut(cluster, 0x0FFFFFFF); }
 23f5782:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 23f5786:	4621      	mov	r1, r4
 23f5788:	4628      	mov	r0, r5
 23f578a:	f7ff ffa9 	bl	23f56e0 <_ZN12FatPartition6fatPutEmm>
  if (!fatPutEOC(find)) {
 23f578e:	4607      	mov	r7, r0
 23f5790:	b920      	cbnz	r0, 23f579c <_ZN12FatPartition15allocateClusterEmPm+0x5e>
  return false;
 23f5792:	2700      	movs	r7, #0
}
 23f5794:	4638      	mov	r0, r7
 23f5796:	b002      	add	sp, #8
 23f5798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
 23f579c:	b916      	cbnz	r6, 23f57a4 <_ZN12FatPartition15allocateClusterEmPm+0x66>
  *next = find;
 23f579e:	f8c8 4000 	str.w	r4, [r8]
  return true;
 23f57a2:	e7f7      	b.n	23f5794 <_ZN12FatPartition15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
 23f57a4:	4622      	mov	r2, r4
 23f57a6:	4631      	mov	r1, r6
 23f57a8:	4628      	mov	r0, r5
 23f57aa:	f7ff ff99 	bl	23f56e0 <_ZN12FatPartition6fatPutEmm>
 23f57ae:	2800      	cmp	r0, #0
 23f57b0:	d1f5      	bne.n	23f579e <_ZN12FatPartition15allocateClusterEmPm+0x60>
 23f57b2:	e7ee      	b.n	23f5792 <_ZN12FatPartition15allocateClusterEmPm+0x54>

023f57b4 <_ZN12FatPartition9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
 23f57b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f57b6:	4605      	mov	r5, r0
 23f57b8:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 23f57ba:	4621      	mov	r1, r4
 23f57bc:	4628      	mov	r0, r5
 23f57be:	aa01      	add	r2, sp, #4
 23f57c0:	f7ff ff58 	bl	23f5674 <_ZN12FatPartition6fatGetEmPm>
    if (fg < 0) {
 23f57c4:	1e06      	subs	r6, r0, #0
 23f57c6:	db10      	blt.n	23f57ea <_ZN12FatPartition9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 23f57c8:	2200      	movs	r2, #0
 23f57ca:	4621      	mov	r1, r4
 23f57cc:	4628      	mov	r0, r5
 23f57ce:	f7ff ff87 	bl	23f56e0 <_ZN12FatPartition6fatPutEmm>
 23f57d2:	b150      	cbz	r0, 23f57ea <_ZN12FatPartition9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
 23f57d4:	68eb      	ldr	r3, [r5, #12]
 23f57d6:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
 23f57d8:	bf84      	itt	hi
 23f57da:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 23f57de:	60ec      	strhi	r4, [r5, #12]
    }
    cluster = next;
 23f57e0:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
 23f57e2:	2e00      	cmp	r6, #0
 23f57e4:	d1e9      	bne.n	23f57ba <_ZN12FatPartition9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 23f57e6:	b002      	add	sp, #8
 23f57e8:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 23f57ea:	2000      	movs	r0, #0
 23f57ec:	e7fb      	b.n	23f57e6 <_ZN12FatPartition9freeChainEm+0x32>

023f57ee <_ZN12FatPartition4initEP9SdSpiCardhm>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
 23f57ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f57f0:	461d      	mov	r5, r3
  m_blockDev = dev;
  pbs_t* pbs;
  const BpbFat32_t* bpb;
  const MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
 23f57f2:	2300      	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
 23f57f4:	4604      	mov	r4, r0
  m_blockDev = dev;
 23f57f6:	6001      	str	r1, [r0, #0]
  m_fatType = 0;
 23f57f8:	71c3      	strb	r3, [r0, #7]
  m_allocSearchStart = 1;
 23f57fa:	2001      	movs	r0, #1
 23f57fc:	60e0      	str	r0, [r4, #12]
    m_sector = 0XFFFFFFFF;
 23f57fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 23f5802:	4616      	mov	r6, r2
  m_cache.init(dev);
 23f5804:	f104 0724 	add.w	r7, r4, #36	; 0x24
    m_blockDev = blockDev;
 23f5808:	62a1      	str	r1, [r4, #40]	; 0x28
    m_status = 0;
 23f580a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
 23f580e:	62e0      	str	r0, [r4, #44]	; 0x2c
    m_blockDev = blockDev;
 23f5810:	f8c4 1238 	str.w	r1, [r4, #568]	; 0x238
    m_status = 0;
 23f5814:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
    m_sector = 0XFFFFFFFF;
 23f5818:	f8c4 023c 	str.w	r0, [r4, #572]	; 0x23c
  if (part) {
 23f581c:	b1ca      	cbz	r2, 23f5852 <_ZN12FatPartition4initEP9SdSpiCardhm+0x64>
    if (part > 4) {
 23f581e:	2a04      	cmp	r2, #4
 23f5820:	d901      	bls.n	23f5826 <_ZN12FatPartition4initEP9SdSpiCardhm+0x38>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

fail:
  return false;
 23f5822:	2000      	movs	r0, #0
}
 23f5824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return m_cache.prepare(sector, options);
 23f5826:	461a      	mov	r2, r3
 23f5828:	4619      	mov	r1, r3
 23f582a:	4638      	mov	r0, r7
 23f582c:	f000 f9bd 	bl	23f5baa <_ZN7FsCache7prepareEmh>
    if (!mbr) {
 23f5830:	2800      	cmp	r0, #0
 23f5832:	d0f6      	beq.n	23f5822 <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
    const MbrPart_t* mp = mbr->part + part - 1;
 23f5834:	f106 5280 	add.w	r2, r6, #268435456	; 0x10000000
 23f5838:	3a01      	subs	r2, #1
 23f583a:	f500 70df 	add.w	r0, r0, #446	; 0x1be
 23f583e:	0113      	lsls	r3, r2, #4
 23f5840:	eb00 1202 	add.w	r2, r0, r2, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
 23f5844:	7911      	ldrb	r1, [r2, #4]
 23f5846:	2900      	cmp	r1, #0
 23f5848:	d0eb      	beq.n	23f5822 <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
 23f584a:	5cc3      	ldrb	r3, [r0, r3]
 23f584c:	065b      	lsls	r3, r3, #25
 23f584e:	d1e8      	bne.n	23f5822 <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
  return *reinterpret_cast<const uint32_t*>(src);
 23f5850:	6895      	ldr	r5, [r2, #8]
 23f5852:	2200      	movs	r2, #0
 23f5854:	4629      	mov	r1, r5
 23f5856:	4638      	mov	r0, r7
 23f5858:	f000 f9a7 	bl	23f5baa <_ZN7FsCache7prepareEmh>
  if (!pbs) {
 23f585c:	2800      	cmp	r0, #0
 23f585e:	d0e0      	beq.n	23f5822 <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
  if (bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
 23f5860:	7c03      	ldrb	r3, [r0, #16]
 23f5862:	2b02      	cmp	r3, #2
 23f5864:	d1dd      	bne.n	23f5822 <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
 23f5866:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 23f586a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 23f586e:	d1d8      	bne.n	23f5822 <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
 23f5870:	7b41      	ldrb	r1, [r0, #13]
  m_sectorsPerClusterShift = 0;
 23f5872:	2609      	movs	r6, #9
  m_clusterSectorMask = m_sectorsPerCluster - 1;
 23f5874:	1e4b      	subs	r3, r1, #1
 23f5876:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
 23f5878:	2300      	movs	r3, #0
 23f587a:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
 23f587c:	2301      	movs	r3, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
 23f587e:	7121      	strb	r1, [r4, #4]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
 23f5880:	4299      	cmp	r1, r3
 23f5882:	d007      	beq.n	23f5894 <_ZN12FatPartition4initEP9SdSpiCardhm+0xa6>
    if (tmp == 0) {
 23f5884:	3e01      	subs	r6, #1
 23f5886:	d0cc      	beq.n	23f5822 <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
    m_sectorsPerClusterShift++;
 23f5888:	79a2      	ldrb	r2, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
 23f588a:	005b      	lsls	r3, r3, #1
    m_sectorsPerClusterShift++;
 23f588c:	3201      	adds	r2, #1
 23f588e:	71a2      	strb	r2, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
 23f5890:	b2db      	uxtb	r3, r3
 23f5892:	e7f5      	b.n	23f5880 <_ZN12FatPartition4initEP9SdSpiCardhm+0x92>
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
 23f5894:	8ac3      	ldrh	r3, [r0, #22]
 23f5896:	6123      	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
 23f5898:	b90b      	cbnz	r3, 23f589e <_ZN12FatPartition4initEP9SdSpiCardhm+0xb0>
 23f589a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
 23f589c:	6123      	str	r3, [r4, #16]
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
 23f589e:	89c1      	ldrh	r1, [r0, #14]
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
 23f58a0:	6922      	ldr	r2, [r4, #16]
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
 23f58a2:	4429      	add	r1, r5
 23f58a4:	61a1      	str	r1, [r4, #24]
  return *reinterpret_cast<const uint16_t*>(src);
 23f58a6:	f8b0 3011 	ldrh.w	r3, [r0, #17]
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
 23f58aa:	eb01 0142 	add.w	r1, r1, r2, lsl #1
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
 23f58ae:	8123      	strh	r3, [r4, #8]
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
 23f58b0:	015b      	lsls	r3, r3, #5
 23f58b2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
 23f58b6:	6221      	str	r1, [r4, #32]
      m_rootDirStart +
 23f58b8:	eb01 2153 	add.w	r1, r1, r3, lsr #9
  m_dataStartSector =
 23f58bc:	6161      	str	r1, [r4, #20]
  totalSectors = getLe16(bpb->totalSectors16);
 23f58be:	f8b0 3013 	ldrh.w	r3, [r0, #19]
  if (totalSectors == 0) {
 23f58c2:	b903      	cbnz	r3, 23f58c6 <_ZN12FatPartition4initEP9SdSpiCardhm+0xd8>
  return *reinterpret_cast<const uint32_t*>(src);
 23f58c4:	6a03      	ldr	r3, [r0, #32]
  countOfClusters = totalSectors - (m_dataStartSector - volStart);
 23f58c6:	1a6d      	subs	r5, r5, r1
  countOfClusters >>= m_sectorsPerClusterShift;
 23f58c8:	79a1      	ldrb	r1, [r4, #6]
  countOfClusters = totalSectors - (m_dataStartSector - volStart);
 23f58ca:	441d      	add	r5, r3
  countOfClusters >>= m_sectorsPerClusterShift;
 23f58cc:	40cd      	lsrs	r5, r1
  m_lastCluster = countOfClusters + 1;
 23f58ce:	1c6b      	adds	r3, r5, #1
 23f58d0:	61e3      	str	r3, [r4, #28]
  if (countOfClusters < 4085) {
 23f58d2:	f640 73f4 	movw	r3, #4084	; 0xff4
 23f58d6:	429d      	cmp	r5, r3
 23f58d8:	d802      	bhi.n	23f58e0 <_ZN12FatPartition4initEP9SdSpiCardhm+0xf2>
    m_fatType = 12;
 23f58da:	230c      	movs	r3, #12
 23f58dc:	71e3      	strb	r3, [r4, #7]
 23f58de:	e7a0      	b.n	23f5822 <_ZN12FatPartition4initEP9SdSpiCardhm+0x34>
  } else if (countOfClusters < 65525) {
 23f58e0:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 23f58e4:	429d      	cmp	r5, r3
 23f58e6:	bf89      	itett	hi
 23f58e8:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
 23f58ea:	2310      	movls	r3, #16
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
 23f58ec:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 23f58ee:	2320      	movhi	r3, #32
  return true;
 23f58f0:	2001      	movs	r0, #1
    m_fatType = 32;
 23f58f2:	71e3      	strb	r3, [r4, #7]
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) { m_mirrorOffset = offset; }
 23f58f4:	6322      	str	r2, [r4, #48]	; 0x30
 23f58f6:	f8c4 2240 	str.w	r2, [r4, #576]	; 0x240
  return true;
 23f58fa:	e793      	b.n	23f5824 <_ZN12FatPartition4initEP9SdSpiCardhm+0x36>

023f58fc <_ZN10FsBaseFile4copyEPKS_>:
  return *this;
}
#endif  // FILE_COPY_CONSTRUCTOR_SELECT
//------------------------------------------------------------------------------
void FsBaseFile::copy(const FsBaseFile* from) {
  if (from != this) {
 23f58fc:	4281      	cmp	r1, r0
void FsBaseFile::copy(const FsBaseFile* from) {
 23f58fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f5900:	4605      	mov	r5, r0
 23f5902:	460e      	mov	r6, r1
  if (from != this) {
 23f5904:	d016      	beq.n	23f5934 <_ZN10FsBaseFile4copyEPKS_+0x38>
    m_fFile = nullptr;
 23f5906:	2700      	movs	r7, #0
    m_xFile = nullptr;
 23f5908:	e9c0 770e 	strd	r7, r7, [r0, #56]	; 0x38
    if (from->m_fFile) {
 23f590c:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 23f590e:	b194      	cbz	r4, 23f5936 <_ZN10FsBaseFile4copyEPKS_+0x3a>
      m_fFile = new (m_fileMem) FatFile;
 23f5910:	4601      	mov	r1, r0
 23f5912:	2024      	movs	r0, #36	; 0x24
 23f5914:	f000 f887 	bl	23f5a26 <_ZnwjPm>
 23f5918:	4604      	mov	r4, r0
 23f591a:	b108      	cbz	r0, 23f5920 <_ZN10FsBaseFile4copyEPKS_+0x24>
 23f591c:	8007      	strh	r7, [r0, #0]
 23f591e:	7087      	strb	r7, [r0, #2]
 23f5920:	63ac      	str	r4, [r5, #56]	; 0x38
      m_fFile->copy(from->m_fFile);
 23f5922:	6bb5      	ldr	r5, [r6, #56]	; 0x38
    if (from != this) {
 23f5924:	42a5      	cmp	r5, r4
 23f5926:	d005      	beq.n	23f5934 <_ZN10FsBaseFile4copyEPKS_+0x38>
      *this = *from;
 23f5928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f592a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f592c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f592e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f5930:	682b      	ldr	r3, [r5, #0]
 23f5932:	6023      	str	r3, [r4, #0]
    } else if (from->m_xFile) {
      m_xFile = new (m_fileMem) ExFatFile;
      m_xFile->copy(from->m_xFile);
    }
  }
}
 23f5934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (from->m_xFile) {
 23f5936:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 23f5938:	2b00      	cmp	r3, #0
 23f593a:	d0fb      	beq.n	23f5934 <_ZN10FsBaseFile4copyEPKS_+0x38>
      m_xFile = new (m_fileMem) ExFatFile;
 23f593c:	4601      	mov	r1, r0
 23f593e:	2038      	movs	r0, #56	; 0x38
 23f5940:	f000 f871 	bl	23f5a26 <_ZnwjPm>
 23f5944:	b110      	cbz	r0, 23f594c <_ZN10FsBaseFile4copyEPKS_+0x50>
  ExFatFile() {}
 23f5946:	f880 4031 	strb.w	r4, [r0, #49]	; 0x31
 23f594a:	8644      	strh	r4, [r0, #50]	; 0x32
 23f594c:	63e8      	str	r0, [r5, #60]	; 0x3c
      m_xFile->copy(from->m_xFile);
 23f594e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    if (from != this) {
 23f5950:	4283      	cmp	r3, r0
 23f5952:	d0ef      	beq.n	23f5934 <_ZN10FsBaseFile4copyEPKS_+0x38>
      *this = *from;
 23f5954:	f103 0234 	add.w	r2, r3, #52	; 0x34
 23f5958:	f853 1b04 	ldr.w	r1, [r3], #4
 23f595c:	4293      	cmp	r3, r2
 23f595e:	f840 1b04 	str.w	r1, [r0], #4
 23f5962:	d1f9      	bne.n	23f5958 <_ZN10FsBaseFile4copyEPKS_+0x5c>
 23f5964:	e7e6      	b.n	23f5934 <_ZN10FsBaseFile4copyEPKS_+0x38>

023f5966 <_ZN10FsBaseFile4moveEPS_>:
//------------------------------------------------------------------------------
void FsBaseFile::move(FsBaseFile* from) {
  if (from != this) {
 23f5966:	4281      	cmp	r1, r0
void FsBaseFile::move(FsBaseFile* from) {
 23f5968:	b510      	push	{r4, lr}
 23f596a:	460c      	mov	r4, r1
  if (from != this) {
 23f596c:	d004      	beq.n	23f5978 <_ZN10FsBaseFile4moveEPS_+0x12>
    copy(from);
 23f596e:	f7ff ffc5 	bl	23f58fc <_ZN10FsBaseFile4copyEPKS_>
    from->m_fFile = nullptr;
 23f5972:	2300      	movs	r3, #0
    from->m_xFile = nullptr;
 23f5974:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
  }
}
 23f5978:	bd10      	pop	{r4, pc}

023f597a <_ZN10FsBaseFile5closeEv>:
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
 23f597a:	b510      	push	{r4, lr}
 23f597c:	4604      	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
 23f597e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 23f5980:	b138      	cbz	r0, 23f5992 <_ZN10FsBaseFile5closeEv+0x18>
 23f5982:	f7fd fa87 	bl	23f2e94 <_ZN7FatFile5closeEv>
  m_fFile = nullptr;
 23f5986:	2300      	movs	r3, #0
  m_xFile = nullptr;
  return rtn;
}
 23f5988:	f000 0001 	and.w	r0, r0, #1
  m_xFile = nullptr;
 23f598c:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
}
 23f5990:	bd10      	pop	{r4, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
 23f5992:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 23f5994:	b110      	cbz	r0, 23f599c <_ZN10FsBaseFile5closeEv+0x22>
 23f5996:	f7fe fcf5 	bl	23f4384 <_ZN9ExFatFile5closeEv>
 23f599a:	e7f4      	b.n	23f5986 <_ZN10FsBaseFile5closeEv+0xc>
 23f599c:	2001      	movs	r0, #1
 23f599e:	e7f2      	b.n	23f5986 <_ZN10FsBaseFile5closeEv+0xc>

023f59a0 <_ZN10FsBaseFile4openEP8FsVolumePKci>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
 23f59a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f59a2:	4604      	mov	r4, r0
  if (!vol) {
 23f59a4:	460d      	mov	r5, r1
 23f59a6:	b911      	cbnz	r1, 23f59ae <_ZN10FsBaseFile4openEP8FsVolumePKci+0xe>
    return false;
 23f59a8:	2000      	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
 23f59aa:	b002      	add	sp, #8
 23f59ac:	bd70      	pop	{r4, r5, r6, pc}
 23f59ae:	e9cd 2300 	strd	r2, r3, [sp]
  close();
 23f59b2:	f7ff ffe2 	bl	23f597a <_ZN10FsBaseFile5closeEv>
  if (vol->m_fVol) {
 23f59b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 23f59ba:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
 23f59be:	b1b6      	cbz	r6, 23f59ee <_ZN10FsBaseFile4openEP8FsVolumePKci+0x4e>
    m_fFile = new (m_fileMem) FatFile;
 23f59c0:	4621      	mov	r1, r4
 23f59c2:	2024      	movs	r0, #36	; 0x24
 23f59c4:	f000 f82f 	bl	23f5a26 <_ZnwjPm>
 23f59c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 23f59cc:	b110      	cbz	r0, 23f59d4 <_ZN10FsBaseFile4openEP8FsVolumePKci+0x34>
  FatFile() {}
 23f59ce:	2100      	movs	r1, #0
 23f59d0:	8001      	strh	r1, [r0, #0]
 23f59d2:	7081      	strb	r1, [r0, #2]
 23f59d4:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
 23f59d6:	b910      	cbnz	r0, 23f59de <_ZN10FsBaseFile4openEP8FsVolumePKci+0x3e>
    m_fFile = nullptr;
 23f59d8:	2000      	movs	r0, #0
 23f59da:	63a0      	str	r0, [r4, #56]	; 0x38
 23f59dc:	e7e5      	b.n	23f59aa <_ZN10FsBaseFile4openEP8FsVolumePKci+0xa>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
 23f59de:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
 23f59e2:	f7fd faa8 	bl	23f2f36 <_ZN7FatFile4openEP9FatVolumePKci>
 23f59e6:	2800      	cmp	r0, #0
 23f59e8:	d0f6      	beq.n	23f59d8 <_ZN10FsBaseFile4openEP8FsVolumePKci+0x38>
      return true;
 23f59ea:	2001      	movs	r0, #1
 23f59ec:	e7dd      	b.n	23f59aa <_ZN10FsBaseFile4openEP8FsVolumePKci+0xa>
  } else if (vol->m_xVol) {
 23f59ee:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
 23f59f2:	e9cd 2300 	strd	r2, r3, [sp]
 23f59f6:	2900      	cmp	r1, #0
 23f59f8:	d0d6      	beq.n	23f59a8 <_ZN10FsBaseFile4openEP8FsVolumePKci+0x8>
    m_xFile = new (m_fileMem) ExFatFile;
 23f59fa:	4621      	mov	r1, r4
 23f59fc:	2038      	movs	r0, #56	; 0x38
 23f59fe:	f000 f812 	bl	23f5a26 <_ZnwjPm>
 23f5a02:	e9dd 2300 	ldrd	r2, r3, [sp]
 23f5a06:	b110      	cbz	r0, 23f5a0e <_ZN10FsBaseFile4openEP8FsVolumePKci+0x6e>
  ExFatFile() {}
 23f5a08:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
 23f5a0c:	8646      	strh	r6, [r0, #50]	; 0x32
 23f5a0e:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
 23f5a10:	b910      	cbnz	r0, 23f5a18 <_ZN10FsBaseFile4openEP8FsVolumePKci+0x78>
    m_xFile = nullptr;
 23f5a12:	2000      	movs	r0, #0
 23f5a14:	63e0      	str	r0, [r4, #60]	; 0x3c
 23f5a16:	e7c8      	b.n	23f59aa <_ZN10FsBaseFile4openEP8FsVolumePKci+0xa>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
 23f5a18:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
 23f5a1c:	f7ff f858 	bl	23f4ad0 <_ZN9ExFatFile4openEP11ExFatVolumePKci>
 23f5a20:	2800      	cmp	r0, #0
 23f5a22:	d0f6      	beq.n	23f5a12 <_ZN10FsBaseFile4openEP8FsVolumePKci+0x72>
 23f5a24:	e7e1      	b.n	23f59ea <_ZN10FsBaseFile4openEP8FsVolumePKci+0x4a>

023f5a26 <_ZnwjPm>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
 23f5a26:	4608      	mov	r0, r1
 23f5a28:	4770      	bx	lr
	...

023f5a2c <_ZN8FsVolume5beginEP9SdSpiCardbhm>:
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part,
                     uint32_t volStart) {
 23f5a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_fVol = nullptr;
 23f5a30:	2600      	movs	r6, #0
                     uint32_t volStart) {
 23f5a32:	4605      	mov	r5, r0
  m_fVol = nullptr;
 23f5a34:	f8c0 6480 	str.w	r6, [r0, #1152]	; 0x480
                     uint32_t volStart) {
 23f5a38:	460f      	mov	r7, r1
  m_xVol = new (m_volMem) ExFatVolume;
 23f5a3a:	4601      	mov	r1, r0
 23f5a3c:	f44f 6090 	mov.w	r0, #1152	; 0x480
                     uint32_t volStart) {
 23f5a40:	4690      	mov	r8, r2
 23f5a42:	469a      	mov	sl, r3
 23f5a44:	f8dd 9020 	ldr.w	r9, [sp, #32]
  m_xVol = new (m_volMem) ExFatVolume;
 23f5a48:	f7ff ffed 	bl	23f5a26 <_ZnwjPm>
 23f5a4c:	4604      	mov	r4, r0
 23f5a4e:	b180      	cbz	r0, 23f5a72 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x46>
 23f5a50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    m_blockDev = blockDev;
 23f5a54:	6046      	str	r6, [r0, #4]
    m_status = 0;
 23f5a56:	7006      	strb	r6, [r0, #0]
    m_sector = 0XFFFFFFFF;
 23f5a58:	6083      	str	r3, [r0, #8]
    m_blockDev = blockDev;
 23f5a5a:	f8c0 6214 	str.w	r6, [r0, #532]	; 0x214
    m_status = 0;
 23f5a5e:	f880 6210 	strb.w	r6, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
 23f5a62:	f8c0 3218 	str.w	r3, [r0, #536]	; 0x218
  ExFatPartition() = default;  // cppcheck-suppress uninitMemberVar
 23f5a66:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
 23f5a6a:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
 23f5a6e:	f8a0 647a 	strh.w	r6, [r0, #1146]	; 0x47a
 23f5a72:	f8c5 4484 	str.w	r4, [r5, #1156]	; 0x484
  if (m_xVol && m_xVol->begin(blockDev, false, part, volStart)) {
 23f5a76:	b1ec      	cbz	r4, 23f5ab4 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x88>
    if (!init(dev, part, volStart)) {
 23f5a78:	464b      	mov	r3, r9
 23f5a7a:	4652      	mov	r2, sl
 23f5a7c:	4639      	mov	r1, r7
 23f5a7e:	4620      	mov	r0, r4
 23f5a80:	f7ff fd68 	bl	23f5554 <_ZN14ExFatPartition4initEP9SdSpiCardhm>
 23f5a84:	b1b0      	cbz	r0, 23f5ab4 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x88>
    m_vwd.close();
 23f5a86:	f504 6689 	add.w	r6, r4, #1096	; 0x448
 23f5a8a:	4630      	mov	r0, r6
 23f5a8c:	f7fe fc7a 	bl	23f4384 <_ZN9ExFatFile5closeEv>
    return m_vwd.openRoot(this);
 23f5a90:	4621      	mov	r1, r4
 23f5a92:	4630      	mov	r0, r6
 23f5a94:	f7fe fc80 	bl	23f4398 <_ZN9ExFatFile8openRootEP11ExFatVolume>
    if (!chdir()) {
 23f5a98:	b160      	cbz	r0, 23f5ab4 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x88>
    if (setCwv || !m_cwv) {
 23f5a9a:	4b21      	ldr	r3, [pc, #132]	; (23f5b20 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xf4>)
    if (setCwv || !m_cwv) {
 23f5a9c:	681a      	ldr	r2, [r3, #0]
 23f5a9e:	b902      	cbnz	r2, 23f5aa2 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x76>
      m_cwv = this;
 23f5aa0:	601c      	str	r4, [r3, #0]
  }
  m_fVol = nullptr;
  return false;

done:
  if (setCwv || !m_cwv) {
 23f5aa2:	4b20      	ldr	r3, [pc, #128]	; (23f5b24 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xf8>)
 23f5aa4:	f1b8 0f00 	cmp.w	r8, #0
 23f5aa8:	d101      	bne.n	23f5aae <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x82>
 23f5aaa:	681a      	ldr	r2, [r3, #0]
 23f5aac:	b902      	cbnz	r2, 23f5ab0 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x84>
    m_cwv = this;
 23f5aae:	601d      	str	r5, [r3, #0]
  }
  return true;
 23f5ab0:	2001      	movs	r0, #1
 23f5ab2:	e033      	b.n	23f5b1c <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xf0>
  m_xVol = nullptr;
 23f5ab4:	2600      	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
 23f5ab6:	4629      	mov	r1, r5
 23f5ab8:	f44f 608d 	mov.w	r0, #1128	; 0x468
  m_xVol = nullptr;
 23f5abc:	f8c5 6484 	str.w	r6, [r5, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
 23f5ac0:	f7ff ffb1 	bl	23f5a26 <_ZnwjPm>
 23f5ac4:	4604      	mov	r4, r0
 23f5ac6:	b180      	cbz	r0, 23f5aea <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xbe>
 23f5ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  FatPartition() = default;  // cppcheck-suppress uninitMemberVar
 23f5acc:	71c6      	strb	r6, [r0, #7]
    m_blockDev = blockDev;
 23f5ace:	6286      	str	r6, [r0, #40]	; 0x28
    m_status = 0;
 23f5ad0:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
 23f5ad4:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_blockDev = blockDev;
 23f5ad6:	f8c0 6238 	str.w	r6, [r0, #568]	; 0x238
    m_status = 0;
 23f5ada:	f880 6234 	strb.w	r6, [r0, #564]	; 0x234
    m_sector = 0XFFFFFFFF;
 23f5ade:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
 23f5ae2:	f8a0 6444 	strh.w	r6, [r0, #1092]	; 0x444
 23f5ae6:	f880 6446 	strb.w	r6, [r0, #1094]	; 0x446
 23f5aea:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
  if (m_fVol && m_fVol->begin(blockDev, false, part, volStart)) {
 23f5aee:	b194      	cbz	r4, 23f5b16 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xea>
    if (!init(dev, part, volStart)) {
 23f5af0:	464b      	mov	r3, r9
 23f5af2:	4652      	mov	r2, sl
 23f5af4:	4639      	mov	r1, r7
 23f5af6:	4620      	mov	r0, r4
 23f5af8:	f7ff fe79 	bl	23f57ee <_ZN12FatPartition4initEP9SdSpiCardhm>
 23f5afc:	b158      	cbz	r0, 23f5b16 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xea>
    m_vwd.close();
 23f5afe:	f204 4644 	addw	r6, r4, #1092	; 0x444
 23f5b02:	4630      	mov	r0, r6
 23f5b04:	f7fd f9c6 	bl	23f2e94 <_ZN7FatFile5closeEv>
    return m_vwd.openRoot(this);
 23f5b08:	4621      	mov	r1, r4
 23f5b0a:	4630      	mov	r0, r6
 23f5b0c:	f7fc ffb5 	bl	23f2a7a <_ZN7FatFile8openRootEP9FatVolume>
    if (!chdir()) {
 23f5b10:	b108      	cbz	r0, 23f5b16 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xea>
    if (setCwv || !m_cwv) {
 23f5b12:	4b05      	ldr	r3, [pc, #20]	; (23f5b28 <_ZN8FsVolume5beginEP9SdSpiCardbhm+0xfc>)
 23f5b14:	e7c2      	b.n	23f5a9c <_ZN8FsVolume5beginEP9SdSpiCardbhm+0x70>
  m_fVol = nullptr;
 23f5b16:	2000      	movs	r0, #0
 23f5b18:	f8c5 0480 	str.w	r0, [r5, #1152]	; 0x480
}
 23f5b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f5b20:	1007aea0 	.word	0x1007aea0
 23f5b24:	1007aea4 	.word	0x1007aea4
 23f5b28:	1007ae98 	.word	0x1007ae98

023f5b2c <_ZN8FsVolume4openEPKci>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char* path, oflag_t oflag) {
 23f5b2c:	b538      	push	{r3, r4, r5, lr}
 23f5b2e:	4604      	mov	r4, r0
    Stream() {_timeout=1000;}
 23f5b30:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 23f5b34:	2000      	movs	r0, #0
 23f5b36:	e9c4 0501 	strd	r0, r5, [r4, #4]
  FsBaseFile() = default;  // cppcheck-suppress uninitMemberVar
 23f5b3a:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
 23f5b3e:	4620      	mov	r0, r4
 23f5b40:	4d03      	ldr	r5, [pc, #12]	; (23f5b50 <_ZN8FsVolume4openEPKci+0x24>)
 23f5b42:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
 23f5b46:	f7ff ff2b 	bl	23f59a0 <_ZN10FsBaseFile4openEP8FsVolumePKci>
  return tmpFile;
}
 23f5b4a:	4620      	mov	r0, r4
 23f5b4c:	bd38      	pop	{r3, r4, r5, pc}
 23f5b4e:	bf00      	nop
 23f5b50:	023fe780 	.word	0x023fe780

023f5b54 <_Z8sdCsInith>:
 */
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) { pinMode(pin, OUTPUT); }
 23f5b54:	2101      	movs	r1, #1
 23f5b56:	f003 bf71 	b.w	23f9a3c <pinMode>

023f5b5a <_Z9sdCsWritehb>:
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level ? HIGH : LOW);
 23f5b5a:	f003 bf80 	b.w	23f9a5e <digitalWrite>

023f5b5e <_ZN7FsCache4syncEv>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
 23f5b5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 23f5b60:	7803      	ldrb	r3, [r0, #0]
bool FsCache::sync() {
 23f5b62:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 23f5b64:	07da      	lsls	r2, r3, #31
 23f5b66:	d51e      	bpl.n	23f5ba6 <_ZN7FsCache4syncEv+0x48>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
 23f5b68:	f100 0210 	add.w	r2, r0, #16
 23f5b6c:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 23f5b70:	9201      	str	r2, [sp, #4]
 23f5b72:	f7fe f96e 	bl	23f3e52 <_ZN9SdSpiCard11writeSectorEmPKh>
 23f5b76:	9a01      	ldr	r2, [sp, #4]
 23f5b78:	4605      	mov	r5, r0
 23f5b7a:	b918      	cbnz	r0, 23f5b84 <_ZN7FsCache4syncEv+0x26>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 23f5b7c:	2500      	movs	r5, #0
}
 23f5b7e:	4628      	mov	r0, r5
 23f5b80:	b003      	add	sp, #12
 23f5b82:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 23f5b84:	7823      	ldrb	r3, [r4, #0]
 23f5b86:	079b      	lsls	r3, r3, #30
 23f5b88:	d404      	bmi.n	23f5b94 <_ZN7FsCache4syncEv+0x36>
    m_status &= ~CACHE_STATUS_DIRTY;
 23f5b8a:	7823      	ldrb	r3, [r4, #0]
 23f5b8c:	f023 0301 	bic.w	r3, r3, #1
 23f5b90:	7023      	strb	r3, [r4, #0]
 23f5b92:	e7f4      	b.n	23f5b7e <_ZN7FsCache4syncEv+0x20>
      if (!m_blockDev->writeSector(m_sector + m_mirrorOffset, m_buffer)) {
 23f5b94:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 23f5b98:	6860      	ldr	r0, [r4, #4]
 23f5b9a:	4419      	add	r1, r3
 23f5b9c:	f7fe f959 	bl	23f3e52 <_ZN9SdSpiCard11writeSectorEmPKh>
 23f5ba0:	2800      	cmp	r0, #0
 23f5ba2:	d1f2      	bne.n	23f5b8a <_ZN7FsCache4syncEv+0x2c>
 23f5ba4:	e7ea      	b.n	23f5b7c <_ZN7FsCache4syncEv+0x1e>
  return true;
 23f5ba6:	2501      	movs	r5, #1
 23f5ba8:	e7e9      	b.n	23f5b7e <_ZN7FsCache4syncEv+0x20>

023f5baa <_ZN7FsCache7prepareEmh>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
 23f5baa:	b570      	push	{r4, r5, r6, lr}
  if (!m_blockDev) {
 23f5bac:	6843      	ldr	r3, [r0, #4]
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
 23f5bae:	4604      	mov	r4, r0
 23f5bb0:	460e      	mov	r6, r1
 23f5bb2:	4615      	mov	r5, r2
  if (!m_blockDev) {
 23f5bb4:	b90b      	cbnz	r3, 23f5bba <_ZN7FsCache7prepareEmh+0x10>
  return nullptr;
 23f5bb6:	2000      	movs	r0, #0
}
 23f5bb8:	bd70      	pop	{r4, r5, r6, pc}
  if (m_sector != sector) {
 23f5bba:	6883      	ldr	r3, [r0, #8]
 23f5bbc:	428b      	cmp	r3, r1
 23f5bbe:	d008      	beq.n	23f5bd2 <_ZN7FsCache7prepareEmh+0x28>
    if (!sync()) {
 23f5bc0:	f7ff ffcd 	bl	23f5b5e <_ZN7FsCache4syncEv>
 23f5bc4:	2800      	cmp	r0, #0
 23f5bc6:	d0f6      	beq.n	23f5bb6 <_ZN7FsCache7prepareEmh+0xc>
    if (!(option & CACHE_OPTION_NO_READ)) {
 23f5bc8:	076b      	lsls	r3, r5, #29
 23f5bca:	d50a      	bpl.n	23f5be2 <_ZN7FsCache7prepareEmh+0x38>
    m_status = 0;
 23f5bcc:	2300      	movs	r3, #0
    m_sector = sector;
 23f5bce:	60a6      	str	r6, [r4, #8]
    m_status = 0;
 23f5bd0:	7023      	strb	r3, [r4, #0]
  m_status |= option & CACHE_STATUS_MASK;
 23f5bd2:	4620      	mov	r0, r4
 23f5bd4:	7822      	ldrb	r2, [r4, #0]
 23f5bd6:	f005 0503 	and.w	r5, r5, #3
 23f5bda:	4315      	orrs	r5, r2
 23f5bdc:	f800 5b10 	strb.w	r5, [r0], #16
  return m_buffer;
 23f5be0:	e7ea      	b.n	23f5bb8 <_ZN7FsCache7prepareEmh+0xe>
      if (!m_blockDev->readSector(sector, m_buffer)) {
 23f5be2:	4631      	mov	r1, r6
 23f5be4:	6860      	ldr	r0, [r4, #4]
 23f5be6:	f104 0210 	add.w	r2, r4, #16
 23f5bea:	f7fe f8eb 	bl	23f3dc4 <_ZN9SdSpiCard10readSectorEmPh>
 23f5bee:	2800      	cmp	r0, #0
 23f5bf0:	d1ec      	bne.n	23f5bcc <_ZN7FsCache7prepareEmh+0x22>
 23f5bf2:	e7e0      	b.n	23f5bb6 <_ZN7FsCache7prepareEmh+0xc>

023f5bf4 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
 23f5bf4:	4770      	bx	lr

023f5bf6 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
 23f5bf6:	b510      	push	{r4, lr}
 23f5bf8:	4604      	mov	r4, r0
}
 23f5bfa:	2120      	movs	r1, #32
 23f5bfc:	f7ee fc15 	bl	23e442a <_ZdlPvj>
 23f5c00:	4620      	mov	r0, r4
 23f5c02:	bd10      	pop	{r4, pc}

023f5c04 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
 23f5c04:	b530      	push	{r4, r5, lr}
 23f5c06:	b085      	sub	sp, #20
 23f5c08:	4604      	mov	r4, r0
 23f5c0a:	9808      	ldr	r0, [sp, #32]
        if (!context) {
 23f5c0c:	b160      	cbz	r0, 23f5c28 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
 23f5c0e:	6840      	ldr	r0, [r0, #4]
 23f5c10:	b150      	cbz	r0, 23f5c28 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
 23f5c12:	6885      	ldr	r5, [r0, #8]
 23f5c14:	b145      	cbz	r5, 23f5c28 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
 23f5c16:	e9cd 4102 	strd	r4, r1, [sp, #8]
 23f5c1a:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f5c1e:	68c4      	ldr	r4, [r0, #12]
 23f5c20:	466a      	mov	r2, sp
 23f5c22:	ab01      	add	r3, sp, #4
 23f5c24:	a902      	add	r1, sp, #8
 23f5c26:	47a0      	blx	r4
    }
 23f5c28:	b005      	add	sp, #20
 23f5c2a:	bd30      	pop	{r4, r5, pc}

023f5c2c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f5c2c:	b530      	push	{r4, r5, lr}
 23f5c2e:	6813      	ldr	r3, [r2, #0]
	    return __source._M_access<_Functor*>();
 23f5c30:	6800      	ldr	r0, [r0, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f5c32:	b085      	sub	sp, #20
 23f5c34:	9301      	str	r3, [sp, #4]
      if (_M_empty())
 23f5c36:	6883      	ldr	r3, [r0, #8]
 23f5c38:	e9d1 4500 	ldrd	r4, r5, [r1]
 23f5c3c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 23f5c40:	b90b      	cbnz	r3, 23f5c46 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
 23f5c42:	f004 f835 	bl	23f9cb0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f5c46:	68c3      	ldr	r3, [r0, #12]
 23f5c48:	aa01      	add	r2, sp, #4
 23f5c4a:	a902      	add	r1, sp, #8
 23f5c4c:	4798      	blx	r3
      }
 23f5c4e:	b005      	add	sp, #20
 23f5c50:	bd30      	pop	{r4, r5, pc}

023f5c52 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
 23f5c52:	2a01      	cmp	r2, #1
 23f5c54:	d102      	bne.n	23f5c5c <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f5c56:	6001      	str	r1, [r0, #0]
      }
 23f5c58:	2000      	movs	r0, #0
 23f5c5a:	4770      	bx	lr
	  switch (__op)
 23f5c5c:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23f5c5e:	bf04      	itt	eq
 23f5c60:	680b      	ldreq	r3, [r1, #0]
 23f5c62:	6003      	streq	r3, [r0, #0]
	      break;
 23f5c64:	e7f8      	b.n	23f5c58 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

023f5c66 <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23f5c66:	6803      	ldr	r3, [r0, #0]
 23f5c68:	6812      	ldr	r2, [r2, #0]
 23f5c6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f5c6e:	4718      	bx	r3

023f5c70 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23f5c70:	b510      	push	{r4, lr}
      if (_M_manager)
 23f5c72:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23f5c74:	4604      	mov	r4, r0
      if (_M_manager)
 23f5c76:	b113      	cbz	r3, 23f5c7e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23f5c78:	2203      	movs	r2, #3
 23f5c7a:	4601      	mov	r1, r0
 23f5c7c:	4798      	blx	r3
    }
 23f5c7e:	4620      	mov	r0, r4
 23f5c80:	bd10      	pop	{r4, pc}

023f5c82 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
 23f5c82:	b510      	push	{r4, lr}
            delete callableWrapper;
 23f5c84:	4604      	mov	r4, r0
 23f5c86:	b138      	cbz	r0, 23f5c98 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
 23f5c88:	f7ff fff2 	bl	23f5c70 <_ZNSt14_Function_baseD1Ev>
 23f5c8c:	4620      	mov	r0, r4
        };
 23f5c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
 23f5c92:	2110      	movs	r1, #16
 23f5c94:	f7ee bbc9 	b.w	23e442a <_ZdlPvj>
        };
 23f5c98:	bd10      	pop	{r4, pc}

023f5c9a <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
    va_start(args, fmt);
    log(level, fmt, args);
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
 23f5c9a:	b510      	push	{r4, lr}
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23f5c9c:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
 23f5ca0:	4604      	mov	r4, r0
 23f5ca2:	4608      	mov	r0, r1
    attr.flags = 0;
 23f5ca4:	2100      	movs	r1, #0
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
 23f5ca6:	b08a      	sub	sp, #40	; 0x28
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f5ca8:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
 23f5cac:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f5cb0:	460b      	mov	r3, r1
 23f5cb2:	aa02      	add	r2, sp, #8
 23f5cb4:	6821      	ldr	r1, [r4, #0]
 23f5cb6:	f001 f929 	bl	23f6f0c <log_message_v>
}
 23f5cba:	b00a      	add	sp, #40	; 0x28
 23f5cbc:	bd10      	pop	{r4, pc}

023f5cbe <_ZNK5spark6Logger4infoEPKcz>:
inline void spark::Logger::info(const char *fmt, ...) const {
 23f5cbe:	b40e      	push	{r1, r2, r3}
 23f5cc0:	b503      	push	{r0, r1, lr}
 23f5cc2:	ab03      	add	r3, sp, #12
 23f5cc4:	f853 2b04 	ldr.w	r2, [r3], #4
    log(LOG_LEVEL_INFO, fmt, args);
 23f5cc8:	211e      	movs	r1, #30
    va_start(args, fmt);
 23f5cca:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_INFO, fmt, args);
 23f5ccc:	f7ff ffe5 	bl	23f5c9a <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
 23f5cd0:	b002      	add	sp, #8
 23f5cd2:	f85d eb04 	ldr.w	lr, [sp], #4
 23f5cd6:	b003      	add	sp, #12
 23f5cd8:	4770      	bx	lr

023f5cda <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
 23f5cda:	b40e      	push	{r1, r2, r3}
 23f5cdc:	b503      	push	{r0, r1, lr}
 23f5cde:	ab03      	add	r3, sp, #12
 23f5ce0:	f853 2b04 	ldr.w	r2, [r3], #4
    log(LOG_LEVEL_ERROR, fmt, args);
 23f5ce4:	2132      	movs	r1, #50	; 0x32
    va_start(args, fmt);
 23f5ce6:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
 23f5ce8:	f7ff ffd7 	bl	23f5c9a <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
 23f5cec:	b002      	add	sp, #8
 23f5cee:	f85d eb04 	ldr.w	lr, [sp], #4
 23f5cf2:	b003      	add	sp, #12
 23f5cf4:	4770      	bx	lr

023f5cf6 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
 23f5cf6:	b40e      	push	{r1, r2, r3}
 23f5cf8:	b503      	push	{r0, r1, lr}
 23f5cfa:	ab03      	add	r3, sp, #12
 23f5cfc:	f853 2b04 	ldr.w	r2, [r3], #4
    log(LOG_LEVEL_TRACE, fmt, args);
 23f5d00:	2101      	movs	r1, #1
    va_start(args, fmt);
 23f5d02:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
 23f5d04:	f7ff ffc9 	bl	23f5c9a <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
 23f5d08:	b002      	add	sp, #8
 23f5d0a:	f85d eb04 	ldr.w	lr, [sp], #4
 23f5d0e:	b003      	add	sp, #12
 23f5d10:	4770      	bx	lr
	...

023f5d14 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
 23f5d14:	7202      	strb	r2, [r0, #8]
 23f5d16:	22ff      	movs	r2, #255	; 0xff
 23f5d18:	8142      	strh	r2, [r0, #10]
 23f5d1a:	2200      	movs	r2, #0
 23f5d1c:	b510      	push	{r4, lr}
 23f5d1e:	e9c0 2203 	strd	r2, r2, [r0, #12]
 23f5d22:	6142      	str	r2, [r0, #20]
 23f5d24:	7602      	strb	r2, [r0, #24]
 23f5d26:	61c2      	str	r2, [r0, #28]
    instance = this;
 23f5d28:	4a02      	ldr	r2, [pc, #8]	; (23f5d34 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
 23f5d2a:	4c03      	ldr	r4, [pc, #12]	; (23f5d38 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
 23f5d2c:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
 23f5d2e:	e9c0 4100 	strd	r4, r1, [r0]
}
 23f5d32:	bd10      	pop	{r4, pc}
 23f5d34:	1007aeb0 	.word	0x1007aeb0
 23f5d38:	023ff85c 	.word	0x023ff85c

023f5d3c <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
 23f5d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23f5d40:	f89d 8020 	ldrb.w	r8, [sp, #32]
 23f5d44:	4604      	mov	r4, r0
 23f5d46:	4689      	mov	r9, r1
 23f5d48:	4616      	mov	r6, r2
 23f5d4a:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
 23f5d4c:	f1b8 0f00 	cmp.w	r8, #0
 23f5d50:	d002      	beq.n	23f5d58 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
 23f5d52:	6840      	ldr	r0, [r0, #4]
 23f5d54:	f002 fa64 	bl	23f8220 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
 23f5d58:	7a21      	ldrb	r1, [r4, #8]
 23f5d5a:	6860      	ldr	r0, [r4, #4]
 23f5d5c:	f002 fa52 	bl	23f8204 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
 23f5d60:	6860      	ldr	r0, [r4, #4]
 23f5d62:	4649      	mov	r1, r9
 23f5d64:	6803      	ldr	r3, [r0, #0]
 23f5d66:	689b      	ldr	r3, [r3, #8]
 23f5d68:	4798      	blx	r3
    int stat = wire.endTransmission(false);
 23f5d6a:	2100      	movs	r1, #0
 23f5d6c:	6860      	ldr	r0, [r4, #4]
 23f5d6e:	f002 fa50 	bl	23f8212 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
 23f5d72:	4605      	mov	r5, r0
 23f5d74:	bb00      	cbnz	r0, 23f5db8 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
 23f5d76:	2301      	movs	r3, #1
 23f5d78:	463a      	mov	r2, r7
 23f5d7a:	7a21      	ldrb	r1, [r4, #8]
 23f5d7c:	6860      	ldr	r0, [r4, #4]
 23f5d7e:	f002 fa2a 	bl	23f81d6 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
 23f5d82:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
 23f5d84:	4603      	mov	r3, r0
        if (count == num) {
 23f5d86:	d109      	bne.n	23f5d9c <_ZN6AB180513readRegistersEhPhjb+0x60>
 23f5d88:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
 23f5d8a:	42be      	cmp	r6, r7
 23f5d8c:	d01c      	beq.n	23f5dc8 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
 23f5d8e:	6860      	ldr	r0, [r4, #4]
 23f5d90:	6803      	ldr	r3, [r0, #0]
 23f5d92:	695b      	ldr	r3, [r3, #20]
 23f5d94:	4798      	blx	r3
 23f5d96:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
 23f5d9a:	e7f6      	b.n	23f5d8a <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
 23f5d9c:	464a      	mov	r2, r9
 23f5d9e:	490b      	ldr	r1, [pc, #44]	; (23f5dcc <_ZN6AB180513readRegistersEhPhjb+0x90>)
 23f5da0:	480b      	ldr	r0, [pc, #44]	; (23f5dd0 <_ZN6AB180513readRegistersEhPhjb+0x94>)
 23f5da2:	f7ff ff9a 	bl	23f5cda <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
 23f5da6:	f1b8 0f00 	cmp.w	r8, #0
 23f5daa:	d002      	beq.n	23f5db2 <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
 23f5dac:	6860      	ldr	r0, [r4, #4]
 23f5dae:	f002 fa40 	bl	23f8232 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
 23f5db2:	4628      	mov	r0, r5
 23f5db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
 23f5db8:	4603      	mov	r3, r0
 23f5dba:	464a      	mov	r2, r9
 23f5dbc:	4905      	ldr	r1, [pc, #20]	; (23f5dd4 <_ZN6AB180513readRegistersEhPhjb+0x98>)
 23f5dbe:	4804      	ldr	r0, [pc, #16]	; (23f5dd0 <_ZN6AB180513readRegistersEhPhjb+0x94>)
 23f5dc0:	f7ff ff8b 	bl	23f5cda <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
 23f5dc4:	2500      	movs	r5, #0
 23f5dc6:	e7ee      	b.n	23f5da6 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
 23f5dc8:	2501      	movs	r5, #1
 23f5dca:	e7ec      	b.n	23f5da6 <_ZN6AB180513readRegistersEhPhjb+0x6a>
 23f5dcc:	023ff686 	.word	0x023ff686
 23f5dd0:	1007aeac 	.word	0x1007aeac
 23f5dd4:	023ff6ab 	.word	0x023ff6ab

023f5dd8 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
 23f5dd8:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
 23f5dda:	9300      	str	r3, [sp, #0]
 23f5ddc:	2301      	movs	r3, #1
 23f5dde:	f7ff ffad 	bl	23f5d3c <_ZN6AB180513readRegistersEhPhjb>
}
 23f5de2:	b003      	add	sp, #12
 23f5de4:	f85d fb04 	ldr.w	pc, [sp], #4

023f5de8 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
 23f5de8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
 23f5dea:	8943      	ldrh	r3, [r0, #10]
bool AB1805::detectChip() {
 23f5dec:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
 23f5dee:	2bff      	cmp	r3, #255	; 0xff
 23f5df0:	d010      	beq.n	23f5e14 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
 23f5df2:	4e19      	ldr	r6, [pc, #100]	; (23f5e58 <_ZN6AB180510detectChipEv+0x70>)
 23f5df4:	4d19      	ldr	r5, [pc, #100]	; (23f5e5c <_ZN6AB180510detectChipEv+0x74>)
 23f5df6:	f000 fcc3 	bl	23f6780 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
 23f5dfa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 23f5dfe:	d209      	bcs.n	23f5e14 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
 23f5e00:	8960      	ldrh	r0, [r4, #10]
 23f5e02:	f003 fe45 	bl	23f9a90 <digitalRead>
 23f5e06:	2801      	cmp	r0, #1
 23f5e08:	d004      	beq.n	23f5e14 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
 23f5e0a:	4631      	mov	r1, r6
 23f5e0c:	4628      	mov	r0, r5
 23f5e0e:	f7ff ff56 	bl	23f5cbe <_ZNK5spark6Logger4infoEPKcz>
 23f5e12:	e7f0      	b.n	23f5df6 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
 23f5e14:	2301      	movs	r3, #1
 23f5e16:	2128      	movs	r1, #40	; 0x28
 23f5e18:	4620      	mov	r0, r4
 23f5e1a:	f10d 0207 	add.w	r2, sp, #7
 23f5e1e:	f7ff ffdb 	bl	23f5dd8 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
 23f5e22:	b930      	cbnz	r0, 23f5e32 <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
 23f5e24:	480d      	ldr	r0, [pc, #52]	; (23f5e5c <_ZN6AB180510detectChipEv+0x74>)
 23f5e26:	490e      	ldr	r1, [pc, #56]	; (23f5e60 <_ZN6AB180510detectChipEv+0x78>)
 23f5e28:	f7ff ff49 	bl	23f5cbe <_ZNK5spark6Logger4infoEPKcz>
 23f5e2c:	2000      	movs	r0, #0
}
 23f5e2e:	b002      	add	sp, #8
 23f5e30:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
 23f5e32:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23f5e36:	2b18      	cmp	r3, #24
 23f5e38:	d1f4      	bne.n	23f5e24 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
 23f5e3a:	2301      	movs	r3, #1
 23f5e3c:	2129      	movs	r1, #41	; 0x29
 23f5e3e:	4620      	mov	r0, r4
 23f5e40:	f10d 0207 	add.w	r2, sp, #7
 23f5e44:	f7ff ffc8 	bl	23f5dd8 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
 23f5e48:	2800      	cmp	r0, #0
 23f5e4a:	d0eb      	beq.n	23f5e24 <_ZN6AB180510detectChipEv+0x3c>
 23f5e4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23f5e50:	2b05      	cmp	r3, #5
 23f5e52:	d1e7      	bne.n	23f5e24 <_ZN6AB180510detectChipEv+0x3c>
 23f5e54:	e7eb      	b.n	23f5e2e <_ZN6AB180510detectChipEv+0x46>
 23f5e56:	bf00      	nop
 23f5e58:	023ff6cf 	.word	0x023ff6cf
 23f5e5c:	1007aeac 	.word	0x1007aeac
 23f5e60:	023ff6e4 	.word	0x023ff6e4

023f5e64 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
 23f5e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f5e68:	f89d 8018 	ldrb.w	r8, [sp, #24]
 23f5e6c:	4604      	mov	r4, r0
 23f5e6e:	460f      	mov	r7, r1
 23f5e70:	4615      	mov	r5, r2
 23f5e72:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
 23f5e74:	f1b8 0f00 	cmp.w	r8, #0
 23f5e78:	d002      	beq.n	23f5e80 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
 23f5e7a:	6840      	ldr	r0, [r0, #4]
 23f5e7c:	f002 f9d0 	bl	23f8220 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
 23f5e80:	7a21      	ldrb	r1, [r4, #8]
 23f5e82:	6860      	ldr	r0, [r4, #4]
 23f5e84:	f002 f9be 	bl	23f8204 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
 23f5e88:	6860      	ldr	r0, [r4, #4]
 23f5e8a:	4639      	mov	r1, r7
 23f5e8c:	6803      	ldr	r3, [r0, #0]
 23f5e8e:	442e      	add	r6, r5
 23f5e90:	689b      	ldr	r3, [r3, #8]
 23f5e92:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
 23f5e94:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
 23f5e96:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
 23f5e98:	d005      	beq.n	23f5ea6 <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
 23f5e9a:	6803      	ldr	r3, [r0, #0]
 23f5e9c:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f5ea0:	689b      	ldr	r3, [r3, #8]
 23f5ea2:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
 23f5ea4:	e7f6      	b.n	23f5e94 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
 23f5ea6:	2101      	movs	r1, #1
 23f5ea8:	f002 f9b3 	bl	23f8212 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
 23f5eac:	4603      	mov	r3, r0
 23f5eae:	b170      	cbz	r0, 23f5ece <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
 23f5eb0:	463a      	mov	r2, r7
 23f5eb2:	4908      	ldr	r1, [pc, #32]	; (23f5ed4 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
 23f5eb4:	4808      	ldr	r0, [pc, #32]	; (23f5ed8 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
 23f5eb6:	f7ff ff10 	bl	23f5cda <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
 23f5eba:	2500      	movs	r5, #0
    }

    if (lock) {
 23f5ebc:	f1b8 0f00 	cmp.w	r8, #0
 23f5ec0:	d002      	beq.n	23f5ec8 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
 23f5ec2:	6860      	ldr	r0, [r4, #4]
 23f5ec4:	f002 f9b5 	bl	23f8232 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
 23f5ec8:	4628      	mov	r0, r5
 23f5eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
 23f5ece:	2501      	movs	r5, #1
 23f5ed0:	e7f4      	b.n	23f5ebc <_ZN6AB180514writeRegistersEhPKhjb+0x58>
 23f5ed2:	bf00      	nop
 23f5ed4:	023ff6f1 	.word	0x023ff6f1
 23f5ed8:	1007aeac 	.word	0x1007aeac

023f5edc <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
 23f5edc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f5ede:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
 23f5ee2:	9300      	str	r3, [sp, #0]
 23f5ee4:	f10d 020f 	add.w	r2, sp, #15
 23f5ee8:	2301      	movs	r3, #1
 23f5eea:	f7ff ffbb 	bl	23f5e64 <_ZN6AB180514writeRegistersEhPKhjb>
}
 23f5eee:	b005      	add	sp, #20
 23f5ef0:	f85d fb04 	ldr.w	pc, [sp], #4

023f5ef4 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
 23f5ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f5ef6:	460c      	mov	r4, r1
 23f5ef8:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
 23f5efa:	460a      	mov	r2, r1
 23f5efc:	481a      	ldr	r0, [pc, #104]	; (23f5f68 <_ZN6AB18056setWDTEi+0x74>)
 23f5efe:	491b      	ldr	r1, [pc, #108]	; (23f5f6c <_ZN6AB18056setWDTEi+0x78>)
 23f5f00:	f7ff fedd 	bl	23f5cbe <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
 23f5f04:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
 23f5f06:	bfb8      	it	lt
 23f5f08:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
 23f5f0a:	b97c      	cbnz	r4, 23f5f2c <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
 23f5f0c:	2301      	movs	r3, #1
 23f5f0e:	4622      	mov	r2, r4
 23f5f10:	211b      	movs	r1, #27
 23f5f12:	4628      	mov	r0, r5
 23f5f14:	f7ff ffe2 	bl	23f5edc <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
 23f5f18:	4915      	ldr	r1, [pc, #84]	; (23f5f70 <_ZN6AB18056setWDTEi+0x7c>)
 23f5f1a:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
 23f5f1c:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
 23f5f1e:	4812      	ldr	r0, [pc, #72]	; (23f5f68 <_ZN6AB18056setWDTEi+0x74>)
 23f5f20:	f7ff fee9 	bl	23f5cf6 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
 23f5f24:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
 23f5f26:	616c      	str	r4, [r5, #20]
}
 23f5f28:	4630      	mov	r0, r6
 23f5f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
 23f5f2c:	2c03      	cmp	r4, #3
 23f5f2e:	dd19      	ble.n	23f5f64 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
 23f5f30:	10a7      	asrs	r7, r4, #2
 23f5f32:	2f1f      	cmp	r7, #31
 23f5f34:	bfa8      	it	ge
 23f5f36:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
 23f5f38:	00ba      	lsls	r2, r7, #2
 23f5f3a:	f062 027c 	orn	r2, r2, #124	; 0x7c
 23f5f3e:	2301      	movs	r3, #1
 23f5f40:	211b      	movs	r1, #27
 23f5f42:	b2d2      	uxtb	r2, r2
 23f5f44:	4628      	mov	r0, r5
 23f5f46:	f7ff ffc9 	bl	23f5edc <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
 23f5f4a:	463a      	mov	r2, r7
 23f5f4c:	4603      	mov	r3, r0
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
 23f5f4e:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
 23f5f50:	4908      	ldr	r1, [pc, #32]	; (23f5f74 <_ZN6AB18056setWDTEi+0x80>)
 23f5f52:	4805      	ldr	r0, [pc, #20]	; (23f5f68 <_ZN6AB18056setWDTEi+0x74>)
 23f5f54:	f7ff fecf 	bl	23f5cf6 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
 23f5f58:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 23f5f5c:	435f      	muls	r7, r3
        watchdogSecs = seconds;
 23f5f5e:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
 23f5f60:	616f      	str	r7, [r5, #20]
 23f5f62:	e7e1      	b.n	23f5f28 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
 23f5f64:	2701      	movs	r7, #1
 23f5f66:	e7e7      	b.n	23f5f38 <_ZN6AB18056setWDTEi+0x44>
 23f5f68:	1007aeac 	.word	0x1007aeac
 23f5f6c:	023ff716 	.word	0x023ff716
 23f5f70:	023ff720 	.word	0x023ff720
 23f5f74:	023ff73c 	.word	0x023ff73c

023f5f78 <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
 23f5f78:	4b06      	ldr	r3, [pc, #24]	; (23f5f94 <_ZN6AB180517systemEventStaticEyi+0x1c>)
 23f5f7a:	681a      	ldr	r2, [r3, #0]
 23f5f7c:	b14a      	cbz	r2, 23f5f92 <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
 23f5f7e:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 23f5f82:	430b      	orrs	r3, r1
 23f5f84:	d105      	bne.n	23f5f92 <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
 23f5f86:	68d3      	ldr	r3, [r2, #12]
 23f5f88:	b11b      	cbz	r3, 23f5f92 <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
 23f5f8a:	2100      	movs	r1, #0
 23f5f8c:	4610      	mov	r0, r2
 23f5f8e:	f7ff bfb1 	b.w	23f5ef4 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
 23f5f92:	4770      	bx	lr
 23f5f94:	1007aeb0 	.word	0x1007aeb0

023f5f98 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
 23f5f98:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 23f5f9c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 23f5fa0:	4605      	mov	r5, r0
 23f5fa2:	4616      	mov	r6, r2
 23f5fa4:	461f      	mov	r7, r3
    if (lock) {
 23f5fa6:	f1b8 0f00 	cmp.w	r8, #0
 23f5faa:	d004      	beq.n	23f5fb6 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
 23f5fac:	6840      	ldr	r0, [r0, #4]
 23f5fae:	9101      	str	r1, [sp, #4]
 23f5fb0:	f002 f936 	bl	23f8220 <_ZN7TwoWire4lockEv>
 23f5fb4:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
 23f5fb6:	2300      	movs	r3, #0
 23f5fb8:	4628      	mov	r0, r5
 23f5fba:	f10d 020f 	add.w	r2, sp, #15
 23f5fbe:	9101      	str	r1, [sp, #4]
 23f5fc0:	f7ff ff0a 	bl	23f5dd8 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
 23f5fc4:	4604      	mov	r4, r0
 23f5fc6:	b160      	cbz	r0, 23f5fe2 <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
 23f5fc8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 23f5fcc:	ea03 0206 	and.w	r2, r3, r6
 23f5fd0:	433a      	orrs	r2, r7
        if (newValue != value) {
 23f5fd2:	4293      	cmp	r3, r2
 23f5fd4:	d005      	beq.n	23f5fe2 <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
 23f5fd6:	2300      	movs	r3, #0
 23f5fd8:	4628      	mov	r0, r5
 23f5fda:	9901      	ldr	r1, [sp, #4]
 23f5fdc:	f7ff ff7e 	bl	23f5edc <_ZN6AB180513writeRegisterEhhb>
 23f5fe0:	4604      	mov	r4, r0
    if (lock) {
 23f5fe2:	f1b8 0f00 	cmp.w	r8, #0
 23f5fe6:	d002      	beq.n	23f5fee <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
 23f5fe8:	6868      	ldr	r0, [r5, #4]
 23f5fea:	f002 f922 	bl	23f8232 <_ZN7TwoWire6unlockEv>
}
 23f5fee:	4620      	mov	r0, r4
 23f5ff0:	b004      	add	sp, #16
 23f5ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f5ff6 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
 23f5ff6:	b513      	push	{r0, r1, r4, lr}
 23f5ff8:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
 23f5ffa:	f10d 0207 	add.w	r2, sp, #7
 23f5ffe:	f7ff feeb 	bl	23f5dd8 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
 23f6002:	b128      	cbz	r0, 23f6010 <_ZN6AB180510isBitClearEhhb+0x1a>
 23f6004:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23f6008:	421c      	tst	r4, r3
 23f600a:	bf0c      	ite	eq
 23f600c:	2001      	moveq	r0, #1
 23f600e:	2000      	movne	r0, #0
}
 23f6010:	b002      	add	sp, #8
 23f6012:	bd10      	pop	{r4, pc}

023f6014 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
 23f6014:	b513      	push	{r0, r1, r4, lr}
 23f6016:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
 23f6018:	f10d 0207 	add.w	r2, sp, #7
 23f601c:	f7ff fedc 	bl	23f5dd8 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
 23f6020:	b128      	cbz	r0, 23f602e <_ZN6AB18058isBitSetEhhb+0x1a>
 23f6022:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23f6026:	421c      	tst	r4, r3
 23f6028:	bf14      	ite	ne
 23f602a:	2001      	movne	r0, #1
 23f602c:	2000      	moveq	r0, #0
}
 23f602e:	b002      	add	sp, #8
 23f6030:	bd10      	pop	{r4, pc}

023f6032 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
 23f6032:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
 23f6034:	43d2      	mvns	r2, r2
 23f6036:	9300      	str	r3, [sp, #0]
 23f6038:	b2d2      	uxtb	r2, r2
 23f603a:	2300      	movs	r3, #0
 23f603c:	f7ff ffac 	bl	23f5f98 <_ZN6AB180512maskRegisterEhhhb>
}
 23f6040:	b003      	add	sp, #12
 23f6042:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023f6048 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
 23f6048:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
 23f604a:	2301      	movs	r3, #1
 23f604c:	210f      	movs	r1, #15
 23f604e:	f10d 0207 	add.w	r2, sp, #7
bool AB1805::updateWakeReason() {
 23f6052:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
 23f6054:	f7ff fec0 	bl	23f5dd8 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
 23f6058:	4605      	mov	r5, r0
 23f605a:	b938      	cbnz	r0, 23f606c <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
 23f605c:	22af      	movs	r2, #175	; 0xaf
 23f605e:	491e      	ldr	r1, [pc, #120]	; (23f60d8 <_ZN6AB180516updateWakeReasonEv+0x90>)
 23f6060:	481e      	ldr	r0, [pc, #120]	; (23f60dc <_ZN6AB180516updateWakeReasonEv+0x94>)
 23f6062:	f7ff fe3a 	bl	23f5cda <_ZNK5spark6Logger5errorEPKcz>
}
 23f6066:	4628      	mov	r0, r5
 23f6068:	b003      	add	sp, #12
 23f606a:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
 23f606c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23f6070:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
 23f6074:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
 23f6078:	d00b      	beq.n	23f6092 <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
 23f607a:	2220      	movs	r2, #32
 23f607c:	210f      	movs	r1, #15
 23f607e:	4620      	mov	r0, r4
        wakeReason = WakeReason::WATCHDOG;
 23f6080:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
 23f6082:	f7ff ffd6 	bl	23f6032 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
 23f6086:	4a16      	ldr	r2, [pc, #88]	; (23f60e0 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
 23f6088:	4916      	ldr	r1, [pc, #88]	; (23f60e4 <_ZN6AB180516updateWakeReasonEv+0x9c>)
 23f608a:	4814      	ldr	r0, [pc, #80]	; (23f60dc <_ZN6AB180516updateWakeReasonEv+0x94>)
 23f608c:	f7ff fe17 	bl	23f5cbe <_ZNK5spark6Logger4infoEPKcz>
 23f6090:	e7e9      	b.n	23f6066 <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
 23f6092:	2208      	movs	r2, #8
 23f6094:	2117      	movs	r1, #23
 23f6096:	4620      	mov	r0, r4
 23f6098:	f7ff ffbc 	bl	23f6014 <_ZN6AB18058isBitSetEhhb>
 23f609c:	b118      	cbz	r0, 23f60a6 <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
 23f609e:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
 23f60a0:	4a11      	ldr	r2, [pc, #68]	; (23f60e8 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
 23f60a2:	61e3      	str	r3, [r4, #28]
 23f60a4:	e7f0      	b.n	23f6088 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
 23f60a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23f60aa:	071a      	lsls	r2, r3, #28
 23f60ac:	d509      	bpl.n	23f60c2 <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
 23f60ae:	2303      	movs	r3, #3
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
 23f60b0:	2208      	movs	r2, #8
        wakeReason = WakeReason::COUNTDOWN_TIMER;
 23f60b2:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
 23f60b4:	210f      	movs	r1, #15
 23f60b6:	2301      	movs	r3, #1
 23f60b8:	4620      	mov	r0, r4
 23f60ba:	f7ff ffba 	bl	23f6032 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
 23f60be:	4a0b      	ldr	r2, [pc, #44]	; (23f60ec <_ZN6AB180516updateWakeReasonEv+0xa4>)
 23f60c0:	e7e2      	b.n	23f6088 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
 23f60c2:	075b      	lsls	r3, r3, #29
 23f60c4:	d5cf      	bpl.n	23f6066 <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
 23f60c6:	2204      	movs	r2, #4
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
 23f60c8:	2301      	movs	r3, #1
        wakeReason = WakeReason::ALARM;
 23f60ca:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
 23f60cc:	210f      	movs	r1, #15
 23f60ce:	4620      	mov	r0, r4
 23f60d0:	f7ff ffaf 	bl	23f6032 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
 23f60d4:	4a06      	ldr	r2, [pc, #24]	; (23f60f0 <_ZN6AB180516updateWakeReasonEv+0xa8>)
 23f60d6:	e7d7      	b.n	23f6088 <_ZN6AB180516updateWakeReasonEv+0x40>
 23f60d8:	023ff78f 	.word	0x023ff78f
 23f60dc:	1007aeac 	.word	0x1007aeac
 23f60e0:	023ff760 	.word	0x023ff760
 23f60e4:	023ff7ae 	.word	0x023ff7ae
 23f60e8:	023ff769 	.word	0x023ff769
 23f60ec:	023ff779 	.word	0x023ff779
 23f60f0:	023ff789 	.word	0x023ff789

023f60f4 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
 23f60f4:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
 23f60f6:	9300      	str	r3, [sp, #0]
 23f60f8:	4613      	mov	r3, r2
 23f60fa:	22ff      	movs	r2, #255	; 0xff
 23f60fc:	f7ff ff4c 	bl	23f5f98 <_ZN6AB180512maskRegisterEhhhb>
}
 23f6100:	b003      	add	sp, #12
 23f6102:	f85d fb04 	ldr.w	pc, [sp], #4

023f6106 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
 23f6106:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f610a:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
 23f610e:	4605      	mov	r5, r0
 23f6110:	460c      	mov	r4, r1
 23f6112:	4691      	mov	r9, r2
 23f6114:	461f      	mov	r7, r3
    if (lock) {
 23f6116:	f1ba 0f00 	cmp.w	sl, #0
 23f611a:	d002      	beq.n	23f6122 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
 23f611c:	6840      	ldr	r0, [r0, #4]
 23f611e:	f002 f87f 	bl	23f8220 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
 23f6122:	b307      	cbz	r7, 23f6166 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
 23f6124:	2f20      	cmp	r7, #32
 23f6126:	463e      	mov	r6, r7
 23f6128:	bf28      	it	cs
 23f612a:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
 23f612c:	2c7f      	cmp	r4, #127	; 0x7f
 23f612e:	d826      	bhi.n	23f617e <_ZN6AB18057readRamEjPhjb+0x78>
 23f6130:	1933      	adds	r3, r6, r4
 23f6132:	2b80      	cmp	r3, #128	; 0x80
 23f6134:	d901      	bls.n	23f613a <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
 23f6136:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
 23f613a:	2301      	movs	r3, #1
 23f613c:	2204      	movs	r2, #4
 23f613e:	213f      	movs	r1, #63	; 0x3f
 23f6140:	4628      	mov	r0, r5
 23f6142:	f7ff ff76 	bl	23f6032 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
 23f6146:	2300      	movs	r3, #0
 23f6148:	f064 017f 	orn	r1, r4, #127	; 0x7f
 23f614c:	9300      	str	r3, [sp, #0]
 23f614e:	464a      	mov	r2, r9
 23f6150:	4633      	mov	r3, r6
 23f6152:	4628      	mov	r0, r5
 23f6154:	b2c9      	uxtb	r1, r1
 23f6156:	f7ff fdf1 	bl	23f5d3c <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
 23f615a:	4680      	mov	r8, r0
 23f615c:	b128      	cbz	r0, 23f616a <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
 23f615e:	4434      	add	r4, r6
        dataLen -= count;
 23f6160:	1bbf      	subs	r7, r7, r6
        data += count;
 23f6162:	44b1      	add	r9, r6
    while(dataLen > 0) {
 23f6164:	e7dd      	b.n	23f6122 <_ZN6AB18057readRamEjPhjb+0x1c>
 23f6166:	f04f 0801 	mov.w	r8, #1
    if (lock) {
 23f616a:	f1ba 0f00 	cmp.w	sl, #0
 23f616e:	d002      	beq.n	23f6176 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
 23f6170:	6868      	ldr	r0, [r5, #4]
 23f6172:	f002 f85e 	bl	23f8232 <_ZN7TwoWire6unlockEv>
}
 23f6176:	4640      	mov	r0, r8
 23f6178:	b002      	add	sp, #8
 23f617a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
 23f617e:	2301      	movs	r3, #1
 23f6180:	2204      	movs	r2, #4
 23f6182:	213f      	movs	r1, #63	; 0x3f
 23f6184:	4628      	mov	r0, r5
 23f6186:	f7ff ffb5 	bl	23f60f4 <_ZN6AB180514setRegisterBitEhhb>
 23f618a:	e7dc      	b.n	23f6146 <_ZN6AB18057readRamEjPhjb+0x40>

023f618c <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
 23f618c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f6190:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
 23f6194:	4605      	mov	r5, r0
 23f6196:	460c      	mov	r4, r1
 23f6198:	4691      	mov	r9, r2
 23f619a:	461f      	mov	r7, r3
    if (lock) {
 23f619c:	f1ba 0f00 	cmp.w	sl, #0
 23f61a0:	d002      	beq.n	23f61a8 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
 23f61a2:	6840      	ldr	r0, [r0, #4]
 23f61a4:	f002 f83c 	bl	23f8220 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
 23f61a8:	b307      	cbz	r7, 23f61ec <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
 23f61aa:	2f1f      	cmp	r7, #31
 23f61ac:	463e      	mov	r6, r7
 23f61ae:	bf28      	it	cs
 23f61b0:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
 23f61b2:	2c7f      	cmp	r4, #127	; 0x7f
 23f61b4:	d826      	bhi.n	23f6204 <_ZN6AB18058writeRamEjPKhjb+0x78>
 23f61b6:	1933      	adds	r3, r6, r4
 23f61b8:	2b80      	cmp	r3, #128	; 0x80
 23f61ba:	d901      	bls.n	23f61c0 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
 23f61bc:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
 23f61c0:	2301      	movs	r3, #1
 23f61c2:	2204      	movs	r2, #4
 23f61c4:	213f      	movs	r1, #63	; 0x3f
 23f61c6:	4628      	mov	r0, r5
 23f61c8:	f7ff ff33 	bl	23f6032 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
 23f61cc:	2300      	movs	r3, #0
 23f61ce:	f064 017f 	orn	r1, r4, #127	; 0x7f
 23f61d2:	9300      	str	r3, [sp, #0]
 23f61d4:	464a      	mov	r2, r9
 23f61d6:	4633      	mov	r3, r6
 23f61d8:	4628      	mov	r0, r5
 23f61da:	b2c9      	uxtb	r1, r1
 23f61dc:	f7ff fe42 	bl	23f5e64 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
 23f61e0:	4680      	mov	r8, r0
 23f61e2:	b128      	cbz	r0, 23f61f0 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
 23f61e4:	4434      	add	r4, r6
        dataLen -= count;
 23f61e6:	1bbf      	subs	r7, r7, r6
        data += count;
 23f61e8:	44b1      	add	r9, r6
    while(dataLen > 0) {
 23f61ea:	e7dd      	b.n	23f61a8 <_ZN6AB18058writeRamEjPKhjb+0x1c>
 23f61ec:	f04f 0801 	mov.w	r8, #1
    if (lock) {
 23f61f0:	f1ba 0f00 	cmp.w	sl, #0
 23f61f4:	d002      	beq.n	23f61fc <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
 23f61f6:	6868      	ldr	r0, [r5, #4]
 23f61f8:	f002 f81b 	bl	23f8232 <_ZN7TwoWire6unlockEv>
}
 23f61fc:	4640      	mov	r0, r8
 23f61fe:	b002      	add	sp, #8
 23f6200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
 23f6204:	2301      	movs	r3, #1
 23f6206:	2204      	movs	r2, #4
 23f6208:	213f      	movs	r1, #63	; 0x3f
 23f620a:	4628      	mov	r0, r5
 23f620c:	f7ff ff72 	bl	23f60f4 <_ZN6AB180514setRegisterBitEhhb>
 23f6210:	e7dc      	b.n	23f61cc <_ZN6AB18058writeRamEjPKhjb+0x40>
	...

023f6214 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
 23f6214:	b530      	push	{r4, r5, lr}
 23f6216:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
 23f6218:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
 23f621c:	680d      	ldr	r5, [r1, #0]
String AB1805::tmToString(const struct tm *timeptr) {
 23f621e:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
 23f6220:	9503      	str	r5, [sp, #12]
 23f6222:	684d      	ldr	r5, [r1, #4]
 23f6224:	3301      	adds	r3, #1
 23f6226:	9502      	str	r5, [sp, #8]
 23f6228:	688d      	ldr	r5, [r1, #8]
 23f622a:	f202 726c 	addw	r2, r2, #1900	; 0x76c
 23f622e:	9501      	str	r5, [sp, #4]
 23f6230:	68c9      	ldr	r1, [r1, #12]
 23f6232:	9100      	str	r1, [sp, #0]
 23f6234:	4902      	ldr	r1, [pc, #8]	; (23f6240 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
 23f6236:	f002 fe9f 	bl	23f8f78 <_ZN6String6formatEPKcz>
}
 23f623a:	4620      	mov	r0, r4
 23f623c:	b005      	add	sp, #20
 23f623e:	bd30      	pop	{r4, r5, pc}
 23f6240:	023ff7bf 	.word	0x023ff7bf

023f6244 <_ZN6AB180510bcdToValueEh>:
}
 23f6244:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
 23f6246:	0903      	lsrs	r3, r0, #4
 23f6248:	f000 000f 	and.w	r0, r0, #15
}
 23f624c:	fb02 0003 	mla	r0, r2, r3, r0
 23f6250:	4770      	bx	lr

023f6252 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
 23f6252:	b538      	push	{r3, r4, r5, lr}
 23f6254:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
 23f6256:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
 23f6258:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
 23f625a:	f7ff fff3 	bl	23f6244 <_ZN6AB180510bcdToValueEh>
 23f625e:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
 23f6260:	7860      	ldrb	r0, [r4, #1]
 23f6262:	f7ff ffef 	bl	23f6244 <_ZN6AB180510bcdToValueEh>
 23f6266:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
 23f6268:	78a0      	ldrb	r0, [r4, #2]
 23f626a:	f7ff ffeb 	bl	23f6244 <_ZN6AB180510bcdToValueEh>
 23f626e:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
 23f6270:	78e0      	ldrb	r0, [r4, #3]
 23f6272:	f7ff ffe7 	bl	23f6244 <_ZN6AB180510bcdToValueEh>
 23f6276:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
 23f6278:	7920      	ldrb	r0, [r4, #4]
 23f627a:	f7ff ffe3 	bl	23f6244 <_ZN6AB180510bcdToValueEh>
 23f627e:	3801      	subs	r0, #1
 23f6280:	6108      	str	r0, [r1, #16]
    if (includeYear) {
 23f6282:	b92d      	cbnz	r5, 23f6290 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
 23f6284:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
 23f6286:	7828      	ldrb	r0, [r5, #0]
 23f6288:	f7ff ffdc 	bl	23f6244 <_ZN6AB180510bcdToValueEh>
 23f628c:	6188      	str	r0, [r1, #24]
}
 23f628e:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
 23f6290:	7960      	ldrb	r0, [r4, #5]
 23f6292:	f7ff ffd7 	bl	23f6244 <_ZN6AB180510bcdToValueEh>
 23f6296:	3064      	adds	r0, #100	; 0x64
 23f6298:	1da5      	adds	r5, r4, #6
 23f629a:	6148      	str	r0, [r1, #20]
 23f629c:	e7f3      	b.n	23f6286 <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

023f62a0 <_ZN6AB180510getRtcAsTmEP2tm>:
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
 23f62a0:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
 23f62a2:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
 23f62a4:	461a      	mov	r2, r3
bool AB1805::getRtcAsTm(struct tm *timeptr) {
 23f62a6:	460d      	mov	r5, r1
 23f62a8:	b088      	sub	sp, #32
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
 23f62aa:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
 23f62ac:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
 23f62ae:	f7ff fea2 	bl	23f5ff6 <_ZN6AB180510isBitClearEhhb>
 23f62b2:	b1f0      	cbz	r0, 23f62f2 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
 23f62b4:	2308      	movs	r3, #8
 23f62b6:	2601      	movs	r6, #1
 23f62b8:	4620      	mov	r0, r4
 23f62ba:	2100      	movs	r1, #0
 23f62bc:	9600      	str	r6, [sp, #0]
 23f62be:	eb0d 0203 	add.w	r2, sp, r3
 23f62c2:	f7ff fd3b 	bl	23f5d3c <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
 23f62c6:	4604      	mov	r4, r0
 23f62c8:	b198      	cbz	r0, 23f62f2 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
 23f62ca:	4632      	mov	r2, r6
 23f62cc:	4629      	mov	r1, r5
 23f62ce:	f10d 0009 	add.w	r0, sp, #9
 23f62d2:	f7ff ffbe 	bl	23f6252 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
 23f62d6:	a804      	add	r0, sp, #16
 23f62d8:	f7ff ff9c 	bl	23f6214 <_ZN6AB180510tmToStringEPK2tm>
 23f62dc:	4808      	ldr	r0, [pc, #32]	; (23f6300 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
 23f62de:	9a04      	ldr	r2, [sp, #16]
 23f62e0:	4908      	ldr	r1, [pc, #32]	; (23f6304 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
 23f62e2:	f7ff fcec 	bl	23f5cbe <_ZNK5spark6Logger4infoEPKcz>
 23f62e6:	a804      	add	r0, sp, #16
 23f62e8:	f002 fd9b 	bl	23f8e22 <_ZN6StringD1Ev>
}
 23f62ec:	4620      	mov	r0, r4
 23f62ee:	b008      	add	sp, #32
 23f62f0:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
 23f62f2:	2224      	movs	r2, #36	; 0x24
 23f62f4:	2100      	movs	r1, #0
 23f62f6:	4628      	mov	r0, r5
 23f62f8:	f006 fa01 	bl	23fc6fe <memset>
 23f62fc:	2400      	movs	r4, #0
 23f62fe:	e7f5      	b.n	23f62ec <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
 23f6300:	1007aeac 	.word	0x1007aeac
 23f6304:	023ff7dd 	.word	0x023ff7dd

023f6308 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
 23f6308:	b530      	push	{r4, r5, lr}
 23f630a:	b08b      	sub	sp, #44	; 0x2c
 23f630c:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
 23f630e:	a901      	add	r1, sp, #4
 23f6310:	f7ff ffc6 	bl	23f62a0 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
 23f6314:	4604      	mov	r4, r0
 23f6316:	b120      	cbz	r0, 23f6322 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
 23f6318:	a801      	add	r0, sp, #4
 23f631a:	f001 f95b 	bl	23f75d4 <mktime>
 23f631e:	e9c5 0100 	strd	r0, r1, [r5]
}
 23f6322:	4620      	mov	r0, r4
 23f6324:	b00b      	add	sp, #44	; 0x2c
 23f6326:	bd30      	pop	{r4, r5, pc}

023f6328 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
 23f6328:	230a      	movs	r3, #10
 23f632a:	fb90 f1f3 	sdiv	r1, r0, r3
 23f632e:	fb91 f2f3 	sdiv	r2, r1, r3
    int ones = value % 10;
 23f6332:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
 23f6336:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
 23f633a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
 23f633e:	b2c0      	uxtb	r0, r0
 23f6340:	4770      	bx	lr

023f6342 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
 23f6342:	b570      	push	{r4, r5, r6, lr}
 23f6344:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
 23f6346:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
 23f6348:	460c      	mov	r4, r1
 23f634a:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
 23f634c:	f7ff ffec 	bl	23f6328 <_ZN6AB180510valueToBcdEi>
 23f6350:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
 23f6352:	6868      	ldr	r0, [r5, #4]
 23f6354:	f7ff ffe8 	bl	23f6328 <_ZN6AB180510valueToBcdEi>
 23f6358:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
 23f635a:	68a8      	ldr	r0, [r5, #8]
 23f635c:	f7ff ffe4 	bl	23f6328 <_ZN6AB180510valueToBcdEi>
 23f6360:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
 23f6362:	68e8      	ldr	r0, [r5, #12]
 23f6364:	f7ff ffe0 	bl	23f6328 <_ZN6AB180510valueToBcdEi>
 23f6368:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
 23f636a:	6928      	ldr	r0, [r5, #16]
 23f636c:	3001      	adds	r0, #1
 23f636e:	f7ff ffdb 	bl	23f6328 <_ZN6AB180510valueToBcdEi>
 23f6372:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
 23f6374:	b92e      	cbnz	r6, 23f6382 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
 23f6376:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
 23f6378:	69a8      	ldr	r0, [r5, #24]
 23f637a:	f7ff ffd5 	bl	23f6328 <_ZN6AB180510valueToBcdEi>
 23f637e:	7030      	strb	r0, [r6, #0]
}
 23f6380:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
 23f6382:	2364      	movs	r3, #100	; 0x64
 23f6384:	696a      	ldr	r2, [r5, #20]
 23f6386:	1da6      	adds	r6, r4, #6
 23f6388:	fb92 f0f3 	sdiv	r0, r2, r3
 23f638c:	fb03 2010 	mls	r0, r3, r0, r2
 23f6390:	f7ff ffca 	bl	23f6328 <_ZN6AB180510valueToBcdEi>
 23f6394:	7160      	strb	r0, [r4, #5]
 23f6396:	e7ef      	b.n	23f6378 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

023f6398 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
 23f6398:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f639a:	4616      	mov	r6, r2
 23f639c:	b087      	sub	sp, #28
 23f639e:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
 23f63a0:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
 23f63a2:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
 23f63a4:	f7ff ff36 	bl	23f6214 <_ZN6AB180510tmToStringEPK2tm>
 23f63a8:	481e      	ldr	r0, [pc, #120]	; (23f6424 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
 23f63aa:	9a02      	ldr	r2, [sp, #8]
 23f63ac:	491e      	ldr	r1, [pc, #120]	; (23f6428 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
 23f63ae:	f7ff fc86 	bl	23f5cbe <_ZNK5spark6Logger4infoEPKcz>
 23f63b2:	a802      	add	r0, sp, #8
 23f63b4:	f002 fd35 	bl	23f8e22 <_ZN6StringD1Ev>
    if (lock) {
 23f63b8:	b116      	cbz	r6, 23f63c0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
 23f63ba:	6868      	ldr	r0, [r5, #4]
 23f63bc:	f001 ff30 	bl	23f8220 <_ZN7TwoWire4lockEv>
    array[0] = 0x00; // hundredths
 23f63c0:	2700      	movs	r7, #0
    tmToRegisters(timeptr, &array[1], true);
 23f63c2:	4620      	mov	r0, r4
 23f63c4:	2201      	movs	r2, #1
 23f63c6:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
 23f63ca:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
 23f63ce:	f7ff ffb8 	bl	23f6342 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
 23f63d2:	2301      	movs	r3, #1
 23f63d4:	2110      	movs	r1, #16
 23f63d6:	461a      	mov	r2, r3
 23f63d8:	4628      	mov	r0, r5
 23f63da:	f7ff fe8b 	bl	23f60f4 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
 23f63de:	4604      	mov	r4, r0
 23f63e0:	b1e8      	cbz	r0, 23f641e <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
 23f63e2:	2308      	movs	r3, #8
 23f63e4:	4639      	mov	r1, r7
 23f63e6:	4628      	mov	r0, r5
 23f63e8:	9700      	str	r7, [sp, #0]
 23f63ea:	eb0d 0203 	add.w	r2, sp, r3
 23f63ee:	f7ff fd39 	bl	23f5e64 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
 23f63f2:	4604      	mov	r4, r0
 23f63f4:	b160      	cbz	r0, 23f6410 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
 23f63f6:	2301      	movs	r3, #1
 23f63f8:	2110      	movs	r1, #16
 23f63fa:	461a      	mov	r2, r3
 23f63fc:	4628      	mov	r0, r5
 23f63fe:	f7ff fe18 	bl	23f6032 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
 23f6402:	b116      	cbz	r6, 23f640a <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
 23f6404:	6868      	ldr	r0, [r5, #4]
 23f6406:	f001 ff14 	bl	23f8232 <_ZN7TwoWire6unlockEv>
}
 23f640a:	4620      	mov	r0, r4
 23f640c:	b007      	add	sp, #28
 23f640e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
 23f6410:	f44f 728e 	mov.w	r2, #284	; 0x11c
        _log.error(errorMsg, __LINE__);
 23f6414:	4905      	ldr	r1, [pc, #20]	; (23f642c <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
 23f6416:	4803      	ldr	r0, [pc, #12]	; (23f6424 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
 23f6418:	f7ff fc5f 	bl	23f5cda <_ZNK5spark6Logger5errorEPKcz>
 23f641c:	e7f1      	b.n	23f6402 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
 23f641e:	f44f 7290 	mov.w	r2, #288	; 0x120
 23f6422:	e7f7      	b.n	23f6414 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
 23f6424:	1007aeac 	.word	0x1007aeac
 23f6428:	023ff7eb 	.word	0x023ff7eb
 23f642c:	023ff7f9 	.word	0x023ff7f9

023f6430 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
 23f6430:	b513      	push	{r0, r1, r4, lr}
 23f6432:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
 23f6434:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
 23f6436:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
 23f643a:	f006 f91d 	bl	23fc678 <gmtime>
    return setRtcFromTm(tm, lock);
 23f643e:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
 23f6442:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
 23f6444:	4620      	mov	r0, r4
 23f6446:	f7ff ffa7 	bl	23f6398 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
 23f644a:	b002      	add	sp, #8
 23f644c:	bd10      	pop	{r4, pc}

023f644e <_ZN6AB180516setRtcFromSystemEv>:
bool AB1805::setRtcFromSystem() {
 23f644e:	b513      	push	{r0, r1, r4, lr}
 23f6450:	4604      	mov	r4, r0
    if (Time.isValid()) {
 23f6452:	f002 ff61 	bl	23f9318 <_ZN9TimeClass7isValidEv>
 23f6456:	b140      	cbz	r0, 23f646a <_ZN6AB180516setRtcFromSystemEv+0x1c>
        return setRtcFromTime(Time.now());
 23f6458:	f002 ff7b 	bl	23f9352 <_ZN9TimeClass3nowEv>
 23f645c:	2301      	movs	r3, #1
 23f645e:	4602      	mov	r2, r0
 23f6460:	9300      	str	r3, [sp, #0]
 23f6462:	17c3      	asrs	r3, r0, #31
 23f6464:	4620      	mov	r0, r4
 23f6466:	f7ff ffe3 	bl	23f6430 <_ZN6AB180514setRtcFromTimeExb>
}
 23f646a:	b002      	add	sp, #8
 23f646c:	bd10      	pop	{r4, pc}

023f646e <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 23f646e:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23f6470:	2300      	movs	r3, #0
 23f6472:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23f6474:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23f6476:	4604      	mov	r4, r0
 23f6478:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23f647a:	b12b      	cbz	r3, 23f6488 <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f647c:	2202      	movs	r2, #2
 23f647e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f6480:	68eb      	ldr	r3, [r5, #12]
 23f6482:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23f6484:	68ab      	ldr	r3, [r5, #8]
 23f6486:	60a3      	str	r3, [r4, #8]
    }
 23f6488:	4620      	mov	r0, r4
 23f648a:	bd38      	pop	{r3, r4, r5, pc}

023f648c <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
 23f648c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _Function_base() : _M_manager(nullptr) { }
 23f6490:	f04f 0900 	mov.w	r9, #0
 23f6494:	b095      	sub	sp, #84	; 0x54
        };
 23f6496:	991c      	ldr	r1, [sp, #112]	; 0x70
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
 23f6498:	4605      	mov	r5, r0
        };
 23f649a:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
 23f649c:	4690      	mov	r8, r2
 23f649e:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
 23f64a0:	ae0c      	add	r6, sp, #48	; 0x30
        };
 23f64a2:	f7ff ffe4 	bl	23f646e <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
 23f64a6:	a904      	add	r1, sp, #16
 23f64a8:	a808      	add	r0, sp, #32
 23f64aa:	f7ff ffe0 	bl	23f646e <_ZNSt8functionIFvyiEEC1ERKS1_>
 23f64ae:	a908      	add	r1, sp, #32
 23f64b0:	4630      	mov	r0, r6
 23f64b2:	f7ff ffdc 	bl	23f646e <_ZNSt8functionIFvyiEEC1ERKS1_>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f64b6:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
 23f64b8:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f64bc:	f7ed ffb1 	bl	23e4422 <_Znwj>
 23f64c0:	4604      	mov	r4, r0
 23f64c2:	b1a0      	cbz	r0, 23f64ee <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f64c4:	e896 0003 	ldmia.w	r6, {r0, r1}
 23f64c8:	ab01      	add	r3, sp, #4
 23f64ca:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23f64ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 23f64d2:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23f64d6:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f64da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
 23f64dc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f64de:	60a3      	str	r3, [r4, #8]
 23f64e0:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f64e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
 23f64e6:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 23f64ea:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
 23f64ec:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
 23f64ee:	4b24      	ldr	r3, [pc, #144]	; (23f6580 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
              callable_(callable) {
 23f64f0:	2200      	movs	r2, #0
 23f64f2:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
 23f64f4:	4b23      	ldr	r3, [pc, #140]	; (23f6584 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
 23f64f6:	f04f 0900 	mov.w	r9, #0
 23f64fa:	9312      	str	r3, [sp, #72]	; 0x48
 23f64fc:	2300      	movs	r3, #0
 23f64fe:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
 23f6502:	4b21      	ldr	r3, [pc, #132]	; (23f6588 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
 23f6504:	2010      	movs	r0, #16
              callable_(callable) {
 23f6506:	f8c5 9008 	str.w	r9, [r5, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f650a:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
 23f650c:	e9cd 3901 	strd	r3, r9, [sp, #4]
 23f6510:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
 23f6514:	f7ed ff85 	bl	23e4422 <_Znwj>
 23f6518:	4604      	mov	r4, r0
 23f651a:	b1d8      	cbz	r0, 23f6554 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
 23f651c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
 23f651e:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
 23f6522:	b133      	cbz	r3, 23f6532 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f6524:	2202      	movs	r2, #2
 23f6526:	a910      	add	r1, sp, #64	; 0x40
 23f6528:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f652a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23f652c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23f652e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23f6530:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
 23f6532:	4b16      	ldr	r3, [pc, #88]	; (23f658c <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
 23f6534:	4640      	mov	r0, r8
        context.destructor = [](void* callable) -> void {
 23f6536:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
 23f6538:	4639      	mov	r1, r7
 23f653a:	4a15      	ldr	r2, [pc, #84]	; (23f6590 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
 23f653c:	ab01      	add	r3, sp, #4
        context.callable = wrapper;
 23f653e:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
 23f6540:	f000 fd38 	bl	23f6fb4 <system_subscribe_event>
        if (r) {
 23f6544:	b1b0      	cbz	r0, 23f6574 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
 23f6546:	4620      	mov	r0, r4
 23f6548:	f7ff fb92 	bl	23f5c70 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
 23f654c:	2110      	movs	r1, #16
 23f654e:	4620      	mov	r0, r4
 23f6550:	f7ed ff6b 	bl	23e442a <_ZdlPvj>
 23f6554:	a810      	add	r0, sp, #64	; 0x40
 23f6556:	f7ff fb8b 	bl	23f5c70 <_ZNSt14_Function_baseD1Ev>
 23f655a:	4630      	mov	r0, r6
 23f655c:	f7ff fb88 	bl	23f5c70 <_ZNSt14_Function_baseD1Ev>
 23f6560:	a808      	add	r0, sp, #32
 23f6562:	f7ff fb85 	bl	23f5c70 <_ZNSt14_Function_baseD1Ev>
 23f6566:	a804      	add	r0, sp, #16
 23f6568:	f7ff fb82 	bl	23f5c70 <_ZNSt14_Function_baseD1Ev>
    }
 23f656c:	4628      	mov	r0, r5
 23f656e:	b015      	add	sp, #84	; 0x54
 23f6570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
 23f6574:	9b02      	ldr	r3, [sp, #8]
 23f6576:	e9c5 8700 	strd	r8, r7, [r5]
 23f657a:	60ab      	str	r3, [r5, #8]
 23f657c:	e7ea      	b.n	23f6554 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
 23f657e:	bf00      	nop
 23f6580:	023f5c2d 	.word	0x023f5c2d
 23f6584:	023f6649 	.word	0x023f6649
 23f6588:	000c0002 	.word	0x000c0002
 23f658c:	023f5c83 	.word	0x023f5c83
 23f6590:	023f5c05 	.word	0x023f5c05

023f6594 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
 23f6594:	b530      	push	{r4, r5, lr}
 23f6596:	4604      	mov	r4, r0
 23f6598:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
 23f659a:	b111      	cbz	r1, 23f65a2 <_ZN6AB18055setupEb+0xe>
        wire.begin();
 23f659c:	6840      	ldr	r0, [r0, #4]
 23f659e:	f001 fe07 	bl	23f81b0 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
 23f65a2:	4620      	mov	r0, r4
 23f65a4:	f7ff fc20 	bl	23f5de8 <_ZN6AB180510detectChipEv>
 23f65a8:	ad06      	add	r5, sp, #24
 23f65aa:	2800      	cmp	r0, #0
 23f65ac:	d037      	beq.n	23f661e <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
 23f65ae:	4620      	mov	r0, r4
 23f65b0:	f7ff fd4a 	bl	23f6048 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
 23f65b4:	2301      	movs	r3, #1
 23f65b6:	2110      	movs	r1, #16
 23f65b8:	461a      	mov	r2, r3
 23f65ba:	4620      	mov	r0, r4
 23f65bc:	f7ff fd1b 	bl	23f5ff6 <_ZN6AB180510isBitClearEhhb>
 23f65c0:	b1d8      	cbz	r0, 23f65fa <_ZN6AB18055setupEb+0x66>
 23f65c2:	f002 fea9 	bl	23f9318 <_ZN9TimeClass7isValidEv>
 23f65c6:	b9c0      	cbnz	r0, 23f65fa <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
 23f65c8:	a902      	add	r1, sp, #8
 23f65ca:	4620      	mov	r0, r4
 23f65cc:	f7ff fe9c 	bl	23f6308 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
 23f65d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 23f65d4:	f002 fda4 	bl	23f9120 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
 23f65d8:	4b13      	ldr	r3, [pc, #76]	; (23f6628 <_ZN6AB18055setupEb+0x94>)
 23f65da:	4628      	mov	r0, r5
 23f65dc:	681b      	ldr	r3, [r3, #0]
 23f65de:	4913      	ldr	r1, [pc, #76]	; (23f662c <_ZN6AB18055setupEb+0x98>)
 23f65e0:	9300      	str	r3, [sp, #0]
 23f65e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23f65e6:	f002 fe55 	bl	23f9294 <_ZN9TimeClass6formatExPKc>
 23f65ea:	4811      	ldr	r0, [pc, #68]	; (23f6630 <_ZN6AB18055setupEb+0x9c>)
 23f65ec:	9a06      	ldr	r2, [sp, #24]
 23f65ee:	4911      	ldr	r1, [pc, #68]	; (23f6634 <_ZN6AB18055setupEb+0xa0>)
 23f65f0:	f7ff fb65 	bl	23f5cbe <_ZNK5spark6Logger4infoEPKcz>
 23f65f4:	4628      	mov	r0, r5
 23f65f6:	f002 fc14 	bl	23f8e22 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23f65fa:	4b0f      	ldr	r3, [pc, #60]	; (23f6638 <_ZN6AB18055setupEb+0xa4>)
    System.on(reset, systemEventStatic);
 23f65fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 23f6600:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
 23f6602:	4b0e      	ldr	r3, [pc, #56]	; (23f663c <_ZN6AB18055setupEb+0xa8>)
 23f6604:	a802      	add	r0, sp, #8
 23f6606:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
 23f6608:	4b0d      	ldr	r3, [pc, #52]	; (23f6640 <_ZN6AB18055setupEb+0xac>)
 23f660a:	9500      	str	r5, [sp, #0]
 23f660c:	9308      	str	r3, [sp, #32]
 23f660e:	2300      	movs	r3, #0
 23f6610:	f7ff ff3c 	bl	23f648c <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
 23f6614:	4628      	mov	r0, r5
 23f6616:	f7ff fb2b 	bl	23f5c70 <_ZNSt14_Function_baseD1Ev>
}
 23f661a:	b00b      	add	sp, #44	; 0x2c
 23f661c:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
 23f661e:	4909      	ldr	r1, [pc, #36]	; (23f6644 <_ZN6AB18055setupEb+0xb0>)
 23f6620:	4803      	ldr	r0, [pc, #12]	; (23f6630 <_ZN6AB18055setupEb+0x9c>)
 23f6622:	f7ff fb5a 	bl	23f5cda <_ZNK5spark6Logger5errorEPKcz>
 23f6626:	e7e8      	b.n	23f65fa <_ZN6AB18055setupEb+0x66>
 23f6628:	1006a1c4 	.word	0x1006a1c4
 23f662c:	1007af3c 	.word	0x1007af3c
 23f6630:	1007aeac 	.word	0x1007aeac
 23f6634:	023ff814 	.word	0x023ff814
 23f6638:	023f5f79 	.word	0x023f5f79
 23f663c:	023f5c67 	.word	0x023f5c67
 23f6640:	023f5c53 	.word	0x023f5c53
 23f6644:	023ff831 	.word	0x023ff831

023f6648 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
 23f6648:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23f664a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f664c:	4604      	mov	r4, r0
	switch (__op)
 23f664e:	d104      	bne.n	23f665a <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
 23f6650:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f6652:	6003      	str	r3, [r0, #0]
      }
 23f6654:	2000      	movs	r0, #0
 23f6656:	b003      	add	sp, #12
 23f6658:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
 23f665a:	2a02      	cmp	r2, #2
 23f665c:	d00c      	beq.n	23f6678 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
 23f665e:	2a03      	cmp	r2, #3
 23f6660:	d1f8      	bne.n	23f6654 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23f6662:	6804      	ldr	r4, [r0, #0]
 23f6664:	2c00      	cmp	r4, #0
 23f6666:	d0f5      	beq.n	23f6654 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23f6668:	4620      	mov	r0, r4
 23f666a:	f7ff fb01 	bl	23f5c70 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23f666e:	2110      	movs	r1, #16
 23f6670:	4620      	mov	r0, r4
 23f6672:	f7ed feda 	bl	23e442a <_ZdlPvj>
 23f6676:	e7ed      	b.n	23f6654 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
 23f6678:	6809      	ldr	r1, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23f667a:	2010      	movs	r0, #16
	  __dest._M_access<_Functor*>() =
 23f667c:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
 23f667e:	f7ed fed0 	bl	23e4422 <_Znwj>
 23f6682:	4605      	mov	r5, r0
 23f6684:	b110      	cbz	r0, 23f668c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
 23f6686:	9901      	ldr	r1, [sp, #4]
 23f6688:	f7ff fef1 	bl	23f646e <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
 23f668c:	6025      	str	r5, [r4, #0]
	}
 23f668e:	e7e1      	b.n	23f6654 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

023f6690 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
 23f6690:	4b01      	ldr	r3, [pc, #4]	; (23f6698 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
 23f6692:	4a02      	ldr	r2, [pc, #8]	; (23f669c <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
 23f6694:	601a      	str	r2, [r3, #0]
}
 23f6696:	4770      	bx	lr
 23f6698:	1007aeac 	.word	0x1007aeac
 23f669c:	023ff849 	.word	0x023ff849

023f66a0 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
 23f66a0:	b509      	push	{r0, r3, lr}
 23f66a2:	4804      	ldr	r0, [pc, #16]	; (23f66b4 <cellular_signal+0x14>)
 23f66a4:	6800      	ldr	r0, [r0, #0]
 23f66a6:	4b04      	ldr	r3, [pc, #16]	; (23f66b8 <cellular_signal+0x18>)
 23f66a8:	4403      	add	r3, r0
 23f66aa:	681b      	ldr	r3, [r3, #0]
 23f66ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f66ae:	9302      	str	r3, [sp, #8]
 23f66b0:	bd09      	pop	{r0, r3, pc}
 23f66b2:	0000      	.short	0x0000
 23f66b4:	1006a0f0 	.word	0x1006a0f0
 23f66b8:	0000006c 	.word	0x0000006c

023f66bc <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 23f66bc:	b509      	push	{r0, r3, lr}
 23f66be:	4804      	ldr	r0, [pc, #16]	; (23f66d0 <cellular_command+0x14>)
 23f66c0:	6800      	ldr	r0, [r0, #0]
 23f66c2:	4b04      	ldr	r3, [pc, #16]	; (23f66d4 <cellular_command+0x18>)
 23f66c4:	4403      	add	r3, r0
 23f66c6:	681b      	ldr	r3, [r3, #0]
 23f66c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f66ca:	9302      	str	r3, [sp, #8]
 23f66cc:	bd09      	pop	{r0, r3, pc}
 23f66ce:	0000      	.short	0x0000
 23f66d0:	1006a0f0 	.word	0x1006a0f0
 23f66d4:	0000006c 	.word	0x0000006c

023f66d8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23f66d8:	b509      	push	{r0, r3, lr}
 23f66da:	4804      	ldr	r0, [pc, #16]	; (23f66ec <os_mutex_recursive_create+0x14>)
 23f66dc:	6800      	ldr	r0, [r0, #0]
 23f66de:	4b04      	ldr	r3, [pc, #16]	; (23f66f0 <os_mutex_recursive_create+0x18>)
 23f66e0:	4403      	add	r3, r0
 23f66e2:	681b      	ldr	r3, [r3, #0]
 23f66e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f66e6:	9302      	str	r3, [sp, #8]
 23f66e8:	bd09      	pop	{r0, r3, pc}
 23f66ea:	0000      	.short	0x0000
 23f66ec:	1006a0f0 	.word	0x1006a0f0
 23f66f0:	00000030 	.word	0x00000030

023f66f4 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, hal_watchdog_reset_flagged_deprecated, bool(void))
DYNALIB_FN(17, hal_core, hal_watchdog_refresh_deprecated, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
 23f66f4:	b509      	push	{r0, r3, lr}
 23f66f6:	4804      	ldr	r0, [pc, #16]	; (23f6708 <HAL_Core_Runtime_Info+0x14>)
 23f66f8:	6800      	ldr	r0, [r0, #0]
 23f66fa:	4b04      	ldr	r3, [pc, #16]	; (23f670c <HAL_Core_Runtime_Info+0x18>)
 23f66fc:	4403      	add	r3, r0
 23f66fe:	681b      	ldr	r3, [r3, #0]
 23f6700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f6702:	9302      	str	r3, [sp, #8]
 23f6704:	bd09      	pop	{r0, r3, pc}
 23f6706:	0000      	.short	0x0000
 23f6708:	1006a0f0 	.word	0x1006a0f0
 23f670c:	0000001c 	.word	0x0000001c

023f6710 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 23f6710:	b509      	push	{r0, r3, lr}
 23f6712:	4804      	ldr	r0, [pc, #16]	; (23f6724 <HAL_Feature_Set+0x14>)
 23f6714:	6800      	ldr	r0, [r0, #0]
 23f6716:	4b04      	ldr	r3, [pc, #16]	; (23f6728 <HAL_Feature_Set+0x18>)
 23f6718:	4403      	add	r3, r0
 23f671a:	681b      	ldr	r3, [r3, #0]
 23f671c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 23f671e:	9302      	str	r3, [sp, #8]
 23f6720:	bd09      	pop	{r0, r3, pc}
 23f6722:	0000      	.short	0x0000
 23f6724:	1006a0f0 	.word	0x1006a0f0
 23f6728:	0000001c 	.word	0x0000001c

023f672c <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 23f672c:	b509      	push	{r0, r3, lr}
 23f672e:	4804      	ldr	r0, [pc, #16]	; (23f6740 <HAL_Core_Get_Last_Reset_Info+0x14>)
 23f6730:	6800      	ldr	r0, [r0, #0]
 23f6732:	4b04      	ldr	r3, [pc, #16]	; (23f6744 <HAL_Core_Get_Last_Reset_Info+0x18>)
 23f6734:	4403      	add	r3, r0
 23f6736:	681b      	ldr	r3, [r3, #0]
 23f6738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23f673a:	9302      	str	r3, [sp, #8]
 23f673c:	bd09      	pop	{r0, r3, pc}
 23f673e:	0000      	.short	0x0000
 23f6740:	1006a0f0 	.word	0x1006a0f0
 23f6744:	0000001c 	.word	0x0000001c

023f6748 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23f6748:	b509      	push	{r0, r3, lr}
 23f674a:	4804      	ldr	r0, [pc, #16]	; (23f675c <HAL_RNG_GetRandomNumber+0x14>)
 23f674c:	6800      	ldr	r0, [r0, #0]
 23f674e:	4b04      	ldr	r3, [pc, #16]	; (23f6760 <HAL_RNG_GetRandomNumber+0x18>)
 23f6750:	4403      	add	r3, r0
 23f6752:	681b      	ldr	r3, [r3, #0]
 23f6754:	685b      	ldr	r3, [r3, #4]
 23f6756:	9302      	str	r3, [sp, #8]
 23f6758:	bd09      	pop	{r0, r3, pc}
 23f675a:	0000      	.short	0x0000
 23f675c:	1006a0f0 	.word	0x1006a0f0
 23f6760:	00000000 	.word	0x00000000

023f6764 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23f6764:	b509      	push	{r0, r3, lr}
 23f6766:	4804      	ldr	r0, [pc, #16]	; (23f6778 <HAL_Delay_Microseconds+0x14>)
 23f6768:	6800      	ldr	r0, [r0, #0]
 23f676a:	4b04      	ldr	r3, [pc, #16]	; (23f677c <HAL_Delay_Microseconds+0x18>)
 23f676c:	4403      	add	r3, r0
 23f676e:	681b      	ldr	r3, [r3, #0]
 23f6770:	68db      	ldr	r3, [r3, #12]
 23f6772:	9302      	str	r3, [sp, #8]
 23f6774:	bd09      	pop	{r0, r3, pc}
 23f6776:	0000      	.short	0x0000
 23f6778:	1006a0f0 	.word	0x1006a0f0
 23f677c:	00000000 	.word	0x00000000

023f6780 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23f6780:	b509      	push	{r0, r3, lr}
 23f6782:	4804      	ldr	r0, [pc, #16]	; (23f6794 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23f6784:	6800      	ldr	r0, [r0, #0]
 23f6786:	4b04      	ldr	r3, [pc, #16]	; (23f6798 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23f6788:	4403      	add	r3, r0
 23f678a:	681b      	ldr	r3, [r3, #0]
 23f678c:	695b      	ldr	r3, [r3, #20]
 23f678e:	9302      	str	r3, [sp, #8]
 23f6790:	bd09      	pop	{r0, r3, pc}
 23f6792:	0000      	.short	0x0000
 23f6794:	1006a0f0 	.word	0x1006a0f0
 23f6798:	00000000 	.word	0x00000000

023f679c <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 23f679c:	b509      	push	{r0, r3, lr}
 23f679e:	4804      	ldr	r0, [pc, #16]	; (23f67b0 <HAL_EEPROM_Init+0x14>)
 23f67a0:	6800      	ldr	r0, [r0, #0]
 23f67a2:	4b04      	ldr	r3, [pc, #16]	; (23f67b4 <HAL_EEPROM_Init+0x18>)
 23f67a4:	4403      	add	r3, r0
 23f67a6:	681b      	ldr	r3, [r3, #0]
 23f67a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f67aa:	9302      	str	r3, [sp, #8]
 23f67ac:	bd09      	pop	{r0, r3, pc}
 23f67ae:	0000      	.short	0x0000
 23f67b0:	1006a0f0 	.word	0x1006a0f0
 23f67b4:	00000000 	.word	0x00000000

023f67b8 <HAL_EEPROM_Length>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))
 23f67b8:	b509      	push	{r0, r3, lr}
 23f67ba:	4804      	ldr	r0, [pc, #16]	; (23f67cc <HAL_EEPROM_Length+0x14>)
 23f67bc:	6800      	ldr	r0, [r0, #0]
 23f67be:	4b04      	ldr	r3, [pc, #16]	; (23f67d0 <HAL_EEPROM_Length+0x18>)
 23f67c0:	4403      	add	r3, r0
 23f67c2:	681b      	ldr	r3, [r3, #0]
 23f67c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f67c6:	9302      	str	r3, [sp, #8]
 23f67c8:	bd09      	pop	{r0, r3, pc}
 23f67ca:	0000      	.short	0x0000
 23f67cc:	1006a0f0 	.word	0x1006a0f0
 23f67d0:	00000000 	.word	0x00000000

023f67d4 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 23f67d4:	b509      	push	{r0, r3, lr}
 23f67d6:	4804      	ldr	r0, [pc, #16]	; (23f67e8 <HAL_EEPROM_Get+0x14>)
 23f67d8:	6800      	ldr	r0, [r0, #0]
 23f67da:	4b04      	ldr	r3, [pc, #16]	; (23f67ec <HAL_EEPROM_Get+0x18>)
 23f67dc:	4403      	add	r3, r0
 23f67de:	681b      	ldr	r3, [r3, #0]
 23f67e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f67e2:	9302      	str	r3, [sp, #8]
 23f67e4:	bd09      	pop	{r0, r3, pc}
 23f67e6:	0000      	.short	0x0000
 23f67e8:	1006a0f0 	.word	0x1006a0f0
 23f67ec:	00000000 	.word	0x00000000

023f67f0 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 23f67f0:	b509      	push	{r0, r3, lr}
 23f67f2:	4804      	ldr	r0, [pc, #16]	; (23f6804 <HAL_EEPROM_Put+0x14>)
 23f67f4:	6800      	ldr	r0, [r0, #0]
 23f67f6:	4b04      	ldr	r3, [pc, #16]	; (23f6808 <HAL_EEPROM_Put+0x18>)
 23f67f8:	4403      	add	r3, r0
 23f67fa:	681b      	ldr	r3, [r3, #0]
 23f67fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f67fe:	9302      	str	r3, [sp, #8]
 23f6800:	bd09      	pop	{r0, r3, pc}
 23f6802:	0000      	.short	0x0000
 23f6804:	1006a0f0 	.word	0x1006a0f0
 23f6808:	00000000 	.word	0x00000000

023f680c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 23f680c:	b509      	push	{r0, r3, lr}
 23f680e:	4804      	ldr	r0, [pc, #16]	; (23f6820 <hal_rtc_time_is_valid+0x14>)
 23f6810:	6800      	ldr	r0, [r0, #0]
 23f6812:	4b04      	ldr	r3, [pc, #16]	; (23f6824 <hal_rtc_time_is_valid+0x18>)
 23f6814:	4403      	add	r3, r0
 23f6816:	681b      	ldr	r3, [r3, #0]
 23f6818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f681a:	9302      	str	r3, [sp, #8]
 23f681c:	bd09      	pop	{r0, r3, pc}
 23f681e:	0000      	.short	0x0000
 23f6820:	1006a0f0 	.word	0x1006a0f0
 23f6824:	00000000 	.word	0x00000000

023f6828 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 23f6828:	b509      	push	{r0, r3, lr}
 23f682a:	4804      	ldr	r0, [pc, #16]	; (23f683c <hal_timer_millis+0x14>)
 23f682c:	6800      	ldr	r0, [r0, #0]
 23f682e:	4b04      	ldr	r3, [pc, #16]	; (23f6840 <hal_timer_millis+0x18>)
 23f6830:	4403      	add	r3, r0
 23f6832:	681b      	ldr	r3, [r3, #0]
 23f6834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23f6836:	9302      	str	r3, [sp, #8]
 23f6838:	bd09      	pop	{r0, r3, pc}
 23f683a:	0000      	.short	0x0000
 23f683c:	1006a0f0 	.word	0x1006a0f0
 23f6840:	00000000 	.word	0x00000000

023f6844 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 23f6844:	b509      	push	{r0, r3, lr}
 23f6846:	4804      	ldr	r0, [pc, #16]	; (23f6858 <hal_rtc_get_time+0x14>)
 23f6848:	6800      	ldr	r0, [r0, #0]
 23f684a:	4b04      	ldr	r3, [pc, #16]	; (23f685c <hal_rtc_get_time+0x18>)
 23f684c:	4403      	add	r3, r0
 23f684e:	681b      	ldr	r3, [r3, #0]
 23f6850:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 23f6852:	9302      	str	r3, [sp, #8]
 23f6854:	bd09      	pop	{r0, r3, pc}
 23f6856:	0000      	.short	0x0000
 23f6858:	1006a0f0 	.word	0x1006a0f0
 23f685c:	00000000 	.word	0x00000000

023f6860 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
 23f6860:	b509      	push	{r0, r3, lr}
 23f6862:	4804      	ldr	r0, [pc, #16]	; (23f6874 <hal_rtc_set_time+0x14>)
 23f6864:	6800      	ldr	r0, [r0, #0]
 23f6866:	4b04      	ldr	r3, [pc, #16]	; (23f6878 <hal_rtc_set_time+0x18>)
 23f6868:	4403      	add	r3, r0
 23f686a:	681b      	ldr	r3, [r3, #0]
 23f686c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 23f686e:	9302      	str	r3, [sp, #8]
 23f6870:	bd09      	pop	{r0, r3, pc}
 23f6872:	0000      	.short	0x0000
 23f6874:	1006a0f0 	.word	0x1006a0f0
 23f6878:	00000000 	.word	0x00000000

023f687c <hal_pin_map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
 23f687c:	b509      	push	{r0, r3, lr}
 23f687e:	4804      	ldr	r0, [pc, #16]	; (23f6890 <hal_pin_map+0x14>)
 23f6880:	6800      	ldr	r0, [r0, #0]
 23f6882:	4b04      	ldr	r3, [pc, #16]	; (23f6894 <hal_pin_map+0x18>)
 23f6884:	4403      	add	r3, r0
 23f6886:	681b      	ldr	r3, [r3, #0]
 23f6888:	681b      	ldr	r3, [r3, #0]
 23f688a:	9302      	str	r3, [sp, #8]
 23f688c:	bd09      	pop	{r0, r3, pc}
 23f688e:	0000      	.short	0x0000
 23f6890:	1006a0f0 	.word	0x1006a0f0
 23f6894:	00000014 	.word	0x00000014

023f6898 <hal_pin_validate_function>:
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
 23f6898:	b509      	push	{r0, r3, lr}
 23f689a:	4804      	ldr	r0, [pc, #16]	; (23f68ac <hal_pin_validate_function+0x14>)
 23f689c:	6800      	ldr	r0, [r0, #0]
 23f689e:	4b04      	ldr	r3, [pc, #16]	; (23f68b0 <hal_pin_validate_function+0x18>)
 23f68a0:	4403      	add	r3, r0
 23f68a2:	681b      	ldr	r3, [r3, #0]
 23f68a4:	685b      	ldr	r3, [r3, #4]
 23f68a6:	9302      	str	r3, [sp, #8]
 23f68a8:	bd09      	pop	{r0, r3, pc}
 23f68aa:	0000      	.short	0x0000
 23f68ac:	1006a0f0 	.word	0x1006a0f0
 23f68b0:	00000014 	.word	0x00000014

023f68b4 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23f68b4:	b509      	push	{r0, r3, lr}
 23f68b6:	4804      	ldr	r0, [pc, #16]	; (23f68c8 <hal_gpio_mode+0x14>)
 23f68b8:	6800      	ldr	r0, [r0, #0]
 23f68ba:	4b04      	ldr	r3, [pc, #16]	; (23f68cc <hal_gpio_mode+0x18>)
 23f68bc:	4403      	add	r3, r0
 23f68be:	681b      	ldr	r3, [r3, #0]
 23f68c0:	689b      	ldr	r3, [r3, #8]
 23f68c2:	9302      	str	r3, [sp, #8]
 23f68c4:	bd09      	pop	{r0, r3, pc}
 23f68c6:	0000      	.short	0x0000
 23f68c8:	1006a0f0 	.word	0x1006a0f0
 23f68cc:	00000014 	.word	0x00000014

023f68d0 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23f68d0:	b509      	push	{r0, r3, lr}
 23f68d2:	4804      	ldr	r0, [pc, #16]	; (23f68e4 <hal_gpio_get_mode+0x14>)
 23f68d4:	6800      	ldr	r0, [r0, #0]
 23f68d6:	4b04      	ldr	r3, [pc, #16]	; (23f68e8 <hal_gpio_get_mode+0x18>)
 23f68d8:	4403      	add	r3, r0
 23f68da:	681b      	ldr	r3, [r3, #0]
 23f68dc:	68db      	ldr	r3, [r3, #12]
 23f68de:	9302      	str	r3, [sp, #8]
 23f68e0:	bd09      	pop	{r0, r3, pc}
 23f68e2:	0000      	.short	0x0000
 23f68e4:	1006a0f0 	.word	0x1006a0f0
 23f68e8:	00000014 	.word	0x00000014

023f68ec <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23f68ec:	b509      	push	{r0, r3, lr}
 23f68ee:	4804      	ldr	r0, [pc, #16]	; (23f6900 <hal_gpio_write+0x14>)
 23f68f0:	6800      	ldr	r0, [r0, #0]
 23f68f2:	4b04      	ldr	r3, [pc, #16]	; (23f6904 <hal_gpio_write+0x18>)
 23f68f4:	4403      	add	r3, r0
 23f68f6:	681b      	ldr	r3, [r3, #0]
 23f68f8:	691b      	ldr	r3, [r3, #16]
 23f68fa:	9302      	str	r3, [sp, #8]
 23f68fc:	bd09      	pop	{r0, r3, pc}
 23f68fe:	0000      	.short	0x0000
 23f6900:	1006a0f0 	.word	0x1006a0f0
 23f6904:	00000014 	.word	0x00000014

023f6908 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
 23f6908:	b509      	push	{r0, r3, lr}
 23f690a:	4804      	ldr	r0, [pc, #16]	; (23f691c <hal_gpio_read+0x14>)
 23f690c:	6800      	ldr	r0, [r0, #0]
 23f690e:	4b04      	ldr	r3, [pc, #16]	; (23f6920 <hal_gpio_read+0x18>)
 23f6910:	4403      	add	r3, r0
 23f6912:	681b      	ldr	r3, [r3, #0]
 23f6914:	695b      	ldr	r3, [r3, #20]
 23f6916:	9302      	str	r3, [sp, #8]
 23f6918:	bd09      	pop	{r0, r3, pc}
 23f691a:	0000      	.short	0x0000
 23f691c:	1006a0f0 	.word	0x1006a0f0
 23f6920:	00000014 	.word	0x00000014

023f6924 <hal_interrupt_attach>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
 23f6924:	b509      	push	{r0, r3, lr}
 23f6926:	4804      	ldr	r0, [pc, #16]	; (23f6938 <hal_interrupt_attach+0x14>)
 23f6928:	6800      	ldr	r0, [r0, #0]
 23f692a:	4b04      	ldr	r3, [pc, #16]	; (23f693c <hal_interrupt_attach+0x18>)
 23f692c:	4403      	add	r3, r0
 23f692e:	681b      	ldr	r3, [r3, #0]
 23f6930:	699b      	ldr	r3, [r3, #24]
 23f6932:	9302      	str	r3, [sp, #8]
 23f6934:	bd09      	pop	{r0, r3, pc}
 23f6936:	0000      	.short	0x0000
 23f6938:	1006a0f0 	.word	0x1006a0f0
 23f693c:	00000014 	.word	0x00000014

023f6940 <hal_interrupt_detach>:
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
 23f6940:	b509      	push	{r0, r3, lr}
 23f6942:	4804      	ldr	r0, [pc, #16]	; (23f6954 <hal_interrupt_detach+0x14>)
 23f6944:	6800      	ldr	r0, [r0, #0]
 23f6946:	4b04      	ldr	r3, [pc, #16]	; (23f6958 <hal_interrupt_detach+0x18>)
 23f6948:	4403      	add	r3, r0
 23f694a:	681b      	ldr	r3, [r3, #0]
 23f694c:	69db      	ldr	r3, [r3, #28]
 23f694e:	9302      	str	r3, [sp, #8]
 23f6950:	bd09      	pop	{r0, r3, pc}
 23f6952:	0000      	.short	0x0000
 23f6954:	1006a0f0 	.word	0x1006a0f0
 23f6958:	00000014 	.word	0x00000014

023f695c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 23f695c:	b509      	push	{r0, r3, lr}
 23f695e:	4804      	ldr	r0, [pc, #16]	; (23f6970 <hal_adc_read+0x14>)
 23f6960:	6800      	ldr	r0, [r0, #0]
 23f6962:	4b04      	ldr	r3, [pc, #16]	; (23f6974 <hal_adc_read+0x18>)
 23f6964:	4403      	add	r3, r0
 23f6966:	681b      	ldr	r3, [r3, #0]
 23f6968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f696a:	9302      	str	r3, [sp, #8]
 23f696c:	bd09      	pop	{r0, r3, pc}
 23f696e:	0000      	.short	0x0000
 23f6970:	1006a0f0 	.word	0x1006a0f0
 23f6974:	00000014 	.word	0x00000014

023f6978 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 23f6978:	b509      	push	{r0, r3, lr}
 23f697a:	4804      	ldr	r0, [pc, #16]	; (23f698c <hal_i2c_set_speed+0x14>)
 23f697c:	6800      	ldr	r0, [r0, #0]
 23f697e:	4b04      	ldr	r3, [pc, #16]	; (23f6990 <hal_i2c_set_speed+0x18>)
 23f6980:	4403      	add	r3, r0
 23f6982:	681b      	ldr	r3, [r3, #0]
 23f6984:	681b      	ldr	r3, [r3, #0]
 23f6986:	9302      	str	r3, [sp, #8]
 23f6988:	bd09      	pop	{r0, r3, pc}
 23f698a:	0000      	.short	0x0000
 23f698c:	1006a0f0 	.word	0x1006a0f0
 23f6990:	00000010 	.word	0x00000010

023f6994 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23f6994:	b509      	push	{r0, r3, lr}
 23f6996:	4804      	ldr	r0, [pc, #16]	; (23f69a8 <hal_i2c_begin+0x14>)
 23f6998:	6800      	ldr	r0, [r0, #0]
 23f699a:	4b04      	ldr	r3, [pc, #16]	; (23f69ac <hal_i2c_begin+0x18>)
 23f699c:	4403      	add	r3, r0
 23f699e:	681b      	ldr	r3, [r3, #0]
 23f69a0:	68db      	ldr	r3, [r3, #12]
 23f69a2:	9302      	str	r3, [sp, #8]
 23f69a4:	bd09      	pop	{r0, r3, pc}
 23f69a6:	0000      	.short	0x0000
 23f69a8:	1006a0f0 	.word	0x1006a0f0
 23f69ac:	00000010 	.word	0x00000010

023f69b0 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23f69b0:	b509      	push	{r0, r3, lr}
 23f69b2:	4804      	ldr	r0, [pc, #16]	; (23f69c4 <hal_i2c_begin_transmission+0x14>)
 23f69b4:	6800      	ldr	r0, [r0, #0]
 23f69b6:	4b04      	ldr	r3, [pc, #16]	; (23f69c8 <hal_i2c_begin_transmission+0x18>)
 23f69b8:	4403      	add	r3, r0
 23f69ba:	681b      	ldr	r3, [r3, #0]
 23f69bc:	699b      	ldr	r3, [r3, #24]
 23f69be:	9302      	str	r3, [sp, #8]
 23f69c0:	bd09      	pop	{r0, r3, pc}
 23f69c2:	0000      	.short	0x0000
 23f69c4:	1006a0f0 	.word	0x1006a0f0
 23f69c8:	00000010 	.word	0x00000010

023f69cc <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23f69cc:	b509      	push	{r0, r3, lr}
 23f69ce:	4804      	ldr	r0, [pc, #16]	; (23f69e0 <hal_i2c_end_transmission+0x14>)
 23f69d0:	6800      	ldr	r0, [r0, #0]
 23f69d2:	4b04      	ldr	r3, [pc, #16]	; (23f69e4 <hal_i2c_end_transmission+0x18>)
 23f69d4:	4403      	add	r3, r0
 23f69d6:	681b      	ldr	r3, [r3, #0]
 23f69d8:	69db      	ldr	r3, [r3, #28]
 23f69da:	9302      	str	r3, [sp, #8]
 23f69dc:	bd09      	pop	{r0, r3, pc}
 23f69de:	0000      	.short	0x0000
 23f69e0:	1006a0f0 	.word	0x1006a0f0
 23f69e4:	00000010 	.word	0x00000010

023f69e8 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23f69e8:	b509      	push	{r0, r3, lr}
 23f69ea:	4804      	ldr	r0, [pc, #16]	; (23f69fc <hal_i2c_write+0x14>)
 23f69ec:	6800      	ldr	r0, [r0, #0]
 23f69ee:	4b04      	ldr	r3, [pc, #16]	; (23f6a00 <hal_i2c_write+0x18>)
 23f69f0:	4403      	add	r3, r0
 23f69f2:	681b      	ldr	r3, [r3, #0]
 23f69f4:	6a1b      	ldr	r3, [r3, #32]
 23f69f6:	9302      	str	r3, [sp, #8]
 23f69f8:	bd09      	pop	{r0, r3, pc}
 23f69fa:	0000      	.short	0x0000
 23f69fc:	1006a0f0 	.word	0x1006a0f0
 23f6a00:	00000010 	.word	0x00000010

023f6a04 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23f6a04:	b509      	push	{r0, r3, lr}
 23f6a06:	4804      	ldr	r0, [pc, #16]	; (23f6a18 <hal_i2c_available+0x14>)
 23f6a08:	6800      	ldr	r0, [r0, #0]
 23f6a0a:	4b04      	ldr	r3, [pc, #16]	; (23f6a1c <hal_i2c_available+0x18>)
 23f6a0c:	4403      	add	r3, r0
 23f6a0e:	681b      	ldr	r3, [r3, #0]
 23f6a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f6a12:	9302      	str	r3, [sp, #8]
 23f6a14:	bd09      	pop	{r0, r3, pc}
 23f6a16:	0000      	.short	0x0000
 23f6a18:	1006a0f0 	.word	0x1006a0f0
 23f6a1c:	00000010 	.word	0x00000010

023f6a20 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23f6a20:	b509      	push	{r0, r3, lr}
 23f6a22:	4804      	ldr	r0, [pc, #16]	; (23f6a34 <hal_i2c_read+0x14>)
 23f6a24:	6800      	ldr	r0, [r0, #0]
 23f6a26:	4b04      	ldr	r3, [pc, #16]	; (23f6a38 <hal_i2c_read+0x18>)
 23f6a28:	4403      	add	r3, r0
 23f6a2a:	681b      	ldr	r3, [r3, #0]
 23f6a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f6a2e:	9302      	str	r3, [sp, #8]
 23f6a30:	bd09      	pop	{r0, r3, pc}
 23f6a32:	0000      	.short	0x0000
 23f6a34:	1006a0f0 	.word	0x1006a0f0
 23f6a38:	00000010 	.word	0x00000010

023f6a3c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23f6a3c:	b509      	push	{r0, r3, lr}
 23f6a3e:	4804      	ldr	r0, [pc, #16]	; (23f6a50 <hal_i2c_peek+0x14>)
 23f6a40:	6800      	ldr	r0, [r0, #0]
 23f6a42:	4b04      	ldr	r3, [pc, #16]	; (23f6a54 <hal_i2c_peek+0x18>)
 23f6a44:	4403      	add	r3, r0
 23f6a46:	681b      	ldr	r3, [r3, #0]
 23f6a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f6a4a:	9302      	str	r3, [sp, #8]
 23f6a4c:	bd09      	pop	{r0, r3, pc}
 23f6a4e:	0000      	.short	0x0000
 23f6a50:	1006a0f0 	.word	0x1006a0f0
 23f6a54:	00000010 	.word	0x00000010

023f6a58 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23f6a58:	b509      	push	{r0, r3, lr}
 23f6a5a:	4804      	ldr	r0, [pc, #16]	; (23f6a6c <hal_i2c_flush+0x14>)
 23f6a5c:	6800      	ldr	r0, [r0, #0]
 23f6a5e:	4b04      	ldr	r3, [pc, #16]	; (23f6a70 <hal_i2c_flush+0x18>)
 23f6a60:	4403      	add	r3, r0
 23f6a62:	681b      	ldr	r3, [r3, #0]
 23f6a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f6a66:	9302      	str	r3, [sp, #8]
 23f6a68:	bd09      	pop	{r0, r3, pc}
 23f6a6a:	0000      	.short	0x0000
 23f6a6c:	1006a0f0 	.word	0x1006a0f0
 23f6a70:	00000010 	.word	0x00000010

023f6a74 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23f6a74:	b509      	push	{r0, r3, lr}
 23f6a76:	4804      	ldr	r0, [pc, #16]	; (23f6a88 <hal_i2c_is_enabled+0x14>)
 23f6a78:	6800      	ldr	r0, [r0, #0]
 23f6a7a:	4b04      	ldr	r3, [pc, #16]	; (23f6a8c <hal_i2c_is_enabled+0x18>)
 23f6a7c:	4403      	add	r3, r0
 23f6a7e:	681b      	ldr	r3, [r3, #0]
 23f6a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f6a82:	9302      	str	r3, [sp, #8]
 23f6a84:	bd09      	pop	{r0, r3, pc}
 23f6a86:	0000      	.short	0x0000
 23f6a88:	1006a0f0 	.word	0x1006a0f0
 23f6a8c:	00000010 	.word	0x00000010

023f6a90 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23f6a90:	b509      	push	{r0, r3, lr}
 23f6a92:	4804      	ldr	r0, [pc, #16]	; (23f6aa4 <hal_i2c_init+0x14>)
 23f6a94:	6800      	ldr	r0, [r0, #0]
 23f6a96:	4b04      	ldr	r3, [pc, #16]	; (23f6aa8 <hal_i2c_init+0x18>)
 23f6a98:	4403      	add	r3, r0
 23f6a9a:	681b      	ldr	r3, [r3, #0]
 23f6a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f6a9e:	9302      	str	r3, [sp, #8]
 23f6aa0:	bd09      	pop	{r0, r3, pc}
 23f6aa2:	0000      	.short	0x0000
 23f6aa4:	1006a0f0 	.word	0x1006a0f0
 23f6aa8:	00000010 	.word	0x00000010

023f6aac <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
 23f6aac:	b509      	push	{r0, r3, lr}
 23f6aae:	4804      	ldr	r0, [pc, #16]	; (23f6ac0 <hal_i2c_lock+0x14>)
 23f6ab0:	6800      	ldr	r0, [r0, #0]
 23f6ab2:	4b04      	ldr	r3, [pc, #16]	; (23f6ac4 <hal_i2c_lock+0x18>)
 23f6ab4:	4403      	add	r3, r0
 23f6ab6:	681b      	ldr	r3, [r3, #0]
 23f6ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f6aba:	9302      	str	r3, [sp, #8]
 23f6abc:	bd09      	pop	{r0, r3, pc}
 23f6abe:	0000      	.short	0x0000
 23f6ac0:	1006a0f0 	.word	0x1006a0f0
 23f6ac4:	00000010 	.word	0x00000010

023f6ac8 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
 23f6ac8:	b509      	push	{r0, r3, lr}
 23f6aca:	4804      	ldr	r0, [pc, #16]	; (23f6adc <hal_i2c_unlock+0x14>)
 23f6acc:	6800      	ldr	r0, [r0, #0]
 23f6ace:	4b04      	ldr	r3, [pc, #16]	; (23f6ae0 <hal_i2c_unlock+0x18>)
 23f6ad0:	4403      	add	r3, r0
 23f6ad2:	681b      	ldr	r3, [r3, #0]
 23f6ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f6ad6:	9302      	str	r3, [sp, #8]
 23f6ad8:	bd09      	pop	{r0, r3, pc}
 23f6ada:	0000      	.short	0x0000
 23f6adc:	1006a0f0 	.word	0x1006a0f0
 23f6ae0:	00000010 	.word	0x00000010

023f6ae4 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 23f6ae4:	b509      	push	{r0, r3, lr}
 23f6ae6:	4804      	ldr	r0, [pc, #16]	; (23f6af8 <hal_i2c_request_ex+0x14>)
 23f6ae8:	6800      	ldr	r0, [r0, #0]
 23f6aea:	4b04      	ldr	r3, [pc, #16]	; (23f6afc <hal_i2c_request_ex+0x18>)
 23f6aec:	4403      	add	r3, r0
 23f6aee:	681b      	ldr	r3, [r3, #0]
 23f6af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23f6af2:	9302      	str	r3, [sp, #8]
 23f6af4:	bd09      	pop	{r0, r3, pc}
 23f6af6:	0000      	.short	0x0000
 23f6af8:	1006a0f0 	.word	0x1006a0f0
 23f6afc:	00000010 	.word	0x00000010

023f6b00 <hal_i2c_transaction>:
DYNALIB_FN(21, hal_i2c, hal_i2c_sleep, int(hal_i2c_interface_t i2c, bool sleep, void* reserved))
DYNALIB_FN(22, hal_i2c, hal_i2c_end_transmission_ext, int(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(23, hal_i2c, hal_i2c_transaction, int(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, const hal_i2c_transmission_config_t*, void*))
 23f6b00:	b509      	push	{r0, r3, lr}
 23f6b02:	4804      	ldr	r0, [pc, #16]	; (23f6b14 <hal_i2c_transaction+0x14>)
 23f6b04:	6800      	ldr	r0, [r0, #0]
 23f6b06:	4b04      	ldr	r3, [pc, #16]	; (23f6b18 <hal_i2c_transaction+0x18>)
 23f6b08:	4403      	add	r3, r0
 23f6b0a:	681b      	ldr	r3, [r3, #0]
 23f6b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23f6b0e:	9302      	str	r3, [sp, #8]
 23f6b10:	bd09      	pop	{r0, r3, pc}
 23f6b12:	0000      	.short	0x0000
 23f6b14:	1006a0f0 	.word	0x1006a0f0
 23f6b18:	00000010 	.word	0x00000010

023f6b1c <if_get_by_index>:
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
 23f6b1c:	b509      	push	{r0, r3, lr}
 23f6b1e:	4804      	ldr	r0, [pc, #16]	; (23f6b30 <if_get_by_index+0x14>)
 23f6b20:	6800      	ldr	r0, [r0, #0]
 23f6b22:	4b04      	ldr	r3, [pc, #16]	; (23f6b34 <if_get_by_index+0x18>)
 23f6b24:	4403      	add	r3, r0
 23f6b26:	681b      	ldr	r3, [r3, #0]
 23f6b28:	699b      	ldr	r3, [r3, #24]
 23f6b2a:	9302      	str	r3, [sp, #8]
 23f6b2c:	bd09      	pop	{r0, r3, pc}
 23f6b2e:	0000      	.short	0x0000
 23f6b30:	1006a0f0 	.word	0x1006a0f0
 23f6b34:	00000054 	.word	0x00000054

023f6b38 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23f6b38:	b509      	push	{r0, r3, lr}
 23f6b3a:	4804      	ldr	r0, [pc, #16]	; (23f6b4c <inet_inet_ntop+0x14>)
 23f6b3c:	6800      	ldr	r0, [r0, #0]
 23f6b3e:	4b04      	ldr	r3, [pc, #16]	; (23f6b50 <inet_inet_ntop+0x18>)
 23f6b40:	4403      	add	r3, r0
 23f6b42:	681b      	ldr	r3, [r3, #0]
 23f6b44:	695b      	ldr	r3, [r3, #20]
 23f6b46:	9302      	str	r3, [sp, #8]
 23f6b48:	bd09      	pop	{r0, r3, pc}
 23f6b4a:	0000      	.short	0x0000
 23f6b4c:	1006a0f0 	.word	0x1006a0f0
 23f6b50:	0000004c 	.word	0x0000004c

023f6b54 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23f6b54:	b509      	push	{r0, r3, lr}
 23f6b56:	4804      	ldr	r0, [pc, #16]	; (23f6b68 <netdb_freeaddrinfo+0x14>)
 23f6b58:	6800      	ldr	r0, [r0, #0]
 23f6b5a:	4b04      	ldr	r3, [pc, #16]	; (23f6b6c <netdb_freeaddrinfo+0x18>)
 23f6b5c:	4403      	add	r3, r0
 23f6b5e:	681b      	ldr	r3, [r3, #0]
 23f6b60:	689b      	ldr	r3, [r3, #8]
 23f6b62:	9302      	str	r3, [sp, #8]
 23f6b64:	bd09      	pop	{r0, r3, pc}
 23f6b66:	0000      	.short	0x0000
 23f6b68:	1006a0f0 	.word	0x1006a0f0
 23f6b6c:	00000050 	.word	0x00000050

023f6b70 <netdb_getaddrinfo_ex>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
DYNALIB_FN(4, hal_netdb, netdb_getnameinfo, int(const struct sockaddr*, socklen_t, char*, socklen_t, char*, socklen_t, int))
DYNALIB_FN(5, hal_netdb, netdb_getaddrinfo_ex, int(const char*, const char*, const struct addrinfo*, struct addrinfo**, if_t))
 23f6b70:	b509      	push	{r0, r3, lr}
 23f6b72:	4804      	ldr	r0, [pc, #16]	; (23f6b84 <netdb_getaddrinfo_ex+0x14>)
 23f6b74:	6800      	ldr	r0, [r0, #0]
 23f6b76:	4b04      	ldr	r3, [pc, #16]	; (23f6b88 <netdb_getaddrinfo_ex+0x18>)
 23f6b78:	4403      	add	r3, r0
 23f6b7a:	681b      	ldr	r3, [r3, #0]
 23f6b7c:	695b      	ldr	r3, [r3, #20]
 23f6b7e:	9302      	str	r3, [sp, #8]
 23f6b80:	bd09      	pop	{r0, r3, pc}
 23f6b82:	0000      	.short	0x0000
 23f6b84:	1006a0f0 	.word	0x1006a0f0
 23f6b88:	00000050 	.word	0x00000050

023f6b8c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 23f6b8c:	b509      	push	{r0, r3, lr}
 23f6b8e:	4804      	ldr	r0, [pc, #16]	; (23f6ba0 <hal_spi_begin+0x14>)
 23f6b90:	6800      	ldr	r0, [r0, #0]
 23f6b92:	4b04      	ldr	r3, [pc, #16]	; (23f6ba4 <hal_spi_begin+0x18>)
 23f6b94:	4403      	add	r3, r0
 23f6b96:	681b      	ldr	r3, [r3, #0]
 23f6b98:	681b      	ldr	r3, [r3, #0]
 23f6b9a:	9302      	str	r3, [sp, #8]
 23f6b9c:	bd09      	pop	{r0, r3, pc}
 23f6b9e:	0000      	.short	0x0000
 23f6ba0:	1006a0f0 	.word	0x1006a0f0
 23f6ba4:	00000018 	.word	0x00000018

023f6ba8 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
 23f6ba8:	b509      	push	{r0, r3, lr}
 23f6baa:	4804      	ldr	r0, [pc, #16]	; (23f6bbc <hal_spi_end+0x14>)
 23f6bac:	6800      	ldr	r0, [r0, #0]
 23f6bae:	4b04      	ldr	r3, [pc, #16]	; (23f6bc0 <hal_spi_end+0x18>)
 23f6bb0:	4403      	add	r3, r0
 23f6bb2:	681b      	ldr	r3, [r3, #0]
 23f6bb4:	685b      	ldr	r3, [r3, #4]
 23f6bb6:	9302      	str	r3, [sp, #8]
 23f6bb8:	bd09      	pop	{r0, r3, pc}
 23f6bba:	0000      	.short	0x0000
 23f6bbc:	1006a0f0 	.word	0x1006a0f0
 23f6bc0:	00000018 	.word	0x00000018

023f6bc4 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 23f6bc4:	b509      	push	{r0, r3, lr}
 23f6bc6:	4804      	ldr	r0, [pc, #16]	; (23f6bd8 <hal_spi_transfer+0x14>)
 23f6bc8:	6800      	ldr	r0, [r0, #0]
 23f6bca:	4b04      	ldr	r3, [pc, #16]	; (23f6bdc <hal_spi_transfer+0x18>)
 23f6bcc:	4403      	add	r3, r0
 23f6bce:	681b      	ldr	r3, [r3, #0]
 23f6bd0:	695b      	ldr	r3, [r3, #20]
 23f6bd2:	9302      	str	r3, [sp, #8]
 23f6bd4:	bd09      	pop	{r0, r3, pc}
 23f6bd6:	0000      	.short	0x0000
 23f6bd8:	1006a0f0 	.word	0x1006a0f0
 23f6bdc:	00000018 	.word	0x00000018

023f6be0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23f6be0:	b509      	push	{r0, r3, lr}
 23f6be2:	4804      	ldr	r0, [pc, #16]	; (23f6bf4 <hal_spi_init+0x14>)
 23f6be4:	6800      	ldr	r0, [r0, #0]
 23f6be6:	4b04      	ldr	r3, [pc, #16]	; (23f6bf8 <hal_spi_init+0x18>)
 23f6be8:	4403      	add	r3, r0
 23f6bea:	681b      	ldr	r3, [r3, #0]
 23f6bec:	69db      	ldr	r3, [r3, #28]
 23f6bee:	9302      	str	r3, [sp, #8]
 23f6bf0:	bd09      	pop	{r0, r3, pc}
 23f6bf2:	0000      	.short	0x0000
 23f6bf4:	1006a0f0 	.word	0x1006a0f0
 23f6bf8:	00000018 	.word	0x00000018

023f6bfc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23f6bfc:	b509      	push	{r0, r3, lr}
 23f6bfe:	4804      	ldr	r0, [pc, #16]	; (23f6c10 <hal_spi_is_enabled+0x14>)
 23f6c00:	6800      	ldr	r0, [r0, #0]
 23f6c02:	4b04      	ldr	r3, [pc, #16]	; (23f6c14 <hal_spi_is_enabled+0x18>)
 23f6c04:	4403      	add	r3, r0
 23f6c06:	681b      	ldr	r3, [r3, #0]
 23f6c08:	6a1b      	ldr	r3, [r3, #32]
 23f6c0a:	9302      	str	r3, [sp, #8]
 23f6c0c:	bd09      	pop	{r0, r3, pc}
 23f6c0e:	0000      	.short	0x0000
 23f6c10:	1006a0f0 	.word	0x1006a0f0
 23f6c14:	00000018 	.word	0x00000018

023f6c18 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 23f6c18:	b509      	push	{r0, r3, lr}
 23f6c1a:	4804      	ldr	r0, [pc, #16]	; (23f6c2c <hal_spi_info+0x14>)
 23f6c1c:	6800      	ldr	r0, [r0, #0]
 23f6c1e:	4b04      	ldr	r3, [pc, #16]	; (23f6c30 <hal_spi_info+0x18>)
 23f6c20:	4403      	add	r3, r0
 23f6c22:	681b      	ldr	r3, [r3, #0]
 23f6c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f6c26:	9302      	str	r3, [sp, #8]
 23f6c28:	bd09      	pop	{r0, r3, pc}
 23f6c2a:	0000      	.short	0x0000
 23f6c2c:	1006a0f0 	.word	0x1006a0f0
 23f6c30:	00000018 	.word	0x00000018

023f6c34 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
 23f6c34:	b509      	push	{r0, r3, lr}
 23f6c36:	4804      	ldr	r0, [pc, #16]	; (23f6c48 <hal_spi_transfer_dma+0x14>)
 23f6c38:	6800      	ldr	r0, [r0, #0]
 23f6c3a:	4b04      	ldr	r3, [pc, #16]	; (23f6c4c <hal_spi_transfer_dma+0x18>)
 23f6c3c:	4403      	add	r3, r0
 23f6c3e:	681b      	ldr	r3, [r3, #0]
 23f6c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f6c42:	9302      	str	r3, [sp, #8]
 23f6c44:	bd09      	pop	{r0, r3, pc}
 23f6c46:	0000      	.short	0x0000
 23f6c48:	1006a0f0 	.word	0x1006a0f0
 23f6c4c:	00000018 	.word	0x00000018

023f6c50 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 23f6c50:	b509      	push	{r0, r3, lr}
 23f6c52:	4804      	ldr	r0, [pc, #16]	; (23f6c64 <hal_spi_transfer_dma_status+0x14>)
 23f6c54:	6800      	ldr	r0, [r0, #0]
 23f6c56:	4b04      	ldr	r3, [pc, #16]	; (23f6c68 <hal_spi_transfer_dma_status+0x18>)
 23f6c58:	4403      	add	r3, r0
 23f6c5a:	681b      	ldr	r3, [r3, #0]
 23f6c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23f6c5e:	9302      	str	r3, [sp, #8]
 23f6c60:	bd09      	pop	{r0, r3, pc}
 23f6c62:	0000      	.short	0x0000
 23f6c64:	1006a0f0 	.word	0x1006a0f0
 23f6c68:	00000018 	.word	0x00000018

023f6c6c <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 23f6c6c:	b509      	push	{r0, r3, lr}
 23f6c6e:	4804      	ldr	r0, [pc, #16]	; (23f6c80 <hal_spi_set_settings+0x14>)
 23f6c70:	6800      	ldr	r0, [r0, #0]
 23f6c72:	4b04      	ldr	r3, [pc, #16]	; (23f6c84 <hal_spi_set_settings+0x18>)
 23f6c74:	4403      	add	r3, r0
 23f6c76:	681b      	ldr	r3, [r3, #0]
 23f6c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f6c7a:	9302      	str	r3, [sp, #8]
 23f6c7c:	bd09      	pop	{r0, r3, pc}
 23f6c7e:	0000      	.short	0x0000
 23f6c80:	1006a0f0 	.word	0x1006a0f0
 23f6c84:	00000018 	.word	0x00000018

023f6c88 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23f6c88:	b509      	push	{r0, r3, lr}
 23f6c8a:	4804      	ldr	r0, [pc, #16]	; (23f6c9c <hal_spi_acquire+0x14>)
 23f6c8c:	6800      	ldr	r0, [r0, #0]
 23f6c8e:	4b04      	ldr	r3, [pc, #16]	; (23f6ca0 <hal_spi_acquire+0x18>)
 23f6c90:	4403      	add	r3, r0
 23f6c92:	681b      	ldr	r3, [r3, #0]
 23f6c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f6c96:	9302      	str	r3, [sp, #8]
 23f6c98:	bd09      	pop	{r0, r3, pc}
 23f6c9a:	0000      	.short	0x0000
 23f6c9c:	1006a0f0 	.word	0x1006a0f0
 23f6ca0:	00000018 	.word	0x00000018

023f6ca4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23f6ca4:	b509      	push	{r0, r3, lr}
 23f6ca6:	4804      	ldr	r0, [pc, #16]	; (23f6cb8 <hal_spi_release+0x14>)
 23f6ca8:	6800      	ldr	r0, [r0, #0]
 23f6caa:	4b04      	ldr	r3, [pc, #16]	; (23f6cbc <hal_spi_release+0x18>)
 23f6cac:	4403      	add	r3, r0
 23f6cae:	681b      	ldr	r3, [r3, #0]
 23f6cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f6cb2:	9302      	str	r3, [sp, #8]
 23f6cb4:	bd09      	pop	{r0, r3, pc}
 23f6cb6:	0000      	.short	0x0000
 23f6cb8:	1006a0f0 	.word	0x1006a0f0
 23f6cbc:	00000018 	.word	0x00000018

023f6cc0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23f6cc0:	b509      	push	{r0, r3, lr}
 23f6cc2:	4804      	ldr	r0, [pc, #16]	; (23f6cd4 <hal_usart_write+0x14>)
 23f6cc4:	6800      	ldr	r0, [r0, #0]
 23f6cc6:	4b04      	ldr	r3, [pc, #16]	; (23f6cd8 <hal_usart_write+0x18>)
 23f6cc8:	4403      	add	r3, r0
 23f6cca:	681b      	ldr	r3, [r3, #0]
 23f6ccc:	68db      	ldr	r3, [r3, #12]
 23f6cce:	9302      	str	r3, [sp, #8]
 23f6cd0:	bd09      	pop	{r0, r3, pc}
 23f6cd2:	0000      	.short	0x0000
 23f6cd4:	1006a0f0 	.word	0x1006a0f0
 23f6cd8:	00000024 	.word	0x00000024

023f6cdc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23f6cdc:	b509      	push	{r0, r3, lr}
 23f6cde:	4804      	ldr	r0, [pc, #16]	; (23f6cf0 <hal_usart_available+0x14>)
 23f6ce0:	6800      	ldr	r0, [r0, #0]
 23f6ce2:	4b04      	ldr	r3, [pc, #16]	; (23f6cf4 <hal_usart_available+0x18>)
 23f6ce4:	4403      	add	r3, r0
 23f6ce6:	681b      	ldr	r3, [r3, #0]
 23f6ce8:	691b      	ldr	r3, [r3, #16]
 23f6cea:	9302      	str	r3, [sp, #8]
 23f6cec:	bd09      	pop	{r0, r3, pc}
 23f6cee:	0000      	.short	0x0000
 23f6cf0:	1006a0f0 	.word	0x1006a0f0
 23f6cf4:	00000024 	.word	0x00000024

023f6cf8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23f6cf8:	b509      	push	{r0, r3, lr}
 23f6cfa:	4804      	ldr	r0, [pc, #16]	; (23f6d0c <hal_usart_read+0x14>)
 23f6cfc:	6800      	ldr	r0, [r0, #0]
 23f6cfe:	4b04      	ldr	r3, [pc, #16]	; (23f6d10 <hal_usart_read+0x18>)
 23f6d00:	4403      	add	r3, r0
 23f6d02:	681b      	ldr	r3, [r3, #0]
 23f6d04:	695b      	ldr	r3, [r3, #20]
 23f6d06:	9302      	str	r3, [sp, #8]
 23f6d08:	bd09      	pop	{r0, r3, pc}
 23f6d0a:	0000      	.short	0x0000
 23f6d0c:	1006a0f0 	.word	0x1006a0f0
 23f6d10:	00000024 	.word	0x00000024

023f6d14 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23f6d14:	b509      	push	{r0, r3, lr}
 23f6d16:	4804      	ldr	r0, [pc, #16]	; (23f6d28 <hal_usart_peek+0x14>)
 23f6d18:	6800      	ldr	r0, [r0, #0]
 23f6d1a:	4b04      	ldr	r3, [pc, #16]	; (23f6d2c <hal_usart_peek+0x18>)
 23f6d1c:	4403      	add	r3, r0
 23f6d1e:	681b      	ldr	r3, [r3, #0]
 23f6d20:	699b      	ldr	r3, [r3, #24]
 23f6d22:	9302      	str	r3, [sp, #8]
 23f6d24:	bd09      	pop	{r0, r3, pc}
 23f6d26:	0000      	.short	0x0000
 23f6d28:	1006a0f0 	.word	0x1006a0f0
 23f6d2c:	00000024 	.word	0x00000024

023f6d30 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23f6d30:	b509      	push	{r0, r3, lr}
 23f6d32:	4804      	ldr	r0, [pc, #16]	; (23f6d44 <hal_usart_flush+0x14>)
 23f6d34:	6800      	ldr	r0, [r0, #0]
 23f6d36:	4b04      	ldr	r3, [pc, #16]	; (23f6d48 <hal_usart_flush+0x18>)
 23f6d38:	4403      	add	r3, r0
 23f6d3a:	681b      	ldr	r3, [r3, #0]
 23f6d3c:	69db      	ldr	r3, [r3, #28]
 23f6d3e:	9302      	str	r3, [sp, #8]
 23f6d40:	bd09      	pop	{r0, r3, pc}
 23f6d42:	0000      	.short	0x0000
 23f6d44:	1006a0f0 	.word	0x1006a0f0
 23f6d48:	00000024 	.word	0x00000024

023f6d4c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23f6d4c:	b509      	push	{r0, r3, lr}
 23f6d4e:	4804      	ldr	r0, [pc, #16]	; (23f6d60 <hal_usart_is_enabled+0x14>)
 23f6d50:	6800      	ldr	r0, [r0, #0]
 23f6d52:	4b04      	ldr	r3, [pc, #16]	; (23f6d64 <hal_usart_is_enabled+0x18>)
 23f6d54:	4403      	add	r3, r0
 23f6d56:	681b      	ldr	r3, [r3, #0]
 23f6d58:	6a1b      	ldr	r3, [r3, #32]
 23f6d5a:	9302      	str	r3, [sp, #8]
 23f6d5c:	bd09      	pop	{r0, r3, pc}
 23f6d5e:	0000      	.short	0x0000
 23f6d60:	1006a0f0 	.word	0x1006a0f0
 23f6d64:	00000024 	.word	0x00000024

023f6d68 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23f6d68:	b509      	push	{r0, r3, lr}
 23f6d6a:	4804      	ldr	r0, [pc, #16]	; (23f6d7c <hal_usart_available_data_for_write+0x14>)
 23f6d6c:	6800      	ldr	r0, [r0, #0]
 23f6d6e:	4b04      	ldr	r3, [pc, #16]	; (23f6d80 <hal_usart_available_data_for_write+0x18>)
 23f6d70:	4403      	add	r3, r0
 23f6d72:	681b      	ldr	r3, [r3, #0]
 23f6d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f6d76:	9302      	str	r3, [sp, #8]
 23f6d78:	bd09      	pop	{r0, r3, pc}
 23f6d7a:	0000      	.short	0x0000
 23f6d7c:	1006a0f0 	.word	0x1006a0f0
 23f6d80:	00000024 	.word	0x00000024

023f6d84 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23f6d84:	b509      	push	{r0, r3, lr}
 23f6d86:	4804      	ldr	r0, [pc, #16]	; (23f6d98 <hal_usart_init_ex+0x14>)
 23f6d88:	6800      	ldr	r0, [r0, #0]
 23f6d8a:	4b04      	ldr	r3, [pc, #16]	; (23f6d9c <hal_usart_init_ex+0x18>)
 23f6d8c:	4403      	add	r3, r0
 23f6d8e:	681b      	ldr	r3, [r3, #0]
 23f6d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f6d92:	9302      	str	r3, [sp, #8]
 23f6d94:	bd09      	pop	{r0, r3, pc}
 23f6d96:	0000      	.short	0x0000
 23f6d98:	1006a0f0 	.word	0x1006a0f0
 23f6d9c:	00000024 	.word	0x00000024

023f6da0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23f6da0:	b509      	push	{r0, r3, lr}
 23f6da2:	4804      	ldr	r0, [pc, #16]	; (23f6db4 <HAL_USB_USART_Init+0x14>)
 23f6da4:	6800      	ldr	r0, [r0, #0]
 23f6da6:	4b04      	ldr	r3, [pc, #16]	; (23f6db8 <HAL_USB_USART_Init+0x18>)
 23f6da8:	4403      	add	r3, r0
 23f6daa:	681b      	ldr	r3, [r3, #0]
 23f6dac:	681b      	ldr	r3, [r3, #0]
 23f6dae:	9302      	str	r3, [sp, #8]
 23f6db0:	bd09      	pop	{r0, r3, pc}
 23f6db2:	0000      	.short	0x0000
 23f6db4:	1006a0f0 	.word	0x1006a0f0
 23f6db8:	00000034 	.word	0x00000034

023f6dbc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23f6dbc:	b509      	push	{r0, r3, lr}
 23f6dbe:	4804      	ldr	r0, [pc, #16]	; (23f6dd0 <HAL_USB_USART_Begin+0x14>)
 23f6dc0:	6800      	ldr	r0, [r0, #0]
 23f6dc2:	4b04      	ldr	r3, [pc, #16]	; (23f6dd4 <HAL_USB_USART_Begin+0x18>)
 23f6dc4:	4403      	add	r3, r0
 23f6dc6:	681b      	ldr	r3, [r3, #0]
 23f6dc8:	685b      	ldr	r3, [r3, #4]
 23f6dca:	9302      	str	r3, [sp, #8]
 23f6dcc:	bd09      	pop	{r0, r3, pc}
 23f6dce:	0000      	.short	0x0000
 23f6dd0:	1006a0f0 	.word	0x1006a0f0
 23f6dd4:	00000034 	.word	0x00000034

023f6dd8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN_WRAP(4, hal_usb, HAL_USB_USART_Available_Data, protected, int32_t(HAL_USB_USART_Serial))
 23f6dd8:	b509      	push	{r0, r3, lr}
 23f6dda:	4804      	ldr	r0, [pc, #16]	; (23f6dec <HAL_USB_USART_Available_Data+0x14>)
 23f6ddc:	6800      	ldr	r0, [r0, #0]
 23f6dde:	4b04      	ldr	r3, [pc, #16]	; (23f6df0 <HAL_USB_USART_Available_Data+0x18>)
 23f6de0:	4403      	add	r3, r0
 23f6de2:	681b      	ldr	r3, [r3, #0]
 23f6de4:	691b      	ldr	r3, [r3, #16]
 23f6de6:	9302      	str	r3, [sp, #8]
 23f6de8:	bd09      	pop	{r0, r3, pc}
 23f6dea:	0000      	.short	0x0000
 23f6dec:	1006a0f0 	.word	0x1006a0f0
 23f6df0:	00000034 	.word	0x00000034

023f6df4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN_WRAP(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, protected, int32_t(HAL_USB_USART_Serial))
 23f6df4:	b509      	push	{r0, r3, lr}
 23f6df6:	4804      	ldr	r0, [pc, #16]	; (23f6e08 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23f6df8:	6800      	ldr	r0, [r0, #0]
 23f6dfa:	4b04      	ldr	r3, [pc, #16]	; (23f6e0c <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23f6dfc:	4403      	add	r3, r0
 23f6dfe:	681b      	ldr	r3, [r3, #0]
 23f6e00:	695b      	ldr	r3, [r3, #20]
 23f6e02:	9302      	str	r3, [sp, #8]
 23f6e04:	bd09      	pop	{r0, r3, pc}
 23f6e06:	0000      	.short	0x0000
 23f6e08:	1006a0f0 	.word	0x1006a0f0
 23f6e0c:	00000034 	.word	0x00000034

023f6e10 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN_WRAP(6, hal_usb, HAL_USB_USART_Receive_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f6e10:	b509      	push	{r0, r3, lr}
 23f6e12:	4804      	ldr	r0, [pc, #16]	; (23f6e24 <HAL_USB_USART_Receive_Data+0x14>)
 23f6e14:	6800      	ldr	r0, [r0, #0]
 23f6e16:	4b04      	ldr	r3, [pc, #16]	; (23f6e28 <HAL_USB_USART_Receive_Data+0x18>)
 23f6e18:	4403      	add	r3, r0
 23f6e1a:	681b      	ldr	r3, [r3, #0]
 23f6e1c:	699b      	ldr	r3, [r3, #24]
 23f6e1e:	9302      	str	r3, [sp, #8]
 23f6e20:	bd09      	pop	{r0, r3, pc}
 23f6e22:	0000      	.short	0x0000
 23f6e24:	1006a0f0 	.word	0x1006a0f0
 23f6e28:	00000034 	.word	0x00000034

023f6e2c <HAL_USB_USART_Send_Data>:
DYNALIB_FN_WRAP(7, hal_usb, HAL_USB_USART_Send_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f6e2c:	b509      	push	{r0, r3, lr}
 23f6e2e:	4804      	ldr	r0, [pc, #16]	; (23f6e40 <HAL_USB_USART_Send_Data+0x14>)
 23f6e30:	6800      	ldr	r0, [r0, #0]
 23f6e32:	4b04      	ldr	r3, [pc, #16]	; (23f6e44 <HAL_USB_USART_Send_Data+0x18>)
 23f6e34:	4403      	add	r3, r0
 23f6e36:	681b      	ldr	r3, [r3, #0]
 23f6e38:	69db      	ldr	r3, [r3, #28]
 23f6e3a:	9302      	str	r3, [sp, #8]
 23f6e3c:	bd09      	pop	{r0, r3, pc}
 23f6e3e:	0000      	.short	0x0000
 23f6e40:	1006a0f0 	.word	0x1006a0f0
 23f6e44:	00000034 	.word	0x00000034

023f6e48 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN_WRAP(8, hal_usb, HAL_USB_USART_Flush_Data, protected, void(HAL_USB_USART_Serial))
 23f6e48:	b509      	push	{r0, r3, lr}
 23f6e4a:	4804      	ldr	r0, [pc, #16]	; (23f6e5c <HAL_USB_USART_Flush_Data+0x14>)
 23f6e4c:	6800      	ldr	r0, [r0, #0]
 23f6e4e:	4b04      	ldr	r3, [pc, #16]	; (23f6e60 <HAL_USB_USART_Flush_Data+0x18>)
 23f6e50:	4403      	add	r3, r0
 23f6e52:	681b      	ldr	r3, [r3, #0]
 23f6e54:	6a1b      	ldr	r3, [r3, #32]
 23f6e56:	9302      	str	r3, [sp, #8]
 23f6e58:	bd09      	pop	{r0, r3, pc}
 23f6e5a:	0000      	.short	0x0000
 23f6e5c:	1006a0f0 	.word	0x1006a0f0
 23f6e60:	00000034 	.word	0x00000034

023f6e64 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 23f6e64:	b509      	push	{r0, r3, lr}
 23f6e66:	4804      	ldr	r0, [pc, #16]	; (23f6e78 <HAL_USB_USART_Is_Connected+0x14>)
 23f6e68:	6800      	ldr	r0, [r0, #0]
 23f6e6a:	4b04      	ldr	r3, [pc, #16]	; (23f6e7c <HAL_USB_USART_Is_Connected+0x18>)
 23f6e6c:	4403      	add	r3, r0
 23f6e6e:	681b      	ldr	r3, [r3, #0]
 23f6e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f6e72:	9302      	str	r3, [sp, #8]
 23f6e74:	bd09      	pop	{r0, r3, pc}
 23f6e76:	0000      	.short	0x0000
 23f6e78:	1006a0f0 	.word	0x1006a0f0
 23f6e7c:	00000034 	.word	0x00000034

023f6e80 <hal_watchdog_set_config>:

#if HAL_PLATFORM_HW_WATCHDOG

DYNALIB_BEGIN(hal_watchdog)

DYNALIB_FN(0, hal_watchdog, hal_watchdog_set_config, int(hal_watchdog_instance_t, const hal_watchdog_config_t*, void*))
 23f6e80:	b509      	push	{r0, r3, lr}
 23f6e82:	4804      	ldr	r0, [pc, #16]	; (23f6e94 <hal_watchdog_set_config+0x14>)
 23f6e84:	6800      	ldr	r0, [r0, #0]
 23f6e86:	4b04      	ldr	r3, [pc, #16]	; (23f6e98 <hal_watchdog_set_config+0x18>)
 23f6e88:	4403      	add	r3, r0
 23f6e8a:	681b      	ldr	r3, [r3, #0]
 23f6e8c:	681b      	ldr	r3, [r3, #0]
 23f6e8e:	9302      	str	r3, [sp, #8]
 23f6e90:	bd09      	pop	{r0, r3, pc}
 23f6e92:	0000      	.short	0x0000
 23f6e94:	1006a0f0 	.word	0x1006a0f0
 23f6e98:	00000070 	.word	0x00000070

023f6e9c <hal_watchdog_start>:
DYNALIB_FN(1, hal_watchdog, hal_watchdog_on_expired_callback, int(hal_watchdog_instance_t, hal_watchdog_on_expired_callback_t, void*, void*))
DYNALIB_FN(2, hal_watchdog, hal_watchdog_start, int(hal_watchdog_instance_t, void*))
 23f6e9c:	b509      	push	{r0, r3, lr}
 23f6e9e:	4804      	ldr	r0, [pc, #16]	; (23f6eb0 <hal_watchdog_start+0x14>)
 23f6ea0:	6800      	ldr	r0, [r0, #0]
 23f6ea2:	4b04      	ldr	r3, [pc, #16]	; (23f6eb4 <hal_watchdog_start+0x18>)
 23f6ea4:	4403      	add	r3, r0
 23f6ea6:	681b      	ldr	r3, [r3, #0]
 23f6ea8:	689b      	ldr	r3, [r3, #8]
 23f6eaa:	9302      	str	r3, [sp, #8]
 23f6eac:	bd09      	pop	{r0, r3, pc}
 23f6eae:	0000      	.short	0x0000
 23f6eb0:	1006a0f0 	.word	0x1006a0f0
 23f6eb4:	00000070 	.word	0x00000070

023f6eb8 <hal_watchdog_refresh>:
DYNALIB_FN(3, hal_watchdog, hal_watchdog_stop, int(hal_watchdog_instance_t, void*))
DYNALIB_FN(4, hal_watchdog, hal_watchdog_refresh, int(hal_watchdog_instance_t, void*))
 23f6eb8:	b509      	push	{r0, r3, lr}
 23f6eba:	4804      	ldr	r0, [pc, #16]	; (23f6ecc <hal_watchdog_refresh+0x14>)
 23f6ebc:	6800      	ldr	r0, [r0, #0]
 23f6ebe:	4b04      	ldr	r3, [pc, #16]	; (23f6ed0 <hal_watchdog_refresh+0x18>)
 23f6ec0:	4403      	add	r3, r0
 23f6ec2:	681b      	ldr	r3, [r3, #0]
 23f6ec4:	691b      	ldr	r3, [r3, #16]
 23f6ec6:	9302      	str	r3, [sp, #8]
 23f6ec8:	bd09      	pop	{r0, r3, pc}
 23f6eca:	0000      	.short	0x0000
 23f6ecc:	1006a0f0 	.word	0x1006a0f0
 23f6ed0:	00000070 	.word	0x00000070

023f6ed4 <wlan_get_credentials>:
#endif
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
DYNALIB_FN(21, hal_wlan, wlan_set_ipaddress, void(const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, void*))
DYNALIB_FN(22, hal_wlan, wlan_set_ipaddress_source, void(IPAddressSource, bool, void*))
DYNALIB_FN(23, hal_wlan, wlan_scan, int(wlan_scan_result_t, void*))
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
 23f6ed4:	b509      	push	{r0, r3, lr}
 23f6ed6:	4804      	ldr	r0, [pc, #16]	; (23f6ee8 <wlan_get_credentials+0x14>)
 23f6ed8:	6800      	ldr	r0, [r0, #0]
 23f6eda:	4b04      	ldr	r3, [pc, #16]	; (23f6eec <wlan_get_credentials+0x18>)
 23f6edc:	4403      	add	r3, r0
 23f6ede:	681b      	ldr	r3, [r3, #0]
 23f6ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 23f6ee2:	9302      	str	r3, [sp, #8]
 23f6ee4:	bd09      	pop	{r0, r3, pc}
 23f6ee6:	0000      	.short	0x0000
 23f6ee8:	1006a0f0 	.word	0x1006a0f0
 23f6eec:	0000005c 	.word	0x0000005c

023f6ef0 <wlan_connected_info>:
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
 23f6ef0:	b509      	push	{r0, r3, lr}
 23f6ef2:	4804      	ldr	r0, [pc, #16]	; (23f6f04 <wlan_connected_info+0x14>)
 23f6ef4:	6800      	ldr	r0, [r0, #0]
 23f6ef6:	4b04      	ldr	r3, [pc, #16]	; (23f6f08 <wlan_connected_info+0x18>)
 23f6ef8:	4403      	add	r3, r0
 23f6efa:	681b      	ldr	r3, [r3, #0]
 23f6efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 23f6efe:	9302      	str	r3, [sp, #8]
 23f6f00:	bd09      	pop	{r0, r3, pc}
 23f6f02:	0000      	.short	0x0000
 23f6f04:	1006a0f0 	.word	0x1006a0f0
 23f6f08:	0000005c 	.word	0x0000005c

023f6f0c <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23f6f0c:	b509      	push	{r0, r3, lr}
 23f6f0e:	4804      	ldr	r0, [pc, #16]	; (23f6f20 <log_message_v+0x14>)
 23f6f10:	6800      	ldr	r0, [r0, #0]
 23f6f12:	4b04      	ldr	r3, [pc, #16]	; (23f6f24 <log_message_v+0x18>)
 23f6f14:	4403      	add	r3, r0
 23f6f16:	681b      	ldr	r3, [r3, #0]
 23f6f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f6f1a:	9302      	str	r3, [sp, #8]
 23f6f1c:	bd09      	pop	{r0, r3, pc}
 23f6f1e:	0000      	.short	0x0000
 23f6f20:	1006a0f0 	.word	0x1006a0f0
 23f6f24:	00000048 	.word	0x00000048

023f6f28 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
 23f6f28:	b509      	push	{r0, r3, lr}
 23f6f2a:	4804      	ldr	r0, [pc, #16]	; (23f6f3c <diag_get_source+0x14>)
 23f6f2c:	6800      	ldr	r0, [r0, #0]
 23f6f2e:	4b04      	ldr	r3, [pc, #16]	; (23f6f40 <diag_get_source+0x18>)
 23f6f30:	4403      	add	r3, r0
 23f6f32:	681b      	ldr	r3, [r3, #0]
 23f6f34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 23f6f38:	9302      	str	r3, [sp, #8]
 23f6f3a:	bd09      	pop	{r0, r3, pc}
 23f6f3c:	1006a0f0 	.word	0x1006a0f0
 23f6f40:	00000048 	.word	0x00000048

023f6f44 <panic_ext>:
DYNALIB_FN(48, services, devicetree_tree_lock, int(void*))
DYNALIB_FN(49, services, devicetree_tree_get, int(void*, uint32_t, void*))
DYNALIB_FN(50, services, devicetree_string_dictionary_lookup, const char*(uint32_t, void*))
DYNALIB_FN(51, services, devicetree_hash_string, uint32_t(const char*, size_t))
DYNALIB_FN(52, services, security_mode_get, int(void*))
DYNALIB_FN(53, services, panic_ext, void(const PanicData*, void*))
 23f6f44:	b509      	push	{r0, r3, lr}
 23f6f46:	4804      	ldr	r0, [pc, #16]	; (23f6f58 <panic_ext+0x14>)
 23f6f48:	6800      	ldr	r0, [r0, #0]
 23f6f4a:	4b04      	ldr	r3, [pc, #16]	; (23f6f5c <panic_ext+0x18>)
 23f6f4c:	4403      	add	r3, r0
 23f6f4e:	681b      	ldr	r3, [r3, #0]
 23f6f50:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 23f6f54:	9302      	str	r3, [sp, #8]
 23f6f56:	bd09      	pop	{r0, r3, pc}
 23f6f58:	1006a0f0 	.word	0x1006a0f0
 23f6f5c:	00000048 	.word	0x00000048

023f6f60 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 23f6f60:	b509      	push	{r0, r3, lr}
 23f6f62:	4804      	ldr	r0, [pc, #16]	; (23f6f74 <system_mode+0x14>)
 23f6f64:	6800      	ldr	r0, [r0, #0]
 23f6f66:	4b04      	ldr	r3, [pc, #16]	; (23f6f78 <system_mode+0x18>)
 23f6f68:	4403      	add	r3, r0
 23f6f6a:	681b      	ldr	r3, [r3, #0]
 23f6f6c:	681b      	ldr	r3, [r3, #0]
 23f6f6e:	9302      	str	r3, [sp, #8]
 23f6f70:	bd09      	pop	{r0, r3, pc}
 23f6f72:	0000      	.short	0x0000
 23f6f74:	1006a0f0 	.word	0x1006a0f0
 23f6f78:	00000008 	.word	0x00000008

023f6f7c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23f6f7c:	b509      	push	{r0, r3, lr}
 23f6f7e:	4804      	ldr	r0, [pc, #16]	; (23f6f90 <set_system_mode+0x14>)
 23f6f80:	6800      	ldr	r0, [r0, #0]
 23f6f82:	4b04      	ldr	r3, [pc, #16]	; (23f6f94 <set_system_mode+0x18>)
 23f6f84:	4403      	add	r3, r0
 23f6f86:	681b      	ldr	r3, [r3, #0]
 23f6f88:	685b      	ldr	r3, [r3, #4]
 23f6f8a:	9302      	str	r3, [sp, #8]
 23f6f8c:	bd09      	pop	{r0, r3, pc}
 23f6f8e:	0000      	.short	0x0000
 23f6f90:	1006a0f0 	.word	0x1006a0f0
 23f6f94:	00000008 	.word	0x00000008

023f6f98 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler_deprecated, void(void*))
DYNALIB_FN(3, system, system_firmwareUpdate_deprecated, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer_deprecated, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23f6f98:	b509      	push	{r0, r3, lr}
 23f6f9a:	4804      	ldr	r0, [pc, #16]	; (23f6fac <system_delay_ms+0x14>)
 23f6f9c:	6800      	ldr	r0, [r0, #0]
 23f6f9e:	4b04      	ldr	r3, [pc, #16]	; (23f6fb0 <system_delay_ms+0x18>)
 23f6fa0:	4403      	add	r3, r0
 23f6fa2:	681b      	ldr	r3, [r3, #0]
 23f6fa4:	695b      	ldr	r3, [r3, #20]
 23f6fa6:	9302      	str	r3, [sp, #8]
 23f6fa8:	bd09      	pop	{r0, r3, pc}
 23f6faa:	0000      	.short	0x0000
 23f6fac:	1006a0f0 	.word	0x1006a0f0
 23f6fb0:	00000008 	.word	0x00000008

023f6fb4 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
 23f6fb4:	b509      	push	{r0, r3, lr}
 23f6fb6:	4804      	ldr	r0, [pc, #16]	; (23f6fc8 <system_subscribe_event+0x14>)
 23f6fb8:	6800      	ldr	r0, [r0, #0]
 23f6fba:	4b04      	ldr	r3, [pc, #16]	; (23f6fcc <system_subscribe_event+0x18>)
 23f6fbc:	4403      	add	r3, r0
 23f6fbe:	681b      	ldr	r3, [r3, #0]
 23f6fc0:	6a1b      	ldr	r3, [r3, #32]
 23f6fc2:	9302      	str	r3, [sp, #8]
 23f6fc4:	bd09      	pop	{r0, r3, pc}
 23f6fc6:	0000      	.short	0x0000
 23f6fc8:	1006a0f0 	.word	0x1006a0f0
 23f6fcc:	00000008 	.word	0x00000008

023f6fd0 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23f6fd0:	b509      	push	{r0, r3, lr}
 23f6fd2:	4804      	ldr	r0, [pc, #16]	; (23f6fe4 <system_thread_set_state+0x14>)
 23f6fd4:	6800      	ldr	r0, [r0, #0]
 23f6fd6:	4b04      	ldr	r3, [pc, #16]	; (23f6fe8 <system_thread_set_state+0x18>)
 23f6fd8:	4403      	add	r3, r0
 23f6fda:	681b      	ldr	r3, [r3, #0]
 23f6fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f6fde:	9302      	str	r3, [sp, #8]
 23f6fe0:	bd09      	pop	{r0, r3, pc}
 23f6fe2:	0000      	.short	0x0000
 23f6fe4:	1006a0f0 	.word	0x1006a0f0
 23f6fe8:	00000008 	.word	0x00000008

023f6fec <system_version_info>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
 23f6fec:	b509      	push	{r0, r3, lr}
 23f6fee:	4804      	ldr	r0, [pc, #16]	; (23f7000 <system_version_info+0x14>)
 23f6ff0:	6800      	ldr	r0, [r0, #0]
 23f6ff2:	4b04      	ldr	r3, [pc, #16]	; (23f7004 <system_version_info+0x18>)
 23f6ff4:	4403      	add	r3, r0
 23f6ff6:	681b      	ldr	r3, [r3, #0]
 23f6ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f6ffa:	9302      	str	r3, [sp, #8]
 23f6ffc:	bd09      	pop	{r0, r3, pc}
 23f6ffe:	0000      	.short	0x0000
 23f7000:	1006a0f0 	.word	0x1006a0f0
 23f7004:	00000008 	.word	0x00000008

023f7008 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN_WRAP(16, system, Spark_Prepare_For_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN_WRAP(17, system, Spark_Save_Firmware_Chunk, protected, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN_WRAP(18, system, Spark_Finish_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 23f7008:	b509      	push	{r0, r3, lr}
 23f700a:	4804      	ldr	r0, [pc, #16]	; (23f701c <application_thread_current+0x14>)
 23f700c:	6800      	ldr	r0, [r0, #0]
 23f700e:	4b04      	ldr	r3, [pc, #16]	; (23f7020 <application_thread_current+0x18>)
 23f7010:	4403      	add	r3, r0
 23f7012:	681b      	ldr	r3, [r3, #0]
 23f7014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f7016:	9302      	str	r3, [sp, #8]
 23f7018:	bd09      	pop	{r0, r3, pc}
 23f701a:	0000      	.short	0x0000
 23f701c:	1006a0f0 	.word	0x1006a0f0
 23f7020:	00000008 	.word	0x00000008

023f7024 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 23f7024:	b509      	push	{r0, r3, lr}
 23f7026:	4804      	ldr	r0, [pc, #16]	; (23f7038 <application_thread_invoke+0x14>)
 23f7028:	6800      	ldr	r0, [r0, #0]
 23f702a:	4b04      	ldr	r3, [pc, #16]	; (23f703c <application_thread_invoke+0x18>)
 23f702c:	4403      	add	r3, r0
 23f702e:	681b      	ldr	r3, [r3, #0]
 23f7030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f7032:	9302      	str	r3, [sp, #8]
 23f7034:	bd09      	pop	{r0, r3, pc}
 23f7036:	0000      	.short	0x0000
 23f7038:	1006a0f0 	.word	0x1006a0f0
 23f703c:	00000008 	.word	0x00000008

023f7040 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 23f7040:	b509      	push	{r0, r3, lr}
 23f7042:	4804      	ldr	r0, [pc, #16]	; (23f7054 <system_thread_get_state+0x14>)
 23f7044:	6800      	ldr	r0, [r0, #0]
 23f7046:	4b04      	ldr	r3, [pc, #16]	; (23f7058 <system_thread_get_state+0x18>)
 23f7048:	4403      	add	r3, r0
 23f704a:	681b      	ldr	r3, [r3, #0]
 23f704c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f704e:	9302      	str	r3, [sp, #8]
 23f7050:	bd09      	pop	{r0, r3, pc}
 23f7052:	0000      	.short	0x0000
 23f7054:	1006a0f0 	.word	0x1006a0f0
 23f7058:	00000008 	.word	0x00000008

023f705c <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
 23f705c:	b509      	push	{r0, r3, lr}
 23f705e:	4804      	ldr	r0, [pc, #16]	; (23f7070 <system_notify_time_changed+0x14>)
 23f7060:	6800      	ldr	r0, [r0, #0]
 23f7062:	4b04      	ldr	r3, [pc, #16]	; (23f7074 <system_notify_time_changed+0x18>)
 23f7064:	4403      	add	r3, r0
 23f7066:	681b      	ldr	r3, [r3, #0]
 23f7068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23f706a:	9302      	str	r3, [sp, #8]
 23f706c:	bd09      	pop	{r0, r3, pc}
 23f706e:	0000      	.short	0x0000
 23f7070:	1006a0f0 	.word	0x1006a0f0
 23f7074:	00000008 	.word	0x00000008

023f7078 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23f7078:	b509      	push	{r0, r3, lr}
 23f707a:	4804      	ldr	r0, [pc, #16]	; (23f708c <system_ctrl_set_app_request_handler+0x14>)
 23f707c:	6800      	ldr	r0, [r0, #0]
 23f707e:	4b04      	ldr	r3, [pc, #16]	; (23f7090 <system_ctrl_set_app_request_handler+0x18>)
 23f7080:	4403      	add	r3, r0
 23f7082:	681b      	ldr	r3, [r3, #0]
 23f7084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23f7088:	9302      	str	r3, [sp, #8]
 23f708a:	bd09      	pop	{r0, r3, pc}
 23f708c:	1006a0f0 	.word	0x1006a0f0
 23f7090:	00000008 	.word	0x00000008

023f7094 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23f7094:	b509      	push	{r0, r3, lr}
 23f7096:	4804      	ldr	r0, [pc, #16]	; (23f70a8 <system_ctrl_set_result+0x14>)
 23f7098:	6800      	ldr	r0, [r0, #0]
 23f709a:	4b04      	ldr	r3, [pc, #16]	; (23f70ac <system_ctrl_set_result+0x18>)
 23f709c:	4403      	add	r3, r0
 23f709e:	681b      	ldr	r3, [r3, #0]
 23f70a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23f70a4:	9302      	str	r3, [sp, #8]
 23f70a6:	bd09      	pop	{r0, r3, pc}
 23f70a8:	1006a0f0 	.word	0x1006a0f0
 23f70ac:	00000008 	.word	0x00000008

023f70b0 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
 23f70b0:	b509      	push	{r0, r3, lr}
 23f70b2:	4804      	ldr	r0, [pc, #16]	; (23f70c4 <system_power_management_set_config+0x14>)
 23f70b4:	6800      	ldr	r0, [r0, #0]
 23f70b6:	4b04      	ldr	r3, [pc, #16]	; (23f70c8 <system_power_management_set_config+0x18>)
 23f70b8:	4403      	add	r3, r0
 23f70ba:	681b      	ldr	r3, [r3, #0]
 23f70bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 23f70c0:	9302      	str	r3, [sp, #8]
 23f70c2:	bd09      	pop	{r0, r3, pc}
 23f70c4:	1006a0f0 	.word	0x1006a0f0
 23f70c8:	00000008 	.word	0x00000008

023f70cc <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 23f70cc:	b509      	push	{r0, r3, lr}
 23f70ce:	4804      	ldr	r0, [pc, #16]	; (23f70e0 <system_reset+0x14>)
 23f70d0:	6800      	ldr	r0, [r0, #0]
 23f70d2:	4b04      	ldr	r3, [pc, #16]	; (23f70e4 <system_reset+0x18>)
 23f70d4:	4403      	add	r3, r0
 23f70d6:	681b      	ldr	r3, [r3, #0]
 23f70d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 23f70dc:	9302      	str	r3, [sp, #8]
 23f70de:	bd09      	pop	{r0, r3, pc}
 23f70e0:	1006a0f0 	.word	0x1006a0f0
 23f70e4:	00000008 	.word	0x00000008

023f70e8 <system_power_management_get_config>:

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX1 + 2, system, system_power_management_get_config, int(hal_power_config*, void*))
 23f70e8:	b509      	push	{r0, r3, lr}
 23f70ea:	4804      	ldr	r0, [pc, #16]	; (23f70fc <system_power_management_get_config+0x14>)
 23f70ec:	6800      	ldr	r0, [r0, #0]
 23f70ee:	4b04      	ldr	r3, [pc, #16]	; (23f7100 <system_power_management_get_config+0x18>)
 23f70f0:	4403      	add	r3, r0
 23f70f2:	681b      	ldr	r3, [r3, #0]
 23f70f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 23f70f8:	9302      	str	r3, [sp, #8]
 23f70fa:	bd09      	pop	{r0, r3, pc}
 23f70fc:	1006a0f0 	.word	0x1006a0f0
 23f7100:	00000008 	.word	0x00000008

023f7104 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 23f7104:	b509      	push	{r0, r3, lr}
 23f7106:	4804      	ldr	r0, [pc, #16]	; (23f7118 <spark_function+0x14>)
 23f7108:	6800      	ldr	r0, [r0, #0]
 23f710a:	4b04      	ldr	r3, [pc, #16]	; (23f711c <spark_function+0x18>)
 23f710c:	4403      	add	r3, r0
 23f710e:	681b      	ldr	r3, [r3, #0]
 23f7110:	685b      	ldr	r3, [r3, #4]
 23f7112:	9302      	str	r3, [sp, #8]
 23f7114:	bd09      	pop	{r0, r3, pc}
 23f7116:	0000      	.short	0x0000
 23f7118:	1006a0f0 	.word	0x1006a0f0
 23f711c:	0000002c 	.word	0x0000002c

023f7120 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23f7120:	b509      	push	{r0, r3, lr}
 23f7122:	4804      	ldr	r0, [pc, #16]	; (23f7134 <spark_process+0x14>)
 23f7124:	6800      	ldr	r0, [r0, #0]
 23f7126:	4b04      	ldr	r3, [pc, #16]	; (23f7138 <spark_process+0x18>)
 23f7128:	4403      	add	r3, r0
 23f712a:	681b      	ldr	r3, [r3, #0]
 23f712c:	689b      	ldr	r3, [r3, #8]
 23f712e:	9302      	str	r3, [sp, #8]
 23f7130:	bd09      	pop	{r0, r3, pc}
 23f7132:	0000      	.short	0x0000
 23f7134:	1006a0f0 	.word	0x1006a0f0
 23f7138:	0000002c 	.word	0x0000002c

023f713c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 23f713c:	b509      	push	{r0, r3, lr}
 23f713e:	4804      	ldr	r0, [pc, #16]	; (23f7150 <spark_cloud_flag_connect+0x14>)
 23f7140:	6800      	ldr	r0, [r0, #0]
 23f7142:	4b04      	ldr	r3, [pc, #16]	; (23f7154 <spark_cloud_flag_connect+0x18>)
 23f7144:	4403      	add	r3, r0
 23f7146:	681b      	ldr	r3, [r3, #0]
 23f7148:	68db      	ldr	r3, [r3, #12]
 23f714a:	9302      	str	r3, [sp, #8]
 23f714c:	bd09      	pop	{r0, r3, pc}
 23f714e:	0000      	.short	0x0000
 23f7150:	1006a0f0 	.word	0x1006a0f0
 23f7154:	0000002c 	.word	0x0000002c

023f7158 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 23f7158:	b509      	push	{r0, r3, lr}
 23f715a:	4804      	ldr	r0, [pc, #16]	; (23f716c <spark_cloud_flag_connected+0x14>)
 23f715c:	6800      	ldr	r0, [r0, #0]
 23f715e:	4b04      	ldr	r3, [pc, #16]	; (23f7170 <spark_cloud_flag_connected+0x18>)
 23f7160:	4403      	add	r3, r0
 23f7162:	681b      	ldr	r3, [r3, #0]
 23f7164:	695b      	ldr	r3, [r3, #20]
 23f7166:	9302      	str	r3, [sp, #8]
 23f7168:	bd09      	pop	{r0, r3, pc}
 23f716a:	0000      	.short	0x0000
 23f716c:	1006a0f0 	.word	0x1006a0f0
 23f7170:	0000002c 	.word	0x0000002c

023f7174 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 23f7174:	b509      	push	{r0, r3, lr}
 23f7176:	4804      	ldr	r0, [pc, #16]	; (23f7188 <spark_deviceID+0x14>)
 23f7178:	6800      	ldr	r0, [r0, #0]
 23f717a:	4b04      	ldr	r3, [pc, #16]	; (23f718c <spark_deviceID+0x18>)
 23f717c:	4403      	add	r3, r0
 23f717e:	681b      	ldr	r3, [r3, #0]
 23f7180:	69db      	ldr	r3, [r3, #28]
 23f7182:	9302      	str	r3, [sp, #8]
 23f7184:	bd09      	pop	{r0, r3, pc}
 23f7186:	0000      	.short	0x0000
 23f7188:	1006a0f0 	.word	0x1006a0f0
 23f718c:	0000002c 	.word	0x0000002c

023f7190 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 23f7190:	b509      	push	{r0, r3, lr}
 23f7192:	4804      	ldr	r0, [pc, #16]	; (23f71a4 <spark_send_event+0x14>)
 23f7194:	6800      	ldr	r0, [r0, #0]
 23f7196:	4b04      	ldr	r3, [pc, #16]	; (23f71a8 <spark_send_event+0x18>)
 23f7198:	4403      	add	r3, r0
 23f719a:	681b      	ldr	r3, [r3, #0]
 23f719c:	6a1b      	ldr	r3, [r3, #32]
 23f719e:	9302      	str	r3, [sp, #8]
 23f71a0:	bd09      	pop	{r0, r3, pc}
 23f71a2:	0000      	.short	0x0000
 23f71a4:	1006a0f0 	.word	0x1006a0f0
 23f71a8:	0000002c 	.word	0x0000002c

023f71ac <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, spark_subscribe_param*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 23f71ac:	b509      	push	{r0, r3, lr}
 23f71ae:	4804      	ldr	r0, [pc, #16]	; (23f71c0 <spark_sync_time+0x14>)
 23f71b0:	6800      	ldr	r0, [r0, #0]
 23f71b2:	4b04      	ldr	r3, [pc, #16]	; (23f71c4 <spark_sync_time+0x18>)
 23f71b4:	4403      	add	r3, r0
 23f71b6:	681b      	ldr	r3, [r3, #0]
 23f71b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f71ba:	9302      	str	r3, [sp, #8]
 23f71bc:	bd09      	pop	{r0, r3, pc}
 23f71be:	0000      	.short	0x0000
 23f71c0:	1006a0f0 	.word	0x1006a0f0
 23f71c4:	0000002c 	.word	0x0000002c

023f71c8 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 23f71c8:	b509      	push	{r0, r3, lr}
 23f71ca:	4804      	ldr	r0, [pc, #16]	; (23f71dc <spark_sync_time_pending+0x14>)
 23f71cc:	6800      	ldr	r0, [r0, #0]
 23f71ce:	4b04      	ldr	r3, [pc, #16]	; (23f71e0 <spark_sync_time_pending+0x18>)
 23f71d0:	4403      	add	r3, r0
 23f71d2:	681b      	ldr	r3, [r3, #0]
 23f71d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f71d6:	9302      	str	r3, [sp, #8]
 23f71d8:	bd09      	pop	{r0, r3, pc}
 23f71da:	0000      	.short	0x0000
 23f71dc:	1006a0f0 	.word	0x1006a0f0
 23f71e0:	0000002c 	.word	0x0000002c

023f71e4 <spark_set_connection_property>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
 23f71e4:	b509      	push	{r0, r3, lr}
 23f71e6:	4804      	ldr	r0, [pc, #16]	; (23f71f8 <spark_set_connection_property+0x14>)
 23f71e8:	6800      	ldr	r0, [r0, #0]
 23f71ea:	4b04      	ldr	r3, [pc, #16]	; (23f71fc <spark_set_connection_property+0x18>)
 23f71ec:	4403      	add	r3, r0
 23f71ee:	681b      	ldr	r3, [r3, #0]
 23f71f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23f71f2:	9302      	str	r3, [sp, #8]
 23f71f4:	bd09      	pop	{r0, r3, pc}
 23f71f6:	0000      	.short	0x0000
 23f71f8:	1006a0f0 	.word	0x1006a0f0
 23f71fc:	0000002c 	.word	0x0000002c

023f7200 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23f7200:	b509      	push	{r0, r3, lr}
 23f7202:	4804      	ldr	r0, [pc, #16]	; (23f7214 <spark_set_random_seed_from_cloud_handler+0x14>)
 23f7204:	6800      	ldr	r0, [r0, #0]
 23f7206:	4b04      	ldr	r3, [pc, #16]	; (23f7218 <spark_set_random_seed_from_cloud_handler+0x18>)
 23f7208:	4403      	add	r3, r0
 23f720a:	681b      	ldr	r3, [r3, #0]
 23f720c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f720e:	9302      	str	r3, [sp, #8]
 23f7210:	bd09      	pop	{r0, r3, pc}
 23f7212:	0000      	.short	0x0000
 23f7214:	1006a0f0 	.word	0x1006a0f0
 23f7218:	0000002c 	.word	0x0000002c

023f721c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 23f721c:	b509      	push	{r0, r3, lr}
 23f721e:	4804      	ldr	r0, [pc, #16]	; (23f7230 <spark_cloud_disconnect+0x14>)
 23f7220:	6800      	ldr	r0, [r0, #0]
 23f7222:	4b04      	ldr	r3, [pc, #16]	; (23f7234 <spark_cloud_disconnect+0x18>)
 23f7224:	4403      	add	r3, r0
 23f7226:	681b      	ldr	r3, [r3, #0]
 23f7228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f722a:	9302      	str	r3, [sp, #8]
 23f722c:	bd09      	pop	{r0, r3, pc}
 23f722e:	0000      	.short	0x0000
 23f7230:	1006a0f0 	.word	0x1006a0f0
 23f7234:	0000002c 	.word	0x0000002c

023f7238 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
 23f7238:	b509      	push	{r0, r3, lr}
 23f723a:	4804      	ldr	r0, [pc, #16]	; (23f724c <network_config+0x14>)
 23f723c:	6800      	ldr	r0, [r0, #0]
 23f723e:	4b04      	ldr	r3, [pc, #16]	; (23f7250 <network_config+0x18>)
 23f7240:	4403      	add	r3, r0
 23f7242:	681b      	ldr	r3, [r3, #0]
 23f7244:	681b      	ldr	r3, [r3, #0]
 23f7246:	9302      	str	r3, [sp, #8]
 23f7248:	bd09      	pop	{r0, r3, pc}
 23f724a:	0000      	.short	0x0000
 23f724c:	1006a0f0 	.word	0x1006a0f0
 23f7250:	00000028 	.word	0x00000028

023f7254 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23f7254:	b509      	push	{r0, r3, lr}
 23f7256:	4804      	ldr	r0, [pc, #16]	; (23f7268 <network_connect+0x14>)
 23f7258:	6800      	ldr	r0, [r0, #0]
 23f725a:	4b04      	ldr	r3, [pc, #16]	; (23f726c <network_connect+0x18>)
 23f725c:	4403      	add	r3, r0
 23f725e:	681b      	ldr	r3, [r3, #0]
 23f7260:	685b      	ldr	r3, [r3, #4]
 23f7262:	9302      	str	r3, [sp, #8]
 23f7264:	bd09      	pop	{r0, r3, pc}
 23f7266:	0000      	.short	0x0000
 23f7268:	1006a0f0 	.word	0x1006a0f0
 23f726c:	00000028 	.word	0x00000028

023f7270 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23f7270:	b509      	push	{r0, r3, lr}
 23f7272:	4804      	ldr	r0, [pc, #16]	; (23f7284 <network_connecting+0x14>)
 23f7274:	6800      	ldr	r0, [r0, #0]
 23f7276:	4b04      	ldr	r3, [pc, #16]	; (23f7288 <network_connecting+0x18>)
 23f7278:	4403      	add	r3, r0
 23f727a:	681b      	ldr	r3, [r3, #0]
 23f727c:	689b      	ldr	r3, [r3, #8]
 23f727e:	9302      	str	r3, [sp, #8]
 23f7280:	bd09      	pop	{r0, r3, pc}
 23f7282:	0000      	.short	0x0000
 23f7284:	1006a0f0 	.word	0x1006a0f0
 23f7288:	00000028 	.word	0x00000028

023f728c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23f728c:	b509      	push	{r0, r3, lr}
 23f728e:	4804      	ldr	r0, [pc, #16]	; (23f72a0 <network_disconnect+0x14>)
 23f7290:	6800      	ldr	r0, [r0, #0]
 23f7292:	4b04      	ldr	r3, [pc, #16]	; (23f72a4 <network_disconnect+0x18>)
 23f7294:	4403      	add	r3, r0
 23f7296:	681b      	ldr	r3, [r3, #0]
 23f7298:	68db      	ldr	r3, [r3, #12]
 23f729a:	9302      	str	r3, [sp, #8]
 23f729c:	bd09      	pop	{r0, r3, pc}
 23f729e:	0000      	.short	0x0000
 23f72a0:	1006a0f0 	.word	0x1006a0f0
 23f72a4:	00000028 	.word	0x00000028

023f72a8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23f72a8:	b509      	push	{r0, r3, lr}
 23f72aa:	4804      	ldr	r0, [pc, #16]	; (23f72bc <network_ready+0x14>)
 23f72ac:	6800      	ldr	r0, [r0, #0]
 23f72ae:	4b04      	ldr	r3, [pc, #16]	; (23f72c0 <network_ready+0x18>)
 23f72b0:	4403      	add	r3, r0
 23f72b2:	681b      	ldr	r3, [r3, #0]
 23f72b4:	691b      	ldr	r3, [r3, #16]
 23f72b6:	9302      	str	r3, [sp, #8]
 23f72b8:	bd09      	pop	{r0, r3, pc}
 23f72ba:	0000      	.short	0x0000
 23f72bc:	1006a0f0 	.word	0x1006a0f0
 23f72c0:	00000028 	.word	0x00000028

023f72c4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23f72c4:	b509      	push	{r0, r3, lr}
 23f72c6:	4804      	ldr	r0, [pc, #16]	; (23f72d8 <network_on+0x14>)
 23f72c8:	6800      	ldr	r0, [r0, #0]
 23f72ca:	4b04      	ldr	r3, [pc, #16]	; (23f72dc <network_on+0x18>)
 23f72cc:	4403      	add	r3, r0
 23f72ce:	681b      	ldr	r3, [r3, #0]
 23f72d0:	695b      	ldr	r3, [r3, #20]
 23f72d2:	9302      	str	r3, [sp, #8]
 23f72d4:	bd09      	pop	{r0, r3, pc}
 23f72d6:	0000      	.short	0x0000
 23f72d8:	1006a0f0 	.word	0x1006a0f0
 23f72dc:	00000028 	.word	0x00000028

023f72e0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23f72e0:	b509      	push	{r0, r3, lr}
 23f72e2:	4804      	ldr	r0, [pc, #16]	; (23f72f4 <network_off+0x14>)
 23f72e4:	6800      	ldr	r0, [r0, #0]
 23f72e6:	4b04      	ldr	r3, [pc, #16]	; (23f72f8 <network_off+0x18>)
 23f72e8:	4403      	add	r3, r0
 23f72ea:	681b      	ldr	r3, [r3, #0]
 23f72ec:	699b      	ldr	r3, [r3, #24]
 23f72ee:	9302      	str	r3, [sp, #8]
 23f72f0:	bd09      	pop	{r0, r3, pc}
 23f72f2:	0000      	.short	0x0000
 23f72f4:	1006a0f0 	.word	0x1006a0f0
 23f72f8:	00000028 	.word	0x00000028

023f72fc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23f72fc:	b509      	push	{r0, r3, lr}
 23f72fe:	4804      	ldr	r0, [pc, #16]	; (23f7310 <network_listen+0x14>)
 23f7300:	6800      	ldr	r0, [r0, #0]
 23f7302:	4b04      	ldr	r3, [pc, #16]	; (23f7314 <network_listen+0x18>)
 23f7304:	4403      	add	r3, r0
 23f7306:	681b      	ldr	r3, [r3, #0]
 23f7308:	69db      	ldr	r3, [r3, #28]
 23f730a:	9302      	str	r3, [sp, #8]
 23f730c:	bd09      	pop	{r0, r3, pc}
 23f730e:	0000      	.short	0x0000
 23f7310:	1006a0f0 	.word	0x1006a0f0
 23f7314:	00000028 	.word	0x00000028

023f7318 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23f7318:	b509      	push	{r0, r3, lr}
 23f731a:	4804      	ldr	r0, [pc, #16]	; (23f732c <network_listening+0x14>)
 23f731c:	6800      	ldr	r0, [r0, #0]
 23f731e:	4b04      	ldr	r3, [pc, #16]	; (23f7330 <network_listening+0x18>)
 23f7320:	4403      	add	r3, r0
 23f7322:	681b      	ldr	r3, [r3, #0]
 23f7324:	6a1b      	ldr	r3, [r3, #32]
 23f7326:	9302      	str	r3, [sp, #8]
 23f7328:	bd09      	pop	{r0, r3, pc}
 23f732a:	0000      	.short	0x0000
 23f732c:	1006a0f0 	.word	0x1006a0f0
 23f7330:	00000028 	.word	0x00000028

023f7334 <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
 23f7334:	b509      	push	{r0, r3, lr}
 23f7336:	4804      	ldr	r0, [pc, #16]	; (23f7348 <network_set_credentials+0x14>)
 23f7338:	6800      	ldr	r0, [r0, #0]
 23f733a:	4b04      	ldr	r3, [pc, #16]	; (23f734c <network_set_credentials+0x18>)
 23f733c:	4403      	add	r3, r0
 23f733e:	681b      	ldr	r3, [r3, #0]
 23f7340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f7342:	9302      	str	r3, [sp, #8]
 23f7344:	bd09      	pop	{r0, r3, pc}
 23f7346:	0000      	.short	0x0000
 23f7348:	1006a0f0 	.word	0x1006a0f0
 23f734c:	00000028 	.word	0x00000028

023f7350 <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
 23f7350:	b509      	push	{r0, r3, lr}
 23f7352:	4804      	ldr	r0, [pc, #16]	; (23f7364 <network_clear_credentials+0x14>)
 23f7354:	6800      	ldr	r0, [r0, #0]
 23f7356:	4b04      	ldr	r3, [pc, #16]	; (23f7368 <network_clear_credentials+0x18>)
 23f7358:	4403      	add	r3, r0
 23f735a:	681b      	ldr	r3, [r3, #0]
 23f735c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f735e:	9302      	str	r3, [sp, #8]
 23f7360:	bd09      	pop	{r0, r3, pc}
 23f7362:	0000      	.short	0x0000
 23f7364:	1006a0f0 	.word	0x1006a0f0
 23f7368:	00000028 	.word	0x00000028

023f736c <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23f736c:	b509      	push	{r0, r3, lr}
 23f736e:	4804      	ldr	r0, [pc, #16]	; (23f7380 <network_set_listen_timeout+0x14>)
 23f7370:	6800      	ldr	r0, [r0, #0]
 23f7372:	4b04      	ldr	r3, [pc, #16]	; (23f7384 <network_set_listen_timeout+0x18>)
 23f7374:	4403      	add	r3, r0
 23f7376:	681b      	ldr	r3, [r3, #0]
 23f7378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f737a:	9302      	str	r3, [sp, #8]
 23f737c:	bd09      	pop	{r0, r3, pc}
 23f737e:	0000      	.short	0x0000
 23f7380:	1006a0f0 	.word	0x1006a0f0
 23f7384:	00000028 	.word	0x00000028

023f7388 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23f7388:	b509      	push	{r0, r3, lr}
 23f738a:	4804      	ldr	r0, [pc, #16]	; (23f739c <network_get_listen_timeout+0x14>)
 23f738c:	6800      	ldr	r0, [r0, #0]
 23f738e:	4b04      	ldr	r3, [pc, #16]	; (23f73a0 <network_get_listen_timeout+0x18>)
 23f7390:	4403      	add	r3, r0
 23f7392:	681b      	ldr	r3, [r3, #0]
 23f7394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f7396:	9302      	str	r3, [sp, #8]
 23f7398:	bd09      	pop	{r0, r3, pc}
 23f739a:	0000      	.short	0x0000
 23f739c:	1006a0f0 	.word	0x1006a0f0
 23f73a0:	00000028 	.word	0x00000028

023f73a4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23f73a4:	b509      	push	{r0, r3, lr}
 23f73a6:	4804      	ldr	r0, [pc, #16]	; (23f73b8 <network_is_on+0x14>)
 23f73a8:	6800      	ldr	r0, [r0, #0]
 23f73aa:	4b04      	ldr	r3, [pc, #16]	; (23f73bc <network_is_on+0x18>)
 23f73ac:	4403      	add	r3, r0
 23f73ae:	681b      	ldr	r3, [r3, #0]
 23f73b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f73b2:	9302      	str	r3, [sp, #8]
 23f73b4:	bd09      	pop	{r0, r3, pc}
 23f73b6:	0000      	.short	0x0000
 23f73b8:	1006a0f0 	.word	0x1006a0f0
 23f73bc:	00000028 	.word	0x00000028

023f73c0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23f73c0:	b509      	push	{r0, r3, lr}
 23f73c2:	4804      	ldr	r0, [pc, #16]	; (23f73d4 <network_is_off+0x14>)
 23f73c4:	6800      	ldr	r0, [r0, #0]
 23f73c6:	4b04      	ldr	r3, [pc, #16]	; (23f73d8 <network_is_off+0x18>)
 23f73c8:	4403      	add	r3, r0
 23f73ca:	681b      	ldr	r3, [r3, #0]
 23f73cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f73ce:	9302      	str	r3, [sp, #8]
 23f73d0:	bd09      	pop	{r0, r3, pc}
 23f73d2:	0000      	.short	0x0000
 23f73d4:	1006a0f0 	.word	0x1006a0f0
 23f73d8:	00000028 	.word	0x00000028

023f73dc <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
 23f73dc:	b509      	push	{r0, r3, lr}
 23f73de:	4804      	ldr	r0, [pc, #16]	; (23f73f0 <network_prefer+0x14>)
 23f73e0:	6800      	ldr	r0, [r0, #0]
 23f73e2:	4b04      	ldr	r3, [pc, #16]	; (23f73f4 <network_prefer+0x18>)
 23f73e4:	4403      	add	r3, r0
 23f73e6:	681b      	ldr	r3, [r3, #0]
 23f73e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f73ea:	9302      	str	r3, [sp, #8]
 23f73ec:	bd09      	pop	{r0, r3, pc}
 23f73ee:	0000      	.short	0x0000
 23f73f0:	1006a0f0 	.word	0x1006a0f0
 23f73f4:	00000028 	.word	0x00000028

023f73f8 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
 23f73f8:	b509      	push	{r0, r3, lr}
 23f73fa:	4804      	ldr	r0, [pc, #16]	; (23f740c <network_is_preferred+0x14>)
 23f73fc:	6800      	ldr	r0, [r0, #0]
 23f73fe:	4b04      	ldr	r3, [pc, #16]	; (23f7410 <network_is_preferred+0x18>)
 23f7400:	4403      	add	r3, r0
 23f7402:	681b      	ldr	r3, [r3, #0]
 23f7404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f7406:	9302      	str	r3, [sp, #8]
 23f7408:	bd09      	pop	{r0, r3, pc}
 23f740a:	0000      	.short	0x0000
 23f740c:	1006a0f0 	.word	0x1006a0f0
 23f7410:	00000028 	.word	0x00000028

023f7414 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || defined(DYNALIB_IMPORT)

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23f7414:	b509      	push	{r0, r3, lr}
 23f7416:	4804      	ldr	r0, [pc, #16]	; (23f7428 <malloc+0x14>)
 23f7418:	6800      	ldr	r0, [r0, #0]
 23f741a:	4b04      	ldr	r3, [pc, #16]	; (23f742c <malloc+0x18>)
 23f741c:	4403      	add	r3, r0
 23f741e:	681b      	ldr	r3, [r3, #0]
 23f7420:	681b      	ldr	r3, [r3, #0]
 23f7422:	9302      	str	r3, [sp, #8]
 23f7424:	bd09      	pop	{r0, r3, pc}
 23f7426:	0000      	.short	0x0000
 23f7428:	1006a0f0 	.word	0x1006a0f0
 23f742c:	00000004 	.word	0x00000004

023f7430 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23f7430:	b509      	push	{r0, r3, lr}
 23f7432:	4804      	ldr	r0, [pc, #16]	; (23f7444 <free+0x14>)
 23f7434:	6800      	ldr	r0, [r0, #0]
 23f7436:	4b04      	ldr	r3, [pc, #16]	; (23f7448 <free+0x18>)
 23f7438:	4403      	add	r3, r0
 23f743a:	681b      	ldr	r3, [r3, #0]
 23f743c:	685b      	ldr	r3, [r3, #4]
 23f743e:	9302      	str	r3, [sp, #8]
 23f7440:	bd09      	pop	{r0, r3, pc}
 23f7442:	0000      	.short	0x0000
 23f7444:	1006a0f0 	.word	0x1006a0f0
 23f7448:	00000004 	.word	0x00000004

023f744c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23f744c:	b509      	push	{r0, r3, lr}
 23f744e:	4804      	ldr	r0, [pc, #16]	; (23f7460 <realloc+0x14>)
 23f7450:	6800      	ldr	r0, [r0, #0]
 23f7452:	4b04      	ldr	r3, [pc, #16]	; (23f7464 <realloc+0x18>)
 23f7454:	4403      	add	r3, r0
 23f7456:	681b      	ldr	r3, [r3, #0]
 23f7458:	689b      	ldr	r3, [r3, #8]
 23f745a:	9302      	str	r3, [sp, #8]
 23f745c:	bd09      	pop	{r0, r3, pc}
 23f745e:	0000      	.short	0x0000
 23f7460:	1006a0f0 	.word	0x1006a0f0
 23f7464:	00000004 	.word	0x00000004

023f7468 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 23f7468:	b509      	push	{r0, r3, lr}
 23f746a:	4804      	ldr	r0, [pc, #16]	; (23f747c <sprintf+0x14>)
 23f746c:	6800      	ldr	r0, [r0, #0]
 23f746e:	4b04      	ldr	r3, [pc, #16]	; (23f7480 <sprintf+0x18>)
 23f7470:	4403      	add	r3, r0
 23f7472:	681b      	ldr	r3, [r3, #0]
 23f7474:	68db      	ldr	r3, [r3, #12]
 23f7476:	9302      	str	r3, [sp, #8]
 23f7478:	bd09      	pop	{r0, r3, pc}
 23f747a:	0000      	.short	0x0000
 23f747c:	1006a0f0 	.word	0x1006a0f0
 23f7480:	00000004 	.word	0x00000004

023f7484 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 23f7484:	b509      	push	{r0, r3, lr}
 23f7486:	4804      	ldr	r0, [pc, #16]	; (23f7498 <siprintf+0x14>)
 23f7488:	6800      	ldr	r0, [r0, #0]
 23f748a:	4b04      	ldr	r3, [pc, #16]	; (23f749c <siprintf+0x18>)
 23f748c:	4403      	add	r3, r0
 23f748e:	681b      	ldr	r3, [r3, #0]
 23f7490:	691b      	ldr	r3, [r3, #16]
 23f7492:	9302      	str	r3, [sp, #8]
 23f7494:	bd09      	pop	{r0, r3, pc}
 23f7496:	0000      	.short	0x0000
 23f7498:	1006a0f0 	.word	0x1006a0f0
 23f749c:	00000004 	.word	0x00000004

023f74a0 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
 23f74a0:	b509      	push	{r0, r3, lr}
 23f74a2:	4804      	ldr	r0, [pc, #16]	; (23f74b4 <sscanf+0x14>)
 23f74a4:	6800      	ldr	r0, [r0, #0]
 23f74a6:	4b04      	ldr	r3, [pc, #16]	; (23f74b8 <sscanf+0x18>)
 23f74a8:	4403      	add	r3, r0
 23f74aa:	681b      	ldr	r3, [r3, #0]
 23f74ac:	695b      	ldr	r3, [r3, #20]
 23f74ae:	9302      	str	r3, [sp, #8]
 23f74b0:	bd09      	pop	{r0, r3, pc}
 23f74b2:	0000      	.short	0x0000
 23f74b4:	1006a0f0 	.word	0x1006a0f0
 23f74b8:	00000004 	.word	0x00000004

023f74bc <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 23f74bc:	b509      	push	{r0, r3, lr}
 23f74be:	4804      	ldr	r0, [pc, #16]	; (23f74d0 <snprintf+0x14>)
 23f74c0:	6800      	ldr	r0, [r0, #0]
 23f74c2:	4b04      	ldr	r3, [pc, #16]	; (23f74d4 <snprintf+0x18>)
 23f74c4:	4403      	add	r3, r0
 23f74c6:	681b      	ldr	r3, [r3, #0]
 23f74c8:	69db      	ldr	r3, [r3, #28]
 23f74ca:	9302      	str	r3, [sp, #8]
 23f74cc:	bd09      	pop	{r0, r3, pc}
 23f74ce:	0000      	.short	0x0000
 23f74d0:	1006a0f0 	.word	0x1006a0f0
 23f74d4:	00000004 	.word	0x00000004

023f74d8 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23f74d8:	b509      	push	{r0, r3, lr}
 23f74da:	4804      	ldr	r0, [pc, #16]	; (23f74ec <vsnprintf+0x14>)
 23f74dc:	6800      	ldr	r0, [r0, #0]
 23f74de:	4b04      	ldr	r3, [pc, #16]	; (23f74f0 <vsnprintf+0x18>)
 23f74e0:	4403      	add	r3, r0
 23f74e2:	681b      	ldr	r3, [r3, #0]
 23f74e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f74e6:	9302      	str	r3, [sp, #8]
 23f74e8:	bd09      	pop	{r0, r3, pc}
 23f74ea:	0000      	.short	0x0000
 23f74ec:	1006a0f0 	.word	0x1006a0f0
 23f74f0:	00000004 	.word	0x00000004

023f74f4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23f74f4:	b509      	push	{r0, r3, lr}
 23f74f6:	4804      	ldr	r0, [pc, #16]	; (23f7508 <abort+0x14>)
 23f74f8:	6800      	ldr	r0, [r0, #0]
 23f74fa:	4b04      	ldr	r3, [pc, #16]	; (23f750c <abort+0x18>)
 23f74fc:	4403      	add	r3, r0
 23f74fe:	681b      	ldr	r3, [r3, #0]
 23f7500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f7502:	9302      	str	r3, [sp, #8]
 23f7504:	bd09      	pop	{r0, r3, pc}
 23f7506:	0000      	.short	0x0000
 23f7508:	1006a0f0 	.word	0x1006a0f0
 23f750c:	00000004 	.word	0x00000004

023f7510 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23f7510:	b509      	push	{r0, r3, lr}
 23f7512:	4804      	ldr	r0, [pc, #16]	; (23f7524 <_malloc_r+0x14>)
 23f7514:	6800      	ldr	r0, [r0, #0]
 23f7516:	4b04      	ldr	r3, [pc, #16]	; (23f7528 <_malloc_r+0x18>)
 23f7518:	4403      	add	r3, r0
 23f751a:	681b      	ldr	r3, [r3, #0]
 23f751c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f751e:	9302      	str	r3, [sp, #8]
 23f7520:	bd09      	pop	{r0, r3, pc}
 23f7522:	0000      	.short	0x0000
 23f7524:	1006a0f0 	.word	0x1006a0f0
 23f7528:	00000004 	.word	0x00000004

023f752c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23f752c:	b509      	push	{r0, r3, lr}
 23f752e:	4804      	ldr	r0, [pc, #16]	; (23f7540 <__errno+0x14>)
 23f7530:	6800      	ldr	r0, [r0, #0]
 23f7532:	4b04      	ldr	r3, [pc, #16]	; (23f7544 <__errno+0x18>)
 23f7534:	4403      	add	r3, r0
 23f7536:	681b      	ldr	r3, [r3, #0]
 23f7538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f753a:	9302      	str	r3, [sp, #8]
 23f753c:	bd09      	pop	{r0, r3, pc}
 23f753e:	0000      	.short	0x0000
 23f7540:	1006a0f0 	.word	0x1006a0f0
 23f7544:	00000004 	.word	0x00000004

023f7548 <__assert_func>:

#if defined(DYNALIB_EXPORT) || defined(DYNALIB_IMPORT)
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23f7548:	b509      	push	{r0, r3, lr}
 23f754a:	4804      	ldr	r0, [pc, #16]	; (23f755c <__assert_func+0x14>)
 23f754c:	6800      	ldr	r0, [r0, #0]
 23f754e:	4b04      	ldr	r3, [pc, #16]	; (23f7560 <__assert_func+0x18>)
 23f7550:	4403      	add	r3, r0
 23f7552:	681b      	ldr	r3, [r3, #0]
 23f7554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f7556:	9302      	str	r3, [sp, #8]
 23f7558:	bd09      	pop	{r0, r3, pc}
 23f755a:	0000      	.short	0x0000
 23f755c:	1006a0f0 	.word	0x1006a0f0
 23f7560:	00000004 	.word	0x00000004

023f7564 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23f7564:	b509      	push	{r0, r3, lr}
 23f7566:	4804      	ldr	r0, [pc, #16]	; (23f7578 <newlib_impure_ptr_callback+0x14>)
 23f7568:	6800      	ldr	r0, [r0, #0]
 23f756a:	4b04      	ldr	r3, [pc, #16]	; (23f757c <newlib_impure_ptr_callback+0x18>)
 23f756c:	4403      	add	r3, r0
 23f756e:	681b      	ldr	r3, [r3, #0]
 23f7570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f7572:	9302      	str	r3, [sp, #8]
 23f7574:	bd09      	pop	{r0, r3, pc}
 23f7576:	0000      	.short	0x0000
 23f7578:	1006a0f0 	.word	0x1006a0f0
 23f757c:	00000004 	.word	0x00000004

023f7580 <strftime>:

DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
 23f7580:	b509      	push	{r0, r3, lr}
 23f7582:	4804      	ldr	r0, [pc, #16]	; (23f7594 <strftime+0x14>)
 23f7584:	6800      	ldr	r0, [r0, #0]
 23f7586:	4b04      	ldr	r3, [pc, #16]	; (23f7598 <strftime+0x18>)
 23f7588:	4403      	add	r3, r0
 23f758a:	681b      	ldr	r3, [r3, #0]
 23f758c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f758e:	9302      	str	r3, [sp, #8]
 23f7590:	bd09      	pop	{r0, r3, pc}
 23f7592:	0000      	.short	0x0000
 23f7594:	1006a0f0 	.word	0x1006a0f0
 23f7598:	00000004 	.word	0x00000004

023f759c <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
 23f759c:	b509      	push	{r0, r3, lr}
 23f759e:	4804      	ldr	r0, [pc, #16]	; (23f75b0 <localtime_r+0x14>)
 23f75a0:	6800      	ldr	r0, [r0, #0]
 23f75a2:	4b04      	ldr	r3, [pc, #16]	; (23f75b4 <localtime_r+0x18>)
 23f75a4:	4403      	add	r3, r0
 23f75a6:	681b      	ldr	r3, [r3, #0]
 23f75a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f75aa:	9302      	str	r3, [sp, #8]
 23f75ac:	bd09      	pop	{r0, r3, pc}
 23f75ae:	0000      	.short	0x0000
 23f75b0:	1006a0f0 	.word	0x1006a0f0
 23f75b4:	00000004 	.word	0x00000004

023f75b8 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
 23f75b8:	b509      	push	{r0, r3, lr}
 23f75ba:	4804      	ldr	r0, [pc, #16]	; (23f75cc <gmtime_r+0x14>)
 23f75bc:	6800      	ldr	r0, [r0, #0]
 23f75be:	4b04      	ldr	r3, [pc, #16]	; (23f75d0 <gmtime_r+0x18>)
 23f75c0:	4403      	add	r3, r0
 23f75c2:	681b      	ldr	r3, [r3, #0]
 23f75c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23f75c6:	9302      	str	r3, [sp, #8]
 23f75c8:	bd09      	pop	{r0, r3, pc}
 23f75ca:	0000      	.short	0x0000
 23f75cc:	1006a0f0 	.word	0x1006a0f0
 23f75d0:	00000004 	.word	0x00000004

023f75d4 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
 23f75d4:	b509      	push	{r0, r3, lr}
 23f75d6:	4804      	ldr	r0, [pc, #16]	; (23f75e8 <mktime+0x14>)
 23f75d8:	6800      	ldr	r0, [r0, #0]
 23f75da:	4b04      	ldr	r3, [pc, #16]	; (23f75ec <mktime+0x18>)
 23f75dc:	4403      	add	r3, r0
 23f75de:	681b      	ldr	r3, [r3, #0]
 23f75e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f75e2:	9302      	str	r3, [sp, #8]
 23f75e4:	bd09      	pop	{r0, r3, pc}
 23f75e6:	0000      	.short	0x0000
 23f75e8:	1006a0f0 	.word	0x1006a0f0
 23f75ec:	00000004 	.word	0x00000004

023f75f0 <__cxa_guard_acquire>:
DYNALIB_FN(22, rt, __cxa_guard_acquire, int(__guard*))
 23f75f0:	b509      	push	{r0, r3, lr}
 23f75f2:	4804      	ldr	r0, [pc, #16]	; (23f7604 <__cxa_guard_acquire+0x14>)
 23f75f4:	6800      	ldr	r0, [r0, #0]
 23f75f6:	4b04      	ldr	r3, [pc, #16]	; (23f7608 <__cxa_guard_acquire+0x18>)
 23f75f8:	4403      	add	r3, r0
 23f75fa:	681b      	ldr	r3, [r3, #0]
 23f75fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23f75fe:	9302      	str	r3, [sp, #8]
 23f7600:	bd09      	pop	{r0, r3, pc}
 23f7602:	0000      	.short	0x0000
 23f7604:	1006a0f0 	.word	0x1006a0f0
 23f7608:	00000004 	.word	0x00000004

023f760c <__cxa_guard_release>:
DYNALIB_FN(23, rt, __cxa_guard_release, void(__guard*))
 23f760c:	b509      	push	{r0, r3, lr}
 23f760e:	4804      	ldr	r0, [pc, #16]	; (23f7620 <__cxa_guard_release+0x14>)
 23f7610:	6800      	ldr	r0, [r0, #0]
 23f7612:	4b04      	ldr	r3, [pc, #16]	; (23f7624 <__cxa_guard_release+0x18>)
 23f7614:	4403      	add	r3, r0
 23f7616:	681b      	ldr	r3, [r3, #0]
 23f7618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23f761a:	9302      	str	r3, [sp, #8]
 23f761c:	bd09      	pop	{r0, r3, pc}
 23f761e:	0000      	.short	0x0000
 23f7620:	1006a0f0 	.word	0x1006a0f0
 23f7624:	00000004 	.word	0x00000004

023f7628 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23f7628:	2100      	movs	r1, #0
 23f762a:	f7ff bcb5 	b.w	23f6f98 <system_delay_ms>

023f762e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 23f762e:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 23f7630:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23f7632:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23f7634:	b17c      	cbz	r4, 23f7656 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23f7636:	6863      	ldr	r3, [r4, #4]
 23f7638:	3b01      	subs	r3, #1
 23f763a:	6063      	str	r3, [r4, #4]
 23f763c:	b95b      	cbnz	r3, 23f7656 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23f763e:	6823      	ldr	r3, [r4, #0]
 23f7640:	4620      	mov	r0, r4
 23f7642:	689b      	ldr	r3, [r3, #8]
 23f7644:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23f7646:	68a3      	ldr	r3, [r4, #8]
 23f7648:	3b01      	subs	r3, #1
 23f764a:	60a3      	str	r3, [r4, #8]
 23f764c:	b91b      	cbnz	r3, 23f7656 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23f764e:	6823      	ldr	r3, [r4, #0]
 23f7650:	4620      	mov	r0, r4
 23f7652:	68db      	ldr	r3, [r3, #12]
 23f7654:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23f7656:	4628      	mov	r0, r5
 23f7658:	bd38      	pop	{r3, r4, r5, pc}

023f765a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 23f765a:	b510      	push	{r4, lr}
      if (_M_empty())
 23f765c:	6883      	ldr	r3, [r0, #8]
 23f765e:	4604      	mov	r4, r0
 23f7660:	b90b      	cbnz	r3, 23f7666 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 23f7662:	f002 fb25 	bl	23f9cb0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f7666:	68c3      	ldr	r3, [r0, #12]
 23f7668:	4798      	blx	r3
      if (_M_manager)
 23f766a:	68a3      	ldr	r3, [r4, #8]
 23f766c:	b11b      	cbz	r3, 23f7676 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23f766e:	2203      	movs	r2, #3
 23f7670:	4621      	mov	r1, r4
 23f7672:	4620      	mov	r0, r4
 23f7674:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 23f7676:	4620      	mov	r0, r4
}
 23f7678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 23f767c:	2110      	movs	r1, #16
 23f767e:	f7ec bed4 	b.w	23e442a <_ZdlPvj>

023f7682 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 23f7682:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f7684:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 23f7686:	460b      	mov	r3, r1
 23f7688:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f768a:	e9d0 0100 	ldrd	r0, r1, [r0]
 23f768e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23f7692:	e893 0003 	ldmia.w	r3, {r0, r1}
 23f7696:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23f769a:	e894 0003 	ldmia.w	r4, {r0, r1}
 23f769e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 23f76a2:	b002      	add	sp, #8
 23f76a4:	bd10      	pop	{r4, pc}
	...

023f76a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23f76a8:	2300      	movs	r3, #0
 23f76aa:	4802      	ldr	r0, [pc, #8]	; (23f76b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23f76ac:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23f76ae:	f7ff b813 	b.w	23f66d8 <os_mutex_recursive_create>
 23f76b2:	bf00      	nop
 23f76b4:	1007aeb4 	.word	0x1007aeb4

023f76b8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 23f76b8:	2200      	movs	r2, #0
 23f76ba:	6840      	ldr	r0, [r0, #4]
 23f76bc:	4611      	mov	r1, r2
 23f76be:	f7ff bdf3 	b.w	23f72a8 <network_ready>

023f76c2 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 23f76c2:	2200      	movs	r2, #0
 23f76c4:	6840      	ldr	r0, [r0, #4]
 23f76c6:	4611      	mov	r1, r2
 23f76c8:	f7ff be26 	b.w	23f7318 <network_listening>

023f76cc <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23f76cc:	2200      	movs	r2, #0
 23f76ce:	6840      	ldr	r0, [r0, #4]
 23f76d0:	4611      	mov	r1, r2
 23f76d2:	f7ff be59 	b.w	23f7388 <network_get_listen_timeout>

023f76d6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23f76d6:	2200      	movs	r2, #0
 23f76d8:	6840      	ldr	r0, [r0, #4]
 23f76da:	f7ff be47 	b.w	23f736c <network_set_listen_timeout>

023f76de <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23f76de:	2200      	movs	r2, #0
 23f76e0:	6840      	ldr	r0, [r0, #4]
 23f76e2:	f081 0101 	eor.w	r1, r1, #1
 23f76e6:	f7ff be09 	b.w	23f72fc <network_listen>

023f76ea <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23f76ea:	2200      	movs	r2, #0
 23f76ec:	6840      	ldr	r0, [r0, #4]
 23f76ee:	4611      	mov	r1, r2
 23f76f0:	f7ff bdbe 	b.w	23f7270 <network_connecting>

023f76f4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23f76f4:	2200      	movs	r2, #0
 23f76f6:	2102      	movs	r1, #2
 23f76f8:	6840      	ldr	r0, [r0, #4]
 23f76fa:	f7ff bdc7 	b.w	23f728c <network_disconnect>

023f76fe <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23f76fe:	2300      	movs	r3, #0
 23f7700:	6840      	ldr	r0, [r0, #4]
 23f7702:	461a      	mov	r2, r3
 23f7704:	f7ff bda6 	b.w	23f7254 <network_connect>

023f7708 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 23f7708:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
 23f770a:	2518      	movs	r5, #24
 23f770c:	4b12      	ldr	r3, [pc, #72]	; (23f7758 <_ZN5spark13CellularClass4RSSIEv+0x50>)
 23f770e:	460e      	mov	r6, r1
 23f7710:	6003      	str	r3, [r0, #0]
 23f7712:	3330      	adds	r3, #48	; 0x30
 23f7714:	462a      	mov	r2, r5
 23f7716:	2100      	movs	r1, #0
 23f7718:	b086      	sub	sp, #24
 23f771a:	6043      	str	r3, [r0, #4]
 23f771c:	4604      	mov	r4, r0
 23f771e:	3008      	adds	r0, #8
 23f7720:	f004 ffed 	bl	23fc6fe <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 23f7724:	2200      	movs	r2, #0
 23f7726:	6870      	ldr	r0, [r6, #4]
 23f7728:	4611      	mov	r1, r2
 23f772a:	f7ff fdbd 	bl	23f72a8 <network_ready>
 23f772e:	b178      	cbz	r0, 23f7750 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
 23f7730:	2100      	movs	r1, #0
 23f7732:	462a      	mov	r2, r5
 23f7734:	4668      	mov	r0, sp
 23f7736:	f004 ffe2 	bl	23fc6fe <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
 23f773a:	4669      	mov	r1, sp
 23f773c:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
 23f773e:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
 23f7742:	f7fe ffad 	bl	23f66a0 <cellular_signal>
 23f7746:	b918      	cbnz	r0, 23f7750 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
 23f7748:	4669      	mov	r1, sp
 23f774a:	4620      	mov	r0, r4
 23f774c:	f000 f990 	bl	23f7a70 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
 23f7750:	4620      	mov	r0, r4
 23f7752:	b006      	add	sp, #24
 23f7754:	bd70      	pop	{r4, r5, r6, pc}
 23f7756:	bf00      	nop
 23f7758:	023ff8c4 	.word	0x023ff8c4

023f775c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 23f775c:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 23f775e:	2428      	movs	r4, #40	; 0x28
 23f7760:	4b07      	ldr	r3, [pc, #28]	; (23f7780 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 23f7762:	4622      	mov	r2, r4
 23f7764:	4618      	mov	r0, r3
 23f7766:	2100      	movs	r1, #0
 23f7768:	f004 ffc9 	bl	23fc6fe <memset>
        cid = -1;
 23f776c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f7770:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name, bool flushCache = false);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23f7772:	2204      	movs	r2, #4
 23f7774:	4b03      	ldr	r3, [pc, #12]	; (23f7784 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 23f7776:	8004      	strh	r4, [r0, #0]
 23f7778:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 23f777a:	4a03      	ldr	r2, [pc, #12]	; (23f7788 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 23f777c:	601a      	str	r2, [r3, #0]
 23f777e:	bd10      	pop	{r4, pc}
 23f7780:	1007aec0 	.word	0x1007aec0
 23f7784:	1007aeb8 	.word	0x1007aeb8
 23f7788:	023ff874 	.word	0x023ff874

023f778c <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 23f778c:	4770      	bx	lr

023f778e <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 23f778e:	7b00      	ldrb	r0, [r0, #12]
 23f7790:	4770      	bx	lr

023f7792 <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
 23f7792:	7b03      	ldrb	r3, [r0, #12]
 23f7794:	b14b      	cbz	r3, 23f77aa <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
 23f7796:	6903      	ldr	r3, [r0, #16]
 23f7798:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23f779c:	d005      	beq.n	23f77aa <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
 23f779e:	6980      	ldr	r0, [r0, #24]
 23f77a0:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
 23f77a4:	bf18      	it	ne
 23f77a6:	2001      	movne	r0, #1
 23f77a8:	4770      	bx	lr
 23f77aa:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
 23f77ac:	4770      	bx	lr

023f77ae <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
 23f77ae:	6803      	ldr	r3, [r0, #0]
 23f77b0:	6a1b      	ldr	r3, [r3, #32]
 23f77b2:	4718      	bx	r3

023f77b4 <_ZN14CellularSignalD0Ev>:
 23f77b4:	b510      	push	{r4, lr}
 23f77b6:	4604      	mov	r4, r0
 23f77b8:	2120      	movs	r1, #32
 23f77ba:	f7ec fe36 	bl	23e442a <_ZdlPvj>
 23f77be:	4620      	mov	r0, r4
 23f77c0:	bd10      	pop	{r4, pc}
	...

023f77c4 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 23f77c4:	7b03      	ldrb	r3, [r0, #12]
 23f77c6:	b17b      	cbz	r3, 23f77e8 <_ZNK14CellularSignal11getStrengthEv+0x24>
 23f77c8:	6943      	ldr	r3, [r0, #20]
 23f77ca:	2b00      	cmp	r3, #0
 23f77cc:	db0c      	blt.n	23f77e8 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
 23f77ce:	ee07 3a90 	vmov	s15, r3
 23f77d2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 23f77f0 <_ZNK14CellularSignal11getStrengthEv+0x2c>
 23f77d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f77da:	ee87 0a87 	vdiv.f32	s0, s15, s14
 23f77de:	eddf 7a05 	vldr	s15, [pc, #20]	; 23f77f4 <_ZNK14CellularSignal11getStrengthEv+0x30>
 23f77e2:	ee20 0a27 	vmul.f32	s0, s0, s15
 23f77e6:	4770      	bx	lr
    return -1.0f;
 23f77e8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
 23f77ec:	4770      	bx	lr
 23f77ee:	bf00      	nop
 23f77f0:	477fff00 	.word	0x477fff00
 23f77f4:	42c80000 	.word	0x42c80000

023f77f8 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 23f77f8:	7b03      	ldrb	r3, [r0, #12]
 23f77fa:	b163      	cbz	r3, 23f7816 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
 23f77fc:	6903      	ldr	r3, [r0, #16]
 23f77fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23f7802:	d008      	beq.n	23f7816 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
 23f7804:	ee07 3a90 	vmov	s15, r3
 23f7808:	ed9f 7a04 	vldr	s14, [pc, #16]	; 23f781c <_ZNK14CellularSignal16getStrengthValueEv+0x24>
 23f780c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f7810:	ee87 0a87 	vdiv.f32	s0, s15, s14
 23f7814:	4770      	bx	lr
    return 0.0f;
 23f7816:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23f7820 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
 23f781a:	4770      	bx	lr
 23f781c:	42c80000 	.word	0x42c80000
 23f7820:	00000000 	.word	0x00000000

023f7824 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 23f7824:	7b03      	ldrb	r3, [r0, #12]
 23f7826:	b17b      	cbz	r3, 23f7848 <_ZNK14CellularSignal10getQualityEv+0x24>
 23f7828:	69c3      	ldr	r3, [r0, #28]
 23f782a:	2b00      	cmp	r3, #0
 23f782c:	db0c      	blt.n	23f7848 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
 23f782e:	ee07 3a90 	vmov	s15, r3
 23f7832:	ed9f 7a07 	vldr	s14, [pc, #28]	; 23f7850 <_ZNK14CellularSignal10getQualityEv+0x2c>
 23f7836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f783a:	ee87 0a87 	vdiv.f32	s0, s15, s14
 23f783e:	eddf 7a05 	vldr	s15, [pc, #20]	; 23f7854 <_ZNK14CellularSignal10getQualityEv+0x30>
 23f7842:	ee20 0a27 	vmul.f32	s0, s0, s15
 23f7846:	4770      	bx	lr
    return -1.0f;
 23f7848:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
 23f784c:	4770      	bx	lr
 23f784e:	bf00      	nop
 23f7850:	477fff00 	.word	0x477fff00
 23f7854:	42c80000 	.word	0x42c80000

023f7858 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 23f7858:	7b03      	ldrb	r3, [r0, #12]
 23f785a:	b163      	cbz	r3, 23f7876 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
 23f785c:	6983      	ldr	r3, [r0, #24]
 23f785e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23f7862:	d008      	beq.n	23f7876 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
 23f7864:	ee07 3a90 	vmov	s15, r3
 23f7868:	ed9f 7a04 	vldr	s14, [pc, #16]	; 23f787c <_ZNK14CellularSignal15getQualityValueEv+0x24>
 23f786c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f7870:	ee87 0a87 	vdiv.f32	s0, s15, s14
 23f7874:	4770      	bx	lr
    return 0.0f;
 23f7876:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23f7880 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
 23f787a:	4770      	bx	lr
 23f787c:	42c80000 	.word	0x42c80000
 23f7880:	00000000 	.word	0x00000000

023f7884 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:

} // namespace particle

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
inline size_t Print::print(T n, int base)
 23f7884:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 23f7886:	1e0c      	subs	r4, r1, #0
inline size_t Print::print(T n, int base)
 23f7888:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
 23f788a:	da0a      	bge.n	23f78a2 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
 23f788c:	212d      	movs	r1, #45	; 0x2d
 23f788e:	f001 f911 	bl	23f8ab4 <_ZN5Print5printEc>
 23f7892:	4605      	mov	r5, r0
            val = -n;
 23f7894:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23f7896:	220a      	movs	r2, #10
 23f7898:	4630      	mov	r0, r6
 23f789a:	f001 f928 	bl	23f8aee <_ZN5Print11printNumberEmh>
    }
}
 23f789e:	4428      	add	r0, r5
 23f78a0:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
 23f78a2:	4621      	mov	r1, r4
        size_t t = 0;
 23f78a4:	2500      	movs	r5, #0
 23f78a6:	e7f6      	b.n	23f7896 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

023f78a8 <_ZN5Print10printFloatEdh>:
    size_t printFloat(double number, uint8_t digits) {
 23f78a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f78ac:	ec55 4b10 	vmov	r4, r5, d0
 23f78b0:	4607      	mov	r7, r0
 23f78b2:	460e      	mov	r6, r1
        if (std::isnan(number)) {
 23f78b4:	ee10 2a10 	vmov	r2, s0
 23f78b8:	462b      	mov	r3, r5
 23f78ba:	ee10 0a10 	vmov	r0, s0
 23f78be:	4629      	mov	r1, r5
 23f78c0:	f7ec f9e4 	bl	23e3c8c <__aeabi_dcmpun>
 23f78c4:	b128      	cbz	r0, 23f78d2 <_ZN5Print10printFloatEdh+0x2a>
            return print("nan");
 23f78c6:	494c      	ldr	r1, [pc, #304]	; (23f79f8 <_ZN5Print10printFloatEdh+0x150>)
            return print ("ovf"); // constant determined empirically
 23f78c8:	4638      	mov	r0, r7
    }
 23f78ca:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            return print ("ovf"); // constant determined empirically
 23f78ce:	f001 b8ed 	b.w	23f8aac <_ZN5Print5printEPKc>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 23f78d2:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
        if (std::isinf(number)) {
 23f78d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f78da:	4620      	mov	r0, r4
 23f78dc:	4649      	mov	r1, r9
 23f78de:	4b47      	ldr	r3, [pc, #284]	; (23f79fc <_ZN5Print10printFloatEdh+0x154>)
 23f78e0:	f7ec f9d4 	bl	23e3c8c <__aeabi_dcmpun>
 23f78e4:	b948      	cbnz	r0, 23f78fa <_ZN5Print10printFloatEdh+0x52>
 23f78e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f78ea:	4620      	mov	r0, r4
 23f78ec:	4649      	mov	r1, r9
 23f78ee:	4b43      	ldr	r3, [pc, #268]	; (23f79fc <_ZN5Print10printFloatEdh+0x154>)
 23f78f0:	f7ec f9ae 	bl	23e3c50 <__aeabi_dcmple>
 23f78f4:	b908      	cbnz	r0, 23f78fa <_ZN5Print10printFloatEdh+0x52>
            return print("inf");
 23f78f6:	4942      	ldr	r1, [pc, #264]	; (23f7a00 <_ZN5Print10printFloatEdh+0x158>)
 23f78f8:	e7e6      	b.n	23f78c8 <_ZN5Print10printFloatEdh+0x20>
        if (number > 4294967040.0) {
 23f78fa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23f78fe:	4620      	mov	r0, r4
 23f7900:	4629      	mov	r1, r5
 23f7902:	4b40      	ldr	r3, [pc, #256]	; (23f7a04 <_ZN5Print10printFloatEdh+0x15c>)
 23f7904:	f7ec f9b8 	bl	23e3c78 <__aeabi_dcmpgt>
 23f7908:	b108      	cbz	r0, 23f790e <_ZN5Print10printFloatEdh+0x66>
            return print ("ovf"); // constant determined empirically
 23f790a:	493f      	ldr	r1, [pc, #252]	; (23f7a08 <_ZN5Print10printFloatEdh+0x160>)
 23f790c:	e7dc      	b.n	23f78c8 <_ZN5Print10printFloatEdh+0x20>
        if (number <-4294967040.0) {
 23f790e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23f7912:	4620      	mov	r0, r4
 23f7914:	4629      	mov	r1, r5
 23f7916:	4b3d      	ldr	r3, [pc, #244]	; (23f7a0c <_ZN5Print10printFloatEdh+0x164>)
 23f7918:	f7ec f990 	bl	23e3c3c <__aeabi_dcmplt>
 23f791c:	2800      	cmp	r0, #0
 23f791e:	d1f4      	bne.n	23f790a <_ZN5Print10printFloatEdh+0x62>
        if (number < 0.0) {
 23f7920:	2200      	movs	r2, #0
 23f7922:	2300      	movs	r3, #0
 23f7924:	4620      	mov	r0, r4
 23f7926:	4629      	mov	r1, r5
 23f7928:	f7ec f988 	bl	23e3c3c <__aeabi_dcmplt>
 23f792c:	b1d0      	cbz	r0, 23f7964 <_ZN5Print10printFloatEdh+0xbc>
            n += print('-');
 23f792e:	212d      	movs	r1, #45	; 0x2d
 23f7930:	4638      	mov	r0, r7
 23f7932:	f001 f8bf 	bl	23f8ab4 <_ZN5Print5printEc>
            number = -number;
 23f7936:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
            n += print('-');
 23f793a:	4682      	mov	sl, r0
            number = -number;
 23f793c:	461d      	mov	r5, r3
        size_t n = 0;
 23f793e:	f04f 0b00 	mov.w	fp, #0
        double rounding = 0.5;
 23f7942:	2000      	movs	r0, #0
            rounding /= 10.0;
 23f7944:	f04f 0800 	mov.w	r8, #0
        double rounding = 0.5;
 23f7948:	4931      	ldr	r1, [pc, #196]	; (23f7a10 <_ZN5Print10printFloatEdh+0x168>)
            rounding /= 10.0;
 23f794a:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 23f7a18 <_ZN5Print10printFloatEdh+0x170>
        for (uint8_t i = 0; i < digits; ++i) {
 23f794e:	fa5f f38b 	uxtb.w	r3, fp
 23f7952:	429e      	cmp	r6, r3
 23f7954:	d908      	bls.n	23f7968 <_ZN5Print10printFloatEdh+0xc0>
            rounding /= 10.0;
 23f7956:	4642      	mov	r2, r8
 23f7958:	464b      	mov	r3, r9
 23f795a:	f7ec f827 	bl	23e39ac <__aeabi_ddiv>
        for (uint8_t i = 0; i < digits; ++i) {
 23f795e:	f10b 0b01 	add.w	fp, fp, #1
 23f7962:	e7f4      	b.n	23f794e <_ZN5Print10printFloatEdh+0xa6>
        size_t n = 0;
 23f7964:	4682      	mov	sl, r0
 23f7966:	e7ea      	b.n	23f793e <_ZN5Print10printFloatEdh+0x96>
        number += rounding;
 23f7968:	4602      	mov	r2, r0
 23f796a:	460b      	mov	r3, r1
 23f796c:	4620      	mov	r0, r4
 23f796e:	4629      	mov	r1, r5
 23f7970:	f7eb fd3c 	bl	23e33ec <__adddf3>
 23f7974:	460d      	mov	r5, r1
 23f7976:	4604      	mov	r4, r0
        unsigned long int_part = (unsigned long)number;
 23f7978:	f7ec f9c6 	bl	23e3d08 <__aeabi_d2uiz>
 23f797c:	4680      	mov	r8, r0
        double remainder = number - (double)int_part;
 23f797e:	f7eb fe71 	bl	23e3664 <__aeabi_ui2d>
 23f7982:	4602      	mov	r2, r0
 23f7984:	460b      	mov	r3, r1
 23f7986:	4620      	mov	r0, r4
 23f7988:	4629      	mov	r1, r5
 23f798a:	f7eb fd2d 	bl	23e33e8 <__aeabi_dsub>
        return printNumber(val, base) + t;
 23f798e:	220a      	movs	r2, #10
        double remainder = number - (double)int_part;
 23f7990:	4604      	mov	r4, r0
 23f7992:	460d      	mov	r5, r1
        return printNumber(val, base) + t;
 23f7994:	4638      	mov	r0, r7
 23f7996:	4641      	mov	r1, r8
 23f7998:	f001 f8a9 	bl	23f8aee <_ZN5Print11printNumberEmh>
        n += print(int_part);
 23f799c:	4482      	add	sl, r0
        if (digits > 0) {
 23f799e:	b33e      	cbz	r6, 23f79f0 <_ZN5Print10printFloatEdh+0x148>
            n += print(".");
 23f79a0:	4638      	mov	r0, r7
 23f79a2:	491c      	ldr	r1, [pc, #112]	; (23f7a14 <_ZN5Print10printFloatEdh+0x16c>)
 23f79a4:	f001 f882 	bl	23f8aac <_ZN5Print5printEPKc>
            remainder *= 10.0;
 23f79a8:	f04f 0800 	mov.w	r8, #0
 23f79ac:	f8df 9068 	ldr.w	r9, [pc, #104]	; 23f7a18 <_ZN5Print10printFloatEdh+0x170>
            n += print(".");
 23f79b0:	4482      	add	sl, r0
        while (digits-- > 0) {
 23f79b2:	b1ee      	cbz	r6, 23f79f0 <_ZN5Print10printFloatEdh+0x148>
            remainder *= 10.0;
 23f79b4:	4642      	mov	r2, r8
 23f79b6:	464b      	mov	r3, r9
 23f79b8:	4620      	mov	r0, r4
 23f79ba:	4629      	mov	r1, r5
 23f79bc:	f7eb fecc 	bl	23e3758 <__aeabi_dmul>
 23f79c0:	460d      	mov	r5, r1
 23f79c2:	4604      	mov	r4, r0
            int toPrint = int(remainder);
 23f79c4:	f7ec f978 	bl	23e3cb8 <__aeabi_d2iz>
 23f79c8:	4601      	mov	r1, r0
 23f79ca:	4683      	mov	fp, r0
inline size_t Print::print(T n, int base)
 23f79cc:	4638      	mov	r0, r7
 23f79ce:	f7ff ff59 	bl	23f7884 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
            n += print(toPrint);
 23f79d2:	4482      	add	sl, r0
            remainder -= toPrint;
 23f79d4:	4658      	mov	r0, fp
 23f79d6:	f7eb fe55 	bl	23e3684 <__aeabi_i2d>
 23f79da:	4602      	mov	r2, r0
 23f79dc:	460b      	mov	r3, r1
 23f79de:	4620      	mov	r0, r4
 23f79e0:	4629      	mov	r1, r5
 23f79e2:	f7eb fd01 	bl	23e33e8 <__aeabi_dsub>
 23f79e6:	3e01      	subs	r6, #1
 23f79e8:	4604      	mov	r4, r0
 23f79ea:	460d      	mov	r5, r1
 23f79ec:	b2f6      	uxtb	r6, r6
        while (digits-- > 0) {
 23f79ee:	e7e0      	b.n	23f79b2 <_ZN5Print10printFloatEdh+0x10a>
    }
 23f79f0:	4650      	mov	r0, sl
 23f79f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f79f6:	bf00      	nop
 23f79f8:	023ff8b0 	.word	0x023ff8b0
 23f79fc:	7fefffff 	.word	0x7fefffff
 23f7a00:	023ff8b4 	.word	0x023ff8b4
 23f7a04:	41efffff 	.word	0x41efffff
 23f7a08:	023ff8b8 	.word	0x023ff8b8
 23f7a0c:	c1efffff 	.word	0xc1efffff
 23f7a10:	3fe00000 	.word	0x3fe00000
 23f7a14:	023fe0a7 	.word	0x023fe0a7
 23f7a18:	40240000 	.word	0x40240000

023f7a1c <_ZNK14CellularSignal7printToER5Print>:
{
 23f7a1c:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
 23f7a1e:	6803      	ldr	r3, [r0, #0]
{
 23f7a20:	460c      	mov	r4, r1
    n += p.print(this->getStrengthValue(), 2);
 23f7a22:	691b      	ldr	r3, [r3, #16]
{
 23f7a24:	4605      	mov	r5, r0
    n += p.print(this->getStrengthValue(), 2);
 23f7a26:	4798      	blx	r3
 23f7a28:	ee10 0a10 	vmov	r0, s0
        return printFloat((double)n, digits);
 23f7a2c:	f7eb fe3c 	bl	23e36a8 <__aeabi_f2d>
 23f7a30:	ec41 0b10 	vmov	d0, r0, r1
 23f7a34:	2102      	movs	r1, #2
 23f7a36:	4620      	mov	r0, r4
 23f7a38:	f7ff ff36 	bl	23f78a8 <_ZN5Print10printFloatEdh>
    n += p.print(',');
 23f7a3c:	212c      	movs	r1, #44	; 0x2c
 23f7a3e:	4606      	mov	r6, r0
 23f7a40:	4620      	mov	r0, r4
 23f7a42:	f001 f837 	bl	23f8ab4 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
 23f7a46:	682b      	ldr	r3, [r5, #0]
    n += p.print(',');
 23f7a48:	4406      	add	r6, r0
    n += p.print(this->getQualityValue(), 2);
 23f7a4a:	699b      	ldr	r3, [r3, #24]
 23f7a4c:	4628      	mov	r0, r5
 23f7a4e:	4798      	blx	r3
 23f7a50:	ee10 0a10 	vmov	r0, s0
 23f7a54:	f7eb fe28 	bl	23e36a8 <__aeabi_f2d>
 23f7a58:	ec41 0b10 	vmov	d0, r0, r1
 23f7a5c:	2102      	movs	r1, #2
 23f7a5e:	4620      	mov	r0, r4
 23f7a60:	f7ff ff22 	bl	23f78a8 <_ZN5Print10printFloatEdh>
}
 23f7a64:	4430      	add	r0, r6
 23f7a66:	bd70      	pop	{r4, r5, r6, pc}

023f7a68 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 23f7a68:	f1a0 0004 	sub.w	r0, r0, #4
 23f7a6c:	f7ff bfd6 	b.w	23f7a1c <_ZNK14CellularSignal7printToER5Print>

023f7a70 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
 23f7a70:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 23f7a72:	460d      	mov	r5, r1
 23f7a74:	f100 0408 	add.w	r4, r0, #8
 23f7a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f7a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f7a7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 23f7a80:	e884 0003 	stmia.w	r4, {r0, r1}
}
 23f7a84:	2001      	movs	r0, #1
 23f7a86:	bd30      	pop	{r4, r5, pc}

023f7a88 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23f7a88:	4770      	bx	lr

023f7a8a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 23f7a8a:	2000      	movs	r0, #0
 23f7a8c:	4770      	bx	lr

023f7a8e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23f7a8e:	b510      	push	{r4, lr}
 23f7a90:	4604      	mov	r4, r0
 23f7a92:	2110      	movs	r1, #16
 23f7a94:	f7ec fcc9 	bl	23e442a <_ZdlPvj>
 23f7a98:	4620      	mov	r0, r4
 23f7a9a:	bd10      	pop	{r4, pc}

023f7a9c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 23f7a9c:	b508      	push	{r3, lr}
      { delete this; }
 23f7a9e:	f7ff fff6 	bl	23f7a8e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 23f7aa2:	bd08      	pop	{r3, pc}

023f7aa4 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 23f7aa4:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 23f7aa6:	b530      	push	{r4, r5, lr}
        type_(type) {
 23f7aa8:	f64f 749c 	movw	r4, #65436	; 0xff9c
 23f7aac:	6002      	str	r2, [r0, #0]
 23f7aae:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 23f7ab0:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23f7ab2:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23f7ab4:	680c      	ldr	r4, [r1, #0]
 23f7ab6:	8085      	strh	r5, [r0, #4]
 23f7ab8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23f7aba:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 23f7abc:	bd30      	pop	{r4, r5, pc}

023f7abe <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 23f7abe:	b510      	push	{r4, lr}
 23f7ac0:	4604      	mov	r4, r0
    free((void*)msg_);
 23f7ac2:	6800      	ldr	r0, [r0, #0]
 23f7ac4:	f7ff fcb4 	bl	23f7430 <free>
}
 23f7ac8:	4620      	mov	r0, r4
 23f7aca:	bd10      	pop	{r4, pc}

023f7acc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23f7acc:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 23f7ace:	68c4      	ldr	r4, [r0, #12]
 23f7ad0:	b314      	cbz	r4, 23f7b18 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x4c>
 23f7ad2:	7823      	ldrb	r3, [r4, #0]
 23f7ad4:	b2db      	uxtb	r3, r3
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 23f7ad6:	2b02      	cmp	r3, #2
 23f7ad8:	d103      	bne.n	23f7ae2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x16>
            error_.~Error();
 23f7ada:	f104 000c 	add.w	r0, r4, #12
 23f7ade:	f7ff ffee 	bl	23f7abe <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 23f7ae2:	1d23      	adds	r3, r4, #4
 23f7ae4:	681d      	ldr	r5, [r3, #0]
        delete onSuccess_.load(std::memory_order_relaxed);
 23f7ae6:	b135      	cbz	r5, 23f7af6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x2a>
    class function<_Res(_ArgTypes...)>
 23f7ae8:	4628      	mov	r0, r5
 23f7aea:	f7fe f8c1 	bl	23f5c70 <_ZNSt14_Function_baseD1Ev>
 23f7aee:	2110      	movs	r1, #16
 23f7af0:	4628      	mov	r0, r5
 23f7af2:	f7ec fc9a 	bl	23e442a <_ZdlPvj>
 23f7af6:	f104 0308 	add.w	r3, r4, #8
 23f7afa:	681d      	ldr	r5, [r3, #0]
        delete onError_.load(std::memory_order_relaxed);
 23f7afc:	b135      	cbz	r5, 23f7b0c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x40>
 23f7afe:	4628      	mov	r0, r5
 23f7b00:	f7fe f8b6 	bl	23f5c70 <_ZNSt14_Function_baseD1Ev>
 23f7b04:	2110      	movs	r1, #16
 23f7b06:	4628      	mov	r0, r5
 23f7b08:	f7ec fc8f 	bl	23e442a <_ZdlPvj>
 23f7b0c:	4620      	mov	r0, r4
 23f7b0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23f7b12:	2114      	movs	r1, #20
 23f7b14:	f7ec bc89 	b.w	23e442a <_ZdlPvj>
 23f7b18:	bd38      	pop	{r3, r4, r5, pc}

023f7b1a <_ZNK22CloudDisconnectOptions15toSystemOptionsEv>:

} // namespace

spark_cloud_disconnect_options CloudDisconnectOptions::toSystemOptions() const
{
    spark_cloud_disconnect_options opts = {};
 23f7b1a:	2200      	movs	r2, #0
 23f7b1c:	8142      	strh	r2, [r0, #10]
    opts.size = sizeof(opts);
 23f7b1e:	220c      	movs	r2, #12
 23f7b20:	8002      	strh	r2, [r0, #0]
    opts.flags = flags_;
 23f7b22:	680a      	ldr	r2, [r1, #0]
 23f7b24:	7082      	strb	r2, [r0, #2]
    opts.graceful = graceful_;
 23f7b26:	7a0a      	ldrb	r2, [r1, #8]
 23f7b28:	70c2      	strb	r2, [r0, #3]
    opts.timeout = timeout_;
 23f7b2a:	684a      	ldr	r2, [r1, #4]
 23f7b2c:	6042      	str	r2, [r0, #4]
    opts.clear_session = clearSession_;
 23f7b2e:	7a4a      	ldrb	r2, [r1, #9]
 23f7b30:	7202      	strb	r2, [r0, #8]
    opts.reconnect_immediately = reconnect_;
 23f7b32:	7a8a      	ldrb	r2, [r1, #10]
 23f7b34:	7242      	strb	r2, [r0, #9]
    return opts;
}
 23f7b36:	4770      	bx	lr

023f7b38 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession, options->reconnect_immediately);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 23f7b38:	b510      	push	{r4, lr}
 23f7b3a:	b088      	sub	sp, #32
 23f7b3c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 23f7b3e:	4668      	mov	r0, sp
 23f7b40:	f001 f9ba 	bl	23f8eb8 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 23f7b44:	4669      	mov	r1, sp
 23f7b46:	a804      	add	r0, sp, #16
 23f7b48:	f001 f9d9 	bl	23f8efe <_ZN6StringC1ERKS_>
 23f7b4c:	a804      	add	r0, sp, #16
 23f7b4e:	47a0      	blx	r4
 23f7b50:	4604      	mov	r4, r0
 23f7b52:	a804      	add	r0, sp, #16
 23f7b54:	f001 f965 	bl	23f8e22 <_ZN6StringD1Ev>
    String p(param);
 23f7b58:	4668      	mov	r0, sp
 23f7b5a:	f001 f962 	bl	23f8e22 <_ZN6StringD1Ev>
}
 23f7b5e:	4620      	mov	r0, r4
 23f7b60:	b008      	add	sp, #32
 23f7b62:	bd10      	pop	{r4, pc}

023f7b64 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 23f7b64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 23f7b66:	2300      	movs	r3, #0
         size = sizeof(*this);
 23f7b68:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 23f7b6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 23f7b6e:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 23f7b70:	4669      	mov	r1, sp
 23f7b72:	461a      	mov	r2, r3
 23f7b74:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 23f7b76:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 23f7b7a:	f8ad 4000 	strh.w	r4, [sp]
 23f7b7e:	f7ff fac1 	bl	23f7104 <spark_function>
}
 23f7b82:	b004      	add	sp, #16
 23f7b84:	bd10      	pop	{r4, pc}

023f7b86 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 23f7b86:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f7b88:	4601      	mov	r1, r0
    const auto opts = options.toSystemOptions();
 23f7b8a:	a801      	add	r0, sp, #4
 23f7b8c:	f7ff ffc5 	bl	23f7b1a <_ZNK22CloudDisconnectOptions15toSystemOptionsEv>
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 23f7b90:	2100      	movs	r1, #0
 23f7b92:	f7ff fb43 	bl	23f721c <spark_cloud_disconnect>
}
 23f7b96:	b005      	add	sp, #20
 23f7b98:	f85d fb04 	ldr.w	pc, [sp], #4

023f7b9c <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>:

void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
 23f7b9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const auto opts = options.toSystemOptions();
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
 23f7b9e:	2300      	movs	r3, #0
void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
 23f7ba0:	4601      	mov	r1, r0
    const auto opts = options.toSystemOptions();
 23f7ba2:	a801      	add	r0, sp, #4
 23f7ba4:	f7ff ffb9 	bl	23f7b1a <_ZNK22CloudDisconnectOptions15toSystemOptionsEv>
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
 23f7ba8:	4602      	mov	r2, r0
 23f7baa:	4619      	mov	r1, r3
 23f7bac:	2002      	movs	r0, #2
 23f7bae:	f7ff fb19 	bl	23f71e4 <spark_set_connection_property>
}
 23f7bb2:	b005      	add	sp, #20
 23f7bb4:	f85d fb04 	ldr.w	pc, [sp], #4

023f7bb8 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
 23f7bb8:	680b      	ldr	r3, [r1, #0]
 23f7bba:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23f7bbc:	684b      	ldr	r3, [r1, #4]
 23f7bbe:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23f7bc0:	b113      	cbz	r3, 23f7bc8 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 23f7bc2:	685a      	ldr	r2, [r3, #4]
 23f7bc4:	3201      	adds	r2, #1
 23f7bc6:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23f7bc8:	4770      	bx	lr

023f7bca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 23f7bca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f7bcc:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23f7bce:	4668      	mov	r0, sp
 23f7bd0:	460d      	mov	r5, r1
 23f7bd2:	f7ff fff1 	bl	23f7bb8 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 23f7bd6:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23f7bd8:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23f7bda:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 23f7bdc:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23f7bde:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 23f7be0:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 23f7be2:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 23f7be4:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 23f7be6:	f7ff fd22 	bl	23f762e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 23f7bea:	b135      	cbz	r5, 23f7bfa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 23f7bec:	1d28      	adds	r0, r5, #4
 23f7bee:	f7ff fd1e 	bl	23f762e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f7bf2:	2108      	movs	r1, #8
 23f7bf4:	4628      	mov	r0, r5
 23f7bf6:	f7ec fc18 	bl	23e442a <_ZdlPvj>
        return p;
    }
 23f7bfa:	4620      	mov	r0, r4
 23f7bfc:	b003      	add	sp, #12
 23f7bfe:	bd30      	pop	{r4, r5, pc}

023f7c00 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 23f7c00:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23f7c02:	b510      	push	{r4, lr}
      if (_M_empty())
 23f7c04:	b90a      	cbnz	r2, 23f7c0a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 23f7c06:	f002 f853 	bl	23f9cb0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f7c0a:	68c3      	ldr	r3, [r0, #12]
    }
 23f7c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f7c10:	4718      	bx	r3

023f7c12 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f7c12:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23f7c14:	6800      	ldr	r0, [r0, #0]
 23f7c16:	f100 0110 	add.w	r1, r0, #16
 23f7c1a:	f7ff fff1 	bl	23f7c00 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 23f7c1e:	bd08      	pop	{r3, pc}

023f7c20 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 23f7c20:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23f7c22:	b510      	push	{r4, lr}
      if (_M_empty())
 23f7c24:	b90a      	cbnz	r2, 23f7c2a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 23f7c26:	f002 f843 	bl	23f9cb0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f7c2a:	68c3      	ldr	r3, [r0, #12]
    }
 23f7c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f7c30:	4718      	bx	r3

023f7c32 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f7c32:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23f7c34:	6800      	ldr	r0, [r0, #0]
 23f7c36:	f100 0110 	add.w	r1, r0, #16
 23f7c3a:	f7ff fff1 	bl	23f7c20 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 23f7c3e:	bd08      	pop	{r3, pc}

023f7c40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 23f7c40:	b538      	push	{r3, r4, r5, lr}
 23f7c42:	2300      	movs	r3, #0
 23f7c44:	4604      	mov	r4, r0
 23f7c46:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23f7c48:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 23f7c4a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23f7c4c:	f7ec fbe9 	bl	23e4422 <_Znwj>
 23f7c50:	b128      	cbz	r0, 23f7c5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 23f7c52:	2301      	movs	r3, #1
 23f7c54:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 23f7c58:	4b02      	ldr	r3, [pc, #8]	; (23f7c64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 23f7c5a:	60c5      	str	r5, [r0, #12]
 23f7c5c:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23f7c5e:	6020      	str	r0, [r4, #0]
	}
 23f7c60:	4620      	mov	r0, r4
 23f7c62:	bd38      	pop	{r3, r4, r5, pc}
 23f7c64:	023ff900 	.word	0x023ff900

023f7c68 <_ZN8particle10FutureBaseIbNS_6detail13FutureContextEEC1ENS_5Error4TypeE>:
    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
    }

    explicit FutureBase(Error::Type error) :
 23f7c68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        type_(type) {
 23f7c6a:	2600      	movs	r6, #0
 23f7c6c:	f8ad 1004 	strh.w	r1, [sp, #4]
 23f7c70:	4605      	mov	r5, r0
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23f7c72:	4669      	mov	r1, sp
 23f7c74:	a802      	add	r0, sp, #8
 23f7c76:	9600      	str	r6, [sp, #0]
 23f7c78:	f7ff ff14 	bl	23f7aa4 <_ZN8particle5ErrorC1EOS0_>
 23f7c7c:	2014      	movs	r0, #20
 23f7c7e:	f7ec fbd0 	bl	23e4422 <_Znwj>
 23f7c82:	4604      	mov	r4, r0
 23f7c84:	b148      	cbz	r0, 23f7c9a <_ZN8particle10FutureBaseIbNS_6detail13FutureContextEEC1ENS_5Error4TypeE+0x32>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 23f7c86:	2302      	movs	r3, #2
 23f7c88:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23f7c8a:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23f7c8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23f7c90:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 23f7c92:	a902      	add	r1, sp, #8
 23f7c94:	300c      	adds	r0, #12
 23f7c96:	f7ff ff05 	bl	23f7aa4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23f7c9a:	4628      	mov	r0, r5
	: __shared_count(__p)
 23f7c9c:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23f7c9e:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 23f7ca2:	f7ff ffcd 	bl	23f7c40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23f7ca6:	a802      	add	r0, sp, #8
 23f7ca8:	f7ff ff09 	bl	23f7abe <_ZN8particle5ErrorD1Ev>
            FutureBase(Error(error)) {
 23f7cac:	4668      	mov	r0, sp
 23f7cae:	f7ff ff06 	bl	23f7abe <_ZN8particle5ErrorD1Ev>
    }
 23f7cb2:	4628      	mov	r0, r5
 23f7cb4:	b004      	add	sp, #16
 23f7cb6:	bd70      	pop	{r4, r5, r6, pc}

023f7cb8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 23f7cb8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23f7cba:	2300      	movs	r3, #0
 23f7cbc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23f7cbe:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23f7cc0:	4604      	mov	r4, r0
 23f7cc2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23f7cc4:	b12b      	cbz	r3, 23f7cd2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f7cc6:	2202      	movs	r2, #2
 23f7cc8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f7cca:	68eb      	ldr	r3, [r5, #12]
 23f7ccc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23f7cce:	68ab      	ldr	r3, [r5, #8]
 23f7cd0:	60a3      	str	r3, [r4, #8]
    }
 23f7cd2:	4620      	mov	r0, r4
 23f7cd4:	bd38      	pop	{r3, r4, r5, pc}
	...

023f7cd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 23f7cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f7cda:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23f7cdc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 23f7cde:	4668      	mov	r0, sp
 23f7ce0:	f7ff fee0 	bl	23f7aa4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23f7ce4:	f04f 0302 	mov.w	r3, #2
 23f7ce8:	e8d4 2f4f 	ldrexb	r2, [r4]
 23f7cec:	2a00      	cmp	r2, #0
 23f7cee:	d103      	bne.n	23f7cf8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 23f7cf0:	e8c4 3f41 	strexb	r1, r3, [r4]
 23f7cf4:	2900      	cmp	r1, #0
 23f7cf6:	d1f7      	bne.n	23f7ce8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 23f7cf8:	d121      	bne.n	23f7d3e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
            new(&error_) Error(std::move(error));
 23f7cfa:	f104 050c 	add.w	r5, r4, #12
 23f7cfe:	4669      	mov	r1, sp
 23f7d00:	4628      	mov	r0, r5
 23f7d02:	f7ff fecf 	bl	23f7aa4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 23f7d06:	2201      	movs	r2, #1
 23f7d08:	1c63      	adds	r3, r4, #1
 23f7d0a:	e8c3 2f8f 	stlb	r2, [r3]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23f7d0e:	2000      	movs	r0, #0
 23f7d10:	f104 0308 	add.w	r3, r4, #8
 23f7d14:	e8d3 6fef 	ldaex	r6, [r3]
 23f7d18:	e8c3 0fe2 	stlex	r2, r0, [r3]
 23f7d1c:	2a00      	cmp	r2, #0
 23f7d1e:	d1f9      	bne.n	23f7d14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
        if (callbackPtr) {
 23f7d20:	b16e      	cbz	r6, 23f7d3e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
        return (application_thread_current(nullptr) != 0);
 23f7d22:	f7ff f971 	bl	23f7008 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23f7d26:	b178      	cbz	r0, 23f7d48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x70>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23f7d28:	4629      	mov	r1, r5
 23f7d2a:	4630      	mov	r0, r6
 23f7d2c:	f7ff ff68 	bl	23f7c00 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 23f7d30:	4630      	mov	r0, r6
 23f7d32:	f7fd ff9d 	bl	23f5c70 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23f7d36:	2110      	movs	r1, #16
 23f7d38:	4630      	mov	r0, r6
 23f7d3a:	f7ec fb76 	bl	23e442a <_ZdlPvj>
        p_->setError(std::move(error));
 23f7d3e:	4668      	mov	r0, sp
 23f7d40:	f7ff febd 	bl	23f7abe <_ZN8particle5ErrorD1Ev>
    }
 23f7d44:	b009      	add	sp, #36	; 0x24
 23f7d46:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23f7d48:	4631      	mov	r1, r6
 23f7d4a:	a802      	add	r0, sp, #8
 23f7d4c:	f7ff ffb4 	bl	23f7cb8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23f7d50:	68e0      	ldr	r0, [r4, #12]
 23f7d52:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23f7d56:	b108      	cbz	r0, 23f7d5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x84>
 23f7d58:	f004 fd4e 	bl	23fc7f8 <strdup>
        type_(type) {
 23f7d5c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23f7d5e:	2010      	movs	r0, #16
 23f7d60:	f8ad 501c 	strh.w	r5, [sp, #28]
 23f7d64:	f7ec fb5d 	bl	23e4422 <_Znwj>
 23f7d68:	4605      	mov	r5, r0
 23f7d6a:	b1e8      	cbz	r0, 23f7da8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd0>
    _Function_base() : _M_manager(nullptr) { }
 23f7d6c:	2700      	movs	r7, #0
 23f7d6e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f7d70:	2018      	movs	r0, #24
 23f7d72:	f7ec fb56 	bl	23e4422 <_Znwj>
 23f7d76:	4604      	mov	r4, r0
 23f7d78:	b188      	cbz	r0, 23f7d9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc6>
	std::swap(_M_functor, __x._M_functor);
 23f7d7a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23f7d7c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23f7d7e:	a802      	add	r0, sp, #8
 23f7d80:	f7ff fc7f 	bl	23f7682 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f7d84:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 23f7d86:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f7d88:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f7d8a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23f7d8c:	9204      	str	r2, [sp, #16]
 23f7d8e:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23f7d90:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 23f7d92:	60e3      	str	r3, [r4, #12]
 23f7d94:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 23f7d98:	9205      	str	r2, [sp, #20]
 23f7d9a:	f7ff fe83 	bl	23f7aa4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 23f7d9e:	4b08      	ldr	r3, [pc, #32]	; (23f7dc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f7da0:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23f7da2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23f7da4:	4b07      	ldr	r3, [pc, #28]	; (23f7dc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>)
 23f7da6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 23f7da8:	a806      	add	r0, sp, #24
 23f7daa:	f7ff fe88 	bl	23f7abe <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23f7dae:	a802      	add	r0, sp, #8
 23f7db0:	f7fd ff5e 	bl	23f5c70 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23f7db4:	2200      	movs	r2, #0
 23f7db6:	4629      	mov	r1, r5
 23f7db8:	4803      	ldr	r0, [pc, #12]	; (23f7dc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
 23f7dba:	f7ff f933 	bl	23f7024 <application_thread_invoke>
 23f7dbe:	e7b7      	b.n	23f7d30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 23f7dc0:	023f7c13 	.word	0x023f7c13
 23f7dc4:	023f7ea5 	.word	0x023f7ea5
 23f7dc8:	023f765b 	.word	0x023f765b

023f7dcc <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE>:
        PublishFlags flags) {
 23f7dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f7dd0:	b08d      	sub	sp, #52	; 0x34
 23f7dd2:	4604      	mov	r4, r0
 23f7dd4:	460e      	mov	r6, r1
 23f7dd6:	4617      	mov	r7, r2
 23f7dd8:	4699      	mov	r9, r3
 23f7dda:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23f7dde:	f7ff f9bb 	bl	23f7158 <spark_cloud_flag_connected>
    if (!connected()) {
 23f7de2:	b940      	cbnz	r0, 23f7df6 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0x2a>
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 23f7de4:	f06f 01d1 	mvn.w	r1, #209	; 0xd1
 23f7de8:	4620      	mov	r0, r4
 23f7dea:	f7ff ff3d 	bl	23f7c68 <_ZN8particle10FutureBaseIbNS_6detail13FutureContextEEC1ENS_5Error4TypeE>
}
 23f7dee:	4620      	mov	r0, r4
 23f7df0:	b00d      	add	sp, #52	; 0x34
 23f7df2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d.size = sizeof(spark_send_event_data);
 23f7df6:	2014      	movs	r0, #20
    spark_send_event_data d = {};
 23f7df8:	2500      	movs	r5, #0
    d.content_type = static_cast<int>(type);
 23f7dfa:	9b14      	ldr	r3, [sp, #80]	; 0x50
    spark_send_event_data d = {};
 23f7dfc:	e9cd 5508 	strd	r5, r5, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 23f7e00:	9007      	str	r0, [sp, #28]
    d.data_size = size;
 23f7e02:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    d.content_type = static_cast<int>(type);
 23f7e06:	930b      	str	r3, [sp, #44]	; 0x2c
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 23f7e08:	f7ec fb0b 	bl	23e4422 <_Znwj>
 23f7e0c:	4601      	mov	r1, r0
 23f7e0e:	b118      	cbz	r0, 23f7e18 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23f7e10:	e9c0 5501 	strd	r5, r5, [r0, #4]
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 23f7e14:	7005      	strb	r5, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23f7e16:	7045      	strb	r5, [r0, #1]
	: __shared_count(__p)
 23f7e18:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23f7e1a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 23f7e1c:	f7ff ff10 	bl	23f7c40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 23f7e20:	4b1f      	ldr	r3, [pc, #124]	; (23f7ea0 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0xd4>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 23f7e22:	2008      	movs	r0, #8
 23f7e24:	9308      	str	r3, [sp, #32]
 23f7e26:	f7ec fafc 	bl	23e4422 <_Znwj>
 23f7e2a:	4605      	mov	r5, r0
 23f7e2c:	b110      	cbz	r0, 23f7e34 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0x68>
 23f7e2e:	a903      	add	r1, sp, #12
 23f7e30:	f7ff fec2 	bl	23f7bb8 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(name, data, ttl, flags.value(), &d) && !p.isDone()) {
 23f7e34:	ab07      	add	r3, sp, #28
 23f7e36:	9300      	str	r3, [sp, #0]
 23f7e38:	4639      	mov	r1, r7
 23f7e3a:	4630      	mov	r0, r6
 23f7e3c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 23f7e3e:	fa5f f388 	uxtb.w	r3, r8
    d.handler_data = p.dataPtr();
 23f7e42:	9509      	str	r5, [sp, #36]	; 0x24
    if (!spark_send_event(name, data, ttl, flags.value(), &d) && !p.isDone()) {
 23f7e44:	f7ff f9a4 	bl	23f7190 <spark_send_event>
 23f7e48:	b9b8      	cbnz	r0, 23f7e7a <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0xae>
	return __atomic_load_n(&_M_i, int(__m));
 23f7e4a:	9b03      	ldr	r3, [sp, #12]
 23f7e4c:	3301      	adds	r3, #1
 23f7e4e:	781b      	ldrb	r3, [r3, #0]
 23f7e50:	b2db      	uxtb	r3, r3
 23f7e52:	b993      	cbnz	r3, 23f7e7a <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0xae>
        type_(type) {
 23f7e54:	9305      	str	r3, [sp, #20]
 23f7e56:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 23f7e5a:	a905      	add	r1, sp, #20
 23f7e5c:	a803      	add	r0, sp, #12
 23f7e5e:	f8ad 3018 	strh.w	r3, [sp, #24]
 23f7e62:	f7ff ff39 	bl	23f7cd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23f7e66:	a805      	add	r0, sp, #20
 23f7e68:	f7ff fe29 	bl	23f7abe <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 23f7e6c:	a805      	add	r0, sp, #20
 23f7e6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 23f7e70:	f7ff feab 	bl	23f7bca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 23f7e74:	a806      	add	r0, sp, #24
 23f7e76:	f7ff fbda 	bl	23f762e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f7e7a:	a903      	add	r1, sp, #12
 23f7e7c:	a805      	add	r0, sp, #20
 23f7e7e:	f7ff fe9b 	bl	23f7bb8 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 23f7e82:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23f7e84:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23f7e86:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 23f7e88:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23f7e8a:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 23f7e8c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 23f7e8e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 23f7e90:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 23f7e92:	f7ff fbcc 	bl	23f762e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f7e96:	a804      	add	r0, sp, #16
 23f7e98:	f7ff fbc9 	bl	23f762e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 23f7e9c:	e7a7      	b.n	23f7dee <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0x22>
 23f7e9e:	bf00      	nop
 23f7ea0:	023f7f69 	.word	0x023f7f69

023f7ea4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 23f7ea4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23f7ea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f7ea8:	4605      	mov	r5, r0
	switch (__op)
 23f7eaa:	d103      	bne.n	23f7eb4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23f7eac:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f7eae:	6003      	str	r3, [r0, #0]
      }
 23f7eb0:	2000      	movs	r0, #0
 23f7eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 23f7eb4:	2a02      	cmp	r2, #2
 23f7eb6:	d010      	beq.n	23f7eda <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 23f7eb8:	2a03      	cmp	r2, #3
 23f7eba:	d1f9      	bne.n	23f7eb0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23f7ebc:	6804      	ldr	r4, [r0, #0]
 23f7ebe:	2c00      	cmp	r4, #0
 23f7ec0:	d0f6      	beq.n	23f7eb0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 23f7ec2:	f104 0010 	add.w	r0, r4, #16
 23f7ec6:	f7ff fdfa 	bl	23f7abe <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23f7eca:	4620      	mov	r0, r4
 23f7ecc:	f7fd fed0 	bl	23f5c70 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23f7ed0:	2118      	movs	r1, #24
 23f7ed2:	4620      	mov	r0, r4
 23f7ed4:	f7ec faa9 	bl	23e442a <_ZdlPvj>
 23f7ed8:	e7ea      	b.n	23f7eb0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23f7eda:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 23f7edc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23f7ede:	f7ec faa0 	bl	23e4422 <_Znwj>
 23f7ee2:	4604      	mov	r4, r0
 23f7ee4:	b150      	cbz	r0, 23f7efc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 23f7ee6:	4631      	mov	r1, r6
 23f7ee8:	f7ff fee6 	bl	23f7cb8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23f7eec:	6930      	ldr	r0, [r6, #16]
 23f7eee:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23f7ef2:	b108      	cbz	r0, 23f7ef8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 23f7ef4:	f004 fc80 	bl	23fc7f8 <strdup>
        type_(type) {
 23f7ef8:	6120      	str	r0, [r4, #16]
 23f7efa:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 23f7efc:	602c      	str	r4, [r5, #0]
	}
 23f7efe:	e7d7      	b.n	23f7eb0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

023f7f00 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 23f7f00:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23f7f02:	2300      	movs	r3, #0
 23f7f04:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23f7f06:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23f7f08:	4604      	mov	r4, r0
 23f7f0a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23f7f0c:	b12b      	cbz	r3, 23f7f1a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f7f0e:	2202      	movs	r2, #2
 23f7f10:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f7f12:	68eb      	ldr	r3, [r5, #12]
 23f7f14:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23f7f16:	68ab      	ldr	r3, [r5, #8]
 23f7f18:	60a3      	str	r3, [r4, #8]
    }
 23f7f1a:	4620      	mov	r0, r4
 23f7f1c:	bd38      	pop	{r3, r4, r5, pc}

023f7f1e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 23f7f1e:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23f7f20:	b570      	push	{r4, r5, r6, lr}
 23f7f22:	4604      	mov	r4, r0
	switch (__op)
 23f7f24:	d103      	bne.n	23f7f2e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23f7f26:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f7f28:	6003      	str	r3, [r0, #0]
      }
 23f7f2a:	2000      	movs	r0, #0
 23f7f2c:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 23f7f2e:	2a02      	cmp	r2, #2
 23f7f30:	d00c      	beq.n	23f7f4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 23f7f32:	2a03      	cmp	r2, #3
 23f7f34:	d1f9      	bne.n	23f7f2a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23f7f36:	6804      	ldr	r4, [r0, #0]
 23f7f38:	2c00      	cmp	r4, #0
 23f7f3a:	d0f6      	beq.n	23f7f2a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23f7f3c:	4620      	mov	r0, r4
 23f7f3e:	f7fd fe97 	bl	23f5c70 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23f7f42:	2114      	movs	r1, #20
 23f7f44:	4620      	mov	r0, r4
 23f7f46:	f7ec fa70 	bl	23e442a <_ZdlPvj>
 23f7f4a:	e7ee      	b.n	23f7f2a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23f7f4c:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 23f7f4e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23f7f50:	f7ec fa67 	bl	23e4422 <_Znwj>
 23f7f54:	4605      	mov	r5, r0
 23f7f56:	b120      	cbz	r0, 23f7f62 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
 23f7f58:	4631      	mov	r1, r6
 23f7f5a:	f7ff ffd1 	bl	23f7f00 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 23f7f5e:	7c33      	ldrb	r3, [r6, #16]
 23f7f60:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 23f7f62:	6025      	str	r5, [r4, #0]
	}
 23f7f64:	e7e1      	b.n	23f7f2a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	...

023f7f68 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 23f7f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f7f6a:	4604      	mov	r4, r0
 23f7f6c:	b089      	sub	sp, #36	; 0x24
 23f7f6e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 23f7f70:	a801      	add	r0, sp, #4
 23f7f72:	4611      	mov	r1, r2
 23f7f74:	f7ff fe29 	bl	23f7bca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 23f7f78:	b1a4      	cbz	r4, 23f7fa4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 23f7f7a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23f7f7c:	b11d      	cbz	r5, 23f7f86 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 23f7f7e:	4628      	mov	r0, r5
 23f7f80:	f004 fc3a 	bl	23fc7f8 <strdup>
 23f7f84:	4605      	mov	r5, r0
 23f7f86:	a801      	add	r0, sp, #4
 23f7f88:	a903      	add	r1, sp, #12
        type_(type) {
 23f7f8a:	9503      	str	r5, [sp, #12]
 23f7f8c:	f8ad 4010 	strh.w	r4, [sp, #16]
 23f7f90:	f7ff fea2 	bl	23f7cd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23f7f94:	a803      	add	r0, sp, #12
 23f7f96:	f7ff fd92 	bl	23f7abe <_ZN8particle5ErrorD1Ev>
 23f7f9a:	a802      	add	r0, sp, #8
 23f7f9c:	f7ff fb47 	bl	23f762e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f7fa0:	b009      	add	sp, #36	; 0x24
 23f7fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23f7fa4:	2301      	movs	r3, #1
      { return _M_ptr; }
 23f7fa6:	9d01      	ldr	r5, [sp, #4]
 23f7fa8:	e8d5 2f4f 	ldrexb	r2, [r5]
 23f7fac:	2a00      	cmp	r2, #0
 23f7fae:	d103      	bne.n	23f7fb8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 23f7fb0:	e8c5 3f41 	strexb	r1, r3, [r5]
 23f7fb4:	2900      	cmp	r1, #0
 23f7fb6:	d1f7      	bne.n	23f7fa8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 23f7fb8:	d1ef      	bne.n	23f7f9a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 23f7fba:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 23f7fbc:	2201      	movs	r2, #1
 23f7fbe:	18eb      	adds	r3, r5, r3
 23f7fc0:	e8c3 2f8f 	stlb	r2, [r3]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23f7fc4:	1d2b      	adds	r3, r5, #4
 23f7fc6:	e8d3 6fef 	ldaex	r6, [r3]
 23f7fca:	e8c3 4fe2 	stlex	r2, r4, [r3]
 23f7fce:	2a00      	cmp	r2, #0
 23f7fd0:	d1f9      	bne.n	23f7fc6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x5e>
        if (callbackPtr) {
 23f7fd2:	2e00      	cmp	r6, #0
 23f7fd4:	d0e1      	beq.n	23f7f9a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 23f7fd6:	4620      	mov	r0, r4
 23f7fd8:	f7ff f816 	bl	23f7008 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23f7fdc:	4607      	mov	r7, r0
 23f7fde:	b160      	cbz	r0, 23f7ffa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x92>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23f7fe0:	4630      	mov	r0, r6
 23f7fe2:	f105 010c 	add.w	r1, r5, #12
 23f7fe6:	f7ff fe1b 	bl	23f7c20 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 23f7fea:	4630      	mov	r0, r6
 23f7fec:	f7fd fe40 	bl	23f5c70 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23f7ff0:	2110      	movs	r1, #16
 23f7ff2:	4630      	mov	r0, r6
 23f7ff4:	f7ec fa19 	bl	23e442a <_ZdlPvj>
 23f7ff8:	e7cf      	b.n	23f7f9a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23f7ffa:	4631      	mov	r1, r6
 23f7ffc:	a803      	add	r0, sp, #12
 23f7ffe:	f7ff ff7f 	bl	23f7f00 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23f8002:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23f8004:	2010      	movs	r0, #16
 23f8006:	f88d 301c 	strb.w	r3, [sp, #28]
 23f800a:	f7ec fa0a 	bl	23e4422 <_Znwj>
 23f800e:	4605      	mov	r5, r0
 23f8010:	b1d0      	cbz	r0, 23f8048 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe0>
    _Function_base() : _M_manager(nullptr) { }
 23f8012:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f8014:	2014      	movs	r0, #20
 23f8016:	f7ec fa04 	bl	23e4422 <_Znwj>
 23f801a:	4604      	mov	r4, r0
 23f801c:	b178      	cbz	r0, 23f803e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xd6>
	std::swap(_M_functor, __x._M_functor);
 23f801e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23f8020:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23f8022:	a803      	add	r0, sp, #12
 23f8024:	f7ff fb2d 	bl	23f7682 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f8028:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23f802a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f802c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f802e:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 23f8030:	9205      	str	r2, [sp, #20]
 23f8032:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f8034:	60e3      	str	r3, [r4, #12]
 23f8036:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 23f803a:	9206      	str	r2, [sp, #24]
 23f803c:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 23f803e:	4b07      	ldr	r3, [pc, #28]	; (23f805c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f8040:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23f8042:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23f8044:	4b06      	ldr	r3, [pc, #24]	; (23f8060 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
 23f8046:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 23f8048:	a803      	add	r0, sp, #12
 23f804a:	f7fd fe11 	bl	23f5c70 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23f804e:	2200      	movs	r2, #0
 23f8050:	4629      	mov	r1, r5
 23f8052:	4804      	ldr	r0, [pc, #16]	; (23f8064 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 23f8054:	f7fe ffe6 	bl	23f7024 <application_thread_invoke>
 23f8058:	e7c7      	b.n	23f7fea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x82>
 23f805a:	bf00      	nop
 23f805c:	023f7c33 	.word	0x023f7c33
 23f8060:	023f7f1f 	.word	0x023f7f1f
 23f8064:	023f765b 	.word	0x023f765b

023f8068 <_GLOBAL__sub_I__ZN8particle10CloudEvent15s_subscriptionsE>:
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 23f8068:	2200      	movs	r2, #0
 23f806a:	4b02      	ldr	r3, [pc, #8]	; (23f8074 <_GLOBAL__sub_I__ZN8particle10CloudEvent15s_subscriptionsE+0xc>)
 23f806c:	e9c3 2200 	strd	r2, r2, [r3]
 23f8070:	609a      	str	r2, [r3, #8]
        // Keep the reference around until the application callback is called
        d.unwrap();
    }
}

} // namespace particle
 23f8072:	4770      	bx	lr
 23f8074:	1007aee8 	.word	0x1007aee8

023f8078 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23f8078:	2200      	movs	r2, #0
 23f807a:	6840      	ldr	r0, [r0, #4]
 23f807c:	4611      	mov	r1, r2
 23f807e:	f7ff b94b 	b.w	23f7318 <network_listening>

023f8082 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23f8082:	2200      	movs	r2, #0
 23f8084:	6840      	ldr	r0, [r0, #4]
 23f8086:	4611      	mov	r1, r2
 23f8088:	f7ff b97e 	b.w	23f7388 <network_get_listen_timeout>

023f808c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23f808c:	2200      	movs	r2, #0
 23f808e:	6840      	ldr	r0, [r0, #4]
 23f8090:	f7ff b96c 	b.w	23f736c <network_set_listen_timeout>

023f8094 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23f8094:	2200      	movs	r2, #0
 23f8096:	6840      	ldr	r0, [r0, #4]
 23f8098:	f081 0101 	eor.w	r1, r1, #1
 23f809c:	f7ff b92e 	b.w	23f72fc <network_listen>

023f80a0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23f80a0:	2300      	movs	r3, #0
 23f80a2:	6840      	ldr	r0, [r0, #4]
 23f80a4:	461a      	mov	r2, r3
 23f80a6:	4619      	mov	r1, r3
 23f80a8:	f7ff b91a 	b.w	23f72e0 <network_off>

023f80ac <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23f80ac:	2300      	movs	r3, #0
 23f80ae:	6840      	ldr	r0, [r0, #4]
 23f80b0:	461a      	mov	r2, r3
 23f80b2:	4619      	mov	r1, r3
 23f80b4:	f7ff b906 	b.w	23f72c4 <network_on>

023f80b8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23f80b8:	2200      	movs	r2, #0
 23f80ba:	6840      	ldr	r0, [r0, #4]
 23f80bc:	4611      	mov	r1, r2
 23f80be:	f7ff b8f3 	b.w	23f72a8 <network_ready>

023f80c2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23f80c2:	2200      	movs	r2, #0
 23f80c4:	6840      	ldr	r0, [r0, #4]
 23f80c6:	4611      	mov	r1, r2
 23f80c8:	f7ff b8d2 	b.w	23f7270 <network_connecting>

023f80cc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23f80cc:	2200      	movs	r2, #0
 23f80ce:	2102      	movs	r1, #2
 23f80d0:	6840      	ldr	r0, [r0, #4]
 23f80d2:	f7ff b8db 	b.w	23f728c <network_disconnect>

023f80d6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23f80d6:	2300      	movs	r3, #0
 23f80d8:	6840      	ldr	r0, [r0, #4]
 23f80da:	461a      	mov	r2, r3
 23f80dc:	f7ff b8ba 	b.w	23f7254 <network_connect>

023f80e0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
 23f80e0:	2203      	movs	r2, #3
 23f80e2:	4b02      	ldr	r3, [pc, #8]	; (23f80ec <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23f80e4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23f80e6:	4a02      	ldr	r2, [pc, #8]	; (23f80f0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23f80e8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23f80ea:	4770      	bx	lr
 23f80ec:	1007aef4 	.word	0x1007aef4
 23f80f0:	023ff91c 	.word	0x023ff91c

023f80f4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23f80f4:	4770      	bx	lr

023f80f6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23f80f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f80f8:	4606      	mov	r6, r0
 23f80fa:	4615      	mov	r5, r2
 23f80fc:	460c      	mov	r4, r1
 23f80fe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23f8100:	42bc      	cmp	r4, r7
 23f8102:	d006      	beq.n	23f8112 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23f8104:	6833      	ldr	r3, [r6, #0]
 23f8106:	4630      	mov	r0, r6
 23f8108:	689b      	ldr	r3, [r3, #8]
 23f810a:	f814 1b01 	ldrb.w	r1, [r4], #1
 23f810e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23f8110:	e7f6      	b.n	23f8100 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23f8112:	4628      	mov	r0, r5
 23f8114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f8116 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23f8116:	2200      	movs	r2, #0
 23f8118:	7c00      	ldrb	r0, [r0, #16]
 23f811a:	f7fe bc65 	b.w	23f69e8 <hal_i2c_write>

023f811e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23f811e:	2100      	movs	r1, #0
 23f8120:	7c00      	ldrb	r0, [r0, #16]
 23f8122:	f7fe bc6f 	b.w	23f6a04 <hal_i2c_available>

023f8126 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23f8126:	2100      	movs	r1, #0
 23f8128:	7c00      	ldrb	r0, [r0, #16]
 23f812a:	f7fe bc79 	b.w	23f6a20 <hal_i2c_read>

023f812e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23f812e:	2100      	movs	r1, #0
 23f8130:	7c00      	ldrb	r0, [r0, #16]
 23f8132:	f7fe bc83 	b.w	23f6a3c <hal_i2c_peek>

023f8136 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23f8136:	2100      	movs	r1, #0
 23f8138:	7c00      	ldrb	r0, [r0, #16]
 23f813a:	f7fe bc8d 	b.w	23f6a58 <hal_i2c_flush>

023f813e <_ZN7TwoWireD0Ev>:
 23f813e:	b510      	push	{r4, lr}
 23f8140:	4604      	mov	r4, r0
 23f8142:	2114      	movs	r1, #20
 23f8144:	f7ec f971 	bl	23e442a <_ZdlPvj>
 23f8148:	4620      	mov	r0, r4
 23f814a:	bd10      	pop	{r4, pc}

023f814c <_ZNK16WireTransmission9halConfigEv>:
    hal_i2c_transmission_config_t conf = {
 23f814c:	2200      	movs	r2, #0
 23f814e:	e9c0 2200 	strd	r2, r2, [r0]
 23f8152:	2218      	movs	r2, #24
 23f8154:	8002      	strh	r2, [r0, #0]
    };
 23f8156:	780a      	ldrb	r2, [r1, #0]
 23f8158:	7102      	strb	r2, [r0, #4]
 23f815a:	684a      	ldr	r2, [r1, #4]
 23f815c:	6082      	str	r2, [r0, #8]
 23f815e:	68ca      	ldr	r2, [r1, #12]
 23f8160:	60c2      	str	r2, [r0, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0),
 23f8162:	7a0a      	ldrb	r2, [r1, #8]
 23f8164:	6102      	str	r2, [r0, #16]
    };
 23f8166:	690a      	ldr	r2, [r1, #16]
 23f8168:	6142      	str	r2, [r0, #20]
  }
 23f816a:	4770      	bx	lr

023f816c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23f816c:	b538      	push	{r3, r4, r5, lr}
 23f816e:	4604      	mov	r4, r0
 23f8170:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23f8172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f8176:	2200      	movs	r2, #0
 23f8178:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23f817c:	4b09      	ldr	r3, [pc, #36]	; (23f81a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23f817e:	4608      	mov	r0, r1
  _i2c = i2c;
 23f8180:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23f8182:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23f8184:	4629      	mov	r1, r5
 23f8186:	f7fe fc83 	bl	23f6a90 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23f818a:	30bf      	adds	r0, #191	; 0xbf
 23f818c:	d108      	bne.n	23f81a0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23f818e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23f8190:	07db      	lsls	r3, r3, #31
 23f8192:	d505      	bpl.n	23f81a0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23f8194:	6868      	ldr	r0, [r5, #4]
 23f8196:	f7ff f94b 	bl	23f7430 <free>
    free(conf.tx_buffer);
 23f819a:	68e8      	ldr	r0, [r5, #12]
 23f819c:	f7ff f948 	bl	23f7430 <free>
}
 23f81a0:	4620      	mov	r0, r4
 23f81a2:	bd38      	pop	{r3, r4, r5, pc}
 23f81a4:	023ff960 	.word	0x023ff960

023f81a8 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 23f81a8:	2200      	movs	r2, #0
 23f81aa:	7c00      	ldrb	r0, [r0, #16]
 23f81ac:	f7fe bbe4 	b.w	23f6978 <hal_i2c_set_speed>

023f81b0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23f81b0:	2300      	movs	r3, #0
 23f81b2:	7c00      	ldrb	r0, [r0, #16]
 23f81b4:	461a      	mov	r2, r3
 23f81b6:	4619      	mov	r1, r3
 23f81b8:	f7fe bbec 	b.w	23f6994 <hal_i2c_begin>

023f81bc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 23f81bc:	b510      	push	{r4, lr}
 23f81be:	4604      	mov	r4, r0
 23f81c0:	b086      	sub	sp, #24
  auto conf = transfer.halConfig();
 23f81c2:	4668      	mov	r0, sp
 23f81c4:	f7ff ffc2 	bl	23f814c <_ZNK16WireTransmission9halConfigEv>
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 23f81c8:	2200      	movs	r2, #0
 23f81ca:	4669      	mov	r1, sp
 23f81cc:	7c20      	ldrb	r0, [r4, #16]
 23f81ce:	f7fe fc89 	bl	23f6ae4 <hal_i2c_request_ex>
}
 23f81d2:	b006      	add	sp, #24
 23f81d4:	bd10      	pop	{r4, pc}

023f81d6 <_ZN7TwoWire11requestFromEhjh>:
{
 23f81d6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        buffer_(nullptr) {
 23f81d8:	f88d 1004 	strb.w	r1, [sp, #4]
 23f81dc:	2100      	movs	r1, #0
 23f81de:	f04f 0c64 	mov.w	ip, #100	; 0x64
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 23f81e2:	1a5b      	subs	r3, r3, r1
 23f81e4:	bf18      	it	ne
 23f81e6:	2301      	movne	r3, #1
 23f81e8:	e9cd c104 	strd	ip, r1, [sp, #16]
 23f81ec:	a901      	add	r1, sp, #4
    size_ = size;
 23f81ee:	9202      	str	r2, [sp, #8]
 23f81f0:	f88d 300c 	strb.w	r3, [sp, #12]
 23f81f4:	f7ff ffe2 	bl	23f81bc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 23f81f8:	b007      	add	sp, #28
 23f81fa:	f85d fb04 	ldr.w	pc, [sp], #4

023f81fe <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 23f81fe:	2301      	movs	r3, #1
 23f8200:	f7ff bfe9 	b.w	23f81d6 <_ZN7TwoWire11requestFromEhjh>

023f8204 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23f8204:	2200      	movs	r2, #0
 23f8206:	7c00      	ldrb	r0, [r0, #16]
 23f8208:	f7fe bbd2 	b.w	23f69b0 <hal_i2c_begin_transmission>

023f820c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 23f820c:	b2c9      	uxtb	r1, r1
 23f820e:	f7ff bff9 	b.w	23f8204 <_ZN7TwoWire17beginTransmissionEh>

023f8212 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23f8212:	2200      	movs	r2, #0
 23f8214:	7c00      	ldrb	r0, [r0, #16]
 23f8216:	f7fe bbd9 	b.w	23f69cc <hal_i2c_end_transmission>

023f821a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 23f821a:	2101      	movs	r1, #1
 23f821c:	f7ff bff9 	b.w	23f8212 <_ZN7TwoWire15endTransmissionEh>

023f8220 <_ZN7TwoWire4lockEv>:
{
  return hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 23f8220:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
 23f8222:	2100      	movs	r1, #0
 23f8224:	7c00      	ldrb	r0, [r0, #16]
 23f8226:	f7fe fc41 	bl	23f6aac <hal_i2c_lock>
}
 23f822a:	fab0 f080 	clz	r0, r0
 23f822e:	0940      	lsrs	r0, r0, #5
 23f8230:	bd08      	pop	{r3, pc}

023f8232 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 23f8232:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
 23f8234:	2100      	movs	r1, #0
 23f8236:	7c00      	ldrb	r0, [r0, #16]
 23f8238:	f7fe fc46 	bl	23f6ac8 <hal_i2c_unlock>
}
 23f823c:	fab0 f080 	clz	r0, r0
 23f8240:	0940      	lsrs	r0, r0, #5
 23f8242:	bd08      	pop	{r3, pc}

023f8244 <_ZN7TwoWire11transactionERK16WireTransmissionS2_>:

#if HAL_PLATFORM_I2C_NUM == 1
int TwoWire::transaction(const WireTransmission& tx, const WireTransmission& rx)
{
 23f8244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f8248:	b08c      	sub	sp, #48	; 0x30
  auto txConf = tx.halConfig();
 23f824a:	466c      	mov	r4, sp
{
 23f824c:	4615      	mov	r5, r2
 23f824e:	460f      	mov	r7, r1
 23f8250:	4606      	mov	r6, r0
  auto rxConf = rx.halConfig();
 23f8252:	f10d 0818 	add.w	r8, sp, #24
  auto txConf = tx.halConfig();
 23f8256:	4620      	mov	r0, r4
 23f8258:	f7ff ff78 	bl	23f814c <_ZNK16WireTransmission9halConfigEv>
  auto rxConf = rx.halConfig();
 23f825c:	4629      	mov	r1, r5
 23f825e:	4640      	mov	r0, r8
 23f8260:	f7ff ff74 	bl	23f814c <_ZNK16WireTransmission9halConfigEv>
  return hal_i2c_transaction(_i2c, tx.isValid() ? &txConf : nullptr, rx.isValid() ? &rxConf : nullptr, nullptr);
 23f8264:	783b      	ldrb	r3, [r7, #0]
 23f8266:	7c30      	ldrb	r0, [r6, #16]
 23f8268:	2bff      	cmp	r3, #255	; 0xff
 23f826a:	782b      	ldrb	r3, [r5, #0]
 23f826c:	bf14      	ite	ne
 23f826e:	4621      	movne	r1, r4
 23f8270:	2100      	moveq	r1, #0
 23f8272:	2bff      	cmp	r3, #255	; 0xff
 23f8274:	f04f 0300 	mov.w	r3, #0
 23f8278:	bf14      	ite	ne
 23f827a:	4642      	movne	r2, r8
 23f827c:	461a      	moveq	r2, r3
 23f827e:	f7fe fc3f 	bl	23f6b00 <hal_i2c_transaction>
}
 23f8282:	b00c      	add	sp, #48	; 0x30
 23f8284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f8288 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t>:
        buffer_(nullptr) {
 23f8288:	21ff      	movs	r1, #255	; 0xff
 23f828a:	2200      	movs	r2, #0
      : address_{address},
 23f828c:	4b04      	ldr	r3, [pc, #16]	; (23f82a0 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t+0x18>)
        buffer_(nullptr) {
 23f828e:	2001      	movs	r0, #1
 23f8290:	e9c3 1200 	strd	r1, r2, [r3]
 23f8294:	2164      	movs	r1, #100	; 0x64
 23f8296:	611a      	str	r2, [r3, #16]
 23f8298:	e9c3 0102 	strd	r0, r1, [r3, #8]

namespace particle {
namespace detail {
const WireTransmission WIRE_INVALID_TRANSMISSION(0xff);
} // detail
} // particle
 23f829c:	4770      	bx	lr
 23f829e:	bf00      	nop
 23f82a0:	1007aefc 	.word	0x1007aefc

023f82a4 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 23f82a4:	4700      	bx	r0
	...

023f82a8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 23f82a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 23f82ac:	461d      	mov	r5, r3
    hal_interrupt_detach(pin);
    hal_interrupt_extra_configuration_t extra = {};
 23f82ae:	2400      	movs	r4, #0
{
 23f82b0:	460f      	mov	r7, r1
 23f82b2:	4690      	mov	r8, r2
 23f82b4:	4606      	mov	r6, r0
    hal_interrupt_detach(pin);
 23f82b6:	f7fe fb43 	bl	23f6940 <hal_interrupt_detach>
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 23f82ba:	2304      	movs	r3, #4
  if (priority >= 0) {
 23f82bc:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 23f82be:	f88d 3008 	strb.w	r3, [sp, #8]
    extra.IRQChannelSubPriority = subpriority;
 23f82c2:	bfa8      	it	ge
 23f82c4:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    hal_interrupt_extra_configuration_t extra = {};
 23f82c8:	f8cd 4009 	str.w	r4, [sp, #9]
    return &extra;
 23f82cc:	bfa4      	itt	ge
 23f82ce:	ac02      	addge	r4, sp, #8
    extra.IRQChannelSubPriority = subpriority;
 23f82d0:	f88d 300a 	strbge.w	r3, [sp, #10]
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 23f82d4:	463a      	mov	r2, r7
 23f82d6:	4643      	mov	r3, r8
 23f82d8:	4630      	mov	r0, r6
 23f82da:	4906      	ldr	r1, [pc, #24]	; (23f82f4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)
 23f82dc:	9400      	str	r4, [sp, #0]
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 23f82de:	bfa8      	it	ge
 23f82e0:	f88d 5009 	strbge.w	r5, [sp, #9]
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 23f82e4:	f7fe fb1e 	bl	23f6924 <hal_interrupt_attach>
        return false;
    }
    return true;
}
 23f82e8:	fab0 f080 	clz	r0, r0
 23f82ec:	0940      	lsrs	r0, r0, #5
 23f82ee:	b004      	add	sp, #16
 23f82f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f82f4:	023f82a5 	.word	0x023f82a5

023f82f8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23f82f8:	4770      	bx	lr

023f82fa <_ZN9IPAddressD0Ev>:
 23f82fa:	b510      	push	{r4, lr}
 23f82fc:	4604      	mov	r4, r0
 23f82fe:	2118      	movs	r1, #24
 23f8300:	f7ec f893 	bl	23e442a <_ZdlPvj>
 23f8304:	4620      	mov	r0, r4
 23f8306:	bd10      	pop	{r4, pc}

023f8308 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23f8308:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23f830a:	7d03      	ldrb	r3, [r0, #20]
{
 23f830c:	460e      	mov	r6, r1
	if (address.v==6) {
 23f830e:	2b06      	cmp	r3, #6
 23f8310:	f04f 0400 	mov.w	r4, #0
{
 23f8314:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f8316:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23f831a:	d012      	beq.n	23f8342 <_ZNK9IPAddress7printToER5Print+0x3a>
 23f831c:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
 23f8320:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23f8324:	220a      	movs	r2, #10
 23f8326:	4630      	mov	r0, r6
 23f8328:	f000 fbe1 	bl	23f8aee <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23f832c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23f832e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23f8330:	d019      	beq.n	23f8366 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23f8332:	2c00      	cmp	r4, #0
 23f8334:	d0f4      	beq.n	23f8320 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23f8336:	212e      	movs	r1, #46	; 0x2e
 23f8338:	4630      	mov	r0, r6
 23f833a:	f000 fbbb 	bl	23f8ab4 <_ZN5Print5printEc>
 23f833e:	4404      	add	r4, r0
 23f8340:	e7ee      	b.n	23f8320 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f8342:	232f      	movs	r3, #47	; 0x2f
 23f8344:	466a      	mov	r2, sp
 23f8346:	4639      	mov	r1, r7
 23f8348:	200a      	movs	r0, #10
		buf[0] = 0;
 23f834a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f834e:	f7fe fbf3 	bl	23f6b38 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23f8352:	4668      	mov	r0, sp
 23f8354:	f7ec f840 	bl	23e43d8 <strlen>
 23f8358:	6833      	ldr	r3, [r6, #0]
 23f835a:	4602      	mov	r2, r0
 23f835c:	4669      	mov	r1, sp
 23f835e:	4630      	mov	r0, r6
 23f8360:	68db      	ldr	r3, [r3, #12]
 23f8362:	4798      	blx	r3
 23f8364:	4604      	mov	r4, r0
    }
    return n;
}
 23f8366:	4620      	mov	r0, r4
 23f8368:	b00d      	add	sp, #52	; 0x34
 23f836a:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f836c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23f836c:	b510      	push	{r4, lr}
 23f836e:	4604      	mov	r4, r0
 23f8370:	4b04      	ldr	r3, [pc, #16]	; (23f8384 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23f8372:	2211      	movs	r2, #17
 23f8374:	2100      	movs	r1, #0
 23f8376:	f840 3b04 	str.w	r3, [r0], #4
 23f837a:	f004 f9c0 	bl	23fc6fe <memset>
}
 23f837e:	4620      	mov	r0, r4
 23f8380:	bd10      	pop	{r4, pc}
 23f8382:	bf00      	nop
 23f8384:	023ff98c 	.word	0x023ff98c

023f8388 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23f8388:	4603      	mov	r3, r0
 23f838a:	4a07      	ldr	r2, [pc, #28]	; (23f83a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23f838c:	b510      	push	{r4, lr}
 23f838e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23f8392:	f101 0210 	add.w	r2, r1, #16
 23f8396:	f851 4b04 	ldr.w	r4, [r1], #4
 23f839a:	4291      	cmp	r1, r2
 23f839c:	f843 4b04 	str.w	r4, [r3], #4
 23f83a0:	d1f9      	bne.n	23f8396 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23f83a2:	780a      	ldrb	r2, [r1, #0]
 23f83a4:	701a      	strb	r2, [r3, #0]
}
 23f83a6:	bd10      	pop	{r4, pc}
 23f83a8:	023ff98c 	.word	0x023ff98c

023f83ac <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23f83ac:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23f83ae:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23f83b2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23f83b6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23f83ba:	2304      	movs	r3, #4
 23f83bc:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23f83c0:	6041      	str	r1, [r0, #4]
 23f83c2:	7503      	strb	r3, [r0, #20]
}
 23f83c4:	bd10      	pop	{r4, pc}
	...

023f83c8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23f83c8:	b507      	push	{r0, r1, r2, lr}
 23f83ca:	4b06      	ldr	r3, [pc, #24]	; (23f83e4 <_ZN9IPAddressC1EPKh+0x1c>)
 23f83cc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23f83ce:	78cb      	ldrb	r3, [r1, #3]
 23f83d0:	9300      	str	r3, [sp, #0]
 23f83d2:	788b      	ldrb	r3, [r1, #2]
 23f83d4:	784a      	ldrb	r2, [r1, #1]
 23f83d6:	7809      	ldrb	r1, [r1, #0]
 23f83d8:	f7ff ffe8 	bl	23f83ac <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23f83dc:	b003      	add	sp, #12
 23f83de:	f85d fb04 	ldr.w	pc, [sp], #4
 23f83e2:	bf00      	nop
 23f83e4:	023ff98c 	.word	0x023ff98c

023f83e8 <_ZN5spark16JSONBufferWriterD1Ev>:
private:
    Print &strm_;
    size_t bytesWritten_;
};

class JSONBufferWriter: public JSONWriter {
 23f83e8:	4770      	bx	lr

023f83ea <_ZN5spark16JSONBufferWriterD0Ev>:
 23f83ea:	b510      	push	{r4, lr}
 23f83ec:	4604      	mov	r4, r0
 23f83ee:	2114      	movs	r1, #20
 23f83f0:	f7ec f81b 	bl	23e442a <_ZdlPvj>
 23f83f4:	4620      	mov	r0, r4
 23f83f6:	bd10      	pop	{r4, pc}

023f83f8 <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 23f83f8:	b538      	push	{r3, r4, r5, lr}
 23f83fa:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
 23f83fc:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 23f8400:	4293      	cmp	r3, r2
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 23f8402:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
 23f8404:	d207      	bcs.n	23f8416 <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
 23f8406:	1ad2      	subs	r2, r2, r3
 23f8408:	6880      	ldr	r0, [r0, #8]
 23f840a:	42aa      	cmp	r2, r5
 23f840c:	bf28      	it	cs
 23f840e:	462a      	movcs	r2, r5
 23f8410:	4418      	add	r0, r3
 23f8412:	f004 f967 	bl	23fc6e4 <memcpy>
    }
    n_ += size;
 23f8416:	6922      	ldr	r2, [r4, #16]
 23f8418:	442a      	add	r2, r5
 23f841a:	6122      	str	r2, [r4, #16]
}
 23f841c:	bd38      	pop	{r3, r4, r5, pc}

023f841e <_ZN5spark16JSONBufferWriter6printfEPKcz>:

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
 23f841e:	b40e      	push	{r1, r2, r3}
 23f8420:	b517      	push	{r0, r1, r2, r4, lr}
 23f8422:	4604      	mov	r4, r0
 23f8424:	ab05      	add	r3, sp, #20
 23f8426:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 23f842a:	68e1      	ldr	r1, [r4, #12]
    va_start(args, fmt);
 23f842c:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 23f842e:	6903      	ldr	r3, [r0, #16]
 23f8430:	6880      	ldr	r0, [r0, #8]
 23f8432:	428b      	cmp	r3, r1
 23f8434:	bf34      	ite	cc
 23f8436:	1ac9      	subcc	r1, r1, r3
 23f8438:	2100      	movcs	r1, #0
 23f843a:	4418      	add	r0, r3
 23f843c:	9b01      	ldr	r3, [sp, #4]
 23f843e:	f7ff f84b 	bl	23f74d8 <vsnprintf>
    va_end(args);
    n_ += n;
 23f8442:	6923      	ldr	r3, [r4, #16]
 23f8444:	4418      	add	r0, r3
 23f8446:	6120      	str	r0, [r4, #16]
}
 23f8448:	b003      	add	sp, #12
 23f844a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f844e:	b003      	add	sp, #12
 23f8450:	4770      	bx	lr

023f8452 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23f8452:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23f8454:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23f8456:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23f845a:	2201      	movs	r2, #1
 23f845c:	689b      	ldr	r3, [r3, #8]
 23f845e:	f10d 0107 	add.w	r1, sp, #7
 23f8462:	4798      	blx	r3
}
 23f8464:	b003      	add	sp, #12
 23f8466:	f85d fb04 	ldr.w	pc, [sp], #4

023f846a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23f846a:	b510      	push	{r4, lr}
    write('}');
 23f846c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23f846e:	4604      	mov	r4, r0
    write('}');
 23f8470:	f7ff ffef 	bl	23f8452 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23f8474:	2301      	movs	r3, #1
}
 23f8476:	4620      	mov	r0, r4
    state_ = NEXT;
 23f8478:	7123      	strb	r3, [r4, #4]
}
 23f847a:	bd10      	pop	{r4, pc}

023f847c <_ZN5spark10JSONWriter14writeSeparatorEv>:
void spark::JSONWriter::writeSeparator() {
 23f847c:	b508      	push	{r3, lr}
    switch (state_) {
 23f847e:	7903      	ldrb	r3, [r0, #4]
 23f8480:	2b01      	cmp	r3, #1
 23f8482:	d002      	beq.n	23f848a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23f8484:	2b02      	cmp	r3, #2
 23f8486:	d004      	beq.n	23f8492 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
}
 23f8488:	bd08      	pop	{r3, pc}
        write(',');
 23f848a:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23f848c:	f7ff ffe1 	bl	23f8452 <_ZN5spark10JSONWriter5writeEc>
}
 23f8490:	e7fa      	b.n	23f8488 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23f8492:	213a      	movs	r1, #58	; 0x3a
 23f8494:	e7fa      	b.n	23f848c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023f8496 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23f8496:	b510      	push	{r4, lr}
 23f8498:	4604      	mov	r4, r0
    writeSeparator();
 23f849a:	f7ff ffef 	bl	23f847c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23f849e:	4620      	mov	r0, r4
 23f84a0:	217b      	movs	r1, #123	; 0x7b
 23f84a2:	f7ff ffd6 	bl	23f8452 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23f84a6:	2300      	movs	r3, #0
}
 23f84a8:	4620      	mov	r0, r4
    state_ = BEGIN;
 23f84aa:	7123      	strb	r3, [r4, #4]
}
 23f84ac:	bd10      	pop	{r4, pc}
	...

023f84b0 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23f84b0:	b513      	push	{r0, r1, r4, lr}
 23f84b2:	4604      	mov	r4, r0
 23f84b4:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23f84b6:	f7ff ffe1 	bl	23f847c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23f84ba:	6823      	ldr	r3, [r4, #0]
 23f84bc:	4620      	mov	r0, r4
 23f84be:	68db      	ldr	r3, [r3, #12]
 23f84c0:	9a01      	ldr	r2, [sp, #4]
 23f84c2:	4903      	ldr	r1, [pc, #12]	; (23f84d0 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23f84c4:	4798      	blx	r3
    state_ = NEXT;
 23f84c6:	2301      	movs	r3, #1
}
 23f84c8:	4620      	mov	r0, r4
    state_ = NEXT;
 23f84ca:	7123      	strb	r3, [r4, #4]
}
 23f84cc:	b002      	add	sp, #8
 23f84ce:	bd10      	pop	{r4, pc}
 23f84d0:	023ff71d 	.word	0x023ff71d

023f84d4 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23f84d4:	b513      	push	{r0, r1, r4, lr}
 23f84d6:	4604      	mov	r4, r0
 23f84d8:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23f84da:	f7ff ffcf 	bl	23f847c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23f84de:	6823      	ldr	r3, [r4, #0]
 23f84e0:	4620      	mov	r0, r4
 23f84e2:	68db      	ldr	r3, [r3, #12]
 23f84e4:	9a01      	ldr	r2, [sp, #4]
 23f84e6:	4903      	ldr	r1, [pc, #12]	; (23f84f4 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23f84e8:	4798      	blx	r3
    state_ = NEXT;
 23f84ea:	2301      	movs	r3, #1
}
 23f84ec:	4620      	mov	r0, r4
    state_ = NEXT;
 23f84ee:	7123      	strb	r3, [r4, #4]
}
 23f84f0:	b002      	add	sp, #8
 23f84f2:	bd10      	pop	{r4, pc}
 23f84f4:	023ff6a8 	.word	0x023ff6a8

023f84f8 <_ZN5spark10JSONWriter5valueEm>:
spark::JSONWriter& spark::JSONWriter::value(unsigned long val) {
 23f84f8:	b513      	push	{r0, r1, r4, lr}
 23f84fa:	4604      	mov	r4, r0
 23f84fc:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23f84fe:	f7ff ffbd 	bl	23f847c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%lu", val);
 23f8502:	6823      	ldr	r3, [r4, #0]
 23f8504:	4620      	mov	r0, r4
 23f8506:	68db      	ldr	r3, [r3, #12]
 23f8508:	9a01      	ldr	r2, [sp, #4]
 23f850a:	4903      	ldr	r1, [pc, #12]	; (23f8518 <_ZN5spark10JSONWriter5valueEm+0x20>)
 23f850c:	4798      	blx	r3
    state_ = NEXT;
 23f850e:	2301      	movs	r3, #1
}
 23f8510:	4620      	mov	r0, r4
    state_ = NEXT;
 23f8512:	7123      	strb	r3, [r4, #4]
}
 23f8514:	b002      	add	sp, #8
 23f8516:	bd10      	pop	{r4, pc}
 23f8518:	023fd5b0 	.word	0x023fd5b0

023f851c <_ZN5spark10JSONWriter5valueEy>:
spark::JSONWriter& spark::JSONWriter::value(unsigned long long val) {
 23f851c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f851e:	4604      	mov	r4, r0
 23f8520:	e9cd 3200 	strd	r3, r2, [sp]
    writeSeparator();
 23f8524:	f7ff ffaa 	bl	23f847c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%llu", val);
 23f8528:	e9dd 3200 	ldrd	r3, r2, [sp]
 23f852c:	6821      	ldr	r1, [r4, #0]
 23f852e:	4620      	mov	r0, r4
 23f8530:	68cd      	ldr	r5, [r1, #12]
 23f8532:	4903      	ldr	r1, [pc, #12]	; (23f8540 <_ZN5spark10JSONWriter5valueEy+0x24>)
 23f8534:	47a8      	blx	r5
    state_ = NEXT;
 23f8536:	2301      	movs	r3, #1
}
 23f8538:	4620      	mov	r0, r4
    state_ = NEXT;
 23f853a:	7123      	strb	r3, [r4, #4]
}
 23f853c:	b003      	add	sp, #12
 23f853e:	bd30      	pop	{r4, r5, pc}
 23f8540:	023ff998 	.word	0x023ff998

023f8544 <_ZN5spark10JSONWriter5valueEdi>:
spark::JSONWriter& spark::JSONWriter::value(double val, int precision) {
 23f8544:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f8548:	4606      	mov	r6, r0
 23f854a:	ec55 4b10 	vmov	r4, r5, d0
 23f854e:	460f      	mov	r7, r1
    writeSeparator();
 23f8550:	f7ff ff94 	bl	23f847c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%.*lf", precision, toFinite(val)); // NaN and infinite values are not permitted by the spec
 23f8554:	6833      	ldr	r3, [r6, #0]
    if (std::isnan(val)) {
 23f8556:	4622      	mov	r2, r4
    printf("%.*lf", precision, toFinite(val)); // NaN and infinite values are not permitted by the spec
 23f8558:	f8d3 a00c 	ldr.w	sl, [r3, #12]
    if (std::isnan(val)) {
 23f855c:	4620      	mov	r0, r4
 23f855e:	462b      	mov	r3, r5
 23f8560:	4629      	mov	r1, r5
 23f8562:	f7eb fb93 	bl	23e3c8c <__aeabi_dcmpun>
 23f8566:	bb38      	cbnz	r0, 23f85b8 <_ZN5spark10JSONWriter5valueEdi+0x74>
 23f8568:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
    if (std::isinf(val)) {
 23f856c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f8570:	4620      	mov	r0, r4
 23f8572:	4649      	mov	r1, r9
 23f8574:	4b13      	ldr	r3, [pc, #76]	; (23f85c4 <_ZN5spark10JSONWriter5valueEdi+0x80>)
 23f8576:	f7eb fb89 	bl	23e3c8c <__aeabi_dcmpun>
 23f857a:	b988      	cbnz	r0, 23f85a0 <_ZN5spark10JSONWriter5valueEdi+0x5c>
 23f857c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f8580:	4620      	mov	r0, r4
 23f8582:	4649      	mov	r1, r9
 23f8584:	4b0f      	ldr	r3, [pc, #60]	; (23f85c4 <_ZN5spark10JSONWriter5valueEdi+0x80>)
 23f8586:	f7eb fb63 	bl	23e3c50 <__aeabi_dcmple>
 23f858a:	b948      	cbnz	r0, 23f85a0 <_ZN5spark10JSONWriter5valueEdi+0x5c>
        return (val < 0) ? std::numeric_limits<double>::lowest() : std::numeric_limits<double>::max();
 23f858c:	4620      	mov	r0, r4
 23f858e:	2200      	movs	r2, #0
 23f8590:	2300      	movs	r3, #0
 23f8592:	4629      	mov	r1, r5
 23f8594:	f7eb fb52 	bl	23e3c3c <__aeabi_dcmplt>
 23f8598:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 23f859c:	b978      	cbnz	r0, 23f85be <_ZN5spark10JSONWriter5valueEdi+0x7a>
 23f859e:	4d09      	ldr	r5, [pc, #36]	; (23f85c4 <_ZN5spark10JSONWriter5valueEdi+0x80>)
    printf("%.*lf", precision, toFinite(val)); // NaN and infinite values are not permitted by the spec
 23f85a0:	4630      	mov	r0, r6
 23f85a2:	463a      	mov	r2, r7
 23f85a4:	e9cd 4500 	strd	r4, r5, [sp]
 23f85a8:	4907      	ldr	r1, [pc, #28]	; (23f85c8 <_ZN5spark10JSONWriter5valueEdi+0x84>)
 23f85aa:	47d0      	blx	sl
    state_ = NEXT;
 23f85ac:	2301      	movs	r3, #1
}
 23f85ae:	4630      	mov	r0, r6
    state_ = NEXT;
 23f85b0:	7133      	strb	r3, [r6, #4]
}
 23f85b2:	b002      	add	sp, #8
 23f85b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return 0;
 23f85b8:	2400      	movs	r4, #0
 23f85ba:	2500      	movs	r5, #0
 23f85bc:	e7f0      	b.n	23f85a0 <_ZN5spark10JSONWriter5valueEdi+0x5c>
        return (val < 0) ? std::numeric_limits<double>::lowest() : std::numeric_limits<double>::max();
 23f85be:	f46f 1580 	mvn.w	r5, #1048576	; 0x100000
 23f85c2:	e7ed      	b.n	23f85a0 <_ZN5spark10JSONWriter5valueEdi+0x5c>
 23f85c4:	7fefffff 	.word	0x7fefffff
 23f85c8:	023ff99d 	.word	0x023ff99d

023f85cc <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23f85cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f85d0:	460d      	mov	r5, r1
 23f85d2:	4690      	mov	r8, r2
    write('"');
 23f85d4:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23f85d6:	4604      	mov	r4, r0
 23f85d8:	462f      	mov	r7, r5
    write('"');
 23f85da:	f7ff ff3a 	bl	23f8452 <_ZN5spark10JSONWriter5writeEc>
                printf("u%04x", (unsigned)c);
 23f85de:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23f8684 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23f85e2:	44a8      	add	r8, r5
    while (s != end) {
 23f85e4:	4547      	cmp	r7, r8
 23f85e6:	46ba      	mov	sl, r7
 23f85e8:	d03d      	beq.n	23f8666 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23f85ea:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23f85ee:	2e22      	cmp	r6, #34	; 0x22
 23f85f0:	d006      	beq.n	23f8600 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23f85f2:	2e5c      	cmp	r6, #92	; 0x5c
 23f85f4:	d004      	beq.n	23f8600 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23f85f6:	4630      	mov	r0, r6
 23f85f8:	f004 f85c 	bl	23fc6b4 <isprint>
 23f85fc:	2800      	cmp	r0, #0
 23f85fe:	d1f1      	bne.n	23f85e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23f8600:	6823      	ldr	r3, [r4, #0]
 23f8602:	4629      	mov	r1, r5
 23f8604:	4620      	mov	r0, r4
 23f8606:	689b      	ldr	r3, [r3, #8]
 23f8608:	ebaa 0205 	sub.w	r2, sl, r5
 23f860c:	4798      	blx	r3
            write('\\');
 23f860e:	215c      	movs	r1, #92	; 0x5c
 23f8610:	4620      	mov	r0, r4
 23f8612:	f7ff ff1e 	bl	23f8452 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23f8616:	2e0d      	cmp	r6, #13
 23f8618:	d80a      	bhi.n	23f8630 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23f861a:	2e07      	cmp	r6, #7
 23f861c:	d91c      	bls.n	23f8658 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23f861e:	f1a6 0308 	sub.w	r3, r6, #8
 23f8622:	2b05      	cmp	r3, #5
 23f8624:	d818      	bhi.n	23f8658 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23f8626:	e8df f003 	tbb	[pc, r3]
 23f862a:	0f0d      	.short	0x0f0d
 23f862c:	15131711 	.word	0x15131711
 23f8630:	2e22      	cmp	r6, #34	; 0x22
 23f8632:	d001      	beq.n	23f8638 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23f8634:	2e5c      	cmp	r6, #92	; 0x5c
 23f8636:	d10f      	bne.n	23f8658 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23f8638:	4631      	mov	r1, r6
                write('b');
 23f863a:	4620      	mov	r0, r4
 23f863c:	f7ff ff09 	bl	23f8452 <_ZN5spark10JSONWriter5writeEc>
            str = s + 1;
 23f8640:	463d      	mov	r5, r7
    while (s != end) {
 23f8642:	e7cf      	b.n	23f85e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23f8644:	2162      	movs	r1, #98	; 0x62
 23f8646:	e7f8      	b.n	23f863a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23f8648:	2174      	movs	r1, #116	; 0x74
 23f864a:	e7f6      	b.n	23f863a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23f864c:	216e      	movs	r1, #110	; 0x6e
 23f864e:	e7f4      	b.n	23f863a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23f8650:	2166      	movs	r1, #102	; 0x66
 23f8652:	e7f2      	b.n	23f863a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23f8654:	2172      	movs	r1, #114	; 0x72
 23f8656:	e7f0      	b.n	23f863a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23f8658:	6823      	ldr	r3, [r4, #0]
 23f865a:	4632      	mov	r2, r6
 23f865c:	4649      	mov	r1, r9
 23f865e:	4620      	mov	r0, r4
 23f8660:	68db      	ldr	r3, [r3, #12]
 23f8662:	4798      	blx	r3
                break;
 23f8664:	e7ec      	b.n	23f8640 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
    if (s != str) {
 23f8666:	42bd      	cmp	r5, r7
 23f8668:	d005      	beq.n	23f8676 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23f866a:	6823      	ldr	r3, [r4, #0]
 23f866c:	4629      	mov	r1, r5
 23f866e:	4620      	mov	r0, r4
 23f8670:	689b      	ldr	r3, [r3, #8]
 23f8672:	1b7a      	subs	r2, r7, r5
 23f8674:	4798      	blx	r3
    write('"');
 23f8676:	2122      	movs	r1, #34	; 0x22
 23f8678:	4620      	mov	r0, r4
 23f867a:	f7ff feea 	bl	23f8452 <_ZN5spark10JSONWriter5writeEc>
}
 23f867e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f8682:	bf00      	nop
 23f8684:	023ff9a3 	.word	0x023ff9a3

023f8688 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23f8688:	b513      	push	{r0, r1, r4, lr}
 23f868a:	4604      	mov	r4, r0
 23f868c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23f8690:	f7ff fef4 	bl	23f847c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23f8694:	e9dd 2100 	ldrd	r2, r1, [sp]
 23f8698:	4620      	mov	r0, r4
 23f869a:	f7ff ff97 	bl	23f85cc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23f869e:	2302      	movs	r3, #2
}
 23f86a0:	4620      	mov	r0, r4
    state_ = VALUE;
 23f86a2:	7123      	strb	r3, [r4, #4]
}
 23f86a4:	b002      	add	sp, #8
 23f86a6:	bd10      	pop	{r4, pc}

023f86a8 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23f86a8:	b513      	push	{r0, r1, r4, lr}
 23f86aa:	4604      	mov	r4, r0
 23f86ac:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23f86b0:	f7ff fee4 	bl	23f847c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23f86b4:	e9dd 2100 	ldrd	r2, r1, [sp]
 23f86b8:	4620      	mov	r0, r4
 23f86ba:	f7ff ff87 	bl	23f85cc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23f86be:	2301      	movs	r3, #1
}
 23f86c0:	4620      	mov	r0, r4
    state_ = NEXT;
 23f86c2:	7123      	strb	r3, [r4, #4]
}
 23f86c4:	b002      	add	sp, #8
 23f86c6:	bd10      	pop	{r4, pc}

023f86c8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23f86c8:	4b01      	ldr	r3, [pc, #4]	; (23f86d0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23f86ca:	4a02      	ldr	r2, [pc, #8]	; (23f86d4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23f86cc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23f86ce:	4770      	bx	lr
 23f86d0:	1007af10 	.word	0x1007af10
 23f86d4:	023ff9c4 	.word	0x023ff9c4

023f86d8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23f86d8:	2300      	movs	r3, #0
 23f86da:	6840      	ldr	r0, [r0, #4]
 23f86dc:	461a      	mov	r2, r3
 23f86de:	f7fe bdb9 	b.w	23f7254 <network_connect>

023f86e2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23f86e2:	2200      	movs	r2, #0
 23f86e4:	2102      	movs	r1, #2
 23f86e6:	6840      	ldr	r0, [r0, #4]
 23f86e8:	f7fe bdd0 	b.w	23f728c <network_disconnect>

023f86ec <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23f86ec:	2200      	movs	r2, #0
 23f86ee:	6840      	ldr	r0, [r0, #4]
 23f86f0:	4611      	mov	r1, r2
 23f86f2:	f7fe bdbd 	b.w	23f7270 <network_connecting>

023f86f6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23f86f6:	2200      	movs	r2, #0
 23f86f8:	6840      	ldr	r0, [r0, #4]
 23f86fa:	4611      	mov	r1, r2
 23f86fc:	f7fe bdd4 	b.w	23f72a8 <network_ready>

023f8700 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23f8700:	2300      	movs	r3, #0
 23f8702:	6840      	ldr	r0, [r0, #4]
 23f8704:	461a      	mov	r2, r3
 23f8706:	4619      	mov	r1, r3
 23f8708:	f7fe bddc 	b.w	23f72c4 <network_on>

023f870c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23f870c:	2300      	movs	r3, #0
 23f870e:	6840      	ldr	r0, [r0, #4]
 23f8710:	461a      	mov	r2, r3
 23f8712:	4619      	mov	r1, r3
 23f8714:	f7fe bde4 	b.w	23f72e0 <network_off>

023f8718 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23f8718:	2100      	movs	r1, #0
 23f871a:	6840      	ldr	r0, [r0, #4]
 23f871c:	f7fe be42 	b.w	23f73a4 <network_is_on>

023f8720 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23f8720:	2100      	movs	r1, #0
 23f8722:	6840      	ldr	r0, [r0, #4]
 23f8724:	f7fe be4c 	b.w	23f73c0 <network_is_off>

023f8728 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23f8728:	2200      	movs	r2, #0
 23f872a:	6840      	ldr	r0, [r0, #4]
 23f872c:	f081 0101 	eor.w	r1, r1, #1
 23f8730:	f7fe bde4 	b.w	23f72fc <network_listen>

023f8734 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23f8734:	2200      	movs	r2, #0
 23f8736:	6840      	ldr	r0, [r0, #4]
 23f8738:	f7fe be18 	b.w	23f736c <network_set_listen_timeout>

023f873c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23f873c:	2200      	movs	r2, #0
 23f873e:	6840      	ldr	r0, [r0, #4]
 23f8740:	4611      	mov	r1, r2
 23f8742:	f7fe be21 	b.w	23f7388 <network_get_listen_timeout>

023f8746 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23f8746:	2200      	movs	r2, #0
 23f8748:	6840      	ldr	r0, [r0, #4]
 23f874a:	4611      	mov	r1, r2
 23f874c:	f7fe bde4 	b.w	23f7318 <network_listening>

023f8750 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
 23f8750:	2100      	movs	r1, #0
 23f8752:	6840      	ldr	r0, [r0, #4]
 23f8754:	f7fe be50 	b.w	23f73f8 <network_is_preferred>

023f8758 <_ZN5spark12NetworkClass7resolveEPKcb>:
}

IPAddress NetworkClass::resolve(const char* name, bool flushCache) {
 23f8758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23f875c:	2600      	movs	r6, #0
IPAddress NetworkClass::resolve(const char* name, bool flushCache) {
 23f875e:	4698      	mov	r8, r3
 23f8760:	b099      	sub	sp, #100	; 0x64
 23f8762:	460d      	mov	r5, r1
 23f8764:	4614      	mov	r4, r2
 23f8766:	4607      	mov	r7, r0
    IPAddress addr;
 23f8768:	f7ff fe00 	bl	23f836c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
 23f876c:	221c      	movs	r2, #28
 23f876e:	4631      	mov	r1, r6
 23f8770:	a811      	add	r0, sp, #68	; 0x44
    struct addrinfo *ai = nullptr;
 23f8772:	9603      	str	r6, [sp, #12]
    struct addrinfo hints = {};
 23f8774:	f003 ffc3 	bl	23fc6fe <memset>
    hints.ai_flags = AI_ADDRCONFIG;
    if (flushCache) {
 23f8778:	f1b8 0f00 	cmp.w	r8, #0
 23f877c:	d12c      	bne.n	23f87d8 <_ZN5spark12NetworkClass7resolveEPKcb+0x80>
    hints.ai_flags = AI_ADDRCONFIG;
 23f877e:	2340      	movs	r3, #64	; 0x40
        return iface_;
 23f8780:	6868      	ldr	r0, [r5, #4]
        hints.ai_flags |= AI_FLUSHCACHE;
 23f8782:	9310      	str	r3, [sp, #64]	; 0x40
    }
    hints.ai_family = AF_UNSPEC;
    if_t iface = nullptr;
 23f8784:	9604      	str	r6, [sp, #16]
    if ((network_interface_t)*this != NETWORK_INTERFACE_ALL) {
 23f8786:	b118      	cbz	r0, 23f8790 <_ZN5spark12NetworkClass7resolveEPKcb+0x38>
        if_get_by_index((network_interface_t)*this, &iface);
 23f8788:	a904      	add	r1, sp, #16
 23f878a:	b2c0      	uxtb	r0, r0
 23f878c:	f7fe f9c6 	bl	23f6b1c <if_get_by_index>
    }
    const int r = netdb_getaddrinfo_ex(name, nullptr, &hints, &ai, iface);
 23f8790:	9b04      	ldr	r3, [sp, #16]
 23f8792:	4620      	mov	r0, r4
 23f8794:	9300      	str	r3, [sp, #0]
 23f8796:	2100      	movs	r1, #0
 23f8798:	ab03      	add	r3, sp, #12
 23f879a:	aa10      	add	r2, sp, #64	; 0x40
 23f879c:	f7fe f9e8 	bl	23f6b70 <netdb_getaddrinfo_ex>
    if (!r) {
 23f87a0:	4604      	mov	r4, r0
 23f87a2:	2800      	cmp	r0, #0
 23f87a4:	d14d      	bne.n	23f8842 <_ZN5spark12NetworkClass7resolveEPKcb+0xea>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23f87a6:	4602      	mov	r2, r0
 23f87a8:	2101      	movs	r1, #1
 23f87aa:	6868      	ldr	r0, [r5, #4]
 23f87ac:	f7fe fd7c 	bl	23f72a8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f87b0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23f87b2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f87b4:	4622      	mov	r2, r4
 23f87b6:	6868      	ldr	r0, [r5, #4]
 23f87b8:	f7fe fd76 	bl	23f72a8 <network_ready>
        bool ok = false;
 23f87bc:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f87be:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23f87c0:	9e03      	ldr	r6, [sp, #12]
 23f87c2:	2e00      	cmp	r6, #0
 23f87c4:	d03d      	beq.n	23f8842 <_ZN5spark12NetworkClass7resolveEPKcb+0xea>
 23f87c6:	2900      	cmp	r1, #0
 23f87c8:	d13b      	bne.n	23f8842 <_ZN5spark12NetworkClass7resolveEPKcb+0xea>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23f87ca:	6873      	ldr	r3, [r6, #4]
 23f87cc:	2b02      	cmp	r3, #2
 23f87ce:	d005      	beq.n	23f87dc <_ZN5spark12NetworkClass7resolveEPKcb+0x84>
 23f87d0:	2b0a      	cmp	r3, #10
 23f87d2:	d013      	beq.n	23f87fc <_ZN5spark12NetworkClass7resolveEPKcb+0xa4>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23f87d4:	69f6      	ldr	r6, [r6, #28]
 23f87d6:	e7f4      	b.n	23f87c2 <_ZN5spark12NetworkClass7resolveEPKcb+0x6a>
        hints.ai_flags |= AI_FLUSHCACHE;
 23f87d8:	4b1d      	ldr	r3, [pc, #116]	; (23f8850 <_ZN5spark12NetworkClass7resolveEPKcb+0xf8>)
 23f87da:	e7d1      	b.n	23f8780 <_ZN5spark12NetworkClass7resolveEPKcb+0x28>
                case AF_INET: {
                    if (!ipv4) {
 23f87dc:	f1b8 0f00 	cmp.w	r8, #0
 23f87e0:	d0f8      	beq.n	23f87d4 <_ZN5spark12NetworkClass7resolveEPKcb+0x7c>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23f87e2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23f87e4:	a80a      	add	r0, sp, #40	; 0x28
 23f87e6:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23f87e8:	1d3c      	adds	r4, r7, #4
 23f87ea:	ad0b      	add	r5, sp, #44	; 0x2c
        return *this = IPAddress(address);
 23f87ec:	f7ff fdec 	bl	23f83c8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23f87f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f87f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f87f4:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23f87f6:	4641      	mov	r1, r8
 23f87f8:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23f87fa:	e7eb      	b.n	23f87d4 <_ZN5spark12NetworkClass7resolveEPKcb+0x7c>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23f87fc:	f1b9 0f00 	cmp.w	r9, #0
 23f8800:	d0e8      	beq.n	23f87d4 <_ZN5spark12NetworkClass7resolveEPKcb+0x7c>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23f8802:	2210      	movs	r2, #16
 23f8804:	a805      	add	r0, sp, #20
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23f8806:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23f8808:	f003 ff79 	bl	23fc6fe <memset>
                    a.v = 6;
 23f880c:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23f880e:	ad05      	add	r5, sp, #20
                    a.v = 6;
 23f8810:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23f8814:	f104 0308 	add.w	r3, r4, #8
 23f8818:	3418      	adds	r4, #24
 23f881a:	462a      	mov	r2, r5
 23f881c:	6818      	ldr	r0, [r3, #0]
 23f881e:	6859      	ldr	r1, [r3, #4]
 23f8820:	3308      	adds	r3, #8
 23f8822:	c203      	stmia	r2!, {r0, r1}
 23f8824:	42a3      	cmp	r3, r4
 23f8826:	4615      	mov	r5, r2
 23f8828:	d1f7      	bne.n	23f881a <_ZN5spark12NetworkClass7resolveEPKcb+0xc2>
                    addr = IPAddress(a);
 23f882a:	a905      	add	r1, sp, #20
 23f882c:	a80a      	add	r0, sp, #40	; 0x28
class IPAddress : public Printable {
 23f882e:	1d3c      	adds	r4, r7, #4
 23f8830:	ad0b      	add	r5, sp, #44	; 0x2c
 23f8832:	f7ff fda9 	bl	23f8388 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23f8836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f8838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f883a:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23f883c:	4649      	mov	r1, r9
 23f883e:	7023      	strb	r3, [r4, #0]
                    break;
 23f8840:	e7c8      	b.n	23f87d4 <_ZN5spark12NetworkClass7resolveEPKcb+0x7c>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23f8842:	9803      	ldr	r0, [sp, #12]
 23f8844:	f7fe f986 	bl	23f6b54 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23f8848:	4638      	mov	r0, r7
 23f884a:	b019      	add	sp, #100	; 0x64
 23f884c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23f8850:	40000040 	.word	0x40000040

023f8854 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
 23f8854:	3803      	subs	r0, #3
 23f8856:	2803      	cmp	r0, #3
 23f8858:	bf9a      	itte	ls
 23f885a:	4b02      	ldrls	r3, [pc, #8]	; (23f8864 <_ZN5spark12NetworkClass4fromEm+0x10>)
 23f885c:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
 23f8860:	4801      	ldrhi	r0, [pc, #4]	; (23f8868 <_ZN5spark12NetworkClass4fromEm+0x14>)
}
 23f8862:	4770      	bx	lr
 23f8864:	023ff9c8 	.word	0x023ff9c8
 23f8868:	1007af14 	.word	0x1007af14

023f886c <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
 23f886c:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
 23f886e:	2200      	movs	r2, #0
 23f8870:	6840      	ldr	r0, [r0, #4]
 23f8872:	f7fe fdb3 	bl	23f73dc <network_prefer>
}
 23f8876:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
 23f887a:	f7ff bfeb 	b.w	23f8854 <_ZN5spark12NetworkClass4fromEm>
	...

023f8880 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
            : iface_(iface) {
 23f8880:	4b02      	ldr	r3, [pc, #8]	; (23f888c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23f8882:	4a03      	ldr	r2, [pc, #12]	; (23f8890 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23f8884:	601a      	str	r2, [r3, #0]
 23f8886:	2200      	movs	r2, #0
 23f8888:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23f888a:	4770      	bx	lr
 23f888c:	1007af14 	.word	0x1007af14
 23f8890:	023ff9e0 	.word	0x023ff9e0

023f8894 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    config.quantity(sizeof(buf));
    pmicWireInstance()->transaction(config);
#endif // (HAL_PLATFORM_I2C_NUM != 1)
}

bool PMIC::lock() {
 23f8894:	b508      	push	{r3, lr}
            return &Wire;
 23f8896:	f001 f955 	bl	23f9b44 <_Z19__fetch_global_Wirev>
    return pmicWireInstance()->lock();
}
 23f889a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
 23f889e:	f7ff bcbf 	b.w	23f8220 <_ZN7TwoWire4lockEv>

023f88a2 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
 23f88a2:	b510      	push	{r4, lr}
 23f88a4:	4604      	mov	r4, r0
    lock_(_lock)
 23f88a6:	7001      	strb	r1, [r0, #0]
    if (lock_) {
 23f88a8:	b109      	cbz	r1, 23f88ae <_ZN4PMICC1Eb+0xc>
        lock();
 23f88aa:	f7ff fff3 	bl	23f8894 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
 23f88ae:	4620      	mov	r0, r4
 23f88b0:	bd10      	pop	{r4, pc}

023f88b2 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
 23f88b2:	b508      	push	{r3, lr}
            return &Wire;
 23f88b4:	f001 f946 	bl	23f9b44 <_Z19__fetch_global_Wirev>
    return pmicWireInstance()->unlock();
}
 23f88b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
 23f88bc:	f7ff bcb9 	b.w	23f8232 <_ZN7TwoWire6unlockEv>

023f88c0 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23f88c0:	b510      	push	{r4, lr}
 23f88c2:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 23f88c4:	6800      	ldr	r0, [r0, #0]
 23f88c6:	f7ff fff4 	bl	23f88b2 <_ZN4PMIC6unlockEv>
 23f88ca:	4620      	mov	r0, r4
 23f88cc:	bd10      	pop	{r4, pc}

023f88ce <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
 23f88ce:	b510      	push	{r4, lr}
 23f88d0:	b08e      	sub	sp, #56	; 0x38
 23f88d2:	f88d 1007 	strb.w	r1, [sp, #7]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f88d6:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
 23f88d8:	f7ff ffdc 	bl	23f8894 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    buffer_ = buf;
 23f88dc:	f10d 0307 	add.w	r3, sp, #7
 23f88e0:	9308      	str	r3, [sp, #32]
    size_ = size;
 23f88e2:	2301      	movs	r3, #1
    byte DATA = 0;
 23f88e4:	2400      	movs	r4, #0
        buffer_(nullptr) {
 23f88e6:	216b      	movs	r1, #107	; 0x6b
    timeout_ = ms;
 23f88e8:	220a      	movs	r2, #10
    size_ = size;
 23f88ea:	9305      	str	r3, [sp, #20]
        buffer_(nullptr) {
 23f88ec:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    size_ = size;
 23f88f0:	930a      	str	r3, [sp, #40]	; 0x28
    buffer_ = buf;
 23f88f2:	f10d 030b 	add.w	r3, sp, #11
 23f88f6:	930d      	str	r3, [sp, #52]	; 0x34
 23f88f8:	f88d 400b 	strb.w	r4, [sp, #11]
        buffer_(nullptr) {
 23f88fc:	f88d 1010 	strb.w	r1, [sp, #16]
    timeout_ = ms;
 23f8900:	9207      	str	r2, [sp, #28]
    stop_ = stop;
 23f8902:	f88d 4018 	strb.w	r4, [sp, #24]
        buffer_(nullptr) {
 23f8906:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
    timeout_ = ms;
 23f890a:	920c      	str	r2, [sp, #48]	; 0x30
            return &Wire;
 23f890c:	f001 f91a 	bl	23f9b44 <_Z19__fetch_global_Wirev>
    auto r = pmicWireInstance()->transaction(config, rxConfig);
 23f8910:	aa09      	add	r2, sp, #36	; 0x24
 23f8912:	a904      	add	r1, sp, #16
 23f8914:	f7ff fc96 	bl	23f8244 <_ZN7TwoWire11transactionERK16WireTransmissionS2_>
    if (r != 1) {
 23f8918:	2801      	cmp	r0, #1
        DATA = 0;
 23f891a:	bf18      	it	ne
 23f891c:	f88d 400b 	strbne.w	r4, [sp, #11]
    return DATA;
 23f8920:	f89d 400b 	ldrb.w	r4, [sp, #11]
    std::lock_guard<PMIC> l(*this);
 23f8924:	a803      	add	r0, sp, #12
 23f8926:	f7ff ffcb 	bl	23f88c0 <_ZNSt10lock_guardI4PMICED1Ev>
}
 23f892a:	4620      	mov	r0, r4
 23f892c:	b00e      	add	sp, #56	; 0x38
 23f892e:	bd10      	pop	{r4, pc}

023f8930 <_ZN4PMIC8getFaultEv>:
    DATA = readRegister(FAULT_REGISTER);
 23f8930:	2109      	movs	r1, #9
 23f8932:	f7ff bfcc 	b.w	23f88ce <_ZN4PMIC12readRegisterEh>
	...

023f8938 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
 23f8938:	b530      	push	{r4, r5, lr}
 23f893a:	b089      	sub	sp, #36	; 0x24
 23f893c:	460d      	mov	r5, r1
 23f893e:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f8940:	9002      	str	r0, [sp, #8]
      { _M_device.lock(); }
 23f8942:	f7ff ffa7 	bl	23f8894 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        buffer_(nullptr) {
 23f8946:	236b      	movs	r3, #107	; 0x6b
 23f8948:	f88d 300c 	strb.w	r3, [sp, #12]
 23f894c:	2301      	movs	r3, #1
 23f894e:	f88d 3014 	strb.w	r3, [sp, #20]
    timeout_ = ms;
 23f8952:	230a      	movs	r3, #10
 23f8954:	9306      	str	r3, [sp, #24]
    buffer_ = buf;
 23f8956:	ab01      	add	r3, sp, #4
 23f8958:	9307      	str	r3, [sp, #28]
    size_ = size;
 23f895a:	2302      	movs	r3, #2
    uint8_t buf[2] = {address, DATA};
 23f895c:	f88d 5004 	strb.w	r5, [sp, #4]
 23f8960:	9304      	str	r3, [sp, #16]
 23f8962:	f88d 4005 	strb.w	r4, [sp, #5]
            return &Wire;
 23f8966:	f001 f8ed 	bl	23f9b44 <_Z19__fetch_global_Wirev>
    pmicWireInstance()->transaction(config);
 23f896a:	4a04      	ldr	r2, [pc, #16]	; (23f897c <_ZN4PMIC13writeRegisterEhh+0x44>)
 23f896c:	a903      	add	r1, sp, #12
 23f896e:	f7ff fc69 	bl	23f8244 <_ZN7TwoWire11transactionERK16WireTransmissionS2_>
    std::lock_guard<PMIC> l(*this);
 23f8972:	a802      	add	r0, sp, #8
 23f8974:	f7ff ffa4 	bl	23f88c0 <_ZNSt10lock_guardI4PMICED1Ev>
}
 23f8978:	b009      	add	sp, #36	; 0x24
 23f897a:	bd30      	pop	{r4, r5, pc}
 23f897c:	1007aefc 	.word	0x1007aefc

023f8980 <_ZN4PMIC12enableBATFETEv>:
bool PMIC::enableBATFET(void) {
 23f8980:	b513      	push	{r0, r1, r4, lr}
 23f8982:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f8984:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 23f8986:	f7ff ff85 	bl	23f8894 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(MISC_CONTROL_REGISTER);
 23f898a:	2107      	movs	r1, #7
 23f898c:	4620      	mov	r0, r4
 23f898e:	f7ff ff9e 	bl	23f88ce <_ZN4PMIC12readRegisterEh>
    writeRegister(MISC_CONTROL_REGISTER, (DATA & 0b11011111));
 23f8992:	2107      	movs	r1, #7
 23f8994:	f000 02df 	and.w	r2, r0, #223	; 0xdf
 23f8998:	4620      	mov	r0, r4
 23f899a:	f7ff ffcd 	bl	23f8938 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 23f899e:	a801      	add	r0, sp, #4
 23f89a0:	f7ff ff8e 	bl	23f88c0 <_ZNSt10lock_guardI4PMICED1Ev>
}
 23f89a4:	2001      	movs	r0, #1
 23f89a6:	b002      	add	sp, #8
 23f89a8:	bd10      	pop	{r4, pc}

023f89aa <_ZN4PMIC13disableBATFETEv>:
bool PMIC::disableBATFET(void) {
 23f89aa:	b513      	push	{r0, r1, r4, lr}
 23f89ac:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f89ae:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 23f89b0:	f7ff ff70 	bl	23f8894 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(MISC_CONTROL_REGISTER);
 23f89b4:	2107      	movs	r1, #7
 23f89b6:	4620      	mov	r0, r4
 23f89b8:	f7ff ff89 	bl	23f88ce <_ZN4PMIC12readRegisterEh>
    writeRegister(MISC_CONTROL_REGISTER, (DATA | 0b00100000));
 23f89bc:	f040 0020 	orr.w	r0, r0, #32
 23f89c0:	b2c2      	uxtb	r2, r0
 23f89c2:	2107      	movs	r1, #7
 23f89c4:	4620      	mov	r0, r4
 23f89c6:	f7ff ffb7 	bl	23f8938 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 23f89ca:	a801      	add	r0, sp, #4
 23f89cc:	f7ff ff78 	bl	23f88c0 <_ZNSt10lock_guardI4PMICED1Ev>
}
 23f89d0:	2001      	movs	r0, #1
 23f89d2:	b002      	add	sp, #8
 23f89d4:	bd10      	pop	{r4, pc}

023f89d6 <_ZN8particle18OutputStringStream5writeEh>:
    size_t write(uint8_t b) override {
 23f89d6:	b507      	push	{r0, r1, r2, lr}
        return write(&b, 1);
 23f89d8:	6803      	ldr	r3, [r0, #0]
    size_t write(uint8_t b) override {
 23f89da:	f88d 1007 	strb.w	r1, [sp, #7]
        return write(&b, 1);
 23f89de:	2201      	movs	r2, #1
 23f89e0:	68db      	ldr	r3, [r3, #12]
 23f89e2:	f10d 0107 	add.w	r1, sp, #7
 23f89e6:	4798      	blx	r3
    }
 23f89e8:	b003      	add	sp, #12
 23f89ea:	f85d fb04 	ldr.w	pc, [sp], #4

023f89ee <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23f89ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f89f0:	4606      	mov	r6, r0
 23f89f2:	460d      	mov	r5, r1
  size_t n = 0;
 23f89f4:	2400      	movs	r4, #0
 23f89f6:	188f      	adds	r7, r1, r2
  while (size--) {
 23f89f8:	42bd      	cmp	r5, r7
 23f89fa:	d00c      	beq.n	23f8a16 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23f89fc:	6833      	ldr	r3, [r6, #0]
 23f89fe:	4630      	mov	r0, r6
 23f8a00:	689b      	ldr	r3, [r3, #8]
 23f8a02:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f8a06:	4798      	blx	r3
     if (chunk>=0)
 23f8a08:	1e03      	subs	r3, r0, #0
 23f8a0a:	db01      	blt.n	23f8a10 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23f8a0c:	441c      	add	r4, r3
  while (size--) {
 23f8a0e:	e7f3      	b.n	23f89f8 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23f8a10:	2c00      	cmp	r4, #0
 23f8a12:	bf08      	it	eq
 23f8a14:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23f8a16:	4620      	mov	r0, r4
 23f8a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f8a1a <_ZN8particle18OutputStringStreamD1Ev>:
class OutputStringStream: public Print {
 23f8a1a:	4770      	bx	lr

023f8a1c <_ZN8particle18OutputStringStreamD0Ev>:
 23f8a1c:	b510      	push	{r4, lr}
 23f8a1e:	4604      	mov	r4, r0
 23f8a20:	210c      	movs	r1, #12
 23f8a22:	f7eb fd02 	bl	23e442a <_ZdlPvj>
 23f8a26:	4620      	mov	r0, r4
 23f8a28:	bd10      	pop	{r4, pc}
	...

023f8a2c <_ZN8particle18OutputStringStream5writeEPKhj>:
    return n;
}

namespace particle {

size_t OutputStringStream::write(const uint8_t* data, size_t size) {
 23f8a2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (getWriteError()) {
 23f8a2e:	6843      	ldr	r3, [r0, #4]
size_t OutputStringStream::write(const uint8_t* data, size_t size) {
 23f8a30:	4605      	mov	r5, r0
 23f8a32:	460e      	mov	r6, r1
 23f8a34:	4614      	mov	r4, r2
    if (getWriteError()) {
 23f8a36:	b9d3      	cbnz	r3, 23f8a6e <_ZN8particle18OutputStringStream5writeEPKhj+0x42>
        return 0;
    }
    size_t newSize = s_.length() + size;
 23f8a38:	6880      	ldr	r0, [r0, #8]
 23f8a3a:	6882      	ldr	r2, [r0, #8]
    unsigned char reserve(unsigned int size);
    bool resize(size_t size);
    inline unsigned int length(void) const {return len;}

    unsigned int capacity() const {
        return capacity_;
 23f8a3c:	6843      	ldr	r3, [r0, #4]
 23f8a3e:	4422      	add	r2, r4
    if (s_.capacity() < newSize && !s_.reserve(std::max<size_t>({ newSize, s_.capacity() * 3 / 2, 20 }))) {
 23f8a40:	429a      	cmp	r2, r3
 23f8a42:	d916      	bls.n	23f8a72 <_ZN8particle18OutputStringStream5writeEPKhj+0x46>
 23f8a44:	2114      	movs	r1, #20
 23f8a46:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23f8a4a:	085b      	lsrs	r3, r3, #1
		  _Compare __comp)
    {
      if (__first == __last) return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
	if (__comp(__result, __first))
 23f8a4c:	429a      	cmp	r2, r3
 23f8a4e:	9302      	str	r3, [sp, #8]
 23f8a50:	9201      	str	r2, [sp, #4]
      _ForwardIterator __result = __first;
 23f8a52:	bf2c      	ite	cs
 23f8a54:	ab01      	addcs	r3, sp, #4
      while (++__first != __last)
 23f8a56:	ab02      	addcc	r3, sp, #8
 23f8a58:	9103      	str	r1, [sp, #12]
	if (__comp(__result, __first))
 23f8a5a:	681a      	ldr	r2, [r3, #0]
 23f8a5c:	2a13      	cmp	r2, #19
      while (++__first != __last)
 23f8a5e:	bf98      	it	ls
 23f8a60:	ab03      	addls	r3, sp, #12
 23f8a62:	6819      	ldr	r1, [r3, #0]
 23f8a64:	f000 f9fb 	bl	23f8e5e <_ZN6String7reserveEj>
 23f8a68:	b918      	cbnz	r0, 23f8a72 <_ZN8particle18OutputStringStream5writeEPKhj+0x46>
    void setWriteError(int err = 1) { write_error = err; }
 23f8a6a:	4b06      	ldr	r3, [pc, #24]	; (23f8a84 <_ZN8particle18OutputStringStream5writeEPKhj+0x58>)
 23f8a6c:	606b      	str	r3, [r5, #4]
        return 0;
 23f8a6e:	2400      	movs	r4, #0
 23f8a70:	e004      	b.n	23f8a7c <_ZN8particle18OutputStringStream5writeEPKhj+0x50>
        setWriteError(Error::NO_MEMORY);
        return 0;
    }
    s_.concat((const char*)data, size);
 23f8a72:	4622      	mov	r2, r4
 23f8a74:	4631      	mov	r1, r6
 23f8a76:	68a8      	ldr	r0, [r5, #8]
 23f8a78:	f000 fa4c 	bl	23f8f14 <_ZN6String6concatEPKcj>
    return size;
}
 23f8a7c:	4620      	mov	r0, r4
 23f8a7e:	b004      	add	sp, #16
 23f8a80:	bd70      	pop	{r4, r5, r6, pc}
 23f8a82:	bf00      	nop
 23f8a84:	fffffefc 	.word	0xfffffefc

023f8a88 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23f8a88:	b513      	push	{r0, r1, r4, lr}
 23f8a8a:	4604      	mov	r4, r0
    }
 23f8a8c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23f8a8e:	b159      	cbz	r1, 23f8aa8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23f8a90:	9101      	str	r1, [sp, #4]
 23f8a92:	f7eb fca1 	bl	23e43d8 <strlen>
 23f8a96:	4602      	mov	r2, r0
 23f8a98:	4620      	mov	r0, r4
 23f8a9a:	6823      	ldr	r3, [r4, #0]
 23f8a9c:	9901      	ldr	r1, [sp, #4]
 23f8a9e:	68db      	ldr	r3, [r3, #12]
    }
 23f8aa0:	b002      	add	sp, #8
 23f8aa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23f8aa6:	4718      	bx	r3
    }
 23f8aa8:	b002      	add	sp, #8
 23f8aaa:	bd10      	pop	{r4, pc}

023f8aac <_ZN5Print5printEPKc>:
{
 23f8aac:	b508      	push	{r3, lr}
  return write(str);
 23f8aae:	f7ff ffeb 	bl	23f8a88 <_ZN5Print5writeEPKc>
}
 23f8ab2:	bd08      	pop	{r3, pc}

023f8ab4 <_ZN5Print5printEc>:
  return write(c);
 23f8ab4:	6803      	ldr	r3, [r0, #0]
 23f8ab6:	689b      	ldr	r3, [r3, #8]
 23f8ab8:	4718      	bx	r3

023f8aba <_ZN5Print5printEPK19__FlashStringHelper>:
 23f8aba:	b508      	push	{r3, lr}
 23f8abc:	f7ff ffe4 	bl	23f8a88 <_ZN5Print5writeEPKc>
 23f8ac0:	bd08      	pop	{r3, pc}

023f8ac2 <_ZN5Print7printlnEv>:
{
 23f8ac2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23f8ac4:	210d      	movs	r1, #13
{
 23f8ac6:	4605      	mov	r5, r0
  size_t n = print('\r');
 23f8ac8:	f7ff fff4 	bl	23f8ab4 <_ZN5Print5printEc>
  n += print('\n');
 23f8acc:	210a      	movs	r1, #10
  size_t n = print('\r');
 23f8ace:	4604      	mov	r4, r0
  n += print('\n');
 23f8ad0:	4628      	mov	r0, r5
 23f8ad2:	f7ff ffef 	bl	23f8ab4 <_ZN5Print5printEc>
}
 23f8ad6:	4420      	add	r0, r4
 23f8ad8:	bd38      	pop	{r3, r4, r5, pc}

023f8ada <_ZN5Print7printlnEPKc>:
{
 23f8ada:	b538      	push	{r3, r4, r5, lr}
 23f8adc:	4605      	mov	r5, r0
  return write(str);
 23f8ade:	f7ff ffd3 	bl	23f8a88 <_ZN5Print5writeEPKc>
 23f8ae2:	4604      	mov	r4, r0
  n += println();
 23f8ae4:	4628      	mov	r0, r5
 23f8ae6:	f7ff ffec 	bl	23f8ac2 <_ZN5Print7printlnEv>
}
 23f8aea:	4420      	add	r0, r4
 23f8aec:	bd38      	pop	{r3, r4, r5, pc}

023f8aee <_ZN5Print11printNumberEmh>:
  *str = '\0';
 23f8aee:	2300      	movs	r3, #0
  if (base < 2) base = 10;
 23f8af0:	2a01      	cmp	r2, #1
 23f8af2:	bf98      	it	ls
 23f8af4:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23f8af6:	b530      	push	{r4, r5, lr}
 23f8af8:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23f8afa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23f8afe:	ac09      	add	r4, sp, #36	; 0x24
   n /= base;
 23f8b00:	460d      	mov	r5, r1
 23f8b02:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23f8b06:	fb01 5312 	mls	r3, r1, r2, r5
 23f8b0a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23f8b0e:	2b09      	cmp	r3, #9
 23f8b10:	bf94      	ite	ls
 23f8b12:	3330      	addls	r3, #48	; 0x30
 23f8b14:	3337      	addhi	r3, #55	; 0x37
 23f8b16:	b2db      	uxtb	r3, r3
  } while(n);
 23f8b18:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23f8b1a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23f8b1e:	d9ef      	bls.n	23f8b00 <_ZN5Print11printNumberEmh+0x12>
  return write(str);
 23f8b20:	4621      	mov	r1, r4
 23f8b22:	f7ff ffb1 	bl	23f8a88 <_ZN5Print5writeEPKc>
}
 23f8b26:	b00b      	add	sp, #44	; 0x2c
 23f8b28:	bd30      	pop	{r4, r5, pc}

023f8b2a <_ZN5Print7vprintfEbPKcSt9__va_list>:
{
 23f8b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f8b2e:	b086      	sub	sp, #24
 23f8b30:	af00      	add	r7, sp, #0
 23f8b32:	4605      	mov	r5, r0
 23f8b34:	460e      	mov	r6, r1
    size_t n = vsnprintf(test, bufsize, format, args);
 23f8b36:	1d38      	adds	r0, r7, #4
 23f8b38:	2114      	movs	r1, #20
{
 23f8b3a:	4614      	mov	r4, r2
    va_copy(args2, args);
 23f8b3c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 23f8b3e:	f7fe fccb 	bl	23f74d8 <vsnprintf>
    if (n<bufsize)
 23f8b42:	2813      	cmp	r0, #19
 23f8b44:	d80e      	bhi.n	23f8b64 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 23f8b46:	4628      	mov	r0, r5
 23f8b48:	1d39      	adds	r1, r7, #4
 23f8b4a:	f7ff ff9d 	bl	23f8a88 <_ZN5Print5writeEPKc>
 23f8b4e:	4604      	mov	r4, r0
    if (newline)
 23f8b50:	b11e      	cbz	r6, 23f8b5a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 23f8b52:	4628      	mov	r0, r5
 23f8b54:	f7ff ffb5 	bl	23f8ac2 <_ZN5Print7printlnEv>
 23f8b58:	4404      	add	r4, r0
}
 23f8b5a:	4620      	mov	r0, r4
 23f8b5c:	3718      	adds	r7, #24
 23f8b5e:	46bd      	mov	sp, r7
 23f8b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 23f8b64:	f100 0308 	add.w	r3, r0, #8
 23f8b68:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 23f8b6c:	46e8      	mov	r8, sp
        char bigger[n+1];
 23f8b6e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 23f8b72:	4622      	mov	r2, r4
 23f8b74:	1c41      	adds	r1, r0, #1
 23f8b76:	683b      	ldr	r3, [r7, #0]
 23f8b78:	4668      	mov	r0, sp
 23f8b7a:	f7fe fcad 	bl	23f74d8 <vsnprintf>
  return write(str);
 23f8b7e:	4669      	mov	r1, sp
 23f8b80:	4628      	mov	r0, r5
 23f8b82:	f7ff ff81 	bl	23f8a88 <_ZN5Print5writeEPKc>
 23f8b86:	4604      	mov	r4, r0
 23f8b88:	46c5      	mov	sp, r8
 23f8b8a:	e7e1      	b.n	23f8b50 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

023f8b8c <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
 23f8b8c:	b510      	push	{r4, lr}
  if (0 == max) {
 23f8b8e:	4604      	mov	r4, r0
 23f8b90:	b128      	cbz	r0, 23f8b9e <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
 23f8b92:	f003 fdeb 	bl	23fc76c <rand>
 23f8b96:	fb90 f3f4 	sdiv	r3, r0, r4
 23f8b9a:	fb03 0414 	mls	r4, r3, r4, r0
}
 23f8b9e:	4620      	mov	r0, r4
 23f8ba0:	bd10      	pop	{r4, pc}

023f8ba2 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
 23f8ba2:	4288      	cmp	r0, r1
{
 23f8ba4:	b510      	push	{r4, lr}
 23f8ba6:	4604      	mov	r4, r0
  if (min >= max) {
 23f8ba8:	da03      	bge.n	23f8bb2 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
 23f8baa:	1a08      	subs	r0, r1, r0
 23f8bac:	f7ff ffee 	bl	23f8b8c <_Z6randomi>
 23f8bb0:	4404      	add	r4, r0
}
 23f8bb2:	4620      	mov	r0, r4
 23f8bb4:	bd10      	pop	{r4, pc}
	...

023f8bb8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23f8bb8:	2200      	movs	r2, #0
 23f8bba:	4b01      	ldr	r3, [pc, #4]	; (23f8bc0 <_GLOBAL__sub_I_RGB+0x8>)
 23f8bbc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23f8bbe:	4770      	bx	lr
 23f8bc0:	1007af1c 	.word	0x1007af1c

023f8bc4 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23f8bc4:	2100      	movs	r1, #0
 23f8bc6:	f7fe b86d 	b.w	23f6ca4 <hal_spi_release>

023f8bca <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23f8bca:	2100      	movs	r1, #0
 23f8bcc:	f7fe b85c 	b.w	23f6c88 <hal_spi_acquire>

023f8bd0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23f8bd0:	b510      	push	{r4, lr}
 23f8bd2:	4604      	mov	r4, r0
 23f8bd4:	4608      	mov	r0, r1
{
    _spi = spi;
 23f8bd6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23f8bd8:	f7fe f802 	bl	23f6be0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23f8bdc:	2300      	movs	r3, #0
}
 23f8bde:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23f8be0:	6063      	str	r3, [r4, #4]
}
 23f8be2:	bd10      	pop	{r4, pc}

023f8be4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 23f8be4:	b513      	push	{r0, r1, r4, lr}
 23f8be6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
 23f8be8:	7800      	ldrb	r0, [r0, #0]
 23f8bea:	f7ff ffee 	bl	23f8bca <_ZN8SPIClass4lockEv.isra.0>
 23f8bee:	b958      	cbnz	r0, 23f8c08 <_ZN8SPIClass5beginEv+0x24>
 23f8bf0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 23f8bf2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23f8bf6:	9001      	str	r0, [sp, #4]
 23f8bf8:	f7fd ffc8 	bl	23f6b8c <hal_spi_begin>
        unlock();
 23f8bfc:	9801      	ldr	r0, [sp, #4]
    }
}
 23f8bfe:	b002      	add	sp, #8
 23f8c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f8c04:	f7ff bfde 	b.w	23f8bc4 <_ZN8SPIClass6unlockEv.isra.0>
 23f8c08:	b002      	add	sp, #8
 23f8c0a:	bd10      	pop	{r4, pc}

023f8c0c <_ZN8SPIClass5beginEt>:

void SPIClass::begin(uint16_t ss_pin)
{
 23f8c0c:	b513      	push	{r0, r1, r4, lr}
 23f8c0e:	4604      	mov	r4, r0
    if (!lock())
 23f8c10:	7800      	ldrb	r0, [r0, #0]
{
 23f8c12:	9101      	str	r1, [sp, #4]
    if (!lock())
 23f8c14:	f7ff ffd9 	bl	23f8bca <_ZN8SPIClass4lockEv.isra.0>
 23f8c18:	9901      	ldr	r1, [sp, #4]
 23f8c1a:	b948      	cbnz	r0, 23f8c30 <_ZN8SPIClass5beginEt+0x24>
 23f8c1c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, ss_pin);
 23f8c1e:	9001      	str	r0, [sp, #4]
 23f8c20:	f7fd ffb4 	bl	23f6b8c <hal_spi_begin>
        unlock();
 23f8c24:	9801      	ldr	r0, [sp, #4]
    }
}
 23f8c26:	b002      	add	sp, #8
 23f8c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f8c2c:	f7ff bfca 	b.w	23f8bc4 <_ZN8SPIClass6unlockEv.isra.0>
 23f8c30:	b002      	add	sp, #8
 23f8c32:	bd10      	pop	{r4, pc}

023f8c34 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
 23f8c34:	b513      	push	{r0, r1, r4, lr}
 23f8c36:	4604      	mov	r4, r0
    if (!lock())
 23f8c38:	7800      	ldrb	r0, [r0, #0]
 23f8c3a:	f7ff ffc6 	bl	23f8bca <_ZN8SPIClass4lockEv.isra.0>
 23f8c3e:	b948      	cbnz	r0, 23f8c54 <_ZN8SPIClass3endEv+0x20>
 23f8c40:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
 23f8c42:	9001      	str	r0, [sp, #4]
 23f8c44:	f7fd ffb0 	bl	23f6ba8 <hal_spi_end>
        unlock();
 23f8c48:	9801      	ldr	r0, [sp, #4]
    }
}
 23f8c4a:	b002      	add	sp, #8
 23f8c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f8c50:	f7ff bfb8 	b.w	23f8bc4 <_ZN8SPIClass6unlockEv.isra.0>
 23f8c54:	b002      	add	sp, #8
 23f8c56:	bd10      	pop	{r4, pc}

023f8c58 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
 23f8c58:	7800      	ldrb	r0, [r0, #0]
 23f8c5a:	f7ff bfb3 	b.w	23f8bc4 <_ZN8SPIClass6unlockEv.isra.0>
	...

023f8c60 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 23f8c60:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 23f8c62:	2400      	movs	r4, #0
 23f8c64:	0840      	lsrs	r0, r0, #1
 23f8c66:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23f8c68:	6818      	ldr	r0, [r3, #0]
 23f8c6a:	b2e5      	uxtb	r5, r4
 23f8c6c:	4288      	cmp	r0, r1
 23f8c6e:	d906      	bls.n	23f8c7e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 23f8c70:	3401      	adds	r4, #1
 23f8c72:	2c08      	cmp	r4, #8
 23f8c74:	d002      	beq.n	23f8c7c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 23f8c76:	0840      	lsrs	r0, r0, #1
 23f8c78:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23f8c7a:	e7f5      	b.n	23f8c68 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 23f8c7c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 23f8c7e:	4b02      	ldr	r3, [pc, #8]	; (23f8c88 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 23f8c80:	5d5b      	ldrb	r3, [r3, r5]
 23f8c82:	7013      	strb	r3, [r2, #0]
}
 23f8c84:	bd30      	pop	{r4, r5, pc}
 23f8c86:	bf00      	nop
 23f8c88:	023ffa34 	.word	0x023ffa34

023f8c8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 23f8c8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f8c90:	4606      	mov	r6, r0
 23f8c92:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
 23f8c94:	7800      	ldrb	r0, [r0, #0]
{
 23f8c96:	460c      	mov	r4, r1
    CHECK(lock());
 23f8c98:	f7ff ff97 	bl	23f8bca <_ZN8SPIClass4lockEv.isra.0>
 23f8c9c:	2800      	cmp	r0, #0
 23f8c9e:	db1b      	blt.n	23f8cd8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23f8ca0:	2214      	movs	r2, #20
 23f8ca2:	2100      	movs	r1, #0
 23f8ca4:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 23f8ca6:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 23f8ca8:	f003 fd29 	bl	23fc6fe <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23f8cac:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23f8cae:	2200      	movs	r2, #0
 23f8cb0:	4628      	mov	r0, r5
 23f8cb2:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 23f8cb4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 23f8cb8:	f7fd ffae 	bl	23f6c18 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 23f8cbc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 23f8cc0:	b113      	cbz	r3, 23f8cc8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
 23f8cc2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 23f8cc6:	b155      	cbz	r5, 23f8cde <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
 23f8cc8:	2700      	movs	r7, #0
 23f8cca:	2501      	movs	r5, #1
 23f8ccc:	46b9      	mov	r9, r7
 23f8cce:	46b8      	mov	r8, r7
    if (default_ && other.default_)
 23f8cd0:	7923      	ldrb	r3, [r4, #4]
 23f8cd2:	b15d      	cbz	r5, 23f8cec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
 23f8cd4:	b1c3      	cbz	r3, 23f8d08 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
 23f8cd6:	2000      	movs	r0, #0
}
 23f8cd8:	b00f      	add	sp, #60	; 0x3c
 23f8cda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 23f8cde:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 23f8ce2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 23f8ce6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 23f8cea:	e7f1      	b.n	23f8cd0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
 23f8cec:	2b00      	cmp	r3, #0
 23f8cee:	d135      	bne.n	23f8d5c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
 23f8cf0:	68a3      	ldr	r3, [r4, #8]
 23f8cf2:	4543      	cmp	r3, r8
 23f8cf4:	d108      	bne.n	23f8d08 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
 23f8cf6:	f88d 9020 	strb.w	r9, [sp, #32]
 23f8cfa:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23f8cfe:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23f8d02:	89a3      	ldrh	r3, [r4, #12]
 23f8d04:	429a      	cmp	r2, r3
 23f8d06:	d0e6      	beq.n	23f8cd6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
 23f8d08:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23f8d0a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 23f8d0c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23f8d10:	980a      	ldr	r0, [sp, #40]	; 0x28
 23f8d12:	ab04      	add	r3, sp, #16
 23f8d14:	f10d 020f 	add.w	r2, sp, #15
 23f8d18:	f7ff ffa2 	bl	23f8c60 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
 23f8d1c:	7921      	ldrb	r1, [r4, #4]
 23f8d1e:	b985      	cbnz	r5, 23f8d42 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
 23f8d20:	b989      	cbnz	r1, 23f8d46 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23f8d22:	68a3      	ldr	r3, [r4, #8]
 23f8d24:	4543      	cmp	r3, r8
 23f8d26:	d30e      	bcc.n	23f8d46 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
 23f8d28:	f88d 9020 	strb.w	r9, [sp, #32]
 23f8d2c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23f8d30:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23f8d34:	89a3      	ldrh	r3, [r4, #12]
 23f8d36:	429a      	cmp	r2, r3
 23f8d38:	d105      	bne.n	23f8d46 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 23f8d3a:	9b04      	ldr	r3, [sp, #16]
 23f8d3c:	4543      	cmp	r3, r8
 23f8d3e:	d102      	bne.n	23f8d46 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23f8d40:	e7c9      	b.n	23f8cd6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
 23f8d42:	2900      	cmp	r1, #0
 23f8d44:	d1f9      	bne.n	23f8d3a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 23f8d46:	2300      	movs	r3, #0
 23f8d48:	9301      	str	r3, [sp, #4]
 23f8d4a:	7b63      	ldrb	r3, [r4, #13]
 23f8d4c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 23f8d50:	9300      	str	r3, [sp, #0]
 23f8d52:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 23f8d54:	7830      	ldrb	r0, [r6, #0]
 23f8d56:	f7fd ff89 	bl	23f6c6c <hal_spi_set_settings>
 23f8d5a:	e7bc      	b.n	23f8cd6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
 23f8d5c:	462b      	mov	r3, r5
 23f8d5e:	462a      	mov	r2, r5
 23f8d60:	2101      	movs	r1, #1
 23f8d62:	e9cd 5500 	strd	r5, r5, [sp]
 23f8d66:	e7f5      	b.n	23f8d54 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

023f8d68 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 23f8d68:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 23f8d6a:	7800      	ldrb	r0, [r0, #0]
 23f8d6c:	f7fd ff2a 	bl	23f6bc4 <hal_spi_transfer>
}
 23f8d70:	b2c0      	uxtb	r0, r0
 23f8d72:	bd08      	pop	{r3, pc}

023f8d74 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 23f8d74:	b530      	push	{r4, r5, lr}
 23f8d76:	b087      	sub	sp, #28
 23f8d78:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 23f8d7a:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 23f8d7c:	9500      	str	r5, [sp, #0]
 23f8d7e:	7800      	ldrb	r0, [r0, #0]
 23f8d80:	f7fd ff58 	bl	23f6c34 <hal_spi_transfer_dma>
    if (user_callback == NULL)
 23f8d84:	b93d      	cbnz	r5, 23f8d96 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 23f8d86:	7820      	ldrb	r0, [r4, #0]
 23f8d88:	a902      	add	r1, sp, #8
 23f8d8a:	f7fd ff61 	bl	23f6c50 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 23f8d8e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23f8d92:	07db      	lsls	r3, r3, #31
 23f8d94:	d4f7      	bmi.n	23f8d86 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
 23f8d96:	b007      	add	sp, #28
 23f8d98:	bd30      	pop	{r4, r5, pc}

023f8d9a <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
 23f8d9a:	4770      	bx	lr

023f8d9c <_ZN8SPIClass15detachInterruptEv>:
 23f8d9c:	4770      	bx	lr

023f8d9e <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 23f8d9e:	b510      	push	{r4, lr}
 23f8da0:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23f8da2:	f7fd fced 	bl	23f6780 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 23f8da6:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 23f8da8:	6823      	ldr	r3, [r4, #0]
 23f8daa:	4620      	mov	r0, r4
 23f8dac:	695b      	ldr	r3, [r3, #20]
 23f8dae:	4798      	blx	r3
    if (c >= 0) return c;
 23f8db0:	2800      	cmp	r0, #0
 23f8db2:	da08      	bge.n	23f8dc6 <_ZN6Stream9timedReadEv+0x28>
 23f8db4:	f7fd fce4 	bl	23f6780 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
 23f8db8:	68e3      	ldr	r3, [r4, #12]
 23f8dba:	1ac0      	subs	r0, r0, r3
 23f8dbc:	68a3      	ldr	r3, [r4, #8]
 23f8dbe:	4298      	cmp	r0, r3
 23f8dc0:	d3f2      	bcc.n	23f8da8 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 23f8dc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23f8dc6:	bd10      	pop	{r4, pc}

023f8dc8 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 23f8dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f8dcc:	4607      	mov	r7, r0
 23f8dce:	460c      	mov	r4, r1
 23f8dd0:	460d      	mov	r5, r1
 23f8dd2:	188e      	adds	r6, r1, r2
  size_t count = 0;
  while (count < length) {
 23f8dd4:	42b5      	cmp	r5, r6
 23f8dd6:	eba5 0804 	sub.w	r8, r5, r4
 23f8dda:	d007      	beq.n	23f8dec <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 23f8ddc:	4638      	mov	r0, r7
 23f8dde:	f7ff ffde 	bl	23f8d9e <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 23f8de2:	1e03      	subs	r3, r0, #0
 23f8de4:	db02      	blt.n	23f8dec <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
 23f8de6:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
 23f8dea:	e7f3      	b.n	23f8dd4 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
 23f8dec:	4640      	mov	r0, r8
 23f8dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f8df2 <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
 23f8df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f8df6:	4607      	mov	r7, r0
 23f8df8:	4688      	mov	r8, r1
 23f8dfa:	4616      	mov	r6, r2
  if (length < 1) return 0;
 23f8dfc:	461d      	mov	r5, r3
 23f8dfe:	b173      	cbz	r3, 23f8e1e <_ZN6Stream14readBytesUntilEcPcj+0x2c>
  size_t index = 0;
 23f8e00:	2400      	movs	r4, #0
  while (index < length) {
    int c = timedRead();
 23f8e02:	4638      	mov	r0, r7
 23f8e04:	f7ff ffcb 	bl	23f8d9e <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
 23f8e08:	1e03      	subs	r3, r0, #0
 23f8e0a:	db05      	blt.n	23f8e18 <_ZN6Stream14readBytesUntilEcPcj+0x26>
 23f8e0c:	4543      	cmp	r3, r8
 23f8e0e:	d003      	beq.n	23f8e18 <_ZN6Stream14readBytesUntilEcPcj+0x26>
    *buffer++ = (char)c;
 23f8e10:	5533      	strb	r3, [r6, r4]
    index++;
 23f8e12:	3401      	adds	r4, #1
  while (index < length) {
 23f8e14:	42a5      	cmp	r5, r4
 23f8e16:	d1f4      	bne.n	23f8e02 <_ZN6Stream14readBytesUntilEcPcj+0x10>
  }
  return index; // return number of characters, not including null terminator
}
 23f8e18:	4620      	mov	r0, r4
 23f8e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (length < 1) return 0;
 23f8e1e:	461c      	mov	r4, r3
 23f8e20:	e7fa      	b.n	23f8e18 <_ZN6Stream14readBytesUntilEcPcj+0x26>

023f8e22 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
 23f8e22:	b510      	push	{r4, lr}
 23f8e24:	4604      	mov	r4, r0
{
    free(buffer);
 23f8e26:	6800      	ldr	r0, [r0, #0]
 23f8e28:	f7fe fb02 	bl	23f7430 <free>
}
 23f8e2c:	4620      	mov	r0, r4
 23f8e2e:	bd10      	pop	{r4, pc}

023f8e30 <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
 23f8e30:	b510      	push	{r4, lr}
 23f8e32:	4604      	mov	r4, r0
    if (buffer) {
 23f8e34:	6800      	ldr	r0, [r0, #0]
 23f8e36:	b108      	cbz	r0, 23f8e3c <_ZN6String10invalidateEv+0xc>
        free(buffer);
 23f8e38:	f7fe fafa 	bl	23f7430 <free>
    }
    buffer = nullptr;
 23f8e3c:	2300      	movs	r3, #0
    capacity_ = len = 0;
 23f8e3e:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
 23f8e42:	6023      	str	r3, [r4, #0]
}
 23f8e44:	bd10      	pop	{r4, pc}

023f8e46 <_ZN6String12changeBufferEj>:
    len = size;
    return true;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23f8e46:	b538      	push	{r3, r4, r5, lr}
 23f8e48:	4604      	mov	r4, r0
 23f8e4a:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23f8e4c:	6800      	ldr	r0, [r0, #0]
 23f8e4e:	3101      	adds	r1, #1
 23f8e50:	f7fe fafc 	bl	23f744c <realloc>
    if (newbuffer) {
 23f8e54:	b110      	cbz	r0, 23f8e5c <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
 23f8e56:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
 23f8e5a:	2001      	movs	r0, #1
    }
    return 0;
}
 23f8e5c:	bd38      	pop	{r3, r4, r5, pc}

023f8e5e <_ZN6String7reserveEj>:
{
 23f8e5e:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
 23f8e60:	6803      	ldr	r3, [r0, #0]
{
 23f8e62:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
 23f8e64:	b123      	cbz	r3, 23f8e70 <_ZN6String7reserveEj+0x12>
 23f8e66:	6843      	ldr	r3, [r0, #4]
 23f8e68:	428b      	cmp	r3, r1
 23f8e6a:	d301      	bcc.n	23f8e70 <_ZN6String7reserveEj+0x12>
 23f8e6c:	2001      	movs	r0, #1
}
 23f8e6e:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
 23f8e70:	4620      	mov	r0, r4
 23f8e72:	f7ff ffe8 	bl	23f8e46 <_ZN6String12changeBufferEj>
 23f8e76:	2800      	cmp	r0, #0
 23f8e78:	d0f9      	beq.n	23f8e6e <_ZN6String7reserveEj+0x10>
        if (len == 0) {
 23f8e7a:	68a3      	ldr	r3, [r4, #8]
 23f8e7c:	2b00      	cmp	r3, #0
 23f8e7e:	d1f5      	bne.n	23f8e6c <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
 23f8e80:	6822      	ldr	r2, [r4, #0]
 23f8e82:	7013      	strb	r3, [r2, #0]
 23f8e84:	e7f2      	b.n	23f8e6c <_ZN6String7reserveEj+0xe>

023f8e86 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23f8e86:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f8e88:	460d      	mov	r5, r1
    if (!reserve(length)) {
 23f8e8a:	4611      	mov	r1, r2
 23f8e8c:	9201      	str	r2, [sp, #4]
{
 23f8e8e:	4604      	mov	r4, r0
    if (!reserve(length)) {
 23f8e90:	f7ff ffe5 	bl	23f8e5e <_ZN6String7reserveEj>
 23f8e94:	9a01      	ldr	r2, [sp, #4]
 23f8e96:	b928      	cbnz	r0, 23f8ea4 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
 23f8e98:	4620      	mov	r0, r4
 23f8e9a:	f7ff ffc9 	bl	23f8e30 <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
 23f8e9e:	4620      	mov	r0, r4
 23f8ea0:	b003      	add	sp, #12
 23f8ea2:	bd30      	pop	{r4, r5, pc}
    memcpy(buffer, cstr, length);
 23f8ea4:	4629      	mov	r1, r5
    len = length;
 23f8ea6:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
 23f8ea8:	6820      	ldr	r0, [r4, #0]
 23f8eaa:	f003 fc1b 	bl	23fc6e4 <memcpy>
    buffer[len] = 0;
 23f8eae:	2100      	movs	r1, #0
 23f8eb0:	6822      	ldr	r2, [r4, #0]
 23f8eb2:	68a3      	ldr	r3, [r4, #8]
 23f8eb4:	54d1      	strb	r1, [r2, r3]
    return *this;
 23f8eb6:	e7f2      	b.n	23f8e9e <_ZN6String4copyEPKcj+0x18>

023f8eb8 <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
 23f8eb8:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23f8eba:	b513      	push	{r0, r1, r4, lr}
 23f8ebc:	4604      	mov	r4, r0
    capacity_ = 0;
 23f8ebe:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23f8ec2:	6083      	str	r3, [r0, #8]
    flags = 0;
 23f8ec4:	7303      	strb	r3, [r0, #12]
    if (cstr) {
 23f8ec6:	b141      	cbz	r1, 23f8eda <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
 23f8ec8:	4608      	mov	r0, r1
 23f8eca:	9101      	str	r1, [sp, #4]
 23f8ecc:	f7eb fa84 	bl	23e43d8 <strlen>
 23f8ed0:	9901      	ldr	r1, [sp, #4]
 23f8ed2:	4602      	mov	r2, r0
 23f8ed4:	4620      	mov	r0, r4
 23f8ed6:	f7ff ffd6 	bl	23f8e86 <_ZN6String4copyEPKcj>
}
 23f8eda:	4620      	mov	r0, r4
 23f8edc:	b002      	add	sp, #8
 23f8ede:	bd10      	pop	{r4, pc}

023f8ee0 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
 23f8ee0:	4288      	cmp	r0, r1
{
 23f8ee2:	b510      	push	{r4, lr}
 23f8ee4:	4604      	mov	r4, r0
    if (this == &rhs) {
 23f8ee6:	d005      	beq.n	23f8ef4 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
 23f8ee8:	680b      	ldr	r3, [r1, #0]
 23f8eea:	b12b      	cbz	r3, 23f8ef8 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
 23f8eec:	688a      	ldr	r2, [r1, #8]
 23f8eee:	4619      	mov	r1, r3
 23f8ef0:	f7ff ffc9 	bl	23f8e86 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
 23f8ef4:	4620      	mov	r0, r4
 23f8ef6:	bd10      	pop	{r4, pc}
        invalidate();
 23f8ef8:	f7ff ff9a 	bl	23f8e30 <_ZN6String10invalidateEv>
 23f8efc:	e7fa      	b.n	23f8ef4 <_ZN6StringaSERKS_+0x14>

023f8efe <_ZN6StringC1ERKS_>:
    buffer = nullptr;
 23f8efe:	2300      	movs	r3, #0
String::String(const String &value)
 23f8f00:	b510      	push	{r4, lr}
 23f8f02:	4604      	mov	r4, r0
    capacity_ = 0;
 23f8f04:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23f8f08:	6083      	str	r3, [r0, #8]
    flags = 0;
 23f8f0a:	7303      	strb	r3, [r0, #12]
    *this = value;
 23f8f0c:	f7ff ffe8 	bl	23f8ee0 <_ZN6StringaSERKS_>
}
 23f8f10:	4620      	mov	r0, r4
 23f8f12:	bd10      	pop	{r4, pc}

023f8f14 <_ZN6String6concatEPKcj>:
{
    return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 23f8f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f8f16:	4604      	mov	r4, r0
 23f8f18:	4616      	mov	r6, r2
    unsigned int newlen = len + length;
    if (!cstr) {
 23f8f1a:	460f      	mov	r7, r1
 23f8f1c:	b909      	cbnz	r1, 23f8f22 <_ZN6String6concatEPKcj+0xe>
        return 0;
 23f8f1e:	2000      	movs	r0, #0
    }
    memcpy(buffer + len, cstr, length);
    buffer[newlen] = 0;
    len = newlen;
    return 1;
}
 23f8f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (length == 0) {
 23f8f22:	b18a      	cbz	r2, 23f8f48 <_ZN6String6concatEPKcj+0x34>
    unsigned int newlen = len + length;
 23f8f24:	6885      	ldr	r5, [r0, #8]
 23f8f26:	4415      	add	r5, r2
    if (!reserve(newlen)) {
 23f8f28:	4629      	mov	r1, r5
 23f8f2a:	f7ff ff98 	bl	23f8e5e <_ZN6String7reserveEj>
 23f8f2e:	2800      	cmp	r0, #0
 23f8f30:	d0f5      	beq.n	23f8f1e <_ZN6String6concatEPKcj+0xa>
    memcpy(buffer + len, cstr, length);
 23f8f32:	68a3      	ldr	r3, [r4, #8]
 23f8f34:	6820      	ldr	r0, [r4, #0]
 23f8f36:	4632      	mov	r2, r6
 23f8f38:	4418      	add	r0, r3
 23f8f3a:	4639      	mov	r1, r7
 23f8f3c:	f003 fbd2 	bl	23fc6e4 <memcpy>
    buffer[newlen] = 0;
 23f8f40:	2200      	movs	r2, #0
 23f8f42:	6823      	ldr	r3, [r4, #0]
 23f8f44:	555a      	strb	r2, [r3, r5]
    len = newlen;
 23f8f46:	60a5      	str	r5, [r4, #8]
        return 1;
 23f8f48:	2001      	movs	r0, #1
 23f8f4a:	e7e9      	b.n	23f8f20 <_ZN6String6concatEPKcj+0xc>

023f8f4c <_ZN6StringC1ERK9Printable>:
        return float(atof(buffer));
    }
    return 0;
}

String::String(const Printable& printable)
 23f8f4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f8f4e:	4604      	mov	r4, r0
    buffer = nullptr;
 23f8f50:	2300      	movs	r3, #0
    capacity_ = 0;
 23f8f52:	e9c4 3300 	strd	r3, r3, [r4]
    len = 0;
 23f8f56:	60a3      	str	r3, [r4, #8]
    flags = 0;
 23f8f58:	7323      	strb	r3, [r4, #12]
    Print() : write_error(0) {}
 23f8f5a:	9302      	str	r3, [sp, #8]
            s_(str) {
 23f8f5c:	4b05      	ldr	r3, [pc, #20]	; (23f8f74 <_ZN6StringC1ERK9Printable+0x28>)
 23f8f5e:	9403      	str	r4, [sp, #12]
 23f8f60:	9301      	str	r3, [sp, #4]
{
    init();
    OutputStringStream stream(*this);
    printable.printTo(stream);
 23f8f62:	680b      	ldr	r3, [r1, #0]
String::String(const Printable& printable)
 23f8f64:	4608      	mov	r0, r1
    printable.printTo(stream);
 23f8f66:	681b      	ldr	r3, [r3, #0]
 23f8f68:	a901      	add	r1, sp, #4
 23f8f6a:	4798      	blx	r3
}
 23f8f6c:	4620      	mov	r0, r4
 23f8f6e:	b004      	add	sp, #16
 23f8f70:	bd10      	pop	{r4, pc}
 23f8f72:	bf00      	nop
 23f8f74:	023ffa24 	.word	0x023ffa24

023f8f78 <_ZN6String6formatEPKcz>:

String String::format(const char* fmt, ...)
{
 23f8f78:	b40e      	push	{r1, r2, r3}
 23f8f7a:	b570      	push	{r4, r5, r6, lr}
 23f8f7c:	b087      	sub	sp, #28
 23f8f7e:	ad0b      	add	r5, sp, #44	; 0x2c
 23f8f80:	f855 2b04 	ldr.w	r2, [r5], #4
 23f8f84:	4604      	mov	r4, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 23f8f86:	462b      	mov	r3, r5
 23f8f88:	2105      	movs	r1, #5
 23f8f8a:	a804      	add	r0, sp, #16
 23f8f8c:	9201      	str	r2, [sp, #4]
    va_start(marker, fmt);
 23f8f8e:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 23f8f90:	f7fe faa2 	bl	23f74d8 <vsnprintf>
 23f8f94:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 23f8f96:	490b      	ldr	r1, [pc, #44]	; (23f8fc4 <_ZN6String6formatEPKcz+0x4c>)
 23f8f98:	4620      	mov	r0, r4
 23f8f9a:	f7ff ff8d 	bl	23f8eb8 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 23f8f9e:	4631      	mov	r1, r6
 23f8fa0:	4620      	mov	r0, r4
 23f8fa2:	f7ff ff5c 	bl	23f8e5e <_ZN6String7reserveEj>
    if (result.buffer) {
 23f8fa6:	6820      	ldr	r0, [r4, #0]
 23f8fa8:	b130      	cbz	r0, 23f8fb8 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 23f8faa:	462b      	mov	r3, r5
 23f8fac:	9a01      	ldr	r2, [sp, #4]
 23f8fae:	1c71      	adds	r1, r6, #1
        va_start(marker, fmt);
 23f8fb0:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 23f8fb2:	f7fe fa91 	bl	23f74d8 <vsnprintf>
        va_end(marker);
        result.len = n;
 23f8fb6:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
 23f8fb8:	4620      	mov	r0, r4
 23f8fba:	b007      	add	sp, #28
 23f8fbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23f8fc0:	b003      	add	sp, #12
 23f8fc2:	4770      	bx	lr
 23f8fc4:	023fe6d5 	.word	0x023fe6d5

023f8fc8 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 23f8fc8:	b507      	push	{r0, r1, r2, lr}
 23f8fca:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 23f8fcc:	2100      	movs	r1, #0
{
 23f8fce:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 23f8fd0:	9100      	str	r1, [sp, #0]
 23f8fd2:	2001      	movs	r0, #1
 23f8fd4:	218c      	movs	r1, #140	; 0x8c
 23f8fd6:	f7fe f879 	bl	23f70cc <system_reset>
}
 23f8fda:	b003      	add	sp, #12
 23f8fdc:	f85d fb04 	ldr.w	pc, [sp], #4

023f8fe0 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 23f8fe0:	4601      	mov	r1, r0
    reset(0, flags);
 23f8fe2:	2000      	movs	r0, #0
 23f8fe4:	f7ff bff0 	b.w	23f8fc8 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

023f8fe8 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 23f8fe8:	2000      	movs	r0, #0
 23f8fea:	f7ff bff9 	b.w	23f8fe0 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

023f8fee <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
 23f8fee:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
 23f8ff0:	2420      	movs	r4, #32
{
 23f8ff2:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
 23f8ff4:	4622      	mov	r2, r4
 23f8ff6:	2100      	movs	r1, #0
 23f8ff8:	4668      	mov	r0, sp
 23f8ffa:	f003 fb80 	bl	23fc6fe <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
 23f8ffe:	2100      	movs	r1, #0
 23f9000:	4668      	mov	r0, sp
    info.size = sizeof(info);
 23f9002:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
 23f9006:	f7fd fb75 	bl	23f66f4 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
 23f900a:	9801      	ldr	r0, [sp, #4]
 23f900c:	b008      	add	sp, #32
 23f900e:	bd10      	pop	{r4, pc}

023f9010 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23f9010:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23f9012:	2000      	movs	r0, #0
 23f9014:	4b04      	ldr	r3, [pc, #16]	; (23f9028 <_GLOBAL__sub_I_System+0x18>)
 23f9016:	601a      	str	r2, [r3, #0]
 23f9018:	4b04      	ldr	r3, [pc, #16]	; (23f902c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23f901a:	4a05      	ldr	r2, [pc, #20]	; (23f9030 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23f901c:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23f9020:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23f9022:	f7fd bfab 	b.w	23f6f7c <set_system_mode>
 23f9026:	bf00      	nop
 23f9028:	1007af38 	.word	0x1007af38
 23f902c:	1007af2c 	.word	0x1007af2c
 23f9030:	ffff0000 	.word	0xffff0000

023f9034 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 23f9034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 23f9038:	4a15      	ldr	r2, [pc, #84]	; (23f9090 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 23f903a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 23f909c <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 23f903e:	e9d2 6300 	ldrd	r6, r3, [r2]
 23f9042:	1980      	adds	r0, r0, r6
 23f9044:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
 23f9048:	4b12      	ldr	r3, [pc, #72]	; (23f9094 <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 23f904a:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 23f904c:	e9d3 6700 	ldrd	r6, r7, [r3]
 23f9050:	1986      	adds	r6, r0, r6
 23f9052:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
 23f9056:	e9d8 2300 	ldrd	r2, r3, [r8]
 23f905a:	42bb      	cmp	r3, r7
 23f905c:	bf08      	it	eq
 23f905e:	42b2      	cmpeq	r2, r6
 23f9060:	d013      	beq.n	23f908a <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 23f9062:	a903      	add	r1, sp, #12
 23f9064:	4668      	mov	r0, sp
 23f9066:	e9cd 6700 	strd	r6, r7, [sp]
 23f906a:	f7fe fa97 	bl	23f759c <localtime_r>
	calendar_time.tm_year += 1900;
 23f906e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23f9070:	4d09      	ldr	r5, [pc, #36]	; (23f9098 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 23f9072:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23f9076:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 23f9078:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23f907a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f907c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f907e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f9080:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 23f9082:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 23f9086:	6823      	ldr	r3, [r4, #0]
 23f9088:	602b      	str	r3, [r5, #0]
    }
}
 23f908a:	b00c      	add	sp, #48	; 0x30
 23f908c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f9090:	1007af70 	.word	0x1007af70
 23f9094:	1007af68 	.word	0x1007af68
 23f9098:	1007af44 	.word	0x1007af44
 23f909c:	1007af78 	.word	0x1007af78

023f90a0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
 23f90a0:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
 23f90a2:	2000      	movs	r0, #0
 23f90a4:	f7fe f890 	bl	23f71c8 <spark_sync_time_pending>
 23f90a8:	b128      	cbz	r0, 23f90b6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23f90aa:	f7fe f855 	bl	23f7158 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 23f90ae:	f080 0001 	eor.w	r0, r0, #1
 23f90b2:	b2c0      	uxtb	r0, r0
    }
 23f90b4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 23f90b6:	2001      	movs	r0, #1
 23f90b8:	e7fc      	b.n	23f90b4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

023f90bc <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
 23f90bc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f90be:	f7ff ffb9 	bl	23f9034 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
 23f90c2:	4b01      	ldr	r3, [pc, #4]	; (23f90c8 <_ZN9TimeClass4hourEx+0xc>)
 23f90c4:	6898      	ldr	r0, [r3, #8]
 23f90c6:	bd08      	pop	{r3, pc}
 23f90c8:	1007af44 	.word	0x1007af44

023f90cc <_ZN9TimeClass6minuteEx>:
	return minute(now());
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
 23f90cc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f90ce:	f7ff ffb1 	bl	23f9034 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_min;
}
 23f90d2:	4b01      	ldr	r3, [pc, #4]	; (23f90d8 <_ZN9TimeClass6minuteEx+0xc>)
 23f90d4:	6858      	ldr	r0, [r3, #4]
 23f90d6:	bd08      	pop	{r3, pc}
 23f90d8:	1007af44 	.word	0x1007af44

023f90dc <_ZN9TimeClass6secondEx>:
	return second(now());
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
 23f90dc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f90de:	f7ff ffa9 	bl	23f9034 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_sec;
}
 23f90e2:	4b01      	ldr	r3, [pc, #4]	; (23f90e8 <_ZN9TimeClass6secondEx+0xc>)
 23f90e4:	6818      	ldr	r0, [r3, #0]
 23f90e6:	bd08      	pop	{r3, pc}
 23f90e8:	1007af44 	.word	0x1007af44

023f90ec <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
 23f90ec:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f90ee:	f7ff ffa1 	bl	23f9034 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
 23f90f2:	4b01      	ldr	r3, [pc, #4]	; (23f90f8 <_ZN9TimeClass3dayEx+0xc>)
 23f90f4:	68d8      	ldr	r0, [r3, #12]
 23f90f6:	bd08      	pop	{r3, pc}
 23f90f8:	1007af44 	.word	0x1007af44

023f90fc <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 23f90fc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f90fe:	f7ff ff99 	bl	23f9034 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 23f9102:	4b02      	ldr	r3, [pc, #8]	; (23f910c <_ZN9TimeClass5monthEx+0x10>)
 23f9104:	6918      	ldr	r0, [r3, #16]
}
 23f9106:	3001      	adds	r0, #1
 23f9108:	bd08      	pop	{r3, pc}
 23f910a:	bf00      	nop
 23f910c:	1007af44 	.word	0x1007af44

023f9110 <_ZN9TimeClass4yearEx>:
	return year(now());
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
 23f9110:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 23f9112:	f7ff ff8f 	bl	23f9034 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_year;
}
 23f9116:	4b01      	ldr	r3, [pc, #4]	; (23f911c <_ZN9TimeClass4yearEx+0xc>)
 23f9118:	6958      	ldr	r0, [r3, #20]
 23f911a:	bd08      	pop	{r3, pc}
 23f911c:	1007af44 	.word	0x1007af44

023f9120 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
 23f9120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f9122:	4602      	mov	r2, r0
 23f9124:	460b      	mov	r3, r1
    struct timeval tv = {
 23f9126:	2100      	movs	r1, #0
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
 23f9128:	4668      	mov	r0, sp
    };
 23f912a:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
 23f912e:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
 23f9132:	f7fd fb95 	bl	23f6860 <hal_rtc_set_time>
 23f9136:	4602      	mov	r2, r0
 23f9138:	b910      	cbnz	r0, 23f9140 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
 23f913a:	4601      	mov	r1, r0
 23f913c:	f7fd ff8e 	bl	23f705c <system_notify_time_changed>
    }
}
 23f9140:	b005      	add	sp, #20
 23f9142:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023f9148 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 23f9148:	b530      	push	{r4, r5, lr}
 23f914a:	b093      	sub	sp, #76	; 0x4c
 23f914c:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
 23f9150:	4b19      	ldr	r3, [pc, #100]	; (23f91b8 <_ZN9TimeClass7timeStrEx+0x70>)
{
 23f9152:	4604      	mov	r4, r0
    t += time_zone_cache;
 23f9154:	e9d3 1000 	ldrd	r1, r0, [r3]
 23f9158:	9b01      	ldr	r3, [sp, #4]
 23f915a:	1852      	adds	r2, r2, r1
 23f915c:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
 23f9160:	4816      	ldr	r0, [pc, #88]	; (23f91bc <_ZN9TimeClass7timeStrEx+0x74>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 23f9162:	2500      	movs	r5, #0
    t += dst_current_cache;
 23f9164:	e9d0 1000 	ldrd	r1, r0, [r0]
 23f9168:	1852      	adds	r2, r2, r1
 23f916a:	eb43 0300 	adc.w	r3, r3, r0
 23f916e:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 23f9172:	2224      	movs	r2, #36	; 0x24
 23f9174:	2100      	movs	r1, #0
 23f9176:	eb0d 0002 	add.w	r0, sp, r2
 23f917a:	f003 fac0 	bl	23fc6fe <memset>
    localtime_r(&t, &calendar_time);
 23f917e:	a909      	add	r1, sp, #36	; 0x24
 23f9180:	4668      	mov	r0, sp
 23f9182:	f7fe fa0b 	bl	23f759c <localtime_r>
    char ascstr[26] = {};
 23f9186:	2216      	movs	r2, #22
 23f9188:	4629      	mov	r1, r5
 23f918a:	a803      	add	r0, sp, #12
 23f918c:	9502      	str	r5, [sp, #8]
 23f918e:	f003 fab6 	bl	23fc6fe <memset>
    asctime_r(&calendar_time, ascstr);
 23f9192:	a902      	add	r1, sp, #8
 23f9194:	a809      	add	r0, sp, #36	; 0x24
 23f9196:	f003 fa3f 	bl	23fc618 <asctime_r>
    int len = strlen(ascstr);
 23f919a:	a802      	add	r0, sp, #8
 23f919c:	f7eb f91c 	bl	23e43d8 <strlen>
    ascstr[len-1] = 0; // remove final newline
 23f91a0:	ab12      	add	r3, sp, #72	; 0x48
 23f91a2:	4418      	add	r0, r3
 23f91a4:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 23f91a8:	a902      	add	r1, sp, #8
 23f91aa:	4620      	mov	r0, r4
 23f91ac:	f7ff fe84 	bl	23f8eb8 <_ZN6StringC1EPK19__FlashStringHelper>
}
 23f91b0:	4620      	mov	r0, r4
 23f91b2:	b013      	add	sp, #76	; 0x4c
 23f91b4:	bd30      	pop	{r4, r5, pc}
 23f91b6:	bf00      	nop
 23f91b8:	1007af70 	.word	0x1007af70
 23f91bc:	1007af68 	.word	0x1007af68

023f91c0 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 23f91c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f91c4:	b0a4      	sub	sp, #144	; 0x90
 23f91c6:	4607      	mov	r7, r0
 23f91c8:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 23f91ca:	a814      	add	r0, sp, #80	; 0x50
{
 23f91cc:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 23f91ce:	223f      	movs	r2, #63	; 0x3f
{
 23f91d0:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 23f91d2:	f003 fb42 	bl	23fc85a <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 23f91d6:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 23f91d8:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 23f91da:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 23f91de:	f7eb f8fb 	bl	23e43d8 <strlen>
 23f91e2:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 23f91e4:	bb4c      	cbnz	r4, 23f923a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
 23f91e6:	4929      	ldr	r1, [pc, #164]	; (23f928c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
 23f91e8:	a803      	add	r0, sp, #12
 23f91ea:	f003 fafd 	bl	23fc7e8 <strcpy>
{
 23f91ee:	2600      	movs	r6, #0
 23f91f0:	ac14      	add	r4, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 23f91f2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 23f91f6:	45b1      	cmp	r9, r6
 23f91f8:	d934      	bls.n	23f9264 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 23f91fa:	7823      	ldrb	r3, [r4, #0]
 23f91fc:	f106 0a01 	add.w	sl, r6, #1
 23f9200:	2b25      	cmp	r3, #37	; 0x25
 23f9202:	d117      	bne.n	23f9234 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
 23f9204:	7863      	ldrb	r3, [r4, #1]
 23f9206:	2b7a      	cmp	r3, #122	; 0x7a
 23f9208:	d114      	bne.n	23f9234 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
 23f920a:	a803      	add	r0, sp, #12
 23f920c:	f7eb f8e4 	bl	23e43d8 <strlen>
 23f9210:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 23f9212:	ab14      	add	r3, sp, #80	; 0x50
 23f9214:	1830      	adds	r0, r6, r0
 23f9216:	4418      	add	r0, r3
 23f9218:	eba9 0206 	sub.w	r2, r9, r6
 23f921c:	1ca1      	adds	r1, r4, #2
 23f921e:	f003 fa61 	bl	23fc6e4 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 23f9222:	462a      	mov	r2, r5
 23f9224:	a903      	add	r1, sp, #12
 23f9226:	4620      	mov	r0, r4
 23f9228:	f003 fa5c 	bl	23fc6e4 <memcpy>
            len = strlen(format_str);
 23f922c:	a814      	add	r0, sp, #80	; 0x50
 23f922e:	f7eb f8d3 	bl	23e43d8 <strlen>
 23f9232:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
 23f9234:	4656      	mov	r6, sl
 23f9236:	3401      	adds	r4, #1
 23f9238:	e7db      	b.n	23f91f2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 23f923a:	233c      	movs	r3, #60	; 0x3c
 23f923c:	fb94 f2f3 	sdiv	r2, r4, r3
 23f9240:	2a00      	cmp	r2, #0
 23f9242:	bfb8      	it	lt
 23f9244:	4252      	neglt	r2, r2
 23f9246:	fbb2 f1f3 	udiv	r1, r2, r3
 23f924a:	fb03 2211 	mls	r2, r3, r1, r2
 23f924e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 23f9252:	9200      	str	r2, [sp, #0]
 23f9254:	fb94 f3f3 	sdiv	r3, r4, r3
 23f9258:	2110      	movs	r1, #16
 23f925a:	4a0d      	ldr	r2, [pc, #52]	; (23f9290 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 23f925c:	a803      	add	r0, sp, #12
 23f925e:	f7fe f92d 	bl	23f74bc <snprintf>
 23f9262:	e7c4      	b.n	23f91ee <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 23f9264:	2100      	movs	r1, #0
 23f9266:	222e      	movs	r2, #46	; 0x2e
 23f9268:	a808      	add	r0, sp, #32
 23f926a:	9107      	str	r1, [sp, #28]
 23f926c:	f003 fa47 	bl	23fc6fe <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 23f9270:	4643      	mov	r3, r8
 23f9272:	aa14      	add	r2, sp, #80	; 0x50
 23f9274:	2132      	movs	r1, #50	; 0x32
 23f9276:	a807      	add	r0, sp, #28
 23f9278:	f7fe f982 	bl	23f7580 <strftime>
    return String(buf);
 23f927c:	4638      	mov	r0, r7
 23f927e:	a907      	add	r1, sp, #28
 23f9280:	f7ff fe1a 	bl	23f8eb8 <_ZN6StringC1EPK19__FlashStringHelper>
}
 23f9284:	4638      	mov	r0, r7
 23f9286:	b024      	add	sp, #144	; 0x90
 23f9288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f928c:	023fe3ec 	.word	0x023fe3ec
 23f9290:	023ffa3c 	.word	0x023ffa3c

023f9294 <_ZN9TimeClass6formatExPKc>:
{
 23f9294:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f9296:	b08d      	sub	sp, #52	; 0x34
 23f9298:	9d12      	ldr	r5, [sp, #72]	; 0x48
 23f929a:	4604      	mov	r4, r0
 23f929c:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 23f92a0:	b915      	cbnz	r5, 23f92a8 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 23f92a2:	4b19      	ldr	r3, [pc, #100]	; (23f9308 <_ZN9TimeClass6formatExPKc+0x74>)
 23f92a4:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 23f92a6:	b12d      	cbz	r5, 23f92b4 <_ZN9TimeClass6formatExPKc+0x20>
 23f92a8:	4b18      	ldr	r3, [pc, #96]	; (23f930c <_ZN9TimeClass6formatExPKc+0x78>)
 23f92aa:	4628      	mov	r0, r5
 23f92ac:	6819      	ldr	r1, [r3, #0]
 23f92ae:	f7eb f889 	bl	23e43c4 <strcmp>
 23f92b2:	b938      	cbnz	r0, 23f92c4 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 23f92b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 23f92b8:	4620      	mov	r0, r4
 23f92ba:	f7ff ff45 	bl	23f9148 <_ZN9TimeClass7timeStrEx>
}
 23f92be:	4620      	mov	r0, r4
 23f92c0:	b00d      	add	sp, #52	; 0x34
 23f92c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 23f92c4:	9900      	ldr	r1, [sp, #0]
 23f92c6:	4e12      	ldr	r6, [pc, #72]	; (23f9310 <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 23f92c8:	4f12      	ldr	r7, [pc, #72]	; (23f9314 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 23f92ca:	e9d6 3200 	ldrd	r3, r2, [r6]
 23f92ce:	185b      	adds	r3, r3, r1
 23f92d0:	9901      	ldr	r1, [sp, #4]
 23f92d2:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
 23f92d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 23f92da:	181b      	adds	r3, r3, r0
 23f92dc:	eb42 0201 	adc.w	r2, r2, r1
 23f92e0:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 23f92e4:	2100      	movs	r1, #0
 23f92e6:	2224      	movs	r2, #36	; 0x24
 23f92e8:	a803      	add	r0, sp, #12
 23f92ea:	f003 fa08 	bl	23fc6fe <memset>
    localtime_r(&t, &calendar_time);
 23f92ee:	a903      	add	r1, sp, #12
 23f92f0:	4668      	mov	r0, sp
 23f92f2:	f7fe f953 	bl	23f759c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 23f92f6:	6832      	ldr	r2, [r6, #0]
 23f92f8:	683b      	ldr	r3, [r7, #0]
 23f92fa:	4620      	mov	r0, r4
 23f92fc:	4413      	add	r3, r2
 23f92fe:	a903      	add	r1, sp, #12
 23f9300:	462a      	mov	r2, r5
 23f9302:	f7ff ff5d 	bl	23f91c0 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 23f9306:	e7da      	b.n	23f92be <_ZN9TimeClass6formatExPKc+0x2a>
 23f9308:	1007af40 	.word	0x1007af40
 23f930c:	1006a1c4 	.word	0x1006a1c4
 23f9310:	1007af70 	.word	0x1007af70
 23f9314:	1007af68 	.word	0x1007af68

023f9318 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 23f9318:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 23f931a:	2000      	movs	r0, #0
 23f931c:	f7fd fa76 	bl	23f680c <hal_rtc_time_is_valid>
    if (rtcstate)
 23f9320:	4604      	mov	r4, r0
 23f9322:	b9a0      	cbnz	r0, 23f934e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 23f9324:	f7fd fe1c 	bl	23f6f60 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 23f9328:	2801      	cmp	r0, #1
 23f932a:	d110      	bne.n	23f934e <_ZN9TimeClass7isValidEv+0x36>
 23f932c:	4620      	mov	r0, r4
 23f932e:	f7fd fe87 	bl	23f7040 <system_thread_get_state>
 23f9332:	b960      	cbnz	r0, 23f934e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 23f9334:	f7ff feb4 	bl	23f90a0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 23f9338:	b910      	cbnz	r0, 23f9340 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 23f933a:	f7fd fef1 	bl	23f7120 <spark_process>
        while (_while() && !_condition()) {
 23f933e:	e7f9      	b.n	23f9334 <_ZN9TimeClass7isValidEv+0x1c>
 23f9340:	f7ff feae 	bl	23f90a0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 23f9344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 23f9348:	2000      	movs	r0, #0
 23f934a:	f7fd ba5f 	b.w	23f680c <hal_rtc_time_is_valid>
}
 23f934e:	4620      	mov	r0, r4
 23f9350:	bd10      	pop	{r4, pc}

023f9352 <_ZN9TimeClass3nowEv>:
{
 23f9352:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 23f9354:	f7ff ffe0 	bl	23f9318 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 23f9358:	2210      	movs	r2, #16
 23f935a:	2100      	movs	r1, #0
 23f935c:	4668      	mov	r0, sp
 23f935e:	f003 f9ce 	bl	23fc6fe <memset>
    hal_rtc_get_time(&tv, nullptr);
 23f9362:	2100      	movs	r1, #0
 23f9364:	4668      	mov	r0, sp
 23f9366:	f7fd fa6d 	bl	23f6844 <hal_rtc_get_time>
}
 23f936a:	9800      	ldr	r0, [sp, #0]
 23f936c:	b005      	add	sp, #20
 23f936e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023f9374 <_ZN9TimeClass4hourEv>:
{
 23f9374:	b508      	push	{r3, lr}
	return hour(now());
 23f9376:	f7ff ffec 	bl	23f9352 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23f937a:	17c1      	asrs	r1, r0, #31
 23f937c:	f7ff fe5a 	bl	23f9034 <_ZL22Refresh_UnixTime_Cachex>
}
 23f9380:	4b01      	ldr	r3, [pc, #4]	; (23f9388 <_ZN9TimeClass4hourEv+0x14>)
 23f9382:	6898      	ldr	r0, [r3, #8]
 23f9384:	bd08      	pop	{r3, pc}
 23f9386:	bf00      	nop
 23f9388:	1007af44 	.word	0x1007af44

023f938c <_ZN9TimeClass6minuteEv>:
{
 23f938c:	b508      	push	{r3, lr}
	return minute(now());
 23f938e:	f7ff ffe0 	bl	23f9352 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23f9392:	17c1      	asrs	r1, r0, #31
 23f9394:	f7ff fe4e 	bl	23f9034 <_ZL22Refresh_UnixTime_Cachex>
}
 23f9398:	4b01      	ldr	r3, [pc, #4]	; (23f93a0 <_ZN9TimeClass6minuteEv+0x14>)
 23f939a:	6858      	ldr	r0, [r3, #4]
 23f939c:	bd08      	pop	{r3, pc}
 23f939e:	bf00      	nop
 23f93a0:	1007af44 	.word	0x1007af44

023f93a4 <_ZN9TimeClass6secondEv>:
{
 23f93a4:	b508      	push	{r3, lr}
	return second(now());
 23f93a6:	f7ff ffd4 	bl	23f9352 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23f93aa:	17c1      	asrs	r1, r0, #31
 23f93ac:	f7ff fe42 	bl	23f9034 <_ZL22Refresh_UnixTime_Cachex>
}
 23f93b0:	4b01      	ldr	r3, [pc, #4]	; (23f93b8 <_ZN9TimeClass6secondEv+0x14>)
 23f93b2:	6818      	ldr	r0, [r3, #0]
 23f93b4:	bd08      	pop	{r3, pc}
 23f93b6:	bf00      	nop
 23f93b8:	1007af44 	.word	0x1007af44

023f93bc <_ZN9TimeClass3dayEv>:
{
 23f93bc:	b508      	push	{r3, lr}
	return day(now());
 23f93be:	f7ff ffc8 	bl	23f9352 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23f93c2:	17c1      	asrs	r1, r0, #31
 23f93c4:	f7ff fe36 	bl	23f9034 <_ZL22Refresh_UnixTime_Cachex>
}
 23f93c8:	4b01      	ldr	r3, [pc, #4]	; (23f93d0 <_ZN9TimeClass3dayEv+0x14>)
 23f93ca:	68d8      	ldr	r0, [r3, #12]
 23f93cc:	bd08      	pop	{r3, pc}
 23f93ce:	bf00      	nop
 23f93d0:	1007af44 	.word	0x1007af44

023f93d4 <_ZN9TimeClass5monthEv>:
{
 23f93d4:	b508      	push	{r3, lr}
	return month(now());
 23f93d6:	f7ff ffbc 	bl	23f9352 <_ZN9TimeClass3nowEv>
}
 23f93da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 23f93de:	17c1      	asrs	r1, r0, #31
 23f93e0:	f7ff be8c 	b.w	23f90fc <_ZN9TimeClass5monthEx>

023f93e4 <_ZN9TimeClass4yearEv>:
{
 23f93e4:	b508      	push	{r3, lr}
	return year(now());
 23f93e6:	f7ff ffb4 	bl	23f9352 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 23f93ea:	17c1      	asrs	r1, r0, #31
 23f93ec:	f7ff fe22 	bl	23f9034 <_ZL22Refresh_UnixTime_Cachex>
}
 23f93f0:	4b01      	ldr	r3, [pc, #4]	; (23f93f8 <_ZN9TimeClass4yearEv+0x14>)
 23f93f2:	6958      	ldr	r0, [r3, #20]
 23f93f4:	bd08      	pop	{r3, pc}
 23f93f6:	bf00      	nop
 23f93f8:	1007af44 	.word	0x1007af44

023f93fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23f93fc:	4b02      	ldr	r3, [pc, #8]	; (23f9408 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23f93fe:	681a      	ldr	r2, [r3, #0]
 23f9400:	4b02      	ldr	r3, [pc, #8]	; (23f940c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23f9402:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23f9404:	4770      	bx	lr
 23f9406:	bf00      	nop
 23f9408:	1006a1c4 	.word	0x1006a1c4
 23f940c:	1007af40 	.word	0x1007af40

023f9410 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23f9410:	4770      	bx	lr

023f9412 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23f9412:	7441      	strb	r1, [r0, #17]
}
 23f9414:	4770      	bx	lr

023f9416 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23f9416:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23f9418:	7c00      	ldrb	r0, [r0, #16]
 23f941a:	f7fd fca5 	bl	23f6d68 <hal_usart_available_data_for_write>
}
 23f941e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f9422:	bd08      	pop	{r3, pc}

023f9424 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23f9424:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23f9426:	7c00      	ldrb	r0, [r0, #16]
 23f9428:	f7fd fc58 	bl	23f6cdc <hal_usart_available>
}
 23f942c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f9430:	bd08      	pop	{r3, pc}

023f9432 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23f9432:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23f9434:	7c00      	ldrb	r0, [r0, #16]
 23f9436:	f7fd fc6d 	bl	23f6d14 <hal_usart_peek>
}
 23f943a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f943e:	bd08      	pop	{r3, pc}

023f9440 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23f9440:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23f9442:	7c00      	ldrb	r0, [r0, #16]
 23f9444:	f7fd fc58 	bl	23f6cf8 <hal_usart_read>
}
 23f9448:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f944c:	bd08      	pop	{r3, pc}

023f944e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23f944e:	7c00      	ldrb	r0, [r0, #16]
 23f9450:	f7fd bc6e 	b.w	23f6d30 <hal_usart_flush>

023f9454 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23f9454:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f9456:	7c45      	ldrb	r5, [r0, #17]
{
 23f9458:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f945a:	b12d      	cbz	r5, 23f9468 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23f945c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23f945e:	b003      	add	sp, #12
 23f9460:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23f9464:	f7fd bc2c 	b.w	23f6cc0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f9468:	7c00      	ldrb	r0, [r0, #16]
 23f946a:	9101      	str	r1, [sp, #4]
 23f946c:	f7fd fc7c 	bl	23f6d68 <hal_usart_available_data_for_write>
 23f9470:	2800      	cmp	r0, #0
 23f9472:	9901      	ldr	r1, [sp, #4]
 23f9474:	dcf2      	bgt.n	23f945c <_ZN11USARTSerial5writeEh+0x8>
}
 23f9476:	4628      	mov	r0, r5
 23f9478:	b003      	add	sp, #12
 23f947a:	bd30      	pop	{r4, r5, pc}

023f947c <_ZN11USARTSerialD0Ev>:
 23f947c:	b510      	push	{r4, lr}
 23f947e:	4604      	mov	r4, r0
 23f9480:	2114      	movs	r1, #20
 23f9482:	f7ea ffd2 	bl	23e442a <_ZdlPvj>
 23f9486:	4620      	mov	r0, r4
 23f9488:	bd10      	pop	{r4, pc}
	...

023f948c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23f948c:	b510      	push	{r4, lr}
 23f948e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f9492:	4604      	mov	r4, r0
 23f9494:	4608      	mov	r0, r1
 23f9496:	4611      	mov	r1, r2
 23f9498:	2200      	movs	r2, #0
 23f949a:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23f949e:	4b04      	ldr	r3, [pc, #16]	; (23f94b0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23f94a0:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23f94a2:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23f94a4:	2301      	movs	r3, #1
 23f94a6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23f94a8:	f7fd fc6c 	bl	23f6d84 <hal_usart_init_ex>
}
 23f94ac:	4620      	mov	r0, r4
 23f94ae:	bd10      	pop	{r4, pc}
 23f94b0:	023ffa6c 	.word	0x023ffa6c

023f94b4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23f94b4:	7c00      	ldrb	r0, [r0, #16]
 23f94b6:	f7fd bc49 	b.w	23f6d4c <hal_usart_is_enabled>

023f94ba <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23f94ba:	7441      	strb	r1, [r0, #17]
}
 23f94bc:	4770      	bx	lr

023f94be <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23f94be:	4770      	bx	lr

023f94c0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23f94c0:	4770      	bx	lr

023f94c2 <_ZN9USBSerial4readEv>:
{
 23f94c2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23f94c4:	2100      	movs	r1, #0
 23f94c6:	7c00      	ldrb	r0, [r0, #16]
 23f94c8:	f7fd fca2 	bl	23f6e10 <HAL_USB_USART_Receive_Data>
}
 23f94cc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f94d0:	bd08      	pop	{r3, pc}

023f94d2 <_ZN9USBSerial4peekEv>:
{
 23f94d2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23f94d4:	2101      	movs	r1, #1
 23f94d6:	7c00      	ldrb	r0, [r0, #16]
 23f94d8:	f7fd fc9a 	bl	23f6e10 <HAL_USB_USART_Receive_Data>
}
 23f94dc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f94e0:	bd08      	pop	{r3, pc}

023f94e2 <_ZN9USBSerial17availableForWriteEv>:
{
 23f94e2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23f94e4:	7c00      	ldrb	r0, [r0, #16]
 23f94e6:	f7fd fc85 	bl	23f6df4 <HAL_USB_USART_Available_Data_For_Write>
}
 23f94ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f94ee:	bd08      	pop	{r3, pc}

023f94f0 <_ZN9USBSerial9availableEv>:
{
 23f94f0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23f94f2:	7c00      	ldrb	r0, [r0, #16]
 23f94f4:	f7fd fc70 	bl	23f6dd8 <HAL_USB_USART_Available_Data>
}
 23f94f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f94fc:	bd08      	pop	{r3, pc}

023f94fe <_ZN9USBSerial5writeEh>:
{
 23f94fe:	b513      	push	{r0, r1, r4, lr}
 23f9500:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23f9502:	7c00      	ldrb	r0, [r0, #16]
{
 23f9504:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23f9506:	f7fd fc75 	bl	23f6df4 <HAL_USB_USART_Available_Data_For_Write>
 23f950a:	2800      	cmp	r0, #0
 23f950c:	9901      	ldr	r1, [sp, #4]
 23f950e:	dc01      	bgt.n	23f9514 <_ZN9USBSerial5writeEh+0x16>
 23f9510:	7c60      	ldrb	r0, [r4, #17]
 23f9512:	b120      	cbz	r0, 23f951e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23f9514:	7c20      	ldrb	r0, [r4, #16]
 23f9516:	f7fd fc89 	bl	23f6e2c <HAL_USB_USART_Send_Data>
 23f951a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23f951e:	b002      	add	sp, #8
 23f9520:	bd10      	pop	{r4, pc}

023f9522 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23f9522:	7c00      	ldrb	r0, [r0, #16]
 23f9524:	f7fd bc90 	b.w	23f6e48 <HAL_USB_USART_Flush_Data>

023f9528 <_ZN9USBSerialD0Ev>:
 23f9528:	b510      	push	{r4, lr}
 23f952a:	4604      	mov	r4, r0
 23f952c:	2114      	movs	r1, #20
 23f952e:	f7ea ff7c 	bl	23e442a <_ZdlPvj>
 23f9532:	4620      	mov	r0, r4
 23f9534:	bd10      	pop	{r4, pc}
	...

023f9538 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23f9538:	b510      	push	{r4, lr}
 23f953a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f953e:	4604      	mov	r4, r0
 23f9540:	4608      	mov	r0, r1
 23f9542:	2100      	movs	r1, #0
 23f9544:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23f9548:	4b04      	ldr	r3, [pc, #16]	; (23f955c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23f954a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23f954c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23f954e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23f9550:	4611      	mov	r1, r2
  _blocking = true;
 23f9552:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23f9554:	f7fd fc24 	bl	23f6da0 <HAL_USB_USART_Init>
}
 23f9558:	4620      	mov	r0, r4
 23f955a:	bd10      	pop	{r4, pc}
 23f955c:	023ffaa0 	.word	0x023ffaa0

023f9560 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23f9560:	2200      	movs	r2, #0
 23f9562:	7c00      	ldrb	r0, [r0, #16]
 23f9564:	f7fd bc2a 	b.w	23f6dbc <HAL_USB_USART_Begin>

023f9568 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
 23f9568:	7c00      	ldrb	r0, [r0, #16]
 23f956a:	f7fd bc7b 	b.w	23f6e64 <HAL_USB_USART_Is_Connected>

023f956e <_Z19acquireSerialBufferv>:
{
 23f956e:	b510      	push	{r4, lr}
 23f9570:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23f9572:	2214      	movs	r2, #20
 23f9574:	2100      	movs	r1, #0
 23f9576:	f003 f8c2 	bl	23fc6fe <memset>
}
 23f957a:	4620      	mov	r0, r4
 23f957c:	bd10      	pop	{r4, pc}
	...

023f9580 <_Z16_fetch_usbserialv>:
{
 23f9580:	b510      	push	{r4, lr}
 23f9582:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23f9584:	a803      	add	r0, sp, #12
 23f9586:	f7ff fff2 	bl	23f956e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23f958a:	4c0c      	ldr	r4, [pc, #48]	; (23f95bc <_Z16_fetch_usbserialv+0x3c>)
 23f958c:	e8d4 1f8f 	ldab	r1, [r4]
 23f9590:	f011 0101 	ands.w	r1, r1, #1
 23f9594:	d10f      	bne.n	23f95b6 <_Z16_fetch_usbserialv+0x36>
 23f9596:	4620      	mov	r0, r4
 23f9598:	9101      	str	r1, [sp, #4]
 23f959a:	f7fe f829 	bl	23f75f0 <__cxa_guard_acquire>
 23f959e:	9901      	ldr	r1, [sp, #4]
 23f95a0:	b148      	cbz	r0, 23f95b6 <_Z16_fetch_usbserialv+0x36>
 23f95a2:	aa03      	add	r2, sp, #12
 23f95a4:	4806      	ldr	r0, [pc, #24]	; (23f95c0 <_Z16_fetch_usbserialv+0x40>)
 23f95a6:	f7ff ffc7 	bl	23f9538 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23f95aa:	4620      	mov	r0, r4
 23f95ac:	f7fe f82e 	bl	23f760c <__cxa_guard_release>
 23f95b0:	4804      	ldr	r0, [pc, #16]	; (23f95c4 <_Z16_fetch_usbserialv+0x44>)
 23f95b2:	f003 f857 	bl	23fc664 <atexit>
	return _usbserial;
}
 23f95b6:	4802      	ldr	r0, [pc, #8]	; (23f95c0 <_Z16_fetch_usbserialv+0x40>)
 23f95b8:	b008      	add	sp, #32
 23f95ba:	bd10      	pop	{r4, pc}
 23f95bc:	1007af80 	.word	0x1007af80
 23f95c0:	1007af84 	.word	0x1007af84
 23f95c4:	023f94bf 	.word	0x023f94bf

023f95c8 <_ZN8particle13WatchdogClass4initERKNS_21WatchdogConfigurationE>:
LOG_SOURCE_CATEGORY("wiring.watchdog")

namespace particle {

int WatchdogClass::init(const WatchdogConfiguration& config) {
    instance_ = config.watchdogInstance();
 23f95c8:	2200      	movs	r2, #0
 23f95ca:	7402      	strb	r2, [r0, #16]
    return hal_watchdog_set_config(instance_, config.halConfig(), nullptr);
 23f95cc:	4610      	mov	r0, r2
 23f95ce:	f7fd bc57 	b.w	23f6e80 <hal_watchdog_set_config>

023f95d2 <_ZN8particle13WatchdogClass5startEv>:
}

int WatchdogClass::start() {
    return hal_watchdog_start(instance_, nullptr);
 23f95d2:	2100      	movs	r1, #0
 23f95d4:	7c00      	ldrb	r0, [r0, #16]
 23f95d6:	f7fd bc61 	b.w	23f6e9c <hal_watchdog_start>

023f95da <_ZN8particle13WatchdogClass7refreshEv>:
int WatchdogClass::stop() {
    return hal_watchdog_stop(instance_, nullptr);
}

int WatchdogClass::refresh() {
    return hal_watchdog_refresh(instance_, nullptr);
 23f95da:	2100      	movs	r1, #0
 23f95dc:	7c00      	ldrb	r0, [r0, #16]
 23f95de:	f7fd bc6b 	b.w	23f6eb8 <hal_watchdog_refresh>

023f95e2 <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
 23f95e2:	4770      	bx	lr

023f95e4 <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
 23f95e4:	2001      	movs	r0, #1
 23f95e6:	4770      	bx	lr

023f95e8 <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv>:
                results[index++] = *result;
            }
        }

    protected:
        static void callback(WiFiAccessPoint* result, void* cookie)
 23f95e8:	b530      	push	{r4, r5, lr}
            if (index<count) {
 23f95ea:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
 23f95ee:	4293      	cmp	r3, r2
 23f95f0:	da10      	bge.n	23f9614 <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv+0x2c>
                results[index++] = *result;
 23f95f2:	1c5a      	adds	r2, r3, #1
 23f95f4:	604a      	str	r2, [r1, #4]
 23f95f6:	2238      	movs	r2, #56	; 0x38
 23f95f8:	4604      	mov	r4, r0
 23f95fa:	680d      	ldr	r5, [r1, #0]
 23f95fc:	fb02 5503 	mla	r5, r2, r3, r5
 23f9600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f9602:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f9604:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f9606:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f9608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f960a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f960c:	e894 0003 	ldmia.w	r4, {r0, r1}
 23f9610:	e885 0003 	stmia.w	r5, {r0, r1}
        {
            ((APArrayPopulator*)cookie)->addResult(result);
        }
 23f9614:	bd30      	pop	{r4, r5, pc}

023f9616 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23f9616:	2200      	movs	r2, #0
 23f9618:	6840      	ldr	r0, [r0, #4]
 23f961a:	4611      	mov	r1, r2
 23f961c:	f7fd be44 	b.w	23f72a8 <network_ready>

023f9620 <_ZN10WiFiSignalD0Ev>:
    virtual ~WiFiSignal() {};
 23f9620:	b510      	push	{r4, lr}
 23f9622:	4604      	mov	r4, r0
 23f9624:	2124      	movs	r1, #36	; 0x24
 23f9626:	f7ea ff00 	bl	23e442a <_ZdlPvj>
 23f962a:	4620      	mov	r0, r4
 23f962c:	bd10      	pop	{r4, pc}

023f962e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23f962e:	2200      	movs	r2, #0
 23f9630:	6840      	ldr	r0, [r0, #4]
 23f9632:	4611      	mov	r1, r2
 23f9634:	f7fd be70 	b.w	23f7318 <network_listening>

023f9638 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23f9638:	2200      	movs	r2, #0
 23f963a:	6840      	ldr	r0, [r0, #4]
 23f963c:	4611      	mov	r1, r2
 23f963e:	f7fd bea3 	b.w	23f7388 <network_get_listen_timeout>

023f9642 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23f9642:	2200      	movs	r2, #0
 23f9644:	6840      	ldr	r0, [r0, #4]
 23f9646:	f7fd be91 	b.w	23f736c <network_set_listen_timeout>

023f964a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23f964a:	2200      	movs	r2, #0
 23f964c:	6840      	ldr	r0, [r0, #4]
 23f964e:	f081 0101 	eor.w	r1, r1, #1
 23f9652:	f7fd be53 	b.w	23f72fc <network_listen>

023f9656 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23f9656:	2300      	movs	r3, #0
 23f9658:	6840      	ldr	r0, [r0, #4]
 23f965a:	461a      	mov	r2, r3
 23f965c:	4619      	mov	r1, r3
 23f965e:	f7fd be3f 	b.w	23f72e0 <network_off>

023f9662 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23f9662:	2300      	movs	r3, #0
 23f9664:	6840      	ldr	r0, [r0, #4]
 23f9666:	461a      	mov	r2, r3
 23f9668:	4619      	mov	r1, r3
 23f966a:	f7fd be2b 	b.w	23f72c4 <network_on>

023f966e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23f966e:	2200      	movs	r2, #0
 23f9670:	6840      	ldr	r0, [r0, #4]
 23f9672:	4611      	mov	r1, r2
 23f9674:	f7fd bdfc 	b.w	23f7270 <network_connecting>

023f9678 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23f9678:	2200      	movs	r2, #0
 23f967a:	2102      	movs	r1, #2
 23f967c:	6840      	ldr	r0, [r0, #4]
 23f967e:	f7fd be05 	b.w	23f728c <network_disconnect>

023f9682 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23f9682:	2300      	movs	r3, #0
 23f9684:	6840      	ldr	r0, [r0, #4]
 23f9686:	461a      	mov	r2, r3
 23f9688:	f7fd bde4 	b.w	23f7254 <network_connect>

023f968c <_ZNK10WiFiSignal11getStrengthEv>:
    if (inf_.size != 0 && inf_.strength >= 0) {
 23f968c:	8983      	ldrh	r3, [r0, #12]
 23f968e:	b17b      	cbz	r3, 23f96b0 <_ZNK10WiFiSignal11getStrengthEv+0x24>
 23f9690:	6943      	ldr	r3, [r0, #20]
 23f9692:	2b00      	cmp	r3, #0
 23f9694:	db0c      	blt.n	23f96b0 <_ZNK10WiFiSignal11getStrengthEv+0x24>
        return inf_.strength / 65535.0f * 100.0f;
 23f9696:	ee07 3a90 	vmov	s15, r3
 23f969a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 23f96b8 <_ZNK10WiFiSignal11getStrengthEv+0x2c>
 23f969e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f96a2:	ee87 0a87 	vdiv.f32	s0, s15, s14
 23f96a6:	eddf 7a05 	vldr	s15, [pc, #20]	; 23f96bc <_ZNK10WiFiSignal11getStrengthEv+0x30>
 23f96aa:	ee20 0a27 	vmul.f32	s0, s0, s15
 23f96ae:	4770      	bx	lr
    return -1.0f;
 23f96b0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
 23f96b4:	4770      	bx	lr
 23f96b6:	bf00      	nop
 23f96b8:	477fff00 	.word	0x477fff00
 23f96bc:	42c80000 	.word	0x42c80000

023f96c0 <_ZNK10WiFiSignal16getStrengthValueEv>:
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
 23f96c0:	8983      	ldrh	r3, [r0, #12]
 23f96c2:	b163      	cbz	r3, 23f96de <_ZNK10WiFiSignal16getStrengthValueEv+0x1e>
 23f96c4:	6903      	ldr	r3, [r0, #16]
 23f96c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23f96ca:	d008      	beq.n	23f96de <_ZNK10WiFiSignal16getStrengthValueEv+0x1e>
        return inf_.rssi / 100.0f;
 23f96cc:	ee07 3a90 	vmov	s15, r3
 23f96d0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 23f96e4 <_ZNK10WiFiSignal16getStrengthValueEv+0x24>
 23f96d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f96d8:	ee87 0a87 	vdiv.f32	s0, s15, s14
 23f96dc:	4770      	bx	lr
    return 0.0f;
 23f96de:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23f96e8 <_ZNK10WiFiSignal16getStrengthValueEv+0x28>
}
 23f96e2:	4770      	bx	lr
 23f96e4:	42c80000 	.word	0x42c80000
 23f96e8:	00000000 	.word	0x00000000

023f96ec <_ZNK10WiFiSignal10getQualityEv>:
    if (inf_.size != 0 && inf_.quality >= 0) {
 23f96ec:	8983      	ldrh	r3, [r0, #12]
 23f96ee:	b17b      	cbz	r3, 23f9710 <_ZNK10WiFiSignal10getQualityEv+0x24>
 23f96f0:	6a03      	ldr	r3, [r0, #32]
 23f96f2:	2b00      	cmp	r3, #0
 23f96f4:	db0c      	blt.n	23f9710 <_ZNK10WiFiSignal10getQualityEv+0x24>
        return inf_.quality / 65535.0f * 100.0f;
 23f96f6:	ee07 3a90 	vmov	s15, r3
 23f96fa:	ed9f 7a07 	vldr	s14, [pc, #28]	; 23f9718 <_ZNK10WiFiSignal10getQualityEv+0x2c>
 23f96fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f9702:	ee87 0a87 	vdiv.f32	s0, s15, s14
 23f9706:	eddf 7a05 	vldr	s15, [pc, #20]	; 23f971c <_ZNK10WiFiSignal10getQualityEv+0x30>
 23f970a:	ee20 0a27 	vmul.f32	s0, s0, s15
 23f970e:	4770      	bx	lr
    return -1.0f;
 23f9710:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
 23f9714:	4770      	bx	lr
 23f9716:	bf00      	nop
 23f9718:	477fff00 	.word	0x477fff00
 23f971c:	42c80000 	.word	0x42c80000

023f9720 <_ZNK10WiFiSignal15getQualityValueEv>:
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
 23f9720:	8983      	ldrh	r3, [r0, #12]
 23f9722:	b163      	cbz	r3, 23f973e <_ZNK10WiFiSignal15getQualityValueEv+0x1e>
 23f9724:	6983      	ldr	r3, [r0, #24]
 23f9726:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23f972a:	d008      	beq.n	23f973e <_ZNK10WiFiSignal15getQualityValueEv+0x1e>
        return inf_.snr / 100.0f;
 23f972c:	ee07 3a90 	vmov	s15, r3
 23f9730:	ed9f 7a04 	vldr	s14, [pc, #16]	; 23f9744 <_ZNK10WiFiSignal15getQualityValueEv+0x24>
 23f9734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f9738:	ee87 0a87 	vdiv.f32	s0, s15, s14
 23f973c:	4770      	bx	lr
    return 0.0f;
 23f973e:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23f9748 <_ZNK10WiFiSignal15getQualityValueEv+0x28>
}
 23f9742:	4770      	bx	lr
 23f9744:	42c80000 	.word	0x42c80000
 23f9748:	00000000 	.word	0x00000000

023f974c <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
 23f974c:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
 23f974e:	460c      	mov	r4, r1
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
 23f9750:	4606      	mov	r6, r0
    inf_ = inf;
 23f9752:	f100 050c 	add.w	r5, r0, #12
 23f9756:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f9758:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f975a:	e894 0003 	ldmia.w	r4, {r0, r1}
 23f975e:	e885 0003 	stmia.w	r5, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
 23f9762:	6933      	ldr	r3, [r6, #16]
}
 23f9764:	2001      	movs	r0, #1
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
 23f9766:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23f976a:	bf16      	itet	ne
 23f976c:	2264      	movne	r2, #100	; 0x64
 23f976e:	2302      	moveq	r3, #2
 23f9770:	fb93 f3f2 	sdivne	r3, r3, r2
 23f9774:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
 23f9776:	69b3      	ldr	r3, [r6, #24]
 23f9778:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23f977c:	bf16      	itet	ne
 23f977e:	2264      	movne	r2, #100	; 0x64
 23f9780:	2300      	moveq	r3, #0
 23f9782:	fb93 f3f2 	sdivne	r3, r3, r2
 23f9786:	60b3      	str	r3, [r6, #8]
}
 23f9788:	bd70      	pop	{r4, r5, r6, pc}
	...

023f978c <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>:
        APScan apScan(results, result_count);
        return apScan.start();
    }

#if !HAL_PLATFORM_WIFI_SCAN_ONLY
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
 23f978c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
            this->index = 0;
 23f978e:	2300      	movs	r3, #0
            this->results = results;
 23f9790:	9101      	str	r1, [sp, #4]
            return std::min(count, wlan_get_credentials(callback, this));
 23f9792:	4806      	ldr	r0, [pc, #24]	; (23f97ac <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj+0x20>)
 23f9794:	a901      	add	r1, sp, #4
            this->index = 0;
 23f9796:	9302      	str	r3, [sp, #8]
            this->count = size;
 23f9798:	9203      	str	r2, [sp, #12]
            return std::min(count, wlan_get_credentials(callback, this));
 23f979a:	f7fd fb9b 	bl	23f6ed4 <wlan_get_credentials>
        APList apList(results, result_count);
        return apList.start();
    }
 23f979e:	9b03      	ldr	r3, [sp, #12]
 23f97a0:	4298      	cmp	r0, r3
 23f97a2:	bfa8      	it	ge
 23f97a4:	4618      	movge	r0, r3
 23f97a6:	b005      	add	sp, #20
 23f97a8:	f85d fb04 	ldr.w	pc, [sp], #4
 23f97ac:	023f95e9 	.word	0x023f95e9

023f97b0 <_ZN5spark9WiFiClass4RSSIEv>:

    WiFiSignal WiFiClass::RSSI() {
 23f97b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    WiFiSignal() {}
 23f97b4:	2500      	movs	r5, #0
 23f97b6:	f04f 0802 	mov.w	r8, #2
 23f97ba:	2618      	movs	r6, #24
 23f97bc:	460f      	mov	r7, r1
 23f97be:	4b14      	ldr	r3, [pc, #80]	; (23f9810 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
 23f97c0:	4632      	mov	r2, r6
 23f97c2:	4629      	mov	r1, r5
 23f97c4:	e9c0 8501 	strd	r8, r5, [r0, #4]
 23f97c8:	b086      	sub	sp, #24
 23f97ca:	6003      	str	r3, [r0, #0]
 23f97cc:	4604      	mov	r4, r0
 23f97ce:	300c      	adds	r0, #12
 23f97d0:	f002 ff95 	bl	23fc6fe <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 23f97d4:	462a      	mov	r2, r5
 23f97d6:	4629      	mov	r1, r5
 23f97d8:	6878      	ldr	r0, [r7, #4]
 23f97da:	f7fd fd65 	bl	23f72a8 <network_ready>
 23f97de:	b180      	cbz	r0, 23f9802 <_ZN5spark9WiFiClass4RSSIEv+0x52>
            return sig;
        }

        wlan_connected_info_t info = {};
 23f97e0:	4632      	mov	r2, r6
 23f97e2:	4629      	mov	r1, r5
 23f97e4:	4668      	mov	r0, sp
 23f97e6:	f002 ff8a 	bl	23fc6fe <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
 23f97ea:	462a      	mov	r2, r5
 23f97ec:	4669      	mov	r1, sp
 23f97ee:	4628      	mov	r0, r5
        info.size = sizeof(info);
 23f97f0:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
 23f97f4:	f7fd fb7c 	bl	23f6ef0 <wlan_connected_info>
        if (r == 0) {
 23f97f8:	b938      	cbnz	r0, 23f980a <_ZN5spark9WiFiClass4RSSIEv+0x5a>
            sig.fromConnectedInfo(info);
 23f97fa:	4669      	mov	r1, sp
 23f97fc:	4620      	mov	r0, r4
 23f97fe:	f7ff ffa5 	bl	23f974c <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
        }

        sig.rssi = 2;
        return sig;
    }
 23f9802:	4620      	mov	r0, r4
 23f9804:	b006      	add	sp, #24
 23f9806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        sig.rssi = 2;
 23f980a:	f8c4 8004 	str.w	r8, [r4, #4]
        return sig;
 23f980e:	e7f8      	b.n	23f9802 <_ZN5spark9WiFiClass4RSSIEv+0x52>
 23f9810:	023ffb18 	.word	0x023ffb18

023f9814 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23f9814:	2205      	movs	r2, #5
 23f9816:	4b02      	ldr	r3, [pc, #8]	; (23f9820 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23f9818:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23f981a:	4a02      	ldr	r2, [pc, #8]	; (23f9824 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23f981c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23f981e:	4770      	bx	lr
 23f9820:	1007af98 	.word	0x1007af98
 23f9824:	023ffad4 	.word	0x023ffad4

023f9828 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23f9828:	4b01      	ldr	r3, [pc, #4]	; (23f9830 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23f982a:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23f982c:	4770      	bx	lr
 23f982e:	bf00      	nop
 23f9830:	1006a1d0 	.word	0x1006a1d0

023f9834 <serialEventRun>:
{
 23f9834:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23f9836:	4b0d      	ldr	r3, [pc, #52]	; (23f986c <serialEventRun+0x38>)
 23f9838:	b143      	cbz	r3, 23f984c <serialEventRun+0x18>
 23f983a:	f7ff fea1 	bl	23f9580 <_Z16_fetch_usbserialv>
 23f983e:	6803      	ldr	r3, [r0, #0]
 23f9840:	691b      	ldr	r3, [r3, #16]
 23f9842:	4798      	blx	r3
 23f9844:	2800      	cmp	r0, #0
 23f9846:	dd01      	ble.n	23f984c <serialEventRun+0x18>
        serialEvent();
 23f9848:	e000      	b.n	23f984c <serialEventRun+0x18>
 23f984a:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23f984c:	4b08      	ldr	r3, [pc, #32]	; (23f9870 <serialEventRun+0x3c>)
 23f984e:	b143      	cbz	r3, 23f9862 <serialEventRun+0x2e>
 23f9850:	f000 f9d2 	bl	23f9bf8 <_Z22__fetch_global_Serial1v>
 23f9854:	6803      	ldr	r3, [r0, #0]
 23f9856:	691b      	ldr	r3, [r3, #16]
 23f9858:	4798      	blx	r3
 23f985a:	2800      	cmp	r0, #0
 23f985c:	dd01      	ble.n	23f9862 <serialEventRun+0x2e>
        serialEvent1();
 23f985e:	e000      	b.n	23f9862 <serialEventRun+0x2e>
 23f9860:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23f9862:	4b04      	ldr	r3, [pc, #16]	; (23f9874 <serialEventRun+0x40>)
 23f9864:	b10b      	cbz	r3, 23f986a <serialEventRun+0x36>
 23f9866:	f000 fa0d 	bl	23f9c84 <_Z15serialEventRun2v>
}
 23f986a:	bd08      	pop	{r3, pc}
	...

023f9878 <_post_loop>:
{
 23f9878:	b508      	push	{r3, lr}
	serialEventRun();
 23f987a:	f7ff ffdb 	bl	23f9834 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23f987e:	f7fc ff7f 	bl	23f6780 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23f9882:	4b01      	ldr	r3, [pc, #4]	; (23f9888 <_post_loop+0x10>)
 23f9884:	6018      	str	r0, [r3, #0]
}
 23f9886:	bd08      	pop	{r3, pc}
 23f9888:	1007afa8 	.word	0x1007afa8

023f988c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23f988c:	4805      	ldr	r0, [pc, #20]	; (23f98a4 <_Z33system_initialize_user_backup_ramv+0x18>)
 23f988e:	4a06      	ldr	r2, [pc, #24]	; (23f98a8 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23f9890:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23f9892:	1a12      	subs	r2, r2, r0
 23f9894:	4905      	ldr	r1, [pc, #20]	; (23f98ac <_Z33system_initialize_user_backup_ramv+0x20>)
 23f9896:	f002 ff25 	bl	23fc6e4 <memcpy>
    __backup_sram_signature = signature;
 23f989a:	4b05      	ldr	r3, [pc, #20]	; (23f98b0 <_Z33system_initialize_user_backup_ramv+0x24>)
 23f989c:	4a05      	ldr	r2, [pc, #20]	; (23f98b4 <_Z33system_initialize_user_backup_ramv+0x28>)
 23f989e:	601a      	str	r2, [r3, #0]
}
 23f98a0:	bd08      	pop	{r3, pc}
 23f98a2:	bf00      	nop
 23f98a4:	1007b400 	.word	0x1007b400
 23f98a8:	1007b404 	.word	0x1007b404
 23f98ac:	085ffe10 	.word	0x085ffe10
 23f98b0:	1007b400 	.word	0x1007b400
 23f98b4:	9a271c1e 	.word	0x9a271c1e

023f98b8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23f98b8:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23f98ba:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23f98bc:	461a      	mov	r2, r3
 23f98be:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23f98c2:	9300      	str	r3, [sp, #0]
 23f98c4:	f7fd fbe6 	bl	23f7094 <system_ctrl_set_result>
}
 23f98c8:	b003      	add	sp, #12
 23f98ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023f98d0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23f98d0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23f98d2:	8843      	ldrh	r3, [r0, #2]
 23f98d4:	2b0a      	cmp	r3, #10
 23f98d6:	d008      	beq.n	23f98ea <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23f98d8:	2b50      	cmp	r3, #80	; 0x50
 23f98da:	d10b      	bne.n	23f98f4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23f98dc:	4b09      	ldr	r3, [pc, #36]	; (23f9904 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23f98de:	681b      	ldr	r3, [r3, #0]
 23f98e0:	b14b      	cbz	r3, 23f98f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23f98e2:	b003      	add	sp, #12
 23f98e4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23f98e8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23f98ea:	f7ff ffe5 	bl	23f98b8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23f98ee:	b003      	add	sp, #12
 23f98f0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23f98f4:	2300      	movs	r3, #0
 23f98f6:	461a      	mov	r2, r3
 23f98f8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23f98fc:	9300      	str	r3, [sp, #0]
 23f98fe:	f7fd fbc9 	bl	23f7094 <system_ctrl_set_result>
}
 23f9902:	e7f4      	b.n	23f98ee <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23f9904:	1007afa4 	.word	0x1007afa4

023f9908 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23f9908:	2100      	movs	r1, #0
{
 23f990a:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23f990c:	4811      	ldr	r0, [pc, #68]	; (23f9954 <module_user_init_hook+0x4c>)
 23f990e:	f7fd fe29 	bl	23f7564 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23f9912:	4b11      	ldr	r3, [pc, #68]	; (23f9958 <module_user_init_hook+0x50>)
 23f9914:	681a      	ldr	r2, [r3, #0]
 23f9916:	4b11      	ldr	r3, [pc, #68]	; (23f995c <module_user_init_hook+0x54>)
 23f9918:	429a      	cmp	r2, r3
 23f991a:	bf0c      	ite	eq
 23f991c:	2201      	moveq	r2, #1
 23f991e:	2200      	movne	r2, #0
 23f9920:	4b0f      	ldr	r3, [pc, #60]	; (23f9960 <module_user_init_hook+0x58>)
 23f9922:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23f9924:	d001      	beq.n	23f992a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23f9926:	f7ff ffb1 	bl	23f988c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23f992a:	f7fc ff0d 	bl	23f6748 <HAL_RNG_GetRandomNumber>
 23f992e:	4604      	mov	r4, r0
    srand(seed);
 23f9930:	f002 feee 	bl	23fc710 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23f9934:	4b0b      	ldr	r3, [pc, #44]	; (23f9964 <module_user_init_hook+0x5c>)
 23f9936:	b113      	cbz	r3, 23f993e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23f9938:	4620      	mov	r0, r4
 23f993a:	e000      	b.n	23f993e <module_user_init_hook+0x36>
 23f993c:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23f993e:	2100      	movs	r1, #0
 23f9940:	4808      	ldr	r0, [pc, #32]	; (23f9964 <module_user_init_hook+0x5c>)
 23f9942:	f7fd fc5d 	bl	23f7200 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23f9946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23f994a:	2100      	movs	r1, #0
 23f994c:	4806      	ldr	r0, [pc, #24]	; (23f9968 <module_user_init_hook+0x60>)
 23f994e:	f7fd bb93 	b.w	23f7078 <system_ctrl_set_app_request_handler>
 23f9952:	bf00      	nop
 23f9954:	023f9829 	.word	0x023f9829
 23f9958:	1007b400 	.word	0x1007b400
 23f995c:	9a271c1e 	.word	0x9a271c1e
 23f9960:	1007afa0 	.word	0x1007afa0
 23f9964:	00000000 	.word	0x00000000
 23f9968:	023f98d1 	.word	0x023f98d1

023f996c <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
 23f996c:	b509      	push	{r0, r3, lr}
 23f996e:	4804      	ldr	r0, [pc, #16]	; (23f9980 <spark_protocol_instance+0x14>)
 23f9970:	6800      	ldr	r0, [r0, #0]
 23f9972:	4b04      	ldr	r3, [pc, #16]	; (23f9984 <spark_protocol_instance+0x18>)
 23f9974:	4403      	add	r3, r0
 23f9976:	681b      	ldr	r3, [r3, #0]
 23f9978:	681b      	ldr	r3, [r3, #0]
 23f997a:	9302      	str	r3, [sp, #8]
 23f997c:	bd09      	pop	{r0, r3, pc}
 23f997e:	0000      	.short	0x0000
 23f9980:	1006a0f0 	.word	0x1006a0f0
 23f9984:	00000044 	.word	0x00000044

023f9988 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
 23f9988:	b509      	push	{r0, r3, lr}
 23f998a:	4804      	ldr	r0, [pc, #16]	; (23f999c <spark_protocol_set_product_id+0x14>)
 23f998c:	6800      	ldr	r0, [r0, #0]
 23f998e:	4b04      	ldr	r3, [pc, #16]	; (23f99a0 <spark_protocol_set_product_id+0x18>)
 23f9990:	4403      	add	r3, r0
 23f9992:	681b      	ldr	r3, [r3, #0]
 23f9994:	685b      	ldr	r3, [r3, #4]
 23f9996:	9302      	str	r3, [sp, #8]
 23f9998:	bd09      	pop	{r0, r3, pc}
 23f999a:	0000      	.short	0x0000
 23f999c:	1006a0f0 	.word	0x1006a0f0
 23f99a0:	00000044 	.word	0x00000044

023f99a4 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
 23f99a4:	b509      	push	{r0, r3, lr}
 23f99a6:	4804      	ldr	r0, [pc, #16]	; (23f99b8 <spark_protocol_set_product_firmware_version+0x14>)
 23f99a8:	6800      	ldr	r0, [r0, #0]
 23f99aa:	4b04      	ldr	r3, [pc, #16]	; (23f99bc <spark_protocol_set_product_firmware_version+0x18>)
 23f99ac:	4403      	add	r3, r0
 23f99ae:	681b      	ldr	r3, [r3, #0]
 23f99b0:	689b      	ldr	r3, [r3, #8]
 23f99b2:	9302      	str	r3, [sp, #8]
 23f99b4:	bd09      	pop	{r0, r3, pc}
 23f99b6:	0000      	.short	0x0000
 23f99b8:	1006a0f0 	.word	0x1006a0f0
 23f99bc:	00000044 	.word	0x00000044

023f99c0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23f99c0:	282c      	cmp	r0, #44	; 0x2c
bool pinAvailable(uint16_t pin) {
 23f99c2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
 23f99c4:	d902      	bls.n	23f99cc <pinAvailable+0xc>
    return false;
 23f99c6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23f99c8:	b002      	add	sp, #8
 23f99ca:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23f99cc:	f1a0 030b 	sub.w	r3, r0, #11
 23f99d0:	2b02      	cmp	r3, #2
 23f99d2:	d819      	bhi.n	23f9a08 <pinAvailable+0x48>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23f99d4:	4c17      	ldr	r4, [pc, #92]	; (23f9a34 <pinAvailable+0x74>)
 23f99d6:	e8d4 1f8f 	ldab	r1, [r4]
 23f99da:	f011 0101 	ands.w	r1, r1, #1
 23f99de:	d10b      	bne.n	23f99f8 <pinAvailable+0x38>
 23f99e0:	4620      	mov	r0, r4
 23f99e2:	9101      	str	r1, [sp, #4]
 23f99e4:	f7fd fe04 	bl	23f75f0 <__cxa_guard_acquire>
 23f99e8:	9901      	ldr	r1, [sp, #4]
 23f99ea:	b128      	cbz	r0, 23f99f8 <pinAvailable+0x38>
 23f99ec:	4812      	ldr	r0, [pc, #72]	; (23f9a38 <pinAvailable+0x78>)
 23f99ee:	f7ff f8ef 	bl	23f8bd0 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23f99f2:	4620      	mov	r0, r4
 23f99f4:	f7fd fe0a 	bl	23f760c <__cxa_guard_release>
 23f99f8:	4b0f      	ldr	r3, [pc, #60]	; (23f9a38 <pinAvailable+0x78>)
 23f99fa:	7818      	ldrb	r0, [r3, #0]
 23f99fc:	f7fd f8fe 	bl	23f6bfc <hal_spi_is_enabled>
 23f9a00:	2800      	cmp	r0, #0
 23f9a02:	d1e0      	bne.n	23f99c6 <pinAvailable+0x6>
  return true; // 'pin' is available
 23f9a04:	2001      	movs	r0, #1
 23f9a06:	e7df      	b.n	23f99c8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23f9a08:	2801      	cmp	r0, #1
 23f9a0a:	d809      	bhi.n	23f9a20 <pinAvailable+0x60>
 23f9a0c:	f000 f89a 	bl	23f9b44 <_Z19__fetch_global_Wirev>
 23f9a10:	2100      	movs	r1, #0
 23f9a12:	7c00      	ldrb	r0, [r0, #16]
 23f9a14:	f7fd f82e 	bl	23f6a74 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23f9a18:	f080 0001 	eor.w	r0, r0, #1
 23f9a1c:	b2c0      	uxtb	r0, r0
 23f9a1e:	e7d3      	b.n	23f99c8 <pinAvailable+0x8>
 23f9a20:	3809      	subs	r0, #9
 23f9a22:	2801      	cmp	r0, #1
 23f9a24:	d8ee      	bhi.n	23f9a04 <pinAvailable+0x44>
 23f9a26:	f000 f8e7 	bl	23f9bf8 <_Z22__fetch_global_Serial1v>
 23f9a2a:	7c00      	ldrb	r0, [r0, #16]
 23f9a2c:	f7fd f98e 	bl	23f6d4c <hal_usart_is_enabled>
 23f9a30:	e7f2      	b.n	23f9a18 <pinAvailable+0x58>
 23f9a32:	bf00      	nop
 23f9a34:	1006a238 	.word	0x1006a238
 23f9a38:	1006a23c 	.word	0x1006a23c

023f9a3c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23f9a3c:	282c      	cmp	r0, #44	; 0x2c
{
 23f9a3e:	b538      	push	{r3, r4, r5, lr}
 23f9a40:	4604      	mov	r4, r0
 23f9a42:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23f9a44:	d80a      	bhi.n	23f9a5c <pinMode+0x20>
 23f9a46:	29ff      	cmp	r1, #255	; 0xff
 23f9a48:	d008      	beq.n	23f9a5c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23f9a4a:	f7ff ffb9 	bl	23f99c0 <pinAvailable>
 23f9a4e:	b128      	cbz	r0, 23f9a5c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23f9a50:	4629      	mov	r1, r5
 23f9a52:	4620      	mov	r0, r4
}
 23f9a54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23f9a58:	f7fc bf2c 	b.w	23f68b4 <hal_gpio_mode>
}
 23f9a5c:	bd38      	pop	{r3, r4, r5, pc}

023f9a5e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23f9a5e:	b538      	push	{r3, r4, r5, lr}
 23f9a60:	4604      	mov	r4, r0
 23f9a62:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23f9a64:	f7fc ff34 	bl	23f68d0 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23f9a68:	28ff      	cmp	r0, #255	; 0xff
 23f9a6a:	d010      	beq.n	23f9a8e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23f9a6c:	2806      	cmp	r0, #6
 23f9a6e:	d804      	bhi.n	23f9a7a <digitalWrite+0x1c>
 23f9a70:	234d      	movs	r3, #77	; 0x4d
 23f9a72:	fa23 f000 	lsr.w	r0, r3, r0
 23f9a76:	07c3      	lsls	r3, r0, #31
 23f9a78:	d409      	bmi.n	23f9a8e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23f9a7a:	4620      	mov	r0, r4
 23f9a7c:	f7ff ffa0 	bl	23f99c0 <pinAvailable>
 23f9a80:	b128      	cbz	r0, 23f9a8e <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23f9a82:	4629      	mov	r1, r5
 23f9a84:	4620      	mov	r0, r4
}
 23f9a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23f9a8a:	f7fc bf2f 	b.w	23f68ec <hal_gpio_write>
}
 23f9a8e:	bd38      	pop	{r3, r4, r5, pc}

023f9a90 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
 23f9a90:	b510      	push	{r4, lr}
 23f9a92:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
 23f9a94:	f7fc ff1c 	bl	23f68d0 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 23f9a98:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 23f9a9a:	b2db      	uxtb	r3, r3
 23f9a9c:	2b01      	cmp	r3, #1
 23f9a9e:	d908      	bls.n	23f9ab2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 23f9aa0:	4620      	mov	r0, r4
 23f9aa2:	f7ff ff8d 	bl	23f99c0 <pinAvailable>
 23f9aa6:	b120      	cbz	r0, 23f9ab2 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
 23f9aa8:	4620      	mov	r0, r4
}
 23f9aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
 23f9aae:	f7fc bf2b 	b.w	23f6908 <hal_gpio_read>
}
 23f9ab2:	2000      	movs	r0, #0
 23f9ab4:	bd10      	pop	{r4, pc}

023f9ab6 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(hal_pin_t pin)
{
 23f9ab6:	b510      	push	{r4, lr}
 23f9ab8:	4604      	mov	r4, r0
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
 23f9aba:	f7ff ff81 	bl	23f99c0 <pinAvailable>
 23f9abe:	b150      	cbz	r0, 23f9ad6 <analogRead+0x20>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
 23f9ac0:	2103      	movs	r1, #3
 23f9ac2:	4620      	mov	r0, r4
 23f9ac4:	f7fc fee8 	bl	23f6898 <hal_pin_validate_function>
 23f9ac8:	2803      	cmp	r0, #3
 23f9aca:	d104      	bne.n	23f9ad6 <analogRead+0x20>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 23f9acc:	4620      	mov	r0, r4
}
 23f9ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 23f9ad2:	f7fc bf43 	b.w	23f695c <hal_adc_read>
}
 23f9ad6:	2000      	movs	r0, #0
 23f9ad8:	bd10      	pop	{r4, pc}
	...

023f9adc <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 23f9adc:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 23f9ade:	4c08      	ldr	r4, [pc, #32]	; (23f9b00 <_Z21__fetch_global_EEPROMv+0x24>)
 23f9ae0:	e8d4 3f8f 	ldab	r3, [r4]
 23f9ae4:	07db      	lsls	r3, r3, #31
 23f9ae6:	d408      	bmi.n	23f9afa <_Z21__fetch_global_EEPROMv+0x1e>
 23f9ae8:	4620      	mov	r0, r4
 23f9aea:	f7fd fd81 	bl	23f75f0 <__cxa_guard_acquire>
 23f9aee:	b120      	cbz	r0, 23f9afa <_Z21__fetch_global_EEPROMv+0x1e>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 23f9af0:	f7fc fe54 	bl	23f679c <HAL_EEPROM_Init>
 23f9af4:	4620      	mov	r0, r4
 23f9af6:	f7fd fd89 	bl	23f760c <__cxa_guard_release>
	return eeprom;
}
 23f9afa:	4802      	ldr	r0, [pc, #8]	; (23f9b04 <_Z21__fetch_global_EEPROMv+0x28>)
 23f9afc:	bd10      	pop	{r4, pc}
 23f9afe:	bf00      	nop
 23f9b00:	1007afac 	.word	0x1007afac
 23f9b04:	1007afb0 	.word	0x1007afb0

023f9b08 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23f9b08:	4770      	bx	lr
	...

023f9b0c <_Z17acquireWireBufferv>:
{
 23f9b0c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23f9b0e:	4b0b      	ldr	r3, [pc, #44]	; (23f9b3c <_Z17acquireWireBufferv+0x30>)
{
 23f9b10:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23f9b12:	6003      	str	r3, [r0, #0]
 23f9b14:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23f9b16:	490a      	ldr	r1, [pc, #40]	; (23f9b40 <_Z17acquireWireBufferv+0x34>)
	hal_i2c_config_t config = {
 23f9b18:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23f9b1a:	f44f 7000 	mov.w	r0, #512	; 0x200
 23f9b1e:	f000 f8c5 	bl	23f9cac <_ZnajRKSt9nothrow_t>
	};
 23f9b22:	f44f 7500 	mov.w	r5, #512	; 0x200
 23f9b26:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23f9b28:	4905      	ldr	r1, [pc, #20]	; (23f9b40 <_Z17acquireWireBufferv+0x34>)
 23f9b2a:	4628      	mov	r0, r5
	};
 23f9b2c:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23f9b2e:	f000 f8bd 	bl	23f9cac <_ZnajRKSt9nothrow_t>
	};
 23f9b32:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23f9b36:	4620      	mov	r0, r4
 23f9b38:	bd38      	pop	{r3, r4, r5, pc}
 23f9b3a:	bf00      	nop
 23f9b3c:	00010018 	.word	0x00010018
 23f9b40:	023ffb34 	.word	0x023ffb34

023f9b44 <_Z19__fetch_global_Wirev>:
{
 23f9b44:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23f9b46:	4d0e      	ldr	r5, [pc, #56]	; (23f9b80 <_Z19__fetch_global_Wirev+0x3c>)
{
 23f9b48:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23f9b4a:	e8d5 1f8f 	ldab	r1, [r5]
 23f9b4e:	f011 0401 	ands.w	r4, r1, #1
 23f9b52:	d111      	bne.n	23f9b78 <_Z19__fetch_global_Wirev+0x34>
 23f9b54:	4628      	mov	r0, r5
 23f9b56:	f7fd fd4b 	bl	23f75f0 <__cxa_guard_acquire>
 23f9b5a:	b168      	cbz	r0, 23f9b78 <_Z19__fetch_global_Wirev+0x34>
 23f9b5c:	4668      	mov	r0, sp
 23f9b5e:	f7ff ffd5 	bl	23f9b0c <_Z17acquireWireBufferv>
 23f9b62:	466a      	mov	r2, sp
 23f9b64:	4621      	mov	r1, r4
 23f9b66:	4807      	ldr	r0, [pc, #28]	; (23f9b84 <_Z19__fetch_global_Wirev+0x40>)
 23f9b68:	f7fe fb00 	bl	23f816c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23f9b6c:	4628      	mov	r0, r5
 23f9b6e:	f7fd fd4d 	bl	23f760c <__cxa_guard_release>
 23f9b72:	4805      	ldr	r0, [pc, #20]	; (23f9b88 <_Z19__fetch_global_Wirev+0x44>)
 23f9b74:	f002 fd76 	bl	23fc664 <atexit>
	return wire;
}
 23f9b78:	4802      	ldr	r0, [pc, #8]	; (23f9b84 <_Z19__fetch_global_Wirev+0x40>)
 23f9b7a:	b007      	add	sp, #28
 23f9b7c:	bd30      	pop	{r4, r5, pc}
 23f9b7e:	bf00      	nop
 23f9b80:	1007afb4 	.word	0x1007afb4
 23f9b84:	1007afb8 	.word	0x1007afb8
 23f9b88:	023f9b09 	.word	0x023f9b09

023f9b8c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23f9b8c:	4770      	bx	lr

023f9b8e <__tcf_1>:
 23f9b8e:	4770      	bx	lr

023f9b90 <_Z20acquireSerial1Bufferv>:
{
 23f9b90:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23f9b92:	2514      	movs	r5, #20
{
 23f9b94:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23f9b96:	462a      	mov	r2, r5
 23f9b98:	2100      	movs	r1, #0
 23f9b9a:	f002 fdb0 	bl	23fc6fe <memset>
 23f9b9e:	8025      	strh	r5, [r4, #0]
 23f9ba0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23f9ba2:	4907      	ldr	r1, [pc, #28]	; (23f9bc0 <_Z20acquireSerial1Bufferv+0x30>)
 23f9ba4:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23f9ba6:	8125      	strh	r5, [r4, #8]
 23f9ba8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23f9baa:	f000 f87f 	bl	23f9cac <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23f9bae:	4904      	ldr	r1, [pc, #16]	; (23f9bc0 <_Z20acquireSerial1Bufferv+0x30>)
    };
 23f9bb0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23f9bb2:	4628      	mov	r0, r5
 23f9bb4:	f000 f87a 	bl	23f9cac <_ZnajRKSt9nothrow_t>
    };
 23f9bb8:	60e0      	str	r0, [r4, #12]
}
 23f9bba:	4620      	mov	r0, r4
 23f9bbc:	bd38      	pop	{r3, r4, r5, pc}
 23f9bbe:	bf00      	nop
 23f9bc0:	023ffb34 	.word	0x023ffb34

023f9bc4 <_Z20acquireSerial2Bufferv>:
 23f9bc4:	b538      	push	{r3, r4, r5, lr}
 23f9bc6:	2514      	movs	r5, #20
 23f9bc8:	4604      	mov	r4, r0
 23f9bca:	462a      	mov	r2, r5
 23f9bcc:	2100      	movs	r1, #0
 23f9bce:	f002 fd96 	bl	23fc6fe <memset>
 23f9bd2:	8025      	strh	r5, [r4, #0]
 23f9bd4:	2540      	movs	r5, #64	; 0x40
 23f9bd6:	4907      	ldr	r1, [pc, #28]	; (23f9bf4 <_Z20acquireSerial2Bufferv+0x30>)
 23f9bd8:	4628      	mov	r0, r5
 23f9bda:	8125      	strh	r5, [r4, #8]
 23f9bdc:	8225      	strh	r5, [r4, #16]
 23f9bde:	f000 f865 	bl	23f9cac <_ZnajRKSt9nothrow_t>
 23f9be2:	4904      	ldr	r1, [pc, #16]	; (23f9bf4 <_Z20acquireSerial2Bufferv+0x30>)
 23f9be4:	6060      	str	r0, [r4, #4]
 23f9be6:	4628      	mov	r0, r5
 23f9be8:	f000 f860 	bl	23f9cac <_ZnajRKSt9nothrow_t>
 23f9bec:	60e0      	str	r0, [r4, #12]
 23f9bee:	4620      	mov	r0, r4
 23f9bf0:	bd38      	pop	{r3, r4, r5, pc}
 23f9bf2:	bf00      	nop
 23f9bf4:	023ffb34 	.word	0x023ffb34

023f9bf8 <_Z22__fetch_global_Serial1v>:
{
 23f9bf8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23f9bfa:	4d0e      	ldr	r5, [pc, #56]	; (23f9c34 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23f9bfc:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23f9bfe:	e8d5 1f8f 	ldab	r1, [r5]
 23f9c02:	f011 0401 	ands.w	r4, r1, #1
 23f9c06:	d111      	bne.n	23f9c2c <_Z22__fetch_global_Serial1v+0x34>
 23f9c08:	4628      	mov	r0, r5
 23f9c0a:	f7fd fcf1 	bl	23f75f0 <__cxa_guard_acquire>
 23f9c0e:	b168      	cbz	r0, 23f9c2c <_Z22__fetch_global_Serial1v+0x34>
 23f9c10:	a801      	add	r0, sp, #4
 23f9c12:	f7ff ffbd 	bl	23f9b90 <_Z20acquireSerial1Bufferv>
 23f9c16:	4621      	mov	r1, r4
 23f9c18:	aa01      	add	r2, sp, #4
 23f9c1a:	4807      	ldr	r0, [pc, #28]	; (23f9c38 <_Z22__fetch_global_Serial1v+0x40>)
 23f9c1c:	f7ff fc36 	bl	23f948c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23f9c20:	4628      	mov	r0, r5
 23f9c22:	f7fd fcf3 	bl	23f760c <__cxa_guard_release>
 23f9c26:	4805      	ldr	r0, [pc, #20]	; (23f9c3c <_Z22__fetch_global_Serial1v+0x44>)
 23f9c28:	f002 fd1c 	bl	23fc664 <atexit>
    return serial1;
}
 23f9c2c:	4802      	ldr	r0, [pc, #8]	; (23f9c38 <_Z22__fetch_global_Serial1v+0x40>)
 23f9c2e:	b007      	add	sp, #28
 23f9c30:	bd30      	pop	{r4, r5, pc}
 23f9c32:	bf00      	nop
 23f9c34:	1007afcc 	.word	0x1007afcc
 23f9c38:	1007afd4 	.word	0x1007afd4
 23f9c3c:	023f9b8d 	.word	0x023f9b8d

023f9c40 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23f9c40:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23f9c42:	4c0d      	ldr	r4, [pc, #52]	; (23f9c78 <_Z22__fetch_global_Serial2v+0x38>)
{
 23f9c44:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23f9c46:	e8d4 3f8f 	ldab	r3, [r4]
 23f9c4a:	07db      	lsls	r3, r3, #31
 23f9c4c:	d411      	bmi.n	23f9c72 <_Z22__fetch_global_Serial2v+0x32>
 23f9c4e:	4620      	mov	r0, r4
 23f9c50:	f7fd fcce 	bl	23f75f0 <__cxa_guard_acquire>
 23f9c54:	b168      	cbz	r0, 23f9c72 <_Z22__fetch_global_Serial2v+0x32>
 23f9c56:	a801      	add	r0, sp, #4
 23f9c58:	f7ff ffb4 	bl	23f9bc4 <_Z20acquireSerial2Bufferv>
 23f9c5c:	2101      	movs	r1, #1
 23f9c5e:	aa01      	add	r2, sp, #4
 23f9c60:	4806      	ldr	r0, [pc, #24]	; (23f9c7c <_Z22__fetch_global_Serial2v+0x3c>)
 23f9c62:	f7ff fc13 	bl	23f948c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23f9c66:	4620      	mov	r0, r4
 23f9c68:	f7fd fcd0 	bl	23f760c <__cxa_guard_release>
 23f9c6c:	4804      	ldr	r0, [pc, #16]	; (23f9c80 <_Z22__fetch_global_Serial2v+0x40>)
 23f9c6e:	f002 fcf9 	bl	23fc664 <atexit>
	return serial2;
}
 23f9c72:	4802      	ldr	r0, [pc, #8]	; (23f9c7c <_Z22__fetch_global_Serial2v+0x3c>)
 23f9c74:	b006      	add	sp, #24
 23f9c76:	bd10      	pop	{r4, pc}
 23f9c78:	1007afd0 	.word	0x1007afd0
 23f9c7c:	1007afe8 	.word	0x1007afe8
 23f9c80:	023f9b8f 	.word	0x023f9b8f

023f9c84 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23f9c84:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23f9c86:	f7ff ffdb 	bl	23f9c40 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23f9c8a:	4b07      	ldr	r3, [pc, #28]	; (23f9ca8 <_Z15serialEventRun2v+0x24>)
 23f9c8c:	4604      	mov	r4, r0
 23f9c8e:	b153      	cbz	r3, 23f9ca6 <_Z15serialEventRun2v+0x22>
 23f9c90:	f7ff fc10 	bl	23f94b4 <_ZN11USARTSerial9isEnabledEv>
 23f9c94:	b138      	cbz	r0, 23f9ca6 <_Z15serialEventRun2v+0x22>
 23f9c96:	6823      	ldr	r3, [r4, #0]
 23f9c98:	4620      	mov	r0, r4
 23f9c9a:	691b      	ldr	r3, [r3, #16]
 23f9c9c:	4798      	blx	r3
 23f9c9e:	2800      	cmp	r0, #0
 23f9ca0:	dd01      	ble.n	23f9ca6 <_Z15serialEventRun2v+0x22>
        handler();
 23f9ca2:	e000      	b.n	23f9ca6 <_Z15serialEventRun2v+0x22>
 23f9ca4:	bf00      	nop
}
 23f9ca6:	bd10      	pop	{r4, pc}
 23f9ca8:	00000000 	.word	0x00000000

023f9cac <_ZnajRKSt9nothrow_t>:
 23f9cac:	f7ea bbbb 	b.w	23e4426 <_Znaj>

023f9cb0 <_ZSt25__throw_bad_function_callv>:
 23f9cb0:	b508      	push	{r3, lr}
 23f9cb2:	f7fd fc1f 	bl	23f74f4 <abort>
	...

023f9cb8 <atan>:
 23f9cb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f9cbc:	ec55 4b10 	vmov	r4, r5, d0
 23f9cc0:	4bc7      	ldr	r3, [pc, #796]	; (23f9fe0 <atan+0x328>)
 23f9cc2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 23f9cc6:	46aa      	mov	sl, r5
 23f9cc8:	429e      	cmp	r6, r3
 23f9cca:	dd16      	ble.n	23f9cfa <atan+0x42>
 23f9ccc:	4bc5      	ldr	r3, [pc, #788]	; (23f9fe4 <atan+0x32c>)
 23f9cce:	429e      	cmp	r6, r3
 23f9cd0:	dc01      	bgt.n	23f9cd6 <atan+0x1e>
 23f9cd2:	d10a      	bne.n	23f9cea <atan+0x32>
 23f9cd4:	b14c      	cbz	r4, 23f9cea <atan+0x32>
 23f9cd6:	4622      	mov	r2, r4
 23f9cd8:	462b      	mov	r3, r5
 23f9cda:	4620      	mov	r0, r4
 23f9cdc:	4629      	mov	r1, r5
 23f9cde:	f7e9 fb85 	bl	23e33ec <__adddf3>
 23f9ce2:	ec41 0b10 	vmov	d0, r0, r1
 23f9ce6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f9cea:	f1ba 0f00 	cmp.w	sl, #0
 23f9cee:	f340 80bf 	ble.w	23f9e70 <atan+0x1b8>
 23f9cf2:	ed9f 0b9f 	vldr	d0, [pc, #636]	; 23f9f70 <atan+0x2b8>
 23f9cf6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f9cfa:	4bbb      	ldr	r3, [pc, #748]	; (23f9fe8 <atan+0x330>)
 23f9cfc:	429e      	cmp	r6, r3
 23f9cfe:	f300 80ba 	bgt.w	23f9e76 <atan+0x1be>
 23f9d02:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 23f9d06:	429e      	cmp	r6, r3
 23f9d08:	f340 80a0 	ble.w	23f9e4c <atan+0x194>
 23f9d0c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 23f9d10:	4622      	mov	r2, r4
 23f9d12:	462b      	mov	r3, r5
 23f9d14:	4620      	mov	r0, r4
 23f9d16:	4629      	mov	r1, r5
 23f9d18:	f7e9 fd1e 	bl	23e3758 <__aeabi_dmul>
 23f9d1c:	4602      	mov	r2, r0
 23f9d1e:	460b      	mov	r3, r1
 23f9d20:	4680      	mov	r8, r0
 23f9d22:	4689      	mov	r9, r1
 23f9d24:	f7e9 fd18 	bl	23e3758 <__aeabi_dmul>
 23f9d28:	4606      	mov	r6, r0
 23f9d2a:	460f      	mov	r7, r1
 23f9d2c:	a392      	add	r3, pc, #584	; (adr r3, 23f9f78 <atan+0x2c0>)
 23f9d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9d32:	f7e9 fd11 	bl	23e3758 <__aeabi_dmul>
 23f9d36:	a392      	add	r3, pc, #584	; (adr r3, 23f9f80 <atan+0x2c8>)
 23f9d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9d3c:	f7e9 fb56 	bl	23e33ec <__adddf3>
 23f9d40:	4632      	mov	r2, r6
 23f9d42:	463b      	mov	r3, r7
 23f9d44:	f7e9 fd08 	bl	23e3758 <__aeabi_dmul>
 23f9d48:	a38f      	add	r3, pc, #572	; (adr r3, 23f9f88 <atan+0x2d0>)
 23f9d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9d4e:	f7e9 fb4d 	bl	23e33ec <__adddf3>
 23f9d52:	4632      	mov	r2, r6
 23f9d54:	463b      	mov	r3, r7
 23f9d56:	f7e9 fcff 	bl	23e3758 <__aeabi_dmul>
 23f9d5a:	a38d      	add	r3, pc, #564	; (adr r3, 23f9f90 <atan+0x2d8>)
 23f9d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9d60:	f7e9 fb44 	bl	23e33ec <__adddf3>
 23f9d64:	4632      	mov	r2, r6
 23f9d66:	463b      	mov	r3, r7
 23f9d68:	f7e9 fcf6 	bl	23e3758 <__aeabi_dmul>
 23f9d6c:	a38a      	add	r3, pc, #552	; (adr r3, 23f9f98 <atan+0x2e0>)
 23f9d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9d72:	f7e9 fb3b 	bl	23e33ec <__adddf3>
 23f9d76:	4632      	mov	r2, r6
 23f9d78:	463b      	mov	r3, r7
 23f9d7a:	f7e9 fced 	bl	23e3758 <__aeabi_dmul>
 23f9d7e:	a388      	add	r3, pc, #544	; (adr r3, 23f9fa0 <atan+0x2e8>)
 23f9d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9d84:	f7e9 fb32 	bl	23e33ec <__adddf3>
 23f9d88:	4642      	mov	r2, r8
 23f9d8a:	464b      	mov	r3, r9
 23f9d8c:	f7e9 fce4 	bl	23e3758 <__aeabi_dmul>
 23f9d90:	4680      	mov	r8, r0
 23f9d92:	4689      	mov	r9, r1
 23f9d94:	4630      	mov	r0, r6
 23f9d96:	4639      	mov	r1, r7
 23f9d98:	a383      	add	r3, pc, #524	; (adr r3, 23f9fa8 <atan+0x2f0>)
 23f9d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9d9e:	f7e9 fcdb 	bl	23e3758 <__aeabi_dmul>
 23f9da2:	a383      	add	r3, pc, #524	; (adr r3, 23f9fb0 <atan+0x2f8>)
 23f9da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9da8:	f7e9 fb1e 	bl	23e33e8 <__aeabi_dsub>
 23f9dac:	4632      	mov	r2, r6
 23f9dae:	463b      	mov	r3, r7
 23f9db0:	f7e9 fcd2 	bl	23e3758 <__aeabi_dmul>
 23f9db4:	a380      	add	r3, pc, #512	; (adr r3, 23f9fb8 <atan+0x300>)
 23f9db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9dba:	f7e9 fb15 	bl	23e33e8 <__aeabi_dsub>
 23f9dbe:	4632      	mov	r2, r6
 23f9dc0:	463b      	mov	r3, r7
 23f9dc2:	f7e9 fcc9 	bl	23e3758 <__aeabi_dmul>
 23f9dc6:	a37e      	add	r3, pc, #504	; (adr r3, 23f9fc0 <atan+0x308>)
 23f9dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9dcc:	f7e9 fb0c 	bl	23e33e8 <__aeabi_dsub>
 23f9dd0:	4632      	mov	r2, r6
 23f9dd2:	463b      	mov	r3, r7
 23f9dd4:	f7e9 fcc0 	bl	23e3758 <__aeabi_dmul>
 23f9dd8:	a37b      	add	r3, pc, #492	; (adr r3, 23f9fc8 <atan+0x310>)
 23f9dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9dde:	f7e9 fb03 	bl	23e33e8 <__aeabi_dsub>
 23f9de2:	4632      	mov	r2, r6
 23f9de4:	463b      	mov	r3, r7
 23f9de6:	f7e9 fcb7 	bl	23e3758 <__aeabi_dmul>
 23f9dea:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 23f9dee:	4602      	mov	r2, r0
 23f9df0:	460b      	mov	r3, r1
 23f9df2:	4640      	mov	r0, r8
 23f9df4:	4649      	mov	r1, r9
 23f9df6:	d063      	beq.n	23f9ec0 <atan+0x208>
 23f9df8:	4e7c      	ldr	r6, [pc, #496]	; (23f9fec <atan+0x334>)
 23f9dfa:	f7e9 faf7 	bl	23e33ec <__adddf3>
 23f9dfe:	4622      	mov	r2, r4
 23f9e00:	462b      	mov	r3, r5
 23f9e02:	f7e9 fca9 	bl	23e3758 <__aeabi_dmul>
 23f9e06:	4b7a      	ldr	r3, [pc, #488]	; (23f9ff0 <atan+0x338>)
 23f9e08:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
 23f9e0c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 23f9e10:	449b      	add	fp, r3
 23f9e12:	e9db 2300 	ldrd	r2, r3, [fp]
 23f9e16:	f7e9 fae7 	bl	23e33e8 <__aeabi_dsub>
 23f9e1a:	4622      	mov	r2, r4
 23f9e1c:	462b      	mov	r3, r5
 23f9e1e:	f7e9 fae3 	bl	23e33e8 <__aeabi_dsub>
 23f9e22:	4602      	mov	r2, r0
 23f9e24:	460b      	mov	r3, r1
 23f9e26:	e9d6 0100 	ldrd	r0, r1, [r6]
 23f9e2a:	f7e9 fadd 	bl	23e33e8 <__aeabi_dsub>
 23f9e2e:	f1ba 0f00 	cmp.w	sl, #0
 23f9e32:	ec41 0b10 	vmov	d0, r0, r1
 23f9e36:	f6bf af56 	bge.w	23f9ce6 <atan+0x2e>
 23f9e3a:	ee10 1a90 	vmov	r1, s1
 23f9e3e:	4602      	mov	r2, r0
 23f9e40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23f9e44:	ec43 2b10 	vmov	d0, r2, r3
 23f9e48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f9e4c:	a360      	add	r3, pc, #384	; (adr r3, 23f9fd0 <atan+0x318>)
 23f9e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9e52:	ee10 0a10 	vmov	r0, s0
 23f9e56:	4629      	mov	r1, r5
 23f9e58:	f7e9 fac8 	bl	23e33ec <__adddf3>
 23f9e5c:	2200      	movs	r2, #0
 23f9e5e:	4b65      	ldr	r3, [pc, #404]	; (23f9ff4 <atan+0x33c>)
 23f9e60:	f7e9 ff0a 	bl	23e3c78 <__aeabi_dcmpgt>
 23f9e64:	2800      	cmp	r0, #0
 23f9e66:	f43f af51 	beq.w	23f9d0c <atan+0x54>
 23f9e6a:	ec45 4b10 	vmov	d0, r4, r5
 23f9e6e:	e73a      	b.n	23f9ce6 <atan+0x2e>
 23f9e70:	ed9f 0b59 	vldr	d0, [pc, #356]	; 23f9fd8 <atan+0x320>
 23f9e74:	e737      	b.n	23f9ce6 <atan+0x2e>
 23f9e76:	f000 f91b 	bl	23fa0b0 <fabs>
 23f9e7a:	4b5f      	ldr	r3, [pc, #380]	; (23f9ff8 <atan+0x340>)
 23f9e7c:	429e      	cmp	r6, r3
 23f9e7e:	ec55 4b10 	vmov	r4, r5, d0
 23f9e82:	dc2d      	bgt.n	23f9ee0 <atan+0x228>
 23f9e84:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 23f9e88:	429e      	cmp	r6, r3
 23f9e8a:	dd58      	ble.n	23f9f3e <atan+0x286>
 23f9e8c:	2200      	movs	r2, #0
 23f9e8e:	4b59      	ldr	r3, [pc, #356]	; (23f9ff4 <atan+0x33c>)
 23f9e90:	ee10 0a10 	vmov	r0, s0
 23f9e94:	4629      	mov	r1, r5
 23f9e96:	f7e9 faa7 	bl	23e33e8 <__aeabi_dsub>
 23f9e9a:	f04f 0b01 	mov.w	fp, #1
 23f9e9e:	4606      	mov	r6, r0
 23f9ea0:	460f      	mov	r7, r1
 23f9ea2:	4620      	mov	r0, r4
 23f9ea4:	4629      	mov	r1, r5
 23f9ea6:	2200      	movs	r2, #0
 23f9ea8:	4b52      	ldr	r3, [pc, #328]	; (23f9ff4 <atan+0x33c>)
 23f9eaa:	f7e9 fa9f 	bl	23e33ec <__adddf3>
 23f9eae:	4602      	mov	r2, r0
 23f9eb0:	460b      	mov	r3, r1
 23f9eb2:	4630      	mov	r0, r6
 23f9eb4:	4639      	mov	r1, r7
 23f9eb6:	f7e9 fd79 	bl	23e39ac <__aeabi_ddiv>
 23f9eba:	4604      	mov	r4, r0
 23f9ebc:	460d      	mov	r5, r1
 23f9ebe:	e727      	b.n	23f9d10 <atan+0x58>
 23f9ec0:	f7e9 fa94 	bl	23e33ec <__adddf3>
 23f9ec4:	4622      	mov	r2, r4
 23f9ec6:	462b      	mov	r3, r5
 23f9ec8:	f7e9 fc46 	bl	23e3758 <__aeabi_dmul>
 23f9ecc:	4602      	mov	r2, r0
 23f9ece:	460b      	mov	r3, r1
 23f9ed0:	4620      	mov	r0, r4
 23f9ed2:	4629      	mov	r1, r5
 23f9ed4:	f7e9 fa88 	bl	23e33e8 <__aeabi_dsub>
 23f9ed8:	ec41 0b10 	vmov	d0, r0, r1
 23f9edc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f9ee0:	4b46      	ldr	r3, [pc, #280]	; (23f9ffc <atan+0x344>)
 23f9ee2:	429e      	cmp	r6, r3
 23f9ee4:	da1f      	bge.n	23f9f26 <atan+0x26e>
 23f9ee6:	ee10 0a10 	vmov	r0, s0
 23f9eea:	2200      	movs	r2, #0
 23f9eec:	4b44      	ldr	r3, [pc, #272]	; (23fa000 <atan+0x348>)
 23f9eee:	4629      	mov	r1, r5
 23f9ef0:	f7e9 fa7a 	bl	23e33e8 <__aeabi_dsub>
 23f9ef4:	4602      	mov	r2, r0
 23f9ef6:	460b      	mov	r3, r1
 23f9ef8:	4620      	mov	r0, r4
 23f9efa:	4629      	mov	r1, r5
 23f9efc:	4614      	mov	r4, r2
 23f9efe:	461d      	mov	r5, r3
 23f9f00:	2200      	movs	r2, #0
 23f9f02:	4b3f      	ldr	r3, [pc, #252]	; (23fa000 <atan+0x348>)
 23f9f04:	f04f 0b02 	mov.w	fp, #2
 23f9f08:	f7e9 fc26 	bl	23e3758 <__aeabi_dmul>
 23f9f0c:	2200      	movs	r2, #0
 23f9f0e:	4b39      	ldr	r3, [pc, #228]	; (23f9ff4 <atan+0x33c>)
 23f9f10:	f7e9 fa6c 	bl	23e33ec <__adddf3>
 23f9f14:	4602      	mov	r2, r0
 23f9f16:	460b      	mov	r3, r1
 23f9f18:	4620      	mov	r0, r4
 23f9f1a:	4629      	mov	r1, r5
 23f9f1c:	f7e9 fd46 	bl	23e39ac <__aeabi_ddiv>
 23f9f20:	4604      	mov	r4, r0
 23f9f22:	460d      	mov	r5, r1
 23f9f24:	e6f4      	b.n	23f9d10 <atan+0x58>
 23f9f26:	462b      	mov	r3, r5
 23f9f28:	2000      	movs	r0, #0
 23f9f2a:	4936      	ldr	r1, [pc, #216]	; (23fa004 <atan+0x34c>)
 23f9f2c:	ee10 2a10 	vmov	r2, s0
 23f9f30:	f7e9 fd3c 	bl	23e39ac <__aeabi_ddiv>
 23f9f34:	f04f 0b03 	mov.w	fp, #3
 23f9f38:	4604      	mov	r4, r0
 23f9f3a:	460d      	mov	r5, r1
 23f9f3c:	e6e8      	b.n	23f9d10 <atan+0x58>
 23f9f3e:	ee10 2a10 	vmov	r2, s0
 23f9f42:	462b      	mov	r3, r5
 23f9f44:	ee10 0a10 	vmov	r0, s0
 23f9f48:	4629      	mov	r1, r5
 23f9f4a:	f7e9 fa4f 	bl	23e33ec <__adddf3>
 23f9f4e:	2200      	movs	r2, #0
 23f9f50:	4b28      	ldr	r3, [pc, #160]	; (23f9ff4 <atan+0x33c>)
 23f9f52:	f04f 0b00 	mov.w	fp, #0
 23f9f56:	f7e9 fa47 	bl	23e33e8 <__aeabi_dsub>
 23f9f5a:	2200      	movs	r2, #0
 23f9f5c:	4606      	mov	r6, r0
 23f9f5e:	460f      	mov	r7, r1
 23f9f60:	4620      	mov	r0, r4
 23f9f62:	4629      	mov	r1, r5
 23f9f64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 23f9f68:	e79f      	b.n	23f9eaa <atan+0x1f2>
 23f9f6a:	bf00      	nop
 23f9f6c:	f3af 8000 	nop.w
 23f9f70:	54442d18 	.word	0x54442d18
 23f9f74:	3ff921fb 	.word	0x3ff921fb
 23f9f78:	e322da11 	.word	0xe322da11
 23f9f7c:	3f90ad3a 	.word	0x3f90ad3a
 23f9f80:	24760deb 	.word	0x24760deb
 23f9f84:	3fa97b4b 	.word	0x3fa97b4b
 23f9f88:	a0d03d51 	.word	0xa0d03d51
 23f9f8c:	3fb10d66 	.word	0x3fb10d66
 23f9f90:	c54c206e 	.word	0xc54c206e
 23f9f94:	3fb745cd 	.word	0x3fb745cd
 23f9f98:	920083ff 	.word	0x920083ff
 23f9f9c:	3fc24924 	.word	0x3fc24924
 23f9fa0:	5555550d 	.word	0x5555550d
 23f9fa4:	3fd55555 	.word	0x3fd55555
 23f9fa8:	2c6a6c2f 	.word	0x2c6a6c2f
 23f9fac:	bfa2b444 	.word	0xbfa2b444
 23f9fb0:	52defd9a 	.word	0x52defd9a
 23f9fb4:	3fadde2d 	.word	0x3fadde2d
 23f9fb8:	af749a6d 	.word	0xaf749a6d
 23f9fbc:	3fb3b0f2 	.word	0x3fb3b0f2
 23f9fc0:	fe231671 	.word	0xfe231671
 23f9fc4:	3fbc71c6 	.word	0x3fbc71c6
 23f9fc8:	9998ebc4 	.word	0x9998ebc4
 23f9fcc:	3fc99999 	.word	0x3fc99999
 23f9fd0:	8800759c 	.word	0x8800759c
 23f9fd4:	7e37e43c 	.word	0x7e37e43c
 23f9fd8:	54442d18 	.word	0x54442d18
 23f9fdc:	bff921fb 	.word	0xbff921fb
 23f9fe0:	440fffff 	.word	0x440fffff
 23f9fe4:	7ff00000 	.word	0x7ff00000
 23f9fe8:	3fdbffff 	.word	0x3fdbffff
 23f9fec:	023ffb38 	.word	0x023ffb38
 23f9ff0:	023ffb58 	.word	0x023ffb58
 23f9ff4:	3ff00000 	.word	0x3ff00000
 23f9ff8:	3ff2ffff 	.word	0x3ff2ffff
 23f9ffc:	40038000 	.word	0x40038000
 23fa000:	3ff80000 	.word	0x3ff80000
 23fa004:	bff00000 	.word	0xbff00000

023fa008 <cos>:
 23fa008:	ec51 0b10 	vmov	r0, r1, d0
 23fa00c:	4a26      	ldr	r2, [pc, #152]	; (23fa0a8 <cos+0xa0>)
 23fa00e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23fa012:	4293      	cmp	r3, r2
 23fa014:	dd20      	ble.n	23fa058 <cos+0x50>
 23fa016:	4a25      	ldr	r2, [pc, #148]	; (23fa0ac <cos+0xa4>)
 23fa018:	4293      	cmp	r3, r2
 23fa01a:	b500      	push	{lr}
 23fa01c:	b085      	sub	sp, #20
 23fa01e:	dd09      	ble.n	23fa034 <cos+0x2c>
 23fa020:	ee10 2a10 	vmov	r2, s0
 23fa024:	460b      	mov	r3, r1
 23fa026:	f7e9 f9df 	bl	23e33e8 <__aeabi_dsub>
 23fa02a:	ec41 0b10 	vmov	d0, r0, r1
 23fa02e:	b005      	add	sp, #20
 23fa030:	f85d fb04 	ldr.w	pc, [sp], #4
 23fa034:	4668      	mov	r0, sp
 23fa036:	f001 f8a7 	bl	23fb188 <__ieee754_rem_pio2>
 23fa03a:	f000 0003 	and.w	r0, r0, #3
 23fa03e:	2801      	cmp	r0, #1
 23fa040:	d00e      	beq.n	23fa060 <cos+0x58>
 23fa042:	2802      	cmp	r0, #2
 23fa044:	d022      	beq.n	23fa08c <cos+0x84>
 23fa046:	b1d0      	cbz	r0, 23fa07e <cos+0x76>
 23fa048:	2001      	movs	r0, #1
 23fa04a:	ed9d 1b02 	vldr	d1, [sp, #8]
 23fa04e:	ed9d 0b00 	vldr	d0, [sp]
 23fa052:	f002 f8e5 	bl	23fc220 <__kernel_sin>
 23fa056:	e7ea      	b.n	23fa02e <cos+0x26>
 23fa058:	ed9f 1b11 	vldr	d1, [pc, #68]	; 23fa0a0 <cos+0x98>
 23fa05c:	f001 bb7c 	b.w	23fb758 <__kernel_cos>
 23fa060:	ed9d 1b02 	vldr	d1, [sp, #8]
 23fa064:	ed9d 0b00 	vldr	d0, [sp]
 23fa068:	f002 f8da 	bl	23fc220 <__kernel_sin>
 23fa06c:	ec53 2b10 	vmov	r2, r3, d0
 23fa070:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 23fa074:	ee00 3a90 	vmov	s1, r3
 23fa078:	b005      	add	sp, #20
 23fa07a:	f85d fb04 	ldr.w	pc, [sp], #4
 23fa07e:	ed9d 1b02 	vldr	d1, [sp, #8]
 23fa082:	ed9d 0b00 	vldr	d0, [sp]
 23fa086:	f001 fb67 	bl	23fb758 <__kernel_cos>
 23fa08a:	e7d0      	b.n	23fa02e <cos+0x26>
 23fa08c:	ed9d 1b02 	vldr	d1, [sp, #8]
 23fa090:	ed9d 0b00 	vldr	d0, [sp]
 23fa094:	f001 fb60 	bl	23fb758 <__kernel_cos>
 23fa098:	e7e8      	b.n	23fa06c <cos+0x64>
 23fa09a:	bf00      	nop
 23fa09c:	f3af 8000 	nop.w
	...
 23fa0a8:	3fe921fb 	.word	0x3fe921fb
 23fa0ac:	7fefffff 	.word	0x7fefffff

023fa0b0 <fabs>:
 23fa0b0:	ec51 0b10 	vmov	r0, r1, d0
 23fa0b4:	ee10 2a10 	vmov	r2, s0
 23fa0b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23fa0bc:	ec43 2b10 	vmov	d0, r2, r3
 23fa0c0:	4770      	bx	lr
 23fa0c2:	bf00      	nop
 23fa0c4:	0000      	movs	r0, r0
	...

023fa0c8 <scalbn>:
 23fa0c8:	b538      	push	{r3, r4, r5, lr}
 23fa0ca:	ec53 2b10 	vmov	r2, r3, d0
 23fa0ce:	f3c3 510a 	ubfx	r1, r3, #20, #11
 23fa0d2:	469c      	mov	ip, r3
 23fa0d4:	4604      	mov	r4, r0
 23fa0d6:	bb89      	cbnz	r1, 23fa13c <scalbn+0x74>
 23fa0d8:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 23fa0dc:	ee10 1a10 	vmov	r1, s0
 23fa0e0:	ea5c 0101 	orrs.w	r1, ip, r1
 23fa0e4:	d029      	beq.n	23fa13a <scalbn+0x72>
 23fa0e6:	4d3e      	ldr	r5, [pc, #248]	; (23fa1e0 <scalbn+0x118>)
 23fa0e8:	4619      	mov	r1, r3
 23fa0ea:	2200      	movs	r2, #0
 23fa0ec:	4b3d      	ldr	r3, [pc, #244]	; (23fa1e4 <scalbn+0x11c>)
 23fa0ee:	ee10 0a10 	vmov	r0, s0
 23fa0f2:	f7e9 fb31 	bl	23e3758 <__aeabi_dmul>
 23fa0f6:	42ac      	cmp	r4, r5
 23fa0f8:	4602      	mov	r2, r0
 23fa0fa:	460b      	mov	r3, r1
 23fa0fc:	db16      	blt.n	23fa12c <scalbn+0x64>
 23fa0fe:	468c      	mov	ip, r1
 23fa100:	f3c1 510a 	ubfx	r1, r1, #20, #11
 23fa104:	3936      	subs	r1, #54	; 0x36
 23fa106:	4421      	add	r1, r4
 23fa108:	f240 70fe 	movw	r0, #2046	; 0x7fe
 23fa10c:	4281      	cmp	r1, r0
 23fa10e:	dc21      	bgt.n	23fa154 <scalbn+0x8c>
 23fa110:	2900      	cmp	r1, #0
 23fa112:	dc47      	bgt.n	23fa1a4 <scalbn+0xdc>
 23fa114:	f111 0f35 	cmn.w	r1, #53	; 0x35
 23fa118:	da34      	bge.n	23fa184 <scalbn+0xbc>
 23fa11a:	f24c 3150 	movw	r1, #50000	; 0xc350
 23fa11e:	428c      	cmp	r4, r1
 23fa120:	dc18      	bgt.n	23fa154 <scalbn+0x8c>
 23fa122:	2b00      	cmp	r3, #0
 23fa124:	a126      	add	r1, pc, #152	; (adr r1, 23fa1c0 <scalbn+0xf8>)
 23fa126:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fa12a:	db43      	blt.n	23fa1b4 <scalbn+0xec>
 23fa12c:	a324      	add	r3, pc, #144	; (adr r3, 23fa1c0 <scalbn+0xf8>)
 23fa12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa132:	f7e9 fb11 	bl	23e3758 <__aeabi_dmul>
 23fa136:	ec41 0b10 	vmov	d0, r0, r1
 23fa13a:	bd38      	pop	{r3, r4, r5, pc}
 23fa13c:	f240 7eff 	movw	lr, #2047	; 0x7ff
 23fa140:	4571      	cmp	r1, lr
 23fa142:	d1e0      	bne.n	23fa106 <scalbn+0x3e>
 23fa144:	ee10 0a10 	vmov	r0, s0
 23fa148:	4619      	mov	r1, r3
 23fa14a:	f7e9 f94f 	bl	23e33ec <__adddf3>
 23fa14e:	ec41 0b10 	vmov	d0, r0, r1
 23fa152:	bd38      	pop	{r3, r4, r5, pc}
 23fa154:	2b00      	cmp	r3, #0
 23fa156:	a11c      	add	r1, pc, #112	; (adr r1, 23fa1c8 <scalbn+0x100>)
 23fa158:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fa15c:	db07      	blt.n	23fa16e <scalbn+0xa6>
 23fa15e:	a31a      	add	r3, pc, #104	; (adr r3, 23fa1c8 <scalbn+0x100>)
 23fa160:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa164:	f7e9 faf8 	bl	23e3758 <__aeabi_dmul>
 23fa168:	ec41 0b10 	vmov	d0, r0, r1
 23fa16c:	bd38      	pop	{r3, r4, r5, pc}
 23fa16e:	a118      	add	r1, pc, #96	; (adr r1, 23fa1d0 <scalbn+0x108>)
 23fa170:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fa174:	a314      	add	r3, pc, #80	; (adr r3, 23fa1c8 <scalbn+0x100>)
 23fa176:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa17a:	f7e9 faed 	bl	23e3758 <__aeabi_dmul>
 23fa17e:	ec41 0b10 	vmov	d0, r0, r1
 23fa182:	e7f3      	b.n	23fa16c <scalbn+0xa4>
 23fa184:	4818      	ldr	r0, [pc, #96]	; (23fa1e8 <scalbn+0x120>)
 23fa186:	3136      	adds	r1, #54	; 0x36
 23fa188:	4614      	mov	r4, r2
 23fa18a:	4b18      	ldr	r3, [pc, #96]	; (23fa1ec <scalbn+0x124>)
 23fa18c:	ea0c 0000 	and.w	r0, ip, r0
 23fa190:	2200      	movs	r2, #0
 23fa192:	ea40 5501 	orr.w	r5, r0, r1, lsl #20
 23fa196:	4620      	mov	r0, r4
 23fa198:	4629      	mov	r1, r5
 23fa19a:	f7e9 fadd 	bl	23e3758 <__aeabi_dmul>
 23fa19e:	ec41 0b10 	vmov	d0, r0, r1
 23fa1a2:	bd38      	pop	{r3, r4, r5, pc}
 23fa1a4:	4810      	ldr	r0, [pc, #64]	; (23fa1e8 <scalbn+0x120>)
 23fa1a6:	ea0c 0000 	and.w	r0, ip, r0
 23fa1aa:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
 23fa1ae:	ec43 2b10 	vmov	d0, r2, r3
 23fa1b2:	bd38      	pop	{r3, r4, r5, pc}
 23fa1b4:	a108      	add	r1, pc, #32	; (adr r1, 23fa1d8 <scalbn+0x110>)
 23fa1b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fa1ba:	e7b7      	b.n	23fa12c <scalbn+0x64>
 23fa1bc:	f3af 8000 	nop.w
 23fa1c0:	c2f8f359 	.word	0xc2f8f359
 23fa1c4:	01a56e1f 	.word	0x01a56e1f
 23fa1c8:	8800759c 	.word	0x8800759c
 23fa1cc:	7e37e43c 	.word	0x7e37e43c
 23fa1d0:	8800759c 	.word	0x8800759c
 23fa1d4:	fe37e43c 	.word	0xfe37e43c
 23fa1d8:	c2f8f359 	.word	0xc2f8f359
 23fa1dc:	81a56e1f 	.word	0x81a56e1f
 23fa1e0:	ffff3cb0 	.word	0xffff3cb0
 23fa1e4:	43500000 	.word	0x43500000
 23fa1e8:	800fffff 	.word	0x800fffff
 23fa1ec:	3c900000 	.word	0x3c900000

023fa1f0 <sin>:
 23fa1f0:	ec51 0b10 	vmov	r0, r1, d0
 23fa1f4:	4a26      	ldr	r2, [pc, #152]	; (23fa290 <sin+0xa0>)
 23fa1f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23fa1fa:	4293      	cmp	r3, r2
 23fa1fc:	dd27      	ble.n	23fa24e <sin+0x5e>
 23fa1fe:	4a25      	ldr	r2, [pc, #148]	; (23fa294 <sin+0xa4>)
 23fa200:	4293      	cmp	r3, r2
 23fa202:	b500      	push	{lr}
 23fa204:	b085      	sub	sp, #20
 23fa206:	dd09      	ble.n	23fa21c <sin+0x2c>
 23fa208:	ee10 2a10 	vmov	r2, s0
 23fa20c:	460b      	mov	r3, r1
 23fa20e:	f7e9 f8eb 	bl	23e33e8 <__aeabi_dsub>
 23fa212:	ec41 0b10 	vmov	d0, r0, r1
 23fa216:	b005      	add	sp, #20
 23fa218:	f85d fb04 	ldr.w	pc, [sp], #4
 23fa21c:	4668      	mov	r0, sp
 23fa21e:	f000 ffb3 	bl	23fb188 <__ieee754_rem_pio2>
 23fa222:	f000 0003 	and.w	r0, r0, #3
 23fa226:	2801      	cmp	r0, #1
 23fa228:	d016      	beq.n	23fa258 <sin+0x68>
 23fa22a:	2802      	cmp	r0, #2
 23fa22c:	d023      	beq.n	23fa276 <sin+0x86>
 23fa22e:	b1d0      	cbz	r0, 23fa266 <sin+0x76>
 23fa230:	ed9d 1b02 	vldr	d1, [sp, #8]
 23fa234:	ed9d 0b00 	vldr	d0, [sp]
 23fa238:	f001 fa8e 	bl	23fb758 <__kernel_cos>
 23fa23c:	ec53 2b10 	vmov	r2, r3, d0
 23fa240:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 23fa244:	ee00 3a90 	vmov	s1, r3
 23fa248:	b005      	add	sp, #20
 23fa24a:	f85d fb04 	ldr.w	pc, [sp], #4
 23fa24e:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 23fa288 <sin+0x98>
 23fa252:	2000      	movs	r0, #0
 23fa254:	f001 bfe4 	b.w	23fc220 <__kernel_sin>
 23fa258:	ed9d 1b02 	vldr	d1, [sp, #8]
 23fa25c:	ed9d 0b00 	vldr	d0, [sp]
 23fa260:	f001 fa7a 	bl	23fb758 <__kernel_cos>
 23fa264:	e7d7      	b.n	23fa216 <sin+0x26>
 23fa266:	ed9d 1b02 	vldr	d1, [sp, #8]
 23fa26a:	ed9d 0b00 	vldr	d0, [sp]
 23fa26e:	2001      	movs	r0, #1
 23fa270:	f001 ffd6 	bl	23fc220 <__kernel_sin>
 23fa274:	e7cf      	b.n	23fa216 <sin+0x26>
 23fa276:	ed9d 1b02 	vldr	d1, [sp, #8]
 23fa27a:	ed9d 0b00 	vldr	d0, [sp]
 23fa27e:	2001      	movs	r0, #1
 23fa280:	f001 ffce 	bl	23fc220 <__kernel_sin>
 23fa284:	e7da      	b.n	23fa23c <sin+0x4c>
 23fa286:	bf00      	nop
	...
 23fa290:	3fe921fb 	.word	0x3fe921fb
 23fa294:	7fefffff 	.word	0x7fefffff

023fa298 <atan2>:
 23fa298:	f000 b90e 	b.w	23fa4b8 <__ieee754_atan2>
 23fa29c:	0000      	movs	r0, r0
	...

023fa2a0 <pow>:
 23fa2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fa2a2:	ed2d 8b02 	vpush	{d8}
 23fa2a6:	ec57 6b10 	vmov	r6, r7, d0
 23fa2aa:	ec55 4b11 	vmov	r4, r5, d1
 23fa2ae:	f000 f9d7 	bl	23fa660 <__ieee754_pow>
 23fa2b2:	4b63      	ldr	r3, [pc, #396]	; (23fa440 <pow+0x1a0>)
 23fa2b4:	eeb0 8a40 	vmov.f32	s16, s0
 23fa2b8:	eef0 8a60 	vmov.f32	s17, s1
 23fa2bc:	f993 3000 	ldrsb.w	r3, [r3]
 23fa2c0:	3301      	adds	r3, #1
 23fa2c2:	d02a      	beq.n	23fa31a <pow+0x7a>
 23fa2c4:	4622      	mov	r2, r4
 23fa2c6:	462b      	mov	r3, r5
 23fa2c8:	4620      	mov	r0, r4
 23fa2ca:	4629      	mov	r1, r5
 23fa2cc:	f7e9 fcde 	bl	23e3c8c <__aeabi_dcmpun>
 23fa2d0:	bb18      	cbnz	r0, 23fa31a <pow+0x7a>
 23fa2d2:	4632      	mov	r2, r6
 23fa2d4:	463b      	mov	r3, r7
 23fa2d6:	4630      	mov	r0, r6
 23fa2d8:	4639      	mov	r1, r7
 23fa2da:	f7e9 fcd7 	bl	23e3c8c <__aeabi_dcmpun>
 23fa2de:	2800      	cmp	r0, #0
 23fa2e0:	d144      	bne.n	23fa36c <pow+0xcc>
 23fa2e2:	2200      	movs	r2, #0
 23fa2e4:	2300      	movs	r3, #0
 23fa2e6:	4630      	mov	r0, r6
 23fa2e8:	4639      	mov	r1, r7
 23fa2ea:	f7e9 fc9d 	bl	23e3c28 <__aeabi_dcmpeq>
 23fa2ee:	b1d8      	cbz	r0, 23fa328 <pow+0x88>
 23fa2f0:	2200      	movs	r2, #0
 23fa2f2:	2300      	movs	r3, #0
 23fa2f4:	4620      	mov	r0, r4
 23fa2f6:	4629      	mov	r1, r5
 23fa2f8:	f7e9 fc96 	bl	23e3c28 <__aeabi_dcmpeq>
 23fa2fc:	2800      	cmp	r0, #0
 23fa2fe:	d13d      	bne.n	23fa37c <pow+0xdc>
 23fa300:	ec45 4b10 	vmov	d0, r4, r5
 23fa304:	f002 f852 	bl	23fc3ac <finite>
 23fa308:	b138      	cbz	r0, 23fa31a <pow+0x7a>
 23fa30a:	4620      	mov	r0, r4
 23fa30c:	4629      	mov	r1, r5
 23fa30e:	2200      	movs	r2, #0
 23fa310:	2300      	movs	r3, #0
 23fa312:	f7e9 fc93 	bl	23e3c3c <__aeabi_dcmplt>
 23fa316:	2800      	cmp	r0, #0
 23fa318:	d15c      	bne.n	23fa3d4 <pow+0x134>
 23fa31a:	eeb0 0a48 	vmov.f32	s0, s16
 23fa31e:	eef0 0a68 	vmov.f32	s1, s17
 23fa322:	ecbd 8b02 	vpop	{d8}
 23fa326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fa328:	eeb0 0a48 	vmov.f32	s0, s16
 23fa32c:	eef0 0a68 	vmov.f32	s1, s17
 23fa330:	f002 f83c 	bl	23fc3ac <finite>
 23fa334:	b358      	cbz	r0, 23fa38e <pow+0xee>
 23fa336:	2200      	movs	r2, #0
 23fa338:	2300      	movs	r3, #0
 23fa33a:	ec51 0b18 	vmov	r0, r1, d8
 23fa33e:	f7e9 fc73 	bl	23e3c28 <__aeabi_dcmpeq>
 23fa342:	2800      	cmp	r0, #0
 23fa344:	d0e9      	beq.n	23fa31a <pow+0x7a>
 23fa346:	ec47 6b10 	vmov	d0, r6, r7
 23fa34a:	f002 f82f 	bl	23fc3ac <finite>
 23fa34e:	2800      	cmp	r0, #0
 23fa350:	d0e3      	beq.n	23fa31a <pow+0x7a>
 23fa352:	ec45 4b10 	vmov	d0, r4, r5
 23fa356:	f002 f829 	bl	23fc3ac <finite>
 23fa35a:	2800      	cmp	r0, #0
 23fa35c:	d0dd      	beq.n	23fa31a <pow+0x7a>
 23fa35e:	f7fd f8e5 	bl	23f752c <__errno>
 23fa362:	2322      	movs	r3, #34	; 0x22
 23fa364:	ed9f 8b2e 	vldr	d8, [pc, #184]	; 23fa420 <pow+0x180>
 23fa368:	6003      	str	r3, [r0, #0]
 23fa36a:	e7d6      	b.n	23fa31a <pow+0x7a>
 23fa36c:	4620      	mov	r0, r4
 23fa36e:	4629      	mov	r1, r5
 23fa370:	2200      	movs	r2, #0
 23fa372:	2300      	movs	r3, #0
 23fa374:	f7e9 fc58 	bl	23e3c28 <__aeabi_dcmpeq>
 23fa378:	2800      	cmp	r0, #0
 23fa37a:	d0ce      	beq.n	23fa31a <pow+0x7a>
 23fa37c:	ed9f 8b2a 	vldr	d8, [pc, #168]	; 23fa428 <pow+0x188>
 23fa380:	eeb0 0a48 	vmov.f32	s0, s16
 23fa384:	eef0 0a68 	vmov.f32	s1, s17
 23fa388:	ecbd 8b02 	vpop	{d8}
 23fa38c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fa38e:	ec47 6b10 	vmov	d0, r6, r7
 23fa392:	f002 f80b 	bl	23fc3ac <finite>
 23fa396:	2800      	cmp	r0, #0
 23fa398:	d0cd      	beq.n	23fa336 <pow+0x96>
 23fa39a:	ec45 4b10 	vmov	d0, r4, r5
 23fa39e:	f002 f805 	bl	23fc3ac <finite>
 23fa3a2:	2800      	cmp	r0, #0
 23fa3a4:	d0c7      	beq.n	23fa336 <pow+0x96>
 23fa3a6:	ee18 0a10 	vmov	r0, s16
 23fa3aa:	ec53 2b18 	vmov	r2, r3, d8
 23fa3ae:	4619      	mov	r1, r3
 23fa3b0:	f7e9 fc6c 	bl	23e3c8c <__aeabi_dcmpun>
 23fa3b4:	bb20      	cbnz	r0, 23fa400 <pow+0x160>
 23fa3b6:	f7fd f8b9 	bl	23f752c <__errno>
 23fa3ba:	2222      	movs	r2, #34	; 0x22
 23fa3bc:	4603      	mov	r3, r0
 23fa3be:	4639      	mov	r1, r7
 23fa3c0:	4630      	mov	r0, r6
 23fa3c2:	601a      	str	r2, [r3, #0]
 23fa3c4:	2200      	movs	r2, #0
 23fa3c6:	2300      	movs	r3, #0
 23fa3c8:	f7e9 fc38 	bl	23e3c3c <__aeabi_dcmplt>
 23fa3cc:	b948      	cbnz	r0, 23fa3e2 <pow+0x142>
 23fa3ce:	ed9f 8b18 	vldr	d8, [pc, #96]	; 23fa430 <pow+0x190>
 23fa3d2:	e7a2      	b.n	23fa31a <pow+0x7a>
 23fa3d4:	f7fd f8aa 	bl	23f752c <__errno>
 23fa3d8:	2321      	movs	r3, #33	; 0x21
 23fa3da:	ed9f 8b17 	vldr	d8, [pc, #92]	; 23fa438 <pow+0x198>
 23fa3de:	6003      	str	r3, [r0, #0]
 23fa3e0:	e79b      	b.n	23fa31a <pow+0x7a>
 23fa3e2:	ec45 4b10 	vmov	d0, r4, r5
 23fa3e6:	f002 f87b 	bl	23fc4e0 <rint>
 23fa3ea:	4622      	mov	r2, r4
 23fa3ec:	462b      	mov	r3, r5
 23fa3ee:	ec51 0b10 	vmov	r0, r1, d0
 23fa3f2:	f7e9 fc19 	bl	23e3c28 <__aeabi_dcmpeq>
 23fa3f6:	2800      	cmp	r0, #0
 23fa3f8:	d1e9      	bne.n	23fa3ce <pow+0x12e>
 23fa3fa:	ed9f 8b0f 	vldr	d8, [pc, #60]	; 23fa438 <pow+0x198>
 23fa3fe:	e78c      	b.n	23fa31a <pow+0x7a>
 23fa400:	f7fd f894 	bl	23f752c <__errno>
 23fa404:	2200      	movs	r2, #0
 23fa406:	2300      	movs	r3, #0
 23fa408:	2121      	movs	r1, #33	; 0x21
 23fa40a:	6001      	str	r1, [r0, #0]
 23fa40c:	4610      	mov	r0, r2
 23fa40e:	4619      	mov	r1, r3
 23fa410:	f7e9 facc 	bl	23e39ac <__aeabi_ddiv>
 23fa414:	ec41 0b18 	vmov	d8, r0, r1
 23fa418:	e77f      	b.n	23fa31a <pow+0x7a>
 23fa41a:	bf00      	nop
 23fa41c:	f3af 8000 	nop.w
	...
 23fa42c:	3ff00000 	.word	0x3ff00000
 23fa430:	00000000 	.word	0x00000000
 23fa434:	7ff00000 	.word	0x7ff00000
 23fa438:	00000000 	.word	0x00000000
 23fa43c:	fff00000 	.word	0xfff00000
 23fa440:	1006a1cc 	.word	0x1006a1cc

023fa444 <sqrt>:
 23fa444:	b538      	push	{r3, r4, r5, lr}
 23fa446:	ed2d 8b02 	vpush	{d8}
 23fa44a:	ec55 4b10 	vmov	r4, r5, d0
 23fa44e:	f001 f8c1 	bl	23fb5d4 <__ieee754_sqrt>
 23fa452:	4b18      	ldr	r3, [pc, #96]	; (23fa4b4 <sqrt+0x70>)
 23fa454:	eeb0 8a40 	vmov.f32	s16, s0
 23fa458:	eef0 8a60 	vmov.f32	s17, s1
 23fa45c:	f993 3000 	ldrsb.w	r3, [r3]
 23fa460:	3301      	adds	r3, #1
 23fa462:	d00d      	beq.n	23fa480 <sqrt+0x3c>
 23fa464:	4622      	mov	r2, r4
 23fa466:	462b      	mov	r3, r5
 23fa468:	4620      	mov	r0, r4
 23fa46a:	4629      	mov	r1, r5
 23fa46c:	f7e9 fc0e 	bl	23e3c8c <__aeabi_dcmpun>
 23fa470:	b930      	cbnz	r0, 23fa480 <sqrt+0x3c>
 23fa472:	2200      	movs	r2, #0
 23fa474:	2300      	movs	r3, #0
 23fa476:	4620      	mov	r0, r4
 23fa478:	4629      	mov	r1, r5
 23fa47a:	f7e9 fbdf 	bl	23e3c3c <__aeabi_dcmplt>
 23fa47e:	b930      	cbnz	r0, 23fa48e <sqrt+0x4a>
 23fa480:	eeb0 0a48 	vmov.f32	s0, s16
 23fa484:	eef0 0a68 	vmov.f32	s1, s17
 23fa488:	ecbd 8b02 	vpop	{d8}
 23fa48c:	bd38      	pop	{r3, r4, r5, pc}
 23fa48e:	f7fd f84d 	bl	23f752c <__errno>
 23fa492:	2200      	movs	r2, #0
 23fa494:	2300      	movs	r3, #0
 23fa496:	2121      	movs	r1, #33	; 0x21
 23fa498:	6001      	str	r1, [r0, #0]
 23fa49a:	4610      	mov	r0, r2
 23fa49c:	4619      	mov	r1, r3
 23fa49e:	f7e9 fa85 	bl	23e39ac <__aeabi_ddiv>
 23fa4a2:	ec41 0b18 	vmov	d8, r0, r1
 23fa4a6:	eeb0 0a48 	vmov.f32	s0, s16
 23fa4aa:	eef0 0a68 	vmov.f32	s1, s17
 23fa4ae:	ecbd 8b02 	vpop	{d8}
 23fa4b2:	bd38      	pop	{r3, r4, r5, pc}
 23fa4b4:	1006a1cc 	.word	0x1006a1cc

023fa4b8 <__ieee754_atan2>:
 23fa4b8:	ec51 0b11 	vmov	r0, r1, d1
 23fa4bc:	4243      	negs	r3, r0
 23fa4be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fa4c2:	4303      	orrs	r3, r0
 23fa4c4:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 23fa4c8:	4e61      	ldr	r6, [pc, #388]	; (23fa650 <__ieee754_atan2+0x198>)
 23fa4ca:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
 23fa4ce:	42b3      	cmp	r3, r6
 23fa4d0:	ec55 4b10 	vmov	r4, r5, d0
 23fa4d4:	d83c      	bhi.n	23fa550 <__ieee754_atan2+0x98>
 23fa4d6:	4263      	negs	r3, r4
 23fa4d8:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
 23fa4dc:	46a9      	mov	r9, r5
 23fa4de:	4323      	orrs	r3, r4
 23fa4e0:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
 23fa4e4:	42b3      	cmp	r3, r6
 23fa4e6:	d833      	bhi.n	23fa550 <__ieee754_atan2+0x98>
 23fa4e8:	4b5a      	ldr	r3, [pc, #360]	; (23fa654 <__ieee754_atan2+0x19c>)
 23fa4ea:	440b      	add	r3, r1
 23fa4ec:	4303      	orrs	r3, r0
 23fa4ee:	d03e      	beq.n	23fa56e <__ieee754_atan2+0xb6>
 23fa4f0:	178f      	asrs	r7, r1, #30
 23fa4f2:	ea5a 0304 	orrs.w	r3, sl, r4
 23fa4f6:	f007 0702 	and.w	r7, r7, #2
 23fa4fa:	ea47 77d5 	orr.w	r7, r7, r5, lsr #31
 23fa4fe:	d02f      	beq.n	23fa560 <__ieee754_atan2+0xa8>
 23fa500:	ea5e 0300 	orrs.w	r3, lr, r0
 23fa504:	d037      	beq.n	23fa576 <__ieee754_atan2+0xbe>
 23fa506:	45b6      	cmp	lr, r6
 23fa508:	d044      	beq.n	23fa594 <__ieee754_atan2+0xdc>
 23fa50a:	45b2      	cmp	sl, r6
 23fa50c:	d033      	beq.n	23fa576 <__ieee754_atan2+0xbe>
 23fa50e:	ebaa 0e0e 	sub.w	lr, sl, lr
 23fa512:	f1be 7f74 	cmp.w	lr, #63963136	; 0x3d00000
 23fa516:	ea4f 532e 	mov.w	r3, lr, asr #20
 23fa51a:	da38      	bge.n	23fa58e <__ieee754_atan2+0xd6>
 23fa51c:	2900      	cmp	r1, #0
 23fa51e:	da6a      	bge.n	23fa5f6 <__ieee754_atan2+0x13e>
 23fa520:	333c      	adds	r3, #60	; 0x3c
 23fa522:	da68      	bge.n	23fa5f6 <__ieee754_atan2+0x13e>
 23fa524:	ed9f 0b3c 	vldr	d0, [pc, #240]	; 23fa618 <__ieee754_atan2+0x160>
 23fa528:	2f01      	cmp	r7, #1
 23fa52a:	d050      	beq.n	23fa5ce <__ieee754_atan2+0x116>
 23fa52c:	2f02      	cmp	r7, #2
 23fa52e:	d03d      	beq.n	23fa5ac <__ieee754_atan2+0xf4>
 23fa530:	b1a7      	cbz	r7, 23fa55c <__ieee754_atan2+0xa4>
 23fa532:	ec51 0b10 	vmov	r0, r1, d0
 23fa536:	a33a      	add	r3, pc, #232	; (adr r3, 23fa620 <__ieee754_atan2+0x168>)
 23fa538:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa53c:	f7e8 ff54 	bl	23e33e8 <__aeabi_dsub>
 23fa540:	a339      	add	r3, pc, #228	; (adr r3, 23fa628 <__ieee754_atan2+0x170>)
 23fa542:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa546:	f7e8 ff4f 	bl	23e33e8 <__aeabi_dsub>
 23fa54a:	ec41 0b10 	vmov	d0, r0, r1
 23fa54e:	e005      	b.n	23fa55c <__ieee754_atan2+0xa4>
 23fa550:	4622      	mov	r2, r4
 23fa552:	462b      	mov	r3, r5
 23fa554:	f7e8 ff4a 	bl	23e33ec <__adddf3>
 23fa558:	ec41 0b10 	vmov	d0, r0, r1
 23fa55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fa560:	2f02      	cmp	r7, #2
 23fa562:	d00e      	beq.n	23fa582 <__ieee754_atan2+0xca>
 23fa564:	2f03      	cmp	r7, #3
 23fa566:	d1f9      	bne.n	23fa55c <__ieee754_atan2+0xa4>
 23fa568:	ed9f 0b31 	vldr	d0, [pc, #196]	; 23fa630 <__ieee754_atan2+0x178>
 23fa56c:	e7f6      	b.n	23fa55c <__ieee754_atan2+0xa4>
 23fa56e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fa572:	f7ff bba1 	b.w	23f9cb8 <atan>
 23fa576:	f1b9 0f00 	cmp.w	r9, #0
 23fa57a:	db05      	blt.n	23fa588 <__ieee754_atan2+0xd0>
 23fa57c:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 23fa638 <__ieee754_atan2+0x180>
 23fa580:	e7ec      	b.n	23fa55c <__ieee754_atan2+0xa4>
 23fa582:	ed9f 0b29 	vldr	d0, [pc, #164]	; 23fa628 <__ieee754_atan2+0x170>
 23fa586:	e7e9      	b.n	23fa55c <__ieee754_atan2+0xa4>
 23fa588:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 23fa640 <__ieee754_atan2+0x188>
 23fa58c:	e7e6      	b.n	23fa55c <__ieee754_atan2+0xa4>
 23fa58e:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 23fa638 <__ieee754_atan2+0x180>
 23fa592:	e7c9      	b.n	23fa528 <__ieee754_atan2+0x70>
 23fa594:	45f2      	cmp	sl, lr
 23fa596:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 23fa59a:	d021      	beq.n	23fa5e0 <__ieee754_atan2+0x128>
 23fa59c:	2f02      	cmp	r7, #2
 23fa59e:	d827      	bhi.n	23fa5f0 <__ieee754_atan2+0x138>
 23fa5a0:	4b2d      	ldr	r3, [pc, #180]	; (23fa658 <__ieee754_atan2+0x1a0>)
 23fa5a2:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 23fa5a6:	ed97 0b00 	vldr	d0, [r7]
 23fa5aa:	e7d7      	b.n	23fa55c <__ieee754_atan2+0xa4>
 23fa5ac:	a31c      	add	r3, pc, #112	; (adr r3, 23fa620 <__ieee754_atan2+0x168>)
 23fa5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa5b2:	ec51 0b10 	vmov	r0, r1, d0
 23fa5b6:	f7e8 ff17 	bl	23e33e8 <__aeabi_dsub>
 23fa5ba:	4602      	mov	r2, r0
 23fa5bc:	460b      	mov	r3, r1
 23fa5be:	a11a      	add	r1, pc, #104	; (adr r1, 23fa628 <__ieee754_atan2+0x170>)
 23fa5c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fa5c4:	f7e8 ff10 	bl	23e33e8 <__aeabi_dsub>
 23fa5c8:	ec41 0b10 	vmov	d0, r0, r1
 23fa5cc:	e7c6      	b.n	23fa55c <__ieee754_atan2+0xa4>
 23fa5ce:	ee10 1a90 	vmov	r1, s1
 23fa5d2:	ec53 2b10 	vmov	r2, r3, d0
 23fa5d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fa5da:	ec43 2b10 	vmov	d0, r2, r3
 23fa5de:	e7bd      	b.n	23fa55c <__ieee754_atan2+0xa4>
 23fa5e0:	2f02      	cmp	r7, #2
 23fa5e2:	d815      	bhi.n	23fa610 <__ieee754_atan2+0x158>
 23fa5e4:	4b1d      	ldr	r3, [pc, #116]	; (23fa65c <__ieee754_atan2+0x1a4>)
 23fa5e6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 23fa5ea:	ed97 0b00 	vldr	d0, [r7]
 23fa5ee:	e7b5      	b.n	23fa55c <__ieee754_atan2+0xa4>
 23fa5f0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 23fa618 <__ieee754_atan2+0x160>
 23fa5f4:	e7b2      	b.n	23fa55c <__ieee754_atan2+0xa4>
 23fa5f6:	4602      	mov	r2, r0
 23fa5f8:	460b      	mov	r3, r1
 23fa5fa:	4620      	mov	r0, r4
 23fa5fc:	4629      	mov	r1, r5
 23fa5fe:	f7e9 f9d5 	bl	23e39ac <__aeabi_ddiv>
 23fa602:	ec41 0b10 	vmov	d0, r0, r1
 23fa606:	f7ff fd53 	bl	23fa0b0 <fabs>
 23fa60a:	f7ff fb55 	bl	23f9cb8 <atan>
 23fa60e:	e78b      	b.n	23fa528 <__ieee754_atan2+0x70>
 23fa610:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 23fa648 <__ieee754_atan2+0x190>
 23fa614:	e7a2      	b.n	23fa55c <__ieee754_atan2+0xa4>
 23fa616:	bf00      	nop
	...
 23fa620:	33145c07 	.word	0x33145c07
 23fa624:	3ca1a626 	.word	0x3ca1a626
 23fa628:	54442d18 	.word	0x54442d18
 23fa62c:	400921fb 	.word	0x400921fb
 23fa630:	54442d18 	.word	0x54442d18
 23fa634:	c00921fb 	.word	0xc00921fb
 23fa638:	54442d18 	.word	0x54442d18
 23fa63c:	3ff921fb 	.word	0x3ff921fb
 23fa640:	54442d18 	.word	0x54442d18
 23fa644:	bff921fb 	.word	0xbff921fb
 23fa648:	54442d18 	.word	0x54442d18
 23fa64c:	3fe921fb 	.word	0x3fe921fb
 23fa650:	7ff00000 	.word	0x7ff00000
 23fa654:	c0100000 	.word	0xc0100000
 23fa658:	023ffb90 	.word	0x023ffb90
 23fa65c:	023ffb78 	.word	0x023ffb78

023fa660 <__ieee754_pow>:
 23fa660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa664:	ec55 4b11 	vmov	r4, r5, d1
 23fa668:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
 23fa66c:	ea5a 0204 	orrs.w	r2, sl, r4
 23fa670:	ed2d 8b0c 	vpush	{d8-d13}
 23fa674:	b087      	sub	sp, #28
 23fa676:	d01f      	beq.n	23fa6b8 <__ieee754_pow+0x58>
 23fa678:	495d      	ldr	r1, [pc, #372]	; (23fa7f0 <__ieee754_pow+0x190>)
 23fa67a:	ee10 2a10 	vmov	r2, s0
 23fa67e:	ec57 6b10 	vmov	r6, r7, d0
 23fa682:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 23fa686:	46b9      	mov	r9, r7
 23fa688:	4588      	cmp	r8, r1
 23fa68a:	dc11      	bgt.n	23fa6b0 <__ieee754_pow+0x50>
 23fa68c:	46ab      	mov	fp, r5
 23fa68e:	ee11 3a10 	vmov	r3, s2
 23fa692:	d108      	bne.n	23fa6a6 <__ieee754_pow+0x46>
 23fa694:	b13e      	cbz	r6, 23fa6a6 <__ieee754_pow+0x46>
 23fa696:	4857      	ldr	r0, [pc, #348]	; (23fa7f4 <__ieee754_pow+0x194>)
 23fa698:	b007      	add	sp, #28
 23fa69a:	ecbd 8b0c 	vpop	{d8-d13}
 23fa69e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa6a2:	f001 bf15 	b.w	23fc4d0 <nan>
 23fa6a6:	4952      	ldr	r1, [pc, #328]	; (23fa7f0 <__ieee754_pow+0x190>)
 23fa6a8:	458a      	cmp	sl, r1
 23fa6aa:	dc01      	bgt.n	23fa6b0 <__ieee754_pow+0x50>
 23fa6ac:	d10b      	bne.n	23fa6c6 <__ieee754_pow+0x66>
 23fa6ae:	b153      	cbz	r3, 23fa6c6 <__ieee754_pow+0x66>
 23fa6b0:	4b51      	ldr	r3, [pc, #324]	; (23fa7f8 <__ieee754_pow+0x198>)
 23fa6b2:	4443      	add	r3, r8
 23fa6b4:	4313      	orrs	r3, r2
 23fa6b6:	d1ee      	bne.n	23fa696 <__ieee754_pow+0x36>
 23fa6b8:	ed9f 0b49 	vldr	d0, [pc, #292]	; 23fa7e0 <__ieee754_pow+0x180>
 23fa6bc:	b007      	add	sp, #28
 23fa6be:	ecbd 8b0c 	vpop	{d8-d13}
 23fa6c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa6c6:	f1b9 0f00 	cmp.w	r9, #0
 23fa6ca:	db45      	blt.n	23fa758 <__ieee754_pow+0xf8>
 23fa6cc:	2100      	movs	r1, #0
 23fa6ce:	9100      	str	r1, [sp, #0]
 23fa6d0:	b983      	cbnz	r3, 23fa6f4 <__ieee754_pow+0x94>
 23fa6d2:	4b47      	ldr	r3, [pc, #284]	; (23fa7f0 <__ieee754_pow+0x190>)
 23fa6d4:	459a      	cmp	sl, r3
 23fa6d6:	d05b      	beq.n	23fa790 <__ieee754_pow+0x130>
 23fa6d8:	4b48      	ldr	r3, [pc, #288]	; (23fa7fc <__ieee754_pow+0x19c>)
 23fa6da:	459a      	cmp	sl, r3
 23fa6dc:	d06a      	beq.n	23fa7b4 <__ieee754_pow+0x154>
 23fa6de:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
 23fa6e2:	f000 84b0 	beq.w	23fb046 <__ieee754_pow+0x9e6>
 23fa6e6:	4b46      	ldr	r3, [pc, #280]	; (23fa800 <__ieee754_pow+0x1a0>)
 23fa6e8:	459b      	cmp	fp, r3
 23fa6ea:	d103      	bne.n	23fa6f4 <__ieee754_pow+0x94>
 23fa6ec:	f1b9 0f00 	cmp.w	r9, #0
 23fa6f0:	f280 850d 	bge.w	23fb10e <__ieee754_pow+0xaae>
 23fa6f4:	9202      	str	r2, [sp, #8]
 23fa6f6:	ec47 6b10 	vmov	d0, r6, r7
 23fa6fa:	f7ff fcd9 	bl	23fa0b0 <fabs>
 23fa6fe:	9a02      	ldr	r2, [sp, #8]
 23fa700:	b94a      	cbnz	r2, 23fa716 <__ieee754_pow+0xb6>
 23fa702:	f029 4340 	bic.w	r3, r9, #3221225472	; 0xc0000000
 23fa706:	4a3d      	ldr	r2, [pc, #244]	; (23fa7fc <__ieee754_pow+0x19c>)
 23fa708:	4293      	cmp	r3, r2
 23fa70a:	f000 83a8 	beq.w	23fae5e <__ieee754_pow+0x7fe>
 23fa70e:	f1b8 0f00 	cmp.w	r8, #0
 23fa712:	f000 83a4 	beq.w	23fae5e <__ieee754_pow+0x7fe>
 23fa716:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 23fa71a:	9a00      	ldr	r2, [sp, #0]
 23fa71c:	3b01      	subs	r3, #1
 23fa71e:	9304      	str	r3, [sp, #16]
 23fa720:	4313      	orrs	r3, r2
 23fa722:	d04e      	beq.n	23fa7c2 <__ieee754_pow+0x162>
 23fa724:	4b37      	ldr	r3, [pc, #220]	; (23fa804 <__ieee754_pow+0x1a4>)
 23fa726:	459a      	cmp	sl, r3
 23fa728:	dd72      	ble.n	23fa810 <__ieee754_pow+0x1b0>
 23fa72a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 23fa72e:	459a      	cmp	sl, r3
 23fa730:	4b35      	ldr	r3, [pc, #212]	; (23fa808 <__ieee754_pow+0x1a8>)
 23fa732:	f340 842b 	ble.w	23faf8c <__ieee754_pow+0x92c>
 23fa736:	4598      	cmp	r8, r3
 23fa738:	f340 83a9 	ble.w	23fae8e <__ieee754_pow+0x82e>
 23fa73c:	f1bb 0f00 	cmp.w	fp, #0
 23fa740:	f340 83a9 	ble.w	23fae96 <__ieee754_pow+0x836>
 23fa744:	a328      	add	r3, pc, #160	; (adr r3, 23fa7e8 <__ieee754_pow+0x188>)
 23fa746:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa74a:	4610      	mov	r0, r2
 23fa74c:	4619      	mov	r1, r3
 23fa74e:	f7e9 f803 	bl	23e3758 <__aeabi_dmul>
 23fa752:	ec41 0b10 	vmov	d0, r0, r1
 23fa756:	e7b1      	b.n	23fa6bc <__ieee754_pow+0x5c>
 23fa758:	492c      	ldr	r1, [pc, #176]	; (23fa80c <__ieee754_pow+0x1ac>)
 23fa75a:	458a      	cmp	sl, r1
 23fa75c:	dc27      	bgt.n	23fa7ae <__ieee754_pow+0x14e>
 23fa75e:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 23fa762:	458a      	cmp	sl, r1
 23fa764:	ddb2      	ble.n	23fa6cc <__ieee754_pow+0x6c>
 23fa766:	ea4f 512a 	mov.w	r1, sl, asr #20
 23fa76a:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 23fa76e:	2914      	cmp	r1, #20
 23fa770:	f340 847d 	ble.w	23fb06e <__ieee754_pow+0xa0e>
 23fa774:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 23fa778:	fa23 f001 	lsr.w	r0, r3, r1
 23fa77c:	fa00 f101 	lsl.w	r1, r0, r1
 23fa780:	4299      	cmp	r1, r3
 23fa782:	d1a3      	bne.n	23fa6cc <__ieee754_pow+0x6c>
 23fa784:	f000 0001 	and.w	r0, r0, #1
 23fa788:	f1c0 0102 	rsb	r1, r0, #2
 23fa78c:	9100      	str	r1, [sp, #0]
 23fa78e:	e79f      	b.n	23fa6d0 <__ieee754_pow+0x70>
 23fa790:	4b19      	ldr	r3, [pc, #100]	; (23fa7f8 <__ieee754_pow+0x198>)
 23fa792:	4443      	add	r3, r8
 23fa794:	4313      	orrs	r3, r2
 23fa796:	d08f      	beq.n	23fa6b8 <__ieee754_pow+0x58>
 23fa798:	4b1b      	ldr	r3, [pc, #108]	; (23fa808 <__ieee754_pow+0x1a8>)
 23fa79a:	4598      	cmp	r8, r3
 23fa79c:	f340 83ab 	ble.w	23faef6 <__ieee754_pow+0x896>
 23fa7a0:	f1bb 0f00 	cmp.w	fp, #0
 23fa7a4:	f2c0 8377 	blt.w	23fae96 <__ieee754_pow+0x836>
 23fa7a8:	ec45 4b10 	vmov	d0, r4, r5
 23fa7ac:	e786      	b.n	23fa6bc <__ieee754_pow+0x5c>
 23fa7ae:	2102      	movs	r1, #2
 23fa7b0:	9100      	str	r1, [sp, #0]
 23fa7b2:	e78d      	b.n	23fa6d0 <__ieee754_pow+0x70>
 23fa7b4:	f1bb 0f00 	cmp.w	fp, #0
 23fa7b8:	f2c0 844f 	blt.w	23fb05a <__ieee754_pow+0x9fa>
 23fa7bc:	ec47 6b10 	vmov	d0, r6, r7
 23fa7c0:	e77c      	b.n	23fa6bc <__ieee754_pow+0x5c>
 23fa7c2:	4632      	mov	r2, r6
 23fa7c4:	463b      	mov	r3, r7
 23fa7c6:	4610      	mov	r0, r2
 23fa7c8:	4619      	mov	r1, r3
 23fa7ca:	f7e8 fe0d 	bl	23e33e8 <__aeabi_dsub>
 23fa7ce:	4602      	mov	r2, r0
 23fa7d0:	460b      	mov	r3, r1
 23fa7d2:	f7e9 f8eb 	bl	23e39ac <__aeabi_ddiv>
 23fa7d6:	ec41 0b10 	vmov	d0, r0, r1
 23fa7da:	e76f      	b.n	23fa6bc <__ieee754_pow+0x5c>
 23fa7dc:	f3af 8000 	nop.w
 23fa7e0:	00000000 	.word	0x00000000
 23fa7e4:	3ff00000 	.word	0x3ff00000
 23fa7e8:	8800759c 	.word	0x8800759c
 23fa7ec:	7e37e43c 	.word	0x7e37e43c
 23fa7f0:	7ff00000 	.word	0x7ff00000
 23fa7f4:	023ffba8 	.word	0x023ffba8
 23fa7f8:	c0100000 	.word	0xc0100000
 23fa7fc:	3ff00000 	.word	0x3ff00000
 23fa800:	3fe00000 	.word	0x3fe00000
 23fa804:	41e00000 	.word	0x41e00000
 23fa808:	3fefffff 	.word	0x3fefffff
 23fa80c:	433fffff 	.word	0x433fffff
 23fa810:	4be3      	ldr	r3, [pc, #908]	; (23faba0 <__ieee754_pow+0x540>)
 23fa812:	2200      	movs	r2, #0
 23fa814:	ea09 0303 	and.w	r3, r9, r3
 23fa818:	b953      	cbnz	r3, 23fa830 <__ieee754_pow+0x1d0>
 23fa81a:	4be2      	ldr	r3, [pc, #904]	; (23faba4 <__ieee754_pow+0x544>)
 23fa81c:	ec51 0b10 	vmov	r0, r1, d0
 23fa820:	f7e8 ff9a 	bl	23e3758 <__aeabi_dmul>
 23fa824:	f06f 0234 	mvn.w	r2, #52	; 0x34
 23fa828:	ec41 0b10 	vmov	d0, r0, r1
 23fa82c:	ee10 8a90 	vmov	r8, s1
 23fa830:	ea4f 5328 	mov.w	r3, r8, asr #20
 23fa834:	f3c8 0813 	ubfx	r8, r8, #0, #20
 23fa838:	4edb      	ldr	r6, [pc, #876]	; (23faba8 <__ieee754_pow+0x548>)
 23fa83a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 23fa83e:	ea48 0606 	orr.w	r6, r8, r6
 23fa842:	189a      	adds	r2, r3, r2
 23fa844:	4bd9      	ldr	r3, [pc, #868]	; (23fabac <__ieee754_pow+0x54c>)
 23fa846:	4598      	cmp	r8, r3
 23fa848:	9205      	str	r2, [sp, #20]
 23fa84a:	dd07      	ble.n	23fa85c <__ieee754_pow+0x1fc>
 23fa84c:	4bd8      	ldr	r3, [pc, #864]	; (23fabb0 <__ieee754_pow+0x550>)
 23fa84e:	4598      	cmp	r8, r3
 23fa850:	f340 8433 	ble.w	23fb0ba <__ieee754_pow+0xa5a>
 23fa854:	3201      	adds	r2, #1
 23fa856:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 23fa85a:	9205      	str	r2, [sp, #20]
 23fa85c:	2700      	movs	r7, #0
 23fa85e:	ed9f 7bb8 	vldr	d7, [pc, #736]	; 23fab40 <__ieee754_pow+0x4e0>
 23fa862:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 23fab48 <__ieee754_pow+0x4e8>
 23fa866:	eeb0 da47 	vmov.f32	s26, s14
 23fa86a:	eef0 da67 	vmov.f32	s27, s15
 23fa86e:	eeb0 ca47 	vmov.f32	s24, s14
 23fa872:	eef0 ca67 	vmov.f32	s25, s15
 23fa876:	ec51 0b16 	vmov	r0, r1, d6
 23fa87a:	ec53 2b10 	vmov	r2, r3, d0
 23fa87e:	4633      	mov	r3, r6
 23fa880:	1076      	asrs	r6, r6, #1
 23fa882:	ec43 2b19 	vmov	d9, r2, r3
 23fa886:	ec41 0b1a 	vmov	d10, r0, r1
 23fa88a:	4602      	mov	r2, r0
 23fa88c:	460b      	mov	r3, r1
 23fa88e:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 23fa892:	ec51 0b19 	vmov	r0, r1, d9
 23fa896:	f7e8 fda7 	bl	23e33e8 <__aeabi_dsub>
 23fa89a:	4680      	mov	r8, r0
 23fa89c:	4689      	mov	r9, r1
 23fa89e:	ec53 2b1a 	vmov	r2, r3, d10
 23fa8a2:	ec51 0b19 	vmov	r0, r1, d9
 23fa8a6:	f7e8 fda1 	bl	23e33ec <__adddf3>
 23fa8aa:	4602      	mov	r2, r0
 23fa8ac:	460b      	mov	r3, r1
 23fa8ae:	2000      	movs	r0, #0
 23fa8b0:	49bd      	ldr	r1, [pc, #756]	; (23faba8 <__ieee754_pow+0x548>)
 23fa8b2:	f7e9 f87b 	bl	23e39ac <__aeabi_ddiv>
 23fa8b6:	ec41 0b1b 	vmov	d11, r0, r1
 23fa8ba:	ec53 2b1b 	vmov	r2, r3, d11
 23fa8be:	4640      	mov	r0, r8
 23fa8c0:	4649      	mov	r1, r9
 23fa8c2:	f7e8 ff49 	bl	23e3758 <__aeabi_dmul>
 23fa8c6:	460a      	mov	r2, r1
 23fa8c8:	f506 2300 	add.w	r3, r6, #524288	; 0x80000
 23fa8cc:	ec41 0b18 	vmov	d8, r0, r1
 23fa8d0:	4601      	mov	r1, r0
 23fa8d2:	2000      	movs	r0, #0
 23fa8d4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 23fa8d8:	2100      	movs	r1, #0
 23fa8da:	4606      	mov	r6, r0
 23fa8dc:	4602      	mov	r2, r0
 23fa8de:	9102      	str	r1, [sp, #8]
 23fa8e0:	19d9      	adds	r1, r3, r7
 23fa8e2:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 23fa8e6:	460f      	mov	r7, r1
 23fa8e8:	460b      	mov	r3, r1
 23fa8ea:	4650      	mov	r0, sl
 23fa8ec:	4659      	mov	r1, fp
 23fa8ee:	f7e8 ff33 	bl	23e3758 <__aeabi_dmul>
 23fa8f2:	4602      	mov	r2, r0
 23fa8f4:	460b      	mov	r3, r1
 23fa8f6:	4640      	mov	r0, r8
 23fa8f8:	4649      	mov	r1, r9
 23fa8fa:	f7e8 fd75 	bl	23e33e8 <__aeabi_dsub>
 23fa8fe:	4680      	mov	r8, r0
 23fa900:	4689      	mov	r9, r1
 23fa902:	4630      	mov	r0, r6
 23fa904:	4639      	mov	r1, r7
 23fa906:	ec53 2b1a 	vmov	r2, r3, d10
 23fa90a:	f7e8 fd6d 	bl	23e33e8 <__aeabi_dsub>
 23fa90e:	4602      	mov	r2, r0
 23fa910:	460b      	mov	r3, r1
 23fa912:	ec51 0b19 	vmov	r0, r1, d9
 23fa916:	f7e8 fd67 	bl	23e33e8 <__aeabi_dsub>
 23fa91a:	4652      	mov	r2, sl
 23fa91c:	465b      	mov	r3, fp
 23fa91e:	f7e8 ff1b 	bl	23e3758 <__aeabi_dmul>
 23fa922:	4602      	mov	r2, r0
 23fa924:	460b      	mov	r3, r1
 23fa926:	4640      	mov	r0, r8
 23fa928:	4649      	mov	r1, r9
 23fa92a:	f7e8 fd5d 	bl	23e33e8 <__aeabi_dsub>
 23fa92e:	ec53 2b1b 	vmov	r2, r3, d11
 23fa932:	f7e8 ff11 	bl	23e3758 <__aeabi_dmul>
 23fa936:	ec53 2b18 	vmov	r2, r3, d8
 23fa93a:	ec41 0b1a 	vmov	d10, r0, r1
 23fa93e:	ec51 0b18 	vmov	r0, r1, d8
 23fa942:	f7e8 ff09 	bl	23e3758 <__aeabi_dmul>
 23fa946:	4606      	mov	r6, r0
 23fa948:	460f      	mov	r7, r1
 23fa94a:	a381      	add	r3, pc, #516	; (adr r3, 23fab50 <__ieee754_pow+0x4f0>)
 23fa94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa950:	f7e8 ff02 	bl	23e3758 <__aeabi_dmul>
 23fa954:	a380      	add	r3, pc, #512	; (adr r3, 23fab58 <__ieee754_pow+0x4f8>)
 23fa956:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa95a:	f7e8 fd47 	bl	23e33ec <__adddf3>
 23fa95e:	4632      	mov	r2, r6
 23fa960:	463b      	mov	r3, r7
 23fa962:	f7e8 fef9 	bl	23e3758 <__aeabi_dmul>
 23fa966:	a37e      	add	r3, pc, #504	; (adr r3, 23fab60 <__ieee754_pow+0x500>)
 23fa968:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa96c:	f7e8 fd3e 	bl	23e33ec <__adddf3>
 23fa970:	4632      	mov	r2, r6
 23fa972:	463b      	mov	r3, r7
 23fa974:	f7e8 fef0 	bl	23e3758 <__aeabi_dmul>
 23fa978:	a37b      	add	r3, pc, #492	; (adr r3, 23fab68 <__ieee754_pow+0x508>)
 23fa97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa97e:	f7e8 fd35 	bl	23e33ec <__adddf3>
 23fa982:	4632      	mov	r2, r6
 23fa984:	463b      	mov	r3, r7
 23fa986:	f7e8 fee7 	bl	23e3758 <__aeabi_dmul>
 23fa98a:	a379      	add	r3, pc, #484	; (adr r3, 23fab70 <__ieee754_pow+0x510>)
 23fa98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa990:	f7e8 fd2c 	bl	23e33ec <__adddf3>
 23fa994:	4632      	mov	r2, r6
 23fa996:	463b      	mov	r3, r7
 23fa998:	f7e8 fede 	bl	23e3758 <__aeabi_dmul>
 23fa99c:	a376      	add	r3, pc, #472	; (adr r3, 23fab78 <__ieee754_pow+0x518>)
 23fa99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa9a2:	f7e8 fd23 	bl	23e33ec <__adddf3>
 23fa9a6:	4680      	mov	r8, r0
 23fa9a8:	4689      	mov	r9, r1
 23fa9aa:	4632      	mov	r2, r6
 23fa9ac:	463b      	mov	r3, r7
 23fa9ae:	4630      	mov	r0, r6
 23fa9b0:	4639      	mov	r1, r7
 23fa9b2:	f7e8 fed1 	bl	23e3758 <__aeabi_dmul>
 23fa9b6:	4602      	mov	r2, r0
 23fa9b8:	460b      	mov	r3, r1
 23fa9ba:	4640      	mov	r0, r8
 23fa9bc:	4649      	mov	r1, r9
 23fa9be:	f04f 0800 	mov.w	r8, #0
 23fa9c2:	f7e8 fec9 	bl	23e3758 <__aeabi_dmul>
 23fa9c6:	4652      	mov	r2, sl
 23fa9c8:	4606      	mov	r6, r0
 23fa9ca:	460f      	mov	r7, r1
 23fa9cc:	465b      	mov	r3, fp
 23fa9ce:	ec51 0b18 	vmov	r0, r1, d8
 23fa9d2:	f7e8 fd0b 	bl	23e33ec <__adddf3>
 23fa9d6:	ec53 2b1a 	vmov	r2, r3, d10
 23fa9da:	f7e8 febd 	bl	23e3758 <__aeabi_dmul>
 23fa9de:	4632      	mov	r2, r6
 23fa9e0:	463b      	mov	r3, r7
 23fa9e2:	f7e8 fd03 	bl	23e33ec <__adddf3>
 23fa9e6:	4652      	mov	r2, sl
 23fa9e8:	465b      	mov	r3, fp
 23fa9ea:	ec41 0b19 	vmov	d9, r0, r1
 23fa9ee:	4650      	mov	r0, sl
 23fa9f0:	4659      	mov	r1, fp
 23fa9f2:	f7e8 feb1 	bl	23e3758 <__aeabi_dmul>
 23fa9f6:	2200      	movs	r2, #0
 23fa9f8:	4b6e      	ldr	r3, [pc, #440]	; (23fabb4 <__ieee754_pow+0x554>)
 23fa9fa:	4606      	mov	r6, r0
 23fa9fc:	460f      	mov	r7, r1
 23fa9fe:	f7e8 fcf5 	bl	23e33ec <__adddf3>
 23faa02:	ec53 2b19 	vmov	r2, r3, d9
 23faa06:	f7e8 fcf1 	bl	23e33ec <__adddf3>
 23faa0a:	4689      	mov	r9, r1
 23faa0c:	4642      	mov	r2, r8
 23faa0e:	4650      	mov	r0, sl
 23faa10:	464b      	mov	r3, r9
 23faa12:	4659      	mov	r1, fp
 23faa14:	f7e8 fea0 	bl	23e3758 <__aeabi_dmul>
 23faa18:	2200      	movs	r2, #0
 23faa1a:	4682      	mov	sl, r0
 23faa1c:	468b      	mov	fp, r1
 23faa1e:	4b65      	ldr	r3, [pc, #404]	; (23fabb4 <__ieee754_pow+0x554>)
 23faa20:	4640      	mov	r0, r8
 23faa22:	4649      	mov	r1, r9
 23faa24:	f7e8 fce0 	bl	23e33e8 <__aeabi_dsub>
 23faa28:	4632      	mov	r2, r6
 23faa2a:	463b      	mov	r3, r7
 23faa2c:	f7e8 fcdc 	bl	23e33e8 <__aeabi_dsub>
 23faa30:	4602      	mov	r2, r0
 23faa32:	460b      	mov	r3, r1
 23faa34:	ec51 0b19 	vmov	r0, r1, d9
 23faa38:	f7e8 fcd6 	bl	23e33e8 <__aeabi_dsub>
 23faa3c:	ec53 2b18 	vmov	r2, r3, d8
 23faa40:	f7e8 fe8a 	bl	23e3758 <__aeabi_dmul>
 23faa44:	4606      	mov	r6, r0
 23faa46:	460f      	mov	r7, r1
 23faa48:	4642      	mov	r2, r8
 23faa4a:	464b      	mov	r3, r9
 23faa4c:	ec51 0b1a 	vmov	r0, r1, d10
 23faa50:	f7e8 fe82 	bl	23e3758 <__aeabi_dmul>
 23faa54:	4602      	mov	r2, r0
 23faa56:	460b      	mov	r3, r1
 23faa58:	4630      	mov	r0, r6
 23faa5a:	4639      	mov	r1, r7
 23faa5c:	f7e8 fcc6 	bl	23e33ec <__adddf3>
 23faa60:	4680      	mov	r8, r0
 23faa62:	4689      	mov	r9, r1
 23faa64:	4650      	mov	r0, sl
 23faa66:	4642      	mov	r2, r8
 23faa68:	4659      	mov	r1, fp
 23faa6a:	464b      	mov	r3, r9
 23faa6c:	f7e8 fcbe 	bl	23e33ec <__adddf3>
 23faa70:	2000      	movs	r0, #0
 23faa72:	460f      	mov	r7, r1
 23faa74:	4606      	mov	r6, r0
 23faa76:	a342      	add	r3, pc, #264	; (adr r3, 23fab80 <__ieee754_pow+0x520>)
 23faa78:	e9d3 2300 	ldrd	r2, r3, [r3]
 23faa7c:	f7e8 fe6c 	bl	23e3758 <__aeabi_dmul>
 23faa80:	4652      	mov	r2, sl
 23faa82:	465b      	mov	r3, fp
 23faa84:	ec41 0b19 	vmov	d9, r0, r1
 23faa88:	4630      	mov	r0, r6
 23faa8a:	4639      	mov	r1, r7
 23faa8c:	f7e8 fcac 	bl	23e33e8 <__aeabi_dsub>
 23faa90:	4602      	mov	r2, r0
 23faa92:	460b      	mov	r3, r1
 23faa94:	4640      	mov	r0, r8
 23faa96:	4649      	mov	r1, r9
 23faa98:	f7e8 fca6 	bl	23e33e8 <__aeabi_dsub>
 23faa9c:	a33a      	add	r3, pc, #232	; (adr r3, 23fab88 <__ieee754_pow+0x528>)
 23faa9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23faaa2:	f7e8 fe59 	bl	23e3758 <__aeabi_dmul>
 23faaa6:	4680      	mov	r8, r0
 23faaa8:	4689      	mov	r9, r1
 23faaaa:	4630      	mov	r0, r6
 23faaac:	4639      	mov	r1, r7
 23faaae:	a338      	add	r3, pc, #224	; (adr r3, 23fab90 <__ieee754_pow+0x530>)
 23faab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23faab4:	f7e8 fe50 	bl	23e3758 <__aeabi_dmul>
 23faab8:	4602      	mov	r2, r0
 23faaba:	460b      	mov	r3, r1
 23faabc:	4640      	mov	r0, r8
 23faabe:	4649      	mov	r1, r9
 23faac0:	f7e8 fc94 	bl	23e33ec <__adddf3>
 23faac4:	ec53 2b1c 	vmov	r2, r3, d12
 23faac8:	f7e8 fc90 	bl	23e33ec <__adddf3>
 23faacc:	4606      	mov	r6, r0
 23faace:	460f      	mov	r7, r1
 23faad0:	9805      	ldr	r0, [sp, #20]
 23faad2:	f7e8 fdd7 	bl	23e3684 <__aeabi_i2d>
 23faad6:	4632      	mov	r2, r6
 23faad8:	4680      	mov	r8, r0
 23faada:	4689      	mov	r9, r1
 23faadc:	463b      	mov	r3, r7
 23faade:	ec51 0b19 	vmov	r0, r1, d9
 23faae2:	f7e8 fc83 	bl	23e33ec <__adddf3>
 23faae6:	ec53 2b1d 	vmov	r2, r3, d13
 23faaea:	f7e8 fc7f 	bl	23e33ec <__adddf3>
 23faaee:	4642      	mov	r2, r8
 23faaf0:	464b      	mov	r3, r9
 23faaf2:	f7e8 fc7b 	bl	23e33ec <__adddf3>
 23faaf6:	2000      	movs	r0, #0
 23faaf8:	4642      	mov	r2, r8
 23faafa:	464b      	mov	r3, r9
 23faafc:	4682      	mov	sl, r0
 23faafe:	468b      	mov	fp, r1
 23fab00:	f7e8 fc72 	bl	23e33e8 <__aeabi_dsub>
 23fab04:	ec53 2b1d 	vmov	r2, r3, d13
 23fab08:	f7e8 fc6e 	bl	23e33e8 <__aeabi_dsub>
 23fab0c:	ec53 2b19 	vmov	r2, r3, d9
 23fab10:	f7e8 fc6a 	bl	23e33e8 <__aeabi_dsub>
 23fab14:	4602      	mov	r2, r0
 23fab16:	460b      	mov	r3, r1
 23fab18:	4630      	mov	r0, r6
 23fab1a:	4639      	mov	r1, r7
 23fab1c:	f7e8 fc64 	bl	23e33e8 <__aeabi_dsub>
 23fab20:	9b00      	ldr	r3, [sp, #0]
 23fab22:	9a04      	ldr	r2, [sp, #16]
 23fab24:	3b01      	subs	r3, #1
 23fab26:	4313      	orrs	r3, r2
 23fab28:	ec41 0b18 	vmov	d8, r0, r1
 23fab2c:	f040 81dc 	bne.w	23faee8 <__ieee754_pow+0x888>
 23fab30:	ed9f 7b19 	vldr	d7, [pc, #100]	; 23fab98 <__ieee754_pow+0x538>
 23fab34:	eeb0 9a47 	vmov.f32	s18, s14
 23fab38:	eef0 9a67 	vmov.f32	s19, s15
 23fab3c:	e03c      	b.n	23fabb8 <__ieee754_pow+0x558>
 23fab3e:	bf00      	nop
	...
 23fab4c:	3ff00000 	.word	0x3ff00000
 23fab50:	4a454eef 	.word	0x4a454eef
 23fab54:	3fca7e28 	.word	0x3fca7e28
 23fab58:	93c9db65 	.word	0x93c9db65
 23fab5c:	3fcd864a 	.word	0x3fcd864a
 23fab60:	a91d4101 	.word	0xa91d4101
 23fab64:	3fd17460 	.word	0x3fd17460
 23fab68:	518f264d 	.word	0x518f264d
 23fab6c:	3fd55555 	.word	0x3fd55555
 23fab70:	db6fabff 	.word	0xdb6fabff
 23fab74:	3fdb6db6 	.word	0x3fdb6db6
 23fab78:	33333303 	.word	0x33333303
 23fab7c:	3fe33333 	.word	0x3fe33333
 23fab80:	e0000000 	.word	0xe0000000
 23fab84:	3feec709 	.word	0x3feec709
 23fab88:	dc3a03fd 	.word	0xdc3a03fd
 23fab8c:	3feec709 	.word	0x3feec709
 23fab90:	145b01f5 	.word	0x145b01f5
 23fab94:	be3e2fe0 	.word	0xbe3e2fe0
 23fab98:	00000000 	.word	0x00000000
 23fab9c:	bff00000 	.word	0xbff00000
 23faba0:	7ff00000 	.word	0x7ff00000
 23faba4:	43400000 	.word	0x43400000
 23faba8:	3ff00000 	.word	0x3ff00000
 23fabac:	0003988e 	.word	0x0003988e
 23fabb0:	000bb679 	.word	0x000bb679
 23fabb4:	40080000 	.word	0x40080000
 23fabb8:	2300      	movs	r3, #0
 23fabba:	4620      	mov	r0, r4
 23fabbc:	4629      	mov	r1, r5
 23fabbe:	e9cd 4500 	strd	r4, r5, [sp]
 23fabc2:	9300      	str	r3, [sp, #0]
 23fabc4:	e9dd 8900 	ldrd	r8, r9, [sp]
 23fabc8:	4642      	mov	r2, r8
 23fabca:	464b      	mov	r3, r9
 23fabcc:	f7e8 fc0c 	bl	23e33e8 <__aeabi_dsub>
 23fabd0:	465b      	mov	r3, fp
 23fabd2:	4652      	mov	r2, sl
 23fabd4:	f7e8 fdc0 	bl	23e3758 <__aeabi_dmul>
 23fabd8:	4606      	mov	r6, r0
 23fabda:	460f      	mov	r7, r1
 23fabdc:	4622      	mov	r2, r4
 23fabde:	462b      	mov	r3, r5
 23fabe0:	ec51 0b18 	vmov	r0, r1, d8
 23fabe4:	f7e8 fdb8 	bl	23e3758 <__aeabi_dmul>
 23fabe8:	4602      	mov	r2, r0
 23fabea:	460b      	mov	r3, r1
 23fabec:	4630      	mov	r0, r6
 23fabee:	4639      	mov	r1, r7
 23fabf0:	f7e8 fbfc 	bl	23e33ec <__adddf3>
 23fabf4:	4642      	mov	r2, r8
 23fabf6:	4604      	mov	r4, r0
 23fabf8:	460d      	mov	r5, r1
 23fabfa:	464b      	mov	r3, r9
 23fabfc:	4659      	mov	r1, fp
 23fabfe:	4650      	mov	r0, sl
 23fac00:	46a0      	mov	r8, r4
 23fac02:	f7e8 fda9 	bl	23e3758 <__aeabi_dmul>
 23fac06:	4606      	mov	r6, r0
 23fac08:	460f      	mov	r7, r1
 23fac0a:	4620      	mov	r0, r4
 23fac0c:	4629      	mov	r1, r5
 23fac0e:	4632      	mov	r2, r6
 23fac10:	463b      	mov	r3, r7
 23fac12:	46a9      	mov	r9, r5
 23fac14:	f7e8 fbea 	bl	23e33ec <__adddf3>
 23fac18:	4bd5      	ldr	r3, [pc, #852]	; (23faf70 <__ieee754_pow+0x910>)
 23fac1a:	4604      	mov	r4, r0
 23fac1c:	460d      	mov	r5, r1
 23fac1e:	4299      	cmp	r1, r3
 23fac20:	468b      	mov	fp, r1
 23fac22:	f340 813b 	ble.w	23fae9c <__ieee754_pow+0x83c>
 23fac26:	4bd3      	ldr	r3, [pc, #844]	; (23faf74 <__ieee754_pow+0x914>)
 23fac28:	440b      	add	r3, r1
 23fac2a:	4303      	orrs	r3, r0
 23fac2c:	f040 8235 	bne.w	23fb09a <__ieee754_pow+0xa3a>
 23fac30:	4640      	mov	r0, r8
 23fac32:	4649      	mov	r1, r9
 23fac34:	a3b6      	add	r3, pc, #728	; (adr r3, 23faf10 <__ieee754_pow+0x8b0>)
 23fac36:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fac3a:	f7e8 fbd7 	bl	23e33ec <__adddf3>
 23fac3e:	4632      	mov	r2, r6
 23fac40:	463b      	mov	r3, r7
 23fac42:	ec41 0b18 	vmov	d8, r0, r1
 23fac46:	4620      	mov	r0, r4
 23fac48:	4629      	mov	r1, r5
 23fac4a:	f7e8 fbcd 	bl	23e33e8 <__aeabi_dsub>
 23fac4e:	4602      	mov	r2, r0
 23fac50:	460b      	mov	r3, r1
 23fac52:	ec51 0b18 	vmov	r0, r1, d8
 23fac56:	f7e9 f80f 	bl	23e3c78 <__aeabi_dcmpgt>
 23fac5a:	2800      	cmp	r0, #0
 23fac5c:	f040 821d 	bne.w	23fb09a <__ieee754_pow+0xa3a>
 23fac60:	f3cb 530a 	ubfx	r3, fp, #20, #11
 23fac64:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 23fac68:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 23fac6c:	4cc2      	ldr	r4, [pc, #776]	; (23faf78 <__ieee754_pow+0x918>)
 23fac6e:	f1bb 0f00 	cmp.w	fp, #0
 23fac72:	fa42 f303 	asr.w	r3, r2, r3
 23fac76:	f04f 0000 	mov.w	r0, #0
 23fac7a:	445b      	add	r3, fp
 23fac7c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 23fac80:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 23fac84:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 23fac88:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 23fac8c:	fa44 f402 	asr.w	r4, r4, r2
 23fac90:	f1c2 0214 	rsb	r2, r2, #20
 23fac94:	ea23 0104 	bic.w	r1, r3, r4
 23fac98:	fa4a fa02 	asr.w	sl, sl, r2
 23fac9c:	4602      	mov	r2, r0
 23fac9e:	4630      	mov	r0, r6
 23faca0:	460b      	mov	r3, r1
 23faca2:	bfb8      	it	lt
 23faca4:	f1ca 0a00 	rsblt	sl, sl, #0
 23faca8:	4639      	mov	r1, r7
 23facaa:	f7e8 fb9d 	bl	23e33e8 <__aeabi_dsub>
 23facae:	4602      	mov	r2, r0
 23facb0:	460b      	mov	r3, r1
 23facb2:	4606      	mov	r6, r0
 23facb4:	460f      	mov	r7, r1
 23facb6:	4640      	mov	r0, r8
 23facb8:	4649      	mov	r1, r9
 23facba:	ea4f 5b0a 	mov.w	fp, sl, lsl #20
 23facbe:	f7e8 fb95 	bl	23e33ec <__adddf3>
 23facc2:	460d      	mov	r5, r1
 23facc4:	2400      	movs	r4, #0
 23facc6:	4629      	mov	r1, r5
 23facc8:	a393      	add	r3, pc, #588	; (adr r3, 23faf18 <__ieee754_pow+0x8b8>)
 23facca:	e9d3 2300 	ldrd	r2, r3, [r3]
 23facce:	4620      	mov	r0, r4
 23facd0:	f7e8 fd42 	bl	23e3758 <__aeabi_dmul>
 23facd4:	4632      	mov	r2, r6
 23facd6:	463b      	mov	r3, r7
 23facd8:	4606      	mov	r6, r0
 23facda:	460f      	mov	r7, r1
 23facdc:	4620      	mov	r0, r4
 23facde:	4629      	mov	r1, r5
 23face0:	f7e8 fb82 	bl	23e33e8 <__aeabi_dsub>
 23face4:	4602      	mov	r2, r0
 23face6:	460b      	mov	r3, r1
 23face8:	4640      	mov	r0, r8
 23facea:	4649      	mov	r1, r9
 23facec:	f7e8 fb7c 	bl	23e33e8 <__aeabi_dsub>
 23facf0:	a38b      	add	r3, pc, #556	; (adr r3, 23faf20 <__ieee754_pow+0x8c0>)
 23facf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23facf6:	f7e8 fd2f 	bl	23e3758 <__aeabi_dmul>
 23facfa:	4680      	mov	r8, r0
 23facfc:	4689      	mov	r9, r1
 23facfe:	4620      	mov	r0, r4
 23fad00:	4629      	mov	r1, r5
 23fad02:	a389      	add	r3, pc, #548	; (adr r3, 23faf28 <__ieee754_pow+0x8c8>)
 23fad04:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fad08:	f7e8 fd26 	bl	23e3758 <__aeabi_dmul>
 23fad0c:	4602      	mov	r2, r0
 23fad0e:	460b      	mov	r3, r1
 23fad10:	4640      	mov	r0, r8
 23fad12:	4649      	mov	r1, r9
 23fad14:	f7e8 fb6a 	bl	23e33ec <__adddf3>
 23fad18:	4680      	mov	r8, r0
 23fad1a:	4689      	mov	r9, r1
 23fad1c:	4630      	mov	r0, r6
 23fad1e:	4642      	mov	r2, r8
 23fad20:	4639      	mov	r1, r7
 23fad22:	464b      	mov	r3, r9
 23fad24:	f7e8 fb62 	bl	23e33ec <__adddf3>
 23fad28:	4632      	mov	r2, r6
 23fad2a:	4604      	mov	r4, r0
 23fad2c:	460d      	mov	r5, r1
 23fad2e:	463b      	mov	r3, r7
 23fad30:	f7e8 fb5a 	bl	23e33e8 <__aeabi_dsub>
 23fad34:	4602      	mov	r2, r0
 23fad36:	460b      	mov	r3, r1
 23fad38:	4640      	mov	r0, r8
 23fad3a:	4649      	mov	r1, r9
 23fad3c:	f7e8 fb54 	bl	23e33e8 <__aeabi_dsub>
 23fad40:	4622      	mov	r2, r4
 23fad42:	4680      	mov	r8, r0
 23fad44:	4689      	mov	r9, r1
 23fad46:	462b      	mov	r3, r5
 23fad48:	4620      	mov	r0, r4
 23fad4a:	4629      	mov	r1, r5
 23fad4c:	f7e8 fd04 	bl	23e3758 <__aeabi_dmul>
 23fad50:	4606      	mov	r6, r0
 23fad52:	460f      	mov	r7, r1
 23fad54:	a376      	add	r3, pc, #472	; (adr r3, 23faf30 <__ieee754_pow+0x8d0>)
 23fad56:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fad5a:	f7e8 fcfd 	bl	23e3758 <__aeabi_dmul>
 23fad5e:	a376      	add	r3, pc, #472	; (adr r3, 23faf38 <__ieee754_pow+0x8d8>)
 23fad60:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fad64:	f7e8 fb40 	bl	23e33e8 <__aeabi_dsub>
 23fad68:	4632      	mov	r2, r6
 23fad6a:	463b      	mov	r3, r7
 23fad6c:	f7e8 fcf4 	bl	23e3758 <__aeabi_dmul>
 23fad70:	a373      	add	r3, pc, #460	; (adr r3, 23faf40 <__ieee754_pow+0x8e0>)
 23fad72:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fad76:	f7e8 fb39 	bl	23e33ec <__adddf3>
 23fad7a:	4632      	mov	r2, r6
 23fad7c:	463b      	mov	r3, r7
 23fad7e:	f7e8 fceb 	bl	23e3758 <__aeabi_dmul>
 23fad82:	a371      	add	r3, pc, #452	; (adr r3, 23faf48 <__ieee754_pow+0x8e8>)
 23fad84:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fad88:	f7e8 fb2e 	bl	23e33e8 <__aeabi_dsub>
 23fad8c:	4632      	mov	r2, r6
 23fad8e:	463b      	mov	r3, r7
 23fad90:	f7e8 fce2 	bl	23e3758 <__aeabi_dmul>
 23fad94:	a36e      	add	r3, pc, #440	; (adr r3, 23faf50 <__ieee754_pow+0x8f0>)
 23fad96:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fad9a:	f7e8 fb27 	bl	23e33ec <__adddf3>
 23fad9e:	4632      	mov	r2, r6
 23fada0:	463b      	mov	r3, r7
 23fada2:	f7e8 fcd9 	bl	23e3758 <__aeabi_dmul>
 23fada6:	4602      	mov	r2, r0
 23fada8:	460b      	mov	r3, r1
 23fadaa:	4620      	mov	r0, r4
 23fadac:	4629      	mov	r1, r5
 23fadae:	f7e8 fb1b 	bl	23e33e8 <__aeabi_dsub>
 23fadb2:	4606      	mov	r6, r0
 23fadb4:	460f      	mov	r7, r1
 23fadb6:	4620      	mov	r0, r4
 23fadb8:	4632      	mov	r2, r6
 23fadba:	4629      	mov	r1, r5
 23fadbc:	463b      	mov	r3, r7
 23fadbe:	f7e8 fccb 	bl	23e3758 <__aeabi_dmul>
 23fadc2:	2200      	movs	r2, #0
 23fadc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 23fadc8:	ec41 0b18 	vmov	d8, r0, r1
 23fadcc:	4630      	mov	r0, r6
 23fadce:	4639      	mov	r1, r7
 23fadd0:	f7e8 fb0a 	bl	23e33e8 <__aeabi_dsub>
 23fadd4:	4602      	mov	r2, r0
 23fadd6:	460b      	mov	r3, r1
 23fadd8:	ec51 0b18 	vmov	r0, r1, d8
 23faddc:	f7e8 fde6 	bl	23e39ac <__aeabi_ddiv>
 23fade0:	4642      	mov	r2, r8
 23fade2:	4606      	mov	r6, r0
 23fade4:	460f      	mov	r7, r1
 23fade6:	464b      	mov	r3, r9
 23fade8:	4620      	mov	r0, r4
 23fadea:	4629      	mov	r1, r5
 23fadec:	f7e8 fcb4 	bl	23e3758 <__aeabi_dmul>
 23fadf0:	4642      	mov	r2, r8
 23fadf2:	464b      	mov	r3, r9
 23fadf4:	f7e8 fafa 	bl	23e33ec <__adddf3>
 23fadf8:	4602      	mov	r2, r0
 23fadfa:	460b      	mov	r3, r1
 23fadfc:	4630      	mov	r0, r6
 23fadfe:	4639      	mov	r1, r7
 23fae00:	f7e8 faf2 	bl	23e33e8 <__aeabi_dsub>
 23fae04:	4622      	mov	r2, r4
 23fae06:	462b      	mov	r3, r5
 23fae08:	f7e8 faee 	bl	23e33e8 <__aeabi_dsub>
 23fae0c:	4602      	mov	r2, r0
 23fae0e:	460b      	mov	r3, r1
 23fae10:	2000      	movs	r0, #0
 23fae12:	495a      	ldr	r1, [pc, #360]	; (23faf7c <__ieee754_pow+0x91c>)
 23fae14:	f7e8 fae8 	bl	23e33e8 <__aeabi_dsub>
 23fae18:	448b      	add	fp, r1
 23fae1a:	4602      	mov	r2, r0
 23fae1c:	460b      	mov	r3, r1
 23fae1e:	f5bb 1f80 	cmp.w	fp, #1048576	; 0x100000
 23fae22:	f2c0 816c 	blt.w	23fb0fe <__ieee754_pow+0xa9e>
 23fae26:	4659      	mov	r1, fp
 23fae28:	ec53 2b19 	vmov	r2, r3, d9
 23fae2c:	f7e8 fc94 	bl	23e3758 <__aeabi_dmul>
 23fae30:	ec41 0b10 	vmov	d0, r0, r1
 23fae34:	e442      	b.n	23fa6bc <__ieee754_pow+0x5c>
 23fae36:	ec47 6b10 	vmov	d0, r6, r7
 23fae3a:	9200      	str	r2, [sp, #0]
 23fae3c:	f7ff f938 	bl	23fa0b0 <fabs>
 23fae40:	9a00      	ldr	r2, [sp, #0]
 23fae42:	2a00      	cmp	r2, #0
 23fae44:	f47f acbd 	bne.w	23fa7c2 <__ieee754_pow+0x162>
 23fae48:	f029 4340 	bic.w	r3, r9, #3221225472	; 0xc0000000
 23fae4c:	4a4b      	ldr	r2, [pc, #300]	; (23faf7c <__ieee754_pow+0x91c>)
 23fae4e:	4293      	cmp	r3, r2
 23fae50:	d003      	beq.n	23fae5a <__ieee754_pow+0x7fa>
 23fae52:	f1b8 0f00 	cmp.w	r8, #0
 23fae56:	f47f acb4 	bne.w	23fa7c2 <__ieee754_pow+0x162>
 23fae5a:	2300      	movs	r3, #0
 23fae5c:	9300      	str	r3, [sp, #0]
 23fae5e:	f1bb 0f00 	cmp.w	fp, #0
 23fae62:	da07      	bge.n	23fae74 <__ieee754_pow+0x814>
 23fae64:	2000      	movs	r0, #0
 23fae66:	4945      	ldr	r1, [pc, #276]	; (23faf7c <__ieee754_pow+0x91c>)
 23fae68:	ec53 2b10 	vmov	r2, r3, d0
 23fae6c:	f7e8 fd9e 	bl	23e39ac <__aeabi_ddiv>
 23fae70:	ec41 0b10 	vmov	d0, r0, r1
 23fae74:	f1b9 0f00 	cmp.w	r9, #0
 23fae78:	f6bf ac20 	bge.w	23fa6bc <__ieee754_pow+0x5c>
 23fae7c:	4b40      	ldr	r3, [pc, #256]	; (23faf80 <__ieee754_pow+0x920>)
 23fae7e:	9a00      	ldr	r2, [sp, #0]
 23fae80:	4443      	add	r3, r8
 23fae82:	4313      	orrs	r3, r2
 23fae84:	f040 812d 	bne.w	23fb0e2 <__ieee754_pow+0xa82>
 23fae88:	ec53 2b10 	vmov	r2, r3, d0
 23fae8c:	e49b      	b.n	23fa7c6 <__ieee754_pow+0x166>
 23fae8e:	f1bb 0f00 	cmp.w	fp, #0
 23fae92:	f6ff ac57 	blt.w	23fa744 <__ieee754_pow+0xe4>
 23fae96:	ed9f 0b30 	vldr	d0, [pc, #192]	; 23faf58 <__ieee754_pow+0x8f8>
 23fae9a:	e40f      	b.n	23fa6bc <__ieee754_pow+0x5c>
 23fae9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23faea0:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 23faf88 <__ieee754_pow+0x928>
 23faea4:	4563      	cmp	r3, ip
 23faea6:	f340 80f0 	ble.w	23fb08a <__ieee754_pow+0xa2a>
 23faeaa:	4b36      	ldr	r3, [pc, #216]	; (23faf84 <__ieee754_pow+0x924>)
 23faeac:	440b      	add	r3, r1
 23faeae:	4303      	orrs	r3, r0
 23faeb0:	d10a      	bne.n	23faec8 <__ieee754_pow+0x868>
 23faeb2:	4632      	mov	r2, r6
 23faeb4:	463b      	mov	r3, r7
 23faeb6:	f7e8 fa97 	bl	23e33e8 <__aeabi_dsub>
 23faeba:	4642      	mov	r2, r8
 23faebc:	464b      	mov	r3, r9
 23faebe:	f7e8 fed1 	bl	23e3c64 <__aeabi_dcmpge>
 23faec2:	2800      	cmp	r0, #0
 23faec4:	f43f aecc 	beq.w	23fac60 <__ieee754_pow+0x600>
 23faec8:	a325      	add	r3, pc, #148	; (adr r3, 23faf60 <__ieee754_pow+0x900>)
 23faeca:	e9d3 2300 	ldrd	r2, r3, [r3]
 23faece:	ec51 0b19 	vmov	r0, r1, d9
 23faed2:	f7e8 fc41 	bl	23e3758 <__aeabi_dmul>
 23faed6:	a322      	add	r3, pc, #136	; (adr r3, 23faf60 <__ieee754_pow+0x900>)
 23faed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23faedc:	f7e8 fc3c 	bl	23e3758 <__aeabi_dmul>
 23faee0:	ec41 0b10 	vmov	d0, r0, r1
 23faee4:	f7ff bbea 	b.w	23fa6bc <__ieee754_pow+0x5c>
 23faee8:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 23faf68 <__ieee754_pow+0x908>
 23faeec:	eeb0 9a47 	vmov.f32	s18, s14
 23faef0:	eef0 9a67 	vmov.f32	s19, s15
 23faef4:	e660      	b.n	23fabb8 <__ieee754_pow+0x558>
 23faef6:	f1bb 0f00 	cmp.w	fp, #0
 23faefa:	dacc      	bge.n	23fae96 <__ieee754_pow+0x836>
 23faefc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 23faf00:	ee00 4a10 	vmov	s0, r4
 23faf04:	ee00 3a90 	vmov	s1, r3
 23faf08:	f7ff bbd8 	b.w	23fa6bc <__ieee754_pow+0x5c>
 23faf0c:	f3af 8000 	nop.w
 23faf10:	652b82fe 	.word	0x652b82fe
 23faf14:	3c971547 	.word	0x3c971547
 23faf18:	00000000 	.word	0x00000000
 23faf1c:	3fe62e43 	.word	0x3fe62e43
 23faf20:	fefa39ef 	.word	0xfefa39ef
 23faf24:	3fe62e42 	.word	0x3fe62e42
 23faf28:	0ca86c39 	.word	0x0ca86c39
 23faf2c:	be205c61 	.word	0xbe205c61
 23faf30:	72bea4d0 	.word	0x72bea4d0
 23faf34:	3e663769 	.word	0x3e663769
 23faf38:	c5d26bf1 	.word	0xc5d26bf1
 23faf3c:	3ebbbd41 	.word	0x3ebbbd41
 23faf40:	af25de2c 	.word	0xaf25de2c
 23faf44:	3f11566a 	.word	0x3f11566a
 23faf48:	16bebd93 	.word	0x16bebd93
 23faf4c:	3f66c16c 	.word	0x3f66c16c
 23faf50:	5555553e 	.word	0x5555553e
 23faf54:	3fc55555 	.word	0x3fc55555
	...
 23faf60:	c2f8f359 	.word	0xc2f8f359
 23faf64:	01a56e1f 	.word	0x01a56e1f
 23faf68:	00000000 	.word	0x00000000
 23faf6c:	3ff00000 	.word	0x3ff00000
 23faf70:	408fffff 	.word	0x408fffff
 23faf74:	bf700000 	.word	0xbf700000
 23faf78:	000fffff 	.word	0x000fffff
 23faf7c:	3ff00000 	.word	0x3ff00000
 23faf80:	c0100000 	.word	0xc0100000
 23faf84:	3f6f3400 	.word	0x3f6f3400
 23faf88:	4090cbff 	.word	0x4090cbff
 23faf8c:	4598      	cmp	r8, r3
 23faf8e:	f6ff af7e 	blt.w	23fae8e <__ieee754_pow+0x82e>
 23faf92:	4b79      	ldr	r3, [pc, #484]	; (23fb178 <__ieee754_pow+0xb18>)
 23faf94:	4598      	cmp	r8, r3
 23faf96:	f73f abd1 	bgt.w	23fa73c <__ieee754_pow+0xdc>
 23faf9a:	2200      	movs	r2, #0
 23faf9c:	4b76      	ldr	r3, [pc, #472]	; (23fb178 <__ieee754_pow+0xb18>)
 23faf9e:	ec51 0b10 	vmov	r0, r1, d0
 23fafa2:	f7e8 fa21 	bl	23e33e8 <__aeabi_dsub>
 23fafa6:	4606      	mov	r6, r0
 23fafa8:	460f      	mov	r7, r1
 23fafaa:	a363      	add	r3, pc, #396	; (adr r3, 23fb138 <__ieee754_pow+0xad8>)
 23fafac:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fafb0:	f7e8 fbd2 	bl	23e3758 <__aeabi_dmul>
 23fafb4:	4682      	mov	sl, r0
 23fafb6:	468b      	mov	fp, r1
 23fafb8:	4630      	mov	r0, r6
 23fafba:	4639      	mov	r1, r7
 23fafbc:	a360      	add	r3, pc, #384	; (adr r3, 23fb140 <__ieee754_pow+0xae0>)
 23fafbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fafc2:	f7e8 fbc9 	bl	23e3758 <__aeabi_dmul>
 23fafc6:	2200      	movs	r2, #0
 23fafc8:	4b6c      	ldr	r3, [pc, #432]	; (23fb17c <__ieee754_pow+0xb1c>)
 23fafca:	ec41 0b18 	vmov	d8, r0, r1
 23fafce:	4630      	mov	r0, r6
 23fafd0:	4639      	mov	r1, r7
 23fafd2:	f7e8 fbc1 	bl	23e3758 <__aeabi_dmul>
 23fafd6:	4602      	mov	r2, r0
 23fafd8:	460b      	mov	r3, r1
 23fafda:	a15b      	add	r1, pc, #364	; (adr r1, 23fb148 <__ieee754_pow+0xae8>)
 23fafdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fafe0:	f7e8 fa02 	bl	23e33e8 <__aeabi_dsub>
 23fafe4:	4632      	mov	r2, r6
 23fafe6:	463b      	mov	r3, r7
 23fafe8:	f7e8 fbb6 	bl	23e3758 <__aeabi_dmul>
 23fafec:	4602      	mov	r2, r0
 23fafee:	460b      	mov	r3, r1
 23faff0:	2000      	movs	r0, #0
 23faff2:	4963      	ldr	r1, [pc, #396]	; (23fb180 <__ieee754_pow+0xb20>)
 23faff4:	f7e8 f9f8 	bl	23e33e8 <__aeabi_dsub>
 23faff8:	4680      	mov	r8, r0
 23faffa:	4689      	mov	r9, r1
 23faffc:	4632      	mov	r2, r6
 23faffe:	463b      	mov	r3, r7
 23fb000:	4630      	mov	r0, r6
 23fb002:	4639      	mov	r1, r7
 23fb004:	f7e8 fba8 	bl	23e3758 <__aeabi_dmul>
 23fb008:	4602      	mov	r2, r0
 23fb00a:	460b      	mov	r3, r1
 23fb00c:	4640      	mov	r0, r8
 23fb00e:	4649      	mov	r1, r9
 23fb010:	f7e8 fba2 	bl	23e3758 <__aeabi_dmul>
 23fb014:	a34e      	add	r3, pc, #312	; (adr r3, 23fb150 <__ieee754_pow+0xaf0>)
 23fb016:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb01a:	f7e8 fb9d 	bl	23e3758 <__aeabi_dmul>
 23fb01e:	4602      	mov	r2, r0
 23fb020:	460b      	mov	r3, r1
 23fb022:	ec51 0b18 	vmov	r0, r1, d8
 23fb026:	f7e8 f9df 	bl	23e33e8 <__aeabi_dsub>
 23fb02a:	4606      	mov	r6, r0
 23fb02c:	460f      	mov	r7, r1
 23fb02e:	4650      	mov	r0, sl
 23fb030:	4659      	mov	r1, fp
 23fb032:	4632      	mov	r2, r6
 23fb034:	463b      	mov	r3, r7
 23fb036:	f7e8 f9d9 	bl	23e33ec <__adddf3>
 23fb03a:	2000      	movs	r0, #0
 23fb03c:	4652      	mov	r2, sl
 23fb03e:	465b      	mov	r3, fp
 23fb040:	4682      	mov	sl, r0
 23fb042:	468b      	mov	fp, r1
 23fb044:	e564      	b.n	23fab10 <__ieee754_pow+0x4b0>
 23fb046:	4632      	mov	r2, r6
 23fb048:	463b      	mov	r3, r7
 23fb04a:	4630      	mov	r0, r6
 23fb04c:	4639      	mov	r1, r7
 23fb04e:	f7e8 fb83 	bl	23e3758 <__aeabi_dmul>
 23fb052:	ec41 0b10 	vmov	d0, r0, r1
 23fb056:	f7ff bb31 	b.w	23fa6bc <__ieee754_pow+0x5c>
 23fb05a:	2000      	movs	r0, #0
 23fb05c:	4946      	ldr	r1, [pc, #280]	; (23fb178 <__ieee754_pow+0xb18>)
 23fb05e:	4632      	mov	r2, r6
 23fb060:	463b      	mov	r3, r7
 23fb062:	f7e8 fca3 	bl	23e39ac <__aeabi_ddiv>
 23fb066:	ec41 0b10 	vmov	d0, r0, r1
 23fb06a:	f7ff bb27 	b.w	23fa6bc <__ieee754_pow+0x5c>
 23fb06e:	2b00      	cmp	r3, #0
 23fb070:	f47f aee1 	bne.w	23fae36 <__ieee754_pow+0x7d6>
 23fb074:	f1c1 0114 	rsb	r1, r1, #20
 23fb078:	fa4a f001 	asr.w	r0, sl, r1
 23fb07c:	fa00 f101 	lsl.w	r1, r0, r1
 23fb080:	4551      	cmp	r1, sl
 23fb082:	d04d      	beq.n	23fb120 <__ieee754_pow+0xac0>
 23fb084:	9300      	str	r3, [sp, #0]
 23fb086:	f7ff bb27 	b.w	23fa6d8 <__ieee754_pow+0x78>
 23fb08a:	4a3d      	ldr	r2, [pc, #244]	; (23fb180 <__ieee754_pow+0xb20>)
 23fb08c:	4293      	cmp	r3, r2
 23fb08e:	dc4e      	bgt.n	23fb12e <__ieee754_pow+0xace>
 23fb090:	e9dd 2300 	ldrd	r2, r3, [sp]
 23fb094:	4693      	mov	fp, r2
 23fb096:	4692      	mov	sl, r2
 23fb098:	e614      	b.n	23facc4 <__ieee754_pow+0x664>
 23fb09a:	a32f      	add	r3, pc, #188	; (adr r3, 23fb158 <__ieee754_pow+0xaf8>)
 23fb09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb0a0:	ec51 0b19 	vmov	r0, r1, d9
 23fb0a4:	f7e8 fb58 	bl	23e3758 <__aeabi_dmul>
 23fb0a8:	a32b      	add	r3, pc, #172	; (adr r3, 23fb158 <__ieee754_pow+0xaf8>)
 23fb0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb0ae:	f7e8 fb53 	bl	23e3758 <__aeabi_dmul>
 23fb0b2:	ec41 0b10 	vmov	d0, r0, r1
 23fb0b6:	f7ff bb01 	b.w	23fa6bc <__ieee754_pow+0x5c>
 23fb0ba:	ed9f 7b29 	vldr	d7, [pc, #164]	; 23fb160 <__ieee754_pow+0xb00>
 23fb0be:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 23fb0c2:	eeb0 da47 	vmov.f32	s26, s14
 23fb0c6:	eef0 da67 	vmov.f32	s27, s15
 23fb0ca:	ed9f 7b27 	vldr	d7, [pc, #156]	; 23fb168 <__ieee754_pow+0xb08>
 23fb0ce:	eeb0 ca47 	vmov.f32	s24, s14
 23fb0d2:	eef0 ca67 	vmov.f32	s25, s15
 23fb0d6:	ed9f 7b26 	vldr	d7, [pc, #152]	; 23fb170 <__ieee754_pow+0xb10>
 23fb0da:	ec51 0b17 	vmov	r0, r1, d7
 23fb0de:	f7ff bbcc 	b.w	23fa87a <__ieee754_pow+0x21a>
 23fb0e2:	9b00      	ldr	r3, [sp, #0]
 23fb0e4:	2b01      	cmp	r3, #1
 23fb0e6:	f47f aae9 	bne.w	23fa6bc <__ieee754_pow+0x5c>
 23fb0ea:	ee10 1a90 	vmov	r1, s1
 23fb0ee:	ee10 2a10 	vmov	r2, s0
 23fb0f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fb0f6:	ec43 2b10 	vmov	d0, r2, r3
 23fb0fa:	f7ff badf 	b.w	23fa6bc <__ieee754_pow+0x5c>
 23fb0fe:	4650      	mov	r0, sl
 23fb100:	ec43 2b10 	vmov	d0, r2, r3
 23fb104:	f7fe ffe0 	bl	23fa0c8 <scalbn>
 23fb108:	ec51 0b10 	vmov	r0, r1, d0
 23fb10c:	e68c      	b.n	23fae28 <__ieee754_pow+0x7c8>
 23fb10e:	ec47 6b10 	vmov	d0, r6, r7
 23fb112:	b007      	add	sp, #28
 23fb114:	ecbd 8b0c 	vpop	{d8-d13}
 23fb118:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb11c:	f000 ba5a 	b.w	23fb5d4 <__ieee754_sqrt>
 23fb120:	f000 0001 	and.w	r0, r0, #1
 23fb124:	f1c0 0302 	rsb	r3, r0, #2
 23fb128:	9300      	str	r3, [sp, #0]
 23fb12a:	f7ff bad5 	b.w	23fa6d8 <__ieee754_pow+0x78>
 23fb12e:	151b      	asrs	r3, r3, #20
 23fb130:	e598      	b.n	23fac64 <__ieee754_pow+0x604>
 23fb132:	bf00      	nop
 23fb134:	f3af 8000 	nop.w
 23fb138:	60000000 	.word	0x60000000
 23fb13c:	3ff71547 	.word	0x3ff71547
 23fb140:	f85ddf44 	.word	0xf85ddf44
 23fb144:	3e54ae0b 	.word	0x3e54ae0b
 23fb148:	55555555 	.word	0x55555555
 23fb14c:	3fd55555 	.word	0x3fd55555
 23fb150:	652b82fe 	.word	0x652b82fe
 23fb154:	3ff71547 	.word	0x3ff71547
 23fb158:	8800759c 	.word	0x8800759c
 23fb15c:	7e37e43c 	.word	0x7e37e43c
 23fb160:	40000000 	.word	0x40000000
 23fb164:	3fe2b803 	.word	0x3fe2b803
 23fb168:	43cfd006 	.word	0x43cfd006
 23fb16c:	3e4cfdeb 	.word	0x3e4cfdeb
 23fb170:	00000000 	.word	0x00000000
 23fb174:	3ff80000 	.word	0x3ff80000
 23fb178:	3ff00000 	.word	0x3ff00000
 23fb17c:	3fd00000 	.word	0x3fd00000
 23fb180:	3fe00000 	.word	0x3fe00000
 23fb184:	00000000 	.word	0x00000000

023fb188 <__ieee754_rem_pio2>:
 23fb188:	ec53 2b10 	vmov	r2, r3, d0
 23fb18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb190:	4991      	ldr	r1, [pc, #580]	; (23fb3d8 <__ieee754_rem_pio2+0x250>)
 23fb192:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 23fb196:	4604      	mov	r4, r0
 23fb198:	428d      	cmp	r5, r1
 23fb19a:	ed2d 8b06 	vpush	{d8-d10}
 23fb19e:	b08b      	sub	sp, #44	; 0x2c
 23fb1a0:	f340 808c 	ble.w	23fb2bc <__ieee754_rem_pio2+0x134>
 23fb1a4:	498d      	ldr	r1, [pc, #564]	; (23fb3dc <__ieee754_rem_pio2+0x254>)
 23fb1a6:	461f      	mov	r7, r3
 23fb1a8:	428d      	cmp	r5, r1
 23fb1aa:	dc2b      	bgt.n	23fb204 <__ieee754_rem_pio2+0x7c>
 23fb1ac:	2f00      	cmp	r7, #0
 23fb1ae:	4619      	mov	r1, r3
 23fb1b0:	ee10 0a10 	vmov	r0, s0
 23fb1b4:	a37e      	add	r3, pc, #504	; (adr r3, 23fb3b0 <__ieee754_rem_pio2+0x228>)
 23fb1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb1ba:	f340 81b8 	ble.w	23fb52e <__ieee754_rem_pio2+0x3a6>
 23fb1be:	f7e8 f913 	bl	23e33e8 <__aeabi_dsub>
 23fb1c2:	4b87      	ldr	r3, [pc, #540]	; (23fb3e0 <__ieee754_rem_pio2+0x258>)
 23fb1c4:	4680      	mov	r8, r0
 23fb1c6:	4689      	mov	r9, r1
 23fb1c8:	429d      	cmp	r5, r3
 23fb1ca:	f000 808f 	beq.w	23fb2ec <__ieee754_rem_pio2+0x164>
 23fb1ce:	2601      	movs	r6, #1
 23fb1d0:	a379      	add	r3, pc, #484	; (adr r3, 23fb3b8 <__ieee754_rem_pio2+0x230>)
 23fb1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb1d6:	f7e8 f907 	bl	23e33e8 <__aeabi_dsub>
 23fb1da:	4602      	mov	r2, r0
 23fb1dc:	460b      	mov	r3, r1
 23fb1de:	4640      	mov	r0, r8
 23fb1e0:	4649      	mov	r1, r9
 23fb1e2:	e9c4 2300 	strd	r2, r3, [r4]
 23fb1e6:	f7e8 f8ff 	bl	23e33e8 <__aeabi_dsub>
 23fb1ea:	a373      	add	r3, pc, #460	; (adr r3, 23fb3b8 <__ieee754_rem_pio2+0x230>)
 23fb1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb1f0:	f7e8 f8fa 	bl	23e33e8 <__aeabi_dsub>
 23fb1f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fb1f8:	4630      	mov	r0, r6
 23fb1fa:	b00b      	add	sp, #44	; 0x2c
 23fb1fc:	ecbd 8b06 	vpop	{d8-d10}
 23fb200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb204:	4977      	ldr	r1, [pc, #476]	; (23fb3e4 <__ieee754_rem_pio2+0x25c>)
 23fb206:	428d      	cmp	r5, r1
 23fb208:	f340 8092 	ble.w	23fb330 <__ieee754_rem_pio2+0x1a8>
 23fb20c:	4976      	ldr	r1, [pc, #472]	; (23fb3e8 <__ieee754_rem_pio2+0x260>)
 23fb20e:	428d      	cmp	r5, r1
 23fb210:	dc61      	bgt.n	23fb2d6 <__ieee754_rem_pio2+0x14e>
 23fb212:	152e      	asrs	r6, r5, #20
 23fb214:	ee10 0a10 	vmov	r0, s0
 23fb218:	4690      	mov	r8, r2
 23fb21a:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 23fb21e:	eba5 5106 	sub.w	r1, r5, r6, lsl #20
 23fb222:	4689      	mov	r9, r1
 23fb224:	f7e8 fd48 	bl	23e3cb8 <__aeabi_d2iz>
 23fb228:	f7e8 fa2c 	bl	23e3684 <__aeabi_i2d>
 23fb22c:	4602      	mov	r2, r0
 23fb22e:	460b      	mov	r3, r1
 23fb230:	4640      	mov	r0, r8
 23fb232:	4649      	mov	r1, r9
 23fb234:	e9cd 2304 	strd	r2, r3, [sp, #16]
 23fb238:	f7e8 f8d6 	bl	23e33e8 <__aeabi_dsub>
 23fb23c:	2200      	movs	r2, #0
 23fb23e:	4b6b      	ldr	r3, [pc, #428]	; (23fb3ec <__ieee754_rem_pio2+0x264>)
 23fb240:	f7e8 fa8a 	bl	23e3758 <__aeabi_dmul>
 23fb244:	4689      	mov	r9, r1
 23fb246:	4680      	mov	r8, r0
 23fb248:	f7e8 fd36 	bl	23e3cb8 <__aeabi_d2iz>
 23fb24c:	4605      	mov	r5, r0
 23fb24e:	f7e8 fa19 	bl	23e3684 <__aeabi_i2d>
 23fb252:	4602      	mov	r2, r0
 23fb254:	460b      	mov	r3, r1
 23fb256:	4640      	mov	r0, r8
 23fb258:	4649      	mov	r1, r9
 23fb25a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 23fb25e:	f7e8 f8c3 	bl	23e33e8 <__aeabi_dsub>
 23fb262:	2200      	movs	r2, #0
 23fb264:	4b61      	ldr	r3, [pc, #388]	; (23fb3ec <__ieee754_rem_pio2+0x264>)
 23fb266:	f7e8 fa77 	bl	23e3758 <__aeabi_dmul>
 23fb26a:	4602      	mov	r2, r0
 23fb26c:	460b      	mov	r3, r1
 23fb26e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23fb272:	2200      	movs	r2, #0
 23fb274:	2300      	movs	r3, #0
 23fb276:	f7e8 fcd7 	bl	23e3c28 <__aeabi_dcmpeq>
 23fb27a:	2800      	cmp	r0, #0
 23fb27c:	f000 8155 	beq.w	23fb52a <__ieee754_rem_pio2+0x3a2>
 23fb280:	2d00      	cmp	r5, #0
 23fb282:	bf0c      	ite	eq
 23fb284:	2301      	moveq	r3, #1
 23fb286:	2302      	movne	r3, #2
 23fb288:	4959      	ldr	r1, [pc, #356]	; (23fb3f0 <__ieee754_rem_pio2+0x268>)
 23fb28a:	4632      	mov	r2, r6
 23fb28c:	a804      	add	r0, sp, #16
 23fb28e:	9101      	str	r1, [sp, #4]
 23fb290:	2102      	movs	r1, #2
 23fb292:	9100      	str	r1, [sp, #0]
 23fb294:	4621      	mov	r1, r4
 23fb296:	f000 fb9f 	bl	23fb9d8 <__kernel_rem_pio2>
 23fb29a:	2f00      	cmp	r7, #0
 23fb29c:	4606      	mov	r6, r0
 23fb29e:	daab      	bge.n	23fb1f8 <__ieee754_rem_pio2+0x70>
 23fb2a0:	6861      	ldr	r1, [r4, #4]
 23fb2a2:	4246      	negs	r6, r0
 23fb2a4:	6822      	ldr	r2, [r4, #0]
 23fb2a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fb2aa:	68e1      	ldr	r1, [r4, #12]
 23fb2ac:	e9c4 2300 	strd	r2, r3, [r4]
 23fb2b0:	68a2      	ldr	r2, [r4, #8]
 23fb2b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fb2b6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 23fb2ba:	e79d      	b.n	23fb1f8 <__ieee754_rem_pio2+0x70>
 23fb2bc:	2000      	movs	r0, #0
 23fb2be:	2100      	movs	r1, #0
 23fb2c0:	2600      	movs	r6, #0
 23fb2c2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fb2c6:	4630      	mov	r0, r6
 23fb2c8:	ed84 0b00 	vstr	d0, [r4]
 23fb2cc:	b00b      	add	sp, #44	; 0x2c
 23fb2ce:	ecbd 8b06 	vpop	{d8-d10}
 23fb2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb2d6:	ee10 0a10 	vmov	r0, s0
 23fb2da:	4619      	mov	r1, r3
 23fb2dc:	f7e8 f884 	bl	23e33e8 <__aeabi_dsub>
 23fb2e0:	2600      	movs	r6, #0
 23fb2e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fb2e6:	e9c4 0100 	strd	r0, r1, [r4]
 23fb2ea:	e785      	b.n	23fb1f8 <__ieee754_rem_pio2+0x70>
 23fb2ec:	a334      	add	r3, pc, #208	; (adr r3, 23fb3c0 <__ieee754_rem_pio2+0x238>)
 23fb2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb2f2:	f7e8 f879 	bl	23e33e8 <__aeabi_dsub>
 23fb2f6:	4680      	mov	r8, r0
 23fb2f8:	4689      	mov	r9, r1
 23fb2fa:	2601      	movs	r6, #1
 23fb2fc:	a332      	add	r3, pc, #200	; (adr r3, 23fb3c8 <__ieee754_rem_pio2+0x240>)
 23fb2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb302:	f7e8 f871 	bl	23e33e8 <__aeabi_dsub>
 23fb306:	4602      	mov	r2, r0
 23fb308:	460b      	mov	r3, r1
 23fb30a:	4640      	mov	r0, r8
 23fb30c:	4649      	mov	r1, r9
 23fb30e:	e9c4 2300 	strd	r2, r3, [r4]
 23fb312:	f7e8 f869 	bl	23e33e8 <__aeabi_dsub>
 23fb316:	a32c      	add	r3, pc, #176	; (adr r3, 23fb3c8 <__ieee754_rem_pio2+0x240>)
 23fb318:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb31c:	f7e8 f864 	bl	23e33e8 <__aeabi_dsub>
 23fb320:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fb324:	4630      	mov	r0, r6
 23fb326:	b00b      	add	sp, #44	; 0x2c
 23fb328:	ecbd 8b06 	vpop	{d8-d10}
 23fb32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb330:	f7fe febe 	bl	23fa0b0 <fabs>
 23fb334:	ee10 0a10 	vmov	r0, s0
 23fb338:	ec59 8b10 	vmov	r8, r9, d0
 23fb33c:	a324      	add	r3, pc, #144	; (adr r3, 23fb3d0 <__ieee754_rem_pio2+0x248>)
 23fb33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb342:	4649      	mov	r1, r9
 23fb344:	f7e8 fa08 	bl	23e3758 <__aeabi_dmul>
 23fb348:	2200      	movs	r2, #0
 23fb34a:	4b2a      	ldr	r3, [pc, #168]	; (23fb3f4 <__ieee754_rem_pio2+0x26c>)
 23fb34c:	f7e8 f84e 	bl	23e33ec <__adddf3>
 23fb350:	f7e8 fcb2 	bl	23e3cb8 <__aeabi_d2iz>
 23fb354:	4606      	mov	r6, r0
 23fb356:	f7e8 f995 	bl	23e3684 <__aeabi_i2d>
 23fb35a:	4602      	mov	r2, r0
 23fb35c:	460b      	mov	r3, r1
 23fb35e:	ec43 2b18 	vmov	d8, r2, r3
 23fb362:	a313      	add	r3, pc, #76	; (adr r3, 23fb3b0 <__ieee754_rem_pio2+0x228>)
 23fb364:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb368:	f7e8 f9f6 	bl	23e3758 <__aeabi_dmul>
 23fb36c:	4602      	mov	r2, r0
 23fb36e:	460b      	mov	r3, r1
 23fb370:	4640      	mov	r0, r8
 23fb372:	4649      	mov	r1, r9
 23fb374:	eeb0 9a48 	vmov.f32	s18, s16
 23fb378:	eef0 9a68 	vmov.f32	s19, s17
 23fb37c:	f7e8 f834 	bl	23e33e8 <__aeabi_dsub>
 23fb380:	4682      	mov	sl, r0
 23fb382:	468b      	mov	fp, r1
 23fb384:	a30c      	add	r3, pc, #48	; (adr r3, 23fb3b8 <__ieee754_rem_pio2+0x230>)
 23fb386:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb38a:	ec51 0b18 	vmov	r0, r1, d8
 23fb38e:	f7e8 f9e3 	bl	23e3758 <__aeabi_dmul>
 23fb392:	2e1f      	cmp	r6, #31
 23fb394:	ec41 0b18 	vmov	d8, r0, r1
 23fb398:	dc30      	bgt.n	23fb3fc <__ieee754_rem_pio2+0x274>
 23fb39a:	4b17      	ldr	r3, [pc, #92]	; (23fb3f8 <__ieee754_rem_pio2+0x270>)
 23fb39c:	1e72      	subs	r2, r6, #1
 23fb39e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23fb3a2:	42ab      	cmp	r3, r5
 23fb3a4:	d02a      	beq.n	23fb3fc <__ieee754_rem_pio2+0x274>
 23fb3a6:	4602      	mov	r2, r0
 23fb3a8:	460b      	mov	r3, r1
 23fb3aa:	e09d      	b.n	23fb4e8 <__ieee754_rem_pio2+0x360>
 23fb3ac:	f3af 8000 	nop.w
 23fb3b0:	54400000 	.word	0x54400000
 23fb3b4:	3ff921fb 	.word	0x3ff921fb
 23fb3b8:	1a626331 	.word	0x1a626331
 23fb3bc:	3dd0b461 	.word	0x3dd0b461
 23fb3c0:	1a600000 	.word	0x1a600000
 23fb3c4:	3dd0b461 	.word	0x3dd0b461
 23fb3c8:	2e037073 	.word	0x2e037073
 23fb3cc:	3ba3198a 	.word	0x3ba3198a
 23fb3d0:	6dc9c883 	.word	0x6dc9c883
 23fb3d4:	3fe45f30 	.word	0x3fe45f30
 23fb3d8:	3fe921fb 	.word	0x3fe921fb
 23fb3dc:	4002d97b 	.word	0x4002d97b
 23fb3e0:	3ff921fb 	.word	0x3ff921fb
 23fb3e4:	413921fb 	.word	0x413921fb
 23fb3e8:	7fefffff 	.word	0x7fefffff
 23fb3ec:	41700000 	.word	0x41700000
 23fb3f0:	023ffc2c 	.word	0x023ffc2c
 23fb3f4:	3fe00000 	.word	0x3fe00000
 23fb3f8:	023ffbac 	.word	0x023ffbac
 23fb3fc:	152b      	asrs	r3, r5, #20
 23fb3fe:	4650      	mov	r0, sl
 23fb400:	4659      	mov	r1, fp
 23fb402:	9303      	str	r3, [sp, #12]
 23fb404:	ec53 2b18 	vmov	r2, r3, d8
 23fb408:	f7e7 ffee 	bl	23e33e8 <__aeabi_dsub>
 23fb40c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 23fb410:	4680      	mov	r8, r0
 23fb412:	4689      	mov	r9, r1
 23fb414:	ebc3 5515 	rsb	r5, r3, r5, lsr #20
 23fb418:	2d10      	cmp	r5, #16
 23fb41a:	dd6b      	ble.n	23fb4f4 <__ieee754_rem_pio2+0x36c>
 23fb41c:	a364      	add	r3, pc, #400	; (adr r3, 23fb5b0 <__ieee754_rem_pio2+0x428>)
 23fb41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb422:	ec51 0b19 	vmov	r0, r1, d9
 23fb426:	f7e8 f997 	bl	23e3758 <__aeabi_dmul>
 23fb42a:	4680      	mov	r8, r0
 23fb42c:	4689      	mov	r9, r1
 23fb42e:	4650      	mov	r0, sl
 23fb430:	4642      	mov	r2, r8
 23fb432:	4659      	mov	r1, fp
 23fb434:	464b      	mov	r3, r9
 23fb436:	f7e7 ffd7 	bl	23e33e8 <__aeabi_dsub>
 23fb43a:	4602      	mov	r2, r0
 23fb43c:	460b      	mov	r3, r1
 23fb43e:	4650      	mov	r0, sl
 23fb440:	4659      	mov	r1, fp
 23fb442:	4692      	mov	sl, r2
 23fb444:	469b      	mov	fp, r3
 23fb446:	ec43 2b1a 	vmov	d10, r2, r3
 23fb44a:	f7e7 ffcd 	bl	23e33e8 <__aeabi_dsub>
 23fb44e:	4642      	mov	r2, r8
 23fb450:	464b      	mov	r3, r9
 23fb452:	f7e7 ffc9 	bl	23e33e8 <__aeabi_dsub>
 23fb456:	4680      	mov	r8, r0
 23fb458:	4689      	mov	r9, r1
 23fb45a:	a357      	add	r3, pc, #348	; (adr r3, 23fb5b8 <__ieee754_rem_pio2+0x430>)
 23fb45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb460:	ec51 0b19 	vmov	r0, r1, d9
 23fb464:	f7e8 f978 	bl	23e3758 <__aeabi_dmul>
 23fb468:	4642      	mov	r2, r8
 23fb46a:	464b      	mov	r3, r9
 23fb46c:	f7e7 ffbc 	bl	23e33e8 <__aeabi_dsub>
 23fb470:	4602      	mov	r2, r0
 23fb472:	460b      	mov	r3, r1
 23fb474:	4650      	mov	r0, sl
 23fb476:	4659      	mov	r1, fp
 23fb478:	ec43 2b18 	vmov	d8, r2, r3
 23fb47c:	f7e7 ffb4 	bl	23e33e8 <__aeabi_dsub>
 23fb480:	9a03      	ldr	r2, [sp, #12]
 23fb482:	f3c1 530a 	ubfx	r3, r1, #20, #11
 23fb486:	4680      	mov	r8, r0
 23fb488:	4689      	mov	r9, r1
 23fb48a:	1ad3      	subs	r3, r2, r3
 23fb48c:	2b31      	cmp	r3, #49	; 0x31
 23fb48e:	dd31      	ble.n	23fb4f4 <__ieee754_rem_pio2+0x36c>
 23fb490:	a34c      	add	r3, pc, #304	; (adr r3, 23fb5c4 <__ieee754_rem_pio2+0x43c>)
 23fb492:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb496:	ec51 0b19 	vmov	r0, r1, d9
 23fb49a:	f7e8 f95d 	bl	23e3758 <__aeabi_dmul>
 23fb49e:	4680      	mov	r8, r0
 23fb4a0:	4689      	mov	r9, r1
 23fb4a2:	4642      	mov	r2, r8
 23fb4a4:	464b      	mov	r3, r9
 23fb4a6:	ec51 0b1a 	vmov	r0, r1, d10
 23fb4aa:	f7e7 ff9d 	bl	23e33e8 <__aeabi_dsub>
 23fb4ae:	4682      	mov	sl, r0
 23fb4b0:	468b      	mov	fp, r1
 23fb4b2:	4652      	mov	r2, sl
 23fb4b4:	465b      	mov	r3, fp
 23fb4b6:	ec51 0b1a 	vmov	r0, r1, d10
 23fb4ba:	f7e7 ff95 	bl	23e33e8 <__aeabi_dsub>
 23fb4be:	4642      	mov	r2, r8
 23fb4c0:	464b      	mov	r3, r9
 23fb4c2:	f7e7 ff91 	bl	23e33e8 <__aeabi_dsub>
 23fb4c6:	4680      	mov	r8, r0
 23fb4c8:	4689      	mov	r9, r1
 23fb4ca:	a340      	add	r3, pc, #256	; (adr r3, 23fb5cc <__ieee754_rem_pio2+0x444>)
 23fb4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb4d0:	ec51 0b19 	vmov	r0, r1, d9
 23fb4d4:	f7e8 f940 	bl	23e3758 <__aeabi_dmul>
 23fb4d8:	4642      	mov	r2, r8
 23fb4da:	464b      	mov	r3, r9
 23fb4dc:	f7e7 ff84 	bl	23e33e8 <__aeabi_dsub>
 23fb4e0:	4602      	mov	r2, r0
 23fb4e2:	460b      	mov	r3, r1
 23fb4e4:	ec43 2b18 	vmov	d8, r2, r3
 23fb4e8:	4650      	mov	r0, sl
 23fb4ea:	4659      	mov	r1, fp
 23fb4ec:	f7e7 ff7c 	bl	23e33e8 <__aeabi_dsub>
 23fb4f0:	4680      	mov	r8, r0
 23fb4f2:	4689      	mov	r9, r1
 23fb4f4:	4642      	mov	r2, r8
 23fb4f6:	464b      	mov	r3, r9
 23fb4f8:	4650      	mov	r0, sl
 23fb4fa:	4659      	mov	r1, fp
 23fb4fc:	e9c4 8900 	strd	r8, r9, [r4]
 23fb500:	f7e7 ff72 	bl	23e33e8 <__aeabi_dsub>
 23fb504:	ec53 2b18 	vmov	r2, r3, d8
 23fb508:	f7e7 ff6e 	bl	23e33e8 <__aeabi_dsub>
 23fb50c:	2f00      	cmp	r7, #0
 23fb50e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fb512:	f6bf ae71 	bge.w	23fb1f8 <__ieee754_rem_pio2+0x70>
 23fb516:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 23fb51a:	4276      	negs	r6, r6
 23fb51c:	e9c4 8300 	strd	r8, r3, [r4]
 23fb520:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fb524:	e9c4 0302 	strd	r0, r3, [r4, #8]
 23fb528:	e666      	b.n	23fb1f8 <__ieee754_rem_pio2+0x70>
 23fb52a:	2303      	movs	r3, #3
 23fb52c:	e6ac      	b.n	23fb288 <__ieee754_rem_pio2+0x100>
 23fb52e:	f7e7 ff5d 	bl	23e33ec <__adddf3>
 23fb532:	4b23      	ldr	r3, [pc, #140]	; (23fb5c0 <__ieee754_rem_pio2+0x438>)
 23fb534:	4680      	mov	r8, r0
 23fb536:	4689      	mov	r9, r1
 23fb538:	429d      	cmp	r5, r3
 23fb53a:	d016      	beq.n	23fb56a <__ieee754_rem_pio2+0x3e2>
 23fb53c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 23fb540:	a319      	add	r3, pc, #100	; (adr r3, 23fb5a8 <__ieee754_rem_pio2+0x420>)
 23fb542:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb546:	f7e7 ff51 	bl	23e33ec <__adddf3>
 23fb54a:	4602      	mov	r2, r0
 23fb54c:	460b      	mov	r3, r1
 23fb54e:	4640      	mov	r0, r8
 23fb550:	4649      	mov	r1, r9
 23fb552:	e9c4 2300 	strd	r2, r3, [r4]
 23fb556:	f7e7 ff47 	bl	23e33e8 <__aeabi_dsub>
 23fb55a:	a313      	add	r3, pc, #76	; (adr r3, 23fb5a8 <__ieee754_rem_pio2+0x420>)
 23fb55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb560:	f7e7 ff44 	bl	23e33ec <__adddf3>
 23fb564:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fb568:	e646      	b.n	23fb1f8 <__ieee754_rem_pio2+0x70>
 23fb56a:	a311      	add	r3, pc, #68	; (adr r3, 23fb5b0 <__ieee754_rem_pio2+0x428>)
 23fb56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb570:	f7e7 ff3c 	bl	23e33ec <__adddf3>
 23fb574:	4680      	mov	r8, r0
 23fb576:	4689      	mov	r9, r1
 23fb578:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 23fb57c:	a30e      	add	r3, pc, #56	; (adr r3, 23fb5b8 <__ieee754_rem_pio2+0x430>)
 23fb57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb582:	f7e7 ff33 	bl	23e33ec <__adddf3>
 23fb586:	4602      	mov	r2, r0
 23fb588:	460b      	mov	r3, r1
 23fb58a:	4640      	mov	r0, r8
 23fb58c:	4649      	mov	r1, r9
 23fb58e:	e9c4 2300 	strd	r2, r3, [r4]
 23fb592:	f7e7 ff29 	bl	23e33e8 <__aeabi_dsub>
 23fb596:	a308      	add	r3, pc, #32	; (adr r3, 23fb5b8 <__ieee754_rem_pio2+0x430>)
 23fb598:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb59c:	f7e7 ff26 	bl	23e33ec <__adddf3>
 23fb5a0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23fb5a4:	e628      	b.n	23fb1f8 <__ieee754_rem_pio2+0x70>
 23fb5a6:	bf00      	nop
 23fb5a8:	1a626331 	.word	0x1a626331
 23fb5ac:	3dd0b461 	.word	0x3dd0b461
 23fb5b0:	1a600000 	.word	0x1a600000
 23fb5b4:	3dd0b461 	.word	0x3dd0b461
 23fb5b8:	2e037073 	.word	0x2e037073
 23fb5bc:	3ba3198a 	.word	0x3ba3198a
 23fb5c0:	3ff921fb 	.word	0x3ff921fb
 23fb5c4:	2e000000 	.word	0x2e000000
 23fb5c8:	3ba3198a 	.word	0x3ba3198a
 23fb5cc:	252049c1 	.word	0x252049c1
 23fb5d0:	397b839a 	.word	0x397b839a

023fb5d4 <__ieee754_sqrt>:
 23fb5d4:	495e      	ldr	r1, [pc, #376]	; (23fb750 <__ieee754_sqrt+0x17c>)
 23fb5d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fb5da:	ec55 4b10 	vmov	r4, r5, d0
 23fb5de:	43a9      	bics	r1, r5
 23fb5e0:	f000 8094 	beq.w	23fb70c <__ieee754_sqrt+0x138>
 23fb5e4:	2d00      	cmp	r5, #0
 23fb5e6:	462b      	mov	r3, r5
 23fb5e8:	ee10 2a10 	vmov	r2, s0
 23fb5ec:	dd5a      	ble.n	23fb6a4 <__ieee754_sqrt+0xd0>
 23fb5ee:	1528      	asrs	r0, r5, #20
 23fb5f0:	d067      	beq.n	23fb6c2 <__ieee754_sqrt+0xee>
 23fb5f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 23fb5f6:	07c1      	lsls	r1, r0, #31
 23fb5f8:	f2a0 37ff 	subw	r7, r0, #1023	; 0x3ff
 23fb5fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fb600:	d403      	bmi.n	23fb60a <__ieee754_sqrt+0x36>
 23fb602:	005b      	lsls	r3, r3, #1
 23fb604:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23fb608:	0052      	lsls	r2, r2, #1
 23fb60a:	0fd1      	lsrs	r1, r2, #31
 23fb60c:	2600      	movs	r6, #0
 23fb60e:	107f      	asrs	r7, r7, #1
 23fb610:	f04f 0c16 	mov.w	ip, #22
 23fb614:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 23fb618:	46b6      	mov	lr, r6
 23fb61a:	0052      	lsls	r2, r2, #1
 23fb61c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 23fb620:	eb0e 0001 	add.w	r0, lr, r1
 23fb624:	4298      	cmp	r0, r3
 23fb626:	dc03      	bgt.n	23fb630 <__ieee754_sqrt+0x5c>
 23fb628:	1a1b      	subs	r3, r3, r0
 23fb62a:	eb00 0e01 	add.w	lr, r0, r1
 23fb62e:	440e      	add	r6, r1
 23fb630:	005b      	lsls	r3, r3, #1
 23fb632:	f1bc 0c01 	subs.w	ip, ip, #1
 23fb636:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23fb63a:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23fb63e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23fb642:	d1ed      	bne.n	23fb620 <__ieee754_sqrt+0x4c>
 23fb644:	4665      	mov	r5, ip
 23fb646:	2420      	movs	r4, #32
 23fb648:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 23fb64c:	e014      	b.n	23fb678 <__ieee754_sqrt+0xa4>
 23fb64e:	d10a      	bne.n	23fb666 <__ieee754_sqrt+0x92>
 23fb650:	4290      	cmp	r0, r2
 23fb652:	d808      	bhi.n	23fb666 <__ieee754_sqrt+0x92>
 23fb654:	2800      	cmp	r0, #0
 23fb656:	eb00 0c01 	add.w	ip, r0, r1
 23fb65a:	db1d      	blt.n	23fb698 <__ieee754_sqrt+0xc4>
 23fb65c:	46f0      	mov	r8, lr
 23fb65e:	2300      	movs	r3, #0
 23fb660:	1a12      	subs	r2, r2, r0
 23fb662:	440d      	add	r5, r1
 23fb664:	46c6      	mov	lr, r8
 23fb666:	0fd0      	lsrs	r0, r2, #31
 23fb668:	3c01      	subs	r4, #1
 23fb66a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23fb66e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 23fb672:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23fb676:	d033      	beq.n	23fb6e0 <__ieee754_sqrt+0x10c>
 23fb678:	4573      	cmp	r3, lr
 23fb67a:	eb01 000c 	add.w	r0, r1, ip
 23fb67e:	dde6      	ble.n	23fb64e <__ieee754_sqrt+0x7a>
 23fb680:	2800      	cmp	r0, #0
 23fb682:	eb00 0c01 	add.w	ip, r0, r1
 23fb686:	db07      	blt.n	23fb698 <__ieee754_sqrt+0xc4>
 23fb688:	46f0      	mov	r8, lr
 23fb68a:	eba3 030e 	sub.w	r3, r3, lr
 23fb68e:	4290      	cmp	r0, r2
 23fb690:	bf88      	it	hi
 23fb692:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 23fb696:	e7e3      	b.n	23fb660 <__ieee754_sqrt+0x8c>
 23fb698:	f1bc 0f00 	cmp.w	ip, #0
 23fb69c:	dbf4      	blt.n	23fb688 <__ieee754_sqrt+0xb4>
 23fb69e:	f10e 0801 	add.w	r8, lr, #1
 23fb6a2:	e7f2      	b.n	23fb68a <__ieee754_sqrt+0xb6>
 23fb6a4:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 23fb6a8:	4321      	orrs	r1, r4
 23fb6aa:	d028      	beq.n	23fb6fe <__ieee754_sqrt+0x12a>
 23fb6ac:	2d00      	cmp	r5, #0
 23fb6ae:	d13d      	bne.n	23fb72c <__ieee754_sqrt+0x158>
 23fb6b0:	4628      	mov	r0, r5
 23fb6b2:	0ad1      	lsrs	r1, r2, #11
 23fb6b4:	3815      	subs	r0, #21
 23fb6b6:	0552      	lsls	r2, r2, #21
 23fb6b8:	460b      	mov	r3, r1
 23fb6ba:	2900      	cmp	r1, #0
 23fb6bc:	d0f9      	beq.n	23fb6b2 <__ieee754_sqrt+0xde>
 23fb6be:	02cf      	lsls	r7, r1, #11
 23fb6c0:	d441      	bmi.n	23fb746 <__ieee754_sqrt+0x172>
 23fb6c2:	2400      	movs	r4, #0
 23fb6c4:	005b      	lsls	r3, r3, #1
 23fb6c6:	4625      	mov	r5, r4
 23fb6c8:	3401      	adds	r4, #1
 23fb6ca:	02de      	lsls	r6, r3, #11
 23fb6cc:	d5fa      	bpl.n	23fb6c4 <__ieee754_sqrt+0xf0>
 23fb6ce:	4619      	mov	r1, r3
 23fb6d0:	4613      	mov	r3, r2
 23fb6d2:	40a2      	lsls	r2, r4
 23fb6d4:	f1c4 0420 	rsb	r4, r4, #32
 23fb6d8:	40e3      	lsrs	r3, r4
 23fb6da:	1b40      	subs	r0, r0, r5
 23fb6dc:	430b      	orrs	r3, r1
 23fb6de:	e788      	b.n	23fb5f2 <__ieee754_sqrt+0x1e>
 23fb6e0:	4313      	orrs	r3, r2
 23fb6e2:	d10e      	bne.n	23fb702 <__ieee754_sqrt+0x12e>
 23fb6e4:	086c      	lsrs	r4, r5, #1
 23fb6e6:	07f3      	lsls	r3, r6, #31
 23fb6e8:	491a      	ldr	r1, [pc, #104]	; (23fb754 <__ieee754_sqrt+0x180>)
 23fb6ea:	bf48      	it	mi
 23fb6ec:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 23fb6f0:	eb01 0166 	add.w	r1, r1, r6, asr #1
 23fb6f4:	4622      	mov	r2, r4
 23fb6f6:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 23fb6fa:	ec43 2b10 	vmov	d0, r2, r3
 23fb6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fb702:	1c6a      	adds	r2, r5, #1
 23fb704:	d01d      	beq.n	23fb742 <__ieee754_sqrt+0x16e>
 23fb706:	1c6c      	adds	r4, r5, #1
 23fb708:	0864      	lsrs	r4, r4, #1
 23fb70a:	e7ec      	b.n	23fb6e6 <__ieee754_sqrt+0x112>
 23fb70c:	ee10 2a10 	vmov	r2, s0
 23fb710:	462b      	mov	r3, r5
 23fb712:	ee10 0a10 	vmov	r0, s0
 23fb716:	4629      	mov	r1, r5
 23fb718:	f7e8 f81e 	bl	23e3758 <__aeabi_dmul>
 23fb71c:	4622      	mov	r2, r4
 23fb71e:	462b      	mov	r3, r5
 23fb720:	f7e7 fe64 	bl	23e33ec <__adddf3>
 23fb724:	ec41 0b10 	vmov	d0, r0, r1
 23fb728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fb72c:	4620      	mov	r0, r4
 23fb72e:	4629      	mov	r1, r5
 23fb730:	f7e7 fe5a 	bl	23e33e8 <__aeabi_dsub>
 23fb734:	4602      	mov	r2, r0
 23fb736:	460b      	mov	r3, r1
 23fb738:	f7e8 f938 	bl	23e39ac <__aeabi_ddiv>
 23fb73c:	ec41 0b10 	vmov	d0, r0, r1
 23fb740:	e7dd      	b.n	23fb6fe <__ieee754_sqrt+0x12a>
 23fb742:	3601      	adds	r6, #1
 23fb744:	e7cf      	b.n	23fb6e6 <__ieee754_sqrt+0x112>
 23fb746:	4613      	mov	r3, r2
 23fb748:	2420      	movs	r4, #32
 23fb74a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 23fb74e:	e7c3      	b.n	23fb6d8 <__ieee754_sqrt+0x104>
 23fb750:	7ff00000 	.word	0x7ff00000
 23fb754:	3fe00000 	.word	0x3fe00000

023fb758 <__kernel_cos>:
 23fb758:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb75c:	ec57 6b10 	vmov	r6, r7, d0
 23fb760:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
 23fb764:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
 23fb768:	ec5b ab11 	vmov	sl, fp, d1
 23fb76c:	ed2d 8b04 	vpush	{d8-d9}
 23fb770:	da71      	bge.n	23fb856 <__kernel_cos+0xfe>
 23fb772:	ee10 0a10 	vmov	r0, s0
 23fb776:	4639      	mov	r1, r7
 23fb778:	f7e8 fa9e 	bl	23e3cb8 <__aeabi_d2iz>
 23fb77c:	2800      	cmp	r0, #0
 23fb77e:	f000 80f6 	beq.w	23fb96e <__kernel_cos+0x216>
 23fb782:	4632      	mov	r2, r6
 23fb784:	463b      	mov	r3, r7
 23fb786:	4630      	mov	r0, r6
 23fb788:	4639      	mov	r1, r7
 23fb78a:	f7e7 ffe5 	bl	23e3758 <__aeabi_dmul>
 23fb78e:	4604      	mov	r4, r0
 23fb790:	460d      	mov	r5, r1
 23fb792:	a37b      	add	r3, pc, #492	; (adr r3, 23fb980 <__kernel_cos+0x228>)
 23fb794:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb798:	f7e7 ffde 	bl	23e3758 <__aeabi_dmul>
 23fb79c:	a37a      	add	r3, pc, #488	; (adr r3, 23fb988 <__kernel_cos+0x230>)
 23fb79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb7a2:	f7e7 fe23 	bl	23e33ec <__adddf3>
 23fb7a6:	4622      	mov	r2, r4
 23fb7a8:	462b      	mov	r3, r5
 23fb7aa:	f7e7 ffd5 	bl	23e3758 <__aeabi_dmul>
 23fb7ae:	a378      	add	r3, pc, #480	; (adr r3, 23fb990 <__kernel_cos+0x238>)
 23fb7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb7b4:	f7e7 fe18 	bl	23e33e8 <__aeabi_dsub>
 23fb7b8:	4622      	mov	r2, r4
 23fb7ba:	462b      	mov	r3, r5
 23fb7bc:	f7e7 ffcc 	bl	23e3758 <__aeabi_dmul>
 23fb7c0:	a375      	add	r3, pc, #468	; (adr r3, 23fb998 <__kernel_cos+0x240>)
 23fb7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb7c6:	f7e7 fe11 	bl	23e33ec <__adddf3>
 23fb7ca:	4622      	mov	r2, r4
 23fb7cc:	462b      	mov	r3, r5
 23fb7ce:	f7e7 ffc3 	bl	23e3758 <__aeabi_dmul>
 23fb7d2:	a373      	add	r3, pc, #460	; (adr r3, 23fb9a0 <__kernel_cos+0x248>)
 23fb7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb7d8:	f7e7 fe06 	bl	23e33e8 <__aeabi_dsub>
 23fb7dc:	4622      	mov	r2, r4
 23fb7de:	462b      	mov	r3, r5
 23fb7e0:	f7e7 ffba 	bl	23e3758 <__aeabi_dmul>
 23fb7e4:	a370      	add	r3, pc, #448	; (adr r3, 23fb9a8 <__kernel_cos+0x250>)
 23fb7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb7ea:	f7e7 fdff 	bl	23e33ec <__adddf3>
 23fb7ee:	4622      	mov	r2, r4
 23fb7f0:	462b      	mov	r3, r5
 23fb7f2:	f7e7 ffb1 	bl	23e3758 <__aeabi_dmul>
 23fb7f6:	ec41 0b18 	vmov	d8, r0, r1
 23fb7fa:	2200      	movs	r2, #0
 23fb7fc:	4b70      	ldr	r3, [pc, #448]	; (23fb9c0 <__kernel_cos+0x268>)
 23fb7fe:	4620      	mov	r0, r4
 23fb800:	4629      	mov	r1, r5
 23fb802:	f7e7 ffa9 	bl	23e3758 <__aeabi_dmul>
 23fb806:	4680      	mov	r8, r0
 23fb808:	4689      	mov	r9, r1
 23fb80a:	4620      	mov	r0, r4
 23fb80c:	4629      	mov	r1, r5
 23fb80e:	ec53 2b18 	vmov	r2, r3, d8
 23fb812:	f7e7 ffa1 	bl	23e3758 <__aeabi_dmul>
 23fb816:	4604      	mov	r4, r0
 23fb818:	460d      	mov	r5, r1
 23fb81a:	4652      	mov	r2, sl
 23fb81c:	465b      	mov	r3, fp
 23fb81e:	4630      	mov	r0, r6
 23fb820:	4639      	mov	r1, r7
 23fb822:	f7e7 ff99 	bl	23e3758 <__aeabi_dmul>
 23fb826:	4602      	mov	r2, r0
 23fb828:	460b      	mov	r3, r1
 23fb82a:	4620      	mov	r0, r4
 23fb82c:	4629      	mov	r1, r5
 23fb82e:	f7e7 fddb 	bl	23e33e8 <__aeabi_dsub>
 23fb832:	4602      	mov	r2, r0
 23fb834:	460b      	mov	r3, r1
 23fb836:	4640      	mov	r0, r8
 23fb838:	4649      	mov	r1, r9
 23fb83a:	f7e7 fdd5 	bl	23e33e8 <__aeabi_dsub>
 23fb83e:	4602      	mov	r2, r0
 23fb840:	460b      	mov	r3, r1
 23fb842:	2000      	movs	r0, #0
 23fb844:	495f      	ldr	r1, [pc, #380]	; (23fb9c4 <__kernel_cos+0x26c>)
 23fb846:	f7e7 fdcf 	bl	23e33e8 <__aeabi_dsub>
 23fb84a:	ecbd 8b04 	vpop	{d8-d9}
 23fb84e:	ec41 0b10 	vmov	d0, r0, r1
 23fb852:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb856:	ee10 2a10 	vmov	r2, s0
 23fb85a:	ee10 0a10 	vmov	r0, s0
 23fb85e:	463b      	mov	r3, r7
 23fb860:	4639      	mov	r1, r7
 23fb862:	f7e7 ff79 	bl	23e3758 <__aeabi_dmul>
 23fb866:	4604      	mov	r4, r0
 23fb868:	460d      	mov	r5, r1
 23fb86a:	a345      	add	r3, pc, #276	; (adr r3, 23fb980 <__kernel_cos+0x228>)
 23fb86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb870:	f7e7 ff72 	bl	23e3758 <__aeabi_dmul>
 23fb874:	a344      	add	r3, pc, #272	; (adr r3, 23fb988 <__kernel_cos+0x230>)
 23fb876:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb87a:	f7e7 fdb7 	bl	23e33ec <__adddf3>
 23fb87e:	4622      	mov	r2, r4
 23fb880:	462b      	mov	r3, r5
 23fb882:	f7e7 ff69 	bl	23e3758 <__aeabi_dmul>
 23fb886:	a342      	add	r3, pc, #264	; (adr r3, 23fb990 <__kernel_cos+0x238>)
 23fb888:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb88c:	f7e7 fdac 	bl	23e33e8 <__aeabi_dsub>
 23fb890:	4622      	mov	r2, r4
 23fb892:	462b      	mov	r3, r5
 23fb894:	f7e7 ff60 	bl	23e3758 <__aeabi_dmul>
 23fb898:	a33f      	add	r3, pc, #252	; (adr r3, 23fb998 <__kernel_cos+0x240>)
 23fb89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb89e:	f7e7 fda5 	bl	23e33ec <__adddf3>
 23fb8a2:	4622      	mov	r2, r4
 23fb8a4:	462b      	mov	r3, r5
 23fb8a6:	f7e7 ff57 	bl	23e3758 <__aeabi_dmul>
 23fb8aa:	a33d      	add	r3, pc, #244	; (adr r3, 23fb9a0 <__kernel_cos+0x248>)
 23fb8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb8b0:	f7e7 fd9a 	bl	23e33e8 <__aeabi_dsub>
 23fb8b4:	4622      	mov	r2, r4
 23fb8b6:	462b      	mov	r3, r5
 23fb8b8:	f7e7 ff4e 	bl	23e3758 <__aeabi_dmul>
 23fb8bc:	a33a      	add	r3, pc, #232	; (adr r3, 23fb9a8 <__kernel_cos+0x250>)
 23fb8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb8c2:	f7e7 fd93 	bl	23e33ec <__adddf3>
 23fb8c6:	462b      	mov	r3, r5
 23fb8c8:	4622      	mov	r2, r4
 23fb8ca:	f7e7 ff45 	bl	23e3758 <__aeabi_dmul>
 23fb8ce:	4b3e      	ldr	r3, [pc, #248]	; (23fb9c8 <__kernel_cos+0x270>)
 23fb8d0:	4599      	cmp	r9, r3
 23fb8d2:	ec41 0b18 	vmov	d8, r0, r1
 23fb8d6:	dd90      	ble.n	23fb7fa <__kernel_cos+0xa2>
 23fb8d8:	4b3c      	ldr	r3, [pc, #240]	; (23fb9cc <__kernel_cos+0x274>)
 23fb8da:	4599      	cmp	r9, r3
 23fb8dc:	dc3c      	bgt.n	23fb958 <__kernel_cos+0x200>
 23fb8de:	2200      	movs	r2, #0
 23fb8e0:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
 23fb8e4:	2000      	movs	r0, #0
 23fb8e6:	4937      	ldr	r1, [pc, #220]	; (23fb9c4 <__kernel_cos+0x26c>)
 23fb8e8:	4690      	mov	r8, r2
 23fb8ea:	4699      	mov	r9, r3
 23fb8ec:	f7e7 fd7c 	bl	23e33e8 <__aeabi_dsub>
 23fb8f0:	ec41 0b19 	vmov	d9, r0, r1
 23fb8f4:	2200      	movs	r2, #0
 23fb8f6:	4b32      	ldr	r3, [pc, #200]	; (23fb9c0 <__kernel_cos+0x268>)
 23fb8f8:	4620      	mov	r0, r4
 23fb8fa:	4629      	mov	r1, r5
 23fb8fc:	f7e7 ff2c 	bl	23e3758 <__aeabi_dmul>
 23fb900:	4642      	mov	r2, r8
 23fb902:	464b      	mov	r3, r9
 23fb904:	f7e7 fd70 	bl	23e33e8 <__aeabi_dsub>
 23fb908:	4680      	mov	r8, r0
 23fb90a:	4689      	mov	r9, r1
 23fb90c:	4620      	mov	r0, r4
 23fb90e:	4629      	mov	r1, r5
 23fb910:	ec53 2b18 	vmov	r2, r3, d8
 23fb914:	f7e7 ff20 	bl	23e3758 <__aeabi_dmul>
 23fb918:	4604      	mov	r4, r0
 23fb91a:	460d      	mov	r5, r1
 23fb91c:	4652      	mov	r2, sl
 23fb91e:	465b      	mov	r3, fp
 23fb920:	4630      	mov	r0, r6
 23fb922:	4639      	mov	r1, r7
 23fb924:	f7e7 ff18 	bl	23e3758 <__aeabi_dmul>
 23fb928:	4602      	mov	r2, r0
 23fb92a:	460b      	mov	r3, r1
 23fb92c:	4620      	mov	r0, r4
 23fb92e:	4629      	mov	r1, r5
 23fb930:	f7e7 fd5a 	bl	23e33e8 <__aeabi_dsub>
 23fb934:	4602      	mov	r2, r0
 23fb936:	460b      	mov	r3, r1
 23fb938:	4640      	mov	r0, r8
 23fb93a:	4649      	mov	r1, r9
 23fb93c:	f7e7 fd54 	bl	23e33e8 <__aeabi_dsub>
 23fb940:	4602      	mov	r2, r0
 23fb942:	460b      	mov	r3, r1
 23fb944:	ec51 0b19 	vmov	r0, r1, d9
 23fb948:	f7e7 fd4e 	bl	23e33e8 <__aeabi_dsub>
 23fb94c:	ecbd 8b04 	vpop	{d8-d9}
 23fb950:	ec41 0b10 	vmov	d0, r0, r1
 23fb954:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb958:	ed9f 7b15 	vldr	d7, [pc, #84]	; 23fb9b0 <__kernel_cos+0x258>
 23fb95c:	f04f 0800 	mov.w	r8, #0
 23fb960:	f8df 906c 	ldr.w	r9, [pc, #108]	; 23fb9d0 <__kernel_cos+0x278>
 23fb964:	eeb0 9a47 	vmov.f32	s18, s14
 23fb968:	eef0 9a67 	vmov.f32	s19, s15
 23fb96c:	e7c2      	b.n	23fb8f4 <__kernel_cos+0x19c>
 23fb96e:	ecbd 8b04 	vpop	{d8-d9}
 23fb972:	ed9f 0b11 	vldr	d0, [pc, #68]	; 23fb9b8 <__kernel_cos+0x260>
 23fb976:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb97a:	bf00      	nop
 23fb97c:	f3af 8000 	nop.w
 23fb980:	be8838d4 	.word	0xbe8838d4
 23fb984:	bda8fae9 	.word	0xbda8fae9
 23fb988:	bdb4b1c4 	.word	0xbdb4b1c4
 23fb98c:	3e21ee9e 	.word	0x3e21ee9e
 23fb990:	809c52ad 	.word	0x809c52ad
 23fb994:	3e927e4f 	.word	0x3e927e4f
 23fb998:	19cb1590 	.word	0x19cb1590
 23fb99c:	3efa01a0 	.word	0x3efa01a0
 23fb9a0:	16c15177 	.word	0x16c15177
 23fb9a4:	3f56c16c 	.word	0x3f56c16c
 23fb9a8:	5555554c 	.word	0x5555554c
 23fb9ac:	3fa55555 	.word	0x3fa55555
 23fb9b0:	00000000 	.word	0x00000000
 23fb9b4:	3fe70000 	.word	0x3fe70000
 23fb9b8:	00000000 	.word	0x00000000
 23fb9bc:	3ff00000 	.word	0x3ff00000
 23fb9c0:	3fe00000 	.word	0x3fe00000
 23fb9c4:	3ff00000 	.word	0x3ff00000
 23fb9c8:	3fd33332 	.word	0x3fd33332
 23fb9cc:	3fe90000 	.word	0x3fe90000
 23fb9d0:	3fd20000 	.word	0x3fd20000
 23fb9d4:	00000000 	.word	0x00000000

023fb9d8 <__kernel_rem_pio2>:
 23fb9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb9dc:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 23fb9e0:	461c      	mov	r4, r3
 23fb9e2:	f112 0f14 	cmn.w	r2, #20
 23fb9e6:	9308      	str	r3, [sp, #32]
 23fb9e8:	910b      	str	r1, [sp, #44]	; 0x2c
 23fb9ea:	4bb6      	ldr	r3, [pc, #728]	; (23fbcc4 <__kernel_rem_pio2+0x2ec>)
 23fb9ec:	99a2      	ldr	r1, [sp, #648]	; 0x288
 23fb9ee:	9004      	str	r0, [sp, #16]
 23fb9f0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 23fb9f4:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
 23fb9f8:	9105      	str	r1, [sp, #20]
 23fb9fa:	9303      	str	r3, [sp, #12]
 23fb9fc:	f2c0 833a 	blt.w	23fc074 <__kernel_rem_pio2+0x69c>
 23fba00:	1ed3      	subs	r3, r2, #3
 23fba02:	49b1      	ldr	r1, [pc, #708]	; (23fbcc8 <__kernel_rem_pio2+0x2f0>)
 23fba04:	fb81 0103 	smull	r0, r1, r1, r3
 23fba08:	17db      	asrs	r3, r3, #31
 23fba0a:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 23fba0e:	9307      	str	r3, [sp, #28]
 23fba10:	3301      	adds	r3, #1
 23fba12:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 23fba16:	00db      	lsls	r3, r3, #3
 23fba18:	18d3      	adds	r3, r2, r3
 23fba1a:	9a07      	ldr	r2, [sp, #28]
 23fba1c:	9306      	str	r3, [sp, #24]
 23fba1e:	9b03      	ldr	r3, [sp, #12]
 23fba20:	1ad4      	subs	r4, r2, r3
 23fba22:	9a05      	ldr	r2, [sp, #20]
 23fba24:	18d6      	adds	r6, r2, r3
 23fba26:	d414      	bmi.n	23fba52 <__kernel_rem_pio2+0x7a>
 23fba28:	3601      	adds	r6, #1
 23fba2a:	ad20      	add	r5, sp, #128	; 0x80
 23fba2c:	f04f 0800 	mov.w	r8, #0
 23fba30:	f04f 0900 	mov.w	r9, #0
 23fba34:	4426      	add	r6, r4
 23fba36:	9fa3      	ldr	r7, [sp, #652]	; 0x28c
 23fba38:	2c00      	cmp	r4, #0
 23fba3a:	4640      	mov	r0, r8
 23fba3c:	4649      	mov	r1, r9
 23fba3e:	db03      	blt.n	23fba48 <__kernel_rem_pio2+0x70>
 23fba40:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 23fba44:	f7e7 fe1e 	bl	23e3684 <__aeabi_i2d>
 23fba48:	3401      	adds	r4, #1
 23fba4a:	42b4      	cmp	r4, r6
 23fba4c:	e8e5 0102 	strd	r0, r1, [r5], #8
 23fba50:	d1f2      	bne.n	23fba38 <__kernel_rem_pio2+0x60>
 23fba52:	9b05      	ldr	r3, [sp, #20]
 23fba54:	2b00      	cmp	r3, #0
 23fba56:	f2c0 83c7 	blt.w	23fc1e8 <__kernel_rem_pio2+0x810>
 23fba5a:	9b08      	ldr	r3, [sp, #32]
 23fba5c:	a920      	add	r1, sp, #128	; 0x80
 23fba5e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 23fba62:	f8dd 900c 	ldr.w	r9, [sp, #12]
 23fba66:	00da      	lsls	r2, r3, #3
 23fba68:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
 23fba6c:	9202      	str	r2, [sp, #8]
 23fba6e:	9a05      	ldr	r2, [sp, #20]
 23fba70:	441a      	add	r2, r3
 23fba72:	9201      	str	r2, [sp, #4]
 23fba74:	9a04      	ldr	r2, [sp, #16]
 23fba76:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
 23fba7a:	9b03      	ldr	r3, [sp, #12]
 23fba7c:	2b00      	cmp	r3, #0
 23fba7e:	f2c0 81a6 	blt.w	23fbdce <__kernel_rem_pio2+0x3f6>
 23fba82:	4657      	mov	r7, sl
 23fba84:	9e04      	ldr	r6, [sp, #16]
 23fba86:	2400      	movs	r4, #0
 23fba88:	2500      	movs	r5, #0
 23fba8a:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 23fba8e:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 23fba92:	f7e7 fe61 	bl	23e3758 <__aeabi_dmul>
 23fba96:	4602      	mov	r2, r0
 23fba98:	460b      	mov	r3, r1
 23fba9a:	4620      	mov	r0, r4
 23fba9c:	4629      	mov	r1, r5
 23fba9e:	f7e7 fca5 	bl	23e33ec <__adddf3>
 23fbaa2:	4546      	cmp	r6, r8
 23fbaa4:	4604      	mov	r4, r0
 23fbaa6:	460d      	mov	r5, r1
 23fbaa8:	d1ef      	bne.n	23fba8a <__kernel_rem_pio2+0xb2>
 23fbaaa:	f109 0901 	add.w	r9, r9, #1
 23fbaae:	9b01      	ldr	r3, [sp, #4]
 23fbab0:	f10a 0a08 	add.w	sl, sl, #8
 23fbab4:	4599      	cmp	r9, r3
 23fbab6:	e8eb 4502 	strd	r4, r5, [fp], #8
 23fbaba:	d1de      	bne.n	23fba7a <__kernel_rem_pio2+0xa2>
 23fbabc:	9a04      	ldr	r2, [sp, #16]
 23fbabe:	a90b      	add	r1, sp, #44	; 0x2c
 23fbac0:	9b02      	ldr	r3, [sp, #8]
 23fbac2:	4413      	add	r3, r2
 23fbac4:	469b      	mov	fp, r3
 23fbac6:	9b05      	ldr	r3, [sp, #20]
 23fbac8:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 23fbacc:	a90c      	add	r1, sp, #48	; 0x30
 23fbace:	920a      	str	r2, [sp, #40]	; 0x28
 23fbad0:	461a      	mov	r2, r3
 23fbad2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 23fbad6:	9201      	str	r2, [sp, #4]
 23fbad8:	3b08      	subs	r3, #8
 23fbada:	9309      	str	r3, [sp, #36]	; 0x24
 23fbadc:	9a01      	ldr	r2, [sp, #4]
 23fbade:	a998      	add	r1, sp, #608	; 0x260
 23fbae0:	2a00      	cmp	r2, #0
 23fbae2:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 23fbae6:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 23fbaea:	dd29      	ble.n	23fbb40 <__kernel_rem_pio2+0x168>
 23fbaec:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 23fbaf0:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 23fbaf4:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
 23fbaf8:	2200      	movs	r2, #0
 23fbafa:	4b74      	ldr	r3, [pc, #464]	; (23fbccc <__kernel_rem_pio2+0x2f4>)
 23fbafc:	4620      	mov	r0, r4
 23fbafe:	4629      	mov	r1, r5
 23fbb00:	f7e7 fe2a 	bl	23e3758 <__aeabi_dmul>
 23fbb04:	f7e8 f8d8 	bl	23e3cb8 <__aeabi_d2iz>
 23fbb08:	f7e7 fdbc 	bl	23e3684 <__aeabi_i2d>
 23fbb0c:	2200      	movs	r2, #0
 23fbb0e:	4b70      	ldr	r3, [pc, #448]	; (23fbcd0 <__kernel_rem_pio2+0x2f8>)
 23fbb10:	4606      	mov	r6, r0
 23fbb12:	460f      	mov	r7, r1
 23fbb14:	f7e7 fe20 	bl	23e3758 <__aeabi_dmul>
 23fbb18:	4602      	mov	r2, r0
 23fbb1a:	460b      	mov	r3, r1
 23fbb1c:	4620      	mov	r0, r4
 23fbb1e:	4629      	mov	r1, r5
 23fbb20:	f7e7 fc62 	bl	23e33e8 <__aeabi_dsub>
 23fbb24:	f7e8 f8c8 	bl	23e3cb8 <__aeabi_d2iz>
 23fbb28:	4639      	mov	r1, r7
 23fbb2a:	f849 0b04 	str.w	r0, [r9], #4
 23fbb2e:	4630      	mov	r0, r6
 23fbb30:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 23fbb34:	f7e7 fc5a 	bl	23e33ec <__adddf3>
 23fbb38:	4604      	mov	r4, r0
 23fbb3a:	45d0      	cmp	r8, sl
 23fbb3c:	460d      	mov	r5, r1
 23fbb3e:	d1db      	bne.n	23fbaf8 <__kernel_rem_pio2+0x120>
 23fbb40:	f8dd 9018 	ldr.w	r9, [sp, #24]
 23fbb44:	ec45 4b10 	vmov	d0, r4, r5
 23fbb48:	4648      	mov	r0, r9
 23fbb4a:	f7fe fabd 	bl	23fa0c8 <scalbn>
 23fbb4e:	2200      	movs	r2, #0
 23fbb50:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 23fbb54:	ee10 0a10 	vmov	r0, s0
 23fbb58:	ec55 4b10 	vmov	r4, r5, d0
 23fbb5c:	4629      	mov	r1, r5
 23fbb5e:	f7e7 fdfb 	bl	23e3758 <__aeabi_dmul>
 23fbb62:	ec41 0b10 	vmov	d0, r0, r1
 23fbb66:	f000 fc2f 	bl	23fc3c8 <floor>
 23fbb6a:	2200      	movs	r2, #0
 23fbb6c:	4b59      	ldr	r3, [pc, #356]	; (23fbcd4 <__kernel_rem_pio2+0x2fc>)
 23fbb6e:	ec51 0b10 	vmov	r0, r1, d0
 23fbb72:	f7e7 fdf1 	bl	23e3758 <__aeabi_dmul>
 23fbb76:	4602      	mov	r2, r0
 23fbb78:	460b      	mov	r3, r1
 23fbb7a:	4620      	mov	r0, r4
 23fbb7c:	4629      	mov	r1, r5
 23fbb7e:	f7e7 fc33 	bl	23e33e8 <__aeabi_dsub>
 23fbb82:	460d      	mov	r5, r1
 23fbb84:	4604      	mov	r4, r0
 23fbb86:	f7e8 f897 	bl	23e3cb8 <__aeabi_d2iz>
 23fbb8a:	4680      	mov	r8, r0
 23fbb8c:	f7e7 fd7a 	bl	23e3684 <__aeabi_i2d>
 23fbb90:	460b      	mov	r3, r1
 23fbb92:	4602      	mov	r2, r0
 23fbb94:	4629      	mov	r1, r5
 23fbb96:	4620      	mov	r0, r4
 23fbb98:	f7e7 fc26 	bl	23e33e8 <__aeabi_dsub>
 23fbb9c:	464b      	mov	r3, r9
 23fbb9e:	4606      	mov	r6, r0
 23fbba0:	460f      	mov	r7, r1
 23fbba2:	2b00      	cmp	r3, #0
 23fbba4:	f340 8098 	ble.w	23fbcd8 <__kernel_rem_pio2+0x300>
 23fbba8:	9a01      	ldr	r2, [sp, #4]
 23fbbaa:	a90c      	add	r1, sp, #48	; 0x30
 23fbbac:	f1c9 0318 	rsb	r3, r9, #24
 23fbbb0:	f1c9 0517 	rsb	r5, r9, #23
 23fbbb4:	3a01      	subs	r2, #1
 23fbbb6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 23fbbba:	fa41 f003 	asr.w	r0, r1, r3
 23fbbbe:	fa00 f303 	lsl.w	r3, r0, r3
 23fbbc2:	4480      	add	r8, r0
 23fbbc4:	1acb      	subs	r3, r1, r3
 23fbbc6:	a90c      	add	r1, sp, #48	; 0x30
 23fbbc8:	fa43 f505 	asr.w	r5, r3, r5
 23fbbcc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 23fbbd0:	2d00      	cmp	r5, #0
 23fbbd2:	f300 808b 	bgt.w	23fbcec <__kernel_rem_pio2+0x314>
 23fbbd6:	2200      	movs	r2, #0
 23fbbd8:	2300      	movs	r3, #0
 23fbbda:	4630      	mov	r0, r6
 23fbbdc:	4639      	mov	r1, r7
 23fbbde:	f7e8 f823 	bl	23e3c28 <__aeabi_dcmpeq>
 23fbbe2:	2800      	cmp	r0, #0
 23fbbe4:	f000 824d 	beq.w	23fc082 <__kernel_rem_pio2+0x6aa>
 23fbbe8:	9a01      	ldr	r2, [sp, #4]
 23fbbea:	9b05      	ldr	r3, [sp, #20]
 23fbbec:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
 23fbbf0:	4553      	cmp	r3, sl
 23fbbf2:	dc10      	bgt.n	23fbc16 <__kernel_rem_pio2+0x23e>
 23fbbf4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 23fbbf8:	980a      	ldr	r0, [sp, #40]	; 0x28
 23fbbfa:	4413      	add	r3, r2
 23fbbfc:	aa0c      	add	r2, sp, #48	; 0x30
 23fbbfe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 23fbc02:	2200      	movs	r2, #0
 23fbc04:	f853 1904 	ldr.w	r1, [r3], #-4
 23fbc08:	4283      	cmp	r3, r0
 23fbc0a:	ea42 0201 	orr.w	r2, r2, r1
 23fbc0e:	d1f9      	bne.n	23fbc04 <__kernel_rem_pio2+0x22c>
 23fbc10:	2a00      	cmp	r2, #0
 23fbc12:	f040 80df 	bne.w	23fbdd4 <__kernel_rem_pio2+0x3fc>
 23fbc16:	9b05      	ldr	r3, [sp, #20]
 23fbc18:	aa0c      	add	r2, sp, #48	; 0x30
 23fbc1a:	3b01      	subs	r3, #1
 23fbc1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 23fbc20:	2b00      	cmp	r3, #0
 23fbc22:	f040 80cf 	bne.w	23fbdc4 <__kernel_rem_pio2+0x3ec>
 23fbc26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23fbc28:	2301      	movs	r3, #1
 23fbc2a:	f852 1904 	ldr.w	r1, [r2], #-4
 23fbc2e:	3301      	adds	r3, #1
 23fbc30:	2900      	cmp	r1, #0
 23fbc32:	d0fa      	beq.n	23fbc2a <__kernel_rem_pio2+0x252>
 23fbc34:	9a01      	ldr	r2, [sp, #4]
 23fbc36:	18d3      	adds	r3, r2, r3
 23fbc38:	9302      	str	r3, [sp, #8]
 23fbc3a:	1c53      	adds	r3, r2, #1
 23fbc3c:	4699      	mov	r9, r3
 23fbc3e:	9a01      	ldr	r2, [sp, #4]
 23fbc40:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 23fbc44:	9908      	ldr	r1, [sp, #32]
 23fbc46:	440a      	add	r2, r1
 23fbc48:	4690      	mov	r8, r2
 23fbc4a:	9a07      	ldr	r2, [sp, #28]
 23fbc4c:	441a      	add	r2, r3
 23fbc4e:	4492      	add	sl, r2
 23fbc50:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 23fbc52:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 23fbc56:	aa20      	add	r2, sp, #128	; 0x80
 23fbc58:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
 23fbc5c:	aa70      	add	r2, sp, #448	; 0x1c0
 23fbc5e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 23fbc62:	9301      	str	r3, [sp, #4]
 23fbc64:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 23fbc68:	4647      	mov	r7, r8
 23fbc6a:	f7e7 fd0b 	bl	23e3684 <__aeabi_i2d>
 23fbc6e:	460b      	mov	r3, r1
 23fbc70:	9903      	ldr	r1, [sp, #12]
 23fbc72:	4602      	mov	r2, r0
 23fbc74:	f108 0808 	add.w	r8, r8, #8
 23fbc78:	2900      	cmp	r1, #0
 23fbc7a:	e948 2302 	strd	r2, r3, [r8, #-8]
 23fbc7e:	db1e      	blt.n	23fbcbe <__kernel_rem_pio2+0x2e6>
 23fbc80:	9e04      	ldr	r6, [sp, #16]
 23fbc82:	2400      	movs	r4, #0
 23fbc84:	2500      	movs	r5, #0
 23fbc86:	e001      	b.n	23fbc8c <__kernel_rem_pio2+0x2b4>
 23fbc88:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 23fbc8c:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 23fbc90:	f7e7 fd62 	bl	23e3758 <__aeabi_dmul>
 23fbc94:	4602      	mov	r2, r0
 23fbc96:	460b      	mov	r3, r1
 23fbc98:	4620      	mov	r0, r4
 23fbc9a:	4629      	mov	r1, r5
 23fbc9c:	f7e7 fba6 	bl	23e33ec <__adddf3>
 23fbca0:	455e      	cmp	r6, fp
 23fbca2:	4604      	mov	r4, r0
 23fbca4:	460d      	mov	r5, r1
 23fbca6:	d1ef      	bne.n	23fbc88 <__kernel_rem_pio2+0x2b0>
 23fbca8:	9b01      	ldr	r3, [sp, #4]
 23fbcaa:	f109 0901 	add.w	r9, r9, #1
 23fbcae:	e8e3 4502 	strd	r4, r5, [r3], #8
 23fbcb2:	9301      	str	r3, [sp, #4]
 23fbcb4:	9b02      	ldr	r3, [sp, #8]
 23fbcb6:	4599      	cmp	r9, r3
 23fbcb8:	ddd4      	ble.n	23fbc64 <__kernel_rem_pio2+0x28c>
 23fbcba:	9301      	str	r3, [sp, #4]
 23fbcbc:	e70e      	b.n	23fbadc <__kernel_rem_pio2+0x104>
 23fbcbe:	2400      	movs	r4, #0
 23fbcc0:	2500      	movs	r5, #0
 23fbcc2:	e7f1      	b.n	23fbca8 <__kernel_rem_pio2+0x2d0>
 23fbcc4:	023ffd78 	.word	0x023ffd78
 23fbcc8:	2aaaaaab 	.word	0x2aaaaaab
 23fbccc:	3e700000 	.word	0x3e700000
 23fbcd0:	41700000 	.word	0x41700000
 23fbcd4:	40200000 	.word	0x40200000
 23fbcd8:	d16b      	bne.n	23fbdb2 <__kernel_rem_pio2+0x3da>
 23fbcda:	9b01      	ldr	r3, [sp, #4]
 23fbcdc:	aa0c      	add	r2, sp, #48	; 0x30
 23fbcde:	3b01      	subs	r3, #1
 23fbce0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 23fbce4:	15ed      	asrs	r5, r5, #23
 23fbce6:	2d00      	cmp	r5, #0
 23fbce8:	f77f af75 	ble.w	23fbbd6 <__kernel_rem_pio2+0x1fe>
 23fbcec:	9b01      	ldr	r3, [sp, #4]
 23fbcee:	f108 0801 	add.w	r8, r8, #1
 23fbcf2:	2b00      	cmp	r3, #0
 23fbcf4:	f340 81c3 	ble.w	23fc07e <__kernel_rem_pio2+0x6a6>
 23fbcf8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 23fbcfa:	2c00      	cmp	r4, #0
 23fbcfc:	d151      	bne.n	23fbda2 <__kernel_rem_pio2+0x3ca>
 23fbcfe:	9b01      	ldr	r3, [sp, #4]
 23fbd00:	2b01      	cmp	r3, #1
 23fbd02:	d020      	beq.n	23fbd46 <__kernel_rem_pio2+0x36e>
 23fbd04:	ab0c      	add	r3, sp, #48	; 0x30
 23fbd06:	2201      	movs	r2, #1
 23fbd08:	f853 4f04 	ldr.w	r4, [r3, #4]!
 23fbd0c:	2c00      	cmp	r4, #0
 23fbd0e:	d04b      	beq.n	23fbda8 <__kernel_rem_pio2+0x3d0>
 23fbd10:	1c53      	adds	r3, r2, #1
 23fbd12:	a90c      	add	r1, sp, #48	; 0x30
 23fbd14:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
 23fbd18:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
 23fbd1c:	9901      	ldr	r1, [sp, #4]
 23fbd1e:	4299      	cmp	r1, r3
 23fbd20:	dd10      	ble.n	23fbd44 <__kernel_rem_pio2+0x36c>
 23fbd22:	a80c      	add	r0, sp, #48	; 0x30
 23fbd24:	aa0c      	add	r2, sp, #48	; 0x30
 23fbd26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 23fbd2a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 23fbd2e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 23fbd32:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 23fbd36:	e000      	b.n	23fbd3a <__kernel_rem_pio2+0x362>
 23fbd38:	681a      	ldr	r2, [r3, #0]
 23fbd3a:	1a8a      	subs	r2, r1, r2
 23fbd3c:	f843 2b04 	str.w	r2, [r3], #4
 23fbd40:	4283      	cmp	r3, r0
 23fbd42:	d1f9      	bne.n	23fbd38 <__kernel_rem_pio2+0x360>
 23fbd44:	2401      	movs	r4, #1
 23fbd46:	9b06      	ldr	r3, [sp, #24]
 23fbd48:	2b00      	cmp	r3, #0
 23fbd4a:	dd0e      	ble.n	23fbd6a <__kernel_rem_pio2+0x392>
 23fbd4c:	2b01      	cmp	r3, #1
 23fbd4e:	f000 816b 	beq.w	23fc028 <__kernel_rem_pio2+0x650>
 23fbd52:	2b02      	cmp	r3, #2
 23fbd54:	d109      	bne.n	23fbd6a <__kernel_rem_pio2+0x392>
 23fbd56:	9b01      	ldr	r3, [sp, #4]
 23fbd58:	a90c      	add	r1, sp, #48	; 0x30
 23fbd5a:	1e5a      	subs	r2, r3, #1
 23fbd5c:	ab0c      	add	r3, sp, #48	; 0x30
 23fbd5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23fbd62:	f3c3 0315 	ubfx	r3, r3, #0, #22
 23fbd66:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 23fbd6a:	2d02      	cmp	r5, #2
 23fbd6c:	f47f af33 	bne.w	23fbbd6 <__kernel_rem_pio2+0x1fe>
 23fbd70:	4632      	mov	r2, r6
 23fbd72:	463b      	mov	r3, r7
 23fbd74:	2000      	movs	r0, #0
 23fbd76:	49b6      	ldr	r1, [pc, #728]	; (23fc050 <__kernel_rem_pio2+0x678>)
 23fbd78:	f7e7 fb36 	bl	23e33e8 <__aeabi_dsub>
 23fbd7c:	4606      	mov	r6, r0
 23fbd7e:	460f      	mov	r7, r1
 23fbd80:	2c00      	cmp	r4, #0
 23fbd82:	f43f af28 	beq.w	23fbbd6 <__kernel_rem_pio2+0x1fe>
 23fbd86:	9806      	ldr	r0, [sp, #24]
 23fbd88:	ed9f 0bad 	vldr	d0, [pc, #692]	; 23fc040 <__kernel_rem_pio2+0x668>
 23fbd8c:	f7fe f99c 	bl	23fa0c8 <scalbn>
 23fbd90:	4630      	mov	r0, r6
 23fbd92:	4639      	mov	r1, r7
 23fbd94:	ec53 2b10 	vmov	r2, r3, d0
 23fbd98:	f7e7 fb26 	bl	23e33e8 <__aeabi_dsub>
 23fbd9c:	4606      	mov	r6, r0
 23fbd9e:	460f      	mov	r7, r1
 23fbda0:	e719      	b.n	23fbbd6 <__kernel_rem_pio2+0x1fe>
 23fbda2:	2301      	movs	r3, #1
 23fbda4:	2200      	movs	r2, #0
 23fbda6:	e7b4      	b.n	23fbd12 <__kernel_rem_pio2+0x33a>
 23fbda8:	3201      	adds	r2, #1
 23fbdaa:	9901      	ldr	r1, [sp, #4]
 23fbdac:	428a      	cmp	r2, r1
 23fbdae:	d1ab      	bne.n	23fbd08 <__kernel_rem_pio2+0x330>
 23fbdb0:	e7c9      	b.n	23fbd46 <__kernel_rem_pio2+0x36e>
 23fbdb2:	2200      	movs	r2, #0
 23fbdb4:	4ba7      	ldr	r3, [pc, #668]	; (23fc054 <__kernel_rem_pio2+0x67c>)
 23fbdb6:	f7e7 ff55 	bl	23e3c64 <__aeabi_dcmpge>
 23fbdba:	2800      	cmp	r0, #0
 23fbdbc:	f040 8152 	bne.w	23fc064 <__kernel_rem_pio2+0x68c>
 23fbdc0:	4605      	mov	r5, r0
 23fbdc2:	e708      	b.n	23fbbd6 <__kernel_rem_pio2+0x1fe>
 23fbdc4:	9b01      	ldr	r3, [sp, #4]
 23fbdc6:	3301      	adds	r3, #1
 23fbdc8:	4699      	mov	r9, r3
 23fbdca:	9302      	str	r3, [sp, #8]
 23fbdcc:	e737      	b.n	23fbc3e <__kernel_rem_pio2+0x266>
 23fbdce:	2400      	movs	r4, #0
 23fbdd0:	2500      	movs	r5, #0
 23fbdd2:	e66a      	b.n	23fbaaa <__kernel_rem_pio2+0xd2>
 23fbdd4:	9b06      	ldr	r3, [sp, #24]
 23fbdd6:	9503      	str	r5, [sp, #12]
 23fbdd8:	f1a3 0218 	sub.w	r2, r3, #24
 23fbddc:	ab0c      	add	r3, sp, #48	; 0x30
 23fbdde:	f8cd 801c 	str.w	r8, [sp, #28]
 23fbde2:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 23fbde6:	9206      	str	r2, [sp, #24]
 23fbde8:	b973      	cbnz	r3, 23fbe08 <__kernel_rem_pio2+0x430>
 23fbdea:	4b9b      	ldr	r3, [pc, #620]	; (23fc058 <__kernel_rem_pio2+0x680>)
 23fbdec:	9901      	ldr	r1, [sp, #4]
 23fbdee:	4419      	add	r1, r3
 23fbdf0:	460b      	mov	r3, r1
 23fbdf2:	a90c      	add	r1, sp, #48	; 0x30
 23fbdf4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 23fbdf8:	f853 1904 	ldr.w	r1, [r3], #-4
 23fbdfc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 23fbe00:	3a18      	subs	r2, #24
 23fbe02:	2900      	cmp	r1, #0
 23fbe04:	d0f8      	beq.n	23fbdf8 <__kernel_rem_pio2+0x420>
 23fbe06:	9206      	str	r2, [sp, #24]
 23fbe08:	9806      	ldr	r0, [sp, #24]
 23fbe0a:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 23fc040 <__kernel_rem_pio2+0x668>
 23fbe0e:	f7fe f95b 	bl	23fa0c8 <scalbn>
 23fbe12:	f1ba 0f00 	cmp.w	sl, #0
 23fbe16:	ec55 4b10 	vmov	r4, r5, d0
 23fbe1a:	f2c0 81db 	blt.w	23fc1d4 <__kernel_rem_pio2+0x7fc>
 23fbe1e:	ab70      	add	r3, sp, #448	; 0x1c0
 23fbe20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 23fbe24:	f04f 0800 	mov.w	r8, #0
 23fbe28:	f8df 9230 	ldr.w	r9, [pc, #560]	; 23fc05c <__kernel_rem_pio2+0x684>
 23fbe2c:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
 23fbe30:	9204      	str	r2, [sp, #16]
 23fbe32:	f10a 0301 	add.w	r3, sl, #1
 23fbe36:	aa0c      	add	r2, sp, #48	; 0x30
 23fbe38:	f10b 0708 	add.w	r7, fp, #8
 23fbe3c:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 23fbe40:	9306      	str	r3, [sp, #24]
 23fbe42:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 23fbe46:	f7e7 fc1d 	bl	23e3684 <__aeabi_i2d>
 23fbe4a:	4622      	mov	r2, r4
 23fbe4c:	462b      	mov	r3, r5
 23fbe4e:	f7e7 fc83 	bl	23e3758 <__aeabi_dmul>
 23fbe52:	464b      	mov	r3, r9
 23fbe54:	4642      	mov	r2, r8
 23fbe56:	e967 0102 	strd	r0, r1, [r7, #-8]!
 23fbe5a:	4620      	mov	r0, r4
 23fbe5c:	4629      	mov	r1, r5
 23fbe5e:	f7e7 fc7b 	bl	23e3758 <__aeabi_dmul>
 23fbe62:	ab0c      	add	r3, sp, #48	; 0x30
 23fbe64:	4604      	mov	r4, r0
 23fbe66:	460d      	mov	r5, r1
 23fbe68:	429e      	cmp	r6, r3
 23fbe6a:	d1ea      	bne.n	23fbe42 <__kernel_rem_pio2+0x46a>
 23fbe6c:	ab48      	add	r3, sp, #288	; 0x120
 23fbe6e:	f04f 0900 	mov.w	r9, #0
 23fbe72:	e9cd 3a01 	strd	r3, sl, [sp, #4]
 23fbe76:	f8dd a014 	ldr.w	sl, [sp, #20]
 23fbe7a:	f1ba 0f00 	cmp.w	sl, #0
 23fbe7e:	db2c      	blt.n	23fbeda <__kernel_rem_pio2+0x502>
 23fbe80:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 23fc060 <__kernel_rem_pio2+0x688>
 23fbe84:	465f      	mov	r7, fp
 23fbe86:	2600      	movs	r6, #0
 23fbe88:	2400      	movs	r4, #0
 23fbe8a:	2500      	movs	r5, #0
 23fbe8c:	a36e      	add	r3, pc, #440	; (adr r3, 23fc048 <__kernel_rem_pio2+0x670>)
 23fbe8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbe92:	e003      	b.n	23fbe9c <__kernel_rem_pio2+0x4c4>
 23fbe94:	45b1      	cmp	r9, r6
 23fbe96:	db10      	blt.n	23fbeba <__kernel_rem_pio2+0x4e2>
 23fbe98:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 23fbe9c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 23fbea0:	3601      	adds	r6, #1
 23fbea2:	f7e7 fc59 	bl	23e3758 <__aeabi_dmul>
 23fbea6:	4602      	mov	r2, r0
 23fbea8:	460b      	mov	r3, r1
 23fbeaa:	4620      	mov	r0, r4
 23fbeac:	4629      	mov	r1, r5
 23fbeae:	f7e7 fa9d 	bl	23e33ec <__adddf3>
 23fbeb2:	45b2      	cmp	sl, r6
 23fbeb4:	4604      	mov	r4, r0
 23fbeb6:	460d      	mov	r5, r1
 23fbeb8:	daec      	bge.n	23fbe94 <__kernel_rem_pio2+0x4bc>
 23fbeba:	9b01      	ldr	r3, [sp, #4]
 23fbebc:	f1ab 0b08 	sub.w	fp, fp, #8
 23fbec0:	9a02      	ldr	r2, [sp, #8]
 23fbec2:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 23fbec6:	454a      	cmp	r2, r9
 23fbec8:	e9c3 4500 	strd	r4, r5, [r3]
 23fbecc:	f109 0301 	add.w	r3, r9, #1
 23fbed0:	d006      	beq.n	23fbee0 <__kernel_rem_pio2+0x508>
 23fbed2:	f1ba 0f00 	cmp.w	sl, #0
 23fbed6:	4699      	mov	r9, r3
 23fbed8:	dad2      	bge.n	23fbe80 <__kernel_rem_pio2+0x4a8>
 23fbeda:	2400      	movs	r4, #0
 23fbedc:	2500      	movs	r5, #0
 23fbede:	e7ec      	b.n	23fbeba <__kernel_rem_pio2+0x4e2>
 23fbee0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23fbee2:	f8dd a008 	ldr.w	sl, [sp, #8]
 23fbee6:	2b02      	cmp	r3, #2
 23fbee8:	dc1e      	bgt.n	23fbf28 <__kernel_rem_pio2+0x550>
 23fbeea:	2b00      	cmp	r3, #0
 23fbeec:	f300 80ff 	bgt.w	23fc0ee <__kernel_rem_pio2+0x716>
 23fbef0:	d113      	bne.n	23fbf1a <__kernel_rem_pio2+0x542>
 23fbef2:	9c04      	ldr	r4, [sp, #16]
 23fbef4:	2000      	movs	r0, #0
 23fbef6:	9d01      	ldr	r5, [sp, #4]
 23fbef8:	2100      	movs	r1, #0
 23fbefa:	3408      	adds	r4, #8
 23fbefc:	442c      	add	r4, r5
 23fbefe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 23fbf02:	f7e7 fa73 	bl	23e33ec <__adddf3>
 23fbf06:	42a5      	cmp	r5, r4
 23fbf08:	d1f9      	bne.n	23fbefe <__kernel_rem_pio2+0x526>
 23fbf0a:	9b03      	ldr	r3, [sp, #12]
 23fbf0c:	b113      	cbz	r3, 23fbf14 <__kernel_rem_pio2+0x53c>
 23fbf0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fbf12:	4619      	mov	r1, r3
 23fbf14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fbf16:	e9c3 0100 	strd	r0, r1, [r3]
 23fbf1a:	9b07      	ldr	r3, [sp, #28]
 23fbf1c:	f003 0007 	and.w	r0, r3, #7
 23fbf20:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23fbf24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fbf28:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23fbf2a:	2b03      	cmp	r3, #3
 23fbf2c:	d1f5      	bne.n	23fbf1a <__kernel_rem_pio2+0x542>
 23fbf2e:	f1ba 0f00 	cmp.w	sl, #0
 23fbf32:	f000 816b 	beq.w	23fc20c <__kernel_rem_pio2+0x834>
 23fbf36:	9a01      	ldr	r2, [sp, #4]
 23fbf38:	9b04      	ldr	r3, [sp, #16]
 23fbf3a:	eb02 0bca 	add.w	fp, r2, sl, lsl #3
 23fbf3e:	18d3      	adds	r3, r2, r3
 23fbf40:	e9d3 4500 	ldrd	r4, r5, [r3]
 23fbf44:	e97b 6702 	ldrd	r6, r7, [fp, #-8]!
 23fbf48:	4620      	mov	r0, r4
 23fbf4a:	4629      	mov	r1, r5
 23fbf4c:	4632      	mov	r2, r6
 23fbf4e:	463b      	mov	r3, r7
 23fbf50:	f7e7 fa4c 	bl	23e33ec <__adddf3>
 23fbf54:	46a0      	mov	r8, r4
 23fbf56:	46a9      	mov	r9, r5
 23fbf58:	4604      	mov	r4, r0
 23fbf5a:	460d      	mov	r5, r1
 23fbf5c:	4630      	mov	r0, r6
 23fbf5e:	4622      	mov	r2, r4
 23fbf60:	4639      	mov	r1, r7
 23fbf62:	462b      	mov	r3, r5
 23fbf64:	f7e7 fa40 	bl	23e33e8 <__aeabi_dsub>
 23fbf68:	464b      	mov	r3, r9
 23fbf6a:	4642      	mov	r2, r8
 23fbf6c:	f7e7 fa3e 	bl	23e33ec <__adddf3>
 23fbf70:	9b01      	ldr	r3, [sp, #4]
 23fbf72:	455b      	cmp	r3, fp
 23fbf74:	e9cb 0102 	strd	r0, r1, [fp, #8]
 23fbf78:	e9cb 4500 	strd	r4, r5, [fp]
 23fbf7c:	d1e2      	bne.n	23fbf44 <__kernel_rem_pio2+0x56c>
 23fbf7e:	f1ba 0f01 	cmp.w	sl, #1
 23fbf82:	f340 8143 	ble.w	23fc20c <__kernel_rem_pio2+0x834>
 23fbf86:	9b04      	ldr	r3, [sp, #16]
 23fbf88:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 23fbf8c:	9901      	ldr	r1, [sp, #4]
 23fbf8e:	461a      	mov	r2, r3
 23fbf90:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 23fbf94:	4453      	add	r3, sl
 23fbf96:	440a      	add	r2, r1
 23fbf98:	00db      	lsls	r3, r3, #3
 23fbf9a:	f103 0a08 	add.w	sl, r3, #8
 23fbf9e:	9302      	str	r3, [sp, #8]
 23fbfa0:	e9d2 4500 	ldrd	r4, r5, [r2]
 23fbfa4:	448a      	add	sl, r1
 23fbfa6:	4620      	mov	r0, r4
 23fbfa8:	4629      	mov	r1, r5
 23fbfaa:	46a0      	mov	r8, r4
 23fbfac:	46a9      	mov	r9, r5
 23fbfae:	e97a 6702 	ldrd	r6, r7, [sl, #-8]!
 23fbfb2:	4632      	mov	r2, r6
 23fbfb4:	463b      	mov	r3, r7
 23fbfb6:	f7e7 fa19 	bl	23e33ec <__adddf3>
 23fbfba:	4604      	mov	r4, r0
 23fbfbc:	460d      	mov	r5, r1
 23fbfbe:	4630      	mov	r0, r6
 23fbfc0:	4622      	mov	r2, r4
 23fbfc2:	4639      	mov	r1, r7
 23fbfc4:	462b      	mov	r3, r5
 23fbfc6:	f7e7 fa0f 	bl	23e33e8 <__aeabi_dsub>
 23fbfca:	4642      	mov	r2, r8
 23fbfcc:	464b      	mov	r3, r9
 23fbfce:	f7e7 fa0d 	bl	23e33ec <__adddf3>
 23fbfd2:	45d3      	cmp	fp, sl
 23fbfd4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 23fbfd8:	e9ca 4500 	strd	r4, r5, [sl]
 23fbfdc:	d1e3      	bne.n	23fbfa6 <__kernel_rem_pio2+0x5ce>
 23fbfde:	9c02      	ldr	r4, [sp, #8]
 23fbfe0:	2000      	movs	r0, #0
 23fbfe2:	9b01      	ldr	r3, [sp, #4]
 23fbfe4:	2100      	movs	r1, #0
 23fbfe6:	3410      	adds	r4, #16
 23fbfe8:	f103 0510 	add.w	r5, r3, #16
 23fbfec:	441c      	add	r4, r3
 23fbfee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 23fbff2:	f7e7 f9fb 	bl	23e33ec <__adddf3>
 23fbff6:	42a5      	cmp	r5, r4
 23fbff8:	d1f9      	bne.n	23fbfee <__kernel_rem_pio2+0x616>
 23fbffa:	9b03      	ldr	r3, [sp, #12]
 23fbffc:	2b00      	cmp	r3, #0
 23fbffe:	f040 80b4 	bne.w	23fc16a <__kernel_rem_pio2+0x792>
 23fc002:	9d01      	ldr	r5, [sp, #4]
 23fc004:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 23fc006:	e9d5 2300 	ldrd	r2, r3, [r5]
 23fc00a:	e9c4 0104 	strd	r0, r1, [r4, #16]
 23fc00e:	e9c4 2300 	strd	r2, r3, [r4]
 23fc012:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 23fc016:	e9c4 2302 	strd	r2, r3, [r4, #8]
 23fc01a:	9b07      	ldr	r3, [sp, #28]
 23fc01c:	f003 0007 	and.w	r0, r3, #7
 23fc020:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23fc024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc028:	9b01      	ldr	r3, [sp, #4]
 23fc02a:	a90c      	add	r1, sp, #48	; 0x30
 23fc02c:	1e5a      	subs	r2, r3, #1
 23fc02e:	ab0c      	add	r3, sp, #48	; 0x30
 23fc030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23fc034:	f3c3 0316 	ubfx	r3, r3, #0, #23
 23fc038:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 23fc03c:	e695      	b.n	23fbd6a <__kernel_rem_pio2+0x392>
 23fc03e:	bf00      	nop
 23fc040:	00000000 	.word	0x00000000
 23fc044:	3ff00000 	.word	0x3ff00000
 23fc048:	40000000 	.word	0x40000000
 23fc04c:	3ff921fb 	.word	0x3ff921fb
 23fc050:	3ff00000 	.word	0x3ff00000
 23fc054:	3fe00000 	.word	0x3fe00000
 23fc058:	3ffffffe 	.word	0x3ffffffe
 23fc05c:	3e700000 	.word	0x3e700000
 23fc060:	023ffd40 	.word	0x023ffd40
 23fc064:	9b01      	ldr	r3, [sp, #4]
 23fc066:	f108 0801 	add.w	r8, r8, #1
 23fc06a:	2b00      	cmp	r3, #0
 23fc06c:	f340 80a8 	ble.w	23fc1c0 <__kernel_rem_pio2+0x7e8>
 23fc070:	2502      	movs	r5, #2
 23fc072:	e641      	b.n	23fbcf8 <__kernel_rem_pio2+0x320>
 23fc074:	2100      	movs	r1, #0
 23fc076:	f06f 0317 	mvn.w	r3, #23
 23fc07a:	9107      	str	r1, [sp, #28]
 23fc07c:	e4cc      	b.n	23fba18 <__kernel_rem_pio2+0x40>
 23fc07e:	2400      	movs	r4, #0
 23fc080:	e661      	b.n	23fbd46 <__kernel_rem_pio2+0x36e>
 23fc082:	ec47 6b10 	vmov	d0, r6, r7
 23fc086:	9e06      	ldr	r6, [sp, #24]
 23fc088:	9503      	str	r5, [sp, #12]
 23fc08a:	4270      	negs	r0, r6
 23fc08c:	f8cd 801c 	str.w	r8, [sp, #28]
 23fc090:	f7fe f81a 	bl	23fa0c8 <scalbn>
 23fc094:	2200      	movs	r2, #0
 23fc096:	4b5f      	ldr	r3, [pc, #380]	; (23fc214 <__kernel_rem_pio2+0x83c>)
 23fc098:	ee10 0a10 	vmov	r0, s0
 23fc09c:	ec55 4b10 	vmov	r4, r5, d0
 23fc0a0:	4629      	mov	r1, r5
 23fc0a2:	f7e7 fddf 	bl	23e3c64 <__aeabi_dcmpge>
 23fc0a6:	2800      	cmp	r0, #0
 23fc0a8:	d055      	beq.n	23fc156 <__kernel_rem_pio2+0x77e>
 23fc0aa:	3618      	adds	r6, #24
 23fc0ac:	2200      	movs	r2, #0
 23fc0ae:	4b5a      	ldr	r3, [pc, #360]	; (23fc218 <__kernel_rem_pio2+0x840>)
 23fc0b0:	4620      	mov	r0, r4
 23fc0b2:	4629      	mov	r1, r5
 23fc0b4:	9606      	str	r6, [sp, #24]
 23fc0b6:	f7e7 fb4f 	bl	23e3758 <__aeabi_dmul>
 23fc0ba:	9f01      	ldr	r7, [sp, #4]
 23fc0bc:	f7e7 fdfc 	bl	23e3cb8 <__aeabi_d2iz>
 23fc0c0:	4606      	mov	r6, r0
 23fc0c2:	f7e7 fadf 	bl	23e3684 <__aeabi_i2d>
 23fc0c6:	2200      	movs	r2, #0
 23fc0c8:	4b52      	ldr	r3, [pc, #328]	; (23fc214 <__kernel_rem_pio2+0x83c>)
 23fc0ca:	f107 0a01 	add.w	sl, r7, #1
 23fc0ce:	f7e7 fb43 	bl	23e3758 <__aeabi_dmul>
 23fc0d2:	460b      	mov	r3, r1
 23fc0d4:	4602      	mov	r2, r0
 23fc0d6:	4629      	mov	r1, r5
 23fc0d8:	4620      	mov	r0, r4
 23fc0da:	f7e7 f985 	bl	23e33e8 <__aeabi_dsub>
 23fc0de:	f7e7 fdeb 	bl	23e3cb8 <__aeabi_d2iz>
 23fc0e2:	ab0c      	add	r3, sp, #48	; 0x30
 23fc0e4:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 23fc0e8:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 23fc0ec:	e68c      	b.n	23fbe08 <__kernel_rem_pio2+0x430>
 23fc0ee:	9d01      	ldr	r5, [sp, #4]
 23fc0f0:	2000      	movs	r0, #0
 23fc0f2:	9a06      	ldr	r2, [sp, #24]
 23fc0f4:	2100      	movs	r1, #0
 23fc0f6:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
 23fc0fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 23fc0fe:	f7e7 f975 	bl	23e33ec <__adddf3>
 23fc102:	42a5      	cmp	r5, r4
 23fc104:	d1f9      	bne.n	23fc0fa <__kernel_rem_pio2+0x722>
 23fc106:	9b03      	ldr	r3, [sp, #12]
 23fc108:	2b00      	cmp	r3, #0
 23fc10a:	d149      	bne.n	23fc1a0 <__kernel_rem_pio2+0x7c8>
 23fc10c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fc10e:	4602      	mov	r2, r0
 23fc110:	e9c3 0100 	strd	r0, r1, [r3]
 23fc114:	460b      	mov	r3, r1
 23fc116:	9901      	ldr	r1, [sp, #4]
 23fc118:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fc11c:	f7e7 f964 	bl	23e33e8 <__aeabi_dsub>
 23fc120:	f1ba 0f00 	cmp.w	sl, #0
 23fc124:	dd0d      	ble.n	23fc142 <__kernel_rem_pio2+0x76a>
 23fc126:	ad4a      	add	r5, sp, #296	; 0x128
 23fc128:	2401      	movs	r4, #1
 23fc12a:	3401      	adds	r4, #1
 23fc12c:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 23fc130:	f7e7 f95c 	bl	23e33ec <__adddf3>
 23fc134:	45a2      	cmp	sl, r4
 23fc136:	daf8      	bge.n	23fc12a <__kernel_rem_pio2+0x752>
 23fc138:	9b03      	ldr	r3, [sp, #12]
 23fc13a:	b113      	cbz	r3, 23fc142 <__kernel_rem_pio2+0x76a>
 23fc13c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fc140:	4619      	mov	r1, r3
 23fc142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fc144:	e9c3 0102 	strd	r0, r1, [r3, #8]
 23fc148:	9b07      	ldr	r3, [sp, #28]
 23fc14a:	f003 0007 	and.w	r0, r3, #7
 23fc14e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23fc152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc156:	4620      	mov	r0, r4
 23fc158:	4629      	mov	r1, r5
 23fc15a:	f7e7 fdad 	bl	23e3cb8 <__aeabi_d2iz>
 23fc15e:	9b01      	ldr	r3, [sp, #4]
 23fc160:	aa0c      	add	r2, sp, #48	; 0x30
 23fc162:	469a      	mov	sl, r3
 23fc164:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 23fc168:	e64e      	b.n	23fbe08 <__kernel_rem_pio2+0x430>
 23fc16a:	9b01      	ldr	r3, [sp, #4]
 23fc16c:	4602      	mov	r2, r0
 23fc16e:	461e      	mov	r6, r3
 23fc170:	685c      	ldr	r4, [r3, #4]
 23fc172:	68dd      	ldr	r5, [r3, #12]
 23fc174:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fc178:	990b      	ldr	r1, [sp, #44]	; 0x2c
 23fc17a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 23fc17e:	6832      	ldr	r2, [r6, #0]
 23fc180:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 23fc184:	e9c1 2300 	strd	r2, r3, [r1]
 23fc188:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 23fc18c:	68b2      	ldr	r2, [r6, #8]
 23fc18e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 23fc192:	9b07      	ldr	r3, [sp, #28]
 23fc194:	f003 0007 	and.w	r0, r3, #7
 23fc198:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23fc19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc1a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fc1a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fc1a6:	6053      	str	r3, [r2, #4]
 23fc1a8:	460b      	mov	r3, r1
 23fc1aa:	9901      	ldr	r1, [sp, #4]
 23fc1ac:	6010      	str	r0, [r2, #0]
 23fc1ae:	4602      	mov	r2, r0
 23fc1b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fc1b4:	f7e7 f918 	bl	23e33e8 <__aeabi_dsub>
 23fc1b8:	f1ba 0f00 	cmp.w	sl, #0
 23fc1bc:	dcb3      	bgt.n	23fc126 <__kernel_rem_pio2+0x74e>
 23fc1be:	e7bd      	b.n	23fc13c <__kernel_rem_pio2+0x764>
 23fc1c0:	4632      	mov	r2, r6
 23fc1c2:	463b      	mov	r3, r7
 23fc1c4:	2000      	movs	r0, #0
 23fc1c6:	4915      	ldr	r1, [pc, #84]	; (23fc21c <__kernel_rem_pio2+0x844>)
 23fc1c8:	f7e7 f90e 	bl	23e33e8 <__aeabi_dsub>
 23fc1cc:	2502      	movs	r5, #2
 23fc1ce:	4606      	mov	r6, r0
 23fc1d0:	460f      	mov	r7, r1
 23fc1d2:	e500      	b.n	23fbbd6 <__kernel_rem_pio2+0x1fe>
 23fc1d4:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23fc1d6:	2b02      	cmp	r3, #2
 23fc1d8:	dc0a      	bgt.n	23fc1f0 <__kernel_rem_pio2+0x818>
 23fc1da:	2b00      	cmp	r3, #0
 23fc1dc:	dc11      	bgt.n	23fc202 <__kernel_rem_pio2+0x82a>
 23fc1de:	f47f ae9c 	bne.w	23fbf1a <__kernel_rem_pio2+0x542>
 23fc1e2:	2000      	movs	r0, #0
 23fc1e4:	2100      	movs	r1, #0
 23fc1e6:	e690      	b.n	23fbf0a <__kernel_rem_pio2+0x532>
 23fc1e8:	9b08      	ldr	r3, [sp, #32]
 23fc1ea:	00db      	lsls	r3, r3, #3
 23fc1ec:	9302      	str	r3, [sp, #8]
 23fc1ee:	e465      	b.n	23fbabc <__kernel_rem_pio2+0xe4>
 23fc1f0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23fc1f2:	2b03      	cmp	r3, #3
 23fc1f4:	f47f ae91 	bne.w	23fbf1a <__kernel_rem_pio2+0x542>
 23fc1f8:	ab48      	add	r3, sp, #288	; 0x120
 23fc1fa:	2000      	movs	r0, #0
 23fc1fc:	2100      	movs	r1, #0
 23fc1fe:	9301      	str	r3, [sp, #4]
 23fc200:	e6fb      	b.n	23fbffa <__kernel_rem_pio2+0x622>
 23fc202:	ab48      	add	r3, sp, #288	; 0x120
 23fc204:	2000      	movs	r0, #0
 23fc206:	2100      	movs	r1, #0
 23fc208:	9301      	str	r3, [sp, #4]
 23fc20a:	e77c      	b.n	23fc106 <__kernel_rem_pio2+0x72e>
 23fc20c:	2000      	movs	r0, #0
 23fc20e:	2100      	movs	r1, #0
 23fc210:	e6f3      	b.n	23fbffa <__kernel_rem_pio2+0x622>
 23fc212:	bf00      	nop
 23fc214:	41700000 	.word	0x41700000
 23fc218:	3e700000 	.word	0x3e700000
 23fc21c:	3ff00000 	.word	0x3ff00000

023fc220 <__kernel_sin>:
 23fc220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fc224:	ec5b ab10 	vmov	sl, fp, d0
 23fc228:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 23fc22c:	4680      	mov	r8, r0
 23fc22e:	ed2d 8b02 	vpush	{d8}
 23fc232:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 23fc236:	b083      	sub	sp, #12
 23fc238:	ed8d 1b00 	vstr	d1, [sp]
 23fc23c:	da07      	bge.n	23fc24e <__kernel_sin+0x2e>
 23fc23e:	ee10 0a10 	vmov	r0, s0
 23fc242:	4659      	mov	r1, fp
 23fc244:	f7e7 fd38 	bl	23e3cb8 <__aeabi_d2iz>
 23fc248:	2800      	cmp	r0, #0
 23fc24a:	f000 808e 	beq.w	23fc36a <__kernel_sin+0x14a>
 23fc24e:	4652      	mov	r2, sl
 23fc250:	465b      	mov	r3, fp
 23fc252:	4650      	mov	r0, sl
 23fc254:	4659      	mov	r1, fp
 23fc256:	f7e7 fa7f 	bl	23e3758 <__aeabi_dmul>
 23fc25a:	4604      	mov	r4, r0
 23fc25c:	460d      	mov	r5, r1
 23fc25e:	4650      	mov	r0, sl
 23fc260:	4622      	mov	r2, r4
 23fc262:	4659      	mov	r1, fp
 23fc264:	462b      	mov	r3, r5
 23fc266:	f7e7 fa77 	bl	23e3758 <__aeabi_dmul>
 23fc26a:	4606      	mov	r6, r0
 23fc26c:	460f      	mov	r7, r1
 23fc26e:	4620      	mov	r0, r4
 23fc270:	4629      	mov	r1, r5
 23fc272:	a344      	add	r3, pc, #272	; (adr r3, 23fc384 <__kernel_sin+0x164>)
 23fc274:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc278:	f7e7 fa6e 	bl	23e3758 <__aeabi_dmul>
 23fc27c:	a343      	add	r3, pc, #268	; (adr r3, 23fc38c <__kernel_sin+0x16c>)
 23fc27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc282:	f7e7 f8b1 	bl	23e33e8 <__aeabi_dsub>
 23fc286:	4622      	mov	r2, r4
 23fc288:	462b      	mov	r3, r5
 23fc28a:	f7e7 fa65 	bl	23e3758 <__aeabi_dmul>
 23fc28e:	a341      	add	r3, pc, #260	; (adr r3, 23fc394 <__kernel_sin+0x174>)
 23fc290:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc294:	f7e7 f8aa 	bl	23e33ec <__adddf3>
 23fc298:	4622      	mov	r2, r4
 23fc29a:	462b      	mov	r3, r5
 23fc29c:	f7e7 fa5c 	bl	23e3758 <__aeabi_dmul>
 23fc2a0:	a33e      	add	r3, pc, #248	; (adr r3, 23fc39c <__kernel_sin+0x17c>)
 23fc2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc2a6:	f7e7 f89f 	bl	23e33e8 <__aeabi_dsub>
 23fc2aa:	4622      	mov	r2, r4
 23fc2ac:	462b      	mov	r3, r5
 23fc2ae:	f7e7 fa53 	bl	23e3758 <__aeabi_dmul>
 23fc2b2:	a33c      	add	r3, pc, #240	; (adr r3, 23fc3a4 <__kernel_sin+0x184>)
 23fc2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc2b8:	f7e7 f898 	bl	23e33ec <__adddf3>
 23fc2bc:	ec41 0b18 	vmov	d8, r0, r1
 23fc2c0:	f1b8 0f00 	cmp.w	r8, #0
 23fc2c4:	d037      	beq.n	23fc336 <__kernel_sin+0x116>
 23fc2c6:	2200      	movs	r2, #0
 23fc2c8:	4b2d      	ldr	r3, [pc, #180]	; (23fc380 <__kernel_sin+0x160>)
 23fc2ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 23fc2ce:	f7e7 fa43 	bl	23e3758 <__aeabi_dmul>
 23fc2d2:	4680      	mov	r8, r0
 23fc2d4:	4689      	mov	r9, r1
 23fc2d6:	4630      	mov	r0, r6
 23fc2d8:	4639      	mov	r1, r7
 23fc2da:	ec53 2b18 	vmov	r2, r3, d8
 23fc2de:	f7e7 fa3b 	bl	23e3758 <__aeabi_dmul>
 23fc2e2:	4602      	mov	r2, r0
 23fc2e4:	460b      	mov	r3, r1
 23fc2e6:	4640      	mov	r0, r8
 23fc2e8:	4649      	mov	r1, r9
 23fc2ea:	f7e7 f87d 	bl	23e33e8 <__aeabi_dsub>
 23fc2ee:	4622      	mov	r2, r4
 23fc2f0:	462b      	mov	r3, r5
 23fc2f2:	f7e7 fa31 	bl	23e3758 <__aeabi_dmul>
 23fc2f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 23fc2fa:	f7e7 f875 	bl	23e33e8 <__aeabi_dsub>
 23fc2fe:	4604      	mov	r4, r0
 23fc300:	460d      	mov	r5, r1
 23fc302:	4630      	mov	r0, r6
 23fc304:	4639      	mov	r1, r7
 23fc306:	a31c      	add	r3, pc, #112	; (adr r3, 23fc378 <__kernel_sin+0x158>)
 23fc308:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc30c:	f7e7 fa24 	bl	23e3758 <__aeabi_dmul>
 23fc310:	4602      	mov	r2, r0
 23fc312:	460b      	mov	r3, r1
 23fc314:	4620      	mov	r0, r4
 23fc316:	4629      	mov	r1, r5
 23fc318:	f7e7 f868 	bl	23e33ec <__adddf3>
 23fc31c:	4602      	mov	r2, r0
 23fc31e:	460b      	mov	r3, r1
 23fc320:	4650      	mov	r0, sl
 23fc322:	4659      	mov	r1, fp
 23fc324:	f7e7 f860 	bl	23e33e8 <__aeabi_dsub>
 23fc328:	ec41 0b10 	vmov	d0, r0, r1
 23fc32c:	b003      	add	sp, #12
 23fc32e:	ecbd 8b02 	vpop	{d8}
 23fc332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc336:	4602      	mov	r2, r0
 23fc338:	460b      	mov	r3, r1
 23fc33a:	4620      	mov	r0, r4
 23fc33c:	4629      	mov	r1, r5
 23fc33e:	f7e7 fa0b 	bl	23e3758 <__aeabi_dmul>
 23fc342:	a30d      	add	r3, pc, #52	; (adr r3, 23fc378 <__kernel_sin+0x158>)
 23fc344:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc348:	f7e7 f84e 	bl	23e33e8 <__aeabi_dsub>
 23fc34c:	4632      	mov	r2, r6
 23fc34e:	463b      	mov	r3, r7
 23fc350:	f7e7 fa02 	bl	23e3758 <__aeabi_dmul>
 23fc354:	4652      	mov	r2, sl
 23fc356:	465b      	mov	r3, fp
 23fc358:	f7e7 f848 	bl	23e33ec <__adddf3>
 23fc35c:	ec41 0b10 	vmov	d0, r0, r1
 23fc360:	b003      	add	sp, #12
 23fc362:	ecbd 8b02 	vpop	{d8}
 23fc366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc36a:	ec4b ab10 	vmov	d0, sl, fp
 23fc36e:	b003      	add	sp, #12
 23fc370:	ecbd 8b02 	vpop	{d8}
 23fc374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc378:	55555549 	.word	0x55555549
 23fc37c:	3fc55555 	.word	0x3fc55555
 23fc380:	3fe00000 	.word	0x3fe00000
 23fc384:	5acfd57c 	.word	0x5acfd57c
 23fc388:	3de5d93a 	.word	0x3de5d93a
 23fc38c:	8a2b9ceb 	.word	0x8a2b9ceb
 23fc390:	3e5ae5e6 	.word	0x3e5ae5e6
 23fc394:	57b1fe7d 	.word	0x57b1fe7d
 23fc398:	3ec71de3 	.word	0x3ec71de3
 23fc39c:	19c161d5 	.word	0x19c161d5
 23fc3a0:	3f2a01a0 	.word	0x3f2a01a0
 23fc3a4:	1110f8a6 	.word	0x1110f8a6
 23fc3a8:	3f811111 	.word	0x3f811111

023fc3ac <finite>:
 23fc3ac:	b082      	sub	sp, #8
 23fc3ae:	4805      	ldr	r0, [pc, #20]	; (23fc3c4 <finite+0x18>)
 23fc3b0:	ed8d 0b00 	vstr	d0, [sp]
 23fc3b4:	9b01      	ldr	r3, [sp, #4]
 23fc3b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 23fc3ba:	4418      	add	r0, r3
 23fc3bc:	0fc0      	lsrs	r0, r0, #31
 23fc3be:	b002      	add	sp, #8
 23fc3c0:	4770      	bx	lr
 23fc3c2:	bf00      	nop
 23fc3c4:	80100000 	.word	0x80100000

023fc3c8 <floor>:
 23fc3c8:	ec51 0b10 	vmov	r0, r1, d0
 23fc3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc3ce:	f3c1 530a 	ubfx	r3, r1, #20, #11
 23fc3d2:	460c      	mov	r4, r1
 23fc3d4:	ee10 6a10 	vmov	r6, s0
 23fc3d8:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
 23fc3dc:	2d13      	cmp	r5, #19
 23fc3de:	dc30      	bgt.n	23fc442 <floor+0x7a>
 23fc3e0:	2d00      	cmp	r5, #0
 23fc3e2:	db1e      	blt.n	23fc422 <floor+0x5a>
 23fc3e4:	4f38      	ldr	r7, [pc, #224]	; (23fc4c8 <floor+0x100>)
 23fc3e6:	412f      	asrs	r7, r5
 23fc3e8:	ea01 0307 	and.w	r3, r1, r7
 23fc3ec:	4303      	orrs	r3, r0
 23fc3ee:	d02d      	beq.n	23fc44c <floor+0x84>
 23fc3f0:	a333      	add	r3, pc, #204	; (adr r3, 23fc4c0 <floor+0xf8>)
 23fc3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc3f6:	f7e6 fff9 	bl	23e33ec <__adddf3>
 23fc3fa:	2200      	movs	r2, #0
 23fc3fc:	2300      	movs	r3, #0
 23fc3fe:	f7e7 fc3b 	bl	23e3c78 <__aeabi_dcmpgt>
 23fc402:	b148      	cbz	r0, 23fc418 <floor+0x50>
 23fc404:	2c00      	cmp	r4, #0
 23fc406:	da04      	bge.n	23fc412 <floor+0x4a>
 23fc408:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 23fc40c:	fa43 f505 	asr.w	r5, r3, r5
 23fc410:	442c      	add	r4, r5
 23fc412:	ea24 0407 	bic.w	r4, r4, r7
 23fc416:	2600      	movs	r6, #0
 23fc418:	4623      	mov	r3, r4
 23fc41a:	4632      	mov	r2, r6
 23fc41c:	ec43 2b10 	vmov	d0, r2, r3
 23fc420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fc422:	a327      	add	r3, pc, #156	; (adr r3, 23fc4c0 <floor+0xf8>)
 23fc424:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc428:	f7e6 ffe0 	bl	23e33ec <__adddf3>
 23fc42c:	2200      	movs	r2, #0
 23fc42e:	2300      	movs	r3, #0
 23fc430:	f7e7 fc22 	bl	23e3c78 <__aeabi_dcmpgt>
 23fc434:	2800      	cmp	r0, #0
 23fc436:	d0ef      	beq.n	23fc418 <floor+0x50>
 23fc438:	2c00      	cmp	r4, #0
 23fc43a:	db29      	blt.n	23fc490 <floor+0xc8>
 23fc43c:	2600      	movs	r6, #0
 23fc43e:	4634      	mov	r4, r6
 23fc440:	e7ea      	b.n	23fc418 <floor+0x50>
 23fc442:	2d33      	cmp	r5, #51	; 0x33
 23fc444:	dd05      	ble.n	23fc452 <floor+0x8a>
 23fc446:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 23fc44a:	d019      	beq.n	23fc480 <floor+0xb8>
 23fc44c:	ec41 0b10 	vmov	d0, r0, r1
 23fc450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fc452:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 23fc456:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 23fc45a:	40df      	lsrs	r7, r3
 23fc45c:	4207      	tst	r7, r0
 23fc45e:	d0f5      	beq.n	23fc44c <floor+0x84>
 23fc460:	a317      	add	r3, pc, #92	; (adr r3, 23fc4c0 <floor+0xf8>)
 23fc462:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fc466:	f7e6 ffc1 	bl	23e33ec <__adddf3>
 23fc46a:	2200      	movs	r2, #0
 23fc46c:	2300      	movs	r3, #0
 23fc46e:	f7e7 fc03 	bl	23e3c78 <__aeabi_dcmpgt>
 23fc472:	2800      	cmp	r0, #0
 23fc474:	d0d0      	beq.n	23fc418 <floor+0x50>
 23fc476:	2c00      	cmp	r4, #0
 23fc478:	db13      	blt.n	23fc4a2 <floor+0xda>
 23fc47a:	ea26 0607 	bic.w	r6, r6, r7
 23fc47e:	e7cb      	b.n	23fc418 <floor+0x50>
 23fc480:	ee10 2a10 	vmov	r2, s0
 23fc484:	460b      	mov	r3, r1
 23fc486:	f7e6 ffb1 	bl	23e33ec <__adddf3>
 23fc48a:	ec41 0b10 	vmov	d0, r0, r1
 23fc48e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fc490:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 23fc494:	4a0d      	ldr	r2, [pc, #52]	; (23fc4cc <floor+0x104>)
 23fc496:	4333      	orrs	r3, r6
 23fc498:	2600      	movs	r6, #0
 23fc49a:	42b3      	cmp	r3, r6
 23fc49c:	bf18      	it	ne
 23fc49e:	4614      	movne	r4, r2
 23fc4a0:	e7ba      	b.n	23fc418 <floor+0x50>
 23fc4a2:	2d14      	cmp	r5, #20
 23fc4a4:	d008      	beq.n	23fc4b8 <floor+0xf0>
 23fc4a6:	2301      	movs	r3, #1
 23fc4a8:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 23fc4ac:	fa03 f505 	lsl.w	r5, r3, r5
 23fc4b0:	19ae      	adds	r6, r5, r6
 23fc4b2:	bf28      	it	cs
 23fc4b4:	18e4      	addcs	r4, r4, r3
 23fc4b6:	e7e0      	b.n	23fc47a <floor+0xb2>
 23fc4b8:	3401      	adds	r4, #1
 23fc4ba:	e7de      	b.n	23fc47a <floor+0xb2>
 23fc4bc:	f3af 8000 	nop.w
 23fc4c0:	8800759c 	.word	0x8800759c
 23fc4c4:	7e37e43c 	.word	0x7e37e43c
 23fc4c8:	000fffff 	.word	0x000fffff
 23fc4cc:	bff00000 	.word	0xbff00000

023fc4d0 <nan>:
 23fc4d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 23fc4d8 <nan+0x8>
 23fc4d4:	4770      	bx	lr
 23fc4d6:	bf00      	nop
 23fc4d8:	00000000 	.word	0x00000000
 23fc4dc:	7ff80000 	.word	0x7ff80000

023fc4e0 <rint>:
 23fc4e0:	ec53 2b10 	vmov	r2, r3, d0
 23fc4e4:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
 23fc4e8:	ee10 0a10 	vmov	r0, s0
 23fc4ec:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
 23fc4f0:	2913      	cmp	r1, #19
 23fc4f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc4f4:	461c      	mov	r4, r3
 23fc4f6:	b083      	sub	sp, #12
 23fc4f8:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
 23fc4fc:	dc3a      	bgt.n	23fc574 <rint+0x94>
 23fc4fe:	2900      	cmp	r1, #0
 23fc500:	db30      	blt.n	23fc564 <rint+0x84>
 23fc502:	4d42      	ldr	r5, [pc, #264]	; (23fc60c <rint+0x12c>)
 23fc504:	fa45 fc01 	asr.w	ip, r5, r1
 23fc508:	ea03 050c 	and.w	r5, r3, ip
 23fc50c:	4315      	orrs	r5, r2
 23fc50e:	d02d      	beq.n	23fc56c <rint+0x8c>
 23fc510:	ea03 035c 	and.w	r3, r3, ip, lsr #1
 23fc514:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 23fc518:	4318      	orrs	r0, r3
 23fc51a:	d00c      	beq.n	23fc536 <rint+0x56>
 23fc51c:	ea24 0c0c 	bic.w	ip, r4, ip
 23fc520:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 23fc524:	2913      	cmp	r1, #19
 23fc526:	fa44 f101 	asr.w	r1, r4, r1
 23fc52a:	bf0c      	ite	eq
 23fc52c:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
 23fc530:	2000      	movne	r0, #0
 23fc532:	ea4c 0401 	orr.w	r4, ip, r1
 23fc536:	4936      	ldr	r1, [pc, #216]	; (23fc610 <rint+0x130>)
 23fc538:	4623      	mov	r3, r4
 23fc53a:	4602      	mov	r2, r0
 23fc53c:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
 23fc540:	e9de 4500 	ldrd	r4, r5, [lr]
 23fc544:	4620      	mov	r0, r4
 23fc546:	4629      	mov	r1, r5
 23fc548:	f7e6 ff50 	bl	23e33ec <__adddf3>
 23fc54c:	4622      	mov	r2, r4
 23fc54e:	462b      	mov	r3, r5
 23fc550:	e9cd 0100 	strd	r0, r1, [sp]
 23fc554:	e9dd 0100 	ldrd	r0, r1, [sp]
 23fc558:	f7e6 ff46 	bl	23e33e8 <__aeabi_dsub>
 23fc55c:	ec41 0b10 	vmov	d0, r0, r1
 23fc560:	b003      	add	sp, #12
 23fc562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fc564:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 23fc568:	4311      	orrs	r1, r2
 23fc56a:	d124      	bne.n	23fc5b6 <rint+0xd6>
 23fc56c:	ec43 2b10 	vmov	d0, r2, r3
 23fc570:	b003      	add	sp, #12
 23fc572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fc574:	2933      	cmp	r1, #51	; 0x33
 23fc576:	dd08      	ble.n	23fc58a <rint+0xaa>
 23fc578:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 23fc57c:	d1f6      	bne.n	23fc56c <rint+0x8c>
 23fc57e:	4619      	mov	r1, r3
 23fc580:	f7e6 ff34 	bl	23e33ec <__adddf3>
 23fc584:	ec41 0b10 	vmov	d0, r0, r1
 23fc588:	e7f2      	b.n	23fc570 <rint+0x90>
 23fc58a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 23fc58e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 23fc592:	fa21 f10c 	lsr.w	r1, r1, ip
 23fc596:	420a      	tst	r2, r1
 23fc598:	d0e8      	beq.n	23fc56c <rint+0x8c>
 23fc59a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 23fc59e:	ea4f 0351 	mov.w	r3, r1, lsr #1
 23fc5a2:	d0c8      	beq.n	23fc536 <rint+0x56>
 23fc5a4:	ea20 0303 	bic.w	r3, r0, r3
 23fc5a8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 23fc5ac:	fa40 fc0c 	asr.w	ip, r0, ip
 23fc5b0:	ea43 000c 	orr.w	r0, r3, ip
 23fc5b4:	e7bf      	b.n	23fc536 <rint+0x56>
 23fc5b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 23fc5ba:	4a16      	ldr	r2, [pc, #88]	; (23fc614 <rint+0x134>)
 23fc5bc:	4318      	orrs	r0, r3
 23fc5be:	4022      	ands	r2, r4
 23fc5c0:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 23fc5c4:	4243      	negs	r3, r0
 23fc5c6:	4303      	orrs	r3, r0
 23fc5c8:	0b1b      	lsrs	r3, r3, #12
 23fc5ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 23fc5ce:	ea43 0702 	orr.w	r7, r3, r2
 23fc5d2:	4b0f      	ldr	r3, [pc, #60]	; (23fc610 <rint+0x130>)
 23fc5d4:	ee10 2a10 	vmov	r2, s0
 23fc5d8:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
 23fc5dc:	463b      	mov	r3, r7
 23fc5de:	e9de 6700 	ldrd	r6, r7, [lr]
 23fc5e2:	4630      	mov	r0, r6
 23fc5e4:	4639      	mov	r1, r7
 23fc5e6:	f7e6 ff01 	bl	23e33ec <__adddf3>
 23fc5ea:	4632      	mov	r2, r6
 23fc5ec:	463b      	mov	r3, r7
 23fc5ee:	e9cd 0100 	strd	r0, r1, [sp]
 23fc5f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 23fc5f6:	f7e6 fef7 	bl	23e33e8 <__aeabi_dsub>
 23fc5fa:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fc5fe:	4602      	mov	r2, r0
 23fc600:	ea41 0304 	orr.w	r3, r1, r4
 23fc604:	ec43 2b10 	vmov	d0, r2, r3
 23fc608:	b003      	add	sp, #12
 23fc60a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fc60c:	000fffff 	.word	0x000fffff
 23fc610:	023ffd88 	.word	0x023ffd88
 23fc614:	fffe0000 	.word	0xfffe0000

023fc618 <asctime_r>:
 23fc618:	b510      	push	{r4, lr}
 23fc61a:	460c      	mov	r4, r1
 23fc61c:	6941      	ldr	r1, [r0, #20]
 23fc61e:	b086      	sub	sp, #24
 23fc620:	6903      	ldr	r3, [r0, #16]
 23fc622:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 23fc626:	6982      	ldr	r2, [r0, #24]
 23fc628:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23fc62c:	9104      	str	r1, [sp, #16]
 23fc62e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 23fc632:	6801      	ldr	r1, [r0, #0]
 23fc634:	9103      	str	r1, [sp, #12]
 23fc636:	6841      	ldr	r1, [r0, #4]
 23fc638:	9102      	str	r1, [sp, #8]
 23fc63a:	6881      	ldr	r1, [r0, #8]
 23fc63c:	9101      	str	r1, [sp, #4]
 23fc63e:	68c1      	ldr	r1, [r0, #12]
 23fc640:	4620      	mov	r0, r4
 23fc642:	9100      	str	r1, [sp, #0]
 23fc644:	4904      	ldr	r1, [pc, #16]	; (23fc658 <asctime_r+0x40>)
 23fc646:	440b      	add	r3, r1
 23fc648:	4904      	ldr	r1, [pc, #16]	; (23fc65c <asctime_r+0x44>)
 23fc64a:	440a      	add	r2, r1
 23fc64c:	4904      	ldr	r1, [pc, #16]	; (23fc660 <asctime_r+0x48>)
 23fc64e:	f7fa ff19 	bl	23f7484 <siprintf>
 23fc652:	4620      	mov	r0, r4
 23fc654:	b006      	add	sp, #24
 23fc656:	bd10      	pop	{r4, pc}
 23fc658:	023ffdcd 	.word	0x023ffdcd
 23fc65c:	023ffdb8 	.word	0x023ffdb8
 23fc660:	023ffd98 	.word	0x023ffd98

023fc664 <atexit>:
 23fc664:	2300      	movs	r3, #0
 23fc666:	4601      	mov	r1, r0
 23fc668:	461a      	mov	r2, r3
 23fc66a:	4618      	mov	r0, r3
 23fc66c:	f7e7 bef8 	b.w	23e4460 <__register_exitproc>

023fc670 <atoi>:
 23fc670:	220a      	movs	r2, #10
 23fc672:	2100      	movs	r1, #0
 23fc674:	f000 b9b2 	b.w	23fc9dc <strtol>

023fc678 <gmtime>:
 23fc678:	b538      	push	{r3, r4, r5, lr}
 23fc67a:	4b0b      	ldr	r3, [pc, #44]	; (23fc6a8 <gmtime+0x30>)
 23fc67c:	4604      	mov	r4, r0
 23fc67e:	681d      	ldr	r5, [r3, #0]
 23fc680:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 23fc682:	b953      	cbnz	r3, 23fc69a <gmtime+0x22>
 23fc684:	2024      	movs	r0, #36	; 0x24
 23fc686:	f7fa fec5 	bl	23f7414 <malloc>
 23fc68a:	4602      	mov	r2, r0
 23fc68c:	63e8      	str	r0, [r5, #60]	; 0x3c
 23fc68e:	b920      	cbnz	r0, 23fc69a <gmtime+0x22>
 23fc690:	4b06      	ldr	r3, [pc, #24]	; (23fc6ac <gmtime+0x34>)
 23fc692:	2139      	movs	r1, #57	; 0x39
 23fc694:	4806      	ldr	r0, [pc, #24]	; (23fc6b0 <gmtime+0x38>)
 23fc696:	f7fa ff57 	bl	23f7548 <__assert_func>
 23fc69a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 23fc69c:	4620      	mov	r0, r4
 23fc69e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fc6a2:	f7fa bf89 	b.w	23f75b8 <gmtime_r>
 23fc6a6:	bf00      	nop
 23fc6a8:	1006a1d0 	.word	0x1006a1d0
 23fc6ac:	023ffdf1 	.word	0x023ffdf1
 23fc6b0:	023ffe08 	.word	0x023ffe08

023fc6b4 <isprint>:
 23fc6b4:	4b02      	ldr	r3, [pc, #8]	; (23fc6c0 <isprint+0xc>)
 23fc6b6:	4418      	add	r0, r3
 23fc6b8:	7840      	ldrb	r0, [r0, #1]
 23fc6ba:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23fc6be:	4770      	bx	lr
 23fc6c0:	023ffeba 	.word	0x023ffeba

023fc6c4 <memcmp>:
 23fc6c4:	3901      	subs	r1, #1
 23fc6c6:	4402      	add	r2, r0
 23fc6c8:	b510      	push	{r4, lr}
 23fc6ca:	4290      	cmp	r0, r2
 23fc6cc:	d101      	bne.n	23fc6d2 <memcmp+0xe>
 23fc6ce:	2000      	movs	r0, #0
 23fc6d0:	e005      	b.n	23fc6de <memcmp+0x1a>
 23fc6d2:	7803      	ldrb	r3, [r0, #0]
 23fc6d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 23fc6d8:	42a3      	cmp	r3, r4
 23fc6da:	d001      	beq.n	23fc6e0 <memcmp+0x1c>
 23fc6dc:	1b18      	subs	r0, r3, r4
 23fc6de:	bd10      	pop	{r4, pc}
 23fc6e0:	3001      	adds	r0, #1
 23fc6e2:	e7f2      	b.n	23fc6ca <memcmp+0x6>

023fc6e4 <memcpy>:
 23fc6e4:	440a      	add	r2, r1
 23fc6e6:	1e43      	subs	r3, r0, #1
 23fc6e8:	4291      	cmp	r1, r2
 23fc6ea:	d100      	bne.n	23fc6ee <memcpy+0xa>
 23fc6ec:	4770      	bx	lr
 23fc6ee:	b510      	push	{r4, lr}
 23fc6f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fc6f4:	4291      	cmp	r1, r2
 23fc6f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 23fc6fa:	d1f9      	bne.n	23fc6f0 <memcpy+0xc>
 23fc6fc:	bd10      	pop	{r4, pc}

023fc6fe <memset>:
 23fc6fe:	4402      	add	r2, r0
 23fc700:	4603      	mov	r3, r0
 23fc702:	4293      	cmp	r3, r2
 23fc704:	d100      	bne.n	23fc708 <memset+0xa>
 23fc706:	4770      	bx	lr
 23fc708:	f803 1b01 	strb.w	r1, [r3], #1
 23fc70c:	e7f9      	b.n	23fc702 <memset+0x4>
	...

023fc710 <srand>:
 23fc710:	b538      	push	{r3, r4, r5, lr}
 23fc712:	4b10      	ldr	r3, [pc, #64]	; (23fc754 <srand+0x44>)
 23fc714:	4604      	mov	r4, r0
 23fc716:	681d      	ldr	r5, [r3, #0]
 23fc718:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fc71a:	b9b3      	cbnz	r3, 23fc74a <srand+0x3a>
 23fc71c:	2018      	movs	r0, #24
 23fc71e:	f7fa fe79 	bl	23f7414 <malloc>
 23fc722:	4602      	mov	r2, r0
 23fc724:	63a8      	str	r0, [r5, #56]	; 0x38
 23fc726:	b920      	cbnz	r0, 23fc732 <srand+0x22>
 23fc728:	4b0b      	ldr	r3, [pc, #44]	; (23fc758 <srand+0x48>)
 23fc72a:	2142      	movs	r1, #66	; 0x42
 23fc72c:	480b      	ldr	r0, [pc, #44]	; (23fc75c <srand+0x4c>)
 23fc72e:	f7fa ff0b 	bl	23f7548 <__assert_func>
 23fc732:	490b      	ldr	r1, [pc, #44]	; (23fc760 <srand+0x50>)
 23fc734:	4b0b      	ldr	r3, [pc, #44]	; (23fc764 <srand+0x54>)
 23fc736:	e9c0 1300 	strd	r1, r3, [r0]
 23fc73a:	4b0b      	ldr	r3, [pc, #44]	; (23fc768 <srand+0x58>)
 23fc73c:	2100      	movs	r1, #0
 23fc73e:	6083      	str	r3, [r0, #8]
 23fc740:	230b      	movs	r3, #11
 23fc742:	8183      	strh	r3, [r0, #12]
 23fc744:	2001      	movs	r0, #1
 23fc746:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23fc74a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fc74c:	2200      	movs	r2, #0
 23fc74e:	611c      	str	r4, [r3, #16]
 23fc750:	615a      	str	r2, [r3, #20]
 23fc752:	bd38      	pop	{r3, r4, r5, pc}
 23fc754:	1006a1d0 	.word	0x1006a1d0
 23fc758:	023ffdf1 	.word	0x023ffdf1
 23fc75c:	023ffe61 	.word	0x023ffe61
 23fc760:	abcd330e 	.word	0xabcd330e
 23fc764:	e66d1234 	.word	0xe66d1234
 23fc768:	0005deec 	.word	0x0005deec

023fc76c <rand>:
 23fc76c:	4b16      	ldr	r3, [pc, #88]	; (23fc7c8 <rand+0x5c>)
 23fc76e:	b510      	push	{r4, lr}
 23fc770:	681c      	ldr	r4, [r3, #0]
 23fc772:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23fc774:	b9b3      	cbnz	r3, 23fc7a4 <rand+0x38>
 23fc776:	2018      	movs	r0, #24
 23fc778:	f7fa fe4c 	bl	23f7414 <malloc>
 23fc77c:	63a0      	str	r0, [r4, #56]	; 0x38
 23fc77e:	b928      	cbnz	r0, 23fc78c <rand+0x20>
 23fc780:	4602      	mov	r2, r0
 23fc782:	4b12      	ldr	r3, [pc, #72]	; (23fc7cc <rand+0x60>)
 23fc784:	214e      	movs	r1, #78	; 0x4e
 23fc786:	4812      	ldr	r0, [pc, #72]	; (23fc7d0 <rand+0x64>)
 23fc788:	f7fa fede 	bl	23f7548 <__assert_func>
 23fc78c:	4a11      	ldr	r2, [pc, #68]	; (23fc7d4 <rand+0x68>)
 23fc78e:	4b12      	ldr	r3, [pc, #72]	; (23fc7d8 <rand+0x6c>)
 23fc790:	e9c0 2300 	strd	r2, r3, [r0]
 23fc794:	4b11      	ldr	r3, [pc, #68]	; (23fc7dc <rand+0x70>)
 23fc796:	2201      	movs	r2, #1
 23fc798:	6083      	str	r3, [r0, #8]
 23fc79a:	230b      	movs	r3, #11
 23fc79c:	8183      	strh	r3, [r0, #12]
 23fc79e:	2300      	movs	r3, #0
 23fc7a0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 23fc7a4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 23fc7a6:	4a0e      	ldr	r2, [pc, #56]	; (23fc7e0 <rand+0x74>)
 23fc7a8:	6920      	ldr	r0, [r4, #16]
 23fc7aa:	6963      	ldr	r3, [r4, #20]
 23fc7ac:	490d      	ldr	r1, [pc, #52]	; (23fc7e4 <rand+0x78>)
 23fc7ae:	4342      	muls	r2, r0
 23fc7b0:	fb01 2203 	mla	r2, r1, r3, r2
 23fc7b4:	fba0 0101 	umull	r0, r1, r0, r1
 23fc7b8:	1c43      	adds	r3, r0, #1
 23fc7ba:	eb42 0001 	adc.w	r0, r2, r1
 23fc7be:	e9c4 3004 	strd	r3, r0, [r4, #16]
 23fc7c2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 23fc7c6:	bd10      	pop	{r4, pc}
 23fc7c8:	1006a1d0 	.word	0x1006a1d0
 23fc7cc:	023ffdf1 	.word	0x023ffdf1
 23fc7d0:	023ffe61 	.word	0x023ffe61
 23fc7d4:	abcd330e 	.word	0xabcd330e
 23fc7d8:	e66d1234 	.word	0xe66d1234
 23fc7dc:	0005deec 	.word	0x0005deec
 23fc7e0:	5851f42d 	.word	0x5851f42d
 23fc7e4:	4c957f2d 	.word	0x4c957f2d

023fc7e8 <strcpy>:
 23fc7e8:	4603      	mov	r3, r0
 23fc7ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fc7ee:	f803 2b01 	strb.w	r2, [r3], #1
 23fc7f2:	2a00      	cmp	r2, #0
 23fc7f4:	d1f9      	bne.n	23fc7ea <strcpy+0x2>
 23fc7f6:	4770      	bx	lr

023fc7f8 <strdup>:
 23fc7f8:	4b02      	ldr	r3, [pc, #8]	; (23fc804 <strdup+0xc>)
 23fc7fa:	4601      	mov	r1, r0
 23fc7fc:	6818      	ldr	r0, [r3, #0]
 23fc7fe:	f000 b803 	b.w	23fc808 <_strdup_r>
 23fc802:	bf00      	nop
 23fc804:	1006a1d0 	.word	0x1006a1d0

023fc808 <_strdup_r>:
 23fc808:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc80a:	4604      	mov	r4, r0
 23fc80c:	4608      	mov	r0, r1
 23fc80e:	460d      	mov	r5, r1
 23fc810:	f7e7 fde2 	bl	23e43d8 <strlen>
 23fc814:	1c42      	adds	r2, r0, #1
 23fc816:	4620      	mov	r0, r4
 23fc818:	4611      	mov	r1, r2
 23fc81a:	9201      	str	r2, [sp, #4]
 23fc81c:	f7fa fe78 	bl	23f7510 <_malloc_r>
 23fc820:	4604      	mov	r4, r0
 23fc822:	b118      	cbz	r0, 23fc82c <_strdup_r+0x24>
 23fc824:	9a01      	ldr	r2, [sp, #4]
 23fc826:	4629      	mov	r1, r5
 23fc828:	f7ff ff5c 	bl	23fc6e4 <memcpy>
 23fc82c:	4620      	mov	r0, r4
 23fc82e:	b003      	add	sp, #12
 23fc830:	bd30      	pop	{r4, r5, pc}

023fc832 <strncmp>:
 23fc832:	b510      	push	{r4, lr}
 23fc834:	b17a      	cbz	r2, 23fc856 <strncmp+0x24>
 23fc836:	4603      	mov	r3, r0
 23fc838:	3901      	subs	r1, #1
 23fc83a:	1884      	adds	r4, r0, r2
 23fc83c:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fc840:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23fc844:	4290      	cmp	r0, r2
 23fc846:	d101      	bne.n	23fc84c <strncmp+0x1a>
 23fc848:	42a3      	cmp	r3, r4
 23fc84a:	d101      	bne.n	23fc850 <strncmp+0x1e>
 23fc84c:	1a80      	subs	r0, r0, r2
 23fc84e:	bd10      	pop	{r4, pc}
 23fc850:	2800      	cmp	r0, #0
 23fc852:	d1f3      	bne.n	23fc83c <strncmp+0xa>
 23fc854:	e7fa      	b.n	23fc84c <strncmp+0x1a>
 23fc856:	4610      	mov	r0, r2
 23fc858:	e7f9      	b.n	23fc84e <strncmp+0x1c>

023fc85a <strncpy>:
 23fc85a:	3901      	subs	r1, #1
 23fc85c:	4603      	mov	r3, r0
 23fc85e:	b510      	push	{r4, lr}
 23fc860:	b132      	cbz	r2, 23fc870 <strncpy+0x16>
 23fc862:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 23fc866:	3a01      	subs	r2, #1
 23fc868:	f803 4b01 	strb.w	r4, [r3], #1
 23fc86c:	2c00      	cmp	r4, #0
 23fc86e:	d1f7      	bne.n	23fc860 <strncpy+0x6>
 23fc870:	441a      	add	r2, r3
 23fc872:	2100      	movs	r1, #0
 23fc874:	4293      	cmp	r3, r2
 23fc876:	d100      	bne.n	23fc87a <strncpy+0x20>
 23fc878:	bd10      	pop	{r4, pc}
 23fc87a:	f803 1b01 	strb.w	r1, [r3], #1
 23fc87e:	e7f9      	b.n	23fc874 <strncpy+0x1a>

023fc880 <__strtok_r>:
 23fc880:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc882:	b908      	cbnz	r0, 23fc888 <__strtok_r+0x8>
 23fc884:	6810      	ldr	r0, [r2, #0]
 23fc886:	b188      	cbz	r0, 23fc8ac <__strtok_r+0x2c>
 23fc888:	4604      	mov	r4, r0
 23fc88a:	4620      	mov	r0, r4
 23fc88c:	460f      	mov	r7, r1
 23fc88e:	f814 5b01 	ldrb.w	r5, [r4], #1
 23fc892:	f817 6b01 	ldrb.w	r6, [r7], #1
 23fc896:	b91e      	cbnz	r6, 23fc8a0 <__strtok_r+0x20>
 23fc898:	b965      	cbnz	r5, 23fc8b4 <__strtok_r+0x34>
 23fc89a:	4628      	mov	r0, r5
 23fc89c:	6015      	str	r5, [r2, #0]
 23fc89e:	e005      	b.n	23fc8ac <__strtok_r+0x2c>
 23fc8a0:	42b5      	cmp	r5, r6
 23fc8a2:	d1f6      	bne.n	23fc892 <__strtok_r+0x12>
 23fc8a4:	2b00      	cmp	r3, #0
 23fc8a6:	d1f0      	bne.n	23fc88a <__strtok_r+0xa>
 23fc8a8:	6014      	str	r4, [r2, #0]
 23fc8aa:	7003      	strb	r3, [r0, #0]
 23fc8ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fc8ae:	461c      	mov	r4, r3
 23fc8b0:	e00c      	b.n	23fc8cc <__strtok_r+0x4c>
 23fc8b2:	b915      	cbnz	r5, 23fc8ba <__strtok_r+0x3a>
 23fc8b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 23fc8b8:	460e      	mov	r6, r1
 23fc8ba:	f816 5b01 	ldrb.w	r5, [r6], #1
 23fc8be:	42ab      	cmp	r3, r5
 23fc8c0:	d1f7      	bne.n	23fc8b2 <__strtok_r+0x32>
 23fc8c2:	2b00      	cmp	r3, #0
 23fc8c4:	d0f3      	beq.n	23fc8ae <__strtok_r+0x2e>
 23fc8c6:	2300      	movs	r3, #0
 23fc8c8:	f804 3c01 	strb.w	r3, [r4, #-1]
 23fc8cc:	6014      	str	r4, [r2, #0]
 23fc8ce:	e7ed      	b.n	23fc8ac <__strtok_r+0x2c>

023fc8d0 <strtok_r>:
 23fc8d0:	2301      	movs	r3, #1
 23fc8d2:	f7ff bfd5 	b.w	23fc880 <__strtok_r>
	...

023fc8d8 <_strtol_l.constprop.0>:
 23fc8d8:	2b01      	cmp	r3, #1
 23fc8da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fc8de:	d001      	beq.n	23fc8e4 <_strtol_l.constprop.0+0xc>
 23fc8e0:	2b24      	cmp	r3, #36	; 0x24
 23fc8e2:	d906      	bls.n	23fc8f2 <_strtol_l.constprop.0+0x1a>
 23fc8e4:	f7fa fe22 	bl	23f752c <__errno>
 23fc8e8:	2316      	movs	r3, #22
 23fc8ea:	6003      	str	r3, [r0, #0]
 23fc8ec:	2000      	movs	r0, #0
 23fc8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fc8f2:	460d      	mov	r5, r1
 23fc8f4:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23fc9d8 <_strtol_l.constprop.0+0x100>
 23fc8f8:	462e      	mov	r6, r5
 23fc8fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fc8fe:	f814 700c 	ldrb.w	r7, [r4, ip]
 23fc902:	f017 0708 	ands.w	r7, r7, #8
 23fc906:	d1f7      	bne.n	23fc8f8 <_strtol_l.constprop.0+0x20>
 23fc908:	2c2d      	cmp	r4, #45	; 0x2d
 23fc90a:	d132      	bne.n	23fc972 <_strtol_l.constprop.0+0x9a>
 23fc90c:	782c      	ldrb	r4, [r5, #0]
 23fc90e:	2701      	movs	r7, #1
 23fc910:	1cb5      	adds	r5, r6, #2
 23fc912:	2b00      	cmp	r3, #0
 23fc914:	d05b      	beq.n	23fc9ce <_strtol_l.constprop.0+0xf6>
 23fc916:	2b10      	cmp	r3, #16
 23fc918:	d109      	bne.n	23fc92e <_strtol_l.constprop.0+0x56>
 23fc91a:	2c30      	cmp	r4, #48	; 0x30
 23fc91c:	d107      	bne.n	23fc92e <_strtol_l.constprop.0+0x56>
 23fc91e:	782c      	ldrb	r4, [r5, #0]
 23fc920:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23fc924:	2c58      	cmp	r4, #88	; 0x58
 23fc926:	d14d      	bne.n	23fc9c4 <_strtol_l.constprop.0+0xec>
 23fc928:	786c      	ldrb	r4, [r5, #1]
 23fc92a:	2310      	movs	r3, #16
 23fc92c:	3502      	adds	r5, #2
 23fc92e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23fc932:	f04f 0c00 	mov.w	ip, #0
 23fc936:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23fc93a:	4666      	mov	r6, ip
 23fc93c:	fbb8 f9f3 	udiv	r9, r8, r3
 23fc940:	fb03 8a19 	mls	sl, r3, r9, r8
 23fc944:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23fc948:	f1be 0f09 	cmp.w	lr, #9
 23fc94c:	d816      	bhi.n	23fc97c <_strtol_l.constprop.0+0xa4>
 23fc94e:	4674      	mov	r4, lr
 23fc950:	42a3      	cmp	r3, r4
 23fc952:	dd24      	ble.n	23fc99e <_strtol_l.constprop.0+0xc6>
 23fc954:	f1bc 0f00 	cmp.w	ip, #0
 23fc958:	db1e      	blt.n	23fc998 <_strtol_l.constprop.0+0xc0>
 23fc95a:	45b1      	cmp	r9, r6
 23fc95c:	d31c      	bcc.n	23fc998 <_strtol_l.constprop.0+0xc0>
 23fc95e:	d101      	bne.n	23fc964 <_strtol_l.constprop.0+0x8c>
 23fc960:	45a2      	cmp	sl, r4
 23fc962:	db19      	blt.n	23fc998 <_strtol_l.constprop.0+0xc0>
 23fc964:	fb06 4603 	mla	r6, r6, r3, r4
 23fc968:	f04f 0c01 	mov.w	ip, #1
 23fc96c:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fc970:	e7e8      	b.n	23fc944 <_strtol_l.constprop.0+0x6c>
 23fc972:	2c2b      	cmp	r4, #43	; 0x2b
 23fc974:	bf04      	itt	eq
 23fc976:	782c      	ldrbeq	r4, [r5, #0]
 23fc978:	1cb5      	addeq	r5, r6, #2
 23fc97a:	e7ca      	b.n	23fc912 <_strtol_l.constprop.0+0x3a>
 23fc97c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23fc980:	f1be 0f19 	cmp.w	lr, #25
 23fc984:	d801      	bhi.n	23fc98a <_strtol_l.constprop.0+0xb2>
 23fc986:	3c37      	subs	r4, #55	; 0x37
 23fc988:	e7e2      	b.n	23fc950 <_strtol_l.constprop.0+0x78>
 23fc98a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23fc98e:	f1be 0f19 	cmp.w	lr, #25
 23fc992:	d804      	bhi.n	23fc99e <_strtol_l.constprop.0+0xc6>
 23fc994:	3c57      	subs	r4, #87	; 0x57
 23fc996:	e7db      	b.n	23fc950 <_strtol_l.constprop.0+0x78>
 23fc998:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fc99c:	e7e6      	b.n	23fc96c <_strtol_l.constprop.0+0x94>
 23fc99e:	f1bc 0f00 	cmp.w	ip, #0
 23fc9a2:	da05      	bge.n	23fc9b0 <_strtol_l.constprop.0+0xd8>
 23fc9a4:	2322      	movs	r3, #34	; 0x22
 23fc9a6:	4646      	mov	r6, r8
 23fc9a8:	6003      	str	r3, [r0, #0]
 23fc9aa:	b942      	cbnz	r2, 23fc9be <_strtol_l.constprop.0+0xe6>
 23fc9ac:	4630      	mov	r0, r6
 23fc9ae:	e79e      	b.n	23fc8ee <_strtol_l.constprop.0+0x16>
 23fc9b0:	b107      	cbz	r7, 23fc9b4 <_strtol_l.constprop.0+0xdc>
 23fc9b2:	4276      	negs	r6, r6
 23fc9b4:	2a00      	cmp	r2, #0
 23fc9b6:	d0f9      	beq.n	23fc9ac <_strtol_l.constprop.0+0xd4>
 23fc9b8:	f1bc 0f00 	cmp.w	ip, #0
 23fc9bc:	d000      	beq.n	23fc9c0 <_strtol_l.constprop.0+0xe8>
 23fc9be:	1e69      	subs	r1, r5, #1
 23fc9c0:	6011      	str	r1, [r2, #0]
 23fc9c2:	e7f3      	b.n	23fc9ac <_strtol_l.constprop.0+0xd4>
 23fc9c4:	2430      	movs	r4, #48	; 0x30
 23fc9c6:	2b00      	cmp	r3, #0
 23fc9c8:	d1b1      	bne.n	23fc92e <_strtol_l.constprop.0+0x56>
 23fc9ca:	2308      	movs	r3, #8
 23fc9cc:	e7af      	b.n	23fc92e <_strtol_l.constprop.0+0x56>
 23fc9ce:	2c30      	cmp	r4, #48	; 0x30
 23fc9d0:	d0a5      	beq.n	23fc91e <_strtol_l.constprop.0+0x46>
 23fc9d2:	230a      	movs	r3, #10
 23fc9d4:	e7ab      	b.n	23fc92e <_strtol_l.constprop.0+0x56>
 23fc9d6:	bf00      	nop
 23fc9d8:	023ffebb 	.word	0x023ffebb

023fc9dc <strtol>:
 23fc9dc:	4613      	mov	r3, r2
 23fc9de:	460a      	mov	r2, r1
 23fc9e0:	4601      	mov	r1, r0
 23fc9e2:	4802      	ldr	r0, [pc, #8]	; (23fc9ec <strtol+0x10>)
 23fc9e4:	6800      	ldr	r0, [r0, #0]
 23fc9e6:	f7ff bf77 	b.w	23fc8d8 <_strtol_l.constprop.0>
 23fc9ea:	bf00      	nop
 23fc9ec:	1006a1d0 	.word	0x1006a1d0

023fc9f0 <link_const_data_start>:
 23fc9f0:	00001388 	.word	0x00001388
 23fc9f4:	00002710 	.word	0x00002710
 23fc9f8:	00004e20 	.word	0x00004e20
 23fc9fc:	00009c40 	.word	0x00009c40
 23fca00:	00013880 	.word	0x00013880
 23fca04:	00027100 	.word	0x00027100
 23fca08:	0004e200 	.word	0x0004e200
 23fca0c:	0009c400 	.word	0x0009c400
 23fca10:	00138800 	.word	0x00138800
 23fca14:	00271000 	.word	0x00271000
 23fca18:	004e2000 	.word	0x004e2000
 23fca1c:	009c4000 	.word	0x009c4000
 23fca20:	01388000 	.word	0x01388000
 23fca24:	02710000 	.word	0x02710000
 23fca28:	04e20000 	.word	0x04e20000
 23fca2c:	09c40000 	.word	0x09c40000
 23fca30:	13880000 	.word	0x13880000
 23fca34:	27100000 	.word	0x27100000
 23fca38:	00000000 	.word	0x00000000
 23fca3c:	00000013 	.word	0x00000013
 23fca40:	023fcbed 	.word	0x023fcbed
 23fca44:	00000012 	.word	0x00000012
 23fca48:	023fcbf0 	.word	0x023fcbf0
 23fca4c:	00000011 	.word	0x00000011
 23fca50:	023fddc4 	.word	0x023fddc4
 23fca54:	0000000e 	.word	0x0000000e
 23fca58:	023fcbf3 	.word	0x023fcbf3
 23fca5c:	0000001d 	.word	0x0000001d
 23fca60:	023fcbf6 	.word	0x023fcbf6
 23fca64:	00000000 	.word	0x00000000
 23fca68:	023fcbf9 	.word	0x023fcbf9
 23fca6c:	00000001 	.word	0x00000001
 23fca70:	023fcbfc 	.word	0x023fcbfc
 23fca74:	00000002 	.word	0x00000002
 23fca78:	023fcbff 	.word	0x023fcbff
 23fca7c:	00000003 	.word	0x00000003
 23fca80:	023fcc02 	.word	0x023fcc02
 23fca84:	00000004 	.word	0x00000004
 23fca88:	023fcc05 	.word	0x023fcc05
 23fca8c:	00000005 	.word	0x00000005
 23fca90:	023fcc08 	.word	0x023fcc08
 23fca94:	00000006 	.word	0x00000006
 23fca98:	023fcc0b 	.word	0x023fcc0b
 23fca9c:	00000009 	.word	0x00000009
 23fcaa0:	023fcc0e 	.word	0x023fcc0e
 23fcaa4:	0000000a 	.word	0x0000000a
 23fcaa8:	023fcc11 	.word	0x023fcc11
 23fcaac:	0000000b 	.word	0x0000000b
 23fcab0:	023fcc15 	.word	0x023fcc15
 23fcab4:	0000000c 	.word	0x0000000c
 23fcab8:	023fcc19 	.word	0x023fcc19
 23fcabc:	0000000d 	.word	0x0000000d
 23fcac0:	023fcc1d 	.word	0x023fcc1d
 23fcac4:	00000014 	.word	0x00000014
 23fcac8:	023fcc21 	.word	0x023fcc21
 23fcacc:	00000015 	.word	0x00000015
 23fcad0:	023fcc25 	.word	0x023fcc25
 23fcad4:	00000016 	.word	0x00000016
 23fcad8:	023fcc29 	.word	0x023fcc29
 23fcadc:	00000018 	.word	0x00000018
 23fcae0:	023fcc2d 	.word	0x023fcc2d
 23fcae4:	00000019 	.word	0x00000019
 23fcae8:	023fcc31 	.word	0x023fcc31
 23fcaec:	0000001a 	.word	0x0000001a
 23fcaf0:	023fcc35 	.word	0x023fcc35
 23fcaf4:	0000001b 	.word	0x0000001b
 23fcaf8:	023fcc39 	.word	0x023fcc39
 23fcafc:	00000000 	.word	0x00000000
 23fcb00:	023fcc3d 	.word	0x023fcc3d
 23fcb04:	0000000a 	.word	0x0000000a
 23fcb08:	023fcc4c 	.word	0x023fcc4c
 23fcb0c:	00000014 	.word	0x00000014
 23fcb10:	023fcc61 	.word	0x023fcc61
 23fcb14:	0000001e 	.word	0x0000001e
 23fcb18:	023fcc7b 	.word	0x023fcc7b
 23fcb1c:	00000028 	.word	0x00000028
 23fcb20:	023fcc96 	.word	0x023fcc96
 23fcb24:	00000032 	.word	0x00000032
 23fcb28:	023fcca7 	.word	0x023fcca7
 23fcb2c:	0000003c 	.word	0x0000003c
 23fcb30:	023fccb6 	.word	0x023fccb6
 23fcb34:	00000046 	.word	0x00000046
 23fcb38:	023fccce 	.word	0x023fccce
 23fcb3c:	00000050 	.word	0x00000050
 23fcb40:	023fcce9 	.word	0x023fcce9
 23fcb44:	0000005a 	.word	0x0000005a
 23fcb48:	023fcd0c 	.word	0x023fcd0c
 23fcb4c:	00000064 	.word	0x00000064
 23fcb50:	023fcd24 	.word	0x023fcd24
 23fcb54:	0000006e 	.word	0x0000006e
 23fcb58:	023fcd3c 	.word	0x023fcd3c
 23fcb5c:	00000078 	.word	0x00000078
 23fcb60:	023fcd50 	.word	0x023fcd50
 23fcb64:	00000082 	.word	0x00000082
 23fcb68:	023fcd63 	.word	0x023fcd63
 23fcb6c:	0000008c 	.word	0x0000008c
 23fcb70:	023fcd7b 	.word	0x023fcd7b
 23fcb74:	023fcd96 	.word	0x023fcd96
 23fcb78:	023fcd9b 	.word	0x023fcd9b
 23fcb7c:	023fcd9f 	.word	0x023fcd9f
 23fcb80:	023fcda8 	.word	0x023fcda8
 23fcb84:	023fcdb4 	.word	0x023fcdb4
 23fcb88:	023fcdbc 	.word	0x023fcdbc
 23fcb8c:	023fcd96 	.word	0x023fcd96
 23fcb90:	023fcdc4 	.word	0x023fcdc4
 23fcb94:	023fcdc5 	.word	0x023fcdc5
 23fcb98:	023fcdce 	.word	0x023fcdce
 23fcb9c:	023fcdd6 	.word	0x023fcdd6
 23fcba0:	023fcde2 	.word	0x023fcde2
 23fcba4:	023fcde8 	.word	0x023fcde8
 23fcba8:	04030201 	.word	0x04030201
 23fcbac:	08070605 	.word	0x08070605
 23fcbb0:	0c0b0a09 	.word	0x0c0b0a09
 23fcbb4:	100f0e0d 	.word	0x100f0e0d
 23fcbb8:	00000000 	.word	0x00000000
 23fcbbc:	01000000 	.word	0x01000000
 23fcbc0:	0100080c 	.word	0x0100080c
 23fcbc4:	00000302 	.word	0x00000302

023fcbc8 <dynalib_user>:
 23fcbc8:	023e43e9 023e4411 023e4415 00000000     .C>..D>..D>.....
 23fcbd8:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23fcbe8:	6c617574 00304100 41003141 36410035     tual.A0.A1.A5.A6
 23fcbf8:	00304400 44003144 33440032 00344400     .D0.D1.D2.D3.D4.
 23fcc08:	44003544 39440036 30314400 31314400     D5.D6.D9.D10.D11
 23fcc18:	32314400 33314400 30324400 31324400     .D12.D13.D20.D21
 23fcc28:	32324400 34324400 35324400 36324400     .D22.D24.D25.D26
 23fcc38:	37324400 6e6f4e00 202f2065 6e6b6e55     .D27.None / Unkn
 23fcc48:	006e776f 6e6b6e55 206e776f 65736552     own.Unknown Rese
 23fcc58:	65522074 6e6f7361 73655200 50207465     t Reason.Reset P
 23fcc68:	28206e69 74747562 6f206e6f 69702072     in (button or pi
 23fcc78:	4c00296e 5020776f 7265776f 6e614d20     n).Low Power Man
 23fcc88:	6d656761 20746e65 65736552 6f500074     agement Reset.Po
 23fcc98:	20726577 6e776f44 73655220 42007465     wer Down Reset.B
 23fcca8:	6e776f72 2074756f 65736552 61480074     rownout Reset.Ha
 23fccb8:	61776472 57206572 68637461 20676f64     rdware Watchdog 
 23fccc8:	65736552 75530074 73656363 6c756673     Reset.Successful
 23fccd8:	72694620 7261776d 70552065 65746164      Firmware Update
 23fcce8:	72694600 7261776d 70552065 65746164     .Firmware Update
 23fccf8:	72724520 2820726f 72706564 74616365      Error (deprecat
 23fcd08:	00296465 6d726946 65726177 64705520     ed).Firmware Upd
 23fcd18:	20657461 656d6954 0074756f 74636146     ate Timeout.Fact
 23fcd28:	2079726f 65736552 65522074 73657571     ory Reset Reques
 23fcd38:	00646574 65666153 646f4d20 65522065     ted.Safe Mode Re
 23fcd48:	73657571 00646574 20554644 65646f4d     quested.DFU Mode
 23fcd58:	71655220 74736575 53006465 65747379      Requested.Syste
 23fcd68:	6150206d 2063696e 534f5328 646f4320     m Panic (SOS Cod
 23fcd78:	55002965 20726573 65736552 73282074     e).User Reset (s
 23fcd88:	7774666f 20657261 6c6c6163 4e550029     oftware call).UN
 23fcd98:	56004e4b 55004e49 485f4253 0054534f     KN.VIN.USB_HOST.
 23fcda8:	5f425355 50414441 00524554 5f425355     USB_ADAPTER.USB_
 23fcdb8:	0047544f 54544142 00595245 41484321     OTG.BATTERY.!CHA
 23fcdc8:	4e494752 48430047 45475241 49440044     RGING.CHARGED.DI
 23fcdd8:	41484353 4e494752 41460047 00544c55     SCHARGING.FAULT.
 23fcde8:	5353494d 00474e49 32454d42 42003038     MISSING.BME280.B
 23fcdf8:	3933504d 0a0d0030 0d5e5b25 000a0d5d     MP390...%[^.]...
 23fce08:	61666564 20746c75 42534d00 42534c00     default .MSB.LSB
 23fce18:	50533c00 74655349 676e6974 65642073     .<SPISettings de
 23fce28:	6c756166 3c003e74 53495053 69747465     fault>.<SPISetti
 23fce38:	2073676e 75257325 20732520 45444f4d     ngs %s%u %s MODE
 23fce48:	003e7525 002f007c 005c002d 44454c4f     %u>.|./.-.\.OLED
 23fce58:	4f3a3233 4c4f004b 34364445 004b4f3a     32:OK.OLED64:OK.
 23fce68:	252d6425 2d643230 64323025 32302554     %d-%02d-%02dT%02
 23fce78:	30253a64 253a6432 00643230 30303030     d:%02d:%02d.0000
 23fce88:	2d30302d 30543030 30303a30 0030303a     -00-00T00:00:00.
 23fce98:	3a435452 20433249 46544f4e 444e554f     RTC:I2C NOTFOUND
 23fcea8:	52732500 43545200 4c41563a 52004449     .%sR.RTC:VALID.R
 23fceb8:	4e3a4354 53444545 4d534720 4d495420     TC:NEEDS GSM TIM
 23fcec8:	54520045 45533a43 54520054 53313a43     E.RTC:SET.RTC:1S
 23fced8:	59532054 5200434e 323a4354 53205248     T SYNC.RTC:2HR S
 23fcee8:	00434e59 20534541 59454b50 45532120     YNC.AES PKEY !SE
 23fcef8:	45410054 4b502053 21205945 42203631     T.AES PKEY !16 B
 23fcf08:	73657479 53454100 49594d20 53212056     ytes.AES MYIV !S
 23fcf18:	4c005445 2041524f 20525750 00525245     ET.LORA PWR ERR.
 23fcf28:	41524f4c 45524620 52452051 4f4c0052     LORA FREQ ERR.LO
 23fcf38:	41204152 20524444 00525245 5f534541     RA ADDR ERR.AES_
 23fcf48:	5b59454b 005d7325 5f534541 5649594d     KEY[%s].AES_MYIV
 23fcf58:	5d75255b 524f4c00 46432041 4b4f2056     [%u].LORA CFV OK
 23fcf68:	74656700 736f425f 435f6863 49706968     .get_Bosch_ChipI
 23fcf78:	00292844 32492020 30253a43 52205832     D().  I2C:%02X R
 23fcf88:	253a6765 00583230 52452020 54455f52     eg:%02X.  ERR_ET
 23fcf98:	0064253a 48432020 44495049 3230253a     :%d.  CHIPID:%02
 23fcfa8:	4d422058 30383250 43202000 49504948     X BMP280.  CHIPI
 23fcfb8:	30253a44 42205832 3833504d 20200038     D:%02X BMP388.  
 23fcfc8:	50494843 253a4449 20583230 2f454d42     CHIPID:%02X BME/
 23fcfd8:	00303933 48432020 44495049 3230253a     390.  CHIPID:%02
 23fcfe8:	6e492058 696c6156 20200064 5f525245     X InValid.  ERR_
 23fcff8:	303a4652 584d4200 494e493a 4d420054     RF:0.BMX:INIT.BM
 23fd008:	45203150 42005252 2031504d 42004b4f     P1 ERR.BMP1 OK.B
 23fd018:	2031584d 00525245 33504d42 315f3039     MX1 ERR.BMP390_1
 23fd028:	004b4f20 32454d42 315f3038 004b4f20      OK.BME280_1 OK.
 23fd038:	31334d42 52524520 334d4200 4b4f2031     BM31 ERR.BM31 OK
 23fd048:	584d4200 4e20315f 4d420046 45203250     .BMX_1 NF.BMP2 E
 23fd058:	42005252 2032504d 42004b4f 2032584d     RR.BMP2 OK.BMX2 
 23fd068:	00525245 33504d42 325f3039 004b4f20     ERR.BMP390_2 OK.
 23fd078:	32454d42 325f3038 004b4f20 32334d42     BME280_2 OK.BM32
 23fd088:	52524520 334d4200 4b4f2032 584d4200      ERR.BM32 OK.BMX
 23fd098:	4e20325f 54480046 44313255 494e493a     _2 NF.HTU21D:INI
 23fd0a8:	54480054 464e2055 55544800 004b4f20     T.HTU NF.HTU OK.
 23fd0b8:	3950434d 3a383038 54494e49 50434d00     MCP9808:INIT.MCP
 23fd0c8:	464e2031 50434d00 4b4f2031 50434d00     1 NF.MCP1 OK.MCP
 23fd0d8:	464e2032 50434d00 4b4f2032 50434d00     2 NF.MCP2 OK.MCP
 23fd0e8:	464e2033 50434d00 4b4f2033 50434d00     3 NF.MCP3 OK.MCP
 23fd0f8:	464e2034 50434d00 4b4f2034 54485300     4 NF.MCP4 OK.SHT
 23fd108:	494e493a 48530054 4e203154 48530046     :INIT.SHT1 NF.SH
 23fd118:	4f203154 4853004b 4e203254 48530046     T1 OK.SHT2 NF.SH
 23fd128:	4f203254 4948004b 493a3848 0054494e     T2 OK.HIH8:INIT.
 23fd138:	38484948 004b4f20 38484948 00464e20     HIH8 OK.HIH8 NF.
 23fd148:	3a544257 54494e49 54425700 004b4f3a     WBT:INIT.WBT:OK.
 23fd158:	3a544257 4800464e 4e493a49 48005449     WBT:NF.HI:INIT.H
 23fd168:	4b4f3a49 3a494800 5700464e 3a544742     I:OK.HI:NF.WBGT:
 23fd178:	54494e49 47425700 4b4f3a54 472f7720     INIT.WBGT:OK w/G
 23fd188:	65626f6c 47425700 4b4f3a54 2f6f7720     lobe.WBGT:OK wo/
 23fd198:	626f6c47 42570065 4e3a5447 49530046     Globe.WBGT:NF.SI
 23fd1a8:	35343131 494e493a 49530054 004b4f3a     1145:INIT.SI:OK.
 23fd1b8:	563a4953 64255b49 3230252e 53005d64     SI:VI[%d.%02d].S
 23fd1c8:	52493a49 2e64255b 64323025 4953005d     I:IR[%d.%02d].SI
 23fd1d8:	5b56553a 252e6425 5d643230 584c5600     :UV[%d.%02d].VLX
 23fd1e8:	494e493a 4c560054 4b4f2058 584c5600     :INIT.VLX OK.VLX
 23fd1f8:	00464e20 3a584c42 54494e49 584c4200      NF.BLX:INIT.BLX
 23fd208:	004b4f3a 3a584c42 5000464e 4135324d     :OK.BLX:NF.PM25A
 23fd218:	493a4951 0054494e 4e3a4d50 4d500046     QI:INIT.PM:NF.PM
 23fd228:	6765423a 4e206e69 4d500046 004b4f3a     :Begin NF.PM:OK.
 23fd238:	4f204d50 494c4646 4800454e 493a4344     PM OFFLINE.HDC:I
 23fd248:	0054494e 31434448 00464e20 31434448     NIT.HDC1 NF.HDC1
 23fd258:	004b4f20 32434448 00464e20 32434448      OK.HDC2 NF.HDC2
 23fd268:	004b4f20 3a53504c 54494e49 53504c00      OK.LPS:INIT.LPS
 23fd278:	464e2031 53504c00 4b4f2031 53504c00     1 NF.LPS1 OK.LPS
 23fd288:	464e2032 53504c00 4b4f2032 574c5400     2 NF.LPS2 OK.TLW
 23fd298:	494e493a 4c540054 464e2057 574c5400     :INIT.TLW NF.TLW
 23fd2a8:	004b4f20 3a4d5354 54494e49 4d535400      OK.TSM:INIT.TSM
 23fd2b8:	00464e20 204d5354 54004b4f 3a4d534d      NF.TSM OK.TMSM:
 23fd2c8:	54494e49 534d5400 464e204d 534d5400     INIT.TMSM NF.TMS
 23fd2d8:	4b4f204d 544d5000 4e493a53 50005449     M OK.PMTS:INIT.P
 23fd2e8:	2053544d 5000464e 2053544d 54204b4f     MTS NF.PMTS OK T
 23fd2f8:	2e64253d 64323025 35534100 3a303036     =%d.%02d.AS5600:
 23fd308:	54494e49 3a445700 5700464e 4b4f3a44     INIT.WD:NF.WD:OK
 23fd318:	3a344100 54494e49 3d344100 54534944     .A4:INIT.A4=DIST
 23fd328:	53494400 4d353d54 53494400 30313d54     .DIST=5M.DIST=10
 23fd338:	3441004d 4941523d 3441004e 5741523d     M.A4=RAIN.A4=RAW
 23fd348:	3d344100 4c4c554e 3d344100 4c4c554e     .A4=NULL.A4=NULL
 23fd358:	2044532c 4100464e 4e493a35 41005449     ,SD NF.A5:INIT.A
 23fd368:	41523d35 35410057 4c554e3d 3541004c     5=RAW.A5=NULL.A5
 23fd378:	4c554e3d 44532c4c 00464e20 4f204457     =NULL,SD NF.WD O
 23fd388:	696c6666 4c5f656e 20445700 6c66664f     ffline_L.WD Offl
 23fd398:	5f656e69 44570048 6c6e4f20 00656e69     ine_H.WD Online.
 23fd3a8:	31504d42 4c4e4f20 00454e49 31454d42     BMP1 ONLINE.BME1
 23fd3b8:	4c4e4f20 00454e49 33504d42 315f3039      ONLINE.BMP390_1
 23fd3c8:	4c4e4f20 00454e49 31334d42 4c4e4f20      ONLINE.BM31 ONL
 23fd3d8:	00454e49 31584d42 46464f20 454e494c     INE.BMX1 OFFLINE
 23fd3e8:	504d4200 4e4f2032 454e494c 454d4200     .BMP2 ONLINE.BME
 23fd3f8:	4e4f2032 454e494c 334d4200 4e4f2032     2 ONLINE.BM32 ON
 23fd408:	454e494c 584d4200 464f2032 4e494c46     LINE.BMX2 OFFLIN
 23fd418:	54480045 4e4f2055 454e494c 55544800     E.HTU ONLINE.HTU
 23fd428:	46464f20 454e494c 20495300 494c4e4f      OFFLINE.SI ONLI
 23fd438:	5300454e 464f2049 4e494c46 44570045     NE.SI OFFLINE.WD
 23fd448:	4c4e4f20 00454e49 4f204457 494c4646      ONLINE.WD OFFLI
 23fd458:	5600454e 4f20584c 4e494c4e 4c560045     NE.VLX ONLINE.VL
 23fd468:	464f2058 4e494c46 4d500045 4c4e4f20     X OFFLINE.PM ONL
 23fd478:	00454e49 52504545 43204d4f 5241454c     INE.EEPROM CLEAR
 23fd488:	52524520 5400524f 202c363e 363e5452      ERROR.T>6, RT>6
 23fd498:	4f202d20 3e54004b 52202c36 363d3c54      - OK.T>6, RT<=6
 23fd4a8:	20262620 3e545220 202d5936 65766f4d      &&  RT>6Y- Move
 23fd4b8:	363c5400 5452202c 2620363c 3e545220     .T<6, RT<6 & RT>
 23fd4c8:	65592036 72657473 20796164 4b4f202d     6 Yesterday - OK
 23fd4d8:	363c5400 5452202c 2620363c 54522026     .T<6, RT<6 && RT
 23fd4e8:	322d363e 202d2064 65766f4d 363c5400     >6-2d - Move.T<6
 23fd4f8:	5452202c 2620363c 54522026 2d363d3c     , RT<6 && RT<=6-
 23fd508:	2d206432 656c4320 45007261 4f525045     2d - Clear.EEPRO
 23fd518:	4e49204d 45205449 524f5252 50454500     M INIT ERROR.EEP
 23fd528:	204d4f52 55205452 54414450 45004445     ROM RT UPDATED.E
 23fd538:	4f525045 5055204d 45544144 45450044     EPROM UPDATED.EE
 23fd548:	4d4f5250 4d554420 4c200050 253a4e45     PROM DUMP. LEN:%
 23fd558:	52200064 253a3154 30252e64 20006432     d. RT1:%d.%02d. 
 23fd568:	3a315052 252e6425 00643230 32545220     RP1:%d.%02d. RT2
 23fd578:	2e64253a 64323025 50522000 64253a32     :%d.%02d. RP2:%d
 23fd588:	3230252e 52200064 3a535447 00756c25     .%02d. RGTS:%lu.
 23fd598:	53324e20 253a5046 2000756c 253a5343      N2SFP:%lu. CS:%
 23fd5a8:	2000756c 3a435343 00756c25 4e3a4453     lu. CSC:%lu.SD:N
 23fd5b8:	44530046 444b4d3a 4f205249 4f205342     F.SD:MKDIR OBS O
 23fd5c8:	4453004b 6c6e4f3a 00656e69 4d3a4453     K.SD:Online.SD:M
 23fd5d8:	5249444b 53424f20 52524520 3a445300     KDIR OBS ERR.SD:
 23fd5e8:	6c66664f 00656e69 4f3a4453 44205342     Offline.SD:OBS D
 23fd5f8:	45205249 74736978 73250073 6434252f     IR Exists.%s/%4d
 23fd608:	64323025 64323025 676f6c2e 3a445300     %02d%02d.log.SD:
 23fd618:	6e65704f 676f4c28 52524529 53324e00     Open(Log)ERR.N2S
 23fd628:	45443e2d 464e3a4c 53324e00 45443e2d     ->DEL:NF.N2S->DE
 23fd638:	4b4f3a4c 53324e00 45443e2d 52453a4c     L:OK.N2S->DEL:ER
 23fd648:	324e0052 75463a53 4e006c6c 4f3a5332     R.N2S:Full.N2S:O
 23fd658:	41205342 64656464 53324e00 65704f3a     BS Added.N2S:Ope
 23fd668:	7245206e 00726f72 252c7325 6f4c0073     n Error.%s,%s.Lo
 23fd678:	734d6152 64255b67 4e3e2d5d 4c005332     RaMsg[%d]->N2S.L
 23fd688:	2041524f 616c6552 63252079 55206325     ORA Relay %c%c U
 23fd698:	006e6b6e 6552002c 2079616c 49207325     nkn.,.Relay %s I
 23fd6a8:	64253a44 544e4320 0064253a 41524f4c     D:%d CNT:%d.LORA
 23fd6b8:	6c655220 4e207961 6170536f 4c006563      Relay NoSpace.L
 23fd6c8:	2041524f 616c6552 734d2079 736f4c67     ORA Relay MsgLos
 23fd6d8:	4f4c0074 52204152 79616c65 20732520     t.LORA Relay %s 
 23fd6e8:	51203e2d 65756575 64253a64 4e4f4300     -> Queued:%d.CON
 23fd6f8:	2e474946 00545854 43204453 3a647261     FIG.TXT.SD Card:
 23fd708:	72726520 6f20726f 706f206e 6e696e65      error on openin
 23fd718:	69662067 0020656c 5f736561 79656b70     g file .aes_pkey
 23fd728:	3a464300 5f736561 79656b70 73255b3d     .CF:aes_pkey=[%s
 23fd738:	6561005d 796d5f73 43007669 65613a46     ].aes_myiv.CF:ae
 23fd748:	796d5f73 5b3d7669 5d756c25 726f6c00     s_myiv=[%lu].lor
 23fd758:	6e755f61 64697469 3a464300 61726f6c     a_unitid.CF:lora
 23fd768:	696e755f 3d646974 5d64255b 726f6c00     _unitid=[%d].lor
 23fd778:	78745f61 65776f70 46430072 726f6c3a     a_txpower.CF:lor
 23fd788:	78745f61 65776f70 255b3d72 6c005d64     a_txpower=[%d].l
 23fd798:	5f61726f 71657266 3a464300 61726f6c     ora_freq.CF:lora
 23fd7a8:	6572665f 255b3d71 61005d64 73630074     _freq=[%d].at.cs
 23fd7b8:	74680073 68570068 496d4179 65726548     s.hth.WhyAmIHere
 23fd7c8:	462c003f 424f0053 253e2d53 64412064     ?.,FS.OBS->%d Ad
 23fd7d8:	324e2064 424f0053 64255b53 533e2d5d     d N2S.OBS[%d]->S
 23fd7e8:	202c0044 4c007325 4e3e2d52 4f005332     D., %s.LR->N2S.O
 23fd7f8:	415b5342 2d5d4c4c 53324e3e 3a525200     BS[ALL]->N2S.RR:
 23fd808:	28207325 252c6425 0029756c 63416f44     %s (%d,%lu).DoAc
 23fd818:	6e6f6974 4245523a 00544f4f 63416f44     tion:REBOOT.DoAc
 23fd828:	6e6f6974 464e493a 6f44004f 69746341     tion:INFO.DoActi
 23fd838:	533a6e6f 00444e45 63416f44 6e6f6974     on:SEND.DoAction
 23fd848:	5452433a 416f4400 6f697463 34413a6e     :CRT.DoAction:A4
 23fd858:	54534944 3d344100 54534944 4544202c     DIST.A4=DIST, DE
 23fd868:	4152204c 4f3a4e49 3441004b 5349443d     L RAIN:OK.A4=DIS
 23fd878:	44202c54 52204c45 3a4e4941 00525245     T, DEL RAIN:ERR.
 23fd888:	443d3441 2c545349 524c4120 59444145     A4=DIST, ALREADY
 23fd898:	49584520 00535453 443d3441 2c545349      EXISTS.A4=DIST,
 23fd8a8:	54455320 3d344100 54534944 504f202c      SET.A4=DIST, OP
 23fd8b8:	45204e45 41005252 49443d34 202c5453     EN ERR.A4=DIST, 
 23fd8c8:	204c4544 4f3a4d35 31202c4b 53204d30     DEL 5M:OK, 10M S
 23fd8d8:	41005445 49443d34 202c5453 204c4544     ET.A4=DIST, DEL 
 23fd8e8:	453a4d35 41005252 49443d34 202c5453     5M:ERR.A4=DIST, 
 23fd8f8:	004d3031 443d3441 2c545349 20445320     10M.A4=DIST, SD 
 23fd908:	4400464e 7463416f 3a6e6f69 41523441     NF.DoAction:A4RA
 23fd918:	41004e49 41523d34 202c4e49 204c4544     IN.A4=RAIN, DEL 
 23fd928:	54534944 004b4f3a 523d3441 2c4e4941     DIST:OK.A4=RAIN,
 23fd938:	4c454420 53494420 52453a54 34410052      DEL DIST:ERR.A4
 23fd948:	4941523d 44202c4e 35204c45 4b4f3a4d     =RAIN, DEL 5M:OK
 23fd958:	3d344100 4e494152 4544202c 4d35204c     .A4=RAIN, DEL 5M
 23fd968:	5252453a 3d344100 4e494152 4c41202c     :ERR.A4=RAIN, AL
 23fd978:	44414552 58452059 53545349 3d344100     READY EXISTS.A4=
 23fd988:	4e494152 4553202c 34410054 4941523d     RAIN, SET.A4=RAI
 23fd998:	4f202c4e 204e4550 00525245 523d3441     N, OPEN ERR.A4=R
 23fd9a8:	2c4e4941 20445320 4400464e 7463416f     AIN, SD NF.DoAct
 23fd9b8:	3a6e6f69 49444d35 35005453 5349444d     ion:5MDIST.5MDIS
 23fd9c8:	41202c54 4145524c 45205944 54534958     T, ALREADY EXIST
 23fd9d8:	4d350053 54534944 54455320 444d3500     S.5MDIST SET.5MD
 23fd9e8:	20545349 4e45504f 52524520 444d3500     IST OPEN ERR.5MD
 23fd9f8:	2c545349 20445320 4400464e 7463416f     IST, SD NF.DoAct
 23fda08:	3a6e6f69 41523441 34410057 5349443d     ion:A4RAW.A4=DIS
 23fda18:	44202c54 44204c45 3a545349 41004b4f     T, DEL DIST:OK.A
 23fda28:	49443d34 202c5453 204c4544 54534944     4=DIST, DEL DIST
 23fda38:	5252453a 3d344100 54534944 4544202c     :ERR.A4=DIST, DE
 23fda48:	4d35204c 004b4f3a 523d3441 202c5741     L 5M:OK.A4=RAW, 
 23fda58:	45524c41 20594441 53495845 41005354     ALREADY EXISTS.A
 23fda68:	41523d34 53202c57 41005445 41523d34     4=RAW, SET.A4=RA
 23fda78:	4f202c57 204e4550 00525245 523d3441     W, OPEN ERR.A4=R
 23fda88:	202c5741 4e204453 6f440046 69746341     AW, SD NF.DoActi
 23fda98:	413a6e6f 524c4334 3d344100 2c524c43     on:A4CLR.A4=CLR,
 23fdaa8:	4c454420 53494420 4b4f3a54 3d344100      DEL DIST:OK.A4=
 23fdab8:	2c524c43 4c454420 53494420 52453a54     CLR, DEL DIST:ER
 23fdac8:	34410052 524c433d 4544202c 4152204c     R.A4=CLR, DEL RA
 23fdad8:	4e3a4e49 34410046 524c433d 4544202c     IN:NF.A4=CLR, DE
 23fdae8:	4152204c 4f3a4e49 3441004b 524c433d     L RAIN:OK.A4=CLR
 23fdaf8:	4544202c 4152204c 453a4e49 41005252     , DEL RAIN:ERR.A
 23fdb08:	4c433d34 44202c52 52204c45 4f3a5741     4=CLR, DEL RAW:O
 23fdb18:	3441004b 524c433d 4544202c 4152204c     K.A4=CLR, DEL RA
 23fdb28:	52453a57 34410052 524c433d 4544202c     W:ERR.A4=CLR, DE
 23fdb38:	4d35204c 004b4f3a 433d3441 202c524c     L 5M:OK.A4=CLR, 
 23fdb48:	204c4544 453a4d35 41005252 4c433d34     DEL 5M:ERR.A4=CL
 23fdb58:	53202c52 464e2044 416f4400 6f697463     R, SD NF.DoActio
 23fdb68:	35413a6e 00574152 523d3541 202c5741     n:A5RAW.A5=RAW, 
 23fdb78:	45524c41 20594441 53495845 41005354     ALREADY EXISTS.A
 23fdb88:	41523d35 53202c57 41005445 41523d35     5=RAW, SET.A5=RA
 23fdb98:	4f202c57 204e4550 00525245 523d3541     W, OPEN ERR.A5=R
 23fdba8:	202c5741 4e204453 6f440046 69746341     AW, SD NF.DoActi
 23fdbb8:	413a6e6f 524c4335 3d354100 2c524c43     on:A5CLR.A5=CLR,
 23fdbc8:	4c454420 57415220 004b4f3a 433d3541      DEL RAW:OK.A5=C
 23fdbd8:	202c524c 204c4544 3a574152 00525245     LR, DEL RAW:ERR.
 23fdbe8:	433d3541 202c524c 204c4544 41523541     A5=CLR, DEL A5RA
 23fdbf8:	464e3a57 3d354100 2c524c43 20445320     W:NF.A5=CLR, SD 
 23fdc08:	4400464e 7463416f 3a6e6f69 35495854     NF.DoAction:TXI5
 23fdc18:	5854004d 2c4d3549 524c4120 59444145     M.TXI5M, ALREADY
 23fdc28:	54455320 49585400 53204d35 54005445      SET.TXI5M SET.T
 23fdc38:	4d354958 45504f20 5245204e 58540052     XI5M OPEN ERR.TX
 23fdc48:	3a4d3549 6d655220 6465766f 31585420     I5M: Removed TX1
 23fdc58:	46204d30 00656c69 35495854 53202c4d     0M File.TXI5M, S
 23fdc68:	464e2044 416f4400 6f697463 58543a6e     D NF.DoAction:TX
 23fdc78:	4d303149 49585400 2c4d3031 524c4120     I10M.TXI10M, ALR
 23fdc88:	59444145 54455320 49585400 204d3031     EADY SET.TXI10M 
 23fdc98:	00544553 31495854 4f204d30 204e4550     SET.TXI10M OPEN 
 23fdca8:	00525245 35495854 52203a4d 766f6d65     ERR.TXI5M: Remov
 23fdcb8:	54206465 204d3558 656c6946 49585400     ed TX5M File.TXI
 23fdcc8:	2c4d3031 20445320 4400464e 7463416f     10M, SD NF.DoAct
 23fdcd8:	3a6e6f69 31495854 54004d35 35314958     ion:TXI15M.TXI15
 23fdce8:	41202c4d 4145524c 53205944 54005445     M, ALREADY SET.T
 23fdcf8:	35314958 52203a4d 766f6d65 54206465     XI15M: Removed T
 23fdd08:	204d3558 656c6946 49585400 3a4d3531     X5M File.TXI15M:
 23fdd18:	6d655220 6465766f 31585420 46204d30      Removed TX10M F
 23fdd28:	00656c69 31495854 53204d35 54005445     ile.TXI15M SET.T
 23fdd38:	35314958 53202c4d 464e2044 416f4400     XI15M, SD NF.DoA
 23fdd48:	6f697463 4b553a6e 4957004e 4d204946     ction:UKN.WIFI M
 23fdd58:	255b4341 3a783230 78323025 3230253a     AC[%02x:%02x:%02
 23fdd68:	30253a78 253a7832 3a783230 78323025     x:%02x:%02x:%02x
 23fdd78:	4957005d 43204946 73646572 4449003a     ].WIFI Creds:.ID
 23fdd88:	64255b58 5320005d 5b444953 005d7325     X[%d]. SSID[%s].
 23fdd98:	70795420 6e553a65 75636573 00646572      Type:Unsecured.
 23fdda8:	70795420 45573a65 54200050 3a657079      Type:WEP. Type:
 23fddb8:	00415057 70795420 50573a65 20003241     WPA. Type:WPA2. 
 23fddc8:	65707954 4150573a 746e4520 79542000     Type:WPA Ent. Ty
 23fddd8:	573a6570 20324150 00746e45 70795420     pe:WPA2 Ent. Typ
 23fdde8:	6e553a65 776f6e6b 5320006e 74536769     e:Unknown. SigSt
 23fddf8:	64255b72 4320005d 6e6e6168 255b6c65     r[%d]. Channel[%
 23fde08:	20005d64 43414d42 3230255b 30253a78     d]. BMAC[%02x:%0
 23fde18:	253a7832 3a783230 78323025 3230253a     2x:%02x:%02x:%02
 23fde28:	30253a78 005d7832 49464957 65724320     x:%02x].WIFI Cre
 23fde38:	4e3a7364 58540046 4e493a49 54005449     ds:NF.TXI:INIT.T
 23fde48:	4d354958 756f4620 5400646e 523a4958     XI5M Found.TXI:R
 23fde58:	3031204d 5854004d 4d303149 756f4620     M 10M.TXI10M Fou
 23fde68:	5400646e 523a4958 4d35204d 49585400     nd.TXI:RM 5M.TXI
 23fde78:	4d64253d 69615700 53203474 61697265     =%dM.Wait4 Seria
 23fde88:	6f43206c 6c6f736e 4c4f0065 453a4445     l Console.OLED:E
 23fde98:	6c62616e 4f006465 3a44454c 61736944     nabled.OLED:Disa
 23fdea8:	64656c62 3a435300 62616e45 0064656c     bled.SC:Enabled.
 23fdeb8:	3a524553 74696e49 52455300 004b4f3a     SER:Init.SER:OK.
 23fdec8:	2e4d5346 3a707063 20323136 20637273     FSM.cpp:612 src 
 23fded8:	73202626 3e2d6372 6c6c6163 6b636162     && src->callback
 23fdee8:	53424f00 3a6f445f 6d695420 564e2065     .OBS_Do: Time NV
 23fdef8:	73636200 63706200 72666300 00677200     .bcs.bpc.cfr.rg.
 23fdf08:	00746772 00706772 77007377 67770064     rgt.rgp.ws.wd.wg
 23fdf18:	64677700 31706200 31746200 31686200     .wgd.bp1.bt1.bh1
 23fdf28:	32706200 32746200 32686200 31686800     .bp2.bt2.bh2.hh1
 23fdf38:	31746800 31747300 31687300 32747300     .ht1.st1.sh1.st2
 23fdf48:	32687300 52524500 4344483a 65522031     .sh2.ERR:HDC1 Re
 23fdf58:	68006461 00317464 31686468 74646800     ad.hdt1.hdh1.hdt
 23fdf68:	64680032 6c003268 00317470 3170706c     2.hdh2.lpt1.lpp1
 23fdf78:	74706c00 706c0032 68003270 68003274     .lpt2.lpp2.ht2.h
 23fdf88:	53003268 45522049 00544553 00317673     h2.SI RESET.sv1.
 23fdf98:	00316973 00317573 00786c76 00786c62     si1.su1.vlx.blx.
 23fdfa8:	61006773 72007234 72003267 00327467     sg.a4r.rg2.rgt2.
 23fdfb8:	32706772 72356100 316d7000 00303173     rgp2.a5r.pm1s10.
 23fdfc8:	73316d70 70003532 3173316d 70003030     pm1s25.pm1s100.p
 23fdfd8:	3165316d 6d700030 35326531 316d7000     m1e10.pm1e25.pm1
 23fdfe8:	30303165 00696800 00746277 74676277     e100.hi.wbt.wbgt
 23fdff8:	776c7400 6c740077 74007477 32656d73     .tlww.tlwt.tsme2
 23fe008:	73740035 0063656d 766d7374 74006377     5.tsmec.tsmvwc.t
 23fe018:	00746d73 6d736d74 74003173 736d736d     smt.tmsms1.tmsms
 23fe028:	6d740032 33736d73 736d7400 0034736d     2.tmsms3.tmsms4.
 23fe038:	6d736d74 74003174 746d736d 6d700032     tmsmt1.tmsmt2.pm
 23fe048:	43007374 64253a53 3230252e 3a422064     ts.CS:%d.%02d B:
 23fe058:	252c6425 30252e64 4c006432 2041524f     %d,%d.%02d.LORA 
 23fe068:	4c004b4f 2041524f 4c00464e 2041524f     OK.LORA NF.LORA 
 23fe078:	54494e49 52524520 524f4c00 53432041     INIT ERR.LORA CS
 23fe088:	5252452d 524f4c00 6e492041 57007469     -ERR.LORA Init.W
 23fe098:	44646e69 20747369 74696e49 2e002928     indDist Init()..
 23fe0a8:	72615000 6c636974 6f4e3a65 61655274     .Particle:NotRea
 23fe0b8:	46007964 64255b53 503e2d5d 4f204255     dy.FS[%d]->PUB O
 23fe0c8:	64255b4b 5346005d 5d64255b 55503e2d     K[%d].FS[%d]->PU
 23fe0d8:	52452042 45520052 5b59414c 2d5d7325     B ERR.RELAY[%s]-
 23fe0e8:	4255503e 004b4f20 414c4552 73255b59     >PUB OK.RELAY[%s
 23fe0f8:	503e2d5d 45204255 52005252 59414c45     ]->PUB ERR.RELAY
 23fe108:	50595420 64255b45 4e49205d 494c4156      TYPE[%d] INVALI
 23fe118:	32330044 00343600 41534944 44454c42     D.32.64.DISABLED
 23fe128:	414e4500 44454c42 55525400 41460045     .ENABLED.TRUE.FA
 23fe138:	0045534c 4f464e49 284f445f 65640029     LSE.INFO_DO().de
 23fe148:	00646976 6f766564 72660073 656d6565     vid.devos.freeme
 23fe158:	7075006d 656d6974 70797400 756d0065     m.uptime.type.mu
 23fe168:	76006e6f 46007265 35322d53 31323730     on.ver.FS-250721
 23fe178:	25003176 64252d64 73642500 73626f00     v1.%d-%d.%ds.obs
 23fe188:	64250069 626f006d 00697473 746e3274     i.%dm.obsti.t2nt
 23fe198:	63726400 326e0074 776e0073 73737700     .drct.n2s.nw.wss
 23fe1a8:	71737700 32302500 30253a78 253a7832     .wsq.%02x:%02x:%
 23fe1b8:	3a783230 78323025 3230253a 30253a78     02x:%02x:%02x:%0
 23fe1c8:	6d007832 69006361 616d0070 67006b73     2x.mac.ip.mask.g
 23fe1d8:	77657461 64007961 6400736e 73706368     ateway.dns.dhcps
 23fe1e8:	73736200 63006469 69007173 0069736d     .bssid.csq.imsi.
 23fe1f8:	44003461 20545349 44004d35 20545349     a4.DIST 5M.DIST 
 23fe208:	004d3031 00324752 6100534e 73250035     10M.RG2.NS.a5.%s
 23fe218:	31584d42 29732528 42732500 2832584d     BMX1(%s).%sBMX2(
 23fe228:	00297325 434d7325 25003150 50434d73     %s).%sMCP1.%sMCP
 23fe238:	73250032 3350434d 3174672f 4d732500     2.%sMCP3/gt1.%sM
 23fe248:	2f345043 00327467 48537325 25003154     CP4/gt2.%sSHT1.%
 23fe258:	54485373 73250032 31434448 48732500     sSHT2.%sHDC1.%sH
 23fe268:	00324344 504c7325 25003153 53504c73     DC2.%sLPS1.%sLPS
 23fe278:	73250032 38484948 53732500 73250049     2.%sHIH8.%sSI.%s
 23fe288:	4c4d4556 42732500 2500584c 35534173     VEML.%sBLX.%sAS5
 23fe298:	00303036 4c547325 73250057 004d5354     600.%sTLW.%sTSM.
 23fe2a8:	4d547325 25004d53 00494873 42577325     %sTMSM.%sHI.%sWB
 23fe2b8:	73250054 54474257 472f5720 45424f4c     T.%sWBGT W/GLOBE
 23fe2c8:	57732500 20544742 472f4f57 45424f4c     .%sWBGT WO/GLOBE
 23fe2d8:	50732500 4135324d 73250051 25284752     .%sPM25AQ.%sRG(%
 23fe2e8:	73002973 6f736e65 25007372 64252c64     s).sensors.%d,%d
 23fe2f8:	4d64252c 6c007a48 0061726f 64656c6f     ,%dMHz.lora.oled
 23fe308:	65637300 286e6970 00297325 00656373     .scepin(%s).sce.
 23fe318:	4f3a4453 286e6570 6f666e49 52524529     SD:Open(Info)ERR
 23fe328:	464e4900 503e2d4f 4f204255 64255b4b     .INFO->PUB OK[%d
 23fe338:	4e49005d 3e2d4f46 20425550 00525245     ].INFO->PUB ERR.
 23fe348:	3a53324e 6c627550 00687369 3a53324e     N2S:Publish.N2S:
 23fe358:	74706d45 324e0079 64255b53 2d73255d     Empty.N2S[%d]%s-
 23fe368:	4255503e 004b4f3a 5b53324e 255d6425     >PUB:OK.N2S[%d]%
 23fe378:	503e2d73 523a4255 59525445 53324e00     s->PUB:RETRY.N2S
 23fe388:	5d64255b 3e2d7325 3a425550 00525245     [%d]%s->PUB:ERR.
 23fe398:	3a53324e 2053424f 6465654e 4e006465     N2S:OBS Needed.N
 23fe3a8:	4f3a5332 46205342 004c4c55 5b53324e     2S:OBS FULL.N2S[
 23fe3b8:	2d5d6425 524f423e 5252453a 53324e00     %d]->BOR:ERR.N2S
 23fe3c8:	504f3e2d 453a4e45 52005252 59414c45     ->OPEN:ERR.RELAY
 23fe3d8:	324e3e2d 49570053 493a4946 6c61766e     ->N2S.WIFI:Inval
 23fe3e8:	53206469 4957005a 4f3a4946 006e6570     id SZ.WIFI:Open.
 23fe3f8:	49464957 3d44493a 6c6c754e 72724520     WIFI:ID=Null Err
 23fe408:	4f554d00 4957004e 493a4946 73255b44     .MUON.WIFI:ID[%s
 23fe418:	7245205d 49570072 533a4946 3d444953     ] Err.WIFI:SSID=
 23fe428:	6c6c754e 72724520 46495700 57503a49     Null Err.WIFI:PW
 23fe438:	6c754e3d 7245206c 454e0072 524f5754     =Null Err.NETWOR
 23fe448:	45533a4b 49572054 57004946 3a494649     K:SET WIFI.WIFI:
 23fe458:	44495353 5d73255b 46495700 57503a49     SSID[%s].WIFI:PW
 23fe468:	5d73255b 46495700 61503a49 63697472     [%s].WIFI:Partic
 23fe478:	4320656c 64756f6c 73694420 6e6e6f63     le Cloud Disconn
 23fe488:	00746365 49464957 7275543a 676e696e     ect.WIFI:Turning
 23fe498:	66664f20 6c654320 616c756c 49570072      Off Cellular.WI
 23fe4a8:	543a4946 696e7275 4f20676e 6957206e     FI:Turning On Wi
 23fe4b8:	57006966 3a494649 61656c43 20646572     fi.WIFI:Cleared 
 23fe4c8:	69666957 65724320 57007364 3a494649     Wifi Creds.WIFI:
 23fe4d8:	61656c43 69572072 43206966 73646572     Clear Wifi Creds
 23fe4e8:	72724520 46495700 72433a49 6e656465      Err.WIFI:Creden
 23fe4f8:	6c616974 65532073 49570074 433a4946     tials Set.WIFI:C
 23fe508:	65646572 6169746e 5320736c 45207465     redentials Set E
 23fe518:	57007272 3a494649 6e6e6f43 20746365     rr.WIFI:Connect 
 23fe528:	6c6c6143 57006465 3a494649 4e45504f     Called.WIFI:OPEN
 23fe538:	5b525245 005d7325 49464957 4953553a     ERR[%s].WIFI:USI
 23fe548:	4320474e 554c4c45 0052414c 4f464957     NG CELLULAR.WIFO
 23fe558:	464f4e3a 20454c49 4e495355 45432047     :NOFILE USING CE
 23fe568:	4c554c4c 57005241 3a494649 44534f4e     LLULAR.WIFI:NOSD
 23fe578:	49535520 4320474e 554c4c45 0052414c      USING CELLULAR.
 23fe588:	5754454e 3a4b524f 20544553 4c4c4543     NETWORK:SET CELL
 23fe598:	4c454300 61503a4c 63697472 4320656c     .CELL:Particle C
 23fe5a8:	64756f6c 73694420 6e6e6f63 00746365     loud Disconnect.
 23fe5b8:	4c4c4543 7275543a 676e696e 66664f20     CELL:Turning Off
 23fe5c8:	46695720 45430069 433a4c4c 7261656c      WiFi.CELL:Clear
 23fe5d8:	57206465 20696669 64657243 45430073     ed Wifi Creds.CE
 23fe5e8:	433a4c4c 7261656c 66695720 72432069     LL:Clear Wifi Cr
 23fe5f8:	20736465 00727245 4c4c4543 7275543a     eds Err.CELL:Tur
 23fe608:	676e696e 206e4f20 6c6c6543 72616c75     ning On Cellular
 23fe618:	706f4300 67697279 5b207468 35323032     .Copyright [2025
 23fe628:	555b205d 6576696e 74697372 6f432079     ] [University Co
 23fe638:	726f7072 6f697461 6f66206e 74412072     rporation for At
 23fe648:	70736f6d 69726568 65522063 72616573     mospheric Resear
 23fe658:	005d6863 3a53324e 73697845 4e007374     ch].N2S:Exists.N
 23fe668:	4e3a5332 00656e6f 4e3a4643 7325204f     2S:None.CF:NO %s
 23fe678:	53732500 43545300 4c41563a 53004449     .%sS.STC:VALID.S
 23fe688:	213a4354 494c4156 53500044 0064253a     TC:!VALID.PS:%d.
 23fe698:	253a5342 50420064 64253a43 3230252e     BS:%d.BPC:%d.%02
 23fe6a8:	6f440064 69746341 44006e6f 7463416f     d.DoAction.DoAct
 23fe6b8:	3a6e6f69 44004b4f 7463416f 3a6e6f69     ion:OK.DoAction:
 23fe6c8:	00525245 432b5441 0d494d49 4d49000a     ERR.AT+CIMI...IM
 23fe6d8:	4e3a4953 4d490046 253a4953 6f430073     SI:NF.IMSI:%s.Co
 23fe6e8:	63656e6e 00646574 52205357 65726665     nnected.WS Refre
 23fe6f8:	52206873 69757165 00646572 3a525245     sh Required.ERR:
 23fe708:	206f4e20 636f6c43 6144006b 20796c69      No Clock.Daily 
 23fe718:	6f626552 5200746f 6f6f6265 676e6974     Reboot.Rebooting
 23fe728:	6d274900 696c4120 20216576 3f796857     .I'm Alive! Why?
 23fe738:	776f4c00 776f5020 00217265 65776f50     .Low Power!.Powe
 23fe748:	676e6972 776f4420 6f50006e 20726577     ring Down.Power 
 23fe758:	612d6552 696c7070 00006465              Re-applied..

023fe764 <_ZTVN8particle11SPISettingsE>:
	...
 23fe76c:	023e4f91 023e4ec5 023e4edb              .O>..N>..N>.

023fe778 <_ZTV6FsFile>:
	...
 23fe780:	023e4ed9 023e4ee9 023e5263 023e5259     .N>..N>.cR>.YR>.
 23fe790:	023e51d1 023e523b 023e4f39 023e4ef7     .Q>.;R>.9O>..N>.
 23fe7a0:	023f8dc9                                ..?.

023fe7a4 <_ZL5s_fwd>:
 23fe7a4:	7b777c63 c56f6bf2 2b670130 76abd7fe     c|w{.ko.0.g+...v
 23fe7b4:	7dc982ca f04759fa afa2d4ad c072a49c     ...}.YG.......r.
 23fe7c4:	2693fdb7 ccf73f36 f1e5a534 1531d871     ...&6?..4...q.1.
 23fe7d4:	c323c704 9a059618 e2801207 75b227eb     ..#..........'.u
 23fe7e4:	1a2c8309 a05a6e1b b3d63b52 842fe329     ..,..nZ.R;..)./.
 23fe7f4:	ed00d153 5bb1fc20 39becb6a cf584c4a     S... ..[j..9JLX.
 23fe804:	fbaaefd0 85334d43 7f02f945 a89f3c50     ....CM3.E...P<..
 23fe814:	8f40a351 f5389d92 21dab6bc d2f3ff10     Q.@...8....!....
 23fe824:	ec130ccd 1744975f 3d7ea7c4 73195d64     ...._.D...~=d].s
 23fe834:	dc4f8160 88902a22 14b8ee46 db0b5ede     `.O."*..F....^..
 23fe844:	0a3a32e0 5c240649 62acd3c2 79e49591     .2:.I.$\...b...y
 23fe854:	6d37c8e7 a94ed58d eaf4566c 08ae7a65     ..7m..N.lV..ez..
 23fe864:	2e2578ba c6b4a61c 1f74dde8 8a8bbd4b     .x%.......t.K...
 23fe874:	66b53e70 0ef60348 b9573561 9e1dc186     p>.fH...a5W.....
 23fe884:	1198f8e1 948ed969 e9871e9b df2855ce     ....i........U(.
 23fe894:	0d89a18c 6842e6bf 0f2d9941 16bb54b0     ......BhA.-..T..

023fe8a4 <_ZL5s_inv>:
 23fe8a4:	d56a0952 38a53630 9ea340bf fbd7f381     R.j.06.8.@......
 23fe8b4:	8239e37c 87ff2f9b 44438e34 cbe9dec4     |.9../..4.CD....
 23fe8c4:	32947b54 3d23c2a6 0b954cee 4ec3fa42     T{.2..#=.L..B..N
 23fe8d4:	66a12e08 b224d928 49a25b76 25d18b6d     ...f(.$.v[.Im..%
 23fe8e4:	64f6f872 16986886 cc5ca4d4 92b6655d     r..d.h....\.]e..
 23fe8f4:	5048706c dab9edfd 5746155e 849d8da7     lpHP....^.FW....
 23fe904:	00abd890 0ad3bc8c 0558e4f7 0645b3b8     ..........X...E.
 23fe914:	8f1e2cd0 020f3fca 03bdafc1 6b8a1301     .,...?.........k
 23fe924:	4111913a eadc674f cecff297 73e6b4f0     :..AOg.........s
 23fe934:	2274ac96 8535ade7 e837f9e2 6edf751c     ..t"..5...7..u.n
 23fe944:	711af147 89c5291d 0e62b76f 1bbe18aa     G..q.)..o.b.....
 23fe954:	4b3e56fc 2079d2c6 fec0db9a f45acd78     .V>K..y ....x.Z.
 23fe964:	33a8dd1f 31c70788 591012b1 5fec8027     ...3...1...Y'.._
 23fe974:	a97f5160 0d4ab519 9f7ae52d ef9cc993     `Q....J.-.z.....
 23fe984:	4d3be0a0 b0f52aae 3cbbebc8 61995383     ..;M.*.....<.S.a
 23fe994:	7e042b17 26d677ba 631469e1 7d0c2155     .+.~.w.&.i.cU!.}

023fe9a4 <_ZTV20Adafruit_BMP280_Temp>:
	...
 23fe9ac:	023eeadb 023eeadd 023ee273 023ef105     ..>...>.s.>...>.
 23fe9bc:	023eeaf9                                ..>.

023fe9c0 <_ZTV24Adafruit_BMP280_Pressure>:
	...
 23fe9c8:	023eead9 023eeaeb 023ee273 023ef2c5     ..>...>.s.>...>.
 23fe9d8:	023eeb41                                A.>.

023fe9dc <_ZL4font>:
 23fe9dc:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
 23fe9ec:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
 23fe9fc:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
 23fea0c:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
 23fea1c:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
 23fea2c:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
 23fea3c:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
 23fea4c:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
 23fea5c:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
 23fea6c:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
 23fea7c:	00000000 5f000000 07000000 14000700     ......._........
 23fea8c:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
 23fea9c:	00502056 00030708 41221c00 22410000     V P......."A..A"
 23feaac:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
 23feabc:	08080800 00000808 20006060 02040810     ........``. ....
 23feacc:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
 23feadc:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
 23feaec:	41314949 07091121 49494936 49494636     II1A!...6III6FII
 23feafc:	00001e29 00000014 00003440 22140800     ).......@4....."
 23feb0c:	14141441 41001414 02081422 06095901     A......A"....Y..
 23feb1c:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
 23feb2c:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
 23feb3c:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
 23feb4c:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
 23feb5c:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
 23feb6c:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
 23feb7c:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
 23feb8c:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
 23feb9c:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
 23febac:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
 23febbc:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
 23febcc:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
 23febdc:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
 23febec:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
 23febfc:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
 23fec0c:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
 23fec1c:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
 23fec2c:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
 23fec3c:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
 23fec4c:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
 23fec5c:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
 23fec6c:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
 23fec7c:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
 23fec8c:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
 23fec9c:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
 23fecac:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
 23fecbc:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
 23feccc:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
 23fecdc:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
 23fecec:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
 23fecfc:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
 23fed0c:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
 23fed1c:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
 23fed2c:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
 23fed3c:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
 23fed4c:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
 23fed5c:	00ff0000 ff101010 14141400 101000ff     ................
 23fed6c:	10ff00ff f010f010 fc141414 f7141400     ................
 23fed7c:	0000ff00 14ff00ff fc04f414 10171414     ................
 23fed8c:	1f10101f 14141f10 10001f14 00f01010     ................
 23fed9c:	1f000000 10101010 1010101f 0010f010     ................
 23fedac:	10ff0000 10101010 10101010 000010ff     ................
 23fedbc:	0014ff00 ff00ff00 101f0000 fc000017     ................
 23fedcc:	1414f404 14171017 f404f414 00ff0000     ................
 23feddc:	141414f7 14141414 14f700f7 14171414     ................
 23fedec:	101f1010 1414141f 101014f4 00f010f0     ................
 23fedfc:	1f101f00 1f000000 00000014 000014fc     ................
 23fee0c:	10f010f0 ff10ff10 ff141414 10101014     ................
 23fee1c:	0000001f ff10f000 ffffffff f0f0f0f0     ................
 23fee2c:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
 23fee3c:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
 23fee4c:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
 23fee5c:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
 23fee6c:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
 23fee7c:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
 23fee8c:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
 23fee9c:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
 23feeac:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
 23feebc:	00000018 30001010 0101ff40 01011f00     .......0@.......
 23feecc:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....

023feedc <_ZTV12Adafruit_GFX>:
	...
 23feeec:	023f01a9 023f89ef 023e4431 023efbb1     ..?...?.1D>...>.
 23feefc:	023efbb3 023efbe5 023efbc1 023efbd3     ..>...>...>...>.
 23fef0c:	023efaf3 023efbb1 023efddb 023efdd9     ..>...>...>...>.
 23fef1c:	023efbfd 023efc3b 023efc75 023efcbb     ..>.;.>.u.>...>.
 23fef2c:	023efcd7 023efd59 3950434d 00383038     ..>.Y.>.MCP9808.

023fef3c <_ZTV16Adafruit_MCP9808>:
	...
 23fef44:	023f086d 023f086f 023ee273 023f09dd     m.?.o.?.s.>...?.
 23fef54:	023f087d                                }.?.

023fef58 <_ZL12splash1_data>:
 23fef58:	00000000 00800100 00000000 00000000     ................
 23fef68:	00008003 00000000 07000000 000000c0     ................
 23fef78:	00000000 c0070000 00000000 00000000     ................
 23fef88:	00c00f00 00000000 00000000 0000e01f     ................
 23fef98:	00000000 1f000000 000000e0 00000000     ................
 23fefa8:	e03f0000 00000000 00000000 00f03f00     ..?..........?..
	...
 23fefc0:	0000f07f 00000000 7ff81f00 000000f0     ................
 23fefd0:	00000000 f07ffe3f 00000000 3f000000     ....?..........?
 23fefe0:	00f07fff 00000000 ff1f0000 0000e0fb     ................
 23feff0:	00000000 f9ff0f00 0000c0ff 00000000     ................
 23ff000:	fff9ff0f 000000f8 07000000 fffff1ff     ................
 23ff010:	00000000 fc030000 80ffff73 00000000     ........s.......
 23ff020:	3ffe0100 0080ffff 00000000 0f1eff00     ...?............
 23ff030:	000000ff 00000000 fc1ffe7f 00000000     ................
 23ff040:	3f000000 00f8ffff 00000000 df0f0000     ...?............
 23ff050:	0000e0ff 00000000 ff191f00 000000c0     ................
 23ff060:	00000000 00ff3c3f 00000000 7e000000     ....?<.........~
 23ff070:	0000f87c 00000000 fe7f0000 0000007c     |...........|...
 23ff080:	00000000 fcffff00 00000000 00000000     ................
 23ff090:	00feffff 00000000 ff000000 0000feff     ................
 23ff0a0:	00000000 efff0100 000000fe 00000000     ................
 23ff0b0:	fecfff01 00000000 03000000 00fe07ff     ................
 23ff0c0:	00000000 fc030000 0000fe07 00000000     ................
 23ff0d0:	03f00300 000000fe 00000000 fe008001     ................
	...
 23ff0e8:	007e0000 00000000 00000000 00003e00     ..~..........>..
	...
 23ff100:	0000000c 07000000 00fc0080 00c00300     ................
 23ff110:	80070000 0000fc01 0000c003 01800700     ................
 23ff120:	030000fc 000000c0 e0018007 1e000000     ................
 23ff130:	07000000 00e00180 001e0000 9ff7e37f     ................
 23ff140:	78e7fdf9 ffc0df7b fdbffff7 7b78fffd     ...x{.........x{
 23ff150:	f7ffc0df fdfdbfff df7b78ff 87f7f0c0     .........x{.....
 23ff160:	ffe13dbc 00de7b78 bc87f7f0 78f0e13d     .=..x{......=..x
 23ff170:	0000de7b 3d8087f7 7b78e0e1 f77f00de     {......=..x{....
 23ff180:	e1fd9f87 de7b78e0 87f7ff00 e0e1fdbf     .....x{.........
 23ff190:	00de7b78 bc87f7f0 78e0e13d f000de7b     x{......=..x{...
 23ff1a0:	3dbc87f7 7b78e0e1 f7f000de e13dbc87     ...=..x{......=.
 23ff1b0:	de7b78e0 fff7ff00 e0e1fdbf c0dffb7f     .x{.............
 23ff1c0:	bffff7ff 7fe0e1fd 7cc0dffb 3d9ff3f3     ...........|...=
 23ff1d0:	7b3ee0e1 0000c0cf 00000000 00000000     ..>{............
 23ff1e0:	ffffff00 ffffffff c0ffffff ffffffff     ................
 23ff1f0:	11db68fd ffc0311a fdffffff 6afb5a2b     .h...1......+Z.j
 23ff200:	ffffc0ef 4bfdffff 331a3b5b ffffffc0     .......K[;.3....
 23ff210:	5b6bfdff c0fd6adb                       ..k[.j..

023ff218 <_ZL12splash2_data>:
 23ff218:	00600000 00000000 00000000 00000000     ..`.............
 23ff228:	0000e000 00000000 00000000 01000000     ................
 23ff238:	000000e0 00000000 00000000 f0010000     ................
	...
 23ff254:	00f00300 00000000 00000000 00000000     ................
 23ff264:	0000f007 00000000 00000000 07000000     ................
 23ff274:	000000f8 00000000 00000000 f80f0000     ................
 23ff284:	03000000 007e00c0 00e00100 00f80f7f     ......~.........
 23ff294:	c0030000 0000fe00 ff00e001 0000f8ef     ................
 23ff2a4:	00c00300 010000fe ffff00e0 000000f8     ................
 23ff2b4:	f000c003 0f000000 7ffe7f00 030000c0     ................
 23ff2c4:	00f000c0 000f0000 f87ffe3f cffbf13f     ........?...?...
 23ff2d4:	bcf3fefc 1fe0ef3d 7fff7ffe fedffffb     ....=...........
 23ff2e4:	3dbcfffe c61fe0ef fb7fffff fefedfff     ...=............
 23ff2f4:	ef3dbcff c7e30fe0 c37b78fe fff01ede     ..=......x{.....
 23ff304:	00ef3dbc fc87ff07 dec37b78 3cf8f01e     .=......x{.....<
 23ff314:	0100ef3d 00f0ffff 1ec0c37b 3d3cf0f0     =.......{.....<=
 23ff324:	f30100ef fb3fe07f f0fecfc3 ef3d3cf0     ......?......<=.
 23ff334:	3fe30300 c3fb7f80 f0f0fedf 00ef3d3c     ...?........<=..
 23ff344:	003ce707 dec37b78 3cf0f01e 0700ef3d     ..<.x{.....<=...
 23ff354:	7800beff 1edec37b 3d3cf0f0 ff0700ef     ...x{.....<=....
 23ff364:	7b7800fe f01edec3 ef3d3cf0 feff0f00     ..x{.....<=.....
 23ff374:	fffb7f00 f0f0fedf e0effd3f 00ffff0f     ........?.......
 23ff384:	dffffb7f 3ff0f0fe 0fe0effd 3e00fff9     .......?.......>
 23ff394:	9ecff979 3d1ff0f0 f11fe0e7 000000ff     y......=........
	...
 23ff3ac:	ff801f00 ffff7f00 ffffffff e0ffffff     ................
 23ff3bc:	007f001c ffffff7f 886db4fe 00e0188d     ..........m.....
 23ff3cc:	7f001f00 feffffff b57dad95 0000e077     ..........}.w...
 23ff3dc:	ff7f000f a5feffff 198d9dad 060000e0     ................
 23ff3ec:	ffff7f00 adb5feff e07eb5ed              ..........~.

023ff3f8 <_ZTV16Adafruit_SSD1306>:
	...
 23ff400:	023f0f61 023f0f79 023f01a9 023f89ef     a.?.y.?...?...?.
 23ff410:	023f0f8d 023efbb1 023efbb3 023efbe5     ..?...>...>...>.
 23ff420:	023efbc1 023efbd3 023efaf3 023efbb1     ..>...>...>...>.
 23ff430:	023efddb 023f112b 023f17e7 023f1799     ..>.+.?...?...?.
 23ff440:	023efc75 023efcbb 023efcd7 023efd59     u.>...>...>.Y.>.

023ff450 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
 23ff450:	e0c08000 fefcf8f0                       ........

023ff458 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
 23ff458:	07030100 7f3f1f0f                       ......?.

023ff460 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
 23ff460:	a880d5ae                                ....

023ff464 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
 23ff464:	8d4000d3                                ..@.

023ff468 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
 23ff468:	c8a10020                                 ...

023ff46c <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
 23ff46c:	a6a440db                                 .@....

023ff472 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
 23ff472:	21ff0022                                 "..!..

023ff478 <CSWTCH.30>:
 23ff478:	00c80064 03200190 ffffffff ffffffff     d..... .........
 23ff488:	ffff0032 ffffffff 00000019              2...........

023ff494 <CSWTCH.35>:
 23ff494:	3f800000 40000000 3e000000 3e800000     ...?...@...>...>

023ff4a4 <_ZTV15RHGenericDriver>:
	...
 23ff4ac:	023f1fc1 023e4431 023e4431 023e4431     ..?.1D>.1D>.1D>.
 23ff4bc:	023e4431 023f1fc5 023f1fd7 023f205d     1D>...?...?.] ?.
 23ff4cc:	023f2035 023f2081 023f1fe1 023f1fe9     5 ?.. ?...?...?.
 23ff4dc:	023f1fed 023f1ff1 023f1ff5 023f1ff9     ..?...?...?...?.
 23ff4ec:	023f1fe5 023f2005 023f2009 023f200d     ..?.. ?.. ?.. ?.
 23ff4fc:	023f2011 023f2015 023f201b 023f201f     . ?.. ?.. ?.. ?.
 23ff50c:	023f1fe1 023f2023 023f2029 023f202f     ..?.# ?.) ?./ ?.

023ff51c <_ZTV12RHGenericSPI>:
	...
 23ff524:	023e4431 023f20e1 023f20e3 023e4431     1D>.. ?.. ?.1D>.
 23ff534:	023e4431 023f20eb 023f20ef 023f20f3     1D>.. ?.. ?.. ?.
 23ff544:	023f20e5 023f20e7 023f20e9              . ?.. ?.. ?.

023ff550 <_ZTV13RHHardwareSPI>:
	...
 23ff558:	023f2169 023f217d 023f218b 023f2199     i!?.}!?..!?..!?.
 23ff568:	023f2205 023f20eb 023f20ef 023f20f3     ."?.. ?.. ?.. ?.
 23ff578:	023f2213 023f2227 023f210d              ."?.'"?..!?.

023ff584 <_ZTV11RHSPIDriver>:
	...
 23ff58c:	023f2245 023e4431 023e4431 023e4431     E"?.1D>.1D>.1D>.
 23ff59c:	023e4431 023f1fc5 023f1fd7 023f205d     1D>...?...?.] ?.
 23ff5ac:	023f2035 023f2081 023f1fe1 023f1fe9     5 ?.. ?...?...?.
 23ff5bc:	023f1fed 023f1ff1 023f1ff5 023f1ff9     ..?...?...?...?.
 23ff5cc:	023f1fe5 023f2005 023f2009 023f200d     ..?.. ?.. ?.. ?.
 23ff5dc:	023f2011 023f2015 023f201b 023f201f     . ?.. ?.. ?.. ?.
 23ff5ec:	023f1fe1 023f2023 023f2029 023f202f     ..?.# ?.) ?./ ?.

023ff5fc <_ZL18MODEM_CONFIG_TABLE>:
 23ff5fc:	92047472 94480474 0cc47804              rt..t.H..x..

023ff608 <_ZTV7RH_RF95>:
	...
 23ff610:	023f2859 023f270f 023f2409 023f274b     Y(?..'?..$?.K'?.
 23ff620:	023f23c1 023f1fc5 023f1fd7 023f205d     .#?...?...?.] ?.
 23ff630:	023f2035 023f2081 023f23c5 023f1fe9     5 ?.. ?..#?...?.
 23ff640:	023f1fed 023f1ff1 023f1ff5 023f1ff9     ..?...?...?...?.
 23ff650:	023f1fe5 023f2005 023f2009 023f200d     ..?.. ?.. ?.. ?.
 23ff660:	023f2011 023f2015 023f201b 023f201f     . ?.. ?.. ?.. ?.
 23ff670:	023f23ef 023f2023 023f2029 023f202f     .#?.# ?.) ?./ ?.
 23ff680:	41465845 61660054 64656c69 206f7420     EXFAT.failed to 
 23ff690:	64616572 67657220 72646441 3230253d     read regAddr=%02
 23ff6a0:	6f632078 3d746e75 66007525 656c6961     x count=%u.faile
 23ff6b0:	6f742064 61657220 65722064 64644167     d to read regAdd
 23ff6c0:	30253d72 73207832 3d746174 46006425     r=%02x stat=%d.F
 23ff6d0:	2054554f 20646964 20746f6e 48206f67     OUT did not go H
 23ff6e0:	00484749 20746f6e 65746564 64657463     IGH.not detected
 23ff6f0:	69616600 2064656c 77206f74 65746972     .failed to write
 23ff700:	67657220 72646441 3230253d 74732078      regAddr=%02x st
 23ff710:	253d7461 65730064 54445774 00642520     at=%d.setWDT %d.
 23ff720:	63746177 676f6468 656c6320 64657261     watchdog cleared
 23ff730:	65526220 746c7573 0064253d 63746177      bResult=%d.watc
 23ff740:	676f6468 74657320 756f6620 63655372     hdog set fourSec
 23ff750:	64253d73 65526220 746c7573 0064253d     s=%d bResult=%d.
 23ff760:	43544157 474f4448 45454400 4f505f50     WATCHDOG.DEEP_PO
 23ff770:	5f524557 4e574f44 554f4300 4f44544e     WER_DOWN.COUNTDO
 23ff780:	545f4e57 52454d49 414c4100 66004d52     WN_TIMER.ALARM.f
 23ff790:	756c6961 69206572 7075206e 65746164     ailure in update
 23ff7a0:	656b6157 73616552 25206e6f 61770064     WakeReason %d.wa
 23ff7b0:	7220656b 6f736165 203d206e 25007325     ke reason = %s.%
 23ff7c0:	2d643430 64323025 3230252d 30252064     04d-%02d-%02d %0
 23ff7d0:	253a6432 3a643230 64323025 74656700     2d:%02d:%02d.get
 23ff7e0:	41637452 206d5473 73007325 74527465     RtcAsTm %s.setRt
 23ff7f0:	54734163 7325206d 69616600 6572756c     cAsTm %s.failure
 23ff800:	206e6920 52746573 72466374 6d546d6f      in setRtcFromTm
 23ff810:	00642520 20746573 74737973 63206d65      %d.set system c
 23ff820:	6b636f6c 6f726620 5452206d 73252043     lock from RTC %s
 23ff830:	69616600 2064656c 64206f74 63657465     .failed to detec
 23ff840:	42412074 35303831 70706100 3162612e     t AB1805.app.ab1
 23ff850:	00353038                                805.

023ff854 <_ZTV6AB1805>:
	...
 23ff85c:	023f5bf5 023f5bf7 023f6107 023f618d     .[?..[?..a?..a?.

023ff86c <_ZTVN5spark13CellularClassE>:
	...
 23ff874:	023f76ff 023f76f5 023f76eb 023f76b9     .v?..v?..v?..v?.
 23ff884:	023e4fef 023e4ffb 023f8719 023f8721     .O>..O>...?.!.?.
 23ff894:	023f76df 023f76d7 023f76cd 023f76c3     .v?..v?..v?..v?.
 23ff8a4:	023f886d 023f8751 023f8759 006e616e     m.?.Q.?.Y.?.nan.
 23ff8b4:	00666e69 0066766f                       inf.ovf.

023ff8bc <_ZTV14CellularSignal>:
	...
 23ff8c4:	023f778d 023f77b5 023f778f 023f77c5     .w?..w?..w?..w?.
 23ff8d4:	023f77f9 023f7825 023f7859 023f7a1d     .w?.%x?.Yx?..z?.
 23ff8e4:	023f7793 023f77af fffffffc 00000000     .w?..w?.........
 23ff8f4:	023f7a69                                iz?.

023ff8f8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ff900:	023f7a89 023f7a8f 023f7acd 023f7a9d     .z?..z?..z?..z?.
 23ff910:	023f7a8b                                .z?.

023ff914 <_ZTVN5spark13EthernetClassE>:
	...
 23ff91c:	023f80d7 023f80cd 023f80c3 023f80b9     ..?...?...?...?.
 23ff92c:	023f80ad 023f80a1 023f8719 023f8721     ..?...?...?.!.?.
 23ff93c:	023f8095 023f808d 023f8083 023f8079     ..?...?...?.y.?.
 23ff94c:	023f886d 023f8751 023f8759              m.?.Q.?.Y.?.

023ff958 <_ZTV7TwoWire>:
	...
 23ff960:	023f80f5 023f813f 023f8117 023f80f7     ..?.?.?...?...?.
 23ff970:	023f811f 023f8127 023f812f 023f8137     ..?.'.?./.?.7.?.
 23ff980:	023f8dc9                                ..?.

023ff984 <_ZTV9IPAddress>:
	...
 23ff98c:	023f8309 023f82f9 023f82fb 756c6c25     ..?...?...?.%llu
 23ff99c:	2a2e2500 7500666c 78343025 00000000     .%.*lf.u%04x....

023ff9ac <_ZTVN5spark16JSONBufferWriterE>:
	...
 23ff9b4:	023f83e9 023f83eb 023f83f9 023f841f     ..?...?...?...?.
 23ff9c4:	00707061                                app.

023ff9c8 <CSWTCH.165>:
 23ff9c8:	1007aef4 1007aeb8 1007af98 1007af14     ................

023ff9d8 <_ZTVN5spark12NetworkClassE>:
	...
 23ff9e0:	023f86d9 023f86e3 023f86ed 023f86f7     ..?...?...?...?.
 23ff9f0:	023f8701 023f870d 023f8719 023f8721     ..?...?...?.!.?.
 23ffa00:	023f8729 023f8735 023f873d 023f8747     ).?.5.?.=.?.G.?.
 23ffa10:	023f886d 023f8751 023f8759              m.?.Q.?.Y.?.

023ffa1c <_ZTVN8particle18OutputStringStreamE>:
	...
 23ffa24:	023f8a1b 023f8a1d 023f89d7 023f8a2d     ..?...?...?.-.?.

023ffa34 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 23ffa34:	18100800 38302820 33302b25 30253a64     .... (08%+03d:%0
 23ffa44:	25007532 6d252d59 5464252d 253a4825     2u.%Y-%m-%dT%H:%
 23ffa54:	53253a4d 61007a25 69746373 0000656d     M:%S%z.asctime..

023ffa64 <_ZTV11USARTSerial>:
	...
 23ffa6c:	023f9411 023f947d 023f9455 023f89ef     ..?.}.?.U.?...?.
 23ffa7c:	023f9425 023f9441 023f9433 023f944f     %.?.A.?.3.?.O.?.
 23ffa8c:	023f8dc9 023f9413 023f9417              ..?...?...?.

023ffa98 <_ZTV9USBSerial>:
	...
 23ffaa0:	023f94c1 023f9529 023f94ff 023f89ef     ..?.).?...?...?.
 23ffab0:	023f94f1 023f94c3 023f94d3 023f9523     ..?...?...?.#.?.
 23ffac0:	023f8dc9 023f94e3 023f94bb              ..?...?...?.

023ffacc <_ZTVN5spark9WiFiClassE>:
	...
 23ffad4:	023f9683 023f9679 023f966f 023f9617     ..?.y.?.o.?...?.
 23ffae4:	023f9663 023f9657 023f8719 023f8721     c.?.W.?...?.!.?.
 23ffaf4:	023f964b 023f9643 023f9639 023f962f     K.?.C.?.9.?./.?.
 23ffb04:	023f886d 023f8751 023f8759              m.?.Q.?.Y.?.

023ffb10 <_ZTV10WiFiSignal>:
	...
 23ffb18:	023f95e3 023f9621 023f95e5 023f968d     ..?.!.?...?...?.
 23ffb28:	023f96c1 023f96ed 023f9721              ..?...?.!.?.

023ffb34 <_ZSt7nothrow>:
 23ffb34:	00000000                                ....

023ffb38 <atanhi>:
 23ffb38:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
 23ffb48:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

023ffb58 <atanlo>:
 23ffb58:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
 23ffb68:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

023ffb78 <CSWTCH.8>:
 23ffb78:	54442d18 bfe921fb 7f3321d2 4002d97c     .-DT.!...!3.|..@
 23ffb88:	7f3321d2 c002d97c                       .!3.|...

023ffb90 <CSWTCH.9>:
 23ffb90:	00000000 80000000 54442d18 400921fb     .........-DT.!.@
 23ffba0:	54442d18 c00921fb 00000000              .-DT.!......

023ffbac <npio2_hw>:
 23ffbac:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
 23ffbbc:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
 23ffbcc:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
 23ffbdc:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
 23ffbec:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
 23ffbfc:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
 23ffc0c:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
 23ffc1c:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

023ffc2c <two_over_pi>:
 23ffc2c:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
 23ffc3c:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
 23ffc4c:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
 23ffc5c:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
 23ffc6c:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
 23ffc7c:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
 23ffc8c:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
 23ffc9c:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
 23ffcac:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
 23ffcbc:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
 23ffccc:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
 23ffcdc:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
 23ffcec:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
 23ffcfc:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
 23ffd0c:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
 23ffd1c:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
 23ffd2c:	0060e27b 00c08c6b 00000000              {.`.k.......

023ffd38 <PIo2>:
 23ffd38:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
 23ffd48:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
 23ffd58:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
 23ffd68:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

023ffd78 <init_jk>:
 23ffd78:	00000002 00000003 00000004 00000006     ................

023ffd88 <TWO52>:
 23ffd88:	00000000 43300000 00000000 c3300000     ......0C......0.
 23ffd98:	73332e25 332e2520 64332573 322e2520     %.3s %.3s%3d %.2
 23ffda8:	2e253a64 253a6432 2064322e 000a6425     d:%.2d:%.2d %d..

023ffdb8 <day_name.1>:
 23ffdb8:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
 23ffdc8:	61536972                                 riSat

023ffdcd <mon_name.0>:
 23ffdcd:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
 23ffddd:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
 23ffded:	63654476 4e454552 616d2054 636f6c6c     vDecREENT malloc
 23ffdfd:	63757320 64656563 2f006465 2f706d74      succeeded./tmp/
 23ffe0d:	6b6e656a 2d736e69 2d434347 702d3031     jenkins-GCC-10-p
 23ffe1d:	6c657069 2d656e69 325f3834 31303230     ipeline-48_20201
 23ffe2d:	5f343231 36303631 36303831 732f3933     124_1606180639/s
 23ffe3d:	6e2f6372 696c7765 656e2f62 62696c77     rc/newlib/newlib
 23ffe4d:	62696c2f 69742f63 672f656d 6d69746d     /libc/time/gmtim
 23ffe5d:	00632e65 706d742f 6e656a2f 736e696b     e.c./tmp/jenkins
 23ffe6d:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
 23ffe7d:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
 23ffe8d:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
 23ffe9d:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
 23ffead:	696c6474 61722f62 632e646e               tdlib/rand.c.

023ffeba <_ctype_>:
 23ffeba:	20202000 20202020 28282020 20282828     .         ((((( 
 23ffeca:	20202020 20202020 20202020 20202020                     
 23ffeda:	10108820 10101010 10101010 10101010      ...............
 23ffeea:	04040410 04040404 10040404 10101010     ................
 23ffefa:	41411010 41414141 01010101 01010101     ..AAAAAA........
 23fff0a:	01010101 01010101 01010101 10101010     ................
 23fff1a:	42421010 42424242 02020202 02020202     ..BBBBBB........
 23fff2a:	02020202 02020202 02020202 10101010     ................
 23fff3a:	00000020 00000000 00000000 00000000      ...............
	...

023fffbb <link_const_data_end>:
	...

023fffbc <link_constructors_location>:
 23fffbc:	023ebb21 	.word	0x023ebb21
 23fffc0:	023f2235 	.word	0x023f2235
 23fffc4:	023f6691 	.word	0x023f6691
 23fffc8:	023f76a9 	.word	0x023f76a9
 23fffcc:	023f775d 	.word	0x023f775d
 23fffd0:	023f8069 	.word	0x023f8069
 23fffd4:	023f80e1 	.word	0x023f80e1
 23fffd8:	023f8289 	.word	0x023f8289
 23fffdc:	023f86c9 	.word	0x023f86c9
 23fffe0:	023f8881 	.word	0x023f8881
 23fffe4:	023f8bb9 	.word	0x023f8bb9
 23fffe8:	023f9011 	.word	0x023f9011
 23fffec:	023f93fd 	.word	0x023f93fd
 23ffff0:	023f9815 	.word	0x023f9815
